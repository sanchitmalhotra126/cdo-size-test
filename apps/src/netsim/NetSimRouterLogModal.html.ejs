<%
var Packet = require('./Packet');
var i18n = require('./locale');
var NetSimGlobals = require('./NetSimGlobals');

var headerFields = NetSimGlobals.getLevelConfig().routerExpectsPacketHeader;

/** @type {boolean} */
var showToAddress = headerFields.indexOf(Packet.HeaderType.TO_ADDRESS) > -1;

/** @type {boolean} */
var showFromAddress = headerFields.indexOf(Packet.HeaderType.FROM_ADDRESS) > -1;

/** @type {boolean} */
var showPacketInfo = headerFields.indexOf(Packet.HeaderType.PACKET_INDEX) > -1 &&
    headerFields.indexOf(Packet.HeaderType.PACKET_COUNT) > -1;

/**
 * @name isAllRouterLogMode
 * @type {boolean}
 */

/**
 * @name canToggleRouterLogMode
 * @type {boolean}
 */

/**
 * @name currentTrafficFilter
 * @type {string}
 */

/**
 * @name canCycleTrafficFilterMode
 * @type {boolean}
 */

/**
 * @name sortBy
 * @type {string}
 */

/**
 * @name sortDescending
 * @type {boolean}
 */

function routerLogModeToggleButton() {
  if (!locals.canToggleRouterLogMode) {
    return '';
  }

  var markup = '<button type="button" id="routerlog-toggle" class="pull-right btn btn-primary btn-mini">';
  if (locals.isAllRouterLogMode) {
    markup += i18n.logBrowserHeader_toggleMine()
  } else {
    markup += i18n.logBrowserHeader_toggleAll()
  }
  markup += '</button>';
  return markup;
}

/**
 * Intentionally mirrors NetSimRouterLogModal.cycleTrafficFilterMode_
 */
function trafficFilterCycleButton() {
  if (!locals.canCycleTrafficFilterMode) {
    return '';
  }
  var markup = '<button type="button" id="trafficfilter-cycle" class="pull-right btn btn-primary btn-mini">';
  if (/^none/.test(locals.currentTrafficFilter)) {
    markup += i18n.logBrowserHeader_showMyTraffic();
  } else if (/^with/.test(locals.currentTrafficFilter)) {
    markup += i18n.logBrowserHeader_showTrafficFromMe();
  } else if (/^from/.test(locals.currentTrafficFilter)) {
    markup += i18n.logBrowserHeader_showTrafficToMe();
  } else {
    markup += i18n.logBrowserHeader_showAllTraffic();
  }
  markup += '</button>';
  return markup;
}

function dialogTitle() {
  var header;
  if (locals.isAllRouterLogMode) {
    header = i18n.logBrowserHeader_all();
  } else {
    header = i18n.logBrowserHeader_mine();
  }

  var match = /^(from|to|with) ([\d\.]+)/.exec(locals.currentTrafficFilter);
  if (match) {
    if ('from' === match[1]) {
      header += i18n.logBrowserHeader_trafficFromAddress({
        address: match[2]
      });
    } else if ('to' === match[1]) {
      header += i18n.logBrowserHeader_trafficToAddress({
        address: match[2]
      });
    } else if ('with' === match[1]) {
      header += i18n.logBrowserHeader_trafficToAndFromAddress({
        address: match[2]
      });
    }
  }
  return header;
}

function sortMarkupFor(sortKey) {
  if (sortKey === locals.sortBy) {
    if (locals.sortDescending) {
      return '<i class="fa fa-sort-desc"></i>';
    } else {
      return '<i class="fa fa-sort-asc"></i>';
    }
  }
  return '';
}
%>
<div class="modal-dialog modal-lg">
    <div class="modal-header">
      <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
      <%- routerLogModeToggleButton(); %>
      <%- trafficFilterCycleButton(); %>
      <h4 class="modal-title"><%= dialogTitle() %></h4>
    </div>
    <div class="modal-body">
      <table>
        <thead>
          <tr>
            <th nowrap data-sort-key="timestamp"><%= i18n.time() %> <%- sortMarkupFor('timestamp') %></th>
            <th nowrap data-sort-key="logged-by"><%= i18n.loggedByNode() %> <%- sortMarkupFor('logged-by') %></th>
            <th nowrap data-sort-key="status"><%= i18n.status() %> <%- sortMarkupFor('status') %></th>
            <% if (showFromAddress) { %>
              <th nowrap data-sort-key="from-address"><%= i18n.from() %> <%- sortMarkupFor('from-address') %></th>
            <% } %>
            <% if (showToAddress) { %>
              <th nowrap data-sort-key="to-address"><%= i18n.to() %> <%- sortMarkupFor('to-address') %></th>
            <% } %>
            <% if (showPacketInfo) { %>
              <th nowrap data-sort-key="packet-info"><%= i18n.packet() %> <%- sortMarkupFor('packet-info') %></th>
            <% } %>
            <th nowrap data-sort-key="message"><%= i18n.message() %> <%- sortMarkupFor('message') %></th>
          </tr>
        </thead>
        <tbody>
        </tbody>
      </table>
    </div>
    <div class="modal-footer">
      <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
    </div>
</div>
