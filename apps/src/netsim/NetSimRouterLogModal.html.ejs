<%
var Packet = require('./Packet');
var i18n = require('./locale');
var netsimGlobals = require('./netsimGlobals');

var headerFields = netsimGlobals.getLevelConfig().routerExpectsPacketHeader;

/** @type {boolean} */
var showToAddress = headerFields.indexOf(Packet.HeaderType.TO_ADDRESS) > -1;

/** @type {boolean} */
var showFromAddress = headerFields.indexOf(Packet.HeaderType.FROM_ADDRESS) > -1;

/** @type {boolean} */
var showPacketInfo = headerFields.indexOf(Packet.HeaderType.PACKET_INDEX) > -1 &&
    headerFields.indexOf(Packet.HeaderType.PACKET_COUNT) > -1;

function sortMarkupFor(sortKey) {
  if (sortKey === sortBy) {
    return '<i class="fa fa-sort-asc"></i>';
  }
  return '';
}
%>
<div class="modal-dialog modal-lg">
    <div class="modal-header">
      <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
      <h4 class="modal-title"><%= i18n.logBrowserHeader() %></h4>
    </div>
    <div class="modal-body">
      <table>
        <thead>
          <tr>
            <th data-sort-key="timestamp"><%= i18n.time() %> <%- sortMarkupFor('timestamp') %></th>
            <th data-sort-key="logged-by"><%= i18n.loggedByNode() %> <%- sortMarkupFor('logged-by') %></th>
            <th data-sort-key="status"><%= i18n.status() %> <%- sortMarkupFor('status') %></th>
            <% if (showFromAddress) { %>
              <th data-sort-key="from-address"><%= i18n.from() %> <%- sortMarkupFor('from-address') %></th>
            <% } %>
            <% if (showToAddress) { %>
              <th data-sort-key="to-address"><%= i18n.to() %> <%- sortMarkupFor('to-address') %></th>
            <% } %>
            <% if (showPacketInfo) { %>
              <th data-sort-key="packet-info"><%= i18n.packet() %> <%- sortMarkupFor('packet-info') %></th>
            <% } %>
            <th data-sort-key="message"><%= i18n.message() %> <%- sortMarkupFor('message') %></th>
          </tr>
        </thead>
        <tbody>
          <%
            logEntries.forEach(function (entry) {
              var originNode = entry.getOriginNode();
              %>
              <tr>
                <td><%= entry.getTimeString() %></td>
                <td><%= originNode ? originNode.getDisplayName() : entry.nodeID %></td>
                <td><%= entry.getLocalizedStatus() %></td>
                <% if (showFromAddress) { %>
                  <td><%= entry.getHeaderField(Packet.HeaderType.FROM_ADDRESS) %></td>
                <% } %>
                <% if (showToAddress) { %>
                  <td><%= entry.getHeaderField(Packet.HeaderType.TO_ADDRESS) %></td>
                <% } %>
                <% if (showPacketInfo) { %>
                  <td><%= entry.getLocalizedPacketInfo() %></td>
                <% } %>
                <td><%= entry.getMessageAscii() %></td>
              </tr>
              <%
            });
          %>
        </tbody>
      </table>
    </div>
    <div class="modal-footer">
      <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
    </div>
</div>