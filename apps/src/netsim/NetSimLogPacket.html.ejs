<%
  var netsimConstants = require('./netsimConstants');
  var PacketHeaderType = netsimConstants.PacketHeaderType;
  var i18n = require('../../locale/current/netsim');
  var PacketEncoder = require('./PacketEncoder');
  var dataConverters = require('./dataConverters');
  var formatBinary = dataConverters.formatBinary;
  var formatHex = dataConverters.formatHex;
  var alignDecimal = dataConverters.alignDecimal;
  var binaryToInt = dataConverters.binaryToInt;
  var binaryToHex = dataConverters.binaryToHex;
  var binaryToDecimal = dataConverters.binaryToDecimal;
  var binaryToAscii = dataConverters.binaryToAscii;

  /** @type {PacketEncoder} */
  var encoder = new PacketEncoder(packetSpec);

  /** @type {PacketHeaderType[]} */
  var headerFields = packetSpec.map(function (headerField) {
    return headerField.key;
  });

  var showToAddress = headerFields.indexOf(PacketHeaderType.TO_ADDRESS) > -1;
  var showFromAddress = headerFields.indexOf(PacketHeaderType.FROM_ADDRESS) > -1;
  var showPacketInfo = headerFields.indexOf(PacketHeaderType.PACKET_INDEX) > -1 &&
      headerFields.indexOf(PacketHeaderType.PACKET_COUNT) > -1;

  function getEncodingLabel(rowClass) {
    if (rowClass === 'ascii') {
      return i18n.ascii();
    } else if (rowClass === 'decimal') {
      return i18n.decimal();
    } else if (rowClass === 'hexadecimal') {
      return i18n.hex();
    } else if (rowClass === 'binary') {
      return i18n.binary();
    }
    return '';
  }

  function logRow(rowClass, toAddress, fromAddress, packetInfo, message) {
    %>
      <tr class="<%= rowClass %>">
        <th nowrap class="encodingLabel"><%= getEncodingLabel(rowClass) %></th>
        <% if (showToAddress) { %>
          <td nowrap class="toAddress"><%= toAddress %></td>
        <% } %>
        <% if (showFromAddress) { %>
          <td nowrap class="fromAddress"><%= fromAddress %></td>
        <% } %>
        <% if (showPacketInfo) { %>
          <td nowrap class="packetInfo"><%= packetInfo %></td>
        <% } %>
        <td class="message"><%= message %></td>
      </tr>
  <%
  }
 %>
<table>
  <thead>
    <tr>
      <th nowrap class="encodingLabel"></th>
      <% if (showToAddress) { %>
        <th nowrap class="toAddress"><%= i18n.to() %></th>
      <% } %>
      <% if (showFromAddress) { %>
        <th nowrap class="fromAddress"><%= i18n.from() %></th>
      <% } %>
      <% if (showPacketInfo) { %>
        <th nowrap class="packetInfo"><%= i18n.packet() %></th>
      <% } %>
      <th nowrap class="message"><%= i18n.message() %></th>
    </tr>
  </thead>
  <tbody>
  <%
    var toAddress = showToAddress ? encoder.getField(PacketHeaderType.TO_ADDRESS, packetBinary) : '';
    var fromAddress = showFromAddress ? encoder.getField(PacketHeaderType.FROM_ADDRESS, packetBinary) : '';
    var packetIndex = showPacketInfo ? encoder.getField(PacketHeaderType.PACKET_INDEX, packetBinary) : '';
    var packetCount = showPacketInfo ? encoder.getField(PacketHeaderType.PACKET_COUNT, packetBinary) : '';
    var message = encoder.getBody(packetBinary);

    logRow('ascii',
        binaryToInt(toAddress),
        binaryToInt(fromAddress),
        i18n.xOfY({
          x: binaryToInt(packetIndex),
          y: binaryToInt(packetCount)
        }),
        binaryToAscii(message, chunkSize));

    logRow('decimal',
        binaryToInt(toAddress),
        binaryToInt(fromAddress),
        i18n.xOfY({
          x: binaryToInt(packetIndex),
          y: binaryToInt(packetCount)
        }),
        alignDecimal(binaryToDecimal(message, chunkSize)));

    logRow('hexadecimal',
        binaryToHex(toAddress),
        binaryToHex(fromAddress),
        i18n.xOfY({
          x: binaryToHex(packetIndex),
          y: binaryToHex(packetCount)
        }),
        formatHex(binaryToHex(message), chunkSize));

    logRow('binary',
        formatBinary(toAddress, 4),
        formatBinary(fromAddress, 4),
        formatBinary(packetIndex, 4) + ' ' + formatBinary(packetCount, 4),
        formatBinary(message, chunkSize));
   %>
  </tbody>
</table>