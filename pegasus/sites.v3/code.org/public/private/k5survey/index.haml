- authentication_required!
- forbidden! unless dashboard_user[:admin]

:ruby
  surveys = DB[:forms].where(kind:'K5ProfessionalDevelopmentSurvey')
  pd_workshops = PEGASUS_DB[:forms].where(kind: 'ProfessionalDevelopmentWorkshop')
  def fetch_workshop_info(workshop_id)
    workshop = DB[:forms].where(id:workshop_id.to_i).first
    return {} unless workshop
    JSON.parse(workshop[:data]).merge(JSON.parse(workshop[:processed_data])).merge({'user_id'=>workshop[:user_id]})
  end

  def satisfaction_s_to_i(value)
    case value
    when 'extremely satisfied (would recommend to others)'
      return 5
    when 'moderately satisfied'
      return 4
    when 'neither satisfied nor dissatisfied'
      return 3
    when 'moderately dissatisfied'
      return 2
    when 'dissatisfied (would not recommend to others)'
      return 1
    end
  end

  def get_more(section_id)
    # a row for each teacher trained by an affiliate
    DASHBOARD_DB[:followers].
      where(section_id: section_id).
      join(:users, id: :student_user_id).
      select(:users__id___id, :users__name___name, :users__email___email)
      #select(:users__id___id, :users__name___name, :users__email___email).map do |teacher|

      # get data on students of the teacher
      #teacher_user_id = teacher[:id]
      #next unless teacher_user_id

      #students = DASHBOARD_DB[:followers].
        #where(user_id: teacher_user_id).
        #join(:users, id: :student_user_id).
        #select(:users__id___id, :users__created_at___created_at)

      #if students.count > 0
        #lifetime = students.map{|s| (Time.now - s[:created_at]) / (60 * 60 * 24)}.reduce(:+) / students.count.to_f

        #levels = students.map do |s|
          #DASHBOARD_DB[:user_levels].
            #where(user_id: s[:id]).
            #and("best_result >= #{ActivityConstants::MINIMUM_PASS_RESULT}").
            #count
        #end.reduce(:+) / students.count.to_f
      #else
        #lifetime = 0
        #levels = 0
      #end

      #{
        #teacher_name: teacher[:name],
        #teacher_email: teacher[:email],
        #affiliate_name: affiliate[:name],
        #affiliate_email: affiliate[:user_id],
       # students_count: students.count,
        #students_count: 5,
        #students_average_lifetime_days: lifetime.round,
        #students_average_levels_completed: levels.round(2)
      #}
    #end.compact
  end

  def generate_professional_development_workshop_teachers_report
    # generate a report about the teachers trained by affiliates and their students' progress
    PEGASUS_DB[:forms].where(kind: 'ProfessionalDevelopmentWorkshop').map do |affiliate|
      data = JSON.parse(affiliate[:data]) rescue {}

      section_id = data['section_id_s']
      next unless section_id

      # a row for each teacher trained by an affiliate
      DASHBOARD_DB[:followers].
        where(section_id: section_id).
        join(:users, id: :student_user_id).
        select(:users__id___id, :users__name___name, :users__email___email).map do |teacher|

        # get data on students of the teacher
        teacher_user_id = teacher[:id]
        next unless teacher_user_id

        students = DASHBOARD_DB[:followers].
          where(user_id: teacher_user_id).
          join(:users, id: :student_user_id).
          select(:users__id___id, :users__created_at___created_at)

        if students.count > 0
          lifetime = students.map{|s| (Time.now - s[:created_at]) / (60 * 60 * 24)}.reduce(:+) / students.count.to_f

          levels = students.map do |s|
            DASHBOARD_DB[:user_levels].
            where(user_id: s[:id]).
            and("best_result >= #{ActivityConstants::MINIMUM_PASS_RESULT}").
            count
          end.reduce(:+) / students.count.to_f
        else
          lifetime = 0
          levels = 0
        end

        {
          teacher_name: teacher[:name],
          teacher_email: teacher[:email],
          affiliate_name: affiliate[:name],
          affiliate_email: affiliate[:user_id],
          students_count: students.count,
          students_average_lifetime_days: lifetime.round,
          students_average_levels_completed: levels.round(2)
        }
      end.compact
    end.compact.flatten
  end

%h1
  K5 Survey Statistics

%table
  %tr
    %th
      Name
    %th
      User ID
    %th
      \# of qualified teachers attending workshops
    %th
      \# of teachers paid for
    %th
      \# of resulting students
    %th
      Average student progress / student lifetime
    %th
      \# of teachers surveyed
    %th
      \% in-service teachers
    %th
      \% in-school vs after/home school
    %th
      \% plan to offer the course
    %th
      Overall satisfaction

  - surveys.each do |row|
    - data = JSON.parse(row[:data]).merge(JSON.parse(row[:processed_data]))
    - workshop = fetch_workshop_info data['workshop_id_i']
    - data['workshop_stopped_dt'] = workshop['stopped_dt']
    - data['workshop_facilitator_email'] = workshop['user_id']
    - data['workshop_facilitator_name'] = workshop['name_s']
    - data['satisfaction_s'] = satisfaction_s_to_i(data['satisfaction_s'])

    %tr
      %td
        #{data}
      %td
        #{workshop}
    %tr
      %td
        #{data['workshop_facilitator_name']}
      %td
        #{data['workshop_facilitator_email']}
      %td
      %td
      %td
      %td
      %td
      %td
      %td
      %td
      %td
        #{data['satisfaction_s']}
      -#%td
      -#  #{data['workshop_stopped_dt']}
      -#%td
      -#  #{data['teacher_years_s']}
      -#%td
      -#  #{data['send_materials_zip_s']}
%table
  - pd_workshops.each do |row|
    - data = JSON.parse(row[:data]) rescue {}
    - section_id = data['section_id_s']
    - next unless section_id
    -#- temp = get_more(section_id)
    - more = DASHBOARD_DB[:followers].where(section_id: section_id).join(:users, id: :student_user_id).select(:users__id___id, :users__name___name, :users__email___email)

    %tr
      %td
        - if more
          #{more.first}