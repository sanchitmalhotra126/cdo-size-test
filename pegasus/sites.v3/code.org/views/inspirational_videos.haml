- fallback_player = true

%link{href: "http://vjs.zencdn.net/5.2.4/video-js.css", rel: "stylesheet"}
%script{src: "http://vjs.zencdn.net/ie8/1.1.0/videojs-ie8.min.js"}

- videos = []
- videos << { id: 'girlpower', code: 'mFPg96gdPkc', text: 'Inspire a girl', duration: '2 min', download: 'http://videos.code.org/social/ChangeTheWorld_v5.mp4'}
- videos << { id: 'csintro',   code: '_IiPLtP-jm8', text: 'Computer Science intro', duration: '1 min', download: 'http://videos.code.org/2015/social/hour_of_code_cs_matters.mp4'}
- videos << { id: 'dontteach', code: 'nKIu9yen5nc', text: "What Most Schools Don't Teach", duration: '5 min', download: 'https://dl.dropbox.com/sh/6sdjczibjih6x8s/Rjs8XgYNzr/Code-5-minute.mov?dl=1'}
- videos << { id: 'obama',     code: '6XvmhE1J9PY', text: 'President Obama on computer science', duration: '1 min', download: 'http://videos.code.org/2015/social/president_obama_asks_america.mp4'}
- videos << { id: 'hochere',   code: 'FC5FbmsH4fw', text: 'Hour of Code is Here - Anybody Can Learn', duration: '2 min', download: 'http://s3.amazonaws.com/cdo-videos/HoC-video-15mb.mp4'}
- videos << { id: 'learn', code: 'qYZF6oIZtfc', text: 'Anybody Can Learn', duration: '1 min', download: 'https://dl.dropbox.com/sh/6sdjczibjih6x8s/_0RSOSY8oW/Code-1-min.mov?dl=1'}

- videos.each do |video|
  .col-50{style: "float:left; padding:10px"}
    - url = "https://www.youtube.com/watch?v=#{video[:code]}"
    - facebook = {u: url}
    - twitter = {url: url, related: 'codeorg', text: "#{video[:text]} @codeorg"}
    =view :display_video_thumbnail, id: video[:id], video_code: video[:code], caption: "#{video[:text]} (#{video[:duration]})", play_button: 'center', facebook: facebook, twitter: twitter, download_path: video[:download], fallback_player: fallback_player

%div{style: 'clear: both'}
%br/
-if request.locale == 'en-US'
  %p= I18n.t(:inspirational_videos_more)


%script{src: "http://vjs.zencdn.net/5.2.4/video.js"}

:javascript

  $(document).ready(function() {
    testImageAccess(
      "https://www23.youtube.com/favicon.ico?" + Math.random(),
      function() { setupVideos(true); },
      function() { setupVideos(false); });
  });

  function setupVideos(useYoutube) {
    $(".insert_video_player").each(function() {
      if (useYoutube) {
        console.log($(this).data("video-code"));

        $(this).append(
          '<iframe style="position:absolute; top: 0; left: 0; width: 100%; height: 100%" src="https://youtube.com/v/' + $(this).data("video-code") + '?iv_load_policy=3&rel=0&autohide=1&showinfo=0&enablejsapi=1" frameborder="0" allowfullscreen=true>');
      }
      else {
        console.log($(this).data("download-path"));

        $(this).append(
          '<video id="'+ 'player1' +'" ' +
          'style="position:absolute; top: 0; left: 0; width: 100%; height: 100%"' +
          'width="100%" height="100%" ' +
          //(false ? 'autoplay ' : '') +
          'class="video-js" ' +
          'controls preload="auto" ' +
          //'poster="' + 'thumbnail.jpg' + '">' +
          '  <source src="' + $(this).data("download-path") + '" type="video/mp4"/>' +
          '</video>');
      }
    });
  }


  // Tests whether the browser can access an image URL.
  // Useful as a workaround for CORS security to test access to an origin.
  function testImageAccess(url, successCallback, failureCallback, timeoutMs) {
    timeoutMs = typeof timeoutMs !== 'undefined' ?  timeoutMs : 5000;
    var img = new Image();
    var called = false;
    function finish(callback) {
      return function() {
        if (called) {
          return;
        }
        called = true;
        window.clearTimeout(timeout);
        callback();
      }
    }
    var timeout = window.setTimeout(finish(failureCallback), timeoutMs);
    img.onerror = finish(failureCallback);
    img.onload = finish(successCallback);
    img.src = url;
    // store a reference to the Image so it doesn't get collected
    window.testImages = window.testImages || [];
    window.testImages.push(img);
  }
  window.testImageAccess = testImageAccess;



