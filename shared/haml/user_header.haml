-# Locals: current_user, loc_prefix, [session_pairings]
:ruby
  user_under_13 = request.cookies["_user_type_#{rack_env}"] == "student_y"
  options = { user_under_13: user_under_13 }
  show_updated_header = request.cookies['pm'] == 'create_header_2018'

  create_drop_down_items = CreateHeader.get_create_dropdown_contents(options)

- if show_updated_header
  .header_button.create_menu
    %span.create_button
      = I18n.t("nav.create_button.create")
    &nbsp;
    %i.create_menu_arrow_down{class: "fa fa-caret-down"}
    %i.create_menu_arrow_up{class: "fa fa-caret-up", style: "display: none"}
    .create_options{style: 'display: none'}
      - create_drop_down_items.each do |entry|
        %a.project_link_box{href: entry[:url]}
          %img{src: "/shared/images/fill-70x70/courses/#{entry[:image]}"}
          .project_link{ id: entry[:id]}
            .text= entry[:title]
      %a.project_link_box{href: CDO.studio_url('projects/public')}
        .project_link#view_all_projects
          = I18n.t("nav.create_button.view_all")
- if current_user
  - if show_updated_header
    .header_button.header_user.user_menu.user_icon
      - if current_user.can_pair? && session_pairings.present?
        %i.fa.fa-users
      - else
        %i.fa.fa-user
      .user_options{style: 'display: none'}
        - short_name = ERB::Util.h(current_user.short_name)
        .display_name{'data-id': current_user.id, 'data-shortname': short_name}= short_name
        - if current_user.can_pair?
          - if session_pairings.present?
            = link_to '#', {id: 'pairing_link', style: 'display: none'} do
              = I18n.t("#{loc_prefix}pair_programming")
              .pairing_summary
                #{I18n.t("#{loc_prefix}driver")}:
                = h(current_user.short_name)
                - session_pairings.map do |id|
                  %br
                  #{I18n.t("#{loc_prefix}navigator")}:
                  = h(User.find(id).short_name)
          - else
            = link_to '#', {id: 'pairing_link', style: 'display: none'} do
              = I18n.t("#{loc_prefix}pair_programming")
        %a.linktag#user-edit{href: CDO.studio_url('users/edit')}= I18n.t("#{loc_prefix}settings")
        %a.linktag#user-signout{href: CDO.studio_url('users/sign_out')}= I18n.t("#{loc_prefix}logout")
  - else
    .header_button.header_user.user_menu
      - if current_user.can_pair? && session_pairings.present?
        %i.fa.fa-users
        %span= I18n.t("#{loc_prefix}label", username: I18n.t("#{loc_prefix}team"))
      - else
        - short_name = ERB::Util.h(current_user.short_name)
        %span.user_name{'data-id': current_user.id, 'data-shortname': short_name}= I18n.t("#{loc_prefix}label", username: short_name)
      &nbsp;
      %i.user_menu_arrow_down{class: "fa fa-caret-down"}
      %i.user_menu_arrow_up{class: "fa fa-caret-up", style: "display: none"}
      .user_options{style: 'display: none'}
        - if current_user.can_pair?
          - if session_pairings.present?
            = link_to '#', {id: 'pairing_link', style: 'display: none'} do
              %i.fa.fa-user-plus
              = I18n.t("#{loc_prefix}pair_programming")
              .pairing_summary
                #{I18n.t("#{loc_prefix}driver")}:
                = h(current_user.short_name)
                - session_pairings.map do |id|
                  %br
                  #{I18n.t("#{loc_prefix}navigator")}:
                  = h(User.find(id).short_name)
          - else
            = link_to '#', {id: 'pairing_link', style: 'display: none'} do
              %i.fa.fa-user-plus
              = I18n.t("#{loc_prefix}pair_programming")
        %a.linktag#user-edit{href: CDO.studio_url('users/edit')}= I18n.t("#{loc_prefix}settings")
        %a.linktag#user-signout{href: CDO.studio_url('users/sign_out')}= I18n.t("#{loc_prefix}logout")
- else
  %a.linktag{href: CDO.studio_url('users/sign_in'), class: 'button-signin', id: 'signin_button'}
    .header_button.header_user
      %span= I18n.t("#{loc_prefix}signin")
:javascript
  window.cookieEnvSuffix = '#{rack_env?(:production) ? '' : "_#{rack_env}"}';
  // Use function closure to avoid cluttering global namespace.
  (function() {
    // Ideally would use environment_specific_cookie_name, but that's not currently
    // available to us in pegasus
    var cookieKey = '_shortName' + window.cookieEnvSuffix;
    // Share cookie with top-level domain.
    var topLevelDomain = document.location.hostname.split('.').slice(-2).join('.');
    var cookieMeta = "path=/;domain=" + topLevelDomain;
    var cookieMatch = document.cookie.match('(^|;) ?' + cookieKey + '=([^;]*)(;|$)');
    var storedName = cookieMatch && cookieMatch[2];

    // Provide current_user.short_name to cached pages via session cookie.
    // There is apps code that also depends on this query-selector, so if changes are made
    // here we should be sure to also update other locations.
    var nameSpan = document.querySelector('.header_button.header_user.user_menu .user_name');
    var displayNameSpan = document.querySelector('.header_button.header_user.user_menu .display_name');

    function getUserShortName(element) {
      if (element) {
        var dataName = element.dataset.shortname;
        var id = element.dataset.id;
        if (storedName && !id) {
          element.innerHTML = element.innerHTML.replace(dataName, storedName);
        }
      }
    }

    getUserShortName(nameSpan);
    getUserShortName(displayNameSpan);

    function hideUserOptions() {
      $('.user_options').slideUp();
      $('.user_menu_arrow_down').show();
      $('.user_menu_arrow_up').hide();
      $(document).off('click', hideUserOptions);
    }
    $(document).ready(function() {
      $('.user_menu').click(function (e) {
        if ($('.user_options').is(':hidden')) {
          e.stopPropagation();
          $('.user_options').slideDown();
          $('.user_menu_arrow_down').hide();
          $('.user_menu_arrow_up').show();
          $(document).on('click', hideUserOptions);

          $("#hamburger-icon").removeClass('active');
          $('#hamburger #hamburger-contents').slideUp();
        }
      });
      $('.user_options').click(function (e) {
        e.stopPropagation(); // Clicks inside the popup shouldn't close it
      });
      $('.user_options a:last').click(function (e) {
        // this partial can be on non-dashboard pages.
        if (typeof dashboard !== 'undefined') {
          dashboard.clientState.reset();
        } else {
          // Keep in sync with clientState#reset.
          try {
            sessionStorage.clear();
          } catch (e) {}
        }
      });
    });

    function hideCreateOptions() {
      $('.create_options').slideUp();
      $('.create_menu_arrow_down').show();
      $('.create_menu_arrow_up').hide();
      $(document).off('click', hideCreateOptions);
    }
    $(document).ready(function() {
      $('.create_menu').click(function (e) {
        if ($('.create_options').is(':hidden')) {
          e.stopPropagation();
          $('.create_options').slideDown();
          $('.create_menu_arrow_down').hide();
          $('.create_menu_arrow_up').show();
          $(document).on('click', hideCreateOptions);

          $("#hamburger-icon").removeClass('active');
          $('#hamburger #hamburger-contents').slideUp();
        }
      });
      $('.create_options').click(function (e) {
        e.stopPropagation(); // Clicks inside the popup shouldn't close it
      });
    });


    if (typeof dashboard !== 'undefined') {
      dashboard.pairing.init('#{CDO.studio_url('pairing')}', hideUserOptions, #{show_pairing_dialog});
    }
  })();
