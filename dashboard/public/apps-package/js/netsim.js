require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/home/ubuntu/staging/apps/build/js/netsim/main.js":[function(require,module,exports){
'use strict';

var appMain = require('../appMain');
var studioApp = require('../StudioApp').singleton;
var NetSim = require('./netsim');

var levels = require('./levels');
var skins = require('./skins');

window.netsimMain = function (options) {
  options.skinsModule = skins;
  options.isEditorless = true;

  var netSim = new NetSim();
  netSim.injectStudioApp(studioApp);
  appMain(netSim, levels, options);
};

},{"../StudioApp":"/home/ubuntu/staging/apps/build/js/StudioApp.js","../appMain":"/home/ubuntu/staging/apps/build/js/appMain.js","./levels":"/home/ubuntu/staging/apps/build/js/netsim/levels.js","./netsim":"/home/ubuntu/staging/apps/build/js/netsim/netsim.js","./skins":"/home/ubuntu/staging/apps/build/js/netsim/skins.js"}],"/home/ubuntu/staging/apps/build/js/netsim/skins.js":[function(require,module,exports){
'use strict';

var skinBase = require('../skins');

exports.load = function (assetUrl, id) {
  var skin = skinBase.load(assetUrl, id);
  return skin;
};

},{"../skins":"/home/ubuntu/staging/apps/build/js/skins.js"}],"/home/ubuntu/staging/apps/build/js/netsim/netsim.js":[function(require,module,exports){
/**
 * @overview Internet Simulator app for Code.org.
 *           This file is the main entry point for the Internet Simulator.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
*/
/* global -Blockly */
/* global sendReport */
/* global confirm */
'use strict';

var utils = require('../utils');
var _ = utils.getLodash();
var i18n = require('./locale');
var ObservableEvent = require('../ObservableEvent');
var RunLoop = require('../RunLoop');
var page = require('./page.html.ejs');
var NetSimAlert = require('./NetSimAlert');
var NetSimConstants = require('./NetSimConstants');
var NetSimUtils = require('./NetSimUtils');
var DashboardUser = require('./DashboardUser');
var NetSimBitLogPanel = require('./NetSimBitLogPanel');
var NetSimLobby = require('./NetSimLobby');
var NetSimLocalClientNode = require('./NetSimLocalClientNode');
var NetSimLogger = require('./NetSimLogger');
var NetSimLogPanel = require('./NetSimLogPanel');
var NetSimRouterLogModal = require('./NetSimRouterLogModal');
var NetSimRouterNode = require('./NetSimRouterNode');
var NetSimSendPanel = require('./NetSimSendPanel');
var NetSimShard = require('./NetSimShard');
var NetSimStatusPanel = require('./NetSimStatusPanel');
var NetSimTabsComponent = require('./NetSimTabsComponent');
var NetSimVisualization = require('./NetSimVisualization');

var DnsMode = NetSimConstants.DnsMode;
var MessageGranularity = NetSimConstants.MessageGranularity;

var logger = NetSimLogger.getSingleton();
var NetSimGlobals = require('./NetSimGlobals');

/**
 * The top-level Internet Simulator controller.
 * @param {StudioApp} studioApp The studioApp instance to build upon.
 */
var NetSim = module.exports = function () {
  /**
   * @type {Object}
   */
  this.skin = null;

  /**
   * @type {NetSimLevelConfiguration}
   */
  this.level = {};

  /**
   * @type {number}
   */
  this.heading = 0;

  /**
   * Current user object which asynchronously grabs the current user's
   * info from the dashboard API.
   * @type {DashboardUser}
   * @private
   */
  this.currentUser_ = DashboardUser.getCurrentUser();

  /**
   * Accessor object for select simulation shard's tables, where an shard
   * is a group of tables shared by a group of users, allowing them to observe
   * a common network state.
   *
   * See en.wikipedia.org/wiki/Instance_dungeon for a popular example of this
   * concept.
   *
   * @type {NetSimShard}
   * @private
   */
  this.shard_ = null;

  /**
   * The local client's node representation within the shard.
   * @type {NetSimLocalClientNode}
   */
  this.myNode = null;

  /**
   * Tick and Render loop manager for the simulator
   * @type {RunLoop}
   * @private
   */
  this.runLoop_ = new RunLoop();

  /**
   * Current chunk size (bytesize)
   * @type {number}
   * @private
   */
  this.chunkSize_ = 8;

  /**
   * The "my device" bitrate in bits per second
   * @type {number}
   * @private
   */
  this.myDeviceBitRate_ = Infinity;

  /**
   * Currently enabled encoding types.
   * @type {EncodingType[]}
   * @private
   */
  this.enabledEncodings_ = [];

  /**
   * Current dns mode.
   * @type {DnsMode}
   * @private
   */
  this.dnsMode_ = DnsMode.NONE;

  // -- Components --
  /**
   * @type {INetSimLogPanel}
   * @private
   */
  this.receivedMessageLog_ = null;

  /**
   * @type {INetSimLogPanel}
   * @private
   */
  this.sentMessageLog_ = null;

  /**
   * Event: Connected to, or disconnected from, a shard.
   * Specifically, added or removed our client node from the shard's node table.
   * @type {ObservableEvent}
   */
  this.shardChange = new ObservableEvent();
  this.shardChange.register(this.onShardChange_.bind(this));

  /**
   * Untyped storage for information about which events we have currently bound.
   * @type {Object}
   */
  this.eventKeys = {};
};

NetSim.prototype.injectStudioApp = function (studioApp) {
  this.studioApp_ = studioApp;
};

/**
 * Called on page load.
 * @param {Object} config
 * @param {Object} config.skin
 * @param {NetSimLevelConfiguration} config.level
 * @param {string} config.rackEnv - development/production/etc.
 * @param {boolean} config.enableShowCode - Always false for NetSim
 * @param {function} config.loadAudio
 * @param {string} config.html - rendered markup to be created inside this method
 */
NetSim.prototype.init = function (config) {
  if (!this.studioApp_) {
    throw new Error("NetSim requires a StudioApp");
  }

  // Set up global singleton for easy access to simulator-wide settings
  NetSimGlobals.setRootControllers(this.studioApp_, this);

  // Remove icon from all NetSim instructions dialogs
  config.skin.staticAvatar = null;
  config.skin.smallStaticAvatar = null;
  config.skin.failureAvatar = null;
  config.skin.winAvatar = null;

  /**
   * Skin for the loaded level
   * @type {Object}
   */
  this.skin = config.skin;

  /**
   * Configuration for the loaded level
   * @type {NetSimLevelConfiguration}
   */
  this.level = NetSimUtils.scrubLevelConfiguration_(config.level);

  /**
   * Current operating environment, used to drive certain configuration.
   * @type {string} one of "development"|"staging"|"test"|"production"
   */
  this.environment = config.rackEnv;

  /**
   * Whether NetSim should subscribe to events using Pusher.
   * @type {boolean}
   */
  this.usePusher = config.usePusher;

  /**
   * The public application key for the Pusher service. (Not used if not using
   * Pusher).
   * @type {string}
   */
  this.pusherApplicationKey = config.pusherApplicationKey;

  /**
   * The strict maximum number of routers per shard.  Note the real maximum
   * may be lower if bounded by addressable space.
   * @type {number}
   */
  this.globalMaxRouters = config.netsimMaxRouters;

  /**
   * Configuration for reporting level completion
   * @type {Object}
   */
  this.reportingInfo_ = config.report;

  config.html = page({
    assetUrl: this.studioApp_.assetUrl,
    data: {
      visualization: '',
      localeDirection: this.studioApp_.localeDirection(),
      controls: require('./controls.html.ejs')({ assetUrl: this.studioApp_.assetUrl })
    },
    hideRunButton: true
  });

  config.enableShowCode = false;
  config.pinWorkspaceToBottom = true;
  config.loadAudio = this.loadAudio_.bind(this);

  // Override certain StudioApp methods - netsim does a lot of configuration
  // itself, because of its nonstandard layout.
  this.studioApp_.configureDom = NetSim.configureDomOverride_.bind(this.studioApp_);
  this.studioApp_.onResize = NetSim.onResizeOverride_.bind(this.studioApp_);

  this.studioApp_.init(config);

  // Create netsim lobby widget in page
  this.currentUser_.whenReady((function () {
    this.initWithUser_(this.currentUser_);
  }).bind(this));

  // Begin the main simulation loop
  this.runLoop_.tick.register(this.tick.bind(this));
  this.runLoop_.begin();
};

/**
 * @param {RunLoop.Clock} clock
 */
NetSim.prototype.tick = function (clock) {
  if (this.isConnectedToShard()) {
    this.myNode.tick(clock);
    this.shard_.tick(clock);
  }
};

/**
 * Pull an identifier from the URL that separates this level's shard from others.
 * @returns {string}
 */
NetSim.prototype.getUniqueLevelKey = function () {
  return location.pathname.substr(1).replace(/\W/g, '-');
};

/**
 * Extracts query parameters from a full URL and returns them as a simple
 * object.
 * @returns {*}
 */
NetSim.prototype.getOverrideShardID = function () {
  var parts = location.search.split('?');
  if (parts.length === 1) {
    return undefined;
  }

  var shardID;
  parts[1].split('&').forEach(function (param) {
    var sides = param.split('=');
    if (sides.length > 1 && sides[0] === 's') {
      shardID = sides[1];
    }
  });
  return shardID;
};

/**
 * @returns {boolean} TRUE if the level is configured to show any tabs.
 */
NetSim.prototype.shouldShowAnyTabs = function () {
  return this.level.showTabs.length > 0;
};

/**
 * Initialization that can happen once we have a user name.
 * Could collapse this back into init if at some point we can guarantee that
 * user name is available on load.
 * @param {DashboardUser} user
 * @private
 */
NetSim.prototype.initWithUser_ = function (user) {
  this.mainContainer_ = $('#netsim');

  // Create log panels according to level configuration
  if (this.level.messageGranularity === MessageGranularity.PACKETS) {
    this.receivedMessageLog_ = new NetSimLogPanel($('#netsim-received'), {
      logTitle: i18n.receivedMessageLog(),
      isMinimized: false,
      hasUnreadMessages: true,
      packetSpec: this.level.clientInitialPacketHeader
    });

    this.sentMessageLog_ = new NetSimLogPanel($('#netsim-sent'), {
      logTitle: i18n.sentMessageLog(),
      isMinimized: true,
      hasUnreadMessages: false,
      packetSpec: this.level.clientInitialPacketHeader
    });
  } else if (this.level.messageGranularity === MessageGranularity.BITS) {
    this.receivedMessageLog_ = new NetSimBitLogPanel($('#netsim-received'), {
      logTitle: i18n.receiveBits(),
      isMinimized: false,
      netsim: this,
      showReadWireButton: true
    });

    this.sentMessageLog_ = new NetSimBitLogPanel($('#netsim-sent'), {
      logTitle: i18n.sentBitsLog(),
      isMinimized: false,
      netsim: this
    });
  }

  this.statusPanel_ = new NetSimStatusPanel($('#netsim-status'), {
    disconnectCallback: this.disconnectFromRemote.bind(this, function () {})
  });

  this.routerLogModal_ = new NetSimRouterLogModal($('#router-log-modal'));

  this.visualization_ = new NetSimVisualization($('#netsim-visualization'), this.runLoop_);

  // Lobby panel: Controls for picking a remote node and connecting to it.
  this.lobby_ = new NetSimLobby($('.lobby-panel'), this, {
    user: user,
    levelKey: this.getUniqueLevelKey(),
    sharedShardSeed: this.getOverrideShardID()
  });

  // Tab panel - contains instructions, my device, router, dns
  if (this.shouldShowAnyTabs()) {
    this.tabs_ = new NetSimTabsComponent($('#netsim-tabs'), this.runLoop_, {
      chunkSizeSliderChangeCallback: this.setChunkSize.bind(this),
      myDeviceBitRateChangeCallback: this.setMyDeviceBitRate.bind(this),
      encodingChangeCallback: this.changeEncodings.bind(this),
      routerBandwidthSliderChangeCallback: this.setRouterBandwidth.bind(this),
      routerBandwidthSliderStopCallback: this.changeRemoteRouterBandwidth.bind(this),
      routerMemorySliderChangeCallback: this.setRouterMemory.bind(this),
      routerMemorySliderStopCallback: this.changeRemoteRouterMemory.bind(this),
      dnsModeChangeCallback: this.changeRemoteDnsMode.bind(this),
      becomeDnsCallback: this.becomeDnsNode.bind(this)
    });
    this.tabs_.attachToRunLoop(this.runLoop_);
  }

  this.sendPanel_ = new NetSimSendPanel($('#netsim-send'), this.level, this);

  this.changeEncodings(this.level.defaultEnabledEncodings);
  this.setChunkSize(this.level.defaultChunkSizeBits);
  this.setMyDeviceBitRate(this.level.defaultBitRateBitsPerSecond);
  this.setRouterBandwidth(this.level.defaultRouterBandwidth);
  this.setRouterMemory(this.level.defaultRouterMemory);
  this.setDnsMode(this.level.defaultDnsMode);
  this.render();

  // Try and gracefully disconnect when closing the window
  window.addEventListener('beforeunload', this.onBeforeUnload_.bind(this));
  window.addEventListener('unload', this.onUnload_.bind(this));
  window.addEventListener('resize', _.debounce(this.updateLayout.bind(this), 250));
};

/**
 * Before-unload handler, used to warn the user (if necessary) of what they
 * are abandoning if they navigate away from the page.
 *
 * This event has some weird special properties and inconsistent behavior
 * across browsers
 *
 * See:
 * https://developer.mozilla.org/en-US/docs/Web/Events/beforeunload
 * http://www.zachleat.com/web/dont-let-the-door-hit-you-onunload-and-onbeforeunload/
 * http://www.hunlock.com/blogs/Mastering_The_Back_Button_With_Javascript
 *
 * @param {Event} event
 * @returns {string|undefined} If we want to warn the user before they leave
 *          the page, this method will return a warning string, which may or
 *          may not actually be used by the browser to present a warning.  If
 *          we don't want to warn the user, this method doesn't return anything.
 * @private
 */
NetSim.prototype.onBeforeUnload_ = function (event) {
  if (window.__TestInterface && window.__TestInterface.ignoreOnBeforeUnload) {
    return;
  }

  // No need to warn about navigating away if the student is not connected,
  // or is still in the lobby.
  if (this.isConnectedToRemote()) {
    event.returnValue = i18n.onBeforeUnloadWarning();
    return i18n.onBeforeUnloadWarning();
  }
};

/**
 * Unload handler.  Used to attempt a clean disconnect from the simulation
 * using synchronous AJAX calls to remove our own rows from remote storage.
 *
 * See:
 * https://developer.mozilla.org/en-US/docs/Web/Events/unload
 *
 * @private
 */
NetSim.prototype.onUnload_ = function () {
  if (this.isConnectedToShard()) {
    this.synchronousDisconnectFromShard_();
  }
};

/**
 * Whether we are currently connected to a netsim shard
 * @returns {boolean}
 */
NetSim.prototype.isConnectedToShard = function () {
  return null !== this.myNode;
};

/**
 * Whether we are currently connected to a shard with the given ID
 * @param {string} shardID
 * @returns {boolean}
 */
NetSim.prototype.isConnectedToShardID = function (shardID) {
  return this.isConnectedToShard() && this.shard_.id === shardID;
};

/**
 * Establishes a new connection to a netsim shard, closing the old one
 * if present.
 * @param {!string} shardID
 * @param {!string} displayName
 */
NetSim.prototype.connectToShard = function (shardID, displayName) {
  if (this.isConnectedToShard()) {
    logger.warn("Auto-closing previous connection...");
    this.disconnectFromShard(this.connectToShard.bind(this, shardID, displayName));
    return;
  }

  this.shard_ = new NetSimShard(shardID, NetSimGlobals.getPubSubConfig());
  this.createMyClientNode_(displayName, (function (err, myNode) {
    this.myNode = myNode;
    this.shardChange.notifyObservers(this.shard_, this.myNode);
  }).bind(this));
};

/**
 * Given a lobby table has already been configured, connects to that table
 * by inserting a row for ourselves into that table and saving the row ID.
 * @param {!string} displayName
 * @param {!NodeStyleCallback} onComplete - result is new local node
 * @private
 */
NetSim.prototype.createMyClientNode_ = function (displayName, onComplete) {
  NetSimLocalClientNode.create(this.shard_, displayName, (function (err, node) {
    if (err) {
      logger.error("Failed to create client node; " + err.message);
      NetSimAlert.error(i18n.createMyClientNodeError());
      onComplete(err, null);
      return;
    }

    node.setLostConnectionCallback((function () {
      NetSimAlert.warn(i18n.alertConnectionReset());
      this.disconnectFromShard();
    }).bind(this));
    node.initializeSimulation(this.sentMessageLog_, this.receivedMessageLog_);
    onComplete(err, node);
  }).bind(this));
};

/**
 * Synchronous disconnect, for use when navigating away from the page
 * @private
 */
NetSim.prototype.synchronousDisconnectFromShard_ = function () {
  this.myNode.stopSimulation();
  this.myNode.synchronousDestroy();
  this.myNode = null;
  // Don't notify observers, this should only be used when navigating away
  // from the page.
};

/**
 * Ends the connection to the netsim shard.
 * @param {NodeStyleCallback} [onComplete]
 */
NetSim.prototype.disconnectFromShard = function (onComplete) {
  onComplete = onComplete || function () {};

  if (!this.isConnectedToShard()) {
    logger.warn("Redundant disconnect call.");
    onComplete(null, null);
    return;
  }

  if (this.isConnectedToRemote()) {
    // Disconnect, from the remote node, and try this again on completion.
    this.disconnectFromRemote(this.disconnectFromShard.bind(this, onComplete));
    return;
  }

  this.myNode.stopSimulation();
  this.myNode.destroy((function (err, result) {
    if (err) {
      logger.warn('Error destroying node:' + err.message);
      // Don't stop disconnecting on an error here; we make a good-faith
      // effort to clean up after ourselves, and let the cleaning system take
      // care of the rest.
    }

    this.myNode = null;
    this.shard_.disconnect();
    this.shard_ = null;
    this.shardChange.notifyObservers(null, null);
    onComplete(err, result);
  }).bind(this));
};

/**
 * @returns {boolean} Whether the local client is connected to a remote node
 */
NetSim.prototype.isConnectedToRemote = function () {
  return this.isConnectedToClient() || this.isConnectedToRouter();
};

/**
 * @returns {NetSimNode} the remote node our client is connected to, or null if
 *          not connected
 */
NetSim.prototype.getConnectedRemoteNode = function () {
  var client = this.getConnectedClient();
  var router = this.getConnectedRouter();
  return client ? client : router;
};

/**
 * @returns {boolean} Whether the local client has a mutual P2P connection to
 *          another client.
 */
NetSim.prototype.isConnectedToClient = function () {
  return !!this.getConnectedClient();
};

/**
 * @returns {NetSimClientNode} the client node our client is connected to, or
 *          null if not connected to another client.
 */
NetSim.prototype.getConnectedClient = function () {
  if (this.isConnectedToShard()) {
    return this.myNode.myRemoteClient;
  }
  return null;
};

/**
 * Whether our client node is connected to a router node.
 * @returns {boolean}
 */
NetSim.prototype.isConnectedToRouter = function () {
  return !!this.getConnectedRouter();
};

/**
 * @returns {NetSimRouterNode} the router node our client is connected to, or
 *          null if not connected to a router.
 */
NetSim.prototype.getConnectedRouter = function () {
  if (this.isConnectedToShard()) {
    return this.myNode.getMyRouter();
  }
  return null;
};

/**
 * Establish a connection between the local client and the given
 * simulated router.
 * @param {number} routerID
 * @param {NodeStyleCallback} onComplete
 */
NetSim.prototype.connectToRouter = function (routerID, onComplete) {
  if (this.isConnectedToRemote()) {
    // Disconnect and try to connect again when we're done.
    logger.warn("Auto-disconnecting from previous router.");
    this.disconnectFromRemote(this.connectToRouter.bind(this, routerID, onComplete));
    return;
  }

  var self = this;
  NetSimRouterNode.get(routerID, this.shard_, function (err, router) {
    if (err) {
      logger.warn('Failed to find router with ID ' + routerID + '; ' + err.message);
      onComplete(err);
      return;
    }

    self.myNode.connectToRouter(router, function (err) {
      if (err) {
        logger.warn('Failed to connect to ' + router.getDisplayName() + '; ' + err.message);
      }
      onComplete(err, router);
    });
  });
};

/**
 * Disconnects our client node from the currently connected remote node.
 * Destroys the shared wire.
 * @param {NodeStyleCallback} [onComplete] optional function to call when
 *        disconnect is complete
 */
NetSim.prototype.disconnectFromRemote = function (onComplete) {
  onComplete = utils.valueOr(onComplete, function () {});
  this.myNode.disconnectRemote(onComplete);
};

/**
 * Asynchronous fetch of the latest message shared between the local
 * node and its connected remote.
 * Used only in simplex & bit-granular mode.
 * @param {!NodeStyleCallback} onComplete
 */
NetSim.prototype.receiveBit = function (onComplete) {
  this.myNode.getLatestMessageOnSimplexWire(onComplete);
};

/**
 * Update encoding-view setting across the whole app.
 *
 * Propagates the change down into relevant child components, possibly
 * including the control that initiated the change; in that case, re-setting
 * the value should be a no-op and safe to do.
 *
 * @param {EncodingType[]} newEncodings
 */
NetSim.prototype.changeEncodings = function (newEncodings) {
  this.enabledEncodings_ = newEncodings;
  if (this.tabs_) {
    this.tabs_.setEncodings(newEncodings);
  }
  this.receivedMessageLog_.setEncodings(newEncodings);
  this.sentMessageLog_.setEncodings(newEncodings);
  this.sendPanel_.setEncodings(newEncodings);
  this.visualization_.setEncodings(newEncodings);
  this.updateLayout();
};

/**
 * Get the currently enabled encoding types.
 * @returns {EncodingType[]}
 */
NetSim.prototype.getEncodings = function () {
  return this.enabledEncodings_;
};

/**
 * Update chunk-size/bytesize setting across the whole app.
 *
 * Propagates the change down into relevant child components, possibly
 * including the control that initiated the change; in that case, re-setting
 * the value should be a no-op and safe to do.
 *
 * @param {number} newChunkSize
 */
NetSim.prototype.setChunkSize = function (newChunkSize) {
  this.chunkSize_ = newChunkSize;
  if (this.tabs_) {
    this.tabs_.setChunkSize(newChunkSize);
  }
  this.receivedMessageLog_.setChunkSize(newChunkSize);
  this.sentMessageLog_.setChunkSize(newChunkSize);
  this.sendPanel_.setChunkSize(newChunkSize);
};

/**
 * Update bitrate for the local device, which affects send-animation speed.
 * @param {number} newBitRate in bits per second
 */
NetSim.prototype.setMyDeviceBitRate = function (newBitRate) {
  this.myDeviceBitRate_ = newBitRate;
  if (this.tabs_) {
    this.tabs_.setMyDeviceBitRate(newBitRate);
  }
  this.sendPanel_.setBitRate(newBitRate);
};

/** @param {number} creationTimestampMs */
NetSim.prototype.setRouterCreationTime = function (creationTimestampMs) {
  if (this.tabs_) {
    this.tabs_.setRouterCreationTime(creationTimestampMs);
  }
};

/**
 * Update router bandwidth across the app.
 *
 * Propagates the change down into relevant child components, possibly including
 * the control that initiated the change; in that case, re-setting the value
 * should be a no-op and safe to do.
 *
 * @param {number} newBandwidth in bits/second
 */
NetSim.prototype.setRouterBandwidth = function (newBandwidth) {
  if (this.tabs_) {
    this.tabs_.setRouterBandwidth(newBandwidth);
  }
};

/**
 * Sets router bandwidth across the simulation, proagating the change to other
 * clients.
 * @param {number} newBandwidth in bits/second
 */
NetSim.prototype.changeRemoteRouterBandwidth = function (newBandwidth) {
  this.setRouterBandwidth(newBandwidth);
  if (this.isConnectedToRouter()) {
    this.getConnectedRouter().setBandwidth(newBandwidth);
  }
};

/**
 * Update router memory across the app.
 *
 * Propagates the change down into relevant child components, possibly including
 * the control that initiated the change; in that case, re-setting the value
 * should be a no-op and safe to do.
 *
 * @param {number} newMemory in bits
 */
NetSim.prototype.setRouterMemory = function (newMemory) {
  if (this.tabs_) {
    this.tabs_.setRouterMemory(newMemory);
  }
};

/**
 * Sets router memory capacity across the simulation, propagating the change
 * to other clients.
 * @param {number} newMemory in bits
 */
NetSim.prototype.changeRemoteRouterMemory = function (newMemory) {
  this.setRouterMemory(newMemory);
  if (this.isConnectedToRouter()) {
    this.getConnectedRouter().setMemory(newMemory);
  }
};

/**
 * Update DNS mode across the whole app.
 *
 * Propagates the change down into relevant child components, possibly
 * including the control that initiated the change; in that case, re-setting
 * the value should be a no-op and safe to do.
 *
 * @param {DnsMode} newDnsMode
 */
NetSim.prototype.setDnsMode = function (newDnsMode) {
  this.dnsMode_ = newDnsMode;
  if (this.tabs_) {
    this.tabs_.setDnsMode(newDnsMode);
  }
  this.visualization_.setDnsMode(newDnsMode);
};

/**
 * Get current DNS mode.
 * @returns {DnsMode}
 */
NetSim.prototype.getDnsMode = function () {
  return this.dnsMode_;
};

/**
 * Sets DNS mode across the whole simulation, propagating the change
 * to other clients.
 * @param {DnsMode} newDnsMode
 */
NetSim.prototype.changeRemoteDnsMode = function (newDnsMode) {
  this.setDnsMode(newDnsMode);
  if (this.isConnectedToRouter()) {
    this.getConnectedRouter().setDnsMode(newDnsMode);
  }
};

/**
 * @param {boolean} isDnsNode
 */
NetSim.prototype.setIsDnsNode = function (isDnsNode) {
  if (this.tabs_) {
    this.tabs_.setIsDnsNode(isDnsNode);
  }

  if (this.isConnectedToRouter()) {
    this.setDnsTableContents(this.getConnectedRouter().getAddressTable());
  }
};

/**
 * @param {number} dnsNodeID
 */
NetSim.prototype.setDnsNodeID = function (dnsNodeID) {
  this.visualization_.setDnsNodeID(dnsNodeID);
};

/**
 * Tells simulation that we want to become the DNS node for our
 * connected router.
 */
NetSim.prototype.becomeDnsNode = function () {
  this.setIsDnsNode(true);
  if (this.myNode && this.myNode.getMyRouter()) {
    // STATE IS THE ROOT OF ALL EVIL
    var myNode = this.myNode;
    var router = myNode.getMyRouter();
    router.dnsNodeID = myNode.entityID;
    router.update();
  }
};

/**
 * @param {Array} tableContents
 */
NetSim.prototype.setDnsTableContents = function (tableContents) {
  if (this.tabs_) {
    this.tabs_.setDnsTableContents(tableContents);
  }
};

/**
 * @param {Array} logData
 */
NetSim.prototype.setRouterLogData = function (logData) {
  if (this.tabs_) {
    this.tabs_.setRouterLogData(logData);
  }
};

/**
 * @param {number} queuedPacketCount
 * @private
 */
NetSim.prototype.setRouterQueuedPacketCount_ = function (queuedPacketCount) {
  if (this.tabs_) {
    this.tabs_.setRouterQueuedPacketCount(queuedPacketCount);
  }
};

/**
 * @param {number} usedMemoryInBits
 * @private
 */
NetSim.prototype.setRouterMemoryInUse_ = function (usedMemoryInBits) {
  if (this.tabs_) {
    this.tabs_.setRouterMemoryInUse(usedMemoryInBits);
  }
};

/**
 * @param {number} dataRateBitsPerSecond
 * @private
 */
NetSim.prototype.setRouterDataRate_ = function (dataRateBitsPerSecond) {
  if (this.tabs_) {
    this.tabs_.setRouterDataRate(dataRateBitsPerSecond);
  }
};

/**
 * Load audio assets for this app
 * TODO (bbuchanan): Ought to pull this into an audio management module
 * @private
 */
NetSim.prototype.loadAudio_ = function () {};

/**
 * Replaces StudioApp.configureDom.
 * Should be bound against StudioApp instance.
 * @param {Object} config Should at least contain
 *   containerId: ID of a parent DOM element for app content
 *   html: Content to put inside #containerId
 * @private
 */
NetSim.configureDomOverride_ = function (config) {
  var container = document.getElementById(config.containerId);
  container.innerHTML = config.html;

  var vizHeight = this.MIN_WORKSPACE_HEIGHT;
  var visualizationColumn = document.getElementById('netsim-leftcol');

  if (config.pinWorkspaceToBottom) {
    document.body.style.overflow = "hidden";
    container.className = container.className + " pin_bottom";
    visualizationColumn.className = visualizationColumn.className + " pin_bottom";
  } else {
    visualizationColumn.style.minHeight = vizHeight + 'px';
    container.style.minHeight = vizHeight + 'px';
  }
};

/**
 * Resize the left column so it pins above the footer.
 */
function resizeLeftColumnToSitAboveFooter() {
  var pinnedLeftColumn = document.querySelector('#netsim-leftcol.pin_bottom');
  if (!pinnedLeftColumn) {
    return;
  }

  var smallFooter = document.querySelector('#page-small-footer .small-footer-base');

  var bottom = 0;
  if (smallFooter) {
    var codeApp = $('#codeApp');
    bottom += $(smallFooter).outerHeight(true);
    // Footer is relative to the document, not codeApp, so we need to
    // remove the codeApp bottom offset to get the correct margin.
    bottom -= parseInt(codeApp.css('bottom'), 10);
  }

  pinnedLeftColumn.style.bottom = bottom + 'px';
}

function resizeFooterToFitToLeftOfContent() {
  var leftColumn = document.querySelector('#netsim-leftcol.pin_bottom');
  var instructions = document.querySelector('.instructions');
  var smallFooter = document.querySelector('#page-small-footer .small-footer-base');

  if (!smallFooter) {
    return;
  }

  var padding = parseInt(window.getComputedStyle(smallFooter)["padding-left"]);

  var boundingWidth;
  if (leftColumn && $(leftColumn).is(':visible')) {
    boundingWidth = leftColumn.getBoundingClientRect().right;
  } else if (instructions && $(instructions).is(':visible')) {
    boundingWidth = instructions.getBoundingClientRect().right;
  }

  smallFooter.style.maxWidth = boundingWidth ? boundingWidth - padding + 'px' : null;
}

var netsimDebouncedResizeFooter = _.debounce(function () {
  resizeFooterToFitToLeftOfContent();
  resizeLeftColumnToSitAboveFooter();
}, 10);

/**
 * Replaces StudioApp.onResize
 * Should be bound against StudioApp instance.
 * @private
 */
NetSim.onResizeOverride_ = function () {
  var div = document.getElementById('appcontainer');
  var divParent = div.parentNode;
  var parentStyle = window.getComputedStyle(divParent);
  var parentWidth = parseInt(parentStyle.width, 10);
  div.style.top = divParent.offsetTop + 'px';
  div.style.width = parentWidth + 'px';

  netsimDebouncedResizeFooter();
};

/**
 * Passthrough to local "static" netsimDebounceResizeFooter method
 */
NetSim.prototype.debouncedResizeFooter = function () {
  netsimDebouncedResizeFooter();
};

/**
 * Re-render parts of the page that can be re-rendered in place.
 */
NetSim.prototype.render = function () {
  if (this.isConnectedToRemote()) {
    var myAddress = this.myNode.getAddress();

    // Swap in 'connected' div
    this.mainContainer_.find('#netsim-disconnected').hide();
    this.mainContainer_.find('#netsim-connected').show();

    // Render right column
    this.sendPanel_.setFromAddress(myAddress);

    // Render left column
    if (this.statusPanel_) {
      this.statusPanel_.render({
        myHostname: this.myNode.getHostname(),
        myAddress: myAddress,
        remoteNodeName: this.getConnectedRemoteNode().getDisplayName(),
        shareLink: this.lobby_.getShareLink()
      });
    }
  } else {
    // Swap in 'disconnected' div
    this.mainContainer_.find('#netsim-disconnected').show();
    this.mainContainer_.find('#netsim-connected').hide();

    // Render lobby
    this.lobby_.render();
  }

  if (this.routerLogModal_) {
    this.routerLogModal_.render();
  }

  this.updateLayout();
};

/**
 * Called whenever the connection notifies us that we've connected to,
 * or disconnected from, a shard.
 * @param {NetSimShard} shard - null if disconnected.
 * @param {NetSimLocalClientNode} localNode - null if disconnected
 * @private
 */
NetSim.prototype.onShardChange_ = function (shard, localNode) {
  // Unregister old handlers
  if (this.eventKeys.registeredWithLocalNode) {
    this.eventKeys.registeredWithLocalNode.remoteChange.unregister(this.eventKeys.remoteChange);
    this.eventKeys.registeredWithLocalNode = null;
  }

  // Register new handlers
  if (localNode) {
    this.eventKeys.remoteChange = localNode.remoteChange.register(this.onRemoteChange_.bind(this));
    this.eventKeys.registeredWithLocalNode = localNode;
  }

  // Update the log viewer's shard reference so it can get current data.
  if (this.routerLogModal_) {
    this.routerLogModal_.setShard(shard);
  }

  // Shard changes almost ALWAYS require a re-render
  this.visualization_.setShard(shard);
  this.visualization_.setLocalNode(localNode);
  this.render();
};

/**
 * Called whenever the local node notifies that we've been connected to,
 * or disconnected from, a router.
 * @param {NetSimWire} wire - null if disconnected.
 * @param {NetSimNode} remoteNode - null if disconnected
 * @private
 */
NetSim.prototype.onRemoteChange_ = function (wire, remoteNode) {
  var routerConnectEvent = remoteNode && remoteNode instanceof NetSimRouterNode;
  var routerDisconnectEvent = !remoteNode && this.eventKeys.registeredWithRouter;

  // Unhook old handlers
  if (this.eventKeys.registeredWithRouter) {
    this.eventKeys.registeredWithRouter.stateChange.unregister(this.eventKeys.routerStateChange);
    this.eventKeys.registeredWithRouter.statsChange.unregister(this.eventKeys.routerStatsChange);
    this.eventKeys.registeredWithRouter.wiresChange.unregister(this.eventKeys.routerWiresChange);
    this.eventKeys.registeredWithRouter.logChange.unregister(this.eventKeys.routerLogChange);
    this.eventKeys.registeredWithRouter = null;
  }

  // Hook up new handlers
  if (routerConnectEvent) {
    this.eventKeys.routerStateChange = remoteNode.stateChange.register(this.onRouterStateChange_.bind(this));
    this.eventKeys.routerStatsChange = remoteNode.statsChange.register(this.onRouterStatsChange_.bind(this));
    this.eventKeys.routerWiresChange = remoteNode.wiresChange.register(this.onRouterWiresChange_.bind(this));
    this.eventKeys.routerLogChange = remoteNode.logChange.register(this.onRouterLogChange_.bind(this));
    this.eventKeys.registeredWithRouter = remoteNode;
  }

  this.render();

  if (routerConnectEvent) {
    this.onRouterConnect_(remoteNode);
  } else if (routerDisconnectEvent) {
    this.onRouterDisconnect_();
  }
};

/**
 * Steps to take when we were not connected to a router and now we are.
 * @param {NetSimRouterNode} router that we are now connected to
 * @private
 */
NetSim.prototype.onRouterConnect_ = function (router) {
  this.onRouterStateChange_(router);
  this.onRouterStatsChange_(router);
  this.setRouterLogData(router.getLog());
  this.routerLogModal_.setRouter(router);
};

/**
 * Steps to take when we were connected to a router and now we are not.
 * @private
 */
NetSim.prototype.onRouterDisconnect_ = function () {
  this.setRouterCreationTime(0);
  this.setRouterQueuedPacketCount_(0);
  this.setRouterMemoryInUse_(0);
  this.setRouterDataRate_(0);
  this.setRouterLogData([]);
  this.routerLogModal_.setRouter(null);
};

/**
 * Local response to router state changing, which may have been triggered
 * locally or remotely.
 * @param {NetSimRouterNode} router
 * @private
 */
NetSim.prototype.onRouterStateChange_ = function (router) {
  var myNode = {};
  if (this.myNode) {
    myNode = this.myNode;
  }

  this.setRouterCreationTime(router.creationTime);
  this.setRouterBandwidth(router.bandwidth);
  this.setRouterMemory(router.memory);
  this.setDnsMode(router.dnsMode);
  this.setDnsNodeID(router.dnsMode === DnsMode.NONE ? undefined : router.dnsNodeID);
  this.setIsDnsNode(router.dnsMode === DnsMode.MANUAL && router.dnsNodeID === myNode.entityID);
};

/**
 * Isolates updates that we should do when a router's stats change, since
 * these happen a lot more often.
 * @param {NetSimRouterNode} router
 * @private
 */
NetSim.prototype.onRouterStatsChange_ = function (router) {
  this.setRouterQueuedPacketCount_(router.getQueuedPacketCount());
  this.setRouterMemoryInUse_(router.getMemoryInUse());
  this.setRouterDataRate_(router.getCurrentDataRate());
};

/**
 * What to do when our connected router's local network changes.
 * @private
 */
NetSim.prototype.onRouterWiresChange_ = function () {
  if (this.isConnectedToRouter()) {
    this.setDnsTableContents(this.getConnectedRouter().getAddressTable());
  }
};

/**
 * What to do when our connected router's logs change.
 * @private
 */
NetSim.prototype.onRouterLogChange_ = function () {
  if (this.isConnectedToRouter()) {
    this.setRouterLogData(this.getConnectedRouter().getLog());
  }
};

/**
 * Kick off an animation that shows the local node setting the state of a
 * simplex wire.
 * @param {"0"|"1"} newState
 */
NetSim.prototype.animateSetWireState = function (newState) {
  this.visualization_.animateSetWireState(newState);
};

/**
 * Kick off an animation that shows the local node reading the state of a
 * simplex wire.
 * @param {"0"|"1"} newState
 */
NetSim.prototype.animateReadWireState = function (newState) {
  this.visualization_.animateReadWireState(newState);
};

/**
 * Specifically, update the layout of the right column when connected,
 * and change how the three panels there (received log, sent log, send controls)
 * share the current vertical space in the viewport.
 *
 * We're trying to use the following rules:
 *
 * 1. The send controls panel is fixed to the bottom of the viewport, and will
 *    size upwards to fit its contents up to a maximum height.
 * 2. The log widgets use the remaining vertical space
 *    a) If only one log widget is open, it fills the vertical space (except
 *       leaves enough room to see the other header)
 *    b) If both log widgets are open, they share the vertical space 50/50
 *    c) If both log widgets are closed, they float at the top of the space.
 */
NetSim.prototype.updateLayout = function () {
  var rightColumn = $('#netsim-rightcol');
  var sendPanel = $('#netsim-send');
  var logWrap = $('#netsim-logs');

  netsimDebouncedResizeFooter();

  if (this.lobby_) {
    this.lobby_.updateLayout();
  }

  if (!rightColumn.is(':visible')) {
    return;
  }

  // Right column wrapper and the send panel are both sized by CSS
  var rightColumnHeight = rightColumn.height();
  var sendPanelHeight = sendPanel.height();
  var logsSharedVerticalSpace = rightColumnHeight - sendPanelHeight;

  var showingSent = !this.sentMessageLog_.isMinimized();
  var showingReceived = !this.receivedMessageLog_.isMinimized();
  if (showingReceived && showingSent) {
    var halfHeight = Math.floor(logsSharedVerticalSpace / 2);
    this.receivedMessageLog_.setHeight(halfHeight);
    this.sentMessageLog_.setHeight(halfHeight);
  } else if (showingReceived) {
    this.receivedMessageLog_.setHeight(Math.floor(logsSharedVerticalSpace - this.sentMessageLog_.getHeight()));
  } else if (showingSent) {
    this.sentMessageLog_.setHeight(Math.floor(logsSharedVerticalSpace - this.receivedMessageLog_.getHeight()));
  }

  // Manually adjust the logwrap to the remaining height
  logWrap.css('height', rightColumnHeight - sendPanelHeight);
};

/**
 * Appropriate steps for when the student hits the "Continue to next level"
 * button.  Should mark the level as complete and navigate to the next level.
 */
NetSim.prototype.completeLevelAndContinue = function () {
  if (this.isConnectedToRemote() && !confirm(i18n.onBeforeUnloadWarning())) {
    return;
  }

  // Avoid multiple simultaneous submissions.
  $('.submitButton').attr('disabled', true);

  sendReport({
    fallbackResponse: this.reportingInfo_.fallback_response,
    callback: this.reportingInfo_.callback,
    app: 'netsim',
    level: this.level.id,
    result: true,
    testResult: 100,
    onComplete: (function (serverResponse) {

      // Re-enable submit button, in case there's nowhere to go.
      $('.submitButton').attr('disabled', false);

      // If there's somewhere to go, disconnect and go!
      if (serverResponse.redirect) {
        if (this.isConnectedToRemote()) {
          this.disconnectFromRemote(function () {
            window.location.href = serverResponse.redirect;
          });
        } else {
          window.location.href = serverResponse.redirect;
        }
      }
    }).bind(this)
  });
};

/**
 * Attempt to reset the simulation shard, kicking all users out and resetting
 * all data.
 */
NetSim.prototype.resetShard = function () {
  if (this.shard_ && confirm(i18n.shardResetConfirmation())) {
    this.shard_.resetEverything((function (err) {
      if (err) {
        logger.error(err);
        NetSimAlert.error(i18n.shardResetError());
        return;
      }
    }).bind(this));
  }
};

},{"../ObservableEvent":"/home/ubuntu/staging/apps/build/js/ObservableEvent.js","../RunLoop":"/home/ubuntu/staging/apps/build/js/RunLoop.js","../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./DashboardUser":"/home/ubuntu/staging/apps/build/js/netsim/DashboardUser.js","./NetSimAlert":"/home/ubuntu/staging/apps/build/js/netsim/NetSimAlert.js","./NetSimBitLogPanel":"/home/ubuntu/staging/apps/build/js/netsim/NetSimBitLogPanel.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimLobby":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLobby.js","./NetSimLocalClientNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLocalClientNode.js","./NetSimLogPanel":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogPanel.js","./NetSimLogger":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogger.js","./NetSimRouterLogModal":"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterLogModal.js","./NetSimRouterNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterNode.js","./NetSimSendPanel":"/home/ubuntu/staging/apps/build/js/netsim/NetSimSendPanel.js","./NetSimShard":"/home/ubuntu/staging/apps/build/js/netsim/NetSimShard.js","./NetSimStatusPanel":"/home/ubuntu/staging/apps/build/js/netsim/NetSimStatusPanel.js","./NetSimTabsComponent":"/home/ubuntu/staging/apps/build/js/netsim/NetSimTabsComponent.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js","./NetSimVisualization":"/home/ubuntu/staging/apps/build/js/netsim/NetSimVisualization.js","./controls.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/controls.html.ejs","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js","./page.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/page.html.ejs"}],"/home/ubuntu/staging/apps/build/js/netsim/page.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
  var msg = require('../locale');
; buf.push('\n\n<div id="rotateContainer" style="background-image: url(', escape((5,  assetUrl('media/turnphone_horizontal.png') )), ')">\n  <div id="rotateText">\n    <p>', escape((7,  msg.rotateText() )), '<br>', escape((7,  msg.orientationLock() )), '</p>\n  </div>\n</div>\n\n');11; var instructions = function() {; buf.push('  <div id="bubble" class="clearfix">\n    <table id="prompt-table">\n      <tr>\n        <td id="prompt-icon-cell">\n          <img id="prompt-icon"/>\n        </td>\n        <td id="prompt-cell">\n          <p id="prompt">\n          </p>\n        </td>\n      </tr>\n    </table>\n    <div id="ani-gif-preview-wrapper">\n      <div id="ani-gif-preview">\n      </div>\n    </div>\n  </div>\n');28; };; buf.push('\n<div id="appcontainer">\n  <!-- Should disable spell-check on all netsim elements -->\n  <div id="netsim" autocapitalize="false" autocorrect="false" autocomplete="false" spellcheck="false">\n\n    <div id="netsim-disconnected">\n      <div class="lobby-panel"></div>\n    </div>\n\n\n    <div id="netsim-connected">\n      <div id="netsim-leftcol">\n        <div class="column-width-limiter">\n\n          <div id="netsim-status"></div>\n\n          <div id="netsim-visualization"></div>\n\n          <div id="netsim-tabs"></div>\n\n        </div>\n      </div>\n\n      <div id="netsim-rightcol">\n        <div id="netsim-logs">\n          <div id="netsim-received"></div>\n          <div id="netsim-sent"></div>\n        </div>\n        <div id="netsim-send"></div>\n      </div>\n    </div>\n\n    <div id="router-log-modal" class="modal fade"></div>\n\n  </div>\n  <div id="footers" dir="', escape((63,  data.localeDirection )), '">\n  </div>\n  <div class="hidden">\n    ');66; instructions(); ; buf.push('\n  </div>\n</div>\n\n<div class="clear"></div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"../locale":"/home/ubuntu/staging/apps/build/js/locale.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/levels.js":[function(require,module,exports){
/*jshint multistr: true */
/**
 * @overview Type documentation for a NetSim level configuration object,
 *           and default values for that object.
 */

'use strict';

var NetSimConstants = require('./NetSimConstants');
var Packet = require('./Packet');
var BITS_PER_NIBBLE = NetSimConstants.BITS_PER_NIBBLE;
var MessageGranularity = NetSimConstants.MessageGranularity;
var DnsMode = NetSimConstants.DnsMode;
var EncodingType = NetSimConstants.EncodingType;
var NetSimTabType = NetSimConstants.NetSimTabType;

/**
 * A level configuration that can be used by NetSim
 * @typedef {Object} NetSimLevelConfiguration
 *
 * @property {string} instructions - Inherited from blockly level configuration.
 *
 * @property {boolean} showClientsInLobby - Whether client nodes should appear
 *           in the lobby list at all.
 *
 * @property {boolean} showRoutersInLobby - Whether router nodes should appear
 *           in the lobby list at all.
 *
 * @property {boolean} canConnectToClients - Whether client nodes are selectable
 *           and can be connected to
 *
 * @property {boolean} canConnectToRouters - Whether router nodes are selectable
 *           and can be connected to
 *
 * @property {boolean} showAddRouterButton - Whether the "Add Router" button
 *           should appear above the lobby list.
 *
 * @property {boolean} showLogBrowserButton - Whether the "Log Browser" is
 *           available in the lobby.
 *
 * @property {MessageGranularity} messageGranularity - Whether the simulator
 *           puts a single bit into storage at a time, or a whole packet.
 *           Should use 'bits' for variant 1 (levels about the coordination
 *           problem), and 'packets' for levels where the coordination problem
 *           is abstracted away.
 *
 * @property {boolean} automaticReceive - Whether the local node will
 *           automatically pick up messages to itself from the message table,
 *           and dump them to the received message log.  If false, some other
 *           method must be used for receiving messages.
 *
 * @property {boolean} broadcastMode - Enabling this option turns "routers"
 *           into "rooms" and makes it so every message sent in the room
 *           will be received by every other person in that room.
 *
 * @property {boolean} connectedRouters - When false (default), each router or
 *           room exists in isolation and will have no contact with other routers
 *           or rooms.  When true, it is possible for messages to travel between
 *           routers, connecting the whole shard.
 *
 * @property {number} minimumExtraHops - Fewest non-destination routers an
 *           inter-router message should try to visit before going to its
 *           destination router.  Number of hops can be lower if network
 *           conditions don't allow it.
 *
 * @property {number} maximumExtraHops - Most non-destination routers an
 *           inter-router message should try to visit before going to its
 *           destination router.
 *
 * @property {AddressHeaderFormat} addressFormat - Specify how many bits wide
 *           an address is within the simulation and how it should be divided
 *           up into a hierarchy. Format resembles IPv4 dot-decimal notation,
 *           but the numbers specify the number of bits for each section.
 *           Examples:
 *           "8.8" - 16-bit address, represented as two 8-bit integers.
 *           "4" - 4 bit address represented as one 4-bit integer.
 *           "8.4" - 12-bit address, represented as an 8-bit integer followed
 *                   by a 4-bit integer
 *            This format will be applied to any "fromAddress" or "toAddress"
 *            header fields in the packet specification, and will determine
 *            how routers assign addresses.
 *
 * @property {number} packetCountBitWidth - How many bits should be allocated
 *           for any "packetIndex" or "packetCount" fields in the packet
 *           specification.
 *
 * @property {Packet.HeaderType[]} routerExpectsPacketHeader - The header format
 *           the router uses to parse incoming packets and figure out where
 *           to route them.
 *
 * @property {Packet.HeaderType[]} clientInitialPacketHeader - The header format
 *           used by the local client node when generating/parsing packets,
 *           which affects the layout of the send panel and log panels.
 *
 * @property {boolean} showHostnameInGraph - If false, student display name
 *           is used in the network graph.  If true, their generated hostname
 *           is displayed.
 *
 * @property {boolean} showAddPacketButton - Whether the "Add Packet" button
 *           should appear in the send widget.
 *
 * @property {boolean} showPacketSizeControl - Whether the packet size slider
 *           should appear in the send widget.
 *
 * @property {number} defaultPacketSizeLimit - Initial maximum packet size.
 *
 * @property {NetSimTabType[]} showTabs - Which tabs should appear beneath the
 *           network visualization.  Does not determine tab order; tabs always
 *           appear in the order "Instructions, My Device, Router, DNS."
 *
 * @property {number} defaultTabIndex - The zero-based index of the tab
 *           that should be active by default, which depends on which tabs
 *           you have enabled.
 *
 * @property {boolean} showPulseRateSlider - Whether the pulse rate slider
 *           is visible on the "My Device" tab.  This control is a different
 *           view on the bitrate, given in seconds-per-pulse; in fact, if both
 *           this and the bitrate slider are visible, dragging one will change
 *           the other.
 *
 * @property {boolean} showMetronome - Whether the metronome should show up on
 *           the "My Device" tab.
 *
 * @property {EncodingType[]} showEncodingControls - Which encodings, (ASCII,
 *           binary, etc.) should have visible controls on the "My Device" tab.
 *
 * @property {EncodingType[]} defaultEnabledEncodings - Which encodings should
 *           be enabled on page load.  Note: An encoding enabled here but not
 *           included in the visible controls will be enabled and cannot be
 *           disabled by the student.
 *
 * @property {boolean} showBitRateControl - Whether the bit rate slider should
 *           be displayed on the "My Device" tab.
 *
 * @property {boolean} lockBitRateControl - Whether the bit rate slider should
 *           be adjustable by the student.
 *
 * @property {number} defaultBitRateBitsPerSecond - Default bit rate on level
 *           load.  Also sets the pulse rate for levels with the metronome.
 *
 * @property {boolean} showChunkSizeControl - Whether the chunk size slider
 *           should be displayed on the "My Device" tab.
 *
 * @property {boolean} lockChunkSizeControl - Whether the chunk size slider
 *           should be adjustable by the student.
 *
 * @property {number} defaultChunkSizeBits- Default chunk size on level load.
 *
 * @property {boolean} showRouterBandwidthControl - Whether students should be
 *           able to see and manipulate the slider that adjusts the router's
 *           max throughput speed.
 *
 * @property {number} defaultRouterBandwidth - How fast the router should be
 *           able to process packets, on initial level load.
 *
 * @property {boolean} showRouterMemoryControl - Whether students should be
 *           able to see and manipulate the slider that adjusts the router's
 *           maximum queue memory.
 *
 * @property {number} defaultRouterMemory - How much data the router packet
 *           queue is able to hold before it starts dropping packets, in bits.
 *
 * @property {number} defaultRandomDropChance - Odds that the router will drop
 *           the packet for no reason while routing it.  Value in range
 *           0 (no drops) to 1 (drop everything)
 *
 * @property {boolean} showDnsModeControl - Whether the DNS mode controls will
 *           be available to the student.
 *
 * @property {DnsMode} defaultDnsMode - Which DNS mode the simulator should
 *           initialize into.
 */

/*
 * Configuration for all levels.
 */
var levels = module.exports = {};

/**
 * A default level configuration so that we can define the others by delta.
 * This default configuration enables everything possible, so other configs
 * should start with this one and disable features.
 * @type {NetSimLevelConfiguration}
 */
levels.custom = {

  // Lobby configuration
  showClientsInLobby: false,
  showRoutersInLobby: false,
  canConnectToClients: false,
  canConnectToRouters: false,
  showAddRouterButton: false,
  showLogBrowserButton: false,

  // Simulator-wide setup
  messageGranularity: MessageGranularity.BITS,
  automaticReceive: false,
  broadcastMode: false,
  connectedRouters: false,
  minimumExtraHops: 0,
  maximumExtraHops: 0,

  // Packet header specification
  addressFormat: '4',
  packetCountBitWidth: 4,
  routerExpectsPacketHeader: [],
  clientInitialPacketHeader: [],

  // Visualization configuration
  showHostnameInGraph: false,

  // Send widget configuration
  showAddPacketButton: false,
  showPacketSizeControl: false,
  defaultPacketSizeLimit: 8192,

  // Tab-panel control
  showTabs: [],
  defaultTabIndex: 0,

  // Instructions tab and its controls
  // Note: Uses the blockly-standard level.instructions value, which should
  //       be localized by the time it gets here.

  // "My Device" tab and its controls
  showPulseRateSlider: false,
  showMetronome: false,
  showEncodingControls: [],
  defaultEnabledEncodings: [],
  showBitRateControl: false,
  lockBitRateControl: false,
  defaultBitRateBitsPerSecond: Infinity,
  showChunkSizeControl: false,
  lockChunkSizeControl: false,
  defaultChunkSizeBits: 8,

  // Router tab and its controls
  showRouterBandwidthControl: false,
  defaultRouterBandwidth: Infinity,
  showRouterMemoryControl: false,
  defaultRouterMemory: Infinity,
  defaultRandomDropChance: 0,

  // DNS tab and its controls
  showDnsModeControl: false,
  defaultDnsMode: DnsMode.NONE
};

/**
 * Special level configuration for use with 'grunt dev' standalone mode.
 * Never used when serving NetSim levels through dashboard.
 * @type {NetSimLevelConfiguration}
 */
levels.playground = {

  // Lobby configuration
  showClientsInLobby: false,
  showRoutersInLobby: true,
  canConnectToClients: false,
  canConnectToRouters: true,
  showAddRouterButton: true,
  showLogBrowserButton: true,

  // Simulator-wide setup
  messageGranularity: MessageGranularity.PACKETS,
  automaticReceive: true,
  broadcastMode: false,
  connectedRouters: false,
  minimumExtraHops: 0,
  maximumExtraHops: 0,

  // Packet header specification
  addressFormat: '4',
  packetCountBitWidth: 4,
  routerExpectsPacketHeader: ['toAddress', 'fromAddress'],
  clientInitialPacketHeader: ['toAddress', 'fromAddress'],

  // Visualization configuration
  showHostnameInGraph: false,

  // Send widget configuration
  showAddPacketButton: false,
  showPacketSizeControl: false,
  defaultPacketSizeLimit: 8192,

  // Tab-panel control
  showTabs: ['instructions', 'my_device', 'router', 'dns'],
  defaultTabIndex: 0,

  // Instructions tab and its controls
  // Note: Uses the blockly-standard level.instructions value, which should
  //       be localized by the time it gets here.

  // "My Device" tab and its controls
  showPulseRateSlider: false,
  showMetronome: false,
  showEncodingControls: ['a_and_b', 'binary', 'hexadecimal', 'decimal', 'ascii'],
  defaultEnabledEncodings: ['a_and_b', 'binary', 'hexadecimal', 'decimal', 'ascii'],
  showBitRateControl: true,
  lockBitRateControl: false,
  defaultBitRateBitsPerSecond: Infinity,
  showChunkSizeControl: true,
  lockChunkSizeControl: false,
  defaultChunkSizeBits: 8,

  // Router tab and its controls
  showRouterBandwidthControl: true,
  defaultRouterBandwidth: Infinity,
  showRouterMemoryControl: true,
  defaultRouterMemory: Infinity,
  defaultRandomDropChance: 0,

  // DNS tab and its controls
  showDnsModeControl: true,
  defaultDnsMode: DnsMode.NONE
};

},{"./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./Packet":"/home/ubuntu/staging/apps/build/js/netsim/Packet.js"}],"/home/ubuntu/staging/apps/build/js/netsim/controls.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('<div id="slider-cell">\n  <img id="spinner" style="visibility: hidden;" src="', escape((2,  assetUrl('media/netsim/loading.gif') )), '" height=15 width=15>\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimVisualization.js":[function(require,module,exports){
/**
 * @overview Top-level controller for the network visualization.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var utils = require('../utils');
var _ = utils.getLodash();
var visualizationMarkup = require('./NetSimVisualization.html.ejs');
var NetSimNodeFactory = require('./NetSimNodeFactory');
var NetSimWire = require('./NetSimWire');
var NetSimVizAutoDnsNode = require('./NetSimVizAutoDnsNode');
var NetSimVizNode = require('./NetSimVizNode');
var NetSimVizSimulationNode = require('./NetSimVizSimulationNode');
var NetSimVizSimulationWire = require('./NetSimVizSimulationWire');
var NetSimVizWire = require('./NetSimVizWire');
var NetSimGlobals = require('./NetSimGlobals');
var tweens = require('./tweens');
var NetSimConstants = require('./NetSimConstants');
var DnsMode = NetSimConstants.DnsMode;
var NodeType = NetSimConstants.NodeType;

/**
 * Whether the blurred visualization background should be shown.
 * @const {boolean}
 */
var SHOW_BACKGROUND = false;

/**
 * Top-level controller for the network visualization.
 *
 * For the most part, the visualization attaches to the raw network state
 * representation (the storage tables) and updates to reflect that state,
 * independent of the rest of the controls on the page.  This separation means
 * that the visualization always has one canonical state to observe.
 *
 * @param {jQuery} rootDiv - The <div> tag within which the visualization
 *        will be created.
 * @param {RunLoop} runLoop - Loop providing tick and render events that the
 *        visualization can hook up to and respond to.
 * @constructor
 */
var NetSimVisualization = module.exports = function (rootDiv, runLoop) {
  /**
   * @private {jQuery}
   */
  this.rootDiv_ = rootDiv;

  // Immediately, drop our SVG canvas and basic groups into the DOM
  this.rootDiv_.html(visualizationMarkup({
    showBackground: SHOW_BACKGROUND
  }));

  /**
   * @private {jQuery}
   */
  this.svgRoot_ = this.rootDiv_.find('svg');

  /**
   * Background group never goes away, so search for it once and cache
   * it here.
   * @private {jQuery}
   */
  this.backgroundGroup_ = this.svgRoot_.find('#background-group');

  /**
   * Foreground group never goes away, so search for it once and cache
   * it here.
   * @private {jQuery}
   */
  this.foregroundGroup_ = this.svgRoot_.find('#foreground-group');

  /**
   * The shard currently being represented.
   * We don't have a shard now, but we register with the connection manager
   * to find out when we have one.
   * @private {NetSimShard}
   */
  this.shard_ = null;

  /**
   * List of VizEntities, which are all the elements that will actually show up
   * in our visualization.
   * @private {NetSimVizElement[]}
   */
  this.elements_ = [];

  /**
   * Reference to the local node viz element, the anchor for the visualization.
   * @type {NetSimVizSimulationNode}
   */
  this.localNode = null;

  /**
   * Width (in svg-units) of visualization
   * @type {number}
   */
  this.visualizationWidth = 300;

  /**
   * Height (in svg-units) of visualization
   * @type {number}
   */
  this.visualizationHeight = 300;

  /**
  * Last known DNS mode, so that new elements can be created with the
  * correct default
  * @type {DnsMode}
  */
  this.dnsMode_ = null;

  /**
   * Reference to visualized auto-DNS node, a fake node (not mapped to the
   * simulation in a normal way) that also lives in our elements_ collection.
   * @type {NetSimVizAutoDnsNode}
   * @private
   */
  this.autoDnsNode_ = null;

  /**
   * Reference to wire between the auto-DNS node and the foreground router.
   * Managed manually so we keep a handle on it, but also lives in the elements_
   * collection.
   * @type {NetSimVizWire}
   * @private
   */
  this.autoDnsWire_ = null;

  /**
   * Event registration information
   * @type {Object}
   */
  this.eventKeys = {};

  /**
   * Last known encodings set, so that new elements can be created with
   * the correct default
   * @type {EncodingType[]}
   */
  this.encodings_ = [];

  // Hook up tick and render methods
  runLoop.tick.register(this.tick.bind(this));
  runLoop.render.register(this.render.bind(this));
};

/**
 * Tick: Update all vizentities, giving them an opportunity to recalculate
 *       their internal state, and remove any dead entities from the
 *       visualization.
 * @param {RunLoop.Clock} clock
 */
NetSimVisualization.prototype.tick = function (clock) {
  // Everyone gets an update
  this.elements_.forEach(function (element) {
    element.tick(clock);
  });

  // Tear out dead entities.
  this.elements_ = this.elements_.filter(function (element) {
    if (element.isDead()) {
      element.getRoot().remove();
      return false;
    }
    return true;
  });
};

/**
 * Render: Let all vizentities "redraw" (or in our case, touch the DOM)
 * @param {RunLoop.Clock} clock
 */
NetSimVisualization.prototype.render = function (clock) {
  this.elements_.forEach(function (element) {
    element.render(clock);
  });
};

/**
 * Change the shard this visualization will source its data from.
 * Re-attaches table change listeners for all the tables we need to monitor.
 * @param {?NetSimShard} newShard - null if disconnected
 */
NetSimVisualization.prototype.setShard = function (newShard) {
  this.shard_ = newShard;

  // If we were registered for shard events, unregister old handlers.
  if (this.eventKeys.registeredWithShard) {
    this.eventKeys.registeredWithShard.nodeTable.tableChange.unregister(this.eventKeys.nodeTable);
    this.eventKeys.registeredWithShard.wireTable.tableChange.unregister(this.eventKeys.wireTable);
    this.eventKeys.registeredWithShard = null;
  }

  // If we have a new shard, register new handlers.
  if (newShard) {
    this.eventKeys.nodeTable = newShard.nodeTable.tableChange.register(this.onNodeTableChange_.bind(this));
    this.eventKeys.wireTable = newShard.wireTable.tableChange.register(this.onWireTableChange_.bind(this));
    this.eventKeys.registeredWithShard = newShard;
  }
};

/**
 * Change which node we consider the 'local node' in the visualization.
 * We go through a special creation process for this node, so that it
 * looks and behaves differently.
 * @param {?NetSimLocalClientNode} newLocalNode - null if disconnected
 */
NetSimVisualization.prototype.setLocalNode = function (newLocalNode) {
  // Unregister old handlers
  if (this.eventKeys.registeredWithLocalNode) {
    this.eventKeys.registeredWithLocalNode.remoteChange.unregister(this.eventKeys.remoteChange);
    this.eventKeys.registeredWithLocalNode = null;
  }

  // Register new handlers
  if (newLocalNode) {
    this.eventKeys.remoteChange = newLocalNode.remoteChange.register(this.onRemoteChange_.bind(this));
    this.eventKeys.registeredWithLocalNode = newLocalNode;
  }

  // Create viznode for local node
  if (newLocalNode) {
    if (this.localNode) {
      this.localNode.configureFrom(newLocalNode);
    } else {
      this.localNode = new NetSimVizSimulationNode(newLocalNode, SHOW_BACKGROUND);
      this.elements_.push(this.localNode);
      this.backgroundGroup_.append(this.localNode.getRoot());
    }
    this.localNode.setIsLocalNode();
  } else {
    if (this.localNode) {
      this.localNode.kill();
      this.localNode = null;
    }
  }
  this.pullElementsToForeground();
};

/**
 * Called whenever the local node notifies that we've been connected to,
 * or disconnected from, a router.
 * @private
 */
NetSimVisualization.prototype.onRemoteChange_ = function () {
  this.pullElementsToForeground();
  this.distributeForegroundNodes();
};

/**
 * Find a particular VizElement in the visualization, by type and ID.
 * @param {function} elementType - constructor of element we're looking for
 * @param {number} entityID - ID, with corresponds to NetSimEntity.entityID
 * @returns {NetSimVizElement} or undefined if not found
 */
NetSimVisualization.prototype.getElementByEntityID = function (elementType, entityID) {
  return _.find(this.elements_, function (element) {
    return element instanceof elementType && element.getCorrespondingEntityId && element.getCorrespondingEntityId() === entityID;
  });
};

/**
 * Gets the set of VizWires directly attached to the given VizNode on
 * the local end for which there are also corresponding VizWires coming
 * from the opposite end. Note that if the VizNode is a router, we
 * consider all attached wires to be reciprocated.
 * @param {NetSimVizSimulationNode} vizNode
 * @returns {Array.<NetSimVizSimulationWire>} the attached wires
 */
NetSimVisualization.prototype.getReciprocatedWiresAttachedToNode = function (vizNode) {

  if (vizNode.isRouter) {
    return this.getWiresAttachedToNode(vizNode);
  }

  var localWires = this.getLocalWiresAttachedToNode(vizNode);

  return localWires.filter(function (localWire) {

    if (localWire.remoteVizNode.isRouter) {
      return true;
    }

    return this.getWiresAttachedToNode(localWire.remoteVizNode).some(function (wire) {
      return wire.remoteVizNode === vizNode;
    });
  }, this);
};

/**
 * Gets the set of VizWires directly attached to the given VizNode on the local end
 * @param {NetSimVizSimulationNode} vizNode
 * @returns {Array.<NetSimVizSimulationWire>} the attached wires
 */
NetSimVisualization.prototype.getLocalWiresAttachedToNode = function (vizNode) {
  return this.elements_.filter(function (element) {
    return element instanceof NetSimVizWire && element.localVizNode === vizNode;
  });
};

/**
 * Gets the set of VizWires directly attached to the given VizNode, (either
 * on the local end or remote end)
 * @param {NetSimVizSimulationNode} vizNode
 * @returns {Array.<NetSimVizSimulationWire>} the attached wires
 */
NetSimVisualization.prototype.getWiresAttachedToNode = function (vizNode) {
  return this.elements_.filter(function (element) {
    return element instanceof NetSimVizWire && (element.localVizNode === vizNode || element.remoteVizNode === vizNode);
  });
};

/**
 * Handle notification that node table contents have changed.
 * @private
 */
NetSimVisualization.prototype.onNodeTableChange_ = function () {
  // Convert rows to correctly-typed objects
  var tableNodes = NetSimNodeFactory.nodesFromRows(this.shard_, this.shard_.nodeTable.readAll());

  // Update collection of VizNodes from source data
  this.updateVizEntitiesOfType_(NetSimVizSimulationNode, tableNodes, (function (node) {
    var newVizNode = new NetSimVizSimulationNode(node, SHOW_BACKGROUND);
    newVizNode.setDnsMode(this.dnsMode_);
    newVizNode.snapToPosition(Math.random() * this.visualizationWidth - this.visualizationWidth / 2, Math.random() * this.visualizationHeight - this.visualizationHeight / 2);
    return newVizNode;
  }).bind(this));
};

/**
 * Handle notification that wire table contents have changed.
 * @private
 */
NetSimVisualization.prototype.onWireTableChange_ = function () {
  // Convert rows to correctly-typed objects
  var tableWires = this.shard_.wireTable.readAll().map(function (row) {
    return new NetSimWire(this.shard_, row);
  }, this);

  // Update collection of VizWires from source data
  this.updateVizEntitiesOfType_(NetSimVizSimulationWire, tableWires, (function (wire) {
    var newVizWire = new NetSimVizSimulationWire(wire, this.getElementByEntityID.bind(this));
    newVizWire.setEncodings(this.encodings_);
    return newVizWire;
  }).bind(this));

  // In broadcast mode we hide the real wires and router, and overlay a set
  // of fake wires showing everybody connected to everybody else.
  if (NetSimGlobals.getLevelConfig().broadcastMode) {
    this.updateBroadcastModeWires_();
  }

  // Since the wires table determines simulated connectivity, we trigger a
  // recalculation of which nodes are in the local network (should be in the
  // foreground) and then re-layout the foreground nodes.
  this.pullElementsToForeground();
  this.distributeForegroundNodes();
};

/**
 * Based on new connectivity information, recalculate which 'fake' connections
 * we need to display to show all nodes in a 'room' having direct wires to
 * one another.
 * @private
 */
NetSimVisualization.prototype.updateBroadcastModeWires_ = function () {
  // Kill all fake wires
  this.elements_.forEach(function (vizElement) {
    if (vizElement instanceof NetSimVizWire && !(vizElement instanceof NetSimVizSimulationWire)) {
      vizElement.kill();
    }
  }, this);

  // Generate new wires
  var connections = this.generateBroadcastModeConnections_();
  connections.forEach(function (connectedPair) {
    var newFakeWire = new NetSimVizWire(connectedPair.nodeA, connectedPair.nodeB);
    this.addVizElement_(newFakeWire);
  }, this);
};

/**
 * Using the cached node and wire data, generates the set of all node pairs (A,B)
 * on the shard such that both A and B are client nodes, and A is reachable
 * from B.
 * @returns {Array.<{nodeA:{number}, nodeB:{number}}>}
 * @private
 */
NetSimVisualization.prototype.generateBroadcastModeConnections_ = function () {
  var nodeRows = this.shard_.nodeTable.readAll();
  var wireRows = this.shard_.wireTable.readAll();
  var nodeCount = nodeRows.length;

  // Generate a reverse mapping for lookups
  var nodeIDToIndex = {};
  for (var matrixIndex = 0; matrixIndex < nodeCount; matrixIndex++) {
    nodeIDToIndex[nodeRows[matrixIndex].id] = matrixIndex;
  }

  // Generate empty graph matrix initialized with no connections.
  var graph = new Array(nodeCount);
  for (var x = 0; x < nodeCount; x++) {
    graph[x] = new Array(nodeCount);
    for (var y = 0; y < nodeCount; y++) {
      graph[x][y] = false;
    }
  }

  // Apply real connections (wires) to the graph matrix
  wireRows.forEach(function (wireRow) {
    var localNodeIndex = nodeIDToIndex[wireRow.localNodeID];
    var remoteNodeIndex = nodeIDToIndex[wireRow.remoteNodeID];
    if (localNodeIndex !== undefined && remoteNodeIndex !== undefined) {
      graph[localNodeIndex][remoteNodeIndex] = true;
      graph[remoteNodeIndex][localNodeIndex] = true;
    }
  });

  // Use simple Floyd-Warshall to complete the transitive closure graph
  for (var k = 0; k < nodeCount; k++) {
    for (var i = 0; i < nodeCount; i++) {
      for (var j = 0; j < nodeCount; j++) {
        if (graph[i][k] && graph[k][j]) {
          graph[i][j] = true;
        }
      }
    }
  }

  // Now, generate unique pairs doing lookup on our transitive closure graph
  var connections = [];
  for (var from = 0; from < nodeCount - 1; from++) {
    for (var to = from + 1; to < nodeCount; to++) {
      // leave router connections out of this list
      var clientToClient = nodeRows[from].type === NodeType.CLIENT && nodeRows[to].type === NodeType.CLIENT;
      // Must be reachable
      var reachable = graph[from][to];
      if (clientToClient && reachable) {
        connections.push({
          nodeA: this.getElementByEntityID(NetSimVizSimulationNode, nodeRows[from].id),
          nodeB: this.getElementByEntityID(NetSimVizSimulationNode, nodeRows[to].id)
        });
      }
    }
  }
  return connections;
};

/**
 * Compares VizEntities of the given type that are currently in the
 * visualization to the source data given, and creates/updates/removes
 * VizEntities so that the visualization reflects the new source data.
 *
 * @param {function} vizElementType
 * @param {Array.<NetSimEntity>} entityCollection
 * @param {function} creationMethod
 * @private
 */
NetSimVisualization.prototype.updateVizEntitiesOfType_ = function (vizElementType, entityCollection, creationMethod) {

  // 1. Kill VizEntities that are no longer in the source data
  this.killVizEntitiesOfTypeMissingMatch_(vizElementType, entityCollection);

  entityCollection.forEach(function (entity) {
    var vizElement = this.getElementByEntityID(vizElementType, entity.entityID);
    if (vizElement) {
      // 2. Update existing VizEntities from their source data
      vizElement.configureFrom(entity);
    } else {
      // 3. Create new VizEntities for new source data
      this.addVizElement_(creationMethod(entity));
    }
  }, this);
};

/**
 * Call kill() on any vizentities that match the given type and don't map to
 * a NetSimEntity in the provided collection.
 * @param {function} vizElementType
 * @param {Array.<NetSimEntity>} entityCollection
 * @private
 */
NetSimVisualization.prototype.killVizEntitiesOfTypeMissingMatch_ = function (vizElementType, entityCollection) {
  this.elements_.forEach(function (vizElement) {
    var isCorrectType = vizElement instanceof vizElementType;
    var foundMatch = entityCollection.some(function (entity) {
      return vizElement.representsEntity && vizElement.representsEntity(entity);
    });

    if (isCorrectType && !foundMatch) {
      vizElement.kill();
    }
  });
};

/**
 * Adds a VizElement to the visualization.
 * @param {NetSimVizElement} vizElement
 * @private
 */
NetSimVisualization.prototype.addVizElement_ = function (vizElement) {
  this.elements_.push(vizElement);
  this.backgroundGroup_.prepend(vizElement.getRoot());
};

/**
 * If we do need a DOM change, detach the element and reattach it to the new
 * layer. Special rule (for now): Prepend wires so that they show up behind
 * nodes.  Will need a better solution for this if/when the viz gets more
 * complex.
 * @param {NetSimVizElement} vizElement
 * @param {jQuery} newParent
 */
var moveVizElementToGroup = function moveVizElementToGroup(vizElement, newParent) {
  vizElement.getRoot().detach();
  if (vizElement instanceof NetSimVizWire) {
    vizElement.getRoot().prependTo(newParent);
  } else {
    vizElement.getRoot().appendTo(newParent);
  }
};

/**
 * Recalculate which nodes should be in the foreground layer by doing a full
 * traversal starting with the local node.  In short, everything reachable
 * from the local node belongs in the foreground.
 */
NetSimVisualization.prototype.pullElementsToForeground = function () {
  // Begin by marking all entities background (unvisited)
  this.elements_.forEach(function (vizElement) {
    vizElement.visited = false;
  });

  var toExplore = [];
  if (this.localNode) {
    toExplore.push(this.localNode);
  }

  // While there are still nodes that need visiting,
  // visit the next node, marking it as "foreground/visited" and
  // pushing all of its unvisited connections onto the stack.
  var currentVizElement;
  while (toExplore.length > 0) {
    currentVizElement = toExplore.pop();
    currentVizElement.visited = true;
    toExplore = toExplore.concat(this.getUnvisitedNeighborsOf_(currentVizElement));
  }

  // Now, visited nodes belong in the foreground.
  // Move all nodes to their new, correct layers
  // Possible optimization: Can we do this with just one operation on the live DOM?
  var foreground = this.foregroundGroup_;
  var background = this.backgroundGroup_;
  this.elements_.forEach(function (vizElement) {
    var isForeground = $.contains(foreground[0], vizElement.getRoot()[0]);

    // Check whether a change should occur.  If not, we leave
    // newParent undefined so that we don't make unneeded DOM changes.
    if (vizElement.visited && !isForeground) {
      moveVizElementToGroup(vizElement, foreground);
      vizElement.onDepthChange(true);
    } else if (!vizElement.visited && isForeground) {
      moveVizElementToGroup(vizElement, background);
      vizElement.onDepthChange(false);
    }
  }, this);

  this.updateAutoDnsNode();
};

/**
 * Visit method for pullElementsToForeground, not used anywhere else.
 * Notes that the current element is should be foreground when we're all done,
 * finds the current element's unvisited connections,
 * pushes those connections onto the stack.
 * @param {NetSimVizSimulationNode|NetSimVizSimulationWire} vizElement
 * @returns {Array.<NetSimVizElement>}
 * @private
 */
NetSimVisualization.prototype.getUnvisitedNeighborsOf_ = function (vizElement) {
  // Find new entities to explore based on node type and connections
  var neighbors = [];

  if (vizElement instanceof NetSimVizSimulationNode) {

    // In broadcast mode we display "fake," unidirectional wires. In
    // regular mode, we only want to display wires connecting us to
    // nodes that are also connected back.
    if (NetSimGlobals.getLevelConfig().broadcastMode) {
      neighbors = this.getWiresAttachedToNode(vizElement);
    } else {
      neighbors = this.getReciprocatedWiresAttachedToNode(vizElement);
    }

    // Special case: The DNS node fake is a neighbor of a visited router
    if (vizElement.isRouter && this.autoDnsNode_) {
      neighbors.push(this.autoDnsNode_);
      neighbors.push(this.autoDnsWire_);
    }
  } else if (vizElement instanceof NetSimVizWire) {
    if (vizElement.localVizNode) {
      neighbors.push(vizElement.localVizNode);
    }

    if (vizElement.remoteVizNode) {
      neighbors.push(vizElement.remoteVizNode);
    }
  }

  return neighbors.filter(function (vizElement) {
    return !vizElement.visited;
  });
};

/**
 * Explicitly control VizNodes in the foreground, moving them into a desired
 * configuration based on their number and types.  Nodes are given animation
 * commands (via tweenToPosition) so that they interpolate nicely to their target
 * positions.
 *
 * Configurations:
 * One node (local node): Centered on the screen.
 *   |  L  |
 *
 * Two nodes: Local node on left, remote node on right, nothing in the middle.
 *   | L-R |
 *
 * Three or more nodes: Local node on left, router in the middle, other
 * nodes distributed evenly around the router in a circle
 * 3:         4:    O    5:  O      6:O   O    7:O   O
 *                 /         |         \ /        \ /
 *   L-R-0      L-R        L-R-O      L-R        L-R-O
 *                 \         |         / \        / \
 *                  O        O        O   O      O   O
 */
NetSimVisualization.prototype.distributeForegroundNodes = function () {
  if (NetSimGlobals.getLevelConfig().broadcastMode) {
    this.distributeForegroundNodesForBroadcast_();
    return;
  }

  /** @type {Array.<NetSimVizSimulationNode>} */
  var foregroundNodes = this.elements_.filter(function (element) {
    return element instanceof NetSimVizNode && element.isForeground;
  });

  // Sometimes, there's no work to do.
  if (foregroundNodes.length === 0) {
    return;
  }

  // One node: Centered on screen
  if (foregroundNodes.length === 1) {
    foregroundNodes[0].tweenToPosition(0, 0, 600, tweens.easeOutQuad);
    return;
  }

  var myNode;

  // Two nodes: Placed across from each other, local node on left
  if (foregroundNodes.length === 2) {
    myNode = this.localNode;
    var otherNode = _.find(foregroundNodes, function (node) {
      return node !== myNode;
    });
    myNode.tweenToPosition(-75, 0, 400, tweens.easeOutQuad);
    otherNode.tweenToPosition(75, 0, 600, tweens.easeOutQuad);
    return;
  }

  // Three or more nodes:
  // * Local node on left
  // * Router in the middle
  // * Other nodes evenly distributed in a circle
  myNode = this.localNode;
  var routerNode = _.find(foregroundNodes, function (node) {
    return node.isRouter;
  });
  var otherNodes = foregroundNodes.filter(function (node) {
    return node !== myNode && node !== routerNode;
  });

  myNode.tweenToPosition(-100, 0, 400, tweens.easeOutQuad);
  routerNode.tweenToPosition(0, 0, 500, tweens.easeOutQuad);
  var radiansBetweenNodes = 2 * Math.PI / (otherNodes.length + 1); // Include myNode!
  for (var i = 0; i < otherNodes.length; i++) {
    // sin(rad) = o/h
    var h = 100;
    // Extra Math.PI here puts 0deg on the left.
    var rad = Math.PI + (i + 1) * radiansBetweenNodes;
    var x = Math.cos(rad) * h;
    var y = Math.sin(rad) * h;
    otherNodes[i].tweenToPosition(x, y, 600, tweens.easeOutQuad);
  }
};

/**
 * Explicitly control VizNodes in the foreground, moving them into a desired
 * configuration based on their number and types.  Nodes are given animation
 * commands (via tweenToPosition) so that they interpolate nicely to their target
 * positions.
 *
 * Configurations:
 * One node (local node): Centered on the screen.
 *   |  L  |
 *
 * Two nodes: Local node on left, remote node on right, nothing in the middle.
 *   | L-R |
 *
 * Three or more nodes: Distributed around center of frame
 * 3:    O    4:  O      5: O  O    6: O O
 *   L          L   O      L          L   O
 *       O        O         O  O       O O
 */
NetSimVisualization.prototype.distributeForegroundNodesForBroadcast_ = function () {
  /** @type {Array.<NetSimVizSimulationNode>} */
  var foregroundNodes = this.elements_.filter(function (element) {
    return element instanceof NetSimVizSimulationNode && element.isForeground && !element.isRouter;
  });

  // Sometimes, there's no work to do.
  if (foregroundNodes.length === 0) {
    return;
  }

  // One node: Centered on screen
  if (foregroundNodes.length === 1) {
    foregroundNodes[0].tweenToPosition(0, 0, 600, tweens.easeOutQuad);
    return;
  }

  var myNode;

  // Two nodes: Placed across from each other, local node on left
  if (foregroundNodes.length === 2) {
    myNode = this.localNode;
    var otherNode = _.find(foregroundNodes, function (node) {
      return node !== myNode;
    });
    myNode.tweenToPosition(-75, 0, 400, tweens.easeOutQuad);
    otherNode.tweenToPosition(75, 0, 600, tweens.easeOutQuad);
    return;
  }

  // Three or more nodes:
  // * Local node on left
  // * Other nodes evenly distributed in a circle
  myNode = this.localNode;
  var otherNodes = foregroundNodes.filter(function (node) {
    return node !== myNode;
  });

  myNode.tweenToPosition(-100, 0, 400, tweens.easeOutQuad);
  var radiansBetweenNodes = 2 * Math.PI / (otherNodes.length + 1); // Include myNode!
  for (var i = 0; i < otherNodes.length; i++) {
    // sin(rad) = o/h
    var h = 100;
    // Extra Math.PI here puts 0deg on the left.
    var rad = Math.PI + (i + 1) * radiansBetweenNodes;
    var x = Math.cos(rad) * h;
    var y = Math.sin(rad) * h;
    otherNodes[i].tweenToPosition(x, y, 600, tweens.easeOutQuad);
  }
};

/**
 * @param {DnsMode} newDnsMode
 */
NetSimVisualization.prototype.setDnsMode = function (newDnsMode) {

  this.dnsMode_ = newDnsMode;

  // Show/hide the auto-DNS node according to the new state
  if (newDnsMode === DnsMode.AUTOMATIC) {
    this.makeAutoDnsNode();
  } else {
    this.destroyAutoDnsNode();
  }

  // Tell all nodes about the new DNS mode, so they can decide whether to
  // show or hide their address.
  this.elements_.forEach(function (vizElement) {
    if (vizElement instanceof NetSimVizSimulationNode) {
      vizElement.setDnsMode(newDnsMode);
    }
  });

  // Update layering and layout since we just added/removed a node.
  this.pullElementsToForeground();
  this.distributeForegroundNodes();
};

/**
 * If it doesn't already exist, create an auto-DNS node and corresponding
 * wire.
 */
NetSimVisualization.prototype.makeAutoDnsNode = function () {
  if (!this.autoDnsNode_) {
    this.autoDnsNode_ = new NetSimVizAutoDnsNode(SHOW_BACKGROUND);
    this.addVizElement_(this.autoDnsNode_);

    this.autoDnsWire_ = new NetSimVizWire(this.autoDnsNode_, null);
    this.addVizElement_(this.autoDnsWire_);
  }
};

/**
 * Manually update the auto-DNS node and wire to match the foreground router.
 */
NetSimVisualization.prototype.updateAutoDnsNode = function () {
  if (!this.autoDnsNode_) {
    return;
  }

  var foregroundRouterNode = _.find(this.elements_, function (element) {
    return element instanceof NetSimVizSimulationNode && element.isRouter && element.isForeground;
  });

  // Update address to match foreground router
  if (foregroundRouterNode) {
    this.autoDnsNode_.setAddress(foregroundRouterNode.autoDnsAddress);
  }

  // Update wire endpoints
  this.autoDnsWire_.localVizNode = this.autoDnsNode_;
  this.autoDnsWire_.remoteVizNode = foregroundRouterNode;
};

/**
 * Remove the auto-DNS node and wire.
 */
NetSimVisualization.prototype.destroyAutoDnsNode = function () {
  if (this.autoDnsNode_) {
    this.autoDnsNode_.kill();
    this.autoDnsNode_ = null;
  }

  if (this.autoDnsWire_) {
    this.autoDnsWire_.kill();
    this.autoDnsWire_ = null;
  }
};

/**
 * @param {number} dnsNodeID
 */
NetSimVisualization.prototype.setDnsNodeID = function (dnsNodeID) {
  this.elements_.forEach(function (vizElement) {
    if (vizElement instanceof NetSimVizSimulationNode) {
      vizElement.setIsDnsNode(vizElement.getCorrespondingEntityId() === dnsNodeID);
    }
  });
};

/**
 * Update encoding-view setting across the visualization.
 *
 * @param {EncodingType[]} newEncodings
 */
NetSimVisualization.prototype.setEncodings = function (newEncodings) {
  this.encodings_ = newEncodings;
  this.elements_.forEach(function (vizElement) {
    if (vizElement instanceof NetSimVizSimulationWire) {
      vizElement.setEncodings(newEncodings);
    }
  });
};

/**
 * Kick off an animation that will show the state of the simplex wire being
 * set by the local node.
 * @param {"0"|"1"} newState
 */
NetSimVisualization.prototype.animateSetWireState = function (newState) {
  // Assumptions - we are talking about the wire between the local node
  // and its remote partner.
  // This only gets used in peer-to-peer mode, so there should be an incoming
  // wire too, which we should hide.
  // This is a no-op if no such wire exists.
  // We can stop any previous animation on the wire if this is called

  var vizWire = this.getVizWireToRemote();
  var incomingWire = this.getVizWireFromRemote();
  if (!(vizWire && incomingWire)) {
    return;
  }

  // Hide the incoming wire because we are in simplex mode.
  incomingWire.hide();
  // Animate the outgoing wire
  vizWire.animateSetState(newState);
};

/**
 * Kick off an animation that will show the state of the simplex wire being
 * read by the local node.
 * @param {"0"|"1"} newState
 */
NetSimVisualization.prototype.animateReadWireState = function (newState) {
  // Assumes we are in simplex P2P mode and talking about the wire between
  // the local node and its remote partner.  This is a no-op if no such wire
  // exists.  We can stop any previous animation on the wire if this is called.

  var vizWire = this.getVizWireToRemote();
  var incomingWire = this.getVizWireFromRemote();
  if (!(vizWire && incomingWire)) {
    return;
  }

  // Hide the incoming wire because we are in simplex mode.
  incomingWire.hide();
  // Animate the outgoing wire
  vizWire.animateReadState(newState);
};

/**
 * Find the outgoing wire from the local node to a remote node.
 * @returns {NetSimVizSimulationWire|null} null if no outgoing connection is established.
 */
NetSimVisualization.prototype.getVizWireToRemote = function () {
  if (!this.localNode) {
    return null;
  }

  var outgoingWires = this.elements_.filter(function (element) {
    return element instanceof NetSimVizSimulationWire && element.localVizNode === this.localNode;
  }, this);

  if (outgoingWires.length === 0) {
    return null;
  }

  return outgoingWires[0];
};

/**
 * Find the incoming wire from a remote node to the local node.
 * @returns {NetSimVizSimulationWire|null} null if no incoming connection is established.
 */
NetSimVisualization.prototype.getVizWireFromRemote = function () {
  if (!this.localNode) {
    return null;
  }

  var incomingWires = this.elements_.filter(function (element) {
    return element instanceof NetSimVizSimulationWire && element.remoteVizNode === this.localNode;
  }, this);

  if (incomingWires.length === 0) {
    return null;
  }

  return incomingWires[0];
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimNodeFactory":"/home/ubuntu/staging/apps/build/js/netsim/NetSimNodeFactory.js","./NetSimVisualization.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimVisualization.html.ejs","./NetSimVizAutoDnsNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizAutoDnsNode.js","./NetSimVizNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizNode.js","./NetSimVizSimulationNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizSimulationNode.js","./NetSimVizSimulationWire":"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizSimulationWire.js","./NetSimVizWire":"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizWire.js","./NetSimWire":"/home/ubuntu/staging/apps/build/js/netsim/NetSimWire.js","./tweens":"/home/ubuntu/staging/apps/build/js/netsim/tweens.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizSimulationWire.js":[function(require,module,exports){
/**
 * @overview Wires in the visualization that map to simulation entities.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

require('../utils');
var NetSimGlobals = require('./NetSimGlobals');
var NetSimVizNode = require('./NetSimVizNode');
var NetSimVizWire = require('./NetSimVizWire');

/**
 * @param {NetSimWire} sourceWire
 * @param {function} getElementByEntityID - Allows this wire to search
 *        for other entities in the simulation
 * @constructor
 * @augments NetSimVizWire
 */
var NetSimVizSimulationWire = module.exports = function (sourceWire, getElementByEntityId) {
  var localNode = getElementByEntityId(NetSimVizNode, sourceWire.localNodeID);
  var remoteNode = getElementByEntityId(NetSimVizNode, sourceWire.remoteNodeID);
  NetSimVizWire.call(this, localNode, remoteNode);

  /**
   * ID of the NetSimWire that this NetSimVizSimulationWire maps to.
   * @type {number}
   */
  this.correspondingWireId_ = sourceWire.entityID;

  /**
   * UUID of the NetSimWire that this NetSimVizSimulationWire maps to.
   * @type {number}
   */
  this.correspondingWireUuid_ = sourceWire.uuid;

  /**
   * Bound getElementByEntityId method from vizualization controller;
   * we hold on to this so that calls to configureFrom can find nodes later.
   * @type {Function}
   * @private
   */
  this.getElementByEntityId_ = getElementByEntityId;

  this.configureFrom(sourceWire);
  this.render();
};
NetSimVizSimulationWire.inherits(NetSimVizWire);

/**
 * Configuring a wire means looking up the viz nodes that will be its endpoints.
 * @param {NetSimWire} sourceWire
 */
NetSimVizSimulationWire.prototype.configureFrom = function (sourceWire) {
  this.correspondingWireId_ = sourceWire.entityID;
  this.correspondingWireUuid_ = sourceWire.uuid;

  this.localVizNode = this.getElementByEntityId_(NetSimVizNode, sourceWire.localNodeID);
  this.remoteVizNode = this.getElementByEntityId_(NetSimVizNode, sourceWire.remoteNodeID);

  if (this.localVizNode) {
    this.localVizNode.setAddress(sourceWire.localAddress);
  }

  if (this.remoteVizNode) {
    this.remoteVizNode.setAddress(sourceWire.remoteAddress);
  }

  if (NetSimGlobals.getLevelConfig().broadcastMode) {
    this.getRoot().css('display', 'none');
  }
};

/**
 * ID of the NetSimEntity that maps to this visualization element.
 * @returns {number}
 */
NetSimVizSimulationWire.prototype.getCorrespondingEntityId = function () {
  return this.correspondingWireId_;
};

/**
 * @param {NetSimEntity} entity
 * @returns {boolean} TRUE if this VizElement represents the given NetSimEntity.
 */
NetSimVizSimulationWire.prototype.representsEntity = function (entity) {
  return this.correspondingWireId_ === entity.entityID && this.correspondingWireUuid_ === entity.uuid;
};

/**
 * Killing a visualization node removes its ID so that it won't conflict with
 * another viznode of matching ID being added, and begins its exit animation.
 * @override
 */
NetSimVizSimulationWire.prototype.kill = function () {
  NetSimVizSimulationWire.superPrototype.kill.call(this);
  this.correspondingWireId_ = undefined;
  this.correspondingWireUuid_ = undefined;
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimVizNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizNode.js","./NetSimVizWire":"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizWire.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizWire.js":[function(require,module,exports){
/**
 * @overview Wires in the visualization.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

require('../utils');
var jQuerySvgElement = require('./NetSimUtils').jQuerySvgElement;
var NetSimVizElement = require('./NetSimVizElement');
var tweens = require('./tweens');
var DataConverters = require('./DataConverters');
var NetSimConstants = require('./NetSimConstants');

var EncodingType = NetSimConstants.EncodingType;

var binaryToAB = DataConverters.binaryToAB;

/**
 * How far the flying label should rest above the wire.
 * @type {number}
 * @const
 */
var TEXT_FINAL_VERTICAL_OFFSET = -10;

/**
 * @param {NetSimVizNode} localNode
 * @param {NetSimVizNode} remoteNode
 * @constructor
 * @augments NetSimVizElement
 */
var NetSimVizWire = module.exports = function (localNode, remoteNode) {
  NetSimVizElement.call(this);

  var root = this.getRoot();
  root.addClass('viz-wire');

  /**
   * @type {jQuery} wrapped around a SVGPathElement
   * @private
   */
  this.line_ = jQuerySvgElement('path').appendTo(root);

  /**
   * @type {jQuery} wrapped around a SVGTextElement
   * @private
   */
  this.questionMark_ = jQuerySvgElement('text').text('?').addClass('question-mark').appendTo(root);

  /**
   * @type {jQuery} wrapped around a SVGTextElement
   * @private
   */
  this.text_ = jQuerySvgElement('text').addClass('state-label').appendTo(root);

  /**
   * X-coordinate of text label, for animation.
   * @type {number}
   * @private
   */
  this.textPosX_ = 0;

  /**
   * Y-coordinate of text label, for animation.
   * @type {number}
   * @private
   */
  this.textPosY_ = 0;

  /**
   * Flag that allows us to force an update of the text position; used
   * when we move text without tweens because that method prevents us
   * from being able to detect normally that something has changed
   * @type {boolean}
   * @private
   */
  this.forceTextPosRender_ = false;

  /**
   * SVG Path Description of this.line_, for animation
   * @type {string}
   * @private
   */
  this.pathData_ = '';

  /**
   * `TEXT_FINAL_VERTICAL_OFFSET`-offset X and Y coordinates for the
   * center of the wire; used for positioning the question mark
   * @type {{x:number, y:number}}
   * @private
   */
  this.wireCenter_ = { x: 0, y: 0 };

  /**
   * Enabled encoding types.
   * @type {EncodingType[]}
   * @private
   */
  this.encodings_ = [];

  this.localVizNode = localNode;
  this.remoteVizNode = remoteNode;

  this.render();
};
NetSimVizWire.inherits(NetSimVizElement);

/**
 * Update path data for wire if we can detect pending changes
 * @param {RunLoop.Clock} [clock] - somtimes omitted during setup
 */
NetSimVizWire.prototype.render = function (clock) {

  // Cache the local position values here, so we can check later if
  // anything has changed before making an expensive `.attr` call
  var textPosX = this.textPosX_;
  var textPosY = this.textPosY_;
  var pathData = this.pathData_;
  var wireCenter = this.wireCenter_;

  // Make the call to super to update everything we can, then
  // recalculate the values of ours that are dependent on the movement
  // of our connected nodes
  NetSimVizWire.superPrototype.render.call(this, clock);

  if (this.localVizNode && this.remoteVizNode) {
    this.pathData_ = ['M', this.localVizNode.posX, this.localVizNode.posY, 'L', this.remoteVizNode.posX, this.remoteVizNode.posY].join(' ');
    this.wireCenter_ = this.getWireCenterPosition();
  }

  // Finally, if and only if any of the values we care about have
  // changed, update our element in the DOM
  if (this.forceTextPosRender_ || textPosX !== this.textPosX_ || textPosY !== this.textPosY_) {
    this.text_.attr('x', this.textPosX_).attr('y', this.textPosY_);
    this.forceTextPosRender_ = false;
  }
  if (pathData !== this.pathData_) {
    this.line_.attr('d', this.pathData_);
  }
  if (wireCenter.x !== this.wireCenter_.x || wireCenter.y !== this.wireCenter_.y) {
    this.questionMark_.attr('x', this.wireCenter_.x).attr('y', this.wireCenter_.y);
  }
};

/**
 * Hide this wire - used to hide the incoming wire when we're trying to show
 * simplex mode.
 */
NetSimVizWire.prototype.hide = function () {
  this.getRoot().addClass('hidden-wire');
};

/**
 * Killing a visualization node removes its ID so that it won't conflict with
 * another node of matching ID being added, and begins its exit animation.
 * @override
 */
NetSimVizWire.prototype.kill = function () {
  NetSimVizWire.superPrototype.kill.call(this);
  this.localVizNode = null;
  this.remoteVizNode = null;
};

/**
 * Update encoding-view settings.  Determines how bit sets/reads are
 * displayed when animating above the wire.
 *
 * @param {EncodingType[]} newEncodings
 */
NetSimVizWire.prototype.setEncodings = function (newEncodings) {
  this.encodings_ = newEncodings;
};

/**
 * Kick off an animation of the wire state being set by the local viznode.
 * @param {"0"|"1"} newState
 */
NetSimVizWire.prototype.animateSetState = function (newState) {
  if (!(this.localVizNode && this.remoteVizNode)) {
    return;
  }

  var flyOutMs = 300;
  var holdPositionMs = 300;

  this.stopAllAnimation();
  this.setWireClasses_(newState);
  this.text_.text(this.getDisplayBit_(newState));
  this.snapTextToPosition(this.getLocalNodePosition());
  this.tweenTextToPosition(this.getWireCenterPosition(), flyOutMs, tweens.easeOutQuad);
  this.doAfterDelay(flyOutMs + holdPositionMs, (function () {
    this.setWireClasses_('unknown');
  }).bind(this));
};

/**
 * Kick off an animation of the wire state being read by the local viznode.
 * @param {"0"|"1"} newState
 */
NetSimVizWire.prototype.animateReadState = function (newState) {
  if (!(this.localVizNode && this.remoteVizNode)) {
    return;
  }

  var holdPositionMs = 300;
  var flyToNodeMs = 300;

  this.stopAllAnimation();
  this.setWireClasses_(newState);
  this.text_.text(this.getDisplayBit_(newState));
  this.snapTextToPosition(this.getWireCenterPosition());
  this.doAfterDelay(holdPositionMs, (function () {
    this.tweenTextToPosition(this.getLocalNodePosition(), flyToNodeMs, tweens.easeOutQuad);
    this.setWireClasses_('unknown');
  }).bind(this));
};

/**
 * Adds/removes classes from the SVG root according to the given wire state.
 * Passing anything other than "1" or "0" will put the wire in an "unknown"
 * state, which begins a CSS transition fade back to gray.
 * @param {"0"|"1"|*} newState
 * @private
 */
NetSimVizWire.prototype.setWireClasses_ = function (newState) {
  var stateOff = newState === '0';
  var stateOn = !stateOff && newState === '1';
  var stateUnknown = !stateOff && !stateOn;

  this.getRoot().toggleClass('state-on', stateOn);
  this.getRoot().toggleClass('state-off', stateOff);
  this.getRoot().toggleClass('state-unknown', stateUnknown);
};

/**
 * Get an appropriate "display bit" to show above the wire, given the
 * current enabled encodings (should match the "set wire" button label)
 * @param {"0"|"1"} wireState
 * @returns {string} a display bit appropriate to the enabled encodings.
 * @private
 */
NetSimVizWire.prototype.getDisplayBit_ = function (wireState) {
  if (this.isEncodingEnabled_(EncodingType.A_AND_B) && !this.isEncodingEnabled_(EncodingType.BINARY)) {
    wireState = binaryToAB(wireState);
  }
  return wireState;
};

/**
 * Check whether the given encoding is currently displayed by the panel.
 * @param {EncodingType} queryEncoding
 * @returns {boolean}
 * @private
 */
NetSimVizWire.prototype.isEncodingEnabled_ = function (queryEncoding) {
  return this.encodings_.some(function (enabledEncoding) {
    return enabledEncoding === queryEncoding;
  });
};

/**
 * Creates an animated motion from the text's current position to the
 * given coordinates.
 * @param {{x:number, y:number}} destination
 * @param {number} [duration=600] in milliseconds
 * @param {TweenFunction} [tweenFunction=linear]
 */
NetSimVizWire.prototype.tweenTextToPosition = function (destination, duration, tweenFunction) {
  if (duration > 0) {
    this.tweens_.push(new tweens.TweenValueTo(this, 'textPosX_', destination.x, duration, tweenFunction));
    this.tweens_.push(new tweens.TweenValueTo(this, 'textPosY_', destination.y, duration, tweenFunction));
  } else {
    this.textPosX_ = destination.x;
    this.textPosY_ = destination.y;
    this.forceTextPosRender_ = true;
  }
};

/**
 * Snaps the text to the given position.
 * @param {{x:number, y:number}} destination
 */
NetSimVizWire.prototype.snapTextToPosition = function (destination) {
  this.tweenTextToPosition(destination, 0);
};

/**
 * @returns {{x:number, y:number}}
 */
NetSimVizWire.prototype.getLocalNodePosition = function () {
  return {
    x: this.localVizNode.posX,
    y: this.localVizNode.posY
  };
};

/**
 * @returns {{x:number, y:number}}
 */
NetSimVizWire.prototype.getWireCenterPosition = function () {
  return {
    x: (this.remoteVizNode.posX - this.localVizNode.posX) / 2 + this.localVizNode.posX,
    y: (this.remoteVizNode.posY - this.remoteVizNode.posY) / 2 + this.localVizNode.posY + TEXT_FINAL_VERTICAL_OFFSET
  };
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./DataConverters":"/home/ubuntu/staging/apps/build/js/netsim/DataConverters.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js","./NetSimVizElement":"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizElement.js","./tweens":"/home/ubuntu/staging/apps/build/js/netsim/tweens.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizSimulationNode.js":[function(require,module,exports){
/**
 * @overview Nodes in the visualization that map to simulation entities.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

require('../utils');
var NetSimConstants = require('./NetSimConstants');
var NetSimVizNode = require('./NetSimVizNode');

var NodeType = NetSimConstants.NodeType;

var NetSimGlobals = require('./NetSimGlobals');

/**
 * @param {NetSimNode} sourceNode
 * @param {boolean} useBackgroundAnimation - changes the behavior of this node
 *        when it's in the background layer
 * @constructor
 * @augments NetSimVizNode
 */
var NetSimVizSimulationNode = module.exports = function (sourceNode, useBackgroundAnimation) {
  NetSimVizNode.call(this, useBackgroundAnimation);

  /**
   * ID of the NetSimNode that this NetSimVizSimulationNode represents.
   * @type {number}
   */
  this.correspondingNodeID_ = sourceNode.entityID;

  /**
   * UUID of the NetSimNode that this NetSimVizSimulationNode represents.
   * @type {string}
   */
  this.correspondingNodeUuid_ = sourceNode.uuid;

  /**
   * If we end up representing a router, we may need to hold the auto-dns address
   * to pass to a fake auto-dns node.
   * @type {string}
   */
  this.autoDnsAddress = undefined;

  this.configureFrom(sourceNode);
  this.render();
};
NetSimVizSimulationNode.inherits(NetSimVizNode);

/**
 *
 * @param {NetSimNode} sourceNode
 */
NetSimVizSimulationNode.prototype.configureFrom = function (sourceNode) {
  this.correspondingNodeId_ = sourceNode.entityID;
  this.correspondingNodeUuid_ = sourceNode.uuid;

  var levelConfig = NetSimGlobals.getLevelConfig();
  if (levelConfig.showHostnameInGraph) {
    this.setName(sourceNode.getHostname());
  } else {
    this.setName(sourceNode.getShortDisplayName());
  }

  if (sourceNode.getNodeType() === NodeType.ROUTER) {
    this.isRouter = true;
    this.getRoot().addClass('router-node');
    this.autoDnsAddress = sourceNode.getAutoDnsAddress();
    if (levelConfig.broadcastMode) {
      this.getRoot().css('display', 'none');
    }
  }
};

/**
 * ID of the simulation entity that maps to this one.
 * @returns {number}
 */
NetSimVizSimulationNode.prototype.getCorrespondingEntityId = function () {
  return this.correspondingNodeId_;
};

/**
 * @param {NetSimEntity} entity
 * @returns {boolean} TRUE of this VizElement represents the given Entity.
 */
NetSimVizSimulationNode.prototype.representsEntity = function (entity) {
  return this.correspondingNodeId_ === entity.entityID && this.correspondingNodeUuid_ === entity.uuid;
};

/**
 * Killing a visualization node removes its ID so that it won't conflict with
 * another node of matching ID being added, and begins its exit animation.
 * @override
 */
NetSimVizSimulationNode.prototype.kill = function () {
  NetSimVizSimulationNode.superPrototype.kill.call(this);
  this.correspondingNodeId_ = undefined;
  this.correspondingNodeUuid_ = undefined;
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimVizNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizNode.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizAutoDnsNode.js":[function(require,module,exports){
/**
 * @overview Visualization auto-dns node.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

require('../utils');
var NetSimGlobals = require('./NetSimGlobals');
var NetSimVizNode = require('./NetSimVizNode');

/**
 * @param {boolean} useBackgroundAnimation - changes the behavior of this node
 *        when it's in the background layer
 * @constructor
 * @augments NetSimVizNode
 */
var NetSimVizAutoDnsNode = module.exports = function (useBackgroundAnimation) {
  NetSimVizNode.call(this, useBackgroundAnimation);

  this.getRoot().addClass('auto-dns-node');

  var levelConfig = NetSimGlobals.getLevelConfig();
  if (levelConfig.showHostnameInGraph) {
    this.setName('dns');
  } else {
    this.setName('DNS');
  }

  this.setIsDnsNode(true);
  this.render();
};
NetSimVizAutoDnsNode.inherits(NetSimVizNode);

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimVizNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizNode.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizNode.js":[function(require,module,exports){
/**
 * @overview Nodes in the visualization.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

require('../utils');
var NetSimConstants = require('./NetSimConstants');
var jQuerySvgElement = require('./NetSimUtils').jQuerySvgElement;
var NetSimVizElement = require('./NetSimVizElement');
var tweens = require('./tweens');

var DnsMode = NetSimConstants.DnsMode;

var NetSimGlobals = require('./NetSimGlobals');

/**
 * The narrowest that a text bubble is allowed to be.
 * @type {number}
 * @const
 */
var TEXT_MIN_WIDTH = 30;

/**
 * Width to add to the bubble beyond the width of the student's name.
 * @type {number}
 * @const
 */
var TEXT_PADDING_X = 20;

/**
 * Height to add to the bubble beyond the height of the student's name.
 * @type {number}
 * @const
 */
var TEXT_PADDING_Y = 10;

/**
 * @param {boolean} useBackgroundAnimation - changes the behavior of this node
 *        when it's in the background layer.
 * @constructor
 * @augments NetSimVizElement
 */
var NetSimVizNode = module.exports = function (useBackgroundAnimation) {
  NetSimVizElement.call(this);

  /**
   * @private {string}
   */
  this.address_ = undefined;

  /**
   * @private {DnsMode}
   */
  this.dnsMode_ = undefined;

  /**
   * Whether to start or update any tweens while the node is in the background
   * layer.
   * @private {boolean}
   */
  this.useBackgroundAnimation_ = useBackgroundAnimation;

  /**
   * @type {boolean}
   */
  this.isRouter = false;

  /**
   * @type {boolean}
   */
  this.isLocalNode = false;

  /**
   * @type {boolean}
   */
  this.isDnsNode = false;

  // Give our root node a useful class
  var root = this.getRoot();
  root.addClass('viz-node');

  // Going for a diameter of _close_ to 75
  var radius = 37;
  var textVerticalOffset = 4;

  /**
   *
   * @type {jQuery}
   * @private
   */
  jQuerySvgElement('circle').attr('cx', 0).attr('cy', 0).attr('r', radius).appendTo(root);

  this.nameGroup_ = jQuerySvgElement('g').attr('transform', 'translate(0,0)').appendTo(root);

  this.displayName_ = jQuerySvgElement('text').attr('x', 0).attr('y', textVerticalOffset);

  this.nameBox_ = jQuerySvgElement('rect').addClass('name-box');

  this.nameGroup_.append(this.nameBox_).append(this.displayName_);

  this.addressGroup_ = jQuerySvgElement('g').attr('transform', 'translate(0,30)').hide().appendTo(root);

  this.addressBox_ = jQuerySvgElement('rect').addClass('address-box').appendTo(this.addressGroup_);

  this.addressText_ = jQuerySvgElement('text').addClass('address-box').attr('x', 0).attr('y', textVerticalOffset).text('?').appendTo(this.addressGroup_);

  // Set an initial default tween for zooming in from nothing.
  if (this.useBackgroundAnimation_) {
    this.snapToScale(0);
    this.tweenToScale(0.5, 800, tweens.easeOutElastic);
  } else {
    this.snapToScale(0.5);
  }
};
NetSimVizNode.inherits(NetSimVizElement);

/**
 * Flag this viz node as the simulation local node.
 */
NetSimVizNode.prototype.setIsLocalNode = function () {
  this.isLocalNode = true;
  this.getRoot().addClass('local-node');
};

/**
 * Change the display name of the viz node
 * @param {string} newName
 */
NetSimVizNode.prototype.setName = function (newName) {
  this.displayName_.text(newName);
  this.resizeNameBox_();
};

/** @private */
NetSimVizNode.prototype.resizeNameBox_ = function () {
  this.resizeRectToText_(this.nameBox_, this.displayName_);
};

/** @private */
NetSimVizNode.prototype.resizeAddressBox_ = function () {
  this.resizeRectToText_(this.addressBox_, this.addressText_);
};

/**
 * Utility for resizing a background rounded-rect to fit the given text element.
 * @param {jQuery} rect
 * @param {jQuery} text
 * @private
 */
NetSimVizNode.prototype.resizeRectToText_ = function (rect, text) {
  try {
    var box = text[0].getBBox();
    var width = Math.max(TEXT_MIN_WIDTH, box.width + TEXT_PADDING_X);
    var height = box.height + TEXT_PADDING_Y;
    var halfWidth = width / 2;
    var halfHeight = height / 2;
    rect.attr('x', -halfWidth).attr('y', -halfHeight).attr('rx', halfHeight).attr('ry', halfHeight).attr('width', width).attr('height', height);
  } catch (e) {
    // Just allow this to be a no-op if it fails.  In some browsers,
    // getBBox will throw if the element is not yet in the DOM.
  }
};

/**
 * Killing a visualization node removes its ID so that it won't conflict with
 * another node of matching ID being added, and begins its exit animation.
 * @override
 */
NetSimVizNode.prototype.kill = function () {
  NetSimVizNode.superPrototype.kill.call(this);
  this.stopAllAnimation();
  this.tweenToScale(0, 200, tweens.easeInQuad);
};

/**
 * Provides drifting animation for nodes in the background.
 * @param {RunLoop.Clock} clock
 */
NetSimVizNode.prototype.tick = function (clock) {
  NetSimVizNode.superPrototype.tick.call(this, clock);

  // Trigger a new drift if we're in the background and the last one finished.
  if (this.useBackgroundAnimation_ && !this.isForeground && this.tweens_.length === 0) {
    var randomX = 300 * Math.random() - 150;
    var randomY = 300 * Math.random() - 150;
    this.tweenToPosition(randomX, randomY, 20000, tweens.easeInOutQuad);
  }
};

/**
 * When visible, runs every frame
 * @param {RunLoop.Clock} [clock]
 */
NetSimVizNode.prototype.render = function (clock) {
  NetSimVizNode.superPrototype.render.call(this, clock);

  // If currently animating, adjust text box sizes to match
  if (this.isForeground && this.tweens_.length > 0) {
    this.resizeNameBox_();
    this.resizeAddressBox_();
  }
};

/**
 * @param {boolean} isForeground
 */
NetSimVizNode.prototype.onDepthChange = function (isForeground) {
  NetSimVizNode.superPrototype.onDepthChange.call(this, isForeground);

  // Don't add tweens if this node has been killed
  if (this.isDying() || this.isDead()) {
    return;
  }

  this.tweens_.length = 0;
  if (isForeground) {
    this.tweenToScale(1, 600, tweens.easeOutElastic);
  } else if (this.useBackgroundAnimation_) {
    this.tweenToScale(0.5, 600, tweens.easeOutElastic);
  } else {
    this.snapToScale(0.5);
  }
};

/**
 * @param {string} address
 */
NetSimVizNode.prototype.setAddress = function (address) {
  this.address_ = address;
  this.updateAddressDisplay();
};

/**
 * @param {DNSMode} newDnsMode
 */
NetSimVizNode.prototype.setDnsMode = function (newDnsMode) {
  this.dnsMode_ = newDnsMode;
  this.updateAddressDisplay();
};

/**
 * @param {boolean} isDnsNode
 */
NetSimVizNode.prototype.setIsDnsNode = function (isDnsNode) {
  this.isDnsNode = isDnsNode;
  this.updateAddressDisplay();
};

NetSimVizNode.prototype.updateAddressDisplay = function () {
  var levelConfig = NetSimGlobals.getLevelConfig();

  // If we are never assigned an address, don't try to show one.
  // In broadcast mode we will be assigned addresses but never use them, so
  //   they should be hidden.
  // Routers never show their address.
  if (this.address_ === undefined || levelConfig.broadcastMode || this.isRouter) {
    this.addressGroup_.hide();
    return;
  }

  this.addressGroup_.show();
  if (this.dnsMode_ === DnsMode.NONE) {
    this.addressText_.text(this.address_ !== undefined ? this.address_ : '?');
  } else {
    this.addressText_.text(this.isLocalNode || this.isDnsNode ? this.address_ : '?');
  }
  this.resizeAddressBox_();
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js","./NetSimVizElement":"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizElement.js","./tweens":"/home/ubuntu/staging/apps/build/js/netsim/tweens.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizElement.js":[function(require,module,exports){
/**
 * @overview Base type for visible elements in the visualization.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var jQuerySvgElement = require('./NetSimUtils').jQuerySvgElement;
var tweens = require('./tweens');

/**
 * A VizElement is an object that  has a representation in the network
 * visualization.  Its role is to maintain that visual representation.
 * A VizElement has helpers for positioning, scaling and tweening.
 * Every VizElement has a root element which is a <g> tag, an SVG "group"
 * that contains the other components that will actually draw.
 *
 * @constructor
 */
var NetSimVizElement = module.exports = function () {
  /**
   * @type {number}
   */
  this.posX = 0;

  /**
   * @type {number}
   */
  this.posY = 0;

  /**
   * @type {number}
   */
  this.scale = 1;

  /**
   * @type {boolean}
   */
  this.isForeground = false;

  /**
   * Root SVG <g> (group) element for this object.
   * @type {jQuery}
   * @private
   */
  this.rootGroup_ = jQuerySvgElement('g');

  /**
   * Set of tweens we should currently be running on this node.
   * Processed by tick()
   * @type {Array.<exports.TweenValueTo>}
   * @private
   */
  this.tweens_ = [];

  /**
   * @type {boolean}
   * @private
   */
  this.isDead_ = false;
};

/**
 * @returns {jQuery} wrapper around root <g> element
 */
NetSimVizElement.prototype.getRoot = function () {
  return this.rootGroup_;
};

/**
 * Begins the process of destroying this VizElement.  Once started, this
 * process cannot be stopped.
 * This method can be overridden to trigger an "on-death" animation.
 */
NetSimVizElement.prototype.kill = function () {
  this.isDead_ = true;
};

/**
 * @returns {boolean} whether this entity is done with its death animation
 *          and is ready to be cleaned up by the visualization manager.
 *          The default implementation here returns TRUE as soon as kill()
 *          is called and all animations are completed.
 */
NetSimVizElement.prototype.isDead = function () {
  return this.isDead_ && this.tweens_.length === 0;
};

/**
 * @returns {boolean} whether this entity is playing its final animation
 *          and will be ready to be cleaned up by the visualization manager
 *          soon.
 */
NetSimVizElement.prototype.isDying = function () {
  return this.isDead_ && this.tweens_.length > 0;
};

/**
 * Update all of the tweens currently running on this VizElement (which will
 * probably modify its properties) and then remove any tweens that are completed
 * from the list.
 */
NetSimVizElement.prototype.tick = function () {};

/**
 * Update the root group's properties to reflect our current position
 * and scale.
 * @param {RunLoop.Clock} [clock] - sometimes omitted during setup
 */
NetSimVizElement.prototype.render = function (clock) {
  if (!clock) {
    return;
  }

  // cache initial settings here; we check them later to see if anything
  // has actually changed
  var posX = this.posX;
  var posY = this.posY;
  var scale = this.scale;

  // Update tweens in the render loop so they are very smooth
  this.tweens_.forEach(function (tween) {
    tween.tick(clock);
  });
  this.tweens_ = this.tweens_.filter(function (tween) {
    return !tween.isFinished;
  });

  // If nothing has changed, don't bother to update transform
  if (posX !== this.posX || posY !== this.posY || scale !== this.scale) {
    var transform = 'translate(' + this.posX + ' ' + this.posY + ')' + ' scale(' + this.scale + ')';
    this.rootGroup_.attr('transform', transform);
  }
};

/**
 * @param {boolean} isForeground
 */
NetSimVizElement.prototype.onDepthChange = function (isForeground) {
  this.isForeground = isForeground;
};

/**
 * Throw away all existing tweens on this object.
 */
NetSimVizElement.prototype.stopAllAnimation = function () {
  this.tweens_.length = 0;
};

/**
 * Stops any existing motion animation and begins an animated motion to the
 * given coordinates.  Note: This animates the VizElement's root group.
 * @param {number} newX given in SVG points
 * @param {number} newY given in SVG points
 * @param {number} [duration=600] in milliseconds
 * @param {TweenFunction} [tweenFunction=linear]
 */
NetSimVizElement.prototype.tweenToPosition = function (newX, newY, duration, tweenFunction) {
  // Don't accept new animation commands if we've already been killed
  if (this.isDying() || this.isDead()) {
    return;
  }

  // Remove any existing tweens controlling posX or posY
  this.removeAllTweensOnProperties(['posX', 'posY']);

  // Add two new tweens, one for each axis
  if (duration > 0) {
    this.tweens_.push(new tweens.TweenValueTo(this, 'posX', newX, duration, tweenFunction));
    this.tweens_.push(new tweens.TweenValueTo(this, 'posY', newY, duration, tweenFunction));
  } else {
    this.posX = newX;
    this.posY = newY;
  }
};

/**
 * Alias for calling tweenToPosition with a zero duration
 * @param {number} newX given in SVG points
 * @param {number} newY given in SVG points
 */
NetSimVizElement.prototype.snapToPosition = function (newX, newY) {
  this.tweenToPosition(newX, newY, 0);
};

/**
 * Stops any existing animation of the entity's scale and begins an animated
 * change to the given target scale value.  Note: this animates the VizElement's
 * root group.
 * @param {number} newScale where 1.0 is 100% (unscaled)
 * @param {number} [duration=600] in milliseconds
 * @param {TweenFunction} [tweenFunction=linear]
 */
NetSimVizElement.prototype.tweenToScale = function (newScale, duration, tweenFunction) {
  // Remove existing scale tweens
  this.removeAllTweensOnProperty('scale');

  // On nonzero duration, add tween to target scale.  Otherwise just set it.
  if (duration > 0) {
    this.tweens_.push(new tweens.TweenValueTo(this, 'scale', newScale, duration, tweenFunction));
  } else {
    this.scale = newScale;
  }
};

NetSimVizElement.prototype.doAfterDelay = function (delay, callback) {
  if (delay > 0) {
    this.tweens_.push(new tweens.DoAfterDelay(this, delay, callback));
  } else {
    callback();
  }
};

/**
 * Remove (stop) all active tweens that control the given property on this
 * visualization entity.
 * @param {string} propertyName
 */
NetSimVizElement.prototype.removeAllTweensOnProperty = function (propertyName) {
  this.removeAllTweensOnProperties([propertyName]);
};

/**
 * Remove (stop) all active tweens that control any of the given properties
 * on this visualization entity.
 * @param {string[]} propertyNames
 */
NetSimVizElement.prototype.removeAllTweensOnProperties = function (propertyNames) {
  this.tweens_ = this.tweens_.filter(function (tween) {
    var targetsThisEntity = tween.target === this;
    var isRemovableProperty = propertyNames.some(function (name) {
      return tween.propertyName === name;
    });

    // Invert for filter() because we want to keep everything BUT the matched
    // properties
    return !(targetsThisEntity && isRemovableProperty);
  }, this);
};

/**
 * Alias for calling tweenToScale with a zero duration.
 * @param {number} newScale where 1.0 is 100% (unscaled)
 */
NetSimVizElement.prototype.snapToScale = function (newScale) {
  this.tweenToScale(newScale, 0);
};

},{"./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js","./tweens":"/home/ubuntu/staging/apps/build/js/netsim/tweens.js"}],"/home/ubuntu/staging/apps/build/js/netsim/tweens.js":[function(require,module,exports){
/**
 * @overview Tween functions used to animate visualization elements.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var valueOr = require('../utils').valueOr;

/**
 * Default tween duration in milliseconds
 * @type {number}
 * @const
 */
var DEFAULT_TWEEN_DURATION = 600;

/**
 * A four-arg interpolation function.
 *
 * @typedef {function} TweenFunction
 * @param {number} t - current Time, in milliseconds since tween began
 * @param {number} b - Begin value
 * @param {number} c - final Change in value
 * @param {number} d - total tween Duration
 * @returns {number} the interpolated value for the current time
 */

/**
 * Interpolates with a little back-and-forth over the target value at the end.
 * @type {TweenFunction}
 */
exports.easeOutElastic = function (t, b, c, d) {
  var s, p, a;
  s = 1.70158;
  p = 0;
  a = c;
  if (t === 0) {
    return b;
  }
  if ((t /= d) === 1) {
    return b + c;
  }
  if (!p) {
    p = d * 0.3;
  }
  if (a < Math.abs(c)) {
    a = c;
    s = p / 4;
  } else {
    s = p / (2 * Math.PI) * Math.asin(c / a);
  }
  return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
};

/**
 * Interpolates, accelerating as it goes.
 * @type {TweenFunction}
 */
exports.easeInQuad = function (t, b, c, d) {
  return c * (t /= d) * t + b;
};

/**
 * Interpolates, decelerating as it goes.
 * @type {TweenFunction}
 */
exports.easeOutQuad = function (t, b, c, d) {
  return -c * (t /= d) * (t - 2) + b;
};

exports.easeInOutQuad = function (t, b, c, d) {
  if ((t /= d / 2) < 1) {
    return c / 2 * t * t + b;
  }
  return -c / 2 * (--t * (t - 2) - 1) + b;
};

/**
 * Linear interpolation
 * @type {TweenFunction}
 */
exports.linear = function (t, b, c, d) {
  return c * (t / d) + b;
};

/**
 * Wraps a tween method with the state it needs to animate a property.
 * On creation, assumes that property's current value for start values.
 * Must be ticked to progress toward completion.
 *
 * @param {!Object} target - The object owning the property we want to animate
 * @param {!string} propertyName - Must be a valid property on target
 * @param {!number} endValue - The desired final value of the property
 * @param {number} [duration] - How long the tween should take in milliseconds,
 *        default 600ms
 * @param {TweenFunction} [tweenFunction] - A tween function, default linear
 * @constructor
 */
exports.TweenValueTo = function (target, propertyName, endValue, duration, tweenFunction) {
  /**
   * Will be set to TRUE when tween is completed.
   * @type {boolean}
   */
  this.isFinished = false;

  /**
   * Will be set on our first tick.
   * @type {number}
   * @private
   */
  this.startTime_ = undefined;

  /**
   * @type {Object}
   */
  this.target = target;

  /**
   * @type {string}
   * @private
   */
  this.propertyName = propertyName;

  /**
   * @type {TweenFunction}
   * @private
   */
  this.tweenFunction_ = valueOr(tweenFunction, exports.linear);

  /**
   * @type {number}
   * @private
   */
  this.startValue_ = target[propertyName];

  /**
   * @type {number}
   * @private
   */
  this.deltaValue_ = endValue - this.startValue_;

  /**
   * Duration of tween in milliseconds
   * @type {number}
   * @private
   */
  this.duration_ = valueOr(duration, DEFAULT_TWEEN_DURATION);
};

/**
 * @param {RunLoop.clock} clock
 */
exports.TweenValueTo.prototype.tick = function (clock) {
  if (this.startTime_ === undefined) {
    this.startTime_ = clock.time;
  }

  var timeSinceStart = clock.time - this.startTime_;

  if (this.deltaValue_ !== 0) {
    this.target[this.propertyName] = this.tweenFunction_(timeSinceStart, this.startValue_, this.deltaValue_, this.duration_);
  }

  if (timeSinceStart >= this.duration_) {
    this.target[this.propertyName] = this.startValue_ + this.deltaValue_;
    this.isFinished = true;
  }
};

exports.DoAfterDelay = function (target, duration, callback) {
  /**
   * Will be set to TRUE when tween is completed.
   * @type {boolean}
   */
  this.isFinished = false;

  /**
   * Will be set on our first tick.
   * @type {number}
   * @private
   */
  this.startTime_ = undefined;

  /**
   * @type {Object}
   */
  this.target = target;

  /**
   * @type {string}
   * @private
   */
  this.propertyName = null;

  /**
   * Duration of tween in milliseconds
   * @type {number}
   * @private
   */
  this.duration_ = duration;

  /**
   * Function to call when the duration has elapsed.
   * @type {function}
   */
  this.callback_ = callback;
};

/**
 * @param {RunLoop.clock} clock
 */
exports.DoAfterDelay.prototype.tick = function (clock) {
  if (this.startTime_ === undefined) {
    this.startTime_ = clock.time;
  }

  var timeSinceStart = clock.time - this.startTime_;
  if (timeSinceStart >= this.duration_) {
    this.callback_();
    this.isFinished = true;
  }
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimVisualization.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
/**
 * Whether the blurred background layer should be visible.
 * @name showBackground
 * @type {boolean}
 */
; buf.push('\n<svg version="1.1" width="298" height="298" xmlns="http://www.w3.org/2000/svg">\n\n  ');10; if (showBackground) { ; buf.push('\n    <filter id="backgroundBlur">\n      <feGaussianBlur in="SourceGraphic" stdDeviation="5" />\n      <feComponentTransfer>\n        <feFuncA slope="0.5" type="linear"></feFuncA>\n      </feComponentTransfer>\n    </filter>\n  ');17; } ; buf.push('\n\n  <g id="centered-group" transform="translate(150,150)">\n    <g id="background-group"\n       ');21; if (showBackground) { ; buf.push('\n         filter="url(#backgroundBlur)"\n       ');23; } else { ; buf.push('\n         visibility="hidden"\n       ');25; } ; buf.push('\n        ></g>\n\n    <g id="foreground-group"></g>\n  </g>\n</svg>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimTabsComponent.js":[function(require,module,exports){
/**
 * @overview UI controller for tabs area in left column
 *           Directly controls the instructions tab, others are delegated.
 * @see NetSimMyDeviceTab
 * @see NetSimRouterTab
 * @see NetSimDnsTab
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var buildMarkup = require('./NetSimTabsComponent.html.ejs');
var NetSimRouterTab = require('./NetSimRouterTab');
var NetSimMyDeviceTab = require('./NetSimMyDeviceTab');
var NetSimDnsTab = require('./NetSimDnsTab');
var NetSimTabType = require('./NetSimConstants').NetSimTabType;
var shouldShowTab = require('./NetSimUtils').shouldShowTab;
var NetSimGlobals = require('./NetSimGlobals');

/**
 * Wrapper component for tabs panel on the right side of the page.
 * @param {jQuery} rootDiv
 * @param {RunLoop} runLoop
 * @param {Object} callbacks
 * @param {function} callbacks.chunkSizeSliderChangeCallback
 * @param {function} callbacks.myDeviceBitRateChangeCallback
 * @param {function} callbacks.encodingChangeCallback
 * @param {function} callbacks.routerBandwidthSliderChangeCallback
 * @param {function} callbacks.routerBandwidthSliderStopCallback
 * @param {function} callbacks.routerMemorySliderChangeCallback
 * @param {function} callbacks.routerMemorySliderStopCallback
 * @param {function} callbacks.dnsModeChangeCallback
 * @param {function} callbacks.becomeDnsCallback
 * @constructor
 */
var NetSimTabsComponent = module.exports = function (rootDiv, runLoop, callbacks) {
  /**
   * Component root, which we fill whenever we call render()
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = rootDiv;

  /**
   * @type {RunLoop}
   * @private
   */
  this.runLoop_ = runLoop;

  /**
   * @type {function}
   * @private
   */
  this.chunkSizeSliderChangeCallback_ = callbacks.chunkSizeSliderChangeCallback;

  /**
   * @type {function}
   * @private
   */
  this.myDeviceBitRateChangeCallback_ = callbacks.myDeviceBitRateChangeCallback;

  /**
   * @type {function}
   * @private
   */
  this.encodingChangeCallback_ = callbacks.encodingChangeCallback;

  /**
   * @type {function}
   * @private
   */
  this.routerBandwidthSliderChangeCallback_ = callbacks.routerBandwidthSliderChangeCallback;

  /**
   * @type {function}
   * @private
   */
  this.routerBandwidthSliderStopCallback_ = callbacks.routerBandwidthSliderStopCallback;

  /**
   * @type {function}
   * @private
   */
  this.routerMemorySliderChangeCallback_ = callbacks.routerMemorySliderChangeCallback;

  /**
   * @type {function}
   * @private
   */
  this.routerMemorySliderStopCallback_ = callbacks.routerMemorySliderStopCallback;

  /**
   * @type {function}
   * @private
   */
  this.dnsModeChangeCallback_ = callbacks.dnsModeChangeCallback;

  /**
   * @type {function}
   * @private
   */
  this.becomeDnsCallback_ = callbacks.becomeDnsCallback;

  /**
   * @type {NetSimRouterTab}
   * @private
   */
  this.routerTab_ = null;

  /**
   * @type {NetSimMyDeviceTab}
   * @private
   */
  this.myDeviceTab_ = null;

  /**
   * @type {NetSimDnsTab}
   * @private
   */
  this.dnsTab_ = null;

  // Initial render
  this.render();
};

/**
 * @param {RunLoop} runLoop
 */
NetSimTabsComponent.prototype.attachToRunLoop = function (runLoop) {
  if (this.routerTab_) {
    this.routerTab_.attachToRunLoop(runLoop);
  }
};

/**
 * Fill the root div with new elements reflecting the current state
 */
NetSimTabsComponent.prototype.render = function () {
  var levelConfig = NetSimGlobals.getLevelConfig();
  // Clone the reference area (with handlers) before we re-render
  var referenceArea = $('#reference_area').first().clone(true);

  // Remove the instructions area, to reattach in a minute.
  var instructionsArea = $('#bubble').first().detach();

  var rawMarkup = buildMarkup({
    level: levelConfig
  });
  var jQueryWrap = $(rawMarkup);
  this.rootDiv_.html(jQueryWrap);

  this.rootDiv_.find('.netsim-tabs').tabs({
    active: levelConfig.defaultTabIndex
  });

  if (shouldShowTab(levelConfig, NetSimTabType.INSTRUCTIONS) && referenceArea) {
    var instructionsTab = this.rootDiv_.find('#tab_instructions').first();
    instructionsArea.appendTo(instructionsTab);
    referenceArea.appendTo(instructionsTab);
  }

  if (shouldShowTab(levelConfig, NetSimTabType.MY_DEVICE)) {
    this.myDeviceTab_ = new NetSimMyDeviceTab(this.rootDiv_.find('#tab_my_device'), this.runLoop_, {
      chunkSizeChangeCallback: this.chunkSizeSliderChangeCallback_,
      bitRateChangeCallback: this.myDeviceBitRateChangeCallback_,
      encodingChangeCallback: this.encodingChangeCallback_
    });
  }

  if (shouldShowTab(levelConfig, NetSimTabType.ROUTER)) {
    this.routerTab_ = new NetSimRouterTab(this.rootDiv_.find('#tab_router'), {
      bandwidthSliderChangeCallback: this.routerBandwidthSliderChangeCallback_,
      bandwidthSliderStopCallback: this.routerBandwidthSliderStopCallback_,
      memorySliderChangeCallback: this.routerMemorySliderChangeCallback_,
      memorySliderStopCallback: this.routerMemorySliderStopCallback_
    });
  }

  if (shouldShowTab(levelConfig, NetSimTabType.DNS)) {
    this.dnsTab_ = new NetSimDnsTab(this.rootDiv_.find('#tab_dns'), this.dnsModeChangeCallback_, this.becomeDnsCallback_);
  }
};

/** @param {number} newChunkSize */
NetSimTabsComponent.prototype.setChunkSize = function (newChunkSize) {
  if (this.myDeviceTab_) {
    this.myDeviceTab_.setChunkSize(newChunkSize);
  }
};

/** @param {number} newBitRate in bits per second */
NetSimTabsComponent.prototype.setMyDeviceBitRate = function (newBitRate) {
  if (this.myDeviceTab_) {
    this.myDeviceTab_.setBitRate(newBitRate);
  }
};

/** @param {EncodingType[]} newEncodings */
NetSimTabsComponent.prototype.setEncodings = function (newEncodings) {
  if (this.myDeviceTab_) {
    this.myDeviceTab_.setEncodings(newEncodings);
  }
};

/** @param {number} creationTimestampMs */
NetSimTabsComponent.prototype.setRouterCreationTime = function (creationTimestampMs) {
  if (this.routerTab_) {
    this.routerTab_.setRouterCreationTime(creationTimestampMs);
  }
};

/** @param {number} newBandwidth in bits/second */
NetSimTabsComponent.prototype.setRouterBandwidth = function (newBandwidth) {
  if (this.routerTab_) {
    this.routerTab_.setBandwidth(newBandwidth);
  }
};

/** @param {number} newMemory in bits */
NetSimTabsComponent.prototype.setRouterMemory = function (newMemory) {
  if (this.routerTab_) {
    this.routerTab_.setMemory(newMemory);
  }
};

/**
 * @param {number} queuedPacketCount
 */
NetSimTabsComponent.prototype.setRouterQueuedPacketCount = function (queuedPacketCount) {
  if (this.routerTab_) {
    this.routerTab_.setRouterQueuedPacketCount(queuedPacketCount);
  }
};

/** @param {number} usedMemoryInBits */
NetSimTabsComponent.prototype.setRouterMemoryInUse = function (usedMemoryInBits) {
  if (this.routerTab_) {
    this.routerTab_.setMemoryInUse(usedMemoryInBits);
  }
};

NetSimTabsComponent.prototype.setRouterDataRate = function (dataRateBitsPerSecond) {
  if (this.routerTab_) {
    this.routerTab_.setDataRate(dataRateBitsPerSecond);
  }
};

/** @param {string} newDnsMode */
NetSimTabsComponent.prototype.setDnsMode = function (newDnsMode) {
  if (this.dnsTab_) {
    this.dnsTab_.setDnsMode(newDnsMode);
  }
};

/** @param {boolean} isDnsNode */
NetSimTabsComponent.prototype.setIsDnsNode = function (isDnsNode) {
  if (this.dnsTab_) {
    this.dnsTab_.setIsDnsNode(isDnsNode);
  }
};

/** @param {Array} tableContents */
NetSimTabsComponent.prototype.setDnsTableContents = function (tableContents) {
  if (this.dnsTab_) {
    this.dnsTab_.setDnsTableContents(tableContents);
  }
};

/** @param {Array} logData */
NetSimTabsComponent.prototype.setRouterLogData = function (logData) {
  if (this.routerTab_) {
    this.routerTab_.setRouterLogData(logData);
  }
};

},{"./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimDnsTab":"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsTab.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimMyDeviceTab":"/home/ubuntu/staging/apps/build/js/netsim/NetSimMyDeviceTab.js","./NetSimRouterTab":"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterTab.js","./NetSimTabsComponent.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimTabsComponent.html.ejs","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimTabsComponent.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
  var i18n = require('./locale');

  var shouldShowTab = require('./NetSimUtils').shouldShowTab;
  var NetSimTabType = require('./NetSimConstants').NetSimTabType;

  var showInstructions = shouldShowTab(level, NetSimTabType.INSTRUCTIONS);
  var showMyDevice = shouldShowTab(level, NetSimTabType.MY_DEVICE);
  var showRouter = shouldShowTab(level, NetSimTabType.ROUTER);
  var showDns = shouldShowTab(level, NetSimTabType.DNS);
; buf.push('\n<div class="netsim-tabs">\n  <ul>\n    ');14; if (showInstructions) { ; buf.push('\n    <li><a href="#tab_instructions">', escape((15,  i18n.instructions() )), '</a></li>\n    ');16; } ; buf.push('\n    ');17; if (showMyDevice) { ; buf.push('\n      <li><a href="#tab_my_device">', escape((18,  i18n.myDevice() )), '</a></li>\n    ');19; } ; buf.push('\n    ');20; if (showRouter) { ; buf.push('\n      <li><a href="#tab_router">', escape((21,  i18n.router() )), '</a></li>\n    ');22; } ; buf.push('\n    ');23; if (showDns) { ; buf.push('\n      <li><a href="#tab_dns">', escape((24,  i18n.dns() )), '</a></li>\n    ');25; } ; buf.push('\n  </ul>\n  ');27; if (showInstructions) { ; buf.push('\n    <div id="tab_instructions"></div>\n  ');29; } ; buf.push('\n  ');30; if (showMyDevice) { ; buf.push('\n    <div id="tab_my_device"></div>\n  ');32; } ; buf.push('\n  ');33; if (showRouter) { ; buf.push('\n    <div id="tab_router"></div>\n  ');35; } ; buf.push('\n  ');36; if (showDns) { ; buf.push('\n    <div id="tab_dns"></div>\n  ');38; } ; buf.push('\n</div>'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimStatusPanel.js":[function(require,module,exports){
/**
 * @overview UI component: The small expandable box above the visualization,
 *           used to show debug and diagnostic information.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

require('../utils'); // For Function.prototype.inherits()
var i18n = require('./locale');
var markup = require('./NetSimStatusPanel.html.ejs');
var NetSimPanel = require('./NetSimPanel.js');
var NetSimUtils = require('./NetSimUtils');

/**
 * Generator and controller for connection status panel
 * in left column, displayed while connected.
 * @param {jQuery} rootDiv
 * @param {Object} callbacks
 * @param {function} callbacks.disconnectCallback - method to call when disconnect button
 *        is clicked.
 * @constructor
 * @augments NetSimPanel
 */
var NetSimStatusPanel = module.exports = function (rootDiv, callbacks) {
  /**
   * @type {function}
   * @private
   */
  this.disconnectCallback_ = callbacks.disconnectCallback;

  // Superclass constructor
  NetSimPanel.call(this, rootDiv, {
    className: 'netsim_status_panel',
    panelTitle: 'Status',
    userToggleable: false,
    beginMinimized: true
  });
};
NetSimStatusPanel.inherits(NetSimPanel);

/**
 * @param {Object} [data]
 * @param {string} [data.remoteNodeName] - Display name of remote node.
 * @param {string} [data.myHostname] - Hostname of local node
 * @param {number} [data.myAddress] - Local node address assigned by router
 * @param {string} [data.shareLink] - URL for sharing private shard
 */
NetSimStatusPanel.prototype.render = function (data) {
  data = data || {};

  // Capture title before we render the wrapper panel.
  this.setPanelTitle(data.remoteNodeName);

  // Render boilerplate panel stuff
  NetSimStatusPanel.superPrototype.render.call(this);

  // Put our own content into the panel body
  var newMarkup = $(markup({
    myHostname: data.myHostname,
    myAddress: data.myAddress,
    shareLink: data.shareLink
  }));
  this.getBody().html(newMarkup);

  // Add a button to the panel header
  this.addButton(i18n.disconnectButton({ caret: '<i class="fa fa-caret-left"></i>' }), this.disconnectCallback_);

  // Button that takes you to the next level.
  NetSimUtils.makeContinueButton(this);
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimPanel.js":"/home/ubuntu/staging/apps/build/js/netsim/NetSimPanel.js","./NetSimStatusPanel.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimStatusPanel.html.ejs","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimStatusPanel.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
var i18n = require('./locale');
; buf.push('\n<div class="content-wrap">\n  ');5; if (myHostname) { ; buf.push('\n  <p>My hostname: ', escape((6,  myHostname )), '</p>\n  ');7; } ; buf.push('\n\n  ');9; if (myAddress) { ; buf.push('\n  <p>My address: ', escape((10,  myAddress )), '</p>\n  ');11; } ; buf.push('\n\n  ');13; if (shareLink) { ; buf.push('\n  <p><a href="', escape((14,  shareLink )), '">', escape((14,  i18n.shareThisNetwork() )), '</a></p>\n  ');15; } ; buf.push('\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimShard.js":[function(require,module,exports){
/**
 * @overview Represents a collection of tables that map to a particular
 *           class section's simulation, isolated from other class sections.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var NetSimTable = require('./NetSimTable');
var PubSubService = require('./PubSubService');

/**
 * PubSub event key for events invalidating all tables.
 * @const {string}
 */
var WHOLE_SHARD_EVENT = 'all_tables';

/**
 * A shard is an isolated, complete simulation state shared by a subset of
 * users.  It's made of a set of storage tables set apart by a particular
 * shard ID in their names.  We use shards to allow students to interact only
 * with their particular class while still storing all NetSim tables under
 * the same App ID.
 *
 * @param {!string} shardID
 * @param {!PubSubConfig} pubSubConfig
 * @constructor
 */
var NetSimShard = module.exports = function (shardID, pubSubConfig) {
  /** @type {string} */
  this.id = shardID;

  /** @type {PubSubService} */
  this.pubSub = PubSubService.create(pubSubConfig);

  /** @type {PubSubChannel} */
  this.pubSubChannel = this.pubSub.subscribe(this.id);
  this.pubSubChannel.subscribe(WHOLE_SHARD_EVENT, NetSimShard.prototype.onPubSubEvent_.bind(this));

  /**
   * Collection of client (user) nodes and router nodes on the shard.
   * Each client node corresponds to a user (or browser tab, to be specific).
   * Router nodes are not associated with a particular user.
   *
   * All entities in this table descend from NetSimNode, and can be deserialized
   * via utilities in NetSimNodeFactory
   *
   * Rows in this table are
   * - inserted when a node is created (such as when a user connects)
   * - updated for certain changes to node status or router configuration
   * - deleted when a node is destroyed (such as when a user disconnects)
   *
   * @type {NetSimTable}
   * @see {NetSimNode}
   * @see {NetSimClientNode}
   * @see {NetSimRouterNode}
   * @see {NetSimLocalClientNode}
   * @see {NetSimNodeFactory}
   */
  this.nodeTable = new NetSimTable(this.pubSubChannel, shardID, 'n');

  /**
   * Collection of wires on the shard.  Wires document the connections between
   * nodes and certain node metadata, like hostnames and addresses.  Wires
   * reference node IDs, and are therefore referentially dependent on the node
   * table.
   *
   * All entities in this table deserialize into NetSimWire.
   *
   * Rows in this table are
   * - inserted when two nodes are connected
   * - updated when assigning an address
   * - deleted when two nodes are disconnected
   *
   * @type {NetSimTable}
   * @see {NetSimWire}
   */
  this.wireTable = new NetSimTable(this.pubSubChannel, shardID, 'w');

  /**
   * Collection of messages (enqueued or in-flight) on the shard.  Messages
   * reference node IDs, and are therefore referentially dependent on the node
   * table.
   *
   * All entities in this table deserialize into NetSimMessage.
   *
   * Rows in this table are
   * - inserted when a message is sent
   * - never updated
   * - deleted when a message is received
   *
   * @type {NetSimTable}
   * @see {NetSimMessage}
   */
  this.messageTable = new NetSimTable(this.pubSubChannel, shardID, 'm');

  /**
   * Collection of log entries for nodes on the shard.  Logs reference node IDs,
   * and are therefore referentially dependent on the node table (but we should
   * change this).channel
   *
   * All entities in this table deserialize into NetSimLogEntry.
   *
   * Rows in this table are
   * - inserted when a router routes or drops a message
   * - never updated
   * - never deleted
   *
   * @type {NetSimTable}
   * @see {NetSimLogEntry}
   */
  this.logTable = new NetSimTable(this.pubSubChannel, shardID, 'l', {
    // This is only safe to do because we never update or delete rows in this table.
    useIncrementalRefresh: true
  });
  this.logTable.unsubscribe();
};

/**
 * Necessary tear-down for shard.  In particular, disconnecting
 * from pubsub service.
 */
NetSimShard.prototype.disconnect = function () {
  this.nodeTable.unsubscribe();
  this.wireTable.unsubscribe();
  this.messageTable.unsubscribe();
  this.logTable.unsubscribe();
  this.pubSubChannel.unsubscribe(WHOLE_SHARD_EVENT);
  this.pubSubChannel = null;
  this.pubSub.unsubscribe(this.id);
};

/**
 * This tick allows our tables to poll the server for changes.
 * @param {!RunLoop.Clock} clock
 */
NetSimShard.prototype.tick = function (clock) {
  this.nodeTable.tick(clock);
  this.wireTable.tick(clock);
  this.messageTable.tick(clock);
  this.logTable.tick(clock);
};

/**
 * The "panic button" option - clears all data on the shard, kicking all
 * users out and starting over.
 * @param {NodeStyleCallback} onComplete
 */
NetSimShard.prototype.resetEverything = function (onComplete) {
  $.ajax({
    url: '/v3/netsim/' + this.id,
    type: 'delete',
    contentType: 'application/json; charset=utf-8',
    dataType: "json"
  }).done(function () {
    onComplete(null, true);
  }).fail(function (request, status, error) {
    var err = new Error('status: ' + status + '; error: ' + error);
    onComplete(err, false);
  });
};

/**
 * Called when the PubSub service fires an event that applies to all tables
 * @private
 */
NetSimShard.prototype.onPubSubEvent_ = function () {
  // Right now, the only all_tables event is the shard reset.
  // Refreshing the node table informs our node that a reset has occurred.
  // TODO: Use a "disconnect from shard" callback instead here.
  this.nodeTable.refresh();
};

},{"./NetSimTable":"/home/ubuntu/staging/apps/build/js/netsim/NetSimTable.js","./PubSubService":"/home/ubuntu/staging/apps/build/js/netsim/PubSubService.js"}],"/home/ubuntu/staging/apps/build/js/netsim/PubSubService.js":[function(require,module,exports){
/**
 * @overview Wrapped pub/sub service client APIs (like Pusher)
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,

 maxlen: 120
 */
/* global Pusher */
'use strict';

var PubSubChannel = require('./PubSubChannel');

/**
 * JavaScript interface for a publish/subscribe service provider.
 * @param {string} applicationKey
 * @interface
 */
var PubSubService = exports;

/**
 * @typedef {Object} PubSubConfig
 * @property {boolean} usePusher - Whether to use Pusher's API, or a null
 *           implementation.
 * @property {string} pusherApplicationKey - If using Pusher, the public key
 *           required to initialize the Pusher API.
 */

/**
 * Create an API instance appropriate to the current configuration.
 * @param {!PubSubConfig} pubSubConfig
 * @returns {PubSubService}
 */
PubSubService.create = function (pubSubConfig) {
  if (pubSubConfig.usePusher) {
    return new PubSubService.PusherService(pubSubConfig.pusherApplicationKey);
  }

  return new PubSubService.NullService();
};

/**
 * @function
 * @name PubSubService#subscribe
 * @param {string} channelID - Channel to which we subscribe.
 * @returns {PubSubChannel}
 */

/**
 * @function
 * @name PubSubService#unsubscribe
 * @param {string} channelID - Channel from which we unsubscribe.
 */

/**
 * Stub implementation of PubSub API.
 * @constructor
 * @implements PubSubService
 */
// Disable "unused variable" errors for null implementation declarations
/* jshint unused:false */
PubSubService.NullService = function () {};

/**
 * Subscribe to events on a particular channel.
 * @param {string} channelID
 * @returns {PubSubChannel}
 */
PubSubService.NullService.prototype.subscribe = function (channelID) {
  return new PubSubChannel.NullChannel();
};

/**
 * Unsubscribe from events on a particular channel.
 * @param {string} channelID
 */
PubSubService.NullService.prototype.unsubscribe = function (channelID) {};

// Re-enable "unused variable" error
/* jshint unused:true */

/**
 * Wrapped Pusher.com API.
 * @param {string} applicationKey
 * @constructor
 * @implements PubSubService
 */
PubSubService.PusherService = function (applicationKey) {
  /**
   * Instance of actual Pusher JavaScript API.
   * @type {Pusher}
   * @private
   */
  this.api_ = new Pusher(applicationKey, { encrypted: true });
};

/**
 * Subscribe to events on a particular channel.
 * @param {string} channelID
 * @returns {PubSubChannel}
 */
PubSubService.PusherService.prototype.subscribe = function (channelID) {
  return new PubSubChannel.PusherChannel(this.api_.subscribe(channelID));
};

/**
 * Unsubscribe from events on a particular channel.
 * @param {string} channelID
 */
PubSubService.PusherService.prototype.unsubscribe = function (channelID) {
  this.api_.unsubscribe(channelID);
};

},{"./PubSubChannel":"/home/ubuntu/staging/apps/build/js/netsim/PubSubChannel.js"}],"/home/ubuntu/staging/apps/build/js/netsim/PubSubChannel.js":[function(require,module,exports){
/**
 * @overview Wrapped pub/sub service channel APIs (like Pusher's Channel)
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

/**
 * Javascript interface for a publish/subscribe channel.
 * @interface
 */
var PubSubChannel = exports;

/**
 * Subscribe to an event, so that the given callback is called when the
 * event occurs.
 * @function
 * @name PubSubChannel#subscribe
 * @param {string} eventName - The name of the event to bind to.
 * @param {function} callback - A function to be called whenever the event is
 *        triggered.
 */

// Disable "unused variable" errors for null implementation declarations
/* jshint unused:false */

/**
 * @constructor
 * @implements PubSubChannel
 */
PubSubChannel.NullChannel = function () {};

/**
 * Subscribe to an event so the given callback is called when the event occurs.
 * @param {string} eventName - The name of the event to bind to.
 * @param {function} callback - A function to be called whenever the event is
 *        triggered.
 */
PubSubChannel.NullChannel.prototype.subscribe = function (eventName, callback) {};

/**
 * Unsubscribe a given callback from a given event
 * @param {string} eventName
 */
PubSubChannel.NullChannel.prototype.unsubscribe = function (eventName) {};

// Re-enable "unused variable" error
/* jshint unused:true */

/**
 * @constructor
 * @implements PubSubChannel
 */
PubSubChannel.PusherChannel = function (pusherApiChannel) {
  /**
   * The actual Pusher API's channel.
   * @private {Channel}
   */
  this.pusherChannel_ = pusherApiChannel;

  /**
   * Cache provided callbacks for easy unsubscribe.
   * Maps event name to callback.
   * @type {Object}
   * @private
   */
  this.callbacks_ = {};
};

/**
 * Subscribe to an event so the given callback is called when the event occurs.
 * @param {string} eventName
 * @param {function()} callback
 * @throws {Error} on double-subscribe.
 */
PubSubChannel.PusherChannel.prototype.subscribe = function (eventName, callback) {
  this.pusherChannel_.bind(eventName, callback);
  if (this.callbacks_[eventName] !== undefined) {
    throw new Error("Already subscribed to event " + eventName);
  }
  this.callbacks_[eventName] = callback;
};

/**
 * Unsubscribe a given callback from a given event
 * @param {string} eventName
 */
PubSubChannel.PusherChannel.prototype.unsubscribe = function (eventName) {
  this.pusherChannel_.unbind(eventName, this.callbacks_[eventName]);
  delete this.callbacks_[eventName];
};

},{}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimTable.js":[function(require,module,exports){
/**
 * @overview Wraps remote storage interface and polling behavior.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var _ = require('../utils').getLodash();
var ObservableEvent = require('../ObservableEvent');
var NetSimApi = require('./NetSimApi');
var NetSimGlobals = require('./NetSimGlobals');
var ArgumentUtils = require('./ArgumentUtils');

/**
 * Maximum time (in milliseconds) that tables should wait between full cache
 * updates from the server.
 * @type {number}
 */
var DEFAULT_POLLING_DELAY_MS = 10000;

/**
 * Minimum time (in ms) to wait after an invalidation event before attempting
 * to trigger a refresh request.  This produces a window in which clustered
 * invalidations can be captured and coalesced together.
 * @type {number}
 */
var DEFAULT_MINIMUM_DELAY_BEFORE_REFRESH_MS = 250;

/**
 * Maximum additional random delay (in ms) to add before the refresh request.
 * Helps spread out requests from different clients responding to the same
 * invalidation events.
 * @type {number}
 */
var DEFAULT_MAXIMUM_DELAY_JITTER_MS = 200;

/**
 * Minimum time (in ms) to wait between refresh requests, regardless of how
 * many invalidation events occur.
 * @type {number}
 */
var DEFAULT_MINIMUM_DELAY_BETWEEN_REFRESHES_MS = 2500;

/**
 * Wraps the app storage table API in an object with local
 * caching and callbacks, which provides a notification API to the rest
 * of the NetSim code.
 * @param {!PubSubChannel} channel - The pubsub channel used to listen
 *        for changes to the table.cellPadding
 * @param {!string} shardID - The shard ID specific to this class' NetSim instance.
 * @param {!string} tableName - The name of the remote storage table to wrap.
 * @param {Object} [options] - Additional table configuration options
 * @param {boolean} [options.useIncrementalRefresh] - defaults to FALSE.  If
 *        TRUE, this table will only request content that is new since its
 *        last refresh, not the entire table contents.  Currently this option
 *        is not safe to use if you care about updates or deletes in the table.
 * @param {number} [options.minimumDelayBeforeRefresh] - Minimum time (in ms)
 *        to wait after an invalidation event before attempting to trigger a
 *        refresh request.  This produces a window in which clustered
 *        invalidations can be captured and coalesced together.
 * @param {number} [options.maximumJitterDelay] - Maximum additional random
 *        delay (in ms) to add before the refresh request.  Helps spread out
 *        requests from different clients responding to the same invalidation
 *        events.
 * @param {number} [options.minimumDelayBetweenRefreshes] - Minimum time (in ms)
 *        to wait between refresh requests, regardless of how many invalidation
 *        events occur.
 * @constructor
 * @throws {Error} if wrong number of arguments are provided.
 * @throws {TypeError} if invalid types are passed in the options object.
 */
var NetSimTable = module.exports = function (channel, shardID, tableName, options) {
  ArgumentUtils.validateRequired(channel, 'channel');
  ArgumentUtils.validateRequired(shardID, 'shardID', ArgumentUtils.isString);
  ArgumentUtils.validateRequired(tableName, 'tableName', ArgumentUtils.isString);
  options = ArgumentUtils.extendOptionsObject(options);

  /**
   * @private {string}
   */
  this.tableName_ = tableName;

  /**
   * @private {PubSubChannel}
   */
  this.channel_ = channel;
  this.subscribe();

  /**
   * API object for making remote calls
   * @type {NetSimApi}
   * @private
   */
  this.api_ = NetSimApi.makeTableApi(shardID, tableName);

  /**
   * Event that fires when full table updates indicate a change,
   * when rows are added, or when rows are removed, or when rows change.
   * @type {ObservableEvent}
   */
  this.tableChange = new ObservableEvent();

  /**
   * Store table contents locally, so we can detect when changes occur.
   * @private {Object}
   */
  this.cache_ = {};

  /**
   * The row ID of the most recently inserted row retrieved from remote storage.
   * @type {number}
   * @private
   */
  this.latestRowID_ = 0;

  /**
   * Unix timestamp for last time this table's cache contents were fully
   * updated.  Used to determine when to poll the server for changes.
   * @private {number}
   */
  this.lastRefreshTime_ = 0;

  /**
   * If TRUE, will only request deltas from remote storage.  Currently
   * unsafe if we care about more than inserts to the table.
   * @type {boolean}
   * @private
   */
  this.useIncrementalRefresh_ = options.get('useIncrementalRefresh', ArgumentUtils.isBoolean, false);

  /**
   * Minimum time (in ms) to wait after an invalidation event before attempting
   * to trigger a refresh request.  This produces a window in which clustered
   * invalidations can be captured and coalesced together.
   * @private {number}
   */
  this.minimumDelayBeforeRefresh_ = options.get('minimumDelayBeforeRefresh', ArgumentUtils.isPositiveNoninfiniteNumber, DEFAULT_MINIMUM_DELAY_BEFORE_REFRESH_MS);

  /**
   * Maximum additional random delay (in ms) to add before the refresh request.
   * Helps spread out requests from different clients responding to the same
   * invalidation events.
   * @private {number}
   */
  this.maximumJitterDelay_ = options.get('maximumJitterDelay', ArgumentUtils.isPositiveNoninfiniteNumber, DEFAULT_MAXIMUM_DELAY_JITTER_MS);

  /**
   * Minimum time (in ms) to wait between refresh requests, regardless of how
   * many invalidation events occur.
   * @private {number}
   */
  this.minimumDelayBetweenRefreshes_ = options.get('minimumDelayBetweenRefreshes', ArgumentUtils.isPositiveNoninfiniteNumber, DEFAULT_MINIMUM_DELAY_BETWEEN_REFRESHES_MS);

  /**
   * Minimum time (in milliseconds) to wait between pulling full table contents
   * from remote storage.
   * @private {number}
   */
  this.pollingInterval_ = DEFAULT_POLLING_DELAY_MS;

  /**
   * Throttled version (specific to this instance) of the refresh operation,
   * used to coalesce refresh requests.
   * @private {function}
   */
  this.refreshTable_ = this.makeThrottledRefresh_();
};

/**
 * @returns {string} the configured table name.
 */
NetSimTable.prototype.getTableName = function () {
  return this.tableName_;
};

/**
 * Subscribes this table's onPubSubEvent method to events for this table
 * on our local channel.
 */
NetSimTable.prototype.subscribe = function () {
  this.channel_.subscribe(this.tableName_, NetSimTable.prototype.onPubSubEvent_.bind(this));
};

/**
 * Unubscribes the saved callback from events for this table on our
 * local channel.
 */
NetSimTable.prototype.unsubscribe = function () {
  this.channel_.unsubscribe(this.tableName_);
};

/**
 * Asynchronously retrieve new/updated table content from the server, using
 * whatever method is most appropriate to this table's configuration.
 * When done, updates the local cache and hits the provided callback to
 * indicate completion.
 * @param {NodeStyleCallback} [callback] - indicates completion of the operation.
 * @returns {jQuery.Promise} Guaranteed to resolve after the cache update,
 *          so .done() operations can interact with the cache.
 */
NetSimTable.prototype.refresh = function (callback) {
  callback = callback || function () {};
  var deferred = $.Deferred();

  // Which API call to make
  var apiCall = this.useIncrementalRefresh_ ? this.api_.allRowsFromID.bind(this.api_, this.latestRowID_ + 1) : this.api_.allRows.bind(this.api_);

  // How to update the cache (depends on what we expect to get back)
  var cacheUpdate = this.useIncrementalRefresh_ ? this.incrementalCacheUpdate_.bind(this) : this.fullCacheUpdate_.bind(this);

  // What should happen when the API call completes.
  var apiCallCallback = function apiCallCallback(err, data) {
    if (err) {
      callback(err, data);
      deferred.reject(err);
    } else {
      cacheUpdate(data);
      callback(err, data);
      deferred.resolve();
    }
  };

  // Do we fire the API call now, or after a random delay?
  if (this.maximumJitterDelay_ === 0) {
    apiCall(apiCallCallback);
  } else {
    var jitterTime = NetSimGlobals.randomIntInRange(0, this.maximumJitterDelay_);
    setTimeout(apiCall.bind(this, apiCallCallback), jitterTime);
  }

  return deferred.promise();
};

/**
 * Generate throttled refresh function which will generate actual server
 * requests at the maximum given rate no matter how fast it is called. This
 * allows us to coalesce refreshAll events and reduce server load.
 *
 * How this works:
 * Wraps a longer throttle with leading and trailing events in a shorter debounce
 * with a maximum wait time.  This gives grouped events a chance to coalesce
 * without triggering an unneeded trailing event on the longer throttle.
 *
 * Here are some examples of what's going on, if using a 1000ms throttle
 * wrapped in a 250ms debounce.
 *
 * In low traffic we collapse two groups of events to just two events.
 *
 * original events   :   || |                     | |
 * debounced         :   -250>|                   -250>|
 * then throttled    :        |--------------1000->    |--------------1000->
 *
 * In higher traffic we collapse the groups but still keep events at least
 * one second apart.
 *
 * original events   :   || |        |     |      | |
 * debounced         :   -250>|      -250>|-250>| -250>|
 * then throttled    :        |--------------1000->|--------------1000->|
 *
 * @returns {function()}
 * @private
 */
NetSimTable.prototype.makeThrottledRefresh_ = function () {
  var throttledRefresh = _.throttle(this.refresh.bind(this), this.minimumDelayBetweenRefreshes_);
  return _.debounce(throttledRefresh, this.minimumDelayBeforeRefresh_, { maxWait: this.minimumDelayBeforeRefresh_ });
};

/**
 * @returns {Array} all locally cached table rows
 */
NetSimTable.prototype.readAll = function () {
  return this.arrayFromCache_();
};

/**
 * @param {!number} firstRowID
 * @returns {Array} all locally cached table rows having row ID >= firstRowID
 */
NetSimTable.prototype.readAllFromID = function (firstRowID) {
  return this.arrayFromCache_(function (key) {
    return key >= firstRowID;
  });
};

/**
 * @param {!number} id
 * @param {!NodeStyleCallback} callback
 */
NetSimTable.prototype.read = function (id, callback) {
  this.api_.fetchRow(id, (function (err, data) {
    if (err === null) {
      this.updateCacheRow_(id, data);
    }
    callback(err, data);
  }).bind(this));
};

/**
 * @param {Object} value
 * @param {!NodeStyleCallback} callback
 */
NetSimTable.prototype.create = function (value, callback) {
  this.api_.createRow(value, (function (err, data) {
    if (err === null) {
      this.addRowToCache_(data);
    }
    callback(err, data);
  }).bind(this));
};

/**
 * @param {Object[]} values
 * @param {!NodeStyleCallback} callback
 */
NetSimTable.prototype.multiCreate = function (values, callback) {
  this.api_.createRow(values, (function (err, datas) {
    if (err === null) {
      datas.forEach(function (data) {
        this.addRowToCache_(data);
      }, this);
    }
    callback(err, datas);
  }).bind(this));
};

/**
 * @param {!number} id
 * @param {Object} value
 * @param {!NodeStyleCallback} callback
 */
NetSimTable.prototype.update = function (id, value, callback) {
  this.api_.updateRow(id, value, (function (err, success) {
    if (err === null) {
      this.updateCacheRow_(id, value);
    }
    callback(err, success);
  }).bind(this));
};

/**
 * @param {!number} id
 * @param {!NodeStyleCallback} callback
 */
NetSimTable.prototype['delete'] = function (id, callback) {
  this.deleteMany([id], callback);
};

/**
 * Deletes multiple rows from the table.
 * @param {!number[]} ids
 * @param {!NodeStyleCallback} callback
 */
NetSimTable.prototype.deleteMany = function (ids, callback) {
  this.api_.deleteRows(ids, (function (err, success) {
    if (err === null) {
      this.removeRowsFromCache_(ids);
    }
    callback(err, success);
  }).bind(this));
};

/**
 * Delete a row using a synchronous call. For use when navigating away from
 * the page; most of the time an asynchronous call is preferred.
 * @param {!number} id
 */
NetSimTable.prototype.synchronousDelete = function (id) {
  var async = false; // Force synchronous request
  this.api_.deleteRows([id], (function (err) {
    if (err) {
      // Nothing we can really do with the error, as we're in the process of
      // navigating away. Throw so that high incidence rates will show up in
      // new relic.
      throw err;
    }
    this.removeRowsFromCache_([id]);
  }).bind(this), async);
};

/**
 * @param {Array} allRows
 * @private
 */
NetSimTable.prototype.fullCacheUpdate_ = function (allRows) {
  // Rebuild entire cache
  var maxRowID = 0;
  var newCache = allRows.reduce(function (prev, currentRow) {
    prev[currentRow.id] = currentRow;
    if (currentRow.id > maxRowID) {
      maxRowID = currentRow.id;
    }
    return prev;
  }, {});

  // Check for changes, if anything changed notify all observers on table.
  if (!_.isEqual(this.cache_, newCache)) {
    this.cache_ = newCache;
    this.latestRowID_ = maxRowID;
    this.tableChange.notifyObservers();
  }

  this.lastRefreshTime_ = Date.now();
};

/**
 * Add and update rows in the local cache from the given set of new rows
 * (probably retrieved from the server).
 * @param {Array} newRows
 * @private
 */
NetSimTable.prototype.incrementalCacheUpdate_ = function (newRows) {
  if (newRows.length > 0) {
    var maxRowID = 0;
    newRows.forEach(function (row) {
      this.cache_[row.id] = row;
      maxRowID = Math.max(maxRowID, row.id);
    }, this);
    this.latestRowID_ = maxRowID;
    this.tableChange.notifyObservers();
  }

  this.lastRefreshTime_ = Date.now();
};

/**
 * @param {!Object} row
 * @param {!number} row.id
 * @private
 */
NetSimTable.prototype.addRowToCache_ = function (row) {
  this.cache_[row.id] = row;
  this.tableChange.notifyObservers();
};

/**
 * @param {!number[]} ids
 * @private
 */
NetSimTable.prototype.removeRowsFromCache_ = function (ids) {
  var cacheChanged = false;
  ids.forEach(function (id) {
    if (this.cache_[id] !== undefined) {
      delete this.cache_[id];
      cacheChanged = true;
    }
  }, this);

  if (cacheChanged) {
    this.tableChange.notifyObservers();
  }
};

/**
 * @param {!number} id
 * @param {!Object} row
 * @private
 */
NetSimTable.prototype.updateCacheRow_ = function (id, row) {
  var oldRow = this.cache_[id];
  var newRow = row;

  // Manually apply IDs which should be present in row.
  newRow.id = id;
  newRow.uuid = oldRow.uuid;

  if (!_.isEqual(oldRow, newRow)) {
    this.cache_[id] = newRow;
    this.tableChange.notifyObservers();
  }
};

/**
 * @param {function(key, value)} [predicate] - A condition on returning the row.
 * @returns {Array}
 * @private
 */
NetSimTable.prototype.arrayFromCache_ = function (predicate) {
  predicate = predicate || function () {
    return true;
  };
  var result = [];
  for (var k in this.cache_) {
    if (this.cache_.hasOwnProperty(k) && predicate(k, this.cache_[k])) {
      result.push(this.cache_[k]);
    }
  }
  return result;
};

/**
 * Changes how often this table fetches a full table update from the
 * server.
 * @param {number} intervalMs - milliseconds of delay between updates.
 */
NetSimTable.prototype.setPollingInterval = function (intervalMs) {
  this.pollingInterval_ = intervalMs;
};

/**
 * Change the maximum rate at which the refresh operation for this table
 * will _actually_ be executed, no matter how fast we receive invalidations.
 * @param {number} delayMs - Minimum number of milliseconds
 *        between invalidation-triggered requests to the server.
 */
NetSimTable.prototype.setMinimumDelayBetweenRefreshes = function (delayMs) {
  // To do this, we just replace the throttled refresh function with a new one.
  this.minimumDelayBetweenRefreshes_ = delayMs;
  this.refreshTable_ = this.makeThrottledRefresh_();
};

/**
 * Change the minimum time (in ms) to wait after an invalidation event before
 * attempting to trigger a refresh request.  This produces a window in which
 * clustered invalidations can be captured and coalesced together.
 * @param {number} delayMs - Minimum number of milliseconds between first
 *        invalidation and request to server.
 */
NetSimTable.prototype.setMinimumDelayBeforeRefresh = function (delayMs) {
  // To do this, we just replace the throttled refresh function with a new one.
  this.minimumDelayBeforeRefresh_ = delayMs;
  this.refreshTable_ = this.makeThrottledRefresh_();
};

/**
 * Change the Maximum additional random delay (in ms) to add before the refresh
 * request.  Helps spread out requests from different clients responding to the
 * same events.
 * @param {number} delayMs - Maximum number of milliseconds to add before
 *        refresh request fires.
 */
NetSimTable.prototype.setMaximumJitterDelay = function (delayMs) {
  // To do this, we just replace the throttled refresh function with a new one.
  this.maximumJitterDelay_ = delayMs;
};

/** Polls server for updates, if it's been long enough. */
NetSimTable.prototype.tick = function () {
  var now = Date.now();
  if (now - this.lastRefreshTime_ >= this.pollingInterval_) {
    this.lastRefreshTime_ = now;
    this.refreshTable_();
  }
};

/**
 * Called when the PubSub service fires an event that this table is subscribed to.
 * @private
 */
NetSimTable.prototype.onPubSubEvent_ = function () {
  this.refreshTable_();
};

},{"../ObservableEvent":"/home/ubuntu/staging/apps/build/js/ObservableEvent.js","../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./ArgumentUtils":"/home/ubuntu/staging/apps/build/js/netsim/ArgumentUtils.js","./NetSimApi":"/home/ubuntu/staging/apps/build/js/netsim/NetSimApi.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimSendPanel.js":[function(require,module,exports){
/**
 * @overview UI controller for the send panel (the bottom panel on the right)
 *           which is used to transmit packets.
 * @see NetSimPacketEditor which is used extensively here.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var utils = require('../utils');
var i18n = require('./locale');
var markup = require('./NetSimSendPanel.html.ejs');
var NetSimPanel = require('./NetSimPanel');
var NetSimPacketEditor = require('./NetSimPacketEditor');
var NetSimPacketSizeControl = require('./NetSimPacketSizeControl');
var Packet = require('./Packet');
var DataConverters = require('./DataConverters');
var NetSimConstants = require('./NetSimConstants');
var NetSimGlobals = require('./NetSimGlobals');

var EncodingType = NetSimConstants.EncodingType;
var MessageGranularity = NetSimConstants.MessageGranularity;
var BITS_PER_BYTE = NetSimConstants.BITS_PER_BYTE;

var binaryToAB = DataConverters.binaryToAB;

var logger = require('./NetSimLogger').getSingleton();

/**
 * Generator and controller for message sending view.
 * @param {jQuery} rootDiv
 * @param {NetSimLevelConfiguration} levelConfig
 * @param {NetSim} netsim
 * @constructor
 * @augments NetSimPanel
 */
var NetSimSendPanel = module.exports = function (rootDiv, levelConfig, netsim) {

  /**
   * @type {NetSimLevelConfiguration}
   * @private
   */
  this.levelConfig_ = levelConfig;

  /**
   * @type {Packet.HeaderType[]}
   * @private
   */
  this.packetSpec_ = levelConfig.clientInitialPacketHeader;

  /**
   * Connection that owns the router we will represent / manipulate
   * @type {NetSim}
   * @private
   */
  this.netsim_ = netsim;

  /**
   * List of controllers for packets currently being edited.
   * @type {NetSimPacketEditor[]}
   * @private
   */
  this.packets_ = [];

  /**
   * Our local node's address, zero until assigned by a router.
   * @type {number}
   * @private
   */
  this.fromAddress_ = 0;

  /**
   * Maximum packet length configurable by slider.
   * @type {number}
   * @private
   */
  this.maxPacketSize_ = levelConfig.defaultPacketSizeLimit;

  /**
   * Byte-size used for formatting binary and for interpreting it
   * to decimal or ASCII.
   * @type {number}
   * @private
   */
  this.chunkSize_ = BITS_PER_BYTE;

  /**
   * Local device bitrate in bits-per-second, which affects send animation
   * speed.
   * @type {number}
   * @private
   */
  this.bitRate_ = Infinity;

  /**
   * What encodings are currently selected and displayed in each
   * packet and packet editor.
   * @type {EncodingType[]}
   * @private
   */
  this.enabledEncodings_ = levelConfig.defaultEnabledEncodings;

  /**
   * Reference to parent div of packet editor list, for adding and
   * removing packet editors.
   * @type {jQuery}
   * @private
   */
  this.packetsDiv_ = null;

  /**
   * @type {NetSimPacketSizeControl}
   * @private
   */
  this.packetSizeControl_ = null;

  /**
   * Flag for whether this panel is in "sending" mode, non-interactive while
   * it animates the send process for the current message.
   * @type {boolean}
   * @private
   */
  this.isPlayingSendAnimation_ = false;

  var panelTitle = levelConfig.messageGranularity === MessageGranularity.PACKETS ? i18n.sendAMessage() : i18n.sendBits();

  // TODO: Bad private member access
  this.netsim_.runLoop_.tick.register(this.tick.bind(this));

  NetSimPanel.call(this, rootDiv, {
    className: 'netsim-send-panel',
    panelTitle: panelTitle
  });
};
NetSimSendPanel.inherits(NetSimPanel);

/**
 * Puts send panel in a "sending packets" noninteractive state and begins
 * sending packets to remote.
 * @private
 */
NetSimSendPanel.prototype.beginSendingPackets_ = function () {
  if (0 === this.packets_.length) {
    return;
  }

  this.isPlayingSendAnimation_ = true;
  this.disableEverything();
  this.packets_[0].beginSending(this.netsim_.myNode);
};

/**
 * Callback for when an individual packet finishes its send animation.
 * Most of the time the packet gets removed and the next packet begins its
 * animation.
 * If it's the last packet, we finish sending and perform a packet editor
 * reset instead.
 * @param {NetSimPacketEditor} packet
 * @private
 */
NetSimSendPanel.prototype.doneSendingPacket_ = function (packet) {
  // If it's the last packet, we're done sending altogether.
  if (1 === this.packets_.length) {
    this.resetPackets_();
    this.enableEverything();
    this.packets_[0].getFirstVisibleMessageBox().focus();
    this.isPlayingSendAnimation_ = false;
    return;
  }

  // Remove the completed packet and start sending the next one.
  this.removePacket_(packet);
  this.packets_[0].beginSending(this.netsim_.myNode);
};

/**
 * Send panel uses its tick to "send" packets at different bitrates, animating
 * the binary draining out of the widget and actually posting each packet
 * to storage as it completes.
 * @param {RunLoop.Clock} clock
 */
NetSimSendPanel.prototype.tick = function (clock) {
  if (this.isPlayingSendAnimation_ && this.packets_.length > 0) {
    this.packets_[0].tick(clock);
  }
};

/** Replace contents of our root element with our own markup. */
NetSimSendPanel.prototype.render = function () {
  // Render boilerplate panel stuff
  NetSimSendPanel.superPrototype.render.call(this);

  // Put our own content into the panel body
  var newMarkup = $(markup({
    level: this.levelConfig_
  }));
  this.getBody().html(newMarkup);

  // Add packet size slider control
  if (this.levelConfig_.showPacketSizeControl) {
    var level = NetSimGlobals.getLevelConfig();
    var encoder = new Packet.Encoder(level.addressFormat, level.packetCountBitWidth, this.packetSpec_);
    this.packetSizeControl_ = new NetSimPacketSizeControl(this.rootDiv_.find('.packet-size'), this.packetSizeChangeCallback_.bind(this), {
      minimumPacketSize: encoder.getHeaderLength(),
      sliderStepValue: 1
    });
    this.packetSizeControl_.setValue(this.maxPacketSize_);
  }

  // Bind useful elements and add handlers
  this.packetsDiv_ = this.getBody().find('.send-panel-packets');
  this.getBody().find('#add-packet-button').click(this.onAddPacketButtonPress_.bind(this));
  // TODO: NetSim buttons in this panel need to do nothing if disabled!
  this.getBody().find('#send-button').click(this.onSendEventTriggered_.bind(this));
  this.getBody().find('#set-wire-button').click(this.onSendEventTriggered_.bind(this));

  // Note: At some point, we might want to replace this with something
  // that nicely re-renders the contents of this.packets_... for now,
  // we only call render for set-up, so it's okay.
  this.resetPackets_();
};

/**
 * Add a new, blank packet to the set of packets being edited.
 * @private
 */
NetSimSendPanel.prototype.addPacket_ = function () {
  var newPacketCount = this.packets_.length + 1;

  // Update the total packet count on all existing packets
  this.packets_.forEach(function (packetEditor) {
    packetEditor.setPacketCount(newPacketCount);
  });

  // Copy the to address of the previous packet if it exists. Otherwise
  // use the last address sent.
  // TODO: Do we need to lock the toAddress for all of these packets together?
  var newPacketToAddress;
  if (this.packets_.length > 0) {
    newPacketToAddress = this.packets_[this.packets_.length - 1].toAddress;
  } else {
    newPacketToAddress = '0';
  }

  // Create a new packet
  var newPacket = new NetSimPacketEditor({
    messageGranularity: this.levelConfig_.messageGranularity,
    packetSpec: this.packetSpec_,
    toAddress: newPacketToAddress,
    fromAddress: this.fromAddress_,
    packetIndex: newPacketCount,
    packetCount: newPacketCount,
    maxPacketSize: this.maxPacketSize_,
    chunkSize: this.chunkSize_,
    bitRate: this.bitRate_,
    enabledEncodings: this.enabledEncodings_,
    removePacketCallback: this.removePacket_.bind(this),
    doneSendingCallback: this.doneSendingPacket_.bind(this),
    contentChangeCallback: this.onContentChange_.bind(this),
    enterKeyPressedCallback: this.onSendEventTriggered_.bind(this)
  });

  // Attach the new packet to this SendPanel
  var updateLayout = this.netsim_.updateLayout.bind(this.netsim_);
  newPacket.getRoot().appendTo(this.packetsDiv_);
  newPacket.getRoot().hide().slideDown('fast', function () {
    newPacket.getFirstVisibleMessageBox().focus();
    updateLayout();
  });
  this.packets_.push(newPacket);
};

/**
 * Remove a packet from the send panel, and adjust other packets for
 * consistency.
 * @param {NetSimPacketEditor} packet
 * @private
 */
NetSimSendPanel.prototype.removePacket_ = function (packet) {
  // Remove from DOM
  var updateLayout = this.netsim_.updateLayout.bind(this.netsim_);
  packet.getRoot().slideUp('fast', function () {
    $(this).remove();
    updateLayout();
  });

  // Remove from internal collection
  this.packets_ = this.packets_.filter(function (packetEditor) {
    return packetEditor !== packet;
  });

  // Adjust numbering of remaining packets if we're not mid-send
  if (!this.isPlayingSendAnimation_) {
    var packetCount = this.packets_.length;
    var packetIndex;
    for (var i = 0; i < packetCount; i++) {
      packetIndex = i + 1;
      this.packets_[i].setPacketIndex(packetIndex);
      this.packets_[i].setPacketCount(packetCount);
    }
  }
};

/**
 * Reset the editor to its 'empty' state: Remove all but the first packet,
 * and reset the first packet to empty.
 * @private
 */
NetSimSendPanel.prototype.resetPackets_ = function () {
  if (this.packets_.length > 0) {
    this.packetsDiv_.children().slice(1).remove();
    this.packets_.length = Math.min(1, this.packets_.length);
    this.packets_[0].resetPacket();
  } else {
    this.addPacket_();
  }
};

/**
 * When any packet editor's binary content changes, we may want
 * to update UI wrapper elements (like the "set next bit" button)
 * in response
 * @private
 */
NetSimSendPanel.prototype.onContentChange_ = function () {
  var nextBit = this.getNextBit_();

  if (nextBit === undefined) {
    // If there are no bits queued up, disable the button
    this.getSetWireButton().text(i18n.setWire());
    this.conditionallyToggleSetWireButton();
  } else {
    // Special case: If we have the "A/B" encoding enabled but _not_ "Binary",
    // format this button label using the "A/B" convention
    if (this.isEncodingEnabled_(EncodingType.A_AND_B) && !this.isEncodingEnabled_(EncodingType.BINARY)) {
      nextBit = binaryToAB(nextBit);
    }

    this.getSetWireButton().text(i18n.setWireToValue({ value: nextBit }));
    this.conditionallyToggleSetWireButton();
  }
};

/**
 * Check whether the given encoding is currently displayed by the panel.
 * @param {EncodingType} queryEncoding
 * @returns {boolean}
 * @private
 */
NetSimSendPanel.prototype.isEncodingEnabled_ = function (queryEncoding) {
  return this.enabledEncodings_.some(function (enabledEncoding) {
    return enabledEncoding === queryEncoding;
  });
};

/**
 * Update from address for the panel, update all the packets to reflect this.
 * @param {number} [fromAddress] default zero
 */
NetSimSendPanel.prototype.setFromAddress = function (fromAddress) {
  // fromAddress can be undefined for other parts of the sim, but within
  // the send panel we just set it to zero.
  this.fromAddress_ = utils.valueOr(fromAddress, 0);

  this.packets_.forEach((function (packetEditor) {
    packetEditor.setFromAddress(this.fromAddress_);
  }).bind(this));
};

/**
 * @param {Event} jQueryEvent
 * @private
 */
NetSimSendPanel.prototype.onAddPacketButtonPress_ = function (jQueryEvent) {
  var thisButton = $(jQueryEvent.target);
  if (thisButton.is('[disabled]')) {
    return;
  }

  this.addPacket_();

  // Scroll to end of packet area
  var scrollingArea = this.getBody().find('.send-panel-packets');
  scrollingArea.animate({ scrollTop: scrollingArea[0].scrollHeight }, 'fast');
};

/**
 * Send message to connected remote
 * @param {Event} jQueryEvent
 * @private
 */
NetSimSendPanel.prototype.onSendEventTriggered_ = function (jQueryEvent) {
  var triggeringTarget = $(jQueryEvent.target);
  if (triggeringTarget.is('[disabled]')) {
    return;
  }

  var level = NetSimGlobals.getLevelConfig();
  if (level.messageGranularity === MessageGranularity.PACKETS) {
    this.beginSendingPackets_();
  } else if (level.messageGranularity === MessageGranularity.BITS) {
    this.sendOneBit_();
  }
};

/**
 * Send a single bit, manually 'setting the wire state'.
 * @private
 */
NetSimSendPanel.prototype.sendOneBit_ = function () {
  var myNode = this.netsim_.myNode;
  if (!myNode) {
    throw new Error("Tried to set wire state when no connection is established.");
  }

  // Find the first bit of the first packet. Disallow setting the wire
  // if there is no first bit.
  var nextBit = this.getNextBit_();
  if (nextBit === undefined) {
    throw new Error("Tried to set wire state when no bit is queued.");
  } else {
    this.disableEverything();
    this.netsim_.animateSetWireState(nextBit);
    myNode.setSimplexWireState(nextBit, (function (err) {
      if (err) {
        logger.warn(err.message);
        return;
      }

      this.consumeFirstBit();
      this.enableEverything();
      this.conditionallyToggleSetWireButton();
    }).bind(this));
  }
};

/**
 * Get the next bit that would be sent, if sending the entered message one
 * bit at a time.
 * @returns {string|undefined} single bit as a "0" or "1" if there are
 * bits to be sent, or undefined otherwise
 * @private
 */
NetSimSendPanel.prototype.getNextBit_ = function () {
  return this.packets_.length > 0 ? this.packets_[0].getFirstBit() : undefined;
};

/** Disable all controls in this panel, usually during network activity. */
NetSimSendPanel.prototype.disableEverything = function () {
  this.getBody().find('input, textarea').prop('disabled', true);
  this.getBody().find('.netsim-button').attr('disabled', 'disabled');
  if (this.packetSizeControl_) {
    this.packetSizeControl_.disable();
  }
};

/**
 * Finds the button used to set the wire state
 * @returns {jQuery}
 */
NetSimSendPanel.prototype.getSetWireButton = function () {
  return this.getBody().find('#set-wire-button');
};

/** Enables the setWireButton if there is another bit in the queue,
 * disables it otherwise.
 * @returns {jQuery}
 */
NetSimSendPanel.prototype.conditionallyToggleSetWireButton = function () {
  var setWireButton = this.getSetWireButton();
  if (this.getNextBit_() === undefined) {
    setWireButton.attr('disabled', 'disabled');
  } else {
    setWireButton.removeAttr('disabled');
  }
  return setWireButton;
};

/** Enable all controls in this panel, usually after network activity. */
NetSimSendPanel.prototype.enableEverything = function () {
  this.getBody().find('input, textarea').prop('disabled', false);
  this.getBody().find('.netsim-button').removeAttr('disabled');
  if (this.packetSizeControl_) {
    this.packetSizeControl_.enable();
  }
};

/**
 * Remove the first bit of the first packet, usually because we just sent
 * a single bit in variant 1.
 */
NetSimSendPanel.prototype.consumeFirstBit = function () {
  if (this.packets_.length > 0) {
    this.packets_[0].consumeFirstBit();
    if (this.packets_[0].getPacketBinary() === '' && this.packets_.length > 1) {
      this.removePacket_(this.packets_[0]);
    }
  }
};

/**
 * Show or hide parts of the send UI based on the currently selected encoding
 * mode.
 * @param {EncodingType[]} newEncodings
 */
NetSimSendPanel.prototype.setEncodings = function (newEncodings) {
  this.enabledEncodings_ = newEncodings;
  this.packets_.forEach(function (packetEditor) {
    packetEditor.setEncodings(newEncodings);
  });
  this.onContentChange_();
};

/**
 * Change how data is interpreted and formatted by this component, triggering
 * an update of all input fields.
 * @param {number} newChunkSize
 */
NetSimSendPanel.prototype.setChunkSize = function (newChunkSize) {
  this.chunkSize_ = newChunkSize;
  this.packets_.forEach(function (packetEditor) {
    packetEditor.setChunkSize(newChunkSize);
  });
};

/**
 * Change the local device bitrate which affects send animation speed.
 * @param {number} newBitRate in bits per second
 */
NetSimSendPanel.prototype.setBitRate = function (newBitRate) {
  this.bitRate_ = newBitRate;
  this.packets_.forEach(function (packetEditor) {
    packetEditor.setBitRate(newBitRate);
  });
};

/**
 * Callback passed down into packet size control, called when packet size
 * is changed by the user.
 * @param {number} newPacketSize
 * @private
 */
NetSimSendPanel.prototype.packetSizeChangeCallback_ = function (newPacketSize) {
  this.maxPacketSize_ = newPacketSize;
  this.packets_.forEach(function (packetEditor) {
    packetEditor.setMaxPacketSize(newPacketSize);
  });
};

/**
 * After toggling panel visibility, trigger a layout update so send/log panel
 * space is shared correctly.
 * @private
 * @override
 */
NetSimSendPanel.prototype.onMinimizerClick_ = function () {
  NetSimSendPanel.superPrototype.onMinimizerClick_.call(this);
  this.netsim_.updateLayout();
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./DataConverters":"/home/ubuntu/staging/apps/build/js/netsim/DataConverters.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimLogger":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogger.js","./NetSimPacketEditor":"/home/ubuntu/staging/apps/build/js/netsim/NetSimPacketEditor.js","./NetSimPacketSizeControl":"/home/ubuntu/staging/apps/build/js/netsim/NetSimPacketSizeControl.js","./NetSimPanel":"/home/ubuntu/staging/apps/build/js/netsim/NetSimPanel.js","./NetSimSendPanel.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimSendPanel.html.ejs","./Packet":"/home/ubuntu/staging/apps/build/js/netsim/Packet.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimSendPanel.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
  var i18n = require('./locale');
  var MessageGranularity = require('./NetSimConstants').MessageGranularity;
; buf.push('\n<div class="send-panel-packets"></div>\n<div class="panel-footer">\n  <div class="right-side-controls">\n    ');8; if (level.showAddPacketButton) { ; buf.push('\n      <span class="netsim-button secondary large-button" id="add-packet-button">', escape((9,  i18n.addPacket() )), '</span>\n    ');10; } ; buf.push('\n    ');11; if (level.messageGranularity === MessageGranularity.PACKETS) { ; buf.push('\n      <span class="netsim-button large-button" id="send-button">', escape((12,  i18n.send() )), '</span>\n    ');13; } else if (level.messageGranularity === MessageGranularity.BITS) { ; buf.push('\n      <span class="netsim-button large-button" id="set-wire-button">', escape((14,  i18n.setWire() )), '</span>\n    ');15; } ; buf.push('\n  </div>\n  <div class="packet-size"></div>\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterTab.js":[function(require,module,exports){
/**
 * @overview UI controller for the "Router" tab in the left column.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var markup = require('./NetSimRouterTab.html.ejs');
var NetSimBandwidthControl = require('./NetSimBandwidthControl');
var NetSimMemoryControl = require('./NetSimMemoryControl');
var NetSimRouterStatsTable = require('./NetSimRouterStatsTable');
var NetSimGlobals = require('./NetSimGlobals');

/**
 * Generator and controller for router information view.
 * @param {jQuery} rootDiv - Parent element for this component.
 * @param {Object} callbacks
 * @param {function} callbacks.bandwidthSliderChangeCallback
 * @param {function} callbacks.bandwidthSliderStopCallback
 * @param {function} callbacks.memorySliderChangeCallback
 * @param {function} callbacks.memorySliderStopCallback
 * @constructor
 */
var NetSimRouterTab = module.exports = function (rootDiv, callbacks) {
  /**
   * Component root, which we fill whenever we call render()
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = rootDiv;

  /**
   * @type {function}
   * @private
   */
  this.bandwidthSliderChangeCallback_ = callbacks.bandwidthSliderChangeCallback;

  /**
   * @type {function}
   * @private
   */
  this.bandwidthSliderStopCallback_ = callbacks.bandwidthSliderStopCallback;

  /**
   * @type {function}
   * @private
   */
  this.memorySliderChangeCallback_ = callbacks.memorySliderChangeCallback;

  /**
   * @type {function}
   * @private
   */
  this.memorySliderStopCallback_ = callbacks.memorySliderStopCallback;

  /**
   * @type {NetSimRouterStatsTable}
   * @private
   */
  this.routerStatsTable_ = null;

  /**
   * @type {NetSimBandwidthControl}
   * @private
   */
  this.bandwidthControl_ = null;

  /**
   * @type {NetSimMemoryControl}
   * @private
   */
  this.memoryControl_ = null;

  // Initial render
  this.render();
};

/**
 * @param {RunLoop} runLoop
 */
NetSimRouterTab.prototype.attachToRunLoop = function (runLoop) {
  if (this.routerStatsTable_) {
    this.routerStatsTable_.attachToRunLoop(runLoop);
  }
};

/**
 * Fill the root div with new elements reflecting the current state.
 */
NetSimRouterTab.prototype.render = function () {
  var levelConfig = NetSimGlobals.getLevelConfig();

  var renderedMarkup = $(markup({
    level: levelConfig
  }));
  this.rootDiv_.html(renderedMarkup);
  this.routerStatsTable_ = new NetSimRouterStatsTable(this.rootDiv_.find('.router-stats'));
  if (levelConfig.showRouterBandwidthControl) {
    this.bandwidthControl_ = new NetSimBandwidthControl(this.rootDiv_.find('.bandwidth-control'), this.bandwidthSliderChangeCallback_, this.bandwidthSliderStopCallback_);
  }
  if (levelConfig.showRouterMemoryControl) {
    this.memoryControl_ = new NetSimMemoryControl(this.rootDiv_.find('.memory-control'), this.memorySliderChangeCallback_, this.memorySliderStopCallback_);
  }
};

/**
 * @param {NetSimLogEntry[]} logData
 */
NetSimRouterTab.prototype.setRouterLogData = function (logData) {
  if (this.routerStatsTable_) {
    this.routerStatsTable_.setRouterLogData(logData);
  }
};

/** @param {number} creationTimestampMs */
NetSimRouterTab.prototype.setRouterCreationTime = function (creationTimestampMs) {
  if (this.routerStatsTable_) {
    this.routerStatsTable_.setRouterCreationTime(creationTimestampMs);
  }
};

/**
 * @param {number} newBandwidth in bits/second
 */
NetSimRouterTab.prototype.setBandwidth = function (newBandwidth) {
  if (this.bandwidthControl_) {
    this.bandwidthControl_.setValue(newBandwidth);
  }
  if (this.routerStatsTable_) {
    this.routerStatsTable_.setBandwidth(newBandwidth);
  }
};

/** @param {number} newMemory in bits/second */
NetSimRouterTab.prototype.setMemory = function (newMemory) {
  if (this.memoryControl_) {
    this.memoryControl_.setValue(newMemory);
  }
  if (this.routerStatsTable_) {
    this.routerStatsTable_.setTotalMemory(newMemory);
  }
};

/**
 * @param {number} queuedPacketCount
 */
NetSimRouterTab.prototype.setRouterQueuedPacketCount = function (queuedPacketCount) {
  if (this.routerStatsTable_) {
    this.routerStatsTable_.setRouterQueuedPacketCount(queuedPacketCount);
  }
};

/** @param {number} usedMemoryInBits */
NetSimRouterTab.prototype.setMemoryInUse = function (usedMemoryInBits) {
  if (this.routerStatsTable_) {
    this.routerStatsTable_.setMemoryInUse(usedMemoryInBits);
  }
};

/** @param {number} dataRateBitsPerSecond */
NetSimRouterTab.prototype.setDataRate = function (dataRateBitsPerSecond) {
  if (this.routerStatsTable_) {
    this.routerStatsTable_.setDataRate(dataRateBitsPerSecond);
  }
};

},{"./NetSimBandwidthControl":"/home/ubuntu/staging/apps/build/js/netsim/NetSimBandwidthControl.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimMemoryControl":"/home/ubuntu/staging/apps/build/js/netsim/NetSimMemoryControl.js","./NetSimRouterStatsTable":"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterStatsTable.js","./NetSimRouterTab.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterTab.html.ejs"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterTab.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
var i18n = require('./locale');
; buf.push('\n<div class="netsim-router-tab">\n  <h1>', escape((5,  i18n.routerTab_stats() )), '</h1>\n  <div class="router-stats"></div>\n  ');7; if (level.showRouterBandwidthControl) { ; buf.push('\n    <h1>', escape((8,  i18n.routerTab_bandwidth() )), '</h1>\n    <div class="bandwidth-control"></div>\n  ');10; } ; buf.push('\n  ');11; if (level.showRouterMemoryControl) { ; buf.push('\n    <h1>', escape((12,  i18n.routerTab_memory() )), '</h1>\n    <div class="memory-control"></div>\n  ');14; } ; buf.push('\n  <h1>', escape((15,  i18n.routerTab_logs() )), '</h1>\n  <span class="secondary netsim-button large-button" id="show-router-log-modal-two" data-toggle="modal" data-target="#router-log-modal">', escape((16,  i18n.logBrowserButton() )), '</span>\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterStatsTable.js":[function(require,module,exports){
/**
 * @overview UI component displaying router stats on the "Router" tab.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var markup = require('./NetSimRouterStatsTable.html.ejs');
var NetSimUtils = require('./NetSimUtils');
var NetSimLogEntry = require('./NetSimLogEntry');

/**
 * Render every half-second, minimum.
 * @type {number}
 * @const
 */
var MAX_RENDER_DELAY_MS = 500;

/**
 * @type {number}
 * @const
 */
var MILLIS_PER_SECOND = 1000;

/**
 * @type {number}
 * @const
 */
var SECONDS_PER_MINUTE = 60;

/**
 * @type {number}
 * @const
 */
var MILLIS_PER_MINUTE = MILLIS_PER_SECOND * SECONDS_PER_MINUTE;

/**
 * @type {number}
 * @const
 */
var MINUTES_PER_HOUR = 60;

/**
 * @type {number}
 * @const
 */
var MILLIS_PER_HOUR = MILLIS_PER_MINUTE * MINUTES_PER_HOUR;

/**
 * Generator and controller for DNS network lookup table component.
 * Shows different amounts of information depending on the DNS mode.
 *
 * @param {jQuery} rootDiv
 * @constructor
 */
var NetSimRouterStatsTable = module.exports = function (rootDiv) {
  /**
   * Component root, which we fill whenever we call render()
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = rootDiv;

  /**
   * Last render time, in simulation-time.
   * @type {number}
   * @private
   */
  this.lastRenderTime_ = null;

  /**
   * Unix timestamp (local) of router creation time
   * @type {number}
   * @private
   */
  this.routerCreationTime_ = 0;

  /**
   * Total count of packets this router has received.
   * @type {number}
   * @private
   */
  this.totalPackets_ = 0;

  /**
   * Total count of packets this router has successfully processed.
   * @type {number}
   * @private
   */
  this.successfulPackets_ = 0;

  /**
   * Total size of all packets received by this router, in bits.
   * @type {number}
   * @private
   */
  this.totalData_ = 0;

  /**
   * Total size of all packets successfully processed by this router, in bits.
   * @type {number}
   * @private
   */
  this.successfulData_ = 0;

  /**
   * Maximum rate of data transfer (in bits per second)
   * @type {number}
   * @private
   */
  this.bandwidthLimit_ = 0;

  /**
   * Average rate of data transfer (in bits per second) over the last
   * DATA_RATE_WINDOW_MS milliseconds.
   * @type {number}
   * @private
   */
  this.dataRate_ = 0;

  /**
   * Router's total memory capacity, in bits.
   * @type {number}
   * @private
   */
  this.totalMemory_ = 0;

  /**
   * Number of packets in the router's queue.
   * @type {number}
   * @private
   */
  this.queuedPackets_ = 0;

  /**
   * Current size of the router's packet queue, in bits.
   * @type {number}
   * @private
   */
  this.usedMemory_ = 0;

  this.render({});
};

/**
 * @param {RunLoop} runLoop
 */
NetSimRouterStatsTable.prototype.attachToRunLoop = function (runLoop) {
  runLoop.render.register(this.render.bind(this));
};

/**
 * Fill the root div with new elements reflecting the current state
 * @param {RunLoop.Clock} clock
 */
NetSimRouterStatsTable.prototype.render = function (clock) {
  if (!this.needsRender(clock)) {
    return;
  }

  var renderedMarkup = $(markup({
    uptime: this.getLocalizedUptime(),
    queuedPackets: this.queuedPackets_,
    totalPackets: this.totalPackets_,
    successfulPackets: this.successfulPackets_,
    totalData: this.totalData_,
    successfulData: this.successfulData_,
    bandwidthLimit: this.bandwidthLimit_,
    dataRate: this.dataRate_,
    totalMemory: this.totalMemory_,
    usedMemory: this.usedMemory_
  }));
  this.rootDiv_.html(renderedMarkup);
  this.lastRenderTime_ = clock.time;
};

/**
 * @param {RunLoop.Clock} clock
 * @returns {boolean} whether a render operation is needed.
 */
NetSimRouterStatsTable.prototype.needsRender = function (clock) {
  return !this.lastRenderTime_ || clock.time - this.lastRenderTime_ > MAX_RENDER_DELAY_MS;
};

/**
 * Mark the router log data dirty, so that it will re-render on the
 * next frame.
 */
NetSimRouterStatsTable.prototype.setNeedsRender = function () {
  this.lastRenderTime_ = null;
};

/**
 * Get a duration string for the current router uptime.
 * @returns {string}
 */
NetSimRouterStatsTable.prototype.getLocalizedUptime = function () {
  var hoursUptime = 0;
  var minutesUptime = 0;
  var secondsUptime = 0;
  if (this.routerCreationTime_ > 0) {
    var millisecondsUptime = Date.now() - this.routerCreationTime_;
    hoursUptime = Math.floor(millisecondsUptime / MILLIS_PER_HOUR);
    millisecondsUptime -= hoursUptime * MILLIS_PER_HOUR;
    minutesUptime = Math.floor(millisecondsUptime / MILLIS_PER_MINUTE);
    millisecondsUptime -= minutesUptime * MILLIS_PER_MINUTE;
    secondsUptime = Math.floor(millisecondsUptime / MILLIS_PER_SECOND);
  }
  return hoursUptime.toString() + ':' + NetSimUtils.zeroPadLeft(minutesUptime, 2) + ':' + NetSimUtils.zeroPadLeft(secondsUptime, 2);
};

/**
 * @param {NetSimLogEntry[]} logEntries
 * @returns {number} total data size, in bits, of packets represented by the
 *          given log entries.
 */
var totalSizeOfPackets = function totalSizeOfPackets(logEntries) {
  return logEntries.reduce(function (prev, cur) {
    return prev + cur.binary.length;
  }, 0);
};

/**
 * @param {NetSimLogEntry[]} logData
 */
NetSimRouterStatsTable.prototype.setRouterLogData = function (logData) {
  var successLogs = logData.filter(function (logEntry) {
    return logEntry.status === NetSimLogEntry.LogStatus.SUCCESS;
  });

  this.totalPackets_ = logData.length;
  this.successfulPackets_ = successLogs.length;

  this.totalData_ = totalSizeOfPackets(logData);
  this.successfulData_ = totalSizeOfPackets(successLogs);

  this.setNeedsRender();
};

/** @param {number} creationTimestampMs */
NetSimRouterStatsTable.prototype.setRouterCreationTime = function (creationTimestampMs) {
  this.routerCreationTime_ = creationTimestampMs;
  this.setNeedsRender();
};

/** @param {number} newBandwidth in bits per second */
NetSimRouterStatsTable.prototype.setBandwidth = function (newBandwidth) {
  this.bandwidthLimit_ = newBandwidth;
  this.setNeedsRender();
};

/** @param {number} totalMemoryInBits */
NetSimRouterStatsTable.prototype.setTotalMemory = function (totalMemoryInBits) {
  this.totalMemory_ = totalMemoryInBits;
  this.setNeedsRender();
};

/**
 * @param {number} queuedPacketCount
 */
NetSimRouterStatsTable.prototype.setRouterQueuedPacketCount = function (queuedPacketCount) {
  this.queuedPackets_ = queuedPacketCount;
  this.setNeedsRender();
};

/** @param {number} usedMemoryInBits */
NetSimRouterStatsTable.prototype.setMemoryInUse = function (usedMemoryInBits) {
  this.usedMemory_ = usedMemoryInBits;
  this.setNeedsRender();
};

/** @param {number} dataRateBitsPerSecond */
NetSimRouterStatsTable.prototype.setDataRate = function (dataRateBitsPerSecond) {
  this.dataRate_ = dataRateBitsPerSecond;
  this.setNeedsRender();
};

},{"./NetSimLogEntry":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogEntry.js","./NetSimRouterStatsTable.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterStatsTable.html.ejs","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterStatsTable.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
  var utils = require('../utils');
  var NetSimUtils = require('./NetSimUtils');

  /**
   * Write a stats row with the given title and value.
   * @param {string} title - localized name of the statistic (the header column contents)
   * @param {*} statValue - the value of the statistic
   */
  var writeStatRow = function (title, statValue) {
    ; buf.push('\n      <tr>\n        <th nowrap>', escape((13,  title )), '</th>\n        <td>', escape((14,  statValue )), '</td>\n      </tr>\n    ');16;
  };

  /**
   * Write a stats row that displays a fraction and also its percentage form.
   * @param {string} title - localized name of the statistic (the header column contents)
   * @param {number} partValue - numerator of the stat
   * @param {number} totalValue - denominator of the stat
   * @param {function} [toStringFunction] method for converting numerator and denominator to display format
   */
  var fractionStatRow = function (title, partValue, totalValue, toStringFunction) {
    toStringFunction = utils.valueOr(toStringFunction, function (x) { return x; });
    var valueString = toStringFunction(partValue) + ' / ' + toStringFunction(totalValue);
    if (totalValue > 0 && totalValue < Infinity) {
      valueString += ' (' + Math.round(100 * partValue / totalValue) + '%)';
    }
    writeStatRow(title, valueString);
  };
; buf.push('\n<table>\n  <tbody>\n    ');37; writeStatRow('Uptime', uptime); ; buf.push('\n    ');38; writeStatRow('Queued Packets', queuedPackets); ; buf.push('\n    ');39; fractionStatRow('Memory Use', usedMemory, totalMemory, NetSimUtils.bitsToLocalizedRoundedBytesize); ; buf.push('\n    ');40; fractionStatRow('Throughput', dataRate, bandwidthLimit, NetSimUtils.bitrateToLocalizedRoundedBitrate); ; buf.push('\n    ');41; fractionStatRow('Routed Packets', successfulPackets, totalPackets); ; buf.push('\n    ');42; fractionStatRow('Routed Data', successfulData, totalData, NetSimUtils.bitsToLocalizedRoundedBytesize); ; buf.push('\n  </tbody>\n</table>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterLogModal.js":[function(require,module,exports){
/**
 * @overview a modal dialog showing the union of all router logs for the
 *           current shard.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var i18n = require('./locale');
var NetSimLogEntry = require('./NetSimLogEntry');
var Packet = require('./Packet');
var markup = require('./NetSimRouterLogModal.html.ejs');
var NetSimGlobals = require('./NetSimGlobals');

/** @const {string} */
var LOG_ENTRY_DATA_KEY = 'LogEntry';

/** @const {number} */
var MAXIMUM_ROWS_IN_FULL_RENDER = 500;

/**
 * Generator and controller for contents of modal dialog that reveals
 * all router logs together, in a searchable/sortable/filterable manner.
 *
 * @param {jQuery} rootDiv
 * @constructor
 */
var NetSimRouterLogModal = module.exports = function (rootDiv) {

  /**
   * Component root, which we fill whenever we call render()
   * @private {jQuery}
   */
  this.rootDiv_ = rootDiv;

  /**
   * Hidden by default.
   * @private {boolean}
   */
  this.isVisible_ = false;

  // Attach handlers for showing and hiding the modal
  this.rootDiv_.on('shown.bs.modal', this.onShow_.bind(this));
  this.rootDiv_.on('hidden.bs.modal', this.onHide_.bind(this));

  /**
   * @private {NetSimShard}
   */
  this.shard_ = null;

  /**
   * @private {NetSimRouterNode}
   */
  this.router_ = null;

  /**
   * @private {NetSimLogEntry}
   */
  this.logEntries_ = [];

  /**
   * The highest log row ID stored in logEntries_, used to only retrieve new
   * log rows, we don't need to retrieve everything.
   * @private {number}
   */
  this.latestRowID_ = 0;

  /**
   * Tracking information for which events we're registered to, so we can
   * perform cleanup as needed.
   * @private {Object}
   */
  this.eventKeys_ = {};

  /**
   * Sorting key, changed by user interaction, which determines which sort
   * we use on render.
   * @private {string}
   */
  this.sortBy_ = 'timestamp';

  /**
   * Whether currently using a descending sort.
   * @private {boolean}
   */
  this.sortDescending_ = true;

  /**
   * Whether we are currently in "All-Router" mode or dealing with a
   * single router.  Always initializes to true because we never initialize
   * connected to a single router.
   * @private {boolean}
   */
  this.isAllRouterLogMode_ = true;

  this.render();
};

/**
 * Create a comparator function that can be used to sort log entries, configured
 * to sort according to the log browser's current configuration.
 * @returns {function(NetSimLogEntry, NetSimLogEntry)} compares two log entries,
 *          returns -1 if the first one belongs before the second one, 1 if
 *          the first one belongs after the second one, and 0 if they have the
 *          same sort position.
 * @private
 */
NetSimRouterLogModal.prototype.getSortComparator_ = function () {
  var getSortValue = NetSimRouterLogModal.sortKeyToSortValueGetterMap[this.sortBy_];
  var invertMultiplier = this.sortDescending_ ? -1 : 1;
  return function (a, b) {
    var x = getSortValue(a);
    var y = getSortValue(b);
    return (x < y ? -1 : x > y ? 1 : 0) * invertMultiplier;
  };
};

NetSimRouterLogModal.sortKeyToSortValueGetterMap = {

  'timestamp': function timestamp(logEntry) {
    return logEntry.timestamp;
  },

  'logged-by': function loggedBy(logEntry) {
    var originNode = logEntry.getOriginNode();
    if (originNode) {
      return originNode.getDisplayName();
    }
    return logEntry.nodeID.toString(10);
  },

  'status': function status(logEntry) {
    return logEntry.getLocalizedStatus();
  },

  'from-address': function fromAddress(logEntry) {
    return logEntry.getHeaderField(Packet.HeaderType.FROM_ADDRESS);
  },

  'to-address': function toAddress(logEntry) {
    return logEntry.getHeaderField(Packet.HeaderType.TO_ADDRESS);
  },

  'packet-info': function packetInfo(logEntry) {
    return logEntry.getLocalizedPacketInfo();
  },

  'message': function message(logEntry) {
    return logEntry.getMessageAscii();
  }

};

/**
 * State changes that occur when shoing the log.
 * @private
 */
NetSimRouterLogModal.prototype.onShow_ = function () {
  if (this.shard_) {
    this.shard_.logTable.subscribe();
  }
  this.isVisible_ = true;
  this.render();
};

/**
 * State changes that occur when hiding the log.
 * @private
 */
NetSimRouterLogModal.prototype.onHide_ = function () {
  if (this.shard_) {
    this.shard_.logTable.unsubscribe();
  }
  this.isVisible_ = false;
};

/**
 * @returns {boolean} TRUE if the modal is currently showing.
 */
NetSimRouterLogModal.prototype.isVisible = function () {
  return this.isVisible_;
};

/**
 * Fill the root div with new elements reflecting the current state
 */
NetSimRouterLogModal.prototype.render = function () {
  // Be lazy, don't render if not visible.
  if (!this.isVisible()) {
    return;
  }

  // Re-render entire log browser UI
  var renderedMarkup = $(markup({
    isAllRouterLogMode: this.isAllRouterLogMode_,
    canToggleRouterLogMode: this.canToggleRouterLogMode_(),
    sortBy: this.sortBy_,
    sortDescending: this.sortDescending_
  }));
  this.rootDiv_.html(renderedMarkup);

  // Add input handlers
  this.getRouterLogToggleButton().one('click', (function () {
    this.toggleRouterLogMode_();
    this.render();
  }).bind(this));

  this.rootDiv_.find('th').click((function (event) {
    this.onSortHeaderClick_($(event.target).attr('data-sort-key'));
  }).bind(this));

  // Add rows to the table
  var rows = this.getSortedFilteredLogEntries(this.logEntries_).slice(0, MAXIMUM_ROWS_IN_FULL_RENDER).map(this.makeTableRow_.bind(this));
  this.rootDiv_.find('tbody').append(rows);

  if (rows.length === MAXIMUM_ROWS_IN_FULL_RENDER) {
    var maxRenderedWarning = document.createElement('div');
    maxRenderedWarning.className = 'log-browser-limit-message';
    maxRenderedWarning.textContent = i18n.showingFirstXLogEntries({
      x: MAXIMUM_ROWS_IN_FULL_RENDER
    });
    this.rootDiv_.find('table').after(maxRenderedWarning);
  }
};

/**
 * Convert the given set of log entries to table rows and insert them
 * into the DOM, instead of re-rendering the whole table.
 * @param {!NetSimLogEntry[]} newEntries
 * @private
 */
NetSimRouterLogModal.prototype.renderNewLogEntries_ = function (newEntries) {
  // Be lazy, don't render at all if not visible.
  if (!this.isVisible() || newEntries.length === 0) {
    return;
  }

  /** @type {jQuery} Table body element. */
  var tbody = this.rootDiv_.find('tbody');

  // Get existing table row elements, which are already sorted and filtered.
  var oldRows = tbody.find('tr');

  // Sort and filter the new entries, and generate DOM rows for them.
  newEntries = this.getSortedFilteredLogEntries(newEntries);
  var newRows = $(newEntries.map(this.makeTableRow_.bind(this)));

  // Walk both collections to merge new rows into the DOM
  var nextOld = getNextInfo(oldRows, 0);
  var nextNew = getNextInfo(newRows, 0);
  var comparator = this.getSortComparator_();
  while (nextNew.index < newRows.length && nextOld.index < oldRows.length) {
    if (comparator(nextNew.logEntry, nextOld.logEntry) <= 0) {
      nextNew.tableRow.insertBefore(nextOld.tableRow);
      nextNew = getNextInfo(newRows, nextNew.index + 1);
    } else {
      nextOld = getNextInfo(oldRows, nextOld.index + 1);
    }
  }

  // Put whatever's left on the end of the table
  tbody.append(newRows.slice(nextNew.index));
};

/**
 * Generates a helper object for performing the log row merge.
 * @param {jQuery} rows - Wrapped collection of table rows.
 * @param {!number} atIndex - Index into `rows` at which info should be generated.
 * @returns {{index: number, tableRow: jQuery, logEntry: NetSimLogEntry}}
 */
function getNextInfo(rows, atIndex) {
  var row = rows.eq(atIndex);
  return {
    index: atIndex,
    tableRow: row,
    logEntry: row.length > 0 ? row.data(LOG_ENTRY_DATA_KEY) : {}
  };
}

/**
 * @param {!NetSimLogEntry[]} logEntries
 * @returns {NetSimLogEntry[]} subset of logEntries, sorted and filtered
 *          according to the log browser's current settings.
 */
NetSimRouterLogModal.prototype.getSortedFilteredLogEntries = function (logEntries) {
  // Filter entries to current log browser filter mode
  var filteredLogEntries = this.isAllRouterLogMode_ ? logEntries : logEntries.filter(function (entry) {
    return entry.nodeID === this.router_.entityID;
  }, this);

  return filteredLogEntries.sort(this.getSortComparator_());
};

/**
 * Given a log entry, generate a table row that can be added to the log modal.
 * @param {!NetSimLogEntry} logEntry
 * @returns {Element} a tr element.
 * @private
 */
NetSimRouterLogModal.prototype.makeTableRow_ = function (logEntry) {
  var headerFields = NetSimGlobals.getLevelConfig().routerExpectsPacketHeader;

  var showToAddress = headerFields.indexOf(Packet.HeaderType.TO_ADDRESS) > -1;

  var showFromAddress = headerFields.indexOf(Packet.HeaderType.FROM_ADDRESS) > -1;

  var showPacketInfo = headerFields.indexOf(Packet.HeaderType.PACKET_INDEX) > -1 && headerFields.indexOf(Packet.HeaderType.PACKET_COUNT) > -1;

  var originNode = logEntry.getOriginNode();

  var row = document.createElement('tr');

  // Store the actual logEntry on the row for sorting/merging later.
  $(row).data(LOG_ENTRY_DATA_KEY, logEntry);

  row.appendChild(makeCell(logEntry.getTimeString()));

  row.appendChild(makeCell(originNode ? originNode.getDisplayName() : logEntry.nodeID));

  row.appendChild(makeCell(logEntry.getLocalizedStatus()));

  if (showFromAddress) {
    row.appendChild(makeCell(logEntry.getHeaderField(Packet.HeaderType.FROM_ADDRESS)));
  }

  if (showToAddress) {
    row.appendChild(makeCell(logEntry.getHeaderField(Packet.HeaderType.TO_ADDRESS)));
  }

  if (showPacketInfo) {
    row.appendChild(makeCell(logEntry.getLocalizedPacketInfo()));
  }

  var tdMessageBody = makeCell(logEntry.getMessageAscii());
  tdMessageBody.className = 'message';
  row.appendChild(tdMessageBody);

  return row;
};

/**
 * @param {!string} text
 * @returns {HTMLElement} the new TD element.
 */
function makeCell(text) {
  var td = document.createElement('td');
  td.style.whiteSpace = 'nowrap';
  td.textContent = text;
  return td;
}

/**
 * Change the sort settings and re-render the log table.
 * @param {!string} sortKey
 * @private
 */
NetSimRouterLogModal.prototype.onSortHeaderClick_ = function (sortKey) {
  if (!sortKey) {
    return;
  }

  if (this.sortBy_ === sortKey) {
    this.sortDescending_ = !this.sortDescending_;
  } else {
    this.sortBy_ = sortKey;
    this.sortDescending_ = false;
  }
  this.render();
};

/**
 * Called by the sumulation's onRouterConnect and onRouterDisconnect
 * methods, this locally remembers the current router state and triggers
 * a rerender
 * @param {NetSimRouterNode} router
 */
NetSimRouterLogModal.prototype.setRouter = function (router) {
  this.router_ = router;
  this.isAllRouterLogMode_ = !this.hasLocalRouter_();
  this.render();
};

/**
 * Whether we are currently capable of logging all routers or not.
 * Is always true if we are in a level with connected routers.
 * Otherwise, is only true if we are not locally connected to a router.
 * @returns {boolean}
 * @private
 */
NetSimRouterLogModal.prototype.canLogAllRouters_ = function () {
  return NetSimGlobals.getLevelConfig().connectedRouters || !this.hasLocalRouter_();
};

/**
 * Returns true iff we are locally connected to a router.
 * @returns {boolean}
 * @private
 */
NetSimRouterLogModal.prototype.hasLocalRouter_ = function () {
  return !!this.router_;
};

/**
 * Whether or not we can switch between all-router and single-router log
 * mode. We can switch to single-router iff we have a local router, and
 * we can switch to all-router iff we are capable of logging all routers
 * @returns {boolean}
 * @private
 */
NetSimRouterLogModal.prototype.canToggleRouterLogMode_ = function () {
  if (this.isAllRouterLogMode_) {
    return this.hasLocalRouter_();
  } else {
    return this.canLogAllRouters_();
  }
};

/**
 * Toggles this.isAllRouterLogMode_ between `true` and `false`
 * @private
 */
NetSimRouterLogModal.prototype.toggleRouterLogMode_ = function () {
  this.isAllRouterLogMode_ = !this.isAllRouterLogMode_;
};

/**
 * Finds the button used to toggle between router log modes
 * @returns {jQuery}
 * @private
 */
NetSimRouterLogModal.prototype.getRouterLogToggleButton = function () {
  return this.rootDiv_.find('button#routerlog-toggle');
};

/**
 * Give the log browser a reference to the shard, so that it can query the
 * log table.  Or, pass null when disconnecting from a shard.
 * @param {NetSimShard|null} newShard
 */
NetSimRouterLogModal.prototype.setShard = function (newShard) {

  if (this.eventKeys_.registeredWithShard) {
    this.eventKeys_.registeredWithShard.logTable.tableChange.unregister(this.eventKeys_.logTableChange);
    this.eventKeys_.registeredWithShard = null;
  }

  if (newShard) {
    this.eventKeys_.logTableChange = newShard.logTable.tableChange.register(this.onLogTableChange_.bind(this));
    this.eventKeys_.registeredWithShard = newShard;
  }

  // When changing shards, reset log so we fetch the whole thing next time.
  this.logEntries_.length = 0;
  this.latestRowID_ = 0;
  this.shard_ = newShard;
};

/**
 * Handle log table changes.
 * @private
 */
NetSimRouterLogModal.prototype.onLogTableChange_ = function () {
  var headerSpec = NetSimGlobals.getLevelConfig().routerExpectsPacketHeader;
  var newRows = this.shard_.logTable.readAllFromID(this.latestRowID_ + 1);
  var newLogEntries = newRows.map(function (row) {
    this.latestRowID_ = Math.max(row.id, this.latestRowID_);
    return new NetSimLogEntry(this.shard_, row, headerSpec);
  }, this);
  // Modify this.logEntries_ in-place, appending new log entries
  Array.prototype.push.apply(this.logEntries_, newLogEntries);
  this.renderNewLogEntries_(newLogEntries);
};

},{"./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimLogEntry":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogEntry.js","./NetSimRouterLogModal.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterLogModal.html.ejs","./Packet":"/home/ubuntu/staging/apps/build/js/netsim/Packet.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterLogModal.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
var Packet = require('./Packet');
var i18n = require('./locale');
var NetSimGlobals = require('./NetSimGlobals');

var headerFields = NetSimGlobals.getLevelConfig().routerExpectsPacketHeader;

/** @type {boolean} */
var showToAddress = headerFields.indexOf(Packet.HeaderType.TO_ADDRESS) > -1;

/** @type {boolean} */
var showFromAddress = headerFields.indexOf(Packet.HeaderType.FROM_ADDRESS) > -1;

/** @type {boolean} */
var showPacketInfo = headerFields.indexOf(Packet.HeaderType.PACKET_INDEX) > -1 &&
    headerFields.indexOf(Packet.HeaderType.PACKET_COUNT) > -1;

/**
 * @name isAllRouterLogMode
 * @type {boolean}
 */

/**
 * @name sortBy
 * @type {string}
 */

/**
 * @name sortDescending
 * @type {boolean}
 */

function sortMarkupFor(sortKey) {
  if (sortKey === sortBy) {
    if (sortDescending) {
      return '<i class="fa fa-sort-desc"></i>';
    } else {
      return '<i class="fa fa-sort-asc"></i>';
    }
  }
  return '';
}
; buf.push('\n<div class="modal-dialog modal-lg">\n    <div class="modal-header">\n      <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>\n\n      ');48; if (canToggleRouterLogMode) { ; buf.push('\n        <button type="button" id="routerlog-toggle" class="pull-right btn btn-primary btn-mini">', escape((49,  (isAllRouterLogMode) ? i18n.logBrowserHeader_toggleMine() : i18n.logBrowserHeader_toggleAll() )), '</button>\n      ');50; } ; buf.push('\n\n      ');52; if (isAllRouterLogMode) { ; buf.push('\n        <h4 class="modal-title">', escape((53,  i18n.logBrowserHeader_all() )), '</h4>\n      ');54; } else { ; buf.push('\n        <h4 class="modal-title">', escape((55,  i18n.logBrowserHeader_mine() )), '</h4>\n      ');56; } ; buf.push('\n    </div>\n    <div class="modal-body">\n      <table>\n        <thead>\n          <tr>\n            <th nowrap data-sort-key="timestamp">', escape((62,  i18n.time() )), ' ', (62,  sortMarkupFor('timestamp') ), '</th>\n            <th nowrap data-sort-key="logged-by">', escape((63,  i18n.loggedByNode() )), ' ', (63,  sortMarkupFor('logged-by') ), '</th>\n            <th nowrap data-sort-key="status">', escape((64,  i18n.status() )), ' ', (64,  sortMarkupFor('status') ), '</th>\n            ');65; if (showFromAddress) { ; buf.push('\n              <th nowrap data-sort-key="from-address">', escape((66,  i18n.from() )), ' ', (66,  sortMarkupFor('from-address') ), '</th>\n            ');67; } ; buf.push('\n            ');68; if (showToAddress) { ; buf.push('\n              <th nowrap data-sort-key="to-address">', escape((69,  i18n.to() )), ' ', (69,  sortMarkupFor('to-address') ), '</th>\n            ');70; } ; buf.push('\n            ');71; if (showPacketInfo) { ; buf.push('\n              <th nowrap data-sort-key="packet-info">', escape((72,  i18n.packet() )), ' ', (72,  sortMarkupFor('packet-info') ), '</th>\n            ');73; } ; buf.push('\n            <th nowrap data-sort-key="message">', escape((74,  i18n.message() )), ' ', (74,  sortMarkupFor('message') ), '</th>\n          </tr>\n        </thead>\n        <tbody>\n        </tbody>\n      </table>\n    </div>\n    <div class="modal-footer">\n      <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>\n    </div>\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./Packet":"/home/ubuntu/staging/apps/build/js/netsim/Packet.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimPacketSizeControl.js":[function(require,module,exports){
/**
 * @overview UI slider used to change maximum packet length.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,

 maxlen: 120
 */
'use strict';

var i18n = require('./locale');
var NetSimSlider = require('./NetSimSlider');

/**
 * Generator and controller for packet size slider/selector
 * @param {jQuery} rootDiv
 * @param {function} packetSizeChangeCallback
 * @param {Object} options
 * @param {number} options.minimumPacketSize
 * @constructor
 * @augments NetSimSlider
 */
var NetSimPacketSizeControl = module.exports = function (rootDiv, packetSizeChangeCallback, options) {
  NetSimSlider.call(this, rootDiv, {
    onChange: packetSizeChangeCallback,
    min: options.minimumPacketSize,
    max: 8192,
    upperBoundInfinite: false
  });

  // Auto-render, unlike our base class
  this.render();
};
NetSimPacketSizeControl.inherits(NetSimSlider);

/**
 * Get localized packet size description for the given packet size.
 * @param {number} packetSize
 * @returns {string}
 */
NetSimPacketSizeControl.prototype.getPacketSizeText = function (packetSize) {
  return i18n.numBitsPerPacket({ numBits: packetSize });
};

/**
 * Converts a numeric value (in bits) into a compact localized string
 * representation of that value.
 * @param {number} val - numeric value of the control
 * @returns {string} - localized string representation of value
 * @override
 */
NetSimPacketSizeControl.prototype.valueToLabel = function (val) {
  if (val === Infinity) {
    return i18n.unlimited();
  }
  return i18n.numBitsPerPacket({ numBits: val });
};

/**
 * Get labels for end sliders
 * @param {number} val
 * @returns {string}
 * @override
 */
NetSimPacketSizeControl.prototype.valueToShortLabel = function (val) {
  if (val === Infinity) {
    return i18n.unlimited();
  }
  return val;
};

},{"./NetSimSlider":"/home/ubuntu/staging/apps/build/js/netsim/NetSimSlider.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimPacketEditor.js":[function(require,module,exports){
/**
 * @overview UI controller for the packet editor which allows editing multiple
 *           encodings at once and lives inside the send panel.
 * @see NetSimSendPanel for how this is used.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

require('../utils'); // For Function.prototype.inherits()
var netsimMsg = require('./locale');
var markup = require('./NetSimPacketEditor.html.ejs');
var KeyCodes = require('../constants').KeyCodes;
var NetSimEncodingControl = require('./NetSimEncodingControl');
var NetSimLogPanel = require('./NetSimLogPanel');
var Packet = require('./Packet');
var DataConverters = require('./DataConverters');
var NetSimConstants = require('./NetSimConstants');
var NetSimGlobals = require('./NetSimGlobals');

var EncodingType = NetSimConstants.EncodingType;
var BITS_PER_BYTE = NetSimConstants.BITS_PER_BYTE;

var minifyBinary = DataConverters.minifyBinary;
var formatAB = DataConverters.formatAB;
var formatBinary = DataConverters.formatBinary;
var formatHex = DataConverters.formatHex;
var alignDecimal = DataConverters.alignDecimal;
var abToBinary = DataConverters.abToBinary;
var abToInt = DataConverters.abToInt;
var binaryToAB = DataConverters.binaryToAB;
var binaryToHex = DataConverters.binaryToHex;
var binaryToInt = DataConverters.binaryToInt;
var binaryToDecimal = DataConverters.binaryToDecimal;
var binaryToAscii = DataConverters.binaryToAscii;
var hexToBinary = DataConverters.hexToBinary;
var intToAB = DataConverters.intToAB;
var intToBinary = DataConverters.intToBinary;
var intToHex = DataConverters.intToHex;
var decimalToBinary = DataConverters.decimalToBinary;
var asciiToBinary = DataConverters.asciiToBinary;

/**
 * Type for tructured access to jQuery-wrapped DOM elements.  Two layers deep;
 * can be used for quick access to one of the fields in the packet editor grid
 * by referencing via row and column.
 *
 * Map keys at the first layer correspond to NetSimConstants.EncodingType.
 * Map keys at the second layer correspond to Packet.HeaderType, plus the
 *   'message' field.
 *
 * Usage:
 *   map.binary.fromAddress
 *   map['binary']['fromAddress']
 *   map[EncodingType.BINARY][Packet.HeaderType.FROM_ADDRESS]
 *
 * @typedef {Object} UIMap
 * @property {UIRowMap} a_and_b
 * @property {UIRowMap} binary
 * @property {UIRowMap} hexadecimal
 * @property {UIRowMap} decimal
 * @property {UIRowMap} ascii
 */

/**
 * @typedef {Object} UIRowMap
 * @property {jQuery} toAddress
 * @property {jQuery} fromAddress
 * @property {jQuery} packetIndex
 * @property {jQuery} packetCount
 * @property {jQuery} message
 */

/**
 * Generator and controller for message sending view.
 * @param {Object} initialConfig
 * @param {MessageGranularity} initialConfig.messageGranularity
 * @param {Packet.HeaderType[]} initialConfig.packetSpec
 * @param {number} [initialConfig.toAddress]
 * @param {number} [initialConfig.fromAddress]
 * @param {number} [initialConfig.packetIndex]
 * @param {number} [initialConfig.packetCount]
 * @param {string} [initialConfig.message]
 * @param {number} [initialConfig.maxPacketSize]
 * @param {number} [initialConfig.chunkSize]
 * @param {number} [initialConfig.bitRate]
 * @param {EncodingType[]} [initialConfig.enabledEncodings]
 * @param {function} initialConfig.removePacketCallback
 * @param {function} initialConfig.doneSendingCallback
 * @param {function} initialConfig.contentChangeCallback
 * @param {function} initialConfig.enterKeyPressedCallback
 * @constructor
 */
var NetSimPacketEditor = module.exports = function (initialConfig) {
  var level = NetSimGlobals.getLevelConfig();

  /**
   * @type {RowType[]}
   * @const
   */
  this.ROW_TYPES = [{
    typeName: EncodingType.A_AND_B,
    addressFieldAllowedCharacters: /[AB\s]/i,
    addressFieldConversion: function addressFieldConversion(abString) {
      return DataConverters.binaryToAddressString(DataConverters.abToBinary(abString), level.addressFormat);
    },
    shortNumberAllowedCharacters: /[AB]/i,
    shortNumberConversion: truncatedABToInt,
    messageAllowedCharacters: /[AB\s]/i,
    messageConversion: abToBinary
  }, {
    typeName: EncodingType.BINARY,
    addressFieldAllowedCharacters: /[01\s]/i,
    addressFieldConversion: function addressFieldConversion(binaryString) {
      return DataConverters.binaryToAddressString(binaryString, level.addressFormat);
    },
    shortNumberAllowedCharacters: /[01]/,
    shortNumberConversion: truncatedBinaryToInt,
    messageAllowedCharacters: /[01\s]/,
    messageConversion: minifyBinary
  }, {
    typeName: EncodingType.HEXADECIMAL,
    addressFieldAllowedCharacters: /[0-9a-f\s]/i,
    addressFieldConversion: function addressFieldConversion(hexString) {
      return DataConverters.binaryToAddressString(DataConverters.hexToBinary(hexString), level.addressFormat);
    },
    shortNumberAllowedCharacters: /[0-9a-f]/i,
    shortNumberConversion: truncatedHexToInt,
    messageAllowedCharacters: /[0-9a-f\s]/i,
    messageConversion: hexToBinary
  }, {
    typeName: EncodingType.DECIMAL,
    addressFieldAllowedCharacters: /[0-9.\s]/i,
    addressFieldConversion: cleanAddressString,
    shortNumberAllowedCharacters: /[0-9]/,
    shortNumberConversion: truncatedDecimalToInt,
    messageAllowedCharacters: /[0-9\s]/,
    messageConversion: (function (decimalString) {
      return decimalToBinary(decimalString, this.currentChunkSize_);
    }).bind(this)
  }, {
    typeName: EncodingType.ASCII,
    addressFieldAllowedCharacters: /[0-9.\s]/i,
    addressFieldConversion: cleanAddressString,
    shortNumberAllowedCharacters: /[0-9]/,
    shortNumberConversion: truncatedDecimalToInt,
    messageAllowedCharacters: /./,
    messageConversion: (function (asciiString) {
      return asciiToBinary(asciiString, this.currentChunkSize_);
    }).bind(this)
  }];

  /**
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = $('<div>').addClass('netsim-packet');

  /**
   * @type {MessageGranularity}
   * @private
   */
  this.messageGranularity_ = initialConfig.messageGranularity;

  /**
   * @type {Packet.HeaderType[]}
   * @private
   */
  this.packetSpec_ = initialConfig.packetSpec;

  /** @type {string} */
  this.toAddress = initialConfig.toAddress || DataConverters.binaryToAddressString('0', level.addressFormat);

  /** @type {string} */
  this.fromAddress = initialConfig.fromAddress || DataConverters.binaryToAddressString('0', level.addressFormat);

  /** @type {number} */
  this.packetIndex = initialConfig.packetIndex !== undefined ? initialConfig.packetIndex : 1;

  /** @type {number} */
  this.packetCount = initialConfig.packetCount !== undefined ? initialConfig.packetCount : 1;

  /**
   * Binary string of message body, live-interpreted to other values.
   * @type {string}
   */
  this.message = initialConfig.message || '';

  /**
   * Maximum packet length configurable by slider.
   * @type {Number}
   * @private
   */
  this.maxPacketSize_ = initialConfig.maxPacketSize || 8192;

  /**
   * Bits per chunk/byte for parsing and formatting purposes.
   * @type {number}
   * @private
   */
  this.currentChunkSize_ = initialConfig.chunkSize || BITS_PER_BYTE;

  /**
   * Local device bitrate (bps), which affects send-animation speed.
   * @type {number}
   * @private
   */
  this.bitRate_ = initialConfig.bitRate || Infinity;

  var encodings = initialConfig.enabledEncodings || [];
  /**
   * Which encodings should be visible in the editor.
   * @type {Object.<EncodingType, boolean>}
   * @private
   */
  this.enabledEncodingsHash_ = NetSimEncodingControl.encodingsAsHash(encodings);

  /**
   * Method to call in order to remove this packet from its parent.
   * Function should take this PacketEditor as an argument.
   * @type {function}
   * @private
   */
  this.removePacketCallback_ = initialConfig.removePacketCallback;

  /**
   * Method to call when this packet is done playing its sending animation.
   * Function should take this PacketEditor as an argument.
   * @type {function}
   * @private
   */
  this.doneSendingCallback_ = initialConfig.doneSendingCallback;

  /**
   * Method to notify our parent container that the packet's binary
   * content has changed.
   * @type {function}
   * @private
   */
  this.contentChangeCallback_ = initialConfig.contentChangeCallback;

  /**
   * Method to notify our parent container that the enter key has been
   * pressed
   * @type {function}
   * @private
   */
  this.enterKeyPressedCallback_ = initialConfig.enterKeyPressedCallback;

  /**
   * @type {jQuery}
   * @private
   */
  this.removePacketButton_ = null;

  /**
   * @type {jQuery}
   * @private
   */
  this.bitCounter_ = null;

  /**
   * Flag noting whether this packet editor is in a non-interactive mode
   * where it animates bits draining/being sent.
   * @type {boolean}
   * @private
   */
  this.isPlayingSendAnimation_ = false;

  /**
   * Flag for whether this editor is in the middle of an async send command.
   * @type {boolean}
   * @private
   */
  this.isSendingPacketToRemote_ = false;

  /**
   * Reference to local client node, used for sending messages.
   * @type {NetSimLocalClientNode}
   * @private
   */
  this.myNode_ = null;

  /**
   * Capture packet binary before the send animation begins so that we can
   * send the whole packet to remote storage when the animation is done.
   * @type {string}
   * @private
   */
  this.originalBinary_ = '';

  /**
   * Index into original binary indicating how many bits have been 'sent'
   * in the animation.
   * @type {number}
   * @private
   */
  this.sendAnimationIndex_ = 0;

  /**
   * Simulation-time timestamp (ms) of the last bit-send animation.
   * @type {number}
   * @private
   */
  this.lastBitSentTime_ = undefined;

  /**
   * Map of bound UI elements manipulated by this editor.  Provides quick
   * access to input elements in the editor grid.  See type notes for usage.
   *
   * Populated dynamically in `bindElements_` during `render`.  May not include
   * all fields, as we try to optimize and omit fields not enabled in the level.
   *
   * @type {UIMap}
   * @private
   */
  this.ui_ = {};

  this.render();
};

/**
 * Return root div, for hooking up to a parent element.
 * @returns {jQuery}
 */
NetSimPacketEditor.prototype.getRoot = function () {
  return this.rootDiv_;
};

/**
 * Clear the packet payload and put the editor back in a state where it's
 * ready for composing a new packet.
 * Intentionally preserves toAddress and fromAddress.
 */
NetSimPacketEditor.prototype.resetPacket = function () {
  this.message = '';
  this.packetIndex = 1;
  this.packetCount = 1;
  this.originalBinary_ = '';
  this.sendAnimationIndex_ = 0;
  this.lastBitSentTime_ = undefined;
  this.updateFields_();
  this.updateRemoveButtonVisibility_();
};

/**
 * Returns the first visible message box, so that we can focus() on it
 * @returns {jQuery}
 */
NetSimPacketEditor.prototype.getFirstVisibleMessageBox = function () {
  return this.getRoot().find('textarea.message:visible').first();
};

/** Replace contents of our root element with our own markup. */
NetSimPacketEditor.prototype.render = function () {
  var newMarkup = $(markup({
    messageGranularity: this.messageGranularity_,
    packetSpec: this.packetSpec_,
    enabledEncodingsHash: this.enabledEncodingsHash_
  }));
  this.rootDiv_.html(newMarkup);
  this.bindElements_();
  this.updateFields_();
  this.updateRemoveButtonVisibility_();
  NetSimLogPanel.adjustHeaderColumnWidths(this.rootDiv_);
  NetSimEncodingControl.hideRowsByEncoding(this.rootDiv_, Object.keys(this.enabledEncodingsHash_));
};

/**
 * Put this packet in a mode where it's not editable.  Instead, it will drain
 * its binary at the current bitrate and call the given callback when all
 * of the binary has been drained/"sent"
 * @param {NetSimLocalClientNode} myNode
 */
NetSimPacketEditor.prototype.beginSending = function (myNode) {
  this.isPlayingSendAnimation_ = true;
  this.originalBinary_ = this.getPacketBinary().substr(0, this.maxPacketSize_);
  this.sendAnimationIndex_ = 0;
  this.myNode_ = myNode;

  // Finish now if the packet is empty.
  if (0 === this.originalBinary_.length) {
    this.finishSending();
  }
};

/**
 * Kick off the async send-to-remote operation for the original packet binary.
 * When it's done, remove this now-empty packet.
 */
NetSimPacketEditor.prototype.finishSending = function () {
  this.isPlayingSendAnimation_ = false;
  this.isSendingPacketToRemote_ = true;
  this.myNode_.sendMessage(this.originalBinary_, (function () {
    this.isSendingPacketToRemote_ = false;
    this.doneSendingCallback_(this);
  }).bind(this));
};

/**
 * @returns {boolean} TRUE if this packet is currently being sent.
 */
NetSimPacketEditor.prototype.isSending = function () {
  return this.isPlayingSendAnimation_ || this.isSendingPacketToRemote_;
};

/**
 * Packet Editor tick is called (manually by the NetSimSendPanel) to advance
 * its sending animation.
 * @param {RunLoop.Clock} clock
 */
NetSimPacketEditor.prototype.tick = function (clock) {
  // Before we start animating, or after we are done animating, do nothing.
  if (!this.isPlayingSendAnimation_ || this.isSendingPacketToRemote_) {
    return;
  }

  if (!this.lastBitSentTime_) {
    this.lastBitSentTime_ = clock.time;
  }

  // How many characters should be consumed this tick?
  var msPerBit = 1000 * (1 / this.bitRate_);
  var maxBitsToSendThisTick = Infinity;
  if (msPerBit > 0) {
    var msSinceLastBitConsumed = clock.time - this.lastBitSentTime_;
    maxBitsToSendThisTick = Math.floor(msSinceLastBitConsumed / msPerBit);
  }

  if (maxBitsToSendThisTick > 0) {
    this.lastBitSentTime_ = clock.time;
    this.sendAnimationIndex_ += maxBitsToSendThisTick;
    this.updateForAnimation_();
    if (this.sendAnimationIndex_ >= this.originalBinary_.length) {
      this.finishSending();
    }
  }
};

/**
 * Focus event handler.  If the target element has a 'watermark' class then
 * it contains text we intend to clear before any editing occurs.  This
 * handler clears that text and removes the class.
 * @param focusEvent
 */
var removeWatermark = function removeWatermark(focusEvent) {
  var target = $(focusEvent.target);
  if (target.hasClass('watermark')) {
    target.val('');
    target.removeClass('watermark');
  }
};

/**
 * Helper method for determining if a given keyPress event represents a
 * CLEAN enter press. As in, one without the Shift or Control modifiers.
 * @param {Event} jqueryEvent
 * @returns {boolean} true iff the given event represents a clean enter
 */
var isUnmodifiedEnterPress = function isUnmodifiedEnterPress(jqueryEvent) {
  return jqueryEvent.keyCode === KeyCodes.ENTER && !(jqueryEvent.ctrlKey || jqueryEvent.shiftKey);
};

/**
 * Creates a keyPress handler that allows only the given characters to be
 * typed into a text field.
 * @param {RegExp} whitelistRegex
 * @return {function} appropriate to pass to .keypress()
 */
var makeKeypressHandlerWithWhitelist = function makeKeypressHandlerWithWhitelist(whitelistRegex) {
  /**
   * A keyPress handler that blocks all visible characters except those
   * matching the whitelist.  Passes through invisible characters (backspace,
   * delete) and control combinations (copy, paste).
   *
   * @param keyEvent
   * @returns {boolean} - Whether to propagate this event.  Should return
   *          FALSE if we handle the event and don't want to pass it on, TRUE
   *          if we are not handling the event.
   */
  return function (keyEvent) {

    // Don't block control combinations (copy, paste, etc.)
    if (keyEvent.metaKey || keyEvent.ctrlKey) {
      return true;
    }

    // Don't block invisible characters; we want to allow backspace, delete, etc.
    if (keyEvent.which < KeyCodes.SPACE || keyEvent.which >= KeyCodes.DELETE) {
      return true;
    }

    // At this point, if the character doesn't match, we should block it.
    var key = String.fromCharCode(keyEvent.which);
    if (!whitelistRegex.test(key)) {
      keyEvent.preventDefault();
      return false;
    }
  };
};

/**
 * Generate a jQuery-appropriate keyup handler for a text field.
 * Grabs the new value of the text field, runs it through the provided
 * converter function, sets the result on the SendWidget's internal state
 * and triggers a field update on the widget that skips the field being edited.
 *
 * Similar to makeBlurHandler, but does not update the field currently
 * being edited.
 *
 * @param {string} fieldName - name of internal state field that the text
 *        field should update.
 * @param {function} converterFunction - Takes the text field's value and
 *        converts it to a format appropriate to the internal state field.
 * @param {number} [fieldWidth] - maximum number of bits for field, passed
 *        through as second argument to converter function.
 * @returns {function} that can be passed to $.keyup()
 */
NetSimPacketEditor.prototype.makeKeyupHandler = function (fieldName, converterFunction, fieldWidth) {
  return (function (jqueryEvent) {
    var newValue = converterFunction(jqueryEvent.target.value, fieldWidth);
    if (typeof newValue === 'string' || !isNaN(newValue)) {
      this[fieldName] = newValue;
      this.updateFields_(jqueryEvent.target);
    }
  }).bind(this);
};

/**
 * Generate a jQuery-appropriate blur handler for a text field.
 * Grabs the new value of the text field, runs it through the provided
 * converter function, sets the result on the SendWidget's internal state
 * and triggers a full field update of the widget (including the field that was
 * just edited).
 *
 * Similar to makeKeyupHandler, but also updates the field that was
 * just edited.
 *
 * @param {string} fieldName - name of internal state field that the text
 *        field should update.
 * @param {function} converterFunction - Takes the text field's value and
 *        converts it to a format appropriate to the internal state field.
 * @param {number} [fieldWidth] - maximum number of bits for field, passed
 *        through as second argument to converter function.
 * @returns {function} that can be passed to $.blur()
 */
NetSimPacketEditor.prototype.makeBlurHandler = function (fieldName, converterFunction, fieldWidth) {
  return (function (jqueryEvent) {
    var newValue = converterFunction(jqueryEvent.target.value, fieldWidth);
    if (typeof newValue === 'number' && isNaN(newValue)) {
      newValue = converterFunction('0');
    }
    this[fieldName] = newValue;
    this.updateFields_();
  }).bind(this);
};

/**
 * Specification for an encoding row in the editor, which designates character
 * whitelists to limit typing in certain fields, and rules for intepreting the
 * field from binary.
 * @typedef {Object} RowType
 * @property {EncodingType} typeName
 * @property {RegExp} addressFieldAllowedCharacters - Whitelist of characters
 *           that may be typed into an address field.
 * @property {function} addressFieldConversion - How to convert from binary
 *           to an address string in this row when the binary is updated.
 * @property {RegExp} shortNumberAllowedCharacters - Whitelist of characters
 *           that may be typed into a header field.
 * @property {function} shortNumberConversion - How to convert from binary
 *           to a header value in this row when the binary is updated.
 * @property {RegExp} messageAllowedCharacters - Whitelist of characters
 *           that may be typed into the message field.
 * @property {function} messageConversion - How to convert from binary to
 *           the message value in this row when the binary is updated.
 */

/**
 * Convert binary to an integer, intentionally limiting the binary width so
 * that overflow can occur.
 * @param {string} binaryString (interpreted as unsigned)
 * @param {number} maxWidth in bits
 * @returns {number}
 */
var truncatedBinaryToInt = function truncatedBinaryToInt(binaryString, maxWidth) {
  return binaryToInt(binaryString.substr(-maxWidth));
};

/**
 * Convert ABs to an integer, intentionally limiting the width so that overflow
 * can occur (analagous to truncatedBinaryToInt).  A is treated as zero, B as
 * one.
 * @param {string} abString
 * @param {number} maxWidth in bits
 * @returns {number}
 */
var truncatedABToInt = function truncatedABToInt(abString, maxWidth) {
  return abToInt(abString.substr(-maxWidth));
};

/**
 * Convert a hexadecimal string to a single integer, intentionally limiting
 * the bit-width to so that overflow can occur.
 * @param {string} hexString
 * @param {number} maxWidth in bits
 * @returns {number}
 */
var truncatedHexToInt = function truncatedHexToInt(hexString, maxWidth) {
  return truncatedBinaryToInt(hexToBinary(hexString), maxWidth);
};

/**
 * Convert a decimal string to an integer, intentionally limiting the bit-width
 * so that overflow can occur.
 * @param {string} decimalString
 * @param {number} maxWidth in bits
 * @returns {number}
 */
var truncatedDecimalToInt = function truncatedDecimalToInt(decimalString, maxWidth) {
  return truncatedBinaryToInt(intToBinary(parseInt(decimalString, 10)), maxWidth);
};

/**
 * Convert an address string to binary and back using the level's address
 * format, which coerces it to the exact format the level wants.
 * @param {string} originalString
 * @returns {string}
 */
var cleanAddressString = function cleanAddressString(originalString) {
  var level = NetSimGlobals.getLevelConfig();
  var binaryForm = DataConverters.addressStringToBinary(originalString, level.addressFormat);
  return DataConverters.binaryToAddressString(binaryForm, level.addressFormat);
};

/**
 * Helper method to filter this.ROW_TYPES by enabled encodings
 * @private
 * @returns {RowType[]}
 */
NetSimPacketEditor.prototype.getEnabledRowTypes_ = function () {
  return this.ROW_TYPES.filter(function (rowType) {
    return this.isEncodingEnabled_(rowType.typeName);
  }, this);
};

/**
 * Get relevant elements from the page and bind them to local variables.
 * @private
 */
NetSimPacketEditor.prototype.bindElements_ = function () {
  var level = NetSimGlobals.getLevelConfig();
  var encoder = new Packet.Encoder(level.addressFormat, level.packetCountBitWidth, this.packetSpec_);
  var rootDiv = this.rootDiv_;

  this.getEnabledRowTypes_().forEach(function (rowType) {
    var tr = rootDiv.find('tr.' + rowType.typeName);
    this.ui_[rowType.typeName] = {};
    var rowFields = this.ui_[rowType.typeName];

    // We attach focus (sometimes) to clear the field watermark, if present
    // We attach keypress to block certain characters
    // We attach keyup to live-update the widget as the user types
    // We attach blur to reformat the edited field when the user leaves it,
    //    and to catch non-keyup cases like copy/paste.

    this.packetSpec_.forEach(function (fieldSpec) {
      /** @type {Packet.HeaderType} */
      var fieldName = fieldSpec;
      /** @type {number} */
      var fieldWidth = encoder.getFieldBitWidth(fieldName);

      var allowedCharacterFunction, conversionFunction;
      if (Packet.isAddressField(fieldName)) {
        allowedCharacterFunction = rowType.addressFieldAllowedCharacters;
        conversionFunction = rowType.addressFieldConversion;
      } else {
        allowedCharacterFunction = rowType.shortNumberAllowedCharacters;
        conversionFunction = rowType.shortNumberConversion;
      }

      rowFields[fieldName] = tr.find('input.' + fieldName);
      rowFields[fieldName].keypress(makeKeypressHandlerWithWhitelist(allowedCharacterFunction));
      rowFields[fieldName].keyup(this.makeKeyupHandler(fieldName, conversionFunction, fieldWidth));
      rowFields[fieldName].blur(this.makeBlurHandler(fieldName, conversionFunction, fieldWidth));
    }, this);

    rowFields.message = tr.find('textarea.message');
    rowFields.message.focus(removeWatermark);
    rowFields.message.keypress(makeKeypressHandlerWithWhitelist(rowType.messageAllowedCharacters));
    rowFields.message.keydown((function (jqueryEvent) {
      if (isUnmodifiedEnterPress(jqueryEvent)) {
        this.enterKeyPressedCallback_(jqueryEvent);
      }
    }).bind(this));
    rowFields.message.keyup(this.makeKeyupHandler('message', rowType.messageConversion));
    rowFields.message.blur(this.makeBlurHandler('message', rowType.messageConversion));
  }, this);

  this.removePacketButton_ = rootDiv.find('.remove-packet-button');
  this.removePacketButton_.click(this.onRemovePacketButtonClick_.bind(this));
  this.bitCounter_ = rootDiv.find('.bit-counter');
};

/**
 * Special update method called during send animation that changes the editor
 * display to show each field left-truncated at an appropriate amount for the
 * simulated send progress.
 *
 * This works differently for different fields:
 *  - Binary and A/B fields send a single bit at a time.
 *  - Hex sends a single hex digit at a time, but at the correct slower rate.
 *  - Decimal and ASCII send one chunk at a time, which depends on the current
 *    chunk size, and is adjusted to the correct slower rate as well.  For
 *    ASCII this maps to one character at a time.  For decimal, it's one
 *    whitespace-delimited number.
 *
 * This avoids the jumbled effect of reinterpreting nonbinary fields using
 * misaligned binary, and communicates in a visual way that it takes longer to
 * send a single character than it does to send a single bit.
 *
 * This method is also designed to send the packet header fields in sequence
 * before sending the packet body.  Body binary is never seen in the header
 * fields, each field is treated as an independent space.
 * @private
 */
NetSimPacketEditor.prototype.updateForAnimation_ = function () {
  var chunkSize = this.currentChunkSize_;
  var liveFields = [];

  // There may be potential for performance optimization here, but it's not
  // particularly high on our perf list right now.

  var level = NetSimGlobals.getLevelConfig();
  var encoder = new Packet.Encoder(level.addressFormat, level.packetCountBitWidth, this.packetSpec_);

  var fieldStart = 0;

  this.packetSpec_.forEach(function (fieldSpec) {
    /** @type {Packet.HeaderType} */
    var fieldName = fieldSpec;
    /** @type {number} */
    var fieldWidth = encoder.getFieldBitWidth(fieldName);

    if (this.sendAnimationIndex_ < fieldStart + fieldWidth) {
      // Either we haven't reached this field yet or we're currently animating
      // through it; don't do anything to the more complex fields, and animate
      // the binary appropriately.
      var fieldBinary = this.originalBinary_.substr(fieldStart, fieldWidth);
      var truncatedBits = Math.max(0, this.sendAnimationIndex_ - fieldStart);

      if (this.isEncodingEnabled_(EncodingType.A_AND_B)) {
        liveFields.push({
          inputElement: this.ui_[EncodingType.A_AND_B][fieldName],
          newValue: binaryToAB(fieldBinary).substr(truncatedBits)
        });
      }

      if (this.isEncodingEnabled_(EncodingType.BINARY)) {
        liveFields.push({
          inputElement: this.ui_[EncodingType.BINARY][fieldName],
          newValue: fieldBinary.substr(truncatedBits)
        });
      }

      if (this.isEncodingEnabled_(EncodingType.HEXADECIMAL)) {
        var truncatedHexDigits = Math.floor(truncatedBits / 4);
        liveFields.push({
          inputElement: this.ui_[EncodingType.HEXADECIMAL][fieldName],
          newValue: binaryToHex(fieldBinary).substr(truncatedHexDigits)
        });
      }
    } else {
      // We're past this field - it should be blank
      if (this.isEncodingEnabled_(EncodingType.A_AND_B)) {
        liveFields.push({
          inputElement: this.ui_[EncodingType.A_AND_B][fieldName],
          newValue: ''
        });
      }

      if (this.isEncodingEnabled_(EncodingType.BINARY)) {
        liveFields.push({
          inputElement: this.ui_[EncodingType.BINARY][fieldName],
          newValue: ''
        });
      }

      if (this.isEncodingEnabled_(EncodingType.HEXADECIMAL)) {
        liveFields.push({
          inputElement: this.ui_[EncodingType.HEXADECIMAL][fieldName],
          newValue: ''
        });
      }

      if (this.isEncodingEnabled_(EncodingType.DECIMAL)) {
        liveFields.push({
          inputElement: this.ui_[EncodingType.DECIMAL][fieldName],
          newValue: ''
        });
      }

      if (this.isEncodingEnabled_(EncodingType.ASCII)) {
        liveFields.push({
          inputElement: this.ui_[EncodingType.ASCII][fieldName],
          newValue: ''
        });
      }
    }

    // Advance to the next field
    fieldStart += fieldWidth;
  }, this);

  var bodyBinary = this.originalBinary_.substr(fieldStart);
  var truncatedBits = Math.max(0, this.sendAnimationIndex_ - fieldStart);
  var truncatedChunks = Math.floor(truncatedBits / chunkSize);
  var partialBinaryAtChunkSize = bodyBinary.substr(truncatedChunks * chunkSize);

  if (this.isEncodingEnabled_(EncodingType.A_AND_B)) {
    liveFields.push({
      inputElement: this.ui_[EncodingType.A_AND_B].message,
      newValue: formatAB(binaryToAB(bodyBinary).substr(truncatedBits), chunkSize, -truncatedBits),
      watermark: netsimMsg.a_and_b()
    });
  }

  if (this.isEncodingEnabled_(EncodingType.BINARY)) {
    liveFields.push({
      inputElement: this.ui_[EncodingType.BINARY].message,
      newValue: formatBinary(bodyBinary.substr(truncatedBits), chunkSize, -truncatedBits),
      watermark: netsimMsg.binary()
    });
  }

  if (this.isEncodingEnabled_(EncodingType.HEXADECIMAL)) {
    var truncatedHexDigits = Math.floor(truncatedBits / 4);
    liveFields.push({
      inputElement: this.ui_[EncodingType.HEXADECIMAL].message,
      newValue: formatHex(binaryToHex(bodyBinary).substr(truncatedHexDigits), chunkSize, -truncatedHexDigits),
      watermark: netsimMsg.hexadecimal()
    });
  }

  if (this.isEncodingEnabled_(EncodingType.DECIMAL)) {
    liveFields.push({
      inputElement: this.ui_[EncodingType.DECIMAL].message,
      newValue: alignDecimal(binaryToDecimal(partialBinaryAtChunkSize, chunkSize)),
      watermark: netsimMsg.decimal()
    });
  }

  if (this.isEncodingEnabled_(EncodingType.ASCII)) {
    liveFields.push({
      inputElement: this.ui_[EncodingType.ASCII].message,
      newValue: binaryToAscii(partialBinaryAtChunkSize, chunkSize),
      watermark: netsimMsg.ascii()
    });
  }

  liveFields.forEach(function (field) {
    if (field.watermark && field.newValue === '') {
      field.inputElement.val(field.watermark);
      field.inputElement.addClass('watermark');
    } else {
      field.inputElement.val(field.newValue);
      field.inputElement.removeClass('watermark');
    }
  });
};

/**
 * Update send widget display
 * @param {HTMLElement} [skipElement] - A field to skip while updating,
 *        because we don't want to transform content out from under the
 *        user's cursor.
 * @private
 */
NetSimPacketEditor.prototype.updateFields_ = function (skipElement) {
  var chunkSize = this.currentChunkSize_;
  var liveFields = [];

  var level = NetSimGlobals.getLevelConfig();
  var encoder = new Packet.Encoder(level.addressFormat, level.packetCountBitWidth, this.packetSpec_);

  this.packetSpec_.forEach(function (fieldSpec) {
    /** @type {Packet.HeaderType} */
    var fieldName = fieldSpec;
    /** @type {number} */
    var fieldWidth = encoder.getFieldBitWidth(fieldName);

    var abConverter, binaryConverter, hexConverter, decimalConverter, asciiConverter;
    if (Packet.isAddressField(fieldName)) {
      abConverter = function (addressString) {
        return DataConverters.binaryToAB(DataConverters.addressStringToBinary(addressString, level.addressFormat));
      };
      binaryConverter = function (addressString) {
        return DataConverters.formatBinaryForAddressHeader(DataConverters.addressStringToBinary(addressString, level.addressFormat), level.addressFormat);
      };
      hexConverter = function (addressString) {
        return DataConverters.binaryToHex(DataConverters.addressStringToBinary(addressString, level.addressFormat));
      };
      decimalConverter = cleanAddressString;
      asciiConverter = cleanAddressString;
    } else {
      abConverter = intToAB;
      binaryConverter = intToBinary;
      hexConverter = intToHex;
      decimalConverter = function (val) {
        return val.toString(10);
      };
      asciiConverter = decimalConverter;
    }

    if (this.isEncodingEnabled_(EncodingType.A_AND_B)) {
      liveFields.push({
        inputElement: this.ui_[EncodingType.A_AND_B][fieldName],
        newValue: abConverter(this[fieldName], fieldWidth)
      });
    }

    if (this.isEncodingEnabled_(EncodingType.BINARY)) {
      liveFields.push({
        inputElement: this.ui_[EncodingType.BINARY][fieldName],
        newValue: binaryConverter(this[fieldName], fieldWidth)
      });
    }

    if (this.isEncodingEnabled_(EncodingType.HEXADECIMAL)) {
      liveFields.push({
        inputElement: this.ui_[EncodingType.HEXADECIMAL][fieldName],
        newValue: hexConverter(this[fieldName], Math.ceil(fieldWidth / 4))
      });
    }

    if (this.isEncodingEnabled_(EncodingType.DECIMAL)) {
      liveFields.push({
        inputElement: this.ui_[EncodingType.DECIMAL][fieldName],
        newValue: decimalConverter(this[fieldName], fieldWidth)
      });
    }

    if (this.isEncodingEnabled_(EncodingType.ASCII)) {
      liveFields.push({
        inputElement: this.ui_[EncodingType.ASCII][fieldName],
        newValue: asciiConverter(this[fieldName], fieldWidth)
      });
    }
  }, this);

  if (this.isEncodingEnabled_(EncodingType.A_AND_B)) {
    liveFields.push({
      inputElement: this.ui_[EncodingType.A_AND_B].message,
      newValue: formatAB(binaryToAB(this.message), chunkSize),
      watermark: netsimMsg.a_and_b()
    });
  }

  if (this.isEncodingEnabled_(EncodingType.BINARY)) {
    liveFields.push({
      inputElement: this.ui_[EncodingType.BINARY].message,
      newValue: formatBinary(this.message, chunkSize),
      watermark: netsimMsg.binary()
    });
  }

  if (this.isEncodingEnabled_(EncodingType.HEXADECIMAL)) {
    liveFields.push({
      inputElement: this.ui_[EncodingType.HEXADECIMAL].message,
      newValue: formatHex(binaryToHex(this.message), chunkSize),
      watermark: netsimMsg.hexadecimal()
    });
  }

  if (this.isEncodingEnabled_(EncodingType.DECIMAL)) {
    liveFields.push({
      inputElement: this.ui_[EncodingType.DECIMAL].message,
      newValue: alignDecimal(binaryToDecimal(this.message, chunkSize)),
      watermark: netsimMsg.decimal()
    });
  }

  if (this.isEncodingEnabled_(EncodingType.ASCII)) {
    liveFields.push({
      inputElement: this.ui_[EncodingType.ASCII].message,
      newValue: binaryToAscii(this.message, chunkSize),
      watermark: netsimMsg.ascii()
    });
  }

  liveFields.forEach(function (field) {
    if (field.inputElement[0] !== skipElement) {
      if (field.watermark && field.newValue === '') {
        field.inputElement.val(field.watermark);
        field.inputElement.addClass('watermark');
      } else {
        field.inputElement.val(field.newValue);
        field.inputElement.removeClass('watermark');
      }
    }
  });

  this.updateBitCounter();
  this.contentChangeCallback_();
};

/**
 * If there's only one packet, applies "display: none" to the button so the
 * last packet can't be removed.  Otherwise, clears the CSS property override.
 * @private
 */
NetSimPacketEditor.prototype.updateRemoveButtonVisibility_ = function () {
  this.removePacketButton_.css('display', this.packetCount === 1 ? 'none' : '');
};

/**
 * Produces a single binary string in the current packet format, based
 * on the current state of the widget (content of its internal fields).
 * @returns {string} - binary representation of packet
 * @private
 */
NetSimPacketEditor.prototype.getPacketBinary = function () {
  var level = NetSimGlobals.getLevelConfig();
  var encoder = new Packet.Encoder(level.addressFormat, level.packetCountBitWidth, this.packetSpec_);
  return encoder.concatenateBinary(encoder.makeBinaryHeaders({
    toAddress: this.toAddress,
    fromAddress: this.fromAddress,
    packetIndex: this.packetIndex,
    packetCount: this.packetCount
  }), this.message);
};

/**
 * Sets editor fields from a complete packet binary, according to
 * the configured header specification.
 * @param {string} rawBinary
 */
NetSimPacketEditor.prototype.setPacketBinary = function (rawBinary) {
  var packet = new Packet(this.packetSpec_, rawBinary);

  if (this.specContainsHeader_(Packet.HeaderType.TO_ADDRESS)) {
    this.toAddress = packet.getHeaderAsAddressString(Packet.HeaderType.TO_ADDRESS);
  }

  if (this.specContainsHeader_(Packet.HeaderType.FROM_ADDRESS)) {
    this.fromAddress = packet.getHeaderAsAddressString(Packet.HeaderType.FROM_ADDRESS);
  }

  if (this.specContainsHeader_(Packet.HeaderType.PACKET_INDEX)) {
    this.packetIndex = packet.getHeaderAsInt(Packet.HeaderType.PACKET_INDEX);
  }

  if (this.specContainsHeader_(Packet.HeaderType.PACKET_COUNT)) {
    this.packetCount = packet.getHeaderAsInt(Packet.HeaderType.PACKET_COUNT);
  }

  this.message = packet.getBodyAsBinary();

  // Re-render all encodings
  this.updateFields_();
};

/**
 * @param {Packet.HeaderType} headerKey
 * @returns {boolean}
 * @private
 */
NetSimPacketEditor.prototype.specContainsHeader_ = function (headerKey) {
  return this.packetSpec_.some(function (headerSpec) {
    return headerSpec === headerKey;
  });
};

/**
 * Get just the first bit of the packet binary if it exists, for
 * single-bit sending mode.
 * @returns {string|undefined} a single bit if it exists, as "0" or "1",
 * or undefined if none does.
 */
NetSimPacketEditor.prototype.getFirstBit = function () {
  var binary = this.getPacketBinary();
  return binary.length > 0 ? binary.substr(0, 1) : undefined;
};

/** @param {number} fromAddress */
NetSimPacketEditor.prototype.setFromAddress = function (fromAddress) {
  this.fromAddress = fromAddress;
  this.updateFields_();
};

/** @param {number} packetIndex */
NetSimPacketEditor.prototype.setPacketIndex = function (packetIndex) {
  this.packetIndex = packetIndex;
  this.updateFields_();
};

/** @param {number} packetCount */
NetSimPacketEditor.prototype.setPacketCount = function (packetCount) {
  this.packetCount = packetCount;
  this.updateFields_();
  this.updateRemoveButtonVisibility_();
};

/** @param {number} maxPacketSize */
NetSimPacketEditor.prototype.setMaxPacketSize = function (maxPacketSize) {
  this.maxPacketSize_ = maxPacketSize;
  this.updateBitCounter();
};

/**
 * Show or hide parts of the send UI based on the currently selected encoding
 * mode.
 * @param {EncodingType[]} newEncodings
 */
NetSimPacketEditor.prototype.setEncodings = function (newEncodings) {
  this.enabledEncodingsHash_ = NetSimEncodingControl.encodingsAsHash(newEncodings);
  NetSimEncodingControl.hideRowsByEncoding(this.rootDiv_, newEncodings);
  this.render();
};

/**
 * Helper method that checks this.enabledEncodingsHash_ to see if the given
 * encoding is enabled
 * @param {EncodingType} queryEncoding
 * @returns {boolean} whether or not the given encoding is enabled
 * @private
 */
NetSimPacketEditor.prototype.isEncodingEnabled_ = function (queryEncoding) {
  return this.enabledEncodingsHash_[queryEncoding] === true;
};

/**
 * Change how data is interpreted and formatted by this component, triggering
 * an update of all input fields.
 * @param {number} newChunkSize
 */
NetSimPacketEditor.prototype.setChunkSize = function (newChunkSize) {
  this.currentChunkSize_ = newChunkSize;
  this.updateFields_();
};

/**
 * Change local device bitrate which changes send animation speed.
 * @param {number} newBitRate in bits per second
 */
NetSimPacketEditor.prototype.setBitRate = function (newBitRate) {
  this.bitRate_ = newBitRate;
};

/**
 * Update the visual state of the bit counter to reflect the current
 * message binary length and maximum packet size.
 */
NetSimPacketEditor.prototype.updateBitCounter = function () {
  var size = this.getPacketBinary().length;
  var maxSize = this.maxPacketSize_;
  this.bitCounter_.html(netsimMsg.bitCounter({
    x: size,
    y: maxSize
  }));

  this.bitCounter_.toggleClass('oversized', size > this.maxPacketSize_);
};

/**
 * Handler for the "Remove Packet" button. Calls handler provided by
 * parent, passing self, so that parent can remove this packet.
 * @param {Event} jQueryEvent
 * @private
 */
NetSimPacketEditor.prototype.onRemovePacketButtonClick_ = function (jQueryEvent) {
  var thisButton = $(jQueryEvent.target);
  // We also check parent elements here, because this button uses a font-awesome
  // glyph that can receive the event instead of the actual button.
  if (thisButton.is('[disabled]') || thisButton.parents().is('[disabled]')) {
    return;
  }

  this.removePacketCallback_(this);
};

/**
 * Remove the first bit of the packet binary, used when sending one bit
 * at a time.
 */
NetSimPacketEditor.prototype.consumeFirstBit = function () {
  this.setPacketBinary(this.getPacketBinary().substr(1));
};

},{"../constants":"/home/ubuntu/staging/apps/build/js/constants.js","../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./DataConverters":"/home/ubuntu/staging/apps/build/js/netsim/DataConverters.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimEncodingControl":"/home/ubuntu/staging/apps/build/js/netsim/NetSimEncodingControl.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimLogPanel":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogPanel.js","./NetSimPacketEditor.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimPacketEditor.html.ejs","./Packet":"/home/ubuntu/staging/apps/build/js/netsim/Packet.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimPacketEditor.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
  var i18n = require('./locale');
  var NetSimConstants = require('./NetSimConstants');
  var NetSimUtils = require('./NetSimUtils');
  var Packet = require('./Packet');

  var EncodingType = NetSimConstants.EncodingType;
  var MessageGranularity = NetSimConstants.MessageGranularity;
  var PacketUIColumnType = NetSimConstants.PacketUIColumnType;

  var getEncodingLabel = NetSimUtils.getEncodingLabel;
  var forEachEnumValue = NetSimUtils.forEachEnumValue;

  /**
  * @name enabledEncodingsHash
  * @type {Object}
  */

  function isEncodingEnabled(queryEncoding) {
    return enabledEncodingsHash[queryEncoding] === true;
  }

  /** @type {Packet.HeaderType[]} */
  var headerFields = packetSpec;

  /** @type {boolean} */
  var showToAddress = headerFields.indexOf(Packet.HeaderType.TO_ADDRESS) > -1;

  /** @type {boolean} */
  var showFromAddress = headerFields.indexOf(Packet.HeaderType.FROM_ADDRESS) > -1;

  /** @type {boolean} */
  var showPacketInfo = headerFields.indexOf(Packet.HeaderType.PACKET_INDEX) > -1 &&
      headerFields.indexOf(Packet.HeaderType.PACKET_COUNT) > -1;

  /** @type {boolean} */
  var usePacketGranularity = (messageGranularity === MessageGranularity.PACKETS);

  /**
   * Write the table header to the page, with the appropriate packet-header columns enabled.
   */
  function tableHeader() {
    ; buf.push('\n      <thead>\n        <tr>\n          <th nowrap class="', escape((46,  PacketUIColumnType.ENCODING_LABEL )), '"></th>\n          ');47; if (showToAddress) { ; buf.push('\n          <th nowrap class="', escape((48,  PacketUIColumnType.TO_ADDRESS )), '">', escape((48,  i18n.to() )), '</th>\n          ');49; } ; buf.push('\n          ');50; if (showFromAddress) { ; buf.push('\n          <th nowrap class="', escape((51,  PacketUIColumnType.FROM_ADDRESS )), '">', escape((51,  i18n.from() )), '</th>\n          ');52; } ; buf.push('\n          ');53; if (showPacketInfo) { ; buf.push('\n          <th nowrap class="', escape((54,  PacketUIColumnType.PACKET_INFO )), '">', escape((54,  i18n.packet() )), '</th>\n          ');55; } ; buf.push('\n          <th class="', escape((56,  PacketUIColumnType.MESSAGE )), '">\n            ', escape((57,  i18n.message() )), '\n            <div class="packet-controls">\n              <span class="netsim-button secondary remove-packet-button" title="', escape((59,  i18n.removePacket() )), '"><i class="fa fa-times"></i></span>\n            </div>\n          </th>\n        </tr>\n      </thead>\n    ');64;
  }

  /**
   * Write a table row to the page for the given data encoding.
   * @param {EncodingType} encodingType
   */
  function editorRow(encodingType) {
    ; buf.push('\n      <tr class="', escape((73,  encodingType )), '">\n        <th nowrap class="', escape((74,  PacketUIColumnType.ENCODING_LABEL )), '">', escape((74,  getEncodingLabel(encodingType) )), '</th>\n        ');75; if (showToAddress) { ; buf.push('\n        <td nowrap class="', escape((76,  PacketUIColumnType.TO_ADDRESS )), '"><input type="text" class="', escape((76,  Packet.HeaderType.TO_ADDRESS )), '" /></td>\n        ');77; } ; buf.push('\n        ');78; if (showFromAddress) { ; buf.push('\n        <td nowrap class="', escape((79,  PacketUIColumnType.FROM_ADDRESS )), '"><input type="text" readonly class="', escape((79,  Packet.HeaderType.FROM_ADDRESS )), '" /></td>\n        ');80; } ; buf.push('\n        ');81; if (showPacketInfo) { ; buf.push('\n        <td nowrap class="', escape((82,  PacketUIColumnType.PACKET_INFO )), '"><input type="text" readonly class="', escape((82,  Packet.HeaderType.PACKET_INDEX )), '" />', escape((82,  i18n._of_() )), '<input type="text" readonly class="', escape((82,  Packet.HeaderType.PACKET_COUNT )), '" /></td>\n        ');83; } ; buf.push('\n        <td class="', escape((84,  PacketUIColumnType.MESSAGE )), '"><div><textarea class="message"></textarea></div></td>\n      </tr>\n    ');86;
  }
; buf.push('\n<table>\n  ');90;
    // Only write the header row if we are using packets
    if (usePacketGranularity) {
      tableHeader();
    }
  ; buf.push('\n  <tbody>\n    ');97;
      // Write a body row for every packet encoding; we hide some of them post-render.
      forEachEnumValue(EncodingType, function (encodingType) {
        if (isEncodingEnabled(encodingType)) {
          editorRow(encodingType);
        }
      });
    ; buf.push('\n  </tbody>\n</table>\n\n');108; if (usePacketGranularity) { ; buf.push('\n  <div class="bit-counter"></div>\n');110; } ; buf.push('\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js","./Packet":"/home/ubuntu/staging/apps/build/js/netsim/Packet.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimMyDeviceTab.js":[function(require,module,exports){
/**
 * @overview UI controller for the "My Device" tab in the left column.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var markup = require('./NetSimMyDeviceTab.html.ejs');
var NetSimBitRateControl = require('./NetSimBitRateControl');
var NetSimPulseRateControl = require('./NetSimPulseRateControl');
var NetSimChunkSizeControl = require('./NetSimChunkSizeControl');
var NetSimEncodingControl = require('./NetSimEncodingControl');
var NetSimMetronome = require('./NetSimMetronome');
var NetSimGlobals = require('./NetSimGlobals');

/**
 * Generator and controller for "My Device" tab.
 * @param {jQuery} rootDiv
 * @param {RunLoop} runLoop
 * @param {Object} callbacks
 * @param {function} callbacks.chunkSizeChangeCallback
 * @param {function} callbacks.bitRateChangeCallback
 * @param {function} callbacks.encodingChangeCallback
 * @constructor
 */
var NetSimMyDeviceTab = module.exports = function (rootDiv, runLoop, callbacks) {
  /**
   * Component root, which we fill whenever we call render()
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = rootDiv;

  /**
   * @type {RunLoop}
   * @private
   */
  this.runLoop_ = runLoop;

  /**
   * Frequency of metronome pulses, in pulses per second
   * @type {number}
   * @private
   */
  this.bitsPerSecond_ = 1;

  /**
   * @type {function}
   * @private
   */
  this.chunkSizeSliderChangeCallback_ = callbacks.chunkSizeChangeCallback;

  /**
   * @type {function}
   * @private
   */
  this.bitRateChangeCallback_ = callbacks.bitRateChangeCallback;

  /**
   * @type {function}
   * @private
   */
  this.encodingChangeCallback_ = callbacks.encodingChangeCallback;

  /**
   * @type {NetSimMetronome}
   * @private
   */
  this.metronome_ = null;

  /**
   * @type {NetSimPulseRateControl}
   * @private
   */
  this.pulseRateControl_ = null;

  /**
   * @type {NetSimBitRateControl}
   * @private
   */
  this.bitRateControl_ = null;

  /**
   * @type {NetSimChunkSizeControl}
   * @private
   */
  this.chunkSizeControl_ = null;

  /**
   * @type {NetSimEncodingControl}
   * @private
   */
  this.encodingControl_ = null;

  this.render();
};

/**
 * Fill the root div with new elements reflecting the current state
 */
NetSimMyDeviceTab.prototype.render = function () {
  var levelConfig = NetSimGlobals.getLevelConfig();

  var renderedMarkup = $(markup({
    level: levelConfig
  }));
  this.rootDiv_.html(renderedMarkup);

  if (levelConfig.showMetronome) {
    this.metronome_ = new NetSimMetronome(this.rootDiv_.find('.metronome'), this.runLoop_);
    this.metronome_.setFrequency(this.bitsPerSecond_);
  }

  if (levelConfig.showPulseRateSlider) {
    this.pulseRateControl_ = new NetSimPulseRateControl(this.rootDiv_.find('.pulse-rate'), 1 / this.bitsPerSecond_, (function (secondsPerBit) {
      this.bitRateChangeCallback_(1 / secondsPerBit);
    }).bind(this));
  }

  if (levelConfig.showBitRateControl) {
    this.bitRateControl_ = new NetSimBitRateControl(this.rootDiv_.find('.bitrate'), this.bitsPerSecond_, this.bitRateChangeCallback_);
    if (levelConfig.lockBitRateControl) {
      this.bitRateControl_.disable();
    }
  }

  if (levelConfig.showChunkSizeControl) {
    this.chunkSizeControl_ = new NetSimChunkSizeControl(this.rootDiv_.find('.chunk-size'), this.chunkSizeSliderChangeCallback_);
    if (levelConfig.lockChunkSizeControl) {
      this.chunkSizeControl_.disable();
    }
  }

  if (levelConfig.showEncodingControls.length > 0) {
    this.encodingControl_ = new NetSimEncodingControl(this.rootDiv_.find('.encoding'), levelConfig, this.encodingChangeCallback_);
  }
};

/**
 * Handler for changing the position of the pulse-rate slider
 * @param {number} secondsPerPulse in seconds per pulse
 * @private
 */
NetSimMyDeviceTab.prototype.pulseRateSliderChange_ = function (secondsPerPulse) {
  this.setBitRate(1 / secondsPerPulse);
};

/**
 * @param {number} bitsPerSecond
 */
NetSimMyDeviceTab.prototype.setBitRate = function (bitsPerSecond) {
  this.bitsPerSecond_ = bitsPerSecond;

  if (this.metronome_) {
    this.metronome_.setFrequency(bitsPerSecond);
  }

  if (this.bitRateControl_) {
    this.bitRateControl_.setValue(bitsPerSecond);
  }

  if (this.pulseRateControl_ && bitsPerSecond < Infinity) {
    this.pulseRateControl_.setValue(1 / bitsPerSecond);
  }
};

/**
 * Update the slider and its label to display the provided value.
 * @param {number} newChunkSize
 */
NetSimMyDeviceTab.prototype.setChunkSize = function (newChunkSize) {
  if (this.chunkSizeControl_) {
    this.chunkSizeControl_.setValue(newChunkSize);
  }
};

/**
 * @param {EncodingType[]} newEncodings
 */
NetSimMyDeviceTab.prototype.setEncodings = function (newEncodings) {
  if (this.encodingControl_) {
    this.encodingControl_.setEncodings(newEncodings);
  }
};

},{"./NetSimBitRateControl":"/home/ubuntu/staging/apps/build/js/netsim/NetSimBitRateControl.js","./NetSimChunkSizeControl":"/home/ubuntu/staging/apps/build/js/netsim/NetSimChunkSizeControl.js","./NetSimEncodingControl":"/home/ubuntu/staging/apps/build/js/netsim/NetSimEncodingControl.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimMetronome":"/home/ubuntu/staging/apps/build/js/netsim/NetSimMetronome.js","./NetSimMyDeviceTab.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimMyDeviceTab.html.ejs","./NetSimPulseRateControl":"/home/ubuntu/staging/apps/build/js/netsim/NetSimPulseRateControl.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimPulseRateControl.js":[function(require,module,exports){
/**
 * @overview UI slider for changing the pulse rate (bitrate) of the local device.
 *           Differs from the bitrate slider in its scale and units.
 * @see NetSimBitRateControl
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

// Utils required only for Function.prototype.inherits()
require('../utils');
var i18n = require('./locale');
var NetSimSlider = require('./NetSimSlider');

/**
 * Generator and controller for packet size slider/selector
 * @param {jQuery} rootDiv
 * @param {number} initialValue - in seconds per pulse
 * @param {function} sliderChangeCallback
 * @constructor
 */
var NetSimPulseRateControl = module.exports = function (rootDiv, initialValue, sliderChangeCallback) {
  NetSimSlider.DecimalPrecisionSlider.call(this, rootDiv, {
    onChange: sliderChangeCallback,
    value: initialValue,
    min: 0.5,
    max: 5.0,
    step: -0.25
  });

  // Auto-render, unlike our base class
  this.render();
};
NetSimPulseRateControl.inherits(NetSimSlider.DecimalPrecisionSlider);

/**
 * Converts a numeric rate value (in seconds per pulse) into a
 * localized string representation of that value.
 * @param {number} val - numeric value of the control
 * @returns {string} - localized string representation of value
 * @override
 */
NetSimPulseRateControl.prototype.valueToLabel = function (val) {
  var rounded = Math.floor(val * 100) / 100;
  if (rounded === 1) {
    return i18n.xSecondPerPulse({ x: rounded });
  }
  return i18n.xSecondsPerPulse({ x: rounded });
};

/**
 * Converts a numeric rate value (in seconds per pulse) into a compact
 * localized string representation of that value, used for ends of the slider.
 * @param {number} val - numeric value of the control
 * @returns {string} - localized string representation of value
 * @override
 */
NetSimPulseRateControl.prototype.valueToShortLabel = function (val) {
  return val;
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimSlider":"/home/ubuntu/staging/apps/build/js/netsim/NetSimSlider.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimMyDeviceTab.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('<div class="netsim-my-device-tab">\n\n  ');3; if (level.showMetronome) { ; buf.push('\n    <div class="metronome"></div>\n  ');5; } ; buf.push('\n\n  ');7; if (level.showPulseRateSlider) { ; buf.push('\n    <h1>Pulse rate</h1>\n    <div class="pulse-rate"></div>\n  ');10; } ; buf.push('\n\n  ');12; if (level.showBitRateControl) { ; buf.push('\n    <h1>Bitrate</h1>\n    <div class="bitrate"></div>\n  ');15; } ; buf.push('\n\n  ');17; if (level.showChunkSizeControl) { ; buf.push('\n    <h1>Chunk size</h1>\n    <div class="chunk-size"></div>\n  ');20; } ; buf.push('\n\n  ');22; if (level.showEncodingControls.length > 0) { ; buf.push('\n    <div class="encoding"></div>\n  ');24; } ; buf.push('\n\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimMetronome.js":[function(require,module,exports){
/**
 * @overview UI component: An animated SVG metronome.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var markup = require('./NetSimMetronome.html.ejs');

/**
 * An SVG "metronome", in the form of a radial meter that fills and resets
 * at a regular interval.
 *
 * @param {jQuery} rootDiv
 * @param {RunLoop} runLoop
 * @constructor
 */
var NetSimMetronome = module.exports = function (rootDiv, runLoop) {
  /**
   * Component root, which we fill whenever we call render()
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = rootDiv;

  /**
   * Time of last pulse, in RunLoop simulation time
   * @type {number}
   * @private
   */
  this.lastPulseTime_ = undefined;

  /**
   * Milliseconds between metronome pulses
   * @type {number}
   * @private
   */
  this.pulseIntervalMillis_ = 0;

  /**
   * Normalized progress toward the next pulse, from 0.0 to 1.0
   * @type {number}
   * @private
   */
  this.progress_ = 0;

  /**
   * How long it's been since the last pulse in ms
   * @type {number}
   * @private
   */
  this.pulseAge_ = 0;

  // Register with run loop
  runLoop.render.register(this.render.bind(this));
};

/**
 * Fill the root div with new elements reflecting the current state
 * @param {RunLoop.Clock} clock
 */
NetSimMetronome.prototype.render = function (clock) {
  if (!this.lastPulseTime_) {
    this.lastPulseTime_ = clock.time;
  }

  // An infinite interval means we're effectively paused, so snap to zero
  // progress (visualized as an "empty" meter)
  if (this.pulseIntervalMillis_ === Infinity) {
    this.progress_ = 0;
    this.pulseAge_ = Infinity;
  } else {
    // For a non-infinite interval, update the meter progress value according
    // to the current time.
    this.pulseAge_ = clock.time - this.lastPulseTime_;
    this.progress_ = Math.min(this.pulseAge_ / this.pulseIntervalMillis_, 1);

    if (this.pulseAge_ >= this.pulseIntervalMillis_) {
      // Pulse
      var minimumLastPulseTime = clock.time - this.pulseIntervalMillis_;
      while (this.lastPulseTime_ < minimumLastPulseTime) {
        this.lastPulseTime_ += this.pulseIntervalMillis_;
      }
    }
  }

  var renderedMarkup = $(markup({
    progress: this.progress_,
    pulseAge: this.pulseAge_
  }));
  this.rootDiv_.html(renderedMarkup);
};

/**
 * Change the metronome speed
 * @param {number} pulsesPerSecond
 */
NetSimMetronome.prototype.setFrequency = function (pulsesPerSecond) {
  if (pulsesPerSecond === 0 || pulsesPerSecond === Infinity) {
    this.pulseIntervalMillis_ = Infinity;
    return;
  }
  this.pulseIntervalMillis_ = 1000 / pulsesPerSecond;
};

},{"./NetSimMetronome.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimMetronome.html.ejs"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimMetronome.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
  function moveCommand(x, y) {
    return 'M' + x + ' ' + y;
  }

  function lineCommand(x, y) {
    return 'L ' + x + ' ' + y;
  }

  function arcCommand(rX, rY, rot, largeArcFlag, sweepFlag, finalX, finalY) {
    return 'A ' + rX + ' ' + rY + ', ' + rot + ', ' + largeArcFlag + ', ' + sweepFlag + ', ' + finalX + ' ' + finalY;
  }

  function closeShapeCommand() {
    return 'Z';
  }

  /**
   * Outer radius of progress meter
   * @type {number}
   * @const
   */
  var OUTER_RADUS = 45;

  /**
   * Inner radius of progress meter, and maximum radius of pulse dot
   * @type {number}
   * @const
   */
  var INNER_RADIUS = 30;

  /**
   * How long (in ms) it takes the pulse circle to shrink back to nothing after it appears
   * @type {number}
   * @const
   */
  var PULSE_FALLOFF_MS = 500;

  /**
   * Radius of the inner pulse dot, based on the pulse age.  Starts full size, then shrinks
   * to r=0 over PULSE_FALLOFF_MS.
   * @type {number}
   */
  var pulseFalloffNormalizedProgress = Math.min(pulseAge/ PULSE_FALLOFF_MS, 1);
  var pulseDotRadius = INNER_RADIUS * (1 - pulseFalloffNormalizedProgress);


  /**
   * Given a certain percentage (as a value in the range [0.0-1.0]) this
   * generates a data string for a "path" svg object that draws a partially-filled arc
   * sweeping the appropriate percentage of a circle.
   * Progress begins its sweep at "east" and proceeds clockwise.
   * @param {number} normalizedProgress - number from 0.0 to 1.0
   * @returns {string} data string of commands for SVG path
   */
  function progressMeterSvgPathData(normalizedProgress) {
    var terminalRadians = 2 * Math.PI * normalizedProgress
    var largeArc = (normalizedProgress >= 0.5) ? 1 : 0;
    var sinAngle = Math.sin(terminalRadians);
    var cosAngle = Math.cos(terminalRadians);
    var outerTerminalX = OUTER_RADUS * cosAngle;
    var outerTerminalY = OUTER_RADUS * sinAngle;
    var innerTerminalX = INNER_RADIUS * cosAngle;
    var innerTerminalY = INNER_RADIUS * sinAngle;
    return [
      moveCommand(OUTER_RADUS, 0),
      arcCommand(OUTER_RADUS, OUTER_RADUS, 0, largeArc, 1, outerTerminalX, outerTerminalY),
      lineCommand(innerTerminalX, innerTerminalY),
      arcCommand(INNER_RADIUS, INNER_RADIUS, 0, largeArc, 0, INNER_RADIUS, 0),
      closeShapeCommand()
    ].join(' ');
  }
; buf.push('\n<div class="netsim-metronome">\n  <svg version="1.1" width="100" height="100" xmlns="http://www.w3.org/2000/svg">\n    <g id="centered-group" transform="translate(50,50)">\n      <circle r="48" cx="0" cy="0" fill="darkgray"></circle>\n      <circle r="48" cx="-1" cy="1" fill="lightgray"></circle>\n      <circle r="46" cx="0" cy="0" fill="#f5f5f5"></circle>\n      <circle class="pulse-dot" r="', escape((80,  pulseDotRadius )), '" cx="0" cy="0"></circle>\n      <g transform="rotate(-90)">\n        <path class="progress-meter" d="', escape((82,  progressMeterSvgPathData(progress) )), '"></path>\n      </g>\n    </g>\n  </svg>\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimMemoryControl.js":[function(require,module,exports){
/**
 * @overview UI slider used to control router memory size.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

require('../utils');
var NetSimConstants = require('./NetSimConstants');
var NetSimUtils = require('./NetSimUtils');
var NetSimSlider = require('./NetSimSlider');

/**
 * Generator and controller for packet size slider/selector
 * @param {jQuery} rootDiv
 * @param {function} sliderChangeCallback
 * @param {function} sliderStopCallback
 * @constructor
 */
var NetSimMemoryControl = module.exports = function (rootDiv, sliderChangeCallback, sliderStopCallback) {
  NetSimSlider.LogarithmicSlider.call(this, rootDiv, {
    onChange: sliderChangeCallback,
    onStop: sliderStopCallback,
    value: Infinity,
    min: NetSimConstants.BITS_PER_BYTE,
    max: NetSimConstants.BITS_PER_MEGABYTE,
    upperBoundInfinite: true
  });

  // Auto-render, unlike our base class
  this.render();
};
NetSimMemoryControl.inherits(NetSimSlider.LogarithmicSlider);

/**
 * Converts a numeric memory value (in bits) into a compact localized string
 * representation of that value.
 * @param {number} val - numeric value of the control
 * @returns {string} - localized string representation of value
 * @override
 */
NetSimMemoryControl.prototype.valueToLabel = function (val) {
  return NetSimUtils.bitsToLocalizedRoundedBytesize(val);
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimSlider":"/home/ubuntu/staging/apps/build/js/netsim/NetSimSlider.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogPanel.js":[function(require,module,exports){
/**
 * @overview UI component, a log panel (used as "Sent Packets" and
 *           "Received Packets") that is used in the packet-sending
 *           configurations of the simulator.
 *
 * @see INetSimLogPanel for the interface implemented here.
 * @see NetSimBitLogPanel for the component used in bit-sending mode.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var utils = require('../utils');
var i18n = require('./locale');
var markup = require('./NetSimLogPanel.html.ejs');
var Packet = require('./Packet');
var packetMarkup = require('./NetSimLogPacket.html.ejs');
var NetSimPanel = require('./NetSimPanel');
var NetSimEncodingControl = require('./NetSimEncodingControl');
var NetSimGlobals = require('./NetSimGlobals');

/**
 * How long the "entrance" animation for new messages lasts, in milliseconds.
 * @type {number}
 * @const
 */
var MESSAGE_SLIDE_IN_DURATION_MS = 400;

/**
 * How many packets the log may keep in its history (and in the DOM!)
 * @type {number}
 * @const
 */
var DEFAULT_MAXIMUM_LOG_PACKETS = 50;

/**
 * Object that can be sent data to be browsed by the user at their discretion
 * @interface
 * @name INetSimLogPanel
 */

/**
 * Put data into the log
 * @function
 * @name INetSimLogPanel#log
 * @param {string} binary
 */

/**
 * Show or hide parts of the log based on the currently selected encoding mode.
 * @function
 * @name INetSimLogPanel#setEncodings
 * @param {EncodingType[]} newEncodings
 */

/**
 * Change how binary input in interpreted and formatted in the log.
 * @function
 * @name INetSimLogPanel#setChunkSize
 * @param {number} newChunkSize
 */

/**
 * @function
 * @name INetSimLogPanel#getHeight
 * @returns {number} vertical space that panel currently consumes (including
 *          margins) in pixels.
 */

/**
 * Sets the vertical space that this log panel should consume (including margins)
 * @function
 * @name INetSimLogPanel#setHeight
 * @param {number} heightPixels
 */

/**
 * Generator and controller for message log.
 * @param {jQuery} rootDiv
 * @param {Object} options
 * @param {string} options.logTitle
 * @param {boolean} [options.isMinimized] defaults to FALSE
 * @param {boolean} [options.hasUnreadMessages] defaults to FALSE
 * @param {Packet.HeaderType[]} options.packetSpec
 * @param {number} [options.maximumLogPackets] How many packets the log will
 *        keep before it starts dropping the oldest ones.  Defaults to
 *        DEFAULT_MAXIMUM_LOG_PACKETS.
 * @constructor
 * @augments NetSimPanel
 * @implements INetSimLogPanel
 */
var NetSimLogPanel = module.exports = function (rootDiv, options) {
  /**
   * @type {Packet.HeaderType[]}
   * @private
   */
  this.packetSpec_ = options.packetSpec;

  /**
   * List of controllers for currently displayed packets.
   * @type {Array.<NetSimLogPacket>}
   * @private
   */
  this.packets_ = [];

  /**
   * A message encoding (display) setting.
   * @type {string}
   * @private
   */
  this.currentEncodings_ = [];

  /**
   * Current chunk size (bytesize) for interpreting binary in the log.
   * @type {number}
   * @private
   */
  this.currentChunkSize_ = 8;

  /**
   * Localized panel title
   * @type {string}
   * @private
   */
  this.logTitle_ = options.logTitle;

  /**
   * Whether newly logged messages in this log should be marked as unread
   * @type {boolean}
   * @private
   */
  this.hasUnreadMessages_ = !!options.hasUnreadMessages;

  /**
   * The maximum number of packets this log panel will keep in its memory
   * and in the DOM, so we don't have a forever-growing log.
   * @type {number}
   * @private,,
   */
  this.maximumLogPackets_ = utils.valueOr(options.maximumLogPackets, DEFAULT_MAXIMUM_LOG_PACKETS);

  // Initial render
  NetSimPanel.call(this, rootDiv, {
    className: 'netsim-log-panel',
    panelTitle: options.logTitle,
    beginMinimized: options.isMinimized
  });
};
NetSimLogPanel.inherits(NetSimPanel);

NetSimLogPanel.prototype.render = function () {
  // Create boilerplate panel markup
  NetSimLogPanel.superPrototype.render.call(this);

  // Add our own content markup
  var newMarkup = $(markup({}));
  this.getBody().html(newMarkup);

  // Add a clear button to the panel header
  this.addButton(i18n.clear(), this.onClearButtonPress_.bind(this));

  // Bind reference to scrollArea for use when logging.
  this.scrollArea_ = this.getBody().find('.scroll-area');

  this.updateUnreadCount();
};

/**
 * Remove all packets from the log, resetting its state.
 * @private
 */
NetSimLogPanel.prototype.onClearButtonPress_ = function () {
  this.scrollArea_.empty();
  this.packets_.length = 0;

  this.updateUnreadCount();
};

/**
 * Put a message into the log.
 * @param {string} packetBinary
 * @param {number} packetID
 */
NetSimLogPanel.prototype.log = function (packetBinary, packetID) {

  var packetAlreadyInLog = this.packets_.some(function (packet) {
    return packet.packetID === packetID;
  });

  if (packetAlreadyInLog) {
    return;
  }

  // Remove all packets that are beyond our maximum size
  this.packets_.splice(this.maximumLogPackets_ - 1, this.packets_.length).forEach(function (packet) {
    packet.getRoot().remove();
  });

  var newPacket = new NetSimLogPacket(packetBinary, packetID, {
    packetSpec: this.packetSpec_,
    encodings: this.currentEncodings_,
    chunkSize: this.currentChunkSize_,
    isUnread: this.hasUnreadMessages_,
    markAsReadCallback: this.updateUnreadCount.bind(this)
  });

  newPacket.getRoot().prependTo(this.scrollArea_);

  var scrollTop = this.scrollArea_.scrollTop();

  if (scrollTop === 0) {
    // If scrolled to the top, animate a pretty slidedown
    newPacket.getRoot().hide();
    newPacket.getRoot().slideDown(MESSAGE_SLIDE_IN_DURATION_MS);
  } else {
    // If we're somewhere in the middle of the messages, scroll "down"
    // to maintain our place relative to the messages we're looking at

    // Scrolling only takes the bottom margin into account, not top
    var packetHeight = newPacket.getRoot().outerHeight() + parseInt(newPacket.getRoot().css('marginBottom'));

    this.scrollArea_.scrollTop(scrollTop + packetHeight);
  }

  this.packets_.unshift(newPacket);

  this.updateUnreadCount();
};

NetSimLogPanel.prototype.updateUnreadCount = function () {
  var unreadCount = this.packets_.reduce(function (prev, cur) {
    return prev + (cur.isUnread ? 1 : 0);
  }, 0);

  if (unreadCount > 0) {
    this.setPanelTitle(i18n.appendCountToTitle({
      title: this.logTitle_,
      count: unreadCount
    }));
  } else {
    this.setPanelTitle(this.logTitle_);
  }
};

/**
 * Show or hide parts of the send UI based on the currently selected encoding
 * mode.
 * @param {EncodingType[]} newEncodings
 */
NetSimLogPanel.prototype.setEncodings = function (newEncodings) {
  this.currentEncodings_ = newEncodings;
  this.packets_.forEach(function (packet) {
    packet.setEncodings(newEncodings);
  });
};

/**
 * Change how binary input in interpreted and formatted in the log.
 * @param {number} newChunkSize
 */
NetSimLogPanel.prototype.setChunkSize = function (newChunkSize) {
  this.currentChunkSize_ = newChunkSize;
  this.packets_.forEach(function (packet) {
    packet.setChunkSize(newChunkSize);
  });
};

/**
 * A component/controller for display of an individual packet in the log.
 * @param {string} packetBinary - raw packet data
 * @param {Object} options
 * @param {Packet.HeaderType[]} options.packetSpec
 * @param {EncodingType[]} options.encodings - which display style to use initially
 * @param {number} options.chunkSize - (or bytesize) to use when interpreting and
 *        formatting the data.
 * @param {boolean} options.isUnread - whether this packet should be styled
 *        as "unread" and have a "mark as read" button
 * @param {function} options.markAsReadCallback
 * @constructor
 */
var NetSimLogPacket = function NetSimLogPacket(packetBinary, packetID, options) {

  /**
   * @type {number}
   */
  this.packetID = packetID;

  /**
   * @type {string}
   * @private
   */
  this.packetBinary_ = packetBinary;

  /**
   * @type {Packet.HeaderType[]}
   * @private
   */
  this.packetSpec_ = options.packetSpec;

  /**
   * @type {EncodingType[]}
   * @private
   */
  this.encodings_ = options.encodings;

  /**
   * @type {number}
   * @private
   */
  this.chunkSize_ = options.chunkSize;

  /**
   * @type {boolean}
   */
  this.isUnread = options.isUnread;

  /**
   * @type {boolean}
   */
  this.isMinimized = false;

  /**
   * @type {function}
   * @private
   */
  this.markAsReadCallback_ = options.markAsReadCallback;

  /**
   * Wrapper div that we create once, and fill repeatedly with render()
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = $('<div>').addClass('packet');
  this.rootDiv_.click(this.markAsRead.bind(this));

  // Initial content population
  this.render();
};

/**
 * Re-render div contents to represent the packet in a different way.
 */
NetSimLogPacket.prototype.render = function () {
  var encodingsHash = NetSimEncodingControl.encodingsAsHash(this.encodings_);
  var rawMarkup = packetMarkup({
    packetBinary: this.packetBinary_,
    packetSpec: this.packetSpec_,
    enabledEncodingsHash: encodingsHash,
    chunkSize: this.chunkSize_,
    isMinimized: this.isMinimized
  });
  var jQueryWrap = $(rawMarkup);
  NetSimLogPanel.adjustHeaderColumnWidths(jQueryWrap);
  NetSimEncodingControl.hideRowsByEncoding(jQueryWrap, this.encodings_);
  this.rootDiv_.html(jQueryWrap);
  this.rootDiv_.find('.expander').click(this.toggleMinimized.bind(this));
  this.rootDiv_.toggleClass('unread', this.isUnread);
};

/**
 * Return root div, for hooking up to a parent element.
 * @returns {jQuery}
 */
NetSimLogPacket.prototype.getRoot = function () {
  return this.rootDiv_;
};

/**
 * Beneath the given root element, adjust widths of packet header columns
 * and fields to match the level's configured packet format.
 * @param {jQuery} rootElement
 */
NetSimLogPanel.adjustHeaderColumnWidths = function (rootElement) {
  var level = NetSimGlobals.getLevelConfig();
  var encoder = new Packet.Encoder(level.addressFormat, level.packetCountBitWidth, level.clientInitialPacketHeader);
  var addressBitWidth = encoder.getFieldBitWidth(Packet.HeaderType.TO_ADDRESS);
  var packetInfoBitWidth = encoder.getFieldBitWidth(Packet.HeaderType.PACKET_COUNT);

  // Adjust width of address columns
  // For columns, 50px is sufficient for 4 bits
  var PX_PER_BIT = 50 / 4;
  var addressColumnWidthInPx = PX_PER_BIT * addressBitWidth;

  // Adjust width of address columns
  rootElement.find('td.toAddress, th.toAddress, td.fromAddress, th.fromAddress').css('width', addressColumnWidthInPx + 'px');

  // Adjust width of address input fields
  // For inputs, 3em is sufficient for 4 bits
  var EMS_PER_BIT = 3 / 4;
  var addressFieldWidthInEms = EMS_PER_BIT * addressBitWidth;
  rootElement.find('td.toAddress input, td.fromAddress input').css('width', addressFieldWidthInEms + 'em');

  // Adjust width of packet info column
  // Packet info column uses two fields and an extra 21px for " of "
  var packetInfoColumnWidthInPx = 2 * PX_PER_BIT * packetInfoBitWidth + 21;
  rootElement.find('td.packetInfo, th.packetInfo').css('width', packetInfoColumnWidthInPx + 'px');

  // Adjust width of packet info fields
  var packetInfoFieldWidthInEms = EMS_PER_BIT * packetInfoBitWidth;
  rootElement.find('td.packetInfo input').css('width', packetInfoFieldWidthInEms + 'em');
};

/**
 * Change encoding-display setting and re-render packet contents accordingly.
 * @param {EncodingType[]} newEncodings
 */
NetSimLogPacket.prototype.setEncodings = function (newEncodings) {
  this.encodings_ = newEncodings;
  this.render();
};

/**
 * Change chunk size for interpreting data and re-render packet contents
 * accordingly.
 * @param {number} newChunkSize
 */
NetSimLogPacket.prototype.setChunkSize = function (newChunkSize) {
  this.chunkSize_ = newChunkSize;
  this.render();
};

/**
 * Mark the packet as read, changing its style and removing the "mark as read"
 * button.
 */
NetSimLogPacket.prototype.markAsRead = function () {
  if (this.isUnread) {
    this.isUnread = false;
    this.render();
    this.markAsReadCallback_();
  }
};

NetSimLogPacket.prototype.toggleMinimized = function () {
  this.isMinimized = !this.isMinimized;
  this.render();
};

/**
 * Sets the vertical space that this log panel should consume (including margins)
 * @param {number} heightPixels
 */
NetSimLogPanel.prototype.setHeight = function (heightPixels) {
  var root = this.getRoot().find('.netsim-panel');
  var panelHeader = root.find('h1');
  var panelBody = root.find('.panel-body');

  var panelMargins = parseFloat(root.css('margin-top')) + parseFloat(root.css('margin-bottom'));
  var headerHeight = panelHeader.outerHeight(true);
  var panelBorders = parseFloat(panelBody.css('border-top-width')) + parseFloat(panelBody.css('border-bottom-width'));
  var scrollMargins = parseFloat(this.scrollArea_.css('margin-top')) + parseFloat(this.scrollArea_.css('margin-bottom'));

  // We set the panel height by fixing the size of its inner scrollable
  // area.
  var newScrollViewportHeight = heightPixels - (panelMargins + headerHeight + panelBorders + scrollMargins);
  this.scrollArea_.height(Math.floor(newScrollViewportHeight));
};

/**
 * @returns {number} vertical space that panel currently consumes (including
 *          margins) in pixels.
 */
NetSimLogPanel.prototype.getHeight = function () {
  return this.getRoot().find('.netsim-panel').outerHeight(true);
};

/**
 * After toggling panel visibility, trigger a layout update so send/log panel
 * space is shared correctly.
 * @private
 * @override
 */
NetSimLogPanel.prototype.onMinimizerClick_ = function () {
  NetSimLogPanel.superPrototype.onMinimizerClick_.call(this);
  NetSimGlobals.updateLayout();
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimEncodingControl":"/home/ubuntu/staging/apps/build/js/netsim/NetSimEncodingControl.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimLogPacket.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogPacket.html.ejs","./NetSimLogPanel.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogPanel.html.ejs","./NetSimPanel":"/home/ubuntu/staging/apps/build/js/netsim/NetSimPanel.js","./Packet":"/home/ubuntu/staging/apps/build/js/netsim/Packet.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogPanel.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('<div class="scroll-area">\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogPacket.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
  var NetSimConstants = require('./NetSimConstants');
  var NetSimGlobals = require('./NetSimGlobals');
  var DataConverters = require('./DataConverters');
  var i18n = require('./locale');
  var getEncodingLabel = require('./NetSimUtils').getEncodingLabel;
  var Packet = require('./Packet');

  var level = NetSimGlobals.getLevelConfig();

  var EncodingType = NetSimConstants.EncodingType;
  var PacketUIColumnType = NetSimConstants.PacketUIColumnType;

  var formatAB = DataConverters.formatAB;
  var formatBinary = DataConverters.formatBinary;
  var formatHex = DataConverters.formatHex;
  var alignDecimal = DataConverters.alignDecimal;
  var binaryToAB = DataConverters.binaryToAB;
  var binaryToInt = DataConverters.binaryToInt;
  var binaryToHex = DataConverters.binaryToHex;
  var binaryToDecimal = DataConverters.binaryToDecimal;
  var binaryToAscii = DataConverters.binaryToAscii;
  var binaryToAddressString = function (binaryString) {
    return DataConverters.binaryToAddressString(binaryString, level.addressFormat);
  };
  var formatBinaryForAddressHeader = function (binaryString) {
    return DataConverters.formatBinaryForAddressHeader(binaryString, level.addressFormat);
  };

  /** @type {Packet} */
  var packet = new Packet(packetSpec, packetBinary);

  /** @type {Packet.HeaderType[]} */
  var headerFields = packetSpec;

  var showToAddress = headerFields.indexOf(Packet.HeaderType.TO_ADDRESS) > -1;
  var showFromAddress = headerFields.indexOf(Packet.HeaderType.FROM_ADDRESS) > -1;
  var showPacketInfo = headerFields.indexOf(Packet.HeaderType.PACKET_INDEX) > -1 &&
      headerFields.indexOf(Packet.HeaderType.PACKET_COUNT) > -1;

  /**
  * @name enabledEncodingsHash
  * @type {Object}
  */

  function isEncodingEnabled(queryEncoding) {
    return enabledEncodingsHash[queryEncoding] === true;
  }

  /**
   * Packet one-line summary should only use the highest-level enabled encoding.
   */
  function getOneLinePacketSummary() {
    var messageBinary = packet.getBodyAsBinary();
    if (isEncodingEnabled(EncodingType.ASCII)) {
      return binaryToAscii(messageBinary, chunkSize);
    } else if (isEncodingEnabled(EncodingType.DECIMAL)) {
      return alignDecimal(binaryToDecimal(messageBinary, chunkSize));
    } else if (isEncodingEnabled(EncodingType.HEXADECIMAL)) {
      return formatHex(binaryToHex(messageBinary), chunkSize);
    } else if (isEncodingEnabled(EncodingType.BINARY)) {
      return formatBinary(messageBinary, chunkSize);
    } else if (isEncodingEnabled(EncodingType.A_AND_B)) {
      return formatAB(binaryToAB(messageBinary), chunkSize);
    }
    return messageBinary;
  }

  /**
   * @param {EncodingType} encodingType
   * @param {string} toAddress
   * @param {string} fromAddress
   * @param {string} packetInfo
   * @param {string} message
   */
  function logRowIfEncodingEnabled(encodingType, toAddress, fromAddress, packetInfo, message) {
    if (isEncodingEnabled(encodingType)) {
      ; buf.push('\n        <tr class="', escape((79,  encodingType )), '">\n          <th nowrap class="', escape((80,  PacketUIColumnType.ENCODING_LABEL )), '">', escape((80,  getEncodingLabel(encodingType) )), '</th>\n          ');81; if (showToAddress) { ; buf.push('\n            <td nowrap class="', escape((82,  PacketUIColumnType.TO_ADDRESS )), '">', escape((82,  toAddress )), '</td>\n          ');83; } ; buf.push('\n          ');84; if (showFromAddress) { ; buf.push('\n            <td nowrap class="', escape((85,  PacketUIColumnType.FROM_ADDRESS )), '">', escape((85,  fromAddress )), '</td>\n          ');86; } ; buf.push('\n          ');87; if (showPacketInfo) { ; buf.push('\n            <td nowrap class="', escape((88,  PacketUIColumnType.PACKET_INFO )), '">', escape((88,  packetInfo )), '</td>\n          ');89; } ; buf.push('\n          <td class="', escape((90,  PacketUIColumnType.MESSAGE )), '">', escape((90,  message )), '</td>\n        </tr>\n    ');92;
    }
  }
 ; buf.push('\n  ');96;
    var toAddress = showToAddress ? packet.getHeaderAsBinary(Packet.HeaderType.TO_ADDRESS) : '';
    var fromAddress = showFromAddress ? packet.getHeaderAsBinary(Packet.HeaderType.FROM_ADDRESS) : '';
    var packetIndex = showPacketInfo ? packet.getHeaderAsBinary(Packet.HeaderType.PACKET_INDEX) : '';
    var packetCount = showPacketInfo ? packet.getHeaderAsBinary(Packet.HeaderType.PACKET_COUNT) : '';
    var message = packet.getBodyAsBinary();
  ; buf.push('\n  ');103; if (isMinimized) { ; buf.push('\n      <div class="minimized-packet single-line-with-ellipsis user-data">\n        <i class="fa fa-plus-square expander"></i>\n        ', escape((106,  getOneLinePacketSummary() )), '\n      </div>\n  ');108; } else { ; buf.push('\n    <table class="maximized-packet">\n      <thead>\n        <tr>\n          <th nowrap class="', escape((112,  PacketUIColumnType.ENCODING_LABEL )), '">\n            <i class="fa fa-minus-square expander"></i>\n          </th>\n          ');115; if (showToAddress) { ; buf.push('\n            <th nowrap class="', escape((116,  PacketUIColumnType.TO_ADDRESS )), '">', escape((116,  i18n.to() )), '</th>\n          ');117; } ; buf.push('\n          ');118; if (showFromAddress) { ; buf.push('\n            <th nowrap class="', escape((119,  PacketUIColumnType.FROM_ADDRESS )), '">', escape((119,  i18n.from() )), '</th>\n          ');120; } ; buf.push('\n          ');121; if (showPacketInfo) { ; buf.push('\n            <th nowrap class="', escape((122,  PacketUIColumnType.PACKET_INFO )), '">', escape((122,  i18n.packet() )), '</th>\n          ');123; } ; buf.push('\n          <th class="', escape((124,  PacketUIColumnType.MESSAGE )), '">\n            ', escape((125,  i18n.message() )), '\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n      ');130;
        logRowIfEncodingEnabled(EncodingType.ASCII,
            binaryToAddressString(toAddress),
            binaryToAddressString(fromAddress),
            i18n.xOfYPackets({
              x: binaryToInt(packetIndex),
              y: binaryToInt(packetCount)
            }),
            binaryToAscii(message, chunkSize));

        logRowIfEncodingEnabled(EncodingType.DECIMAL,
            binaryToAddressString(toAddress),
            binaryToAddressString(fromAddress),
            i18n.xOfYPackets({
              x: binaryToInt(packetIndex),
              y: binaryToInt(packetCount)
            }),
            alignDecimal(binaryToDecimal(message, chunkSize)));

        logRowIfEncodingEnabled(EncodingType.HEXADECIMAL,
            binaryToHex(toAddress),
            binaryToHex(fromAddress),
            i18n.xOfYPackets({
              x: binaryToHex(packetIndex),
              y: binaryToHex(packetCount)
            }),
            formatHex(binaryToHex(message), chunkSize));

        logRowIfEncodingEnabled(EncodingType.BINARY,
            formatBinaryForAddressHeader(toAddress, 4),
            formatBinaryForAddressHeader(fromAddress, 4),
            formatBinary(packetIndex + packetCount, level.packetCountBitWidth),
            formatBinary(message, chunkSize));

        logRowIfEncodingEnabled(EncodingType.A_AND_B,
            binaryToAB(toAddress),
            binaryToAB(fromAddress),
            formatAB(binaryToAB(packetIndex + packetCount), level.packetCountBitWidth),
            formatAB(binaryToAB(message), chunkSize));
       ; buf.push('\n      </tbody>\n    </table>\n  ');172; } ; buf.push('\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"./DataConverters":"/home/ubuntu/staging/apps/build/js/netsim/DataConverters.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js","./Packet":"/home/ubuntu/staging/apps/build/js/netsim/Packet.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimLocalClientNode.js":[function(require,module,exports){
/**
 * @overview Simulation entity controller reserved for the local client's
 *           simulation node.
 * @see NetSimClientNode for the controller used for other client nodes
 *      in the simulation.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var utils = require('../utils');
var _ = utils.getLodash();
var i18n = require('./locale');
var NetSimClientNode = require('./NetSimClientNode');
var NetSimEntity = require('./NetSimEntity');
var NetSimAlert = require('./NetSimAlert');
var NetSimMessage = require('./NetSimMessage');
var NetSimLogger = require('./NetSimLogger');
var NetSimRouterNode = require('./NetSimRouterNode');
var ObservableEvent = require('../ObservableEvent');

var logger = NetSimLogger.getSingleton();
var NetSimConstants = require('./NetSimConstants');
var NetSimGlobals = require('./NetSimGlobals');

var MessageGranularity = NetSimConstants.MessageGranularity;

/**
 * Client model of node being simulated on the local client.
 *
 * Provides special access for manipulating the locally-owned client node in
 * ways that you aren't allowed to manipulate other client nodes.
 *
 * @param {!NetSimShard} shard
 * @param {Object} [clientRow] - Lobby row for this router.
 * @constructor
 * @augments NetSimClientNode
 */
var NetSimLocalClientNode = module.exports = function (shard, clientRow) {
  NetSimClientNode.call(this, shard, clientRow);

  // TODO (bbuchanan): Consider:
  //      Do we benefit from inheritance here?  Would it be cleaner to make this
  //      not-an-entity that manipulates a stock NetSimClientNode?  Will another
  //      developer find it easy to understand how this class works?

  /**
   * Client nodes can be connected to other clients.
   * @type {NetSimClientNode}
   */
  this.myRemoteClient = null;

  /**
   * ID of the router this client node is connected to.  Undefined if
   * not connected to a router.
   * @type {number|undefined}
   * @private
   */
  this.myRouterID_ = undefined;

  /**
   * Set of router controllers enabled for simulation by this node.
   * @type {NetSimRouterNode[]}
   * @private
   */
  this.routers_ = [];

  /**
   * Widget where we will post sent messages.
   * @type {NetSimLogPanel}
   * @private
   */
  this.sentLog_ = null;

  /**
   * Widget where we will post received messages
   * @type {NetSimLogPanel}
   * @private
   */
  this.receivedLog_ = null;

  /**
   * Change event others can observe, which we will fire when we
   * connect or disconnect from a router or remote client
   * @type {ObservableEvent}
   */
  this.remoteChange = new ObservableEvent();

  /**
   * Callback for when something indicates that this node has been
   * disconnected from the instance.
   * @type {function}
   * @private
   */
  this.onNodeLostConnection_ = function () {};

  /**
   * Event registration information
   * @type {Object}
   */
  this.eventKeys = {};
};
NetSimLocalClientNode.inherits(NetSimClientNode);

/**
 * Static async creation method. See NetSimEntity.create().
 * @param {!NetSimShard} shard
 * @param {string} displayName
 * @param {!NodeStyleCallback} onComplete - Method that will be given the
 *        created entity, or null if entity creation failed.
 */
NetSimLocalClientNode.create = function (shard, displayName, onComplete) {
  // TODO (bbuchanan): Modify and return the template node instead of
  // making two in this method.
  var templateNode = new NetSimLocalClientNode(shard);
  templateNode.displayName_ = displayName;
  templateNode.getTable().create(templateNode.buildRow(), function (err, row) {
    if (err) {
      onComplete(err, null);
      return;
    }

    var newNode = new NetSimLocalClientNode(shard, row);
    onComplete(null, newNode);
  });
};

/** Set node's display name.  Does not trigger an update! */
NetSimLocalClientNode.prototype.setDisplayName = function (displayName) {
  this.displayName_ = displayName;
};

/**
 * Configure this node controller to actively simulate, and to post sent and
 * received messages to the given log widgets.
 * @param {!NetSimLogPanel} sentLog
 * @param {!NetSimLogPanel} receivedLog
 */
NetSimLocalClientNode.prototype.initializeSimulation = function (sentLog, receivedLog) {
  this.sentLog_ = sentLog;
  this.receivedLog_ = receivedLog;

  // Subscribe to table changes
  this.eventKeys.nodeTable = this.shard_.nodeTable.tableChange.register(this.onNodeTableChange_.bind(this));
  this.eventKeys.wireTable = this.shard_.wireTable.tableChange.register(this.onWireTableChange_.bind(this));
  this.eventKeys.messageTable = this.shard_.messageTable.tableChange.register(this.onMessageTableChange_.bind(this));
  this.eventKeys.registeredOnShard = this.shard_;

  // Set up initial state from cached rows
  this.onNodeTableChange_();
};

/**
 * Gives the simulating node a chance to unregister from anything it was
 * observing.
 */
NetSimLocalClientNode.prototype.stopSimulation = function () {
  if (this.eventKeys.registeredOnShard) {
    this.eventKeys.registeredOnShard.nodeTable.tableChange.unregister(this.eventKeys.nodeTable);
    this.eventKeys.registeredOnShard.wireTable.tableChange.unregister(this.eventKeys.wireTable);
    this.eventKeys.registeredOnShard.messageTable.tableChange.unregister(this.eventKeys.messageTable);
    this.eventKeys.registeredOnShard = null;
  }
};

/**
 * Ticks the simulation routers
 * @param {!RunLoop.Clock} clock
 */
NetSimLocalClientNode.prototype.tick = function (clock) {
  // TODO (bbuchanan): Move the router collection and ticking the
  // routers up to netsim.js (or elsewhere)
  this.routers_.forEach(function (router) {
    router.tick(clock);
  });
};

/**
 * Give this node an action to take if it detects that it is no longer part
 * of the shard.
 * @param {function} onNodeLostConnection
 */
NetSimLocalClientNode.prototype.setLostConnectionCallback = function (onNodeLostConnection) {
  this.onNodeLostConnection_ = onNodeLostConnection;
};

/**
 * If a client update fails, should attempt an automatic reconnect.
 * @param {NodeStyleCallback} [onComplete]
 */
NetSimLocalClientNode.prototype.update = function (onComplete) {
  onComplete = onComplete || function () {};

  var self = this;
  NetSimLocalClientNode.superPrototype.update.call(this, function (err, result) {
    if (err) {
      logger.error("Local node update failed: " + err.message);
      self.onNodeLostConnection_();
    }
    onComplete(err, result);
  });
};

/**
 * Connect to a remote client node.
 * @param {NetSimClientNode} client
 * @param {!NodeStyleCallback} onComplete
 */
NetSimLocalClientNode.prototype.connectToClient = function (client, onComplete) {
  this.connectToNode(client, (function (err, wire) {
    if (err) {
      onComplete(err);
      return;
    }

    // Check whether WE just established a mutual connection with a remote client.
    this.shard_.wireTable.refresh().always((function () {
      this.onWireTableChange_(this.shard_.wireTable.readAll());
      onComplete(err, wire);
    }).bind(this));
  }).bind(this));
};

/**
 * @param {!NetSimRouterNode} router
 * @param {NodeStyleCallback} onComplete
 */
NetSimLocalClientNode.prototype.connectToRouter = function (router, onComplete) {
  onComplete = onComplete || function () {};

  logger.info(this.getDisplayName() + ": Connecting to " + router.getDisplayName());
  this.connectToNode(router, (function (err, wire) {
    if (err) {
      onComplete(err);
      return;
    }

    this.myRouterID_ = router.entityID;

    this.remoteChange.notifyObservers(this.getOutgoingWire(), this.getMyRouter());
    onComplete(null, wire);
  }).bind(this));
};

/**
 * Create an appropriate initial wire row for connecting to the given node.
 * Overrides NetSimNode version to add improved connect-to-router functionality.
 * @param {!NetSimNode} otherNode
 * @returns {WireRow}
 * @override
 */
NetSimLocalClientNode.prototype.makeWireRowForConnectingTo = function (otherNode) {
  if (otherNode instanceof NetSimRouterNode) {
    return {
      localNodeID: this.entityID,
      remoteNodeID: otherNode.entityID,
      localAddress: otherNode.getRandomAvailableClientAddress(),
      remoteAddress: otherNode.getAddress(),
      localHostname: this.getHostname(),
      remoteHostname: otherNode.getHostname()
    };
  }
  return NetSimLocalClientNode.superPrototype.makeWireRowForConnectingTo.call(this, otherNode);
};

/**
 * Helper/accessor for router controller instance for the router that this
 * client is directly connected to.
 * @returns {NetSimRouterNode|null} Router we are connected to or null if not
 *          connected to a router at all.
 */
NetSimLocalClientNode.prototype.getMyRouter = function () {
  if (this.myRouterID_ === undefined) {
    return null;
  }

  return _.find(this.routers_, (function (router) {
    return router.entityID === this.myRouterID_;
  }).bind(this));
};

/**
 * @param {NodeStyleCallback} [onComplete]
 */
NetSimLocalClientNode.prototype.disconnectRemote = function (onComplete) {
  onComplete = onComplete || function () {};

  // save the wire so we can destroy it
  var wire = this.getOutgoingWire();

  // remove all local references to connections
  this.cleanUpBeforeDestroyingWire_();

  // destroy wire on API
  wire.destroy((function (err) {
    // We're not going to stop if an error occurred here; the error might
    // just be that the wire was already cleaned up by another node.
    // As long as we make a good-faith disconnect effort, the cleanup system
    // will correct any mistakes and we won't lock up our client trying to
    // re-disconnect.
    if (err) {
      logger.info("Error while disconnecting: " + err.message);
    }
    onComplete(null);
  }).bind(this));
};

/**
 * Common cleanup behavior shared between the synchronous and asynchronous
 * disconnect paths.
 * @private
 */
NetSimLocalClientNode.prototype.cleanUpBeforeDestroyingWire_ = function () {
  this.myRemoteClient = null;
  this.myRouterID_ = undefined;
  this.remoteChange.notifyObservers(null, null);
};

/**
 * Put a message on our outgoing wire, to whatever we are connected to
 * at the moment.
 * @param {string} payload
 * @param {!NodeStyleCallback} onComplete
 */
NetSimLocalClientNode.prototype.sendMessage = function (payload, onComplete) {
  var myWire = this.getOutgoingWire();
  if (!myWire) {
    onComplete(new Error('Cannot send message; not connected.'));
    return;
  }

  var localNodeID = myWire.localNodeID;
  var remoteNodeID = myWire.remoteNodeID;

  // Who will be responsible for picking up/cleaning up this message?
  var simulatingNodeID = this.selectSimulatingNode_(localNodeID, remoteNodeID);
  var levelConfig = NetSimGlobals.getLevelConfig();
  var extraHops = levelConfig.minimumExtraHops;
  if (levelConfig.minimumExtraHops !== levelConfig.maximumExtraHops) {
    extraHops = NetSimGlobals.randomIntInRange(levelConfig.minimumExtraHops, levelConfig.maximumExtraHops + 1);
  }

  var self = this;
  NetSimMessage.send(this.shard_, {
    fromNodeID: localNodeID,
    toNodeID: remoteNodeID,
    simulatedBy: simulatingNodeID,
    payload: payload,
    extraHopsRemaining: extraHops
  }, (function (err, row) {
    if (err) {
      logger.error('Failed to send message: ' + err.message + "\n" + JSON.stringify(payload));
      NetSimAlert.error(i18n.sendMessageError());
      onComplete(err);
      return;
    }

    logger.info(this.getDisplayName() + ': Sent message:' + '\nfrom: ' + localNodeID + '\nto  : ' + remoteNodeID + '\nsim : ' + simulatingNodeID + '\nhops: ' + extraHops);

    if (self.sentLog_) {
      self.sentLog_.log(payload, row.id);
    }
    onComplete(null);
  }).bind(this));
};

/**
 * Decide whether the local node or the remote node will be responsible
 * for picking up and cleaning up this message from remote storage.
 * @param {number} localNodeID
 * @param {number} remoteNodeID
 * @returns {number} one of the two IDs provided
 */
NetSimLocalClientNode.prototype.selectSimulatingNode_ = function (localNodeID, remoteNodeID) {
  if (NetSimGlobals.getLevelConfig().messageGranularity === MessageGranularity.BITS) {
    // In simplex wire mode, the local node cleans up its own messages
    // when it knows they are no longer current.
    return localNodeID;
  } else if (this.myRouterID_ !== undefined && this.myRouterID_ === remoteNodeID) {
    // If sending to a router, we will do our own simulation on the router's
    // behalf
    return localNodeID;
  }
  // Default case: The designated recipient must pick up the message.
  return remoteNodeID;
};

/**
 * Sequentially puts a list of messages onto the outgoing wire, to whatever
 * we are connected to at the moment.
 * @param {string[]} payloads
 * @param {!NodeStyleCallback} onComplete
 */
NetSimLocalClientNode.prototype.sendMessages = function (payloads, onComplete) {
  if (payloads.length === 0) {
    onComplete(null);
    return;
  }

  this.sendMessage(payloads[0], (function (err, result) {
    if (err) {
      onComplete(err, result);
      return;
    }

    this.sendMessages(payloads.slice(1), onComplete);
  }).bind(this));
};

/**
 * Whenever the node table changes, make needed changes to our collection of
 * routers configured to simulate for the local node.
 * @private
 */
NetSimLocalClientNode.prototype.onNodeTableChange_ = function () {
  var nodeRows = this.shard_.nodeTable.readAll();

  // If our own row is gone, drop everything and handle disconnect.
  if (!this.canFindOwnRowIn(nodeRows)) {
    this.onNodeLostConnection_();
    return;
  }

  // Remove simulating routers that have vanished from remote storage.
  this.routers_ = this.routers_.filter(function (simulatingRouter) {
    var stillExists = nodeRows.some(function (row) {
      return row.id === simulatingRouter.entityID;
    });
    if (!stillExists) {
      simulatingRouter.stopSimulation();
      return false;
    }
    return true;
  });

  // Create and simulate new routers
  nodeRows.filter(function (row) {
    return row.type === NetSimConstants.NodeType.ROUTER;
  }).forEach(function (row) {
    var alreadySimulating = this.routers_.some(function (simulatingRouter) {
      return row.id === simulatingRouter.entityID;
    });

    if (!alreadySimulating) {
      var newRouter = new NetSimRouterNode(this.shard_, row);
      newRouter.initializeSimulation(this.entityID);
      this.routers_.push(newRouter);
    }
  }, this);
};

/**
 * @param {Object[]} nodeRows
 * @returns {boolean} TRUE if own row is in given row collection
 */
NetSimLocalClientNode.prototype.canFindOwnRowIn = function (nodeRows) {
  return nodeRows.some(function (row) {
    return row.id === this.entityID && row.uuid === this.uuid;
  }, this);
};

/**
 * Handler for any wire table change.  Used here to detect mutual
 * connections between client nodes that indicate we can move to a
 * "connected" state or stop trying to connect.
 * @private
 */
NetSimLocalClientNode.prototype.onWireTableChange_ = function () {
  var myWire = this.getOutgoingWire();
  if (!myWire) {
    return;
  }

  var wireRows = this.shard_.wireTable.readAll();
  var myConnectionTargetWireRow, isTargetConnectedToSomeoneElse;

  // Look for mutual connection
  var mutualConnectionRow = _.find(wireRows, (function (row) {
    return row.remoteNodeID === myWire.localNodeID && row.localNodeID === myWire.remoteNodeID;
  }).bind(this));

  if (mutualConnectionRow && !this.myRemoteClient) {
    // New mutual connection! Get the node for our own use.
    NetSimClientNode.get(mutualConnectionRow.localNodeID, this.shard_, (function (err, remoteClient) {
      this.myRemoteClient = remoteClient;
      this.remoteChange.notifyObservers(myWire, this.myRemoteClient);
    }).bind(this));
  } else if (!mutualConnectionRow && this.myRemoteClient) {
    // Remote client disconnected or we disconnected; either way we are
    // no longer connected.
    NetSimAlert.info(i18n.alertPartnerDisconnected());
    this.disconnectRemote();
  } else if (!mutualConnectionRow && !this.myRemoteClient) {
    // The client we're trying to connect to might have connected to
    // someone else; check if they did and if so, stop trying to connect
    myConnectionTargetWireRow = _.find(wireRows, (function (row) {
      return row.localNodeID === myWire.remoteNodeID && row.remoteNodeID !== myWire.localNodeID;
    }).bind(this));
    isTargetConnectedToSomeoneElse = myConnectionTargetWireRow ? wireRows.some(function (row) {
      return row.remoteNodeID === myConnectionTargetWireRow.localNodeID && row.localNodeID === myConnectionTargetWireRow.remoteNodeID;
    }) : undefined;
    if (myConnectionTargetWireRow && isTargetConnectedToSomeoneElse) {
      NetSimAlert.info(i18n.alertConnectionRefused());
      this.disconnectRemote();
    }
  }
};

/**
 * Listens for changes to the message table.  Detects and handles messages
 * sent to this node.
 * @private
 */
NetSimLocalClientNode.prototype.onMessageTableChange_ = function () {
  if (!NetSimGlobals.getLevelConfig().automaticReceive) {
    // In this level, we will not automatically pick up messages directed
    // at us.  We must manually call a receive method instead.
    return;
  }

  if (this.isProcessingMessages_) {
    // We're already in this method, getting called recursively because
    // we are making changes to the table.  Ignore this call.
    return;
  }

  var messages = this.shard_.messageTable.readAll().map((function (row) {
    return new NetSimMessage(this.shard_, row);
  }).bind(this)).filter((function (message) {
    return message.toNodeID === this.entityID && message.simulatedBy === this.entityID;
  }).bind(this));

  if (messages.length === 0) {
    // No messages for us, no work to do
    return;
  }

  // Setup (sync): Set processing flag
  logger.info("Local node received " + messages.length + " messages");
  this.isProcessingMessages_ = true;

  // Step 1 (async): Pull all our messages out of storage
  NetSimEntity.destroyEntities(messages, (function (err) {
    if (err) {
      logger.error('Error pulling message off the wire: ' + err.message);
      this.isProcessingMessages_ = false;
      return;
    }

    // Step 2 (sync): Handle all messages
    messages.forEach(function (message) {
      this.handleMessage_(message);
    }, this);

    // Cleanup (sync): Clear processing flag
    logger.info("Local node finished processing " + messages.length + " messages");
    this.isProcessingMessages_ = false;
  }).bind(this));
};

/**
 * Post message to 'received' log.
 * @param {!NetSimMessage} message
 * @private
 */
NetSimLocalClientNode.prototype.handleMessage_ = function (message) {
  logger.info(this.getDisplayName() + ': Handling incoming message');
  // TODO: How much validation should we do here?
  if (this.receivedLog_) {
    this.receivedLog_.log(message.payload, message.entityID);
  }
};

/**
 * Asynchronously receive the latest message shared between this node
 * and its connected remote node.
 * @param {!NodeStyleCallback} onComplete - given the message as a result, or
 *        NULL if no messages exist.
 */
NetSimLocalClientNode.prototype.getLatestMessageOnSimplexWire = function (onComplete) {
  var myWire = this.getOutgoingWire();
  if (!myWire) {
    onComplete(new Error("Unable to retrieve message; not connected."));
    return;
  }

  // Does an asynchronous request to the message table to ensure we have
  // the latest contents
  var messageTable = this.shard_.messageTable;
  messageTable.refresh().fail(onComplete).done((function () {
    // We only care about rows on our (simplex) wire
    var rowsOnWire = messageTable.readAll().filter((function (row) {
      return myWire.isMessageRowOnSimplexWire(row);
    }).bind(this));

    // If there are no rows, complete successfully but pass null result.
    if (rowsOnWire.length === 0) {
      onComplete(null, null);
      return;
    }

    var lastRow = rowsOnWire[rowsOnWire.length - 1];
    onComplete(null, new NetSimMessage(this.shard_, lastRow));
  }).bind(this));
};

/**
 * Asynchronously set the state of the shared wire.
 * @param {string} newState - probably ought to be "0" or "1"
 * @param {!NodeStyleCallback} onComplete
 */
NetSimLocalClientNode.prototype.setSimplexWireState = function (newState, onComplete) {
  this.sendMessage(newState, (function (err) {
    if (err) {
      logger.warn(err.message);
      onComplete(new Error("Failed to set wire state."));
      return;
    }

    // We're not done!  Also do our part to keep the message table clean.
    this.removeMyOldMessagesFromWire_(onComplete);
  }).bind(this));
};

/**
 * Removes all messages on the current wire that are simulated by the local
 * node and are not the latest message on the wire.
 * Used by simplex configurations where we only care about the wire's current
 * (latest) state.
 * @param {!NodeStyleCallback} onComplete
 */
NetSimLocalClientNode.prototype.removeMyOldMessagesFromWire_ = function (onComplete) {
  var myWire = this.getOutgoingWire();
  if (!myWire) {
    onComplete(new Error("Unable to retrieve message; not connected."));
    return;
  }

  // Does an asynchronous request to the message table to ensure we have
  // the latest contents
  var messageTable = this.shard_.messageTable;
  messageTable.refresh().fail(onComplete).done((function () {
    // We only care about rows on our (simplex) wire
    var rowsOnWire = messageTable.readAll().filter(function (row) {
      return myWire.isMessageRowOnSimplexWire(row);
    }, this);

    // "Old" rows are all but the last element (the latest one)
    var oldRowsOnWire = rowsOnWire.slice(0, -1);

    // We are only in charge of deleting messages that we are simulating
    var myOldRowsOnWire = oldRowsOnWire.filter(function (row) {
      return row.simulatedBy === this.entityID;
    }, this);

    // Convert to message entities so we can destroy them
    var myOldMessagesOnWire = myOldRowsOnWire.map(function (row) {
      return new NetSimMessage(this.shard_, row);
    }, this);

    NetSimEntity.destroyEntities(myOldMessagesOnWire, onComplete);
  }).bind(this));
};

},{"../ObservableEvent":"/home/ubuntu/staging/apps/build/js/ObservableEvent.js","../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimAlert":"/home/ubuntu/staging/apps/build/js/netsim/NetSimAlert.js","./NetSimClientNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimClientNode.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimEntity":"/home/ubuntu/staging/apps/build/js/netsim/NetSimEntity.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimLogger":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogger.js","./NetSimMessage":"/home/ubuntu/staging/apps/build/js/netsim/NetSimMessage.js","./NetSimRouterNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterNode.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimLobby.js":[function(require,module,exports){
/**
 * @overview UI controller for lobby - handles flow for name entry, section
 *           selection, and remote node selection.
 * @see NetSimShardSelectionPanel for name entry and shard selection.
 * @see NetSimRemoteNodeSelectionPanel for implementation of the actual
 *      lobby table.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var utils = require('../utils');
var _ = utils.getLodash();
var i18n = require('./locale');
var NetSimNodeFactory = require('./NetSimNodeFactory');
var NetSimClientNode = require('./NetSimClientNode');
var NetSimAlert = require('./NetSimAlert');
var NetSimApiError = require('./NetSimApiError');
var NetSimRouterNode = require('./NetSimRouterNode');
var NetSimShardSelectionPanel = require('./NetSimShardSelectionPanel');
var NetSimRemoteNodeSelectionPanel = require('./NetSimRemoteNodeSelectionPanel');

var logger = require('./NetSimLogger').getSingleton();
var NetSimGlobals = require('./NetSimGlobals');

/**
 * @typedef {Object} ShardChoice
 * @property {string} shardSeed - unique key for shard within level, used in
 *           share URLs
 * @property {string} shardID - unique key for shard in tables API, used as
 *           prefix to table names.  Must be 48 characters or less, and
 *           consistently generatable from a level ID and seed.
 * @property {string} displayName - localized shard name
 */

/**
 * Generator and controller for lobby/connection controls.
 *
 * @param {jQuery} rootDiv
 * @param {NetSim} connection - The shard connection that this
 *        lobby control will manipulate.
 * @param {Object} options
 * @param {DashboardUser} options.user
 * @param {string} options.levelKey
 * @param {string} options.sharedShardSeed
 * @constructor
 * @augments NetSimPanel
 */
var NetSimLobby = module.exports = function (rootDiv, netsim, options) {
  /**
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = rootDiv;

  /**
   * Shard connection that this lobby control will manipulate.
   * @type {NetSim}
   * @private
   */
  this.netsim_ = netsim;

  /**
   * @type {string}
   * @private
   */
  this.levelKey_ = options.levelKey;

  /**
   * @type {NetSimShardSelectionPanel}
   * @private
   */
  this.shardSelectionPanel_ = null;

  /**
   * @type {NetSimRemoteNodeSelectionPanel}
   * @private
   */
  this.nodeSelectionPanel_ = null;

  /**
   * @type {NetSimShard}
   * @private
   */
  this.shard_ = null;

  /**
   * @type {NetSimLocalClientNode}
   * @private
   */
  this.myNode_ = null;

  /**
   * Storage for ObservableEvent registration keys, to make sure we
   * can unregister as needed.
   * @type {Object}
   */
  this.eventKeys = {};

  /**
   * @type {DashboardUser}
   * @private
   */
  this.user_ = options.user;

  /**
   * @type {string}
   * @private
   */
  this.displayName_ = options.user.isSignedIn ? options.user.name : '';

  /**
   * Shard options for the current user
   * @type {ShardChoice[]}
   * @private
   */
  this.shardChoices_ = [];

  /**
   * Which shard ID is currently selected
   * @type {string}
   * @private
   */
  this.selectedShardID_ = undefined;

  /**
   * @type {NetSimNode[]}
   * @private
   */
  this.nodesOnShard_ = [];

  /**
   * @type {NetSimNode[]}
   * @private
   */
  this.incomingConnectionNodes_ = [];

  /**
   * @type {NetSimNode}
   * @private
   */
  this.remoteNode_ = null;

  /**
   * Allows multiple methods to have a 'disable' lock on the lobby.
   * @type {Object}
   * @private
   */
  this.disableEverythingKeys_ = {};

  // Figure out the list of user sections, which requires an async request
  // and re-render if the user is signed in.
  if (options.user.isSignedIn) {
    this.getUserSections_((function (sectionList) {
      this.buildShardChoiceList_(sectionList, options.sharedShardSeed);
      this.render();
    }).bind(this));
  } else {
    this.buildShardChoiceList_([], options.sharedShardSeed);
  }

  // Initial render
  this.render();

  // Register for events
  this.netsim_.shardChange.register(this.onShardChange_.bind(this));
};

/**
 * Recreate markup within panel body.
 */
NetSimLobby.prototype.render = function () {
  var isConnectedToShard = this.shard_ !== null;
  if (!isConnectedToShard) {

    // Shard selection panel: Controls for setting display name and picking
    // a section, if they aren't set automatically.
    this.shardSelectionPanel_ = new NetSimShardSelectionPanel(this.rootDiv_, {
      displayName: this.displayName_,
      shardChoices: this.shardChoices_,
      selectedShardID: this.selectedShardID_,
      disableControls: this.isEverythingDisabled()
    }, {
      setNameCallback: this.setDisplayName.bind(this),
      setShardCallback: this.setShardID.bind(this)
    });
  } else {

    // Node selection panel: The lobby list of who we can connect to, and
    // controls for picking one and connecting.
    this.nodeSelectionPanel_ = new NetSimRemoteNodeSelectionPanel(this.rootDiv_, {
      user: this.user_,
      shardID: this.shard_.id,
      nodesOnShard: this.nodesOnShard_,
      incomingConnectionNodes: this.incomingConnectionNodes_,
      remoteNode: this.remoteNode_,
      myNodeID: this.myNode_.entityID,
      disableControls: this.isEverythingDisabled()
    }, {
      addRouterCallback: this.addRouterToLobby.bind(this),
      cancelButtonCallback: this.onCancelButtonClick_.bind(this),
      joinButtonCallback: this.onJoinButtonClick_.bind(this),
      resetShardCallback: this.onResetShardButtonClick_.bind(this)
    });
  }

  this.netsim_.debouncedResizeFooter();
};

NetSimLobby.prototype.updateLayout = function () {
  if (this.nodeSelectionPanel_) {
    this.nodeSelectionPanel_.updateLayout();
  }
};

/**
 * @param {string} displayName
 */
NetSimLobby.prototype.setDisplayName = function (displayName) {
  this.displayName_ = displayName;
  this.render();

  if (this.selectedShardID_ && this.displayName_ && !this.netsim_.isConnectedToShardID(this.selectedShardID_)) {
    this.netsim_.connectToShard(this.selectedShardID_, this.displayName_);
  }
};

/**
 * @param {string} shardID
 */
NetSimLobby.prototype.setShardID = function (shardID) {
  this.selectedShardID_ = shardID;
  this.render();

  if (this.selectedShardID_ && this.displayName_ && !this.netsim_.isConnectedToShardID(this.selectedShardID_)) {
    this.netsim_.connectToShard(this.selectedShardID_, this.displayName_);
  }
};

/**
 * @param {NetSimShard} shard
 * @param {NetSimLocalClientNode} myNode
 * @private
 */
NetSimLobby.prototype.onShardChange_ = function (shard, myNode) {
  // Unregister old handlers
  if (this.eventKeys.registeredShard) {
    this.eventKeys.registeredShard.nodeTable.tableChange.unregister(this.eventKeys.nodeTable);
    this.eventKeys.registeredShard.wireTable.tableChange.unregister(this.eventKeys.wireTable);
    this.registeredShard = undefined;
  }

  this.shard_ = shard;
  this.myNode_ = myNode;

  if (this.shard_) {
    // We got connected to a shard!
    // Register for events
    this.eventKeys.nodeTable = this.shard_.nodeTable.tableChange.register(this.onNodeTableChange_.bind(this));
    this.eventKeys.wireTable = this.shard_.wireTable.tableChange.register(this.onWireTableChange_.bind(this));
    this.eventKeys.registeredShard = this.shard_;

    // Trigger a forced read of the node table
    this.fetchInitialLobbyData_();
  } else {
    // We've been disconnected from a shard
    // Clear our selected shard ID
    this.selectedShardID_ = undefined;

    // Clear cached lobby data
    this.nodesOnShard_.length = 0;
    this.incomingConnectionNodes_.length = 0;

    // Redraw the lobby
    this.render();

    // If there's only one option, try to auto-reconnect
    if (this.shardChoices_.length === 1) {
      this.setShardID(this.shardChoices_[0].shardID);
    }
  }
};

/**
 * Upon connecting to a new shard, we need to trigger a manual read of the
 * node and wire tables to ensure our lobby listing is correct.  Otherwise we'd
 * have to wait until a change was detected in one of those tables.
 * @private
 */
NetSimLobby.prototype.fetchInitialLobbyData_ = function () {
  $.when(this.shard_.nodeTable.refresh(), this.shard_.wireTable.refresh()).fail((function (nodeErr, wireErr) {
    if (nodeErr) {
      logger.warn('Node table refresh failed: ' + nodeErr);
    } else if (wireErr) {
      logger.warn('Wire table refresh failed: ' + wireErr);
    }
  }).bind(this)).done((function () {
    // Because the lobby may not get table-change events from this refresh,
    // manually pass the cached table contents in.
    this.onNodeTableChange_();
    this.onWireTableChange_();

    // If we use routers and there's no router, create a router.
    // TODO: Move this logic to the server, somehow.
    if (NetSimGlobals.getLevelConfig().canConnectToRouters && !this.doesShardContainRouter()) {
      this.addRouterToLobby();
    }
  }).bind(this));
};

/**
 * @returns {boolean} whether the currently cached node data for the shard
 *          includes a router node.
 */
NetSimLobby.prototype.doesShardContainRouter = function () {
  return undefined !== _.find(this.nodesOnShard_, function (shardNode) {
    return shardNode instanceof NetSimRouterNode;
  });
};

/**
 * Generate a new router node, configured according to the current level.
 * The change to the node table should trigger appropriate updates to various
 * UI elements.
 */
NetSimLobby.prototype.addRouterToLobby = function () {
  var enableCallback = this.disableEverything();
  NetSimRouterNode.create(this.shard_, (function (err) {
    enableCallback();
    if (err) {
      var ValidationError = NetSimApiError.ValidationError;
      switch (err.details) {
        case ValidationError.CONFLICT:
          // Another router with the same routerNumber already exists.
          // Ignore this; to the user it looks like it worked!
          logger.warn('Did not create router; ' + 'Another user created a router at the same time.');
          break;

        case ValidationError.LIMIT_REACHED:
          // The server's router limit has been reached.
          // Usually the client will remove the "Add Router" button first.
          logger.warn('Did not create router; Router limit reached.');
          NetSimAlert.warn(i18n.routerLimitReachedError());
          break;

        default:
          // Malformed row or some other unexpected error.
          logger.error("Unable to create router: " + err.message);
          NetSimAlert.error(i18n.addRouterToLobbyError());
      }
    }
  }).bind(this));
};

/**
 * @returns {boolean} TRUE if anything has requested the whole lobby to be
 *          disabled, false otherwise.
 */
NetSimLobby.prototype.isEverythingDisabled = function () {
  return Object.keys(this.disableEverythingKeys_).length > 0;
};

/**
 * Disable all of the lobby controls together.
 * @returns {function} Callback for re-enabling the lobby.
 */
NetSimLobby.prototype.disableEverything = function () {
  var requestKey = utils.createUuid();
  this.disableEverythingKeys_[requestKey] = true;

  if (this.nodeSelectionPanel_) {
    this.nodeSelectionPanel_.disableEverything();
  }

  // Return an 'enable' callback
  return this.enableEverything_.bind(this, requestKey);
};

/**
 * Release a 'disable-hold' on the lobby and re-enable the lobby controls if
 * it was the last such disable-hold.
 * @param {!string} key - a unique identifier for this particular disable request.
 * @private
 */
NetSimLobby.prototype.enableEverything_ = function (key) {
  delete this.disableEverythingKeys_[key];
  if (!this.isEverythingDisabled()) {
    if (this.nodeSelectionPanel_) {
      this.nodeSelectionPanel_.enableEverything();
    }
  }
};

/**
 * Handler for clicking the "Join" button.
 * @param {NetSimClientNode|NetSimRouterNode} nodeToJoin
 */
NetSimLobby.prototype.onJoinButtonClick_ = function (nodeToJoin) {
  var enableCallback = this.disableEverything();
  if (nodeToJoin instanceof NetSimRouterNode) {
    this.netsim_.connectToRouter(nodeToJoin.entityID, enableCallback);
  } else if (nodeToJoin instanceof NetSimClientNode) {
    this.myNode_.connectToClient(nodeToJoin, enableCallback);
  }
};

/**
 * Handler for clicking the "Cancel" button to stop trying to connect to
 * another client.
 * @private
 */
NetSimLobby.prototype.onCancelButtonClick_ = function () {
  var enableCallback = this.disableEverything();
  this.netsim_.disconnectFromRemote(enableCallback);
};

/**
 * Handle for clicking the reset shard button.
 * @private
 */
NetSimLobby.prototype.onResetShardButtonClick_ = function () {
  this.netsim_.resetShard();
};

/**
 * Called whenever a change is detected in the nodes table - which should
 * trigger a refresh of the lobby listing
 * @private
 */
NetSimLobby.prototype.onNodeTableChange_ = function () {
  this.nodesOnShard_ = NetSimNodeFactory.nodesFromRows(this.shard_, this.shard_.nodeTable.readAll());
  this.render();
};

/**
 * Called whenever a change is detected in the wires table.
 * @private
 */
NetSimLobby.prototype.onWireTableChange_ = function () {
  var rows = this.shard_.wireTable.readAll();
  // Update the collection of nodes with connections pointing toward us.
  this.incomingConnectionNodes_ = rows.filter(function (wireRow) {
    return wireRow.remoteNodeID === this.myNode_.entityID;
  }, this).map(function (wireRow) {
    return _.find(this.nodesOnShard_, function (node) {
      return node.entityID === wireRow.localNodeID;
    });
  }, this).filter(function (node) {
    // In case the wire table change comes in before the node table change.
    return node !== undefined;
  });

  // Find outgoing wires
  var outgoingWireRow = _.find(rows, (function (wireRow) {
    return wireRow.localNodeID === this.myNode_.entityID;
  }).bind(this));

  this.remoteNode_ = outgoingWireRow ? _.find(this.nodesOnShard_, function (node) {
    return node.entityID === outgoingWireRow.remoteNodeID;
  }) : null;

  // Re-render with new information
  this.render();
};

/**
 * Send a request to dashboard and retrieve a JSON array listing the
 * sections this user belongs to.
 * @param {function} callback
 * @private
 */
NetSimLobby.prototype.getUserSections_ = function (callback) {
  var memberSectionsRequest = $.ajax({
    dataType: 'json',
    url: '/v2/sections/membership'
  });

  var ownedSectionsRequest = $.ajax({
    dataType: 'json',
    url: '/v2/sections'
  });

  $.when(memberSectionsRequest, ownedSectionsRequest).done(function (result1, result2) {
    var memberSectionData = result1[0];
    var ownedSectionData = result2[0];
    callback(memberSectionData.concat(ownedSectionData));
  });
};

/**
 * Populate the internal cache of shard options, given a set of the current
 * user's sections.
 * @param {Array} sectionList - list of sections this user is a member or
 *        administrator of.  Each section has an id and a name.  May be empty.
 * @param {string} sharedShardSeed - a shard ID present if we reached netsim
 *        via a share link.  We should make sure this shard is an option.
 * @private
 */
NetSimLobby.prototype.buildShardChoiceList_ = function (sectionList, sharedShardSeed) {
  this.shardChoices_.length = 0;

  // If we have a shared shard seed, put it first in the list:
  if (sharedShardSeed) {
    var sharedShardID = this.makeShardIDFromSeed_(sharedShardSeed);
    this.shardChoices_.push({
      shardSeed: sharedShardSeed,
      shardID: sharedShardID,
      displayName: sharedShardSeed
    });
  }

  // Add user's sections to the shard list
  this.shardChoices_ = this.shardChoices_.concat(sectionList.map((function (section) {
    return {
      shardSeed: section.id,
      shardID: this.makeShardIDFromSeed_(section.id),
      displayName: section.name
    };
  }).bind(this)));

  // If there still aren't any options, generate a random shard
  if (this.shardChoices_.length === 0) {
    var seed = utils.createUuid();
    var randomShardID = this.makeShardIDFromSeed_(seed);
    this.shardChoices_.push({
      shardSeed: seed,
      shardID: randomShardID,
      displayName: i18n.myPrivateNetwork()
    });
  }

  // If there's only one possible shard, select it by default
  if (this.shardChoices_.length === 1 && !this.selectedShardID_) {
    this.setShardID(this.shardChoices_[0].shardID);
  }
};

/**
 * Generate a unique shard key from the given seed
 * @param {string} seed
 * @private
 */
NetSimLobby.prototype.makeShardIDFromSeed_ = function (seed) {
  // TODO (bbuchanan) : Hash shard ID, more likely to ensure it's unique
  //                    and fits within 48 characters.
  // Maybe grab this MIT-licensed implementation via node?
  // https://github.com/blueimp/JavaScript-MD5
  return ('ns_' + this.levelKey_ + '_' + seed).substr(0, 48);
};

/**
 * Gets a share URL for the currently-selected shard ID.
 * @returns {string} or empty string if there is no shard selected.
 */
NetSimLobby.prototype.getShareLink = function () {
  if (!this.displayName_) {
    return '';
  }

  var selectedShard = _.find(this.shardChoices_, (function (shard) {
    return shard.shardID === this.selectedShardID_;
  }).bind(this));

  if (selectedShard) {
    var baseLocation = document.location.protocol + '//' + document.location.host + document.location.pathname;
    return baseLocation + '?s=' + selectedShard.shardSeed;
  }

  return '';
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimAlert":"/home/ubuntu/staging/apps/build/js/netsim/NetSimAlert.js","./NetSimApiError":"/home/ubuntu/staging/apps/build/js/netsim/NetSimApiError.js","./NetSimClientNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimClientNode.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimLogger":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogger.js","./NetSimNodeFactory":"/home/ubuntu/staging/apps/build/js/netsim/NetSimNodeFactory.js","./NetSimRemoteNodeSelectionPanel":"/home/ubuntu/staging/apps/build/js/netsim/NetSimRemoteNodeSelectionPanel.js","./NetSimRouterNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterNode.js","./NetSimShardSelectionPanel":"/home/ubuntu/staging/apps/build/js/netsim/NetSimShardSelectionPanel.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimShardSelectionPanel.js":[function(require,module,exports){
/**
 * @overview Lobby UI component used for name entry and selecting a shard/class
 *           section.
 * @see NetSimLobby for usage.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var utils = require('../utils');
var i18n = require('./locale');
var markup = require('./NetSimShardSelectionPanel.html.ejs');
var NetSimPanel = require('./NetSimPanel');

var KeyCodes = require('../constants').KeyCodes;

/**
 * @type {string}
 * @const
 */
var SELECTOR_NONE_VALUE = '';

/**
 * Generator and controller for message log.
 *
 * @param {jQuery} rootDiv
 *
 * @param {Object} options
 * @param {string} options.displayName
 * @param {Array} options.shardChoices
 * @param {string} options.selectedShardID
 *
 * @param {Object} callbacks
 * @param {function} callbacks.setNameCallback
 * @param {function} callbacks.setShardCallback
 *
 * @constructor
 * @augments NetSimPanel
 */
var NetSimShardSelectionPanel = module.exports = function (rootDiv, options, callbacks) {
  /**
   * @type {string}
   * @private
   */
  this.displayName_ = options.displayName;

  /**
   * Shard options for the current user
   * @type {ShardChoice[]}
   * @private
   */
  this.shardChoices_ = utils.valueOr(options.shardChoices, []);

  /**
   * Which shard ID is currently selected
   * @type {string}
   * @private
   */
  this.selectedShardID_ = utils.valueOr(options.selectedShardID, SELECTOR_NONE_VALUE);

  /**
   * @type {function}
   * @private
   */
  this.setNameCallback_ = callbacks.setNameCallback;

  /**
   * @type {function}
   * @private
   */
  this.setShardCallback_ = callbacks.setShardCallback;

  // Initial render
  NetSimPanel.call(this, rootDiv, {
    className: 'netsim-shard-selection-panel',
    panelTitle: i18n.pickASection(),
    userToggleable: false
  });
};
NetSimShardSelectionPanel.inherits(NetSimPanel);

/**
 * Recreate markup within panel body.
 */
NetSimShardSelectionPanel.prototype.render = function () {
  // Create boilerplate panel markup
  NetSimShardSelectionPanel.superPrototype.render.call(this);

  // Add our own content markup
  var newMarkup = $(markup({
    displayName: this.displayName_,
    selectedShardID: this.selectedShardID_,
    shardChoices: this.shardChoices_,
    SELECTOR_NONE_VALUE: SELECTOR_NONE_VALUE
  }));
  this.getBody().html(newMarkup);

  // Bind handlers
  var nameField = this.getBody().find('#netsim-lobby-name');
  nameField.keyup(this.onNameKeyUp_.bind(this));

  var setNameButton = this.getBody().find('#netsim-lobby-set-name-button');
  setNameButton.click(this.setNameButtonClick_.bind(this));

  var shardSelect = this.getBody().find('#netsim-shard-select');
  shardSelect.change(this.onShardSelectChange_.bind(this));
  shardSelect.keyup(this.onShardSelectKeyUp_.bind(this));

  var setShardButton = this.getBody().find('#netsim-shard-confirm-button');
  setShardButton.click(this.setShardButtonClick_.bind(this));

  // At the end of any render we should focus on the earliest unsatisfied
  // field, or if all fields are satisfied, try connecting to the specified
  // shard.
  if (this.displayName_.length === 0) {
    nameField.focus();
  } else if (this.selectedShardID_ === SELECTOR_NONE_VALUE) {
    shardSelect.focus();
  }
};

/**
 * @param {Event} jQueryEvent
 * @private
 */
NetSimShardSelectionPanel.prototype.onNameKeyUp_ = function (jQueryEvent) {
  var name = jQueryEvent.target.value;
  var setNameButton = this.getBody().find('#netsim-lobby-set-name-button');
  setNameButton.attr('disabled', name.length === 0);

  if (name.length > 0 && jQueryEvent.which === KeyCodes.ENTER) {
    this.setNameButtonClick_();
  }
};

/** @private */
NetSimShardSelectionPanel.prototype.setNameButtonClick_ = function () {
  this.setNameCallback_(this.getBody().find('#netsim-lobby-name').val());
};

/**
 * @param {Event} jQueryEvent
 * @private
 */
NetSimShardSelectionPanel.prototype.onShardSelectChange_ = function (jQueryEvent) {
  var shardID = jQueryEvent.target.value;
  var setShardButton = this.getBody().find('#netsim-shard-confirm-button');
  setShardButton.attr('disabled', !shardID || shardID === SELECTOR_NONE_VALUE);
};

/**
 * @param {Event} jQueryEvent
 * @private
 */
NetSimShardSelectionPanel.prototype.onShardSelectKeyUp_ = function (jQueryEvent) {
  var shardID = jQueryEvent.target.value;
  if (shardID && shardID !== SELECTOR_NONE_VALUE && jQueryEvent.which === KeyCodes.ENTER) {
    this.setShardButtonClick_();
  }
};

/** @private */
NetSimShardSelectionPanel.prototype.setShardButtonClick_ = function () {
  this.setShardCallback_(this.getBody().find('#netsim-shard-select').val());
};

},{"../constants":"/home/ubuntu/staging/apps/build/js/constants.js","../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimPanel":"/home/ubuntu/staging/apps/build/js/netsim/NetSimPanel.js","./NetSimShardSelectionPanel.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimShardSelectionPanel.html.ejs","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimShardSelectionPanel.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
  var i18n = require('./locale');
; buf.push('\n<div class="content-wrap">\n  <div class="field-box display-name-control">\n    <label for="netsim-lobby-name">', escape((6,  i18n.myName() )), '</label>\n    <input id="netsim-lobby-name" type="text" value="', escape((7,  displayName )), '" ');7; if (displayName.length > 0) { ; buf.push('disabled');7; } ; buf.push(' />\n    ');8; if (displayName.length === 0) { ; buf.push('\n      <input id="netsim-lobby-set-name-button" type="button" value="', escape((9,  i18n.setName() )), '" disabled />\n    ');10; } ; buf.push('\n  </div>\n  ');12; if (displayName.length > 0) { ; buf.push('\n    <div class="field-box shard-control">\n      <label for="netsim-shard-select">', escape((14,  i18n.mySection() )), '</label>\n      <select id="netsim-shard-select" ');15; if (selectedShardID) { ; buf.push('disabled');15; } ; buf.push('>\n        <option value="', escape((16,  SELECTOR_NONE_VALUE )), '">', escape((16,  i18n.dropdownPickOne() )), '</option>\n        ');17;
          var selectedAnyShard = false;
          shardChoices.forEach(function (shardChoice) {
            var attributes = '';
            if (shardChoice.shardID === selectedShardID) {
              attributes = 'selected';
              selectedAnyShard = true;
            }
            ; buf.push('\n              <option value="', escape((26,  shardChoice.shardID )), '" ', escape((26,  attributes )), '>', escape((26,  shardChoice.displayName )), '</option>\n            ');27;
          });
        ; buf.push('\n      </select>\n      ');31; if (!selectedShardID) { ; buf.push('\n        <input id="netsim-shard-confirm-button" type="button" value="', escape((32,  i18n.joinSection() )), '" ');32; if (!selectedAnyShard) { ; buf.push('disabled');32; } ; buf.push(' />\n      ');33; } ; buf.push('\n    </div>\n  ');35; } ; buf.push('\n  <div class="clearfix"></div>\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimRemoteNodeSelectionPanel.js":[function(require,module,exports){
/**
 * @overview Lobby table UI component.
 * @see NetSimLobby for usage.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var utils = require('../utils');
var _ = utils.getLodash();
var i18n = require('./locale');
var NetSimPanel = require('./NetSimPanel');
var markup = require('./NetSimRemoteNodeSelectionPanel.html.ejs');
var NodeType = require('./NetSimConstants').NodeType;
var NetSimGlobals = require('./NetSimGlobals');
var NetSimUtils = require('./NetSimUtils');
var NetSimRouterNode = require('./NetSimRouterNode');

/**
 * Apply a very small debounce to lobby buttons to avoid doing extra work
 * as a result of double-clicks and/or scripts that want to click buttons a
 * few thousand times.
 * @const {number}
 */
var BUTTON_DEBOUNCE_DURATION_MS = 100;

/**
 * Generator and controller for lobby node listing, selection, and connection
 * controls.
 *
 * @param {jQuery} rootDiv
 *
 * @param {Object} options
 * @param {DashboardUser} options.user
 * @param {string} options.shardID
 * @param {NetSimNode[]} options.nodesOnShard
 * @param {NetSimNode[]} options.incomingConnectionNodes
 * @param {NetSimNode} options.remoteNode - null if not attempting to connect
 * @param {number} options.myNodeID
 * @param {boolean} options.disableControls
 *
 * @param {Object} callbacks
 * @param {function} callbacks.addRouterCallback
 * @param {function} callbacks.cancelButtonCallback
 * @param {function} callbacks.joinButtonCallback
 * @param {function} callbacks.resetShardCallback
 *
 * @constructor
 * @augments NetSimPanel
 */
var NetSimRemoteNodeSelectionPanel = module.exports = function (rootDiv, options, callbacks) {

  /**
   * @type {DashboardUser}
   * @private
   */
  this.user_ = options.user;

  /**
   * @type {string}
   * @private
   */
  this.shardID_ = options.shardID;

  /**
   * @type {NetSimNode[]}
   * @private
   */
  this.nodesOnShard_ = options.nodesOnShard;

  /**
   * @type {NetSimNode[]}
   * @private
   */
  this.incomingConnectionNodes_ = options.incomingConnectionNodes;

  /**
   * @type {NetSimNode}
   * @private
   */
  this.remoteNode_ = options.remoteNode;

  /**
   * @type {number}
   * @private
   */
  this.myNodeID_ = options.myNodeID;

  function buttonDebounce(callback) {
    return _.debounce(callback, BUTTON_DEBOUNCE_DURATION_MS, {
      leading: true,
      trailing: false
    });
  }

  /**
   * Handler for "Add Router" button
   * @type {function}
   * @private
   */
  this.addRouterCallback_ = buttonDebounce(callbacks.addRouterCallback);

  /**
   * Handler for cancel button (backs out of non-mutual connection)
   * @type {function}
   * @private
   */
  this.cancelButtonCallback_ = buttonDebounce(callbacks.cancelButtonCallback);

  /**
   * Handler for "join" button next to each connectable node.
   * @type {function}
   * @private
   */
  this.joinButtonCallback_ = buttonDebounce(callbacks.joinButtonCallback);

  /**
   * Handler for "reset shard" button click.
   * @type {function}
   * @private
   */
  this.resetShardCallback_ = buttonDebounce(callbacks.resetShardCallback);

  // Initial render
  NetSimPanel.call(this, rootDiv, {
    className: 'netsim-lobby-panel',
    panelTitle: this.getLocalizedPanelTitle(),
    userToggleable: false
  });

  if (options.disableControls) {
    this.disableEverything();
  }
};
NetSimRemoteNodeSelectionPanel.inherits(NetSimPanel);

/**
 * Recreate markup within panel body.
 */
NetSimRemoteNodeSelectionPanel.prototype.render = function () {
  // Clone the reference area (with handlers) before we re-render
  var referenceArea = $('#reference_area').first().clone(true);

  // Create boilerplate panel markup
  NetSimRemoteNodeSelectionPanel.superPrototype.render.call(this);

  // Add our own content markup
  var newMarkup = $(markup({
    controller: this,
    nodesOnShard: this.nodesOnShard_,
    incomingConnectionNodes: this.incomingConnectionNodes_,
    remoteNode: this.remoteNode_
  }));
  this.getBody().html(newMarkup);

  this.updateLayout();

  // Move the reference area to beneath the instructions
  this.getBody().find('.reference-area-placeholder').append(referenceArea);

  // Teachers and admins get a special "Reset Simulation" button
  if (this.canCurrentUserResetShard()) {
    this.addButton(i18n.shardResetButton(), this.resetShardCallback_);
  }

  // Button that takes you to the next level.
  NetSimUtils.makeContinueButton(this);

  this.addRouterButton_ = this.getBody().find('#netsim-lobby-add-router');
  this.addRouterButton_.click(unlessDisabled(this.addRouterCallback_));

  this.getBody().find('.join-button').click(unlessDisabled(this.onJoinClick_.bind(this)));
  this.getBody().find('.accept-button').click(unlessDisabled(this.onJoinClick_.bind(this)));
  this.getBody().find('.cancel-button').click(unlessDisabled(this.cancelButtonCallback_));
};

/**
 * Wrap the provided callback in a check to make sure the target is not disabled.
 * @param {function} callback
 * @returns {function}
 */
function unlessDisabled(callback) {
  return function (jQueryEvent) {
    if (!$(jQueryEvent.target).is('[disabled]')) {
      callback(jQueryEvent);
    }
  };
}

/**
 * Updates the layout of the markup, usually in response to a window
 * resize. Currently just adjusts the height of the lobby table to keep
 * everything onscreen.
 */
NetSimRemoteNodeSelectionPanel.prototype.updateLayout = function () {

  var lobbyTable = this.getBody().find('#netsim-scrolling-lobby');
  var container = this.getBody().closest('#netsim-disconnected');

  if (lobbyTable.is(':visible')) {
    lobbyTable.height("none");
    var overflow = container.prop('scrollHeight') - container.prop('clientHeight');

    if (overflow > 0) {
      var newHeight = lobbyTable.height() - overflow;
      var minHeight = lobbyTable.find('tr').first().outerHeight(true);
      lobbyTable.height(Math.max(newHeight, minHeight));
    }
  }
};

/**
 * @returns {string} a localized panel title appropriate to the current level
 *          configuration
 */
NetSimRemoteNodeSelectionPanel.prototype.getLocalizedPanelTitle = function () {
  var levelConfig = NetSimGlobals.getLevelConfig();

  if (levelConfig.canConnectToClients && levelConfig.canConnectToRouters) {
    return i18n.connectToANode();
  } else if (levelConfig.canConnectToClients) {
    return i18n.connectToAPeer();
  } else if (levelConfig.canConnectToRouters) {
    if (levelConfig.broadcastMode) {
      return i18n.connectToARoom();
    }
    return i18n.connectToARouter();
  }
  return i18n.connectToANode();
};

/**
 * @returns {string} localized lobby instructions appropriate to the current
 *          level configuration
 */
NetSimRemoteNodeSelectionPanel.prototype.getLocalizedLobbyInstructions = function () {
  var levelConfig = NetSimGlobals.getLevelConfig();

  if (levelConfig.canConnectToClients && levelConfig.canConnectToRouters) {
    return i18n.lobbyInstructionsGeneral();
  } else if (levelConfig.canConnectToClients) {
    return i18n.lobbyInstructionsForPeers();
  } else if (levelConfig.canConnectToRouters) {
    if (levelConfig.broadcastMode) {
      return i18n.lobbyInstructionsForRooms();
    }
    return i18n.lobbyInstructionsForRouters();
  }
  return i18n.lobbyInstructionsGeneral();
};

/**
 * @param {Event} jQueryEvent
 * @private
 */
NetSimRemoteNodeSelectionPanel.prototype.onJoinClick_ = function (jQueryEvent) {
  var target = $(jQueryEvent.target);
  var nodeID = target.data('nodeId');
  var clickedNode = _.find(this.nodesOnShard_, function (node) {
    return node.entityID === nodeID;
  });

  this.joinButtonCallback_(clickedNode);
};

/**
 * @param {NetSimNode} node
 * @returns {boolean}
 */
NetSimRemoteNodeSelectionPanel.prototype.isMyNode = function (node) {
  return this.myNodeID_ === node.entityID;
};

/**
 * Check whether the level configuration allows connections to the specified
 * node.
 * @param {NetSimNode} connectionTarget
 * @returns {boolean} whether connection to the target is allowed
 */
NetSimRemoteNodeSelectionPanel.prototype.canConnectToNode = function (connectionTarget) {
  // Can't connect to own node
  if (this.isMyNode(connectionTarget)) {
    return false;
  }

  var isClient = connectionTarget.getNodeType() === NodeType.CLIENT;
  var isRouter = connectionTarget.getNodeType() === NodeType.ROUTER;

  // Can't connect to full routers
  if (connectionTarget.isFull()) {
    return false;
  }

  // Permissible connection limited by level configuration
  var levelConfig = NetSimGlobals.getLevelConfig();
  var allowClients = levelConfig.canConnectToClients;
  var allowRouters = levelConfig.canConnectToRouters;
  return isClient && allowClients || isRouter && allowRouters;
};

/**
 * @returns {boolean} TRUE if we have an open outgoing connection request.
 */
NetSimRemoteNodeSelectionPanel.prototype.hasOutgoingRequest = function () {
  return !!this.remoteNode_;
};

/**
 * For use with Array.prototype.filter()
 * @param {NetSimNode} node
 * @returns {boolean} TRUE if the given node should show up in the lobby
 */
NetSimRemoteNodeSelectionPanel.prototype.shouldShowNode = function (node) {
  var levelConfig = NetSimGlobals.getLevelConfig();
  var isClient = node.getNodeType() === NodeType.CLIENT;
  var isRouter = node.getNodeType() === NodeType.ROUTER;
  var showClients = levelConfig.showClientsInLobby;
  var showRouters = levelConfig.showRoutersInLobby;
  return isClient && showClients || isRouter && showRouters;
};

/**
 * @returns {boolean} TRUE if we expect the current user to have permission to
 *          perform a shard reset.  Only governs display of shard reset button,
 *          actual reset is authenticated on the server.
 */
NetSimRemoteNodeSelectionPanel.prototype.canCurrentUserResetShard = function () {
  if (!this.user_) {
    return false;
  } else if (this.user_.isAdmin) {
    return true;
  }

  // Find a section ID in the current shard ID
  var matches = /_(\d+)$/.exec(this.shardID_);
  if (!matches) {
    return false;
  }

  // matches[1] is the first capture group (\d+), the numeric section ID.
  var sectionID = parseInt(matches[1], 10);
  return this.user_.ownsSection(sectionID);
};

/**
 * @returns {boolean} TRUE if it's currently possible to add a new router.
 *          Drives whether the "Add Router" button should be displayed.
 */
NetSimRemoteNodeSelectionPanel.prototype.canAddRouter = function () {
  var levelConfig = NetSimGlobals.getLevelConfig();
  if (this.hasOutgoingRequest() || !levelConfig.showAddRouterButton) {
    return false;
  }

  var routerLimit = NetSimRouterNode.getMaximumRoutersPerShard();
  var routerCount = this.nodesOnShard_.filter(function (node) {
    return NodeType.ROUTER === node.getNodeType();
  }).length;
  return routerCount < routerLimit;
};

/**
 * Disable all of the buttons within the panel (does not apply to panel-header
 * buttons!)
 */
NetSimRemoteNodeSelectionPanel.prototype.disableEverything = function () {
  this.getBody().find('.netsim-button').attr('disabled', true);
};

/**
 * Enable all of the buttons within the panel (does not apply to panel-header
 * buttons!)
 */
NetSimRemoteNodeSelectionPanel.prototype.enableEverything = function () {
  this.getBody().find('.netsim-button').removeAttr('disabled');
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimPanel":"/home/ubuntu/staging/apps/build/js/netsim/NetSimPanel.js","./NetSimRemoteNodeSelectionPanel.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimRemoteNodeSelectionPanel.html.ejs","./NetSimRouterNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterNode.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimRemoteNodeSelectionPanel.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
var utils = require('../utils');
var _ = utils.getLodash();
var i18n = require('./locale');
var NetSimGlobals = require('./NetSimGlobals');
var NodeType = require('./NetSimConstants').NodeType;

/** @type {function} */
var getAssetUrl = NetSimGlobals.getAssetUrlFunction();

/** @type {NetSimLevelConfiguration} */
var levelConfig = NetSimGlobals.getLevelConfig();

/**
 * @typedef {Object} RowMetadata
 * @property {number} nodeID
 * @property {string} classAttr
 * @property {string} displayName
 * @property {string} status
 */

/**
 * For use with Array.prototype.filter()
 * @param {NetSimNode} node
 * @returns {boolean}
 */
var omitIncomingConnectionNodes = function (node) {
  return undefined === _.find(incomingConnectionNodes, function (connectionRequestNode) {
        return connectionRequestNode.entityID === node.entityID;
      });
};

/**
 * For use with Array.prototype.filter()
 * @param {NetSimNode} node
 * @returns {boolean}
 */
var omitOutgoingRequestTargets = function (node) {
  return !remoteNode || (remoteNode.entityID !== node.entityID);
};

/**
 * For use with Array.prototype.map()
 * @param {NetSimNode} node
 * @returns {RowMetadata}
 */
var nodeToRowMetadata = function (node) {
  var displayName = node.getDisplayName();
  var sortKey = displayName;
  var classes = ['user-row'];

  if (node.getNodeType() === NodeType.ROUTER) {
    // Sort routers by left-padded router number (looks like natural sort)
    sortKey = ('000' + node.routerNumber).slice(-3);
    classes = ['router-row'];
  }

  if (controller.isMyNode(node)) {
    classes.push('own-row');
  }

  return {
    nodeID: node.entityID,
    sortKey: sortKey,
    classAttr: classes.join(' '),
    displayName: displayName,
    hostname: node.getHostname(),
    status: node.getStatus(),
    isFull: node.isFull(),
    canConnectToNode: controller.canConnectToNode(node)
  };
};

/**
 * For use with Array.prototype.sort()
 * @param {RowMetadata} a
 * @param {RowMetadata} b
 * @returns {number}
 */
var lobbySort = function (a, b) {
  return (a.sortKey > b.sortKey) ? 1 : -1;
};

var lobbyRows = nodesOnShard
    .filter(controller.shouldShowNode.bind(controller))
    .filter(omitIncomingConnectionNodes)
    .filter(omitOutgoingRequestTargets)
    .map(nodeToRowMetadata)
    .sort(lobbySort);

var requestRows = incomingConnectionNodes
    .filter(controller.shouldShowNode.bind(controller))
    .filter(omitOutgoingRequestTargets)
    .map(nodeToRowMetadata)
    .sort(lobbySort);

var outgoingRequestRows = (remoteNode ? [ remoteNode ] : [])
    .filter(controller.shouldShowNode.bind(controller))
    .map(nodeToRowMetadata);

/**
 * @param {string} buttonText
 * @param {string} buttonID
 * @param {string[]} extraClasses
 * @param {Object} extraAttributes
 * @returns {string} markup for NetSim-style button
 */
function buttonMarkup(buttonText, buttonID, extraClasses, extraAttributes) {
  var classes = utils.valueOr(extraClasses, []);
  classes.push('netsim-button');
  classes.push('large-button');

  extraAttributes = utils.valueOr(extraAttributes, {});

  var markup = '<span class="' + classes.join(' ') + '" ';

  // ID attribute for span tag
  if (buttonID) {
    markup += 'id="' + buttonID + '" ';
  }

  // Extra attributes for span tag
  for (var key in extraAttributes) {
    if (extraAttributes.hasOwnProperty(key)) {
      markup += key + '="' + extraAttributes[key] + '" ';
    }
  }

  markup += '>' + buttonText + '</span>';
  return markup;
}

function writeBeginTable(classname) {
  if (classname) {
    ; buf.push('<table class="', escape((135, classname)), '">');135;
  } else {
    ; buf.push('<table>');137;
  }
}

function writeEndTable() {
  ; buf.push('</table>');142;
}

function writeBeginTbody() {
  ; buf.push('<tbody>');146;
}

function writeEndTbody() {
  ; buf.push('</tbody>');150;
}

function writeHeader(headerText) {
  ; buf.push('\n    <thead>\n      <tr>\n        <th colspan="3">', escape((157,  headerText )), '</th>\n      </tr>\n    </thead>\n  ');160;
}

function writeEmptyRow(contents) {
  contents = utils.valueOr(contents, '');
  ; buf.push('\n    <tr>\n      <td colspan="3" class="empty-row">', (167,  contents ), '</td>\n    </tr>\n  ');169;
}

function writeNodeRow(row, nodeStatus, buttonType, addlClass) {
    var button;
    if (buttonType === 'join-button') {
      button = buttonMarkup(i18n.buttonJoin(), undefined, [buttonType, addlClass], { 'data-node-id': row.nodeID });
    } else if (buttonType === 'accept-button') {
      button = buttonMarkup(i18n.buttonAccept(), undefined, [buttonType, addlClass], { 'data-node-id': row.nodeID });
    } else if (buttonType === 'cancel-button') {
      button = buttonMarkup(i18n.buttonCancel(), undefined, [buttonType, addlClass, 'secondary'], { 'data-node-id': row.nodeID });
    } else if (buttonType === 'full-button') {
      button = buttonMarkup(i18n.buttonFull(), undefined, [buttonType, addlClass], { 'disabled': 'disabled' });
    }
  ; buf.push('\n    <tr>\n      <td nowrap>', escape((185,  row.displayName )), ' <small>(', escape((185,  row.hostname )), ')</small></td>\n      ');186; if (button) { ; buf.push('\n        <td>', (187,  nodeStatus ), '</td>\n        <td class="button-column">\n          ', (189,  button ), '\n        </td>\n      ');191; } else { ; buf.push('\n        <td colspan="2">', (192,  nodeStatus ), '</td>\n      ');193; } ; buf.push('\n    </tr>\n  ');195;
}

; buf.push('\n<div class="content-wrap">\n  <div class="instructions">\n    ', escape((201,  controller.getLocalizedLobbyInstructions() )), '\n    <div class="reference-area-placeholder"></div>\n  </div>\n  <div class="controls">\n\n    ');206;
      // Outgoing request table (hidden if empty)
      if (outgoingRequestRows.length > 0) {
        writeBeginTable();
        writeHeader(i18n.outgoingConnectionRequests());
        writeBeginTbody();
        outgoingRequestRows.forEach(function (row) {
          var outgoingStatus = i18n.lobbyStatusWaitingForOther({
            spinner: '<img src="' + getAssetUrl('media/netsim/loading.gif') + '" />',
            otherName: row.displayName,
            otherStatus: row.status
          });
          writeNodeRow(row, outgoingStatus, 'cancel-button', row.classAttr);
        });
        writeEndTbody();
        writeEndTable();
      }

      // Incoming requests table (hidden if empty)
      if (requestRows.length > 0) {
        writeBeginTable();
        writeHeader(i18n.incomingConnectionRequests());
        writeBeginTbody();
        requestRows.forEach(function (row) {
          var buttonType;
          if (!controller.hasOutgoingRequest() && row.canConnectToNode) {
            buttonType = 'accept-button';
          }
          var incomingStatus = i18n.lobbyStatusWaitingForYou();
          writeNodeRow(row, incomingStatus, buttonType, row.classAttr);
        });
        writeEndTbody();
        writeEndTable();
      }
    ; buf.push('\n\n    ');242;
      // Primary lobby list
      writeBeginTable("nomargin");
      writeHeader(i18n.lobby());
      writeEndTable();
    ; buf.push('\n    <div id="netsim-scrolling-lobby">\n    ');249;
      writeBeginTable();
      writeBeginTbody();
      lobbyRows.forEach(function (row) {
        var buttonType;
        if (!controller.hasOutgoingRequest()) {
          if (row.isFull) {
            buttonType = 'full-button';
          } else if (row.canConnectToNode) {
            buttonType = 'join-button';
          }
        }
        writeNodeRow(row, row.status, buttonType, row.classAttr);
      });

      var buttons = [];

      if (controller.canAddRouter()) {
        var buttonText = levelConfig.broadcastMode ? i18n.addRoom() : i18n.addRouter();
        buttons.push(buttonMarkup(
            buttonText,
            'netsim-lobby-add-router',
            ['secondary']
        ));
      }

      if (levelConfig.showLogBrowserButton) {
        buttons.push(buttonMarkup(
            i18n.logBrowserButton(),
            'show-router-log-modal',
            ['secondary'],
            {
              'data-toggle':'modal',
              'data-target':'#router-log-modal'
            }
        ));
      }

      if (buttons.length > 0) {
        writeEmptyRow(buttons.join(' '));
      } else if (lobbyRows.length === 0) {
        writeEmptyRow(i18n.lobbyIsEmpty());
      }

      writeEndTbody();
      writeEndTable();
    ; buf.push('\n    </div>\n\n  </div>\n  <div class="clear"></div>\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimNodeFactory.js":[function(require,module,exports){
/**
 * @overview Utility methods for generating the right kinds of node controllers
 *           from raw node table rows.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var NetSimConstants = require('./NetSimConstants');

var NodeType = NetSimConstants.NodeType;

var NetSimNodeFactory = module.exports;

/**
 * Given a set of rows from the node table on a shard, gives back a set of node
 * controllers (of appropriate types).
 * @param {!NetSimShard} shard
 * @param {!Array.<Object>} nodeRows
 * @throws when a row doesn't have a mappable node type.
 * @return {Array.<NetSimNode>} nodes for the rows
 */
NetSimNodeFactory.nodesFromRows = function (shard, nodeRows) {
  return nodeRows.map(NetSimNodeFactory.nodeFromRow.bind(this, shard));
};

/**
 * Given a row from the node table on a shard, gives back a node controllers
 * (of appropriate types).
 * @param {!NetSimShard} shard
 * @param {!Object} nodeRow
 * @throws when the row doesn't have a mappable node type.
 * @return {NetSimNode} node for the rows
 */
NetSimNodeFactory.nodeFromRow = function (shard, nodeRow) {
  if (nodeRow.type === NodeType.CLIENT) {
    var NetSimClientNode = require('./NetSimClientNode');
    return new NetSimClientNode(shard, nodeRow);
  } else if (nodeRow.type === NodeType.ROUTER) {
    var NetSimRouterNode = require('./NetSimRouterNode');
    return new NetSimRouterNode(shard, nodeRow);
  }

  // Oops!  We probably shouldn't ever get here.
  throw new Error("Unable to map row to node.");
};

},{"./NetSimClientNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimClientNode.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimRouterNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterNode.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterNode.js":[function(require,module,exports){
/**
 * @overview Router node simulation entity.  Also contains logic for the
 *           auto-DNS system.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var utils = require('../utils');
var i18n = require('./locale');
var NetSimConstants = require('./NetSimConstants');
var NetSimUtils = require('./NetSimUtils');
var NetSimNode = require('./NetSimNode');
var NetSimEntity = require('./NetSimEntity');
var NetSimLogEntry = require('./NetSimLogEntry');
var NetSimLogger = require('./NetSimLogger');
var NetSimWire = require('./NetSimWire');
var NetSimMessage = require('./NetSimMessage');
var ObservableEvent = require('../ObservableEvent');
var Packet = require('./Packet');
var DataConverters = require('./DataConverters');
var NetSimNodeFactory = require('./NetSimNodeFactory');

var _ = utils.getLodash();

var serializeNumber = NetSimUtils.serializeNumber;
var deserializeNumber = NetSimUtils.deserializeNumber;

var asciiToBinary = DataConverters.asciiToBinary;

var DnsMode = NetSimConstants.DnsMode;
var NodeType = NetSimConstants.NodeType;
var BITS_PER_BYTE = NetSimConstants.BITS_PER_BYTE;

var logger = NetSimLogger.getSingleton();
var NetSimGlobals = require('./NetSimGlobals');

/**
 * @type {number}
 * @readonly
 */
var MAX_CLIENT_CONNECTIONS = 6;

/**
 * Conveniently, a router's address in its local network is always zero.
 * @type {number}
 * @readonly
 */
var ROUTER_LOCAL_ADDRESS = 0;

/**
 * Address that can only be used for the auto-dns node.
 * May eventually be replaced with a dynamically assigned address.
 * @type {number}
 * @readonly
 */
var AUTO_DNS_RESERVED_ADDRESS = 15;

/**
 * Hostname assigned to the automatic dns 'node' in the local network.
 * There will only be one of these, so it can be simple.
 * @type {string}
 * @readonly
 */
var AUTO_DNS_HOSTNAME = 'dns';

/**
 * Value the auto-DNS will return instead of an address when it can't
 * locate a node with the given hostname in the local network.
 * @type {string}
 * @readonly
 */
var AUTO_DNS_NOT_FOUND = 'NOT_FOUND';

/**
 * Maximum packet lifetime in the router queue, sort of a primitive Time-To-Live
 * system that helps prevent a queue from being indefinitely blocked by a very
 * large packet.  Packets that exceed this time will silently fail delivery.
 * @type {number}
 * @readonly
 */
var PACKET_MAX_LIFETIME_MS = 10 * 60 * 1000;

/**
 * To avoid calculating a totally unreasonable number of addresses, this is
 * the most addresses we will consider when picking one for a new host.
 * This means full support up to a 12-bit address part, which should be more
 * than enough.
 * @type {number}
 */
var ADDRESS_OPTION_LIMIT = 4096;

/**
 * Client model of simulated router
 *
 * Represents the client's view of a given router, provides methods for
 *   letting the client interact with the router, and wraps the client's
 *   work doing part of the router simulation.
 *
 * A router -exists- when it has a row in the lobby table of type 'router'
 * A router is connected to a user when a 'user' row exists in the lobby
 *   table that has a status 'Connected to {router ID} by wires {X, Y}'.
 * A router will also share a wire (simplex) or wires (duplex) with each user,
 *   which appear in the wire table.
 *
 * @param {!NetSimShard} shard
 * @param {RouterRow} [routerRow] - Lobby row for this router.
 * @constructor
 * @augments NetSimNode
 */
var NetSimRouterNode = module.exports = function (shard, row) {
  row = row !== undefined ? row : {};
  NetSimNode.call(this, shard, row);

  var levelConfig = NetSimGlobals.getLevelConfig();

  /**
   * This router's identifying number, which gets translated into its address.
   * Should be unique among routers on the shard.
   * @type {number}
   */
  this.routerNumber = row.routerNumber;

  /**
   * Unix timestamp (local) of router creation time.
   * @type {number}
   */
  this.creationTime = utils.valueOr(row.creationTime, Date.now());

  /**
   * Sets current DNS mode for the router's local network.
   * This value is manipulated by all clients.
   * @type {DnsMode}
   * @private
   */
  this.dnsMode = utils.valueOr(row.dnsMode, levelConfig.defaultDnsMode);

  /**
   * Sets current DNS node ID for the router's local network.
   * This value is manipulated by all clients.
   * @type {number}
   * @private
   */
  this.dnsNodeID = row.dnsNodeID;

  /**
   * Speed (in bits per second) at which messages are processed.
   * @type {number}
   */
  this.bandwidth = utils.valueOr(deserializeNumber(row.bandwidth), levelConfig.defaultRouterBandwidth);

  /**
   * Amount of data (in bits) that the router queue can hold before it starts
   * dropping packets.
   * @type {number}
   */
  this.memory = utils.valueOr(deserializeNumber(row.memory), levelConfig.defaultRouterMemory);

  /**
   * Percent chance (0-1) that a packet being routed will be dropped for no
   * reason.
   * @type {number}
   */
  this.randomDropChance = utils.valueOr(row.randomDropChance, levelConfig.defaultRandomDropChance);

  /**
   * Determines a subset of connection and message events that this
   * router will respond to, only managing events from the given node ID,
   * to avoid conflicting with other clients also simulating this router.
   *
   * Not persisted on server.
   *
   * @type {number}
   * @private
   */
  this.simulateForSender_ = undefined;

  /**
   * Local cache of the last tick time in the local simulation.
   * Allows us to schedule/timestamp events that don't happen inside the
   * tick event.
   * @type {number}
   * @private
   */
  this.simulationTime_ = 0;

  /**
   * Packet format specification this router will use to parse, route, and log
   * packets that it receives.  Set on router that is simulated by client.
   *
   * Not persisted on server.
   *
   * @type {Packet.HeaderType[]}
   * @private
   */
  this.packetSpec_ = [];

  /**
   * Local cache of our remote row, used to decide whether our state has
   * changed.
   * 
   * Not persisted to server.
   * 
   * @type {Object}
   * @private
   */
  this.stateCache_ = {};

  /**
   * Event others can observe, which we fire when our own remote row changes.
   * 
   * @type {ObservableEvent}
   */
  this.stateChange = new ObservableEvent();

  /**
   * Event others can observe, which we fire when the router statistics
   * change (which may be very frequent...)
   *
   * @type {ObservableEvent}
   */
  this.statsChange = new ObservableEvent();

  /**
   * Local cache of wires attached to this router, used for detecting and
   * broadcasting relevant changes.
   *
   * Not persisted on server.
   *
   * @type {Array}
   * @private
   */
  this.myWireRowCache_ = [];

  /**
   * Event others can observe, which we fire when the router's set of wires
   * changes indicating a change in the local network.
   *
   * @type {ObservableEvent}
   */
  this.wiresChange = new ObservableEvent();

  /**
   * Local cache of log rows associated with this router, used for detecting
   * and broadcasting relevant changes.
   * 
   * @type {Array}
   * @private
   */
  this.myLogRowCache_ = [];

  /**
   * Event others can observe, which we fire when the router's log content
   * changes.
   * 
   * @type {ObservableEvent}
   */
  this.logChange = new ObservableEvent();

  /**
   * Whether router is in the middle of work.  Keeps router from picking up
   * its own change notifications or interrupting its own processes.
   * @type {boolean}
   * @private
   */
  this.isRouterProcessing_ = false;

  /**
   * Local cache of messages that need to be processed by (any simulation
   * of) the router.  Used for tracking router memory, throughput, etc.
   * @type {NetSimMessage[]}
   * @private
   */
  this.routerQueueCache_ = [];

  /**
   * Set of scheduled 'routing events'
   * @type {Object[]}
   * @private
   */
  this.localRoutingSchedule_ = [];

  /**
   * @type {boolean}
   * @private
   */
  this.isAutoDnsProcessing_ = false;

  /**
   * Local cache of messages that need to be processed by (any simulation
   * of) the auto-DNS. Used for stats and limiting.
   * @type {NetSimMessage[]}
   * @private
   */
  this.autoDnsQueue_ = [];

  /**
   * Most clients that can be connected to this router.
   * Moved to instance variable so that tests can override it in certain cases.
   * @type {number}
   * @private
   */
  this.maxClientConnections_ = MAX_CLIENT_CONNECTIONS;
};
NetSimRouterNode.inherits(NetSimNode);

/**
 * Static async creation method. See NetSimEntity.create().
 * @param {!NetSimShard} shard
 * @param {!NodeStyleCallback} onComplete - Method that will be given the
 *        created entity, or null if entity creation failed.
 */
NetSimRouterNode.create = function (shard, onComplete) {
  var nextRouterNumber = 1;
  shard.nodeTable.readAll().forEach(function (node) {
    if (NodeType.ROUTER === node.type && node.routerNumber >= nextRouterNumber) {
      nextRouterNumber = node.routerNumber + 1;
    }
  });

  var entity = new NetSimRouterNode(shard, { routerNumber: nextRouterNumber });
  entity.getTable().create(entity.buildRow(), function (err, row) {
    if (err) {
      onComplete(err, null);
      return;
    }
    onComplete(null, new NetSimRouterNode(shard, row));
  });
};

/**
 * Static async retrieval method.  See NetSimEntity.get().
 * @param {!number} routerID - The row ID for the entity you'd like to find.
 * @param {!NetSimShard} shard
 * @param {!NodeStyleCallback} onComplete - Method that will be given the
 *        found entity, or null if entity search failed.
 */
NetSimRouterNode.get = function (routerID, shard, onComplete) {
  NetSimEntity.get(NetSimRouterNode, routerID, shard, onComplete);
};

/**
 * @typedef {Object} RouterRow
 * @property {number} creationTime - Unix timestamp (local)
 * @property {number} bandwidth - Router max transmission/processing rate
 *           in bits/second
 * @property {number} memory - Router max queue capacity in bits
 * @property {DnsMode} dnsMode - Current DNS mode for the local network
 * @property {number} dnsNodeID - Entity ID of the current DNS node in the
 *           local network.
 * @property {number} randomDropChance - Odds (0-1) that a packet being routed
 *           will be dropped for no reason.
 */

/**
 * Build table row for this node.
 * @returns {RouterRow}
 * @private
 * @override
 */
NetSimRouterNode.prototype.buildRow = function () {
  return utils.extend(NetSimRouterNode.superPrototype.buildRow.call(this), {
    routerNumber: this.routerNumber,
    creationTime: this.creationTime,
    bandwidth: serializeNumber(this.bandwidth),
    memory: serializeNumber(this.memory),
    dnsMode: this.dnsMode,
    dnsNodeID: this.dnsNodeID,
    randomDropChance: this.randomDropChance
  });
};

/**
 * Load state from remoteRow into local model, then notify anything observing
 * us that we've changed.
 * @param {RouterRow} remoteRow
 * @private
 */
NetSimRouterNode.prototype.onMyStateChange_ = function (remoteRow) {
  this.routerNumber = remoteRow.routerNumber;
  this.creationTime = remoteRow.creationTime;
  this.bandwidth = deserializeNumber(remoteRow.bandwidth);
  this.memory = deserializeNumber(remoteRow.memory);
  this.dnsMode = remoteRow.dnsMode;
  this.dnsNodeID = remoteRow.dnsNodeID;
  this.randomDropChance = remoteRow.randomDropChance;
  this.stateChange.notifyObservers(this);
};

/**
 * Performs queued routing and DNS operations.
 * @param {RunLoop.Clock} clock
 */
NetSimRouterNode.prototype.tick = function (clock) {
  this.simulationTime_ = clock.time;
  this.routeOverdueMessages_(clock);
  if (this.dnsMode === DnsMode.AUTOMATIC) {
    this.tickAutoDns_(clock);
  }
};

/**
 * This name is a bit of a misnomer, but it's memorable; we actually route
 * all messages that are DUE or OVERDUE.
 * @param {RunLoop.Clock} clock
 * @private
 */
NetSimRouterNode.prototype.routeOverdueMessages_ = function (clock) {
  if (this.isRouterProcessing_) {
    return;
  }

  // Separate out messages whose scheduled time has arrived or is past.
  // Flag them so we can remove them later.
  var readyScheduleMessages = [];
  var expiredScheduleMessages = [];
  this.localRoutingSchedule_.forEach(function (item) {
    if (clock.time >= item.completionTime) {
      item.beingRouted = true;
      readyScheduleMessages.push(item.message);
    } else if (clock.time >= item.expirationTime) {
      item.beingRouted = true;
      expiredScheduleMessages.push(item.message);
    }
  });

  // If no messages are ready, we're done.
  if (readyScheduleMessages.length + expiredScheduleMessages.length === 0) {
    return;
  }

  // First, remove the expired items.  They just silently vanish
  this.isRouterProcessing_ = true;
  NetSimEntity.destroyEntities(expiredScheduleMessages, (function () {

    // Next, process the messages that are ready for routing
    this.routeMessages_(readyScheduleMessages, (function () {

      // Finally, remove all the schedule entries that we flagged earlier
      this.localRoutingSchedule_ = this.localRoutingSchedule_.filter(function (item) {
        return !item.beingRouted;
      });
      this.isRouterProcessing_ = false;
    }).bind(this));
  }).bind(this));
};

/**
 * Examine the queue, and add/adjust schedule entries for packets that
 * should be handled by the local simulation.  If a packet has no entry,
 * it should be added to the schedule.  If it does and we can see that its
 * scheduled completion time is too far in the future, we should move it up.
 */
NetSimRouterNode.prototype.recalculateSchedule = function () {
  // To calculate our schedule, we keep a rolling "Pessimistic completion time"
  // as we walk down the queue.  This "pessimistic time" is when the packet
  // would finish processing, assuming all of the packets ahead of it in the
  // queue must be processed first and the first packet in the queue is just
  // starting to process now.  We do this because the first packet might be
  // owned by a remote client, so we won't have partial progress information
  // on it.
  //
  // Thus, the pessimistic time is the _latest_ we would expect the router
  // to be done processing the packet given the current bandwidth setting,
  // if the router was an actual hardware device.
  //
  // The estimate is actually _optimistic_ in the sense that it doesn't wait
  // for notification that a remotely-simulated packet is done before
  // processing a locally-simulated one.  We're making our best guess about
  // how the packets would be timed with no latency introducing gaps between
  // packets.
  //
  // If the client simulating the packet at the head of the queue disconnects
  // it won't block other packets from being sent, but it will increase their
  // "pessimistic estimates" until that orphaned packet gets cleaned up.

  var queueSizeInBits = 0;
  var pessimisticCompletionTime = this.simulationTime_;
  var queuedMessage;
  var processingDuration;
  for (var i = 0; i < this.routerQueueCache_.length; i++) {
    queuedMessage = this.routerQueueCache_[i];
    queueSizeInBits += queuedMessage.payload.length;
    processingDuration = this.calculateProcessingDurationForMessage_(queuedMessage);
    pessimisticCompletionTime += processingDuration;

    // Don't schedule beyond memory capacity; we're going to drop those packets
    if (this.localSimulationOwnsMessage_(queuedMessage) && queueSizeInBits <= this.memory) {
      this.scheduleRoutingForMessage(queuedMessage, pessimisticCompletionTime);
    }
  }
};

/**
 * Checks the schedule for the queued row.  If no schedule entry exists, adds
 * a new one with the provided pessimistic completion time.  If it's already
 * scheduled and the pessimistic time given is BETTER than the previously
 * scheduled completion time, will update the schedule entry with the better
 * time.
 * @param {NetSimMessage} queuedMessage
 * @param {number} pessimisticCompletionTime - in local simulation time
 */
NetSimRouterNode.prototype.scheduleRoutingForMessage = function (queuedMessage, pessimisticCompletionTime) {
  var scheduleItem = _.find(this.localRoutingSchedule_, function (item) {
    return item.message.entityID === queuedMessage.entityID;
  });

  if (scheduleItem) {
    // When our pessimistic time is better than our scheduled time we
    // should update the scheduled time.  This can happen when messages
    // earlier in the queue expire, or are otherwise removed earlier than
    // their size led us to expect.
    if (pessimisticCompletionTime < scheduleItem.completionTime) {
      scheduleItem.completionTime = pessimisticCompletionTime;
    }
  } else {
    // If the item doesn't have a schedule entry at all, add it
    this.addMessageToSchedule_(queuedMessage, pessimisticCompletionTime);
  }
};

/**
 * Adds a new entry to the routing schedule, with a default expiration time.
 * @param {NetSimMessage} queuedMessage - message to route
 * @param {number} completionTime - in simulation time
 * @private
 */
NetSimRouterNode.prototype.addMessageToSchedule_ = function (queuedMessage, completionTime) {
  this.localRoutingSchedule_.push({
    message: queuedMessage,
    completionTime: completionTime,
    expirationTime: this.simulationTime_ + PACKET_MAX_LIFETIME_MS,
    beingRouted: false
  });
};

/**
 * Takes a message out of the routing schedule.  Modifies the schedule,
 * should not be called while iterating through the schedule!
 * Does nothing if the message isn't present in the schedule.
 * @param {NetSimMessage} queuedMessage
 * @private
 */
NetSimRouterNode.prototype.removeMessageFromSchedule_ = function (queuedMessage) {
  var scheduleIdx;
  for (var i = 0; i < this.localRoutingSchedule_.length; i++) {
    if (this.localRoutingSchedule_[i].message.entityID === queuedMessage.entityID) {
      scheduleIdx = i;
    }
  }
  if (scheduleIdx !== undefined) {
    this.localRoutingSchedule_.splice(scheduleIdx, 1);
  }
};

/**
 * Lets the auto-DNS part of the router simulation handle its requests.
 * For now, auto-DNS can do "batch" processing, no throughput limits.
 * @private
 */
NetSimRouterNode.prototype.tickAutoDns_ = function () {
  if (this.isAutoDnsProcessing_) {
    return;
  }

  // Filter DNS queue down to requests the local simulation should handle.
  var localSimDnsRequests = this.autoDnsQueue_.filter(this.localSimulationOwnsMessage_.bind(this));

  // If there's nothing we can process, we're done.
  if (localSimDnsRequests.length === 0) {
    return;
  }

  // Process DNS requests
  this.isAutoDnsProcessing_ = true;
  this.processAutoDnsRequests_(localSimDnsRequests, (function () {
    this.isAutoDnsProcessing_ = false;
  }).bind(this));
};

/** @inheritdoc */
NetSimRouterNode.prototype.getDisplayName = function () {
  if (NetSimGlobals.getLevelConfig().broadcastMode) {
    return i18n.roomNumberX({
      x: this.getRouterNumber()
    });
  }

  return i18n.routerNumberX({
    x: this.getRouterNumber()
  });
};

/**
 * Given the level address format string (e.g. "4.4.4.4") which it pulls from
 * globals, returns an array of the parsed lengths of each format part in order
 * (e.g. [4, 4, 4, 4]).
 * @returns {number[]}
 */
function getAddressFormatParts() {
  return NetSimGlobals.getLevelConfig().addressFormat.split(/\D+/).filter(function (part) {
    return part.length > 0;
  }).map(function (part) {
    return parseInt(part, 10);
  });
}

/**
 * Helper that prevents the router's display number or address from being beyond
 * the representable size of the the router part in the address format (if
 * two-part addresses are being used).
 * Does not do anything special to prevent collisions, just returns entityID
 * modulo the assignable address space - but this will be better than having
 * non-conflicting routers you can never address at all.
 * @returns {number}
 */
NetSimRouterNode.prototype.getRouterNumber = function () {
  // If two or more parts, limit our router number to the maximum value of
  // the second-to-last address part.
  var addressFormatParts = getAddressFormatParts();
  if (addressFormatParts.length >= 2) {
    var assignableAddressValues = Math.pow(2, addressFormatParts.reverse()[1]);
    return this.routerNumber % assignableAddressValues;
  }
  return this.routerNumber;
};

/**
 * Get the maximum number of routers that will be allowed on the shard.
 * In most levels this is a strict global value (probably 20).
 * In levels using an address format with two or more parts the second-to-last
 * part determines the addressable space for routers, and the max routers
 * will be the minimum of the global max and the addressable space.
 *
 * @example If the global max routers is 20, but the address format is 4.4,
 *          we can only address 16 routers (less than 20) so 16 is our max
 *          routers per shard value.
 *
 * @returns {number}
 */
NetSimRouterNode.getMaximumRoutersPerShard = function () {
  // If two or more parts, limit our routers to the maximum value of
  // the second-to-last address part.
  var addressFormatParts = getAddressFormatParts();
  if (addressFormatParts.length >= 2) {
    return Math.min(NetSimGlobals.getGlobalMaxRouters(), Math.pow(2, addressFormatParts.reverse()[1]));
  }
  return NetSimGlobals.getGlobalMaxRouters();
};

/**
 * Get node's own address, which is dependent on the address format
 * configured in the level but for routers always ends in zero.
 * @returns {string}
 */
NetSimRouterNode.prototype.getAddress = function () {
  return this.makeLocalNetworkAddress_(ROUTER_LOCAL_ADDRESS);
};

/**
 * Get local network's auto-dns address, which is dependent on the address
 * format configured for the level but the last part should always be 15.
 * @returns {string}
 */
NetSimRouterNode.prototype.getAutoDnsAddress = function () {
  return this.makeLocalNetworkAddress_(AUTO_DNS_RESERVED_ADDRESS);
};

/**
 * Get node's hostname, a modified version of its display name.
 * @returns {string}
 * @override
 */
NetSimRouterNode.prototype.getHostname = function () {
  // Use regex to strip anything that's not a word-character or a digit
  // from the node's display name.  For routers, we don't append the node ID
  // because it's already part of the display name.
  return this.getDisplayName().replace(/[^\w\d]/g, '').toLowerCase();
};

/** @inheritdoc */
NetSimRouterNode.prototype.getNodeType = function () {
  return NodeType.ROUTER;
};

/** @inheritdoc */
NetSimRouterNode.prototype.getStatus = function () {
  var levelConfig = NetSimGlobals.getLevelConfig();
  var connectionCount = this.countConnections();
  if (connectionCount === 0) {
    if (levelConfig.broadcastMode) {
      return i18n.roomStatusNoConnections({
        maximumClients: this.maxClientConnections_
      });
    }

    return i18n.routerStatusNoConnections({
      maximumClients: this.maxClientConnections_
    });
  }

  var connectedNodeNames = this.getConnectedNodeNames_().join(', ');
  if (connectionCount >= this.maxClientConnections_) {
    if (levelConfig.broadcastMode) {
      return i18n.roomStatusFull({
        connectedClients: connectedNodeNames
      });
    }

    return i18n.routerStatusFull({
      connectedClients: connectedNodeNames
    });
  }

  if (levelConfig.broadcastMode) {
    return i18n.roomStatus({
      connectedClients: connectedNodeNames,
      remainingSpace: this.maxClientConnections_ - connectionCount
    });
  }

  return i18n.routerStatus({
    connectedClients: connectedNodeNames,
    remainingSpace: this.maxClientConnections_ - connectionCount
  });
};

/**
 * @returns {string[]} the names of all the nodes connected to this router.
 * @private
 */
NetSimRouterNode.prototype.getConnectedNodeNames_ = function () {
  var cachedNodeRows = this.shard_.nodeTable.readAll();
  return this.getConnections().map(function (wire) {
    var nodeRow = _.find(cachedNodeRows, function (nodeRow) {
      return nodeRow.id === wire.localNodeID;
    });
    if (nodeRow) {
      return nodeRow.name;
    }
    return i18n.unknownNode();
  });
};

/** @inheritdoc */
NetSimRouterNode.prototype.isFull = function () {
  // Determine status based on cached wire data
  var cachedWireRows = this.shard_.wireTable.readAll();
  var incomingWireRows = cachedWireRows.filter(function (wireRow) {
    return wireRow.remoteNodeID === this.entityID;
  }, this);

  return incomingWireRows.length >= this.maxClientConnections_;
};

/**
 * Makes sure that the given specification contains the fields that this
 * router needs to do its job.
 * @param {Packet.HeaderType[]} packetSpec
 * @private
 */
NetSimRouterNode.prototype.validatePacketSpec_ = function (packetSpec) {
  // There are no requirements in broadcast mode
  if (NetSimGlobals.getLevelConfig().broadcastMode) {
    return;
  }

  // Require TO_ADDRESS for routing
  if (!packetSpec.some(function (headerField) {
    return headerField === Packet.HeaderType.TO_ADDRESS;
  })) {
    logger.warn("Packet specification does not have a toAddress field.");
  }

  // Require FROM_ADDRESS for auto-DNS tasks
  if (!packetSpec.some(function (headerField) {
    return headerField === Packet.HeaderType.FROM_ADDRESS;
  })) {
    logger.warn("Packet specification does not have a fromAddress field.");
  }
};

/**
 * Puts this router controller into a mode where it will only
 * simulate for connection and messages -from- the given node.
 * @param {!number} nodeID
 */
NetSimRouterNode.prototype.initializeSimulation = function (nodeID) {
  this.simulateForSender_ = nodeID;
  this.packetSpec_ = NetSimGlobals.getLevelConfig().routerExpectsPacketHeader;
  this.validatePacketSpec_(this.packetSpec_);

  if (nodeID !== undefined) {
    var nodeChangeEvent = this.shard_.nodeTable.tableChange;
    var nodeChangeHandler = this.onNodeTableChange_.bind(this);
    this.nodeChangeKey_ = nodeChangeEvent.register(nodeChangeHandler);

    var wireChangeEvent = this.shard_.wireTable.tableChange;
    var wireChangeHandler = this.onWireTableChange_.bind(this);
    this.wireChangeKey_ = wireChangeEvent.register(wireChangeHandler);

    var logChangeEvent = this.shard_.logTable.tableChange;
    var logChangeHandler = this.onLogTableChange_.bind(this);
    this.logChangeKey_ = logChangeEvent.register(logChangeHandler);

    var newMessageEvent = this.shard_.messageTable.tableChange;
    var newMessageHandler = this.onMessageTableChange_.bind(this);
    this.newMessageEventKey_ = newMessageEvent.register(newMessageHandler);

    // Populate router wire cache with initial data
    this.onWireTableChange_();

    // Populate router log cache with initial data
    this.onLogTableChange_();
  }
};

/**
 * Gives the simulating node a chance to unregister from anything it
 * was observing.
 */
NetSimRouterNode.prototype.stopSimulation = function () {
  if (this.nodeChangeKey_ !== undefined) {
    var nodeChangeEvent = this.shard_.nodeTable.tableChange;
    nodeChangeEvent.unregister(this.nodeChangeKey_);
    this.nodeChangeKey_ = undefined;
  }

  if (this.wireChangeKey_ !== undefined) {
    var wireChangeEvent = this.shard_.wireTable.tableChange;
    wireChangeEvent.unregister(this.wireChangeKey_);
    this.wireChangeKey_ = undefined;
  }

  if (this.logChangeKey_ !== undefined) {
    var logChangeEvent = this.shard_.logTable.tableChange;
    logChangeEvent.unregister(this.logChangeKey_);
    this.logChangeKey_ = undefined;
  }

  if (this.newMessageEventKey_ !== undefined) {
    var newMessageEvent = this.shard_.messageTable.tableChange;
    newMessageEvent.unregister(this.newMessageEventKey_);
    this.newMessageEventKey_ = undefined;
  }
};

/**
 * Puts the router into the given DNS mode, triggers a remote update,
 * and creates/destroys the network's automatic DNS node.
 * @param {DnsMode} newDnsMode
 */
NetSimRouterNode.prototype.setDnsMode = function (newDnsMode) {
  if (this.dnsMode === newDnsMode) {
    return;
  }

  if (this.dnsMode === DnsMode.NONE) {
    this.dnsNodeID = undefined;
  } else if (this.dnsMode === DnsMode.AUTOMATIC) {
    this.dnsNodeID = AUTO_DNS_RESERVED_ADDRESS;
  }

  this.dnsMode = newDnsMode;
  this.update();
};

/**
 * @param {number} newBandwidth in bits per second
 */
NetSimRouterNode.prototype.setBandwidth = function (newBandwidth) {
  if (this.bandwidth === newBandwidth) {
    return;
  }

  this.bandwidth = newBandwidth;
  this.recalculateSchedule();
  this.update();
};

/**
 * @param {number} newMemory in bits
 */
NetSimRouterNode.prototype.setMemory = function (newMemory) {
  if (this.memory === newMemory) {
    return;
  }

  this.memory = newMemory;
  this.enforceMemoryLimit_();
  this.update();
};

/**
 * @returns {NetSimWire[]} all of the wires that are attached to this router.
 */
NetSimRouterNode.prototype.getConnections = function () {
  var shard = this.shard_;
  var routerID = this.entityID;
  return shard.wireTable.readAll().filter(function (wireRow) {
    return wireRow.remoteNodeID === routerID;
  }).map(function (wireRow) {
    return new NetSimWire(shard, wireRow);
  });
};

/**
 * @returns {number} total number of wires connected to this router.
 */
NetSimRouterNode.prototype.countConnections = function () {
  return this.getConnections().length;
};

/**
 * Add a router log entry (not development logging, this is user-facing!)
 * @param {string} packet - binary log payload
 * @param {NetSimLogEntry.LogStatus} status
 */
NetSimRouterNode.prototype.log = function (packet, status) {
  NetSimLogEntry.create(this.shard_, this.entityID, packet, status, function () {});
};

/**
 * @param {Array} haystack
 * @param {*} needle
 * @returns {boolean} TRUE if needle found in haystack
 */
var contains = function contains(haystack, needle) {
  return haystack.some(function (element) {
    return element === needle;
  });
};

/**
 * Called when another node establishes a connection to this one, giving this
 * node a chance to reject the connection.
 *
 * The router checks against its connection limit, and rejects the connection
 * if its limit is now exceeded.
 *
 * @param {!NetSimNode} otherNode attempting to connect to this one
 * @param {!NodeStyleCallback} onComplete response method - should call with TRUE
 *        if connection is allowed, FALSE if connection is rejected.
 */
NetSimRouterNode.prototype.acceptConnection = function (otherNode, onComplete) {
  var rejectionReason = null;

  // Force a refresh to verify that we have not exceeded the connection limit.
  this.shard_.wireTable.refresh().done((function () {
    var connections = this.getConnections();

    // Check for connection limit exceeded
    if (connections.length > this.maxClientConnections_) {
      rejectionReason = new Error("Too many connections.");
      return;
    }

    // Check for address collisions
    var addressesSoFar = {};
    addressesSoFar[this.getAddress()] = true;
    addressesSoFar[this.getAutoDnsAddress()] = true;
    var addressCollision = connections.some(function (wire) {
      var collides = addressesSoFar.hasOwnProperty(wire.localAddress);
      addressesSoFar[wire.localAddress] = true;
      return collides;
    });
    if (addressCollision) {
      rejectionReason = new Error("Address collision detected.");
    }
  }).bind(this)).fail(function (err) {
    logger.info("Rejected connection from " + otherNode.getDisplayName() + ": " + err.message);
    rejectionReason = err;
  }).always(function () {
    onComplete(rejectionReason, null === rejectionReason);
  });
};

/**
 * Generate a list of available addresses, then pick one at random and return it.
 * @returns {string} a new available address.
 */
NetSimRouterNode.prototype.getRandomAvailableClientAddress = function () {
  var addressList = this.getConnections().filter(function (wire) {
    return wire.localAddress !== undefined;
  }).map(function (wire) {
    return wire.localAddress;
  });

  // Generate a list of unused addresses in the addressable space (to a limit)
  var addressFormat = NetSimGlobals.getLevelConfig().addressFormat;
  var addressPartSizes = addressFormat.split(/\D+/).filter(function (part) {
    return part.length > 0;
  }).map(function (part) {
    return parseInt(part, 10);
  }).reverse();
  var maxLocalAddresses = Math.min(Math.pow(2, addressPartSizes[0]), ADDRESS_OPTION_LIMIT);

  var possibleAddresses = [];
  var nextAddress;
  for (var i = 0; i < maxLocalAddresses; i++) {
    nextAddress = this.makeLocalNetworkAddress_(i);
    // Verify that the address in question is not taken already.
    if (!(nextAddress === this.getAddress() || nextAddress === this.getAutoDnsAddress() || contains(addressList, nextAddress))) {
      possibleAddresses.push(nextAddress);
    }
  }

  var randomIndex = NetSimGlobals.randomIntInRange(0, possibleAddresses.length);
  return possibleAddresses[randomIndex];
};

/**
 * Generate an address matching the level's configured address format, that
 * falls within this router's local network and ends in the given value.
 * @param {number} lastPart
 * @returns {string}
 * @private
 */
NetSimRouterNode.prototype.makeLocalNetworkAddress_ = function (lastPart) {
  var addressFormat = NetSimGlobals.getLevelConfig().addressFormat;
  var usedLastPart = false;
  var usedRouterID = false;

  return addressFormat.split(/(\D+)/).reverse().map((function (part) {
    var bitWidth = parseInt(part, 10);
    if (isNaN(bitWidth)) {
      // This is a non-number part, pass it through to the result
      return part;
    }

    if (!usedLastPart) {
      usedLastPart = true;
      return lastPart.toString();
    }

    if (!usedRouterID) {
      usedRouterID = true;
      return this.getRouterNumber().toString();
    }

    return '0';
  }).bind(this)).reverse().join('');
};

/**
 * @returns {Array} A list of remote nodes connected to this router, including
 *          their hostname, address, whether they are the local node, and
 *          whether they are the current DNS node for the network.
 */
NetSimRouterNode.prototype.getAddressTable = function () {
  var addressTable = this.myWireRowCache_.map((function (row) {
    return {
      hostname: row.localHostname,
      address: row.localAddress,
      isLocal: row.localNodeID === this.simulateForSender_,
      isDnsNode: row.localNodeID === this.dnsNodeID
    };
  }).bind(this));

  // Special case: In auto-dns mode we add the DNS entry to the address table
  if (this.dnsMode === DnsMode.AUTOMATIC) {
    addressTable.push({
      hostname: AUTO_DNS_HOSTNAME,
      address: this.getAutoDnsAddress(),
      isLocal: false,
      isDnsNode: true
    });
  }

  return addressTable;
};

/**
 * Given a node ID, finds the local network address of that node.  Cannot
 * be used to find the address of the router or auto-dns node (since their
 * node IDs are not unique).  Will return undefined if the node ID is not
 * found.
 *
 * @param {number} nodeID
 * @returns {number|undefined}
 * @private
 */
NetSimRouterNode.prototype.getAddressForNodeID_ = function (nodeID) {
  var wireRow = _.find(this.myWireRowCache_, function (row) {
    return row.localNodeID === nodeID;
  });

  if (wireRow !== undefined) {
    return wireRow.localAddress;
  }
  return undefined;
};

/**
 * Given a hostname, finds the local network address of the node with that
 * hostname.  Will return undefined if no node with that hostname is found.
 *
 * @param {string} hostname
 * @returns {number|undefined}
 * @private
 */
NetSimRouterNode.prototype.getAddressForHostname_ = function (hostname) {
  if (hostname === this.getHostname()) {
    return this.getAddress();
  }

  if (this.dnsMode === DnsMode.AUTOMATIC && hostname === AUTO_DNS_HOSTNAME) {
    return this.getAutoDnsAddress();
  }

  var wireRow = _.find(this.myWireRowCache_, function (row) {
    return row.localHostname === hostname;
  });

  if (wireRow !== undefined) {
    return wireRow.localAddress;
  }

  // If we don't have connected routers, this is as far as the auto-DNS can see.
  if (!NetSimGlobals.getLevelConfig().connectedRouters) {
    return undefined;
  }

  // Is it some node elsewhere on the shard?
  var nodes = NetSimNodeFactory.nodesFromRows(this.shard_, this.shard_.nodeTable.readAll());
  var node = _.find(nodes, function (node) {
    return node.getHostname() === hostname;
  });
  if (node) {
    return node.getAddress();
  }

  return undefined;
};

/**
 * Given a local network address, finds the node ID of the node at that
 * address.  Will return undefined if no node is found at the given address.
 *
 * @param {string} address
 * @returns {number|undefined}
 * @private
 */
NetSimRouterNode.prototype.getNodeIDForAddress_ = function (address) {
  if (address === this.getAddress()) {
    return this.entityID;
  }

  if (this.dnsMode === DnsMode.AUTOMATIC && address === this.getAutoDnsAddress()) {
    return this.entityID;
  }

  var wireRow = _.find(this.myWireRowCache_, function (row) {
    return row.localAddress === address;
  });

  if (wireRow !== undefined) {
    return wireRow.localNodeID;
  }
  return undefined;
};

/**
 * Given a network address, finds the node that is the next step along the
 * correct path from this router to that address.  Will return null if no
 * path to the address is found.
 * @param {string} address
 * @param {number} hopsRemaining
 * @param {number[]} visitedNodeIDs
 * @returns {NetSimNode|null}
 * @private
 */
NetSimRouterNode.prototype.getNextNodeTowardAddress_ = function (address, hopsRemaining, visitedNodeIDs) {
  // Is it us?
  if (address === this.getAddress()) {
    return this;
  }

  // Is it our Auto-DNS node?
  if (this.dnsMode === DnsMode.AUTOMATIC && address === this.getAutoDnsAddress()) {
    return this;
  }

  // Is it a local client?
  var nodes = NetSimNodeFactory.nodesFromRows(this.shard_, this.shard_.nodeTable.readAll());
  var wireRow = _.find(this.myWireRowCache_, function (row) {
    return row.localAddress === address;
  });
  if (wireRow !== undefined) {
    var localClient = _.find(nodes, function (node) {
      return node.entityID === wireRow.localNodeID;
    });
    if (localClient !== undefined) {
      return localClient;
    }
  }

  // End of local subnet cases:
  // In levels where routers are not connected, this is as far as we go.
  var levelConfig = NetSimGlobals.getLevelConfig();
  if (!levelConfig.connectedRouters) {
    return null;
  }

  // Is it another node?
  var destinationNode = _.find(nodes, function (node) {
    return address === node.getAddress() || node.dnsMode === DnsMode.AUTOMATIC && node.getNodeType() === NodeType.ROUTER && address === node.getAutoDnsAddress();
  });

  // If the node we're after doesn't exist anywhere, we should stop now.
  if (!destinationNode) {
    return null;
  }

  // We are trying to get somewhere else!  Figure out what the target router
  // for our destination is.
  var destinationRouter = null;
  if (destinationNode.getNodeType() === NodeType.ROUTER) {
    destinationRouter = destinationNode;
  } else {
    var destinationWire = destinationNode.getOutgoingWire();
    if (destinationWire) {
      destinationRouter = utils.valueOr(_.find(nodes, function (node) {
        return node.entityID === destinationWire.remoteNodeID;
      }), null);
    }
  }

  if (!destinationRouter) {
    return null;
  }

  // If we have extra hops, we should try and go to a router that is NOT
  // the target router.
  if (hopsRemaining > 0) {
    // Generate the set of possible target routers
    var possibleDestinationRouters = nodes.filter(function (node) {
      return node.getNodeType() === NodeType.ROUTER && node.entityID !== destinationRouter.entityID && node.entityID !== this.entityID && !visitedNodeIDs.some(function (visitedID) {
        return node.entityID === visitedID;
      });
    }, this);
    if (possibleDestinationRouters.length > 0) {
      return NetSimGlobals.randomPickOne(possibleDestinationRouters);
    }
  }

  // If there's nowhere else to go or we are out of extra hops, go to the
  // target router.
  return destinationRouter;
};

/**
 * When the node table changes, we check whether our own row has changed
 * and propagate those changes as appropriate.
 * @private
 * @throws
 */
NetSimRouterNode.prototype.onNodeTableChange_ = function () {
  var myRow = _.find(this.shard_.nodeTable.readAll(), (function (row) {
    return row.id === this.entityID;
  }).bind(this));

  if (myRow === undefined) {
    // This can happen now, to non-primary routers, because detection
    // of the router's removal (stopping its simulation) in NetSimLocalClientNode
    // and this method happen in an uncertain order.
    return;
  }

  if (!_.isEqual(this.stateCache_, myRow)) {
    this.stateCache_ = myRow;
    this.onMyStateChange_(myRow);
  }
};

/**
 * When the wires table changes, we may have a new connection or have lost
 * a connection.  Propagate updates about our connections
 * @private
 */
NetSimRouterNode.prototype.onWireTableChange_ = function () {
  var myWireRows = this.shard_.wireTable.readAll().filter((function (row) {
    return row.remoteNodeID === this.entityID;
  }).bind(this));

  if (!_.isEqual(this.myWireRowCache_, myWireRows)) {
    this.myWireRowCache_ = myWireRows;
    this.wiresChange.notifyObservers();
  }
};

/**
 * When the logs table changes, we may have a new connection or have lost
 * a connection.  Propagate updates about our connections
 * @private
 */
NetSimRouterNode.prototype.onLogTableChange_ = function () {
  var myLogRows = this.shard_.logTable.readAll().filter((function (row) {
    return row.nodeID === this.entityID;
  }).bind(this));

  if (!_.isEqual(this.myLogRowCache_, myLogRows)) {
    this.myLogRowCache_ = myLogRows;
    this.logChange.notifyObservers();
  }
};

/**
 * Get list of log entries in this router's memory.
 * @returns {NetSimLogEntry[]}
 */
NetSimRouterNode.prototype.getLog = function () {
  return this.myLogRowCache_.map((function (row) {
    return new NetSimLogEntry(this.shard_, row, this.packetSpec_);
  }).bind(this));
};

/**
 * @returns {number} the number of packets in the router queue
 */
NetSimRouterNode.prototype.getQueuedPacketCount = function () {
  return this.routerQueueCache_.length;
};

/**
 * @returns {number} router memory currently in use, in bits
 */
NetSimRouterNode.prototype.getMemoryInUse = function () {
  return this.routerQueueCache_.reduce(function (prev, cur) {
    return prev + cur.payload.length;
  }, 0);
};

/**
 * @returns {number} expected router data rate (in bits per second) over the
 *          next second
 */
NetSimRouterNode.prototype.getCurrentDataRate = function () {
  // For simplicity, we're defining the 'curent data rate' as how many bits
  // we expect to get processed in the next second; which is our queue size,
  // capped at our bandwidth.
  return Math.min(this.getMemoryInUse(), this.bandwidth);
};

/**
 * When the message table changes, we might have a new message to handle.
 * Check for and handle unhandled messages.
 * @private
 * @throws if this method is called on a non-simulating router.
 */
NetSimRouterNode.prototype.onMessageTableChange_ = function () {
  if (!this.simulateForSender_) {
    // What?  Only simulating routers should be hooked up to message notifications.
    throw new Error("Non-simulating router got message table change notifiction");
  }

  var messages = this.shard_.messageTable.readAll().map((function (row) {
    return new NetSimMessage(this.shard_, row);
  }).bind(this));

  this.updateRouterQueue_(messages);

  if (this.dnsMode === DnsMode.AUTOMATIC) {
    this.updateAutoDnsQueue_(messages);
  }
};

/**
 * Updates our cache of all messages that are going to the router (regardless
 * of which simulation will handle them), so we can use it for stats and rate
 * limiting.
 * @param {NetSimMessage[]} messages
 */
NetSimRouterNode.prototype.updateRouterQueue_ = function (messages) {
  var newQueue = messages.filter(NetSimMessage.isValid).filter(this.isMessageToRouter_.bind(this));
  if (_.isEqual(this.routerQueueCache_, newQueue)) {
    return;
  }

  logger.info(this.getDisplayName() + ': Message queue updated (size ' + newQueue.length + ')');

  this.routerQueueCache_ = newQueue;
  this.recalculateSchedule();
  this.enforceMemoryLimit_();
  this.statsChange.notifyObservers(this);
};

/**
 * Checks the router queue for packets beyond the router's memory limit,
 * and drops the first one we simulate locally.  Since this will trigger
 * a table change, this will occur async-recursively until all packets
 * over the memory limit are dropped.
 * @private
 */
NetSimRouterNode.prototype.enforceMemoryLimit_ = function () {
  // Only proceed if a packet we simulate exists beyond the memory limit
  var droppablePacket = this.findFirstLocallySimulatedPacketOverMemoryLimit();
  if (!droppablePacket) {
    return;
  }

  this.removeMessageFromSchedule_(droppablePacket);
  droppablePacket.destroy((function (err) {
    if (err) {
      // Rarely, this could fire twice for one packet and have one drop fail.
      // That's fine; just don't log if we didn't successfully drop.
      return;
    }

    this.log(droppablePacket.payload, NetSimLogEntry.LogStatus.DROPPED);
  }).bind(this));
};

/**
 * Walk the router queue, and return the first packet we find beyond the router's
 * memory capacity that the local simulation controls and is able to drop.
 * @returns {NetSimMessage|null} null if no such message is found.
 */
NetSimRouterNode.prototype.findFirstLocallySimulatedPacketOverMemoryLimit = function () {
  var packet;
  var usedMemory = 0;
  for (var i = 0; i < this.routerQueueCache_.length; i++) {
    packet = this.routerQueueCache_[i];
    usedMemory += packet.payload.length;
    if (usedMemory > this.memory && this.localSimulationOwnsMessage_(packet)) {
      return packet;
    }
  }
  return null;
};

/**
 * @param {NetSimMessage} message
 * @returns {boolean} TRUE if this message is destined for the router (not the
 *          auto-DNS part though!) and FALSE if destined anywhere else.
 * @private
 */
NetSimRouterNode.prototype.isMessageToRouter_ = function (message) {
  if (this.dnsMode === DnsMode.AUTOMATIC && this.isMessageToAutoDns_(message)) {
    return false;
  }

  return message.toNodeID === this.entityID;
};

NetSimRouterNode.prototype.routeMessages_ = function (messages, onComplete) {
  if (messages.length === 0) {
    onComplete(null);
    return;
  }

  this.routeMessage_(messages[0], (function (err, result) {
    if (err) {
      onComplete(err, result);
      return;
    }

    this.routeMessages_(messages.slice(1), onComplete);
  }).bind(this));
};

/**
 *
 * @param {NetSimMessage} message
 * @param {!NodeStyleCallback} onComplete
 * @private
 */
NetSimRouterNode.prototype.routeMessage_ = function (message, onComplete) {
  message.destroy((function (err, result) {
    if (err) {
      onComplete(err, result);
      return;
    }

    // Apply random chance to drop packet, right as we are about to forward it
    if (this.randomDropChance > 0 && NetSimGlobals.random() <= this.randomDropChance) {
      this.log(message.payload, NetSimLogEntry.LogStatus.DROPPED);
      onComplete(null);
      return;
    }

    var levelConfig = NetSimGlobals.getLevelConfig();
    if (levelConfig.broadcastMode) {
      this.forwardMessageToAll_(message, onComplete);
    } else {
      this.forwardMessageToRecipient_(message, onComplete);
    }
  }).bind(this));
};

/**
 * Forward the given message to all nodes that are connected to this router.
 * This is effectively "hub" operation.
 * @param {NetSimMessage} message
 * @param {!NodeStyleCallback} onComplete
 * @private
 */
NetSimRouterNode.prototype.forwardMessageToAll_ = function (message, onComplete) {
  // Assumptions for broadcast mode:
  // 1. We can totally ignore packet headers, because addresses don't matter
  // 2. We won't send to the Auto-DNS, since DNS make no sense with no addresses

  // Grab the list of all connected nodes
  var connectedNodeIDs = this.myWireRowCache_.map(function (wireRow) {
    return wireRow.localNodeID;
  });

  this.forwardMessageToNodeIDs_(message, connectedNodeIDs, (function (err, result) {
    if (err) {
      this.log(message.payload, NetSimLogEntry.LogStatus.DROPPED);
    } else {
      this.log(message.payload, NetSimLogEntry.LogStatus.SUCCESS);
    }
    onComplete(err, result);
  }).bind(this));
};

/**
 * Forward the given message to the list of node IDs provided.
 * This function works by calling itself recursively with the tail of the
 * node ID list each time it finishes sending one of the messages, so
 * timing on this "broadcast" won't be exactly correct - that's probably okay
 * though, especially at the point in the curriculum where this is used.
 * @param {NetSimMessage} message
 * @param {number[]} nodeIDs
 * @param {!NodeStyleCallback} onComplete
 * @private
 */
NetSimRouterNode.prototype.forwardMessageToNodeIDs_ = function (message, nodeIDs, onComplete) {

  var messages = nodeIDs.map(function (nodeID) {
    return {
      fromNodeID: this.entityID,
      toNodeID: nodeID,
      simulatedBy: nodeID,
      payload: message.payload
    };
  }, this);

  NetSimMessage.sendMany(this.shard_, messages, onComplete);
};

/**
 * Read the given message to find its destination address, try and map that
 * address to one of our connections, and send the message payload to
 * the new address.
 *
 * @param {NetSimMessage} message
 * @param {!NodeStyleCallback} onComplete
 * @private
 */
NetSimRouterNode.prototype.forwardMessageToRecipient_ = function (message, onComplete) {
  var toAddress;
  var routerNodeID = this.entityID;

  // Find a connection to route this message to.
  try {
    var packet = new Packet(this.packetSpec_, message.payload);
    toAddress = packet.getHeaderAsAddressString(Packet.HeaderType.TO_ADDRESS);
  } catch (error) {
    logger.warn("Packet not readable by router");
    this.log(message.payload, NetSimLogEntry.LogStatus.DROPPED);
    onComplete(null);
    return;
  }

  var destinationNode = this.getNextNodeTowardAddress_(toAddress, message.extraHopsRemaining, message.visitedNodeIDs);
  if (destinationNode === null) {
    // Can't find or reach the address within the simulation
    logger.warn("Destination address not reachable");
    this.log(message.payload, NetSimLogEntry.LogStatus.DROPPED);
    onComplete(null);
    return;
  } else if (destinationNode === this && toAddress === this.getAddress()) {
    // This router IS the packet's destination, it's done.
    logger.warn("Packet stopped at router.");
    this.log(message.payload, NetSimLogEntry.LogStatus.SUCCESS);
    onComplete(null);
    return;
  }

  // TODO: Handle bad state where more than one wire matches dest address?

  // The sender simulates a message until it reaches the final leg of its trip,
  // when it's going to a client node.  At that point, the recipient takes over.
  var simulatingNodeID = message.simulatedBy;
  if (destinationNode.getNodeType() === NodeType.CLIENT) {
    simulatingNodeID = destinationNode.entityID;
  }

  // Create a new message with a new payload.
  NetSimMessage.send(this.shard_, {
    fromNodeID: routerNodeID,
    toNodeID: destinationNode.entityID,
    simulatedBy: simulatingNodeID,
    payload: message.payload,
    extraHopsRemaining: Math.max(0, message.extraHopsRemaining - 1),
    visitedNodeIDs: message.visitedNodeIDs.concat(this.entityID)
  }, (function (err, result) {
    this.log(message.payload, NetSimLogEntry.LogStatus.SUCCESS);
    onComplete(err, result);
  }).bind(this));
};

/**
 * @param {NetSimMessage} message
 * @returns {boolean} TRUE if the given message should be operated on by the local
 *          simulation, FALSE if another user's simulation should handle it.
 * @private
 */
NetSimRouterNode.prototype.localSimulationOwnsMessage_ = function (message) {
  return this.simulateForSender_ && message.simulatedBy === this.simulateForSender_;
};

/**
 * @param {NetSimMessage} message
 * @returns {number} time required to process this message, in milliseconds.
 * @private
 */
NetSimRouterNode.prototype.calculateProcessingDurationForMessage_ = function (message) {
  if (this.bandwidth === Infinity) {
    return 0;
  }
  return message.payload.length * 1000 / this.bandwidth;
};

/**
 * Update queue of all auto-dns messages, which can be used for stats or limiting.
 * @param {NetSimMessage[]} messages
 * @private
 */
NetSimRouterNode.prototype.updateAutoDnsQueue_ = function (messages) {
  var newQueue = messages.filter(this.isMessageToAutoDns_.bind(this));
  if (_.isEqual(this.autoDnsQueue_, newQueue)) {
    return;
  }

  this.autoDnsQueue_ = newQueue;
  // Propagate notification of queue change?
  // Work will proceed on next tick
};

/**
 * @param {NetSimMessage} message
 * @return {boolean}
 */
NetSimRouterNode.prototype.isMessageToAutoDns_ = function (message) {
  var packet, toAddress;
  try {
    packet = new Packet(this.packetSpec_, message.payload);
    toAddress = packet.getHeaderAsAddressString(Packet.HeaderType.TO_ADDRESS);
  } catch (error) {
    logger.warn("Packet not readable by auto-DNS: " + error);
    return false;
  }

  // Messages to the auto-dns are both to and from the router node, and
  // addressed to the DNS.
  return message.toNodeID === this.entityID && message.fromNodeID === this.entityID && toAddress === this.getAutoDnsAddress();
};

/**
 * Batch-process DNS requests, generating responses wherever possible.
 * @param {NetSimMessage[]} messages
 * @param {!NodeStyleCallback} onComplete
 * @private
 */
NetSimRouterNode.prototype.processAutoDnsRequests_ = function (messages, onComplete) {
  // 1. Remove the requests from the wire
  NetSimEntity.destroyEntities(messages, (function (err, result) {
    if (err) {
      onComplete(err, result);
      return;
    }

    // 2. Generate all responses, asynchronously.
    this.generateDnsResponses_(messages, onComplete);
  }).bind(this));
};

/**
 * @param {NetSimMessage[]} messages
 * @param {!NodeStyleCallback} onComplete
 * @private
 */
NetSimRouterNode.prototype.generateDnsResponses_ = function (messages, onComplete) {
  if (messages.length === 0) {
    onComplete(null);
    return;
  }

  // Process head
  this.generateDnsResponse_(messages[0], (function (err, result) {
    if (err) {
      onComplete(err, result);
      return;
    }

    // Process tail
    this.generateDnsResponses_(messages.slice(1), onComplete);
  }).bind(this));
};

/**
 * @param {NetSimMessage} message
 * @param {!NodeStyleCallback} onComplete
 * @private
 */
NetSimRouterNode.prototype.generateDnsResponse_ = function (message, onComplete) {
  var packet, fromAddress, query, responseHeaders, responseBody, responseBinary;
  var routerNodeID = this.entityID;
  var autoDnsNodeID = this.entityID;

  // Extract message contents
  try {
    packet = new Packet(this.packetSpec_, message.payload);
    fromAddress = packet.getHeaderAsAddressString(Packet.HeaderType.FROM_ADDRESS);
    query = packet.getBodyAsAscii(BITS_PER_BYTE);
  } catch (error) {
    // Malformed packet, ignore
    onComplete(error);
    return;
  }

  // Check that the query is well-formed
  // Regex match "GET [hostnames...]"
  // Then below, we'll split the hostnames on whitespace to process them.
  var requestMatch = query.match(/GET\s+(\S.*)/);
  if (requestMatch !== null) {
    // Good request, look up all addresses and build up response
    // Skipping first match, which is the full regex
    var responses = requestMatch[1].split(/\s+/).map((function (queryHostname) {
      var address = this.getAddressForHostname_(queryHostname);
      return queryHostname + ':' + utils.valueOr(address, AUTO_DNS_NOT_FOUND);
    }).bind(this));
    responseBody = responses.join(' ');
  } else {
    // Malformed request, send back instructions
    responseBody = i18n.autoDnsUsageMessage();
  }

  responseHeaders = {
    fromAddress: this.getAutoDnsAddress(),
    toAddress: fromAddress,
    packetIndex: 1,
    packetCount: 1
  };

  responseBinary = packet.encoder.concatenateBinary(packet.encoder.makeBinaryHeaders(responseHeaders), asciiToBinary(responseBody, BITS_PER_BYTE));

  NetSimMessage.send(this.shard_, {
    fromNodeID: autoDnsNodeID,
    toNodeID: routerNodeID,
    simulatedBy: message.simulatedBy,
    payload: responseBinary
  }, onComplete);
};

},{"../ObservableEvent":"/home/ubuntu/staging/apps/build/js/ObservableEvent.js","../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./DataConverters":"/home/ubuntu/staging/apps/build/js/netsim/DataConverters.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimEntity":"/home/ubuntu/staging/apps/build/js/netsim/NetSimEntity.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimLogEntry":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogEntry.js","./NetSimLogger":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogger.js","./NetSimMessage":"/home/ubuntu/staging/apps/build/js/netsim/NetSimMessage.js","./NetSimNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimNode.js","./NetSimNodeFactory":"/home/ubuntu/staging/apps/build/js/netsim/NetSimNodeFactory.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js","./NetSimWire":"/home/ubuntu/staging/apps/build/js/netsim/NetSimWire.js","./Packet":"/home/ubuntu/staging/apps/build/js/netsim/Packet.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimMessage.js":[function(require,module,exports){
/**
 * @overview Simulation entity for a message between two nodes.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var utils = require('../utils');
var NetSimEntity = require('./NetSimEntity');
var DataConverters = require('./DataConverters');
var base64ToBinary = DataConverters.base64ToBinary;
var binaryToBase64 = DataConverters.binaryToBase64;
var NetSimLogger = require('./NetSimLogger');

var logger = NetSimLogger.getSingleton();

/**
 * @typedef {Object} MessageData
 * @property {!number} fromNodeID - sender node ID
 * @property {!number} toNodeID - destination node ID
 * @property {!number} simulatedBy - node ID of client simulating message
 * @property {!string} payload - message content in a binary string
 * @property {number} extraHopsRemaining
 * @property {number[]} visitedNodeIDs
 */

/**
 * @typedef {Object} MessageRow
 * @property {!number} fromNodeID - this message in-flight-from node
 * @property {!number} toNodeID - this message in-flight-to node
 * @property {!number} simulatedBy - Node ID of the client responsible for
 *           all operations involving this message.
 * @property {!Base64Payload} base64Payload - base64-encoded binary
 *           message content, all of which can be exposed to the
 *           student.  May contain headers of its own.
 * @property {!number} extraHopsRemaining
 * @property {!number[]} visitedNodeIDs
 */

/**
 * Local controller for a message that is 'on the wire'
 *
 * Doesn't actually have any association with the wire - one could,
 * theoretically, send a message from any node in the simulation to any other
 * node in the simulation.
 *
 * Any message that exists in the table is 'in transit' to a node.  Nodes
 * should remove messages as soon as they receive them.
 *
 * @param {!NetSimShard} shard - The shard where this wire lives.
 * @param {MessageRow} [messageRow] - A row out of the _message table on the
 *        shard.  If provided, will initialize this message with the given
 *        data.  If not, this message will initialize to default values.
 * @constructor
 * @augments NetSimEntity
 * @implements MessageData
 */
var NetSimMessage = module.exports = function (shard, messageRow) {
  messageRow = messageRow !== undefined ? messageRow : {};
  NetSimEntity.call(this, shard, messageRow);

  /**
   * Node ID that this message is 'in transit' from.
   * @type {number}
   */
  this.fromNodeID = messageRow.fromNodeID;

  /**
   * Node ID that this message is 'in transit' to.
   * @type {number}
   */
  this.toNodeID = messageRow.toNodeID;

  /**
   * ID of the node responsible for operations on this message.
   * @type {number}
   */
  this.simulatedBy = messageRow.simulatedBy;

  /**
   * All other message content, including the 'packets' students will send.
   * @type {*}
   */
  this.payload = '';
  if (messageRow.base64Payload) {
    try {
      this.payload = base64ToBinary(messageRow.base64Payload.string, messageRow.base64Payload.len);
    } catch (e) {
      logger.error(e.message);
    }
  }

  /**
   * If this is an inter-router message, the number of routers this
   * message should try to visit before going to the router that
   * will actually lead to its destination.
   * @type {number}
   */
  this.extraHopsRemaining = utils.valueOr(messageRow.extraHopsRemaining, 0);

  /**
   * A history of router node IDs this message has visited.
   * @type {number[]}
   */
  this.visitedNodeIDs = utils.valueOr(messageRow.visitedNodeIDs, []);
};
NetSimMessage.inherits(NetSimEntity);

/**
 * Static row construction method. Used by dynamic buildRow method and
 * by static async API creation methods to create a properly-formatted
 * row for database insertion
 * @param {MessageData} messageData
 * @returns {MessageRow}
 * @throws {TypeError} if payload is invalid
 */
NetSimMessage.buildRowFromData = function (messageData) {
  return {
    fromNodeID: messageData.fromNodeID,
    toNodeID: messageData.toNodeID,
    simulatedBy: messageData.simulatedBy,
    base64Payload: binaryToBase64(messageData.payload),
    extraHopsRemaining: utils.valueOr(messageData.extraHopsRemaining, 0),
    visitedNodeIDs: utils.valueOr(messageData.visitedNodeIDs, [])
  };
};

/**
 * Static async creation method.  Creates a new message on the given shard,
 * and then calls the callback with a success boolean.
 * @param {!NetSimShard} shard
 * @param {!MessageData} messageData
 * @param {!NodeStyleCallback} onComplete (success)
 */
NetSimMessage.send = function (shard, messageData, onComplete) {
  try {
    var row = NetSimMessage.buildRowFromData(messageData);
    shard.messageTable.create(row, onComplete);
  } catch (err) {
    onComplete(err, null);
  }
};

/**
 * Static async multi-create method. Creates new messages on the given shard,
 * and then calls the callback with a success boolean.
 * @param {!NetSimShard} shard
 * @param {MessageData[]} messageDatas
 * @param {!NodeStyleCallback} onComplete (success)
 */
NetSimMessage.sendMany = function (shard, messageDatas, onComplete) {
  try {
    var rows = messageDatas.map(NetSimMessage.buildRowFromData);
    shard.messageTable.multiCreate(rows, onComplete);
  } catch (err) {
    onComplete(err, null);
  }
};

/**
 * Static helper.
 * @param {NetSimMessage} message
 * @returns {boolean} TRUE iff the given message is well-formed.
 */
NetSimMessage.isValid = function (message) {
  return (/^[01]*$/.test(message.payload)
  );
};

/**
 * Helper that gets the wires table for the configured instance.
 * @returns {NetSimTable}
 */
NetSimMessage.prototype.getTable = function () {
  return this.shard_.messageTable;
};

/**
 * Build own row for the message table
 * @returns {MessageRow}
 * @throws {TypeError} if payload is invalid
 */
NetSimMessage.prototype.buildRow = function () {
  return NetSimMessage.buildRowFromData(this);
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./DataConverters":"/home/ubuntu/staging/apps/build/js/netsim/DataConverters.js","./NetSimEntity":"/home/ubuntu/staging/apps/build/js/netsim/NetSimEntity.js","./NetSimLogger":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogger.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogEntry.js":[function(require,module,exports){
/**
 * @overview Simulation entity for router log entries.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var moment = require('moment');
var utils = require('../utils');
var _ = utils.getLodash();
var i18n = require('./locale');
var NetSimEntity = require('./NetSimEntity');
var Packet = require('./Packet');
var NetSimNodeFactory = require('./NetSimNodeFactory');
var DataConverters = require('./DataConverters');
var formatBinary = DataConverters.formatBinary;
var base64ToBinary = DataConverters.base64ToBinary;
var binaryToBase64 = DataConverters.binaryToBase64;
var NetSimLogger = require('./NetSimLogger');

var BITS_PER_BYTE = require('./NetSimConstants').BITS_PER_BYTE;
var logger = NetSimLogger.getSingleton();

/**
 * @typedef {Object} LogEntryRow
 * @property {number} nodeID
 * @property {Base64Payload} base64Binary - base64-encoded binary
 *           message content, all of which can be exposed to the
 *           student.  May contain headers of its own.
 * @property {NetSimLogEntry.LogStatus} status
 * @property {number} timestamp
 */

/**
 * Entry in shared log for a node on the network.
 *
 * Once created, should not be modified until/unless a cleanup process
 * removes it.
 *
 * @param {!NetSimShard} shard - The shard where this log entry lives.
 * @param {LogEntryRow} [row] - A row out of the log table on the
 *        shard.  If provided, will initialize this log with the given
 *        data.  If not, this log will initialize to default values.
 * @param {Packet.HeaderType[]} [packetSpec] - Packet layout spec used to
 *        interpret the contents of the logged packet
 * @constructor
 * @augments NetSimEntity
 */
var NetSimLogEntry = module.exports = function (shard, row, packetSpec) {
  row = row !== undefined ? row : {};
  NetSimEntity.call(this, shard, row);

  /**
   * Node ID of the node that owns this log entry (e.g. a router node)
   * @type {number}
   */
  this.nodeID = row.nodeID;

  /**
   * Binary content of the log entry.  Defaults to empty string.
   * @type {string}
   */
  this.binary = '';
  if (row.base64Binary) {
    try {
      this.binary = base64ToBinary(row.base64Binary.string, row.base64Binary.len);
    } catch (e) {
      logger.error(e.message);
    }
  }

  /**
   * Status value for log entry; for router log, usually SUCCESS for completion
   * of routing or DROPPED if routing failed.
   * @type {NetSimLogEntry.LogStatus}
   */
  this.status = utils.valueOr(row.status, NetSimLogEntry.LogStatus.SUCCESS);

  /**
   * @type {Packet}
   * @private
   */
  this.packet_ = new Packet(utils.valueOr(packetSpec, []), this.binary);

  /**
   * Unix timestamp (local) of log creation time.
   * @type {number}
   */
  this.timestamp = row.timestamp !== undefined ? row.timestamp : Date.now();
};
NetSimLogEntry.inherits(NetSimEntity);

/**
 * @enum {string}
 * @const
 */
NetSimLogEntry.LogStatus = {
  SUCCESS: 'success',
  DROPPED: 'dropped'
};

/**
 * Helper that gets the log table for the configured instance.
 * @returns {NetSimTable}
 */
NetSimLogEntry.prototype.getTable = function () {
  return this.shard_.logTable;
};

/**
 * Build own row for the log table
 * @returns {LogEntryRow}
 */
NetSimLogEntry.prototype.buildRow = function () {
  return {
    nodeID: this.nodeID,
    base64Binary: binaryToBase64(this.binary),
    status: this.status,
    timestamp: this.timestamp
  };
};

/**
 * Static async creation method.  Creates a new message on the given shard,
 * and then calls the callback with a success boolean.
 * @param {!NetSimShard} shard
 * @param {!number} nodeID - associated node's row ID
 * @param {!string} binary - log contents
 * @param {NetSimLogEntry.LogStatus} status
 * @param {!NodeStyleCallback} onComplete (success)
 */
NetSimLogEntry.create = function (shard, nodeID, binary, status, onComplete) {
  var entity = new NetSimLogEntry(shard);
  entity.nodeID = nodeID;
  entity.binary = binary;
  entity.status = status;
  entity.timestamp = Date.now();
  entity.getTable().create(entity.buildRow(), function (err, result) {
    if (err) {
      onComplete(err, null);
      return;
    }
    onComplete(err, new NetSimLogEntry(shard, result));
  });
};

/**
 * Get requested packet header field as a string.  Returns empty string
 * if the requested field is not in the current packet format.
 * @param {Packet.HeaderType} field
 * @returns {string}
 */
NetSimLogEntry.prototype.getHeaderField = function (field) {
  try {
    if (Packet.isAddressField(field)) {
      return this.packet_.getHeaderAsAddressString(field);
    } else {
      return this.packet_.getHeaderAsInt(field).toString();
    }
  } catch (e) {
    return '';
  }
};

/** Get packet message as binary. */
NetSimLogEntry.prototype.getMessageBinary = function () {
  return formatBinary(this.packet_.getBodyAsBinary(), BITS_PER_BYTE);
};

/** Get packet message as ASCII */
NetSimLogEntry.prototype.getMessageAscii = function () {
  return this.packet_.getBodyAsAscii(BITS_PER_BYTE);
};

/**
 * @returns {string} Localized packet status, "success" or "dropped"
 */
NetSimLogEntry.prototype.getLocalizedStatus = function () {
  if (this.status === NetSimLogEntry.LogStatus.SUCCESS) {
    return i18n.logStatus_success();
  } else if (this.status === NetSimLogEntry.LogStatus.DROPPED) {
    return i18n.logStatus_dropped();
  }
  return '';
};

/**
 * @returns {string} Localized "X of Y" packet count info for this entry.
 */
NetSimLogEntry.prototype.getLocalizedPacketInfo = function () {
  return i18n.xOfYPackets({
    x: this.getHeaderField(Packet.HeaderType.PACKET_INDEX),
    y: this.getHeaderField(Packet.HeaderType.PACKET_COUNT)
  });
};

/**
 * @returns {string} 12-hour time with milliseconds
 */
NetSimLogEntry.prototype.getTimeString = function () {
  return moment(this.timestamp).format('h:mm:ss.SSS A');
};

/**
 * Get a controller for the node that generated this log entry
 * @returns {NetSimClientNode|NetSimRouterNode|null}
 */
NetSimLogEntry.prototype.getOriginNode = function () {
  var nodeRows = this.shard_.nodeTable.readAll();
  var originNodeRow = _.find(nodeRows, (function (row) {
    return row.id === this.nodeID;
  }).bind(this));

  if (!originNodeRow) {
    return null;
  }

  return NetSimNodeFactory.nodeFromRow(this.shard_, originNodeRow);
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./DataConverters":"/home/ubuntu/staging/apps/build/js/netsim/DataConverters.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimEntity":"/home/ubuntu/staging/apps/build/js/netsim/NetSimEntity.js","./NetSimLogger":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogger.js","./NetSimNodeFactory":"/home/ubuntu/staging/apps/build/js/netsim/NetSimNodeFactory.js","./Packet":"/home/ubuntu/staging/apps/build/js/netsim/Packet.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js","moment":"/home/ubuntu/staging/apps/node_modules/moment/moment.js"}],"/home/ubuntu/staging/apps/node_modules/moment/moment.js":[function(require,module,exports){
//! moment.js
//! version : 2.10.6
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, function () { 'use strict';

    var hookCallback;

    function utils_hooks__hooks () {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback (callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return Object.prototype.toString.call(input) === '[object Array]';
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function create_utc__createUTC (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty           : false,
            unusedTokens    : [],
            unusedInput     : [],
            overflow        : -2,
            charsLeftOver   : 0,
            nullInput       : false,
            invalidMonth    : null,
            invalidFormat   : false,
            userInvalidated : false,
            iso             : false
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    function valid__isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            m._isValid = !isNaN(m._d.getTime()) &&
                flags.overflow < 0 &&
                !flags.empty &&
                !flags.invalidMonth &&
                !flags.invalidWeekday &&
                !flags.nullInput &&
                !flags.invalidFormat &&
                !flags.userInvalidated;

            if (m._strict) {
                m._isValid = m._isValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }
        }
        return m._isValid;
    }

    function valid__createInvalid (flags) {
        var m = create_utc__createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        }
        else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    var momentProperties = utils_hooks__hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (typeof from._isAMomentObject !== 'undefined') {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (typeof from._i !== 'undefined') {
            to._i = from._i;
        }
        if (typeof from._f !== 'undefined') {
            to._f = from._f;
        }
        if (typeof from._l !== 'undefined') {
            to._l = from._l;
        }
        if (typeof from._strict !== 'undefined') {
            to._strict = from._strict;
        }
        if (typeof from._tzm !== 'undefined') {
            to._tzm = from._tzm;
        }
        if (typeof from._isUTC !== 'undefined') {
            to._isUTC = from._isUTC;
        }
        if (typeof from._offset !== 'undefined') {
            to._offset = from._offset;
        }
        if (typeof from._pf !== 'undefined') {
            to._pf = getParsingFlags(from);
        }
        if (typeof from._locale !== 'undefined') {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i in momentProperties) {
                prop = momentProperties[i];
                val = from[prop];
                if (typeof val !== 'undefined') {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            utils_hooks__hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment (obj) {
        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
    }

    function absFloor (number) {
        if (number < 0) {
            return Math.ceil(number);
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function Locale() {
    }

    var locales = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return null;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && typeof module !== 'undefined' &&
                module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                require('./locale/' + name);
                // because defineLocale currently also sets the global locale, we
                // want to undo that for lazy loaded locales
                locale_locales__getSetGlobalLocale(oldLocale);
            } catch (e) { }
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function locale_locales__getSetGlobalLocale (key, values) {
        var data;
        if (key) {
            if (typeof values === 'undefined') {
                data = locale_locales__getLocale(key);
            }
            else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale (name, values) {
        if (values !== null) {
            values.abbr = name;
            locales[name] = locales[name] || new Locale();
            locales[name].set(values);

            // backwards compat for now: also set the locale
            locale_locales__getSetGlobalLocale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    // returns locale data
    function locale_locales__getLocale (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    var aliases = {};

    function addUnitAlias (unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    function makeGetSet (unit, keepTime) {
        return function (value) {
            if (value != null) {
                get_set__set(this, unit, value);
                utils_hooks__hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get_set__get(this, unit);
            }
        };
    }

    function get_set__get (mom, unit) {
        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
    }

    function get_set__set (mom, unit, value) {
        return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    }

    // MOMENTS

    function getSet (units, value) {
        var unit;
        if (typeof units === 'object') {
            for (unit in units) {
                this.set(unit, units[unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (typeof this[units] === 'function') {
                return this[units](value);
            }
        }
        return this;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken (token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '';
            for (i = 0; i < length; i++) {
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1         = /\d/;            //       0 - 9
    var match2         = /\d\d/;          //      00 - 99
    var match3         = /\d{3}/;         //     000 - 999
    var match4         = /\d{4}/;         //    0000 - 9999
    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
    var match1to2      = /\d\d?/;         //       0 - 99
    var match1to3      = /\d{1,3}/;       //       0 - 999
    var match1to4      = /\d{1,4}/;       //       0 - 9999
    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

    var matchUnsigned  = /\d+/;           //       0 - inf
    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;

    var regexes = {};

    function isFunction (sth) {
        // https://github.com/moment/moment/issues/2325
        return typeof sth === 'function' &&
            Object.prototype.toString.call(sth) === '[object Function]';
    }


    function addRegexToken (token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict) {
            return (isStrict && strictRegex) ? strictRegex : regex;
        };
    }

    function getParseRegexForToken (token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }).replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken (token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (typeof callback === 'number') {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken (token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;

    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PARSING

    addRegexToken('M',    match1to2);
    addRegexToken('MM',   match1to2, match2);
    addRegexToken('MMM',  matchWord);
    addRegexToken('MMMM', matchWord);

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths (m) {
        return this._months[m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort (m) {
        return this._monthsShort[m.month()];
    }

    function localeMonthsParse (monthName, format, strict) {
        var i, mom, regex;

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = create_utc__createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth (mom, value) {
        var dayOfMonth;

        // TODO: Move this out of here!
        if (typeof value === 'string') {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (typeof value !== 'number') {
                return mom;
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth (value) {
        if (value != null) {
            setMonth(this, value);
            utils_hooks__hooks.updateOffset(this, true);
            return this;
        } else {
            return get_set__get(this, 'Month');
        }
    }

    function getDaysInMonth () {
        return daysInMonth(this.year(), this.month());
    }

    function checkOverflow (m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    function warn(msg) {
        if (utils_hooks__hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (firstTime) {
                warn(msg + '\n' + (new Error()).stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    utils_hooks__hooks.suppressDeprecationWarnings = false;

    var from_string__isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

    var isoDates = [
        ['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/],
        ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/],
        ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/],
        ['GGGG-[W]WW', /\d{4}-W\d{2}/],
        ['YYYY-DDD', /\d{4}-\d{3}/]
    ];

    // iso time formats and regexes
    var isoTimes = [
        ['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/],
        ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/],
        ['HH:mm', /(T| )\d\d:\d\d/],
        ['HH', /(T| )\d\d/]
    ];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
        var i, l,
            string = config._i,
            match = from_string__isoRegex.exec(string);

        if (match) {
            getParsingFlags(config).iso = true;
            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(string)) {
                    config._f = isoDates[i][0];
                    break;
                }
            }
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(string)) {
                    // match[6] should be 'T' or space
                    config._f += (match[6] || ' ') + isoTimes[i][0];
                    break;
                }
            }
            if (string.match(matchOffset)) {
                config._f += 'Z';
            }
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }

    utils_hooks__hooks.createFromInputFallback = deprecate(
        'moment construction falls back to js Date. This is ' +
        'discouraged and will be removed in upcoming major ' +
        'release. Please refer to ' +
        'https://github.com/moment/moment/issues/1407 for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    function createDate (y, m, d, h, M, s, ms) {
        //can't just apply() to create a date:
        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
        var date = new Date(y, m, d, h, M, s, ms);

        //the date constructor doesn't accept years < 1970
        if (y < 1970) {
            date.setFullYear(y);
        }
        return date;
    }

    function createUTCDate (y) {
        var date = new Date(Date.UTC.apply(null, arguments));
        if (y < 1970) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY',   4],       0, 'year');
    addFormatToken(0, ['YYYYY',  5],       0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PARSING

    addRegexToken('Y',      matchSigned);
    addRegexToken('YY',     match1to2, match2);
    addRegexToken('YYYY',   match1to4, match4);
    addRegexToken('YYYYY',  match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    // HOOKS

    utils_hooks__hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', false);

    function getIsLeapYear () {
        return isLeapYear(this.year());
    }

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PARSING

    addRegexToken('w',  match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W',  match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // firstDayOfWeek       0 = sun, 6 = sat
    //                      the day of the week that starts the week
    //                      (usually sunday or monday)
    // firstDayOfWeekOfYear 0 = sun, 6 = sat
    //                      the first week is the week that contains the first
    //                      of this day of the week
    //                      (eg. ISO weeks use thursday (4))
    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
        var end = firstDayOfWeekOfYear - firstDayOfWeek,
            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
            adjustedMoment;


        if (daysToDayOfWeek > end) {
            daysToDayOfWeek -= 7;
        }

        if (daysToDayOfWeek < end - 7) {
            daysToDayOfWeek += 7;
        }

        adjustedMoment = local__createLocal(mom).add(daysToDayOfWeek, 'd');
        return {
            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
            year: adjustedMoment.year()
        };
    }

    // LOCALES

    function localeWeek (mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    };

    function localeFirstDayOfWeek () {
        return this._week.dow;
    }

    function localeFirstDayOfYear () {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek (input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek (input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PARSING

    addRegexToken('DDD',  match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
        var week1Jan = 6 + firstDayOfWeek - firstDayOfWeekOfYear, janX = createUTCDate(year, 0, 1 + week1Jan), d = janX.getUTCDay(), dayOfYear;
        if (d < firstDayOfWeek) {
            d += 7;
        }

        weekday = weekday != null ? 1 * weekday : firstDayOfWeek;

        dayOfYear = 1 + week1Jan + 7 * (week - 1) - d + weekday;

        return {
            year: dayOfYear > 0 ? year : year - 1,
            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear
        };
    }

    // MOMENTS

    function getSetDayOfYear (input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
    }

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        var now = new Date();
        if (config._useUTC) {
            return [now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()];
        }
        return [now.getFullYear(), now.getMonth(), now.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray (config) {
        var i, date, input = [], currentDate, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse)) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
            week = defaults(w.w, 1);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < dow) {
                    ++week;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from begining of week
                weekday = w.e + dow;
            } else {
                // default to begining of week
                weekday = dow;
            }
        }
        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);

        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }

    utils_hooks__hooks.ISO_8601 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === utils_hooks__hooks.ISO_8601) {
            configFromISO(config);
            return;
        }

        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                }
                else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (getParsingFlags(config).bigHour === true &&
                config._a[HOUR] <= 12 &&
                config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }


    function meridiemFixWrap (locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!valid__isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = [i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond];

        configFromArray(config);
    }

    function createFromConfig (config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig (config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || locale_locales__getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return valid__createInvalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else if (isDate(input)) {
            config._d = input;
        } else {
            configFromInput(config);
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (input === undefined) {
            config._d = new Date();
        } else if (isDate(input)) {
            config._d = new Date(+input);
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (typeof(input) === 'object') {
            configFromObject(config);
        } else if (typeof(input) === 'number') {
            // from milliseconds
            config._d = new Date(input);
        } else {
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC (input, format, locale, strict, isUTC) {
        var c = {};

        if (typeof(locale) === 'boolean') {
            strict = locale;
            locale = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function local__createLocal (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
         'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',
         function () {
             var other = local__createLocal.apply(null, arguments);
             return other < this ? this : other;
         }
     );

    var prototypeMax = deprecate(
        'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',
        function () {
            var other = local__createLocal.apply(null, arguments);
            return other > this ? this : other;
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return local__createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    function Duration (duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 36e5; // 1000 * 60 * 60
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = locale_locales__getLocale();

        this._bubble();
    }

    function isDuration (obj) {
        return obj instanceof Duration;
    }

    function offset (token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z',  matchOffset);
    addRegexToken('ZZ', matchOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(string) {
        var matches = ((string || '').match(matchOffset) || []);
        var chunk   = matches[matches.length - 1] || [];
        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? +input : +local__createLocal(input)) - (+res);
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(+res._d + diff);
            utils_hooks__hooks.updateOffset(res, false);
            return res;
        } else {
            return local__createLocal(input).local();
        }
    }

    function getDateOffset (m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    utils_hooks__hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset (input, keepLocalTime) {
        var offset = this._offset || 0,
            localAdjust;
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(input);
            }
            if (Math.abs(input) < 16) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    utils_hooks__hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone (input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC (keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal (keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset () {
        if (this._tzm) {
            this.utcOffset(this._tzm);
        } else if (typeof this._i === 'string') {
            this.utcOffset(offsetFromString(this._i));
        }
        return this;
    }

    function hasAlignedHourOffset (input) {
        input = input ? local__createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime () {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted () {
        if (typeof this._isDSTShifted !== 'undefined') {
            return this._isDSTShifted;
        }

        var c = {};

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
            this._isDSTShifted = this.isValid() &&
                compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal () {
        return !this._isUTC;
    }

    function isUtcOffset () {
        return this._isUTC;
    }

    function isUtc () {
        return this._isUTC && this._offset === 0;
    }

    var aspNetRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    var create__isoRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;

    function create__createDuration (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms : input._milliseconds,
                d  : input._days,
                M  : input._months
            };
        } else if (typeof input === 'number') {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y  : 0,
                d  : toInt(match[DATE])        * sign,
                h  : toInt(match[HOUR])        * sign,
                m  : toInt(match[MINUTE])      * sign,
                s  : toInt(match[SECOND])      * sign,
                ms : toInt(match[MILLISECOND]) * sign
            };
        } else if (!!(match = create__isoRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y : parseIso(match[2], sign),
                M : parseIso(match[3], sign),
                d : parseIso(match[4], sign),
                h : parseIso(match[5], sign),
                m : parseIso(match[6], sign),
                s : parseIso(match[7], sign),
                w : parseIso(match[8], sign)
            };
        } else if (duration == null) {// checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    create__createDuration.fn = Duration.prototype;

    function parseIso (inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {milliseconds: 0, months: 0};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = create__createDuration(val, period);
            add_subtract__addSubtract(this, dur, direction);
            return this;
        };
    }

    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = duration._days,
            months = duration._months;
        updateOffset = updateOffset == null ? true : updateOffset;

        if (milliseconds) {
            mom._d.setTime(+mom._d + milliseconds * isAdding);
        }
        if (days) {
            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
        }
        if (months) {
            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
        }
        if (updateOffset) {
            utils_hooks__hooks.updateOffset(mom, days || months);
        }
    }

    var add_subtract__add      = createAdder(1, 'add');
    var add_subtract__subtract = createAdder(-1, 'subtract');

    function moment_calendar__calendar (time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || local__createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            diff = this.diff(sod, 'days', true),
            format = diff < -6 ? 'sameElse' :
                diff < -1 ? 'lastWeek' :
                diff < 0 ? 'lastDay' :
                diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                diff < 7 ? 'nextWeek' : 'sameElse';
        return this.format(formats && formats[format] || this.localeData().calendar(format, this, local__createLocal(now)));
    }

    function clone () {
        return new Moment(this);
    }

    function isAfter (input, units) {
        var inputMs;
        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this > +input;
        } else {
            inputMs = isMoment(input) ? +input : +local__createLocal(input);
            return inputMs < +this.clone().startOf(units);
        }
    }

    function isBefore (input, units) {
        var inputMs;
        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this < +input;
        } else {
            inputMs = isMoment(input) ? +input : +local__createLocal(input);
            return +this.clone().endOf(units) < inputMs;
        }
    }

    function isBetween (from, to, units) {
        return this.isAfter(from, units) && this.isBefore(to, units);
    }

    function isSame (input, units) {
        var inputMs;
        units = normalizeUnits(units || 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this === +input;
        } else {
            inputMs = +local__createLocal(input);
            return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));
        }
    }

    function diff (input, units, asFloat) {
        var that = cloneWithOffset(input, this),
            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4,
            delta, output;

        units = normalizeUnits(units);

        if (units === 'year' || units === 'month' || units === 'quarter') {
            output = monthDiff(this, that);
            if (units === 'quarter') {
                output = output / 3;
            } else if (units === 'year') {
                output = output / 12;
            }
        } else {
            delta = this - that;
            output = units === 'second' ? delta / 1e3 : // 1000
                units === 'minute' ? delta / 6e4 : // 1000 * 60
                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                delta;
        }
        return asFloat ? output : absFloor(output);
    }

    function monthDiff (a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        return -(wholeMonthDiff + adjust);
    }

    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';

    function toString () {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function moment_format__toISOString () {
        var m = this.clone().utc();
        if (0 < m.year() && m.year() <= 9999) {
            if ('function' === typeof Date.prototype.toISOString) {
                // native implementation is ~50x faster, use it when we can
                return this.toDate().toISOString();
            } else {
                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            }
        } else {
            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        }
    }

    function format (inputString) {
        var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);
        return this.localeData().postformat(output);
    }

    function from (time, withoutSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
        return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
    }

    function fromNow (withoutSuffix) {
        return this.from(local__createLocal(), withoutSuffix);
    }

    function to (time, withoutSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
        return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
    }

    function toNow (withoutSuffix) {
        return this.to(local__createLocal(), withoutSuffix);
    }

    function locale (key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = locale_locales__getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData () {
        return this._locale;
    }

    function startOf (units) {
        units = normalizeUnits(units);
        // the following switch intentionally omits break keywords
        // to utilize falling through the cases.
        switch (units) {
        case 'year':
            this.month(0);
            /* falls through */
        case 'quarter':
        case 'month':
            this.date(1);
            /* falls through */
        case 'week':
        case 'isoWeek':
        case 'day':
            this.hours(0);
            /* falls through */
        case 'hour':
            this.minutes(0);
            /* falls through */
        case 'minute':
            this.seconds(0);
            /* falls through */
        case 'second':
            this.milliseconds(0);
        }

        // weeks are a special case
        if (units === 'week') {
            this.weekday(0);
        }
        if (units === 'isoWeek') {
            this.isoWeekday(1);
        }

        // quarters are also special
        if (units === 'quarter') {
            this.month(Math.floor(this.month() / 3) * 3);
        }

        return this;
    }

    function endOf (units) {
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond') {
            return this;
        }
        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
    }

    function to_type__valueOf () {
        return +this._d - ((this._offset || 0) * 60000);
    }

    function unix () {
        return Math.floor(+this / 1000);
    }

    function toDate () {
        return this._offset ? new Date(+this) : this._d;
    }

    function toArray () {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject () {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }

    function moment_valid__isValid () {
        return valid__isValid(this);
    }

    function parsingFlags () {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt () {
        return getParsingFlags(this).overflow;
    }

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken (token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg',     'weekYear');
    addWeekYearFormatToken('ggggg',    'weekYear');
    addWeekYearFormatToken('GGGG',  'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PARSING

    addRegexToken('G',      matchSigned);
    addRegexToken('g',      matchSigned);
    addRegexToken('GG',     match1to2, match2);
    addRegexToken('gg',     match1to2, match2);
    addRegexToken('GGGG',   match1to4, match4);
    addRegexToken('gggg',   match1to4, match4);
    addRegexToken('GGGGG',  match1to6, match6);
    addRegexToken('ggggg',  match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
    });

    // HELPERS

    function weeksInYear(year, dow, doy) {
        return weekOfYear(local__createLocal([year, 11, 31 + dow - doy]), dow, doy).week;
    }

    // MOMENTS

    function getSetWeekYear (input) {
        var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
        return input == null ? year : this.add((input - year), 'y');
    }

    function getSetISOWeekYear (input) {
        var year = weekOfYear(this, 1, 4).year;
        return input == null ? year : this.add((input - year), 'y');
    }

    function getISOWeeksInYear () {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear () {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    addFormatToken('Q', 0, 0, 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter (input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PARSING

    addRegexToken('D',  match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0], 10);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PARSING

    addRegexToken('d',    match1to2);
    addRegexToken('e',    match1to2);
    addRegexToken('E',    match1to2);
    addRegexToken('dd',   matchWord);
    addRegexToken('ddd',  matchWord);
    addRegexToken('dddd', matchWord);

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config) {
        var weekday = config._locale.weekdaysParse(input);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    // LOCALES

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays (m) {
        return this._weekdays[m.day()];
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort (m) {
        return this._weekdaysShort[m.day()];
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin (m) {
        return this._weekdaysMin[m.day()];
    }

    function localeWeekdaysParse (weekdayName) {
        var i, mom, regex;

        this._weekdaysParse = this._weekdaysParse || [];

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            if (!this._weekdaysParse[i]) {
                mom = local__createLocal([2000, 1]).day(i);
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek (input) {
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek (input) {
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek (input) {
        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.
        return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, function () {
        return this.hours() % 12 || 12;
    });

    function meridiem (token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PARSING

    function matchMeridiem (isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a',  matchMeridiem);
    addRegexToken('A',  matchMeridiem);
    addRegexToken('H',  match1to2);
    addRegexToken('h',  match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });

    // LOCALES

    function localeIsPM (input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return ((input + '').toLowerCase().charAt(0) === 'p');
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }


    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour he wants. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PARSING

    addRegexToken('m',  match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PARSING

    addRegexToken('s',  match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });


    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PARSING

    addRegexToken('S',    match1to3, match1);
    addRegexToken('SS',   match1to3, match2);
    addRegexToken('SSS',  match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    addFormatToken('z',  0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr () {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName () {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var momentPrototype__proto = Moment.prototype;

    momentPrototype__proto.add          = add_subtract__add;
    momentPrototype__proto.calendar     = moment_calendar__calendar;
    momentPrototype__proto.clone        = clone;
    momentPrototype__proto.diff         = diff;
    momentPrototype__proto.endOf        = endOf;
    momentPrototype__proto.format       = format;
    momentPrototype__proto.from         = from;
    momentPrototype__proto.fromNow      = fromNow;
    momentPrototype__proto.to           = to;
    momentPrototype__proto.toNow        = toNow;
    momentPrototype__proto.get          = getSet;
    momentPrototype__proto.invalidAt    = invalidAt;
    momentPrototype__proto.isAfter      = isAfter;
    momentPrototype__proto.isBefore     = isBefore;
    momentPrototype__proto.isBetween    = isBetween;
    momentPrototype__proto.isSame       = isSame;
    momentPrototype__proto.isValid      = moment_valid__isValid;
    momentPrototype__proto.lang         = lang;
    momentPrototype__proto.locale       = locale;
    momentPrototype__proto.localeData   = localeData;
    momentPrototype__proto.max          = prototypeMax;
    momentPrototype__proto.min          = prototypeMin;
    momentPrototype__proto.parsingFlags = parsingFlags;
    momentPrototype__proto.set          = getSet;
    momentPrototype__proto.startOf      = startOf;
    momentPrototype__proto.subtract     = add_subtract__subtract;
    momentPrototype__proto.toArray      = toArray;
    momentPrototype__proto.toObject     = toObject;
    momentPrototype__proto.toDate       = toDate;
    momentPrototype__proto.toISOString  = moment_format__toISOString;
    momentPrototype__proto.toJSON       = moment_format__toISOString;
    momentPrototype__proto.toString     = toString;
    momentPrototype__proto.unix         = unix;
    momentPrototype__proto.valueOf      = to_type__valueOf;

    // Year
    momentPrototype__proto.year       = getSetYear;
    momentPrototype__proto.isLeapYear = getIsLeapYear;

    // Week Year
    momentPrototype__proto.weekYear    = getSetWeekYear;
    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;

    // Quarter
    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;

    // Month
    momentPrototype__proto.month       = getSetMonth;
    momentPrototype__proto.daysInMonth = getDaysInMonth;

    // Week
    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;
    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;
    momentPrototype__proto.weeksInYear    = getWeeksInYear;
    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;

    // Day
    momentPrototype__proto.date       = getSetDayOfMonth;
    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;
    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;
    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
    momentPrototype__proto.dayOfYear  = getSetDayOfYear;

    // Hour
    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;

    // Minute
    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;

    // Second
    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;

    // Millisecond
    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;

    // Offset
    momentPrototype__proto.utcOffset            = getSetOffset;
    momentPrototype__proto.utc                  = setOffsetToUTC;
    momentPrototype__proto.local                = setOffsetToLocal;
    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;
    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
    momentPrototype__proto.isDST                = isDaylightSavingTime;
    momentPrototype__proto.isDSTShifted         = isDaylightSavingTimeShifted;
    momentPrototype__proto.isLocal              = isLocal;
    momentPrototype__proto.isUtcOffset          = isUtcOffset;
    momentPrototype__proto.isUtc                = isUtc;
    momentPrototype__proto.isUTC                = isUtc;

    // Timezone
    momentPrototype__proto.zoneAbbr = getZoneAbbr;
    momentPrototype__proto.zoneName = getZoneName;

    // Deprecations
    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', getSetZone);

    var momentPrototype = momentPrototype__proto;

    function moment__createUnix (input) {
        return local__createLocal(input * 1000);
    }

    function moment__createInZone () {
        return local__createLocal.apply(null, arguments).parseZone();
    }

    var defaultCalendar = {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    };

    function locale_calendar__calendar (key, mom, now) {
        var output = this._calendar[key];
        return typeof output === 'function' ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS  : 'h:mm:ss A',
        LT   : 'h:mm A',
        L    : 'MM/DD/YYYY',
        LL   : 'MMMM D, YYYY',
        LLL  : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat (key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate () {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultOrdinalParse = /\d{1,2}/;

    function ordinal (number) {
        return this._ordinal.replace('%d', number);
    }

    function preParsePostFormat (string) {
        return string;
    }

    var defaultRelativeTime = {
        future : 'in %s',
        past   : '%s ago',
        s  : 'a few seconds',
        m  : 'a minute',
        mm : '%d minutes',
        h  : 'an hour',
        hh : '%d hours',
        d  : 'a day',
        dd : '%d days',
        M  : 'a month',
        MM : '%d months',
        y  : 'a year',
        yy : '%d years'
    };

    function relative__relativeTime (number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return (typeof output === 'function') ?
            output(number, withoutSuffix, string, isFuture) :
            output.replace(/%d/i, number);
    }

    function pastFuture (diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
    }

    function locale_set__set (config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (typeof prop === 'function') {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _ordinalParseLenient.
        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
    }

    var prototype__proto = Locale.prototype;

    prototype__proto._calendar       = defaultCalendar;
    prototype__proto.calendar        = locale_calendar__calendar;
    prototype__proto._longDateFormat = defaultLongDateFormat;
    prototype__proto.longDateFormat  = longDateFormat;
    prototype__proto._invalidDate    = defaultInvalidDate;
    prototype__proto.invalidDate     = invalidDate;
    prototype__proto._ordinal        = defaultOrdinal;
    prototype__proto.ordinal         = ordinal;
    prototype__proto._ordinalParse   = defaultOrdinalParse;
    prototype__proto.preparse        = preParsePostFormat;
    prototype__proto.postformat      = preParsePostFormat;
    prototype__proto._relativeTime   = defaultRelativeTime;
    prototype__proto.relativeTime    = relative__relativeTime;
    prototype__proto.pastFuture      = pastFuture;
    prototype__proto.set             = locale_set__set;

    // Month
    prototype__proto.months       =        localeMonths;
    prototype__proto._months      = defaultLocaleMonths;
    prototype__proto.monthsShort  =        localeMonthsShort;
    prototype__proto._monthsShort = defaultLocaleMonthsShort;
    prototype__proto.monthsParse  =        localeMonthsParse;

    // Week
    prototype__proto.week = localeWeek;
    prototype__proto._week = defaultLocaleWeek;
    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;

    // Day of Week
    prototype__proto.weekdays       =        localeWeekdays;
    prototype__proto._weekdays      = defaultLocaleWeekdays;
    prototype__proto.weekdaysMin    =        localeWeekdaysMin;
    prototype__proto._weekdaysMin   = defaultLocaleWeekdaysMin;
    prototype__proto.weekdaysShort  =        localeWeekdaysShort;
    prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;
    prototype__proto.weekdaysParse  =        localeWeekdaysParse;

    // Hours
    prototype__proto.isPM = localeIsPM;
    prototype__proto._meridiemParse = defaultLocaleMeridiemParse;
    prototype__proto.meridiem = localeMeridiem;

    function lists__get (format, index, field, setter) {
        var locale = locale_locales__getLocale();
        var utc = create_utc__createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function list (format, index, field, count, setter) {
        if (typeof format === 'number') {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return lists__get(format, index, field, setter);
        }

        var i;
        var out = [];
        for (i = 0; i < count; i++) {
            out[i] = lists__get(format, i, field, setter);
        }
        return out;
    }

    function lists__listMonths (format, index) {
        return list(format, index, 'months', 12, 'month');
    }

    function lists__listMonthsShort (format, index) {
        return list(format, index, 'monthsShort', 12, 'month');
    }

    function lists__listWeekdays (format, index) {
        return list(format, index, 'weekdays', 7, 'day');
    }

    function lists__listWeekdaysShort (format, index) {
        return list(format, index, 'weekdaysShort', 7, 'day');
    }

    function lists__listWeekdaysMin (format, index) {
        return list(format, index, 'weekdaysMin', 7, 'day');
    }

    locale_locales__getSetGlobalLocale('en', {
        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    // Side effect imports
    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);

    var mathAbs = Math.abs;

    function duration_abs__abs () {
        var data           = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days         = mathAbs(this._days);
        this._months       = mathAbs(this._months);

        data.milliseconds  = mathAbs(data.milliseconds);
        data.seconds       = mathAbs(data.seconds);
        data.minutes       = mathAbs(data.minutes);
        data.hours         = mathAbs(data.hours);
        data.months        = mathAbs(data.months);
        data.years         = mathAbs(data.years);

        return this;
    }

    function duration_add_subtract__addSubtract (duration, input, value, direction) {
        var other = create__createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days         += direction * other._days;
        duration._months       += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function duration_add_subtract__add (input, value) {
        return duration_add_subtract__addSubtract(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function duration_add_subtract__subtract (input, value) {
        return duration_add_subtract__addSubtract(this, input, value, -1);
    }

    function absCeil (number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble () {
        var milliseconds = this._milliseconds;
        var days         = this._days;
        var months       = this._months;
        var data         = this._data;
        var seconds, minutes, hours, years, monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0))) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds           = absFloor(milliseconds / 1000);
        data.seconds      = seconds % 60;

        minutes           = absFloor(seconds / 60);
        data.minutes      = minutes % 60;

        hours             = absFloor(minutes / 60);
        data.hours        = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days   = days;
        data.months = months;
        data.years  = years;

        return this;
    }

    function daysToMonths (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }

    function monthsToDays (months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }

    function as (units) {
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'year') {
            days   = this._days   + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            return units === 'month' ? months : months / 12;
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week'   : return days / 7     + milliseconds / 6048e5;
                case 'day'    : return days         + milliseconds / 864e5;
                case 'hour'   : return days * 24    + milliseconds / 36e5;
                case 'minute' : return days * 1440  + milliseconds / 6e4;
                case 'second' : return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
                default: throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function duration_as__valueOf () {
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs (alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds      = makeAs('s');
    var asMinutes      = makeAs('m');
    var asHours        = makeAs('h');
    var asDays         = makeAs('d');
    var asWeeks        = makeAs('w');
    var asMonths       = makeAs('M');
    var asYears        = makeAs('y');

    function duration_get__get (units) {
        units = normalizeUnits(units);
        return this[units + 's']();
    }

    function makeGetter(name) {
        return function () {
            return this._data[name];
        };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds      = makeGetter('seconds');
    var minutes      = makeGetter('minutes');
    var hours        = makeGetter('hours');
    var days         = makeGetter('days');
    var months       = makeGetter('months');
    var years        = makeGetter('years');

    function weeks () {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        s: 45,  // seconds to minute
        m: 45,  // minutes to hour
        h: 22,  // hours to day
        d: 26,  // days to month
        M: 11   // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {
        var duration = create__createDuration(posNegDuration).abs();
        var seconds  = round(duration.as('s'));
        var minutes  = round(duration.as('m'));
        var hours    = round(duration.as('h'));
        var days     = round(duration.as('d'));
        var months   = round(duration.as('M'));
        var years    = round(duration.as('y'));

        var a = seconds < thresholds.s && ['s', seconds]  ||
                minutes === 1          && ['m']           ||
                minutes < thresholds.m && ['mm', minutes] ||
                hours   === 1          && ['h']           ||
                hours   < thresholds.h && ['hh', hours]   ||
                days    === 1          && ['d']           ||
                days    < thresholds.d && ['dd', days]    ||
                months  === 1          && ['M']           ||
                months  < thresholds.M && ['MM', months]  ||
                years   === 1          && ['y']           || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set a threshold for relative time strings
    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        return true;
    }

    function humanize (withSuffix) {
        var locale = this.localeData();
        var output = duration_humanize__relativeTime(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var iso_string__abs = Math.abs;

    function iso_string__toISOString() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        var seconds = iso_string__abs(this._milliseconds) / 1000;
        var days         = iso_string__abs(this._days);
        var months       = iso_string__abs(this._months);
        var minutes, hours, years;

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes           = absFloor(seconds / 60);
        hours             = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years  = absFloor(months / 12);
        months %= 12;


        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds;
        var total = this.asSeconds();

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        return (total < 0 ? '-' : '') +
            'P' +
            (Y ? Y + 'Y' : '') +
            (M ? M + 'M' : '') +
            (D ? D + 'D' : '') +
            ((h || m || s) ? 'T' : '') +
            (h ? h + 'H' : '') +
            (m ? m + 'M' : '') +
            (s ? s + 'S' : '');
    }

    var duration_prototype__proto = Duration.prototype;

    duration_prototype__proto.abs            = duration_abs__abs;
    duration_prototype__proto.add            = duration_add_subtract__add;
    duration_prototype__proto.subtract       = duration_add_subtract__subtract;
    duration_prototype__proto.as             = as;
    duration_prototype__proto.asMilliseconds = asMilliseconds;
    duration_prototype__proto.asSeconds      = asSeconds;
    duration_prototype__proto.asMinutes      = asMinutes;
    duration_prototype__proto.asHours        = asHours;
    duration_prototype__proto.asDays         = asDays;
    duration_prototype__proto.asWeeks        = asWeeks;
    duration_prototype__proto.asMonths       = asMonths;
    duration_prototype__proto.asYears        = asYears;
    duration_prototype__proto.valueOf        = duration_as__valueOf;
    duration_prototype__proto._bubble        = bubble;
    duration_prototype__proto.get            = duration_get__get;
    duration_prototype__proto.milliseconds   = milliseconds;
    duration_prototype__proto.seconds        = seconds;
    duration_prototype__proto.minutes        = minutes;
    duration_prototype__proto.hours          = hours;
    duration_prototype__proto.days           = days;
    duration_prototype__proto.weeks          = weeks;
    duration_prototype__proto.months         = months;
    duration_prototype__proto.years          = years;
    duration_prototype__proto.humanize       = humanize;
    duration_prototype__proto.toISOString    = iso_string__toISOString;
    duration_prototype__proto.toString       = iso_string__toISOString;
    duration_prototype__proto.toJSON         = iso_string__toISOString;
    duration_prototype__proto.locale         = locale;
    duration_prototype__proto.localeData     = localeData;

    // Deprecations
    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
    duration_prototype__proto.lang = lang;

    // Side effect imports

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    // Side effect imports


    utils_hooks__hooks.version = '2.10.6';

    setHookCallback(local__createLocal);

    utils_hooks__hooks.fn                    = momentPrototype;
    utils_hooks__hooks.min                   = min;
    utils_hooks__hooks.max                   = max;
    utils_hooks__hooks.utc                   = create_utc__createUTC;
    utils_hooks__hooks.unix                  = moment__createUnix;
    utils_hooks__hooks.months                = lists__listMonths;
    utils_hooks__hooks.isDate                = isDate;
    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;
    utils_hooks__hooks.invalid               = valid__createInvalid;
    utils_hooks__hooks.duration              = create__createDuration;
    utils_hooks__hooks.isMoment              = isMoment;
    utils_hooks__hooks.weekdays              = lists__listWeekdays;
    utils_hooks__hooks.parseZone             = moment__createInZone;
    utils_hooks__hooks.localeData            = locale_locales__getLocale;
    utils_hooks__hooks.isDuration            = isDuration;
    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;
    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;
    utils_hooks__hooks.defineLocale          = defineLocale;
    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;
    utils_hooks__hooks.normalizeUnits        = normalizeUnits;
    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;

    var _moment = utils_hooks__hooks;

    return _moment;

}));
},{}],"/home/ubuntu/staging/apps/build/js/netsim/Packet.js":[function(require,module,exports){
/**
 * @overview Utility class for encoding and decoding simulated packets.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var NetSimUtils = require('./NetSimUtils');
var DataConverters = require('./DataConverters');
var NetSimGlobals = require('./NetSimGlobals');

/**
 * Wraps binary packet content with the format information required to
 * interpret it.
 * @param {Packet.HeaderType[]} formatSpec
 * @param {string} binary
 * @constructor
 */
var Packet = module.exports = function (formatSpec, binary) {
  var level = NetSimGlobals.getLevelConfig();

  /** @type {Packet.Encoder} */
  this.encoder = new Packet.Encoder(level.addressFormat, level.packetCountBitWidth, formatSpec);

  /** @type {string} of binary content */
  this.binary = binary;
};

/**
 * Possible packet header fields.  Values to this enum become keys
 * that can be used when defining a level configuration.  They also correspond
 * to class names that get applied to fields representing data in that column.
 * @enum {string}
 * @readonly
 */
Packet.HeaderType = {
  TO_ADDRESS: 'toAddress',
  FROM_ADDRESS: 'fromAddress',
  PACKET_INDEX: 'packetIndex',
  PACKET_COUNT: 'packetCount'
};

/**
 * Whether the given header field type will use the address format.
 * @param {Packet.HeaderType} headerType
 * @returns {boolean}
 */
Packet.isAddressField = function (headerType) {
  return headerType === Packet.HeaderType.TO_ADDRESS || headerType === Packet.HeaderType.FROM_ADDRESS;
};

/**
 * Whether the given header field will use the packetCount bit width.
 * @param {Packet.HeaderType} headerType
 * @returns {boolean}
 */
Packet.isPacketField = function (headerType) {
  return headerType === Packet.HeaderType.PACKET_INDEX || headerType === Packet.HeaderType.PACKET_COUNT;
};

/**
 * @param {Packet.HeaderType} headerType
 * @returns {string} of binary content
 */
Packet.prototype.getHeaderAsBinary = function (headerType) {
  return this.encoder.getHeader(headerType, this.binary);
};

/**
 * @param {Packet.HeaderType} headerType
 * @returns {number}
 */
Packet.prototype.getHeaderAsInt = function (headerType) {
  return this.encoder.getHeaderAsInt(headerType, this.binary);
};

/**
 * @param {Packet.HeaderType} headerType
 * @returns {string}
 */
Packet.prototype.getHeaderAsAddressString = function (headerType) {
  return this.encoder.getHeaderAsAddressString(headerType, this.binary);
};

/**
 * @returns {string} binary content
 */
Packet.prototype.getBodyAsBinary = function () {
  return this.encoder.getBody(this.binary);
};

/**
 * @param {number} bitsPerChar
 * @returns {string} ascii content
 */
Packet.prototype.getBodyAsAscii = function (bitsPerChar) {
  return this.encoder.getBodyAsAscii(this.binary, bitsPerChar);
};

/**
 * Given a particular packet format, can convert a set of fields down
 * into a binary string matching the specification, or extract fields
 * on demand from a binary string.
 * @param {AddressHeaderFormat} addressFormat
 * @param {number} packetCountBitWidth
 * @param {Packet.HeaderType[]} headerSpec - Specification of packet format, an
 *        ordered set of objects in the form {key:string, bits:number} where
 *        key is the field name you'll use to retrieve the information, and
 *        bits is the length of the field.
 * @constructor
 */
Packet.Encoder = function (addressFormat, packetCountBitWidth, headerSpec) {
  /** @type {string} */
  this.addressFormat_ = addressFormat;

  this.addressBitWidth_ = this.calculateBitWidth(this.addressFormat_);

  /** @type {number} */
  this.packetCountBitWidth_ = packetCountBitWidth;

  /** @type {Packet.HeaderType[]} */
  this.headerSpec_ = headerSpec;

  this.validateSpec();
};

/**
 * @param {AddressHeaderFormat} addressFormat
 * @private
 */
Packet.Encoder.prototype.calculateBitWidth = function (addressFormat) {
  return addressFormat.split(/\D+/).reduce(function (prev, cur) {
    return prev + (parseInt(cur, 10) || 0);
  }, 0);
};

/**
 * Verify that the configured format specification describes a valid format that
 * can be used by the Packet.Encoder object.
 */
Packet.Encoder.prototype.validateSpec = function () {
  var keyCache = {};

  for (var i = 0; i < this.headerSpec_.length; i++) {
    var isAddressField = Packet.isAddressField(this.headerSpec_[i]);
    var isPacketField = Packet.isPacketField(this.headerSpec_[i]);

    if (isAddressField && this.addressBitWidth_ === 0) {
      throw new Error("Invalid packet format: Includes an address field but " + " address format is invalid.");
    }

    if (isPacketField && this.packetCountBitWidth_ === 0) {
      throw new Error("Invalid packet format: Includes a packet count field " + " but packet field bit width is zero");
    }

    if (!isAddressField && !isPacketField) {
      throw new Error("Invalid packet format: Unrecognized packet header field " + this.headerSpec_[i]);
    }

    if (keyCache.hasOwnProperty(this.headerSpec_[i])) {
      throw new Error("Invalid packet format: Field keys must be unique.");
    } else {
      keyCache[this.headerSpec_[i]] = 'used';
    }
  }
};

/**
 * Retrieve requested header field by key from the provided binary blob.
 *
 * @param {Packet.HeaderType} key - which header to retrieve
 * @param {string} binary for entire packet
 * @returns {string} binary string value for header field
 * @throws when requested key is not in the configured packet spec
 */
Packet.Encoder.prototype.getHeader = function (key, binary) {
  var ruleIndex = 0,
      binaryIndex = 0;

  // Strip whitespace so we don't worry about being passed formatted binary
  binary = DataConverters.minifyBinary(binary);

  while (this.headerSpec_[ruleIndex] !== key) {
    binaryIndex += this.getFieldBitWidth(this.headerSpec_[ruleIndex]);
    ruleIndex++;

    if (ruleIndex >= this.headerSpec_.length) {
      // Didn't find key
      throw new Error('Key "' + key + '" not found in packet spec.');
    }
  }

  // Read value
  var bitWidth = this.getFieldBitWidth(this.headerSpec_[ruleIndex]);
  var bits = binary.slice(binaryIndex, binaryIndex + bitWidth);

  // Right-pad with zeroes to desired size
  if (bitWidth !== Infinity) {
    while (bits.length < bitWidth) {
      bits += '0';
    }
  }

  return bits;
};

/**
 * @param {Packet.HeaderType} key - field name
 * @param {string} binary - entire packet as a binary string
 * @returns {number} - requested field, interpreted as an int.
 */
Packet.Encoder.prototype.getHeaderAsInt = function (key, binary) {
  return DataConverters.binaryToInt(this.getHeader(key, binary));
};

/**
 * Retrieve an address header as a string, so we can give the multi-part
 * representation.
 * @param {Packet.HeaderType} key
 * @param {string} binary for whole packet
 * @returns {string}
 */
Packet.Encoder.prototype.getHeaderAsAddressString = function (key, binary) {
  return DataConverters.binaryToAddressString(this.getHeader(key, binary), this.addressFormat_);
};

/**
 * Skip over headers given in spec and return remainder of binary which
 * must be the message body.
 * @param {string} binary - entire packet as a binary string
 * @returns {string} packet body binary string
 */
Packet.Encoder.prototype.getBody = function (binary) {
  return DataConverters.minifyBinary(binary).slice(this.getHeaderLength());
};

/**
 * @returns {number} How many bits the header takes up
 */
Packet.Encoder.prototype.getHeaderLength = function () {
  return this.headerSpec_.reduce((function (prev, cur) {
    return prev + this.getFieldBitWidth(cur);
  }).bind(this), 0);
};

/**
 * Skip over headers given in spec, and return remainder of packet interpreted
 * to ascii with the given character width.
 * @param {string} binary - entire packet as a binary string
 * @param {number} bitsPerChar - bits to represent as a single character,
 *        recommended to use 8 for normal ASCII.
 */
Packet.Encoder.prototype.getBodyAsAscii = function (binary, bitsPerChar) {
  return DataConverters.binaryToAscii(this.getBody(binary), bitsPerChar);
};

/**
 * @param {Packet.HeaderType} headerType
 * @returns {number} how many bits that field should take in the packet header
 */
Packet.Encoder.prototype.getFieldBitWidth = function (headerType) {
  if (Packet.isAddressField(headerType)) {
    return this.addressBitWidth_;
  }

  if (Packet.isPacketField(headerType)) {
    return this.packetCountBitWidth_;
  }

  // Should never get here.
  throw new Error("Unable to select a bit-width for field " + headerType);
};

/**
 * Given a "headers" object where the values are numbers, returns a corresponding
 * "headers" object where the values have all been converted to binary
 * representations at the appropriate width.  Only header fields that appear in
 * the configured packet header format will be converted and passed through to
 * output.
 * @param {Object} headers - with number values
 */
Packet.Encoder.prototype.makeBinaryHeaders = function (headers) {
  var binaryHeaders = {};
  this.headerSpec_.forEach(function (headerField) {
    if (headers.hasOwnProperty(headerField)) {
      // Convert differently for address and packet fields?
      if (Packet.isAddressField(headerField)) {
        binaryHeaders[headerField] = this.addressStringToBinary(headers[headerField]);
      } else {
        binaryHeaders[headerField] = DataConverters.intToBinary(headers[headerField], this.getFieldBitWidth(headerField));
      }
    }
  }, this);
  return binaryHeaders;
};

/**
 * Convert an address string (possibly multi-part) into binary based on the
 * configured address format.
 * @param {string} address
 * @returns {string} binary representation
 */
Packet.Encoder.prototype.addressStringToBinary = function (address) {
  return DataConverters.addressStringToBinary(address, this.addressFormat_);
};

/**
 * Takes a set of binary headers and a binary body, and generates a complete
 * packet binary matching the configured packet spec in terms of header width
 * and ordering.
 *
 * @param {Object} binaryHeaders - hash containing packet headers in binary, where
 *        the hash keys correspond to the "key" values in the packet spec, and
 *        the hash values are binary strings.
 * @param {string} body - binary string of the unlimited-length body of the
 *        packet, which will be placed after the packet headers.
 *
 * @returns {string} binary string of provided data, conforming to configured
 *          packet format.
 */
Packet.Encoder.prototype.concatenateBinary = function (binaryHeaders, body) {
  var parts = [];

  this.headerSpec_.forEach(function (fieldSpec) {
    var fieldWidth = this.getFieldBitWidth(fieldSpec);

    // Get header value from provided headers, if it exists.
    // If not, we'll start with an empty string and pad it to the correct
    // length, below.
    var fieldBits = binaryHeaders.hasOwnProperty(fieldSpec) ? binaryHeaders[fieldSpec] : '';

    // Right-truncate to the desired size
    fieldBits = fieldBits.slice(0, fieldWidth);

    // Left-pad to desired size
    fieldBits = NetSimUtils.zeroPadLeft(fieldBits, fieldWidth);

    parts.push(fieldBits);
  }, this);

  parts.push(body);

  return parts.join('');
};

},{"./DataConverters":"/home/ubuntu/staging/apps/build/js/netsim/DataConverters.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsTab.js":[function(require,module,exports){
/**
 * @overview UI controller for the DNS tab in the left column.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var markup = require('./NetSimDnsTab.html.ejs');
var DnsMode = require('./NetSimConstants').DnsMode;
var NetSimDnsModeControl = require('./NetSimDnsModeControl');
var NetSimDnsManualControl = require('./NetSimDnsManualControl');
var NetSimDnsTable = require('./NetSimDnsTable');
var NetSimGlobals = require('./NetSimGlobals');

/**
 * Generator and controller for "DNS" tab.
 * @param {jQuery} rootDiv
 * @param {function} dnsModeChangeCallback
 * @param {function} becomeDnsCallback
 * @constructor
 */
var NetSimDnsTab = module.exports = function (rootDiv, dnsModeChangeCallback, becomeDnsCallback) {
  /**
   * Component root, which we fill whenever we call render()
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = rootDiv;

  /**
   * @type {function}
   * @private
   */
  this.dnsModeChangeCallback_ = dnsModeChangeCallback;

  /**
   * @type {function}
   * @private
   */
  this.becomeDnsCallback_ = becomeDnsCallback;

  /**
   * @type {NetSimDnsModeControl}
   * @private
   */
  this.dnsModeControl_ = null;

  /**
   * @type {NetSimDnsManualControl}
   * @private
   */
  this.dnsManualControl_ = null;

  /**
   * @type {NetSimDnsTable}
   * @private
   */
  this.dnsTable_ = null;

  this.render();
};

/**
 * Fill the root div with new elements reflecting the current state
 */
NetSimDnsTab.prototype.render = function () {
  var levelConfig = NetSimGlobals.getLevelConfig();

  var renderedMarkup = $(markup({
    level: levelConfig
  }));
  this.rootDiv_.html(renderedMarkup);

  if (levelConfig.showDnsModeControl) {
    this.dnsModeControl_ = new NetSimDnsModeControl(this.rootDiv_.find('.dns_mode'), this.dnsModeChangeCallback_);
  }

  this.dnsManualControl_ = new NetSimDnsManualControl(this.rootDiv_.find('.dns_manual_control'), this.becomeDnsCallback_);

  this.dnsTable_ = new NetSimDnsTable(this.rootDiv_.find('.dns_table'));
};

/**
 * @param {DnsMode} newDnsMode
 */
NetSimDnsTab.prototype.setDnsMode = function (newDnsMode) {
  if (this.dnsModeControl_) {
    this.dnsModeControl_.setDnsMode(newDnsMode);
  }

  this.dnsTable_.setDnsMode(newDnsMode);
  this.rootDiv_.find('.dns_manual_control').toggle(newDnsMode === DnsMode.MANUAL);
  this.rootDiv_.find('.dns-notes').toggle(newDnsMode !== DnsMode.NONE);
};

/**
 * @param {boolean} isDnsNode
 */
NetSimDnsTab.prototype.setIsDnsNode = function (isDnsNode) {
  this.dnsManualControl_.setIsDnsNode(isDnsNode);
};

/**
 * @param {Array} tableContents
 */
NetSimDnsTab.prototype.setDnsTableContents = function (tableContents) {
  this.dnsTable_.setDnsTableContents(tableContents);
};

},{"./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimDnsManualControl":"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsManualControl.js","./NetSimDnsModeControl":"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsModeControl.js","./NetSimDnsTab.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsTab.html.ejs","./NetSimDnsTable":"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsTable.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsTable.js":[function(require,module,exports){
/**
 * @overview UI table of local subnet, displaying hostname => address map.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var markup = require('./NetSimDnsTable.html.ejs');
var DnsMode = require('./NetSimConstants').DnsMode;

/**
 * Generator and controller for DNS network lookup table component.
 * Shows different amounts of information depending on the DNS mode.
 *
 * @param {jQuery} rootDiv
 * @constructor
 */
var NetSimDnsTable = module.exports = function (rootDiv) {
  /**
   * Component root, which we fill whenever we call render()
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = rootDiv;

  /**
   * @type {DnsMode}
   * @private
   */
  this.dnsMode_ = DnsMode.NONE;

  /**
   * @type {Array}
   * @private
   */
  this.addressTableData_ = [];

  this.render();
};

/**
 * Fill the root div with new elements reflecting the current state
 */
NetSimDnsTable.prototype.render = function () {
  var renderedMarkup = $(markup({
    dnsMode: this.dnsMode_,
    tableData: this.addressTableData_
  }));
  this.rootDiv_.html(renderedMarkup);
};

/**
 * @param {DnsMode} newDnsMode
 */
NetSimDnsTable.prototype.setDnsMode = function (newDnsMode) {
  this.dnsMode_ = newDnsMode;
  this.render();
};

/**
 * @param {Array} tableContents
 */
NetSimDnsTable.prototype.setDnsTableContents = function (tableContents) {
  this.addressTableData_ = tableContents;
  this.render();
};

},{"./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimDnsTable.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsTable.html.ejs"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsTable.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
var DnsMode = require('./NetSimConstants').DnsMode;
; buf.push('\n<div class="netsim-dns-table">\n  <h1>My Network</h1>\n  <table>\n    <thead>\n    <tr>\n      <th>Hostname</th>\n      <th>Address</th>\n    </tr>\n    </thead>\n    <tbody>\n    ');14;
    tableData.forEach(function (row) {
      var displayHostname = row.hostname;
      var displayAddress = '';
      var rowClasses = [];

      if (dnsMode === DnsMode.NONE || row.isDnsNode || row.isLocal) {
        displayAddress = row.address;
      }

      if (row.isLocal) {
        displayHostname += " (Me)";
        rowClasses.push('local-node');
      }

      if (row.isDnsNode && dnsMode !== DnsMode.NONE) {
        displayHostname += " (DNS)";
        rowClasses.push('dns-node');
      }
      ; buf.push('\n        <tr class="', escape((34,  rowClasses.join(' ') )), '">\n          <td>', escape((35,  displayHostname )), '</td>\n          <td>', escape((36,  displayAddress )), '</td>\n        </tr>\n      ');38;
    });
    ; buf.push('\n    </tbody>\n  </table>\n</div>'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsTab.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('<div class="netsim-dns-tab">\n  ');2; if (level.showDnsModeControl) { ; buf.push('\n  <div class="dns_mode"></div>\n  ');4; } ; buf.push('\n  <div class="dns_manual_control"></div>\n  <div class="dns_table"></div>\n  <div class="dns-notes">\n    <h1>Notes</h1>\n    <div>\n      <textarea></textarea>\n    </div>\n  </div>\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsModeControl.js":[function(require,module,exports){
/**
 * @overview UI component used to select a DNS mode at runtime.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var markup = require('./NetSimDnsModeControl.html.ejs');
var DnsMode = require('./NetSimConstants').DnsMode;

/**
 * Generator and controller for DNS mode selector
 * @param {jQuery} rootDiv
 * @param {function} dnsModeChangeCallback
 * @constructor
 */
var NetSimDnsModeControl = module.exports = function (rootDiv, dnsModeChangeCallback) {
  /**
   * Component root, which we fill whenever we call render()
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = rootDiv;

  /**
   * @type {function}
   * @private
   */
  this.dnsModeChangeCallback_ = dnsModeChangeCallback;

  /**
   * Set of all DNS mode radio buttons
   * @type {jQuery}
   * @private
   */
  this.dnsModeRadios_ = null;

  /**
   * Internal state: Current DNS mode.
   * @type {DnsMode}
   * @private
   */
  this.currentDnsMode_ = DnsMode.NONE;

  this.render();
};

/**
 * Fill the root div with new elements reflecting the current state
 */
NetSimDnsModeControl.prototype.render = function () {
  var renderedMarkup = $(markup({}));
  this.rootDiv_.html(renderedMarkup);

  this.dnsModeRadios_ = this.rootDiv_.find('input[type="radio"][name="dns_mode"]');
  this.dnsModeRadios_.change(this.onDnsModeChange_.bind(this));
  this.setDnsMode(this.currentDnsMode_);
};

/**
 * Handler for a new radio button being selected.
 * @private
 */
NetSimDnsModeControl.prototype.onDnsModeChange_ = function () {
  var newDnsMode = this.dnsModeRadios_.filter(':checked').val();
  this.dnsModeChangeCallback_(newDnsMode);
};

/**
 * @param {DnsMode} newDnsMode
 */
NetSimDnsModeControl.prototype.setDnsMode = function (newDnsMode) {
  this.currentDnsMode_ = newDnsMode;
  this.dnsModeRadios_.filter('[value="' + newDnsMode + '"]').prop('checked', true);
};

},{"./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimDnsModeControl.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsModeControl.html.ejs"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsModeControl.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
  var DnsMode = require('./NetSimConstants').DnsMode;
  var i18n = require('./locale');

  /**
   * @param {exports.DnsMode} mode
   * @param {string} label
   */
  function makeRadio(mode, label) {
    ; buf.push('\n    <div class="dns_mode_', escape((11,  mode )), '">\n      <input id="dns_mode_', escape((12,  mode )), '"\n                   type="radio"\n                   name="dns_mode"\n                   value="', escape((15,  mode )), '" />\n      <label for="dns_mode_', escape((16,  mode )), '">', escape((16,  label )), '</label>\n    </div>\n    ');18;
  }
; buf.push('\n<div class="dns-mode-control">\n  <h1>', escape((22,  i18n.dnsMode() )), '</h1>\n  ');23; makeRadio(DnsMode.NONE, i18n.dnsMode_NONE()); ; buf.push('\n  ');24; makeRadio(DnsMode.MANUAL, i18n.dnsMode_MANUAL()); ; buf.push('\n  ');25; makeRadio(DnsMode.AUTOMATIC, i18n.dnsMode_AUTOMATIC()); ; buf.push('\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsManualControl.js":[function(require,module,exports){
/**
 * @overview UI button used become the current DNS node in manual DNS mode.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var markup = require('./NetSimDnsManualControl.html.ejs');

/**
 * Generator and controller for DNS mode selector
 * @param {jQuery} rootDiv
 * @param {function} becomeDnsCallback
 * @constructor
 */
var NetSimDnsManualControl = module.exports = function (rootDiv, becomeDnsCallback) {
  /**
   * Component root, which we fill whenever we call render()
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = rootDiv;

  /**
   * @type {function}
   * @private
   */
  this.becomeDnsCallback_ = becomeDnsCallback;

  this.render();
};

/**
 * Fill the root div with new elements reflecting the current state
 */
NetSimDnsManualControl.prototype.render = function () {
  var renderedMarkup = $(markup({}));
  this.rootDiv_.html(renderedMarkup);
  this.rootDiv_.find('input[type="button"]').click(this.onBecomeDnsButtonClick_.bind(this));
};

/**
 * Handler for button click.
 * @private
 */
NetSimDnsManualControl.prototype.onBecomeDnsButtonClick_ = function () {
  this.becomeDnsCallback_();
};

/**
 * @param {boolean} isDnsNode
 */
NetSimDnsManualControl.prototype.setIsDnsNode = function (isDnsNode) {
  this.rootDiv_.find('input[type="button"]').attr('disabled', isDnsNode);
};

},{"./NetSimDnsManualControl.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsManualControl.html.ejs"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsManualControl.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('<div class="netsim_dns_manual_control">\n  <h1>Manual Control</h1>\n  <input id="become_dns_button" type="button" value="Take over as DNS" />\n</div>'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimClientNode.js":[function(require,module,exports){
/**
 * @overview Simulated client node.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var utils = require('../utils');
var _ = utils.getLodash();
var i18n = require('./locale');
var NodeType = require('./NetSimConstants').NodeType;
var NetSimEntity = require('./NetSimEntity');
var NetSimNode = require('./NetSimNode');
var NetSimWire = require('./NetSimWire');

/**
 * Client model of simulated node
 *
 * Represents the client's view of a node that is controlled by a user client,
 * either by our own client or somebody else's.  Is a NetSimEntity, meaning
 * it wraps a row in the node table and provides functionality around it.
 *
 * You may be looking for NetSimLocalClientNode if you're trying to manipulate
 * your local client node.
 *
 * @param {!NetSimShard} shard
 * @param {Object} [clientRow] - Lobby row for this router.
 * @constructor
 * @augments NetSimNode
 */
var NetSimClientNode = module.exports = function (shard, clientRow) {
  NetSimNode.call(this, shard, clientRow);
};
NetSimClientNode.inherits(NetSimNode);

/** @inheritdoc */
NetSimClientNode.prototype.getNodeType = function () {
  return NodeType.CLIENT;
};

/** @inheritdoc */
NetSimClientNode.prototype.getStatus = function () {
  var outgoingWire = this.getOutgoingWire();
  if (!outgoingWire) {
    return i18n.notConnected();
  }

  // Get remote node for display name / hostname
  var cachedNodeRows = this.shard_.nodeTable.readAll();
  var remoteNodeRow = _.find(cachedNodeRows, function (nodeRow) {
    return nodeRow.id === outgoingWire.remoteNodeID;
  });

  var remoteNodeName = i18n.unknownNode();
  if (remoteNodeRow) {
    remoteNodeName = remoteNodeRow.name;
  }

  // Check for connection state
  var mutualConnection;
  if (remoteNodeRow && remoteNodeRow.type === NodeType.ROUTER) {
    mutualConnection = true;
  } else {
    var cachedWireRows = this.shard_.wireTable.readAll();
    mutualConnection = cachedWireRows.some(function (wireRow) {
      return wireRow.localNodeID === outgoingWire.remoteNodeID && wireRow.remoteNodeID === outgoingWire.localNodeID;
    });
  }

  if (mutualConnection) {
    return i18n.connectedToNodeName({ nodeName: remoteNodeName });
  }
  return i18n.connectingToNodeName({ nodeName: remoteNodeName });
};

/** @inheritdoc */
NetSimClientNode.prototype.isFull = function () {
  var outgoingWire = this.getOutgoingWire();
  if (!outgoingWire) {
    return false;
  }
  var cachedWireRows = this.shard_.wireTable.readAll();
  return cachedWireRows.some(function (wireRow) {
    return wireRow.localNodeID === outgoingWire.remoteNodeID && wireRow.remoteNodeID === outgoingWire.localNodeID;
  });
};

/**
 * Determine what address has been assigned to this client on its outgoing
 * wire.
 * @returns {string|undefined}
 */
NetSimClientNode.prototype.getAddress = function () {
  var wire = this.getOutgoingWire();
  if (!wire) {
    return undefined;
  }
  return wire.localAddress;
};

/**
 * Based on cached wire data, retrieve this node's outgoing wire.
 * @returns {NetSimWire|null} null if wire does not exist.
 */
NetSimClientNode.prototype.getOutgoingWire = function () {
  var cachedWireRows = this.shard_.wireTable.readAll();
  var outgoingWireRow = _.find(cachedWireRows, function (wireRow) {
    return wireRow.localNodeID === this.entityID;
  }, this);
  if (outgoingWireRow) {
    return new NetSimWire(this.shard_, outgoingWireRow);
  }
  return null;
};

/**
 * Static async retrieval method.  See NetSimEntity.get().
 * @param {!number} nodeID - The row ID for the entity you'd like to find.
 * @param {!NetSimShard} shard
 * @param {!NodeStyleCallback} onComplete - Method that will be given the
 *        found entity, or null if entity search failed.
 */
NetSimClientNode.get = function (nodeID, shard, onComplete) {
  NetSimEntity.get(NetSimClientNode, nodeID, shard, onComplete);
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimEntity":"/home/ubuntu/staging/apps/build/js/netsim/NetSimEntity.js","./NetSimNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimNode.js","./NetSimWire":"/home/ubuntu/staging/apps/build/js/netsim/NetSimWire.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimNode.js":[function(require,module,exports){
/**
 * @overview A base class for all simulation node entities.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

require('../utils');
var i18n = require('./locale');
var NetSimEntity = require('./NetSimEntity');
var NetSimWire = require('./NetSimWire');

/**
 * Client model of simulated network entity, which lives
 * in a shard table.
 *
 * Wraps the entity row with helper methods for examining and maintaining
 * the entity state in shared storage.
 *
 * @param {!NetSimShard} shard
 * @param {Object} [nodeRow] JSON row from table.
 * @constructor
 * @augments NetSimEntity
 */
var NetSimNode = module.exports = function (shard, nodeRow) {
  nodeRow = nodeRow !== undefined ? nodeRow : {};
  NetSimEntity.call(this, shard, nodeRow);

  /**
   * @type {string}
   * @private
   */
  this.displayName_ = nodeRow.name;
};
NetSimNode.inherits(NetSimEntity);

/**
 * Get shared table for nodes
 * @returns {SharedTable}
 * @private
 */
NetSimNode.prototype.getTable = function () {
  return this.shard_.nodeTable;
};

/** Build table row for this node */
NetSimNode.prototype.buildRow = function () {
  return {
    type: this.getNodeType(),
    name: this.getDisplayName()
  };
};

/**
 * Get node's display name, which is stored in table.
 * @returns {string}
 */
NetSimNode.prototype.getDisplayName = function () {
  return this.displayName_ ? this.displayName_ : i18n.defaultNodeName();
};

/**
 * Get node's short display name, which is the same as the display name
 * but truncated to the first word if it's over a certain length.
 * @returns {string}
 */
NetSimNode.prototype.getShortDisplayName = function () {
  // If the name is longer than ten characters (longer than "Router 999")
  // then only show up to the first whitespace.
  var shortName = this.getDisplayName();
  if (shortName.length > 10) {
    shortName = shortName.split(/\s/)[0];
  }
  return shortName;
};

/**
 * Get node's hostname, a modified version of its display name.
 * @returns {string}
 */
NetSimNode.prototype.getHostname = function () {
  // Strip everything that's not a word-character or a digit from the display
  // name, then append the node ID so that hostnames are more likely to
  // be unique.
  return this.getShortDisplayName().replace(/[^\w\d]/g, '').toLowerCase() + this.entityID;
};

/**
 * Get node's type.
 * @returns {NodeType}
 */
NetSimNode.prototype.getNodeType = function () {
  throw new Error('getNodeType method is not implemented');
};

/**
 * Get localized description of node status.
 * @returns {string}
 */
NetSimNode.prototype.getStatus = function () {
  throw new Error('getStatus method is not implemented');
};

/**
 * Whether or not this node can accept any more connections
 * @returns {boolean}
 */
NetSimNode.prototype.isFull = function () {
  throw new Error('isFull method is not implemented');
};

/**
 * Establish a connection between this node and another node,
 * by creating a wire between them, and verifying that the remote node
 * can accept the connection.
 * When finished, calls onComplete({the new wire})
 * On failure, calls onComplete(null)
 * @param {!NetSimNode} otherNode
 * @param {NodeStyleCallback} [onComplete]
 */
NetSimNode.prototype.connectToNode = function (otherNode, onComplete) {
  onComplete = onComplete || function () {};

  var self = this;
  NetSimWire.create(this.shard_, this.makeWireRowForConnectingTo(otherNode), function (err, wire) {
    if (err) {
      onComplete(err, null);
      return;
    }

    otherNode.acceptConnection(self, function (err, isAccepted) {
      if (err || !isAccepted) {
        wire.destroy(function () {
          onComplete(new Error('Connection rejected: ' + err.message), null);
        });
        return;
      }

      onComplete(null, wire);
    });
  });
};

/**
 * Create an appropriate initial wire row for connecting to the given node.
 * @param {!NetSimNode} otherNode
 * @returns {WireRow}
 */
NetSimNode.prototype.makeWireRowForConnectingTo = function (otherNode) {
  return {
    localNodeID: this.entityID,
    remoteNodeID: otherNode.entityID
  };
};

/**
 * Called when another node establishes a connection to this one, giving this
 * node a chance to reject the connection.
 * @param {!NetSimNode} otherNode attempting to connect to this one
 * @param {!NodeStyleCallback} onComplete response method - should call with TRUE
 *        if connection is allowed, FALSE if connection is rejected.
 */
NetSimNode.prototype.acceptConnection = function (otherNode, onComplete) {
  onComplete(null, true);
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimEntity":"/home/ubuntu/staging/apps/build/js/netsim/NetSimEntity.js","./NetSimWire":"/home/ubuntu/staging/apps/build/js/netsim/NetSimWire.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimWire.js":[function(require,module,exports){
/**
 * @overview Simulation Entity: A connection between two nodes and related
 *           metadata.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

require('../utils');
var NetSimEntity = require('./NetSimEntity');
var ArgumentUtils = require('./ArgumentUtils');

/**
 * @typedef {Object} WireRow
 * @property {!number} localNodeID
 * @property {!number} remoteNodeID
 * @property {string} localAddress
 * @property {string} remoteAddress
 * @property {string} localHostname
 * @property {string} remoteHostname
 */

/**
 * Local controller for a simulated connection between nodes,
 * which is stored in the wire table on the shard.  The controller can
 * be initialized with the JSON row from the table, effectively wrapping that
 * data in helpful methods.
 *
 * @param {!NetSimShard} shard - The shard where this wire lives.
 * @param {WireRow} [wireRow] - A row out of the _wire table on the shard.
 *        If provided, will initialize this wire with the given data.  If not,
 *        this wire will initialize to default values.
 * @constructor
 * @augments NetSimEntity
 */
var NetSimWire = module.exports = function (shard, wireRow) {
  wireRow = wireRow !== undefined ? wireRow : {};
  NetSimEntity.call(this, shard, wireRow);

  /**
   * Connected node row IDs within the _lobby table
   * @type {number}
   */
  this.localNodeID = wireRow.localNodeID;
  /** @type {number} */
  this.remoteNodeID = wireRow.remoteNodeID;

  /**
   * Assigned local addresses for the ends of this wire.
   * @type {string}
   */
  this.localAddress = wireRow.localAddress;
  /** @type {string} */
  this.remoteAddress = wireRow.remoteAddress;

  /**
   * Display hostnames for the ends of this wire.
   * Generally, each endpoint should set its own hostname.
   * @type {string}
   */
  this.localHostname = wireRow.localHostname;
  /** @type {string} */
  this.remoteHostname = wireRow.remoteHostname;
};
NetSimWire.inherits(NetSimEntity);

/**
 * Static async creation method.  See NetSimEntity.create().
 * @param {!NetSimShard} shard
 * @param {!WireRow} initialRow
 * @param {!NodeStyleCallback} onComplete - Method that will be given the
 *        created entity, or null if entity creation failed.
 */
NetSimWire.create = function (shard, initialRow, onComplete) {
  ArgumentUtils.validateRequired(initialRow, "initialRow");
  ArgumentUtils.validateRequired(initialRow.localNodeID, "localNodeID", ArgumentUtils.isPositiveNoninfiniteNumber);
  ArgumentUtils.validateRequired(initialRow.remoteNodeID, "remoteNodeID", ArgumentUtils.isPositiveNoninfiniteNumber);
  var entity = new NetSimWire(shard, initialRow);
  entity.getTable().create(entity.buildRow(), function (err, row) {
    if (err) {
      onComplete(err, null);
      return;
    }
    onComplete(null, new NetSimWire(shard, row));
  });
};

/**
 * Helper that gets the wires table for the configured shard.
 * @returns {NetSimTable}
 */
NetSimWire.prototype.getTable = function () {
  return this.shard_.wireTable;
};

/**
 * Build own row for the wire table
 * @returns {WireRow}
 */
NetSimWire.prototype.buildRow = function () {
  return {
    localNodeID: this.localNodeID,
    remoteNodeID: this.remoteNodeID,
    localAddress: this.localAddress,
    remoteAddress: this.remoteAddress,
    localHostname: this.localHostname,
    remoteHostname: this.remoteHostname
  };
};

/**
 * @param {MessageRow} messageRow
 * @returns {boolean} TRUE if the given message is travelling between the nodes
 *          that this wire connects, in the wire's direction.
 */
NetSimWire.prototype.isMessageRowOnDuplexWire = function (messageRow) {
  return this.localNodeID === messageRow.fromNodeID && this.remoteNodeID === messageRow.toNodeID;
};

/**
 * @param {MessageRow} messageRow
 * @returns {boolean} TRUE if the given message is travelling between the nodes
 *          that this wire connects, in either direction.
 */
NetSimWire.prototype.isMessageRowOnSimplexWire = function (messageRow) {
  var onWire = this.isMessageRowOnDuplexWire(messageRow);
  var onReverseWire = this.localNodeID === messageRow.toNodeID && this.remoteNodeID === messageRow.fromNodeID;
  return onWire || onReverseWire;
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./ArgumentUtils":"/home/ubuntu/staging/apps/build/js/netsim/ArgumentUtils.js","./NetSimEntity":"/home/ubuntu/staging/apps/build/js/netsim/NetSimEntity.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimEntity.js":[function(require,module,exports){
/**
 * @overview base class for all simulation entities.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

/**
 * Client model of simulated network entity, which lives in a shard table.
 *
 * Wraps the entity row with helper methods for examining and maintaining
 * the entity state in shared storage.
 *
 * @param {!NetSimShard} shard
 * @param {Object} [entityRow] JSON row from table.
 * @constructor
 */
var NetSimEntity = module.exports = function (shard, entityRow) {
  if (entityRow === undefined) {
    entityRow = {};
  }

  /**
   * @type {NetSimShard}
   * @protected
   */
  this.shard_ = shard;

  /**
   * Node's row ID within the _lobby table.  Unique within instance.
   * @type {number}
   */
  this.entityID = entityRow.id;

  /**
   * Node's UUID assigned when it was initially inserted into the table.
   * @type {string}
   */
  this.uuid = entityRow.uuid;
};

/**
 * Static async creation method.  Creates a new entity on the given shard,
 * and then calls the callback with a local controller for the new entity.
 * @param {!function} EntityType - The constructor for the entity type you want
 *        to create.
 * @param {!NetSimShard} shard
 * @param {!NodeStyleCallback} onComplete - Method that will be given the
 *        created entity, or null if entity creation failed.
 */
NetSimEntity.create = function (EntityType, shard, onComplete) {
  var entity = new EntityType(shard);
  entity.getTable().create(entity.buildRow(), function (err, row) {
    if (err) {
      onComplete(err, null);
    } else {
      onComplete(null, new EntityType(shard, row));
    }
  });
};

/**
 * Static async retrieval method.  Searches for a new entity on the given
 * shard, and then calls the callback with a local controller for the
 * found entity.
 * @param {!function} EntityType - The constructor for the entity type you want
 *        to find.
 * @param {!number} entityID - The row ID for the entity you'd like to find.
 * @param {!NetSimShard} shard
 * @param {!NodeStyleCallback} onComplete - Method that will be given the
 *        found entity, or null if entity search failed.
 */
NetSimEntity.get = function (EntityType, entityID, shard, onComplete) {
  var entity = new EntityType(shard);
  entity.getTable().read(entityID, function (err, row) {
    if (err) {
      onComplete(err, null);
    } else {
      onComplete(err, new EntityType(shard, row));
    }
  });
};

/**
 * Push entity state into remote storage.
 * @param {NodeStyleCallback} [onComplete] - Optional completion callback.
 */
NetSimEntity.prototype.update = function (onComplete) {
  onComplete = onComplete || function () {};

  this.getTable().update(this.entityID, this.buildRow(), onComplete);
};

/**
 * Remove entity from remote storage.
 * @param {NodeStyleCallback} [onComplete] - Optional completion callback
 */
NetSimEntity.prototype.destroy = function (onComplete) {
  onComplete = onComplete || function () {};

  this.getTable()['delete'](this.entityID, onComplete);
};

/**
 * Remove entity from remote storage, using a synchronous call.
 * For use when navigating away from the page; otherwise, async version
 * is preferred.
 * @returns {Error|null} error if entity delete fails
 */
NetSimEntity.prototype.synchronousDestroy = function () {
  return this.getTable().synchronousDelete(this.entityID);
};

/** Get storage table for this entity type. */
NetSimEntity.prototype.getTable = function () {
  // This method should be implemented by a child class.
  throw new Error('Method getTable is not implemented.');
};

/** Construct table row for this entity. */
NetSimEntity.prototype.buildRow = function () {
  return {};
};

/**
 * Destroys all provided entities (from remote storage) asynchronously, and
 * calls onComplete when all entities have been destroyed and/or an error occurs.
 * @param {NetSimEntity[]} entities
 * @param {!NodeStyleCallback} onComplete
 * @throws {Error} if all passed entities do not belong to the same table.
 */
NetSimEntity.destroyEntities = function (entities, onComplete) {
  if (entities.length === 0) {
    onComplete(null, true);
    return;
  }

  var table = entities[0].getTable();
  var entityIDs = entities.map(function (entity) {
    if (entity.getTable() !== table) {
      throw new Error("destroyEntities requires all entities to be in the same table");
    }
    return entity.entityID;
  });

  table.deleteMany(entityIDs, onComplete);
};

},{}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimChunkSizeControl.js":[function(require,module,exports){
/**
 * @overview UI slider used to change the local device's chunk size, which
 *           is used when interpreting binary to other formats.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var i18n = require('./locale');
var NetSimSlider = require('./NetSimSlider');

/**
 * Generator and controller for chunk size slider/selector
 * @param {jQuery} rootDiv
 * @param {function} chunkSizeChangeCallback
 * @constructor
 * @augments NetSimSlider
 */
var NetSimChunkSizeControl = module.exports = function (rootDiv, chunkSizeChangeCallback) {
  NetSimSlider.call(this, rootDiv, {
    onChange: chunkSizeChangeCallback,
    min: 1,
    max: 32
  });

  // Auto-render, unlike our parent class
  this.render();
};
NetSimChunkSizeControl.inherits(NetSimSlider);

/**
 * Converts an external-facing numeric value into a localized string
 * representation of that value.
 * @param {number} val - numeric value of the control
 * @returns {string} - localized string representation of value
 * @override
 */
NetSimChunkSizeControl.prototype.valueToLabel = function (val) {
  return i18n.numBitsPerChunk({
    numBits: val
  });
};

/**
 * Alternate label converter, used for slider end labels.
 * @param {number} val - numeric value of the control
 * @returns {string} - localized string representation of value
 * @override
 */
NetSimChunkSizeControl.prototype.valueToShortLabel = function (val) {
  return val.toString();
};

},{"./NetSimSlider":"/home/ubuntu/staging/apps/build/js/netsim/NetSimSlider.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimBitRateControl.js":[function(require,module,exports){
/**
 * @overview UI slider used to change the local device's bitrate.
 *           Differs from the pulse rate slider in scale and units.
 * @see NetSimPulseRateControl
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

// Utils required only for Function.prototype.inherits()
require('../utils');
var NetSimUtils = require('./NetSimUtils');
var NetSimSlider = require('./NetSimSlider');

/**
 * Generator and controller for packet size slider/selector
 * @param {jQuery} rootDiv
 * @param {number} initialValue - in bits per second
 * @param {function} sliderChangeCallback
 * @constructor
 */
var NetSimBitRateControl = module.exports = function (rootDiv, initialValue, sliderChangeCallback) {
  NetSimSlider.call(this, rootDiv, {
    onChange: sliderChangeCallback,
    value: initialValue,
    min: 1,
    max: 20,
    upperBoundInfinite: true
  });

  // Auto-render, unlike our base class
  this.render();
};
NetSimBitRateControl.inherits(NetSimSlider);

/**
 * Converts a numeric rate value (in bits pers second) into a
 * localized string representation of that value.
 * @param {number} val - numeric value of the control
 * @returns {string} - localized string representation of value
 * @override
 */
NetSimBitRateControl.prototype.valueToLabel = function (val) {
  return NetSimUtils.bitrateToLocalizedRoundedBitrate(val);
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimSlider":"/home/ubuntu/staging/apps/build/js/netsim/NetSimSlider.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimBitLogPanel.js":[function(require,module,exports){
/**
 * @overview UI component, a log panel (used as "Sent Bits" and "Received Bits")
 *           that is used in the single-bit-sending configurations of the simulator.
 *
 * @see INetSimLogPanel for the interface implemented here.
 * @see NetSimLogPanel for the component used in packet-sending mode.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

require('../utils'); // For Function.prototype.inherits()
var i18n = require('./locale');
var markup = require('./NetSimBitLogPanel.html.ejs');
var NetSimPanel = require('./NetSimPanel');
var NetSimEncodingControl = require('./NetSimEncodingControl');
var NetSimGlobals = require('./NetSimGlobals');

var logger = require('./NetSimLogger').getSingleton();

/**
 * Generator and controller for bit-log, which receives bits one at a time.
 * @param {jQuery} rootDiv
 * @param {Object} options
 * @param {string} options.logTitle
 * @param {boolean} [options.isMinimized] defaults to FALSE
 * @param {boolean} [options.showReadWireButton] defaults to FALSE
 * @param {NetSim} options.netsim
 * @constructor
 * @augments NetSimPanel
 * @implements INetSimLogPanel
 */
var NetSimBitLogPanel = module.exports = function (rootDiv, options) {
  /**
   * The current binary contents of the log panel
   * @type {string}
   * @private
   */
  this.binary_ = '';

  /**
   * A message encoding (display) setting.
   * @type {string}
   * @private
   */
  this.encodings_ = [];

  /**
   * Current chunk size (bytesize) for interpreting binary in the log.
   * @type {number}
   * @private
   */
  this.chunkSize_ = 8;

  /**
   * Localized panel title
   * @type {string}
   * @private
   */
  this.logTitle_ = options.logTitle;

  /**
   * Reference to the top-level NetSim controller for reading bits and
   * triggering animations.
   * @type {NetSim}
   * @private
   */
  this.netsim_ = options.netsim;

  /**
   * Whether this log should have a "Read Wire" button.
   * @type {boolean}
   * @private
   */
  this.showReadWireButton_ = options.showReadWireButton;

  /**
   * How tall the overall panel should be when it's open (in pixels).
   * Set by a dynamic resize system.
   * @type {number}
   * @private
   */
  this.openHeight_ = 0;

  // Initial render
  NetSimPanel.call(this, rootDiv, {
    className: 'netsim-log-panel',
    panelTitle: options.logTitle,
    beginMinimized: options.isMinimized
  });
};
NetSimBitLogPanel.inherits(NetSimPanel);

NetSimBitLogPanel.prototype.render = function () {
  // Create boilerplate panel markup
  NetSimBitLogPanel.superPrototype.render.call(this);

  // Add our own content markup
  var newMarkup = $(markup({
    binary: this.binary_,
    enabledEncodings: this.encodings_,
    chunkSize: this.chunkSize_,
    showReadWireButton: this.showReadWireButton_
  }));
  this.getBody().html(newMarkup);
  NetSimEncodingControl.hideRowsByEncoding(this.getBody(), this.encodings_);

  this.getBody().find('#read-wire-button').click(this.onReceiveButtonPress_.bind(this));

  // Add a clear button to the panel header
  this.addButton(i18n.clear(), this.onClearButtonPress_.bind(this));

  // Snap back to the dynamic size we've been given.
  this.sizeToOpenHeight_();
};

/**
 * Remove all packets from the log, resetting its state.
 * @private
 */
NetSimBitLogPanel.prototype.onClearButtonPress_ = function () {
  this.binary_ = '';
  this.render();
};

/**
 * Asynchronously fetch the wire state from remote storage, and log it.
 * @param {Event} jQueryEvent
 * @private
 */
NetSimBitLogPanel.prototype.onReceiveButtonPress_ = function (jQueryEvent) {
  var thisButton = $(jQueryEvent.target);
  if (thisButton.is('[disabled]')) {
    return;
  }

  thisButton.attr('disabled', 'disabled');
  this.netsim_.receiveBit((function (err, message) {
    if (err) {
      logger.warn("Error reading wire state: " + err.message);
      thisButton.removeAttr('disabled');
      return;
    }

    // A successful fetch with a null message means there's nothing
    // on the wire.  We should log its default state: off/zero
    var receivedBit = '0';
    if (message) {
      receivedBit = message.payload;
    }

    this.log(receivedBit);
    this.netsim_.animateReadWireState(receivedBit);
    thisButton.removeAttr('disabled');
  }).bind(this));
};

/**
 * Put a message into the log.
 * @param {string} binaryBit
 */
NetSimBitLogPanel.prototype.log = function (binaryBit) {
  this.binary_ += binaryBit.toString();
  this.render();
};

/**
 * Show or hide parts of the send UI based on the currently selected encoding
 * mode.
 * @param {EncodingType[]} newEncodings
 */
NetSimBitLogPanel.prototype.setEncodings = function (newEncodings) {
  this.encodings_ = newEncodings;
  this.render();
};

/**
 * Change how binary input in interpreted and formatted in the log.
 * @param {number} newChunkSize
 */
NetSimBitLogPanel.prototype.setChunkSize = function (newChunkSize) {
  this.chunkSize_ = newChunkSize;
  this.render();
};

/**
 * Sets the vertical space that this log panel should consume (including margins)
 * @param {number} heightPixels
 */
NetSimBitLogPanel.prototype.setHeight = function (heightPixels) {
  this.openHeight_ = heightPixels;
  this.sizeToOpenHeight_();
};

/**
 * Scale the scroll area inside the panel so that the whole panel
 * is the desired height.
 * @private
 */
NetSimBitLogPanel.prototype.sizeToOpenHeight_ = function () {
  var root = this.getRoot().find('.netsim-panel');
  var panelHeader = root.find('h1');
  var panelBody = root.find('.panel-body');
  var scrollArea = root.find('.scroll-area');

  var panelMargins = parseFloat(root.css('margin-top')) + parseFloat(root.css('margin-bottom'));
  var headerHeight = panelHeader.outerHeight(true);
  var panelBorders = parseFloat(panelBody.css('border-top-width')) + parseFloat(panelBody.css('border-bottom-width'));
  var scrollMargins = parseFloat(scrollArea.css('margin-top')) + parseFloat(scrollArea.css('margin-bottom'));

  // We set the panel height by fixing the size of its inner scrollable
  // area.
  var newScrollViewportHeight = this.openHeight_ - (panelMargins + headerHeight + panelBorders + scrollMargins);
  scrollArea.height(Math.floor(newScrollViewportHeight));
};

/**
 * @returns {number} vertical space that panel currently consumes (including
 * margins) in pixels.
 */
NetSimBitLogPanel.prototype.getHeight = function () {
  return this.getRoot().find('.netsim-panel').outerHeight(true);
};

/**
 * After toggling panel visibility, trigger a layout update so send/log panel
 * space is shared correctly.
 * @private
 * @override
 */
NetSimBitLogPanel.prototype.onMinimizerClick_ = function () {
  NetSimBitLogPanel.superPrototype.onMinimizerClick_.call(this);
  NetSimGlobals.updateLayout();
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimBitLogPanel.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimBitLogPanel.html.ejs","./NetSimEncodingControl":"/home/ubuntu/staging/apps/build/js/netsim/NetSimEncodingControl.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimLogger":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogger.js","./NetSimPanel":"/home/ubuntu/staging/apps/build/js/netsim/NetSimPanel.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimPanel.js":[function(require,module,exports){
/**
 * @overview base class for all "panels" (visual boxes) in the NetSim
 *           interface, provides some common expand/collapse functionality.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var utils = require('../utils');
var markup = require('./NetSimPanel.html.ejs');
var ArgumentUtils = require('./ArgumentUtils');

/**
 * Generator and controller for a NetSim Panel, a single section on the
 * page which may be collapsible.
 * @param {jQuery} rootDiv - Element within which the panel is recreated
 *        every time render() is called.  Will wipe out contents of this
 *        element, but not the element itself.
 * @param {Object} [options]
 * @param {string} [options.className] - an additional class to be appended to
 *        the panel's root (one layer inside rootDiv) for style rules.
 *        Defaults to no class, so only the 'netsim-panel' class will be used.
 * @param {string} [options.panelTitle] - Localized initial panel title.
 *        Defaults to empty string.
 * @param {boolean} [options.userToggleable] - Whether this panel can be minimized
 *        (closed) by clicking on the title. Defaults to TRUE.
 * @param {boolean} [options.beginMinimized] - Whether this panel should be
 *        minimized (closed) when it is initially created.  Defaults to FALSE.
 * @constructor
 */
var NetSimPanel = module.exports = function (rootDiv, options) {
  /**
   * Unique instance ID for this panel, in case we have several
   * of them on a page.
   * @type {number}
   * @private
   */
  this.instanceID_ = NetSimPanel.uniqueIDCounter;
  NetSimPanel.uniqueIDCounter++;

  /**
   * Component root, which we fill whenever we call render()
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = rootDiv;

  /**
   * An additional className to be appended to the panel's root (one layer
   * inside rootDiv), for style rules.
   * @type {string}
   * @private
   */
  this.className_ = utils.valueOr(options.className, '');

  /**
   * Panel title, displayed in header.
   * @type {string}
   * @private
   */
  this.panelTitle_ = utils.valueOr(options.panelTitle, '');

  /**
   * Whether this panel can be minimized (closed) by clicking on the title.
   * @type {boolean}
   * @private
   */
  this.userToggleable_ = utils.valueOr(options.userToggleable, true);

  /**
   * Whether the component is minimized, for consistent
   * state across re-renders.
   * @type {boolean}
   * @private
   */
  this.isMinimized_ = utils.valueOr(options.beginMinimized, false);

  // Initial render
  this.render();
};

/**
 * Static counter used to generate/uniquely identify different instances
 * of this log widget on the page.
 * @type {number}
 */
NetSimPanel.uniqueIDCounter = 0;

/**
 * Rebuild the panel contents inside of the rootDiv
 */
NetSimPanel.prototype.render = function () {
  var newMarkup = $(markup({
    instanceID: this.instanceID_,
    className: this.className_,
    panelTitle: this.panelTitle_,
    userToggleable: this.userToggleable_
  }));
  this.rootDiv_.html(newMarkup);

  if (this.userToggleable_) {
    this.rootDiv_.find('.minimizer').click(this.onMinimizerClick_.bind(this));
  }
  this.setMinimized(this.isMinimized_);
};

/**
 * @returns {jQuery} a handle on the root element for this panel
 */
NetSimPanel.prototype.getRoot = function () {
  return this.rootDiv_;
};

/**
 * Set panel title.
 * @param {string} newTitle - Localized panel title.
 */
NetSimPanel.prototype.setPanelTitle = function (newTitle) {
  this.panelTitle_ = newTitle;
  this.rootDiv_.find('.title-text').text(newTitle);
};

/**
 * Toggle whether this panel is minimized.
 * @private
 */
NetSimPanel.prototype.onMinimizerClick_ = function () {
  this.setMinimized(!this.isMinimized_);
};

/**
 * @param {boolean} becomeMinimized
 */
NetSimPanel.prototype.setMinimized = function (becomeMinimized) {
  var panelDiv = this.rootDiv_.find('.netsim-panel');
  var minimizer = panelDiv.find('.minimizer');
  if (becomeMinimized) {
    panelDiv.addClass('minimized');
    minimizer.find('.fa').addClass('fa-plus-square').removeClass('fa-minus-square');
  } else {
    panelDiv.removeClass('minimized');
    minimizer.find('.fa').addClass('fa-minus-square').removeClass('fa-plus-square');
  }
  this.isMinimized_ = becomeMinimized;
};

/**
 * Whether this panel is currently minimized (showing only its header) or not.
 * @returns {boolean}
 */
NetSimPanel.prototype.isMinimized = function () {
  return this.isMinimized_;
};

/**
 * Add a button to the right end of the panel header.
 * @param {string} buttonText
 * @param {function} pressCallback
 * @param {Object} [options]
 * @param {boolean} [options.secondary] - default TRUE, secondary button style
 * @param {string[]} [options.classes] - default [], additional classes on the
 *        button element.
 */
NetSimPanel.prototype.addButton = function (buttonText, pressCallback, options) {
  options = ArgumentUtils.extendOptionsObject(options || {});

  var button = $('<span>').addClass('netsim-button').html(buttonText).click(pressCallback);

  if (options.get('secondary', ArgumentUtils.isBoolean, true)) {
    button.addClass('secondary');
  }

  options.get('classes', ArgumentUtils.isArrayOfStrings(), []).forEach(function (className) {
    button.addClass(className);
  });

  button.appendTo(this.rootDiv_.find('.panel-controls'));
};

/**
 * @returns {jQuery} the body Div of the panel, for panel content.
 */
NetSimPanel.prototype.getBody = function () {
  return this.rootDiv_.find('.panel-body');
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./ArgumentUtils":"/home/ubuntu/staging/apps/build/js/netsim/ArgumentUtils.js","./NetSimPanel.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimPanel.html.ejs"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimPanel.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('<div id="netsim-panel-', escape((1,  instanceID )), '"\n     class="netsim-panel ', escape((2,  className )), '">\n  <h1>\n    <div class="panel-controls"></div>\n    <div class="single-line-with-ellipsis pad-left');5; if (userToggleable) { ; buf.push(' minimizer');5; } ; buf.push('">\n      ');6; if (userToggleable) { ; buf.push('\n        <i class="fa fa-minus-square"></i>\n      ');8; } ; buf.push('\n      <span class="title-text">', escape((9,  panelTitle )), '</span>\n    </div>\n  </h1>\n  <div class="panel-body">\n  </div>\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimEncodingControl.js":[function(require,module,exports){
/**
 * @overview UI controller for set of radio buttons used to select display encodings.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var markup = require('./NetSimEncodingControl.html.ejs');
var EncodingType = require('./NetSimConstants').EncodingType;

/**
 * Generator and controller for message encoding selector: A dropdown that
 * controls whether messages are displayed in some combination of binary, hex,
 * decimal, ascii, etc.
 * @param {jQuery} rootDiv
 * @param {NetSimLevelConfiguration} levelConfig
 * @param {function} changeEncodingCallback
 * @constructor
 */
var NetSimEncodingControl = module.exports = function (rootDiv, levelConfig, changeEncodingCallback) {
  /**
   * Component root, which we fill whenever we call render()
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = rootDiv;

  /**
   * @type {NetSimLevelConfiguration}
   * @private
   */
  this.levelConfig_ = levelConfig;

  /**
   * @type {function}
   * @private
   */
  this.changeEncodingCallback_ = changeEncodingCallback;

  /**
   * @type {jQuery}
   * @private
   */
  this.checkboxes_ = null;

  // Initial render
  this.render();
};

/**
 * Fill the root div with new elements reflecting the current state
 */
NetSimEncodingControl.prototype.render = function () {
  var renderedMarkup = $(markup({
    level: this.levelConfig_
  }));
  this.rootDiv_.html(renderedMarkup);
  this.checkboxes_ = this.rootDiv_.find('input[type="checkbox"][name="encoding_checkboxes"]');
  this.checkboxes_.change(this.onCheckboxesChange_.bind(this));
};

/**
 * Send new selected encodings to registered callback on change.
 * @private
 */
NetSimEncodingControl.prototype.onCheckboxesChange_ = function () {
  var selectedEncodings = [];
  this.checkboxes_.filter(':checked').each(function (i, element) {
    selectedEncodings.push(element.value);
  });
  this.changeEncodingCallback_(selectedEncodings);
};

/**
 * Change selector value to the new provided value.
 * @param {EncodingType[]} newEncodings
 */
NetSimEncodingControl.prototype.setEncodings = function (newEncodings) {
  this.checkboxes_.each(function (i, element) {
    $(element).attr('checked', newEncodings.indexOf(element.value) > -1);
  });
};

/**
 * Generate a jQuery selector string that will get all rows that
 * have ANY of the provided classes.
 * @param {EncodingType[]} encodings
 * @returns {string}
 */
var makeEncodingRowSelector = function makeEncodingRowSelector(encodings) {
  return encodings.map(function (className) {
    return 'tr.' + className;
  }).join(', ');
};

/**
 * Static helper, shows/hides rows under provided element according to the given
 * encoding setting.
 * @param {jQuery} rootElement - root of elements to show/hide
 * @param {EncodingType[]} encodings - a message encoding setting
 */
NetSimEncodingControl.hideRowsByEncoding = function (rootElement, encodings) {
  var hiddenEncodings = [];
  for (var key in EncodingType) {
    if (EncodingType.hasOwnProperty(key) && encodings.indexOf(EncodingType[key]) === -1) {
      hiddenEncodings.push(EncodingType[key]);
    }
  }
  rootElement.find(makeEncodingRowSelector(encodings)).show();
  rootElement.find(makeEncodingRowSelector(hiddenEncodings)).hide();
};

/**
 * Static helper that converts a given array of encodings to an object
 * mapping each encoding to `true`. Used for more efficient
 * isEncodingEnabled checks
 * @param {EncodingType[]} encodings
 * @returns {Object.<EncodingType, boolean>}
 */
NetSimEncodingControl.encodingsAsHash = function (encodings) {
  return encodings.reduce(function (hash, encoding) {
    hash[encoding] = true;
    return hash;
  }, {});
};

},{"./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimEncodingControl.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimEncodingControl.html.ejs"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimEncodingControl.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
  var EncodingType = require('./NetSimConstants').EncodingType;
  var i18n = require('./locale');

  /**
   * @param {EncodingType} encodingType
   * @param {string} encodingLabel
   */
  function makeCheckbox(encodingType, encodingLabel) {
    var divClasses = ['encoding_checkboxes_' + encodingType];
    if (level.showEncodingControls.indexOf(encodingType) === -1) {
      divClasses.push('hidden-control');
    }
    ; buf.push('\n    <div class="', escape((15,  divClasses.join(' ') )), '">\n      <input type="checkbox"\n             name="encoding_checkboxes"\n             id="encoding_checkboxes_', escape((18,  encodingType )), '"\n             value="', escape((19,  encodingType )), '"\n          />\n      <label for="encoding_checkboxes_', escape((21,  encodingType )), '">', escape((21,  encodingLabel )), '</label>\n    </div>\n    ');23;
  }
; buf.push('\n<div class="netsim-encoding-selector">\n  <h1>', escape((27,  i18n.encoding() )), '</h1>\n  ');28; makeCheckbox(EncodingType.ASCII, i18n.ascii()); ; buf.push('\n  ');29; makeCheckbox(EncodingType.DECIMAL, i18n.decimal()); ; buf.push('\n  ');30; makeCheckbox(EncodingType.HEXADECIMAL, i18n.hexadecimal()); ; buf.push('\n  ');31; makeCheckbox(EncodingType.BINARY, i18n.binary()); ; buf.push('\n  ');32; makeCheckbox(EncodingType.A_AND_B, i18n.a_and_b()); ; buf.push('\n</div>'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimBitLogPanel.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
  var i18n = require('./locale');
  var NetSimConstants = require('./NetSimConstants');
  var DataConverters = require('./DataConverters');

  var getEncodingLabel = require('./NetSimUtils').getEncodingLabel;

  var EncodingType = NetSimConstants.EncodingType;
  var PacketUIColumnType = NetSimConstants.PacketUIColumnType;

  /**
   * @param {EncodingType} encodingType
   * @param {string} encodedContent
   */
  function logRow(encodingType, encodedContent) {
    ; buf.push('\n    <tr class="', escape((17,  encodingType )), '">\n      <th nowrap class="', escape((18,  PacketUIColumnType.ENCODING_LABEL )), '">', escape((18,  getEncodingLabel(encodingType) )), '</th>\n      <td class="', escape((19,  PacketUIColumnType.MESSAGE )), '">', escape((19,  encodedContent )), '</td>\n    </tr>\n    ');21;
  }
; buf.push('\n<div class="scroll-area bit-log-scroll-area">\n  <div class="packet">\n    <table>\n      <tbody>\n        ');28;
          logRow(EncodingType.ASCII, DataConverters.binaryToAscii(binary, chunkSize));

          logRow(EncodingType.DECIMAL, DataConverters.alignDecimal(DataConverters.binaryToDecimal(binary, chunkSize)));

          logRow(EncodingType.HEXADECIMAL, DataConverters.formatHex(DataConverters.binaryToHex(binary), chunkSize));

          logRow(EncodingType.BINARY, DataConverters.formatBinary(binary, chunkSize));

          logRow(EncodingType.A_AND_B, DataConverters.formatAB(DataConverters.binaryToAB(binary), chunkSize));
        ; buf.push('\n      </tbody>\n    </table>\n  </div>\n  ');42; if (showReadWireButton) { ; buf.push('\n    <div class="panel-footer bit-log-panel-footer">\n      <div class="right-side-controls">\n        <span class="netsim-button large-button" id="read-wire-button">', escape((45,  i18n.readWire() )), '</span>\n      </div>\n    </div>\n  ');48; } ; buf.push('\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"./DataConverters":"/home/ubuntu/staging/apps/build/js/netsim/DataConverters.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimBandwidthControl.js":[function(require,module,exports){
/**
 * @overview UI Slider control used for changing simulated router bandwidth.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

// Utils required only for Function.prototype.inherits()
require('../utils');
var NetSimConstants = require('./NetSimConstants');
var NetSimUtils = require('./NetSimUtils');
var NetSimSlider = require('./NetSimSlider');

/**
 * Generator and controller for packet size slider/selector
 * @param {jQuery} rootDiv
 * @param {function} sliderChangeCallback
 * @param {function} sliderStopCallback
 * @constructor
 */
var NetSimBandwidthControl = module.exports = function (rootDiv, sliderChangeCallback, sliderStopCallback) {
  NetSimSlider.LogarithmicSlider.call(this, rootDiv, {
    onChange: sliderChangeCallback,
    onStop: sliderStopCallback,
    value: Infinity,
    min: 4,
    max: 128 * NetSimConstants.BITS_PER_KILOBIT,
    upperBoundInfinite: true
  });

  // Auto-render, unlike our base class
  this.render();
};
NetSimBandwidthControl.inherits(NetSimSlider.LogarithmicSlider);

/**
 * Converts a numeric bandwidth value (in bits) into a compact localized string
 * representation of that value.
 * @param {number} val - numeric value of the control
 * @returns {string} - localized string representation of value
 * @override
 */
NetSimBandwidthControl.prototype.valueToLabel = function (val) {
  return NetSimUtils.bitrateToLocalizedRoundedBitrate(val);
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimSlider":"/home/ubuntu/staging/apps/build/js/netsim/NetSimSlider.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimSlider.js":[function(require,module,exports){
/**
 * @overview Base implementation of NetSim UI sliders.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var utils = require('../utils');
var markup = require('./NetSimSlider.html.ejs');
var i18n = require('./locale');

/**
 * @type {number}
 * @const
 */
var SLIDER_DEFAULT_MIN_VALUE = 0;

/**
 * @type {number}
 * @const
 */
var SLIDER_DEFAULT_MAX_VALUE = 100;

/**
 *
 * @constructor
 * @param {jQuery} rootDiv - element whose content we replace with the slider
 *        on render()
 * @param {Object} options
 * @param {function} [options.onChange] - a function invoked whenever the
 *        slider-value is changed by the student.  Passed the new value as an
 *        argument.
 * @param {function} [options.onStop] - a function invoked only when the
 *        slider-handle is released by the student.  Passed the new value as an
 *        argument.
 * @param {number} [options.value] - Initial value of the slider.  Defaults to
 *        slider minimum value.
 * @param {number} [options.min] - Lowest possible value of the slider;
 *        next-to-lowest if lowerBoundInfinite is true.  Defaults to zero.
 * @param {number} [options.max] - Highest possible value of the slider;
 *        next-to-highest if upperBoundInfinite is true.  Defaults to 100.
 * @param {number} [options.step] - Step-value of jQueryUI slider - not
 *        necessarily related to min and max values if you provide custom value
 *        converters. Defaults to 1.  If negative, the slider is reversed and
 *        puts the min value on the right.  Cannot be zero or noninteger.
 * @param {boolean} [options.upperBoundInfinite] - if TRUE, the highest value
 *        on the slider will be Infinity/Unlimited.  Default FALSE.
 * @param {boolean} [options.lowerBoundInfinite] - if TRUE, the lowest value
 *        on the slider will be -Infinity/Unlimited.  Default FALSE.
 * @param {boolean} [options.isDisabled] - if TRUE the slider value is locked
 *        and cannot be changed.
 */
var NetSimSlider = module.exports = function (rootDiv, options) {
  /**
   * Unique instance ID for this panel, in case we have several
   * of them on a page.
   * @type {number}
   * @private
   */
  this.instanceID_ = NetSimSlider.uniqueIDCounter;
  NetSimSlider.uniqueIDCounter++;

  /**
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = rootDiv;

  /**
   * A function invoked whenever the slider-value is changed by the student.
   * Passed the new value (not slider position) as an argument.
   * @type {function}
   * @private
   */
  this.changeCallback_ = utils.valueOr(options.onChange, function () {});

  /**
   * A function invoked only when the slider-handle is released by the student.
   * Passed the new value (not slider position) as an argument
   * @type {function}
   * @private
   */
  this.stopCallback_ = utils.valueOr(options.onStop, function () {});

  /**
   * @type {number}
   * @private
   */
  this.minValue_ = utils.valueOr(options.min, SLIDER_DEFAULT_MIN_VALUE);

  /**
   * @type {number}
   * @private
   */
  this.maxValue_ = utils.valueOr(options.max, SLIDER_DEFAULT_MAX_VALUE);

  /**
   * The current (outward-facing) value of the slider.
   * @type {number}
   * @private
   */
  this.value_ = utils.valueOr(options.value, this.minValue_);

  /**
   * Whether the slider maximum value should be Infinity.
   * @type {boolean}
   * @private
   */
  this.isUpperBoundInfinite_ = utils.valueOr(options.upperBoundInfinite, false);

  /**
   * Whether the slider minimimum value should be -Infinity.
   * @type {boolean}
   * @private
   */
  this.isLowerBoundInfinite_ = utils.valueOr(options.lowerBoundInfinite, false);

  /**
   * @type {number}
   * @private
   */
  this.step_ = utils.valueOr(options.step, 1);
  if (this.step_ === 0) {
    throw new Error("NetSimSlider does not support zero step values.");
  } else if (this.step_ % 1 !== 0) {
    throw new Error("NetSimSlider does not support non-integer step values. " + " Use DecimalPrecisionSlider instead.");
  }

  /**
   * Whether the slider is disabled and noninteractable.
   * @type {boolean}
   * @private
   */
  this.isDisabled_ = utils.valueOr(options.isDisabled, false);
};

/**
 * Static counter used to generate/uniquely identify different instances
 * of this component on the page
 * @type {number}
 */
NetSimSlider.uniqueIDCounter = 0;

/**
 * @returns {boolean} TRUE if the step value is less than zero.
 * @private
 */
NetSimSlider.prototype.isStepNegative_ = function () {
  return this.step_ < 0;
};

/**
 * Fill the root div with new elements reflecting the current state
 */
NetSimSlider.prototype.render = function () {
  var minValue = this.isLowerBoundInfinite_ ? -Infinity : this.minValue_;
  var maxValue = this.isUpperBoundInfinite_ ? Infinity : this.maxValue_;
  var minPosition = this.valueToSliderPosition(this.isStepNegative_() ? maxValue : minValue);
  var maxPosition = this.valueToSliderPosition(this.isStepNegative_() ? minValue : maxValue);

  var renderedMarkup = $(markup({
    instanceID: this.instanceID_,
    minValue: this.valueToShortLabel(this.isStepNegative_() ? maxValue : minValue),
    maxValue: this.valueToShortLabel(this.isStepNegative_() ? minValue : maxValue)
  }));
  this.rootDiv_.html(renderedMarkup);

  this.rootDiv_.find('.slider').slider({
    value: this.valueToSliderPosition(this.value_),
    min: minPosition,
    max: maxPosition,
    step: Math.abs(this.step_),
    slide: this.onSliderValueChange_.bind(this),
    stop: this.onSliderStop_.bind(this),
    disabled: this.isDisabled_
  });

  // Use wider labels if we have an infinite bound
  if (this.isLowerBoundInfinite_ || this.isUpperBoundInfinite_) {
    this.rootDiv_.find('.slider-labels').addClass('wide-labels');
  }

  this.setLabelFromValue_(this.value_);
};

/**
 * Disable this slider, so the user can't change its value
 */
NetSimSlider.prototype.disable = function () {
  this.isDisabled_ = true;
  this.rootDiv_.find('.slider').slider('option', 'disabled', true);
};

/**
 * Enable this slider, so the user can change its value
 */
NetSimSlider.prototype.enable = function () {
  this.isDisabled_ = false;
  this.rootDiv_.find('.slider').slider('option', 'disabled', false);
};

/**
 * External access to set the value of the slider.
 * @param {number} newValue
 */
NetSimSlider.prototype.setValue = function (newValue) {
  if (this.value_ === newValue) {
    return;
  }

  this.value_ = newValue;
  this.rootDiv_.find('.slider').slider('option', 'value', this.valueToSliderPosition(newValue));
  this.setLabelFromValue_(newValue);
};

/** @private */
NetSimSlider.prototype.onSliderValueChange_ = function (event, ui) {
  var newValue = this.sliderPositionToValue(ui.value);
  this.value_ = newValue;
  this.setLabelFromValue_(newValue);
  this.changeCallback_(newValue);
};

/** @private */
NetSimSlider.prototype.onSliderStop_ = function () {
  this.stopCallback_(this.value_);
};

/**
 * Updates the slider label to localize and display the given value.
 * @param {number} val - slider value to display
 * @private
 */
NetSimSlider.prototype.setLabelFromValue_ = function (val) {
  this.rootDiv_.find('.slider-value').text(this.valueToLabel(val));
};

/**
 * Converts the given value into an internal value we can pass to the
 * jQueryUI slider control.
 * @param {number} val - external-facing value
 * @returns {number} - internal slider value
 */
NetSimSlider.prototype.valueToSliderPosition = function (val) {
  if (this.isUpperBoundInfinite_ && val > this.maxValue_) {
    return this.valueToSliderPosition(this.maxValue_) + this.step_;
  } else if (this.isLowerBoundInfinite_ && val < this.minValue_) {
    return this.valueToSliderPosition(this.minValue_) - this.step_;
  }
  return Math.max(this.minValue_, Math.min(this.maxValue_, val)) * (this.isStepNegative_() ? -1 : 1);
};

/**
 * Converts the internal jQueryUI slider value into an external-facing
 * value for this control.
 * Should be an inverse of valueToSliderPosition
 * @param {number} pos - internal slider value
 * @returns {number} - external-facing value
 */
NetSimSlider.prototype.sliderPositionToValue = function (pos) {
  if (this.isStepNegative_()) {
    if (pos < this.valueToSliderPosition(this.maxValue_)) {
      return this.isUpperBoundInfinite_ ? Infinity : this.maxValue_;
    } else if (pos > this.valueToSliderPosition(this.minValue_)) {
      return this.isLowerBoundInfinite_ ? -Infinity : this.minValue_;
    }
    return -pos;
  } else {
    if (pos > this.valueToSliderPosition(this.maxValue_)) {
      return this.isUpperBoundInfinite_ ? Infinity : this.maxValue_;
    } else if (pos < this.valueToSliderPosition(this.minValue_)) {
      return this.isLowerBoundInfinite_ ? -Infinity : this.minValue_;
    }
    return pos;
  }
};

/**
 * Converts an external-facing numeric value into a localized string
 * representation of that value.
 * @param {number} val - numeric value of the control
 * @returns {string} - localized string representation of value
 */
NetSimSlider.prototype.valueToLabel = function (val) {
  if (val === Infinity || val === -Infinity) {
    return i18n.unlimited();
  }
  return val;
};

/**
 * Alternate label converter, used for slider end labels.
 * @param {number} val - numeric value of the control
 * @returns {string} - localized string representation of value
 */
NetSimSlider.prototype.valueToShortLabel = function (val) {
  return this.valueToLabel(val);
};

/**
 * Since jQueryUI sliders don't support noninteger step values, this is
 * a simple helper wrapped around NetSimSlider that adds support for
 * fractional step values down to a given precision.
 * @param {jQuery} rootDiv
 * @param {Object} options - takes NetSimSlider options, except:
 * @param {number} [options.step] - values between 0 and 1 are allowed.
 * @param {number} [options.precision] - number of decimal places of precision
 *        this slider needs (can match the number of decimal places in your
 *        step value).  Default 2.
 * @constructor
 */
NetSimSlider.DecimalPrecisionSlider = function (rootDiv, options) {
  /**
   * Number of decimal places of precision added to the default slider
   * functionality.
   * @type {number}
   * @private
   */
  this.precision_ = utils.valueOr(options.precision, 2);

  // We convert the given step value by the requested precision before passing
  // it on to NetSimSlider, so that we give NetSimSlider an integer step value.
  options.step = options.step * Math.pow(10, this.precision_);

  NetSimSlider.call(this, rootDiv, options);
};
NetSimSlider.DecimalPrecisionSlider.inherits(NetSimSlider);

/**
 * @param {number} val - external-facing value
 * @returns {number} - internal slider value
 * @override
 */
NetSimSlider.DecimalPrecisionSlider.prototype.valueToSliderPosition = function (val) {
  // Use clamping from parent class, which should be applied before our transform.
  return NetSimSlider.prototype.valueToSliderPosition.call(this, val) * Math.pow(10, this.precision_);
};

/**
 * Should be an inverse of valueToSliderPosition
 * @param {number} pos - internal slider value
 * @returns {number} - external-facing value
 * @override
 */
NetSimSlider.DecimalPrecisionSlider.prototype.sliderPositionToValue = function (pos) {
  // Use clamping from parent class, which should be applied before our transform.
  return NetSimSlider.prototype.sliderPositionToValue.call(this, pos) / Math.pow(10, this.precision_);
};

/**
 * Default minimum of zero is useless to a logarithmic scale
 * @type {number}
 * @const
 */
var LOGARITHMIC_DEFAULT_MIN_VALUE = 1;

/**
 * By default, a logarithmic scale slider increases by a factor of 2
 * every step.
 * @type {number}
 */
var LOGARITHMIC_DEFAULT_BASE = 2;

/**
 * @param {jQuery} rootDiv
 * @param {Object} options - takes NetSimSlider options, except:
 * @param {number} [options.min] - same as base slider, but defaults to 1.
 * @param {number} [options.logBase] - factor by which the value increases
 *        with every slider step.  Default base 2.
 * @constructor
 * @augments NetSimSlider
 */
NetSimSlider.LogarithmicSlider = function (rootDiv, options) {
  options.min = utils.valueOr(options.min, LOGARITHMIC_DEFAULT_MIN_VALUE);
  NetSimSlider.call(this, rootDiv, options);

  /**
   * Factor by which the value increases with every slider step.
   * @type {number}
   * @private
   */
  this.logBase_ = utils.valueOr(options.logBase, LOGARITHMIC_DEFAULT_BASE);

  /**
   * Precalculate natural log of our base value, because we'll use it a lot.
   * @type {number}
   * @private
   */
  this.lnLogBase_ = Math.log(this.logBase_);

  this.calculateSliderBounds_();
};
NetSimSlider.LogarithmicSlider.inherits(NetSimSlider);

/**
 * For the logarithmic slider, it's easiest to calculate the slider
 * boundary values once and use them later.
 * @private
 */
NetSimSlider.LogarithmicSlider.prototype.calculateSliderBounds_ = function () {
  // Pick boundary slider values
  this.maxSliderPosition = this.logFloor_(this.maxValue_);
  // Add a step if we don't already land exactly on a step, to
  // compensate for the floor() operation
  if (Math.pow(this.logBase_, this.maxSliderPosition) !== this.maxValue_) {
    this.maxSliderPosition += this.step_;
  }
  this.minSliderPosition = this.logFloor_(this.minValue_);

  // Pick infinity slider values
  this.infinitySliderPosition = this.maxSliderPosition + this.step_;
  this.negInfinitySliderPosition = this.minSliderPosition - this.step_;
};

/**
 * Cheater "floor(log_base_n(x))" method with a hacky workaround for
 * floating-point errors.  Uses the logarithmic base factor that the slider
 * is configured for (this.logBase_). Good enough for the slider.
 * @param {number} val
 * @returns {number}
 * @private
 */
NetSimSlider.LogarithmicSlider.prototype.logFloor_ = function (val) {
  // JavaScript floating-point math causes this logarithm calculation to
  // sometimes return slightly imprecise values. For example:
  // log(1000) / log(10) === 2.9999999999999996
  // Although we usually want to floor noninteger values, the above calculation
  // is supposed to come out as exactly 3.
  // The fudge factor below gives a threshold at which we will ceil() a result
  // rather than floor() it, to account for this imprecision.
  // The _right_ way to fix this is to use a better number type like BigDecimal,
  // but it's not really worth it for this use case.  Six digits is more than
  // enough precision for the slider when we're trying to work with whole
  // numbers anyway.
  var ceilThreshold = 0.0000001;
  return Math.floor(ceilThreshold + Math.log(val) / this.lnLogBase_);
};

/**
 * Converts the given value into an internal value we can pass to the
 * jQueryUI slider control.
 * @param {number} val - external-facing value
 * @returns {number} - internal slider value
 * @override
 */
NetSimSlider.LogarithmicSlider.prototype.valueToSliderPosition = function (val) {
  if (val > this.maxValue_) {
    return this.isUpperBoundInfinite_ ? this.infinitySliderPosition : this.maxSliderPosition;
  } else if (val === this.maxValue_) {
    return this.maxSliderPosition;
  } else if (val < this.minValue_) {
    return this.isLowerBoundInfinite_ ? this.negInfinitySliderPosition : this.minSliderPosition;
  } else if (val === this.minValue_) {
    return this.minSliderPosition;
  }
  return Math.max(this.minSliderPosition, this.logFloor_(val));
};

/**
 * Converts the internal jQueryUI slider value into an external-facing
 * value for this control.
 * Should be an inverse of valueToSliderPosition
 * @param {number} pos - internal slider value
 * @returns {number} - external-facing value
 * @override
 */
NetSimSlider.LogarithmicSlider.prototype.sliderPositionToValue = function (pos) {
  if (pos > this.maxSliderPosition) {
    return this.isUpperBoundInfinite_ ? Infinity : this.maxValue_;
  } else if (pos === this.maxSliderPosition) {
    return this.maxValue_;
  } else if (pos < this.minSliderPosition) {
    return this.isLowerBoundInfinite_ ? -Infinity : this.minValue_;
  } else if (pos === this.minSliderPosition) {
    return this.minValue_;
  }
  return Math.pow(this.logBase_, pos);
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimSlider.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimSlider.html.ejs","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimSlider.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('<div id="netsim_slider_', escape((1,  instanceID )), '" class="netsim-slider">\n  <div class="slider-inline-wrap">\n    <div class="slider"></div>\n    <div class="slider-labels">\n      <div class="max-value">', escape((5,  maxValue )), '</div>\n      <div class="min-value">', escape((6,  minValue )), '</div>\n      <div class="current-value">\n        <label><span class="slider-value"></span></label>\n      </div>\n    </div>\n  </div>\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimApi.js":[function(require,module,exports){
/**
 * @overview Wraps NetSim REST APIs for operations of "tables" and "shards."
 * @see net_sim_api.rb
 */
// Strict linting: Absorb into global config when possible
/* jshint
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var NetSimApiError = require('./NetSimApiError');

/**
 * @type {string}
 * @const
 */
var NETSIM_API_BASE_URL = '/v3/netsim';

/**
 * @name NetSimShardApi
 */
var shardApi = {

  /**
   * Create an initialized NetSim Shard API instance.
   * @param {string} shardID
   * @returns {NetSimShardApi}
   */
  create: function create(shardID) {
    return $.extend({}, shardApi, {

      /**
       * Shard identifier.
       * @type {string}
       */
      shardID: shardID,

      /**
       * Beginning part of URL for all calls that interact with the shard.
       * @type {string}
       */
      baseUrl: NETSIM_API_BASE_URL + '/' + shardID
    });
  },

  makeTableApi: function makeTableApi(tableName) {
    return tableApi.create(this.shardID, tableName);
  }
};

/**
 * @name NetSimTableApi
 */
var tableApi = {

  /**
   * Create an initialized NetSim Table API instance.
   * @param {string} shardID
   * @param {string} tableName
   * @returns {NetSimTableApi}
   */
  create: function create(shardID, tableName) {
    return $.extend({}, tableApi, {

      /**
       * Shard identifier.
       * @type {string}
       */
      shardID: shardID,

      /**
       * Table name.
       * @type {string}
       */
      tableName: tableName,

      /**
       * Beginning part of URL for all calls that interact only with
       * this table.
       * @type {string}
       */
      baseUrl: NETSIM_API_BASE_URL + '/' + shardID + '/' + tableName
    });
  },

  /**
   * Request all rows from the given table.
   * @param {NodeStyleCallback} callback - Expected result is an array of
   *        row objects.
   */
  allRows: function allRows(callback) {
    $.ajax({
      url: this.baseUrl,
      type: "get",
      dataType: "json"
    }).done(function (data, text) {
      callback(null, data);
    }).fail(function (request, status, error) {
      callback(new NetSimApiError(request), null);
    });
  },

  /**
   * Request all rows including and following the given row ID from the table.
   * @param {int} rowID - lower bound on row IDs to fetch
   * @param {NodeStyleCallback} callback - Expected result is an array of
   *        table rows.
   */
  allRowsFromID: function allRowsFromID(rowID, callback) {
    $.ajax({
      url: this.baseUrl + '@' + rowID,
      type: "get",
      dataType: "json"
    }).done(function (data, text) {
      callback(null, data);
    }).fail(function (request, status, error) {
      callback(new NetSimApiError(request), null);
    });
  },

  /**
   * Insert a row or rows into the table.
   * @param {Object|Object[]} value - desired row contents, as either an
   *        Object for a single row or an Array of Objects for multiple.
   *        Must be JSON.stringify-able.
   * @param {NodeStyleCallback} callback - Expected result is the created
   *        row object or objects (which will include an assigned 'id'
   *        key).
   */
  createRow: function createRow(value, callback) {
    var data;

    try {
      data = JSON.stringify(value);
    } catch (e) {
      callback(e, undefined);
      return;
    }

    $.ajax({
      url: this.baseUrl,
      type: "post",
      contentType: "application/json; charset=utf-8",
      data: data
    }).done(function (body, text) {
      callback(null, body);
    }).fail(function (request, status, error) {
      callback(new NetSimApiError(request), undefined);
    });
  },

  /**
   * Remove multiple rows at once.
   * @param {number[]} ids - The row IDs to remove.
   * @param {NodeStyleCallback} callback - Expected result is TRUE.
   * @param {boolean} [async] default TRUE.
   */
  deleteRows: function deleteRows(ids, callback, async) {
    async = async !== false; // `undefined` maps to true

    // Generate query string in the form "id[]=1&id[]=2&..."
    var queryString = ids.map(function (id) {
      return 'id[]=' + id;
    }).join('&');

    $.ajax({
      url: this.baseUrl + '?' + queryString,
      type: 'delete',
      dataType: 'json',
      async: async
    }).done(function (data, text) {
      callback(null, true);
    }).fail(function (request, status, error) {
      callback(new NetSimApiError(request), false);
    });
  },

  /**
   * Retrieve a row.
   * @param {number} id - The row identifier.
   * @param {NodeStyleCallback} callback - Expected result is the requested
   *        row object.
   */
  fetchRow: function fetchRow(id, callback) {
    $.ajax({
      url: this.baseUrl + "/" + id,
      type: "get",
      dataType: "json"
    }).done(function (data, text) {
      callback(null, data);
    }).fail(function (request, status, error) {
      callback(new NetSimApiError(request), undefined);
    });
  },

  /**
   * Change the contents of a row.
   * @param {number} id - The row identifier.
   * @param {Object} value - The new row contents.
   * @param {NodeStyleCallback} callback - Expected result is the new row object.
   */
  updateRow: function updateRow(id, value, callback) {
    $.ajax({
      url: this.baseUrl + "/" + id,
      type: "post",
      contentType: "application/json; charset=utf-8",
      data: JSON.stringify(value)
    }).done(function (data, text) {
      callback(null, data);
    }).fail(function (request, status, error) {
      callback(new NetSimApiError(request), false);
    });
  }
};

module.exports = {
  /**
   * Create a NetSim Shard API instance for the given shard.
   * @param {string} shardID
   * @returns {NetSimShardApi}
   */
  makeShardApi: function makeShardApi(shardID) {
    return shardApi.create(shardID);
  },

  /**
   * Create a NetSim Table API instance for the given shard and table name.
   * @param {string} shardID
   * @param {string} tableName
   * @returns {NetSimTableApi}
   */
  makeTableApi: function makeTableApi(shardID, tableName) {
    return tableApi.create(shardID, tableName);
  }
};

},{"./NetSimApiError":"/home/ubuntu/staging/apps/build/js/netsim/NetSimApiError.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimApiError.js":[function(require,module,exports){
/**
 * @overview Extended error type returned for failed interactions with NetSim
 * server API (net_sim_api.rb) that extracts and exposes additional error info.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

require('../utils'); // provide Function.prototype.inherits

/**
 * Special error type for failed server requests, which tries to extract
 * additional error information from the server's response.
 * @param {jqXHR} request
 * @constructor
 * @extends Error
 */
var NetSimApiError = module.exports = function (request) {
  /** @type {string} */
  this.name = 'NetSimApiError';

  /** @type {string} */
  this.message = 'Request failed';

  /** @type {string} */
  this.stack = new Error().stack;

  /**
   * Additional error information returned by the server, which can drive
   * specific responses by the client.
   * @type {string|Array}
   */
  this.details = undefined;

  // Attempt to extract additional information from the request object
  if (request) {
    this.message = 'status: ' + request.status + '; error: ' + request.statusText;
    try {
      var response = JSON.parse(request.responseText);
      if (response.details) {
        this.details = response.details;
        this.message += '; details: ' + JSON.stringify(this.details);
      }
    } catch (e) {
      this.details = null;
    }
  }
};
NetSimApiError.inherits(Error);

/**
 * Ways that a row insert operation can fail via NetSimApi.
 * @enum {string}
 */
NetSimApiError.ValidationError = {
  MALFORMED: 'malformed',
  CONFLICT: 'conflict',
  LIMIT_REACHED: 'limit_reached'
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimAlert.js":[function(require,module,exports){
/**
 * @overview Controller for creating growl-style Bootstrap alerts
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
/* global setTimeout */
'use strict';

var markup = require('./NetSimAlert.html.ejs');
var ArgumentUtils = require('./ArgumentUtils');
var NetSimLogger = require('./NetSimLogger');

var logger = NetSimLogger.getSingleton();

var NetSimAlert = module.exports = {};

/**
 * Returns the alert container, or creates and inserts one if it does
 * not exist. Also attaches a close handler so the container will
 * remove itself when it empties
 * @private
 * @return {jQuery}
 */
NetSimAlert.getOrCreateAlertContainer_ = function () {
  var alertContainer = $('.netsim-alert-container');

  if (alertContainer.length === 0) {
    alertContainer = $('<div>').addClass("netsim-alert-container");
    $('#netsim').append(alertContainer);

    alertContainer.on('closed', function () {
      if ($(this).children().length === 1) {
        $(this).remove();
      }
    });
  }

  return alertContainer;
};

/**
 * Simple check to see if Bootstrap's Alert function is attached to the
 * global jQuery object.
 * @return {boolean} whether or not bootstrap's `alert` function is
 *                   loaded and available
 */
NetSimAlert.isBootstrapAlertLoaded_ = function () {
  return typeof $().alert === 'function';
};

/**
 * Primary alert creation method. Expects a body of content for the
 * alert and a flavor for the alert type. Can optionally include a title
 * and a timeout time.
 *
 * @param {body} string
 * @param {flavor} string
 * @param {Object} options
 * @param {string} options.title
 * @param {number} options.timeout Timeout in ms. defaults to 5000.
 * @return {jQuery} the created alert element
 */
NetSimAlert.create_ = function (body, flavor, options) {

  if (!NetSimAlert.isBootstrapAlertLoaded_()) {
    logger.warn("Bootstrap Alert not loaded; NetSimAlert refusing to create alert");
    return;
  }

  ArgumentUtils.validateRequired(body, 'body', ArgumentUtils.isString);
  ArgumentUtils.validateRequired(flavor, 'flavor', ArgumentUtils.isString);
  options = ArgumentUtils.extendOptionsObject(options);

  var $container = NetSimAlert.getOrCreateAlertContainer_();

  var bootstrapAlert = $(markup({
    flavor: flavor,
    body: body,
    title: options.get('title', ArgumentUtils.isString)
  }));

  $container.append(bootstrapAlert);
  bootstrapAlert.alert();

  setTimeout(function () {
    bootstrapAlert.alert('close');
  }, options.get('timeout', ArgumentUtils.isPositiveNoninfiniteNumber, 5000));

  return bootstrapAlert;
};

/** Wrapper method to call create with an "alert-warn" flavor */
NetSimAlert.warn = function (body, options) {
  return NetSimAlert.create_(body, "alert-warn", options);
};

/** Wrapper method to call create with an "alert-info" flavor */
NetSimAlert.info = function (body, options) {
  return NetSimAlert.create_(body, "alert-info", options);
};

/** Wrapper method to call create with an "alert-error" flavor */
NetSimAlert.error = function (body, options) {
  return NetSimAlert.create_(body, "alert-error", options);
};

/** Wrapper method to call create with an "alert-success" flavor */
NetSimAlert.success = function (body, options) {
  return NetSimAlert.create_(body, "alert-success", options);
};

},{"./ArgumentUtils":"/home/ubuntu/staging/apps/build/js/netsim/ArgumentUtils.js","./NetSimAlert.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimAlert.html.ejs","./NetSimLogger":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogger.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimAlert.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
  /**
   * @name body
   * @type {!string}
   */

  /**
   * @name flavor
   * @type {!string}
   */

  /**
   * @name title
   * @type {string}
   */
; buf.push('\n<div class="alert netsim-alert ', escape((17,  flavor )), ' fade in">\n  <button type="button" class="netsim-alert-button close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>\n  ');19; if (title) { ; buf.push('<strong>', escape((19,  title )), '</strong>');19; } ; buf.push('\n  ', escape((20,  body )), '\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/DataConverters.js":[function(require,module,exports){
/**
 * @overview Provides utility methods for converting user data between
 *           different encodings, and formatting those encodings: binary,
 *           hex, decimal, ASCII.  "A and B" is a special encoding that is
 *           just binary with "A" sub'd for 0 and "B" sub'd for 1.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';
/* global window, require, exports */

var utils = require('../utils'); // For String.prototype.repeat polyfill
var NetSimUtils = require('./NetSimUtils');

// window.{btoa, atob} polyfills
if (!(window.atob && window.btoa)) {
  var base64 = require('Base64');
  window.btoa = window.btoa || base64.btoa;
  window.atob = window.atob || base64.atob;
}

/**
 * @typedef {string} AddressHeaderFormat
 * A string indicating the parts of an address field in the packet header,
 * their respective byte-widths, and the separators to be used when converting
 * binary to a readable format.
 * Examples:
 * "4" indicates a single 4-byte number, e.g. 5 / 0101
 * "8.4" indicates an 8-byte number followed by a 4-byte number, separated
 *   by a period, e.g. 1.1 / 000000010001 or 18.9 / 00010010 1001
 * "8.8.8.8" would be an IPv4 address, e.g.
 *   127.0.0.1 / 01111111 00000000 00000000 00000001
 */

/**
 * Converts an As and Bs string into its most compact representation, forced
 * to uppercase.
 * @param {string} abString
 * @returns {string}
 */
exports.minifyAB = function (abString) {
  return abString.replace(/[^AB]/gi, '').toUpperCase();
};

/**
 * Converts an AB-binary string to a formatted representation, with chunks
 * of a set size separated by a space.
 * @param {string} abString
 * @param {number} chunkSize
 * @param {number} [offset] bit-offset for formatting effect; default 0.
 * @returns {string} formatted version
 */
exports.formatAB = function (abString, chunkSize, offset) {
  return exports.formatBinary(exports.abToBinary(abString), chunkSize, offset).replace(/0/g, 'A').replace(/1/g, 'B');
};

/**
 * Converts a binary string into its most compact string representation.
 * @param {string} binaryString that may contain whitespace
 * @returns {string} binary string with no whitespace
 */
exports.minifyBinary = function (binaryString) {
  return binaryString.replace(/[^01]/g, '');
};

/**
 * Converts a binary string to a formatted representation, with chunks of
 * a set size separated by a space.
 * @param {string} binaryString - may be unformatted already
 * @param {number} chunkSize - how many bits per format chunk
 * @param {number} [offset] bit-offset for formatting effect; default 0.
 * @returns {string} pretty formatted binary string
 */
exports.formatBinary = function (binaryString, chunkSize, offset) {
  offset = utils.valueOr(offset, 0);
  if (chunkSize <= 0) {
    throw new RangeError("Parameter chunkSize must be greater than zero");
  }

  var binary = exports.minifyBinary(binaryString);

  var chunks = [];
  var firstChunkLength = utils.mod(offset, chunkSize);
  if (firstChunkLength > 0) {
    chunks.push(binary.substr(0, firstChunkLength));
  }

  for (var i = firstChunkLength; i < binary.length; i += chunkSize) {
    chunks.push(binary.substr(i, chunkSize));
  }

  return chunks.join(' ');
};

/**
 * Converts a hexadecimal string into its most compact string representation.
 * Strips whitespace and non-hex characters, and coerces letters to uppercase.
 * @param {string} hexString
 * @returns {string}
 */
exports.minifyHex = function (hexString) {
  return hexString.replace(/[^0-9A-F]/gi, '').toUpperCase();
};

/**
 * Reduces all whitespace to single characters and strips non-digits.
 * @param decimalString
 */
exports.minifyDecimal = function (decimalString) {
  return decimalString.replace(/(^\s+|\s+$|[^0-9\s])/g, '').replace(/\s+/g, ' ');
};

/**
 * Converts a hex string to a formatted representation, with chunks of
 * a set size separated by a space.
 * @param {string} hexString
 * @param {number} chunkSize - in bits!
 * @param {number} [offset] hex-digit-offset for formatting effect; default 0.
 * @returns {string} formatted hex
 */
exports.formatHex = function (hexString, chunkSize, offset) {
  offset = utils.valueOr(offset, 0);
  if (chunkSize <= 0) {
    throw new RangeError("Parameter chunkSize must be greater than zero");
  }

  // Don't format hex when the chunkSize doesn't align with hex characters.
  if (chunkSize % 4 !== 0) {
    return hexString;
  }

  var hexChunkSize = chunkSize / 4;
  var hex = exports.minifyHex(hexString);

  var chunks = [];
  var firstChunkLength = utils.mod(offset, hexChunkSize);
  if (firstChunkLength > 0) {
    chunks.push(hex.substr(0, firstChunkLength));
  }

  for (var i = firstChunkLength; i < hex.length; i += hexChunkSize) {
    chunks.push(hex.substr(i, hexChunkSize));
  }

  return chunks.join(' ');
};

/**
 * Takes a set of whitespace-separated numbers and pads the spacing between
 * them to the width of the widest number, so that they line up when they
 * wrap.
 * @param {string} decimalString
 * @returns {string} aligned decimal string
 */
exports.alignDecimal = function (decimalString) {
  if (decimalString.replace(/\D/g, '') === '') {
    return '';
  }

  var numbers = exports.minifyDecimal(decimalString).split(/\s+/);

  // Find the length of the longest number
  var mostDigits = numbers.reduce(function (prev, cur) {
    if (cur.length > prev) {
      return cur.length;
    }
    return prev;
  }, 0);

  var zeroPadding = '0'.repeat(mostDigits);

  return numbers.map(function (numString) {
    // Left-pad each number with non-breaking spaces up to max width.
    return (zeroPadding + numString).slice(-mostDigits);
  }).join(' ');
};

/**
 * Interprets a string of As and Bs as binary where A is 0 and B is 1, then
 * interprets that binary as a single number, and returns that number.
 * @param {string} abString
 * @returns {number}
 */
exports.abToInt = function (abString) {
  return exports.binaryToInt(exports.abToBinary(abString));
};

/**
 * Converts a number to an AB binary representation
 * @param {number} num
 * @param {number} width
 * @returns {string}
 */
exports.intToAB = function (num, width) {
  return exports.binaryToAB(exports.intToBinary(num, width));
};

/**
 * Converts As and Bs to a binary string, where A is 0 and B is 1.
 * @param {string} abString
 * @returns {string}
 */
exports.abToBinary = function (abString) {
  return exports.minifyAB(abString).replace(/A/g, '0').replace(/B/g, '1');
};

/**
 * Converts binary into As and Bs, where 0 is A and 1 is B.
 * @param {string} binaryString
 * @returns {string}
 */
exports.binaryToAB = function (binaryString) {
  return exports.minifyBinary(binaryString).replace(/0/g, 'A').replace(/1/g, 'B');
};

/**
 * Interprets a binary string as a single number, and returns that number.
 * @param {string} binaryString
 * @returns {number}
 */
exports.binaryToInt = function (binaryString) {
  return parseInt(exports.minifyBinary(binaryString), 2);
};

var intToString = function intToString(int, base, width) {
  if (width <= 0) {
    throw new RangeError("Output width must be greater than zero");
  }
  return NetSimUtils.zeroPadLeft(int.toString(base), width);
};

/**
 * Converts a number to a binary string representation with the given width.
 * @param {number} int - number to convert
 * @param {number} width - number of bits to use
 * @returns {string} - binary representation with length of "width"
 */
exports.intToBinary = function (int, width) {
  return intToString(int, 2, width);
};

/**
 * Interprets a hex string as a single number, and returns that number.
 * @param hexadecimalString
 * @returns {Number}
 */
exports.hexToInt = function (hexadecimalString) {
  return parseInt(exports.minifyHex(hexadecimalString), 16);
};

/**
 * Converts a number to a hexadecimal string representation with the given
 * width.
 * @param {number} int - number to convert
 * @param {number} width - number of characters to use
 * @returns {string} - hex representation with length of "width"
 */
exports.intToHex = function (int, width) {
  return intToString(int, 16, width).toUpperCase();
};

/**
 * Converts a hex string to a binary string, by mapping each hex character
 * to four bits of binary.
 * @param {string} hexadecimalString
 * @returns {string} binary representation.
 */
exports.hexToBinary = function (hexadecimalString) {
  var uglyHex = exports.minifyHex(hexadecimalString);
  var binary = '';

  for (var i = 0; i < uglyHex.length; i++) {
    binary += exports.intToBinary(exports.hexToInt(uglyHex.substr(i, 1)), 4);
  }

  return binary;
};

/**
 * Converts a binary string to a hex string, mapping each four bits into
 * a hex character and right-padding with zeroes to round out the binary length.
 * @param {string} binaryString
 * @returns {string}
 */
exports.binaryToHex = function (binaryString) {
  var currentNibble;
  var nibbleWidth = 4;
  var chars = [];
  var uglyBinary = exports.minifyBinary(binaryString);
  for (var i = 0; i < uglyBinary.length; i += nibbleWidth) {
    currentNibble = NetSimUtils.zeroPadRight(uglyBinary.substr(i, nibbleWidth), nibbleWidth);
    chars.push(exports.intToHex(exports.binaryToInt(currentNibble), 1));
  }
  return chars.join('');
};

/**
 * Converts a string set of numbers to a binary representation of those numbers
 * using the given byte-size.
 * @param {string} decimalString - A set of numbers separated by whitespace.
 * @param {number} byteSize - How many bits to use to represent each number.
 * @returns {string} Binary representation.
 */
exports.decimalToBinary = function (decimalString, byteSize) {
  // Special case: No numbers
  if (decimalString.replace(/\D/g, '') === '') {
    return '';
  }

  return exports.minifyDecimal(decimalString).split(/\s+/).map(function (numString) {
    return exports.intToBinary(parseInt(numString, 10), byteSize);
  }).join('');
};

/**
 * Converts binary to a string of decimal numbers separated by whitespace.
 * @param {string} binaryString
 * @param {number} byteSize - How many bits to read for each number
 * @returns {string} decimal numbers
 */
exports.binaryToDecimal = function (binaryString, byteSize) {
  var currentByte;
  var numbers = [];
  var binary = exports.minifyBinary(binaryString);
  for (var i = 0; i < binary.length; i += byteSize) {
    currentByte = NetSimUtils.zeroPadRight(binary.substr(i, byteSize), byteSize);
    numbers.push(exports.binaryToInt(currentByte));
  }
  return numbers.join(' ');
};

/**
 * Converts ascii to binary, using the given bytesize for each character.
 * Overflow is ignored (left-trimmed); recommend using a bytesize of 8 in
 * most circumstances.
 * @param {string} asciiString
 * @param {number} byteSize
 * @returns {string}
 */
exports.asciiToBinary = function (asciiString, byteSize) {
  var bytes = [];
  for (var i = 0; i < asciiString.length; i++) {
    bytes.push(exports.intToBinary(asciiString.charCodeAt(i), byteSize));
  }
  return bytes.join('');
};

/**
 * Converts binary to an ascii string, using the given bytesize for each
 * character.  If the binary is not divisible by bytesize, the final character
 * is right-padded.
 * @param {string} binaryString
 * @param {number} byteSize
 * @returns {string} ASCII string
 */
exports.binaryToAscii = function (binaryString, byteSize) {
  if (byteSize <= 0) {
    throw new RangeError("Parameter byteSize must be greater than zero");
  }

  var currentByte;
  var chars = [];
  var binary = exports.minifyBinary(binaryString);
  for (var i = 0; i < binary.length; i += byteSize) {
    currentByte = NetSimUtils.zeroPadRight(binary.substr(i, byteSize), byteSize);
    chars.push(String.fromCharCode(exports.binaryToInt(currentByte)));
  }
  return chars.join('');
};

/**
 * @typedef {Object} Base64Payload
 * @property {string} string - the base64-encoded payload
 * @property {number} len - the length of the original binary payload
 */

/**
 * Converts binary to a base64 string for more efficient network
 * transfer. Because base64 expects even bytes, we pad the binary string
 * to the nearest byte and return the original length. The reverse
 * conversion expects to be given that original length.
 * @param {string} binaryString
 * @returns {Base64Payload} Object containing the base64 string and the
 *          length of of the original binaryString
 * @throws {TypeError} if binaryString argument is not a
 *         properly-formatted string of zeroes and ones.
 * @example
 * // returns { string: "kg==", len: 7 }
 * DataConverters.binaryToBase64("1001001");
 */
exports.binaryToBase64 = function (binaryString) {

  if (/^[01]*$/.test(binaryString) === false) {
    throw new TypeError("argument binaryString to method binaryToBase64" + "must be a binary string; received \"" + binaryString + "\" instead");
  }

  var byteLen = Math.ceil(binaryString.length / 8.0) * 8;
  var paddedBinaryString = NetSimUtils.zeroPadRight(binaryString, byteLen);
  var payload = window.btoa(exports.binaryToAscii(paddedBinaryString, 8));

  return { string: payload, len: binaryString.length };
};

/**
 * Converts a base64 string back into a binary string of the specified
 * length.
 * @param {string} base64string
 * @param {number} len
 * @returns {string} binaryString
 * @throws {TypeError} if base64string argument is not a
 *         properly base64-encoded string
 * @example
 * // returns "1001001"
 * DataConverters.base64ToBinary("kg==", 7);
 */
exports.base64ToBinary = function (base64string, len) {
  var decodedData;
  try {
    decodedData = window.atob(base64string);
  } catch (e) {
    throw new TypeError("argument base64string to method base64ToBinary" + "must be a base64-encoded string");
  }
  return exports.asciiToBinary(decodedData, 8).substr(0, len);
};

/**
 * Converts binary to an address string using the provided address format.
 * @param {string} binaryString
 * @param {AddressHeaderFormat} addressFormat
 * @returns {string}
 */
exports.binaryToAddressString = function (binaryString, addressFormat) {
  var binary = exports.minifyBinary(binaryString);
  if (binary.length === 0) {
    return '';
  }

  var indexIntoBinary = 0;

  // Parentheses in the split() regex cause the dividing elements to be captured
  // and also included in the return value.
  return addressFormat.split(/(\D+)/).map(function (formatPart) {
    var bitWidth = parseInt(formatPart, 10);
    if (isNaN(bitWidth)) {
      // Pass non-number parts of the format through, so we use the original
      // entered characters/layout for formatting.
      return formatPart;
    }

    var binarySlice = binary.substr(indexIntoBinary, bitWidth);
    var intVal = binarySlice.length > 0 ? exports.binaryToInt(binarySlice) : 0;
    indexIntoBinary += bitWidth;
    return intVal.toString();
  }).join('');
};

/**
 * Converts a formatted address string (decimal numbers with separators) into
 * binary with bit-widths for each part matching the given format.
 * @param {string} addressString
 * @param {AddressHeaderFormat} addressFormat
 * @returns {string}
 */
exports.addressStringToBinary = function (addressString, addressFormat) {
  if (addressString.length === 0) {
    return '';
  }

  // Actual user input, converted to a number[]
  var addressParts = addressString.toString().split(/\D+/).map(function (stringPart) {
    return parseInt(stringPart, 10);
  }).filter(function (numberPart) {
    return !isNaN(numberPart);
  });

  // Format, converted to a number[] where the numbers are bit-widths
  var partWidths = addressFormat.split(/\D+/).map(function (stringPart) {
    return parseInt(stringPart, 10);
  }).filter(function (numberPart) {
    return !isNaN(numberPart);
  });

  var partValue;
  var binary = '';
  for (var i = 0; i < partWidths.length; i++) {
    partValue = i < addressParts.length ? addressParts[i] : 0;
    binary = binary + exports.intToBinary(partValue, partWidths[i]);
  }
  return binary;
};

/**
 * Convert a binary string to a formatted representation, with chunks that
 * correspond to the parts of the address header.
 * @param {string} binaryString
 * @param {AddressHeaderFormat} addressFormat
 */
exports.formatBinaryForAddressHeader = function (binaryString, addressFormat) {
  var binary = exports.minifyBinary(binaryString);

  var partWidths = addressFormat.split(/\D+/).map(function (stringPart) {
    return parseInt(stringPart, 10);
  }).filter(function (numberPart) {
    return !isNaN(numberPart);
  });

  var chunks = [];
  var index = 0;
  partWidths.forEach(function (bitWidth) {
    var next = binary.substr(index, bitWidth);
    if (next.length > 0) {
      chunks.push(next);
    }
    index += bitWidth;
  });

  var next = binary.substr(index);
  if (next.length > 0) {
    chunks.push(next);
  }

  return chunks.join(' ');
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js","Base64":"/home/ubuntu/staging/apps/node_modules/Base64/base64.js"}],"/home/ubuntu/staging/apps/node_modules/Base64/base64.js":[function(require,module,exports){
;(function () {

  var object = typeof exports != 'undefined' ? exports : this; // #8: web workers
  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  function InvalidCharacterError(message) {
    this.message = message;
  }
  InvalidCharacterError.prototype = new Error;
  InvalidCharacterError.prototype.name = 'InvalidCharacterError';

  // encoder
  // [https://gist.github.com/999166] by [https://github.com/nignag]
  object.btoa || (
  object.btoa = function (input) {
    var str = String(input);
    for (
      // initialize result and counter
      var block, charCode, idx = 0, map = chars, output = '';
      // if the next str index does not exist:
      //   change the mapping table to "="
      //   check if d has no fractional digits
      str.charAt(idx | 0) || (map = '=', idx % 1);
      // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
      output += map.charAt(63 & block >> 8 - idx % 1 * 8)
    ) {
      charCode = str.charCodeAt(idx += 3/4);
      if (charCode > 0xFF) {
        throw new InvalidCharacterError("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
      }
      block = block << 8 | charCode;
    }
    return output;
  });

  // decoder
  // [https://gist.github.com/1020396] by [https://github.com/atk]
  object.atob || (
  object.atob = function (input) {
    var str = String(input).replace(/=+$/, '');
    if (str.length % 4 == 1) {
      throw new InvalidCharacterError("'atob' failed: The string to be decoded is not correctly encoded.");
    }
    for (
      // initialize result and counters
      var bc = 0, bs, buffer, idx = 0, output = '';
      // get next character
      buffer = str.charAt(idx++);
      // character found in table? initialize bit storage and add its ascii value;
      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
        // and if not first of each 4 characters,
        // convert the first 8 bits to one ascii character
        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0
    ) {
      // try to find character in table (0-63, not found => -1)
      buffer = chars.indexOf(buffer);
    }
    return output;
  });

}());

},{}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js":[function(require,module,exports){
/**
 * @overview Static helper methods for NetSim.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var utils = require('../utils');
var _ = utils.getLodash();
var i18n = require('./locale');
var NetSimConstants = require('./NetSimConstants');
var NetSimGlobals = require('./NetSimGlobals');

var logger = require('./NetSimLogger').getSingleton();

var EncodingType = NetSimConstants.EncodingType;

/**
 * Make a new SVG element, appropriately namespaced, wrapped in a jQuery
 * object for (semi-)easy manipulation.
 * @param {string} type - the tagname for the svg element.
 * @returns {jQuery} for chaining
 */
exports.jQuerySvgElement = function (type) {
  var newElement = $(document.createElementNS('http://www.w3.org/2000/svg', type));

  /**
   * Override addClass since jQuery addClass doesn't work on svg.
   * @param {string} className
   */
  newElement.addClass = function (className) {
    var oldClasses = newElement.attr('class');
    if (!oldClasses) {
      newElement.attr('class', className);
    } else if (!newElement.hasClass(className)) {
      newElement.attr('class', oldClasses + ' ' + className);
    }
    return newElement;
  };

  /**
   * Override removeClass since jQuery removeClass doesn't work on svg.
   * Removes the given classname if it exists on the element.
   * @param {string} className
   * @returns {jQuery} for chaining
   */
  newElement.removeClass = function (className) {
    var oldClasses = newElement.attr('class');
    if (oldClasses) {
      var newClasses = oldClasses.split(/\s+/g).filter(function (word) {
        return word !== className;
      }).join(' ');
      newElement.attr('class', newClasses);
    }
    return newElement;
  };

  /**
   * Override hasClass since jQuery hasClass doesn't work on svg.
   * Checks whether the element has the given class.
   * @param {string} className
   * @returns {boolean}
   */
  newElement.hasClass = function (className) {
    var oldClasses = newElement.attr('class');
    return oldClasses && oldClasses.split(/\s+/g).some(function (existingClass) {
      return existingClass === className;
    });
  };

  /**
   * Override toggleClass since jQuery toggleClass doesn't work on svg.
   *
   * Two versions:
   *
   * toggleClass(className) reverses the state of the class on the element;
   *   if it has the class it gets removed, if it doesn't have the class it
   *   gets added.
   *
   * toggleClass(className, shouldHaveClass) adds or removes the class on the
   *   element depending on the value of the second argument.
   *
   *
   * @param {string} className
   * @param {boolean} [shouldHaveClass]
   * @returns {jQuery} for chaining
   */
  newElement.toggleClass = function (className, shouldHaveClass) {
    // Default second argument - if not provided, we flip the current state
    shouldHaveClass = utils.valueOr(shouldHaveClass, !newElement.hasClass(className));

    if (shouldHaveClass) {
      newElement.addClass(className);
    } else {
      newElement.removeClass(className);
    }
    return newElement;
  };

  return newElement;
};

/**
 * Checks configuration against tab type to decide whether tab
 * of type should be shown.
 * @param {NetSimLevelConfiguration} levelConfig
 * @param {NetSimTabType} tabType
 */
exports.shouldShowTab = function (levelConfig, tabType) {
  return levelConfig.showTabs.indexOf(tabType) > -1;
};

/**
 * Get the localized string for the given encoding type.
 * @param {EncodingType} encodingType
 * @returns {string} localized encoding name
 */
exports.getEncodingLabel = function (encodingType) {
  if (encodingType === EncodingType.ASCII) {
    return i18n.ascii();
  } else if (encodingType === EncodingType.DECIMAL) {
    return i18n.decimal();
  } else if (encodingType === EncodingType.HEXADECIMAL) {
    return i18n.hex();
  } else if (encodingType === EncodingType.BINARY) {
    return i18n.binary();
  } else if (encodingType === EncodingType.A_AND_B) {
    return i18n.a_and_b();
  }
  return '';
};

/**
 * @param {Object} enumObj - Technically any object, but should be used with
 *        an enum like those found in NetSimConstants
 * @param {function} func - A function to call for each value in the enum,
 *        which gets passed the enum value.
 */
exports.forEachEnumValue = function (enumObj, func) {
  for (var enumKey in enumObj) {
    if (enumObj.hasOwnProperty(enumKey)) {
      func(enumObj[enumKey]);
    }
  }
};

/**
 * Rules used by serializeNumber and deserializeNumber to map unsupported
 * JavaScript values into JSON and back.
 * @type {{jsVal: number, jsonVal: string}[]}
 * @readonly
 */
var NUMBER_SERIALIZATION_RULES = [{ jsVal: Infinity, jsonVal: 'Infinity' }, { jsVal: -Infinity, jsonVal: '-Infinity' }, { jsVal: NaN, jsonVal: 'NaN' }, { jsVal: undefined, jsonVal: 'undefined' }];

/**
 * Checks that the provided value is actually the special value NaN, unlike
 * standard isNaN which returns true for anything that's not a number.
 * @param {*} val - any value
 * @returns {boolean}
 */
var isExactlyNaN = function isExactlyNaN(val) {
  // NaN is the only value in JavaScript that is not exactly equal to itself.
  // Therefore, if val !== val, then val must be NaN.
  return val !== val;
};

/**
 * Because JSON doesn't support the values Infinity, NaN, or undefined, you can
 * use this method to store those values in JSON as strings.
 * @param {number|NaN} num
 * @returns {number|string}
 */
exports.serializeNumber = function (num) {
  var applicableRule = _.find(NUMBER_SERIALIZATION_RULES, function (rule) {
    return rule.jsVal === num || isExactlyNaN(rule.jsVal) && isExactlyNaN(num);
  });
  return applicableRule ? applicableRule.jsonVal : num;
};

/**
 * Because JSON doesn't support the values Infinity, NaN, or undefined, you can
 * use this method to retrieve a value from JSON that is either a number or one
 * of those values.
 * @param {number|string} storedNum
 * @returns {number|NaN}
 */
exports.deserializeNumber = function (storedNum) {
  var applicableRule = _.find(NUMBER_SERIALIZATION_RULES, function (rule) {
    return rule.jsonVal === storedNum;
  });
  return applicableRule ? applicableRule.jsVal : storedNum;
};

/**
 * Helper for converting from an older header-spec format to a new, simpler one.
 * Old format: {key:{string}, bits:{number}}[]
 * New format: string[]
 * If we detect the old format, we return a spec in the new format.
 * @param {Array} spec
 * @returns {Array}
 */
exports.scrubHeaderSpecForBackwardsCompatibility = function (spec) {
  var foundOldFormat = false;
  var scrubbedSpec = [];
  spec.forEach(function (specEntry) {
    if (typeof specEntry === 'string') {
      // This is new new format, we can just copy it over.
      scrubbedSpec.push(specEntry);
    } else if (specEntry !== null && typeof specEntry === 'object') {
      // This is the old {key:'', bits:0} format.  We just want the key.
      scrubbedSpec.push(specEntry.key);
      foundOldFormat = true;
    }
  });

  // Issue a warning if an old format got converted, so we know to update
  // the level.
  if (foundOldFormat) {
    logger.warn("Converting old header specification format to new format." + " This level should be updated to use the new format.");
  }

  return scrubbedSpec;
};

/**
 * @param {NetSimLevelConfiguration} levelConfig
 * @returns {NetSimLevelConfiguration} same thing, but with certain values
 *          converted or cleaned.
 * @private
 */
exports.scrubLevelConfiguration_ = function (levelConfig) {
  var scrubbedLevel = _.clone(levelConfig, true);

  // Convert old header spec format to new header spec format
  scrubbedLevel.routerExpectsPacketHeader = exports.scrubHeaderSpecForBackwardsCompatibility(scrubbedLevel.routerExpectsPacketHeader);
  scrubbedLevel.clientInitialPacketHeader = exports.scrubHeaderSpecForBackwardsCompatibility(scrubbedLevel.clientInitialPacketHeader);

  // Coerce certain values to string that might have been mistaken for numbers
  scrubbedLevel.addressFormat = scrubbedLevel.addressFormat.toString();

  // Explicitly list fields that we suspect may have a string value that
  // needs to be converted to a number, like "Infinity"
  scrubbedLevel.defaultPacketSizeLimit = exports.deserializeNumber(scrubbedLevel.defaultPacketSizeLimit);

  // Packet Size cannot be infinity; defaults to 8kb
  if (scrubbedLevel.defaultPacketSizeLimit === Infinity) {
    scrubbedLevel.defaultPacketSizeLimit = 8192;
  }

  scrubbedLevel.defaultBitRateBitsPerSecond = exports.deserializeNumber(scrubbedLevel.defaultBitRateBitsPerSecond);
  scrubbedLevel.defaultChunkSizeBits = exports.deserializeNumber(scrubbedLevel.defaultChunkSizeBits);
  scrubbedLevel.defaultRouterBandwidth = exports.deserializeNumber(scrubbedLevel.defaultRouterBandwidth);
  scrubbedLevel.defaultRouterMemory = exports.deserializeNumber(scrubbedLevel.defaultRouterMemory);

  // Generate a warning if we see a possible missed string-to-number conversion
  Object.keys(scrubbedLevel).filter(function (key) {
    // Ignore level params with underscores, they are the dashboard versions
    // of the camelCase parameters that the app actually uses.
    return !/_/.test(key);
  }).forEach(function (key) {
    var unconvertedValue = NUMBER_SERIALIZATION_RULES.some(function (rule) {
      return scrubbedLevel[key] === rule.jsonVal;
    });
    if (unconvertedValue) {
      logger.warn("Level option '" + key + "' has unconverted string value '" + scrubbedLevel[key] + "'");
    }
  });

  return scrubbedLevel;
};

/**
 * Converts a number of bits into a localized representation of that data
 * size in bytes, kilobytes, megabytes, gigabytes.
 * @param {number} bits
 * @returns {string} - localized string representation of size in bytes
 */
exports.bitsToLocalizedRoundedBytesize = function (bits) {
  if (bits === Infinity) {
    return i18n.unlimited();
  }

  var gbytes = Math.floor(bits / NetSimConstants.BITS_PER_GIGABYTE);
  if (gbytes > 0) {
    return i18n.x_GBytes({ x: gbytes });
  }

  var mbytes = Math.floor(bits / NetSimConstants.BITS_PER_MEGABYTE);
  if (mbytes > 0) {
    return i18n.x_MBytes({ x: mbytes });
  }

  var kbytes = Math.floor(bits / NetSimConstants.BITS_PER_KILOBYTE);
  if (kbytes > 0) {
    return i18n.x_KBytes({ x: kbytes });
  }

  var bytes = Math.floor(bits / NetSimConstants.BITS_PER_BYTE);
  if (bytes > 0) {
    return i18n.x_Bytes({ x: bytes });
  }

  return i18n.x_bits({ x: bits });
};

/**
 * Converts a bitrate into a localized representation of that data
 * size in bits/sec, kilobits, megabits, gigabits.
 * @param {number} bitsPerSecond
 * @returns {string} - localized string representation of speed in bits
 */
exports.bitrateToLocalizedRoundedBitrate = function (bitsPerSecond) {
  if (bitsPerSecond === Infinity) {
    return i18n.unlimited();
  }

  var gbps = Math.floor(bitsPerSecond / NetSimConstants.BITS_PER_GIGABIT);
  if (gbps > 0) {
    return i18n.x_Gbps({ x: gbps });
  }

  var mbps = Math.floor(bitsPerSecond / NetSimConstants.BITS_PER_MEGABIT);
  if (mbps > 0) {
    return i18n.x_Mbps({ x: mbps });
  }

  var kbps = Math.floor(bitsPerSecond / NetSimConstants.BITS_PER_KILOBIT);
  if (kbps > 0) {
    return i18n.x_Kbps({ x: kbps });
  }

  var bps = Math.floor(bitsPerSecond * 100) / 100;
  return i18n.x_bps({ x: bps });
};

exports.zeroPadLeft = function (string, desiredWidth) {
  var padding = '0'.repeat(desiredWidth);
  return (padding + string).slice(-desiredWidth);
};

exports.zeroPadRight = function (string, desiredWidth) {
  var padding = '0'.repeat(desiredWidth);
  return (string + padding).substr(0, desiredWidth);
};

/**
 * Creates a Continue/Finish button on the given NetSimPanel (in its header).
 * @param {NetSimPanel} onPanel
 * @static
 */
exports.makeContinueButton = function (onPanel) {
  onPanel.addButton(i18n.continueButton({ caret: '<i class="fa fa-caret-right"></i>' }), function (jQueryEvent) {
    if (!$(jQueryEvent.target).is(':disabled')) {
      NetSimGlobals.completeLevelAndContinue();
    }
  }, {
    secondary: false,
    classes: ['submitButton']
  });
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimLogger":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogger.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/locale.js":[function(require,module,exports){
// locale for netsim

"use strict";

module.exports = window.blockly.netsim_locale;

},{}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogger.js":[function(require,module,exports){
/**
 * @overview Utility class wrapping more granular log behavior that isn't
 * available in all browsers.  Also makes it easy to turn logging on and off
 * in tests.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,

 maxlen: 120
 */
'use strict';

/**
 * Logging API to control log levels and support different browsers
 * @constructor
 * @param {Console} window console API
 * @param {LogLevel} verbosity
 */
var NetSimLogger = module.exports = function (outputConsole, verbosity /*=VERBOSE*/) {
  /**
   * @type {Console}
   * @private
   */
  this.outputConsole_ = outputConsole;

  /**
   * Always mapped to console.log, or no-op if not available.
   * @type {Function}
   * @private
   */
  this.log_ = function () {};

  /**
   * If configured for info logging, gets mapped to console.info,
   * falls back to console.log, or no-op.
   * @type {Function}
   */
  this.info = function () {};

  /**
   * If configured for warning logging, gets mapped to console.warn,
   * falls back to console.log, or no-op.
   * @type {Function}
   */
  this.warn = function () {};

  /**
   * If configured for error logging, gets mapped to console.error,
   * falls back to console.log, or no-op.
   * @type {Function}
   */
  this.error = function () {};

  this.setVerbosity(undefined === verbosity ? LogLevel.VERBOSE : verbosity);
};

/**
 * Log verbosity levels enum.
 * @readonly
 * @enum {number}
 */
var LogLevel = {
  NONE: 0,
  ERROR: 1,
  WARN: 2,
  INFO: 3,
  VERBOSE: 4
};
NetSimLogger.LogLevel = LogLevel;

/**
 * Global singleton
 * @type {NetSimLogger}
 */
var singletonInstance;

/**
 * Static getter/lazy-creator for the global singleton instance.
 * @returns {NetSimLogger}
 */
NetSimLogger.getSingleton = function () {
  if (singletonInstance === undefined) {
    singletonInstance = new NetSimLogger(console, LogLevel.WARN);
  }
  return singletonInstance;
};

/**
 * Binds internal function calls according to given verbosity level.
 * @param verbosity
 */
NetSimLogger.prototype.setVerbosity = function (verbosity) {
  // Note: We don't call this.outputConsole_.log.bind here, because in IE9 the
  // console's logging methods do not inherit from Function.

  this.log_ = this.outputConsole_ && this.outputConsole_.log ? Function.prototype.bind.call(this.outputConsole_.log, this.outputConsole_) : function () {};

  if (verbosity >= LogLevel.INFO) {
    this.info = this.outputConsole_ && this.outputConsole_.info ? Function.prototype.bind.call(this.outputConsole_.info, this.outputConsole_) : this.log_;
  } else {
    this.info = function () {};
  }

  if (verbosity >= LogLevel.WARN) {
    this.warn = this.outputConsole_ && this.outputConsole_.warn ? Function.prototype.bind.call(this.outputConsole_.warn, this.outputConsole_) : this.log_;
  } else {
    this.warn = function () {};
  }

  if (verbosity >= LogLevel.ERROR) {
    this.error = this.outputConsole_ && this.outputConsole_.error ? Function.prototype.bind.call(this.outputConsole_.error, this.outputConsole_) : this.log_;
  } else {
    this.error = function () {};
  }
};

/**
 * Writes to output, depending on log level
 * @param {*} message
 * @param {LogLevel} logLevel
 */
NetSimLogger.prototype.log = function (message, logLevel /*=INFO*/) {
  if (undefined === logLevel) {
    logLevel = LogLevel.INFO;
  }

  switch (logLevel) {
    case LogLevel.ERROR:
      this.error(message);
      break;
    case LogLevel.WARN:
      this.warn(message);
      break;
    case LogLevel.INFO:
      this.info(message);
      break;
    default:
      this.log_(message);
  }
};

},{}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js":[function(require,module,exports){
/**
 * @overview Global singleton used to simplify certain cross-cutting concerns,
 *           including:
 *
 *           Access to level configuration.
 *           Access to environment-specific asset URLs.
 *           Reproducible random number functions for easy testing.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var seedrandom = require('seedrandom');

/**
 * Reference to root StudioApp controller
 * @type {StudioApp}
 * @private
 */
var studioApp_ = null;

/**
 * Reference to root NetSim controller
 * @type {NetSim}
 * @private
 */
var netsim_ = null;

/**
 * Replacable pseudo-random number generator function that lets us set a global
 * random seed if we wish.
 * @type {function}
 * @private
 */
var pseudoRandomNumberFunction_ = Math.random;

/**
 * Get a random integer in the given range.
 * @param {number} low inclusive lower end of range
 * @param {number} high exclusive upper end of range
 * @returns {number}
 */
var randomIntInRange = function randomIntInRange(low, high) {
  return Math.floor(pseudoRandomNumberFunction_() * (high - low)) + low;
};

/**
 * Provide singleton access to global simulation settings
 */
module.exports = {

  /**
   * Set the root controllers that can be used for global operations.
   * @param {StudioApp} studioApp
   * @param {NetSim} netsim
   */
  setRootControllers: function setRootControllers(studioApp, netsim) {
    studioApp_ = studioApp;
    netsim_ = netsim;
  },

  /**
   * @returns {NetSimLevelConfiguration}
   */
  getLevelConfig: function getLevelConfig() {
    return netsim_.level;
  },

  /**
   * @returns {PubSubConfig}
   */
  getPubSubConfig: function getPubSubConfig() {
    return {
      usePusher: netsim_.usePusher,
      pusherApplicationKey: netsim_.pusherApplicationKey
    };
  },

  /**
   * @returns {number}
   */
  getGlobalMaxRouters: function getGlobalMaxRouters() {
    return netsim_.globalMaxRouters;
  },

  /**
   * @returns {function}
   */
  getAssetUrlFunction: function getAssetUrlFunction() {
    return studioApp_.assetUrl;
  },

  /**
   * Trigger a layout update of the right column, received/sent/send panels.
   */
  updateLayout: function updateLayout() {
    netsim_.updateLayout();
  },

  /**
   * Trigger an attempt to complete the current level and continue to the next.
   */
  completeLevelAndContinue: function completeLevelAndContinue() {
    netsim_.completeLevelAndContinue();
  },

  /**
   * Reseed the random number generator.  If this is never called, the default
   * Math.random function is used as the generator.
   * @param {string} newSeed
   */
  setRandomSeed: function setRandomSeed(newSeed) {
    pseudoRandomNumberFunction_ = seedrandom(newSeed);
  },

  /**
   * @returns {number} a random value between 0 and 1
   */
  random: function random() {
    return pseudoRandomNumberFunction_();
  },

  /**
   * Get a random integer in the given range.
   * @param {number} low inclusive lower end of range
   * @param {number} high exclusive upper end of range
   * @returns {number}
   */
  randomIntInRange: randomIntInRange,

  /**
   * Get a random item out of a collection
   * @param {Array} collection
   * @returns {*} undefined if collection is empty
   */
  randomPickOne: function randomPickOne(collection) {
    var size = collection.length;
    if (size === 0) {
      return undefined;
    }

    return collection[randomIntInRange(0, size)];
  }

};

},{"seedrandom":"/home/ubuntu/staging/apps/node_modules/seedrandom/index.js"}],"/home/ubuntu/staging/apps/node_modules/seedrandom/index.js":[function(require,module,exports){
// A library of seedable RNGs implemented in Javascript.
//
// Usage:
//
// var seedrandom = require('seedrandom');
// var random = seedrandom(1); // or any seed.
// var x = random();       // 0 <= x < 1.  Every bit is random.
// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.

// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.
// Period: ~2^116
// Reported to pass all BigCrush tests.
var alea = require('./lib/alea');

// xor128, a pure xor-shift generator by George Marsaglia.
// Period: 2^128-1.
// Reported to fail: MatrixRank and LinearComp.
var xor128 = require('./lib/xor128');

// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.
// Period: 2^192-2^32
// Reported to fail: CollisionOver, SimpPoker, and LinearComp.
var xorwow = require('./lib/xorwow');

// xorshift7, by François Panneton and Pierre L'ecuyer, takes
// a different approach: it adds robustness by allowing more shifts
// than Marsaglia's original three.  It is a 7-shift generator
// with 256 bits, that passes BigCrush with no systmatic failures.
// Period 2^256-1.
// No systematic BigCrush failures reported.
var xorshift7 = require('./lib/xorshift7');

// xor4096, by Richard Brent, is a 4096-bit xor-shift with a
// very long period that also adds a Weyl generator. It also passes
// BigCrush with no systematic failures.  Its long period may
// be useful if you have many generators and need to avoid
// collisions.
// Period: 2^4128-2^32.
// No systematic BigCrush failures reported.
var xor4096 = require('./lib/xor4096');

// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random
// number generator derived from ChaCha, a modern stream cipher.
// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf
// Period: ~2^127
// No systematic BigCrush failures reported.
var tychei = require('./lib/tychei');

// The original ARC4-based prng included in this library.
// Period: ~2^1600
var sr = require('./seedrandom');

sr.alea = alea;
sr.xor128 = xor128;
sr.xorwow = xorwow;
sr.xorshift7 = xorshift7;
sr.xor4096 = xor4096;
sr.tychei = tychei;

module.exports = sr;

},{"./lib/alea":"/home/ubuntu/staging/apps/node_modules/seedrandom/lib/alea.js","./lib/tychei":"/home/ubuntu/staging/apps/node_modules/seedrandom/lib/tychei.js","./lib/xor128":"/home/ubuntu/staging/apps/node_modules/seedrandom/lib/xor128.js","./lib/xor4096":"/home/ubuntu/staging/apps/node_modules/seedrandom/lib/xor4096.js","./lib/xorshift7":"/home/ubuntu/staging/apps/node_modules/seedrandom/lib/xorshift7.js","./lib/xorwow":"/home/ubuntu/staging/apps/node_modules/seedrandom/lib/xorwow.js","./seedrandom":"/home/ubuntu/staging/apps/node_modules/seedrandom/seedrandom.js"}],"/home/ubuntu/staging/apps/node_modules/seedrandom/seedrandom.js":[function(require,module,exports){
/*
Copyright 2014 David Bau.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/

(function (pool, math) {
//
// The following constants are related to IEEE 754 limits.
//
var global = this,
    width = 256,        // each RC4 output is 0 <= x < 256
    chunks = 6,         // at least six RC4 outputs for each double
    digits = 52,        // there are 52 significant digits in a double
    rngname = 'random', // rngname: name for Math.random and Math.seedrandom
    startdenom = math.pow(width, chunks),
    significance = math.pow(2, digits),
    overflow = significance * 2,
    mask = width - 1,
    nodecrypto;         // node.js crypto module, initialized at the bottom.

//
// seedrandom()
// This is the seedrandom function described above.
//
function seedrandom(seed, options, callback) {
  var key = [];
  options = (options == true) ? { entropy: true } : (options || {});

  // Flatten the seed string or build one from local entropy if needed.
  var shortseed = mixkey(flatten(
    options.entropy ? [seed, tostring(pool)] :
    (seed == null) ? autoseed() : seed, 3), key);

  // Use the seed to initialize an ARC4 generator.
  var arc4 = new ARC4(key);

  // This function returns a random double in [0, 1) that contains
  // randomness in every bit of the mantissa of the IEEE 754 value.
  var prng = function() {
    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48
        d = startdenom,                 //   and denominator d = 2 ^ 48.
        x = 0;                          //   and no 'extra last byte'.
    while (n < significance) {          // Fill up all significant digits by
      n = (n + x) * width;              //   shifting numerator and
      d *= width;                       //   denominator and generating a
      x = arc4.g(1);                    //   new least-significant-byte.
    }
    while (n >= overflow) {             // To avoid rounding up, before adding
      n /= 2;                           //   last byte, shift everything
      d /= 2;                           //   right using integer math until
      x >>>= 1;                         //   we have exactly the desired bits.
    }
    return (n + x) / d;                 // Form the number within [0, 1).
  };

  prng.int32 = function() { return arc4.g(4) | 0; }
  prng.quick = function() { return arc4.g(4) / 0x100000000; }
  prng.double = prng;

  // Mix the randomness into accumulated entropy.
  mixkey(tostring(arc4.S), pool);

  // Calling convention: what to return as a function of prng, seed, is_math.
  return (options.pass || callback ||
      function(prng, seed, is_math_call, state) {
        if (state) {
          // Load the arc4 state from the given state if it has an S array.
          if (state.S) { copy(state, arc4); }
          // Only provide the .state method if requested via options.state.
          prng.state = function() { return copy(arc4, {}); }
        }

        // If called as a method of Math (Math.seedrandom()), mutate
        // Math.random because that is how seedrandom.js has worked since v1.0.
        if (is_math_call) { math[rngname] = prng; return seed; }

        // Otherwise, it is a newer calling convention, so return the
        // prng directly.
        else return prng;
      })(
  prng,
  shortseed,
  'global' in options ? options.global : (this == math),
  options.state);
}
math['seed' + rngname] = seedrandom;

//
// ARC4
//
// An ARC4 implementation.  The constructor takes a key in the form of
// an array of at most (width) integers that should be 0 <= x < (width).
//
// The g(count) method returns a pseudorandom integer that concatenates
// the next (count) outputs from ARC4.  Its return value is a number x
// that is in the range 0 <= x < (width ^ count).
//
function ARC4(key) {
  var t, keylen = key.length,
      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];

  // The empty key [] is treated as [0].
  if (!keylen) { key = [keylen++]; }

  // Set up S using the standard key scheduling algorithm.
  while (i < width) {
    s[i] = i++;
  }
  for (i = 0; i < width; i++) {
    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
    s[j] = t;
  }

  // The "g" method returns the next (count) outputs as one number.
  (me.g = function(count) {
    // Using instance members instead of closure state nearly doubles speed.
    var t, r = 0,
        i = me.i, j = me.j, s = me.S;
    while (count--) {
      t = s[i = mask & (i + 1)];
      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
    }
    me.i = i; me.j = j;
    return r;
    // For robust unpredictability, the function call below automatically
    // discards an initial batch of values.  This is called RC4-drop[256].
    // See http://google.com/search?q=rsa+fluhrer+response&btnI
  })(width);
}

//
// copy()
// Copies internal state of ARC4 to or from a plain object.
//
function copy(f, t) {
  t.i = f.i;
  t.j = f.j;
  t.S = f.S.slice();
  return t;
};

//
// flatten()
// Converts an object tree to nested arrays of strings.
//
function flatten(obj, depth) {
  var result = [], typ = (typeof obj), prop;
  if (depth && typ == 'object') {
    for (prop in obj) {
      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
    }
  }
  return (result.length ? result : typ == 'string' ? obj : obj + '\0');
}

//
// mixkey()
// Mixes a string seed into a key that is an array of integers, and
// returns a shortened string seed that is equivalent to the result key.
//
function mixkey(seed, key) {
  var stringseed = seed + '', smear, j = 0;
  while (j < stringseed.length) {
    key[mask & j] =
      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
  }
  return tostring(key);
}

//
// autoseed()
// Returns an object for autoseeding, using window.crypto and Node crypto
// module if available.
//
function autoseed() {
  try {
    if (nodecrypto) { return tostring(nodecrypto.randomBytes(width)); }
    var out = new Uint8Array(width);
    (global.crypto || global.msCrypto).getRandomValues(out);
    return tostring(out);
  } catch (e) {
    var browser = global.navigator,
        plugins = browser && browser.plugins;
    return [+new Date, global, plugins, global.screen, tostring(pool)];
  }
}

//
// tostring()
// Converts an array of charcodes to a string
//
function tostring(a) {
  return String.fromCharCode.apply(0, a);
}

//
// When seedrandom.js is loaded, we immediately mix a few bits
// from the built-in RNG into the entropy pool.  Because we do
// not want to interfere with deterministic PRNG state later,
// seedrandom will not call math.random on its own again after
// initialization.
//
mixkey(math.random(), pool);

//
// Nodejs and AMD support: export the implementation as a module using
// either convention.
//
if ((typeof module) == 'object' && module.exports) {
  module.exports = seedrandom;
  // When in node.js, try using crypto package for autoseeding.
  try {
    nodecrypto = require('crypto');
  } catch (ex) {}
} else if ((typeof define) == 'function' && define.amd) {
  define(function() { return seedrandom; });
}

// End anonymous scope, and pass initial values.
})(
  [],     // pool: entropy pool starts empty
  Math    // math: package containing random, pow, and seedrandom
);

},{"crypto":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/index.js":[function(require,module,exports){
'use strict'

exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')
exports.createHash = exports.Hash = require('create-hash')
exports.createHmac = exports.Hmac = require('create-hmac')

var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(Object.keys(require('browserify-sign/algos')))
exports.getHashes = function () {
  return hashes
}

var p = require('pbkdf2')
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = require('browserify-cipher')
;[
  'Cipher',
  'createCipher',
  'Cipheriv',
  'createCipheriv',
  'Decipher',
  'createDecipher',
  'Decipheriv',
  'createDecipheriv',
  'getCiphers',
  'listCiphers'
].forEach(function (key) {
  exports[key] = aes[key]
})

var dh = require('diffie-hellman')
;[
  'DiffieHellmanGroup',
  'createDiffieHellmanGroup',
  'getDiffieHellman',
  'createDiffieHellman',
  'DiffieHellman'
].forEach(function (key) {
  exports[key] = dh[key]
})

var sign = require('browserify-sign')
;[
  'createSign',
  'Sign',
  'createVerify',
  'Verify'
].forEach(function (key) {
  exports[key] = sign[key]
})

exports.createECDH = require('create-ecdh')

var publicEncrypt = require('public-encrypt')

;[
  'publicEncrypt',
  'privateEncrypt',
  'publicDecrypt',
  'privateDecrypt'
].forEach(function (key) {
  exports[key] = publicEncrypt[key]
})

// the least I can do is make error messages for the rest of the node.js/crypto api.
;[
  'createCredentials'
].forEach(function (name) {
  exports[name] = function () {
    throw new Error([
      'sorry, ' + name + ' is not implemented yet',
      'we accept pull requests',
      'https://github.com/crypto-browserify/crypto-browserify'
    ].join('\n'))
  }
})

},{"browserify-cipher":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/browser.js","browserify-sign":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/browser.js","browserify-sign/algos":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/algos.js","create-ecdh":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/browser.js","create-hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/browser.js","create-hmac":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hmac/browser.js","diffie-hellman":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/browser.js","pbkdf2":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/pbkdf2/browser.js","public-encrypt":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/browser.js","randombytes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/randombytes/browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/browser.js":[function(require,module,exports){
exports.publicEncrypt = require('./publicEncrypt');
exports.privateDecrypt = require('./privateDecrypt');

exports.privateEncrypt = function privateEncrypt(key, buf) {
  return exports.publicEncrypt(key, buf, true);
};

exports.publicDecrypt = function publicDecrypt(key, buf) {
  return exports.privateDecrypt(key, buf, true);
};
},{"./privateDecrypt":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/privateDecrypt.js","./publicEncrypt":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/publicEncrypt.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/publicEncrypt.js":[function(require,module,exports){
(function (Buffer){
var parseKeys = require('parse-asn1');
var randomBytes = require('randombytes');
var createHash = require('create-hash');
var mgf = require('./mgf');
var xor = require('./xor');
var bn = require('bn.js');
var withPublic = require('./withPublic');
var crt = require('browserify-rsa');

var constants = {
  RSA_PKCS1_OAEP_PADDING: 4,
  RSA_PKCS1_PADDIN: 1,
  RSA_NO_PADDING: 3
};

module.exports = function publicEncrypt(public_key, msg, reverse) {
  var padding;
  if (public_key.padding) {
    padding = public_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }
  var key = parseKeys(public_key);
  var paddedMsg;
  if (padding === 4) {
    paddedMsg = oaep(key, msg);
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    paddedMsg = new bn(msg);
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus');
    }
  } else {
    throw new Error('unknown padding');
  }
  if (reverse) {
    return crt(paddedMsg, key);
  } else {
    return withPublic(paddedMsg, key);
  }
};

function oaep(key, msg){
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long');
  }
  var ps = new Buffer(k - mLen - hLen2 - 2);
  ps.fill(0);
  var dblen = k - hLen - 1;
  var seed = randomBytes(hLen);
  var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));
  var maskedSeed = xor(seed, mgf(maskedDb, hLen));
  return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));
}
function pkcs1(key, msg, reverse){
  var mLen = msg.length;
  var k = key.modulus.byteLength();
  if (mLen > k - 11) {
    throw new Error('message too long');
  }
  var ps;
  if (reverse) {
    ps = new Buffer(k - mLen - 3);
    ps.fill(0xff);
  } else {
    ps = nonZero(k - mLen - 3);
  }
  return new bn(Buffer.concat([new Buffer([0, reverse?1:2]), ps, new Buffer([0]), msg], k));
}
function nonZero(len, crypto) {
  var out = new Buffer(len);
  var i = 0;
  var cache = randomBytes(len*2);
  var cur = 0;
  var num;
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len*2);
      cur = 0;
    }
    num = cache[cur++];
    if (num) {
      out[i++] = num;
    }
  }
  return out;
}
}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvcHVibGljRW5jcnlwdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHBhcnNlS2V5cyA9IHJlcXVpcmUoJ3BhcnNlLWFzbjEnKTtcbnZhciByYW5kb21CeXRlcyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJyk7XG52YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJyk7XG52YXIgbWdmID0gcmVxdWlyZSgnLi9tZ2YnKTtcbnZhciB4b3IgPSByZXF1aXJlKCcuL3hvcicpO1xudmFyIGJuID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciB3aXRoUHVibGljID0gcmVxdWlyZSgnLi93aXRoUHVibGljJyk7XG52YXIgY3J0ID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1yc2EnKTtcblxudmFyIGNvbnN0YW50cyA9IHtcbiAgUlNBX1BLQ1MxX09BRVBfUEFERElORzogNCxcbiAgUlNBX1BLQ1MxX1BBRERJTjogMSxcbiAgUlNBX05PX1BBRERJTkc6IDNcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcHVibGljRW5jcnlwdChwdWJsaWNfa2V5LCBtc2csIHJldmVyc2UpIHtcbiAgdmFyIHBhZGRpbmc7XG4gIGlmIChwdWJsaWNfa2V5LnBhZGRpbmcpIHtcbiAgICBwYWRkaW5nID0gcHVibGljX2tleS5wYWRkaW5nO1xuICB9IGVsc2UgaWYgKHJldmVyc2UpIHtcbiAgICBwYWRkaW5nID0gMTtcbiAgfSBlbHNlIHtcbiAgICBwYWRkaW5nID0gNDtcbiAgfVxuICB2YXIga2V5ID0gcGFyc2VLZXlzKHB1YmxpY19rZXkpO1xuICB2YXIgcGFkZGVkTXNnO1xuICBpZiAocGFkZGluZyA9PT0gNCkge1xuICAgIHBhZGRlZE1zZyA9IG9hZXAoa2V5LCBtc2cpO1xuICB9IGVsc2UgaWYgKHBhZGRpbmcgPT09IDEpIHtcbiAgICBwYWRkZWRNc2cgPSBwa2NzMShrZXksIG1zZywgcmV2ZXJzZSk7XG4gIH0gZWxzZSBpZiAocGFkZGluZyA9PT0gMykge1xuICAgIHBhZGRlZE1zZyA9IG5ldyBibihtc2cpO1xuICAgIGlmIChwYWRkZWRNc2cuY21wKGtleS5tb2R1bHVzKSA+PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgdG9vIGxvbmcgZm9yIG1vZHVsdXMnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIHBhZGRpbmcnKTtcbiAgfVxuICBpZiAocmV2ZXJzZSkge1xuICAgIHJldHVybiBjcnQocGFkZGVkTXNnLCBrZXkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB3aXRoUHVibGljKHBhZGRlZE1zZywga2V5KTtcbiAgfVxufTtcblxuZnVuY3Rpb24gb2FlcChrZXksIG1zZyl7XG4gIHZhciBrID0ga2V5Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICB2YXIgbUxlbiA9IG1zZy5sZW5ndGg7XG4gIHZhciBpSGFzaCA9IGNyZWF0ZUhhc2goJ3NoYTEnKS51cGRhdGUobmV3IEJ1ZmZlcignJykpLmRpZ2VzdCgpO1xuICB2YXIgaExlbiA9IGlIYXNoLmxlbmd0aDtcbiAgdmFyIGhMZW4yID0gMiAqIGhMZW47XG4gIGlmIChtTGVuID4gayAtIGhMZW4yIC0gMikge1xuICAgIHRocm93IG5ldyBFcnJvcignbWVzc2FnZSB0b28gbG9uZycpO1xuICB9XG4gIHZhciBwcyA9IG5ldyBCdWZmZXIoayAtIG1MZW4gLSBoTGVuMiAtIDIpO1xuICBwcy5maWxsKDApO1xuICB2YXIgZGJsZW4gPSBrIC0gaExlbiAtIDE7XG4gIHZhciBzZWVkID0gcmFuZG9tQnl0ZXMoaExlbik7XG4gIHZhciBtYXNrZWREYiA9IHhvcihCdWZmZXIuY29uY2F0KFtpSGFzaCwgcHMsIG5ldyBCdWZmZXIoWzFdKSwgbXNnXSwgZGJsZW4pLCBtZ2Yoc2VlZCwgZGJsZW4pKTtcbiAgdmFyIG1hc2tlZFNlZWQgPSB4b3Ioc2VlZCwgbWdmKG1hc2tlZERiLCBoTGVuKSk7XG4gIHJldHVybiBuZXcgYm4oQnVmZmVyLmNvbmNhdChbbmV3IEJ1ZmZlcihbMF0pLCBtYXNrZWRTZWVkLCBtYXNrZWREYl0sIGspKTtcbn1cbmZ1bmN0aW9uIHBrY3MxKGtleSwgbXNnLCByZXZlcnNlKXtcbiAgdmFyIG1MZW4gPSBtc2cubGVuZ3RoO1xuICB2YXIgayA9IGtleS5tb2R1bHVzLmJ5dGVMZW5ndGgoKTtcbiAgaWYgKG1MZW4gPiBrIC0gMTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ21lc3NhZ2UgdG9vIGxvbmcnKTtcbiAgfVxuICB2YXIgcHM7XG4gIGlmIChyZXZlcnNlKSB7XG4gICAgcHMgPSBuZXcgQnVmZmVyKGsgLSBtTGVuIC0gMyk7XG4gICAgcHMuZmlsbCgweGZmKTtcbiAgfSBlbHNlIHtcbiAgICBwcyA9IG5vblplcm8oayAtIG1MZW4gLSAzKTtcbiAgfVxuICByZXR1cm4gbmV3IGJuKEJ1ZmZlci5jb25jYXQoW25ldyBCdWZmZXIoWzAsIHJldmVyc2U/MToyXSksIHBzLCBuZXcgQnVmZmVyKFswXSksIG1zZ10sIGspKTtcbn1cbmZ1bmN0aW9uIG5vblplcm8obGVuLCBjcnlwdG8pIHtcbiAgdmFyIG91dCA9IG5ldyBCdWZmZXIobGVuKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgY2FjaGUgPSByYW5kb21CeXRlcyhsZW4qMik7XG4gIHZhciBjdXIgPSAwO1xuICB2YXIgbnVtO1xuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIGlmIChjdXIgPT09IGNhY2hlLmxlbmd0aCkge1xuICAgICAgY2FjaGUgPSByYW5kb21CeXRlcyhsZW4qMik7XG4gICAgICBjdXIgPSAwO1xuICAgIH1cbiAgICBudW0gPSBjYWNoZVtjdXIrK107XG4gICAgaWYgKG51bSkge1xuICAgICAgb3V0W2krK10gPSBudW07XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXQ7XG59Il19
},{"./mgf":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/mgf.js","./withPublic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/withPublic.js","./xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/xor.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/bn.js/lib/bn.js","browserify-rsa":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/browserify-rsa/index.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","create-hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/browser.js","parse-asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/index.js","randombytes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/randombytes/browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/privateDecrypt.js":[function(require,module,exports){
(function (Buffer){
var parseKeys = require('parse-asn1');
var mgf = require('./mgf');
var xor = require('./xor');
var bn = require('bn.js');
var crt = require('browserify-rsa');
var createHash = require('create-hash');
var withPublic = require('./withPublic');
module.exports = function privateDecrypt(private_key, enc, reverse) {
  var padding;
  if (private_key.padding) {
    padding = private_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }
  
  var key = parseKeys(private_key);
  var k = key.modulus.byteLength();
  if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error');
  }
  var msg;
  if (reverse) {
    msg = withPublic(new bn(enc), key);
  } else {
    msg = crt(enc, key);
  }
  var zBuffer = new Buffer(k - msg.length);
  zBuffer.fill(0);
  msg = Buffer.concat([zBuffer, msg], k);
  if (padding === 4) {
    return oaep(key, msg);
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    return msg;
  } else {
    throw new Error('unknown padding');
  }
};

function oaep(key, msg){
  var n = key.modulus;
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (msg[0] !== 0) {
    throw new Error('decryption error');
  }
  var maskedSeed = msg.slice(1, hLen + 1);
  var maskedDb =  msg.slice(hLen + 1);
  var seed = xor(maskedSeed, mgf(maskedDb, hLen));
  var db = xor(maskedDb, mgf(seed, k - hLen - 1));
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error');
  }
  var i = hLen;
  while (db[i] === 0) {
    i++;
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error');
  }
  return db.slice(i);
}

function pkcs1(key, msg, reverse){
  var p1 = msg.slice(0, 2);
  var i = 2;
  var status = 0;
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++;
      break;
    }
  }
  var ps = msg.slice(2, i - 1);
  var p2 = msg.slice(i - 1, i);

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)){
    status++;
  }
  if (ps.length < 8) {
    status++;
  }
  if (status) {
    throw new Error('decryption error');
  }
  return  msg.slice(i);
}
function compare(a, b){
  a = new Buffer(a);
  b = new Buffer(b);
  var dif = 0;
  var len = a.length;
  if (a.length !== b.length) {
    dif++;
    len = Math.min(a.length, b.length);
  }
  var i = -1;
  while (++i < len) {
    dif += (a[i] ^ b[i]);
  }
  return dif;
}
}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvcHJpdmF0ZURlY3J5cHQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHBhcnNlS2V5cyA9IHJlcXVpcmUoJ3BhcnNlLWFzbjEnKTtcbnZhciBtZ2YgPSByZXF1aXJlKCcuL21nZicpO1xudmFyIHhvciA9IHJlcXVpcmUoJy4veG9yJyk7XG52YXIgYm4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIGNydCA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktcnNhJyk7XG52YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJyk7XG52YXIgd2l0aFB1YmxpYyA9IHJlcXVpcmUoJy4vd2l0aFB1YmxpYycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwcml2YXRlRGVjcnlwdChwcml2YXRlX2tleSwgZW5jLCByZXZlcnNlKSB7XG4gIHZhciBwYWRkaW5nO1xuICBpZiAocHJpdmF0ZV9rZXkucGFkZGluZykge1xuICAgIHBhZGRpbmcgPSBwcml2YXRlX2tleS5wYWRkaW5nO1xuICB9IGVsc2UgaWYgKHJldmVyc2UpIHtcbiAgICBwYWRkaW5nID0gMTtcbiAgfSBlbHNlIHtcbiAgICBwYWRkaW5nID0gNDtcbiAgfVxuICBcbiAgdmFyIGtleSA9IHBhcnNlS2V5cyhwcml2YXRlX2tleSk7XG4gIHZhciBrID0ga2V5Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICBpZiAoZW5jLmxlbmd0aCA+IGsgfHwgbmV3IGJuKGVuYykuY21wKGtleS5tb2R1bHVzKSA+PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdkZWNyeXB0aW9uIGVycm9yJyk7XG4gIH1cbiAgdmFyIG1zZztcbiAgaWYgKHJldmVyc2UpIHtcbiAgICBtc2cgPSB3aXRoUHVibGljKG5ldyBibihlbmMpLCBrZXkpO1xuICB9IGVsc2Uge1xuICAgIG1zZyA9IGNydChlbmMsIGtleSk7XG4gIH1cbiAgdmFyIHpCdWZmZXIgPSBuZXcgQnVmZmVyKGsgLSBtc2cubGVuZ3RoKTtcbiAgekJ1ZmZlci5maWxsKDApO1xuICBtc2cgPSBCdWZmZXIuY29uY2F0KFt6QnVmZmVyLCBtc2ddLCBrKTtcbiAgaWYgKHBhZGRpbmcgPT09IDQpIHtcbiAgICByZXR1cm4gb2FlcChrZXksIG1zZyk7XG4gIH0gZWxzZSBpZiAocGFkZGluZyA9PT0gMSkge1xuICAgIHJldHVybiBwa2NzMShrZXksIG1zZywgcmV2ZXJzZSk7XG4gIH0gZWxzZSBpZiAocGFkZGluZyA9PT0gMykge1xuICAgIHJldHVybiBtc2c7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIHBhZGRpbmcnKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gb2FlcChrZXksIG1zZyl7XG4gIHZhciBuID0ga2V5Lm1vZHVsdXM7XG4gIHZhciBrID0ga2V5Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICB2YXIgbUxlbiA9IG1zZy5sZW5ndGg7XG4gIHZhciBpSGFzaCA9IGNyZWF0ZUhhc2goJ3NoYTEnKS51cGRhdGUobmV3IEJ1ZmZlcignJykpLmRpZ2VzdCgpO1xuICB2YXIgaExlbiA9IGlIYXNoLmxlbmd0aDtcbiAgdmFyIGhMZW4yID0gMiAqIGhMZW47XG4gIGlmIChtc2dbMF0gIT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlY3J5cHRpb24gZXJyb3InKTtcbiAgfVxuICB2YXIgbWFza2VkU2VlZCA9IG1zZy5zbGljZSgxLCBoTGVuICsgMSk7XG4gIHZhciBtYXNrZWREYiA9ICBtc2cuc2xpY2UoaExlbiArIDEpO1xuICB2YXIgc2VlZCA9IHhvcihtYXNrZWRTZWVkLCBtZ2YobWFza2VkRGIsIGhMZW4pKTtcbiAgdmFyIGRiID0geG9yKG1hc2tlZERiLCBtZ2Yoc2VlZCwgayAtIGhMZW4gLSAxKSk7XG4gIGlmIChjb21wYXJlKGlIYXNoLCBkYi5zbGljZSgwLCBoTGVuKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlY3J5cHRpb24gZXJyb3InKTtcbiAgfVxuICB2YXIgaSA9IGhMZW47XG4gIHdoaWxlIChkYltpXSA9PT0gMCkge1xuICAgIGkrKztcbiAgfVxuICBpZiAoZGJbaSsrXSAhPT0gMSkge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVjcnlwdGlvbiBlcnJvcicpO1xuICB9XG4gIHJldHVybiBkYi5zbGljZShpKTtcbn1cblxuZnVuY3Rpb24gcGtjczEoa2V5LCBtc2csIHJldmVyc2Upe1xuICB2YXIgcDEgPSBtc2cuc2xpY2UoMCwgMik7XG4gIHZhciBpID0gMjtcbiAgdmFyIHN0YXR1cyA9IDA7XG4gIHdoaWxlIChtc2dbaSsrXSAhPT0gMCkge1xuICAgIGlmIChpID49IG1zZy5sZW5ndGgpIHtcbiAgICAgIHN0YXR1cysrO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHZhciBwcyA9IG1zZy5zbGljZSgyLCBpIC0gMSk7XG4gIHZhciBwMiA9IG1zZy5zbGljZShpIC0gMSwgaSk7XG5cbiAgaWYgKChwMS50b1N0cmluZygnaGV4JykgIT09ICcwMDAyJyAmJiAhcmV2ZXJzZSkgfHwgKHAxLnRvU3RyaW5nKCdoZXgnKSAhPT0gJzAwMDEnICYmIHJldmVyc2UpKXtcbiAgICBzdGF0dXMrKztcbiAgfVxuICBpZiAocHMubGVuZ3RoIDwgOCkge1xuICAgIHN0YXR1cysrO1xuICB9XG4gIGlmIChzdGF0dXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlY3J5cHRpb24gZXJyb3InKTtcbiAgfVxuICByZXR1cm4gIG1zZy5zbGljZShpKTtcbn1cbmZ1bmN0aW9uIGNvbXBhcmUoYSwgYil7XG4gIGEgPSBuZXcgQnVmZmVyKGEpO1xuICBiID0gbmV3IEJ1ZmZlcihiKTtcbiAgdmFyIGRpZiA9IDA7XG4gIHZhciBsZW4gPSBhLmxlbmd0aDtcbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgIGRpZisrO1xuICAgIGxlbiA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aCk7XG4gIH1cbiAgdmFyIGkgPSAtMTtcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIGRpZiArPSAoYVtpXSBeIGJbaV0pO1xuICB9XG4gIHJldHVybiBkaWY7XG59Il19
},{"./mgf":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/mgf.js","./withPublic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/withPublic.js","./xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/xor.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/bn.js/lib/bn.js","browserify-rsa":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/browserify-rsa/index.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","create-hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/browser.js","parse-asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/xor.js":[function(require,module,exports){
module.exports = function xor(a, b) {
  var len = a.length;
  var i = -1;
  while (++i < len) {
    a[i] ^= b[i];
  }
  return a
};
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/withPublic.js":[function(require,module,exports){
(function (Buffer){
var bn = require('bn.js');
function withPublic(paddedMsg, key) {
  return new Buffer(paddedMsg
    .toRed(bn.mont(key.modulus))
    .redPow(new bn(key.publicExponent))
    .fromRed()
    .toArray());
}

module.exports = withPublic;
}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvd2l0aFB1YmxpYy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBibiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG5mdW5jdGlvbiB3aXRoUHVibGljKHBhZGRlZE1zZywga2V5KSB7XG4gIHJldHVybiBuZXcgQnVmZmVyKHBhZGRlZE1zZ1xuICAgIC50b1JlZChibi5tb250KGtleS5tb2R1bHVzKSlcbiAgICAucmVkUG93KG5ldyBibihrZXkucHVibGljRXhwb25lbnQpKVxuICAgIC5mcm9tUmVkKClcbiAgICAudG9BcnJheSgpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3aXRoUHVibGljOyJdfQ==
},{"bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/bn.js/lib/bn.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/index.js":[function(require,module,exports){
(function (Buffer){
var asn1 = require('./asn1')
var aesid = require('./aesid.json')
var fixProc = require('./fixProc')
var ciphers = require('browserify-aes')
var compat = require('pbkdf2')
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = new Buffer(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'PUBLIC KEY':
      ndata = asn1.PublicKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen)
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFzbjEgPSByZXF1aXJlKCcuL2FzbjEnKVxudmFyIGFlc2lkID0gcmVxdWlyZSgnLi9hZXNpZC5qc29uJylcbnZhciBmaXhQcm9jID0gcmVxdWlyZSgnLi9maXhQcm9jJylcbnZhciBjaXBoZXJzID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1hZXMnKVxudmFyIGNvbXBhdCA9IHJlcXVpcmUoJ3Bia2RmMicpXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlS2V5c1xuXG5mdW5jdGlvbiBwYXJzZUtleXMgKGJ1ZmZlcikge1xuICB2YXIgcGFzc3dvcmRcbiAgaWYgKHR5cGVvZiBidWZmZXIgPT09ICdvYmplY3QnICYmICFCdWZmZXIuaXNCdWZmZXIoYnVmZmVyKSkge1xuICAgIHBhc3N3b3JkID0gYnVmZmVyLnBhc3NwaHJhc2VcbiAgICBidWZmZXIgPSBidWZmZXIua2V5XG4gIH1cbiAgaWYgKHR5cGVvZiBidWZmZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgYnVmZmVyID0gbmV3IEJ1ZmZlcihidWZmZXIpXG4gIH1cblxuICB2YXIgc3RyaXBwZWQgPSBmaXhQcm9jKGJ1ZmZlciwgcGFzc3dvcmQpXG5cbiAgdmFyIHR5cGUgPSBzdHJpcHBlZC50YWdcbiAgdmFyIGRhdGEgPSBzdHJpcHBlZC5kYXRhXG4gIHZhciBzdWJ0eXBlLCBuZGF0YVxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdQVUJMSUMgS0VZJzpcbiAgICAgIG5kYXRhID0gYXNuMS5QdWJsaWNLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgc3VidHlwZSA9IG5kYXRhLmFsZ29yaXRobS5hbGdvcml0aG0uam9pbignLicpXG4gICAgICBzd2l0Y2ggKHN1YnR5cGUpIHtcbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMTM1NDkuMS4xLjEnOlxuICAgICAgICAgIHJldHVybiBhc24xLlJTQVB1YmxpY0tleS5kZWNvZGUobmRhdGEuc3ViamVjdFB1YmxpY0tleS5kYXRhLCAnZGVyJylcbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMDA0NS4yLjEnOlxuICAgICAgICAgIG5kYXRhLnN1YmplY3RQcml2YXRlS2V5ID0gbmRhdGEuc3ViamVjdFB1YmxpY0tleVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnZWMnLFxuICAgICAgICAgICAgZGF0YTogbmRhdGFcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTAwNDAuNC4xJzpcbiAgICAgICAgICBuZGF0YS5hbGdvcml0aG0ucGFyYW1zLnB1Yl9rZXkgPSBhc24xLkRTQXBhcmFtLmRlY29kZShuZGF0YS5zdWJqZWN0UHVibGljS2V5LmRhdGEsICdkZXInKVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnZHNhJyxcbiAgICAgICAgICAgIGRhdGE6IG5kYXRhLmFsZ29yaXRobS5wYXJhbXNcbiAgICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgaWQgJyArIHN1YnR5cGUpXG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IHR5cGUgJyArIHR5cGUpXG4gICAgY2FzZSAnRU5DUllQVEVEIFBSSVZBVEUgS0VZJzpcbiAgICAgIGRhdGEgPSBhc24xLkVuY3J5cHRlZFByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgZGF0YSA9IGRlY3J5cHQoZGF0YSwgcGFzc3dvcmQpXG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgY2FzZSAnUFJJVkFURSBLRVknOlxuICAgICAgbmRhdGEgPSBhc24xLlByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgc3VidHlwZSA9IG5kYXRhLmFsZ29yaXRobS5hbGdvcml0aG0uam9pbignLicpXG4gICAgICBzd2l0Y2ggKHN1YnR5cGUpIHtcbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMTM1NDkuMS4xLjEnOlxuICAgICAgICAgIHJldHVybiBhc24xLlJTQVByaXZhdGVLZXkuZGVjb2RlKG5kYXRhLnN1YmplY3RQcml2YXRlS2V5LCAnZGVyJylcbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMDA0NS4yLjEnOlxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjdXJ2ZTogbmRhdGEuYWxnb3JpdGhtLmN1cnZlLFxuICAgICAgICAgICAgcHJpdmF0ZUtleTogYXNuMS5FQ1ByaXZhdGVLZXkuZGVjb2RlKG5kYXRhLnN1YmplY3RQcml2YXRlS2V5LCAnZGVyJykucHJpdmF0ZUtleVxuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMDA0MC40LjEnOlxuICAgICAgICAgIG5kYXRhLmFsZ29yaXRobS5wYXJhbXMucHJpdl9rZXkgPSBhc24xLkRTQXBhcmFtLmRlY29kZShuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleSwgJ2RlcicpXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdkc2EnLFxuICAgICAgICAgICAgcGFyYW1zOiBuZGF0YS5hbGdvcml0aG0ucGFyYW1zXG4gICAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IGlkICcgKyBzdWJ0eXBlKVxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSB0eXBlICcgKyB0eXBlKVxuICAgIGNhc2UgJ1JTQSBQVUJMSUMgS0VZJzpcbiAgICAgIHJldHVybiBhc24xLlJTQVB1YmxpY0tleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgY2FzZSAnUlNBIFBSSVZBVEUgS0VZJzpcbiAgICAgIHJldHVybiBhc24xLlJTQVByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgIGNhc2UgJ0RTQSBQUklWQVRFIEtFWSc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnZHNhJyxcbiAgICAgICAgcGFyYW1zOiBhc24xLkRTQVByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgfVxuICAgIGNhc2UgJ0VDIFBSSVZBVEUgS0VZJzpcbiAgICAgIGRhdGEgPSBhc24xLkVDUHJpdmF0ZUtleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjdXJ2ZTogZGF0YS5wYXJhbWV0ZXJzLnZhbHVlLFxuICAgICAgICBwcml2YXRlS2V5OiBkYXRhLnByaXZhdGVLZXlcbiAgICAgIH1cbiAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IHR5cGUgJyArIHR5cGUpXG4gIH1cbn1cbnBhcnNlS2V5cy5zaWduYXR1cmUgPSBhc24xLnNpZ25hdHVyZVxuZnVuY3Rpb24gZGVjcnlwdCAoZGF0YSwgcGFzc3dvcmQpIHtcbiAgdmFyIHNhbHQgPSBkYXRhLmFsZ29yaXRobS5kZWNyeXB0LmtkZS5rZGVwYXJhbXMuc2FsdFxuICB2YXIgaXRlcnMgPSBwYXJzZUludChkYXRhLmFsZ29yaXRobS5kZWNyeXB0LmtkZS5rZGVwYXJhbXMuaXRlcnMudG9TdHJpbmcoKSwgMTApXG4gIHZhciBhbGdvID0gYWVzaWRbZGF0YS5hbGdvcml0aG0uZGVjcnlwdC5jaXBoZXIuYWxnby5qb2luKCcuJyldXG4gIHZhciBpdiA9IGRhdGEuYWxnb3JpdGhtLmRlY3J5cHQuY2lwaGVyLml2XG4gIHZhciBjaXBoZXJUZXh0ID0gZGF0YS5zdWJqZWN0UHJpdmF0ZUtleVxuICB2YXIga2V5bGVuID0gcGFyc2VJbnQoYWxnby5zcGxpdCgnLScpWzFdLCAxMCkgLyA4XG4gIHZhciBrZXkgPSBjb21wYXQucGJrZGYyU3luYyhwYXNzd29yZCwgc2FsdCwgaXRlcnMsIGtleWxlbilcbiAgdmFyIGNpcGhlciA9IGNpcGhlcnMuY3JlYXRlRGVjaXBoZXJpdihhbGdvLCBrZXksIGl2KVxuICB2YXIgb3V0ID0gW11cbiAgb3V0LnB1c2goY2lwaGVyLnVwZGF0ZShjaXBoZXJUZXh0KSlcbiAgb3V0LnB1c2goY2lwaGVyLmZpbmFsKCkpXG4gIHJldHVybiBCdWZmZXIuY29uY2F0KG91dClcbn1cbiJdfQ==
},{"./aesid.json":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/aesid.json","./asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/asn1.js","./fixProc":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/fixProc.js","browserify-aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/browser.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","pbkdf2":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/pbkdf2/browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/fixProc.js":[function(require,module,exports){
(function (Buffer){
// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED\r?\nDEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\r?\n\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n/m
var startRegex = /^-----BEGIN (.*) KEY-----\r?\n/m
var fullRegex = /^-----BEGIN (.*) KEY-----\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n-----END \1 KEY-----$/m
var evp = require('evp_bytestokey')
var ciphers = require('browserify-aes')
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = new Buffer(match2[2].replace(/\r?\n/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = new Buffer(match[2], 'hex')
    var cipherText = new Buffer(match[3].replace(/\r?\n/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1] + ' KEY'
  return {
    tag: tag,
    data: decrypted
  }
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvZml4UHJvYy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8vIGFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYXBhdGlsL3BlbXN0cmlwXG52YXIgZmluZFByb2MgPSAvUHJvYy1UeXBlOiA0LEVOQ1JZUFRFRFxccj9cXG5ERUstSW5mbzogQUVTLSgoPzoxMjgpfCg/OjE5Mil8KD86MjU2KSktQ0JDLChbMC05QS1IXSspXFxyP1xcblxccj9cXG4oWzAtOUEtelxcblxcclxcK1xcL1xcPV0rKVxccj9cXG4vbVxudmFyIHN0YXJ0UmVnZXggPSAvXi0tLS0tQkVHSU4gKC4qKSBLRVktLS0tLVxccj9cXG4vbVxudmFyIGZ1bGxSZWdleCA9IC9eLS0tLS1CRUdJTiAoLiopIEtFWS0tLS0tXFxyP1xcbihbMC05QS16XFxuXFxyXFwrXFwvXFw9XSspXFxyP1xcbi0tLS0tRU5EIFxcMSBLRVktLS0tLSQvbVxudmFyIGV2cCA9IHJlcXVpcmUoJ2V2cF9ieXRlc3Rva2V5JylcbnZhciBjaXBoZXJzID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1hZXMnKVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2tleSwgcGFzc3dvcmQpIHtcbiAgdmFyIGtleSA9IG9rZXkudG9TdHJpbmcoKVxuICB2YXIgbWF0Y2ggPSBrZXkubWF0Y2goZmluZFByb2MpXG4gIHZhciBkZWNyeXB0ZWRcbiAgaWYgKCFtYXRjaCkge1xuICAgIHZhciBtYXRjaDIgPSBrZXkubWF0Y2goZnVsbFJlZ2V4KVxuICAgIGRlY3J5cHRlZCA9IG5ldyBCdWZmZXIobWF0Y2gyWzJdLnJlcGxhY2UoL1xccj9cXG4vZywgJycpLCAnYmFzZTY0JylcbiAgfSBlbHNlIHtcbiAgICB2YXIgc3VpdGUgPSAnYWVzJyArIG1hdGNoWzFdXG4gICAgdmFyIGl2ID0gbmV3IEJ1ZmZlcihtYXRjaFsyXSwgJ2hleCcpXG4gICAgdmFyIGNpcGhlclRleHQgPSBuZXcgQnVmZmVyKG1hdGNoWzNdLnJlcGxhY2UoL1xccj9cXG4vZywgJycpLCAnYmFzZTY0JylcbiAgICB2YXIgY2lwaGVyS2V5ID0gZXZwKHBhc3N3b3JkLCBpdi5zbGljZSgwLCA4KSwgcGFyc2VJbnQobWF0Y2hbMV0sIDEwKSkua2V5XG4gICAgdmFyIG91dCA9IFtdXG4gICAgdmFyIGNpcGhlciA9IGNpcGhlcnMuY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwgY2lwaGVyS2V5LCBpdilcbiAgICBvdXQucHVzaChjaXBoZXIudXBkYXRlKGNpcGhlclRleHQpKVxuICAgIG91dC5wdXNoKGNpcGhlci5maW5hbCgpKVxuICAgIGRlY3J5cHRlZCA9IEJ1ZmZlci5jb25jYXQob3V0KVxuICB9XG4gIHZhciB0YWcgPSBrZXkubWF0Y2goc3RhcnRSZWdleClbMV0gKyAnIEtFWSdcbiAgcmV0dXJuIHtcbiAgICB0YWc6IHRhZyxcbiAgICBkYXRhOiBkZWNyeXB0ZWRcbiAgfVxufVxuIl19
},{"browserify-aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/browser.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","evp_bytestokey":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/evp_bytestokey/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/browser.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/browser.js"][0].apply(exports,arguments)
},{"./decrypter":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/decrypter.js","./encrypter":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/encrypter.js","./modes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/encrypter.js":[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')
var modes = require('./modes')
var ebtk = require('evp_bytestokey')
var StreamCipher = require('./streamCipher')
var AuthCipher = require('./authCipher')
inherits(Cipher, Transform)
function Cipher (mode, key, iv) {
  if (!(this instanceof Cipher)) {
    return new Cipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  } else if (chunk.toString('hex') !== '10101010101010101010101010101010') {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}
Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
}

function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}
Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = new Buffer(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }
  var out = Buffer.concat([this.cache, padBuff])
  return out
}
var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
}

function createCipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv)
  }
  return new Cipher(modelist[config.mode], password, iv)
}
function createCipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2VuY3J5cHRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgbW9kZXMgPSByZXF1aXJlKCcuL21vZGVzJylcbnZhciBlYnRrID0gcmVxdWlyZSgnZXZwX2J5dGVzdG9rZXknKVxudmFyIFN0cmVhbUNpcGhlciA9IHJlcXVpcmUoJy4vc3RyZWFtQ2lwaGVyJylcbnZhciBBdXRoQ2lwaGVyID0gcmVxdWlyZSgnLi9hdXRoQ2lwaGVyJylcbmluaGVyaXRzKENpcGhlciwgVHJhbnNmb3JtKVxuZnVuY3Rpb24gQ2lwaGVyIChtb2RlLCBrZXksIGl2KSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBDaXBoZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBDaXBoZXIobW9kZSwga2V5LCBpdilcbiAgfVxuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuICB0aGlzLl9jYWNoZSA9IG5ldyBTcGxpdHRlcigpXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IG5ldyBCdWZmZXIoaXYubGVuZ3RoKVxuICBpdi5jb3B5KHRoaXMuX3ByZXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gdHJ1ZVxufVxuQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG4gIHdoaWxlICgoY2h1bmsgPSB0aGlzLl9jYWNoZS5nZXQoKSkpIHtcbiAgICB0aGluZyA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgICBvdXQucHVzaCh0aGluZylcbiAgfVxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChvdXQpXG59XG5DaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNodW5rID0gdGhpcy5fY2FjaGUuZmx1c2goKVxuICBpZiAodGhpcy5fYXV0b3BhZGRpbmcpIHtcbiAgICBjaHVuayA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgICB0aGlzLl9jaXBoZXIuc2NydWIoKVxuICAgIHJldHVybiBjaHVua1xuICB9IGVsc2UgaWYgKGNodW5rLnRvU3RyaW5nKCdoZXgnKSAhPT0gJzEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwJykge1xuICAgIHRoaXMuX2NpcGhlci5zY3J1YigpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdkYXRhIG5vdCBtdWx0aXBsZSBvZiBibG9jayBsZW5ndGgnKVxuICB9XG59XG5DaXBoZXIucHJvdG90eXBlLnNldEF1dG9QYWRkaW5nID0gZnVuY3Rpb24gKHNldFRvKSB7XG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gISFzZXRUb1xufVxuXG5mdW5jdGlvbiBTcGxpdHRlciAoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTcGxpdHRlcikpIHtcbiAgICByZXR1cm4gbmV3IFNwbGl0dGVyKClcbiAgfVxuICB0aGlzLmNhY2hlID0gbmV3IEJ1ZmZlcignJylcbn1cblNwbGl0dGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgZGF0YV0pXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+IDE1KSB7XG4gICAgdmFyIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgcmV0dXJuIG91dFxuICB9XG4gIHJldHVybiBudWxsXG59XG5TcGxpdHRlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsZW4gPSAxNiAtIHRoaXMuY2FjaGUubGVuZ3RoXG4gIHZhciBwYWRCdWZmID0gbmV3IEJ1ZmZlcihsZW4pXG5cbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgcGFkQnVmZi53cml0ZVVJbnQ4KGxlbiwgaSlcbiAgfVxuICB2YXIgb3V0ID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgcGFkQnVmZl0pXG4gIHJldHVybiBvdXRcbn1cbnZhciBtb2RlbGlzdCA9IHtcbiAgRUNCOiByZXF1aXJlKCcuL21vZGVzL2VjYicpLFxuICBDQkM6IHJlcXVpcmUoJy4vbW9kZXMvY2JjJyksXG4gIENGQjogcmVxdWlyZSgnLi9tb2Rlcy9jZmInKSxcbiAgQ0ZCODogcmVxdWlyZSgnLi9tb2Rlcy9jZmI4JyksXG4gIENGQjE6IHJlcXVpcmUoJy4vbW9kZXMvY2ZiMScpLFxuICBPRkI6IHJlcXVpcmUoJy4vbW9kZXMvb2ZiJyksXG4gIENUUjogcmVxdWlyZSgnLi9tb2Rlcy9jdHInKSxcbiAgR0NNOiByZXF1aXJlKCcuL21vZGVzL2N0cicpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlcml2IChzdWl0ZSwgcGFzc3dvcmQsIGl2KSB7XG4gIHZhciBjb25maWcgPSBtb2Rlc1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbiAgaWYgKHR5cGVvZiBpdiA9PT0gJ3N0cmluZycpIHtcbiAgICBpdiA9IG5ldyBCdWZmZXIoaXYpXG4gIH1cbiAgaWYgKHR5cGVvZiBwYXNzd29yZCA9PT0gJ3N0cmluZycpIHtcbiAgICBwYXNzd29yZCA9IG5ldyBCdWZmZXIocGFzc3dvcmQpXG4gIH1cbiAgaWYgKHBhc3N3b3JkLmxlbmd0aCAhPT0gY29uZmlnLmtleSAvIDgpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGtleSBsZW5ndGggJyArIHBhc3N3b3JkLmxlbmd0aClcbiAgfVxuICBpZiAoaXYubGVuZ3RoICE9PSBjb25maWcuaXYpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGl2IGxlbmd0aCAnICsgaXYubGVuZ3RoKVxuICB9XG4gIGlmIChjb25maWcudHlwZSA9PT0gJ3N0cmVhbScpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihtb2RlbGlzdFtjb25maWcubW9kZV0sIHBhc3N3b3JkLCBpdilcbiAgfSBlbHNlIGlmIChjb25maWcudHlwZSA9PT0gJ2F1dGgnKSB7XG4gICAgcmV0dXJuIG5ldyBBdXRoQ2lwaGVyKG1vZGVsaXN0W2NvbmZpZy5tb2RlXSwgcGFzc3dvcmQsIGl2KVxuICB9XG4gIHJldHVybiBuZXcgQ2lwaGVyKG1vZGVsaXN0W2NvbmZpZy5tb2RlXSwgcGFzc3dvcmQsIGl2KVxufVxuZnVuY3Rpb24gY3JlYXRlQ2lwaGVyIChzdWl0ZSwgcGFzc3dvcmQpIHtcbiAgdmFyIGNvbmZpZyA9IG1vZGVzW3N1aXRlLnRvTG93ZXJDYXNlKCldXG4gIGlmICghY29uZmlnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcbiAgfVxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBjb25maWcua2V5LCBjb25maWcuaXYpXG4gIHJldHVybiBjcmVhdGVDaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5cbmV4cG9ydHMuY3JlYXRlQ2lwaGVyaXYgPSBjcmVhdGVDaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVDaXBoZXIgPSBjcmVhdGVDaXBoZXJcbiJdfQ==
},{"./aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/aes.js","./authCipher":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/authCipher.js","./modes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes.js","./modes/cbc":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/cbc.js","./modes/cfb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb.js","./modes/cfb1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb1.js","./modes/cfb8":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb8.js","./modes/ctr":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/ctr.js","./modes/ecb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/ecb.js","./modes/ofb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/ofb.js","./streamCipher":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/streamCipher.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","cipher-base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/cipher-base/index.js","evp_bytestokey":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/evp_bytestokey/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/decrypter.js":[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')
var modes = require('./modes')
var StreamCipher = require('./streamCipher')
var AuthCipher = require('./authCipher')
var ebtk = require('evp_bytestokey')

inherits(Decipher, Transform)
function Decipher (mode, key, iv) {
  if (!(this instanceof Decipher)) {
    return new Decipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}
Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
}
function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }
  return null
}
Splitter.prototype.flush = function () {
  if (this.cache.length) {
    return this.cache
  }
}
function unpad (last) {
  var padded = last[15]
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) {
    return
  }
  return last.slice(0, 16 - padded)
}

var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
}

function createDecipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv, true)
  }
  return new Decipher(modelist[config.mode], password, iv)
}

function createDecipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}
exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2RlY3J5cHRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgbW9kZXMgPSByZXF1aXJlKCcuL21vZGVzJylcbnZhciBTdHJlYW1DaXBoZXIgPSByZXF1aXJlKCcuL3N0cmVhbUNpcGhlcicpXG52YXIgQXV0aENpcGhlciA9IHJlcXVpcmUoJy4vYXV0aENpcGhlcicpXG52YXIgZWJ0ayA9IHJlcXVpcmUoJ2V2cF9ieXRlc3Rva2V5JylcblxuaW5oZXJpdHMoRGVjaXBoZXIsIFRyYW5zZm9ybSlcbmZ1bmN0aW9uIERlY2lwaGVyIChtb2RlLCBrZXksIGl2KSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEZWNpcGhlcikpIHtcbiAgICByZXR1cm4gbmV3IERlY2lwaGVyKG1vZGUsIGtleSwgaXYpXG4gIH1cbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5fY2FjaGUgPSBuZXcgU3BsaXR0ZXIoKVxuICB0aGlzLl9sYXN0ID0gdm9pZCAwXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IG5ldyBCdWZmZXIoaXYubGVuZ3RoKVxuICBpdi5jb3B5KHRoaXMuX3ByZXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gdHJ1ZVxufVxuRGVjaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLl9jYWNoZS5hZGQoZGF0YSlcbiAgdmFyIGNodW5rXG4gIHZhciB0aGluZ1xuICB2YXIgb3V0ID0gW11cbiAgd2hpbGUgKChjaHVuayA9IHRoaXMuX2NhY2hlLmdldCh0aGlzLl9hdXRvcGFkZGluZykpKSB7XG4gICAgdGhpbmcgPSB0aGlzLl9tb2RlLmRlY3J5cHQodGhpcywgY2h1bmspXG4gICAgb3V0LnB1c2godGhpbmcpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQob3V0KVxufVxuRGVjaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNodW5rID0gdGhpcy5fY2FjaGUuZmx1c2goKVxuICBpZiAodGhpcy5fYXV0b3BhZGRpbmcpIHtcbiAgICByZXR1cm4gdW5wYWQodGhpcy5fbW9kZS5kZWNyeXB0KHRoaXMsIGNodW5rKSlcbiAgfSBlbHNlIGlmIChjaHVuaykge1xuICAgIHRocm93IG5ldyBFcnJvcignZGF0YSBub3QgbXVsdGlwbGUgb2YgYmxvY2sgbGVuZ3RoJylcbiAgfVxufVxuRGVjaXBoZXIucHJvdG90eXBlLnNldEF1dG9QYWRkaW5nID0gZnVuY3Rpb24gKHNldFRvKSB7XG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gISFzZXRUb1xufVxuZnVuY3Rpb24gU3BsaXR0ZXIgKCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU3BsaXR0ZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBTcGxpdHRlcigpXG4gIH1cbiAgdGhpcy5jYWNoZSA9IG5ldyBCdWZmZXIoJycpXG59XG5TcGxpdHRlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIGRhdGFdKVxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGF1dG9QYWRkaW5nKSB7XG4gIHZhciBvdXRcbiAgaWYgKGF1dG9QYWRkaW5nKSB7XG4gICAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoID4gMTYpIHtcbiAgICAgIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICAgIHJldHVybiBvdXRcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoID49IDE2KSB7XG4gICAgICBvdXQgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgICByZXR1cm4gb3V0XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsXG59XG5TcGxpdHRlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNhY2hlLmxlbmd0aCkge1xuICAgIHJldHVybiB0aGlzLmNhY2hlXG4gIH1cbn1cbmZ1bmN0aW9uIHVucGFkIChsYXN0KSB7XG4gIHZhciBwYWRkZWQgPSBsYXN0WzE1XVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBwYWRkZWQpIHtcbiAgICBpZiAobGFzdFsoaSArICgxNiAtIHBhZGRlZCkpXSAhPT0gcGFkZGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byBkZWNyeXB0IGRhdGEnKVxuICAgIH1cbiAgfVxuICBpZiAocGFkZGVkID09PSAxNikge1xuICAgIHJldHVyblxuICB9XG4gIHJldHVybiBsYXN0LnNsaWNlKDAsIDE2IC0gcGFkZGVkKVxufVxuXG52YXIgbW9kZWxpc3QgPSB7XG4gIEVDQjogcmVxdWlyZSgnLi9tb2Rlcy9lY2InKSxcbiAgQ0JDOiByZXF1aXJlKCcuL21vZGVzL2NiYycpLFxuICBDRkI6IHJlcXVpcmUoJy4vbW9kZXMvY2ZiJyksXG4gIENGQjg6IHJlcXVpcmUoJy4vbW9kZXMvY2ZiOCcpLFxuICBDRkIxOiByZXF1aXJlKCcuL21vZGVzL2NmYjEnKSxcbiAgT0ZCOiByZXF1aXJlKCcuL21vZGVzL29mYicpLFxuICBDVFI6IHJlcXVpcmUoJy4vbW9kZXMvY3RyJyksXG4gIEdDTTogcmVxdWlyZSgnLi9tb2Rlcy9jdHInKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWNpcGhlcml2IChzdWl0ZSwgcGFzc3dvcmQsIGl2KSB7XG4gIHZhciBjb25maWcgPSBtb2Rlc1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbiAgaWYgKHR5cGVvZiBpdiA9PT0gJ3N0cmluZycpIHtcbiAgICBpdiA9IG5ldyBCdWZmZXIoaXYpXG4gIH1cbiAgaWYgKHR5cGVvZiBwYXNzd29yZCA9PT0gJ3N0cmluZycpIHtcbiAgICBwYXNzd29yZCA9IG5ldyBCdWZmZXIocGFzc3dvcmQpXG4gIH1cbiAgaWYgKHBhc3N3b3JkLmxlbmd0aCAhPT0gY29uZmlnLmtleSAvIDgpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGtleSBsZW5ndGggJyArIHBhc3N3b3JkLmxlbmd0aClcbiAgfVxuICBpZiAoaXYubGVuZ3RoICE9PSBjb25maWcuaXYpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGl2IGxlbmd0aCAnICsgaXYubGVuZ3RoKVxuICB9XG4gIGlmIChjb25maWcudHlwZSA9PT0gJ3N0cmVhbScpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihtb2RlbGlzdFtjb25maWcubW9kZV0sIHBhc3N3b3JkLCBpdiwgdHJ1ZSlcbiAgfSBlbHNlIGlmIChjb25maWcudHlwZSA9PT0gJ2F1dGgnKSB7XG4gICAgcmV0dXJuIG5ldyBBdXRoQ2lwaGVyKG1vZGVsaXN0W2NvbmZpZy5tb2RlXSwgcGFzc3dvcmQsIGl2LCB0cnVlKVxuICB9XG4gIHJldHVybiBuZXcgRGVjaXBoZXIobW9kZWxpc3RbY29uZmlnLm1vZGVdLCBwYXNzd29yZCwgaXYpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURlY2lwaGVyIChzdWl0ZSwgcGFzc3dvcmQpIHtcbiAgdmFyIGNvbmZpZyA9IG1vZGVzW3N1aXRlLnRvTG93ZXJDYXNlKCldXG4gIGlmICghY29uZmlnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcbiAgfVxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBjb25maWcua2V5LCBjb25maWcuaXYpXG4gIHJldHVybiBjcmVhdGVEZWNpcGhlcml2KHN1aXRlLCBrZXlzLmtleSwga2V5cy5pdilcbn1cbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXIgPSBjcmVhdGVEZWNpcGhlclxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlcml2ID0gY3JlYXRlRGVjaXBoZXJpdlxuIl19
},{"./aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/aes.js","./authCipher":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/authCipher.js","./modes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes.js","./modes/cbc":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/cbc.js","./modes/cfb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb.js","./modes/cfb1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb1.js","./modes/cfb8":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb8.js","./modes/ctr":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/ctr.js","./modes/ecb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/ecb.js","./modes/ofb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/ofb.js","./streamCipher":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/streamCipher.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","cipher-base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/cipher-base/index.js","evp_bytestokey":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/evp_bytestokey/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/evp_bytestokey/index.js":[function(require,module,exports){
(function (Buffer){
var md5 = require('create-hash/md5')
module.exports = EVP_BytesToKey
function EVP_BytesToKey (password, salt, keyLen, ivLen) {
  if (!Buffer.isBuffer(password)) {
    password = new Buffer(password, 'binary')
  }
  if (salt && !Buffer.isBuffer(salt)) {
    salt = new Buffer(salt, 'binary')
  }
  keyLen = keyLen / 8
  ivLen = ivLen || 0
  var ki = 0
  var ii = 0
  var key = new Buffer(keyLen)
  var iv = new Buffer(ivLen)
  var addmd = 0
  var md_buf
  var i
  var bufs = []
  while (true) {
    if (addmd++ > 0) {
      bufs.push(md_buf)
    }
    bufs.push(password)
    if (salt) {
      bufs.push(salt)
    }
    md_buf = md5(Buffer.concat(bufs))
    bufs = []
    i = 0
    if (keyLen > 0) {
      while (true) {
        if (keyLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        key[ki++] = md_buf[i]
        keyLen--
        i++
      }
    }
    if (ivLen > 0 && i !== md_buf.length) {
      while (true) {
        if (ivLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        iv[ii++] = md_buf[i]
        ivLen--
        i++
      }
    }
    if (keyLen === 0 && ivLen === 0) {
      break
    }
  }
  for (i = 0; i < md_buf.length; i++) {
    md_buf[i] = 0
  }
  return {
    key: key,
    iv: iv
  }
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2V2cF9ieXRlc3Rva2V5L2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBtZDUgPSByZXF1aXJlKCdjcmVhdGUtaGFzaC9tZDUnKVxubW9kdWxlLmV4cG9ydHMgPSBFVlBfQnl0ZXNUb0tleVxuZnVuY3Rpb24gRVZQX0J5dGVzVG9LZXkgKHBhc3N3b3JkLCBzYWx0LCBrZXlMZW4sIGl2TGVuKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHBhc3N3b3JkKSkge1xuICAgIHBhc3N3b3JkID0gbmV3IEJ1ZmZlcihwYXNzd29yZCwgJ2JpbmFyeScpXG4gIH1cbiAgaWYgKHNhbHQgJiYgIUJ1ZmZlci5pc0J1ZmZlcihzYWx0KSkge1xuICAgIHNhbHQgPSBuZXcgQnVmZmVyKHNhbHQsICdiaW5hcnknKVxuICB9XG4gIGtleUxlbiA9IGtleUxlbiAvIDhcbiAgaXZMZW4gPSBpdkxlbiB8fCAwXG4gIHZhciBraSA9IDBcbiAgdmFyIGlpID0gMFxuICB2YXIga2V5ID0gbmV3IEJ1ZmZlcihrZXlMZW4pXG4gIHZhciBpdiA9IG5ldyBCdWZmZXIoaXZMZW4pXG4gIHZhciBhZGRtZCA9IDBcbiAgdmFyIG1kX2J1ZlxuICB2YXIgaVxuICB2YXIgYnVmcyA9IFtdXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgaWYgKGFkZG1kKysgPiAwKSB7XG4gICAgICBidWZzLnB1c2gobWRfYnVmKVxuICAgIH1cbiAgICBidWZzLnB1c2gocGFzc3dvcmQpXG4gICAgaWYgKHNhbHQpIHtcbiAgICAgIGJ1ZnMucHVzaChzYWx0KVxuICAgIH1cbiAgICBtZF9idWYgPSBtZDUoQnVmZmVyLmNvbmNhdChidWZzKSlcbiAgICBidWZzID0gW11cbiAgICBpID0gMFxuICAgIGlmIChrZXlMZW4gPiAwKSB7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBpZiAoa2V5TGVuID09PSAwKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaSA9PT0gbWRfYnVmLmxlbmd0aCkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAga2V5W2tpKytdID0gbWRfYnVmW2ldXG4gICAgICAgIGtleUxlbi0tXG4gICAgICAgIGkrK1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXZMZW4gPiAwICYmIGkgIT09IG1kX2J1Zi5sZW5ndGgpIHtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGlmIChpdkxlbiA9PT0gMCkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPT09IG1kX2J1Zi5sZW5ndGgpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGl2W2lpKytdID0gbWRfYnVmW2ldXG4gICAgICAgIGl2TGVuLS1cbiAgICAgICAgaSsrXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChrZXlMZW4gPT09IDAgJiYgaXZMZW4gPT09IDApIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIGZvciAoaSA9IDA7IGkgPCBtZF9idWYubGVuZ3RoOyBpKyspIHtcbiAgICBtZF9idWZbaV0gPSAwXG4gIH1cbiAgcmV0dXJuIHtcbiAgICBrZXk6IGtleSxcbiAgICBpdjogaXZcbiAgfVxufVxuIl19
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","create-hash/md5":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/md5.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/streamCipher.js":[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')

inherits(StreamCipher, Transform)
module.exports = StreamCipher
function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  iv.copy(this._prev)
  this._mode = mode
}
StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}
StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL3N0cmVhbUNpcGhlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmluaGVyaXRzKFN0cmVhbUNpcGhlciwgVHJhbnNmb3JtKVxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW1DaXBoZXJcbmZ1bmN0aW9uIFN0cmVhbUNpcGhlciAobW9kZSwga2V5LCBpdiwgZGVjcnlwdCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU3RyZWFtQ2lwaGVyKSkge1xuICAgIHJldHVybiBuZXcgU3RyZWFtQ2lwaGVyKG1vZGUsIGtleSwgaXYpXG4gIH1cbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KVxuICB0aGlzLl9wcmV2ID0gbmV3IEJ1ZmZlcihpdi5sZW5ndGgpXG4gIHRoaXMuX2NhY2hlID0gbmV3IEJ1ZmZlcignJylcbiAgdGhpcy5fc2VjQ2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxuICB0aGlzLl9kZWNyeXB0ID0gZGVjcnlwdFxuICBpdi5jb3B5KHRoaXMuX3ByZXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgcmV0dXJuIHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaywgdGhpcy5fZGVjcnlwdClcbn1cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9jaXBoZXIuc2NydWIoKVxufVxuIl19
},{"./aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/aes.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","cipher-base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/cipher-base/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/ofb.js":[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL29mYi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5mdW5jdGlvbiBnZXRCbG9jayAoc2VsZikge1xuICBzZWxmLl9wcmV2ID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICByZXR1cm4gc2VsZi5fcHJldlxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmspIHtcbiAgd2hpbGUgKHNlbGYuX2NhY2hlLmxlbmd0aCA8IGNodW5rLmxlbmd0aCkge1xuICAgIHNlbGYuX2NhY2hlID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fY2FjaGUsIGdldEJsb2NrKHNlbGYpXSlcbiAgfVxuXG4gIHZhciBwYWQgPSBzZWxmLl9jYWNoZS5zbGljZSgwLCBjaHVuay5sZW5ndGgpXG4gIHNlbGYuX2NhY2hlID0gc2VsZi5fY2FjaGUuc2xpY2UoY2h1bmsubGVuZ3RoKVxuICByZXR1cm4geG9yKGNodW5rLCBwYWQpXG59XG4iXX0=
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/buffer-xor/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/ecb.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/ecb.js"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/ctr.js":[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}

function getBlock (self) {
  var out = self._cipher.encryptBlock(self._prev)
  incr32(self._prev)
  return out
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2N0ci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5mdW5jdGlvbiBpbmNyMzIgKGl2KSB7XG4gIHZhciBsZW4gPSBpdi5sZW5ndGhcbiAgdmFyIGl0ZW1cbiAgd2hpbGUgKGxlbi0tKSB7XG4gICAgaXRlbSA9IGl2LnJlYWRVSW50OChsZW4pXG4gICAgaWYgKGl0ZW0gPT09IDI1NSkge1xuICAgICAgaXYud3JpdGVVSW50OCgwLCBsZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZW0rK1xuICAgICAgaXYud3JpdGVVSW50OChpdGVtLCBsZW4pXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRCbG9jayAoc2VsZikge1xuICB2YXIgb3V0ID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICBpbmNyMzIoc2VsZi5fcHJldilcbiAgcmV0dXJuIG91dFxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmspIHtcbiAgd2hpbGUgKHNlbGYuX2NhY2hlLmxlbmd0aCA8IGNodW5rLmxlbmd0aCkge1xuICAgIHNlbGYuX2NhY2hlID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fY2FjaGUsIGdldEJsb2NrKHNlbGYpXSlcbiAgfVxuICB2YXIgcGFkID0gc2VsZi5fY2FjaGUuc2xpY2UoMCwgY2h1bmsubGVuZ3RoKVxuICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGNodW5rLmxlbmd0aClcbiAgcmV0dXJuIHhvcihjaHVuaywgcGFkKVxufVxuIl19
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/buffer-xor/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb8.js":[function(require,module,exports){
(function (Buffer){
function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam
  self._prev = Buffer.concat([self._prev.slice(1), new Buffer([decrypt ? byteParam : out])])
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NmYjguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBlbmNyeXB0Qnl0ZSAoc2VsZiwgYnl0ZVBhcmFtLCBkZWNyeXB0KSB7XG4gIHZhciBwYWQgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gIHZhciBvdXQgPSBwYWRbMF0gXiBieXRlUGFyYW1cbiAgc2VsZi5fcHJldiA9IEJ1ZmZlci5jb25jYXQoW3NlbGYuX3ByZXYuc2xpY2UoMSksIG5ldyBCdWZmZXIoW2RlY3J5cHQgPyBieXRlUGFyYW0gOiBvdXRdKV0pXG4gIHJldHVybiBvdXRcbn1cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaywgZGVjcnlwdCkge1xuICB2YXIgbGVuID0gY2h1bmsubGVuZ3RoXG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKGxlbilcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0W2ldID0gZW5jcnlwdEJ5dGUoc2VsZiwgY2h1bmtbaV0sIGRlY3J5cHQpXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuIl19
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb1.js":[function(require,module,exports){
(function (Buffer){
function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}
function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = new Buffer(buffer.length)
  buffer = Buffer.concat([buffer, new Buffer([value])])
  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NmYjEuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGVuY3J5cHRCeXRlIChzZWxmLCBieXRlUGFyYW0sIGRlY3J5cHQpIHtcbiAgdmFyIHBhZFxuICB2YXIgaSA9IC0xXG4gIHZhciBsZW4gPSA4XG4gIHZhciBvdXQgPSAwXG4gIHZhciBiaXQsIHZhbHVlXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBwYWQgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gICAgYml0ID0gKGJ5dGVQYXJhbSAmICgxIDw8ICg3IC0gaSkpKSA/IDB4ODAgOiAwXG4gICAgdmFsdWUgPSBwYWRbMF0gXiBiaXRcbiAgICBvdXQgKz0gKCh2YWx1ZSAmIDB4ODApID4+IChpICUgOCkpXG4gICAgc2VsZi5fcHJldiA9IHNoaWZ0SW4oc2VsZi5fcHJldiwgZGVjcnlwdCA/IGJpdCA6IHZhbHVlKVxuICB9XG4gIHJldHVybiBvdXRcbn1cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaywgZGVjcnlwdCkge1xuICB2YXIgbGVuID0gY2h1bmsubGVuZ3RoXG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKGxlbilcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0W2ldID0gZW5jcnlwdEJ5dGUoc2VsZiwgY2h1bmtbaV0sIGRlY3J5cHQpXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuZnVuY3Rpb24gc2hpZnRJbiAoYnVmZmVyLCB2YWx1ZSkge1xuICB2YXIgbGVuID0gYnVmZmVyLmxlbmd0aFxuICB2YXIgaSA9IC0xXG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKGJ1ZmZlci5sZW5ndGgpXG4gIGJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoW2J1ZmZlciwgbmV3IEJ1ZmZlcihbdmFsdWVdKV0pXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBidWZmZXJbaV0gPDwgMSB8IGJ1ZmZlcltpICsgMV0gPj4gKDcpXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuIl19
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb.js":[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

exports.encrypt = function (self, data, decrypt) {
  var out = new Buffer('')
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = new Buffer('')
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}
function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NmYi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgZGF0YSwgZGVjcnlwdCkge1xuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcignJylcbiAgdmFyIGxlblxuXG4gIHdoaWxlIChkYXRhLmxlbmd0aCkge1xuICAgIGlmIChzZWxmLl9jYWNoZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHNlbGYuX2NhY2hlID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICAgICAgc2VsZi5fcHJldiA9IG5ldyBCdWZmZXIoJycpXG4gICAgfVxuXG4gICAgaWYgKHNlbGYuX2NhY2hlLmxlbmd0aCA8PSBkYXRhLmxlbmd0aCkge1xuICAgICAgbGVuID0gc2VsZi5fY2FjaGUubGVuZ3RoXG4gICAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFtvdXQsIGVuY3J5cHRTdGFydChzZWxmLCBkYXRhLnNsaWNlKDAsIGxlbiksIGRlY3J5cHQpXSlcbiAgICAgIGRhdGEgPSBkYXRhLnNsaWNlKGxlbilcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ID0gQnVmZmVyLmNvbmNhdChbb3V0LCBlbmNyeXB0U3RhcnQoc2VsZiwgZGF0YSwgZGVjcnlwdCldKVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3V0XG59XG5mdW5jdGlvbiBlbmNyeXB0U3RhcnQgKHNlbGYsIGRhdGEsIGRlY3J5cHQpIHtcbiAgdmFyIGxlbiA9IGRhdGEubGVuZ3RoXG4gIHZhciBvdXQgPSB4b3IoZGF0YSwgc2VsZi5fY2FjaGUpXG4gIHNlbGYuX2NhY2hlID0gc2VsZi5fY2FjaGUuc2xpY2UobGVuKVxuICBzZWxmLl9wcmV2ID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fcHJldiwgZGVjcnlwdCA/IGRhdGEgOiBvdXRdKVxuICByZXR1cm4gb3V0XG59XG4iXX0=
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/buffer-xor/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/cbc.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/cbc.js"][0].apply(exports,arguments)
},{"buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/buffer-xor/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes.js"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/authCipher.js":[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')
var GHASH = require('./ghash')
var xor = require('buffer-xor')
inherits(StreamCipher, Transform)
module.exports = StreamCipher

function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._finID = Buffer.concat([iv, new Buffer([0, 0, 0, 1])])
  iv = Buffer.concat([iv, new Buffer([0, 0, 0, 2])])
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  iv.copy(this._prev)
  this._mode = mode
  var h = new Buffer(4)
  h.fill(0)
  this._ghash = new GHASH(this._cipher.encryptBlock(h))
  this._authTag = null
  this._called = false
}
StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = new Buffer(rump)
      rump.fill(0)
      this._ghash.update(rump)
    }
  }
  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}
StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) {
    throw new Error('Unsupported state or unable to authenticate data')
  }
  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt) {
    if (xorTest(tag, this._authTag)) {
      throw new Error('Unsupported state or unable to authenticate data')
    }
  } else {
    this._authTag = tag
  }
  this._cipher.scrub()
}
StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (!this._decrypt && Buffer.isBuffer(this._authTag)) {
    return this._authTag
  } else {
    throw new Error('Attempting to get auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (this._decrypt) {
    this._authTag = tag
  } else {
    throw new Error('Attempting to set auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (!this._called) {
    this._ghash.update(buf)
    this._alen += buf.length
  } else {
    throw new Error('Attempting to set AAD in unsupported state')
  }
}
function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) {
    out++
  }
  var len = Math.min(a.length, b.length)
  var i = -1
  while (++i < len) {
    out += (a[i] ^ b[i])
  }
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2F1dGhDaXBoZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEdIQVNIID0gcmVxdWlyZSgnLi9naGFzaCcpXG52YXIgeG9yID0gcmVxdWlyZSgnYnVmZmVyLXhvcicpXG5pbmhlcml0cyhTdHJlYW1DaXBoZXIsIFRyYW5zZm9ybSlcbm1vZHVsZS5leHBvcnRzID0gU3RyZWFtQ2lwaGVyXG5cbmZ1bmN0aW9uIFN0cmVhbUNpcGhlciAobW9kZSwga2V5LCBpdiwgZGVjcnlwdCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU3RyZWFtQ2lwaGVyKSkge1xuICAgIHJldHVybiBuZXcgU3RyZWFtQ2lwaGVyKG1vZGUsIGtleSwgaXYpXG4gIH1cbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5fZmluSUQgPSBCdWZmZXIuY29uY2F0KFtpdiwgbmV3IEJ1ZmZlcihbMCwgMCwgMCwgMV0pXSlcbiAgaXYgPSBCdWZmZXIuY29uY2F0KFtpdiwgbmV3IEJ1ZmZlcihbMCwgMCwgMCwgMl0pXSlcbiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KVxuICB0aGlzLl9wcmV2ID0gbmV3IEJ1ZmZlcihpdi5sZW5ndGgpXG4gIHRoaXMuX2NhY2hlID0gbmV3IEJ1ZmZlcignJylcbiAgdGhpcy5fc2VjQ2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxuICB0aGlzLl9kZWNyeXB0ID0gZGVjcnlwdFxuICB0aGlzLl9hbGVuID0gMFxuICB0aGlzLl9sZW4gPSAwXG4gIGl2LmNvcHkodGhpcy5fcHJldilcbiAgdGhpcy5fbW9kZSA9IG1vZGVcbiAgdmFyIGggPSBuZXcgQnVmZmVyKDQpXG4gIGguZmlsbCgwKVxuICB0aGlzLl9naGFzaCA9IG5ldyBHSEFTSCh0aGlzLl9jaXBoZXIuZW5jcnlwdEJsb2NrKGgpKVxuICB0aGlzLl9hdXRoVGFnID0gbnVsbFxuICB0aGlzLl9jYWxsZWQgPSBmYWxzZVxufVxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIGlmICghdGhpcy5fY2FsbGVkICYmIHRoaXMuX2FsZW4pIHtcbiAgICB2YXIgcnVtcCA9IDE2IC0gKHRoaXMuX2FsZW4gJSAxNilcbiAgICBpZiAocnVtcCA8IDE2KSB7XG4gICAgICBydW1wID0gbmV3IEJ1ZmZlcihydW1wKVxuICAgICAgcnVtcC5maWxsKDApXG4gICAgICB0aGlzLl9naGFzaC51cGRhdGUocnVtcClcbiAgICB9XG4gIH1cbiAgdGhpcy5fY2FsbGVkID0gdHJ1ZVxuICB2YXIgb3V0ID0gdGhpcy5fbW9kZS5lbmNyeXB0KHRoaXMsIGNodW5rKVxuICBpZiAodGhpcy5fZGVjcnlwdCkge1xuICAgIHRoaXMuX2doYXNoLnVwZGF0ZShjaHVuaylcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9naGFzaC51cGRhdGUob3V0KVxuICB9XG4gIHRoaXMuX2xlbiArPSBjaHVuay5sZW5ndGhcbiAgcmV0dXJuIG91dFxufVxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLl9kZWNyeXB0ICYmICF0aGlzLl9hdXRoVGFnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBzdGF0ZSBvciB1bmFibGUgdG8gYXV0aGVudGljYXRlIGRhdGEnKVxuICB9XG4gIHZhciB0YWcgPSB4b3IodGhpcy5fZ2hhc2guZmluYWwodGhpcy5fYWxlbiAqIDgsIHRoaXMuX2xlbiAqIDgpLCB0aGlzLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHRoaXMuX2ZpbklEKSlcbiAgaWYgKHRoaXMuX2RlY3J5cHQpIHtcbiAgICBpZiAoeG9yVGVzdCh0YWcsIHRoaXMuX2F1dGhUYWcpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHN0YXRlIG9yIHVuYWJsZSB0byBhdXRoZW50aWNhdGUgZGF0YScpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMuX2F1dGhUYWcgPSB0YWdcbiAgfVxuICB0aGlzLl9jaXBoZXIuc2NydWIoKVxufVxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5nZXRBdXRoVGFnID0gZnVuY3Rpb24gZ2V0QXV0aFRhZyAoKSB7XG4gIGlmICghdGhpcy5fZGVjcnlwdCAmJiBCdWZmZXIuaXNCdWZmZXIodGhpcy5fYXV0aFRhZykpIHtcbiAgICByZXR1cm4gdGhpcy5fYXV0aFRhZ1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGluZyB0byBnZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxuICB9XG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLnNldEF1dGhUYWcgPSBmdW5jdGlvbiBzZXRBdXRoVGFnICh0YWcpIHtcbiAgaWYgKHRoaXMuX2RlY3J5cHQpIHtcbiAgICB0aGlzLl9hdXRoVGFnID0gdGFnXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0aW5nIHRvIHNldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG4gIH1cbn1cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuc2V0QUFEID0gZnVuY3Rpb24gc2V0QUFEIChidWYpIHtcbiAgaWYgKCF0aGlzLl9jYWxsZWQpIHtcbiAgICB0aGlzLl9naGFzaC51cGRhdGUoYnVmKVxuICAgIHRoaXMuX2FsZW4gKz0gYnVmLmxlbmd0aFxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGluZyB0byBzZXQgQUFEIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbiAgfVxufVxuZnVuY3Rpb24geG9yVGVzdCAoYSwgYikge1xuICB2YXIgb3V0ID0gMFxuICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgb3V0KytcbiAgfVxuICB2YXIgbGVuID0gTWF0aC5taW4oYS5sZW5ndGgsIGIubGVuZ3RoKVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXQgKz0gKGFbaV0gXiBiW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cbiJdfQ==
},{"./aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/aes.js","./ghash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/ghash.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/buffer-xor/index.js","cipher-base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/cipher-base/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/cipher-base/index.js":[function(require,module,exports){
(function (Buffer){
var Transform = require('stream').Transform
var inherits = require('inherits')
var StringDecoder = require('string_decoder').StringDecoder
module.exports = CipherBase
inherits(CipherBase, Transform)
function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  this._decoder = null
  this._encoding = null
}
CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = new Buffer(data, inputEnc)
  }
  var outData = this._update(data)
  if (this.hashMode) {
    return this
  }
  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }
  return outData
}

CipherBase.prototype.setAutoPadding = function () {}

CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this._final())
  } catch (e) {
    err = e
  } finally {
    done(err)
  }
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this._final() || new Buffer('')
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, final) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }
  if (this._encoding !== enc) {
    throw new Error('can\'t switch encodings')
  }
  var out = this._decoder.write(value)
  if (final) {
    out += this._decoder.end()
  }
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL25vZGVfbW9kdWxlcy9jaXBoZXItYmFzZS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdzdHJlYW0nKS5UcmFuc2Zvcm1cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXInKS5TdHJpbmdEZWNvZGVyXG5tb2R1bGUuZXhwb3J0cyA9IENpcGhlckJhc2VcbmluaGVyaXRzKENpcGhlckJhc2UsIFRyYW5zZm9ybSlcbmZ1bmN0aW9uIENpcGhlckJhc2UgKGhhc2hNb2RlKSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuaGFzaE1vZGUgPSB0eXBlb2YgaGFzaE1vZGUgPT09ICdzdHJpbmcnXG4gIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgdGhpc1toYXNoTW9kZV0gPSB0aGlzLl9maW5hbE9yRGlnZXN0XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5maW5hbCA9IHRoaXMuX2ZpbmFsT3JEaWdlc3RcbiAgfVxuICB0aGlzLl9kZWNvZGVyID0gbnVsbFxuICB0aGlzLl9lbmNvZGluZyA9IG51bGxcbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBpbnB1dEVuYywgb3V0cHV0RW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBkYXRhID0gbmV3IEJ1ZmZlcihkYXRhLCBpbnB1dEVuYylcbiAgfVxuICB2YXIgb3V0RGF0YSA9IHRoaXMuX3VwZGF0ZShkYXRhKVxuICBpZiAodGhpcy5oYXNoTW9kZSkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cbiAgaWYgKG91dHB1dEVuYykge1xuICAgIG91dERhdGEgPSB0aGlzLl90b1N0cmluZyhvdXREYXRhLCBvdXRwdXRFbmMpXG4gIH1cbiAgcmV0dXJuIG91dERhdGFcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QXV0b1BhZGRpbmcgPSBmdW5jdGlvbiAoKSB7fVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5nZXRBdXRoVGFnID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBnZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBdXRoVGFnID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBzZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBQUQgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhYWQgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGRhdGEsIF8sIG5leHQpIHtcbiAgdmFyIGVyclxuICB0cnkge1xuICAgIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgICB0aGlzLl91cGRhdGUoZGF0YSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXNoKHRoaXMuX3VwZGF0ZShkYXRhKSlcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnIgPSBlXG4gIH0gZmluYWxseSB7XG4gICAgbmV4dChlcnIpXG4gIH1cbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLl9mbHVzaCA9IGZ1bmN0aW9uIChkb25lKSB7XG4gIHZhciBlcnJcbiAgdHJ5IHtcbiAgICB0aGlzLnB1c2godGhpcy5fZmluYWwoKSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfSBmaW5hbGx5IHtcbiAgICBkb25lKGVycilcbiAgfVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZpbmFsT3JEaWdlc3QgPSBmdW5jdGlvbiAob3V0cHV0RW5jKSB7XG4gIHZhciBvdXREYXRhID0gdGhpcy5fZmluYWwoKSB8fCBuZXcgQnVmZmVyKCcnKVxuICBpZiAob3V0cHV0RW5jKSB7XG4gICAgb3V0RGF0YSA9IHRoaXMuX3RvU3RyaW5nKG91dERhdGEsIG91dHB1dEVuYywgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb3V0RGF0YVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fdG9TdHJpbmcgPSBmdW5jdGlvbiAodmFsdWUsIGVuYywgZmluYWwpIHtcbiAgaWYgKCF0aGlzLl9kZWNvZGVyKSB7XG4gICAgdGhpcy5fZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYylcbiAgICB0aGlzLl9lbmNvZGluZyA9IGVuY1xuICB9XG4gIGlmICh0aGlzLl9lbmNvZGluZyAhPT0gZW5jKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYW5cXCd0IHN3aXRjaCBlbmNvZGluZ3MnKVxuICB9XG4gIHZhciBvdXQgPSB0aGlzLl9kZWNvZGVyLndyaXRlKHZhbHVlKVxuICBpZiAoZmluYWwpIHtcbiAgICBvdXQgKz0gdGhpcy5fZGVjb2Rlci5lbmQoKVxuICB9XG4gIHJldHVybiBvdXRcbn1cbiJdfQ==
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js","stream":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/stream-browserify/index.js","string_decoder":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/string_decoder/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/buffer-xor/index.js":[function(require,module,exports){
(function (Buffer){
module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL25vZGVfbW9kdWxlcy9idWZmZXIteG9yL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhvciAoYSwgYikge1xuICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oYS5sZW5ndGgsIGIubGVuZ3RoKVxuICB2YXIgYnVmZmVyID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGJ1ZmZlcltpXSA9IGFbaV0gXiBiW2ldXG4gIH1cblxuICByZXR1cm4gYnVmZmVyXG59XG4iXX0=
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/ghash.js":[function(require,module,exports){
(function (Buffer){
var zeros = new Buffer(16)
zeros.fill(0)
module.exports = GHASH
function GHASH (key) {
  this.h = key
  this.state = new Buffer(16)
  this.state.fill(0)
  this.cache = new Buffer('')
}
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsb_Vi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - i % 8))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi = xor(Zi, Vi)
    }

    // Store the value of LSB(V_i)
    lsb_Vi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsb_Vi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}
GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}
GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, zeros], 16))
  }
  this.ghash(fromArray([
    0, abl,
    0, bl
  ]))
  return this.state
}

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}
function fromArray (out) {
  out = out.map(fixup_uint32)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}
var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function xor (a, b) {
  return [
    a[0] ^ b[0],
    a[1] ^ b[1],
    a[2] ^ b[2],
    a[3] ^ b[3]
  ]
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2doYXNoLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciB6ZXJvcyA9IG5ldyBCdWZmZXIoMTYpXG56ZXJvcy5maWxsKDApXG5tb2R1bGUuZXhwb3J0cyA9IEdIQVNIXG5mdW5jdGlvbiBHSEFTSCAoa2V5KSB7XG4gIHRoaXMuaCA9IGtleVxuICB0aGlzLnN0YXRlID0gbmV3IEJ1ZmZlcigxNilcbiAgdGhpcy5zdGF0ZS5maWxsKDApXG4gIHRoaXMuY2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxufVxuLy8gZnJvbSBodHRwOi8vYml0d2lzZXNoaWZ0bGVmdC5naXRodWIuaW8vc2pjbC9kb2Mvc3ltYm9scy9zcmMvY29yZV9nY20uanMuaHRtbFxuLy8gYnkgSnVobyBWw6Row6QtSGVydHR1YVxuR0hBU0gucHJvdG90eXBlLmdoYXNoID0gZnVuY3Rpb24gKGJsb2NrKSB7XG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGJsb2NrLmxlbmd0aCkge1xuICAgIHRoaXMuc3RhdGVbaV0gXj0gYmxvY2tbaV1cbiAgfVxuICB0aGlzLl9tdWx0aXBseSgpXG59XG5cbkdIQVNILnByb3RvdHlwZS5fbXVsdGlwbHkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBWaSA9IHRvQXJyYXkodGhpcy5oKVxuICB2YXIgWmkgPSBbMCwgMCwgMCwgMF1cbiAgdmFyIGosIHhpLCBsc2JfVmlcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgMTI4KSB7XG4gICAgeGkgPSAodGhpcy5zdGF0ZVt+fihpIC8gOCldICYgKDEgPDwgKDcgLSBpICUgOCkpKSAhPT0gMFxuICAgIGlmICh4aSkge1xuICAgICAgLy8gWl9pKzEgPSBaX2kgXiBWX2lcbiAgICAgIFppID0geG9yKFppLCBWaSlcbiAgICB9XG5cbiAgICAvLyBTdG9yZSB0aGUgdmFsdWUgb2YgTFNCKFZfaSlcbiAgICBsc2JfVmkgPSAoVmlbM10gJiAxKSAhPT0gMFxuXG4gICAgLy8gVl9pKzEgPSBWX2kgPj4gMVxuICAgIGZvciAoaiA9IDM7IGogPiAwOyBqLS0pIHtcbiAgICAgIFZpW2pdID0gKFZpW2pdID4+PiAxKSB8ICgoVmlbaiAtIDFdICYgMSkgPDwgMzEpXG4gICAgfVxuICAgIFZpWzBdID0gVmlbMF0gPj4+IDFcblxuICAgIC8vIElmIExTQihWX2kpIGlzIDEsIFZfaSsxID0gKFZfaSA+PiAxKSBeIFJcbiAgICBpZiAobHNiX1ZpKSB7XG4gICAgICBWaVswXSA9IFZpWzBdIF4gKDB4ZTEgPDwgMjQpXG4gICAgfVxuICB9XG4gIHRoaXMuc3RhdGUgPSBmcm9tQXJyYXkoWmkpXG59XG5HSEFTSC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGJ1Zikge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgYnVmXSlcbiAgdmFyIGNodW5rXG4gIHdoaWxlICh0aGlzLmNhY2hlLmxlbmd0aCA+PSAxNikge1xuICAgIGNodW5rID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNilcbiAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICB0aGlzLmdoYXNoKGNodW5rKVxuICB9XG59XG5HSEFTSC5wcm90b3R5cGUuZmluYWwgPSBmdW5jdGlvbiAoYWJsLCBibCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGgpIHtcbiAgICB0aGlzLmdoYXNoKEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIHplcm9zXSwgMTYpKVxuICB9XG4gIHRoaXMuZ2hhc2goZnJvbUFycmF5KFtcbiAgICAwLCBhYmwsXG4gICAgMCwgYmxcbiAgXSkpXG4gIHJldHVybiB0aGlzLnN0YXRlXG59XG5cbmZ1bmN0aW9uIHRvQXJyYXkgKGJ1Zikge1xuICByZXR1cm4gW1xuICAgIGJ1Zi5yZWFkVUludDMyQkUoMCksXG4gICAgYnVmLnJlYWRVSW50MzJCRSg0KSxcbiAgICBidWYucmVhZFVJbnQzMkJFKDgpLFxuICAgIGJ1Zi5yZWFkVUludDMyQkUoMTIpXG4gIF1cbn1cbmZ1bmN0aW9uIGZyb21BcnJheSAob3V0KSB7XG4gIG91dCA9IG91dC5tYXAoZml4dXBfdWludDMyKVxuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcigxNilcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzBdLCAwKVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMV0sIDQpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsyXSwgOClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzNdLCAxMilcbiAgcmV0dXJuIGJ1ZlxufVxudmFyIHVpbnRfbWF4ID0gTWF0aC5wb3coMiwgMzIpXG5mdW5jdGlvbiBmaXh1cF91aW50MzIgKHgpIHtcbiAgdmFyIHJldCwgeF9wb3NcbiAgcmV0ID0geCA+IHVpbnRfbWF4IHx8IHggPCAwID8gKHhfcG9zID0gTWF0aC5hYnMoeCkgJSB1aW50X21heCwgeCA8IDAgPyB1aW50X21heCAtIHhfcG9zIDogeF9wb3MpIDogeFxuICByZXR1cm4gcmV0XG59XG5mdW5jdGlvbiB4b3IgKGEsIGIpIHtcbiAgcmV0dXJuIFtcbiAgICBhWzBdIF4gYlswXSxcbiAgICBhWzFdIF4gYlsxXSxcbiAgICBhWzJdIF4gYlsyXSxcbiAgICBhWzNdIF4gYlszXVxuICBdXG59XG4iXX0=
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/aes.js":[function(require,module,exports){
(function (Buffer){
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec

// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function scrub_vec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
  return false
}

function Global () {
  this.SBOX = []
  this.INV_SBOX = []
  this.SUB_MIX = [[], [], [], []]
  this.INV_SUB_MIX = [[], [], [], []]
  this.init()
  this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
}

Global.prototype.init = function () {
  var d, i, sx, t, x, x2, x4, x8, xi, _i
  d = (function () {
    var _i, _results
    _results = []
    for (i = _i = 0; _i < 256; i = ++_i) {
      if (i < 128) {
        _results.push(i << 1)
      } else {
        _results.push((i << 1) ^ 0x11b)
      }
    }
    return _results
  })()
  x = 0
  xi = 0
  for (i = _i = 0; _i < 256; i = ++_i) {
    sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    this.SBOX[x] = sx
    this.INV_SBOX[sx] = x
    x2 = d[x]
    x4 = d[x2]
    x8 = d[x4]
    t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    this.SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    this.SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    this.SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    this.SUB_MIX[3][x] = t
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    this.INV_SUB_MIX[3][sx] = t
    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }
  return true
}

var G = new Global()

AES.blockSize = 4 * 4

AES.prototype.blockSize = AES.blockSize

AES.keySize = 256 / 8

AES.prototype.keySize = AES.keySize

function bufferToArray (buf) {
  var len = buf.length / 4
  var out = new Array(len)
  var i = -1
  while (++i < len) {
    out[i] = buf.readUInt32BE(i * 4)
  }
  return out
}
function AES (key) {
  this._key = bufferToArray(key)
  this._doReset()
}

AES.prototype._doReset = function () {
  var invKsRow, keySize, keyWords, ksRow, ksRows, t
  keyWords = this._key
  keySize = keyWords.length
  this._nRounds = keySize + 6
  ksRows = (this._nRounds + 1) * 4
  this._keySchedule = []
  for (ksRow = 0; ksRow < ksRows; ksRow++) {
    this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t)
  }
  this._invKeySchedule = []
  for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {
    ksRow = ksRows - invKsRow
    t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)]
    this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]]
  }
  return true
}

AES.prototype.encryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var temp = [M[3], M[1]]
  M[1] = temp[0]
  M[3] = temp[1]
  var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrub_vec(this._keySchedule)
  scrub_vec(this._invKeySchedule)
  scrub_vec(this._key)
}

AES.prototype._doCryptBlock = function (M, keySchedule, SUB_MIX, SBOX) {
  var ksRow, s0, s1, s2, s3, t0, t1, t2, t3

  s0 = M[0] ^ keySchedule[0]
  s1 = M[1] ^ keySchedule[1]
  s2 = M[2] ^ keySchedule[2]
  s3 = M[3] ^ keySchedule[3]
  ksRow = 4
  for (var round = 1; round < this._nRounds; round++) {
    t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }
  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  return [
    fixup_uint32(t0),
    fixup_uint32(t1),
    fixup_uint32(t2),
    fixup_uint32(t3)
  ]
}

exports.AES = AES

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/asn1.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/asn1.js"][0].apply(exports,arguments)
},{"asn1.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js"][0].apply(exports,arguments)
},{"./asn1/api":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/api.js","./asn1/base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/index.js","./asn1/constants":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/constants/index.js","./asn1/decoders":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/index.js","./asn1/encoders":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/index.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/bn.js/lib/bn.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/index.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/index.js"][0].apply(exports,arguments)
},{"./der":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/der.js","./pem":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/pem.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/pem.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/pem.js"][0].apply(exports,arguments)
},{"../../asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js","./der":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/der.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/der.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/der.js"][0].apply(exports,arguments)
},{"../../asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/index.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/index.js"][0].apply(exports,arguments)
},{"./der":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/der.js","./pem":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/pem.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/pem.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/pem.js"][0].apply(exports,arguments)
},{"../../asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js","./der":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/der.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/der.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/der.js"][0].apply(exports,arguments)
},{"../../asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/constants/index.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/constants/index.js"][0].apply(exports,arguments)
},{"./der":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/constants/der.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/constants/der.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/constants/der.js"][0].apply(exports,arguments)
},{"../constants":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/constants/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/index.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/index.js"][0].apply(exports,arguments)
},{"./buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/buffer.js","./node":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/node.js","./reporter":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/reporter.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/reporter.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/reporter.js"][0].apply(exports,arguments)
},{"inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/node.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/node.js"][0].apply(exports,arguments)
},{"../base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/index.js","minimalistic-assert":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/node_modules/minimalistic-assert/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/node_modules/minimalistic-assert/index.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/node_modules/minimalistic-assert/index.js"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/buffer.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/buffer.js"][0].apply(exports,arguments)
},{"../base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/index.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/api.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/api.js"][0].apply(exports,arguments)
},{"../asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js","vm":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/vm-browserify/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/aesid.json":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/aesid.json"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/browserify-rsa/index.js":[function(require,module,exports){
(function (Buffer){
var bn = require('bn.js');
var randomBytes = require('randombytes');
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).mod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).mod(p);
  h.imul(q);
  m2.iadd(h);
  var out = new Buffer(m2.imul(blinds.unblinder).mod(priv.modulus).toArray());
  if (out.length < len) {
    var prefix = new Buffer(len - out.length);
    prefix.fill(0);
    out = Buffer.concat([prefix, out], len);
  }
  return out;
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.mod(priv.prime1) || !r.mod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}
}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktcnNhL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGJuID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciByYW5kb21CeXRlcyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGNydDtcbmZ1bmN0aW9uIGJsaW5kKHByaXYpIHtcbiAgdmFyIHIgPSBnZXRyKHByaXYpO1xuICB2YXIgYmxpbmRlciA9IHIudG9SZWQoYm4ubW9udChwcml2Lm1vZHVsdXMpKVxuICAucmVkUG93KG5ldyBibihwcml2LnB1YmxpY0V4cG9uZW50KSkuZnJvbVJlZCgpO1xuICByZXR1cm4ge1xuICAgIGJsaW5kZXI6IGJsaW5kZXIsXG4gICAgdW5ibGluZGVyOnIuaW52bShwcml2Lm1vZHVsdXMpXG4gIH07XG59XG5mdW5jdGlvbiBjcnQobXNnLCBwcml2KSB7XG4gIHZhciBibGluZHMgPSBibGluZChwcml2KTtcbiAgdmFyIGxlbiA9IHByaXYubW9kdWx1cy5ieXRlTGVuZ3RoKCk7XG4gIHZhciBtb2QgPSBibi5tb250KHByaXYubW9kdWx1cyk7XG4gIHZhciBibGluZGVkID0gbmV3IGJuKG1zZykubXVsKGJsaW5kcy5ibGluZGVyKS5tb2QocHJpdi5tb2R1bHVzKTtcbiAgdmFyIGMxID0gYmxpbmRlZC50b1JlZChibi5tb250KHByaXYucHJpbWUxKSk7XG4gIHZhciBjMiA9IGJsaW5kZWQudG9SZWQoYm4ubW9udChwcml2LnByaW1lMikpO1xuICB2YXIgcWludiA9IHByaXYuY29lZmZpY2llbnQ7XG4gIHZhciBwID0gcHJpdi5wcmltZTE7XG4gIHZhciBxID0gcHJpdi5wcmltZTI7XG4gIHZhciBtMSA9IGMxLnJlZFBvdyhwcml2LmV4cG9uZW50MSk7XG4gIHZhciBtMiA9IGMyLnJlZFBvdyhwcml2LmV4cG9uZW50Mik7XG4gIG0xID0gbTEuZnJvbVJlZCgpO1xuICBtMiA9IG0yLmZyb21SZWQoKTtcbiAgdmFyIGggPSBtMS5pc3ViKG0yKS5pbXVsKHFpbnYpLm1vZChwKTtcbiAgaC5pbXVsKHEpO1xuICBtMi5pYWRkKGgpO1xuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcihtMi5pbXVsKGJsaW5kcy51bmJsaW5kZXIpLm1vZChwcml2Lm1vZHVsdXMpLnRvQXJyYXkoKSk7XG4gIGlmIChvdXQubGVuZ3RoIDwgbGVuKSB7XG4gICAgdmFyIHByZWZpeCA9IG5ldyBCdWZmZXIobGVuIC0gb3V0Lmxlbmd0aCk7XG4gICAgcHJlZml4LmZpbGwoMCk7XG4gICAgb3V0ID0gQnVmZmVyLmNvbmNhdChbcHJlZml4LCBvdXRdLCBsZW4pO1xuICB9XG4gIHJldHVybiBvdXQ7XG59XG5jcnQuZ2V0ciA9IGdldHI7XG5mdW5jdGlvbiBnZXRyKHByaXYpIHtcbiAgdmFyIGxlbiA9IHByaXYubW9kdWx1cy5ieXRlTGVuZ3RoKCk7XG4gIHZhciByID0gbmV3IGJuKHJhbmRvbUJ5dGVzKGxlbikpO1xuICB3aGlsZSAoci5jbXAocHJpdi5tb2R1bHVzKSA+PSAgMCB8fCAhci5tb2QocHJpdi5wcmltZTEpIHx8ICFyLm1vZChwcml2LnByaW1lMikpIHtcbiAgICByID0gbmV3IGJuKHJhbmRvbUJ5dGVzKGxlbikpO1xuICB9XG4gIHJldHVybiByO1xufSJdfQ==
},{"bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/bn.js/lib/bn.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","randombytes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/randombytes/browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/bn.js/lib/bn.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/bn.js/lib/bn.js"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/mgf.js":[function(require,module,exports){
(function (Buffer){
var createHash = require('create-hash');
module.exports = function (seed, len) {
  var t = new Buffer('');
  var  i = 0, c;
  while (t.length < len) {
    c = i2ops(i++);
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);
  }
  return t.slice(0, len);
};

function i2ops(c) {
  var out = new Buffer(4);
  out.writeUInt32BE(c,0);
  return out;
}
}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbWdmLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNyZWF0ZUhhc2ggPSByZXF1aXJlKCdjcmVhdGUtaGFzaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc2VlZCwgbGVuKSB7XG4gIHZhciB0ID0gbmV3IEJ1ZmZlcignJyk7XG4gIHZhciAgaSA9IDAsIGM7XG4gIHdoaWxlICh0Lmxlbmd0aCA8IGxlbikge1xuICAgIGMgPSBpMm9wcyhpKyspO1xuICAgIHQgPSBCdWZmZXIuY29uY2F0KFt0LCBjcmVhdGVIYXNoKCdzaGExJykudXBkYXRlKHNlZWQpLnVwZGF0ZShjKS5kaWdlc3QoKV0pO1xuICB9XG4gIHJldHVybiB0LnNsaWNlKDAsIGxlbik7XG59O1xuXG5mdW5jdGlvbiBpMm9wcyhjKSB7XG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKDQpO1xuICBvdXQud3JpdGVVSW50MzJCRShjLDApO1xuICByZXR1cm4gb3V0O1xufSJdfQ==
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","create-hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/browser.js":[function(require,module,exports){
(function (Buffer){
var generatePrime = require('./lib/generatePrime');
var primes = require('./lib/primes');

var DH = require('./lib/dh');

function getDiffieHellman(mod) {
  var prime = new Buffer(primes[mod].prime, 'hex');
  var gen = new Buffer(primes[mod].gen, 'hex');

  return new DH(prime, gen);
}

function createDiffieHellman(prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || (typeof enc === 'string' && ['hex', 'binary', 'base64'].indexOf(enc) === -1)) {
    genc = generator;
    generator = enc;
    enc = undefined;
  }

  enc = enc || 'binary';
  genc = genc || 'binary';
  generator = generator || new Buffer([2]);

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc);
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true);
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc);
  }

  return new DH(prime, generator, true);
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvZGlmZmllLWhlbGxtYW4vYnJvd3Nlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGdlbmVyYXRlUHJpbWUgPSByZXF1aXJlKCcuL2xpYi9nZW5lcmF0ZVByaW1lJyk7XG52YXIgcHJpbWVzID0gcmVxdWlyZSgnLi9saWIvcHJpbWVzJyk7XG5cbnZhciBESCA9IHJlcXVpcmUoJy4vbGliL2RoJyk7XG5cbmZ1bmN0aW9uIGdldERpZmZpZUhlbGxtYW4obW9kKSB7XG4gIHZhciBwcmltZSA9IG5ldyBCdWZmZXIocHJpbWVzW21vZF0ucHJpbWUsICdoZXgnKTtcbiAgdmFyIGdlbiA9IG5ldyBCdWZmZXIocHJpbWVzW21vZF0uZ2VuLCAnaGV4Jyk7XG5cbiAgcmV0dXJuIG5ldyBESChwcmltZSwgZ2VuKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGlmZmllSGVsbG1hbihwcmltZSwgZW5jLCBnZW5lcmF0b3IsIGdlbmMpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihlbmMpIHx8ICh0eXBlb2YgZW5jID09PSAnc3RyaW5nJyAmJiBbJ2hleCcsICdiaW5hcnknLCAnYmFzZTY0J10uaW5kZXhPZihlbmMpID09PSAtMSkpIHtcbiAgICBnZW5jID0gZ2VuZXJhdG9yO1xuICAgIGdlbmVyYXRvciA9IGVuYztcbiAgICBlbmMgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBlbmMgPSBlbmMgfHwgJ2JpbmFyeSc7XG4gIGdlbmMgPSBnZW5jIHx8ICdiaW5hcnknO1xuICBnZW5lcmF0b3IgPSBnZW5lcmF0b3IgfHwgbmV3IEJ1ZmZlcihbMl0pO1xuXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGdlbmVyYXRvcikpIHtcbiAgICBnZW5lcmF0b3IgPSBuZXcgQnVmZmVyKGdlbmVyYXRvciwgZ2VuYyk7XG4gIH1cblxuICBpZiAodHlwZW9mIHByaW1lID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBuZXcgREgoZ2VuZXJhdGVQcmltZShwcmltZSwgZ2VuZXJhdG9yKSwgZ2VuZXJhdG9yLCB0cnVlKTtcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHByaW1lKSkge1xuICAgIHByaW1lID0gbmV3IEJ1ZmZlcihwcmltZSwgZW5jKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgREgocHJpbWUsIGdlbmVyYXRvciwgdHJ1ZSk7XG59XG5cbmV4cG9ydHMuRGlmZmllSGVsbG1hbkdyb3VwID0gZXhwb3J0cy5jcmVhdGVEaWZmaWVIZWxsbWFuR3JvdXAgPSBleHBvcnRzLmdldERpZmZpZUhlbGxtYW4gPSBnZXREaWZmaWVIZWxsbWFuO1xuZXhwb3J0cy5jcmVhdGVEaWZmaWVIZWxsbWFuID0gZXhwb3J0cy5EaWZmaWVIZWxsbWFuID0gY3JlYXRlRGlmZmllSGVsbG1hbjtcbiJdfQ==
},{"./lib/dh":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/lib/dh.js","./lib/generatePrime":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/lib/generatePrime.js","./lib/primes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/lib/primes.json","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/lib/primes.json":[function(require,module,exports){
module.exports={
    "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    },
    "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    },
    "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    },
    "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    },
    "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    },
    "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    },
    "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    },
    "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    }
}
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/lib/dh.js":[function(require,module,exports){
(function (Buffer){
var BN = require('bn.js');
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require('./generatePrime');
var randomBytes = require('randombytes');
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;
  
  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;
    
    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      } 
      break;
    default: 
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function defineError (self, error) {
  try {
    Object.defineProperty(self, 'verifyError', {
      enumerable: true,
      value: error,
      writable: false
    });
  } catch(e) {
    self.verifyError = error;
  }
}
function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = void 0;
  this._priv = void 0;
  
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
    defineError(this, checkPrime(this.__prime, generator));
  } else {
    defineError(this, 8);
  }
}

DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}
}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvZGlmZmllLWhlbGxtYW4vbGliL2RoLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIE1pbGxlclJhYmluID0gcmVxdWlyZSgnbWlsbGVyLXJhYmluJyk7XG52YXIgbWlsbGVyUmFiaW4gPSBuZXcgTWlsbGVyUmFiaW4oKTtcbnZhciBUV0VOVFlGT1VSID0gbmV3IEJOKDI0KTtcbnZhciBFTEVWRU4gPSBuZXcgQk4oMTEpO1xudmFyIFRFTiA9IG5ldyBCTigxMCk7XG52YXIgVEhSRUUgPSBuZXcgQk4oMyk7XG52YXIgU0VWRU4gPSBuZXcgQk4oNyk7XG52YXIgcHJpbWVzID0gcmVxdWlyZSgnLi9nZW5lcmF0ZVByaW1lJyk7XG52YXIgcmFuZG9tQnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpO1xubW9kdWxlLmV4cG9ydHMgPSBESDtcblxuZnVuY3Rpb24gc2V0UHVibGljS2V5KHB1YiwgZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAndXRmOCc7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHB1YikpIHtcbiAgICBwdWIgPSBuZXcgQnVmZmVyKHB1YiwgZW5jKTtcbiAgfVxuICB0aGlzLl9wdWIgPSBuZXcgQk4ocHViKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHNldFByaXZhdGVLZXkocHJpdiwgZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAndXRmOCc7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHByaXYpKSB7XG4gICAgcHJpdiA9IG5ldyBCdWZmZXIocHJpdiwgZW5jKTtcbiAgfVxuICB0aGlzLl9wcml2ID0gbmV3IEJOKHByaXYpO1xuICByZXR1cm4gdGhpcztcbn1cblxudmFyIHByaW1lQ2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGNoZWNrUHJpbWUocHJpbWUsIGdlbmVyYXRvcikge1xuICB2YXIgZ2VuID0gZ2VuZXJhdG9yLnRvU3RyaW5nKCdoZXgnKTtcbiAgdmFyIGhleCA9IFtnZW4sIHByaW1lLnRvU3RyaW5nKDE2KV0uam9pbignXycpO1xuICBpZiAoaGV4IGluIHByaW1lQ2FjaGUpIHtcbiAgICByZXR1cm4gcHJpbWVDYWNoZVtoZXhdO1xuICB9XG4gIHZhciBlcnJvciA9IDA7XG4gIFxuICBpZiAocHJpbWUuaXNFdmVuKCkgfHxcbiAgICAhcHJpbWVzLnNpbXBsZVNpZXZlIHx8XG4gICAgIXByaW1lcy5mZXJtYXRUZXN0KHByaW1lKSB8fFxuICAgICFtaWxsZXJSYWJpbi50ZXN0KHByaW1lKSkge1xuICAgIC8vbm90IGEgcHJpbWUgc28gKzFcbiAgICBlcnJvciArPSAxO1xuICAgIFxuICAgIGlmIChnZW4gPT09ICcwMicgfHwgZ2VuID09PSAnMDUnKSB7XG4gICAgICAvLyB3ZSdkIGJlIGFibGUgdG8gY2hlY2sgdGhlIGdlbmVyYXRvclxuICAgICAgLy8gaXQgd291bGQgZmFpbCBzbyArOFxuICAgICAgZXJyb3IgKz0gODtcbiAgICB9IGVsc2Uge1xuICAgICAgLy93ZSB3b3VsZG4ndCBiZSBhYmxlIHRvIHRlc3QgdGhlIGdlbmVyYXRvclxuICAgICAgLy8gc28gKzRcbiAgICAgIGVycm9yICs9IDQ7XG4gICAgfVxuICAgIHByaW1lQ2FjaGVbaGV4XSA9IGVycm9yO1xuICAgIHJldHVybiBlcnJvcjtcbiAgfVxuICBpZiAoIW1pbGxlclJhYmluLnRlc3QocHJpbWUuc2hybigxKSkpIHtcbiAgICAvL25vdCBhIHNhZmUgcHJpbWVcbiAgICBlcnJvciArPSAyO1xuICB9XG4gIHZhciByZW07XG4gIHN3aXRjaCAoZ2VuKSB7XG4gICAgY2FzZSAnMDInOlxuICAgICAgaWYgKHByaW1lLm1vZChUV0VOVFlGT1VSKS5jbXAoRUxFVkVOKSkge1xuICAgICAgICAvLyB1bnN1aWRhYmxlIGdlbmVyYXRvclxuICAgICAgICBlcnJvciArPSA4O1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnMDUnOlxuICAgICAgcmVtID0gcHJpbWUubW9kKFRFTik7XG4gICAgICBpZiAocmVtLmNtcChUSFJFRSkgJiYgcmVtLmNtcChTRVZFTikpIHtcbiAgICAgICAgLy8gcHJpbWUgbW9kIDEwIG5lZWRzIHRvIGVxdWFsIDMgb3IgN1xuICAgICAgICBlcnJvciArPSA4O1xuICAgICAgfSBcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6IFxuICAgICAgZXJyb3IgKz0gNDtcbiAgfVxuICBwcmltZUNhY2hlW2hleF0gPSBlcnJvcjtcbiAgcmV0dXJuIGVycm9yO1xufVxuXG5mdW5jdGlvbiBkZWZpbmVFcnJvciAoc2VsZiwgZXJyb3IpIHtcbiAgdHJ5IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZiwgJ3ZlcmlmeUVycm9yJywge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBlcnJvcixcbiAgICAgIHdyaXRhYmxlOiBmYWxzZVxuICAgIH0pO1xuICB9IGNhdGNoKGUpIHtcbiAgICBzZWxmLnZlcmlmeUVycm9yID0gZXJyb3I7XG4gIH1cbn1cbmZ1bmN0aW9uIERIKHByaW1lLCBnZW5lcmF0b3IsIG1hbGxlYWJsZSkge1xuICB0aGlzLnNldEdlbmVyYXRvcihnZW5lcmF0b3IpO1xuICB0aGlzLl9fcHJpbWUgPSBuZXcgQk4ocHJpbWUpO1xuICB0aGlzLl9wcmltZSA9IEJOLm1vbnQodGhpcy5fX3ByaW1lKTtcbiAgdGhpcy5fcHJpbWVMZW4gPSBwcmltZS5sZW5ndGg7XG4gIHRoaXMuX3B1YiA9IHZvaWQgMDtcbiAgdGhpcy5fcHJpdiA9IHZvaWQgMDtcbiAgXG4gIGlmIChtYWxsZWFibGUpIHtcbiAgICB0aGlzLnNldFB1YmxpY0tleSA9IHNldFB1YmxpY0tleTtcbiAgICB0aGlzLnNldFByaXZhdGVLZXkgPSBzZXRQcml2YXRlS2V5O1xuICAgIGRlZmluZUVycm9yKHRoaXMsIGNoZWNrUHJpbWUodGhpcy5fX3ByaW1lLCBnZW5lcmF0b3IpKTtcbiAgfSBlbHNlIHtcbiAgICBkZWZpbmVFcnJvcih0aGlzLCA4KTtcbiAgfVxufVxuXG5ESC5wcm90b3R5cGUuZ2VuZXJhdGVLZXlzID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuX3ByaXYpIHtcbiAgICB0aGlzLl9wcml2ID0gbmV3IEJOKHJhbmRvbUJ5dGVzKHRoaXMuX3ByaW1lTGVuKSk7XG4gIH1cbiAgdGhpcy5fcHViID0gdGhpcy5fZ2VuLnRvUmVkKHRoaXMuX3ByaW1lKS5yZWRQb3codGhpcy5fcHJpdikuZnJvbVJlZCgpO1xuICByZXR1cm4gdGhpcy5nZXRQdWJsaWNLZXkoKTtcbn07XG5cbkRILnByb3RvdHlwZS5jb21wdXRlU2VjcmV0ID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gIG90aGVyID0gbmV3IEJOKG90aGVyKTtcbiAgb3RoZXIgPSBvdGhlci50b1JlZCh0aGlzLl9wcmltZSk7XG4gIHZhciBzZWNyZXQgPSBvdGhlci5yZWRQb3codGhpcy5fcHJpdikuZnJvbVJlZCgpO1xuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcihzZWNyZXQudG9BcnJheSgpKTtcbiAgdmFyIHByaW1lID0gdGhpcy5nZXRQcmltZSgpO1xuICBpZiAob3V0Lmxlbmd0aCA8IHByaW1lLmxlbmd0aCkge1xuICAgIHZhciBmcm9udCA9IG5ldyBCdWZmZXIocHJpbWUubGVuZ3RoIC0gb3V0Lmxlbmd0aCk7XG4gICAgZnJvbnQuZmlsbCgwKTtcbiAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFtmcm9udCwgb3V0XSk7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG5cbkRILnByb3RvdHlwZS5nZXRQdWJsaWNLZXkgPSBmdW5jdGlvbiBnZXRQdWJsaWNLZXkoZW5jKSB7XG4gIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZSh0aGlzLl9wdWIsIGVuYyk7XG59O1xuXG5ESC5wcm90b3R5cGUuZ2V0UHJpdmF0ZUtleSA9IGZ1bmN0aW9uIGdldFByaXZhdGVLZXkoZW5jKSB7XG4gIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZSh0aGlzLl9wcml2LCBlbmMpO1xufTtcblxuREgucHJvdG90eXBlLmdldFByaW1lID0gZnVuY3Rpb24gKGVuYykge1xuICByZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUodGhpcy5fX3ByaW1lLCBlbmMpO1xufTtcblxuREgucHJvdG90eXBlLmdldEdlbmVyYXRvciA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKHRoaXMuX2dlbiwgZW5jKTtcbn07XG5cbkRILnByb3RvdHlwZS5zZXRHZW5lcmF0b3IgPSBmdW5jdGlvbiAoZ2VuLCBlbmMpIHtcbiAgZW5jID0gZW5jIHx8ICd1dGY4JztcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoZ2VuKSkge1xuICAgIGdlbiA9IG5ldyBCdWZmZXIoZ2VuLCBlbmMpO1xuICB9XG4gIHRoaXMuX2dlbiA9IG5ldyBCTihnZW4pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGZvcm1hdFJldHVyblZhbHVlKGJuLCBlbmMpIHtcbiAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIoYm4udG9BcnJheSgpKTtcbiAgaWYgKCFlbmMpIHtcbiAgICByZXR1cm4gYnVmO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBidWYudG9TdHJpbmcoZW5jKTtcbiAgfVxufSJdfQ==
},{"./generatePrime":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/lib/generatePrime.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/node_modules/bn.js/lib/bn.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","miller-rabin":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/node_modules/miller-rabin/lib/mr.js","randombytes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/randombytes/browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/lib/generatePrime.js":[function(require,module,exports){
var randomBytes = require('randombytes');
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);
  var runs, comp;
  function generateRandom(bits) {
    runs = -1;
    var out = new BN(randomBytes(Math.ceil(bits / 8)));
    while (out.bitLength() > bits) {
      out.ishrn(1);
    }
    if (out.isEven()) {
      out.iadd(ONE);
    }
    if (!out.testn(1)) {
      out.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (out.mod(TWENTYFOUR).cmp(ELEVEN)) {
        out.iadd(FOUR);
      }
      comp = {
        major: [TWENTYFOUR],
        minor: [TWELVE]
      };
    } else if (!gen.cmp(FIVE)) {
      rem = out.mod(TEN);
      while (rem.cmp(THREE)) {
        out.iadd(FOUR);
        rem = out.mod(TEN);
      }
      comp = {
        major: [FOUR, SIXTEEN],
        minor: [TWO, EIGHT]
      };
    } else {
      comp = {
        major: [FOUR],
        minor: [TWO]
      };
    }
    return out;
  }
  var num = generateRandom(bits);

  var n2 = num.shrn(1);

  while (true) {
    while (num.bitLength() > bits) {
      num = generateRandom(bits);
      n2 = num.shrn(1);
    }
    runs++;
    if (simpleSieve(n2) &&  simpleSieve(num) &&
      fermatTest(n2) &&  fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
    num.iadd(comp.major[runs%comp.major.length]);
    n2.iadd(comp.minor[runs%comp.minor.length]);
  }

}
},{"bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/node_modules/bn.js/lib/bn.js","miller-rabin":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/node_modules/miller-rabin/lib/mr.js","randombytes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/randombytes/browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/node_modules/miller-rabin/lib/mr.js":[function(require,module,exports){
var bn = require('bn.js');
var brorand = require('brorand');

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._rand = function _rand(n) {
  var len = n.bitLength();
  var buf = this.rand.generate(Math.ceil(len / 8));

  // Set low bits
  buf[0] |= 3;

  // Mask high bits
  var mask = len & 0x7;
  if (mask !== 0)
    buf[buf.length - 1] >>= 7 - mask;

  return new bn(buf);
}

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  var n2 = n1.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._rand(n2);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  var n2 = n1.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._rand(n2);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};

},{"bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/node_modules/bn.js/lib/bn.js","brorand":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/node_modules/miller-rabin/node_modules/brorand/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/node_modules/miller-rabin/node_modules/brorand/index.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/brorand/index.js"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/node_modules/bn.js/lib/bn.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/bn.js/lib/bn.js"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/browser.js":[function(require,module,exports){
(function (Buffer){
var elliptic = require('elliptic');
var BN = require('bn.js');

module.exports = function createECDH(curve) {
	return new ECDH(curve);
};

var aliases = {
	secp256k1: {
		name: 'secp256k1',
		byteLength: 32
	},
	secp224r1: {
		name: 'p224',
		byteLength: 28
	},
	prime256v1: {
		name: 'p256',
		byteLength: 32
	},
	prime192v1: {
		name: 'p192',
		byteLength: 24
	},
	ed25519: {
		name: 'ed25519',
		byteLength: 32
	}
};

aliases.p224 = aliases.secp224r1;
aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
aliases.p192 = aliases.secp192r1 = aliases.prime192v1;

function ECDH(curve) {
	this.curveType = aliases[curve];
	if (!this.curveType ) {
		this.curveType = {
			name: curve
		};
	}
	this.curve = new elliptic.ec(this.curveType.name);
	this.keys = void 0;
}

ECDH.prototype.generateKeys = function (enc, format) {
	this.keys = this.curve.genKeyPair();
	return this.getPublicKey(enc, format);
};

ECDH.prototype.computeSecret = function (other, inenc, enc) {
	inenc = inenc || 'utf8';
	if (!Buffer.isBuffer(other)) {
		other = new Buffer(other, inenc);
	}
	var otherPub = this.curve.keyFromPublic(other).getPublic();
	var out = otherPub.mul(this.keys.getPrivate()).getX();
	return formatReturnValue(out, enc, this.curveType.byteLength);
};

ECDH.prototype.getPublicKey = function (enc, format) {
	var key = this.keys.getPublic(format === 'compressed', true);
	if (format === 'hybrid') {
		if (key[key.length - 1] % 2) {
			key[0] = 7;
		} else {
			key [0] = 6;
		}
	}
	return formatReturnValue(key, enc);
};

ECDH.prototype.getPrivateKey = function (enc) {
	return formatReturnValue(this.keys.getPrivate(), enc);
};

ECDH.prototype.setPublicKey = function (pub, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(pub)) {
		pub = new Buffer(pub, enc);
	}
	this.keys._importPublic(pub);
	return this;
};

ECDH.prototype.setPrivateKey = function (priv, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(priv)) {
		priv = new Buffer(priv, enc);
	}
	var _priv = new BN(priv);
	_priv = _priv.toString(16);
	this.keys._importPrivate(_priv);
	return this;
};

function formatReturnValue(bn, enc, len) {
	if (!Array.isArray(bn)) {
		bn = bn.toArray();
	}
	var buf = new Buffer(bn);
	if (len && buf.length < len) {
		var zeros = new Buffer(len - buf.length);
		zeros.fill(0);
		buf = Buffer.concat([zeros, buf]);
	}
	if (!enc) {
		return buf;
	} else {
		return buf.toString(enc);
	}
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWVjZGgvYnJvd3Nlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGVsbGlwdGljID0gcmVxdWlyZSgnZWxsaXB0aWMnKTtcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRUNESChjdXJ2ZSkge1xuXHRyZXR1cm4gbmV3IEVDREgoY3VydmUpO1xufTtcblxudmFyIGFsaWFzZXMgPSB7XG5cdHNlY3AyNTZrMToge1xuXHRcdG5hbWU6ICdzZWNwMjU2azEnLFxuXHRcdGJ5dGVMZW5ndGg6IDMyXG5cdH0sXG5cdHNlY3AyMjRyMToge1xuXHRcdG5hbWU6ICdwMjI0Jyxcblx0XHRieXRlTGVuZ3RoOiAyOFxuXHR9LFxuXHRwcmltZTI1NnYxOiB7XG5cdFx0bmFtZTogJ3AyNTYnLFxuXHRcdGJ5dGVMZW5ndGg6IDMyXG5cdH0sXG5cdHByaW1lMTkydjE6IHtcblx0XHRuYW1lOiAncDE5MicsXG5cdFx0Ynl0ZUxlbmd0aDogMjRcblx0fSxcblx0ZWQyNTUxOToge1xuXHRcdG5hbWU6ICdlZDI1NTE5Jyxcblx0XHRieXRlTGVuZ3RoOiAzMlxuXHR9XG59O1xuXG5hbGlhc2VzLnAyMjQgPSBhbGlhc2VzLnNlY3AyMjRyMTtcbmFsaWFzZXMucDI1NiA9IGFsaWFzZXMuc2VjcDI1NnIxID0gYWxpYXNlcy5wcmltZTI1NnYxO1xuYWxpYXNlcy5wMTkyID0gYWxpYXNlcy5zZWNwMTkycjEgPSBhbGlhc2VzLnByaW1lMTkydjE7XG5cbmZ1bmN0aW9uIEVDREgoY3VydmUpIHtcblx0dGhpcy5jdXJ2ZVR5cGUgPSBhbGlhc2VzW2N1cnZlXTtcblx0aWYgKCF0aGlzLmN1cnZlVHlwZSApIHtcblx0XHR0aGlzLmN1cnZlVHlwZSA9IHtcblx0XHRcdG5hbWU6IGN1cnZlXG5cdFx0fTtcblx0fVxuXHR0aGlzLmN1cnZlID0gbmV3IGVsbGlwdGljLmVjKHRoaXMuY3VydmVUeXBlLm5hbWUpO1xuXHR0aGlzLmtleXMgPSB2b2lkIDA7XG59XG5cbkVDREgucHJvdG90eXBlLmdlbmVyYXRlS2V5cyA9IGZ1bmN0aW9uIChlbmMsIGZvcm1hdCkge1xuXHR0aGlzLmtleXMgPSB0aGlzLmN1cnZlLmdlbktleVBhaXIoKTtcblx0cmV0dXJuIHRoaXMuZ2V0UHVibGljS2V5KGVuYywgZm9ybWF0KTtcbn07XG5cbkVDREgucHJvdG90eXBlLmNvbXB1dGVTZWNyZXQgPSBmdW5jdGlvbiAob3RoZXIsIGluZW5jLCBlbmMpIHtcblx0aW5lbmMgPSBpbmVuYyB8fCAndXRmOCc7XG5cdGlmICghQnVmZmVyLmlzQnVmZmVyKG90aGVyKSkge1xuXHRcdG90aGVyID0gbmV3IEJ1ZmZlcihvdGhlciwgaW5lbmMpO1xuXHR9XG5cdHZhciBvdGhlclB1YiA9IHRoaXMuY3VydmUua2V5RnJvbVB1YmxpYyhvdGhlcikuZ2V0UHVibGljKCk7XG5cdHZhciBvdXQgPSBvdGhlclB1Yi5tdWwodGhpcy5rZXlzLmdldFByaXZhdGUoKSkuZ2V0WCgpO1xuXHRyZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUob3V0LCBlbmMsIHRoaXMuY3VydmVUeXBlLmJ5dGVMZW5ndGgpO1xufTtcblxuRUNESC5wcm90b3R5cGUuZ2V0UHVibGljS2V5ID0gZnVuY3Rpb24gKGVuYywgZm9ybWF0KSB7XG5cdHZhciBrZXkgPSB0aGlzLmtleXMuZ2V0UHVibGljKGZvcm1hdCA9PT0gJ2NvbXByZXNzZWQnLCB0cnVlKTtcblx0aWYgKGZvcm1hdCA9PT0gJ2h5YnJpZCcpIHtcblx0XHRpZiAoa2V5W2tleS5sZW5ndGggLSAxXSAlIDIpIHtcblx0XHRcdGtleVswXSA9IDc7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGtleSBbMF0gPSA2O1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUoa2V5LCBlbmMpO1xufTtcblxuRUNESC5wcm90b3R5cGUuZ2V0UHJpdmF0ZUtleSA9IGZ1bmN0aW9uIChlbmMpIHtcblx0cmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKHRoaXMua2V5cy5nZXRQcml2YXRlKCksIGVuYyk7XG59O1xuXG5FQ0RILnByb3RvdHlwZS5zZXRQdWJsaWNLZXkgPSBmdW5jdGlvbiAocHViLCBlbmMpIHtcblx0ZW5jID0gZW5jIHx8ICd1dGY4Jztcblx0aWYgKCFCdWZmZXIuaXNCdWZmZXIocHViKSkge1xuXHRcdHB1YiA9IG5ldyBCdWZmZXIocHViLCBlbmMpO1xuXHR9XG5cdHRoaXMua2V5cy5faW1wb3J0UHVibGljKHB1Yik7XG5cdHJldHVybiB0aGlzO1xufTtcblxuRUNESC5wcm90b3R5cGUuc2V0UHJpdmF0ZUtleSA9IGZ1bmN0aW9uIChwcml2LCBlbmMpIHtcblx0ZW5jID0gZW5jIHx8ICd1dGY4Jztcblx0aWYgKCFCdWZmZXIuaXNCdWZmZXIocHJpdikpIHtcblx0XHRwcml2ID0gbmV3IEJ1ZmZlcihwcml2LCBlbmMpO1xuXHR9XG5cdHZhciBfcHJpdiA9IG5ldyBCTihwcml2KTtcblx0X3ByaXYgPSBfcHJpdi50b1N0cmluZygxNik7XG5cdHRoaXMua2V5cy5faW1wb3J0UHJpdmF0ZShfcHJpdik7XG5cdHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZm9ybWF0UmV0dXJuVmFsdWUoYm4sIGVuYywgbGVuKSB7XG5cdGlmICghQXJyYXkuaXNBcnJheShibikpIHtcblx0XHRibiA9IGJuLnRvQXJyYXkoKTtcblx0fVxuXHR2YXIgYnVmID0gbmV3IEJ1ZmZlcihibik7XG5cdGlmIChsZW4gJiYgYnVmLmxlbmd0aCA8IGxlbikge1xuXHRcdHZhciB6ZXJvcyA9IG5ldyBCdWZmZXIobGVuIC0gYnVmLmxlbmd0aCk7XG5cdFx0emVyb3MuZmlsbCgwKTtcblx0XHRidWYgPSBCdWZmZXIuY29uY2F0KFt6ZXJvcywgYnVmXSk7XG5cdH1cblx0aWYgKCFlbmMpIHtcblx0XHRyZXR1cm4gYnVmO1xuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBidWYudG9TdHJpbmcoZW5jKTtcblx0fVxufVxuIl19
},{"bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/bn.js/lib/bn.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic.js"][0].apply(exports,arguments)
},{"../package.json":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/package.json","./elliptic/curve":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curve/index.js","./elliptic/curves":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curves.js","./elliptic/ec":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/ec/index.js","./elliptic/hmac-drbg":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/hmac-drbg.js","./elliptic/utils":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/utils.js","brorand":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/brorand/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/package.json":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/package.json"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/brorand/index.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/brorand/index.js"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/utils.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/utils.js"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/hmac-drbg.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/hmac-drbg.js"][0].apply(exports,arguments)
},{"../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic.js","hash.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/ec/index.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/ec/index.js"][0].apply(exports,arguments)
},{"../../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic.js","./key":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/ec/key.js","./signature":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/ec/signature.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/bn.js/lib/bn.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/ec/signature.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/ec/signature.js"][0].apply(exports,arguments)
},{"../../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/bn.js/lib/bn.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/ec/key.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/ec/key.js"][0].apply(exports,arguments)
},{"../../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/bn.js/lib/bn.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curves.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curves.js"][0].apply(exports,arguments)
},{"../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic.js","./precomputed/secp256k1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js","hash.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash.js"][0].apply(exports,arguments)
},{"./hash/common":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash/common.js","./hash/hmac":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash/hmac.js","./hash/ripemd":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash/ripemd.js","./hash/sha":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash/sha.js","./hash/utils":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash/utils.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash/utils.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/utils.js"][0].apply(exports,arguments)
},{"inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash/sha.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/sha.js"][0].apply(exports,arguments)
},{"../hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash/ripemd.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/ripemd.js"][0].apply(exports,arguments)
},{"../hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash/hmac.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/hmac.js"][0].apply(exports,arguments)
},{"../hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash/common.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/common.js"][0].apply(exports,arguments)
},{"../hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curve/index.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/index.js"][0].apply(exports,arguments)
},{"./base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curve/base.js","./edwards":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curve/edwards.js","./mont":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curve/mont.js","./short":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curve/short.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curve/short.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/short.js"][0].apply(exports,arguments)
},{"../../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic.js","../curve":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curve/index.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/bn.js/lib/bn.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curve/mont.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/mont.js"][0].apply(exports,arguments)
},{"../curve":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curve/index.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/bn.js/lib/bn.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curve/edwards.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/edwards.js"][0].apply(exports,arguments)
},{"../../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic.js","../curve":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curve/index.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/bn.js/lib/bn.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curve/base.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/base.js"][0].apply(exports,arguments)
},{"../../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/bn.js/lib/bn.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/bn.js/lib/bn.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/bn.js/lib/bn.js"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/browser.js":[function(require,module,exports){
(function (Buffer){
var _algos = require('./algos')
var createHash = require('create-hash')
var inherits = require('inherits')
var sign = require('./sign')
var stream = require('stream')
var verify = require('./verify')

var algos = {}
Object.keys(_algos).forEach(function (key) {
  algos[key] = algos[key.toLowerCase()] = _algos[key]
})

function Sign (algorithm) {
  stream.Writable.call(this)

  var data = algos[algorithm]
  if (!data) {
    throw new Error('Unknown message digest')
  }

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Sign, stream.Writable)

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string') {
    data = new Buffer(data, enc)
  }

  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(Buffer.concat([this._tag, hash]), key, this._hashType, this._signType)

  return enc ? sig.toString(enc) : sig
}

function Verify (algorithm) {
  stream.Writable.call(this)

  var data = algos[algorithm]
  if (!data) {
    throw new Error('Unknown message digest')
  }

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Verify, stream.Writable)

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)

  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string') {
    data = new Buffer(data, enc)
  }

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  if (typeof sig === 'string') {
    sig = new Buffer(sig, enc)
  }

  this.end()
  var hash = this._hash.digest()

  return verify(sig, Buffer.concat([this._tag, hash]), key, this._signType)
}

function createSign (algorithm) {
  return new Sign(algorithm)
}

function createVerify (algorithm) {
  return new Verify(algorithm)
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL2Jyb3dzZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBfYWxnb3MgPSByZXF1aXJlKCcuL2FsZ29zJylcbnZhciBjcmVhdGVIYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIHNpZ24gPSByZXF1aXJlKCcuL3NpZ24nKVxudmFyIHN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpXG52YXIgdmVyaWZ5ID0gcmVxdWlyZSgnLi92ZXJpZnknKVxuXG52YXIgYWxnb3MgPSB7fVxuT2JqZWN0LmtleXMoX2FsZ29zKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgYWxnb3Nba2V5XSA9IGFsZ29zW2tleS50b0xvd2VyQ2FzZSgpXSA9IF9hbGdvc1trZXldXG59KVxuXG5mdW5jdGlvbiBTaWduIChhbGdvcml0aG0pIHtcbiAgc3RyZWFtLldyaXRhYmxlLmNhbGwodGhpcylcblxuICB2YXIgZGF0YSA9IGFsZ29zW2FsZ29yaXRobV1cbiAgaWYgKCFkYXRhKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIG1lc3NhZ2UgZGlnZXN0JylcbiAgfVxuXG4gIHRoaXMuX2hhc2hUeXBlID0gZGF0YS5oYXNoXG4gIHRoaXMuX2hhc2ggPSBjcmVhdGVIYXNoKGRhdGEuaGFzaClcbiAgdGhpcy5fdGFnID0gZGF0YS5pZFxuICB0aGlzLl9zaWduVHlwZSA9IGRhdGEuc2lnblxufVxuaW5oZXJpdHMoU2lnbiwgc3RyZWFtLldyaXRhYmxlKVxuXG5TaWduLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiBfd3JpdGUgKGRhdGEsIF8sIGRvbmUpIHtcbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbiAgZG9uZSgpXG59XG5cblNpZ24ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoZGF0YSwgZW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBkYXRhID0gbmV3IEJ1ZmZlcihkYXRhLCBlbmMpXG4gIH1cblxuICB0aGlzLl9oYXNoLnVwZGF0ZShkYXRhKVxuICByZXR1cm4gdGhpc1xufVxuXG5TaWduLnByb3RvdHlwZS5zaWduID0gZnVuY3Rpb24gc2lnbk1ldGhvZCAoa2V5LCBlbmMpIHtcbiAgdGhpcy5lbmQoKVxuICB2YXIgaGFzaCA9IHRoaXMuX2hhc2guZGlnZXN0KClcbiAgdmFyIHNpZyA9IHNpZ24oQnVmZmVyLmNvbmNhdChbdGhpcy5fdGFnLCBoYXNoXSksIGtleSwgdGhpcy5faGFzaFR5cGUsIHRoaXMuX3NpZ25UeXBlKVxuXG4gIHJldHVybiBlbmMgPyBzaWcudG9TdHJpbmcoZW5jKSA6IHNpZ1xufVxuXG5mdW5jdGlvbiBWZXJpZnkgKGFsZ29yaXRobSkge1xuICBzdHJlYW0uV3JpdGFibGUuY2FsbCh0aGlzKVxuXG4gIHZhciBkYXRhID0gYWxnb3NbYWxnb3JpdGhtXVxuICBpZiAoIWRhdGEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbWVzc2FnZSBkaWdlc3QnKVxuICB9XG5cbiAgdGhpcy5faGFzaCA9IGNyZWF0ZUhhc2goZGF0YS5oYXNoKVxuICB0aGlzLl90YWcgPSBkYXRhLmlkXG4gIHRoaXMuX3NpZ25UeXBlID0gZGF0YS5zaWduXG59XG5pbmhlcml0cyhWZXJpZnksIHN0cmVhbS5Xcml0YWJsZSlcblxuVmVyaWZ5LnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiBfd3JpdGUgKGRhdGEsIF8sIGRvbmUpIHtcbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcblxuICBkb25lKClcbn1cblxuVmVyaWZ5LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKGRhdGEsIGVuYykge1xuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgZGF0YSA9IG5ldyBCdWZmZXIoZGF0YSwgZW5jKVxuICB9XG5cbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbiAgcmV0dXJuIHRoaXNcbn1cblxuVmVyaWZ5LnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnlNZXRob2QgKGtleSwgc2lnLCBlbmMpIHtcbiAgaWYgKHR5cGVvZiBzaWcgPT09ICdzdHJpbmcnKSB7XG4gICAgc2lnID0gbmV3IEJ1ZmZlcihzaWcsIGVuYylcbiAgfVxuXG4gIHRoaXMuZW5kKClcbiAgdmFyIGhhc2ggPSB0aGlzLl9oYXNoLmRpZ2VzdCgpXG5cbiAgcmV0dXJuIHZlcmlmeShzaWcsIEJ1ZmZlci5jb25jYXQoW3RoaXMuX3RhZywgaGFzaF0pLCBrZXksIHRoaXMuX3NpZ25UeXBlKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTaWduIChhbGdvcml0aG0pIHtcbiAgcmV0dXJuIG5ldyBTaWduKGFsZ29yaXRobSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlVmVyaWZ5IChhbGdvcml0aG0pIHtcbiAgcmV0dXJuIG5ldyBWZXJpZnkoYWxnb3JpdGhtKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgU2lnbjogY3JlYXRlU2lnbixcbiAgVmVyaWZ5OiBjcmVhdGVWZXJpZnksXG4gIGNyZWF0ZVNpZ246IGNyZWF0ZVNpZ24sXG4gIGNyZWF0ZVZlcmlmeTogY3JlYXRlVmVyaWZ5XG59XG4iXX0=
},{"./algos":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/algos.js","./sign":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/sign.js","./verify":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/verify.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","create-hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/browser.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js","stream":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/stream-browserify/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/verify.js":[function(require,module,exports){
(function (Buffer){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var curves = require('./curves')
var elliptic = require('elliptic')
var parseKeys = require('parse-asn1')

var BN = require('bn.js')
var EC = elliptic.ec

function verify (sig, hash, key, signType) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    if (signType !== 'ecdsa') {
      throw new Error('wrong public key type')
    }
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') {
      throw new Error('wrong public key type')
    }
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa') {
      throw new Error('wrong public key type')
    }
  }
  var len = pub.modulus.byteLength()
  var pad = [ 1 ]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = new Buffer(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))

  sig = new Buffer(sig.fromRed().toArray())
  var out = 0
  if (padNum < 8) {
    out = 1
  }
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) {
    out = 1
  }

  i = -1
  while (++i < len) {
    out |= (sig[i] ^ pad[i])
  }
  return out === 0
}

function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new EC(curveId)
  var pubkey = pub.data.subjectPrivateKey.data

  return curve.verify(hash, sig, pubkey)
}

function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montp = BN.mont(p)
  var w = s.invm(q)
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(
      y.toRed(montp)
        .redPow(r.mul(w).mod(q))
        .fromRed()
  ).mod(p).mod(q)
  return !v.cmp(r)
}

function checkValue (b, q) {
  if (b.cmpn(0) <= 0) {
    throw new Error('invalid sig')
  }
  if (b.cmp(q) >= q) {
    throw new Error('invalid sig')
  }
}

module.exports = verify

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL3ZlcmlmeS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbXVjaCBvZiB0aGlzIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L3NlbGYtc2lnbmVkL2Jsb2IvZ2gtcGFnZXMvbGliL3JzYS5qc1xudmFyIGN1cnZlcyA9IHJlcXVpcmUoJy4vY3VydmVzJylcbnZhciBlbGxpcHRpYyA9IHJlcXVpcmUoJ2VsbGlwdGljJylcbnZhciBwYXJzZUtleXMgPSByZXF1aXJlKCdwYXJzZS1hc24xJylcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKVxudmFyIEVDID0gZWxsaXB0aWMuZWNcblxuZnVuY3Rpb24gdmVyaWZ5IChzaWcsIGhhc2gsIGtleSwgc2lnblR5cGUpIHtcbiAgdmFyIHB1YiA9IHBhcnNlS2V5cyhrZXkpXG4gIGlmIChwdWIudHlwZSA9PT0gJ2VjJykge1xuICAgIGlmIChzaWduVHlwZSAhPT0gJ2VjZHNhJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwdWJsaWMga2V5IHR5cGUnKVxuICAgIH1cbiAgICByZXR1cm4gZWNWZXJpZnkoc2lnLCBoYXNoLCBwdWIpXG4gIH0gZWxzZSBpZiAocHViLnR5cGUgPT09ICdkc2EnKSB7XG4gICAgaWYgKHNpZ25UeXBlICE9PSAnZHNhJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwdWJsaWMga2V5IHR5cGUnKVxuICAgIH1cbiAgICByZXR1cm4gZHNhVmVyaWZ5KHNpZywgaGFzaCwgcHViKVxuICB9IGVsc2Uge1xuICAgIGlmIChzaWduVHlwZSAhPT0gJ3JzYScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignd3JvbmcgcHVibGljIGtleSB0eXBlJylcbiAgICB9XG4gIH1cbiAgdmFyIGxlbiA9IHB1Yi5tb2R1bHVzLmJ5dGVMZW5ndGgoKVxuICB2YXIgcGFkID0gWyAxIF1cbiAgdmFyIHBhZE51bSA9IDBcbiAgd2hpbGUgKGhhc2gubGVuZ3RoICsgcGFkLmxlbmd0aCArIDIgPCBsZW4pIHtcbiAgICBwYWQucHVzaCgweGZmKVxuICAgIHBhZE51bSsrXG4gIH1cbiAgcGFkLnB1c2goMHgwMClcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgaGFzaC5sZW5ndGgpIHtcbiAgICBwYWQucHVzaChoYXNoW2ldKVxuICB9XG4gIHBhZCA9IG5ldyBCdWZmZXIocGFkKVxuICB2YXIgcmVkID0gQk4ubW9udChwdWIubW9kdWx1cylcbiAgc2lnID0gbmV3IEJOKHNpZykudG9SZWQocmVkKVxuXG4gIHNpZyA9IHNpZy5yZWRQb3cobmV3IEJOKHB1Yi5wdWJsaWNFeHBvbmVudCkpXG5cbiAgc2lnID0gbmV3IEJ1ZmZlcihzaWcuZnJvbVJlZCgpLnRvQXJyYXkoKSlcbiAgdmFyIG91dCA9IDBcbiAgaWYgKHBhZE51bSA8IDgpIHtcbiAgICBvdXQgPSAxXG4gIH1cbiAgbGVuID0gTWF0aC5taW4oc2lnLmxlbmd0aCwgcGFkLmxlbmd0aClcbiAgaWYgKHNpZy5sZW5ndGggIT09IHBhZC5sZW5ndGgpIHtcbiAgICBvdXQgPSAxXG4gIH1cblxuICBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIG91dCB8PSAoc2lnW2ldIF4gcGFkW2ldKVxuICB9XG4gIHJldHVybiBvdXQgPT09IDBcbn1cblxuZnVuY3Rpb24gZWNWZXJpZnkgKHNpZywgaGFzaCwgcHViKSB7XG4gIHZhciBjdXJ2ZUlkID0gY3VydmVzW3B1Yi5kYXRhLmFsZ29yaXRobS5jdXJ2ZS5qb2luKCcuJyldXG4gIGlmICghY3VydmVJZCkgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGN1cnZlICcgKyBwdWIuZGF0YS5hbGdvcml0aG0uY3VydmUuam9pbignLicpKVxuXG4gIHZhciBjdXJ2ZSA9IG5ldyBFQyhjdXJ2ZUlkKVxuICB2YXIgcHVia2V5ID0gcHViLmRhdGEuc3ViamVjdFByaXZhdGVLZXkuZGF0YVxuXG4gIHJldHVybiBjdXJ2ZS52ZXJpZnkoaGFzaCwgc2lnLCBwdWJrZXkpXG59XG5cbmZ1bmN0aW9uIGRzYVZlcmlmeSAoc2lnLCBoYXNoLCBwdWIpIHtcbiAgdmFyIHAgPSBwdWIuZGF0YS5wXG4gIHZhciBxID0gcHViLmRhdGEucVxuICB2YXIgZyA9IHB1Yi5kYXRhLmdcbiAgdmFyIHkgPSBwdWIuZGF0YS5wdWJfa2V5XG4gIHZhciB1bnBhY2tlZCA9IHBhcnNlS2V5cy5zaWduYXR1cmUuZGVjb2RlKHNpZywgJ2RlcicpXG4gIHZhciBzID0gdW5wYWNrZWQuc1xuICB2YXIgciA9IHVucGFja2VkLnJcbiAgY2hlY2tWYWx1ZShzLCBxKVxuICBjaGVja1ZhbHVlKHIsIHEpXG4gIHZhciBtb250cCA9IEJOLm1vbnQocClcbiAgdmFyIHcgPSBzLmludm0ocSlcbiAgdmFyIHYgPSBnLnRvUmVkKG1vbnRwKVxuICAgIC5yZWRQb3cobmV3IEJOKGhhc2gpLm11bCh3KS5tb2QocSkpXG4gICAgLmZyb21SZWQoKVxuICAgIC5tdWwoXG4gICAgICB5LnRvUmVkKG1vbnRwKVxuICAgICAgICAucmVkUG93KHIubXVsKHcpLm1vZChxKSlcbiAgICAgICAgLmZyb21SZWQoKVxuICApLm1vZChwKS5tb2QocSlcbiAgcmV0dXJuICF2LmNtcChyKVxufVxuXG5mdW5jdGlvbiBjaGVja1ZhbHVlIChiLCBxKSB7XG4gIGlmIChiLmNtcG4oMCkgPD0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBzaWcnKVxuICB9XG4gIGlmIChiLmNtcChxKSA+PSBxKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHNpZycpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2ZXJpZnlcbiJdfQ==
},{"./curves":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/curves.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/bn.js/lib/bn.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic.js","parse-asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/sign.js":[function(require,module,exports){
(function (Buffer){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var createHmac = require('create-hmac')
var crt = require('browserify-rsa')
var curves = require('./curves')
var elliptic = require('elliptic')
var parseKeys = require('parse-asn1')

var BN = require('bn.js')
var EC = elliptic.ec

function sign (hash, key, hashType, signType) {
  var priv = parseKeys(key)
  if (priv.curve) {
    if (signType !== 'ecdsa') throw new Error('wrong private key type')

    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') {
      throw new Error('wrong private key type')
    }
    return dsaSign(hash, priv, hashType)
  } else {
    if (signType !== 'rsa') throw new Error('wrong private key type')
  }

  var len = priv.modulus.byteLength()
  var pad = [ 0, 1 ]
  while (hash.length + pad.length + 1 < len) {
    pad.push(0xff)
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }

  var out = crt(pad, priv)
  return out
}

function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new EC(curveId)
  var key = curve.genKeyPair()

  key._importPrivate(priv.privateKey)
  var out = key.sign(hash)

  return new Buffer(out.toDER())
}

function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (!s.cmpn(0)) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}

function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80) {
    r = [ 0 ].concat(r)
  }
  // Pad values
  if (s[0] & 0x80) {
    s = [0].concat(s)
  }

  var total = r.length + s.length + 4
  var res = [ 0x30, total, 0x02, r.length ]
  res = res.concat(r, [ 0x02, s.length ], s)
  return new Buffer(res)
}

function getKey (x, q, hash, algo) {
  x = new Buffer(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - x.length)
    zeros.fill(0)
    x = Buffer.concat([zeros, x])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = new Buffer(hlen)
  v.fill(1)
  var k = new Buffer(hlen)
  k.fill(0)
  k = createHmac(algo, k)
    .update(v)
    .update(new Buffer([0]))
    .update(x)
    .update(hbits)
    .digest()
  v = createHmac(algo, k)
    .update(v)
    .digest()
  k = createHmac(algo, k)
    .update(v)
    .update(new Buffer([1]))
    .update(x)
    .update(hbits)
    .digest()
  v = createHmac(algo, k)
    .update(v)
    .digest()
  return {
    k: k,
    v: v
  }
}

function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) {
    bits.ishrn(shift)
  }
  return bits
}

function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = new Buffer(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - out.length)
    zeros.fill(0)
    out = Buffer.concat([zeros, out])
  }
  return out
}

function makeKey (q, kv, algo) {
  var t, k

  do {
    t = new Buffer('')

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k)
        .update(kv.v)
        .digest()
      t = Buffer.concat([t, kv.v])
    }

    k = bits2int(t, q)
    kv.k = createHmac(algo, kv.k)
      .update(kv.v)
      .update(new Buffer([0]))
      .digest()
    kv.v = createHmac(algo, kv.k)
      .update(kv.v)
      .digest()
  } while (k.cmp(q) !== -1)

  return k
}

function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

module.exports = sign
module.exports.getKey = getKey
module.exports.makeKey = makeKey

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL3NpZ24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbXVjaCBvZiB0aGlzIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L3NlbGYtc2lnbmVkL2Jsb2IvZ2gtcGFnZXMvbGliL3JzYS5qc1xudmFyIGNyZWF0ZUhtYWMgPSByZXF1aXJlKCdjcmVhdGUtaG1hYycpXG52YXIgY3J0ID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1yc2EnKVxudmFyIGN1cnZlcyA9IHJlcXVpcmUoJy4vY3VydmVzJylcbnZhciBlbGxpcHRpYyA9IHJlcXVpcmUoJ2VsbGlwdGljJylcbnZhciBwYXJzZUtleXMgPSByZXF1aXJlKCdwYXJzZS1hc24xJylcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKVxudmFyIEVDID0gZWxsaXB0aWMuZWNcblxuZnVuY3Rpb24gc2lnbiAoaGFzaCwga2V5LCBoYXNoVHlwZSwgc2lnblR5cGUpIHtcbiAgdmFyIHByaXYgPSBwYXJzZUtleXMoa2V5KVxuICBpZiAocHJpdi5jdXJ2ZSkge1xuICAgIGlmIChzaWduVHlwZSAhPT0gJ2VjZHNhJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwcml2YXRlIGtleSB0eXBlJylcblxuICAgIHJldHVybiBlY1NpZ24oaGFzaCwgcHJpdilcbiAgfSBlbHNlIGlmIChwcml2LnR5cGUgPT09ICdkc2EnKSB7XG4gICAgaWYgKHNpZ25UeXBlICE9PSAnZHNhJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwcml2YXRlIGtleSB0eXBlJylcbiAgICB9XG4gICAgcmV0dXJuIGRzYVNpZ24oaGFzaCwgcHJpdiwgaGFzaFR5cGUpXG4gIH0gZWxzZSB7XG4gICAgaWYgKHNpZ25UeXBlICE9PSAncnNhJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwcml2YXRlIGtleSB0eXBlJylcbiAgfVxuXG4gIHZhciBsZW4gPSBwcml2Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpXG4gIHZhciBwYWQgPSBbIDAsIDEgXVxuICB3aGlsZSAoaGFzaC5sZW5ndGggKyBwYWQubGVuZ3RoICsgMSA8IGxlbikge1xuICAgIHBhZC5wdXNoKDB4ZmYpXG4gIH1cbiAgcGFkLnB1c2goMHgwMClcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgaGFzaC5sZW5ndGgpIHtcbiAgICBwYWQucHVzaChoYXNoW2ldKVxuICB9XG5cbiAgdmFyIG91dCA9IGNydChwYWQsIHByaXYpXG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gZWNTaWduIChoYXNoLCBwcml2KSB7XG4gIHZhciBjdXJ2ZUlkID0gY3VydmVzW3ByaXYuY3VydmUuam9pbignLicpXVxuICBpZiAoIWN1cnZlSWQpIHRocm93IG5ldyBFcnJvcigndW5rbm93biBjdXJ2ZSAnICsgcHJpdi5jdXJ2ZS5qb2luKCcuJykpXG5cbiAgdmFyIGN1cnZlID0gbmV3IEVDKGN1cnZlSWQpXG4gIHZhciBrZXkgPSBjdXJ2ZS5nZW5LZXlQYWlyKClcblxuICBrZXkuX2ltcG9ydFByaXZhdGUocHJpdi5wcml2YXRlS2V5KVxuICB2YXIgb3V0ID0ga2V5LnNpZ24oaGFzaClcblxuICByZXR1cm4gbmV3IEJ1ZmZlcihvdXQudG9ERVIoKSlcbn1cblxuZnVuY3Rpb24gZHNhU2lnbiAoaGFzaCwgcHJpdiwgYWxnbykge1xuICB2YXIgeCA9IHByaXYucGFyYW1zLnByaXZfa2V5XG4gIHZhciBwID0gcHJpdi5wYXJhbXMucFxuICB2YXIgcSA9IHByaXYucGFyYW1zLnFcbiAgdmFyIGcgPSBwcml2LnBhcmFtcy5nXG4gIHZhciByID0gbmV3IEJOKDApXG4gIHZhciBrXG4gIHZhciBIID0gYml0czJpbnQoaGFzaCwgcSkubW9kKHEpXG4gIHZhciBzID0gZmFsc2VcbiAgdmFyIGt2ID0gZ2V0S2V5KHgsIHEsIGhhc2gsIGFsZ28pXG4gIHdoaWxlIChzID09PSBmYWxzZSkge1xuICAgIGsgPSBtYWtlS2V5KHEsIGt2LCBhbGdvKVxuICAgIHIgPSBtYWtlUihnLCBrLCBwLCBxKVxuICAgIHMgPSBrLmludm0ocSkuaW11bChILmFkZCh4Lm11bChyKSkpLm1vZChxKVxuICAgIGlmICghcy5jbXBuKDApKSB7XG4gICAgICBzID0gZmFsc2VcbiAgICAgIHIgPSBuZXcgQk4oMClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvREVSKHIsIHMpXG59XG5cbmZ1bmN0aW9uIHRvREVSIChyLCBzKSB7XG4gIHIgPSByLnRvQXJyYXkoKVxuICBzID0gcy50b0FycmF5KClcblxuICAvLyBQYWQgdmFsdWVzXG4gIGlmIChyWzBdICYgMHg4MCkge1xuICAgIHIgPSBbIDAgXS5jb25jYXQocilcbiAgfVxuICAvLyBQYWQgdmFsdWVzXG4gIGlmIChzWzBdICYgMHg4MCkge1xuICAgIHMgPSBbMF0uY29uY2F0KHMpXG4gIH1cblxuICB2YXIgdG90YWwgPSByLmxlbmd0aCArIHMubGVuZ3RoICsgNFxuICB2YXIgcmVzID0gWyAweDMwLCB0b3RhbCwgMHgwMiwgci5sZW5ndGggXVxuICByZXMgPSByZXMuY29uY2F0KHIsIFsgMHgwMiwgcy5sZW5ndGggXSwgcylcbiAgcmV0dXJuIG5ldyBCdWZmZXIocmVzKVxufVxuXG5mdW5jdGlvbiBnZXRLZXkgKHgsIHEsIGhhc2gsIGFsZ28pIHtcbiAgeCA9IG5ldyBCdWZmZXIoeC50b0FycmF5KCkpXG4gIGlmICh4Lmxlbmd0aCA8IHEuYnl0ZUxlbmd0aCgpKSB7XG4gICAgdmFyIHplcm9zID0gbmV3IEJ1ZmZlcihxLmJ5dGVMZW5ndGgoKSAtIHgubGVuZ3RoKVxuICAgIHplcm9zLmZpbGwoMClcbiAgICB4ID0gQnVmZmVyLmNvbmNhdChbemVyb3MsIHhdKVxuICB9XG4gIHZhciBobGVuID0gaGFzaC5sZW5ndGhcbiAgdmFyIGhiaXRzID0gYml0czJvY3RldHMoaGFzaCwgcSlcbiAgdmFyIHYgPSBuZXcgQnVmZmVyKGhsZW4pXG4gIHYuZmlsbCgxKVxuICB2YXIgayA9IG5ldyBCdWZmZXIoaGxlbilcbiAgay5maWxsKDApXG4gIGsgPSBjcmVhdGVIbWFjKGFsZ28sIGspXG4gICAgLnVwZGF0ZSh2KVxuICAgIC51cGRhdGUobmV3IEJ1ZmZlcihbMF0pKVxuICAgIC51cGRhdGUoeClcbiAgICAudXBkYXRlKGhiaXRzKVxuICAgIC5kaWdlc3QoKVxuICB2ID0gY3JlYXRlSG1hYyhhbGdvLCBrKVxuICAgIC51cGRhdGUodilcbiAgICAuZGlnZXN0KClcbiAgayA9IGNyZWF0ZUhtYWMoYWxnbywgaylcbiAgICAudXBkYXRlKHYpXG4gICAgLnVwZGF0ZShuZXcgQnVmZmVyKFsxXSkpXG4gICAgLnVwZGF0ZSh4KVxuICAgIC51cGRhdGUoaGJpdHMpXG4gICAgLmRpZ2VzdCgpXG4gIHYgPSBjcmVhdGVIbWFjKGFsZ28sIGspXG4gICAgLnVwZGF0ZSh2KVxuICAgIC5kaWdlc3QoKVxuICByZXR1cm4ge1xuICAgIGs6IGssXG4gICAgdjogdlxuICB9XG59XG5cbmZ1bmN0aW9uIGJpdHMyaW50IChvYml0cywgcSkge1xuICB2YXIgYml0cyA9IG5ldyBCTihvYml0cylcbiAgdmFyIHNoaWZ0ID0gKG9iaXRzLmxlbmd0aCA8PCAzKSAtIHEuYml0TGVuZ3RoKClcbiAgaWYgKHNoaWZ0ID4gMCkge1xuICAgIGJpdHMuaXNocm4oc2hpZnQpXG4gIH1cbiAgcmV0dXJuIGJpdHNcbn1cblxuZnVuY3Rpb24gYml0czJvY3RldHMgKGJpdHMsIHEpIHtcbiAgYml0cyA9IGJpdHMyaW50KGJpdHMsIHEpXG4gIGJpdHMgPSBiaXRzLm1vZChxKVxuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcihiaXRzLnRvQXJyYXkoKSlcbiAgaWYgKG91dC5sZW5ndGggPCBxLmJ5dGVMZW5ndGgoKSkge1xuICAgIHZhciB6ZXJvcyA9IG5ldyBCdWZmZXIocS5ieXRlTGVuZ3RoKCkgLSBvdXQubGVuZ3RoKVxuICAgIHplcm9zLmZpbGwoMClcbiAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFt6ZXJvcywgb3V0XSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIG1ha2VLZXkgKHEsIGt2LCBhbGdvKSB7XG4gIHZhciB0LCBrXG5cbiAgZG8ge1xuICAgIHQgPSBuZXcgQnVmZmVyKCcnKVxuXG4gICAgd2hpbGUgKHQubGVuZ3RoICogOCA8IHEuYml0TGVuZ3RoKCkpIHtcbiAgICAgIGt2LnYgPSBjcmVhdGVIbWFjKGFsZ28sIGt2LmspXG4gICAgICAgIC51cGRhdGUoa3YudilcbiAgICAgICAgLmRpZ2VzdCgpXG4gICAgICB0ID0gQnVmZmVyLmNvbmNhdChbdCwga3Yudl0pXG4gICAgfVxuXG4gICAgayA9IGJpdHMyaW50KHQsIHEpXG4gICAga3YuayA9IGNyZWF0ZUhtYWMoYWxnbywga3YuaylcbiAgICAgIC51cGRhdGUoa3YudilcbiAgICAgIC51cGRhdGUobmV3IEJ1ZmZlcihbMF0pKVxuICAgICAgLmRpZ2VzdCgpXG4gICAga3YudiA9IGNyZWF0ZUhtYWMoYWxnbywga3YuaylcbiAgICAgIC51cGRhdGUoa3YudilcbiAgICAgIC5kaWdlc3QoKVxuICB9IHdoaWxlIChrLmNtcChxKSAhPT0gLTEpXG5cbiAgcmV0dXJuIGtcbn1cblxuZnVuY3Rpb24gbWFrZVIgKGcsIGssIHAsIHEpIHtcbiAgcmV0dXJuIGcudG9SZWQoQk4ubW9udChwKSkucmVkUG93KGspLmZyb21SZWQoKS5tb2QocSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaWduXG5tb2R1bGUuZXhwb3J0cy5nZXRLZXkgPSBnZXRLZXlcbm1vZHVsZS5leHBvcnRzLm1ha2VLZXkgPSBtYWtlS2V5XG4iXX0=
},{"./curves":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/curves.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/bn.js/lib/bn.js","browserify-rsa":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/browserify-rsa/index.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","create-hmac":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hmac/browser.js","elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic.js","parse-asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/index.js":[function(require,module,exports){
(function (Buffer){
var asn1 = require('./asn1')
var aesid = require('./aesid.json')
var fixProc = require('./fixProc')
var ciphers = require('browserify-aes')
var compat = require('pbkdf2')
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = new Buffer(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'PUBLIC KEY':
      ndata = asn1.PublicKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen)
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBhc24xID0gcmVxdWlyZSgnLi9hc24xJylcbnZhciBhZXNpZCA9IHJlcXVpcmUoJy4vYWVzaWQuanNvbicpXG52YXIgZml4UHJvYyA9IHJlcXVpcmUoJy4vZml4UHJvYycpXG52YXIgY2lwaGVycyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzJylcbnZhciBjb21wYXQgPSByZXF1aXJlKCdwYmtkZjInKVxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZUtleXNcblxuZnVuY3Rpb24gcGFyc2VLZXlzIChidWZmZXIpIHtcbiAgdmFyIHBhc3N3b3JkXG4gIGlmICh0eXBlb2YgYnVmZmVyID09PSAnb2JqZWN0JyAmJiAhQnVmZmVyLmlzQnVmZmVyKGJ1ZmZlcikpIHtcbiAgICBwYXNzd29yZCA9IGJ1ZmZlci5wYXNzcGhyYXNlXG4gICAgYnVmZmVyID0gYnVmZmVyLmtleVxuICB9XG4gIGlmICh0eXBlb2YgYnVmZmVyID09PSAnc3RyaW5nJykge1xuICAgIGJ1ZmZlciA9IG5ldyBCdWZmZXIoYnVmZmVyKVxuICB9XG5cbiAgdmFyIHN0cmlwcGVkID0gZml4UHJvYyhidWZmZXIsIHBhc3N3b3JkKVxuXG4gIHZhciB0eXBlID0gc3RyaXBwZWQudGFnXG4gIHZhciBkYXRhID0gc3RyaXBwZWQuZGF0YVxuICB2YXIgc3VidHlwZSwgbmRhdGFcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnUFVCTElDIEtFWSc6XG4gICAgICBuZGF0YSA9IGFzbjEuUHVibGljS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICAgIHN1YnR5cGUgPSBuZGF0YS5hbGdvcml0aG0uYWxnb3JpdGhtLmpvaW4oJy4nKVxuICAgICAgc3dpdGNoIChzdWJ0eXBlKSB7XG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTEzNTQ5LjEuMS4xJzpcbiAgICAgICAgICByZXR1cm4gYXNuMS5SU0FQdWJsaWNLZXkuZGVjb2RlKG5kYXRhLnN1YmplY3RQdWJsaWNLZXkuZGF0YSwgJ2RlcicpXG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTAwNDUuMi4xJzpcbiAgICAgICAgICBuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleSA9IG5kYXRhLnN1YmplY3RQdWJsaWNLZXlcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ2VjJyxcbiAgICAgICAgICAgIGRhdGE6IG5kYXRhXG4gICAgICAgICAgfVxuICAgICAgICBjYXNlICcxLjIuODQwLjEwMDQwLjQuMSc6XG4gICAgICAgICAgbmRhdGEuYWxnb3JpdGhtLnBhcmFtcy5wdWJfa2V5ID0gYXNuMS5EU0FwYXJhbS5kZWNvZGUobmRhdGEuc3ViamVjdFB1YmxpY0tleS5kYXRhLCAnZGVyJylcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ2RzYScsXG4gICAgICAgICAgICBkYXRhOiBuZGF0YS5hbGdvcml0aG0ucGFyYW1zXG4gICAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IGlkICcgKyBzdWJ0eXBlKVxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSB0eXBlICcgKyB0eXBlKVxuICAgIGNhc2UgJ0VOQ1JZUFRFRCBQUklWQVRFIEtFWSc6XG4gICAgICBkYXRhID0gYXNuMS5FbmNyeXB0ZWRQcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICAgIGRhdGEgPSBkZWNyeXB0KGRhdGEsIHBhc3N3b3JkKVxuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgIGNhc2UgJ1BSSVZBVEUgS0VZJzpcbiAgICAgIG5kYXRhID0gYXNuMS5Qcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICAgIHN1YnR5cGUgPSBuZGF0YS5hbGdvcml0aG0uYWxnb3JpdGhtLmpvaW4oJy4nKVxuICAgICAgc3dpdGNoIChzdWJ0eXBlKSB7XG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTEzNTQ5LjEuMS4xJzpcbiAgICAgICAgICByZXR1cm4gYXNuMS5SU0FQcml2YXRlS2V5LmRlY29kZShuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleSwgJ2RlcicpXG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTAwNDUuMi4xJzpcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY3VydmU6IG5kYXRhLmFsZ29yaXRobS5jdXJ2ZSxcbiAgICAgICAgICAgIHByaXZhdGVLZXk6IGFzbjEuRUNQcml2YXRlS2V5LmRlY29kZShuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleSwgJ2RlcicpLnByaXZhdGVLZXlcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTAwNDAuNC4xJzpcbiAgICAgICAgICBuZGF0YS5hbGdvcml0aG0ucGFyYW1zLnByaXZfa2V5ID0gYXNuMS5EU0FwYXJhbS5kZWNvZGUobmRhdGEuc3ViamVjdFByaXZhdGVLZXksICdkZXInKVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnZHNhJyxcbiAgICAgICAgICAgIHBhcmFtczogbmRhdGEuYWxnb3JpdGhtLnBhcmFtc1xuICAgICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSBpZCAnICsgc3VidHlwZSlcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgdHlwZSAnICsgdHlwZSlcbiAgICBjYXNlICdSU0EgUFVCTElDIEtFWSc6XG4gICAgICByZXR1cm4gYXNuMS5SU0FQdWJsaWNLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgIGNhc2UgJ1JTQSBQUklWQVRFIEtFWSc6XG4gICAgICByZXR1cm4gYXNuMS5SU0FQcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICBjYXNlICdEU0EgUFJJVkFURSBLRVknOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ2RzYScsXG4gICAgICAgIHBhcmFtczogYXNuMS5EU0FQcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICAgIH1cbiAgICBjYXNlICdFQyBQUklWQVRFIEtFWSc6XG4gICAgICBkYXRhID0gYXNuMS5FQ1ByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY3VydmU6IGRhdGEucGFyYW1ldGVycy52YWx1ZSxcbiAgICAgICAgcHJpdmF0ZUtleTogZGF0YS5wcml2YXRlS2V5XG4gICAgICB9XG4gICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSB0eXBlICcgKyB0eXBlKVxuICB9XG59XG5wYXJzZUtleXMuc2lnbmF0dXJlID0gYXNuMS5zaWduYXR1cmVcbmZ1bmN0aW9uIGRlY3J5cHQgKGRhdGEsIHBhc3N3b3JkKSB7XG4gIHZhciBzYWx0ID0gZGF0YS5hbGdvcml0aG0uZGVjcnlwdC5rZGUua2RlcGFyYW1zLnNhbHRcbiAgdmFyIGl0ZXJzID0gcGFyc2VJbnQoZGF0YS5hbGdvcml0aG0uZGVjcnlwdC5rZGUua2RlcGFyYW1zLml0ZXJzLnRvU3RyaW5nKCksIDEwKVxuICB2YXIgYWxnbyA9IGFlc2lkW2RhdGEuYWxnb3JpdGhtLmRlY3J5cHQuY2lwaGVyLmFsZ28uam9pbignLicpXVxuICB2YXIgaXYgPSBkYXRhLmFsZ29yaXRobS5kZWNyeXB0LmNpcGhlci5pdlxuICB2YXIgY2lwaGVyVGV4dCA9IGRhdGEuc3ViamVjdFByaXZhdGVLZXlcbiAgdmFyIGtleWxlbiA9IHBhcnNlSW50KGFsZ28uc3BsaXQoJy0nKVsxXSwgMTApIC8gOFxuICB2YXIga2V5ID0gY29tcGF0LnBia2RmMlN5bmMocGFzc3dvcmQsIHNhbHQsIGl0ZXJzLCBrZXlsZW4pXG4gIHZhciBjaXBoZXIgPSBjaXBoZXJzLmNyZWF0ZURlY2lwaGVyaXYoYWxnbywga2V5LCBpdilcbiAgdmFyIG91dCA9IFtdXG4gIG91dC5wdXNoKGNpcGhlci51cGRhdGUoY2lwaGVyVGV4dCkpXG4gIG91dC5wdXNoKGNpcGhlci5maW5hbCgpKVxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChvdXQpXG59XG4iXX0=
},{"./aesid.json":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/aesid.json","./asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/asn1.js","./fixProc":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/fixProc.js","browserify-aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/browser.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","pbkdf2":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/pbkdf2/browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/pbkdf2/browser.js":[function(require,module,exports){
(function (Buffer){
var createHmac = require('create-hmac')
var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

exports.pbkdf2 = pbkdf2
function pbkdf2 (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  if (typeof callback !== 'function') {
    throw new Error('No callback provided to pbkdf2')
  }

  var result = pbkdf2Sync(password, salt, iterations, keylen, digest)
  setTimeout(function () {
    callback(undefined, result)
  })
}

exports.pbkdf2Sync = pbkdf2Sync
function pbkdf2Sync (password, salt, iterations, keylen, digest) {
  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC) {
    throw new TypeError('Bad key length')
  }

  digest = digest || 'sha1'

  if (!Buffer.isBuffer(password)) password = new Buffer(password, 'binary')
  if (!Buffer.isBuffer(salt)) salt = new Buffer(salt, 'binary')

  var hLen
  var l = 1
  var DK = new Buffer(keylen)
  var block1 = new Buffer(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var r
  var T

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)
    var U = createHmac(digest, password).update(block1).digest()

    if (!hLen) {
      hLen = U.length
      T = new Buffer(hLen)
      l = Math.ceil(keylen / hLen)
      r = keylen - (l - 1) * hLen
    }

    U.copy(T, 0, 0, hLen)

    for (var j = 1; j < iterations; j++) {
      U = createHmac(digest, password).update(U).digest()

      for (var k = 0; k < hLen; k++) {
        T[k] ^= U[k]
      }
    }

    var destPos = (i - 1) * hLen
    var len = (i === l ? r : hLen)
    T.copy(DK, destPos, 0, len)
  }

  return DK
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcGJrZGYyL2Jyb3dzZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNyZWF0ZUhtYWMgPSByZXF1aXJlKCdjcmVhdGUtaG1hYycpXG52YXIgTUFYX0FMTE9DID0gTWF0aC5wb3coMiwgMzApIC0gMSAvLyBkZWZhdWx0IGluIGlvanNcblxuZXhwb3J0cy5wYmtkZjIgPSBwYmtkZjJcbmZ1bmN0aW9uIHBia2RmMiAocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgZGlnZXN0LCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIGRpZ2VzdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gZGlnZXN0XG4gICAgZGlnZXN0ID0gdW5kZWZpbmVkXG4gIH1cblxuICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBjYWxsYmFjayBwcm92aWRlZCB0byBwYmtkZjInKVxuICB9XG5cbiAgdmFyIHJlc3VsdCA9IHBia2RmMlN5bmMocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgZGlnZXN0KVxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBjYWxsYmFjayh1bmRlZmluZWQsIHJlc3VsdClcbiAgfSlcbn1cblxuZXhwb3J0cy5wYmtkZjJTeW5jID0gcGJrZGYyU3luY1xuZnVuY3Rpb24gcGJrZGYyU3luYyAocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgZGlnZXN0KSB7XG4gIGlmICh0eXBlb2YgaXRlcmF0aW9ucyAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJdGVyYXRpb25zIG5vdCBhIG51bWJlcicpXG4gIH1cblxuICBpZiAoaXRlcmF0aW9ucyA8IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCYWQgaXRlcmF0aW9ucycpXG4gIH1cblxuICBpZiAodHlwZW9mIGtleWxlbiAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdLZXkgbGVuZ3RoIG5vdCBhIG51bWJlcicpXG4gIH1cblxuICBpZiAoa2V5bGVuIDwgMCB8fCBrZXlsZW4gPiBNQVhfQUxMT0MpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCYWQga2V5IGxlbmd0aCcpXG4gIH1cblxuICBkaWdlc3QgPSBkaWdlc3QgfHwgJ3NoYTEnXG5cbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocGFzc3dvcmQpKSBwYXNzd29yZCA9IG5ldyBCdWZmZXIocGFzc3dvcmQsICdiaW5hcnknKVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihzYWx0KSkgc2FsdCA9IG5ldyBCdWZmZXIoc2FsdCwgJ2JpbmFyeScpXG5cbiAgdmFyIGhMZW5cbiAgdmFyIGwgPSAxXG4gIHZhciBESyA9IG5ldyBCdWZmZXIoa2V5bGVuKVxuICB2YXIgYmxvY2sxID0gbmV3IEJ1ZmZlcihzYWx0Lmxlbmd0aCArIDQpXG4gIHNhbHQuY29weShibG9jazEsIDAsIDAsIHNhbHQubGVuZ3RoKVxuXG4gIHZhciByXG4gIHZhciBUXG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPD0gbDsgaSsrKSB7XG4gICAgYmxvY2sxLndyaXRlVUludDMyQkUoaSwgc2FsdC5sZW5ndGgpXG4gICAgdmFyIFUgPSBjcmVhdGVIbWFjKGRpZ2VzdCwgcGFzc3dvcmQpLnVwZGF0ZShibG9jazEpLmRpZ2VzdCgpXG5cbiAgICBpZiAoIWhMZW4pIHtcbiAgICAgIGhMZW4gPSBVLmxlbmd0aFxuICAgICAgVCA9IG5ldyBCdWZmZXIoaExlbilcbiAgICAgIGwgPSBNYXRoLmNlaWwoa2V5bGVuIC8gaExlbilcbiAgICAgIHIgPSBrZXlsZW4gLSAobCAtIDEpICogaExlblxuICAgIH1cblxuICAgIFUuY29weShULCAwLCAwLCBoTGVuKVxuXG4gICAgZm9yICh2YXIgaiA9IDE7IGogPCBpdGVyYXRpb25zOyBqKyspIHtcbiAgICAgIFUgPSBjcmVhdGVIbWFjKGRpZ2VzdCwgcGFzc3dvcmQpLnVwZGF0ZShVKS5kaWdlc3QoKVxuXG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IGhMZW47IGsrKykge1xuICAgICAgICBUW2tdIF49IFVba11cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGVzdFBvcyA9IChpIC0gMSkgKiBoTGVuXG4gICAgdmFyIGxlbiA9IChpID09PSBsID8gciA6IGhMZW4pXG4gICAgVC5jb3B5KERLLCBkZXN0UG9zLCAwLCBsZW4pXG4gIH1cblxuICByZXR1cm4gREtcbn1cbiJdfQ==
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","create-hmac":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hmac/browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hmac/browser.js":[function(require,module,exports){
(function (Buffer){
'use strict';
var createHash = require('create-hash/browser');
var inherits = require('inherits')

var Transform = require('stream').Transform

var ZEROS = new Buffer(128)
ZEROS.fill(0)

function Hmac(alg, key) {
  Transform.call(this)
  alg = alg.toLowerCase()
  if (typeof key === 'string') {
    key = new Buffer(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = createHash(alg).update(key).digest()

  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = new Buffer(blocksize)
  var opad = this._opad = new Buffer(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = createHash(alg).update(ipad)
}

inherits(Hmac, Transform)

Hmac.prototype.update = function (data, enc) {
  this._hash.update(data, enc)

  return this
}

Hmac.prototype._transform = function (data, _, next) {
  this._hash.update(data)

  next()
}

Hmac.prototype._flush = function (next) {
  this.push(this.digest())

  next()
}

Hmac.prototype.digest = function (enc) {
  var h = this._hash.digest()

  return createHash(this._alg).update(this._opad).update(h).digest(enc)
}

module.exports = function createHmac(alg, key) {
  return new Hmac(alg, key)
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhtYWMvYnJvd3Nlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoL2Jyb3dzZXInKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3N0cmVhbScpLlRyYW5zZm9ybVxuXG52YXIgWkVST1MgPSBuZXcgQnVmZmVyKDEyOClcblpFUk9TLmZpbGwoMClcblxuZnVuY3Rpb24gSG1hYyhhbGcsIGtleSkge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuICBhbGcgPSBhbGcudG9Mb3dlckNhc2UoKVxuICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcbiAgICBrZXkgPSBuZXcgQnVmZmVyKGtleSlcbiAgfVxuXG4gIHZhciBibG9ja3NpemUgPSAoYWxnID09PSAnc2hhNTEyJyB8fCBhbGcgPT09ICdzaGEzODQnKSA/IDEyOCA6IDY0XG5cbiAgdGhpcy5fYWxnID0gYWxnXG4gIHRoaXMuX2tleSA9IGtleVxuXG4gIGlmIChrZXkubGVuZ3RoID4gYmxvY2tzaXplKSB7XG4gICAga2V5ID0gY3JlYXRlSGFzaChhbGcpLnVwZGF0ZShrZXkpLmRpZ2VzdCgpXG5cbiAgfSBlbHNlIGlmIChrZXkubGVuZ3RoIDwgYmxvY2tzaXplKSB7XG4gICAga2V5ID0gQnVmZmVyLmNvbmNhdChba2V5LCBaRVJPU10sIGJsb2Nrc2l6ZSlcbiAgfVxuXG4gIHZhciBpcGFkID0gdGhpcy5faXBhZCA9IG5ldyBCdWZmZXIoYmxvY2tzaXplKVxuICB2YXIgb3BhZCA9IHRoaXMuX29wYWQgPSBuZXcgQnVmZmVyKGJsb2Nrc2l6ZSlcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2Nrc2l6ZTsgaSsrKSB7XG4gICAgaXBhZFtpXSA9IGtleVtpXSBeIDB4MzZcbiAgICBvcGFkW2ldID0ga2V5W2ldIF4gMHg1Q1xuICB9XG5cbiAgdGhpcy5faGFzaCA9IGNyZWF0ZUhhc2goYWxnKS51cGRhdGUoaXBhZClcbn1cblxuaW5oZXJpdHMoSG1hYywgVHJhbnNmb3JtKVxuXG5IbWFjLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSwgZW5jKSB7XG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEsIGVuYylcblxuICByZXR1cm4gdGhpc1xufVxuXG5IbWFjLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGRhdGEsIF8sIG5leHQpIHtcbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcblxuICBuZXh0KClcbn1cblxuSG1hYy5wcm90b3R5cGUuX2ZsdXNoID0gZnVuY3Rpb24gKG5leHQpIHtcbiAgdGhpcy5wdXNoKHRoaXMuZGlnZXN0KCkpXG5cbiAgbmV4dCgpXG59XG5cbkhtYWMucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgdmFyIGggPSB0aGlzLl9oYXNoLmRpZ2VzdCgpXG5cbiAgcmV0dXJuIGNyZWF0ZUhhc2godGhpcy5fYWxnKS51cGRhdGUodGhpcy5fb3BhZCkudXBkYXRlKGgpLmRpZ2VzdChlbmMpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlSG1hYyhhbGcsIGtleSkge1xuICByZXR1cm4gbmV3IEhtYWMoYWxnLCBrZXkpXG59XG4iXX0=
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","create-hash/browser":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/browser.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js","stream":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/stream-browserify/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/browser.js":[function(require,module,exports){
(function (Buffer){
'use strict';
var inherits = require('inherits')
var md5 = require('./md5')
var rmd160 = require('ripemd160')
var sha = require('sha.js')

var Base = require('cipher-base')

function HashNoConstructor(hash) {
  Base.call(this, 'digest')

  this._hash = hash
  this.buffers = []
}

inherits(HashNoConstructor, Base)

HashNoConstructor.prototype._update = function (data) {
  this.buffers.push(data)
}

HashNoConstructor.prototype._final = function () {
  var buf = Buffer.concat(this.buffers)
  var r = this._hash(buf)
  this.buffers = null

  return r
}

function Hash(hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if ('md5' === alg) return new HashNoConstructor(md5)
  if ('rmd160' === alg || 'ripemd160' === alg) return new HashNoConstructor(rmd160)

  return new Hash(sha(alg))
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvYnJvd3Nlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIG1kNSA9IHJlcXVpcmUoJy4vbWQ1JylcbnZhciBybWQxNjAgPSByZXF1aXJlKCdyaXBlbWQxNjAnKVxudmFyIHNoYSA9IHJlcXVpcmUoJ3NoYS5qcycpXG5cbnZhciBCYXNlID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxuXG5mdW5jdGlvbiBIYXNoTm9Db25zdHJ1Y3RvcihoYXNoKSB7XG4gIEJhc2UuY2FsbCh0aGlzLCAnZGlnZXN0JylcblxuICB0aGlzLl9oYXNoID0gaGFzaFxuICB0aGlzLmJ1ZmZlcnMgPSBbXVxufVxuXG5pbmhlcml0cyhIYXNoTm9Db25zdHJ1Y3RvciwgQmFzZSlcblxuSGFzaE5vQ29uc3RydWN0b3IucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmJ1ZmZlcnMucHVzaChkYXRhKVxufVxuXG5IYXNoTm9Db25zdHJ1Y3Rvci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYnVmID0gQnVmZmVyLmNvbmNhdCh0aGlzLmJ1ZmZlcnMpXG4gIHZhciByID0gdGhpcy5faGFzaChidWYpXG4gIHRoaXMuYnVmZmVycyA9IG51bGxcblxuICByZXR1cm4gclxufVxuXG5mdW5jdGlvbiBIYXNoKGhhc2gpIHtcbiAgQmFzZS5jYWxsKHRoaXMsICdkaWdlc3QnKVxuXG4gIHRoaXMuX2hhc2ggPSBoYXNoXG59XG5cbmluaGVyaXRzKEhhc2gsIEJhc2UpXG5cbkhhc2gucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLl9oYXNoLnVwZGF0ZShkYXRhKVxufVxuXG5IYXNoLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9oYXNoLmRpZ2VzdCgpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlSGFzaCAoYWxnKSB7XG4gIGFsZyA9IGFsZy50b0xvd2VyQ2FzZSgpXG4gIGlmICgnbWQ1JyA9PT0gYWxnKSByZXR1cm4gbmV3IEhhc2hOb0NvbnN0cnVjdG9yKG1kNSlcbiAgaWYgKCdybWQxNjAnID09PSBhbGcgfHwgJ3JpcGVtZDE2MCcgPT09IGFsZykgcmV0dXJuIG5ldyBIYXNoTm9Db25zdHJ1Y3RvcihybWQxNjApXG5cbiAgcmV0dXJuIG5ldyBIYXNoKHNoYShhbGcpKVxufVxuIl19
},{"./md5":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/md5.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","cipher-base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/cipher-base/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js","ripemd160":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/ripemd160/lib/ripemd160.js","sha.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/index.js":[function(require,module,exports){
var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = require('./sha')
exports.sha1 = require('./sha1')
exports.sha224 = require('./sha224')
exports.sha256 = require('./sha256')
exports.sha384 = require('./sha384')
exports.sha512 = require('./sha512')

},{"./sha":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/sha.js","./sha1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/sha1.js","./sha224":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/sha224.js","./sha256":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/sha256.js","./sha384":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/sha384.js","./sha512":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/sha512.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/sha384.js":[function(require,module,exports){
(function (Buffer){
var inherits = require('inherits')
var SHA512 = require('./sha512')
var Hash = require('./hash')

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._a = 0xcbbb9d5d | 0
  this._b = 0x629a292a | 0
  this._c = 0x9159015a | 0
  this._d = 0x152fecd8 | 0
  this._e = 0x67332667 | 0
  this._f = 0x8eb44a87 | 0
  this._g = 0xdb0c2e0d | 0
  this._h = 0x47b5481d | 0

  this._al = 0xc1059ed8 | 0
  this._bl = 0x367cd507 | 0
  this._cl = 0x3070dd17 | 0
  this._dl = 0xf70e5939 | 0
  this._el = 0xffc00b31 | 0
  this._fl = 0x68581511 | 0
  this._gl = 0x64f98fa7 | 0
  this._hl = 0xbefa4fa4 | 0

  return this
}

Sha384.prototype._hash = function () {
  var H = new Buffer(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._a, this._al, 0)
  writeInt64BE(this._b, this._bl, 8)
  writeInt64BE(this._c, this._cl, 16)
  writeInt64BE(this._d, this._dl, 24)
  writeInt64BE(this._e, this._el, 32)
  writeInt64BE(this._f, this._fl, 40)

  return H
}

module.exports = Sha384

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEzODQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIFNIQTUxMiA9IHJlcXVpcmUoJy4vc2hhNTEyJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcblxudmFyIFcgPSBuZXcgQXJyYXkoMTYwKVxuXG5mdW5jdGlvbiBTaGEzODQgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCAxMjgsIDExMilcbn1cblxuaW5oZXJpdHMoU2hhMzg0LCBTSEE1MTIpXG5cblNoYTM4NC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4Y2JiYjlkNWQgfCAwXG4gIHRoaXMuX2IgPSAweDYyOWEyOTJhIHwgMFxuICB0aGlzLl9jID0gMHg5MTU5MDE1YSB8IDBcbiAgdGhpcy5fZCA9IDB4MTUyZmVjZDggfCAwXG4gIHRoaXMuX2UgPSAweDY3MzMyNjY3IHwgMFxuICB0aGlzLl9mID0gMHg4ZWI0NGE4NyB8IDBcbiAgdGhpcy5fZyA9IDB4ZGIwYzJlMGQgfCAwXG4gIHRoaXMuX2ggPSAweDQ3YjU0ODFkIHwgMFxuXG4gIHRoaXMuX2FsID0gMHhjMTA1OWVkOCB8IDBcbiAgdGhpcy5fYmwgPSAweDM2N2NkNTA3IHwgMFxuICB0aGlzLl9jbCA9IDB4MzA3MGRkMTcgfCAwXG4gIHRoaXMuX2RsID0gMHhmNzBlNTkzOSB8IDBcbiAgdGhpcy5fZWwgPSAweGZmYzAwYjMxIHwgMFxuICB0aGlzLl9mbCA9IDB4Njg1ODE1MTEgfCAwXG4gIHRoaXMuX2dsID0gMHg2NGY5OGZhNyB8IDBcbiAgdGhpcy5faGwgPSAweGJlZmE0ZmE0IHwgMFxuXG4gIHJldHVybiB0aGlzXG59XG5cblNoYTM4NC5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gbmV3IEJ1ZmZlcig0OClcblxuICBmdW5jdGlvbiB3cml0ZUludDY0QkUgKGgsIGwsIG9mZnNldCkge1xuICAgIEgud3JpdGVJbnQzMkJFKGgsIG9mZnNldClcbiAgICBILndyaXRlSW50MzJCRShsLCBvZmZzZXQgKyA0KVxuICB9XG5cbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2EsIHRoaXMuX2FsLCAwKVxuICB3cml0ZUludDY0QkUodGhpcy5fYiwgdGhpcy5fYmwsIDgpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9jLCB0aGlzLl9jbCwgMTYpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9kLCB0aGlzLl9kbCwgMjQpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9lLCB0aGlzLl9lbCwgMzIpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9mLCB0aGlzLl9mbCwgNDApXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGEzODRcbiJdfQ==
},{"./hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/hash.js","./sha512":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/sha512.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/sha512.js":[function(require,module,exports){
(function (Buffer){
var inherits = require('inherits')
var Hash = require('./hash')

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._a = 0x6a09e667 | 0
  this._b = 0xbb67ae85 | 0
  this._c = 0x3c6ef372 | 0
  this._d = 0xa54ff53a | 0
  this._e = 0x510e527f | 0
  this._f = 0x9b05688c | 0
  this._g = 0x1f83d9ab | 0
  this._h = 0x5be0cd19 | 0

  this._al = 0xf3bcc908 | 0
  this._bl = 0x84caa73b | 0
  this._cl = 0xfe94f82b | 0
  this._dl = 0x5f1d36f1 | 0
  this._el = 0xade682d1 | 0
  this._fl = 0x2b3e6c1f | 0
  this._gl = 0xfb41bd6b | 0
  this._hl = 0x137e2179 | 0

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function Maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function Sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function Sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  var i = 0
  var j = 0
  var Wi, Wil
  function calcW () {
    var x = W[j - 15 * 2]
    var xl = W[j - 15 * 2 + 1]
    var gamma0 = Gamma0(x, xl)
    var gamma0l = Gamma0l(xl, x)

    x = W[j - 2 * 2]
    xl = W[j - 2 * 2 + 1]
    var gamma1 = Gamma1(x, xl)
    var gamma1l = Gamma1l(xl, x)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7 = W[j - 7 * 2]
    var Wi7l = W[j - 7 * 2 + 1]

    var Wi16 = W[j - 16 * 2]
    var Wi16l = W[j - 16 * 2 + 1]

    Wil = gamma0l + Wi7l
    Wi = gamma0 + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
    Wil = Wil + gamma1l
    Wi = Wi + gamma1 + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
    Wil = Wil + Wi16l
    Wi = Wi + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)
  }

  function loop () {
    W[j] = Wi
    W[j + 1] = Wil

    var maj = Maj(a, b, c)
    var majl = Maj(al, bl, cl)

    var sigma0h = Sigma0(a, al)
    var sigma0l = Sigma0(al, a)
    var sigma1h = Sigma1(e, el)
    var sigma1l = Sigma1(el, e)

    // t1 = h + sigma1 + ch + K[i] + W[i]
    var Ki = K[j]
    var Kil = K[j + 1]

    var ch = Ch(e, f, g)
    var chl = Ch(el, fl, gl)

    var t1l = hl + sigma1l
    var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
    t1l = t1l + chl
    t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
    t1l = t1l + Kil
    t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
    t1l = t1l + Wil
    t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

    // t2 = sigma0 + maj
    var t2l = sigma0l + majl
    var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

    h = g
    hl = gl
    g = f
    gl = fl
    f = e
    fl = el
    el = (dl + t1l) | 0
    e = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
    d = c
    dl = cl
    c = b
    cl = bl
    b = a
    bl = al
    al = (t1l + t2l) | 0
    a = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0

    i++
    j += 2
  }

  while (i < 16) {
    Wi = M.readInt32BE(j * 4)
    Wil = M.readInt32BE(j * 4 + 4)

    loop()
  }

  while (i < 80) {
    calcW()
    loop()
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
  this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
  this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
  this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
  this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
  this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
  this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
  this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
}

Sha512.prototype._hash = function () {
  var H = new Buffer(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._a, this._al, 0)
  writeInt64BE(this._b, this._bl, 8)
  writeInt64BE(this._c, this._cl, 16)
  writeInt64BE(this._d, this._dl, 24)
  writeInt64BE(this._e, this._el, 32)
  writeInt64BE(this._f, this._fl, 40)
  writeInt64BE(this._g, this._gl, 48)
  writeInt64BE(this._h, this._hl, 56)

  return H
}

module.exports = Sha512

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/hash.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/sha224.js":[function(require,module,exports){
(function (Buffer){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Sha256 = require('./sha256')
var Hash = require('./hash')

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8 | 0
  this._b = 0x367cd507 | 0
  this._c = 0x3070dd17 | 0
  this._d = 0xf70e5939 | 0
  this._e = 0xffc00b31 | 0
  this._f = 0x68581511 | 0
  this._g = 0x64f98fa7 | 0
  this._h = 0xbefa4fa4 | 0

  return this
}

Sha224.prototype._hash = function () {
  var H = new Buffer(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEyMjQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBTZWN1cmUgSGFzaCBBbGdvcml0aG0sIFNIQS0yNTYsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgMTgwLTJcbiAqIFZlcnNpb24gMi4yLWJldGEgQ29weXJpZ2h0IEFuZ2VsIE1hcmluLCBQYXVsIEpvaG5zdG9uIDIwMDAgLSAyMDA5LlxuICogT3RoZXIgY29udHJpYnV0b3JzOiBHcmVnIEhvbHQsIEFuZHJldyBLZXBlcnQsIFlkbmFyLCBMb3N0aW5ldFxuICpcbiAqL1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgU2hhMjU2ID0gcmVxdWlyZSgnLi9zaGEyNTYnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxuXG52YXIgVyA9IG5ldyBBcnJheSg2NClcblxuZnVuY3Rpb24gU2hhMjI0ICgpIHtcbiAgdGhpcy5pbml0KClcblxuICB0aGlzLl93ID0gVyAvLyBuZXcgQXJyYXkoNjQpXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDY0LCA1Nilcbn1cblxuaW5oZXJpdHMoU2hhMjI0LCBTaGEyNTYpXG5cblNoYTIyNC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4YzEwNTllZDggfCAwXG4gIHRoaXMuX2IgPSAweDM2N2NkNTA3IHwgMFxuICB0aGlzLl9jID0gMHgzMDcwZGQxNyB8IDBcbiAgdGhpcy5fZCA9IDB4ZjcwZTU5MzkgfCAwXG4gIHRoaXMuX2UgPSAweGZmYzAwYjMxIHwgMFxuICB0aGlzLl9mID0gMHg2ODU4MTUxMSB8IDBcbiAgdGhpcy5fZyA9IDB4NjRmOThmYTcgfCAwXG4gIHRoaXMuX2ggPSAweGJlZmE0ZmE0IHwgMFxuXG4gIHJldHVybiB0aGlzXG59XG5cblNoYTIyNC5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gbmV3IEJ1ZmZlcigyOClcblxuICBILndyaXRlSW50MzJCRSh0aGlzLl9hLCAwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9iLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jLCA4KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9kLCAxMilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZSwgMTYpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2YsIDIwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9nLCAyNClcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTIyNFxuIl19
},{"./hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/hash.js","./sha256":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/sha256.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/sha256.js":[function(require,module,exports){
(function (Buffer){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Hash = require('./hash')

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667 | 0
  this._b = 0xbb67ae85 | 0
  this._c = 0x3c6ef372 | 0
  this._d = 0xa54ff53a | 0
  this._e = 0x510e527f | 0
  this._f = 0x9b05688c | 0
  this._g = 0x1f83d9ab | 0
  this._h = 0x5be0cd19 | 0

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function Maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function Sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function Sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function Gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function Gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  var j = 0

  function calcW () { return Gamma1(W[j - 2]) + W[j - 7] + Gamma0(W[j - 15]) + W[j - 16] }
  function loop (w) {
    W[j] = w

    var T1 = h + Sigma1(e) + Ch(e, f, g) + K[j] + w
    var T2 = Sigma0(a) + Maj(a, b, c)

    h = g
    g = f
    f = e
    e = d + T1
    d = c
    c = b
    b = a
    a = T1 + T2

    j++
  }

  while (j < 16) loop(M.readInt32BE(j * 4))
  while (j < 64) loop(calcW())

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = new Buffer(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEyNTYuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMjU2LCBhcyBkZWZpbmVkXG4gKiBpbiBGSVBTIDE4MC0yXG4gKiBWZXJzaW9uIDIuMi1iZXRhIENvcHlyaWdodCBBbmdlbCBNYXJpbiwgUGF1bCBKb2huc3RvbiAyMDAwIC0gMjAwOS5cbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqXG4gKi9cblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxuXG52YXIgSyA9IFtcbiAgMHg0MjhBMkY5OCwgMHg3MTM3NDQ5MSwgMHhCNUMwRkJDRiwgMHhFOUI1REJBNSxcbiAgMHgzOTU2QzI1QiwgMHg1OUYxMTFGMSwgMHg5MjNGODJBNCwgMHhBQjFDNUVENSxcbiAgMHhEODA3QUE5OCwgMHgxMjgzNUIwMSwgMHgyNDMxODVCRSwgMHg1NTBDN0RDMyxcbiAgMHg3MkJFNUQ3NCwgMHg4MERFQjFGRSwgMHg5QkRDMDZBNywgMHhDMTlCRjE3NCxcbiAgMHhFNDlCNjlDMSwgMHhFRkJFNDc4NiwgMHgwRkMxOURDNiwgMHgyNDBDQTFDQyxcbiAgMHgyREU5MkM2RiwgMHg0QTc0ODRBQSwgMHg1Q0IwQTlEQywgMHg3NkY5ODhEQSxcbiAgMHg5ODNFNTE1MiwgMHhBODMxQzY2RCwgMHhCMDAzMjdDOCwgMHhCRjU5N0ZDNyxcbiAgMHhDNkUwMEJGMywgMHhENUE3OTE0NywgMHgwNkNBNjM1MSwgMHgxNDI5Mjk2NyxcbiAgMHgyN0I3MEE4NSwgMHgyRTFCMjEzOCwgMHg0RDJDNkRGQywgMHg1MzM4MEQxMyxcbiAgMHg2NTBBNzM1NCwgMHg3NjZBMEFCQiwgMHg4MUMyQzkyRSwgMHg5MjcyMkM4NSxcbiAgMHhBMkJGRThBMSwgMHhBODFBNjY0QiwgMHhDMjRCOEI3MCwgMHhDNzZDNTFBMyxcbiAgMHhEMTkyRTgxOSwgMHhENjk5MDYyNCwgMHhGNDBFMzU4NSwgMHgxMDZBQTA3MCxcbiAgMHgxOUE0QzExNiwgMHgxRTM3NkMwOCwgMHgyNzQ4Nzc0QywgMHgzNEIwQkNCNSxcbiAgMHgzOTFDMENCMywgMHg0RUQ4QUE0QSwgMHg1QjlDQ0E0RiwgMHg2ODJFNkZGMyxcbiAgMHg3NDhGODJFRSwgMHg3OEE1NjM2RiwgMHg4NEM4NzgxNCwgMHg4Q0M3MDIwOCxcbiAgMHg5MEJFRkZGQSwgMHhBNDUwNkNFQiwgMHhCRUY5QTNGNywgMHhDNjcxNzhGMlxuXVxuXG52YXIgVyA9IG5ldyBBcnJheSg2NClcblxuZnVuY3Rpb24gU2hhMjU2ICgpIHtcbiAgdGhpcy5pbml0KClcblxuICB0aGlzLl93ID0gVyAvLyBuZXcgQXJyYXkoNjQpXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDY0LCA1Nilcbn1cblxuaW5oZXJpdHMoU2hhMjU2LCBIYXNoKVxuXG5TaGEyNTYucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweDZhMDllNjY3IHwgMFxuICB0aGlzLl9iID0gMHhiYjY3YWU4NSB8IDBcbiAgdGhpcy5fYyA9IDB4M2M2ZWYzNzIgfCAwXG4gIHRoaXMuX2QgPSAweGE1NGZmNTNhIHwgMFxuICB0aGlzLl9lID0gMHg1MTBlNTI3ZiB8IDBcbiAgdGhpcy5fZiA9IDB4OWIwNTY4OGMgfCAwXG4gIHRoaXMuX2cgPSAweDFmODNkOWFiIHwgMFxuICB0aGlzLl9oID0gMHg1YmUwY2QxOSB8IDBcblxuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiBDaCAoeCwgeSwgeikge1xuICByZXR1cm4geiBeICh4ICYgKHkgXiB6KSlcbn1cblxuZnVuY3Rpb24gTWFqICh4LCB5LCB6KSB7XG4gIHJldHVybiAoeCAmIHkpIHwgKHogJiAoeCB8IHkpKVxufVxuXG5mdW5jdGlvbiBTaWdtYTAgKHgpIHtcbiAgcmV0dXJuICh4ID4+PiAyIHwgeCA8PCAzMCkgXiAoeCA+Pj4gMTMgfCB4IDw8IDE5KSBeICh4ID4+PiAyMiB8IHggPDwgMTApXG59XG5cbmZ1bmN0aW9uIFNpZ21hMSAoeCkge1xuICByZXR1cm4gKHggPj4+IDYgfCB4IDw8IDI2KSBeICh4ID4+PiAxMSB8IHggPDwgMjEpIF4gKHggPj4+IDI1IHwgeCA8PCA3KVxufVxuXG5mdW5jdGlvbiBHYW1tYTAgKHgpIHtcbiAgcmV0dXJuICh4ID4+PiA3IHwgeCA8PCAyNSkgXiAoeCA+Pj4gMTggfCB4IDw8IDE0KSBeICh4ID4+PiAzKVxufVxuXG5mdW5jdGlvbiBHYW1tYTEgKHgpIHtcbiAgcmV0dXJuICh4ID4+PiAxNyB8IHggPDwgMTUpIF4gKHggPj4+IDE5IHwgeCA8PCAxMykgXiAoeCA+Pj4gMTApXG59XG5cblNoYTI1Ni5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhID0gdGhpcy5fYSB8IDBcbiAgdmFyIGIgPSB0aGlzLl9iIHwgMFxuICB2YXIgYyA9IHRoaXMuX2MgfCAwXG4gIHZhciBkID0gdGhpcy5fZCB8IDBcbiAgdmFyIGUgPSB0aGlzLl9lIHwgMFxuICB2YXIgZiA9IHRoaXMuX2YgfCAwXG4gIHZhciBnID0gdGhpcy5fZyB8IDBcbiAgdmFyIGggPSB0aGlzLl9oIHwgMFxuXG4gIHZhciBqID0gMFxuXG4gIGZ1bmN0aW9uIGNhbGNXICgpIHsgcmV0dXJuIEdhbW1hMShXW2ogLSAyXSkgKyBXW2ogLSA3XSArIEdhbW1hMChXW2ogLSAxNV0pICsgV1tqIC0gMTZdIH1cbiAgZnVuY3Rpb24gbG9vcCAodykge1xuICAgIFdbal0gPSB3XG5cbiAgICB2YXIgVDEgPSBoICsgU2lnbWExKGUpICsgQ2goZSwgZiwgZykgKyBLW2pdICsgd1xuICAgIHZhciBUMiA9IFNpZ21hMChhKSArIE1haihhLCBiLCBjKVxuXG4gICAgaCA9IGdcbiAgICBnID0gZlxuICAgIGYgPSBlXG4gICAgZSA9IGQgKyBUMVxuICAgIGQgPSBjXG4gICAgYyA9IGJcbiAgICBiID0gYVxuICAgIGEgPSBUMSArIFQyXG5cbiAgICBqKytcbiAgfVxuXG4gIHdoaWxlIChqIDwgMTYpIGxvb3AoTS5yZWFkSW50MzJCRShqICogNCkpXG4gIHdoaWxlIChqIDwgNjQpIGxvb3AoY2FsY1coKSlcblxuICB0aGlzLl9hID0gKGEgKyB0aGlzLl9hKSB8IDBcbiAgdGhpcy5fYiA9IChiICsgdGhpcy5fYikgfCAwXG4gIHRoaXMuX2MgPSAoYyArIHRoaXMuX2MpIHwgMFxuICB0aGlzLl9kID0gKGQgKyB0aGlzLl9kKSB8IDBcbiAgdGhpcy5fZSA9IChlICsgdGhpcy5fZSkgfCAwXG4gIHRoaXMuX2YgPSAoZiArIHRoaXMuX2YpIHwgMFxuICB0aGlzLl9nID0gKGcgKyB0aGlzLl9nKSB8IDBcbiAgdGhpcy5faCA9IChoICsgdGhpcy5faCkgfCAwXG59XG5cblNoYTI1Ni5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gbmV3IEJ1ZmZlcigzMilcblxuICBILndyaXRlSW50MzJCRSh0aGlzLl9hLCAwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9iLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jLCA4KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9kLCAxMilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZSwgMTYpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2YsIDIwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9nLCAyNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5faCwgMjgpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGEyNTZcbiJdfQ==
},{"./hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/hash.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/sha1.js":[function(require,module,exports){
(function (Buffer){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('inherits')
var Hash = require('./hash')

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301 | 0
  this._b = 0xefcdab89 | 0
  this._c = 0x98badcfe | 0
  this._d = 0x10325476 | 0
  this._e = 0xc3d2e1f0 | 0

  return this
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function rol (num, cnt) {
  return (num << cnt) | (num >>> (32 - cnt))
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d
  var e = this._e

  var j = 0
  var k

  function calcW () { return rol(W[j - 3] ^ W[j - 8] ^ W[j - 14] ^ W[j - 16], 1) }
  function loop (w, f) {
    W[j] = w

    var t = rol(a, 5) + f + e + w + k

    e = d
    d = c
    c = rol(b, 30)
    b = a
    a = t
    j++
  }

  k = 1518500249
  while (j < 16) loop(M.readInt32BE(j * 4), (b & c) | ((~b) & d))
  while (j < 20) loop(calcW(), (b & c) | ((~b) & d))
  k = 1859775393
  while (j < 40) loop(calcW(), b ^ c ^ d)
  k = -1894007588
  while (j < 60) loop(calcW(), (b & c) | (b & d) | (c & d))
  k = -899497514
  while (j < 80) loop(calcW(), b ^ c ^ d)

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = new Buffer(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGExLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMSwgYXMgZGVmaW5lZFxuICogaW4gRklQUyBQVUIgMTgwLTFcbiAqIFZlcnNpb24gMi4xYSBDb3B5cmlnaHQgUGF1bCBKb2huc3RvbiAyMDAwIC0gMjAwMi5cbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCU0QgTGljZW5zZVxuICogU2VlIGh0dHA6Ly9wYWpob21lLm9yZy51ay9jcnlwdC9tZDUgZm9yIGRldGFpbHMuXG4gKi9cblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxuXG52YXIgVyA9IG5ldyBBcnJheSg4MClcblxuZnVuY3Rpb24gU2hhMSAoKSB7XG4gIHRoaXMuaW5pdCgpXG4gIHRoaXMuX3cgPSBXXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDY0LCA1Nilcbn1cblxuaW5oZXJpdHMoU2hhMSwgSGFzaClcblxuU2hhMS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4Njc0NTIzMDEgfCAwXG4gIHRoaXMuX2IgPSAweGVmY2RhYjg5IHwgMFxuICB0aGlzLl9jID0gMHg5OGJhZGNmZSB8IDBcbiAgdGhpcy5fZCA9IDB4MTAzMjU0NzYgfCAwXG4gIHRoaXMuX2UgPSAweGMzZDJlMWYwIHwgMFxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8qXG4gKiBCaXR3aXNlIHJvdGF0ZSBhIDMyLWJpdCBudW1iZXIgdG8gdGhlIGxlZnQuXG4gKi9cbmZ1bmN0aW9uIHJvbCAobnVtLCBjbnQpIHtcbiAgcmV0dXJuIChudW0gPDwgY250KSB8IChudW0gPj4+ICgzMiAtIGNudCkpXG59XG5cblNoYTEucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoTSkge1xuICB2YXIgVyA9IHRoaXMuX3dcblxuICB2YXIgYSA9IHRoaXMuX2FcbiAgdmFyIGIgPSB0aGlzLl9iXG4gIHZhciBjID0gdGhpcy5fY1xuICB2YXIgZCA9IHRoaXMuX2RcbiAgdmFyIGUgPSB0aGlzLl9lXG5cbiAgdmFyIGogPSAwXG4gIHZhciBrXG5cbiAgZnVuY3Rpb24gY2FsY1cgKCkgeyByZXR1cm4gcm9sKFdbaiAtIDNdIF4gV1tqIC0gOF0gXiBXW2ogLSAxNF0gXiBXW2ogLSAxNl0sIDEpIH1cbiAgZnVuY3Rpb24gbG9vcCAodywgZikge1xuICAgIFdbal0gPSB3XG5cbiAgICB2YXIgdCA9IHJvbChhLCA1KSArIGYgKyBlICsgdyArIGtcblxuICAgIGUgPSBkXG4gICAgZCA9IGNcbiAgICBjID0gcm9sKGIsIDMwKVxuICAgIGIgPSBhXG4gICAgYSA9IHRcbiAgICBqKytcbiAgfVxuXG4gIGsgPSAxNTE4NTAwMjQ5XG4gIHdoaWxlIChqIDwgMTYpIGxvb3AoTS5yZWFkSW50MzJCRShqICogNCksIChiICYgYykgfCAoKH5iKSAmIGQpKVxuICB3aGlsZSAoaiA8IDIwKSBsb29wKGNhbGNXKCksIChiICYgYykgfCAoKH5iKSAmIGQpKVxuICBrID0gMTg1OTc3NTM5M1xuICB3aGlsZSAoaiA8IDQwKSBsb29wKGNhbGNXKCksIGIgXiBjIF4gZClcbiAgayA9IC0xODk0MDA3NTg4XG4gIHdoaWxlIChqIDwgNjApIGxvb3AoY2FsY1coKSwgKGIgJiBjKSB8IChiICYgZCkgfCAoYyAmIGQpKVxuICBrID0gLTg5OTQ5NzUxNFxuICB3aGlsZSAoaiA8IDgwKSBsb29wKGNhbGNXKCksIGIgXiBjIF4gZClcblxuICB0aGlzLl9hID0gKGEgKyB0aGlzLl9hKSB8IDBcbiAgdGhpcy5fYiA9IChiICsgdGhpcy5fYikgfCAwXG4gIHRoaXMuX2MgPSAoYyArIHRoaXMuX2MpIHwgMFxuICB0aGlzLl9kID0gKGQgKyB0aGlzLl9kKSB8IDBcbiAgdGhpcy5fZSA9IChlICsgdGhpcy5fZSkgfCAwXG59XG5cblNoYTEucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IG5ldyBCdWZmZXIoMjApXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSB8IDAsIDApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2IgfCAwLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jIHwgMCwgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCB8IDAsIDEyKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9lIHwgMCwgMTYpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGExXG4iXX0=
},{"./hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/hash.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/sha.js":[function(require,module,exports){
(function (Buffer){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = require('inherits')
var Hash = require('./hash')

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301 | 0
  this._b = 0xefcdab89 | 0
  this._c = 0x98badcfe | 0
  this._d = 0x10325476 | 0
  this._e = 0xc3d2e1f0 | 0

  return this
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function rol (num, cnt) {
  return (num << cnt) | (num >>> (32 - cnt))
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d
  var e = this._e

  var j = 0
  var k

  /*
   * SHA-1 has a bitwise rotate left operation. But, SHA is not
   * function calcW() { return rol(W[j - 3] ^ W[j -  8] ^ W[j - 14] ^ W[j - 16], 1) }
   */
  function calcW () { return W[j - 3] ^ W[j - 8] ^ W[j - 14] ^ W[j - 16] }
  function loop (w, f) {
    W[j] = w

    var t = rol(a, 5) + f + e + w + k

    e = d
    d = c
    c = rol(b, 30)
    b = a
    a = t
    j++
  }

  k = 1518500249
  while (j < 16) loop(M.readInt32BE(j * 4), (b & c) | ((~b) & d))
  while (j < 20) loop(calcW(), (b & c) | ((~b) & d))
  k = 1859775393
  while (j < 40) loop(calcW(), b ^ c ^ d)
  k = -1894007588
  while (j < 60) loop(calcW(), (b & c) | (b & d) | (c & d))
  k = -899497514
  while (j < 80) loop(calcW(), b ^ c ^ d)

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = new Buffer(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha


}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTAsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgUFVCIDE4MC0xXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGRlcml2ZWQgZnJvbSBzaGExLmpzIG9mIHRoZSBzYW1lIHJlcG9zaXRvcnkuXG4gKiBUaGUgZGlmZmVyZW5jZSBiZXR3ZWVuIFNIQS0wIGFuZCBTSEEtMSBpcyBqdXN0IGEgYml0d2lzZSByb3RhdGUgbGVmdFxuICogb3BlcmF0aW9uIHdhcyBhZGRlZC5cbiAqL1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG5cbnZhciBXID0gbmV3IEFycmF5KDgwKVxuXG5mdW5jdGlvbiBTaGEgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYSwgSGFzaClcblxuU2hhLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hID0gMHg2NzQ1MjMwMSB8IDBcbiAgdGhpcy5fYiA9IDB4ZWZjZGFiODkgfCAwXG4gIHRoaXMuX2MgPSAweDk4YmFkY2ZlIHwgMFxuICB0aGlzLl9kID0gMHgxMDMyNTQ3NiB8IDBcbiAgdGhpcy5fZSA9IDB4YzNkMmUxZjAgfCAwXG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLypcbiAqIEJpdHdpc2Ugcm90YXRlIGEgMzItYml0IG51bWJlciB0byB0aGUgbGVmdC5cbiAqL1xuZnVuY3Rpb24gcm9sIChudW0sIGNudCkge1xuICByZXR1cm4gKG51bSA8PCBjbnQpIHwgKG51bSA+Pj4gKDMyIC0gY250KSlcbn1cblxuU2hhLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGEgPSB0aGlzLl9hXG4gIHZhciBiID0gdGhpcy5fYlxuICB2YXIgYyA9IHRoaXMuX2NcbiAgdmFyIGQgPSB0aGlzLl9kXG4gIHZhciBlID0gdGhpcy5fZVxuXG4gIHZhciBqID0gMFxuICB2YXIga1xuXG4gIC8qXG4gICAqIFNIQS0xIGhhcyBhIGJpdHdpc2Ugcm90YXRlIGxlZnQgb3BlcmF0aW9uLiBCdXQsIFNIQSBpcyBub3RcbiAgICogZnVuY3Rpb24gY2FsY1coKSB7IHJldHVybiByb2woV1tqIC0gM10gXiBXW2ogLSAgOF0gXiBXW2ogLSAxNF0gXiBXW2ogLSAxNl0sIDEpIH1cbiAgICovXG4gIGZ1bmN0aW9uIGNhbGNXICgpIHsgcmV0dXJuIFdbaiAtIDNdIF4gV1tqIC0gOF0gXiBXW2ogLSAxNF0gXiBXW2ogLSAxNl0gfVxuICBmdW5jdGlvbiBsb29wICh3LCBmKSB7XG4gICAgV1tqXSA9IHdcblxuICAgIHZhciB0ID0gcm9sKGEsIDUpICsgZiArIGUgKyB3ICsga1xuXG4gICAgZSA9IGRcbiAgICBkID0gY1xuICAgIGMgPSByb2woYiwgMzApXG4gICAgYiA9IGFcbiAgICBhID0gdFxuICAgIGorK1xuICB9XG5cbiAgayA9IDE1MTg1MDAyNDlcbiAgd2hpbGUgKGogPCAxNikgbG9vcChNLnJlYWRJbnQzMkJFKGogKiA0KSwgKGIgJiBjKSB8ICgofmIpICYgZCkpXG4gIHdoaWxlIChqIDwgMjApIGxvb3AoY2FsY1coKSwgKGIgJiBjKSB8ICgofmIpICYgZCkpXG4gIGsgPSAxODU5Nzc1MzkzXG4gIHdoaWxlIChqIDwgNDApIGxvb3AoY2FsY1coKSwgYiBeIGMgXiBkKVxuICBrID0gLTE4OTQwMDc1ODhcbiAgd2hpbGUgKGogPCA2MCkgbG9vcChjYWxjVygpLCAoYiAmIGMpIHwgKGIgJiBkKSB8IChjICYgZCkpXG4gIGsgPSAtODk5NDk3NTE0XG4gIHdoaWxlIChqIDwgODApIGxvb3AoY2FsY1coKSwgYiBeIGMgXiBkKVxuXG4gIHRoaXMuX2EgPSAoYSArIHRoaXMuX2EpIHwgMFxuICB0aGlzLl9iID0gKGIgKyB0aGlzLl9iKSB8IDBcbiAgdGhpcy5fYyA9IChjICsgdGhpcy5fYykgfCAwXG4gIHRoaXMuX2QgPSAoZCArIHRoaXMuX2QpIHwgMFxuICB0aGlzLl9lID0gKGUgKyB0aGlzLl9lKSB8IDBcbn1cblxuU2hhLnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBuZXcgQnVmZmVyKDIwKVxuXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2EgfCAwLCAwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9iIHwgMCwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYyB8IDAsIDgpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2QgfCAwLCAxMilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZSB8IDAsIDE2KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhXG5cbiJdfQ==
},{"./hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/hash.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/hash.js":[function(require,module,exports){
(function (Buffer){
// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = new Buffer(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
  this._s = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = new Buffer(data, enc)
  }

  var l = this._len += data.length
  var s = this._s || 0
  var f = 0
  var buffer = this._block

  while (s < l) {
    var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
    var ch = (t - f)

    for (var i = 0; i < ch; i++) {
      buffer[(s % this._blockSize) + i] = data[i + f]
    }

    s += ch
    f += ch

    if ((s % this._blockSize) === 0) {
      this._update(buffer)
    }
  }
  this._s = s

  return this
}

Hash.prototype.digest = function (enc) {
  // Suppose the length of the message M, in bits, is l
  var l = this._len * 8

  // Append the bit 1 to the end of the message
  this._block[this._len % this._blockSize] = 0x80

  // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
  this._block.fill(0, this._len % this._blockSize + 1)

  if (l % (this._blockSize * 8) >= this._finalSize * 8) {
    this._update(this._block)
    this._block.fill(0)
  }

  // to this append the block which is equal to the number l written in binary
  // TODO: handle case where l is > Math.pow(2, 29)
  this._block.writeInt32BE(l, this._blockSize - 4)

  var hash = this._update(this._block) || this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbm9kZV9tb2R1bGVzL3NoYS5qcy9oYXNoLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcHJvdG90eXBlIGNsYXNzIGZvciBoYXNoIGZ1bmN0aW9uc1xuZnVuY3Rpb24gSGFzaCAoYmxvY2tTaXplLCBmaW5hbFNpemUpIHtcbiAgdGhpcy5fYmxvY2sgPSBuZXcgQnVmZmVyKGJsb2NrU2l6ZSlcbiAgdGhpcy5fZmluYWxTaXplID0gZmluYWxTaXplXG4gIHRoaXMuX2Jsb2NrU2l6ZSA9IGJsb2NrU2l6ZVxuICB0aGlzLl9sZW4gPSAwXG4gIHRoaXMuX3MgPSAwXG59XG5cbkhhc2gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBlbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGVuYyA9IGVuYyB8fCAndXRmOCdcbiAgICBkYXRhID0gbmV3IEJ1ZmZlcihkYXRhLCBlbmMpXG4gIH1cblxuICB2YXIgbCA9IHRoaXMuX2xlbiArPSBkYXRhLmxlbmd0aFxuICB2YXIgcyA9IHRoaXMuX3MgfHwgMFxuICB2YXIgZiA9IDBcbiAgdmFyIGJ1ZmZlciA9IHRoaXMuX2Jsb2NrXG5cbiAgd2hpbGUgKHMgPCBsKSB7XG4gICAgdmFyIHQgPSBNYXRoLm1pbihkYXRhLmxlbmd0aCwgZiArIHRoaXMuX2Jsb2NrU2l6ZSAtIChzICUgdGhpcy5fYmxvY2tTaXplKSlcbiAgICB2YXIgY2ggPSAodCAtIGYpXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoOyBpKyspIHtcbiAgICAgIGJ1ZmZlclsocyAlIHRoaXMuX2Jsb2NrU2l6ZSkgKyBpXSA9IGRhdGFbaSArIGZdXG4gICAgfVxuXG4gICAgcyArPSBjaFxuICAgIGYgKz0gY2hcblxuICAgIGlmICgocyAlIHRoaXMuX2Jsb2NrU2l6ZSkgPT09IDApIHtcbiAgICAgIHRoaXMuX3VwZGF0ZShidWZmZXIpXG4gICAgfVxuICB9XG4gIHRoaXMuX3MgPSBzXG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuSGFzaC5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gKGVuYykge1xuICAvLyBTdXBwb3NlIHRoZSBsZW5ndGggb2YgdGhlIG1lc3NhZ2UgTSwgaW4gYml0cywgaXMgbFxuICB2YXIgbCA9IHRoaXMuX2xlbiAqIDhcblxuICAvLyBBcHBlbmQgdGhlIGJpdCAxIHRvIHRoZSBlbmQgb2YgdGhlIG1lc3NhZ2VcbiAgdGhpcy5fYmxvY2tbdGhpcy5fbGVuICUgdGhpcy5fYmxvY2tTaXplXSA9IDB4ODBcblxuICAvLyBhbmQgdGhlbiBrIHplcm8gYml0cywgd2hlcmUgayBpcyB0aGUgc21hbGxlc3Qgbm9uLW5lZ2F0aXZlIHNvbHV0aW9uIHRvIHRoZSBlcXVhdGlvbiAobCArIDEgKyBrKSA9PT0gZmluYWxTaXplIG1vZCBibG9ja1NpemVcbiAgdGhpcy5fYmxvY2suZmlsbCgwLCB0aGlzLl9sZW4gJSB0aGlzLl9ibG9ja1NpemUgKyAxKVxuXG4gIGlmIChsICUgKHRoaXMuX2Jsb2NrU2l6ZSAqIDgpID49IHRoaXMuX2ZpbmFsU2l6ZSAqIDgpIHtcbiAgICB0aGlzLl91cGRhdGUodGhpcy5fYmxvY2spXG4gICAgdGhpcy5fYmxvY2suZmlsbCgwKVxuICB9XG5cbiAgLy8gdG8gdGhpcyBhcHBlbmQgdGhlIGJsb2NrIHdoaWNoIGlzIGVxdWFsIHRvIHRoZSBudW1iZXIgbCB3cml0dGVuIGluIGJpbmFyeVxuICAvLyBUT0RPOiBoYW5kbGUgY2FzZSB3aGVyZSBsIGlzID4gTWF0aC5wb3coMiwgMjkpXG4gIHRoaXMuX2Jsb2NrLndyaXRlSW50MzJCRShsLCB0aGlzLl9ibG9ja1NpemUgLSA0KVxuXG4gIHZhciBoYXNoID0gdGhpcy5fdXBkYXRlKHRoaXMuX2Jsb2NrKSB8fCB0aGlzLl9oYXNoKClcblxuICByZXR1cm4gZW5jID8gaGFzaC50b1N0cmluZyhlbmMpIDogaGFzaFxufVxuXG5IYXNoLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ191cGRhdGUgbXVzdCBiZSBpbXBsZW1lbnRlZCBieSBzdWJjbGFzcycpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzaFxuIl19
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/ripemd160/lib/ripemd160.js":[function(require,module,exports){
(function (Buffer){
/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
/** @preserve
(c) 2012 by Cédric Mesnil. All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// constants table
var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]
var hr = [0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]

function bytesToWords (bytes) {
  var words = []
  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
    words[b >>> 5] |= bytes[i] << (24 - b % 32)
  }
  return words
}

function wordsToBytes (words) {
  var bytes = []
  for (var b = 0; b < words.length * 32; b += 8) {
    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF)
  }
  return bytes
}

function processBlock (H, M, offset) {
  // swap endian
  for (var i = 0; i < 16; i++) {
    var offset_i = offset + i
    var M_offset_i = M[offset_i]

    // Swap
    M[offset_i] = (
      (((M_offset_i << 8) | (M_offset_i >>> 24)) & 0x00ff00ff) |
      (((M_offset_i << 24) | (M_offset_i >>> 8)) & 0xff00ff00)
    )
  }

  // Working variables
  var al, bl, cl, dl, el
  var ar, br, cr, dr, er

  ar = al = H[0]
  br = bl = H[1]
  cr = cl = H[2]
  dr = dl = H[3]
  er = el = H[4]

  // computation
  var t
  for (i = 0; i < 80; i += 1) {
    t = (al + M[offset + zl[i]]) | 0
    if (i < 16) {
      t += f1(bl, cl, dl) + hl[0]
    } else if (i < 32) {
      t += f2(bl, cl, dl) + hl[1]
    } else if (i < 48) {
      t += f3(bl, cl, dl) + hl[2]
    } else if (i < 64) {
      t += f4(bl, cl, dl) + hl[3]
    } else {// if (i<80) {
      t += f5(bl, cl, dl) + hl[4]
    }
    t = t | 0
    t = rotl(t, sl[i])
    t = (t + el) | 0
    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = t

    t = (ar + M[offset + zr[i]]) | 0
    if (i < 16) {
      t += f5(br, cr, dr) + hr[0]
    } else if (i < 32) {
      t += f4(br, cr, dr) + hr[1]
    } else if (i < 48) {
      t += f3(br, cr, dr) + hr[2]
    } else if (i < 64) {
      t += f2(br, cr, dr) + hr[3]
    } else {// if (i<80) {
      t += f1(br, cr, dr) + hr[4]
    }

    t = t | 0
    t = rotl(t, sr[i])
    t = (t + er) | 0
    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = t
  }

  // intermediate hash value
  t = (H[1] + cl + dr) | 0
  H[1] = (H[2] + dl + er) | 0
  H[2] = (H[3] + el + ar) | 0
  H[3] = (H[4] + al + br) | 0
  H[4] = (H[0] + bl + cr) | 0
  H[0] = t
}

function f1 (x, y, z) {
  return ((x) ^ (y) ^ (z))
}

function f2 (x, y, z) {
  return (((x) & (y)) | ((~x) & (z)))
}

function f3 (x, y, z) {
  return (((x) | (~(y))) ^ (z))
}

function f4 (x, y, z) {
  return (((x) & (z)) | ((y) & (~(z))))
}

function f5 (x, y, z) {
  return ((x) ^ ((y) | (~(z))))
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function ripemd160 (message) {
  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]

  if (typeof message === 'string') {
    message = new Buffer(message, 'utf8')
  }

  var m = bytesToWords(message)

  var nBitsLeft = message.length * 8
  var nBitsTotal = message.length * 8

  // Add padding
  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32)
  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
    (((nBitsTotal << 8) | (nBitsTotal >>> 24)) & 0x00ff00ff) |
    (((nBitsTotal << 24) | (nBitsTotal >>> 8)) & 0xff00ff00)
  )

  for (var i = 0; i < m.length; i += 16) {
    processBlock(H, m, i)
  }

  // swap endian
  for (i = 0; i < 5; i++) {
    // shortcut
    var H_i = H[i]

    // Swap
    H[i] = (((H_i << 8) | (H_i >>> 24)) & 0x00ff00ff) |
      (((H_i << 24) | (H_i >>> 8)) & 0xff00ff00)
  }

  var digestbytes = wordsToBytes(H)
  return new Buffer(digestbytes)
}

module.exports = ripemd160

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/cipher-base/index.js":[function(require,module,exports){
(function (Buffer){
var Transform = require('stream').Transform
var inherits = require('inherits')
var StringDecoder = require('string_decoder').StringDecoder
module.exports = CipherBase
inherits(CipherBase, Transform)
function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  this._decoder = null
  this._encoding = null
}
CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = new Buffer(data, inputEnc)
  }
  var outData = this._update(data)
  if (this.hashMode) {
    return this
  }
  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }
  return outData
}

CipherBase.prototype.setAutoPadding = function () {}

CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this._final())
  } catch (e) {
    err = e
  } finally {
    done(err)
  }
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this._final() || new Buffer('')
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, final) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }
  if (this._encoding !== enc) {
    throw new Error('can\'t switch encodings')
  }
  var out = this._decoder.write(value)
  if (final) {
    out += this._decoder.end()
  }
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbm9kZV9tb2R1bGVzL2NpcGhlci1iYXNlL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3N0cmVhbScpLlRyYW5zZm9ybVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2RlcicpLlN0cmluZ0RlY29kZXJcbm1vZHVsZS5leHBvcnRzID0gQ2lwaGVyQmFzZVxuaW5oZXJpdHMoQ2lwaGVyQmFzZSwgVHJhbnNmb3JtKVxuZnVuY3Rpb24gQ2lwaGVyQmFzZSAoaGFzaE1vZGUpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5oYXNoTW9kZSA9IHR5cGVvZiBoYXNoTW9kZSA9PT0gJ3N0cmluZydcbiAgaWYgKHRoaXMuaGFzaE1vZGUpIHtcbiAgICB0aGlzW2hhc2hNb2RlXSA9IHRoaXMuX2ZpbmFsT3JEaWdlc3RcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmZpbmFsID0gdGhpcy5fZmluYWxPckRpZ2VzdFxuICB9XG4gIHRoaXMuX2RlY29kZXIgPSBudWxsXG4gIHRoaXMuX2VuY29kaW5nID0gbnVsbFxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEsIGlucHV0RW5jLCBvdXRwdXRFbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGRhdGEgPSBuZXcgQnVmZmVyKGRhdGEsIGlucHV0RW5jKVxuICB9XG4gIHZhciBvdXREYXRhID0gdGhpcy5fdXBkYXRlKGRhdGEpXG4gIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuICBpZiAob3V0cHV0RW5jKSB7XG4gICAgb3V0RGF0YSA9IHRoaXMuX3RvU3RyaW5nKG91dERhdGEsIG91dHB1dEVuYylcbiAgfVxuICByZXR1cm4gb3V0RGF0YVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uICgpIHt9XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLmdldEF1dGhUYWcgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIGdldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEF1dGhUYWcgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEFBRCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gc2V0IGFhZCBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoZGF0YSwgXywgbmV4dCkge1xuICB2YXIgZXJyXG4gIHRyeSB7XG4gICAgaWYgKHRoaXMuaGFzaE1vZGUpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZShkYXRhKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1c2godGhpcy5fdXBkYXRlKGRhdGEpKVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfSBmaW5hbGx5IHtcbiAgICBuZXh0KGVycilcbiAgfVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZsdXNoID0gZnVuY3Rpb24gKGRvbmUpIHtcbiAgdmFyIGVyclxuICB0cnkge1xuICAgIHRoaXMucHVzaCh0aGlzLl9maW5hbCgpKVxuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyID0gZVxuICB9IGZpbmFsbHkge1xuICAgIGRvbmUoZXJyKVxuICB9XG59XG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fZmluYWxPckRpZ2VzdCA9IGZ1bmN0aW9uIChvdXRwdXRFbmMpIHtcbiAgdmFyIG91dERhdGEgPSB0aGlzLl9maW5hbCgpIHx8IG5ldyBCdWZmZXIoJycpXG4gIGlmIChvdXRwdXRFbmMpIHtcbiAgICBvdXREYXRhID0gdGhpcy5fdG9TdHJpbmcob3V0RGF0YSwgb3V0cHV0RW5jLCB0cnVlKVxuICB9XG4gIHJldHVybiBvdXREYXRhXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLl90b1N0cmluZyA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jLCBmaW5hbCkge1xuICBpZiAoIXRoaXMuX2RlY29kZXIpIHtcbiAgICB0aGlzLl9kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKVxuICAgIHRoaXMuX2VuY29kaW5nID0gZW5jXG4gIH1cbiAgaWYgKHRoaXMuX2VuY29kaW5nICE9PSBlbmMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NhblxcJ3Qgc3dpdGNoIGVuY29kaW5ncycpXG4gIH1cbiAgdmFyIG91dCA9IHRoaXMuX2RlY29kZXIud3JpdGUodmFsdWUpXG4gIGlmIChmaW5hbCkge1xuICAgIG91dCArPSB0aGlzLl9kZWNvZGVyLmVuZCgpXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuIl19
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js","stream":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/stream-browserify/index.js","string_decoder":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/string_decoder/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/fixProc.js":[function(require,module,exports){
(function (Buffer){
// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED\r?\nDEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\r?\n\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n/m
var startRegex = /^-----BEGIN (.*) KEY-----\r?\n/m
var fullRegex = /^-----BEGIN (.*) KEY-----\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n-----END \1 KEY-----$/m
var evp = require('evp_bytestokey')
var ciphers = require('browserify-aes')
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = new Buffer(match2[2].replace(/\r?\n/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = new Buffer(match[2], 'hex')
    var cipherText = new Buffer(match[3].replace(/\r?\n/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1] + ' KEY'
  return {
    tag: tag,
    data: decrypted
  }
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL2ZpeFByb2MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBhZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2FwYXRpbC9wZW1zdHJpcFxudmFyIGZpbmRQcm9jID0gL1Byb2MtVHlwZTogNCxFTkNSWVBURURcXHI/XFxuREVLLUluZm86IEFFUy0oKD86MTI4KXwoPzoxOTIpfCg/OjI1NikpLUNCQywoWzAtOUEtSF0rKVxccj9cXG5cXHI/XFxuKFswLTlBLXpcXG5cXHJcXCtcXC9cXD1dKylcXHI/XFxuL21cbnZhciBzdGFydFJlZ2V4ID0gL14tLS0tLUJFR0lOICguKikgS0VZLS0tLS1cXHI/XFxuL21cbnZhciBmdWxsUmVnZXggPSAvXi0tLS0tQkVHSU4gKC4qKSBLRVktLS0tLVxccj9cXG4oWzAtOUEtelxcblxcclxcK1xcL1xcPV0rKVxccj9cXG4tLS0tLUVORCBcXDEgS0VZLS0tLS0kL21cbnZhciBldnAgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpXG52YXIgY2lwaGVycyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzJylcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9rZXksIHBhc3N3b3JkKSB7XG4gIHZhciBrZXkgPSBva2V5LnRvU3RyaW5nKClcbiAgdmFyIG1hdGNoID0ga2V5Lm1hdGNoKGZpbmRQcm9jKVxuICB2YXIgZGVjcnlwdGVkXG4gIGlmICghbWF0Y2gpIHtcbiAgICB2YXIgbWF0Y2gyID0ga2V5Lm1hdGNoKGZ1bGxSZWdleClcbiAgICBkZWNyeXB0ZWQgPSBuZXcgQnVmZmVyKG1hdGNoMlsyXS5yZXBsYWNlKC9cXHI/XFxuL2csICcnKSwgJ2Jhc2U2NCcpXG4gIH0gZWxzZSB7XG4gICAgdmFyIHN1aXRlID0gJ2FlcycgKyBtYXRjaFsxXVxuICAgIHZhciBpdiA9IG5ldyBCdWZmZXIobWF0Y2hbMl0sICdoZXgnKVxuICAgIHZhciBjaXBoZXJUZXh0ID0gbmV3IEJ1ZmZlcihtYXRjaFszXS5yZXBsYWNlKC9cXHI/XFxuL2csICcnKSwgJ2Jhc2U2NCcpXG4gICAgdmFyIGNpcGhlcktleSA9IGV2cChwYXNzd29yZCwgaXYuc2xpY2UoMCwgOCksIHBhcnNlSW50KG1hdGNoWzFdLCAxMCkpLmtleVxuICAgIHZhciBvdXQgPSBbXVxuICAgIHZhciBjaXBoZXIgPSBjaXBoZXJzLmNyZWF0ZURlY2lwaGVyaXYoc3VpdGUsIGNpcGhlcktleSwgaXYpXG4gICAgb3V0LnB1c2goY2lwaGVyLnVwZGF0ZShjaXBoZXJUZXh0KSlcbiAgICBvdXQucHVzaChjaXBoZXIuZmluYWwoKSlcbiAgICBkZWNyeXB0ZWQgPSBCdWZmZXIuY29uY2F0KG91dClcbiAgfVxuICB2YXIgdGFnID0ga2V5Lm1hdGNoKHN0YXJ0UmVnZXgpWzFdICsgJyBLRVknXG4gIHJldHVybiB7XG4gICAgdGFnOiB0YWcsXG4gICAgZGF0YTogZGVjcnlwdGVkXG4gIH1cbn1cbiJdfQ==
},{"browserify-aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/browser.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","evp_bytestokey":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/evp_bytestokey/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/browser.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/browser.js"][0].apply(exports,arguments)
},{"./decrypter":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/decrypter.js","./encrypter":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/encrypter.js","./modes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/encrypter.js":[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')
var modes = require('./modes')
var ebtk = require('evp_bytestokey')
var StreamCipher = require('./streamCipher')
var AuthCipher = require('./authCipher')
inherits(Cipher, Transform)
function Cipher (mode, key, iv) {
  if (!(this instanceof Cipher)) {
    return new Cipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  } else if (chunk.toString('hex') !== '10101010101010101010101010101010') {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}
Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
}

function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}
Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = new Buffer(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }
  var out = Buffer.concat([this.cache, padBuff])
  return out
}
var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
}

function createCipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv)
  }
  return new Cipher(modelist[config.mode], password, iv)
}
function createCipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9lbmNyeXB0ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIG1vZGVzID0gcmVxdWlyZSgnLi9tb2RlcycpXG52YXIgZWJ0ayA9IHJlcXVpcmUoJ2V2cF9ieXRlc3Rva2V5JylcbnZhciBTdHJlYW1DaXBoZXIgPSByZXF1aXJlKCcuL3N0cmVhbUNpcGhlcicpXG52YXIgQXV0aENpcGhlciA9IHJlcXVpcmUoJy4vYXV0aENpcGhlcicpXG5pbmhlcml0cyhDaXBoZXIsIFRyYW5zZm9ybSlcbmZ1bmN0aW9uIENpcGhlciAobW9kZSwga2V5LCBpdikge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQ2lwaGVyKSkge1xuICAgIHJldHVybiBuZXcgQ2lwaGVyKG1vZGUsIGtleSwgaXYpXG4gIH1cbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5fY2FjaGUgPSBuZXcgU3BsaXR0ZXIoKVxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBuZXcgQnVmZmVyKGl2Lmxlbmd0aClcbiAgaXYuY29weSh0aGlzLl9wcmV2KVxuICB0aGlzLl9tb2RlID0gbW9kZVxuICB0aGlzLl9hdXRvcGFkZGluZyA9IHRydWVcbn1cbkNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX2NhY2hlLmFkZChkYXRhKVxuICB2YXIgY2h1bmtcbiAgdmFyIHRoaW5nXG4gIHZhciBvdXQgPSBbXVxuICB3aGlsZSAoKGNodW5rID0gdGhpcy5fY2FjaGUuZ2V0KCkpKSB7XG4gICAgdGhpbmcgPSB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmspXG4gICAgb3V0LnB1c2godGhpbmcpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQob3V0KVxufVxuQ2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjaHVuayA9IHRoaXMuX2NhY2hlLmZsdXNoKClcbiAgaWYgKHRoaXMuX2F1dG9wYWRkaW5nKSB7XG4gICAgY2h1bmsgPSB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmspXG4gICAgdGhpcy5fY2lwaGVyLnNjcnViKClcbiAgICByZXR1cm4gY2h1bmtcbiAgfSBlbHNlIGlmIChjaHVuay50b1N0cmluZygnaGV4JykgIT09ICcxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMCcpIHtcbiAgICB0aGlzLl9jaXBoZXIuc2NydWIoKVxuICAgIHRocm93IG5ldyBFcnJvcignZGF0YSBub3QgbXVsdGlwbGUgb2YgYmxvY2sgbGVuZ3RoJylcbiAgfVxufVxuQ2lwaGVyLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uIChzZXRUbykge1xuICB0aGlzLl9hdXRvcGFkZGluZyA9ICEhc2V0VG9cbn1cblxuZnVuY3Rpb24gU3BsaXR0ZXIgKCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU3BsaXR0ZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBTcGxpdHRlcigpXG4gIH1cbiAgdGhpcy5jYWNoZSA9IG5ldyBCdWZmZXIoJycpXG59XG5TcGxpdHRlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIGRhdGFdKVxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGggPiAxNSkge1xuICAgIHZhciBvdXQgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgIHRoaXMuY2FjaGUgPSB0aGlzLmNhY2hlLnNsaWNlKDE2KVxuICAgIHJldHVybiBvdXRcbiAgfVxuICByZXR1cm4gbnVsbFxufVxuU3BsaXR0ZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbGVuID0gMTYgLSB0aGlzLmNhY2hlLmxlbmd0aFxuICB2YXIgcGFkQnVmZiA9IG5ldyBCdWZmZXIobGVuKVxuXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIHBhZEJ1ZmYud3JpdGVVSW50OChsZW4sIGkpXG4gIH1cbiAgdmFyIG91dCA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIHBhZEJ1ZmZdKVxuICByZXR1cm4gb3V0XG59XG52YXIgbW9kZWxpc3QgPSB7XG4gIEVDQjogcmVxdWlyZSgnLi9tb2Rlcy9lY2InKSxcbiAgQ0JDOiByZXF1aXJlKCcuL21vZGVzL2NiYycpLFxuICBDRkI6IHJlcXVpcmUoJy4vbW9kZXMvY2ZiJyksXG4gIENGQjg6IHJlcXVpcmUoJy4vbW9kZXMvY2ZiOCcpLFxuICBDRkIxOiByZXF1aXJlKCcuL21vZGVzL2NmYjEnKSxcbiAgT0ZCOiByZXF1aXJlKCcuL21vZGVzL29mYicpLFxuICBDVFI6IHJlcXVpcmUoJy4vbW9kZXMvY3RyJyksXG4gIEdDTTogcmVxdWlyZSgnLi9tb2Rlcy9jdHInKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDaXBoZXJpdiAoc3VpdGUsIHBhc3N3b3JkLCBpdikge1xuICB2YXIgY29uZmlnID0gbW9kZXNbc3VpdGUudG9Mb3dlckNhc2UoKV1cbiAgaWYgKCFjb25maWcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuICB9XG4gIGlmICh0eXBlb2YgaXYgPT09ICdzdHJpbmcnKSB7XG4gICAgaXYgPSBuZXcgQnVmZmVyKGl2KVxuICB9XG4gIGlmICh0eXBlb2YgcGFzc3dvcmQgPT09ICdzdHJpbmcnKSB7XG4gICAgcGFzc3dvcmQgPSBuZXcgQnVmZmVyKHBhc3N3b3JkKVxuICB9XG4gIGlmIChwYXNzd29yZC5sZW5ndGggIT09IGNvbmZpZy5rZXkgLyA4KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBrZXkgbGVuZ3RoICcgKyBwYXNzd29yZC5sZW5ndGgpXG4gIH1cbiAgaWYgKGl2Lmxlbmd0aCAhPT0gY29uZmlnLml2KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBpdiBsZW5ndGggJyArIGl2Lmxlbmd0aClcbiAgfVxuICBpZiAoY29uZmlnLnR5cGUgPT09ICdzdHJlYW0nKSB7XG4gICAgcmV0dXJuIG5ldyBTdHJlYW1DaXBoZXIobW9kZWxpc3RbY29uZmlnLm1vZGVdLCBwYXNzd29yZCwgaXYpXG4gIH0gZWxzZSBpZiAoY29uZmlnLnR5cGUgPT09ICdhdXRoJykge1xuICAgIHJldHVybiBuZXcgQXV0aENpcGhlcihtb2RlbGlzdFtjb25maWcubW9kZV0sIHBhc3N3b3JkLCBpdilcbiAgfVxuICByZXR1cm4gbmV3IENpcGhlcihtb2RlbGlzdFtjb25maWcubW9kZV0sIHBhc3N3b3JkLCBpdilcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHZhciBjb25maWcgPSBtb2Rlc1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwgY29uZmlnLmtleSwgY29uZmlnLml2KVxuICByZXR1cm4gY3JlYXRlQ2lwaGVyaXYoc3VpdGUsIGtleXMua2V5LCBrZXlzLml2KVxufVxuXG5leHBvcnRzLmNyZWF0ZUNpcGhlcml2ID0gY3JlYXRlQ2lwaGVyaXZcbmV4cG9ydHMuY3JlYXRlQ2lwaGVyID0gY3JlYXRlQ2lwaGVyXG4iXX0=
},{"./aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/aes.js","./authCipher":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/authCipher.js","./modes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes.js","./modes/cbc":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/cbc.js","./modes/cfb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb.js","./modes/cfb1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb1.js","./modes/cfb8":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb8.js","./modes/ctr":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/ctr.js","./modes/ecb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/ecb.js","./modes/ofb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/ofb.js","./streamCipher":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/streamCipher.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","cipher-base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/cipher-base/index.js","evp_bytestokey":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/evp_bytestokey/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/decrypter.js":[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')
var modes = require('./modes')
var StreamCipher = require('./streamCipher')
var AuthCipher = require('./authCipher')
var ebtk = require('evp_bytestokey')

inherits(Decipher, Transform)
function Decipher (mode, key, iv) {
  if (!(this instanceof Decipher)) {
    return new Decipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}
Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
}
function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }
  return null
}
Splitter.prototype.flush = function () {
  if (this.cache.length) {
    return this.cache
  }
}
function unpad (last) {
  var padded = last[15]
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) {
    return
  }
  return last.slice(0, 16 - padded)
}

var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
}

function createDecipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv, true)
  }
  return new Decipher(modelist[config.mode], password, iv)
}

function createDecipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}
exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9kZWNyeXB0ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIG1vZGVzID0gcmVxdWlyZSgnLi9tb2RlcycpXG52YXIgU3RyZWFtQ2lwaGVyID0gcmVxdWlyZSgnLi9zdHJlYW1DaXBoZXInKVxudmFyIEF1dGhDaXBoZXIgPSByZXF1aXJlKCcuL2F1dGhDaXBoZXInKVxudmFyIGVidGsgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpXG5cbmluaGVyaXRzKERlY2lwaGVyLCBUcmFuc2Zvcm0pXG5mdW5jdGlvbiBEZWNpcGhlciAobW9kZSwga2V5LCBpdikge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRGVjaXBoZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBEZWNpcGhlcihtb2RlLCBrZXksIGl2KVxuICB9XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuX2NhY2hlID0gbmV3IFNwbGl0dGVyKClcbiAgdGhpcy5fbGFzdCA9IHZvaWQgMFxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBuZXcgQnVmZmVyKGl2Lmxlbmd0aClcbiAgaXYuY29weSh0aGlzLl9wcmV2KVxuICB0aGlzLl9tb2RlID0gbW9kZVxuICB0aGlzLl9hdXRvcGFkZGluZyA9IHRydWVcbn1cbkRlY2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG4gIHdoaWxlICgoY2h1bmsgPSB0aGlzLl9jYWNoZS5nZXQodGhpcy5fYXV0b3BhZGRpbmcpKSkge1xuICAgIHRoaW5nID0gdGhpcy5fbW9kZS5kZWNyeXB0KHRoaXMsIGNodW5rKVxuICAgIG91dC5wdXNoKHRoaW5nKVxuICB9XG4gIHJldHVybiBCdWZmZXIuY29uY2F0KG91dClcbn1cbkRlY2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjaHVuayA9IHRoaXMuX2NhY2hlLmZsdXNoKClcbiAgaWYgKHRoaXMuX2F1dG9wYWRkaW5nKSB7XG4gICAgcmV0dXJuIHVucGFkKHRoaXMuX21vZGUuZGVjcnlwdCh0aGlzLCBjaHVuaykpXG4gIH0gZWxzZSBpZiAoY2h1bmspIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgbm90IG11bHRpcGxlIG9mIGJsb2NrIGxlbmd0aCcpXG4gIH1cbn1cbkRlY2lwaGVyLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uIChzZXRUbykge1xuICB0aGlzLl9hdXRvcGFkZGluZyA9ICEhc2V0VG9cbn1cbmZ1bmN0aW9uIFNwbGl0dGVyICgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNwbGl0dGVyKSkge1xuICAgIHJldHVybiBuZXcgU3BsaXR0ZXIoKVxuICB9XG4gIHRoaXMuY2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxufVxuU3BsaXR0ZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuY2FjaGUgPSBCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBkYXRhXSlcbn1cblxuU3BsaXR0ZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChhdXRvUGFkZGluZykge1xuICB2YXIgb3V0XG4gIGlmIChhdXRvUGFkZGluZykge1xuICAgIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+IDE2KSB7XG4gICAgICBvdXQgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgICByZXR1cm4gb3V0XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+PSAxNikge1xuICAgICAgb3V0ID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNilcbiAgICAgIHRoaXMuY2FjaGUgPSB0aGlzLmNhY2hlLnNsaWNlKDE2KVxuICAgICAgcmV0dXJuIG91dFxuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbFxufVxuU3BsaXR0ZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy5jYWNoZVxuICB9XG59XG5mdW5jdGlvbiB1bnBhZCAobGFzdCkge1xuICB2YXIgcGFkZGVkID0gbGFzdFsxNV1cbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgcGFkZGVkKSB7XG4gICAgaWYgKGxhc3RbKGkgKyAoMTYgLSBwYWRkZWQpKV0gIT09IHBhZGRlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gZGVjcnlwdCBkYXRhJylcbiAgICB9XG4gIH1cbiAgaWYgKHBhZGRlZCA9PT0gMTYpIHtcbiAgICByZXR1cm5cbiAgfVxuICByZXR1cm4gbGFzdC5zbGljZSgwLCAxNiAtIHBhZGRlZClcbn1cblxudmFyIG1vZGVsaXN0ID0ge1xuICBFQ0I6IHJlcXVpcmUoJy4vbW9kZXMvZWNiJyksXG4gIENCQzogcmVxdWlyZSgnLi9tb2Rlcy9jYmMnKSxcbiAgQ0ZCOiByZXF1aXJlKCcuL21vZGVzL2NmYicpLFxuICBDRkI4OiByZXF1aXJlKCcuL21vZGVzL2NmYjgnKSxcbiAgQ0ZCMTogcmVxdWlyZSgnLi9tb2Rlcy9jZmIxJyksXG4gIE9GQjogcmVxdWlyZSgnLi9tb2Rlcy9vZmInKSxcbiAgQ1RSOiByZXF1aXJlKCcuL21vZGVzL2N0cicpLFxuICBHQ006IHJlcXVpcmUoJy4vbW9kZXMvY3RyJylcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVjaXBoZXJpdiAoc3VpdGUsIHBhc3N3b3JkLCBpdikge1xuICB2YXIgY29uZmlnID0gbW9kZXNbc3VpdGUudG9Mb3dlckNhc2UoKV1cbiAgaWYgKCFjb25maWcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuICB9XG4gIGlmICh0eXBlb2YgaXYgPT09ICdzdHJpbmcnKSB7XG4gICAgaXYgPSBuZXcgQnVmZmVyKGl2KVxuICB9XG4gIGlmICh0eXBlb2YgcGFzc3dvcmQgPT09ICdzdHJpbmcnKSB7XG4gICAgcGFzc3dvcmQgPSBuZXcgQnVmZmVyKHBhc3N3b3JkKVxuICB9XG4gIGlmIChwYXNzd29yZC5sZW5ndGggIT09IGNvbmZpZy5rZXkgLyA4KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBrZXkgbGVuZ3RoICcgKyBwYXNzd29yZC5sZW5ndGgpXG4gIH1cbiAgaWYgKGl2Lmxlbmd0aCAhPT0gY29uZmlnLml2KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBpdiBsZW5ndGggJyArIGl2Lmxlbmd0aClcbiAgfVxuICBpZiAoY29uZmlnLnR5cGUgPT09ICdzdHJlYW0nKSB7XG4gICAgcmV0dXJuIG5ldyBTdHJlYW1DaXBoZXIobW9kZWxpc3RbY29uZmlnLm1vZGVdLCBwYXNzd29yZCwgaXYsIHRydWUpXG4gIH0gZWxzZSBpZiAoY29uZmlnLnR5cGUgPT09ICdhdXRoJykge1xuICAgIHJldHVybiBuZXcgQXV0aENpcGhlcihtb2RlbGlzdFtjb25maWcubW9kZV0sIHBhc3N3b3JkLCBpdiwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gbmV3IERlY2lwaGVyKG1vZGVsaXN0W2NvbmZpZy5tb2RlXSwgcGFzc3dvcmQsIGl2KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHZhciBjb25maWcgPSBtb2Rlc1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwgY29uZmlnLmtleSwgY29uZmlnLml2KVxuICByZXR1cm4gY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyID0gY3JlYXRlRGVjaXBoZXJcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXJpdiA9IGNyZWF0ZURlY2lwaGVyaXZcbiJdfQ==
},{"./aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/aes.js","./authCipher":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/authCipher.js","./modes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes.js","./modes/cbc":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/cbc.js","./modes/cfb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb.js","./modes/cfb1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb1.js","./modes/cfb8":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb8.js","./modes/ctr":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/ctr.js","./modes/ecb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/ecb.js","./modes/ofb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/ofb.js","./streamCipher":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/streamCipher.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","cipher-base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/cipher-base/index.js","evp_bytestokey":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/evp_bytestokey/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/evp_bytestokey/index.js":[function(require,module,exports){
(function (Buffer){
var md5 = require('create-hash/md5')
module.exports = EVP_BytesToKey
function EVP_BytesToKey (password, salt, keyLen, ivLen) {
  if (!Buffer.isBuffer(password)) {
    password = new Buffer(password, 'binary')
  }
  if (salt && !Buffer.isBuffer(salt)) {
    salt = new Buffer(salt, 'binary')
  }
  keyLen = keyLen / 8
  ivLen = ivLen || 0
  var ki = 0
  var ii = 0
  var key = new Buffer(keyLen)
  var iv = new Buffer(ivLen)
  var addmd = 0
  var md_buf
  var i
  var bufs = []
  while (true) {
    if (addmd++ > 0) {
      bufs.push(md_buf)
    }
    bufs.push(password)
    if (salt) {
      bufs.push(salt)
    }
    md_buf = md5(Buffer.concat(bufs))
    bufs = []
    i = 0
    if (keyLen > 0) {
      while (true) {
        if (keyLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        key[ki++] = md_buf[i]
        keyLen--
        i++
      }
    }
    if (ivLen > 0 && i !== md_buf.length) {
      while (true) {
        if (ivLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        iv[ii++] = md_buf[i]
        ivLen--
        i++
      }
    }
    if (keyLen === 0 && ivLen === 0) {
      break
    }
  }
  for (i = 0; i < md_buf.length; i++) {
    md_buf[i] = 0
  }
  return {
    key: key,
    iv: iv
  }
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9ldnBfYnl0ZXN0b2tleS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWQ1ID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gvbWQ1Jylcbm1vZHVsZS5leHBvcnRzID0gRVZQX0J5dGVzVG9LZXlcbmZ1bmN0aW9uIEVWUF9CeXRlc1RvS2V5IChwYXNzd29yZCwgc2FsdCwga2V5TGVuLCBpdkxlbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwYXNzd29yZCkpIHtcbiAgICBwYXNzd29yZCA9IG5ldyBCdWZmZXIocGFzc3dvcmQsICdiaW5hcnknKVxuICB9XG4gIGlmIChzYWx0ICYmICFCdWZmZXIuaXNCdWZmZXIoc2FsdCkpIHtcbiAgICBzYWx0ID0gbmV3IEJ1ZmZlcihzYWx0LCAnYmluYXJ5JylcbiAgfVxuICBrZXlMZW4gPSBrZXlMZW4gLyA4XG4gIGl2TGVuID0gaXZMZW4gfHwgMFxuICB2YXIga2kgPSAwXG4gIHZhciBpaSA9IDBcbiAgdmFyIGtleSA9IG5ldyBCdWZmZXIoa2V5TGVuKVxuICB2YXIgaXYgPSBuZXcgQnVmZmVyKGl2TGVuKVxuICB2YXIgYWRkbWQgPSAwXG4gIHZhciBtZF9idWZcbiAgdmFyIGlcbiAgdmFyIGJ1ZnMgPSBbXVxuICB3aGlsZSAodHJ1ZSkge1xuICAgIGlmIChhZGRtZCsrID4gMCkge1xuICAgICAgYnVmcy5wdXNoKG1kX2J1ZilcbiAgICB9XG4gICAgYnVmcy5wdXNoKHBhc3N3b3JkKVxuICAgIGlmIChzYWx0KSB7XG4gICAgICBidWZzLnB1c2goc2FsdClcbiAgICB9XG4gICAgbWRfYnVmID0gbWQ1KEJ1ZmZlci5jb25jYXQoYnVmcykpXG4gICAgYnVmcyA9IFtdXG4gICAgaSA9IDBcbiAgICBpZiAoa2V5TGVuID4gMCkge1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgaWYgKGtleUxlbiA9PT0gMCkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPT09IG1kX2J1Zi5sZW5ndGgpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGtleVtraSsrXSA9IG1kX2J1ZltpXVxuICAgICAgICBrZXlMZW4tLVxuICAgICAgICBpKytcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGl2TGVuID4gMCAmJiBpICE9PSBtZF9idWYubGVuZ3RoKSB7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBpZiAoaXZMZW4gPT09IDApIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGlmIChpID09PSBtZF9idWYubGVuZ3RoKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBpdltpaSsrXSA9IG1kX2J1ZltpXVxuICAgICAgICBpdkxlbi0tXG4gICAgICAgIGkrK1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoa2V5TGVuID09PSAwICYmIGl2TGVuID09PSAwKSB7XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuICBmb3IgKGkgPSAwOyBpIDwgbWRfYnVmLmxlbmd0aDsgaSsrKSB7XG4gICAgbWRfYnVmW2ldID0gMFxuICB9XG4gIHJldHVybiB7XG4gICAga2V5OiBrZXksXG4gICAgaXY6IGl2XG4gIH1cbn1cbiJdfQ==
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","create-hash/md5":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/md5.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/streamCipher.js":[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')

inherits(StreamCipher, Transform)
module.exports = StreamCipher
function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  iv.copy(this._prev)
  this._mode = mode
}
StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}
StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9zdHJlYW1DaXBoZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG5pbmhlcml0cyhTdHJlYW1DaXBoZXIsIFRyYW5zZm9ybSlcbm1vZHVsZS5leHBvcnRzID0gU3RyZWFtQ2lwaGVyXG5mdW5jdGlvbiBTdHJlYW1DaXBoZXIgKG1vZGUsIGtleSwgaXYsIGRlY3J5cHQpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFN0cmVhbUNpcGhlcikpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihtb2RlLCBrZXksIGl2KVxuICB9XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IG5ldyBCdWZmZXIoaXYubGVuZ3RoKVxuICB0aGlzLl9jYWNoZSA9IG5ldyBCdWZmZXIoJycpXG4gIHRoaXMuX3NlY0NhY2hlID0gbmV3IEJ1ZmZlcignJylcbiAgdGhpcy5fZGVjcnlwdCA9IGRlY3J5cHRcbiAgaXYuY29weSh0aGlzLl9wcmV2KVxuICB0aGlzLl9tb2RlID0gbW9kZVxufVxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIHJldHVybiB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmssIHRoaXMuX2RlY3J5cHQpXG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fY2lwaGVyLnNjcnViKClcbn1cbiJdfQ==
},{"./aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/aes.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","cipher-base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/cipher-base/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/ofb.js":[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9vZmIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZnVuY3Rpb24gZ2V0QmxvY2sgKHNlbGYpIHtcbiAgc2VsZi5fcHJldiA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgcmV0dXJuIHNlbGYuX3ByZXZcbn1cblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rKSB7XG4gIHdoaWxlIChzZWxmLl9jYWNoZS5sZW5ndGggPCBjaHVuay5sZW5ndGgpIHtcbiAgICBzZWxmLl9jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3NlbGYuX2NhY2hlLCBnZXRCbG9jayhzZWxmKV0pXG4gIH1cblxuICB2YXIgcGFkID0gc2VsZi5fY2FjaGUuc2xpY2UoMCwgY2h1bmsubGVuZ3RoKVxuICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGNodW5rLmxlbmd0aClcbiAgcmV0dXJuIHhvcihjaHVuaywgcGFkKVxufVxuIl19
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/buffer-xor/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/ecb.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/ecb.js"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/ctr.js":[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}

function getBlock (self) {
  var out = self._cipher.encryptBlock(self._prev)
  incr32(self._prev)
  return out
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jdHIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZnVuY3Rpb24gaW5jcjMyIChpdikge1xuICB2YXIgbGVuID0gaXYubGVuZ3RoXG4gIHZhciBpdGVtXG4gIHdoaWxlIChsZW4tLSkge1xuICAgIGl0ZW0gPSBpdi5yZWFkVUludDgobGVuKVxuICAgIGlmIChpdGVtID09PSAyNTUpIHtcbiAgICAgIGl2LndyaXRlVUludDgoMCwgbGVuKVxuICAgIH0gZWxzZSB7XG4gICAgICBpdGVtKytcbiAgICAgIGl2LndyaXRlVUludDgoaXRlbSwgbGVuKVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QmxvY2sgKHNlbGYpIHtcbiAgdmFyIG91dCA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgaW5jcjMyKHNlbGYuX3ByZXYpXG4gIHJldHVybiBvdXRcbn1cblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rKSB7XG4gIHdoaWxlIChzZWxmLl9jYWNoZS5sZW5ndGggPCBjaHVuay5sZW5ndGgpIHtcbiAgICBzZWxmLl9jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3NlbGYuX2NhY2hlLCBnZXRCbG9jayhzZWxmKV0pXG4gIH1cbiAgdmFyIHBhZCA9IHNlbGYuX2NhY2hlLnNsaWNlKDAsIGNodW5rLmxlbmd0aClcbiAgc2VsZi5fY2FjaGUgPSBzZWxmLl9jYWNoZS5zbGljZShjaHVuay5sZW5ndGgpXG4gIHJldHVybiB4b3IoY2h1bmssIHBhZClcbn1cbiJdfQ==
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/buffer-xor/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb8.js":[function(require,module,exports){
(function (Buffer){
function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam
  self._prev = Buffer.concat([self._prev.slice(1), new Buffer([decrypt ? byteParam : out])])
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jZmI4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZW5jcnlwdEJ5dGUgKHNlbGYsIGJ5dGVQYXJhbSwgZGVjcnlwdCkge1xuICB2YXIgcGFkID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICB2YXIgb3V0ID0gcGFkWzBdIF4gYnl0ZVBhcmFtXG4gIHNlbGYuX3ByZXYgPSBCdWZmZXIuY29uY2F0KFtzZWxmLl9wcmV2LnNsaWNlKDEpLCBuZXcgQnVmZmVyKFtkZWNyeXB0ID8gYnl0ZVBhcmFtIDogb3V0XSldKVxuICByZXR1cm4gb3V0XG59XG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmssIGRlY3J5cHQpIHtcbiAgdmFyIGxlbiA9IGNodW5rLmxlbmd0aFxuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcihsZW4pXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIG91dFtpXSA9IGVuY3J5cHRCeXRlKHNlbGYsIGNodW5rW2ldLCBkZWNyeXB0KVxuICB9XG4gIHJldHVybiBvdXRcbn1cbiJdfQ==
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb1.js":[function(require,module,exports){
(function (Buffer){
function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}
function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = new Buffer(buffer.length)
  buffer = Buffer.concat([buffer, new Buffer([value])])
  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jZmIxLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBlbmNyeXB0Qnl0ZSAoc2VsZiwgYnl0ZVBhcmFtLCBkZWNyeXB0KSB7XG4gIHZhciBwYWRcbiAgdmFyIGkgPSAtMVxuICB2YXIgbGVuID0gOFxuICB2YXIgb3V0ID0gMFxuICB2YXIgYml0LCB2YWx1ZVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgcGFkID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICAgIGJpdCA9IChieXRlUGFyYW0gJiAoMSA8PCAoNyAtIGkpKSkgPyAweDgwIDogMFxuICAgIHZhbHVlID0gcGFkWzBdIF4gYml0XG4gICAgb3V0ICs9ICgodmFsdWUgJiAweDgwKSA+PiAoaSAlIDgpKVxuICAgIHNlbGYuX3ByZXYgPSBzaGlmdEluKHNlbGYuX3ByZXYsIGRlY3J5cHQgPyBiaXQgOiB2YWx1ZSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmssIGRlY3J5cHQpIHtcbiAgdmFyIGxlbiA9IGNodW5rLmxlbmd0aFxuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcihsZW4pXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIG91dFtpXSA9IGVuY3J5cHRCeXRlKHNlbGYsIGNodW5rW2ldLCBkZWNyeXB0KVxuICB9XG4gIHJldHVybiBvdXRcbn1cbmZ1bmN0aW9uIHNoaWZ0SW4gKGJ1ZmZlciwgdmFsdWUpIHtcbiAgdmFyIGxlbiA9IGJ1ZmZlci5sZW5ndGhcbiAgdmFyIGkgPSAtMVxuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcihidWZmZXIubGVuZ3RoKVxuICBidWZmZXIgPSBCdWZmZXIuY29uY2F0KFtidWZmZXIsIG5ldyBCdWZmZXIoW3ZhbHVlXSldKVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0W2ldID0gYnVmZmVyW2ldIDw8IDEgfCBidWZmZXJbaSArIDFdID4+ICg3KVxuICB9XG4gIHJldHVybiBvdXRcbn1cbiJdfQ==
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb.js":[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

exports.encrypt = function (self, data, decrypt) {
  var out = new Buffer('')
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = new Buffer('')
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}
function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jZmIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGRhdGEsIGRlY3J5cHQpIHtcbiAgdmFyIG91dCA9IG5ldyBCdWZmZXIoJycpXG4gIHZhciBsZW5cblxuICB3aGlsZSAoZGF0YS5sZW5ndGgpIHtcbiAgICBpZiAoc2VsZi5fY2FjaGUubGVuZ3RoID09PSAwKSB7XG4gICAgICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgICAgIHNlbGYuX3ByZXYgPSBuZXcgQnVmZmVyKCcnKVxuICAgIH1cblxuICAgIGlmIChzZWxmLl9jYWNoZS5sZW5ndGggPD0gZGF0YS5sZW5ndGgpIHtcbiAgICAgIGxlbiA9IHNlbGYuX2NhY2hlLmxlbmd0aFxuICAgICAgb3V0ID0gQnVmZmVyLmNvbmNhdChbb3V0LCBlbmNyeXB0U3RhcnQoc2VsZiwgZGF0YS5zbGljZSgwLCBsZW4pLCBkZWNyeXB0KV0pXG4gICAgICBkYXRhID0gZGF0YS5zbGljZShsZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoW291dCwgZW5jcnlwdFN0YXJ0KHNlbGYsIGRhdGEsIGRlY3J5cHQpXSlcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuZnVuY3Rpb24gZW5jcnlwdFN0YXJ0IChzZWxmLCBkYXRhLCBkZWNyeXB0KSB7XG4gIHZhciBsZW4gPSBkYXRhLmxlbmd0aFxuICB2YXIgb3V0ID0geG9yKGRhdGEsIHNlbGYuX2NhY2hlKVxuICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGxlbilcbiAgc2VsZi5fcHJldiA9IEJ1ZmZlci5jb25jYXQoW3NlbGYuX3ByZXYsIGRlY3J5cHQgPyBkYXRhIDogb3V0XSlcbiAgcmV0dXJuIG91dFxufVxuIl19
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/buffer-xor/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/cbc.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/cbc.js"][0].apply(exports,arguments)
},{"buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/buffer-xor/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes.js"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/authCipher.js":[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')
var GHASH = require('./ghash')
var xor = require('buffer-xor')
inherits(StreamCipher, Transform)
module.exports = StreamCipher

function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._finID = Buffer.concat([iv, new Buffer([0, 0, 0, 1])])
  iv = Buffer.concat([iv, new Buffer([0, 0, 0, 2])])
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  iv.copy(this._prev)
  this._mode = mode
  var h = new Buffer(4)
  h.fill(0)
  this._ghash = new GHASH(this._cipher.encryptBlock(h))
  this._authTag = null
  this._called = false
}
StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = new Buffer(rump)
      rump.fill(0)
      this._ghash.update(rump)
    }
  }
  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}
StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) {
    throw new Error('Unsupported state or unable to authenticate data')
  }
  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt) {
    if (xorTest(tag, this._authTag)) {
      throw new Error('Unsupported state or unable to authenticate data')
    }
  } else {
    this._authTag = tag
  }
  this._cipher.scrub()
}
StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (!this._decrypt && Buffer.isBuffer(this._authTag)) {
    return this._authTag
  } else {
    throw new Error('Attempting to get auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (this._decrypt) {
    this._authTag = tag
  } else {
    throw new Error('Attempting to set auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (!this._called) {
    this._ghash.update(buf)
    this._alen += buf.length
  } else {
    throw new Error('Attempting to set AAD in unsupported state')
  }
}
function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) {
    out++
  }
  var len = Math.min(a.length, b.length)
  var i = -1
  while (++i < len) {
    out += (a[i] ^ b[i])
  }
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9hdXRoQ2lwaGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYWVzID0gcmVxdWlyZSgnLi9hZXMnKVxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBHSEFTSCA9IHJlcXVpcmUoJy4vZ2hhc2gnKVxudmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuaW5oZXJpdHMoU3RyZWFtQ2lwaGVyLCBUcmFuc2Zvcm0pXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmVhbUNpcGhlclxuXG5mdW5jdGlvbiBTdHJlYW1DaXBoZXIgKG1vZGUsIGtleSwgaXYsIGRlY3J5cHQpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFN0cmVhbUNpcGhlcikpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihtb2RlLCBrZXksIGl2KVxuICB9XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuX2ZpbklEID0gQnVmZmVyLmNvbmNhdChbaXYsIG5ldyBCdWZmZXIoWzAsIDAsIDAsIDFdKV0pXG4gIGl2ID0gQnVmZmVyLmNvbmNhdChbaXYsIG5ldyBCdWZmZXIoWzAsIDAsIDAsIDJdKV0pXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IG5ldyBCdWZmZXIoaXYubGVuZ3RoKVxuICB0aGlzLl9jYWNoZSA9IG5ldyBCdWZmZXIoJycpXG4gIHRoaXMuX3NlY0NhY2hlID0gbmV3IEJ1ZmZlcignJylcbiAgdGhpcy5fZGVjcnlwdCA9IGRlY3J5cHRcbiAgdGhpcy5fYWxlbiA9IDBcbiAgdGhpcy5fbGVuID0gMFxuICBpdi5jb3B5KHRoaXMuX3ByZXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG4gIHZhciBoID0gbmV3IEJ1ZmZlcig0KVxuICBoLmZpbGwoMClcbiAgdGhpcy5fZ2hhc2ggPSBuZXcgR0hBU0godGhpcy5fY2lwaGVyLmVuY3J5cHRCbG9jayhoKSlcbiAgdGhpcy5fYXV0aFRhZyA9IG51bGxcbiAgdGhpcy5fY2FsbGVkID0gZmFsc2Vcbn1cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChjaHVuaykge1xuICBpZiAoIXRoaXMuX2NhbGxlZCAmJiB0aGlzLl9hbGVuKSB7XG4gICAgdmFyIHJ1bXAgPSAxNiAtICh0aGlzLl9hbGVuICUgMTYpXG4gICAgaWYgKHJ1bXAgPCAxNikge1xuICAgICAgcnVtcCA9IG5ldyBCdWZmZXIocnVtcClcbiAgICAgIHJ1bXAuZmlsbCgwKVxuICAgICAgdGhpcy5fZ2hhc2gudXBkYXRlKHJ1bXApXG4gICAgfVxuICB9XG4gIHRoaXMuX2NhbGxlZCA9IHRydWVcbiAgdmFyIG91dCA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgaWYgKHRoaXMuX2RlY3J5cHQpIHtcbiAgICB0aGlzLl9naGFzaC51cGRhdGUoY2h1bmspXG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fZ2hhc2gudXBkYXRlKG91dClcbiAgfVxuICB0aGlzLl9sZW4gKz0gY2h1bmsubGVuZ3RoXG4gIHJldHVybiBvdXRcbn1cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5fZGVjcnlwdCAmJiAhdGhpcy5fYXV0aFRhZykge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgc3RhdGUgb3IgdW5hYmxlIHRvIGF1dGhlbnRpY2F0ZSBkYXRhJylcbiAgfVxuICB2YXIgdGFnID0geG9yKHRoaXMuX2doYXNoLmZpbmFsKHRoaXMuX2FsZW4gKiA4LCB0aGlzLl9sZW4gKiA4KSwgdGhpcy5fY2lwaGVyLmVuY3J5cHRCbG9jayh0aGlzLl9maW5JRCkpXG4gIGlmICh0aGlzLl9kZWNyeXB0KSB7XG4gICAgaWYgKHhvclRlc3QodGFnLCB0aGlzLl9hdXRoVGFnKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBzdGF0ZSBvciB1bmFibGUgdG8gYXV0aGVudGljYXRlIGRhdGEnKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9hdXRoVGFnID0gdGFnXG4gIH1cbiAgdGhpcy5fY2lwaGVyLnNjcnViKClcbn1cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuZ2V0QXV0aFRhZyA9IGZ1bmN0aW9uIGdldEF1dGhUYWcgKCkge1xuICBpZiAoIXRoaXMuX2RlY3J5cHQgJiYgQnVmZmVyLmlzQnVmZmVyKHRoaXMuX2F1dGhUYWcpKSB7XG4gICAgcmV0dXJuIHRoaXMuX2F1dGhUYWdcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRpbmcgdG8gZ2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbiAgfVxufVxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5zZXRBdXRoVGFnID0gZnVuY3Rpb24gc2V0QXV0aFRhZyAodGFnKSB7XG4gIGlmICh0aGlzLl9kZWNyeXB0KSB7XG4gICAgdGhpcy5fYXV0aFRhZyA9IHRhZ1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGluZyB0byBzZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxuICB9XG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLnNldEFBRCA9IGZ1bmN0aW9uIHNldEFBRCAoYnVmKSB7XG4gIGlmICghdGhpcy5fY2FsbGVkKSB7XG4gICAgdGhpcy5fZ2hhc2gudXBkYXRlKGJ1ZilcbiAgICB0aGlzLl9hbGVuICs9IGJ1Zi5sZW5ndGhcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRpbmcgdG8gc2V0IEFBRCBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG4gIH1cbn1cbmZ1bmN0aW9uIHhvclRlc3QgKGEsIGIpIHtcbiAgdmFyIG91dCA9IDBcbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgIG91dCsrXG4gIH1cbiAgdmFyIGxlbiA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aClcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0ICs9IChhW2ldIF4gYltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG4iXX0=
},{"./aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/aes.js","./ghash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/ghash.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/buffer-xor/index.js","cipher-base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/cipher-base/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/cipher-base/index.js":[function(require,module,exports){
(function (Buffer){
var Transform = require('stream').Transform
var inherits = require('inherits')
var StringDecoder = require('string_decoder').StringDecoder
module.exports = CipherBase
inherits(CipherBase, Transform)
function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  this._decoder = null
  this._encoding = null
}
CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = new Buffer(data, inputEnc)
  }
  var outData = this._update(data)
  if (this.hashMode) {
    return this
  }
  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }
  return outData
}

CipherBase.prototype.setAutoPadding = function () {}

CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this._final())
  } catch (e) {
    err = e
  } finally {
    done(err)
  }
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this._final() || new Buffer('')
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, final) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }
  if (this._encoding !== enc) {
    throw new Error('can\'t switch encodings')
  }
  var out = this._decoder.write(value)
  if (final) {
    out += this._decoder.end()
  }
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9ub2RlX21vZHVsZXMvY2lwaGVyLWJhc2UvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnc3RyZWFtJykuVHJhbnNmb3JtXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyJykuU3RyaW5nRGVjb2RlclxubW9kdWxlLmV4cG9ydHMgPSBDaXBoZXJCYXNlXG5pbmhlcml0cyhDaXBoZXJCYXNlLCBUcmFuc2Zvcm0pXG5mdW5jdGlvbiBDaXBoZXJCYXNlIChoYXNoTW9kZSkge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuICB0aGlzLmhhc2hNb2RlID0gdHlwZW9mIGhhc2hNb2RlID09PSAnc3RyaW5nJ1xuICBpZiAodGhpcy5oYXNoTW9kZSkge1xuICAgIHRoaXNbaGFzaE1vZGVdID0gdGhpcy5fZmluYWxPckRpZ2VzdFxuICB9IGVsc2Uge1xuICAgIHRoaXMuZmluYWwgPSB0aGlzLl9maW5hbE9yRGlnZXN0XG4gIH1cbiAgdGhpcy5fZGVjb2RlciA9IG51bGxcbiAgdGhpcy5fZW5jb2RpbmcgPSBudWxsXG59XG5DaXBoZXJCYXNlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSwgaW5wdXRFbmMsIG91dHB1dEVuYykge1xuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgZGF0YSA9IG5ldyBCdWZmZXIoZGF0YSwgaW5wdXRFbmMpXG4gIH1cbiAgdmFyIG91dERhdGEgPSB0aGlzLl91cGRhdGUoZGF0YSlcbiAgaWYgKHRoaXMuaGFzaE1vZGUpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG4gIGlmIChvdXRwdXRFbmMpIHtcbiAgICBvdXREYXRhID0gdGhpcy5fdG9TdHJpbmcob3V0RGF0YSwgb3V0cHV0RW5jKVxuICB9XG4gIHJldHVybiBvdXREYXRhXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEF1dG9QYWRkaW5nID0gZnVuY3Rpb24gKCkge31cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuZ2V0QXV0aFRhZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gZ2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QXV0aFRhZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gc2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QUFEID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBzZXQgYWFkIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChkYXRhLCBfLCBuZXh0KSB7XG4gIHZhciBlcnJcbiAgdHJ5IHtcbiAgICBpZiAodGhpcy5oYXNoTW9kZSkge1xuICAgICAgdGhpcy5fdXBkYXRlKGRhdGEpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHVzaCh0aGlzLl91cGRhdGUoZGF0YSkpXG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyID0gZVxuICB9IGZpbmFsbHkge1xuICAgIG5leHQoZXJyKVxuICB9XG59XG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fZmx1c2ggPSBmdW5jdGlvbiAoZG9uZSkge1xuICB2YXIgZXJyXG4gIHRyeSB7XG4gICAgdGhpcy5wdXNoKHRoaXMuX2ZpbmFsKCkpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnIgPSBlXG4gIH0gZmluYWxseSB7XG4gICAgZG9uZShlcnIpXG4gIH1cbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLl9maW5hbE9yRGlnZXN0ID0gZnVuY3Rpb24gKG91dHB1dEVuYykge1xuICB2YXIgb3V0RGF0YSA9IHRoaXMuX2ZpbmFsKCkgfHwgbmV3IEJ1ZmZlcignJylcbiAgaWYgKG91dHB1dEVuYykge1xuICAgIG91dERhdGEgPSB0aGlzLl90b1N0cmluZyhvdXREYXRhLCBvdXRwdXRFbmMsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG91dERhdGFcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX3RvU3RyaW5nID0gZnVuY3Rpb24gKHZhbHVlLCBlbmMsIGZpbmFsKSB7XG4gIGlmICghdGhpcy5fZGVjb2Rlcikge1xuICAgIHRoaXMuX2RlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihlbmMpXG4gICAgdGhpcy5fZW5jb2RpbmcgPSBlbmNcbiAgfVxuICBpZiAodGhpcy5fZW5jb2RpbmcgIT09IGVuYykge1xuICAgIHRocm93IG5ldyBFcnJvcignY2FuXFwndCBzd2l0Y2ggZW5jb2RpbmdzJylcbiAgfVxuICB2YXIgb3V0ID0gdGhpcy5fZGVjb2Rlci53cml0ZSh2YWx1ZSlcbiAgaWYgKGZpbmFsKSB7XG4gICAgb3V0ICs9IHRoaXMuX2RlY29kZXIuZW5kKClcbiAgfVxuICByZXR1cm4gb3V0XG59XG4iXX0=
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js","stream":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/stream-browserify/index.js","string_decoder":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/string_decoder/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/buffer-xor/index.js":[function(require,module,exports){
(function (Buffer){
module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9ub2RlX21vZHVsZXMvYnVmZmVyLXhvci9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4b3IgKGEsIGIpIHtcbiAgdmFyIGxlbmd0aCA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aClcbiAgdmFyIGJ1ZmZlciA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBidWZmZXJbaV0gPSBhW2ldIF4gYltpXVxuICB9XG5cbiAgcmV0dXJuIGJ1ZmZlclxufVxuIl19
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/ghash.js":[function(require,module,exports){
(function (Buffer){
var zeros = new Buffer(16)
zeros.fill(0)
module.exports = GHASH
function GHASH (key) {
  this.h = key
  this.state = new Buffer(16)
  this.state.fill(0)
  this.cache = new Buffer('')
}
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsb_Vi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - i % 8))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi = xor(Zi, Vi)
    }

    // Store the value of LSB(V_i)
    lsb_Vi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsb_Vi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}
GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}
GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, zeros], 16))
  }
  this.ghash(fromArray([
    0, abl,
    0, bl
  ]))
  return this.state
}

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}
function fromArray (out) {
  out = out.map(fixup_uint32)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}
var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function xor (a, b) {
  return [
    a[0] ^ b[0],
    a[1] ^ b[1],
    a[2] ^ b[2],
    a[3] ^ b[3]
  ]
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9naGFzaC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgemVyb3MgPSBuZXcgQnVmZmVyKDE2KVxuemVyb3MuZmlsbCgwKVxubW9kdWxlLmV4cG9ydHMgPSBHSEFTSFxuZnVuY3Rpb24gR0hBU0ggKGtleSkge1xuICB0aGlzLmggPSBrZXlcbiAgdGhpcy5zdGF0ZSA9IG5ldyBCdWZmZXIoMTYpXG4gIHRoaXMuc3RhdGUuZmlsbCgwKVxuICB0aGlzLmNhY2hlID0gbmV3IEJ1ZmZlcignJylcbn1cbi8vIGZyb20gaHR0cDovL2JpdHdpc2VzaGlmdGxlZnQuZ2l0aHViLmlvL3NqY2wvZG9jL3N5bWJvbHMvc3JjL2NvcmVfZ2NtLmpzLmh0bWxcbi8vIGJ5IEp1aG8gVsOkaMOkLUhlcnR0dWFcbkdIQVNILnByb3RvdHlwZS5naGFzaCA9IGZ1bmN0aW9uIChibG9jaykge1xuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBibG9jay5sZW5ndGgpIHtcbiAgICB0aGlzLnN0YXRlW2ldIF49IGJsb2NrW2ldXG4gIH1cbiAgdGhpcy5fbXVsdGlwbHkoKVxufVxuXG5HSEFTSC5wcm90b3R5cGUuX211bHRpcGx5ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgVmkgPSB0b0FycmF5KHRoaXMuaClcbiAgdmFyIFppID0gWzAsIDAsIDAsIDBdXG4gIHZhciBqLCB4aSwgbHNiX1ZpXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IDEyOCkge1xuICAgIHhpID0gKHRoaXMuc3RhdGVbfn4oaSAvIDgpXSAmICgxIDw8ICg3IC0gaSAlIDgpKSkgIT09IDBcbiAgICBpZiAoeGkpIHtcbiAgICAgIC8vIFpfaSsxID0gWl9pIF4gVl9pXG4gICAgICBaaSA9IHhvcihaaSwgVmkpXG4gICAgfVxuXG4gICAgLy8gU3RvcmUgdGhlIHZhbHVlIG9mIExTQihWX2kpXG4gICAgbHNiX1ZpID0gKFZpWzNdICYgMSkgIT09IDBcblxuICAgIC8vIFZfaSsxID0gVl9pID4+IDFcbiAgICBmb3IgKGogPSAzOyBqID4gMDsgai0tKSB7XG4gICAgICBWaVtqXSA9IChWaVtqXSA+Pj4gMSkgfCAoKFZpW2ogLSAxXSAmIDEpIDw8IDMxKVxuICAgIH1cbiAgICBWaVswXSA9IFZpWzBdID4+PiAxXG5cbiAgICAvLyBJZiBMU0IoVl9pKSBpcyAxLCBWX2krMSA9IChWX2kgPj4gMSkgXiBSXG4gICAgaWYgKGxzYl9WaSkge1xuICAgICAgVmlbMF0gPSBWaVswXSBeICgweGUxIDw8IDI0KVxuICAgIH1cbiAgfVxuICB0aGlzLnN0YXRlID0gZnJvbUFycmF5KFppKVxufVxuR0hBU0gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChidWYpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIGJ1Zl0pXG4gIHZhciBjaHVua1xuICB3aGlsZSAodGhpcy5jYWNoZS5sZW5ndGggPj0gMTYpIHtcbiAgICBjaHVuayA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgdGhpcy5naGFzaChjaHVuaylcbiAgfVxufVxuR0hBU0gucHJvdG90eXBlLmZpbmFsID0gZnVuY3Rpb24gKGFibCwgYmwpIHtcbiAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoKSB7XG4gICAgdGhpcy5naGFzaChCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCB6ZXJvc10sIDE2KSlcbiAgfVxuICB0aGlzLmdoYXNoKGZyb21BcnJheShbXG4gICAgMCwgYWJsLFxuICAgIDAsIGJsXG4gIF0pKVxuICByZXR1cm4gdGhpcy5zdGF0ZVxufVxuXG5mdW5jdGlvbiB0b0FycmF5IChidWYpIHtcbiAgcmV0dXJuIFtcbiAgICBidWYucmVhZFVJbnQzMkJFKDApLFxuICAgIGJ1Zi5yZWFkVUludDMyQkUoNCksXG4gICAgYnVmLnJlYWRVSW50MzJCRSg4KSxcbiAgICBidWYucmVhZFVJbnQzMkJFKDEyKVxuICBdXG59XG5mdW5jdGlvbiBmcm9tQXJyYXkgKG91dCkge1xuICBvdXQgPSBvdXQubWFwKGZpeHVwX3VpbnQzMilcbiAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIoMTYpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFswXSwgMClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzFdLCA0KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMl0sIDgpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFszXSwgMTIpXG4gIHJldHVybiBidWZcbn1cbnZhciB1aW50X21heCA9IE1hdGgucG93KDIsIDMyKVxuZnVuY3Rpb24gZml4dXBfdWludDMyICh4KSB7XG4gIHZhciByZXQsIHhfcG9zXG4gIHJldCA9IHggPiB1aW50X21heCB8fCB4IDwgMCA/ICh4X3BvcyA9IE1hdGguYWJzKHgpICUgdWludF9tYXgsIHggPCAwID8gdWludF9tYXggLSB4X3BvcyA6IHhfcG9zKSA6IHhcbiAgcmV0dXJuIHJldFxufVxuZnVuY3Rpb24geG9yIChhLCBiKSB7XG4gIHJldHVybiBbXG4gICAgYVswXSBeIGJbMF0sXG4gICAgYVsxXSBeIGJbMV0sXG4gICAgYVsyXSBeIGJbMl0sXG4gICAgYVszXSBeIGJbM11cbiAgXVxufVxuIl19
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/aes.js":[function(require,module,exports){
(function (Buffer){
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec

// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function scrub_vec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
  return false
}

function Global () {
  this.SBOX = []
  this.INV_SBOX = []
  this.SUB_MIX = [[], [], [], []]
  this.INV_SUB_MIX = [[], [], [], []]
  this.init()
  this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
}

Global.prototype.init = function () {
  var d, i, sx, t, x, x2, x4, x8, xi, _i
  d = (function () {
    var _i, _results
    _results = []
    for (i = _i = 0; _i < 256; i = ++_i) {
      if (i < 128) {
        _results.push(i << 1)
      } else {
        _results.push((i << 1) ^ 0x11b)
      }
    }
    return _results
  })()
  x = 0
  xi = 0
  for (i = _i = 0; _i < 256; i = ++_i) {
    sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    this.SBOX[x] = sx
    this.INV_SBOX[sx] = x
    x2 = d[x]
    x4 = d[x2]
    x8 = d[x4]
    t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    this.SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    this.SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    this.SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    this.SUB_MIX[3][x] = t
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    this.INV_SUB_MIX[3][sx] = t
    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }
  return true
}

var G = new Global()

AES.blockSize = 4 * 4

AES.prototype.blockSize = AES.blockSize

AES.keySize = 256 / 8

AES.prototype.keySize = AES.keySize

function bufferToArray (buf) {
  var len = buf.length / 4
  var out = new Array(len)
  var i = -1
  while (++i < len) {
    out[i] = buf.readUInt32BE(i * 4)
  }
  return out
}
function AES (key) {
  this._key = bufferToArray(key)
  this._doReset()
}

AES.prototype._doReset = function () {
  var invKsRow, keySize, keyWords, ksRow, ksRows, t
  keyWords = this._key
  keySize = keyWords.length
  this._nRounds = keySize + 6
  ksRows = (this._nRounds + 1) * 4
  this._keySchedule = []
  for (ksRow = 0; ksRow < ksRows; ksRow++) {
    this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t)
  }
  this._invKeySchedule = []
  for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {
    ksRow = ksRows - invKsRow
    t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)]
    this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]]
  }
  return true
}

AES.prototype.encryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var temp = [M[3], M[1]]
  M[1] = temp[0]
  M[3] = temp[1]
  var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrub_vec(this._keySchedule)
  scrub_vec(this._invKeySchedule)
  scrub_vec(this._key)
}

AES.prototype._doCryptBlock = function (M, keySchedule, SUB_MIX, SBOX) {
  var ksRow, s0, s1, s2, s3, t0, t1, t2, t3

  s0 = M[0] ^ keySchedule[0]
  s1 = M[1] ^ keySchedule[1]
  s2 = M[2] ^ keySchedule[2]
  s3 = M[3] ^ keySchedule[3]
  ksRow = 4
  for (var round = 1; round < this._nRounds; round++) {
    t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }
  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  return [
    fixup_uint32(t0),
    fixup_uint32(t1),
    fixup_uint32(t2),
    fixup_uint32(t3)
  ]
}

exports.AES = AES

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/asn1.js":[function(require,module,exports){
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.

var asn1 = require('asn1.js')

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})
var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey
var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})

},{"asn1.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js":[function(require,module,exports){
var asn1 = exports;

asn1.bignum = require('bn.js');

asn1.define = require('./asn1/api').define;
asn1.base = require('./asn1/base');
asn1.constants = require('./asn1/constants');
asn1.decoders = require('./asn1/decoders');
asn1.encoders = require('./asn1/encoders');

},{"./asn1/api":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/api.js","./asn1/base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/index.js","./asn1/constants":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/constants/index.js","./asn1/decoders":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/index.js","./asn1/encoders":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/index.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/bn.js/lib/bn.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/index.js":[function(require,module,exports){
var encoders = exports;

encoders.der = require('./der');
encoders.pem = require('./pem');

},{"./der":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/der.js","./pem":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/pem.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/pem.js":[function(require,module,exports){
var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var asn1 = require('../../asn1');
var DEREncoder = require('./der');

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  var buf = DEREncoder.prototype.encode.call(this, data);

  var p = buf.toString('base64');
  var out = [ '-----BEGIN ' + options.label + '-----' ];
  for (var i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};

},{"../../asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js","./der":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/der.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/der.js":[function(require,module,exports){
var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var asn1 = require('../../asn1');
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                              primitive,
                                                              cls,
                                                              content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  var lenOctets = 1;
  for (var i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'octstr')
    return this._createEncoderBuffer(str);
  else if (tag === 'bitstr')
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  else if (tag === 'ia5str' || tag === 'utf8str')
    return this._createEncoderBuffer(str);
  return this.reporter.error('Encoding of string type: ' + tag +
                             ' unsupported');
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s\.]+/g);
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  var size = 0;
  for (var i = 0; i < id.length; i++) {
    var ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;
  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    var numArray = num.toArray();
    if (num.sign === false && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0)
      size++;

    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  var size = 1;
  for (var i = num; i >= 0x100; i >>= 8)
    size++;

  var out = new Array(size);
  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null)
    return false;

  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  var res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}

},{"../../asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/index.js":[function(require,module,exports){
var decoders = exports;

decoders.der = require('./der');
decoders.pem = require('./pem');

},{"./der":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/der.js","./pem":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/pem.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/pem.js":[function(require,module,exports){
var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var asn1 = require('../../asn1');
var DERDecoder = require('./der');

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  var lines = data.toString().split(/[\r\n]+/g);

  var label = options.label.toUpperCase();

  var re = /^-----(BEGIN|END) ([^-]+)-----$/;
  var start = -1;
  var end = -1;
  for (var i = 0; i < lines.length; i++) {
    var match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  var base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9\+\/=]+/gi, '');

  var input = new Buffer(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};

},{"../../asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js","./der":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/der.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/der.js":[function(require,module,exports){
var inherits = require('inherits');

var asn1 = require('../../asn1');
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer))
    data = new base.DecoderBuffer(data, options);

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer,
                                'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  var len = derDecodeLen(buffer,
                         decodedTag.primitive,
                         'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  var state = buffer.save();
  var res = this._skipUntilEnd(
      buffer,
      'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    var res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len)
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder) {
  var result = [];
  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    var res = decoder.decode(buffer, 'der');
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;

    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'ia5str' || tag === 'utf8str') {
    return buffer.raw().toString();
  } else {
    return this.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var identifiers = [];
  var ident = 0;
  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  var first = (identifiers[0] / 40) | 0;
  var second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values)
    result = values[result.join(' ')];

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();
  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return this.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  var res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  var tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  var num = len & 0x7f;
  if (num >= 4)
    return buf.error('length octect is too long');

  len = 0;
  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}

},{"../../asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/constants/index.js":[function(require,module,exports){
var constants = exports;

// Helper
constants._reverse = function reverse(map) {
  var res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    var value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = require('./der');

},{"./der":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/constants/der.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/constants/der.js":[function(require,module,exports){
var constants = require('../constants');

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);

},{"../constants":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/constants/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/index.js":[function(require,module,exports){
var base = exports;

base.Reporter = require('./reporter').Reporter;
base.DecoderBuffer = require('./buffer').DecoderBuffer;
base.EncoderBuffer = require('./buffer').EncoderBuffer;
base.Node = require('./node');

},{"./buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/buffer.js","./node":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/node.js","./reporter":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/reporter.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/reporter.js":[function(require,module,exports){
var inherits = require('inherits');

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  var state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  var state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;

  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;

  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;

  var inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
};
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  Error.captureStackTrace(this, ReporterError);

  return this;
};

},{"inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/node.js":[function(require,module,exports){
var Reporter = require('../base').Reporter;
var EncoderBuffer = require('../base').EncoderBuffer;
var assert = require('minimalistic-assert');

// Supported tags
var tags = [
  'seq', 'seqof', 'set', 'setof', 'octstr', 'bitstr', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'ia5str', 'utf8str'
];

// Public methods list
var methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any'
].concat(tags);

// Overrided methods list
var overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;

  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

var stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit'
];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState;

  // Filter children and args
  var children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      var res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input));

  var result = state['default'];
  var present = true;

  var prevKey;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    var tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      var save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input);
        else
          this._decodeChoice(input);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  var prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      if (state.any)
        var save = input.save();
      var body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    // Select proper method for tag
    if (state.any)
      result = result;
    else if (state.choice === null)
      result = this._decodeGeneric(state.tag, input);
    else
      result = this._decodeChoice(input);

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      var fail = state.children.some(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input);
      });
      if (fail)
        return err;
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input) {
  var state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0]);
  else if (tag === 'octstr' || tag === 'bitstr')
    return this._decodeStr(input, tag);
  else if (tag === 'ia5str' || tag === 'utf8str')
    return this._decodeStr(input, tag);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1]);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag);
  else if (tag === 'null_')
    return this._decodeNull(input);
  else if (tag === 'bool')
    return this._decodeBool(input);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0]);
  else if (state.use !== null)
    return this._getUse(state.use, input._reporterState.obj)._decode(input);
  else
    return input.error('unknown tag: ' + tag);

  return null;
};

Node.prototype._getUse = function _getUse(entity, obj) {

  var state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input) {
  var state = this._baseState;
  var result = null;
  var match = false;

  Object.keys(state.choice).some(function(key) {
    var save = input.save();
    var node = state.choice[key];
    try {
      var value = node._decode(input);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  var result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  var result = null;
  var present = true;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default']
    else
      return;
  }

  // For error reporting
  var prevKey;

  // Encode children first
  var content = null;
  var primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });

    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        var state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  var result;
  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be ommited only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;

  var node = state.choice[data.type];
  if (!node) {
    assert(
        false,
        data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;

  if (tag === 'octstr' || tag === 'bitstr' || tag === 'ia5str')
    return this._encodeStr(data, tag);
  else if (tag === 'utf8str')
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else
    throw new Error('Unsupported tag: ' + tag);
};

},{"../base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/index.js","minimalistic-assert":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/node_modules/minimalistic-assert/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/node_modules/minimalistic-assert/index.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/node_modules/minimalistic-assert/index.js"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/buffer.js":[function(require,module,exports){
var inherits = require('inherits');
var Reporter = require('../base').Reporter;
var Buffer = require('buffer').Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
}

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  var res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
}

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
}

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!(item instanceof EncoderBuffer))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = new Buffer(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

},{"../base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/index.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/api.js":[function(require,module,exports){
var asn1 = require('../asn1');
var inherits = require('inherits');

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
};

Entity.prototype._createNamed = function createNamed(base) {
  var named;
  try {
    named = require('vm').runInThisContext(
      '(function ' + this.name + '(entity) {\n' +
      '  this._initNamed(entity);\n' +
      '})'
    );
  } catch (e) {
    named = function (entity) {
      this._initNamed(entity);
    };
  }
  inherits(named, base);
  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

},{"../asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js","vm":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/vm-browserify/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/vm-browserify/index.js":[function(require,module,exports){
var indexOf = require('indexof');

var Object_keys = function (obj) {
    if (Object.keys) return Object.keys(obj)
    else {
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    }
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = (function() {
    try {
        Object.defineProperty({}, '_', {});
        return function(obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            })
        };
    } catch(e) {
        return function(obj, name, value) {
            obj[name] = value;
        };
    }
}());

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript (code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }
    
    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';
    
    document.body.appendChild(iframe);
    
    var win = iframe.contentWindow;
    var wEval = win.eval, wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }
    
    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });
    
    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);
    
    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });
    
    document.body.removeChild(iframe);
    
    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    forEach(Object_keys(ctx), function (key) {
        context[key] = ctx[key];
    });

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if(typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};

},{"indexof":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/vm-browserify/node_modules/indexof/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/vm-browserify/node_modules/indexof/index.js":[function(require,module,exports){

var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/aesid.json":[function(require,module,exports){
module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
}
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic.js":[function(require,module,exports){
'use strict';

var elliptic = exports;

elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.hmacDRBG = require('./elliptic/hmac-drbg');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');

},{"../package.json":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/package.json","./elliptic/curve":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/index.js","./elliptic/curves":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curves.js","./elliptic/ec":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/ec/index.js","./elliptic/hmac-drbg":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/hmac-drbg.js","./elliptic/utils":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/utils.js","brorand":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/brorand/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/package.json":[function(require,module,exports){
module.exports={
  "name": "elliptic",
  "version": "3.1.0",
  "description": "EC cryptography",
  "main": "lib/elliptic.js",
  "scripts": {
    "test": "make lint && mocha --reporter=spec test/*-test.js"
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/indutny/elliptic.git"
  },
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "author": {
    "name": "Fedor Indutny",
    "email": "fedor@indutny.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "homepage": "https://github.com/indutny/elliptic",
  "devDependencies": {
    "browserify": "^3.44.2",
    "jscs": "^1.11.3",
    "jshint": "^2.6.0",
    "mocha": "^2.1.0",
    "uglify-js": "^2.4.13"
  },
  "dependencies": {
    "bn.js": "^2.0.3",
    "brorand": "^1.0.1",
    "hash.js": "^1.0.0",
    "inherits": "^2.0.1"
  },
  "gitHead": "d86cd2a8178f7e7cecbd6dd92eea084e2ab44c13",
  "_id": "elliptic@3.1.0",
  "_shasum": "c21682ef762769b56a74201609105da11d5f60cc",
  "_from": "elliptic@>=3.0.0 <4.0.0",
  "_npmVersion": "2.11.0",
  "_nodeVersion": "2.2.1",
  "_npmUser": {
    "name": "indutny",
    "email": "fedor@indutny.com"
  },
  "maintainers": [
    {
      "name": "indutny",
      "email": "fedor@indutny.com"
    }
  ],
  "dist": {
    "shasum": "c21682ef762769b56a74201609105da11d5f60cc",
    "tarball": "http://registry.npmjs.org/elliptic/-/elliptic-3.1.0.tgz"
  },
  "directories": {},
  "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-3.1.0.tgz",
  "readme": "ERROR: No README data found!"
}

},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/brorand/index.js":[function(require,module,exports){
var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

if (typeof window === 'object') {
  if (window.crypto && window.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      window.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (window.msCrypto && window.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      window.msCrypto.getRandomValues(arr);
      return arr;
    };
  } else {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker
  try {
    var crypto = require('cry' + 'pto');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
    // Emulate crypto API using randy
    Rand.prototype._rand = function _rand(n) {
      var res = new Uint8Array(n);
      for (var i = 0; i < res.length; i++)
        res[i] = this.rand.getByte();
      return res;
    };
  }
}

},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/utils.js":[function(require,module,exports){
'use strict';

var utils = exports;

utils.assert = function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
};

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (!enc) {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  } else if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

// Represent num in a w-NAF form
function getNAF(num, w) {
  var naf = [];
  var ws = 1 << (w + 1);
  var k = num.clone();
  while (k.cmpn(1) >= 0) {
    var z;
    if (k.isOdd()) {
      var mod = k.andln(ws - 1);
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }
    naf.push(z);

    // Optimization, shift by word if possible
    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
    for (var i = 1; i < shift; i++)
      naf.push(0);
    k.ishrn(shift);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.ishrn(1);
    k2.ishrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/hmac-drbg.js":[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var elliptic = require('../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this.reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc);
  var nonce = utils.toArray(options.nonce, options.nonceEnc);
  var pers = utils.toArray(options.pers, options.persEnc);
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this.reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toBuffer(entropy, entropyEnc);
  add = utils.toBuffer(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this.reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this.reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc);
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this.reseed++;
  return utils.encode(res, enc);
};

},{"../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic.js","hash.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/ec/index.js":[function(require,module,exports){
'use strict';

var bn = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = elliptic.curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof elliptic.curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.shrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new elliptic.hmacDRBG({
    hash: this.hash,
    pers: options.pers,
    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new bn(2));
  do {
    var priv = new bn(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.shrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new bn(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray();
  for (var i = bkey.length; i < 21; i++)
    bkey.unshift(0);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray();
  for (var i = nonce.length; i < bytes; i++)
    nonce.unshift(0);

  // Instantiate Hmac_DRBG
  var drbg = new elliptic.hmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new bn(1));
  do {
    var k = new bn(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.mod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg)).mod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0)
      s = this.n.sub(s);

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  } while (true);
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new bn(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).mod(this.n);
  var u2 = sinv.mul(r).mod(this.n);

  var p = this.g.mulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  return p.getX().mod(this.n).cmp(r) === 0;
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new bn(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.mod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  r = this.curve.pointFromX(isYOdd, r);
  var eNeg = e.neg().mod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  var rInv = signature.r.invm(n);
  return r.mul(s).add(this.g.mul(eNeg)).mul(rInv);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime = this.recoverPubKey(e, signature, i);

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"../../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic.js","./key":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/ec/key.js","./signature":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/ec/signature.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/bn.js/lib/bn.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/ec/signature.js":[function(require,module,exports){
'use strict';

var bn = require('bn.js');

var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new bn(options.r, 16);
  this.s = new bn(options.s, 16);
  if (options.recoveryParam !== null)
    this.recoveryParam = options.recoveryParam;
  else
    this.recoveryParam = null;
}
module.exports = Signature;

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  if (data.length < 6 || data[0] !== 0x30 || data[2] !== 0x02)
    return false;
  var total = data[1];
  if (1 + total > data.length)
    return false;
  var rlen = data[3];
  // Short length notation
  if (rlen >= 0x80)
    return false;
  if (4 + rlen + 2 >= data.length)
    return false;
  if (data[4 + rlen] !== 0x02)
    return false;
  var slen = data[5 + rlen];
  // Short length notation
  if (slen >= 0x80)
    return false;
  if (4 + rlen + 2 + slen > data.length)
    return false;

  this.r = new bn(data.slice(4, 4 + rlen));
  this.s = new bn(data.slice(4 + rlen + 2, 4 + rlen + 2 + slen));
  this.recoveryParam = null;

  return true;
};

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  var total = r.length + s.length + 4;
  var res = [ 0x30, total, 0x02, r.length ];
  res = res.concat(r, [ 0x02, s.length ], s);
  return utils.encode(res, enc);
};

},{"../../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/bn.js/lib/bn.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/ec/key.js":[function(require,module,exports){
'use strict';

var bn = require('bn.js');

var elliptic = require('../../elliptic');
var utils = elliptic.utils;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!enc)
    return this.pub;

  var len = this.ec.curve.p.byteLength();
  var x = this.pub.getX().toArray();

  for (var i = x.length; i < len; i++)
    x.unshift(0);

  var res;
  if (this.ec.curve.type !== 'mont') {
    if (compact) {
      res = [ this.pub.getY().isEven() ? 0x02 : 0x03 ].concat(x);
    } else {
      var y = this.pub.getY().toArray();
      for (var i = y.length; i < len; i++)
        y.unshift(0);
      var res = [ 0x04 ].concat(x, y);
    }
  } else {
    res = x;
  }

  return utils.encode(res, enc);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new bn(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.mod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }

  key = utils.toArray(key, enc);
  if (this.ec.curve.type !== 'mont')
    return this._importPublicShort(key);
  else
    return this._importPublicMont(key);
};

KeyPair.prototype._importPublicShort = function _importPublicShort(key) {
  var len = this.ec.curve.p.byteLength();
  if (key[0] === 0x04 && key.length - 1 === 2 * len) {
    this.pub = this.ec.curve.point(
      key.slice(1, 1 + len),
      key.slice(1 + len, 1 + 2 * len));
  } else if ((key[0] === 0x02 || key[0] === 0x03) && key.length - 1 === len) {
    this.pub = this.ec.curve.pointFromX(key[0] === 0x03, key.slice(1, 1 + len));
  }
};

KeyPair.prototype._importPublicMont = function _importPublicMont(key) {
  this.pub = this.ec.curve.point(key, 1);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg) {
  return this.ec.sign(msg, this);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"../../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/bn.js/lib/bn.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curves.js":[function(require,module,exports){
'use strict';

var curves = exports;

var hash = require('hash.js');
var elliptic = require('../elliptic');

var assert = elliptic.utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new elliptic.curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new elliptic.curve.edwards(options);
  else
    this.curve = new elliptic.curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ]
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ]
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ]
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '0',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

var pre;
try {
  pre = require('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre
  ]
});

},{"../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic.js","./precomputed/secp256k1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js","hash.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash.js":[function(require,module,exports){
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/common":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/common.js","./hash/hmac":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/hmac.js","./hash/ripemd":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/ripemd.js","./hash/sha":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/sha.js","./hash/utils":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/utils.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/utils.js":[function(require,module,exports){
var utils = exports;
var inherits = require('inherits');

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (var i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
utils.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
utils.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
utils.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
utils.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
utils.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
utils.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
utils.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
utils.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
utils.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
utils.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
utils.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
utils.sum32_5 = sum32_5;

function assert(cond, msg) {
  if (!cond)
    throw new Error(msg || 'Assertion failed');
}
utils.assert = assert;

utils.inherits = inherits;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
};
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
};
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
};
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
};
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
};
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
};
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
};
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
};
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
};
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
};
exports.shr64_lo = shr64_lo;

},{"inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/sha.js":[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

var rotr32 = utils.rotr32;
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;
var BlockHash = hash.common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [ 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
             0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
exports.sha256 = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [ 0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
             0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
exports.sha224 = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [ 0x6a09e667, 0xf3bcc908,
             0xbb67ae85, 0x84caa73b,
             0x3c6ef372, 0xfe94f82b,
             0xa54ff53a, 0x5f1d36f1,
             0x510e527f, 0xade682d1,
             0x9b05688c, 0x2b3e6c1f,
             0x1f83d9ab, 0xfb41bd6b,
             0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
exports.sha512 = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(c0_hi, c0_lo,
                      c1_hi, c1_lo,
                      c2_hi, c2_lo,
                      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(c0_hi, c0_lo,
                          c1_hi, c1_lo,
                          c2_hi, c2_lo,
                          c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(c0_hi, c0_lo,
                           c1_hi, c1_lo,
                           c2_hi, c2_lo,
                           c3_hi, c3_lo,
                           c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(c0_hi, c0_lo,
                           c1_hi, c1_lo,
                           c2_hi, c2_lo,
                           c3_hi, c3_lo,
                           c4_hi, c4_lo);

    var c0_hi = s0_512_hi(ah, al);
    var c0_lo = s0_512_lo(ah, al);
    var c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    var c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [ 0xcbbb9d5d, 0xc1059ed8,
             0x629a292a, 0x367cd507,
             0x9159015a, 0x3070dd17,
             0x152fecd8, 0xf70e5939,
             0x67332667, 0xffc00b31,
             0x8eb44a87, 0x68581511,
             0xdb0c2e0d, 0x64f98fa7,
             0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
exports.sha384 = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe,
             0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
exports.sha1 = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (var i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}

function p32(x, y, z) {
  return x ^ y ^ z;
}

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}

function ch64_hi(xh, xl, yh, yl, zh, zl) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh, zl) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/ripemd.js":[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = hash.common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"../hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/hmac.js":[function(require,module,exports){
var hmac = exports;

var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (var i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (var i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"../hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/common.js":[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"../hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js":[function(require,module,exports){
module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
      ]
    ]
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
      ]
    ]
  }
};

},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/index.js":[function(require,module,exports){
'use strict';

var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/base.js","./edwards":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/edwards.js","./mont":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/mont.js","./short":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/short.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/short.js":[function(require,module,exports){
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var bn = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var assert = elliptic.utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new bn(conf.a, 16).toRed(this.red);
  this.b = new bn(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new bn(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new bn(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new bn(vec.a, 16),
        b: new bn(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : bn.mont(num);
  var tinv = new bn(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.shrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new bn(1);
  var y1 = new bn(0);
  var x2 = new bn(0);
  var y2 = new bn(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.sign) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.sign) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(odd, x) {
  x = new bn(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.sign) {
      split.k1.sign = !split.k1.sign;
      p = p.neg(true);
    }
    if (split.k2.sign) {
      split.k2.sign = !split.k2.sign;
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new bn(x, 16);
    this.y = new bn(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new bn(k, 16);

  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new bn(0);
  } else {
    this.x = new bn(x, 16);
    this.y = new bn(y, 16);
    this.z = new bn(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new bn(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic.js","../curve":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/index.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/bn.js/lib/bn.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/mont.js":[function(require,module,exports){
'use strict';

var curve = require('../curve');
var bn = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new bn(conf.a, 16).toRed(this.red);
  this.b = new bn(conf.b, 16).toRed(this.red);
  this.i4 = new bn(4).toRed(this.red).redInvm();
  this.two = new bn(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new bn(x, 16);
    this.z = new bn(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.ishrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../curve":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/index.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/bn.js/lib/bn.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/edwards.js":[function(require,module,exports){
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var bn = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var assert = elliptic.utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new bn(conf.a, 16).mod(this.red.m).toRed(this.red);
  this.c = new bn(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new bn(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(odd, x) {
  x = new bn(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y = rhs.redMul(lhs.redInvm()).redSqrt();
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y, curve.one);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new bn(x, 16);
    this.y = new bn(y, 16);
    this.z = z ? new bn(z, 16) : this.curve.one;
    this.t = t && new bn(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
         this.y.cmp(this.z) === 0;
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic.js","../curve":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/index.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/bn.js/lib/bn.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/base.js":[function(require,module,exports){
'use strict';

var bn = require('bn.js');
var elliptic = require('../../elliptic');

var getNAF = elliptic.utils.getNAF;
var getJSF = elliptic.utils.getJSF;
var assert = elliptic.utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new bn(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);

  // Useful for many curves
  this.zero = new bn(0).toRed(this.red);
  this.one = new bn(1).toRed(this.red);
  this.two = new bn(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new bn(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a]);
      naf[b] = getNAF(coeffs[b], wndWidth[b]);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;
  return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"../../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/bn.js/lib/bn.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/browserify-rsa/index.js":[function(require,module,exports){
(function (Buffer){
var bn = require('bn.js');
var randomBytes = require('randombytes');
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).mod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).mod(p);
  h.imul(q);
  m2.iadd(h);
  var out = new Buffer(m2.imul(blinds.unblinder).mod(priv.modulus).toArray());
  if (out.length < len) {
    var prefix = new Buffer(len - out.length);
    prefix.fill(0);
    out = Buffer.concat([prefix, out], len);
  }
  return out;
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.mod(priv.prime1) || !r.mod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}
}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXJzYS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBibiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgcmFuZG9tQnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpO1xubW9kdWxlLmV4cG9ydHMgPSBjcnQ7XG5mdW5jdGlvbiBibGluZChwcml2KSB7XG4gIHZhciByID0gZ2V0cihwcml2KTtcbiAgdmFyIGJsaW5kZXIgPSByLnRvUmVkKGJuLm1vbnQocHJpdi5tb2R1bHVzKSlcbiAgLnJlZFBvdyhuZXcgYm4ocHJpdi5wdWJsaWNFeHBvbmVudCkpLmZyb21SZWQoKTtcbiAgcmV0dXJuIHtcbiAgICBibGluZGVyOiBibGluZGVyLFxuICAgIHVuYmxpbmRlcjpyLmludm0ocHJpdi5tb2R1bHVzKVxuICB9O1xufVxuZnVuY3Rpb24gY3J0KG1zZywgcHJpdikge1xuICB2YXIgYmxpbmRzID0gYmxpbmQocHJpdik7XG4gIHZhciBsZW4gPSBwcml2Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICB2YXIgbW9kID0gYm4ubW9udChwcml2Lm1vZHVsdXMpO1xuICB2YXIgYmxpbmRlZCA9IG5ldyBibihtc2cpLm11bChibGluZHMuYmxpbmRlcikubW9kKHByaXYubW9kdWx1cyk7XG4gIHZhciBjMSA9IGJsaW5kZWQudG9SZWQoYm4ubW9udChwcml2LnByaW1lMSkpO1xuICB2YXIgYzIgPSBibGluZGVkLnRvUmVkKGJuLm1vbnQocHJpdi5wcmltZTIpKTtcbiAgdmFyIHFpbnYgPSBwcml2LmNvZWZmaWNpZW50O1xuICB2YXIgcCA9IHByaXYucHJpbWUxO1xuICB2YXIgcSA9IHByaXYucHJpbWUyO1xuICB2YXIgbTEgPSBjMS5yZWRQb3cocHJpdi5leHBvbmVudDEpO1xuICB2YXIgbTIgPSBjMi5yZWRQb3cocHJpdi5leHBvbmVudDIpO1xuICBtMSA9IG0xLmZyb21SZWQoKTtcbiAgbTIgPSBtMi5mcm9tUmVkKCk7XG4gIHZhciBoID0gbTEuaXN1YihtMikuaW11bChxaW52KS5tb2QocCk7XG4gIGguaW11bChxKTtcbiAgbTIuaWFkZChoKTtcbiAgdmFyIG91dCA9IG5ldyBCdWZmZXIobTIuaW11bChibGluZHMudW5ibGluZGVyKS5tb2QocHJpdi5tb2R1bHVzKS50b0FycmF5KCkpO1xuICBpZiAob3V0Lmxlbmd0aCA8IGxlbikge1xuICAgIHZhciBwcmVmaXggPSBuZXcgQnVmZmVyKGxlbiAtIG91dC5sZW5ndGgpO1xuICAgIHByZWZpeC5maWxsKDApO1xuICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoW3ByZWZpeCwgb3V0XSwgbGVuKTtcbiAgfVxuICByZXR1cm4gb3V0O1xufVxuY3J0LmdldHIgPSBnZXRyO1xuZnVuY3Rpb24gZ2V0cihwcml2KSB7XG4gIHZhciBsZW4gPSBwcml2Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICB2YXIgciA9IG5ldyBibihyYW5kb21CeXRlcyhsZW4pKTtcbiAgd2hpbGUgKHIuY21wKHByaXYubW9kdWx1cykgPj0gIDAgfHwgIXIubW9kKHByaXYucHJpbWUxKSB8fCAhci5tb2QocHJpdi5wcmltZTIpKSB7XG4gICAgciA9IG5ldyBibihyYW5kb21CeXRlcyhsZW4pKTtcbiAgfVxuICByZXR1cm4gcjtcbn0iXX0=
},{"bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/bn.js/lib/bn.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","randombytes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/randombytes/browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/randombytes/browser.js":[function(require,module,exports){
(function (process,global,Buffer){
'use strict';

var crypto = global.crypto || global.msCrypto
if(crypto && crypto.getRandomValues) {
  module.exports = randomBytes;
} else {
  module.exports = oldBrowser;
}
function randomBytes(size, cb) {
  var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
    /* This will not work in older browsers.
     * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
     */

  crypto.getRandomValues(bytes);
  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes);
    });
  }
  return bytes;
}
function oldBrowser() {
  throw new Error(
      'secure random number generation not supported by this browser\n'+
      'use chrome, FireFox or Internet Explorer 11'
    )
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcmFuZG9tYnl0ZXMvYnJvd3Nlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3J5cHRvID0gZ2xvYmFsLmNyeXB0byB8fCBnbG9iYWwubXNDcnlwdG9cbmlmKGNyeXB0byAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmFuZG9tQnl0ZXM7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IG9sZEJyb3dzZXI7XG59XG5mdW5jdGlvbiByYW5kb21CeXRlcyhzaXplLCBjYikge1xuICB2YXIgYnl0ZXMgPSBuZXcgQnVmZmVyKHNpemUpOyAvL2luIGJyb3dzZXJpZnksIHRoaXMgaXMgYW4gZXh0ZW5kZWQgVWludDhBcnJheVxuICAgIC8qIFRoaXMgd2lsbCBub3Qgd29yayBpbiBvbGRlciBicm93c2Vycy5cbiAgICAgKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL3dpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzXG4gICAgICovXG5cbiAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhieXRlcyk7XG4gIGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICBjYihudWxsLCBieXRlcyk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGJ5dGVzO1xufVxuZnVuY3Rpb24gb2xkQnJvd3NlcigpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ3NlY3VyZSByYW5kb20gbnVtYmVyIGdlbmVyYXRpb24gbm90IHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXJcXG4nK1xuICAgICAgJ3VzZSBjaHJvbWUsIEZpcmVGb3ggb3IgSW50ZXJuZXQgRXhwbG9yZXIgMTEnXG4gICAgKVxufVxuIl19
},{"_process":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/bn.js/lib/bn.js":[function(require,module,exports){
(function (module, exports) {

'use strict';

// Utils

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

// Could use `inherits` module, but don't want to move from single file
// architecture yet.
function inherits(ctor, superCtor) {
  ctor.super_ = superCtor;
  var TempCtor = function () {};
  TempCtor.prototype = superCtor.prototype;
  ctor.prototype = new TempCtor();
  ctor.prototype.constructor = ctor;
}

// BN

function BN(number, base, endian) {
  // May be `new BN(bn)` ?
  if (number !== null &&
      typeof number === 'object' &&
      Array.isArray(number.words)) {
    return number;
  }

  this.sign = false;
  this.words = null;
  this.length = 0;

  // Reduction context
  this.red = null;

  if (base === 'le' || base === 'be') {
    endian = base;
    base = 10;
  }

  if (number !== null)
    this._init(number || 0, base || 10, endian || 'be');
}
if (typeof module === 'object')
  module.exports = BN;
else
  exports.BN = BN;

BN.BN = BN;
BN.wordSize = 26;

BN.prototype._init = function init(number, base, endian) {
  if (typeof number === 'number') {
    return this._initNumber(number, base, endian);
  } else if (typeof number === 'object') {
    return this._initArray(number, base, endian);
  }
  if (base === 'hex')
    base = 16;
  assert(base === (base | 0) && base >= 2 && base <= 36);

  number = number.toString().replace(/\s+/g, '');
  var start = 0;
  if (number[0] === '-')
    start++;

  if (base === 16)
    this._parseHex(number, start);
  else
    this._parseBase(number, base, start);

  if (number[0] === '-')
    this.sign = true;

  this.strip();

  if (endian !== 'le')
    return;

  this._initArray(this.toArray(), base, endian);
};

BN.prototype._initNumber = function _initNumber(number, base, endian) {
  if (number < 0) {
    this.sign = true;
    number = -number;
  }
  if (number < 0x4000000) {
    this.words = [ number & 0x3ffffff ];
    this.length = 1;
  } else if (number < 0x10000000000000) {
    this.words = [
      number & 0x3ffffff,
      (number / 0x4000000) & 0x3ffffff
    ];
    this.length = 2;
  } else {
    assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
    this.words = [
      number & 0x3ffffff,
      (number / 0x4000000) & 0x3ffffff,
      1
    ];
    this.length = 3;
  }

  if (endian !== 'le')
    return;

  // Reverse the bytes
  this._initArray(this.toArray(), base, endian);
};

BN.prototype._initArray = function _initArray(number, base, endian) {
  // Perhaps a Uint8Array
  assert(typeof number.length === 'number');
  if (number.length <= 0) {
    this.words = [ 0 ];
    this.length = 1;
    return this;
  }

  this.length = Math.ceil(number.length / 3);
  this.words = new Array(this.length);
  for (var i = 0; i < this.length; i++)
    this.words[i] = 0;

  var off = 0;
  if (endian === 'be') {
    for (var i = number.length - 1, j = 0; i >= 0; i -= 3) {
      var w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
  } else if (endian === 'le') {
    for (var i = 0, j = 0; i < number.length; i += 3) {
      var w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
  }
  return this.strip();
};

function parseHex(str, start, end) {
  var r = 0;
  var len = Math.min(str.length, end);
  for (var i = start; i < len; i++) {
    var c = str.charCodeAt(i) - 48;

    r <<= 4;

    // 'a' - 'f'
    if (c >= 49 && c <= 54)
      r |= c - 49 + 0xa;

    // 'A' - 'F'
    else if (c >= 17 && c <= 22)
      r |= c - 17 + 0xa;

    // '0' - '9'
    else
      r |= c & 0xf;
  }
  return r;
}

BN.prototype._parseHex = function _parseHex(number, start) {
  // Create possibly bigger array to ensure that it fits the number
  this.length = Math.ceil((number.length - start) / 6);
  this.words = new Array(this.length);
  for (var i = 0; i < this.length; i++)
    this.words[i] = 0;

  // Scan 24-bit chunks and add them to the number
  var off = 0;
  for (var i = number.length - 6, j = 0; i >= start; i -= 6) {
    var w = parseHex(number, i, i + 6);
    this.words[j] |= (w << off) & 0x3ffffff;
    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    off += 24;
    if (off >= 26) {
      off -= 26;
      j++;
    }
  }
  if (i + 6 !== start) {
    var w = parseHex(number, start, i + 6);
    this.words[j] |= (w << off) & 0x3ffffff;
    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
  }
  this.strip();
};

function parseBase(str, start, end, mul) {
  var r = 0;
  var len = Math.min(str.length, end);
  for (var i = start; i < len; i++) {
    var c = str.charCodeAt(i) - 48;

    r *= mul;

    // 'a'
    if (c >= 49)
      r += c - 49 + 0xa;

    // 'A'
    else if (c >= 17)
      r += c - 17 + 0xa;

    // '0' - '9'
    else
      r += c;
  }
  return r;
}

BN.prototype._parseBase = function _parseBase(number, base, start) {
  // Initialize as zero
  this.words = [ 0 ];
  this.length = 1;

  // Find length of limb in base
  for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)
    limbLen++;
  limbLen--;
  limbPow = (limbPow / base) | 0;

  var total = number.length - start;
  var mod = total % limbLen;
  var end = Math.min(total, total - mod) + start;

  var word = 0;
  for (var i = start; i < end; i += limbLen) {
    word = parseBase(number, i, i + limbLen, base);

    this.imuln(limbPow);
    if (this.words[0] + word < 0x4000000)
      this.words[0] += word;
    else
      this._iaddn(word);
  }

  if (mod !== 0) {
    var pow = 1;
    var word = parseBase(number, i, number.length, base);

    for (var i = 0; i < mod; i++)
      pow *= base;
    this.imuln(pow);
    if (this.words[0] + word < 0x4000000)
      this.words[0] += word;
    else
      this._iaddn(word);
  }
};

BN.prototype.copy = function copy(dest) {
  dest.words = new Array(this.length);
  for (var i = 0; i < this.length; i++)
    dest.words[i] = this.words[i];
  dest.length = this.length;
  dest.sign = this.sign;
  dest.red = this.red;
};

BN.prototype.clone = function clone() {
  var r = new BN(null);
  this.copy(r);
  return r;
};

// Remove leading `0` from `this`
BN.prototype.strip = function strip() {
  while (this.length > 1 && this.words[this.length - 1] === 0)
    this.length--;
  return this._normSign();
};

BN.prototype._normSign = function _normSign() {
  // -0 = 0
  if (this.length === 1 && this.words[0] === 0)
    this.sign = false;
  return this;
};

BN.prototype.inspect = function inspect() {
  return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
};

/*

var zeros = [];
var groupSizes = [];
var groupBases = [];

var s = '';
var i = -1;
while (++i < BN.wordSize) {
  zeros[i] = s;
  s += '0';
}
groupSizes[0] = 0;
groupSizes[1] = 0;
groupBases[0] = 0;
groupBases[1] = 0;
var base = 2 - 1;
while (++base < 36 + 1) {
  var groupSize = 0;
  var groupBase = 1;
  while (groupBase < (1 << BN.wordSize) / base) {
    groupBase *= base;
    groupSize += 1;
  }
  groupSizes[base] = groupSize;
  groupBases[base] = groupBase;
}

*/

var zeros = [
  '',
  '0',
  '00',
  '000',
  '0000',
  '00000',
  '000000',
  '0000000',
  '00000000',
  '000000000',
  '0000000000',
  '00000000000',
  '000000000000',
  '0000000000000',
  '00000000000000',
  '000000000000000',
  '0000000000000000',
  '00000000000000000',
  '000000000000000000',
  '0000000000000000000',
  '00000000000000000000',
  '000000000000000000000',
  '0000000000000000000000',
  '00000000000000000000000',
  '000000000000000000000000',
  '0000000000000000000000000'
];

var groupSizes = [
  0, 0,
  25, 16, 12, 11, 10, 9, 8,
  8, 7, 7, 7, 7, 6, 6,
  6, 6, 6, 6, 6, 5, 5,
  5, 5, 5, 5, 5, 5, 5,
  5, 5, 5, 5, 5, 5, 5
];

var groupBases = [
  0, 0,
  33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
  43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
  16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
  6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
  24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
];

BN.prototype.toString = function toString(base, padding) {
  base = base || 10;
  if (base === 16 || base === 'hex') {
    var out = '';
    var off = 0;
    var padding = padding | 0 || 1;
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = this.words[i];
      var word = (((w << off) | carry) & 0xffffff).toString(16);
      carry = (w >>> (24 - off)) & 0xffffff;
      if (carry !== 0 || i !== this.length - 1)
        out = zeros[6 - word.length] + word + out;
      else
        out = word + out;
      off += 2;
      if (off >= 26) {
        off -= 26;
        i--;
      }
    }
    if (carry !== 0)
      out = carry.toString(16) + out;
    while (out.length % padding !== 0)
      out = '0' + out;
    if (this.sign)
      out = '-' + out;
    return out;
  } else if (base === (base | 0) && base >= 2 && base <= 36) {
    // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
    var groupSize = groupSizes[base];
    // var groupBase = Math.pow(base, groupSize);
    var groupBase = groupBases[base];
    var out = '';
    var c = this.clone();
    c.sign = false;
    while (c.cmpn(0) !== 0) {
      var r = c.modn(groupBase).toString(base);
      c = c.idivn(groupBase);

      if (c.cmpn(0) !== 0)
        out = zeros[groupSize - r.length] + r + out;
      else
        out = r + out;
    }
    if (this.cmpn(0) === 0)
      out = '0' + out;
    if (this.sign)
      out = '-' + out;
    return out;
  } else {
    assert(false, 'Base should be between 2 and 36');
  }
};

BN.prototype.toJSON = function toJSON() {
  return this.toString(16);
};

BN.prototype.toArray = function toArray(endian) {
  this.strip();
  var res = new Array(this.byteLength());
  res[0] = 0;

  var q = this.clone();
  if (endian !== 'le') {
    // Assume big-endian
    for (var i = 0; q.cmpn(0) !== 0; i++) {
      var b = q.andln(0xff);
      q.ishrn(8);

      res[res.length - i - 1] = b;
    }
  } else {
    // Assume little-endian
    for (var i = 0; q.cmpn(0) !== 0; i++) {
      var b = q.andln(0xff);
      q.ishrn(8);

      res[i] = b;
    }
  }

  return res;
};

if (Math.clz32) {
  BN.prototype._countBits = function _countBits(w) {
    return 32 - Math.clz32(w);
  };
} else {
  BN.prototype._countBits = function _countBits(w) {
    var t = w;
    var r = 0;
    if (t >= 0x1000) {
      r += 13;
      t >>>= 13;
    }
    if (t >= 0x40) {
      r += 7;
      t >>>= 7;
    }
    if (t >= 0x8) {
      r += 4;
      t >>>= 4;
    }
    if (t >= 0x02) {
      r += 2;
      t >>>= 2;
    }
    return r + t;
  };
}

BN.prototype._zeroBits = function _zeroBits(w) {
  // Short-cut
  if (w === 0)
    return 26;

  var t = w;
  var r = 0;
  if ((t & 0x1fff) === 0) {
    r += 13;
    t >>>= 13;
  }
  if ((t & 0x7f) === 0) {
    r += 7;
    t >>>= 7;
  }
  if ((t & 0xf) === 0) {
    r += 4;
    t >>>= 4;
  }
  if ((t & 0x3) === 0) {
    r += 2;
    t >>>= 2;
  }
  if ((t & 0x1) === 0)
    r++;
  return r;
};

// Return number of used bits in a BN
BN.prototype.bitLength = function bitLength() {
  var hi = 0;
  var w = this.words[this.length - 1];
  var hi = this._countBits(w);
  return (this.length - 1) * 26 + hi;
};

// Number of trailing zero bits
BN.prototype.zeroBits = function zeroBits() {
  if (this.cmpn(0) === 0)
    return 0;

  var r = 0;
  for (var i = 0; i < this.length; i++) {
    var b = this._zeroBits(this.words[i]);
    r += b;
    if (b !== 26)
      break;
  }
  return r;
};

BN.prototype.byteLength = function byteLength() {
  return Math.ceil(this.bitLength() / 8);
};

// Return negative clone of `this`
BN.prototype.neg = function neg() {
  if (this.cmpn(0) === 0)
    return this.clone();

  var r = this.clone();
  r.sign = !this.sign;
  return r;
};


// Or `num` with `this` in-place
BN.prototype.ior = function ior(num) {
  this.sign = this.sign || num.sign;

  while (this.length < num.length)
    this.words[this.length++] = 0;

  for (var i = 0; i < num.length; i++)
    this.words[i] = this.words[i] | num.words[i];

  return this.strip();
};


// Or `num` with `this`
BN.prototype.or = function or(num) {
  if (this.length > num.length)
    return this.clone().ior(num);
  else
    return num.clone().ior(this);
};


// And `num` with `this` in-place
BN.prototype.iand = function iand(num) {
  this.sign = this.sign && num.sign;

  // b = min-length(num, this)
  var b;
  if (this.length > num.length)
    b = num;
  else
    b = this;

  for (var i = 0; i < b.length; i++)
    this.words[i] = this.words[i] & num.words[i];

  this.length = b.length;

  return this.strip();
};


// And `num` with `this`
BN.prototype.and = function and(num) {
  if (this.length > num.length)
    return this.clone().iand(num);
  else
    return num.clone().iand(this);
};


// Xor `num` with `this` in-place
BN.prototype.ixor = function ixor(num) {
  this.sign = this.sign || num.sign;

  // a.length > b.length
  var a;
  var b;
  if (this.length > num.length) {
    a = this;
    b = num;
  } else {
    a = num;
    b = this;
  }

  for (var i = 0; i < b.length; i++)
    this.words[i] = a.words[i] ^ b.words[i];

  if (this !== a)
    for (; i < a.length; i++)
      this.words[i] = a.words[i];

  this.length = a.length;

  return this.strip();
};


// Xor `num` with `this`
BN.prototype.xor = function xor(num) {
  if (this.length > num.length)
    return this.clone().ixor(num);
  else
    return num.clone().ixor(this);
};


// Set `bit` of `this`
BN.prototype.setn = function setn(bit, val) {
  assert(typeof bit === 'number' && bit >= 0);

  var off = (bit / 26) | 0;
  var wbit = bit % 26;

  while (this.length <= off)
    this.words[this.length++] = 0;

  if (val)
    this.words[off] = this.words[off] | (1 << wbit);
  else
    this.words[off] = this.words[off] & ~(1 << wbit);

  return this.strip();
};


// Add `num` to `this` in-place
BN.prototype.iadd = function iadd(num) {
  // negative + positive
  if (this.sign && !num.sign) {
    this.sign = false;
    var r = this.isub(num);
    this.sign = !this.sign;
    return this._normSign();

  // positive + negative
  } else if (!this.sign && num.sign) {
    num.sign = false;
    var r = this.isub(num);
    num.sign = true;
    return r._normSign();
  }

  // a.length > b.length
  var a;
  var b;
  if (this.length > num.length) {
    a = this;
    b = num;
  } else {
    a = num;
    b = this;
  }

  var carry = 0;
  for (var i = 0; i < b.length; i++) {
    var r = a.words[i] + b.words[i] + carry;
    this.words[i] = r & 0x3ffffff;
    carry = r >>> 26;
  }
  for (; carry !== 0 && i < a.length; i++) {
    var r = a.words[i] + carry;
    this.words[i] = r & 0x3ffffff;
    carry = r >>> 26;
  }

  this.length = a.length;
  if (carry !== 0) {
    this.words[this.length] = carry;
    this.length++;
  // Copy the rest of the words
  } else if (a !== this) {
    for (; i < a.length; i++)
      this.words[i] = a.words[i];
  }

  return this;
};

// Add `num` to `this`
BN.prototype.add = function add(num) {
  if (num.sign && !this.sign) {
    num.sign = false;
    var res = this.sub(num);
    num.sign = true;
    return res;
  } else if (!num.sign && this.sign) {
    this.sign = false;
    var res = num.sub(this);
    this.sign = true;
    return res;
  }

  if (this.length > num.length)
    return this.clone().iadd(num);
  else
    return num.clone().iadd(this);
};

// Subtract `num` from `this` in-place
BN.prototype.isub = function isub(num) {
  // this - (-num) = this + num
  if (num.sign) {
    num.sign = false;
    var r = this.iadd(num);
    num.sign = true;
    return r._normSign();

  // -this - num = -(this + num)
  } else if (this.sign) {
    this.sign = false;
    this.iadd(num);
    this.sign = true;
    return this._normSign();
  }

  // At this point both numbers are positive
  var cmp = this.cmp(num);

  // Optimization - zeroify
  if (cmp === 0) {
    this.sign = false;
    this.length = 1;
    this.words[0] = 0;
    return this;
  }

  // a > b
  var a;
  var b;
  if (cmp > 0) {
    a = this;
    b = num;
  } else {
    a = num;
    b = this;
  }

  var carry = 0;
  for (var i = 0; i < b.length; i++) {
    var r = a.words[i] - b.words[i] + carry;
    carry = r >> 26;
    this.words[i] = r & 0x3ffffff;
  }
  for (; carry !== 0 && i < a.length; i++) {
    var r = a.words[i] + carry;
    carry = r >> 26;
    this.words[i] = r & 0x3ffffff;
  }

  // Copy rest of the words
  if (carry === 0 && i < a.length && a !== this)
    for (; i < a.length; i++)
      this.words[i] = a.words[i];
  this.length = Math.max(this.length, i);

  if (a !== this)
    this.sign = true;

  return this.strip();
};

// Subtract `num` from `this`
BN.prototype.sub = function sub(num) {
  return this.clone().isub(num);
};

/*
// NOTE: This could be potentionally used to generate loop-less multiplications
function _genCombMulTo(alen, blen) {
  var len = alen + blen - 1;
  var src = [
    'var a = this.words, b = num.words, o = out.words, c = 0, w, ' +
        'mask = 0x3ffffff, shift = 0x4000000;',
    'out.length = ' + len + ';'
  ];
  for (var k = 0; k < len; k++) {
    var minJ = Math.max(0, k - alen + 1);
    var maxJ = Math.min(k, blen - 1);

    for (var j = minJ; j <= maxJ; j++) {
      var i = k - j;
      var mul = 'a[' + i + '] * b[' + j + ']';

      if (j === minJ) {
        src.push('w = ' + mul + ' + c;');
        src.push('c = (w / shift) | 0;');
      } else {
        src.push('w += ' + mul + ';');
        src.push('c += (w / shift) | 0;');
      }
      src.push('w &= mask;');
    }
    src.push('o[' + k + '] = w;');
  }
  src.push('if (c !== 0) {',
           '  o[' + k + '] = c;',
           '  out.length++;',
           '}',
           'return out;');

  return src.join('\n');
}
*/

BN.prototype._smallMulTo = function _smallMulTo(num, out) {
  out.sign = num.sign !== this.sign;
  out.length = this.length + num.length;

  var carry = 0;
  for (var k = 0; k < out.length - 1; k++) {
    // Sum all words with the same `i + j = k` and accumulate `ncarry`,
    // note that ncarry could be >= 0x3ffffff
    var ncarry = carry >>> 26;
    var rword = carry & 0x3ffffff;
    var maxJ = Math.min(k, num.length - 1);
    for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {
      var i = k - j;
      var a = this.words[i] | 0;
      var b = num.words[j] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
      lo = (lo + rword) | 0;
      rword = lo & 0x3ffffff;
      ncarry = (ncarry + (lo >>> 26)) | 0;
    }
    out.words[k] = rword;
    carry = ncarry;
  }
  if (carry !== 0) {
    out.words[k] = carry;
  } else {
    out.length--;
  }

  return out.strip();
};

BN.prototype._bigMulTo = function _bigMulTo(num, out) {
  out.sign = num.sign !== this.sign;
  out.length = this.length + num.length;

  var carry = 0;
  var hncarry = 0;
  for (var k = 0; k < out.length - 1; k++) {
    // Sum all words with the same `i + j = k` and accumulate `ncarry`,
    // note that ncarry could be >= 0x3ffffff
    var ncarry = hncarry;
    hncarry = 0;
    var rword = carry & 0x3ffffff;
    var maxJ = Math.min(k, num.length - 1);
    for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {
      var i = k - j;
      var a = this.words[i] | 0;
      var b = num.words[j] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
      lo = (lo + rword) | 0;
      rword = lo & 0x3ffffff;
      ncarry = (ncarry + (lo >>> 26)) | 0;

      hncarry += ncarry >>> 26;
      ncarry &= 0x3ffffff;
    }
    out.words[k] = rword;
    carry = ncarry;
    ncarry = hncarry;
  }
  if (carry !== 0) {
    out.words[k] = carry;
  } else {
    out.length--;
  }

  return out.strip();
};

BN.prototype.mulTo = function mulTo(num, out) {
  var res;
  if (this.length + num.length < 63)
    res = this._smallMulTo(num, out);
  else
    res = this._bigMulTo(num, out);
  return res;
};

// Multiply `this` by `num`
BN.prototype.mul = function mul(num) {
  var out = new BN(null);
  out.words = new Array(this.length + num.length);
  return this.mulTo(num, out);
};

// In-place Multiplication
BN.prototype.imul = function imul(num) {
  if (this.cmpn(0) === 0 || num.cmpn(0) === 0) {
    this.words[0] = 0;
    this.length = 1;
    return this;
  }

  var tlen = this.length;
  var nlen = num.length;

  this.sign = num.sign !== this.sign;
  this.length = this.length + num.length;
  this.words[this.length - 1] = 0;

  for (var k = this.length - 2; k >= 0; k--) {
    // Sum all words with the same `i + j = k` and accumulate `carry`,
    // note that carry could be >= 0x3ffffff
    var carry = 0;
    var rword = 0;
    var maxJ = Math.min(k, nlen - 1);
    for (var j = Math.max(0, k - tlen + 1); j <= maxJ; j++) {
      var i = k - j;
      var a = this.words[i];
      var b = num.words[j];
      var r = a * b;

      var lo = r & 0x3ffffff;
      carry += (r / 0x4000000) | 0;
      lo += rword;
      rword = lo & 0x3ffffff;
      carry += lo >>> 26;
    }
    this.words[k] = rword;
    this.words[k + 1] += carry;
    carry = 0;
  }

  // Propagate overflows
  var carry = 0;
  for (var i = 1; i < this.length; i++) {
    var w = this.words[i] + carry;
    this.words[i] = w & 0x3ffffff;
    carry = w >>> 26;
  }

  return this.strip();
};

BN.prototype.imuln = function imuln(num) {
  assert(typeof num === 'number');

  // Carry
  var carry = 0;
  for (var i = 0; i < this.length; i++) {
    var w = this.words[i] * num;
    var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
    carry >>= 26;
    carry += (w / 0x4000000) | 0;
    // NOTE: lo is 27bit maximum
    carry += lo >>> 26;
    this.words[i] = lo & 0x3ffffff;
  }

  if (carry !== 0) {
    this.words[i] = carry;
    this.length++;
  }

  return this;
};

BN.prototype.muln = function muln(num) {
  return this.clone().imuln(num);
};

// `this` * `this`
BN.prototype.sqr = function sqr() {
  return this.mul(this);
};

// `this` * `this` in-place
BN.prototype.isqr = function isqr() {
  return this.mul(this);
};

// Shift-left in-place
BN.prototype.ishln = function ishln(bits) {
  assert(typeof bits === 'number' && bits >= 0);
  var r = bits % 26;
  var s = (bits - r) / 26;
  var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);

  if (r !== 0) {
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var newCarry = this.words[i] & carryMask;
      var c = (this.words[i] - newCarry) << r;
      this.words[i] = c | carry;
      carry = newCarry >>> (26 - r);
    }
    if (carry) {
      this.words[i] = carry;
      this.length++;
    }
  }

  if (s !== 0) {
    for (var i = this.length - 1; i >= 0; i--)
      this.words[i + s] = this.words[i];
    for (var i = 0; i < s; i++)
      this.words[i] = 0;
    this.length += s;
  }

  return this.strip();
};

// Shift-right in-place
// NOTE: `hint` is a lowest bit before trailing zeroes
// NOTE: if `extended` is present - it will be filled with destroyed bits
BN.prototype.ishrn = function ishrn(bits, hint, extended) {
  assert(typeof bits === 'number' && bits >= 0);
  var h;
  if (hint)
    h = (hint - (hint % 26)) / 26;
  else
    h = 0;

  var r = bits % 26;
  var s = Math.min((bits - r) / 26, this.length);
  var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
  var maskedWords = extended;

  h -= s;
  h = Math.max(0, h);

  // Extended mode, copy masked part
  if (maskedWords) {
    for (var i = 0; i < s; i++)
      maskedWords.words[i] = this.words[i];
    maskedWords.length = s;
  }

  if (s === 0) {
    // No-op, we should not move anything at all
  } else if (this.length > s) {
    this.length -= s;
    for (var i = 0; i < this.length; i++)
      this.words[i] = this.words[i + s];
  } else {
    this.words[0] = 0;
    this.length = 1;
  }

  var carry = 0;
  for (var i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
    var word = this.words[i];
    this.words[i] = (carry << (26 - r)) | (word >>> r);
    carry = word & mask;
  }

  // Push carried bits as a mask
  if (maskedWords && carry !== 0)
    maskedWords.words[maskedWords.length++] = carry;

  if (this.length === 0) {
    this.words[0] = 0;
    this.length = 1;
  }

  this.strip();

  return this;
};

// Shift-left
BN.prototype.shln = function shln(bits) {
  return this.clone().ishln(bits);
};

// Shift-right
BN.prototype.shrn = function shrn(bits) {
  return this.clone().ishrn(bits);
};

// Test if n bit is set
BN.prototype.testn = function testn(bit) {
  assert(typeof bit === 'number' && bit >= 0);
  var r = bit % 26;
  var s = (bit - r) / 26;
  var q = 1 << r;

  // Fast case: bit is much higher than all existing words
  if (this.length <= s) {
    return false;
  }

  // Check bit and return
  var w = this.words[s];

  return !!(w & q);
};

// Return only lowers bits of number (in-place)
BN.prototype.imaskn = function imaskn(bits) {
  assert(typeof bits === 'number' && bits >= 0);
  var r = bits % 26;
  var s = (bits - r) / 26;

  assert(!this.sign, 'imaskn works only with positive numbers');

  if (r !== 0)
    s++;
  this.length = Math.min(s, this.length);

  if (r !== 0) {
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    this.words[this.length - 1] &= mask;
  }

  return this.strip();
};

// Return only lowers bits of number
BN.prototype.maskn = function maskn(bits) {
  return this.clone().imaskn(bits);
};

// Add plain number `num` to `this`
BN.prototype.iaddn = function iaddn(num) {
  assert(typeof num === 'number');
  if (num < 0)
    return this.isubn(-num);

  // Possible sign change
  if (this.sign) {
    if (this.length === 1 && this.words[0] < num) {
      this.words[0] = num - this.words[0];
      this.sign = false;
      return this;
    }

    this.sign = false;
    this.isubn(num);
    this.sign = true;
    return this;
  }

  // Add without checks
  return this._iaddn(num);
};

BN.prototype._iaddn = function _iaddn(num) {
  this.words[0] += num;

  // Carry
  for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
    this.words[i] -= 0x4000000;
    if (i === this.length - 1)
      this.words[i + 1] = 1;
    else
      this.words[i + 1]++;
  }
  this.length = Math.max(this.length, i + 1);

  return this;
};

// Subtract plain number `num` from `this`
BN.prototype.isubn = function isubn(num) {
  assert(typeof num === 'number');
  if (num < 0)
    return this.iaddn(-num);

  if (this.sign) {
    this.sign = false;
    this.iaddn(num);
    this.sign = true;
    return this;
  }

  this.words[0] -= num;

  // Carry
  for (var i = 0; i < this.length && this.words[i] < 0; i++) {
    this.words[i] += 0x4000000;
    this.words[i + 1] -= 1;
  }

  return this.strip();
};

BN.prototype.addn = function addn(num) {
  return this.clone().iaddn(num);
};

BN.prototype.subn = function subn(num) {
  return this.clone().isubn(num);
};

BN.prototype.iabs = function iabs() {
  this.sign = false;

  return this;
};

BN.prototype.abs = function abs() {
  return this.clone().iabs();
};

BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
  // Bigger storage is needed
  var len = num.length + shift;
  var i;
  if (this.words.length < len) {
    var t = new Array(len);
    for (var i = 0; i < this.length; i++)
      t[i] = this.words[i];
    this.words = t;
  } else {
    i = this.length;
  }

  // Zeroify rest
  this.length = Math.max(this.length, len);
  for (; i < this.length; i++)
    this.words[i] = 0;

  var carry = 0;
  for (var i = 0; i < num.length; i++) {
    var w = this.words[i + shift] + carry;
    var right = num.words[i] * mul;
    w -= right & 0x3ffffff;
    carry = (w >> 26) - ((right / 0x4000000) | 0);
    this.words[i + shift] = w & 0x3ffffff;
  }
  for (; i < this.length - shift; i++) {
    var w = this.words[i + shift] + carry;
    carry = w >> 26;
    this.words[i + shift] = w & 0x3ffffff;
  }

  if (carry === 0)
    return this.strip();

  // Subtraction overflow
  assert(carry === -1);
  carry = 0;
  for (var i = 0; i < this.length; i++) {
    var w = -this.words[i] + carry;
    carry = w >> 26;
    this.words[i] = w & 0x3ffffff;
  }
  this.sign = true;

  return this.strip();
};

BN.prototype._wordDiv = function _wordDiv(num, mode) {
  var shift = this.length - num.length;

  var a = this.clone();
  var b = num;

  // Normalize
  var bhi = b.words[b.length - 1];
  var bhiBits = this._countBits(bhi);
  shift = 26 - bhiBits;
  if (shift !== 0) {
    b = b.shln(shift);
    a.ishln(shift);
    bhi = b.words[b.length - 1];
  }

  // Initialize quotient
  var m = a.length - b.length;
  var q;

  if (mode !== 'mod') {
    q = new BN(null);
    q.length = m + 1;
    q.words = new Array(q.length);
    for (var i = 0; i < q.length; i++)
      q.words[i] = 0;
  }

  var diff = a.clone()._ishlnsubmul(b, 1, m);
  if (!diff.sign) {
    a = diff;
    if (q)
      q.words[m] = 1;
  }

  for (var j = m - 1; j >= 0; j--) {
    var qj = a.words[b.length + j] * 0x4000000 + a.words[b.length + j - 1];

    // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
    // (0x7ffffff)
    qj = Math.min((qj / bhi) | 0, 0x3ffffff);

    a._ishlnsubmul(b, qj, j);
    while (a.sign) {
      qj--;
      a.sign = false;
      a._ishlnsubmul(b, 1, j);
      if (a.cmpn(0) !== 0)
        a.sign = !a.sign;
    }
    if (q)
      q.words[j] = qj;
  }
  if (q)
    q.strip();
  a.strip();

  // Denormalize
  if (mode !== 'div' && shift !== 0)
    a.ishrn(shift);
  return { div: q ? q : null, mod: a };
};

BN.prototype.divmod = function divmod(num, mode) {
  assert(num.cmpn(0) !== 0);

  if (this.sign && !num.sign) {
    var res = this.neg().divmod(num, mode);
    var div;
    var mod;
    if (mode !== 'mod')
      div = res.div.neg();
    if (mode !== 'div')
      mod = res.mod.cmpn(0) === 0 ? res.mod : num.sub(res.mod);
    return {
      div: div,
      mod: mod
    };
  } else if (!this.sign && num.sign) {
    var res = this.divmod(num.neg(), mode);
    var div;
    if (mode !== 'mod')
      div = res.div.neg();
    return { div: div, mod: res.mod };
  } else if (this.sign && num.sign) {
    return this.neg().divmod(num.neg(), mode);
  }

  // Both numbers are positive at this point

  // Strip both numbers to approximate shift value
  if (num.length > this.length || this.cmp(num) < 0)
    return { div: new BN(0), mod: this };

  // Very short reduction
  if (num.length === 1) {
    if (mode === 'div')
      return { div: this.divn(num.words[0]), mod: null };
    else if (mode === 'mod')
      return { div: null, mod: new BN(this.modn(num.words[0])) };
    return {
      div: this.divn(num.words[0]),
      mod: new BN(this.modn(num.words[0]))
    };
  }

  return this._wordDiv(num, mode);
};

// Find `this` / `num`
BN.prototype.div = function div(num) {
  return this.divmod(num, 'div').div;
};

// Find `this` % `num`
BN.prototype.mod = function mod(num) {
  return this.divmod(num, 'mod').mod;
};

// Find Round(`this` / `num`)
BN.prototype.divRound = function divRound(num) {
  var dm = this.divmod(num);

  // Fast case - exact division
  if (dm.mod.cmpn(0) === 0)
    return dm.div;

  var mod = dm.div.sign ? dm.mod.isub(num) : dm.mod;

  var half = num.shrn(1);
  var r2 = num.andln(1);
  var cmp = mod.cmp(half);

  // Round down
  if (cmp < 0 || r2 === 1 && cmp === 0)
    return dm.div;

  // Round up
  return dm.div.sign ? dm.div.isubn(1) : dm.div.iaddn(1);
};

BN.prototype.modn = function modn(num) {
  assert(num <= 0x3ffffff);
  var p = (1 << 26) % num;

  var acc = 0;
  for (var i = this.length - 1; i >= 0; i--)
    acc = (p * acc + this.words[i]) % num;

  return acc;
};

// In-place division by number
BN.prototype.idivn = function idivn(num) {
  assert(num <= 0x3ffffff);

  var carry = 0;
  for (var i = this.length - 1; i >= 0; i--) {
    var w = this.words[i] + carry * 0x4000000;
    this.words[i] = (w / num) | 0;
    carry = w % num;
  }

  return this.strip();
};

BN.prototype.divn = function divn(num) {
  return this.clone().idivn(num);
};

BN.prototype.egcd = function egcd(p) {
  assert(!p.sign);
  assert(p.cmpn(0) !== 0);

  var x = this;
  var y = p.clone();

  if (x.sign)
    x = x.mod(p);
  else
    x = x.clone();

  // A * x + B * y = x
  var A = new BN(1);
  var B = new BN(0);

  // C * x + D * y = y
  var C = new BN(0);
  var D = new BN(1);

  var g = 0;

  while (x.isEven() && y.isEven()) {
    x.ishrn(1);
    y.ishrn(1);
    ++g;
  }

  var yp = y.clone();
  var xp = x.clone();

  while (x.cmpn(0) !== 0) {
    while (x.isEven()) {
      x.ishrn(1);
      if (A.isEven() && B.isEven()) {
        A.ishrn(1);
        B.ishrn(1);
      } else {
        A.iadd(yp).ishrn(1);
        B.isub(xp).ishrn(1);
      }
    }

    while (y.isEven()) {
      y.ishrn(1);
      if (C.isEven() && D.isEven()) {
        C.ishrn(1);
        D.ishrn(1);
      } else {
        C.iadd(yp).ishrn(1);
        D.isub(xp).ishrn(1);
      }
    }

    if (x.cmp(y) >= 0) {
      x.isub(y);
      A.isub(C);
      B.isub(D);
    } else {
      y.isub(x);
      C.isub(A);
      D.isub(B);
    }
  }

  return {
    a: C,
    b: D,
    gcd: y.ishln(g)
  };
};

// This is reduced incarnation of the binary EEA
// above, designated to invert members of the
// _prime_ fields F(p) at a maximal speed
BN.prototype._invmp = function _invmp(p) {
  assert(!p.sign);
  assert(p.cmpn(0) !== 0);

  var a = this;
  var b = p.clone();

  if (a.sign)
    a = a.mod(p);
  else
    a = a.clone();

  var x1 = new BN(1);
  var x2 = new BN(0);

  var delta = b.clone();

  while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
    while (a.isEven()) {
      a.ishrn(1);
      if (x1.isEven())
        x1.ishrn(1);
      else
        x1.iadd(delta).ishrn(1);
    }
    while (b.isEven()) {
      b.ishrn(1);
      if (x2.isEven())
        x2.ishrn(1);
      else
        x2.iadd(delta).ishrn(1);
    }
    if (a.cmp(b) >= 0) {
      a.isub(b);
      x1.isub(x2);
    } else {
      b.isub(a);
      x2.isub(x1);
    }
  }
  if (a.cmpn(1) === 0)
    return x1;
  else
    return x2;
};

BN.prototype.gcd = function gcd(num) {
  if (this.cmpn(0) === 0)
    return num.clone();
  if (num.cmpn(0) === 0)
    return this.clone();

  var a = this.clone();
  var b = num.clone();
  a.sign = false;
  b.sign = false;

  // Remove common factor of two
  for (var shift = 0; a.isEven() && b.isEven(); shift++) {
    a.ishrn(1);
    b.ishrn(1);
  }

  do {
    while (a.isEven())
      a.ishrn(1);
    while (b.isEven())
      b.ishrn(1);

    var r = a.cmp(b);
    if (r < 0) {
      // Swap `a` and `b` to make `a` always bigger than `b`
      var t = a;
      a = b;
      b = t;
    } else if (r === 0 || b.cmpn(1) === 0) {
      break;
    }

    a.isub(b);
  } while (true);

  return b.ishln(shift);
};

// Invert number in the field F(num)
BN.prototype.invm = function invm(num) {
  return this.egcd(num).a.mod(num);
};

BN.prototype.isEven = function isEven() {
  return (this.words[0] & 1) === 0;
};

BN.prototype.isOdd = function isOdd() {
  return (this.words[0] & 1) === 1;
};

// And first word and num
BN.prototype.andln = function andln(num) {
  return this.words[0] & num;
};

// Increment at the bit position in-line
BN.prototype.bincn = function bincn(bit) {
  assert(typeof bit === 'number');
  var r = bit % 26;
  var s = (bit - r) / 26;
  var q = 1 << r;

  // Fast case: bit is much higher than all existing words
  if (this.length <= s) {
    for (var i = this.length; i < s + 1; i++)
      this.words[i] = 0;
    this.words[s] |= q;
    this.length = s + 1;
    return this;
  }

  // Add bit and propagate, if needed
  var carry = q;
  for (var i = s; carry !== 0 && i < this.length; i++) {
    var w = this.words[i];
    w += carry;
    carry = w >>> 26;
    w &= 0x3ffffff;
    this.words[i] = w;
  }
  if (carry !== 0) {
    this.words[i] = carry;
    this.length++;
  }
  return this;
};

BN.prototype.cmpn = function cmpn(num) {
  var sign = num < 0;
  if (sign)
    num = -num;

  if (this.sign && !sign)
    return -1;
  else if (!this.sign && sign)
    return 1;

  num &= 0x3ffffff;
  this.strip();

  var res;
  if (this.length > 1) {
    res = 1;
  } else {
    var w = this.words[0];
    res = w === num ? 0 : w < num ? -1 : 1;
  }
  if (this.sign)
    res = -res;
  return res;
};

// Compare two numbers and return:
// 1 - if `this` > `num`
// 0 - if `this` == `num`
// -1 - if `this` < `num`
BN.prototype.cmp = function cmp(num) {
  if (this.sign && !num.sign)
    return -1;
  else if (!this.sign && num.sign)
    return 1;

  var res = this.ucmp(num);
  if (this.sign)
    return -res;
  else
    return res;
};

// Unsigned comparison
BN.prototype.ucmp = function ucmp(num) {
  // At this point both numbers have the same sign
  if (this.length > num.length)
    return 1;
  else if (this.length < num.length)
    return -1;

  var res = 0;
  for (var i = this.length - 1; i >= 0; i--) {
    var a = this.words[i];
    var b = num.words[i];

    if (a === b)
      continue;
    if (a < b)
      res = -1;
    else if (a > b)
      res = 1;
    break;
  }
  return res;
};

//
// A reduce context, could be using montgomery or something better, depending
// on the `m` itself.
//
BN.red = function red(num) {
  return new Red(num);
};

BN.prototype.toRed = function toRed(ctx) {
  assert(!this.red, 'Already a number in reduction context');
  assert(!this.sign, 'red works only with positives');
  return ctx.convertTo(this)._forceRed(ctx);
};

BN.prototype.fromRed = function fromRed() {
  assert(this.red, 'fromRed works only with numbers in reduction context');
  return this.red.convertFrom(this);
};

BN.prototype._forceRed = function _forceRed(ctx) {
  this.red = ctx;
  return this;
};

BN.prototype.forceRed = function forceRed(ctx) {
  assert(!this.red, 'Already a number in reduction context');
  return this._forceRed(ctx);
};

BN.prototype.redAdd = function redAdd(num) {
  assert(this.red, 'redAdd works only with red numbers');
  return this.red.add(this, num);
};

BN.prototype.redIAdd = function redIAdd(num) {
  assert(this.red, 'redIAdd works only with red numbers');
  return this.red.iadd(this, num);
};

BN.prototype.redSub = function redSub(num) {
  assert(this.red, 'redSub works only with red numbers');
  return this.red.sub(this, num);
};

BN.prototype.redISub = function redISub(num) {
  assert(this.red, 'redISub works only with red numbers');
  return this.red.isub(this, num);
};

BN.prototype.redShl = function redShl(num) {
  assert(this.red, 'redShl works only with red numbers');
  return this.red.shl(this, num);
};

BN.prototype.redMul = function redMul(num) {
  assert(this.red, 'redMul works only with red numbers');
  this.red._verify2(this, num);
  return this.red.mul(this, num);
};

BN.prototype.redIMul = function redIMul(num) {
  assert(this.red, 'redMul works only with red numbers');
  this.red._verify2(this, num);
  return this.red.imul(this, num);
};

BN.prototype.redSqr = function redSqr() {
  assert(this.red, 'redSqr works only with red numbers');
  this.red._verify1(this);
  return this.red.sqr(this);
};

BN.prototype.redISqr = function redISqr() {
  assert(this.red, 'redISqr works only with red numbers');
  this.red._verify1(this);
  return this.red.isqr(this);
};

// Square root over p
BN.prototype.redSqrt = function redSqrt() {
  assert(this.red, 'redSqrt works only with red numbers');
  this.red._verify1(this);
  return this.red.sqrt(this);
};

BN.prototype.redInvm = function redInvm() {
  assert(this.red, 'redInvm works only with red numbers');
  this.red._verify1(this);
  return this.red.invm(this);
};

// Return negative clone of `this` % `red modulo`
BN.prototype.redNeg = function redNeg() {
  assert(this.red, 'redNeg works only with red numbers');
  this.red._verify1(this);
  return this.red.neg(this);
};

BN.prototype.redPow = function redPow(num) {
  assert(this.red && !num.red, 'redPow(normalNum)');
  this.red._verify1(this);
  return this.red.pow(this, num);
};

// Prime numbers with efficient reduction
var primes = {
  k256: null,
  p224: null,
  p192: null,
  p25519: null
};

// Pseudo-Mersenne prime
function MPrime(name, p) {
  // P = 2 ^ N - K
  this.name = name;
  this.p = new BN(p, 16);
  this.n = this.p.bitLength();
  this.k = new BN(1).ishln(this.n).isub(this.p);

  this.tmp = this._tmp();
}

MPrime.prototype._tmp = function _tmp() {
  var tmp = new BN(null);
  tmp.words = new Array(Math.ceil(this.n / 13));
  return tmp;
};

MPrime.prototype.ireduce = function ireduce(num) {
  // Assumes that `num` is less than `P^2`
  // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
  var r = num;
  var rlen;

  do {
    this.split(r, this.tmp);
    r = this.imulK(r);
    r = r.iadd(this.tmp);
    rlen = r.bitLength();
  } while (rlen > this.n);

  var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
  if (cmp === 0) {
    r.words[0] = 0;
    r.length = 1;
  } else if (cmp > 0) {
    r.isub(this.p);
  } else {
    r.strip();
  }

  return r;
};

MPrime.prototype.split = function split(input, out) {
  input.ishrn(this.n, 0, out);
};

MPrime.prototype.imulK = function imulK(num) {
  return num.imul(this.k);
};

function K256() {
  MPrime.call(
    this,
    'k256',
    'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
}
inherits(K256, MPrime);

K256.prototype.split = function split(input, output) {
  // 256 = 9 * 26 + 22
  var mask = 0x3fffff;

  var outLen = Math.min(input.length, 9);
  for (var i = 0; i < outLen; i++)
    output.words[i] = input.words[i];
  output.length = outLen;

  if (input.length <= 9) {
    input.words[0] = 0;
    input.length = 1;
    return;
  }

  // Shift by 9 limbs
  var prev = input.words[9];
  output.words[output.length++] = prev & mask;

  for (var i = 10; i < input.length; i++) {
    var next = input.words[i];
    input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
    prev = next;
  }
  input.words[i - 10] = prev >>> 22;
  input.length -= 9;
};

K256.prototype.imulK = function imulK(num) {
  // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
  num.words[num.length] = 0;
  num.words[num.length + 1] = 0;
  num.length += 2;

  // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
  var hi;
  var lo = 0;
  for (var i = 0; i < num.length; i++) {
    var w = num.words[i];
    hi = w * 0x40;
    lo += w * 0x3d1;
    hi += (lo / 0x4000000) | 0;
    lo &= 0x3ffffff;

    num.words[i] = lo;

    lo = hi;
  }

  // Fast length reduction
  if (num.words[num.length - 1] === 0) {
    num.length--;
    if (num.words[num.length - 1] === 0)
      num.length--;
  }
  return num;
};

function P224() {
  MPrime.call(
    this,
    'p224',
    'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
}
inherits(P224, MPrime);

function P192() {
  MPrime.call(
    this,
    'p192',
    'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
}
inherits(P192, MPrime);

function P25519() {
  // 2 ^ 255 - 19
  MPrime.call(
    this,
    '25519',
    '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
}
inherits(P25519, MPrime);

P25519.prototype.imulK = function imulK(num) {
  // K = 0x13
  var carry = 0;
  for (var i = 0; i < num.length; i++) {
    var hi = num.words[i] * 0x13 + carry;
    var lo = hi & 0x3ffffff;
    hi >>>= 26;

    num.words[i] = lo;
    carry = hi;
  }
  if (carry !== 0)
    num.words[num.length++] = carry;
  return num;
};

// Exported mostly for testing purposes, use plain name instead
BN._prime = function prime(name) {
  // Cached version of prime
  if (primes[name])
    return primes[name];

  var prime;
  if (name === 'k256')
    prime = new K256();
  else if (name === 'p224')
    prime = new P224();
  else if (name === 'p192')
    prime = new P192();
  else if (name === 'p25519')
    prime = new P25519();
  else
    throw new Error('Unknown prime ' + name);
  primes[name] = prime;

  return prime;
};

//
// Base reduction engine
//
function Red(m) {
  if (typeof m === 'string') {
    var prime = BN._prime(m);
    this.m = prime.p;
    this.prime = prime;
  } else {
    this.m = m;
    this.prime = null;
  }
}

Red.prototype._verify1 = function _verify1(a) {
  assert(!a.sign, 'red works only with positives');
  assert(a.red, 'red works only with red numbers');
};

Red.prototype._verify2 = function _verify2(a, b) {
  assert(!a.sign && !b.sign, 'red works only with positives');
  assert(a.red && a.red === b.red,
         'red works only with red numbers');
};

Red.prototype.imod = function imod(a) {
  if (this.prime)
    return this.prime.ireduce(a)._forceRed(this);
  return a.mod(this.m)._forceRed(this);
};

Red.prototype.neg = function neg(a) {
  var r = a.clone();
  r.sign = !r.sign;
  return r.iadd(this.m)._forceRed(this);
};

Red.prototype.add = function add(a, b) {
  this._verify2(a, b);

  var res = a.add(b);
  if (res.cmp(this.m) >= 0)
    res.isub(this.m);
  return res._forceRed(this);
};

Red.prototype.iadd = function iadd(a, b) {
  this._verify2(a, b);

  var res = a.iadd(b);
  if (res.cmp(this.m) >= 0)
    res.isub(this.m);
  return res;
};

Red.prototype.sub = function sub(a, b) {
  this._verify2(a, b);

  var res = a.sub(b);
  if (res.cmpn(0) < 0)
    res.iadd(this.m);
  return res._forceRed(this);
};

Red.prototype.isub = function isub(a, b) {
  this._verify2(a, b);

  var res = a.isub(b);
  if (res.cmpn(0) < 0)
    res.iadd(this.m);
  return res;
};

Red.prototype.shl = function shl(a, num) {
  this._verify1(a);
  return this.imod(a.shln(num));
};

Red.prototype.imul = function imul(a, b) {
  this._verify2(a, b);
  return this.imod(a.imul(b));
};

Red.prototype.mul = function mul(a, b) {
  this._verify2(a, b);
  return this.imod(a.mul(b));
};

Red.prototype.isqr = function isqr(a) {
  return this.imul(a, a);
};

Red.prototype.sqr = function sqr(a) {
  return this.mul(a, a);
};

Red.prototype.sqrt = function sqrt(a) {
  if (a.cmpn(0) === 0)
    return a.clone();

  var mod3 = this.m.andln(3);
  assert(mod3 % 2 === 1);

  // Fast case
  if (mod3 === 3) {
    var pow = this.m.add(new BN(1)).ishrn(2);
    var r = this.pow(a, pow);
    return r;
  }

  // Tonelli-Shanks algorithm (Totally unoptimized and slow)
  //
  // Find Q and S, that Q * 2 ^ S = (P - 1)
  var q = this.m.subn(1);
  var s = 0;
  while (q.cmpn(0) !== 0 && q.andln(1) === 0) {
    s++;
    q.ishrn(1);
  }
  assert(q.cmpn(0) !== 0);

  var one = new BN(1).toRed(this);
  var nOne = one.redNeg();

  // Find quadratic non-residue
  // NOTE: Max is such because of generalized Riemann hypothesis.
  var lpow = this.m.subn(1).ishrn(1);
  var z = this.m.bitLength();
  z = new BN(2 * z * z).toRed(this);
  while (this.pow(z, lpow).cmp(nOne) !== 0)
    z.redIAdd(nOne);

  var c = this.pow(z, q);
  var r = this.pow(a, q.addn(1).ishrn(1));
  var t = this.pow(a, q);
  var m = s;
  while (t.cmp(one) !== 0) {
    var tmp = t;
    for (var i = 0; tmp.cmp(one) !== 0; i++)
      tmp = tmp.redSqr();
    assert(i < m);
    var b = this.pow(c, new BN(1).ishln(m - i - 1));

    r = r.redMul(b);
    c = b.redSqr();
    t = t.redMul(c);
    m = i;
  }

  return r;
};

Red.prototype.invm = function invm(a) {
  var inv = a._invmp(this.m);
  if (inv.sign) {
    inv.sign = false;
    return this.imod(inv).redNeg();
  } else {
    return this.imod(inv);
  }
};

Red.prototype.pow = function pow(a, num) {
  var w = [];

  if (num.cmpn(0) === 0)
    return new BN(1);

  var q = num.clone();

  while (q.cmpn(0) !== 0) {
    w.push(q.andln(1));
    q.ishrn(1);
  }

  // Skip leading zeroes
  var res = a;
  for (var i = 0; i < w.length; i++, res = this.sqr(res))
    if (w[i] !== 0)
      break;

  if (++i < w.length) {
    for (var q = this.sqr(res); i < w.length; i++, q = this.sqr(q)) {
      if (w[i] === 0)
        continue;
      res = this.mul(res, q);
    }
  }

  return res;
};

Red.prototype.convertTo = function convertTo(num) {
  var r = num.mod(this.m);
  if (r === num)
    return r.clone();
  else
    return r;
};

Red.prototype.convertFrom = function convertFrom(num) {
  var res = num.clone();
  res.red = null;
  return res;
};

//
// Montgomery method engine
//

BN.mont = function mont(num) {
  return new Mont(num);
};

function Mont(m) {
  Red.call(this, m);

  this.shift = this.m.bitLength();
  if (this.shift % 26 !== 0)
    this.shift += 26 - (this.shift % 26);
  this.r = new BN(1).ishln(this.shift);
  this.r2 = this.imod(this.r.sqr());
  this.rinv = this.r._invmp(this.m);

  this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
  this.minv.sign = true;
  this.minv = this.minv.mod(this.r);
}
inherits(Mont, Red);

Mont.prototype.convertTo = function convertTo(num) {
  return this.imod(num.shln(this.shift));
};

Mont.prototype.convertFrom = function convertFrom(num) {
  var r = this.imod(num.mul(this.rinv));
  r.red = null;
  return r;
};

Mont.prototype.imul = function imul(a, b) {
  if (a.cmpn(0) === 0 || b.cmpn(0) === 0) {
    a.words[0] = 0;
    a.length = 1;
    return a;
  }

  var t = a.imul(b);
  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
  var u = t.isub(c).ishrn(this.shift);
  var res = u;
  if (u.cmp(this.m) >= 0)
    res = u.isub(this.m);
  else if (u.cmpn(0) < 0)
    res = u.iadd(this.m);

  return res._forceRed(this);
};

Mont.prototype.mul = function mul(a, b) {
  if (a.cmpn(0) === 0 || b.cmpn(0) === 0)
    return new BN(0)._forceRed(this);

  var t = a.mul(b);
  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
  var u = t.isub(c).ishrn(this.shift);
  var res = u;
  if (u.cmp(this.m) >= 0)
    res = u.isub(this.m);
  else if (u.cmpn(0) < 0)
    res = u.iadd(this.m);

  return res._forceRed(this);
};

Mont.prototype.invm = function invm(a) {
  // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
  var res = this.imod(a._invmp(this.m).mul(this.r2));
  return res._forceRed(this);
};

})(typeof module === 'undefined' || module, this);

},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/curves.js":[function(require,module,exports){
'use strict'
exports['1.3.132.0.10'] = 'secp256k1'

exports['1.3.132.0.33'] = 'p224'

exports['1.2.840.10045.3.1.1'] = 'p192'

exports['1.2.840.10045.3.1.7'] = 'p256'

},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/algos.js":[function(require,module,exports){
(function (Buffer){
'use strict'
exports['RSA-SHA224'] = exports.sha224WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha224',
  id: new Buffer('302d300d06096086480165030402040500041c', 'hex')
}
exports['RSA-SHA256'] = exports.sha256WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha256',
  id: new Buffer('3031300d060960864801650304020105000420', 'hex')
}
exports['RSA-SHA384'] = exports.sha384WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha384',
  id: new Buffer('3041300d060960864801650304020205000430', 'hex')
}
exports['RSA-SHA512'] = exports.sha512WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha512',
  id: new Buffer('3051300d060960864801650304020305000440', 'hex')
}
exports['RSA-SHA1'] = {
  sign: 'rsa',
  hash: 'sha1',
  id: new Buffer('3021300906052b0e03021a05000414', 'hex')
}
exports['ecdsa-with-SHA1'] = {
  sign: 'ecdsa',
  hash: 'sha1',
  id: new Buffer('', 'hex')
}
exports.DSA = exports['DSA-SHA1'] = exports['DSA-SHA'] = {
  sign: 'dsa',
  hash: 'sha1',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA224'] = exports['DSA-WITH-SHA224'] = {
  sign: 'dsa',
  hash: 'sha224',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA256'] = exports['DSA-WITH-SHA256'] = {
  sign: 'dsa',
  hash: 'sha256',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA384'] = exports['DSA-WITH-SHA384'] = {
  sign: 'dsa',
  hash: 'sha384',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA512'] = exports['DSA-WITH-SHA512'] = {
  sign: 'dsa',
  hash: 'sha512',
  id: new Buffer('', 'hex')
}
exports['DSA-RIPEMD160'] = {
  sign: 'dsa',
  hash: 'rmd160',
  id: new Buffer('', 'hex')
}
exports['RSA-RIPEMD160'] = exports.ripemd160WithRSA = {
  sign: 'rsa',
  hash: 'rmd160',
  id: new Buffer('3021300906052b2403020105000414', 'hex')
}
exports['RSA-MD5'] = exports.md5WithRSAEncryption = {
  sign: 'rsa',
  hash: 'md5',
  id: new Buffer('3020300c06082a864886f70d020505000410', 'hex')
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL2FsZ29zLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuZXhwb3J0c1snUlNBLVNIQTIyNCddID0gZXhwb3J0cy5zaGEyMjRXaXRoUlNBRW5jcnlwdGlvbiA9IHtcbiAgc2lnbjogJ3JzYScsXG4gIGhhc2g6ICdzaGEyMjQnLFxuICBpZDogbmV3IEJ1ZmZlcignMzAyZDMwMGQwNjA5NjA4NjQ4MDE2NTAzMDQwMjA0MDUwMDA0MWMnLCAnaGV4Jylcbn1cbmV4cG9ydHNbJ1JTQS1TSEEyNTYnXSA9IGV4cG9ydHMuc2hhMjU2V2l0aFJTQUVuY3J5cHRpb24gPSB7XG4gIHNpZ246ICdyc2EnLFxuICBoYXNoOiAnc2hhMjU2JyxcbiAgaWQ6IG5ldyBCdWZmZXIoJzMwMzEzMDBkMDYwOTYwODY0ODAxNjUwMzA0MDIwMTA1MDAwNDIwJywgJ2hleCcpXG59XG5leHBvcnRzWydSU0EtU0hBMzg0J10gPSBleHBvcnRzLnNoYTM4NFdpdGhSU0FFbmNyeXB0aW9uID0ge1xuICBzaWduOiAncnNhJyxcbiAgaGFzaDogJ3NoYTM4NCcsXG4gIGlkOiBuZXcgQnVmZmVyKCczMDQxMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDIwNTAwMDQzMCcsICdoZXgnKVxufVxuZXhwb3J0c1snUlNBLVNIQTUxMiddID0gZXhwb3J0cy5zaGE1MTJXaXRoUlNBRW5jcnlwdGlvbiA9IHtcbiAgc2lnbjogJ3JzYScsXG4gIGhhc2g6ICdzaGE1MTInLFxuICBpZDogbmV3IEJ1ZmZlcignMzA1MTMwMGQwNjA5NjA4NjQ4MDE2NTAzMDQwMjAzMDUwMDA0NDAnLCAnaGV4Jylcbn1cbmV4cG9ydHNbJ1JTQS1TSEExJ10gPSB7XG4gIHNpZ246ICdyc2EnLFxuICBoYXNoOiAnc2hhMScsXG4gIGlkOiBuZXcgQnVmZmVyKCczMDIxMzAwOTA2MDUyYjBlMDMwMjFhMDUwMDA0MTQnLCAnaGV4Jylcbn1cbmV4cG9ydHNbJ2VjZHNhLXdpdGgtU0hBMSddID0ge1xuICBzaWduOiAnZWNkc2EnLFxuICBoYXNoOiAnc2hhMScsXG4gIGlkOiBuZXcgQnVmZmVyKCcnLCAnaGV4Jylcbn1cbmV4cG9ydHMuRFNBID0gZXhwb3J0c1snRFNBLVNIQTEnXSA9IGV4cG9ydHNbJ0RTQS1TSEEnXSA9IHtcbiAgc2lnbjogJ2RzYScsXG4gIGhhc2g6ICdzaGExJyxcbiAgaWQ6IG5ldyBCdWZmZXIoJycsICdoZXgnKVxufVxuZXhwb3J0c1snRFNBLVNIQTIyNCddID0gZXhwb3J0c1snRFNBLVdJVEgtU0hBMjI0J10gPSB7XG4gIHNpZ246ICdkc2EnLFxuICBoYXNoOiAnc2hhMjI0JyxcbiAgaWQ6IG5ldyBCdWZmZXIoJycsICdoZXgnKVxufVxuZXhwb3J0c1snRFNBLVNIQTI1NiddID0gZXhwb3J0c1snRFNBLVdJVEgtU0hBMjU2J10gPSB7XG4gIHNpZ246ICdkc2EnLFxuICBoYXNoOiAnc2hhMjU2JyxcbiAgaWQ6IG5ldyBCdWZmZXIoJycsICdoZXgnKVxufVxuZXhwb3J0c1snRFNBLVNIQTM4NCddID0gZXhwb3J0c1snRFNBLVdJVEgtU0hBMzg0J10gPSB7XG4gIHNpZ246ICdkc2EnLFxuICBoYXNoOiAnc2hhMzg0JyxcbiAgaWQ6IG5ldyBCdWZmZXIoJycsICdoZXgnKVxufVxuZXhwb3J0c1snRFNBLVNIQTUxMiddID0gZXhwb3J0c1snRFNBLVdJVEgtU0hBNTEyJ10gPSB7XG4gIHNpZ246ICdkc2EnLFxuICBoYXNoOiAnc2hhNTEyJyxcbiAgaWQ6IG5ldyBCdWZmZXIoJycsICdoZXgnKVxufVxuZXhwb3J0c1snRFNBLVJJUEVNRDE2MCddID0ge1xuICBzaWduOiAnZHNhJyxcbiAgaGFzaDogJ3JtZDE2MCcsXG4gIGlkOiBuZXcgQnVmZmVyKCcnLCAnaGV4Jylcbn1cbmV4cG9ydHNbJ1JTQS1SSVBFTUQxNjAnXSA9IGV4cG9ydHMucmlwZW1kMTYwV2l0aFJTQSA9IHtcbiAgc2lnbjogJ3JzYScsXG4gIGhhc2g6ICdybWQxNjAnLFxuICBpZDogbmV3IEJ1ZmZlcignMzAyMTMwMDkwNjA1MmIyNDAzMDIwMTA1MDAwNDE0JywgJ2hleCcpXG59XG5leHBvcnRzWydSU0EtTUQ1J10gPSBleHBvcnRzLm1kNVdpdGhSU0FFbmNyeXB0aW9uID0ge1xuICBzaWduOiAncnNhJyxcbiAgaGFzaDogJ21kNScsXG4gIGlkOiBuZXcgQnVmZmVyKCczMDIwMzAwYzA2MDgyYTg2NDg4NmY3MGQwMjA1MDUwMDA0MTAnLCAnaGV4Jylcbn1cbiJdfQ==
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/browser.js":[function(require,module,exports){
var ebtk = require('evp_bytestokey')
var aes = require('browserify-aes/browser')
var DES = require('browserify-des')
var desModes = require('browserify-des/modes')
var aesModes = require('browserify-aes/modes')
function createCipher (suite, password) {
  var keyLen, ivLen
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}
function createDecipher (suite, password) {
  var keyLen, ivLen
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    return aes.createCipheriv(suite, key, iv)
  } else if (desModes[suite]) {
    return new DES({
      key: key,
      iv: iv,
      mode: suite
    })
  } else {
    throw new TypeError('invalid suite type')
  }
}
function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    return aes.createDecipheriv(suite, key, iv)
  } else if (desModes[suite]) {
    return new DES({
      key: key,
      iv: iv,
      mode: suite,
      decrypt: true
    })
  } else {
    throw new TypeError('invalid suite type')
  }
}
exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}
exports.listCiphers = exports.getCiphers = getCiphers

},{"browserify-aes/browser":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/browser.js","browserify-aes/modes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes.js","browserify-des":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/index.js","browserify-des/modes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/modes.js","evp_bytestokey":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/evp_bytestokey/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/modes.js":[function(require,module,exports){
exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}

},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/index.js":[function(require,module,exports){
(function (Buffer){
var CipherBase = require('cipher-base')
var des = require('des.js')
var inherits = require('inherits')

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return new Buffer(this._des.update(data))
}
DES.prototype._final = function () {
  return new Buffer(this._des.final())
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktZGVzL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQ2lwaGVyQmFzZSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBkZXMgPSByZXF1aXJlKCdkZXMuanMnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG52YXIgbW9kZXMgPSB7XG4gICdkZXMtZWRlMy1jYmMnOiBkZXMuQ0JDLmluc3RhbnRpYXRlKGRlcy5FREUpLFxuICAnZGVzLWVkZTMnOiBkZXMuRURFLFxuICAnZGVzLWVkZS1jYmMnOiBkZXMuQ0JDLmluc3RhbnRpYXRlKGRlcy5FREUpLFxuICAnZGVzLWVkZSc6IGRlcy5FREUsXG4gICdkZXMtY2JjJzogZGVzLkNCQy5pbnN0YW50aWF0ZShkZXMuREVTKSxcbiAgJ2Rlcy1lY2InOiBkZXMuREVTXG59XG5tb2Rlcy5kZXMgPSBtb2Rlc1snZGVzLWNiYyddXG5tb2Rlcy5kZXMzID0gbW9kZXNbJ2Rlcy1lZGUzLWNiYyddXG5tb2R1bGUuZXhwb3J0cyA9IERFU1xuaW5oZXJpdHMoREVTLCBDaXBoZXJCYXNlKVxuZnVuY3Rpb24gREVTIChvcHRzKSB7XG4gIENpcGhlckJhc2UuY2FsbCh0aGlzKVxuICB2YXIgbW9kZU5hbWUgPSBvcHRzLm1vZGUudG9Mb3dlckNhc2UoKVxuICB2YXIgbW9kZSA9IG1vZGVzW21vZGVOYW1lXVxuICB2YXIgdHlwZVxuICBpZiAob3B0cy5kZWNyeXB0KSB7XG4gICAgdHlwZSA9ICdkZWNyeXB0J1xuICB9IGVsc2Uge1xuICAgIHR5cGUgPSAnZW5jcnlwdCdcbiAgfVxuICB2YXIga2V5ID0gb3B0cy5rZXlcbiAgaWYgKG1vZGVOYW1lID09PSAnZGVzLWVkZScgfHwgbW9kZU5hbWUgPT09ICdkZXMtZWRlLWNiYycpIHtcbiAgICBrZXkgPSBCdWZmZXIuY29uY2F0KFtrZXksIGtleS5zbGljZSgwLCA4KV0pXG4gIH1cbiAgdmFyIGl2ID0gb3B0cy5pdlxuICB0aGlzLl9kZXMgPSBtb2RlLmNyZWF0ZSh7XG4gICAga2V5OiBrZXksXG4gICAgaXY6IGl2LFxuICAgIHR5cGU6IHR5cGVcbiAgfSlcbn1cbkRFUy5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHJldHVybiBuZXcgQnVmZmVyKHRoaXMuX2Rlcy51cGRhdGUoZGF0YSkpXG59XG5ERVMucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBCdWZmZXIodGhpcy5fZGVzLmZpbmFsKCkpXG59XG4iXX0=
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","cipher-base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/cipher-base/index.js","des.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/lib/des.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/lib/des.js":[function(require,module,exports){
'use strict';

exports.utils = require('./des/utils');
exports.Cipher = require('./des/cipher');
exports.DES = require('./des/des');
exports.CBC = require('./des/cbc');
exports.EDE = require('./des/ede');

},{"./des/cbc":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/lib/des/cbc.js","./des/cipher":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/lib/des/cipher.js","./des/des":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/lib/des/des.js","./des/ede":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/lib/des/ede.js","./des/utils":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/lib/des/utils.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/lib/des/utils.js":[function(require,module,exports){
'use strict';

exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};

},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/lib/des/ede.js":[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var des = require('../des');
var Cipher = des.Cipher;
var DES = des.DES;

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

},{"../des":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/lib/des.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js","minimalistic-assert":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/node_modules/minimalistic-assert/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/lib/des/des.js":[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var des = require('../des');
var utils = des.utils;
var Cipher = des.Cipher;

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};

},{"../des":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/lib/des.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js","minimalistic-assert":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/node_modules/minimalistic-assert/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/lib/des/cipher.js":[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};

},{"minimalistic-assert":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/node_modules/minimalistic-assert/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/lib/des/cbc.js":[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};

},{"inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js","minimalistic-assert":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/node_modules/minimalistic-assert/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/node_modules/minimalistic-assert/index.js":[function(require,module,exports){
module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/cipher-base/index.js":[function(require,module,exports){
(function (Buffer){
var Transform = require('stream').Transform
var inherits = require('inherits')
var StringDecoder = require('string_decoder').StringDecoder
module.exports = CipherBase
inherits(CipherBase, Transform)
function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  this._decoder = null
  this._encoding = null
}
CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = new Buffer(data, inputEnc)
  }
  var outData = this._update(data)
  if (this.hashMode) {
    return this
  }
  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }
  return outData
}

CipherBase.prototype.setAutoPadding = function () {}

CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this._final())
  } catch (e) {
    err = e
  } finally {
    done(err)
  }
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this._final() || new Buffer('')
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, final) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }
  if (this._encoding !== enc) {
    throw new Error('can\'t switch encodings')
  }
  var out = this._decoder.write(value)
  if (final) {
    out += this._decoder.end()
  }
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktZGVzL25vZGVfbW9kdWxlcy9jaXBoZXItYmFzZS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdzdHJlYW0nKS5UcmFuc2Zvcm1cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXInKS5TdHJpbmdEZWNvZGVyXG5tb2R1bGUuZXhwb3J0cyA9IENpcGhlckJhc2VcbmluaGVyaXRzKENpcGhlckJhc2UsIFRyYW5zZm9ybSlcbmZ1bmN0aW9uIENpcGhlckJhc2UgKGhhc2hNb2RlKSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuaGFzaE1vZGUgPSB0eXBlb2YgaGFzaE1vZGUgPT09ICdzdHJpbmcnXG4gIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgdGhpc1toYXNoTW9kZV0gPSB0aGlzLl9maW5hbE9yRGlnZXN0XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5maW5hbCA9IHRoaXMuX2ZpbmFsT3JEaWdlc3RcbiAgfVxuICB0aGlzLl9kZWNvZGVyID0gbnVsbFxuICB0aGlzLl9lbmNvZGluZyA9IG51bGxcbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBpbnB1dEVuYywgb3V0cHV0RW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBkYXRhID0gbmV3IEJ1ZmZlcihkYXRhLCBpbnB1dEVuYylcbiAgfVxuICB2YXIgb3V0RGF0YSA9IHRoaXMuX3VwZGF0ZShkYXRhKVxuICBpZiAodGhpcy5oYXNoTW9kZSkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cbiAgaWYgKG91dHB1dEVuYykge1xuICAgIG91dERhdGEgPSB0aGlzLl90b1N0cmluZyhvdXREYXRhLCBvdXRwdXRFbmMpXG4gIH1cbiAgcmV0dXJuIG91dERhdGFcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QXV0b1BhZGRpbmcgPSBmdW5jdGlvbiAoKSB7fVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5nZXRBdXRoVGFnID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBnZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBdXRoVGFnID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBzZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBQUQgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhYWQgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGRhdGEsIF8sIG5leHQpIHtcbiAgdmFyIGVyclxuICB0cnkge1xuICAgIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgICB0aGlzLl91cGRhdGUoZGF0YSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXNoKHRoaXMuX3VwZGF0ZShkYXRhKSlcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnIgPSBlXG4gIH0gZmluYWxseSB7XG4gICAgbmV4dChlcnIpXG4gIH1cbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLl9mbHVzaCA9IGZ1bmN0aW9uIChkb25lKSB7XG4gIHZhciBlcnJcbiAgdHJ5IHtcbiAgICB0aGlzLnB1c2godGhpcy5fZmluYWwoKSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfSBmaW5hbGx5IHtcbiAgICBkb25lKGVycilcbiAgfVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZpbmFsT3JEaWdlc3QgPSBmdW5jdGlvbiAob3V0cHV0RW5jKSB7XG4gIHZhciBvdXREYXRhID0gdGhpcy5fZmluYWwoKSB8fCBuZXcgQnVmZmVyKCcnKVxuICBpZiAob3V0cHV0RW5jKSB7XG4gICAgb3V0RGF0YSA9IHRoaXMuX3RvU3RyaW5nKG91dERhdGEsIG91dHB1dEVuYywgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb3V0RGF0YVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fdG9TdHJpbmcgPSBmdW5jdGlvbiAodmFsdWUsIGVuYywgZmluYWwpIHtcbiAgaWYgKCF0aGlzLl9kZWNvZGVyKSB7XG4gICAgdGhpcy5fZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYylcbiAgICB0aGlzLl9lbmNvZGluZyA9IGVuY1xuICB9XG4gIGlmICh0aGlzLl9lbmNvZGluZyAhPT0gZW5jKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYW5cXCd0IHN3aXRjaCBlbmNvZGluZ3MnKVxuICB9XG4gIHZhciBvdXQgPSB0aGlzLl9kZWNvZGVyLndyaXRlKHZhbHVlKVxuICBpZiAoZmluYWwpIHtcbiAgICBvdXQgKz0gdGhpcy5fZGVjb2Rlci5lbmQoKVxuICB9XG4gIHJldHVybiBvdXRcbn1cbiJdfQ==
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js","stream":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/stream-browserify/index.js","string_decoder":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/string_decoder/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/browser.js":[function(require,module,exports){
var ciphers = require('./encrypter')
exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
var deciphers = require('./decrypter')
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
var modes = require('./modes')
function getCiphers () {
  return Object.keys(modes)
}
exports.listCiphers = exports.getCiphers = getCiphers

},{"./decrypter":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/decrypter.js","./encrypter":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/encrypter.js","./modes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/encrypter.js":[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')
var modes = require('./modes')
var ebtk = require('evp_bytestokey')
var StreamCipher = require('./streamCipher')
var AuthCipher = require('./authCipher')
inherits(Cipher, Transform)
function Cipher (mode, key, iv) {
  if (!(this instanceof Cipher)) {
    return new Cipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  } else if (chunk.toString('hex') !== '10101010101010101010101010101010') {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}
Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
}

function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}
Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = new Buffer(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }
  var out = Buffer.concat([this.cache, padBuff])
  return out
}
var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
}

function createCipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv)
  }
  return new Cipher(modelist[config.mode], password, iv)
}
function createCipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2VuY3J5cHRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgbW9kZXMgPSByZXF1aXJlKCcuL21vZGVzJylcbnZhciBlYnRrID0gcmVxdWlyZSgnZXZwX2J5dGVzdG9rZXknKVxudmFyIFN0cmVhbUNpcGhlciA9IHJlcXVpcmUoJy4vc3RyZWFtQ2lwaGVyJylcbnZhciBBdXRoQ2lwaGVyID0gcmVxdWlyZSgnLi9hdXRoQ2lwaGVyJylcbmluaGVyaXRzKENpcGhlciwgVHJhbnNmb3JtKVxuZnVuY3Rpb24gQ2lwaGVyIChtb2RlLCBrZXksIGl2KSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBDaXBoZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBDaXBoZXIobW9kZSwga2V5LCBpdilcbiAgfVxuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuICB0aGlzLl9jYWNoZSA9IG5ldyBTcGxpdHRlcigpXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IG5ldyBCdWZmZXIoaXYubGVuZ3RoKVxuICBpdi5jb3B5KHRoaXMuX3ByZXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gdHJ1ZVxufVxuQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG4gIHdoaWxlICgoY2h1bmsgPSB0aGlzLl9jYWNoZS5nZXQoKSkpIHtcbiAgICB0aGluZyA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgICBvdXQucHVzaCh0aGluZylcbiAgfVxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChvdXQpXG59XG5DaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNodW5rID0gdGhpcy5fY2FjaGUuZmx1c2goKVxuICBpZiAodGhpcy5fYXV0b3BhZGRpbmcpIHtcbiAgICBjaHVuayA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgICB0aGlzLl9jaXBoZXIuc2NydWIoKVxuICAgIHJldHVybiBjaHVua1xuICB9IGVsc2UgaWYgKGNodW5rLnRvU3RyaW5nKCdoZXgnKSAhPT0gJzEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwJykge1xuICAgIHRoaXMuX2NpcGhlci5zY3J1YigpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdkYXRhIG5vdCBtdWx0aXBsZSBvZiBibG9jayBsZW5ndGgnKVxuICB9XG59XG5DaXBoZXIucHJvdG90eXBlLnNldEF1dG9QYWRkaW5nID0gZnVuY3Rpb24gKHNldFRvKSB7XG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gISFzZXRUb1xufVxuXG5mdW5jdGlvbiBTcGxpdHRlciAoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTcGxpdHRlcikpIHtcbiAgICByZXR1cm4gbmV3IFNwbGl0dGVyKClcbiAgfVxuICB0aGlzLmNhY2hlID0gbmV3IEJ1ZmZlcignJylcbn1cblNwbGl0dGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgZGF0YV0pXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+IDE1KSB7XG4gICAgdmFyIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgcmV0dXJuIG91dFxuICB9XG4gIHJldHVybiBudWxsXG59XG5TcGxpdHRlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsZW4gPSAxNiAtIHRoaXMuY2FjaGUubGVuZ3RoXG4gIHZhciBwYWRCdWZmID0gbmV3IEJ1ZmZlcihsZW4pXG5cbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgcGFkQnVmZi53cml0ZVVJbnQ4KGxlbiwgaSlcbiAgfVxuICB2YXIgb3V0ID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgcGFkQnVmZl0pXG4gIHJldHVybiBvdXRcbn1cbnZhciBtb2RlbGlzdCA9IHtcbiAgRUNCOiByZXF1aXJlKCcuL21vZGVzL2VjYicpLFxuICBDQkM6IHJlcXVpcmUoJy4vbW9kZXMvY2JjJyksXG4gIENGQjogcmVxdWlyZSgnLi9tb2Rlcy9jZmInKSxcbiAgQ0ZCODogcmVxdWlyZSgnLi9tb2Rlcy9jZmI4JyksXG4gIENGQjE6IHJlcXVpcmUoJy4vbW9kZXMvY2ZiMScpLFxuICBPRkI6IHJlcXVpcmUoJy4vbW9kZXMvb2ZiJyksXG4gIENUUjogcmVxdWlyZSgnLi9tb2Rlcy9jdHInKSxcbiAgR0NNOiByZXF1aXJlKCcuL21vZGVzL2N0cicpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlcml2IChzdWl0ZSwgcGFzc3dvcmQsIGl2KSB7XG4gIHZhciBjb25maWcgPSBtb2Rlc1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbiAgaWYgKHR5cGVvZiBpdiA9PT0gJ3N0cmluZycpIHtcbiAgICBpdiA9IG5ldyBCdWZmZXIoaXYpXG4gIH1cbiAgaWYgKHR5cGVvZiBwYXNzd29yZCA9PT0gJ3N0cmluZycpIHtcbiAgICBwYXNzd29yZCA9IG5ldyBCdWZmZXIocGFzc3dvcmQpXG4gIH1cbiAgaWYgKHBhc3N3b3JkLmxlbmd0aCAhPT0gY29uZmlnLmtleSAvIDgpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGtleSBsZW5ndGggJyArIHBhc3N3b3JkLmxlbmd0aClcbiAgfVxuICBpZiAoaXYubGVuZ3RoICE9PSBjb25maWcuaXYpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGl2IGxlbmd0aCAnICsgaXYubGVuZ3RoKVxuICB9XG4gIGlmIChjb25maWcudHlwZSA9PT0gJ3N0cmVhbScpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihtb2RlbGlzdFtjb25maWcubW9kZV0sIHBhc3N3b3JkLCBpdilcbiAgfSBlbHNlIGlmIChjb25maWcudHlwZSA9PT0gJ2F1dGgnKSB7XG4gICAgcmV0dXJuIG5ldyBBdXRoQ2lwaGVyKG1vZGVsaXN0W2NvbmZpZy5tb2RlXSwgcGFzc3dvcmQsIGl2KVxuICB9XG4gIHJldHVybiBuZXcgQ2lwaGVyKG1vZGVsaXN0W2NvbmZpZy5tb2RlXSwgcGFzc3dvcmQsIGl2KVxufVxuZnVuY3Rpb24gY3JlYXRlQ2lwaGVyIChzdWl0ZSwgcGFzc3dvcmQpIHtcbiAgdmFyIGNvbmZpZyA9IG1vZGVzW3N1aXRlLnRvTG93ZXJDYXNlKCldXG4gIGlmICghY29uZmlnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcbiAgfVxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBjb25maWcua2V5LCBjb25maWcuaXYpXG4gIHJldHVybiBjcmVhdGVDaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5cbmV4cG9ydHMuY3JlYXRlQ2lwaGVyaXYgPSBjcmVhdGVDaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVDaXBoZXIgPSBjcmVhdGVDaXBoZXJcbiJdfQ==
},{"./aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/aes.js","./authCipher":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/authCipher.js","./modes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes.js","./modes/cbc":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/cbc.js","./modes/cfb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/cfb.js","./modes/cfb1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/cfb1.js","./modes/cfb8":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/cfb8.js","./modes/ctr":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/ctr.js","./modes/ecb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/ecb.js","./modes/ofb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/ofb.js","./streamCipher":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/streamCipher.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","cipher-base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/node_modules/cipher-base/index.js","evp_bytestokey":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/evp_bytestokey/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/decrypter.js":[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')
var modes = require('./modes')
var StreamCipher = require('./streamCipher')
var AuthCipher = require('./authCipher')
var ebtk = require('evp_bytestokey')

inherits(Decipher, Transform)
function Decipher (mode, key, iv) {
  if (!(this instanceof Decipher)) {
    return new Decipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}
Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
}
function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }
  return null
}
Splitter.prototype.flush = function () {
  if (this.cache.length) {
    return this.cache
  }
}
function unpad (last) {
  var padded = last[15]
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) {
    return
  }
  return last.slice(0, 16 - padded)
}

var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
}

function createDecipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv, true)
  }
  return new Decipher(modelist[config.mode], password, iv)
}

function createDecipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}
exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2RlY3J5cHRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgbW9kZXMgPSByZXF1aXJlKCcuL21vZGVzJylcbnZhciBTdHJlYW1DaXBoZXIgPSByZXF1aXJlKCcuL3N0cmVhbUNpcGhlcicpXG52YXIgQXV0aENpcGhlciA9IHJlcXVpcmUoJy4vYXV0aENpcGhlcicpXG52YXIgZWJ0ayA9IHJlcXVpcmUoJ2V2cF9ieXRlc3Rva2V5JylcblxuaW5oZXJpdHMoRGVjaXBoZXIsIFRyYW5zZm9ybSlcbmZ1bmN0aW9uIERlY2lwaGVyIChtb2RlLCBrZXksIGl2KSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEZWNpcGhlcikpIHtcbiAgICByZXR1cm4gbmV3IERlY2lwaGVyKG1vZGUsIGtleSwgaXYpXG4gIH1cbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5fY2FjaGUgPSBuZXcgU3BsaXR0ZXIoKVxuICB0aGlzLl9sYXN0ID0gdm9pZCAwXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IG5ldyBCdWZmZXIoaXYubGVuZ3RoKVxuICBpdi5jb3B5KHRoaXMuX3ByZXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gdHJ1ZVxufVxuRGVjaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLl9jYWNoZS5hZGQoZGF0YSlcbiAgdmFyIGNodW5rXG4gIHZhciB0aGluZ1xuICB2YXIgb3V0ID0gW11cbiAgd2hpbGUgKChjaHVuayA9IHRoaXMuX2NhY2hlLmdldCh0aGlzLl9hdXRvcGFkZGluZykpKSB7XG4gICAgdGhpbmcgPSB0aGlzLl9tb2RlLmRlY3J5cHQodGhpcywgY2h1bmspXG4gICAgb3V0LnB1c2godGhpbmcpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQob3V0KVxufVxuRGVjaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNodW5rID0gdGhpcy5fY2FjaGUuZmx1c2goKVxuICBpZiAodGhpcy5fYXV0b3BhZGRpbmcpIHtcbiAgICByZXR1cm4gdW5wYWQodGhpcy5fbW9kZS5kZWNyeXB0KHRoaXMsIGNodW5rKSlcbiAgfSBlbHNlIGlmIChjaHVuaykge1xuICAgIHRocm93IG5ldyBFcnJvcignZGF0YSBub3QgbXVsdGlwbGUgb2YgYmxvY2sgbGVuZ3RoJylcbiAgfVxufVxuRGVjaXBoZXIucHJvdG90eXBlLnNldEF1dG9QYWRkaW5nID0gZnVuY3Rpb24gKHNldFRvKSB7XG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gISFzZXRUb1xufVxuZnVuY3Rpb24gU3BsaXR0ZXIgKCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU3BsaXR0ZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBTcGxpdHRlcigpXG4gIH1cbiAgdGhpcy5jYWNoZSA9IG5ldyBCdWZmZXIoJycpXG59XG5TcGxpdHRlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIGRhdGFdKVxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGF1dG9QYWRkaW5nKSB7XG4gIHZhciBvdXRcbiAgaWYgKGF1dG9QYWRkaW5nKSB7XG4gICAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoID4gMTYpIHtcbiAgICAgIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICAgIHJldHVybiBvdXRcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoID49IDE2KSB7XG4gICAgICBvdXQgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgICByZXR1cm4gb3V0XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsXG59XG5TcGxpdHRlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNhY2hlLmxlbmd0aCkge1xuICAgIHJldHVybiB0aGlzLmNhY2hlXG4gIH1cbn1cbmZ1bmN0aW9uIHVucGFkIChsYXN0KSB7XG4gIHZhciBwYWRkZWQgPSBsYXN0WzE1XVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBwYWRkZWQpIHtcbiAgICBpZiAobGFzdFsoaSArICgxNiAtIHBhZGRlZCkpXSAhPT0gcGFkZGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byBkZWNyeXB0IGRhdGEnKVxuICAgIH1cbiAgfVxuICBpZiAocGFkZGVkID09PSAxNikge1xuICAgIHJldHVyblxuICB9XG4gIHJldHVybiBsYXN0LnNsaWNlKDAsIDE2IC0gcGFkZGVkKVxufVxuXG52YXIgbW9kZWxpc3QgPSB7XG4gIEVDQjogcmVxdWlyZSgnLi9tb2Rlcy9lY2InKSxcbiAgQ0JDOiByZXF1aXJlKCcuL21vZGVzL2NiYycpLFxuICBDRkI6IHJlcXVpcmUoJy4vbW9kZXMvY2ZiJyksXG4gIENGQjg6IHJlcXVpcmUoJy4vbW9kZXMvY2ZiOCcpLFxuICBDRkIxOiByZXF1aXJlKCcuL21vZGVzL2NmYjEnKSxcbiAgT0ZCOiByZXF1aXJlKCcuL21vZGVzL29mYicpLFxuICBDVFI6IHJlcXVpcmUoJy4vbW9kZXMvY3RyJyksXG4gIEdDTTogcmVxdWlyZSgnLi9tb2Rlcy9jdHInKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWNpcGhlcml2IChzdWl0ZSwgcGFzc3dvcmQsIGl2KSB7XG4gIHZhciBjb25maWcgPSBtb2Rlc1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbiAgaWYgKHR5cGVvZiBpdiA9PT0gJ3N0cmluZycpIHtcbiAgICBpdiA9IG5ldyBCdWZmZXIoaXYpXG4gIH1cbiAgaWYgKHR5cGVvZiBwYXNzd29yZCA9PT0gJ3N0cmluZycpIHtcbiAgICBwYXNzd29yZCA9IG5ldyBCdWZmZXIocGFzc3dvcmQpXG4gIH1cbiAgaWYgKHBhc3N3b3JkLmxlbmd0aCAhPT0gY29uZmlnLmtleSAvIDgpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGtleSBsZW5ndGggJyArIHBhc3N3b3JkLmxlbmd0aClcbiAgfVxuICBpZiAoaXYubGVuZ3RoICE9PSBjb25maWcuaXYpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGl2IGxlbmd0aCAnICsgaXYubGVuZ3RoKVxuICB9XG4gIGlmIChjb25maWcudHlwZSA9PT0gJ3N0cmVhbScpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihtb2RlbGlzdFtjb25maWcubW9kZV0sIHBhc3N3b3JkLCBpdiwgdHJ1ZSlcbiAgfSBlbHNlIGlmIChjb25maWcudHlwZSA9PT0gJ2F1dGgnKSB7XG4gICAgcmV0dXJuIG5ldyBBdXRoQ2lwaGVyKG1vZGVsaXN0W2NvbmZpZy5tb2RlXSwgcGFzc3dvcmQsIGl2LCB0cnVlKVxuICB9XG4gIHJldHVybiBuZXcgRGVjaXBoZXIobW9kZWxpc3RbY29uZmlnLm1vZGVdLCBwYXNzd29yZCwgaXYpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURlY2lwaGVyIChzdWl0ZSwgcGFzc3dvcmQpIHtcbiAgdmFyIGNvbmZpZyA9IG1vZGVzW3N1aXRlLnRvTG93ZXJDYXNlKCldXG4gIGlmICghY29uZmlnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcbiAgfVxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBjb25maWcua2V5LCBjb25maWcuaXYpXG4gIHJldHVybiBjcmVhdGVEZWNpcGhlcml2KHN1aXRlLCBrZXlzLmtleSwga2V5cy5pdilcbn1cbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXIgPSBjcmVhdGVEZWNpcGhlclxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlcml2ID0gY3JlYXRlRGVjaXBoZXJpdlxuIl19
},{"./aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/aes.js","./authCipher":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/authCipher.js","./modes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes.js","./modes/cbc":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/cbc.js","./modes/cfb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/cfb.js","./modes/cfb1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/cfb1.js","./modes/cfb8":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/cfb8.js","./modes/ctr":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/ctr.js","./modes/ecb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/ecb.js","./modes/ofb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/ofb.js","./streamCipher":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/streamCipher.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","cipher-base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/node_modules/cipher-base/index.js","evp_bytestokey":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/evp_bytestokey/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/evp_bytestokey/index.js":[function(require,module,exports){
(function (Buffer){
var md5 = require('create-hash/md5')
module.exports = EVP_BytesToKey
function EVP_BytesToKey (password, salt, keyLen, ivLen) {
  if (!Buffer.isBuffer(password)) {
    password = new Buffer(password, 'binary')
  }
  if (salt && !Buffer.isBuffer(salt)) {
    salt = new Buffer(salt, 'binary')
  }
  keyLen = keyLen / 8
  ivLen = ivLen || 0
  var ki = 0
  var ii = 0
  var key = new Buffer(keyLen)
  var iv = new Buffer(ivLen)
  var addmd = 0
  var md_buf
  var i
  var bufs = []
  while (true) {
    if (addmd++ > 0) {
      bufs.push(md_buf)
    }
    bufs.push(password)
    if (salt) {
      bufs.push(salt)
    }
    md_buf = md5(Buffer.concat(bufs))
    bufs = []
    i = 0
    if (keyLen > 0) {
      while (true) {
        if (keyLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        key[ki++] = md_buf[i]
        keyLen--
        i++
      }
    }
    if (ivLen > 0 && i !== md_buf.length) {
      while (true) {
        if (ivLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        iv[ii++] = md_buf[i]
        ivLen--
        i++
      }
    }
    if (keyLen === 0 && ivLen === 0) {
      break
    }
  }
  for (i = 0; i < md_buf.length; i++) {
    md_buf[i] = 0
  }
  return {
    key: key,
    iv: iv
  }
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2V2cF9ieXRlc3Rva2V5L2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBtZDUgPSByZXF1aXJlKCdjcmVhdGUtaGFzaC9tZDUnKVxubW9kdWxlLmV4cG9ydHMgPSBFVlBfQnl0ZXNUb0tleVxuZnVuY3Rpb24gRVZQX0J5dGVzVG9LZXkgKHBhc3N3b3JkLCBzYWx0LCBrZXlMZW4sIGl2TGVuKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHBhc3N3b3JkKSkge1xuICAgIHBhc3N3b3JkID0gbmV3IEJ1ZmZlcihwYXNzd29yZCwgJ2JpbmFyeScpXG4gIH1cbiAgaWYgKHNhbHQgJiYgIUJ1ZmZlci5pc0J1ZmZlcihzYWx0KSkge1xuICAgIHNhbHQgPSBuZXcgQnVmZmVyKHNhbHQsICdiaW5hcnknKVxuICB9XG4gIGtleUxlbiA9IGtleUxlbiAvIDhcbiAgaXZMZW4gPSBpdkxlbiB8fCAwXG4gIHZhciBraSA9IDBcbiAgdmFyIGlpID0gMFxuICB2YXIga2V5ID0gbmV3IEJ1ZmZlcihrZXlMZW4pXG4gIHZhciBpdiA9IG5ldyBCdWZmZXIoaXZMZW4pXG4gIHZhciBhZGRtZCA9IDBcbiAgdmFyIG1kX2J1ZlxuICB2YXIgaVxuICB2YXIgYnVmcyA9IFtdXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgaWYgKGFkZG1kKysgPiAwKSB7XG4gICAgICBidWZzLnB1c2gobWRfYnVmKVxuICAgIH1cbiAgICBidWZzLnB1c2gocGFzc3dvcmQpXG4gICAgaWYgKHNhbHQpIHtcbiAgICAgIGJ1ZnMucHVzaChzYWx0KVxuICAgIH1cbiAgICBtZF9idWYgPSBtZDUoQnVmZmVyLmNvbmNhdChidWZzKSlcbiAgICBidWZzID0gW11cbiAgICBpID0gMFxuICAgIGlmIChrZXlMZW4gPiAwKSB7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBpZiAoa2V5TGVuID09PSAwKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaSA9PT0gbWRfYnVmLmxlbmd0aCkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAga2V5W2tpKytdID0gbWRfYnVmW2ldXG4gICAgICAgIGtleUxlbi0tXG4gICAgICAgIGkrK1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXZMZW4gPiAwICYmIGkgIT09IG1kX2J1Zi5sZW5ndGgpIHtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGlmIChpdkxlbiA9PT0gMCkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPT09IG1kX2J1Zi5sZW5ndGgpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGl2W2lpKytdID0gbWRfYnVmW2ldXG4gICAgICAgIGl2TGVuLS1cbiAgICAgICAgaSsrXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChrZXlMZW4gPT09IDAgJiYgaXZMZW4gPT09IDApIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIGZvciAoaSA9IDA7IGkgPCBtZF9idWYubGVuZ3RoOyBpKyspIHtcbiAgICBtZF9idWZbaV0gPSAwXG4gIH1cbiAgcmV0dXJuIHtcbiAgICBrZXk6IGtleSxcbiAgICBpdjogaXZcbiAgfVxufVxuIl19
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","create-hash/md5":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/md5.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/md5.js":[function(require,module,exports){
'use strict';
/*
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

var helpers = require('./helpers');

/*
 * Calculate the MD5 of an array of little-endian words, and a bit length
 */
function core_md5(x, len)
{
  /* append padding */
  x[len >> 5] |= 0x80 << ((len) % 32);
  x[(((len + 64) >>> 9) << 4) + 14] = len;

  var a =  1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d =  271733878;

  for(var i = 0; i < x.length; i += 16)
  {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;

    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
  }
  return Array(a, b, c, d);

}

/*
 * These functions implement the four basic operations the algorithm uses.
 */
function md5_cmn(q, a, b, x, s, t)
{
  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
}
function md5_ff(a, b, c, d, x, s, t)
{
  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
}
function md5_gg(a, b, c, d, x, s, t)
{
  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
}
function md5_hh(a, b, c, d, x, s, t)
{
  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5_ii(a, b, c, d, x, s, t)
{
  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add(x, y)
{
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return (msw << 16) | (lsw & 0xFFFF);
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function bit_rol(num, cnt)
{
  return (num << cnt) | (num >>> (32 - cnt));
}

module.exports = function md5(buf) {
  return helpers.hash(buf, core_md5, 16);
};
},{"./helpers":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/helpers.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/helpers.js":[function(require,module,exports){
(function (Buffer){
'use strict';
var intSize = 4;
var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
var chrsz = 8;

function toArray(buf, bigEndian) {
  if ((buf.length % intSize) !== 0) {
    var len = buf.length + (intSize - (buf.length % intSize));
    buf = Buffer.concat([buf, zeroBuffer], len);
  }

  var arr = [];
  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
  for (var i = 0; i < buf.length; i += intSize) {
    arr.push(fn.call(buf, i));
  }
  return arr;
}

function toBuffer(arr, size, bigEndian) {
  var buf = new Buffer(size);
  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
  for (var i = 0; i < arr.length; i++) {
    fn.call(buf, arr[i], i * 4, true);
  }
  return buf;
}

function hash(buf, fn, hashSize, bigEndian) {
  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
  return toBuffer(arr, hashSize, bigEndian);
}
exports.hash = hash;
}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvaGVscGVycy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBpbnRTaXplID0gNDtcbnZhciB6ZXJvQnVmZmVyID0gbmV3IEJ1ZmZlcihpbnRTaXplKTsgemVyb0J1ZmZlci5maWxsKDApO1xudmFyIGNocnN6ID0gODtcblxuZnVuY3Rpb24gdG9BcnJheShidWYsIGJpZ0VuZGlhbikge1xuICBpZiAoKGJ1Zi5sZW5ndGggJSBpbnRTaXplKSAhPT0gMCkge1xuICAgIHZhciBsZW4gPSBidWYubGVuZ3RoICsgKGludFNpemUgLSAoYnVmLmxlbmd0aCAlIGludFNpemUpKTtcbiAgICBidWYgPSBCdWZmZXIuY29uY2F0KFtidWYsIHplcm9CdWZmZXJdLCBsZW4pO1xuICB9XG5cbiAgdmFyIGFyciA9IFtdO1xuICB2YXIgZm4gPSBiaWdFbmRpYW4gPyBidWYucmVhZEludDMyQkUgOiBidWYucmVhZEludDMyTEU7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnVmLmxlbmd0aDsgaSArPSBpbnRTaXplKSB7XG4gICAgYXJyLnB1c2goZm4uY2FsbChidWYsIGkpKTtcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiB0b0J1ZmZlcihhcnIsIHNpemUsIGJpZ0VuZGlhbikge1xuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcihzaXplKTtcbiAgdmFyIGZuID0gYmlnRW5kaWFuID8gYnVmLndyaXRlSW50MzJCRSA6IGJ1Zi53cml0ZUludDMyTEU7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgZm4uY2FsbChidWYsIGFycltpXSwgaSAqIDQsIHRydWUpO1xuICB9XG4gIHJldHVybiBidWY7XG59XG5cbmZ1bmN0aW9uIGhhc2goYnVmLCBmbiwgaGFzaFNpemUsIGJpZ0VuZGlhbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSBidWYgPSBuZXcgQnVmZmVyKGJ1Zik7XG4gIHZhciBhcnIgPSBmbih0b0FycmF5KGJ1ZiwgYmlnRW5kaWFuKSwgYnVmLmxlbmd0aCAqIGNocnN6KTtcbiAgcmV0dXJuIHRvQnVmZmVyKGFyciwgaGFzaFNpemUsIGJpZ0VuZGlhbik7XG59XG5leHBvcnRzLmhhc2ggPSBoYXNoOyJdfQ==
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/streamCipher.js":[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')

inherits(StreamCipher, Transform)
module.exports = StreamCipher
function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  iv.copy(this._prev)
  this._mode = mode
}
StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}
StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL3N0cmVhbUNpcGhlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmluaGVyaXRzKFN0cmVhbUNpcGhlciwgVHJhbnNmb3JtKVxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW1DaXBoZXJcbmZ1bmN0aW9uIFN0cmVhbUNpcGhlciAobW9kZSwga2V5LCBpdiwgZGVjcnlwdCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU3RyZWFtQ2lwaGVyKSkge1xuICAgIHJldHVybiBuZXcgU3RyZWFtQ2lwaGVyKG1vZGUsIGtleSwgaXYpXG4gIH1cbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KVxuICB0aGlzLl9wcmV2ID0gbmV3IEJ1ZmZlcihpdi5sZW5ndGgpXG4gIHRoaXMuX2NhY2hlID0gbmV3IEJ1ZmZlcignJylcbiAgdGhpcy5fc2VjQ2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxuICB0aGlzLl9kZWNyeXB0ID0gZGVjcnlwdFxuICBpdi5jb3B5KHRoaXMuX3ByZXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgcmV0dXJuIHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaywgdGhpcy5fZGVjcnlwdClcbn1cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9jaXBoZXIuc2NydWIoKVxufVxuIl19
},{"./aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/aes.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","cipher-base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/node_modules/cipher-base/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/ofb.js":[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL29mYi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5mdW5jdGlvbiBnZXRCbG9jayAoc2VsZikge1xuICBzZWxmLl9wcmV2ID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICByZXR1cm4gc2VsZi5fcHJldlxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmspIHtcbiAgd2hpbGUgKHNlbGYuX2NhY2hlLmxlbmd0aCA8IGNodW5rLmxlbmd0aCkge1xuICAgIHNlbGYuX2NhY2hlID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fY2FjaGUsIGdldEJsb2NrKHNlbGYpXSlcbiAgfVxuXG4gIHZhciBwYWQgPSBzZWxmLl9jYWNoZS5zbGljZSgwLCBjaHVuay5sZW5ndGgpXG4gIHNlbGYuX2NhY2hlID0gc2VsZi5fY2FjaGUuc2xpY2UoY2h1bmsubGVuZ3RoKVxuICByZXR1cm4geG9yKGNodW5rLCBwYWQpXG59XG4iXX0=
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/node_modules/buffer-xor/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/ecb.js":[function(require,module,exports){
exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}
exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}

},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/ctr.js":[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}

function getBlock (self) {
  var out = self._cipher.encryptBlock(self._prev)
  incr32(self._prev)
  return out
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2N0ci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5mdW5jdGlvbiBpbmNyMzIgKGl2KSB7XG4gIHZhciBsZW4gPSBpdi5sZW5ndGhcbiAgdmFyIGl0ZW1cbiAgd2hpbGUgKGxlbi0tKSB7XG4gICAgaXRlbSA9IGl2LnJlYWRVSW50OChsZW4pXG4gICAgaWYgKGl0ZW0gPT09IDI1NSkge1xuICAgICAgaXYud3JpdGVVSW50OCgwLCBsZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZW0rK1xuICAgICAgaXYud3JpdGVVSW50OChpdGVtLCBsZW4pXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRCbG9jayAoc2VsZikge1xuICB2YXIgb3V0ID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICBpbmNyMzIoc2VsZi5fcHJldilcbiAgcmV0dXJuIG91dFxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmspIHtcbiAgd2hpbGUgKHNlbGYuX2NhY2hlLmxlbmd0aCA8IGNodW5rLmxlbmd0aCkge1xuICAgIHNlbGYuX2NhY2hlID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fY2FjaGUsIGdldEJsb2NrKHNlbGYpXSlcbiAgfVxuICB2YXIgcGFkID0gc2VsZi5fY2FjaGUuc2xpY2UoMCwgY2h1bmsubGVuZ3RoKVxuICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGNodW5rLmxlbmd0aClcbiAgcmV0dXJuIHhvcihjaHVuaywgcGFkKVxufVxuIl19
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/node_modules/buffer-xor/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/cfb8.js":[function(require,module,exports){
(function (Buffer){
function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam
  self._prev = Buffer.concat([self._prev.slice(1), new Buffer([decrypt ? byteParam : out])])
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NmYjguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBlbmNyeXB0Qnl0ZSAoc2VsZiwgYnl0ZVBhcmFtLCBkZWNyeXB0KSB7XG4gIHZhciBwYWQgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gIHZhciBvdXQgPSBwYWRbMF0gXiBieXRlUGFyYW1cbiAgc2VsZi5fcHJldiA9IEJ1ZmZlci5jb25jYXQoW3NlbGYuX3ByZXYuc2xpY2UoMSksIG5ldyBCdWZmZXIoW2RlY3J5cHQgPyBieXRlUGFyYW0gOiBvdXRdKV0pXG4gIHJldHVybiBvdXRcbn1cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaywgZGVjcnlwdCkge1xuICB2YXIgbGVuID0gY2h1bmsubGVuZ3RoXG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKGxlbilcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0W2ldID0gZW5jcnlwdEJ5dGUoc2VsZiwgY2h1bmtbaV0sIGRlY3J5cHQpXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuIl19
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/cfb1.js":[function(require,module,exports){
(function (Buffer){
function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}
function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = new Buffer(buffer.length)
  buffer = Buffer.concat([buffer, new Buffer([value])])
  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NmYjEuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGVuY3J5cHRCeXRlIChzZWxmLCBieXRlUGFyYW0sIGRlY3J5cHQpIHtcbiAgdmFyIHBhZFxuICB2YXIgaSA9IC0xXG4gIHZhciBsZW4gPSA4XG4gIHZhciBvdXQgPSAwXG4gIHZhciBiaXQsIHZhbHVlXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBwYWQgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gICAgYml0ID0gKGJ5dGVQYXJhbSAmICgxIDw8ICg3IC0gaSkpKSA/IDB4ODAgOiAwXG4gICAgdmFsdWUgPSBwYWRbMF0gXiBiaXRcbiAgICBvdXQgKz0gKCh2YWx1ZSAmIDB4ODApID4+IChpICUgOCkpXG4gICAgc2VsZi5fcHJldiA9IHNoaWZ0SW4oc2VsZi5fcHJldiwgZGVjcnlwdCA/IGJpdCA6IHZhbHVlKVxuICB9XG4gIHJldHVybiBvdXRcbn1cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaywgZGVjcnlwdCkge1xuICB2YXIgbGVuID0gY2h1bmsubGVuZ3RoXG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKGxlbilcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0W2ldID0gZW5jcnlwdEJ5dGUoc2VsZiwgY2h1bmtbaV0sIGRlY3J5cHQpXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuZnVuY3Rpb24gc2hpZnRJbiAoYnVmZmVyLCB2YWx1ZSkge1xuICB2YXIgbGVuID0gYnVmZmVyLmxlbmd0aFxuICB2YXIgaSA9IC0xXG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKGJ1ZmZlci5sZW5ndGgpXG4gIGJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoW2J1ZmZlciwgbmV3IEJ1ZmZlcihbdmFsdWVdKV0pXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBidWZmZXJbaV0gPDwgMSB8IGJ1ZmZlcltpICsgMV0gPj4gKDcpXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuIl19
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/cfb.js":[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

exports.encrypt = function (self, data, decrypt) {
  var out = new Buffer('')
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = new Buffer('')
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}
function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NmYi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgZGF0YSwgZGVjcnlwdCkge1xuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcignJylcbiAgdmFyIGxlblxuXG4gIHdoaWxlIChkYXRhLmxlbmd0aCkge1xuICAgIGlmIChzZWxmLl9jYWNoZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHNlbGYuX2NhY2hlID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICAgICAgc2VsZi5fcHJldiA9IG5ldyBCdWZmZXIoJycpXG4gICAgfVxuXG4gICAgaWYgKHNlbGYuX2NhY2hlLmxlbmd0aCA8PSBkYXRhLmxlbmd0aCkge1xuICAgICAgbGVuID0gc2VsZi5fY2FjaGUubGVuZ3RoXG4gICAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFtvdXQsIGVuY3J5cHRTdGFydChzZWxmLCBkYXRhLnNsaWNlKDAsIGxlbiksIGRlY3J5cHQpXSlcbiAgICAgIGRhdGEgPSBkYXRhLnNsaWNlKGxlbilcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ID0gQnVmZmVyLmNvbmNhdChbb3V0LCBlbmNyeXB0U3RhcnQoc2VsZiwgZGF0YSwgZGVjcnlwdCldKVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3V0XG59XG5mdW5jdGlvbiBlbmNyeXB0U3RhcnQgKHNlbGYsIGRhdGEsIGRlY3J5cHQpIHtcbiAgdmFyIGxlbiA9IGRhdGEubGVuZ3RoXG4gIHZhciBvdXQgPSB4b3IoZGF0YSwgc2VsZi5fY2FjaGUpXG4gIHNlbGYuX2NhY2hlID0gc2VsZi5fY2FjaGUuc2xpY2UobGVuKVxuICBzZWxmLl9wcmV2ID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fcHJldiwgZGVjcnlwdCA/IGRhdGEgOiBvdXRdKVxuICByZXR1cm4gb3V0XG59XG4iXX0=
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/node_modules/buffer-xor/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/cbc.js":[function(require,module,exports){
var xor = require('buffer-xor')

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}

},{"buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/node_modules/buffer-xor/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes.js":[function(require,module,exports){
exports['aes-128-ecb'] = {
  cipher: 'AES',
  key: 128,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-192-ecb'] = {
  cipher: 'AES',
  key: 192,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-256-ecb'] = {
  cipher: 'AES',
  key: 256,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-128-cbc'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes-192-cbc'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes-256-cbc'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes128'] = exports['aes-128-cbc']
exports['aes192'] = exports['aes-192-cbc']
exports['aes256'] = exports['aes-256-cbc']
exports['aes-128-cfb'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-192-cfb'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-256-cfb'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-128-cfb8'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-192-cfb8'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-256-cfb8'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-128-cfb1'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-192-cfb1'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-256-cfb1'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-128-ofb'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-192-ofb'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-256-ofb'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-128-ctr'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-192-ctr'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-256-ctr'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-128-gcm'] = {
  cipher: 'AES',
  key: 128,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}
exports['aes-192-gcm'] = {
  cipher: 'AES',
  key: 192,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}
exports['aes-256-gcm'] = {
  cipher: 'AES',
  key: 256,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}

},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/authCipher.js":[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')
var GHASH = require('./ghash')
var xor = require('buffer-xor')
inherits(StreamCipher, Transform)
module.exports = StreamCipher

function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._finID = Buffer.concat([iv, new Buffer([0, 0, 0, 1])])
  iv = Buffer.concat([iv, new Buffer([0, 0, 0, 2])])
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  iv.copy(this._prev)
  this._mode = mode
  var h = new Buffer(4)
  h.fill(0)
  this._ghash = new GHASH(this._cipher.encryptBlock(h))
  this._authTag = null
  this._called = false
}
StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = new Buffer(rump)
      rump.fill(0)
      this._ghash.update(rump)
    }
  }
  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}
StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) {
    throw new Error('Unsupported state or unable to authenticate data')
  }
  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt) {
    if (xorTest(tag, this._authTag)) {
      throw new Error('Unsupported state or unable to authenticate data')
    }
  } else {
    this._authTag = tag
  }
  this._cipher.scrub()
}
StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (!this._decrypt && Buffer.isBuffer(this._authTag)) {
    return this._authTag
  } else {
    throw new Error('Attempting to get auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (this._decrypt) {
    this._authTag = tag
  } else {
    throw new Error('Attempting to set auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (!this._called) {
    this._ghash.update(buf)
    this._alen += buf.length
  } else {
    throw new Error('Attempting to set AAD in unsupported state')
  }
}
function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) {
    out++
  }
  var len = Math.min(a.length, b.length)
  var i = -1
  while (++i < len) {
    out += (a[i] ^ b[i])
  }
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2F1dGhDaXBoZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEdIQVNIID0gcmVxdWlyZSgnLi9naGFzaCcpXG52YXIgeG9yID0gcmVxdWlyZSgnYnVmZmVyLXhvcicpXG5pbmhlcml0cyhTdHJlYW1DaXBoZXIsIFRyYW5zZm9ybSlcbm1vZHVsZS5leHBvcnRzID0gU3RyZWFtQ2lwaGVyXG5cbmZ1bmN0aW9uIFN0cmVhbUNpcGhlciAobW9kZSwga2V5LCBpdiwgZGVjcnlwdCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU3RyZWFtQ2lwaGVyKSkge1xuICAgIHJldHVybiBuZXcgU3RyZWFtQ2lwaGVyKG1vZGUsIGtleSwgaXYpXG4gIH1cbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5fZmluSUQgPSBCdWZmZXIuY29uY2F0KFtpdiwgbmV3IEJ1ZmZlcihbMCwgMCwgMCwgMV0pXSlcbiAgaXYgPSBCdWZmZXIuY29uY2F0KFtpdiwgbmV3IEJ1ZmZlcihbMCwgMCwgMCwgMl0pXSlcbiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KVxuICB0aGlzLl9wcmV2ID0gbmV3IEJ1ZmZlcihpdi5sZW5ndGgpXG4gIHRoaXMuX2NhY2hlID0gbmV3IEJ1ZmZlcignJylcbiAgdGhpcy5fc2VjQ2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxuICB0aGlzLl9kZWNyeXB0ID0gZGVjcnlwdFxuICB0aGlzLl9hbGVuID0gMFxuICB0aGlzLl9sZW4gPSAwXG4gIGl2LmNvcHkodGhpcy5fcHJldilcbiAgdGhpcy5fbW9kZSA9IG1vZGVcbiAgdmFyIGggPSBuZXcgQnVmZmVyKDQpXG4gIGguZmlsbCgwKVxuICB0aGlzLl9naGFzaCA9IG5ldyBHSEFTSCh0aGlzLl9jaXBoZXIuZW5jcnlwdEJsb2NrKGgpKVxuICB0aGlzLl9hdXRoVGFnID0gbnVsbFxuICB0aGlzLl9jYWxsZWQgPSBmYWxzZVxufVxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIGlmICghdGhpcy5fY2FsbGVkICYmIHRoaXMuX2FsZW4pIHtcbiAgICB2YXIgcnVtcCA9IDE2IC0gKHRoaXMuX2FsZW4gJSAxNilcbiAgICBpZiAocnVtcCA8IDE2KSB7XG4gICAgICBydW1wID0gbmV3IEJ1ZmZlcihydW1wKVxuICAgICAgcnVtcC5maWxsKDApXG4gICAgICB0aGlzLl9naGFzaC51cGRhdGUocnVtcClcbiAgICB9XG4gIH1cbiAgdGhpcy5fY2FsbGVkID0gdHJ1ZVxuICB2YXIgb3V0ID0gdGhpcy5fbW9kZS5lbmNyeXB0KHRoaXMsIGNodW5rKVxuICBpZiAodGhpcy5fZGVjcnlwdCkge1xuICAgIHRoaXMuX2doYXNoLnVwZGF0ZShjaHVuaylcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9naGFzaC51cGRhdGUob3V0KVxuICB9XG4gIHRoaXMuX2xlbiArPSBjaHVuay5sZW5ndGhcbiAgcmV0dXJuIG91dFxufVxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLl9kZWNyeXB0ICYmICF0aGlzLl9hdXRoVGFnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBzdGF0ZSBvciB1bmFibGUgdG8gYXV0aGVudGljYXRlIGRhdGEnKVxuICB9XG4gIHZhciB0YWcgPSB4b3IodGhpcy5fZ2hhc2guZmluYWwodGhpcy5fYWxlbiAqIDgsIHRoaXMuX2xlbiAqIDgpLCB0aGlzLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHRoaXMuX2ZpbklEKSlcbiAgaWYgKHRoaXMuX2RlY3J5cHQpIHtcbiAgICBpZiAoeG9yVGVzdCh0YWcsIHRoaXMuX2F1dGhUYWcpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHN0YXRlIG9yIHVuYWJsZSB0byBhdXRoZW50aWNhdGUgZGF0YScpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMuX2F1dGhUYWcgPSB0YWdcbiAgfVxuICB0aGlzLl9jaXBoZXIuc2NydWIoKVxufVxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5nZXRBdXRoVGFnID0gZnVuY3Rpb24gZ2V0QXV0aFRhZyAoKSB7XG4gIGlmICghdGhpcy5fZGVjcnlwdCAmJiBCdWZmZXIuaXNCdWZmZXIodGhpcy5fYXV0aFRhZykpIHtcbiAgICByZXR1cm4gdGhpcy5fYXV0aFRhZ1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGluZyB0byBnZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxuICB9XG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLnNldEF1dGhUYWcgPSBmdW5jdGlvbiBzZXRBdXRoVGFnICh0YWcpIHtcbiAgaWYgKHRoaXMuX2RlY3J5cHQpIHtcbiAgICB0aGlzLl9hdXRoVGFnID0gdGFnXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0aW5nIHRvIHNldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG4gIH1cbn1cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuc2V0QUFEID0gZnVuY3Rpb24gc2V0QUFEIChidWYpIHtcbiAgaWYgKCF0aGlzLl9jYWxsZWQpIHtcbiAgICB0aGlzLl9naGFzaC51cGRhdGUoYnVmKVxuICAgIHRoaXMuX2FsZW4gKz0gYnVmLmxlbmd0aFxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGluZyB0byBzZXQgQUFEIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbiAgfVxufVxuZnVuY3Rpb24geG9yVGVzdCAoYSwgYikge1xuICB2YXIgb3V0ID0gMFxuICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgb3V0KytcbiAgfVxuICB2YXIgbGVuID0gTWF0aC5taW4oYS5sZW5ndGgsIGIubGVuZ3RoKVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXQgKz0gKGFbaV0gXiBiW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cbiJdfQ==
},{"./aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/aes.js","./ghash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/ghash.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/node_modules/buffer-xor/index.js","cipher-base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/node_modules/cipher-base/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/node_modules/cipher-base/index.js":[function(require,module,exports){
(function (Buffer){
var Transform = require('stream').Transform
var inherits = require('inherits')
var StringDecoder = require('string_decoder').StringDecoder
module.exports = CipherBase
inherits(CipherBase, Transform)
function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  this._decoder = null
  this._encoding = null
}
CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = new Buffer(data, inputEnc)
  }
  var outData = this._update(data)
  if (this.hashMode) {
    return this
  }
  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }
  return outData
}

CipherBase.prototype.setAutoPadding = function () {}

CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this._final())
  } catch (e) {
    err = e
  } finally {
    done(err)
  }
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this._final() || new Buffer('')
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, final) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }
  if (this._encoding !== enc) {
    throw new Error('can\'t switch encodings')
  }
  var out = this._decoder.write(value)
  if (final) {
    out += this._decoder.end()
  }
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL25vZGVfbW9kdWxlcy9jaXBoZXItYmFzZS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdzdHJlYW0nKS5UcmFuc2Zvcm1cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXInKS5TdHJpbmdEZWNvZGVyXG5tb2R1bGUuZXhwb3J0cyA9IENpcGhlckJhc2VcbmluaGVyaXRzKENpcGhlckJhc2UsIFRyYW5zZm9ybSlcbmZ1bmN0aW9uIENpcGhlckJhc2UgKGhhc2hNb2RlKSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuaGFzaE1vZGUgPSB0eXBlb2YgaGFzaE1vZGUgPT09ICdzdHJpbmcnXG4gIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgdGhpc1toYXNoTW9kZV0gPSB0aGlzLl9maW5hbE9yRGlnZXN0XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5maW5hbCA9IHRoaXMuX2ZpbmFsT3JEaWdlc3RcbiAgfVxuICB0aGlzLl9kZWNvZGVyID0gbnVsbFxuICB0aGlzLl9lbmNvZGluZyA9IG51bGxcbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBpbnB1dEVuYywgb3V0cHV0RW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBkYXRhID0gbmV3IEJ1ZmZlcihkYXRhLCBpbnB1dEVuYylcbiAgfVxuICB2YXIgb3V0RGF0YSA9IHRoaXMuX3VwZGF0ZShkYXRhKVxuICBpZiAodGhpcy5oYXNoTW9kZSkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cbiAgaWYgKG91dHB1dEVuYykge1xuICAgIG91dERhdGEgPSB0aGlzLl90b1N0cmluZyhvdXREYXRhLCBvdXRwdXRFbmMpXG4gIH1cbiAgcmV0dXJuIG91dERhdGFcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QXV0b1BhZGRpbmcgPSBmdW5jdGlvbiAoKSB7fVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5nZXRBdXRoVGFnID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBnZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBdXRoVGFnID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBzZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBQUQgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhYWQgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGRhdGEsIF8sIG5leHQpIHtcbiAgdmFyIGVyclxuICB0cnkge1xuICAgIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgICB0aGlzLl91cGRhdGUoZGF0YSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXNoKHRoaXMuX3VwZGF0ZShkYXRhKSlcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnIgPSBlXG4gIH0gZmluYWxseSB7XG4gICAgbmV4dChlcnIpXG4gIH1cbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLl9mbHVzaCA9IGZ1bmN0aW9uIChkb25lKSB7XG4gIHZhciBlcnJcbiAgdHJ5IHtcbiAgICB0aGlzLnB1c2godGhpcy5fZmluYWwoKSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfSBmaW5hbGx5IHtcbiAgICBkb25lKGVycilcbiAgfVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZpbmFsT3JEaWdlc3QgPSBmdW5jdGlvbiAob3V0cHV0RW5jKSB7XG4gIHZhciBvdXREYXRhID0gdGhpcy5fZmluYWwoKSB8fCBuZXcgQnVmZmVyKCcnKVxuICBpZiAob3V0cHV0RW5jKSB7XG4gICAgb3V0RGF0YSA9IHRoaXMuX3RvU3RyaW5nKG91dERhdGEsIG91dHB1dEVuYywgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb3V0RGF0YVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fdG9TdHJpbmcgPSBmdW5jdGlvbiAodmFsdWUsIGVuYywgZmluYWwpIHtcbiAgaWYgKCF0aGlzLl9kZWNvZGVyKSB7XG4gICAgdGhpcy5fZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYylcbiAgICB0aGlzLl9lbmNvZGluZyA9IGVuY1xuICB9XG4gIGlmICh0aGlzLl9lbmNvZGluZyAhPT0gZW5jKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYW5cXCd0IHN3aXRjaCBlbmNvZGluZ3MnKVxuICB9XG4gIHZhciBvdXQgPSB0aGlzLl9kZWNvZGVyLndyaXRlKHZhbHVlKVxuICBpZiAoZmluYWwpIHtcbiAgICBvdXQgKz0gdGhpcy5fZGVjb2Rlci5lbmQoKVxuICB9XG4gIHJldHVybiBvdXRcbn1cbiJdfQ==
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js","stream":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/stream-browserify/index.js","string_decoder":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/string_decoder/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/node_modules/buffer-xor/index.js":[function(require,module,exports){
(function (Buffer){
module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL25vZGVfbW9kdWxlcy9idWZmZXIteG9yL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhvciAoYSwgYikge1xuICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oYS5sZW5ndGgsIGIubGVuZ3RoKVxuICB2YXIgYnVmZmVyID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGJ1ZmZlcltpXSA9IGFbaV0gXiBiW2ldXG4gIH1cblxuICByZXR1cm4gYnVmZmVyXG59XG4iXX0=
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/ghash.js":[function(require,module,exports){
(function (Buffer){
var zeros = new Buffer(16)
zeros.fill(0)
module.exports = GHASH
function GHASH (key) {
  this.h = key
  this.state = new Buffer(16)
  this.state.fill(0)
  this.cache = new Buffer('')
}
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsb_Vi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - i % 8))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi = xor(Zi, Vi)
    }

    // Store the value of LSB(V_i)
    lsb_Vi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsb_Vi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}
GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}
GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, zeros], 16))
  }
  this.ghash(fromArray([
    0, abl,
    0, bl
  ]))
  return this.state
}

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}
function fromArray (out) {
  out = out.map(fixup_uint32)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}
var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function xor (a, b) {
  return [
    a[0] ^ b[0],
    a[1] ^ b[1],
    a[2] ^ b[2],
    a[3] ^ b[3]
  ]
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2doYXNoLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciB6ZXJvcyA9IG5ldyBCdWZmZXIoMTYpXG56ZXJvcy5maWxsKDApXG5tb2R1bGUuZXhwb3J0cyA9IEdIQVNIXG5mdW5jdGlvbiBHSEFTSCAoa2V5KSB7XG4gIHRoaXMuaCA9IGtleVxuICB0aGlzLnN0YXRlID0gbmV3IEJ1ZmZlcigxNilcbiAgdGhpcy5zdGF0ZS5maWxsKDApXG4gIHRoaXMuY2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxufVxuLy8gZnJvbSBodHRwOi8vYml0d2lzZXNoaWZ0bGVmdC5naXRodWIuaW8vc2pjbC9kb2Mvc3ltYm9scy9zcmMvY29yZV9nY20uanMuaHRtbFxuLy8gYnkgSnVobyBWw6Row6QtSGVydHR1YVxuR0hBU0gucHJvdG90eXBlLmdoYXNoID0gZnVuY3Rpb24gKGJsb2NrKSB7XG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGJsb2NrLmxlbmd0aCkge1xuICAgIHRoaXMuc3RhdGVbaV0gXj0gYmxvY2tbaV1cbiAgfVxuICB0aGlzLl9tdWx0aXBseSgpXG59XG5cbkdIQVNILnByb3RvdHlwZS5fbXVsdGlwbHkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBWaSA9IHRvQXJyYXkodGhpcy5oKVxuICB2YXIgWmkgPSBbMCwgMCwgMCwgMF1cbiAgdmFyIGosIHhpLCBsc2JfVmlcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgMTI4KSB7XG4gICAgeGkgPSAodGhpcy5zdGF0ZVt+fihpIC8gOCldICYgKDEgPDwgKDcgLSBpICUgOCkpKSAhPT0gMFxuICAgIGlmICh4aSkge1xuICAgICAgLy8gWl9pKzEgPSBaX2kgXiBWX2lcbiAgICAgIFppID0geG9yKFppLCBWaSlcbiAgICB9XG5cbiAgICAvLyBTdG9yZSB0aGUgdmFsdWUgb2YgTFNCKFZfaSlcbiAgICBsc2JfVmkgPSAoVmlbM10gJiAxKSAhPT0gMFxuXG4gICAgLy8gVl9pKzEgPSBWX2kgPj4gMVxuICAgIGZvciAoaiA9IDM7IGogPiAwOyBqLS0pIHtcbiAgICAgIFZpW2pdID0gKFZpW2pdID4+PiAxKSB8ICgoVmlbaiAtIDFdICYgMSkgPDwgMzEpXG4gICAgfVxuICAgIFZpWzBdID0gVmlbMF0gPj4+IDFcblxuICAgIC8vIElmIExTQihWX2kpIGlzIDEsIFZfaSsxID0gKFZfaSA+PiAxKSBeIFJcbiAgICBpZiAobHNiX1ZpKSB7XG4gICAgICBWaVswXSA9IFZpWzBdIF4gKDB4ZTEgPDwgMjQpXG4gICAgfVxuICB9XG4gIHRoaXMuc3RhdGUgPSBmcm9tQXJyYXkoWmkpXG59XG5HSEFTSC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGJ1Zikge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgYnVmXSlcbiAgdmFyIGNodW5rXG4gIHdoaWxlICh0aGlzLmNhY2hlLmxlbmd0aCA+PSAxNikge1xuICAgIGNodW5rID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNilcbiAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICB0aGlzLmdoYXNoKGNodW5rKVxuICB9XG59XG5HSEFTSC5wcm90b3R5cGUuZmluYWwgPSBmdW5jdGlvbiAoYWJsLCBibCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGgpIHtcbiAgICB0aGlzLmdoYXNoKEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIHplcm9zXSwgMTYpKVxuICB9XG4gIHRoaXMuZ2hhc2goZnJvbUFycmF5KFtcbiAgICAwLCBhYmwsXG4gICAgMCwgYmxcbiAgXSkpXG4gIHJldHVybiB0aGlzLnN0YXRlXG59XG5cbmZ1bmN0aW9uIHRvQXJyYXkgKGJ1Zikge1xuICByZXR1cm4gW1xuICAgIGJ1Zi5yZWFkVUludDMyQkUoMCksXG4gICAgYnVmLnJlYWRVSW50MzJCRSg0KSxcbiAgICBidWYucmVhZFVJbnQzMkJFKDgpLFxuICAgIGJ1Zi5yZWFkVUludDMyQkUoMTIpXG4gIF1cbn1cbmZ1bmN0aW9uIGZyb21BcnJheSAob3V0KSB7XG4gIG91dCA9IG91dC5tYXAoZml4dXBfdWludDMyKVxuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcigxNilcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzBdLCAwKVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMV0sIDQpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsyXSwgOClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzNdLCAxMilcbiAgcmV0dXJuIGJ1ZlxufVxudmFyIHVpbnRfbWF4ID0gTWF0aC5wb3coMiwgMzIpXG5mdW5jdGlvbiBmaXh1cF91aW50MzIgKHgpIHtcbiAgdmFyIHJldCwgeF9wb3NcbiAgcmV0ID0geCA+IHVpbnRfbWF4IHx8IHggPCAwID8gKHhfcG9zID0gTWF0aC5hYnMoeCkgJSB1aW50X21heCwgeCA8IDAgPyB1aW50X21heCAtIHhfcG9zIDogeF9wb3MpIDogeFxuICByZXR1cm4gcmV0XG59XG5mdW5jdGlvbiB4b3IgKGEsIGIpIHtcbiAgcmV0dXJuIFtcbiAgICBhWzBdIF4gYlswXSxcbiAgICBhWzFdIF4gYlsxXSxcbiAgICBhWzJdIF4gYlsyXSxcbiAgICBhWzNdIF4gYlszXVxuICBdXG59XG4iXX0=
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/aes.js":[function(require,module,exports){
(function (Buffer){
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec

// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function scrub_vec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
  return false
}

function Global () {
  this.SBOX = []
  this.INV_SBOX = []
  this.SUB_MIX = [[], [], [], []]
  this.INV_SUB_MIX = [[], [], [], []]
  this.init()
  this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
}

Global.prototype.init = function () {
  var d, i, sx, t, x, x2, x4, x8, xi, _i
  d = (function () {
    var _i, _results
    _results = []
    for (i = _i = 0; _i < 256; i = ++_i) {
      if (i < 128) {
        _results.push(i << 1)
      } else {
        _results.push((i << 1) ^ 0x11b)
      }
    }
    return _results
  })()
  x = 0
  xi = 0
  for (i = _i = 0; _i < 256; i = ++_i) {
    sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    this.SBOX[x] = sx
    this.INV_SBOX[sx] = x
    x2 = d[x]
    x4 = d[x2]
    x8 = d[x4]
    t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    this.SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    this.SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    this.SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    this.SUB_MIX[3][x] = t
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    this.INV_SUB_MIX[3][sx] = t
    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }
  return true
}

var G = new Global()

AES.blockSize = 4 * 4

AES.prototype.blockSize = AES.blockSize

AES.keySize = 256 / 8

AES.prototype.keySize = AES.keySize

function bufferToArray (buf) {
  var len = buf.length / 4
  var out = new Array(len)
  var i = -1
  while (++i < len) {
    out[i] = buf.readUInt32BE(i * 4)
  }
  return out
}
function AES (key) {
  this._key = bufferToArray(key)
  this._doReset()
}

AES.prototype._doReset = function () {
  var invKsRow, keySize, keyWords, ksRow, ksRows, t
  keyWords = this._key
  keySize = keyWords.length
  this._nRounds = keySize + 6
  ksRows = (this._nRounds + 1) * 4
  this._keySchedule = []
  for (ksRow = 0; ksRow < ksRows; ksRow++) {
    this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t)
  }
  this._invKeySchedule = []
  for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {
    ksRow = ksRows - invKsRow
    t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)]
    this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]]
  }
  return true
}

AES.prototype.encryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var temp = [M[3], M[1]]
  M[1] = temp[0]
  M[3] = temp[1]
  var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrub_vec(this._keySchedule)
  scrub_vec(this._invKeySchedule)
  scrub_vec(this._key)
}

AES.prototype._doCryptBlock = function (M, keySchedule, SUB_MIX, SBOX) {
  var ksRow, s0, s1, s2, s3, t0, t1, t2, t3

  s0 = M[0] ^ keySchedule[0]
  s1 = M[1] ^ keySchedule[1]
  s2 = M[2] ^ keySchedule[2]
  s3 = M[3] ^ keySchedule[3]
  ksRow = 4
  for (var round = 1; round < this._nRounds; round++) {
    t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }
  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  return [
    fixup_uint32(t0),
    fixup_uint32(t1),
    fixup_uint32(t2),
    fixup_uint32(t3)
  ]
}

exports.AES = AES

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/seedrandom/lib/xorwow.js":[function(require,module,exports){
// A Javascript implementaion of the "xorwow" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  // Set up generator function.
  me.next = function() {
    var t = (me.x ^ (me.x >>> 2));
    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;
    return (me.d = (me.d + 362437 | 0)) +
       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;
  };

  me.x = 0;
  me.y = 0;
  me.z = 0;
  me.w = 0;
  me.v = 0;

  if (seed === (seed | 0)) {
    // Integer seed.
    me.x = seed;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 64; k++) {
    me.x ^= strseed.charCodeAt(k) | 0;
    if (k == strseed.length) {
      me.d = me.x << 10 ^ me.x >>> 4;
    }
    me.next();
  }
}

function copy(f, t) {
  t.x = f.x;
  t.y = f.y;
  t.z = f.z;
  t.w = f.w;
  t.v = f.v;
  t.d = f.d;
  return t;
}

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.xorwow = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);



},{}],"/home/ubuntu/staging/apps/node_modules/seedrandom/lib/xorshift7.js":[function(require,module,exports){
// A Javascript implementaion of the "xorshift7" algorithm by
// François Panneton and Pierre L'ecuyer:
// "On the Xorgshift Random Number Generators"
// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf

(function(global, module, define) {

function XorGen(seed) {
  var me = this;

  // Set up generator function.
  me.next = function() {
    // Update xor generator.
    var X = me.x, i = me.i, t, v, w;
    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);
    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);
    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);
    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);
    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);
    X[i] = v;
    me.i = (i + 1) & 7;
    return v;
  };

  function init(me, seed) {
    var j, w, X = [];

    if (seed === (seed | 0)) {
      // Seed state array using a 32-bit integer.
      w = X[0] = seed;
    } else {
      // Seed state using a string.
      seed = '' + seed;
      for (j = 0; j < seed.length; ++j) {
        X[j & 7] = (X[j & 7] << 15) ^
            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);
      }
    }
    // Enforce an array length of 8, not all zeroes.
    while (X.length < 8) X.push(0);
    for (j = 0; j < 8 && X[j] === 0; ++j);
    if (j == 8) w = X[7] = -1; else w = X[j];

    me.x = X;
    me.i = 0;

    // Discard an initial 256 values.
    for (j = 256; j > 0; --j) {
      me.next();
    }
  }

  init(me, seed);
}

function copy(f, t) {
  t.x = f.x.slice();
  t.i = f.i;
  return t;
}

function impl(seed, opts) {
  if (seed == null) seed = +(new Date);
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (state.x) copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.xorshift7 = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);


},{}],"/home/ubuntu/staging/apps/node_modules/seedrandom/lib/xor4096.js":[function(require,module,exports){
// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.
//
// This fast non-cryptographic random number generator is designed for
// use in Monte-Carlo algorithms. It combines a long-period xorshift
// generator with a Weyl generator, and it passes all common batteries
// of stasticial tests for randomness while consuming only a few nanoseconds
// for each prng generated.  For background on the generator, see Brent's
// paper: "Some long-period random number generators using shifts and xors."
// http://arxiv.org/pdf/1104.3115.pdf
//
// Usage:
//
// var xor4096 = require('xor4096');
// random = xor4096(1);                        // Seed with int32 or string.
// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.
// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.
//
// For nonzero numeric keys, this impelementation provides a sequence
// identical to that by Brent's xorgens 3 implementaion in C.  This
// implementation also provides for initalizing the generator with
// string seeds, or for saving and restoring the state of the generator.
//
// On Chrome, this prng benchmarks about 2.1 times slower than
// Javascript's built-in Math.random().

(function(global, module, define) {

function XorGen(seed) {
  var me = this;

  // Set up generator function.
  me.next = function() {
    var w = me.w,
        X = me.X, i = me.i, t, v;
    // Update Weyl generator.
    me.w = w = (w + 0x61c88647) | 0;
    // Update xor generator.
    v = X[(i + 34) & 127];
    t = X[i = ((i + 1) & 127)];
    v ^= v << 13;
    t ^= t << 17;
    v ^= v >>> 15;
    t ^= t >>> 12;
    // Update Xor generator array state.
    v = X[i] = v ^ t;
    me.i = i;
    // Result is the combination.
    return (v + (w ^ (w >>> 16))) | 0;
  };

  function init(me, seed) {
    var t, v, i, j, w, X = [], limit = 128;
    if (seed === (seed | 0)) {
      // Numeric seeds initialize v, which is used to generates X.
      v = seed;
      seed = null;
    } else {
      // String seeds are mixed into v and X one character at a time.
      seed = seed + '\0';
      v = 0;
      limit = Math.max(limit, seed.length);
    }
    // Initialize circular array and weyl value.
    for (i = 0, j = -32; j < limit; ++j) {
      // Put the unicode characters into the array, and shuffle them.
      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);
      // After 32 shuffles, take v as the starting w value.
      if (j === 0) w = v;
      v ^= v << 10;
      v ^= v >>> 15;
      v ^= v << 4;
      v ^= v >>> 13;
      if (j >= 0) {
        w = (w + 0x61c88647) | 0;     // Weyl.
        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.
        i = (0 == t) ? i + 1 : 0;     // Count zeroes.
      }
    }
    // We have detected all zeroes; make the key nonzero.
    if (i >= 128) {
      X[(seed && seed.length || 0) & 127] = -1;
    }
    // Run the generator 512 times to further mix the state before using it.
    // Factoring this as a function slows the main generator, so it is just
    // unrolled here.  The weyl generator is not advanced while warming up.
    i = 127;
    for (j = 4 * 128; j > 0; --j) {
      v = X[(i + 34) & 127];
      t = X[i = ((i + 1) & 127)];
      v ^= v << 13;
      t ^= t << 17;
      v ^= v >>> 15;
      t ^= t >>> 12;
      X[i] = v ^ t;
    }
    // Storing state as object members is faster than using closure variables.
    me.w = w;
    me.X = X;
    me.i = i;
  }

  init(me, seed);
}

function copy(f, t) {
  t.i = f.i;
  t.w = f.w;
  t.X = f.X.slice();
  return t;
};

function impl(seed, opts) {
  if (seed == null) seed = +(new Date);
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (state.X) copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.xor4096 = impl;
}

})(
  this,                                     // window object or global
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);

},{}],"/home/ubuntu/staging/apps/node_modules/seedrandom/lib/xor128.js":[function(require,module,exports){
// A Javascript implementaion of the "xor128" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  me.x = 0;
  me.y = 0;
  me.z = 0;
  me.w = 0;

  // Set up generator function.
  me.next = function() {
    var t = me.x ^ (me.x << 11);
    me.x = me.y;
    me.y = me.z;
    me.z = me.w;
    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);
  };

  if (seed === (seed | 0)) {
    // Integer seed.
    me.x = seed;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 64; k++) {
    me.x ^= strseed.charCodeAt(k) | 0;
    me.next();
  }
}

function copy(f, t) {
  t.x = f.x;
  t.y = f.y;
  t.z = f.z;
  t.w = f.w;
  return t;
}

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.xor128 = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);



},{}],"/home/ubuntu/staging/apps/node_modules/seedrandom/lib/tychei.js":[function(require,module,exports){
// A Javascript implementaion of the "Tyche-i" prng algorithm by
// Samuel Neves and Filipe Araujo.
// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  // Set up generator function.
  me.next = function() {
    var b = me.b, c = me.c, d = me.d, a = me.a;
    b = (b << 25) ^ (b >>> 7) ^ c;
    c = (c - d) | 0;
    d = (d << 24) ^ (d >>> 8) ^ a;
    a = (a - b) | 0;
    me.b = b = (b << 20) ^ (b >>> 12) ^ c;
    me.c = c = (c - d) | 0;
    me.d = (d << 16) ^ (c >>> 16) ^ a;
    return me.a = (a - b) | 0;
  };

  /* The following is non-inverted tyche, which has better internal
   * bit diffusion, but which is about 25% slower than tyche-i in JS.
  me.next = function() {
    var a = me.a, b = me.b, c = me.c, d = me.d;
    a = (me.a + me.b | 0) >>> 0;
    d = me.d ^ a; d = d << 16 ^ d >>> 16;
    c = me.c + d | 0;
    b = me.b ^ c; b = b << 12 ^ d >>> 20;
    me.a = a = a + b | 0;
    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;
    me.c = c = c + d | 0;
    b = b ^ c;
    return me.b = (b << 7 ^ b >>> 25);
  }
  */

  me.a = 0;
  me.b = 0;
  me.c = 2654435769 | 0;
  me.d = 1367130551;

  if (seed === Math.floor(seed)) {
    // Integer seed.
    me.a = (seed / 0x100000000) | 0;
    me.b = seed | 0;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 20; k++) {
    me.b ^= strseed.charCodeAt(k) | 0;
    me.next();
  }
}

function copy(f, t) {
  t.a = f.a;
  t.b = f.b;
  t.c = f.c;
  t.d = f.d;
  return t;
};

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.tychei = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);



},{}],"/home/ubuntu/staging/apps/node_modules/seedrandom/lib/alea.js":[function(require,module,exports){
// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010
// http://baagoe.com/en/RandomMusings/javascript/
// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror
// Original work is under MIT license -

// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.



(function(global, module, define) {

function Alea(seed) {
  var me = this, mash = Mash();

  me.next = function() {
    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32
    me.s0 = me.s1;
    me.s1 = me.s2;
    return me.s2 = t - (me.c = t | 0);
  };

  // Apply the seeding algorithm from Baagoe.
  me.c = 1;
  me.s0 = mash(' ');
  me.s1 = mash(' ');
  me.s2 = mash(' ');
  me.s0 -= mash(seed);
  if (me.s0 < 0) { me.s0 += 1; }
  me.s1 -= mash(seed);
  if (me.s1 < 0) { me.s1 += 1; }
  me.s2 -= mash(seed);
  if (me.s2 < 0) { me.s2 += 1; }
  mash = null;
}

function copy(f, t) {
  t.c = f.c;
  t.s0 = f.s0;
  t.s1 = f.s1;
  t.s2 = f.s2;
  return t;
}

function impl(seed, opts) {
  var xg = new Alea(seed),
      state = opts && opts.state,
      prng = xg.next;
  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; }
  prng.double = function() {
    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53
  };
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

function Mash() {
  var n = 0xefc8249d;

  var mash = function(data) {
    data = data.toString();
    for (var i = 0; i < data.length; i++) {
      n += data.charCodeAt(i);
      var h = 0.02519603282416938 * n;
      n = h >>> 0;
      h -= n;
      h *= n;
      n = h >>> 0;
      h -= n;
      n += h * 0x100000000; // 2^32
    }
    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32
  };

  return mash;
}


if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.alea = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);



},{}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js":[function(require,module,exports){
/**
 * @overview Constants and enums used across Internet Simulator.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
/* global exports */
'use strict';

/**
 * @type {number}
 * @const
 */
exports.BITS_PER_NIBBLE = 4;

/**
 * @type {number}
 * @const
 */
exports.BITS_PER_BYTE = 8;

/**
 * @type {number}
 * @const
 */
exports.BITS_PER_KILOBYTE = 1024 * exports.BITS_PER_BYTE;

/**
 * @type {number}
 * @const
 */
exports.BITS_PER_MEGABYTE = 1024 * exports.BITS_PER_KILOBYTE;

/**
 * @type {number}
 * @const
 */
exports.BITS_PER_GIGABYTE = 1024 * exports.BITS_PER_MEGABYTE;

/**
 * @type {number}
 * @const
 */
exports.BITS_PER_KILOBIT = 1024;

/**
 * @type {number}
 * @const
 */
exports.BITS_PER_MEGABIT = 1024 * exports.BITS_PER_KILOBIT;

/**
 * @type {number}
 * @const
 */
exports.BITS_PER_GIGABIT = 1024 * exports.BITS_PER_MEGABIT;

/**
 * Types of nodes that can show up in the simulation.
 * @enum {string}
 */
exports.NodeType = {
  CLIENT: 'client',
  ROUTER: 'router'
};

/**
 * What type of message makes up the 'atom' of communication for this
 * simulator mode - single-bit messages (variant 1) or whole packets (variants
 * 2 and up)
 * @enum {string}
 */
exports.MessageGranularity = {
  PACKETS: 'packets',
  BITS: 'bits'
};

/**
 * DNS modes for the simulator.  Only applies in variant 3, when connecting
 * to a router.
 * @enum {string}
 */
exports.DnsMode = {
  /** There is no DNS node.  Everyone can see every other node's address. */
  NONE: 'none',

  /** One user acts as the DNS node at a time.  Everyone can see their own
   *  address and the DNS node's address, but nothing else. */
  MANUAL: 'manual',

  /** An automatic DNS node is added to the simulation.  Nodes are automatically
   *  registered with the DNS on connection. */
  AUTOMATIC: 'automatic'
};

/**
 * Encodings that can be used to interpret and display binary messages in
 * the simulator.
 * Map to class-names that can be applied to related table rows.
 * @enum {string}
 */
exports.EncodingType = {
  /** Renders each chunk of bits (using variable chunksize) in ascii */
  ASCII: 'ascii',

  /** Renders each chunk of bits (using variable chunksize) in decimal */
  DECIMAL: 'decimal',

  /** Renders each binary nibble as a hex character. */
  HEXADECIMAL: 'hexadecimal',

  /** All packet data is actually stored and moved around in binary, so
   *  the 'binary' encoding just represents access to that raw data. */
  BINARY: 'binary',

  /** An encoding used early in the lessons to show that binary isn't always
   *  1s and 0s.  Just like binary, but replaces 1/0 with A/B. */
  A_AND_B: 'a_and_b'
};

/**
 * Enumeration of tabs for level configuration
 * @enum {string}
 */
exports.NetSimTabType = {
  INSTRUCTIONS: 'instructions',
  MY_DEVICE: 'my_device',
  ROUTER: 'router',
  DNS: 'dns'
};

/**
 * Column types that can be used any time a packet is displayed on the page.
 * Related to Packet.HeaderType, but different because this includes columns
 * that aren't part of the header, and groups the packetInfo together.
 * Map to class-names that can be applied to related table cells.
 * @enum {string}
 */
exports.PacketUIColumnType = {
  ENCODING_LABEL: 'encodingLabel',
  TO_ADDRESS: 'toAddress',
  FROM_ADDRESS: 'fromAddress',
  PACKET_INFO: 'packetInfo',
  MESSAGE: 'message'
};

},{}],"/home/ubuntu/staging/apps/build/js/netsim/DashboardUser.js":[function(require,module,exports){
/**
 * @overview Interface to dashboard user data API.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

/**
 * @typedef {Object} Section
 * @property {number} id - Section's numeric identifier in Dashboard.
 */

// TODO (bbuchanan): This whole file should go away when we have a shared
//                   Javascript User object that can be available on page load.

/**
 * Represents a Dashboard user account - could be a teacher, a student, etc.
 * @constructor
 */
var DashboardUser = module.exports = function () {
  /**
   * Indicates whether the async call has completed yet.
   * @type {boolean}
   */
  this.isReady = false;

  /**
   * Queue of callbacks to hit when this object gets initialized.
   * @type {function[]}
   * @private
   */
  this.whenReadyCallbacks_ = [];

  /**
   * User ID
   * @type {number}
   */
  this.id = undefined;

  /**
   * User display name
   * @type {string}
   */
  this.name = "";

  /**
   * Whether the user is a site admin.
   * NOTE: This should only be used in a convenience/display sense; anything
   *       requiring actual security should be authenticated through the server,
   *       and not depend on client code.
   * @type {boolean}
   */
  this.isAdmin = false;

  /**
   * List of sections owned by this user.
   * @type {Section[]}
   */
  this.ownedSections = [];
};

/**
 * @type {DashboardUser}
 * @private
 * @static
 */
DashboardUser.currentUser_ = null;

/**
 * Kick of an asynchronous request for the current user's data, and immediately
 * pass back a placeholder object that has a whenReady method others can
 * use to guarantee the data is present.
 *
 * @return {DashboardUser} that doesn't have its data yet, but will soon.
 */
DashboardUser.getCurrentUser = function () {
  if (!DashboardUser.currentUser_) {
    DashboardUser.currentUser_ = new DashboardUser();
    $.ajax({
      url: '/v2/user',
      type: 'get',
      dataType: 'json',
      success: function success(data /*, textStatus, jqXHR*/) {
        DashboardUser.currentUser_.initialize(data);
      },
      error: function error() /*jqXHR, textStatus, errorThrown*/{
        DashboardUser.currentUser_.initialize({
          isSignedIn: false
        });
      }
    });
  }
  return DashboardUser.currentUser_;
};

/**
 * Load data into user from async request, when ready.
 * @param data
 */
DashboardUser.prototype.initialize = function (data) {
  this.id = data.id;
  this.name = data.name;
  this.isAdmin = data.admin === true;
  this.ownedSections = data.owned_sections;
  this.isSignedIn = data.isSignedIn !== false;
  this.isReady = true;

  // Call any queued callbacks
  this.whenReadyCallbacks_.forEach((function (callback) {
    callback(this);
  }).bind(this));
  this.whenReadyCallbacks_.length = 0;
};

/**
 * Provide code to be called when this object is ready to use
 * Possible for it to be called immediately.
 * @param {!function} callback
 */
DashboardUser.prototype.whenReady = function (callback) {
  if (this.isReady) {
    callback(this);
  } else {
    this.whenReadyCallbacks_.push(callback);
  }
};

/**
 * Check whether the current user owns the section with the given section ID.
 * @param {number} sectionID
 * @returns {boolean}
 */
DashboardUser.prototype.ownsSection = function (sectionID) {
  return this.ownedSections.some(function (section) {
    return section.id === sectionID;
  });
};

},{}],"/home/ubuntu/staging/apps/build/js/netsim/ArgumentUtils.js":[function(require,module,exports){
/**
 * @overview Utilities for validating and retrieving arguments to a method.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

/**
 * Makes sure the given argument is provided and passes the validation check.
 * @param {?} arg - the argument to validate
 * @param {!string} argName - Argument name (for useful error reporting)
 * @param {function(?)} [validator] - validation check to run on the argument.
 *        Defaults to no check (anything passes).
 * @returns {?} the original argument.
 * @throws {TypeError} if the argument is missing or invalid.
 */
exports.validateRequired = function (arg, argName, validator) {
  if (undefined === arg) {
    throw new TypeError(argName + ' is required.');
  } else if (typeof validator === 'function' && !validator(arg)) {
    throw new TypeError('Cannot set ' + argName + ' to ' + arg + '.');
  }
  return arg;
};

/**
 * Adds an option getter to the provided options Object that validates
 * the passed arguments and can provide default values.
 * @param {Object} optionsObject - the raw options object.  May be passed
 *        undefined (as in an omitted options object) but must not be null
 *        or a non-object type.  Not modified.
 * @returns {Object} that includes a `get` method.  Will be an object
 *          even if original optionsObject argument was undefined.
 * @throws {TypeError} if a non-object is passed to the constructor.
 * @throws {Error} if extending the object would overwrite an existing property.
 */
exports.extendOptionsObject = function (optionsObject) {
  // Allow `undefined` and all objects except for `null`
  var isUndefined = optionsObject === undefined;
  var isRealObject = typeof optionsObject === 'object' && optionsObject !== null;
  if (!(isUndefined || isRealObject)) {
    throw new TypeError('Options object must be an object.');
  }

  if (optionsObject && optionsObject.hasOwnProperty('get')) {
    throw new Error('Cannot extend options; property "get" would be overwritten.');
  }

  return $.extend({}, optionsObject, {
    /**
     * Retrieve an optional value from the options object, passing it through the
     * provided validation function, and returning the given default value if
     * the requested option was not set.
     * @param {!string} optionKey - name of the option in the raw options object.
     * @param {function(?)} [validator] - validation check to run on the value,
     *        if it has been set.  Should return TRUE if valid and FALSE otherwise.
     *        Defaults to no check (anything passes).
     * @param {?} [defaultValue] - What to return if the option was not set.
     *        Defaults to `undefined`.
     * @returns {?} The value of the option if it was set, and the provided
     *          default value if it was not set.
     * @throws {TypeError} if the validator function returns FALSE when called
     *         on the option value.
     */
    get: function get(optionKey, validator, defaultValue) {
      if (!optionsObject || optionsObject[optionKey] === undefined) {
        return defaultValue;
      }

      if (typeof validator === 'function' && !validator(optionsObject[optionKey])) {
        throw new TypeError('Cannot set ' + optionKey + ' to ' + optionsObject[optionKey] + '.');
      }

      return optionsObject[optionKey];
    }
  });
};

/**
 * Validator function that verifies that the argument is a number, is
 * greater than or equal to zero, and is not Infinity.
 * @param arg
 * @returns {boolean} TRUE if provided argument is valid.
 * @static
 */
exports.isPositiveNoninfiniteNumber = function (arg) {
  return typeof arg === 'number' && !isNaN(arg) && arg >= 0 && arg !== Infinity;
};

/**
 * Validator function that verifies that the argument is a number, is
 * greater than or equal to zero, and is not Infinity.
 * @param {?} arg
 * @returns {boolean} TRUE if provided argument is valid.
 * @static
 */
exports.isBoolean = function (arg) {
  return typeof arg === 'boolean';
};

/**
 * Validator function that verifies that the argument is a string.
 * @param {?} arg
 * @returns {boolean} TRUE if provided argument is valid.
 * @static
 */
exports.isString = function (arg) {
  return typeof arg === 'string';
};

/**
 * Validator function that verifies the argument is an array.
 * Sure this seems redundant, but included here for discoverability.
 * @param {?} arg
 * @returns {boolean} TRUE if the provided argument is an array.
 */
exports.isArray = function (arg) {
  return Array.isArray(arg);
};

/**
 * Validator function that verifies that argument is an array of strings.
 * @param {?} arg
 * @returns {boolean} TRUE if provided argument is an array and every element
 *          in the array is a string.
 * @static
 */
exports.isArrayOfStrings = function (arg) {
  return Array.isArray(arg) && arg.every(exports.isString);
};

},{}],"/home/ubuntu/staging/apps/build/js/RunLoop.js":[function(require,module,exports){
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
/* global window */
'use strict';

var ObservableEvent = require('./ObservableEvent');

// It is more accurate to use performance.now(), but we use Date.now()
// for compatibility with Safari and older browsers. This should only cause
// a small error in the deltaTime for the initial frame anyway.
// See Also:
// * https://developer.mozilla.org/en-US/docs/Web/API/window.requestAnimationFrame
// * https://developer.mozilla.org/en-US/docs/Web/API/Performance.now
var windowNow = window.performance && window.performance.now ? window.performance.now.bind(window.performance) : Date.now;

/**
 * How many ticks we try to fire every second.
 * @type {number}
 * @const
 */
var PREFERRED_TICKS_PER_SECOND = 10;

/**
 * Precalculated milliseconds per tick.
 * @type {number}
 * @const
 */
var PREFERRED_MS_PER_TICK = 1000 / PREFERRED_TICKS_PER_SECOND;

/**
 * Rendered frames per second on older browsers where we can't lock to the
 * repaint event.
 * @type {number}
 * @const
 */
var FALLBACK_FPS = 30;

/**
 * Precalculated milliseconds per frame for fallback case
 * @type {number}
 * @const
 */
var FALLBACK_MS_PER_FRAME = 1000 / FALLBACK_FPS;

/**
 * Simple run-loop manager
 * @constructor
 */
var RunLoop = module.exports = function () {

  /**
   * Whether the run-loop will continue running.
   * @type {boolean}
   */
  this.enabled = false;

  /**
   * Tracks current time and delta time for the tick loop.
   * Passed to observers when events fire.
   * @type {RunLoop.Clock}
   */
  this.tickClock = new RunLoop.Clock();

  /**
   * Tracks current time and delta time for the render loop.
   * Passed to observers when events fire.
   * @type {RunLoop.Clock}
   */
  this.renderClock = new RunLoop.Clock();

  /**
   * Method that gets called over and over, regardless of whether NetSim
   * is in focus or not.  Called less often than render().  Can be slowed
   * to about once per second when NetSim is in the background.
   * @type {Function}
   * @private
   */
  this.tick_ = this.buildTickMethod_();

  /**
   * Method that gets called over and over when NetSim is visible.  Gets as
   * close to maximum framerate as possible.  Called more often than tick(), but
   * can be paused entirely when NetSim is in the background.
   * @type {Function}
   * @private
   */
  this.render_ = this.buildRenderMethod_();

  /**  @type {ObservableEvent} */
  this.tick = new ObservableEvent();

  /** @type {ObservableEvent} */
  this.render = new ObservableEvent();
};

/**
 * Simple tracking for time values
 * @constructor
 */
RunLoop.Clock = function () {
  /**
   * Time the current/most recent tick started, in ms.
   * Depending on browser this might be epoch time or time since load -
   *  therefore, don't use for absolute time!
   * @type {number}
   */
  this.time = windowNow();

  /**
   * Time in ms between the latest/current tick and the previous tick.
   * Precision dependent on browser capabilities.
   * @type {number}
   */
  this.deltaTime = 0;
};

RunLoop.prototype.buildTickMethod_ = function () {
  var tickMethod;
  var self = this;
  tickMethod = function () {
    if (self.enabled) {
      var curTime = windowNow();
      self.tickClock.deltaTime = curTime - self.tickClock.time;
      self.tickClock.time = curTime;
      self.tick.notifyObservers(self.tickClock);
      setTimeout(tickMethod, PREFERRED_MS_PER_TICK - self.tickClock.deltaTime);
    }
  };
  return tickMethod;
};

RunLoop.prototype.buildRenderMethod_ = function () {
  var renderMethod;
  var self = this;
  if (window.requestAnimationFrame) {
    renderMethod = function (hiResTimeStamp) {
      if (self.enabled) {
        self.renderClock.deltaTime = hiResTimeStamp - self.renderClock.time;
        self.renderClock.time = hiResTimeStamp;
        self.render.notifyObservers(self.renderClock);
        requestAnimationFrame(renderMethod);
      }
    };
  } else {
    renderMethod = function () {
      if (self.enabled) {
        var curTime = windowNow();
        self.renderClock.deltaTime = curTime - self.renderClock.time;
        self.renderClock.time = curTime;
        self.render.notifyObservers(self.renderClock);
        setTimeout(renderMethod, FALLBACK_MS_PER_FRAME - self.renderClock.deltaTime);
      }
    };
  }
  return renderMethod;
};

/** Start the run loop (runs immediately) */
RunLoop.prototype.begin = function () {
  this.enabled = true;
  this.tickClock.time = windowNow();
  this.renderClock.time = windowNow();
  this.tick_(this.tickClock.time);
  this.render_(this.renderClock.time);
};

/**
 * Stop the run loop
 * If in the middle of a tick, will finish the current tick.
 * If called by an event between ticks, will prevent the next tick from firing.
 */
RunLoop.prototype.end = function () {
  this.enabled = false;
};

},{"./ObservableEvent":"/home/ubuntu/staging/apps/build/js/ObservableEvent.js"}]},{},["/home/ubuntu/staging/apps/build/js/netsim/main.js"])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9mYWN0b3ItYnVuZGxlL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJidWlsZC9qcy9uZXRzaW0vbWFpbi5qcyIsImJ1aWxkL2pzL25ldHNpbS9za2lucy5qcyIsImJ1aWxkL2pzL25ldHNpbS9uZXRzaW0uanMiLCJidWlsZC9qcy9uZXRzaW0vcGFnZS5odG1sLmVqcyIsImJ1aWxkL2pzL25ldHNpbS9sZXZlbHMuanMiLCJidWlsZC9qcy9uZXRzaW0vY29udHJvbHMuaHRtbC5lanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltVmlzdWFsaXphdGlvbi5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1WaXpTaW11bGF0aW9uV2lyZS5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1WaXpXaXJlLmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbVZpelNpbXVsYXRpb25Ob2RlLmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbVZpekF1dG9EbnNOb2RlLmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbVZpek5vZGUuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltVml6RWxlbWVudC5qcyIsImJ1aWxkL2pzL25ldHNpbS90d2VlbnMuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltVmlzdWFsaXphdGlvbi5odG1sLmVqcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1UYWJzQ29tcG9uZW50LmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbVRhYnNDb21wb25lbnQuaHRtbC5lanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltU3RhdHVzUGFuZWwuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltU3RhdHVzUGFuZWwuaHRtbC5lanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltU2hhcmQuanMiLCJidWlsZC9qcy9uZXRzaW0vUHViU3ViU2VydmljZS5qcyIsImJ1aWxkL2pzL25ldHNpbS9QdWJTdWJDaGFubmVsLmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbVRhYmxlLmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbVNlbmRQYW5lbC5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1TZW5kUGFuZWwuaHRtbC5lanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltUm91dGVyVGFiLmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbVJvdXRlclRhYi5odG1sLmVqcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1Sb3V0ZXJTdGF0c1RhYmxlLmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbVJvdXRlclN0YXRzVGFibGUuaHRtbC5lanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltUm91dGVyTG9nTW9kYWwuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltUm91dGVyTG9nTW9kYWwuaHRtbC5lanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltUGFja2V0U2l6ZUNvbnRyb2wuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltUGFja2V0RWRpdG9yLmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbVBhY2tldEVkaXRvci5odG1sLmVqcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1NeURldmljZVRhYi5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1QdWxzZVJhdGVDb250cm9sLmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbU15RGV2aWNlVGFiLmh0bWwuZWpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbU1ldHJvbm9tZS5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1NZXRyb25vbWUuaHRtbC5lanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltTWVtb3J5Q29udHJvbC5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1Mb2dQYW5lbC5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1Mb2dQYW5lbC5odG1sLmVqcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1Mb2dQYWNrZXQuaHRtbC5lanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltTG9jYWxDbGllbnROb2RlLmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbUxvYmJ5LmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbVNoYXJkU2VsZWN0aW9uUGFuZWwuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltU2hhcmRTZWxlY3Rpb25QYW5lbC5odG1sLmVqcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1SZW1vdGVOb2RlU2VsZWN0aW9uUGFuZWwuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltUmVtb3RlTm9kZVNlbGVjdGlvblBhbmVsLmh0bWwuZWpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbU5vZGVGYWN0b3J5LmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbVJvdXRlck5vZGUuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltTWVzc2FnZS5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1Mb2dFbnRyeS5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvbW9tZW50LmpzIiwiYnVpbGQvanMvbmV0c2ltL1BhY2tldC5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1EbnNUYWIuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltRG5zVGFibGUuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltRG5zVGFibGUuaHRtbC5lanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltRG5zVGFiLmh0bWwuZWpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbURuc01vZGVDb250cm9sLmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbURuc01vZGVDb250cm9sLmh0bWwuZWpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbURuc01hbnVhbENvbnRyb2wuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltRG5zTWFudWFsQ29udHJvbC5odG1sLmVqcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1DbGllbnROb2RlLmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbU5vZGUuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltV2lyZS5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1FbnRpdHkuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltQ2h1bmtTaXplQ29udHJvbC5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1CaXRSYXRlQ29udHJvbC5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1CaXRMb2dQYW5lbC5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1QYW5lbC5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1QYW5lbC5odG1sLmVqcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1FbmNvZGluZ0NvbnRyb2wuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltRW5jb2RpbmdDb250cm9sLmh0bWwuZWpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbUJpdExvZ1BhbmVsLmh0bWwuZWpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbUJhbmR3aWR0aENvbnRyb2wuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltU2xpZGVyLmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbVNsaWRlci5odG1sLmVqcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1BcGkuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltQXBpRXJyb3IuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltQWxlcnQuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltQWxlcnQuaHRtbC5lanMiLCJidWlsZC9qcy9uZXRzaW0vRGF0YUNvbnZlcnRlcnMuanMiLCJub2RlX21vZHVsZXMvQmFzZTY0L2Jhc2U2NC5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1VdGlscy5qcyIsImJ1aWxkL2pzL25ldHNpbS9sb2NhbGUuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltTG9nZ2VyLmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbUdsb2JhbHMuanMiLCJub2RlX21vZHVsZXMvc2VlZHJhbmRvbS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL3NlZWRyYW5kb20uanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L3B1YmxpY0VuY3J5cHQuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L3ByaXZhdGVEZWNyeXB0LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC94b3IuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L3dpdGhQdWJsaWMuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9maXhQcm9jLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvZW5jcnlwdGVyLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvZGVjcnlwdGVyLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvZXZwX2J5dGVzdG9rZXkvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9zdHJlYW1DaXBoZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9vZmIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jdHIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jZmI4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvY2ZiMS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NmYi5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2F1dGhDaXBoZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9ub2RlX21vZHVsZXMvY2lwaGVyLWJhc2UvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9ub2RlX21vZHVsZXMvYnVmZmVyLXhvci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2doYXNoLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvYWVzLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1yc2EvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L21nZi5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvZGlmZmllLWhlbGxtYW4vYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvZGlmZmllLWhlbGxtYW4vbGliL3ByaW1lcy5qc29uIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9kaWZmaWUtaGVsbG1hbi9saWIvZGguanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2RpZmZpZS1oZWxsbWFuL2xpYi9nZW5lcmF0ZVByaW1lLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9kaWZmaWUtaGVsbG1hbi9ub2RlX21vZHVsZXMvbWlsbGVyLXJhYmluL2xpYi9tci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWVjZGgvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi92ZXJpZnkuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9zaWduLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3Bia2RmMi9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcmVhdGUtaG1hYy9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcmVhdGUtaGFzaC9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcmVhdGUtaGFzaC9ub2RlX21vZHVsZXMvc2hhLmpzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcmVhdGUtaGFzaC9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTM4NC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGE1MTIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyZWF0ZS1oYXNoL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhMjI0LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcmVhdGUtaGFzaC9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTI1Ni5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGExLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcmVhdGUtaGFzaC9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbm9kZV9tb2R1bGVzL3NoYS5qcy9oYXNoLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcmVhdGUtaGFzaC9ub2RlX21vZHVsZXMvcmlwZW1kMTYwL2xpYi9yaXBlbWQxNjAuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyZWF0ZS1oYXNoL25vZGVfbW9kdWxlcy9jaXBoZXItYmFzZS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL2ZpeFByb2MuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvZW5jcnlwdGVyLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2RlY3J5cHRlci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9ldnBfYnl0ZXN0b2tleS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9zdHJlYW1DaXBoZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvb2ZiLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2N0ci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jZmI4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NmYjEuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvY2ZiLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2F1dGhDaXBoZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbm9kZV9tb2R1bGVzL2NpcGhlci1iYXNlL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL25vZGVfbW9kdWxlcy9idWZmZXIteG9yL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2doYXNoLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2Flcy5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL2FzbjEuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2VuY29kZXJzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZW5jb2RlcnMvcGVtLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZW5jb2RlcnMvZGVyLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZGVjb2RlcnMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9kZWNvZGVycy9wZW0uanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9kZWNvZGVycy9kZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9jb25zdGFudHMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9jb25zdGFudHMvZGVyLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYmFzZS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2Jhc2UvcmVwb3J0ZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9iYXNlL25vZGUuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9iYXNlL2J1ZmZlci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2FwaS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy92bS1icm93c2VyaWZ5L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3ZtLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2luZGV4b2YvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9hZXNpZC5qc29uIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9wYWNrYWdlLmpzb24iLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbm9kZV9tb2R1bGVzL2Jyb3JhbmQvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL3V0aWxzLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9obWFjLWRyYmcuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VjL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lYy9zaWduYXR1cmUuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VjL2tleS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmVzLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL2VsbGlwdGljL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL2VsbGlwdGljL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3V0aWxzLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL2VsbGlwdGljL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9yaXBlbWQuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvaG1hYy5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9jb21tb24uanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL3ByZWNvbXB1dGVkL3NlY3AyNTZrMS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmUvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlL3Nob3J0LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9tb250LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9lZHdhcmRzLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9iYXNlLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktcnNhL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9yYW5kb21ieXRlcy9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL2JuLmpzL2xpYi9ibi5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL2N1cnZlcy5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL2FsZ29zLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWNpcGhlci9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWNpcGhlci9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1kZXMvbW9kZXMuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktY2lwaGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWRlcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktZGVzL25vZGVfbW9kdWxlcy9kZXMuanMvbGliL2Rlcy5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktZGVzL25vZGVfbW9kdWxlcy9kZXMuanMvbGliL2Rlcy91dGlscy5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktZGVzL25vZGVfbW9kdWxlcy9kZXMuanMvbGliL2Rlcy9lZGUuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktY2lwaGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWRlcy9ub2RlX21vZHVsZXMvZGVzLmpzL2xpYi9kZXMvZGVzLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWNpcGhlci9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1kZXMvbm9kZV9tb2R1bGVzL2Rlcy5qcy9saWIvZGVzL2NpcGhlci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktZGVzL25vZGVfbW9kdWxlcy9kZXMuanMvbGliL2Rlcy9jYmMuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktY2lwaGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWRlcy9ub2RlX21vZHVsZXMvZGVzLmpzL25vZGVfbW9kdWxlcy9taW5pbWFsaXN0aWMtYXNzZXJ0L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWNpcGhlci9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1kZXMvbm9kZV9tb2R1bGVzL2NpcGhlci1iYXNlL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWNpcGhlci9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2VuY3J5cHRlci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2RlY3J5cHRlci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2V2cF9ieXRlc3Rva2V5L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcmVhdGUtaGFzaC9tZDUuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyZWF0ZS1oYXNoL2hlbHBlcnMuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktY2lwaGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9zdHJlYW1DaXBoZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktY2lwaGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9vZmIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktY2lwaGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9lY2IuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktY2lwaGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jdHIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktY2lwaGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jZmI4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWNpcGhlci9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvY2ZiMS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NmYi5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NiYy5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWNpcGhlci9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvYXV0aENpcGhlci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL25vZGVfbW9kdWxlcy9jaXBoZXItYmFzZS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL25vZGVfbW9kdWxlcy9idWZmZXIteG9yL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWNpcGhlci9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvZ2hhc2guanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktY2lwaGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9hZXMuanMiLCJub2RlX21vZHVsZXMvc2VlZHJhbmRvbS9saWIveG9yd293LmpzIiwibm9kZV9tb2R1bGVzL3NlZWRyYW5kb20vbGliL3hvcnNoaWZ0Ny5qcyIsIm5vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL2xpYi94b3I0MDk2LmpzIiwibm9kZV9tb2R1bGVzL3NlZWRyYW5kb20vbGliL3hvcjEyOC5qcyIsIm5vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL2xpYi90eWNoZWkuanMiLCJub2RlX21vZHVsZXMvc2VlZHJhbmRvbS9saWIvYWxlYS5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1Db25zdGFudHMuanMiLCJidWlsZC9qcy9uZXRzaW0vRGFzaGJvYXJkVXNlci5qcyIsImJ1aWxkL2pzL25ldHNpbS9Bcmd1bWVudFV0aWxzLmpzIiwiYnVpbGQvanMvUnVuTG9vcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FDQUEsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3BDLElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxTQUFTLENBQUM7QUFDbEQsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDOztBQUVqQyxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDakMsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDOztBQUUvQixNQUFNLENBQUMsVUFBVSxHQUFHLFVBQVMsT0FBTyxFQUFFO0FBQ3BDLFNBQU8sQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO0FBQzVCLFNBQU8sQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDOztBQUU1QixNQUFJLE1BQU0sR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFDO0FBQzFCLFFBQU0sQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDbEMsU0FBTyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDbEMsQ0FBQzs7Ozs7QUNkRixJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7O0FBRW5DLE9BQU8sQ0FBQyxJQUFJLEdBQUcsVUFBVSxRQUFRLEVBQUUsRUFBRSxF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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7OztBQ3BJQSxZQUFZLENBQUM7O0FBRWIsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ2hDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUMxQixJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDL0IsSUFBSSxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUNyRCxJQUFJLFlBQVksR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUM3QyxJQUFJLFdBQVcsR0FBRyxPQUFPLENBQUMsZUFB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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ2pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ2xDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNwTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNoREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbklBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDakhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNuSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3UUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25HQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDck5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ2pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ2xDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNySEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25TQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUN0bEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDak5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDalFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1d0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzM0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDblhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzl3RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9JQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3SUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUN4R0EsWUFBWSxDQUFDOzs7Ozs7QUFN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QyxXQUFXLENBQUMsSUFBSSxHQUFHLFNBQVMsRUFBRSxDQUFDO0FBQ3BDLE1BQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNoQyxNQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDckMsQ0FBQzs7Ozs7OztBQU9GLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLFlBQVk7QUFDbEMsTUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7Q0FDdEIsQ0FBQyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJ2YXIgYXBwTWFpbiA9IHJlcXVpcmUoJy4uL2FwcE1haW4nKTtcbnZhciBzdHVkaW9BcHAgPSByZXF1aXJlKCcuLi9TdHVkaW9BcHAnKS5zaW5nbGV0b247XG52YXIgTmV0U2ltID0gcmVxdWlyZSgnLi9uZXRzaW0nKTtcblxudmFyIGxldmVscyA9IHJlcXVpcmUoJy4vbGV2ZWxzJyk7XG52YXIgc2tpbnMgPSByZXF1aXJlKCcuL3NraW5zJyk7XG5cbndpbmRvdy5uZXRzaW1NYWluID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICBvcHRpb25zLnNraW5zTW9kdWxlID0gc2tpbnM7XG4gIG9wdGlvbnMuaXNFZGl0b3JsZXNzID0gdHJ1ZTtcblxuICB2YXIgbmV0U2ltID0gbmV3IE5ldFNpbSgpO1xuICBuZXRTaW0uaW5qZWN0U3R1ZGlvQXBwKHN0dWRpb0FwcCk7XG4gIGFwcE1haW4obmV0U2ltLCBsZXZlbHMsIG9wdGlvbnMpO1xufTtcbiIsInZhciBza2luQmFzZSA9IHJlcXVpcmUoJy4uL3NraW5zJyk7XG5cbmV4cG9ydHMubG9hZCA9IGZ1bmN0aW9uIChhc3NldFVybCwgaWQpIHtcbiAgdmFyIHNraW4gPSBza2luQmFzZS5sb2FkKGFzc2V0VXJsLCBpZCk7XG4gIHJldHVybiBza2luO1xufTtcbiIsIi8qKlxuICogQG92ZXJ2aWV3IEludGVybmV0IFNpbXVsYXRvciBhcHAgZm9yIENvZGUub3JnLlxuICogICAgICAgICAgIFRoaXMgZmlsZSBpcyB0aGUgbWFpbiBlbnRyeSBwb2ludCBmb3IgdGhlIEludGVybmV0IFNpbXVsYXRvci5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuKi9cbi8qIGdsb2JhbCAtQmxvY2tseSAqL1xuLyogZ2xvYmFsIHNlbmRSZXBvcnQgKi9cbi8qIGdsb2JhbCBjb25maXJtICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgXyA9IHV0aWxzLmdldExvZGFzaCgpO1xudmFyIGkxOG4gPSByZXF1aXJlKCcuL2xvY2FsZScpO1xudmFyIE9ic2VydmFibGVFdmVudCA9IHJlcXVpcmUoJy4uL09ic2VydmFibGVFdmVudCcpO1xudmFyIFJ1bkxvb3AgPSByZXF1aXJlKCcuLi9SdW5Mb29wJyk7XG52YXIgcGFnZSA9IHJlcXVpcmUoJy4vcGFnZS5odG1sLmVqcycpO1xudmFyIE5ldFNpbUFsZXJ0ID0gcmVxdWlyZSgnLi9OZXRTaW1BbGVydCcpO1xudmFyIE5ldFNpbUNvbnN0YW50cyA9IHJlcXVpcmUoJy4vTmV0U2ltQ29uc3RhbnRzJyk7XG52YXIgTmV0U2ltVXRpbHMgPSByZXF1aXJlKCcuL05ldFNpbVV0aWxzJyk7XG52YXIgRGFzaGJvYXJkVXNlciA9IHJlcXVpcmUoJy4vRGFzaGJvYXJkVXNlcicpO1xudmFyIE5ldFNpbUJpdExvZ1BhbmVsID0gcmVxdWlyZSgnLi9OZXRTaW1CaXRMb2dQYW5lbCcpO1xudmFyIE5ldFNpbUxvYmJ5ID0gcmVxdWlyZSgnLi9OZXRTaW1Mb2JieScpO1xudmFyIE5ldFNpbUxvY2FsQ2xpZW50Tm9kZSA9IHJlcXVpcmUoJy4vTmV0U2ltTG9jYWxDbGllbnROb2RlJyk7XG52YXIgTmV0U2ltTG9nZ2VyID0gcmVxdWlyZSgnLi9OZXRTaW1Mb2dnZXInKTtcbnZhciBOZXRTaW1Mb2dQYW5lbCA9IHJlcXVpcmUoJy4vTmV0U2ltTG9nUGFuZWwnKTtcbnZhciBOZXRTaW1Sb3V0ZXJMb2dNb2RhbCA9IHJlcXVpcmUoJy4vTmV0U2ltUm91dGVyTG9nTW9kYWwnKTtcbnZhciBOZXRTaW1Sb3V0ZXJOb2RlID0gcmVxdWlyZSgnLi9OZXRTaW1Sb3V0ZXJOb2RlJyk7XG52YXIgTmV0U2ltU2VuZFBhbmVsID0gcmVxdWlyZSgnLi9OZXRTaW1TZW5kUGFuZWwnKTtcbnZhciBOZXRTaW1TaGFyZCA9IHJlcXVpcmUoJy4vTmV0U2ltU2hhcmQnKTtcbnZhciBOZXRTaW1TdGF0dXNQYW5lbCA9IHJlcXVpcmUoJy4vTmV0U2ltU3RhdHVzUGFuZWwnKTtcbnZhciBOZXRTaW1UYWJzQ29tcG9uZW50ID0gcmVxdWlyZSgnLi9OZXRTaW1UYWJzQ29tcG9uZW50Jyk7XG52YXIgTmV0U2ltVmlzdWFsaXphdGlvbiA9IHJlcXVpcmUoJy4vTmV0U2ltVmlzdWFsaXphdGlvbicpO1xuXG52YXIgRG5zTW9kZSA9IE5ldFNpbUNvbnN0YW50cy5EbnNNb2RlO1xudmFyIE1lc3NhZ2VHcmFudWxhcml0eSA9IE5ldFNpbUNvbnN0YW50cy5NZXNzYWdlR3JhbnVsYXJpdHk7XG5cbnZhciBsb2dnZXIgPSBOZXRTaW1Mb2dnZXIuZ2V0U2luZ2xldG9uKCk7XG52YXIgTmV0U2ltR2xvYmFscyA9IHJlcXVpcmUoJy4vTmV0U2ltR2xvYmFscycpO1xuXG4vKipcbiAqIFRoZSB0b3AtbGV2ZWwgSW50ZXJuZXQgU2ltdWxhdG9yIGNvbnRyb2xsZXIuXG4gKiBAcGFyYW0ge1N0dWRpb0FwcH0gc3R1ZGlvQXBwIFRoZSBzdHVkaW9BcHAgaW5zdGFuY2UgdG8gYnVpbGQgdXBvbi5cbiAqL1xudmFyIE5ldFNpbSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHRoaXMuc2tpbiA9IG51bGw7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtOZXRTaW1MZXZlbENvbmZpZ3VyYXRpb259XG4gICAqL1xuICB0aGlzLmxldmVsID0ge307XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLmhlYWRpbmcgPSAwO1xuXG4gIC8qKlxuICAgKiBDdXJyZW50IHVzZXIgb2JqZWN0IHdoaWNoIGFzeW5jaHJvbm91c2x5IGdyYWJzIHRoZSBjdXJyZW50IHVzZXInc1xuICAgKiBpbmZvIGZyb20gdGhlIGRhc2hib2FyZCBBUEkuXG4gICAqIEB0eXBlIHtEYXNoYm9hcmRVc2VyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5jdXJyZW50VXNlcl8gPSBEYXNoYm9hcmRVc2VyLmdldEN1cnJlbnRVc2VyKCk7XG5cbiAgLyoqXG4gICAqIEFjY2Vzc29yIG9iamVjdCBmb3Igc2VsZWN0IHNpbXVsYXRpb24gc2hhcmQncyB0YWJsZXMsIHdoZXJlIGFuIHNoYXJkXG4gICAqIGlzIGEgZ3JvdXAgb2YgdGFibGVzIHNoYXJlZCBieSBhIGdyb3VwIG9mIHVzZXJzLCBhbGxvd2luZyB0aGVtIHRvIG9ic2VydmVcbiAgICogYSBjb21tb24gbmV0d29yayBzdGF0ZS5cbiAgICpcbiAgICogU2VlIGVuLndpa2lwZWRpYS5vcmcvd2lraS9JbnN0YW5jZV9kdW5nZW9uIGZvciBhIHBvcHVsYXIgZXhhbXBsZSBvZiB0aGlzXG4gICAqIGNvbmNlcHQuXG4gICAqXG4gICAqIEB0eXBlIHtOZXRTaW1TaGFyZH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuc2hhcmRfID0gbnVsbDtcblxuICAvKipcbiAgICogVGhlIGxvY2FsIGNsaWVudCdzIG5vZGUgcmVwcmVzZW50YXRpb24gd2l0aGluIHRoZSBzaGFyZC5cbiAgICogQHR5cGUge05ldFNpbUxvY2FsQ2xpZW50Tm9kZX1cbiAgICovXG4gIHRoaXMubXlOb2RlID0gbnVsbDtcblxuICAvKipcbiAgICogVGljayBhbmQgUmVuZGVyIGxvb3AgbWFuYWdlciBmb3IgdGhlIHNpbXVsYXRvclxuICAgKiBAdHlwZSB7UnVuTG9vcH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucnVuTG9vcF8gPSBuZXcgUnVuTG9vcCgpO1xuXG4gIC8qKlxuICAgKiBDdXJyZW50IGNodW5rIHNpemUgKGJ5dGVzaXplKVxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5jaHVua1NpemVfID0gODtcblxuICAvKipcbiAgICogVGhlIFwibXkgZGV2aWNlXCIgYml0cmF0ZSBpbiBiaXRzIHBlciBzZWNvbmRcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubXlEZXZpY2VCaXRSYXRlXyA9IEluZmluaXR5O1xuXG4gIC8qKlxuICAgKiBDdXJyZW50bHkgZW5hYmxlZCBlbmNvZGluZyB0eXBlcy5cbiAgICogQHR5cGUge0VuY29kaW5nVHlwZVtdfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5lbmFibGVkRW5jb2RpbmdzXyA9IFtdO1xuXG4gIC8qKlxuICAgKiBDdXJyZW50IGRucyBtb2RlLlxuICAgKiBAdHlwZSB7RG5zTW9kZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuZG5zTW9kZV8gPSBEbnNNb2RlLk5PTkU7XG5cbiAgLy8gLS0gQ29tcG9uZW50cyAtLVxuICAvKipcbiAgICogQHR5cGUge0lOZXRTaW1Mb2dQYW5lbH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucmVjZWl2ZWRNZXNzYWdlTG9nXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtJTmV0U2ltTG9nUGFuZWx9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnNlbnRNZXNzYWdlTG9nXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIEV2ZW50OiBDb25uZWN0ZWQgdG8sIG9yIGRpc2Nvbm5lY3RlZCBmcm9tLCBhIHNoYXJkLlxuICAgKiBTcGVjaWZpY2FsbHksIGFkZGVkIG9yIHJlbW92ZWQgb3VyIGNsaWVudCBub2RlIGZyb20gdGhlIHNoYXJkJ3Mgbm9kZSB0YWJsZS5cbiAgICogQHR5cGUge09ic2VydmFibGVFdmVudH1cbiAgICovXG4gIHRoaXMuc2hhcmRDaGFuZ2UgPSBuZXcgT2JzZXJ2YWJsZUV2ZW50KCk7XG4gIHRoaXMuc2hhcmRDaGFuZ2UucmVnaXN0ZXIodGhpcy5vblNoYXJkQ2hhbmdlXy5iaW5kKHRoaXMpKTtcblxuICAvKipcbiAgICogVW50eXBlZCBzdG9yYWdlIGZvciBpbmZvcm1hdGlvbiBhYm91dCB3aGljaCBldmVudHMgd2UgaGF2ZSBjdXJyZW50bHkgYm91bmQuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICB0aGlzLmV2ZW50S2V5cyA9IHt9O1xufTtcblxuTmV0U2ltLnByb3RvdHlwZS5pbmplY3RTdHVkaW9BcHAgPSBmdW5jdGlvbiAoc3R1ZGlvQXBwKSB7XG4gIHRoaXMuc3R1ZGlvQXBwXyA9IHN0dWRpb0FwcDtcbn07XG5cbi8qKlxuICogQ2FsbGVkIG9uIHBhZ2UgbG9hZC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcuc2tpblxuICogQHBhcmFtIHtOZXRTaW1MZXZlbENvbmZpZ3VyYXRpb259IGNvbmZpZy5sZXZlbFxuICogQHBhcmFtIHtzdHJpbmd9IGNvbmZpZy5yYWNrRW52IC0gZGV2ZWxvcG1lbnQvcHJvZHVjdGlvbi9ldGMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNvbmZpZy5lbmFibGVTaG93Q29kZSAtIEFsd2F5cyBmYWxzZSBmb3IgTmV0U2ltXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb25maWcubG9hZEF1ZGlvXG4gKiBAcGFyYW0ge3N0cmluZ30gY29uZmlnLmh0bWwgLSByZW5kZXJlZCBtYXJrdXAgdG8gYmUgY3JlYXRlZCBpbnNpZGUgdGhpcyBtZXRob2RcbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24oY29uZmlnKSB7XG4gIGlmICghdGhpcy5zdHVkaW9BcHBfKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTmV0U2ltIHJlcXVpcmVzIGEgU3R1ZGlvQXBwXCIpO1xuICB9XG5cbiAgLy8gU2V0IHVwIGdsb2JhbCBzaW5nbGV0b24gZm9yIGVhc3kgYWNjZXNzIHRvIHNpbXVsYXRvci13aWRlIHNldHRpbmdzXG4gIE5ldFNpbUdsb2JhbHMuc2V0Um9vdENvbnRyb2xsZXJzKHRoaXMuc3R1ZGlvQXBwXywgdGhpcyk7XG5cbiAgLy8gUmVtb3ZlIGljb24gZnJvbSBhbGwgTmV0U2ltIGluc3RydWN0aW9ucyBkaWFsb2dzXG4gIGNvbmZpZy5za2luLnN0YXRpY0F2YXRhciA9IG51bGw7XG4gIGNvbmZpZy5za2luLnNtYWxsU3RhdGljQXZhdGFyID0gbnVsbDtcbiAgY29uZmlnLnNraW4uZmFpbHVyZUF2YXRhciA9IG51bGw7XG4gIGNvbmZpZy5za2luLndpbkF2YXRhciA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFNraW4gZm9yIHRoZSBsb2FkZWQgbGV2ZWxcbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHRoaXMuc2tpbiA9IGNvbmZpZy5za2luO1xuXG4gIC8qKlxuICAgKiBDb25maWd1cmF0aW9uIGZvciB0aGUgbG9hZGVkIGxldmVsXG4gICAqIEB0eXBlIHtOZXRTaW1MZXZlbENvbmZpZ3VyYXRpb259XG4gICAqL1xuICB0aGlzLmxldmVsID0gTmV0U2ltVXRpbHMuc2NydWJMZXZlbENvbmZpZ3VyYXRpb25fKGNvbmZpZy5sZXZlbCk7XG5cbiAgLyoqXG4gICAqIEN1cnJlbnQgb3BlcmF0aW5nIGVudmlyb25tZW50LCB1c2VkIHRvIGRyaXZlIGNlcnRhaW4gY29uZmlndXJhdGlvbi5cbiAgICogQHR5cGUge3N0cmluZ30gb25lIG9mIFwiZGV2ZWxvcG1lbnRcInxcInN0YWdpbmdcInxcInRlc3RcInxcInByb2R1Y3Rpb25cIlxuICAgKi9cbiAgdGhpcy5lbnZpcm9ubWVudCA9IGNvbmZpZy5yYWNrRW52O1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIE5ldFNpbSBzaG91bGQgc3Vic2NyaWJlIHRvIGV2ZW50cyB1c2luZyBQdXNoZXIuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy51c2VQdXNoZXIgPSBjb25maWcudXNlUHVzaGVyO1xuXG4gIC8qKlxuICAgKiBUaGUgcHVibGljIGFwcGxpY2F0aW9uIGtleSBmb3IgdGhlIFB1c2hlciBzZXJ2aWNlLiAoTm90IHVzZWQgaWYgbm90IHVzaW5nXG4gICAqIFB1c2hlcikuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLnB1c2hlckFwcGxpY2F0aW9uS2V5ID0gY29uZmlnLnB1c2hlckFwcGxpY2F0aW9uS2V5O1xuXG4gIC8qKlxuICAgKiBUaGUgc3RyaWN0IG1heGltdW0gbnVtYmVyIG9mIHJvdXRlcnMgcGVyIHNoYXJkLiAgTm90ZSB0aGUgcmVhbCBtYXhpbXVtXG4gICAqIG1heSBiZSBsb3dlciBpZiBib3VuZGVkIGJ5IGFkZHJlc3NhYmxlIHNwYWNlLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5nbG9iYWxNYXhSb3V0ZXJzID0gY29uZmlnLm5ldHNpbU1heFJvdXRlcnM7XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyYXRpb24gZm9yIHJlcG9ydGluZyBsZXZlbCBjb21wbGV0aW9uXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICB0aGlzLnJlcG9ydGluZ0luZm9fID0gY29uZmlnLnJlcG9ydDtcblxuICBjb25maWcuaHRtbCA9IHBhZ2Uoe1xuICAgIGFzc2V0VXJsOiB0aGlzLnN0dWRpb0FwcF8uYXNzZXRVcmwsXG4gICAgZGF0YToge1xuICAgICAgdmlzdWFsaXphdGlvbjogJycsXG4gICAgICBsb2NhbGVEaXJlY3Rpb246IHRoaXMuc3R1ZGlvQXBwXy5sb2NhbGVEaXJlY3Rpb24oKSxcbiAgICAgIGNvbnRyb2xzOiByZXF1aXJlKCcuL2NvbnRyb2xzLmh0bWwuZWpzJykoe2Fzc2V0VXJsOiB0aGlzLnN0dWRpb0FwcF8uYXNzZXRVcmx9KVxuICAgIH0sXG4gICAgaGlkZVJ1bkJ1dHRvbjogdHJ1ZVxuICB9KTtcblxuICBjb25maWcuZW5hYmxlU2hvd0NvZGUgPSBmYWxzZTtcbiAgY29uZmlnLnBpbldvcmtzcGFjZVRvQm90dG9tID0gdHJ1ZTtcbiAgY29uZmlnLmxvYWRBdWRpbyA9IHRoaXMubG9hZEF1ZGlvXy5iaW5kKHRoaXMpO1xuXG4gIC8vIE92ZXJyaWRlIGNlcnRhaW4gU3R1ZGlvQXBwIG1ldGhvZHMgLSBuZXRzaW0gZG9lcyBhIGxvdCBvZiBjb25maWd1cmF0aW9uXG4gIC8vIGl0c2VsZiwgYmVjYXVzZSBvZiBpdHMgbm9uc3RhbmRhcmQgbGF5b3V0LlxuICB0aGlzLnN0dWRpb0FwcF8uY29uZmlndXJlRG9tID0gTmV0U2ltLmNvbmZpZ3VyZURvbU92ZXJyaWRlXy5iaW5kKHRoaXMuc3R1ZGlvQXBwXyk7XG4gIHRoaXMuc3R1ZGlvQXBwXy5vblJlc2l6ZSA9IE5ldFNpbS5vblJlc2l6ZU92ZXJyaWRlXy5iaW5kKHRoaXMuc3R1ZGlvQXBwXyk7XG5cbiAgdGhpcy5zdHVkaW9BcHBfLmluaXQoY29uZmlnKTtcblxuICAvLyBDcmVhdGUgbmV0c2ltIGxvYmJ5IHdpZGdldCBpbiBwYWdlXG4gIHRoaXMuY3VycmVudFVzZXJfLndoZW5SZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5pbml0V2l0aFVzZXJfKHRoaXMuY3VycmVudFVzZXJfKTtcbiAgfS5iaW5kKHRoaXMpKTtcblxuICAvLyBCZWdpbiB0aGUgbWFpbiBzaW11bGF0aW9uIGxvb3BcbiAgdGhpcy5ydW5Mb29wXy50aWNrLnJlZ2lzdGVyKHRoaXMudGljay5iaW5kKHRoaXMpKTtcbiAgdGhpcy5ydW5Mb29wXy5iZWdpbigpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1J1bkxvb3AuQ2xvY2t9IGNsb2NrXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUudGljayA9IGZ1bmN0aW9uIChjbG9jaykge1xuICBpZiAodGhpcy5pc0Nvbm5lY3RlZFRvU2hhcmQoKSkge1xuICAgIHRoaXMubXlOb2RlLnRpY2soY2xvY2spO1xuICAgIHRoaXMuc2hhcmRfLnRpY2soY2xvY2spO1xuICB9XG59O1xuXG4vKipcbiAqIFB1bGwgYW4gaWRlbnRpZmllciBmcm9tIHRoZSBVUkwgdGhhdCBzZXBhcmF0ZXMgdGhpcyBsZXZlbCdzIHNoYXJkIGZyb20gb3RoZXJzLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5nZXRVbmlxdWVMZXZlbEtleSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGxvY2F0aW9uLnBhdGhuYW1lLnN1YnN0cigxKS5yZXBsYWNlKC9cXFcvZywgJy0nKTtcbn07XG5cbi8qKlxuICogRXh0cmFjdHMgcXVlcnkgcGFyYW1ldGVycyBmcm9tIGEgZnVsbCBVUkwgYW5kIHJldHVybnMgdGhlbSBhcyBhIHNpbXBsZVxuICogb2JqZWN0LlxuICogQHJldHVybnMgeyp9XG4gKi9cbk5ldFNpbS5wcm90b3R5cGUuZ2V0T3ZlcnJpZGVTaGFyZElEID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcGFydHMgPSBsb2NhdGlvbi5zZWFyY2guc3BsaXQoJz8nKTtcbiAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICB2YXIgc2hhcmRJRDtcbiAgcGFydHNbMV0uc3BsaXQoJyYnKS5mb3JFYWNoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgIHZhciBzaWRlcyA9IHBhcmFtLnNwbGl0KCc9Jyk7XG4gICAgaWYgKHNpZGVzLmxlbmd0aCA+IDEgJiYgc2lkZXNbMF0gPT09ICdzJykge1xuICAgICAgc2hhcmRJRCA9IHNpZGVzWzFdO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzaGFyZElEO1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVFJVRSBpZiB0aGUgbGV2ZWwgaXMgY29uZmlndXJlZCB0byBzaG93IGFueSB0YWJzLlxuICovXG5OZXRTaW0ucHJvdG90eXBlLnNob3VsZFNob3dBbnlUYWJzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5sZXZlbC5zaG93VGFicy5sZW5ndGggPiAwO1xufTtcblxuLyoqXG4gKiBJbml0aWFsaXphdGlvbiB0aGF0IGNhbiBoYXBwZW4gb25jZSB3ZSBoYXZlIGEgdXNlciBuYW1lLlxuICogQ291bGQgY29sbGFwc2UgdGhpcyBiYWNrIGludG8gaW5pdCBpZiBhdCBzb21lIHBvaW50IHdlIGNhbiBndWFyYW50ZWUgdGhhdFxuICogdXNlciBuYW1lIGlzIGF2YWlsYWJsZSBvbiBsb2FkLlxuICogQHBhcmFtIHtEYXNoYm9hcmRVc2VyfSB1c2VyXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW0ucHJvdG90eXBlLmluaXRXaXRoVXNlcl8gPSBmdW5jdGlvbiAodXNlcikge1xuICB0aGlzLm1haW5Db250YWluZXJfID0gJCgnI25ldHNpbScpO1xuXG4gIC8vIENyZWF0ZSBsb2cgcGFuZWxzIGFjY29yZGluZyB0byBsZXZlbCBjb25maWd1cmF0aW9uXG4gIGlmICh0aGlzLmxldmVsLm1lc3NhZ2VHcmFudWxhcml0eSA9PT0gTWVzc2FnZUdyYW51bGFyaXR5LlBBQ0tFVFMpIHtcbiAgICB0aGlzLnJlY2VpdmVkTWVzc2FnZUxvZ18gPSBuZXcgTmV0U2ltTG9nUGFuZWwoJCgnI25ldHNpbS1yZWNlaXZlZCcpLCB7XG4gICAgICBsb2dUaXRsZTogaTE4bi5yZWNlaXZlZE1lc3NhZ2VMb2coKSxcbiAgICAgIGlzTWluaW1pemVkOiBmYWxzZSxcbiAgICAgIGhhc1VucmVhZE1lc3NhZ2VzOiB0cnVlLFxuICAgICAgcGFja2V0U3BlYzogdGhpcy5sZXZlbC5jbGllbnRJbml0aWFsUGFja2V0SGVhZGVyXG4gICAgfSk7XG5cbiAgICB0aGlzLnNlbnRNZXNzYWdlTG9nXyA9IG5ldyBOZXRTaW1Mb2dQYW5lbCgkKCcjbmV0c2ltLXNlbnQnKSwge1xuICAgICAgbG9nVGl0bGU6IGkxOG4uc2VudE1lc3NhZ2VMb2coKSxcbiAgICAgIGlzTWluaW1pemVkOiB0cnVlLFxuICAgICAgaGFzVW5yZWFkTWVzc2FnZXM6IGZhbHNlLFxuICAgICAgcGFja2V0U3BlYzogdGhpcy5sZXZlbC5jbGllbnRJbml0aWFsUGFja2V0SGVhZGVyXG4gICAgfSk7XG4gIH0gZWxzZSBpZiAodGhpcy5sZXZlbC5tZXNzYWdlR3JhbnVsYXJpdHkgPT09IE1lc3NhZ2VHcmFudWxhcml0eS5CSVRTKSB7XG4gICAgdGhpcy5yZWNlaXZlZE1lc3NhZ2VMb2dfID0gbmV3IE5ldFNpbUJpdExvZ1BhbmVsKCQoJyNuZXRzaW0tcmVjZWl2ZWQnKSwge1xuICAgICAgbG9nVGl0bGU6IGkxOG4ucmVjZWl2ZUJpdHMoKSxcbiAgICAgIGlzTWluaW1pemVkOiBmYWxzZSxcbiAgICAgIG5ldHNpbTogdGhpcyxcbiAgICAgIHNob3dSZWFkV2lyZUJ1dHRvbjogdHJ1ZVxuICAgIH0pO1xuXG4gICAgdGhpcy5zZW50TWVzc2FnZUxvZ18gPSBuZXcgTmV0U2ltQml0TG9nUGFuZWwoJCgnI25ldHNpbS1zZW50JyksIHtcbiAgICAgIGxvZ1RpdGxlOiBpMThuLnNlbnRCaXRzTG9nKCksXG4gICAgICBpc01pbmltaXplZDogZmFsc2UsXG4gICAgICBuZXRzaW06IHRoaXNcbiAgICB9KTtcbiAgfVxuXG4gIHRoaXMuc3RhdHVzUGFuZWxfID0gbmV3IE5ldFNpbVN0YXR1c1BhbmVsKFxuICAgICAgJCgnI25ldHNpbS1zdGF0dXMnKSxcbiAgICAgIHtcbiAgICAgICAgZGlzY29ubmVjdENhbGxiYWNrOiB0aGlzLmRpc2Nvbm5lY3RGcm9tUmVtb3RlLmJpbmQodGhpcywgZnVuY3Rpb24gKCkge30pXG4gICAgICB9KTtcblxuICB0aGlzLnJvdXRlckxvZ01vZGFsXyA9IG5ldyBOZXRTaW1Sb3V0ZXJMb2dNb2RhbCgkKCcjcm91dGVyLWxvZy1tb2RhbCcpKTtcblxuICB0aGlzLnZpc3VhbGl6YXRpb25fID0gbmV3IE5ldFNpbVZpc3VhbGl6YXRpb24oJCgnI25ldHNpbS12aXN1YWxpemF0aW9uJyksXG4gICAgICB0aGlzLnJ1bkxvb3BfKTtcblxuICAvLyBMb2JieSBwYW5lbDogQ29udHJvbHMgZm9yIHBpY2tpbmcgYSByZW1vdGUgbm9kZSBhbmQgY29ubmVjdGluZyB0byBpdC5cbiAgdGhpcy5sb2JieV8gPSBuZXcgTmV0U2ltTG9iYnkoXG4gICAgICAkKCcubG9iYnktcGFuZWwnKSxcbiAgICAgIHRoaXMsIHtcbiAgICAgICAgdXNlcjogdXNlcixcbiAgICAgICAgbGV2ZWxLZXk6IHRoaXMuZ2V0VW5pcXVlTGV2ZWxLZXkoKSxcbiAgICAgICAgc2hhcmVkU2hhcmRTZWVkOiB0aGlzLmdldE92ZXJyaWRlU2hhcmRJRCgpXG4gICAgICB9KTtcblxuICAvLyBUYWIgcGFuZWwgLSBjb250YWlucyBpbnN0cnVjdGlvbnMsIG15IGRldmljZSwgcm91dGVyLCBkbnNcbiAgaWYgKHRoaXMuc2hvdWxkU2hvd0FueVRhYnMoKSkge1xuICAgIHRoaXMudGFic18gPSBuZXcgTmV0U2ltVGFic0NvbXBvbmVudChcbiAgICAgICAgJCgnI25ldHNpbS10YWJzJyksXG4gICAgICAgIHRoaXMucnVuTG9vcF8sXG4gICAgICAgIHtcbiAgICAgICAgICBjaHVua1NpemVTbGlkZXJDaGFuZ2VDYWxsYmFjazogdGhpcy5zZXRDaHVua1NpemUuYmluZCh0aGlzKSxcbiAgICAgICAgICBteURldmljZUJpdFJhdGVDaGFuZ2VDYWxsYmFjazogdGhpcy5zZXRNeURldmljZUJpdFJhdGUuYmluZCh0aGlzKSxcbiAgICAgICAgICBlbmNvZGluZ0NoYW5nZUNhbGxiYWNrOiB0aGlzLmNoYW5nZUVuY29kaW5ncy5iaW5kKHRoaXMpLFxuICAgICAgICAgIHJvdXRlckJhbmR3aWR0aFNsaWRlckNoYW5nZUNhbGxiYWNrOiB0aGlzLnNldFJvdXRlckJhbmR3aWR0aC5iaW5kKHRoaXMpLFxuICAgICAgICAgIHJvdXRlckJhbmR3aWR0aFNsaWRlclN0b3BDYWxsYmFjazogdGhpcy5jaGFuZ2VSZW1vdGVSb3V0ZXJCYW5kd2lkdGguYmluZCh0aGlzKSxcbiAgICAgICAgICByb3V0ZXJNZW1vcnlTbGlkZXJDaGFuZ2VDYWxsYmFjazogdGhpcy5zZXRSb3V0ZXJNZW1vcnkuYmluZCh0aGlzKSxcbiAgICAgICAgICByb3V0ZXJNZW1vcnlTbGlkZXJTdG9wQ2FsbGJhY2s6IHRoaXMuY2hhbmdlUmVtb3RlUm91dGVyTWVtb3J5LmJpbmQodGhpcyksXG4gICAgICAgICAgZG5zTW9kZUNoYW5nZUNhbGxiYWNrOiB0aGlzLmNoYW5nZVJlbW90ZURuc01vZGUuYmluZCh0aGlzKSxcbiAgICAgICAgICBiZWNvbWVEbnNDYWxsYmFjazogdGhpcy5iZWNvbWVEbnNOb2RlLmJpbmQodGhpcylcbiAgICAgICAgfSk7XG4gICAgdGhpcy50YWJzXy5hdHRhY2hUb1J1bkxvb3AodGhpcy5ydW5Mb29wXyk7XG4gIH1cblxuICB0aGlzLnNlbmRQYW5lbF8gPSBuZXcgTmV0U2ltU2VuZFBhbmVsKCQoJyNuZXRzaW0tc2VuZCcpLCB0aGlzLmxldmVsLFxuICAgICAgdGhpcyk7XG5cbiAgdGhpcy5jaGFuZ2VFbmNvZGluZ3ModGhpcy5sZXZlbC5kZWZhdWx0RW5hYmxlZEVuY29kaW5ncyk7XG4gIHRoaXMuc2V0Q2h1bmtTaXplKHRoaXMubGV2ZWwuZGVmYXVsdENodW5rU2l6ZUJpdHMpO1xuICB0aGlzLnNldE15RGV2aWNlQml0UmF0ZSh0aGlzLmxldmVsLmRlZmF1bHRCaXRSYXRlQml0c1BlclNlY29uZCk7XG4gIHRoaXMuc2V0Um91dGVyQmFuZHdpZHRoKHRoaXMubGV2ZWwuZGVmYXVsdFJvdXRlckJhbmR3aWR0aCk7XG4gIHRoaXMuc2V0Um91dGVyTWVtb3J5KHRoaXMubGV2ZWwuZGVmYXVsdFJvdXRlck1lbW9yeSk7XG4gIHRoaXMuc2V0RG5zTW9kZSh0aGlzLmxldmVsLmRlZmF1bHREbnNNb2RlKTtcbiAgdGhpcy5yZW5kZXIoKTtcblxuICAvLyBUcnkgYW5kIGdyYWNlZnVsbHkgZGlzY29ubmVjdCB3aGVuIGNsb3NpbmcgdGhlIHdpbmRvd1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgdGhpcy5vbkJlZm9yZVVubG9hZF8uYmluZCh0aGlzKSk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd1bmxvYWQnLCB0aGlzLm9uVW5sb2FkXy5iaW5kKHRoaXMpKTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIF8uZGVib3VuY2UodGhpcy51cGRhdGVMYXlvdXQuYmluZCh0aGlzKSwgMjUwKSk7XG59O1xuXG4vKipcbiAqIEJlZm9yZS11bmxvYWQgaGFuZGxlciwgdXNlZCB0byB3YXJuIHRoZSB1c2VyIChpZiBuZWNlc3NhcnkpIG9mIHdoYXQgdGhleVxuICogYXJlIGFiYW5kb25pbmcgaWYgdGhleSBuYXZpZ2F0ZSBhd2F5IGZyb20gdGhlIHBhZ2UuXG4gKlxuICogVGhpcyBldmVudCBoYXMgc29tZSB3ZWlyZCBzcGVjaWFsIHByb3BlcnRpZXMgYW5kIGluY29uc2lzdGVudCBiZWhhdmlvclxuICogYWNyb3NzIGJyb3dzZXJzXG4gKlxuICogU2VlOlxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvRXZlbnRzL2JlZm9yZXVubG9hZFxuICogaHR0cDovL3d3dy56YWNobGVhdC5jb20vd2ViL2RvbnQtbGV0LXRoZS1kb29yLWhpdC15b3Utb251bmxvYWQtYW5kLW9uYmVmb3JldW5sb2FkL1xuICogaHR0cDovL3d3dy5odW5sb2NrLmNvbS9ibG9ncy9NYXN0ZXJpbmdfVGhlX0JhY2tfQnV0dG9uX1dpdGhfSmF2YXNjcmlwdFxuICpcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gSWYgd2Ugd2FudCB0byB3YXJuIHRoZSB1c2VyIGJlZm9yZSB0aGV5IGxlYXZlXG4gKiAgICAgICAgICB0aGUgcGFnZSwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gYSB3YXJuaW5nIHN0cmluZywgd2hpY2ggbWF5IG9yXG4gKiAgICAgICAgICBtYXkgbm90IGFjdHVhbGx5IGJlIHVzZWQgYnkgdGhlIGJyb3dzZXIgdG8gcHJlc2VudCBhIHdhcm5pbmcuICBJZlxuICogICAgICAgICAgd2UgZG9uJ3Qgd2FudCB0byB3YXJuIHRoZSB1c2VyLCB0aGlzIG1ldGhvZCBkb2Vzbid0IHJldHVybiBhbnl0aGluZy5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUub25CZWZvcmVVbmxvYWRfID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGlmICh3aW5kb3cuX19UZXN0SW50ZXJmYWNlICYmIHdpbmRvdy5fX1Rlc3RJbnRlcmZhY2UuaWdub3JlT25CZWZvcmVVbmxvYWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBObyBuZWVkIHRvIHdhcm4gYWJvdXQgbmF2aWdhdGluZyBhd2F5IGlmIHRoZSBzdHVkZW50IGlzIG5vdCBjb25uZWN0ZWQsXG4gIC8vIG9yIGlzIHN0aWxsIGluIHRoZSBsb2JieS5cbiAgaWYgKHRoaXMuaXNDb25uZWN0ZWRUb1JlbW90ZSgpKSB7XG4gICAgZXZlbnQucmV0dXJuVmFsdWUgPSBpMThuLm9uQmVmb3JlVW5sb2FkV2FybmluZygpO1xuICAgIHJldHVybiBpMThuLm9uQmVmb3JlVW5sb2FkV2FybmluZygpO1xuICB9XG59O1xuXG4vKipcbiAqIFVubG9hZCBoYW5kbGVyLiAgVXNlZCB0byBhdHRlbXB0IGEgY2xlYW4gZGlzY29ubmVjdCBmcm9tIHRoZSBzaW11bGF0aW9uXG4gKiB1c2luZyBzeW5jaHJvbm91cyBBSkFYIGNhbGxzIHRvIHJlbW92ZSBvdXIgb3duIHJvd3MgZnJvbSByZW1vdGUgc3RvcmFnZS5cbiAqXG4gKiBTZWU6XG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9FdmVudHMvdW5sb2FkXG4gKlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5vblVubG9hZF8gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmlzQ29ubmVjdGVkVG9TaGFyZCgpKSB7XG4gICAgdGhpcy5zeW5jaHJvbm91c0Rpc2Nvbm5lY3RGcm9tU2hhcmRfKCk7XG4gIH1cbn07XG5cbi8qKlxuICogV2hldGhlciB3ZSBhcmUgY3VycmVudGx5IGNvbm5lY3RlZCB0byBhIG5ldHNpbSBzaGFyZFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbk5ldFNpbS5wcm90b3R5cGUuaXNDb25uZWN0ZWRUb1NoYXJkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gKG51bGwgIT09IHRoaXMubXlOb2RlKTtcbn07XG5cbi8qKlxuICogV2hldGhlciB3ZSBhcmUgY3VycmVudGx5IGNvbm5lY3RlZCB0byBhIHNoYXJkIHdpdGggdGhlIGdpdmVuIElEXG4gKiBAcGFyYW0ge3N0cmluZ30gc2hhcmRJRFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbk5ldFNpbS5wcm90b3R5cGUuaXNDb25uZWN0ZWRUb1NoYXJkSUQgPSBmdW5jdGlvbiAoc2hhcmRJRCkge1xuICByZXR1cm4gdGhpcy5pc0Nvbm5lY3RlZFRvU2hhcmQoKSAmJiB0aGlzLnNoYXJkXy5pZCA9PT0gc2hhcmRJRDtcbn07XG5cbi8qKlxuICogRXN0YWJsaXNoZXMgYSBuZXcgY29ubmVjdGlvbiB0byBhIG5ldHNpbSBzaGFyZCwgY2xvc2luZyB0aGUgb2xkIG9uZVxuICogaWYgcHJlc2VudC5cbiAqIEBwYXJhbSB7IXN0cmluZ30gc2hhcmRJRFxuICogQHBhcmFtIHshc3RyaW5nfSBkaXNwbGF5TmFtZVxuICovXG5OZXRTaW0ucHJvdG90eXBlLmNvbm5lY3RUb1NoYXJkID0gZnVuY3Rpb24gKHNoYXJkSUQsIGRpc3BsYXlOYW1lKSB7XG4gIGlmICh0aGlzLmlzQ29ubmVjdGVkVG9TaGFyZCgpKSB7XG4gICAgbG9nZ2VyLndhcm4oXCJBdXRvLWNsb3NpbmcgcHJldmlvdXMgY29ubmVjdGlvbi4uLlwiKTtcbiAgICB0aGlzLmRpc2Nvbm5lY3RGcm9tU2hhcmQodGhpcy5jb25uZWN0VG9TaGFyZC5iaW5kKHRoaXMsIHNoYXJkSUQsIGRpc3BsYXlOYW1lKSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5zaGFyZF8gPSBuZXcgTmV0U2ltU2hhcmQoc2hhcmRJRCwgTmV0U2ltR2xvYmFscy5nZXRQdWJTdWJDb25maWcoKSk7XG4gIHRoaXMuY3JlYXRlTXlDbGllbnROb2RlXyhkaXNwbGF5TmFtZSwgZnVuY3Rpb24gKGVyciwgbXlOb2RlKSB7XG4gICAgdGhpcy5teU5vZGUgPSBteU5vZGU7XG4gICAgdGhpcy5zaGFyZENoYW5nZS5ub3RpZnlPYnNlcnZlcnModGhpcy5zaGFyZF8sIHRoaXMubXlOb2RlKTtcbiAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogR2l2ZW4gYSBsb2JieSB0YWJsZSBoYXMgYWxyZWFkeSBiZWVuIGNvbmZpZ3VyZWQsIGNvbm5lY3RzIHRvIHRoYXQgdGFibGVcbiAqIGJ5IGluc2VydGluZyBhIHJvdyBmb3Igb3Vyc2VsdmVzIGludG8gdGhhdCB0YWJsZSBhbmQgc2F2aW5nIHRoZSByb3cgSUQuXG4gKiBAcGFyYW0geyFzdHJpbmd9IGRpc3BsYXlOYW1lXG4gKiBAcGFyYW0geyFOb2RlU3R5bGVDYWxsYmFja30gb25Db21wbGV0ZSAtIHJlc3VsdCBpcyBuZXcgbG9jYWwgbm9kZVxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5jcmVhdGVNeUNsaWVudE5vZGVfID0gZnVuY3Rpb24gKGRpc3BsYXlOYW1lLCBvbkNvbXBsZXRlKSB7XG4gIE5ldFNpbUxvY2FsQ2xpZW50Tm9kZS5jcmVhdGUodGhpcy5zaGFyZF8sIGRpc3BsYXlOYW1lLCBmdW5jdGlvbiAoZXJyLCBub2RlKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgbG9nZ2VyLmVycm9yKFwiRmFpbGVkIHRvIGNyZWF0ZSBjbGllbnQgbm9kZTsgXCIgKyBlcnIubWVzc2FnZSk7XG4gICAgICBOZXRTaW1BbGVydC5lcnJvcihpMThuLmNyZWF0ZU15Q2xpZW50Tm9kZUVycm9yKCkpO1xuICAgICAgb25Db21wbGV0ZShlcnIsIG51bGwpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG5vZGUuc2V0TG9zdENvbm5lY3Rpb25DYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgICBOZXRTaW1BbGVydC53YXJuKGkxOG4uYWxlcnRDb25uZWN0aW9uUmVzZXQoKSk7XG4gICAgICB0aGlzLmRpc2Nvbm5lY3RGcm9tU2hhcmQoKTtcbiAgICB9LmJpbmQodGhpcykpO1xuICAgIG5vZGUuaW5pdGlhbGl6ZVNpbXVsYXRpb24odGhpcy5zZW50TWVzc2FnZUxvZ18sIHRoaXMucmVjZWl2ZWRNZXNzYWdlTG9nXyk7XG4gICAgb25Db21wbGV0ZShlcnIsIG5vZGUpO1xuICB9LmJpbmQodGhpcykpO1xufTtcblxuLyoqXG4gKiBTeW5jaHJvbm91cyBkaXNjb25uZWN0LCBmb3IgdXNlIHdoZW4gbmF2aWdhdGluZyBhd2F5IGZyb20gdGhlIHBhZ2VcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUuc3luY2hyb25vdXNEaXNjb25uZWN0RnJvbVNoYXJkXyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5teU5vZGUuc3RvcFNpbXVsYXRpb24oKTtcbiAgdGhpcy5teU5vZGUuc3luY2hyb25vdXNEZXN0cm95KCk7XG4gIHRoaXMubXlOb2RlID0gbnVsbDtcbiAgLy8gRG9uJ3Qgbm90aWZ5IG9ic2VydmVycywgdGhpcyBzaG91bGQgb25seSBiZSB1c2VkIHdoZW4gbmF2aWdhdGluZyBhd2F5XG4gIC8vIGZyb20gdGhlIHBhZ2UuXG59O1xuXG4vKipcbiAqIEVuZHMgdGhlIGNvbm5lY3Rpb24gdG8gdGhlIG5ldHNpbSBzaGFyZC5cbiAqIEBwYXJhbSB7Tm9kZVN0eWxlQ2FsbGJhY2t9IFtvbkNvbXBsZXRlXVxuICovXG5OZXRTaW0ucHJvdG90eXBlLmRpc2Nvbm5lY3RGcm9tU2hhcmQgPSBmdW5jdGlvbiAob25Db21wbGV0ZSkge1xuICBvbkNvbXBsZXRlID0gb25Db21wbGV0ZSB8fCBmdW5jdGlvbiAoKSB7fTtcblxuICBpZiAoIXRoaXMuaXNDb25uZWN0ZWRUb1NoYXJkKCkpIHtcbiAgICBsb2dnZXIud2FybihcIlJlZHVuZGFudCBkaXNjb25uZWN0IGNhbGwuXCIpO1xuICAgIG9uQ29tcGxldGUobnVsbCwgbnVsbCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRoaXMuaXNDb25uZWN0ZWRUb1JlbW90ZSgpKSB7XG4gICAgLy8gRGlzY29ubmVjdCwgZnJvbSB0aGUgcmVtb3RlIG5vZGUsIGFuZCB0cnkgdGhpcyBhZ2FpbiBvbiBjb21wbGV0aW9uLlxuICAgIHRoaXMuZGlzY29ubmVjdEZyb21SZW1vdGUodGhpcy5kaXNjb25uZWN0RnJvbVNoYXJkLmJpbmQodGhpcywgb25Db21wbGV0ZSkpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMubXlOb2RlLnN0b3BTaW11bGF0aW9uKCk7XG4gIHRoaXMubXlOb2RlLmRlc3Ryb3koZnVuY3Rpb24gKGVyciwgcmVzdWx0KSB7XG4gICAgaWYgKGVycikge1xuICAgICAgbG9nZ2VyLndhcm4oJ0Vycm9yIGRlc3Ryb3lpbmcgbm9kZTonICsgZXJyLm1lc3NhZ2UpO1xuICAgICAgLy8gRG9uJ3Qgc3RvcCBkaXNjb25uZWN0aW5nIG9uIGFuIGVycm9yIGhlcmU7IHdlIG1ha2UgYSBnb29kLWZhaXRoXG4gICAgICAvLyBlZmZvcnQgdG8gY2xlYW4gdXAgYWZ0ZXIgb3Vyc2VsdmVzLCBhbmQgbGV0IHRoZSBjbGVhbmluZyBzeXN0ZW0gdGFrZVxuICAgICAgLy8gY2FyZSBvZiB0aGUgcmVzdC5cbiAgICB9XG5cbiAgICB0aGlzLm15Tm9kZSA9IG51bGw7XG4gICAgdGhpcy5zaGFyZF8uZGlzY29ubmVjdCgpO1xuICAgIHRoaXMuc2hhcmRfID0gbnVsbDtcbiAgICB0aGlzLnNoYXJkQ2hhbmdlLm5vdGlmeU9ic2VydmVycyhudWxsLCBudWxsKTtcbiAgICBvbkNvbXBsZXRlKGVyciwgcmVzdWx0KTtcbiAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGxvY2FsIGNsaWVudCBpcyBjb25uZWN0ZWQgdG8gYSByZW1vdGUgbm9kZVxuICovXG5OZXRTaW0ucHJvdG90eXBlLmlzQ29ubmVjdGVkVG9SZW1vdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmlzQ29ubmVjdGVkVG9DbGllbnQoKSB8fCB0aGlzLmlzQ29ubmVjdGVkVG9Sb3V0ZXIoKTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge05ldFNpbU5vZGV9IHRoZSByZW1vdGUgbm9kZSBvdXIgY2xpZW50IGlzIGNvbm5lY3RlZCB0bywgb3IgbnVsbCBpZlxuICogICAgICAgICAgbm90IGNvbm5lY3RlZFxuICovXG5OZXRTaW0ucHJvdG90eXBlLmdldENvbm5lY3RlZFJlbW90ZU5vZGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjbGllbnQgPSB0aGlzLmdldENvbm5lY3RlZENsaWVudCgpO1xuICB2YXIgcm91dGVyID0gdGhpcy5nZXRDb25uZWN0ZWRSb3V0ZXIoKTtcbiAgcmV0dXJuIGNsaWVudCA/IGNsaWVudCA6IHJvdXRlcjtcbn07XG5cbi8qKlxuICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGxvY2FsIGNsaWVudCBoYXMgYSBtdXR1YWwgUDJQIGNvbm5lY3Rpb24gdG9cbiAqICAgICAgICAgIGFub3RoZXIgY2xpZW50LlxuICovXG5OZXRTaW0ucHJvdG90eXBlLmlzQ29ubmVjdGVkVG9DbGllbnQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhISh0aGlzLmdldENvbm5lY3RlZENsaWVudCgpKTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge05ldFNpbUNsaWVudE5vZGV9IHRoZSBjbGllbnQgbm9kZSBvdXIgY2xpZW50IGlzIGNvbm5lY3RlZCB0bywgb3JcbiAqICAgICAgICAgIG51bGwgaWYgbm90IGNvbm5lY3RlZCB0byBhbm90aGVyIGNsaWVudC5cbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5nZXRDb25uZWN0ZWRDbGllbnQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmlzQ29ubmVjdGVkVG9TaGFyZCgpKSB7XG4gICAgcmV0dXJuIHRoaXMubXlOb2RlLm15UmVtb3RlQ2xpZW50O1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuLyoqXG4gKiBXaGV0aGVyIG91ciBjbGllbnQgbm9kZSBpcyBjb25uZWN0ZWQgdG8gYSByb3V0ZXIgbm9kZS5cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5OZXRTaW0ucHJvdG90eXBlLmlzQ29ubmVjdGVkVG9Sb3V0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhISh0aGlzLmdldENvbm5lY3RlZFJvdXRlcigpKTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge05ldFNpbVJvdXRlck5vZGV9IHRoZSByb3V0ZXIgbm9kZSBvdXIgY2xpZW50IGlzIGNvbm5lY3RlZCB0bywgb3JcbiAqICAgICAgICAgIG51bGwgaWYgbm90IGNvbm5lY3RlZCB0byBhIHJvdXRlci5cbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5nZXRDb25uZWN0ZWRSb3V0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmlzQ29ubmVjdGVkVG9TaGFyZCgpKSB7XG4gICAgcmV0dXJuIHRoaXMubXlOb2RlLmdldE15Um91dGVyKCk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG4vKipcbiAqIEVzdGFibGlzaCBhIGNvbm5lY3Rpb24gYmV0d2VlbiB0aGUgbG9jYWwgY2xpZW50IGFuZCB0aGUgZ2l2ZW5cbiAqIHNpbXVsYXRlZCByb3V0ZXIuXG4gKiBAcGFyYW0ge251bWJlcn0gcm91dGVySURcbiAqIEBwYXJhbSB7Tm9kZVN0eWxlQ2FsbGJhY2t9IG9uQ29tcGxldGVcbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5jb25uZWN0VG9Sb3V0ZXIgPSBmdW5jdGlvbiAocm91dGVySUQsIG9uQ29tcGxldGUpIHtcbiAgaWYgKHRoaXMuaXNDb25uZWN0ZWRUb1JlbW90ZSgpKSB7XG4gICAgLy8gRGlzY29ubmVjdCBhbmQgdHJ5IHRvIGNvbm5lY3QgYWdhaW4gd2hlbiB3ZSdyZSBkb25lLlxuICAgIGxvZ2dlci53YXJuKFwiQXV0by1kaXNjb25uZWN0aW5nIGZyb20gcHJldmlvdXMgcm91dGVyLlwiKTtcbiAgICB0aGlzLmRpc2Nvbm5lY3RGcm9tUmVtb3RlKHRoaXMuY29ubmVjdFRvUm91dGVyLmJpbmQodGhpcywgcm91dGVySUQsIG9uQ29tcGxldGUpKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIE5ldFNpbVJvdXRlck5vZGUuZ2V0KHJvdXRlcklELCB0aGlzLnNoYXJkXywgZnVuY3Rpb24gKGVyciwgcm91dGVyKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgbG9nZ2VyLndhcm4oJ0ZhaWxlZCB0byBmaW5kIHJvdXRlciB3aXRoIElEICcgKyByb3V0ZXJJRCArICc7ICcgK1xuICAgICAgICAgIGVyci5tZXNzYWdlKTtcbiAgICAgIG9uQ29tcGxldGUoZXJyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzZWxmLm15Tm9kZS5jb25uZWN0VG9Sb3V0ZXIocm91dGVyLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGxvZ2dlci53YXJuKCdGYWlsZWQgdG8gY29ubmVjdCB0byAnICsgcm91dGVyLmdldERpc3BsYXlOYW1lKCkgKyAnOyAnICtcbiAgICAgICAgICAgIGVyci5tZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIG9uQ29tcGxldGUoZXJyLCByb3V0ZXIpO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbi8qKlxuICogRGlzY29ubmVjdHMgb3VyIGNsaWVudCBub2RlIGZyb20gdGhlIGN1cnJlbnRseSBjb25uZWN0ZWQgcmVtb3RlIG5vZGUuXG4gKiBEZXN0cm95cyB0aGUgc2hhcmVkIHdpcmUuXG4gKiBAcGFyYW0ge05vZGVTdHlsZUNhbGxiYWNrfSBbb25Db21wbGV0ZV0gb3B0aW9uYWwgZnVuY3Rpb24gdG8gY2FsbCB3aGVuXG4gKiAgICAgICAgZGlzY29ubmVjdCBpcyBjb21wbGV0ZVxuICovXG5OZXRTaW0ucHJvdG90eXBlLmRpc2Nvbm5lY3RGcm9tUmVtb3RlID0gZnVuY3Rpb24gKG9uQ29tcGxldGUpIHtcbiAgb25Db21wbGV0ZSA9IHV0aWxzLnZhbHVlT3Iob25Db21wbGV0ZSwgZnVuY3Rpb24gKCkge30pO1xuICB0aGlzLm15Tm9kZS5kaXNjb25uZWN0UmVtb3RlKG9uQ29tcGxldGUpO1xufTtcblxuLyoqXG4gKiBBc3luY2hyb25vdXMgZmV0Y2ggb2YgdGhlIGxhdGVzdCBtZXNzYWdlIHNoYXJlZCBiZXR3ZWVuIHRoZSBsb2NhbFxuICogbm9kZSBhbmQgaXRzIGNvbm5lY3RlZCByZW1vdGUuXG4gKiBVc2VkIG9ubHkgaW4gc2ltcGxleCAmIGJpdC1ncmFudWxhciBtb2RlLlxuICogQHBhcmFtIHshTm9kZVN0eWxlQ2FsbGJhY2t9IG9uQ29tcGxldGVcbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5yZWNlaXZlQml0ID0gZnVuY3Rpb24gKG9uQ29tcGxldGUpIHtcbiAgdGhpcy5teU5vZGUuZ2V0TGF0ZXN0TWVzc2FnZU9uU2ltcGxleFdpcmUob25Db21wbGV0ZSk7XG59O1xuXG4vKipcbiAqIFVwZGF0ZSBlbmNvZGluZy12aWV3IHNldHRpbmcgYWNyb3NzIHRoZSB3aG9sZSBhcHAuXG4gKlxuICogUHJvcGFnYXRlcyB0aGUgY2hhbmdlIGRvd24gaW50byByZWxldmFudCBjaGlsZCBjb21wb25lbnRzLCBwb3NzaWJseVxuICogaW5jbHVkaW5nIHRoZSBjb250cm9sIHRoYXQgaW5pdGlhdGVkIHRoZSBjaGFuZ2U7IGluIHRoYXQgY2FzZSwgcmUtc2V0dGluZ1xuICogdGhlIHZhbHVlIHNob3VsZCBiZSBhIG5vLW9wIGFuZCBzYWZlIHRvIGRvLlxuICpcbiAqIEBwYXJhbSB7RW5jb2RpbmdUeXBlW119IG5ld0VuY29kaW5nc1xuICovXG5OZXRTaW0ucHJvdG90eXBlLmNoYW5nZUVuY29kaW5ncyA9IGZ1bmN0aW9uIChuZXdFbmNvZGluZ3MpIHtcbiAgdGhpcy5lbmFibGVkRW5jb2RpbmdzXyA9IG5ld0VuY29kaW5ncztcbiAgaWYgKHRoaXMudGFic18pIHtcbiAgICB0aGlzLnRhYnNfLnNldEVuY29kaW5ncyhuZXdFbmNvZGluZ3MpO1xuICB9XG4gIHRoaXMucmVjZWl2ZWRNZXNzYWdlTG9nXy5zZXRFbmNvZGluZ3MobmV3RW5jb2RpbmdzKTtcbiAgdGhpcy5zZW50TWVzc2FnZUxvZ18uc2V0RW5jb2RpbmdzKG5ld0VuY29kaW5ncyk7XG4gIHRoaXMuc2VuZFBhbmVsXy5zZXRFbmNvZGluZ3MobmV3RW5jb2RpbmdzKTtcbiAgdGhpcy52aXN1YWxpemF0aW9uXy5zZXRFbmNvZGluZ3MobmV3RW5jb2RpbmdzKTtcbiAgdGhpcy51cGRhdGVMYXlvdXQoKTtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBjdXJyZW50bHkgZW5hYmxlZCBlbmNvZGluZyB0eXBlcy5cbiAqIEByZXR1cm5zIHtFbmNvZGluZ1R5cGVbXX1cbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5nZXRFbmNvZGluZ3MgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmVuYWJsZWRFbmNvZGluZ3NfO1xufTtcblxuLyoqXG4gKiBVcGRhdGUgY2h1bmstc2l6ZS9ieXRlc2l6ZSBzZXR0aW5nIGFjcm9zcyB0aGUgd2hvbGUgYXBwLlxuICpcbiAqIFByb3BhZ2F0ZXMgdGhlIGNoYW5nZSBkb3duIGludG8gcmVsZXZhbnQgY2hpbGQgY29tcG9uZW50cywgcG9zc2libHlcbiAqIGluY2x1ZGluZyB0aGUgY29udHJvbCB0aGF0IGluaXRpYXRlZCB0aGUgY2hhbmdlOyBpbiB0aGF0IGNhc2UsIHJlLXNldHRpbmdcbiAqIHRoZSB2YWx1ZSBzaG91bGQgYmUgYSBuby1vcCBhbmQgc2FmZSB0byBkby5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gbmV3Q2h1bmtTaXplXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUuc2V0Q2h1bmtTaXplID0gZnVuY3Rpb24gKG5ld0NodW5rU2l6ZSkge1xuICB0aGlzLmNodW5rU2l6ZV8gPSBuZXdDaHVua1NpemU7XG4gIGlmICh0aGlzLnRhYnNfKSB7XG4gICAgdGhpcy50YWJzXy5zZXRDaHVua1NpemUobmV3Q2h1bmtTaXplKTtcbiAgfVxuICB0aGlzLnJlY2VpdmVkTWVzc2FnZUxvZ18uc2V0Q2h1bmtTaXplKG5ld0NodW5rU2l6ZSk7XG4gIHRoaXMuc2VudE1lc3NhZ2VMb2dfLnNldENodW5rU2l6ZShuZXdDaHVua1NpemUpO1xuICB0aGlzLnNlbmRQYW5lbF8uc2V0Q2h1bmtTaXplKG5ld0NodW5rU2l6ZSk7XG59O1xuXG4vKipcbiAqIFVwZGF0ZSBiaXRyYXRlIGZvciB0aGUgbG9jYWwgZGV2aWNlLCB3aGljaCBhZmZlY3RzIHNlbmQtYW5pbWF0aW9uIHNwZWVkLlxuICogQHBhcmFtIHtudW1iZXJ9IG5ld0JpdFJhdGUgaW4gYml0cyBwZXIgc2Vjb25kXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUuc2V0TXlEZXZpY2VCaXRSYXRlID0gZnVuY3Rpb24gKG5ld0JpdFJhdGUpIHtcbiAgdGhpcy5teURldmljZUJpdFJhdGVfID0gbmV3Qml0UmF0ZTtcbiAgaWYgKHRoaXMudGFic18pIHtcbiAgICB0aGlzLnRhYnNfLnNldE15RGV2aWNlQml0UmF0ZShuZXdCaXRSYXRlKTtcbiAgfVxuICB0aGlzLnNlbmRQYW5lbF8uc2V0Qml0UmF0ZShuZXdCaXRSYXRlKTtcbn07XG5cbi8qKiBAcGFyYW0ge251bWJlcn0gY3JlYXRpb25UaW1lc3RhbXBNcyAqL1xuTmV0U2ltLnByb3RvdHlwZS5zZXRSb3V0ZXJDcmVhdGlvblRpbWUgPSBmdW5jdGlvbiAoY3JlYXRpb25UaW1lc3RhbXBNcykge1xuICBpZiAodGhpcy50YWJzXykge1xuICAgIHRoaXMudGFic18uc2V0Um91dGVyQ3JlYXRpb25UaW1lKGNyZWF0aW9uVGltZXN0YW1wTXMpO1xuICB9XG59O1xuXG4vKipcbiAqIFVwZGF0ZSByb3V0ZXIgYmFuZHdpZHRoIGFjcm9zcyB0aGUgYXBwLlxuICpcbiAqIFByb3BhZ2F0ZXMgdGhlIGNoYW5nZSBkb3duIGludG8gcmVsZXZhbnQgY2hpbGQgY29tcG9uZW50cywgcG9zc2libHkgaW5jbHVkaW5nXG4gKiB0aGUgY29udHJvbCB0aGF0IGluaXRpYXRlZCB0aGUgY2hhbmdlOyBpbiB0aGF0IGNhc2UsIHJlLXNldHRpbmcgdGhlIHZhbHVlXG4gKiBzaG91bGQgYmUgYSBuby1vcCBhbmQgc2FmZSB0byBkby5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gbmV3QmFuZHdpZHRoIGluIGJpdHMvc2Vjb25kXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUuc2V0Um91dGVyQmFuZHdpZHRoID0gZnVuY3Rpb24gKG5ld0JhbmR3aWR0aCkge1xuICBpZiAodGhpcy50YWJzXykge1xuICAgIHRoaXMudGFic18uc2V0Um91dGVyQmFuZHdpZHRoKG5ld0JhbmR3aWR0aCk7XG4gIH1cbn07XG5cbi8qKlxuICogU2V0cyByb3V0ZXIgYmFuZHdpZHRoIGFjcm9zcyB0aGUgc2ltdWxhdGlvbiwgcHJvYWdhdGluZyB0aGUgY2hhbmdlIHRvIG90aGVyXG4gKiBjbGllbnRzLlxuICogQHBhcmFtIHtudW1iZXJ9IG5ld0JhbmR3aWR0aCBpbiBiaXRzL3NlY29uZFxuICovXG5OZXRTaW0ucHJvdG90eXBlLmNoYW5nZVJlbW90ZVJvdXRlckJhbmR3aWR0aCA9IGZ1bmN0aW9uIChuZXdCYW5kd2lkdGgpIHtcbiAgdGhpcy5zZXRSb3V0ZXJCYW5kd2lkdGgobmV3QmFuZHdpZHRoKTtcbiAgaWYgKHRoaXMuaXNDb25uZWN0ZWRUb1JvdXRlcigpKSB7XG4gICAgdGhpcy5nZXRDb25uZWN0ZWRSb3V0ZXIoKS5zZXRCYW5kd2lkdGgobmV3QmFuZHdpZHRoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBVcGRhdGUgcm91dGVyIG1lbW9yeSBhY3Jvc3MgdGhlIGFwcC5cbiAqXG4gKiBQcm9wYWdhdGVzIHRoZSBjaGFuZ2UgZG93biBpbnRvIHJlbGV2YW50IGNoaWxkIGNvbXBvbmVudHMsIHBvc3NpYmx5IGluY2x1ZGluZ1xuICogdGhlIGNvbnRyb2wgdGhhdCBpbml0aWF0ZWQgdGhlIGNoYW5nZTsgaW4gdGhhdCBjYXNlLCByZS1zZXR0aW5nIHRoZSB2YWx1ZVxuICogc2hvdWxkIGJlIGEgbm8tb3AgYW5kIHNhZmUgdG8gZG8uXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IG5ld01lbW9yeSBpbiBiaXRzXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUuc2V0Um91dGVyTWVtb3J5ID0gZnVuY3Rpb24gKG5ld01lbW9yeSkge1xuICBpZiAodGhpcy50YWJzXykge1xuICAgIHRoaXMudGFic18uc2V0Um91dGVyTWVtb3J5KG5ld01lbW9yeSk7XG4gIH1cbn07XG5cbi8qKlxuICogU2V0cyByb3V0ZXIgbWVtb3J5IGNhcGFjaXR5IGFjcm9zcyB0aGUgc2ltdWxhdGlvbiwgcHJvcGFnYXRpbmcgdGhlIGNoYW5nZVxuICogdG8gb3RoZXIgY2xpZW50cy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBuZXdNZW1vcnkgaW4gYml0c1xuICovXG5OZXRTaW0ucHJvdG90eXBlLmNoYW5nZVJlbW90ZVJvdXRlck1lbW9yeSA9IGZ1bmN0aW9uIChuZXdNZW1vcnkpIHtcbiAgdGhpcy5zZXRSb3V0ZXJNZW1vcnkobmV3TWVtb3J5KTtcbiAgaWYgKHRoaXMuaXNDb25uZWN0ZWRUb1JvdXRlcigpKSB7XG4gICAgdGhpcy5nZXRDb25uZWN0ZWRSb3V0ZXIoKS5zZXRNZW1vcnkobmV3TWVtb3J5KTtcbiAgfVxufTtcblxuLyoqXG4gKiBVcGRhdGUgRE5TIG1vZGUgYWNyb3NzIHRoZSB3aG9sZSBhcHAuXG4gKlxuICogUHJvcGFnYXRlcyB0aGUgY2hhbmdlIGRvd24gaW50byByZWxldmFudCBjaGlsZCBjb21wb25lbnRzLCBwb3NzaWJseVxuICogaW5jbHVkaW5nIHRoZSBjb250cm9sIHRoYXQgaW5pdGlhdGVkIHRoZSBjaGFuZ2U7IGluIHRoYXQgY2FzZSwgcmUtc2V0dGluZ1xuICogdGhlIHZhbHVlIHNob3VsZCBiZSBhIG5vLW9wIGFuZCBzYWZlIHRvIGRvLlxuICpcbiAqIEBwYXJhbSB7RG5zTW9kZX0gbmV3RG5zTW9kZVxuICovXG5OZXRTaW0ucHJvdG90eXBlLnNldERuc01vZGUgPSBmdW5jdGlvbiAobmV3RG5zTW9kZSkge1xuICB0aGlzLmRuc01vZGVfID0gbmV3RG5zTW9kZTtcbiAgaWYgKHRoaXMudGFic18pIHtcbiAgICB0aGlzLnRhYnNfLnNldERuc01vZGUobmV3RG5zTW9kZSk7XG4gIH1cbiAgdGhpcy52aXN1YWxpemF0aW9uXy5zZXREbnNNb2RlKG5ld0Ruc01vZGUpO1xufTtcblxuLyoqXG4gKiBHZXQgY3VycmVudCBETlMgbW9kZS5cbiAqIEByZXR1cm5zIHtEbnNNb2RlfVxuICovXG5OZXRTaW0ucHJvdG90eXBlLmdldERuc01vZGUgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmRuc01vZGVfO1xufTtcblxuLyoqXG4gKiBTZXRzIEROUyBtb2RlIGFjcm9zcyB0aGUgd2hvbGUgc2ltdWxhdGlvbiwgcHJvcGFnYXRpbmcgdGhlIGNoYW5nZVxuICogdG8gb3RoZXIgY2xpZW50cy5cbiAqIEBwYXJhbSB7RG5zTW9kZX0gbmV3RG5zTW9kZVxuICovXG5OZXRTaW0ucHJvdG90eXBlLmNoYW5nZVJlbW90ZURuc01vZGUgPSBmdW5jdGlvbiAobmV3RG5zTW9kZSkge1xuICB0aGlzLnNldERuc01vZGUobmV3RG5zTW9kZSk7XG4gIGlmICh0aGlzLmlzQ29ubmVjdGVkVG9Sb3V0ZXIoKSkge1xuICAgIHRoaXMuZ2V0Q29ubmVjdGVkUm91dGVyKCkuc2V0RG5zTW9kZShuZXdEbnNNb2RlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzRG5zTm9kZVxuICovXG5OZXRTaW0ucHJvdG90eXBlLnNldElzRG5zTm9kZSA9IGZ1bmN0aW9uIChpc0Ruc05vZGUpIHtcbiAgaWYgKHRoaXMudGFic18pIHtcbiAgICB0aGlzLnRhYnNfLnNldElzRG5zTm9kZShpc0Ruc05vZGUpO1xuICB9XG5cbiAgaWYgKHRoaXMuaXNDb25uZWN0ZWRUb1JvdXRlcigpKSB7XG4gICAgdGhpcy5zZXREbnNUYWJsZUNvbnRlbnRzKHRoaXMuZ2V0Q29ubmVjdGVkUm91dGVyKCkuZ2V0QWRkcmVzc1RhYmxlKCkpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBkbnNOb2RlSURcbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5zZXREbnNOb2RlSUQgPSBmdW5jdGlvbiAoZG5zTm9kZUlEKSB7XG4gIHRoaXMudmlzdWFsaXphdGlvbl8uc2V0RG5zTm9kZUlEKGRuc05vZGVJRCk7XG59O1xuXG4vKipcbiAqIFRlbGxzIHNpbXVsYXRpb24gdGhhdCB3ZSB3YW50IHRvIGJlY29tZSB0aGUgRE5TIG5vZGUgZm9yIG91clxuICogY29ubmVjdGVkIHJvdXRlci5cbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5iZWNvbWVEbnNOb2RlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnNldElzRG5zTm9kZSh0cnVlKTtcbiAgaWYgKHRoaXMubXlOb2RlICYmIHRoaXMubXlOb2RlLmdldE15Um91dGVyKCkpIHtcbiAgICAvLyBTVEFURSBJUyBUSEUgUk9PVCBPRiBBTEwgRVZJTFxuICAgIHZhciBteU5vZGUgPSB0aGlzLm15Tm9kZTtcbiAgICB2YXIgcm91dGVyID0gbXlOb2RlLmdldE15Um91dGVyKCk7XG4gICAgcm91dGVyLmRuc05vZGVJRCA9IG15Tm9kZS5lbnRpdHlJRDtcbiAgICByb3V0ZXIudXBkYXRlKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtBcnJheX0gdGFibGVDb250ZW50c1xuICovXG5OZXRTaW0ucHJvdG90eXBlLnNldERuc1RhYmxlQ29udGVudHMgPSBmdW5jdGlvbiAodGFibGVDb250ZW50cykge1xuICBpZiAodGhpcy50YWJzXykge1xuICAgIHRoaXMudGFic18uc2V0RG5zVGFibGVDb250ZW50cyh0YWJsZUNvbnRlbnRzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5fSBsb2dEYXRhXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUuc2V0Um91dGVyTG9nRGF0YSA9IGZ1bmN0aW9uIChsb2dEYXRhKSB7XG4gIGlmICh0aGlzLnRhYnNfKSB7XG4gICAgdGhpcy50YWJzXy5zZXRSb3V0ZXJMb2dEYXRhKGxvZ0RhdGEpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBxdWV1ZWRQYWNrZXRDb3VudFxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5zZXRSb3V0ZXJRdWV1ZWRQYWNrZXRDb3VudF8gPSBmdW5jdGlvbiAocXVldWVkUGFja2V0Q291bnQpIHtcbiAgaWYgKHRoaXMudGFic18pIHtcbiAgICB0aGlzLnRhYnNfLnNldFJvdXRlclF1ZXVlZFBhY2tldENvdW50KHF1ZXVlZFBhY2tldENvdW50KTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdXNlZE1lbW9yeUluQml0c1xuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5zZXRSb3V0ZXJNZW1vcnlJblVzZV8gPSBmdW5jdGlvbiAodXNlZE1lbW9yeUluQml0cykge1xuICBpZiAodGhpcy50YWJzXykge1xuICAgIHRoaXMudGFic18uc2V0Um91dGVyTWVtb3J5SW5Vc2UodXNlZE1lbW9yeUluQml0cyk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGRhdGFSYXRlQml0c1BlclNlY29uZFxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5zZXRSb3V0ZXJEYXRhUmF0ZV8gPSBmdW5jdGlvbiAoZGF0YVJhdGVCaXRzUGVyU2Vjb25kKSB7XG4gIGlmICh0aGlzLnRhYnNfKSB7XG4gICAgdGhpcy50YWJzXy5zZXRSb3V0ZXJEYXRhUmF0ZShkYXRhUmF0ZUJpdHNQZXJTZWNvbmQpO1xuICB9XG59O1xuXG4vKipcbiAqIExvYWQgYXVkaW8gYXNzZXRzIGZvciB0aGlzIGFwcFxuICogVE9ETyAoYmJ1Y2hhbmFuKTogT3VnaHQgdG8gcHVsbCB0aGlzIGludG8gYW4gYXVkaW8gbWFuYWdlbWVudCBtb2R1bGVcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUubG9hZEF1ZGlvXyA9IGZ1bmN0aW9uICgpIHtcbn07XG5cbi8qKlxuICogUmVwbGFjZXMgU3R1ZGlvQXBwLmNvbmZpZ3VyZURvbS5cbiAqIFNob3VsZCBiZSBib3VuZCBhZ2FpbnN0IFN0dWRpb0FwcCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgU2hvdWxkIGF0IGxlYXN0IGNvbnRhaW5cbiAqICAgY29udGFpbmVySWQ6IElEIG9mIGEgcGFyZW50IERPTSBlbGVtZW50IGZvciBhcHAgY29udGVudFxuICogICBodG1sOiBDb250ZW50IHRvIHB1dCBpbnNpZGUgI2NvbnRhaW5lcklkXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW0uY29uZmlndXJlRG9tT3ZlcnJpZGVfID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29uZmlnLmNvbnRhaW5lcklkKTtcbiAgY29udGFpbmVyLmlubmVySFRNTCA9IGNvbmZpZy5odG1sO1xuXG4gIHZhciB2aXpIZWlnaHQgPSB0aGlzLk1JTl9XT1JLU1BBQ0VfSEVJR0hUO1xuICB2YXIgdmlzdWFsaXphdGlvbkNvbHVtbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZXRzaW0tbGVmdGNvbCcpO1xuXG4gIGlmIChjb25maWcucGluV29ya3NwYWNlVG9Cb3R0b20pIHtcbiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcbiAgICBjb250YWluZXIuY2xhc3NOYW1lID0gY29udGFpbmVyLmNsYXNzTmFtZSArIFwiIHBpbl9ib3R0b21cIjtcbiAgICB2aXN1YWxpemF0aW9uQ29sdW1uLmNsYXNzTmFtZSA9IHZpc3VhbGl6YXRpb25Db2x1bW4uY2xhc3NOYW1lICsgXCIgcGluX2JvdHRvbVwiO1xuICB9IGVsc2Uge1xuICAgIHZpc3VhbGl6YXRpb25Db2x1bW4uc3R5bGUubWluSGVpZ2h0ID0gdml6SGVpZ2h0ICsgJ3B4JztcbiAgICBjb250YWluZXIuc3R5bGUubWluSGVpZ2h0ID0gdml6SGVpZ2h0ICsgJ3B4JztcbiAgfVxufTtcblxuLyoqXG4gKiBSZXNpemUgdGhlIGxlZnQgY29sdW1uIHNvIGl0IHBpbnMgYWJvdmUgdGhlIGZvb3Rlci5cbiAqL1xuZnVuY3Rpb24gcmVzaXplTGVmdENvbHVtblRvU2l0QWJvdmVGb290ZXIoKSB7XG4gIHZhciBwaW5uZWRMZWZ0Q29sdW1uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI25ldHNpbS1sZWZ0Y29sLnBpbl9ib3R0b20nKTtcbiAgaWYgKCFwaW5uZWRMZWZ0Q29sdW1uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHNtYWxsRm9vdGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3BhZ2Utc21hbGwtZm9vdGVyIC5zbWFsbC1mb290ZXItYmFzZScpO1xuXG4gIHZhciBib3R0b20gPSAwO1xuICBpZiAoc21hbGxGb290ZXIpIHtcbiAgICB2YXIgY29kZUFwcCA9ICQoJyNjb2RlQXBwJyk7XG4gICAgYm90dG9tICs9ICQoc21hbGxGb290ZXIpLm91dGVySGVpZ2h0KHRydWUpO1xuICAgIC8vIEZvb3RlciBpcyByZWxhdGl2ZSB0byB0aGUgZG9jdW1lbnQsIG5vdCBjb2RlQXBwLCBzbyB3ZSBuZWVkIHRvXG4gICAgLy8gcmVtb3ZlIHRoZSBjb2RlQXBwIGJvdHRvbSBvZmZzZXQgdG8gZ2V0IHRoZSBjb3JyZWN0IG1hcmdpbi5cbiAgICBib3R0b20gLT0gcGFyc2VJbnQoY29kZUFwcC5jc3MoJ2JvdHRvbScpLCAxMCk7XG4gIH1cblxuICBwaW5uZWRMZWZ0Q29sdW1uLnN0eWxlLmJvdHRvbSA9IGJvdHRvbSArICdweCc7XG59XG5cbmZ1bmN0aW9uIHJlc2l6ZUZvb3RlclRvRml0VG9MZWZ0T2ZDb250ZW50KCkge1xuICB2YXIgbGVmdENvbHVtbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNuZXRzaW0tbGVmdGNvbC5waW5fYm90dG9tJyk7XG4gIHZhciBpbnN0cnVjdGlvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW5zdHJ1Y3Rpb25zJyk7XG4gIHZhciBzbWFsbEZvb3RlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwYWdlLXNtYWxsLWZvb3RlciAuc21hbGwtZm9vdGVyLWJhc2UnKTtcblxuICBpZiAoIXNtYWxsRm9vdGVyKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHBhZGRpbmcgPSBwYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShzbWFsbEZvb3RlcilbXCJwYWRkaW5nLWxlZnRcIl0pO1xuXG4gIHZhciBib3VuZGluZ1dpZHRoO1xuICBpZiAobGVmdENvbHVtbiAmJiAkKGxlZnRDb2x1bW4pLmlzKCc6dmlzaWJsZScpKSB7XG4gICAgYm91bmRpbmdXaWR0aCA9IGxlZnRDb2x1bW4uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkucmlnaHQ7XG4gIH0gZWxzZSBpZiAoaW5zdHJ1Y3Rpb25zICYmICQoaW5zdHJ1Y3Rpb25zKS5pcygnOnZpc2libGUnKSkge1xuICAgIGJvdW5kaW5nV2lkdGggPSBpbnN0cnVjdGlvbnMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkucmlnaHQ7XG4gIH1cblxuICBzbWFsbEZvb3Rlci5zdHlsZS5tYXhXaWR0aCA9IChib3VuZGluZ1dpZHRoKSA/IChib3VuZGluZ1dpZHRoIC0gcGFkZGluZykgKyAncHgnIDogbnVsbDtcbn1cblxudmFyIG5ldHNpbURlYm91bmNlZFJlc2l6ZUZvb3RlciA9IF8uZGVib3VuY2UoZnVuY3Rpb24gKCkge1xuICByZXNpemVGb290ZXJUb0ZpdFRvTGVmdE9mQ29udGVudCgpO1xuICByZXNpemVMZWZ0Q29sdW1uVG9TaXRBYm92ZUZvb3RlcigpO1xufSwgMTApO1xuXG4vKipcbiAqIFJlcGxhY2VzIFN0dWRpb0FwcC5vblJlc2l6ZVxuICogU2hvdWxkIGJlIGJvdW5kIGFnYWluc3QgU3R1ZGlvQXBwIGluc3RhbmNlLlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltLm9uUmVzaXplT3ZlcnJpZGVfID0gZnVuY3Rpb24oKSB7XG4gIHZhciBkaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwY29udGFpbmVyJyk7XG4gIHZhciBkaXZQYXJlbnQgPSBkaXYucGFyZW50Tm9kZTtcbiAgdmFyIHBhcmVudFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZGl2UGFyZW50KTtcbiAgdmFyIHBhcmVudFdpZHRoID0gcGFyc2VJbnQocGFyZW50U3R5bGUud2lkdGgsIDEwKTtcbiAgZGl2LnN0eWxlLnRvcCA9IGRpdlBhcmVudC5vZmZzZXRUb3AgKyAncHgnO1xuICBkaXYuc3R5bGUud2lkdGggPSBwYXJlbnRXaWR0aCArICdweCc7XG5cbiAgbmV0c2ltRGVib3VuY2VkUmVzaXplRm9vdGVyKCk7XG59O1xuXG4vKipcbiAqIFBhc3N0aHJvdWdoIHRvIGxvY2FsIFwic3RhdGljXCIgbmV0c2ltRGVib3VuY2VSZXNpemVGb290ZXIgbWV0aG9kXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUuZGVib3VuY2VkUmVzaXplRm9vdGVyID0gZnVuY3Rpb24gKCkge1xuICBuZXRzaW1EZWJvdW5jZWRSZXNpemVGb290ZXIoKTtcbn07XG5cbi8qKlxuICogUmUtcmVuZGVyIHBhcnRzIG9mIHRoZSBwYWdlIHRoYXQgY2FuIGJlIHJlLXJlbmRlcmVkIGluIHBsYWNlLlxuICovXG5OZXRTaW0ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuaXNDb25uZWN0ZWRUb1JlbW90ZSgpKSB7XG4gICAgdmFyIG15QWRkcmVzcyA9IHRoaXMubXlOb2RlLmdldEFkZHJlc3MoKTtcblxuICAgIC8vIFN3YXAgaW4gJ2Nvbm5lY3RlZCcgZGl2XG4gICAgdGhpcy5tYWluQ29udGFpbmVyXy5maW5kKCcjbmV0c2ltLWRpc2Nvbm5lY3RlZCcpLmhpZGUoKTtcbiAgICB0aGlzLm1haW5Db250YWluZXJfLmZpbmQoJyNuZXRzaW0tY29ubmVjdGVkJykuc2hvdygpO1xuXG4gICAgLy8gUmVuZGVyIHJpZ2h0IGNvbHVtblxuICAgIHRoaXMuc2VuZFBhbmVsXy5zZXRGcm9tQWRkcmVzcyhteUFkZHJlc3MpO1xuXG4gICAgLy8gUmVuZGVyIGxlZnQgY29sdW1uXG4gICAgaWYgKHRoaXMuc3RhdHVzUGFuZWxfKSB7XG4gICAgICB0aGlzLnN0YXR1c1BhbmVsXy5yZW5kZXIoe1xuICAgICAgICBteUhvc3RuYW1lOiB0aGlzLm15Tm9kZS5nZXRIb3N0bmFtZSgpLFxuICAgICAgICBteUFkZHJlc3M6IG15QWRkcmVzcyxcbiAgICAgICAgcmVtb3RlTm9kZU5hbWU6IHRoaXMuZ2V0Q29ubmVjdGVkUmVtb3RlTm9kZSgpLmdldERpc3BsYXlOYW1lKCksXG4gICAgICAgIHNoYXJlTGluazogdGhpcy5sb2JieV8uZ2V0U2hhcmVMaW5rKClcbiAgICAgIH0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBTd2FwIGluICdkaXNjb25uZWN0ZWQnIGRpdlxuICAgIHRoaXMubWFpbkNvbnRhaW5lcl8uZmluZCgnI25ldHNpbS1kaXNjb25uZWN0ZWQnKS5zaG93KCk7XG4gICAgdGhpcy5tYWluQ29udGFpbmVyXy5maW5kKCcjbmV0c2ltLWNvbm5lY3RlZCcpLmhpZGUoKTtcblxuICAgIC8vIFJlbmRlciBsb2JieVxuICAgIHRoaXMubG9iYnlfLnJlbmRlcigpO1xuICB9XG5cbiAgaWYgKHRoaXMucm91dGVyTG9nTW9kYWxfKSB7XG4gICAgdGhpcy5yb3V0ZXJMb2dNb2RhbF8ucmVuZGVyKCk7XG4gIH1cblxuICB0aGlzLnVwZGF0ZUxheW91dCgpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2hlbmV2ZXIgdGhlIGNvbm5lY3Rpb24gbm90aWZpZXMgdXMgdGhhdCB3ZSd2ZSBjb25uZWN0ZWQgdG8sXG4gKiBvciBkaXNjb25uZWN0ZWQgZnJvbSwgYSBzaGFyZC5cbiAqIEBwYXJhbSB7TmV0U2ltU2hhcmR9IHNoYXJkIC0gbnVsbCBpZiBkaXNjb25uZWN0ZWQuXG4gKiBAcGFyYW0ge05ldFNpbUxvY2FsQ2xpZW50Tm9kZX0gbG9jYWxOb2RlIC0gbnVsbCBpZiBkaXNjb25uZWN0ZWRcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUub25TaGFyZENoYW5nZV89IGZ1bmN0aW9uIChzaGFyZCwgbG9jYWxOb2RlKSB7XG4gIC8vIFVucmVnaXN0ZXIgb2xkIGhhbmRsZXJzXG4gIGlmICh0aGlzLmV2ZW50S2V5cy5yZWdpc3RlcmVkV2l0aExvY2FsTm9kZSkge1xuICAgIHRoaXMuZXZlbnRLZXlzLnJlZ2lzdGVyZWRXaXRoTG9jYWxOb2RlLnJlbW90ZUNoYW5nZS51bnJlZ2lzdGVyKFxuICAgICAgICB0aGlzLmV2ZW50S2V5cy5yZW1vdGVDaGFuZ2UpO1xuICAgIHRoaXMuZXZlbnRLZXlzLnJlZ2lzdGVyZWRXaXRoTG9jYWxOb2RlID0gbnVsbDtcbiAgfVxuXG4gIC8vIFJlZ2lzdGVyIG5ldyBoYW5kbGVyc1xuICBpZiAobG9jYWxOb2RlKSB7XG4gICAgdGhpcy5ldmVudEtleXMucmVtb3RlQ2hhbmdlID0gbG9jYWxOb2RlLnJlbW90ZUNoYW5nZS5yZWdpc3RlcihcbiAgICAgICAgdGhpcy5vblJlbW90ZUNoYW5nZV8uYmluZCh0aGlzKSk7XG4gICAgdGhpcy5ldmVudEtleXMucmVnaXN0ZXJlZFdpdGhMb2NhbE5vZGUgPSBsb2NhbE5vZGU7XG4gIH1cblxuICAvLyBVcGRhdGUgdGhlIGxvZyB2aWV3ZXIncyBzaGFyZCByZWZlcmVuY2Ugc28gaXQgY2FuIGdldCBjdXJyZW50IGRhdGEuXG4gIGlmICh0aGlzLnJvdXRlckxvZ01vZGFsXykge1xuICAgIHRoaXMucm91dGVyTG9nTW9kYWxfLnNldFNoYXJkKHNoYXJkKTtcbiAgfVxuXG4gIC8vIFNoYXJkIGNoYW5nZXMgYWxtb3N0IEFMV0FZUyByZXF1aXJlIGEgcmUtcmVuZGVyXG4gIHRoaXMudmlzdWFsaXphdGlvbl8uc2V0U2hhcmQoc2hhcmQpO1xuICB0aGlzLnZpc3VhbGl6YXRpb25fLnNldExvY2FsTm9kZShsb2NhbE5vZGUpO1xuICB0aGlzLnJlbmRlcigpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2hlbmV2ZXIgdGhlIGxvY2FsIG5vZGUgbm90aWZpZXMgdGhhdCB3ZSd2ZSBiZWVuIGNvbm5lY3RlZCB0byxcbiAqIG9yIGRpc2Nvbm5lY3RlZCBmcm9tLCBhIHJvdXRlci5cbiAqIEBwYXJhbSB7TmV0U2ltV2lyZX0gd2lyZSAtIG51bGwgaWYgZGlzY29ubmVjdGVkLlxuICogQHBhcmFtIHtOZXRTaW1Ob2RlfSByZW1vdGVOb2RlIC0gbnVsbCBpZiBkaXNjb25uZWN0ZWRcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUub25SZW1vdGVDaGFuZ2VfID0gZnVuY3Rpb24gKHdpcmUsIHJlbW90ZU5vZGUpIHtcbiAgdmFyIHJvdXRlckNvbm5lY3RFdmVudCA9IHJlbW90ZU5vZGUgJiYgcmVtb3RlTm9kZSBpbnN0YW5jZW9mIE5ldFNpbVJvdXRlck5vZGU7XG4gIHZhciByb3V0ZXJEaXNjb25uZWN0RXZlbnQgPSAhcmVtb3RlTm9kZSAmJiB0aGlzLmV2ZW50S2V5cy5yZWdpc3RlcmVkV2l0aFJvdXRlcjtcblxuICAvLyBVbmhvb2sgb2xkIGhhbmRsZXJzXG4gIGlmICh0aGlzLmV2ZW50S2V5cy5yZWdpc3RlcmVkV2l0aFJvdXRlcikge1xuICAgIHRoaXMuZXZlbnRLZXlzLnJlZ2lzdGVyZWRXaXRoUm91dGVyLnN0YXRlQ2hhbmdlLnVucmVnaXN0ZXIoXG4gICAgICAgIHRoaXMuZXZlbnRLZXlzLnJvdXRlclN0YXRlQ2hhbmdlKTtcbiAgICB0aGlzLmV2ZW50S2V5cy5yZWdpc3RlcmVkV2l0aFJvdXRlci5zdGF0c0NoYW5nZS51bnJlZ2lzdGVyKFxuICAgICAgICB0aGlzLmV2ZW50S2V5cy5yb3V0ZXJTdGF0c0NoYW5nZSk7XG4gICAgdGhpcy5ldmVudEtleXMucmVnaXN0ZXJlZFdpdGhSb3V0ZXIud2lyZXNDaGFuZ2UudW5yZWdpc3RlcihcbiAgICAgICAgdGhpcy5ldmVudEtleXMucm91dGVyV2lyZXNDaGFuZ2UpO1xuICAgIHRoaXMuZXZlbnRLZXlzLnJlZ2lzdGVyZWRXaXRoUm91dGVyLmxvZ0NoYW5nZS51bnJlZ2lzdGVyKFxuICAgICAgICB0aGlzLmV2ZW50S2V5cy5yb3V0ZXJMb2dDaGFuZ2UpO1xuICAgIHRoaXMuZXZlbnRLZXlzLnJlZ2lzdGVyZWRXaXRoUm91dGVyID0gbnVsbDtcbiAgfVxuXG4gIC8vIEhvb2sgdXAgbmV3IGhhbmRsZXJzXG4gIGlmIChyb3V0ZXJDb25uZWN0RXZlbnQpIHtcbiAgICB0aGlzLmV2ZW50S2V5cy5yb3V0ZXJTdGF0ZUNoYW5nZSA9IHJlbW90ZU5vZGUuc3RhdGVDaGFuZ2UucmVnaXN0ZXIoXG4gICAgICAgIHRoaXMub25Sb3V0ZXJTdGF0ZUNoYW5nZV8uYmluZCh0aGlzKSk7XG4gICAgdGhpcy5ldmVudEtleXMucm91dGVyU3RhdHNDaGFuZ2UgPSByZW1vdGVOb2RlLnN0YXRzQ2hhbmdlLnJlZ2lzdGVyKFxuICAgICAgICB0aGlzLm9uUm91dGVyU3RhdHNDaGFuZ2VfLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZXZlbnRLZXlzLnJvdXRlcldpcmVzQ2hhbmdlID0gcmVtb3RlTm9kZS53aXJlc0NoYW5nZS5yZWdpc3RlcihcbiAgICAgICAgdGhpcy5vblJvdXRlcldpcmVzQ2hhbmdlXy5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmV2ZW50S2V5cy5yb3V0ZXJMb2dDaGFuZ2UgPSByZW1vdGVOb2RlLmxvZ0NoYW5nZS5yZWdpc3RlcihcbiAgICAgICAgdGhpcy5vblJvdXRlckxvZ0NoYW5nZV8uYmluZCh0aGlzKSk7XG4gICAgdGhpcy5ldmVudEtleXMucmVnaXN0ZXJlZFdpdGhSb3V0ZXIgPSByZW1vdGVOb2RlO1xuICB9XG5cbiAgdGhpcy5yZW5kZXIoKTtcblxuICBpZiAocm91dGVyQ29ubmVjdEV2ZW50KSB7XG4gICAgdGhpcy5vblJvdXRlckNvbm5lY3RfKHJlbW90ZU5vZGUpO1xuICB9IGVsc2UgaWYgKHJvdXRlckRpc2Nvbm5lY3RFdmVudCkge1xuICAgIHRoaXMub25Sb3V0ZXJEaXNjb25uZWN0XygpO1xuICB9XG59O1xuXG4vKipcbiAqIFN0ZXBzIHRvIHRha2Ugd2hlbiB3ZSB3ZXJlIG5vdCBjb25uZWN0ZWQgdG8gYSByb3V0ZXIgYW5kIG5vdyB3ZSBhcmUuXG4gKiBAcGFyYW0ge05ldFNpbVJvdXRlck5vZGV9IHJvdXRlciB0aGF0IHdlIGFyZSBub3cgY29ubmVjdGVkIHRvXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW0ucHJvdG90eXBlLm9uUm91dGVyQ29ubmVjdF8gPSBmdW5jdGlvbiAocm91dGVyKSB7XG4gIHRoaXMub25Sb3V0ZXJTdGF0ZUNoYW5nZV8ocm91dGVyKTtcbiAgdGhpcy5vblJvdXRlclN0YXRzQ2hhbmdlXyhyb3V0ZXIpO1xuICB0aGlzLnNldFJvdXRlckxvZ0RhdGEocm91dGVyLmdldExvZygpKTtcbiAgdGhpcy5yb3V0ZXJMb2dNb2RhbF8uc2V0Um91dGVyKHJvdXRlcik7XG59O1xuXG4vKipcbiAqIFN0ZXBzIHRvIHRha2Ugd2hlbiB3ZSB3ZXJlIGNvbm5lY3RlZCB0byBhIHJvdXRlciBhbmQgbm93IHdlIGFyZSBub3QuXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW0ucHJvdG90eXBlLm9uUm91dGVyRGlzY29ubmVjdF8gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2V0Um91dGVyQ3JlYXRpb25UaW1lKDApO1xuICB0aGlzLnNldFJvdXRlclF1ZXVlZFBhY2tldENvdW50XygwKTtcbiAgdGhpcy5zZXRSb3V0ZXJNZW1vcnlJblVzZV8oMCk7XG4gIHRoaXMuc2V0Um91dGVyRGF0YVJhdGVfKDApO1xuICB0aGlzLnNldFJvdXRlckxvZ0RhdGEoW10pO1xuICB0aGlzLnJvdXRlckxvZ01vZGFsXy5zZXRSb3V0ZXIobnVsbCk7XG59O1xuXG4vKipcbiAqIExvY2FsIHJlc3BvbnNlIHRvIHJvdXRlciBzdGF0ZSBjaGFuZ2luZywgd2hpY2ggbWF5IGhhdmUgYmVlbiB0cmlnZ2VyZWRcbiAqIGxvY2FsbHkgb3IgcmVtb3RlbHkuXG4gKiBAcGFyYW0ge05ldFNpbVJvdXRlck5vZGV9IHJvdXRlclxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5vblJvdXRlclN0YXRlQ2hhbmdlXyA9IGZ1bmN0aW9uIChyb3V0ZXIpIHtcbiAgdmFyIG15Tm9kZSA9IHt9O1xuICBpZiAodGhpcy5teU5vZGUpIHtcbiAgICBteU5vZGUgPSB0aGlzLm15Tm9kZTtcbiAgfVxuXG4gIHRoaXMuc2V0Um91dGVyQ3JlYXRpb25UaW1lKHJvdXRlci5jcmVhdGlvblRpbWUpO1xuICB0aGlzLnNldFJvdXRlckJhbmR3aWR0aChyb3V0ZXIuYmFuZHdpZHRoKTtcbiAgdGhpcy5zZXRSb3V0ZXJNZW1vcnkocm91dGVyLm1lbW9yeSk7XG4gIHRoaXMuc2V0RG5zTW9kZShyb3V0ZXIuZG5zTW9kZSk7XG4gIHRoaXMuc2V0RG5zTm9kZUlEKHJvdXRlci5kbnNNb2RlID09PSBEbnNNb2RlLk5PTkUgPyB1bmRlZmluZWQgOiByb3V0ZXIuZG5zTm9kZUlEKTtcbiAgdGhpcy5zZXRJc0Ruc05vZGUocm91dGVyLmRuc01vZGUgPT09IERuc01vZGUuTUFOVUFMICYmXG4gICAgICByb3V0ZXIuZG5zTm9kZUlEID09PSBteU5vZGUuZW50aXR5SUQpO1xufTtcblxuLyoqXG4gKiBJc29sYXRlcyB1cGRhdGVzIHRoYXQgd2Ugc2hvdWxkIGRvIHdoZW4gYSByb3V0ZXIncyBzdGF0cyBjaGFuZ2UsIHNpbmNlXG4gKiB0aGVzZSBoYXBwZW4gYSBsb3QgbW9yZSBvZnRlbi5cbiAqIEBwYXJhbSB7TmV0U2ltUm91dGVyTm9kZX0gcm91dGVyXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW0ucHJvdG90eXBlLm9uUm91dGVyU3RhdHNDaGFuZ2VfID0gZnVuY3Rpb24gKHJvdXRlcikge1xuICB0aGlzLnNldFJvdXRlclF1ZXVlZFBhY2tldENvdW50Xyhyb3V0ZXIuZ2V0UXVldWVkUGFja2V0Q291bnQoKSk7XG4gIHRoaXMuc2V0Um91dGVyTWVtb3J5SW5Vc2VfKHJvdXRlci5nZXRNZW1vcnlJblVzZSgpKTtcbiAgdGhpcy5zZXRSb3V0ZXJEYXRhUmF0ZV8ocm91dGVyLmdldEN1cnJlbnREYXRhUmF0ZSgpKTtcbn07XG5cbi8qKlxuICogV2hhdCB0byBkbyB3aGVuIG91ciBjb25uZWN0ZWQgcm91dGVyJ3MgbG9jYWwgbmV0d29yayBjaGFuZ2VzLlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5vblJvdXRlcldpcmVzQ2hhbmdlXyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuaXNDb25uZWN0ZWRUb1JvdXRlcigpKSB7XG4gICAgdGhpcy5zZXREbnNUYWJsZUNvbnRlbnRzKHRoaXMuZ2V0Q29ubmVjdGVkUm91dGVyKCkuZ2V0QWRkcmVzc1RhYmxlKCkpO1xuICB9XG59O1xuXG4vKipcbiAqIFdoYXQgdG8gZG8gd2hlbiBvdXIgY29ubmVjdGVkIHJvdXRlcidzIGxvZ3MgY2hhbmdlLlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5vblJvdXRlckxvZ0NoYW5nZV8gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmlzQ29ubmVjdGVkVG9Sb3V0ZXIoKSkge1xuICAgIHRoaXMuc2V0Um91dGVyTG9nRGF0YSh0aGlzLmdldENvbm5lY3RlZFJvdXRlcigpLmdldExvZygpKTtcbiAgfVxufTtcblxuLyoqXG4gKiBLaWNrIG9mZiBhbiBhbmltYXRpb24gdGhhdCBzaG93cyB0aGUgbG9jYWwgbm9kZSBzZXR0aW5nIHRoZSBzdGF0ZSBvZiBhXG4gKiBzaW1wbGV4IHdpcmUuXG4gKiBAcGFyYW0ge1wiMFwifFwiMVwifSBuZXdTdGF0ZVxuICovXG5OZXRTaW0ucHJvdG90eXBlLmFuaW1hdGVTZXRXaXJlU3RhdGUgPSBmdW5jdGlvbiAobmV3U3RhdGUpIHtcbiAgdGhpcy52aXN1YWxpemF0aW9uXy5hbmltYXRlU2V0V2lyZVN0YXRlKG5ld1N0YXRlKTtcbn07XG5cbi8qKlxuICogS2ljayBvZmYgYW4gYW5pbWF0aW9uIHRoYXQgc2hvd3MgdGhlIGxvY2FsIG5vZGUgcmVhZGluZyB0aGUgc3RhdGUgb2YgYVxuICogc2ltcGxleCB3aXJlLlxuICogQHBhcmFtIHtcIjBcInxcIjFcIn0gbmV3U3RhdGVcbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5hbmltYXRlUmVhZFdpcmVTdGF0ZSA9IGZ1bmN0aW9uIChuZXdTdGF0ZSkge1xuICB0aGlzLnZpc3VhbGl6YXRpb25fLmFuaW1hdGVSZWFkV2lyZVN0YXRlKG5ld1N0YXRlKTtcbn07XG5cbi8qKlxuICogU3BlY2lmaWNhbGx5LCB1cGRhdGUgdGhlIGxheW91dCBvZiB0aGUgcmlnaHQgY29sdW1uIHdoZW4gY29ubmVjdGVkLFxuICogYW5kIGNoYW5nZSBob3cgdGhlIHRocmVlIHBhbmVscyB0aGVyZSAocmVjZWl2ZWQgbG9nLCBzZW50IGxvZywgc2VuZCBjb250cm9scylcbiAqIHNoYXJlIHRoZSBjdXJyZW50IHZlcnRpY2FsIHNwYWNlIGluIHRoZSB2aWV3cG9ydC5cbiAqXG4gKiBXZSdyZSB0cnlpbmcgdG8gdXNlIHRoZSBmb2xsb3dpbmcgcnVsZXM6XG4gKlxuICogMS4gVGhlIHNlbmQgY29udHJvbHMgcGFuZWwgaXMgZml4ZWQgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdmlld3BvcnQsIGFuZCB3aWxsXG4gKiAgICBzaXplIHVwd2FyZHMgdG8gZml0IGl0cyBjb250ZW50cyB1cCB0byBhIG1heGltdW0gaGVpZ2h0LlxuICogMi4gVGhlIGxvZyB3aWRnZXRzIHVzZSB0aGUgcmVtYWluaW5nIHZlcnRpY2FsIHNwYWNlXG4gKiAgICBhKSBJZiBvbmx5IG9uZSBsb2cgd2lkZ2V0IGlzIG9wZW4sIGl0IGZpbGxzIHRoZSB2ZXJ0aWNhbCBzcGFjZSAoZXhjZXB0XG4gKiAgICAgICBsZWF2ZXMgZW5vdWdoIHJvb20gdG8gc2VlIHRoZSBvdGhlciBoZWFkZXIpXG4gKiAgICBiKSBJZiBib3RoIGxvZyB3aWRnZXRzIGFyZSBvcGVuLCB0aGV5IHNoYXJlIHRoZSB2ZXJ0aWNhbCBzcGFjZSA1MC81MFxuICogICAgYykgSWYgYm90aCBsb2cgd2lkZ2V0cyBhcmUgY2xvc2VkLCB0aGV5IGZsb2F0IGF0IHRoZSB0b3Agb2YgdGhlIHNwYWNlLlxuICovXG5OZXRTaW0ucHJvdG90eXBlLnVwZGF0ZUxheW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJpZ2h0Q29sdW1uID0gJCgnI25ldHNpbS1yaWdodGNvbCcpO1xuICB2YXIgc2VuZFBhbmVsID0gJCgnI25ldHNpbS1zZW5kJyk7XG4gIHZhciBsb2dXcmFwID0gJCgnI25ldHNpbS1sb2dzJyk7XG5cbiAgbmV0c2ltRGVib3VuY2VkUmVzaXplRm9vdGVyKCk7XG5cbiAgaWYgKHRoaXMubG9iYnlfKSB7XG4gICAgdGhpcy5sb2JieV8udXBkYXRlTGF5b3V0KCk7XG4gIH1cblxuICBpZiAoIXJpZ2h0Q29sdW1uLmlzKCc6dmlzaWJsZScpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gUmlnaHQgY29sdW1uIHdyYXBwZXIgYW5kIHRoZSBzZW5kIHBhbmVsIGFyZSBib3RoIHNpemVkIGJ5IENTU1xuICB2YXIgcmlnaHRDb2x1bW5IZWlnaHQgPSByaWdodENvbHVtbi5oZWlnaHQoKTtcbiAgdmFyIHNlbmRQYW5lbEhlaWdodCA9IHNlbmRQYW5lbC5oZWlnaHQoKTtcbiAgdmFyIGxvZ3NTaGFyZWRWZXJ0aWNhbFNwYWNlID0gcmlnaHRDb2x1bW5IZWlnaHQgLSBzZW5kUGFuZWxIZWlnaHQ7XG5cbiAgdmFyIHNob3dpbmdTZW50ID0gIXRoaXMuc2VudE1lc3NhZ2VMb2dfLmlzTWluaW1pemVkKCk7XG4gIHZhciBzaG93aW5nUmVjZWl2ZWQgPSAhdGhpcy5yZWNlaXZlZE1lc3NhZ2VMb2dfLmlzTWluaW1pemVkKCk7XG4gIGlmIChzaG93aW5nUmVjZWl2ZWQgJiYgc2hvd2luZ1NlbnQpIHtcbiAgICB2YXIgaGFsZkhlaWdodCA9IE1hdGguZmxvb3IobG9nc1NoYXJlZFZlcnRpY2FsU3BhY2UgLyAyKTtcbiAgICB0aGlzLnJlY2VpdmVkTWVzc2FnZUxvZ18uc2V0SGVpZ2h0KGhhbGZIZWlnaHQpO1xuICAgIHRoaXMuc2VudE1lc3NhZ2VMb2dfLnNldEhlaWdodChoYWxmSGVpZ2h0KTtcbiAgfSBlbHNlIGlmIChzaG93aW5nUmVjZWl2ZWQpIHtcbiAgICB0aGlzLnJlY2VpdmVkTWVzc2FnZUxvZ18uc2V0SGVpZ2h0KE1hdGguZmxvb3IobG9nc1NoYXJlZFZlcnRpY2FsU3BhY2UgLVxuICAgICAgICB0aGlzLnNlbnRNZXNzYWdlTG9nXy5nZXRIZWlnaHQoKSkpO1xuICB9IGVsc2UgaWYgKHNob3dpbmdTZW50KSB7XG4gICAgdGhpcy5zZW50TWVzc2FnZUxvZ18uc2V0SGVpZ2h0KE1hdGguZmxvb3IobG9nc1NoYXJlZFZlcnRpY2FsU3BhY2UgLVxuICAgICAgICB0aGlzLnJlY2VpdmVkTWVzc2FnZUxvZ18uZ2V0SGVpZ2h0KCkpKTtcbiAgfVxuXG4gIC8vIE1hbnVhbGx5IGFkanVzdCB0aGUgbG9nd3JhcCB0byB0aGUgcmVtYWluaW5nIGhlaWdodFxuICBsb2dXcmFwLmNzcygnaGVpZ2h0JywgcmlnaHRDb2x1bW5IZWlnaHQgLSBzZW5kUGFuZWxIZWlnaHQpO1xufTtcblxuLyoqXG4gKiBBcHByb3ByaWF0ZSBzdGVwcyBmb3Igd2hlbiB0aGUgc3R1ZGVudCBoaXRzIHRoZSBcIkNvbnRpbnVlIHRvIG5leHQgbGV2ZWxcIlxuICogYnV0dG9uLiAgU2hvdWxkIG1hcmsgdGhlIGxldmVsIGFzIGNvbXBsZXRlIGFuZCBuYXZpZ2F0ZSB0byB0aGUgbmV4dCBsZXZlbC5cbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5jb21wbGV0ZUxldmVsQW5kQ29udGludWUgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmlzQ29ubmVjdGVkVG9SZW1vdGUoKSAmJiAhY29uZmlybShpMThuLm9uQmVmb3JlVW5sb2FkV2FybmluZygpKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEF2b2lkIG11bHRpcGxlIHNpbXVsdGFuZW91cyBzdWJtaXNzaW9ucy5cbiAgJCgnLnN1Ym1pdEJ1dHRvbicpLmF0dHIoJ2Rpc2FibGVkJywgdHJ1ZSk7XG5cbiAgc2VuZFJlcG9ydCh7XG4gICAgZmFsbGJhY2tSZXNwb25zZTogdGhpcy5yZXBvcnRpbmdJbmZvXy5mYWxsYmFja19yZXNwb25zZSxcbiAgICBjYWxsYmFjazogdGhpcy5yZXBvcnRpbmdJbmZvXy5jYWxsYmFjayxcbiAgICBhcHA6ICduZXRzaW0nLFxuICAgIGxldmVsOiB0aGlzLmxldmVsLmlkLFxuICAgIHJlc3VsdDogdHJ1ZSxcbiAgICB0ZXN0UmVzdWx0OiAxMDAsXG4gICAgb25Db21wbGV0ZTogZnVuY3Rpb24gKHNlcnZlclJlc3BvbnNlKSB7XG5cbiAgICAgIC8vIFJlLWVuYWJsZSBzdWJtaXQgYnV0dG9uLCBpbiBjYXNlIHRoZXJlJ3Mgbm93aGVyZSB0byBnby5cbiAgICAgICQoJy5zdWJtaXRCdXR0b24nKS5hdHRyKCdkaXNhYmxlZCcsIGZhbHNlKTtcblxuICAgICAgLy8gSWYgdGhlcmUncyBzb21ld2hlcmUgdG8gZ28sIGRpc2Nvbm5lY3QgYW5kIGdvIVxuICAgICAgaWYgKHNlcnZlclJlc3BvbnNlLnJlZGlyZWN0KSB7XG4gICAgICAgIGlmICh0aGlzLmlzQ29ubmVjdGVkVG9SZW1vdGUoKSkge1xuICAgICAgICAgIHRoaXMuZGlzY29ubmVjdEZyb21SZW1vdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBzZXJ2ZXJSZXNwb25zZS5yZWRpcmVjdDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHNlcnZlclJlc3BvbnNlLnJlZGlyZWN0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfS5iaW5kKHRoaXMpXG4gIH0pO1xufTtcblxuLyoqXG4gKiBBdHRlbXB0IHRvIHJlc2V0IHRoZSBzaW11bGF0aW9uIHNoYXJkLCBraWNraW5nIGFsbCB1c2VycyBvdXQgYW5kIHJlc2V0dGluZ1xuICogYWxsIGRhdGEuXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUucmVzZXRTaGFyZCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuc2hhcmRfICYmIGNvbmZpcm0oaTE4bi5zaGFyZFJlc2V0Q29uZmlybWF0aW9uKCkpKSB7XG4gICAgdGhpcy5zaGFyZF8ucmVzZXRFdmVyeXRoaW5nKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgbG9nZ2VyLmVycm9yKGVycik7XG4gICAgICAgIE5ldFNpbUFsZXJ0LmVycm9yKGkxOG4uc2hhcmRSZXNldEVycm9yKCkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfS5iaW5kKHRoaXMpKTtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB0ID0gZnVuY3Rpb24gYW5vbnltb3VzKGxvY2FscywgZmlsdGVycywgZXNjYXBlXG4vKiovKSB7XG5lc2NhcGUgPSBlc2NhcGUgfHwgZnVuY3Rpb24gKGh0bWwpe1xuICByZXR1cm4gU3RyaW5nKGh0bWwpXG4gICAgLnJlcGxhY2UoLyYoPyFcXHcrOykvZywgJyZhbXA7JylcbiAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKVxuICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG59O1xudmFyIGJ1ZiA9IFtdO1xud2l0aCAobG9jYWxzIHx8IHt9KSB7IChmdW5jdGlvbigpeyBcbiBidWYucHVzaCgnJyk7MTtcbiAgdmFyIG1zZyA9IHJlcXVpcmUoJy4uL2xvY2FsZScpO1xuOyBidWYucHVzaCgnXFxuXFxuPGRpdiBpZD1cInJvdGF0ZUNvbnRhaW5lclwiIHN0eWxlPVwiYmFja2dyb3VuZC1pbWFnZTogdXJsKCcsIGVzY2FwZSgoNSwgIGFzc2V0VXJsKCdtZWRpYS90dXJucGhvbmVfaG9yaXpvbnRhbC5wbmcnKSApKSwgJylcIj5cXG4gIDxkaXYgaWQ9XCJyb3RhdGVUZXh0XCI+XFxuICAgIDxwPicsIGVzY2FwZSgoNywgIG1zZy5yb3RhdGVUZXh0KCkgKSksICc8YnI+JywgZXNjYXBlKCg3LCAgbXNnLm9yaWVudGF0aW9uTG9jaygpICkpLCAnPC9wPlxcbiAgPC9kaXY+XFxuPC9kaXY+XFxuXFxuJyk7MTE7IHZhciBpbnN0cnVjdGlvbnMgPSBmdW5jdGlvbigpIHs7IGJ1Zi5wdXNoKCcgIDxkaXYgaWQ9XCJidWJibGVcIiBjbGFzcz1cImNsZWFyZml4XCI+XFxuICAgIDx0YWJsZSBpZD1cInByb21wdC10YWJsZVwiPlxcbiAgICAgIDx0cj5cXG4gICAgICAgIDx0ZCBpZD1cInByb21wdC1pY29uLWNlbGxcIj5cXG4gICAgICAgICAgPGltZyBpZD1cInByb21wdC1pY29uXCIvPlxcbiAgICAgICAgPC90ZD5cXG4gICAgICAgIDx0ZCBpZD1cInByb21wdC1jZWxsXCI+XFxuICAgICAgICAgIDxwIGlkPVwicHJvbXB0XCI+XFxuICAgICAgICAgIDwvcD5cXG4gICAgICAgIDwvdGQ+XFxuICAgICAgPC90cj5cXG4gICAgPC90YWJsZT5cXG4gICAgPGRpdiBpZD1cImFuaS1naWYtcHJldmlldy13cmFwcGVyXCI+XFxuICAgICAgPGRpdiBpZD1cImFuaS1naWYtcHJldmlld1wiPlxcbiAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gIDwvZGl2PlxcbicpOzI4OyB9OzsgYnVmLnB1c2goJ1xcbjxkaXYgaWQ9XCJhcHBjb250YWluZXJcIj5cXG4gIDwhLS0gU2hvdWxkIGRpc2FibGUgc3BlbGwtY2hlY2sgb24gYWxsIG5ldHNpbSBlbGVtZW50cyAtLT5cXG4gIDxkaXYgaWQ9XCJuZXRzaW1cIiBhdXRvY2FwaXRhbGl6ZT1cImZhbHNlXCIgYXV0b2NvcnJlY3Q9XCJmYWxzZVwiIGF1dG9jb21wbGV0ZT1cImZhbHNlXCIgc3BlbGxjaGVjaz1cImZhbHNlXCI+XFxuXFxuICAgIDxkaXYgaWQ9XCJuZXRzaW0tZGlzY29ubmVjdGVkXCI+XFxuICAgICAgPGRpdiBjbGFzcz1cImxvYmJ5LXBhbmVsXCI+PC9kaXY+XFxuICAgIDwvZGl2PlxcblxcblxcbiAgICA8ZGl2IGlkPVwibmV0c2ltLWNvbm5lY3RlZFwiPlxcbiAgICAgIDxkaXYgaWQ9XCJuZXRzaW0tbGVmdGNvbFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbHVtbi13aWR0aC1saW1pdGVyXCI+XFxuXFxuICAgICAgICAgIDxkaXYgaWQ9XCJuZXRzaW0tc3RhdHVzXCI+PC9kaXY+XFxuXFxuICAgICAgICAgIDxkaXYgaWQ9XCJuZXRzaW0tdmlzdWFsaXphdGlvblwiPjwvZGl2PlxcblxcbiAgICAgICAgICA8ZGl2IGlkPVwibmV0c2ltLXRhYnNcIj48L2Rpdj5cXG5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgIDwvZGl2PlxcblxcbiAgICAgIDxkaXYgaWQ9XCJuZXRzaW0tcmlnaHRjb2xcIj5cXG4gICAgICAgIDxkaXYgaWQ9XCJuZXRzaW0tbG9nc1wiPlxcbiAgICAgICAgICA8ZGl2IGlkPVwibmV0c2ltLXJlY2VpdmVkXCI+PC9kaXY+XFxuICAgICAgICAgIDxkaXYgaWQ9XCJuZXRzaW0tc2VudFwiPjwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZGl2IGlkPVwibmV0c2ltLXNlbmRcIj48L2Rpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuXFxuICAgIDxkaXYgaWQ9XCJyb3V0ZXItbG9nLW1vZGFsXCIgY2xhc3M9XCJtb2RhbCBmYWRlXCI+PC9kaXY+XFxuXFxuICA8L2Rpdj5cXG4gIDxkaXYgaWQ9XCJmb290ZXJzXCIgZGlyPVwiJywgZXNjYXBlKCg2MywgIGRhdGEubG9jYWxlRGlyZWN0aW9uICkpLCAnXCI+XFxuICA8L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XCJoaWRkZW5cIj5cXG4gICAgJyk7NjY7IGluc3RydWN0aW9ucygpOyA7IGJ1Zi5wdXNoKCdcXG4gIDwvZGl2PlxcbjwvZGl2PlxcblxcbjxkaXYgY2xhc3M9XCJjbGVhclwiPjwvZGl2PlxcbicpOyB9KSgpO1xufSBcbnJldHVybiBidWYuam9pbignJyk7XG59O1xuICByZXR1cm4gZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgcmV0dXJuIHQobG9jYWxzLCByZXF1aXJlKFwiZWpzXCIpLmZpbHRlcnMpO1xuICB9XG59KCkpOyIsIi8qanNoaW50IG11bHRpc3RyOiB0cnVlICovXG4vKipcbiAqIEBvdmVydmlldyBUeXBlIGRvY3VtZW50YXRpb24gZm9yIGEgTmV0U2ltIGxldmVsIGNvbmZpZ3VyYXRpb24gb2JqZWN0LFxuICogICAgICAgICAgIGFuZCBkZWZhdWx0IHZhbHVlcyBmb3IgdGhhdCBvYmplY3QuXG4gKi9cblxudmFyIE5ldFNpbUNvbnN0YW50cyA9IHJlcXVpcmUoJy4vTmV0U2ltQ29uc3RhbnRzJyk7XG52YXIgUGFja2V0ID0gcmVxdWlyZSgnLi9QYWNrZXQnKTtcbnZhciBCSVRTX1BFUl9OSUJCTEUgPSBOZXRTaW1Db25zdGFudHMuQklUU19QRVJfTklCQkxFO1xudmFyIE1lc3NhZ2VHcmFudWxhcml0eSA9IE5ldFNpbUNvbnN0YW50cy5NZXNzYWdlR3JhbnVsYXJpdHk7XG52YXIgRG5zTW9kZSA9IE5ldFNpbUNvbnN0YW50cy5EbnNNb2RlO1xudmFyIEVuY29kaW5nVHlwZSA9IE5ldFNpbUNvbnN0YW50cy5FbmNvZGluZ1R5cGU7XG52YXIgTmV0U2ltVGFiVHlwZSA9IE5ldFNpbUNvbnN0YW50cy5OZXRTaW1UYWJUeXBlO1xuXG4vKipcbiAqIEEgbGV2ZWwgY29uZmlndXJhdGlvbiB0aGF0IGNhbiBiZSB1c2VkIGJ5IE5ldFNpbVxuICogQHR5cGVkZWYge09iamVjdH0gTmV0U2ltTGV2ZWxDb25maWd1cmF0aW9uXG4gKlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGluc3RydWN0aW9ucyAtIEluaGVyaXRlZCBmcm9tIGJsb2NrbHkgbGV2ZWwgY29uZmlndXJhdGlvbi5cbiAqXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHNob3dDbGllbnRzSW5Mb2JieSAtIFdoZXRoZXIgY2xpZW50IG5vZGVzIHNob3VsZCBhcHBlYXJcbiAqICAgICAgICAgICBpbiB0aGUgbG9iYnkgbGlzdCBhdCBhbGwuXG4gKlxuICogQHByb3BlcnR5IHtib29sZWFufSBzaG93Um91dGVyc0luTG9iYnkgLSBXaGV0aGVyIHJvdXRlciBub2RlcyBzaG91bGQgYXBwZWFyXG4gKiAgICAgICAgICAgaW4gdGhlIGxvYmJ5IGxpc3QgYXQgYWxsLlxuICpcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gY2FuQ29ubmVjdFRvQ2xpZW50cyAtIFdoZXRoZXIgY2xpZW50IG5vZGVzIGFyZSBzZWxlY3RhYmxlXG4gKiAgICAgICAgICAgYW5kIGNhbiBiZSBjb25uZWN0ZWQgdG9cbiAqXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGNhbkNvbm5lY3RUb1JvdXRlcnMgLSBXaGV0aGVyIHJvdXRlciBub2RlcyBhcmUgc2VsZWN0YWJsZVxuICogICAgICAgICAgIGFuZCBjYW4gYmUgY29ubmVjdGVkIHRvXG4gKlxuICogQHByb3BlcnR5IHtib29sZWFufSBzaG93QWRkUm91dGVyQnV0dG9uIC0gV2hldGhlciB0aGUgXCJBZGQgUm91dGVyXCIgYnV0dG9uXG4gKiAgICAgICAgICAgc2hvdWxkIGFwcGVhciBhYm92ZSB0aGUgbG9iYnkgbGlzdC5cbiAqXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHNob3dMb2dCcm93c2VyQnV0dG9uIC0gV2hldGhlciB0aGUgXCJMb2cgQnJvd3NlclwiIGlzXG4gKiAgICAgICAgICAgYXZhaWxhYmxlIGluIHRoZSBsb2JieS5cbiAqXG4gKiBAcHJvcGVydHkge01lc3NhZ2VHcmFudWxhcml0eX0gbWVzc2FnZUdyYW51bGFyaXR5IC0gV2hldGhlciB0aGUgc2ltdWxhdG9yXG4gKiAgICAgICAgICAgcHV0cyBhIHNpbmdsZSBiaXQgaW50byBzdG9yYWdlIGF0IGEgdGltZSwgb3IgYSB3aG9sZSBwYWNrZXQuXG4gKiAgICAgICAgICAgU2hvdWxkIHVzZSAnYml0cycgZm9yIHZhcmlhbnQgMSAobGV2ZWxzIGFib3V0IHRoZSBjb29yZGluYXRpb25cbiAqICAgICAgICAgICBwcm9ibGVtKSwgYW5kICdwYWNrZXRzJyBmb3IgbGV2ZWxzIHdoZXJlIHRoZSBjb29yZGluYXRpb24gcHJvYmxlbVxuICogICAgICAgICAgIGlzIGFic3RyYWN0ZWQgYXdheS5cbiAqXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGF1dG9tYXRpY1JlY2VpdmUgLSBXaGV0aGVyIHRoZSBsb2NhbCBub2RlIHdpbGxcbiAqICAgICAgICAgICBhdXRvbWF0aWNhbGx5IHBpY2sgdXAgbWVzc2FnZXMgdG8gaXRzZWxmIGZyb20gdGhlIG1lc3NhZ2UgdGFibGUsXG4gKiAgICAgICAgICAgYW5kIGR1bXAgdGhlbSB0byB0aGUgcmVjZWl2ZWQgbWVzc2FnZSBsb2cuICBJZiBmYWxzZSwgc29tZSBvdGhlclxuICogICAgICAgICAgIG1ldGhvZCBtdXN0IGJlIHVzZWQgZm9yIHJlY2VpdmluZyBtZXNzYWdlcy5cbiAqXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGJyb2FkY2FzdE1vZGUgLSBFbmFibGluZyB0aGlzIG9wdGlvbiB0dXJucyBcInJvdXRlcnNcIlxuICogICAgICAgICAgIGludG8gXCJyb29tc1wiIGFuZCBtYWtlcyBpdCBzbyBldmVyeSBtZXNzYWdlIHNlbnQgaW4gdGhlIHJvb21cbiAqICAgICAgICAgICB3aWxsIGJlIHJlY2VpdmVkIGJ5IGV2ZXJ5IG90aGVyIHBlcnNvbiBpbiB0aGF0IHJvb20uXG4gKlxuICogQHByb3BlcnR5IHtib29sZWFufSBjb25uZWN0ZWRSb3V0ZXJzIC0gV2hlbiBmYWxzZSAoZGVmYXVsdCksIGVhY2ggcm91dGVyIG9yXG4gKiAgICAgICAgICAgcm9vbSBleGlzdHMgaW4gaXNvbGF0aW9uIGFuZCB3aWxsIGhhdmUgbm8gY29udGFjdCB3aXRoIG90aGVyIHJvdXRlcnNcbiAqICAgICAgICAgICBvciByb29tcy4gIFdoZW4gdHJ1ZSwgaXQgaXMgcG9zc2libGUgZm9yIG1lc3NhZ2VzIHRvIHRyYXZlbCBiZXR3ZWVuXG4gKiAgICAgICAgICAgcm91dGVycywgY29ubmVjdGluZyB0aGUgd2hvbGUgc2hhcmQuXG4gKlxuICogQHByb3BlcnR5IHtudW1iZXJ9IG1pbmltdW1FeHRyYUhvcHMgLSBGZXdlc3Qgbm9uLWRlc3RpbmF0aW9uIHJvdXRlcnMgYW5cbiAqICAgICAgICAgICBpbnRlci1yb3V0ZXIgbWVzc2FnZSBzaG91bGQgdHJ5IHRvIHZpc2l0IGJlZm9yZSBnb2luZyB0byBpdHNcbiAqICAgICAgICAgICBkZXN0aW5hdGlvbiByb3V0ZXIuICBOdW1iZXIgb2YgaG9wcyBjYW4gYmUgbG93ZXIgaWYgbmV0d29ya1xuICogICAgICAgICAgIGNvbmRpdGlvbnMgZG9uJ3QgYWxsb3cgaXQuXG4gKlxuICogQHByb3BlcnR5IHtudW1iZXJ9IG1heGltdW1FeHRyYUhvcHMgLSBNb3N0IG5vbi1kZXN0aW5hdGlvbiByb3V0ZXJzIGFuXG4gKiAgICAgICAgICAgaW50ZXItcm91dGVyIG1lc3NhZ2Ugc2hvdWxkIHRyeSB0byB2aXNpdCBiZWZvcmUgZ29pbmcgdG8gaXRzXG4gKiAgICAgICAgICAgZGVzdGluYXRpb24gcm91dGVyLlxuICpcbiAqIEBwcm9wZXJ0eSB7QWRkcmVzc0hlYWRlckZvcm1hdH0gYWRkcmVzc0Zvcm1hdCAtIFNwZWNpZnkgaG93IG1hbnkgYml0cyB3aWRlXG4gKiAgICAgICAgICAgYW4gYWRkcmVzcyBpcyB3aXRoaW4gdGhlIHNpbXVsYXRpb24gYW5kIGhvdyBpdCBzaG91bGQgYmUgZGl2aWRlZFxuICogICAgICAgICAgIHVwIGludG8gYSBoaWVyYXJjaHkuIEZvcm1hdCByZXNlbWJsZXMgSVB2NCBkb3QtZGVjaW1hbCBub3RhdGlvbixcbiAqICAgICAgICAgICBidXQgdGhlIG51bWJlcnMgc3BlY2lmeSB0aGUgbnVtYmVyIG9mIGJpdHMgZm9yIGVhY2ggc2VjdGlvbi5cbiAqICAgICAgICAgICBFeGFtcGxlczpcbiAqICAgICAgICAgICBcIjguOFwiIC0gMTYtYml0IGFkZHJlc3MsIHJlcHJlc2VudGVkIGFzIHR3byA4LWJpdCBpbnRlZ2Vycy5cbiAqICAgICAgICAgICBcIjRcIiAtIDQgYml0IGFkZHJlc3MgcmVwcmVzZW50ZWQgYXMgb25lIDQtYml0IGludGVnZXIuXG4gKiAgICAgICAgICAgXCI4LjRcIiAtIDEyLWJpdCBhZGRyZXNzLCByZXByZXNlbnRlZCBhcyBhbiA4LWJpdCBpbnRlZ2VyIGZvbGxvd2VkXG4gKiAgICAgICAgICAgICAgICAgICBieSBhIDQtYml0IGludGVnZXJcbiAqICAgICAgICAgICAgVGhpcyBmb3JtYXQgd2lsbCBiZSBhcHBsaWVkIHRvIGFueSBcImZyb21BZGRyZXNzXCIgb3IgXCJ0b0FkZHJlc3NcIlxuICogICAgICAgICAgICBoZWFkZXIgZmllbGRzIGluIHRoZSBwYWNrZXQgc3BlY2lmaWNhdGlvbiwgYW5kIHdpbGwgZGV0ZXJtaW5lXG4gKiAgICAgICAgICAgIGhvdyByb3V0ZXJzIGFzc2lnbiBhZGRyZXNzZXMuXG4gKlxuICogQHByb3BlcnR5IHtudW1iZXJ9IHBhY2tldENvdW50Qml0V2lkdGggLSBIb3cgbWFueSBiaXRzIHNob3VsZCBiZSBhbGxvY2F0ZWRcbiAqICAgICAgICAgICBmb3IgYW55IFwicGFja2V0SW5kZXhcIiBvciBcInBhY2tldENvdW50XCIgZmllbGRzIGluIHRoZSBwYWNrZXRcbiAqICAgICAgICAgICBzcGVjaWZpY2F0aW9uLlxuICpcbiAqIEBwcm9wZXJ0eSB7UGFja2V0LkhlYWRlclR5cGVbXX0gcm91dGVyRXhwZWN0c1BhY2tldEhlYWRlciAtIFRoZSBoZWFkZXIgZm9ybWF0XG4gKiAgICAgICAgICAgdGhlIHJvdXRlciB1c2VzIHRvIHBhcnNlIGluY29taW5nIHBhY2tldHMgYW5kIGZpZ3VyZSBvdXQgd2hlcmVcbiAqICAgICAgICAgICB0byByb3V0ZSB0aGVtLlxuICpcbiAqIEBwcm9wZXJ0eSB7UGFja2V0LkhlYWRlclR5cGVbXX0gY2xpZW50SW5pdGlhbFBhY2tldEhlYWRlciAtIFRoZSBoZWFkZXIgZm9ybWF0XG4gKiAgICAgICAgICAgdXNlZCBieSB0aGUgbG9jYWwgY2xpZW50IG5vZGUgd2hlbiBnZW5lcmF0aW5nL3BhcnNpbmcgcGFja2V0cyxcbiAqICAgICAgICAgICB3aGljaCBhZmZlY3RzIHRoZSBsYXlvdXQgb2YgdGhlIHNlbmQgcGFuZWwgYW5kIGxvZyBwYW5lbHMuXG4gKlxuICogQHByb3BlcnR5IHtib29sZWFufSBzaG93SG9zdG5hbWVJbkdyYXBoIC0gSWYgZmFsc2UsIHN0dWRlbnQgZGlzcGxheSBuYW1lXG4gKiAgICAgICAgICAgaXMgdXNlZCBpbiB0aGUgbmV0d29yayBncmFwaC4gIElmIHRydWUsIHRoZWlyIGdlbmVyYXRlZCBob3N0bmFtZVxuICogICAgICAgICAgIGlzIGRpc3BsYXllZC5cbiAqXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHNob3dBZGRQYWNrZXRCdXR0b24gLSBXaGV0aGVyIHRoZSBcIkFkZCBQYWNrZXRcIiBidXR0b25cbiAqICAgICAgICAgICBzaG91bGQgYXBwZWFyIGluIHRoZSBzZW5kIHdpZGdldC5cbiAqXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHNob3dQYWNrZXRTaXplQ29udHJvbCAtIFdoZXRoZXIgdGhlIHBhY2tldCBzaXplIHNsaWRlclxuICogICAgICAgICAgIHNob3VsZCBhcHBlYXIgaW4gdGhlIHNlbmQgd2lkZ2V0LlxuICpcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkZWZhdWx0UGFja2V0U2l6ZUxpbWl0IC0gSW5pdGlhbCBtYXhpbXVtIHBhY2tldCBzaXplLlxuICpcbiAqIEBwcm9wZXJ0eSB7TmV0U2ltVGFiVHlwZVtdfSBzaG93VGFicyAtIFdoaWNoIHRhYnMgc2hvdWxkIGFwcGVhciBiZW5lYXRoIHRoZVxuICogICAgICAgICAgIG5ldHdvcmsgdmlzdWFsaXphdGlvbi4gIERvZXMgbm90IGRldGVybWluZSB0YWIgb3JkZXI7IHRhYnMgYWx3YXlzXG4gKiAgICAgICAgICAgYXBwZWFyIGluIHRoZSBvcmRlciBcIkluc3RydWN0aW9ucywgTXkgRGV2aWNlLCBSb3V0ZXIsIEROUy5cIlxuICpcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkZWZhdWx0VGFiSW5kZXggLSBUaGUgemVyby1iYXNlZCBpbmRleCBvZiB0aGUgdGFiXG4gKiAgICAgICAgICAgdGhhdCBzaG91bGQgYmUgYWN0aXZlIGJ5IGRlZmF1bHQsIHdoaWNoIGRlcGVuZHMgb24gd2hpY2ggdGFic1xuICogICAgICAgICAgIHlvdSBoYXZlIGVuYWJsZWQuXG4gKlxuICogQHByb3BlcnR5IHtib29sZWFufSBzaG93UHVsc2VSYXRlU2xpZGVyIC0gV2hldGhlciB0aGUgcHVsc2UgcmF0ZSBzbGlkZXJcbiAqICAgICAgICAgICBpcyB2aXNpYmxlIG9uIHRoZSBcIk15IERldmljZVwiIHRhYi4gIFRoaXMgY29udHJvbCBpcyBhIGRpZmZlcmVudFxuICogICAgICAgICAgIHZpZXcgb24gdGhlIGJpdHJhdGUsIGdpdmVuIGluIHNlY29uZHMtcGVyLXB1bHNlOyBpbiBmYWN0LCBpZiBib3RoXG4gKiAgICAgICAgICAgdGhpcyBhbmQgdGhlIGJpdHJhdGUgc2xpZGVyIGFyZSB2aXNpYmxlLCBkcmFnZ2luZyBvbmUgd2lsbCBjaGFuZ2VcbiAqICAgICAgICAgICB0aGUgb3RoZXIuXG4gKlxuICogQHByb3BlcnR5IHtib29sZWFufSBzaG93TWV0cm9ub21lIC0gV2hldGhlciB0aGUgbWV0cm9ub21lIHNob3VsZCBzaG93IHVwIG9uXG4gKiAgICAgICAgICAgdGhlIFwiTXkgRGV2aWNlXCIgdGFiLlxuICpcbiAqIEBwcm9wZXJ0eSB7RW5jb2RpbmdUeXBlW119IHNob3dFbmNvZGluZ0NvbnRyb2xzIC0gV2hpY2ggZW5jb2RpbmdzLCAoQVNDSUksXG4gKiAgICAgICAgICAgYmluYXJ5LCBldGMuKSBzaG91bGQgaGF2ZSB2aXNpYmxlIGNvbnRyb2xzIG9uIHRoZSBcIk15IERldmljZVwiIHRhYi5cbiAqXG4gKiBAcHJvcGVydHkge0VuY29kaW5nVHlwZVtdfSBkZWZhdWx0RW5hYmxlZEVuY29kaW5ncyAtIFdoaWNoIGVuY29kaW5ncyBzaG91bGRcbiAqICAgICAgICAgICBiZSBlbmFibGVkIG9uIHBhZ2UgbG9hZC4gIE5vdGU6IEFuIGVuY29kaW5nIGVuYWJsZWQgaGVyZSBidXQgbm90XG4gKiAgICAgICAgICAgaW5jbHVkZWQgaW4gdGhlIHZpc2libGUgY29udHJvbHMgd2lsbCBiZSBlbmFibGVkIGFuZCBjYW5ub3QgYmVcbiAqICAgICAgICAgICBkaXNhYmxlZCBieSB0aGUgc3R1ZGVudC5cbiAqXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHNob3dCaXRSYXRlQ29udHJvbCAtIFdoZXRoZXIgdGhlIGJpdCByYXRlIHNsaWRlciBzaG91bGRcbiAqICAgICAgICAgICBiZSBkaXNwbGF5ZWQgb24gdGhlIFwiTXkgRGV2aWNlXCIgdGFiLlxuICpcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gbG9ja0JpdFJhdGVDb250cm9sIC0gV2hldGhlciB0aGUgYml0IHJhdGUgc2xpZGVyIHNob3VsZFxuICogICAgICAgICAgIGJlIGFkanVzdGFibGUgYnkgdGhlIHN0dWRlbnQuXG4gKlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRlZmF1bHRCaXRSYXRlQml0c1BlclNlY29uZCAtIERlZmF1bHQgYml0IHJhdGUgb24gbGV2ZWxcbiAqICAgICAgICAgICBsb2FkLiAgQWxzbyBzZXRzIHRoZSBwdWxzZSByYXRlIGZvciBsZXZlbHMgd2l0aCB0aGUgbWV0cm9ub21lLlxuICpcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gc2hvd0NodW5rU2l6ZUNvbnRyb2wgLSBXaGV0aGVyIHRoZSBjaHVuayBzaXplIHNsaWRlclxuICogICAgICAgICAgIHNob3VsZCBiZSBkaXNwbGF5ZWQgb24gdGhlIFwiTXkgRGV2aWNlXCIgdGFiLlxuICpcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gbG9ja0NodW5rU2l6ZUNvbnRyb2wgLSBXaGV0aGVyIHRoZSBjaHVuayBzaXplIHNsaWRlclxuICogICAgICAgICAgIHNob3VsZCBiZSBhZGp1c3RhYmxlIGJ5IHRoZSBzdHVkZW50LlxuICpcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkZWZhdWx0Q2h1bmtTaXplQml0cy0gRGVmYXVsdCBjaHVuayBzaXplIG9uIGxldmVsIGxvYWQuXG4gKlxuICogQHByb3BlcnR5IHtib29sZWFufSBzaG93Um91dGVyQmFuZHdpZHRoQ29udHJvbCAtIFdoZXRoZXIgc3R1ZGVudHMgc2hvdWxkIGJlXG4gKiAgICAgICAgICAgYWJsZSB0byBzZWUgYW5kIG1hbmlwdWxhdGUgdGhlIHNsaWRlciB0aGF0IGFkanVzdHMgdGhlIHJvdXRlcidzXG4gKiAgICAgICAgICAgbWF4IHRocm91Z2hwdXQgc3BlZWQuXG4gKlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRlZmF1bHRSb3V0ZXJCYW5kd2lkdGggLSBIb3cgZmFzdCB0aGUgcm91dGVyIHNob3VsZCBiZVxuICogICAgICAgICAgIGFibGUgdG8gcHJvY2VzcyBwYWNrZXRzLCBvbiBpbml0aWFsIGxldmVsIGxvYWQuXG4gKlxuICogQHByb3BlcnR5IHtib29sZWFufSBzaG93Um91dGVyTWVtb3J5Q29udHJvbCAtIFdoZXRoZXIgc3R1ZGVudHMgc2hvdWxkIGJlXG4gKiAgICAgICAgICAgYWJsZSB0byBzZWUgYW5kIG1hbmlwdWxhdGUgdGhlIHNsaWRlciB0aGF0IGFkanVzdHMgdGhlIHJvdXRlcidzXG4gKiAgICAgICAgICAgbWF4aW11bSBxdWV1ZSBtZW1vcnkuXG4gKlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRlZmF1bHRSb3V0ZXJNZW1vcnkgLSBIb3cgbXVjaCBkYXRhIHRoZSByb3V0ZXIgcGFja2V0XG4gKiAgICAgICAgICAgcXVldWUgaXMgYWJsZSB0byBob2xkIGJlZm9yZSBpdCBzdGFydHMgZHJvcHBpbmcgcGFja2V0cywgaW4gYml0cy5cbiAqXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGVmYXVsdFJhbmRvbURyb3BDaGFuY2UgLSBPZGRzIHRoYXQgdGhlIHJvdXRlciB3aWxsIGRyb3BcbiAqICAgICAgICAgICB0aGUgcGFja2V0IGZvciBubyByZWFzb24gd2hpbGUgcm91dGluZyBpdC4gIFZhbHVlIGluIHJhbmdlXG4gKiAgICAgICAgICAgMCAobm8gZHJvcHMpIHRvIDEgKGRyb3AgZXZlcnl0aGluZylcbiAqXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHNob3dEbnNNb2RlQ29udHJvbCAtIFdoZXRoZXIgdGhlIEROUyBtb2RlIGNvbnRyb2xzIHdpbGxcbiAqICAgICAgICAgICBiZSBhdmFpbGFibGUgdG8gdGhlIHN0dWRlbnQuXG4gKlxuICogQHByb3BlcnR5IHtEbnNNb2RlfSBkZWZhdWx0RG5zTW9kZSAtIFdoaWNoIEROUyBtb2RlIHRoZSBzaW11bGF0b3Igc2hvdWxkXG4gKiAgICAgICAgICAgaW5pdGlhbGl6ZSBpbnRvLlxuICovXG5cbi8qXG4gKiBDb25maWd1cmF0aW9uIGZvciBhbGwgbGV2ZWxzLlxuICovXG52YXIgbGV2ZWxzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLyoqXG4gKiBBIGRlZmF1bHQgbGV2ZWwgY29uZmlndXJhdGlvbiBzbyB0aGF0IHdlIGNhbiBkZWZpbmUgdGhlIG90aGVycyBieSBkZWx0YS5cbiAqIFRoaXMgZGVmYXVsdCBjb25maWd1cmF0aW9uIGVuYWJsZXMgZXZlcnl0aGluZyBwb3NzaWJsZSwgc28gb3RoZXIgY29uZmlnc1xuICogc2hvdWxkIHN0YXJ0IHdpdGggdGhpcyBvbmUgYW5kIGRpc2FibGUgZmVhdHVyZXMuXG4gKiBAdHlwZSB7TmV0U2ltTGV2ZWxDb25maWd1cmF0aW9ufVxuICovXG5sZXZlbHMuY3VzdG9tID0ge1xuXG4gIC8vIExvYmJ5IGNvbmZpZ3VyYXRpb25cbiAgc2hvd0NsaWVudHNJbkxvYmJ5OiBmYWxzZSxcbiAgc2hvd1JvdXRlcnNJbkxvYmJ5OiBmYWxzZSxcbiAgY2FuQ29ubmVjdFRvQ2xpZW50czogZmFsc2UsXG4gIGNhbkNvbm5lY3RUb1JvdXRlcnM6IGZhbHNlLFxuICBzaG93QWRkUm91dGVyQnV0dG9uOiBmYWxzZSxcbiAgc2hvd0xvZ0Jyb3dzZXJCdXR0b246IGZhbHNlLFxuXG4gIC8vIFNpbXVsYXRvci13aWRlIHNldHVwXG4gIG1lc3NhZ2VHcmFudWxhcml0eTogTWVzc2FnZUdyYW51bGFyaXR5LkJJVFMsXG4gIGF1dG9tYXRpY1JlY2VpdmU6IGZhbHNlLFxuICBicm9hZGNhc3RNb2RlOiBmYWxzZSxcbiAgY29ubmVjdGVkUm91dGVyczogZmFsc2UsXG4gIG1pbmltdW1FeHRyYUhvcHM6IDAsXG4gIG1heGltdW1FeHRyYUhvcHM6IDAsXG5cbiAgLy8gUGFja2V0IGhlYWRlciBzcGVjaWZpY2F0aW9uXG4gIGFkZHJlc3NGb3JtYXQ6ICc0JyxcbiAgcGFja2V0Q291bnRCaXRXaWR0aDogNCxcbiAgcm91dGVyRXhwZWN0c1BhY2tldEhlYWRlcjogW10sXG4gIGNsaWVudEluaXRpYWxQYWNrZXRIZWFkZXI6IFtdLFxuXG4gIC8vIFZpc3VhbGl6YXRpb24gY29uZmlndXJhdGlvblxuICBzaG93SG9zdG5hbWVJbkdyYXBoOiBmYWxzZSxcblxuICAvLyBTZW5kIHdpZGdldCBjb25maWd1cmF0aW9uXG4gIHNob3dBZGRQYWNrZXRCdXR0b246IGZhbHNlLFxuICBzaG93UGFja2V0U2l6ZUNvbnRyb2w6IGZhbHNlLFxuICBkZWZhdWx0UGFja2V0U2l6ZUxpbWl0OiA4MTkyLFxuXG4gIC8vIFRhYi1wYW5lbCBjb250cm9sXG4gIHNob3dUYWJzOiBbXSxcbiAgZGVmYXVsdFRhYkluZGV4OiAwLFxuXG4gIC8vIEluc3RydWN0aW9ucyB0YWIgYW5kIGl0cyBjb250cm9sc1xuICAvLyBOb3RlOiBVc2VzIHRoZSBibG9ja2x5LXN0YW5kYXJkIGxldmVsLmluc3RydWN0aW9ucyB2YWx1ZSwgd2hpY2ggc2hvdWxkXG4gIC8vICAgICAgIGJlIGxvY2FsaXplZCBieSB0aGUgdGltZSBpdCBnZXRzIGhlcmUuXG5cbiAgLy8gXCJNeSBEZXZpY2VcIiB0YWIgYW5kIGl0cyBjb250cm9sc1xuICBzaG93UHVsc2VSYXRlU2xpZGVyOiBmYWxzZSxcbiAgc2hvd01ldHJvbm9tZTogZmFsc2UsXG4gIHNob3dFbmNvZGluZ0NvbnRyb2xzOiBbXSxcbiAgZGVmYXVsdEVuYWJsZWRFbmNvZGluZ3M6IFtdLFxuICBzaG93Qml0UmF0ZUNvbnRyb2w6IGZhbHNlLFxuICBsb2NrQml0UmF0ZUNvbnRyb2w6IGZhbHNlLFxuICBkZWZhdWx0Qml0UmF0ZUJpdHNQZXJTZWNvbmQ6IEluZmluaXR5LFxuICBzaG93Q2h1bmtTaXplQ29udHJvbDogZmFsc2UsXG4gIGxvY2tDaHVua1NpemVDb250cm9sOiBmYWxzZSxcbiAgZGVmYXVsdENodW5rU2l6ZUJpdHM6IDgsXG5cbiAgLy8gUm91dGVyIHRhYiBhbmQgaXRzIGNvbnRyb2xzXG4gIHNob3dSb3V0ZXJCYW5kd2lkdGhDb250cm9sOiBmYWxzZSxcbiAgZGVmYXVsdFJvdXRlckJhbmR3aWR0aDogSW5maW5pdHksXG4gIHNob3dSb3V0ZXJNZW1vcnlDb250cm9sOiBmYWxzZSxcbiAgZGVmYXVsdFJvdXRlck1lbW9yeTogSW5maW5pdHksXG4gIGRlZmF1bHRSYW5kb21Ecm9wQ2hhbmNlOiAwLFxuXG4gIC8vIEROUyB0YWIgYW5kIGl0cyBjb250cm9sc1xuICBzaG93RG5zTW9kZUNvbnRyb2w6IGZhbHNlLFxuICBkZWZhdWx0RG5zTW9kZTogRG5zTW9kZS5OT05FXG59O1xuXG4vKipcbiAqIFNwZWNpYWwgbGV2ZWwgY29uZmlndXJhdGlvbiBmb3IgdXNlIHdpdGggJ2dydW50IGRldicgc3RhbmRhbG9uZSBtb2RlLlxuICogTmV2ZXIgdXNlZCB3aGVuIHNlcnZpbmcgTmV0U2ltIGxldmVscyB0aHJvdWdoIGRhc2hib2FyZC5cbiAqIEB0eXBlIHtOZXRTaW1MZXZlbENvbmZpZ3VyYXRpb259XG4gKi9cbmxldmVscy5wbGF5Z3JvdW5kID0ge1xuXG4gIC8vIExvYmJ5IGNvbmZpZ3VyYXRpb25cbiAgc2hvd0NsaWVudHNJbkxvYmJ5OiBmYWxzZSxcbiAgc2hvd1JvdXRlcnNJbkxvYmJ5OiB0cnVlLFxuICBjYW5Db25uZWN0VG9DbGllbnRzOiBmYWxzZSxcbiAgY2FuQ29ubmVjdFRvUm91dGVyczogdHJ1ZSxcbiAgc2hvd0FkZFJvdXRlckJ1dHRvbjogdHJ1ZSxcbiAgc2hvd0xvZ0Jyb3dzZXJCdXR0b246IHRydWUsXG5cbiAgLy8gU2ltdWxhdG9yLXdpZGUgc2V0dXBcbiAgbWVzc2FnZUdyYW51bGFyaXR5OiBNZXNzYWdlR3JhbnVsYXJpdHkuUEFDS0VUUyxcbiAgYXV0b21hdGljUmVjZWl2ZTogdHJ1ZSxcbiAgYnJvYWRjYXN0TW9kZTogZmFsc2UsXG4gIGNvbm5lY3RlZFJvdXRlcnM6IGZhbHNlLFxuICBtaW5pbXVtRXh0cmFIb3BzOiAwLFxuICBtYXhpbXVtRXh0cmFIb3BzOiAwLFxuXG4gIC8vIFBhY2tldCBoZWFkZXIgc3BlY2lmaWNhdGlvblxuICBhZGRyZXNzRm9ybWF0OiAnNCcsXG4gIHBhY2tldENvdW50Qml0V2lkdGg6IDQsXG4gIHJvdXRlckV4cGVjdHNQYWNrZXRIZWFkZXI6IFsndG9BZGRyZXNzJywgJ2Zyb21BZGRyZXNzJ10sXG4gIGNsaWVudEluaXRpYWxQYWNrZXRIZWFkZXI6IFsndG9BZGRyZXNzJywgJ2Zyb21BZGRyZXNzJ10sXG5cbiAgLy8gVmlzdWFsaXphdGlvbiBjb25maWd1cmF0aW9uXG4gIHNob3dIb3N0bmFtZUluR3JhcGg6IGZhbHNlLFxuXG4gIC8vIFNlbmQgd2lkZ2V0IGNvbmZpZ3VyYXRpb25cbiAgc2hvd0FkZFBhY2tldEJ1dHRvbjogZmFsc2UsXG4gIHNob3dQYWNrZXRTaXplQ29udHJvbDogZmFsc2UsXG4gIGRlZmF1bHRQYWNrZXRTaXplTGltaXQ6IDgxOTIsXG5cbiAgLy8gVGFiLXBhbmVsIGNvbnRyb2xcbiAgc2hvd1RhYnM6IFsnaW5zdHJ1Y3Rpb25zJywgJ215X2RldmljZScsICdyb3V0ZXInLCAnZG5zJ10sXG4gIGRlZmF1bHRUYWJJbmRleDogMCxcblxuICAvLyBJbnN0cnVjdGlvbnMgdGFiIGFuZCBpdHMgY29udHJvbHNcbiAgLy8gTm90ZTogVXNlcyB0aGUgYmxvY2tseS1zdGFuZGFyZCBsZXZlbC5pbnN0cnVjdGlvbnMgdmFsdWUsIHdoaWNoIHNob3VsZFxuICAvLyAgICAgICBiZSBsb2NhbGl6ZWQgYnkgdGhlIHRpbWUgaXQgZ2V0cyBoZXJlLlxuXG4gIC8vIFwiTXkgRGV2aWNlXCIgdGFiIGFuZCBpdHMgY29udHJvbHNcbiAgc2hvd1B1bHNlUmF0ZVNsaWRlcjogZmFsc2UsXG4gIHNob3dNZXRyb25vbWU6IGZhbHNlLFxuICBzaG93RW5jb2RpbmdDb250cm9sczogWydhX2FuZF9iJywgJ2JpbmFyeScsICdoZXhhZGVjaW1hbCcsICdkZWNpbWFsJywgJ2FzY2lpJ10sXG4gIGRlZmF1bHRFbmFibGVkRW5jb2RpbmdzOiBbJ2FfYW5kX2InLCAnYmluYXJ5JywgJ2hleGFkZWNpbWFsJywgJ2RlY2ltYWwnLCAnYXNjaWknXSxcbiAgc2hvd0JpdFJhdGVDb250cm9sOiB0cnVlLFxuICBsb2NrQml0UmF0ZUNvbnRyb2w6IGZhbHNlLFxuICBkZWZhdWx0Qml0UmF0ZUJpdHNQZXJTZWNvbmQ6IEluZmluaXR5LFxuICBzaG93Q2h1bmtTaXplQ29udHJvbDogdHJ1ZSxcbiAgbG9ja0NodW5rU2l6ZUNvbnRyb2w6IGZhbHNlLFxuICBkZWZhdWx0Q2h1bmtTaXplQml0czogOCxcblxuICAvLyBSb3V0ZXIgdGFiIGFuZCBpdHMgY29udHJvbHNcbiAgc2hvd1JvdXRlckJhbmR3aWR0aENvbnRyb2w6IHRydWUsXG4gIGRlZmF1bHRSb3V0ZXJCYW5kd2lkdGg6IEluZmluaXR5LFxuICBzaG93Um91dGVyTWVtb3J5Q29udHJvbDogdHJ1ZSxcbiAgZGVmYXVsdFJvdXRlck1lbW9yeTogSW5maW5pdHksXG4gIGRlZmF1bHRSYW5kb21Ecm9wQ2hhbmNlOiAwLFxuXG4gIC8vIEROUyB0YWIgYW5kIGl0cyBjb250cm9sc1xuICBzaG93RG5zTW9kZUNvbnRyb2w6IHRydWUsXG4gIGRlZmF1bHREbnNNb2RlOiBEbnNNb2RlLk5PTkVcbn07XG4iLCJtb2R1bGUuZXhwb3J0cz0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdCA9IGZ1bmN0aW9uIGFub255bW91cyhsb2NhbHMsIGZpbHRlcnMsIGVzY2FwZVxuLyoqLykge1xuZXNjYXBlID0gZXNjYXBlIHx8IGZ1bmN0aW9uIChodG1sKXtcbiAgcmV0dXJuIFN0cmluZyhodG1sKVxuICAgIC5yZXBsYWNlKC8mKD8hXFx3KzspL2csICcmYW1wOycpXG4gICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xufTtcbnZhciBidWYgPSBbXTtcbndpdGggKGxvY2FscyB8fCB7fSkgeyAoZnVuY3Rpb24oKXsgXG4gYnVmLnB1c2goJzxkaXYgaWQ9XCJzbGlkZXItY2VsbFwiPlxcbiAgPGltZyBpZD1cInNwaW5uZXJcIiBzdHlsZT1cInZpc2liaWxpdHk6IGhpZGRlbjtcIiBzcmM9XCInLCBlc2NhcGUoKDIsICBhc3NldFVybCgnbWVkaWEvbmV0c2ltL2xvYWRpbmcuZ2lmJykgKSksICdcIiBoZWlnaHQ9MTUgd2lkdGg9MTU+XFxuPC9kaXY+XFxuJyk7IH0pKCk7XG59IFxucmV0dXJuIGJ1Zi5qb2luKCcnKTtcbn07XG4gIHJldHVybiBmdW5jdGlvbihsb2NhbHMpIHtcbiAgICByZXR1cm4gdChsb2NhbHMsIHJlcXVpcmUoXCJlanNcIikuZmlsdGVycyk7XG4gIH1cbn0oKSk7IiwiLyoqXG4gKiBAb3ZlcnZpZXcgVG9wLWxldmVsIGNvbnRyb2xsZXIgZm9yIHRoZSBuZXR3b3JrIHZpc3VhbGl6YXRpb24uXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIF8gPSB1dGlscy5nZXRMb2Rhc2goKTtcbnZhciB2aXN1YWxpemF0aW9uTWFya3VwID0gcmVxdWlyZSgnLi9OZXRTaW1WaXN1YWxpemF0aW9uLmh0bWwuZWpzJyk7XG52YXIgTmV0U2ltTm9kZUZhY3RvcnkgPSByZXF1aXJlKCcuL05ldFNpbU5vZGVGYWN0b3J5Jyk7XG52YXIgTmV0U2ltV2lyZSA9IHJlcXVpcmUoJy4vTmV0U2ltV2lyZScpO1xudmFyIE5ldFNpbVZpekF1dG9EbnNOb2RlID0gcmVxdWlyZSgnLi9OZXRTaW1WaXpBdXRvRG5zTm9kZScpO1xudmFyIE5ldFNpbVZpek5vZGUgPSByZXF1aXJlKCcuL05ldFNpbVZpek5vZGUnKTtcbnZhciBOZXRTaW1WaXpTaW11bGF0aW9uTm9kZSA9IHJlcXVpcmUoJy4vTmV0U2ltVml6U2ltdWxhdGlvbk5vZGUnKTtcbnZhciBOZXRTaW1WaXpTaW11bGF0aW9uV2lyZSA9IHJlcXVpcmUoJy4vTmV0U2ltVml6U2ltdWxhdGlvbldpcmUnKTtcbnZhciBOZXRTaW1WaXpXaXJlID0gcmVxdWlyZSgnLi9OZXRTaW1WaXpXaXJlJyk7XG52YXIgTmV0U2ltR2xvYmFscyA9IHJlcXVpcmUoJy4vTmV0U2ltR2xvYmFscycpO1xudmFyIHR3ZWVucyA9IHJlcXVpcmUoJy4vdHdlZW5zJyk7XG52YXIgTmV0U2ltQ29uc3RhbnRzID0gcmVxdWlyZSgnLi9OZXRTaW1Db25zdGFudHMnKTtcbnZhciBEbnNNb2RlID0gTmV0U2ltQ29uc3RhbnRzLkRuc01vZGU7XG52YXIgTm9kZVR5cGUgPSBOZXRTaW1Db25zdGFudHMuTm9kZVR5cGU7XG5cbi8qKlxuICogV2hldGhlciB0aGUgYmx1cnJlZCB2aXN1YWxpemF0aW9uIGJhY2tncm91bmQgc2hvdWxkIGJlIHNob3duLlxuICogQGNvbnN0IHtib29sZWFufVxuICovXG52YXIgU0hPV19CQUNLR1JPVU5EID0gZmFsc2U7XG5cbi8qKlxuICogVG9wLWxldmVsIGNvbnRyb2xsZXIgZm9yIHRoZSBuZXR3b3JrIHZpc3VhbGl6YXRpb24uXG4gKlxuICogRm9yIHRoZSBtb3N0IHBhcnQsIHRoZSB2aXN1YWxpemF0aW9uIGF0dGFjaGVzIHRvIHRoZSByYXcgbmV0d29yayBzdGF0ZVxuICogcmVwcmVzZW50YXRpb24gKHRoZSBzdG9yYWdlIHRhYmxlcykgYW5kIHVwZGF0ZXMgdG8gcmVmbGVjdCB0aGF0IHN0YXRlLFxuICogaW5kZXBlbmRlbnQgb2YgdGhlIHJlc3Qgb2YgdGhlIGNvbnRyb2xzIG9uIHRoZSBwYWdlLiAgVGhpcyBzZXBhcmF0aW9uIG1lYW5zXG4gKiB0aGF0IHRoZSB2aXN1YWxpemF0aW9uIGFsd2F5cyBoYXMgb25lIGNhbm9uaWNhbCBzdGF0ZSB0byBvYnNlcnZlLlxuICpcbiAqIEBwYXJhbSB7alF1ZXJ5fSByb290RGl2IC0gVGhlIDxkaXY+IHRhZyB3aXRoaW4gd2hpY2ggdGhlIHZpc3VhbGl6YXRpb25cbiAqICAgICAgICB3aWxsIGJlIGNyZWF0ZWQuXG4gKiBAcGFyYW0ge1J1bkxvb3B9IHJ1bkxvb3AgLSBMb29wIHByb3ZpZGluZyB0aWNrIGFuZCByZW5kZXIgZXZlbnRzIHRoYXQgdGhlXG4gKiAgICAgICAgdmlzdWFsaXphdGlvbiBjYW4gaG9vayB1cCB0byBhbmQgcmVzcG9uZCB0by5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgTmV0U2ltVmlzdWFsaXphdGlvbiA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJvb3REaXYsIHJ1bkxvb3ApIHtcbiAgLyoqXG4gICAqIEBwcml2YXRlIHtqUXVlcnl9XG4gICAqL1xuICB0aGlzLnJvb3REaXZfID0gcm9vdERpdjtcblxuICAvLyBJbW1lZGlhdGVseSwgZHJvcCBvdXIgU1ZHIGNhbnZhcyBhbmQgYmFzaWMgZ3JvdXBzIGludG8gdGhlIERPTVxuICB0aGlzLnJvb3REaXZfLmh0bWwodmlzdWFsaXphdGlvbk1hcmt1cCh7XG4gICAgc2hvd0JhY2tncm91bmQ6IFNIT1dfQkFDS0dST1VORFxuICB9KSk7XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlIHtqUXVlcnl9XG4gICAqL1xuICB0aGlzLnN2Z1Jvb3RfID0gdGhpcy5yb290RGl2Xy5maW5kKCdzdmcnKTtcblxuICAvKipcbiAgICogQmFja2dyb3VuZCBncm91cCBuZXZlciBnb2VzIGF3YXksIHNvIHNlYXJjaCBmb3IgaXQgb25jZSBhbmQgY2FjaGVcbiAgICogaXQgaGVyZS5cbiAgICogQHByaXZhdGUge2pRdWVyeX1cbiAgICovXG4gIHRoaXMuYmFja2dyb3VuZEdyb3VwXyA9IHRoaXMuc3ZnUm9vdF8uZmluZCgnI2JhY2tncm91bmQtZ3JvdXAnKTtcblxuICAvKipcbiAgICogRm9yZWdyb3VuZCBncm91cCBuZXZlciBnb2VzIGF3YXksIHNvIHNlYXJjaCBmb3IgaXQgb25jZSBhbmQgY2FjaGVcbiAgICogaXQgaGVyZS5cbiAgICogQHByaXZhdGUge2pRdWVyeX1cbiAgICovXG4gIHRoaXMuZm9yZWdyb3VuZEdyb3VwXyA9IHRoaXMuc3ZnUm9vdF8uZmluZCgnI2ZvcmVncm91bmQtZ3JvdXAnKTtcblxuICAvKipcbiAgICogVGhlIHNoYXJkIGN1cnJlbnRseSBiZWluZyByZXByZXNlbnRlZC5cbiAgICogV2UgZG9uJ3QgaGF2ZSBhIHNoYXJkIG5vdywgYnV0IHdlIHJlZ2lzdGVyIHdpdGggdGhlIGNvbm5lY3Rpb24gbWFuYWdlclxuICAgKiB0byBmaW5kIG91dCB3aGVuIHdlIGhhdmUgb25lLlxuICAgKiBAcHJpdmF0ZSB7TmV0U2ltU2hhcmR9XG4gICAqL1xuICB0aGlzLnNoYXJkXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIExpc3Qgb2YgVml6RW50aXRpZXMsIHdoaWNoIGFyZSBhbGwgdGhlIGVsZW1lbnRzIHRoYXQgd2lsbCBhY3R1YWxseSBzaG93IHVwXG4gICAqIGluIG91ciB2aXN1YWxpemF0aW9uLlxuICAgKiBAcHJpdmF0ZSB7TmV0U2ltVml6RWxlbWVudFtdfVxuICAgKi9cbiAgdGhpcy5lbGVtZW50c18gPSBbXTtcblxuICAvKipcbiAgICogUmVmZXJlbmNlIHRvIHRoZSBsb2NhbCBub2RlIHZpeiBlbGVtZW50LCB0aGUgYW5jaG9yIGZvciB0aGUgdmlzdWFsaXphdGlvbi5cbiAgICogQHR5cGUge05ldFNpbVZpelNpbXVsYXRpb25Ob2RlfVxuICAgKi9cbiAgdGhpcy5sb2NhbE5vZGUgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBXaWR0aCAoaW4gc3ZnLXVuaXRzKSBvZiB2aXN1YWxpemF0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLnZpc3VhbGl6YXRpb25XaWR0aCA9IDMwMDtcblxuICAvKipcbiAgICogSGVpZ2h0IChpbiBzdmctdW5pdHMpIG9mIHZpc3VhbGl6YXRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRoaXMudmlzdWFsaXphdGlvbkhlaWdodCA9IDMwMDtcblxuICAvKipcbiAgKiBMYXN0IGtub3duIEROUyBtb2RlLCBzbyB0aGF0IG5ldyBlbGVtZW50cyBjYW4gYmUgY3JlYXRlZCB3aXRoIHRoZVxuICAqIGNvcnJlY3QgZGVmYXVsdFxuICAqIEB0eXBlIHtEbnNNb2RlfVxuICAqL1xuICB0aGlzLmRuc01vZGVfID0gbnVsbDtcblxuICAvKipcbiAgICogUmVmZXJlbmNlIHRvIHZpc3VhbGl6ZWQgYXV0by1ETlMgbm9kZSwgYSBmYWtlIG5vZGUgKG5vdCBtYXBwZWQgdG8gdGhlXG4gICAqIHNpbXVsYXRpb24gaW4gYSBub3JtYWwgd2F5KSB0aGF0IGFsc28gbGl2ZXMgaW4gb3VyIGVsZW1lbnRzXyBjb2xsZWN0aW9uLlxuICAgKiBAdHlwZSB7TmV0U2ltVml6QXV0b0Ruc05vZGV9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmF1dG9EbnNOb2RlXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFJlZmVyZW5jZSB0byB3aXJlIGJldHdlZW4gdGhlIGF1dG8tRE5TIG5vZGUgYW5kIHRoZSBmb3JlZ3JvdW5kIHJvdXRlci5cbiAgICogTWFuYWdlZCBtYW51YWxseSBzbyB3ZSBrZWVwIGEgaGFuZGxlIG9uIGl0LCBidXQgYWxzbyBsaXZlcyBpbiB0aGUgZWxlbWVudHNfXG4gICAqIGNvbGxlY3Rpb24uXG4gICAqIEB0eXBlIHtOZXRTaW1WaXpXaXJlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5hdXRvRG5zV2lyZV8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBFdmVudCByZWdpc3RyYXRpb24gaW5mb3JtYXRpb25cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHRoaXMuZXZlbnRLZXlzID0ge307XG5cbiAgLyoqXG4gICAqIExhc3Qga25vd24gZW5jb2RpbmdzIHNldCwgc28gdGhhdCBuZXcgZWxlbWVudHMgY2FuIGJlIGNyZWF0ZWQgd2l0aFxuICAgKiB0aGUgY29ycmVjdCBkZWZhdWx0XG4gICAqIEB0eXBlIHtFbmNvZGluZ1R5cGVbXX1cbiAgICovXG4gIHRoaXMuZW5jb2RpbmdzXyA9IFtdO1xuXG4gIC8vIEhvb2sgdXAgdGljayBhbmQgcmVuZGVyIG1ldGhvZHNcbiAgcnVuTG9vcC50aWNrLnJlZ2lzdGVyKHRoaXMudGljay5iaW5kKHRoaXMpKTtcbiAgcnVuTG9vcC5yZW5kZXIucmVnaXN0ZXIodGhpcy5yZW5kZXIuYmluZCh0aGlzKSk7XG59O1xuXG4vKipcbiAqIFRpY2s6IFVwZGF0ZSBhbGwgdml6ZW50aXRpZXMsIGdpdmluZyB0aGVtIGFuIG9wcG9ydHVuaXR5IHRvIHJlY2FsY3VsYXRlXG4gKiAgICAgICB0aGVpciBpbnRlcm5hbCBzdGF0ZSwgYW5kIHJlbW92ZSBhbnkgZGVhZCBlbnRpdGllcyBmcm9tIHRoZVxuICogICAgICAgdmlzdWFsaXphdGlvbi5cbiAqIEBwYXJhbSB7UnVuTG9vcC5DbG9ja30gY2xvY2tcbiAqL1xuTmV0U2ltVmlzdWFsaXphdGlvbi5wcm90b3R5cGUudGljayA9IGZ1bmN0aW9uIChjbG9jaykge1xuICAvLyBFdmVyeW9uZSBnZXRzIGFuIHVwZGF0ZVxuICB0aGlzLmVsZW1lbnRzXy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgZWxlbWVudC50aWNrKGNsb2NrKTtcbiAgfSk7XG5cbiAgLy8gVGVhciBvdXQgZGVhZCBlbnRpdGllcy5cbiAgdGhpcy5lbGVtZW50c18gPSB0aGlzLmVsZW1lbnRzXy5maWx0ZXIoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICBpZiAoZWxlbWVudC5pc0RlYWQoKSkge1xuICAgICAgZWxlbWVudC5nZXRSb290KCkucmVtb3ZlKCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9KTtcbn07XG5cbi8qKlxuICogUmVuZGVyOiBMZXQgYWxsIHZpemVudGl0aWVzIFwicmVkcmF3XCIgKG9yIGluIG91ciBjYXNlLCB0b3VjaCB0aGUgRE9NKVxuICogQHBhcmFtIHtSdW5Mb29wLkNsb2NrfSBjbG9ja1xuICovXG5OZXRTaW1WaXN1YWxpemF0aW9uLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoY2xvY2spIHtcbiAgdGhpcy5lbGVtZW50c18uZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIGVsZW1lbnQucmVuZGVyKGNsb2NrKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIENoYW5nZSB0aGUgc2hhcmQgdGhpcyB2aXN1YWxpemF0aW9uIHdpbGwgc291cmNlIGl0cyBkYXRhIGZyb20uXG4gKiBSZS1hdHRhY2hlcyB0YWJsZSBjaGFuZ2UgbGlzdGVuZXJzIGZvciBhbGwgdGhlIHRhYmxlcyB3ZSBuZWVkIHRvIG1vbml0b3IuXG4gKiBAcGFyYW0gez9OZXRTaW1TaGFyZH0gbmV3U2hhcmQgLSBudWxsIGlmIGRpc2Nvbm5lY3RlZFxuICovXG5OZXRTaW1WaXN1YWxpemF0aW9uLnByb3RvdHlwZS5zZXRTaGFyZCA9IGZ1bmN0aW9uIChuZXdTaGFyZCkge1xuICB0aGlzLnNoYXJkXyA9IG5ld1NoYXJkO1xuXG4gIC8vIElmIHdlIHdlcmUgcmVnaXN0ZXJlZCBmb3Igc2hhcmQgZXZlbnRzLCB1bnJlZ2lzdGVyIG9sZCBoYW5kbGVycy5cbiAgaWYgKHRoaXMuZXZlbnRLZXlzLnJlZ2lzdGVyZWRXaXRoU2hhcmQpIHtcbiAgICB0aGlzLmV2ZW50S2V5cy5yZWdpc3RlcmVkV2l0aFNoYXJkLm5vZGVUYWJsZS50YWJsZUNoYW5nZS51bnJlZ2lzdGVyKFxuICAgICAgICB0aGlzLmV2ZW50S2V5cy5ub2RlVGFibGUpO1xuICAgIHRoaXMuZXZlbnRLZXlzLnJlZ2lzdGVyZWRXaXRoU2hhcmQud2lyZVRhYmxlLnRhYmxlQ2hhbmdlLnVucmVnaXN0ZXIoXG4gICAgICAgIHRoaXMuZXZlbnRLZXlzLndpcmVUYWJsZSk7XG4gICAgdGhpcy5ldmVudEtleXMucmVnaXN0ZXJlZFdpdGhTaGFyZCA9IG51bGw7XG4gIH1cblxuICAvLyBJZiB3ZSBoYXZlIGEgbmV3IHNoYXJkLCByZWdpc3RlciBuZXcgaGFuZGxlcnMuXG4gIGlmIChuZXdTaGFyZCkge1xuICAgIHRoaXMuZXZlbnRLZXlzLm5vZGVUYWJsZSA9IG5ld1NoYXJkLm5vZGVUYWJsZS50YWJsZUNoYW5nZS5yZWdpc3RlcihcbiAgICAgICAgdGhpcy5vbk5vZGVUYWJsZUNoYW5nZV8uYmluZCh0aGlzKSk7XG4gICAgdGhpcy5ldmVudEtleXMud2lyZVRhYmxlID0gbmV3U2hhcmQud2lyZVRhYmxlLnRhYmxlQ2hhbmdlLnJlZ2lzdGVyKFxuICAgICAgICB0aGlzLm9uV2lyZVRhYmxlQ2hhbmdlXy5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmV2ZW50S2V5cy5yZWdpc3RlcmVkV2l0aFNoYXJkID0gbmV3U2hhcmQ7XG4gIH1cbn07XG5cbi8qKlxuICogQ2hhbmdlIHdoaWNoIG5vZGUgd2UgY29uc2lkZXIgdGhlICdsb2NhbCBub2RlJyBpbiB0aGUgdmlzdWFsaXphdGlvbi5cbiAqIFdlIGdvIHRocm91Z2ggYSBzcGVjaWFsIGNyZWF0aW9uIHByb2Nlc3MgZm9yIHRoaXMgbm9kZSwgc28gdGhhdCBpdFxuICogbG9va3MgYW5kIGJlaGF2ZXMgZGlmZmVyZW50bHkuXG4gKiBAcGFyYW0gez9OZXRTaW1Mb2NhbENsaWVudE5vZGV9IG5ld0xvY2FsTm9kZSAtIG51bGwgaWYgZGlzY29ubmVjdGVkXG4gKi9cbk5ldFNpbVZpc3VhbGl6YXRpb24ucHJvdG90eXBlLnNldExvY2FsTm9kZSA9IGZ1bmN0aW9uIChuZXdMb2NhbE5vZGUpIHtcbiAgLy8gVW5yZWdpc3RlciBvbGQgaGFuZGxlcnNcbiAgaWYgKHRoaXMuZXZlbnRLZXlzLnJlZ2lzdGVyZWRXaXRoTG9jYWxOb2RlKSB7XG4gICAgdGhpcy5ldmVudEtleXMucmVnaXN0ZXJlZFdpdGhMb2NhbE5vZGUucmVtb3RlQ2hhbmdlLnVucmVnaXN0ZXIoXG4gICAgICAgIHRoaXMuZXZlbnRLZXlzLnJlbW90ZUNoYW5nZSk7XG4gICAgdGhpcy5ldmVudEtleXMucmVnaXN0ZXJlZFdpdGhMb2NhbE5vZGUgPSBudWxsO1xuICB9XG5cbiAgLy8gUmVnaXN0ZXIgbmV3IGhhbmRsZXJzXG4gIGlmIChuZXdMb2NhbE5vZGUpIHtcbiAgICB0aGlzLmV2ZW50S2V5cy5yZW1vdGVDaGFuZ2UgPSBuZXdMb2NhbE5vZGUucmVtb3RlQ2hhbmdlLnJlZ2lzdGVyKFxuICAgICAgICB0aGlzLm9uUmVtb3RlQ2hhbmdlXy5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmV2ZW50S2V5cy5yZWdpc3RlcmVkV2l0aExvY2FsTm9kZSA9IG5ld0xvY2FsTm9kZTtcbiAgfVxuXG4gIC8vIENyZWF0ZSB2aXpub2RlIGZvciBsb2NhbCBub2RlXG4gIGlmIChuZXdMb2NhbE5vZGUpIHtcbiAgICBpZiAodGhpcy5sb2NhbE5vZGUpIHtcbiAgICAgIHRoaXMubG9jYWxOb2RlLmNvbmZpZ3VyZUZyb20obmV3TG9jYWxOb2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sb2NhbE5vZGUgPSBuZXcgTmV0U2ltVml6U2ltdWxhdGlvbk5vZGUobmV3TG9jYWxOb2RlLCBTSE9XX0JBQ0tHUk9VTkQpO1xuICAgICAgdGhpcy5lbGVtZW50c18ucHVzaCh0aGlzLmxvY2FsTm9kZSk7XG4gICAgICB0aGlzLmJhY2tncm91bmRHcm91cF8uYXBwZW5kKHRoaXMubG9jYWxOb2RlLmdldFJvb3QoKSk7XG4gICAgfVxuICAgIHRoaXMubG9jYWxOb2RlLnNldElzTG9jYWxOb2RlKCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRoaXMubG9jYWxOb2RlKSB7XG4gICAgICB0aGlzLmxvY2FsTm9kZS5raWxsKCk7XG4gICAgICB0aGlzLmxvY2FsTm9kZSA9IG51bGw7XG4gICAgfVxuICB9XG4gIHRoaXMucHVsbEVsZW1lbnRzVG9Gb3JlZ3JvdW5kKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aGVuZXZlciB0aGUgbG9jYWwgbm9kZSBub3RpZmllcyB0aGF0IHdlJ3ZlIGJlZW4gY29ubmVjdGVkIHRvLFxuICogb3IgZGlzY29ubmVjdGVkIGZyb20sIGEgcm91dGVyLlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltVmlzdWFsaXphdGlvbi5wcm90b3R5cGUub25SZW1vdGVDaGFuZ2VfID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnB1bGxFbGVtZW50c1RvRm9yZWdyb3VuZCgpO1xuICB0aGlzLmRpc3RyaWJ1dGVGb3JlZ3JvdW5kTm9kZXMoKTtcbn07XG5cbi8qKlxuICogRmluZCBhIHBhcnRpY3VsYXIgVml6RWxlbWVudCBpbiB0aGUgdmlzdWFsaXphdGlvbiwgYnkgdHlwZSBhbmQgSUQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBlbGVtZW50VHlwZSAtIGNvbnN0cnVjdG9yIG9mIGVsZW1lbnQgd2UncmUgbG9va2luZyBmb3JcbiAqIEBwYXJhbSB7bnVtYmVyfSBlbnRpdHlJRCAtIElELCB3aXRoIGNvcnJlc3BvbmRzIHRvIE5ldFNpbUVudGl0eS5lbnRpdHlJRFxuICogQHJldHVybnMge05ldFNpbVZpekVsZW1lbnR9IG9yIHVuZGVmaW5lZCBpZiBub3QgZm91bmRcbiAqL1xuTmV0U2ltVmlzdWFsaXphdGlvbi5wcm90b3R5cGUuZ2V0RWxlbWVudEJ5RW50aXR5SUQgPSBmdW5jdGlvbiAoZWxlbWVudFR5cGUsIGVudGl0eUlEKSB7XG4gIHJldHVybiBfLmZpbmQodGhpcy5lbGVtZW50c18sIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQgaW5zdGFuY2VvZiBlbGVtZW50VHlwZSAmJlxuICAgICAgICBlbGVtZW50LmdldENvcnJlc3BvbmRpbmdFbnRpdHlJZCAmJlxuICAgICAgICBlbGVtZW50LmdldENvcnJlc3BvbmRpbmdFbnRpdHlJZCgpID09PSBlbnRpdHlJRDtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEdldHMgdGhlIHNldCBvZiBWaXpXaXJlcyBkaXJlY3RseSBhdHRhY2hlZCB0byB0aGUgZ2l2ZW4gVml6Tm9kZSBvblxuICogdGhlIGxvY2FsIGVuZCBmb3Igd2hpY2ggdGhlcmUgYXJlIGFsc28gY29ycmVzcG9uZGluZyBWaXpXaXJlcyBjb21pbmdcbiAqIGZyb20gdGhlIG9wcG9zaXRlIGVuZC4gTm90ZSB0aGF0IGlmIHRoZSBWaXpOb2RlIGlzIGEgcm91dGVyLCB3ZVxuICogY29uc2lkZXIgYWxsIGF0dGFjaGVkIHdpcmVzIHRvIGJlIHJlY2lwcm9jYXRlZC5cbiAqIEBwYXJhbSB7TmV0U2ltVml6U2ltdWxhdGlvbk5vZGV9IHZpek5vZGVcbiAqIEByZXR1cm5zIHtBcnJheS48TmV0U2ltVml6U2ltdWxhdGlvbldpcmU+fSB0aGUgYXR0YWNoZWQgd2lyZXNcbiAqL1xuTmV0U2ltVmlzdWFsaXphdGlvbi5wcm90b3R5cGUuZ2V0UmVjaXByb2NhdGVkV2lyZXNBdHRhY2hlZFRvTm9kZSA9IGZ1bmN0aW9uICh2aXpOb2RlKSB7XG5cbiAgaWYgKHZpek5vZGUuaXNSb3V0ZXIpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRXaXJlc0F0dGFjaGVkVG9Ob2RlKHZpek5vZGUpO1xuICB9XG5cbiAgdmFyIGxvY2FsV2lyZXMgPSB0aGlzLmdldExvY2FsV2lyZXNBdHRhY2hlZFRvTm9kZSh2aXpOb2RlKTtcblxuICByZXR1cm4gbG9jYWxXaXJlcy5maWx0ZXIoZnVuY3Rpb24gKGxvY2FsV2lyZSkge1xuXG4gICAgaWYgKGxvY2FsV2lyZS5yZW1vdGVWaXpOb2RlLmlzUm91dGVyKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5nZXRXaXJlc0F0dGFjaGVkVG9Ob2RlKGxvY2FsV2lyZS5yZW1vdGVWaXpOb2RlKS5zb21lKGZ1bmN0aW9uICh3aXJlKSB7XG4gICAgICByZXR1cm4gd2lyZS5yZW1vdGVWaXpOb2RlID09PSB2aXpOb2RlO1xuICAgIH0pO1xuXG4gIH0sIHRoaXMpO1xufTtcblxuLyoqXG4gKiBHZXRzIHRoZSBzZXQgb2YgVml6V2lyZXMgZGlyZWN0bHkgYXR0YWNoZWQgdG8gdGhlIGdpdmVuIFZpek5vZGUgb24gdGhlIGxvY2FsIGVuZFxuICogQHBhcmFtIHtOZXRTaW1WaXpTaW11bGF0aW9uTm9kZX0gdml6Tm9kZVxuICogQHJldHVybnMge0FycmF5LjxOZXRTaW1WaXpTaW11bGF0aW9uV2lyZT59IHRoZSBhdHRhY2hlZCB3aXJlc1xuICovXG5OZXRTaW1WaXN1YWxpemF0aW9uLnByb3RvdHlwZS5nZXRMb2NhbFdpcmVzQXR0YWNoZWRUb05vZGUgPSBmdW5jdGlvbiAodml6Tm9kZSkge1xuICByZXR1cm4gdGhpcy5lbGVtZW50c18uZmlsdGVyKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQgaW5zdGFuY2VvZiBOZXRTaW1WaXpXaXJlICYmIGVsZW1lbnQubG9jYWxWaXpOb2RlID09PSB2aXpOb2RlO1xuICB9KTtcbn07XG5cbi8qKlxuICogR2V0cyB0aGUgc2V0IG9mIFZpeldpcmVzIGRpcmVjdGx5IGF0dGFjaGVkIHRvIHRoZSBnaXZlbiBWaXpOb2RlLCAoZWl0aGVyXG4gKiBvbiB0aGUgbG9jYWwgZW5kIG9yIHJlbW90ZSBlbmQpXG4gKiBAcGFyYW0ge05ldFNpbVZpelNpbXVsYXRpb25Ob2RlfSB2aXpOb2RlXG4gKiBAcmV0dXJucyB7QXJyYXkuPE5ldFNpbVZpelNpbXVsYXRpb25XaXJlPn0gdGhlIGF0dGFjaGVkIHdpcmVzXG4gKi9cbk5ldFNpbVZpc3VhbGl6YXRpb24ucHJvdG90eXBlLmdldFdpcmVzQXR0YWNoZWRUb05vZGUgPSBmdW5jdGlvbiAodml6Tm9kZSkge1xuICByZXR1cm4gdGhpcy5lbGVtZW50c18uZmlsdGVyKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQgaW5zdGFuY2VvZiBOZXRTaW1WaXpXaXJlICYmXG4gICAgICAgIChlbGVtZW50LmxvY2FsVml6Tm9kZSA9PT0gdml6Tm9kZSB8fCBlbGVtZW50LnJlbW90ZVZpek5vZGUgPT09IHZpek5vZGUpO1xuICB9KTtcbn07XG5cbi8qKlxuICogSGFuZGxlIG5vdGlmaWNhdGlvbiB0aGF0IG5vZGUgdGFibGUgY29udGVudHMgaGF2ZSBjaGFuZ2VkLlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltVmlzdWFsaXphdGlvbi5wcm90b3R5cGUub25Ob2RlVGFibGVDaGFuZ2VfID0gZnVuY3Rpb24gKCkge1xuICAvLyBDb252ZXJ0IHJvd3MgdG8gY29ycmVjdGx5LXR5cGVkIG9iamVjdHNcbiAgdmFyIHRhYmxlTm9kZXMgPSBOZXRTaW1Ob2RlRmFjdG9yeS5ub2Rlc0Zyb21Sb3dzKHRoaXMuc2hhcmRfLFxuICAgICAgdGhpcy5zaGFyZF8ubm9kZVRhYmxlLnJlYWRBbGwoKSk7XG5cbiAgLy8gVXBkYXRlIGNvbGxlY3Rpb24gb2YgVml6Tm9kZXMgZnJvbSBzb3VyY2UgZGF0YVxuICB0aGlzLnVwZGF0ZVZpekVudGl0aWVzT2ZUeXBlXyhOZXRTaW1WaXpTaW11bGF0aW9uTm9kZSwgdGFibGVOb2RlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICB2YXIgbmV3Vml6Tm9kZSA9IG5ldyBOZXRTaW1WaXpTaW11bGF0aW9uTm9kZShub2RlLCBTSE9XX0JBQ0tHUk9VTkQpO1xuICAgIG5ld1Zpek5vZGUuc2V0RG5zTW9kZSh0aGlzLmRuc01vZGVfKTtcbiAgICBuZXdWaXpOb2RlLnNuYXBUb1Bvc2l0aW9uKFxuICAgICAgICBNYXRoLnJhbmRvbSgpICogdGhpcy52aXN1YWxpemF0aW9uV2lkdGggLSAodGhpcy52aXN1YWxpemF0aW9uV2lkdGggLyAyKSxcbiAgICAgICAgTWF0aC5yYW5kb20oKSAqIHRoaXMudmlzdWFsaXphdGlvbkhlaWdodCAtICh0aGlzLnZpc3VhbGl6YXRpb25IZWlnaHQgLyAyKSk7XG4gICAgcmV0dXJuIG5ld1Zpek5vZGU7XG4gIH0uYmluZCh0aGlzKSk7XG59O1xuXG4vKipcbiAqIEhhbmRsZSBub3RpZmljYXRpb24gdGhhdCB3aXJlIHRhYmxlIGNvbnRlbnRzIGhhdmUgY2hhbmdlZC5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVZpc3VhbGl6YXRpb24ucHJvdG90eXBlLm9uV2lyZVRhYmxlQ2hhbmdlXyA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gQ29udmVydCByb3dzIHRvIGNvcnJlY3RseS10eXBlZCBvYmplY3RzXG4gIHZhciB0YWJsZVdpcmVzID0gdGhpcy5zaGFyZF8ud2lyZVRhYmxlLnJlYWRBbGwoKS5tYXAoZnVuY3Rpb24gKHJvdykge1xuICAgIHJldHVybiBuZXcgTmV0U2ltV2lyZSh0aGlzLnNoYXJkXywgcm93KTtcbiAgfSwgdGhpcyk7XG5cbiAgLy8gVXBkYXRlIGNvbGxlY3Rpb24gb2YgVml6V2lyZXMgZnJvbSBzb3VyY2UgZGF0YVxuICB0aGlzLnVwZGF0ZVZpekVudGl0aWVzT2ZUeXBlXyhOZXRTaW1WaXpTaW11bGF0aW9uV2lyZSwgdGFibGVXaXJlcywgZnVuY3Rpb24gKHdpcmUpIHtcbiAgICB2YXIgbmV3Vml6V2lyZSA9IG5ldyBOZXRTaW1WaXpTaW11bGF0aW9uV2lyZSh3aXJlLFxuICAgICAgICB0aGlzLmdldEVsZW1lbnRCeUVudGl0eUlELmJpbmQodGhpcykpO1xuICAgIG5ld1ZpeldpcmUuc2V0RW5jb2RpbmdzKHRoaXMuZW5jb2RpbmdzXyk7XG4gICAgcmV0dXJuIG5ld1ZpeldpcmU7XG4gIH0uYmluZCh0aGlzKSk7XG5cbiAgLy8gSW4gYnJvYWRjYXN0IG1vZGUgd2UgaGlkZSB0aGUgcmVhbCB3aXJlcyBhbmQgcm91dGVyLCBhbmQgb3ZlcmxheSBhIHNldFxuICAvLyBvZiBmYWtlIHdpcmVzIHNob3dpbmcgZXZlcnlib2R5IGNvbm5lY3RlZCB0byBldmVyeWJvZHkgZWxzZS5cbiAgaWYgKE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKS5icm9hZGNhc3RNb2RlKSB7XG4gICAgdGhpcy51cGRhdGVCcm9hZGNhc3RNb2RlV2lyZXNfKCk7XG4gIH1cblxuICAvLyBTaW5jZSB0aGUgd2lyZXMgdGFibGUgZGV0ZXJtaW5lcyBzaW11bGF0ZWQgY29ubmVjdGl2aXR5LCB3ZSB0cmlnZ2VyIGFcbiAgLy8gcmVjYWxjdWxhdGlvbiBvZiB3aGljaCBub2RlcyBhcmUgaW4gdGhlIGxvY2FsIG5ldHdvcmsgKHNob3VsZCBiZSBpbiB0aGVcbiAgLy8gZm9yZWdyb3VuZCkgYW5kIHRoZW4gcmUtbGF5b3V0IHRoZSBmb3JlZ3JvdW5kIG5vZGVzLlxuICB0aGlzLnB1bGxFbGVtZW50c1RvRm9yZWdyb3VuZCgpO1xuICB0aGlzLmRpc3RyaWJ1dGVGb3JlZ3JvdW5kTm9kZXMoKTtcbn07XG5cbi8qKlxuICogQmFzZWQgb24gbmV3IGNvbm5lY3Rpdml0eSBpbmZvcm1hdGlvbiwgcmVjYWxjdWxhdGUgd2hpY2ggJ2Zha2UnIGNvbm5lY3Rpb25zXG4gKiB3ZSBuZWVkIHRvIGRpc3BsYXkgdG8gc2hvdyBhbGwgbm9kZXMgaW4gYSAncm9vbScgaGF2aW5nIGRpcmVjdCB3aXJlcyB0b1xuICogb25lIGFub3RoZXIuXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1WaXN1YWxpemF0aW9uLnByb3RvdHlwZS51cGRhdGVCcm9hZGNhc3RNb2RlV2lyZXNfID0gZnVuY3Rpb24gKCkge1xuICAvLyBLaWxsIGFsbCBmYWtlIHdpcmVzXG4gIHRoaXMuZWxlbWVudHNfLmZvckVhY2goZnVuY3Rpb24gKHZpekVsZW1lbnQpIHtcbiAgICBpZiAodml6RWxlbWVudCBpbnN0YW5jZW9mIE5ldFNpbVZpeldpcmUgJiZcbiAgICAgICAgISh2aXpFbGVtZW50IGluc3RhbmNlb2YgTmV0U2ltVml6U2ltdWxhdGlvbldpcmUpKSB7XG4gICAgICB2aXpFbGVtZW50LmtpbGwoKTtcbiAgICB9XG4gIH0sIHRoaXMpO1xuXG4gIC8vIEdlbmVyYXRlIG5ldyB3aXJlc1xuICB2YXIgY29ubmVjdGlvbnMgPSB0aGlzLmdlbmVyYXRlQnJvYWRjYXN0TW9kZUNvbm5lY3Rpb25zXygpO1xuICBjb25uZWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChjb25uZWN0ZWRQYWlyKSB7XG4gICAgdmFyIG5ld0Zha2VXaXJlID0gbmV3IE5ldFNpbVZpeldpcmUoY29ubmVjdGVkUGFpci5ub2RlQSwgY29ubmVjdGVkUGFpci5ub2RlQik7XG4gICAgdGhpcy5hZGRWaXpFbGVtZW50XyhuZXdGYWtlV2lyZSk7XG4gIH0sIHRoaXMpO1xufTtcblxuLyoqXG4gKiBVc2luZyB0aGUgY2FjaGVkIG5vZGUgYW5kIHdpcmUgZGF0YSwgZ2VuZXJhdGVzIHRoZSBzZXQgb2YgYWxsIG5vZGUgcGFpcnMgKEEsQilcbiAqIG9uIHRoZSBzaGFyZCBzdWNoIHRoYXQgYm90aCBBIGFuZCBCIGFyZSBjbGllbnQgbm9kZXMsIGFuZCBBIGlzIHJlYWNoYWJsZVxuICogZnJvbSBCLlxuICogQHJldHVybnMge0FycmF5Ljx7bm9kZUE6e251bWJlcn0sIG5vZGVCOntudW1iZXJ9fT59XG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1WaXN1YWxpemF0aW9uLnByb3RvdHlwZS5nZW5lcmF0ZUJyb2FkY2FzdE1vZGVDb25uZWN0aW9uc18gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBub2RlUm93cyA9IHRoaXMuc2hhcmRfLm5vZGVUYWJsZS5yZWFkQWxsKCk7XG4gIHZhciB3aXJlUm93cyA9IHRoaXMuc2hhcmRfLndpcmVUYWJsZS5yZWFkQWxsKCk7XG4gIHZhciBub2RlQ291bnQgPSBub2RlUm93cy5sZW5ndGg7XG5cbiAgLy8gR2VuZXJhdGUgYSByZXZlcnNlIG1hcHBpbmcgZm9yIGxvb2t1cHNcbiAgdmFyIG5vZGVJRFRvSW5kZXggPSB7fTtcbiAgZm9yICh2YXIgbWF0cml4SW5kZXggPSAwOyBtYXRyaXhJbmRleCA8IG5vZGVDb3VudDsgbWF0cml4SW5kZXgrKykge1xuICAgIG5vZGVJRFRvSW5kZXhbbm9kZVJvd3NbbWF0cml4SW5kZXhdLmlkXSA9IG1hdHJpeEluZGV4O1xuICB9XG5cbiAgLy8gR2VuZXJhdGUgZW1wdHkgZ3JhcGggbWF0cml4IGluaXRpYWxpemVkIHdpdGggbm8gY29ubmVjdGlvbnMuXG4gIHZhciBncmFwaCA9IG5ldyBBcnJheShub2RlQ291bnQpO1xuICBmb3IgKHZhciB4ID0gMDsgeCA8IG5vZGVDb3VudDsgeCsrKSB7XG4gICAgZ3JhcGhbeF0gPSBuZXcgQXJyYXkobm9kZUNvdW50KTtcbiAgICBmb3IgKHZhciB5ID0gMDsgeSA8IG5vZGVDb3VudDsgeSsrKSB7XG4gICAgICBncmFwaFt4XVt5XSA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFwcGx5IHJlYWwgY29ubmVjdGlvbnMgKHdpcmVzKSB0byB0aGUgZ3JhcGggbWF0cml4XG4gIHdpcmVSb3dzLmZvckVhY2goZnVuY3Rpb24gKHdpcmVSb3cpIHtcbiAgICB2YXIgbG9jYWxOb2RlSW5kZXggPSBub2RlSURUb0luZGV4W3dpcmVSb3cubG9jYWxOb2RlSURdO1xuICAgIHZhciByZW1vdGVOb2RlSW5kZXggPSBub2RlSURUb0luZGV4W3dpcmVSb3cucmVtb3RlTm9kZUlEXTtcbiAgICBpZiAobG9jYWxOb2RlSW5kZXggIT09IHVuZGVmaW5lZCAmJiByZW1vdGVOb2RlSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgZ3JhcGhbbG9jYWxOb2RlSW5kZXhdW3JlbW90ZU5vZGVJbmRleF0gPSB0cnVlO1xuICAgICAgZ3JhcGhbcmVtb3RlTm9kZUluZGV4XVtsb2NhbE5vZGVJbmRleF0gPSB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gVXNlIHNpbXBsZSBGbG95ZC1XYXJzaGFsbCB0byBjb21wbGV0ZSB0aGUgdHJhbnNpdGl2ZSBjbG9zdXJlIGdyYXBoXG4gIGZvciAodmFyIGsgPSAwOyBrIDwgbm9kZUNvdW50OyBrKyspIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVDb3VudDsgaSsrKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG5vZGVDb3VudDsgaisrKSB7XG4gICAgICAgIGlmIChncmFwaFtpXVtrXSAmJiBncmFwaFtrXVtqXSkge1xuICAgICAgICAgIGdyYXBoW2ldW2pdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIE5vdywgZ2VuZXJhdGUgdW5pcXVlIHBhaXJzIGRvaW5nIGxvb2t1cCBvbiBvdXIgdHJhbnNpdGl2ZSBjbG9zdXJlIGdyYXBoXG4gIHZhciBjb25uZWN0aW9ucyA9IFtdO1xuICBmb3IgKHZhciBmcm9tID0gMDsgZnJvbSA8IG5vZGVDb3VudCAtIDE7IGZyb20rKykge1xuICAgIGZvciAodmFyIHRvID0gZnJvbSArIDE7IHRvIDwgbm9kZUNvdW50OyB0bysrKSB7XG4gICAgICAvLyBsZWF2ZSByb3V0ZXIgY29ubmVjdGlvbnMgb3V0IG9mIHRoaXMgbGlzdFxuICAgICAgdmFyIGNsaWVudFRvQ2xpZW50ID0gKG5vZGVSb3dzW2Zyb21dLnR5cGUgPT09IE5vZGVUeXBlLkNMSUVOVCAmJlxuICAgICAgICAgIG5vZGVSb3dzW3RvXS50eXBlID09PSBOb2RlVHlwZS5DTElFTlQpO1xuICAgICAgLy8gTXVzdCBiZSByZWFjaGFibGVcbiAgICAgIHZhciByZWFjaGFibGUgPSBncmFwaFtmcm9tXVt0b107XG4gICAgICBpZiAoY2xpZW50VG9DbGllbnQgJiYgcmVhY2hhYmxlKSB7XG4gICAgICAgIGNvbm5lY3Rpb25zLnB1c2goe1xuICAgICAgICAgIG5vZGVBOiB0aGlzLmdldEVsZW1lbnRCeUVudGl0eUlEKE5ldFNpbVZpelNpbXVsYXRpb25Ob2RlLCBub2RlUm93c1tmcm9tXS5pZCksXG4gICAgICAgICAgbm9kZUI6IHRoaXMuZ2V0RWxlbWVudEJ5RW50aXR5SUQoTmV0U2ltVml6U2ltdWxhdGlvbk5vZGUsIG5vZGVSb3dzW3RvXS5pZClcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBjb25uZWN0aW9ucztcbn07XG5cbi8qKlxuICogQ29tcGFyZXMgVml6RW50aXRpZXMgb2YgdGhlIGdpdmVuIHR5cGUgdGhhdCBhcmUgY3VycmVudGx5IGluIHRoZVxuICogdmlzdWFsaXphdGlvbiB0byB0aGUgc291cmNlIGRhdGEgZ2l2ZW4sIGFuZCBjcmVhdGVzL3VwZGF0ZXMvcmVtb3Zlc1xuICogVml6RW50aXRpZXMgc28gdGhhdCB0aGUgdmlzdWFsaXphdGlvbiByZWZsZWN0cyB0aGUgbmV3IHNvdXJjZSBkYXRhLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHZpekVsZW1lbnRUeXBlXG4gKiBAcGFyYW0ge0FycmF5LjxOZXRTaW1FbnRpdHk+fSBlbnRpdHlDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjcmVhdGlvbk1ldGhvZFxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltVmlzdWFsaXphdGlvbi5wcm90b3R5cGUudXBkYXRlVml6RW50aXRpZXNPZlR5cGVfID0gZnVuY3Rpb24gKFxuICAgIHZpekVsZW1lbnRUeXBlLCBlbnRpdHlDb2xsZWN0aW9uLCBjcmVhdGlvbk1ldGhvZCkge1xuXG4gIC8vIDEuIEtpbGwgVml6RW50aXRpZXMgdGhhdCBhcmUgbm8gbG9uZ2VyIGluIHRoZSBzb3VyY2UgZGF0YVxuICB0aGlzLmtpbGxWaXpFbnRpdGllc09mVHlwZU1pc3NpbmdNYXRjaF8odml6RWxlbWVudFR5cGUsIGVudGl0eUNvbGxlY3Rpb24pO1xuXG4gIGVudGl0eUNvbGxlY3Rpb24uZm9yRWFjaChmdW5jdGlvbiAoZW50aXR5KSB7XG4gICAgdmFyIHZpekVsZW1lbnQgPSB0aGlzLmdldEVsZW1lbnRCeUVudGl0eUlEKHZpekVsZW1lbnRUeXBlLCBlbnRpdHkuZW50aXR5SUQpO1xuICAgIGlmICh2aXpFbGVtZW50KSB7XG4gICAgICAvLyAyLiBVcGRhdGUgZXhpc3RpbmcgVml6RW50aXRpZXMgZnJvbSB0aGVpciBzb3VyY2UgZGF0YVxuICAgICAgdml6RWxlbWVudC5jb25maWd1cmVGcm9tKGVudGl0eSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIDMuIENyZWF0ZSBuZXcgVml6RW50aXRpZXMgZm9yIG5ldyBzb3VyY2UgZGF0YVxuICAgICAgdGhpcy5hZGRWaXpFbGVtZW50XyhjcmVhdGlvbk1ldGhvZChlbnRpdHkpKTtcbiAgICB9XG4gIH0sIHRoaXMpO1xufTtcblxuLyoqXG4gKiBDYWxsIGtpbGwoKSBvbiBhbnkgdml6ZW50aXRpZXMgdGhhdCBtYXRjaCB0aGUgZ2l2ZW4gdHlwZSBhbmQgZG9uJ3QgbWFwIHRvXG4gKiBhIE5ldFNpbUVudGl0eSBpbiB0aGUgcHJvdmlkZWQgY29sbGVjdGlvbi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHZpekVsZW1lbnRUeXBlXG4gKiBAcGFyYW0ge0FycmF5LjxOZXRTaW1FbnRpdHk+fSBlbnRpdHlDb2xsZWN0aW9uXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1WaXN1YWxpemF0aW9uLnByb3RvdHlwZS5raWxsVml6RW50aXRpZXNPZlR5cGVNaXNzaW5nTWF0Y2hfID0gZnVuY3Rpb24gKFxuICAgIHZpekVsZW1lbnRUeXBlLCBlbnRpdHlDb2xsZWN0aW9uKSB7XG4gIHRoaXMuZWxlbWVudHNfLmZvckVhY2goZnVuY3Rpb24gKHZpekVsZW1lbnQpIHtcbiAgICB2YXIgaXNDb3JyZWN0VHlwZSA9ICh2aXpFbGVtZW50IGluc3RhbmNlb2Ygdml6RWxlbWVudFR5cGUpO1xuICAgIHZhciBmb3VuZE1hdGNoID0gZW50aXR5Q29sbGVjdGlvbi5zb21lKGZ1bmN0aW9uIChlbnRpdHkpIHtcbiAgICAgIHJldHVybiB2aXpFbGVtZW50LnJlcHJlc2VudHNFbnRpdHkgJiYgdml6RWxlbWVudC5yZXByZXNlbnRzRW50aXR5KGVudGl0eSk7XG4gICAgfSk7XG5cbiAgICBpZiAoaXNDb3JyZWN0VHlwZSAmJiAhZm91bmRNYXRjaCkge1xuICAgICAgdml6RWxlbWVudC5raWxsKCk7XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICogQWRkcyBhIFZpekVsZW1lbnQgdG8gdGhlIHZpc3VhbGl6YXRpb24uXG4gKiBAcGFyYW0ge05ldFNpbVZpekVsZW1lbnR9IHZpekVsZW1lbnRcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVZpc3VhbGl6YXRpb24ucHJvdG90eXBlLmFkZFZpekVsZW1lbnRfID0gZnVuY3Rpb24gKHZpekVsZW1lbnQpIHtcbiAgdGhpcy5lbGVtZW50c18ucHVzaCh2aXpFbGVtZW50KTtcbiAgdGhpcy5iYWNrZ3JvdW5kR3JvdXBfLnByZXBlbmQodml6RWxlbWVudC5nZXRSb290KCkpO1xufTtcblxuLyoqXG4gKiBJZiB3ZSBkbyBuZWVkIGEgRE9NIGNoYW5nZSwgZGV0YWNoIHRoZSBlbGVtZW50IGFuZCByZWF0dGFjaCBpdCB0byB0aGUgbmV3XG4gKiBsYXllci4gU3BlY2lhbCBydWxlIChmb3Igbm93KTogUHJlcGVuZCB3aXJlcyBzbyB0aGF0IHRoZXkgc2hvdyB1cCBiZWhpbmRcbiAqIG5vZGVzLiAgV2lsbCBuZWVkIGEgYmV0dGVyIHNvbHV0aW9uIGZvciB0aGlzIGlmL3doZW4gdGhlIHZpeiBnZXRzIG1vcmVcbiAqIGNvbXBsZXguXG4gKiBAcGFyYW0ge05ldFNpbVZpekVsZW1lbnR9IHZpekVsZW1lbnRcbiAqIEBwYXJhbSB7alF1ZXJ5fSBuZXdQYXJlbnRcbiAqL1xudmFyIG1vdmVWaXpFbGVtZW50VG9Hcm91cCA9IGZ1bmN0aW9uICh2aXpFbGVtZW50LCBuZXdQYXJlbnQpIHtcbiAgdml6RWxlbWVudC5nZXRSb290KCkuZGV0YWNoKCk7XG4gIGlmICh2aXpFbGVtZW50IGluc3RhbmNlb2YgTmV0U2ltVml6V2lyZSkge1xuICAgIHZpekVsZW1lbnQuZ2V0Um9vdCgpLnByZXBlbmRUbyhuZXdQYXJlbnQpO1xuICB9IGVsc2Uge1xuICAgIHZpekVsZW1lbnQuZ2V0Um9vdCgpLmFwcGVuZFRvKG5ld1BhcmVudCk7XG4gIH1cbn07XG5cbi8qKlxuICogUmVjYWxjdWxhdGUgd2hpY2ggbm9kZXMgc2hvdWxkIGJlIGluIHRoZSBmb3JlZ3JvdW5kIGxheWVyIGJ5IGRvaW5nIGEgZnVsbFxuICogdHJhdmVyc2FsIHN0YXJ0aW5nIHdpdGggdGhlIGxvY2FsIG5vZGUuICBJbiBzaG9ydCwgZXZlcnl0aGluZyByZWFjaGFibGVcbiAqIGZyb20gdGhlIGxvY2FsIG5vZGUgYmVsb25ncyBpbiB0aGUgZm9yZWdyb3VuZC5cbiAqL1xuTmV0U2ltVmlzdWFsaXphdGlvbi5wcm90b3R5cGUucHVsbEVsZW1lbnRzVG9Gb3JlZ3JvdW5kID0gZnVuY3Rpb24gKCkge1xuICAvLyBCZWdpbiBieSBtYXJraW5nIGFsbCBlbnRpdGllcyBiYWNrZ3JvdW5kICh1bnZpc2l0ZWQpXG4gIHRoaXMuZWxlbWVudHNfLmZvckVhY2goZnVuY3Rpb24gKHZpekVsZW1lbnQpIHtcbiAgICB2aXpFbGVtZW50LnZpc2l0ZWQgPSBmYWxzZTtcbiAgfSk7XG5cbiAgdmFyIHRvRXhwbG9yZSA9IFtdO1xuICBpZiAodGhpcy5sb2NhbE5vZGUpIHtcbiAgICB0b0V4cGxvcmUucHVzaCh0aGlzLmxvY2FsTm9kZSk7XG4gIH1cblxuICAvLyBXaGlsZSB0aGVyZSBhcmUgc3RpbGwgbm9kZXMgdGhhdCBuZWVkIHZpc2l0aW5nLFxuICAvLyB2aXNpdCB0aGUgbmV4dCBub2RlLCBtYXJraW5nIGl0IGFzIFwiZm9yZWdyb3VuZC92aXNpdGVkXCIgYW5kXG4gIC8vIHB1c2hpbmcgYWxsIG9mIGl0cyB1bnZpc2l0ZWQgY29ubmVjdGlvbnMgb250byB0aGUgc3RhY2suXG4gIHZhciBjdXJyZW50Vml6RWxlbWVudDtcbiAgd2hpbGUgKHRvRXhwbG9yZS5sZW5ndGggPiAwKSB7XG4gICAgY3VycmVudFZpekVsZW1lbnQgPSB0b0V4cGxvcmUucG9wKCk7XG4gICAgY3VycmVudFZpekVsZW1lbnQudmlzaXRlZCA9IHRydWU7XG4gICAgdG9FeHBsb3JlID0gdG9FeHBsb3JlLmNvbmNhdCh0aGlzLmdldFVudmlzaXRlZE5laWdoYm9yc09mXyhjdXJyZW50Vml6RWxlbWVudCkpO1xuICB9XG5cbiAgLy8gTm93LCB2aXNpdGVkIG5vZGVzIGJlbG9uZyBpbiB0aGUgZm9yZWdyb3VuZC5cbiAgLy8gTW92ZSBhbGwgbm9kZXMgdG8gdGhlaXIgbmV3LCBjb3JyZWN0IGxheWVyc1xuICAvLyBQb3NzaWJsZSBvcHRpbWl6YXRpb246IENhbiB3ZSBkbyB0aGlzIHdpdGgganVzdCBvbmUgb3BlcmF0aW9uIG9uIHRoZSBsaXZlIERPTT9cbiAgdmFyIGZvcmVncm91bmQgPSB0aGlzLmZvcmVncm91bmRHcm91cF87XG4gIHZhciBiYWNrZ3JvdW5kID0gdGhpcy5iYWNrZ3JvdW5kR3JvdXBfO1xuICB0aGlzLmVsZW1lbnRzXy5mb3JFYWNoKGZ1bmN0aW9uICh2aXpFbGVtZW50KSB7XG4gICAgdmFyIGlzRm9yZWdyb3VuZCA9ICQuY29udGFpbnMoZm9yZWdyb3VuZFswXSwgdml6RWxlbWVudC5nZXRSb290KClbMF0pO1xuXG4gICAgLy8gQ2hlY2sgd2hldGhlciBhIGNoYW5nZSBzaG91bGQgb2NjdXIuICBJZiBub3QsIHdlIGxlYXZlXG4gICAgLy8gbmV3UGFyZW50IHVuZGVmaW5lZCBzbyB0aGF0IHdlIGRvbid0IG1ha2UgdW5uZWVkZWQgRE9NIGNoYW5nZXMuXG4gICAgaWYgKHZpekVsZW1lbnQudmlzaXRlZCAmJiAhaXNGb3JlZ3JvdW5kKSB7XG4gICAgICBtb3ZlVml6RWxlbWVudFRvR3JvdXAodml6RWxlbWVudCwgZm9yZWdyb3VuZCk7XG4gICAgICB2aXpFbGVtZW50Lm9uRGVwdGhDaGFuZ2UodHJ1ZSk7XG4gICAgfSBlbHNlIGlmICghdml6RWxlbWVudC52aXNpdGVkICYmIGlzRm9yZWdyb3VuZCkge1xuICAgICAgbW92ZVZpekVsZW1lbnRUb0dyb3VwKHZpekVsZW1lbnQsIGJhY2tncm91bmQpO1xuICAgICAgdml6RWxlbWVudC5vbkRlcHRoQ2hhbmdlKGZhbHNlKTtcbiAgICB9XG4gIH0sIHRoaXMpO1xuXG4gIHRoaXMudXBkYXRlQXV0b0Ruc05vZGUoKTtcbn07XG5cbi8qKlxuICogVmlzaXQgbWV0aG9kIGZvciBwdWxsRWxlbWVudHNUb0ZvcmVncm91bmQsIG5vdCB1c2VkIGFueXdoZXJlIGVsc2UuXG4gKiBOb3RlcyB0aGF0IHRoZSBjdXJyZW50IGVsZW1lbnQgaXMgc2hvdWxkIGJlIGZvcmVncm91bmQgd2hlbiB3ZSdyZSBhbGwgZG9uZSxcbiAqIGZpbmRzIHRoZSBjdXJyZW50IGVsZW1lbnQncyB1bnZpc2l0ZWQgY29ubmVjdGlvbnMsXG4gKiBwdXNoZXMgdGhvc2UgY29ubmVjdGlvbnMgb250byB0aGUgc3RhY2suXG4gKiBAcGFyYW0ge05ldFNpbVZpelNpbXVsYXRpb25Ob2RlfE5ldFNpbVZpelNpbXVsYXRpb25XaXJlfSB2aXpFbGVtZW50XG4gKiBAcmV0dXJucyB7QXJyYXkuPE5ldFNpbVZpekVsZW1lbnQ+fVxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltVmlzdWFsaXphdGlvbi5wcm90b3R5cGUuZ2V0VW52aXNpdGVkTmVpZ2hib3JzT2ZfID0gZnVuY3Rpb24gKHZpekVsZW1lbnQpIHtcbiAgLy8gRmluZCBuZXcgZW50aXRpZXMgdG8gZXhwbG9yZSBiYXNlZCBvbiBub2RlIHR5cGUgYW5kIGNvbm5lY3Rpb25zXG4gIHZhciBuZWlnaGJvcnMgPSBbXTtcblxuICBpZiAodml6RWxlbWVudCBpbnN0YW5jZW9mIE5ldFNpbVZpelNpbXVsYXRpb25Ob2RlKSB7XG5cbiAgICAvLyBJbiBicm9hZGNhc3QgbW9kZSB3ZSBkaXNwbGF5IFwiZmFrZSxcIiB1bmlkaXJlY3Rpb25hbCB3aXJlcy4gSW5cbiAgICAvLyByZWd1bGFyIG1vZGUsIHdlIG9ubHkgd2FudCB0byBkaXNwbGF5IHdpcmVzIGNvbm5lY3RpbmcgdXMgdG9cbiAgICAvLyBub2RlcyB0aGF0IGFyZSBhbHNvIGNvbm5lY3RlZCBiYWNrLlxuICAgIGlmIChOZXRTaW1HbG9iYWxzLmdldExldmVsQ29uZmlnKCkuYnJvYWRjYXN0TW9kZSkge1xuICAgICAgbmVpZ2hib3JzID0gdGhpcy5nZXRXaXJlc0F0dGFjaGVkVG9Ob2RlKHZpekVsZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZWlnaGJvcnMgPSB0aGlzLmdldFJlY2lwcm9jYXRlZFdpcmVzQXR0YWNoZWRUb05vZGUodml6RWxlbWVudCk7XG4gICAgfVxuXG4gICAgLy8gU3BlY2lhbCBjYXNlOiBUaGUgRE5TIG5vZGUgZmFrZSBpcyBhIG5laWdoYm9yIG9mIGEgdmlzaXRlZCByb3V0ZXJcbiAgICBpZiAodml6RWxlbWVudC5pc1JvdXRlciAmJiB0aGlzLmF1dG9EbnNOb2RlXykge1xuICAgICAgbmVpZ2hib3JzLnB1c2godGhpcy5hdXRvRG5zTm9kZV8pO1xuICAgICAgbmVpZ2hib3JzLnB1c2godGhpcy5hdXRvRG5zV2lyZV8pO1xuICAgIH1cbiAgfSBlbHNlIGlmICh2aXpFbGVtZW50IGluc3RhbmNlb2YgTmV0U2ltVml6V2lyZSkge1xuICAgIGlmICh2aXpFbGVtZW50LmxvY2FsVml6Tm9kZSkge1xuICAgICAgbmVpZ2hib3JzLnB1c2godml6RWxlbWVudC5sb2NhbFZpek5vZGUpO1xuICAgIH1cblxuICAgIGlmICh2aXpFbGVtZW50LnJlbW90ZVZpek5vZGUpIHtcbiAgICAgIG5laWdoYm9ycy5wdXNoKHZpekVsZW1lbnQucmVtb3RlVml6Tm9kZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5laWdoYm9ycy5maWx0ZXIoZnVuY3Rpb24gKHZpekVsZW1lbnQpIHtcbiAgICByZXR1cm4gIXZpekVsZW1lbnQudmlzaXRlZDtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEV4cGxpY2l0bHkgY29udHJvbCBWaXpOb2RlcyBpbiB0aGUgZm9yZWdyb3VuZCwgbW92aW5nIHRoZW0gaW50byBhIGRlc2lyZWRcbiAqIGNvbmZpZ3VyYXRpb24gYmFzZWQgb24gdGhlaXIgbnVtYmVyIGFuZCB0eXBlcy4gIE5vZGVzIGFyZSBnaXZlbiBhbmltYXRpb25cbiAqIGNvbW1hbmRzICh2aWEgdHdlZW5Ub1Bvc2l0aW9uKSBzbyB0aGF0IHRoZXkgaW50ZXJwb2xhdGUgbmljZWx5IHRvIHRoZWlyIHRhcmdldFxuICogcG9zaXRpb25zLlxuICpcbiAqIENvbmZpZ3VyYXRpb25zOlxuICogT25lIG5vZGUgKGxvY2FsIG5vZGUpOiBDZW50ZXJlZCBvbiB0aGUgc2NyZWVuLlxuICogICB8ICBMICB8XG4gKlxuICogVHdvIG5vZGVzOiBMb2NhbCBub2RlIG9uIGxlZnQsIHJlbW90ZSBub2RlIG9uIHJpZ2h0LCBub3RoaW5nIGluIHRoZSBtaWRkbGUuXG4gKiAgIHwgTC1SIHxcbiAqXG4gKiBUaHJlZSBvciBtb3JlIG5vZGVzOiBMb2NhbCBub2RlIG9uIGxlZnQsIHJvdXRlciBpbiB0aGUgbWlkZGxlLCBvdGhlclxuICogbm9kZXMgZGlzdHJpYnV0ZWQgZXZlbmx5IGFyb3VuZCB0aGUgcm91dGVyIGluIGEgY2lyY2xlXG4gKiAzOiAgICAgICAgIDQ6ICAgIE8gICAgNTogIE8gICAgICA2Ok8gICBPICAgIDc6TyAgIE9cbiAqICAgICAgICAgICAgICAgICAvICAgICAgICAgfCAgICAgICAgIFxcIC8gICAgICAgIFxcIC9cbiAqICAgTC1SLTAgICAgICBMLVIgICAgICAgIEwtUi1PICAgICAgTC1SICAgICAgICBMLVItT1xuICogICAgICAgICAgICAgICAgIFxcICAgICAgICAgfCAgICAgICAgIC8gXFwgICAgICAgIC8gXFxcbiAqICAgICAgICAgICAgICAgICAgTyAgICAgICAgTyAgICAgICAgTyAgIE8gICAgICBPICAgT1xuICovXG5OZXRTaW1WaXN1YWxpemF0aW9uLnByb3RvdHlwZS5kaXN0cmlidXRlRm9yZWdyb3VuZE5vZGVzID0gZnVuY3Rpb24gKCkge1xuICBpZiAoTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpLmJyb2FkY2FzdE1vZGUpIHtcbiAgICB0aGlzLmRpc3RyaWJ1dGVGb3JlZ3JvdW5kTm9kZXNGb3JCcm9hZGNhc3RfKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqIEB0eXBlIHtBcnJheS48TmV0U2ltVml6U2ltdWxhdGlvbk5vZGU+fSAqL1xuICB2YXIgZm9yZWdyb3VuZE5vZGVzID0gdGhpcy5lbGVtZW50c18uZmlsdGVyKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQgaW5zdGFuY2VvZiBOZXRTaW1WaXpOb2RlICYmIGVsZW1lbnQuaXNGb3JlZ3JvdW5kO1xuICB9KTtcblxuICAvLyBTb21ldGltZXMsIHRoZXJlJ3Mgbm8gd29yayB0byBkby5cbiAgaWYgKGZvcmVncm91bmROb2Rlcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBPbmUgbm9kZTogQ2VudGVyZWQgb24gc2NyZWVuXG4gIGlmIChmb3JlZ3JvdW5kTm9kZXMubGVuZ3RoID09PSAxKSB7XG4gICAgZm9yZWdyb3VuZE5vZGVzWzBdLnR3ZWVuVG9Qb3NpdGlvbigwLCAwLCA2MDAsIHR3ZWVucy5lYXNlT3V0UXVhZCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG15Tm9kZTtcblxuICAvLyBUd28gbm9kZXM6IFBsYWNlZCBhY3Jvc3MgZnJvbSBlYWNoIG90aGVyLCBsb2NhbCBub2RlIG9uIGxlZnRcbiAgaWYgKGZvcmVncm91bmROb2Rlcy5sZW5ndGggPT09IDIpIHtcbiAgICBteU5vZGUgPSB0aGlzLmxvY2FsTm9kZTtcbiAgICB2YXIgb3RoZXJOb2RlID0gXy5maW5kKGZvcmVncm91bmROb2RlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHJldHVybiBub2RlICE9PSBteU5vZGU7XG4gICAgfSk7XG4gICAgbXlOb2RlLnR3ZWVuVG9Qb3NpdGlvbigtNzUsIDAsIDQwMCwgdHdlZW5zLmVhc2VPdXRRdWFkKTtcbiAgICBvdGhlck5vZGUudHdlZW5Ub1Bvc2l0aW9uKDc1LCAwLCA2MDAsIHR3ZWVucy5lYXNlT3V0UXVhZCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gVGhyZWUgb3IgbW9yZSBub2RlczpcbiAgLy8gKiBMb2NhbCBub2RlIG9uIGxlZnRcbiAgLy8gKiBSb3V0ZXIgaW4gdGhlIG1pZGRsZVxuICAvLyAqIE90aGVyIG5vZGVzIGV2ZW5seSBkaXN0cmlidXRlZCBpbiBhIGNpcmNsZVxuICBteU5vZGUgPSB0aGlzLmxvY2FsTm9kZTtcbiAgdmFyIHJvdXRlck5vZGUgPSBfLmZpbmQoZm9yZWdyb3VuZE5vZGVzLCBmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiBub2RlLmlzUm91dGVyO1xuICB9KTtcbiAgdmFyIG90aGVyTm9kZXMgPSBmb3JlZ3JvdW5kTm9kZXMuZmlsdGVyKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUgIT09IG15Tm9kZSAmJiBub2RlICE9PSByb3V0ZXJOb2RlO1xuICB9KTtcblxuICBteU5vZGUudHdlZW5Ub1Bvc2l0aW9uKC0xMDAsIDAsIDQwMCwgdHdlZW5zLmVhc2VPdXRRdWFkKTtcbiAgcm91dGVyTm9kZS50d2VlblRvUG9zaXRpb24oMCwgMCwgNTAwLCB0d2VlbnMuZWFzZU91dFF1YWQpO1xuICB2YXIgcmFkaWFuc0JldHdlZW5Ob2RlcyA9IDIqTWF0aC5QSSAvIChvdGhlck5vZGVzLmxlbmd0aCArIDEpOyAvLyBJbmNsdWRlIG15Tm9kZSFcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBvdGhlck5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gc2luKHJhZCkgPSBvL2hcbiAgICB2YXIgaCA9IDEwMDtcbiAgICAvLyBFeHRyYSBNYXRoLlBJIGhlcmUgcHV0cyAwZGVnIG9uIHRoZSBsZWZ0LlxuICAgIHZhciByYWQgPSBNYXRoLlBJICsgKGkrMSkgKiByYWRpYW5zQmV0d2Vlbk5vZGVzO1xuICAgIHZhciB4ID0gTWF0aC5jb3MocmFkKSAqIGg7XG4gICAgdmFyIHkgPSBNYXRoLnNpbihyYWQpICogaDtcbiAgICBvdGhlck5vZGVzW2ldLnR3ZWVuVG9Qb3NpdGlvbih4LCB5LCA2MDAsIHR3ZWVucy5lYXNlT3V0UXVhZCk7XG4gIH1cbn07XG5cbi8qKlxuICogRXhwbGljaXRseSBjb250cm9sIFZpek5vZGVzIGluIHRoZSBmb3JlZ3JvdW5kLCBtb3ZpbmcgdGhlbSBpbnRvIGEgZGVzaXJlZFxuICogY29uZmlndXJhdGlvbiBiYXNlZCBvbiB0aGVpciBudW1iZXIgYW5kIHR5cGVzLiAgTm9kZXMgYXJlIGdpdmVuIGFuaW1hdGlvblxuICogY29tbWFuZHMgKHZpYSB0d2VlblRvUG9zaXRpb24pIHNvIHRoYXQgdGhleSBpbnRlcnBvbGF0ZSBuaWNlbHkgdG8gdGhlaXIgdGFyZ2V0XG4gKiBwb3NpdGlvbnMuXG4gKlxuICogQ29uZmlndXJhdGlvbnM6XG4gKiBPbmUgbm9kZSAobG9jYWwgbm9kZSk6IENlbnRlcmVkIG9uIHRoZSBzY3JlZW4uXG4gKiAgIHwgIEwgIHxcbiAqXG4gKiBUd28gbm9kZXM6IExvY2FsIG5vZGUgb24gbGVmdCwgcmVtb3RlIG5vZGUgb24gcmlnaHQsIG5vdGhpbmcgaW4gdGhlIG1pZGRsZS5cbiAqICAgfCBMLVIgfFxuICpcbiAqIFRocmVlIG9yIG1vcmUgbm9kZXM6IERpc3RyaWJ1dGVkIGFyb3VuZCBjZW50ZXIgb2YgZnJhbWVcbiAqIDM6ICAgIE8gICAgNDogIE8gICAgICA1OiBPICBPICAgIDY6IE8gT1xuICogICBMICAgICAgICAgIEwgICBPICAgICAgTCAgICAgICAgICBMICAgT1xuICogICAgICAgTyAgICAgICAgTyAgICAgICAgIE8gIE8gICAgICAgTyBPXG4gKi9cbk5ldFNpbVZpc3VhbGl6YXRpb24ucHJvdG90eXBlLmRpc3RyaWJ1dGVGb3JlZ3JvdW5kTm9kZXNGb3JCcm9hZGNhc3RfID0gZnVuY3Rpb24gKCkge1xuICAvKiogQHR5cGUge0FycmF5LjxOZXRTaW1WaXpTaW11bGF0aW9uTm9kZT59ICovXG4gIHZhciBmb3JlZ3JvdW5kTm9kZXMgPSB0aGlzLmVsZW1lbnRzXy5maWx0ZXIoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudCBpbnN0YW5jZW9mIE5ldFNpbVZpelNpbXVsYXRpb25Ob2RlICYmXG4gICAgICAgIGVsZW1lbnQuaXNGb3JlZ3JvdW5kICYmXG4gICAgICAgICFlbGVtZW50LmlzUm91dGVyO1xuICB9KTtcblxuICAvLyBTb21ldGltZXMsIHRoZXJlJ3Mgbm8gd29yayB0byBkby5cbiAgaWYgKGZvcmVncm91bmROb2Rlcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBPbmUgbm9kZTogQ2VudGVyZWQgb24gc2NyZWVuXG4gIGlmIChmb3JlZ3JvdW5kTm9kZXMubGVuZ3RoID09PSAxKSB7XG4gICAgZm9yZWdyb3VuZE5vZGVzWzBdLnR3ZWVuVG9Qb3NpdGlvbigwLCAwLCA2MDAsIHR3ZWVucy5lYXNlT3V0UXVhZCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG15Tm9kZTtcblxuICAvLyBUd28gbm9kZXM6IFBsYWNlZCBhY3Jvc3MgZnJvbSBlYWNoIG90aGVyLCBsb2NhbCBub2RlIG9uIGxlZnRcbiAgaWYgKGZvcmVncm91bmROb2Rlcy5sZW5ndGggPT09IDIpIHtcbiAgICBteU5vZGUgPSB0aGlzLmxvY2FsTm9kZTtcbiAgICB2YXIgb3RoZXJOb2RlID0gXy5maW5kKGZvcmVncm91bmROb2RlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHJldHVybiBub2RlICE9PSBteU5vZGU7XG4gICAgfSk7XG4gICAgbXlOb2RlLnR3ZWVuVG9Qb3NpdGlvbigtNzUsIDAsIDQwMCwgdHdlZW5zLmVhc2VPdXRRdWFkKTtcbiAgICBvdGhlck5vZGUudHdlZW5Ub1Bvc2l0aW9uKDc1LCAwLCA2MDAsIHR3ZWVucy5lYXNlT3V0UXVhZCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gVGhyZWUgb3IgbW9yZSBub2RlczpcbiAgLy8gKiBMb2NhbCBub2RlIG9uIGxlZnRcbiAgLy8gKiBPdGhlciBub2RlcyBldmVubHkgZGlzdHJpYnV0ZWQgaW4gYSBjaXJjbGVcbiAgbXlOb2RlID0gdGhpcy5sb2NhbE5vZGU7XG4gIHZhciBvdGhlck5vZGVzID0gZm9yZWdyb3VuZE5vZGVzLmZpbHRlcihmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiBub2RlICE9PSBteU5vZGU7XG4gIH0pO1xuXG4gIG15Tm9kZS50d2VlblRvUG9zaXRpb24oLTEwMCwgMCwgNDAwLCB0d2VlbnMuZWFzZU91dFF1YWQpO1xuICB2YXIgcmFkaWFuc0JldHdlZW5Ob2RlcyA9IDIqTWF0aC5QSSAvIChvdGhlck5vZGVzLmxlbmd0aCArIDEpOyAvLyBJbmNsdWRlIG15Tm9kZSFcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBvdGhlck5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gc2luKHJhZCkgPSBvL2hcbiAgICB2YXIgaCA9IDEwMDtcbiAgICAvLyBFeHRyYSBNYXRoLlBJIGhlcmUgcHV0cyAwZGVnIG9uIHRoZSBsZWZ0LlxuICAgIHZhciByYWQgPSBNYXRoLlBJICsgKGkrMSkgKiByYWRpYW5zQmV0d2Vlbk5vZGVzO1xuICAgIHZhciB4ID0gTWF0aC5jb3MocmFkKSAqIGg7XG4gICAgdmFyIHkgPSBNYXRoLnNpbihyYWQpICogaDtcbiAgICBvdGhlck5vZGVzW2ldLnR3ZWVuVG9Qb3NpdGlvbih4LCB5LCA2MDAsIHR3ZWVucy5lYXNlT3V0UXVhZCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtEbnNNb2RlfSBuZXdEbnNNb2RlXG4gKi9cbk5ldFNpbVZpc3VhbGl6YXRpb24ucHJvdG90eXBlLnNldERuc01vZGUgPSBmdW5jdGlvbiAobmV3RG5zTW9kZSkge1xuXG4gIHRoaXMuZG5zTW9kZV8gPSBuZXdEbnNNb2RlO1xuXG4gIC8vIFNob3cvaGlkZSB0aGUgYXV0by1ETlMgbm9kZSBhY2NvcmRpbmcgdG8gdGhlIG5ldyBzdGF0ZVxuICBpZiAobmV3RG5zTW9kZSA9PT0gRG5zTW9kZS5BVVRPTUFUSUMpIHtcbiAgICB0aGlzLm1ha2VBdXRvRG5zTm9kZSgpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZGVzdHJveUF1dG9EbnNOb2RlKCk7XG4gIH1cblxuICAvLyBUZWxsIGFsbCBub2RlcyBhYm91dCB0aGUgbmV3IEROUyBtb2RlLCBzbyB0aGV5IGNhbiBkZWNpZGUgd2hldGhlciB0b1xuICAvLyBzaG93IG9yIGhpZGUgdGhlaXIgYWRkcmVzcy5cbiAgdGhpcy5lbGVtZW50c18uZm9yRWFjaChmdW5jdGlvbiAodml6RWxlbWVudCkge1xuICAgIGlmICh2aXpFbGVtZW50IGluc3RhbmNlb2YgTmV0U2ltVml6U2ltdWxhdGlvbk5vZGUpIHtcbiAgICAgIHZpekVsZW1lbnQuc2V0RG5zTW9kZShuZXdEbnNNb2RlKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIFVwZGF0ZSBsYXllcmluZyBhbmQgbGF5b3V0IHNpbmNlIHdlIGp1c3QgYWRkZWQvcmVtb3ZlZCBhIG5vZGUuXG4gIHRoaXMucHVsbEVsZW1lbnRzVG9Gb3JlZ3JvdW5kKCk7XG4gIHRoaXMuZGlzdHJpYnV0ZUZvcmVncm91bmROb2RlcygpO1xufTtcblxuLyoqXG4gKiBJZiBpdCBkb2Vzbid0IGFscmVhZHkgZXhpc3QsIGNyZWF0ZSBhbiBhdXRvLUROUyBub2RlIGFuZCBjb3JyZXNwb25kaW5nXG4gKiB3aXJlLlxuICovXG5OZXRTaW1WaXN1YWxpemF0aW9uLnByb3RvdHlwZS5tYWtlQXV0b0Ruc05vZGUgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy5hdXRvRG5zTm9kZV8pIHtcbiAgICB0aGlzLmF1dG9EbnNOb2RlXyA9IG5ldyBOZXRTaW1WaXpBdXRvRG5zTm9kZShTSE9XX0JBQ0tHUk9VTkQpO1xuICAgIHRoaXMuYWRkVml6RWxlbWVudF8odGhpcy5hdXRvRG5zTm9kZV8pO1xuXG4gICAgdGhpcy5hdXRvRG5zV2lyZV8gPSBuZXcgTmV0U2ltVml6V2lyZSh0aGlzLmF1dG9EbnNOb2RlXywgbnVsbCk7XG4gICAgdGhpcy5hZGRWaXpFbGVtZW50Xyh0aGlzLmF1dG9EbnNXaXJlXyk7XG4gIH1cbn07XG5cbi8qKlxuICogTWFudWFsbHkgdXBkYXRlIHRoZSBhdXRvLUROUyBub2RlIGFuZCB3aXJlIHRvIG1hdGNoIHRoZSBmb3JlZ3JvdW5kIHJvdXRlci5cbiAqL1xuTmV0U2ltVmlzdWFsaXphdGlvbi5wcm90b3R5cGUudXBkYXRlQXV0b0Ruc05vZGUgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy5hdXRvRG5zTm9kZV8pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZm9yZWdyb3VuZFJvdXRlck5vZGUgPSBfLmZpbmQodGhpcy5lbGVtZW50c18sIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQgaW5zdGFuY2VvZiBOZXRTaW1WaXpTaW11bGF0aW9uTm9kZSAmJlxuICAgICAgICBlbGVtZW50LmlzUm91dGVyICYmXG4gICAgICAgIGVsZW1lbnQuaXNGb3JlZ3JvdW5kO1xuICB9KTtcblxuICAvLyBVcGRhdGUgYWRkcmVzcyB0byBtYXRjaCBmb3JlZ3JvdW5kIHJvdXRlclxuICBpZiAoZm9yZWdyb3VuZFJvdXRlck5vZGUpIHtcbiAgICB0aGlzLmF1dG9EbnNOb2RlXy5zZXRBZGRyZXNzKGZvcmVncm91bmRSb3V0ZXJOb2RlLmF1dG9EbnNBZGRyZXNzKTtcbiAgfVxuXG4gIC8vIFVwZGF0ZSB3aXJlIGVuZHBvaW50c1xuICB0aGlzLmF1dG9EbnNXaXJlXy5sb2NhbFZpek5vZGUgPSB0aGlzLmF1dG9EbnNOb2RlXztcbiAgdGhpcy5hdXRvRG5zV2lyZV8ucmVtb3RlVml6Tm9kZSA9IGZvcmVncm91bmRSb3V0ZXJOb2RlO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgdGhlIGF1dG8tRE5TIG5vZGUgYW5kIHdpcmUuXG4gKi9cbk5ldFNpbVZpc3VhbGl6YXRpb24ucHJvdG90eXBlLmRlc3Ryb3lBdXRvRG5zTm9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuYXV0b0Ruc05vZGVfKSB7XG4gICAgdGhpcy5hdXRvRG5zTm9kZV8ua2lsbCgpO1xuICAgIHRoaXMuYXV0b0Ruc05vZGVfID0gbnVsbDtcbiAgfVxuXG4gIGlmICh0aGlzLmF1dG9EbnNXaXJlXykge1xuICAgIHRoaXMuYXV0b0Ruc1dpcmVfLmtpbGwoKTtcbiAgICB0aGlzLmF1dG9EbnNXaXJlXyA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGRuc05vZGVJRFxuICovXG5OZXRTaW1WaXN1YWxpemF0aW9uLnByb3RvdHlwZS5zZXREbnNOb2RlSUQgPSBmdW5jdGlvbiAoZG5zTm9kZUlEKSB7XG4gIHRoaXMuZWxlbWVudHNfLmZvckVhY2goZnVuY3Rpb24gKHZpekVsZW1lbnQpIHtcbiAgICBpZiAodml6RWxlbWVudCBpbnN0YW5jZW9mIE5ldFNpbVZpelNpbXVsYXRpb25Ob2RlKSB7XG4gICAgICB2aXpFbGVtZW50LnNldElzRG5zTm9kZSh2aXpFbGVtZW50LmdldENvcnJlc3BvbmRpbmdFbnRpdHlJZCgpID09PSBkbnNOb2RlSUQpO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIFVwZGF0ZSBlbmNvZGluZy12aWV3IHNldHRpbmcgYWNyb3NzIHRoZSB2aXN1YWxpemF0aW9uLlxuICpcbiAqIEBwYXJhbSB7RW5jb2RpbmdUeXBlW119IG5ld0VuY29kaW5nc1xuICovXG5OZXRTaW1WaXN1YWxpemF0aW9uLnByb3RvdHlwZS5zZXRFbmNvZGluZ3MgPSBmdW5jdGlvbiAobmV3RW5jb2RpbmdzKSB7XG4gIHRoaXMuZW5jb2RpbmdzXyA9IG5ld0VuY29kaW5ncztcbiAgdGhpcy5lbGVtZW50c18uZm9yRWFjaChmdW5jdGlvbiAodml6RWxlbWVudCkge1xuICAgIGlmICh2aXpFbGVtZW50IGluc3RhbmNlb2YgTmV0U2ltVml6U2ltdWxhdGlvbldpcmUpIHtcbiAgICAgIHZpekVsZW1lbnQuc2V0RW5jb2RpbmdzKG5ld0VuY29kaW5ncyk7XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICogS2ljayBvZmYgYW4gYW5pbWF0aW9uIHRoYXQgd2lsbCBzaG93IHRoZSBzdGF0ZSBvZiB0aGUgc2ltcGxleCB3aXJlIGJlaW5nXG4gKiBzZXQgYnkgdGhlIGxvY2FsIG5vZGUuXG4gKiBAcGFyYW0ge1wiMFwifFwiMVwifSBuZXdTdGF0ZVxuICovXG5OZXRTaW1WaXN1YWxpemF0aW9uLnByb3RvdHlwZS5hbmltYXRlU2V0V2lyZVN0YXRlID0gZnVuY3Rpb24gKG5ld1N0YXRlKSB7XG4gIC8vIEFzc3VtcHRpb25zIC0gd2UgYXJlIHRhbGtpbmcgYWJvdXQgdGhlIHdpcmUgYmV0d2VlbiB0aGUgbG9jYWwgbm9kZVxuICAvLyBhbmQgaXRzIHJlbW90ZSBwYXJ0bmVyLlxuICAvLyBUaGlzIG9ubHkgZ2V0cyB1c2VkIGluIHBlZXItdG8tcGVlciBtb2RlLCBzbyB0aGVyZSBzaG91bGQgYmUgYW4gaW5jb21pbmdcbiAgLy8gd2lyZSB0b28sIHdoaWNoIHdlIHNob3VsZCBoaWRlLlxuICAvLyBUaGlzIGlzIGEgbm8tb3AgaWYgbm8gc3VjaCB3aXJlIGV4aXN0cy5cbiAgLy8gV2UgY2FuIHN0b3AgYW55IHByZXZpb3VzIGFuaW1hdGlvbiBvbiB0aGUgd2lyZSBpZiB0aGlzIGlzIGNhbGxlZFxuXG4gIHZhciB2aXpXaXJlID0gdGhpcy5nZXRWaXpXaXJlVG9SZW1vdGUoKTtcbiAgdmFyIGluY29taW5nV2lyZSA9IHRoaXMuZ2V0Vml6V2lyZUZyb21SZW1vdGUoKTtcbiAgaWYgKCEodml6V2lyZSAmJiBpbmNvbWluZ1dpcmUpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gSGlkZSB0aGUgaW5jb21pbmcgd2lyZSBiZWNhdXNlIHdlIGFyZSBpbiBzaW1wbGV4IG1vZGUuXG4gIGluY29taW5nV2lyZS5oaWRlKCk7XG4gIC8vIEFuaW1hdGUgdGhlIG91dGdvaW5nIHdpcmVcbiAgdml6V2lyZS5hbmltYXRlU2V0U3RhdGUobmV3U3RhdGUpO1xufTtcblxuLyoqXG4gKiBLaWNrIG9mZiBhbiBhbmltYXRpb24gdGhhdCB3aWxsIHNob3cgdGhlIHN0YXRlIG9mIHRoZSBzaW1wbGV4IHdpcmUgYmVpbmdcbiAqIHJlYWQgYnkgdGhlIGxvY2FsIG5vZGUuXG4gKiBAcGFyYW0ge1wiMFwifFwiMVwifSBuZXdTdGF0ZVxuICovXG5OZXRTaW1WaXN1YWxpemF0aW9uLnByb3RvdHlwZS5hbmltYXRlUmVhZFdpcmVTdGF0ZSA9IGZ1bmN0aW9uIChuZXdTdGF0ZSkge1xuICAvLyBBc3N1bWVzIHdlIGFyZSBpbiBzaW1wbGV4IFAyUCBtb2RlIGFuZCB0YWxraW5nIGFib3V0IHRoZSB3aXJlIGJldHdlZW5cbiAgLy8gdGhlIGxvY2FsIG5vZGUgYW5kIGl0cyByZW1vdGUgcGFydG5lci4gIFRoaXMgaXMgYSBuby1vcCBpZiBubyBzdWNoIHdpcmVcbiAgLy8gZXhpc3RzLiAgV2UgY2FuIHN0b3AgYW55IHByZXZpb3VzIGFuaW1hdGlvbiBvbiB0aGUgd2lyZSBpZiB0aGlzIGlzIGNhbGxlZC5cblxuICB2YXIgdml6V2lyZSA9IHRoaXMuZ2V0Vml6V2lyZVRvUmVtb3RlKCk7XG4gIHZhciBpbmNvbWluZ1dpcmUgPSB0aGlzLmdldFZpeldpcmVGcm9tUmVtb3RlKCk7XG4gIGlmICghKHZpeldpcmUgJiYgaW5jb21pbmdXaXJlKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEhpZGUgdGhlIGluY29taW5nIHdpcmUgYmVjYXVzZSB3ZSBhcmUgaW4gc2ltcGxleCBtb2RlLlxuICBpbmNvbWluZ1dpcmUuaGlkZSgpO1xuICAvLyBBbmltYXRlIHRoZSBvdXRnb2luZyB3aXJlXG4gIHZpeldpcmUuYW5pbWF0ZVJlYWRTdGF0ZShuZXdTdGF0ZSk7XG59O1xuXG4vKipcbiAqIEZpbmQgdGhlIG91dGdvaW5nIHdpcmUgZnJvbSB0aGUgbG9jYWwgbm9kZSB0byBhIHJlbW90ZSBub2RlLlxuICogQHJldHVybnMge05ldFNpbVZpelNpbXVsYXRpb25XaXJlfG51bGx9IG51bGwgaWYgbm8gb3V0Z29pbmcgY29ubmVjdGlvbiBpcyBlc3RhYmxpc2hlZC5cbiAqL1xuTmV0U2ltVmlzdWFsaXphdGlvbi5wcm90b3R5cGUuZ2V0Vml6V2lyZVRvUmVtb3RlID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMubG9jYWxOb2RlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgb3V0Z29pbmdXaXJlcyA9IHRoaXMuZWxlbWVudHNfLmZpbHRlcihmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50IGluc3RhbmNlb2YgTmV0U2ltVml6U2ltdWxhdGlvbldpcmUgJiZcbiAgICAgICAgZWxlbWVudC5sb2NhbFZpek5vZGUgPT09IHRoaXMubG9jYWxOb2RlO1xuICB9LCB0aGlzKTtcblxuICBpZiAob3V0Z29pbmdXaXJlcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBvdXRnb2luZ1dpcmVzWzBdO1xufTtcblxuLyoqXG4gKiBGaW5kIHRoZSBpbmNvbWluZyB3aXJlIGZyb20gYSByZW1vdGUgbm9kZSB0byB0aGUgbG9jYWwgbm9kZS5cbiAqIEByZXR1cm5zIHtOZXRTaW1WaXpTaW11bGF0aW9uV2lyZXxudWxsfSBudWxsIGlmIG5vIGluY29taW5nIGNvbm5lY3Rpb24gaXMgZXN0YWJsaXNoZWQuXG4gKi9cbk5ldFNpbVZpc3VhbGl6YXRpb24ucHJvdG90eXBlLmdldFZpeldpcmVGcm9tUmVtb3RlID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMubG9jYWxOb2RlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgaW5jb21pbmdXaXJlcyA9IHRoaXMuZWxlbWVudHNfLmZpbHRlcihmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50IGluc3RhbmNlb2YgTmV0U2ltVml6U2ltdWxhdGlvbldpcmUgJiZcbiAgICAgICAgZWxlbWVudC5yZW1vdGVWaXpOb2RlID09PSB0aGlzLmxvY2FsTm9kZTtcbiAgfSwgdGhpcyk7XG5cbiAgaWYgKGluY29taW5nV2lyZXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gaW5jb21pbmdXaXJlc1swXTtcbn07XG4iLCIvKipcbiAqIEBvdmVydmlldyBXaXJlcyBpbiB0aGUgdmlzdWFsaXphdGlvbiB0aGF0IG1hcCB0byBzaW11bGF0aW9uIGVudGl0aWVzLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBOZXRTaW1HbG9iYWxzID0gcmVxdWlyZSgnLi9OZXRTaW1HbG9iYWxzJyk7XG52YXIgTmV0U2ltVml6Tm9kZSA9IHJlcXVpcmUoJy4vTmV0U2ltVml6Tm9kZScpO1xudmFyIE5ldFNpbVZpeldpcmUgPSByZXF1aXJlKCcuL05ldFNpbVZpeldpcmUnKTtcblxuLyoqXG4gKiBAcGFyYW0ge05ldFNpbVdpcmV9IHNvdXJjZVdpcmVcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGdldEVsZW1lbnRCeUVudGl0eUlEIC0gQWxsb3dzIHRoaXMgd2lyZSB0byBzZWFyY2hcbiAqICAgICAgICBmb3Igb3RoZXIgZW50aXRpZXMgaW4gdGhlIHNpbXVsYXRpb25cbiAqIEBjb25zdHJ1Y3RvclxuICogQGF1Z21lbnRzIE5ldFNpbVZpeldpcmVcbiAqL1xudmFyIE5ldFNpbVZpelNpbXVsYXRpb25XaXJlID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc291cmNlV2lyZSxcbiAgICBnZXRFbGVtZW50QnlFbnRpdHlJZCkge1xuICB2YXIgbG9jYWxOb2RlID0gZ2V0RWxlbWVudEJ5RW50aXR5SWQoTmV0U2ltVml6Tm9kZSwgc291cmNlV2lyZS5sb2NhbE5vZGVJRCk7XG4gIHZhciByZW1vdGVOb2RlID0gZ2V0RWxlbWVudEJ5RW50aXR5SWQoTmV0U2ltVml6Tm9kZSwgc291cmNlV2lyZS5yZW1vdGVOb2RlSUQpO1xuICBOZXRTaW1WaXpXaXJlLmNhbGwodGhpcywgbG9jYWxOb2RlLCByZW1vdGVOb2RlKTtcblxuICAvKipcbiAgICogSUQgb2YgdGhlIE5ldFNpbVdpcmUgdGhhdCB0aGlzIE5ldFNpbVZpelNpbXVsYXRpb25XaXJlIG1hcHMgdG8uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLmNvcnJlc3BvbmRpbmdXaXJlSWRfID0gc291cmNlV2lyZS5lbnRpdHlJRDtcblxuICAvKipcbiAgICogVVVJRCBvZiB0aGUgTmV0U2ltV2lyZSB0aGF0IHRoaXMgTmV0U2ltVml6U2ltdWxhdGlvbldpcmUgbWFwcyB0by5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRoaXMuY29ycmVzcG9uZGluZ1dpcmVVdWlkXyA9IHNvdXJjZVdpcmUudXVpZDtcblxuICAvKipcbiAgICogQm91bmQgZ2V0RWxlbWVudEJ5RW50aXR5SWQgbWV0aG9kIGZyb20gdml6dWFsaXphdGlvbiBjb250cm9sbGVyO1xuICAgKiB3ZSBob2xkIG9uIHRvIHRoaXMgc28gdGhhdCBjYWxscyB0byBjb25maWd1cmVGcm9tIGNhbiBmaW5kIG5vZGVzIGxhdGVyLlxuICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmdldEVsZW1lbnRCeUVudGl0eUlkXyA9IGdldEVsZW1lbnRCeUVudGl0eUlkO1xuXG4gIHRoaXMuY29uZmlndXJlRnJvbShzb3VyY2VXaXJlKTtcbiAgdGhpcy5yZW5kZXIoKTtcbn07XG5OZXRTaW1WaXpTaW11bGF0aW9uV2lyZS5pbmhlcml0cyhOZXRTaW1WaXpXaXJlKTtcblxuLyoqXG4gKiBDb25maWd1cmluZyBhIHdpcmUgbWVhbnMgbG9va2luZyB1cCB0aGUgdml6IG5vZGVzIHRoYXQgd2lsbCBiZSBpdHMgZW5kcG9pbnRzLlxuICogQHBhcmFtIHtOZXRTaW1XaXJlfSBzb3VyY2VXaXJlXG4gKi9cbk5ldFNpbVZpelNpbXVsYXRpb25XaXJlLnByb3RvdHlwZS5jb25maWd1cmVGcm9tID0gZnVuY3Rpb24gKHNvdXJjZVdpcmUpIHtcbiAgdGhpcy5jb3JyZXNwb25kaW5nV2lyZUlkXyA9IHNvdXJjZVdpcmUuZW50aXR5SUQ7XG4gIHRoaXMuY29ycmVzcG9uZGluZ1dpcmVVdWlkXyA9IHNvdXJjZVdpcmUudXVpZDtcblxuICB0aGlzLmxvY2FsVml6Tm9kZSA9IHRoaXMuZ2V0RWxlbWVudEJ5RW50aXR5SWRfKE5ldFNpbVZpek5vZGUsIHNvdXJjZVdpcmUubG9jYWxOb2RlSUQpO1xuICB0aGlzLnJlbW90ZVZpek5vZGUgPSB0aGlzLmdldEVsZW1lbnRCeUVudGl0eUlkXyhOZXRTaW1WaXpOb2RlLCBzb3VyY2VXaXJlLnJlbW90ZU5vZGVJRCk7XG5cbiAgaWYgKHRoaXMubG9jYWxWaXpOb2RlKSB7XG4gICAgdGhpcy5sb2NhbFZpek5vZGUuc2V0QWRkcmVzcyhzb3VyY2VXaXJlLmxvY2FsQWRkcmVzcyk7XG4gIH1cblxuICBpZiAodGhpcy5yZW1vdGVWaXpOb2RlKSB7XG4gICAgdGhpcy5yZW1vdGVWaXpOb2RlLnNldEFkZHJlc3Moc291cmNlV2lyZS5yZW1vdGVBZGRyZXNzKTtcbiAgfVxuXG4gIGlmIChOZXRTaW1HbG9iYWxzLmdldExldmVsQ29uZmlnKCkuYnJvYWRjYXN0TW9kZSkge1xuICAgIHRoaXMuZ2V0Um9vdCgpLmNzcygnZGlzcGxheScsICdub25lJyk7XG4gIH1cbn07XG5cbi8qKlxuICogSUQgb2YgdGhlIE5ldFNpbUVudGl0eSB0aGF0IG1hcHMgdG8gdGhpcyB2aXN1YWxpemF0aW9uIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5OZXRTaW1WaXpTaW11bGF0aW9uV2lyZS5wcm90b3R5cGUuZ2V0Q29ycmVzcG9uZGluZ0VudGl0eUlkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5jb3JyZXNwb25kaW5nV2lyZUlkXztcbn07XG5cbi8qKlxuICogQHBhcmFtIHtOZXRTaW1FbnRpdHl9IGVudGl0eVxuICogQHJldHVybnMge2Jvb2xlYW59IFRSVUUgaWYgdGhpcyBWaXpFbGVtZW50IHJlcHJlc2VudHMgdGhlIGdpdmVuIE5ldFNpbUVudGl0eS5cbiAqL1xuTmV0U2ltVml6U2ltdWxhdGlvbldpcmUucHJvdG90eXBlLnJlcHJlc2VudHNFbnRpdHkgPSBmdW5jdGlvbiAoZW50aXR5KSB7XG4gIHJldHVybiB0aGlzLmNvcnJlc3BvbmRpbmdXaXJlSWRfID09PSBlbnRpdHkuZW50aXR5SUQgJiZcbiAgICAgIHRoaXMuY29ycmVzcG9uZGluZ1dpcmVVdWlkXyA9PT0gZW50aXR5LnV1aWQ7XG59O1xuXG4vKipcbiAqIEtpbGxpbmcgYSB2aXN1YWxpemF0aW9uIG5vZGUgcmVtb3ZlcyBpdHMgSUQgc28gdGhhdCBpdCB3b24ndCBjb25mbGljdCB3aXRoXG4gKiBhbm90aGVyIHZpem5vZGUgb2YgbWF0Y2hpbmcgSUQgYmVpbmcgYWRkZWQsIGFuZCBiZWdpbnMgaXRzIGV4aXQgYW5pbWF0aW9uLlxuICogQG92ZXJyaWRlXG4gKi9cbk5ldFNpbVZpelNpbXVsYXRpb25XaXJlLnByb3RvdHlwZS5raWxsID0gZnVuY3Rpb24gKCkge1xuICBOZXRTaW1WaXpTaW11bGF0aW9uV2lyZS5zdXBlclByb3RvdHlwZS5raWxsLmNhbGwodGhpcyk7XG4gIHRoaXMuY29ycmVzcG9uZGluZ1dpcmVJZF8gPSB1bmRlZmluZWQ7XG4gIHRoaXMuY29ycmVzcG9uZGluZ1dpcmVVdWlkXyA9IHVuZGVmaW5lZDtcbn07XG4iLCIvKipcbiAqIEBvdmVydmlldyBXaXJlcyBpbiB0aGUgdmlzdWFsaXphdGlvbi5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgalF1ZXJ5U3ZnRWxlbWVudCA9IHJlcXVpcmUoJy4vTmV0U2ltVXRpbHMnKS5qUXVlcnlTdmdFbGVtZW50O1xudmFyIE5ldFNpbVZpekVsZW1lbnQgPSByZXF1aXJlKCcuL05ldFNpbVZpekVsZW1lbnQnKTtcbnZhciB0d2VlbnMgPSByZXF1aXJlKCcuL3R3ZWVucycpO1xudmFyIERhdGFDb252ZXJ0ZXJzID0gcmVxdWlyZSgnLi9EYXRhQ29udmVydGVycycpO1xudmFyIE5ldFNpbUNvbnN0YW50cyA9IHJlcXVpcmUoJy4vTmV0U2ltQ29uc3RhbnRzJyk7XG5cbnZhciBFbmNvZGluZ1R5cGUgPSBOZXRTaW1Db25zdGFudHMuRW5jb2RpbmdUeXBlO1xuXG52YXIgYmluYXJ5VG9BQiA9IERhdGFDb252ZXJ0ZXJzLmJpbmFyeVRvQUI7XG5cbi8qKlxuICogSG93IGZhciB0aGUgZmx5aW5nIGxhYmVsIHNob3VsZCByZXN0IGFib3ZlIHRoZSB3aXJlLlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdFxuICovXG52YXIgVEVYVF9GSU5BTF9WRVJUSUNBTF9PRkZTRVQgPSAtMTA7XG5cbi8qKlxuICogQHBhcmFtIHtOZXRTaW1WaXpOb2RlfSBsb2NhbE5vZGVcbiAqIEBwYXJhbSB7TmV0U2ltVml6Tm9kZX0gcmVtb3RlTm9kZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXVnbWVudHMgTmV0U2ltVml6RWxlbWVudFxuICovXG52YXIgTmV0U2ltVml6V2lyZSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxvY2FsTm9kZSwgcmVtb3RlTm9kZSkge1xuICBOZXRTaW1WaXpFbGVtZW50LmNhbGwodGhpcyk7XG5cbiAgdmFyIHJvb3QgPSB0aGlzLmdldFJvb3QoKTtcbiAgcm9vdC5hZGRDbGFzcygndml6LXdpcmUnKTtcblxuICAvKipcbiAgICogQHR5cGUge2pRdWVyeX0gd3JhcHBlZCBhcm91bmQgYSBTVkdQYXRoRWxlbWVudFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5saW5lXyA9IGpRdWVyeVN2Z0VsZW1lbnQoJ3BhdGgnKVxuICAgICAgLmFwcGVuZFRvKHJvb3QpO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7alF1ZXJ5fSB3cmFwcGVkIGFyb3VuZCBhIFNWR1RleHRFbGVtZW50XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnF1ZXN0aW9uTWFya18gPSBqUXVlcnlTdmdFbGVtZW50KCd0ZXh0JylcbiAgICAgIC50ZXh0KCc/JylcbiAgICAgIC5hZGRDbGFzcygncXVlc3Rpb24tbWFyaycpXG4gICAgICAuYXBwZW5kVG8ocm9vdCk7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtqUXVlcnl9IHdyYXBwZWQgYXJvdW5kIGEgU1ZHVGV4dEVsZW1lbnRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMudGV4dF8gPSBqUXVlcnlTdmdFbGVtZW50KCd0ZXh0JylcbiAgICAgIC5hZGRDbGFzcygnc3RhdGUtbGFiZWwnKVxuICAgICAgLmFwcGVuZFRvKHJvb3QpO1xuXG4gIC8qKlxuICAgKiBYLWNvb3JkaW5hdGUgb2YgdGV4dCBsYWJlbCwgZm9yIGFuaW1hdGlvbi5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMudGV4dFBvc1hfID0gMDtcblxuICAvKipcbiAgICogWS1jb29yZGluYXRlIG9mIHRleHQgbGFiZWwsIGZvciBhbmltYXRpb24uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnRleHRQb3NZXyA9IDA7XG5cbiAgLyoqXG4gICAqIEZsYWcgdGhhdCBhbGxvd3MgdXMgdG8gZm9yY2UgYW4gdXBkYXRlIG9mIHRoZSB0ZXh0IHBvc2l0aW9uOyB1c2VkXG4gICAqIHdoZW4gd2UgbW92ZSB0ZXh0IHdpdGhvdXQgdHdlZW5zIGJlY2F1c2UgdGhhdCBtZXRob2QgcHJldmVudHMgdXNcbiAgICogZnJvbSBiZWluZyBhYmxlIHRvIGRldGVjdCBub3JtYWxseSB0aGF0IHNvbWV0aGluZyBoYXMgY2hhbmdlZFxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuZm9yY2VUZXh0UG9zUmVuZGVyXyA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBTVkcgUGF0aCBEZXNjcmlwdGlvbiBvZiB0aGlzLmxpbmVfLCBmb3IgYW5pbWF0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnBhdGhEYXRhXyA9ICcnO1xuXG4gIC8qKlxuICAgKiBgVEVYVF9GSU5BTF9WRVJUSUNBTF9PRkZTRVRgLW9mZnNldCBYIGFuZCBZIGNvb3JkaW5hdGVzIGZvciB0aGVcbiAgICogY2VudGVyIG9mIHRoZSB3aXJlOyB1c2VkIGZvciBwb3NpdGlvbmluZyB0aGUgcXVlc3Rpb24gbWFya1xuICAgKiBAdHlwZSB7e3g6bnVtYmVyLCB5Om51bWJlcn19XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLndpcmVDZW50ZXJfID0geyB4OiAwLCB5OiAwIH07XG5cbiAgLyoqXG4gICAqIEVuYWJsZWQgZW5jb2RpbmcgdHlwZXMuXG4gICAqIEB0eXBlIHtFbmNvZGluZ1R5cGVbXX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuZW5jb2RpbmdzXyA9IFtdO1xuXG4gIHRoaXMubG9jYWxWaXpOb2RlID0gbG9jYWxOb2RlO1xuICB0aGlzLnJlbW90ZVZpek5vZGUgPSByZW1vdGVOb2RlO1xuXG4gIHRoaXMucmVuZGVyKCk7XG59O1xuTmV0U2ltVml6V2lyZS5pbmhlcml0cyhOZXRTaW1WaXpFbGVtZW50KTtcblxuLyoqXG4gKiBVcGRhdGUgcGF0aCBkYXRhIGZvciB3aXJlIGlmIHdlIGNhbiBkZXRlY3QgcGVuZGluZyBjaGFuZ2VzXG4gKiBAcGFyYW0ge1J1bkxvb3AuQ2xvY2t9IFtjbG9ja10gLSBzb210aW1lcyBvbWl0dGVkIGR1cmluZyBzZXR1cFxuICovXG5OZXRTaW1WaXpXaXJlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoY2xvY2spIHtcblxuICAvLyBDYWNoZSB0aGUgbG9jYWwgcG9zaXRpb24gdmFsdWVzIGhlcmUsIHNvIHdlIGNhbiBjaGVjayBsYXRlciBpZlxuICAvLyBhbnl0aGluZyBoYXMgY2hhbmdlZCBiZWZvcmUgbWFraW5nIGFuIGV4cGVuc2l2ZSBgLmF0dHJgIGNhbGxcbiAgdmFyIHRleHRQb3NYID0gdGhpcy50ZXh0UG9zWF87XG4gIHZhciB0ZXh0UG9zWSA9IHRoaXMudGV4dFBvc1lfO1xuICB2YXIgcGF0aERhdGEgPSB0aGlzLnBhdGhEYXRhXztcbiAgdmFyIHdpcmVDZW50ZXIgPSB0aGlzLndpcmVDZW50ZXJfO1xuXG4gIC8vIE1ha2UgdGhlIGNhbGwgdG8gc3VwZXIgdG8gdXBkYXRlIGV2ZXJ5dGhpbmcgd2UgY2FuLCB0aGVuXG4gIC8vIHJlY2FsY3VsYXRlIHRoZSB2YWx1ZXMgb2Ygb3VycyB0aGF0IGFyZSBkZXBlbmRlbnQgb24gdGhlIG1vdmVtZW50XG4gIC8vIG9mIG91ciBjb25uZWN0ZWQgbm9kZXNcbiAgTmV0U2ltVml6V2lyZS5zdXBlclByb3RvdHlwZS5yZW5kZXIuY2FsbCh0aGlzLCBjbG9jayk7XG5cbiAgaWYgKHRoaXMubG9jYWxWaXpOb2RlICYmIHRoaXMucmVtb3RlVml6Tm9kZSkge1xuICAgIHRoaXMucGF0aERhdGFfID0gWydNJywgdGhpcy5sb2NhbFZpek5vZGUucG9zWCwgdGhpcy5sb2NhbFZpek5vZGUucG9zWSxcbiAgICAgICAgJ0wnLCB0aGlzLnJlbW90ZVZpek5vZGUucG9zWCwgdGhpcy5yZW1vdGVWaXpOb2RlLnBvc1ldLmpvaW4oJyAnKTtcbiAgICB0aGlzLndpcmVDZW50ZXJfID0gdGhpcy5nZXRXaXJlQ2VudGVyUG9zaXRpb24oKTtcbiAgfVxuXG4gIC8vIEZpbmFsbHksIGlmIGFuZCBvbmx5IGlmIGFueSBvZiB0aGUgdmFsdWVzIHdlIGNhcmUgYWJvdXQgaGF2ZVxuICAvLyBjaGFuZ2VkLCB1cGRhdGUgb3VyIGVsZW1lbnQgaW4gdGhlIERPTVxuICBpZiAodGhpcy5mb3JjZVRleHRQb3NSZW5kZXJfIHx8IHRleHRQb3NYICE9PSB0aGlzLnRleHRQb3NYXyB8fFxuICAgICAgdGV4dFBvc1kgIT09IHRoaXMudGV4dFBvc1lfKSB7XG4gICAgdGhpcy50ZXh0X1xuICAgICAgICAuYXR0cigneCcsIHRoaXMudGV4dFBvc1hfKVxuICAgICAgICAuYXR0cigneScsIHRoaXMudGV4dFBvc1lfKTtcbiAgICB0aGlzLmZvcmNlVGV4dFBvc1JlbmRlcl8gPSBmYWxzZTtcbiAgfVxuICBpZiAocGF0aERhdGEgIT09IHRoaXMucGF0aERhdGFfKSB7XG4gICAgdGhpcy5saW5lXy5hdHRyKCdkJywgdGhpcy5wYXRoRGF0YV8pO1xuICB9XG4gIGlmICh3aXJlQ2VudGVyLnggIT09IHRoaXMud2lyZUNlbnRlcl8ueCB8fCB3aXJlQ2VudGVyLnkgIT09IHRoaXMud2lyZUNlbnRlcl8ueSkge1xuICAgIHRoaXMucXVlc3Rpb25NYXJrX1xuICAgICAgICAuYXR0cigneCcsIHRoaXMud2lyZUNlbnRlcl8ueClcbiAgICAgICAgLmF0dHIoJ3knLCB0aGlzLndpcmVDZW50ZXJfLnkpO1xuICB9XG59O1xuXG4vKipcbiAqIEhpZGUgdGhpcyB3aXJlIC0gdXNlZCB0byBoaWRlIHRoZSBpbmNvbWluZyB3aXJlIHdoZW4gd2UncmUgdHJ5aW5nIHRvIHNob3dcbiAqIHNpbXBsZXggbW9kZS5cbiAqL1xuTmV0U2ltVml6V2lyZS5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5nZXRSb290KCkuYWRkQ2xhc3MoJ2hpZGRlbi13aXJlJyk7XG59O1xuXG4vKipcbiAqIEtpbGxpbmcgYSB2aXN1YWxpemF0aW9uIG5vZGUgcmVtb3ZlcyBpdHMgSUQgc28gdGhhdCBpdCB3b24ndCBjb25mbGljdCB3aXRoXG4gKiBhbm90aGVyIG5vZGUgb2YgbWF0Y2hpbmcgSUQgYmVpbmcgYWRkZWQsIGFuZCBiZWdpbnMgaXRzIGV4aXQgYW5pbWF0aW9uLlxuICogQG92ZXJyaWRlXG4gKi9cbk5ldFNpbVZpeldpcmUucHJvdG90eXBlLmtpbGwgPSBmdW5jdGlvbiAoKSB7XG4gIE5ldFNpbVZpeldpcmUuc3VwZXJQcm90b3R5cGUua2lsbC5jYWxsKHRoaXMpO1xuICB0aGlzLmxvY2FsVml6Tm9kZSA9IG51bGw7XG4gIHRoaXMucmVtb3RlVml6Tm9kZSA9IG51bGw7XG59O1xuXG4vKipcbiAqIFVwZGF0ZSBlbmNvZGluZy12aWV3IHNldHRpbmdzLiAgRGV0ZXJtaW5lcyBob3cgYml0IHNldHMvcmVhZHMgYXJlXG4gKiBkaXNwbGF5ZWQgd2hlbiBhbmltYXRpbmcgYWJvdmUgdGhlIHdpcmUuXG4gKlxuICogQHBhcmFtIHtFbmNvZGluZ1R5cGVbXX0gbmV3RW5jb2RpbmdzXG4gKi9cbk5ldFNpbVZpeldpcmUucHJvdG90eXBlLnNldEVuY29kaW5ncyA9IGZ1bmN0aW9uIChuZXdFbmNvZGluZ3MpIHtcbiAgdGhpcy5lbmNvZGluZ3NfID0gbmV3RW5jb2RpbmdzO1xufTtcblxuLyoqXG4gKiBLaWNrIG9mZiBhbiBhbmltYXRpb24gb2YgdGhlIHdpcmUgc3RhdGUgYmVpbmcgc2V0IGJ5IHRoZSBsb2NhbCB2aXpub2RlLlxuICogQHBhcmFtIHtcIjBcInxcIjFcIn0gbmV3U3RhdGVcbiAqL1xuTmV0U2ltVml6V2lyZS5wcm90b3R5cGUuYW5pbWF0ZVNldFN0YXRlID0gZnVuY3Rpb24gKG5ld1N0YXRlKSB7XG4gIGlmICghKHRoaXMubG9jYWxWaXpOb2RlICYmIHRoaXMucmVtb3RlVml6Tm9kZSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZmx5T3V0TXMgPSAzMDA7XG4gIHZhciBob2xkUG9zaXRpb25NcyA9IDMwMDtcblxuICB0aGlzLnN0b3BBbGxBbmltYXRpb24oKTtcbiAgdGhpcy5zZXRXaXJlQ2xhc3Nlc18obmV3U3RhdGUpO1xuICB0aGlzLnRleHRfLnRleHQodGhpcy5nZXREaXNwbGF5Qml0XyhuZXdTdGF0ZSkpO1xuICB0aGlzLnNuYXBUZXh0VG9Qb3NpdGlvbih0aGlzLmdldExvY2FsTm9kZVBvc2l0aW9uKCkpO1xuICB0aGlzLnR3ZWVuVGV4dFRvUG9zaXRpb24odGhpcy5nZXRXaXJlQ2VudGVyUG9zaXRpb24oKSwgZmx5T3V0TXMsXG4gICAgICB0d2VlbnMuZWFzZU91dFF1YWQpO1xuICB0aGlzLmRvQWZ0ZXJEZWxheShmbHlPdXRNcyArIGhvbGRQb3NpdGlvbk1zLCBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5zZXRXaXJlQ2xhc3Nlc18oJ3Vua25vd24nKTtcbiAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogS2ljayBvZmYgYW4gYW5pbWF0aW9uIG9mIHRoZSB3aXJlIHN0YXRlIGJlaW5nIHJlYWQgYnkgdGhlIGxvY2FsIHZpem5vZGUuXG4gKiBAcGFyYW0ge1wiMFwifFwiMVwifSBuZXdTdGF0ZVxuICovXG5OZXRTaW1WaXpXaXJlLnByb3RvdHlwZS5hbmltYXRlUmVhZFN0YXRlID0gZnVuY3Rpb24gKG5ld1N0YXRlKSB7XG4gIGlmICghKHRoaXMubG9jYWxWaXpOb2RlICYmIHRoaXMucmVtb3RlVml6Tm9kZSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgaG9sZFBvc2l0aW9uTXMgPSAzMDA7XG4gIHZhciBmbHlUb05vZGVNcyA9IDMwMDtcblxuICB0aGlzLnN0b3BBbGxBbmltYXRpb24oKTtcbiAgdGhpcy5zZXRXaXJlQ2xhc3Nlc18obmV3U3RhdGUpO1xuICB0aGlzLnRleHRfLnRleHQodGhpcy5nZXREaXNwbGF5Qml0XyhuZXdTdGF0ZSkpO1xuICB0aGlzLnNuYXBUZXh0VG9Qb3NpdGlvbih0aGlzLmdldFdpcmVDZW50ZXJQb3NpdGlvbigpKTtcbiAgdGhpcy5kb0FmdGVyRGVsYXkoaG9sZFBvc2l0aW9uTXMsIGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnR3ZWVuVGV4dFRvUG9zaXRpb24odGhpcy5nZXRMb2NhbE5vZGVQb3NpdGlvbigpLCBmbHlUb05vZGVNcyxcbiAgICAgICAgdHdlZW5zLmVhc2VPdXRRdWFkKTtcbiAgICB0aGlzLnNldFdpcmVDbGFzc2VzXygndW5rbm93bicpO1xuICB9LmJpbmQodGhpcykpO1xufTtcblxuLyoqXG4gKiBBZGRzL3JlbW92ZXMgY2xhc3NlcyBmcm9tIHRoZSBTVkcgcm9vdCBhY2NvcmRpbmcgdG8gdGhlIGdpdmVuIHdpcmUgc3RhdGUuXG4gKiBQYXNzaW5nIGFueXRoaW5nIG90aGVyIHRoYW4gXCIxXCIgb3IgXCIwXCIgd2lsbCBwdXQgdGhlIHdpcmUgaW4gYW4gXCJ1bmtub3duXCJcbiAqIHN0YXRlLCB3aGljaCBiZWdpbnMgYSBDU1MgdHJhbnNpdGlvbiBmYWRlIGJhY2sgdG8gZ3JheS5cbiAqIEBwYXJhbSB7XCIwXCJ8XCIxXCJ8Kn0gbmV3U3RhdGVcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVZpeldpcmUucHJvdG90eXBlLnNldFdpcmVDbGFzc2VzXyA9IGZ1bmN0aW9uIChuZXdTdGF0ZSkge1xuICB2YXIgc3RhdGVPZmYgPSAobmV3U3RhdGUgPT09ICcwJyk7XG4gIHZhciBzdGF0ZU9uID0gKCFzdGF0ZU9mZiAmJiBuZXdTdGF0ZSA9PT0gJzEnKTtcbiAgdmFyIHN0YXRlVW5rbm93biA9ICghc3RhdGVPZmYgJiYgIXN0YXRlT24pO1xuXG4gIHRoaXMuZ2V0Um9vdCgpLnRvZ2dsZUNsYXNzKCdzdGF0ZS1vbicsIHN0YXRlT24pO1xuICB0aGlzLmdldFJvb3QoKS50b2dnbGVDbGFzcygnc3RhdGUtb2ZmJywgc3RhdGVPZmYpO1xuICB0aGlzLmdldFJvb3QoKS50b2dnbGVDbGFzcygnc3RhdGUtdW5rbm93bicsIHN0YXRlVW5rbm93bik7XG59O1xuXG4vKipcbiAqIEdldCBhbiBhcHByb3ByaWF0ZSBcImRpc3BsYXkgYml0XCIgdG8gc2hvdyBhYm92ZSB0aGUgd2lyZSwgZ2l2ZW4gdGhlXG4gKiBjdXJyZW50IGVuYWJsZWQgZW5jb2RpbmdzIChzaG91bGQgbWF0Y2ggdGhlIFwic2V0IHdpcmVcIiBidXR0b24gbGFiZWwpXG4gKiBAcGFyYW0ge1wiMFwifFwiMVwifSB3aXJlU3RhdGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGEgZGlzcGxheSBiaXQgYXBwcm9wcmlhdGUgdG8gdGhlIGVuYWJsZWQgZW5jb2RpbmdzLlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltVml6V2lyZS5wcm90b3R5cGUuZ2V0RGlzcGxheUJpdF8gPSBmdW5jdGlvbiAod2lyZVN0YXRlKSB7XG4gIGlmICh0aGlzLmlzRW5jb2RpbmdFbmFibGVkXyhFbmNvZGluZ1R5cGUuQV9BTkRfQikgJiZcbiAgICAgICF0aGlzLmlzRW5jb2RpbmdFbmFibGVkXyhFbmNvZGluZ1R5cGUuQklOQVJZKSkge1xuICAgIHdpcmVTdGF0ZSA9IGJpbmFyeVRvQUIod2lyZVN0YXRlKTtcbiAgfVxuICByZXR1cm4gd2lyZVN0YXRlO1xufTtcblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBnaXZlbiBlbmNvZGluZyBpcyBjdXJyZW50bHkgZGlzcGxheWVkIGJ5IHRoZSBwYW5lbC5cbiAqIEBwYXJhbSB7RW5jb2RpbmdUeXBlfSBxdWVyeUVuY29kaW5nXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVZpeldpcmUucHJvdG90eXBlLmlzRW5jb2RpbmdFbmFibGVkXyA9IGZ1bmN0aW9uIChxdWVyeUVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmVuY29kaW5nc18uc29tZShmdW5jdGlvbiAoZW5hYmxlZEVuY29kaW5nKSB7XG4gICAgcmV0dXJuIGVuYWJsZWRFbmNvZGluZyA9PT0gcXVlcnlFbmNvZGluZztcbiAgfSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYW5pbWF0ZWQgbW90aW9uIGZyb20gdGhlIHRleHQncyBjdXJyZW50IHBvc2l0aW9uIHRvIHRoZVxuICogZ2l2ZW4gY29vcmRpbmF0ZXMuXG4gKiBAcGFyYW0ge3t4Om51bWJlciwgeTpudW1iZXJ9fSBkZXN0aW5hdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IFtkdXJhdGlvbj02MDBdIGluIG1pbGxpc2Vjb25kc1xuICogQHBhcmFtIHtUd2VlbkZ1bmN0aW9ufSBbdHdlZW5GdW5jdGlvbj1saW5lYXJdXG4gKi9cbk5ldFNpbVZpeldpcmUucHJvdG90eXBlLnR3ZWVuVGV4dFRvUG9zaXRpb24gPSBmdW5jdGlvbiAoZGVzdGluYXRpb24sIGR1cmF0aW9uLFxuICAgIHR3ZWVuRnVuY3Rpb24pIHtcbiAgaWYgKGR1cmF0aW9uID4gMCkge1xuICAgIHRoaXMudHdlZW5zXy5wdXNoKG5ldyB0d2VlbnMuVHdlZW5WYWx1ZVRvKHRoaXMsICd0ZXh0UG9zWF8nLCBkZXN0aW5hdGlvbi54LFxuICAgICAgICBkdXJhdGlvbiwgdHdlZW5GdW5jdGlvbikpO1xuICAgIHRoaXMudHdlZW5zXy5wdXNoKG5ldyB0d2VlbnMuVHdlZW5WYWx1ZVRvKHRoaXMsICd0ZXh0UG9zWV8nLCBkZXN0aW5hdGlvbi55LFxuICAgICAgICBkdXJhdGlvbiwgdHdlZW5GdW5jdGlvbikpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMudGV4dFBvc1hfID0gZGVzdGluYXRpb24ueDtcbiAgICB0aGlzLnRleHRQb3NZXyA9IGRlc3RpbmF0aW9uLnk7XG4gICAgdGhpcy5mb3JjZVRleHRQb3NSZW5kZXJfID0gdHJ1ZTtcbiAgfVxufTtcblxuLyoqXG4gKiBTbmFwcyB0aGUgdGV4dCB0byB0aGUgZ2l2ZW4gcG9zaXRpb24uXG4gKiBAcGFyYW0ge3t4Om51bWJlciwgeTpudW1iZXJ9fSBkZXN0aW5hdGlvblxuICovXG5OZXRTaW1WaXpXaXJlLnByb3RvdHlwZS5zbmFwVGV4dFRvUG9zaXRpb24gPSBmdW5jdGlvbiAoZGVzdGluYXRpb24pIHtcbiAgdGhpcy50d2VlblRleHRUb1Bvc2l0aW9uKGRlc3RpbmF0aW9uLCAwKTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge3t4Om51bWJlciwgeTpudW1iZXJ9fVxuICovXG5OZXRTaW1WaXpXaXJlLnByb3RvdHlwZS5nZXRMb2NhbE5vZGVQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiB0aGlzLmxvY2FsVml6Tm9kZS5wb3NYLFxuICAgIHk6IHRoaXMubG9jYWxWaXpOb2RlLnBvc1lcbiAgfTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge3t4Om51bWJlciwgeTpudW1iZXJ9fVxuICovXG5OZXRTaW1WaXpXaXJlLnByb3RvdHlwZS5nZXRXaXJlQ2VudGVyUG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgeDogKHRoaXMucmVtb3RlVml6Tm9kZS5wb3NYIC0gdGhpcy5sb2NhbFZpek5vZGUucG9zWCkgLyAyICtcbiAgICAgICAgdGhpcy5sb2NhbFZpek5vZGUucG9zWCxcbiAgICB5OiAodGhpcy5yZW1vdGVWaXpOb2RlLnBvc1kgLSB0aGlzLnJlbW90ZVZpek5vZGUucG9zWSkgLyAyICtcbiAgICAgICAgdGhpcy5sb2NhbFZpek5vZGUucG9zWSArIFRFWFRfRklOQUxfVkVSVElDQUxfT0ZGU0VUXG4gIH07XG59O1xuIiwiLyoqXG4gKiBAb3ZlcnZpZXcgTm9kZXMgaW4gdGhlIHZpc3VhbGl6YXRpb24gdGhhdCBtYXAgdG8gc2ltdWxhdGlvbiBlbnRpdGllcy5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgTmV0U2ltQ29uc3RhbnRzID0gcmVxdWlyZSgnLi9OZXRTaW1Db25zdGFudHMnKTtcbnZhciBOZXRTaW1WaXpOb2RlID0gcmVxdWlyZSgnLi9OZXRTaW1WaXpOb2RlJyk7XG5cbnZhciBOb2RlVHlwZSA9IE5ldFNpbUNvbnN0YW50cy5Ob2RlVHlwZTtcblxudmFyIE5ldFNpbUdsb2JhbHMgPSByZXF1aXJlKCcuL05ldFNpbUdsb2JhbHMnKTtcblxuLyoqXG4gKiBAcGFyYW0ge05ldFNpbU5vZGV9IHNvdXJjZU5vZGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdXNlQmFja2dyb3VuZEFuaW1hdGlvbiAtIGNoYW5nZXMgdGhlIGJlaGF2aW9yIG9mIHRoaXMgbm9kZVxuICogICAgICAgIHdoZW4gaXQncyBpbiB0aGUgYmFja2dyb3VuZCBsYXllclxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXVnbWVudHMgTmV0U2ltVml6Tm9kZVxuICovXG52YXIgTmV0U2ltVml6U2ltdWxhdGlvbk5vZGUgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzb3VyY2VOb2RlLFxuICAgIHVzZUJhY2tncm91bmRBbmltYXRpb24pIHtcbiAgTmV0U2ltVml6Tm9kZS5jYWxsKHRoaXMsIHVzZUJhY2tncm91bmRBbmltYXRpb24pO1xuXG4gIC8qKlxuICAgKiBJRCBvZiB0aGUgTmV0U2ltTm9kZSB0aGF0IHRoaXMgTmV0U2ltVml6U2ltdWxhdGlvbk5vZGUgcmVwcmVzZW50cy5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRoaXMuY29ycmVzcG9uZGluZ05vZGVJRF8gPSBzb3VyY2VOb2RlLmVudGl0eUlEO1xuXG4gIC8qKlxuICAgKiBVVUlEIG9mIHRoZSBOZXRTaW1Ob2RlIHRoYXQgdGhpcyBOZXRTaW1WaXpTaW11bGF0aW9uTm9kZSByZXByZXNlbnRzLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgdGhpcy5jb3JyZXNwb25kaW5nTm9kZVV1aWRfID0gc291cmNlTm9kZS51dWlkO1xuXG4gIC8qKlxuICAgKiBJZiB3ZSBlbmQgdXAgcmVwcmVzZW50aW5nIGEgcm91dGVyLCB3ZSBtYXkgbmVlZCB0byBob2xkIHRoZSBhdXRvLWRucyBhZGRyZXNzXG4gICAqIHRvIHBhc3MgdG8gYSBmYWtlIGF1dG8tZG5zIG5vZGUuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLmF1dG9EbnNBZGRyZXNzID0gdW5kZWZpbmVkO1xuXG4gIHRoaXMuY29uZmlndXJlRnJvbShzb3VyY2VOb2RlKTtcbiAgdGhpcy5yZW5kZXIoKTtcbn07XG5OZXRTaW1WaXpTaW11bGF0aW9uTm9kZS5pbmhlcml0cyhOZXRTaW1WaXpOb2RlKTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHtOZXRTaW1Ob2RlfSBzb3VyY2VOb2RlXG4gKi9cbk5ldFNpbVZpelNpbXVsYXRpb25Ob2RlLnByb3RvdHlwZS5jb25maWd1cmVGcm9tID0gZnVuY3Rpb24gKHNvdXJjZU5vZGUpIHtcbiAgdGhpcy5jb3JyZXNwb25kaW5nTm9kZUlkXyA9IHNvdXJjZU5vZGUuZW50aXR5SUQ7XG4gIHRoaXMuY29ycmVzcG9uZGluZ05vZGVVdWlkXyA9IHNvdXJjZU5vZGUudXVpZDtcblxuICB2YXIgbGV2ZWxDb25maWcgPSBOZXRTaW1HbG9iYWxzLmdldExldmVsQ29uZmlnKCk7XG4gIGlmIChsZXZlbENvbmZpZy5zaG93SG9zdG5hbWVJbkdyYXBoKSB7XG4gICAgdGhpcy5zZXROYW1lKHNvdXJjZU5vZGUuZ2V0SG9zdG5hbWUoKSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zZXROYW1lKHNvdXJjZU5vZGUuZ2V0U2hvcnREaXNwbGF5TmFtZSgpKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VOb2RlLmdldE5vZGVUeXBlKCkgPT09IE5vZGVUeXBlLlJPVVRFUikge1xuICAgIHRoaXMuaXNSb3V0ZXIgPSB0cnVlO1xuICAgIHRoaXMuZ2V0Um9vdCgpLmFkZENsYXNzKCdyb3V0ZXItbm9kZScpO1xuICAgIHRoaXMuYXV0b0Ruc0FkZHJlc3MgPSBzb3VyY2VOb2RlLmdldEF1dG9EbnNBZGRyZXNzKCk7XG4gICAgaWYgKGxldmVsQ29uZmlnLmJyb2FkY2FzdE1vZGUpIHtcbiAgICAgIHRoaXMuZ2V0Um9vdCgpLmNzcygnZGlzcGxheScsICdub25lJyk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIElEIG9mIHRoZSBzaW11bGF0aW9uIGVudGl0eSB0aGF0IG1hcHMgdG8gdGhpcyBvbmUuXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5OZXRTaW1WaXpTaW11bGF0aW9uTm9kZS5wcm90b3R5cGUuZ2V0Q29ycmVzcG9uZGluZ0VudGl0eUlkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5jb3JyZXNwb25kaW5nTm9kZUlkXztcbn07XG5cbi8qKlxuICogQHBhcmFtIHtOZXRTaW1FbnRpdHl9IGVudGl0eVxuICogQHJldHVybnMge2Jvb2xlYW59IFRSVUUgb2YgdGhpcyBWaXpFbGVtZW50IHJlcHJlc2VudHMgdGhlIGdpdmVuIEVudGl0eS5cbiAqL1xuTmV0U2ltVml6U2ltdWxhdGlvbk5vZGUucHJvdG90eXBlLnJlcHJlc2VudHNFbnRpdHkgPSBmdW5jdGlvbiAoZW50aXR5KSB7XG4gIHJldHVybiB0aGlzLmNvcnJlc3BvbmRpbmdOb2RlSWRfID09PSBlbnRpdHkuZW50aXR5SUQgJiZcbiAgICAgIHRoaXMuY29ycmVzcG9uZGluZ05vZGVVdWlkXyA9PT0gZW50aXR5LnV1aWQ7XG59O1xuXG4vKipcbiAqIEtpbGxpbmcgYSB2aXN1YWxpemF0aW9uIG5vZGUgcmVtb3ZlcyBpdHMgSUQgc28gdGhhdCBpdCB3b24ndCBjb25mbGljdCB3aXRoXG4gKiBhbm90aGVyIG5vZGUgb2YgbWF0Y2hpbmcgSUQgYmVpbmcgYWRkZWQsIGFuZCBiZWdpbnMgaXRzIGV4aXQgYW5pbWF0aW9uLlxuICogQG92ZXJyaWRlXG4gKi9cbk5ldFNpbVZpelNpbXVsYXRpb25Ob2RlLnByb3RvdHlwZS5raWxsID0gZnVuY3Rpb24gKCkge1xuICBOZXRTaW1WaXpTaW11bGF0aW9uTm9kZS5zdXBlclByb3RvdHlwZS5raWxsLmNhbGwodGhpcyk7XG4gIHRoaXMuY29ycmVzcG9uZGluZ05vZGVJZF8gPSB1bmRlZmluZWQ7XG4gIHRoaXMuY29ycmVzcG9uZGluZ05vZGVVdWlkXyA9IHVuZGVmaW5lZDtcbn07XG4iLCIvKipcbiAqIEBvdmVydmlldyBWaXN1YWxpemF0aW9uIGF1dG8tZG5zIG5vZGUuXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCcuLi91dGlscycpO1xudmFyIE5ldFNpbUdsb2JhbHMgPSByZXF1aXJlKCcuL05ldFNpbUdsb2JhbHMnKTtcbnZhciBOZXRTaW1WaXpOb2RlID0gcmVxdWlyZSgnLi9OZXRTaW1WaXpOb2RlJyk7XG5cbi8qKlxuICogQHBhcmFtIHtib29sZWFufSB1c2VCYWNrZ3JvdW5kQW5pbWF0aW9uIC0gY2hhbmdlcyB0aGUgYmVoYXZpb3Igb2YgdGhpcyBub2RlXG4gKiAgICAgICAgd2hlbiBpdCdzIGluIHRoZSBiYWNrZ3JvdW5kIGxheWVyXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhdWdtZW50cyBOZXRTaW1WaXpOb2RlXG4gKi9cbnZhciBOZXRTaW1WaXpBdXRvRG5zTm9kZSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZUJhY2tncm91bmRBbmltYXRpb24pIHtcbiAgTmV0U2ltVml6Tm9kZS5jYWxsKHRoaXMsIHVzZUJhY2tncm91bmRBbmltYXRpb24pO1xuXG4gIHRoaXMuZ2V0Um9vdCgpLmFkZENsYXNzKCdhdXRvLWRucy1ub2RlJyk7XG5cbiAgdmFyIGxldmVsQ29uZmlnID0gTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpO1xuICBpZiAobGV2ZWxDb25maWcuc2hvd0hvc3RuYW1lSW5HcmFwaCkge1xuICAgIHRoaXMuc2V0TmFtZSgnZG5zJyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zZXROYW1lKCdETlMnKTtcbiAgfVxuXG4gIHRoaXMuc2V0SXNEbnNOb2RlKHRydWUpO1xuICB0aGlzLnJlbmRlcigpO1xufTtcbk5ldFNpbVZpekF1dG9EbnNOb2RlLmluaGVyaXRzKE5ldFNpbVZpek5vZGUpO1xuIiwiLyoqXG4gKiBAb3ZlcnZpZXcgTm9kZXMgaW4gdGhlIHZpc3VhbGl6YXRpb24uXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCcuLi91dGlscycpO1xudmFyIE5ldFNpbUNvbnN0YW50cyA9IHJlcXVpcmUoJy4vTmV0U2ltQ29uc3RhbnRzJyk7XG52YXIgalF1ZXJ5U3ZnRWxlbWVudCA9IHJlcXVpcmUoJy4vTmV0U2ltVXRpbHMnKS5qUXVlcnlTdmdFbGVtZW50O1xudmFyIE5ldFNpbVZpekVsZW1lbnQgPSByZXF1aXJlKCcuL05ldFNpbVZpekVsZW1lbnQnKTtcbnZhciB0d2VlbnMgPSByZXF1aXJlKCcuL3R3ZWVucycpO1xuXG52YXIgRG5zTW9kZSA9IE5ldFNpbUNvbnN0YW50cy5EbnNNb2RlO1xuXG52YXIgTmV0U2ltR2xvYmFscyA9IHJlcXVpcmUoJy4vTmV0U2ltR2xvYmFscycpO1xuXG4vKipcbiAqIFRoZSBuYXJyb3dlc3QgdGhhdCBhIHRleHQgYnViYmxlIGlzIGFsbG93ZWQgdG8gYmUuXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0XG4gKi9cbnZhciBURVhUX01JTl9XSURUSCA9IDMwO1xuXG4vKipcbiAqIFdpZHRoIHRvIGFkZCB0byB0aGUgYnViYmxlIGJleW9uZCB0aGUgd2lkdGggb2YgdGhlIHN0dWRlbnQncyBuYW1lLlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdFxuICovXG52YXIgVEVYVF9QQURESU5HX1ggPSAyMDtcblxuLyoqXG4gKiBIZWlnaHQgdG8gYWRkIHRvIHRoZSBidWJibGUgYmV5b25kIHRoZSBoZWlnaHQgb2YgdGhlIHN0dWRlbnQncyBuYW1lLlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdFxuICovXG52YXIgVEVYVF9QQURESU5HX1kgPSAxMDtcblxuLyoqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHVzZUJhY2tncm91bmRBbmltYXRpb24gLSBjaGFuZ2VzIHRoZSBiZWhhdmlvciBvZiB0aGlzIG5vZGVcbiAqICAgICAgICB3aGVuIGl0J3MgaW4gdGhlIGJhY2tncm91bmQgbGF5ZXIuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhdWdtZW50cyBOZXRTaW1WaXpFbGVtZW50XG4gKi9cbnZhciBOZXRTaW1WaXpOb2RlID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXNlQmFja2dyb3VuZEFuaW1hdGlvbikge1xuICBOZXRTaW1WaXpFbGVtZW50LmNhbGwodGhpcyk7XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLmFkZHJlc3NfID0gdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZSB7RG5zTW9kZX1cbiAgICovXG4gIHRoaXMuZG5zTW9kZV8gPSB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc3RhcnQgb3IgdXBkYXRlIGFueSB0d2VlbnMgd2hpbGUgdGhlIG5vZGUgaXMgaW4gdGhlIGJhY2tncm91bmRcbiAgICogbGF5ZXIuXG4gICAqIEBwcml2YXRlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy51c2VCYWNrZ3JvdW5kQW5pbWF0aW9uXyA9IHVzZUJhY2tncm91bmRBbmltYXRpb247XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5pc1JvdXRlciA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuaXNMb2NhbE5vZGUgPSBmYWxzZTtcblxuICAvKipcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLmlzRG5zTm9kZSA9IGZhbHNlO1xuXG4gIC8vIEdpdmUgb3VyIHJvb3Qgbm9kZSBhIHVzZWZ1bCBjbGFzc1xuICB2YXIgcm9vdCA9IHRoaXMuZ2V0Um9vdCgpO1xuICByb290LmFkZENsYXNzKCd2aXotbm9kZScpO1xuXG4gIC8vIEdvaW5nIGZvciBhIGRpYW1ldGVyIG9mIF9jbG9zZV8gdG8gNzVcbiAgdmFyIHJhZGl1cyA9IDM3O1xuICB2YXIgdGV4dFZlcnRpY2FsT2Zmc2V0ID0gNDtcblxuICAvKipcbiAgICpcbiAgICogQHR5cGUge2pRdWVyeX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGpRdWVyeVN2Z0VsZW1lbnQoJ2NpcmNsZScpXG4gICAgICAuYXR0cignY3gnLCAwKVxuICAgICAgLmF0dHIoJ2N5JywgMClcbiAgICAgIC5hdHRyKCdyJywgcmFkaXVzKVxuICAgICAgLmFwcGVuZFRvKHJvb3QpO1xuXG4gIHRoaXMubmFtZUdyb3VwXyA9IGpRdWVyeVN2Z0VsZW1lbnQoJ2cnKVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoMCwwKScpXG4gICAgICAuYXBwZW5kVG8ocm9vdCk7XG5cbiAgdGhpcy5kaXNwbGF5TmFtZV8gPSBqUXVlcnlTdmdFbGVtZW50KCd0ZXh0JylcbiAgICAgIC5hdHRyKCd4JywgMClcbiAgICAgIC5hdHRyKCd5JywgdGV4dFZlcnRpY2FsT2Zmc2V0KTtcblxuICB0aGlzLm5hbWVCb3hfID0galF1ZXJ5U3ZnRWxlbWVudCgncmVjdCcpXG4gICAgICAuYWRkQ2xhc3MoJ25hbWUtYm94Jyk7XG5cbiAgdGhpcy5uYW1lR3JvdXBfXG4gICAgICAuYXBwZW5kKHRoaXMubmFtZUJveF8pXG4gICAgICAuYXBwZW5kKHRoaXMuZGlzcGxheU5hbWVfKTtcblxuICB0aGlzLmFkZHJlc3NHcm91cF8gPSBqUXVlcnlTdmdFbGVtZW50KCdnJylcbiAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDAsMzApJylcbiAgICAgIC5oaWRlKClcbiAgICAgIC5hcHBlbmRUbyhyb290KTtcblxuICB0aGlzLmFkZHJlc3NCb3hfID0galF1ZXJ5U3ZnRWxlbWVudCgncmVjdCcpXG4gICAgICAuYWRkQ2xhc3MoJ2FkZHJlc3MtYm94JylcbiAgICAgIC5hcHBlbmRUbyh0aGlzLmFkZHJlc3NHcm91cF8pO1xuXG4gIHRoaXMuYWRkcmVzc1RleHRfID0galF1ZXJ5U3ZnRWxlbWVudCgndGV4dCcpXG4gICAgICAuYWRkQ2xhc3MoJ2FkZHJlc3MtYm94JylcbiAgICAgIC5hdHRyKCd4JywgMClcbiAgICAgIC5hdHRyKCd5JywgdGV4dFZlcnRpY2FsT2Zmc2V0KVxuICAgICAgLnRleHQoJz8nKVxuICAgICAgLmFwcGVuZFRvKHRoaXMuYWRkcmVzc0dyb3VwXyk7XG5cbiAgLy8gU2V0IGFuIGluaXRpYWwgZGVmYXVsdCB0d2VlbiBmb3Igem9vbWluZyBpbiBmcm9tIG5vdGhpbmcuXG4gIGlmICh0aGlzLnVzZUJhY2tncm91bmRBbmltYXRpb25fKSB7XG4gICAgdGhpcy5zbmFwVG9TY2FsZSgwKTtcbiAgICB0aGlzLnR3ZWVuVG9TY2FsZSgwLjUsIDgwMCwgdHdlZW5zLmVhc2VPdXRFbGFzdGljKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnNuYXBUb1NjYWxlKDAuNSk7XG4gIH1cbn07XG5OZXRTaW1WaXpOb2RlLmluaGVyaXRzKE5ldFNpbVZpekVsZW1lbnQpO1xuXG4vKipcbiAqIEZsYWcgdGhpcyB2aXogbm9kZSBhcyB0aGUgc2ltdWxhdGlvbiBsb2NhbCBub2RlLlxuICovXG5OZXRTaW1WaXpOb2RlLnByb3RvdHlwZS5zZXRJc0xvY2FsTm9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5pc0xvY2FsTm9kZSA9IHRydWU7XG4gIHRoaXMuZ2V0Um9vdCgpLmFkZENsYXNzKCdsb2NhbC1ub2RlJyk7XG59O1xuXG4vKipcbiAqIENoYW5nZSB0aGUgZGlzcGxheSBuYW1lIG9mIHRoZSB2aXogbm9kZVxuICogQHBhcmFtIHtzdHJpbmd9IG5ld05hbWVcbiAqL1xuTmV0U2ltVml6Tm9kZS5wcm90b3R5cGUuc2V0TmFtZSA9IGZ1bmN0aW9uIChuZXdOYW1lKSB7XG4gIHRoaXMuZGlzcGxheU5hbWVfLnRleHQobmV3TmFtZSk7XG4gIHRoaXMucmVzaXplTmFtZUJveF8oKTtcbn07XG5cbi8qKiBAcHJpdmF0ZSAqL1xuTmV0U2ltVml6Tm9kZS5wcm90b3R5cGUucmVzaXplTmFtZUJveF8gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVzaXplUmVjdFRvVGV4dF8odGhpcy5uYW1lQm94XywgdGhpcy5kaXNwbGF5TmFtZV8pO1xufTtcblxuLyoqIEBwcml2YXRlICovXG5OZXRTaW1WaXpOb2RlLnByb3RvdHlwZS5yZXNpemVBZGRyZXNzQm94XyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5yZXNpemVSZWN0VG9UZXh0Xyh0aGlzLmFkZHJlc3NCb3hfLCB0aGlzLmFkZHJlc3NUZXh0Xyk7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZm9yIHJlc2l6aW5nIGEgYmFja2dyb3VuZCByb3VuZGVkLXJlY3QgdG8gZml0IHRoZSBnaXZlbiB0ZXh0IGVsZW1lbnQuXG4gKiBAcGFyYW0ge2pRdWVyeX0gcmVjdFxuICogQHBhcmFtIHtqUXVlcnl9IHRleHRcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVZpek5vZGUucHJvdG90eXBlLnJlc2l6ZVJlY3RUb1RleHRfID0gZnVuY3Rpb24gKHJlY3QsIHRleHQpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYm94ID0gdGV4dFswXS5nZXRCQm94KCk7XG4gICAgdmFyIHdpZHRoID0gTWF0aC5tYXgoVEVYVF9NSU5fV0lEVEgsIGJveC53aWR0aCArIFRFWFRfUEFERElOR19YKTtcbiAgICB2YXIgaGVpZ2h0ID0gYm94LmhlaWdodCArIFRFWFRfUEFERElOR19ZO1xuICAgIHZhciBoYWxmV2lkdGggPSB3aWR0aCAvIDI7XG4gICAgdmFyIGhhbGZIZWlnaHQgPSBoZWlnaHQgLyAyO1xuICAgIHJlY3QuYXR0cigneCcsIC1oYWxmV2lkdGgpXG4gICAgICAgIC5hdHRyKCd5JywgLWhhbGZIZWlnaHQpXG4gICAgICAgIC5hdHRyKCdyeCcsIGhhbGZIZWlnaHQpXG4gICAgICAgIC5hdHRyKCdyeScsIGhhbGZIZWlnaHQpXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIHdpZHRoKVxuICAgICAgICAuYXR0cignaGVpZ2h0JywgaGVpZ2h0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIEp1c3QgYWxsb3cgdGhpcyB0byBiZSBhIG5vLW9wIGlmIGl0IGZhaWxzLiAgSW4gc29tZSBicm93c2VycyxcbiAgICAvLyBnZXRCQm94IHdpbGwgdGhyb3cgaWYgdGhlIGVsZW1lbnQgaXMgbm90IHlldCBpbiB0aGUgRE9NLlxuICB9XG59O1xuXG4vKipcbiAqIEtpbGxpbmcgYSB2aXN1YWxpemF0aW9uIG5vZGUgcmVtb3ZlcyBpdHMgSUQgc28gdGhhdCBpdCB3b24ndCBjb25mbGljdCB3aXRoXG4gKiBhbm90aGVyIG5vZGUgb2YgbWF0Y2hpbmcgSUQgYmVpbmcgYWRkZWQsIGFuZCBiZWdpbnMgaXRzIGV4aXQgYW5pbWF0aW9uLlxuICogQG92ZXJyaWRlXG4gKi9cbk5ldFNpbVZpek5vZGUucHJvdG90eXBlLmtpbGwgPSBmdW5jdGlvbiAoKSB7XG4gIE5ldFNpbVZpek5vZGUuc3VwZXJQcm90b3R5cGUua2lsbC5jYWxsKHRoaXMpO1xuICB0aGlzLnN0b3BBbGxBbmltYXRpb24oKTtcbiAgdGhpcy50d2VlblRvU2NhbGUoMCwgMjAwLCB0d2VlbnMuZWFzZUluUXVhZCk7XG59O1xuXG4vKipcbiAqIFByb3ZpZGVzIGRyaWZ0aW5nIGFuaW1hdGlvbiBmb3Igbm9kZXMgaW4gdGhlIGJhY2tncm91bmQuXG4gKiBAcGFyYW0ge1J1bkxvb3AuQ2xvY2t9IGNsb2NrXG4gKi9cbk5ldFNpbVZpek5vZGUucHJvdG90eXBlLnRpY2sgPSBmdW5jdGlvbiAoY2xvY2spIHtcbiAgTmV0U2ltVml6Tm9kZS5zdXBlclByb3RvdHlwZS50aWNrLmNhbGwodGhpcywgY2xvY2spO1xuXG4gIC8vIFRyaWdnZXIgYSBuZXcgZHJpZnQgaWYgd2UncmUgaW4gdGhlIGJhY2tncm91bmQgYW5kIHRoZSBsYXN0IG9uZSBmaW5pc2hlZC5cbiAgaWYgKHRoaXMudXNlQmFja2dyb3VuZEFuaW1hdGlvbl8gJiYgIXRoaXMuaXNGb3JlZ3JvdW5kICYmXG4gICAgICB0aGlzLnR3ZWVuc18ubGVuZ3RoID09PSAwKSB7XG4gICAgdmFyIHJhbmRvbVggPSAzMDAgKiBNYXRoLnJhbmRvbSgpIC0gMTUwO1xuICAgIHZhciByYW5kb21ZID0gMzAwICogTWF0aC5yYW5kb20oKSAtIDE1MDtcbiAgICB0aGlzLnR3ZWVuVG9Qb3NpdGlvbihyYW5kb21YLCByYW5kb21ZLCAyMDAwMCwgdHdlZW5zLmVhc2VJbk91dFF1YWQpO1xuICB9XG59O1xuXG4vKipcbiAqIFdoZW4gdmlzaWJsZSwgcnVucyBldmVyeSBmcmFtZVxuICogQHBhcmFtIHtSdW5Mb29wLkNsb2NrfSBbY2xvY2tdXG4gKi9cbk5ldFNpbVZpek5vZGUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChjbG9jaykge1xuICBOZXRTaW1WaXpOb2RlLnN1cGVyUHJvdG90eXBlLnJlbmRlci5jYWxsKHRoaXMsIGNsb2NrKTtcblxuICAvLyBJZiBjdXJyZW50bHkgYW5pbWF0aW5nLCBhZGp1c3QgdGV4dCBib3ggc2l6ZXMgdG8gbWF0Y2hcbiAgaWYgKHRoaXMuaXNGb3JlZ3JvdW5kICYmIHRoaXMudHdlZW5zXy5sZW5ndGggPiAwKSB7XG4gICAgdGhpcy5yZXNpemVOYW1lQm94XygpO1xuICAgIHRoaXMucmVzaXplQWRkcmVzc0JveF8oKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzRm9yZWdyb3VuZFxuICovXG5OZXRTaW1WaXpOb2RlLnByb3RvdHlwZS5vbkRlcHRoQ2hhbmdlID0gZnVuY3Rpb24gKGlzRm9yZWdyb3VuZCkge1xuICBOZXRTaW1WaXpOb2RlLnN1cGVyUHJvdG90eXBlLm9uRGVwdGhDaGFuZ2UuY2FsbCh0aGlzLCBpc0ZvcmVncm91bmQpO1xuXG4gIC8vIERvbid0IGFkZCB0d2VlbnMgaWYgdGhpcyBub2RlIGhhcyBiZWVuIGtpbGxlZFxuICBpZiAodGhpcy5pc0R5aW5nKCkgfHwgdGhpcy5pc0RlYWQoKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMudHdlZW5zXy5sZW5ndGggPSAwO1xuICBpZiAoaXNGb3JlZ3JvdW5kKSB7XG4gICAgdGhpcy50d2VlblRvU2NhbGUoMSwgNjAwLCB0d2VlbnMuZWFzZU91dEVsYXN0aWMpO1xuICB9IGVsc2UgaWYgKHRoaXMudXNlQmFja2dyb3VuZEFuaW1hdGlvbl8pIHtcbiAgICB0aGlzLnR3ZWVuVG9TY2FsZSgwLjUsIDYwMCwgdHdlZW5zLmVhc2VPdXRFbGFzdGljKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnNuYXBUb1NjYWxlKDAuNSk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGFkZHJlc3NcbiAqL1xuTmV0U2ltVml6Tm9kZS5wcm90b3R5cGUuc2V0QWRkcmVzcyA9IGZ1bmN0aW9uIChhZGRyZXNzKSB7XG4gIHRoaXMuYWRkcmVzc18gPSBhZGRyZXNzO1xuICB0aGlzLnVwZGF0ZUFkZHJlc3NEaXNwbGF5KCk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7RE5TTW9kZX0gbmV3RG5zTW9kZVxuICovXG5OZXRTaW1WaXpOb2RlLnByb3RvdHlwZS5zZXREbnNNb2RlID0gZnVuY3Rpb24gKG5ld0Ruc01vZGUpIHtcbiAgdGhpcy5kbnNNb2RlXyA9IG5ld0Ruc01vZGU7XG4gIHRoaXMudXBkYXRlQWRkcmVzc0Rpc3BsYXkoKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtib29sZWFufSBpc0Ruc05vZGVcbiAqL1xuTmV0U2ltVml6Tm9kZS5wcm90b3R5cGUuc2V0SXNEbnNOb2RlID0gZnVuY3Rpb24gKGlzRG5zTm9kZSkge1xuICB0aGlzLmlzRG5zTm9kZSA9IGlzRG5zTm9kZTtcbiAgdGhpcy51cGRhdGVBZGRyZXNzRGlzcGxheSgpO1xufTtcblxuTmV0U2ltVml6Tm9kZS5wcm90b3R5cGUudXBkYXRlQWRkcmVzc0Rpc3BsYXkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsZXZlbENvbmZpZyA9IE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKTtcblxuICAvLyBJZiB3ZSBhcmUgbmV2ZXIgYXNzaWduZWQgYW4gYWRkcmVzcywgZG9uJ3QgdHJ5IHRvIHNob3cgb25lLlxuICAvLyBJbiBicm9hZGNhc3QgbW9kZSB3ZSB3aWxsIGJlIGFzc2lnbmVkIGFkZHJlc3NlcyBidXQgbmV2ZXIgdXNlIHRoZW0sIHNvXG4gIC8vICAgdGhleSBzaG91bGQgYmUgaGlkZGVuLlxuICAvLyBSb3V0ZXJzIG5ldmVyIHNob3cgdGhlaXIgYWRkcmVzcy5cbiAgaWYgKHRoaXMuYWRkcmVzc18gPT09IHVuZGVmaW5lZCB8fCBsZXZlbENvbmZpZy5icm9hZGNhc3RNb2RlIHx8IHRoaXMuaXNSb3V0ZXIpIHtcbiAgICB0aGlzLmFkZHJlc3NHcm91cF8uaGlkZSgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuYWRkcmVzc0dyb3VwXy5zaG93KCk7XG4gIGlmICh0aGlzLmRuc01vZGVfID09PSBEbnNNb2RlLk5PTkUpIHtcbiAgICB0aGlzLmFkZHJlc3NUZXh0Xy50ZXh0KHRoaXMuYWRkcmVzc18gIT09IHVuZGVmaW5lZCA/IHRoaXMuYWRkcmVzc18gOiAnPycpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuYWRkcmVzc1RleHRfLnRleHQodGhpcy5pc0xvY2FsTm9kZSB8fCB0aGlzLmlzRG5zTm9kZSA/IHRoaXMuYWRkcmVzc18gOiAnPycpO1xuICB9XG4gIHRoaXMucmVzaXplQWRkcmVzc0JveF8oKTtcbn07XG4iLCIvKipcbiAqIEBvdmVydmlldyBCYXNlIHR5cGUgZm9yIHZpc2libGUgZWxlbWVudHMgaW4gdGhlIHZpc3VhbGl6YXRpb24uXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgalF1ZXJ5U3ZnRWxlbWVudCA9IHJlcXVpcmUoJy4vTmV0U2ltVXRpbHMnKS5qUXVlcnlTdmdFbGVtZW50O1xudmFyIHR3ZWVucyA9IHJlcXVpcmUoJy4vdHdlZW5zJyk7XG5cbi8qKlxuICogQSBWaXpFbGVtZW50IGlzIGFuIG9iamVjdCB0aGF0ICBoYXMgYSByZXByZXNlbnRhdGlvbiBpbiB0aGUgbmV0d29ya1xuICogdmlzdWFsaXphdGlvbi4gIEl0cyByb2xlIGlzIHRvIG1haW50YWluIHRoYXQgdmlzdWFsIHJlcHJlc2VudGF0aW9uLlxuICogQSBWaXpFbGVtZW50IGhhcyBoZWxwZXJzIGZvciBwb3NpdGlvbmluZywgc2NhbGluZyBhbmQgdHdlZW5pbmcuXG4gKiBFdmVyeSBWaXpFbGVtZW50IGhhcyBhIHJvb3QgZWxlbWVudCB3aGljaCBpcyBhIDxnPiB0YWcsIGFuIFNWRyBcImdyb3VwXCJcbiAqIHRoYXQgY29udGFpbnMgdGhlIG90aGVyIGNvbXBvbmVudHMgdGhhdCB3aWxsIGFjdHVhbGx5IGRyYXcuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBOZXRTaW1WaXpFbGVtZW50ID0gbW9kdWxlLmV4cG9ydHMgPSAgZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRoaXMucG9zWCA9IDA7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLnBvc1kgPSAwO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5zY2FsZSA9IDE7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5pc0ZvcmVncm91bmQgPSBmYWxzZTtcblxuICAvKipcbiAgICogUm9vdCBTVkcgPGc+IChncm91cCkgZWxlbWVudCBmb3IgdGhpcyBvYmplY3QuXG4gICAqIEB0eXBlIHtqUXVlcnl9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnJvb3RHcm91cF8gPSBqUXVlcnlTdmdFbGVtZW50KCdnJyk7XG5cbiAgLyoqXG4gICAqIFNldCBvZiB0d2VlbnMgd2Ugc2hvdWxkIGN1cnJlbnRseSBiZSBydW5uaW5nIG9uIHRoaXMgbm9kZS5cbiAgICogUHJvY2Vzc2VkIGJ5IHRpY2soKVxuICAgKiBAdHlwZSB7QXJyYXkuPGV4cG9ydHMuVHdlZW5WYWx1ZVRvPn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMudHdlZW5zXyA9IFtdO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuaXNEZWFkXyA9IGZhbHNlO1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7alF1ZXJ5fSB3cmFwcGVyIGFyb3VuZCByb290IDxnPiBlbGVtZW50XG4gKi9cbk5ldFNpbVZpekVsZW1lbnQucHJvdG90eXBlLmdldFJvb3QgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLnJvb3RHcm91cF87XG59O1xuXG4vKipcbiAqIEJlZ2lucyB0aGUgcHJvY2VzcyBvZiBkZXN0cm95aW5nIHRoaXMgVml6RWxlbWVudC4gIE9uY2Ugc3RhcnRlZCwgdGhpc1xuICogcHJvY2VzcyBjYW5ub3QgYmUgc3RvcHBlZC5cbiAqIFRoaXMgbWV0aG9kIGNhbiBiZSBvdmVycmlkZGVuIHRvIHRyaWdnZXIgYW4gXCJvbi1kZWF0aFwiIGFuaW1hdGlvbi5cbiAqL1xuTmV0U2ltVml6RWxlbWVudC5wcm90b3R5cGUua2lsbCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5pc0RlYWRfID0gdHJ1ZTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge2Jvb2xlYW59IHdoZXRoZXIgdGhpcyBlbnRpdHkgaXMgZG9uZSB3aXRoIGl0cyBkZWF0aCBhbmltYXRpb25cbiAqICAgICAgICAgIGFuZCBpcyByZWFkeSB0byBiZSBjbGVhbmVkIHVwIGJ5IHRoZSB2aXN1YWxpemF0aW9uIG1hbmFnZXIuXG4gKiAgICAgICAgICBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBoZXJlIHJldHVybnMgVFJVRSBhcyBzb29uIGFzIGtpbGwoKVxuICogICAgICAgICAgaXMgY2FsbGVkIGFuZCBhbGwgYW5pbWF0aW9ucyBhcmUgY29tcGxldGVkLlxuICovXG5OZXRTaW1WaXpFbGVtZW50LnByb3RvdHlwZS5pc0RlYWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmlzRGVhZF8gJiYgdGhpcy50d2VlbnNfLmxlbmd0aCA9PT0gMDtcbn07XG5cbi8qKlxuICogQHJldHVybnMge2Jvb2xlYW59IHdoZXRoZXIgdGhpcyBlbnRpdHkgaXMgcGxheWluZyBpdHMgZmluYWwgYW5pbWF0aW9uXG4gKiAgICAgICAgICBhbmQgd2lsbCBiZSByZWFkeSB0byBiZSBjbGVhbmVkIHVwIGJ5IHRoZSB2aXN1YWxpemF0aW9uIG1hbmFnZXJcbiAqICAgICAgICAgIHNvb24uXG4gKi9cbk5ldFNpbVZpekVsZW1lbnQucHJvdG90eXBlLmlzRHlpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmlzRGVhZF8gJiYgdGhpcy50d2VlbnNfLmxlbmd0aCA+IDA7XG59O1xuXG4vKipcbiAqIFVwZGF0ZSBhbGwgb2YgdGhlIHR3ZWVucyBjdXJyZW50bHkgcnVubmluZyBvbiB0aGlzIFZpekVsZW1lbnQgKHdoaWNoIHdpbGxcbiAqIHByb2JhYmx5IG1vZGlmeSBpdHMgcHJvcGVydGllcykgYW5kIHRoZW4gcmVtb3ZlIGFueSB0d2VlbnMgdGhhdCBhcmUgY29tcGxldGVkXG4gKiBmcm9tIHRoZSBsaXN0LlxuICovXG5OZXRTaW1WaXpFbGVtZW50LnByb3RvdHlwZS50aWNrID0gZnVuY3Rpb24gKCkge1xufTtcblxuLyoqXG4gKiBVcGRhdGUgdGhlIHJvb3QgZ3JvdXAncyBwcm9wZXJ0aWVzIHRvIHJlZmxlY3Qgb3VyIGN1cnJlbnQgcG9zaXRpb25cbiAqIGFuZCBzY2FsZS5cbiAqIEBwYXJhbSB7UnVuTG9vcC5DbG9ja30gW2Nsb2NrXSAtIHNvbWV0aW1lcyBvbWl0dGVkIGR1cmluZyBzZXR1cFxuICovXG5OZXRTaW1WaXpFbGVtZW50LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoY2xvY2spIHtcbiAgaWYgKCFjbG9jaykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGNhY2hlIGluaXRpYWwgc2V0dGluZ3MgaGVyZTsgd2UgY2hlY2sgdGhlbSBsYXRlciB0byBzZWUgaWYgYW55dGhpbmdcbiAgLy8gaGFzIGFjdHVhbGx5IGNoYW5nZWRcbiAgdmFyIHBvc1ggPSB0aGlzLnBvc1g7XG4gIHZhciBwb3NZID0gdGhpcy5wb3NZO1xuICB2YXIgc2NhbGUgPSB0aGlzLnNjYWxlO1xuXG4gIC8vIFVwZGF0ZSB0d2VlbnMgaW4gdGhlIHJlbmRlciBsb29wIHNvIHRoZXkgYXJlIHZlcnkgc21vb3RoXG4gIHRoaXMudHdlZW5zXy5mb3JFYWNoKGZ1bmN0aW9uICh0d2Vlbikge1xuICAgIHR3ZWVuLnRpY2soY2xvY2spO1xuICB9KTtcbiAgdGhpcy50d2VlbnNfID0gdGhpcy50d2VlbnNfLmZpbHRlcihmdW5jdGlvbiAodHdlZW4pIHtcbiAgICByZXR1cm4gIXR3ZWVuLmlzRmluaXNoZWQ7XG4gIH0pO1xuXG4gIC8vIElmIG5vdGhpbmcgaGFzIGNoYW5nZWQsIGRvbid0IGJvdGhlciB0byB1cGRhdGUgdHJhbnNmb3JtXG4gIGlmIChwb3NYICE9PSB0aGlzLnBvc1ggfHxcbiAgICAgIHBvc1kgIT09IHRoaXMucG9zWSB8fFxuICAgICAgc2NhbGUgIT09IHRoaXMuc2NhbGUpIHtcbiAgICB2YXIgdHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgnICsgdGhpcy5wb3NYICsgJyAnICsgdGhpcy5wb3NZICsgJyknICtcbiAgICAgICAgJyBzY2FsZSgnICsgdGhpcy5zY2FsZSArICcpJztcbiAgICB0aGlzLnJvb3RHcm91cF8uYXR0cigndHJhbnNmb3JtJywgdHJhbnNmb3JtKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzRm9yZWdyb3VuZFxuICovXG5OZXRTaW1WaXpFbGVtZW50LnByb3RvdHlwZS5vbkRlcHRoQ2hhbmdlID0gZnVuY3Rpb24gKGlzRm9yZWdyb3VuZCkge1xuICB0aGlzLmlzRm9yZWdyb3VuZCA9IGlzRm9yZWdyb3VuZDtcbn07XG5cbi8qKlxuICogVGhyb3cgYXdheSBhbGwgZXhpc3RpbmcgdHdlZW5zIG9uIHRoaXMgb2JqZWN0LlxuICovXG5OZXRTaW1WaXpFbGVtZW50LnByb3RvdHlwZS5zdG9wQWxsQW5pbWF0aW9uID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnR3ZWVuc18ubGVuZ3RoID0gMDtcbn07XG5cbi8qKlxuICogU3RvcHMgYW55IGV4aXN0aW5nIG1vdGlvbiBhbmltYXRpb24gYW5kIGJlZ2lucyBhbiBhbmltYXRlZCBtb3Rpb24gdG8gdGhlXG4gKiBnaXZlbiBjb29yZGluYXRlcy4gIE5vdGU6IFRoaXMgYW5pbWF0ZXMgdGhlIFZpekVsZW1lbnQncyByb290IGdyb3VwLlxuICogQHBhcmFtIHtudW1iZXJ9IG5ld1ggZ2l2ZW4gaW4gU1ZHIHBvaW50c1xuICogQHBhcmFtIHtudW1iZXJ9IG5ld1kgZ2l2ZW4gaW4gU1ZHIHBvaW50c1xuICogQHBhcmFtIHtudW1iZXJ9IFtkdXJhdGlvbj02MDBdIGluIG1pbGxpc2Vjb25kc1xuICogQHBhcmFtIHtUd2VlbkZ1bmN0aW9ufSBbdHdlZW5GdW5jdGlvbj1saW5lYXJdXG4gKi9cbk5ldFNpbVZpekVsZW1lbnQucHJvdG90eXBlLnR3ZWVuVG9Qb3NpdGlvbiA9IGZ1bmN0aW9uIChuZXdYLCBuZXdZLCBkdXJhdGlvbixcbiAgICB0d2VlbkZ1bmN0aW9uKSB7XG4gIC8vIERvbid0IGFjY2VwdCBuZXcgYW5pbWF0aW9uIGNvbW1hbmRzIGlmIHdlJ3ZlIGFscmVhZHkgYmVlbiBraWxsZWRcbiAgaWYgKHRoaXMuaXNEeWluZygpIHx8IHRoaXMuaXNEZWFkKCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBSZW1vdmUgYW55IGV4aXN0aW5nIHR3ZWVucyBjb250cm9sbGluZyBwb3NYIG9yIHBvc1lcbiAgdGhpcy5yZW1vdmVBbGxUd2VlbnNPblByb3BlcnRpZXMoWydwb3NYJywgJ3Bvc1knXSk7XG5cbiAgLy8gQWRkIHR3byBuZXcgdHdlZW5zLCBvbmUgZm9yIGVhY2ggYXhpc1xuICBpZiAoZHVyYXRpb24gPiAwKSB7XG4gICAgdGhpcy50d2VlbnNfLnB1c2gobmV3IHR3ZWVucy5Ud2VlblZhbHVlVG8odGhpcywgJ3Bvc1gnLCBuZXdYLCBkdXJhdGlvbixcbiAgICAgICAgdHdlZW5GdW5jdGlvbikpO1xuICAgIHRoaXMudHdlZW5zXy5wdXNoKG5ldyB0d2VlbnMuVHdlZW5WYWx1ZVRvKHRoaXMsICdwb3NZJywgbmV3WSwgZHVyYXRpb24sXG4gICAgICAgIHR3ZWVuRnVuY3Rpb24pKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnBvc1ggPSBuZXdYO1xuICAgIHRoaXMucG9zWSA9IG5ld1k7XG4gIH1cblxufTtcblxuLyoqXG4gKiBBbGlhcyBmb3IgY2FsbGluZyB0d2VlblRvUG9zaXRpb24gd2l0aCBhIHplcm8gZHVyYXRpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSBuZXdYIGdpdmVuIGluIFNWRyBwb2ludHNcbiAqIEBwYXJhbSB7bnVtYmVyfSBuZXdZIGdpdmVuIGluIFNWRyBwb2ludHNcbiAqL1xuTmV0U2ltVml6RWxlbWVudC5wcm90b3R5cGUuc25hcFRvUG9zaXRpb24gPSBmdW5jdGlvbiAobmV3WCwgbmV3WSkge1xuICB0aGlzLnR3ZWVuVG9Qb3NpdGlvbihuZXdYLCBuZXdZLCAwKTtcbn07XG5cbi8qKlxuICogU3RvcHMgYW55IGV4aXN0aW5nIGFuaW1hdGlvbiBvZiB0aGUgZW50aXR5J3Mgc2NhbGUgYW5kIGJlZ2lucyBhbiBhbmltYXRlZFxuICogY2hhbmdlIHRvIHRoZSBnaXZlbiB0YXJnZXQgc2NhbGUgdmFsdWUuICBOb3RlOiB0aGlzIGFuaW1hdGVzIHRoZSBWaXpFbGVtZW50J3NcbiAqIHJvb3QgZ3JvdXAuXG4gKiBAcGFyYW0ge251bWJlcn0gbmV3U2NhbGUgd2hlcmUgMS4wIGlzIDEwMCUgKHVuc2NhbGVkKVxuICogQHBhcmFtIHtudW1iZXJ9IFtkdXJhdGlvbj02MDBdIGluIG1pbGxpc2Vjb25kc1xuICogQHBhcmFtIHtUd2VlbkZ1bmN0aW9ufSBbdHdlZW5GdW5jdGlvbj1saW5lYXJdXG4gKi9cbk5ldFNpbVZpekVsZW1lbnQucHJvdG90eXBlLnR3ZWVuVG9TY2FsZSA9IGZ1bmN0aW9uIChuZXdTY2FsZSwgZHVyYXRpb24sXG4gICAgdHdlZW5GdW5jdGlvbikge1xuICAvLyBSZW1vdmUgZXhpc3Rpbmcgc2NhbGUgdHdlZW5zXG4gIHRoaXMucmVtb3ZlQWxsVHdlZW5zT25Qcm9wZXJ0eSgnc2NhbGUnKTtcblxuICAvLyBPbiBub256ZXJvIGR1cmF0aW9uLCBhZGQgdHdlZW4gdG8gdGFyZ2V0IHNjYWxlLiAgT3RoZXJ3aXNlIGp1c3Qgc2V0IGl0LlxuICBpZiAoZHVyYXRpb24gPiAwKSB7XG4gICAgdGhpcy50d2VlbnNfLnB1c2gobmV3IHR3ZWVucy5Ud2VlblZhbHVlVG8odGhpcywgJ3NjYWxlJywgbmV3U2NhbGUsIGR1cmF0aW9uLFxuICAgICAgICB0d2VlbkZ1bmN0aW9uKSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zY2FsZSA9IG5ld1NjYWxlO1xuICB9XG59O1xuXG5OZXRTaW1WaXpFbGVtZW50LnByb3RvdHlwZS5kb0FmdGVyRGVsYXkgPSBmdW5jdGlvbiAoZGVsYXksIGNhbGxiYWNrKSB7XG4gIGlmIChkZWxheSA+IDApIHtcbiAgICB0aGlzLnR3ZWVuc18ucHVzaChuZXcgdHdlZW5zLkRvQWZ0ZXJEZWxheSh0aGlzLCBkZWxheSwgY2FsbGJhY2spKTtcbiAgfSBlbHNlIHtcbiAgICBjYWxsYmFjaygpO1xuICB9XG59O1xuXG4vKipcbiAqIFJlbW92ZSAoc3RvcCkgYWxsIGFjdGl2ZSB0d2VlbnMgdGhhdCBjb250cm9sIHRoZSBnaXZlbiBwcm9wZXJ0eSBvbiB0aGlzXG4gKiB2aXN1YWxpemF0aW9uIGVudGl0eS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eU5hbWVcbiAqL1xuTmV0U2ltVml6RWxlbWVudC5wcm90b3R5cGUucmVtb3ZlQWxsVHdlZW5zT25Qcm9wZXJ0eSA9IGZ1bmN0aW9uIChwcm9wZXJ0eU5hbWUpIHtcbiAgdGhpcy5yZW1vdmVBbGxUd2VlbnNPblByb3BlcnRpZXMoW3Byb3BlcnR5TmFtZV0pO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgKHN0b3ApIGFsbCBhY3RpdmUgdHdlZW5zIHRoYXQgY29udHJvbCBhbnkgb2YgdGhlIGdpdmVuIHByb3BlcnRpZXNcbiAqIG9uIHRoaXMgdmlzdWFsaXphdGlvbiBlbnRpdHkuXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBwcm9wZXJ0eU5hbWVzXG4gKi9cbk5ldFNpbVZpekVsZW1lbnQucHJvdG90eXBlLnJlbW92ZUFsbFR3ZWVuc09uUHJvcGVydGllcyA9IGZ1bmN0aW9uIChwcm9wZXJ0eU5hbWVzKSB7XG4gIHRoaXMudHdlZW5zXyA9IHRoaXMudHdlZW5zXy5maWx0ZXIoZnVuY3Rpb24gKHR3ZWVuKSB7XG4gICAgdmFyIHRhcmdldHNUaGlzRW50aXR5ID0gdHdlZW4udGFyZ2V0ID09PSB0aGlzO1xuICAgIHZhciBpc1JlbW92YWJsZVByb3BlcnR5ID0gcHJvcGVydHlOYW1lcy5zb21lKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXR1cm4gdHdlZW4ucHJvcGVydHlOYW1lID09PSBuYW1lO1xuICAgIH0pO1xuXG4gICAgLy8gSW52ZXJ0IGZvciBmaWx0ZXIoKSBiZWNhdXNlIHdlIHdhbnQgdG8ga2VlcCBldmVyeXRoaW5nIEJVVCB0aGUgbWF0Y2hlZFxuICAgIC8vIHByb3BlcnRpZXNcbiAgICByZXR1cm4gISh0YXJnZXRzVGhpc0VudGl0eSAmJiBpc1JlbW92YWJsZVByb3BlcnR5KTtcbiAgfSwgdGhpcyk7XG59O1xuXG4vKipcbiAqIEFsaWFzIGZvciBjYWxsaW5nIHR3ZWVuVG9TY2FsZSB3aXRoIGEgemVybyBkdXJhdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBuZXdTY2FsZSB3aGVyZSAxLjAgaXMgMTAwJSAodW5zY2FsZWQpXG4gKi9cbk5ldFNpbVZpekVsZW1lbnQucHJvdG90eXBlLnNuYXBUb1NjYWxlID0gZnVuY3Rpb24gKG5ld1NjYWxlKSB7XG4gIHRoaXMudHdlZW5Ub1NjYWxlKG5ld1NjYWxlLCAwKTtcbn07XG4iLCIvKipcbiAqIEBvdmVydmlldyBUd2VlbiBmdW5jdGlvbnMgdXNlZCB0byBhbmltYXRlIHZpc3VhbGl6YXRpb24gZWxlbWVudHMuXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdmFsdWVPciA9IHJlcXVpcmUoJy4uL3V0aWxzJykudmFsdWVPcjtcblxuLyoqXG4gKiBEZWZhdWx0IHR3ZWVuIGR1cmF0aW9uIGluIG1pbGxpc2Vjb25kc1xuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdFxuICovXG52YXIgREVGQVVMVF9UV0VFTl9EVVJBVElPTiA9IDYwMDtcblxuLyoqXG4gKiBBIGZvdXItYXJnIGludGVycG9sYXRpb24gZnVuY3Rpb24uXG4gKlxuICogQHR5cGVkZWYge2Z1bmN0aW9ufSBUd2VlbkZ1bmN0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gdCAtIGN1cnJlbnQgVGltZSwgaW4gbWlsbGlzZWNvbmRzIHNpbmNlIHR3ZWVuIGJlZ2FuXG4gKiBAcGFyYW0ge251bWJlcn0gYiAtIEJlZ2luIHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gYyAtIGZpbmFsIENoYW5nZSBpbiB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IGQgLSB0b3RhbCB0d2VlbiBEdXJhdGlvblxuICogQHJldHVybnMge251bWJlcn0gdGhlIGludGVycG9sYXRlZCB2YWx1ZSBmb3IgdGhlIGN1cnJlbnQgdGltZVxuICovXG5cbi8qKlxuICogSW50ZXJwb2xhdGVzIHdpdGggYSBsaXR0bGUgYmFjay1hbmQtZm9ydGggb3ZlciB0aGUgdGFyZ2V0IHZhbHVlIGF0IHRoZSBlbmQuXG4gKiBAdHlwZSB7VHdlZW5GdW5jdGlvbn1cbiAqL1xuZXhwb3J0cy5lYXNlT3V0RWxhc3RpYyA9IGZ1bmN0aW9uICh0LCBiLCBjLCBkKSB7XG4gIHZhciBzLCBwLCBhO1xuICBzPTEuNzAxNTg7XG4gIHA9MDtcbiAgYT1jO1xuICBpZiAodD09PTApIHtcbiAgICByZXR1cm4gYjtcbiAgfVxuICBpZiAoKHQvPWQpPT09MSkge1xuICAgIHJldHVybiBiK2M7XG4gIH1cbiAgaWYgKCFwKSB7XG4gICAgcD1kKjAuMztcbiAgfVxuICBpZiAoYSA8IE1hdGguYWJzKGMpKSB7XG4gICAgYT1jO1xuICAgIHM9cC80O1xuICB9IGVsc2Uge1xuICAgIHMgPSBwLygyKk1hdGguUEkpICogTWF0aC5hc2luIChjL2EpO1xuICB9XG4gIHJldHVybiBhKk1hdGgucG93KDIsLTEwKnQpICogTWF0aC5zaW4oICh0KmQtcykqKDIqTWF0aC5QSSkvcCApICsgYyArIGI7XG59O1xuXG4vKipcbiAqIEludGVycG9sYXRlcywgYWNjZWxlcmF0aW5nIGFzIGl0IGdvZXMuXG4gKiBAdHlwZSB7VHdlZW5GdW5jdGlvbn1cbiAqL1xuZXhwb3J0cy5lYXNlSW5RdWFkID0gZnVuY3Rpb24gKHQsIGIsIGMsIGQpIHtcbiAgcmV0dXJuIGMqKHQvPWQpKnQgKyBiO1xufTtcblxuLyoqXG4gKiBJbnRlcnBvbGF0ZXMsIGRlY2VsZXJhdGluZyBhcyBpdCBnb2VzLlxuICogQHR5cGUge1R3ZWVuRnVuY3Rpb259XG4gKi9cbmV4cG9ydHMuZWFzZU91dFF1YWQgPSBmdW5jdGlvbiAodCwgYiwgYywgZCkge1xuICByZXR1cm4gLWMqKHQvPWQpKih0LTIpICsgYjtcbn07XG5cbmV4cG9ydHMuZWFzZUluT3V0UXVhZCA9IGZ1bmN0aW9uICh0LCBiLCBjLCBkKSB7XG4gIGlmICgodC89ZC8yKSA8IDEpIHtcbiAgICByZXR1cm4gYy8yKnQqdCArIGI7XG4gIH1cbiAgcmV0dXJuIC1jLzIgKiAoKC0tdCkqKHQtMikgLSAxKSArIGI7XG59O1xuXG4vKipcbiAqIExpbmVhciBpbnRlcnBvbGF0aW9uXG4gKiBAdHlwZSB7VHdlZW5GdW5jdGlvbn1cbiAqL1xuZXhwb3J0cy5saW5lYXIgPSBmdW5jdGlvbiAodCwgYiwgYywgZCkge1xuICByZXR1cm4gYyAqICh0IC8gZCkgKyBiO1xufTtcblxuLyoqXG4gKiBXcmFwcyBhIHR3ZWVuIG1ldGhvZCB3aXRoIHRoZSBzdGF0ZSBpdCBuZWVkcyB0byBhbmltYXRlIGEgcHJvcGVydHkuXG4gKiBPbiBjcmVhdGlvbiwgYXNzdW1lcyB0aGF0IHByb3BlcnR5J3MgY3VycmVudCB2YWx1ZSBmb3Igc3RhcnQgdmFsdWVzLlxuICogTXVzdCBiZSB0aWNrZWQgdG8gcHJvZ3Jlc3MgdG93YXJkIGNvbXBsZXRpb24uXG4gKlxuICogQHBhcmFtIHshT2JqZWN0fSB0YXJnZXQgLSBUaGUgb2JqZWN0IG93bmluZyB0aGUgcHJvcGVydHkgd2Ugd2FudCB0byBhbmltYXRlXG4gKiBAcGFyYW0geyFzdHJpbmd9IHByb3BlcnR5TmFtZSAtIE11c3QgYmUgYSB2YWxpZCBwcm9wZXJ0eSBvbiB0YXJnZXRcbiAqIEBwYXJhbSB7IW51bWJlcn0gZW5kVmFsdWUgLSBUaGUgZGVzaXJlZCBmaW5hbCB2YWx1ZSBvZiB0aGUgcHJvcGVydHlcbiAqIEBwYXJhbSB7bnVtYmVyfSBbZHVyYXRpb25dIC0gSG93IGxvbmcgdGhlIHR3ZWVuIHNob3VsZCB0YWtlIGluIG1pbGxpc2Vjb25kcyxcbiAqICAgICAgICBkZWZhdWx0IDYwMG1zXG4gKiBAcGFyYW0ge1R3ZWVuRnVuY3Rpb259IFt0d2VlbkZ1bmN0aW9uXSAtIEEgdHdlZW4gZnVuY3Rpb24sIGRlZmF1bHQgbGluZWFyXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZXhwb3J0cy5Ud2VlblZhbHVlVG8gPSBmdW5jdGlvbiAodGFyZ2V0LCBwcm9wZXJ0eU5hbWUsIGVuZFZhbHVlLCBkdXJhdGlvbixcbiAgICB0d2VlbkZ1bmN0aW9uKSB7XG4gIC8qKlxuICAgKiBXaWxsIGJlIHNldCB0byBUUlVFIHdoZW4gdHdlZW4gaXMgY29tcGxldGVkLlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuaXNGaW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBXaWxsIGJlIHNldCBvbiBvdXIgZmlyc3QgdGljay5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuc3RhcnRUaW1lXyA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5wcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eU5hbWU7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtUd2VlbkZ1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy50d2VlbkZ1bmN0aW9uXyA9IHZhbHVlT3IodHdlZW5GdW5jdGlvbiwgZXhwb3J0cy5saW5lYXIpO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5zdGFydFZhbHVlXyA9IHRhcmdldFtwcm9wZXJ0eU5hbWVdO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5kZWx0YVZhbHVlXyA9IGVuZFZhbHVlIC0gdGhpcy5zdGFydFZhbHVlXztcblxuICAvKipcbiAgICogRHVyYXRpb24gb2YgdHdlZW4gaW4gbWlsbGlzZWNvbmRzXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmR1cmF0aW9uXyA9IHZhbHVlT3IoZHVyYXRpb24sIERFRkFVTFRfVFdFRU5fRFVSQVRJT04pO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1J1bkxvb3AuY2xvY2t9IGNsb2NrXG4gKi9cbmV4cG9ydHMuVHdlZW5WYWx1ZVRvLnByb3RvdHlwZS50aWNrID0gZnVuY3Rpb24gKGNsb2NrKSB7XG4gIGlmICh0aGlzLnN0YXJ0VGltZV8gPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuc3RhcnRUaW1lXyA9IGNsb2NrLnRpbWU7XG4gIH1cblxuICB2YXIgdGltZVNpbmNlU3RhcnQgPSBjbG9jay50aW1lIC0gdGhpcy5zdGFydFRpbWVfO1xuXG4gIGlmICh0aGlzLmRlbHRhVmFsdWVfICE9PSAwKSB7XG4gICAgdGhpcy50YXJnZXRbdGhpcy5wcm9wZXJ0eU5hbWVdID0gdGhpcy50d2VlbkZ1bmN0aW9uXyhcbiAgICAgICAgdGltZVNpbmNlU3RhcnQsXG4gICAgICAgIHRoaXMuc3RhcnRWYWx1ZV8sXG4gICAgICAgIHRoaXMuZGVsdGFWYWx1ZV8sXG4gICAgICAgIHRoaXMuZHVyYXRpb25fXG4gICAgKTtcbiAgfVxuXG4gIGlmICh0aW1lU2luY2VTdGFydCA+PSB0aGlzLmR1cmF0aW9uXykge1xuICAgIHRoaXMudGFyZ2V0W3RoaXMucHJvcGVydHlOYW1lXSA9IHRoaXMuc3RhcnRWYWx1ZV8gKyB0aGlzLmRlbHRhVmFsdWVfO1xuICAgIHRoaXMuaXNGaW5pc2hlZCA9IHRydWU7XG4gIH1cbn07XG5cbmV4cG9ydHMuRG9BZnRlckRlbGF5ID0gZnVuY3Rpb24gKHRhcmdldCwgZHVyYXRpb24sIGNhbGxiYWNrKSB7XG4gIC8qKlxuICAgKiBXaWxsIGJlIHNldCB0byBUUlVFIHdoZW4gdHdlZW4gaXMgY29tcGxldGVkLlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuaXNGaW5pc2hlZCA9IGZhbHNlO1xuXG5cbiAgLyoqXG4gICAqIFdpbGwgYmUgc2V0IG9uIG91ciBmaXJzdCB0aWNrLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5zdGFydFRpbWVfID0gdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnByb3BlcnR5TmFtZSA9IG51bGw7XG5cbiAgLyoqXG4gICAqIER1cmF0aW9uIG9mIHR3ZWVuIGluIG1pbGxpc2Vjb25kc1xuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5kdXJhdGlvbl8gPSBkdXJhdGlvbjtcblxuICAvKipcbiAgICogRnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBkdXJhdGlvbiBoYXMgZWxhcHNlZC5cbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKi9cbiAgdGhpcy5jYWxsYmFja18gPSBjYWxsYmFjaztcbn07XG5cbi8qKlxuICogQHBhcmFtIHtSdW5Mb29wLmNsb2NrfSBjbG9ja1xuICovXG5leHBvcnRzLkRvQWZ0ZXJEZWxheS5wcm90b3R5cGUudGljayA9IGZ1bmN0aW9uIChjbG9jaykge1xuICBpZiAodGhpcy5zdGFydFRpbWVfID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLnN0YXJ0VGltZV8gPSBjbG9jay50aW1lO1xuICB9XG5cbiAgdmFyIHRpbWVTaW5jZVN0YXJ0ID0gY2xvY2sudGltZSAtIHRoaXMuc3RhcnRUaW1lXztcbiAgaWYgKHRpbWVTaW5jZVN0YXJ0ID49IHRoaXMuZHVyYXRpb25fKSB7XG4gICAgdGhpcy5jYWxsYmFja18oKTtcbiAgICB0aGlzLmlzRmluaXNoZWQgPSB0cnVlO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHM9IChmdW5jdGlvbigpIHtcbiAgdmFyIHQgPSBmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzLCBmaWx0ZXJzLCBlc2NhcGVcbi8qKi8pIHtcbmVzY2FwZSA9IGVzY2FwZSB8fCBmdW5jdGlvbiAoaHRtbCl7XG4gIHJldHVybiBTdHJpbmcoaHRtbClcbiAgICAucmVwbGFjZSgvJig/IVxcdys7KS9nLCAnJmFtcDsnKVxuICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXG4gICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbn07XG52YXIgYnVmID0gW107XG53aXRoIChsb2NhbHMgfHwge30pIHsgKGZ1bmN0aW9uKCl7IFxuIGJ1Zi5wdXNoKCcnKTsxO1xuLyoqXG4gKiBXaGV0aGVyIHRoZSBibHVycmVkIGJhY2tncm91bmQgbGF5ZXIgc2hvdWxkIGJlIHZpc2libGUuXG4gKiBAbmFtZSBzaG93QmFja2dyb3VuZFxuICogQHR5cGUge2Jvb2xlYW59XG4gKi9cbjsgYnVmLnB1c2goJ1xcbjxzdmcgdmVyc2lvbj1cIjEuMVwiIHdpZHRoPVwiMjk4XCIgaGVpZ2h0PVwiMjk4XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPlxcblxcbiAgJyk7MTA7IGlmIChzaG93QmFja2dyb3VuZCkgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgPGZpbHRlciBpZD1cImJhY2tncm91bmRCbHVyXCI+XFxuICAgICAgPGZlR2F1c3NpYW5CbHVyIGluPVwiU291cmNlR3JhcGhpY1wiIHN0ZERldmlhdGlvbj1cIjVcIiAvPlxcbiAgICAgIDxmZUNvbXBvbmVudFRyYW5zZmVyPlxcbiAgICAgICAgPGZlRnVuY0Egc2xvcGU9XCIwLjVcIiB0eXBlPVwibGluZWFyXCI+PC9mZUZ1bmNBPlxcbiAgICAgIDwvZmVDb21wb25lbnRUcmFuc2Zlcj5cXG4gICAgPC9maWx0ZXI+XFxuICAnKTsxNzsgfSA7IGJ1Zi5wdXNoKCdcXG5cXG4gIDxnIGlkPVwiY2VudGVyZWQtZ3JvdXBcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMTUwLDE1MClcIj5cXG4gICAgPGcgaWQ9XCJiYWNrZ3JvdW5kLWdyb3VwXCJcXG4gICAgICAgJyk7MjE7IGlmIChzaG93QmFja2dyb3VuZCkgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgICBmaWx0ZXI9XCJ1cmwoI2JhY2tncm91bmRCbHVyKVwiXFxuICAgICAgICcpOzIzOyB9IGVsc2UgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgICB2aXNpYmlsaXR5PVwiaGlkZGVuXCJcXG4gICAgICAgJyk7MjU7IH0gOyBidWYucHVzaCgnXFxuICAgICAgICA+PC9nPlxcblxcbiAgICA8ZyBpZD1cImZvcmVncm91bmQtZ3JvdXBcIj48L2c+XFxuICA8L2c+XFxuPC9zdmc+XFxuJyk7IH0pKCk7XG59IFxucmV0dXJuIGJ1Zi5qb2luKCcnKTtcbn07XG4gIHJldHVybiBmdW5jdGlvbihsb2NhbHMpIHtcbiAgICByZXR1cm4gdChsb2NhbHMsIHJlcXVpcmUoXCJlanNcIikuZmlsdGVycyk7XG4gIH1cbn0oKSk7IiwiLyoqXG4gKiBAb3ZlcnZpZXcgVUkgY29udHJvbGxlciBmb3IgdGFicyBhcmVhIGluIGxlZnQgY29sdW1uXG4gKiAgICAgICAgICAgRGlyZWN0bHkgY29udHJvbHMgdGhlIGluc3RydWN0aW9ucyB0YWIsIG90aGVycyBhcmUgZGVsZWdhdGVkLlxuICogQHNlZSBOZXRTaW1NeURldmljZVRhYlxuICogQHNlZSBOZXRTaW1Sb3V0ZXJUYWJcbiAqIEBzZWUgTmV0U2ltRG5zVGFiXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgYnVpbGRNYXJrdXAgPSByZXF1aXJlKCcuL05ldFNpbVRhYnNDb21wb25lbnQuaHRtbC5lanMnKTtcbnZhciBOZXRTaW1Sb3V0ZXJUYWIgPSByZXF1aXJlKCcuL05ldFNpbVJvdXRlclRhYicpO1xudmFyIE5ldFNpbU15RGV2aWNlVGFiID0gcmVxdWlyZSgnLi9OZXRTaW1NeURldmljZVRhYicpO1xudmFyIE5ldFNpbURuc1RhYiA9IHJlcXVpcmUoJy4vTmV0U2ltRG5zVGFiJyk7XG52YXIgTmV0U2ltVGFiVHlwZSA9IHJlcXVpcmUoJy4vTmV0U2ltQ29uc3RhbnRzJykuTmV0U2ltVGFiVHlwZTtcbnZhciBzaG91bGRTaG93VGFiID0gcmVxdWlyZSgnLi9OZXRTaW1VdGlscycpLnNob3VsZFNob3dUYWI7XG52YXIgTmV0U2ltR2xvYmFscyA9IHJlcXVpcmUoJy4vTmV0U2ltR2xvYmFscycpO1xuXG4vKipcbiAqIFdyYXBwZXIgY29tcG9uZW50IGZvciB0YWJzIHBhbmVsIG9uIHRoZSByaWdodCBzaWRlIG9mIHRoZSBwYWdlLlxuICogQHBhcmFtIHtqUXVlcnl9IHJvb3REaXZcbiAqIEBwYXJhbSB7UnVuTG9vcH0gcnVuTG9vcFxuICogQHBhcmFtIHtPYmplY3R9IGNhbGxiYWNrc1xuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tzLmNodW5rU2l6ZVNsaWRlckNoYW5nZUNhbGxiYWNrXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja3MubXlEZXZpY2VCaXRSYXRlQ2hhbmdlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrcy5lbmNvZGluZ0NoYW5nZUNhbGxiYWNrXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja3Mucm91dGVyQmFuZHdpZHRoU2xpZGVyQ2hhbmdlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrcy5yb3V0ZXJCYW5kd2lkdGhTbGlkZXJTdG9wQ2FsbGJhY2tcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrcy5yb3V0ZXJNZW1vcnlTbGlkZXJDaGFuZ2VDYWxsYmFja1xuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tzLnJvdXRlck1lbW9yeVNsaWRlclN0b3BDYWxsYmFja1xuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tzLmRuc01vZGVDaGFuZ2VDYWxsYmFja1xuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tzLmJlY29tZURuc0NhbGxiYWNrXG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIE5ldFNpbVRhYnNDb21wb25lbnQgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyb290RGl2LCBydW5Mb29wLCBjYWxsYmFja3MpIHtcbiAgLyoqXG4gICAqIENvbXBvbmVudCByb290LCB3aGljaCB3ZSBmaWxsIHdoZW5ldmVyIHdlIGNhbGwgcmVuZGVyKClcbiAgICogQHR5cGUge2pRdWVyeX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucm9vdERpdl8gPSByb290RGl2O1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7UnVuTG9vcH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucnVuTG9vcF8gPSBydW5Mb29wO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7ZnVuY3Rpb259XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmNodW5rU2l6ZVNsaWRlckNoYW5nZUNhbGxiYWNrXyA9IGNhbGxiYWNrcy5jaHVua1NpemVTbGlkZXJDaGFuZ2VDYWxsYmFjaztcblxuICAvKipcbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5teURldmljZUJpdFJhdGVDaGFuZ2VDYWxsYmFja18gPSBjYWxsYmFja3MubXlEZXZpY2VCaXRSYXRlQ2hhbmdlQ2FsbGJhY2s7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuZW5jb2RpbmdDaGFuZ2VDYWxsYmFja18gPSBjYWxsYmFja3MuZW5jb2RpbmdDaGFuZ2VDYWxsYmFjaztcblxuICAvKipcbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5yb3V0ZXJCYW5kd2lkdGhTbGlkZXJDaGFuZ2VDYWxsYmFja18gPVxuICAgICAgY2FsbGJhY2tzLnJvdXRlckJhbmR3aWR0aFNsaWRlckNoYW5nZUNhbGxiYWNrO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7ZnVuY3Rpb259XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnJvdXRlckJhbmR3aWR0aFNsaWRlclN0b3BDYWxsYmFja18gPVxuICAgICAgY2FsbGJhY2tzLnJvdXRlckJhbmR3aWR0aFNsaWRlclN0b3BDYWxsYmFjaztcblxuICAvKipcbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5yb3V0ZXJNZW1vcnlTbGlkZXJDaGFuZ2VDYWxsYmFja18gPVxuICAgICAgY2FsbGJhY2tzLnJvdXRlck1lbW9yeVNsaWRlckNoYW5nZUNhbGxiYWNrO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7ZnVuY3Rpb259XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnJvdXRlck1lbW9yeVNsaWRlclN0b3BDYWxsYmFja18gPVxuICAgICAgY2FsbGJhY2tzLnJvdXRlck1lbW9yeVNsaWRlclN0b3BDYWxsYmFjaztcblxuICAvKipcbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5kbnNNb2RlQ2hhbmdlQ2FsbGJhY2tfID0gY2FsbGJhY2tzLmRuc01vZGVDaGFuZ2VDYWxsYmFjaztcblxuICAvKipcbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5iZWNvbWVEbnNDYWxsYmFja18gPSBjYWxsYmFja3MuYmVjb21lRG5zQ2FsbGJhY2s7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtOZXRTaW1Sb3V0ZXJUYWJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnJvdXRlclRhYl8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7TmV0U2ltTXlEZXZpY2VUYWJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLm15RGV2aWNlVGFiXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtOZXRTaW1EbnNUYWJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmRuc1RhYl8gPSBudWxsO1xuXG4gIC8vIEluaXRpYWwgcmVuZGVyXG4gIHRoaXMucmVuZGVyKCk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7UnVuTG9vcH0gcnVuTG9vcFxuICovXG5OZXRTaW1UYWJzQ29tcG9uZW50LnByb3RvdHlwZS5hdHRhY2hUb1J1bkxvb3AgPSBmdW5jdGlvbiAocnVuTG9vcCkge1xuICBpZiAodGhpcy5yb3V0ZXJUYWJfKSB7XG4gICAgdGhpcy5yb3V0ZXJUYWJfLmF0dGFjaFRvUnVuTG9vcChydW5Mb29wKTtcbiAgfVxufTtcblxuLyoqXG4gKiBGaWxsIHRoZSByb290IGRpdiB3aXRoIG5ldyBlbGVtZW50cyByZWZsZWN0aW5nIHRoZSBjdXJyZW50IHN0YXRlXG4gKi9cbk5ldFNpbVRhYnNDb21wb25lbnQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGxldmVsQ29uZmlnID0gTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpO1xuICAvLyBDbG9uZSB0aGUgcmVmZXJlbmNlIGFyZWEgKHdpdGggaGFuZGxlcnMpIGJlZm9yZSB3ZSByZS1yZW5kZXJcbiAgdmFyIHJlZmVyZW5jZUFyZWEgPSAkKCcjcmVmZXJlbmNlX2FyZWEnKS5maXJzdCgpLmNsb25lKHRydWUpO1xuXG4gIC8vIFJlbW92ZSB0aGUgaW5zdHJ1Y3Rpb25zIGFyZWEsIHRvIHJlYXR0YWNoIGluIGEgbWludXRlLlxuICB2YXIgaW5zdHJ1Y3Rpb25zQXJlYSA9ICQoJyNidWJibGUnKS5maXJzdCgpLmRldGFjaCgpO1xuXG4gIHZhciByYXdNYXJrdXAgPSBidWlsZE1hcmt1cCh7XG4gICAgbGV2ZWw6IGxldmVsQ29uZmlnXG4gIH0pO1xuICB2YXIgalF1ZXJ5V3JhcCA9ICQocmF3TWFya3VwKTtcbiAgdGhpcy5yb290RGl2Xy5odG1sKGpRdWVyeVdyYXApO1xuXG4gIHRoaXMucm9vdERpdl8uZmluZCgnLm5ldHNpbS10YWJzJykudGFicyh7XG4gICAgYWN0aXZlOiBsZXZlbENvbmZpZy5kZWZhdWx0VGFiSW5kZXhcbiAgfSk7XG5cbiAgaWYgKHNob3VsZFNob3dUYWIobGV2ZWxDb25maWcsIE5ldFNpbVRhYlR5cGUuSU5TVFJVQ1RJT05TKSAmJiByZWZlcmVuY2VBcmVhKSB7XG4gICAgdmFyIGluc3RydWN0aW9uc1RhYiA9IHRoaXMucm9vdERpdl8uZmluZCgnI3RhYl9pbnN0cnVjdGlvbnMnKS5maXJzdCgpO1xuICAgIGluc3RydWN0aW9uc0FyZWEuYXBwZW5kVG8oaW5zdHJ1Y3Rpb25zVGFiKTtcbiAgICByZWZlcmVuY2VBcmVhLmFwcGVuZFRvKGluc3RydWN0aW9uc1RhYik7XG4gIH1cblxuICBpZiAoc2hvdWxkU2hvd1RhYihsZXZlbENvbmZpZywgTmV0U2ltVGFiVHlwZS5NWV9ERVZJQ0UpKSB7XG4gICAgdGhpcy5teURldmljZVRhYl8gPSBuZXcgTmV0U2ltTXlEZXZpY2VUYWIoXG4gICAgICAgIHRoaXMucm9vdERpdl8uZmluZCgnI3RhYl9teV9kZXZpY2UnKSxcbiAgICAgICAgdGhpcy5ydW5Mb29wXyxcbiAgICAgICAge1xuICAgICAgICAgIGNodW5rU2l6ZUNoYW5nZUNhbGxiYWNrOiB0aGlzLmNodW5rU2l6ZVNsaWRlckNoYW5nZUNhbGxiYWNrXyxcbiAgICAgICAgICBiaXRSYXRlQ2hhbmdlQ2FsbGJhY2s6IHRoaXMubXlEZXZpY2VCaXRSYXRlQ2hhbmdlQ2FsbGJhY2tfLFxuICAgICAgICAgIGVuY29kaW5nQ2hhbmdlQ2FsbGJhY2s6IHRoaXMuZW5jb2RpbmdDaGFuZ2VDYWxsYmFja19cbiAgICAgICAgfSk7XG4gIH1cblxuICBpZiAoc2hvdWxkU2hvd1RhYihsZXZlbENvbmZpZywgTmV0U2ltVGFiVHlwZS5ST1VURVIpKSB7XG4gICAgdGhpcy5yb3V0ZXJUYWJfID0gbmV3IE5ldFNpbVJvdXRlclRhYihcbiAgICAgICAgdGhpcy5yb290RGl2Xy5maW5kKCcjdGFiX3JvdXRlcicpLFxuICAgICAgICB7XG4gICAgICAgICAgYmFuZHdpZHRoU2xpZGVyQ2hhbmdlQ2FsbGJhY2s6IHRoaXMucm91dGVyQmFuZHdpZHRoU2xpZGVyQ2hhbmdlQ2FsbGJhY2tfLFxuICAgICAgICAgIGJhbmR3aWR0aFNsaWRlclN0b3BDYWxsYmFjazogdGhpcy5yb3V0ZXJCYW5kd2lkdGhTbGlkZXJTdG9wQ2FsbGJhY2tfLFxuICAgICAgICAgIG1lbW9yeVNsaWRlckNoYW5nZUNhbGxiYWNrOiB0aGlzLnJvdXRlck1lbW9yeVNsaWRlckNoYW5nZUNhbGxiYWNrXyxcbiAgICAgICAgICBtZW1vcnlTbGlkZXJTdG9wQ2FsbGJhY2s6IHRoaXMucm91dGVyTWVtb3J5U2xpZGVyU3RvcENhbGxiYWNrX1xuICAgICAgICB9KTtcbiAgfVxuXG4gIGlmIChzaG91bGRTaG93VGFiKGxldmVsQ29uZmlnLCBOZXRTaW1UYWJUeXBlLkROUykpIHtcbiAgICB0aGlzLmRuc1RhYl8gPSBuZXcgTmV0U2ltRG5zVGFiKFxuICAgICAgICB0aGlzLnJvb3REaXZfLmZpbmQoJyN0YWJfZG5zJyksXG4gICAgICAgIHRoaXMuZG5zTW9kZUNoYW5nZUNhbGxiYWNrXyxcbiAgICAgICAgdGhpcy5iZWNvbWVEbnNDYWxsYmFja18pO1xuICB9XG59O1xuXG4vKiogQHBhcmFtIHtudW1iZXJ9IG5ld0NodW5rU2l6ZSAqL1xuTmV0U2ltVGFic0NvbXBvbmVudC5wcm90b3R5cGUuc2V0Q2h1bmtTaXplID0gZnVuY3Rpb24gKG5ld0NodW5rU2l6ZSkge1xuICBpZiAodGhpcy5teURldmljZVRhYl8pIHtcbiAgICB0aGlzLm15RGV2aWNlVGFiXy5zZXRDaHVua1NpemUobmV3Q2h1bmtTaXplKTtcbiAgfVxufTtcblxuLyoqIEBwYXJhbSB7bnVtYmVyfSBuZXdCaXRSYXRlIGluIGJpdHMgcGVyIHNlY29uZCAqL1xuTmV0U2ltVGFic0NvbXBvbmVudC5wcm90b3R5cGUuc2V0TXlEZXZpY2VCaXRSYXRlID0gZnVuY3Rpb24gKG5ld0JpdFJhdGUpIHtcbiAgaWYgKHRoaXMubXlEZXZpY2VUYWJfKSB7XG4gICAgdGhpcy5teURldmljZVRhYl8uc2V0Qml0UmF0ZShuZXdCaXRSYXRlKTtcbiAgfVxufTtcblxuLyoqIEBwYXJhbSB7RW5jb2RpbmdUeXBlW119IG5ld0VuY29kaW5ncyAqL1xuTmV0U2ltVGFic0NvbXBvbmVudC5wcm90b3R5cGUuc2V0RW5jb2RpbmdzID0gZnVuY3Rpb24gKG5ld0VuY29kaW5ncykge1xuICBpZiAodGhpcy5teURldmljZVRhYl8pIHtcbiAgICB0aGlzLm15RGV2aWNlVGFiXy5zZXRFbmNvZGluZ3MobmV3RW5jb2RpbmdzKTtcbiAgfVxufTtcblxuLyoqIEBwYXJhbSB7bnVtYmVyfSBjcmVhdGlvblRpbWVzdGFtcE1zICovXG5OZXRTaW1UYWJzQ29tcG9uZW50LnByb3RvdHlwZS5zZXRSb3V0ZXJDcmVhdGlvblRpbWUgPSBmdW5jdGlvbiAoY3JlYXRpb25UaW1lc3RhbXBNcykge1xuICBpZiAodGhpcy5yb3V0ZXJUYWJfKSB7XG4gICAgdGhpcy5yb3V0ZXJUYWJfLnNldFJvdXRlckNyZWF0aW9uVGltZShjcmVhdGlvblRpbWVzdGFtcE1zKTtcbiAgfVxufTtcblxuLyoqIEBwYXJhbSB7bnVtYmVyfSBuZXdCYW5kd2lkdGggaW4gYml0cy9zZWNvbmQgKi9cbk5ldFNpbVRhYnNDb21wb25lbnQucHJvdG90eXBlLnNldFJvdXRlckJhbmR3aWR0aCA9IGZ1bmN0aW9uIChuZXdCYW5kd2lkdGgpIHtcbiAgaWYgKHRoaXMucm91dGVyVGFiXykge1xuICAgIHRoaXMucm91dGVyVGFiXy5zZXRCYW5kd2lkdGgobmV3QmFuZHdpZHRoKTtcbiAgfVxufTtcblxuLyoqIEBwYXJhbSB7bnVtYmVyfSBuZXdNZW1vcnkgaW4gYml0cyAqL1xuTmV0U2ltVGFic0NvbXBvbmVudC5wcm90b3R5cGUuc2V0Um91dGVyTWVtb3J5ID0gZnVuY3Rpb24gKG5ld01lbW9yeSkge1xuICBpZiAodGhpcy5yb3V0ZXJUYWJfKSB7XG4gICAgdGhpcy5yb3V0ZXJUYWJfLnNldE1lbW9yeShuZXdNZW1vcnkpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBxdWV1ZWRQYWNrZXRDb3VudFxuICovXG5OZXRTaW1UYWJzQ29tcG9uZW50LnByb3RvdHlwZS5zZXRSb3V0ZXJRdWV1ZWRQYWNrZXRDb3VudCA9IGZ1bmN0aW9uIChxdWV1ZWRQYWNrZXRDb3VudCkge1xuICBpZiAodGhpcy5yb3V0ZXJUYWJfKSB7XG4gICAgdGhpcy5yb3V0ZXJUYWJfLnNldFJvdXRlclF1ZXVlZFBhY2tldENvdW50KHF1ZXVlZFBhY2tldENvdW50KTtcbiAgfVxufTtcblxuLyoqIEBwYXJhbSB7bnVtYmVyfSB1c2VkTWVtb3J5SW5CaXRzICovXG5OZXRTaW1UYWJzQ29tcG9uZW50LnByb3RvdHlwZS5zZXRSb3V0ZXJNZW1vcnlJblVzZSA9IGZ1bmN0aW9uICh1c2VkTWVtb3J5SW5CaXRzKSB7XG4gIGlmICh0aGlzLnJvdXRlclRhYl8pIHtcbiAgICB0aGlzLnJvdXRlclRhYl8uc2V0TWVtb3J5SW5Vc2UodXNlZE1lbW9yeUluQml0cyk7XG4gIH1cbn07XG5cbk5ldFNpbVRhYnNDb21wb25lbnQucHJvdG90eXBlLnNldFJvdXRlckRhdGFSYXRlID0gZnVuY3Rpb24gKGRhdGFSYXRlQml0c1BlclNlY29uZCkge1xuICBpZiAodGhpcy5yb3V0ZXJUYWJfKSB7XG4gICAgdGhpcy5yb3V0ZXJUYWJfLnNldERhdGFSYXRlKGRhdGFSYXRlQml0c1BlclNlY29uZCk7XG4gIH1cbn07XG5cbi8qKiBAcGFyYW0ge3N0cmluZ30gbmV3RG5zTW9kZSAqL1xuTmV0U2ltVGFic0NvbXBvbmVudC5wcm90b3R5cGUuc2V0RG5zTW9kZSA9IGZ1bmN0aW9uIChuZXdEbnNNb2RlKSB7XG4gIGlmICh0aGlzLmRuc1RhYl8pIHtcbiAgICB0aGlzLmRuc1RhYl8uc2V0RG5zTW9kZShuZXdEbnNNb2RlKTtcbiAgfVxufTtcblxuLyoqIEBwYXJhbSB7Ym9vbGVhbn0gaXNEbnNOb2RlICovXG5OZXRTaW1UYWJzQ29tcG9uZW50LnByb3RvdHlwZS5zZXRJc0Ruc05vZGUgPSBmdW5jdGlvbiAoaXNEbnNOb2RlKSB7XG4gIGlmICh0aGlzLmRuc1RhYl8pIHtcbiAgICB0aGlzLmRuc1RhYl8uc2V0SXNEbnNOb2RlKGlzRG5zTm9kZSk7XG4gIH1cbn07XG5cbi8qKiBAcGFyYW0ge0FycmF5fSB0YWJsZUNvbnRlbnRzICovXG5OZXRTaW1UYWJzQ29tcG9uZW50LnByb3RvdHlwZS5zZXREbnNUYWJsZUNvbnRlbnRzID0gZnVuY3Rpb24gKHRhYmxlQ29udGVudHMpIHtcbiAgaWYgKHRoaXMuZG5zVGFiXykge1xuICAgIHRoaXMuZG5zVGFiXy5zZXREbnNUYWJsZUNvbnRlbnRzKHRhYmxlQ29udGVudHMpO1xuICB9XG59O1xuXG4vKiogQHBhcmFtIHtBcnJheX0gbG9nRGF0YSAqL1xuTmV0U2ltVGFic0NvbXBvbmVudC5wcm90b3R5cGUuc2V0Um91dGVyTG9nRGF0YSA9IGZ1bmN0aW9uIChsb2dEYXRhKSB7XG4gIGlmICh0aGlzLnJvdXRlclRhYl8pIHtcbiAgICB0aGlzLnJvdXRlclRhYl8uc2V0Um91dGVyTG9nRGF0YShsb2dEYXRhKTtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB0ID0gZnVuY3Rpb24gYW5vbnltb3VzKGxvY2FscywgZmlsdGVycywgZXNjYXBlXG4vKiovKSB7XG5lc2NhcGUgPSBlc2NhcGUgfHwgZnVuY3Rpb24gKGh0bWwpe1xuICByZXR1cm4gU3RyaW5nKGh0bWwpXG4gICAgLnJlcGxhY2UoLyYoPyFcXHcrOykvZywgJyZhbXA7JylcbiAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKVxuICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG59O1xudmFyIGJ1ZiA9IFtdO1xud2l0aCAobG9jYWxzIHx8IHt9KSB7IChmdW5jdGlvbigpeyBcbiBidWYucHVzaCgnJyk7MTtcbiAgdmFyIGkxOG4gPSByZXF1aXJlKCcuL2xvY2FsZScpO1xuXG4gIHZhciBzaG91bGRTaG93VGFiID0gcmVxdWlyZSgnLi9OZXRTaW1VdGlscycpLnNob3VsZFNob3dUYWI7XG4gIHZhciBOZXRTaW1UYWJUeXBlID0gcmVxdWlyZSgnLi9OZXRTaW1Db25zdGFudHMnKS5OZXRTaW1UYWJUeXBlO1xuXG4gIHZhciBzaG93SW5zdHJ1Y3Rpb25zID0gc2hvdWxkU2hvd1RhYihsZXZlbCwgTmV0U2ltVGFiVHlwZS5JTlNUUlVDVElPTlMpO1xuICB2YXIgc2hvd015RGV2aWNlID0gc2hvdWxkU2hvd1RhYihsZXZlbCwgTmV0U2ltVGFiVHlwZS5NWV9ERVZJQ0UpO1xuICB2YXIgc2hvd1JvdXRlciA9IHNob3VsZFNob3dUYWIobGV2ZWwsIE5ldFNpbVRhYlR5cGUuUk9VVEVSKTtcbiAgdmFyIHNob3dEbnMgPSBzaG91bGRTaG93VGFiKGxldmVsLCBOZXRTaW1UYWJUeXBlLkROUyk7XG47IGJ1Zi5wdXNoKCdcXG48ZGl2IGNsYXNzPVwibmV0c2ltLXRhYnNcIj5cXG4gIDx1bD5cXG4gICAgJyk7MTQ7IGlmIChzaG93SW5zdHJ1Y3Rpb25zKSB7IDsgYnVmLnB1c2goJ1xcbiAgICA8bGk+PGEgaHJlZj1cIiN0YWJfaW5zdHJ1Y3Rpb25zXCI+JywgZXNjYXBlKCgxNSwgIGkxOG4uaW5zdHJ1Y3Rpb25zKCkgKSksICc8L2E+PC9saT5cXG4gICAgJyk7MTY7IH0gOyBidWYucHVzaCgnXFxuICAgICcpOzE3OyBpZiAoc2hvd015RGV2aWNlKSB7IDsgYnVmLnB1c2goJ1xcbiAgICAgIDxsaT48YSBocmVmPVwiI3RhYl9teV9kZXZpY2VcIj4nLCBlc2NhcGUoKDE4LCAgaTE4bi5teURldmljZSgpICkpLCAnPC9hPjwvbGk+XFxuICAgICcpOzE5OyB9IDsgYnVmLnB1c2goJ1xcbiAgICAnKTsyMDsgaWYgKHNob3dSb3V0ZXIpIHsgOyBidWYucHVzaCgnXFxuICAgICAgPGxpPjxhIGhyZWY9XCIjdGFiX3JvdXRlclwiPicsIGVzY2FwZSgoMjEsICBpMThuLnJvdXRlcigpICkpLCAnPC9hPjwvbGk+XFxuICAgICcpOzIyOyB9IDsgYnVmLnB1c2goJ1xcbiAgICAnKTsyMzsgaWYgKHNob3dEbnMpIHsgOyBidWYucHVzaCgnXFxuICAgICAgPGxpPjxhIGhyZWY9XCIjdGFiX2Ruc1wiPicsIGVzY2FwZSgoMjQsICBpMThuLmRucygpICkpLCAnPC9hPjwvbGk+XFxuICAgICcpOzI1OyB9IDsgYnVmLnB1c2goJ1xcbiAgPC91bD5cXG4gICcpOzI3OyBpZiAoc2hvd0luc3RydWN0aW9ucykgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgPGRpdiBpZD1cInRhYl9pbnN0cnVjdGlvbnNcIj48L2Rpdj5cXG4gICcpOzI5OyB9IDsgYnVmLnB1c2goJ1xcbiAgJyk7MzA7IGlmIChzaG93TXlEZXZpY2UpIHsgOyBidWYucHVzaCgnXFxuICAgIDxkaXYgaWQ9XCJ0YWJfbXlfZGV2aWNlXCI+PC9kaXY+XFxuICAnKTszMjsgfSA7IGJ1Zi5wdXNoKCdcXG4gICcpOzMzOyBpZiAoc2hvd1JvdXRlcikgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgPGRpdiBpZD1cInRhYl9yb3V0ZXJcIj48L2Rpdj5cXG4gICcpOzM1OyB9IDsgYnVmLnB1c2goJ1xcbiAgJyk7MzY7IGlmIChzaG93RG5zKSB7IDsgYnVmLnB1c2goJ1xcbiAgICA8ZGl2IGlkPVwidGFiX2Ruc1wiPjwvZGl2PlxcbiAgJyk7Mzg7IH0gOyBidWYucHVzaCgnXFxuPC9kaXY+Jyk7IH0pKCk7XG59IFxucmV0dXJuIGJ1Zi5qb2luKCcnKTtcbn07XG4gIHJldHVybiBmdW5jdGlvbihsb2NhbHMpIHtcbiAgICByZXR1cm4gdChsb2NhbHMsIHJlcXVpcmUoXCJlanNcIikuZmlsdGVycyk7XG4gIH1cbn0oKSk7IiwiLyoqXG4gKiBAb3ZlcnZpZXcgVUkgY29tcG9uZW50OiBUaGUgc21hbGwgZXhwYW5kYWJsZSBib3ggYWJvdmUgdGhlIHZpc3VhbGl6YXRpb24sXG4gKiAgICAgICAgICAgdXNlZCB0byBzaG93IGRlYnVnIGFuZCBkaWFnbm9zdGljIGluZm9ybWF0aW9uLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnLi4vdXRpbHMnKTsgLy8gRm9yIEZ1bmN0aW9uLnByb3RvdHlwZS5pbmhlcml0cygpXG52YXIgaTE4biA9IHJlcXVpcmUoJy4vbG9jYWxlJyk7XG52YXIgbWFya3VwID0gcmVxdWlyZSgnLi9OZXRTaW1TdGF0dXNQYW5lbC5odG1sLmVqcycpO1xudmFyIE5ldFNpbVBhbmVsID0gcmVxdWlyZSgnLi9OZXRTaW1QYW5lbC5qcycpO1xudmFyIE5ldFNpbVV0aWxzID0gcmVxdWlyZSgnLi9OZXRTaW1VdGlscycpO1xuXG4vKipcbiAqIEdlbmVyYXRvciBhbmQgY29udHJvbGxlciBmb3IgY29ubmVjdGlvbiBzdGF0dXMgcGFuZWxcbiAqIGluIGxlZnQgY29sdW1uLCBkaXNwbGF5ZWQgd2hpbGUgY29ubmVjdGVkLlxuICogQHBhcmFtIHtqUXVlcnl9IHJvb3REaXZcbiAqIEBwYXJhbSB7T2JqZWN0fSBjYWxsYmFja3NcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrcy5kaXNjb25uZWN0Q2FsbGJhY2sgLSBtZXRob2QgdG8gY2FsbCB3aGVuIGRpc2Nvbm5lY3QgYnV0dG9uXG4gKiAgICAgICAgaXMgY2xpY2tlZC5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGF1Z21lbnRzIE5ldFNpbVBhbmVsXG4gKi9cbnZhciBOZXRTaW1TdGF0dXNQYW5lbCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJvb3REaXYsIGNhbGxiYWNrcykge1xuICAvKipcbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5kaXNjb25uZWN0Q2FsbGJhY2tfID0gY2FsbGJhY2tzLmRpc2Nvbm5lY3RDYWxsYmFjaztcblxuICAvLyBTdXBlcmNsYXNzIGNvbnN0cnVjdG9yXG4gIE5ldFNpbVBhbmVsLmNhbGwodGhpcywgcm9vdERpdiwge1xuICAgIGNsYXNzTmFtZTogJ25ldHNpbV9zdGF0dXNfcGFuZWwnLFxuICAgIHBhbmVsVGl0bGU6ICdTdGF0dXMnLFxuICAgIHVzZXJUb2dnbGVhYmxlOiBmYWxzZSxcbiAgICBiZWdpbk1pbmltaXplZDogdHJ1ZVxuICB9KTtcbn07XG5OZXRTaW1TdGF0dXNQYW5lbC5pbmhlcml0cyhOZXRTaW1QYW5lbCk7XG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3R9IFtkYXRhXVxuICogQHBhcmFtIHtzdHJpbmd9IFtkYXRhLnJlbW90ZU5vZGVOYW1lXSAtIERpc3BsYXkgbmFtZSBvZiByZW1vdGUgbm9kZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbZGF0YS5teUhvc3RuYW1lXSAtIEhvc3RuYW1lIG9mIGxvY2FsIG5vZGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBbZGF0YS5teUFkZHJlc3NdIC0gTG9jYWwgbm9kZSBhZGRyZXNzIGFzc2lnbmVkIGJ5IHJvdXRlclxuICogQHBhcmFtIHtzdHJpbmd9IFtkYXRhLnNoYXJlTGlua10gLSBVUkwgZm9yIHNoYXJpbmcgcHJpdmF0ZSBzaGFyZFxuICovXG5OZXRTaW1TdGF0dXNQYW5lbC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgZGF0YSA9IGRhdGEgfHwge307XG5cbiAgLy8gQ2FwdHVyZSB0aXRsZSBiZWZvcmUgd2UgcmVuZGVyIHRoZSB3cmFwcGVyIHBhbmVsLlxuICB0aGlzLnNldFBhbmVsVGl0bGUoZGF0YS5yZW1vdGVOb2RlTmFtZSk7XG5cbiAgLy8gUmVuZGVyIGJvaWxlcnBsYXRlIHBhbmVsIHN0dWZmXG4gIE5ldFNpbVN0YXR1c1BhbmVsLnN1cGVyUHJvdG90eXBlLnJlbmRlci5jYWxsKHRoaXMpO1xuXG4gIC8vIFB1dCBvdXIgb3duIGNvbnRlbnQgaW50byB0aGUgcGFuZWwgYm9keVxuICB2YXIgbmV3TWFya3VwID0gJChtYXJrdXAoe1xuICAgIG15SG9zdG5hbWU6IGRhdGEubXlIb3N0bmFtZSxcbiAgICBteUFkZHJlc3M6IGRhdGEubXlBZGRyZXNzLFxuICAgIHNoYXJlTGluazogZGF0YS5zaGFyZUxpbmtcbiAgfSkpO1xuICB0aGlzLmdldEJvZHkoKS5odG1sKG5ld01hcmt1cCk7XG5cbiAgLy8gQWRkIGEgYnV0dG9uIHRvIHRoZSBwYW5lbCBoZWFkZXJcbiAgdGhpcy5hZGRCdXR0b24oXG4gICAgICBpMThuLmRpc2Nvbm5lY3RCdXR0b24oeyBjYXJldDogJzxpIGNsYXNzPVwiZmEgZmEtY2FyZXQtbGVmdFwiPjwvaT4nIH0pLFxuICAgICAgdGhpcy5kaXNjb25uZWN0Q2FsbGJhY2tfKTtcblxuICAvLyBCdXR0b24gdGhhdCB0YWtlcyB5b3UgdG8gdGhlIG5leHQgbGV2ZWwuXG4gIE5ldFNpbVV0aWxzLm1ha2VDb250aW51ZUJ1dHRvbih0aGlzKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cz0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdCA9IGZ1bmN0aW9uIGFub255bW91cyhsb2NhbHMsIGZpbHRlcnMsIGVzY2FwZVxuLyoqLykge1xuZXNjYXBlID0gZXNjYXBlIHx8IGZ1bmN0aW9uIChodG1sKXtcbiAgcmV0dXJuIFN0cmluZyhodG1sKVxuICAgIC5yZXBsYWNlKC8mKD8hXFx3KzspL2csICcmYW1wOycpXG4gICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xufTtcbnZhciBidWYgPSBbXTtcbndpdGggKGxvY2FscyB8fCB7fSkgeyAoZnVuY3Rpb24oKXsgXG4gYnVmLnB1c2goJycpOzE7XG52YXIgaTE4biA9IHJlcXVpcmUoJy4vbG9jYWxlJyk7XG47IGJ1Zi5wdXNoKCdcXG48ZGl2IGNsYXNzPVwiY29udGVudC13cmFwXCI+XFxuICAnKTs1OyBpZiAobXlIb3N0bmFtZSkgeyA7IGJ1Zi5wdXNoKCdcXG4gIDxwPk15IGhvc3RuYW1lOiAnLCBlc2NhcGUoKDYsICBteUhvc3RuYW1lICkpLCAnPC9wPlxcbiAgJyk7NzsgfSA7IGJ1Zi5wdXNoKCdcXG5cXG4gICcpOzk7IGlmIChteUFkZHJlc3MpIHsgOyBidWYucHVzaCgnXFxuICA8cD5NeSBhZGRyZXNzOiAnLCBlc2NhcGUoKDEwLCAgbXlBZGRyZXNzICkpLCAnPC9wPlxcbiAgJyk7MTE7IH0gOyBidWYucHVzaCgnXFxuXFxuICAnKTsxMzsgaWYgKHNoYXJlTGluaykgeyA7IGJ1Zi5wdXNoKCdcXG4gIDxwPjxhIGhyZWY9XCInLCBlc2NhcGUoKDE0LCAgc2hhcmVMaW5rICkpLCAnXCI+JywgZXNjYXBlKCgxNCwgIGkxOG4uc2hhcmVUaGlzTmV0d29yaygpICkpLCAnPC9hPjwvcD5cXG4gICcpOzE1OyB9IDsgYnVmLnB1c2goJ1xcbjwvZGl2PlxcbicpOyB9KSgpO1xufSBcbnJldHVybiBidWYuam9pbignJyk7XG59O1xuICByZXR1cm4gZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgcmV0dXJuIHQobG9jYWxzLCByZXF1aXJlKFwiZWpzXCIpLmZpbHRlcnMpO1xuICB9XG59KCkpOyIsIi8qKlxuICogQG92ZXJ2aWV3IFJlcHJlc2VudHMgYSBjb2xsZWN0aW9uIG9mIHRhYmxlcyB0aGF0IG1hcCB0byBhIHBhcnRpY3VsYXJcbiAqICAgICAgICAgICBjbGFzcyBzZWN0aW9uJ3Mgc2ltdWxhdGlvbiwgaXNvbGF0ZWQgZnJvbSBvdGhlciBjbGFzcyBzZWN0aW9ucy5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBOZXRTaW1UYWJsZSA9IHJlcXVpcmUoJy4vTmV0U2ltVGFibGUnKTtcbnZhciBQdWJTdWJTZXJ2aWNlID0gcmVxdWlyZSgnLi9QdWJTdWJTZXJ2aWNlJyk7XG5cbi8qKlxuICogUHViU3ViIGV2ZW50IGtleSBmb3IgZXZlbnRzIGludmFsaWRhdGluZyBhbGwgdGFibGVzLlxuICogQGNvbnN0IHtzdHJpbmd9XG4gKi9cbnZhciBXSE9MRV9TSEFSRF9FVkVOVCA9ICdhbGxfdGFibGVzJztcblxuLyoqXG4gKiBBIHNoYXJkIGlzIGFuIGlzb2xhdGVkLCBjb21wbGV0ZSBzaW11bGF0aW9uIHN0YXRlIHNoYXJlZCBieSBhIHN1YnNldCBvZlxuICogdXNlcnMuICBJdCdzIG1hZGUgb2YgYSBzZXQgb2Ygc3RvcmFnZSB0YWJsZXMgc2V0IGFwYXJ0IGJ5IGEgcGFydGljdWxhclxuICogc2hhcmQgSUQgaW4gdGhlaXIgbmFtZXMuICBXZSB1c2Ugc2hhcmRzIHRvIGFsbG93IHN0dWRlbnRzIHRvIGludGVyYWN0IG9ubHlcbiAqIHdpdGggdGhlaXIgcGFydGljdWxhciBjbGFzcyB3aGlsZSBzdGlsbCBzdG9yaW5nIGFsbCBOZXRTaW0gdGFibGVzIHVuZGVyXG4gKiB0aGUgc2FtZSBBcHAgSUQuXG4gKlxuICogQHBhcmFtIHshc3RyaW5nfSBzaGFyZElEXG4gKiBAcGFyYW0geyFQdWJTdWJDb25maWd9IHB1YlN1YkNvbmZpZ1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBOZXRTaW1TaGFyZCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHNoYXJkSUQsIHB1YlN1YkNvbmZpZykge1xuICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgdGhpcy5pZCA9IHNoYXJkSUQ7XG5cbiAgLyoqIEB0eXBlIHtQdWJTdWJTZXJ2aWNlfSAqL1xuICB0aGlzLnB1YlN1YiA9IFB1YlN1YlNlcnZpY2UuY3JlYXRlKHB1YlN1YkNvbmZpZyk7XG5cbiAgLyoqIEB0eXBlIHtQdWJTdWJDaGFubmVsfSAqL1xuICB0aGlzLnB1YlN1YkNoYW5uZWwgPSB0aGlzLnB1YlN1Yi5zdWJzY3JpYmUodGhpcy5pZCk7XG4gIHRoaXMucHViU3ViQ2hhbm5lbC5zdWJzY3JpYmUoV0hPTEVfU0hBUkRfRVZFTlQsXG4gICAgICBOZXRTaW1TaGFyZC5wcm90b3R5cGUub25QdWJTdWJFdmVudF8uYmluZCh0aGlzKSk7XG5cbiAgLyoqXG4gICAqIENvbGxlY3Rpb24gb2YgY2xpZW50ICh1c2VyKSBub2RlcyBhbmQgcm91dGVyIG5vZGVzIG9uIHRoZSBzaGFyZC5cbiAgICogRWFjaCBjbGllbnQgbm9kZSBjb3JyZXNwb25kcyB0byBhIHVzZXIgKG9yIGJyb3dzZXIgdGFiLCB0byBiZSBzcGVjaWZpYykuXG4gICAqIFJvdXRlciBub2RlcyBhcmUgbm90IGFzc29jaWF0ZWQgd2l0aCBhIHBhcnRpY3VsYXIgdXNlci5cbiAgICpcbiAgICogQWxsIGVudGl0aWVzIGluIHRoaXMgdGFibGUgZGVzY2VuZCBmcm9tIE5ldFNpbU5vZGUsIGFuZCBjYW4gYmUgZGVzZXJpYWxpemVkXG4gICAqIHZpYSB1dGlsaXRpZXMgaW4gTmV0U2ltTm9kZUZhY3RvcnlcbiAgICpcbiAgICogUm93cyBpbiB0aGlzIHRhYmxlIGFyZVxuICAgKiAtIGluc2VydGVkIHdoZW4gYSBub2RlIGlzIGNyZWF0ZWQgKHN1Y2ggYXMgd2hlbiBhIHVzZXIgY29ubmVjdHMpXG4gICAqIC0gdXBkYXRlZCBmb3IgY2VydGFpbiBjaGFuZ2VzIHRvIG5vZGUgc3RhdHVzIG9yIHJvdXRlciBjb25maWd1cmF0aW9uXG4gICAqIC0gZGVsZXRlZCB3aGVuIGEgbm9kZSBpcyBkZXN0cm95ZWQgKHN1Y2ggYXMgd2hlbiBhIHVzZXIgZGlzY29ubmVjdHMpXG4gICAqXG4gICAqIEB0eXBlIHtOZXRTaW1UYWJsZX1cbiAgICogQHNlZSB7TmV0U2ltTm9kZX1cbiAgICogQHNlZSB7TmV0U2ltQ2xpZW50Tm9kZX1cbiAgICogQHNlZSB7TmV0U2ltUm91dGVyTm9kZX1cbiAgICogQHNlZSB7TmV0U2ltTG9jYWxDbGllbnROb2RlfVxuICAgKiBAc2VlIHtOZXRTaW1Ob2RlRmFjdG9yeX1cbiAgICovXG4gIHRoaXMubm9kZVRhYmxlID0gbmV3IE5ldFNpbVRhYmxlKHRoaXMucHViU3ViQ2hhbm5lbCwgc2hhcmRJRCwgJ24nKTtcblxuICAvKipcbiAgICogQ29sbGVjdGlvbiBvZiB3aXJlcyBvbiB0aGUgc2hhcmQuICBXaXJlcyBkb2N1bWVudCB0aGUgY29ubmVjdGlvbnMgYmV0d2VlblxuICAgKiBub2RlcyBhbmQgY2VydGFpbiBub2RlIG1ldGFkYXRhLCBsaWtlIGhvc3RuYW1lcyBhbmQgYWRkcmVzc2VzLiAgV2lyZXNcbiAgICogcmVmZXJlbmNlIG5vZGUgSURzLCBhbmQgYXJlIHRoZXJlZm9yZSByZWZlcmVudGlhbGx5IGRlcGVuZGVudCBvbiB0aGUgbm9kZVxuICAgKiB0YWJsZS5cbiAgICpcbiAgICogQWxsIGVudGl0aWVzIGluIHRoaXMgdGFibGUgZGVzZXJpYWxpemUgaW50byBOZXRTaW1XaXJlLlxuICAgKlxuICAgKiBSb3dzIGluIHRoaXMgdGFibGUgYXJlXG4gICAqIC0gaW5zZXJ0ZWQgd2hlbiB0d28gbm9kZXMgYXJlIGNvbm5lY3RlZFxuICAgKiAtIHVwZGF0ZWQgd2hlbiBhc3NpZ25pbmcgYW4gYWRkcmVzc1xuICAgKiAtIGRlbGV0ZWQgd2hlbiB0d28gbm9kZXMgYXJlIGRpc2Nvbm5lY3RlZFxuICAgKlxuICAgKiBAdHlwZSB7TmV0U2ltVGFibGV9XG4gICAqIEBzZWUge05ldFNpbVdpcmV9XG4gICAqL1xuICB0aGlzLndpcmVUYWJsZSA9IG5ldyBOZXRTaW1UYWJsZSh0aGlzLnB1YlN1YkNoYW5uZWwsIHNoYXJkSUQsICd3Jyk7XG5cbiAgLyoqXG4gICAqIENvbGxlY3Rpb24gb2YgbWVzc2FnZXMgKGVucXVldWVkIG9yIGluLWZsaWdodCkgb24gdGhlIHNoYXJkLiAgTWVzc2FnZXNcbiAgICogcmVmZXJlbmNlIG5vZGUgSURzLCBhbmQgYXJlIHRoZXJlZm9yZSByZWZlcmVudGlhbGx5IGRlcGVuZGVudCBvbiB0aGUgbm9kZVxuICAgKiB0YWJsZS5cbiAgICpcbiAgICogQWxsIGVudGl0aWVzIGluIHRoaXMgdGFibGUgZGVzZXJpYWxpemUgaW50byBOZXRTaW1NZXNzYWdlLlxuICAgKlxuICAgKiBSb3dzIGluIHRoaXMgdGFibGUgYXJlXG4gICAqIC0gaW5zZXJ0ZWQgd2hlbiBhIG1lc3NhZ2UgaXMgc2VudFxuICAgKiAtIG5ldmVyIHVwZGF0ZWRcbiAgICogLSBkZWxldGVkIHdoZW4gYSBtZXNzYWdlIGlzIHJlY2VpdmVkXG4gICAqXG4gICAqIEB0eXBlIHtOZXRTaW1UYWJsZX1cbiAgICogQHNlZSB7TmV0U2ltTWVzc2FnZX1cbiAgICovXG4gIHRoaXMubWVzc2FnZVRhYmxlID0gbmV3IE5ldFNpbVRhYmxlKHRoaXMucHViU3ViQ2hhbm5lbCwgc2hhcmRJRCwgJ20nKTtcblxuICAvKipcbiAgICogQ29sbGVjdGlvbiBvZiBsb2cgZW50cmllcyBmb3Igbm9kZXMgb24gdGhlIHNoYXJkLiAgTG9ncyByZWZlcmVuY2Ugbm9kZSBJRHMsXG4gICAqIGFuZCBhcmUgdGhlcmVmb3JlIHJlZmVyZW50aWFsbHkgZGVwZW5kZW50IG9uIHRoZSBub2RlIHRhYmxlIChidXQgd2Ugc2hvdWxkXG4gICAqIGNoYW5nZSB0aGlzKS5jaGFubmVsXG4gICAqXG4gICAqIEFsbCBlbnRpdGllcyBpbiB0aGlzIHRhYmxlIGRlc2VyaWFsaXplIGludG8gTmV0U2ltTG9nRW50cnkuXG4gICAqXG4gICAqIFJvd3MgaW4gdGhpcyB0YWJsZSBhcmVcbiAgICogLSBpbnNlcnRlZCB3aGVuIGEgcm91dGVyIHJvdXRlcyBvciBkcm9wcyBhIG1lc3NhZ2VcbiAgICogLSBuZXZlciB1cGRhdGVkXG4gICAqIC0gbmV2ZXIgZGVsZXRlZFxuICAgKlxuICAgKiBAdHlwZSB7TmV0U2ltVGFibGV9XG4gICAqIEBzZWUge05ldFNpbUxvZ0VudHJ5fVxuICAgKi9cbiAgdGhpcy5sb2dUYWJsZSA9IG5ldyBOZXRTaW1UYWJsZSh0aGlzLnB1YlN1YkNoYW5uZWwsIHNoYXJkSUQsICdsJywge1xuICAgIC8vIFRoaXMgaXMgb25seSBzYWZlIHRvIGRvIGJlY2F1c2Ugd2UgbmV2ZXIgdXBkYXRlIG9yIGRlbGV0ZSByb3dzIGluIHRoaXMgdGFibGUuXG4gICAgdXNlSW5jcmVtZW50YWxSZWZyZXNoOiB0cnVlXG4gIH0pO1xuICB0aGlzLmxvZ1RhYmxlLnVuc3Vic2NyaWJlKCk7XG59O1xuXG4vKipcbiAqIE5lY2Vzc2FyeSB0ZWFyLWRvd24gZm9yIHNoYXJkLiAgSW4gcGFydGljdWxhciwgZGlzY29ubmVjdGluZ1xuICogZnJvbSBwdWJzdWIgc2VydmljZS5cbiAqL1xuTmV0U2ltU2hhcmQucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMubm9kZVRhYmxlLnVuc3Vic2NyaWJlKCk7XG4gIHRoaXMud2lyZVRhYmxlLnVuc3Vic2NyaWJlKCk7XG4gIHRoaXMubWVzc2FnZVRhYmxlLnVuc3Vic2NyaWJlKCk7XG4gIHRoaXMubG9nVGFibGUudW5zdWJzY3JpYmUoKTtcbiAgdGhpcy5wdWJTdWJDaGFubmVsLnVuc3Vic2NyaWJlKFdIT0xFX1NIQVJEX0VWRU5UKTtcbiAgdGhpcy5wdWJTdWJDaGFubmVsID0gbnVsbDtcbiAgdGhpcy5wdWJTdWIudW5zdWJzY3JpYmUodGhpcy5pZCk7XG59O1xuXG4vKipcbiAqIFRoaXMgdGljayBhbGxvd3Mgb3VyIHRhYmxlcyB0byBwb2xsIHRoZSBzZXJ2ZXIgZm9yIGNoYW5nZXMuXG4gKiBAcGFyYW0geyFSdW5Mb29wLkNsb2NrfSBjbG9ja1xuICovXG5OZXRTaW1TaGFyZC5wcm90b3R5cGUudGljayA9IGZ1bmN0aW9uIChjbG9jaykge1xuICB0aGlzLm5vZGVUYWJsZS50aWNrKGNsb2NrKTtcbiAgdGhpcy53aXJlVGFibGUudGljayhjbG9jayk7XG4gIHRoaXMubWVzc2FnZVRhYmxlLnRpY2soY2xvY2spO1xuICB0aGlzLmxvZ1RhYmxlLnRpY2soY2xvY2spO1xufTtcblxuLyoqXG4gKiBUaGUgXCJwYW5pYyBidXR0b25cIiBvcHRpb24gLSBjbGVhcnMgYWxsIGRhdGEgb24gdGhlIHNoYXJkLCBraWNraW5nIGFsbFxuICogdXNlcnMgb3V0IGFuZCBzdGFydGluZyBvdmVyLlxuICogQHBhcmFtIHtOb2RlU3R5bGVDYWxsYmFja30gb25Db21wbGV0ZVxuICovXG5OZXRTaW1TaGFyZC5wcm90b3R5cGUucmVzZXRFdmVyeXRoaW5nID0gZnVuY3Rpb24gKG9uQ29tcGxldGUpIHtcbiAgJC5hamF4KHtcbiAgICB1cmw6ICcvdjMvbmV0c2ltLycgKyB0aGlzLmlkLFxuICAgIHR5cGU6ICdkZWxldGUnLFxuICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCcsXG4gICAgZGF0YVR5cGU6IFwianNvblwiXG4gIH0pLmRvbmUoZnVuY3Rpb24oKSB7XG4gICAgb25Db21wbGV0ZShudWxsLCB0cnVlKTtcbiAgfSkuZmFpbChmdW5jdGlvbihyZXF1ZXN0LCBzdGF0dXMsIGVycm9yKSB7XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignc3RhdHVzOiAnICsgc3RhdHVzICsgJzsgZXJyb3I6ICcgKyBlcnJvcik7XG4gICAgb25Db21wbGV0ZShlcnIsIGZhbHNlKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aGVuIHRoZSBQdWJTdWIgc2VydmljZSBmaXJlcyBhbiBldmVudCB0aGF0IGFwcGxpZXMgdG8gYWxsIHRhYmxlc1xuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltU2hhcmQucHJvdG90eXBlLm9uUHViU3ViRXZlbnRfID0gZnVuY3Rpb24gKCkge1xuICAvLyBSaWdodCBub3csIHRoZSBvbmx5IGFsbF90YWJsZXMgZXZlbnQgaXMgdGhlIHNoYXJkIHJlc2V0LlxuICAvLyBSZWZyZXNoaW5nIHRoZSBub2RlIHRhYmxlIGluZm9ybXMgb3VyIG5vZGUgdGhhdCBhIHJlc2V0IGhhcyBvY2N1cnJlZC5cbiAgLy8gVE9ETzogVXNlIGEgXCJkaXNjb25uZWN0IGZyb20gc2hhcmRcIiBjYWxsYmFjayBpbnN0ZWFkIGhlcmUuXG4gIHRoaXMubm9kZVRhYmxlLnJlZnJlc2goKTtcbn07XG4iLCIvKipcbiAqIEBvdmVydmlldyBXcmFwcGVkIHB1Yi9zdWIgc2VydmljZSBjbGllbnQgQVBJcyAobGlrZSBQdXNoZXIpXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG5cbiBtYXhsZW46IDEyMFxuICovXG4vKiBnbG9iYWwgUHVzaGVyICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBQdWJTdWJDaGFubmVsID0gcmVxdWlyZSgnLi9QdWJTdWJDaGFubmVsJyk7XG5cbi8qKlxuICogSmF2YVNjcmlwdCBpbnRlcmZhY2UgZm9yIGEgcHVibGlzaC9zdWJzY3JpYmUgc2VydmljZSBwcm92aWRlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBsaWNhdGlvbktleVxuICogQGludGVyZmFjZVxuICovXG52YXIgUHViU3ViU2VydmljZSA9IGV4cG9ydHM7XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUHViU3ViQ29uZmlnXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHVzZVB1c2hlciAtIFdoZXRoZXIgdG8gdXNlIFB1c2hlcidzIEFQSSwgb3IgYSBudWxsXG4gKiAgICAgICAgICAgaW1wbGVtZW50YXRpb24uXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcHVzaGVyQXBwbGljYXRpb25LZXkgLSBJZiB1c2luZyBQdXNoZXIsIHRoZSBwdWJsaWMga2V5XG4gKiAgICAgICAgICAgcmVxdWlyZWQgdG8gaW5pdGlhbGl6ZSB0aGUgUHVzaGVyIEFQSS5cbiAqL1xuXG4vKipcbiAqIENyZWF0ZSBhbiBBUEkgaW5zdGFuY2UgYXBwcm9wcmlhdGUgdG8gdGhlIGN1cnJlbnQgY29uZmlndXJhdGlvbi5cbiAqIEBwYXJhbSB7IVB1YlN1YkNvbmZpZ30gcHViU3ViQ29uZmlnXG4gKiBAcmV0dXJucyB7UHViU3ViU2VydmljZX1cbiAqL1xuUHViU3ViU2VydmljZS5jcmVhdGUgPSBmdW5jdGlvbiAocHViU3ViQ29uZmlnKSB7XG4gIGlmIChwdWJTdWJDb25maWcudXNlUHVzaGVyKSB7XG4gICAgcmV0dXJuIG5ldyBQdWJTdWJTZXJ2aWNlLlB1c2hlclNlcnZpY2UocHViU3ViQ29uZmlnLnB1c2hlckFwcGxpY2F0aW9uS2V5KTtcbiAgfVxuXG4gIHJldHVybiBuZXcgUHViU3ViU2VydmljZS5OdWxsU2VydmljZSgpO1xufTtcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBuYW1lIFB1YlN1YlNlcnZpY2Ujc3Vic2NyaWJlXG4gKiBAcGFyYW0ge3N0cmluZ30gY2hhbm5lbElEIC0gQ2hhbm5lbCB0byB3aGljaCB3ZSBzdWJzY3JpYmUuXG4gKiBAcmV0dXJucyB7UHViU3ViQ2hhbm5lbH1cbiAqL1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG5hbWUgUHViU3ViU2VydmljZSN1bnN1YnNjcmliZVxuICogQHBhcmFtIHtzdHJpbmd9IGNoYW5uZWxJRCAtIENoYW5uZWwgZnJvbSB3aGljaCB3ZSB1bnN1YnNjcmliZS5cbiAqL1xuXG4vKipcbiAqIFN0dWIgaW1wbGVtZW50YXRpb24gb2YgUHViU3ViIEFQSS5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGltcGxlbWVudHMgUHViU3ViU2VydmljZVxuICovXG4vLyBEaXNhYmxlIFwidW51c2VkIHZhcmlhYmxlXCIgZXJyb3JzIGZvciBudWxsIGltcGxlbWVudGF0aW9uIGRlY2xhcmF0aW9uc1xuLyoganNoaW50IHVudXNlZDpmYWxzZSAqL1xuUHViU3ViU2VydmljZS5OdWxsU2VydmljZSA9IGZ1bmN0aW9uICgpIHsgfTtcblxuLyoqXG4gKiBTdWJzY3JpYmUgdG8gZXZlbnRzIG9uIGEgcGFydGljdWxhciBjaGFubmVsLlxuICogQHBhcmFtIHtzdHJpbmd9IGNoYW5uZWxJRFxuICogQHJldHVybnMge1B1YlN1YkNoYW5uZWx9XG4gKi9cblB1YlN1YlNlcnZpY2UuTnVsbFNlcnZpY2UucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChjaGFubmVsSUQpIHtcbiAgcmV0dXJuIG5ldyBQdWJTdWJDaGFubmVsLk51bGxDaGFubmVsKCk7XG59O1xuXG4vKipcbiAqIFVuc3Vic2NyaWJlIGZyb20gZXZlbnRzIG9uIGEgcGFydGljdWxhciBjaGFubmVsLlxuICogQHBhcmFtIHtzdHJpbmd9IGNoYW5uZWxJRFxuICovXG5QdWJTdWJTZXJ2aWNlLk51bGxTZXJ2aWNlLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uIChjaGFubmVsSUQpIHsgfTtcblxuLy8gUmUtZW5hYmxlIFwidW51c2VkIHZhcmlhYmxlXCIgZXJyb3Jcbi8qIGpzaGludCB1bnVzZWQ6dHJ1ZSAqL1xuXG4vKipcbiAqIFdyYXBwZWQgUHVzaGVyLmNvbSBBUEkuXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwbGljYXRpb25LZXlcbiAqIEBjb25zdHJ1Y3RvclxuICogQGltcGxlbWVudHMgUHViU3ViU2VydmljZVxuICovXG5QdWJTdWJTZXJ2aWNlLlB1c2hlclNlcnZpY2UgPSBmdW5jdGlvbiAoYXBwbGljYXRpb25LZXkpIHtcbiAgLyoqXG4gICAqIEluc3RhbmNlIG9mIGFjdHVhbCBQdXNoZXIgSmF2YVNjcmlwdCBBUEkuXG4gICAqIEB0eXBlIHtQdXNoZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmFwaV8gPSBuZXcgUHVzaGVyKGFwcGxpY2F0aW9uS2V5LCB7IGVuY3J5cHRlZDogdHJ1ZSB9KTtcbn07XG5cbi8qKlxuICogU3Vic2NyaWJlIHRvIGV2ZW50cyBvbiBhIHBhcnRpY3VsYXIgY2hhbm5lbC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjaGFubmVsSURcbiAqIEByZXR1cm5zIHtQdWJTdWJDaGFubmVsfVxuICovXG5QdWJTdWJTZXJ2aWNlLlB1c2hlclNlcnZpY2UucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChjaGFubmVsSUQpIHtcbiAgcmV0dXJuIG5ldyBQdWJTdWJDaGFubmVsLlB1c2hlckNoYW5uZWwodGhpcy5hcGlfLnN1YnNjcmliZShjaGFubmVsSUQpKTtcbn07XG5cbi8qKlxuICogVW5zdWJzY3JpYmUgZnJvbSBldmVudHMgb24gYSBwYXJ0aWN1bGFyIGNoYW5uZWwuXG4gKiBAcGFyYW0ge3N0cmluZ30gY2hhbm5lbElEXG4gKi9cblB1YlN1YlNlcnZpY2UuUHVzaGVyU2VydmljZS5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoY2hhbm5lbElEKSB7XG4gIHRoaXMuYXBpXy51bnN1YnNjcmliZShjaGFubmVsSUQpO1xufTtcbiIsIi8qKlxuICogQG92ZXJ2aWV3IFdyYXBwZWQgcHViL3N1YiBzZXJ2aWNlIGNoYW5uZWwgQVBJcyAobGlrZSBQdXNoZXIncyBDaGFubmVsKVxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBKYXZhc2NyaXB0IGludGVyZmFjZSBmb3IgYSBwdWJsaXNoL3N1YnNjcmliZSBjaGFubmVsLlxuICogQGludGVyZmFjZVxuICovXG52YXIgUHViU3ViQ2hhbm5lbCA9IGV4cG9ydHM7XG5cbi8qKlxuICogU3Vic2NyaWJlIHRvIGFuIGV2ZW50LCBzbyB0aGF0IHRoZSBnaXZlbiBjYWxsYmFjayBpcyBjYWxsZWQgd2hlbiB0aGVcbiAqIGV2ZW50IG9jY3Vycy5cbiAqIEBmdW5jdGlvblxuICogQG5hbWUgUHViU3ViQ2hhbm5lbCNzdWJzY3JpYmVcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgZXZlbnQgdG8gYmluZCB0by5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gQSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbmV2ZXIgdGhlIGV2ZW50IGlzXG4gKiAgICAgICAgdHJpZ2dlcmVkLlxuICovXG5cbi8vIERpc2FibGUgXCJ1bnVzZWQgdmFyaWFibGVcIiBlcnJvcnMgZm9yIG51bGwgaW1wbGVtZW50YXRpb24gZGVjbGFyYXRpb25zXG4vKiBqc2hpbnQgdW51c2VkOmZhbHNlICovXG5cbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAaW1wbGVtZW50cyBQdWJTdWJDaGFubmVsXG4gKi9cblB1YlN1YkNoYW5uZWwuTnVsbENoYW5uZWwgPSBmdW5jdGlvbiAoKSB7IH07XG5cbi8qKlxuICogU3Vic2NyaWJlIHRvIGFuIGV2ZW50IHNvIHRoZSBnaXZlbiBjYWxsYmFjayBpcyBjYWxsZWQgd2hlbiB0aGUgZXZlbnQgb2NjdXJzLlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBldmVudCB0byBiaW5kIHRvLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBBIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuZXZlciB0aGUgZXZlbnQgaXNcbiAqICAgICAgICB0cmlnZ2VyZWQuXG4gKi9cblB1YlN1YkNoYW5uZWwuTnVsbENoYW5uZWwucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChldmVudE5hbWUsIGNhbGxiYWNrKSB7IH07XG5cbi8qKlxuICogVW5zdWJzY3JpYmUgYSBnaXZlbiBjYWxsYmFjayBmcm9tIGEgZ2l2ZW4gZXZlbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVcbiAqL1xuUHViU3ViQ2hhbm5lbC5OdWxsQ2hhbm5lbC5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoZXZlbnROYW1lKSB7IH07XG5cbi8vIFJlLWVuYWJsZSBcInVudXNlZCB2YXJpYWJsZVwiIGVycm9yXG4vKiBqc2hpbnQgdW51c2VkOnRydWUgKi9cblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBpbXBsZW1lbnRzIFB1YlN1YkNoYW5uZWxcbiAqL1xuUHViU3ViQ2hhbm5lbC5QdXNoZXJDaGFubmVsID0gZnVuY3Rpb24gKHB1c2hlckFwaUNoYW5uZWwpIHtcbiAgLyoqXG4gICAqIFRoZSBhY3R1YWwgUHVzaGVyIEFQSSdzIGNoYW5uZWwuXG4gICAqIEBwcml2YXRlIHtDaGFubmVsfVxuICAgKi9cbiAgdGhpcy5wdXNoZXJDaGFubmVsXyA9IHB1c2hlckFwaUNoYW5uZWw7XG5cbiAgLyoqXG4gICAqIENhY2hlIHByb3ZpZGVkIGNhbGxiYWNrcyBmb3IgZWFzeSB1bnN1YnNjcmliZS5cbiAgICogTWFwcyBldmVudCBuYW1lIHRvIGNhbGxiYWNrLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5jYWxsYmFja3NfID0ge307XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZSB0byBhbiBldmVudCBzbyB0aGUgZ2l2ZW4gY2FsbGJhY2sgaXMgY2FsbGVkIHdoZW4gdGhlIGV2ZW50IG9jY3Vycy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gY2FsbGJhY2tcbiAqIEB0aHJvd3Mge0Vycm9yfSBvbiBkb3VibGUtc3Vic2NyaWJlLlxuICovXG5QdWJTdWJDaGFubmVsLlB1c2hlckNoYW5uZWwucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChldmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gIHRoaXMucHVzaGVyQ2hhbm5lbF8uYmluZChldmVudE5hbWUsIGNhbGxiYWNrKTtcbiAgaWYgKHRoaXMuY2FsbGJhY2tzX1tldmVudE5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBbHJlYWR5IHN1YnNjcmliZWQgdG8gZXZlbnQgXCIgKyBldmVudE5hbWUpO1xuICB9XG4gIHRoaXMuY2FsbGJhY2tzX1tldmVudE5hbWVdID0gY2FsbGJhY2s7XG59O1xuXG4vKipcbiAqIFVuc3Vic2NyaWJlIGEgZ2l2ZW4gY2FsbGJhY2sgZnJvbSBhIGdpdmVuIGV2ZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXG4gKi9cblB1YlN1YkNoYW5uZWwuUHVzaGVyQ2hhbm5lbC5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gIHRoaXMucHVzaGVyQ2hhbm5lbF8udW5iaW5kKGV2ZW50TmFtZSwgdGhpcy5jYWxsYmFja3NfW2V2ZW50TmFtZV0pO1xuICBkZWxldGUgdGhpcy5jYWxsYmFja3NfW2V2ZW50TmFtZV07XG59O1xuIiwiLyoqXG4gKiBAb3ZlcnZpZXcgV3JhcHMgcmVtb3RlIHN0b3JhZ2UgaW50ZXJmYWNlIGFuZCBwb2xsaW5nIGJlaGF2aW9yLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIF8gPSByZXF1aXJlKCcuLi91dGlscycpLmdldExvZGFzaCgpO1xudmFyIE9ic2VydmFibGVFdmVudCA9IHJlcXVpcmUoJy4uL09ic2VydmFibGVFdmVudCcpO1xudmFyIE5ldFNpbUFwaSA9IHJlcXVpcmUoJy4vTmV0U2ltQXBpJyk7XG52YXIgTmV0U2ltR2xvYmFscyA9IHJlcXVpcmUoJy4vTmV0U2ltR2xvYmFscycpO1xudmFyIEFyZ3VtZW50VXRpbHMgPSByZXF1aXJlKCcuL0FyZ3VtZW50VXRpbHMnKTtcblxuLyoqXG4gKiBNYXhpbXVtIHRpbWUgKGluIG1pbGxpc2Vjb25kcykgdGhhdCB0YWJsZXMgc2hvdWxkIHdhaXQgYmV0d2VlbiBmdWxsIGNhY2hlXG4gKiB1cGRhdGVzIGZyb20gdGhlIHNlcnZlci5cbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbnZhciBERUZBVUxUX1BPTExJTkdfREVMQVlfTVMgPSAxMDAwMDtcblxuLyoqXG4gKiBNaW5pbXVtIHRpbWUgKGluIG1zKSB0byB3YWl0IGFmdGVyIGFuIGludmFsaWRhdGlvbiBldmVudCBiZWZvcmUgYXR0ZW1wdGluZ1xuICogdG8gdHJpZ2dlciBhIHJlZnJlc2ggcmVxdWVzdC4gIFRoaXMgcHJvZHVjZXMgYSB3aW5kb3cgaW4gd2hpY2ggY2x1c3RlcmVkXG4gKiBpbnZhbGlkYXRpb25zIGNhbiBiZSBjYXB0dXJlZCBhbmQgY29hbGVzY2VkIHRvZ2V0aGVyLlxuICogQHR5cGUge251bWJlcn1cbiAqL1xudmFyIERFRkFVTFRfTUlOSU1VTV9ERUxBWV9CRUZPUkVfUkVGUkVTSF9NUyA9IDI1MDtcblxuLyoqXG4gKiBNYXhpbXVtIGFkZGl0aW9uYWwgcmFuZG9tIGRlbGF5IChpbiBtcykgdG8gYWRkIGJlZm9yZSB0aGUgcmVmcmVzaCByZXF1ZXN0LlxuICogSGVscHMgc3ByZWFkIG91dCByZXF1ZXN0cyBmcm9tIGRpZmZlcmVudCBjbGllbnRzIHJlc3BvbmRpbmcgdG8gdGhlIHNhbWVcbiAqIGludmFsaWRhdGlvbiBldmVudHMuXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG52YXIgREVGQVVMVF9NQVhJTVVNX0RFTEFZX0pJVFRFUl9NUyA9IDIwMDtcblxuLyoqXG4gKiBNaW5pbXVtIHRpbWUgKGluIG1zKSB0byB3YWl0IGJldHdlZW4gcmVmcmVzaCByZXF1ZXN0cywgcmVnYXJkbGVzcyBvZiBob3dcbiAqIG1hbnkgaW52YWxpZGF0aW9uIGV2ZW50cyBvY2N1ci5cbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbnZhciBERUZBVUxUX01JTklNVU1fREVMQVlfQkVUV0VFTl9SRUZSRVNIRVNfTVMgPSAyNTAwO1xuXG4vKipcbiAqIFdyYXBzIHRoZSBhcHAgc3RvcmFnZSB0YWJsZSBBUEkgaW4gYW4gb2JqZWN0IHdpdGggbG9jYWxcbiAqIGNhY2hpbmcgYW5kIGNhbGxiYWNrcywgd2hpY2ggcHJvdmlkZXMgYSBub3RpZmljYXRpb24gQVBJIHRvIHRoZSByZXN0XG4gKiBvZiB0aGUgTmV0U2ltIGNvZGUuXG4gKiBAcGFyYW0geyFQdWJTdWJDaGFubmVsfSBjaGFubmVsIC0gVGhlIHB1YnN1YiBjaGFubmVsIHVzZWQgdG8gbGlzdGVuXG4gKiAgICAgICAgZm9yIGNoYW5nZXMgdG8gdGhlIHRhYmxlLmNlbGxQYWRkaW5nXG4gKiBAcGFyYW0geyFzdHJpbmd9IHNoYXJkSUQgLSBUaGUgc2hhcmQgSUQgc3BlY2lmaWMgdG8gdGhpcyBjbGFzcycgTmV0U2ltIGluc3RhbmNlLlxuICogQHBhcmFtIHshc3RyaW5nfSB0YWJsZU5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcmVtb3RlIHN0b3JhZ2UgdGFibGUgdG8gd3JhcC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBBZGRpdGlvbmFsIHRhYmxlIGNvbmZpZ3VyYXRpb24gb3B0aW9uc1xuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy51c2VJbmNyZW1lbnRhbFJlZnJlc2hdIC0gZGVmYXVsdHMgdG8gRkFMU0UuICBJZlxuICogICAgICAgIFRSVUUsIHRoaXMgdGFibGUgd2lsbCBvbmx5IHJlcXVlc3QgY29udGVudCB0aGF0IGlzIG5ldyBzaW5jZSBpdHNcbiAqICAgICAgICBsYXN0IHJlZnJlc2gsIG5vdCB0aGUgZW50aXJlIHRhYmxlIGNvbnRlbnRzLiAgQ3VycmVudGx5IHRoaXMgb3B0aW9uXG4gKiAgICAgICAgaXMgbm90IHNhZmUgdG8gdXNlIGlmIHlvdSBjYXJlIGFib3V0IHVwZGF0ZXMgb3IgZGVsZXRlcyBpbiB0aGUgdGFibGUuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWluaW11bURlbGF5QmVmb3JlUmVmcmVzaF0gLSBNaW5pbXVtIHRpbWUgKGluIG1zKVxuICogICAgICAgIHRvIHdhaXQgYWZ0ZXIgYW4gaW52YWxpZGF0aW9uIGV2ZW50IGJlZm9yZSBhdHRlbXB0aW5nIHRvIHRyaWdnZXIgYVxuICogICAgICAgIHJlZnJlc2ggcmVxdWVzdC4gIFRoaXMgcHJvZHVjZXMgYSB3aW5kb3cgaW4gd2hpY2ggY2x1c3RlcmVkXG4gKiAgICAgICAgaW52YWxpZGF0aW9ucyBjYW4gYmUgY2FwdHVyZWQgYW5kIGNvYWxlc2NlZCB0b2dldGhlci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhpbXVtSml0dGVyRGVsYXldIC0gTWF4aW11bSBhZGRpdGlvbmFsIHJhbmRvbVxuICogICAgICAgIGRlbGF5IChpbiBtcykgdG8gYWRkIGJlZm9yZSB0aGUgcmVmcmVzaCByZXF1ZXN0LiAgSGVscHMgc3ByZWFkIG91dFxuICogICAgICAgIHJlcXVlc3RzIGZyb20gZGlmZmVyZW50IGNsaWVudHMgcmVzcG9uZGluZyB0byB0aGUgc2FtZSBpbnZhbGlkYXRpb25cbiAqICAgICAgICBldmVudHMuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWluaW11bURlbGF5QmV0d2VlblJlZnJlc2hlc10gLSBNaW5pbXVtIHRpbWUgKGluIG1zKVxuICogICAgICAgIHRvIHdhaXQgYmV0d2VlbiByZWZyZXNoIHJlcXVlc3RzLCByZWdhcmRsZXNzIG9mIGhvdyBtYW55IGludmFsaWRhdGlvblxuICogICAgICAgIGV2ZW50cyBvY2N1ci5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHRocm93cyB7RXJyb3J9IGlmIHdyb25nIG51bWJlciBvZiBhcmd1bWVudHMgYXJlIHByb3ZpZGVkLlxuICogQHRocm93cyB7VHlwZUVycm9yfSBpZiBpbnZhbGlkIHR5cGVzIGFyZSBwYXNzZWQgaW4gdGhlIG9wdGlvbnMgb2JqZWN0LlxuICovXG52YXIgTmV0U2ltVGFibGUgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjaGFubmVsLCBzaGFyZElELCB0YWJsZU5hbWUsIG9wdGlvbnMpIHtcbiAgQXJndW1lbnRVdGlscy52YWxpZGF0ZVJlcXVpcmVkKGNoYW5uZWwsICdjaGFubmVsJyk7XG4gIEFyZ3VtZW50VXRpbHMudmFsaWRhdGVSZXF1aXJlZChzaGFyZElELCAnc2hhcmRJRCcsIEFyZ3VtZW50VXRpbHMuaXNTdHJpbmcpO1xuICBBcmd1bWVudFV0aWxzLnZhbGlkYXRlUmVxdWlyZWQodGFibGVOYW1lLCAndGFibGVOYW1lJywgQXJndW1lbnRVdGlscy5pc1N0cmluZyk7XG4gIG9wdGlvbnMgPSBBcmd1bWVudFV0aWxzLmV4dGVuZE9wdGlvbnNPYmplY3Qob3B0aW9ucyk7XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLnRhYmxlTmFtZV8gPSB0YWJsZU5hbWU7XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlIHtQdWJTdWJDaGFubmVsfVxuICAgKi9cbiAgdGhpcy5jaGFubmVsXyA9IGNoYW5uZWw7XG4gIHRoaXMuc3Vic2NyaWJlKCk7XG5cbiAgLyoqXG4gICAqIEFQSSBvYmplY3QgZm9yIG1ha2luZyByZW1vdGUgY2FsbHNcbiAgICogQHR5cGUge05ldFNpbUFwaX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuYXBpXyA9IE5ldFNpbUFwaS5tYWtlVGFibGVBcGkoc2hhcmRJRCwgdGFibGVOYW1lKTtcblxuICAvKipcbiAgICogRXZlbnQgdGhhdCBmaXJlcyB3aGVuIGZ1bGwgdGFibGUgdXBkYXRlcyBpbmRpY2F0ZSBhIGNoYW5nZSxcbiAgICogd2hlbiByb3dzIGFyZSBhZGRlZCwgb3Igd2hlbiByb3dzIGFyZSByZW1vdmVkLCBvciB3aGVuIHJvd3MgY2hhbmdlLlxuICAgKiBAdHlwZSB7T2JzZXJ2YWJsZUV2ZW50fVxuICAgKi9cbiAgdGhpcy50YWJsZUNoYW5nZSA9IG5ldyBPYnNlcnZhYmxlRXZlbnQoKTtcblxuICAvKipcbiAgICogU3RvcmUgdGFibGUgY29udGVudHMgbG9jYWxseSwgc28gd2UgY2FuIGRldGVjdCB3aGVuIGNoYW5nZXMgb2NjdXIuXG4gICAqIEBwcml2YXRlIHtPYmplY3R9XG4gICAqL1xuICB0aGlzLmNhY2hlXyA9IHt9O1xuXG4gIC8qKlxuICAgKiBUaGUgcm93IElEIG9mIHRoZSBtb3N0IHJlY2VudGx5IGluc2VydGVkIHJvdyByZXRyaWV2ZWQgZnJvbSByZW1vdGUgc3RvcmFnZS5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubGF0ZXN0Um93SURfID0gMDtcblxuICAvKipcbiAgICogVW5peCB0aW1lc3RhbXAgZm9yIGxhc3QgdGltZSB0aGlzIHRhYmxlJ3MgY2FjaGUgY29udGVudHMgd2VyZSBmdWxseVxuICAgKiB1cGRhdGVkLiAgVXNlZCB0byBkZXRlcm1pbmUgd2hlbiB0byBwb2xsIHRoZSBzZXJ2ZXIgZm9yIGNoYW5nZXMuXG4gICAqIEBwcml2YXRlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLmxhc3RSZWZyZXNoVGltZV8gPSAwO1xuXG4gIC8qKlxuICAgKiBJZiBUUlVFLCB3aWxsIG9ubHkgcmVxdWVzdCBkZWx0YXMgZnJvbSByZW1vdGUgc3RvcmFnZS4gIEN1cnJlbnRseVxuICAgKiB1bnNhZmUgaWYgd2UgY2FyZSBhYm91dCBtb3JlIHRoYW4gaW5zZXJ0cyB0byB0aGUgdGFibGUuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy51c2VJbmNyZW1lbnRhbFJlZnJlc2hfID0gb3B0aW9ucy5nZXQoXG4gICAgICAndXNlSW5jcmVtZW50YWxSZWZyZXNoJyxcbiAgICAgIEFyZ3VtZW50VXRpbHMuaXNCb29sZWFuLFxuICAgICAgZmFsc2UpO1xuXG4gIC8qKlxuICAgKiBNaW5pbXVtIHRpbWUgKGluIG1zKSB0byB3YWl0IGFmdGVyIGFuIGludmFsaWRhdGlvbiBldmVudCBiZWZvcmUgYXR0ZW1wdGluZ1xuICAgKiB0byB0cmlnZ2VyIGEgcmVmcmVzaCByZXF1ZXN0LiAgVGhpcyBwcm9kdWNlcyBhIHdpbmRvdyBpbiB3aGljaCBjbHVzdGVyZWRcbiAgICogaW52YWxpZGF0aW9ucyBjYW4gYmUgY2FwdHVyZWQgYW5kIGNvYWxlc2NlZCB0b2dldGhlci5cbiAgICogQHByaXZhdGUge251bWJlcn1cbiAgICovXG4gIHRoaXMubWluaW11bURlbGF5QmVmb3JlUmVmcmVzaF8gPSBvcHRpb25zLmdldChcbiAgICAgICdtaW5pbXVtRGVsYXlCZWZvcmVSZWZyZXNoJyxcbiAgICAgIEFyZ3VtZW50VXRpbHMuaXNQb3NpdGl2ZU5vbmluZmluaXRlTnVtYmVyLFxuICAgICAgREVGQVVMVF9NSU5JTVVNX0RFTEFZX0JFRk9SRV9SRUZSRVNIX01TKTtcblxuICAvKipcbiAgICogTWF4aW11bSBhZGRpdGlvbmFsIHJhbmRvbSBkZWxheSAoaW4gbXMpIHRvIGFkZCBiZWZvcmUgdGhlIHJlZnJlc2ggcmVxdWVzdC5cbiAgICogSGVscHMgc3ByZWFkIG91dCByZXF1ZXN0cyBmcm9tIGRpZmZlcmVudCBjbGllbnRzIHJlc3BvbmRpbmcgdG8gdGhlIHNhbWVcbiAgICogaW52YWxpZGF0aW9uIGV2ZW50cy5cbiAgICogQHByaXZhdGUge251bWJlcn1cbiAgICovXG4gIHRoaXMubWF4aW11bUppdHRlckRlbGF5XyA9IG9wdGlvbnMuZ2V0KFxuICAgICAgJ21heGltdW1KaXR0ZXJEZWxheScsXG4gICAgICBBcmd1bWVudFV0aWxzLmlzUG9zaXRpdmVOb25pbmZpbml0ZU51bWJlcixcbiAgICAgIERFRkFVTFRfTUFYSU1VTV9ERUxBWV9KSVRURVJfTVMpO1xuXG4gIC8qKlxuICAgKiBNaW5pbXVtIHRpbWUgKGluIG1zKSB0byB3YWl0IGJldHdlZW4gcmVmcmVzaCByZXF1ZXN0cywgcmVnYXJkbGVzcyBvZiBob3dcbiAgICogbWFueSBpbnZhbGlkYXRpb24gZXZlbnRzIG9jY3VyLlxuICAgKiBAcHJpdmF0ZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5taW5pbXVtRGVsYXlCZXR3ZWVuUmVmcmVzaGVzXyA9IG9wdGlvbnMuZ2V0KFxuICAgICAgJ21pbmltdW1EZWxheUJldHdlZW5SZWZyZXNoZXMnLFxuICAgICAgQXJndW1lbnRVdGlscy5pc1Bvc2l0aXZlTm9uaW5maW5pdGVOdW1iZXIsXG4gICAgICBERUZBVUxUX01JTklNVU1fREVMQVlfQkVUV0VFTl9SRUZSRVNIRVNfTVMpO1xuXG4gIC8qKlxuICAgKiBNaW5pbXVtIHRpbWUgKGluIG1pbGxpc2Vjb25kcykgdG8gd2FpdCBiZXR3ZWVuIHB1bGxpbmcgZnVsbCB0YWJsZSBjb250ZW50c1xuICAgKiBmcm9tIHJlbW90ZSBzdG9yYWdlLlxuICAgKiBAcHJpdmF0ZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5wb2xsaW5nSW50ZXJ2YWxfID0gREVGQVVMVF9QT0xMSU5HX0RFTEFZX01TO1xuXG4gIC8qKlxuICAgKiBUaHJvdHRsZWQgdmVyc2lvbiAoc3BlY2lmaWMgdG8gdGhpcyBpbnN0YW5jZSkgb2YgdGhlIHJlZnJlc2ggb3BlcmF0aW9uLFxuICAgKiB1c2VkIHRvIGNvYWxlc2NlIHJlZnJlc2ggcmVxdWVzdHMuXG4gICAqIEBwcml2YXRlIHtmdW5jdGlvbn1cbiAgICovXG4gIHRoaXMucmVmcmVzaFRhYmxlXyA9IHRoaXMubWFrZVRocm90dGxlZFJlZnJlc2hfKCk7XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBjb25maWd1cmVkIHRhYmxlIG5hbWUuXG4gKi9cbk5ldFNpbVRhYmxlLnByb3RvdHlwZS5nZXRUYWJsZU5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLnRhYmxlTmFtZV87XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZXMgdGhpcyB0YWJsZSdzIG9uUHViU3ViRXZlbnQgbWV0aG9kIHRvIGV2ZW50cyBmb3IgdGhpcyB0YWJsZVxuICogb24gb3VyIGxvY2FsIGNoYW5uZWwuXG4gKi9cbk5ldFNpbVRhYmxlLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuY2hhbm5lbF8uc3Vic2NyaWJlKHRoaXMudGFibGVOYW1lXyxcbiAgICAgIE5ldFNpbVRhYmxlLnByb3RvdHlwZS5vblB1YlN1YkV2ZW50Xy5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogVW51YnNjcmliZXMgdGhlIHNhdmVkIGNhbGxiYWNrIGZyb20gZXZlbnRzIGZvciB0aGlzIHRhYmxlIG9uIG91clxuICogbG9jYWwgY2hhbm5lbC5cbiAqL1xuTmV0U2ltVGFibGUucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmNoYW5uZWxfLnVuc3Vic2NyaWJlKHRoaXMudGFibGVOYW1lXyk7XG59O1xuXG4vKipcbiAqIEFzeW5jaHJvbm91c2x5IHJldHJpZXZlIG5ldy91cGRhdGVkIHRhYmxlIGNvbnRlbnQgZnJvbSB0aGUgc2VydmVyLCB1c2luZ1xuICogd2hhdGV2ZXIgbWV0aG9kIGlzIG1vc3QgYXBwcm9wcmlhdGUgdG8gdGhpcyB0YWJsZSdzIGNvbmZpZ3VyYXRpb24uXG4gKiBXaGVuIGRvbmUsIHVwZGF0ZXMgdGhlIGxvY2FsIGNhY2hlIGFuZCBoaXRzIHRoZSBwcm92aWRlZCBjYWxsYmFjayB0b1xuICogaW5kaWNhdGUgY29tcGxldGlvbi5cbiAqIEBwYXJhbSB7Tm9kZVN0eWxlQ2FsbGJhY2t9IFtjYWxsYmFja10gLSBpbmRpY2F0ZXMgY29tcGxldGlvbiBvZiB0aGUgb3BlcmF0aW9uLlxuICogQHJldHVybnMge2pRdWVyeS5Qcm9taXNlfSBHdWFyYW50ZWVkIHRvIHJlc29sdmUgYWZ0ZXIgdGhlIGNhY2hlIHVwZGF0ZSxcbiAqICAgICAgICAgIHNvIC5kb25lKCkgb3BlcmF0aW9ucyBjYW4gaW50ZXJhY3Qgd2l0aCB0aGUgY2FjaGUuXG4gKi9cbk5ldFNpbVRhYmxlLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307XG4gIHZhciBkZWZlcnJlZCA9ICQuRGVmZXJyZWQoKTtcblxuICAvLyBXaGljaCBBUEkgY2FsbCB0byBtYWtlXG4gIHZhciBhcGlDYWxsID0gdGhpcy51c2VJbmNyZW1lbnRhbFJlZnJlc2hfID9cbiAgICAgIHRoaXMuYXBpXy5hbGxSb3dzRnJvbUlELmJpbmQodGhpcy5hcGlfLCB0aGlzLmxhdGVzdFJvd0lEXyArIDEpIDpcbiAgICAgIHRoaXMuYXBpXy5hbGxSb3dzLmJpbmQodGhpcy5hcGlfKTtcblxuICAvLyBIb3cgdG8gdXBkYXRlIHRoZSBjYWNoZSAoZGVwZW5kcyBvbiB3aGF0IHdlIGV4cGVjdCB0byBnZXQgYmFjaylcbiAgdmFyIGNhY2hlVXBkYXRlID0gdGhpcy51c2VJbmNyZW1lbnRhbFJlZnJlc2hfID9cbiAgICAgIHRoaXMuaW5jcmVtZW50YWxDYWNoZVVwZGF0ZV8uYmluZCh0aGlzKSA6XG4gICAgICB0aGlzLmZ1bGxDYWNoZVVwZGF0ZV8uYmluZCh0aGlzKTtcblxuICAvLyBXaGF0IHNob3VsZCBoYXBwZW4gd2hlbiB0aGUgQVBJIGNhbGwgY29tcGxldGVzLlxuICB2YXIgYXBpQ2FsbENhbGxiYWNrID0gZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGNhbGxiYWNrKGVyciwgZGF0YSk7XG4gICAgICBkZWZlcnJlZC5yZWplY3QoZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FjaGVVcGRhdGUoZGF0YSk7XG4gICAgICBjYWxsYmFjayhlcnIsIGRhdGEpO1xuICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgIH1cbiAgfTtcblxuICAvLyBEbyB3ZSBmaXJlIHRoZSBBUEkgY2FsbCBub3csIG9yIGFmdGVyIGEgcmFuZG9tIGRlbGF5P1xuICBpZiAodGhpcy5tYXhpbXVtSml0dGVyRGVsYXlfID09PSAwKSB7XG4gICAgYXBpQ2FsbChhcGlDYWxsQ2FsbGJhY2spO1xuICB9IGVsc2Uge1xuICAgIHZhciBqaXR0ZXJUaW1lID0gTmV0U2ltR2xvYmFscy5yYW5kb21JbnRJblJhbmdlKDAsIHRoaXMubWF4aW11bUppdHRlckRlbGF5Xyk7XG4gICAgc2V0VGltZW91dChhcGlDYWxsLmJpbmQodGhpcywgYXBpQ2FsbENhbGxiYWNrKSwgaml0dGVyVGltZSk7XG4gIH1cblxuICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xufTtcblxuLyoqXG4gKiBHZW5lcmF0ZSB0aHJvdHRsZWQgcmVmcmVzaCBmdW5jdGlvbiB3aGljaCB3aWxsIGdlbmVyYXRlIGFjdHVhbCBzZXJ2ZXJcbiAqIHJlcXVlc3RzIGF0IHRoZSBtYXhpbXVtIGdpdmVuIHJhdGUgbm8gbWF0dGVyIGhvdyBmYXN0IGl0IGlzIGNhbGxlZC4gVGhpc1xuICogYWxsb3dzIHVzIHRvIGNvYWxlc2NlIHJlZnJlc2hBbGwgZXZlbnRzIGFuZCByZWR1Y2Ugc2VydmVyIGxvYWQuXG4gKlxuICogSG93IHRoaXMgd29ya3M6XG4gKiBXcmFwcyBhIGxvbmdlciB0aHJvdHRsZSB3aXRoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIGV2ZW50cyBpbiBhIHNob3J0ZXIgZGVib3VuY2VcbiAqIHdpdGggYSBtYXhpbXVtIHdhaXQgdGltZS4gIFRoaXMgZ2l2ZXMgZ3JvdXBlZCBldmVudHMgYSBjaGFuY2UgdG8gY29hbGVzY2VcbiAqIHdpdGhvdXQgdHJpZ2dlcmluZyBhbiB1bm5lZWRlZCB0cmFpbGluZyBldmVudCBvbiB0aGUgbG9uZ2VyIHRocm90dGxlLlxuICpcbiAqIEhlcmUgYXJlIHNvbWUgZXhhbXBsZXMgb2Ygd2hhdCdzIGdvaW5nIG9uLCBpZiB1c2luZyBhIDEwMDBtcyB0aHJvdHRsZVxuICogd3JhcHBlZCBpbiBhIDI1MG1zIGRlYm91bmNlLlxuICpcbiAqIEluIGxvdyB0cmFmZmljIHdlIGNvbGxhcHNlIHR3byBncm91cHMgb2YgZXZlbnRzIHRvIGp1c3QgdHdvIGV2ZW50cy5cbiAqXG4gKiBvcmlnaW5hbCBldmVudHMgICA6ICAgfHwgfCAgICAgICAgICAgICAgICAgICAgIHwgfFxuICogZGVib3VuY2VkICAgICAgICAgOiAgIC0yNTA+fCAgICAgICAgICAgICAgICAgICAtMjUwPnxcbiAqIHRoZW4gdGhyb3R0bGVkICAgIDogICAgICAgIHwtLS0tLS0tLS0tLS0tLTEwMDAtPiAgICB8LS0tLS0tLS0tLS0tLS0xMDAwLT5cbiAqXG4gKiBJbiBoaWdoZXIgdHJhZmZpYyB3ZSBjb2xsYXBzZSB0aGUgZ3JvdXBzIGJ1dCBzdGlsbCBrZWVwIGV2ZW50cyBhdCBsZWFzdFxuICogb25lIHNlY29uZCBhcGFydC5cbiAqXG4gKiBvcmlnaW5hbCBldmVudHMgICA6ICAgfHwgfCAgICAgICAgfCAgICAgfCAgICAgIHwgfFxuICogZGVib3VuY2VkICAgICAgICAgOiAgIC0yNTA+fCAgICAgIC0yNTA+fC0yNTA+fCAtMjUwPnxcbiAqIHRoZW4gdGhyb3R0bGVkICAgIDogICAgICAgIHwtLS0tLS0tLS0tLS0tLTEwMDAtPnwtLS0tLS0tLS0tLS0tLTEwMDAtPnxcbiAqXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX1cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVRhYmxlLnByb3RvdHlwZS5tYWtlVGhyb3R0bGVkUmVmcmVzaF8gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aHJvdHRsZWRSZWZyZXNoID0gXy50aHJvdHRsZSh0aGlzLnJlZnJlc2guYmluZCh0aGlzKSxcbiAgICAgIHRoaXMubWluaW11bURlbGF5QmV0d2VlblJlZnJlc2hlc18pO1xuICByZXR1cm4gXy5kZWJvdW5jZSh0aHJvdHRsZWRSZWZyZXNoLCB0aGlzLm1pbmltdW1EZWxheUJlZm9yZVJlZnJlc2hfLFxuICAgICAge21heFdhaXQ6IHRoaXMubWluaW11bURlbGF5QmVmb3JlUmVmcmVzaF99KTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge0FycmF5fSBhbGwgbG9jYWxseSBjYWNoZWQgdGFibGUgcm93c1xuICovXG5OZXRTaW1UYWJsZS5wcm90b3R5cGUucmVhZEFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuYXJyYXlGcm9tQ2FjaGVfKCk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7IW51bWJlcn0gZmlyc3RSb3dJRFxuICogQHJldHVybnMge0FycmF5fSBhbGwgbG9jYWxseSBjYWNoZWQgdGFibGUgcm93cyBoYXZpbmcgcm93IElEID49IGZpcnN0Um93SURcbiAqL1xuTmV0U2ltVGFibGUucHJvdG90eXBlLnJlYWRBbGxGcm9tSUQgPSBmdW5jdGlvbiAoZmlyc3RSb3dJRCkge1xuICByZXR1cm4gdGhpcy5hcnJheUZyb21DYWNoZV8oZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBrZXkgPj0gZmlyc3RSb3dJRDtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7IW51bWJlcn0gaWRcbiAqIEBwYXJhbSB7IU5vZGVTdHlsZUNhbGxiYWNrfSBjYWxsYmFja1xuICovXG5OZXRTaW1UYWJsZS5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uIChpZCwgY2FsbGJhY2spIHtcbiAgdGhpcy5hcGlfLmZldGNoUm93KGlkLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XG4gICAgaWYgKGVyciA9PT0gbnVsbCkge1xuICAgICAgdGhpcy51cGRhdGVDYWNoZVJvd18oaWQsIGRhdGEpO1xuICAgIH1cbiAgICBjYWxsYmFjayhlcnIsIGRhdGEpO1xuICB9LmJpbmQodGhpcykpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsdWVcbiAqIEBwYXJhbSB7IU5vZGVTdHlsZUNhbGxiYWNrfSBjYWxsYmFja1xuICovXG5OZXRTaW1UYWJsZS5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKHZhbHVlLCBjYWxsYmFjaykge1xuICB0aGlzLmFwaV8uY3JlYXRlUm93KHZhbHVlLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XG4gICAgaWYgKGVyciA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5hZGRSb3dUb0NhY2hlXyhkYXRhKTtcbiAgICB9XG4gICAgY2FsbGJhY2soZXJyLCBkYXRhKTtcbiAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3RbXX0gdmFsdWVzXG4gKiBAcGFyYW0geyFOb2RlU3R5bGVDYWxsYmFja30gY2FsbGJhY2tcbiAqL1xuTmV0U2ltVGFibGUucHJvdG90eXBlLm11bHRpQ3JlYXRlID0gZnVuY3Rpb24gKHZhbHVlcywgY2FsbGJhY2spIHtcbiAgdGhpcy5hcGlfLmNyZWF0ZVJvdyh2YWx1ZXMsIGZ1bmN0aW9uIChlcnIsIGRhdGFzKSB7XG4gICAgaWYgKGVyciA9PT0gbnVsbCkge1xuICAgICAgZGF0YXMuZm9yRWFjaChmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB0aGlzLmFkZFJvd1RvQ2FjaGVfKGRhdGEpO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfVxuICAgIGNhbGxiYWNrKGVyciwgZGF0YXMpO1xuICB9LmJpbmQodGhpcykpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0geyFudW1iZXJ9IGlkXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsdWVcbiAqIEBwYXJhbSB7IU5vZGVTdHlsZUNhbGxiYWNrfSBjYWxsYmFja1xuICovXG5OZXRTaW1UYWJsZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGlkLCB2YWx1ZSwgY2FsbGJhY2spIHtcbiAgdGhpcy5hcGlfLnVwZGF0ZVJvdyhpZCwgdmFsdWUsIGZ1bmN0aW9uIChlcnIsIHN1Y2Nlc3MpIHtcbiAgICBpZiAoZXJyID09PSBudWxsKSB7XG4gICAgICB0aGlzLnVwZGF0ZUNhY2hlUm93XyhpZCwgdmFsdWUpO1xuICAgIH1cbiAgICBjYWxsYmFjayhlcnIsIHN1Y2Nlc3MpO1xuICB9LmJpbmQodGhpcykpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0geyFudW1iZXJ9IGlkXG4gKiBAcGFyYW0geyFOb2RlU3R5bGVDYWxsYmFja30gY2FsbGJhY2tcbiAqL1xuTmV0U2ltVGFibGUucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIChpZCwgY2FsbGJhY2spIHtcbiAgdGhpcy5kZWxldGVNYW55KFtpZF0sIGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogRGVsZXRlcyBtdWx0aXBsZSByb3dzIGZyb20gdGhlIHRhYmxlLlxuICogQHBhcmFtIHshbnVtYmVyW119IGlkc1xuICogQHBhcmFtIHshTm9kZVN0eWxlQ2FsbGJhY2t9IGNhbGxiYWNrXG4gKi9cbk5ldFNpbVRhYmxlLnByb3RvdHlwZS5kZWxldGVNYW55ID0gZnVuY3Rpb24gKGlkcywgY2FsbGJhY2spIHtcbiAgdGhpcy5hcGlfLmRlbGV0ZVJvd3MoaWRzLCBmdW5jdGlvbiAoZXJyLCBzdWNjZXNzKSB7XG4gICAgaWYgKGVyciA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5yZW1vdmVSb3dzRnJvbUNhY2hlXyhpZHMpO1xuICAgIH1cbiAgICBjYWxsYmFjayhlcnIsIHN1Y2Nlc3MpO1xuICB9LmJpbmQodGhpcykpO1xufTtcblxuLyoqXG4gKiBEZWxldGUgYSByb3cgdXNpbmcgYSBzeW5jaHJvbm91cyBjYWxsLiBGb3IgdXNlIHdoZW4gbmF2aWdhdGluZyBhd2F5IGZyb21cbiAqIHRoZSBwYWdlOyBtb3N0IG9mIHRoZSB0aW1lIGFuIGFzeW5jaHJvbm91cyBjYWxsIGlzIHByZWZlcnJlZC5cbiAqIEBwYXJhbSB7IW51bWJlcn0gaWRcbiAqL1xuTmV0U2ltVGFibGUucHJvdG90eXBlLnN5bmNocm9ub3VzRGVsZXRlID0gZnVuY3Rpb24gKGlkKSB7XG4gIHZhciBhc3luYyA9IGZhbHNlOyAvLyBGb3JjZSBzeW5jaHJvbm91cyByZXF1ZXN0XG4gIHRoaXMuYXBpXy5kZWxldGVSb3dzKFtpZF0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICAvLyBOb3RoaW5nIHdlIGNhbiByZWFsbHkgZG8gd2l0aCB0aGUgZXJyb3IsIGFzIHdlJ3JlIGluIHRoZSBwcm9jZXNzIG9mXG4gICAgICAvLyBuYXZpZ2F0aW5nIGF3YXkuIFRocm93IHNvIHRoYXQgaGlnaCBpbmNpZGVuY2UgcmF0ZXMgd2lsbCBzaG93IHVwIGluXG4gICAgICAvLyBuZXcgcmVsaWMuXG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICAgIHRoaXMucmVtb3ZlUm93c0Zyb21DYWNoZV8oW2lkXSk7XG4gIH0uYmluZCh0aGlzKSwgYXN5bmMpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5fSBhbGxSb3dzXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1UYWJsZS5wcm90b3R5cGUuZnVsbENhY2hlVXBkYXRlXyA9IGZ1bmN0aW9uIChhbGxSb3dzKSB7XG4gIC8vIFJlYnVpbGQgZW50aXJlIGNhY2hlXG4gIHZhciBtYXhSb3dJRCA9IDA7XG4gIHZhciBuZXdDYWNoZSA9IGFsbFJvd3MucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBjdXJyZW50Um93KSB7XG4gICAgcHJldltjdXJyZW50Um93LmlkXSA9IGN1cnJlbnRSb3c7XG4gICAgaWYgKGN1cnJlbnRSb3cuaWQgPiBtYXhSb3dJRCkge1xuICAgICAgbWF4Um93SUQgPSBjdXJyZW50Um93LmlkO1xuICAgIH1cbiAgICByZXR1cm4gcHJldjtcbiAgfSwge30pO1xuXG4gIC8vIENoZWNrIGZvciBjaGFuZ2VzLCBpZiBhbnl0aGluZyBjaGFuZ2VkIG5vdGlmeSBhbGwgb2JzZXJ2ZXJzIG9uIHRhYmxlLlxuICBpZiAoIV8uaXNFcXVhbCh0aGlzLmNhY2hlXywgbmV3Q2FjaGUpKSB7XG4gICAgdGhpcy5jYWNoZV8gPSBuZXdDYWNoZTtcbiAgICB0aGlzLmxhdGVzdFJvd0lEXyA9IG1heFJvd0lEO1xuICAgIHRoaXMudGFibGVDaGFuZ2Uubm90aWZ5T2JzZXJ2ZXJzKCk7XG4gIH1cblxuICB0aGlzLmxhc3RSZWZyZXNoVGltZV8gPSBEYXRlLm5vdygpO1xufTtcblxuLyoqXG4gKiBBZGQgYW5kIHVwZGF0ZSByb3dzIGluIHRoZSBsb2NhbCBjYWNoZSBmcm9tIHRoZSBnaXZlbiBzZXQgb2YgbmV3IHJvd3NcbiAqIChwcm9iYWJseSByZXRyaWV2ZWQgZnJvbSB0aGUgc2VydmVyKS5cbiAqIEBwYXJhbSB7QXJyYXl9IG5ld1Jvd3NcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVRhYmxlLnByb3RvdHlwZS5pbmNyZW1lbnRhbENhY2hlVXBkYXRlXyA9IGZ1bmN0aW9uIChuZXdSb3dzKSB7XG4gIGlmIChuZXdSb3dzLmxlbmd0aCA+IDApIHtcbiAgICB2YXIgbWF4Um93SUQgPSAwO1xuICAgIG5ld1Jvd3MuZm9yRWFjaChmdW5jdGlvbiAocm93KSB7XG4gICAgICB0aGlzLmNhY2hlX1tyb3cuaWRdID0gcm93O1xuICAgICAgbWF4Um93SUQgPSBNYXRoLm1heChtYXhSb3dJRCwgcm93LmlkKTtcbiAgICB9LCB0aGlzKTtcbiAgICB0aGlzLmxhdGVzdFJvd0lEXyA9IG1heFJvd0lEO1xuICAgIHRoaXMudGFibGVDaGFuZ2Uubm90aWZ5T2JzZXJ2ZXJzKCk7XG4gIH1cblxuICB0aGlzLmxhc3RSZWZyZXNoVGltZV8gPSBEYXRlLm5vdygpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0geyFPYmplY3R9IHJvd1xuICogQHBhcmFtIHshbnVtYmVyfSByb3cuaWRcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVRhYmxlLnByb3RvdHlwZS5hZGRSb3dUb0NhY2hlXyA9IGZ1bmN0aW9uIChyb3cpIHtcbiAgdGhpcy5jYWNoZV9bcm93LmlkXSA9IHJvdztcbiAgdGhpcy50YWJsZUNoYW5nZS5ub3RpZnlPYnNlcnZlcnMoKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHshbnVtYmVyW119IGlkc1xuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltVGFibGUucHJvdG90eXBlLnJlbW92ZVJvd3NGcm9tQ2FjaGVfID0gZnVuY3Rpb24gKGlkcykge1xuICB2YXIgY2FjaGVDaGFuZ2VkID0gZmFsc2U7XG4gIGlkcy5mb3JFYWNoKGZ1bmN0aW9uIChpZCkge1xuICAgIGlmICh0aGlzLmNhY2hlX1tpZF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgZGVsZXRlIHRoaXMuY2FjaGVfW2lkXTtcbiAgICAgIGNhY2hlQ2hhbmdlZCA9IHRydWU7XG4gICAgfVxuICB9LCB0aGlzKTtcblxuICBpZiAoY2FjaGVDaGFuZ2VkKSB7XG4gICAgdGhpcy50YWJsZUNoYW5nZS5ub3RpZnlPYnNlcnZlcnMoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0geyFudW1iZXJ9IGlkXG4gKiBAcGFyYW0geyFPYmplY3R9IHJvd1xuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltVGFibGUucHJvdG90eXBlLnVwZGF0ZUNhY2hlUm93XyA9IGZ1bmN0aW9uIChpZCwgcm93KSB7XG4gIHZhciBvbGRSb3cgPSB0aGlzLmNhY2hlX1tpZF07XG4gIHZhciBuZXdSb3cgPSByb3c7XG5cbiAgLy8gTWFudWFsbHkgYXBwbHkgSURzIHdoaWNoIHNob3VsZCBiZSBwcmVzZW50IGluIHJvdy5cbiAgbmV3Um93LmlkID0gaWQ7XG4gIG5ld1Jvdy51dWlkID0gb2xkUm93LnV1aWQ7XG5cbiAgaWYgKCFfLmlzRXF1YWwob2xkUm93LCBuZXdSb3cpKSB7XG4gICAgdGhpcy5jYWNoZV9baWRdID0gbmV3Um93O1xuICAgIHRoaXMudGFibGVDaGFuZ2Uubm90aWZ5T2JzZXJ2ZXJzKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtmdW5jdGlvbihrZXksIHZhbHVlKX0gW3ByZWRpY2F0ZV0gLSBBIGNvbmRpdGlvbiBvbiByZXR1cm5pbmcgdGhlIHJvdy5cbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVRhYmxlLnByb3RvdHlwZS5hcnJheUZyb21DYWNoZV8gPSBmdW5jdGlvbiAocHJlZGljYXRlKSB7XG4gIHByZWRpY2F0ZSA9IHByZWRpY2F0ZSB8fCBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9O1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGsgaW4gdGhpcy5jYWNoZV8pIHtcbiAgICBpZiAodGhpcy5jYWNoZV8uaGFzT3duUHJvcGVydHkoaykgJiYgcHJlZGljYXRlKGssIHRoaXMuY2FjaGVfW2tdKSkge1xuICAgICAgcmVzdWx0LnB1c2godGhpcy5jYWNoZV9ba10pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXG4gKiBDaGFuZ2VzIGhvdyBvZnRlbiB0aGlzIHRhYmxlIGZldGNoZXMgYSBmdWxsIHRhYmxlIHVwZGF0ZSBmcm9tIHRoZVxuICogc2VydmVyLlxuICogQHBhcmFtIHtudW1iZXJ9IGludGVydmFsTXMgLSBtaWxsaXNlY29uZHMgb2YgZGVsYXkgYmV0d2VlbiB1cGRhdGVzLlxuICovXG5OZXRTaW1UYWJsZS5wcm90b3R5cGUuc2V0UG9sbGluZ0ludGVydmFsID0gZnVuY3Rpb24gKGludGVydmFsTXMpIHtcbiAgdGhpcy5wb2xsaW5nSW50ZXJ2YWxfID0gaW50ZXJ2YWxNcztcbn07XG5cbi8qKlxuICogQ2hhbmdlIHRoZSBtYXhpbXVtIHJhdGUgYXQgd2hpY2ggdGhlIHJlZnJlc2ggb3BlcmF0aW9uIGZvciB0aGlzIHRhYmxlXG4gKiB3aWxsIF9hY3R1YWxseV8gYmUgZXhlY3V0ZWQsIG5vIG1hdHRlciBob3cgZmFzdCB3ZSByZWNlaXZlIGludmFsaWRhdGlvbnMuXG4gKiBAcGFyYW0ge251bWJlcn0gZGVsYXlNcyAtIE1pbmltdW0gbnVtYmVyIG9mIG1pbGxpc2Vjb25kc1xuICogICAgICAgIGJldHdlZW4gaW52YWxpZGF0aW9uLXRyaWdnZXJlZCByZXF1ZXN0cyB0byB0aGUgc2VydmVyLlxuICovXG5OZXRTaW1UYWJsZS5wcm90b3R5cGUuc2V0TWluaW11bURlbGF5QmV0d2VlblJlZnJlc2hlcyA9IGZ1bmN0aW9uIChkZWxheU1zKSB7XG4gIC8vIFRvIGRvIHRoaXMsIHdlIGp1c3QgcmVwbGFjZSB0aGUgdGhyb3R0bGVkIHJlZnJlc2ggZnVuY3Rpb24gd2l0aCBhIG5ldyBvbmUuXG4gIHRoaXMubWluaW11bURlbGF5QmV0d2VlblJlZnJlc2hlc18gPSBkZWxheU1zO1xuICB0aGlzLnJlZnJlc2hUYWJsZV8gPSB0aGlzLm1ha2VUaHJvdHRsZWRSZWZyZXNoXygpO1xufTtcblxuLyoqXG4gKiBDaGFuZ2UgdGhlIG1pbmltdW0gdGltZSAoaW4gbXMpIHRvIHdhaXQgYWZ0ZXIgYW4gaW52YWxpZGF0aW9uIGV2ZW50IGJlZm9yZVxuICogYXR0ZW1wdGluZyB0byB0cmlnZ2VyIGEgcmVmcmVzaCByZXF1ZXN0LiAgVGhpcyBwcm9kdWNlcyBhIHdpbmRvdyBpbiB3aGljaFxuICogY2x1c3RlcmVkIGludmFsaWRhdGlvbnMgY2FuIGJlIGNhcHR1cmVkIGFuZCBjb2FsZXNjZWQgdG9nZXRoZXIuXG4gKiBAcGFyYW0ge251bWJlcn0gZGVsYXlNcyAtIE1pbmltdW0gbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBiZXR3ZWVuIGZpcnN0XG4gKiAgICAgICAgaW52YWxpZGF0aW9uIGFuZCByZXF1ZXN0IHRvIHNlcnZlci5cbiAqL1xuTmV0U2ltVGFibGUucHJvdG90eXBlLnNldE1pbmltdW1EZWxheUJlZm9yZVJlZnJlc2ggPSBmdW5jdGlvbiAoZGVsYXlNcykge1xuICAvLyBUbyBkbyB0aGlzLCB3ZSBqdXN0IHJlcGxhY2UgdGhlIHRocm90dGxlZCByZWZyZXNoIGZ1bmN0aW9uIHdpdGggYSBuZXcgb25lLlxuICB0aGlzLm1pbmltdW1EZWxheUJlZm9yZVJlZnJlc2hfID0gZGVsYXlNcztcbiAgdGhpcy5yZWZyZXNoVGFibGVfID0gdGhpcy5tYWtlVGhyb3R0bGVkUmVmcmVzaF8oKTtcbn07XG5cbi8qKlxuICogQ2hhbmdlIHRoZSBNYXhpbXVtIGFkZGl0aW9uYWwgcmFuZG9tIGRlbGF5IChpbiBtcykgdG8gYWRkIGJlZm9yZSB0aGUgcmVmcmVzaFxuICogcmVxdWVzdC4gIEhlbHBzIHNwcmVhZCBvdXQgcmVxdWVzdHMgZnJvbSBkaWZmZXJlbnQgY2xpZW50cyByZXNwb25kaW5nIHRvIHRoZVxuICogc2FtZSBldmVudHMuXG4gKiBAcGFyYW0ge251bWJlcn0gZGVsYXlNcyAtIE1heGltdW0gbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBhZGQgYmVmb3JlXG4gKiAgICAgICAgcmVmcmVzaCByZXF1ZXN0IGZpcmVzLlxuICovXG5OZXRTaW1UYWJsZS5wcm90b3R5cGUuc2V0TWF4aW11bUppdHRlckRlbGF5ID0gZnVuY3Rpb24gKGRlbGF5TXMpIHtcbiAgLy8gVG8gZG8gdGhpcywgd2UganVzdCByZXBsYWNlIHRoZSB0aHJvdHRsZWQgcmVmcmVzaCBmdW5jdGlvbiB3aXRoIGEgbmV3IG9uZS5cbiAgdGhpcy5tYXhpbXVtSml0dGVyRGVsYXlfID0gZGVsYXlNcztcbn07XG5cbi8qKiBQb2xscyBzZXJ2ZXIgZm9yIHVwZGF0ZXMsIGlmIGl0J3MgYmVlbiBsb25nIGVub3VnaC4gKi9cbk5ldFNpbVRhYmxlLnByb3RvdHlwZS50aWNrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgaWYgKG5vdyAtIHRoaXMubGFzdFJlZnJlc2hUaW1lXyA+PSB0aGlzLnBvbGxpbmdJbnRlcnZhbF8pIHtcbiAgICB0aGlzLmxhc3RSZWZyZXNoVGltZV8gPSBub3c7XG4gICAgdGhpcy5yZWZyZXNoVGFibGVfKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHdoZW4gdGhlIFB1YlN1YiBzZXJ2aWNlIGZpcmVzIGFuIGV2ZW50IHRoYXQgdGhpcyB0YWJsZSBpcyBzdWJzY3JpYmVkIHRvLlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltVGFibGUucHJvdG90eXBlLm9uUHViU3ViRXZlbnRfID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnJlZnJlc2hUYWJsZV8oKTtcbn07XG4iLCIvKipcbiAqIEBvdmVydmlldyBVSSBjb250cm9sbGVyIGZvciB0aGUgc2VuZCBwYW5lbCAodGhlIGJvdHRvbSBwYW5lbCBvbiB0aGUgcmlnaHQpXG4gKiAgICAgICAgICAgd2hpY2ggaXMgdXNlZCB0byB0cmFuc21pdCBwYWNrZXRzLlxuICogQHNlZSBOZXRTaW1QYWNrZXRFZGl0b3Igd2hpY2ggaXMgdXNlZCBleHRlbnNpdmVseSBoZXJlLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBpMThuID0gcmVxdWlyZSgnLi9sb2NhbGUnKTtcbnZhciBtYXJrdXAgPSByZXF1aXJlKCcuL05ldFNpbVNlbmRQYW5lbC5odG1sLmVqcycpO1xudmFyIE5ldFNpbVBhbmVsID0gcmVxdWlyZSgnLi9OZXRTaW1QYW5lbCcpO1xudmFyIE5ldFNpbVBhY2tldEVkaXRvciA9IHJlcXVpcmUoJy4vTmV0U2ltUGFja2V0RWRpdG9yJyk7XG52YXIgTmV0U2ltUGFja2V0U2l6ZUNvbnRyb2wgPSByZXF1aXJlKCcuL05ldFNpbVBhY2tldFNpemVDb250cm9sJyk7XG52YXIgUGFja2V0ID0gcmVxdWlyZSgnLi9QYWNrZXQnKTtcbnZhciBEYXRhQ29udmVydGVycyA9IHJlcXVpcmUoJy4vRGF0YUNvbnZlcnRlcnMnKTtcbnZhciBOZXRTaW1Db25zdGFudHMgPSByZXF1aXJlKCcuL05ldFNpbUNvbnN0YW50cycpO1xudmFyIE5ldFNpbUdsb2JhbHMgPSByZXF1aXJlKCcuL05ldFNpbUdsb2JhbHMnKTtcblxudmFyIEVuY29kaW5nVHlwZSA9IE5ldFNpbUNvbnN0YW50cy5FbmNvZGluZ1R5cGU7XG52YXIgTWVzc2FnZUdyYW51bGFyaXR5ID0gTmV0U2ltQ29uc3RhbnRzLk1lc3NhZ2VHcmFudWxhcml0eTtcbnZhciBCSVRTX1BFUl9CWVRFID0gTmV0U2ltQ29uc3RhbnRzLkJJVFNfUEVSX0JZVEU7XG5cbnZhciBiaW5hcnlUb0FCID0gRGF0YUNvbnZlcnRlcnMuYmluYXJ5VG9BQjtcblxudmFyIGxvZ2dlciA9IHJlcXVpcmUoJy4vTmV0U2ltTG9nZ2VyJykuZ2V0U2luZ2xldG9uKCk7XG5cbi8qKlxuICogR2VuZXJhdG9yIGFuZCBjb250cm9sbGVyIGZvciBtZXNzYWdlIHNlbmRpbmcgdmlldy5cbiAqIEBwYXJhbSB7alF1ZXJ5fSByb290RGl2XG4gKiBAcGFyYW0ge05ldFNpbUxldmVsQ29uZmlndXJhdGlvbn0gbGV2ZWxDb25maWdcbiAqIEBwYXJhbSB7TmV0U2ltfSBuZXRzaW1cbiAqIEBjb25zdHJ1Y3RvclxuICogQGF1Z21lbnRzIE5ldFNpbVBhbmVsXG4gKi9cbnZhciBOZXRTaW1TZW5kUGFuZWwgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyb290RGl2LCBsZXZlbENvbmZpZyxcbiAgICBuZXRzaW0pIHtcblxuICAvKipcbiAgICogQHR5cGUge05ldFNpbUxldmVsQ29uZmlndXJhdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubGV2ZWxDb25maWdfID0gbGV2ZWxDb25maWc7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtQYWNrZXQuSGVhZGVyVHlwZVtdfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5wYWNrZXRTcGVjXyA9IGxldmVsQ29uZmlnLmNsaWVudEluaXRpYWxQYWNrZXRIZWFkZXI7XG5cbiAgLyoqXG4gICAqIENvbm5lY3Rpb24gdGhhdCBvd25zIHRoZSByb3V0ZXIgd2Ugd2lsbCByZXByZXNlbnQgLyBtYW5pcHVsYXRlXG4gICAqIEB0eXBlIHtOZXRTaW19XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLm5ldHNpbV8gPSBuZXRzaW07XG5cbiAgLyoqXG4gICAqIExpc3Qgb2YgY29udHJvbGxlcnMgZm9yIHBhY2tldHMgY3VycmVudGx5IGJlaW5nIGVkaXRlZC5cbiAgICogQHR5cGUge05ldFNpbVBhY2tldEVkaXRvcltdfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5wYWNrZXRzXyA9IFtdO1xuXG4gIC8qKlxuICAgKiBPdXIgbG9jYWwgbm9kZSdzIGFkZHJlc3MsIHplcm8gdW50aWwgYXNzaWduZWQgYnkgYSByb3V0ZXIuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmZyb21BZGRyZXNzXyA9IDA7XG5cbiAgLyoqXG4gICAqIE1heGltdW0gcGFja2V0IGxlbmd0aCBjb25maWd1cmFibGUgYnkgc2xpZGVyLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5tYXhQYWNrZXRTaXplXyA9IGxldmVsQ29uZmlnLmRlZmF1bHRQYWNrZXRTaXplTGltaXQ7XG5cbiAgLyoqXG4gICAqIEJ5dGUtc2l6ZSB1c2VkIGZvciBmb3JtYXR0aW5nIGJpbmFyeSBhbmQgZm9yIGludGVycHJldGluZyBpdFxuICAgKiB0byBkZWNpbWFsIG9yIEFTQ0lJLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5jaHVua1NpemVfID0gQklUU19QRVJfQllURTtcblxuICAvKipcbiAgICogTG9jYWwgZGV2aWNlIGJpdHJhdGUgaW4gYml0cy1wZXItc2Vjb25kLCB3aGljaCBhZmZlY3RzIHNlbmQgYW5pbWF0aW9uXG4gICAqIHNwZWVkLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5iaXRSYXRlXyA9IEluZmluaXR5O1xuXG4gIC8qKlxuICAgKiBXaGF0IGVuY29kaW5ncyBhcmUgY3VycmVudGx5IHNlbGVjdGVkIGFuZCBkaXNwbGF5ZWQgaW4gZWFjaFxuICAgKiBwYWNrZXQgYW5kIHBhY2tldCBlZGl0b3IuXG4gICAqIEB0eXBlIHtFbmNvZGluZ1R5cGVbXX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuZW5hYmxlZEVuY29kaW5nc18gPSBsZXZlbENvbmZpZy5kZWZhdWx0RW5hYmxlZEVuY29kaW5ncztcblxuICAvKipcbiAgICogUmVmZXJlbmNlIHRvIHBhcmVudCBkaXYgb2YgcGFja2V0IGVkaXRvciBsaXN0LCBmb3IgYWRkaW5nIGFuZFxuICAgKiByZW1vdmluZyBwYWNrZXQgZWRpdG9ycy5cbiAgICogQHR5cGUge2pRdWVyeX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucGFja2V0c0Rpdl8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7TmV0U2ltUGFja2V0U2l6ZUNvbnRyb2x9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnBhY2tldFNpemVDb250cm9sXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIEZsYWcgZm9yIHdoZXRoZXIgdGhpcyBwYW5lbCBpcyBpbiBcInNlbmRpbmdcIiBtb2RlLCBub24taW50ZXJhY3RpdmUgd2hpbGVcbiAgICogaXQgYW5pbWF0ZXMgdGhlIHNlbmQgcHJvY2VzcyBmb3IgdGhlIGN1cnJlbnQgbWVzc2FnZS5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmlzUGxheWluZ1NlbmRBbmltYXRpb25fID0gZmFsc2U7XG5cbiAgdmFyIHBhbmVsVGl0bGUgPSAobGV2ZWxDb25maWcubWVzc2FnZUdyYW51bGFyaXR5ID09PSBNZXNzYWdlR3JhbnVsYXJpdHkuUEFDS0VUUykgP1xuICAgICAgaTE4bi5zZW5kQU1lc3NhZ2UoKSA6IGkxOG4uc2VuZEJpdHMoKTtcblxuICAvLyBUT0RPOiBCYWQgcHJpdmF0ZSBtZW1iZXIgYWNjZXNzXG4gIHRoaXMubmV0c2ltXy5ydW5Mb29wXy50aWNrLnJlZ2lzdGVyKHRoaXMudGljay5iaW5kKHRoaXMpKTtcblxuICBOZXRTaW1QYW5lbC5jYWxsKHRoaXMsIHJvb3REaXYsIHtcbiAgICBjbGFzc05hbWU6ICduZXRzaW0tc2VuZC1wYW5lbCcsXG4gICAgcGFuZWxUaXRsZTogcGFuZWxUaXRsZVxuICB9KTtcbn07XG5OZXRTaW1TZW5kUGFuZWwuaW5oZXJpdHMoTmV0U2ltUGFuZWwpO1xuXG4vKipcbiAqIFB1dHMgc2VuZCBwYW5lbCBpbiBhIFwic2VuZGluZyBwYWNrZXRzXCIgbm9uaW50ZXJhY3RpdmUgc3RhdGUgYW5kIGJlZ2luc1xuICogc2VuZGluZyBwYWNrZXRzIHRvIHJlbW90ZS5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVNlbmRQYW5lbC5wcm90b3R5cGUuYmVnaW5TZW5kaW5nUGFja2V0c18gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICgwID09PSB0aGlzLnBhY2tldHNfLmxlbmd0aCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuaXNQbGF5aW5nU2VuZEFuaW1hdGlvbl8gPSB0cnVlO1xuICB0aGlzLmRpc2FibGVFdmVyeXRoaW5nKCk7XG4gIHRoaXMucGFja2V0c19bMF0uYmVnaW5TZW5kaW5nKHRoaXMubmV0c2ltXy5teU5vZGUpO1xufTtcblxuLyoqXG4gKiBDYWxsYmFjayBmb3Igd2hlbiBhbiBpbmRpdmlkdWFsIHBhY2tldCBmaW5pc2hlcyBpdHMgc2VuZCBhbmltYXRpb24uXG4gKiBNb3N0IG9mIHRoZSB0aW1lIHRoZSBwYWNrZXQgZ2V0cyByZW1vdmVkIGFuZCB0aGUgbmV4dCBwYWNrZXQgYmVnaW5zIGl0c1xuICogYW5pbWF0aW9uLlxuICogSWYgaXQncyB0aGUgbGFzdCBwYWNrZXQsIHdlIGZpbmlzaCBzZW5kaW5nIGFuZCBwZXJmb3JtIGEgcGFja2V0IGVkaXRvclxuICogcmVzZXQgaW5zdGVhZC5cbiAqIEBwYXJhbSB7TmV0U2ltUGFja2V0RWRpdG9yfSBwYWNrZXRcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVNlbmRQYW5lbC5wcm90b3R5cGUuZG9uZVNlbmRpbmdQYWNrZXRfID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICAvLyBJZiBpdCdzIHRoZSBsYXN0IHBhY2tldCwgd2UncmUgZG9uZSBzZW5kaW5nIGFsdG9nZXRoZXIuXG4gIGlmICgxID09PSB0aGlzLnBhY2tldHNfLmxlbmd0aCkge1xuICAgIHRoaXMucmVzZXRQYWNrZXRzXygpO1xuICAgIHRoaXMuZW5hYmxlRXZlcnl0aGluZygpO1xuICAgIHRoaXMucGFja2V0c19bMF0uZ2V0Rmlyc3RWaXNpYmxlTWVzc2FnZUJveCgpLmZvY3VzKCk7XG4gICAgdGhpcy5pc1BsYXlpbmdTZW5kQW5pbWF0aW9uXyA9IGZhbHNlO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFJlbW92ZSB0aGUgY29tcGxldGVkIHBhY2tldCBhbmQgc3RhcnQgc2VuZGluZyB0aGUgbmV4dCBvbmUuXG4gIHRoaXMucmVtb3ZlUGFja2V0XyhwYWNrZXQpO1xuICB0aGlzLnBhY2tldHNfWzBdLmJlZ2luU2VuZGluZyh0aGlzLm5ldHNpbV8ubXlOb2RlKTtcbn07XG5cbi8qKlxuICogU2VuZCBwYW5lbCB1c2VzIGl0cyB0aWNrIHRvIFwic2VuZFwiIHBhY2tldHMgYXQgZGlmZmVyZW50IGJpdHJhdGVzLCBhbmltYXRpbmdcbiAqIHRoZSBiaW5hcnkgZHJhaW5pbmcgb3V0IG9mIHRoZSB3aWRnZXQgYW5kIGFjdHVhbGx5IHBvc3RpbmcgZWFjaCBwYWNrZXRcbiAqIHRvIHN0b3JhZ2UgYXMgaXQgY29tcGxldGVzLlxuICogQHBhcmFtIHtSdW5Mb29wLkNsb2NrfSBjbG9ja1xuICovXG5OZXRTaW1TZW5kUGFuZWwucHJvdG90eXBlLnRpY2sgPSBmdW5jdGlvbiAoY2xvY2spIHtcbiAgaWYgKHRoaXMuaXNQbGF5aW5nU2VuZEFuaW1hdGlvbl8gJiYgdGhpcy5wYWNrZXRzXy5sZW5ndGggPiAwKSB7XG4gICAgdGhpcy5wYWNrZXRzX1swXS50aWNrKGNsb2NrKTtcbiAgfVxufTtcblxuLyoqIFJlcGxhY2UgY29udGVudHMgb2Ygb3VyIHJvb3QgZWxlbWVudCB3aXRoIG91ciBvd24gbWFya3VwLiAqL1xuTmV0U2ltU2VuZFBhbmVsLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFJlbmRlciBib2lsZXJwbGF0ZSBwYW5lbCBzdHVmZlxuICBOZXRTaW1TZW5kUGFuZWwuc3VwZXJQcm90b3R5cGUucmVuZGVyLmNhbGwodGhpcyk7XG5cbiAgLy8gUHV0IG91ciBvd24gY29udGVudCBpbnRvIHRoZSBwYW5lbCBib2R5XG4gIHZhciBuZXdNYXJrdXAgPSAkKG1hcmt1cCh7XG4gICAgbGV2ZWw6IHRoaXMubGV2ZWxDb25maWdfXG4gIH0pKTtcbiAgdGhpcy5nZXRCb2R5KCkuaHRtbChuZXdNYXJrdXApO1xuXG4gIC8vIEFkZCBwYWNrZXQgc2l6ZSBzbGlkZXIgY29udHJvbFxuICBpZiAodGhpcy5sZXZlbENvbmZpZ18uc2hvd1BhY2tldFNpemVDb250cm9sKSB7XG4gICAgdmFyIGxldmVsID0gTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpO1xuICAgIHZhciBlbmNvZGVyID0gbmV3IFBhY2tldC5FbmNvZGVyKGxldmVsLmFkZHJlc3NGb3JtYXQsXG4gICAgICAgIGxldmVsLnBhY2tldENvdW50Qml0V2lkdGgsIHRoaXMucGFja2V0U3BlY18pO1xuICAgIHRoaXMucGFja2V0U2l6ZUNvbnRyb2xfID0gbmV3IE5ldFNpbVBhY2tldFNpemVDb250cm9sKFxuICAgICAgICB0aGlzLnJvb3REaXZfLmZpbmQoJy5wYWNrZXQtc2l6ZScpLFxuICAgICAgICB0aGlzLnBhY2tldFNpemVDaGFuZ2VDYWxsYmFja18uYmluZCh0aGlzKSxcbiAgICAgICAge1xuICAgICAgICAgIG1pbmltdW1QYWNrZXRTaXplOiBlbmNvZGVyLmdldEhlYWRlckxlbmd0aCgpLFxuICAgICAgICAgIHNsaWRlclN0ZXBWYWx1ZTogMVxuICAgICAgICB9KTtcbiAgICB0aGlzLnBhY2tldFNpemVDb250cm9sXy5zZXRWYWx1ZSh0aGlzLm1heFBhY2tldFNpemVfKTtcbiAgfVxuXG4gIC8vIEJpbmQgdXNlZnVsIGVsZW1lbnRzIGFuZCBhZGQgaGFuZGxlcnNcbiAgdGhpcy5wYWNrZXRzRGl2XyA9IHRoaXMuZ2V0Qm9keSgpLmZpbmQoJy5zZW5kLXBhbmVsLXBhY2tldHMnKTtcbiAgdGhpcy5nZXRCb2R5KClcbiAgICAgIC5maW5kKCcjYWRkLXBhY2tldC1idXR0b24nKVxuICAgICAgLmNsaWNrKHRoaXMub25BZGRQYWNrZXRCdXR0b25QcmVzc18uYmluZCh0aGlzKSk7XG4gIC8vIFRPRE86IE5ldFNpbSBidXR0b25zIGluIHRoaXMgcGFuZWwgbmVlZCB0byBkbyBub3RoaW5nIGlmIGRpc2FibGVkIVxuICB0aGlzLmdldEJvZHkoKVxuICAgICAgLmZpbmQoJyNzZW5kLWJ1dHRvbicpXG4gICAgICAuY2xpY2sodGhpcy5vblNlbmRFdmVudFRyaWdnZXJlZF8uYmluZCh0aGlzKSk7XG4gIHRoaXMuZ2V0Qm9keSgpXG4gICAgICAuZmluZCgnI3NldC13aXJlLWJ1dHRvbicpXG4gICAgICAuY2xpY2sodGhpcy5vblNlbmRFdmVudFRyaWdnZXJlZF8uYmluZCh0aGlzKSk7XG5cbiAgLy8gTm90ZTogQXQgc29tZSBwb2ludCwgd2UgbWlnaHQgd2FudCB0byByZXBsYWNlIHRoaXMgd2l0aCBzb21ldGhpbmdcbiAgLy8gdGhhdCBuaWNlbHkgcmUtcmVuZGVycyB0aGUgY29udGVudHMgb2YgdGhpcy5wYWNrZXRzXy4uLiBmb3Igbm93LFxuICAvLyB3ZSBvbmx5IGNhbGwgcmVuZGVyIGZvciBzZXQtdXAsIHNvIGl0J3Mgb2theS5cbiAgdGhpcy5yZXNldFBhY2tldHNfKCk7XG59O1xuXG4vKipcbiAqIEFkZCBhIG5ldywgYmxhbmsgcGFja2V0IHRvIHRoZSBzZXQgb2YgcGFja2V0cyBiZWluZyBlZGl0ZWQuXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1TZW5kUGFuZWwucHJvdG90eXBlLmFkZFBhY2tldF8gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBuZXdQYWNrZXRDb3VudCA9IHRoaXMucGFja2V0c18ubGVuZ3RoICsgMTtcblxuICAvLyBVcGRhdGUgdGhlIHRvdGFsIHBhY2tldCBjb3VudCBvbiBhbGwgZXhpc3RpbmcgcGFja2V0c1xuICB0aGlzLnBhY2tldHNfLmZvckVhY2goZnVuY3Rpb24gKHBhY2tldEVkaXRvcikge1xuICAgIHBhY2tldEVkaXRvci5zZXRQYWNrZXRDb3VudChuZXdQYWNrZXRDb3VudCk7XG4gIH0pO1xuXG4gIC8vIENvcHkgdGhlIHRvIGFkZHJlc3Mgb2YgdGhlIHByZXZpb3VzIHBhY2tldCBpZiBpdCBleGlzdHMuIE90aGVyd2lzZVxuICAvLyB1c2UgdGhlIGxhc3QgYWRkcmVzcyBzZW50LlxuICAvLyBUT0RPOiBEbyB3ZSBuZWVkIHRvIGxvY2sgdGhlIHRvQWRkcmVzcyBmb3IgYWxsIG9mIHRoZXNlIHBhY2tldHMgdG9nZXRoZXI/XG4gIHZhciBuZXdQYWNrZXRUb0FkZHJlc3M7XG4gIGlmICh0aGlzLnBhY2tldHNfLmxlbmd0aCA+IDApIHtcbiAgICBuZXdQYWNrZXRUb0FkZHJlc3MgPSB0aGlzLnBhY2tldHNfW3RoaXMucGFja2V0c18ubGVuZ3RoIC0gMV0udG9BZGRyZXNzO1xuICB9IGVsc2Uge1xuICAgIG5ld1BhY2tldFRvQWRkcmVzcyA9ICcwJztcbiAgfVxuXG4gIC8vIENyZWF0ZSBhIG5ldyBwYWNrZXRcbiAgdmFyIG5ld1BhY2tldCA9IG5ldyBOZXRTaW1QYWNrZXRFZGl0b3Ioe1xuICAgIG1lc3NhZ2VHcmFudWxhcml0eTogdGhpcy5sZXZlbENvbmZpZ18ubWVzc2FnZUdyYW51bGFyaXR5LFxuICAgIHBhY2tldFNwZWM6IHRoaXMucGFja2V0U3BlY18sXG4gICAgdG9BZGRyZXNzOiBuZXdQYWNrZXRUb0FkZHJlc3MsXG4gICAgZnJvbUFkZHJlc3M6IHRoaXMuZnJvbUFkZHJlc3NfLFxuICAgIHBhY2tldEluZGV4OiBuZXdQYWNrZXRDb3VudCxcbiAgICBwYWNrZXRDb3VudDogbmV3UGFja2V0Q291bnQsXG4gICAgbWF4UGFja2V0U2l6ZTogdGhpcy5tYXhQYWNrZXRTaXplXyxcbiAgICBjaHVua1NpemU6IHRoaXMuY2h1bmtTaXplXyxcbiAgICBiaXRSYXRlOiB0aGlzLmJpdFJhdGVfLFxuICAgIGVuYWJsZWRFbmNvZGluZ3M6IHRoaXMuZW5hYmxlZEVuY29kaW5nc18sXG4gICAgcmVtb3ZlUGFja2V0Q2FsbGJhY2s6IHRoaXMucmVtb3ZlUGFja2V0Xy5iaW5kKHRoaXMpLFxuICAgIGRvbmVTZW5kaW5nQ2FsbGJhY2s6IHRoaXMuZG9uZVNlbmRpbmdQYWNrZXRfLmJpbmQodGhpcyksXG4gICAgY29udGVudENoYW5nZUNhbGxiYWNrOiB0aGlzLm9uQ29udGVudENoYW5nZV8uYmluZCh0aGlzKSxcbiAgICBlbnRlcktleVByZXNzZWRDYWxsYmFjazogdGhpcy5vblNlbmRFdmVudFRyaWdnZXJlZF8uYmluZCh0aGlzKVxuICB9KTtcblxuICAvLyBBdHRhY2ggdGhlIG5ldyBwYWNrZXQgdG8gdGhpcyBTZW5kUGFuZWxcbiAgdmFyIHVwZGF0ZUxheW91dCA9IHRoaXMubmV0c2ltXy51cGRhdGVMYXlvdXQuYmluZCh0aGlzLm5ldHNpbV8pO1xuICBuZXdQYWNrZXQuZ2V0Um9vdCgpLmFwcGVuZFRvKHRoaXMucGFja2V0c0Rpdl8pO1xuICBuZXdQYWNrZXQuZ2V0Um9vdCgpLmhpZGUoKS5zbGlkZURvd24oJ2Zhc3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgbmV3UGFja2V0LmdldEZpcnN0VmlzaWJsZU1lc3NhZ2VCb3goKS5mb2N1cygpO1xuICAgIHVwZGF0ZUxheW91dCgpO1xuICB9KTtcbiAgdGhpcy5wYWNrZXRzXy5wdXNoKG5ld1BhY2tldCk7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhIHBhY2tldCBmcm9tIHRoZSBzZW5kIHBhbmVsLCBhbmQgYWRqdXN0IG90aGVyIHBhY2tldHMgZm9yXG4gKiBjb25zaXN0ZW5jeS5cbiAqIEBwYXJhbSB7TmV0U2ltUGFja2V0RWRpdG9yfSBwYWNrZXRcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVNlbmRQYW5lbC5wcm90b3R5cGUucmVtb3ZlUGFja2V0XyA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgLy8gUmVtb3ZlIGZyb20gRE9NXG4gIHZhciB1cGRhdGVMYXlvdXQgPSB0aGlzLm5ldHNpbV8udXBkYXRlTGF5b3V0LmJpbmQodGhpcy5uZXRzaW1fKTtcbiAgcGFja2V0LmdldFJvb3QoKVxuICAgICAgLnNsaWRlVXAoJ2Zhc3QnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgJCh0aGlzKS5yZW1vdmUoKTtcbiAgICAgICAgdXBkYXRlTGF5b3V0KCk7XG4gICAgICB9KTtcblxuICAvLyBSZW1vdmUgZnJvbSBpbnRlcm5hbCBjb2xsZWN0aW9uXG4gIHRoaXMucGFja2V0c18gPSB0aGlzLnBhY2tldHNfLmZpbHRlcihmdW5jdGlvbiAocGFja2V0RWRpdG9yKSB7XG4gICAgcmV0dXJuIHBhY2tldEVkaXRvciAhPT0gcGFja2V0O1xuICB9KTtcblxuICAvLyBBZGp1c3QgbnVtYmVyaW5nIG9mIHJlbWFpbmluZyBwYWNrZXRzIGlmIHdlJ3JlIG5vdCBtaWQtc2VuZFxuICBpZiAoIXRoaXMuaXNQbGF5aW5nU2VuZEFuaW1hdGlvbl8pIHtcbiAgICB2YXIgcGFja2V0Q291bnQgPSB0aGlzLnBhY2tldHNfLmxlbmd0aDtcbiAgICB2YXIgcGFja2V0SW5kZXg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYWNrZXRDb3VudDsgaSsrKSB7XG4gICAgICBwYWNrZXRJbmRleCA9IGkgKyAxO1xuICAgICAgdGhpcy5wYWNrZXRzX1tpXS5zZXRQYWNrZXRJbmRleChwYWNrZXRJbmRleCk7XG4gICAgICB0aGlzLnBhY2tldHNfW2ldLnNldFBhY2tldENvdW50KHBhY2tldENvdW50KTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogUmVzZXQgdGhlIGVkaXRvciB0byBpdHMgJ2VtcHR5JyBzdGF0ZTogUmVtb3ZlIGFsbCBidXQgdGhlIGZpcnN0IHBhY2tldCxcbiAqIGFuZCByZXNldCB0aGUgZmlyc3QgcGFja2V0IHRvIGVtcHR5LlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltU2VuZFBhbmVsLnByb3RvdHlwZS5yZXNldFBhY2tldHNfID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5wYWNrZXRzXy5sZW5ndGggPiAwKSB7XG4gICAgdGhpcy5wYWNrZXRzRGl2Xy5jaGlsZHJlbigpLnNsaWNlKDEpLnJlbW92ZSgpO1xuICAgIHRoaXMucGFja2V0c18ubGVuZ3RoID0gTWF0aC5taW4oMSwgdGhpcy5wYWNrZXRzXy5sZW5ndGgpO1xuICAgIHRoaXMucGFja2V0c19bMF0ucmVzZXRQYWNrZXQoKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmFkZFBhY2tldF8oKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXaGVuIGFueSBwYWNrZXQgZWRpdG9yJ3MgYmluYXJ5IGNvbnRlbnQgY2hhbmdlcywgd2UgbWF5IHdhbnRcbiAqIHRvIHVwZGF0ZSBVSSB3cmFwcGVyIGVsZW1lbnRzIChsaWtlIHRoZSBcInNldCBuZXh0IGJpdFwiIGJ1dHRvbilcbiAqIGluIHJlc3BvbnNlXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1TZW5kUGFuZWwucHJvdG90eXBlLm9uQ29udGVudENoYW5nZV8gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBuZXh0Qml0ID0gdGhpcy5nZXROZXh0Qml0XygpO1xuXG4gIGlmIChuZXh0Qml0ID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBJZiB0aGVyZSBhcmUgbm8gYml0cyBxdWV1ZWQgdXAsIGRpc2FibGUgdGhlIGJ1dHRvblxuICAgIHRoaXMuZ2V0U2V0V2lyZUJ1dHRvbigpLnRleHQoaTE4bi5zZXRXaXJlKCkpO1xuICAgIHRoaXMuY29uZGl0aW9uYWxseVRvZ2dsZVNldFdpcmVCdXR0b24oKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IElmIHdlIGhhdmUgdGhlIFwiQS9CXCIgZW5jb2RpbmcgZW5hYmxlZCBidXQgX25vdF8gXCJCaW5hcnlcIixcbiAgICAvLyBmb3JtYXQgdGhpcyBidXR0b24gbGFiZWwgdXNpbmcgdGhlIFwiQS9CXCIgY29udmVudGlvblxuICAgIGlmICh0aGlzLmlzRW5jb2RpbmdFbmFibGVkXyhFbmNvZGluZ1R5cGUuQV9BTkRfQikgJiZcbiAgICAgICAgIXRoaXMuaXNFbmNvZGluZ0VuYWJsZWRfKEVuY29kaW5nVHlwZS5CSU5BUlkpKSB7XG4gICAgICBuZXh0Qml0ID0gYmluYXJ5VG9BQihuZXh0Qml0KTtcbiAgICB9XG5cbiAgICB0aGlzLmdldFNldFdpcmVCdXR0b24oKS50ZXh0KGkxOG4uc2V0V2lyZVRvVmFsdWUoeyB2YWx1ZTogbmV4dEJpdCB9KSk7XG4gICAgdGhpcy5jb25kaXRpb25hbGx5VG9nZ2xlU2V0V2lyZUJ1dHRvbigpO1xuICB9XG59O1xuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgdGhlIGdpdmVuIGVuY29kaW5nIGlzIGN1cnJlbnRseSBkaXNwbGF5ZWQgYnkgdGhlIHBhbmVsLlxuICogQHBhcmFtIHtFbmNvZGluZ1R5cGV9IHF1ZXJ5RW5jb2RpbmdcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltU2VuZFBhbmVsLnByb3RvdHlwZS5pc0VuY29kaW5nRW5hYmxlZF8gPSBmdW5jdGlvbiAocXVlcnlFbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5lbmFibGVkRW5jb2RpbmdzXy5zb21lKGZ1bmN0aW9uIChlbmFibGVkRW5jb2RpbmcpIHtcbiAgICByZXR1cm4gZW5hYmxlZEVuY29kaW5nID09PSBxdWVyeUVuY29kaW5nO1xuICB9KTtcbn07XG5cbi8qKlxuICogVXBkYXRlIGZyb20gYWRkcmVzcyBmb3IgdGhlIHBhbmVsLCB1cGRhdGUgYWxsIHRoZSBwYWNrZXRzIHRvIHJlZmxlY3QgdGhpcy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUFkZHJlc3NdIGRlZmF1bHQgemVyb1xuICovXG5OZXRTaW1TZW5kUGFuZWwucHJvdG90eXBlLnNldEZyb21BZGRyZXNzID0gZnVuY3Rpb24gKGZyb21BZGRyZXNzKSB7XG4gIC8vIGZyb21BZGRyZXNzIGNhbiBiZSB1bmRlZmluZWQgZm9yIG90aGVyIHBhcnRzIG9mIHRoZSBzaW0sIGJ1dCB3aXRoaW5cbiAgLy8gdGhlIHNlbmQgcGFuZWwgd2UganVzdCBzZXQgaXQgdG8gemVyby5cbiAgdGhpcy5mcm9tQWRkcmVzc18gPSB1dGlscy52YWx1ZU9yKGZyb21BZGRyZXNzLCAwKTtcblxuICB0aGlzLnBhY2tldHNfLmZvckVhY2goZnVuY3Rpb24gKHBhY2tldEVkaXRvcikge1xuICAgIHBhY2tldEVkaXRvci5zZXRGcm9tQWRkcmVzcyh0aGlzLmZyb21BZGRyZXNzXyk7XG4gIH0uYmluZCh0aGlzKSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7RXZlbnR9IGpRdWVyeUV2ZW50XG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1TZW5kUGFuZWwucHJvdG90eXBlLm9uQWRkUGFja2V0QnV0dG9uUHJlc3NfID0gZnVuY3Rpb24gKGpRdWVyeUV2ZW50KSB7XG4gIHZhciB0aGlzQnV0dG9uID0gJChqUXVlcnlFdmVudC50YXJnZXQpO1xuICBpZiAodGhpc0J1dHRvbi5pcygnW2Rpc2FibGVkXScpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5hZGRQYWNrZXRfKCk7XG5cbiAgLy8gU2Nyb2xsIHRvIGVuZCBvZiBwYWNrZXQgYXJlYVxuICB2YXIgc2Nyb2xsaW5nQXJlYSA9IHRoaXMuZ2V0Qm9keSgpLmZpbmQoJy5zZW5kLXBhbmVsLXBhY2tldHMnKTtcbiAgc2Nyb2xsaW5nQXJlYS5hbmltYXRlKHsgc2Nyb2xsVG9wOiBzY3JvbGxpbmdBcmVhWzBdLnNjcm9sbEhlaWdodCB9LCAnZmFzdCcpO1xufTtcblxuLyoqXG4gKiBTZW5kIG1lc3NhZ2UgdG8gY29ubmVjdGVkIHJlbW90ZVxuICogQHBhcmFtIHtFdmVudH0galF1ZXJ5RXZlbnRcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVNlbmRQYW5lbC5wcm90b3R5cGUub25TZW5kRXZlbnRUcmlnZ2VyZWRfID0gZnVuY3Rpb24gKGpRdWVyeUV2ZW50KSB7XG4gIHZhciB0cmlnZ2VyaW5nVGFyZ2V0ID0gJChqUXVlcnlFdmVudC50YXJnZXQpO1xuICBpZiAodHJpZ2dlcmluZ1RhcmdldC5pcygnW2Rpc2FibGVkXScpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGxldmVsID0gTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpO1xuICBpZiAobGV2ZWwubWVzc2FnZUdyYW51bGFyaXR5ID09PSBNZXNzYWdlR3JhbnVsYXJpdHkuUEFDS0VUUykge1xuICAgIHRoaXMuYmVnaW5TZW5kaW5nUGFja2V0c18oKTtcbiAgfSBlbHNlIGlmIChsZXZlbC5tZXNzYWdlR3JhbnVsYXJpdHkgPT09IE1lc3NhZ2VHcmFudWxhcml0eS5CSVRTKSB7XG4gICAgdGhpcy5zZW5kT25lQml0XygpO1xuICB9XG59O1xuXG4vKipcbiAqIFNlbmQgYSBzaW5nbGUgYml0LCBtYW51YWxseSAnc2V0dGluZyB0aGUgd2lyZSBzdGF0ZScuXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1TZW5kUGFuZWwucHJvdG90eXBlLnNlbmRPbmVCaXRfID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbXlOb2RlID0gdGhpcy5uZXRzaW1fLm15Tm9kZTtcbiAgaWYgKCFteU5vZGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJUcmllZCB0byBzZXQgd2lyZSBzdGF0ZSB3aGVuIG5vIGNvbm5lY3Rpb24gaXMgZXN0YWJsaXNoZWQuXCIpO1xuICB9XG5cbiAgLy8gRmluZCB0aGUgZmlyc3QgYml0IG9mIHRoZSBmaXJzdCBwYWNrZXQuIERpc2FsbG93IHNldHRpbmcgdGhlIHdpcmVcbiAgLy8gaWYgdGhlcmUgaXMgbm8gZmlyc3QgYml0LlxuICB2YXIgbmV4dEJpdCA9IHRoaXMuZ2V0TmV4dEJpdF8oKTtcbiAgaWYgKG5leHRCaXQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlRyaWVkIHRvIHNldCB3aXJlIHN0YXRlIHdoZW4gbm8gYml0IGlzIHF1ZXVlZC5cIik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5kaXNhYmxlRXZlcnl0aGluZygpO1xuICAgIHRoaXMubmV0c2ltXy5hbmltYXRlU2V0V2lyZVN0YXRlKG5leHRCaXQpO1xuICAgIG15Tm9kZS5zZXRTaW1wbGV4V2lyZVN0YXRlKG5leHRCaXQsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oZXJyLm1lc3NhZ2UpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY29uc3VtZUZpcnN0Qml0KCk7XG4gICAgICB0aGlzLmVuYWJsZUV2ZXJ5dGhpbmcoKTtcbiAgICAgIHRoaXMuY29uZGl0aW9uYWxseVRvZ2dsZVNldFdpcmVCdXR0b24oKTtcbiAgICB9LmJpbmQodGhpcykpO1xuICB9XG59O1xuXG4vKipcbiAqIEdldCB0aGUgbmV4dCBiaXQgdGhhdCB3b3VsZCBiZSBzZW50LCBpZiBzZW5kaW5nIHRoZSBlbnRlcmVkIG1lc3NhZ2Ugb25lXG4gKiBiaXQgYXQgYSB0aW1lLlxuICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IHNpbmdsZSBiaXQgYXMgYSBcIjBcIiBvciBcIjFcIiBpZiB0aGVyZSBhcmVcbiAqIGJpdHMgdG8gYmUgc2VudCwgb3IgdW5kZWZpbmVkIG90aGVyd2lzZVxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltU2VuZFBhbmVsLnByb3RvdHlwZS5nZXROZXh0Qml0XyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMucGFja2V0c18ubGVuZ3RoID4gMCA/IHRoaXMucGFja2V0c19bMF0uZ2V0Rmlyc3RCaXQoKSA6IHVuZGVmaW5lZDtcbn07XG5cbi8qKiBEaXNhYmxlIGFsbCBjb250cm9scyBpbiB0aGlzIHBhbmVsLCB1c3VhbGx5IGR1cmluZyBuZXR3b3JrIGFjdGl2aXR5LiAqL1xuTmV0U2ltU2VuZFBhbmVsLnByb3RvdHlwZS5kaXNhYmxlRXZlcnl0aGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5nZXRCb2R5KCkuZmluZCgnaW5wdXQsIHRleHRhcmVhJykucHJvcCgnZGlzYWJsZWQnLCB0cnVlKTtcbiAgdGhpcy5nZXRCb2R5KCkuZmluZCgnLm5ldHNpbS1idXR0b24nKS5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xuICBpZiAodGhpcy5wYWNrZXRTaXplQ29udHJvbF8pIHtcbiAgICB0aGlzLnBhY2tldFNpemVDb250cm9sXy5kaXNhYmxlKCk7XG4gIH1cbn07XG5cbi8qKlxuICogRmluZHMgdGhlIGJ1dHRvbiB1c2VkIHRvIHNldCB0aGUgd2lyZSBzdGF0ZVxuICogQHJldHVybnMge2pRdWVyeX1cbiAqL1xuTmV0U2ltU2VuZFBhbmVsLnByb3RvdHlwZS5nZXRTZXRXaXJlQnV0dG9uID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5nZXRCb2R5KCkuZmluZCgnI3NldC13aXJlLWJ1dHRvbicpO1xufTtcblxuLyoqIEVuYWJsZXMgdGhlIHNldFdpcmVCdXR0b24gaWYgdGhlcmUgaXMgYW5vdGhlciBiaXQgaW4gdGhlIHF1ZXVlLFxuICogZGlzYWJsZXMgaXQgb3RoZXJ3aXNlLlxuICogQHJldHVybnMge2pRdWVyeX1cbiAqL1xuTmV0U2ltU2VuZFBhbmVsLnByb3RvdHlwZS5jb25kaXRpb25hbGx5VG9nZ2xlU2V0V2lyZUJ1dHRvbiA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNldFdpcmVCdXR0b24gPSB0aGlzLmdldFNldFdpcmVCdXR0b24oKTtcbiAgaWYgKHRoaXMuZ2V0TmV4dEJpdF8oKSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc2V0V2lyZUJ1dHRvbi5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xuICB9IGVsc2Uge1xuICAgIHNldFdpcmVCdXR0b24ucmVtb3ZlQXR0cignZGlzYWJsZWQnKTtcbiAgfVxuICByZXR1cm4gc2V0V2lyZUJ1dHRvbjtcbn07XG5cbi8qKiBFbmFibGUgYWxsIGNvbnRyb2xzIGluIHRoaXMgcGFuZWwsIHVzdWFsbHkgYWZ0ZXIgbmV0d29yayBhY3Rpdml0eS4gKi9cbk5ldFNpbVNlbmRQYW5lbC5wcm90b3R5cGUuZW5hYmxlRXZlcnl0aGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5nZXRCb2R5KCkuZmluZCgnaW5wdXQsIHRleHRhcmVhJykucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSk7XG4gIHRoaXMuZ2V0Qm9keSgpLmZpbmQoJy5uZXRzaW0tYnV0dG9uJykucmVtb3ZlQXR0cignZGlzYWJsZWQnKTtcbiAgaWYgKHRoaXMucGFja2V0U2l6ZUNvbnRyb2xfKSB7XG4gICAgdGhpcy5wYWNrZXRTaXplQ29udHJvbF8uZW5hYmxlKCk7XG4gIH1cbn07XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBmaXJzdCBiaXQgb2YgdGhlIGZpcnN0IHBhY2tldCwgdXN1YWxseSBiZWNhdXNlIHdlIGp1c3Qgc2VudFxuICogYSBzaW5nbGUgYml0IGluIHZhcmlhbnQgMS5cbiAqL1xuTmV0U2ltU2VuZFBhbmVsLnByb3RvdHlwZS5jb25zdW1lRmlyc3RCaXQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnBhY2tldHNfLmxlbmd0aCA+IDApIHtcbiAgICB0aGlzLnBhY2tldHNfWzBdLmNvbnN1bWVGaXJzdEJpdCgpO1xuICAgIGlmICh0aGlzLnBhY2tldHNfWzBdLmdldFBhY2tldEJpbmFyeSgpID09PSAnJyAmJiB0aGlzLnBhY2tldHNfLmxlbmd0aCA+IDEpIHtcbiAgICAgIHRoaXMucmVtb3ZlUGFja2V0Xyh0aGlzLnBhY2tldHNfWzBdKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogU2hvdyBvciBoaWRlIHBhcnRzIG9mIHRoZSBzZW5kIFVJIGJhc2VkIG9uIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgZW5jb2RpbmdcbiAqIG1vZGUuXG4gKiBAcGFyYW0ge0VuY29kaW5nVHlwZVtdfSBuZXdFbmNvZGluZ3NcbiAqL1xuTmV0U2ltU2VuZFBhbmVsLnByb3RvdHlwZS5zZXRFbmNvZGluZ3MgPSBmdW5jdGlvbiAobmV3RW5jb2RpbmdzKSB7XG4gIHRoaXMuZW5hYmxlZEVuY29kaW5nc18gPSBuZXdFbmNvZGluZ3M7XG4gIHRoaXMucGFja2V0c18uZm9yRWFjaChmdW5jdGlvbiAocGFja2V0RWRpdG9yKSB7XG4gICAgcGFja2V0RWRpdG9yLnNldEVuY29kaW5ncyhuZXdFbmNvZGluZ3MpO1xuICB9KTtcbiAgdGhpcy5vbkNvbnRlbnRDaGFuZ2VfKCk7XG59O1xuXG4vKipcbiAqIENoYW5nZSBob3cgZGF0YSBpcyBpbnRlcnByZXRlZCBhbmQgZm9ybWF0dGVkIGJ5IHRoaXMgY29tcG9uZW50LCB0cmlnZ2VyaW5nXG4gKiBhbiB1cGRhdGUgb2YgYWxsIGlucHV0IGZpZWxkcy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBuZXdDaHVua1NpemVcbiAqL1xuTmV0U2ltU2VuZFBhbmVsLnByb3RvdHlwZS5zZXRDaHVua1NpemUgPSBmdW5jdGlvbiAobmV3Q2h1bmtTaXplKSB7XG4gIHRoaXMuY2h1bmtTaXplXyA9IG5ld0NodW5rU2l6ZTtcbiAgdGhpcy5wYWNrZXRzXy5mb3JFYWNoKGZ1bmN0aW9uIChwYWNrZXRFZGl0b3IpIHtcbiAgICBwYWNrZXRFZGl0b3Iuc2V0Q2h1bmtTaXplKG5ld0NodW5rU2l6ZSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBDaGFuZ2UgdGhlIGxvY2FsIGRldmljZSBiaXRyYXRlIHdoaWNoIGFmZmVjdHMgc2VuZCBhbmltYXRpb24gc3BlZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gbmV3Qml0UmF0ZSBpbiBiaXRzIHBlciBzZWNvbmRcbiAqL1xuTmV0U2ltU2VuZFBhbmVsLnByb3RvdHlwZS5zZXRCaXRSYXRlID0gZnVuY3Rpb24gKG5ld0JpdFJhdGUpIHtcbiAgdGhpcy5iaXRSYXRlXyA9IG5ld0JpdFJhdGU7XG4gIHRoaXMucGFja2V0c18uZm9yRWFjaChmdW5jdGlvbiAocGFja2V0RWRpdG9yKSB7XG4gICAgcGFja2V0RWRpdG9yLnNldEJpdFJhdGUobmV3Qml0UmF0ZSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBDYWxsYmFjayBwYXNzZWQgZG93biBpbnRvIHBhY2tldCBzaXplIGNvbnRyb2wsIGNhbGxlZCB3aGVuIHBhY2tldCBzaXplXG4gKiBpcyBjaGFuZ2VkIGJ5IHRoZSB1c2VyLlxuICogQHBhcmFtIHtudW1iZXJ9IG5ld1BhY2tldFNpemVcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVNlbmRQYW5lbC5wcm90b3R5cGUucGFja2V0U2l6ZUNoYW5nZUNhbGxiYWNrXyA9IGZ1bmN0aW9uIChuZXdQYWNrZXRTaXplKSB7XG4gIHRoaXMubWF4UGFja2V0U2l6ZV8gPSBuZXdQYWNrZXRTaXplO1xuICB0aGlzLnBhY2tldHNfLmZvckVhY2goZnVuY3Rpb24gKHBhY2tldEVkaXRvcil7XG4gICAgcGFja2V0RWRpdG9yLnNldE1heFBhY2tldFNpemUobmV3UGFja2V0U2l6ZSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBBZnRlciB0b2dnbGluZyBwYW5lbCB2aXNpYmlsaXR5LCB0cmlnZ2VyIGEgbGF5b3V0IHVwZGF0ZSBzbyBzZW5kL2xvZyBwYW5lbFxuICogc3BhY2UgaXMgc2hhcmVkIGNvcnJlY3RseS5cbiAqIEBwcml2YXRlXG4gKiBAb3ZlcnJpZGVcbiAqL1xuTmV0U2ltU2VuZFBhbmVsLnByb3RvdHlwZS5vbk1pbmltaXplckNsaWNrXyA9IGZ1bmN0aW9uICgpIHtcbiAgTmV0U2ltU2VuZFBhbmVsLnN1cGVyUHJvdG90eXBlLm9uTWluaW1pemVyQ2xpY2tfLmNhbGwodGhpcyk7XG4gIHRoaXMubmV0c2ltXy51cGRhdGVMYXlvdXQoKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cz0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdCA9IGZ1bmN0aW9uIGFub255bW91cyhsb2NhbHMsIGZpbHRlcnMsIGVzY2FwZVxuLyoqLykge1xuZXNjYXBlID0gZXNjYXBlIHx8IGZ1bmN0aW9uIChodG1sKXtcbiAgcmV0dXJuIFN0cmluZyhodG1sKVxuICAgIC5yZXBsYWNlKC8mKD8hXFx3KzspL2csICcmYW1wOycpXG4gICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xufTtcbnZhciBidWYgPSBbXTtcbndpdGggKGxvY2FscyB8fCB7fSkgeyAoZnVuY3Rpb24oKXsgXG4gYnVmLnB1c2goJycpOzE7XG4gIHZhciBpMThuID0gcmVxdWlyZSgnLi9sb2NhbGUnKTtcbiAgdmFyIE1lc3NhZ2VHcmFudWxhcml0eSA9IHJlcXVpcmUoJy4vTmV0U2ltQ29uc3RhbnRzJykuTWVzc2FnZUdyYW51bGFyaXR5O1xuOyBidWYucHVzaCgnXFxuPGRpdiBjbGFzcz1cInNlbmQtcGFuZWwtcGFja2V0c1wiPjwvZGl2PlxcbjxkaXYgY2xhc3M9XCJwYW5lbC1mb290ZXJcIj5cXG4gIDxkaXYgY2xhc3M9XCJyaWdodC1zaWRlLWNvbnRyb2xzXCI+XFxuICAgICcpOzg7IGlmIChsZXZlbC5zaG93QWRkUGFja2V0QnV0dG9uKSB7IDsgYnVmLnB1c2goJ1xcbiAgICAgIDxzcGFuIGNsYXNzPVwibmV0c2ltLWJ1dHRvbiBzZWNvbmRhcnkgbGFyZ2UtYnV0dG9uXCIgaWQ9XCJhZGQtcGFja2V0LWJ1dHRvblwiPicsIGVzY2FwZSgoOSwgIGkxOG4uYWRkUGFja2V0KCkgKSksICc8L3NwYW4+XFxuICAgICcpOzEwOyB9IDsgYnVmLnB1c2goJ1xcbiAgICAnKTsxMTsgaWYgKGxldmVsLm1lc3NhZ2VHcmFudWxhcml0eSA9PT0gTWVzc2FnZUdyYW51bGFyaXR5LlBBQ0tFVFMpIHsgOyBidWYucHVzaCgnXFxuICAgICAgPHNwYW4gY2xhc3M9XCJuZXRzaW0tYnV0dG9uIGxhcmdlLWJ1dHRvblwiIGlkPVwic2VuZC1idXR0b25cIj4nLCBlc2NhcGUoKDEyLCAgaTE4bi5zZW5kKCkgKSksICc8L3NwYW4+XFxuICAgICcpOzEzOyB9IGVsc2UgaWYgKGxldmVsLm1lc3NhZ2VHcmFudWxhcml0eSA9PT0gTWVzc2FnZUdyYW51bGFyaXR5LkJJVFMpIHsgOyBidWYucHVzaCgnXFxuICAgICAgPHNwYW4gY2xhc3M9XCJuZXRzaW0tYnV0dG9uIGxhcmdlLWJ1dHRvblwiIGlkPVwic2V0LXdpcmUtYnV0dG9uXCI+JywgZXNjYXBlKCgxNCwgIGkxOG4uc2V0V2lyZSgpICkpLCAnPC9zcGFuPlxcbiAgICAnKTsxNTsgfSA7IGJ1Zi5wdXNoKCdcXG4gIDwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cInBhY2tldC1zaXplXCI+PC9kaXY+XFxuPC9kaXY+XFxuJyk7IH0pKCk7XG59IFxucmV0dXJuIGJ1Zi5qb2luKCcnKTtcbn07XG4gIHJldHVybiBmdW5jdGlvbihsb2NhbHMpIHtcbiAgICByZXR1cm4gdChsb2NhbHMsIHJlcXVpcmUoXCJlanNcIikuZmlsdGVycyk7XG4gIH1cbn0oKSk7IiwiLyoqXG4gKiBAb3ZlcnZpZXcgVUkgY29udHJvbGxlciBmb3IgdGhlIFwiUm91dGVyXCIgdGFiIGluIHRoZSBsZWZ0IGNvbHVtbi5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBtYXJrdXAgPSByZXF1aXJlKCcuL05ldFNpbVJvdXRlclRhYi5odG1sLmVqcycpO1xudmFyIE5ldFNpbUJhbmR3aWR0aENvbnRyb2wgPSByZXF1aXJlKCcuL05ldFNpbUJhbmR3aWR0aENvbnRyb2wnKTtcbnZhciBOZXRTaW1NZW1vcnlDb250cm9sID0gcmVxdWlyZSgnLi9OZXRTaW1NZW1vcnlDb250cm9sJyk7XG52YXIgTmV0U2ltUm91dGVyU3RhdHNUYWJsZSA9IHJlcXVpcmUoJy4vTmV0U2ltUm91dGVyU3RhdHNUYWJsZScpO1xudmFyIE5ldFNpbUdsb2JhbHMgPSByZXF1aXJlKCcuL05ldFNpbUdsb2JhbHMnKTtcblxuLyoqXG4gKiBHZW5lcmF0b3IgYW5kIGNvbnRyb2xsZXIgZm9yIHJvdXRlciBpbmZvcm1hdGlvbiB2aWV3LlxuICogQHBhcmFtIHtqUXVlcnl9IHJvb3REaXYgLSBQYXJlbnQgZWxlbWVudCBmb3IgdGhpcyBjb21wb25lbnQuXG4gKiBAcGFyYW0ge09iamVjdH0gY2FsbGJhY2tzXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja3MuYmFuZHdpZHRoU2xpZGVyQ2hhbmdlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrcy5iYW5kd2lkdGhTbGlkZXJTdG9wQ2FsbGJhY2tcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrcy5tZW1vcnlTbGlkZXJDaGFuZ2VDYWxsYmFja1xuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tzLm1lbW9yeVNsaWRlclN0b3BDYWxsYmFja1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBOZXRTaW1Sb3V0ZXJUYWIgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyb290RGl2LCBjYWxsYmFja3MpIHtcbiAgLyoqXG4gICAqIENvbXBvbmVudCByb290LCB3aGljaCB3ZSBmaWxsIHdoZW5ldmVyIHdlIGNhbGwgcmVuZGVyKClcbiAgICogQHR5cGUge2pRdWVyeX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucm9vdERpdl8gPSByb290RGl2O1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7ZnVuY3Rpb259XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmJhbmR3aWR0aFNsaWRlckNoYW5nZUNhbGxiYWNrXyA9IGNhbGxiYWNrcy5iYW5kd2lkdGhTbGlkZXJDaGFuZ2VDYWxsYmFjaztcblxuICAvKipcbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5iYW5kd2lkdGhTbGlkZXJTdG9wQ2FsbGJhY2tfID0gY2FsbGJhY2tzLmJhbmR3aWR0aFNsaWRlclN0b3BDYWxsYmFjaztcblxuICAvKipcbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5tZW1vcnlTbGlkZXJDaGFuZ2VDYWxsYmFja18gPSBjYWxsYmFja3MubWVtb3J5U2xpZGVyQ2hhbmdlQ2FsbGJhY2s7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubWVtb3J5U2xpZGVyU3RvcENhbGxiYWNrXyA9IGNhbGxiYWNrcy5tZW1vcnlTbGlkZXJTdG9wQ2FsbGJhY2s7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtOZXRTaW1Sb3V0ZXJTdGF0c1RhYmxlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5yb3V0ZXJTdGF0c1RhYmxlXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtOZXRTaW1CYW5kd2lkdGhDb250cm9sfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5iYW5kd2lkdGhDb250cm9sXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtOZXRTaW1NZW1vcnlDb250cm9sfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5tZW1vcnlDb250cm9sXyA9IG51bGw7XG5cbiAgLy8gSW5pdGlhbCByZW5kZXJcbiAgdGhpcy5yZW5kZXIoKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtSdW5Mb29wfSBydW5Mb29wXG4gKi9cbk5ldFNpbVJvdXRlclRhYi5wcm90b3R5cGUuYXR0YWNoVG9SdW5Mb29wID0gZnVuY3Rpb24gKHJ1bkxvb3ApIHtcbiAgaWYgKHRoaXMucm91dGVyU3RhdHNUYWJsZV8pIHtcbiAgICB0aGlzLnJvdXRlclN0YXRzVGFibGVfLmF0dGFjaFRvUnVuTG9vcChydW5Mb29wKTtcbiAgfVxufTtcblxuLyoqXG4gKiBGaWxsIHRoZSByb290IGRpdiB3aXRoIG5ldyBlbGVtZW50cyByZWZsZWN0aW5nIHRoZSBjdXJyZW50IHN0YXRlLlxuICovXG5OZXRTaW1Sb3V0ZXJUYWIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGxldmVsQ29uZmlnID0gTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpO1xuXG4gIHZhciByZW5kZXJlZE1hcmt1cCA9ICQobWFya3VwKHtcbiAgICBsZXZlbDogbGV2ZWxDb25maWdcbiAgfSkpO1xuICB0aGlzLnJvb3REaXZfLmh0bWwocmVuZGVyZWRNYXJrdXApO1xuICB0aGlzLnJvdXRlclN0YXRzVGFibGVfID0gbmV3IE5ldFNpbVJvdXRlclN0YXRzVGFibGUoXG4gICAgICB0aGlzLnJvb3REaXZfLmZpbmQoJy5yb3V0ZXItc3RhdHMnKSk7XG4gIGlmIChsZXZlbENvbmZpZy5zaG93Um91dGVyQmFuZHdpZHRoQ29udHJvbCkge1xuICAgIHRoaXMuYmFuZHdpZHRoQ29udHJvbF8gPSBuZXcgTmV0U2ltQmFuZHdpZHRoQ29udHJvbChcbiAgICAgICAgdGhpcy5yb290RGl2Xy5maW5kKCcuYmFuZHdpZHRoLWNvbnRyb2wnKSxcbiAgICAgICAgdGhpcy5iYW5kd2lkdGhTbGlkZXJDaGFuZ2VDYWxsYmFja18sXG4gICAgICAgIHRoaXMuYmFuZHdpZHRoU2xpZGVyU3RvcENhbGxiYWNrXyk7XG4gIH1cbiAgaWYgKGxldmVsQ29uZmlnLnNob3dSb3V0ZXJNZW1vcnlDb250cm9sKSB7XG4gICAgdGhpcy5tZW1vcnlDb250cm9sXyA9IG5ldyBOZXRTaW1NZW1vcnlDb250cm9sKFxuICAgICAgICB0aGlzLnJvb3REaXZfLmZpbmQoJy5tZW1vcnktY29udHJvbCcpLFxuICAgICAgICB0aGlzLm1lbW9yeVNsaWRlckNoYW5nZUNhbGxiYWNrXyxcbiAgICAgICAgdGhpcy5tZW1vcnlTbGlkZXJTdG9wQ2FsbGJhY2tfKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge05ldFNpbUxvZ0VudHJ5W119IGxvZ0RhdGFcbiAqL1xuTmV0U2ltUm91dGVyVGFiLnByb3RvdHlwZS5zZXRSb3V0ZXJMb2dEYXRhID0gZnVuY3Rpb24gKGxvZ0RhdGEpIHtcbiAgaWYgKHRoaXMucm91dGVyU3RhdHNUYWJsZV8pIHtcbiAgICB0aGlzLnJvdXRlclN0YXRzVGFibGVfLnNldFJvdXRlckxvZ0RhdGEobG9nRGF0YSk7XG4gIH1cbn07XG5cbi8qKiBAcGFyYW0ge251bWJlcn0gY3JlYXRpb25UaW1lc3RhbXBNcyAqL1xuTmV0U2ltUm91dGVyVGFiLnByb3RvdHlwZS5zZXRSb3V0ZXJDcmVhdGlvblRpbWUgPSBmdW5jdGlvbiAoY3JlYXRpb25UaW1lc3RhbXBNcykge1xuICBpZiAodGhpcy5yb3V0ZXJTdGF0c1RhYmxlXykge1xuICAgIHRoaXMucm91dGVyU3RhdHNUYWJsZV8uc2V0Um91dGVyQ3JlYXRpb25UaW1lKGNyZWF0aW9uVGltZXN0YW1wTXMpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBuZXdCYW5kd2lkdGggaW4gYml0cy9zZWNvbmRcbiAqL1xuTmV0U2ltUm91dGVyVGFiLnByb3RvdHlwZS5zZXRCYW5kd2lkdGggPSBmdW5jdGlvbiAobmV3QmFuZHdpZHRoKSB7XG4gIGlmICh0aGlzLmJhbmR3aWR0aENvbnRyb2xfKSB7XG4gICAgdGhpcy5iYW5kd2lkdGhDb250cm9sXy5zZXRWYWx1ZShuZXdCYW5kd2lkdGgpO1xuICB9XG4gIGlmICh0aGlzLnJvdXRlclN0YXRzVGFibGVfKSB7XG4gICAgdGhpcy5yb3V0ZXJTdGF0c1RhYmxlXy5zZXRCYW5kd2lkdGgobmV3QmFuZHdpZHRoKTtcbiAgfVxufTtcblxuLyoqIEBwYXJhbSB7bnVtYmVyfSBuZXdNZW1vcnkgaW4gYml0cy9zZWNvbmQgKi9cbk5ldFNpbVJvdXRlclRhYi5wcm90b3R5cGUuc2V0TWVtb3J5ID0gZnVuY3Rpb24gKG5ld01lbW9yeSkge1xuICBpZiAodGhpcy5tZW1vcnlDb250cm9sXykge1xuICAgIHRoaXMubWVtb3J5Q29udHJvbF8uc2V0VmFsdWUobmV3TWVtb3J5KTtcbiAgfVxuICBpZiAodGhpcy5yb3V0ZXJTdGF0c1RhYmxlXykge1xuICAgIHRoaXMucm91dGVyU3RhdHNUYWJsZV8uc2V0VG90YWxNZW1vcnkobmV3TWVtb3J5KTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gcXVldWVkUGFja2V0Q291bnRcbiAqL1xuTmV0U2ltUm91dGVyVGFiLnByb3RvdHlwZS5zZXRSb3V0ZXJRdWV1ZWRQYWNrZXRDb3VudCA9IGZ1bmN0aW9uIChxdWV1ZWRQYWNrZXRDb3VudCkge1xuICBpZiAodGhpcy5yb3V0ZXJTdGF0c1RhYmxlXykge1xuICAgIHRoaXMucm91dGVyU3RhdHNUYWJsZV8uc2V0Um91dGVyUXVldWVkUGFja2V0Q291bnQocXVldWVkUGFja2V0Q291bnQpO1xuICB9XG59O1xuXG4vKiogQHBhcmFtIHtudW1iZXJ9IHVzZWRNZW1vcnlJbkJpdHMgKi9cbk5ldFNpbVJvdXRlclRhYi5wcm90b3R5cGUuc2V0TWVtb3J5SW5Vc2UgPSBmdW5jdGlvbiAodXNlZE1lbW9yeUluQml0cykge1xuICBpZiAodGhpcy5yb3V0ZXJTdGF0c1RhYmxlXykge1xuICAgIHRoaXMucm91dGVyU3RhdHNUYWJsZV8uc2V0TWVtb3J5SW5Vc2UodXNlZE1lbW9yeUluQml0cyk7XG4gIH1cbn07XG5cbi8qKiBAcGFyYW0ge251bWJlcn0gZGF0YVJhdGVCaXRzUGVyU2Vjb25kICovXG5OZXRTaW1Sb3V0ZXJUYWIucHJvdG90eXBlLnNldERhdGFSYXRlID0gZnVuY3Rpb24gKGRhdGFSYXRlQml0c1BlclNlY29uZCkge1xuICBpZiAodGhpcy5yb3V0ZXJTdGF0c1RhYmxlXykge1xuICAgIHRoaXMucm91dGVyU3RhdHNUYWJsZV8uc2V0RGF0YVJhdGUoZGF0YVJhdGVCaXRzUGVyU2Vjb25kKTtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB0ID0gZnVuY3Rpb24gYW5vbnltb3VzKGxvY2FscywgZmlsdGVycywgZXNjYXBlXG4vKiovKSB7XG5lc2NhcGUgPSBlc2NhcGUgfHwgZnVuY3Rpb24gKGh0bWwpe1xuICByZXR1cm4gU3RyaW5nKGh0bWwpXG4gICAgLnJlcGxhY2UoLyYoPyFcXHcrOykvZywgJyZhbXA7JylcbiAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKVxuICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG59O1xudmFyIGJ1ZiA9IFtdO1xud2l0aCAobG9jYWxzIHx8IHt9KSB7IChmdW5jdGlvbigpeyBcbiBidWYucHVzaCgnJyk7MTtcbnZhciBpMThuID0gcmVxdWlyZSgnLi9sb2NhbGUnKTtcbjsgYnVmLnB1c2goJ1xcbjxkaXYgY2xhc3M9XCJuZXRzaW0tcm91dGVyLXRhYlwiPlxcbiAgPGgxPicsIGVzY2FwZSgoNSwgIGkxOG4ucm91dGVyVGFiX3N0YXRzKCkgKSksICc8L2gxPlxcbiAgPGRpdiBjbGFzcz1cInJvdXRlci1zdGF0c1wiPjwvZGl2PlxcbiAgJyk7NzsgaWYgKGxldmVsLnNob3dSb3V0ZXJCYW5kd2lkdGhDb250cm9sKSB7IDsgYnVmLnB1c2goJ1xcbiAgICA8aDE+JywgZXNjYXBlKCg4LCAgaTE4bi5yb3V0ZXJUYWJfYmFuZHdpZHRoKCkgKSksICc8L2gxPlxcbiAgICA8ZGl2IGNsYXNzPVwiYmFuZHdpZHRoLWNvbnRyb2xcIj48L2Rpdj5cXG4gICcpOzEwOyB9IDsgYnVmLnB1c2goJ1xcbiAgJyk7MTE7IGlmIChsZXZlbC5zaG93Um91dGVyTWVtb3J5Q29udHJvbCkgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgPGgxPicsIGVzY2FwZSgoMTIsICBpMThuLnJvdXRlclRhYl9tZW1vcnkoKSApKSwgJzwvaDE+XFxuICAgIDxkaXYgY2xhc3M9XCJtZW1vcnktY29udHJvbFwiPjwvZGl2PlxcbiAgJyk7MTQ7IH0gOyBidWYucHVzaCgnXFxuICA8aDE+JywgZXNjYXBlKCgxNSwgIGkxOG4ucm91dGVyVGFiX2xvZ3MoKSApKSwgJzwvaDE+XFxuICA8c3BhbiBjbGFzcz1cInNlY29uZGFyeSBuZXRzaW0tYnV0dG9uIGxhcmdlLWJ1dHRvblwiIGlkPVwic2hvdy1yb3V0ZXItbG9nLW1vZGFsLXR3b1wiIGRhdGEtdG9nZ2xlPVwibW9kYWxcIiBkYXRhLXRhcmdldD1cIiNyb3V0ZXItbG9nLW1vZGFsXCI+JywgZXNjYXBlKCgxNiwgIGkxOG4ubG9nQnJvd3NlckJ1dHRvbigpICkpLCAnPC9zcGFuPlxcbjwvZGl2PlxcbicpOyB9KSgpO1xufSBcbnJldHVybiBidWYuam9pbignJyk7XG59O1xuICByZXR1cm4gZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgcmV0dXJuIHQobG9jYWxzLCByZXF1aXJlKFwiZWpzXCIpLmZpbHRlcnMpO1xuICB9XG59KCkpOyIsIi8qKlxuICogQG92ZXJ2aWV3IFVJIGNvbXBvbmVudCBkaXNwbGF5aW5nIHJvdXRlciBzdGF0cyBvbiB0aGUgXCJSb3V0ZXJcIiB0YWIuXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgbWFya3VwID0gcmVxdWlyZSgnLi9OZXRTaW1Sb3V0ZXJTdGF0c1RhYmxlLmh0bWwuZWpzJyk7XG52YXIgTmV0U2ltVXRpbHMgPSByZXF1aXJlKCcuL05ldFNpbVV0aWxzJyk7XG52YXIgTmV0U2ltTG9nRW50cnkgPSByZXF1aXJlKCcuL05ldFNpbUxvZ0VudHJ5Jyk7XG5cbi8qKlxuICogUmVuZGVyIGV2ZXJ5IGhhbGYtc2Vjb25kLCBtaW5pbXVtLlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdFxuICovXG52YXIgTUFYX1JFTkRFUl9ERUxBWV9NUyA9IDUwMDtcblxuLyoqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0XG4gKi9cbnZhciBNSUxMSVNfUEVSX1NFQ09ORCA9IDEwMDA7XG5cbi8qKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdFxuICovXG52YXIgU0VDT05EU19QRVJfTUlOVVRFID0gNjA7XG5cbi8qKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdFxuICovXG52YXIgTUlMTElTX1BFUl9NSU5VVEUgPSBNSUxMSVNfUEVSX1NFQ09ORCAqIFNFQ09ORFNfUEVSX01JTlVURTtcblxuLyoqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0XG4gKi9cbnZhciBNSU5VVEVTX1BFUl9IT1VSID0gNjA7XG5cbi8qKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdFxuICovXG52YXIgTUlMTElTX1BFUl9IT1VSID0gTUlMTElTX1BFUl9NSU5VVEUgKiBNSU5VVEVTX1BFUl9IT1VSO1xuXG4vKipcbiAqIEdlbmVyYXRvciBhbmQgY29udHJvbGxlciBmb3IgRE5TIG5ldHdvcmsgbG9va3VwIHRhYmxlIGNvbXBvbmVudC5cbiAqIFNob3dzIGRpZmZlcmVudCBhbW91bnRzIG9mIGluZm9ybWF0aW9uIGRlcGVuZGluZyBvbiB0aGUgRE5TIG1vZGUuXG4gKlxuICogQHBhcmFtIHtqUXVlcnl9IHJvb3REaXZcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgTmV0U2ltUm91dGVyU3RhdHNUYWJsZSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJvb3REaXYpIHtcbiAgLyoqXG4gICAqIENvbXBvbmVudCByb290LCB3aGljaCB3ZSBmaWxsIHdoZW5ldmVyIHdlIGNhbGwgcmVuZGVyKClcbiAgICogQHR5cGUge2pRdWVyeX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucm9vdERpdl8gPSByb290RGl2O1xuXG4gIC8qKlxuICAgKiBMYXN0IHJlbmRlciB0aW1lLCBpbiBzaW11bGF0aW9uLXRpbWUuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmxhc3RSZW5kZXJUaW1lXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFVuaXggdGltZXN0YW1wIChsb2NhbCkgb2Ygcm91dGVyIGNyZWF0aW9uIHRpbWVcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucm91dGVyQ3JlYXRpb25UaW1lXyA9IDA7XG5cbiAgLyoqXG4gICAqIFRvdGFsIGNvdW50IG9mIHBhY2tldHMgdGhpcyByb3V0ZXIgaGFzIHJlY2VpdmVkLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy50b3RhbFBhY2tldHNfID0gMDtcblxuICAvKipcbiAgICogVG90YWwgY291bnQgb2YgcGFja2V0cyB0aGlzIHJvdXRlciBoYXMgc3VjY2Vzc2Z1bGx5IHByb2Nlc3NlZC5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuc3VjY2Vzc2Z1bFBhY2tldHNfID0gMDtcblxuICAvKipcbiAgICogVG90YWwgc2l6ZSBvZiBhbGwgcGFja2V0cyByZWNlaXZlZCBieSB0aGlzIHJvdXRlciwgaW4gYml0cy5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMudG90YWxEYXRhXyA9IDA7XG5cbiAgLyoqXG4gICAqIFRvdGFsIHNpemUgb2YgYWxsIHBhY2tldHMgc3VjY2Vzc2Z1bGx5IHByb2Nlc3NlZCBieSB0aGlzIHJvdXRlciwgaW4gYml0cy5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuc3VjY2Vzc2Z1bERhdGFfID0gMDtcblxuICAvKipcbiAgICogTWF4aW11bSByYXRlIG9mIGRhdGEgdHJhbnNmZXIgKGluIGJpdHMgcGVyIHNlY29uZClcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuYmFuZHdpZHRoTGltaXRfID0gMDtcblxuICAvKipcbiAgICogQXZlcmFnZSByYXRlIG9mIGRhdGEgdHJhbnNmZXIgKGluIGJpdHMgcGVyIHNlY29uZCkgb3ZlciB0aGUgbGFzdFxuICAgKiBEQVRBX1JBVEVfV0lORE9XX01TIG1pbGxpc2Vjb25kcy5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuZGF0YVJhdGVfID0gMDtcblxuICAvKipcbiAgICogUm91dGVyJ3MgdG90YWwgbWVtb3J5IGNhcGFjaXR5LCBpbiBiaXRzLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy50b3RhbE1lbW9yeV8gPSAwO1xuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgcGFja2V0cyBpbiB0aGUgcm91dGVyJ3MgcXVldWUuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnF1ZXVlZFBhY2tldHNfID0gMDtcblxuICAvKipcbiAgICogQ3VycmVudCBzaXplIG9mIHRoZSByb3V0ZXIncyBwYWNrZXQgcXVldWUsIGluIGJpdHMuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnVzZWRNZW1vcnlfID0gMDtcblxuICB0aGlzLnJlbmRlcih7fSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7UnVuTG9vcH0gcnVuTG9vcFxuICovXG5OZXRTaW1Sb3V0ZXJTdGF0c1RhYmxlLnByb3RvdHlwZS5hdHRhY2hUb1J1bkxvb3AgPSBmdW5jdGlvbiAocnVuTG9vcCkge1xuICBydW5Mb29wLnJlbmRlci5yZWdpc3Rlcih0aGlzLnJlbmRlci5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogRmlsbCB0aGUgcm9vdCBkaXYgd2l0aCBuZXcgZWxlbWVudHMgcmVmbGVjdGluZyB0aGUgY3VycmVudCBzdGF0ZVxuICogQHBhcmFtIHtSdW5Mb29wLkNsb2NrfSBjbG9ja1xuICovXG5OZXRTaW1Sb3V0ZXJTdGF0c1RhYmxlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoY2xvY2spIHtcbiAgaWYgKCF0aGlzLm5lZWRzUmVuZGVyKGNsb2NrKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciByZW5kZXJlZE1hcmt1cCA9ICQobWFya3VwKHtcbiAgICB1cHRpbWU6IHRoaXMuZ2V0TG9jYWxpemVkVXB0aW1lKCksXG4gICAgcXVldWVkUGFja2V0czogdGhpcy5xdWV1ZWRQYWNrZXRzXyxcbiAgICB0b3RhbFBhY2tldHM6IHRoaXMudG90YWxQYWNrZXRzXyxcbiAgICBzdWNjZXNzZnVsUGFja2V0czogdGhpcy5zdWNjZXNzZnVsUGFja2V0c18sXG4gICAgdG90YWxEYXRhOiB0aGlzLnRvdGFsRGF0YV8sXG4gICAgc3VjY2Vzc2Z1bERhdGE6IHRoaXMuc3VjY2Vzc2Z1bERhdGFfLFxuICAgIGJhbmR3aWR0aExpbWl0OiB0aGlzLmJhbmR3aWR0aExpbWl0XyxcbiAgICBkYXRhUmF0ZTogdGhpcy5kYXRhUmF0ZV8sXG4gICAgdG90YWxNZW1vcnk6IHRoaXMudG90YWxNZW1vcnlfLFxuICAgIHVzZWRNZW1vcnk6IHRoaXMudXNlZE1lbW9yeV9cbiAgfSkpO1xuICB0aGlzLnJvb3REaXZfLmh0bWwocmVuZGVyZWRNYXJrdXApO1xuICB0aGlzLmxhc3RSZW5kZXJUaW1lXyA9IGNsb2NrLnRpbWU7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7UnVuTG9vcC5DbG9ja30gY2xvY2tcbiAqIEByZXR1cm5zIHtib29sZWFufSB3aGV0aGVyIGEgcmVuZGVyIG9wZXJhdGlvbiBpcyBuZWVkZWQuXG4gKi9cbk5ldFNpbVJvdXRlclN0YXRzVGFibGUucHJvdG90eXBlLm5lZWRzUmVuZGVyID0gZnVuY3Rpb24gKGNsb2NrKSB7XG4gIHJldHVybiAoIXRoaXMubGFzdFJlbmRlclRpbWVfIHx8XG4gICAgICBjbG9jay50aW1lIC0gdGhpcy5sYXN0UmVuZGVyVGltZV8gPiBNQVhfUkVOREVSX0RFTEFZX01TKTtcbn07XG5cbi8qKlxuICogTWFyayB0aGUgcm91dGVyIGxvZyBkYXRhIGRpcnR5LCBzbyB0aGF0IGl0IHdpbGwgcmUtcmVuZGVyIG9uIHRoZVxuICogbmV4dCBmcmFtZS5cbiAqL1xuTmV0U2ltUm91dGVyU3RhdHNUYWJsZS5wcm90b3R5cGUuc2V0TmVlZHNSZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMubGFzdFJlbmRlclRpbWVfID0gbnVsbDtcbn07XG5cbi8qKlxuICogR2V0IGEgZHVyYXRpb24gc3RyaW5nIGZvciB0aGUgY3VycmVudCByb3V0ZXIgdXB0aW1lLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuTmV0U2ltUm91dGVyU3RhdHNUYWJsZS5wcm90b3R5cGUuZ2V0TG9jYWxpemVkVXB0aW1lID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaG91cnNVcHRpbWUgPSAwO1xuICB2YXIgbWludXRlc1VwdGltZSA9IDA7XG4gIHZhciBzZWNvbmRzVXB0aW1lID0gMDtcbiAgaWYgKHRoaXMucm91dGVyQ3JlYXRpb25UaW1lXyA+IDApIHtcbiAgICB2YXIgbWlsbGlzZWNvbmRzVXB0aW1lID0gRGF0ZS5ub3coKSAtIHRoaXMucm91dGVyQ3JlYXRpb25UaW1lXztcbiAgICBob3Vyc1VwdGltZSA9IE1hdGguZmxvb3IobWlsbGlzZWNvbmRzVXB0aW1lIC8gTUlMTElTX1BFUl9IT1VSKTtcbiAgICBtaWxsaXNlY29uZHNVcHRpbWUgLT0gaG91cnNVcHRpbWUgKiBNSUxMSVNfUEVSX0hPVVI7XG4gICAgbWludXRlc1VwdGltZSA9IE1hdGguZmxvb3IobWlsbGlzZWNvbmRzVXB0aW1lIC8gTUlMTElTX1BFUl9NSU5VVEUpO1xuICAgIG1pbGxpc2Vjb25kc1VwdGltZSAtPSBtaW51dGVzVXB0aW1lICogTUlMTElTX1BFUl9NSU5VVEU7XG4gICAgc2Vjb25kc1VwdGltZSA9IE1hdGguZmxvb3IobWlsbGlzZWNvbmRzVXB0aW1lIC8gTUlMTElTX1BFUl9TRUNPTkQpO1xuICB9XG4gIHJldHVybiBob3Vyc1VwdGltZS50b1N0cmluZygpICtcbiAgICAgICc6JyArIE5ldFNpbVV0aWxzLnplcm9QYWRMZWZ0KG1pbnV0ZXNVcHRpbWUsIDIpICtcbiAgICAgICc6JyArIE5ldFNpbVV0aWxzLnplcm9QYWRMZWZ0KHNlY29uZHNVcHRpbWUsIDIpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge05ldFNpbUxvZ0VudHJ5W119IGxvZ0VudHJpZXNcbiAqIEByZXR1cm5zIHtudW1iZXJ9IHRvdGFsIGRhdGEgc2l6ZSwgaW4gYml0cywgb2YgcGFja2V0cyByZXByZXNlbnRlZCBieSB0aGVcbiAqICAgICAgICAgIGdpdmVuIGxvZyBlbnRyaWVzLlxuICovXG52YXIgdG90YWxTaXplT2ZQYWNrZXRzID0gZnVuY3Rpb24gKGxvZ0VudHJpZXMpIHtcbiAgcmV0dXJuIGxvZ0VudHJpZXMucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBjdXIpIHtcbiAgICByZXR1cm4gcHJldiArIGN1ci5iaW5hcnkubGVuZ3RoO1xuICB9LCAwKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtOZXRTaW1Mb2dFbnRyeVtdfSBsb2dEYXRhXG4gKi9cbk5ldFNpbVJvdXRlclN0YXRzVGFibGUucHJvdG90eXBlLnNldFJvdXRlckxvZ0RhdGEgPSBmdW5jdGlvbiAobG9nRGF0YSkge1xuICB2YXIgc3VjY2Vzc0xvZ3MgPSBsb2dEYXRhLmZpbHRlcihmdW5jdGlvbiAobG9nRW50cnkpIHtcbiAgICByZXR1cm4gbG9nRW50cnkuc3RhdHVzID09PSBOZXRTaW1Mb2dFbnRyeS5Mb2dTdGF0dXMuU1VDQ0VTUztcbiAgfSk7XG5cbiAgdGhpcy50b3RhbFBhY2tldHNfID0gbG9nRGF0YS5sZW5ndGg7XG4gIHRoaXMuc3VjY2Vzc2Z1bFBhY2tldHNfID0gc3VjY2Vzc0xvZ3MubGVuZ3RoO1xuXG4gIHRoaXMudG90YWxEYXRhXyA9IHRvdGFsU2l6ZU9mUGFja2V0cyhsb2dEYXRhKTtcbiAgdGhpcy5zdWNjZXNzZnVsRGF0YV8gPSB0b3RhbFNpemVPZlBhY2tldHMoc3VjY2Vzc0xvZ3MpO1xuXG4gIHRoaXMuc2V0TmVlZHNSZW5kZXIoKTtcbn07XG5cbi8qKiBAcGFyYW0ge251bWJlcn0gY3JlYXRpb25UaW1lc3RhbXBNcyAqL1xuTmV0U2ltUm91dGVyU3RhdHNUYWJsZS5wcm90b3R5cGUuc2V0Um91dGVyQ3JlYXRpb25UaW1lID0gZnVuY3Rpb24gKGNyZWF0aW9uVGltZXN0YW1wTXMpIHtcbiAgdGhpcy5yb3V0ZXJDcmVhdGlvblRpbWVfID0gY3JlYXRpb25UaW1lc3RhbXBNcztcbiAgdGhpcy5zZXROZWVkc1JlbmRlcigpO1xufTtcblxuLyoqIEBwYXJhbSB7bnVtYmVyfSBuZXdCYW5kd2lkdGggaW4gYml0cyBwZXIgc2Vjb25kICovXG5OZXRTaW1Sb3V0ZXJTdGF0c1RhYmxlLnByb3RvdHlwZS5zZXRCYW5kd2lkdGggPSBmdW5jdGlvbiAobmV3QmFuZHdpZHRoKSB7XG4gIHRoaXMuYmFuZHdpZHRoTGltaXRfID0gbmV3QmFuZHdpZHRoO1xuICB0aGlzLnNldE5lZWRzUmVuZGVyKCk7XG59O1xuXG4vKiogQHBhcmFtIHtudW1iZXJ9IHRvdGFsTWVtb3J5SW5CaXRzICovXG5OZXRTaW1Sb3V0ZXJTdGF0c1RhYmxlLnByb3RvdHlwZS5zZXRUb3RhbE1lbW9yeSA9IGZ1bmN0aW9uICh0b3RhbE1lbW9yeUluQml0cykge1xuICB0aGlzLnRvdGFsTWVtb3J5XyA9IHRvdGFsTWVtb3J5SW5CaXRzO1xuICB0aGlzLnNldE5lZWRzUmVuZGVyKCk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBxdWV1ZWRQYWNrZXRDb3VudFxuICovXG5OZXRTaW1Sb3V0ZXJTdGF0c1RhYmxlLnByb3RvdHlwZS5zZXRSb3V0ZXJRdWV1ZWRQYWNrZXRDb3VudCA9IGZ1bmN0aW9uIChcbiAgICBxdWV1ZWRQYWNrZXRDb3VudCkge1xuICB0aGlzLnF1ZXVlZFBhY2tldHNfID0gcXVldWVkUGFja2V0Q291bnQ7XG4gIHRoaXMuc2V0TmVlZHNSZW5kZXIoKTtcbn07XG5cbi8qKiBAcGFyYW0ge251bWJlcn0gdXNlZE1lbW9yeUluQml0cyAqL1xuTmV0U2ltUm91dGVyU3RhdHNUYWJsZS5wcm90b3R5cGUuc2V0TWVtb3J5SW5Vc2UgPSBmdW5jdGlvbiAodXNlZE1lbW9yeUluQml0cykge1xuICB0aGlzLnVzZWRNZW1vcnlfID0gdXNlZE1lbW9yeUluQml0cztcbiAgdGhpcy5zZXROZWVkc1JlbmRlcigpO1xufTtcblxuLyoqIEBwYXJhbSB7bnVtYmVyfSBkYXRhUmF0ZUJpdHNQZXJTZWNvbmQgKi9cbk5ldFNpbVJvdXRlclN0YXRzVGFibGUucHJvdG90eXBlLnNldERhdGFSYXRlID0gZnVuY3Rpb24gKGRhdGFSYXRlQml0c1BlclNlY29uZCkge1xuICB0aGlzLmRhdGFSYXRlXyA9IGRhdGFSYXRlQml0c1BlclNlY29uZDtcbiAgdGhpcy5zZXROZWVkc1JlbmRlcigpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB0ID0gZnVuY3Rpb24gYW5vbnltb3VzKGxvY2FscywgZmlsdGVycywgZXNjYXBlXG4vKiovKSB7XG5lc2NhcGUgPSBlc2NhcGUgfHwgZnVuY3Rpb24gKGh0bWwpe1xuICByZXR1cm4gU3RyaW5nKGh0bWwpXG4gICAgLnJlcGxhY2UoLyYoPyFcXHcrOykvZywgJyZhbXA7JylcbiAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKVxuICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG59O1xudmFyIGJ1ZiA9IFtdO1xud2l0aCAobG9jYWxzIHx8IHt9KSB7IChmdW5jdGlvbigpeyBcbiBidWYucHVzaCgnJyk7MTtcbiAgdmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbiAgdmFyIE5ldFNpbVV0aWxzID0gcmVxdWlyZSgnLi9OZXRTaW1VdGlscycpO1xuXG4gIC8qKlxuICAgKiBXcml0ZSBhIHN0YXRzIHJvdyB3aXRoIHRoZSBnaXZlbiB0aXRsZSBhbmQgdmFsdWUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0aXRsZSAtIGxvY2FsaXplZCBuYW1lIG9mIHRoZSBzdGF0aXN0aWMgKHRoZSBoZWFkZXIgY29sdW1uIGNvbnRlbnRzKVxuICAgKiBAcGFyYW0geyp9IHN0YXRWYWx1ZSAtIHRoZSB2YWx1ZSBvZiB0aGUgc3RhdGlzdGljXG4gICAqL1xuICB2YXIgd3JpdGVTdGF0Um93ID0gZnVuY3Rpb24gKHRpdGxlLCBzdGF0VmFsdWUpIHtcbiAgICA7IGJ1Zi5wdXNoKCdcXG4gICAgICA8dHI+XFxuICAgICAgICA8dGggbm93cmFwPicsIGVzY2FwZSgoMTMsICB0aXRsZSApKSwgJzwvdGg+XFxuICAgICAgICA8dGQ+JywgZXNjYXBlKCgxNCwgIHN0YXRWYWx1ZSApKSwgJzwvdGQ+XFxuICAgICAgPC90cj5cXG4gICAgJyk7MTY7XG4gIH07XG5cbiAgLyoqXG4gICAqIFdyaXRlIGEgc3RhdHMgcm93IHRoYXQgZGlzcGxheXMgYSBmcmFjdGlvbiBhbmQgYWxzbyBpdHMgcGVyY2VudGFnZSBmb3JtLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGUgLSBsb2NhbGl6ZWQgbmFtZSBvZiB0aGUgc3RhdGlzdGljICh0aGUgaGVhZGVyIGNvbHVtbiBjb250ZW50cylcbiAgICogQHBhcmFtIHtudW1iZXJ9IHBhcnRWYWx1ZSAtIG51bWVyYXRvciBvZiB0aGUgc3RhdFxuICAgKiBAcGFyYW0ge251bWJlcn0gdG90YWxWYWx1ZSAtIGRlbm9taW5hdG9yIG9mIHRoZSBzdGF0XG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IFt0b1N0cmluZ0Z1bmN0aW9uXSBtZXRob2QgZm9yIGNvbnZlcnRpbmcgbnVtZXJhdG9yIGFuZCBkZW5vbWluYXRvciB0byBkaXNwbGF5IGZvcm1hdFxuICAgKi9cbiAgdmFyIGZyYWN0aW9uU3RhdFJvdyA9IGZ1bmN0aW9uICh0aXRsZSwgcGFydFZhbHVlLCB0b3RhbFZhbHVlLCB0b1N0cmluZ0Z1bmN0aW9uKSB7XG4gICAgdG9TdHJpbmdGdW5jdGlvbiA9IHV0aWxzLnZhbHVlT3IodG9TdHJpbmdGdW5jdGlvbiwgZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHg7IH0pO1xuICAgIHZhciB2YWx1ZVN0cmluZyA9IHRvU3RyaW5nRnVuY3Rpb24ocGFydFZhbHVlKSArICcgLyAnICsgdG9TdHJpbmdGdW5jdGlvbih0b3RhbFZhbHVlKTtcbiAgICBpZiAodG90YWxWYWx1ZSA+IDAgJiYgdG90YWxWYWx1ZSA8IEluZmluaXR5KSB7XG4gICAgICB2YWx1ZVN0cmluZyArPSAnICgnICsgTWF0aC5yb3VuZCgxMDAgKiBwYXJ0VmFsdWUgLyB0b3RhbFZhbHVlKSArICclKSc7XG4gICAgfVxuICAgIHdyaXRlU3RhdFJvdyh0aXRsZSwgdmFsdWVTdHJpbmcpO1xuICB9O1xuOyBidWYucHVzaCgnXFxuPHRhYmxlPlxcbiAgPHRib2R5PlxcbiAgICAnKTszNzsgd3JpdGVTdGF0Um93KCdVcHRpbWUnLCB1cHRpbWUpOyA7IGJ1Zi5wdXNoKCdcXG4gICAgJyk7Mzg7IHdyaXRlU3RhdFJvdygnUXVldWVkIFBhY2tldHMnLCBxdWV1ZWRQYWNrZXRzKTsgOyBidWYucHVzaCgnXFxuICAgICcpOzM5OyBmcmFjdGlvblN0YXRSb3coJ01lbW9yeSBVc2UnLCB1c2VkTWVtb3J5LCB0b3RhbE1lbW9yeSwgTmV0U2ltVXRpbHMuYml0c1RvTG9jYWxpemVkUm91bmRlZEJ5dGVzaXplKTsgOyBidWYucHVzaCgnXFxuICAgICcpOzQwOyBmcmFjdGlvblN0YXRSb3coJ1Rocm91Z2hwdXQnLCBkYXRhUmF0ZSwgYmFuZHdpZHRoTGltaXQsIE5ldFNpbVV0aWxzLmJpdHJhdGVUb0xvY2FsaXplZFJvdW5kZWRCaXRyYXRlKTsgOyBidWYucHVzaCgnXFxuICAgICcpOzQxOyBmcmFjdGlvblN0YXRSb3coJ1JvdXRlZCBQYWNrZXRzJywgc3VjY2Vzc2Z1bFBhY2tldHMsIHRvdGFsUGFja2V0cyk7IDsgYnVmLnB1c2goJ1xcbiAgICAnKTs0MjsgZnJhY3Rpb25TdGF0Um93KCdSb3V0ZWQgRGF0YScsIHN1Y2Nlc3NmdWxEYXRhLCB0b3RhbERhdGEsIE5ldFNpbVV0aWxzLmJpdHNUb0xvY2FsaXplZFJvdW5kZWRCeXRlc2l6ZSk7IDsgYnVmLnB1c2goJ1xcbiAgPC90Ym9keT5cXG48L3RhYmxlPlxcbicpOyB9KSgpO1xufSBcbnJldHVybiBidWYuam9pbignJyk7XG59O1xuICByZXR1cm4gZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgcmV0dXJuIHQobG9jYWxzLCByZXF1aXJlKFwiZWpzXCIpLmZpbHRlcnMpO1xuICB9XG59KCkpOyIsIi8qKlxuICogQG92ZXJ2aWV3IGEgbW9kYWwgZGlhbG9nIHNob3dpbmcgdGhlIHVuaW9uIG9mIGFsbCByb3V0ZXIgbG9ncyBmb3IgdGhlXG4gKiAgICAgICAgICAgY3VycmVudCBzaGFyZC5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpMThuID0gcmVxdWlyZSgnLi9sb2NhbGUnKTtcbnZhciBOZXRTaW1Mb2dFbnRyeSA9IHJlcXVpcmUoJy4vTmV0U2ltTG9nRW50cnknKTtcbnZhciBQYWNrZXQgPSByZXF1aXJlKCcuL1BhY2tldCcpO1xudmFyIG1hcmt1cCA9IHJlcXVpcmUoJy4vTmV0U2ltUm91dGVyTG9nTW9kYWwuaHRtbC5lanMnKTtcbnZhciBOZXRTaW1HbG9iYWxzID0gcmVxdWlyZSgnLi9OZXRTaW1HbG9iYWxzJyk7XG5cbi8qKiBAY29uc3Qge3N0cmluZ30gKi9cbnZhciBMT0dfRU5UUllfREFUQV9LRVkgPSAnTG9nRW50cnknO1xuXG4vKiogQGNvbnN0IHtudW1iZXJ9ICovXG52YXIgTUFYSU1VTV9ST1dTX0lOX0ZVTExfUkVOREVSID0gNTAwO1xuXG4vKipcbiAqIEdlbmVyYXRvciBhbmQgY29udHJvbGxlciBmb3IgY29udGVudHMgb2YgbW9kYWwgZGlhbG9nIHRoYXQgcmV2ZWFsc1xuICogYWxsIHJvdXRlciBsb2dzIHRvZ2V0aGVyLCBpbiBhIHNlYXJjaGFibGUvc29ydGFibGUvZmlsdGVyYWJsZSBtYW5uZXIuXG4gKlxuICogQHBhcmFtIHtqUXVlcnl9IHJvb3REaXZcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgTmV0U2ltUm91dGVyTG9nTW9kYWwgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyb290RGl2KSB7XG5cbiAgLyoqXG4gICAqIENvbXBvbmVudCByb290LCB3aGljaCB3ZSBmaWxsIHdoZW5ldmVyIHdlIGNhbGwgcmVuZGVyKClcbiAgICogQHByaXZhdGUge2pRdWVyeX1cbiAgICovXG4gIHRoaXMucm9vdERpdl8gPSByb290RGl2O1xuXG4gIC8qKlxuICAgKiBIaWRkZW4gYnkgZGVmYXVsdC5cbiAgICogQHByaXZhdGUge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLmlzVmlzaWJsZV8gPSBmYWxzZTtcblxuICAvLyBBdHRhY2ggaGFuZGxlcnMgZm9yIHNob3dpbmcgYW5kIGhpZGluZyB0aGUgbW9kYWxcbiAgdGhpcy5yb290RGl2Xy5vbignc2hvd24uYnMubW9kYWwnLCB0aGlzLm9uU2hvd18uYmluZCh0aGlzKSk7XG4gIHRoaXMucm9vdERpdl8ub24oJ2hpZGRlbi5icy5tb2RhbCcsIHRoaXMub25IaWRlXy5iaW5kKHRoaXMpKTtcblxuICAvKipcbiAgICogQHByaXZhdGUge05ldFNpbVNoYXJkfVxuICAgKi9cbiAgdGhpcy5zaGFyZF8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZSB7TmV0U2ltUm91dGVyTm9kZX1cbiAgICovXG4gIHRoaXMucm91dGVyXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlIHtOZXRTaW1Mb2dFbnRyeX1cbiAgICovXG4gIHRoaXMubG9nRW50cmllc18gPSBbXTtcblxuICAvKipcbiAgICogVGhlIGhpZ2hlc3QgbG9nIHJvdyBJRCBzdG9yZWQgaW4gbG9nRW50cmllc18sIHVzZWQgdG8gb25seSByZXRyaWV2ZSBuZXdcbiAgICogbG9nIHJvd3MsIHdlIGRvbid0IG5lZWQgdG8gcmV0cmlldmUgZXZlcnl0aGluZy5cbiAgICogQHByaXZhdGUge251bWJlcn1cbiAgICovXG4gIHRoaXMubGF0ZXN0Um93SURfID0gMDtcblxuICAvKipcbiAgICogVHJhY2tpbmcgaW5mb3JtYXRpb24gZm9yIHdoaWNoIGV2ZW50cyB3ZSdyZSByZWdpc3RlcmVkIHRvLCBzbyB3ZSBjYW5cbiAgICogcGVyZm9ybSBjbGVhbnVwIGFzIG5lZWRlZC5cbiAgICogQHByaXZhdGUge09iamVjdH1cbiAgICovXG4gIHRoaXMuZXZlbnRLZXlzXyA9IHt9O1xuXG4gIC8qKlxuICAgKiBTb3J0aW5nIGtleSwgY2hhbmdlZCBieSB1c2VyIGludGVyYWN0aW9uLCB3aGljaCBkZXRlcm1pbmVzIHdoaWNoIHNvcnRcbiAgICogd2UgdXNlIG9uIHJlbmRlci5cbiAgICogQHByaXZhdGUge3N0cmluZ31cbiAgICovXG4gIHRoaXMuc29ydEJ5XyA9ICd0aW1lc3RhbXAnO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIGN1cnJlbnRseSB1c2luZyBhIGRlc2NlbmRpbmcgc29ydC5cbiAgICogQHByaXZhdGUge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLnNvcnREZXNjZW5kaW5nXyA9IHRydWU7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgd2UgYXJlIGN1cnJlbnRseSBpbiBcIkFsbC1Sb3V0ZXJcIiBtb2RlIG9yIGRlYWxpbmcgd2l0aCBhXG4gICAqIHNpbmdsZSByb3V0ZXIuICBBbHdheXMgaW5pdGlhbGl6ZXMgdG8gdHJ1ZSBiZWNhdXNlIHdlIG5ldmVyIGluaXRpYWxpemVcbiAgICogY29ubmVjdGVkIHRvIGEgc2luZ2xlIHJvdXRlci5cbiAgICogQHByaXZhdGUge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLmlzQWxsUm91dGVyTG9nTW9kZV8gPSB0cnVlO1xuXG4gIHRoaXMucmVuZGVyKCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhIGNvbXBhcmF0b3IgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCB0byBzb3J0IGxvZyBlbnRyaWVzLCBjb25maWd1cmVkXG4gKiB0byBzb3J0IGFjY29yZGluZyB0byB0aGUgbG9nIGJyb3dzZXIncyBjdXJyZW50IGNvbmZpZ3VyYXRpb24uXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oTmV0U2ltTG9nRW50cnksIE5ldFNpbUxvZ0VudHJ5KX0gY29tcGFyZXMgdHdvIGxvZyBlbnRyaWVzLFxuICogICAgICAgICAgcmV0dXJucyAtMSBpZiB0aGUgZmlyc3Qgb25lIGJlbG9uZ3MgYmVmb3JlIHRoZSBzZWNvbmQgb25lLCAxIGlmXG4gKiAgICAgICAgICB0aGUgZmlyc3Qgb25lIGJlbG9uZ3MgYWZ0ZXIgdGhlIHNlY29uZCBvbmUsIGFuZCAwIGlmIHRoZXkgaGF2ZSB0aGVcbiAqICAgICAgICAgIHNhbWUgc29ydCBwb3NpdGlvbi5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVJvdXRlckxvZ01vZGFsLnByb3RvdHlwZS5nZXRTb3J0Q29tcGFyYXRvcl8gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBnZXRTb3J0VmFsdWUgPSBOZXRTaW1Sb3V0ZXJMb2dNb2RhbC5zb3J0S2V5VG9Tb3J0VmFsdWVHZXR0ZXJNYXBbdGhpcy5zb3J0QnlfXTtcbiAgdmFyIGludmVydE11bHRpcGxpZXIgPSB0aGlzLnNvcnREZXNjZW5kaW5nXyA/IC0xIDogMTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgdmFyIHggPSBnZXRTb3J0VmFsdWUoYSk7XG4gICAgdmFyIHkgPSBnZXRTb3J0VmFsdWUoYik7XG4gICAgcmV0dXJuICh4IDwgeSA/IC0xIDogeCA+IHkgPyAxIDogMCkgKiBpbnZlcnRNdWx0aXBsaWVyO1xuICB9O1xufTtcblxuTmV0U2ltUm91dGVyTG9nTW9kYWwuc29ydEtleVRvU29ydFZhbHVlR2V0dGVyTWFwID0ge1xuXG4gICd0aW1lc3RhbXAnOiBmdW5jdGlvbiAobG9nRW50cnkpIHtcbiAgICByZXR1cm4gbG9nRW50cnkudGltZXN0YW1wO1xuICB9LFxuXG4gICdsb2dnZWQtYnknOiBmdW5jdGlvbiAobG9nRW50cnkpIHtcbiAgICB2YXIgb3JpZ2luTm9kZSA9IGxvZ0VudHJ5LmdldE9yaWdpbk5vZGUoKTtcbiAgICBpZiAob3JpZ2luTm9kZSkge1xuICAgICAgcmV0dXJuIG9yaWdpbk5vZGUuZ2V0RGlzcGxheU5hbWUoKTtcbiAgICB9XG4gICAgcmV0dXJuIGxvZ0VudHJ5Lm5vZGVJRC50b1N0cmluZygxMCk7XG4gIH0sXG5cbiAgJ3N0YXR1cyc6IGZ1bmN0aW9uIChsb2dFbnRyeSkge1xuICAgIHJldHVybiBsb2dFbnRyeS5nZXRMb2NhbGl6ZWRTdGF0dXMoKTtcbiAgfSxcblxuICAnZnJvbS1hZGRyZXNzJzogZnVuY3Rpb24gKGxvZ0VudHJ5KSB7XG4gICAgcmV0dXJuIGxvZ0VudHJ5LmdldEhlYWRlckZpZWxkKFBhY2tldC5IZWFkZXJUeXBlLkZST01fQUREUkVTUyk7XG4gIH0sXG5cbiAgJ3RvLWFkZHJlc3MnOiBmdW5jdGlvbiAobG9nRW50cnkpIHtcbiAgICByZXR1cm4gbG9nRW50cnkuZ2V0SGVhZGVyRmllbGQoUGFja2V0LkhlYWRlclR5cGUuVE9fQUREUkVTUyk7XG4gIH0sXG5cbiAgJ3BhY2tldC1pbmZvJzogZnVuY3Rpb24gKGxvZ0VudHJ5KSB7XG4gICAgcmV0dXJuIGxvZ0VudHJ5LmdldExvY2FsaXplZFBhY2tldEluZm8oKTtcbiAgfSxcblxuICAnbWVzc2FnZSc6IGZ1bmN0aW9uIChsb2dFbnRyeSkge1xuICAgIHJldHVybiBsb2dFbnRyeS5nZXRNZXNzYWdlQXNjaWkoKTtcbiAgfVxuXG59O1xuXG4vKipcbiAqIFN0YXRlIGNoYW5nZXMgdGhhdCBvY2N1ciB3aGVuIHNob2luZyB0aGUgbG9nLlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUm91dGVyTG9nTW9kYWwucHJvdG90eXBlLm9uU2hvd18gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnNoYXJkXykge1xuICAgIHRoaXMuc2hhcmRfLmxvZ1RhYmxlLnN1YnNjcmliZSgpO1xuICB9XG4gIHRoaXMuaXNWaXNpYmxlXyA9IHRydWU7XG4gIHRoaXMucmVuZGVyKCk7XG59O1xuXG4vKipcbiAqIFN0YXRlIGNoYW5nZXMgdGhhdCBvY2N1ciB3aGVuIGhpZGluZyB0aGUgbG9nLlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUm91dGVyTG9nTW9kYWwucHJvdG90eXBlLm9uSGlkZV8gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnNoYXJkXykge1xuICAgIHRoaXMuc2hhcmRfLmxvZ1RhYmxlLnVuc3Vic2NyaWJlKCk7XG4gIH1cbiAgdGhpcy5pc1Zpc2libGVfID0gZmFsc2U7XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHtib29sZWFufSBUUlVFIGlmIHRoZSBtb2RhbCBpcyBjdXJyZW50bHkgc2hvd2luZy5cbiAqL1xuTmV0U2ltUm91dGVyTG9nTW9kYWwucHJvdG90eXBlLmlzVmlzaWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuaXNWaXNpYmxlXztcbn07XG5cbi8qKlxuICogRmlsbCB0aGUgcm9vdCBkaXYgd2l0aCBuZXcgZWxlbWVudHMgcmVmbGVjdGluZyB0aGUgY3VycmVudCBzdGF0ZVxuICovXG5OZXRTaW1Sb3V0ZXJMb2dNb2RhbC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAvLyBCZSBsYXp5LCBkb24ndCByZW5kZXIgaWYgbm90IHZpc2libGUuXG4gIGlmICghdGhpcy5pc1Zpc2libGUoKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFJlLXJlbmRlciBlbnRpcmUgbG9nIGJyb3dzZXIgVUlcbiAgdmFyIHJlbmRlcmVkTWFya3VwID0gJChtYXJrdXAoe1xuICAgIGlzQWxsUm91dGVyTG9nTW9kZTogdGhpcy5pc0FsbFJvdXRlckxvZ01vZGVfLFxuICAgIGNhblRvZ2dsZVJvdXRlckxvZ01vZGU6IHRoaXMuY2FuVG9nZ2xlUm91dGVyTG9nTW9kZV8oKSxcbiAgICBzb3J0Qnk6IHRoaXMuc29ydEJ5XyxcbiAgICBzb3J0RGVzY2VuZGluZzogdGhpcy5zb3J0RGVzY2VuZGluZ19cbiAgfSkpO1xuICB0aGlzLnJvb3REaXZfLmh0bWwocmVuZGVyZWRNYXJrdXApO1xuXG4gIC8vIEFkZCBpbnB1dCBoYW5kbGVyc1xuICB0aGlzLmdldFJvdXRlckxvZ1RvZ2dsZUJ1dHRvbigpLm9uZSgnY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRvZ2dsZVJvdXRlckxvZ01vZGVfKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfS5iaW5kKHRoaXMpKTtcblxuICB0aGlzLnJvb3REaXZfLmZpbmQoJ3RoJykuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdGhpcy5vblNvcnRIZWFkZXJDbGlja18oJChldmVudC50YXJnZXQpLmF0dHIoJ2RhdGEtc29ydC1rZXknKSk7XG4gIH0uYmluZCh0aGlzKSk7XG5cbiAgLy8gQWRkIHJvd3MgdG8gdGhlIHRhYmxlXG4gIHZhciByb3dzID0gdGhpcy5nZXRTb3J0ZWRGaWx0ZXJlZExvZ0VudHJpZXModGhpcy5sb2dFbnRyaWVzXylcbiAgICAgIC5zbGljZSgwLCBNQVhJTVVNX1JPV1NfSU5fRlVMTF9SRU5ERVIpXG4gICAgICAubWFwKHRoaXMubWFrZVRhYmxlUm93Xy5iaW5kKHRoaXMpKTtcbiAgdGhpcy5yb290RGl2Xy5maW5kKCd0Ym9keScpLmFwcGVuZChyb3dzKTtcblxuICBpZiAocm93cy5sZW5ndGggPT09IE1BWElNVU1fUk9XU19JTl9GVUxMX1JFTkRFUikge1xuICAgIHZhciBtYXhSZW5kZXJlZFdhcm5pbmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBtYXhSZW5kZXJlZFdhcm5pbmcuY2xhc3NOYW1lID0gJ2xvZy1icm93c2VyLWxpbWl0LW1lc3NhZ2UnO1xuICAgIG1heFJlbmRlcmVkV2FybmluZy50ZXh0Q29udGVudCA9IGkxOG4uc2hvd2luZ0ZpcnN0WExvZ0VudHJpZXMoe1xuICAgICAgeDogTUFYSU1VTV9ST1dTX0lOX0ZVTExfUkVOREVSXG4gICAgfSk7XG4gICAgdGhpcy5yb290RGl2Xy5maW5kKCd0YWJsZScpLmFmdGVyKG1heFJlbmRlcmVkV2FybmluZyk7XG4gIH1cbn07XG5cbi8qKlxuICogQ29udmVydCB0aGUgZ2l2ZW4gc2V0IG9mIGxvZyBlbnRyaWVzIHRvIHRhYmxlIHJvd3MgYW5kIGluc2VydCB0aGVtXG4gKiBpbnRvIHRoZSBET00sIGluc3RlYWQgb2YgcmUtcmVuZGVyaW5nIHRoZSB3aG9sZSB0YWJsZS5cbiAqIEBwYXJhbSB7IU5ldFNpbUxvZ0VudHJ5W119IG5ld0VudHJpZXNcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVJvdXRlckxvZ01vZGFsLnByb3RvdHlwZS5yZW5kZXJOZXdMb2dFbnRyaWVzXyA9IGZ1bmN0aW9uIChuZXdFbnRyaWVzKSB7XG4gIC8vIEJlIGxhenksIGRvbid0IHJlbmRlciBhdCBhbGwgaWYgbm90IHZpc2libGUuXG4gIGlmICghdGhpcy5pc1Zpc2libGUoKSB8fCBuZXdFbnRyaWVzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKiBAdHlwZSB7alF1ZXJ5fSBUYWJsZSBib2R5IGVsZW1lbnQuICovXG4gIHZhciB0Ym9keSA9IHRoaXMucm9vdERpdl8uZmluZCgndGJvZHknKTtcblxuICAvLyBHZXQgZXhpc3RpbmcgdGFibGUgcm93IGVsZW1lbnRzLCB3aGljaCBhcmUgYWxyZWFkeSBzb3J0ZWQgYW5kIGZpbHRlcmVkLlxuICB2YXIgb2xkUm93cyA9IHRib2R5LmZpbmQoJ3RyJyk7XG5cbiAgLy8gU29ydCBhbmQgZmlsdGVyIHRoZSBuZXcgZW50cmllcywgYW5kIGdlbmVyYXRlIERPTSByb3dzIGZvciB0aGVtLlxuICBuZXdFbnRyaWVzID0gdGhpcy5nZXRTb3J0ZWRGaWx0ZXJlZExvZ0VudHJpZXMobmV3RW50cmllcyk7XG4gIHZhciBuZXdSb3dzID0gJChuZXdFbnRyaWVzLm1hcCh0aGlzLm1ha2VUYWJsZVJvd18uYmluZCh0aGlzKSkpO1xuXG4gIC8vIFdhbGsgYm90aCBjb2xsZWN0aW9ucyB0byBtZXJnZSBuZXcgcm93cyBpbnRvIHRoZSBET01cbiAgdmFyIG5leHRPbGQgPSBnZXROZXh0SW5mbyhvbGRSb3dzLCAwKTtcbiAgdmFyIG5leHROZXcgPSBnZXROZXh0SW5mbyhuZXdSb3dzLCAwKTtcbiAgdmFyIGNvbXBhcmF0b3IgPSB0aGlzLmdldFNvcnRDb21wYXJhdG9yXygpO1xuICB3aGlsZSAobmV4dE5ldy5pbmRleCA8IG5ld1Jvd3MubGVuZ3RoICYmIG5leHRPbGQuaW5kZXggPCBvbGRSb3dzLmxlbmd0aCkge1xuICAgIGlmIChjb21wYXJhdG9yKG5leHROZXcubG9nRW50cnksIG5leHRPbGQubG9nRW50cnkpIDw9IDApIHtcbiAgICAgIG5leHROZXcudGFibGVSb3cuaW5zZXJ0QmVmb3JlKG5leHRPbGQudGFibGVSb3cpO1xuICAgICAgbmV4dE5ldyA9IGdldE5leHRJbmZvKG5ld1Jvd3MsIG5leHROZXcuaW5kZXggKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV4dE9sZCA9IGdldE5leHRJbmZvKG9sZFJvd3MsIG5leHRPbGQuaW5kZXggKyAxKTtcbiAgICB9XG4gIH1cblxuICAvLyBQdXQgd2hhdGV2ZXIncyBsZWZ0IG9uIHRoZSBlbmQgb2YgdGhlIHRhYmxlXG4gIHRib2R5LmFwcGVuZChuZXdSb3dzLnNsaWNlKG5leHROZXcuaW5kZXgpKTtcbn07XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgaGVscGVyIG9iamVjdCBmb3IgcGVyZm9ybWluZyB0aGUgbG9nIHJvdyBtZXJnZS5cbiAqIEBwYXJhbSB7alF1ZXJ5fSByb3dzIC0gV3JhcHBlZCBjb2xsZWN0aW9uIG9mIHRhYmxlIHJvd3MuXG4gKiBAcGFyYW0geyFudW1iZXJ9IGF0SW5kZXggLSBJbmRleCBpbnRvIGByb3dzYCBhdCB3aGljaCBpbmZvIHNob3VsZCBiZSBnZW5lcmF0ZWQuXG4gKiBAcmV0dXJucyB7e2luZGV4OiBudW1iZXIsIHRhYmxlUm93OiBqUXVlcnksIGxvZ0VudHJ5OiBOZXRTaW1Mb2dFbnRyeX19XG4gKi9cbmZ1bmN0aW9uIGdldE5leHRJbmZvKHJvd3MsIGF0SW5kZXgpIHtcbiAgdmFyIHJvdyA9IHJvd3MuZXEoYXRJbmRleCk7XG4gIHJldHVybiB7XG4gICAgaW5kZXg6IGF0SW5kZXgsXG4gICAgdGFibGVSb3c6IHJvdyxcbiAgICBsb2dFbnRyeTogcm93Lmxlbmd0aCA+IDAgPyByb3cuZGF0YShMT0dfRU5UUllfREFUQV9LRVkpIDoge31cbiAgfTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geyFOZXRTaW1Mb2dFbnRyeVtdfSBsb2dFbnRyaWVzXG4gKiBAcmV0dXJucyB7TmV0U2ltTG9nRW50cnlbXX0gc3Vic2V0IG9mIGxvZ0VudHJpZXMsIHNvcnRlZCBhbmQgZmlsdGVyZWRcbiAqICAgICAgICAgIGFjY29yZGluZyB0byB0aGUgbG9nIGJyb3dzZXIncyBjdXJyZW50IHNldHRpbmdzLlxuICovXG5OZXRTaW1Sb3V0ZXJMb2dNb2RhbC5wcm90b3R5cGUuZ2V0U29ydGVkRmlsdGVyZWRMb2dFbnRyaWVzID0gZnVuY3Rpb24gKGxvZ0VudHJpZXMpIHtcbiAgLy8gRmlsdGVyIGVudHJpZXMgdG8gY3VycmVudCBsb2cgYnJvd3NlciBmaWx0ZXIgbW9kZVxuICB2YXIgZmlsdGVyZWRMb2dFbnRyaWVzID0gdGhpcy5pc0FsbFJvdXRlckxvZ01vZGVfID9cbiAgICAgIGxvZ0VudHJpZXMgOlxuICAgICAgbG9nRW50cmllcy5maWx0ZXIoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgIHJldHVybiBlbnRyeS5ub2RlSUQgPT09IHRoaXMucm91dGVyXy5lbnRpdHlJRDtcbiAgICAgIH0sIHRoaXMpO1xuXG4gIHJldHVybiBmaWx0ZXJlZExvZ0VudHJpZXMuc29ydCh0aGlzLmdldFNvcnRDb21wYXJhdG9yXygpKTtcbn07XG5cbi8qKlxuICogR2l2ZW4gYSBsb2cgZW50cnksIGdlbmVyYXRlIGEgdGFibGUgcm93IHRoYXQgY2FuIGJlIGFkZGVkIHRvIHRoZSBsb2cgbW9kYWwuXG4gKiBAcGFyYW0geyFOZXRTaW1Mb2dFbnRyeX0gbG9nRW50cnlcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBhIHRyIGVsZW1lbnQuXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Sb3V0ZXJMb2dNb2RhbC5wcm90b3R5cGUubWFrZVRhYmxlUm93XyA9IGZ1bmN0aW9uIChsb2dFbnRyeSkge1xuICB2YXIgaGVhZGVyRmllbGRzID0gTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpLnJvdXRlckV4cGVjdHNQYWNrZXRIZWFkZXI7XG5cbiAgdmFyIHNob3dUb0FkZHJlc3MgPSBoZWFkZXJGaWVsZHMuaW5kZXhPZihQYWNrZXQuSGVhZGVyVHlwZS5UT19BRERSRVNTKSA+IC0xO1xuXG4gIHZhciBzaG93RnJvbUFkZHJlc3MgPSBoZWFkZXJGaWVsZHMuaW5kZXhPZihQYWNrZXQuSGVhZGVyVHlwZS5GUk9NX0FERFJFU1MpID4gLTE7XG5cbiAgdmFyIHNob3dQYWNrZXRJbmZvID0gaGVhZGVyRmllbGRzLmluZGV4T2YoUGFja2V0LkhlYWRlclR5cGUuUEFDS0VUX0lOREVYKSA+IC0xICYmXG4gICAgICBoZWFkZXJGaWVsZHMuaW5kZXhPZihQYWNrZXQuSGVhZGVyVHlwZS5QQUNLRVRfQ09VTlQpID4gLTE7XG5cbiAgdmFyIG9yaWdpbk5vZGUgPSBsb2dFbnRyeS5nZXRPcmlnaW5Ob2RlKCk7XG5cbiAgdmFyIHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG5cbiAgLy8gU3RvcmUgdGhlIGFjdHVhbCBsb2dFbnRyeSBvbiB0aGUgcm93IGZvciBzb3J0aW5nL21lcmdpbmcgbGF0ZXIuXG4gICQocm93KS5kYXRhKExPR19FTlRSWV9EQVRBX0tFWSwgbG9nRW50cnkpO1xuXG4gIHJvdy5hcHBlbmRDaGlsZChtYWtlQ2VsbChsb2dFbnRyeS5nZXRUaW1lU3RyaW5nKCkpKTtcblxuICByb3cuYXBwZW5kQ2hpbGQobWFrZUNlbGwob3JpZ2luTm9kZSA/XG4gICAgICBvcmlnaW5Ob2RlLmdldERpc3BsYXlOYW1lKCkgOiBsb2dFbnRyeS5ub2RlSUQpKTtcblxuICByb3cuYXBwZW5kQ2hpbGQobWFrZUNlbGwobG9nRW50cnkuZ2V0TG9jYWxpemVkU3RhdHVzKCkpKTtcblxuICBpZiAoc2hvd0Zyb21BZGRyZXNzKSB7XG4gICAgcm93LmFwcGVuZENoaWxkKG1ha2VDZWxsKGxvZ0VudHJ5LmdldEhlYWRlckZpZWxkKFBhY2tldC5IZWFkZXJUeXBlLkZST01fQUREUkVTUykpKTtcbiAgfVxuXG4gIGlmIChzaG93VG9BZGRyZXNzKSB7XG4gICAgcm93LmFwcGVuZENoaWxkKG1ha2VDZWxsKGxvZ0VudHJ5LmdldEhlYWRlckZpZWxkKFBhY2tldC5IZWFkZXJUeXBlLlRPX0FERFJFU1MpKSk7XG4gIH1cblxuICBpZiAoc2hvd1BhY2tldEluZm8pIHtcbiAgICByb3cuYXBwZW5kQ2hpbGQobWFrZUNlbGwobG9nRW50cnkuZ2V0TG9jYWxpemVkUGFja2V0SW5mbygpKSk7XG4gIH1cblxuICB2YXIgdGRNZXNzYWdlQm9keSA9IG1ha2VDZWxsKGxvZ0VudHJ5LmdldE1lc3NhZ2VBc2NpaSgpKTtcbiAgdGRNZXNzYWdlQm9keS5jbGFzc05hbWUgPSAnbWVzc2FnZSc7XG4gIHJvdy5hcHBlbmRDaGlsZCh0ZE1lc3NhZ2VCb2R5KTtcblxuICByZXR1cm4gcm93O1xufTtcblxuLyoqXG4gKiBAcGFyYW0geyFzdHJpbmd9IHRleHRcbiAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH0gdGhlIG5ldyBURCBlbGVtZW50LlxuICovXG5mdW5jdGlvbiBtYWtlQ2VsbCh0ZXh0KSB7XG4gIHZhciB0ZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gIHRkLnN0eWxlLndoaXRlU3BhY2UgPSAnbm93cmFwJztcbiAgdGQudGV4dENvbnRlbnQgPSB0ZXh0O1xuICByZXR1cm4gdGQ7XG59XG5cbi8qKlxuICogQ2hhbmdlIHRoZSBzb3J0IHNldHRpbmdzIGFuZCByZS1yZW5kZXIgdGhlIGxvZyB0YWJsZS5cbiAqIEBwYXJhbSB7IXN0cmluZ30gc29ydEtleVxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUm91dGVyTG9nTW9kYWwucHJvdG90eXBlLm9uU29ydEhlYWRlckNsaWNrXyA9IGZ1bmN0aW9uIChzb3J0S2V5KSB7XG4gIGlmICghc29ydEtleSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0aGlzLnNvcnRCeV8gPT09IHNvcnRLZXkpIHtcbiAgICB0aGlzLnNvcnREZXNjZW5kaW5nXyA9ICF0aGlzLnNvcnREZXNjZW5kaW5nXztcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnNvcnRCeV8gPSBzb3J0S2V5O1xuICAgIHRoaXMuc29ydERlc2NlbmRpbmdfID0gZmFsc2U7XG4gIH1cbiAgdGhpcy5yZW5kZXIoKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIGJ5IHRoZSBzdW11bGF0aW9uJ3Mgb25Sb3V0ZXJDb25uZWN0IGFuZCBvblJvdXRlckRpc2Nvbm5lY3RcbiAqIG1ldGhvZHMsIHRoaXMgbG9jYWxseSByZW1lbWJlcnMgdGhlIGN1cnJlbnQgcm91dGVyIHN0YXRlIGFuZCB0cmlnZ2Vyc1xuICogYSByZXJlbmRlclxuICogQHBhcmFtIHtOZXRTaW1Sb3V0ZXJOb2RlfSByb3V0ZXJcbiAqL1xuTmV0U2ltUm91dGVyTG9nTW9kYWwucHJvdG90eXBlLnNldFJvdXRlciA9IGZ1bmN0aW9uIChyb3V0ZXIpIHtcbiAgdGhpcy5yb3V0ZXJfID0gcm91dGVyO1xuICB0aGlzLmlzQWxsUm91dGVyTG9nTW9kZV8gPSAhdGhpcy5oYXNMb2NhbFJvdXRlcl8oKTtcbiAgdGhpcy5yZW5kZXIoKTtcbn07XG5cbi8qKlxuICogV2hldGhlciB3ZSBhcmUgY3VycmVudGx5IGNhcGFibGUgb2YgbG9nZ2luZyBhbGwgcm91dGVycyBvciBub3QuXG4gKiBJcyBhbHdheXMgdHJ1ZSBpZiB3ZSBhcmUgaW4gYSBsZXZlbCB3aXRoIGNvbm5lY3RlZCByb3V0ZXJzLlxuICogT3RoZXJ3aXNlLCBpcyBvbmx5IHRydWUgaWYgd2UgYXJlIG5vdCBsb2NhbGx5IGNvbm5lY3RlZCB0byBhIHJvdXRlci5cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUm91dGVyTG9nTW9kYWwucHJvdG90eXBlLmNhbkxvZ0FsbFJvdXRlcnNfID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpLmNvbm5lY3RlZFJvdXRlcnMgfHwgIXRoaXMuaGFzTG9jYWxSb3V0ZXJfKCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZmYgd2UgYXJlIGxvY2FsbHkgY29ubmVjdGVkIHRvIGEgcm91dGVyLlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Sb3V0ZXJMb2dNb2RhbC5wcm90b3R5cGUuaGFzTG9jYWxSb3V0ZXJfID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISEodGhpcy5yb3V0ZXJfKTtcbn07XG5cbi8qKlxuICogV2hldGhlciBvciBub3Qgd2UgY2FuIHN3aXRjaCBiZXR3ZWVuIGFsbC1yb3V0ZXIgYW5kIHNpbmdsZS1yb3V0ZXIgbG9nXG4gKiBtb2RlLiBXZSBjYW4gc3dpdGNoIHRvIHNpbmdsZS1yb3V0ZXIgaWZmIHdlIGhhdmUgYSBsb2NhbCByb3V0ZXIsIGFuZFxuICogd2UgY2FuIHN3aXRjaCB0byBhbGwtcm91dGVyIGlmZiB3ZSBhcmUgY2FwYWJsZSBvZiBsb2dnaW5nIGFsbCByb3V0ZXJzXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVJvdXRlckxvZ01vZGFsLnByb3RvdHlwZS5jYW5Ub2dnbGVSb3V0ZXJMb2dNb2RlXyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuaXNBbGxSb3V0ZXJMb2dNb2RlXykge1xuICAgIHJldHVybiB0aGlzLmhhc0xvY2FsUm91dGVyXygpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0aGlzLmNhbkxvZ0FsbFJvdXRlcnNfKCk7XG4gIH1cbn07XG5cbi8qKlxuICogVG9nZ2xlcyB0aGlzLmlzQWxsUm91dGVyTG9nTW9kZV8gYmV0d2VlbiBgdHJ1ZWAgYW5kIGBmYWxzZWBcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVJvdXRlckxvZ01vZGFsLnByb3RvdHlwZS50b2dnbGVSb3V0ZXJMb2dNb2RlXyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5pc0FsbFJvdXRlckxvZ01vZGVfID0gIXRoaXMuaXNBbGxSb3V0ZXJMb2dNb2RlXztcbn07XG5cbi8qKlxuICogRmluZHMgdGhlIGJ1dHRvbiB1c2VkIHRvIHRvZ2dsZSBiZXR3ZWVuIHJvdXRlciBsb2cgbW9kZXNcbiAqIEByZXR1cm5zIHtqUXVlcnl9XG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Sb3V0ZXJMb2dNb2RhbC5wcm90b3R5cGUuZ2V0Um91dGVyTG9nVG9nZ2xlQnV0dG9uID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5yb290RGl2Xy5maW5kKCdidXR0b24jcm91dGVybG9nLXRvZ2dsZScpO1xufTtcblxuLyoqXG4gKiBHaXZlIHRoZSBsb2cgYnJvd3NlciBhIHJlZmVyZW5jZSB0byB0aGUgc2hhcmQsIHNvIHRoYXQgaXQgY2FuIHF1ZXJ5IHRoZVxuICogbG9nIHRhYmxlLiAgT3IsIHBhc3MgbnVsbCB3aGVuIGRpc2Nvbm5lY3RpbmcgZnJvbSBhIHNoYXJkLlxuICogQHBhcmFtIHtOZXRTaW1TaGFyZHxudWxsfSBuZXdTaGFyZFxuICovXG5OZXRTaW1Sb3V0ZXJMb2dNb2RhbC5wcm90b3R5cGUuc2V0U2hhcmQgPSBmdW5jdGlvbiAobmV3U2hhcmQpIHtcblxuICBpZiAodGhpcy5ldmVudEtleXNfLnJlZ2lzdGVyZWRXaXRoU2hhcmQpIHtcbiAgICB0aGlzLmV2ZW50S2V5c18ucmVnaXN0ZXJlZFdpdGhTaGFyZC5sb2dUYWJsZS50YWJsZUNoYW5nZS51bnJlZ2lzdGVyKFxuICAgICAgICB0aGlzLmV2ZW50S2V5c18ubG9nVGFibGVDaGFuZ2UpO1xuICAgIHRoaXMuZXZlbnRLZXlzXy5yZWdpc3RlcmVkV2l0aFNoYXJkID0gbnVsbDtcbiAgfVxuXG4gIGlmIChuZXdTaGFyZCkge1xuICAgIHRoaXMuZXZlbnRLZXlzXy5sb2dUYWJsZUNoYW5nZSA9IG5ld1NoYXJkLmxvZ1RhYmxlLnRhYmxlQ2hhbmdlLnJlZ2lzdGVyKFxuICAgICAgICB0aGlzLm9uTG9nVGFibGVDaGFuZ2VfLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZXZlbnRLZXlzXy5yZWdpc3RlcmVkV2l0aFNoYXJkID0gbmV3U2hhcmQ7XG4gIH1cblxuICAvLyBXaGVuIGNoYW5naW5nIHNoYXJkcywgcmVzZXQgbG9nIHNvIHdlIGZldGNoIHRoZSB3aG9sZSB0aGluZyBuZXh0IHRpbWUuXG4gIHRoaXMubG9nRW50cmllc18ubGVuZ3RoID0gMDtcbiAgdGhpcy5sYXRlc3RSb3dJRF8gPSAwO1xuICB0aGlzLnNoYXJkXyA9IG5ld1NoYXJkO1xufTtcblxuLyoqXG4gKiBIYW5kbGUgbG9nIHRhYmxlIGNoYW5nZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Sb3V0ZXJMb2dNb2RhbC5wcm90b3R5cGUub25Mb2dUYWJsZUNoYW5nZV8gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoZWFkZXJTcGVjID0gTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpLnJvdXRlckV4cGVjdHNQYWNrZXRIZWFkZXI7XG4gIHZhciBuZXdSb3dzID0gdGhpcy5zaGFyZF8ubG9nVGFibGUucmVhZEFsbEZyb21JRCh0aGlzLmxhdGVzdFJvd0lEXyArIDEpO1xuICB2YXIgbmV3TG9nRW50cmllcyA9IG5ld1Jvd3MubWFwKGZ1bmN0aW9uIChyb3cpIHtcbiAgICB0aGlzLmxhdGVzdFJvd0lEXyA9IE1hdGgubWF4KHJvdy5pZCwgdGhpcy5sYXRlc3RSb3dJRF8pO1xuICAgIHJldHVybiBuZXcgTmV0U2ltTG9nRW50cnkodGhpcy5zaGFyZF8sIHJvdywgaGVhZGVyU3BlYyk7XG4gIH0sIHRoaXMpO1xuICAvLyBNb2RpZnkgdGhpcy5sb2dFbnRyaWVzXyBpbi1wbGFjZSwgYXBwZW5kaW5nIG5ldyBsb2cgZW50cmllc1xuICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLmxvZ0VudHJpZXNfLCBuZXdMb2dFbnRyaWVzKTtcbiAgdGhpcy5yZW5kZXJOZXdMb2dFbnRyaWVzXyhuZXdMb2dFbnRyaWVzKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cz0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdCA9IGZ1bmN0aW9uIGFub255bW91cyhsb2NhbHMsIGZpbHRlcnMsIGVzY2FwZVxuLyoqLykge1xuZXNjYXBlID0gZXNjYXBlIHx8IGZ1bmN0aW9uIChodG1sKXtcbiAgcmV0dXJuIFN0cmluZyhodG1sKVxuICAgIC5yZXBsYWNlKC8mKD8hXFx3KzspL2csICcmYW1wOycpXG4gICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xufTtcbnZhciBidWYgPSBbXTtcbndpdGggKGxvY2FscyB8fCB7fSkgeyAoZnVuY3Rpb24oKXsgXG4gYnVmLnB1c2goJycpOzE7XG52YXIgUGFja2V0ID0gcmVxdWlyZSgnLi9QYWNrZXQnKTtcbnZhciBpMThuID0gcmVxdWlyZSgnLi9sb2NhbGUnKTtcbnZhciBOZXRTaW1HbG9iYWxzID0gcmVxdWlyZSgnLi9OZXRTaW1HbG9iYWxzJyk7XG5cbnZhciBoZWFkZXJGaWVsZHMgPSBOZXRTaW1HbG9iYWxzLmdldExldmVsQ29uZmlnKCkucm91dGVyRXhwZWN0c1BhY2tldEhlYWRlcjtcblxuLyoqIEB0eXBlIHtib29sZWFufSAqL1xudmFyIHNob3dUb0FkZHJlc3MgPSBoZWFkZXJGaWVsZHMuaW5kZXhPZihQYWNrZXQuSGVhZGVyVHlwZS5UT19BRERSRVNTKSA+IC0xO1xuXG4vKiogQHR5cGUge2Jvb2xlYW59ICovXG52YXIgc2hvd0Zyb21BZGRyZXNzID0gaGVhZGVyRmllbGRzLmluZGV4T2YoUGFja2V0LkhlYWRlclR5cGUuRlJPTV9BRERSRVNTKSA+IC0xO1xuXG4vKiogQHR5cGUge2Jvb2xlYW59ICovXG52YXIgc2hvd1BhY2tldEluZm8gPSBoZWFkZXJGaWVsZHMuaW5kZXhPZihQYWNrZXQuSGVhZGVyVHlwZS5QQUNLRVRfSU5ERVgpID4gLTEgJiZcbiAgICBoZWFkZXJGaWVsZHMuaW5kZXhPZihQYWNrZXQuSGVhZGVyVHlwZS5QQUNLRVRfQ09VTlQpID4gLTE7XG5cbi8qKlxuICogQG5hbWUgaXNBbGxSb3V0ZXJMb2dNb2RlXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqL1xuXG4vKipcbiAqIEBuYW1lIHNvcnRCeVxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuXG4vKipcbiAqIEBuYW1lIHNvcnREZXNjZW5kaW5nXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBzb3J0TWFya3VwRm9yKHNvcnRLZXkpIHtcbiAgaWYgKHNvcnRLZXkgPT09IHNvcnRCeSkge1xuICAgIGlmIChzb3J0RGVzY2VuZGluZykge1xuICAgICAgcmV0dXJuICc8aSBjbGFzcz1cImZhIGZhLXNvcnQtZGVzY1wiPjwvaT4nO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJzxpIGNsYXNzPVwiZmEgZmEtc29ydC1hc2NcIj48L2k+JztcbiAgICB9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuOyBidWYucHVzaCgnXFxuPGRpdiBjbGFzcz1cIm1vZGFsLWRpYWxvZyBtb2RhbC1sZ1wiPlxcbiAgICA8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+XFxuICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJjbG9zZVwiIGRhdGEtZGlzbWlzcz1cIm1vZGFsXCIgYXJpYS1sYWJlbD1cIkNsb3NlXCI+PHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCI+JnRpbWVzOzwvc3Bhbj48L2J1dHRvbj5cXG5cXG4gICAgICAnKTs0ODsgaWYgKGNhblRvZ2dsZVJvdXRlckxvZ01vZGUpIHsgOyBidWYucHVzaCgnXFxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD1cInJvdXRlcmxvZy10b2dnbGVcIiBjbGFzcz1cInB1bGwtcmlnaHQgYnRuIGJ0bi1wcmltYXJ5IGJ0bi1taW5pXCI+JywgZXNjYXBlKCg0OSwgIChpc0FsbFJvdXRlckxvZ01vZGUpID8gaTE4bi5sb2dCcm93c2VySGVhZGVyX3RvZ2dsZU1pbmUoKSA6IGkxOG4ubG9nQnJvd3NlckhlYWRlcl90b2dnbGVBbGwoKSApKSwgJzwvYnV0dG9uPlxcbiAgICAgICcpOzUwOyB9IDsgYnVmLnB1c2goJ1xcblxcbiAgICAgICcpOzUyOyBpZiAoaXNBbGxSb3V0ZXJMb2dNb2RlKSB7IDsgYnVmLnB1c2goJ1xcbiAgICAgICAgPGg0IGNsYXNzPVwibW9kYWwtdGl0bGVcIj4nLCBlc2NhcGUoKDUzLCAgaTE4bi5sb2dCcm93c2VySGVhZGVyX2FsbCgpICkpLCAnPC9oND5cXG4gICAgICAnKTs1NDsgfSBlbHNlIHsgOyBidWYucHVzaCgnXFxuICAgICAgICA8aDQgY2xhc3M9XCJtb2RhbC10aXRsZVwiPicsIGVzY2FwZSgoNTUsICBpMThuLmxvZ0Jyb3dzZXJIZWFkZXJfbWluZSgpICkpLCAnPC9oND5cXG4gICAgICAnKTs1NjsgfSA7IGJ1Zi5wdXNoKCdcXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+XFxuICAgICAgPHRhYmxlPlxcbiAgICAgICAgPHRoZWFkPlxcbiAgICAgICAgICA8dHI+XFxuICAgICAgICAgICAgPHRoIG5vd3JhcCBkYXRhLXNvcnQta2V5PVwidGltZXN0YW1wXCI+JywgZXNjYXBlKCg2MiwgIGkxOG4udGltZSgpICkpLCAnICcsICg2MiwgIHNvcnRNYXJrdXBGb3IoJ3RpbWVzdGFtcCcpICksICc8L3RoPlxcbiAgICAgICAgICAgIDx0aCBub3dyYXAgZGF0YS1zb3J0LWtleT1cImxvZ2dlZC1ieVwiPicsIGVzY2FwZSgoNjMsICBpMThuLmxvZ2dlZEJ5Tm9kZSgpICkpLCAnICcsICg2MywgIHNvcnRNYXJrdXBGb3IoJ2xvZ2dlZC1ieScpICksICc8L3RoPlxcbiAgICAgICAgICAgIDx0aCBub3dyYXAgZGF0YS1zb3J0LWtleT1cInN0YXR1c1wiPicsIGVzY2FwZSgoNjQsICBpMThuLnN0YXR1cygpICkpLCAnICcsICg2NCwgIHNvcnRNYXJrdXBGb3IoJ3N0YXR1cycpICksICc8L3RoPlxcbiAgICAgICAgICAgICcpOzY1OyBpZiAoc2hvd0Zyb21BZGRyZXNzKSB7IDsgYnVmLnB1c2goJ1xcbiAgICAgICAgICAgICAgPHRoIG5vd3JhcCBkYXRhLXNvcnQta2V5PVwiZnJvbS1hZGRyZXNzXCI+JywgZXNjYXBlKCg2NiwgIGkxOG4uZnJvbSgpICkpLCAnICcsICg2NiwgIHNvcnRNYXJrdXBGb3IoJ2Zyb20tYWRkcmVzcycpICksICc8L3RoPlxcbiAgICAgICAgICAgICcpOzY3OyB9IDsgYnVmLnB1c2goJ1xcbiAgICAgICAgICAgICcpOzY4OyBpZiAoc2hvd1RvQWRkcmVzcykgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgICAgICAgIDx0aCBub3dyYXAgZGF0YS1zb3J0LWtleT1cInRvLWFkZHJlc3NcIj4nLCBlc2NhcGUoKDY5LCAgaTE4bi50bygpICkpLCAnICcsICg2OSwgIHNvcnRNYXJrdXBGb3IoJ3RvLWFkZHJlc3MnKSApLCAnPC90aD5cXG4gICAgICAgICAgICAnKTs3MDsgfSA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgICAgICAnKTs3MTsgaWYgKHNob3dQYWNrZXRJbmZvKSB7IDsgYnVmLnB1c2goJ1xcbiAgICAgICAgICAgICAgPHRoIG5vd3JhcCBkYXRhLXNvcnQta2V5PVwicGFja2V0LWluZm9cIj4nLCBlc2NhcGUoKDcyLCAgaTE4bi5wYWNrZXQoKSApKSwgJyAnLCAoNzIsICBzb3J0TWFya3VwRm9yKCdwYWNrZXQtaW5mbycpICksICc8L3RoPlxcbiAgICAgICAgICAgICcpOzczOyB9IDsgYnVmLnB1c2goJ1xcbiAgICAgICAgICAgIDx0aCBub3dyYXAgZGF0YS1zb3J0LWtleT1cIm1lc3NhZ2VcIj4nLCBlc2NhcGUoKDc0LCAgaTE4bi5tZXNzYWdlKCkgKSksICcgJywgKDc0LCAgc29ydE1hcmt1cEZvcignbWVzc2FnZScpICksICc8L3RoPlxcbiAgICAgICAgICA8L3RyPlxcbiAgICAgICAgPC90aGVhZD5cXG4gICAgICAgIDx0Ym9keT5cXG4gICAgICAgIDwvdGJvZHk+XFxuICAgICAgPC90YWJsZT5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj5cXG4gICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdFwiIGRhdGEtZGlzbWlzcz1cIm1vZGFsXCI+Q2xvc2U8L2J1dHRvbj5cXG4gICAgPC9kaXY+XFxuPC9kaXY+XFxuJyk7IH0pKCk7XG59IFxucmV0dXJuIGJ1Zi5qb2luKCcnKTtcbn07XG4gIHJldHVybiBmdW5jdGlvbihsb2NhbHMpIHtcbiAgICByZXR1cm4gdChsb2NhbHMsIHJlcXVpcmUoXCJlanNcIikuZmlsdGVycyk7XG4gIH1cbn0oKSk7IiwiLyoqXG4gKiBAb3ZlcnZpZXcgVUkgc2xpZGVyIHVzZWQgdG8gY2hhbmdlIG1heGltdW0gcGFja2V0IGxlbmd0aC5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcblxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIGkxOG4gPSByZXF1aXJlKCcuL2xvY2FsZScpO1xudmFyIE5ldFNpbVNsaWRlciA9IHJlcXVpcmUoJy4vTmV0U2ltU2xpZGVyJyk7XG5cbi8qKlxuICogR2VuZXJhdG9yIGFuZCBjb250cm9sbGVyIGZvciBwYWNrZXQgc2l6ZSBzbGlkZXIvc2VsZWN0b3JcbiAqIEBwYXJhbSB7alF1ZXJ5fSByb290RGl2XG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBwYWNrZXRTaXplQ2hhbmdlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge251bWJlcn0gb3B0aW9ucy5taW5pbXVtUGFja2V0U2l6ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXVnbWVudHMgTmV0U2ltU2xpZGVyXG4gKi9cbnZhciBOZXRTaW1QYWNrZXRTaXplQ29udHJvbCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJvb3REaXYsXG4gICAgcGFja2V0U2l6ZUNoYW5nZUNhbGxiYWNrLCBvcHRpb25zKSB7XG4gIE5ldFNpbVNsaWRlci5jYWxsKHRoaXMsIHJvb3REaXYsIHtcbiAgICBvbkNoYW5nZTogcGFja2V0U2l6ZUNoYW5nZUNhbGxiYWNrLFxuICAgIG1pbjogb3B0aW9ucy5taW5pbXVtUGFja2V0U2l6ZSxcbiAgICBtYXg6IDgxOTIsXG4gICAgdXBwZXJCb3VuZEluZmluaXRlOiBmYWxzZVxuICB9KTtcblxuICAvLyBBdXRvLXJlbmRlciwgdW5saWtlIG91ciBiYXNlIGNsYXNzXG4gIHRoaXMucmVuZGVyKCk7XG59O1xuTmV0U2ltUGFja2V0U2l6ZUNvbnRyb2wuaW5oZXJpdHMoTmV0U2ltU2xpZGVyKTtcblxuLyoqXG4gKiBHZXQgbG9jYWxpemVkIHBhY2tldCBzaXplIGRlc2NyaXB0aW9uIGZvciB0aGUgZ2l2ZW4gcGFja2V0IHNpemUuXG4gKiBAcGFyYW0ge251bWJlcn0gcGFja2V0U2l6ZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuTmV0U2ltUGFja2V0U2l6ZUNvbnRyb2wucHJvdG90eXBlLmdldFBhY2tldFNpemVUZXh0ID0gZnVuY3Rpb24gKHBhY2tldFNpemUpIHtcbiAgcmV0dXJuIGkxOG4ubnVtQml0c1BlclBhY2tldCh7IG51bUJpdHM6IHBhY2tldFNpemUgfSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgbnVtZXJpYyB2YWx1ZSAoaW4gYml0cykgaW50byBhIGNvbXBhY3QgbG9jYWxpemVkIHN0cmluZ1xuICogcmVwcmVzZW50YXRpb24gb2YgdGhhdCB2YWx1ZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBudW1lcmljIHZhbHVlIG9mIHRoZSBjb250cm9sXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAtIGxvY2FsaXplZCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdmFsdWVcbiAqIEBvdmVycmlkZVxuICovXG5OZXRTaW1QYWNrZXRTaXplQ29udHJvbC5wcm90b3R5cGUudmFsdWVUb0xhYmVsID0gZnVuY3Rpb24gKHZhbCkge1xuICBpZiAodmFsID09PSBJbmZpbml0eSkge1xuICAgIHJldHVybiBpMThuLnVubGltaXRlZCgpO1xuICB9XG4gIHJldHVybiBpMThuLm51bUJpdHNQZXJQYWNrZXQoe251bUJpdHM6IHZhbH0pO1xufTtcblxuLyoqXG4gKiBHZXQgbGFiZWxzIGZvciBlbmQgc2xpZGVyc1xuICogQHBhcmFtIHtudW1iZXJ9IHZhbFxuICogQHJldHVybnMge3N0cmluZ31cbiAqIEBvdmVycmlkZVxuICovXG5OZXRTaW1QYWNrZXRTaXplQ29udHJvbC5wcm90b3R5cGUudmFsdWVUb1Nob3J0TGFiZWwgPSBmdW5jdGlvbiAodmFsKSB7XG4gIGlmICh2YWwgPT09IEluZmluaXR5KSB7XG4gICAgcmV0dXJuIGkxOG4udW5saW1pdGVkKCk7XG4gIH1cbiAgcmV0dXJuIHZhbDtcbn07XG4iLCIvKipcbiAqIEBvdmVydmlldyBVSSBjb250cm9sbGVyIGZvciB0aGUgcGFja2V0IGVkaXRvciB3aGljaCBhbGxvd3MgZWRpdGluZyBtdWx0aXBsZVxuICogICAgICAgICAgIGVuY29kaW5ncyBhdCBvbmNlIGFuZCBsaXZlcyBpbnNpZGUgdGhlIHNlbmQgcGFuZWwuXG4gKiBAc2VlIE5ldFNpbVNlbmRQYW5lbCBmb3IgaG93IHRoaXMgaXMgdXNlZC5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJy4uL3V0aWxzJyk7IC8vIEZvciBGdW5jdGlvbi5wcm90b3R5cGUuaW5oZXJpdHMoKVxudmFyIG5ldHNpbU1zZyA9IHJlcXVpcmUoJy4vbG9jYWxlJyk7XG52YXIgbWFya3VwID0gcmVxdWlyZSgnLi9OZXRTaW1QYWNrZXRFZGl0b3IuaHRtbC5lanMnKTtcbnZhciBLZXlDb2RlcyA9IHJlcXVpcmUoJy4uL2NvbnN0YW50cycpLktleUNvZGVzO1xudmFyIE5ldFNpbUVuY29kaW5nQ29udHJvbCA9IHJlcXVpcmUoJy4vTmV0U2ltRW5jb2RpbmdDb250cm9sJyk7XG52YXIgTmV0U2ltTG9nUGFuZWwgPSByZXF1aXJlKCcuL05ldFNpbUxvZ1BhbmVsJyk7XG52YXIgUGFja2V0ID0gcmVxdWlyZSgnLi9QYWNrZXQnKTtcbnZhciBEYXRhQ29udmVydGVycyA9IHJlcXVpcmUoJy4vRGF0YUNvbnZlcnRlcnMnKTtcbnZhciBOZXRTaW1Db25zdGFudHMgPSByZXF1aXJlKCcuL05ldFNpbUNvbnN0YW50cycpO1xudmFyIE5ldFNpbUdsb2JhbHMgPSByZXF1aXJlKCcuL05ldFNpbUdsb2JhbHMnKTtcblxudmFyIEVuY29kaW5nVHlwZSA9IE5ldFNpbUNvbnN0YW50cy5FbmNvZGluZ1R5cGU7XG52YXIgQklUU19QRVJfQllURSA9IE5ldFNpbUNvbnN0YW50cy5CSVRTX1BFUl9CWVRFO1xuXG52YXIgbWluaWZ5QmluYXJ5ID0gRGF0YUNvbnZlcnRlcnMubWluaWZ5QmluYXJ5O1xudmFyIGZvcm1hdEFCID0gRGF0YUNvbnZlcnRlcnMuZm9ybWF0QUI7XG52YXIgZm9ybWF0QmluYXJ5ID0gRGF0YUNvbnZlcnRlcnMuZm9ybWF0QmluYXJ5O1xudmFyIGZvcm1hdEhleCA9IERhdGFDb252ZXJ0ZXJzLmZvcm1hdEhleDtcbnZhciBhbGlnbkRlY2ltYWwgPSBEYXRhQ29udmVydGVycy5hbGlnbkRlY2ltYWw7XG52YXIgYWJUb0JpbmFyeSA9IERhdGFDb252ZXJ0ZXJzLmFiVG9CaW5hcnk7XG52YXIgYWJUb0ludCA9IERhdGFDb252ZXJ0ZXJzLmFiVG9JbnQ7XG52YXIgYmluYXJ5VG9BQiA9IERhdGFDb252ZXJ0ZXJzLmJpbmFyeVRvQUI7XG52YXIgYmluYXJ5VG9IZXggPSBEYXRhQ29udmVydGVycy5iaW5hcnlUb0hleDtcbnZhciBiaW5hcnlUb0ludCA9IERhdGFDb252ZXJ0ZXJzLmJpbmFyeVRvSW50O1xudmFyIGJpbmFyeVRvRGVjaW1hbCA9IERhdGFDb252ZXJ0ZXJzLmJpbmFyeVRvRGVjaW1hbDtcbnZhciBiaW5hcnlUb0FzY2lpID0gRGF0YUNvbnZlcnRlcnMuYmluYXJ5VG9Bc2NpaTtcbnZhciBoZXhUb0JpbmFyeSA9IERhdGFDb252ZXJ0ZXJzLmhleFRvQmluYXJ5O1xudmFyIGludFRvQUIgPSBEYXRhQ29udmVydGVycy5pbnRUb0FCO1xudmFyIGludFRvQmluYXJ5ID0gRGF0YUNvbnZlcnRlcnMuaW50VG9CaW5hcnk7XG52YXIgaW50VG9IZXggPSBEYXRhQ29udmVydGVycy5pbnRUb0hleDtcbnZhciBkZWNpbWFsVG9CaW5hcnkgPSBEYXRhQ29udmVydGVycy5kZWNpbWFsVG9CaW5hcnk7XG52YXIgYXNjaWlUb0JpbmFyeSA9IERhdGFDb252ZXJ0ZXJzLmFzY2lpVG9CaW5hcnk7XG5cbi8qKlxuICogVHlwZSBmb3IgdHJ1Y3R1cmVkIGFjY2VzcyB0byBqUXVlcnktd3JhcHBlZCBET00gZWxlbWVudHMuICBUd28gbGF5ZXJzIGRlZXA7XG4gKiBjYW4gYmUgdXNlZCBmb3IgcXVpY2sgYWNjZXNzIHRvIG9uZSBvZiB0aGUgZmllbGRzIGluIHRoZSBwYWNrZXQgZWRpdG9yIGdyaWRcbiAqIGJ5IHJlZmVyZW5jaW5nIHZpYSByb3cgYW5kIGNvbHVtbi5cbiAqXG4gKiBNYXAga2V5cyBhdCB0aGUgZmlyc3QgbGF5ZXIgY29ycmVzcG9uZCB0byBOZXRTaW1Db25zdGFudHMuRW5jb2RpbmdUeXBlLlxuICogTWFwIGtleXMgYXQgdGhlIHNlY29uZCBsYXllciBjb3JyZXNwb25kIHRvIFBhY2tldC5IZWFkZXJUeXBlLCBwbHVzIHRoZVxuICogICAnbWVzc2FnZScgZmllbGQuXG4gKlxuICogVXNhZ2U6XG4gKiAgIG1hcC5iaW5hcnkuZnJvbUFkZHJlc3NcbiAqICAgbWFwWydiaW5hcnknXVsnZnJvbUFkZHJlc3MnXVxuICogICBtYXBbRW5jb2RpbmdUeXBlLkJJTkFSWV1bUGFja2V0LkhlYWRlclR5cGUuRlJPTV9BRERSRVNTXVxuICpcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFVJTWFwXG4gKiBAcHJvcGVydHkge1VJUm93TWFwfSBhX2FuZF9iXG4gKiBAcHJvcGVydHkge1VJUm93TWFwfSBiaW5hcnlcbiAqIEBwcm9wZXJ0eSB7VUlSb3dNYXB9IGhleGFkZWNpbWFsXG4gKiBAcHJvcGVydHkge1VJUm93TWFwfSBkZWNpbWFsXG4gKiBAcHJvcGVydHkge1VJUm93TWFwfSBhc2NpaVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gVUlSb3dNYXBcbiAqIEBwcm9wZXJ0eSB7alF1ZXJ5fSB0b0FkZHJlc3NcbiAqIEBwcm9wZXJ0eSB7alF1ZXJ5fSBmcm9tQWRkcmVzc1xuICogQHByb3BlcnR5IHtqUXVlcnl9IHBhY2tldEluZGV4XG4gKiBAcHJvcGVydHkge2pRdWVyeX0gcGFja2V0Q291bnRcbiAqIEBwcm9wZXJ0eSB7alF1ZXJ5fSBtZXNzYWdlXG4gKi9cblxuLyoqXG4gKiBHZW5lcmF0b3IgYW5kIGNvbnRyb2xsZXIgZm9yIG1lc3NhZ2Ugc2VuZGluZyB2aWV3LlxuICogQHBhcmFtIHtPYmplY3R9IGluaXRpYWxDb25maWdcbiAqIEBwYXJhbSB7TWVzc2FnZUdyYW51bGFyaXR5fSBpbml0aWFsQ29uZmlnLm1lc3NhZ2VHcmFudWxhcml0eVxuICogQHBhcmFtIHtQYWNrZXQuSGVhZGVyVHlwZVtdfSBpbml0aWFsQ29uZmlnLnBhY2tldFNwZWNcbiAqIEBwYXJhbSB7bnVtYmVyfSBbaW5pdGlhbENvbmZpZy50b0FkZHJlc3NdXG4gKiBAcGFyYW0ge251bWJlcn0gW2luaXRpYWxDb25maWcuZnJvbUFkZHJlc3NdXG4gKiBAcGFyYW0ge251bWJlcn0gW2luaXRpYWxDb25maWcucGFja2V0SW5kZXhdXG4gKiBAcGFyYW0ge251bWJlcn0gW2luaXRpYWxDb25maWcucGFja2V0Q291bnRdXG4gKiBAcGFyYW0ge3N0cmluZ30gW2luaXRpYWxDb25maWcubWVzc2FnZV1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbaW5pdGlhbENvbmZpZy5tYXhQYWNrZXRTaXplXVxuICogQHBhcmFtIHtudW1iZXJ9IFtpbml0aWFsQ29uZmlnLmNodW5rU2l6ZV1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbaW5pdGlhbENvbmZpZy5iaXRSYXRlXVxuICogQHBhcmFtIHtFbmNvZGluZ1R5cGVbXX0gW2luaXRpYWxDb25maWcuZW5hYmxlZEVuY29kaW5nc11cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGluaXRpYWxDb25maWcucmVtb3ZlUGFja2V0Q2FsbGJhY2tcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGluaXRpYWxDb25maWcuZG9uZVNlbmRpbmdDYWxsYmFja1xuICogQHBhcmFtIHtmdW5jdGlvbn0gaW5pdGlhbENvbmZpZy5jb250ZW50Q2hhbmdlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGluaXRpYWxDb25maWcuZW50ZXJLZXlQcmVzc2VkQ2FsbGJhY2tcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgTmV0U2ltUGFja2V0RWRpdG9yID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5pdGlhbENvbmZpZykge1xuICB2YXIgbGV2ZWwgPSBOZXRTaW1HbG9iYWxzLmdldExldmVsQ29uZmlnKCk7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtSb3dUeXBlW119XG4gICAqIEBjb25zdFxuICAgKi9cbiAgdGhpcy5ST1dfVFlQRVMgPSBbXG4gICAge1xuICAgICAgdHlwZU5hbWU6IEVuY29kaW5nVHlwZS5BX0FORF9CLFxuICAgICAgYWRkcmVzc0ZpZWxkQWxsb3dlZENoYXJhY3RlcnM6IC9bQUJcXHNdL2ksXG4gICAgICBhZGRyZXNzRmllbGRDb252ZXJzaW9uOiBmdW5jdGlvbiAoYWJTdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIERhdGFDb252ZXJ0ZXJzLmJpbmFyeVRvQWRkcmVzc1N0cmluZyhcbiAgICAgICAgICAgIERhdGFDb252ZXJ0ZXJzLmFiVG9CaW5hcnkoYWJTdHJpbmcpLCBsZXZlbC5hZGRyZXNzRm9ybWF0KTtcbiAgICAgIH0sXG4gICAgICBzaG9ydE51bWJlckFsbG93ZWRDaGFyYWN0ZXJzOiAvW0FCXS9pLFxuICAgICAgc2hvcnROdW1iZXJDb252ZXJzaW9uOiB0cnVuY2F0ZWRBQlRvSW50LFxuICAgICAgbWVzc2FnZUFsbG93ZWRDaGFyYWN0ZXJzOiAvW0FCXFxzXS9pLFxuICAgICAgbWVzc2FnZUNvbnZlcnNpb246IGFiVG9CaW5hcnlcbiAgICB9LFxuICAgIHtcbiAgICAgIHR5cGVOYW1lOiBFbmNvZGluZ1R5cGUuQklOQVJZLFxuICAgICAgYWRkcmVzc0ZpZWxkQWxsb3dlZENoYXJhY3RlcnM6IC9bMDFcXHNdL2ksXG4gICAgICBhZGRyZXNzRmllbGRDb252ZXJzaW9uOiBmdW5jdGlvbiAoYmluYXJ5U3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBEYXRhQ29udmVydGVycy5iaW5hcnlUb0FkZHJlc3NTdHJpbmcoXG4gICAgICAgICAgICBiaW5hcnlTdHJpbmcsIGxldmVsLmFkZHJlc3NGb3JtYXQpO1xuICAgICAgfSxcbiAgICAgIHNob3J0TnVtYmVyQWxsb3dlZENoYXJhY3RlcnM6IC9bMDFdLyxcbiAgICAgIHNob3J0TnVtYmVyQ29udmVyc2lvbjogdHJ1bmNhdGVkQmluYXJ5VG9JbnQsXG4gICAgICBtZXNzYWdlQWxsb3dlZENoYXJhY3RlcnM6IC9bMDFcXHNdLyxcbiAgICAgIG1lc3NhZ2VDb252ZXJzaW9uOiBtaW5pZnlCaW5hcnlcbiAgICB9LFxuICAgIHtcbiAgICAgIHR5cGVOYW1lOiBFbmNvZGluZ1R5cGUuSEVYQURFQ0lNQUwsXG4gICAgICBhZGRyZXNzRmllbGRBbGxvd2VkQ2hhcmFjdGVyczogL1swLTlhLWZcXHNdL2ksXG4gICAgICBhZGRyZXNzRmllbGRDb252ZXJzaW9uOiBmdW5jdGlvbiAoaGV4U3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBEYXRhQ29udmVydGVycy5iaW5hcnlUb0FkZHJlc3NTdHJpbmcoXG4gICAgICAgICAgICBEYXRhQ29udmVydGVycy5oZXhUb0JpbmFyeShoZXhTdHJpbmcpLCBsZXZlbC5hZGRyZXNzRm9ybWF0KTtcbiAgICAgIH0sXG4gICAgICBzaG9ydE51bWJlckFsbG93ZWRDaGFyYWN0ZXJzOiAvWzAtOWEtZl0vaSxcbiAgICAgIHNob3J0TnVtYmVyQ29udmVyc2lvbjogdHJ1bmNhdGVkSGV4VG9JbnQsXG4gICAgICBtZXNzYWdlQWxsb3dlZENoYXJhY3RlcnM6IC9bMC05YS1mXFxzXS9pLFxuICAgICAgbWVzc2FnZUNvbnZlcnNpb246IGhleFRvQmluYXJ5XG4gICAgfSxcbiAgICB7XG4gICAgICB0eXBlTmFtZTogRW5jb2RpbmdUeXBlLkRFQ0lNQUwsXG4gICAgICBhZGRyZXNzRmllbGRBbGxvd2VkQ2hhcmFjdGVyczogL1swLTkuXFxzXS9pLFxuICAgICAgYWRkcmVzc0ZpZWxkQ29udmVyc2lvbjogY2xlYW5BZGRyZXNzU3RyaW5nLFxuICAgICAgc2hvcnROdW1iZXJBbGxvd2VkQ2hhcmFjdGVyczogL1swLTldLyxcbiAgICAgIHNob3J0TnVtYmVyQ29udmVyc2lvbjogdHJ1bmNhdGVkRGVjaW1hbFRvSW50LFxuICAgICAgbWVzc2FnZUFsbG93ZWRDaGFyYWN0ZXJzOiAvWzAtOVxcc10vLFxuICAgICAgbWVzc2FnZUNvbnZlcnNpb246IGZ1bmN0aW9uIChkZWNpbWFsU3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBkZWNpbWFsVG9CaW5hcnkoZGVjaW1hbFN0cmluZywgdGhpcy5jdXJyZW50Q2h1bmtTaXplXyk7XG4gICAgICB9LmJpbmQodGhpcylcbiAgICB9LFxuICAgIHtcbiAgICAgIHR5cGVOYW1lOiBFbmNvZGluZ1R5cGUuQVNDSUksXG4gICAgICBhZGRyZXNzRmllbGRBbGxvd2VkQ2hhcmFjdGVyczogL1swLTkuXFxzXS9pLFxuICAgICAgYWRkcmVzc0ZpZWxkQ29udmVyc2lvbjogY2xlYW5BZGRyZXNzU3RyaW5nLFxuICAgICAgc2hvcnROdW1iZXJBbGxvd2VkQ2hhcmFjdGVyczogL1swLTldLyxcbiAgICAgIHNob3J0TnVtYmVyQ29udmVyc2lvbjogdHJ1bmNhdGVkRGVjaW1hbFRvSW50LFxuICAgICAgbWVzc2FnZUFsbG93ZWRDaGFyYWN0ZXJzOiAvLi8sXG4gICAgICBtZXNzYWdlQ29udmVyc2lvbjogZnVuY3Rpb24gKGFzY2lpU3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBhc2NpaVRvQmluYXJ5KGFzY2lpU3RyaW5nLCB0aGlzLmN1cnJlbnRDaHVua1NpemVfKTtcbiAgICAgIH0uYmluZCh0aGlzKVxuICAgIH1cbiAgXTtcblxuICAvKipcbiAgICogQHR5cGUge2pRdWVyeX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucm9vdERpdl8gPSAkKCc8ZGl2PicpLmFkZENsYXNzKCduZXRzaW0tcGFja2V0Jyk7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtNZXNzYWdlR3JhbnVsYXJpdHl9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLm1lc3NhZ2VHcmFudWxhcml0eV8gPSBpbml0aWFsQ29uZmlnLm1lc3NhZ2VHcmFudWxhcml0eTtcblxuICAvKipcbiAgICogQHR5cGUge1BhY2tldC5IZWFkZXJUeXBlW119XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnBhY2tldFNwZWNfID0gaW5pdGlhbENvbmZpZy5wYWNrZXRTcGVjO1xuXG4gIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICB0aGlzLnRvQWRkcmVzcyA9IGluaXRpYWxDb25maWcudG9BZGRyZXNzIHx8XG4gICAgICBEYXRhQ29udmVydGVycy5iaW5hcnlUb0FkZHJlc3NTdHJpbmcoJzAnLCBsZXZlbC5hZGRyZXNzRm9ybWF0KTtcblxuICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgdGhpcy5mcm9tQWRkcmVzcyA9IGluaXRpYWxDb25maWcuZnJvbUFkZHJlc3MgfHxcbiAgICAgIERhdGFDb252ZXJ0ZXJzLmJpbmFyeVRvQWRkcmVzc1N0cmluZygnMCcsIGxldmVsLmFkZHJlc3NGb3JtYXQpO1xuXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICB0aGlzLnBhY2tldEluZGV4ID0gaW5pdGlhbENvbmZpZy5wYWNrZXRJbmRleCAhPT0gdW5kZWZpbmVkID9cbiAgICAgIGluaXRpYWxDb25maWcucGFja2V0SW5kZXggOiAxO1xuXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICB0aGlzLnBhY2tldENvdW50ID0gaW5pdGlhbENvbmZpZy5wYWNrZXRDb3VudCAhPT0gdW5kZWZpbmVkID9cbiAgICAgIGluaXRpYWxDb25maWcucGFja2V0Q291bnQgOiAxO1xuXG4gIC8qKlxuICAgKiBCaW5hcnkgc3RyaW5nIG9mIG1lc3NhZ2UgYm9keSwgbGl2ZS1pbnRlcnByZXRlZCB0byBvdGhlciB2YWx1ZXMuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLm1lc3NhZ2UgPSBpbml0aWFsQ29uZmlnLm1lc3NhZ2UgfHwgJyc7XG5cbiAgLyoqXG4gICAqIE1heGltdW0gcGFja2V0IGxlbmd0aCBjb25maWd1cmFibGUgYnkgc2xpZGVyLlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5tYXhQYWNrZXRTaXplXyA9IGluaXRpYWxDb25maWcubWF4UGFja2V0U2l6ZSB8fCA4MTkyO1xuXG4gIC8qKlxuICAgKiBCaXRzIHBlciBjaHVuay9ieXRlIGZvciBwYXJzaW5nIGFuZCBmb3JtYXR0aW5nIHB1cnBvc2VzLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5jdXJyZW50Q2h1bmtTaXplXyA9IGluaXRpYWxDb25maWcuY2h1bmtTaXplIHx8IEJJVFNfUEVSX0JZVEU7XG5cbiAgLyoqXG4gICAqIExvY2FsIGRldmljZSBiaXRyYXRlIChicHMpLCB3aGljaCBhZmZlY3RzIHNlbmQtYW5pbWF0aW9uIHNwZWVkLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5iaXRSYXRlXyA9IGluaXRpYWxDb25maWcuYml0UmF0ZSB8fCBJbmZpbml0eTtcblxuICB2YXIgZW5jb2RpbmdzID0gaW5pdGlhbENvbmZpZy5lbmFibGVkRW5jb2RpbmdzIHx8IFtdO1xuICAvKipcbiAgICogV2hpY2ggZW5jb2RpbmdzIHNob3VsZCBiZSB2aXNpYmxlIGluIHRoZSBlZGl0b3IuXG4gICAqIEB0eXBlIHtPYmplY3QuPEVuY29kaW5nVHlwZSwgYm9vbGVhbj59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmVuYWJsZWRFbmNvZGluZ3NIYXNoXyA9IE5ldFNpbUVuY29kaW5nQ29udHJvbC5lbmNvZGluZ3NBc0hhc2goZW5jb2RpbmdzKTtcblxuICAvKipcbiAgICogTWV0aG9kIHRvIGNhbGwgaW4gb3JkZXIgdG8gcmVtb3ZlIHRoaXMgcGFja2V0IGZyb20gaXRzIHBhcmVudC5cbiAgICogRnVuY3Rpb24gc2hvdWxkIHRha2UgdGhpcyBQYWNrZXRFZGl0b3IgYXMgYW4gYXJndW1lbnQuXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucmVtb3ZlUGFja2V0Q2FsbGJhY2tfID0gaW5pdGlhbENvbmZpZy5yZW1vdmVQYWNrZXRDYWxsYmFjaztcblxuICAvKipcbiAgICogTWV0aG9kIHRvIGNhbGwgd2hlbiB0aGlzIHBhY2tldCBpcyBkb25lIHBsYXlpbmcgaXRzIHNlbmRpbmcgYW5pbWF0aW9uLlxuICAgKiBGdW5jdGlvbiBzaG91bGQgdGFrZSB0aGlzIFBhY2tldEVkaXRvciBhcyBhbiBhcmd1bWVudC5cbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5kb25lU2VuZGluZ0NhbGxiYWNrXyA9IGluaXRpYWxDb25maWcuZG9uZVNlbmRpbmdDYWxsYmFjaztcblxuICAvKipcbiAgICogTWV0aG9kIHRvIG5vdGlmeSBvdXIgcGFyZW50IGNvbnRhaW5lciB0aGF0IHRoZSBwYWNrZXQncyBiaW5hcnlcbiAgICogY29udGVudCBoYXMgY2hhbmdlZC5cbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5jb250ZW50Q2hhbmdlQ2FsbGJhY2tfID0gaW5pdGlhbENvbmZpZy5jb250ZW50Q2hhbmdlQ2FsbGJhY2s7XG5cbiAgLyoqXG4gICAqIE1ldGhvZCB0byBub3RpZnkgb3VyIHBhcmVudCBjb250YWluZXIgdGhhdCB0aGUgZW50ZXIga2V5IGhhcyBiZWVuXG4gICAqIHByZXNzZWRcbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5lbnRlcktleVByZXNzZWRDYWxsYmFja18gPSBpbml0aWFsQ29uZmlnLmVudGVyS2V5UHJlc3NlZENhbGxiYWNrO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7alF1ZXJ5fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5yZW1vdmVQYWNrZXRCdXR0b25fID0gbnVsbDtcblxuICAvKipcbiAgICogQHR5cGUge2pRdWVyeX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuYml0Q291bnRlcl8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBGbGFnIG5vdGluZyB3aGV0aGVyIHRoaXMgcGFja2V0IGVkaXRvciBpcyBpbiBhIG5vbi1pbnRlcmFjdGl2ZSBtb2RlXG4gICAqIHdoZXJlIGl0IGFuaW1hdGVzIGJpdHMgZHJhaW5pbmcvYmVpbmcgc2VudC5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmlzUGxheWluZ1NlbmRBbmltYXRpb25fID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEZsYWcgZm9yIHdoZXRoZXIgdGhpcyBlZGl0b3IgaXMgaW4gdGhlIG1pZGRsZSBvZiBhbiBhc3luYyBzZW5kIGNvbW1hbmQuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5pc1NlbmRpbmdQYWNrZXRUb1JlbW90ZV8gPSBmYWxzZTtcblxuICAvKipcbiAgICogUmVmZXJlbmNlIHRvIGxvY2FsIGNsaWVudCBub2RlLCB1c2VkIGZvciBzZW5kaW5nIG1lc3NhZ2VzLlxuICAgKiBAdHlwZSB7TmV0U2ltTG9jYWxDbGllbnROb2RlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5teU5vZGVfID0gbnVsbDtcblxuICAvKipcbiAgICogQ2FwdHVyZSBwYWNrZXQgYmluYXJ5IGJlZm9yZSB0aGUgc2VuZCBhbmltYXRpb24gYmVnaW5zIHNvIHRoYXQgd2UgY2FuXG4gICAqIHNlbmQgdGhlIHdob2xlIHBhY2tldCB0byByZW1vdGUgc3RvcmFnZSB3aGVuIHRoZSBhbmltYXRpb24gaXMgZG9uZS5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMub3JpZ2luYWxCaW5hcnlfID0gJyc7XG5cbiAgLyoqXG4gICAqIEluZGV4IGludG8gb3JpZ2luYWwgYmluYXJ5IGluZGljYXRpbmcgaG93IG1hbnkgYml0cyBoYXZlIGJlZW4gJ3NlbnQnXG4gICAqIGluIHRoZSBhbmltYXRpb24uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnNlbmRBbmltYXRpb25JbmRleF8gPSAwO1xuXG4gIC8qKlxuICAgKiBTaW11bGF0aW9uLXRpbWUgdGltZXN0YW1wIChtcykgb2YgdGhlIGxhc3QgYml0LXNlbmQgYW5pbWF0aW9uLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5sYXN0Qml0U2VudFRpbWVfID0gdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBNYXAgb2YgYm91bmQgVUkgZWxlbWVudHMgbWFuaXB1bGF0ZWQgYnkgdGhpcyBlZGl0b3IuICBQcm92aWRlcyBxdWlja1xuICAgKiBhY2Nlc3MgdG8gaW5wdXQgZWxlbWVudHMgaW4gdGhlIGVkaXRvciBncmlkLiAgU2VlIHR5cGUgbm90ZXMgZm9yIHVzYWdlLlxuICAgKlxuICAgKiBQb3B1bGF0ZWQgZHluYW1pY2FsbHkgaW4gYGJpbmRFbGVtZW50c19gIGR1cmluZyBgcmVuZGVyYC4gIE1heSBub3QgaW5jbHVkZVxuICAgKiBhbGwgZmllbGRzLCBhcyB3ZSB0cnkgdG8gb3B0aW1pemUgYW5kIG9taXQgZmllbGRzIG5vdCBlbmFibGVkIGluIHRoZSBsZXZlbC5cbiAgICpcbiAgICogQHR5cGUge1VJTWFwfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy51aV8gPSB7fTtcblxuICB0aGlzLnJlbmRlcigpO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gcm9vdCBkaXYsIGZvciBob29raW5nIHVwIHRvIGEgcGFyZW50IGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7alF1ZXJ5fVxuICovXG5OZXRTaW1QYWNrZXRFZGl0b3IucHJvdG90eXBlLmdldFJvb3QgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLnJvb3REaXZfO1xufTtcblxuLyoqXG4gKiBDbGVhciB0aGUgcGFja2V0IHBheWxvYWQgYW5kIHB1dCB0aGUgZWRpdG9yIGJhY2sgaW4gYSBzdGF0ZSB3aGVyZSBpdCdzXG4gKiByZWFkeSBmb3IgY29tcG9zaW5nIGEgbmV3IHBhY2tldC5cbiAqIEludGVudGlvbmFsbHkgcHJlc2VydmVzIHRvQWRkcmVzcyBhbmQgZnJvbUFkZHJlc3MuXG4gKi9cbk5ldFNpbVBhY2tldEVkaXRvci5wcm90b3R5cGUucmVzZXRQYWNrZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMubWVzc2FnZSA9ICcnO1xuICB0aGlzLnBhY2tldEluZGV4ID0gMTtcbiAgdGhpcy5wYWNrZXRDb3VudCA9IDE7XG4gIHRoaXMub3JpZ2luYWxCaW5hcnlfID0gJyc7XG4gIHRoaXMuc2VuZEFuaW1hdGlvbkluZGV4XyA9IDA7XG4gIHRoaXMubGFzdEJpdFNlbnRUaW1lXyA9IHVuZGVmaW5lZDtcbiAgdGhpcy51cGRhdGVGaWVsZHNfKCk7XG4gIHRoaXMudXBkYXRlUmVtb3ZlQnV0dG9uVmlzaWJpbGl0eV8oKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZmlyc3QgdmlzaWJsZSBtZXNzYWdlIGJveCwgc28gdGhhdCB3ZSBjYW4gZm9jdXMoKSBvbiBpdFxuICogQHJldHVybnMge2pRdWVyeX1cbiAqL1xuTmV0U2ltUGFja2V0RWRpdG9yLnByb3RvdHlwZS5nZXRGaXJzdFZpc2libGVNZXNzYWdlQm94ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5nZXRSb290KCkuZmluZCgndGV4dGFyZWEubWVzc2FnZTp2aXNpYmxlJykuZmlyc3QoKTtcbn07XG5cbi8qKiBSZXBsYWNlIGNvbnRlbnRzIG9mIG91ciByb290IGVsZW1lbnQgd2l0aCBvdXIgb3duIG1hcmt1cC4gKi9cbk5ldFNpbVBhY2tldEVkaXRvci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbmV3TWFya3VwID0gJChtYXJrdXAoe1xuICAgIG1lc3NhZ2VHcmFudWxhcml0eTogdGhpcy5tZXNzYWdlR3JhbnVsYXJpdHlfLFxuICAgIHBhY2tldFNwZWM6IHRoaXMucGFja2V0U3BlY18sXG4gICAgZW5hYmxlZEVuY29kaW5nc0hhc2g6IHRoaXMuZW5hYmxlZEVuY29kaW5nc0hhc2hfXG4gIH0pKTtcbiAgdGhpcy5yb290RGl2Xy5odG1sKG5ld01hcmt1cCk7XG4gIHRoaXMuYmluZEVsZW1lbnRzXygpO1xuICB0aGlzLnVwZGF0ZUZpZWxkc18oKTtcbiAgdGhpcy51cGRhdGVSZW1vdmVCdXR0b25WaXNpYmlsaXR5XygpO1xuICBOZXRTaW1Mb2dQYW5lbC5hZGp1c3RIZWFkZXJDb2x1bW5XaWR0aHModGhpcy5yb290RGl2Xyk7XG4gIE5ldFNpbUVuY29kaW5nQ29udHJvbC5oaWRlUm93c0J5RW5jb2RpbmcodGhpcy5yb290RGl2XyxcbiAgICAgIE9iamVjdC5rZXlzKHRoaXMuZW5hYmxlZEVuY29kaW5nc0hhc2hfKSk7XG59O1xuXG4vKipcbiAqIFB1dCB0aGlzIHBhY2tldCBpbiBhIG1vZGUgd2hlcmUgaXQncyBub3QgZWRpdGFibGUuICBJbnN0ZWFkLCBpdCB3aWxsIGRyYWluXG4gKiBpdHMgYmluYXJ5IGF0IHRoZSBjdXJyZW50IGJpdHJhdGUgYW5kIGNhbGwgdGhlIGdpdmVuIGNhbGxiYWNrIHdoZW4gYWxsXG4gKiBvZiB0aGUgYmluYXJ5IGhhcyBiZWVuIGRyYWluZWQvXCJzZW50XCJcbiAqIEBwYXJhbSB7TmV0U2ltTG9jYWxDbGllbnROb2RlfSBteU5vZGVcbiAqL1xuTmV0U2ltUGFja2V0RWRpdG9yLnByb3RvdHlwZS5iZWdpblNlbmRpbmcgPSBmdW5jdGlvbiAobXlOb2RlKSB7XG4gIHRoaXMuaXNQbGF5aW5nU2VuZEFuaW1hdGlvbl8gPSB0cnVlO1xuICB0aGlzLm9yaWdpbmFsQmluYXJ5XyA9IHRoaXMuZ2V0UGFja2V0QmluYXJ5KCkuc3Vic3RyKDAsIHRoaXMubWF4UGFja2V0U2l6ZV8pO1xuICB0aGlzLnNlbmRBbmltYXRpb25JbmRleF8gPSAwO1xuICB0aGlzLm15Tm9kZV8gPSBteU5vZGU7XG5cbiAgLy8gRmluaXNoIG5vdyBpZiB0aGUgcGFja2V0IGlzIGVtcHR5LlxuICBpZiAoMCA9PT0gdGhpcy5vcmlnaW5hbEJpbmFyeV8ubGVuZ3RoKSB7XG4gICAgdGhpcy5maW5pc2hTZW5kaW5nKCk7XG4gIH1cbn07XG5cbi8qKlxuICogS2ljayBvZmYgdGhlIGFzeW5jIHNlbmQtdG8tcmVtb3RlIG9wZXJhdGlvbiBmb3IgdGhlIG9yaWdpbmFsIHBhY2tldCBiaW5hcnkuXG4gKiBXaGVuIGl0J3MgZG9uZSwgcmVtb3ZlIHRoaXMgbm93LWVtcHR5IHBhY2tldC5cbiAqL1xuTmV0U2ltUGFja2V0RWRpdG9yLnByb3RvdHlwZS5maW5pc2hTZW5kaW5nID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmlzUGxheWluZ1NlbmRBbmltYXRpb25fID0gZmFsc2U7XG4gIHRoaXMuaXNTZW5kaW5nUGFja2V0VG9SZW1vdGVfID0gdHJ1ZTtcbiAgdGhpcy5teU5vZGVfLnNlbmRNZXNzYWdlKHRoaXMub3JpZ2luYWxCaW5hcnlfLCBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5pc1NlbmRpbmdQYWNrZXRUb1JlbW90ZV8gPSBmYWxzZTtcbiAgICB0aGlzLmRvbmVTZW5kaW5nQ2FsbGJhY2tfKHRoaXMpO1xuICB9LmJpbmQodGhpcykpO1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVFJVRSBpZiB0aGlzIHBhY2tldCBpcyBjdXJyZW50bHkgYmVpbmcgc2VudC5cbiAqL1xuTmV0U2ltUGFja2V0RWRpdG9yLnByb3RvdHlwZS5pc1NlbmRpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmlzUGxheWluZ1NlbmRBbmltYXRpb25fIHx8IHRoaXMuaXNTZW5kaW5nUGFja2V0VG9SZW1vdGVfO1xufTtcblxuLyoqXG4gKiBQYWNrZXQgRWRpdG9yIHRpY2sgaXMgY2FsbGVkIChtYW51YWxseSBieSB0aGUgTmV0U2ltU2VuZFBhbmVsKSB0byBhZHZhbmNlXG4gKiBpdHMgc2VuZGluZyBhbmltYXRpb24uXG4gKiBAcGFyYW0ge1J1bkxvb3AuQ2xvY2t9IGNsb2NrXG4gKi9cbk5ldFNpbVBhY2tldEVkaXRvci5wcm90b3R5cGUudGljayA9IGZ1bmN0aW9uIChjbG9jaykge1xuICAvLyBCZWZvcmUgd2Ugc3RhcnQgYW5pbWF0aW5nLCBvciBhZnRlciB3ZSBhcmUgZG9uZSBhbmltYXRpbmcsIGRvIG5vdGhpbmcuXG4gIGlmICghdGhpcy5pc1BsYXlpbmdTZW5kQW5pbWF0aW9uXyB8fCB0aGlzLmlzU2VuZGluZ1BhY2tldFRvUmVtb3RlXykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghdGhpcy5sYXN0Qml0U2VudFRpbWVfKSB7XG4gICAgdGhpcy5sYXN0Qml0U2VudFRpbWVfID0gY2xvY2sudGltZTtcbiAgfVxuXG4gIC8vIEhvdyBtYW55IGNoYXJhY3RlcnMgc2hvdWxkIGJlIGNvbnN1bWVkIHRoaXMgdGljaz9cbiAgdmFyIG1zUGVyQml0ID0gMTAwMCAqICgxIC8gdGhpcy5iaXRSYXRlXyk7XG4gIHZhciBtYXhCaXRzVG9TZW5kVGhpc1RpY2sgPSBJbmZpbml0eTtcbiAgaWYgKG1zUGVyQml0ID4gMCkge1xuICAgIHZhciBtc1NpbmNlTGFzdEJpdENvbnN1bWVkID0gY2xvY2sudGltZSAtIHRoaXMubGFzdEJpdFNlbnRUaW1lXztcbiAgICBtYXhCaXRzVG9TZW5kVGhpc1RpY2sgPSBNYXRoLmZsb29yKG1zU2luY2VMYXN0Qml0Q29uc3VtZWQgLyBtc1BlckJpdCk7XG4gIH1cblxuICBpZiAobWF4Qml0c1RvU2VuZFRoaXNUaWNrID4gMCkge1xuICAgIHRoaXMubGFzdEJpdFNlbnRUaW1lXyA9IGNsb2NrLnRpbWU7XG4gICAgdGhpcy5zZW5kQW5pbWF0aW9uSW5kZXhfICs9IG1heEJpdHNUb1NlbmRUaGlzVGljaztcbiAgICB0aGlzLnVwZGF0ZUZvckFuaW1hdGlvbl8oKTtcbiAgICBpZiAodGhpcy5zZW5kQW5pbWF0aW9uSW5kZXhfID49IHRoaXMub3JpZ2luYWxCaW5hcnlfLmxlbmd0aCkge1xuICAgICAgdGhpcy5maW5pc2hTZW5kaW5nKCk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEZvY3VzIGV2ZW50IGhhbmRsZXIuICBJZiB0aGUgdGFyZ2V0IGVsZW1lbnQgaGFzIGEgJ3dhdGVybWFyaycgY2xhc3MgdGhlblxuICogaXQgY29udGFpbnMgdGV4dCB3ZSBpbnRlbmQgdG8gY2xlYXIgYmVmb3JlIGFueSBlZGl0aW5nIG9jY3Vycy4gIFRoaXNcbiAqIGhhbmRsZXIgY2xlYXJzIHRoYXQgdGV4dCBhbmQgcmVtb3ZlcyB0aGUgY2xhc3MuXG4gKiBAcGFyYW0gZm9jdXNFdmVudFxuICovXG52YXIgcmVtb3ZlV2F0ZXJtYXJrID0gZnVuY3Rpb24gKGZvY3VzRXZlbnQpIHtcbiAgdmFyIHRhcmdldCA9ICQoZm9jdXNFdmVudC50YXJnZXQpO1xuICBpZiAodGFyZ2V0Lmhhc0NsYXNzKCd3YXRlcm1hcmsnKSkge1xuICAgIHRhcmdldC52YWwoJycpO1xuICAgIHRhcmdldC5yZW1vdmVDbGFzcygnd2F0ZXJtYXJrJyk7XG4gIH1cbn07XG5cbi8qKlxuICogSGVscGVyIG1ldGhvZCBmb3IgZGV0ZXJtaW5pbmcgaWYgYSBnaXZlbiBrZXlQcmVzcyBldmVudCByZXByZXNlbnRzIGFcbiAqIENMRUFOIGVudGVyIHByZXNzLiBBcyBpbiwgb25lIHdpdGhvdXQgdGhlIFNoaWZ0IG9yIENvbnRyb2wgbW9kaWZpZXJzLlxuICogQHBhcmFtIHtFdmVudH0ganF1ZXJ5RXZlbnRcbiAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmZiB0aGUgZ2l2ZW4gZXZlbnQgcmVwcmVzZW50cyBhIGNsZWFuIGVudGVyXG4gKi9cbnZhciBpc1VubW9kaWZpZWRFbnRlclByZXNzID0gZnVuY3Rpb24gKGpxdWVyeUV2ZW50KSB7XG4gIHJldHVybiAoanF1ZXJ5RXZlbnQua2V5Q29kZSA9PT0gS2V5Q29kZXMuRU5URVIgJiZcbiAgICAgICEoanF1ZXJ5RXZlbnQuY3RybEtleSB8fCBqcXVlcnlFdmVudC5zaGlmdEtleSkpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEga2V5UHJlc3MgaGFuZGxlciB0aGF0IGFsbG93cyBvbmx5IHRoZSBnaXZlbiBjaGFyYWN0ZXJzIHRvIGJlXG4gKiB0eXBlZCBpbnRvIGEgdGV4dCBmaWVsZC5cbiAqIEBwYXJhbSB7UmVnRXhwfSB3aGl0ZWxpc3RSZWdleFxuICogQHJldHVybiB7ZnVuY3Rpb259IGFwcHJvcHJpYXRlIHRvIHBhc3MgdG8gLmtleXByZXNzKClcbiAqL1xudmFyIG1ha2VLZXlwcmVzc0hhbmRsZXJXaXRoV2hpdGVsaXN0ID0gZnVuY3Rpb24gKHdoaXRlbGlzdFJlZ2V4KSB7XG4gIC8qKlxuICAgKiBBIGtleVByZXNzIGhhbmRsZXIgdGhhdCBibG9ja3MgYWxsIHZpc2libGUgY2hhcmFjdGVycyBleGNlcHQgdGhvc2VcbiAgICogbWF0Y2hpbmcgdGhlIHdoaXRlbGlzdC4gIFBhc3NlcyB0aHJvdWdoIGludmlzaWJsZSBjaGFyYWN0ZXJzIChiYWNrc3BhY2UsXG4gICAqIGRlbGV0ZSkgYW5kIGNvbnRyb2wgY29tYmluYXRpb25zIChjb3B5LCBwYXN0ZSkuXG4gICAqXG4gICAqIEBwYXJhbSBrZXlFdmVudFxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSBXaGV0aGVyIHRvIHByb3BhZ2F0ZSB0aGlzIGV2ZW50LiAgU2hvdWxkIHJldHVyblxuICAgKiAgICAgICAgICBGQUxTRSBpZiB3ZSBoYW5kbGUgdGhlIGV2ZW50IGFuZCBkb24ndCB3YW50IHRvIHBhc3MgaXQgb24sIFRSVUVcbiAgICogICAgICAgICAgaWYgd2UgYXJlIG5vdCBoYW5kbGluZyB0aGUgZXZlbnQuXG4gICAqL1xuICByZXR1cm4gZnVuY3Rpb24gKGtleUV2ZW50KSB7XG5cbiAgICAvLyBEb24ndCBibG9jayBjb250cm9sIGNvbWJpbmF0aW9ucyAoY29weSwgcGFzdGUsIGV0Yy4pXG4gICAgaWYgKGtleUV2ZW50Lm1ldGFLZXkgfHwga2V5RXZlbnQuY3RybEtleSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gRG9uJ3QgYmxvY2sgaW52aXNpYmxlIGNoYXJhY3RlcnM7IHdlIHdhbnQgdG8gYWxsb3cgYmFja3NwYWNlLCBkZWxldGUsIGV0Yy5cbiAgICBpZiAoa2V5RXZlbnQud2hpY2ggPCBLZXlDb2Rlcy5TUEFDRSB8fCBrZXlFdmVudC53aGljaCA+PSBLZXlDb2Rlcy5ERUxFVEUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIEF0IHRoaXMgcG9pbnQsIGlmIHRoZSBjaGFyYWN0ZXIgZG9lc24ndCBtYXRjaCwgd2Ugc2hvdWxkIGJsb2NrIGl0LlxuICAgIHZhciBrZXkgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGtleUV2ZW50LndoaWNoKTtcbiAgICBpZiAoIXdoaXRlbGlzdFJlZ2V4LnRlc3Qoa2V5KSkge1xuICAgICAga2V5RXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgalF1ZXJ5LWFwcHJvcHJpYXRlIGtleXVwIGhhbmRsZXIgZm9yIGEgdGV4dCBmaWVsZC5cbiAqIEdyYWJzIHRoZSBuZXcgdmFsdWUgb2YgdGhlIHRleHQgZmllbGQsIHJ1bnMgaXQgdGhyb3VnaCB0aGUgcHJvdmlkZWRcbiAqIGNvbnZlcnRlciBmdW5jdGlvbiwgc2V0cyB0aGUgcmVzdWx0IG9uIHRoZSBTZW5kV2lkZ2V0J3MgaW50ZXJuYWwgc3RhdGVcbiAqIGFuZCB0cmlnZ2VycyBhIGZpZWxkIHVwZGF0ZSBvbiB0aGUgd2lkZ2V0IHRoYXQgc2tpcHMgdGhlIGZpZWxkIGJlaW5nIGVkaXRlZC5cbiAqXG4gKiBTaW1pbGFyIHRvIG1ha2VCbHVySGFuZGxlciwgYnV0IGRvZXMgbm90IHVwZGF0ZSB0aGUgZmllbGQgY3VycmVudGx5XG4gKiBiZWluZyBlZGl0ZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZpZWxkTmFtZSAtIG5hbWUgb2YgaW50ZXJuYWwgc3RhdGUgZmllbGQgdGhhdCB0aGUgdGV4dFxuICogICAgICAgIGZpZWxkIHNob3VsZCB1cGRhdGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb252ZXJ0ZXJGdW5jdGlvbiAtIFRha2VzIHRoZSB0ZXh0IGZpZWxkJ3MgdmFsdWUgYW5kXG4gKiAgICAgICAgY29udmVydHMgaXQgdG8gYSBmb3JtYXQgYXBwcm9wcmlhdGUgdG8gdGhlIGludGVybmFsIHN0YXRlIGZpZWxkLlxuICogQHBhcmFtIHtudW1iZXJ9IFtmaWVsZFdpZHRoXSAtIG1heGltdW0gbnVtYmVyIG9mIGJpdHMgZm9yIGZpZWxkLCBwYXNzZWRcbiAqICAgICAgICB0aHJvdWdoIGFzIHNlY29uZCBhcmd1bWVudCB0byBjb252ZXJ0ZXIgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259IHRoYXQgY2FuIGJlIHBhc3NlZCB0byAkLmtleXVwKClcbiAqL1xuTmV0U2ltUGFja2V0RWRpdG9yLnByb3RvdHlwZS5tYWtlS2V5dXBIYW5kbGVyID0gZnVuY3Rpb24gKGZpZWxkTmFtZSxcbiAgICBjb252ZXJ0ZXJGdW5jdGlvbiwgZmllbGRXaWR0aCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGpxdWVyeUV2ZW50KSB7XG4gICAgdmFyIG5ld1ZhbHVlID0gY29udmVydGVyRnVuY3Rpb24oanF1ZXJ5RXZlbnQudGFyZ2V0LnZhbHVlLCBmaWVsZFdpZHRoKTtcbiAgICBpZiAodHlwZW9mIG5ld1ZhbHVlID09PSAnc3RyaW5nJyB8fCAhaXNOYU4obmV3VmFsdWUpKSB7XG4gICAgICB0aGlzW2ZpZWxkTmFtZV0gPSBuZXdWYWx1ZTtcbiAgICAgIHRoaXMudXBkYXRlRmllbGRzXyhqcXVlcnlFdmVudC50YXJnZXQpO1xuICAgIH1cbiAgfS5iaW5kKHRoaXMpO1xufTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIGpRdWVyeS1hcHByb3ByaWF0ZSBibHVyIGhhbmRsZXIgZm9yIGEgdGV4dCBmaWVsZC5cbiAqIEdyYWJzIHRoZSBuZXcgdmFsdWUgb2YgdGhlIHRleHQgZmllbGQsIHJ1bnMgaXQgdGhyb3VnaCB0aGUgcHJvdmlkZWRcbiAqIGNvbnZlcnRlciBmdW5jdGlvbiwgc2V0cyB0aGUgcmVzdWx0IG9uIHRoZSBTZW5kV2lkZ2V0J3MgaW50ZXJuYWwgc3RhdGVcbiAqIGFuZCB0cmlnZ2VycyBhIGZ1bGwgZmllbGQgdXBkYXRlIG9mIHRoZSB3aWRnZXQgKGluY2x1ZGluZyB0aGUgZmllbGQgdGhhdCB3YXNcbiAqIGp1c3QgZWRpdGVkKS5cbiAqXG4gKiBTaW1pbGFyIHRvIG1ha2VLZXl1cEhhbmRsZXIsIGJ1dCBhbHNvIHVwZGF0ZXMgdGhlIGZpZWxkIHRoYXQgd2FzXG4gKiBqdXN0IGVkaXRlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZmllbGROYW1lIC0gbmFtZSBvZiBpbnRlcm5hbCBzdGF0ZSBmaWVsZCB0aGF0IHRoZSB0ZXh0XG4gKiAgICAgICAgZmllbGQgc2hvdWxkIHVwZGF0ZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbnZlcnRlckZ1bmN0aW9uIC0gVGFrZXMgdGhlIHRleHQgZmllbGQncyB2YWx1ZSBhbmRcbiAqICAgICAgICBjb252ZXJ0cyBpdCB0byBhIGZvcm1hdCBhcHByb3ByaWF0ZSB0byB0aGUgaW50ZXJuYWwgc3RhdGUgZmllbGQuXG4gKiBAcGFyYW0ge251bWJlcn0gW2ZpZWxkV2lkdGhdIC0gbWF4aW11bSBudW1iZXIgb2YgYml0cyBmb3IgZmllbGQsIHBhc3NlZFxuICogICAgICAgIHRocm91Z2ggYXMgc2Vjb25kIGFyZ3VtZW50IHRvIGNvbnZlcnRlciBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtmdW5jdGlvbn0gdGhhdCBjYW4gYmUgcGFzc2VkIHRvICQuYmx1cigpXG4gKi9cbk5ldFNpbVBhY2tldEVkaXRvci5wcm90b3R5cGUubWFrZUJsdXJIYW5kbGVyID0gZnVuY3Rpb24gKGZpZWxkTmFtZSxcbiAgICBjb252ZXJ0ZXJGdW5jdGlvbiwgZmllbGRXaWR0aCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGpxdWVyeUV2ZW50KSB7XG4gICAgdmFyIG5ld1ZhbHVlID0gY29udmVydGVyRnVuY3Rpb24oanF1ZXJ5RXZlbnQudGFyZ2V0LnZhbHVlLCBmaWVsZFdpZHRoKTtcbiAgICBpZiAodHlwZW9mIG5ld1ZhbHVlID09PSAnbnVtYmVyJyAmJiBpc05hTihuZXdWYWx1ZSkpIHtcbiAgICAgIG5ld1ZhbHVlID0gY29udmVydGVyRnVuY3Rpb24oJzAnKTtcbiAgICB9XG4gICAgdGhpc1tmaWVsZE5hbWVdID0gbmV3VmFsdWU7XG4gICAgdGhpcy51cGRhdGVGaWVsZHNfKCk7XG4gIH0uYmluZCh0aGlzKTtcbn07XG5cbi8qKlxuICogU3BlY2lmaWNhdGlvbiBmb3IgYW4gZW5jb2Rpbmcgcm93IGluIHRoZSBlZGl0b3IsIHdoaWNoIGRlc2lnbmF0ZXMgY2hhcmFjdGVyXG4gKiB3aGl0ZWxpc3RzIHRvIGxpbWl0IHR5cGluZyBpbiBjZXJ0YWluIGZpZWxkcywgYW5kIHJ1bGVzIGZvciBpbnRlcHJldGluZyB0aGVcbiAqIGZpZWxkIGZyb20gYmluYXJ5LlxuICogQHR5cGVkZWYge09iamVjdH0gUm93VHlwZVxuICogQHByb3BlcnR5IHtFbmNvZGluZ1R5cGV9IHR5cGVOYW1lXG4gKiBAcHJvcGVydHkge1JlZ0V4cH0gYWRkcmVzc0ZpZWxkQWxsb3dlZENoYXJhY3RlcnMgLSBXaGl0ZWxpc3Qgb2YgY2hhcmFjdGVyc1xuICogICAgICAgICAgIHRoYXQgbWF5IGJlIHR5cGVkIGludG8gYW4gYWRkcmVzcyBmaWVsZC5cbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IGFkZHJlc3NGaWVsZENvbnZlcnNpb24gLSBIb3cgdG8gY29udmVydCBmcm9tIGJpbmFyeVxuICogICAgICAgICAgIHRvIGFuIGFkZHJlc3Mgc3RyaW5nIGluIHRoaXMgcm93IHdoZW4gdGhlIGJpbmFyeSBpcyB1cGRhdGVkLlxuICogQHByb3BlcnR5IHtSZWdFeHB9IHNob3J0TnVtYmVyQWxsb3dlZENoYXJhY3RlcnMgLSBXaGl0ZWxpc3Qgb2YgY2hhcmFjdGVyc1xuICogICAgICAgICAgIHRoYXQgbWF5IGJlIHR5cGVkIGludG8gYSBoZWFkZXIgZmllbGQuXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBzaG9ydE51bWJlckNvbnZlcnNpb24gLSBIb3cgdG8gY29udmVydCBmcm9tIGJpbmFyeVxuICogICAgICAgICAgIHRvIGEgaGVhZGVyIHZhbHVlIGluIHRoaXMgcm93IHdoZW4gdGhlIGJpbmFyeSBpcyB1cGRhdGVkLlxuICogQHByb3BlcnR5IHtSZWdFeHB9IG1lc3NhZ2VBbGxvd2VkQ2hhcmFjdGVycyAtIFdoaXRlbGlzdCBvZiBjaGFyYWN0ZXJzXG4gKiAgICAgICAgICAgdGhhdCBtYXkgYmUgdHlwZWQgaW50byB0aGUgbWVzc2FnZSBmaWVsZC5cbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IG1lc3NhZ2VDb252ZXJzaW9uIC0gSG93IHRvIGNvbnZlcnQgZnJvbSBiaW5hcnkgdG9cbiAqICAgICAgICAgICB0aGUgbWVzc2FnZSB2YWx1ZSBpbiB0aGlzIHJvdyB3aGVuIHRoZSBiaW5hcnkgaXMgdXBkYXRlZC5cbiAqL1xuXG4vKipcbiAqIENvbnZlcnQgYmluYXJ5IHRvIGFuIGludGVnZXIsIGludGVudGlvbmFsbHkgbGltaXRpbmcgdGhlIGJpbmFyeSB3aWR0aCBzb1xuICogdGhhdCBvdmVyZmxvdyBjYW4gb2NjdXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gYmluYXJ5U3RyaW5nIChpbnRlcnByZXRlZCBhcyB1bnNpZ25lZClcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXhXaWR0aCBpbiBiaXRzXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG52YXIgdHJ1bmNhdGVkQmluYXJ5VG9JbnQgPSBmdW5jdGlvbiAoYmluYXJ5U3RyaW5nLCBtYXhXaWR0aCkge1xuICByZXR1cm4gYmluYXJ5VG9JbnQoYmluYXJ5U3RyaW5nLnN1YnN0cigtbWF4V2lkdGgpKTtcbn07XG5cbi8qKlxuICogQ29udmVydCBBQnMgdG8gYW4gaW50ZWdlciwgaW50ZW50aW9uYWxseSBsaW1pdGluZyB0aGUgd2lkdGggc28gdGhhdCBvdmVyZmxvd1xuICogY2FuIG9jY3VyIChhbmFsYWdvdXMgdG8gdHJ1bmNhdGVkQmluYXJ5VG9JbnQpLiAgQSBpcyB0cmVhdGVkIGFzIHplcm8sIEIgYXNcbiAqIG9uZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBhYlN0cmluZ1xuICogQHBhcmFtIHtudW1iZXJ9IG1heFdpZHRoIGluIGJpdHNcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbnZhciB0cnVuY2F0ZWRBQlRvSW50ID0gZnVuY3Rpb24gKGFiU3RyaW5nLCBtYXhXaWR0aCkge1xuICByZXR1cm4gYWJUb0ludChhYlN0cmluZy5zdWJzdHIoLW1heFdpZHRoKSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgYSBoZXhhZGVjaW1hbCBzdHJpbmcgdG8gYSBzaW5nbGUgaW50ZWdlciwgaW50ZW50aW9uYWxseSBsaW1pdGluZ1xuICogdGhlIGJpdC13aWR0aCB0byBzbyB0aGF0IG92ZXJmbG93IGNhbiBvY2N1ci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBoZXhTdHJpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXhXaWR0aCBpbiBiaXRzXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG52YXIgdHJ1bmNhdGVkSGV4VG9JbnQgPSBmdW5jdGlvbiAoaGV4U3RyaW5nLCBtYXhXaWR0aCkge1xuICByZXR1cm4gdHJ1bmNhdGVkQmluYXJ5VG9JbnQoaGV4VG9CaW5hcnkoaGV4U3RyaW5nKSwgbWF4V2lkdGgpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgZGVjaW1hbCBzdHJpbmcgdG8gYW4gaW50ZWdlciwgaW50ZW50aW9uYWxseSBsaW1pdGluZyB0aGUgYml0LXdpZHRoXG4gKiBzbyB0aGF0IG92ZXJmbG93IGNhbiBvY2N1ci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkZWNpbWFsU3RyaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4V2lkdGggaW4gYml0c1xuICogQHJldHVybnMge251bWJlcn1cbiAqL1xudmFyIHRydW5jYXRlZERlY2ltYWxUb0ludCA9IGZ1bmN0aW9uIChkZWNpbWFsU3RyaW5nLCBtYXhXaWR0aCkge1xuICByZXR1cm4gdHJ1bmNhdGVkQmluYXJ5VG9JbnQoaW50VG9CaW5hcnkocGFyc2VJbnQoZGVjaW1hbFN0cmluZywgMTApKSwgbWF4V2lkdGgpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0IGFuIGFkZHJlc3Mgc3RyaW5nIHRvIGJpbmFyeSBhbmQgYmFjayB1c2luZyB0aGUgbGV2ZWwncyBhZGRyZXNzXG4gKiBmb3JtYXQsIHdoaWNoIGNvZXJjZXMgaXQgdG8gdGhlIGV4YWN0IGZvcm1hdCB0aGUgbGV2ZWwgd2FudHMuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3JpZ2luYWxTdHJpbmdcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbnZhciBjbGVhbkFkZHJlc3NTdHJpbmcgPSBmdW5jdGlvbiAob3JpZ2luYWxTdHJpbmcpIHtcbiAgdmFyIGxldmVsID0gTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpO1xuICB2YXIgYmluYXJ5Rm9ybSA9IERhdGFDb252ZXJ0ZXJzLmFkZHJlc3NTdHJpbmdUb0JpbmFyeShcbiAgICAgIG9yaWdpbmFsU3RyaW5nLCBsZXZlbC5hZGRyZXNzRm9ybWF0KTtcbiAgcmV0dXJuIERhdGFDb252ZXJ0ZXJzLmJpbmFyeVRvQWRkcmVzc1N0cmluZyhcbiAgICAgIGJpbmFyeUZvcm0sIGxldmVsLmFkZHJlc3NGb3JtYXQpO1xufTtcblxuLyoqXG4gKiBIZWxwZXIgbWV0aG9kIHRvIGZpbHRlciB0aGlzLlJPV19UWVBFUyBieSBlbmFibGVkIGVuY29kaW5nc1xuICogQHByaXZhdGVcbiAqIEByZXR1cm5zIHtSb3dUeXBlW119XG4gKi9cbk5ldFNpbVBhY2tldEVkaXRvci5wcm90b3R5cGUuZ2V0RW5hYmxlZFJvd1R5cGVzXyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuUk9XX1RZUEVTLmZpbHRlcihmdW5jdGlvbiAocm93VHlwZSkge1xuICAgIHJldHVybiB0aGlzLmlzRW5jb2RpbmdFbmFibGVkXyhyb3dUeXBlLnR5cGVOYW1lKTtcbiAgfSwgdGhpcyk7XG59O1xuXG4vKipcbiAqIEdldCByZWxldmFudCBlbGVtZW50cyBmcm9tIHRoZSBwYWdlIGFuZCBiaW5kIHRoZW0gdG8gbG9jYWwgdmFyaWFibGVzLlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUGFja2V0RWRpdG9yLnByb3RvdHlwZS5iaW5kRWxlbWVudHNfID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbGV2ZWwgPSBOZXRTaW1HbG9iYWxzLmdldExldmVsQ29uZmlnKCk7XG4gIHZhciBlbmNvZGVyID0gbmV3IFBhY2tldC5FbmNvZGVyKGxldmVsLmFkZHJlc3NGb3JtYXQsXG4gICAgICBsZXZlbC5wYWNrZXRDb3VudEJpdFdpZHRoLCB0aGlzLnBhY2tldFNwZWNfKTtcbiAgdmFyIHJvb3REaXYgPSB0aGlzLnJvb3REaXZfO1xuXG4gIHRoaXMuZ2V0RW5hYmxlZFJvd1R5cGVzXygpLmZvckVhY2goZnVuY3Rpb24gKHJvd1R5cGUpIHtcbiAgICB2YXIgdHIgPSByb290RGl2LmZpbmQoJ3RyLicgKyByb3dUeXBlLnR5cGVOYW1lKTtcbiAgICB0aGlzLnVpX1tyb3dUeXBlLnR5cGVOYW1lXSA9IHt9O1xuICAgIHZhciByb3dGaWVsZHMgPSB0aGlzLnVpX1tyb3dUeXBlLnR5cGVOYW1lXTtcblxuICAgIC8vIFdlIGF0dGFjaCBmb2N1cyAoc29tZXRpbWVzKSB0byBjbGVhciB0aGUgZmllbGQgd2F0ZXJtYXJrLCBpZiBwcmVzZW50XG4gICAgLy8gV2UgYXR0YWNoIGtleXByZXNzIHRvIGJsb2NrIGNlcnRhaW4gY2hhcmFjdGVyc1xuICAgIC8vIFdlIGF0dGFjaCBrZXl1cCB0byBsaXZlLXVwZGF0ZSB0aGUgd2lkZ2V0IGFzIHRoZSB1c2VyIHR5cGVzXG4gICAgLy8gV2UgYXR0YWNoIGJsdXIgdG8gcmVmb3JtYXQgdGhlIGVkaXRlZCBmaWVsZCB3aGVuIHRoZSB1c2VyIGxlYXZlcyBpdCxcbiAgICAvLyAgICBhbmQgdG8gY2F0Y2ggbm9uLWtleXVwIGNhc2VzIGxpa2UgY29weS9wYXN0ZS5cblxuICAgIHRoaXMucGFja2V0U3BlY18uZm9yRWFjaChmdW5jdGlvbiAoZmllbGRTcGVjKSB7XG4gICAgICAvKiogQHR5cGUge1BhY2tldC5IZWFkZXJUeXBlfSAqL1xuICAgICAgdmFyIGZpZWxkTmFtZSA9IGZpZWxkU3BlYztcbiAgICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICAgICAgdmFyIGZpZWxkV2lkdGggPSBlbmNvZGVyLmdldEZpZWxkQml0V2lkdGgoZmllbGROYW1lKTtcblxuICAgICAgdmFyIGFsbG93ZWRDaGFyYWN0ZXJGdW5jdGlvbiwgY29udmVyc2lvbkZ1bmN0aW9uO1xuICAgICAgaWYgKFBhY2tldC5pc0FkZHJlc3NGaWVsZChmaWVsZE5hbWUpKSB7XG4gICAgICAgIGFsbG93ZWRDaGFyYWN0ZXJGdW5jdGlvbiA9IHJvd1R5cGUuYWRkcmVzc0ZpZWxkQWxsb3dlZENoYXJhY3RlcnM7XG4gICAgICAgIGNvbnZlcnNpb25GdW5jdGlvbiA9IHJvd1R5cGUuYWRkcmVzc0ZpZWxkQ29udmVyc2lvbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFsbG93ZWRDaGFyYWN0ZXJGdW5jdGlvbiA9IHJvd1R5cGUuc2hvcnROdW1iZXJBbGxvd2VkQ2hhcmFjdGVycztcbiAgICAgICAgY29udmVyc2lvbkZ1bmN0aW9uID0gcm93VHlwZS5zaG9ydE51bWJlckNvbnZlcnNpb247XG4gICAgICB9XG5cbiAgICAgIHJvd0ZpZWxkc1tmaWVsZE5hbWVdID0gdHIuZmluZCgnaW5wdXQuJyArIGZpZWxkTmFtZSk7XG4gICAgICByb3dGaWVsZHNbZmllbGROYW1lXS5rZXlwcmVzcyhtYWtlS2V5cHJlc3NIYW5kbGVyV2l0aFdoaXRlbGlzdChcbiAgICAgICAgICBhbGxvd2VkQ2hhcmFjdGVyRnVuY3Rpb24pKTtcbiAgICAgIHJvd0ZpZWxkc1tmaWVsZE5hbWVdLmtleXVwKHRoaXMubWFrZUtleXVwSGFuZGxlcihmaWVsZE5hbWUsXG4gICAgICAgICAgY29udmVyc2lvbkZ1bmN0aW9uLCBmaWVsZFdpZHRoKSk7XG4gICAgICByb3dGaWVsZHNbZmllbGROYW1lXS5ibHVyKHRoaXMubWFrZUJsdXJIYW5kbGVyKGZpZWxkTmFtZSxcbiAgICAgICAgICBjb252ZXJzaW9uRnVuY3Rpb24sIGZpZWxkV2lkdGgpKTtcbiAgICB9LCB0aGlzKTtcblxuICAgIHJvd0ZpZWxkcy5tZXNzYWdlID0gdHIuZmluZCgndGV4dGFyZWEubWVzc2FnZScpO1xuICAgIHJvd0ZpZWxkcy5tZXNzYWdlLmZvY3VzKHJlbW92ZVdhdGVybWFyayk7XG4gICAgcm93RmllbGRzLm1lc3NhZ2Uua2V5cHJlc3MoXG4gICAgICAgIG1ha2VLZXlwcmVzc0hhbmRsZXJXaXRoV2hpdGVsaXN0KHJvd1R5cGUubWVzc2FnZUFsbG93ZWRDaGFyYWN0ZXJzKSk7XG4gICAgcm93RmllbGRzLm1lc3NhZ2Uua2V5ZG93bihmdW5jdGlvbihqcXVlcnlFdmVudCl7XG4gICAgICBpZiAoaXNVbm1vZGlmaWVkRW50ZXJQcmVzcyhqcXVlcnlFdmVudCkpIHtcbiAgICAgICAgdGhpcy5lbnRlcktleVByZXNzZWRDYWxsYmFja18oanF1ZXJ5RXZlbnQpO1xuICAgICAgfVxuICAgIH0uYmluZCh0aGlzKSk7XG4gICAgcm93RmllbGRzLm1lc3NhZ2Uua2V5dXAoXG4gICAgICAgIHRoaXMubWFrZUtleXVwSGFuZGxlcignbWVzc2FnZScsIHJvd1R5cGUubWVzc2FnZUNvbnZlcnNpb24pKTtcbiAgICByb3dGaWVsZHMubWVzc2FnZS5ibHVyKFxuICAgICAgICB0aGlzLm1ha2VCbHVySGFuZGxlcignbWVzc2FnZScsIHJvd1R5cGUubWVzc2FnZUNvbnZlcnNpb24pKTtcbiAgfSwgdGhpcyk7XG5cbiAgdGhpcy5yZW1vdmVQYWNrZXRCdXR0b25fID0gcm9vdERpdi5maW5kKCcucmVtb3ZlLXBhY2tldC1idXR0b24nKTtcbiAgdGhpcy5yZW1vdmVQYWNrZXRCdXR0b25fLmNsaWNrKHRoaXMub25SZW1vdmVQYWNrZXRCdXR0b25DbGlja18uYmluZCh0aGlzKSk7XG4gIHRoaXMuYml0Q291bnRlcl8gPSByb290RGl2LmZpbmQoJy5iaXQtY291bnRlcicpO1xufTtcblxuLyoqXG4gKiBTcGVjaWFsIHVwZGF0ZSBtZXRob2QgY2FsbGVkIGR1cmluZyBzZW5kIGFuaW1hdGlvbiB0aGF0IGNoYW5nZXMgdGhlIGVkaXRvclxuICogZGlzcGxheSB0byBzaG93IGVhY2ggZmllbGQgbGVmdC10cnVuY2F0ZWQgYXQgYW4gYXBwcm9wcmlhdGUgYW1vdW50IGZvciB0aGVcbiAqIHNpbXVsYXRlZCBzZW5kIHByb2dyZXNzLlxuICpcbiAqIFRoaXMgd29ya3MgZGlmZmVyZW50bHkgZm9yIGRpZmZlcmVudCBmaWVsZHM6XG4gKiAgLSBCaW5hcnkgYW5kIEEvQiBmaWVsZHMgc2VuZCBhIHNpbmdsZSBiaXQgYXQgYSB0aW1lLlxuICogIC0gSGV4IHNlbmRzIGEgc2luZ2xlIGhleCBkaWdpdCBhdCBhIHRpbWUsIGJ1dCBhdCB0aGUgY29ycmVjdCBzbG93ZXIgcmF0ZS5cbiAqICAtIERlY2ltYWwgYW5kIEFTQ0lJIHNlbmQgb25lIGNodW5rIGF0IGEgdGltZSwgd2hpY2ggZGVwZW5kcyBvbiB0aGUgY3VycmVudFxuICogICAgY2h1bmsgc2l6ZSwgYW5kIGlzIGFkanVzdGVkIHRvIHRoZSBjb3JyZWN0IHNsb3dlciByYXRlIGFzIHdlbGwuICBGb3JcbiAqICAgIEFTQ0lJIHRoaXMgbWFwcyB0byBvbmUgY2hhcmFjdGVyIGF0IGEgdGltZS4gIEZvciBkZWNpbWFsLCBpdCdzIG9uZVxuICogICAgd2hpdGVzcGFjZS1kZWxpbWl0ZWQgbnVtYmVyLlxuICpcbiAqIFRoaXMgYXZvaWRzIHRoZSBqdW1ibGVkIGVmZmVjdCBvZiByZWludGVycHJldGluZyBub25iaW5hcnkgZmllbGRzIHVzaW5nXG4gKiBtaXNhbGlnbmVkIGJpbmFyeSwgYW5kIGNvbW11bmljYXRlcyBpbiBhIHZpc3VhbCB3YXkgdGhhdCBpdCB0YWtlcyBsb25nZXIgdG9cbiAqIHNlbmQgYSBzaW5nbGUgY2hhcmFjdGVyIHRoYW4gaXQgZG9lcyB0byBzZW5kIGEgc2luZ2xlIGJpdC5cbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBhbHNvIGRlc2lnbmVkIHRvIHNlbmQgdGhlIHBhY2tldCBoZWFkZXIgZmllbGRzIGluIHNlcXVlbmNlXG4gKiBiZWZvcmUgc2VuZGluZyB0aGUgcGFja2V0IGJvZHkuICBCb2R5IGJpbmFyeSBpcyBuZXZlciBzZWVuIGluIHRoZSBoZWFkZXJcbiAqIGZpZWxkcywgZWFjaCBmaWVsZCBpcyB0cmVhdGVkIGFzIGFuIGluZGVwZW5kZW50IHNwYWNlLlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUGFja2V0RWRpdG9yLnByb3RvdHlwZS51cGRhdGVGb3JBbmltYXRpb25fID0gZnVuY3Rpb24gKCkge1xuICB2YXIgY2h1bmtTaXplID0gdGhpcy5jdXJyZW50Q2h1bmtTaXplXztcbiAgdmFyIGxpdmVGaWVsZHMgPSBbXTtcblxuICAvLyBUaGVyZSBtYXkgYmUgcG90ZW50aWFsIGZvciBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gaGVyZSwgYnV0IGl0J3Mgbm90XG4gIC8vIHBhcnRpY3VsYXJseSBoaWdoIG9uIG91ciBwZXJmIGxpc3QgcmlnaHQgbm93LlxuXG4gIHZhciBsZXZlbCA9IE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKTtcbiAgdmFyIGVuY29kZXIgPSBuZXcgUGFja2V0LkVuY29kZXIobGV2ZWwuYWRkcmVzc0Zvcm1hdCxcbiAgICAgIGxldmVsLnBhY2tldENvdW50Qml0V2lkdGgsIHRoaXMucGFja2V0U3BlY18pO1xuXG4gIHZhciBmaWVsZFN0YXJ0ID0gMDtcblxuICB0aGlzLnBhY2tldFNwZWNfLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkU3BlYykge1xuICAgIC8qKiBAdHlwZSB7UGFja2V0LkhlYWRlclR5cGV9ICovXG4gICAgdmFyIGZpZWxkTmFtZSA9IGZpZWxkU3BlYztcbiAgICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgICB2YXIgZmllbGRXaWR0aCA9IGVuY29kZXIuZ2V0RmllbGRCaXRXaWR0aChmaWVsZE5hbWUpO1xuXG4gICAgaWYgKHRoaXMuc2VuZEFuaW1hdGlvbkluZGV4XyA8IGZpZWxkU3RhcnQgKyBmaWVsZFdpZHRoKSB7XG4gICAgICAvLyBFaXRoZXIgd2UgaGF2ZW4ndCByZWFjaGVkIHRoaXMgZmllbGQgeWV0IG9yIHdlJ3JlIGN1cnJlbnRseSBhbmltYXRpbmdcbiAgICAgIC8vIHRocm91Z2ggaXQ7IGRvbid0IGRvIGFueXRoaW5nIHRvIHRoZSBtb3JlIGNvbXBsZXggZmllbGRzLCBhbmQgYW5pbWF0ZVxuICAgICAgLy8gdGhlIGJpbmFyeSBhcHByb3ByaWF0ZWx5LlxuICAgICAgdmFyIGZpZWxkQmluYXJ5ID0gdGhpcy5vcmlnaW5hbEJpbmFyeV8uc3Vic3RyKGZpZWxkU3RhcnQsIGZpZWxkV2lkdGgpO1xuICAgICAgdmFyIHRydW5jYXRlZEJpdHMgPSBNYXRoLm1heCgwLCB0aGlzLnNlbmRBbmltYXRpb25JbmRleF8gLSBmaWVsZFN0YXJ0KTtcblxuICAgICAgaWYgKHRoaXMuaXNFbmNvZGluZ0VuYWJsZWRfKEVuY29kaW5nVHlwZS5BX0FORF9CKSkge1xuICAgICAgICBsaXZlRmllbGRzLnB1c2goe1xuICAgICAgICAgIGlucHV0RWxlbWVudDogdGhpcy51aV9bRW5jb2RpbmdUeXBlLkFfQU5EX0JdW2ZpZWxkTmFtZV0sXG4gICAgICAgICAgbmV3VmFsdWU6IGJpbmFyeVRvQUIoZmllbGRCaW5hcnkpLnN1YnN0cih0cnVuY2F0ZWRCaXRzKVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaXNFbmNvZGluZ0VuYWJsZWRfKEVuY29kaW5nVHlwZS5CSU5BUlkpKSB7XG4gICAgICAgIGxpdmVGaWVsZHMucHVzaCh7XG4gICAgICAgICAgaW5wdXRFbGVtZW50OiB0aGlzLnVpX1tFbmNvZGluZ1R5cGUuQklOQVJZXVtmaWVsZE5hbWVdLFxuICAgICAgICAgIG5ld1ZhbHVlOiBmaWVsZEJpbmFyeS5zdWJzdHIodHJ1bmNhdGVkQml0cylcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmlzRW5jb2RpbmdFbmFibGVkXyhFbmNvZGluZ1R5cGUuSEVYQURFQ0lNQUwpKSB7XG4gICAgICAgIHZhciB0cnVuY2F0ZWRIZXhEaWdpdHMgPSBNYXRoLmZsb29yKHRydW5jYXRlZEJpdHMgLyA0KTtcbiAgICAgICAgbGl2ZUZpZWxkcy5wdXNoKHtcbiAgICAgICAgICBpbnB1dEVsZW1lbnQ6IHRoaXMudWlfW0VuY29kaW5nVHlwZS5IRVhBREVDSU1BTF1bZmllbGROYW1lXSxcbiAgICAgICAgICBuZXdWYWx1ZTogYmluYXJ5VG9IZXgoZmllbGRCaW5hcnkpLnN1YnN0cih0cnVuY2F0ZWRIZXhEaWdpdHMpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBXZSdyZSBwYXN0IHRoaXMgZmllbGQgLSBpdCBzaG91bGQgYmUgYmxhbmtcbiAgICAgIGlmICh0aGlzLmlzRW5jb2RpbmdFbmFibGVkXyhFbmNvZGluZ1R5cGUuQV9BTkRfQikpIHtcbiAgICAgICAgbGl2ZUZpZWxkcy5wdXNoKHtcbiAgICAgICAgICBpbnB1dEVsZW1lbnQ6IHRoaXMudWlfW0VuY29kaW5nVHlwZS5BX0FORF9CXVtmaWVsZE5hbWVdLFxuICAgICAgICAgIG5ld1ZhbHVlOiAnJ1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaXNFbmNvZGluZ0VuYWJsZWRfKEVuY29kaW5nVHlwZS5CSU5BUlkpKSB7XG4gICAgICAgIGxpdmVGaWVsZHMucHVzaCh7XG4gICAgICAgICAgaW5wdXRFbGVtZW50OiB0aGlzLnVpX1tFbmNvZGluZ1R5cGUuQklOQVJZXVtmaWVsZE5hbWVdLFxuICAgICAgICAgIG5ld1ZhbHVlOiAnJ1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaXNFbmNvZGluZ0VuYWJsZWRfKEVuY29kaW5nVHlwZS5IRVhBREVDSU1BTCkpIHtcbiAgICAgICAgbGl2ZUZpZWxkcy5wdXNoKHtcbiAgICAgICAgICBpbnB1dEVsZW1lbnQ6IHRoaXMudWlfW0VuY29kaW5nVHlwZS5IRVhBREVDSU1BTF1bZmllbGROYW1lXSxcbiAgICAgICAgICBuZXdWYWx1ZTogJydcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmlzRW5jb2RpbmdFbmFibGVkXyhFbmNvZGluZ1R5cGUuREVDSU1BTCkpIHtcbiAgICAgICAgbGl2ZUZpZWxkcy5wdXNoKHtcbiAgICAgICAgICBpbnB1dEVsZW1lbnQ6IHRoaXMudWlfW0VuY29kaW5nVHlwZS5ERUNJTUFMXVtmaWVsZE5hbWVdLFxuICAgICAgICAgIG5ld1ZhbHVlOiAnJ1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaXNFbmNvZGluZ0VuYWJsZWRfKEVuY29kaW5nVHlwZS5BU0NJSSkpIHtcbiAgICAgICAgbGl2ZUZpZWxkcy5wdXNoKHtcbiAgICAgICAgICBpbnB1dEVsZW1lbnQ6IHRoaXMudWlfW0VuY29kaW5nVHlwZS5BU0NJSV1bZmllbGROYW1lXSxcbiAgICAgICAgICBuZXdWYWx1ZTogJydcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWR2YW5jZSB0byB0aGUgbmV4dCBmaWVsZFxuICAgIGZpZWxkU3RhcnQgKz0gZmllbGRXaWR0aDtcbiAgfSwgdGhpcyk7XG5cbiAgdmFyIGJvZHlCaW5hcnkgPSB0aGlzLm9yaWdpbmFsQmluYXJ5Xy5zdWJzdHIoZmllbGRTdGFydCk7XG4gIHZhciB0cnVuY2F0ZWRCaXRzID0gTWF0aC5tYXgoMCwgdGhpcy5zZW5kQW5pbWF0aW9uSW5kZXhfIC0gZmllbGRTdGFydCk7XG4gIHZhciB0cnVuY2F0ZWRDaHVua3MgPSBNYXRoLmZsb29yKHRydW5jYXRlZEJpdHMgLyBjaHVua1NpemUpO1xuICB2YXIgcGFydGlhbEJpbmFyeUF0Q2h1bmtTaXplID0gYm9keUJpbmFyeS5zdWJzdHIodHJ1bmNhdGVkQ2h1bmtzICogY2h1bmtTaXplKTtcblxuICBpZiAodGhpcy5pc0VuY29kaW5nRW5hYmxlZF8oRW5jb2RpbmdUeXBlLkFfQU5EX0IpKSB7XG4gICAgbGl2ZUZpZWxkcy5wdXNoKHtcbiAgICAgIGlucHV0RWxlbWVudDogdGhpcy51aV9bRW5jb2RpbmdUeXBlLkFfQU5EX0JdLm1lc3NhZ2UsXG4gICAgICBuZXdWYWx1ZTogZm9ybWF0QUIoYmluYXJ5VG9BQihib2R5QmluYXJ5KS5zdWJzdHIodHJ1bmNhdGVkQml0cyksXG4gICAgICAgICAgY2h1bmtTaXplLCAtdHJ1bmNhdGVkQml0cyksXG4gICAgICB3YXRlcm1hcms6IG5ldHNpbU1zZy5hX2FuZF9iKClcbiAgICB9KTtcbiAgfVxuXG4gIGlmICh0aGlzLmlzRW5jb2RpbmdFbmFibGVkXyhFbmNvZGluZ1R5cGUuQklOQVJZKSkge1xuICAgIGxpdmVGaWVsZHMucHVzaCh7XG4gICAgICBpbnB1dEVsZW1lbnQ6IHRoaXMudWlfW0VuY29kaW5nVHlwZS5CSU5BUlldLm1lc3NhZ2UsXG4gICAgICBuZXdWYWx1ZTogZm9ybWF0QmluYXJ5KGJvZHlCaW5hcnkuc3Vic3RyKHRydW5jYXRlZEJpdHMpLCBjaHVua1NpemUsXG4gICAgICAgICAgLXRydW5jYXRlZEJpdHMpLFxuICAgICAgd2F0ZXJtYXJrOiBuZXRzaW1Nc2cuYmluYXJ5KClcbiAgICB9KTtcbiAgfVxuXG4gIGlmICh0aGlzLmlzRW5jb2RpbmdFbmFibGVkXyhFbmNvZGluZ1R5cGUuSEVYQURFQ0lNQUwpKSB7XG4gICAgdmFyIHRydW5jYXRlZEhleERpZ2l0cyA9IE1hdGguZmxvb3IodHJ1bmNhdGVkQml0cyAvIDQpO1xuICAgIGxpdmVGaWVsZHMucHVzaCh7XG4gICAgICBpbnB1dEVsZW1lbnQ6IHRoaXMudWlfW0VuY29kaW5nVHlwZS5IRVhBREVDSU1BTF0ubWVzc2FnZSxcbiAgICAgIG5ld1ZhbHVlOiBmb3JtYXRIZXgoYmluYXJ5VG9IZXgoYm9keUJpbmFyeSkuc3Vic3RyKHRydW5jYXRlZEhleERpZ2l0cyksXG4gICAgICAgICAgY2h1bmtTaXplLCAtdHJ1bmNhdGVkSGV4RGlnaXRzKSxcbiAgICAgIHdhdGVybWFyazogbmV0c2ltTXNnLmhleGFkZWNpbWFsKClcbiAgICB9KTtcbiAgfVxuXG4gIGlmICh0aGlzLmlzRW5jb2RpbmdFbmFibGVkXyhFbmNvZGluZ1R5cGUuREVDSU1BTCkpIHtcbiAgICBsaXZlRmllbGRzLnB1c2goe1xuICAgICAgaW5wdXRFbGVtZW50OiB0aGlzLnVpX1tFbmNvZGluZ1R5cGUuREVDSU1BTF0ubWVzc2FnZSxcbiAgICAgIG5ld1ZhbHVlOiBhbGlnbkRlY2ltYWwoYmluYXJ5VG9EZWNpbWFsKHBhcnRpYWxCaW5hcnlBdENodW5rU2l6ZSwgY2h1bmtTaXplKSksXG4gICAgICB3YXRlcm1hcms6IG5ldHNpbU1zZy5kZWNpbWFsKClcbiAgICB9KTtcbiAgfVxuXG4gIGlmICh0aGlzLmlzRW5jb2RpbmdFbmFibGVkXyhFbmNvZGluZ1R5cGUuQVNDSUkpKSB7XG4gICAgbGl2ZUZpZWxkcy5wdXNoKHtcbiAgICAgIGlucHV0RWxlbWVudDogdGhpcy51aV9bRW5jb2RpbmdUeXBlLkFTQ0lJXS5tZXNzYWdlLFxuICAgICAgbmV3VmFsdWU6IGJpbmFyeVRvQXNjaWkocGFydGlhbEJpbmFyeUF0Q2h1bmtTaXplLCBjaHVua1NpemUpLFxuICAgICAgd2F0ZXJtYXJrOiBuZXRzaW1Nc2cuYXNjaWkoKVxuICAgIH0pO1xuICB9XG5cbiAgbGl2ZUZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgIGlmIChmaWVsZC53YXRlcm1hcmsgJiYgZmllbGQubmV3VmFsdWUgPT09ICcnKSB7XG4gICAgICBmaWVsZC5pbnB1dEVsZW1lbnQudmFsKGZpZWxkLndhdGVybWFyayk7XG4gICAgICBmaWVsZC5pbnB1dEVsZW1lbnQuYWRkQ2xhc3MoJ3dhdGVybWFyaycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmaWVsZC5pbnB1dEVsZW1lbnQudmFsKGZpZWxkLm5ld1ZhbHVlKTtcbiAgICAgIGZpZWxkLmlucHV0RWxlbWVudC5yZW1vdmVDbGFzcygnd2F0ZXJtYXJrJyk7XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICogVXBkYXRlIHNlbmQgd2lkZ2V0IGRpc3BsYXlcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IFtza2lwRWxlbWVudF0gLSBBIGZpZWxkIHRvIHNraXAgd2hpbGUgdXBkYXRpbmcsXG4gKiAgICAgICAgYmVjYXVzZSB3ZSBkb24ndCB3YW50IHRvIHRyYW5zZm9ybSBjb250ZW50IG91dCBmcm9tIHVuZGVyIHRoZVxuICogICAgICAgIHVzZXIncyBjdXJzb3IuXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1QYWNrZXRFZGl0b3IucHJvdG90eXBlLnVwZGF0ZUZpZWxkc18gPSBmdW5jdGlvbiAoc2tpcEVsZW1lbnQpIHtcbiAgdmFyIGNodW5rU2l6ZSA9IHRoaXMuY3VycmVudENodW5rU2l6ZV87XG4gIHZhciBsaXZlRmllbGRzID0gW107XG5cbiAgdmFyIGxldmVsID0gTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpO1xuICB2YXIgZW5jb2RlciA9IG5ldyBQYWNrZXQuRW5jb2RlcihsZXZlbC5hZGRyZXNzRm9ybWF0LFxuICAgICAgbGV2ZWwucGFja2V0Q291bnRCaXRXaWR0aCwgdGhpcy5wYWNrZXRTcGVjXyk7XG5cbiAgdGhpcy5wYWNrZXRTcGVjXy5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZFNwZWMpIHtcbiAgICAvKiogQHR5cGUge1BhY2tldC5IZWFkZXJUeXBlfSAqL1xuICAgIHZhciBmaWVsZE5hbWUgPSBmaWVsZFNwZWM7XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgdmFyIGZpZWxkV2lkdGggPSBlbmNvZGVyLmdldEZpZWxkQml0V2lkdGgoZmllbGROYW1lKTtcblxuICAgIHZhciBhYkNvbnZlcnRlciwgYmluYXJ5Q29udmVydGVyLCBoZXhDb252ZXJ0ZXIsIGRlY2ltYWxDb252ZXJ0ZXIsIGFzY2lpQ29udmVydGVyO1xuICAgIGlmIChQYWNrZXQuaXNBZGRyZXNzRmllbGQoZmllbGROYW1lKSkge1xuICAgICAgYWJDb252ZXJ0ZXIgPSBmdW5jdGlvbiAoYWRkcmVzc1N0cmluZykge1xuICAgICAgICByZXR1cm4gRGF0YUNvbnZlcnRlcnMuYmluYXJ5VG9BQihcbiAgICAgICAgICAgIERhdGFDb252ZXJ0ZXJzLmFkZHJlc3NTdHJpbmdUb0JpbmFyeShcbiAgICAgICAgICAgICAgICBhZGRyZXNzU3RyaW5nLCBsZXZlbC5hZGRyZXNzRm9ybWF0KSk7XG4gICAgICB9O1xuICAgICAgYmluYXJ5Q29udmVydGVyID0gZnVuY3Rpb24gKGFkZHJlc3NTdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIERhdGFDb252ZXJ0ZXJzLmZvcm1hdEJpbmFyeUZvckFkZHJlc3NIZWFkZXIoXG4gICAgICAgICAgICBEYXRhQ29udmVydGVycy5hZGRyZXNzU3RyaW5nVG9CaW5hcnkoXG4gICAgICAgICAgICAgICAgYWRkcmVzc1N0cmluZyxcbiAgICAgICAgICAgICAgICBsZXZlbC5hZGRyZXNzRm9ybWF0KSxcbiAgICAgICAgICAgIGxldmVsLmFkZHJlc3NGb3JtYXQpO1xuICAgICAgfTtcbiAgICAgIGhleENvbnZlcnRlciA9IGZ1bmN0aW9uIChhZGRyZXNzU3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBEYXRhQ29udmVydGVycy5iaW5hcnlUb0hleChcbiAgICAgICAgICAgIERhdGFDb252ZXJ0ZXJzLmFkZHJlc3NTdHJpbmdUb0JpbmFyeShcbiAgICAgICAgICAgICAgICBhZGRyZXNzU3RyaW5nLCBsZXZlbC5hZGRyZXNzRm9ybWF0KSk7XG4gICAgICB9O1xuICAgICAgZGVjaW1hbENvbnZlcnRlciA9IGNsZWFuQWRkcmVzc1N0cmluZztcbiAgICAgIGFzY2lpQ29udmVydGVyID0gY2xlYW5BZGRyZXNzU3RyaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICBhYkNvbnZlcnRlciA9IGludFRvQUI7XG4gICAgICBiaW5hcnlDb252ZXJ0ZXIgPSBpbnRUb0JpbmFyeTtcbiAgICAgIGhleENvbnZlcnRlciA9IGludFRvSGV4O1xuICAgICAgZGVjaW1hbENvbnZlcnRlciA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgcmV0dXJuIHZhbC50b1N0cmluZygxMCk7XG4gICAgICB9O1xuICAgICAgYXNjaWlDb252ZXJ0ZXIgPSBkZWNpbWFsQ29udmVydGVyO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzRW5jb2RpbmdFbmFibGVkXyhFbmNvZGluZ1R5cGUuQV9BTkRfQikpIHtcbiAgICAgIGxpdmVGaWVsZHMucHVzaCh7XG4gICAgICAgIGlucHV0RWxlbWVudDogdGhpcy51aV9bRW5jb2RpbmdUeXBlLkFfQU5EX0JdW2ZpZWxkTmFtZV0sXG4gICAgICAgIG5ld1ZhbHVlOiBhYkNvbnZlcnRlcih0aGlzW2ZpZWxkTmFtZV0sIGZpZWxkV2lkdGgpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc0VuY29kaW5nRW5hYmxlZF8oRW5jb2RpbmdUeXBlLkJJTkFSWSkpIHtcbiAgICAgIGxpdmVGaWVsZHMucHVzaCh7XG4gICAgICAgIGlucHV0RWxlbWVudDogdGhpcy51aV9bRW5jb2RpbmdUeXBlLkJJTkFSWV1bZmllbGROYW1lXSxcbiAgICAgICAgbmV3VmFsdWU6IGJpbmFyeUNvbnZlcnRlcih0aGlzW2ZpZWxkTmFtZV0sIGZpZWxkV2lkdGgpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc0VuY29kaW5nRW5hYmxlZF8oRW5jb2RpbmdUeXBlLkhFWEFERUNJTUFMKSkge1xuICAgICAgbGl2ZUZpZWxkcy5wdXNoKHtcbiAgICAgICAgaW5wdXRFbGVtZW50OiB0aGlzLnVpX1tFbmNvZGluZ1R5cGUuSEVYQURFQ0lNQUxdW2ZpZWxkTmFtZV0sXG4gICAgICAgIG5ld1ZhbHVlOiBoZXhDb252ZXJ0ZXIodGhpc1tmaWVsZE5hbWVdLCBNYXRoLmNlaWwoZmllbGRXaWR0aCAvIDQpKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNFbmNvZGluZ0VuYWJsZWRfKEVuY29kaW5nVHlwZS5ERUNJTUFMKSkge1xuICAgICAgbGl2ZUZpZWxkcy5wdXNoKHtcbiAgICAgICAgaW5wdXRFbGVtZW50OiB0aGlzLnVpX1tFbmNvZGluZ1R5cGUuREVDSU1BTF1bZmllbGROYW1lXSxcbiAgICAgICAgbmV3VmFsdWU6IGRlY2ltYWxDb252ZXJ0ZXIodGhpc1tmaWVsZE5hbWVdLCBmaWVsZFdpZHRoKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNFbmNvZGluZ0VuYWJsZWRfKEVuY29kaW5nVHlwZS5BU0NJSSkpIHtcbiAgICAgIGxpdmVGaWVsZHMucHVzaCh7XG4gICAgICAgIGlucHV0RWxlbWVudDogdGhpcy51aV9bRW5jb2RpbmdUeXBlLkFTQ0lJXVtmaWVsZE5hbWVdLFxuICAgICAgICBuZXdWYWx1ZTogYXNjaWlDb252ZXJ0ZXIodGhpc1tmaWVsZE5hbWVdLCBmaWVsZFdpZHRoKVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB0aGlzKTtcblxuICBpZiAodGhpcy5pc0VuY29kaW5nRW5hYmxlZF8oRW5jb2RpbmdUeXBlLkFfQU5EX0IpKSB7XG4gICAgbGl2ZUZpZWxkcy5wdXNoKHtcbiAgICAgIGlucHV0RWxlbWVudDogdGhpcy51aV9bRW5jb2RpbmdUeXBlLkFfQU5EX0JdLm1lc3NhZ2UsXG4gICAgICBuZXdWYWx1ZTogZm9ybWF0QUIoYmluYXJ5VG9BQih0aGlzLm1lc3NhZ2UpLCBjaHVua1NpemUpLFxuICAgICAgd2F0ZXJtYXJrOiBuZXRzaW1Nc2cuYV9hbmRfYigpXG4gICAgfSk7XG4gIH1cblxuICBpZiAodGhpcy5pc0VuY29kaW5nRW5hYmxlZF8oRW5jb2RpbmdUeXBlLkJJTkFSWSkpIHtcbiAgICBsaXZlRmllbGRzLnB1c2goe1xuICAgICAgaW5wdXRFbGVtZW50OiB0aGlzLnVpX1tFbmNvZGluZ1R5cGUuQklOQVJZXS5tZXNzYWdlLFxuICAgICAgbmV3VmFsdWU6IGZvcm1hdEJpbmFyeSh0aGlzLm1lc3NhZ2UsIGNodW5rU2l6ZSksXG4gICAgICB3YXRlcm1hcms6IG5ldHNpbU1zZy5iaW5hcnkoKVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHRoaXMuaXNFbmNvZGluZ0VuYWJsZWRfKEVuY29kaW5nVHlwZS5IRVhBREVDSU1BTCkpIHtcbiAgICBsaXZlRmllbGRzLnB1c2goe1xuICAgICAgaW5wdXRFbGVtZW50OiB0aGlzLnVpX1tFbmNvZGluZ1R5cGUuSEVYQURFQ0lNQUxdLm1lc3NhZ2UsXG4gICAgICBuZXdWYWx1ZTogZm9ybWF0SGV4KGJpbmFyeVRvSGV4KHRoaXMubWVzc2FnZSksIGNodW5rU2l6ZSksXG4gICAgICB3YXRlcm1hcms6IG5ldHNpbU1zZy5oZXhhZGVjaW1hbCgpXG4gICAgfSk7XG4gIH1cblxuICBpZiAodGhpcy5pc0VuY29kaW5nRW5hYmxlZF8oRW5jb2RpbmdUeXBlLkRFQ0lNQUwpKSB7XG4gICAgbGl2ZUZpZWxkcy5wdXNoKHtcbiAgICAgIGlucHV0RWxlbWVudDogdGhpcy51aV9bRW5jb2RpbmdUeXBlLkRFQ0lNQUxdLm1lc3NhZ2UsXG4gICAgICBuZXdWYWx1ZTogYWxpZ25EZWNpbWFsKGJpbmFyeVRvRGVjaW1hbCh0aGlzLm1lc3NhZ2UsIGNodW5rU2l6ZSkpLFxuICAgICAgd2F0ZXJtYXJrOiBuZXRzaW1Nc2cuZGVjaW1hbCgpXG4gICAgfSk7XG4gIH1cblxuICBpZiAodGhpcy5pc0VuY29kaW5nRW5hYmxlZF8oRW5jb2RpbmdUeXBlLkFTQ0lJKSkge1xuICAgIGxpdmVGaWVsZHMucHVzaCh7XG4gICAgICBpbnB1dEVsZW1lbnQ6IHRoaXMudWlfW0VuY29kaW5nVHlwZS5BU0NJSV0ubWVzc2FnZSxcbiAgICAgIG5ld1ZhbHVlOiBiaW5hcnlUb0FzY2lpKHRoaXMubWVzc2FnZSwgY2h1bmtTaXplKSxcbiAgICAgIHdhdGVybWFyazogbmV0c2ltTXNnLmFzY2lpKClcbiAgICB9KTtcbiAgfVxuXG4gIGxpdmVGaWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICBpZiAoZmllbGQuaW5wdXRFbGVtZW50WzBdICE9PSBza2lwRWxlbWVudCkge1xuICAgICAgaWYgKGZpZWxkLndhdGVybWFyayAmJiBmaWVsZC5uZXdWYWx1ZSA9PT0gJycpIHtcbiAgICAgICAgZmllbGQuaW5wdXRFbGVtZW50LnZhbChmaWVsZC53YXRlcm1hcmspO1xuICAgICAgICBmaWVsZC5pbnB1dEVsZW1lbnQuYWRkQ2xhc3MoJ3dhdGVybWFyaycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmllbGQuaW5wdXRFbGVtZW50LnZhbChmaWVsZC5uZXdWYWx1ZSk7XG4gICAgICAgIGZpZWxkLmlucHV0RWxlbWVudC5yZW1vdmVDbGFzcygnd2F0ZXJtYXJrJyk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICB0aGlzLnVwZGF0ZUJpdENvdW50ZXIoKTtcbiAgdGhpcy5jb250ZW50Q2hhbmdlQ2FsbGJhY2tfKCk7XG59O1xuXG4vKipcbiAqIElmIHRoZXJlJ3Mgb25seSBvbmUgcGFja2V0LCBhcHBsaWVzIFwiZGlzcGxheTogbm9uZVwiIHRvIHRoZSBidXR0b24gc28gdGhlXG4gKiBsYXN0IHBhY2tldCBjYW4ndCBiZSByZW1vdmVkLiAgT3RoZXJ3aXNlLCBjbGVhcnMgdGhlIENTUyBwcm9wZXJ0eSBvdmVycmlkZS5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVBhY2tldEVkaXRvci5wcm90b3R5cGUudXBkYXRlUmVtb3ZlQnV0dG9uVmlzaWJpbGl0eV8gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVtb3ZlUGFja2V0QnV0dG9uXy5jc3MoJ2Rpc3BsYXknLCAodGhpcy5wYWNrZXRDb3VudCA9PT0gMSA/ICdub25lJyA6ICcnKSk7XG59O1xuXG4vKipcbiAqIFByb2R1Y2VzIGEgc2luZ2xlIGJpbmFyeSBzdHJpbmcgaW4gdGhlIGN1cnJlbnQgcGFja2V0IGZvcm1hdCwgYmFzZWRcbiAqIG9uIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSB3aWRnZXQgKGNvbnRlbnQgb2YgaXRzIGludGVybmFsIGZpZWxkcykuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAtIGJpbmFyeSByZXByZXNlbnRhdGlvbiBvZiBwYWNrZXRcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVBhY2tldEVkaXRvci5wcm90b3R5cGUuZ2V0UGFja2V0QmluYXJ5ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbGV2ZWwgPSBOZXRTaW1HbG9iYWxzLmdldExldmVsQ29uZmlnKCk7XG4gIHZhciBlbmNvZGVyID0gbmV3IFBhY2tldC5FbmNvZGVyKGxldmVsLmFkZHJlc3NGb3JtYXQsXG4gICAgICBsZXZlbC5wYWNrZXRDb3VudEJpdFdpZHRoLCB0aGlzLnBhY2tldFNwZWNfKTtcbiAgcmV0dXJuIGVuY29kZXIuY29uY2F0ZW5hdGVCaW5hcnkoXG4gICAgICBlbmNvZGVyLm1ha2VCaW5hcnlIZWFkZXJzKHtcbiAgICAgICAgdG9BZGRyZXNzOiB0aGlzLnRvQWRkcmVzcyxcbiAgICAgICAgZnJvbUFkZHJlc3M6IHRoaXMuZnJvbUFkZHJlc3MsXG4gICAgICAgIHBhY2tldEluZGV4OiB0aGlzLnBhY2tldEluZGV4LFxuICAgICAgICBwYWNrZXRDb3VudDogdGhpcy5wYWNrZXRDb3VudFxuICAgICAgfSksXG4gICAgICB0aGlzLm1lc3NhZ2UpO1xufTtcblxuLyoqXG4gKiBTZXRzIGVkaXRvciBmaWVsZHMgZnJvbSBhIGNvbXBsZXRlIHBhY2tldCBiaW5hcnksIGFjY29yZGluZyB0b1xuICogdGhlIGNvbmZpZ3VyZWQgaGVhZGVyIHNwZWNpZmljYXRpb24uXG4gKiBAcGFyYW0ge3N0cmluZ30gcmF3QmluYXJ5XG4gKi9cbk5ldFNpbVBhY2tldEVkaXRvci5wcm90b3R5cGUuc2V0UGFja2V0QmluYXJ5ID0gZnVuY3Rpb24gKHJhd0JpbmFyeSkge1xuICB2YXIgcGFja2V0ID0gbmV3IFBhY2tldCh0aGlzLnBhY2tldFNwZWNfLCByYXdCaW5hcnkpO1xuXG4gIGlmICh0aGlzLnNwZWNDb250YWluc0hlYWRlcl8oUGFja2V0LkhlYWRlclR5cGUuVE9fQUREUkVTUykpIHtcbiAgICB0aGlzLnRvQWRkcmVzcyA9IHBhY2tldC5nZXRIZWFkZXJBc0FkZHJlc3NTdHJpbmcoUGFja2V0LkhlYWRlclR5cGUuVE9fQUREUkVTUyk7XG4gIH1cblxuICBpZiAodGhpcy5zcGVjQ29udGFpbnNIZWFkZXJfKFBhY2tldC5IZWFkZXJUeXBlLkZST01fQUREUkVTUykpIHtcbiAgICB0aGlzLmZyb21BZGRyZXNzID0gcGFja2V0LmdldEhlYWRlckFzQWRkcmVzc1N0cmluZyhQYWNrZXQuSGVhZGVyVHlwZS5GUk9NX0FERFJFU1MpO1xuICB9XG5cbiAgaWYgKHRoaXMuc3BlY0NvbnRhaW5zSGVhZGVyXyhQYWNrZXQuSGVhZGVyVHlwZS5QQUNLRVRfSU5ERVgpKSB7XG4gICAgdGhpcy5wYWNrZXRJbmRleCA9IHBhY2tldC5nZXRIZWFkZXJBc0ludChQYWNrZXQuSGVhZGVyVHlwZS5QQUNLRVRfSU5ERVgpO1xuICB9XG5cbiAgaWYgKHRoaXMuc3BlY0NvbnRhaW5zSGVhZGVyXyhQYWNrZXQuSGVhZGVyVHlwZS5QQUNLRVRfQ09VTlQpKSB7XG4gICAgdGhpcy5wYWNrZXRDb3VudCA9IHBhY2tldC5nZXRIZWFkZXJBc0ludChQYWNrZXQuSGVhZGVyVHlwZS5QQUNLRVRfQ09VTlQpO1xuICB9XG5cbiAgdGhpcy5tZXNzYWdlID0gcGFja2V0LmdldEJvZHlBc0JpbmFyeSgpO1xuXG4gIC8vIFJlLXJlbmRlciBhbGwgZW5jb2RpbmdzXG4gIHRoaXMudXBkYXRlRmllbGRzXygpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1BhY2tldC5IZWFkZXJUeXBlfSBoZWFkZXJLZXlcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUGFja2V0RWRpdG9yLnByb3RvdHlwZS5zcGVjQ29udGFpbnNIZWFkZXJfID0gZnVuY3Rpb24gKGhlYWRlcktleSkge1xuICByZXR1cm4gdGhpcy5wYWNrZXRTcGVjXy5zb21lKGZ1bmN0aW9uIChoZWFkZXJTcGVjKSB7XG4gICAgcmV0dXJuIGhlYWRlclNwZWMgPT09IGhlYWRlcktleTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEdldCBqdXN0IHRoZSBmaXJzdCBiaXQgb2YgdGhlIHBhY2tldCBiaW5hcnkgaWYgaXQgZXhpc3RzLCBmb3JcbiAqIHNpbmdsZS1iaXQgc2VuZGluZyBtb2RlLlxuICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IGEgc2luZ2xlIGJpdCBpZiBpdCBleGlzdHMsIGFzIFwiMFwiIG9yIFwiMVwiLFxuICogb3IgdW5kZWZpbmVkIGlmIG5vbmUgZG9lcy5cbiAqL1xuTmV0U2ltUGFja2V0RWRpdG9yLnByb3RvdHlwZS5nZXRGaXJzdEJpdCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGJpbmFyeSA9IHRoaXMuZ2V0UGFja2V0QmluYXJ5KCk7XG4gIHJldHVybiBiaW5hcnkubGVuZ3RoID4gMCA/IGJpbmFyeS5zdWJzdHIoMCwgMSkgOiB1bmRlZmluZWQ7XG59O1xuXG4vKiogQHBhcmFtIHtudW1iZXJ9IGZyb21BZGRyZXNzICovXG5OZXRTaW1QYWNrZXRFZGl0b3IucHJvdG90eXBlLnNldEZyb21BZGRyZXNzID0gZnVuY3Rpb24gKGZyb21BZGRyZXNzKSB7XG4gIHRoaXMuZnJvbUFkZHJlc3MgPSBmcm9tQWRkcmVzcztcbiAgdGhpcy51cGRhdGVGaWVsZHNfKCk7XG59O1xuXG4vKiogQHBhcmFtIHtudW1iZXJ9IHBhY2tldEluZGV4ICovXG5OZXRTaW1QYWNrZXRFZGl0b3IucHJvdG90eXBlLnNldFBhY2tldEluZGV4ID0gZnVuY3Rpb24gKHBhY2tldEluZGV4KSB7XG4gIHRoaXMucGFja2V0SW5kZXggPSBwYWNrZXRJbmRleDtcbiAgdGhpcy51cGRhdGVGaWVsZHNfKCk7XG59O1xuXG4vKiogQHBhcmFtIHtudW1iZXJ9IHBhY2tldENvdW50ICovXG5OZXRTaW1QYWNrZXRFZGl0b3IucHJvdG90eXBlLnNldFBhY2tldENvdW50ID0gZnVuY3Rpb24gKHBhY2tldENvdW50KSB7XG4gIHRoaXMucGFja2V0Q291bnQgPSBwYWNrZXRDb3VudDtcbiAgdGhpcy51cGRhdGVGaWVsZHNfKCk7XG4gIHRoaXMudXBkYXRlUmVtb3ZlQnV0dG9uVmlzaWJpbGl0eV8oKTtcbn07XG5cbi8qKiBAcGFyYW0ge251bWJlcn0gbWF4UGFja2V0U2l6ZSAqL1xuTmV0U2ltUGFja2V0RWRpdG9yLnByb3RvdHlwZS5zZXRNYXhQYWNrZXRTaXplID0gZnVuY3Rpb24gKG1heFBhY2tldFNpemUpIHtcbiAgdGhpcy5tYXhQYWNrZXRTaXplXyA9IG1heFBhY2tldFNpemU7XG4gIHRoaXMudXBkYXRlQml0Q291bnRlcigpO1xufTtcblxuLyoqXG4gKiBTaG93IG9yIGhpZGUgcGFydHMgb2YgdGhlIHNlbmQgVUkgYmFzZWQgb24gdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBlbmNvZGluZ1xuICogbW9kZS5cbiAqIEBwYXJhbSB7RW5jb2RpbmdUeXBlW119IG5ld0VuY29kaW5nc1xuICovXG5OZXRTaW1QYWNrZXRFZGl0b3IucHJvdG90eXBlLnNldEVuY29kaW5ncyA9IGZ1bmN0aW9uIChuZXdFbmNvZGluZ3MpIHtcbiAgdGhpcy5lbmFibGVkRW5jb2RpbmdzSGFzaF8gPSBOZXRTaW1FbmNvZGluZ0NvbnRyb2wuZW5jb2RpbmdzQXNIYXNoKG5ld0VuY29kaW5ncyk7XG4gIE5ldFNpbUVuY29kaW5nQ29udHJvbC5oaWRlUm93c0J5RW5jb2RpbmcodGhpcy5yb290RGl2XywgbmV3RW5jb2RpbmdzKTtcbiAgdGhpcy5yZW5kZXIoKTtcbn07XG5cbi8qKlxuICogSGVscGVyIG1ldGhvZCB0aGF0IGNoZWNrcyB0aGlzLmVuYWJsZWRFbmNvZGluZ3NIYXNoXyB0byBzZWUgaWYgdGhlIGdpdmVuXG4gKiBlbmNvZGluZyBpcyBlbmFibGVkXG4gKiBAcGFyYW0ge0VuY29kaW5nVHlwZX0gcXVlcnlFbmNvZGluZ1xuICogQHJldHVybnMge2Jvb2xlYW59IHdoZXRoZXIgb3Igbm90IHRoZSBnaXZlbiBlbmNvZGluZyBpcyBlbmFibGVkXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1QYWNrZXRFZGl0b3IucHJvdG90eXBlLmlzRW5jb2RpbmdFbmFibGVkXyA9IGZ1bmN0aW9uIChxdWVyeUVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmVuYWJsZWRFbmNvZGluZ3NIYXNoX1txdWVyeUVuY29kaW5nXSA9PT0gdHJ1ZTtcbn07XG5cbi8qKlxuICogQ2hhbmdlIGhvdyBkYXRhIGlzIGludGVycHJldGVkIGFuZCBmb3JtYXR0ZWQgYnkgdGhpcyBjb21wb25lbnQsIHRyaWdnZXJpbmdcbiAqIGFuIHVwZGF0ZSBvZiBhbGwgaW5wdXQgZmllbGRzLlxuICogQHBhcmFtIHtudW1iZXJ9IG5ld0NodW5rU2l6ZVxuICovXG5OZXRTaW1QYWNrZXRFZGl0b3IucHJvdG90eXBlLnNldENodW5rU2l6ZSA9IGZ1bmN0aW9uIChuZXdDaHVua1NpemUpIHtcbiAgdGhpcy5jdXJyZW50Q2h1bmtTaXplXyA9IG5ld0NodW5rU2l6ZTtcbiAgdGhpcy51cGRhdGVGaWVsZHNfKCk7XG59O1xuXG4vKipcbiAqIENoYW5nZSBsb2NhbCBkZXZpY2UgYml0cmF0ZSB3aGljaCBjaGFuZ2VzIHNlbmQgYW5pbWF0aW9uIHNwZWVkLlxuICogQHBhcmFtIHtudW1iZXJ9IG5ld0JpdFJhdGUgaW4gYml0cyBwZXIgc2Vjb25kXG4gKi9cbk5ldFNpbVBhY2tldEVkaXRvci5wcm90b3R5cGUuc2V0Qml0UmF0ZSA9IGZ1bmN0aW9uIChuZXdCaXRSYXRlKSB7XG4gIHRoaXMuYml0UmF0ZV8gPSBuZXdCaXRSYXRlO1xufTtcblxuLyoqXG4gKiBVcGRhdGUgdGhlIHZpc3VhbCBzdGF0ZSBvZiB0aGUgYml0IGNvdW50ZXIgdG8gcmVmbGVjdCB0aGUgY3VycmVudFxuICogbWVzc2FnZSBiaW5hcnkgbGVuZ3RoIGFuZCBtYXhpbXVtIHBhY2tldCBzaXplLlxuICovXG5OZXRTaW1QYWNrZXRFZGl0b3IucHJvdG90eXBlLnVwZGF0ZUJpdENvdW50ZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzaXplID0gdGhpcy5nZXRQYWNrZXRCaW5hcnkoKS5sZW5ndGg7XG4gIHZhciBtYXhTaXplID0gdGhpcy5tYXhQYWNrZXRTaXplXztcbiAgdGhpcy5iaXRDb3VudGVyXy5odG1sKG5ldHNpbU1zZy5iaXRDb3VudGVyKHtcbiAgICB4OiBzaXplLFxuICAgIHk6IG1heFNpemVcbiAgfSkpO1xuXG4gIHRoaXMuYml0Q291bnRlcl8udG9nZ2xlQ2xhc3MoJ292ZXJzaXplZCcsIHNpemUgPiB0aGlzLm1heFBhY2tldFNpemVfKTtcbn07XG5cbi8qKlxuICogSGFuZGxlciBmb3IgdGhlIFwiUmVtb3ZlIFBhY2tldFwiIGJ1dHRvbi4gQ2FsbHMgaGFuZGxlciBwcm92aWRlZCBieVxuICogcGFyZW50LCBwYXNzaW5nIHNlbGYsIHNvIHRoYXQgcGFyZW50IGNhbiByZW1vdmUgdGhpcyBwYWNrZXQuXG4gKiBAcGFyYW0ge0V2ZW50fSBqUXVlcnlFdmVudFxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUGFja2V0RWRpdG9yLnByb3RvdHlwZS5vblJlbW92ZVBhY2tldEJ1dHRvbkNsaWNrXyA9IGZ1bmN0aW9uIChqUXVlcnlFdmVudCkge1xuICB2YXIgdGhpc0J1dHRvbiA9ICQoalF1ZXJ5RXZlbnQudGFyZ2V0KTtcbiAgLy8gV2UgYWxzbyBjaGVjayBwYXJlbnQgZWxlbWVudHMgaGVyZSwgYmVjYXVzZSB0aGlzIGJ1dHRvbiB1c2VzIGEgZm9udC1hd2Vzb21lXG4gIC8vIGdseXBoIHRoYXQgY2FuIHJlY2VpdmUgdGhlIGV2ZW50IGluc3RlYWQgb2YgdGhlIGFjdHVhbCBidXR0b24uXG4gIGlmICh0aGlzQnV0dG9uLmlzKCdbZGlzYWJsZWRdJykgfHwgdGhpc0J1dHRvbi5wYXJlbnRzKCkuaXMoJ1tkaXNhYmxlZF0nKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMucmVtb3ZlUGFja2V0Q2FsbGJhY2tfKHRoaXMpO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgdGhlIGZpcnN0IGJpdCBvZiB0aGUgcGFja2V0IGJpbmFyeSwgdXNlZCB3aGVuIHNlbmRpbmcgb25lIGJpdFxuICogYXQgYSB0aW1lLlxuICovXG5OZXRTaW1QYWNrZXRFZGl0b3IucHJvdG90eXBlLmNvbnN1bWVGaXJzdEJpdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXRQYWNrZXRCaW5hcnkodGhpcy5nZXRQYWNrZXRCaW5hcnkoKS5zdWJzdHIoMSkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB0ID0gZnVuY3Rpb24gYW5vbnltb3VzKGxvY2FscywgZmlsdGVycywgZXNjYXBlXG4vKiovKSB7XG5lc2NhcGUgPSBlc2NhcGUgfHwgZnVuY3Rpb24gKGh0bWwpe1xuICByZXR1cm4gU3RyaW5nKGh0bWwpXG4gICAgLnJlcGxhY2UoLyYoPyFcXHcrOykvZywgJyZhbXA7JylcbiAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKVxuICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG59O1xudmFyIGJ1ZiA9IFtdO1xud2l0aCAobG9jYWxzIHx8IHt9KSB7IChmdW5jdGlvbigpeyBcbiBidWYucHVzaCgnJyk7MTtcbiAgdmFyIGkxOG4gPSByZXF1aXJlKCcuL2xvY2FsZScpO1xuICB2YXIgTmV0U2ltQ29uc3RhbnRzID0gcmVxdWlyZSgnLi9OZXRTaW1Db25zdGFudHMnKTtcbiAgdmFyIE5ldFNpbVV0aWxzID0gcmVxdWlyZSgnLi9OZXRTaW1VdGlscycpO1xuICB2YXIgUGFja2V0ID0gcmVxdWlyZSgnLi9QYWNrZXQnKTtcblxuICB2YXIgRW5jb2RpbmdUeXBlID0gTmV0U2ltQ29uc3RhbnRzLkVuY29kaW5nVHlwZTtcbiAgdmFyIE1lc3NhZ2VHcmFudWxhcml0eSA9IE5ldFNpbUNvbnN0YW50cy5NZXNzYWdlR3JhbnVsYXJpdHk7XG4gIHZhciBQYWNrZXRVSUNvbHVtblR5cGUgPSBOZXRTaW1Db25zdGFudHMuUGFja2V0VUlDb2x1bW5UeXBlO1xuXG4gIHZhciBnZXRFbmNvZGluZ0xhYmVsID0gTmV0U2ltVXRpbHMuZ2V0RW5jb2RpbmdMYWJlbDtcbiAgdmFyIGZvckVhY2hFbnVtVmFsdWUgPSBOZXRTaW1VdGlscy5mb3JFYWNoRW51bVZhbHVlO1xuXG4gIC8qKlxuICAqIEBuYW1lIGVuYWJsZWRFbmNvZGluZ3NIYXNoXG4gICogQHR5cGUge09iamVjdH1cbiAgKi9cblxuICBmdW5jdGlvbiBpc0VuY29kaW5nRW5hYmxlZChxdWVyeUVuY29kaW5nKSB7XG4gICAgcmV0dXJuIGVuYWJsZWRFbmNvZGluZ3NIYXNoW3F1ZXJ5RW5jb2RpbmddID09PSB0cnVlO1xuICB9XG5cbiAgLyoqIEB0eXBlIHtQYWNrZXQuSGVhZGVyVHlwZVtdfSAqL1xuICB2YXIgaGVhZGVyRmllbGRzID0gcGFja2V0U3BlYztcblxuICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gIHZhciBzaG93VG9BZGRyZXNzID0gaGVhZGVyRmllbGRzLmluZGV4T2YoUGFja2V0LkhlYWRlclR5cGUuVE9fQUREUkVTUykgPiAtMTtcblxuICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gIHZhciBzaG93RnJvbUFkZHJlc3MgPSBoZWFkZXJGaWVsZHMuaW5kZXhPZihQYWNrZXQuSGVhZGVyVHlwZS5GUk9NX0FERFJFU1MpID4gLTE7XG5cbiAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICB2YXIgc2hvd1BhY2tldEluZm8gPSBoZWFkZXJGaWVsZHMuaW5kZXhPZihQYWNrZXQuSGVhZGVyVHlwZS5QQUNLRVRfSU5ERVgpID4gLTEgJiZcbiAgICAgIGhlYWRlckZpZWxkcy5pbmRleE9mKFBhY2tldC5IZWFkZXJUeXBlLlBBQ0tFVF9DT1VOVCkgPiAtMTtcblxuICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gIHZhciB1c2VQYWNrZXRHcmFudWxhcml0eSA9IChtZXNzYWdlR3JhbnVsYXJpdHkgPT09IE1lc3NhZ2VHcmFudWxhcml0eS5QQUNLRVRTKTtcblxuICAvKipcbiAgICogV3JpdGUgdGhlIHRhYmxlIGhlYWRlciB0byB0aGUgcGFnZSwgd2l0aCB0aGUgYXBwcm9wcmlhdGUgcGFja2V0LWhlYWRlciBjb2x1bW5zIGVuYWJsZWQuXG4gICAqL1xuICBmdW5jdGlvbiB0YWJsZUhlYWRlcigpIHtcbiAgICA7IGJ1Zi5wdXNoKCdcXG4gICAgICA8dGhlYWQ+XFxuICAgICAgICA8dHI+XFxuICAgICAgICAgIDx0aCBub3dyYXAgY2xhc3M9XCInLCBlc2NhcGUoKDQ2LCAgUGFja2V0VUlDb2x1bW5UeXBlLkVOQ09ESU5HX0xBQkVMICkpLCAnXCI+PC90aD5cXG4gICAgICAgICAgJyk7NDc7IGlmIChzaG93VG9BZGRyZXNzKSB7IDsgYnVmLnB1c2goJ1xcbiAgICAgICAgICA8dGggbm93cmFwIGNsYXNzPVwiJywgZXNjYXBlKCg0OCwgIFBhY2tldFVJQ29sdW1uVHlwZS5UT19BRERSRVNTICkpLCAnXCI+JywgZXNjYXBlKCg0OCwgIGkxOG4udG8oKSApKSwgJzwvdGg+XFxuICAgICAgICAgICcpOzQ5OyB9IDsgYnVmLnB1c2goJ1xcbiAgICAgICAgICAnKTs1MDsgaWYgKHNob3dGcm9tQWRkcmVzcykgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgICAgPHRoIG5vd3JhcCBjbGFzcz1cIicsIGVzY2FwZSgoNTEsICBQYWNrZXRVSUNvbHVtblR5cGUuRlJPTV9BRERSRVNTICkpLCAnXCI+JywgZXNjYXBlKCg1MSwgIGkxOG4uZnJvbSgpICkpLCAnPC90aD5cXG4gICAgICAgICAgJyk7NTI7IH0gOyBidWYucHVzaCgnXFxuICAgICAgICAgICcpOzUzOyBpZiAoc2hvd1BhY2tldEluZm8pIHsgOyBidWYucHVzaCgnXFxuICAgICAgICAgIDx0aCBub3dyYXAgY2xhc3M9XCInLCBlc2NhcGUoKDU0LCAgUGFja2V0VUlDb2x1bW5UeXBlLlBBQ0tFVF9JTkZPICkpLCAnXCI+JywgZXNjYXBlKCg1NCwgIGkxOG4ucGFja2V0KCkgKSksICc8L3RoPlxcbiAgICAgICAgICAnKTs1NTsgfSA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgICAgPHRoIGNsYXNzPVwiJywgZXNjYXBlKCg1NiwgIFBhY2tldFVJQ29sdW1uVHlwZS5NRVNTQUdFICkpLCAnXCI+XFxuICAgICAgICAgICAgJywgZXNjYXBlKCg1NywgIGkxOG4ubWVzc2FnZSgpICkpLCAnXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBhY2tldC1jb250cm9sc1wiPlxcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJuZXRzaW0tYnV0dG9uIHNlY29uZGFyeSByZW1vdmUtcGFja2V0LWJ1dHRvblwiIHRpdGxlPVwiJywgZXNjYXBlKCg1OSwgIGkxOG4ucmVtb3ZlUGFja2V0KCkgKSksICdcIj48aSBjbGFzcz1cImZhIGZhLXRpbWVzXCI+PC9pPjwvc3Bhbj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgPC90aD5cXG4gICAgICAgIDwvdHI+XFxuICAgICAgPC90aGVhZD5cXG4gICAgJyk7NjQ7XG4gIH1cblxuICAvKipcbiAgICogV3JpdGUgYSB0YWJsZSByb3cgdG8gdGhlIHBhZ2UgZm9yIHRoZSBnaXZlbiBkYXRhIGVuY29kaW5nLlxuICAgKiBAcGFyYW0ge0VuY29kaW5nVHlwZX0gZW5jb2RpbmdUeXBlXG4gICAqL1xuICBmdW5jdGlvbiBlZGl0b3JSb3coZW5jb2RpbmdUeXBlKSB7XG4gICAgOyBidWYucHVzaCgnXFxuICAgICAgPHRyIGNsYXNzPVwiJywgZXNjYXBlKCg3MywgIGVuY29kaW5nVHlwZSApKSwgJ1wiPlxcbiAgICAgICAgPHRoIG5vd3JhcCBjbGFzcz1cIicsIGVzY2FwZSgoNzQsICBQYWNrZXRVSUNvbHVtblR5cGUuRU5DT0RJTkdfTEFCRUwgKSksICdcIj4nLCBlc2NhcGUoKDc0LCAgZ2V0RW5jb2RpbmdMYWJlbChlbmNvZGluZ1R5cGUpICkpLCAnPC90aD5cXG4gICAgICAgICcpOzc1OyBpZiAoc2hvd1RvQWRkcmVzcykgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgIDx0ZCBub3dyYXAgY2xhc3M9XCInLCBlc2NhcGUoKDc2LCAgUGFja2V0VUlDb2x1bW5UeXBlLlRPX0FERFJFU1MgKSksICdcIj48aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cIicsIGVzY2FwZSgoNzYsICBQYWNrZXQuSGVhZGVyVHlwZS5UT19BRERSRVNTICkpLCAnXCIgLz48L3RkPlxcbiAgICAgICAgJyk7Nzc7IH0gOyBidWYucHVzaCgnXFxuICAgICAgICAnKTs3ODsgaWYgKHNob3dGcm9tQWRkcmVzcykgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgIDx0ZCBub3dyYXAgY2xhc3M9XCInLCBlc2NhcGUoKDc5LCAgUGFja2V0VUlDb2x1bW5UeXBlLkZST01fQUREUkVTUyApKSwgJ1wiPjxpbnB1dCB0eXBlPVwidGV4dFwiIHJlYWRvbmx5IGNsYXNzPVwiJywgZXNjYXBlKCg3OSwgIFBhY2tldC5IZWFkZXJUeXBlLkZST01fQUREUkVTUyApKSwgJ1wiIC8+PC90ZD5cXG4gICAgICAgICcpOzgwOyB9IDsgYnVmLnB1c2goJ1xcbiAgICAgICAgJyk7ODE7IGlmIChzaG93UGFja2V0SW5mbykgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgIDx0ZCBub3dyYXAgY2xhc3M9XCInLCBlc2NhcGUoKDgyLCAgUGFja2V0VUlDb2x1bW5UeXBlLlBBQ0tFVF9JTkZPICkpLCAnXCI+PGlucHV0IHR5cGU9XCJ0ZXh0XCIgcmVhZG9ubHkgY2xhc3M9XCInLCBlc2NhcGUoKDgyLCAgUGFja2V0LkhlYWRlclR5cGUuUEFDS0VUX0lOREVYICkpLCAnXCIgLz4nLCBlc2NhcGUoKDgyLCAgaTE4bi5fb2ZfKCkgKSksICc8aW5wdXQgdHlwZT1cInRleHRcIiByZWFkb25seSBjbGFzcz1cIicsIGVzY2FwZSgoODIsICBQYWNrZXQuSGVhZGVyVHlwZS5QQUNLRVRfQ09VTlQgKSksICdcIiAvPjwvdGQ+XFxuICAgICAgICAnKTs4MzsgfSA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgIDx0ZCBjbGFzcz1cIicsIGVzY2FwZSgoODQsICBQYWNrZXRVSUNvbHVtblR5cGUuTUVTU0FHRSApKSwgJ1wiPjxkaXY+PHRleHRhcmVhIGNsYXNzPVwibWVzc2FnZVwiPjwvdGV4dGFyZWE+PC9kaXY+PC90ZD5cXG4gICAgICA8L3RyPlxcbiAgICAnKTs4NjtcbiAgfVxuOyBidWYucHVzaCgnXFxuPHRhYmxlPlxcbiAgJyk7OTA7XG4gICAgLy8gT25seSB3cml0ZSB0aGUgaGVhZGVyIHJvdyBpZiB3ZSBhcmUgdXNpbmcgcGFja2V0c1xuICAgIGlmICh1c2VQYWNrZXRHcmFudWxhcml0eSkge1xuICAgICAgdGFibGVIZWFkZXIoKTtcbiAgICB9XG4gIDsgYnVmLnB1c2goJ1xcbiAgPHRib2R5PlxcbiAgICAnKTs5NztcbiAgICAgIC8vIFdyaXRlIGEgYm9keSByb3cgZm9yIGV2ZXJ5IHBhY2tldCBlbmNvZGluZzsgd2UgaGlkZSBzb21lIG9mIHRoZW0gcG9zdC1yZW5kZXIuXG4gICAgICBmb3JFYWNoRW51bVZhbHVlKEVuY29kaW5nVHlwZSwgZnVuY3Rpb24gKGVuY29kaW5nVHlwZSkge1xuICAgICAgICBpZiAoaXNFbmNvZGluZ0VuYWJsZWQoZW5jb2RpbmdUeXBlKSkge1xuICAgICAgICAgIGVkaXRvclJvdyhlbmNvZGluZ1R5cGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICA7IGJ1Zi5wdXNoKCdcXG4gIDwvdGJvZHk+XFxuPC90YWJsZT5cXG5cXG4nKTsxMDg7IGlmICh1c2VQYWNrZXRHcmFudWxhcml0eSkgeyA7IGJ1Zi5wdXNoKCdcXG4gIDxkaXYgY2xhc3M9XCJiaXQtY291bnRlclwiPjwvZGl2PlxcbicpOzExMDsgfSA7IGJ1Zi5wdXNoKCdcXG4nKTsgfSkoKTtcbn0gXG5yZXR1cm4gYnVmLmpvaW4oJycpO1xufTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGxvY2Fscykge1xuICAgIHJldHVybiB0KGxvY2FscywgcmVxdWlyZShcImVqc1wiKS5maWx0ZXJzKTtcbiAgfVxufSgpKTsiLCIvKipcbiAqIEBvdmVydmlldyBVSSBjb250cm9sbGVyIGZvciB0aGUgXCJNeSBEZXZpY2VcIiB0YWIgaW4gdGhlIGxlZnQgY29sdW1uLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIG1hcmt1cCA9IHJlcXVpcmUoJy4vTmV0U2ltTXlEZXZpY2VUYWIuaHRtbC5lanMnKTtcbnZhciBOZXRTaW1CaXRSYXRlQ29udHJvbCA9IHJlcXVpcmUoJy4vTmV0U2ltQml0UmF0ZUNvbnRyb2wnKTtcbnZhciBOZXRTaW1QdWxzZVJhdGVDb250cm9sID0gcmVxdWlyZSgnLi9OZXRTaW1QdWxzZVJhdGVDb250cm9sJyk7XG52YXIgTmV0U2ltQ2h1bmtTaXplQ29udHJvbCA9IHJlcXVpcmUoJy4vTmV0U2ltQ2h1bmtTaXplQ29udHJvbCcpO1xudmFyIE5ldFNpbUVuY29kaW5nQ29udHJvbCA9IHJlcXVpcmUoJy4vTmV0U2ltRW5jb2RpbmdDb250cm9sJyk7XG52YXIgTmV0U2ltTWV0cm9ub21lID0gcmVxdWlyZSgnLi9OZXRTaW1NZXRyb25vbWUnKTtcbnZhciBOZXRTaW1HbG9iYWxzID0gcmVxdWlyZSgnLi9OZXRTaW1HbG9iYWxzJyk7XG5cbi8qKlxuICogR2VuZXJhdG9yIGFuZCBjb250cm9sbGVyIGZvciBcIk15IERldmljZVwiIHRhYi5cbiAqIEBwYXJhbSB7alF1ZXJ5fSByb290RGl2XG4gKiBAcGFyYW0ge1J1bkxvb3B9IHJ1bkxvb3BcbiAqIEBwYXJhbSB7T2JqZWN0fSBjYWxsYmFja3NcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrcy5jaHVua1NpemVDaGFuZ2VDYWxsYmFja1xuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tzLmJpdFJhdGVDaGFuZ2VDYWxsYmFja1xuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tzLmVuY29kaW5nQ2hhbmdlQ2FsbGJhY2tcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgTmV0U2ltTXlEZXZpY2VUYWIgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyb290RGl2LCBydW5Mb29wLCBjYWxsYmFja3MpIHtcbiAgLyoqXG4gICAqIENvbXBvbmVudCByb290LCB3aGljaCB3ZSBmaWxsIHdoZW5ldmVyIHdlIGNhbGwgcmVuZGVyKClcbiAgICogQHR5cGUge2pRdWVyeX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucm9vdERpdl8gPSByb290RGl2O1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7UnVuTG9vcH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucnVuTG9vcF8gPSBydW5Mb29wO1xuXG4gIC8qKlxuICAgKiBGcmVxdWVuY3kgb2YgbWV0cm9ub21lIHB1bHNlcywgaW4gcHVsc2VzIHBlciBzZWNvbmRcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuYml0c1BlclNlY29uZF8gPSAxO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7ZnVuY3Rpb259XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmNodW5rU2l6ZVNsaWRlckNoYW5nZUNhbGxiYWNrXyA9IGNhbGxiYWNrcy5jaHVua1NpemVDaGFuZ2VDYWxsYmFjaztcblxuICAvKipcbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5iaXRSYXRlQ2hhbmdlQ2FsbGJhY2tfID0gY2FsbGJhY2tzLmJpdFJhdGVDaGFuZ2VDYWxsYmFjaztcblxuICAvKipcbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5lbmNvZGluZ0NoYW5nZUNhbGxiYWNrXyA9IGNhbGxiYWNrcy5lbmNvZGluZ0NoYW5nZUNhbGxiYWNrO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7TmV0U2ltTWV0cm9ub21lfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5tZXRyb25vbWVfID0gbnVsbDtcblxuICAvKipcbiAgICogQHR5cGUge05ldFNpbVB1bHNlUmF0ZUNvbnRyb2x9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnB1bHNlUmF0ZUNvbnRyb2xfID0gbnVsbDtcblxuICAvKipcbiAgICogQHR5cGUge05ldFNpbUJpdFJhdGVDb250cm9sfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5iaXRSYXRlQ29udHJvbF8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7TmV0U2ltQ2h1bmtTaXplQ29udHJvbH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuY2h1bmtTaXplQ29udHJvbF8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7TmV0U2ltRW5jb2RpbmdDb250cm9sfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5lbmNvZGluZ0NvbnRyb2xfID0gbnVsbDtcblxuICB0aGlzLnJlbmRlcigpO1xufTtcblxuLyoqXG4gKiBGaWxsIHRoZSByb290IGRpdiB3aXRoIG5ldyBlbGVtZW50cyByZWZsZWN0aW5nIHRoZSBjdXJyZW50IHN0YXRlXG4gKi9cbk5ldFNpbU15RGV2aWNlVGFiLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsZXZlbENvbmZpZyA9IE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKTtcblxuICB2YXIgcmVuZGVyZWRNYXJrdXAgPSAkKG1hcmt1cCh7XG4gICAgbGV2ZWw6IGxldmVsQ29uZmlnXG4gIH0pKTtcbiAgdGhpcy5yb290RGl2Xy5odG1sKHJlbmRlcmVkTWFya3VwKTtcblxuICBpZiAobGV2ZWxDb25maWcuc2hvd01ldHJvbm9tZSkge1xuICAgIHRoaXMubWV0cm9ub21lXyA9IG5ldyBOZXRTaW1NZXRyb25vbWUoXG4gICAgICAgIHRoaXMucm9vdERpdl8uZmluZCgnLm1ldHJvbm9tZScpLFxuICAgICAgICB0aGlzLnJ1bkxvb3BfKTtcbiAgICB0aGlzLm1ldHJvbm9tZV8uc2V0RnJlcXVlbmN5KHRoaXMuYml0c1BlclNlY29uZF8pO1xuICB9XG5cbiAgaWYgKGxldmVsQ29uZmlnLnNob3dQdWxzZVJhdGVTbGlkZXIpIHtcbiAgICB0aGlzLnB1bHNlUmF0ZUNvbnRyb2xfID0gbmV3IE5ldFNpbVB1bHNlUmF0ZUNvbnRyb2woXG4gICAgICAgIHRoaXMucm9vdERpdl8uZmluZCgnLnB1bHNlLXJhdGUnKSxcbiAgICAgICAgMSAvIHRoaXMuYml0c1BlclNlY29uZF8sXG4gICAgICAgIGZ1bmN0aW9uIChzZWNvbmRzUGVyQml0KSB7XG4gICAgICAgICAgdGhpcy5iaXRSYXRlQ2hhbmdlQ2FsbGJhY2tfKDEgLyBzZWNvbmRzUGVyQml0KTtcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIGlmIChsZXZlbENvbmZpZy5zaG93Qml0UmF0ZUNvbnRyb2wpIHtcbiAgICB0aGlzLmJpdFJhdGVDb250cm9sXyA9IG5ldyBOZXRTaW1CaXRSYXRlQ29udHJvbChcbiAgICAgICAgdGhpcy5yb290RGl2Xy5maW5kKCcuYml0cmF0ZScpLFxuICAgICAgICB0aGlzLmJpdHNQZXJTZWNvbmRfLFxuICAgICAgICB0aGlzLmJpdFJhdGVDaGFuZ2VDYWxsYmFja18pO1xuICAgIGlmIChsZXZlbENvbmZpZy5sb2NrQml0UmF0ZUNvbnRyb2wpIHtcbiAgICAgIHRoaXMuYml0UmF0ZUNvbnRyb2xfLmRpc2FibGUoKTtcbiAgICB9XG4gIH1cblxuICBpZiAobGV2ZWxDb25maWcuc2hvd0NodW5rU2l6ZUNvbnRyb2wpIHtcbiAgICB0aGlzLmNodW5rU2l6ZUNvbnRyb2xfID0gbmV3IE5ldFNpbUNodW5rU2l6ZUNvbnRyb2woXG4gICAgICAgIHRoaXMucm9vdERpdl8uZmluZCgnLmNodW5rLXNpemUnKSxcbiAgICAgICAgdGhpcy5jaHVua1NpemVTbGlkZXJDaGFuZ2VDYWxsYmFja18pO1xuICAgIGlmIChsZXZlbENvbmZpZy5sb2NrQ2h1bmtTaXplQ29udHJvbCkge1xuICAgICAgdGhpcy5jaHVua1NpemVDb250cm9sXy5kaXNhYmxlKCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGxldmVsQ29uZmlnLnNob3dFbmNvZGluZ0NvbnRyb2xzLmxlbmd0aCA+IDApIHtcbiAgICB0aGlzLmVuY29kaW5nQ29udHJvbF8gPSBuZXcgTmV0U2ltRW5jb2RpbmdDb250cm9sKFxuICAgICAgICB0aGlzLnJvb3REaXZfLmZpbmQoJy5lbmNvZGluZycpLFxuICAgICAgICBsZXZlbENvbmZpZyxcbiAgICAgICAgdGhpcy5lbmNvZGluZ0NoYW5nZUNhbGxiYWNrXyk7XG4gIH1cbn07XG5cbi8qKlxuICogSGFuZGxlciBmb3IgY2hhbmdpbmcgdGhlIHBvc2l0aW9uIG9mIHRoZSBwdWxzZS1yYXRlIHNsaWRlclxuICogQHBhcmFtIHtudW1iZXJ9IHNlY29uZHNQZXJQdWxzZSBpbiBzZWNvbmRzIHBlciBwdWxzZVxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltTXlEZXZpY2VUYWIucHJvdG90eXBlLnB1bHNlUmF0ZVNsaWRlckNoYW5nZV8gPSBmdW5jdGlvbiAoc2Vjb25kc1BlclB1bHNlKSB7XG4gIHRoaXMuc2V0Qml0UmF0ZSgxIC8gc2Vjb25kc1BlclB1bHNlKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdHNQZXJTZWNvbmRcbiAqL1xuTmV0U2ltTXlEZXZpY2VUYWIucHJvdG90eXBlLnNldEJpdFJhdGUgPSBmdW5jdGlvbiAoYml0c1BlclNlY29uZCkge1xuICB0aGlzLmJpdHNQZXJTZWNvbmRfID0gYml0c1BlclNlY29uZDtcblxuICBpZiAodGhpcy5tZXRyb25vbWVfKSB7XG4gICAgdGhpcy5tZXRyb25vbWVfLnNldEZyZXF1ZW5jeShiaXRzUGVyU2Vjb25kKTtcbiAgfVxuXG4gIGlmICh0aGlzLmJpdFJhdGVDb250cm9sXykge1xuICAgIHRoaXMuYml0UmF0ZUNvbnRyb2xfLnNldFZhbHVlKGJpdHNQZXJTZWNvbmQpO1xuICB9XG5cbiAgaWYgKHRoaXMucHVsc2VSYXRlQ29udHJvbF8gJiYgYml0c1BlclNlY29uZCA8IEluZmluaXR5KSB7XG4gICAgdGhpcy5wdWxzZVJhdGVDb250cm9sXy5zZXRWYWx1ZSgxIC8gYml0c1BlclNlY29uZCk7XG4gIH1cbn07XG5cbi8qKlxuICogVXBkYXRlIHRoZSBzbGlkZXIgYW5kIGl0cyBsYWJlbCB0byBkaXNwbGF5IHRoZSBwcm92aWRlZCB2YWx1ZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBuZXdDaHVua1NpemVcbiAqL1xuTmV0U2ltTXlEZXZpY2VUYWIucHJvdG90eXBlLnNldENodW5rU2l6ZSA9IGZ1bmN0aW9uIChuZXdDaHVua1NpemUpIHtcbiAgaWYgKHRoaXMuY2h1bmtTaXplQ29udHJvbF8pIHtcbiAgICB0aGlzLmNodW5rU2l6ZUNvbnRyb2xfLnNldFZhbHVlKG5ld0NodW5rU2l6ZSk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtFbmNvZGluZ1R5cGVbXX0gbmV3RW5jb2RpbmdzXG4gKi9cbk5ldFNpbU15RGV2aWNlVGFiLnByb3RvdHlwZS5zZXRFbmNvZGluZ3MgPSBmdW5jdGlvbiAobmV3RW5jb2RpbmdzKSB7XG4gIGlmICh0aGlzLmVuY29kaW5nQ29udHJvbF8pIHtcbiAgICB0aGlzLmVuY29kaW5nQ29udHJvbF8uc2V0RW5jb2RpbmdzKG5ld0VuY29kaW5ncyk7XG4gIH1cbn07XG4iLCIvKipcbiAqIEBvdmVydmlldyBVSSBzbGlkZXIgZm9yIGNoYW5naW5nIHRoZSBwdWxzZSByYXRlIChiaXRyYXRlKSBvZiB0aGUgbG9jYWwgZGV2aWNlLlxuICogICAgICAgICAgIERpZmZlcnMgZnJvbSB0aGUgYml0cmF0ZSBzbGlkZXIgaW4gaXRzIHNjYWxlIGFuZCB1bml0cy5cbiAqIEBzZWUgTmV0U2ltQml0UmF0ZUNvbnRyb2xcbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbi8vIFV0aWxzIHJlcXVpcmVkIG9ubHkgZm9yIEZ1bmN0aW9uLnByb3RvdHlwZS5pbmhlcml0cygpXG5yZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGkxOG4gPSByZXF1aXJlKCcuL2xvY2FsZScpO1xudmFyIE5ldFNpbVNsaWRlciA9IHJlcXVpcmUoJy4vTmV0U2ltU2xpZGVyJyk7XG5cbi8qKlxuICogR2VuZXJhdG9yIGFuZCBjb250cm9sbGVyIGZvciBwYWNrZXQgc2l6ZSBzbGlkZXIvc2VsZWN0b3JcbiAqIEBwYXJhbSB7alF1ZXJ5fSByb290RGl2XG4gKiBAcGFyYW0ge251bWJlcn0gaW5pdGlhbFZhbHVlIC0gaW4gc2Vjb25kcyBwZXIgcHVsc2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHNsaWRlckNoYW5nZUNhbGxiYWNrXG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIE5ldFNpbVB1bHNlUmF0ZUNvbnRyb2wgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyb290RGl2LCBpbml0aWFsVmFsdWUsXG4gICAgc2xpZGVyQ2hhbmdlQ2FsbGJhY2spIHtcbiAgTmV0U2ltU2xpZGVyLkRlY2ltYWxQcmVjaXNpb25TbGlkZXIuY2FsbCh0aGlzLCByb290RGl2LCB7XG4gICAgb25DaGFuZ2U6IHNsaWRlckNoYW5nZUNhbGxiYWNrLFxuICAgIHZhbHVlOiBpbml0aWFsVmFsdWUsXG4gICAgbWluOiAwLjUsXG4gICAgbWF4OiA1LjAsXG4gICAgc3RlcDogLTAuMjVcbiAgfSk7XG5cbiAgLy8gQXV0by1yZW5kZXIsIHVubGlrZSBvdXIgYmFzZSBjbGFzc1xuICB0aGlzLnJlbmRlcigpO1xufTtcbk5ldFNpbVB1bHNlUmF0ZUNvbnRyb2wuaW5oZXJpdHMoTmV0U2ltU2xpZGVyLkRlY2ltYWxQcmVjaXNpb25TbGlkZXIpO1xuXG4vKipcbiAqIENvbnZlcnRzIGEgbnVtZXJpYyByYXRlIHZhbHVlIChpbiBzZWNvbmRzIHBlciBwdWxzZSkgaW50byBhXG4gKiBsb2NhbGl6ZWQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoYXQgdmFsdWUuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsIC0gbnVtZXJpYyB2YWx1ZSBvZiB0aGUgY29udHJvbFxuICogQHJldHVybnMge3N0cmluZ30gLSBsb2NhbGl6ZWQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHZhbHVlXG4gKiBAb3ZlcnJpZGVcbiAqL1xuTmV0U2ltUHVsc2VSYXRlQ29udHJvbC5wcm90b3R5cGUudmFsdWVUb0xhYmVsID0gZnVuY3Rpb24gKHZhbCkge1xuICB2YXIgcm91bmRlZCA9IE1hdGguZmxvb3IodmFsICogMTAwKSAvIDEwMDtcbiAgaWYgKHJvdW5kZWQgPT09IDEpIHtcbiAgICByZXR1cm4gaTE4bi54U2Vjb25kUGVyUHVsc2UoeyB4OiByb3VuZGVkIH0pO1xuICB9XG4gIHJldHVybiBpMThuLnhTZWNvbmRzUGVyUHVsc2UoeyB4OiByb3VuZGVkIH0pO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIG51bWVyaWMgcmF0ZSB2YWx1ZSAoaW4gc2Vjb25kcyBwZXIgcHVsc2UpIGludG8gYSBjb21wYWN0XG4gKiBsb2NhbGl6ZWQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoYXQgdmFsdWUsIHVzZWQgZm9yIGVuZHMgb2YgdGhlIHNsaWRlci5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBudW1lcmljIHZhbHVlIG9mIHRoZSBjb250cm9sXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAtIGxvY2FsaXplZCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdmFsdWVcbiAqIEBvdmVycmlkZVxuICovXG5OZXRTaW1QdWxzZVJhdGVDb250cm9sLnByb3RvdHlwZS52YWx1ZVRvU2hvcnRMYWJlbCA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuIHZhbDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cz0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdCA9IGZ1bmN0aW9uIGFub255bW91cyhsb2NhbHMsIGZpbHRlcnMsIGVzY2FwZVxuLyoqLykge1xuZXNjYXBlID0gZXNjYXBlIHx8IGZ1bmN0aW9uIChodG1sKXtcbiAgcmV0dXJuIFN0cmluZyhodG1sKVxuICAgIC5yZXBsYWNlKC8mKD8hXFx3KzspL2csICcmYW1wOycpXG4gICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xufTtcbnZhciBidWYgPSBbXTtcbndpdGggKGxvY2FscyB8fCB7fSkgeyAoZnVuY3Rpb24oKXsgXG4gYnVmLnB1c2goJzxkaXYgY2xhc3M9XCJuZXRzaW0tbXktZGV2aWNlLXRhYlwiPlxcblxcbiAgJyk7MzsgaWYgKGxldmVsLnNob3dNZXRyb25vbWUpIHsgOyBidWYucHVzaCgnXFxuICAgIDxkaXYgY2xhc3M9XCJtZXRyb25vbWVcIj48L2Rpdj5cXG4gICcpOzU7IH0gOyBidWYucHVzaCgnXFxuXFxuICAnKTs3OyBpZiAobGV2ZWwuc2hvd1B1bHNlUmF0ZVNsaWRlcikgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgPGgxPlB1bHNlIHJhdGU8L2gxPlxcbiAgICA8ZGl2IGNsYXNzPVwicHVsc2UtcmF0ZVwiPjwvZGl2PlxcbiAgJyk7MTA7IH0gOyBidWYucHVzaCgnXFxuXFxuICAnKTsxMjsgaWYgKGxldmVsLnNob3dCaXRSYXRlQ29udHJvbCkgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgPGgxPkJpdHJhdGU8L2gxPlxcbiAgICA8ZGl2IGNsYXNzPVwiYml0cmF0ZVwiPjwvZGl2PlxcbiAgJyk7MTU7IH0gOyBidWYucHVzaCgnXFxuXFxuICAnKTsxNzsgaWYgKGxldmVsLnNob3dDaHVua1NpemVDb250cm9sKSB7IDsgYnVmLnB1c2goJ1xcbiAgICA8aDE+Q2h1bmsgc2l6ZTwvaDE+XFxuICAgIDxkaXYgY2xhc3M9XCJjaHVuay1zaXplXCI+PC9kaXY+XFxuICAnKTsyMDsgfSA7IGJ1Zi5wdXNoKCdcXG5cXG4gICcpOzIyOyBpZiAobGV2ZWwuc2hvd0VuY29kaW5nQ29udHJvbHMubGVuZ3RoID4gMCkgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgPGRpdiBjbGFzcz1cImVuY29kaW5nXCI+PC9kaXY+XFxuICAnKTsyNDsgfSA7IGJ1Zi5wdXNoKCdcXG5cXG48L2Rpdj5cXG4nKTsgfSkoKTtcbn0gXG5yZXR1cm4gYnVmLmpvaW4oJycpO1xufTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGxvY2Fscykge1xuICAgIHJldHVybiB0KGxvY2FscywgcmVxdWlyZShcImVqc1wiKS5maWx0ZXJzKTtcbiAgfVxufSgpKTsiLCIvKipcbiAqIEBvdmVydmlldyBVSSBjb21wb25lbnQ6IEFuIGFuaW1hdGVkIFNWRyBtZXRyb25vbWUuXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgbWFya3VwID0gcmVxdWlyZSgnLi9OZXRTaW1NZXRyb25vbWUuaHRtbC5lanMnKTtcblxuLyoqXG4gKiBBbiBTVkcgXCJtZXRyb25vbWVcIiwgaW4gdGhlIGZvcm0gb2YgYSByYWRpYWwgbWV0ZXIgdGhhdCBmaWxscyBhbmQgcmVzZXRzXG4gKiBhdCBhIHJlZ3VsYXIgaW50ZXJ2YWwuXG4gKlxuICogQHBhcmFtIHtqUXVlcnl9IHJvb3REaXZcbiAqIEBwYXJhbSB7UnVuTG9vcH0gcnVuTG9vcFxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBOZXRTaW1NZXRyb25vbWUgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyb290RGl2LCBydW5Mb29wKSB7XG4gIC8qKlxuICAgKiBDb21wb25lbnQgcm9vdCwgd2hpY2ggd2UgZmlsbCB3aGVuZXZlciB3ZSBjYWxsIHJlbmRlcigpXG4gICAqIEB0eXBlIHtqUXVlcnl9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnJvb3REaXZfID0gcm9vdERpdjtcblxuICAvKipcbiAgICogVGltZSBvZiBsYXN0IHB1bHNlLCBpbiBSdW5Mb29wIHNpbXVsYXRpb24gdGltZVxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5sYXN0UHVsc2VUaW1lXyA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogTWlsbGlzZWNvbmRzIGJldHdlZW4gbWV0cm9ub21lIHB1bHNlc1xuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5wdWxzZUludGVydmFsTWlsbGlzXyA9IDA7XG5cbiAgLyoqXG4gICAqIE5vcm1hbGl6ZWQgcHJvZ3Jlc3MgdG93YXJkIHRoZSBuZXh0IHB1bHNlLCBmcm9tIDAuMCB0byAxLjBcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucHJvZ3Jlc3NfID0gMDtcblxuICAvKipcbiAgICogSG93IGxvbmcgaXQncyBiZWVuIHNpbmNlIHRoZSBsYXN0IHB1bHNlIGluIG1zXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnB1bHNlQWdlXyA9IDA7XG5cbiAgLy8gUmVnaXN0ZXIgd2l0aCBydW4gbG9vcFxuICBydW5Mb29wLnJlbmRlci5yZWdpc3Rlcih0aGlzLnJlbmRlci5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogRmlsbCB0aGUgcm9vdCBkaXYgd2l0aCBuZXcgZWxlbWVudHMgcmVmbGVjdGluZyB0aGUgY3VycmVudCBzdGF0ZVxuICogQHBhcmFtIHtSdW5Mb29wLkNsb2NrfSBjbG9ja1xuICovXG5OZXRTaW1NZXRyb25vbWUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChjbG9jaykge1xuICBpZiAoIXRoaXMubGFzdFB1bHNlVGltZV8pIHtcbiAgICB0aGlzLmxhc3RQdWxzZVRpbWVfID0gY2xvY2sudGltZTtcbiAgfVxuXG4gIC8vIEFuIGluZmluaXRlIGludGVydmFsIG1lYW5zIHdlJ3JlIGVmZmVjdGl2ZWx5IHBhdXNlZCwgc28gc25hcCB0byB6ZXJvXG4gIC8vIHByb2dyZXNzICh2aXN1YWxpemVkIGFzIGFuIFwiZW1wdHlcIiBtZXRlcilcbiAgaWYgKHRoaXMucHVsc2VJbnRlcnZhbE1pbGxpc18gPT09IEluZmluaXR5KSB7XG4gICAgdGhpcy5wcm9ncmVzc18gPSAwO1xuICAgIHRoaXMucHVsc2VBZ2VfID0gSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgLy8gRm9yIGEgbm9uLWluZmluaXRlIGludGVydmFsLCB1cGRhdGUgdGhlIG1ldGVyIHByb2dyZXNzIHZhbHVlIGFjY29yZGluZ1xuICAgIC8vIHRvIHRoZSBjdXJyZW50IHRpbWUuXG4gICAgdGhpcy5wdWxzZUFnZV8gPSBjbG9jay50aW1lIC0gdGhpcy5sYXN0UHVsc2VUaW1lXztcbiAgICB0aGlzLnByb2dyZXNzXyA9IE1hdGgubWluKHRoaXMucHVsc2VBZ2VfIC8gdGhpcy5wdWxzZUludGVydmFsTWlsbGlzXywgMSk7XG5cbiAgICBpZiAodGhpcy5wdWxzZUFnZV8gPj0gdGhpcy5wdWxzZUludGVydmFsTWlsbGlzXykge1xuICAgICAgLy8gUHVsc2VcbiAgICAgIHZhciBtaW5pbXVtTGFzdFB1bHNlVGltZSA9IGNsb2NrLnRpbWUgLSB0aGlzLnB1bHNlSW50ZXJ2YWxNaWxsaXNfO1xuICAgICAgd2hpbGUgKHRoaXMubGFzdFB1bHNlVGltZV8gPCBtaW5pbXVtTGFzdFB1bHNlVGltZSkge1xuICAgICAgICB0aGlzLmxhc3RQdWxzZVRpbWVfICs9IHRoaXMucHVsc2VJbnRlcnZhbE1pbGxpc187XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIHJlbmRlcmVkTWFya3VwID0gJChtYXJrdXAoe1xuICAgIHByb2dyZXNzOiB0aGlzLnByb2dyZXNzXyxcbiAgICBwdWxzZUFnZTogdGhpcy5wdWxzZUFnZV9cbiAgfSkpO1xuICB0aGlzLnJvb3REaXZfLmh0bWwocmVuZGVyZWRNYXJrdXApO1xufTtcblxuLyoqXG4gKiBDaGFuZ2UgdGhlIG1ldHJvbm9tZSBzcGVlZFxuICogQHBhcmFtIHtudW1iZXJ9IHB1bHNlc1BlclNlY29uZFxuICovXG5OZXRTaW1NZXRyb25vbWUucHJvdG90eXBlLnNldEZyZXF1ZW5jeSA9IGZ1bmN0aW9uIChwdWxzZXNQZXJTZWNvbmQpIHtcbiAgaWYgKHB1bHNlc1BlclNlY29uZCA9PT0gMCB8fCBwdWxzZXNQZXJTZWNvbmQgPT09IEluZmluaXR5KSB7XG4gICAgdGhpcy5wdWxzZUludGVydmFsTWlsbGlzXyA9IEluZmluaXR5O1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLnB1bHNlSW50ZXJ2YWxNaWxsaXNfID0gMTAwMCAvIHB1bHNlc1BlclNlY29uZDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cz0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdCA9IGZ1bmN0aW9uIGFub255bW91cyhsb2NhbHMsIGZpbHRlcnMsIGVzY2FwZVxuLyoqLykge1xuZXNjYXBlID0gZXNjYXBlIHx8IGZ1bmN0aW9uIChodG1sKXtcbiAgcmV0dXJuIFN0cmluZyhodG1sKVxuICAgIC5yZXBsYWNlKC8mKD8hXFx3KzspL2csICcmYW1wOycpXG4gICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xufTtcbnZhciBidWYgPSBbXTtcbndpdGggKGxvY2FscyB8fCB7fSkgeyAoZnVuY3Rpb24oKXsgXG4gYnVmLnB1c2goJycpOzE7XG4gIGZ1bmN0aW9uIG1vdmVDb21tYW5kKHgsIHkpIHtcbiAgICByZXR1cm4gJ00nICsgeCArICcgJyArIHk7XG4gIH1cblxuICBmdW5jdGlvbiBsaW5lQ29tbWFuZCh4LCB5KSB7XG4gICAgcmV0dXJuICdMICcgKyB4ICsgJyAnICsgeTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFyY0NvbW1hbmQoclgsIHJZLCByb3QsIGxhcmdlQXJjRmxhZywgc3dlZXBGbGFnLCBmaW5hbFgsIGZpbmFsWSkge1xuICAgIHJldHVybiAnQSAnICsgclggKyAnICcgKyByWSArICcsICcgKyByb3QgKyAnLCAnICsgbGFyZ2VBcmNGbGFnICsgJywgJyArIHN3ZWVwRmxhZyArICcsICcgKyBmaW5hbFggKyAnICcgKyBmaW5hbFk7XG4gIH1cblxuICBmdW5jdGlvbiBjbG9zZVNoYXBlQ29tbWFuZCgpIHtcbiAgICByZXR1cm4gJ1onO1xuICB9XG5cbiAgLyoqXG4gICAqIE91dGVyIHJhZGl1cyBvZiBwcm9ncmVzcyBtZXRlclxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAY29uc3RcbiAgICovXG4gIHZhciBPVVRFUl9SQURVUyA9IDQ1O1xuXG4gIC8qKlxuICAgKiBJbm5lciByYWRpdXMgb2YgcHJvZ3Jlc3MgbWV0ZXIsIGFuZCBtYXhpbXVtIHJhZGl1cyBvZiBwdWxzZSBkb3RcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGNvbnN0XG4gICAqL1xuICB2YXIgSU5ORVJfUkFESVVTID0gMzA7XG5cbiAgLyoqXG4gICAqIEhvdyBsb25nIChpbiBtcykgaXQgdGFrZXMgdGhlIHB1bHNlIGNpcmNsZSB0byBzaHJpbmsgYmFjayB0byBub3RoaW5nIGFmdGVyIGl0IGFwcGVhcnNcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGNvbnN0XG4gICAqL1xuICB2YXIgUFVMU0VfRkFMTE9GRl9NUyA9IDUwMDtcblxuICAvKipcbiAgICogUmFkaXVzIG9mIHRoZSBpbm5lciBwdWxzZSBkb3QsIGJhc2VkIG9uIHRoZSBwdWxzZSBhZ2UuICBTdGFydHMgZnVsbCBzaXplLCB0aGVuIHNocmlua3NcbiAgICogdG8gcj0wIG92ZXIgUFVMU0VfRkFMTE9GRl9NUy5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHZhciBwdWxzZUZhbGxvZmZOb3JtYWxpemVkUHJvZ3Jlc3MgPSBNYXRoLm1pbihwdWxzZUFnZS8gUFVMU0VfRkFMTE9GRl9NUywgMSk7XG4gIHZhciBwdWxzZURvdFJhZGl1cyA9IElOTkVSX1JBRElVUyAqICgxIC0gcHVsc2VGYWxsb2ZmTm9ybWFsaXplZFByb2dyZXNzKTtcblxuXG4gIC8qKlxuICAgKiBHaXZlbiBhIGNlcnRhaW4gcGVyY2VudGFnZSAoYXMgYSB2YWx1ZSBpbiB0aGUgcmFuZ2UgWzAuMC0xLjBdKSB0aGlzXG4gICAqIGdlbmVyYXRlcyBhIGRhdGEgc3RyaW5nIGZvciBhIFwicGF0aFwiIHN2ZyBvYmplY3QgdGhhdCBkcmF3cyBhIHBhcnRpYWxseS1maWxsZWQgYXJjXG4gICAqIHN3ZWVwaW5nIHRoZSBhcHByb3ByaWF0ZSBwZXJjZW50YWdlIG9mIGEgY2lyY2xlLlxuICAgKiBQcm9ncmVzcyBiZWdpbnMgaXRzIHN3ZWVwIGF0IFwiZWFzdFwiIGFuZCBwcm9jZWVkcyBjbG9ja3dpc2UuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBub3JtYWxpemVkUHJvZ3Jlc3MgLSBudW1iZXIgZnJvbSAwLjAgdG8gMS4wXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IGRhdGEgc3RyaW5nIG9mIGNvbW1hbmRzIGZvciBTVkcgcGF0aFxuICAgKi9cbiAgZnVuY3Rpb24gcHJvZ3Jlc3NNZXRlclN2Z1BhdGhEYXRhKG5vcm1hbGl6ZWRQcm9ncmVzcykge1xuICAgIHZhciB0ZXJtaW5hbFJhZGlhbnMgPSAyICogTWF0aC5QSSAqIG5vcm1hbGl6ZWRQcm9ncmVzc1xuICAgIHZhciBsYXJnZUFyYyA9IChub3JtYWxpemVkUHJvZ3Jlc3MgPj0gMC41KSA/IDEgOiAwO1xuICAgIHZhciBzaW5BbmdsZSA9IE1hdGguc2luKHRlcm1pbmFsUmFkaWFucyk7XG4gICAgdmFyIGNvc0FuZ2xlID0gTWF0aC5jb3ModGVybWluYWxSYWRpYW5zKTtcbiAgICB2YXIgb3V0ZXJUZXJtaW5hbFggPSBPVVRFUl9SQURVUyAqIGNvc0FuZ2xlO1xuICAgIHZhciBvdXRlclRlcm1pbmFsWSA9IE9VVEVSX1JBRFVTICogc2luQW5nbGU7XG4gICAgdmFyIGlubmVyVGVybWluYWxYID0gSU5ORVJfUkFESVVTICogY29zQW5nbGU7XG4gICAgdmFyIGlubmVyVGVybWluYWxZID0gSU5ORVJfUkFESVVTICogc2luQW5nbGU7XG4gICAgcmV0dXJuIFtcbiAgICAgIG1vdmVDb21tYW5kKE9VVEVSX1JBRFVTLCAwKSxcbiAgICAgIGFyY0NvbW1hbmQoT1VURVJfUkFEVVMsIE9VVEVSX1JBRFVTLCAwLCBsYXJnZUFyYywgMSwgb3V0ZXJUZXJtaW5hbFgsIG91dGVyVGVybWluYWxZKSxcbiAgICAgIGxpbmVDb21tYW5kKGlubmVyVGVybWluYWxYLCBpbm5lclRlcm1pbmFsWSksXG4gICAgICBhcmNDb21tYW5kKElOTkVSX1JBRElVUywgSU5ORVJfUkFESVVTLCAwLCBsYXJnZUFyYywgMCwgSU5ORVJfUkFESVVTLCAwKSxcbiAgICAgIGNsb3NlU2hhcGVDb21tYW5kKClcbiAgICBdLmpvaW4oJyAnKTtcbiAgfVxuOyBidWYucHVzaCgnXFxuPGRpdiBjbGFzcz1cIm5ldHNpbS1tZXRyb25vbWVcIj5cXG4gIDxzdmcgdmVyc2lvbj1cIjEuMVwiIHdpZHRoPVwiMTAwXCIgaGVpZ2h0PVwiMTAwXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPlxcbiAgICA8ZyBpZD1cImNlbnRlcmVkLWdyb3VwXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDUwLDUwKVwiPlxcbiAgICAgIDxjaXJjbGUgcj1cIjQ4XCIgY3g9XCIwXCIgY3k9XCIwXCIgZmlsbD1cImRhcmtncmF5XCI+PC9jaXJjbGU+XFxuICAgICAgPGNpcmNsZSByPVwiNDhcIiBjeD1cIi0xXCIgY3k9XCIxXCIgZmlsbD1cImxpZ2h0Z3JheVwiPjwvY2lyY2xlPlxcbiAgICAgIDxjaXJjbGUgcj1cIjQ2XCIgY3g9XCIwXCIgY3k9XCIwXCIgZmlsbD1cIiNmNWY1ZjVcIj48L2NpcmNsZT5cXG4gICAgICA8Y2lyY2xlIGNsYXNzPVwicHVsc2UtZG90XCIgcj1cIicsIGVzY2FwZSgoODAsICBwdWxzZURvdFJhZGl1cyApKSwgJ1wiIGN4PVwiMFwiIGN5PVwiMFwiPjwvY2lyY2xlPlxcbiAgICAgIDxnIHRyYW5zZm9ybT1cInJvdGF0ZSgtOTApXCI+XFxuICAgICAgICA8cGF0aCBjbGFzcz1cInByb2dyZXNzLW1ldGVyXCIgZD1cIicsIGVzY2FwZSgoODIsICBwcm9ncmVzc01ldGVyU3ZnUGF0aERhdGEocHJvZ3Jlc3MpICkpLCAnXCI+PC9wYXRoPlxcbiAgICAgIDwvZz5cXG4gICAgPC9nPlxcbiAgPC9zdmc+XFxuPC9kaXY+XFxuJyk7IH0pKCk7XG59IFxucmV0dXJuIGJ1Zi5qb2luKCcnKTtcbn07XG4gIHJldHVybiBmdW5jdGlvbihsb2NhbHMpIHtcbiAgICByZXR1cm4gdChsb2NhbHMsIHJlcXVpcmUoXCJlanNcIikuZmlsdGVycyk7XG4gIH1cbn0oKSk7IiwiLyoqXG4gKiBAb3ZlcnZpZXcgVUkgc2xpZGVyIHVzZWQgdG8gY29udHJvbCByb3V0ZXIgbWVtb3J5IHNpemUuXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCcuLi91dGlscycpO1xudmFyIE5ldFNpbUNvbnN0YW50cyA9IHJlcXVpcmUoJy4vTmV0U2ltQ29uc3RhbnRzJyk7XG52YXIgTmV0U2ltVXRpbHMgPSByZXF1aXJlKCcuL05ldFNpbVV0aWxzJyk7XG52YXIgTmV0U2ltU2xpZGVyID0gcmVxdWlyZSgnLi9OZXRTaW1TbGlkZXInKTtcblxuLyoqXG4gKiBHZW5lcmF0b3IgYW5kIGNvbnRyb2xsZXIgZm9yIHBhY2tldCBzaXplIHNsaWRlci9zZWxlY3RvclxuICogQHBhcmFtIHtqUXVlcnl9IHJvb3REaXZcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHNsaWRlckNoYW5nZUNhbGxiYWNrXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzbGlkZXJTdG9wQ2FsbGJhY2tcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgTmV0U2ltTWVtb3J5Q29udHJvbCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJvb3REaXYsXG4gICAgc2xpZGVyQ2hhbmdlQ2FsbGJhY2ssIHNsaWRlclN0b3BDYWxsYmFjaykge1xuICBOZXRTaW1TbGlkZXIuTG9nYXJpdGhtaWNTbGlkZXIuY2FsbCh0aGlzLCByb290RGl2LCB7XG4gICAgb25DaGFuZ2U6IHNsaWRlckNoYW5nZUNhbGxiYWNrLFxuICAgIG9uU3RvcDogc2xpZGVyU3RvcENhbGxiYWNrLFxuICAgIHZhbHVlOiBJbmZpbml0eSxcbiAgICBtaW46IE5ldFNpbUNvbnN0YW50cy5CSVRTX1BFUl9CWVRFLFxuICAgIG1heDogTmV0U2ltQ29uc3RhbnRzLkJJVFNfUEVSX01FR0FCWVRFLFxuICAgIHVwcGVyQm91bmRJbmZpbml0ZTogdHJ1ZVxuICB9KTtcblxuICAvLyBBdXRvLXJlbmRlciwgdW5saWtlIG91ciBiYXNlIGNsYXNzXG4gIHRoaXMucmVuZGVyKCk7XG59O1xuTmV0U2ltTWVtb3J5Q29udHJvbC5pbmhlcml0cyhOZXRTaW1TbGlkZXIuTG9nYXJpdGhtaWNTbGlkZXIpO1xuXG4vKipcbiAqIENvbnZlcnRzIGEgbnVtZXJpYyBtZW1vcnkgdmFsdWUgKGluIGJpdHMpIGludG8gYSBjb21wYWN0IGxvY2FsaXplZCBzdHJpbmdcbiAqIHJlcHJlc2VudGF0aW9uIG9mIHRoYXQgdmFsdWUuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsIC0gbnVtZXJpYyB2YWx1ZSBvZiB0aGUgY29udHJvbFxuICogQHJldHVybnMge3N0cmluZ30gLSBsb2NhbGl6ZWQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHZhbHVlXG4gKiBAb3ZlcnJpZGVcbiAqL1xuTmV0U2ltTWVtb3J5Q29udHJvbC5wcm90b3R5cGUudmFsdWVUb0xhYmVsID0gZnVuY3Rpb24gKHZhbCkge1xuICByZXR1cm4gTmV0U2ltVXRpbHMuYml0c1RvTG9jYWxpemVkUm91bmRlZEJ5dGVzaXplKHZhbCk7XG59O1xuIiwiLyoqXG4gKiBAb3ZlcnZpZXcgVUkgY29tcG9uZW50LCBhIGxvZyBwYW5lbCAodXNlZCBhcyBcIlNlbnQgUGFja2V0c1wiIGFuZFxuICogICAgICAgICAgIFwiUmVjZWl2ZWQgUGFja2V0c1wiKSB0aGF0IGlzIHVzZWQgaW4gdGhlIHBhY2tldC1zZW5kaW5nXG4gKiAgICAgICAgICAgY29uZmlndXJhdGlvbnMgb2YgdGhlIHNpbXVsYXRvci5cbiAqXG4gKiBAc2VlIElOZXRTaW1Mb2dQYW5lbCBmb3IgdGhlIGludGVyZmFjZSBpbXBsZW1lbnRlZCBoZXJlLlxuICogQHNlZSBOZXRTaW1CaXRMb2dQYW5lbCBmb3IgdGhlIGNvbXBvbmVudCB1c2VkIGluIGJpdC1zZW5kaW5nIG1vZGUuXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGkxOG4gPSByZXF1aXJlKCcuL2xvY2FsZScpO1xudmFyIG1hcmt1cCA9IHJlcXVpcmUoJy4vTmV0U2ltTG9nUGFuZWwuaHRtbC5lanMnKTtcbnZhciBQYWNrZXQgPSByZXF1aXJlKCcuL1BhY2tldCcpO1xudmFyIHBhY2tldE1hcmt1cCA9IHJlcXVpcmUoJy4vTmV0U2ltTG9nUGFja2V0Lmh0bWwuZWpzJyk7XG52YXIgTmV0U2ltUGFuZWwgPSByZXF1aXJlKCcuL05ldFNpbVBhbmVsJyk7XG52YXIgTmV0U2ltRW5jb2RpbmdDb250cm9sID0gcmVxdWlyZSgnLi9OZXRTaW1FbmNvZGluZ0NvbnRyb2wnKTtcbnZhciBOZXRTaW1HbG9iYWxzID0gcmVxdWlyZSgnLi9OZXRTaW1HbG9iYWxzJyk7XG5cbi8qKlxuICogSG93IGxvbmcgdGhlIFwiZW50cmFuY2VcIiBhbmltYXRpb24gZm9yIG5ldyBtZXNzYWdlcyBsYXN0cywgaW4gbWlsbGlzZWNvbmRzLlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdFxuICovXG52YXIgTUVTU0FHRV9TTElERV9JTl9EVVJBVElPTl9NUyA9IDQwMDtcblxuLyoqXG4gKiBIb3cgbWFueSBwYWNrZXRzIHRoZSBsb2cgbWF5IGtlZXAgaW4gaXRzIGhpc3RvcnkgKGFuZCBpbiB0aGUgRE9NISlcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqL1xudmFyIERFRkFVTFRfTUFYSU1VTV9MT0dfUEFDS0VUUyA9IDUwO1xuXG4vKipcbiAqIE9iamVjdCB0aGF0IGNhbiBiZSBzZW50IGRhdGEgdG8gYmUgYnJvd3NlZCBieSB0aGUgdXNlciBhdCB0aGVpciBkaXNjcmV0aW9uXG4gKiBAaW50ZXJmYWNlXG4gKiBAbmFtZSBJTmV0U2ltTG9nUGFuZWxcbiAqL1xuXG4vKipcbiAqIFB1dCBkYXRhIGludG8gdGhlIGxvZ1xuICogQGZ1bmN0aW9uXG4gKiBAbmFtZSBJTmV0U2ltTG9nUGFuZWwjbG9nXG4gKiBAcGFyYW0ge3N0cmluZ30gYmluYXJ5XG4gKi9cblxuLyoqXG4gKiBTaG93IG9yIGhpZGUgcGFydHMgb2YgdGhlIGxvZyBiYXNlZCBvbiB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGVuY29kaW5nIG1vZGUuXG4gKiBAZnVuY3Rpb25cbiAqIEBuYW1lIElOZXRTaW1Mb2dQYW5lbCNzZXRFbmNvZGluZ3NcbiAqIEBwYXJhbSB7RW5jb2RpbmdUeXBlW119IG5ld0VuY29kaW5nc1xuICovXG5cbi8qKlxuICogQ2hhbmdlIGhvdyBiaW5hcnkgaW5wdXQgaW4gaW50ZXJwcmV0ZWQgYW5kIGZvcm1hdHRlZCBpbiB0aGUgbG9nLlxuICogQGZ1bmN0aW9uXG4gKiBAbmFtZSBJTmV0U2ltTG9nUGFuZWwjc2V0Q2h1bmtTaXplXG4gKiBAcGFyYW0ge251bWJlcn0gbmV3Q2h1bmtTaXplXG4gKi9cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBuYW1lIElOZXRTaW1Mb2dQYW5lbCNnZXRIZWlnaHRcbiAqIEByZXR1cm5zIHtudW1iZXJ9IHZlcnRpY2FsIHNwYWNlIHRoYXQgcGFuZWwgY3VycmVudGx5IGNvbnN1bWVzIChpbmNsdWRpbmdcbiAqICAgICAgICAgIG1hcmdpbnMpIGluIHBpeGVscy5cbiAqL1xuXG4vKipcbiAqIFNldHMgdGhlIHZlcnRpY2FsIHNwYWNlIHRoYXQgdGhpcyBsb2cgcGFuZWwgc2hvdWxkIGNvbnN1bWUgKGluY2x1ZGluZyBtYXJnaW5zKVxuICogQGZ1bmN0aW9uXG4gKiBAbmFtZSBJTmV0U2ltTG9nUGFuZWwjc2V0SGVpZ2h0XG4gKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0UGl4ZWxzXG4gKi9cblxuLyoqXG4gKiBHZW5lcmF0b3IgYW5kIGNvbnRyb2xsZXIgZm9yIG1lc3NhZ2UgbG9nLlxuICogQHBhcmFtIHtqUXVlcnl9IHJvb3REaXZcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5sb2dUaXRsZVxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5pc01pbmltaXplZF0gZGVmYXVsdHMgdG8gRkFMU0VcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuaGFzVW5yZWFkTWVzc2FnZXNdIGRlZmF1bHRzIHRvIEZBTFNFXG4gKiBAcGFyYW0ge1BhY2tldC5IZWFkZXJUeXBlW119IG9wdGlvbnMucGFja2V0U3BlY1xuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heGltdW1Mb2dQYWNrZXRzXSBIb3cgbWFueSBwYWNrZXRzIHRoZSBsb2cgd2lsbFxuICogICAgICAgIGtlZXAgYmVmb3JlIGl0IHN0YXJ0cyBkcm9wcGluZyB0aGUgb2xkZXN0IG9uZXMuICBEZWZhdWx0cyB0b1xuICogICAgICAgIERFRkFVTFRfTUFYSU1VTV9MT0dfUEFDS0VUUy5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGF1Z21lbnRzIE5ldFNpbVBhbmVsXG4gKiBAaW1wbGVtZW50cyBJTmV0U2ltTG9nUGFuZWxcbiAqL1xudmFyIE5ldFNpbUxvZ1BhbmVsID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocm9vdERpdiwgb3B0aW9ucykge1xuICAvKipcbiAgICogQHR5cGUge1BhY2tldC5IZWFkZXJUeXBlW119XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnBhY2tldFNwZWNfID0gb3B0aW9ucy5wYWNrZXRTcGVjO1xuXG4gIC8qKlxuICAgKiBMaXN0IG9mIGNvbnRyb2xsZXJzIGZvciBjdXJyZW50bHkgZGlzcGxheWVkIHBhY2tldHMuXG4gICAqIEB0eXBlIHtBcnJheS48TmV0U2ltTG9nUGFja2V0Pn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucGFja2V0c18gPSBbXTtcblxuICAvKipcbiAgICogQSBtZXNzYWdlIGVuY29kaW5nIChkaXNwbGF5KSBzZXR0aW5nLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5jdXJyZW50RW5jb2RpbmdzXyA9IFtdO1xuXG4gIC8qKlxuICAgKiBDdXJyZW50IGNodW5rIHNpemUgKGJ5dGVzaXplKSBmb3IgaW50ZXJwcmV0aW5nIGJpbmFyeSBpbiB0aGUgbG9nLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5jdXJyZW50Q2h1bmtTaXplXyA9IDg7XG5cbiAgLyoqXG4gICAqIExvY2FsaXplZCBwYW5lbCB0aXRsZVxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5sb2dUaXRsZV8gPSBvcHRpb25zLmxvZ1RpdGxlO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIG5ld2x5IGxvZ2dlZCBtZXNzYWdlcyBpbiB0aGlzIGxvZyBzaG91bGQgYmUgbWFya2VkIGFzIHVucmVhZFxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuaGFzVW5yZWFkTWVzc2FnZXNfID0gISEob3B0aW9ucy5oYXNVbnJlYWRNZXNzYWdlcyk7XG5cbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiBwYWNrZXRzIHRoaXMgbG9nIHBhbmVsIHdpbGwga2VlcCBpbiBpdHMgbWVtb3J5XG4gICAqIGFuZCBpbiB0aGUgRE9NLCBzbyB3ZSBkb24ndCBoYXZlIGEgZm9yZXZlci1ncm93aW5nIGxvZy5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGUsLFxuICAgKi9cbiAgdGhpcy5tYXhpbXVtTG9nUGFja2V0c18gPSB1dGlscy52YWx1ZU9yKG9wdGlvbnMubWF4aW11bUxvZ1BhY2tldHMsXG4gICAgICBERUZBVUxUX01BWElNVU1fTE9HX1BBQ0tFVFMpO1xuXG4gIC8vIEluaXRpYWwgcmVuZGVyXG4gIE5ldFNpbVBhbmVsLmNhbGwodGhpcywgcm9vdERpdiwge1xuICAgIGNsYXNzTmFtZTogJ25ldHNpbS1sb2ctcGFuZWwnLFxuICAgIHBhbmVsVGl0bGU6IG9wdGlvbnMubG9nVGl0bGUsXG4gICAgYmVnaW5NaW5pbWl6ZWQ6IG9wdGlvbnMuaXNNaW5pbWl6ZWRcbiAgfSk7XG59O1xuTmV0U2ltTG9nUGFuZWwuaW5oZXJpdHMoTmV0U2ltUGFuZWwpO1xuXG5OZXRTaW1Mb2dQYW5lbC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAvLyBDcmVhdGUgYm9pbGVycGxhdGUgcGFuZWwgbWFya3VwXG4gIE5ldFNpbUxvZ1BhbmVsLnN1cGVyUHJvdG90eXBlLnJlbmRlci5jYWxsKHRoaXMpO1xuXG4gIC8vIEFkZCBvdXIgb3duIGNvbnRlbnQgbWFya3VwXG4gIHZhciBuZXdNYXJrdXAgPSAkKG1hcmt1cCh7fSkpO1xuICB0aGlzLmdldEJvZHkoKS5odG1sKG5ld01hcmt1cCk7XG5cbiAgLy8gQWRkIGEgY2xlYXIgYnV0dG9uIHRvIHRoZSBwYW5lbCBoZWFkZXJcbiAgdGhpcy5hZGRCdXR0b24oaTE4bi5jbGVhcigpLCB0aGlzLm9uQ2xlYXJCdXR0b25QcmVzc18uYmluZCh0aGlzKSk7XG5cbiAgLy8gQmluZCByZWZlcmVuY2UgdG8gc2Nyb2xsQXJlYSBmb3IgdXNlIHdoZW4gbG9nZ2luZy5cbiAgdGhpcy5zY3JvbGxBcmVhXyA9IHRoaXMuZ2V0Qm9keSgpLmZpbmQoJy5zY3JvbGwtYXJlYScpO1xuXG4gIHRoaXMudXBkYXRlVW5yZWFkQ291bnQoKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFsbCBwYWNrZXRzIGZyb20gdGhlIGxvZywgcmVzZXR0aW5nIGl0cyBzdGF0ZS5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbUxvZ1BhbmVsLnByb3RvdHlwZS5vbkNsZWFyQnV0dG9uUHJlc3NfID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnNjcm9sbEFyZWFfLmVtcHR5KCk7XG4gIHRoaXMucGFja2V0c18ubGVuZ3RoID0gMDtcblxuICB0aGlzLnVwZGF0ZVVucmVhZENvdW50KCk7XG59O1xuXG4vKipcbiAqIFB1dCBhIG1lc3NhZ2UgaW50byB0aGUgbG9nLlxuICogQHBhcmFtIHtzdHJpbmd9IHBhY2tldEJpbmFyeVxuICogQHBhcmFtIHtudW1iZXJ9IHBhY2tldElEXG4gKi9cbk5ldFNpbUxvZ1BhbmVsLnByb3RvdHlwZS5sb2cgPSBmdW5jdGlvbiAocGFja2V0QmluYXJ5LCBwYWNrZXRJRCkge1xuXG4gIHZhciBwYWNrZXRBbHJlYWR5SW5Mb2cgPSB0aGlzLnBhY2tldHNfLnNvbWUoZnVuY3Rpb24gKHBhY2tldCkge1xuICAgIHJldHVybiBwYWNrZXQucGFja2V0SUQgPT09IHBhY2tldElEO1xuICB9KTtcblxuICBpZiAocGFja2V0QWxyZWFkeUluTG9nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gUmVtb3ZlIGFsbCBwYWNrZXRzIHRoYXQgYXJlIGJleW9uZCBvdXIgbWF4aW11bSBzaXplXG4gIHRoaXMucGFja2V0c19cbiAgICAgIC5zcGxpY2UodGhpcy5tYXhpbXVtTG9nUGFja2V0c18gLSAxLCB0aGlzLnBhY2tldHNfLmxlbmd0aClcbiAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgICAgICAgcGFja2V0LmdldFJvb3QoKS5yZW1vdmUoKTtcbiAgICAgIH0pO1xuXG4gIHZhciBuZXdQYWNrZXQgPSBuZXcgTmV0U2ltTG9nUGFja2V0KHBhY2tldEJpbmFyeSwgcGFja2V0SUQsIHtcbiAgICBwYWNrZXRTcGVjOiB0aGlzLnBhY2tldFNwZWNfLFxuICAgIGVuY29kaW5nczogdGhpcy5jdXJyZW50RW5jb2RpbmdzXyxcbiAgICBjaHVua1NpemU6IHRoaXMuY3VycmVudENodW5rU2l6ZV8sXG4gICAgaXNVbnJlYWQ6IHRoaXMuaGFzVW5yZWFkTWVzc2FnZXNfLFxuICAgIG1hcmtBc1JlYWRDYWxsYmFjazogdGhpcy51cGRhdGVVbnJlYWRDb3VudC5iaW5kKHRoaXMpXG4gIH0pO1xuXG4gIG5ld1BhY2tldC5nZXRSb290KCkucHJlcGVuZFRvKHRoaXMuc2Nyb2xsQXJlYV8pO1xuXG4gIHZhciBzY3JvbGxUb3AgPSB0aGlzLnNjcm9sbEFyZWFfLnNjcm9sbFRvcCgpO1xuXG4gIGlmIChzY3JvbGxUb3AgPT09IDApIHtcbiAgICAvLyBJZiBzY3JvbGxlZCB0byB0aGUgdG9wLCBhbmltYXRlIGEgcHJldHR5IHNsaWRlZG93blxuICAgIG5ld1BhY2tldC5nZXRSb290KCkuaGlkZSgpO1xuICAgIG5ld1BhY2tldC5nZXRSb290KCkuc2xpZGVEb3duKE1FU1NBR0VfU0xJREVfSU5fRFVSQVRJT05fTVMpO1xuICB9IGVsc2Uge1xuICAgIC8vIElmIHdlJ3JlIHNvbWV3aGVyZSBpbiB0aGUgbWlkZGxlIG9mIHRoZSBtZXNzYWdlcywgc2Nyb2xsIFwiZG93blwiXG4gICAgLy8gdG8gbWFpbnRhaW4gb3VyIHBsYWNlIHJlbGF0aXZlIHRvIHRoZSBtZXNzYWdlcyB3ZSdyZSBsb29raW5nIGF0XG5cbiAgICAvLyBTY3JvbGxpbmcgb25seSB0YWtlcyB0aGUgYm90dG9tIG1hcmdpbiBpbnRvIGFjY291bnQsIG5vdCB0b3BcbiAgICB2YXIgcGFja2V0SGVpZ2h0ID0gbmV3UGFja2V0LmdldFJvb3QoKS5vdXRlckhlaWdodCgpICtcbiAgICAgICAgcGFyc2VJbnQobmV3UGFja2V0LmdldFJvb3QoKS5jc3MoJ21hcmdpbkJvdHRvbScpKTtcblxuICAgIHRoaXMuc2Nyb2xsQXJlYV8uc2Nyb2xsVG9wKHNjcm9sbFRvcCArIHBhY2tldEhlaWdodCk7XG4gIH1cblxuICB0aGlzLnBhY2tldHNfLnVuc2hpZnQobmV3UGFja2V0KTtcblxuICB0aGlzLnVwZGF0ZVVucmVhZENvdW50KCk7XG59O1xuXG5OZXRTaW1Mb2dQYW5lbC5wcm90b3R5cGUudXBkYXRlVW5yZWFkQ291bnQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB1bnJlYWRDb3VudCA9IHRoaXMucGFja2V0c18ucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBjdXIpIHtcbiAgICByZXR1cm4gcHJldiArIChjdXIuaXNVbnJlYWQgPyAxIDogMCk7XG4gIH0sIDApO1xuXG4gIGlmICh1bnJlYWRDb3VudCA+IDApIHtcbiAgICB0aGlzLnNldFBhbmVsVGl0bGUoaTE4bi5hcHBlbmRDb3VudFRvVGl0bGUoe1xuICAgICAgdGl0bGU6IHRoaXMubG9nVGl0bGVfLFxuICAgICAgY291bnQ6IHVucmVhZENvdW50XG4gICAgfSkpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc2V0UGFuZWxUaXRsZSh0aGlzLmxvZ1RpdGxlXyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2hvdyBvciBoaWRlIHBhcnRzIG9mIHRoZSBzZW5kIFVJIGJhc2VkIG9uIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgZW5jb2RpbmdcbiAqIG1vZGUuXG4gKiBAcGFyYW0ge0VuY29kaW5nVHlwZVtdfSBuZXdFbmNvZGluZ3NcbiAqL1xuTmV0U2ltTG9nUGFuZWwucHJvdG90eXBlLnNldEVuY29kaW5ncyA9IGZ1bmN0aW9uIChuZXdFbmNvZGluZ3MpIHtcbiAgdGhpcy5jdXJyZW50RW5jb2RpbmdzXyA9IG5ld0VuY29kaW5ncztcbiAgdGhpcy5wYWNrZXRzXy5mb3JFYWNoKGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgICBwYWNrZXQuc2V0RW5jb2RpbmdzKG5ld0VuY29kaW5ncyk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBDaGFuZ2UgaG93IGJpbmFyeSBpbnB1dCBpbiBpbnRlcnByZXRlZCBhbmQgZm9ybWF0dGVkIGluIHRoZSBsb2cuXG4gKiBAcGFyYW0ge251bWJlcn0gbmV3Q2h1bmtTaXplXG4gKi9cbk5ldFNpbUxvZ1BhbmVsLnByb3RvdHlwZS5zZXRDaHVua1NpemUgPSBmdW5jdGlvbiAobmV3Q2h1bmtTaXplKSB7XG4gIHRoaXMuY3VycmVudENodW5rU2l6ZV8gPSBuZXdDaHVua1NpemU7XG4gIHRoaXMucGFja2V0c18uZm9yRWFjaChmdW5jdGlvbiAocGFja2V0KSB7XG4gICAgcGFja2V0LnNldENodW5rU2l6ZShuZXdDaHVua1NpemUpO1xuICB9KTtcbn07XG5cbi8qKlxuICogQSBjb21wb25lbnQvY29udHJvbGxlciBmb3IgZGlzcGxheSBvZiBhbiBpbmRpdmlkdWFsIHBhY2tldCBpbiB0aGUgbG9nLlxuICogQHBhcmFtIHtzdHJpbmd9IHBhY2tldEJpbmFyeSAtIHJhdyBwYWNrZXQgZGF0YVxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7UGFja2V0LkhlYWRlclR5cGVbXX0gb3B0aW9ucy5wYWNrZXRTcGVjXG4gKiBAcGFyYW0ge0VuY29kaW5nVHlwZVtdfSBvcHRpb25zLmVuY29kaW5ncyAtIHdoaWNoIGRpc3BsYXkgc3R5bGUgdG8gdXNlIGluaXRpYWxseVxuICogQHBhcmFtIHtudW1iZXJ9IG9wdGlvbnMuY2h1bmtTaXplIC0gKG9yIGJ5dGVzaXplKSB0byB1c2Ugd2hlbiBpbnRlcnByZXRpbmcgYW5kXG4gKiAgICAgICAgZm9ybWF0dGluZyB0aGUgZGF0YS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0aW9ucy5pc1VucmVhZCAtIHdoZXRoZXIgdGhpcyBwYWNrZXQgc2hvdWxkIGJlIHN0eWxlZFxuICogICAgICAgIGFzIFwidW5yZWFkXCIgYW5kIGhhdmUgYSBcIm1hcmsgYXMgcmVhZFwiIGJ1dHRvblxuICogQHBhcmFtIHtmdW5jdGlvbn0gb3B0aW9ucy5tYXJrQXNSZWFkQ2FsbGJhY2tcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgTmV0U2ltTG9nUGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldEJpbmFyeSwgcGFja2V0SUQsIG9wdGlvbnMpIHtcblxuICAvKipcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRoaXMucGFja2V0SUQgPSBwYWNrZXRJRDtcblxuICAvKipcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucGFja2V0QmluYXJ5XyA9IHBhY2tldEJpbmFyeTtcblxuICAvKipcbiAgICogQHR5cGUge1BhY2tldC5IZWFkZXJUeXBlW119XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnBhY2tldFNwZWNfID0gb3B0aW9ucy5wYWNrZXRTcGVjO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7RW5jb2RpbmdUeXBlW119XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmVuY29kaW5nc18gPSBvcHRpb25zLmVuY29kaW5ncztcblxuICAvKipcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuY2h1bmtTaXplXyA9IG9wdGlvbnMuY2h1bmtTaXplO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuaXNVbnJlYWQgPSBvcHRpb25zLmlzVW5yZWFkO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuaXNNaW5pbWl6ZWQgPSBmYWxzZTtcblxuICAvKipcbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5tYXJrQXNSZWFkQ2FsbGJhY2tfID0gb3B0aW9ucy5tYXJrQXNSZWFkQ2FsbGJhY2s7XG5cbiAgLyoqXG4gICAqIFdyYXBwZXIgZGl2IHRoYXQgd2UgY3JlYXRlIG9uY2UsIGFuZCBmaWxsIHJlcGVhdGVkbHkgd2l0aCByZW5kZXIoKVxuICAgKiBAdHlwZSB7alF1ZXJ5fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5yb290RGl2XyA9ICQoJzxkaXY+JykuYWRkQ2xhc3MoJ3BhY2tldCcpO1xuICB0aGlzLnJvb3REaXZfLmNsaWNrKHRoaXMubWFya0FzUmVhZC5iaW5kKHRoaXMpKTtcblxuICAvLyBJbml0aWFsIGNvbnRlbnQgcG9wdWxhdGlvblxuICB0aGlzLnJlbmRlcigpO1xufTtcblxuLyoqXG4gKiBSZS1yZW5kZXIgZGl2IGNvbnRlbnRzIHRvIHJlcHJlc2VudCB0aGUgcGFja2V0IGluIGEgZGlmZmVyZW50IHdheS5cbiAqL1xuTmV0U2ltTG9nUGFja2V0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBlbmNvZGluZ3NIYXNoID0gTmV0U2ltRW5jb2RpbmdDb250cm9sLmVuY29kaW5nc0FzSGFzaCh0aGlzLmVuY29kaW5nc18pO1xuICB2YXIgcmF3TWFya3VwID0gcGFja2V0TWFya3VwKHtcbiAgICBwYWNrZXRCaW5hcnk6IHRoaXMucGFja2V0QmluYXJ5XyxcbiAgICBwYWNrZXRTcGVjOiB0aGlzLnBhY2tldFNwZWNfLFxuICAgIGVuYWJsZWRFbmNvZGluZ3NIYXNoOiBlbmNvZGluZ3NIYXNoLFxuICAgIGNodW5rU2l6ZTogdGhpcy5jaHVua1NpemVfLFxuICAgIGlzTWluaW1pemVkOiB0aGlzLmlzTWluaW1pemVkXG4gIH0pO1xuICB2YXIgalF1ZXJ5V3JhcCA9ICQocmF3TWFya3VwKTtcbiAgTmV0U2ltTG9nUGFuZWwuYWRqdXN0SGVhZGVyQ29sdW1uV2lkdGhzKGpRdWVyeVdyYXApO1xuICBOZXRTaW1FbmNvZGluZ0NvbnRyb2wuaGlkZVJvd3NCeUVuY29kaW5nKGpRdWVyeVdyYXAsIHRoaXMuZW5jb2RpbmdzXyk7XG4gIHRoaXMucm9vdERpdl8uaHRtbChqUXVlcnlXcmFwKTtcbiAgdGhpcy5yb290RGl2Xy5maW5kKCcuZXhwYW5kZXInKS5jbGljayh0aGlzLnRvZ2dsZU1pbmltaXplZC5iaW5kKHRoaXMpKTtcbiAgdGhpcy5yb290RGl2Xy50b2dnbGVDbGFzcygndW5yZWFkJywgdGhpcy5pc1VucmVhZCk7XG59O1xuXG4vKipcbiAqIFJldHVybiByb290IGRpdiwgZm9yIGhvb2tpbmcgdXAgdG8gYSBwYXJlbnQgZWxlbWVudC5cbiAqIEByZXR1cm5zIHtqUXVlcnl9XG4gKi9cbk5ldFNpbUxvZ1BhY2tldC5wcm90b3R5cGUuZ2V0Um9vdCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMucm9vdERpdl87XG59O1xuXG4vKipcbiAqIEJlbmVhdGggdGhlIGdpdmVuIHJvb3QgZWxlbWVudCwgYWRqdXN0IHdpZHRocyBvZiBwYWNrZXQgaGVhZGVyIGNvbHVtbnNcbiAqIGFuZCBmaWVsZHMgdG8gbWF0Y2ggdGhlIGxldmVsJ3MgY29uZmlndXJlZCBwYWNrZXQgZm9ybWF0LlxuICogQHBhcmFtIHtqUXVlcnl9IHJvb3RFbGVtZW50XG4gKi9cbk5ldFNpbUxvZ1BhbmVsLmFkanVzdEhlYWRlckNvbHVtbldpZHRocyA9IGZ1bmN0aW9uIChyb290RWxlbWVudCkge1xuICB2YXIgbGV2ZWwgPSBOZXRTaW1HbG9iYWxzLmdldExldmVsQ29uZmlnKCk7XG4gIHZhciBlbmNvZGVyID0gbmV3IFBhY2tldC5FbmNvZGVyKFxuICAgICAgbGV2ZWwuYWRkcmVzc0Zvcm1hdCxcbiAgICAgIGxldmVsLnBhY2tldENvdW50Qml0V2lkdGgsXG4gICAgICBsZXZlbC5jbGllbnRJbml0aWFsUGFja2V0SGVhZGVyKTtcbiAgdmFyIGFkZHJlc3NCaXRXaWR0aCA9IGVuY29kZXIuZ2V0RmllbGRCaXRXaWR0aChcbiAgICAgIFBhY2tldC5IZWFkZXJUeXBlLlRPX0FERFJFU1MpO1xuICB2YXIgcGFja2V0SW5mb0JpdFdpZHRoID0gZW5jb2Rlci5nZXRGaWVsZEJpdFdpZHRoKFxuICAgICAgUGFja2V0LkhlYWRlclR5cGUuUEFDS0VUX0NPVU5UKTtcblxuICAvLyBBZGp1c3Qgd2lkdGggb2YgYWRkcmVzcyBjb2x1bW5zXG4gIC8vIEZvciBjb2x1bW5zLCA1MHB4IGlzIHN1ZmZpY2llbnQgZm9yIDQgYml0c1xuICB2YXIgUFhfUEVSX0JJVCA9IDUwIC8gNDtcbiAgdmFyIGFkZHJlc3NDb2x1bW5XaWR0aEluUHggPSBQWF9QRVJfQklUICogYWRkcmVzc0JpdFdpZHRoO1xuXG4gIC8vIEFkanVzdCB3aWR0aCBvZiBhZGRyZXNzIGNvbHVtbnNcbiAgcm9vdEVsZW1lbnQuZmluZCgndGQudG9BZGRyZXNzLCB0aC50b0FkZHJlc3MsIHRkLmZyb21BZGRyZXNzLCB0aC5mcm9tQWRkcmVzcycpXG4gICAgICAuY3NzKCd3aWR0aCcsIGFkZHJlc3NDb2x1bW5XaWR0aEluUHggKyAncHgnKTtcblxuXG4gIC8vIEFkanVzdCB3aWR0aCBvZiBhZGRyZXNzIGlucHV0IGZpZWxkc1xuICAvLyBGb3IgaW5wdXRzLCAzZW0gaXMgc3VmZmljaWVudCBmb3IgNCBiaXRzXG4gIHZhciBFTVNfUEVSX0JJVCA9IDMgLyA0O1xuICB2YXIgYWRkcmVzc0ZpZWxkV2lkdGhJbkVtcyA9IEVNU19QRVJfQklUICogYWRkcmVzc0JpdFdpZHRoO1xuICByb290RWxlbWVudC5maW5kKCd0ZC50b0FkZHJlc3MgaW5wdXQsIHRkLmZyb21BZGRyZXNzIGlucHV0JylcbiAgICAgIC5jc3MoJ3dpZHRoJywgYWRkcmVzc0ZpZWxkV2lkdGhJbkVtcyArICdlbScpO1xuXG5cbiAgLy8gQWRqdXN0IHdpZHRoIG9mIHBhY2tldCBpbmZvIGNvbHVtblxuICAvLyBQYWNrZXQgaW5mbyBjb2x1bW4gdXNlcyB0d28gZmllbGRzIGFuZCBhbiBleHRyYSAyMXB4IGZvciBcIiBvZiBcIlxuICB2YXIgcGFja2V0SW5mb0NvbHVtbldpZHRoSW5QeCA9ICgyICogUFhfUEVSX0JJVCAqIHBhY2tldEluZm9CaXRXaWR0aCkgKyAyMTtcbiAgcm9vdEVsZW1lbnQuZmluZCgndGQucGFja2V0SW5mbywgdGgucGFja2V0SW5mbycpXG4gICAgICAuY3NzKCd3aWR0aCcsIHBhY2tldEluZm9Db2x1bW5XaWR0aEluUHggKyAncHgnKTtcblxuICAvLyBBZGp1c3Qgd2lkdGggb2YgcGFja2V0IGluZm8gZmllbGRzXG4gIHZhciBwYWNrZXRJbmZvRmllbGRXaWR0aEluRW1zID0gRU1TX1BFUl9CSVQgKiBwYWNrZXRJbmZvQml0V2lkdGg7XG4gIHJvb3RFbGVtZW50LmZpbmQoJ3RkLnBhY2tldEluZm8gaW5wdXQnKVxuICAgICAgLmNzcygnd2lkdGgnLCBwYWNrZXRJbmZvRmllbGRXaWR0aEluRW1zICsgJ2VtJyk7XG59O1xuXG4vKipcbiAqIENoYW5nZSBlbmNvZGluZy1kaXNwbGF5IHNldHRpbmcgYW5kIHJlLXJlbmRlciBwYWNrZXQgY29udGVudHMgYWNjb3JkaW5nbHkuXG4gKiBAcGFyYW0ge0VuY29kaW5nVHlwZVtdfSBuZXdFbmNvZGluZ3NcbiAqL1xuTmV0U2ltTG9nUGFja2V0LnByb3RvdHlwZS5zZXRFbmNvZGluZ3MgPSBmdW5jdGlvbiAobmV3RW5jb2RpbmdzKSB7XG4gIHRoaXMuZW5jb2RpbmdzXyA9IG5ld0VuY29kaW5ncztcbiAgdGhpcy5yZW5kZXIoKTtcbn07XG5cbi8qKlxuICogQ2hhbmdlIGNodW5rIHNpemUgZm9yIGludGVycHJldGluZyBkYXRhIGFuZCByZS1yZW5kZXIgcGFja2V0IGNvbnRlbnRzXG4gKiBhY2NvcmRpbmdseS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBuZXdDaHVua1NpemVcbiAqL1xuTmV0U2ltTG9nUGFja2V0LnByb3RvdHlwZS5zZXRDaHVua1NpemUgPSBmdW5jdGlvbiAobmV3Q2h1bmtTaXplKSB7XG4gIHRoaXMuY2h1bmtTaXplXyA9IG5ld0NodW5rU2l6ZTtcbiAgdGhpcy5yZW5kZXIoKTtcbn07XG5cbi8qKlxuICogTWFyayB0aGUgcGFja2V0IGFzIHJlYWQsIGNoYW5naW5nIGl0cyBzdHlsZSBhbmQgcmVtb3ZpbmcgdGhlIFwibWFyayBhcyByZWFkXCJcbiAqIGJ1dHRvbi5cbiAqL1xuTmV0U2ltTG9nUGFja2V0LnByb3RvdHlwZS5tYXJrQXNSZWFkID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5pc1VucmVhZCkge1xuICAgIHRoaXMuaXNVbnJlYWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMubWFya0FzUmVhZENhbGxiYWNrXygpO1xuICB9XG59O1xuXG5OZXRTaW1Mb2dQYWNrZXQucHJvdG90eXBlLnRvZ2dsZU1pbmltaXplZCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5pc01pbmltaXplZCA9ICF0aGlzLmlzTWluaW1pemVkO1xuICB0aGlzLnJlbmRlcigpO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSB2ZXJ0aWNhbCBzcGFjZSB0aGF0IHRoaXMgbG9nIHBhbmVsIHNob3VsZCBjb25zdW1lIChpbmNsdWRpbmcgbWFyZ2lucylcbiAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRQaXhlbHNcbiAqL1xuTmV0U2ltTG9nUGFuZWwucHJvdG90eXBlLnNldEhlaWdodCA9IGZ1bmN0aW9uIChoZWlnaHRQaXhlbHMpIHtcbiAgdmFyIHJvb3QgPSB0aGlzLmdldFJvb3QoKS5maW5kKCcubmV0c2ltLXBhbmVsJyk7XG4gIHZhciBwYW5lbEhlYWRlciA9IHJvb3QuZmluZCgnaDEnKTtcbiAgdmFyIHBhbmVsQm9keSA9IHJvb3QuZmluZCgnLnBhbmVsLWJvZHknKTtcblxuICB2YXIgcGFuZWxNYXJnaW5zID0gcGFyc2VGbG9hdChyb290LmNzcygnbWFyZ2luLXRvcCcpKSArXG4gICAgICBwYXJzZUZsb2F0KHJvb3QuY3NzKCdtYXJnaW4tYm90dG9tJykpO1xuICB2YXIgaGVhZGVySGVpZ2h0ID0gcGFuZWxIZWFkZXIub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gIHZhciBwYW5lbEJvcmRlcnMgPSBwYXJzZUZsb2F0KHBhbmVsQm9keS5jc3MoJ2JvcmRlci10b3Atd2lkdGgnKSkgK1xuICAgICAgcGFyc2VGbG9hdChwYW5lbEJvZHkuY3NzKCdib3JkZXItYm90dG9tLXdpZHRoJykpO1xuICB2YXIgc2Nyb2xsTWFyZ2lucyA9IHBhcnNlRmxvYXQodGhpcy5zY3JvbGxBcmVhXy5jc3MoJ21hcmdpbi10b3AnKSkgK1xuICAgICAgcGFyc2VGbG9hdCh0aGlzLnNjcm9sbEFyZWFfLmNzcygnbWFyZ2luLWJvdHRvbScpKTtcblxuICAvLyBXZSBzZXQgdGhlIHBhbmVsIGhlaWdodCBieSBmaXhpbmcgdGhlIHNpemUgb2YgaXRzIGlubmVyIHNjcm9sbGFibGVcbiAgLy8gYXJlYS5cbiAgdmFyIG5ld1Njcm9sbFZpZXdwb3J0SGVpZ2h0ID0gaGVpZ2h0UGl4ZWxzIC0gKHBhbmVsTWFyZ2lucyArIGhlYWRlckhlaWdodCArXG4gICAgICBwYW5lbEJvcmRlcnMgKyBzY3JvbGxNYXJnaW5zKTtcbiAgdGhpcy5zY3JvbGxBcmVhXy5oZWlnaHQoTWF0aC5mbG9vcihuZXdTY3JvbGxWaWV3cG9ydEhlaWdodCkpO1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7bnVtYmVyfSB2ZXJ0aWNhbCBzcGFjZSB0aGF0IHBhbmVsIGN1cnJlbnRseSBjb25zdW1lcyAoaW5jbHVkaW5nXG4gKiAgICAgICAgICBtYXJnaW5zKSBpbiBwaXhlbHMuXG4gKi9cbk5ldFNpbUxvZ1BhbmVsLnByb3RvdHlwZS5nZXRIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmdldFJvb3QoKS5maW5kKCcubmV0c2ltLXBhbmVsJykub3V0ZXJIZWlnaHQodHJ1ZSk7XG59O1xuXG4vKipcbiAqIEFmdGVyIHRvZ2dsaW5nIHBhbmVsIHZpc2liaWxpdHksIHRyaWdnZXIgYSBsYXlvdXQgdXBkYXRlIHNvIHNlbmQvbG9nIHBhbmVsXG4gKiBzcGFjZSBpcyBzaGFyZWQgY29ycmVjdGx5LlxuICogQHByaXZhdGVcbiAqIEBvdmVycmlkZVxuICovXG5OZXRTaW1Mb2dQYW5lbC5wcm90b3R5cGUub25NaW5pbWl6ZXJDbGlja18gPSBmdW5jdGlvbiAoKSB7XG4gIE5ldFNpbUxvZ1BhbmVsLnN1cGVyUHJvdG90eXBlLm9uTWluaW1pemVyQ2xpY2tfLmNhbGwodGhpcyk7XG4gIE5ldFNpbUdsb2JhbHMudXBkYXRlTGF5b3V0KCk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHM9IChmdW5jdGlvbigpIHtcbiAgdmFyIHQgPSBmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzLCBmaWx0ZXJzLCBlc2NhcGVcbi8qKi8pIHtcbmVzY2FwZSA9IGVzY2FwZSB8fCBmdW5jdGlvbiAoaHRtbCl7XG4gIHJldHVybiBTdHJpbmcoaHRtbClcbiAgICAucmVwbGFjZSgvJig/IVxcdys7KS9nLCAnJmFtcDsnKVxuICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXG4gICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbn07XG52YXIgYnVmID0gW107XG53aXRoIChsb2NhbHMgfHwge30pIHsgKGZ1bmN0aW9uKCl7IFxuIGJ1Zi5wdXNoKCc8ZGl2IGNsYXNzPVwic2Nyb2xsLWFyZWFcIj5cXG48L2Rpdj5cXG4nKTsgfSkoKTtcbn0gXG5yZXR1cm4gYnVmLmpvaW4oJycpO1xufTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGxvY2Fscykge1xuICAgIHJldHVybiB0KGxvY2FscywgcmVxdWlyZShcImVqc1wiKS5maWx0ZXJzKTtcbiAgfVxufSgpKTsiLCJtb2R1bGUuZXhwb3J0cz0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdCA9IGZ1bmN0aW9uIGFub255bW91cyhsb2NhbHMsIGZpbHRlcnMsIGVzY2FwZVxuLyoqLykge1xuZXNjYXBlID0gZXNjYXBlIHx8IGZ1bmN0aW9uIChodG1sKXtcbiAgcmV0dXJuIFN0cmluZyhodG1sKVxuICAgIC5yZXBsYWNlKC8mKD8hXFx3KzspL2csICcmYW1wOycpXG4gICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xufTtcbnZhciBidWYgPSBbXTtcbndpdGggKGxvY2FscyB8fCB7fSkgeyAoZnVuY3Rpb24oKXsgXG4gYnVmLnB1c2goJycpOzE7XG4gIHZhciBOZXRTaW1Db25zdGFudHMgPSByZXF1aXJlKCcuL05ldFNpbUNvbnN0YW50cycpO1xuICB2YXIgTmV0U2ltR2xvYmFscyA9IHJlcXVpcmUoJy4vTmV0U2ltR2xvYmFscycpO1xuICB2YXIgRGF0YUNvbnZlcnRlcnMgPSByZXF1aXJlKCcuL0RhdGFDb252ZXJ0ZXJzJyk7XG4gIHZhciBpMThuID0gcmVxdWlyZSgnLi9sb2NhbGUnKTtcbiAgdmFyIGdldEVuY29kaW5nTGFiZWwgPSByZXF1aXJlKCcuL05ldFNpbVV0aWxzJykuZ2V0RW5jb2RpbmdMYWJlbDtcbiAgdmFyIFBhY2tldCA9IHJlcXVpcmUoJy4vUGFja2V0Jyk7XG5cbiAgdmFyIGxldmVsID0gTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpO1xuXG4gIHZhciBFbmNvZGluZ1R5cGUgPSBOZXRTaW1Db25zdGFudHMuRW5jb2RpbmdUeXBlO1xuICB2YXIgUGFja2V0VUlDb2x1bW5UeXBlID0gTmV0U2ltQ29uc3RhbnRzLlBhY2tldFVJQ29sdW1uVHlwZTtcblxuICB2YXIgZm9ybWF0QUIgPSBEYXRhQ29udmVydGVycy5mb3JtYXRBQjtcbiAgdmFyIGZvcm1hdEJpbmFyeSA9IERhdGFDb252ZXJ0ZXJzLmZvcm1hdEJpbmFyeTtcbiAgdmFyIGZvcm1hdEhleCA9IERhdGFDb252ZXJ0ZXJzLmZvcm1hdEhleDtcbiAgdmFyIGFsaWduRGVjaW1hbCA9IERhdGFDb252ZXJ0ZXJzLmFsaWduRGVjaW1hbDtcbiAgdmFyIGJpbmFyeVRvQUIgPSBEYXRhQ29udmVydGVycy5iaW5hcnlUb0FCO1xuICB2YXIgYmluYXJ5VG9JbnQgPSBEYXRhQ29udmVydGVycy5iaW5hcnlUb0ludDtcbiAgdmFyIGJpbmFyeVRvSGV4ID0gRGF0YUNvbnZlcnRlcnMuYmluYXJ5VG9IZXg7XG4gIHZhciBiaW5hcnlUb0RlY2ltYWwgPSBEYXRhQ29udmVydGVycy5iaW5hcnlUb0RlY2ltYWw7XG4gIHZhciBiaW5hcnlUb0FzY2lpID0gRGF0YUNvbnZlcnRlcnMuYmluYXJ5VG9Bc2NpaTtcbiAgdmFyIGJpbmFyeVRvQWRkcmVzc1N0cmluZyA9IGZ1bmN0aW9uIChiaW5hcnlTdHJpbmcpIHtcbiAgICByZXR1cm4gRGF0YUNvbnZlcnRlcnMuYmluYXJ5VG9BZGRyZXNzU3RyaW5nKGJpbmFyeVN0cmluZywgbGV2ZWwuYWRkcmVzc0Zvcm1hdCk7XG4gIH07XG4gIHZhciBmb3JtYXRCaW5hcnlGb3JBZGRyZXNzSGVhZGVyID0gZnVuY3Rpb24gKGJpbmFyeVN0cmluZykge1xuICAgIHJldHVybiBEYXRhQ29udmVydGVycy5mb3JtYXRCaW5hcnlGb3JBZGRyZXNzSGVhZGVyKGJpbmFyeVN0cmluZywgbGV2ZWwuYWRkcmVzc0Zvcm1hdCk7XG4gIH07XG5cbiAgLyoqIEB0eXBlIHtQYWNrZXR9ICovXG4gIHZhciBwYWNrZXQgPSBuZXcgUGFja2V0KHBhY2tldFNwZWMsIHBhY2tldEJpbmFyeSk7XG5cbiAgLyoqIEB0eXBlIHtQYWNrZXQuSGVhZGVyVHlwZVtdfSAqL1xuICB2YXIgaGVhZGVyRmllbGRzID0gcGFja2V0U3BlYztcblxuICB2YXIgc2hvd1RvQWRkcmVzcyA9IGhlYWRlckZpZWxkcy5pbmRleE9mKFBhY2tldC5IZWFkZXJUeXBlLlRPX0FERFJFU1MpID4gLTE7XG4gIHZhciBzaG93RnJvbUFkZHJlc3MgPSBoZWFkZXJGaWVsZHMuaW5kZXhPZihQYWNrZXQuSGVhZGVyVHlwZS5GUk9NX0FERFJFU1MpID4gLTE7XG4gIHZhciBzaG93UGFja2V0SW5mbyA9IGhlYWRlckZpZWxkcy5pbmRleE9mKFBhY2tldC5IZWFkZXJUeXBlLlBBQ0tFVF9JTkRFWCkgPiAtMSAmJlxuICAgICAgaGVhZGVyRmllbGRzLmluZGV4T2YoUGFja2V0LkhlYWRlclR5cGUuUEFDS0VUX0NPVU5UKSA+IC0xO1xuXG4gIC8qKlxuICAqIEBuYW1lIGVuYWJsZWRFbmNvZGluZ3NIYXNoXG4gICogQHR5cGUge09iamVjdH1cbiAgKi9cblxuICBmdW5jdGlvbiBpc0VuY29kaW5nRW5hYmxlZChxdWVyeUVuY29kaW5nKSB7XG4gICAgcmV0dXJuIGVuYWJsZWRFbmNvZGluZ3NIYXNoW3F1ZXJ5RW5jb2RpbmddID09PSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhY2tldCBvbmUtbGluZSBzdW1tYXJ5IHNob3VsZCBvbmx5IHVzZSB0aGUgaGlnaGVzdC1sZXZlbCBlbmFibGVkIGVuY29kaW5nLlxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0T25lTGluZVBhY2tldFN1bW1hcnkoKSB7XG4gICAgdmFyIG1lc3NhZ2VCaW5hcnkgPSBwYWNrZXQuZ2V0Qm9keUFzQmluYXJ5KCk7XG4gICAgaWYgKGlzRW5jb2RpbmdFbmFibGVkKEVuY29kaW5nVHlwZS5BU0NJSSkpIHtcbiAgICAgIHJldHVybiBiaW5hcnlUb0FzY2lpKG1lc3NhZ2VCaW5hcnksIGNodW5rU2l6ZSk7XG4gICAgfSBlbHNlIGlmIChpc0VuY29kaW5nRW5hYmxlZChFbmNvZGluZ1R5cGUuREVDSU1BTCkpIHtcbiAgICAgIHJldHVybiBhbGlnbkRlY2ltYWwoYmluYXJ5VG9EZWNpbWFsKG1lc3NhZ2VCaW5hcnksIGNodW5rU2l6ZSkpO1xuICAgIH0gZWxzZSBpZiAoaXNFbmNvZGluZ0VuYWJsZWQoRW5jb2RpbmdUeXBlLkhFWEFERUNJTUFMKSkge1xuICAgICAgcmV0dXJuIGZvcm1hdEhleChiaW5hcnlUb0hleChtZXNzYWdlQmluYXJ5KSwgY2h1bmtTaXplKTtcbiAgICB9IGVsc2UgaWYgKGlzRW5jb2RpbmdFbmFibGVkKEVuY29kaW5nVHlwZS5CSU5BUlkpKSB7XG4gICAgICByZXR1cm4gZm9ybWF0QmluYXJ5KG1lc3NhZ2VCaW5hcnksIGNodW5rU2l6ZSk7XG4gICAgfSBlbHNlIGlmIChpc0VuY29kaW5nRW5hYmxlZChFbmNvZGluZ1R5cGUuQV9BTkRfQikpIHtcbiAgICAgIHJldHVybiBmb3JtYXRBQihiaW5hcnlUb0FCKG1lc3NhZ2VCaW5hcnkpLCBjaHVua1NpemUpO1xuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZUJpbmFyeTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0VuY29kaW5nVHlwZX0gZW5jb2RpbmdUeXBlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b0FkZHJlc3NcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZyb21BZGRyZXNzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYWNrZXRJbmZvXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlXG4gICAqL1xuICBmdW5jdGlvbiBsb2dSb3dJZkVuY29kaW5nRW5hYmxlZChlbmNvZGluZ1R5cGUsIHRvQWRkcmVzcywgZnJvbUFkZHJlc3MsIHBhY2tldEluZm8sIG1lc3NhZ2UpIHtcbiAgICBpZiAoaXNFbmNvZGluZ0VuYWJsZWQoZW5jb2RpbmdUeXBlKSkge1xuICAgICAgOyBidWYucHVzaCgnXFxuICAgICAgICA8dHIgY2xhc3M9XCInLCBlc2NhcGUoKDc5LCAgZW5jb2RpbmdUeXBlICkpLCAnXCI+XFxuICAgICAgICAgIDx0aCBub3dyYXAgY2xhc3M9XCInLCBlc2NhcGUoKDgwLCAgUGFja2V0VUlDb2x1bW5UeXBlLkVOQ09ESU5HX0xBQkVMICkpLCAnXCI+JywgZXNjYXBlKCg4MCwgIGdldEVuY29kaW5nTGFiZWwoZW5jb2RpbmdUeXBlKSApKSwgJzwvdGg+XFxuICAgICAgICAgICcpOzgxOyBpZiAoc2hvd1RvQWRkcmVzcykgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgICAgICA8dGQgbm93cmFwIGNsYXNzPVwiJywgZXNjYXBlKCg4MiwgIFBhY2tldFVJQ29sdW1uVHlwZS5UT19BRERSRVNTICkpLCAnXCI+JywgZXNjYXBlKCg4MiwgIHRvQWRkcmVzcyApKSwgJzwvdGQ+XFxuICAgICAgICAgICcpOzgzOyB9IDsgYnVmLnB1c2goJ1xcbiAgICAgICAgICAnKTs4NDsgaWYgKHNob3dGcm9tQWRkcmVzcykgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgICAgICA8dGQgbm93cmFwIGNsYXNzPVwiJywgZXNjYXBlKCg4NSwgIFBhY2tldFVJQ29sdW1uVHlwZS5GUk9NX0FERFJFU1MgKSksICdcIj4nLCBlc2NhcGUoKDg1LCAgZnJvbUFkZHJlc3MgKSksICc8L3RkPlxcbiAgICAgICAgICAnKTs4NjsgfSA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgICAgJyk7ODc7IGlmIChzaG93UGFja2V0SW5mbykgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgICAgICA8dGQgbm93cmFwIGNsYXNzPVwiJywgZXNjYXBlKCg4OCwgIFBhY2tldFVJQ29sdW1uVHlwZS5QQUNLRVRfSU5GTyApKSwgJ1wiPicsIGVzY2FwZSgoODgsICBwYWNrZXRJbmZvICkpLCAnPC90ZD5cXG4gICAgICAgICAgJyk7ODk7IH0gOyBidWYucHVzaCgnXFxuICAgICAgICAgIDx0ZCBjbGFzcz1cIicsIGVzY2FwZSgoOTAsICBQYWNrZXRVSUNvbHVtblR5cGUuTUVTU0FHRSApKSwgJ1wiPicsIGVzY2FwZSgoOTAsICBtZXNzYWdlICkpLCAnPC90ZD5cXG4gICAgICAgIDwvdHI+XFxuICAgICcpOzkyO1xuICAgIH1cbiAgfVxuIDsgYnVmLnB1c2goJ1xcbiAgJyk7OTY7XG4gICAgdmFyIHRvQWRkcmVzcyA9IHNob3dUb0FkZHJlc3MgPyBwYWNrZXQuZ2V0SGVhZGVyQXNCaW5hcnkoUGFja2V0LkhlYWRlclR5cGUuVE9fQUREUkVTUykgOiAnJztcbiAgICB2YXIgZnJvbUFkZHJlc3MgPSBzaG93RnJvbUFkZHJlc3MgPyBwYWNrZXQuZ2V0SGVhZGVyQXNCaW5hcnkoUGFja2V0LkhlYWRlclR5cGUuRlJPTV9BRERSRVNTKSA6ICcnO1xuICAgIHZhciBwYWNrZXRJbmRleCA9IHNob3dQYWNrZXRJbmZvID8gcGFja2V0LmdldEhlYWRlckFzQmluYXJ5KFBhY2tldC5IZWFkZXJUeXBlLlBBQ0tFVF9JTkRFWCkgOiAnJztcbiAgICB2YXIgcGFja2V0Q291bnQgPSBzaG93UGFja2V0SW5mbyA/IHBhY2tldC5nZXRIZWFkZXJBc0JpbmFyeShQYWNrZXQuSGVhZGVyVHlwZS5QQUNLRVRfQ09VTlQpIDogJyc7XG4gICAgdmFyIG1lc3NhZ2UgPSBwYWNrZXQuZ2V0Qm9keUFzQmluYXJ5KCk7XG4gIDsgYnVmLnB1c2goJ1xcbiAgJyk7MTAzOyBpZiAoaXNNaW5pbWl6ZWQpIHsgOyBidWYucHVzaCgnXFxuICAgICAgPGRpdiBjbGFzcz1cIm1pbmltaXplZC1wYWNrZXQgc2luZ2xlLWxpbmUtd2l0aC1lbGxpcHNpcyB1c2VyLWRhdGFcIj5cXG4gICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtcGx1cy1zcXVhcmUgZXhwYW5kZXJcIj48L2k+XFxuICAgICAgICAnLCBlc2NhcGUoKDEwNiwgIGdldE9uZUxpbmVQYWNrZXRTdW1tYXJ5KCkgKSksICdcXG4gICAgICA8L2Rpdj5cXG4gICcpOzEwODsgfSBlbHNlIHsgOyBidWYucHVzaCgnXFxuICAgIDx0YWJsZSBjbGFzcz1cIm1heGltaXplZC1wYWNrZXRcIj5cXG4gICAgICA8dGhlYWQ+XFxuICAgICAgICA8dHI+XFxuICAgICAgICAgIDx0aCBub3dyYXAgY2xhc3M9XCInLCBlc2NhcGUoKDExMiwgIFBhY2tldFVJQ29sdW1uVHlwZS5FTkNPRElOR19MQUJFTCApKSwgJ1wiPlxcbiAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtbWludXMtc3F1YXJlIGV4cGFuZGVyXCI+PC9pPlxcbiAgICAgICAgICA8L3RoPlxcbiAgICAgICAgICAnKTsxMTU7IGlmIChzaG93VG9BZGRyZXNzKSB7IDsgYnVmLnB1c2goJ1xcbiAgICAgICAgICAgIDx0aCBub3dyYXAgY2xhc3M9XCInLCBlc2NhcGUoKDExNiwgIFBhY2tldFVJQ29sdW1uVHlwZS5UT19BRERSRVNTICkpLCAnXCI+JywgZXNjYXBlKCgxMTYsICBpMThuLnRvKCkgKSksICc8L3RoPlxcbiAgICAgICAgICAnKTsxMTc7IH0gOyBidWYucHVzaCgnXFxuICAgICAgICAgICcpOzExODsgaWYgKHNob3dGcm9tQWRkcmVzcykgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgICAgICA8dGggbm93cmFwIGNsYXNzPVwiJywgZXNjYXBlKCgxMTksICBQYWNrZXRVSUNvbHVtblR5cGUuRlJPTV9BRERSRVNTICkpLCAnXCI+JywgZXNjYXBlKCgxMTksICBpMThuLmZyb20oKSApKSwgJzwvdGg+XFxuICAgICAgICAgICcpOzEyMDsgfSA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgICAgJyk7MTIxOyBpZiAoc2hvd1BhY2tldEluZm8pIHsgOyBidWYucHVzaCgnXFxuICAgICAgICAgICAgPHRoIG5vd3JhcCBjbGFzcz1cIicsIGVzY2FwZSgoMTIyLCAgUGFja2V0VUlDb2x1bW5UeXBlLlBBQ0tFVF9JTkZPICkpLCAnXCI+JywgZXNjYXBlKCgxMjIsICBpMThuLnBhY2tldCgpICkpLCAnPC90aD5cXG4gICAgICAgICAgJyk7MTIzOyB9IDsgYnVmLnB1c2goJ1xcbiAgICAgICAgICA8dGggY2xhc3M9XCInLCBlc2NhcGUoKDEyNCwgIFBhY2tldFVJQ29sdW1uVHlwZS5NRVNTQUdFICkpLCAnXCI+XFxuICAgICAgICAgICAgJywgZXNjYXBlKCgxMjUsICBpMThuLm1lc3NhZ2UoKSApKSwgJ1xcbiAgICAgICAgICA8L3RoPlxcbiAgICAgICAgPC90cj5cXG4gICAgICA8L3RoZWFkPlxcbiAgICAgIDx0Ym9keT5cXG4gICAgICAnKTsxMzA7XG4gICAgICAgIGxvZ1Jvd0lmRW5jb2RpbmdFbmFibGVkKEVuY29kaW5nVHlwZS5BU0NJSSxcbiAgICAgICAgICAgIGJpbmFyeVRvQWRkcmVzc1N0cmluZyh0b0FkZHJlc3MpLFxuICAgICAgICAgICAgYmluYXJ5VG9BZGRyZXNzU3RyaW5nKGZyb21BZGRyZXNzKSxcbiAgICAgICAgICAgIGkxOG4ueE9mWVBhY2tldHMoe1xuICAgICAgICAgICAgICB4OiBiaW5hcnlUb0ludChwYWNrZXRJbmRleCksXG4gICAgICAgICAgICAgIHk6IGJpbmFyeVRvSW50KHBhY2tldENvdW50KVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBiaW5hcnlUb0FzY2lpKG1lc3NhZ2UsIGNodW5rU2l6ZSkpO1xuXG4gICAgICAgIGxvZ1Jvd0lmRW5jb2RpbmdFbmFibGVkKEVuY29kaW5nVHlwZS5ERUNJTUFMLFxuICAgICAgICAgICAgYmluYXJ5VG9BZGRyZXNzU3RyaW5nKHRvQWRkcmVzcyksXG4gICAgICAgICAgICBiaW5hcnlUb0FkZHJlc3NTdHJpbmcoZnJvbUFkZHJlc3MpLFxuICAgICAgICAgICAgaTE4bi54T2ZZUGFja2V0cyh7XG4gICAgICAgICAgICAgIHg6IGJpbmFyeVRvSW50KHBhY2tldEluZGV4KSxcbiAgICAgICAgICAgICAgeTogYmluYXJ5VG9JbnQocGFja2V0Q291bnQpXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGFsaWduRGVjaW1hbChiaW5hcnlUb0RlY2ltYWwobWVzc2FnZSwgY2h1bmtTaXplKSkpO1xuXG4gICAgICAgIGxvZ1Jvd0lmRW5jb2RpbmdFbmFibGVkKEVuY29kaW5nVHlwZS5IRVhBREVDSU1BTCxcbiAgICAgICAgICAgIGJpbmFyeVRvSGV4KHRvQWRkcmVzcyksXG4gICAgICAgICAgICBiaW5hcnlUb0hleChmcm9tQWRkcmVzcyksXG4gICAgICAgICAgICBpMThuLnhPZllQYWNrZXRzKHtcbiAgICAgICAgICAgICAgeDogYmluYXJ5VG9IZXgocGFja2V0SW5kZXgpLFxuICAgICAgICAgICAgICB5OiBiaW5hcnlUb0hleChwYWNrZXRDb3VudClcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZm9ybWF0SGV4KGJpbmFyeVRvSGV4KG1lc3NhZ2UpLCBjaHVua1NpemUpKTtcblxuICAgICAgICBsb2dSb3dJZkVuY29kaW5nRW5hYmxlZChFbmNvZGluZ1R5cGUuQklOQVJZLFxuICAgICAgICAgICAgZm9ybWF0QmluYXJ5Rm9yQWRkcmVzc0hlYWRlcih0b0FkZHJlc3MsIDQpLFxuICAgICAgICAgICAgZm9ybWF0QmluYXJ5Rm9yQWRkcmVzc0hlYWRlcihmcm9tQWRkcmVzcywgNCksXG4gICAgICAgICAgICBmb3JtYXRCaW5hcnkocGFja2V0SW5kZXggKyBwYWNrZXRDb3VudCwgbGV2ZWwucGFja2V0Q291bnRCaXRXaWR0aCksXG4gICAgICAgICAgICBmb3JtYXRCaW5hcnkobWVzc2FnZSwgY2h1bmtTaXplKSk7XG5cbiAgICAgICAgbG9nUm93SWZFbmNvZGluZ0VuYWJsZWQoRW5jb2RpbmdUeXBlLkFfQU5EX0IsXG4gICAgICAgICAgICBiaW5hcnlUb0FCKHRvQWRkcmVzcyksXG4gICAgICAgICAgICBiaW5hcnlUb0FCKGZyb21BZGRyZXNzKSxcbiAgICAgICAgICAgIGZvcm1hdEFCKGJpbmFyeVRvQUIocGFja2V0SW5kZXggKyBwYWNrZXRDb3VudCksIGxldmVsLnBhY2tldENvdW50Qml0V2lkdGgpLFxuICAgICAgICAgICAgZm9ybWF0QUIoYmluYXJ5VG9BQihtZXNzYWdlKSwgY2h1bmtTaXplKSk7XG4gICAgICAgOyBidWYucHVzaCgnXFxuICAgICAgPC90Ym9keT5cXG4gICAgPC90YWJsZT5cXG4gICcpOzE3MjsgfSA7IGJ1Zi5wdXNoKCdcXG4nKTsgfSkoKTtcbn0gXG5yZXR1cm4gYnVmLmpvaW4oJycpO1xufTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGxvY2Fscykge1xuICAgIHJldHVybiB0KGxvY2FscywgcmVxdWlyZShcImVqc1wiKS5maWx0ZXJzKTtcbiAgfVxufSgpKTsiLCIvKipcbiAqIEBvdmVydmlldyBTaW11bGF0aW9uIGVudGl0eSBjb250cm9sbGVyIHJlc2VydmVkIGZvciB0aGUgbG9jYWwgY2xpZW50J3NcbiAqICAgICAgICAgICBzaW11bGF0aW9uIG5vZGUuXG4gKiBAc2VlIE5ldFNpbUNsaWVudE5vZGUgZm9yIHRoZSBjb250cm9sbGVyIHVzZWQgZm9yIG90aGVyIGNsaWVudCBub2Rlc1xuICogICAgICBpbiB0aGUgc2ltdWxhdGlvbi5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgXyA9IHV0aWxzLmdldExvZGFzaCgpO1xudmFyIGkxOG4gPSByZXF1aXJlKCcuL2xvY2FsZScpO1xudmFyIE5ldFNpbUNsaWVudE5vZGUgPSByZXF1aXJlKCcuL05ldFNpbUNsaWVudE5vZGUnKTtcbnZhciBOZXRTaW1FbnRpdHkgPSByZXF1aXJlKCcuL05ldFNpbUVudGl0eScpO1xudmFyIE5ldFNpbUFsZXJ0ID0gcmVxdWlyZSgnLi9OZXRTaW1BbGVydCcpO1xudmFyIE5ldFNpbU1lc3NhZ2UgPSByZXF1aXJlKCcuL05ldFNpbU1lc3NhZ2UnKTtcbnZhciBOZXRTaW1Mb2dnZXIgPSByZXF1aXJlKCcuL05ldFNpbUxvZ2dlcicpO1xudmFyIE5ldFNpbVJvdXRlck5vZGUgPSByZXF1aXJlKCcuL05ldFNpbVJvdXRlck5vZGUnKTtcbnZhciBPYnNlcnZhYmxlRXZlbnQgPSByZXF1aXJlKCcuLi9PYnNlcnZhYmxlRXZlbnQnKTtcblxudmFyIGxvZ2dlciA9IE5ldFNpbUxvZ2dlci5nZXRTaW5nbGV0b24oKTtcbnZhciBOZXRTaW1Db25zdGFudHMgPSByZXF1aXJlKCcuL05ldFNpbUNvbnN0YW50cycpO1xudmFyIE5ldFNpbUdsb2JhbHMgPSByZXF1aXJlKCcuL05ldFNpbUdsb2JhbHMnKTtcblxudmFyIE1lc3NhZ2VHcmFudWxhcml0eSA9IE5ldFNpbUNvbnN0YW50cy5NZXNzYWdlR3JhbnVsYXJpdHk7XG5cbi8qKlxuICogQ2xpZW50IG1vZGVsIG9mIG5vZGUgYmVpbmcgc2ltdWxhdGVkIG9uIHRoZSBsb2NhbCBjbGllbnQuXG4gKlxuICogUHJvdmlkZXMgc3BlY2lhbCBhY2Nlc3MgZm9yIG1hbmlwdWxhdGluZyB0aGUgbG9jYWxseS1vd25lZCBjbGllbnQgbm9kZSBpblxuICogd2F5cyB0aGF0IHlvdSBhcmVuJ3QgYWxsb3dlZCB0byBtYW5pcHVsYXRlIG90aGVyIGNsaWVudCBub2Rlcy5cbiAqXG4gKiBAcGFyYW0geyFOZXRTaW1TaGFyZH0gc2hhcmRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbY2xpZW50Um93XSAtIExvYmJ5IHJvdyBmb3IgdGhpcyByb3V0ZXIuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhdWdtZW50cyBOZXRTaW1DbGllbnROb2RlXG4gKi9cbnZhciBOZXRTaW1Mb2NhbENsaWVudE5vZGUgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzaGFyZCwgY2xpZW50Um93KSB7XG4gIE5ldFNpbUNsaWVudE5vZGUuY2FsbCh0aGlzLCBzaGFyZCwgY2xpZW50Um93KTtcblxuICAvLyBUT0RPIChiYnVjaGFuYW4pOiBDb25zaWRlcjpcbiAgLy8gICAgICBEbyB3ZSBiZW5lZml0IGZyb20gaW5oZXJpdGFuY2UgaGVyZT8gIFdvdWxkIGl0IGJlIGNsZWFuZXIgdG8gbWFrZSB0aGlzXG4gIC8vICAgICAgbm90LWFuLWVudGl0eSB0aGF0IG1hbmlwdWxhdGVzIGEgc3RvY2sgTmV0U2ltQ2xpZW50Tm9kZT8gIFdpbGwgYW5vdGhlclxuICAvLyAgICAgIGRldmVsb3BlciBmaW5kIGl0IGVhc3kgdG8gdW5kZXJzdGFuZCBob3cgdGhpcyBjbGFzcyB3b3Jrcz9cblxuICAvKipcbiAgICogQ2xpZW50IG5vZGVzIGNhbiBiZSBjb25uZWN0ZWQgdG8gb3RoZXIgY2xpZW50cy5cbiAgICogQHR5cGUge05ldFNpbUNsaWVudE5vZGV9XG4gICAqL1xuICB0aGlzLm15UmVtb3RlQ2xpZW50ID0gbnVsbDtcblxuICAvKipcbiAgICogSUQgb2YgdGhlIHJvdXRlciB0aGlzIGNsaWVudCBub2RlIGlzIGNvbm5lY3RlZCB0by4gIFVuZGVmaW5lZCBpZlxuICAgKiBub3QgY29ubmVjdGVkIHRvIGEgcm91dGVyLlxuICAgKiBAdHlwZSB7bnVtYmVyfHVuZGVmaW5lZH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubXlSb3V0ZXJJRF8gPSB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFNldCBvZiByb3V0ZXIgY29udHJvbGxlcnMgZW5hYmxlZCBmb3Igc2ltdWxhdGlvbiBieSB0aGlzIG5vZGUuXG4gICAqIEB0eXBlIHtOZXRTaW1Sb3V0ZXJOb2RlW119XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnJvdXRlcnNfID0gW107XG5cbiAgLyoqXG4gICAqIFdpZGdldCB3aGVyZSB3ZSB3aWxsIHBvc3Qgc2VudCBtZXNzYWdlcy5cbiAgICogQHR5cGUge05ldFNpbUxvZ1BhbmVsfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5zZW50TG9nXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFdpZGdldCB3aGVyZSB3ZSB3aWxsIHBvc3QgcmVjZWl2ZWQgbWVzc2FnZXNcbiAgICogQHR5cGUge05ldFNpbUxvZ1BhbmVsfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5yZWNlaXZlZExvZ18gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBDaGFuZ2UgZXZlbnQgb3RoZXJzIGNhbiBvYnNlcnZlLCB3aGljaCB3ZSB3aWxsIGZpcmUgd2hlbiB3ZVxuICAgKiBjb25uZWN0IG9yIGRpc2Nvbm5lY3QgZnJvbSBhIHJvdXRlciBvciByZW1vdGUgY2xpZW50XG4gICAqIEB0eXBlIHtPYnNlcnZhYmxlRXZlbnR9XG4gICAqL1xuICB0aGlzLnJlbW90ZUNoYW5nZSA9IG5ldyBPYnNlcnZhYmxlRXZlbnQoKTtcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZm9yIHdoZW4gc29tZXRoaW5nIGluZGljYXRlcyB0aGF0IHRoaXMgbm9kZSBoYXMgYmVlblxuICAgKiBkaXNjb25uZWN0ZWQgZnJvbSB0aGUgaW5zdGFuY2UuXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMub25Ob2RlTG9zdENvbm5lY3Rpb25fID0gZnVuY3Rpb24gKCkge307XG5cbiAgLyoqXG4gICAqIEV2ZW50IHJlZ2lzdHJhdGlvbiBpbmZvcm1hdGlvblxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgdGhpcy5ldmVudEtleXMgPSB7fTtcbn07XG5OZXRTaW1Mb2NhbENsaWVudE5vZGUuaW5oZXJpdHMoTmV0U2ltQ2xpZW50Tm9kZSk7XG5cbi8qKlxuICogU3RhdGljIGFzeW5jIGNyZWF0aW9uIG1ldGhvZC4gU2VlIE5ldFNpbUVudGl0eS5jcmVhdGUoKS5cbiAqIEBwYXJhbSB7IU5ldFNpbVNoYXJkfSBzaGFyZFxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BsYXlOYW1lXG4gKiBAcGFyYW0geyFOb2RlU3R5bGVDYWxsYmFja30gb25Db21wbGV0ZSAtIE1ldGhvZCB0aGF0IHdpbGwgYmUgZ2l2ZW4gdGhlXG4gKiAgICAgICAgY3JlYXRlZCBlbnRpdHksIG9yIG51bGwgaWYgZW50aXR5IGNyZWF0aW9uIGZhaWxlZC5cbiAqL1xuTmV0U2ltTG9jYWxDbGllbnROb2RlLmNyZWF0ZSA9IGZ1bmN0aW9uIChzaGFyZCwgZGlzcGxheU5hbWUsIG9uQ29tcGxldGUpIHtcbiAgLy8gVE9ETyAoYmJ1Y2hhbmFuKTogTW9kaWZ5IGFuZCByZXR1cm4gdGhlIHRlbXBsYXRlIG5vZGUgaW5zdGVhZCBvZlxuICAvLyBtYWtpbmcgdHdvIGluIHRoaXMgbWV0aG9kLlxuICB2YXIgdGVtcGxhdGVOb2RlID0gbmV3IE5ldFNpbUxvY2FsQ2xpZW50Tm9kZShzaGFyZCk7XG4gIHRlbXBsYXRlTm9kZS5kaXNwbGF5TmFtZV8gPSBkaXNwbGF5TmFtZTtcbiAgdGVtcGxhdGVOb2RlLmdldFRhYmxlKCkuY3JlYXRlKHRlbXBsYXRlTm9kZS5idWlsZFJvdygpLCBmdW5jdGlvbiAoZXJyLCByb3cpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBvbkNvbXBsZXRlKGVyciwgbnVsbCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5ld05vZGUgPSBuZXcgTmV0U2ltTG9jYWxDbGllbnROb2RlKHNoYXJkLCByb3cpO1xuICAgIG9uQ29tcGxldGUobnVsbCwgbmV3Tm9kZSk7XG4gIH0pO1xufTtcblxuLyoqIFNldCBub2RlJ3MgZGlzcGxheSBuYW1lLiAgRG9lcyBub3QgdHJpZ2dlciBhbiB1cGRhdGUhICovXG5OZXRTaW1Mb2NhbENsaWVudE5vZGUucHJvdG90eXBlLnNldERpc3BsYXlOYW1lID0gZnVuY3Rpb24gKGRpc3BsYXlOYW1lKSB7XG4gIHRoaXMuZGlzcGxheU5hbWVfID0gZGlzcGxheU5hbWU7XG59O1xuXG4vKipcbiAqIENvbmZpZ3VyZSB0aGlzIG5vZGUgY29udHJvbGxlciB0byBhY3RpdmVseSBzaW11bGF0ZSwgYW5kIHRvIHBvc3Qgc2VudCBhbmRcbiAqIHJlY2VpdmVkIG1lc3NhZ2VzIHRvIHRoZSBnaXZlbiBsb2cgd2lkZ2V0cy5cbiAqIEBwYXJhbSB7IU5ldFNpbUxvZ1BhbmVsfSBzZW50TG9nXG4gKiBAcGFyYW0geyFOZXRTaW1Mb2dQYW5lbH0gcmVjZWl2ZWRMb2dcbiAqL1xuTmV0U2ltTG9jYWxDbGllbnROb2RlLnByb3RvdHlwZS5pbml0aWFsaXplU2ltdWxhdGlvbiA9IGZ1bmN0aW9uIChzZW50TG9nLFxuICAgIHJlY2VpdmVkTG9nKSB7XG4gIHRoaXMuc2VudExvZ18gPSBzZW50TG9nO1xuICB0aGlzLnJlY2VpdmVkTG9nXyA9IHJlY2VpdmVkTG9nO1xuXG4gIC8vIFN1YnNjcmliZSB0byB0YWJsZSBjaGFuZ2VzXG4gIHRoaXMuZXZlbnRLZXlzLm5vZGVUYWJsZSA9IHRoaXMuc2hhcmRfLm5vZGVUYWJsZS50YWJsZUNoYW5nZS5yZWdpc3RlcihcbiAgICAgIHRoaXMub25Ob2RlVGFibGVDaGFuZ2VfLmJpbmQodGhpcykpO1xuICB0aGlzLmV2ZW50S2V5cy53aXJlVGFibGUgPSB0aGlzLnNoYXJkXy53aXJlVGFibGUudGFibGVDaGFuZ2UucmVnaXN0ZXIoXG4gICAgICB0aGlzLm9uV2lyZVRhYmxlQ2hhbmdlXy5iaW5kKHRoaXMpKTtcbiAgdGhpcy5ldmVudEtleXMubWVzc2FnZVRhYmxlID0gdGhpcy5zaGFyZF8ubWVzc2FnZVRhYmxlLnRhYmxlQ2hhbmdlLnJlZ2lzdGVyKFxuICAgICAgdGhpcy5vbk1lc3NhZ2VUYWJsZUNoYW5nZV8uYmluZCh0aGlzKSk7XG4gIHRoaXMuZXZlbnRLZXlzLnJlZ2lzdGVyZWRPblNoYXJkID0gdGhpcy5zaGFyZF87XG5cbiAgLy8gU2V0IHVwIGluaXRpYWwgc3RhdGUgZnJvbSBjYWNoZWQgcm93c1xuICB0aGlzLm9uTm9kZVRhYmxlQ2hhbmdlXygpO1xufTtcblxuLyoqXG4gKiBHaXZlcyB0aGUgc2ltdWxhdGluZyBub2RlIGEgY2hhbmNlIHRvIHVucmVnaXN0ZXIgZnJvbSBhbnl0aGluZyBpdCB3YXNcbiAqIG9ic2VydmluZy5cbiAqL1xuTmV0U2ltTG9jYWxDbGllbnROb2RlLnByb3RvdHlwZS5zdG9wU2ltdWxhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuZXZlbnRLZXlzLnJlZ2lzdGVyZWRPblNoYXJkKSB7XG4gICAgdGhpcy5ldmVudEtleXMucmVnaXN0ZXJlZE9uU2hhcmQubm9kZVRhYmxlLnRhYmxlQ2hhbmdlLnVucmVnaXN0ZXIoXG4gICAgICAgIHRoaXMuZXZlbnRLZXlzLm5vZGVUYWJsZSk7XG4gICAgdGhpcy5ldmVudEtleXMucmVnaXN0ZXJlZE9uU2hhcmQud2lyZVRhYmxlLnRhYmxlQ2hhbmdlLnVucmVnaXN0ZXIoXG4gICAgICAgIHRoaXMuZXZlbnRLZXlzLndpcmVUYWJsZSk7XG4gICAgdGhpcy5ldmVudEtleXMucmVnaXN0ZXJlZE9uU2hhcmQubWVzc2FnZVRhYmxlLnRhYmxlQ2hhbmdlLnVucmVnaXN0ZXIoXG4gICAgICAgIHRoaXMuZXZlbnRLZXlzLm1lc3NhZ2VUYWJsZSk7XG4gICAgdGhpcy5ldmVudEtleXMucmVnaXN0ZXJlZE9uU2hhcmQgPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIFRpY2tzIHRoZSBzaW11bGF0aW9uIHJvdXRlcnNcbiAqIEBwYXJhbSB7IVJ1bkxvb3AuQ2xvY2t9IGNsb2NrXG4gKi9cbk5ldFNpbUxvY2FsQ2xpZW50Tm9kZS5wcm90b3R5cGUudGljayA9IGZ1bmN0aW9uIChjbG9jaykge1xuICAvLyBUT0RPIChiYnVjaGFuYW4pOiBNb3ZlIHRoZSByb3V0ZXIgY29sbGVjdGlvbiBhbmQgdGlja2luZyB0aGVcbiAgLy8gcm91dGVycyB1cCB0byBuZXRzaW0uanMgKG9yIGVsc2V3aGVyZSlcbiAgdGhpcy5yb3V0ZXJzXy5mb3JFYWNoKGZ1bmN0aW9uIChyb3V0ZXIpIHtcbiAgICByb3V0ZXIudGljayhjbG9jayk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBHaXZlIHRoaXMgbm9kZSBhbiBhY3Rpb24gdG8gdGFrZSBpZiBpdCBkZXRlY3RzIHRoYXQgaXQgaXMgbm8gbG9uZ2VyIHBhcnRcbiAqIG9mIHRoZSBzaGFyZC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG9uTm9kZUxvc3RDb25uZWN0aW9uXG4gKi9cbk5ldFNpbUxvY2FsQ2xpZW50Tm9kZS5wcm90b3R5cGUuc2V0TG9zdENvbm5lY3Rpb25DYWxsYmFjayA9IGZ1bmN0aW9uIChcbiAgICBvbk5vZGVMb3N0Q29ubmVjdGlvbikge1xuICB0aGlzLm9uTm9kZUxvc3RDb25uZWN0aW9uXyA9IG9uTm9kZUxvc3RDb25uZWN0aW9uO1xufTtcblxuLyoqXG4gKiBJZiBhIGNsaWVudCB1cGRhdGUgZmFpbHMsIHNob3VsZCBhdHRlbXB0IGFuIGF1dG9tYXRpYyByZWNvbm5lY3QuXG4gKiBAcGFyYW0ge05vZGVTdHlsZUNhbGxiYWNrfSBbb25Db21wbGV0ZV1cbiAqL1xuTmV0U2ltTG9jYWxDbGllbnROb2RlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAob25Db21wbGV0ZSkge1xuICBvbkNvbXBsZXRlID0gb25Db21wbGV0ZSB8fCBmdW5jdGlvbiAoKSB7fTtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIE5ldFNpbUxvY2FsQ2xpZW50Tm9kZS5zdXBlclByb3RvdHlwZS51cGRhdGUuY2FsbCh0aGlzLCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoXCJMb2NhbCBub2RlIHVwZGF0ZSBmYWlsZWQ6IFwiICsgZXJyLm1lc3NhZ2UpO1xuICAgICAgc2VsZi5vbk5vZGVMb3N0Q29ubmVjdGlvbl8oKTtcbiAgICB9XG4gICAgb25Db21wbGV0ZShlcnIsIHJlc3VsdCk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBDb25uZWN0IHRvIGEgcmVtb3RlIGNsaWVudCBub2RlLlxuICogQHBhcmFtIHtOZXRTaW1DbGllbnROb2RlfSBjbGllbnRcbiAqIEBwYXJhbSB7IU5vZGVTdHlsZUNhbGxiYWNrfSBvbkNvbXBsZXRlXG4gKi9cbk5ldFNpbUxvY2FsQ2xpZW50Tm9kZS5wcm90b3R5cGUuY29ubmVjdFRvQ2xpZW50ID0gZnVuY3Rpb24gKGNsaWVudCwgb25Db21wbGV0ZSkge1xuICB0aGlzLmNvbm5lY3RUb05vZGUoY2xpZW50LCBmdW5jdGlvbiAoZXJyLCB3aXJlKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgb25Db21wbGV0ZShlcnIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIENoZWNrIHdoZXRoZXIgV0UganVzdCBlc3RhYmxpc2hlZCBhIG11dHVhbCBjb25uZWN0aW9uIHdpdGggYSByZW1vdGUgY2xpZW50LlxuICAgIHRoaXMuc2hhcmRfLndpcmVUYWJsZS5yZWZyZXNoKCkuYWx3YXlzKGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMub25XaXJlVGFibGVDaGFuZ2VfKHRoaXMuc2hhcmRfLndpcmVUYWJsZS5yZWFkQWxsKCkpO1xuICAgICAgb25Db21wbGV0ZShlcnIsIHdpcmUpO1xuICAgIH0uYmluZCh0aGlzKSk7XG4gIH0uYmluZCh0aGlzKSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7IU5ldFNpbVJvdXRlck5vZGV9IHJvdXRlclxuICogQHBhcmFtIHtOb2RlU3R5bGVDYWxsYmFja30gb25Db21wbGV0ZVxuICovXG5OZXRTaW1Mb2NhbENsaWVudE5vZGUucHJvdG90eXBlLmNvbm5lY3RUb1JvdXRlciA9IGZ1bmN0aW9uIChyb3V0ZXIsIG9uQ29tcGxldGUpIHtcbiAgb25Db21wbGV0ZSA9IG9uQ29tcGxldGUgfHwgZnVuY3Rpb24gKCkge307XG5cbiAgbG9nZ2VyLmluZm8odGhpcy5nZXREaXNwbGF5TmFtZSgpICsgXCI6IENvbm5lY3RpbmcgdG8gXCIgKyByb3V0ZXIuZ2V0RGlzcGxheU5hbWUoKSk7XG4gIHRoaXMuY29ubmVjdFRvTm9kZShyb3V0ZXIsIGZ1bmN0aW9uIChlcnIsIHdpcmUpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBvbkNvbXBsZXRlKGVycik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5teVJvdXRlcklEXyA9IHJvdXRlci5lbnRpdHlJRDtcblxuICAgIHRoaXMucmVtb3RlQ2hhbmdlLm5vdGlmeU9ic2VydmVycyh0aGlzLmdldE91dGdvaW5nV2lyZSgpLCB0aGlzLmdldE15Um91dGVyKCkpO1xuICAgIG9uQ29tcGxldGUobnVsbCwgd2lyZSk7XG4gIH0uYmluZCh0aGlzKSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhbiBhcHByb3ByaWF0ZSBpbml0aWFsIHdpcmUgcm93IGZvciBjb25uZWN0aW5nIHRvIHRoZSBnaXZlbiBub2RlLlxuICogT3ZlcnJpZGVzIE5ldFNpbU5vZGUgdmVyc2lvbiB0byBhZGQgaW1wcm92ZWQgY29ubmVjdC10by1yb3V0ZXIgZnVuY3Rpb25hbGl0eS5cbiAqIEBwYXJhbSB7IU5ldFNpbU5vZGV9IG90aGVyTm9kZVxuICogQHJldHVybnMge1dpcmVSb3d9XG4gKiBAb3ZlcnJpZGVcbiAqL1xuTmV0U2ltTG9jYWxDbGllbnROb2RlLnByb3RvdHlwZS5tYWtlV2lyZVJvd0ZvckNvbm5lY3RpbmdUbyA9IGZ1bmN0aW9uIChvdGhlck5vZGUpIHtcbiAgaWYgKG90aGVyTm9kZSBpbnN0YW5jZW9mIE5ldFNpbVJvdXRlck5vZGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbG9jYWxOb2RlSUQ6IHRoaXMuZW50aXR5SUQsXG4gICAgICByZW1vdGVOb2RlSUQ6IG90aGVyTm9kZS5lbnRpdHlJRCxcbiAgICAgIGxvY2FsQWRkcmVzczogb3RoZXJOb2RlLmdldFJhbmRvbUF2YWlsYWJsZUNsaWVudEFkZHJlc3MoKSxcbiAgICAgIHJlbW90ZUFkZHJlc3M6IG90aGVyTm9kZS5nZXRBZGRyZXNzKCksXG4gICAgICBsb2NhbEhvc3RuYW1lOiB0aGlzLmdldEhvc3RuYW1lKCksXG4gICAgICByZW1vdGVIb3N0bmFtZTogb3RoZXJOb2RlLmdldEhvc3RuYW1lKClcbiAgICB9O1xuICB9XG4gIHJldHVybiBOZXRTaW1Mb2NhbENsaWVudE5vZGUuc3VwZXJQcm90b3R5cGVcbiAgICAgIC5tYWtlV2lyZVJvd0ZvckNvbm5lY3RpbmdUby5jYWxsKHRoaXMsIG90aGVyTm9kZSk7XG59O1xuXG4vKipcbiAqIEhlbHBlci9hY2Nlc3NvciBmb3Igcm91dGVyIGNvbnRyb2xsZXIgaW5zdGFuY2UgZm9yIHRoZSByb3V0ZXIgdGhhdCB0aGlzXG4gKiBjbGllbnQgaXMgZGlyZWN0bHkgY29ubmVjdGVkIHRvLlxuICogQHJldHVybnMge05ldFNpbVJvdXRlck5vZGV8bnVsbH0gUm91dGVyIHdlIGFyZSBjb25uZWN0ZWQgdG8gb3IgbnVsbCBpZiBub3RcbiAqICAgICAgICAgIGNvbm5lY3RlZCB0byBhIHJvdXRlciBhdCBhbGwuXG4gKi9cbk5ldFNpbUxvY2FsQ2xpZW50Tm9kZS5wcm90b3R5cGUuZ2V0TXlSb3V0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLm15Um91dGVySURfID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBfLmZpbmQodGhpcy5yb3V0ZXJzXywgZnVuY3Rpb24gKHJvdXRlcikge1xuICAgIHJldHVybiByb3V0ZXIuZW50aXR5SUQgPT09IHRoaXMubXlSb3V0ZXJJRF87XG4gIH0uYmluZCh0aGlzKSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZVN0eWxlQ2FsbGJhY2t9IFtvbkNvbXBsZXRlXVxuICovXG5OZXRTaW1Mb2NhbENsaWVudE5vZGUucHJvdG90eXBlLmRpc2Nvbm5lY3RSZW1vdGUgPSBmdW5jdGlvbiAob25Db21wbGV0ZSkge1xuICBvbkNvbXBsZXRlID0gb25Db21wbGV0ZSB8fCBmdW5jdGlvbiAoKSB7fTtcblxuICAvLyBzYXZlIHRoZSB3aXJlIHNvIHdlIGNhbiBkZXN0cm95IGl0XG4gIHZhciB3aXJlID0gdGhpcy5nZXRPdXRnb2luZ1dpcmUoKTtcblxuICAvLyByZW1vdmUgYWxsIGxvY2FsIHJlZmVyZW5jZXMgdG8gY29ubmVjdGlvbnNcbiAgdGhpcy5jbGVhblVwQmVmb3JlRGVzdHJveWluZ1dpcmVfKCk7XG5cbiAgLy8gZGVzdHJveSB3aXJlIG9uIEFQSVxuICB3aXJlLmRlc3Ryb3koZnVuY3Rpb24gKGVycikge1xuICAgIC8vIFdlJ3JlIG5vdCBnb2luZyB0byBzdG9wIGlmIGFuIGVycm9yIG9jY3VycmVkIGhlcmU7IHRoZSBlcnJvciBtaWdodFxuICAgIC8vIGp1c3QgYmUgdGhhdCB0aGUgd2lyZSB3YXMgYWxyZWFkeSBjbGVhbmVkIHVwIGJ5IGFub3RoZXIgbm9kZS5cbiAgICAvLyBBcyBsb25nIGFzIHdlIG1ha2UgYSBnb29kLWZhaXRoIGRpc2Nvbm5lY3QgZWZmb3J0LCB0aGUgY2xlYW51cCBzeXN0ZW1cbiAgICAvLyB3aWxsIGNvcnJlY3QgYW55IG1pc3Rha2VzIGFuZCB3ZSB3b24ndCBsb2NrIHVwIG91ciBjbGllbnQgdHJ5aW5nIHRvXG4gICAgLy8gcmUtZGlzY29ubmVjdC5cbiAgICBpZiAoZXJyKSB7XG4gICAgICBsb2dnZXIuaW5mbyhcIkVycm9yIHdoaWxlIGRpc2Nvbm5lY3Rpbmc6IFwiICsgZXJyLm1lc3NhZ2UpO1xuICAgIH1cbiAgICBvbkNvbXBsZXRlKG51bGwpO1xuICB9LmJpbmQodGhpcykpO1xufTtcblxuLyoqXG4gKiBDb21tb24gY2xlYW51cCBiZWhhdmlvciBzaGFyZWQgYmV0d2VlbiB0aGUgc3luY2hyb25vdXMgYW5kIGFzeW5jaHJvbm91c1xuICogZGlzY29ubmVjdCBwYXRocy5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbUxvY2FsQ2xpZW50Tm9kZS5wcm90b3R5cGUuY2xlYW5VcEJlZm9yZURlc3Ryb3lpbmdXaXJlXyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5teVJlbW90ZUNsaWVudCA9IG51bGw7XG4gIHRoaXMubXlSb3V0ZXJJRF8gPSB1bmRlZmluZWQ7XG4gIHRoaXMucmVtb3RlQ2hhbmdlLm5vdGlmeU9ic2VydmVycyhudWxsLCBudWxsKTtcbn07XG5cbi8qKlxuICogUHV0IGEgbWVzc2FnZSBvbiBvdXIgb3V0Z29pbmcgd2lyZSwgdG8gd2hhdGV2ZXIgd2UgYXJlIGNvbm5lY3RlZCB0b1xuICogYXQgdGhlIG1vbWVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXlsb2FkXG4gKiBAcGFyYW0geyFOb2RlU3R5bGVDYWxsYmFja30gb25Db21wbGV0ZVxuICovXG5OZXRTaW1Mb2NhbENsaWVudE5vZGUucHJvdG90eXBlLnNlbmRNZXNzYWdlID0gZnVuY3Rpb24gKHBheWxvYWQsIG9uQ29tcGxldGUpIHtcbiAgdmFyIG15V2lyZSA9IHRoaXMuZ2V0T3V0Z29pbmdXaXJlKCk7XG4gIGlmICghbXlXaXJlKSB7XG4gICAgb25Db21wbGV0ZShuZXcgRXJyb3IoJ0Nhbm5vdCBzZW5kIG1lc3NhZ2U7IG5vdCBjb25uZWN0ZWQuJykpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBsb2NhbE5vZGVJRCA9IG15V2lyZS5sb2NhbE5vZGVJRDtcbiAgdmFyIHJlbW90ZU5vZGVJRCA9IG15V2lyZS5yZW1vdGVOb2RlSUQ7XG5cbiAgLy8gV2hvIHdpbGwgYmUgcmVzcG9uc2libGUgZm9yIHBpY2tpbmcgdXAvY2xlYW5pbmcgdXAgdGhpcyBtZXNzYWdlP1xuICB2YXIgc2ltdWxhdGluZ05vZGVJRCA9IHRoaXMuc2VsZWN0U2ltdWxhdGluZ05vZGVfKGxvY2FsTm9kZUlELCByZW1vdGVOb2RlSUQpO1xuICB2YXIgbGV2ZWxDb25maWcgPSBOZXRTaW1HbG9iYWxzLmdldExldmVsQ29uZmlnKCk7XG4gIHZhciBleHRyYUhvcHMgPSBsZXZlbENvbmZpZy5taW5pbXVtRXh0cmFIb3BzO1xuICBpZiAobGV2ZWxDb25maWcubWluaW11bUV4dHJhSG9wcyAhPT0gbGV2ZWxDb25maWcubWF4aW11bUV4dHJhSG9wcykge1xuICAgIGV4dHJhSG9wcyA9IE5ldFNpbUdsb2JhbHMucmFuZG9tSW50SW5SYW5nZShcbiAgICAgICAgbGV2ZWxDb25maWcubWluaW11bUV4dHJhSG9wcyxcbiAgICAgICAgbGV2ZWxDb25maWcubWF4aW11bUV4dHJhSG9wcyArIDEpO1xuICB9XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBOZXRTaW1NZXNzYWdlLnNlbmQoXG4gICAgICB0aGlzLnNoYXJkXyxcbiAgICAgIHtcbiAgICAgICAgZnJvbU5vZGVJRDogbG9jYWxOb2RlSUQsXG4gICAgICAgIHRvTm9kZUlEOiByZW1vdGVOb2RlSUQsXG4gICAgICAgIHNpbXVsYXRlZEJ5OiBzaW11bGF0aW5nTm9kZUlELFxuICAgICAgICBwYXlsb2FkOiBwYXlsb2FkLFxuICAgICAgICBleHRyYUhvcHNSZW1haW5pbmc6IGV4dHJhSG9wc1xuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uIChlcnIsIHJvdykge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgbG9nZ2VyLmVycm9yKCdGYWlsZWQgdG8gc2VuZCBtZXNzYWdlOiAnICsgZXJyLm1lc3NhZ2UgKyBcIlxcblwiICtcbiAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkpO1xuICAgICAgICAgIE5ldFNpbUFsZXJ0LmVycm9yKGkxOG4uc2VuZE1lc3NhZ2VFcnJvcigpKTtcbiAgICAgICAgICBvbkNvbXBsZXRlKGVycik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbG9nZ2VyLmluZm8odGhpcy5nZXREaXNwbGF5TmFtZSgpICsgJzogU2VudCBtZXNzYWdlOicgK1xuICAgICAgICAgICAgJ1xcbmZyb206ICcgKyBsb2NhbE5vZGVJRCArXG4gICAgICAgICAgICAnXFxudG8gIDogJyArIHJlbW90ZU5vZGVJRCArXG4gICAgICAgICAgICAnXFxuc2ltIDogJyArIHNpbXVsYXRpbmdOb2RlSUQgK1xuICAgICAgICAgICAgJ1xcbmhvcHM6ICcgKyBleHRyYUhvcHMpO1xuXG4gICAgICAgIGlmIChzZWxmLnNlbnRMb2dfKSB7XG4gICAgICAgICAgc2VsZi5zZW50TG9nXy5sb2cocGF5bG9hZCwgcm93LmlkKTtcbiAgICAgICAgfVxuICAgICAgICBvbkNvbXBsZXRlKG51bGwpO1xuICAgICAgfS5iaW5kKHRoaXMpXG4gICk7XG59O1xuXG4vKipcbiAqIERlY2lkZSB3aGV0aGVyIHRoZSBsb2NhbCBub2RlIG9yIHRoZSByZW1vdGUgbm9kZSB3aWxsIGJlIHJlc3BvbnNpYmxlXG4gKiBmb3IgcGlja2luZyB1cCBhbmQgY2xlYW5pbmcgdXAgdGhpcyBtZXNzYWdlIGZyb20gcmVtb3RlIHN0b3JhZ2UuXG4gKiBAcGFyYW0ge251bWJlcn0gbG9jYWxOb2RlSURcbiAqIEBwYXJhbSB7bnVtYmVyfSByZW1vdGVOb2RlSURcbiAqIEByZXR1cm5zIHtudW1iZXJ9IG9uZSBvZiB0aGUgdHdvIElEcyBwcm92aWRlZFxuICovXG5OZXRTaW1Mb2NhbENsaWVudE5vZGUucHJvdG90eXBlLnNlbGVjdFNpbXVsYXRpbmdOb2RlXyA9IGZ1bmN0aW9uIChsb2NhbE5vZGVJRCxcbiAgICByZW1vdGVOb2RlSUQpIHtcbiAgaWYgKE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKS5tZXNzYWdlR3JhbnVsYXJpdHkgPT09IE1lc3NhZ2VHcmFudWxhcml0eS5CSVRTKSB7XG4gICAgLy8gSW4gc2ltcGxleCB3aXJlIG1vZGUsIHRoZSBsb2NhbCBub2RlIGNsZWFucyB1cCBpdHMgb3duIG1lc3NhZ2VzXG4gICAgLy8gd2hlbiBpdCBrbm93cyB0aGV5IGFyZSBubyBsb25nZXIgY3VycmVudC5cbiAgICByZXR1cm4gbG9jYWxOb2RlSUQ7XG4gIH0gZWxzZSBpZiAodGhpcy5teVJvdXRlcklEXyAhPT0gdW5kZWZpbmVkICYmIHRoaXMubXlSb3V0ZXJJRF8gPT09IHJlbW90ZU5vZGVJRCkge1xuICAgIC8vIElmIHNlbmRpbmcgdG8gYSByb3V0ZXIsIHdlIHdpbGwgZG8gb3VyIG93biBzaW11bGF0aW9uIG9uIHRoZSByb3V0ZXInc1xuICAgIC8vIGJlaGFsZlxuICAgIHJldHVybiBsb2NhbE5vZGVJRDtcbiAgfVxuICAvLyBEZWZhdWx0IGNhc2U6IFRoZSBkZXNpZ25hdGVkIHJlY2lwaWVudCBtdXN0IHBpY2sgdXAgdGhlIG1lc3NhZ2UuXG4gIHJldHVybiByZW1vdGVOb2RlSUQ7XG59O1xuXG4vKipcbiAqIFNlcXVlbnRpYWxseSBwdXRzIGEgbGlzdCBvZiBtZXNzYWdlcyBvbnRvIHRoZSBvdXRnb2luZyB3aXJlLCB0byB3aGF0ZXZlclxuICogd2UgYXJlIGNvbm5lY3RlZCB0byBhdCB0aGUgbW9tZW50LlxuICogQHBhcmFtIHtzdHJpbmdbXX0gcGF5bG9hZHNcbiAqIEBwYXJhbSB7IU5vZGVTdHlsZUNhbGxiYWNrfSBvbkNvbXBsZXRlXG4gKi9cbk5ldFNpbUxvY2FsQ2xpZW50Tm9kZS5wcm90b3R5cGUuc2VuZE1lc3NhZ2VzID0gZnVuY3Rpb24gKHBheWxvYWRzLCBvbkNvbXBsZXRlKSB7XG4gIGlmIChwYXlsb2Fkcy5sZW5ndGggPT09IDApIHtcbiAgICBvbkNvbXBsZXRlKG51bGwpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuc2VuZE1lc3NhZ2UocGF5bG9hZHNbMF0sIGZ1bmN0aW9uIChlcnIsIHJlc3VsdCkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIG9uQ29tcGxldGUoZXJyLCByZXN1bHQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc2VuZE1lc3NhZ2VzKHBheWxvYWRzLnNsaWNlKDEpLCBvbkNvbXBsZXRlKTtcbiAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogV2hlbmV2ZXIgdGhlIG5vZGUgdGFibGUgY2hhbmdlcywgbWFrZSBuZWVkZWQgY2hhbmdlcyB0byBvdXIgY29sbGVjdGlvbiBvZlxuICogcm91dGVycyBjb25maWd1cmVkIHRvIHNpbXVsYXRlIGZvciB0aGUgbG9jYWwgbm9kZS5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbUxvY2FsQ2xpZW50Tm9kZS5wcm90b3R5cGUub25Ob2RlVGFibGVDaGFuZ2VfID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbm9kZVJvd3MgPSB0aGlzLnNoYXJkXy5ub2RlVGFibGUucmVhZEFsbCgpO1xuXG4gIC8vIElmIG91ciBvd24gcm93IGlzIGdvbmUsIGRyb3AgZXZlcnl0aGluZyBhbmQgaGFuZGxlIGRpc2Nvbm5lY3QuXG4gIGlmICghdGhpcy5jYW5GaW5kT3duUm93SW4obm9kZVJvd3MpKSB7XG4gICAgdGhpcy5vbk5vZGVMb3N0Q29ubmVjdGlvbl8oKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBSZW1vdmUgc2ltdWxhdGluZyByb3V0ZXJzIHRoYXQgaGF2ZSB2YW5pc2hlZCBmcm9tIHJlbW90ZSBzdG9yYWdlLlxuICB0aGlzLnJvdXRlcnNfID0gdGhpcy5yb3V0ZXJzXy5maWx0ZXIoZnVuY3Rpb24gKHNpbXVsYXRpbmdSb3V0ZXIpIHtcbiAgICB2YXIgc3RpbGxFeGlzdHMgPSBub2RlUm93cy5zb21lKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgIHJldHVybiByb3cuaWQgPT09IHNpbXVsYXRpbmdSb3V0ZXIuZW50aXR5SUQ7XG4gICAgfSk7XG4gICAgaWYgKCFzdGlsbEV4aXN0cykge1xuICAgICAgc2ltdWxhdGluZ1JvdXRlci5zdG9wU2ltdWxhdGlvbigpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSk7XG5cbiAgLy8gQ3JlYXRlIGFuZCBzaW11bGF0ZSBuZXcgcm91dGVyc1xuICBub2RlUm93cy5maWx0ZXIoZnVuY3Rpb24gKHJvdykge1xuICAgIHJldHVybiByb3cudHlwZSA9PT0gTmV0U2ltQ29uc3RhbnRzLk5vZGVUeXBlLlJPVVRFUjtcbiAgfSkuZm9yRWFjaChmdW5jdGlvbiAocm93KSB7XG4gICAgdmFyIGFscmVhZHlTaW11bGF0aW5nID0gdGhpcy5yb3V0ZXJzXy5zb21lKGZ1bmN0aW9uIChzaW11bGF0aW5nUm91dGVyKSB7XG4gICAgICByZXR1cm4gcm93LmlkID09PSBzaW11bGF0aW5nUm91dGVyLmVudGl0eUlEO1xuICAgIH0pO1xuXG4gICAgaWYgKCFhbHJlYWR5U2ltdWxhdGluZykge1xuICAgICAgdmFyIG5ld1JvdXRlciA9IG5ldyBOZXRTaW1Sb3V0ZXJOb2RlKHRoaXMuc2hhcmRfLCByb3cpO1xuICAgICAgbmV3Um91dGVyLmluaXRpYWxpemVTaW11bGF0aW9uKHRoaXMuZW50aXR5SUQpO1xuICAgICAgdGhpcy5yb3V0ZXJzXy5wdXNoKG5ld1JvdXRlcik7XG4gICAgfVxuICB9LCB0aGlzKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3RbXX0gbm9kZVJvd3NcbiAqIEByZXR1cm5zIHtib29sZWFufSBUUlVFIGlmIG93biByb3cgaXMgaW4gZ2l2ZW4gcm93IGNvbGxlY3Rpb25cbiAqL1xuTmV0U2ltTG9jYWxDbGllbnROb2RlLnByb3RvdHlwZS5jYW5GaW5kT3duUm93SW4gPSBmdW5jdGlvbiAobm9kZVJvd3MpIHtcbiAgcmV0dXJuIG5vZGVSb3dzLnNvbWUoZnVuY3Rpb24gKHJvdykge1xuICAgIHJldHVybiByb3cuaWQgPT09IHRoaXMuZW50aXR5SUQgJiYgcm93LnV1aWQgPT09IHRoaXMudXVpZDtcbiAgfSwgdGhpcyk7XG59O1xuXG4vKipcbiAqIEhhbmRsZXIgZm9yIGFueSB3aXJlIHRhYmxlIGNoYW5nZS4gIFVzZWQgaGVyZSB0byBkZXRlY3QgbXV0dWFsXG4gKiBjb25uZWN0aW9ucyBiZXR3ZWVuIGNsaWVudCBub2RlcyB0aGF0IGluZGljYXRlIHdlIGNhbiBtb3ZlIHRvIGFcbiAqIFwiY29ubmVjdGVkXCIgc3RhdGUgb3Igc3RvcCB0cnlpbmcgdG8gY29ubmVjdC5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbUxvY2FsQ2xpZW50Tm9kZS5wcm90b3R5cGUub25XaXJlVGFibGVDaGFuZ2VfID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbXlXaXJlID0gdGhpcy5nZXRPdXRnb2luZ1dpcmUoKTtcbiAgaWYgKCFteVdpcmUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgd2lyZVJvd3MgPSB0aGlzLnNoYXJkXy53aXJlVGFibGUucmVhZEFsbCgpO1xuICB2YXIgbXlDb25uZWN0aW9uVGFyZ2V0V2lyZVJvdywgaXNUYXJnZXRDb25uZWN0ZWRUb1NvbWVvbmVFbHNlO1xuXG4gIC8vIExvb2sgZm9yIG11dHVhbCBjb25uZWN0aW9uXG4gIHZhciBtdXR1YWxDb25uZWN0aW9uUm93ID0gXy5maW5kKHdpcmVSb3dzLCBmdW5jdGlvbiAocm93KSB7XG4gICAgcmV0dXJuIHJvdy5yZW1vdGVOb2RlSUQgPT09IG15V2lyZS5sb2NhbE5vZGVJRCAmJlxuICAgICAgICByb3cubG9jYWxOb2RlSUQgPT09IG15V2lyZS5yZW1vdGVOb2RlSUQ7XG4gIH0uYmluZCh0aGlzKSk7XG5cbiAgaWYgKG11dHVhbENvbm5lY3Rpb25Sb3cgJiYgIXRoaXMubXlSZW1vdGVDbGllbnQpIHtcbiAgICAvLyBOZXcgbXV0dWFsIGNvbm5lY3Rpb24hIEdldCB0aGUgbm9kZSBmb3Igb3VyIG93biB1c2UuXG4gICAgTmV0U2ltQ2xpZW50Tm9kZS5nZXQobXV0dWFsQ29ubmVjdGlvblJvdy5sb2NhbE5vZGVJRCwgdGhpcy5zaGFyZF8sXG4gICAgICAgIGZ1bmN0aW9uIChlcnIsIHJlbW90ZUNsaWVudCkge1xuICAgICAgICAgIHRoaXMubXlSZW1vdGVDbGllbnQgPSByZW1vdGVDbGllbnQ7XG4gICAgICAgICAgdGhpcy5yZW1vdGVDaGFuZ2Uubm90aWZ5T2JzZXJ2ZXJzKG15V2lyZSwgdGhpcy5teVJlbW90ZUNsaWVudCk7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gIH0gZWxzZSBpZiAoIW11dHVhbENvbm5lY3Rpb25Sb3cgJiYgdGhpcy5teVJlbW90ZUNsaWVudCkge1xuICAgIC8vIFJlbW90ZSBjbGllbnQgZGlzY29ubmVjdGVkIG9yIHdlIGRpc2Nvbm5lY3RlZDsgZWl0aGVyIHdheSB3ZSBhcmVcbiAgICAvLyBubyBsb25nZXIgY29ubmVjdGVkLlxuICAgIE5ldFNpbUFsZXJ0LmluZm8oaTE4bi5hbGVydFBhcnRuZXJEaXNjb25uZWN0ZWQoKSk7XG4gICAgdGhpcy5kaXNjb25uZWN0UmVtb3RlKCk7XG4gIH0gZWxzZSBpZiAoIW11dHVhbENvbm5lY3Rpb25Sb3cgJiYgIXRoaXMubXlSZW1vdGVDbGllbnQpIHtcbiAgICAvLyBUaGUgY2xpZW50IHdlJ3JlIHRyeWluZyB0byBjb25uZWN0IHRvIG1pZ2h0IGhhdmUgY29ubmVjdGVkIHRvXG4gICAgLy8gc29tZW9uZSBlbHNlOyBjaGVjayBpZiB0aGV5IGRpZCBhbmQgaWYgc28sIHN0b3AgdHJ5aW5nIHRvIGNvbm5lY3RcbiAgICBteUNvbm5lY3Rpb25UYXJnZXRXaXJlUm93ID0gXy5maW5kKHdpcmVSb3dzLCBmdW5jdGlvbihyb3cpIHtcbiAgICAgIHJldHVybiByb3cubG9jYWxOb2RlSUQgPT09IG15V2lyZS5yZW1vdGVOb2RlSUQgJiZcbiAgICAgICAgICByb3cucmVtb3RlTm9kZUlEICE9PSBteVdpcmUubG9jYWxOb2RlSUQ7XG4gICAgfS5iaW5kKHRoaXMpKTtcbiAgICBpc1RhcmdldENvbm5lY3RlZFRvU29tZW9uZUVsc2UgPSBteUNvbm5lY3Rpb25UYXJnZXRXaXJlUm93ID9cbiAgICAgICAgd2lyZVJvd3Muc29tZShmdW5jdGlvbiAocm93KSB7XG4gICAgICAgICAgcmV0dXJuIHJvdy5yZW1vdGVOb2RlSUQgPT09IG15Q29ubmVjdGlvblRhcmdldFdpcmVSb3cubG9jYWxOb2RlSUQgJiZcbiAgICAgICAgICAgICAgcm93LmxvY2FsTm9kZUlEID09PSBteUNvbm5lY3Rpb25UYXJnZXRXaXJlUm93LnJlbW90ZU5vZGVJRDtcbiAgICAgICAgfSkgOiB1bmRlZmluZWQ7XG4gICAgaWYgKG15Q29ubmVjdGlvblRhcmdldFdpcmVSb3cgJiYgaXNUYXJnZXRDb25uZWN0ZWRUb1NvbWVvbmVFbHNlKSB7XG4gICAgICBOZXRTaW1BbGVydC5pbmZvKGkxOG4uYWxlcnRDb25uZWN0aW9uUmVmdXNlZCgpKTtcbiAgICAgIHRoaXMuZGlzY29ubmVjdFJlbW90ZSgpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBMaXN0ZW5zIGZvciBjaGFuZ2VzIHRvIHRoZSBtZXNzYWdlIHRhYmxlLiAgRGV0ZWN0cyBhbmQgaGFuZGxlcyBtZXNzYWdlc1xuICogc2VudCB0byB0aGlzIG5vZGUuXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Mb2NhbENsaWVudE5vZGUucHJvdG90eXBlLm9uTWVzc2FnZVRhYmxlQ2hhbmdlXyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCFOZXRTaW1HbG9iYWxzLmdldExldmVsQ29uZmlnKCkuYXV0b21hdGljUmVjZWl2ZSkge1xuICAgIC8vIEluIHRoaXMgbGV2ZWwsIHdlIHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgcGljayB1cCBtZXNzYWdlcyBkaXJlY3RlZFxuICAgIC8vIGF0IHVzLiAgV2UgbXVzdCBtYW51YWxseSBjYWxsIGEgcmVjZWl2ZSBtZXRob2QgaW5zdGVhZC5cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodGhpcy5pc1Byb2Nlc3NpbmdNZXNzYWdlc18pIHtcbiAgICAvLyBXZSdyZSBhbHJlYWR5IGluIHRoaXMgbWV0aG9kLCBnZXR0aW5nIGNhbGxlZCByZWN1cnNpdmVseSBiZWNhdXNlXG4gICAgLy8gd2UgYXJlIG1ha2luZyBjaGFuZ2VzIHRvIHRoZSB0YWJsZS4gIElnbm9yZSB0aGlzIGNhbGwuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG1lc3NhZ2VzID0gdGhpcy5zaGFyZF8ubWVzc2FnZVRhYmxlLnJlYWRBbGwoKVxuICAgICAgLm1hcChmdW5jdGlvbiAocm93KSB7XG4gICAgICAgIHJldHVybiBuZXcgTmV0U2ltTWVzc2FnZSh0aGlzLnNoYXJkXywgcm93KTtcbiAgICAgIH0uYmluZCh0aGlzKSlcbiAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2UudG9Ob2RlSUQgPT09IHRoaXMuZW50aXR5SUQgJiZcbiAgICAgICAgICAgIG1lc3NhZ2Uuc2ltdWxhdGVkQnkgPT09IHRoaXMuZW50aXR5SUQ7XG4gICAgICB9LmJpbmQodGhpcykpO1xuXG4gIGlmIChtZXNzYWdlcy5sZW5ndGggPT09IDApIHtcbiAgICAvLyBObyBtZXNzYWdlcyBmb3IgdXMsIG5vIHdvcmsgdG8gZG9cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBTZXR1cCAoc3luYyk6IFNldCBwcm9jZXNzaW5nIGZsYWdcbiAgbG9nZ2VyLmluZm8oXCJMb2NhbCBub2RlIHJlY2VpdmVkIFwiICsgbWVzc2FnZXMubGVuZ3RoICsgXCIgbWVzc2FnZXNcIik7XG4gIHRoaXMuaXNQcm9jZXNzaW5nTWVzc2FnZXNfID0gdHJ1ZTtcblxuICAvLyBTdGVwIDEgKGFzeW5jKTogUHVsbCBhbGwgb3VyIG1lc3NhZ2VzIG91dCBvZiBzdG9yYWdlXG4gIE5ldFNpbUVudGl0eS5kZXN0cm95RW50aXRpZXMobWVzc2FnZXMsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0Vycm9yIHB1bGxpbmcgbWVzc2FnZSBvZmYgdGhlIHdpcmU6ICcgKyBlcnIubWVzc2FnZSk7XG4gICAgICB0aGlzLmlzUHJvY2Vzc2luZ01lc3NhZ2VzXyA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFN0ZXAgMiAoc3luYyk6IEhhbmRsZSBhbGwgbWVzc2FnZXNcbiAgICBtZXNzYWdlcy5mb3JFYWNoKGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICB0aGlzLmhhbmRsZU1lc3NhZ2VfKG1lc3NhZ2UpO1xuICAgIH0sIHRoaXMpO1xuXG4gICAgLy8gQ2xlYW51cCAoc3luYyk6IENsZWFyIHByb2Nlc3NpbmcgZmxhZ1xuICAgIGxvZ2dlci5pbmZvKFwiTG9jYWwgbm9kZSBmaW5pc2hlZCBwcm9jZXNzaW5nIFwiICsgbWVzc2FnZXMubGVuZ3RoICsgXCIgbWVzc2FnZXNcIik7XG4gICAgdGhpcy5pc1Byb2Nlc3NpbmdNZXNzYWdlc18gPSBmYWxzZTtcbiAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogUG9zdCBtZXNzYWdlIHRvICdyZWNlaXZlZCcgbG9nLlxuICogQHBhcmFtIHshTmV0U2ltTWVzc2FnZX0gbWVzc2FnZVxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltTG9jYWxDbGllbnROb2RlLnByb3RvdHlwZS5oYW5kbGVNZXNzYWdlXyA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gIGxvZ2dlci5pbmZvKHRoaXMuZ2V0RGlzcGxheU5hbWUoKSArICc6IEhhbmRsaW5nIGluY29taW5nIG1lc3NhZ2UnKTtcbiAgLy8gVE9ETzogSG93IG11Y2ggdmFsaWRhdGlvbiBzaG91bGQgd2UgZG8gaGVyZT9cbiAgaWYgKHRoaXMucmVjZWl2ZWRMb2dfKSB7XG4gICAgdGhpcy5yZWNlaXZlZExvZ18ubG9nKG1lc3NhZ2UucGF5bG9hZCwgbWVzc2FnZS5lbnRpdHlJRCk7XG4gIH1cbn07XG5cbi8qKlxuICogQXN5bmNocm9ub3VzbHkgcmVjZWl2ZSB0aGUgbGF0ZXN0IG1lc3NhZ2Ugc2hhcmVkIGJldHdlZW4gdGhpcyBub2RlXG4gKiBhbmQgaXRzIGNvbm5lY3RlZCByZW1vdGUgbm9kZS5cbiAqIEBwYXJhbSB7IU5vZGVTdHlsZUNhbGxiYWNrfSBvbkNvbXBsZXRlIC0gZ2l2ZW4gdGhlIG1lc3NhZ2UgYXMgYSByZXN1bHQsIG9yXG4gKiAgICAgICAgTlVMTCBpZiBubyBtZXNzYWdlcyBleGlzdC5cbiAqL1xuTmV0U2ltTG9jYWxDbGllbnROb2RlLnByb3RvdHlwZS5nZXRMYXRlc3RNZXNzYWdlT25TaW1wbGV4V2lyZSA9IGZ1bmN0aW9uIChvbkNvbXBsZXRlKSB7XG4gIHZhciBteVdpcmUgPSB0aGlzLmdldE91dGdvaW5nV2lyZSgpO1xuICBpZiAoIW15V2lyZSkge1xuICAgIG9uQ29tcGxldGUobmV3IEVycm9yKFwiVW5hYmxlIHRvIHJldHJpZXZlIG1lc3NhZ2U7IG5vdCBjb25uZWN0ZWQuXCIpKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBEb2VzIGFuIGFzeW5jaHJvbm91cyByZXF1ZXN0IHRvIHRoZSBtZXNzYWdlIHRhYmxlIHRvIGVuc3VyZSB3ZSBoYXZlXG4gIC8vIHRoZSBsYXRlc3QgY29udGVudHNcbiAgdmFyIG1lc3NhZ2VUYWJsZSA9IHRoaXMuc2hhcmRfLm1lc3NhZ2VUYWJsZTtcbiAgbWVzc2FnZVRhYmxlLnJlZnJlc2goKVxuICAgIC5mYWlsKG9uQ29tcGxldGUpXG4gICAgLmRvbmUoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBXZSBvbmx5IGNhcmUgYWJvdXQgcm93cyBvbiBvdXIgKHNpbXBsZXgpIHdpcmVcbiAgICAgICAgdmFyIHJvd3NPbldpcmUgPSBtZXNzYWdlVGFibGUucmVhZEFsbCgpLmZpbHRlcihmdW5jdGlvbiAocm93KSB7XG4gICAgICAgICAgcmV0dXJuIG15V2lyZS5pc01lc3NhZ2VSb3dPblNpbXBsZXhXaXJlKHJvdyk7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG5cbiAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIHJvd3MsIGNvbXBsZXRlIHN1Y2Nlc3NmdWxseSBidXQgcGFzcyBudWxsIHJlc3VsdC5cbiAgICAgICAgaWYgKHJvd3NPbldpcmUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgb25Db21wbGV0ZShudWxsLCBudWxsKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbGFzdFJvdyA9IHJvd3NPbldpcmVbcm93c09uV2lyZS5sZW5ndGggLSAxXTtcbiAgICAgICAgb25Db21wbGV0ZShudWxsLCBuZXcgTmV0U2ltTWVzc2FnZSh0aGlzLnNoYXJkXywgbGFzdFJvdykpO1xuICAgICAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogQXN5bmNocm9ub3VzbHkgc2V0IHRoZSBzdGF0ZSBvZiB0aGUgc2hhcmVkIHdpcmUuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmV3U3RhdGUgLSBwcm9iYWJseSBvdWdodCB0byBiZSBcIjBcIiBvciBcIjFcIlxuICogQHBhcmFtIHshTm9kZVN0eWxlQ2FsbGJhY2t9IG9uQ29tcGxldGVcbiAqL1xuTmV0U2ltTG9jYWxDbGllbnROb2RlLnByb3RvdHlwZS5zZXRTaW1wbGV4V2lyZVN0YXRlID0gZnVuY3Rpb24gKG5ld1N0YXRlLCBvbkNvbXBsZXRlKSB7XG4gIHRoaXMuc2VuZE1lc3NhZ2UobmV3U3RhdGUsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBsb2dnZXIud2FybihlcnIubWVzc2FnZSk7XG4gICAgICBvbkNvbXBsZXRlKG5ldyBFcnJvcihcIkZhaWxlZCB0byBzZXQgd2lyZSBzdGF0ZS5cIikpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFdlJ3JlIG5vdCBkb25lISAgQWxzbyBkbyBvdXIgcGFydCB0byBrZWVwIHRoZSBtZXNzYWdlIHRhYmxlIGNsZWFuLlxuICAgIHRoaXMucmVtb3ZlTXlPbGRNZXNzYWdlc0Zyb21XaXJlXyhvbkNvbXBsZXRlKTtcbiAgfS5iaW5kKHRoaXMpKTtcblxufTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBtZXNzYWdlcyBvbiB0aGUgY3VycmVudCB3aXJlIHRoYXQgYXJlIHNpbXVsYXRlZCBieSB0aGUgbG9jYWxcbiAqIG5vZGUgYW5kIGFyZSBub3QgdGhlIGxhdGVzdCBtZXNzYWdlIG9uIHRoZSB3aXJlLlxuICogVXNlZCBieSBzaW1wbGV4IGNvbmZpZ3VyYXRpb25zIHdoZXJlIHdlIG9ubHkgY2FyZSBhYm91dCB0aGUgd2lyZSdzIGN1cnJlbnRcbiAqIChsYXRlc3QpIHN0YXRlLlxuICogQHBhcmFtIHshTm9kZVN0eWxlQ2FsbGJhY2t9IG9uQ29tcGxldGVcbiAqL1xuTmV0U2ltTG9jYWxDbGllbnROb2RlLnByb3RvdHlwZS5yZW1vdmVNeU9sZE1lc3NhZ2VzRnJvbVdpcmVfID0gZnVuY3Rpb24gKG9uQ29tcGxldGUpIHtcbiAgdmFyIG15V2lyZSA9IHRoaXMuZ2V0T3V0Z29pbmdXaXJlKCk7XG4gIGlmICghbXlXaXJlKSB7XG4gICAgb25Db21wbGV0ZShuZXcgRXJyb3IoXCJVbmFibGUgdG8gcmV0cmlldmUgbWVzc2FnZTsgbm90IGNvbm5lY3RlZC5cIikpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIERvZXMgYW4gYXN5bmNocm9ub3VzIHJlcXVlc3QgdG8gdGhlIG1lc3NhZ2UgdGFibGUgdG8gZW5zdXJlIHdlIGhhdmVcbiAgLy8gdGhlIGxhdGVzdCBjb250ZW50c1xuICB2YXIgbWVzc2FnZVRhYmxlID0gdGhpcy5zaGFyZF8ubWVzc2FnZVRhYmxlO1xuICBtZXNzYWdlVGFibGUucmVmcmVzaCgpXG4gICAgLmZhaWwob25Db21wbGV0ZSlcbiAgICAuZG9uZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFdlIG9ubHkgY2FyZSBhYm91dCByb3dzIG9uIG91ciAoc2ltcGxleCkgd2lyZVxuICAgICAgICB2YXIgcm93c09uV2lyZSA9IG1lc3NhZ2VUYWJsZS5yZWFkQWxsKCkuZmlsdGVyKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICByZXR1cm4gbXlXaXJlLmlzTWVzc2FnZVJvd09uU2ltcGxleFdpcmUocm93KTtcbiAgICAgICAgfSwgdGhpcyk7XG5cbiAgICAgICAgLy8gXCJPbGRcIiByb3dzIGFyZSBhbGwgYnV0IHRoZSBsYXN0IGVsZW1lbnQgKHRoZSBsYXRlc3Qgb25lKVxuICAgICAgICB2YXIgb2xkUm93c09uV2lyZSA9IHJvd3NPbldpcmUuc2xpY2UoMCwgLTEpO1xuXG4gICAgICAgIC8vIFdlIGFyZSBvbmx5IGluIGNoYXJnZSBvZiBkZWxldGluZyBtZXNzYWdlcyB0aGF0IHdlIGFyZSBzaW11bGF0aW5nXG4gICAgICAgIHZhciBteU9sZFJvd3NPbldpcmUgPSBvbGRSb3dzT25XaXJlLmZpbHRlcihmdW5jdGlvbiAocm93KSB7XG4gICAgICAgICAgcmV0dXJuIHJvdy5zaW11bGF0ZWRCeSA9PT0gdGhpcy5lbnRpdHlJRDtcbiAgICAgICAgfSwgdGhpcyk7XG5cbiAgICAgICAgLy8gQ29udmVydCB0byBtZXNzYWdlIGVudGl0aWVzIHNvIHdlIGNhbiBkZXN0cm95IHRoZW1cbiAgICAgICAgdmFyIG15T2xkTWVzc2FnZXNPbldpcmUgPSBteU9sZFJvd3NPbldpcmUubWFwKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IE5ldFNpbU1lc3NhZ2UodGhpcy5zaGFyZF8sIHJvdyk7XG4gICAgICAgIH0sIHRoaXMpO1xuXG4gICAgICAgIE5ldFNpbUVudGl0eS5kZXN0cm95RW50aXRpZXMobXlPbGRNZXNzYWdlc09uV2lyZSwgb25Db21wbGV0ZSk7XG4gICAgICB9LmJpbmQodGhpcykpO1xufTtcbiIsIi8qKlxuICogQG92ZXJ2aWV3IFVJIGNvbnRyb2xsZXIgZm9yIGxvYmJ5IC0gaGFuZGxlcyBmbG93IGZvciBuYW1lIGVudHJ5LCBzZWN0aW9uXG4gKiAgICAgICAgICAgc2VsZWN0aW9uLCBhbmQgcmVtb3RlIG5vZGUgc2VsZWN0aW9uLlxuICogQHNlZSBOZXRTaW1TaGFyZFNlbGVjdGlvblBhbmVsIGZvciBuYW1lIGVudHJ5IGFuZCBzaGFyZCBzZWxlY3Rpb24uXG4gKiBAc2VlIE5ldFNpbVJlbW90ZU5vZGVTZWxlY3Rpb25QYW5lbCBmb3IgaW1wbGVtZW50YXRpb24gb2YgdGhlIGFjdHVhbFxuICogICAgICBsb2JieSB0YWJsZS5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgXyA9IHV0aWxzLmdldExvZGFzaCgpO1xudmFyIGkxOG4gPSByZXF1aXJlKCcuL2xvY2FsZScpO1xudmFyIE5ldFNpbU5vZGVGYWN0b3J5ID0gcmVxdWlyZSgnLi9OZXRTaW1Ob2RlRmFjdG9yeScpO1xudmFyIE5ldFNpbUNsaWVudE5vZGUgPSByZXF1aXJlKCcuL05ldFNpbUNsaWVudE5vZGUnKTtcbnZhciBOZXRTaW1BbGVydCA9IHJlcXVpcmUoJy4vTmV0U2ltQWxlcnQnKTtcbnZhciBOZXRTaW1BcGlFcnJvciA9IHJlcXVpcmUoJy4vTmV0U2ltQXBpRXJyb3InKTtcbnZhciBOZXRTaW1Sb3V0ZXJOb2RlID0gcmVxdWlyZSgnLi9OZXRTaW1Sb3V0ZXJOb2RlJyk7XG52YXIgTmV0U2ltU2hhcmRTZWxlY3Rpb25QYW5lbCA9IHJlcXVpcmUoJy4vTmV0U2ltU2hhcmRTZWxlY3Rpb25QYW5lbCcpO1xudmFyIE5ldFNpbVJlbW90ZU5vZGVTZWxlY3Rpb25QYW5lbCA9IHJlcXVpcmUoJy4vTmV0U2ltUmVtb3RlTm9kZVNlbGVjdGlvblBhbmVsJyk7XG5cbnZhciBsb2dnZXIgPSByZXF1aXJlKCcuL05ldFNpbUxvZ2dlcicpLmdldFNpbmdsZXRvbigpO1xudmFyIE5ldFNpbUdsb2JhbHMgPSByZXF1aXJlKCcuL05ldFNpbUdsb2JhbHMnKTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTaGFyZENob2ljZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IHNoYXJkU2VlZCAtIHVuaXF1ZSBrZXkgZm9yIHNoYXJkIHdpdGhpbiBsZXZlbCwgdXNlZCBpblxuICogICAgICAgICAgIHNoYXJlIFVSTHNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzaGFyZElEIC0gdW5pcXVlIGtleSBmb3Igc2hhcmQgaW4gdGFibGVzIEFQSSwgdXNlZCBhc1xuICogICAgICAgICAgIHByZWZpeCB0byB0YWJsZSBuYW1lcy4gIE11c3QgYmUgNDggY2hhcmFjdGVycyBvciBsZXNzLCBhbmRcbiAqICAgICAgICAgICBjb25zaXN0ZW50bHkgZ2VuZXJhdGFibGUgZnJvbSBhIGxldmVsIElEIGFuZCBzZWVkLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGRpc3BsYXlOYW1lIC0gbG9jYWxpemVkIHNoYXJkIG5hbWVcbiAqL1xuXG4vKipcbiAqIEdlbmVyYXRvciBhbmQgY29udHJvbGxlciBmb3IgbG9iYnkvY29ubmVjdGlvbiBjb250cm9scy5cbiAqXG4gKiBAcGFyYW0ge2pRdWVyeX0gcm9vdERpdlxuICogQHBhcmFtIHtOZXRTaW19IGNvbm5lY3Rpb24gLSBUaGUgc2hhcmQgY29ubmVjdGlvbiB0aGF0IHRoaXNcbiAqICAgICAgICBsb2JieSBjb250cm9sIHdpbGwgbWFuaXB1bGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge0Rhc2hib2FyZFVzZXJ9IG9wdGlvbnMudXNlclxuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubGV2ZWxLZXlcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnNoYXJlZFNoYXJkU2VlZFxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXVnbWVudHMgTmV0U2ltUGFuZWxcbiAqL1xudmFyIE5ldFNpbUxvYmJ5ID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocm9vdERpdiwgbmV0c2ltLCBvcHRpb25zKSB7XG4gIC8qKlxuICAgKiBAdHlwZSB7alF1ZXJ5fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5yb290RGl2XyA9IHJvb3REaXY7XG5cbiAgLyoqXG4gICAqIFNoYXJkIGNvbm5lY3Rpb24gdGhhdCB0aGlzIGxvYmJ5IGNvbnRyb2wgd2lsbCBtYW5pcHVsYXRlLlxuICAgKiBAdHlwZSB7TmV0U2ltfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5uZXRzaW1fID0gbmV0c2ltO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5sZXZlbEtleV8gPSBvcHRpb25zLmxldmVsS2V5O1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7TmV0U2ltU2hhcmRTZWxlY3Rpb25QYW5lbH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuc2hhcmRTZWxlY3Rpb25QYW5lbF8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7TmV0U2ltUmVtb3RlTm9kZVNlbGVjdGlvblBhbmVsfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5ub2RlU2VsZWN0aW9uUGFuZWxfID0gbnVsbDtcblxuICAvKipcbiAgICogQHR5cGUge05ldFNpbVNoYXJkfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5zaGFyZF8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7TmV0U2ltTG9jYWxDbGllbnROb2RlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5teU5vZGVfID0gbnVsbDtcblxuICAvKipcbiAgICogU3RvcmFnZSBmb3IgT2JzZXJ2YWJsZUV2ZW50IHJlZ2lzdHJhdGlvbiBrZXlzLCB0byBtYWtlIHN1cmUgd2VcbiAgICogY2FuIHVucmVnaXN0ZXIgYXMgbmVlZGVkLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgdGhpcy5ldmVudEtleXMgPSB7fTtcblxuICAvKipcbiAgICogQHR5cGUge0Rhc2hib2FyZFVzZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnVzZXJfID0gb3B0aW9ucy51c2VyO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5kaXNwbGF5TmFtZV8gPSAob3B0aW9ucy51c2VyLmlzU2lnbmVkSW4pID8gb3B0aW9ucy51c2VyLm5hbWUgOiAnJztcblxuICAvKipcbiAgICogU2hhcmQgb3B0aW9ucyBmb3IgdGhlIGN1cnJlbnQgdXNlclxuICAgKiBAdHlwZSB7U2hhcmRDaG9pY2VbXX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuc2hhcmRDaG9pY2VzXyA9IFtdO1xuXG4gIC8qKlxuICAgKiBXaGljaCBzaGFyZCBJRCBpcyBjdXJyZW50bHkgc2VsZWN0ZWRcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuc2VsZWN0ZWRTaGFyZElEXyA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogQHR5cGUge05ldFNpbU5vZGVbXX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubm9kZXNPblNoYXJkXyA9IFtdO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7TmV0U2ltTm9kZVtdfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5pbmNvbWluZ0Nvbm5lY3Rpb25Ob2Rlc18gPSBbXTtcblxuICAvKipcbiAgICogQHR5cGUge05ldFNpbU5vZGV9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnJlbW90ZU5vZGVfID0gbnVsbDtcblxuICAvKipcbiAgICogQWxsb3dzIG11bHRpcGxlIG1ldGhvZHMgdG8gaGF2ZSBhICdkaXNhYmxlJyBsb2NrIG9uIHRoZSBsb2JieS5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuZGlzYWJsZUV2ZXJ5dGhpbmdLZXlzXyA9IHt9O1xuXG4gIC8vIEZpZ3VyZSBvdXQgdGhlIGxpc3Qgb2YgdXNlciBzZWN0aW9ucywgd2hpY2ggcmVxdWlyZXMgYW4gYXN5bmMgcmVxdWVzdFxuICAvLyBhbmQgcmUtcmVuZGVyIGlmIHRoZSB1c2VyIGlzIHNpZ25lZCBpbi5cbiAgaWYgKG9wdGlvbnMudXNlci5pc1NpZ25lZEluKSB7XG4gICAgdGhpcy5nZXRVc2VyU2VjdGlvbnNfKGZ1bmN0aW9uIChzZWN0aW9uTGlzdCkge1xuICAgICAgdGhpcy5idWlsZFNoYXJkQ2hvaWNlTGlzdF8oc2VjdGlvbkxpc3QsIG9wdGlvbnMuc2hhcmVkU2hhcmRTZWVkKTtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfS5iaW5kKHRoaXMpKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmJ1aWxkU2hhcmRDaG9pY2VMaXN0XyhbXSwgb3B0aW9ucy5zaGFyZWRTaGFyZFNlZWQpO1xuICB9XG5cbiAgLy8gSW5pdGlhbCByZW5kZXJcbiAgdGhpcy5yZW5kZXIoKTtcblxuICAvLyBSZWdpc3RlciBmb3IgZXZlbnRzXG4gIHRoaXMubmV0c2ltXy5zaGFyZENoYW5nZS5yZWdpc3Rlcih0aGlzLm9uU2hhcmRDaGFuZ2VfLmJpbmQodGhpcykpO1xufTtcblxuLyoqXG4gKiBSZWNyZWF0ZSBtYXJrdXAgd2l0aGluIHBhbmVsIGJvZHkuXG4gKi9cbk5ldFNpbUxvYmJ5LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpc0Nvbm5lY3RlZFRvU2hhcmQgPSAodGhpcy5zaGFyZF8gIT09IG51bGwpO1xuICBpZiAoIWlzQ29ubmVjdGVkVG9TaGFyZCkge1xuXG4gICAgLy8gU2hhcmQgc2VsZWN0aW9uIHBhbmVsOiBDb250cm9scyBmb3Igc2V0dGluZyBkaXNwbGF5IG5hbWUgYW5kIHBpY2tpbmdcbiAgICAvLyBhIHNlY3Rpb24sIGlmIHRoZXkgYXJlbid0IHNldCBhdXRvbWF0aWNhbGx5LlxuICAgIHRoaXMuc2hhcmRTZWxlY3Rpb25QYW5lbF8gPSBuZXcgTmV0U2ltU2hhcmRTZWxlY3Rpb25QYW5lbChcbiAgICAgICAgdGhpcy5yb290RGl2XyxcbiAgICAgICAge1xuICAgICAgICAgIGRpc3BsYXlOYW1lOiB0aGlzLmRpc3BsYXlOYW1lXyxcbiAgICAgICAgICBzaGFyZENob2ljZXM6IHRoaXMuc2hhcmRDaG9pY2VzXyxcbiAgICAgICAgICBzZWxlY3RlZFNoYXJkSUQ6IHRoaXMuc2VsZWN0ZWRTaGFyZElEXyxcbiAgICAgICAgICBkaXNhYmxlQ29udHJvbHM6IHRoaXMuaXNFdmVyeXRoaW5nRGlzYWJsZWQoKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgc2V0TmFtZUNhbGxiYWNrOiB0aGlzLnNldERpc3BsYXlOYW1lLmJpbmQodGhpcyksXG4gICAgICAgICAgc2V0U2hhcmRDYWxsYmFjazogdGhpcy5zZXRTaGFyZElELmJpbmQodGhpcylcbiAgICAgICAgfSk7XG5cbiAgfSBlbHNlIHtcblxuICAgIC8vIE5vZGUgc2VsZWN0aW9uIHBhbmVsOiBUaGUgbG9iYnkgbGlzdCBvZiB3aG8gd2UgY2FuIGNvbm5lY3QgdG8sIGFuZFxuICAgIC8vIGNvbnRyb2xzIGZvciBwaWNraW5nIG9uZSBhbmQgY29ubmVjdGluZy5cbiAgICB0aGlzLm5vZGVTZWxlY3Rpb25QYW5lbF8gPSBuZXcgTmV0U2ltUmVtb3RlTm9kZVNlbGVjdGlvblBhbmVsKFxuICAgICAgICB0aGlzLnJvb3REaXZfLFxuICAgICAgICB7XG4gICAgICAgICAgdXNlcjogdGhpcy51c2VyXyxcbiAgICAgICAgICBzaGFyZElEOiB0aGlzLnNoYXJkXy5pZCxcbiAgICAgICAgICBub2Rlc09uU2hhcmQ6IHRoaXMubm9kZXNPblNoYXJkXyxcbiAgICAgICAgICBpbmNvbWluZ0Nvbm5lY3Rpb25Ob2RlczogdGhpcy5pbmNvbWluZ0Nvbm5lY3Rpb25Ob2Rlc18sXG4gICAgICAgICAgcmVtb3RlTm9kZTogdGhpcy5yZW1vdGVOb2RlXyxcbiAgICAgICAgICBteU5vZGVJRDogdGhpcy5teU5vZGVfLmVudGl0eUlELFxuICAgICAgICAgIGRpc2FibGVDb250cm9sczogdGhpcy5pc0V2ZXJ5dGhpbmdEaXNhYmxlZCgpXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBhZGRSb3V0ZXJDYWxsYmFjazogdGhpcy5hZGRSb3V0ZXJUb0xvYmJ5LmJpbmQodGhpcyksXG4gICAgICAgICAgY2FuY2VsQnV0dG9uQ2FsbGJhY2s6IHRoaXMub25DYW5jZWxCdXR0b25DbGlja18uYmluZCh0aGlzKSxcbiAgICAgICAgICBqb2luQnV0dG9uQ2FsbGJhY2s6IHRoaXMub25Kb2luQnV0dG9uQ2xpY2tfLmJpbmQodGhpcyksXG4gICAgICAgICAgcmVzZXRTaGFyZENhbGxiYWNrOiB0aGlzLm9uUmVzZXRTaGFyZEJ1dHRvbkNsaWNrXy5iaW5kKHRoaXMpXG4gICAgICAgIH0pO1xuXG4gIH1cblxuICB0aGlzLm5ldHNpbV8uZGVib3VuY2VkUmVzaXplRm9vdGVyKCk7XG59O1xuXG5OZXRTaW1Mb2JieS5wcm90b3R5cGUudXBkYXRlTGF5b3V0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5ub2RlU2VsZWN0aW9uUGFuZWxfKSB7XG4gICAgdGhpcy5ub2RlU2VsZWN0aW9uUGFuZWxfLnVwZGF0ZUxheW91dCgpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwbGF5TmFtZVxuICovXG5OZXRTaW1Mb2JieS5wcm90b3R5cGUuc2V0RGlzcGxheU5hbWUgPSBmdW5jdGlvbiAoZGlzcGxheU5hbWUpIHtcbiAgdGhpcy5kaXNwbGF5TmFtZV8gPSBkaXNwbGF5TmFtZTtcbiAgdGhpcy5yZW5kZXIoKTtcblxuICBpZiAodGhpcy5zZWxlY3RlZFNoYXJkSURfICYmIHRoaXMuZGlzcGxheU5hbWVfICYmXG4gICAgICAhdGhpcy5uZXRzaW1fLmlzQ29ubmVjdGVkVG9TaGFyZElEKHRoaXMuc2VsZWN0ZWRTaGFyZElEXykpIHtcbiAgICB0aGlzLm5ldHNpbV8uY29ubmVjdFRvU2hhcmQodGhpcy5zZWxlY3RlZFNoYXJkSURfLCB0aGlzLmRpc3BsYXlOYW1lXyk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHNoYXJkSURcbiAqL1xuTmV0U2ltTG9iYnkucHJvdG90eXBlLnNldFNoYXJkSUQgPSBmdW5jdGlvbiAoc2hhcmRJRCkge1xuICB0aGlzLnNlbGVjdGVkU2hhcmRJRF8gPSBzaGFyZElEO1xuICB0aGlzLnJlbmRlcigpO1xuXG4gIGlmICh0aGlzLnNlbGVjdGVkU2hhcmRJRF8gJiYgdGhpcy5kaXNwbGF5TmFtZV8gJiZcbiAgICAgICF0aGlzLm5ldHNpbV8uaXNDb25uZWN0ZWRUb1NoYXJkSUQodGhpcy5zZWxlY3RlZFNoYXJkSURfKSkge1xuICAgIHRoaXMubmV0c2ltXy5jb25uZWN0VG9TaGFyZCh0aGlzLnNlbGVjdGVkU2hhcmRJRF8sIHRoaXMuZGlzcGxheU5hbWVfKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge05ldFNpbVNoYXJkfSBzaGFyZFxuICogQHBhcmFtIHtOZXRTaW1Mb2NhbENsaWVudE5vZGV9IG15Tm9kZVxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltTG9iYnkucHJvdG90eXBlLm9uU2hhcmRDaGFuZ2VfID0gZnVuY3Rpb24gKHNoYXJkLCBteU5vZGUpIHtcbiAgLy8gVW5yZWdpc3RlciBvbGQgaGFuZGxlcnNcbiAgaWYgKHRoaXMuZXZlbnRLZXlzLnJlZ2lzdGVyZWRTaGFyZCkge1xuICAgIHRoaXMuZXZlbnRLZXlzLnJlZ2lzdGVyZWRTaGFyZC5ub2RlVGFibGUudGFibGVDaGFuZ2UudW5yZWdpc3RlcihcbiAgICAgICAgdGhpcy5ldmVudEtleXMubm9kZVRhYmxlKTtcbiAgICB0aGlzLmV2ZW50S2V5cy5yZWdpc3RlcmVkU2hhcmQud2lyZVRhYmxlLnRhYmxlQ2hhbmdlLnVucmVnaXN0ZXIoXG4gICAgICAgIHRoaXMuZXZlbnRLZXlzLndpcmVUYWJsZSk7XG4gICAgdGhpcy5yZWdpc3RlcmVkU2hhcmQgPSB1bmRlZmluZWQ7XG4gIH1cblxuICB0aGlzLnNoYXJkXyA9IHNoYXJkO1xuICB0aGlzLm15Tm9kZV8gPSBteU5vZGU7XG5cbiAgaWYgKHRoaXMuc2hhcmRfKSB7XG4gICAgLy8gV2UgZ290IGNvbm5lY3RlZCB0byBhIHNoYXJkIVxuICAgIC8vIFJlZ2lzdGVyIGZvciBldmVudHNcbiAgICB0aGlzLmV2ZW50S2V5cy5ub2RlVGFibGUgPSB0aGlzLnNoYXJkXy5ub2RlVGFibGUudGFibGVDaGFuZ2UucmVnaXN0ZXIoXG4gICAgICAgIHRoaXMub25Ob2RlVGFibGVDaGFuZ2VfLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZXZlbnRLZXlzLndpcmVUYWJsZSA9IHRoaXMuc2hhcmRfLndpcmVUYWJsZS50YWJsZUNoYW5nZS5yZWdpc3RlcihcbiAgICAgICAgdGhpcy5vbldpcmVUYWJsZUNoYW5nZV8uYmluZCh0aGlzKSk7XG4gICAgdGhpcy5ldmVudEtleXMucmVnaXN0ZXJlZFNoYXJkID0gdGhpcy5zaGFyZF87XG5cbiAgICAvLyBUcmlnZ2VyIGEgZm9yY2VkIHJlYWQgb2YgdGhlIG5vZGUgdGFibGVcbiAgICB0aGlzLmZldGNoSW5pdGlhbExvYmJ5RGF0YV8oKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBXZSd2ZSBiZWVuIGRpc2Nvbm5lY3RlZCBmcm9tIGEgc2hhcmRcbiAgICAvLyBDbGVhciBvdXIgc2VsZWN0ZWQgc2hhcmQgSURcbiAgICB0aGlzLnNlbGVjdGVkU2hhcmRJRF8gPSB1bmRlZmluZWQ7XG5cbiAgICAvLyBDbGVhciBjYWNoZWQgbG9iYnkgZGF0YVxuICAgIHRoaXMubm9kZXNPblNoYXJkXy5sZW5ndGggPSAwO1xuICAgIHRoaXMuaW5jb21pbmdDb25uZWN0aW9uTm9kZXNfLmxlbmd0aCA9IDA7XG5cbiAgICAvLyBSZWRyYXcgdGhlIGxvYmJ5XG4gICAgdGhpcy5yZW5kZXIoKTtcblxuICAgIC8vIElmIHRoZXJlJ3Mgb25seSBvbmUgb3B0aW9uLCB0cnkgdG8gYXV0by1yZWNvbm5lY3RcbiAgICBpZiAodGhpcy5zaGFyZENob2ljZXNfLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdGhpcy5zZXRTaGFyZElEKHRoaXMuc2hhcmRDaG9pY2VzX1swXS5zaGFyZElEKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogVXBvbiBjb25uZWN0aW5nIHRvIGEgbmV3IHNoYXJkLCB3ZSBuZWVkIHRvIHRyaWdnZXIgYSBtYW51YWwgcmVhZCBvZiB0aGVcbiAqIG5vZGUgYW5kIHdpcmUgdGFibGVzIHRvIGVuc3VyZSBvdXIgbG9iYnkgbGlzdGluZyBpcyBjb3JyZWN0LiAgT3RoZXJ3aXNlIHdlJ2RcbiAqIGhhdmUgdG8gd2FpdCB1bnRpbCBhIGNoYW5nZSB3YXMgZGV0ZWN0ZWQgaW4gb25lIG9mIHRob3NlIHRhYmxlcy5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbUxvYmJ5LnByb3RvdHlwZS5mZXRjaEluaXRpYWxMb2JieURhdGFfID0gZnVuY3Rpb24gKCkge1xuICAkLndoZW4odGhpcy5zaGFyZF8ubm9kZVRhYmxlLnJlZnJlc2goKSwgdGhpcy5zaGFyZF8ud2lyZVRhYmxlLnJlZnJlc2goKSlcbiAgICAgIC5mYWlsKGZ1bmN0aW9uIChub2RlRXJyLCB3aXJlRXJyKSB7XG4gICAgICAgIGlmIChub2RlRXJyKSB7XG4gICAgICAgICAgbG9nZ2VyLndhcm4oJ05vZGUgdGFibGUgcmVmcmVzaCBmYWlsZWQ6ICcgKyBub2RlRXJyKTtcbiAgICAgICAgfSBlbHNlIGlmICh3aXJlRXJyKSB7XG4gICAgICAgICAgbG9nZ2VyLndhcm4oJ1dpcmUgdGFibGUgcmVmcmVzaCBmYWlsZWQ6ICcgKyB3aXJlRXJyKTtcbiAgICAgICAgfVxuICAgICAgfS5iaW5kKHRoaXMpKVxuICAgICAgLmRvbmUoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBCZWNhdXNlIHRoZSBsb2JieSBtYXkgbm90IGdldCB0YWJsZS1jaGFuZ2UgZXZlbnRzIGZyb20gdGhpcyByZWZyZXNoLFxuICAgICAgICAvLyBtYW51YWxseSBwYXNzIHRoZSBjYWNoZWQgdGFibGUgY29udGVudHMgaW4uXG4gICAgICAgIHRoaXMub25Ob2RlVGFibGVDaGFuZ2VfKCk7XG4gICAgICAgIHRoaXMub25XaXJlVGFibGVDaGFuZ2VfKCk7XG5cbiAgICAgICAgLy8gSWYgd2UgdXNlIHJvdXRlcnMgYW5kIHRoZXJlJ3Mgbm8gcm91dGVyLCBjcmVhdGUgYSByb3V0ZXIuXG4gICAgICAgIC8vIFRPRE86IE1vdmUgdGhpcyBsb2dpYyB0byB0aGUgc2VydmVyLCBzb21laG93LlxuICAgICAgICBpZiAoTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpLmNhbkNvbm5lY3RUb1JvdXRlcnMgJiZcbiAgICAgICAgICAgICF0aGlzLmRvZXNTaGFyZENvbnRhaW5Sb3V0ZXIoKSkge1xuICAgICAgICAgIHRoaXMuYWRkUm91dGVyVG9Mb2JieSgpO1xuICAgICAgICB9XG4gICAgICB9LmJpbmQodGhpcykpO1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gd2hldGhlciB0aGUgY3VycmVudGx5IGNhY2hlZCBub2RlIGRhdGEgZm9yIHRoZSBzaGFyZFxuICogICAgICAgICAgaW5jbHVkZXMgYSByb3V0ZXIgbm9kZS5cbiAqL1xuTmV0U2ltTG9iYnkucHJvdG90eXBlLmRvZXNTaGFyZENvbnRhaW5Sb3V0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB1bmRlZmluZWQgIT09IF8uZmluZCh0aGlzLm5vZGVzT25TaGFyZF8sIGZ1bmN0aW9uIChzaGFyZE5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHNoYXJkTm9kZSBpbnN0YW5jZW9mIE5ldFNpbVJvdXRlck5vZGU7XG4gICAgICB9KTtcbn07XG5cbi8qKlxuICogR2VuZXJhdGUgYSBuZXcgcm91dGVyIG5vZGUsIGNvbmZpZ3VyZWQgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IGxldmVsLlxuICogVGhlIGNoYW5nZSB0byB0aGUgbm9kZSB0YWJsZSBzaG91bGQgdHJpZ2dlciBhcHByb3ByaWF0ZSB1cGRhdGVzIHRvIHZhcmlvdXNcbiAqIFVJIGVsZW1lbnRzLlxuICovXG5OZXRTaW1Mb2JieS5wcm90b3R5cGUuYWRkUm91dGVyVG9Mb2JieSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGVuYWJsZUNhbGxiYWNrID0gdGhpcy5kaXNhYmxlRXZlcnl0aGluZygpO1xuICBOZXRTaW1Sb3V0ZXJOb2RlLmNyZWF0ZSh0aGlzLnNoYXJkXywgZnVuY3Rpb24gKGVycikge1xuICAgIGVuYWJsZUNhbGxiYWNrKCk7XG4gICAgaWYgKGVycikge1xuICAgICAgdmFyIFZhbGlkYXRpb25FcnJvciA9IE5ldFNpbUFwaUVycm9yLlZhbGlkYXRpb25FcnJvcjtcbiAgICAgIHN3aXRjaCAoZXJyLmRldGFpbHMpIHtcbiAgICAgICAgY2FzZSBWYWxpZGF0aW9uRXJyb3IuQ09ORkxJQ1Q6XG4gICAgICAgICAgLy8gQW5vdGhlciByb3V0ZXIgd2l0aCB0aGUgc2FtZSByb3V0ZXJOdW1iZXIgYWxyZWFkeSBleGlzdHMuXG4gICAgICAgICAgLy8gSWdub3JlIHRoaXM7IHRvIHRoZSB1c2VyIGl0IGxvb2tzIGxpa2UgaXQgd29ya2VkIVxuICAgICAgICAgIGxvZ2dlci53YXJuKCdEaWQgbm90IGNyZWF0ZSByb3V0ZXI7ICcgK1xuICAgICAgICAgICAgICAnQW5vdGhlciB1c2VyIGNyZWF0ZWQgYSByb3V0ZXIgYXQgdGhlIHNhbWUgdGltZS4nKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFZhbGlkYXRpb25FcnJvci5MSU1JVF9SRUFDSEVEOlxuICAgICAgICAgIC8vIFRoZSBzZXJ2ZXIncyByb3V0ZXIgbGltaXQgaGFzIGJlZW4gcmVhY2hlZC5cbiAgICAgICAgICAvLyBVc3VhbGx5IHRoZSBjbGllbnQgd2lsbCByZW1vdmUgdGhlIFwiQWRkIFJvdXRlclwiIGJ1dHRvbiBmaXJzdC5cbiAgICAgICAgICBsb2dnZXIud2FybignRGlkIG5vdCBjcmVhdGUgcm91dGVyOyBSb3V0ZXIgbGltaXQgcmVhY2hlZC4nKTtcbiAgICAgICAgICBOZXRTaW1BbGVydC53YXJuKGkxOG4ucm91dGVyTGltaXRSZWFjaGVkRXJyb3IoKSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAvLyBNYWxmb3JtZWQgcm93IG9yIHNvbWUgb3RoZXIgdW5leHBlY3RlZCBlcnJvci5cbiAgICAgICAgICBsb2dnZXIuZXJyb3IoXCJVbmFibGUgdG8gY3JlYXRlIHJvdXRlcjogXCIgKyBlcnIubWVzc2FnZSk7XG4gICAgICAgICAgTmV0U2ltQWxlcnQuZXJyb3IoaTE4bi5hZGRSb3V0ZXJUb0xvYmJ5RXJyb3IoKSk7XG4gICAgICB9XG4gICAgfVxuICB9LmJpbmQodGhpcykpO1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVFJVRSBpZiBhbnl0aGluZyBoYXMgcmVxdWVzdGVkIHRoZSB3aG9sZSBsb2JieSB0byBiZVxuICogICAgICAgICAgZGlzYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuTmV0U2ltTG9iYnkucHJvdG90eXBlLmlzRXZlcnl0aGluZ0Rpc2FibGVkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5kaXNhYmxlRXZlcnl0aGluZ0tleXNfKS5sZW5ndGggPiAwO1xufTtcblxuLyoqXG4gKiBEaXNhYmxlIGFsbCBvZiB0aGUgbG9iYnkgY29udHJvbHMgdG9nZXRoZXIuXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259IENhbGxiYWNrIGZvciByZS1lbmFibGluZyB0aGUgbG9iYnkuXG4gKi9cbk5ldFNpbUxvYmJ5LnByb3RvdHlwZS5kaXNhYmxlRXZlcnl0aGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlcXVlc3RLZXkgPSB1dGlscy5jcmVhdGVVdWlkKCk7XG4gIHRoaXMuZGlzYWJsZUV2ZXJ5dGhpbmdLZXlzX1tyZXF1ZXN0S2V5XSA9IHRydWU7XG5cbiAgaWYgKHRoaXMubm9kZVNlbGVjdGlvblBhbmVsXykge1xuICAgIHRoaXMubm9kZVNlbGVjdGlvblBhbmVsXy5kaXNhYmxlRXZlcnl0aGluZygpO1xuICB9XG5cbiAgLy8gUmV0dXJuIGFuICdlbmFibGUnIGNhbGxiYWNrXG4gIHJldHVybiB0aGlzLmVuYWJsZUV2ZXJ5dGhpbmdfLmJpbmQodGhpcywgcmVxdWVzdEtleSk7XG59O1xuXG4vKipcbiAqIFJlbGVhc2UgYSAnZGlzYWJsZS1ob2xkJyBvbiB0aGUgbG9iYnkgYW5kIHJlLWVuYWJsZSB0aGUgbG9iYnkgY29udHJvbHMgaWZcbiAqIGl0IHdhcyB0aGUgbGFzdCBzdWNoIGRpc2FibGUtaG9sZC5cbiAqIEBwYXJhbSB7IXN0cmluZ30ga2V5IC0gYSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhpcyBwYXJ0aWN1bGFyIGRpc2FibGUgcmVxdWVzdC5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbUxvYmJ5LnByb3RvdHlwZS5lbmFibGVFdmVyeXRoaW5nXyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgZGVsZXRlIHRoaXMuZGlzYWJsZUV2ZXJ5dGhpbmdLZXlzX1trZXldO1xuICBpZiAoIXRoaXMuaXNFdmVyeXRoaW5nRGlzYWJsZWQoKSkge1xuICAgIGlmICh0aGlzLm5vZGVTZWxlY3Rpb25QYW5lbF8pIHtcbiAgICAgIHRoaXMubm9kZVNlbGVjdGlvblBhbmVsXy5lbmFibGVFdmVyeXRoaW5nKCk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEhhbmRsZXIgZm9yIGNsaWNraW5nIHRoZSBcIkpvaW5cIiBidXR0b24uXG4gKiBAcGFyYW0ge05ldFNpbUNsaWVudE5vZGV8TmV0U2ltUm91dGVyTm9kZX0gbm9kZVRvSm9pblxuICovXG5OZXRTaW1Mb2JieS5wcm90b3R5cGUub25Kb2luQnV0dG9uQ2xpY2tfID0gZnVuY3Rpb24gKG5vZGVUb0pvaW4pIHtcbiAgdmFyIGVuYWJsZUNhbGxiYWNrID0gdGhpcy5kaXNhYmxlRXZlcnl0aGluZygpO1xuICBpZiAobm9kZVRvSm9pbiBpbnN0YW5jZW9mIE5ldFNpbVJvdXRlck5vZGUpIHtcbiAgICB0aGlzLm5ldHNpbV8uY29ubmVjdFRvUm91dGVyKG5vZGVUb0pvaW4uZW50aXR5SUQsIGVuYWJsZUNhbGxiYWNrKTtcbiAgfSBlbHNlIGlmIChub2RlVG9Kb2luIGluc3RhbmNlb2YgTmV0U2ltQ2xpZW50Tm9kZSkge1xuICAgIHRoaXMubXlOb2RlXy5jb25uZWN0VG9DbGllbnQobm9kZVRvSm9pbiwgZW5hYmxlQ2FsbGJhY2spO1xuICB9XG59O1xuXG4vKipcbiAqIEhhbmRsZXIgZm9yIGNsaWNraW5nIHRoZSBcIkNhbmNlbFwiIGJ1dHRvbiB0byBzdG9wIHRyeWluZyB0byBjb25uZWN0IHRvXG4gKiBhbm90aGVyIGNsaWVudC5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbUxvYmJ5LnByb3RvdHlwZS5vbkNhbmNlbEJ1dHRvbkNsaWNrXyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGVuYWJsZUNhbGxiYWNrID0gdGhpcy5kaXNhYmxlRXZlcnl0aGluZygpO1xuICB0aGlzLm5ldHNpbV8uZGlzY29ubmVjdEZyb21SZW1vdGUoZW5hYmxlQ2FsbGJhY2spO1xufTtcblxuLyoqXG4gKiBIYW5kbGUgZm9yIGNsaWNraW5nIHRoZSByZXNldCBzaGFyZCBidXR0b24uXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Mb2JieS5wcm90b3R5cGUub25SZXNldFNoYXJkQnV0dG9uQ2xpY2tfID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLm5ldHNpbV8ucmVzZXRTaGFyZCgpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2hlbmV2ZXIgYSBjaGFuZ2UgaXMgZGV0ZWN0ZWQgaW4gdGhlIG5vZGVzIHRhYmxlIC0gd2hpY2ggc2hvdWxkXG4gKiB0cmlnZ2VyIGEgcmVmcmVzaCBvZiB0aGUgbG9iYnkgbGlzdGluZ1xuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltTG9iYnkucHJvdG90eXBlLm9uTm9kZVRhYmxlQ2hhbmdlXyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5ub2Rlc09uU2hhcmRfID0gTmV0U2ltTm9kZUZhY3Rvcnkubm9kZXNGcm9tUm93cyh0aGlzLnNoYXJkXyxcbiAgICAgIHRoaXMuc2hhcmRfLm5vZGVUYWJsZS5yZWFkQWxsKCkpO1xuICB0aGlzLnJlbmRlcigpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2hlbmV2ZXIgYSBjaGFuZ2UgaXMgZGV0ZWN0ZWQgaW4gdGhlIHdpcmVzIHRhYmxlLlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltTG9iYnkucHJvdG90eXBlLm9uV2lyZVRhYmxlQ2hhbmdlXyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJvd3MgPSB0aGlzLnNoYXJkXy53aXJlVGFibGUucmVhZEFsbCgpO1xuICAvLyBVcGRhdGUgdGhlIGNvbGxlY3Rpb24gb2Ygbm9kZXMgd2l0aCBjb25uZWN0aW9ucyBwb2ludGluZyB0b3dhcmQgdXMuXG4gIHRoaXMuaW5jb21pbmdDb25uZWN0aW9uTm9kZXNfID0gcm93cy5maWx0ZXIoZnVuY3Rpb24gKHdpcmVSb3cpIHtcbiAgICByZXR1cm4gd2lyZVJvdy5yZW1vdGVOb2RlSUQgPT09IHRoaXMubXlOb2RlXy5lbnRpdHlJRDtcbiAgfSwgdGhpcykubWFwKGZ1bmN0aW9uICh3aXJlUm93KSB7XG4gICAgcmV0dXJuIF8uZmluZCh0aGlzLm5vZGVzT25TaGFyZF8sIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICByZXR1cm4gbm9kZS5lbnRpdHlJRCA9PT0gd2lyZVJvdy5sb2NhbE5vZGVJRDtcbiAgICB9KTtcbiAgfSwgdGhpcykuZmlsdGVyKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgLy8gSW4gY2FzZSB0aGUgd2lyZSB0YWJsZSBjaGFuZ2UgY29tZXMgaW4gYmVmb3JlIHRoZSBub2RlIHRhYmxlIGNoYW5nZS5cbiAgICByZXR1cm4gbm9kZSAhPT0gdW5kZWZpbmVkO1xuICB9KTtcblxuICAvLyBGaW5kIG91dGdvaW5nIHdpcmVzXG4gIHZhciBvdXRnb2luZ1dpcmVSb3cgPSBfLmZpbmQocm93cywgZnVuY3Rpb24gKHdpcmVSb3cpIHtcbiAgICByZXR1cm4gd2lyZVJvdy5sb2NhbE5vZGVJRCA9PT0gdGhpcy5teU5vZGVfLmVudGl0eUlEO1xuICB9LmJpbmQodGhpcykpO1xuXG4gIHRoaXMucmVtb3RlTm9kZV8gPSBvdXRnb2luZ1dpcmVSb3cgP1xuICAgICAgXy5maW5kKHRoaXMubm9kZXNPblNoYXJkXywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUuZW50aXR5SUQgPT09IG91dGdvaW5nV2lyZVJvdy5yZW1vdGVOb2RlSUQ7XG4gICAgICB9KSA6IG51bGw7XG5cbiAgLy8gUmUtcmVuZGVyIHdpdGggbmV3IGluZm9ybWF0aW9uXG4gIHRoaXMucmVuZGVyKCk7XG59O1xuXG5cbi8qKlxuICogU2VuZCBhIHJlcXVlc3QgdG8gZGFzaGJvYXJkIGFuZCByZXRyaWV2ZSBhIEpTT04gYXJyYXkgbGlzdGluZyB0aGVcbiAqIHNlY3Rpb25zIHRoaXMgdXNlciBiZWxvbmdzIHRvLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbUxvYmJ5LnByb3RvdHlwZS5nZXRVc2VyU2VjdGlvbnNfID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHZhciBtZW1iZXJTZWN0aW9uc1JlcXVlc3QgPSAkLmFqYXgoe1xuICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgdXJsOiAnL3YyL3NlY3Rpb25zL21lbWJlcnNoaXAnXG4gIH0pO1xuXG4gIHZhciBvd25lZFNlY3Rpb25zUmVxdWVzdCA9ICQuYWpheCh7XG4gICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICB1cmw6ICcvdjIvc2VjdGlvbnMnXG4gIH0pO1xuXG4gICQud2hlbihtZW1iZXJTZWN0aW9uc1JlcXVlc3QsIG93bmVkU2VjdGlvbnNSZXF1ZXN0KS5kb25lKGZ1bmN0aW9uIChyZXN1bHQxLCByZXN1bHQyKSB7XG4gICAgdmFyIG1lbWJlclNlY3Rpb25EYXRhID0gcmVzdWx0MVswXTtcbiAgICB2YXIgb3duZWRTZWN0aW9uRGF0YSA9IHJlc3VsdDJbMF07XG4gICAgY2FsbGJhY2sobWVtYmVyU2VjdGlvbkRhdGEuY29uY2F0KG93bmVkU2VjdGlvbkRhdGEpKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFBvcHVsYXRlIHRoZSBpbnRlcm5hbCBjYWNoZSBvZiBzaGFyZCBvcHRpb25zLCBnaXZlbiBhIHNldCBvZiB0aGUgY3VycmVudFxuICogdXNlcidzIHNlY3Rpb25zLlxuICogQHBhcmFtIHtBcnJheX0gc2VjdGlvbkxpc3QgLSBsaXN0IG9mIHNlY3Rpb25zIHRoaXMgdXNlciBpcyBhIG1lbWJlciBvclxuICogICAgICAgIGFkbWluaXN0cmF0b3Igb2YuICBFYWNoIHNlY3Rpb24gaGFzIGFuIGlkIGFuZCBhIG5hbWUuICBNYXkgYmUgZW1wdHkuXG4gKiBAcGFyYW0ge3N0cmluZ30gc2hhcmVkU2hhcmRTZWVkIC0gYSBzaGFyZCBJRCBwcmVzZW50IGlmIHdlIHJlYWNoZWQgbmV0c2ltXG4gKiAgICAgICAgdmlhIGEgc2hhcmUgbGluay4gIFdlIHNob3VsZCBtYWtlIHN1cmUgdGhpcyBzaGFyZCBpcyBhbiBvcHRpb24uXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Mb2JieS5wcm90b3R5cGUuYnVpbGRTaGFyZENob2ljZUxpc3RfID0gZnVuY3Rpb24gKFxuICAgIHNlY3Rpb25MaXN0LCBzaGFyZWRTaGFyZFNlZWQpIHtcbiAgdGhpcy5zaGFyZENob2ljZXNfLmxlbmd0aCA9IDA7XG5cbiAgLy8gSWYgd2UgaGF2ZSBhIHNoYXJlZCBzaGFyZCBzZWVkLCBwdXQgaXQgZmlyc3QgaW4gdGhlIGxpc3Q6XG4gIGlmIChzaGFyZWRTaGFyZFNlZWQpIHtcbiAgICB2YXIgc2hhcmVkU2hhcmRJRCA9IHRoaXMubWFrZVNoYXJkSURGcm9tU2VlZF8oc2hhcmVkU2hhcmRTZWVkKTtcbiAgICB0aGlzLnNoYXJkQ2hvaWNlc18ucHVzaCh7XG4gICAgICBzaGFyZFNlZWQ6IHNoYXJlZFNoYXJkU2VlZCxcbiAgICAgIHNoYXJkSUQ6IHNoYXJlZFNoYXJkSUQsXG4gICAgICBkaXNwbGF5TmFtZTogc2hhcmVkU2hhcmRTZWVkXG4gICAgfSk7XG4gIH1cblxuICAvLyBBZGQgdXNlcidzIHNlY3Rpb25zIHRvIHRoZSBzaGFyZCBsaXN0XG4gIHRoaXMuc2hhcmRDaG9pY2VzXyA9IHRoaXMuc2hhcmRDaG9pY2VzXy5jb25jYXQoXG4gICAgICBzZWN0aW9uTGlzdC5tYXAoZnVuY3Rpb24gKHNlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzaGFyZFNlZWQ6IHNlY3Rpb24uaWQsXG4gICAgICAgICAgc2hhcmRJRDogdGhpcy5tYWtlU2hhcmRJREZyb21TZWVkXyhzZWN0aW9uLmlkKSxcbiAgICAgICAgICBkaXNwbGF5TmFtZTogc2VjdGlvbi5uYW1lXG4gICAgICAgIH07XG4gICAgICB9LmJpbmQodGhpcykpKTtcblxuICAvLyBJZiB0aGVyZSBzdGlsbCBhcmVuJ3QgYW55IG9wdGlvbnMsIGdlbmVyYXRlIGEgcmFuZG9tIHNoYXJkXG4gIGlmICh0aGlzLnNoYXJkQ2hvaWNlc18ubGVuZ3RoID09PSAwKSB7XG4gICAgdmFyIHNlZWQgPSB1dGlscy5jcmVhdGVVdWlkKCk7XG4gICAgdmFyIHJhbmRvbVNoYXJkSUQgPSB0aGlzLm1ha2VTaGFyZElERnJvbVNlZWRfKHNlZWQpO1xuICAgIHRoaXMuc2hhcmRDaG9pY2VzXy5wdXNoKHtcbiAgICAgIHNoYXJkU2VlZDogc2VlZCxcbiAgICAgIHNoYXJkSUQ6IHJhbmRvbVNoYXJkSUQsXG4gICAgICBkaXNwbGF5TmFtZTogaTE4bi5teVByaXZhdGVOZXR3b3JrKClcbiAgICB9KTtcbiAgfVxuXG4gIC8vIElmIHRoZXJlJ3Mgb25seSBvbmUgcG9zc2libGUgc2hhcmQsIHNlbGVjdCBpdCBieSBkZWZhdWx0XG4gIGlmICh0aGlzLnNoYXJkQ2hvaWNlc18ubGVuZ3RoID09PSAxICYmICF0aGlzLnNlbGVjdGVkU2hhcmRJRF8pIHtcbiAgICB0aGlzLnNldFNoYXJkSUQodGhpcy5zaGFyZENob2ljZXNfWzBdLnNoYXJkSUQpO1xuICB9XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgdW5pcXVlIHNoYXJkIGtleSBmcm9tIHRoZSBnaXZlbiBzZWVkXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VlZFxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltTG9iYnkucHJvdG90eXBlLm1ha2VTaGFyZElERnJvbVNlZWRfID0gZnVuY3Rpb24gKHNlZWQpIHtcbiAgLy8gVE9ETyAoYmJ1Y2hhbmFuKSA6IEhhc2ggc2hhcmQgSUQsIG1vcmUgbGlrZWx5IHRvIGVuc3VyZSBpdCdzIHVuaXF1ZVxuICAvLyAgICAgICAgICAgICAgICAgICAgYW5kIGZpdHMgd2l0aGluIDQ4IGNoYXJhY3RlcnMuXG4gIC8vIE1heWJlIGdyYWIgdGhpcyBNSVQtbGljZW5zZWQgaW1wbGVtZW50YXRpb24gdmlhIG5vZGU/XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ibHVlaW1wL0phdmFTY3JpcHQtTUQ1XG4gIHJldHVybiAoJ25zXycgKyB0aGlzLmxldmVsS2V5XyArICdfJyArIHNlZWQpLnN1YnN0cigwLCA0OCk7XG59O1xuXG4vKipcbiAqIEdldHMgYSBzaGFyZSBVUkwgZm9yIHRoZSBjdXJyZW50bHktc2VsZWN0ZWQgc2hhcmQgSUQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBvciBlbXB0eSBzdHJpbmcgaWYgdGhlcmUgaXMgbm8gc2hhcmQgc2VsZWN0ZWQuXG4gKi9cbk5ldFNpbUxvYmJ5LnByb3RvdHlwZS5nZXRTaGFyZUxpbmsgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy5kaXNwbGF5TmFtZV8pIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICB2YXIgc2VsZWN0ZWRTaGFyZCA9IF8uZmluZCh0aGlzLnNoYXJkQ2hvaWNlc18sIGZ1bmN0aW9uIChzaGFyZCkge1xuICAgIHJldHVybiBzaGFyZC5zaGFyZElEID09PSB0aGlzLnNlbGVjdGVkU2hhcmRJRF87XG4gIH0uYmluZCh0aGlzKSk7XG5cbiAgaWYgKHNlbGVjdGVkU2hhcmQpIHtcbiAgICB2YXIgYmFzZUxvY2F0aW9uID0gZG9jdW1lbnQubG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICtcbiAgICAgICAgZG9jdW1lbnQubG9jYXRpb24uaG9zdCArIGRvY3VtZW50LmxvY2F0aW9uLnBhdGhuYW1lO1xuICAgIHJldHVybiBiYXNlTG9jYXRpb24gKyAnP3M9JyArIHNlbGVjdGVkU2hhcmQuc2hhcmRTZWVkO1xuICB9XG5cbiAgcmV0dXJuICcnO1xufTtcbiIsIi8qKlxuICogQG92ZXJ2aWV3IExvYmJ5IFVJIGNvbXBvbmVudCB1c2VkIGZvciBuYW1lIGVudHJ5IGFuZCBzZWxlY3RpbmcgYSBzaGFyZC9jbGFzc1xuICogICAgICAgICAgIHNlY3Rpb24uXG4gKiBAc2VlIE5ldFNpbUxvYmJ5IGZvciB1c2FnZS5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgaTE4biA9IHJlcXVpcmUoJy4vbG9jYWxlJyk7XG52YXIgbWFya3VwID0gcmVxdWlyZSgnLi9OZXRTaW1TaGFyZFNlbGVjdGlvblBhbmVsLmh0bWwuZWpzJyk7XG52YXIgTmV0U2ltUGFuZWwgPSByZXF1aXJlKCcuL05ldFNpbVBhbmVsJyk7XG5cbnZhciBLZXlDb2RlcyA9IHJlcXVpcmUoJy4uL2NvbnN0YW50cycpLktleUNvZGVzO1xuXG4vKipcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAY29uc3RcbiAqL1xudmFyIFNFTEVDVE9SX05PTkVfVkFMVUUgPSAnJztcblxuLyoqXG4gKiBHZW5lcmF0b3IgYW5kIGNvbnRyb2xsZXIgZm9yIG1lc3NhZ2UgbG9nLlxuICpcbiAqIEBwYXJhbSB7alF1ZXJ5fSByb290RGl2XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmRpc3BsYXlOYW1lXG4gKiBAcGFyYW0ge0FycmF5fSBvcHRpb25zLnNoYXJkQ2hvaWNlc1xuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuc2VsZWN0ZWRTaGFyZElEXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNhbGxiYWNrc1xuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tzLnNldE5hbWVDYWxsYmFja1xuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tzLnNldFNoYXJkQ2FsbGJhY2tcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhdWdtZW50cyBOZXRTaW1QYW5lbFxuICovXG52YXIgTmV0U2ltU2hhcmRTZWxlY3Rpb25QYW5lbCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJvb3REaXYsIG9wdGlvbnMsXG4gICAgY2FsbGJhY2tzKSB7XG4gIC8qKlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5kaXNwbGF5TmFtZV8gPSBvcHRpb25zLmRpc3BsYXlOYW1lO1xuXG4gIC8qKlxuICAgKiBTaGFyZCBvcHRpb25zIGZvciB0aGUgY3VycmVudCB1c2VyXG4gICAqIEB0eXBlIHtTaGFyZENob2ljZVtdfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5zaGFyZENob2ljZXNfID0gdXRpbHMudmFsdWVPcihvcHRpb25zLnNoYXJkQ2hvaWNlcywgW10pO1xuXG4gIC8qKlxuICAgKiBXaGljaCBzaGFyZCBJRCBpcyBjdXJyZW50bHkgc2VsZWN0ZWRcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuc2VsZWN0ZWRTaGFyZElEXyA9IHV0aWxzLnZhbHVlT3Iob3B0aW9ucy5zZWxlY3RlZFNoYXJkSUQsIFNFTEVDVE9SX05PTkVfVkFMVUUpO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7ZnVuY3Rpb259XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnNldE5hbWVDYWxsYmFja18gPSBjYWxsYmFja3Muc2V0TmFtZUNhbGxiYWNrO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7ZnVuY3Rpb259XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnNldFNoYXJkQ2FsbGJhY2tfID0gY2FsbGJhY2tzLnNldFNoYXJkQ2FsbGJhY2s7XG5cbiAgLy8gSW5pdGlhbCByZW5kZXJcbiAgTmV0U2ltUGFuZWwuY2FsbCh0aGlzLCByb290RGl2LCB7XG4gICAgY2xhc3NOYW1lOiAnbmV0c2ltLXNoYXJkLXNlbGVjdGlvbi1wYW5lbCcsXG4gICAgcGFuZWxUaXRsZTogaTE4bi5waWNrQVNlY3Rpb24oKSxcbiAgICB1c2VyVG9nZ2xlYWJsZTogZmFsc2VcbiAgfSk7XG59O1xuTmV0U2ltU2hhcmRTZWxlY3Rpb25QYW5lbC5pbmhlcml0cyhOZXRTaW1QYW5lbCk7XG5cbi8qKlxuICogUmVjcmVhdGUgbWFya3VwIHdpdGhpbiBwYW5lbCBib2R5LlxuICovXG5OZXRTaW1TaGFyZFNlbGVjdGlvblBhbmVsLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIENyZWF0ZSBib2lsZXJwbGF0ZSBwYW5lbCBtYXJrdXBcbiAgTmV0U2ltU2hhcmRTZWxlY3Rpb25QYW5lbC5zdXBlclByb3RvdHlwZS5yZW5kZXIuY2FsbCh0aGlzKTtcblxuICAvLyBBZGQgb3VyIG93biBjb250ZW50IG1hcmt1cFxuICB2YXIgbmV3TWFya3VwID0gJChtYXJrdXAoe1xuICAgIGRpc3BsYXlOYW1lOiB0aGlzLmRpc3BsYXlOYW1lXyxcbiAgICBzZWxlY3RlZFNoYXJkSUQ6IHRoaXMuc2VsZWN0ZWRTaGFyZElEXyxcbiAgICBzaGFyZENob2ljZXM6IHRoaXMuc2hhcmRDaG9pY2VzXyxcbiAgICBTRUxFQ1RPUl9OT05FX1ZBTFVFOiBTRUxFQ1RPUl9OT05FX1ZBTFVFXG4gIH0pKTtcbiAgdGhpcy5nZXRCb2R5KCkuaHRtbChuZXdNYXJrdXApO1xuXG4gIC8vIEJpbmQgaGFuZGxlcnNcbiAgdmFyIG5hbWVGaWVsZCA9IHRoaXMuZ2V0Qm9keSgpLmZpbmQoJyNuZXRzaW0tbG9iYnktbmFtZScpO1xuICBuYW1lRmllbGQua2V5dXAodGhpcy5vbk5hbWVLZXlVcF8uYmluZCh0aGlzKSk7XG5cbiAgdmFyIHNldE5hbWVCdXR0b24gPSB0aGlzLmdldEJvZHkoKS5maW5kKCcjbmV0c2ltLWxvYmJ5LXNldC1uYW1lLWJ1dHRvbicpO1xuICBzZXROYW1lQnV0dG9uLmNsaWNrKHRoaXMuc2V0TmFtZUJ1dHRvbkNsaWNrXy5iaW5kKHRoaXMpKTtcblxuICB2YXIgc2hhcmRTZWxlY3QgPSB0aGlzLmdldEJvZHkoKS5maW5kKCcjbmV0c2ltLXNoYXJkLXNlbGVjdCcpO1xuICBzaGFyZFNlbGVjdC5jaGFuZ2UodGhpcy5vblNoYXJkU2VsZWN0Q2hhbmdlXy5iaW5kKHRoaXMpKTtcbiAgc2hhcmRTZWxlY3Qua2V5dXAodGhpcy5vblNoYXJkU2VsZWN0S2V5VXBfLmJpbmQodGhpcykpO1xuXG4gIHZhciBzZXRTaGFyZEJ1dHRvbiA9IHRoaXMuZ2V0Qm9keSgpLmZpbmQoJyNuZXRzaW0tc2hhcmQtY29uZmlybS1idXR0b24nKTtcbiAgc2V0U2hhcmRCdXR0b24uY2xpY2sodGhpcy5zZXRTaGFyZEJ1dHRvbkNsaWNrXy5iaW5kKHRoaXMpKTtcblxuICAvLyBBdCB0aGUgZW5kIG9mIGFueSByZW5kZXIgd2Ugc2hvdWxkIGZvY3VzIG9uIHRoZSBlYXJsaWVzdCB1bnNhdGlzZmllZFxuICAvLyBmaWVsZCwgb3IgaWYgYWxsIGZpZWxkcyBhcmUgc2F0aXNmaWVkLCB0cnkgY29ubmVjdGluZyB0byB0aGUgc3BlY2lmaWVkXG4gIC8vIHNoYXJkLlxuICBpZiAodGhpcy5kaXNwbGF5TmFtZV8ubGVuZ3RoID09PSAwKSB7XG4gICAgbmFtZUZpZWxkLmZvY3VzKCk7XG4gIH0gZWxzZSBpZiAodGhpcy5zZWxlY3RlZFNoYXJkSURfID09PSBTRUxFQ1RPUl9OT05FX1ZBTFVFKSB7XG4gICAgc2hhcmRTZWxlY3QuZm9jdXMoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge0V2ZW50fSBqUXVlcnlFdmVudFxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltU2hhcmRTZWxlY3Rpb25QYW5lbC5wcm90b3R5cGUub25OYW1lS2V5VXBfID0gZnVuY3Rpb24gKGpRdWVyeUV2ZW50KSB7XG4gIHZhciBuYW1lID0galF1ZXJ5RXZlbnQudGFyZ2V0LnZhbHVlO1xuICB2YXIgc2V0TmFtZUJ1dHRvbiA9IHRoaXMuZ2V0Qm9keSgpLmZpbmQoJyNuZXRzaW0tbG9iYnktc2V0LW5hbWUtYnV0dG9uJyk7XG4gIHNldE5hbWVCdXR0b24uYXR0cignZGlzYWJsZWQnLCBuYW1lLmxlbmd0aCA9PT0gMCk7XG5cbiAgaWYgKG5hbWUubGVuZ3RoID4gMCAmJiBqUXVlcnlFdmVudC53aGljaCA9PT0gS2V5Q29kZXMuRU5URVIpIHtcbiAgICB0aGlzLnNldE5hbWVCdXR0b25DbGlja18oKTtcbiAgfVxufTtcblxuLyoqIEBwcml2YXRlICovXG5OZXRTaW1TaGFyZFNlbGVjdGlvblBhbmVsLnByb3RvdHlwZS5zZXROYW1lQnV0dG9uQ2xpY2tfID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnNldE5hbWVDYWxsYmFja18odGhpcy5nZXRCb2R5KCkuZmluZCgnI25ldHNpbS1sb2JieS1uYW1lJykudmFsKCkpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0V2ZW50fSBqUXVlcnlFdmVudFxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltU2hhcmRTZWxlY3Rpb25QYW5lbC5wcm90b3R5cGUub25TaGFyZFNlbGVjdENoYW5nZV8gPSBmdW5jdGlvbiAoalF1ZXJ5RXZlbnQpIHtcbiAgdmFyIHNoYXJkSUQgPSBqUXVlcnlFdmVudC50YXJnZXQudmFsdWU7XG4gIHZhciBzZXRTaGFyZEJ1dHRvbiA9IHRoaXMuZ2V0Qm9keSgpLmZpbmQoJyNuZXRzaW0tc2hhcmQtY29uZmlybS1idXR0b24nKTtcbiAgc2V0U2hhcmRCdXR0b24uYXR0cignZGlzYWJsZWQnLCAhc2hhcmRJRCB8fCBzaGFyZElEID09PSBTRUxFQ1RPUl9OT05FX1ZBTFVFKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtFdmVudH0galF1ZXJ5RXZlbnRcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVNoYXJkU2VsZWN0aW9uUGFuZWwucHJvdG90eXBlLm9uU2hhcmRTZWxlY3RLZXlVcF8gPSBmdW5jdGlvbiAoalF1ZXJ5RXZlbnQpIHtcbiAgdmFyIHNoYXJkSUQgPSBqUXVlcnlFdmVudC50YXJnZXQudmFsdWU7XG4gIGlmIChzaGFyZElEICYmIHNoYXJkSUQgIT09IFNFTEVDVE9SX05PTkVfVkFMVUUgJiZcbiAgICAgIGpRdWVyeUV2ZW50LndoaWNoID09PSBLZXlDb2Rlcy5FTlRFUikge1xuICAgIHRoaXMuc2V0U2hhcmRCdXR0b25DbGlja18oKTtcbiAgfVxufTtcblxuLyoqIEBwcml2YXRlICovXG5OZXRTaW1TaGFyZFNlbGVjdGlvblBhbmVsLnByb3RvdHlwZS5zZXRTaGFyZEJ1dHRvbkNsaWNrXyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXRTaGFyZENhbGxiYWNrXyh0aGlzLmdldEJvZHkoKS5maW5kKCcjbmV0c2ltLXNoYXJkLXNlbGVjdCcpLnZhbCgpKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cz0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdCA9IGZ1bmN0aW9uIGFub255bW91cyhsb2NhbHMsIGZpbHRlcnMsIGVzY2FwZVxuLyoqLykge1xuZXNjYXBlID0gZXNjYXBlIHx8IGZ1bmN0aW9uIChodG1sKXtcbiAgcmV0dXJuIFN0cmluZyhodG1sKVxuICAgIC5yZXBsYWNlKC8mKD8hXFx3KzspL2csICcmYW1wOycpXG4gICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xufTtcbnZhciBidWYgPSBbXTtcbndpdGggKGxvY2FscyB8fCB7fSkgeyAoZnVuY3Rpb24oKXsgXG4gYnVmLnB1c2goJycpOzE7XG4gIHZhciBpMThuID0gcmVxdWlyZSgnLi9sb2NhbGUnKTtcbjsgYnVmLnB1c2goJ1xcbjxkaXYgY2xhc3M9XCJjb250ZW50LXdyYXBcIj5cXG4gIDxkaXYgY2xhc3M9XCJmaWVsZC1ib3ggZGlzcGxheS1uYW1lLWNvbnRyb2xcIj5cXG4gICAgPGxhYmVsIGZvcj1cIm5ldHNpbS1sb2JieS1uYW1lXCI+JywgZXNjYXBlKCg2LCAgaTE4bi5teU5hbWUoKSApKSwgJzwvbGFiZWw+XFxuICAgIDxpbnB1dCBpZD1cIm5ldHNpbS1sb2JieS1uYW1lXCIgdHlwZT1cInRleHRcIiB2YWx1ZT1cIicsIGVzY2FwZSgoNywgIGRpc3BsYXlOYW1lICkpLCAnXCIgJyk7NzsgaWYgKGRpc3BsYXlOYW1lLmxlbmd0aCA+IDApIHsgOyBidWYucHVzaCgnZGlzYWJsZWQnKTs3OyB9IDsgYnVmLnB1c2goJyAvPlxcbiAgICAnKTs4OyBpZiAoZGlzcGxheU5hbWUubGVuZ3RoID09PSAwKSB7IDsgYnVmLnB1c2goJ1xcbiAgICAgIDxpbnB1dCBpZD1cIm5ldHNpbS1sb2JieS1zZXQtbmFtZS1idXR0b25cIiB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCInLCBlc2NhcGUoKDksICBpMThuLnNldE5hbWUoKSApKSwgJ1wiIGRpc2FibGVkIC8+XFxuICAgICcpOzEwOyB9IDsgYnVmLnB1c2goJ1xcbiAgPC9kaXY+XFxuICAnKTsxMjsgaWYgKGRpc3BsYXlOYW1lLmxlbmd0aCA+IDApIHsgOyBidWYucHVzaCgnXFxuICAgIDxkaXYgY2xhc3M9XCJmaWVsZC1ib3ggc2hhcmQtY29udHJvbFwiPlxcbiAgICAgIDxsYWJlbCBmb3I9XCJuZXRzaW0tc2hhcmQtc2VsZWN0XCI+JywgZXNjYXBlKCgxNCwgIGkxOG4ubXlTZWN0aW9uKCkgKSksICc8L2xhYmVsPlxcbiAgICAgIDxzZWxlY3QgaWQ9XCJuZXRzaW0tc2hhcmQtc2VsZWN0XCIgJyk7MTU7IGlmIChzZWxlY3RlZFNoYXJkSUQpIHsgOyBidWYucHVzaCgnZGlzYWJsZWQnKTsxNTsgfSA7IGJ1Zi5wdXNoKCc+XFxuICAgICAgICA8b3B0aW9uIHZhbHVlPVwiJywgZXNjYXBlKCgxNiwgIFNFTEVDVE9SX05PTkVfVkFMVUUgKSksICdcIj4nLCBlc2NhcGUoKDE2LCAgaTE4bi5kcm9wZG93blBpY2tPbmUoKSApKSwgJzwvb3B0aW9uPlxcbiAgICAgICAgJyk7MTc7XG4gICAgICAgICAgdmFyIHNlbGVjdGVkQW55U2hhcmQgPSBmYWxzZTtcbiAgICAgICAgICBzaGFyZENob2ljZXMuZm9yRWFjaChmdW5jdGlvbiAoc2hhcmRDaG9pY2UpIHtcbiAgICAgICAgICAgIHZhciBhdHRyaWJ1dGVzID0gJyc7XG4gICAgICAgICAgICBpZiAoc2hhcmRDaG9pY2Uuc2hhcmRJRCA9PT0gc2VsZWN0ZWRTaGFyZElEKSB7XG4gICAgICAgICAgICAgIGF0dHJpYnV0ZXMgPSAnc2VsZWN0ZWQnO1xuICAgICAgICAgICAgICBzZWxlY3RlZEFueVNoYXJkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDsgYnVmLnB1c2goJ1xcbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIicsIGVzY2FwZSgoMjYsICBzaGFyZENob2ljZS5zaGFyZElEICkpLCAnXCIgJywgZXNjYXBlKCgyNiwgIGF0dHJpYnV0ZXMgKSksICc+JywgZXNjYXBlKCgyNiwgIHNoYXJkQ2hvaWNlLmRpc3BsYXlOYW1lICkpLCAnPC9vcHRpb24+XFxuICAgICAgICAgICAgJyk7Mjc7XG4gICAgICAgICAgfSk7XG4gICAgICAgIDsgYnVmLnB1c2goJ1xcbiAgICAgIDwvc2VsZWN0PlxcbiAgICAgICcpOzMxOyBpZiAoIXNlbGVjdGVkU2hhcmRJRCkgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgIDxpbnB1dCBpZD1cIm5ldHNpbS1zaGFyZC1jb25maXJtLWJ1dHRvblwiIHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cIicsIGVzY2FwZSgoMzIsICBpMThuLmpvaW5TZWN0aW9uKCkgKSksICdcIiAnKTszMjsgaWYgKCFzZWxlY3RlZEFueVNoYXJkKSB7IDsgYnVmLnB1c2goJ2Rpc2FibGVkJyk7MzI7IH0gOyBidWYucHVzaCgnIC8+XFxuICAgICAgJyk7MzM7IH0gOyBidWYucHVzaCgnXFxuICAgIDwvZGl2PlxcbiAgJyk7MzU7IH0gOyBidWYucHVzaCgnXFxuICA8ZGl2IGNsYXNzPVwiY2xlYXJmaXhcIj48L2Rpdj5cXG48L2Rpdj5cXG4nKTsgfSkoKTtcbn0gXG5yZXR1cm4gYnVmLmpvaW4oJycpO1xufTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGxvY2Fscykge1xuICAgIHJldHVybiB0KGxvY2FscywgcmVxdWlyZShcImVqc1wiKS5maWx0ZXJzKTtcbiAgfVxufSgpKTsiLCIvKipcbiAqIEBvdmVydmlldyBMb2JieSB0YWJsZSBVSSBjb21wb25lbnQuXG4gKiBAc2VlIE5ldFNpbUxvYmJ5IGZvciB1c2FnZS5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgXyA9IHV0aWxzLmdldExvZGFzaCgpO1xudmFyIGkxOG4gPSByZXF1aXJlKCcuL2xvY2FsZScpO1xudmFyIE5ldFNpbVBhbmVsID0gcmVxdWlyZSgnLi9OZXRTaW1QYW5lbCcpO1xudmFyIG1hcmt1cCA9IHJlcXVpcmUoJy4vTmV0U2ltUmVtb3RlTm9kZVNlbGVjdGlvblBhbmVsLmh0bWwuZWpzJyk7XG52YXIgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05ldFNpbUNvbnN0YW50cycpLk5vZGVUeXBlO1xudmFyIE5ldFNpbUdsb2JhbHMgPSByZXF1aXJlKCcuL05ldFNpbUdsb2JhbHMnKTtcbnZhciBOZXRTaW1VdGlscyA9IHJlcXVpcmUoJy4vTmV0U2ltVXRpbHMnKTtcbnZhciBOZXRTaW1Sb3V0ZXJOb2RlID0gcmVxdWlyZSgnLi9OZXRTaW1Sb3V0ZXJOb2RlJyk7XG5cbi8qKlxuICogQXBwbHkgYSB2ZXJ5IHNtYWxsIGRlYm91bmNlIHRvIGxvYmJ5IGJ1dHRvbnMgdG8gYXZvaWQgZG9pbmcgZXh0cmEgd29ya1xuICogYXMgYSByZXN1bHQgb2YgZG91YmxlLWNsaWNrcyBhbmQvb3Igc2NyaXB0cyB0aGF0IHdhbnQgdG8gY2xpY2sgYnV0dG9ucyBhXG4gKiBmZXcgdGhvdXNhbmQgdGltZXMuXG4gKiBAY29uc3Qge251bWJlcn1cbiAqL1xudmFyIEJVVFRPTl9ERUJPVU5DRV9EVVJBVElPTl9NUyA9IDEwMDtcblxuLyoqXG4gKiBHZW5lcmF0b3IgYW5kIGNvbnRyb2xsZXIgZm9yIGxvYmJ5IG5vZGUgbGlzdGluZywgc2VsZWN0aW9uLCBhbmQgY29ubmVjdGlvblxuICogY29udHJvbHMuXG4gKlxuICogQHBhcmFtIHtqUXVlcnl9IHJvb3REaXZcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtEYXNoYm9hcmRVc2VyfSBvcHRpb25zLnVzZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnNoYXJkSURcbiAqIEBwYXJhbSB7TmV0U2ltTm9kZVtdfSBvcHRpb25zLm5vZGVzT25TaGFyZFxuICogQHBhcmFtIHtOZXRTaW1Ob2RlW119IG9wdGlvbnMuaW5jb21pbmdDb25uZWN0aW9uTm9kZXNcbiAqIEBwYXJhbSB7TmV0U2ltTm9kZX0gb3B0aW9ucy5yZW1vdGVOb2RlIC0gbnVsbCBpZiBub3QgYXR0ZW1wdGluZyB0byBjb25uZWN0XG4gKiBAcGFyYW0ge251bWJlcn0gb3B0aW9ucy5teU5vZGVJRFxuICogQHBhcmFtIHtib29sZWFufSBvcHRpb25zLmRpc2FibGVDb250cm9sc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjYWxsYmFja3NcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrcy5hZGRSb3V0ZXJDYWxsYmFja1xuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tzLmNhbmNlbEJ1dHRvbkNhbGxiYWNrXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja3Muam9pbkJ1dHRvbkNhbGxiYWNrXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja3MucmVzZXRTaGFyZENhbGxiYWNrXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXVnbWVudHMgTmV0U2ltUGFuZWxcbiAqL1xudmFyIE5ldFNpbVJlbW90ZU5vZGVTZWxlY3Rpb25QYW5lbCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJvb3REaXYsXG4gICAgb3B0aW9ucywgY2FsbGJhY2tzKSB7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtEYXNoYm9hcmRVc2VyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy51c2VyXyA9IG9wdGlvbnMudXNlcjtcblxuICAvKipcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuc2hhcmRJRF8gPSBvcHRpb25zLnNoYXJkSUQ7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtOZXRTaW1Ob2RlW119XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLm5vZGVzT25TaGFyZF8gPSBvcHRpb25zLm5vZGVzT25TaGFyZDtcblxuICAvKipcbiAgICogQHR5cGUge05ldFNpbU5vZGVbXX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuaW5jb21pbmdDb25uZWN0aW9uTm9kZXNfID0gb3B0aW9ucy5pbmNvbWluZ0Nvbm5lY3Rpb25Ob2RlcztcblxuICAvKipcbiAgICogQHR5cGUge05ldFNpbU5vZGV9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnJlbW90ZU5vZGVfID0gb3B0aW9ucy5yZW1vdGVOb2RlO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5teU5vZGVJRF8gPSBvcHRpb25zLm15Tm9kZUlEO1xuXG4gIGZ1bmN0aW9uIGJ1dHRvbkRlYm91bmNlKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIF8uZGVib3VuY2UoY2FsbGJhY2ssIEJVVFRPTl9ERUJPVU5DRV9EVVJBVElPTl9NUywge1xuICAgICAgbGVhZGluZzogdHJ1ZSxcbiAgICAgIHRyYWlsaW5nOiBmYWxzZVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXIgZm9yIFwiQWRkIFJvdXRlclwiIGJ1dHRvblxuICAgKiBAdHlwZSB7ZnVuY3Rpb259XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmFkZFJvdXRlckNhbGxiYWNrXyA9IGJ1dHRvbkRlYm91bmNlKGNhbGxiYWNrcy5hZGRSb3V0ZXJDYWxsYmFjayk7XG5cbiAgLyoqXG4gICAqIEhhbmRsZXIgZm9yIGNhbmNlbCBidXR0b24gKGJhY2tzIG91dCBvZiBub24tbXV0dWFsIGNvbm5lY3Rpb24pXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuY2FuY2VsQnV0dG9uQ2FsbGJhY2tfID0gYnV0dG9uRGVib3VuY2UoY2FsbGJhY2tzLmNhbmNlbEJ1dHRvbkNhbGxiYWNrKTtcblxuICAvKipcbiAgICogSGFuZGxlciBmb3IgXCJqb2luXCIgYnV0dG9uIG5leHQgdG8gZWFjaCBjb25uZWN0YWJsZSBub2RlLlxuICAgKiBAdHlwZSB7ZnVuY3Rpb259XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmpvaW5CdXR0b25DYWxsYmFja18gPSBidXR0b25EZWJvdW5jZShjYWxsYmFja3Muam9pbkJ1dHRvbkNhbGxiYWNrKTtcblxuICAvKipcbiAgICogSGFuZGxlciBmb3IgXCJyZXNldCBzaGFyZFwiIGJ1dHRvbiBjbGljay5cbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5yZXNldFNoYXJkQ2FsbGJhY2tfID0gYnV0dG9uRGVib3VuY2UoY2FsbGJhY2tzLnJlc2V0U2hhcmRDYWxsYmFjayk7XG5cbiAgLy8gSW5pdGlhbCByZW5kZXJcbiAgTmV0U2ltUGFuZWwuY2FsbCh0aGlzLCByb290RGl2LCB7XG4gICAgY2xhc3NOYW1lOiAnbmV0c2ltLWxvYmJ5LXBhbmVsJyxcbiAgICBwYW5lbFRpdGxlOiB0aGlzLmdldExvY2FsaXplZFBhbmVsVGl0bGUoKSxcbiAgICB1c2VyVG9nZ2xlYWJsZTogZmFsc2VcbiAgfSk7XG5cbiAgaWYgKG9wdGlvbnMuZGlzYWJsZUNvbnRyb2xzKSB7XG4gICAgdGhpcy5kaXNhYmxlRXZlcnl0aGluZygpO1xuICB9XG59O1xuTmV0U2ltUmVtb3RlTm9kZVNlbGVjdGlvblBhbmVsLmluaGVyaXRzKE5ldFNpbVBhbmVsKTtcblxuLyoqXG4gKiBSZWNyZWF0ZSBtYXJrdXAgd2l0aGluIHBhbmVsIGJvZHkuXG4gKi9cbk5ldFNpbVJlbW90ZU5vZGVTZWxlY3Rpb25QYW5lbC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAvLyBDbG9uZSB0aGUgcmVmZXJlbmNlIGFyZWEgKHdpdGggaGFuZGxlcnMpIGJlZm9yZSB3ZSByZS1yZW5kZXJcbiAgdmFyIHJlZmVyZW5jZUFyZWEgPSAkKCcjcmVmZXJlbmNlX2FyZWEnKS5maXJzdCgpLmNsb25lKHRydWUpO1xuXG4gIC8vIENyZWF0ZSBib2lsZXJwbGF0ZSBwYW5lbCBtYXJrdXBcbiAgTmV0U2ltUmVtb3RlTm9kZVNlbGVjdGlvblBhbmVsLnN1cGVyUHJvdG90eXBlLnJlbmRlci5jYWxsKHRoaXMpO1xuXG4gIC8vIEFkZCBvdXIgb3duIGNvbnRlbnQgbWFya3VwXG4gIHZhciBuZXdNYXJrdXAgPSAkKG1hcmt1cCh7XG4gICAgY29udHJvbGxlcjogdGhpcyxcbiAgICBub2Rlc09uU2hhcmQ6IHRoaXMubm9kZXNPblNoYXJkXyxcbiAgICBpbmNvbWluZ0Nvbm5lY3Rpb25Ob2RlczogdGhpcy5pbmNvbWluZ0Nvbm5lY3Rpb25Ob2Rlc18sXG4gICAgcmVtb3RlTm9kZTogdGhpcy5yZW1vdGVOb2RlX1xuICB9KSk7XG4gIHRoaXMuZ2V0Qm9keSgpLmh0bWwobmV3TWFya3VwKTtcblxuICB0aGlzLnVwZGF0ZUxheW91dCgpO1xuXG4gIC8vIE1vdmUgdGhlIHJlZmVyZW5jZSBhcmVhIHRvIGJlbmVhdGggdGhlIGluc3RydWN0aW9uc1xuICB0aGlzLmdldEJvZHkoKS5maW5kKCcucmVmZXJlbmNlLWFyZWEtcGxhY2Vob2xkZXInKS5hcHBlbmQocmVmZXJlbmNlQXJlYSk7XG5cbiAgLy8gVGVhY2hlcnMgYW5kIGFkbWlucyBnZXQgYSBzcGVjaWFsIFwiUmVzZXQgU2ltdWxhdGlvblwiIGJ1dHRvblxuICBpZiAodGhpcy5jYW5DdXJyZW50VXNlclJlc2V0U2hhcmQoKSkge1xuICAgIHRoaXMuYWRkQnV0dG9uKGkxOG4uc2hhcmRSZXNldEJ1dHRvbigpLCB0aGlzLnJlc2V0U2hhcmRDYWxsYmFja18pO1xuICB9XG5cbiAgLy8gQnV0dG9uIHRoYXQgdGFrZXMgeW91IHRvIHRoZSBuZXh0IGxldmVsLlxuICBOZXRTaW1VdGlscy5tYWtlQ29udGludWVCdXR0b24odGhpcyk7XG5cbiAgdGhpcy5hZGRSb3V0ZXJCdXR0b25fID0gdGhpcy5nZXRCb2R5KCkuZmluZCgnI25ldHNpbS1sb2JieS1hZGQtcm91dGVyJyk7XG4gIHRoaXMuYWRkUm91dGVyQnV0dG9uXy5jbGljayh1bmxlc3NEaXNhYmxlZCh0aGlzLmFkZFJvdXRlckNhbGxiYWNrXykpO1xuXG4gIHRoaXMuZ2V0Qm9keSgpLmZpbmQoJy5qb2luLWJ1dHRvbicpLmNsaWNrKFxuICAgICAgdW5sZXNzRGlzYWJsZWQodGhpcy5vbkpvaW5DbGlja18uYmluZCh0aGlzKSkpO1xuICB0aGlzLmdldEJvZHkoKS5maW5kKCcuYWNjZXB0LWJ1dHRvbicpLmNsaWNrKFxuICAgICAgdW5sZXNzRGlzYWJsZWQodGhpcy5vbkpvaW5DbGlja18uYmluZCh0aGlzKSkpO1xuICB0aGlzLmdldEJvZHkoKS5maW5kKCcuY2FuY2VsLWJ1dHRvbicpLmNsaWNrKFxuICAgICAgdW5sZXNzRGlzYWJsZWQodGhpcy5jYW5jZWxCdXR0b25DYWxsYmFja18pKTtcbn07XG5cbi8qKlxuICogV3JhcCB0aGUgcHJvdmlkZWQgY2FsbGJhY2sgaW4gYSBjaGVjayB0byBtYWtlIHN1cmUgdGhlIHRhcmdldCBpcyBub3QgZGlzYWJsZWQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge2Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiB1bmxlc3NEaXNhYmxlZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gKGpRdWVyeUV2ZW50KSB7XG4gICAgaWYgKCEkKGpRdWVyeUV2ZW50LnRhcmdldCkuaXMoJ1tkaXNhYmxlZF0nKSkge1xuICAgICAgY2FsbGJhY2soalF1ZXJ5RXZlbnQpO1xuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBVcGRhdGVzIHRoZSBsYXlvdXQgb2YgdGhlIG1hcmt1cCwgdXN1YWxseSBpbiByZXNwb25zZSB0byBhIHdpbmRvd1xuICogcmVzaXplLiBDdXJyZW50bHkganVzdCBhZGp1c3RzIHRoZSBoZWlnaHQgb2YgdGhlIGxvYmJ5IHRhYmxlIHRvIGtlZXBcbiAqIGV2ZXJ5dGhpbmcgb25zY3JlZW4uXG4gKi9cbk5ldFNpbVJlbW90ZU5vZGVTZWxlY3Rpb25QYW5lbC5wcm90b3R5cGUudXBkYXRlTGF5b3V0ID0gZnVuY3Rpb24gKCkge1xuXG4gIHZhciBsb2JieVRhYmxlID0gdGhpcy5nZXRCb2R5KCkuZmluZCgnI25ldHNpbS1zY3JvbGxpbmctbG9iYnknKTtcbiAgdmFyIGNvbnRhaW5lciA9IHRoaXMuZ2V0Qm9keSgpLmNsb3Nlc3QoJyNuZXRzaW0tZGlzY29ubmVjdGVkJyk7XG5cbiAgaWYgKGxvYmJ5VGFibGUuaXMoJzp2aXNpYmxlJykpIHtcbiAgICBsb2JieVRhYmxlLmhlaWdodChcIm5vbmVcIik7XG4gICAgdmFyIG92ZXJmbG93ID0gY29udGFpbmVyLnByb3AoJ3Njcm9sbEhlaWdodCcpIC0gY29udGFpbmVyLnByb3AoJ2NsaWVudEhlaWdodCcpO1xuXG4gICAgaWYgKG92ZXJmbG93ID4gMCkge1xuICAgICAgdmFyIG5ld0hlaWdodCA9IGxvYmJ5VGFibGUuaGVpZ2h0KCkgLSBvdmVyZmxvdztcbiAgICAgIHZhciBtaW5IZWlnaHQgPSBsb2JieVRhYmxlLmZpbmQoJ3RyJykuZmlyc3QoKS5vdXRlckhlaWdodCh0cnVlKTtcbiAgICAgIGxvYmJ5VGFibGUuaGVpZ2h0KE1hdGgubWF4KG5ld0hlaWdodCwgbWluSGVpZ2h0KSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGEgbG9jYWxpemVkIHBhbmVsIHRpdGxlIGFwcHJvcHJpYXRlIHRvIHRoZSBjdXJyZW50IGxldmVsXG4gKiAgICAgICAgICBjb25maWd1cmF0aW9uXG4gKi9cbk5ldFNpbVJlbW90ZU5vZGVTZWxlY3Rpb25QYW5lbC5wcm90b3R5cGUuZ2V0TG9jYWxpemVkUGFuZWxUaXRsZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGxldmVsQ29uZmlnID0gTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpO1xuXG4gIGlmIChsZXZlbENvbmZpZy5jYW5Db25uZWN0VG9DbGllbnRzICYmXG4gICAgICBsZXZlbENvbmZpZy5jYW5Db25uZWN0VG9Sb3V0ZXJzKSB7XG4gICAgcmV0dXJuIGkxOG4uY29ubmVjdFRvQU5vZGUoKTtcbiAgfSBlbHNlIGlmIChsZXZlbENvbmZpZy5jYW5Db25uZWN0VG9DbGllbnRzKSB7XG4gICAgcmV0dXJuIGkxOG4uY29ubmVjdFRvQVBlZXIoKTtcbiAgfSBlbHNlIGlmIChsZXZlbENvbmZpZy5jYW5Db25uZWN0VG9Sb3V0ZXJzKSB7XG4gICAgaWYgKGxldmVsQ29uZmlnLmJyb2FkY2FzdE1vZGUpIHtcbiAgICAgIHJldHVybiBpMThuLmNvbm5lY3RUb0FSb29tKCk7XG4gICAgfVxuICAgIHJldHVybiBpMThuLmNvbm5lY3RUb0FSb3V0ZXIoKTtcbiAgfVxuICByZXR1cm4gaTE4bi5jb25uZWN0VG9BTm9kZSgpO1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBsb2NhbGl6ZWQgbG9iYnkgaW5zdHJ1Y3Rpb25zIGFwcHJvcHJpYXRlIHRvIHRoZSBjdXJyZW50XG4gKiAgICAgICAgICBsZXZlbCBjb25maWd1cmF0aW9uXG4gKi9cbk5ldFNpbVJlbW90ZU5vZGVTZWxlY3Rpb25QYW5lbC5wcm90b3R5cGUuZ2V0TG9jYWxpemVkTG9iYnlJbnN0cnVjdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsZXZlbENvbmZpZyA9IE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKTtcblxuICBpZiAobGV2ZWxDb25maWcuY2FuQ29ubmVjdFRvQ2xpZW50cyAmJlxuICAgICAgbGV2ZWxDb25maWcuY2FuQ29ubmVjdFRvUm91dGVycykge1xuICAgIHJldHVybiBpMThuLmxvYmJ5SW5zdHJ1Y3Rpb25zR2VuZXJhbCgpO1xuICB9IGVsc2UgaWYgKGxldmVsQ29uZmlnLmNhbkNvbm5lY3RUb0NsaWVudHMpIHtcbiAgICByZXR1cm4gaTE4bi5sb2JieUluc3RydWN0aW9uc0ZvclBlZXJzKCk7XG4gIH0gZWxzZSBpZiAobGV2ZWxDb25maWcuY2FuQ29ubmVjdFRvUm91dGVycykge1xuICAgIGlmIChsZXZlbENvbmZpZy5icm9hZGNhc3RNb2RlKSB7XG4gICAgICByZXR1cm4gaTE4bi5sb2JieUluc3RydWN0aW9uc0ZvclJvb21zKCk7XG4gICAgfVxuICAgIHJldHVybiBpMThuLmxvYmJ5SW5zdHJ1Y3Rpb25zRm9yUm91dGVycygpO1xuICB9XG4gIHJldHVybiBpMThuLmxvYmJ5SW5zdHJ1Y3Rpb25zR2VuZXJhbCgpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0V2ZW50fSBqUXVlcnlFdmVudFxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUmVtb3RlTm9kZVNlbGVjdGlvblBhbmVsLnByb3RvdHlwZS5vbkpvaW5DbGlja18gPSBmdW5jdGlvbiAoalF1ZXJ5RXZlbnQpIHtcbiAgdmFyIHRhcmdldCA9ICQoalF1ZXJ5RXZlbnQudGFyZ2V0KTtcbiAgdmFyIG5vZGVJRCA9IHRhcmdldC5kYXRhKCdub2RlSWQnKTtcbiAgdmFyIGNsaWNrZWROb2RlID0gXy5maW5kKHRoaXMubm9kZXNPblNoYXJkXywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5lbnRpdHlJRCA9PT0gbm9kZUlEO1xuICB9KTtcblxuICB0aGlzLmpvaW5CdXR0b25DYWxsYmFja18oY2xpY2tlZE5vZGUpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge05ldFNpbU5vZGV9IG5vZGVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5OZXRTaW1SZW1vdGVOb2RlU2VsZWN0aW9uUGFuZWwucHJvdG90eXBlLmlzTXlOb2RlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgcmV0dXJuIHRoaXMubXlOb2RlSURfID09PSBub2RlLmVudGl0eUlEO1xufTtcblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBsZXZlbCBjb25maWd1cmF0aW9uIGFsbG93cyBjb25uZWN0aW9ucyB0byB0aGUgc3BlY2lmaWVkXG4gKiBub2RlLlxuICogQHBhcmFtIHtOZXRTaW1Ob2RlfSBjb25uZWN0aW9uVGFyZ2V0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gd2hldGhlciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgaXMgYWxsb3dlZFxuICovXG5OZXRTaW1SZW1vdGVOb2RlU2VsZWN0aW9uUGFuZWwucHJvdG90eXBlLmNhbkNvbm5lY3RUb05vZGUgPSBmdW5jdGlvbiAoY29ubmVjdGlvblRhcmdldCkge1xuICAvLyBDYW4ndCBjb25uZWN0IHRvIG93biBub2RlXG4gIGlmICh0aGlzLmlzTXlOb2RlKGNvbm5lY3Rpb25UYXJnZXQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGlzQ2xpZW50ID0gKGNvbm5lY3Rpb25UYXJnZXQuZ2V0Tm9kZVR5cGUoKSA9PT0gTm9kZVR5cGUuQ0xJRU5UKTtcbiAgdmFyIGlzUm91dGVyID0gKGNvbm5lY3Rpb25UYXJnZXQuZ2V0Tm9kZVR5cGUoKSA9PT0gTm9kZVR5cGUuUk9VVEVSKTtcblxuICAvLyBDYW4ndCBjb25uZWN0IHRvIGZ1bGwgcm91dGVyc1xuICBpZiAoY29ubmVjdGlvblRhcmdldC5pc0Z1bGwoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFBlcm1pc3NpYmxlIGNvbm5lY3Rpb24gbGltaXRlZCBieSBsZXZlbCBjb25maWd1cmF0aW9uXG4gIHZhciBsZXZlbENvbmZpZyA9IE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKTtcbiAgdmFyIGFsbG93Q2xpZW50cyA9IGxldmVsQ29uZmlnLmNhbkNvbm5lY3RUb0NsaWVudHM7XG4gIHZhciBhbGxvd1JvdXRlcnMgPSBsZXZlbENvbmZpZy5jYW5Db25uZWN0VG9Sb3V0ZXJzO1xuICByZXR1cm4gKGlzQ2xpZW50ICYmIGFsbG93Q2xpZW50cykgfHwgKGlzUm91dGVyICYmIGFsbG93Um91dGVycyk7XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHtib29sZWFufSBUUlVFIGlmIHdlIGhhdmUgYW4gb3BlbiBvdXRnb2luZyBjb25uZWN0aW9uIHJlcXVlc3QuXG4gKi9cbk5ldFNpbVJlbW90ZU5vZGVTZWxlY3Rpb25QYW5lbC5wcm90b3R5cGUuaGFzT3V0Z29pbmdSZXF1ZXN0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISEodGhpcy5yZW1vdGVOb2RlXyk7XG59O1xuXG4vKipcbiAqIEZvciB1c2Ugd2l0aCBBcnJheS5wcm90b3R5cGUuZmlsdGVyKClcbiAqIEBwYXJhbSB7TmV0U2ltTm9kZX0gbm9kZVxuICogQHJldHVybnMge2Jvb2xlYW59IFRSVUUgaWYgdGhlIGdpdmVuIG5vZGUgc2hvdWxkIHNob3cgdXAgaW4gdGhlIGxvYmJ5XG4gKi9cbk5ldFNpbVJlbW90ZU5vZGVTZWxlY3Rpb25QYW5lbC5wcm90b3R5cGUuc2hvdWxkU2hvd05vZGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICB2YXIgbGV2ZWxDb25maWcgPSBOZXRTaW1HbG9iYWxzLmdldExldmVsQ29uZmlnKCk7XG4gIHZhciBpc0NsaWVudCA9IChub2RlLmdldE5vZGVUeXBlKCkgPT09IE5vZGVUeXBlLkNMSUVOVCk7XG4gIHZhciBpc1JvdXRlciA9IChub2RlLmdldE5vZGVUeXBlKCkgPT09IE5vZGVUeXBlLlJPVVRFUik7XG4gIHZhciBzaG93Q2xpZW50cyA9IGxldmVsQ29uZmlnLnNob3dDbGllbnRzSW5Mb2JieTtcbiAgdmFyIHNob3dSb3V0ZXJzID0gbGV2ZWxDb25maWcuc2hvd1JvdXRlcnNJbkxvYmJ5O1xuICByZXR1cm4gKGlzQ2xpZW50ICYmIHNob3dDbGllbnRzKSB8fCAoaXNSb3V0ZXIgJiYgc2hvd1JvdXRlcnMpO1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVFJVRSBpZiB3ZSBleHBlY3QgdGhlIGN1cnJlbnQgdXNlciB0byBoYXZlIHBlcm1pc3Npb24gdG9cbiAqICAgICAgICAgIHBlcmZvcm0gYSBzaGFyZCByZXNldC4gIE9ubHkgZ292ZXJucyBkaXNwbGF5IG9mIHNoYXJkIHJlc2V0IGJ1dHRvbixcbiAqICAgICAgICAgIGFjdHVhbCByZXNldCBpcyBhdXRoZW50aWNhdGVkIG9uIHRoZSBzZXJ2ZXIuXG4gKi9cbk5ldFNpbVJlbW90ZU5vZGVTZWxlY3Rpb25QYW5lbC5wcm90b3R5cGUuY2FuQ3VycmVudFVzZXJSZXNldFNoYXJkID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMudXNlcl8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAodGhpcy51c2VyXy5pc0FkbWluKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBGaW5kIGEgc2VjdGlvbiBJRCBpbiB0aGUgY3VycmVudCBzaGFyZCBJRFxuICB2YXIgbWF0Y2hlcyA9IC9fKFxcZCspJC8uZXhlYyh0aGlzLnNoYXJkSURfKTtcbiAgaWYgKCFtYXRjaGVzKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gbWF0Y2hlc1sxXSBpcyB0aGUgZmlyc3QgY2FwdHVyZSBncm91cCAoXFxkKyksIHRoZSBudW1lcmljIHNlY3Rpb24gSUQuXG4gIHZhciBzZWN0aW9uSUQgPSBwYXJzZUludChtYXRjaGVzWzFdLCAxMCk7XG4gIHJldHVybiB0aGlzLnVzZXJfLm93bnNTZWN0aW9uKHNlY3Rpb25JRCk7XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHtib29sZWFufSBUUlVFIGlmIGl0J3MgY3VycmVudGx5IHBvc3NpYmxlIHRvIGFkZCBhIG5ldyByb3V0ZXIuXG4gKiAgICAgICAgICBEcml2ZXMgd2hldGhlciB0aGUgXCJBZGQgUm91dGVyXCIgYnV0dG9uIHNob3VsZCBiZSBkaXNwbGF5ZWQuXG4gKi9cbk5ldFNpbVJlbW90ZU5vZGVTZWxlY3Rpb25QYW5lbC5wcm90b3R5cGUuY2FuQWRkUm91dGVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbGV2ZWxDb25maWcgPSBOZXRTaW1HbG9iYWxzLmdldExldmVsQ29uZmlnKCk7XG4gIGlmICh0aGlzLmhhc091dGdvaW5nUmVxdWVzdCgpIHx8ICFsZXZlbENvbmZpZy5zaG93QWRkUm91dGVyQnV0dG9uKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHJvdXRlckxpbWl0ID0gTmV0U2ltUm91dGVyTm9kZS5nZXRNYXhpbXVtUm91dGVyc1BlclNoYXJkKCk7XG4gIHZhciByb3V0ZXJDb3VudCA9IHRoaXMubm9kZXNPblNoYXJkXy5maWx0ZXIoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gTm9kZVR5cGUuUk9VVEVSID09PSBub2RlLmdldE5vZGVUeXBlKCk7XG4gIH0pLmxlbmd0aDtcbiAgcmV0dXJuIHJvdXRlckNvdW50IDwgcm91dGVyTGltaXQ7XG59O1xuXG4vKipcbiAqIERpc2FibGUgYWxsIG9mIHRoZSBidXR0b25zIHdpdGhpbiB0aGUgcGFuZWwgKGRvZXMgbm90IGFwcGx5IHRvIHBhbmVsLWhlYWRlclxuICogYnV0dG9ucyEpXG4gKi9cbk5ldFNpbVJlbW90ZU5vZGVTZWxlY3Rpb25QYW5lbC5wcm90b3R5cGUuZGlzYWJsZUV2ZXJ5dGhpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZ2V0Qm9keSgpLmZpbmQoJy5uZXRzaW0tYnV0dG9uJykuYXR0cignZGlzYWJsZWQnLCB0cnVlKTtcbn07XG5cbi8qKlxuICogRW5hYmxlIGFsbCBvZiB0aGUgYnV0dG9ucyB3aXRoaW4gdGhlIHBhbmVsIChkb2VzIG5vdCBhcHBseSB0byBwYW5lbC1oZWFkZXJcbiAqIGJ1dHRvbnMhKVxuICovXG5OZXRTaW1SZW1vdGVOb2RlU2VsZWN0aW9uUGFuZWwucHJvdG90eXBlLmVuYWJsZUV2ZXJ5dGhpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZ2V0Qm9keSgpLmZpbmQoJy5uZXRzaW0tYnV0dG9uJykucmVtb3ZlQXR0cignZGlzYWJsZWQnKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cz0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdCA9IGZ1bmN0aW9uIGFub255bW91cyhsb2NhbHMsIGZpbHRlcnMsIGVzY2FwZVxuLyoqLykge1xuZXNjYXBlID0gZXNjYXBlIHx8IGZ1bmN0aW9uIChodG1sKXtcbiAgcmV0dXJuIFN0cmluZyhodG1sKVxuICAgIC5yZXBsYWNlKC8mKD8hXFx3KzspL2csICcmYW1wOycpXG4gICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xufTtcbnZhciBidWYgPSBbXTtcbndpdGggKGxvY2FscyB8fCB7fSkgeyAoZnVuY3Rpb24oKXsgXG4gYnVmLnB1c2goJycpOzE7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIF8gPSB1dGlscy5nZXRMb2Rhc2goKTtcbnZhciBpMThuID0gcmVxdWlyZSgnLi9sb2NhbGUnKTtcbnZhciBOZXRTaW1HbG9iYWxzID0gcmVxdWlyZSgnLi9OZXRTaW1HbG9iYWxzJyk7XG52YXIgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05ldFNpbUNvbnN0YW50cycpLk5vZGVUeXBlO1xuXG4vKiogQHR5cGUge2Z1bmN0aW9ufSAqL1xudmFyIGdldEFzc2V0VXJsID0gTmV0U2ltR2xvYmFscy5nZXRBc3NldFVybEZ1bmN0aW9uKCk7XG5cbi8qKiBAdHlwZSB7TmV0U2ltTGV2ZWxDb25maWd1cmF0aW9ufSAqL1xudmFyIGxldmVsQ29uZmlnID0gTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFJvd01ldGFkYXRhXG4gKiBAcHJvcGVydHkge251bWJlcn0gbm9kZUlEXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY2xhc3NBdHRyXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGlzcGxheU5hbWVcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzdGF0dXNcbiAqL1xuXG4vKipcbiAqIEZvciB1c2Ugd2l0aCBBcnJheS5wcm90b3R5cGUuZmlsdGVyKClcbiAqIEBwYXJhbSB7TmV0U2ltTm9kZX0gbm9kZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbnZhciBvbWl0SW5jb21pbmdDb25uZWN0aW9uTm9kZXMgPSBmdW5jdGlvbiAobm9kZSkge1xuICByZXR1cm4gdW5kZWZpbmVkID09PSBfLmZpbmQoaW5jb21pbmdDb25uZWN0aW9uTm9kZXMsIGZ1bmN0aW9uIChjb25uZWN0aW9uUmVxdWVzdE5vZGUpIHtcbiAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb25SZXF1ZXN0Tm9kZS5lbnRpdHlJRCA9PT0gbm9kZS5lbnRpdHlJRDtcbiAgICAgIH0pO1xufTtcblxuLyoqXG4gKiBGb3IgdXNlIHdpdGggQXJyYXkucHJvdG90eXBlLmZpbHRlcigpXG4gKiBAcGFyYW0ge05ldFNpbU5vZGV9IG5vZGVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG52YXIgb21pdE91dGdvaW5nUmVxdWVzdFRhcmdldHMgPSBmdW5jdGlvbiAobm9kZSkge1xuICByZXR1cm4gIXJlbW90ZU5vZGUgfHwgKHJlbW90ZU5vZGUuZW50aXR5SUQgIT09IG5vZGUuZW50aXR5SUQpO1xufTtcblxuLyoqXG4gKiBGb3IgdXNlIHdpdGggQXJyYXkucHJvdG90eXBlLm1hcCgpXG4gKiBAcGFyYW0ge05ldFNpbU5vZGV9IG5vZGVcbiAqIEByZXR1cm5zIHtSb3dNZXRhZGF0YX1cbiAqL1xudmFyIG5vZGVUb1Jvd01ldGFkYXRhID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgdmFyIGRpc3BsYXlOYW1lID0gbm9kZS5nZXREaXNwbGF5TmFtZSgpO1xuICB2YXIgc29ydEtleSA9IGRpc3BsYXlOYW1lO1xuICB2YXIgY2xhc3NlcyA9IFsndXNlci1yb3cnXTtcblxuICBpZiAobm9kZS5nZXROb2RlVHlwZSgpID09PSBOb2RlVHlwZS5ST1VURVIpIHtcbiAgICAvLyBTb3J0IHJvdXRlcnMgYnkgbGVmdC1wYWRkZWQgcm91dGVyIG51bWJlciAobG9va3MgbGlrZSBuYXR1cmFsIHNvcnQpXG4gICAgc29ydEtleSA9ICgnMDAwJyArIG5vZGUucm91dGVyTnVtYmVyKS5zbGljZSgtMyk7XG4gICAgY2xhc3NlcyA9IFsncm91dGVyLXJvdyddO1xuICB9XG5cbiAgaWYgKGNvbnRyb2xsZXIuaXNNeU5vZGUobm9kZSkpIHtcbiAgICBjbGFzc2VzLnB1c2goJ293bi1yb3cnKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbm9kZUlEOiBub2RlLmVudGl0eUlELFxuICAgIHNvcnRLZXk6IHNvcnRLZXksXG4gICAgY2xhc3NBdHRyOiBjbGFzc2VzLmpvaW4oJyAnKSxcbiAgICBkaXNwbGF5TmFtZTogZGlzcGxheU5hbWUsXG4gICAgaG9zdG5hbWU6IG5vZGUuZ2V0SG9zdG5hbWUoKSxcbiAgICBzdGF0dXM6IG5vZGUuZ2V0U3RhdHVzKCksXG4gICAgaXNGdWxsOiBub2RlLmlzRnVsbCgpLFxuICAgIGNhbkNvbm5lY3RUb05vZGU6IGNvbnRyb2xsZXIuY2FuQ29ubmVjdFRvTm9kZShub2RlKVxuICB9O1xufTtcblxuLyoqXG4gKiBGb3IgdXNlIHdpdGggQXJyYXkucHJvdG90eXBlLnNvcnQoKVxuICogQHBhcmFtIHtSb3dNZXRhZGF0YX0gYVxuICogQHBhcmFtIHtSb3dNZXRhZGF0YX0gYlxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xudmFyIGxvYmJ5U29ydCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gIHJldHVybiAoYS5zb3J0S2V5ID4gYi5zb3J0S2V5KSA/IDEgOiAtMTtcbn07XG5cbnZhciBsb2JieVJvd3MgPSBub2Rlc09uU2hhcmRcbiAgICAuZmlsdGVyKGNvbnRyb2xsZXIuc2hvdWxkU2hvd05vZGUuYmluZChjb250cm9sbGVyKSlcbiAgICAuZmlsdGVyKG9taXRJbmNvbWluZ0Nvbm5lY3Rpb25Ob2RlcylcbiAgICAuZmlsdGVyKG9taXRPdXRnb2luZ1JlcXVlc3RUYXJnZXRzKVxuICAgIC5tYXAobm9kZVRvUm93TWV0YWRhdGEpXG4gICAgLnNvcnQobG9iYnlTb3J0KTtcblxudmFyIHJlcXVlc3RSb3dzID0gaW5jb21pbmdDb25uZWN0aW9uTm9kZXNcbiAgICAuZmlsdGVyKGNvbnRyb2xsZXIuc2hvdWxkU2hvd05vZGUuYmluZChjb250cm9sbGVyKSlcbiAgICAuZmlsdGVyKG9taXRPdXRnb2luZ1JlcXVlc3RUYXJnZXRzKVxuICAgIC5tYXAobm9kZVRvUm93TWV0YWRhdGEpXG4gICAgLnNvcnQobG9iYnlTb3J0KTtcblxudmFyIG91dGdvaW5nUmVxdWVzdFJvd3MgPSAocmVtb3RlTm9kZSA/IFsgcmVtb3RlTm9kZSBdIDogW10pXG4gICAgLmZpbHRlcihjb250cm9sbGVyLnNob3VsZFNob3dOb2RlLmJpbmQoY29udHJvbGxlcikpXG4gICAgLm1hcChub2RlVG9Sb3dNZXRhZGF0YSk7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGJ1dHRvblRleHRcbiAqIEBwYXJhbSB7c3RyaW5nfSBidXR0b25JRFxuICogQHBhcmFtIHtzdHJpbmdbXX0gZXh0cmFDbGFzc2VzXG4gKiBAcGFyYW0ge09iamVjdH0gZXh0cmFBdHRyaWJ1dGVzXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBtYXJrdXAgZm9yIE5ldFNpbS1zdHlsZSBidXR0b25cbiAqL1xuZnVuY3Rpb24gYnV0dG9uTWFya3VwKGJ1dHRvblRleHQsIGJ1dHRvbklELCBleHRyYUNsYXNzZXMsIGV4dHJhQXR0cmlidXRlcykge1xuICB2YXIgY2xhc3NlcyA9IHV0aWxzLnZhbHVlT3IoZXh0cmFDbGFzc2VzLCBbXSk7XG4gIGNsYXNzZXMucHVzaCgnbmV0c2ltLWJ1dHRvbicpO1xuICBjbGFzc2VzLnB1c2goJ2xhcmdlLWJ1dHRvbicpO1xuXG4gIGV4dHJhQXR0cmlidXRlcyA9IHV0aWxzLnZhbHVlT3IoZXh0cmFBdHRyaWJ1dGVzLCB7fSk7XG5cbiAgdmFyIG1hcmt1cCA9ICc8c3BhbiBjbGFzcz1cIicgKyBjbGFzc2VzLmpvaW4oJyAnKSArICdcIiAnO1xuXG4gIC8vIElEIGF0dHJpYnV0ZSBmb3Igc3BhbiB0YWdcbiAgaWYgKGJ1dHRvbklEKSB7XG4gICAgbWFya3VwICs9ICdpZD1cIicgKyBidXR0b25JRCArICdcIiAnO1xuICB9XG5cbiAgLy8gRXh0cmEgYXR0cmlidXRlcyBmb3Igc3BhbiB0YWdcbiAgZm9yICh2YXIga2V5IGluIGV4dHJhQXR0cmlidXRlcykge1xuICAgIGlmIChleHRyYUF0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgbWFya3VwICs9IGtleSArICc9XCInICsgZXh0cmFBdHRyaWJ1dGVzW2tleV0gKyAnXCIgJztcbiAgICB9XG4gIH1cblxuICBtYXJrdXAgKz0gJz4nICsgYnV0dG9uVGV4dCArICc8L3NwYW4+JztcbiAgcmV0dXJuIG1hcmt1cDtcbn1cblxuZnVuY3Rpb24gd3JpdGVCZWdpblRhYmxlKGNsYXNzbmFtZSkge1xuICBpZiAoY2xhc3NuYW1lKSB7XG4gICAgOyBidWYucHVzaCgnPHRhYmxlIGNsYXNzPVwiJywgZXNjYXBlKCgxMzUsIGNsYXNzbmFtZSkpLCAnXCI+Jyk7MTM1O1xuICB9IGVsc2Uge1xuICAgIDsgYnVmLnB1c2goJzx0YWJsZT4nKTsxMzc7XG4gIH1cbn1cblxuZnVuY3Rpb24gd3JpdGVFbmRUYWJsZSgpIHtcbiAgOyBidWYucHVzaCgnPC90YWJsZT4nKTsxNDI7XG59XG5cbmZ1bmN0aW9uIHdyaXRlQmVnaW5UYm9keSgpIHtcbiAgOyBidWYucHVzaCgnPHRib2R5PicpOzE0Njtcbn1cblxuZnVuY3Rpb24gd3JpdGVFbmRUYm9keSgpIHtcbiAgOyBidWYucHVzaCgnPC90Ym9keT4nKTsxNTA7XG59XG5cbmZ1bmN0aW9uIHdyaXRlSGVhZGVyKGhlYWRlclRleHQpIHtcbiAgOyBidWYucHVzaCgnXFxuICAgIDx0aGVhZD5cXG4gICAgICA8dHI+XFxuICAgICAgICA8dGggY29sc3Bhbj1cIjNcIj4nLCBlc2NhcGUoKDE1NywgIGhlYWRlclRleHQgKSksICc8L3RoPlxcbiAgICAgIDwvdHI+XFxuICAgIDwvdGhlYWQ+XFxuICAnKTsxNjA7XG59XG5cbmZ1bmN0aW9uIHdyaXRlRW1wdHlSb3coY29udGVudHMpIHtcbiAgY29udGVudHMgPSB1dGlscy52YWx1ZU9yKGNvbnRlbnRzLCAnJyk7XG4gIDsgYnVmLnB1c2goJ1xcbiAgICA8dHI+XFxuICAgICAgPHRkIGNvbHNwYW49XCIzXCIgY2xhc3M9XCJlbXB0eS1yb3dcIj4nLCAoMTY3LCAgY29udGVudHMgKSwgJzwvdGQ+XFxuICAgIDwvdHI+XFxuICAnKTsxNjk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlTm9kZVJvdyhyb3csIG5vZGVTdGF0dXMsIGJ1dHRvblR5cGUsIGFkZGxDbGFzcykge1xuICAgIHZhciBidXR0b247XG4gICAgaWYgKGJ1dHRvblR5cGUgPT09ICdqb2luLWJ1dHRvbicpIHtcbiAgICAgIGJ1dHRvbiA9IGJ1dHRvbk1hcmt1cChpMThuLmJ1dHRvbkpvaW4oKSwgdW5kZWZpbmVkLCBbYnV0dG9uVHlwZSwgYWRkbENsYXNzXSwgeyAnZGF0YS1ub2RlLWlkJzogcm93Lm5vZGVJRCB9KTtcbiAgICB9IGVsc2UgaWYgKGJ1dHRvblR5cGUgPT09ICdhY2NlcHQtYnV0dG9uJykge1xuICAgICAgYnV0dG9uID0gYnV0dG9uTWFya3VwKGkxOG4uYnV0dG9uQWNjZXB0KCksIHVuZGVmaW5lZCwgW2J1dHRvblR5cGUsIGFkZGxDbGFzc10sIHsgJ2RhdGEtbm9kZS1pZCc6IHJvdy5ub2RlSUQgfSk7XG4gICAgfSBlbHNlIGlmIChidXR0b25UeXBlID09PSAnY2FuY2VsLWJ1dHRvbicpIHtcbiAgICAgIGJ1dHRvbiA9IGJ1dHRvbk1hcmt1cChpMThuLmJ1dHRvbkNhbmNlbCgpLCB1bmRlZmluZWQsIFtidXR0b25UeXBlLCBhZGRsQ2xhc3MsICdzZWNvbmRhcnknXSwgeyAnZGF0YS1ub2RlLWlkJzogcm93Lm5vZGVJRCB9KTtcbiAgICB9IGVsc2UgaWYgKGJ1dHRvblR5cGUgPT09ICdmdWxsLWJ1dHRvbicpIHtcbiAgICAgIGJ1dHRvbiA9IGJ1dHRvbk1hcmt1cChpMThuLmJ1dHRvbkZ1bGwoKSwgdW5kZWZpbmVkLCBbYnV0dG9uVHlwZSwgYWRkbENsYXNzXSwgeyAnZGlzYWJsZWQnOiAnZGlzYWJsZWQnIH0pO1xuICAgIH1cbiAgOyBidWYucHVzaCgnXFxuICAgIDx0cj5cXG4gICAgICA8dGQgbm93cmFwPicsIGVzY2FwZSgoMTg1LCAgcm93LmRpc3BsYXlOYW1lICkpLCAnIDxzbWFsbD4oJywgZXNjYXBlKCgxODUsICByb3cuaG9zdG5hbWUgKSksICcpPC9zbWFsbD48L3RkPlxcbiAgICAgICcpOzE4NjsgaWYgKGJ1dHRvbikgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgIDx0ZD4nLCAoMTg3LCAgbm9kZVN0YXR1cyApLCAnPC90ZD5cXG4gICAgICAgIDx0ZCBjbGFzcz1cImJ1dHRvbi1jb2x1bW5cIj5cXG4gICAgICAgICAgJywgKDE4OSwgIGJ1dHRvbiApLCAnXFxuICAgICAgICA8L3RkPlxcbiAgICAgICcpOzE5MTsgfSBlbHNlIHsgOyBidWYucHVzaCgnXFxuICAgICAgICA8dGQgY29sc3Bhbj1cIjJcIj4nLCAoMTkyLCAgbm9kZVN0YXR1cyApLCAnPC90ZD5cXG4gICAgICAnKTsxOTM7IH0gOyBidWYucHVzaCgnXFxuICAgIDwvdHI+XFxuICAnKTsxOTU7XG59XG5cbjsgYnVmLnB1c2goJ1xcbjxkaXYgY2xhc3M9XCJjb250ZW50LXdyYXBcIj5cXG4gIDxkaXYgY2xhc3M9XCJpbnN0cnVjdGlvbnNcIj5cXG4gICAgJywgZXNjYXBlKCgyMDEsICBjb250cm9sbGVyLmdldExvY2FsaXplZExvYmJ5SW5zdHJ1Y3Rpb25zKCkgKSksICdcXG4gICAgPGRpdiBjbGFzcz1cInJlZmVyZW5jZS1hcmVhLXBsYWNlaG9sZGVyXCI+PC9kaXY+XFxuICA8L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XCJjb250cm9sc1wiPlxcblxcbiAgICAnKTsyMDY7XG4gICAgICAvLyBPdXRnb2luZyByZXF1ZXN0IHRhYmxlIChoaWRkZW4gaWYgZW1wdHkpXG4gICAgICBpZiAob3V0Z29pbmdSZXF1ZXN0Um93cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHdyaXRlQmVnaW5UYWJsZSgpO1xuICAgICAgICB3cml0ZUhlYWRlcihpMThuLm91dGdvaW5nQ29ubmVjdGlvblJlcXVlc3RzKCkpO1xuICAgICAgICB3cml0ZUJlZ2luVGJvZHkoKTtcbiAgICAgICAgb3V0Z29pbmdSZXF1ZXN0Um93cy5mb3JFYWNoKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICB2YXIgb3V0Z29pbmdTdGF0dXMgPSBpMThuLmxvYmJ5U3RhdHVzV2FpdGluZ0Zvck90aGVyKHtcbiAgICAgICAgICAgIHNwaW5uZXI6ICc8aW1nIHNyYz1cIicgKyBnZXRBc3NldFVybCgnbWVkaWEvbmV0c2ltL2xvYWRpbmcuZ2lmJykgKyAnXCIgLz4nLFxuICAgICAgICAgICAgb3RoZXJOYW1lOiByb3cuZGlzcGxheU5hbWUsXG4gICAgICAgICAgICBvdGhlclN0YXR1czogcm93LnN0YXR1c1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHdyaXRlTm9kZVJvdyhyb3csIG91dGdvaW5nU3RhdHVzLCAnY2FuY2VsLWJ1dHRvbicsIHJvdy5jbGFzc0F0dHIpO1xuICAgICAgICB9KTtcbiAgICAgICAgd3JpdGVFbmRUYm9keSgpO1xuICAgICAgICB3cml0ZUVuZFRhYmxlKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIEluY29taW5nIHJlcXVlc3RzIHRhYmxlIChoaWRkZW4gaWYgZW1wdHkpXG4gICAgICBpZiAocmVxdWVzdFJvd3MubGVuZ3RoID4gMCkge1xuICAgICAgICB3cml0ZUJlZ2luVGFibGUoKTtcbiAgICAgICAgd3JpdGVIZWFkZXIoaTE4bi5pbmNvbWluZ0Nvbm5lY3Rpb25SZXF1ZXN0cygpKTtcbiAgICAgICAgd3JpdGVCZWdpblRib2R5KCk7XG4gICAgICAgIHJlcXVlc3RSb3dzLmZvckVhY2goZnVuY3Rpb24gKHJvdykge1xuICAgICAgICAgIHZhciBidXR0b25UeXBlO1xuICAgICAgICAgIGlmICghY29udHJvbGxlci5oYXNPdXRnb2luZ1JlcXVlc3QoKSAmJiByb3cuY2FuQ29ubmVjdFRvTm9kZSkge1xuICAgICAgICAgICAgYnV0dG9uVHlwZSA9ICdhY2NlcHQtYnV0dG9uJztcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGluY29taW5nU3RhdHVzID0gaTE4bi5sb2JieVN0YXR1c1dhaXRpbmdGb3JZb3UoKTtcbiAgICAgICAgICB3cml0ZU5vZGVSb3cocm93LCBpbmNvbWluZ1N0YXR1cywgYnV0dG9uVHlwZSwgcm93LmNsYXNzQXR0cik7XG4gICAgICAgIH0pO1xuICAgICAgICB3cml0ZUVuZFRib2R5KCk7XG4gICAgICAgIHdyaXRlRW5kVGFibGUoKTtcbiAgICAgIH1cbiAgICA7IGJ1Zi5wdXNoKCdcXG5cXG4gICAgJyk7MjQyO1xuICAgICAgLy8gUHJpbWFyeSBsb2JieSBsaXN0XG4gICAgICB3cml0ZUJlZ2luVGFibGUoXCJub21hcmdpblwiKTtcbiAgICAgIHdyaXRlSGVhZGVyKGkxOG4ubG9iYnkoKSk7XG4gICAgICB3cml0ZUVuZFRhYmxlKCk7XG4gICAgOyBidWYucHVzaCgnXFxuICAgIDxkaXYgaWQ9XCJuZXRzaW0tc2Nyb2xsaW5nLWxvYmJ5XCI+XFxuICAgICcpOzI0OTtcbiAgICAgIHdyaXRlQmVnaW5UYWJsZSgpO1xuICAgICAgd3JpdGVCZWdpblRib2R5KCk7XG4gICAgICBsb2JieVJvd3MuZm9yRWFjaChmdW5jdGlvbiAocm93KSB7XG4gICAgICAgIHZhciBidXR0b25UeXBlO1xuICAgICAgICBpZiAoIWNvbnRyb2xsZXIuaGFzT3V0Z29pbmdSZXF1ZXN0KCkpIHtcbiAgICAgICAgICBpZiAocm93LmlzRnVsbCkge1xuICAgICAgICAgICAgYnV0dG9uVHlwZSA9ICdmdWxsLWJ1dHRvbic7XG4gICAgICAgICAgfSBlbHNlIGlmIChyb3cuY2FuQ29ubmVjdFRvTm9kZSkge1xuICAgICAgICAgICAgYnV0dG9uVHlwZSA9ICdqb2luLWJ1dHRvbic7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHdyaXRlTm9kZVJvdyhyb3csIHJvdy5zdGF0dXMsIGJ1dHRvblR5cGUsIHJvdy5jbGFzc0F0dHIpO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBidXR0b25zID0gW107XG5cbiAgICAgIGlmIChjb250cm9sbGVyLmNhbkFkZFJvdXRlcigpKSB7XG4gICAgICAgIHZhciBidXR0b25UZXh0ID0gbGV2ZWxDb25maWcuYnJvYWRjYXN0TW9kZSA/IGkxOG4uYWRkUm9vbSgpIDogaTE4bi5hZGRSb3V0ZXIoKTtcbiAgICAgICAgYnV0dG9ucy5wdXNoKGJ1dHRvbk1hcmt1cChcbiAgICAgICAgICAgIGJ1dHRvblRleHQsXG4gICAgICAgICAgICAnbmV0c2ltLWxvYmJ5LWFkZC1yb3V0ZXInLFxuICAgICAgICAgICAgWydzZWNvbmRhcnknXVxuICAgICAgICApKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGxldmVsQ29uZmlnLnNob3dMb2dCcm93c2VyQnV0dG9uKSB7XG4gICAgICAgIGJ1dHRvbnMucHVzaChidXR0b25NYXJrdXAoXG4gICAgICAgICAgICBpMThuLmxvZ0Jyb3dzZXJCdXR0b24oKSxcbiAgICAgICAgICAgICdzaG93LXJvdXRlci1sb2ctbW9kYWwnLFxuICAgICAgICAgICAgWydzZWNvbmRhcnknXSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgJ2RhdGEtdG9nZ2xlJzonbW9kYWwnLFxuICAgICAgICAgICAgICAnZGF0YS10YXJnZXQnOicjcm91dGVyLWxvZy1tb2RhbCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChidXR0b25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgd3JpdGVFbXB0eVJvdyhidXR0b25zLmpvaW4oJyAnKSk7XG4gICAgICB9IGVsc2UgaWYgKGxvYmJ5Um93cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgd3JpdGVFbXB0eVJvdyhpMThuLmxvYmJ5SXNFbXB0eSgpKTtcbiAgICAgIH1cblxuICAgICAgd3JpdGVFbmRUYm9keSgpO1xuICAgICAgd3JpdGVFbmRUYWJsZSgpO1xuICAgIDsgYnVmLnB1c2goJ1xcbiAgICA8L2Rpdj5cXG5cXG4gIDwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cImNsZWFyXCI+PC9kaXY+XFxuPC9kaXY+XFxuJyk7IH0pKCk7XG59IFxucmV0dXJuIGJ1Zi5qb2luKCcnKTtcbn07XG4gIHJldHVybiBmdW5jdGlvbihsb2NhbHMpIHtcbiAgICByZXR1cm4gdChsb2NhbHMsIHJlcXVpcmUoXCJlanNcIikuZmlsdGVycyk7XG4gIH1cbn0oKSk7IiwiLyoqXG4gKiBAb3ZlcnZpZXcgVXRpbGl0eSBtZXRob2RzIGZvciBnZW5lcmF0aW5nIHRoZSByaWdodCBraW5kcyBvZiBub2RlIGNvbnRyb2xsZXJzXG4gKiAgICAgICAgICAgZnJvbSByYXcgbm9kZSB0YWJsZSByb3dzLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIE5ldFNpbUNvbnN0YW50cyA9IHJlcXVpcmUoJy4vTmV0U2ltQ29uc3RhbnRzJyk7XG5cbnZhciBOb2RlVHlwZSA9IE5ldFNpbUNvbnN0YW50cy5Ob2RlVHlwZTtcblxudmFyIE5ldFNpbU5vZGVGYWN0b3J5ID0gbW9kdWxlLmV4cG9ydHM7XG5cbi8qKlxuICogR2l2ZW4gYSBzZXQgb2Ygcm93cyBmcm9tIHRoZSBub2RlIHRhYmxlIG9uIGEgc2hhcmQsIGdpdmVzIGJhY2sgYSBzZXQgb2Ygbm9kZVxuICogY29udHJvbGxlcnMgKG9mIGFwcHJvcHJpYXRlIHR5cGVzKS5cbiAqIEBwYXJhbSB7IU5ldFNpbVNoYXJkfSBzaGFyZFxuICogQHBhcmFtIHshQXJyYXkuPE9iamVjdD59IG5vZGVSb3dzXG4gKiBAdGhyb3dzIHdoZW4gYSByb3cgZG9lc24ndCBoYXZlIGEgbWFwcGFibGUgbm9kZSB0eXBlLlxuICogQHJldHVybiB7QXJyYXkuPE5ldFNpbU5vZGU+fSBub2RlcyBmb3IgdGhlIHJvd3NcbiAqL1xuTmV0U2ltTm9kZUZhY3Rvcnkubm9kZXNGcm9tUm93cyA9IGZ1bmN0aW9uIChzaGFyZCwgbm9kZVJvd3MpIHtcbiAgcmV0dXJuIG5vZGVSb3dzLm1hcChOZXRTaW1Ob2RlRmFjdG9yeS5ub2RlRnJvbVJvdy5iaW5kKHRoaXMsIHNoYXJkKSk7XG59O1xuXG4vKipcbiAqIEdpdmVuIGEgcm93IGZyb20gdGhlIG5vZGUgdGFibGUgb24gYSBzaGFyZCwgZ2l2ZXMgYmFjayBhIG5vZGUgY29udHJvbGxlcnNcbiAqIChvZiBhcHByb3ByaWF0ZSB0eXBlcykuXG4gKiBAcGFyYW0geyFOZXRTaW1TaGFyZH0gc2hhcmRcbiAqIEBwYXJhbSB7IU9iamVjdH0gbm9kZVJvd1xuICogQHRocm93cyB3aGVuIHRoZSByb3cgZG9lc24ndCBoYXZlIGEgbWFwcGFibGUgbm9kZSB0eXBlLlxuICogQHJldHVybiB7TmV0U2ltTm9kZX0gbm9kZSBmb3IgdGhlIHJvd3NcbiAqL1xuTmV0U2ltTm9kZUZhY3Rvcnkubm9kZUZyb21Sb3cgPSBmdW5jdGlvbiAoc2hhcmQsIG5vZGVSb3cpIHtcbiAgaWYgKG5vZGVSb3cudHlwZSA9PT0gTm9kZVR5cGUuQ0xJRU5UKSB7XG4gICAgdmFyIE5ldFNpbUNsaWVudE5vZGUgPSByZXF1aXJlKCcuL05ldFNpbUNsaWVudE5vZGUnKTtcbiAgICByZXR1cm4gbmV3IE5ldFNpbUNsaWVudE5vZGUoc2hhcmQsIG5vZGVSb3cpO1xuICB9IGVsc2UgaWYgKG5vZGVSb3cudHlwZSA9PT0gTm9kZVR5cGUuUk9VVEVSKSB7XG4gICAgdmFyIE5ldFNpbVJvdXRlck5vZGUgPSByZXF1aXJlKCcuL05ldFNpbVJvdXRlck5vZGUnKTtcbiAgICByZXR1cm4gbmV3IE5ldFNpbVJvdXRlck5vZGUoc2hhcmQsIG5vZGVSb3cpO1xuICB9XG5cbiAgLy8gT29wcyEgIFdlIHByb2JhYmx5IHNob3VsZG4ndCBldmVyIGdldCBoZXJlLlxuICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gbWFwIHJvdyB0byBub2RlLlwiKTtcbn07XG4iLCIvKipcbiAqIEBvdmVydmlldyBSb3V0ZXIgbm9kZSBzaW11bGF0aW9uIGVudGl0eS4gIEFsc28gY29udGFpbnMgbG9naWMgZm9yIHRoZVxuICogICAgICAgICAgIGF1dG8tRE5TIHN5c3RlbS5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgaTE4biA9IHJlcXVpcmUoJy4vbG9jYWxlJyk7XG52YXIgTmV0U2ltQ29uc3RhbnRzID0gcmVxdWlyZSgnLi9OZXRTaW1Db25zdGFudHMnKTtcbnZhciBOZXRTaW1VdGlscyA9IHJlcXVpcmUoJy4vTmV0U2ltVXRpbHMnKTtcbnZhciBOZXRTaW1Ob2RlID0gcmVxdWlyZSgnLi9OZXRTaW1Ob2RlJyk7XG52YXIgTmV0U2ltRW50aXR5ID0gcmVxdWlyZSgnLi9OZXRTaW1FbnRpdHknKTtcbnZhciBOZXRTaW1Mb2dFbnRyeSA9IHJlcXVpcmUoJy4vTmV0U2ltTG9nRW50cnknKTtcbnZhciBOZXRTaW1Mb2dnZXIgPSByZXF1aXJlKCcuL05ldFNpbUxvZ2dlcicpO1xudmFyIE5ldFNpbVdpcmUgPSByZXF1aXJlKCcuL05ldFNpbVdpcmUnKTtcbnZhciBOZXRTaW1NZXNzYWdlID0gcmVxdWlyZSgnLi9OZXRTaW1NZXNzYWdlJyk7XG52YXIgT2JzZXJ2YWJsZUV2ZW50ID0gcmVxdWlyZSgnLi4vT2JzZXJ2YWJsZUV2ZW50Jyk7XG52YXIgUGFja2V0ID0gcmVxdWlyZSgnLi9QYWNrZXQnKTtcbnZhciBEYXRhQ29udmVydGVycyA9IHJlcXVpcmUoJy4vRGF0YUNvbnZlcnRlcnMnKTtcbnZhciBOZXRTaW1Ob2RlRmFjdG9yeSA9IHJlcXVpcmUoJy4vTmV0U2ltTm9kZUZhY3RvcnknKTtcblxudmFyIF8gPSB1dGlscy5nZXRMb2Rhc2goKTtcblxudmFyIHNlcmlhbGl6ZU51bWJlciA9IE5ldFNpbVV0aWxzLnNlcmlhbGl6ZU51bWJlcjtcbnZhciBkZXNlcmlhbGl6ZU51bWJlciA9IE5ldFNpbVV0aWxzLmRlc2VyaWFsaXplTnVtYmVyO1xuXG52YXIgYXNjaWlUb0JpbmFyeSA9IERhdGFDb252ZXJ0ZXJzLmFzY2lpVG9CaW5hcnk7XG5cbnZhciBEbnNNb2RlID0gTmV0U2ltQ29uc3RhbnRzLkRuc01vZGU7XG52YXIgTm9kZVR5cGUgPSBOZXRTaW1Db25zdGFudHMuTm9kZVR5cGU7XG52YXIgQklUU19QRVJfQllURSA9IE5ldFNpbUNvbnN0YW50cy5CSVRTX1BFUl9CWVRFO1xuXG52YXIgbG9nZ2VyID0gTmV0U2ltTG9nZ2VyLmdldFNpbmdsZXRvbigpO1xudmFyIE5ldFNpbUdsb2JhbHMgPSByZXF1aXJlKCcuL05ldFNpbUdsb2JhbHMnKTtcblxuLyoqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQHJlYWRvbmx5XG4gKi9cbnZhciBNQVhfQ0xJRU5UX0NPTk5FQ1RJT05TID0gNjtcblxuLyoqXG4gKiBDb252ZW5pZW50bHksIGEgcm91dGVyJ3MgYWRkcmVzcyBpbiBpdHMgbG9jYWwgbmV0d29yayBpcyBhbHdheXMgemVyby5cbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAcmVhZG9ubHlcbiAqL1xudmFyIFJPVVRFUl9MT0NBTF9BRERSRVNTID0gMDtcblxuLyoqXG4gKiBBZGRyZXNzIHRoYXQgY2FuIG9ubHkgYmUgdXNlZCBmb3IgdGhlIGF1dG8tZG5zIG5vZGUuXG4gKiBNYXkgZXZlbnR1YWxseSBiZSByZXBsYWNlZCB3aXRoIGEgZHluYW1pY2FsbHkgYXNzaWduZWQgYWRkcmVzcy5cbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAcmVhZG9ubHlcbiAqL1xudmFyIEFVVE9fRE5TX1JFU0VSVkVEX0FERFJFU1MgPSAxNTtcblxuLyoqXG4gKiBIb3N0bmFtZSBhc3NpZ25lZCB0byB0aGUgYXV0b21hdGljIGRucyAnbm9kZScgaW4gdGhlIGxvY2FsIG5ldHdvcmsuXG4gKiBUaGVyZSB3aWxsIG9ubHkgYmUgb25lIG9mIHRoZXNlLCBzbyBpdCBjYW4gYmUgc2ltcGxlLlxuICogQHR5cGUge3N0cmluZ31cbiAqIEByZWFkb25seVxuICovXG52YXIgQVVUT19ETlNfSE9TVE5BTUUgPSAnZG5zJztcblxuLyoqXG4gKiBWYWx1ZSB0aGUgYXV0by1ETlMgd2lsbCByZXR1cm4gaW5zdGVhZCBvZiBhbiBhZGRyZXNzIHdoZW4gaXQgY2FuJ3RcbiAqIGxvY2F0ZSBhIG5vZGUgd2l0aCB0aGUgZ2l2ZW4gaG9zdG5hbWUgaW4gdGhlIGxvY2FsIG5ldHdvcmsuXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQHJlYWRvbmx5XG4gKi9cbnZhciBBVVRPX0ROU19OT1RfRk9VTkQgPSAnTk9UX0ZPVU5EJztcblxuLyoqXG4gKiBNYXhpbXVtIHBhY2tldCBsaWZldGltZSBpbiB0aGUgcm91dGVyIHF1ZXVlLCBzb3J0IG9mIGEgcHJpbWl0aXZlIFRpbWUtVG8tTGl2ZVxuICogc3lzdGVtIHRoYXQgaGVscHMgcHJldmVudCBhIHF1ZXVlIGZyb20gYmVpbmcgaW5kZWZpbml0ZWx5IGJsb2NrZWQgYnkgYSB2ZXJ5XG4gKiBsYXJnZSBwYWNrZXQuICBQYWNrZXRzIHRoYXQgZXhjZWVkIHRoaXMgdGltZSB3aWxsIHNpbGVudGx5IGZhaWwgZGVsaXZlcnkuXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQHJlYWRvbmx5XG4gKi9cbnZhciBQQUNLRVRfTUFYX0xJRkVUSU1FX01TID0gMTAgKiA2MCAqIDEwMDA7XG5cbi8qKlxuICogVG8gYXZvaWQgY2FsY3VsYXRpbmcgYSB0b3RhbGx5IHVucmVhc29uYWJsZSBudW1iZXIgb2YgYWRkcmVzc2VzLCB0aGlzIGlzXG4gKiB0aGUgbW9zdCBhZGRyZXNzZXMgd2Ugd2lsbCBjb25zaWRlciB3aGVuIHBpY2tpbmcgb25lIGZvciBhIG5ldyBob3N0LlxuICogVGhpcyBtZWFucyBmdWxsIHN1cHBvcnQgdXAgdG8gYSAxMi1iaXQgYWRkcmVzcyBwYXJ0LCB3aGljaCBzaG91bGQgYmUgbW9yZVxuICogdGhhbiBlbm91Z2guXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG52YXIgQUREUkVTU19PUFRJT05fTElNSVQgPSA0MDk2O1xuXG4vKipcbiAqIENsaWVudCBtb2RlbCBvZiBzaW11bGF0ZWQgcm91dGVyXG4gKlxuICogUmVwcmVzZW50cyB0aGUgY2xpZW50J3MgdmlldyBvZiBhIGdpdmVuIHJvdXRlciwgcHJvdmlkZXMgbWV0aG9kcyBmb3JcbiAqICAgbGV0dGluZyB0aGUgY2xpZW50IGludGVyYWN0IHdpdGggdGhlIHJvdXRlciwgYW5kIHdyYXBzIHRoZSBjbGllbnQnc1xuICogICB3b3JrIGRvaW5nIHBhcnQgb2YgdGhlIHJvdXRlciBzaW11bGF0aW9uLlxuICpcbiAqIEEgcm91dGVyIC1leGlzdHMtIHdoZW4gaXQgaGFzIGEgcm93IGluIHRoZSBsb2JieSB0YWJsZSBvZiB0eXBlICdyb3V0ZXInXG4gKiBBIHJvdXRlciBpcyBjb25uZWN0ZWQgdG8gYSB1c2VyIHdoZW4gYSAndXNlcicgcm93IGV4aXN0cyBpbiB0aGUgbG9iYnlcbiAqICAgdGFibGUgdGhhdCBoYXMgYSBzdGF0dXMgJ0Nvbm5lY3RlZCB0byB7cm91dGVyIElEfSBieSB3aXJlcyB7WCwgWX0nLlxuICogQSByb3V0ZXIgd2lsbCBhbHNvIHNoYXJlIGEgd2lyZSAoc2ltcGxleCkgb3Igd2lyZXMgKGR1cGxleCkgd2l0aCBlYWNoIHVzZXIsXG4gKiAgIHdoaWNoIGFwcGVhciBpbiB0aGUgd2lyZSB0YWJsZS5cbiAqXG4gKiBAcGFyYW0geyFOZXRTaW1TaGFyZH0gc2hhcmRcbiAqIEBwYXJhbSB7Um91dGVyUm93fSBbcm91dGVyUm93XSAtIExvYmJ5IHJvdyBmb3IgdGhpcyByb3V0ZXIuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhdWdtZW50cyBOZXRTaW1Ob2RlXG4gKi9cbnZhciBOZXRTaW1Sb3V0ZXJOb2RlID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc2hhcmQsIHJvdykge1xuICByb3cgPSByb3cgIT09IHVuZGVmaW5lZCA/IHJvdyA6IHt9O1xuICBOZXRTaW1Ob2RlLmNhbGwodGhpcywgc2hhcmQsIHJvdyk7XG5cbiAgdmFyIGxldmVsQ29uZmlnID0gTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpO1xuXG4gIC8qKlxuICAgKiBUaGlzIHJvdXRlcidzIGlkZW50aWZ5aW5nIG51bWJlciwgd2hpY2ggZ2V0cyB0cmFuc2xhdGVkIGludG8gaXRzIGFkZHJlc3MuXG4gICAqIFNob3VsZCBiZSB1bmlxdWUgYW1vbmcgcm91dGVycyBvbiB0aGUgc2hhcmQuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLnJvdXRlck51bWJlciA9IHJvdy5yb3V0ZXJOdW1iZXI7XG5cbiAgLyoqXG4gICAqIFVuaXggdGltZXN0YW1wIChsb2NhbCkgb2Ygcm91dGVyIGNyZWF0aW9uIHRpbWUuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLmNyZWF0aW9uVGltZSA9IHV0aWxzLnZhbHVlT3Iocm93LmNyZWF0aW9uVGltZSwgRGF0ZS5ub3coKSk7XG5cbiAgLyoqXG4gICAqIFNldHMgY3VycmVudCBETlMgbW9kZSBmb3IgdGhlIHJvdXRlcidzIGxvY2FsIG5ldHdvcmsuXG4gICAqIFRoaXMgdmFsdWUgaXMgbWFuaXB1bGF0ZWQgYnkgYWxsIGNsaWVudHMuXG4gICAqIEB0eXBlIHtEbnNNb2RlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5kbnNNb2RlID0gdXRpbHMudmFsdWVPcihyb3cuZG5zTW9kZSwgbGV2ZWxDb25maWcuZGVmYXVsdERuc01vZGUpO1xuXG4gIC8qKlxuICAgKiBTZXRzIGN1cnJlbnQgRE5TIG5vZGUgSUQgZm9yIHRoZSByb3V0ZXIncyBsb2NhbCBuZXR3b3JrLlxuICAgKiBUaGlzIHZhbHVlIGlzIG1hbmlwdWxhdGVkIGJ5IGFsbCBjbGllbnRzLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5kbnNOb2RlSUQgPSByb3cuZG5zTm9kZUlEO1xuXG4gIC8qKlxuICAgKiBTcGVlZCAoaW4gYml0cyBwZXIgc2Vjb25kKSBhdCB3aGljaCBtZXNzYWdlcyBhcmUgcHJvY2Vzc2VkLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5iYW5kd2lkdGggPSB1dGlscy52YWx1ZU9yKGRlc2VyaWFsaXplTnVtYmVyKHJvdy5iYW5kd2lkdGgpLFxuICAgICAgbGV2ZWxDb25maWcuZGVmYXVsdFJvdXRlckJhbmR3aWR0aCk7XG5cbiAgLyoqXG4gICAqIEFtb3VudCBvZiBkYXRhIChpbiBiaXRzKSB0aGF0IHRoZSByb3V0ZXIgcXVldWUgY2FuIGhvbGQgYmVmb3JlIGl0IHN0YXJ0c1xuICAgKiBkcm9wcGluZyBwYWNrZXRzLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5tZW1vcnkgPSB1dGlscy52YWx1ZU9yKGRlc2VyaWFsaXplTnVtYmVyKHJvdy5tZW1vcnkpLFxuICAgICAgbGV2ZWxDb25maWcuZGVmYXVsdFJvdXRlck1lbW9yeSk7XG5cbiAgLyoqXG4gICAqIFBlcmNlbnQgY2hhbmNlICgwLTEpIHRoYXQgYSBwYWNrZXQgYmVpbmcgcm91dGVkIHdpbGwgYmUgZHJvcHBlZCBmb3Igbm9cbiAgICogcmVhc29uLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5yYW5kb21Ecm9wQ2hhbmNlID0gdXRpbHMudmFsdWVPcihyb3cucmFuZG9tRHJvcENoYW5jZSxcbiAgICAgIGxldmVsQ29uZmlnLmRlZmF1bHRSYW5kb21Ecm9wQ2hhbmNlKTtcblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBhIHN1YnNldCBvZiBjb25uZWN0aW9uIGFuZCBtZXNzYWdlIGV2ZW50cyB0aGF0IHRoaXNcbiAgICogcm91dGVyIHdpbGwgcmVzcG9uZCB0bywgb25seSBtYW5hZ2luZyBldmVudHMgZnJvbSB0aGUgZ2l2ZW4gbm9kZSBJRCxcbiAgICogdG8gYXZvaWQgY29uZmxpY3Rpbmcgd2l0aCBvdGhlciBjbGllbnRzIGFsc28gc2ltdWxhdGluZyB0aGlzIHJvdXRlci5cbiAgICpcbiAgICogTm90IHBlcnNpc3RlZCBvbiBzZXJ2ZXIuXG4gICAqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnNpbXVsYXRlRm9yU2VuZGVyXyA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogTG9jYWwgY2FjaGUgb2YgdGhlIGxhc3QgdGljayB0aW1lIGluIHRoZSBsb2NhbCBzaW11bGF0aW9uLlxuICAgKiBBbGxvd3MgdXMgdG8gc2NoZWR1bGUvdGltZXN0YW1wIGV2ZW50cyB0aGF0IGRvbid0IGhhcHBlbiBpbnNpZGUgdGhlXG4gICAqIHRpY2sgZXZlbnQuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnNpbXVsYXRpb25UaW1lXyA9IDA7XG5cbiAgLyoqXG4gICAqIFBhY2tldCBmb3JtYXQgc3BlY2lmaWNhdGlvbiB0aGlzIHJvdXRlciB3aWxsIHVzZSB0byBwYXJzZSwgcm91dGUsIGFuZCBsb2dcbiAgICogcGFja2V0cyB0aGF0IGl0IHJlY2VpdmVzLiAgU2V0IG9uIHJvdXRlciB0aGF0IGlzIHNpbXVsYXRlZCBieSBjbGllbnQuXG4gICAqXG4gICAqIE5vdCBwZXJzaXN0ZWQgb24gc2VydmVyLlxuICAgKlxuICAgKiBAdHlwZSB7UGFja2V0LkhlYWRlclR5cGVbXX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucGFja2V0U3BlY18gPSBbXTtcblxuICAvKipcbiAgICogTG9jYWwgY2FjaGUgb2Ygb3VyIHJlbW90ZSByb3csIHVzZWQgdG8gZGVjaWRlIHdoZXRoZXIgb3VyIHN0YXRlIGhhc1xuICAgKiBjaGFuZ2VkLlxuICAgKiBcbiAgICogTm90IHBlcnNpc3RlZCB0byBzZXJ2ZXIuXG4gICAqIFxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5zdGF0ZUNhY2hlXyA9IHt9O1xuICBcbiAgLyoqXG4gICAqIEV2ZW50IG90aGVycyBjYW4gb2JzZXJ2ZSwgd2hpY2ggd2UgZmlyZSB3aGVuIG91ciBvd24gcmVtb3RlIHJvdyBjaGFuZ2VzLlxuICAgKiBcbiAgICogQHR5cGUge09ic2VydmFibGVFdmVudH1cbiAgICovXG4gIHRoaXMuc3RhdGVDaGFuZ2UgPSBuZXcgT2JzZXJ2YWJsZUV2ZW50KCk7XG5cbiAgLyoqXG4gICAqIEV2ZW50IG90aGVycyBjYW4gb2JzZXJ2ZSwgd2hpY2ggd2UgZmlyZSB3aGVuIHRoZSByb3V0ZXIgc3RhdGlzdGljc1xuICAgKiBjaGFuZ2UgKHdoaWNoIG1heSBiZSB2ZXJ5IGZyZXF1ZW50Li4uKVxuICAgKlxuICAgKiBAdHlwZSB7T2JzZXJ2YWJsZUV2ZW50fVxuICAgKi9cbiAgdGhpcy5zdGF0c0NoYW5nZSA9IG5ldyBPYnNlcnZhYmxlRXZlbnQoKTtcblxuICAvKipcbiAgICogTG9jYWwgY2FjaGUgb2Ygd2lyZXMgYXR0YWNoZWQgdG8gdGhpcyByb3V0ZXIsIHVzZWQgZm9yIGRldGVjdGluZyBhbmRcbiAgICogYnJvYWRjYXN0aW5nIHJlbGV2YW50IGNoYW5nZXMuXG4gICAqXG4gICAqIE5vdCBwZXJzaXN0ZWQgb24gc2VydmVyLlxuICAgKlxuICAgKiBAdHlwZSB7QXJyYXl9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLm15V2lyZVJvd0NhY2hlXyA9IFtdO1xuXG4gIC8qKlxuICAgKiBFdmVudCBvdGhlcnMgY2FuIG9ic2VydmUsIHdoaWNoIHdlIGZpcmUgd2hlbiB0aGUgcm91dGVyJ3Mgc2V0IG9mIHdpcmVzXG4gICAqIGNoYW5nZXMgaW5kaWNhdGluZyBhIGNoYW5nZSBpbiB0aGUgbG9jYWwgbmV0d29yay5cbiAgICpcbiAgICogQHR5cGUge09ic2VydmFibGVFdmVudH1cbiAgICovXG4gIHRoaXMud2lyZXNDaGFuZ2UgPSBuZXcgT2JzZXJ2YWJsZUV2ZW50KCk7XG5cbiAgLyoqXG4gICAqIExvY2FsIGNhY2hlIG9mIGxvZyByb3dzIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHJvdXRlciwgdXNlZCBmb3IgZGV0ZWN0aW5nXG4gICAqIGFuZCBicm9hZGNhc3RpbmcgcmVsZXZhbnQgY2hhbmdlcy5cbiAgICogXG4gICAqIEB0eXBlIHtBcnJheX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubXlMb2dSb3dDYWNoZV8gPSBbXTtcbiAgXG4gIC8qKlxuICAgKiBFdmVudCBvdGhlcnMgY2FuIG9ic2VydmUsIHdoaWNoIHdlIGZpcmUgd2hlbiB0aGUgcm91dGVyJ3MgbG9nIGNvbnRlbnRcbiAgICogY2hhbmdlcy5cbiAgICogXG4gICAqIEB0eXBlIHtPYnNlcnZhYmxlRXZlbnR9XG4gICAqL1xuICB0aGlzLmxvZ0NoYW5nZSA9IG5ldyBPYnNlcnZhYmxlRXZlbnQoKTtcblxuICAvKipcbiAgICogV2hldGhlciByb3V0ZXIgaXMgaW4gdGhlIG1pZGRsZSBvZiB3b3JrLiAgS2VlcHMgcm91dGVyIGZyb20gcGlja2luZyB1cFxuICAgKiBpdHMgb3duIGNoYW5nZSBub3RpZmljYXRpb25zIG9yIGludGVycnVwdGluZyBpdHMgb3duIHByb2Nlc3Nlcy5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmlzUm91dGVyUHJvY2Vzc2luZ18gPSBmYWxzZTtcblxuICAvKipcbiAgICogTG9jYWwgY2FjaGUgb2YgbWVzc2FnZXMgdGhhdCBuZWVkIHRvIGJlIHByb2Nlc3NlZCBieSAoYW55IHNpbXVsYXRpb25cbiAgICogb2YpIHRoZSByb3V0ZXIuICBVc2VkIGZvciB0cmFja2luZyByb3V0ZXIgbWVtb3J5LCB0aHJvdWdocHV0LCBldGMuXG4gICAqIEB0eXBlIHtOZXRTaW1NZXNzYWdlW119XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnJvdXRlclF1ZXVlQ2FjaGVfID0gW107XG5cbiAgLyoqXG4gICAqIFNldCBvZiBzY2hlZHVsZWQgJ3JvdXRpbmcgZXZlbnRzJ1xuICAgKiBAdHlwZSB7T2JqZWN0W119XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmxvY2FsUm91dGluZ1NjaGVkdWxlXyA9IFtdO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuaXNBdXRvRG5zUHJvY2Vzc2luZ18gPSBmYWxzZTtcblxuICAvKipcbiAgICogTG9jYWwgY2FjaGUgb2YgbWVzc2FnZXMgdGhhdCBuZWVkIHRvIGJlIHByb2Nlc3NlZCBieSAoYW55IHNpbXVsYXRpb25cbiAgICogb2YpIHRoZSBhdXRvLUROUy4gVXNlZCBmb3Igc3RhdHMgYW5kIGxpbWl0aW5nLlxuICAgKiBAdHlwZSB7TmV0U2ltTWVzc2FnZVtdfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5hdXRvRG5zUXVldWVfID0gW107XG5cbiAgLyoqXG4gICAqIE1vc3QgY2xpZW50cyB0aGF0IGNhbiBiZSBjb25uZWN0ZWQgdG8gdGhpcyByb3V0ZXIuXG4gICAqIE1vdmVkIHRvIGluc3RhbmNlIHZhcmlhYmxlIHNvIHRoYXQgdGVzdHMgY2FuIG92ZXJyaWRlIGl0IGluIGNlcnRhaW4gY2FzZXMuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLm1heENsaWVudENvbm5lY3Rpb25zXyA9IE1BWF9DTElFTlRfQ09OTkVDVElPTlM7XG59O1xuTmV0U2ltUm91dGVyTm9kZS5pbmhlcml0cyhOZXRTaW1Ob2RlKTtcblxuLyoqXG4gKiBTdGF0aWMgYXN5bmMgY3JlYXRpb24gbWV0aG9kLiBTZWUgTmV0U2ltRW50aXR5LmNyZWF0ZSgpLlxuICogQHBhcmFtIHshTmV0U2ltU2hhcmR9IHNoYXJkXG4gKiBAcGFyYW0geyFOb2RlU3R5bGVDYWxsYmFja30gb25Db21wbGV0ZSAtIE1ldGhvZCB0aGF0IHdpbGwgYmUgZ2l2ZW4gdGhlXG4gKiAgICAgICAgY3JlYXRlZCBlbnRpdHksIG9yIG51bGwgaWYgZW50aXR5IGNyZWF0aW9uIGZhaWxlZC5cbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5jcmVhdGUgPSBmdW5jdGlvbiAoc2hhcmQsIG9uQ29tcGxldGUpIHtcbiAgdmFyIG5leHRSb3V0ZXJOdW1iZXIgPSAxO1xuICBzaGFyZC5ub2RlVGFibGUucmVhZEFsbCgpLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBpZiAoTm9kZVR5cGUuUk9VVEVSID09PSBub2RlLnR5cGUgJiYgbm9kZS5yb3V0ZXJOdW1iZXIgPj0gbmV4dFJvdXRlck51bWJlcikge1xuICAgICAgbmV4dFJvdXRlck51bWJlciA9IG5vZGUucm91dGVyTnVtYmVyICsgMTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBlbnRpdHkgPSBuZXcgTmV0U2ltUm91dGVyTm9kZShzaGFyZCwgeyByb3V0ZXJOdW1iZXI6IG5leHRSb3V0ZXJOdW1iZXIgfSk7XG4gIGVudGl0eS5nZXRUYWJsZSgpLmNyZWF0ZShlbnRpdHkuYnVpbGRSb3coKSwgZnVuY3Rpb24gKGVyciwgcm93KSB7XG4gICAgaWYgKGVycikge1xuICAgICAgb25Db21wbGV0ZShlcnIsIG51bGwpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBvbkNvbXBsZXRlKG51bGwsIG5ldyBOZXRTaW1Sb3V0ZXJOb2RlKHNoYXJkLCByb3cpKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFN0YXRpYyBhc3luYyByZXRyaWV2YWwgbWV0aG9kLiAgU2VlIE5ldFNpbUVudGl0eS5nZXQoKS5cbiAqIEBwYXJhbSB7IW51bWJlcn0gcm91dGVySUQgLSBUaGUgcm93IElEIGZvciB0aGUgZW50aXR5IHlvdSdkIGxpa2UgdG8gZmluZC5cbiAqIEBwYXJhbSB7IU5ldFNpbVNoYXJkfSBzaGFyZFxuICogQHBhcmFtIHshTm9kZVN0eWxlQ2FsbGJhY2t9IG9uQ29tcGxldGUgLSBNZXRob2QgdGhhdCB3aWxsIGJlIGdpdmVuIHRoZVxuICogICAgICAgIGZvdW5kIGVudGl0eSwgb3IgbnVsbCBpZiBlbnRpdHkgc2VhcmNoIGZhaWxlZC5cbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5nZXQgPSBmdW5jdGlvbiAocm91dGVySUQsIHNoYXJkLCBvbkNvbXBsZXRlKSB7XG4gIE5ldFNpbUVudGl0eS5nZXQoTmV0U2ltUm91dGVyTm9kZSwgcm91dGVySUQsIHNoYXJkLCBvbkNvbXBsZXRlKTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUm91dGVyUm93XG4gKiBAcHJvcGVydHkge251bWJlcn0gY3JlYXRpb25UaW1lIC0gVW5peCB0aW1lc3RhbXAgKGxvY2FsKVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGJhbmR3aWR0aCAtIFJvdXRlciBtYXggdHJhbnNtaXNzaW9uL3Byb2Nlc3NpbmcgcmF0ZVxuICogICAgICAgICAgIGluIGJpdHMvc2Vjb25kXG4gKiBAcHJvcGVydHkge251bWJlcn0gbWVtb3J5IC0gUm91dGVyIG1heCBxdWV1ZSBjYXBhY2l0eSBpbiBiaXRzXG4gKiBAcHJvcGVydHkge0Ruc01vZGV9IGRuc01vZGUgLSBDdXJyZW50IEROUyBtb2RlIGZvciB0aGUgbG9jYWwgbmV0d29ya1xuICogQHByb3BlcnR5IHtudW1iZXJ9IGRuc05vZGVJRCAtIEVudGl0eSBJRCBvZiB0aGUgY3VycmVudCBETlMgbm9kZSBpbiB0aGVcbiAqICAgICAgICAgICBsb2NhbCBuZXR3b3JrLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IHJhbmRvbURyb3BDaGFuY2UgLSBPZGRzICgwLTEpIHRoYXQgYSBwYWNrZXQgYmVpbmcgcm91dGVkXG4gKiAgICAgICAgICAgd2lsbCBiZSBkcm9wcGVkIGZvciBubyByZWFzb24uXG4gKi9cblxuLyoqXG4gKiBCdWlsZCB0YWJsZSByb3cgZm9yIHRoaXMgbm9kZS5cbiAqIEByZXR1cm5zIHtSb3V0ZXJSb3d9XG4gKiBAcHJpdmF0ZVxuICogQG92ZXJyaWRlXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLmJ1aWxkUm93ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdXRpbHMuZXh0ZW5kKFxuICAgICAgTmV0U2ltUm91dGVyTm9kZS5zdXBlclByb3RvdHlwZS5idWlsZFJvdy5jYWxsKHRoaXMpLFxuICAgICAge1xuICAgICAgICByb3V0ZXJOdW1iZXI6IHRoaXMucm91dGVyTnVtYmVyLFxuICAgICAgICBjcmVhdGlvblRpbWU6IHRoaXMuY3JlYXRpb25UaW1lLFxuICAgICAgICBiYW5kd2lkdGg6IHNlcmlhbGl6ZU51bWJlcih0aGlzLmJhbmR3aWR0aCksXG4gICAgICAgIG1lbW9yeTogc2VyaWFsaXplTnVtYmVyKHRoaXMubWVtb3J5KSxcbiAgICAgICAgZG5zTW9kZTogdGhpcy5kbnNNb2RlLFxuICAgICAgICBkbnNOb2RlSUQ6IHRoaXMuZG5zTm9kZUlELFxuICAgICAgICByYW5kb21Ecm9wQ2hhbmNlOiB0aGlzLnJhbmRvbURyb3BDaGFuY2VcbiAgICAgIH1cbiAgKTtcbn07XG5cbi8qKlxuICogTG9hZCBzdGF0ZSBmcm9tIHJlbW90ZVJvdyBpbnRvIGxvY2FsIG1vZGVsLCB0aGVuIG5vdGlmeSBhbnl0aGluZyBvYnNlcnZpbmdcbiAqIHVzIHRoYXQgd2UndmUgY2hhbmdlZC5cbiAqIEBwYXJhbSB7Um91dGVyUm93fSByZW1vdGVSb3dcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLm9uTXlTdGF0ZUNoYW5nZV8gPSBmdW5jdGlvbiAocmVtb3RlUm93KSB7XG4gIHRoaXMucm91dGVyTnVtYmVyID0gcmVtb3RlUm93LnJvdXRlck51bWJlcjtcbiAgdGhpcy5jcmVhdGlvblRpbWUgPSByZW1vdGVSb3cuY3JlYXRpb25UaW1lO1xuICB0aGlzLmJhbmR3aWR0aCA9IGRlc2VyaWFsaXplTnVtYmVyKHJlbW90ZVJvdy5iYW5kd2lkdGgpO1xuICB0aGlzLm1lbW9yeSA9IGRlc2VyaWFsaXplTnVtYmVyKHJlbW90ZVJvdy5tZW1vcnkpO1xuICB0aGlzLmRuc01vZGUgPSByZW1vdGVSb3cuZG5zTW9kZTtcbiAgdGhpcy5kbnNOb2RlSUQgPSByZW1vdGVSb3cuZG5zTm9kZUlEO1xuICB0aGlzLnJhbmRvbURyb3BDaGFuY2UgPSByZW1vdGVSb3cucmFuZG9tRHJvcENoYW5jZTtcbiAgdGhpcy5zdGF0ZUNoYW5nZS5ub3RpZnlPYnNlcnZlcnModGhpcyk7XG59O1xuXG4vKipcbiAqIFBlcmZvcm1zIHF1ZXVlZCByb3V0aW5nIGFuZCBETlMgb3BlcmF0aW9ucy5cbiAqIEBwYXJhbSB7UnVuTG9vcC5DbG9ja30gY2xvY2tcbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUudGljayA9IGZ1bmN0aW9uIChjbG9jaykge1xuICB0aGlzLnNpbXVsYXRpb25UaW1lXyA9IGNsb2NrLnRpbWU7XG4gIHRoaXMucm91dGVPdmVyZHVlTWVzc2FnZXNfKGNsb2NrKTtcbiAgaWYgKHRoaXMuZG5zTW9kZSA9PT0gRG5zTW9kZS5BVVRPTUFUSUMpIHtcbiAgICB0aGlzLnRpY2tBdXRvRG5zXyhjbG9jayk7XG4gIH1cbn07XG5cbi8qKlxuICogVGhpcyBuYW1lIGlzIGEgYml0IG9mIGEgbWlzbm9tZXIsIGJ1dCBpdCdzIG1lbW9yYWJsZTsgd2UgYWN0dWFsbHkgcm91dGVcbiAqIGFsbCBtZXNzYWdlcyB0aGF0IGFyZSBEVUUgb3IgT1ZFUkRVRS5cbiAqIEBwYXJhbSB7UnVuTG9vcC5DbG9ja30gY2xvY2tcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLnJvdXRlT3ZlcmR1ZU1lc3NhZ2VzXyA9IGZ1bmN0aW9uIChjbG9jaykge1xuICBpZiAodGhpcy5pc1JvdXRlclByb2Nlc3NpbmdfKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gU2VwYXJhdGUgb3V0IG1lc3NhZ2VzIHdob3NlIHNjaGVkdWxlZCB0aW1lIGhhcyBhcnJpdmVkIG9yIGlzIHBhc3QuXG4gIC8vIEZsYWcgdGhlbSBzbyB3ZSBjYW4gcmVtb3ZlIHRoZW0gbGF0ZXIuXG4gIHZhciByZWFkeVNjaGVkdWxlTWVzc2FnZXMgPSBbXTtcbiAgdmFyIGV4cGlyZWRTY2hlZHVsZU1lc3NhZ2VzID0gW107XG4gIHRoaXMubG9jYWxSb3V0aW5nU2NoZWR1bGVfLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBpZiAoY2xvY2sudGltZSA+PSBpdGVtLmNvbXBsZXRpb25UaW1lKSB7XG4gICAgICBpdGVtLmJlaW5nUm91dGVkID0gdHJ1ZTtcbiAgICAgIHJlYWR5U2NoZWR1bGVNZXNzYWdlcy5wdXNoKGl0ZW0ubWVzc2FnZSk7XG4gICAgfSBlbHNlIGlmIChjbG9jay50aW1lID49IGl0ZW0uZXhwaXJhdGlvblRpbWUpIHtcbiAgICAgIGl0ZW0uYmVpbmdSb3V0ZWQgPSB0cnVlO1xuICAgICAgZXhwaXJlZFNjaGVkdWxlTWVzc2FnZXMucHVzaChpdGVtLm1lc3NhZ2UpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gSWYgbm8gbWVzc2FnZXMgYXJlIHJlYWR5LCB3ZSdyZSBkb25lLlxuICBpZiAocmVhZHlTY2hlZHVsZU1lc3NhZ2VzLmxlbmd0aCArIGV4cGlyZWRTY2hlZHVsZU1lc3NhZ2VzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZpcnN0LCByZW1vdmUgdGhlIGV4cGlyZWQgaXRlbXMuICBUaGV5IGp1c3Qgc2lsZW50bHkgdmFuaXNoXG4gIHRoaXMuaXNSb3V0ZXJQcm9jZXNzaW5nXyA9IHRydWU7XG4gIE5ldFNpbUVudGl0eS5kZXN0cm95RW50aXRpZXMoZXhwaXJlZFNjaGVkdWxlTWVzc2FnZXMsIGZ1bmN0aW9uICgpIHtcblxuICAgIC8vIE5leHQsIHByb2Nlc3MgdGhlIG1lc3NhZ2VzIHRoYXQgYXJlIHJlYWR5IGZvciByb3V0aW5nXG4gICAgdGhpcy5yb3V0ZU1lc3NhZ2VzXyhyZWFkeVNjaGVkdWxlTWVzc2FnZXMsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgLy8gRmluYWxseSwgcmVtb3ZlIGFsbCB0aGUgc2NoZWR1bGUgZW50cmllcyB0aGF0IHdlIGZsYWdnZWQgZWFybGllclxuICAgICAgdGhpcy5sb2NhbFJvdXRpbmdTY2hlZHVsZV8gPSB0aGlzLmxvY2FsUm91dGluZ1NjaGVkdWxlXy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuICFpdGVtLmJlaW5nUm91dGVkO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmlzUm91dGVyUHJvY2Vzc2luZ18gPSBmYWxzZTtcblxuICAgIH0uYmluZCh0aGlzKSk7XG4gIH0uYmluZCh0aGlzKSk7XG59O1xuXG4vKipcbiAqIEV4YW1pbmUgdGhlIHF1ZXVlLCBhbmQgYWRkL2FkanVzdCBzY2hlZHVsZSBlbnRyaWVzIGZvciBwYWNrZXRzIHRoYXRcbiAqIHNob3VsZCBiZSBoYW5kbGVkIGJ5IHRoZSBsb2NhbCBzaW11bGF0aW9uLiAgSWYgYSBwYWNrZXQgaGFzIG5vIGVudHJ5LFxuICogaXQgc2hvdWxkIGJlIGFkZGVkIHRvIHRoZSBzY2hlZHVsZS4gIElmIGl0IGRvZXMgYW5kIHdlIGNhbiBzZWUgdGhhdCBpdHNcbiAqIHNjaGVkdWxlZCBjb21wbGV0aW9uIHRpbWUgaXMgdG9vIGZhciBpbiB0aGUgZnV0dXJlLCB3ZSBzaG91bGQgbW92ZSBpdCB1cC5cbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUucmVjYWxjdWxhdGVTY2hlZHVsZSA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVG8gY2FsY3VsYXRlIG91ciBzY2hlZHVsZSwgd2Uga2VlcCBhIHJvbGxpbmcgXCJQZXNzaW1pc3RpYyBjb21wbGV0aW9uIHRpbWVcIlxuICAvLyBhcyB3ZSB3YWxrIGRvd24gdGhlIHF1ZXVlLiAgVGhpcyBcInBlc3NpbWlzdGljIHRpbWVcIiBpcyB3aGVuIHRoZSBwYWNrZXRcbiAgLy8gd291bGQgZmluaXNoIHByb2Nlc3NpbmcsIGFzc3VtaW5nIGFsbCBvZiB0aGUgcGFja2V0cyBhaGVhZCBvZiBpdCBpbiB0aGVcbiAgLy8gcXVldWUgbXVzdCBiZSBwcm9jZXNzZWQgZmlyc3QgYW5kIHRoZSBmaXJzdCBwYWNrZXQgaW4gdGhlIHF1ZXVlIGlzIGp1c3RcbiAgLy8gc3RhcnRpbmcgdG8gcHJvY2VzcyBub3cuICBXZSBkbyB0aGlzIGJlY2F1c2UgdGhlIGZpcnN0IHBhY2tldCBtaWdodCBiZVxuICAvLyBvd25lZCBieSBhIHJlbW90ZSBjbGllbnQsIHNvIHdlIHdvbid0IGhhdmUgcGFydGlhbCBwcm9ncmVzcyBpbmZvcm1hdGlvblxuICAvLyBvbiBpdC5cbiAgLy9cbiAgLy8gVGh1cywgdGhlIHBlc3NpbWlzdGljIHRpbWUgaXMgdGhlIF9sYXRlc3RfIHdlIHdvdWxkIGV4cGVjdCB0aGUgcm91dGVyXG4gIC8vIHRvIGJlIGRvbmUgcHJvY2Vzc2luZyB0aGUgcGFja2V0IGdpdmVuIHRoZSBjdXJyZW50IGJhbmR3aWR0aCBzZXR0aW5nLFxuICAvLyBpZiB0aGUgcm91dGVyIHdhcyBhbiBhY3R1YWwgaGFyZHdhcmUgZGV2aWNlLlxuICAvL1xuICAvLyBUaGUgZXN0aW1hdGUgaXMgYWN0dWFsbHkgX29wdGltaXN0aWNfIGluIHRoZSBzZW5zZSB0aGF0IGl0IGRvZXNuJ3Qgd2FpdFxuICAvLyBmb3Igbm90aWZpY2F0aW9uIHRoYXQgYSByZW1vdGVseS1zaW11bGF0ZWQgcGFja2V0IGlzIGRvbmUgYmVmb3JlXG4gIC8vIHByb2Nlc3NpbmcgYSBsb2NhbGx5LXNpbXVsYXRlZCBvbmUuICBXZSdyZSBtYWtpbmcgb3VyIGJlc3QgZ3Vlc3MgYWJvdXRcbiAgLy8gaG93IHRoZSBwYWNrZXRzIHdvdWxkIGJlIHRpbWVkIHdpdGggbm8gbGF0ZW5jeSBpbnRyb2R1Y2luZyBnYXBzIGJldHdlZW5cbiAgLy8gcGFja2V0cy5cbiAgLy9cbiAgLy8gSWYgdGhlIGNsaWVudCBzaW11bGF0aW5nIHRoZSBwYWNrZXQgYXQgdGhlIGhlYWQgb2YgdGhlIHF1ZXVlIGRpc2Nvbm5lY3RzXG4gIC8vIGl0IHdvbid0IGJsb2NrIG90aGVyIHBhY2tldHMgZnJvbSBiZWluZyBzZW50LCBidXQgaXQgd2lsbCBpbmNyZWFzZSB0aGVpclxuICAvLyBcInBlc3NpbWlzdGljIGVzdGltYXRlc1wiIHVudGlsIHRoYXQgb3JwaGFuZWQgcGFja2V0IGdldHMgY2xlYW5lZCB1cC5cblxuICB2YXIgcXVldWVTaXplSW5CaXRzID0gMDtcbiAgdmFyIHBlc3NpbWlzdGljQ29tcGxldGlvblRpbWUgPSB0aGlzLnNpbXVsYXRpb25UaW1lXztcbiAgdmFyIHF1ZXVlZE1lc3NhZ2U7XG4gIHZhciBwcm9jZXNzaW5nRHVyYXRpb247XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yb3V0ZXJRdWV1ZUNhY2hlXy5sZW5ndGg7IGkrKykge1xuICAgIHF1ZXVlZE1lc3NhZ2UgPSB0aGlzLnJvdXRlclF1ZXVlQ2FjaGVfW2ldO1xuICAgIHF1ZXVlU2l6ZUluQml0cyArPSBxdWV1ZWRNZXNzYWdlLnBheWxvYWQubGVuZ3RoO1xuICAgIHByb2Nlc3NpbmdEdXJhdGlvbiA9IHRoaXMuY2FsY3VsYXRlUHJvY2Vzc2luZ0R1cmF0aW9uRm9yTWVzc2FnZV8ocXVldWVkTWVzc2FnZSk7XG4gICAgcGVzc2ltaXN0aWNDb21wbGV0aW9uVGltZSArPSBwcm9jZXNzaW5nRHVyYXRpb247XG5cbiAgICAvLyBEb24ndCBzY2hlZHVsZSBiZXlvbmQgbWVtb3J5IGNhcGFjaXR5OyB3ZSdyZSBnb2luZyB0byBkcm9wIHRob3NlIHBhY2tldHNcbiAgICBpZiAodGhpcy5sb2NhbFNpbXVsYXRpb25Pd25zTWVzc2FnZV8ocXVldWVkTWVzc2FnZSkgJiZcbiAgICAgICAgcXVldWVTaXplSW5CaXRzIDw9IHRoaXMubWVtb3J5KSB7XG4gICAgICB0aGlzLnNjaGVkdWxlUm91dGluZ0Zvck1lc3NhZ2UocXVldWVkTWVzc2FnZSwgcGVzc2ltaXN0aWNDb21wbGV0aW9uVGltZSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIENoZWNrcyB0aGUgc2NoZWR1bGUgZm9yIHRoZSBxdWV1ZWQgcm93LiAgSWYgbm8gc2NoZWR1bGUgZW50cnkgZXhpc3RzLCBhZGRzXG4gKiBhIG5ldyBvbmUgd2l0aCB0aGUgcHJvdmlkZWQgcGVzc2ltaXN0aWMgY29tcGxldGlvbiB0aW1lLiAgSWYgaXQncyBhbHJlYWR5XG4gKiBzY2hlZHVsZWQgYW5kIHRoZSBwZXNzaW1pc3RpYyB0aW1lIGdpdmVuIGlzIEJFVFRFUiB0aGFuIHRoZSBwcmV2aW91c2x5XG4gKiBzY2hlZHVsZWQgY29tcGxldGlvbiB0aW1lLCB3aWxsIHVwZGF0ZSB0aGUgc2NoZWR1bGUgZW50cnkgd2l0aCB0aGUgYmV0dGVyXG4gKiB0aW1lLlxuICogQHBhcmFtIHtOZXRTaW1NZXNzYWdlfSBxdWV1ZWRNZXNzYWdlXG4gKiBAcGFyYW0ge251bWJlcn0gcGVzc2ltaXN0aWNDb21wbGV0aW9uVGltZSAtIGluIGxvY2FsIHNpbXVsYXRpb24gdGltZVxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5zY2hlZHVsZVJvdXRpbmdGb3JNZXNzYWdlID0gZnVuY3Rpb24gKHF1ZXVlZE1lc3NhZ2UsXG4gICAgcGVzc2ltaXN0aWNDb21wbGV0aW9uVGltZSkge1xuICB2YXIgc2NoZWR1bGVJdGVtID0gXy5maW5kKHRoaXMubG9jYWxSb3V0aW5nU2NoZWR1bGVfLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgIHJldHVybiBpdGVtLm1lc3NhZ2UuZW50aXR5SUQgPT09IHF1ZXVlZE1lc3NhZ2UuZW50aXR5SUQ7XG4gIH0pO1xuXG4gIGlmIChzY2hlZHVsZUl0ZW0pIHtcbiAgICAvLyBXaGVuIG91ciBwZXNzaW1pc3RpYyB0aW1lIGlzIGJldHRlciB0aGFuIG91ciBzY2hlZHVsZWQgdGltZSB3ZVxuICAgIC8vIHNob3VsZCB1cGRhdGUgdGhlIHNjaGVkdWxlZCB0aW1lLiAgVGhpcyBjYW4gaGFwcGVuIHdoZW4gbWVzc2FnZXNcbiAgICAvLyBlYXJsaWVyIGluIHRoZSBxdWV1ZSBleHBpcmUsIG9yIGFyZSBvdGhlcndpc2UgcmVtb3ZlZCBlYXJsaWVyIHRoYW5cbiAgICAvLyB0aGVpciBzaXplIGxlZCB1cyB0byBleHBlY3QuXG4gICAgaWYgKHBlc3NpbWlzdGljQ29tcGxldGlvblRpbWUgPCBzY2hlZHVsZUl0ZW0uY29tcGxldGlvblRpbWUpIHtcbiAgICAgIHNjaGVkdWxlSXRlbS5jb21wbGV0aW9uVGltZSA9IHBlc3NpbWlzdGljQ29tcGxldGlvblRpbWU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIElmIHRoZSBpdGVtIGRvZXNuJ3QgaGF2ZSBhIHNjaGVkdWxlIGVudHJ5IGF0IGFsbCwgYWRkIGl0XG4gICAgdGhpcy5hZGRNZXNzYWdlVG9TY2hlZHVsZV8ocXVldWVkTWVzc2FnZSwgcGVzc2ltaXN0aWNDb21wbGV0aW9uVGltZSk7XG4gIH1cbn07XG5cbi8qKlxuICogQWRkcyBhIG5ldyBlbnRyeSB0byB0aGUgcm91dGluZyBzY2hlZHVsZSwgd2l0aCBhIGRlZmF1bHQgZXhwaXJhdGlvbiB0aW1lLlxuICogQHBhcmFtIHtOZXRTaW1NZXNzYWdlfSBxdWV1ZWRNZXNzYWdlIC0gbWVzc2FnZSB0byByb3V0ZVxuICogQHBhcmFtIHtudW1iZXJ9IGNvbXBsZXRpb25UaW1lIC0gaW4gc2ltdWxhdGlvbiB0aW1lXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5hZGRNZXNzYWdlVG9TY2hlZHVsZV8gPSBmdW5jdGlvbiAocXVldWVkTWVzc2FnZSxcbiAgICBjb21wbGV0aW9uVGltZSkge1xuICB0aGlzLmxvY2FsUm91dGluZ1NjaGVkdWxlXy5wdXNoKHtcbiAgICBtZXNzYWdlOiBxdWV1ZWRNZXNzYWdlLFxuICAgIGNvbXBsZXRpb25UaW1lOiBjb21wbGV0aW9uVGltZSxcbiAgICBleHBpcmF0aW9uVGltZTogdGhpcy5zaW11bGF0aW9uVGltZV8gKyBQQUNLRVRfTUFYX0xJRkVUSU1FX01TLFxuICAgIGJlaW5nUm91dGVkOiBmYWxzZVxuICB9KTtcbn07XG5cbi8qKlxuICogVGFrZXMgYSBtZXNzYWdlIG91dCBvZiB0aGUgcm91dGluZyBzY2hlZHVsZS4gIE1vZGlmaWVzIHRoZSBzY2hlZHVsZSxcbiAqIHNob3VsZCBub3QgYmUgY2FsbGVkIHdoaWxlIGl0ZXJhdGluZyB0aHJvdWdoIHRoZSBzY2hlZHVsZSFcbiAqIERvZXMgbm90aGluZyBpZiB0aGUgbWVzc2FnZSBpc24ndCBwcmVzZW50IGluIHRoZSBzY2hlZHVsZS5cbiAqIEBwYXJhbSB7TmV0U2ltTWVzc2FnZX0gcXVldWVkTWVzc2FnZVxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUucmVtb3ZlTWVzc2FnZUZyb21TY2hlZHVsZV8gPSBmdW5jdGlvbiAocXVldWVkTWVzc2FnZSkge1xuICB2YXIgc2NoZWR1bGVJZHg7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sb2NhbFJvdXRpbmdTY2hlZHVsZV8ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodGhpcy5sb2NhbFJvdXRpbmdTY2hlZHVsZV9baV0ubWVzc2FnZS5lbnRpdHlJRCA9PT0gcXVldWVkTWVzc2FnZS5lbnRpdHlJRCkge1xuICAgICAgc2NoZWR1bGVJZHggPSBpO1xuICAgIH1cbiAgfVxuICBpZiAoc2NoZWR1bGVJZHggIT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXMubG9jYWxSb3V0aW5nU2NoZWR1bGVfLnNwbGljZShzY2hlZHVsZUlkeCwgMSk7XG4gIH1cbn07XG5cbi8qKlxuICogTGV0cyB0aGUgYXV0by1ETlMgcGFydCBvZiB0aGUgcm91dGVyIHNpbXVsYXRpb24gaGFuZGxlIGl0cyByZXF1ZXN0cy5cbiAqIEZvciBub3csIGF1dG8tRE5TIGNhbiBkbyBcImJhdGNoXCIgcHJvY2Vzc2luZywgbm8gdGhyb3VnaHB1dCBsaW1pdHMuXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS50aWNrQXV0b0Ruc18gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmlzQXV0b0Ruc1Byb2Nlc3NpbmdfKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRmlsdGVyIEROUyBxdWV1ZSBkb3duIHRvIHJlcXVlc3RzIHRoZSBsb2NhbCBzaW11bGF0aW9uIHNob3VsZCBoYW5kbGUuXG4gIHZhciBsb2NhbFNpbURuc1JlcXVlc3RzID0gdGhpcy5hdXRvRG5zUXVldWVfXG4gICAgICAuZmlsdGVyKHRoaXMubG9jYWxTaW11bGF0aW9uT3duc01lc3NhZ2VfLmJpbmQodGhpcykpO1xuXG4gIC8vIElmIHRoZXJlJ3Mgbm90aGluZyB3ZSBjYW4gcHJvY2Vzcywgd2UncmUgZG9uZS5cbiAgaWYgKGxvY2FsU2ltRG5zUmVxdWVzdHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gUHJvY2VzcyBETlMgcmVxdWVzdHNcbiAgdGhpcy5pc0F1dG9EbnNQcm9jZXNzaW5nXyA9IHRydWU7XG4gIHRoaXMucHJvY2Vzc0F1dG9EbnNSZXF1ZXN0c18obG9jYWxTaW1EbnNSZXF1ZXN0cywgZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaXNBdXRvRG5zUHJvY2Vzc2luZ18gPSBmYWxzZTtcbiAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKiBAaW5oZXJpdGRvYyAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUuZ2V0RGlzcGxheU5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gIGlmIChOZXRTaW1HbG9iYWxzLmdldExldmVsQ29uZmlnKCkuYnJvYWRjYXN0TW9kZSkge1xuICAgIHJldHVybiBpMThuLnJvb21OdW1iZXJYKHtcbiAgICAgIHg6IHRoaXMuZ2V0Um91dGVyTnVtYmVyKClcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBpMThuLnJvdXRlck51bWJlclgoe1xuICAgIHg6IHRoaXMuZ2V0Um91dGVyTnVtYmVyKClcbiAgfSk7XG59O1xuXG4vKipcbiAqIEdpdmVuIHRoZSBsZXZlbCBhZGRyZXNzIGZvcm1hdCBzdHJpbmcgKGUuZy4gXCI0LjQuNC40XCIpIHdoaWNoIGl0IHB1bGxzIGZyb21cbiAqIGdsb2JhbHMsIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlIHBhcnNlZCBsZW5ndGhzIG9mIGVhY2ggZm9ybWF0IHBhcnQgaW4gb3JkZXJcbiAqIChlLmcuIFs0LCA0LCA0LCA0XSkuXG4gKiBAcmV0dXJucyB7bnVtYmVyW119XG4gKi9cbmZ1bmN0aW9uIGdldEFkZHJlc3NGb3JtYXRQYXJ0cygpIHtcbiAgcmV0dXJuIE5ldFNpbUdsb2JhbHNcbiAgICAgIC5nZXRMZXZlbENvbmZpZygpXG4gICAgICAuYWRkcmVzc0Zvcm1hdFxuICAgICAgLnNwbGl0KC9cXEQrLylcbiAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHBhcnQpIHtcbiAgICAgICAgcmV0dXJuIHBhcnQubGVuZ3RoID4gMDtcbiAgICAgIH0pXG4gICAgICAubWFwKGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludChwYXJ0LCAxMCk7XG4gICAgICB9KTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdGhhdCBwcmV2ZW50cyB0aGUgcm91dGVyJ3MgZGlzcGxheSBudW1iZXIgb3IgYWRkcmVzcyBmcm9tIGJlaW5nIGJleW9uZFxuICogdGhlIHJlcHJlc2VudGFibGUgc2l6ZSBvZiB0aGUgdGhlIHJvdXRlciBwYXJ0IGluIHRoZSBhZGRyZXNzIGZvcm1hdCAoaWZcbiAqIHR3by1wYXJ0IGFkZHJlc3NlcyBhcmUgYmVpbmcgdXNlZCkuXG4gKiBEb2VzIG5vdCBkbyBhbnl0aGluZyBzcGVjaWFsIHRvIHByZXZlbnQgY29sbGlzaW9ucywganVzdCByZXR1cm5zIGVudGl0eUlEXG4gKiBtb2R1bG8gdGhlIGFzc2lnbmFibGUgYWRkcmVzcyBzcGFjZSAtIGJ1dCB0aGlzIHdpbGwgYmUgYmV0dGVyIHRoYW4gaGF2aW5nXG4gKiBub24tY29uZmxpY3Rpbmcgcm91dGVycyB5b3UgY2FuIG5ldmVyIGFkZHJlc3MgYXQgYWxsLlxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUuZ2V0Um91dGVyTnVtYmVyID0gZnVuY3Rpb24gKCkge1xuICAvLyBJZiB0d28gb3IgbW9yZSBwYXJ0cywgbGltaXQgb3VyIHJvdXRlciBudW1iZXIgdG8gdGhlIG1heGltdW0gdmFsdWUgb2ZcbiAgLy8gdGhlIHNlY29uZC10by1sYXN0IGFkZHJlc3MgcGFydC5cbiAgdmFyIGFkZHJlc3NGb3JtYXRQYXJ0cyA9IGdldEFkZHJlc3NGb3JtYXRQYXJ0cygpO1xuICBpZiAoYWRkcmVzc0Zvcm1hdFBhcnRzLmxlbmd0aCA+PSAyKSB7XG4gICAgdmFyIGFzc2lnbmFibGVBZGRyZXNzVmFsdWVzID0gTWF0aC5wb3coMiwgYWRkcmVzc0Zvcm1hdFBhcnRzLnJldmVyc2UoKVsxXSk7XG4gICAgcmV0dXJuIHRoaXMucm91dGVyTnVtYmVyICUgYXNzaWduYWJsZUFkZHJlc3NWYWx1ZXM7XG4gIH1cbiAgcmV0dXJuIHRoaXMucm91dGVyTnVtYmVyO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIG1heGltdW0gbnVtYmVyIG9mIHJvdXRlcnMgdGhhdCB3aWxsIGJlIGFsbG93ZWQgb24gdGhlIHNoYXJkLlxuICogSW4gbW9zdCBsZXZlbHMgdGhpcyBpcyBhIHN0cmljdCBnbG9iYWwgdmFsdWUgKHByb2JhYmx5IDIwKS5cbiAqIEluIGxldmVscyB1c2luZyBhbiBhZGRyZXNzIGZvcm1hdCB3aXRoIHR3byBvciBtb3JlIHBhcnRzIHRoZSBzZWNvbmQtdG8tbGFzdFxuICogcGFydCBkZXRlcm1pbmVzIHRoZSBhZGRyZXNzYWJsZSBzcGFjZSBmb3Igcm91dGVycywgYW5kIHRoZSBtYXggcm91dGVyc1xuICogd2lsbCBiZSB0aGUgbWluaW11bSBvZiB0aGUgZ2xvYmFsIG1heCBhbmQgdGhlIGFkZHJlc3NhYmxlIHNwYWNlLlxuICpcbiAqIEBleGFtcGxlIElmIHRoZSBnbG9iYWwgbWF4IHJvdXRlcnMgaXMgMjAsIGJ1dCB0aGUgYWRkcmVzcyBmb3JtYXQgaXMgNC40LFxuICogICAgICAgICAgd2UgY2FuIG9ubHkgYWRkcmVzcyAxNiByb3V0ZXJzIChsZXNzIHRoYW4gMjApIHNvIDE2IGlzIG91ciBtYXhcbiAqICAgICAgICAgIHJvdXRlcnMgcGVyIHNoYXJkIHZhbHVlLlxuICpcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbk5ldFNpbVJvdXRlck5vZGUuZ2V0TWF4aW11bVJvdXRlcnNQZXJTaGFyZCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gSWYgdHdvIG9yIG1vcmUgcGFydHMsIGxpbWl0IG91ciByb3V0ZXJzIHRvIHRoZSBtYXhpbXVtIHZhbHVlIG9mXG4gIC8vIHRoZSBzZWNvbmQtdG8tbGFzdCBhZGRyZXNzIHBhcnQuXG4gIHZhciBhZGRyZXNzRm9ybWF0UGFydHMgPSBnZXRBZGRyZXNzRm9ybWF0UGFydHMoKTtcbiAgaWYgKGFkZHJlc3NGb3JtYXRQYXJ0cy5sZW5ndGggPj0gMikge1xuICAgIHJldHVybiBNYXRoLm1pbihOZXRTaW1HbG9iYWxzLmdldEdsb2JhbE1heFJvdXRlcnMoKSxcbiAgICAgICAgTWF0aC5wb3coMiwgYWRkcmVzc0Zvcm1hdFBhcnRzLnJldmVyc2UoKVsxXSkpO1xuICB9XG4gIHJldHVybiBOZXRTaW1HbG9iYWxzLmdldEdsb2JhbE1heFJvdXRlcnMoKTtcbn07XG5cbi8qKlxuICogR2V0IG5vZGUncyBvd24gYWRkcmVzcywgd2hpY2ggaXMgZGVwZW5kZW50IG9uIHRoZSBhZGRyZXNzIGZvcm1hdFxuICogY29uZmlndXJlZCBpbiB0aGUgbGV2ZWwgYnV0IGZvciByb3V0ZXJzIGFsd2F5cyBlbmRzIGluIHplcm8uXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5nZXRBZGRyZXNzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5tYWtlTG9jYWxOZXR3b3JrQWRkcmVzc18oUk9VVEVSX0xPQ0FMX0FERFJFU1MpO1xufTtcblxuLyoqXG4gKiBHZXQgbG9jYWwgbmV0d29yaydzIGF1dG8tZG5zIGFkZHJlc3MsIHdoaWNoIGlzIGRlcGVuZGVudCBvbiB0aGUgYWRkcmVzc1xuICogZm9ybWF0IGNvbmZpZ3VyZWQgZm9yIHRoZSBsZXZlbCBidXQgdGhlIGxhc3QgcGFydCBzaG91bGQgYWx3YXlzIGJlIDE1LlxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUuZ2V0QXV0b0Ruc0FkZHJlc3MgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLm1ha2VMb2NhbE5ldHdvcmtBZGRyZXNzXyhBVVRPX0ROU19SRVNFUlZFRF9BRERSRVNTKTtcbn07XG5cbi8qKlxuICogR2V0IG5vZGUncyBob3N0bmFtZSwgYSBtb2RpZmllZCB2ZXJzaW9uIG9mIGl0cyBkaXNwbGF5IG5hbWUuXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogQG92ZXJyaWRlXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLmdldEhvc3RuYW1lID0gZnVuY3Rpb24gKCkge1xuICAvLyBVc2UgcmVnZXggdG8gc3RyaXAgYW55dGhpbmcgdGhhdCdzIG5vdCBhIHdvcmQtY2hhcmFjdGVyIG9yIGEgZGlnaXRcbiAgLy8gZnJvbSB0aGUgbm9kZSdzIGRpc3BsYXkgbmFtZS4gIEZvciByb3V0ZXJzLCB3ZSBkb24ndCBhcHBlbmQgdGhlIG5vZGUgSURcbiAgLy8gYmVjYXVzZSBpdCdzIGFscmVhZHkgcGFydCBvZiB0aGUgZGlzcGxheSBuYW1lLlxuICByZXR1cm4gdGhpcy5nZXREaXNwbGF5TmFtZSgpLnJlcGxhY2UoL1teXFx3XFxkXS9nLCAnJykudG9Mb3dlckNhc2UoKTtcbn07XG5cbi8qKiBAaW5oZXJpdGRvYyAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUuZ2V0Tm9kZVR5cGUgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBOb2RlVHlwZS5ST1VURVI7XG59O1xuXG4vKiogQGluaGVyaXRkb2MgKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLmdldFN0YXR1cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGxldmVsQ29uZmlnID0gTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpO1xuICB2YXIgY29ubmVjdGlvbkNvdW50ID0gdGhpcy5jb3VudENvbm5lY3Rpb25zKCk7XG4gIGlmIChjb25uZWN0aW9uQ291bnQgPT09IDApIHtcbiAgICBpZiAobGV2ZWxDb25maWcuYnJvYWRjYXN0TW9kZSkge1xuICAgICAgcmV0dXJuIGkxOG4ucm9vbVN0YXR1c05vQ29ubmVjdGlvbnMoe1xuICAgICAgICBtYXhpbXVtQ2xpZW50czogdGhpcy5tYXhDbGllbnRDb25uZWN0aW9uc19cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBpMThuLnJvdXRlclN0YXR1c05vQ29ubmVjdGlvbnMoe1xuICAgICAgbWF4aW11bUNsaWVudHM6IHRoaXMubWF4Q2xpZW50Q29ubmVjdGlvbnNfXG4gICAgfSk7XG4gIH1cblxuICB2YXIgY29ubmVjdGVkTm9kZU5hbWVzID0gdGhpcy5nZXRDb25uZWN0ZWROb2RlTmFtZXNfKCkuam9pbignLCAnKTtcbiAgaWYgKGNvbm5lY3Rpb25Db3VudCA+PSB0aGlzLm1heENsaWVudENvbm5lY3Rpb25zXykge1xuICAgIGlmIChsZXZlbENvbmZpZy5icm9hZGNhc3RNb2RlKSB7XG4gICAgICByZXR1cm4gaTE4bi5yb29tU3RhdHVzRnVsbCh7XG4gICAgICAgIGNvbm5lY3RlZENsaWVudHM6IGNvbm5lY3RlZE5vZGVOYW1lc1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGkxOG4ucm91dGVyU3RhdHVzRnVsbCh7XG4gICAgICBjb25uZWN0ZWRDbGllbnRzOiBjb25uZWN0ZWROb2RlTmFtZXNcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChsZXZlbENvbmZpZy5icm9hZGNhc3RNb2RlKSB7XG4gICAgcmV0dXJuIGkxOG4ucm9vbVN0YXR1cyh7XG4gICAgICBjb25uZWN0ZWRDbGllbnRzOiBjb25uZWN0ZWROb2RlTmFtZXMsXG4gICAgICByZW1haW5pbmdTcGFjZTogKHRoaXMubWF4Q2xpZW50Q29ubmVjdGlvbnNfIC0gY29ubmVjdGlvbkNvdW50KVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGkxOG4ucm91dGVyU3RhdHVzKHtcbiAgICBjb25uZWN0ZWRDbGllbnRzOiBjb25uZWN0ZWROb2RlTmFtZXMsXG4gICAgcmVtYWluaW5nU3BhY2U6ICh0aGlzLm1heENsaWVudENvbm5lY3Rpb25zXyAtIGNvbm5lY3Rpb25Db3VudClcbiAgfSk7XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHtzdHJpbmdbXX0gdGhlIG5hbWVzIG9mIGFsbCB0aGUgbm9kZXMgY29ubmVjdGVkIHRvIHRoaXMgcm91dGVyLlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUuZ2V0Q29ubmVjdGVkTm9kZU5hbWVzXyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNhY2hlZE5vZGVSb3dzID0gdGhpcy5zaGFyZF8ubm9kZVRhYmxlLnJlYWRBbGwoKTtcbiAgcmV0dXJuIHRoaXMuZ2V0Q29ubmVjdGlvbnMoKS5tYXAoZnVuY3Rpb24gKHdpcmUpIHtcbiAgICB2YXIgbm9kZVJvdyA9IF8uZmluZChjYWNoZWROb2RlUm93cywgZnVuY3Rpb24gKG5vZGVSb3cpIHtcbiAgICAgIHJldHVybiBub2RlUm93LmlkID09PSB3aXJlLmxvY2FsTm9kZUlEO1xuICAgIH0pO1xuICAgIGlmIChub2RlUm93KSB7XG4gICAgICByZXR1cm4gbm9kZVJvdy5uYW1lO1xuICAgIH1cbiAgICByZXR1cm4gaTE4bi51bmtub3duTm9kZSgpO1xuICB9KTtcbn07XG5cbi8qKiBAaW5oZXJpdGRvYyAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUuaXNGdWxsID0gZnVuY3Rpb24gKCkge1xuICAvLyBEZXRlcm1pbmUgc3RhdHVzIGJhc2VkIG9uIGNhY2hlZCB3aXJlIGRhdGFcbiAgdmFyIGNhY2hlZFdpcmVSb3dzID0gdGhpcy5zaGFyZF8ud2lyZVRhYmxlLnJlYWRBbGwoKTtcbiAgdmFyIGluY29taW5nV2lyZVJvd3MgPSBjYWNoZWRXaXJlUm93cy5maWx0ZXIoZnVuY3Rpb24gKHdpcmVSb3cpIHtcbiAgICByZXR1cm4gd2lyZVJvdy5yZW1vdGVOb2RlSUQgPT09IHRoaXMuZW50aXR5SUQ7XG4gIH0sIHRoaXMpO1xuXG4gIHJldHVybiBpbmNvbWluZ1dpcmVSb3dzLmxlbmd0aCA+PSB0aGlzLm1heENsaWVudENvbm5lY3Rpb25zXztcbn07XG5cbi8qKlxuICogTWFrZXMgc3VyZSB0aGF0IHRoZSBnaXZlbiBzcGVjaWZpY2F0aW9uIGNvbnRhaW5zIHRoZSBmaWVsZHMgdGhhdCB0aGlzXG4gKiByb3V0ZXIgbmVlZHMgdG8gZG8gaXRzIGpvYi5cbiAqIEBwYXJhbSB7UGFja2V0LkhlYWRlclR5cGVbXX0gcGFja2V0U3BlY1xuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUudmFsaWRhdGVQYWNrZXRTcGVjXyA9IGZ1bmN0aW9uIChwYWNrZXRTcGVjKSB7XG4gIC8vIFRoZXJlIGFyZSBubyByZXF1aXJlbWVudHMgaW4gYnJvYWRjYXN0IG1vZGVcbiAgaWYgKE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKS5icm9hZGNhc3RNb2RlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gUmVxdWlyZSBUT19BRERSRVNTIGZvciByb3V0aW5nXG4gIGlmICghcGFja2V0U3BlYy5zb21lKGZ1bmN0aW9uIChoZWFkZXJGaWVsZCkge1xuICAgICAgICByZXR1cm4gaGVhZGVyRmllbGQgPT09IFBhY2tldC5IZWFkZXJUeXBlLlRPX0FERFJFU1M7XG4gICAgICB9KSkge1xuICAgIGxvZ2dlci53YXJuKFwiUGFja2V0IHNwZWNpZmljYXRpb24gZG9lcyBub3QgaGF2ZSBhIHRvQWRkcmVzcyBmaWVsZC5cIik7XG4gIH1cblxuICAvLyBSZXF1aXJlIEZST01fQUREUkVTUyBmb3IgYXV0by1ETlMgdGFza3NcbiAgaWYgKCFwYWNrZXRTcGVjLnNvbWUoZnVuY3Rpb24gKGhlYWRlckZpZWxkKSB7XG4gICAgICAgIHJldHVybiBoZWFkZXJGaWVsZCA9PT0gUGFja2V0LkhlYWRlclR5cGUuRlJPTV9BRERSRVNTO1xuICAgICAgfSkpIHtcbiAgICBsb2dnZXIud2FybihcIlBhY2tldCBzcGVjaWZpY2F0aW9uIGRvZXMgbm90IGhhdmUgYSBmcm9tQWRkcmVzcyBmaWVsZC5cIik7XG4gIH1cbn07XG5cbi8qKlxuICogUHV0cyB0aGlzIHJvdXRlciBjb250cm9sbGVyIGludG8gYSBtb2RlIHdoZXJlIGl0IHdpbGwgb25seVxuICogc2ltdWxhdGUgZm9yIGNvbm5lY3Rpb24gYW5kIG1lc3NhZ2VzIC1mcm9tLSB0aGUgZ2l2ZW4gbm9kZS5cbiAqIEBwYXJhbSB7IW51bWJlcn0gbm9kZUlEXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLmluaXRpYWxpemVTaW11bGF0aW9uID0gZnVuY3Rpb24gKG5vZGVJRCkge1xuICB0aGlzLnNpbXVsYXRlRm9yU2VuZGVyXyA9IG5vZGVJRDtcbiAgdGhpcy5wYWNrZXRTcGVjXyA9IE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKS5yb3V0ZXJFeHBlY3RzUGFja2V0SGVhZGVyO1xuICB0aGlzLnZhbGlkYXRlUGFja2V0U3BlY18odGhpcy5wYWNrZXRTcGVjXyk7XG5cbiAgaWYgKG5vZGVJRCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIG5vZGVDaGFuZ2VFdmVudCA9IHRoaXMuc2hhcmRfLm5vZGVUYWJsZS50YWJsZUNoYW5nZTtcbiAgICB2YXIgbm9kZUNoYW5nZUhhbmRsZXIgPSB0aGlzLm9uTm9kZVRhYmxlQ2hhbmdlXy5iaW5kKHRoaXMpO1xuICAgIHRoaXMubm9kZUNoYW5nZUtleV8gPSBub2RlQ2hhbmdlRXZlbnQucmVnaXN0ZXIobm9kZUNoYW5nZUhhbmRsZXIpO1xuICAgIFxuICAgIHZhciB3aXJlQ2hhbmdlRXZlbnQgPSB0aGlzLnNoYXJkXy53aXJlVGFibGUudGFibGVDaGFuZ2U7XG4gICAgdmFyIHdpcmVDaGFuZ2VIYW5kbGVyID0gdGhpcy5vbldpcmVUYWJsZUNoYW5nZV8uYmluZCh0aGlzKTtcbiAgICB0aGlzLndpcmVDaGFuZ2VLZXlfID0gd2lyZUNoYW5nZUV2ZW50LnJlZ2lzdGVyKHdpcmVDaGFuZ2VIYW5kbGVyKTtcblxuICAgIHZhciBsb2dDaGFuZ2VFdmVudCA9IHRoaXMuc2hhcmRfLmxvZ1RhYmxlLnRhYmxlQ2hhbmdlO1xuICAgIHZhciBsb2dDaGFuZ2VIYW5kbGVyID0gdGhpcy5vbkxvZ1RhYmxlQ2hhbmdlXy5iaW5kKHRoaXMpO1xuICAgIHRoaXMubG9nQ2hhbmdlS2V5XyA9IGxvZ0NoYW5nZUV2ZW50LnJlZ2lzdGVyKGxvZ0NoYW5nZUhhbmRsZXIpO1xuXG4gICAgdmFyIG5ld01lc3NhZ2VFdmVudCA9IHRoaXMuc2hhcmRfLm1lc3NhZ2VUYWJsZS50YWJsZUNoYW5nZTtcbiAgICB2YXIgbmV3TWVzc2FnZUhhbmRsZXIgPSB0aGlzLm9uTWVzc2FnZVRhYmxlQ2hhbmdlXy5iaW5kKHRoaXMpO1xuICAgIHRoaXMubmV3TWVzc2FnZUV2ZW50S2V5XyA9IG5ld01lc3NhZ2VFdmVudC5yZWdpc3RlcihuZXdNZXNzYWdlSGFuZGxlcik7XG5cbiAgICAvLyBQb3B1bGF0ZSByb3V0ZXIgd2lyZSBjYWNoZSB3aXRoIGluaXRpYWwgZGF0YVxuICAgIHRoaXMub25XaXJlVGFibGVDaGFuZ2VfKCk7XG5cbiAgICAvLyBQb3B1bGF0ZSByb3V0ZXIgbG9nIGNhY2hlIHdpdGggaW5pdGlhbCBkYXRhXG4gICAgdGhpcy5vbkxvZ1RhYmxlQ2hhbmdlXygpO1xuICB9XG59O1xuXG4vKipcbiAqIEdpdmVzIHRoZSBzaW11bGF0aW5nIG5vZGUgYSBjaGFuY2UgdG8gdW5yZWdpc3RlciBmcm9tIGFueXRoaW5nIGl0XG4gKiB3YXMgb2JzZXJ2aW5nLlxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5zdG9wU2ltdWxhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMubm9kZUNoYW5nZUtleV8gIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBub2RlQ2hhbmdlRXZlbnQgPSB0aGlzLnNoYXJkXy5ub2RlVGFibGUudGFibGVDaGFuZ2U7XG4gICAgbm9kZUNoYW5nZUV2ZW50LnVucmVnaXN0ZXIodGhpcy5ub2RlQ2hhbmdlS2V5Xyk7XG4gICAgdGhpcy5ub2RlQ2hhbmdlS2V5XyA9IHVuZGVmaW5lZDtcbiAgfVxuICBcbiAgaWYgKHRoaXMud2lyZUNoYW5nZUtleV8gIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciB3aXJlQ2hhbmdlRXZlbnQgPSB0aGlzLnNoYXJkXy53aXJlVGFibGUudGFibGVDaGFuZ2U7XG4gICAgd2lyZUNoYW5nZUV2ZW50LnVucmVnaXN0ZXIodGhpcy53aXJlQ2hhbmdlS2V5Xyk7XG4gICAgdGhpcy53aXJlQ2hhbmdlS2V5XyA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0aGlzLmxvZ0NoYW5nZUtleV8gIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBsb2dDaGFuZ2VFdmVudCA9IHRoaXMuc2hhcmRfLmxvZ1RhYmxlLnRhYmxlQ2hhbmdlO1xuICAgIGxvZ0NoYW5nZUV2ZW50LnVucmVnaXN0ZXIodGhpcy5sb2dDaGFuZ2VLZXlfKTtcbiAgICB0aGlzLmxvZ0NoYW5nZUtleV8gPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodGhpcy5uZXdNZXNzYWdlRXZlbnRLZXlfICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgbmV3TWVzc2FnZUV2ZW50ID0gdGhpcy5zaGFyZF8ubWVzc2FnZVRhYmxlLnRhYmxlQ2hhbmdlO1xuICAgIG5ld01lc3NhZ2VFdmVudC51bnJlZ2lzdGVyKHRoaXMubmV3TWVzc2FnZUV2ZW50S2V5Xyk7XG4gICAgdGhpcy5uZXdNZXNzYWdlRXZlbnRLZXlfID0gdW5kZWZpbmVkO1xuICB9XG59O1xuXG4vKipcbiAqIFB1dHMgdGhlIHJvdXRlciBpbnRvIHRoZSBnaXZlbiBETlMgbW9kZSwgdHJpZ2dlcnMgYSByZW1vdGUgdXBkYXRlLFxuICogYW5kIGNyZWF0ZXMvZGVzdHJveXMgdGhlIG5ldHdvcmsncyBhdXRvbWF0aWMgRE5TIG5vZGUuXG4gKiBAcGFyYW0ge0Ruc01vZGV9IG5ld0Ruc01vZGVcbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUuc2V0RG5zTW9kZSA9IGZ1bmN0aW9uIChuZXdEbnNNb2RlKSB7XG4gIGlmICh0aGlzLmRuc01vZGUgPT09IG5ld0Ruc01vZGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodGhpcy5kbnNNb2RlID09PSBEbnNNb2RlLk5PTkUpIHtcbiAgICB0aGlzLmRuc05vZGVJRCA9IHVuZGVmaW5lZDtcbiAgfSBlbHNlIGlmICh0aGlzLmRuc01vZGUgPT09IERuc01vZGUuQVVUT01BVElDKSB7XG4gICAgdGhpcy5kbnNOb2RlSUQgPSBBVVRPX0ROU19SRVNFUlZFRF9BRERSRVNTO1xuICB9XG5cbiAgdGhpcy5kbnNNb2RlID0gbmV3RG5zTW9kZTtcbiAgdGhpcy51cGRhdGUoKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IG5ld0JhbmR3aWR0aCBpbiBiaXRzIHBlciBzZWNvbmRcbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUuc2V0QmFuZHdpZHRoID0gZnVuY3Rpb24gKG5ld0JhbmR3aWR0aCkge1xuICBpZiAodGhpcy5iYW5kd2lkdGggPT09IG5ld0JhbmR3aWR0aCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuYmFuZHdpZHRoID0gbmV3QmFuZHdpZHRoO1xuICB0aGlzLnJlY2FsY3VsYXRlU2NoZWR1bGUoKTtcbiAgdGhpcy51cGRhdGUoKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IG5ld01lbW9yeSBpbiBiaXRzXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLnNldE1lbW9yeSA9IGZ1bmN0aW9uIChuZXdNZW1vcnkpIHtcbiAgaWYgKHRoaXMubWVtb3J5ID09PSBuZXdNZW1vcnkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLm1lbW9yeSA9IG5ld01lbW9yeTtcbiAgdGhpcy5lbmZvcmNlTWVtb3J5TGltaXRfKCk7XG4gIHRoaXMudXBkYXRlKCk7XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHtOZXRTaW1XaXJlW119IGFsbCBvZiB0aGUgd2lyZXMgdGhhdCBhcmUgYXR0YWNoZWQgdG8gdGhpcyByb3V0ZXIuXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLmdldENvbm5lY3Rpb25zID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2hhcmQgPSB0aGlzLnNoYXJkXztcbiAgdmFyIHJvdXRlcklEID0gdGhpcy5lbnRpdHlJRDtcbiAgcmV0dXJuIHNoYXJkLndpcmVUYWJsZS5yZWFkQWxsKCkuZmlsdGVyKGZ1bmN0aW9uICh3aXJlUm93KSB7XG4gICAgcmV0dXJuIHdpcmVSb3cucmVtb3RlTm9kZUlEID09PSByb3V0ZXJJRDtcbiAgfSkubWFwKGZ1bmN0aW9uICh3aXJlUm93KSB7XG4gICAgcmV0dXJuIG5ldyBOZXRTaW1XaXJlKHNoYXJkLCB3aXJlUm93KTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHtudW1iZXJ9IHRvdGFsIG51bWJlciBvZiB3aXJlcyBjb25uZWN0ZWQgdG8gdGhpcyByb3V0ZXIuXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLmNvdW50Q29ubmVjdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmdldENvbm5lY3Rpb25zKCkubGVuZ3RoO1xufTtcblxuLyoqXG4gKiBBZGQgYSByb3V0ZXIgbG9nIGVudHJ5IChub3QgZGV2ZWxvcG1lbnQgbG9nZ2luZywgdGhpcyBpcyB1c2VyLWZhY2luZyEpXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFja2V0IC0gYmluYXJ5IGxvZyBwYXlsb2FkXG4gKiBAcGFyYW0ge05ldFNpbUxvZ0VudHJ5LkxvZ1N0YXR1c30gc3RhdHVzXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLmxvZyA9IGZ1bmN0aW9uIChwYWNrZXQsIHN0YXR1cykge1xuICBOZXRTaW1Mb2dFbnRyeS5jcmVhdGUoXG4gICAgICB0aGlzLnNoYXJkXyxcbiAgICAgIHRoaXMuZW50aXR5SUQsXG4gICAgICBwYWNrZXQsXG4gICAgICBzdGF0dXMsXG4gICAgICBmdW5jdGlvbiAoKSB7fSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXl9IGhheXN0YWNrXG4gKiBAcGFyYW0geyp9IG5lZWRsZVxuICogQHJldHVybnMge2Jvb2xlYW59IFRSVUUgaWYgbmVlZGxlIGZvdW5kIGluIGhheXN0YWNrXG4gKi9cbnZhciBjb250YWlucyA9IGZ1bmN0aW9uIChoYXlzdGFjaywgbmVlZGxlKSB7XG4gIHJldHVybiBoYXlzdGFjay5zb21lKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQgPT09IG5lZWRsZTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aGVuIGFub3RoZXIgbm9kZSBlc3RhYmxpc2hlcyBhIGNvbm5lY3Rpb24gdG8gdGhpcyBvbmUsIGdpdmluZyB0aGlzXG4gKiBub2RlIGEgY2hhbmNlIHRvIHJlamVjdCB0aGUgY29ubmVjdGlvbi5cbiAqXG4gKiBUaGUgcm91dGVyIGNoZWNrcyBhZ2FpbnN0IGl0cyBjb25uZWN0aW9uIGxpbWl0LCBhbmQgcmVqZWN0cyB0aGUgY29ubmVjdGlvblxuICogaWYgaXRzIGxpbWl0IGlzIG5vdyBleGNlZWRlZC5cbiAqXG4gKiBAcGFyYW0geyFOZXRTaW1Ob2RlfSBvdGhlck5vZGUgYXR0ZW1wdGluZyB0byBjb25uZWN0IHRvIHRoaXMgb25lXG4gKiBAcGFyYW0geyFOb2RlU3R5bGVDYWxsYmFja30gb25Db21wbGV0ZSByZXNwb25zZSBtZXRob2QgLSBzaG91bGQgY2FsbCB3aXRoIFRSVUVcbiAqICAgICAgICBpZiBjb25uZWN0aW9uIGlzIGFsbG93ZWQsIEZBTFNFIGlmIGNvbm5lY3Rpb24gaXMgcmVqZWN0ZWQuXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLmFjY2VwdENvbm5lY3Rpb24gPSBmdW5jdGlvbiAob3RoZXJOb2RlLCBvbkNvbXBsZXRlKSB7XG4gIHZhciByZWplY3Rpb25SZWFzb24gPSBudWxsO1xuXG4gIC8vIEZvcmNlIGEgcmVmcmVzaCB0byB2ZXJpZnkgdGhhdCB3ZSBoYXZlIG5vdCBleGNlZWRlZCB0aGUgY29ubmVjdGlvbiBsaW1pdC5cbiAgdGhpcy5zaGFyZF8ud2lyZVRhYmxlLnJlZnJlc2goKVxuICAgICAgLmRvbmUoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29ubmVjdGlvbnMgPSB0aGlzLmdldENvbm5lY3Rpb25zKCk7XG5cbiAgICAgICAgLy8gQ2hlY2sgZm9yIGNvbm5lY3Rpb24gbGltaXQgZXhjZWVkZWRcbiAgICAgICAgaWYgKGNvbm5lY3Rpb25zLmxlbmd0aCA+IHRoaXMubWF4Q2xpZW50Q29ubmVjdGlvbnNfKSB7XG4gICAgICAgICAgcmVqZWN0aW9uUmVhc29uID0gbmV3IEVycm9yKFwiVG9vIG1hbnkgY29ubmVjdGlvbnMuXCIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGZvciBhZGRyZXNzIGNvbGxpc2lvbnNcbiAgICAgICAgdmFyIGFkZHJlc3Nlc1NvRmFyID0ge307XG4gICAgICAgIGFkZHJlc3Nlc1NvRmFyW3RoaXMuZ2V0QWRkcmVzcygpXSA9IHRydWU7XG4gICAgICAgIGFkZHJlc3Nlc1NvRmFyW3RoaXMuZ2V0QXV0b0Ruc0FkZHJlc3MoKV0gPSB0cnVlO1xuICAgICAgICB2YXIgYWRkcmVzc0NvbGxpc2lvbiA9IGNvbm5lY3Rpb25zLnNvbWUoZnVuY3Rpb24gKHdpcmUpIHtcbiAgICAgICAgICB2YXIgY29sbGlkZXMgPSBhZGRyZXNzZXNTb0Zhci5oYXNPd25Qcm9wZXJ0eSh3aXJlLmxvY2FsQWRkcmVzcyk7XG4gICAgICAgICAgYWRkcmVzc2VzU29GYXJbd2lyZS5sb2NhbEFkZHJlc3NdID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gY29sbGlkZXM7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoYWRkcmVzc0NvbGxpc2lvbikge1xuICAgICAgICAgIHJlamVjdGlvblJlYXNvbiA9IG5ldyBFcnJvcihcIkFkZHJlc3MgY29sbGlzaW9uIGRldGVjdGVkLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICB9LmJpbmQodGhpcykpXG4gICAgICAuZmFpbChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGxvZ2dlci5pbmZvKFwiUmVqZWN0ZWQgY29ubmVjdGlvbiBmcm9tIFwiICsgb3RoZXJOb2RlLmdldERpc3BsYXlOYW1lKCkgK1xuICAgICAgICAgICAgXCI6IFwiICsgZXJyLm1lc3NhZ2UpO1xuICAgICAgICByZWplY3Rpb25SZWFzb24gPSBlcnI7XG4gICAgICB9KVxuICAgICAgLmFsd2F5cyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIG9uQ29tcGxldGUocmVqZWN0aW9uUmVhc29uLCBudWxsID09PSByZWplY3Rpb25SZWFzb24pO1xuICAgICAgfSk7XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgbGlzdCBvZiBhdmFpbGFibGUgYWRkcmVzc2VzLCB0aGVuIHBpY2sgb25lIGF0IHJhbmRvbSBhbmQgcmV0dXJuIGl0LlxuICogQHJldHVybnMge3N0cmluZ30gYSBuZXcgYXZhaWxhYmxlIGFkZHJlc3MuXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLmdldFJhbmRvbUF2YWlsYWJsZUNsaWVudEFkZHJlc3MgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBhZGRyZXNzTGlzdCA9IHRoaXMuZ2V0Q29ubmVjdGlvbnMoKS5maWx0ZXIoZnVuY3Rpb24gKHdpcmUpIHtcbiAgICByZXR1cm4gd2lyZS5sb2NhbEFkZHJlc3MgIT09IHVuZGVmaW5lZDtcbiAgfSkubWFwKGZ1bmN0aW9uICh3aXJlKSB7XG4gICAgcmV0dXJuIHdpcmUubG9jYWxBZGRyZXNzO1xuICB9KTtcblxuICAvLyBHZW5lcmF0ZSBhIGxpc3Qgb2YgdW51c2VkIGFkZHJlc3NlcyBpbiB0aGUgYWRkcmVzc2FibGUgc3BhY2UgKHRvIGEgbGltaXQpXG4gIHZhciBhZGRyZXNzRm9ybWF0ID0gTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpLmFkZHJlc3NGb3JtYXQ7XG4gIHZhciBhZGRyZXNzUGFydFNpemVzID0gYWRkcmVzc0Zvcm1hdC5zcGxpdCgvXFxEKy8pLmZpbHRlcihmdW5jdGlvbiAocGFydCkge1xuICAgIHJldHVybiBwYXJ0Lmxlbmd0aCA+IDA7XG4gIH0pLm1hcChmdW5jdGlvbiAocGFydCkge1xuICAgIHJldHVybiBwYXJzZUludChwYXJ0LCAxMCk7XG4gIH0pLnJldmVyc2UoKTtcbiAgdmFyIG1heExvY2FsQWRkcmVzc2VzID0gTWF0aC5taW4oTWF0aC5wb3coMiwgYWRkcmVzc1BhcnRTaXplc1swXSksXG4gICAgICBBRERSRVNTX09QVElPTl9MSU1JVCk7XG5cbiAgdmFyIHBvc3NpYmxlQWRkcmVzc2VzID0gW107XG4gIHZhciBuZXh0QWRkcmVzcztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXhMb2NhbEFkZHJlc3NlczsgaSsrKSB7XG4gICAgbmV4dEFkZHJlc3MgPSB0aGlzLm1ha2VMb2NhbE5ldHdvcmtBZGRyZXNzXyhpKTtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgYWRkcmVzcyBpbiBxdWVzdGlvbiBpcyBub3QgdGFrZW4gYWxyZWFkeS5cbiAgICBpZiAoIShuZXh0QWRkcmVzcyA9PT0gdGhpcy5nZXRBZGRyZXNzKCkgfHxcbiAgICAgICAgbmV4dEFkZHJlc3MgPT09IHRoaXMuZ2V0QXV0b0Ruc0FkZHJlc3MoKSB8fFxuICAgICAgICBjb250YWlucyhhZGRyZXNzTGlzdCwgbmV4dEFkZHJlc3MpKSkge1xuICAgICAgcG9zc2libGVBZGRyZXNzZXMucHVzaChuZXh0QWRkcmVzcyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHJhbmRvbUluZGV4ID0gTmV0U2ltR2xvYmFscy5yYW5kb21JbnRJblJhbmdlKDAsIHBvc3NpYmxlQWRkcmVzc2VzLmxlbmd0aCk7XG4gIHJldHVybiBwb3NzaWJsZUFkZHJlc3Nlc1tyYW5kb21JbmRleF07XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlIGFuIGFkZHJlc3MgbWF0Y2hpbmcgdGhlIGxldmVsJ3MgY29uZmlndXJlZCBhZGRyZXNzIGZvcm1hdCwgdGhhdFxuICogZmFsbHMgd2l0aGluIHRoaXMgcm91dGVyJ3MgbG9jYWwgbmV0d29yayBhbmQgZW5kcyBpbiB0aGUgZ2l2ZW4gdmFsdWUuXG4gKiBAcGFyYW0ge251bWJlcn0gbGFzdFBhcnRcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5tYWtlTG9jYWxOZXR3b3JrQWRkcmVzc18gPSBmdW5jdGlvbiAobGFzdFBhcnQpIHtcbiAgdmFyIGFkZHJlc3NGb3JtYXQgPSBOZXRTaW1HbG9iYWxzLmdldExldmVsQ29uZmlnKCkuYWRkcmVzc0Zvcm1hdDtcbiAgdmFyIHVzZWRMYXN0UGFydCA9IGZhbHNlO1xuICB2YXIgdXNlZFJvdXRlcklEID0gZmFsc2U7XG5cbiAgcmV0dXJuIGFkZHJlc3NGb3JtYXQuc3BsaXQoLyhcXEQrKS8pLnJldmVyc2UoKS5tYXAoZnVuY3Rpb24gKHBhcnQpIHtcbiAgICB2YXIgYml0V2lkdGggPSBwYXJzZUludChwYXJ0LCAxMCk7XG4gICAgaWYgKGlzTmFOKGJpdFdpZHRoKSkge1xuICAgICAgLy8gVGhpcyBpcyBhIG5vbi1udW1iZXIgcGFydCwgcGFzcyBpdCB0aHJvdWdoIHRvIHRoZSByZXN1bHRcbiAgICAgIHJldHVybiBwYXJ0O1xuICAgIH1cblxuICAgIGlmICghdXNlZExhc3RQYXJ0KSB7XG4gICAgICB1c2VkTGFzdFBhcnQgPSB0cnVlO1xuICAgICAgcmV0dXJuIGxhc3RQYXJ0LnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKCF1c2VkUm91dGVySUQpIHtcbiAgICAgIHVzZWRSb3V0ZXJJRCA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcy5nZXRSb3V0ZXJOdW1iZXIoKS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIHJldHVybiAnMCc7XG4gIH0uYmluZCh0aGlzKSkucmV2ZXJzZSgpLmpvaW4oJycpO1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7QXJyYXl9IEEgbGlzdCBvZiByZW1vdGUgbm9kZXMgY29ubmVjdGVkIHRvIHRoaXMgcm91dGVyLCBpbmNsdWRpbmdcbiAqICAgICAgICAgIHRoZWlyIGhvc3RuYW1lLCBhZGRyZXNzLCB3aGV0aGVyIHRoZXkgYXJlIHRoZSBsb2NhbCBub2RlLCBhbmRcbiAqICAgICAgICAgIHdoZXRoZXIgdGhleSBhcmUgdGhlIGN1cnJlbnQgRE5TIG5vZGUgZm9yIHRoZSBuZXR3b3JrLlxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5nZXRBZGRyZXNzVGFibGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBhZGRyZXNzVGFibGUgPSB0aGlzLm15V2lyZVJvd0NhY2hlXy5tYXAoZnVuY3Rpb24gKHJvdykge1xuICAgIHJldHVybiB7XG4gICAgICBob3N0bmFtZTogcm93LmxvY2FsSG9zdG5hbWUsXG4gICAgICBhZGRyZXNzOiByb3cubG9jYWxBZGRyZXNzLFxuICAgICAgaXNMb2NhbDogKHJvdy5sb2NhbE5vZGVJRCA9PT0gdGhpcy5zaW11bGF0ZUZvclNlbmRlcl8pLFxuICAgICAgaXNEbnNOb2RlOiAocm93LmxvY2FsTm9kZUlEID09PSB0aGlzLmRuc05vZGVJRClcbiAgICB9O1xuICB9LmJpbmQodGhpcykpO1xuXG4gIC8vIFNwZWNpYWwgY2FzZTogSW4gYXV0by1kbnMgbW9kZSB3ZSBhZGQgdGhlIEROUyBlbnRyeSB0byB0aGUgYWRkcmVzcyB0YWJsZVxuICBpZiAodGhpcy5kbnNNb2RlID09PSBEbnNNb2RlLkFVVE9NQVRJQykge1xuICAgIGFkZHJlc3NUYWJsZS5wdXNoKHtcbiAgICAgIGhvc3RuYW1lOiBBVVRPX0ROU19IT1NUTkFNRSxcbiAgICAgIGFkZHJlc3M6IHRoaXMuZ2V0QXV0b0Ruc0FkZHJlc3MoKSxcbiAgICAgIGlzTG9jYWw6IGZhbHNlLFxuICAgICAgaXNEbnNOb2RlOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gYWRkcmVzc1RhYmxlO1xufTtcblxuLyoqXG4gKiBHaXZlbiBhIG5vZGUgSUQsIGZpbmRzIHRoZSBsb2NhbCBuZXR3b3JrIGFkZHJlc3Mgb2YgdGhhdCBub2RlLiAgQ2Fubm90XG4gKiBiZSB1c2VkIHRvIGZpbmQgdGhlIGFkZHJlc3Mgb2YgdGhlIHJvdXRlciBvciBhdXRvLWRucyBub2RlIChzaW5jZSB0aGVpclxuICogbm9kZSBJRHMgYXJlIG5vdCB1bmlxdWUpLiAgV2lsbCByZXR1cm4gdW5kZWZpbmVkIGlmIHRoZSBub2RlIElEIGlzIG5vdFxuICogZm91bmQuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IG5vZGVJRFxuICogQHJldHVybnMge251bWJlcnx1bmRlZmluZWR9XG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5nZXRBZGRyZXNzRm9yTm9kZUlEXyA9IGZ1bmN0aW9uIChub2RlSUQpIHtcbiAgdmFyIHdpcmVSb3cgPSBfLmZpbmQodGhpcy5teVdpcmVSb3dDYWNoZV8sIGZ1bmN0aW9uIChyb3cpIHtcbiAgICByZXR1cm4gcm93LmxvY2FsTm9kZUlEID09PSBub2RlSUQ7XG4gIH0pO1xuXG4gIGlmICh3aXJlUm93ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gd2lyZVJvdy5sb2NhbEFkZHJlc3M7XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbi8qKlxuICogR2l2ZW4gYSBob3N0bmFtZSwgZmluZHMgdGhlIGxvY2FsIG5ldHdvcmsgYWRkcmVzcyBvZiB0aGUgbm9kZSB3aXRoIHRoYXRcbiAqIGhvc3RuYW1lLiAgV2lsbCByZXR1cm4gdW5kZWZpbmVkIGlmIG5vIG5vZGUgd2l0aCB0aGF0IGhvc3RuYW1lIGlzIGZvdW5kLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBob3N0bmFtZVxuICogQHJldHVybnMge251bWJlcnx1bmRlZmluZWR9XG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5nZXRBZGRyZXNzRm9ySG9zdG5hbWVfID0gZnVuY3Rpb24gKGhvc3RuYW1lKSB7XG4gIGlmIChob3N0bmFtZSA9PT0gdGhpcy5nZXRIb3N0bmFtZSgpKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QWRkcmVzcygpO1xuICB9XG5cbiAgaWYgKHRoaXMuZG5zTW9kZSA9PT0gRG5zTW9kZS5BVVRPTUFUSUMgJiYgaG9zdG5hbWUgPT09IEFVVE9fRE5TX0hPU1ROQU1FKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QXV0b0Ruc0FkZHJlc3MoKTtcbiAgfVxuXG4gIHZhciB3aXJlUm93ID0gXy5maW5kKHRoaXMubXlXaXJlUm93Q2FjaGVfLCBmdW5jdGlvbiAocm93KSB7XG4gICAgcmV0dXJuIHJvdy5sb2NhbEhvc3RuYW1lID09PSBob3N0bmFtZTtcbiAgfSk7XG5cbiAgaWYgKHdpcmVSb3cgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB3aXJlUm93LmxvY2FsQWRkcmVzcztcbiAgfVxuXG4gIC8vIElmIHdlIGRvbid0IGhhdmUgY29ubmVjdGVkIHJvdXRlcnMsIHRoaXMgaXMgYXMgZmFyIGFzIHRoZSBhdXRvLUROUyBjYW4gc2VlLlxuICBpZiAoIU5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKS5jb25uZWN0ZWRSb3V0ZXJzKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8vIElzIGl0IHNvbWUgbm9kZSBlbHNld2hlcmUgb24gdGhlIHNoYXJkP1xuICB2YXIgbm9kZXMgPSBOZXRTaW1Ob2RlRmFjdG9yeS5ub2Rlc0Zyb21Sb3dzKHRoaXMuc2hhcmRfLFxuICAgICAgdGhpcy5zaGFyZF8ubm9kZVRhYmxlLnJlYWRBbGwoKSk7XG4gIHZhciBub2RlID0gXy5maW5kKG5vZGVzLCBmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiBub2RlLmdldEhvc3RuYW1lKCkgPT09IGhvc3RuYW1lO1xuICB9KTtcbiAgaWYgKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5nZXRBZGRyZXNzKCk7XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxuLyoqXG4gKiBHaXZlbiBhIGxvY2FsIG5ldHdvcmsgYWRkcmVzcywgZmluZHMgdGhlIG5vZGUgSUQgb2YgdGhlIG5vZGUgYXQgdGhhdFxuICogYWRkcmVzcy4gIFdpbGwgcmV0dXJuIHVuZGVmaW5lZCBpZiBubyBub2RlIGlzIGZvdW5kIGF0IHRoZSBnaXZlbiBhZGRyZXNzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhZGRyZXNzXG4gKiBAcmV0dXJucyB7bnVtYmVyfHVuZGVmaW5lZH1cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLmdldE5vZGVJREZvckFkZHJlc3NfID0gZnVuY3Rpb24gKGFkZHJlc3MpIHtcbiAgaWYgKGFkZHJlc3MgPT09IHRoaXMuZ2V0QWRkcmVzcygpKSB7XG4gICAgcmV0dXJuIHRoaXMuZW50aXR5SUQ7XG4gIH1cblxuICBpZiAodGhpcy5kbnNNb2RlID09PSBEbnNNb2RlLkFVVE9NQVRJQyAmJlxuICAgICAgYWRkcmVzcyA9PT0gdGhpcy5nZXRBdXRvRG5zQWRkcmVzcygpKSB7XG4gICAgcmV0dXJuIHRoaXMuZW50aXR5SUQ7XG4gIH1cblxuICB2YXIgd2lyZVJvdyA9IF8uZmluZCh0aGlzLm15V2lyZVJvd0NhY2hlXywgZnVuY3Rpb24gKHJvdykge1xuICAgIHJldHVybiByb3cubG9jYWxBZGRyZXNzID09PSBhZGRyZXNzO1xuICB9KTtcblxuICBpZiAod2lyZVJvdyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHdpcmVSb3cubG9jYWxOb2RlSUQ7XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbi8qKlxuICogR2l2ZW4gYSBuZXR3b3JrIGFkZHJlc3MsIGZpbmRzIHRoZSBub2RlIHRoYXQgaXMgdGhlIG5leHQgc3RlcCBhbG9uZyB0aGVcbiAqIGNvcnJlY3QgcGF0aCBmcm9tIHRoaXMgcm91dGVyIHRvIHRoYXQgYWRkcmVzcy4gIFdpbGwgcmV0dXJuIG51bGwgaWYgbm9cbiAqIHBhdGggdG8gdGhlIGFkZHJlc3MgaXMgZm91bmQuXG4gKiBAcGFyYW0ge3N0cmluZ30gYWRkcmVzc1xuICogQHBhcmFtIHtudW1iZXJ9IGhvcHNSZW1haW5pbmdcbiAqIEBwYXJhbSB7bnVtYmVyW119IHZpc2l0ZWROb2RlSURzXG4gKiBAcmV0dXJucyB7TmV0U2ltTm9kZXxudWxsfVxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUuZ2V0TmV4dE5vZGVUb3dhcmRBZGRyZXNzXyA9IGZ1bmN0aW9uIChhZGRyZXNzLFxuICAgIGhvcHNSZW1haW5pbmcsIHZpc2l0ZWROb2RlSURzKSB7XG4gIC8vIElzIGl0IHVzP1xuICBpZiAoYWRkcmVzcyA9PT0gdGhpcy5nZXRBZGRyZXNzKCkpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIElzIGl0IG91ciBBdXRvLUROUyBub2RlP1xuICBpZiAodGhpcy5kbnNNb2RlID09PSBEbnNNb2RlLkFVVE9NQVRJQyAmJiBhZGRyZXNzID09PSB0aGlzLmdldEF1dG9EbnNBZGRyZXNzKCkpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIElzIGl0IGEgbG9jYWwgY2xpZW50P1xuICB2YXIgbm9kZXMgPSBOZXRTaW1Ob2RlRmFjdG9yeS5ub2Rlc0Zyb21Sb3dzKHRoaXMuc2hhcmRfLFxuICAgICAgdGhpcy5zaGFyZF8ubm9kZVRhYmxlLnJlYWRBbGwoKSk7XG4gIHZhciB3aXJlUm93ID0gXy5maW5kKHRoaXMubXlXaXJlUm93Q2FjaGVfLCBmdW5jdGlvbiAocm93KSB7XG4gICAgcmV0dXJuIHJvdy5sb2NhbEFkZHJlc3MgPT09IGFkZHJlc3M7XG4gIH0pO1xuICBpZiAod2lyZVJvdyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGxvY2FsQ2xpZW50ID0gXy5maW5kKG5vZGVzLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgcmV0dXJuIG5vZGUuZW50aXR5SUQgPT09IHdpcmVSb3cubG9jYWxOb2RlSUQ7XG4gICAgfSk7XG4gICAgaWYgKGxvY2FsQ2xpZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBsb2NhbENsaWVudDtcbiAgICB9XG4gIH1cblxuICAvLyBFbmQgb2YgbG9jYWwgc3VibmV0IGNhc2VzOlxuICAvLyBJbiBsZXZlbHMgd2hlcmUgcm91dGVycyBhcmUgbm90IGNvbm5lY3RlZCwgdGhpcyBpcyBhcyBmYXIgYXMgd2UgZ28uXG4gIHZhciBsZXZlbENvbmZpZyA9IE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKTtcbiAgaWYgKCFsZXZlbENvbmZpZy5jb25uZWN0ZWRSb3V0ZXJzKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBJcyBpdCBhbm90aGVyIG5vZGU/XG4gIHZhciBkZXN0aW5hdGlvbk5vZGUgPSBfLmZpbmQobm9kZXMsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIGFkZHJlc3MgPT09IG5vZGUuZ2V0QWRkcmVzcygpIHx8XG4gICAgICAgIChub2RlLmRuc01vZGUgPT09IERuc01vZGUuQVVUT01BVElDICYmXG4gICAgICAgICAgbm9kZS5nZXROb2RlVHlwZSgpID09PSBOb2RlVHlwZS5ST1VURVIgJiZcbiAgICAgICAgICBhZGRyZXNzID09PSBub2RlLmdldEF1dG9EbnNBZGRyZXNzKCkpO1xuICB9KTtcblxuICAvLyBJZiB0aGUgbm9kZSB3ZSdyZSBhZnRlciBkb2Vzbid0IGV4aXN0IGFueXdoZXJlLCB3ZSBzaG91bGQgc3RvcCBub3cuXG4gIGlmICghZGVzdGluYXRpb25Ob2RlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBXZSBhcmUgdHJ5aW5nIHRvIGdldCBzb21ld2hlcmUgZWxzZSEgIEZpZ3VyZSBvdXQgd2hhdCB0aGUgdGFyZ2V0IHJvdXRlclxuICAvLyBmb3Igb3VyIGRlc3RpbmF0aW9uIGlzLlxuICB2YXIgZGVzdGluYXRpb25Sb3V0ZXIgPSBudWxsO1xuICBpZiAoZGVzdGluYXRpb25Ob2RlLmdldE5vZGVUeXBlKCkgPT09IE5vZGVUeXBlLlJPVVRFUikge1xuICAgIGRlc3RpbmF0aW9uUm91dGVyID0gZGVzdGluYXRpb25Ob2RlO1xuICB9IGVsc2Uge1xuICAgIHZhciBkZXN0aW5hdGlvbldpcmUgPSBkZXN0aW5hdGlvbk5vZGUuZ2V0T3V0Z29pbmdXaXJlKCk7XG4gICAgaWYgKGRlc3RpbmF0aW9uV2lyZSkge1xuICAgICAgZGVzdGluYXRpb25Sb3V0ZXIgPSB1dGlscy52YWx1ZU9yKF8uZmluZChub2RlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUuZW50aXR5SUQgPT09IGRlc3RpbmF0aW9uV2lyZS5yZW1vdGVOb2RlSUQ7XG4gICAgICB9KSwgbnVsbCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFkZXN0aW5hdGlvblJvdXRlcikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gSWYgd2UgaGF2ZSBleHRyYSBob3BzLCB3ZSBzaG91bGQgdHJ5IGFuZCBnbyB0byBhIHJvdXRlciB0aGF0IGlzIE5PVFxuICAvLyB0aGUgdGFyZ2V0IHJvdXRlci5cbiAgaWYgKGhvcHNSZW1haW5pbmcgPiAwKSB7XG4gICAgLy8gR2VuZXJhdGUgdGhlIHNldCBvZiBwb3NzaWJsZSB0YXJnZXQgcm91dGVyc1xuICAgIHZhciBwb3NzaWJsZURlc3RpbmF0aW9uUm91dGVycyA9IG5vZGVzLmZpbHRlcihmdW5jdGlvbiAobm9kZSkge1xuICAgICAgcmV0dXJuIG5vZGUuZ2V0Tm9kZVR5cGUoKSA9PT0gTm9kZVR5cGUuUk9VVEVSICYmXG4gICAgICAgICAgbm9kZS5lbnRpdHlJRCAhPT0gZGVzdGluYXRpb25Sb3V0ZXIuZW50aXR5SUQgJiZcbiAgICAgICAgICBub2RlLmVudGl0eUlEICE9PSB0aGlzLmVudGl0eUlEICYmXG4gICAgICAgICAgIXZpc2l0ZWROb2RlSURzLnNvbWUoZnVuY3Rpb24gKHZpc2l0ZWRJRCkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUuZW50aXR5SUQgPT09IHZpc2l0ZWRJRDtcbiAgICAgICAgICB9KTtcbiAgICB9LCB0aGlzKTtcbiAgICBpZiAocG9zc2libGVEZXN0aW5hdGlvblJvdXRlcnMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIE5ldFNpbUdsb2JhbHMucmFuZG9tUGlja09uZShwb3NzaWJsZURlc3RpbmF0aW9uUm91dGVycyk7XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgdGhlcmUncyBub3doZXJlIGVsc2UgdG8gZ28gb3Igd2UgYXJlIG91dCBvZiBleHRyYSBob3BzLCBnbyB0byB0aGVcbiAgLy8gdGFyZ2V0IHJvdXRlci5cbiAgcmV0dXJuIGRlc3RpbmF0aW9uUm91dGVyO1xufTtcblxuLyoqXG4gKiBXaGVuIHRoZSBub2RlIHRhYmxlIGNoYW5nZXMsIHdlIGNoZWNrIHdoZXRoZXIgb3VyIG93biByb3cgaGFzIGNoYW5nZWRcbiAqIGFuZCBwcm9wYWdhdGUgdGhvc2UgY2hhbmdlcyBhcyBhcHByb3ByaWF0ZS5cbiAqIEBwcml2YXRlXG4gKiBAdGhyb3dzXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLm9uTm9kZVRhYmxlQ2hhbmdlXyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG15Um93ID0gXy5maW5kKHRoaXMuc2hhcmRfLm5vZGVUYWJsZS5yZWFkQWxsKCksIGZ1bmN0aW9uIChyb3cpIHtcbiAgICByZXR1cm4gcm93LmlkID09PSB0aGlzLmVudGl0eUlEO1xuICB9LmJpbmQodGhpcykpO1xuXG4gIGlmIChteVJvdyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gVGhpcyBjYW4gaGFwcGVuIG5vdywgdG8gbm9uLXByaW1hcnkgcm91dGVycywgYmVjYXVzZSBkZXRlY3Rpb25cbiAgICAvLyBvZiB0aGUgcm91dGVyJ3MgcmVtb3ZhbCAoc3RvcHBpbmcgaXRzIHNpbXVsYXRpb24pIGluIE5ldFNpbUxvY2FsQ2xpZW50Tm9kZVxuICAgIC8vIGFuZCB0aGlzIG1ldGhvZCBoYXBwZW4gaW4gYW4gdW5jZXJ0YWluIG9yZGVyLlxuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghXy5pc0VxdWFsKHRoaXMuc3RhdGVDYWNoZV8sIG15Um93KSkge1xuICAgIHRoaXMuc3RhdGVDYWNoZV8gPSBteVJvdztcbiAgICB0aGlzLm9uTXlTdGF0ZUNoYW5nZV8obXlSb3cpO1xuICB9XG59O1xuXG4vKipcbiAqIFdoZW4gdGhlIHdpcmVzIHRhYmxlIGNoYW5nZXMsIHdlIG1heSBoYXZlIGEgbmV3IGNvbm5lY3Rpb24gb3IgaGF2ZSBsb3N0XG4gKiBhIGNvbm5lY3Rpb24uICBQcm9wYWdhdGUgdXBkYXRlcyBhYm91dCBvdXIgY29ubmVjdGlvbnNcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLm9uV2lyZVRhYmxlQ2hhbmdlXyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG15V2lyZVJvd3MgPSB0aGlzLnNoYXJkXy53aXJlVGFibGUucmVhZEFsbCgpLmZpbHRlcihmdW5jdGlvbiAocm93KSB7XG4gICAgcmV0dXJuIHJvdy5yZW1vdGVOb2RlSUQgPT09IHRoaXMuZW50aXR5SUQ7XG4gIH0uYmluZCh0aGlzKSk7XG5cbiAgaWYgKCFfLmlzRXF1YWwodGhpcy5teVdpcmVSb3dDYWNoZV8sIG15V2lyZVJvd3MpKSB7XG4gICAgdGhpcy5teVdpcmVSb3dDYWNoZV8gPSBteVdpcmVSb3dzO1xuICAgIHRoaXMud2lyZXNDaGFuZ2Uubm90aWZ5T2JzZXJ2ZXJzKCk7XG4gIH1cbn07XG5cbi8qKlxuICogV2hlbiB0aGUgbG9ncyB0YWJsZSBjaGFuZ2VzLCB3ZSBtYXkgaGF2ZSBhIG5ldyBjb25uZWN0aW9uIG9yIGhhdmUgbG9zdFxuICogYSBjb25uZWN0aW9uLiAgUHJvcGFnYXRlIHVwZGF0ZXMgYWJvdXQgb3VyIGNvbm5lY3Rpb25zXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5vbkxvZ1RhYmxlQ2hhbmdlXyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG15TG9nUm93cyA9IHRoaXMuc2hhcmRfLmxvZ1RhYmxlLnJlYWRBbGwoKS5maWx0ZXIoZnVuY3Rpb24gKHJvdykge1xuICAgIHJldHVybiByb3cubm9kZUlEID09PSB0aGlzLmVudGl0eUlEO1xuICB9LmJpbmQodGhpcykpO1xuXG4gIGlmICghXy5pc0VxdWFsKHRoaXMubXlMb2dSb3dDYWNoZV8sIG15TG9nUm93cykpIHtcbiAgICB0aGlzLm15TG9nUm93Q2FjaGVfID0gbXlMb2dSb3dzO1xuICAgIHRoaXMubG9nQ2hhbmdlLm5vdGlmeU9ic2VydmVycygpO1xuICB9XG59O1xuXG4vKipcbiAqIEdldCBsaXN0IG9mIGxvZyBlbnRyaWVzIGluIHRoaXMgcm91dGVyJ3MgbWVtb3J5LlxuICogQHJldHVybnMge05ldFNpbUxvZ0VudHJ5W119XG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLmdldExvZyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMubXlMb2dSb3dDYWNoZV8ubWFwKGZ1bmN0aW9uIChyb3cpIHtcbiAgICByZXR1cm4gbmV3IE5ldFNpbUxvZ0VudHJ5KHRoaXMuc2hhcmRfLCByb3csIHRoaXMucGFja2V0U3BlY18pO1xuICB9LmJpbmQodGhpcykpO1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7bnVtYmVyfSB0aGUgbnVtYmVyIG9mIHBhY2tldHMgaW4gdGhlIHJvdXRlciBxdWV1ZVxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5nZXRRdWV1ZWRQYWNrZXRDb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMucm91dGVyUXVldWVDYWNoZV8ubGVuZ3RoO1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7bnVtYmVyfSByb3V0ZXIgbWVtb3J5IGN1cnJlbnRseSBpbiB1c2UsIGluIGJpdHNcbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUuZ2V0TWVtb3J5SW5Vc2UgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLnJvdXRlclF1ZXVlQ2FjaGVfLnJlZHVjZShmdW5jdGlvbiAocHJldiwgY3VyKSB7XG4gICAgcmV0dXJuIHByZXYgKyBjdXIucGF5bG9hZC5sZW5ndGg7XG4gIH0sIDApO1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBleHBlY3RlZCByb3V0ZXIgZGF0YSByYXRlIChpbiBiaXRzIHBlciBzZWNvbmQpIG92ZXIgdGhlXG4gKiAgICAgICAgICBuZXh0IHNlY29uZFxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5nZXRDdXJyZW50RGF0YVJhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIEZvciBzaW1wbGljaXR5LCB3ZSdyZSBkZWZpbmluZyB0aGUgJ2N1cmVudCBkYXRhIHJhdGUnIGFzIGhvdyBtYW55IGJpdHNcbiAgLy8gd2UgZXhwZWN0IHRvIGdldCBwcm9jZXNzZWQgaW4gdGhlIG5leHQgc2Vjb25kOyB3aGljaCBpcyBvdXIgcXVldWUgc2l6ZSxcbiAgLy8gY2FwcGVkIGF0IG91ciBiYW5kd2lkdGguXG4gIHJldHVybiBNYXRoLm1pbih0aGlzLmdldE1lbW9yeUluVXNlKCksIHRoaXMuYmFuZHdpZHRoKTtcbn07XG5cbi8qKlxuICogV2hlbiB0aGUgbWVzc2FnZSB0YWJsZSBjaGFuZ2VzLCB3ZSBtaWdodCBoYXZlIGEgbmV3IG1lc3NhZ2UgdG8gaGFuZGxlLlxuICogQ2hlY2sgZm9yIGFuZCBoYW5kbGUgdW5oYW5kbGVkIG1lc3NhZ2VzLlxuICogQHByaXZhdGVcbiAqIEB0aHJvd3MgaWYgdGhpcyBtZXRob2QgaXMgY2FsbGVkIG9uIGEgbm9uLXNpbXVsYXRpbmcgcm91dGVyLlxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5vbk1lc3NhZ2VUYWJsZUNoYW5nZV8gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy5zaW11bGF0ZUZvclNlbmRlcl8pIHtcbiAgICAvLyBXaGF0PyAgT25seSBzaW11bGF0aW5nIHJvdXRlcnMgc2hvdWxkIGJlIGhvb2tlZCB1cCB0byBtZXNzYWdlIG5vdGlmaWNhdGlvbnMuXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTm9uLXNpbXVsYXRpbmcgcm91dGVyIGdvdCBtZXNzYWdlIHRhYmxlIGNoYW5nZSBub3RpZmljdGlvblwiKTtcbiAgfVxuXG4gIHZhciBtZXNzYWdlcyA9IHRoaXMuc2hhcmRfLm1lc3NhZ2VUYWJsZS5yZWFkQWxsKCkubWFwKGZ1bmN0aW9uKHJvdyl7XG4gICAgcmV0dXJuIG5ldyBOZXRTaW1NZXNzYWdlKHRoaXMuc2hhcmRfLCByb3cpO1xuICB9LmJpbmQodGhpcykpO1xuXG4gIHRoaXMudXBkYXRlUm91dGVyUXVldWVfKG1lc3NhZ2VzKTtcblxuICBpZiAodGhpcy5kbnNNb2RlID09PSBEbnNNb2RlLkFVVE9NQVRJQykge1xuICAgIHRoaXMudXBkYXRlQXV0b0Ruc1F1ZXVlXyhtZXNzYWdlcyk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBVcGRhdGVzIG91ciBjYWNoZSBvZiBhbGwgbWVzc2FnZXMgdGhhdCBhcmUgZ29pbmcgdG8gdGhlIHJvdXRlciAocmVnYXJkbGVzc1xuICogb2Ygd2hpY2ggc2ltdWxhdGlvbiB3aWxsIGhhbmRsZSB0aGVtKSwgc28gd2UgY2FuIHVzZSBpdCBmb3Igc3RhdHMgYW5kIHJhdGVcbiAqIGxpbWl0aW5nLlxuICogQHBhcmFtIHtOZXRTaW1NZXNzYWdlW119IG1lc3NhZ2VzXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLnVwZGF0ZVJvdXRlclF1ZXVlXyA9IGZ1bmN0aW9uIChtZXNzYWdlcykge1xuICB2YXIgbmV3UXVldWUgPSBtZXNzYWdlc1xuICAgIC5maWx0ZXIoTmV0U2ltTWVzc2FnZS5pc1ZhbGlkKVxuICAgIC5maWx0ZXIodGhpcy5pc01lc3NhZ2VUb1JvdXRlcl8uYmluZCh0aGlzKSk7XG4gIGlmIChfLmlzRXF1YWwodGhpcy5yb3V0ZXJRdWV1ZUNhY2hlXywgbmV3UXVldWUpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbG9nZ2VyLmluZm8odGhpcy5nZXREaXNwbGF5TmFtZSgpICsgJzogTWVzc2FnZSBxdWV1ZSB1cGRhdGVkIChzaXplICcgK1xuICAgICAgbmV3UXVldWUubGVuZ3RoICsgJyknKTtcblxuICB0aGlzLnJvdXRlclF1ZXVlQ2FjaGVfID0gbmV3UXVldWU7XG4gIHRoaXMucmVjYWxjdWxhdGVTY2hlZHVsZSgpO1xuICB0aGlzLmVuZm9yY2VNZW1vcnlMaW1pdF8oKTtcbiAgdGhpcy5zdGF0c0NoYW5nZS5ub3RpZnlPYnNlcnZlcnModGhpcyk7XG59O1xuXG4vKipcbiAqIENoZWNrcyB0aGUgcm91dGVyIHF1ZXVlIGZvciBwYWNrZXRzIGJleW9uZCB0aGUgcm91dGVyJ3MgbWVtb3J5IGxpbWl0LFxuICogYW5kIGRyb3BzIHRoZSBmaXJzdCBvbmUgd2Ugc2ltdWxhdGUgbG9jYWxseS4gIFNpbmNlIHRoaXMgd2lsbCB0cmlnZ2VyXG4gKiBhIHRhYmxlIGNoYW5nZSwgdGhpcyB3aWxsIG9jY3VyIGFzeW5jLXJlY3Vyc2l2ZWx5IHVudGlsIGFsbCBwYWNrZXRzXG4gKiBvdmVyIHRoZSBtZW1vcnkgbGltaXQgYXJlIGRyb3BwZWQuXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5lbmZvcmNlTWVtb3J5TGltaXRfID0gZnVuY3Rpb24gKCkge1xuICAvLyBPbmx5IHByb2NlZWQgaWYgYSBwYWNrZXQgd2Ugc2ltdWxhdGUgZXhpc3RzIGJleW9uZCB0aGUgbWVtb3J5IGxpbWl0XG4gIHZhciBkcm9wcGFibGVQYWNrZXQgPSB0aGlzLmZpbmRGaXJzdExvY2FsbHlTaW11bGF0ZWRQYWNrZXRPdmVyTWVtb3J5TGltaXQoKTtcbiAgaWYgKCFkcm9wcGFibGVQYWNrZXQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLnJlbW92ZU1lc3NhZ2VGcm9tU2NoZWR1bGVfKGRyb3BwYWJsZVBhY2tldCk7XG4gIGRyb3BwYWJsZVBhY2tldC5kZXN0cm95KGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICAvLyBSYXJlbHksIHRoaXMgY291bGQgZmlyZSB0d2ljZSBmb3Igb25lIHBhY2tldCBhbmQgaGF2ZSBvbmUgZHJvcCBmYWlsLlxuICAgICAgLy8gVGhhdCdzIGZpbmU7IGp1c3QgZG9uJ3QgbG9nIGlmIHdlIGRpZG4ndCBzdWNjZXNzZnVsbHkgZHJvcC5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmxvZyhkcm9wcGFibGVQYWNrZXQucGF5bG9hZCwgTmV0U2ltTG9nRW50cnkuTG9nU3RhdHVzLkRST1BQRUQpO1xuICB9LmJpbmQodGhpcykpO1xufTtcblxuLyoqXG4gKiBXYWxrIHRoZSByb3V0ZXIgcXVldWUsIGFuZCByZXR1cm4gdGhlIGZpcnN0IHBhY2tldCB3ZSBmaW5kIGJleW9uZCB0aGUgcm91dGVyJ3NcbiAqIG1lbW9yeSBjYXBhY2l0eSB0aGF0IHRoZSBsb2NhbCBzaW11bGF0aW9uIGNvbnRyb2xzIGFuZCBpcyBhYmxlIHRvIGRyb3AuXG4gKiBAcmV0dXJucyB7TmV0U2ltTWVzc2FnZXxudWxsfSBudWxsIGlmIG5vIHN1Y2ggbWVzc2FnZSBpcyBmb3VuZC5cbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUuZmluZEZpcnN0TG9jYWxseVNpbXVsYXRlZFBhY2tldE92ZXJNZW1vcnlMaW1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHBhY2tldDtcbiAgdmFyIHVzZWRNZW1vcnkgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucm91dGVyUXVldWVDYWNoZV8ubGVuZ3RoOyBpKyspIHtcbiAgICBwYWNrZXQgPSB0aGlzLnJvdXRlclF1ZXVlQ2FjaGVfW2ldO1xuICAgIHVzZWRNZW1vcnkgKz0gcGFja2V0LnBheWxvYWQubGVuZ3RoO1xuICAgIGlmICh1c2VkTWVtb3J5ID4gdGhpcy5tZW1vcnkgJiYgdGhpcy5sb2NhbFNpbXVsYXRpb25Pd25zTWVzc2FnZV8ocGFja2V0KSkge1xuICAgICAgcmV0dXJuIHBhY2tldDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7TmV0U2ltTWVzc2FnZX0gbWVzc2FnZVxuICogQHJldHVybnMge2Jvb2xlYW59IFRSVUUgaWYgdGhpcyBtZXNzYWdlIGlzIGRlc3RpbmVkIGZvciB0aGUgcm91dGVyIChub3QgdGhlXG4gKiAgICAgICAgICBhdXRvLUROUyBwYXJ0IHRob3VnaCEpIGFuZCBGQUxTRSBpZiBkZXN0aW5lZCBhbnl3aGVyZSBlbHNlLlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUuaXNNZXNzYWdlVG9Sb3V0ZXJfID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgaWYgKHRoaXMuZG5zTW9kZSA9PT0gRG5zTW9kZS5BVVRPTUFUSUMgJiYgdGhpcy5pc01lc3NhZ2VUb0F1dG9EbnNfKG1lc3NhZ2UpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIG1lc3NhZ2UudG9Ob2RlSUQgPT09IHRoaXMuZW50aXR5SUQ7XG59O1xuXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5yb3V0ZU1lc3NhZ2VzXyA9IGZ1bmN0aW9uIChtZXNzYWdlcywgb25Db21wbGV0ZSkge1xuICBpZiAobWVzc2FnZXMubGVuZ3RoID09PSAwKSB7XG4gICAgb25Db21wbGV0ZShudWxsKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLnJvdXRlTWVzc2FnZV8obWVzc2FnZXNbMF0sIGZ1bmN0aW9uIChlcnIsIHJlc3VsdCkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIG9uQ29tcGxldGUoZXJyLCByZXN1bHQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucm91dGVNZXNzYWdlc18obWVzc2FnZXMuc2xpY2UoMSksIG9uQ29tcGxldGUpO1xuICB9LmJpbmQodGhpcykpO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHtOZXRTaW1NZXNzYWdlfSBtZXNzYWdlXG4gKiBAcGFyYW0geyFOb2RlU3R5bGVDYWxsYmFja30gb25Db21wbGV0ZVxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUucm91dGVNZXNzYWdlXyA9IGZ1bmN0aW9uIChtZXNzYWdlLCBvbkNvbXBsZXRlKSB7XG4gIG1lc3NhZ2UuZGVzdHJveShmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBvbkNvbXBsZXRlKGVyciwgcmVzdWx0KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBBcHBseSByYW5kb20gY2hhbmNlIHRvIGRyb3AgcGFja2V0LCByaWdodCBhcyB3ZSBhcmUgYWJvdXQgdG8gZm9yd2FyZCBpdFxuICAgIGlmICh0aGlzLnJhbmRvbURyb3BDaGFuY2UgPiAwICYmIE5ldFNpbUdsb2JhbHMucmFuZG9tKCkgPD0gdGhpcy5yYW5kb21Ecm9wQ2hhbmNlKSB7XG4gICAgICB0aGlzLmxvZyhtZXNzYWdlLnBheWxvYWQsIE5ldFNpbUxvZ0VudHJ5LkxvZ1N0YXR1cy5EUk9QUEVEKTtcbiAgICAgIG9uQ29tcGxldGUobnVsbCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGxldmVsQ29uZmlnID0gTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpO1xuICAgIGlmIChsZXZlbENvbmZpZy5icm9hZGNhc3RNb2RlKSB7XG4gICAgICB0aGlzLmZvcndhcmRNZXNzYWdlVG9BbGxfKG1lc3NhZ2UsIG9uQ29tcGxldGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmZvcndhcmRNZXNzYWdlVG9SZWNpcGllbnRfKG1lc3NhZ2UsIG9uQ29tcGxldGUpO1xuICAgIH1cbiAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogRm9yd2FyZCB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBhbGwgbm9kZXMgdGhhdCBhcmUgY29ubmVjdGVkIHRvIHRoaXMgcm91dGVyLlxuICogVGhpcyBpcyBlZmZlY3RpdmVseSBcImh1YlwiIG9wZXJhdGlvbi5cbiAqIEBwYXJhbSB7TmV0U2ltTWVzc2FnZX0gbWVzc2FnZVxuICogQHBhcmFtIHshTm9kZVN0eWxlQ2FsbGJhY2t9IG9uQ29tcGxldGVcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLmZvcndhcmRNZXNzYWdlVG9BbGxfID0gZnVuY3Rpb24gKG1lc3NhZ2UsIG9uQ29tcGxldGUpIHtcbiAgLy8gQXNzdW1wdGlvbnMgZm9yIGJyb2FkY2FzdCBtb2RlOlxuICAvLyAxLiBXZSBjYW4gdG90YWxseSBpZ25vcmUgcGFja2V0IGhlYWRlcnMsIGJlY2F1c2UgYWRkcmVzc2VzIGRvbid0IG1hdHRlclxuICAvLyAyLiBXZSB3b24ndCBzZW5kIHRvIHRoZSBBdXRvLUROUywgc2luY2UgRE5TIG1ha2Ugbm8gc2Vuc2Ugd2l0aCBubyBhZGRyZXNzZXNcblxuICAvLyBHcmFiIHRoZSBsaXN0IG9mIGFsbCBjb25uZWN0ZWQgbm9kZXNcbiAgdmFyIGNvbm5lY3RlZE5vZGVJRHMgPSB0aGlzLm15V2lyZVJvd0NhY2hlXy5tYXAoZnVuY3Rpb24gKHdpcmVSb3cpIHtcbiAgICByZXR1cm4gd2lyZVJvdy5sb2NhbE5vZGVJRDtcbiAgfSk7XG5cbiAgdGhpcy5mb3J3YXJkTWVzc2FnZVRvTm9kZUlEc18obWVzc2FnZSwgY29ubmVjdGVkTm9kZUlEcywgZnVuY3Rpb24gKGVyciwgcmVzdWx0KSB7XG4gICAgaWYgKGVycikge1xuICAgICAgdGhpcy5sb2cobWVzc2FnZS5wYXlsb2FkLCBOZXRTaW1Mb2dFbnRyeS5Mb2dTdGF0dXMuRFJPUFBFRCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubG9nKG1lc3NhZ2UucGF5bG9hZCwgTmV0U2ltTG9nRW50cnkuTG9nU3RhdHVzLlNVQ0NFU1MpO1xuICAgIH1cbiAgICBvbkNvbXBsZXRlKGVyciwgcmVzdWx0KTtcbiAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogRm9yd2FyZCB0aGUgZ2l2ZW4gbWVzc2FnZSB0byB0aGUgbGlzdCBvZiBub2RlIElEcyBwcm92aWRlZC5cbiAqIFRoaXMgZnVuY3Rpb24gd29ya3MgYnkgY2FsbGluZyBpdHNlbGYgcmVjdXJzaXZlbHkgd2l0aCB0aGUgdGFpbCBvZiB0aGVcbiAqIG5vZGUgSUQgbGlzdCBlYWNoIHRpbWUgaXQgZmluaXNoZXMgc2VuZGluZyBvbmUgb2YgdGhlIG1lc3NhZ2VzLCBzb1xuICogdGltaW5nIG9uIHRoaXMgXCJicm9hZGNhc3RcIiB3b24ndCBiZSBleGFjdGx5IGNvcnJlY3QgLSB0aGF0J3MgcHJvYmFibHkgb2theVxuICogdGhvdWdoLCBlc3BlY2lhbGx5IGF0IHRoZSBwb2ludCBpbiB0aGUgY3VycmljdWx1bSB3aGVyZSB0aGlzIGlzIHVzZWQuXG4gKiBAcGFyYW0ge05ldFNpbU1lc3NhZ2V9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7bnVtYmVyW119IG5vZGVJRHNcbiAqIEBwYXJhbSB7IU5vZGVTdHlsZUNhbGxiYWNrfSBvbkNvbXBsZXRlXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5mb3J3YXJkTWVzc2FnZVRvTm9kZUlEc18gPSBmdW5jdGlvbiAobWVzc2FnZSxcbiAgICBub2RlSURzLCBvbkNvbXBsZXRlKSB7XG5cbiAgdmFyIG1lc3NhZ2VzID0gbm9kZUlEcy5tYXAoZnVuY3Rpb24obm9kZUlEKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZnJvbU5vZGVJRDogdGhpcy5lbnRpdHlJRCxcbiAgICAgICAgdG9Ob2RlSUQ6IG5vZGVJRCxcbiAgICAgICAgc2ltdWxhdGVkQnk6IG5vZGVJRCxcbiAgICAgICAgcGF5bG9hZDogbWVzc2FnZS5wYXlsb2FkXG4gICAgICB9O1xuICB9LCB0aGlzKTtcblxuICBOZXRTaW1NZXNzYWdlLnNlbmRNYW55KHRoaXMuc2hhcmRfLCBtZXNzYWdlcywgb25Db21wbGV0ZSk7XG59O1xuXG4vKipcbiAqIFJlYWQgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gZmluZCBpdHMgZGVzdGluYXRpb24gYWRkcmVzcywgdHJ5IGFuZCBtYXAgdGhhdFxuICogYWRkcmVzcyB0byBvbmUgb2Ygb3VyIGNvbm5lY3Rpb25zLCBhbmQgc2VuZCB0aGUgbWVzc2FnZSBwYXlsb2FkIHRvXG4gKiB0aGUgbmV3IGFkZHJlc3MuXG4gKlxuICogQHBhcmFtIHtOZXRTaW1NZXNzYWdlfSBtZXNzYWdlXG4gKiBAcGFyYW0geyFOb2RlU3R5bGVDYWxsYmFja30gb25Db21wbGV0ZVxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUuZm9yd2FyZE1lc3NhZ2VUb1JlY2lwaWVudF8gPSBmdW5jdGlvbiAobWVzc2FnZSwgb25Db21wbGV0ZSkge1xuICB2YXIgdG9BZGRyZXNzO1xuICB2YXIgcm91dGVyTm9kZUlEID0gdGhpcy5lbnRpdHlJRDtcblxuICAvLyBGaW5kIGEgY29ubmVjdGlvbiB0byByb3V0ZSB0aGlzIG1lc3NhZ2UgdG8uXG4gIHRyeSB7XG4gICAgdmFyIHBhY2tldCA9IG5ldyBQYWNrZXQodGhpcy5wYWNrZXRTcGVjXywgbWVzc2FnZS5wYXlsb2FkKTtcbiAgICB0b0FkZHJlc3MgPSBwYWNrZXQuZ2V0SGVhZGVyQXNBZGRyZXNzU3RyaW5nKFBhY2tldC5IZWFkZXJUeXBlLlRPX0FERFJFU1MpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGxvZ2dlci53YXJuKFwiUGFja2V0IG5vdCByZWFkYWJsZSBieSByb3V0ZXJcIik7XG4gICAgdGhpcy5sb2cobWVzc2FnZS5wYXlsb2FkLCBOZXRTaW1Mb2dFbnRyeS5Mb2dTdGF0dXMuRFJPUFBFRCk7XG4gICAgb25Db21wbGV0ZShudWxsKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZGVzdGluYXRpb25Ob2RlID0gdGhpcy5nZXROZXh0Tm9kZVRvd2FyZEFkZHJlc3NfKHRvQWRkcmVzcyxcbiAgICAgIG1lc3NhZ2UuZXh0cmFIb3BzUmVtYWluaW5nLCBtZXNzYWdlLnZpc2l0ZWROb2RlSURzKTtcbiAgaWYgKGRlc3RpbmF0aW9uTm9kZSA9PT0gbnVsbCkge1xuICAgIC8vIENhbid0IGZpbmQgb3IgcmVhY2ggdGhlIGFkZHJlc3Mgd2l0aGluIHRoZSBzaW11bGF0aW9uXG4gICAgbG9nZ2VyLndhcm4oXCJEZXN0aW5hdGlvbiBhZGRyZXNzIG5vdCByZWFjaGFibGVcIik7XG4gICAgdGhpcy5sb2cobWVzc2FnZS5wYXlsb2FkLCBOZXRTaW1Mb2dFbnRyeS5Mb2dTdGF0dXMuRFJPUFBFRCk7XG4gICAgb25Db21wbGV0ZShudWxsKTtcbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAoZGVzdGluYXRpb25Ob2RlID09PSB0aGlzICYmIHRvQWRkcmVzcyA9PT0gdGhpcy5nZXRBZGRyZXNzKCkpIHtcbiAgICAvLyBUaGlzIHJvdXRlciBJUyB0aGUgcGFja2V0J3MgZGVzdGluYXRpb24sIGl0J3MgZG9uZS5cbiAgICBsb2dnZXIud2FybihcIlBhY2tldCBzdG9wcGVkIGF0IHJvdXRlci5cIik7XG4gICAgdGhpcy5sb2cobWVzc2FnZS5wYXlsb2FkLCBOZXRTaW1Mb2dFbnRyeS5Mb2dTdGF0dXMuU1VDQ0VTUyk7XG4gICAgb25Db21wbGV0ZShudWxsKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBUT0RPOiBIYW5kbGUgYmFkIHN0YXRlIHdoZXJlIG1vcmUgdGhhbiBvbmUgd2lyZSBtYXRjaGVzIGRlc3QgYWRkcmVzcz9cblxuICAvLyBUaGUgc2VuZGVyIHNpbXVsYXRlcyBhIG1lc3NhZ2UgdW50aWwgaXQgcmVhY2hlcyB0aGUgZmluYWwgbGVnIG9mIGl0cyB0cmlwLFxuICAvLyB3aGVuIGl0J3MgZ29pbmcgdG8gYSBjbGllbnQgbm9kZS4gIEF0IHRoYXQgcG9pbnQsIHRoZSByZWNpcGllbnQgdGFrZXMgb3Zlci5cbiAgdmFyIHNpbXVsYXRpbmdOb2RlSUQgPSBtZXNzYWdlLnNpbXVsYXRlZEJ5O1xuICBpZiAoZGVzdGluYXRpb25Ob2RlLmdldE5vZGVUeXBlKCkgPT09IE5vZGVUeXBlLkNMSUVOVCkge1xuICAgIHNpbXVsYXRpbmdOb2RlSUQgPSBkZXN0aW5hdGlvbk5vZGUuZW50aXR5SUQ7XG4gIH1cblxuICAvLyBDcmVhdGUgYSBuZXcgbWVzc2FnZSB3aXRoIGEgbmV3IHBheWxvYWQuXG4gIE5ldFNpbU1lc3NhZ2Uuc2VuZChcbiAgICAgIHRoaXMuc2hhcmRfLFxuICAgICAge1xuICAgICAgICBmcm9tTm9kZUlEOiByb3V0ZXJOb2RlSUQsXG4gICAgICAgIHRvTm9kZUlEOiBkZXN0aW5hdGlvbk5vZGUuZW50aXR5SUQsXG4gICAgICAgIHNpbXVsYXRlZEJ5OiBzaW11bGF0aW5nTm9kZUlELFxuICAgICAgICBwYXlsb2FkOiBtZXNzYWdlLnBheWxvYWQsXG4gICAgICAgIGV4dHJhSG9wc1JlbWFpbmluZzogTWF0aC5tYXgoMCwgbWVzc2FnZS5leHRyYUhvcHNSZW1haW5pbmcgLSAxKSxcbiAgICAgICAgdmlzaXRlZE5vZGVJRHM6IG1lc3NhZ2UudmlzaXRlZE5vZGVJRHMuY29uY2F0KHRoaXMuZW50aXR5SUQpXG4gICAgICB9LFxuICAgICAgZnVuY3Rpb24gKGVyciwgcmVzdWx0KSB7XG4gICAgICAgIHRoaXMubG9nKG1lc3NhZ2UucGF5bG9hZCwgTmV0U2ltTG9nRW50cnkuTG9nU3RhdHVzLlNVQ0NFU1MpO1xuICAgICAgICBvbkNvbXBsZXRlKGVyciwgcmVzdWx0KTtcbiAgICAgIH0uYmluZCh0aGlzKVxuICApO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge05ldFNpbU1lc3NhZ2V9IG1lc3NhZ2VcbiAqIEByZXR1cm5zIHtib29sZWFufSBUUlVFIGlmIHRoZSBnaXZlbiBtZXNzYWdlIHNob3VsZCBiZSBvcGVyYXRlZCBvbiBieSB0aGUgbG9jYWxcbiAqICAgICAgICAgIHNpbXVsYXRpb24sIEZBTFNFIGlmIGFub3RoZXIgdXNlcidzIHNpbXVsYXRpb24gc2hvdWxkIGhhbmRsZSBpdC5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLmxvY2FsU2ltdWxhdGlvbk93bnNNZXNzYWdlXyA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gIHJldHVybiB0aGlzLnNpbXVsYXRlRm9yU2VuZGVyXyAmJlxuICAgICAgbWVzc2FnZS5zaW11bGF0ZWRCeSA9PT0gdGhpcy5zaW11bGF0ZUZvclNlbmRlcl87XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7TmV0U2ltTWVzc2FnZX0gbWVzc2FnZVxuICogQHJldHVybnMge251bWJlcn0gdGltZSByZXF1aXJlZCB0byBwcm9jZXNzIHRoaXMgbWVzc2FnZSwgaW4gbWlsbGlzZWNvbmRzLlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUuY2FsY3VsYXRlUHJvY2Vzc2luZ0R1cmF0aW9uRm9yTWVzc2FnZV8gPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICBpZiAodGhpcy5iYW5kd2lkdGggPT09IEluZmluaXR5KSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgcmV0dXJuIG1lc3NhZ2UucGF5bG9hZC5sZW5ndGggKiAxMDAwIC8gdGhpcy5iYW5kd2lkdGg7XG59O1xuXG4vKipcbiAqIFVwZGF0ZSBxdWV1ZSBvZiBhbGwgYXV0by1kbnMgbWVzc2FnZXMsIHdoaWNoIGNhbiBiZSB1c2VkIGZvciBzdGF0cyBvciBsaW1pdGluZy5cbiAqIEBwYXJhbSB7TmV0U2ltTWVzc2FnZVtdfSBtZXNzYWdlc1xuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUudXBkYXRlQXV0b0Ruc1F1ZXVlXyA9IGZ1bmN0aW9uIChtZXNzYWdlcykge1xuICB2YXIgbmV3UXVldWUgPSBtZXNzYWdlcy5maWx0ZXIodGhpcy5pc01lc3NhZ2VUb0F1dG9EbnNfLmJpbmQodGhpcykpO1xuICBpZiAoXy5pc0VxdWFsKHRoaXMuYXV0b0Ruc1F1ZXVlXywgbmV3UXVldWUpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5hdXRvRG5zUXVldWVfID0gbmV3UXVldWU7XG4gIC8vIFByb3BhZ2F0ZSBub3RpZmljYXRpb24gb2YgcXVldWUgY2hhbmdlP1xuICAvLyBXb3JrIHdpbGwgcHJvY2VlZCBvbiBuZXh0IHRpY2tcbn07XG5cbi8qKlxuICogQHBhcmFtIHtOZXRTaW1NZXNzYWdlfSBtZXNzYWdlXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5pc01lc3NhZ2VUb0F1dG9EbnNfID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgdmFyIHBhY2tldCwgdG9BZGRyZXNzO1xuICB0cnkge1xuICAgIHBhY2tldCA9IG5ldyBQYWNrZXQodGhpcy5wYWNrZXRTcGVjXywgbWVzc2FnZS5wYXlsb2FkKTtcbiAgICB0b0FkZHJlc3MgPSBwYWNrZXQuZ2V0SGVhZGVyQXNBZGRyZXNzU3RyaW5nKFBhY2tldC5IZWFkZXJUeXBlLlRPX0FERFJFU1MpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGxvZ2dlci53YXJuKFwiUGFja2V0IG5vdCByZWFkYWJsZSBieSBhdXRvLUROUzogXCIgKyBlcnJvcik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gTWVzc2FnZXMgdG8gdGhlIGF1dG8tZG5zIGFyZSBib3RoIHRvIGFuZCBmcm9tIHRoZSByb3V0ZXIgbm9kZSwgYW5kXG4gIC8vIGFkZHJlc3NlZCB0byB0aGUgRE5TLlxuICByZXR1cm4gbWVzc2FnZS50b05vZGVJRCA9PT0gdGhpcy5lbnRpdHlJRCAmJlxuICAgICAgbWVzc2FnZS5mcm9tTm9kZUlEID09PSB0aGlzLmVudGl0eUlEICYmXG4gICAgICB0b0FkZHJlc3MgPT09IHRoaXMuZ2V0QXV0b0Ruc0FkZHJlc3MoKTtcbn07XG5cbi8qKlxuICogQmF0Y2gtcHJvY2VzcyBETlMgcmVxdWVzdHMsIGdlbmVyYXRpbmcgcmVzcG9uc2VzIHdoZXJldmVyIHBvc3NpYmxlLlxuICogQHBhcmFtIHtOZXRTaW1NZXNzYWdlW119IG1lc3NhZ2VzXG4gKiBAcGFyYW0geyFOb2RlU3R5bGVDYWxsYmFja30gb25Db21wbGV0ZVxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUucHJvY2Vzc0F1dG9EbnNSZXF1ZXN0c18gPSBmdW5jdGlvbiAobWVzc2FnZXMsIG9uQ29tcGxldGUpIHtcbiAgLy8gMS4gUmVtb3ZlIHRoZSByZXF1ZXN0cyBmcm9tIHRoZSB3aXJlXG4gIE5ldFNpbUVudGl0eS5kZXN0cm95RW50aXRpZXMobWVzc2FnZXMsIGZ1bmN0aW9uIChlcnIsIHJlc3VsdCkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIG9uQ29tcGxldGUoZXJyLCByZXN1bHQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIDIuIEdlbmVyYXRlIGFsbCByZXNwb25zZXMsIGFzeW5jaHJvbm91c2x5LlxuICAgIHRoaXMuZ2VuZXJhdGVEbnNSZXNwb25zZXNfKG1lc3NhZ2VzLCBvbkNvbXBsZXRlKTtcbiAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtOZXRTaW1NZXNzYWdlW119IG1lc3NhZ2VzXG4gKiBAcGFyYW0geyFOb2RlU3R5bGVDYWxsYmFja30gb25Db21wbGV0ZVxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUuZ2VuZXJhdGVEbnNSZXNwb25zZXNfID0gZnVuY3Rpb24gKG1lc3NhZ2VzLCBvbkNvbXBsZXRlKSB7XG4gIGlmIChtZXNzYWdlcy5sZW5ndGggPT09IDApIHtcbiAgICBvbkNvbXBsZXRlKG51bGwpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFByb2Nlc3MgaGVhZFxuICB0aGlzLmdlbmVyYXRlRG5zUmVzcG9uc2VfKG1lc3NhZ2VzWzBdLCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBvbkNvbXBsZXRlKGVyciwgcmVzdWx0KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBQcm9jZXNzIHRhaWxcbiAgICB0aGlzLmdlbmVyYXRlRG5zUmVzcG9uc2VzXyhtZXNzYWdlcy5zbGljZSgxKSwgb25Db21wbGV0ZSk7XG4gIH0uYmluZCh0aGlzKSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7TmV0U2ltTWVzc2FnZX0gbWVzc2FnZVxuICogQHBhcmFtIHshTm9kZVN0eWxlQ2FsbGJhY2t9IG9uQ29tcGxldGVcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLmdlbmVyYXRlRG5zUmVzcG9uc2VfID0gZnVuY3Rpb24gKG1lc3NhZ2UsIG9uQ29tcGxldGUpIHtcbiAgdmFyIHBhY2tldCwgZnJvbUFkZHJlc3MsIHF1ZXJ5LCByZXNwb25zZUhlYWRlcnMsIHJlc3BvbnNlQm9keSwgcmVzcG9uc2VCaW5hcnk7XG4gIHZhciByb3V0ZXJOb2RlSUQgPSB0aGlzLmVudGl0eUlEO1xuICB2YXIgYXV0b0Ruc05vZGVJRCA9IHRoaXMuZW50aXR5SUQ7XG5cbiAgLy8gRXh0cmFjdCBtZXNzYWdlIGNvbnRlbnRzXG4gIHRyeSB7XG4gICAgcGFja2V0ID0gbmV3IFBhY2tldCh0aGlzLnBhY2tldFNwZWNfLCBtZXNzYWdlLnBheWxvYWQpO1xuICAgIGZyb21BZGRyZXNzID0gcGFja2V0LmdldEhlYWRlckFzQWRkcmVzc1N0cmluZyhQYWNrZXQuSGVhZGVyVHlwZS5GUk9NX0FERFJFU1MpO1xuICAgIHF1ZXJ5ID0gcGFja2V0LmdldEJvZHlBc0FzY2lpKEJJVFNfUEVSX0JZVEUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIC8vIE1hbGZvcm1lZCBwYWNrZXQsIGlnbm9yZVxuICAgIG9uQ29tcGxldGUoZXJyb3IpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIENoZWNrIHRoYXQgdGhlIHF1ZXJ5IGlzIHdlbGwtZm9ybWVkXG4gIC8vIFJlZ2V4IG1hdGNoIFwiR0VUIFtob3N0bmFtZXMuLi5dXCJcbiAgLy8gVGhlbiBiZWxvdywgd2UnbGwgc3BsaXQgdGhlIGhvc3RuYW1lcyBvbiB3aGl0ZXNwYWNlIHRvIHByb2Nlc3MgdGhlbS5cbiAgdmFyIHJlcXVlc3RNYXRjaCA9IHF1ZXJ5Lm1hdGNoKC9HRVRcXHMrKFxcUy4qKS8pO1xuICBpZiAocmVxdWVzdE1hdGNoICE9PSBudWxsKSB7XG4gICAgLy8gR29vZCByZXF1ZXN0LCBsb29rIHVwIGFsbCBhZGRyZXNzZXMgYW5kIGJ1aWxkIHVwIHJlc3BvbnNlXG4gICAgLy8gU2tpcHBpbmcgZmlyc3QgbWF0Y2gsIHdoaWNoIGlzIHRoZSBmdWxsIHJlZ2V4XG4gICAgdmFyIHJlc3BvbnNlcyA9IHJlcXVlc3RNYXRjaFsxXS5zcGxpdCgvXFxzKy8pLm1hcChmdW5jdGlvbiAocXVlcnlIb3N0bmFtZSkge1xuICAgICAgdmFyIGFkZHJlc3MgPSB0aGlzLmdldEFkZHJlc3NGb3JIb3N0bmFtZV8ocXVlcnlIb3N0bmFtZSk7XG4gICAgICByZXR1cm4gcXVlcnlIb3N0bmFtZSArICc6JyArIHV0aWxzLnZhbHVlT3IoYWRkcmVzcywgQVVUT19ETlNfTk9UX0ZPVU5EKTtcbiAgICB9LmJpbmQodGhpcykpO1xuICAgIHJlc3BvbnNlQm9keSA9IHJlc3BvbnNlcy5qb2luKCcgJyk7XG4gIH0gZWxzZSB7XG4gICAgLy8gTWFsZm9ybWVkIHJlcXVlc3QsIHNlbmQgYmFjayBpbnN0cnVjdGlvbnNcbiAgICByZXNwb25zZUJvZHkgPSBpMThuLmF1dG9EbnNVc2FnZU1lc3NhZ2UoKTtcbiAgfVxuXG4gIHJlc3BvbnNlSGVhZGVycyA9IHtcbiAgICBmcm9tQWRkcmVzczp0aGlzLmdldEF1dG9EbnNBZGRyZXNzKCksXG4gICAgdG9BZGRyZXNzOiBmcm9tQWRkcmVzcyxcbiAgICBwYWNrZXRJbmRleDogMSxcbiAgICBwYWNrZXRDb3VudDogMVxuICB9O1xuXG4gIHJlc3BvbnNlQmluYXJ5ID0gcGFja2V0LmVuY29kZXIuY29uY2F0ZW5hdGVCaW5hcnkoXG4gICAgICBwYWNrZXQuZW5jb2Rlci5tYWtlQmluYXJ5SGVhZGVycyhyZXNwb25zZUhlYWRlcnMpLFxuICAgICAgYXNjaWlUb0JpbmFyeShyZXNwb25zZUJvZHksIEJJVFNfUEVSX0JZVEUpKTtcblxuICBOZXRTaW1NZXNzYWdlLnNlbmQoXG4gICAgICB0aGlzLnNoYXJkXyxcbiAgICAgIHtcbiAgICAgICAgZnJvbU5vZGVJRDogYXV0b0Ruc05vZGVJRCxcbiAgICAgICAgdG9Ob2RlSUQ6IHJvdXRlck5vZGVJRCxcbiAgICAgICAgc2ltdWxhdGVkQnk6IG1lc3NhZ2Uuc2ltdWxhdGVkQnksXG4gICAgICAgIHBheWxvYWQ6IHJlc3BvbnNlQmluYXJ5XG4gICAgICB9LFxuICAgICAgb25Db21wbGV0ZSk7XG59O1xuIiwiLyoqXG4gKiBAb3ZlcnZpZXcgU2ltdWxhdGlvbiBlbnRpdHkgZm9yIGEgbWVzc2FnZSBiZXR3ZWVuIHR3byBub2Rlcy5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgTmV0U2ltRW50aXR5ID0gcmVxdWlyZSgnLi9OZXRTaW1FbnRpdHknKTtcbnZhciBEYXRhQ29udmVydGVycyA9IHJlcXVpcmUoJy4vRGF0YUNvbnZlcnRlcnMnKTtcbnZhciBiYXNlNjRUb0JpbmFyeSA9IERhdGFDb252ZXJ0ZXJzLmJhc2U2NFRvQmluYXJ5O1xudmFyIGJpbmFyeVRvQmFzZTY0ID0gRGF0YUNvbnZlcnRlcnMuYmluYXJ5VG9CYXNlNjQ7XG52YXIgTmV0U2ltTG9nZ2VyID0gcmVxdWlyZSgnLi9OZXRTaW1Mb2dnZXInKTtcblxudmFyIGxvZ2dlciA9IE5ldFNpbUxvZ2dlci5nZXRTaW5nbGV0b24oKTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBNZXNzYWdlRGF0YVxuICogQHByb3BlcnR5IHshbnVtYmVyfSBmcm9tTm9kZUlEIC0gc2VuZGVyIG5vZGUgSURcbiAqIEBwcm9wZXJ0eSB7IW51bWJlcn0gdG9Ob2RlSUQgLSBkZXN0aW5hdGlvbiBub2RlIElEXG4gKiBAcHJvcGVydHkgeyFudW1iZXJ9IHNpbXVsYXRlZEJ5IC0gbm9kZSBJRCBvZiBjbGllbnQgc2ltdWxhdGluZyBtZXNzYWdlXG4gKiBAcHJvcGVydHkgeyFzdHJpbmd9IHBheWxvYWQgLSBtZXNzYWdlIGNvbnRlbnQgaW4gYSBiaW5hcnkgc3RyaW5nXG4gKiBAcHJvcGVydHkge251bWJlcn0gZXh0cmFIb3BzUmVtYWluaW5nXG4gKiBAcHJvcGVydHkge251bWJlcltdfSB2aXNpdGVkTm9kZUlEc1xuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gTWVzc2FnZVJvd1xuICogQHByb3BlcnR5IHshbnVtYmVyfSBmcm9tTm9kZUlEIC0gdGhpcyBtZXNzYWdlIGluLWZsaWdodC1mcm9tIG5vZGVcbiAqIEBwcm9wZXJ0eSB7IW51bWJlcn0gdG9Ob2RlSUQgLSB0aGlzIG1lc3NhZ2UgaW4tZmxpZ2h0LXRvIG5vZGVcbiAqIEBwcm9wZXJ0eSB7IW51bWJlcn0gc2ltdWxhdGVkQnkgLSBOb2RlIElEIG9mIHRoZSBjbGllbnQgcmVzcG9uc2libGUgZm9yXG4gKiAgICAgICAgICAgYWxsIG9wZXJhdGlvbnMgaW52b2x2aW5nIHRoaXMgbWVzc2FnZS5cbiAqIEBwcm9wZXJ0eSB7IUJhc2U2NFBheWxvYWR9IGJhc2U2NFBheWxvYWQgLSBiYXNlNjQtZW5jb2RlZCBiaW5hcnlcbiAqICAgICAgICAgICBtZXNzYWdlIGNvbnRlbnQsIGFsbCBvZiB3aGljaCBjYW4gYmUgZXhwb3NlZCB0byB0aGVcbiAqICAgICAgICAgICBzdHVkZW50LiAgTWF5IGNvbnRhaW4gaGVhZGVycyBvZiBpdHMgb3duLlxuICogQHByb3BlcnR5IHshbnVtYmVyfSBleHRyYUhvcHNSZW1haW5pbmdcbiAqIEBwcm9wZXJ0eSB7IW51bWJlcltdfSB2aXNpdGVkTm9kZUlEc1xuICovXG5cbi8qKlxuICogTG9jYWwgY29udHJvbGxlciBmb3IgYSBtZXNzYWdlIHRoYXQgaXMgJ29uIHRoZSB3aXJlJ1xuICpcbiAqIERvZXNuJ3QgYWN0dWFsbHkgaGF2ZSBhbnkgYXNzb2NpYXRpb24gd2l0aCB0aGUgd2lyZSAtIG9uZSBjb3VsZCxcbiAqIHRoZW9yZXRpY2FsbHksIHNlbmQgYSBtZXNzYWdlIGZyb20gYW55IG5vZGUgaW4gdGhlIHNpbXVsYXRpb24gdG8gYW55IG90aGVyXG4gKiBub2RlIGluIHRoZSBzaW11bGF0aW9uLlxuICpcbiAqIEFueSBtZXNzYWdlIHRoYXQgZXhpc3RzIGluIHRoZSB0YWJsZSBpcyAnaW4gdHJhbnNpdCcgdG8gYSBub2RlLiAgTm9kZXNcbiAqIHNob3VsZCByZW1vdmUgbWVzc2FnZXMgYXMgc29vbiBhcyB0aGV5IHJlY2VpdmUgdGhlbS5cbiAqXG4gKiBAcGFyYW0geyFOZXRTaW1TaGFyZH0gc2hhcmQgLSBUaGUgc2hhcmQgd2hlcmUgdGhpcyB3aXJlIGxpdmVzLlxuICogQHBhcmFtIHtNZXNzYWdlUm93fSBbbWVzc2FnZVJvd10gLSBBIHJvdyBvdXQgb2YgdGhlIF9tZXNzYWdlIHRhYmxlIG9uIHRoZVxuICogICAgICAgIHNoYXJkLiAgSWYgcHJvdmlkZWQsIHdpbGwgaW5pdGlhbGl6ZSB0aGlzIG1lc3NhZ2Ugd2l0aCB0aGUgZ2l2ZW5cbiAqICAgICAgICBkYXRhLiAgSWYgbm90LCB0aGlzIG1lc3NhZ2Ugd2lsbCBpbml0aWFsaXplIHRvIGRlZmF1bHQgdmFsdWVzLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXVnbWVudHMgTmV0U2ltRW50aXR5XG4gKiBAaW1wbGVtZW50cyBNZXNzYWdlRGF0YVxuICovXG52YXIgTmV0U2ltTWVzc2FnZSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHNoYXJkLCBtZXNzYWdlUm93KSB7XG4gIG1lc3NhZ2VSb3cgPSBtZXNzYWdlUm93ICE9PSB1bmRlZmluZWQgPyBtZXNzYWdlUm93IDoge307XG4gIE5ldFNpbUVudGl0eS5jYWxsKHRoaXMsIHNoYXJkLCBtZXNzYWdlUm93KTtcblxuICAvKipcbiAgICogTm9kZSBJRCB0aGF0IHRoaXMgbWVzc2FnZSBpcyAnaW4gdHJhbnNpdCcgZnJvbS5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRoaXMuZnJvbU5vZGVJRCA9IG1lc3NhZ2VSb3cuZnJvbU5vZGVJRDtcblxuICAvKipcbiAgICogTm9kZSBJRCB0aGF0IHRoaXMgbWVzc2FnZSBpcyAnaW4gdHJhbnNpdCcgdG8uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLnRvTm9kZUlEID0gbWVzc2FnZVJvdy50b05vZGVJRDtcblxuICAvKipcbiAgICogSUQgb2YgdGhlIG5vZGUgcmVzcG9uc2libGUgZm9yIG9wZXJhdGlvbnMgb24gdGhpcyBtZXNzYWdlLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5zaW11bGF0ZWRCeSA9IG1lc3NhZ2VSb3cuc2ltdWxhdGVkQnk7XG5cbiAgLyoqXG4gICAqIEFsbCBvdGhlciBtZXNzYWdlIGNvbnRlbnQsIGluY2x1ZGluZyB0aGUgJ3BhY2tldHMnIHN0dWRlbnRzIHdpbGwgc2VuZC5cbiAgICogQHR5cGUgeyp9XG4gICAqL1xuICB0aGlzLnBheWxvYWQgPSAnJztcbiAgaWYgKG1lc3NhZ2VSb3cuYmFzZTY0UGF5bG9hZCkge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLnBheWxvYWQgPSBiYXNlNjRUb0JpbmFyeShtZXNzYWdlUm93LmJhc2U2NFBheWxvYWQuc3RyaW5nLFxuICAgICAgICAgIG1lc3NhZ2VSb3cuYmFzZTY0UGF5bG9hZC5sZW4pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGxvZ2dlci5lcnJvcihlLm1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJZiB0aGlzIGlzIGFuIGludGVyLXJvdXRlciBtZXNzYWdlLCB0aGUgbnVtYmVyIG9mIHJvdXRlcnMgdGhpc1xuICAgKiBtZXNzYWdlIHNob3VsZCB0cnkgdG8gdmlzaXQgYmVmb3JlIGdvaW5nIHRvIHRoZSByb3V0ZXIgdGhhdFxuICAgKiB3aWxsIGFjdHVhbGx5IGxlYWQgdG8gaXRzIGRlc3RpbmF0aW9uLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5leHRyYUhvcHNSZW1haW5pbmcgPSB1dGlscy52YWx1ZU9yKG1lc3NhZ2VSb3cuZXh0cmFIb3BzUmVtYWluaW5nLCAwKTtcblxuICAvKipcbiAgICogQSBoaXN0b3J5IG9mIHJvdXRlciBub2RlIElEcyB0aGlzIG1lc3NhZ2UgaGFzIHZpc2l0ZWQuXG4gICAqIEB0eXBlIHtudW1iZXJbXX1cbiAgICovXG4gIHRoaXMudmlzaXRlZE5vZGVJRHMgPSB1dGlscy52YWx1ZU9yKG1lc3NhZ2VSb3cudmlzaXRlZE5vZGVJRHMsIFtdKTtcbn07XG5OZXRTaW1NZXNzYWdlLmluaGVyaXRzKE5ldFNpbUVudGl0eSk7XG5cbi8qKlxuICogU3RhdGljIHJvdyBjb25zdHJ1Y3Rpb24gbWV0aG9kLiBVc2VkIGJ5IGR5bmFtaWMgYnVpbGRSb3cgbWV0aG9kIGFuZFxuICogYnkgc3RhdGljIGFzeW5jIEFQSSBjcmVhdGlvbiBtZXRob2RzIHRvIGNyZWF0ZSBhIHByb3Blcmx5LWZvcm1hdHRlZFxuICogcm93IGZvciBkYXRhYmFzZSBpbnNlcnRpb25cbiAqIEBwYXJhbSB7TWVzc2FnZURhdGF9IG1lc3NhZ2VEYXRhXG4gKiBAcmV0dXJucyB7TWVzc2FnZVJvd31cbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gaWYgcGF5bG9hZCBpcyBpbnZhbGlkXG4gKi9cbk5ldFNpbU1lc3NhZ2UuYnVpbGRSb3dGcm9tRGF0YSA9IGZ1bmN0aW9uIChtZXNzYWdlRGF0YSkge1xuICByZXR1cm4ge1xuICAgIGZyb21Ob2RlSUQ6IG1lc3NhZ2VEYXRhLmZyb21Ob2RlSUQsXG4gICAgdG9Ob2RlSUQ6IG1lc3NhZ2VEYXRhLnRvTm9kZUlELFxuICAgIHNpbXVsYXRlZEJ5OiBtZXNzYWdlRGF0YS5zaW11bGF0ZWRCeSxcbiAgICBiYXNlNjRQYXlsb2FkOiBiaW5hcnlUb0Jhc2U2NChtZXNzYWdlRGF0YS5wYXlsb2FkKSxcbiAgICBleHRyYUhvcHNSZW1haW5pbmc6IHV0aWxzLnZhbHVlT3IobWVzc2FnZURhdGEuZXh0cmFIb3BzUmVtYWluaW5nLCAwKSxcbiAgICB2aXNpdGVkTm9kZUlEczogdXRpbHMudmFsdWVPcihtZXNzYWdlRGF0YS52aXNpdGVkTm9kZUlEcywgW10pXG4gIH07XG59O1xuXG4vKipcbiAqIFN0YXRpYyBhc3luYyBjcmVhdGlvbiBtZXRob2QuICBDcmVhdGVzIGEgbmV3IG1lc3NhZ2Ugb24gdGhlIGdpdmVuIHNoYXJkLFxuICogYW5kIHRoZW4gY2FsbHMgdGhlIGNhbGxiYWNrIHdpdGggYSBzdWNjZXNzIGJvb2xlYW4uXG4gKiBAcGFyYW0geyFOZXRTaW1TaGFyZH0gc2hhcmRcbiAqIEBwYXJhbSB7IU1lc3NhZ2VEYXRhfSBtZXNzYWdlRGF0YVxuICogQHBhcmFtIHshTm9kZVN0eWxlQ2FsbGJhY2t9IG9uQ29tcGxldGUgKHN1Y2Nlc3MpXG4gKi9cbk5ldFNpbU1lc3NhZ2Uuc2VuZCA9IGZ1bmN0aW9uIChzaGFyZCwgbWVzc2FnZURhdGEsIG9uQ29tcGxldGUpIHtcbiAgdHJ5IHtcbiAgICB2YXIgcm93ID0gTmV0U2ltTWVzc2FnZS5idWlsZFJvd0Zyb21EYXRhKG1lc3NhZ2VEYXRhKTtcbiAgICBzaGFyZC5tZXNzYWdlVGFibGUuY3JlYXRlKHJvdywgb25Db21wbGV0ZSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIG9uQ29tcGxldGUoZXJyLCBudWxsKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTdGF0aWMgYXN5bmMgbXVsdGktY3JlYXRlIG1ldGhvZC4gQ3JlYXRlcyBuZXcgbWVzc2FnZXMgb24gdGhlIGdpdmVuIHNoYXJkLFxuICogYW5kIHRoZW4gY2FsbHMgdGhlIGNhbGxiYWNrIHdpdGggYSBzdWNjZXNzIGJvb2xlYW4uXG4gKiBAcGFyYW0geyFOZXRTaW1TaGFyZH0gc2hhcmRcbiAqIEBwYXJhbSB7TWVzc2FnZURhdGFbXX0gbWVzc2FnZURhdGFzXG4gKiBAcGFyYW0geyFOb2RlU3R5bGVDYWxsYmFja30gb25Db21wbGV0ZSAoc3VjY2VzcylcbiAqL1xuTmV0U2ltTWVzc2FnZS5zZW5kTWFueSA9IGZ1bmN0aW9uIChzaGFyZCwgbWVzc2FnZURhdGFzLCBvbkNvbXBsZXRlKSB7XG4gIHRyeSB7XG4gICAgdmFyIHJvd3MgPSBtZXNzYWdlRGF0YXMubWFwKE5ldFNpbU1lc3NhZ2UuYnVpbGRSb3dGcm9tRGF0YSk7XG4gICAgc2hhcmQubWVzc2FnZVRhYmxlLm11bHRpQ3JlYXRlKHJvd3MsIG9uQ29tcGxldGUpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBvbkNvbXBsZXRlKGVyciwgbnVsbCk7XG4gIH1cbn07XG5cbi8qKlxuICogU3RhdGljIGhlbHBlci5cbiAqIEBwYXJhbSB7TmV0U2ltTWVzc2FnZX0gbWVzc2FnZVxuICogQHJldHVybnMge2Jvb2xlYW59IFRSVUUgaWZmIHRoZSBnaXZlbiBtZXNzYWdlIGlzIHdlbGwtZm9ybWVkLlxuICovXG5OZXRTaW1NZXNzYWdlLmlzVmFsaWQgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICByZXR1cm4gL15bMDFdKiQvLnRlc3QobWVzc2FnZS5wYXlsb2FkKTtcbn07XG5cbi8qKlxuICogSGVscGVyIHRoYXQgZ2V0cyB0aGUgd2lyZXMgdGFibGUgZm9yIHRoZSBjb25maWd1cmVkIGluc3RhbmNlLlxuICogQHJldHVybnMge05ldFNpbVRhYmxlfVxuICovXG5OZXRTaW1NZXNzYWdlLnByb3RvdHlwZS5nZXRUYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuc2hhcmRfLm1lc3NhZ2VUYWJsZTtcbn07XG5cbi8qKlxuICogQnVpbGQgb3duIHJvdyBmb3IgdGhlIG1lc3NhZ2UgdGFibGVcbiAqIEByZXR1cm5zIHtNZXNzYWdlUm93fVxuICogQHRocm93cyB7VHlwZUVycm9yfSBpZiBwYXlsb2FkIGlzIGludmFsaWRcbiAqL1xuTmV0U2ltTWVzc2FnZS5wcm90b3R5cGUuYnVpbGRSb3cgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBOZXRTaW1NZXNzYWdlLmJ1aWxkUm93RnJvbURhdGEodGhpcyk7XG59O1xuIiwiLyoqXG4gKiBAb3ZlcnZpZXcgU2ltdWxhdGlvbiBlbnRpdHkgZm9yIHJvdXRlciBsb2cgZW50cmllcy5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBtb21lbnQgPSByZXF1aXJlKCdtb21lbnQnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgXyA9IHV0aWxzLmdldExvZGFzaCgpO1xudmFyIGkxOG4gPSByZXF1aXJlKCcuL2xvY2FsZScpO1xudmFyIE5ldFNpbUVudGl0eSA9IHJlcXVpcmUoJy4vTmV0U2ltRW50aXR5Jyk7XG52YXIgUGFja2V0ID0gcmVxdWlyZSgnLi9QYWNrZXQnKTtcbnZhciBOZXRTaW1Ob2RlRmFjdG9yeSA9IHJlcXVpcmUoJy4vTmV0U2ltTm9kZUZhY3RvcnknKTtcbnZhciBEYXRhQ29udmVydGVycyA9IHJlcXVpcmUoJy4vRGF0YUNvbnZlcnRlcnMnKTtcbnZhciBmb3JtYXRCaW5hcnkgPSBEYXRhQ29udmVydGVycy5mb3JtYXRCaW5hcnk7XG52YXIgYmFzZTY0VG9CaW5hcnkgPSBEYXRhQ29udmVydGVycy5iYXNlNjRUb0JpbmFyeTtcbnZhciBiaW5hcnlUb0Jhc2U2NCA9IERhdGFDb252ZXJ0ZXJzLmJpbmFyeVRvQmFzZTY0O1xudmFyIE5ldFNpbUxvZ2dlciA9IHJlcXVpcmUoJy4vTmV0U2ltTG9nZ2VyJyk7XG5cbnZhciBCSVRTX1BFUl9CWVRFID0gcmVxdWlyZSgnLi9OZXRTaW1Db25zdGFudHMnKS5CSVRTX1BFUl9CWVRFO1xudmFyIGxvZ2dlciA9IE5ldFNpbUxvZ2dlci5nZXRTaW5nbGV0b24oKTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBMb2dFbnRyeVJvd1xuICogQHByb3BlcnR5IHtudW1iZXJ9IG5vZGVJRFxuICogQHByb3BlcnR5IHtCYXNlNjRQYXlsb2FkfSBiYXNlNjRCaW5hcnkgLSBiYXNlNjQtZW5jb2RlZCBiaW5hcnlcbiAqICAgICAgICAgICBtZXNzYWdlIGNvbnRlbnQsIGFsbCBvZiB3aGljaCBjYW4gYmUgZXhwb3NlZCB0byB0aGVcbiAqICAgICAgICAgICBzdHVkZW50LiAgTWF5IGNvbnRhaW4gaGVhZGVycyBvZiBpdHMgb3duLlxuICogQHByb3BlcnR5IHtOZXRTaW1Mb2dFbnRyeS5Mb2dTdGF0dXN9IHN0YXR1c1xuICogQHByb3BlcnR5IHtudW1iZXJ9IHRpbWVzdGFtcFxuICovXG5cbi8qKlxuICogRW50cnkgaW4gc2hhcmVkIGxvZyBmb3IgYSBub2RlIG9uIHRoZSBuZXR3b3JrLlxuICpcbiAqIE9uY2UgY3JlYXRlZCwgc2hvdWxkIG5vdCBiZSBtb2RpZmllZCB1bnRpbC91bmxlc3MgYSBjbGVhbnVwIHByb2Nlc3NcbiAqIHJlbW92ZXMgaXQuXG4gKlxuICogQHBhcmFtIHshTmV0U2ltU2hhcmR9IHNoYXJkIC0gVGhlIHNoYXJkIHdoZXJlIHRoaXMgbG9nIGVudHJ5IGxpdmVzLlxuICogQHBhcmFtIHtMb2dFbnRyeVJvd30gW3Jvd10gLSBBIHJvdyBvdXQgb2YgdGhlIGxvZyB0YWJsZSBvbiB0aGVcbiAqICAgICAgICBzaGFyZC4gIElmIHByb3ZpZGVkLCB3aWxsIGluaXRpYWxpemUgdGhpcyBsb2cgd2l0aCB0aGUgZ2l2ZW5cbiAqICAgICAgICBkYXRhLiAgSWYgbm90LCB0aGlzIGxvZyB3aWxsIGluaXRpYWxpemUgdG8gZGVmYXVsdCB2YWx1ZXMuXG4gKiBAcGFyYW0ge1BhY2tldC5IZWFkZXJUeXBlW119IFtwYWNrZXRTcGVjXSAtIFBhY2tldCBsYXlvdXQgc3BlYyB1c2VkIHRvXG4gKiAgICAgICAgaW50ZXJwcmV0IHRoZSBjb250ZW50cyBvZiB0aGUgbG9nZ2VkIHBhY2tldFxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXVnbWVudHMgTmV0U2ltRW50aXR5XG4gKi9cbnZhciBOZXRTaW1Mb2dFbnRyeSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHNoYXJkLCByb3csIHBhY2tldFNwZWMpIHtcbiAgcm93ID0gcm93ICE9PSB1bmRlZmluZWQgPyByb3cgOiB7fTtcbiAgTmV0U2ltRW50aXR5LmNhbGwodGhpcywgc2hhcmQsIHJvdyk7XG5cbiAgLyoqXG4gICAqIE5vZGUgSUQgb2YgdGhlIG5vZGUgdGhhdCBvd25zIHRoaXMgbG9nIGVudHJ5IChlLmcuIGEgcm91dGVyIG5vZGUpXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLm5vZGVJRCA9IHJvdy5ub2RlSUQ7XG5cbiAgLyoqXG4gICAqIEJpbmFyeSBjb250ZW50IG9mIHRoZSBsb2cgZW50cnkuICBEZWZhdWx0cyB0byBlbXB0eSBzdHJpbmcuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLmJpbmFyeSA9ICcnO1xuICBpZiAocm93LmJhc2U2NEJpbmFyeSkge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmJpbmFyeSA9IGJhc2U2NFRvQmluYXJ5KHJvdy5iYXNlNjRCaW5hcnkuc3RyaW5nLCByb3cuYmFzZTY0QmluYXJ5Lmxlbik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgbG9nZ2VyLmVycm9yKGUubWVzc2FnZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN0YXR1cyB2YWx1ZSBmb3IgbG9nIGVudHJ5OyBmb3Igcm91dGVyIGxvZywgdXN1YWxseSBTVUNDRVNTIGZvciBjb21wbGV0aW9uXG4gICAqIG9mIHJvdXRpbmcgb3IgRFJPUFBFRCBpZiByb3V0aW5nIGZhaWxlZC5cbiAgICogQHR5cGUge05ldFNpbUxvZ0VudHJ5LkxvZ1N0YXR1c31cbiAgICovXG4gIHRoaXMuc3RhdHVzID0gdXRpbHMudmFsdWVPcihyb3cuc3RhdHVzLCBOZXRTaW1Mb2dFbnRyeS5Mb2dTdGF0dXMuU1VDQ0VTUyk7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtQYWNrZXR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnBhY2tldF8gPSBuZXcgUGFja2V0KHV0aWxzLnZhbHVlT3IocGFja2V0U3BlYywgW10pLCB0aGlzLmJpbmFyeSk7XG5cbiAgLyoqXG4gICAqIFVuaXggdGltZXN0YW1wIChsb2NhbCkgb2YgbG9nIGNyZWF0aW9uIHRpbWUuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLnRpbWVzdGFtcCA9IChyb3cudGltZXN0YW1wICE9PSB1bmRlZmluZWQpID8gcm93LnRpbWVzdGFtcCA6IERhdGUubm93KCk7XG59O1xuTmV0U2ltTG9nRW50cnkuaW5oZXJpdHMoTmV0U2ltRW50aXR5KTtcblxuLyoqXG4gKiBAZW51bSB7c3RyaW5nfVxuICogQGNvbnN0XG4gKi9cbk5ldFNpbUxvZ0VudHJ5LkxvZ1N0YXR1cyA9IHtcbiAgU1VDQ0VTUzogJ3N1Y2Nlc3MnLFxuICBEUk9QUEVEOiAnZHJvcHBlZCdcbn07XG5cbi8qKlxuICogSGVscGVyIHRoYXQgZ2V0cyB0aGUgbG9nIHRhYmxlIGZvciB0aGUgY29uZmlndXJlZCBpbnN0YW5jZS5cbiAqIEByZXR1cm5zIHtOZXRTaW1UYWJsZX1cbiAqL1xuTmV0U2ltTG9nRW50cnkucHJvdG90eXBlLmdldFRhYmxlID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5zaGFyZF8ubG9nVGFibGU7XG59O1xuXG4vKipcbiAqIEJ1aWxkIG93biByb3cgZm9yIHRoZSBsb2cgdGFibGVcbiAqIEByZXR1cm5zIHtMb2dFbnRyeVJvd31cbiAqL1xuTmV0U2ltTG9nRW50cnkucHJvdG90eXBlLmJ1aWxkUm93ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIG5vZGVJRDogdGhpcy5ub2RlSUQsXG4gICAgYmFzZTY0QmluYXJ5OiBiaW5hcnlUb0Jhc2U2NCh0aGlzLmJpbmFyeSksXG4gICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICB0aW1lc3RhbXA6IHRoaXMudGltZXN0YW1wXG4gIH07XG59O1xuXG4vKipcbiAqIFN0YXRpYyBhc3luYyBjcmVhdGlvbiBtZXRob2QuICBDcmVhdGVzIGEgbmV3IG1lc3NhZ2Ugb24gdGhlIGdpdmVuIHNoYXJkLFxuICogYW5kIHRoZW4gY2FsbHMgdGhlIGNhbGxiYWNrIHdpdGggYSBzdWNjZXNzIGJvb2xlYW4uXG4gKiBAcGFyYW0geyFOZXRTaW1TaGFyZH0gc2hhcmRcbiAqIEBwYXJhbSB7IW51bWJlcn0gbm9kZUlEIC0gYXNzb2NpYXRlZCBub2RlJ3Mgcm93IElEXG4gKiBAcGFyYW0geyFzdHJpbmd9IGJpbmFyeSAtIGxvZyBjb250ZW50c1xuICogQHBhcmFtIHtOZXRTaW1Mb2dFbnRyeS5Mb2dTdGF0dXN9IHN0YXR1c1xuICogQHBhcmFtIHshTm9kZVN0eWxlQ2FsbGJhY2t9IG9uQ29tcGxldGUgKHN1Y2Nlc3MpXG4gKi9cbk5ldFNpbUxvZ0VudHJ5LmNyZWF0ZSA9IGZ1bmN0aW9uIChzaGFyZCwgbm9kZUlELCBiaW5hcnksIHN0YXR1cywgb25Db21wbGV0ZSkge1xuICB2YXIgZW50aXR5ID0gbmV3IE5ldFNpbUxvZ0VudHJ5KHNoYXJkKTtcbiAgZW50aXR5Lm5vZGVJRCA9IG5vZGVJRDtcbiAgZW50aXR5LmJpbmFyeSA9IGJpbmFyeTtcbiAgZW50aXR5LnN0YXR1cyA9IHN0YXR1cztcbiAgZW50aXR5LnRpbWVzdGFtcCA9IERhdGUubm93KCk7XG4gIGVudGl0eS5nZXRUYWJsZSgpLmNyZWF0ZShlbnRpdHkuYnVpbGRSb3coKSwgZnVuY3Rpb24gKGVyciwgcmVzdWx0KSB7XG4gICAgaWYgKGVycikge1xuICAgICAgb25Db21wbGV0ZShlcnIsIG51bGwpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBvbkNvbXBsZXRlKGVyciwgbmV3IE5ldFNpbUxvZ0VudHJ5KHNoYXJkLCByZXN1bHQpKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEdldCByZXF1ZXN0ZWQgcGFja2V0IGhlYWRlciBmaWVsZCBhcyBhIHN0cmluZy4gIFJldHVybnMgZW1wdHkgc3RyaW5nXG4gKiBpZiB0aGUgcmVxdWVzdGVkIGZpZWxkIGlzIG5vdCBpbiB0aGUgY3VycmVudCBwYWNrZXQgZm9ybWF0LlxuICogQHBhcmFtIHtQYWNrZXQuSGVhZGVyVHlwZX0gZmllbGRcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbk5ldFNpbUxvZ0VudHJ5LnByb3RvdHlwZS5nZXRIZWFkZXJGaWVsZCA9IGZ1bmN0aW9uIChmaWVsZCkge1xuICB0cnkge1xuICAgIGlmIChQYWNrZXQuaXNBZGRyZXNzRmllbGQoZmllbGQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYWNrZXRfLmdldEhlYWRlckFzQWRkcmVzc1N0cmluZyhmaWVsZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnBhY2tldF8uZ2V0SGVhZGVyQXNJbnQoZmllbGQpLnRvU3RyaW5nKCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG59O1xuXG4vKiogR2V0IHBhY2tldCBtZXNzYWdlIGFzIGJpbmFyeS4gKi9cbk5ldFNpbUxvZ0VudHJ5LnByb3RvdHlwZS5nZXRNZXNzYWdlQmluYXJ5ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZm9ybWF0QmluYXJ5KHRoaXMucGFja2V0Xy5nZXRCb2R5QXNCaW5hcnkoKSwgQklUU19QRVJfQllURSk7XG59O1xuXG4vKiogR2V0IHBhY2tldCBtZXNzYWdlIGFzIEFTQ0lJICovXG5OZXRTaW1Mb2dFbnRyeS5wcm90b3R5cGUuZ2V0TWVzc2FnZUFzY2lpID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5wYWNrZXRfLmdldEJvZHlBc0FzY2lpKEJJVFNfUEVSX0JZVEUpO1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBMb2NhbGl6ZWQgcGFja2V0IHN0YXR1cywgXCJzdWNjZXNzXCIgb3IgXCJkcm9wcGVkXCJcbiAqL1xuTmV0U2ltTG9nRW50cnkucHJvdG90eXBlLmdldExvY2FsaXplZFN0YXR1cyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuc3RhdHVzID09PSBOZXRTaW1Mb2dFbnRyeS5Mb2dTdGF0dXMuU1VDQ0VTUykge1xuICAgIHJldHVybiBpMThuLmxvZ1N0YXR1c19zdWNjZXNzKCk7XG4gIH0gZWxzZSBpZiAodGhpcy5zdGF0dXMgPT09IE5ldFNpbUxvZ0VudHJ5LkxvZ1N0YXR1cy5EUk9QUEVEKSB7XG4gICAgcmV0dXJuIGkxOG4ubG9nU3RhdHVzX2Ryb3BwZWQoKTtcbiAgfVxuICByZXR1cm4gJyc7XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHtzdHJpbmd9IExvY2FsaXplZCBcIlggb2YgWVwiIHBhY2tldCBjb3VudCBpbmZvIGZvciB0aGlzIGVudHJ5LlxuICovXG5OZXRTaW1Mb2dFbnRyeS5wcm90b3R5cGUuZ2V0TG9jYWxpemVkUGFja2V0SW5mbyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGkxOG4ueE9mWVBhY2tldHMoe1xuICAgIHg6IHRoaXMuZ2V0SGVhZGVyRmllbGQoUGFja2V0LkhlYWRlclR5cGUuUEFDS0VUX0lOREVYKSxcbiAgICB5OiB0aGlzLmdldEhlYWRlckZpZWxkKFBhY2tldC5IZWFkZXJUeXBlLlBBQ0tFVF9DT1VOVClcbiAgfSk7XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHtzdHJpbmd9IDEyLWhvdXIgdGltZSB3aXRoIG1pbGxpc2Vjb25kc1xuICovXG5OZXRTaW1Mb2dFbnRyeS5wcm90b3R5cGUuZ2V0VGltZVN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG1vbWVudCh0aGlzLnRpbWVzdGFtcCkuZm9ybWF0KCdoOm1tOnNzLlNTUyBBJyk7XG59O1xuXG4vKipcbiAqIEdldCBhIGNvbnRyb2xsZXIgZm9yIHRoZSBub2RlIHRoYXQgZ2VuZXJhdGVkIHRoaXMgbG9nIGVudHJ5XG4gKiBAcmV0dXJucyB7TmV0U2ltQ2xpZW50Tm9kZXxOZXRTaW1Sb3V0ZXJOb2RlfG51bGx9XG4gKi9cbk5ldFNpbUxvZ0VudHJ5LnByb3RvdHlwZS5nZXRPcmlnaW5Ob2RlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbm9kZVJvd3MgPSB0aGlzLnNoYXJkXy5ub2RlVGFibGUucmVhZEFsbCgpO1xuICB2YXIgb3JpZ2luTm9kZVJvdyA9IF8uZmluZChub2RlUm93cywgZnVuY3Rpb24gKHJvdykge1xuICAgIHJldHVybiByb3cuaWQgPT09IHRoaXMubm9kZUlEO1xuICB9LmJpbmQodGhpcykpO1xuXG4gIGlmICghb3JpZ2luTm9kZVJvdykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIE5ldFNpbU5vZGVGYWN0b3J5Lm5vZGVGcm9tUm93KHRoaXMuc2hhcmRfLCBvcmlnaW5Ob2RlUm93KTtcbn07XG4iLCIvLyEgbW9tZW50LmpzXG4vLyEgdmVyc2lvbiA6IDIuMTAuNlxuLy8hIGF1dGhvcnMgOiBUaW0gV29vZCwgSXNrcmVuIENoZXJuZXYsIE1vbWVudC5qcyBjb250cmlidXRvcnNcbi8vISBsaWNlbnNlIDogTUlUXG4vLyEgbW9tZW50anMuY29tXG5cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgZ2xvYmFsLm1vbWVudCA9IGZhY3RvcnkoKVxufSh0aGlzLCBmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBob29rQ2FsbGJhY2s7XG5cbiAgICBmdW5jdGlvbiB1dGlsc19ob29rc19faG9va3MgKCkge1xuICAgICAgICByZXR1cm4gaG9va0NhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBpcyBkb25lIHRvIHJlZ2lzdGVyIHRoZSBtZXRob2QgY2FsbGVkIHdpdGggbW9tZW50KClcbiAgICAvLyB3aXRob3V0IGNyZWF0aW5nIGNpcmN1bGFyIGRlcGVuZGVuY2llcy5cbiAgICBmdW5jdGlvbiBzZXRIb29rQ2FsbGJhY2sgKGNhbGxiYWNrKSB7XG4gICAgICAgIGhvb2tDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQXJyYXkoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEYXRlKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCBpbnN0YW5jZW9mIERhdGUgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hcChhcnIsIGZuKSB7XG4gICAgICAgIHZhciByZXMgPSBbXSwgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGFyci5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgcmVzLnB1c2goZm4oYXJyW2ldLCBpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYXNPd25Qcm9wKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLCBiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleHRlbmQoYSwgYikge1xuICAgICAgICBmb3IgKHZhciBpIGluIGIpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGIsIGkpKSB7XG4gICAgICAgICAgICAgICAgYVtpXSA9IGJbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzT3duUHJvcChiLCAndG9TdHJpbmcnKSkge1xuICAgICAgICAgICAgYS50b1N0cmluZyA9IGIudG9TdHJpbmc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzT3duUHJvcChiLCAndmFsdWVPZicpKSB7XG4gICAgICAgICAgICBhLnZhbHVlT2YgPSBiLnZhbHVlT2Y7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVfdXRjX19jcmVhdGVVVEMgKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0KSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCB0cnVlKS51dGMoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWZhdWx0UGFyc2luZ0ZsYWdzKCkge1xuICAgICAgICAvLyBXZSBuZWVkIHRvIGRlZXAgY2xvbmUgdGhpcyBvYmplY3QuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlbXB0eSAgICAgICAgICAgOiBmYWxzZSxcbiAgICAgICAgICAgIHVudXNlZFRva2VucyAgICA6IFtdLFxuICAgICAgICAgICAgdW51c2VkSW5wdXQgICAgIDogW10sXG4gICAgICAgICAgICBvdmVyZmxvdyAgICAgICAgOiAtMixcbiAgICAgICAgICAgIGNoYXJzTGVmdE92ZXIgICA6IDAsXG4gICAgICAgICAgICBudWxsSW5wdXQgICAgICAgOiBmYWxzZSxcbiAgICAgICAgICAgIGludmFsaWRNb250aCAgICA6IG51bGwsXG4gICAgICAgICAgICBpbnZhbGlkRm9ybWF0ICAgOiBmYWxzZSxcbiAgICAgICAgICAgIHVzZXJJbnZhbGlkYXRlZCA6IGZhbHNlLFxuICAgICAgICAgICAgaXNvICAgICAgICAgICAgIDogZmFsc2VcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQYXJzaW5nRmxhZ3MobSkge1xuICAgICAgICBpZiAobS5fcGYgPT0gbnVsbCkge1xuICAgICAgICAgICAgbS5fcGYgPSBkZWZhdWx0UGFyc2luZ0ZsYWdzKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG0uX3BmO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbGlkX19pc1ZhbGlkKG0pIHtcbiAgICAgICAgaWYgKG0uX2lzVmFsaWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGZsYWdzID0gZ2V0UGFyc2luZ0ZsYWdzKG0pO1xuICAgICAgICAgICAgbS5faXNWYWxpZCA9ICFpc05hTihtLl9kLmdldFRpbWUoKSkgJiZcbiAgICAgICAgICAgICAgICBmbGFncy5vdmVyZmxvdyA8IDAgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuZW1wdHkgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZE1vbnRoICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRXZWVrZGF5ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLm51bGxJbnB1dCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkRm9ybWF0ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLnVzZXJJbnZhbGlkYXRlZDtcblxuICAgICAgICAgICAgaWYgKG0uX3N0cmljdCkge1xuICAgICAgICAgICAgICAgIG0uX2lzVmFsaWQgPSBtLl9pc1ZhbGlkICYmXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLmNoYXJzTGVmdE92ZXIgPT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MudW51c2VkVG9rZW5zLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICBmbGFncy5iaWdIb3VyID09PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG0uX2lzVmFsaWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdmFsaWRfX2NyZWF0ZUludmFsaWQgKGZsYWdzKSB7XG4gICAgICAgIHZhciBtID0gY3JlYXRlX3V0Y19fY3JlYXRlVVRDKE5hTik7XG4gICAgICAgIGlmIChmbGFncyAhPSBudWxsKSB7XG4gICAgICAgICAgICBleHRlbmQoZ2V0UGFyc2luZ0ZsYWdzKG0pLCBmbGFncyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkudXNlckludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtO1xuICAgIH1cblxuICAgIHZhciBtb21lbnRQcm9wZXJ0aWVzID0gdXRpbHNfaG9va3NfX2hvb2tzLm1vbWVudFByb3BlcnRpZXMgPSBbXTtcblxuICAgIGZ1bmN0aW9uIGNvcHlDb25maWcodG8sIGZyb20pIHtcbiAgICAgICAgdmFyIGksIHByb3AsIHZhbDtcblxuICAgICAgICBpZiAodHlwZW9mIGZyb20uX2lzQU1vbWVudE9iamVjdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRvLl9pc0FNb21lbnRPYmplY3QgPSBmcm9tLl9pc0FNb21lbnRPYmplY3Q7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBmcm9tLl9pICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdG8uX2kgPSBmcm9tLl9pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZnJvbS5fZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRvLl9mID0gZnJvbS5fZjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGZyb20uX2wgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0by5fbCA9IGZyb20uX2w7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBmcm9tLl9zdHJpY3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0by5fc3RyaWN0ID0gZnJvbS5fc3RyaWN0O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZnJvbS5fdHptICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdG8uX3R6bSA9IGZyb20uX3R6bTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGZyb20uX2lzVVRDICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdG8uX2lzVVRDID0gZnJvbS5faXNVVEM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBmcm9tLl9vZmZzZXQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0by5fb2Zmc2V0ID0gZnJvbS5fb2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZnJvbS5fcGYgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0by5fcGYgPSBnZXRQYXJzaW5nRmxhZ3MoZnJvbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBmcm9tLl9sb2NhbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0by5fbG9jYWxlID0gZnJvbS5fbG9jYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1vbWVudFByb3BlcnRpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yIChpIGluIG1vbWVudFByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICBwcm9wID0gbW9tZW50UHJvcGVydGllc1tpXTtcbiAgICAgICAgICAgICAgICB2YWwgPSBmcm9tW3Byb3BdO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICB0b1twcm9wXSA9IHZhbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdG87XG4gICAgfVxuXG4gICAgdmFyIHVwZGF0ZUluUHJvZ3Jlc3MgPSBmYWxzZTtcblxuICAgIC8vIE1vbWVudCBwcm90b3R5cGUgb2JqZWN0XG4gICAgZnVuY3Rpb24gTW9tZW50KGNvbmZpZykge1xuICAgICAgICBjb3B5Q29uZmlnKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgIHRoaXMuX2QgPSBuZXcgRGF0ZShjb25maWcuX2QgIT0gbnVsbCA/IGNvbmZpZy5fZC5nZXRUaW1lKCkgOiBOYU4pO1xuICAgICAgICAvLyBQcmV2ZW50IGluZmluaXRlIGxvb3AgaW4gY2FzZSB1cGRhdGVPZmZzZXQgY3JlYXRlcyBuZXcgbW9tZW50XG4gICAgICAgIC8vIG9iamVjdHMuXG4gICAgICAgIGlmICh1cGRhdGVJblByb2dyZXNzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdXBkYXRlSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgICAgICB1dGlsc19ob29rc19faG9va3MudXBkYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICAgICAgdXBkYXRlSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNNb21lbnQgKG9iaikge1xuICAgICAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgTW9tZW50IHx8IChvYmogIT0gbnVsbCAmJiBvYmouX2lzQU1vbWVudE9iamVjdCAhPSBudWxsKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhYnNGbG9vciAobnVtYmVyKSB7XG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5jZWlsKG51bWJlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9JbnQoYXJndW1lbnRGb3JDb2VyY2lvbikge1xuICAgICAgICB2YXIgY29lcmNlZE51bWJlciA9ICthcmd1bWVudEZvckNvZXJjaW9uLFxuICAgICAgICAgICAgdmFsdWUgPSAwO1xuXG4gICAgICAgIGlmIChjb2VyY2VkTnVtYmVyICE9PSAwICYmIGlzRmluaXRlKGNvZXJjZWROdW1iZXIpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGFic0Zsb29yKGNvZXJjZWROdW1iZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXBhcmVBcnJheXMoYXJyYXkxLCBhcnJheTIsIGRvbnRDb252ZXJ0KSB7XG4gICAgICAgIHZhciBsZW4gPSBNYXRoLm1pbihhcnJheTEubGVuZ3RoLCBhcnJheTIubGVuZ3RoKSxcbiAgICAgICAgICAgIGxlbmd0aERpZmYgPSBNYXRoLmFicyhhcnJheTEubGVuZ3RoIC0gYXJyYXkyLmxlbmd0aCksXG4gICAgICAgICAgICBkaWZmcyA9IDAsXG4gICAgICAgICAgICBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGlmICgoZG9udENvbnZlcnQgJiYgYXJyYXkxW2ldICE9PSBhcnJheTJbaV0pIHx8XG4gICAgICAgICAgICAgICAgKCFkb250Q29udmVydCAmJiB0b0ludChhcnJheTFbaV0pICE9PSB0b0ludChhcnJheTJbaV0pKSkge1xuICAgICAgICAgICAgICAgIGRpZmZzKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRpZmZzICsgbGVuZ3RoRGlmZjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBMb2NhbGUoKSB7XG4gICAgfVxuXG4gICAgdmFyIGxvY2FsZXMgPSB7fTtcbiAgICB2YXIgZ2xvYmFsTG9jYWxlO1xuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplTG9jYWxlKGtleSkge1xuICAgICAgICByZXR1cm4ga2V5ID8ga2V5LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgnXycsICctJykgOiBrZXk7XG4gICAgfVxuXG4gICAgLy8gcGljayB0aGUgbG9jYWxlIGZyb20gdGhlIGFycmF5XG4gICAgLy8gdHJ5IFsnZW4tYXUnLCAnZW4tZ2InXSBhcyAnZW4tYXUnLCAnZW4tZ2InLCAnZW4nLCBhcyBpbiBtb3ZlIHRocm91Z2ggdGhlIGxpc3QgdHJ5aW5nIGVhY2hcbiAgICAvLyBzdWJzdHJpbmcgZnJvbSBtb3N0IHNwZWNpZmljIHRvIGxlYXN0LCBidXQgbW92ZSB0byB0aGUgbmV4dCBhcnJheSBpdGVtIGlmIGl0J3MgYSBtb3JlIHNwZWNpZmljIHZhcmlhbnQgdGhhbiB0aGUgY3VycmVudCByb290XG4gICAgZnVuY3Rpb24gY2hvb3NlTG9jYWxlKG5hbWVzKSB7XG4gICAgICAgIHZhciBpID0gMCwgaiwgbmV4dCwgbG9jYWxlLCBzcGxpdDtcblxuICAgICAgICB3aGlsZSAoaSA8IG5hbWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgc3BsaXQgPSBub3JtYWxpemVMb2NhbGUobmFtZXNbaV0pLnNwbGl0KCctJyk7XG4gICAgICAgICAgICBqID0gc3BsaXQubGVuZ3RoO1xuICAgICAgICAgICAgbmV4dCA9IG5vcm1hbGl6ZUxvY2FsZShuYW1lc1tpICsgMV0pO1xuICAgICAgICAgICAgbmV4dCA9IG5leHQgPyBuZXh0LnNwbGl0KCctJykgOiBudWxsO1xuICAgICAgICAgICAgd2hpbGUgKGogPiAwKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShzcGxpdC5zbGljZSgwLCBqKS5qb2luKCctJykpO1xuICAgICAgICAgICAgICAgIGlmIChsb2NhbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5leHQgJiYgbmV4dC5sZW5ndGggPj0gaiAmJiBjb21wYXJlQXJyYXlzKHNwbGl0LCBuZXh0LCB0cnVlKSA+PSBqIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAvL3RoZSBuZXh0IGFycmF5IGl0ZW0gaXMgYmV0dGVyIHRoYW4gYSBzaGFsbG93ZXIgc3Vic3RyaW5nIG9mIHRoaXMgb25lXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBqLS07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9hZExvY2FsZShuYW1lKSB7XG4gICAgICAgIHZhciBvbGRMb2NhbGUgPSBudWxsO1xuICAgICAgICAvLyBUT0RPOiBGaW5kIGEgYmV0dGVyIHdheSB0byByZWdpc3RlciBhbmQgbG9hZCBhbGwgdGhlIGxvY2FsZXMgaW4gTm9kZVxuICAgICAgICBpZiAoIWxvY2FsZXNbbmFtZV0gJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICBtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgb2xkTG9jYWxlID0gZ2xvYmFsTG9jYWxlLl9hYmJyO1xuICAgICAgICAgICAgICAgIHJlcXVpcmUoJy4vbG9jYWxlLycgKyBuYW1lKTtcbiAgICAgICAgICAgICAgICAvLyBiZWNhdXNlIGRlZmluZUxvY2FsZSBjdXJyZW50bHkgYWxzbyBzZXRzIHRoZSBnbG9iYWwgbG9jYWxlLCB3ZVxuICAgICAgICAgICAgICAgIC8vIHdhbnQgdG8gdW5kbyB0aGF0IGZvciBsYXp5IGxvYWRlZCBsb2NhbGVzXG4gICAgICAgICAgICAgICAgbG9jYWxlX2xvY2FsZXNfX2dldFNldEdsb2JhbExvY2FsZShvbGRMb2NhbGUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkgeyB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGxvYWQgbG9jYWxlIGFuZCB0aGVuIHNldCB0aGUgZ2xvYmFsIGxvY2FsZS4gIElmXG4gICAgLy8gbm8gYXJndW1lbnRzIGFyZSBwYXNzZWQgaW4sIGl0IHdpbGwgc2ltcGx5IHJldHVybiB0aGUgY3VycmVudCBnbG9iYWxcbiAgICAvLyBsb2NhbGUga2V5LlxuICAgIGZ1bmN0aW9uIGxvY2FsZV9sb2NhbGVzX19nZXRTZXRHbG9iYWxMb2NhbGUgKGtleSwgdmFsdWVzKSB7XG4gICAgICAgIHZhciBkYXRhO1xuICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gbG9jYWxlX2xvY2FsZXNfX2dldExvY2FsZShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IGRlZmluZUxvY2FsZShrZXksIHZhbHVlcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgLy8gbW9tZW50LmR1cmF0aW9uLl9sb2NhbGUgPSBtb21lbnQuX2xvY2FsZSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgZ2xvYmFsTG9jYWxlID0gZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGUuX2FiYnI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVmaW5lTG9jYWxlIChuYW1lLCB2YWx1ZXMpIHtcbiAgICAgICAgaWYgKHZhbHVlcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFsdWVzLmFiYnIgPSBuYW1lO1xuICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IGxvY2FsZXNbbmFtZV0gfHwgbmV3IExvY2FsZSgpO1xuICAgICAgICAgICAgbG9jYWxlc1tuYW1lXS5zZXQodmFsdWVzKTtcblxuICAgICAgICAgICAgLy8gYmFja3dhcmRzIGNvbXBhdCBmb3Igbm93OiBhbHNvIHNldCB0aGUgbG9jYWxlXG4gICAgICAgICAgICBsb2NhbGVfbG9jYWxlc19fZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpO1xuXG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHVzZWZ1bCBmb3IgdGVzdGluZ1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsZXNbbmFtZV07XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIHJldHVybnMgbG9jYWxlIGRhdGFcbiAgICBmdW5jdGlvbiBsb2NhbGVfbG9jYWxlc19fZ2V0TG9jYWxlIChrZXkpIHtcbiAgICAgICAgdmFyIGxvY2FsZTtcblxuICAgICAgICBpZiAoa2V5ICYmIGtleS5fbG9jYWxlICYmIGtleS5fbG9jYWxlLl9hYmJyKSB7XG4gICAgICAgICAgICBrZXkgPSBrZXkuX2xvY2FsZS5fYWJicjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsTG9jYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc0FycmF5KGtleSkpIHtcbiAgICAgICAgICAgIC8vc2hvcnQtY2lyY3VpdCBldmVyeXRoaW5nIGVsc2VcbiAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIGlmIChsb2NhbGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAga2V5ID0gW2tleV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2hvb3NlTG9jYWxlKGtleSk7XG4gICAgfVxuXG4gICAgdmFyIGFsaWFzZXMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGFkZFVuaXRBbGlhcyAodW5pdCwgc2hvcnRoYW5kKSB7XG4gICAgICAgIHZhciBsb3dlckNhc2UgPSB1bml0LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGFsaWFzZXNbbG93ZXJDYXNlXSA9IGFsaWFzZXNbbG93ZXJDYXNlICsgJ3MnXSA9IGFsaWFzZXNbc2hvcnRoYW5kXSA9IHVuaXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplVW5pdHModW5pdHMpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB1bml0cyA9PT0gJ3N0cmluZycgPyBhbGlhc2VzW3VuaXRzXSB8fCBhbGlhc2VzW3VuaXRzLnRvTG93ZXJDYXNlKCldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZU9iamVjdFVuaXRzKGlucHV0T2JqZWN0KSB7XG4gICAgICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSB7fSxcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRQcm9wLFxuICAgICAgICAgICAgcHJvcDtcblxuICAgICAgICBmb3IgKHByb3AgaW4gaW5wdXRPYmplY3QpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGlucHV0T2JqZWN0LCBwcm9wKSkge1xuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRQcm9wID0gbm9ybWFsaXplVW5pdHMocHJvcCk7XG4gICAgICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWRQcm9wKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRJbnB1dFtub3JtYWxpemVkUHJvcF0gPSBpbnB1dE9iamVjdFtwcm9wXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbm9ybWFsaXplZElucHV0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VHZXRTZXQgKHVuaXQsIGtlZXBUaW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZ2V0X3NldF9fc2V0KHRoaXMsIHVuaXQsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB1dGlsc19ob29rc19faG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIGtlZXBUaW1lKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldF9zZXRfX2dldCh0aGlzLCB1bml0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRfc2V0X19nZXQgKG1vbSwgdW5pdCkge1xuICAgICAgICByZXR1cm4gbW9tLl9kWydnZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArIHVuaXRdKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0X3NldF9fc2V0IChtb20sIHVuaXQsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgdW5pdF0odmFsdWUpO1xuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldCAodW5pdHMsIHZhbHVlKSB7XG4gICAgICAgIHZhciB1bml0O1xuICAgICAgICBpZiAodHlwZW9mIHVuaXRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgZm9yICh1bml0IGluIHVuaXRzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXQodW5pdCwgdW5pdHNbdW5pdF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXNbdW5pdHNdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbdW5pdHNdKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB6ZXJvRmlsbChudW1iZXIsIHRhcmdldExlbmd0aCwgZm9yY2VTaWduKSB7XG4gICAgICAgIHZhciBhYnNOdW1iZXIgPSAnJyArIE1hdGguYWJzKG51bWJlciksXG4gICAgICAgICAgICB6ZXJvc1RvRmlsbCA9IHRhcmdldExlbmd0aCAtIGFic051bWJlci5sZW5ndGgsXG4gICAgICAgICAgICBzaWduID0gbnVtYmVyID49IDA7XG4gICAgICAgIHJldHVybiAoc2lnbiA/IChmb3JjZVNpZ24gPyAnKycgOiAnJykgOiAnLScpICtcbiAgICAgICAgICAgIE1hdGgucG93KDEwLCBNYXRoLm1heCgwLCB6ZXJvc1RvRmlsbCkpLnRvU3RyaW5nKCkuc3Vic3RyKDEpICsgYWJzTnVtYmVyO1xuICAgIH1cblxuICAgIHZhciBmb3JtYXR0aW5nVG9rZW5zID0gLyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KE1vfE1NP00/TT98RG98REREb3xERD9EP0Q/fGRkZD9kP3xkbz98d1tvfHddP3xXW298V10/fFF8WVlZWVlZfFlZWVlZfFlZWVl8WVl8Z2coZ2dnPyk/fEdHKEdHRz8pP3xlfEV8YXxBfGhoP3xISD98bW0/fHNzP3xTezEsOX18eHxYfHp6P3xaWj98LikvZztcblxuICAgIHZhciBsb2NhbEZvcm1hdHRpbmdUb2tlbnMgPSAvKFxcW1teXFxbXSpcXF0pfChcXFxcKT8oTFRTfExUfExMP0w/TD98bHsxLDR9KS9nO1xuXG4gICAgdmFyIGZvcm1hdEZ1bmN0aW9ucyA9IHt9O1xuXG4gICAgdmFyIGZvcm1hdFRva2VuRnVuY3Rpb25zID0ge307XG5cbiAgICAvLyB0b2tlbjogICAgJ00nXG4gICAgLy8gcGFkZGVkOiAgIFsnTU0nLCAyXVxuICAgIC8vIG9yZGluYWw6ICAnTW8nXG4gICAgLy8gY2FsbGJhY2s6IGZ1bmN0aW9uICgpIHsgdGhpcy5tb250aCgpICsgMSB9XG4gICAgZnVuY3Rpb24gYWRkRm9ybWF0VG9rZW4gKHRva2VuLCBwYWRkZWQsIG9yZGluYWwsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBmdW5jID0gY2FsbGJhY2s7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBmdW5jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW2NhbGxiYWNrXSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhZGRlZCkge1xuICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbcGFkZGVkWzBdXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gemVyb0ZpbGwoZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBwYWRkZWRbMV0sIHBhZGRlZFsyXSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcmRpbmFsKSB7XG4gICAgICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1tvcmRpbmFsXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkub3JkaW5hbChmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRva2VuKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVGb3JtYXR0aW5nVG9rZW5zKGlucHV0KSB7XG4gICAgICAgIGlmIChpbnB1dC5tYXRjaCgvXFxbW1xcc1xcU10vKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL15cXFt8XFxdJC9nLCAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL1xcXFwvZywgJycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VGb3JtYXRGdW5jdGlvbihmb3JtYXQpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gZm9ybWF0Lm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpLCBpLCBsZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uc1thcnJheVtpXV0pIHtcbiAgICAgICAgICAgICAgICBhcnJheVtpXSA9IGZvcm1hdFRva2VuRnVuY3Rpb25zW2FycmF5W2ldXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbaV0gPSByZW1vdmVGb3JtYXR0aW5nVG9rZW5zKGFycmF5W2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobW9tKSB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0ID0gJyc7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gYXJyYXlbaV0gaW5zdGFuY2VvZiBGdW5jdGlvbiA/IGFycmF5W2ldLmNhbGwobW9tLCBmb3JtYXQpIDogYXJyYXlbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIGZvcm1hdCBkYXRlIHVzaW5nIG5hdGl2ZSBkYXRlIG9iamVjdFxuICAgIGZ1bmN0aW9uIGZvcm1hdE1vbWVudChtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG0ubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXQgPSBleHBhbmRGb3JtYXQoZm9ybWF0LCBtLmxvY2FsZURhdGEoKSk7XG4gICAgICAgIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdID0gZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0gfHwgbWFrZUZvcm1hdEZ1bmN0aW9uKGZvcm1hdCk7XG5cbiAgICAgICAgcmV0dXJuIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdKG0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4cGFuZEZvcm1hdChmb3JtYXQsIGxvY2FsZSkge1xuICAgICAgICB2YXIgaSA9IDU7XG5cbiAgICAgICAgZnVuY3Rpb24gcmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlLmxvbmdEYXRlRm9ybWF0KGlucHV0KSB8fCBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy5sYXN0SW5kZXggPSAwO1xuICAgICAgICB3aGlsZSAoaSA+PSAwICYmIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKGxvY2FsRm9ybWF0dGluZ1Rva2VucywgcmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zKTtcbiAgICAgICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgICAgaSAtPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2gxICAgICAgICAgPSAvXFxkLzsgICAgICAgICAgICAvLyAgICAgICAwIC0gOVxuICAgIHZhciBtYXRjaDIgICAgICAgICA9IC9cXGRcXGQvOyAgICAgICAgICAvLyAgICAgIDAwIC0gOTlcbiAgICB2YXIgbWF0Y2gzICAgICAgICAgPSAvXFxkezN9LzsgICAgICAgICAvLyAgICAgMDAwIC0gOTk5XG4gICAgdmFyIG1hdGNoNCAgICAgICAgID0gL1xcZHs0fS87ICAgICAgICAgLy8gICAgMDAwMCAtIDk5OTlcbiAgICB2YXIgbWF0Y2g2ICAgICAgICAgPSAvWystXT9cXGR7Nn0vOyAgICAvLyAtOTk5OTk5IC0gOTk5OTk5XG4gICAgdmFyIG1hdGNoMXRvMiAgICAgID0gL1xcZFxcZD8vOyAgICAgICAgIC8vICAgICAgIDAgLSA5OVxuICAgIHZhciBtYXRjaDF0bzMgICAgICA9IC9cXGR7MSwzfS87ICAgICAgIC8vICAgICAgIDAgLSA5OTlcbiAgICB2YXIgbWF0Y2gxdG80ICAgICAgPSAvXFxkezEsNH0vOyAgICAgICAvLyAgICAgICAwIC0gOTk5OVxuICAgIHZhciBtYXRjaDF0bzYgICAgICA9IC9bKy1dP1xcZHsxLDZ9LzsgIC8vIC05OTk5OTkgLSA5OTk5OTlcblxuICAgIHZhciBtYXRjaFVuc2lnbmVkICA9IC9cXGQrLzsgICAgICAgICAgIC8vICAgICAgIDAgLSBpbmZcbiAgICB2YXIgbWF0Y2hTaWduZWQgICAgPSAvWystXT9cXGQrLzsgICAgICAvLyAgICAtaW5mIC0gaW5mXG5cbiAgICB2YXIgbWF0Y2hPZmZzZXQgICAgPSAvWnxbKy1dXFxkXFxkOj9cXGRcXGQvZ2k7IC8vICswMDowMCAtMDA6MDAgKzAwMDAgLTAwMDAgb3IgWlxuXG4gICAgdmFyIG1hdGNoVGltZXN0YW1wID0gL1srLV0/XFxkKyhcXC5cXGR7MSwzfSk/LzsgLy8gMTIzNDU2Nzg5IDEyMzQ1Njc4OS4xMjNcblxuICAgIC8vIGFueSB3b3JkIChvciB0d28pIGNoYXJhY3RlcnMgb3IgbnVtYmVycyBpbmNsdWRpbmcgdHdvL3RocmVlIHdvcmQgbW9udGggaW4gYXJhYmljLlxuICAgIHZhciBtYXRjaFdvcmQgPSAvWzAtOV0qWydhLXpcXHUwMEEwLVxcdTA1RkZcXHUwNzAwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdK3xbXFx1MDYwMC1cXHUwNkZGXFwvXSsoXFxzKj9bXFx1MDYwMC1cXHUwNkZGXSspezEsMn0vaTtcblxuICAgIHZhciByZWdleGVzID0ge307XG5cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uIChzdGgpIHtcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzIzMjVcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBzdGggPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzdGgpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gYWRkUmVnZXhUb2tlbiAodG9rZW4sIHJlZ2V4LCBzdHJpY3RSZWdleCkge1xuICAgICAgICByZWdleGVzW3Rva2VuXSA9IGlzRnVuY3Rpb24ocmVnZXgpID8gcmVnZXggOiBmdW5jdGlvbiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgIHJldHVybiAoaXNTdHJpY3QgJiYgc3RyaWN0UmVnZXgpID8gc3RyaWN0UmVnZXggOiByZWdleDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4gKHRva2VuLCBjb25maWcpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHJlZ2V4ZXMsIHRva2VuKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAodW5lc2NhcGVGb3JtYXQodG9rZW4pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZWdleGVzW3Rva2VuXShjb25maWcuX3N0cmljdCwgY29uZmlnLl9sb2NhbGUpO1xuICAgIH1cblxuICAgIC8vIENvZGUgZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM1NjE0OTMvaXMtdGhlcmUtYS1yZWdleHAtZXNjYXBlLWZ1bmN0aW9uLWluLWphdmFzY3JpcHRcbiAgICBmdW5jdGlvbiB1bmVzY2FwZUZvcm1hdChzKSB7XG4gICAgICAgIHJldHVybiBzLnJlcGxhY2UoJ1xcXFwnLCAnJykucmVwbGFjZSgvXFxcXChcXFspfFxcXFwoXFxdKXxcXFsoW15cXF1cXFtdKilcXF18XFxcXCguKS9nLCBmdW5jdGlvbiAobWF0Y2hlZCwgcDEsIHAyLCBwMywgcDQpIHtcbiAgICAgICAgICAgIHJldHVybiBwMSB8fCBwMiB8fCBwMyB8fCBwNDtcbiAgICAgICAgfSkucmVwbGFjZSgvWy1cXC9cXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XG4gICAgfVxuXG4gICAgdmFyIHRva2VucyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gYWRkUGFyc2VUb2tlbiAodG9rZW4sIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBpLCBmdW5jID0gY2FsbGJhY2s7XG4gICAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0b2tlbiA9IFt0b2tlbl07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGZ1bmMgPSBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbY2FsbGJhY2tdID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdG9rZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRva2Vuc1t0b2tlbltpXV0gPSBmdW5jO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkV2Vla1BhcnNlVG9rZW4gKHRva2VuLCBjYWxsYmFjaykge1xuICAgICAgICBhZGRQYXJzZVRva2VuKHRva2VuLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgICAgICBjb25maWcuX3cgPSBjb25maWcuX3cgfHwge307XG4gICAgICAgICAgICBjYWxsYmFjayhpbnB1dCwgY29uZmlnLl93LCBjb25maWcsIHRva2VuKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4odG9rZW4sIGlucHV0LCBjb25maWcpIHtcbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwgJiYgaGFzT3duUHJvcCh0b2tlbnMsIHRva2VuKSkge1xuICAgICAgICAgICAgdG9rZW5zW3Rva2VuXShpbnB1dCwgY29uZmlnLl9hLCBjb25maWcsIHRva2VuKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBZRUFSID0gMDtcbiAgICB2YXIgTU9OVEggPSAxO1xuICAgIHZhciBEQVRFID0gMjtcbiAgICB2YXIgSE9VUiA9IDM7XG4gICAgdmFyIE1JTlVURSA9IDQ7XG4gICAgdmFyIFNFQ09ORCA9IDU7XG4gICAgdmFyIE1JTExJU0VDT05EID0gNjtcblxuICAgIGZ1bmN0aW9uIGRheXNJbk1vbnRoKHllYXIsIG1vbnRoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShEYXRlLlVUQyh5ZWFyLCBtb250aCArIDEsIDApKS5nZXRVVENEYXRlKCk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ00nLCBbJ01NJywgMl0sICdNbycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9udGgoKSArIDE7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignTU1NJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubW9udGhzU2hvcnQodGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdNTU1NJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubW9udGhzKHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ21vbnRoJywgJ00nKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ00nLCAgICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ01NJywgICBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignTU1NJywgIG1hdGNoV29yZCk7XG4gICAgYWRkUmVnZXhUb2tlbignTU1NTScsIG1hdGNoV29yZCk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnTScsICdNTSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01PTlRIXSA9IHRvSW50KGlucHV0KSAtIDE7XG4gICAgfSk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnTU1NJywgJ01NTU0nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB2YXIgbW9udGggPSBjb25maWcuX2xvY2FsZS5tb250aHNQYXJzZShpbnB1dCwgdG9rZW4sIGNvbmZpZy5fc3RyaWN0KTtcbiAgICAgICAgLy8gaWYgd2UgZGlkbid0IGZpbmQgYSBtb250aCBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWQuXG4gICAgICAgIGlmIChtb250aCAhPSBudWxsKSB7XG4gICAgICAgICAgICBhcnJheVtNT05USF0gPSBtb250aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRNb250aCA9IGlucHV0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZU1vbnRocyA9ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIGxvY2FsZU1vbnRocyAobSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzW20ubW9udGgoKV07XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCA9ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBsb2NhbGVNb250aHNTaG9ydCAobSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRbbS5tb250aCgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVNb250aHNQYXJzZSAobW9udGhOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSwgbW9tLCByZWdleDtcblxuICAgICAgICBpZiAoIXRoaXMuX21vbnRoc1BhcnNlKSB7XG4gICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVfdXRjX19jcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgIXRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy5tb250aHMobW9tLCAnJykucmVwbGFjZSgnLicsICcnKSArICckJywgJ2knKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnJykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXN0cmljdCAmJiAhdGhpcy5fbW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICByZWdleCA9ICdeJyArIHRoaXMubW9udGhzKG1vbSwgJycpICsgJ3xeJyArIHRoaXMubW9udGhzU2hvcnQobW9tLCAnJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKHJlZ2V4LnJlcGxhY2UoJy4nLCAnJyksICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0ZXN0IHRoZSByZWdleFxuICAgICAgICAgICAgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdNTU1NJyAmJiB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdNTU0nICYmIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgdGhpcy5fbW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBzZXRNb250aCAobW9tLCB2YWx1ZSkge1xuICAgICAgICB2YXIgZGF5T2ZNb250aDtcblxuICAgICAgICAvLyBUT0RPOiBNb3ZlIHRoaXMgb3V0IG9mIGhlcmUhXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IG1vbS5sb2NhbGVEYXRhKCkubW9udGhzUGFyc2UodmFsdWUpO1xuICAgICAgICAgICAgLy8gVE9ETzogQW5vdGhlciBzaWxlbnQgZmFpbHVyZT9cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGRheU9mTW9udGggPSBNYXRoLm1pbihtb20uZGF0ZSgpLCBkYXlzSW5Nb250aChtb20ueWVhcigpLCB2YWx1ZSkpO1xuICAgICAgICBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgJ01vbnRoJ10odmFsdWUsIGRheU9mTW9udGgpO1xuICAgICAgICByZXR1cm4gbW9tO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldE1vbnRoICh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgc2V0TW9udGgodGhpcywgdmFsdWUpO1xuICAgICAgICAgICAgdXRpbHNfaG9va3NfX2hvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGdldF9zZXRfX2dldCh0aGlzLCAnTW9udGgnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldERheXNJbk1vbnRoICgpIHtcbiAgICAgICAgcmV0dXJuIGRheXNJbk1vbnRoKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNoZWNrT3ZlcmZsb3cgKG0pIHtcbiAgICAgICAgdmFyIG92ZXJmbG93O1xuICAgICAgICB2YXIgYSA9IG0uX2E7XG5cbiAgICAgICAgaWYgKGEgJiYgZ2V0UGFyc2luZ0ZsYWdzKG0pLm92ZXJmbG93ID09PSAtMikge1xuICAgICAgICAgICAgb3ZlcmZsb3cgPVxuICAgICAgICAgICAgICAgIGFbTU9OVEhdICAgICAgIDwgMCB8fCBhW01PTlRIXSAgICAgICA+IDExICA/IE1PTlRIIDpcbiAgICAgICAgICAgICAgICBhW0RBVEVdICAgICAgICA8IDEgfHwgYVtEQVRFXSAgICAgICAgPiBkYXlzSW5Nb250aChhW1lFQVJdLCBhW01PTlRIXSkgPyBEQVRFIDpcbiAgICAgICAgICAgICAgICBhW0hPVVJdICAgICAgICA8IDAgfHwgYVtIT1VSXSAgICAgICAgPiAyNCB8fCAoYVtIT1VSXSA9PT0gMjQgJiYgKGFbTUlOVVRFXSAhPT0gMCB8fCBhW1NFQ09ORF0gIT09IDAgfHwgYVtNSUxMSVNFQ09ORF0gIT09IDApKSA/IEhPVVIgOlxuICAgICAgICAgICAgICAgIGFbTUlOVVRFXSAgICAgIDwgMCB8fCBhW01JTlVURV0gICAgICA+IDU5ICA/IE1JTlVURSA6XG4gICAgICAgICAgICAgICAgYVtTRUNPTkRdICAgICAgPCAwIHx8IGFbU0VDT05EXSAgICAgID4gNTkgID8gU0VDT05EIDpcbiAgICAgICAgICAgICAgICBhW01JTExJU0VDT05EXSA8IDAgfHwgYVtNSUxMSVNFQ09ORF0gPiA5OTkgPyBNSUxMSVNFQ09ORCA6XG4gICAgICAgICAgICAgICAgLTE7XG5cbiAgICAgICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93RGF5T2ZZZWFyICYmIChvdmVyZmxvdyA8IFlFQVIgfHwgb3ZlcmZsb3cgPiBEQVRFKSkge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gREFURTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLm92ZXJmbG93ID0gb3ZlcmZsb3c7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3YXJuKG1zZykge1xuICAgICAgICBpZiAodXRpbHNfaG9va3NfX2hvb2tzLnN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyA9PT0gZmFsc2UgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUud2Fybikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdEZXByZWNhdGlvbiB3YXJuaW5nOiAnICsgbXNnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlcHJlY2F0ZShtc2csIGZuKSB7XG4gICAgICAgIHZhciBmaXJzdFRpbWUgPSB0cnVlO1xuXG4gICAgICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGZpcnN0VGltZSkge1xuICAgICAgICAgICAgICAgIHdhcm4obXNnICsgJ1xcbicgKyAobmV3IEVycm9yKCkpLnN0YWNrKTtcbiAgICAgICAgICAgICAgICBmaXJzdFRpbWUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9LCBmbik7XG4gICAgfVxuXG4gICAgdmFyIGRlcHJlY2F0aW9ucyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gZGVwcmVjYXRlU2ltcGxlKG5hbWUsIG1zZykge1xuICAgICAgICBpZiAoIWRlcHJlY2F0aW9uc1tuYW1lXSkge1xuICAgICAgICAgICAgd2Fybihtc2cpO1xuICAgICAgICAgICAgZGVwcmVjYXRpb25zW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHV0aWxzX2hvb2tzX19ob29rcy5zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MgPSBmYWxzZTtcblxuICAgIHZhciBmcm9tX3N0cmluZ19faXNvUmVnZXggPSAvXlxccyooPzpbKy1dXFxkezZ9fFxcZHs0fSktKD86KFxcZFxcZC1cXGRcXGQpfChXXFxkXFxkJCl8KFdcXGRcXGQtXFxkKXwoXFxkXFxkXFxkKSkoKFR8ICkoXFxkXFxkKDpcXGRcXGQoOlxcZFxcZChcXC5cXGQrKT8pPyk/KT8oW1xcK1xcLV1cXGRcXGQoPzo6P1xcZFxcZCk/fFxccypaKT8pPyQvO1xuXG4gICAgdmFyIGlzb0RhdGVzID0gW1xuICAgICAgICBbJ1lZWVlZWS1NTS1ERCcsIC9bKy1dXFxkezZ9LVxcZHsyfS1cXGR7Mn0vXSxcbiAgICAgICAgWydZWVlZLU1NLUREJywgL1xcZHs0fS1cXGR7Mn0tXFxkezJ9L10sXG4gICAgICAgIFsnR0dHRy1bV11XVy1FJywgL1xcZHs0fS1XXFxkezJ9LVxcZC9dLFxuICAgICAgICBbJ0dHR0ctW1ddV1cnLCAvXFxkezR9LVdcXGR7Mn0vXSxcbiAgICAgICAgWydZWVlZLURERCcsIC9cXGR7NH0tXFxkezN9L11cbiAgICBdO1xuXG4gICAgLy8gaXNvIHRpbWUgZm9ybWF0cyBhbmQgcmVnZXhlc1xuICAgIHZhciBpc29UaW1lcyA9IFtcbiAgICAgICAgWydISDptbTpzcy5TU1NTJywgLyhUfCApXFxkXFxkOlxcZFxcZDpcXGRcXGRcXC5cXGQrL10sXG4gICAgICAgIFsnSEg6bW06c3MnLCAvKFR8IClcXGRcXGQ6XFxkXFxkOlxcZFxcZC9dLFxuICAgICAgICBbJ0hIOm1tJywgLyhUfCApXFxkXFxkOlxcZFxcZC9dLFxuICAgICAgICBbJ0hIJywgLyhUfCApXFxkXFxkL11cbiAgICBdO1xuXG4gICAgdmFyIGFzcE5ldEpzb25SZWdleCA9IC9eXFwvP0RhdGVcXCgoXFwtP1xcZCspL2k7XG5cbiAgICAvLyBkYXRlIGZyb20gaXNvIGZvcm1hdFxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21JU08oY29uZmlnKSB7XG4gICAgICAgIHZhciBpLCBsLFxuICAgICAgICAgICAgc3RyaW5nID0gY29uZmlnLl9pLFxuICAgICAgICAgICAgbWF0Y2ggPSBmcm9tX3N0cmluZ19faXNvUmVnZXguZXhlYyhzdHJpbmcpO1xuXG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaXNvID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBpc29EYXRlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNvRGF0ZXNbaV1bMV0uZXhlYyhzdHJpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5fZiA9IGlzb0RhdGVzW2ldWzBdO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gaXNvVGltZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzb1RpbWVzW2ldWzFdLmV4ZWMoc3RyaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBtYXRjaFs2XSBzaG91bGQgYmUgJ1QnIG9yIHNwYWNlXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5fZiArPSAobWF0Y2hbNl0gfHwgJyAnKSArIGlzb1RpbWVzW2ldWzBdO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RyaW5nLm1hdGNoKG1hdGNoT2Zmc2V0KSkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5fZiArPSAnWic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRhdGUgZnJvbSBpc28gZm9ybWF0IG9yIGZhbGxiYWNrXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZyhjb25maWcpIHtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBhc3BOZXRKc29uUmVnZXguZXhlYyhjb25maWcuX2kpO1xuXG4gICAgICAgIGlmIChtYXRjaGVkICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSgrbWF0Y2hlZFsxXSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWdGcm9tSVNPKGNvbmZpZyk7XG4gICAgICAgIGlmIChjb25maWcuX2lzVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBkZWxldGUgY29uZmlnLl9pc1ZhbGlkO1xuICAgICAgICAgICAgdXRpbHNfaG9va3NfX2hvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1dGlsc19ob29rc19faG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2sgPSBkZXByZWNhdGUoXG4gICAgICAgICdtb21lbnQgY29uc3RydWN0aW9uIGZhbGxzIGJhY2sgdG8ganMgRGF0ZS4gVGhpcyBpcyAnICtcbiAgICAgICAgJ2Rpc2NvdXJhZ2VkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdXBjb21pbmcgbWFqb3IgJyArXG4gICAgICAgICdyZWxlYXNlLiBQbGVhc2UgcmVmZXIgdG8gJyArXG4gICAgICAgICdodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMTQwNyBmb3IgbW9yZSBpbmZvLicsXG4gICAgICAgIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGNvbmZpZy5faSArIChjb25maWcuX3VzZVVUQyA/ICcgVVRDJyA6ICcnKSk7XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlRGF0ZSAoeSwgbSwgZCwgaCwgTSwgcywgbXMpIHtcbiAgICAgICAgLy9jYW4ndCBqdXN0IGFwcGx5KCkgdG8gY3JlYXRlIGEgZGF0ZTpcbiAgICAgICAgLy9odHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE4MTM0OC9pbnN0YW50aWF0aW5nLWEtamF2YXNjcmlwdC1vYmplY3QtYnktY2FsbGluZy1wcm90b3R5cGUtY29uc3RydWN0b3ItYXBwbHlcbiAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSh5LCBtLCBkLCBoLCBNLCBzLCBtcyk7XG5cbiAgICAgICAgLy90aGUgZGF0ZSBjb25zdHJ1Y3RvciBkb2Vzbid0IGFjY2VwdCB5ZWFycyA8IDE5NzBcbiAgICAgICAgaWYgKHkgPCAxOTcwKSB7XG4gICAgICAgICAgICBkYXRlLnNldEZ1bGxZZWFyKHkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVVUQ0RhdGUgKHkpIHtcbiAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQy5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcbiAgICAgICAgaWYgKHkgPCAxOTcwKSB7XG4gICAgICAgICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVknLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy55ZWFyKCkgJSAxMDA7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVknLCAgIDRdLCAgICAgICAwLCAneWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWVknLCAgNV0sICAgICAgIDAsICd5ZWFyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZWVknLCA2LCB0cnVlXSwgMCwgJ3llYXInKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygneWVhcicsICd5Jyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdZJywgICAgICBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignWVknLCAgICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZWVknLCAgIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbiAgICBhZGRSZWdleFRva2VuKCdZWVlZWScsICBtYXRjaDF0bzYsIG1hdGNoNik7XG4gICAgYWRkUmVnZXhUb2tlbignWVlZWVlZJywgbWF0Y2gxdG82LCBtYXRjaDYpO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ1lZWVlZJywgJ1lZWVlZWSddLCBZRUFSKTtcbiAgICBhZGRQYXJzZVRva2VuKCdZWVlZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtZRUFSXSA9IGlucHV0Lmxlbmd0aCA9PT0gMiA/IHV0aWxzX2hvb2tzX19ob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCkgOiB0b0ludChpbnB1dCk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignWVknLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W1lFQVJdID0gdXRpbHNfaG9va3NfX2hvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIGZ1bmN0aW9uIGRheXNJblllYXIoeWVhcikge1xuICAgICAgICByZXR1cm4gaXNMZWFwWWVhcih5ZWFyKSA/IDM2NiA6IDM2NTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0xlYXBZZWFyKHllYXIpIHtcbiAgICAgICAgcmV0dXJuICh5ZWFyICUgNCA9PT0gMCAmJiB5ZWFyICUgMTAwICE9PSAwKSB8fCB5ZWFyICUgNDAwID09PSAwO1xuICAgIH1cblxuICAgIC8vIEhPT0tTXG5cbiAgICB1dGlsc19ob29rc19faG9va3MucGFyc2VUd29EaWdpdFllYXIgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRvSW50KGlucHV0KSArICh0b0ludChpbnB1dCkgPiA2OCA/IDE5MDAgOiAyMDAwKTtcbiAgICB9O1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldFllYXIgPSBtYWtlR2V0U2V0KCdGdWxsWWVhcicsIGZhbHNlKTtcblxuICAgIGZ1bmN0aW9uIGdldElzTGVhcFllYXIgKCkge1xuICAgICAgICByZXR1cm4gaXNMZWFwWWVhcih0aGlzLnllYXIoKSk7XG4gICAgfVxuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3cnLCBbJ3d3JywgMl0sICd3bycsICd3ZWVrJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ1cnLCBbJ1dXJywgMl0sICdXbycsICdpc29XZWVrJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3dlZWsnLCAndycpO1xuICAgIGFkZFVuaXRBbGlhcygnaXNvV2VlaycsICdXJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCd3JywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignd3cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignVycsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1dXJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWyd3JywgJ3d3JywgJ1cnLCAnV1cnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW4uc3Vic3RyKDAsIDEpXSA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIC8vIGZpcnN0RGF5T2ZXZWVrICAgICAgIDAgPSBzdW4sIDYgPSBzYXRcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICB0aGUgZGF5IG9mIHRoZSB3ZWVrIHRoYXQgc3RhcnRzIHRoZSB3ZWVrXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgKHVzdWFsbHkgc3VuZGF5IG9yIG1vbmRheSlcbiAgICAvLyBmaXJzdERheU9mV2Vla09mWWVhciAwID0gc3VuLCA2ID0gc2F0XG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgdGhlIGZpcnN0IHdlZWsgaXMgdGhlIHdlZWsgdGhhdCBjb250YWlucyB0aGUgZmlyc3RcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICBvZiB0aGlzIGRheSBvZiB0aGUgd2Vla1xuICAgIC8vICAgICAgICAgICAgICAgICAgICAgIChlZy4gSVNPIHdlZWtzIHVzZSB0aHVyc2RheSAoNCkpXG4gICAgZnVuY3Rpb24gd2Vla09mWWVhcihtb20sIGZpcnN0RGF5T2ZXZWVrLCBmaXJzdERheU9mV2Vla09mWWVhcikge1xuICAgICAgICB2YXIgZW5kID0gZmlyc3REYXlPZldlZWtPZlllYXIgLSBmaXJzdERheU9mV2VlayxcbiAgICAgICAgICAgIGRheXNUb0RheU9mV2VlayA9IGZpcnN0RGF5T2ZXZWVrT2ZZZWFyIC0gbW9tLmRheSgpLFxuICAgICAgICAgICAgYWRqdXN0ZWRNb21lbnQ7XG5cblxuICAgICAgICBpZiAoZGF5c1RvRGF5T2ZXZWVrID4gZW5kKSB7XG4gICAgICAgICAgICBkYXlzVG9EYXlPZldlZWsgLT0gNztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkYXlzVG9EYXlPZldlZWsgPCBlbmQgLSA3KSB7XG4gICAgICAgICAgICBkYXlzVG9EYXlPZldlZWsgKz0gNztcbiAgICAgICAgfVxuXG4gICAgICAgIGFkanVzdGVkTW9tZW50ID0gbG9jYWxfX2NyZWF0ZUxvY2FsKG1vbSkuYWRkKGRheXNUb0RheU9mV2VlaywgJ2QnKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHdlZWs6IE1hdGguY2VpbChhZGp1c3RlZE1vbWVudC5kYXlPZlllYXIoKSAvIDcpLFxuICAgICAgICAgICAgeWVhcjogYWRqdXN0ZWRNb21lbnQueWVhcigpXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gTE9DQUxFU1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlV2VlayAobW9tKSB7XG4gICAgICAgIHJldHVybiB3ZWVrT2ZZZWFyKG1vbSwgdGhpcy5fd2Vlay5kb3csIHRoaXMuX3dlZWsuZG95KS53ZWVrO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlV2VlayA9IHtcbiAgICAgICAgZG93IDogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDYgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlRmlyc3REYXlPZldlZWsgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd2Vlay5kb3c7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlRmlyc3REYXlPZlllYXIgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd2Vlay5kb3k7XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0V2VlayAoaW5wdXQpIHtcbiAgICAgICAgdmFyIHdlZWsgPSB0aGlzLmxvY2FsZURhdGEoKS53ZWVrKHRoaXMpO1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWsgOiB0aGlzLmFkZCgoaW5wdXQgLSB3ZWVrKSAqIDcsICdkJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0SVNPV2VlayAoaW5wdXQpIHtcbiAgICAgICAgdmFyIHdlZWsgPSB3ZWVrT2ZZZWFyKHRoaXMsIDEsIDQpLndlZWs7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2VlayA6IHRoaXMuYWRkKChpbnB1dCAtIHdlZWspICogNywgJ2QnKTtcbiAgICB9XG5cbiAgICBhZGRGb3JtYXRUb2tlbignREREJywgWydEREREJywgM10sICdERERvJywgJ2RheU9mWWVhcicpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdkYXlPZlllYXInLCAnREREJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdEREQnLCAgbWF0Y2gxdG8zKTtcbiAgICBhZGRSZWdleFRva2VuKCdEREREJywgbWF0Y2gzKTtcbiAgICBhZGRQYXJzZVRva2VuKFsnREREJywgJ0REREQnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgLy9odHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGUjQ2FsY3VsYXRpbmdfYV9kYXRlX2dpdmVuX3RoZV95ZWFyLjJDX3dlZWtfbnVtYmVyX2FuZF93ZWVrZGF5XG4gICAgZnVuY3Rpb24gZGF5T2ZZZWFyRnJvbVdlZWtzKHllYXIsIHdlZWssIHdlZWtkYXksIGZpcnN0RGF5T2ZXZWVrT2ZZZWFyLCBmaXJzdERheU9mV2Vlaykge1xuICAgICAgICB2YXIgd2VlazFKYW4gPSA2ICsgZmlyc3REYXlPZldlZWsgLSBmaXJzdERheU9mV2Vla09mWWVhciwgamFuWCA9IGNyZWF0ZVVUQ0RhdGUoeWVhciwgMCwgMSArIHdlZWsxSmFuKSwgZCA9IGphblguZ2V0VVRDRGF5KCksIGRheU9mWWVhcjtcbiAgICAgICAgaWYgKGQgPCBmaXJzdERheU9mV2Vlaykge1xuICAgICAgICAgICAgZCArPSA3O1xuICAgICAgICB9XG5cbiAgICAgICAgd2Vla2RheSA9IHdlZWtkYXkgIT0gbnVsbCA/IDEgKiB3ZWVrZGF5IDogZmlyc3REYXlPZldlZWs7XG5cbiAgICAgICAgZGF5T2ZZZWFyID0gMSArIHdlZWsxSmFuICsgNyAqICh3ZWVrIC0gMSkgLSBkICsgd2Vla2RheTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeWVhcjogZGF5T2ZZZWFyID4gMCA/IHllYXIgOiB5ZWFyIC0gMSxcbiAgICAgICAgICAgIGRheU9mWWVhcjogZGF5T2ZZZWFyID4gMCA/ICBkYXlPZlllYXIgOiBkYXlzSW5ZZWFyKHllYXIgLSAxKSArIGRheU9mWWVhclxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldERheU9mWWVhciAoaW5wdXQpIHtcbiAgICAgICAgdmFyIGRheU9mWWVhciA9IE1hdGgucm91bmQoKHRoaXMuY2xvbmUoKS5zdGFydE9mKCdkYXknKSAtIHRoaXMuY2xvbmUoKS5zdGFydE9mKCd5ZWFyJykpIC8gODY0ZTUpICsgMTtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyBkYXlPZlllYXIgOiB0aGlzLmFkZCgoaW5wdXQgLSBkYXlPZlllYXIpLCAnZCcpO1xuICAgIH1cblxuICAgIC8vIFBpY2sgdGhlIGZpcnN0IGRlZmluZWQgb2YgdHdvIG9yIHRocmVlIGFyZ3VtZW50cy5cbiAgICBmdW5jdGlvbiBkZWZhdWx0cyhhLCBiLCBjKSB7XG4gICAgICAgIGlmIChhICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGN1cnJlbnREYXRlQXJyYXkoY29uZmlnKSB7XG4gICAgICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBpZiAoY29uZmlnLl91c2VVVEMpIHtcbiAgICAgICAgICAgIHJldHVybiBbbm93LmdldFVUQ0Z1bGxZZWFyKCksIG5vdy5nZXRVVENNb250aCgpLCBub3cuZ2V0VVRDRGF0ZSgpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW25vdy5nZXRGdWxsWWVhcigpLCBub3cuZ2V0TW9udGgoKSwgbm93LmdldERhdGUoKV07XG4gICAgfVxuXG4gICAgLy8gY29udmVydCBhbiBhcnJheSB0byBhIGRhdGUuXG4gICAgLy8gdGhlIGFycmF5IHNob3VsZCBtaXJyb3IgdGhlIHBhcmFtZXRlcnMgYmVsb3dcbiAgICAvLyBub3RlOiBhbGwgdmFsdWVzIHBhc3QgdGhlIHllYXIgYXJlIG9wdGlvbmFsIGFuZCB3aWxsIGRlZmF1bHQgdG8gdGhlIGxvd2VzdCBwb3NzaWJsZSB2YWx1ZS5cbiAgICAvLyBbeWVhciwgbW9udGgsIGRheSAsIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZF1cbiAgICBmdW5jdGlvbiBjb25maWdGcm9tQXJyYXkgKGNvbmZpZykge1xuICAgICAgICB2YXIgaSwgZGF0ZSwgaW5wdXQgPSBbXSwgY3VycmVudERhdGUsIHllYXJUb1VzZTtcblxuICAgICAgICBpZiAoY29uZmlnLl9kKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50RGF0ZSA9IGN1cnJlbnREYXRlQXJyYXkoY29uZmlnKTtcblxuICAgICAgICAvL2NvbXB1dGUgZGF5IG9mIHRoZSB5ZWFyIGZyb20gd2Vla3MgYW5kIHdlZWtkYXlzXG4gICAgICAgIGlmIChjb25maWcuX3cgJiYgY29uZmlnLl9hW0RBVEVdID09IG51bGwgJiYgY29uZmlnLl9hW01PTlRIXSA9PSBudWxsKSB7XG4gICAgICAgICAgICBkYXlPZlllYXJGcm9tV2Vla0luZm8oY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vaWYgdGhlIGRheSBvZiB0aGUgeWVhciBpcyBzZXQsIGZpZ3VyZSBvdXQgd2hhdCBpdCBpc1xuICAgICAgICBpZiAoY29uZmlnLl9kYXlPZlllYXIpIHtcbiAgICAgICAgICAgIHllYXJUb1VzZSA9IGRlZmF1bHRzKGNvbmZpZy5fYVtZRUFSXSwgY3VycmVudERhdGVbWUVBUl0pO1xuXG4gICAgICAgICAgICBpZiAoY29uZmlnLl9kYXlPZlllYXIgPiBkYXlzSW5ZZWFyKHllYXJUb1VzZSkpIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dEYXlPZlllYXIgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRlID0gY3JlYXRlVVRDRGF0ZSh5ZWFyVG9Vc2UsIDAsIGNvbmZpZy5fZGF5T2ZZZWFyKTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtNT05USF0gPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgICAgICAgICBjb25maWcuX2FbREFURV0gPSBkYXRlLmdldFVUQ0RhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlZmF1bHQgdG8gY3VycmVudCBkYXRlLlxuICAgICAgICAvLyAqIGlmIG5vIHllYXIsIG1vbnRoLCBkYXkgb2YgbW9udGggYXJlIGdpdmVuLCBkZWZhdWx0IHRvIHRvZGF5XG4gICAgICAgIC8vICogaWYgZGF5IG9mIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG1vbnRoIGFuZCB5ZWFyXG4gICAgICAgIC8vICogaWYgbW9udGggaXMgZ2l2ZW4sIGRlZmF1bHQgb25seSB5ZWFyXG4gICAgICAgIC8vICogaWYgeWVhciBpcyBnaXZlbiwgZG9uJ3QgZGVmYXVsdCBhbnl0aGluZ1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMyAmJiBjb25maWcuX2FbaV0gPT0gbnVsbDsgKytpKSB7XG4gICAgICAgICAgICBjb25maWcuX2FbaV0gPSBpbnB1dFtpXSA9IGN1cnJlbnREYXRlW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gWmVybyBvdXQgd2hhdGV2ZXIgd2FzIG5vdCBkZWZhdWx0ZWQsIGluY2x1ZGluZyB0aW1lXG4gICAgICAgIGZvciAoOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICBjb25maWcuX2FbaV0gPSBpbnB1dFtpXSA9IChjb25maWcuX2FbaV0gPT0gbnVsbCkgPyAoaSA9PT0gMiA/IDEgOiAwKSA6IGNvbmZpZy5fYVtpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGZvciAyNDowMDowMC4wMDBcbiAgICAgICAgaWYgKGNvbmZpZy5fYVtIT1VSXSA9PT0gMjQgJiZcbiAgICAgICAgICAgICAgICBjb25maWcuX2FbTUlOVVRFXSA9PT0gMCAmJlxuICAgICAgICAgICAgICAgIGNvbmZpZy5fYVtTRUNPTkRdID09PSAwICYmXG4gICAgICAgICAgICAgICAgY29uZmlnLl9hW01JTExJU0VDT05EXSA9PT0gMCkge1xuICAgICAgICAgICAgY29uZmlnLl9uZXh0RGF5ID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWcuX2QgPSAoY29uZmlnLl91c2VVVEMgPyBjcmVhdGVVVENEYXRlIDogY3JlYXRlRGF0ZSkuYXBwbHkobnVsbCwgaW5wdXQpO1xuICAgICAgICAvLyBBcHBseSB0aW1lem9uZSBvZmZzZXQgZnJvbSBpbnB1dC4gVGhlIGFjdHVhbCB1dGNPZmZzZXQgY2FuIGJlIGNoYW5nZWRcbiAgICAgICAgLy8gd2l0aCBwYXJzZVpvbmUuXG4gICAgICAgIGlmIChjb25maWcuX3R6bSAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2Quc2V0VVRDTWludXRlcyhjb25maWcuX2QuZ2V0VVRDTWludXRlcygpIC0gY29uZmlnLl90em0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fbmV4dERheSkge1xuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gMjQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXlPZlllYXJGcm9tV2Vla0luZm8oY29uZmlnKSB7XG4gICAgICAgIHZhciB3LCB3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3ksIHRlbXA7XG5cbiAgICAgICAgdyA9IGNvbmZpZy5fdztcbiAgICAgICAgaWYgKHcuR0cgIT0gbnVsbCB8fCB3LlcgIT0gbnVsbCB8fCB3LkUgIT0gbnVsbCkge1xuICAgICAgICAgICAgZG93ID0gMTtcbiAgICAgICAgICAgIGRveSA9IDQ7XG5cbiAgICAgICAgICAgIC8vIFRPRE86IFdlIG5lZWQgdG8gdGFrZSB0aGUgY3VycmVudCBpc29XZWVrWWVhciwgYnV0IHRoYXQgZGVwZW5kcyBvblxuICAgICAgICAgICAgLy8gaG93IHdlIGludGVycHJldCBub3cgKGxvY2FsLCB1dGMsIGZpeGVkIG9mZnNldCkuIFNvIGNyZWF0ZVxuICAgICAgICAgICAgLy8gYSBub3cgdmVyc2lvbiBvZiBjdXJyZW50IGNvbmZpZyAodGFrZSBsb2NhbC91dGMvb2Zmc2V0IGZsYWdzLCBhbmRcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBub3cpLlxuICAgICAgICAgICAgd2Vla1llYXIgPSBkZWZhdWx0cyh3LkdHLCBjb25maWcuX2FbWUVBUl0sIHdlZWtPZlllYXIobG9jYWxfX2NyZWF0ZUxvY2FsKCksIDEsIDQpLnllYXIpO1xuICAgICAgICAgICAgd2VlayA9IGRlZmF1bHRzKHcuVywgMSk7XG4gICAgICAgICAgICB3ZWVrZGF5ID0gZGVmYXVsdHMody5FLCAxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRvdyA9IGNvbmZpZy5fbG9jYWxlLl93ZWVrLmRvdztcbiAgICAgICAgICAgIGRveSA9IGNvbmZpZy5fbG9jYWxlLl93ZWVrLmRveTtcblxuICAgICAgICAgICAgd2Vla1llYXIgPSBkZWZhdWx0cyh3LmdnLCBjb25maWcuX2FbWUVBUl0sIHdlZWtPZlllYXIobG9jYWxfX2NyZWF0ZUxvY2FsKCksIGRvdywgZG95KS55ZWFyKTtcbiAgICAgICAgICAgIHdlZWsgPSBkZWZhdWx0cyh3LncsIDEpO1xuXG4gICAgICAgICAgICBpZiAody5kICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyB3ZWVrZGF5IC0tIGxvdyBkYXkgbnVtYmVycyBhcmUgY29uc2lkZXJlZCBuZXh0IHdlZWtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5ID0gdy5kO1xuICAgICAgICAgICAgICAgIGlmICh3ZWVrZGF5IDwgZG93KSB7XG4gICAgICAgICAgICAgICAgICAgICsrd2VlaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHcuZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gbG9jYWwgd2Vla2RheSAtLSBjb3VudGluZyBzdGFydHMgZnJvbSBiZWdpbmluZyBvZiB3ZWVrXG4gICAgICAgICAgICAgICAgd2Vla2RheSA9IHcuZSArIGRvdztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZGVmYXVsdCB0byBiZWdpbmluZyBvZiB3ZWVrXG4gICAgICAgICAgICAgICAgd2Vla2RheSA9IGRvdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0ZW1wID0gZGF5T2ZZZWFyRnJvbVdlZWtzKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3ksIGRvdyk7XG5cbiAgICAgICAgY29uZmlnLl9hW1lFQVJdID0gdGVtcC55ZWFyO1xuICAgICAgICBjb25maWcuX2RheU9mWWVhciA9IHRlbXAuZGF5T2ZZZWFyO1xuICAgIH1cblxuICAgIHV0aWxzX2hvb2tzX19ob29rcy5JU09fODYwMSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLy8gZGF0ZSBmcm9tIHN0cmluZyBhbmQgZm9ybWF0IHN0cmluZ1xuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKSB7XG4gICAgICAgIC8vIFRPRE86IE1vdmUgdGhpcyB0byBhbm90aGVyIHBhcnQgb2YgdGhlIGNyZWF0aW9uIGZsb3cgdG8gcHJldmVudCBjaXJjdWxhciBkZXBzXG4gICAgICAgIGlmIChjb25maWcuX2YgPT09IHV0aWxzX2hvb2tzX19ob29rcy5JU09fODYwMSkge1xuICAgICAgICAgICAgY29uZmlnRnJvbUlTTyhjb25maWcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnLl9hID0gW107XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVtcHR5ID0gdHJ1ZTtcblxuICAgICAgICAvLyBUaGlzIGFycmF5IGlzIHVzZWQgdG8gbWFrZSBhIERhdGUsIGVpdGhlciB3aXRoIGBuZXcgRGF0ZWAgb3IgYERhdGUuVVRDYFxuICAgICAgICB2YXIgc3RyaW5nID0gJycgKyBjb25maWcuX2ksXG4gICAgICAgICAgICBpLCBwYXJzZWRJbnB1dCwgdG9rZW5zLCB0b2tlbiwgc2tpcHBlZCxcbiAgICAgICAgICAgIHN0cmluZ0xlbmd0aCA9IHN0cmluZy5sZW5ndGgsXG4gICAgICAgICAgICB0b3RhbFBhcnNlZElucHV0TGVuZ3RoID0gMDtcblxuICAgICAgICB0b2tlbnMgPSBleHBhbmRGb3JtYXQoY29uZmlnLl9mLCBjb25maWcuX2xvY2FsZSkubWF0Y2goZm9ybWF0dGluZ1Rva2VucykgfHwgW107XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdG9rZW4gPSB0b2tlbnNbaV07XG4gICAgICAgICAgICBwYXJzZWRJbnB1dCA9IChzdHJpbmcubWF0Y2goZ2V0UGFyc2VSZWdleEZvclRva2VuKHRva2VuLCBjb25maWcpKSB8fCBbXSlbMF07XG4gICAgICAgICAgICBpZiAocGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICBza2lwcGVkID0gc3RyaW5nLnN1YnN0cigwLCBzdHJpbmcuaW5kZXhPZihwYXJzZWRJbnB1dCkpO1xuICAgICAgICAgICAgICAgIGlmIChza2lwcGVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkSW5wdXQucHVzaChza2lwcGVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nLnNsaWNlKHN0cmluZy5pbmRleE9mKHBhcnNlZElucHV0KSArIHBhcnNlZElucHV0Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgdG90YWxQYXJzZWRJbnB1dExlbmd0aCArPSBwYXJzZWRJbnB1dC5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBkb24ndCBwYXJzZSBpZiBpdCdzIG5vdCBhIGtub3duIHRva2VuXG4gICAgICAgICAgICBpZiAoZm9ybWF0VG9rZW5GdW5jdGlvbnNbdG9rZW5dKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVtcHR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRUb2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuLCBwYXJzZWRJbnB1dCwgY29uZmlnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvbmZpZy5fc3RyaWN0ICYmICFwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFkZCByZW1haW5pbmcgdW5wYXJzZWQgaW5wdXQgbGVuZ3RoIHRvIHRoZSBzdHJpbmdcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuY2hhcnNMZWZ0T3ZlciA9IHN0cmluZ0xlbmd0aCAtIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGg7XG4gICAgICAgIGlmIChzdHJpbmcubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkSW5wdXQucHVzaChzdHJpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2xlYXIgXzEyaCBmbGFnIGlmIGhvdXIgaXMgPD0gMTJcbiAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPT09IHRydWUgJiZcbiAgICAgICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPD0gMTIgJiZcbiAgICAgICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPiAwKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIGhhbmRsZSBtZXJpZGllbVxuICAgICAgICBjb25maWcuX2FbSE9VUl0gPSBtZXJpZGllbUZpeFdyYXAoY29uZmlnLl9sb2NhbGUsIGNvbmZpZy5fYVtIT1VSXSwgY29uZmlnLl9tZXJpZGllbSk7XG5cbiAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgICAgIGNoZWNrT3ZlcmZsb3coY29uZmlnKTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIG1lcmlkaWVtRml4V3JhcCAobG9jYWxlLCBob3VyLCBtZXJpZGllbSkge1xuICAgICAgICB2YXIgaXNQbTtcblxuICAgICAgICBpZiAobWVyaWRpZW0gPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gbm90aGluZyB0byBkb1xuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvY2FsZS5tZXJpZGllbUhvdXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZS5tZXJpZGllbUhvdXIoaG91ciwgbWVyaWRpZW0pO1xuICAgICAgICB9IGVsc2UgaWYgKGxvY2FsZS5pc1BNICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEZhbGxiYWNrXG4gICAgICAgICAgICBpc1BtID0gbG9jYWxlLmlzUE0obWVyaWRpZW0pO1xuICAgICAgICAgICAgaWYgKGlzUG0gJiYgaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciArPSAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNQbSAmJiBob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIG5vdCBzdXBwb3NlZCB0byBoYXBwZW5cbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZykge1xuICAgICAgICB2YXIgdGVtcENvbmZpZyxcbiAgICAgICAgICAgIGJlc3RNb21lbnQsXG5cbiAgICAgICAgICAgIHNjb3JlVG9CZWF0LFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZTtcblxuICAgICAgICBpZiAoY29uZmlnLl9mLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZEZvcm1hdCA9IHRydWU7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShOYU4pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbmZpZy5fZi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY3VycmVudFNjb3JlID0gMDtcbiAgICAgICAgICAgIHRlbXBDb25maWcgPSBjb3B5Q29uZmlnKHt9LCBjb25maWcpO1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5fdXNlVVRDICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0ZW1wQ29uZmlnLl91c2VVVEMgPSBjb25maWcuX3VzZVVUQztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRlbXBDb25maWcuX2YgPSBjb25maWcuX2ZbaV07XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KHRlbXBDb25maWcpO1xuXG4gICAgICAgICAgICBpZiAoIXZhbGlkX19pc1ZhbGlkKHRlbXBDb25maWcpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIGFueSBpbnB1dCB0aGF0IHdhcyBub3QgcGFyc2VkIGFkZCBhIHBlbmFsdHkgZm9yIHRoYXQgZm9ybWF0XG4gICAgICAgICAgICBjdXJyZW50U2NvcmUgKz0gZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLmNoYXJzTGVmdE92ZXI7XG5cbiAgICAgICAgICAgIC8vb3IgdG9rZW5zXG4gICAgICAgICAgICBjdXJyZW50U2NvcmUgKz0gZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLnVudXNlZFRva2Vucy5sZW5ndGggKiAxMDtcblxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLnNjb3JlID0gY3VycmVudFNjb3JlO1xuXG4gICAgICAgICAgICBpZiAoc2NvcmVUb0JlYXQgPT0gbnVsbCB8fCBjdXJyZW50U2NvcmUgPCBzY29yZVRvQmVhdCkge1xuICAgICAgICAgICAgICAgIHNjb3JlVG9CZWF0ID0gY3VycmVudFNjb3JlO1xuICAgICAgICAgICAgICAgIGJlc3RNb21lbnQgPSB0ZW1wQ29uZmlnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZXh0ZW5kKGNvbmZpZywgYmVzdE1vbWVudCB8fCB0ZW1wQ29uZmlnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25maWdGcm9tT2JqZWN0KGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnLl9kKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaSA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKGNvbmZpZy5faSk7XG4gICAgICAgIGNvbmZpZy5fYSA9IFtpLnllYXIsIGkubW9udGgsIGkuZGF5IHx8IGkuZGF0ZSwgaS5ob3VyLCBpLm1pbnV0ZSwgaS5zZWNvbmQsIGkubWlsbGlzZWNvbmRdO1xuXG4gICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUZyb21Db25maWcgKGNvbmZpZykge1xuICAgICAgICB2YXIgcmVzID0gbmV3IE1vbWVudChjaGVja092ZXJmbG93KHByZXBhcmVDb25maWcoY29uZmlnKSkpO1xuICAgICAgICBpZiAocmVzLl9uZXh0RGF5KSB7XG4gICAgICAgICAgICAvLyBBZGRpbmcgaXMgc21hcnQgZW5vdWdoIGFyb3VuZCBEU1RcbiAgICAgICAgICAgIHJlcy5hZGQoMSwgJ2QnKTtcbiAgICAgICAgICAgIHJlcy5fbmV4dERheSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlcGFyZUNvbmZpZyAoY29uZmlnKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faSxcbiAgICAgICAgICAgIGZvcm1hdCA9IGNvbmZpZy5fZjtcblxuICAgICAgICBjb25maWcuX2xvY2FsZSA9IGNvbmZpZy5fbG9jYWxlIHx8IGxvY2FsZV9sb2NhbGVzX19nZXRMb2NhbGUoY29uZmlnLl9sKTtcblxuICAgICAgICBpZiAoaW5wdXQgPT09IG51bGwgfHwgKGZvcm1hdCA9PT0gdW5kZWZpbmVkICYmIGlucHV0ID09PSAnJykpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWxpZF9fY3JlYXRlSW52YWxpZCh7bnVsbElucHV0OiB0cnVlfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uZmlnLl9pID0gaW5wdXQgPSBjb25maWcuX2xvY2FsZS5wcmVwYXJzZShpbnB1dCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNNb21lbnQoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IE1vbWVudChjaGVja092ZXJmbG93KGlucHV0KSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShmb3JtYXQpKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RhdGUoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBpbnB1dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21JbnB1dChjb25maWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25maWdGcm9tSW5wdXQoY29uZmlnKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faTtcbiAgICAgICAgaWYgKGlucHV0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoK2lucHV0KTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nKGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYSA9IG1hcChpbnB1dC5zbGljZSgwKSwgZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludChvYmosIDEwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mKGlucHV0KSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21PYmplY3QoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YoaW5wdXQpID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgLy8gZnJvbSBtaWxsaXNlY29uZHNcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGlucHV0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHV0aWxzX2hvb2tzX19ob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayhjb25maWcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlTG9jYWxPclVUQyAoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIGlzVVRDKSB7XG4gICAgICAgIHZhciBjID0ge307XG5cbiAgICAgICAgaWYgKHR5cGVvZihsb2NhbGUpID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHN0cmljdCA9IGxvY2FsZTtcbiAgICAgICAgICAgIGxvY2FsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBvYmplY3QgY29uc3RydWN0aW9uIG11c3QgYmUgZG9uZSB0aGlzIHdheS5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzE0MjNcbiAgICAgICAgYy5faXNBTW9tZW50T2JqZWN0ID0gdHJ1ZTtcbiAgICAgICAgYy5fdXNlVVRDID0gYy5faXNVVEMgPSBpc1VUQztcbiAgICAgICAgYy5fbCA9IGxvY2FsZTtcbiAgICAgICAgYy5faSA9IGlucHV0O1xuICAgICAgICBjLl9mID0gZm9ybWF0O1xuICAgICAgICBjLl9zdHJpY3QgPSBzdHJpY3Q7XG5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZUZyb21Db25maWcoYyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxfX2NyZWF0ZUxvY2FsIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgZmFsc2UpO1xuICAgIH1cblxuICAgIHZhciBwcm90b3R5cGVNaW4gPSBkZXByZWNhdGUoXG4gICAgICAgICAnbW9tZW50KCkubWluIGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWluIGluc3RlYWQuIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8xNTQ4JyxcbiAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICB2YXIgb3RoZXIgPSBsb2NhbF9fY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICByZXR1cm4gb3RoZXIgPCB0aGlzID8gdGhpcyA6IG90aGVyO1xuICAgICAgICAgfVxuICAgICApO1xuXG4gICAgdmFyIHByb3RvdHlwZU1heCA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudCgpLm1heCBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50Lm1heCBpbnN0ZWFkLiBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMTU0OCcsXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBvdGhlciA9IGxvY2FsX19jcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgcmV0dXJuIG90aGVyID4gdGhpcyA/IHRoaXMgOiBvdGhlcjtcbiAgICAgICAgfVxuICAgICk7XG5cbiAgICAvLyBQaWNrIGEgbW9tZW50IG0gZnJvbSBtb21lbnRzIHNvIHRoYXQgbVtmbl0ob3RoZXIpIGlzIHRydWUgZm9yIGFsbFxuICAgIC8vIG90aGVyLiBUaGlzIHJlbGllcyBvbiB0aGUgZnVuY3Rpb24gZm4gdG8gYmUgdHJhbnNpdGl2ZS5cbiAgICAvL1xuICAgIC8vIG1vbWVudHMgc2hvdWxkIGVpdGhlciBiZSBhbiBhcnJheSBvZiBtb21lbnQgb2JqZWN0cyBvciBhbiBhcnJheSwgd2hvc2VcbiAgICAvLyBmaXJzdCBlbGVtZW50IGlzIGFuIGFycmF5IG9mIG1vbWVudCBvYmplY3RzLlxuICAgIGZ1bmN0aW9uIHBpY2tCeShmbiwgbW9tZW50cykge1xuICAgICAgICB2YXIgcmVzLCBpO1xuICAgICAgICBpZiAobW9tZW50cy5sZW5ndGggPT09IDEgJiYgaXNBcnJheShtb21lbnRzWzBdKSkge1xuICAgICAgICAgICAgbW9tZW50cyA9IG1vbWVudHNbMF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtb21lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsX19jcmVhdGVMb2NhbCgpO1xuICAgICAgICB9XG4gICAgICAgIHJlcyA9IG1vbWVudHNbMF07XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBtb21lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAoIW1vbWVudHNbaV0uaXNWYWxpZCgpIHx8IG1vbWVudHNbaV1bZm5dKHJlcykpIHtcbiAgICAgICAgICAgICAgICByZXMgPSBtb21lbnRzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogVXNlIFtdLnNvcnQgaW5zdGVhZD9cbiAgICBmdW5jdGlvbiBtaW4gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgICAgICByZXR1cm4gcGlja0J5KCdpc0JlZm9yZScsIGFyZ3MpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1heCAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgICAgIHJldHVybiBwaWNrQnkoJ2lzQWZ0ZXInLCBhcmdzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBEdXJhdGlvbiAoZHVyYXRpb24pIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRJbnB1dCA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKGR1cmF0aW9uKSxcbiAgICAgICAgICAgIHllYXJzID0gbm9ybWFsaXplZElucHV0LnllYXIgfHwgMCxcbiAgICAgICAgICAgIHF1YXJ0ZXJzID0gbm9ybWFsaXplZElucHV0LnF1YXJ0ZXIgfHwgMCxcbiAgICAgICAgICAgIG1vbnRocyA9IG5vcm1hbGl6ZWRJbnB1dC5tb250aCB8fCAwLFxuICAgICAgICAgICAgd2Vla3MgPSBub3JtYWxpemVkSW5wdXQud2VlayB8fCAwLFxuICAgICAgICAgICAgZGF5cyA9IG5vcm1hbGl6ZWRJbnB1dC5kYXkgfHwgMCxcbiAgICAgICAgICAgIGhvdXJzID0gbm9ybWFsaXplZElucHV0LmhvdXIgfHwgMCxcbiAgICAgICAgICAgIG1pbnV0ZXMgPSBub3JtYWxpemVkSW5wdXQubWludXRlIHx8IDAsXG4gICAgICAgICAgICBzZWNvbmRzID0gbm9ybWFsaXplZElucHV0LnNlY29uZCB8fCAwLFxuICAgICAgICAgICAgbWlsbGlzZWNvbmRzID0gbm9ybWFsaXplZElucHV0Lm1pbGxpc2Vjb25kIHx8IDA7XG5cbiAgICAgICAgLy8gcmVwcmVzZW50YXRpb24gZm9yIGRhdGVBZGRSZW1vdmVcbiAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzID0gK21pbGxpc2Vjb25kcyArXG4gICAgICAgICAgICBzZWNvbmRzICogMWUzICsgLy8gMTAwMFxuICAgICAgICAgICAgbWludXRlcyAqIDZlNCArIC8vIDEwMDAgKiA2MFxuICAgICAgICAgICAgaG91cnMgKiAzNmU1OyAvLyAxMDAwICogNjAgKiA2MFxuICAgICAgICAvLyBCZWNhdXNlIG9mIGRhdGVBZGRSZW1vdmUgdHJlYXRzIDI0IGhvdXJzIGFzIGRpZmZlcmVudCBmcm9tIGFcbiAgICAgICAgLy8gZGF5IHdoZW4gd29ya2luZyBhcm91bmQgRFNULCB3ZSBuZWVkIHRvIHN0b3JlIHRoZW0gc2VwYXJhdGVseVxuICAgICAgICB0aGlzLl9kYXlzID0gK2RheXMgK1xuICAgICAgICAgICAgd2Vla3MgKiA3O1xuICAgICAgICAvLyBJdCBpcyBpbXBvc3NpYmxlIHRyYW5zbGF0ZSBtb250aHMgaW50byBkYXlzIHdpdGhvdXQga25vd2luZ1xuICAgICAgICAvLyB3aGljaCBtb250aHMgeW91IGFyZSBhcmUgdGFsa2luZyBhYm91dCwgc28gd2UgaGF2ZSB0byBzdG9yZVxuICAgICAgICAvLyBpdCBzZXBhcmF0ZWx5LlxuICAgICAgICB0aGlzLl9tb250aHMgPSArbW9udGhzICtcbiAgICAgICAgICAgIHF1YXJ0ZXJzICogMyArXG4gICAgICAgICAgICB5ZWFycyAqIDEyO1xuXG4gICAgICAgIHRoaXMuX2RhdGEgPSB7fTtcblxuICAgICAgICB0aGlzLl9sb2NhbGUgPSBsb2NhbGVfbG9jYWxlc19fZ2V0TG9jYWxlKCk7XG5cbiAgICAgICAgdGhpcy5fYnViYmxlKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEdXJhdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBEdXJhdGlvbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvZmZzZXQgKHRva2VuLCBzZXBhcmF0b3IpIHtcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4odG9rZW4sIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLnV0Y09mZnNldCgpO1xuICAgICAgICAgICAgdmFyIHNpZ24gPSAnKyc7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCkge1xuICAgICAgICAgICAgICAgIG9mZnNldCA9IC1vZmZzZXQ7XG4gICAgICAgICAgICAgICAgc2lnbiA9ICctJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzaWduICsgemVyb0ZpbGwofn4ob2Zmc2V0IC8gNjApLCAyKSArIHNlcGFyYXRvciArIHplcm9GaWxsKH5+KG9mZnNldCkgJSA2MCwgMik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9mZnNldCgnWicsICc6Jyk7XG4gICAgb2Zmc2V0KCdaWicsICcnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1onLCAgbWF0Y2hPZmZzZXQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1paJywgbWF0Y2hPZmZzZXQpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydaJywgJ1paJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX3VzZVVUQyA9IHRydWU7XG4gICAgICAgIGNvbmZpZy5fdHptID0gb2Zmc2V0RnJvbVN0cmluZyhpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICAvLyB0aW1lem9uZSBjaHVua2VyXG4gICAgLy8gJysxMDowMCcgPiBbJzEwJywgICcwMCddXG4gICAgLy8gJy0xNTMwJyAgPiBbJy0xNScsICczMCddXG4gICAgdmFyIGNodW5rT2Zmc2V0ID0gLyhbXFwrXFwtXXxcXGRcXGQpL2dpO1xuXG4gICAgZnVuY3Rpb24gb2Zmc2V0RnJvbVN0cmluZyhzdHJpbmcpIHtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSAoKHN0cmluZyB8fCAnJykubWF0Y2gobWF0Y2hPZmZzZXQpIHx8IFtdKTtcbiAgICAgICAgdmFyIGNodW5rICAgPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0gfHwgW107XG4gICAgICAgIHZhciBwYXJ0cyAgID0gKGNodW5rICsgJycpLm1hdGNoKGNodW5rT2Zmc2V0KSB8fCBbJy0nLCAwLCAwXTtcbiAgICAgICAgdmFyIG1pbnV0ZXMgPSArKHBhcnRzWzFdICogNjApICsgdG9JbnQocGFydHNbMl0pO1xuXG4gICAgICAgIHJldHVybiBwYXJ0c1swXSA9PT0gJysnID8gbWludXRlcyA6IC1taW51dGVzO1xuICAgIH1cblxuICAgIC8vIFJldHVybiBhIG1vbWVudCBmcm9tIGlucHV0LCB0aGF0IGlzIGxvY2FsL3V0Yy96b25lIGVxdWl2YWxlbnQgdG8gbW9kZWwuXG4gICAgZnVuY3Rpb24gY2xvbmVXaXRoT2Zmc2V0KGlucHV0LCBtb2RlbCkge1xuICAgICAgICB2YXIgcmVzLCBkaWZmO1xuICAgICAgICBpZiAobW9kZWwuX2lzVVRDKSB7XG4gICAgICAgICAgICByZXMgPSBtb2RlbC5jbG9uZSgpO1xuICAgICAgICAgICAgZGlmZiA9IChpc01vbWVudChpbnB1dCkgfHwgaXNEYXRlKGlucHV0KSA/ICtpbnB1dCA6ICtsb2NhbF9fY3JlYXRlTG9jYWwoaW5wdXQpKSAtICgrcmVzKTtcbiAgICAgICAgICAgIC8vIFVzZSBsb3ctbGV2ZWwgYXBpLCBiZWNhdXNlIHRoaXMgZm4gaXMgbG93LWxldmVsIGFwaS5cbiAgICAgICAgICAgIHJlcy5fZC5zZXRUaW1lKCtyZXMuX2QgKyBkaWZmKTtcbiAgICAgICAgICAgIHV0aWxzX2hvb2tzX19ob29rcy51cGRhdGVPZmZzZXQocmVzLCBmYWxzZSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsX19jcmVhdGVMb2NhbChpbnB1dCkubG9jYWwoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldERhdGVPZmZzZXQgKG0pIHtcbiAgICAgICAgLy8gT24gRmlyZWZveC4yNCBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgYSBmbG9hdGluZyBwb2ludC5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvcHVsbC8xODcxXG4gICAgICAgIHJldHVybiAtTWF0aC5yb3VuZChtLl9kLmdldFRpbWV6b25lT2Zmc2V0KCkgLyAxNSkgKiAxNTtcbiAgICB9XG5cbiAgICAvLyBIT09LU1xuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB3aGVuZXZlciBhIG1vbWVudCBpcyBtdXRhdGVkLlxuICAgIC8vIEl0IGlzIGludGVuZGVkIHRvIGtlZXAgdGhlIG9mZnNldCBpbiBzeW5jIHdpdGggdGhlIHRpbWV6b25lLlxuICAgIHV0aWxzX2hvb2tzX19ob29rcy51cGRhdGVPZmZzZXQgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIC8vIGtlZXBMb2NhbFRpbWUgPSB0cnVlIG1lYW5zIG9ubHkgY2hhbmdlIHRoZSB0aW1lem9uZSwgd2l0aG91dFxuICAgIC8vIGFmZmVjdGluZyB0aGUgbG9jYWwgaG91ci4gU28gNTozMToyNiArMDMwMCAtLVt1dGNPZmZzZXQoMiwgdHJ1ZSldLS0+XG4gICAgLy8gNTozMToyNiArMDIwMCBJdCBpcyBwb3NzaWJsZSB0aGF0IDU6MzE6MjYgZG9lc24ndCBleGlzdCB3aXRoIG9mZnNldFxuICAgIC8vICswMjAwLCBzbyB3ZSBhZGp1c3QgdGhlIHRpbWUgYXMgbmVlZGVkLCB0byBiZSB2YWxpZC5cbiAgICAvL1xuICAgIC8vIEtlZXBpbmcgdGhlIHRpbWUgYWN0dWFsbHkgYWRkcy9zdWJ0cmFjdHMgKG9uZSBob3VyKVxuICAgIC8vIGZyb20gdGhlIGFjdHVhbCByZXByZXNlbnRlZCB0aW1lLiBUaGF0IGlzIHdoeSB3ZSBjYWxsIHVwZGF0ZU9mZnNldFxuICAgIC8vIGEgc2Vjb25kIHRpbWUuIEluIGNhc2UgaXQgd2FudHMgdXMgdG8gY2hhbmdlIHRoZSBvZmZzZXQgYWdhaW5cbiAgICAvLyBfY2hhbmdlSW5Qcm9ncmVzcyA9PSB0cnVlIGNhc2UsIHRoZW4gd2UgaGF2ZSB0byBhZGp1c3QsIGJlY2F1c2VcbiAgICAvLyB0aGVyZSBpcyBubyBzdWNoIHRpbWUgaW4gdGhlIGdpdmVuIHRpbWV6b25lLlxuICAgIGZ1bmN0aW9uIGdldFNldE9mZnNldCAoaW5wdXQsIGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMuX29mZnNldCB8fCAwLFxuICAgICAgICAgICAgbG9jYWxBZGp1c3Q7XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gb2Zmc2V0RnJvbVN0cmluZyhpbnB1dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMoaW5wdXQpIDwgMTYpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IGlucHV0ICogNjA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2lzVVRDICYmIGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgICAgICAgICBsb2NhbEFkanVzdCA9IGdldERhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9vZmZzZXQgPSBpbnB1dDtcbiAgICAgICAgICAgIHRoaXMuX2lzVVRDID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChsb2NhbEFkanVzdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGQobG9jYWxBZGp1c3QsICdtJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob2Zmc2V0ICE9PSBpbnB1dCkge1xuICAgICAgICAgICAgICAgIGlmICgha2VlcExvY2FsVGltZSB8fCB0aGlzLl9jaGFuZ2VJblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZF9zdWJ0cmFjdF9fYWRkU3VidHJhY3QodGhpcywgY3JlYXRlX19jcmVhdGVEdXJhdGlvbihpbnB1dCAtIG9mZnNldCwgJ20nKSwgMSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHV0aWxzX2hvb2tzX19ob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gb2Zmc2V0IDogZ2V0RGF0ZU9mZnNldCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldFpvbmUgKGlucHV0LCBrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gLWlucHV0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldChpbnB1dCwga2VlcExvY2FsVGltZSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIC10aGlzLnV0Y09mZnNldCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T2Zmc2V0VG9VVEMgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXRjT2Zmc2V0KDAsIGtlZXBMb2NhbFRpbWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE9mZnNldFRvTG9jYWwgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzVVRDKSB7XG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgwLCBrZWVwTG9jYWxUaW1lKTtcbiAgICAgICAgICAgIHRoaXMuX2lzVVRDID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmIChrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWJ0cmFjdChnZXREYXRlT2Zmc2V0KHRoaXMpLCAnbScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE9mZnNldFRvUGFyc2VkT2Zmc2V0ICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3R6bSkge1xuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQodGhpcy5fdHptKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5faSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KG9mZnNldEZyb21TdHJpbmcodGhpcy5faSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc0FsaWduZWRIb3VyT2Zmc2V0IChpbnB1dCkge1xuICAgICAgICBpbnB1dCA9IGlucHV0ID8gbG9jYWxfX2NyZWF0ZUxvY2FsKGlucHV0KS51dGNPZmZzZXQoKSA6IDA7XG5cbiAgICAgICAgcmV0dXJuICh0aGlzLnV0Y09mZnNldCgpIC0gaW5wdXQpICUgNjAgPT09IDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEYXlsaWdodFNhdmluZ1RpbWUgKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA+IHRoaXMuY2xvbmUoKS5tb250aCgwKS51dGNPZmZzZXQoKSB8fFxuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA+IHRoaXMuY2xvbmUoKS5tb250aCg1KS51dGNPZmZzZXQoKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZCAoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5faXNEU1RTaGlmdGVkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzRFNUU2hpZnRlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjID0ge307XG5cbiAgICAgICAgY29weUNvbmZpZyhjLCB0aGlzKTtcbiAgICAgICAgYyA9IHByZXBhcmVDb25maWcoYyk7XG5cbiAgICAgICAgaWYgKGMuX2EpIHtcbiAgICAgICAgICAgIHZhciBvdGhlciA9IGMuX2lzVVRDID8gY3JlYXRlX3V0Y19fY3JlYXRlVVRDKGMuX2EpIDogbG9jYWxfX2NyZWF0ZUxvY2FsKGMuX2EpO1xuICAgICAgICAgICAgdGhpcy5faXNEU1RTaGlmdGVkID0gdGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICAgICBjb21wYXJlQXJyYXlzKGMuX2EsIG90aGVyLnRvQXJyYXkoKSkgPiAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5faXNEU1RTaGlmdGVkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5faXNEU1RTaGlmdGVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTG9jYWwgKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuX2lzVVRDO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVXRjT2Zmc2V0ICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVXRjICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDICYmIHRoaXMuX29mZnNldCA9PT0gMDtcbiAgICB9XG5cbiAgICB2YXIgYXNwTmV0UmVnZXggPSAvKFxcLSk/KD86KFxcZCopXFwuKT8oXFxkKylcXDooXFxkKykoPzpcXDooXFxkKylcXC4/KFxcZHszfSk/KT8vO1xuXG4gICAgLy8gZnJvbSBodHRwOi8vZG9jcy5jbG9zdXJlLWxpYnJhcnkuZ29vZ2xlY29kZS5jb20vZ2l0L2Nsb3N1cmVfZ29vZ19kYXRlX2RhdGUuanMuc291cmNlLmh0bWxcbiAgICAvLyBzb21ld2hhdCBtb3JlIGluIGxpbmUgd2l0aCA0LjQuMy4yIDIwMDQgc3BlYywgYnV0IGFsbG93cyBkZWNpbWFsIGFueXdoZXJlXG4gICAgdmFyIGNyZWF0ZV9faXNvUmVnZXggPSAvXigtKT9QKD86KD86KFswLTksLl0qKVkpPyg/OihbMC05LC5dKilNKT8oPzooWzAtOSwuXSopRCk/KD86VCg/OihbMC05LC5dKilIKT8oPzooWzAtOSwuXSopTSk/KD86KFswLTksLl0qKVMpPyk/fChbMC05LC5dKilXKSQvO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlX19jcmVhdGVEdXJhdGlvbiAoaW5wdXQsIGtleSkge1xuICAgICAgICB2YXIgZHVyYXRpb24gPSBpbnB1dCxcbiAgICAgICAgICAgIC8vIG1hdGNoaW5nIGFnYWluc3QgcmVnZXhwIGlzIGV4cGVuc2l2ZSwgZG8gaXQgb24gZGVtYW5kXG4gICAgICAgICAgICBtYXRjaCA9IG51bGwsXG4gICAgICAgICAgICBzaWduLFxuICAgICAgICAgICAgcmV0LFxuICAgICAgICAgICAgZGlmZlJlcztcblxuICAgICAgICBpZiAoaXNEdXJhdGlvbihpbnB1dCkpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgICAgIG1zIDogaW5wdXQuX21pbGxpc2Vjb25kcyxcbiAgICAgICAgICAgICAgICBkICA6IGlucHV0Ll9kYXlzLFxuICAgICAgICAgICAgICAgIE0gIDogaW5wdXQuX21vbnRoc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uW2tleV0gPSBpbnB1dDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb24ubWlsbGlzZWNvbmRzID0gaW5wdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoISEobWF0Y2ggPSBhc3BOZXRSZWdleC5leGVjKGlucHV0KSkpIHtcbiAgICAgICAgICAgIHNpZ24gPSAobWF0Y2hbMV0gPT09ICctJykgPyAtMSA6IDE7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB5ICA6IDAsXG4gICAgICAgICAgICAgICAgZCAgOiB0b0ludChtYXRjaFtEQVRFXSkgICAgICAgICogc2lnbixcbiAgICAgICAgICAgICAgICBoICA6IHRvSW50KG1hdGNoW0hPVVJdKSAgICAgICAgKiBzaWduLFxuICAgICAgICAgICAgICAgIG0gIDogdG9JbnQobWF0Y2hbTUlOVVRFXSkgICAgICAqIHNpZ24sXG4gICAgICAgICAgICAgICAgcyAgOiB0b0ludChtYXRjaFtTRUNPTkRdKSAgICAgICogc2lnbixcbiAgICAgICAgICAgICAgICBtcyA6IHRvSW50KG1hdGNoW01JTExJU0VDT05EXSkgKiBzaWduXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKCEhKG1hdGNoID0gY3JlYXRlX19pc29SZWdleC5leGVjKGlucHV0KSkpIHtcbiAgICAgICAgICAgIHNpZ24gPSAobWF0Y2hbMV0gPT09ICctJykgPyAtMSA6IDE7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB5IDogcGFyc2VJc28obWF0Y2hbMl0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIE0gOiBwYXJzZUlzbyhtYXRjaFszXSwgc2lnbiksXG4gICAgICAgICAgICAgICAgZCA6IHBhcnNlSXNvKG1hdGNoWzRdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBoIDogcGFyc2VJc28obWF0Y2hbNV0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIG0gOiBwYXJzZUlzbyhtYXRjaFs2XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgcyA6IHBhcnNlSXNvKG1hdGNoWzddLCBzaWduKSxcbiAgICAgICAgICAgICAgICB3IDogcGFyc2VJc28obWF0Y2hbOF0sIHNpZ24pXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKGR1cmF0aW9uID09IG51bGwpIHsvLyBjaGVja3MgZm9yIG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkdXJhdGlvbiA9PT0gJ29iamVjdCcgJiYgKCdmcm9tJyBpbiBkdXJhdGlvbiB8fCAndG8nIGluIGR1cmF0aW9uKSkge1xuICAgICAgICAgICAgZGlmZlJlcyA9IG1vbWVudHNEaWZmZXJlbmNlKGxvY2FsX19jcmVhdGVMb2NhbChkdXJhdGlvbi5mcm9tKSwgbG9jYWxfX2NyZWF0ZUxvY2FsKGR1cmF0aW9uLnRvKSk7XG5cbiAgICAgICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgICAgICBkdXJhdGlvbi5tcyA9IGRpZmZSZXMubWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgZHVyYXRpb24uTSA9IGRpZmZSZXMubW9udGhzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0ID0gbmV3IER1cmF0aW9uKGR1cmF0aW9uKTtcblxuICAgICAgICBpZiAoaXNEdXJhdGlvbihpbnB1dCkgJiYgaGFzT3duUHJvcChpbnB1dCwgJ19sb2NhbGUnKSkge1xuICAgICAgICAgICAgcmV0Ll9sb2NhbGUgPSBpbnB1dC5fbG9jYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICBjcmVhdGVfX2NyZWF0ZUR1cmF0aW9uLmZuID0gRHVyYXRpb24ucHJvdG90eXBlO1xuXG4gICAgZnVuY3Rpb24gcGFyc2VJc28gKGlucCwgc2lnbikge1xuICAgICAgICAvLyBXZSdkIG5vcm1hbGx5IHVzZSB+fmlucCBmb3IgdGhpcywgYnV0IHVuZm9ydHVuYXRlbHkgaXQgYWxzb1xuICAgICAgICAvLyBjb252ZXJ0cyBmbG9hdHMgdG8gaW50cy5cbiAgICAgICAgLy8gaW5wIG1heSBiZSB1bmRlZmluZWQsIHNvIGNhcmVmdWwgY2FsbGluZyByZXBsYWNlIG9uIGl0LlxuICAgICAgICB2YXIgcmVzID0gaW5wICYmIHBhcnNlRmxvYXQoaW5wLnJlcGxhY2UoJywnLCAnLicpKTtcbiAgICAgICAgLy8gYXBwbHkgc2lnbiB3aGlsZSB3ZSdyZSBhdCBpdFxuICAgICAgICByZXR1cm4gKGlzTmFOKHJlcykgPyAwIDogcmVzKSAqIHNpZ247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzID0ge21pbGxpc2Vjb25kczogMCwgbW9udGhzOiAwfTtcblxuICAgICAgICByZXMubW9udGhzID0gb3RoZXIubW9udGgoKSAtIGJhc2UubW9udGgoKSArXG4gICAgICAgICAgICAob3RoZXIueWVhcigpIC0gYmFzZS55ZWFyKCkpICogMTI7XG4gICAgICAgIGlmIChiYXNlLmNsb25lKCkuYWRkKHJlcy5tb250aHMsICdNJykuaXNBZnRlcihvdGhlcikpIHtcbiAgICAgICAgICAgIC0tcmVzLm1vbnRocztcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcy5taWxsaXNlY29uZHMgPSArb3RoZXIgLSArKGJhc2UuY2xvbmUoKS5hZGQocmVzLm1vbnRocywgJ00nKSk7XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzO1xuICAgICAgICBvdGhlciA9IGNsb25lV2l0aE9mZnNldChvdGhlciwgYmFzZSk7XG4gICAgICAgIGlmIChiYXNlLmlzQmVmb3JlKG90aGVyKSkge1xuICAgICAgICAgICAgcmVzID0gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXMgPSBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKG90aGVyLCBiYXNlKTtcbiAgICAgICAgICAgIHJlcy5taWxsaXNlY29uZHMgPSAtcmVzLm1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgIHJlcy5tb250aHMgPSAtcmVzLm1vbnRocztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlQWRkZXIoZGlyZWN0aW9uLCBuYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHZhciBkdXIsIHRtcDtcbiAgICAgICAgICAgIC8vaW52ZXJ0IHRoZSBhcmd1bWVudHMsIGJ1dCBjb21wbGFpbiBhYm91dCBpdFxuICAgICAgICAgICAgaWYgKHBlcmlvZCAhPT0gbnVsbCAmJiAhaXNOYU4oK3BlcmlvZCkpIHtcbiAgICAgICAgICAgICAgICBkZXByZWNhdGVTaW1wbGUobmFtZSwgJ21vbWVudCgpLicgKyBuYW1lICArICcocGVyaW9kLCBudW1iZXIpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgbW9tZW50KCkuJyArIG5hbWUgKyAnKG51bWJlciwgcGVyaW9kKS4nKTtcbiAgICAgICAgICAgICAgICB0bXAgPSB2YWw7IHZhbCA9IHBlcmlvZDsgcGVyaW9kID0gdG1wO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YWwgPSB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyA/ICt2YWwgOiB2YWw7XG4gICAgICAgICAgICBkdXIgPSBjcmVhdGVfX2NyZWF0ZUR1cmF0aW9uKHZhbCwgcGVyaW9kKTtcbiAgICAgICAgICAgIGFkZF9zdWJ0cmFjdF9fYWRkU3VidHJhY3QodGhpcywgZHVyLCBkaXJlY3Rpb24pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkX3N1YnRyYWN0X19hZGRTdWJ0cmFjdCAobW9tLCBkdXJhdGlvbiwgaXNBZGRpbmcsIHVwZGF0ZU9mZnNldCkge1xuICAgICAgICB2YXIgbWlsbGlzZWNvbmRzID0gZHVyYXRpb24uX21pbGxpc2Vjb25kcyxcbiAgICAgICAgICAgIGRheXMgPSBkdXJhdGlvbi5fZGF5cyxcbiAgICAgICAgICAgIG1vbnRocyA9IGR1cmF0aW9uLl9tb250aHM7XG4gICAgICAgIHVwZGF0ZU9mZnNldCA9IHVwZGF0ZU9mZnNldCA9PSBudWxsID8gdHJ1ZSA6IHVwZGF0ZU9mZnNldDtcblxuICAgICAgICBpZiAobWlsbGlzZWNvbmRzKSB7XG4gICAgICAgICAgICBtb20uX2Quc2V0VGltZSgrbW9tLl9kICsgbWlsbGlzZWNvbmRzICogaXNBZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXlzKSB7XG4gICAgICAgICAgICBnZXRfc2V0X19zZXQobW9tLCAnRGF0ZScsIGdldF9zZXRfX2dldChtb20sICdEYXRlJykgKyBkYXlzICogaXNBZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtb250aHMpIHtcbiAgICAgICAgICAgIHNldE1vbnRoKG1vbSwgZ2V0X3NldF9fZ2V0KG1vbSwgJ01vbnRoJykgKyBtb250aHMgKiBpc0FkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVwZGF0ZU9mZnNldCkge1xuICAgICAgICAgICAgdXRpbHNfaG9va3NfX2hvb2tzLnVwZGF0ZU9mZnNldChtb20sIGRheXMgfHwgbW9udGhzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBhZGRfc3VidHJhY3RfX2FkZCAgICAgID0gY3JlYXRlQWRkZXIoMSwgJ2FkZCcpO1xuICAgIHZhciBhZGRfc3VidHJhY3RfX3N1YnRyYWN0ID0gY3JlYXRlQWRkZXIoLTEsICdzdWJ0cmFjdCcpO1xuXG4gICAgZnVuY3Rpb24gbW9tZW50X2NhbGVuZGFyX19jYWxlbmRhciAodGltZSwgZm9ybWF0cykge1xuICAgICAgICAvLyBXZSB3YW50IHRvIGNvbXBhcmUgdGhlIHN0YXJ0IG9mIHRvZGF5LCB2cyB0aGlzLlxuICAgICAgICAvLyBHZXR0aW5nIHN0YXJ0LW9mLXRvZGF5IGRlcGVuZHMgb24gd2hldGhlciB3ZSdyZSBsb2NhbC91dGMvb2Zmc2V0IG9yIG5vdC5cbiAgICAgICAgdmFyIG5vdyA9IHRpbWUgfHwgbG9jYWxfX2NyZWF0ZUxvY2FsKCksXG4gICAgICAgICAgICBzb2QgPSBjbG9uZVdpdGhPZmZzZXQobm93LCB0aGlzKS5zdGFydE9mKCdkYXknKSxcbiAgICAgICAgICAgIGRpZmYgPSB0aGlzLmRpZmYoc29kLCAnZGF5cycsIHRydWUpLFxuICAgICAgICAgICAgZm9ybWF0ID0gZGlmZiA8IC02ID8gJ3NhbWVFbHNlJyA6XG4gICAgICAgICAgICAgICAgZGlmZiA8IC0xID8gJ2xhc3RXZWVrJyA6XG4gICAgICAgICAgICAgICAgZGlmZiA8IDAgPyAnbGFzdERheScgOlxuICAgICAgICAgICAgICAgIGRpZmYgPCAxID8gJ3NhbWVEYXknIDpcbiAgICAgICAgICAgICAgICBkaWZmIDwgMiA/ICduZXh0RGF5JyA6XG4gICAgICAgICAgICAgICAgZGlmZiA8IDcgPyAnbmV4dFdlZWsnIDogJ3NhbWVFbHNlJztcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0KGZvcm1hdHMgJiYgZm9ybWF0c1tmb3JtYXRdIHx8IHRoaXMubG9jYWxlRGF0YSgpLmNhbGVuZGFyKGZvcm1hdCwgdGhpcywgbG9jYWxfX2NyZWF0ZUxvY2FsKG5vdykpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbG9uZSAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTW9tZW50KHRoaXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQWZ0ZXIgKGlucHV0LCB1bml0cykge1xuICAgICAgICB2YXIgaW5wdXRNcztcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh0eXBlb2YgdW5pdHMgIT09ICd1bmRlZmluZWQnID8gdW5pdHMgOiAnbWlsbGlzZWNvbmQnKTtcbiAgICAgICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgICAgICBpbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogbG9jYWxfX2NyZWF0ZUxvY2FsKGlucHV0KTtcbiAgICAgICAgICAgIHJldHVybiArdGhpcyA+ICtpbnB1dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlucHV0TXMgPSBpc01vbWVudChpbnB1dCkgPyAraW5wdXQgOiArbG9jYWxfX2NyZWF0ZUxvY2FsKGlucHV0KTtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dE1zIDwgK3RoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQmVmb3JlIChpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgdmFyIGlucHV0TXM7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModHlwZW9mIHVuaXRzICE9PSAndW5kZWZpbmVkJyA/IHVuaXRzIDogJ21pbGxpc2Vjb25kJyk7XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgaW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGxvY2FsX19jcmVhdGVMb2NhbChpbnB1dCk7XG4gICAgICAgICAgICByZXR1cm4gK3RoaXMgPCAraW5wdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnB1dE1zID0gaXNNb21lbnQoaW5wdXQpID8gK2lucHV0IDogK2xvY2FsX19jcmVhdGVMb2NhbChpbnB1dCk7XG4gICAgICAgICAgICByZXR1cm4gK3RoaXMuY2xvbmUoKS5lbmRPZih1bml0cykgPCBpbnB1dE1zO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNCZXR3ZWVuIChmcm9tLCB0bywgdW5pdHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNBZnRlcihmcm9tLCB1bml0cykgJiYgdGhpcy5pc0JlZm9yZSh0bywgdW5pdHMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2FtZSAoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHZhciBpbnB1dE1zO1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzIHx8ICdtaWxsaXNlY29uZCcpO1xuICAgICAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgICAgIGlucHV0ID0gaXNNb21lbnQoaW5wdXQpID8gaW5wdXQgOiBsb2NhbF9fY3JlYXRlTG9jYWwoaW5wdXQpO1xuICAgICAgICAgICAgcmV0dXJuICt0aGlzID09PSAraW5wdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnB1dE1zID0gK2xvY2FsX19jcmVhdGVMb2NhbChpbnB1dCk7XG4gICAgICAgICAgICByZXR1cm4gKyh0aGlzLmNsb25lKCkuc3RhcnRPZih1bml0cykpIDw9IGlucHV0TXMgJiYgaW5wdXRNcyA8PSArKHRoaXMuY2xvbmUoKS5lbmRPZih1bml0cykpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGlmZiAoaW5wdXQsIHVuaXRzLCBhc0Zsb2F0KSB7XG4gICAgICAgIHZhciB0aGF0ID0gY2xvbmVXaXRoT2Zmc2V0KGlucHV0LCB0aGlzKSxcbiAgICAgICAgICAgIHpvbmVEZWx0YSA9ICh0aGF0LnV0Y09mZnNldCgpIC0gdGhpcy51dGNPZmZzZXQoKSkgKiA2ZTQsXG4gICAgICAgICAgICBkZWx0YSwgb3V0cHV0O1xuXG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuXG4gICAgICAgIGlmICh1bml0cyA9PT0gJ3llYXInIHx8IHVuaXRzID09PSAnbW9udGgnIHx8IHVuaXRzID09PSAncXVhcnRlcicpIHtcbiAgICAgICAgICAgIG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KTtcbiAgICAgICAgICAgIGlmICh1bml0cyA9PT0gJ3F1YXJ0ZXInKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0IC8gMztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodW5pdHMgPT09ICd5ZWFyJykge1xuICAgICAgICAgICAgICAgIG91dHB1dCA9IG91dHB1dCAvIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVsdGEgPSB0aGlzIC0gdGhhdDtcbiAgICAgICAgICAgIG91dHB1dCA9IHVuaXRzID09PSAnc2Vjb25kJyA/IGRlbHRhIC8gMWUzIDogLy8gMTAwMFxuICAgICAgICAgICAgICAgIHVuaXRzID09PSAnbWludXRlJyA/IGRlbHRhIC8gNmU0IDogLy8gMTAwMCAqIDYwXG4gICAgICAgICAgICAgICAgdW5pdHMgPT09ICdob3VyJyA/IGRlbHRhIC8gMzZlNSA6IC8vIDEwMDAgKiA2MCAqIDYwXG4gICAgICAgICAgICAgICAgdW5pdHMgPT09ICdkYXknID8gKGRlbHRhIC0gem9uZURlbHRhKSAvIDg2NGU1IDogLy8gMTAwMCAqIDYwICogNjAgKiAyNCwgbmVnYXRlIGRzdFxuICAgICAgICAgICAgICAgIHVuaXRzID09PSAnd2VlaycgPyAoZGVsdGEgLSB6b25lRGVsdGEpIC8gNjA0OGU1IDogLy8gMTAwMCAqIDYwICogNjAgKiAyNCAqIDcsIG5lZ2F0ZSBkc3RcbiAgICAgICAgICAgICAgICBkZWx0YTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXNGbG9hdCA/IG91dHB1dCA6IGFic0Zsb29yKG91dHB1dCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9udGhEaWZmIChhLCBiKSB7XG4gICAgICAgIC8vIGRpZmZlcmVuY2UgaW4gbW9udGhzXG4gICAgICAgIHZhciB3aG9sZU1vbnRoRGlmZiA9ICgoYi55ZWFyKCkgLSBhLnllYXIoKSkgKiAxMikgKyAoYi5tb250aCgpIC0gYS5tb250aCgpKSxcbiAgICAgICAgICAgIC8vIGIgaXMgaW4gKGFuY2hvciAtIDEgbW9udGgsIGFuY2hvciArIDEgbW9udGgpXG4gICAgICAgICAgICBhbmNob3IgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmLCAnbW9udGhzJyksXG4gICAgICAgICAgICBhbmNob3IyLCBhZGp1c3Q7XG5cbiAgICAgICAgaWYgKGIgLSBhbmNob3IgPCAwKSB7XG4gICAgICAgICAgICBhbmNob3IyID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiAtIDEsICdtb250aHMnKTtcbiAgICAgICAgICAgIC8vIGxpbmVhciBhY3Jvc3MgdGhlIG1vbnRoXG4gICAgICAgICAgICBhZGp1c3QgPSAoYiAtIGFuY2hvcikgLyAoYW5jaG9yIC0gYW5jaG9yMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbmNob3IyID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiArIDEsICdtb250aHMnKTtcbiAgICAgICAgICAgIC8vIGxpbmVhciBhY3Jvc3MgdGhlIG1vbnRoXG4gICAgICAgICAgICBhZGp1c3QgPSAoYiAtIGFuY2hvcikgLyAoYW5jaG9yMiAtIGFuY2hvcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gLSh3aG9sZU1vbnRoRGlmZiArIGFkanVzdCk7XG4gICAgfVxuXG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLmRlZmF1bHRGb3JtYXQgPSAnWVlZWS1NTS1ERFRISDptbTpzc1onO1xuXG4gICAgZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmxvY2FsZSgnZW4nKS5mb3JtYXQoJ2RkZCBNTU0gREQgWVlZWSBISDptbTpzcyBbR01UXVpaJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9tZW50X2Zvcm1hdF9fdG9JU09TdHJpbmcgKCkge1xuICAgICAgICB2YXIgbSA9IHRoaXMuY2xvbmUoKS51dGMoKTtcbiAgICAgICAgaWYgKDAgPCBtLnllYXIoKSAmJiBtLnllYXIoKSA8PSA5OTk5KSB7XG4gICAgICAgICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgLy8gbmF0aXZlIGltcGxlbWVudGF0aW9uIGlzIH41MHggZmFzdGVyLCB1c2UgaXQgd2hlbiB3ZSBjYW5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b0RhdGUoKS50b0lTT1N0cmluZygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0TW9tZW50KG0sICdZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0TW9tZW50KG0sICdZWVlZWVktTU0tRERbVF1ISDptbTpzcy5TU1NbWl0nKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdCAoaW5wdXRTdHJpbmcpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IGZvcm1hdE1vbWVudCh0aGlzLCBpbnB1dFN0cmluZyB8fCB1dGlsc19ob29rc19faG9va3MuZGVmYXVsdEZvcm1hdCk7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5wb3N0Zm9ybWF0KG91dHB1dCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZnJvbSAodGltZSwgd2l0aG91dFN1ZmZpeCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3JlYXRlX19jcmVhdGVEdXJhdGlvbih7dG86IHRoaXMsIGZyb206IHRpbWV9KS5sb2NhbGUodGhpcy5sb2NhbGUoKSkuaHVtYW5pemUoIXdpdGhvdXRTdWZmaXgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZyb21Ob3cgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbShsb2NhbF9fY3JlYXRlTG9jYWwoKSwgd2l0aG91dFN1ZmZpeCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG8gKHRpbWUsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNyZWF0ZV9fY3JlYXRlRHVyYXRpb24oe2Zyb206IHRoaXMsIHRvOiB0aW1lfSkubG9jYWxlKHRoaXMubG9jYWxlKCkpLmh1bWFuaXplKCF3aXRob3V0U3VmZml4KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b05vdyAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICByZXR1cm4gdGhpcy50byhsb2NhbF9fY3JlYXRlTG9jYWwoKSwgd2l0aG91dFN1ZmZpeCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlIChrZXkpIHtcbiAgICAgICAgdmFyIG5ld0xvY2FsZURhdGE7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxlLl9hYmJyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3TG9jYWxlRGF0YSA9IGxvY2FsZV9sb2NhbGVzX19nZXRMb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIGlmIChuZXdMb2NhbGVEYXRhICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2NhbGUgPSBuZXdMb2NhbGVEYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbGFuZyA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudCgpLmxhbmcoKSBpcyBkZXByZWNhdGVkLiBJbnN0ZWFkLCB1c2UgbW9tZW50KCkubG9jYWxlRGF0YSgpIHRvIGdldCB0aGUgbGFuZ3VhZ2UgY29uZmlndXJhdGlvbi4gVXNlIG1vbWVudCgpLmxvY2FsZSgpIHRvIGNoYW5nZSBsYW5ndWFnZXMuJyxcbiAgICAgICAgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICk7XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVEYXRhICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2FsZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdGFydE9mICh1bml0cykge1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgLy8gdGhlIGZvbGxvd2luZyBzd2l0Y2ggaW50ZW50aW9uYWxseSBvbWl0cyBicmVhayBrZXl3b3Jkc1xuICAgICAgICAvLyB0byB1dGlsaXplIGZhbGxpbmcgdGhyb3VnaCB0aGUgY2FzZXMuXG4gICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICB0aGlzLm1vbnRoKDApO1xuICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlICdxdWFydGVyJzpcbiAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgdGhpcy5kYXRlKDEpO1xuICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgY2FzZSAnaXNvV2Vlayc6XG4gICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICB0aGlzLmhvdXJzKDApO1xuICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgIHRoaXMubWludXRlcygwKTtcbiAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICAgIHRoaXMuc2Vjb25kcygwKTtcbiAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICAgIHRoaXMubWlsbGlzZWNvbmRzKDApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gd2Vla3MgYXJlIGEgc3BlY2lhbCBjYXNlXG4gICAgICAgIGlmICh1bml0cyA9PT0gJ3dlZWsnKSB7XG4gICAgICAgICAgICB0aGlzLndlZWtkYXkoMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVuaXRzID09PSAnaXNvV2VlaycpIHtcbiAgICAgICAgICAgIHRoaXMuaXNvV2Vla2RheSgxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHF1YXJ0ZXJzIGFyZSBhbHNvIHNwZWNpYWxcbiAgICAgICAgaWYgKHVuaXRzID09PSAncXVhcnRlcicpIHtcbiAgICAgICAgICAgIHRoaXMubW9udGgoTWF0aC5mbG9vcih0aGlzLm1vbnRoKCkgLyAzKSAqIDMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW5kT2YgKHVuaXRzKSB7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICBpZiAodW5pdHMgPT09IHVuZGVmaW5lZCB8fCB1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnRPZih1bml0cykuYWRkKDEsICh1bml0cyA9PT0gJ2lzb1dlZWsnID8gJ3dlZWsnIDogdW5pdHMpKS5zdWJ0cmFjdCgxLCAnbXMnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b190eXBlX192YWx1ZU9mICgpIHtcbiAgICAgICAgcmV0dXJuICt0aGlzLl9kIC0gKCh0aGlzLl9vZmZzZXQgfHwgMCkgKiA2MDAwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW5peCAoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKCt0aGlzIC8gMTAwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9EYXRlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29mZnNldCA/IG5ldyBEYXRlKCt0aGlzKSA6IHRoaXMuX2Q7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9BcnJheSAoKSB7XG4gICAgICAgIHZhciBtID0gdGhpcztcbiAgICAgICAgcmV0dXJuIFttLnllYXIoKSwgbS5tb250aCgpLCBtLmRhdGUoKSwgbS5ob3VyKCksIG0ubWludXRlKCksIG0uc2Vjb25kKCksIG0ubWlsbGlzZWNvbmQoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9PYmplY3QgKCkge1xuICAgICAgICB2YXIgbSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB5ZWFyczogbS55ZWFyKCksXG4gICAgICAgICAgICBtb250aHM6IG0ubW9udGgoKSxcbiAgICAgICAgICAgIGRhdGU6IG0uZGF0ZSgpLFxuICAgICAgICAgICAgaG91cnM6IG0uaG91cnMoKSxcbiAgICAgICAgICAgIG1pbnV0ZXM6IG0ubWludXRlcygpLFxuICAgICAgICAgICAgc2Vjb25kczogbS5zZWNvbmRzKCksXG4gICAgICAgICAgICBtaWxsaXNlY29uZHM6IG0ubWlsbGlzZWNvbmRzKClcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb21lbnRfdmFsaWRfX2lzVmFsaWQgKCkge1xuICAgICAgICByZXR1cm4gdmFsaWRfX2lzVmFsaWQodGhpcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2luZ0ZsYWdzICgpIHtcbiAgICAgICAgcmV0dXJuIGV4dGVuZCh7fSwgZ2V0UGFyc2luZ0ZsYWdzKHRoaXMpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnZhbGlkQXQgKCkge1xuICAgICAgICByZXR1cm4gZ2V0UGFyc2luZ0ZsYWdzKHRoaXMpLm92ZXJmbG93O1xuICAgIH1cblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnZ2cnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53ZWVrWWVhcigpICUgMTAwO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydHRycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzb1dlZWtZZWFyKCkgJSAxMDA7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBhZGRXZWVrWWVhckZvcm1hdFRva2VuICh0b2tlbiwgZ2V0dGVyKSB7XG4gICAgICAgIGFkZEZvcm1hdFRva2VuKDAsIFt0b2tlbiwgdG9rZW4ubGVuZ3RoXSwgMCwgZ2V0dGVyKTtcbiAgICB9XG5cbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdnZ2dnJywgICAgICd3ZWVrWWVhcicpO1xuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ2dnZ2dnJywgICAgJ3dlZWtZZWFyJyk7XG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignR0dHRycsICAnaXNvV2Vla1llYXInKTtcbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdHR0dHRycsICdpc29XZWVrWWVhcicpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCd3ZWVrWWVhcicsICdnZycpO1xuICAgIGFkZFVuaXRBbGlhcygnaXNvV2Vla1llYXInLCAnR0cnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ0cnLCAgICAgIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdnJywgICAgICBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignR0cnLCAgICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2dnJywgICAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdHR0dHJywgICBtYXRjaDF0bzQsIG1hdGNoNCk7XG4gICAgYWRkUmVnZXhUb2tlbignZ2dnZycsICAgbWF0Y2gxdG80LCBtYXRjaDQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0dHR0dHJywgIG1hdGNoMXRvNiwgbWF0Y2g2KTtcbiAgICBhZGRSZWdleFRva2VuKCdnZ2dnZycsICBtYXRjaDF0bzYsIG1hdGNoNik7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ2dnZ2cnLCAnZ2dnZ2cnLCAnR0dHRycsICdHR0dHRyddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgd2Vla1t0b2tlbi5zdWJzdHIoMCwgMildID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydnZycsICdHRyddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgd2Vla1t0b2tlbl0gPSB1dGlsc19ob29rc19faG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgZnVuY3Rpb24gd2Vla3NJblllYXIoeWVhciwgZG93LCBkb3kpIHtcbiAgICAgICAgcmV0dXJuIHdlZWtPZlllYXIobG9jYWxfX2NyZWF0ZUxvY2FsKFt5ZWFyLCAxMSwgMzEgKyBkb3cgLSBkb3ldKSwgZG93LCBkb3kpLndlZWs7XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0V2Vla1llYXIgKGlucHV0KSB7XG4gICAgICAgIHZhciB5ZWFyID0gd2Vla09mWWVhcih0aGlzLCB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3csIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRveSkueWVhcjtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB5ZWFyIDogdGhpcy5hZGQoKGlucHV0IC0geWVhciksICd5Jyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0SVNPV2Vla1llYXIgKGlucHV0KSB7XG4gICAgICAgIHZhciB5ZWFyID0gd2Vla09mWWVhcih0aGlzLCAxLCA0KS55ZWFyO1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHllYXIgOiB0aGlzLmFkZCgoaW5wdXQgLSB5ZWFyKSwgJ3knKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRJU09XZWVrc0luWWVhciAoKSB7XG4gICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgMSwgNCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0V2Vla3NJblllYXIgKCkge1xuICAgICAgICB2YXIgd2Vla0luZm8gPSB0aGlzLmxvY2FsZURhdGEoKS5fd2VlaztcbiAgICAgICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMueWVhcigpLCB3ZWVrSW5mby5kb3csIHdlZWtJbmZvLmRveSk7XG4gICAgfVxuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1EnLCAwLCAwLCAncXVhcnRlcicpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdxdWFydGVyJywgJ1EnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1EnLCBtYXRjaDEpO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1EnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01PTlRIXSA9ICh0b0ludChpbnB1dCkgLSAxKSAqIDM7XG4gICAgfSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXRRdWFydGVyIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IE1hdGguY2VpbCgodGhpcy5tb250aCgpICsgMSkgLyAzKSA6IHRoaXMubW9udGgoKGlucHV0IC0gMSkgKiAzICsgdGhpcy5tb250aCgpICUgMyk7XG4gICAgfVxuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0QnLCBbJ0REJywgMl0sICdEbycsICdkYXRlJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ2RhdGUnLCAnRCcpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignRCcsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0REJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0RvJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaWN0ID8gbG9jYWxlLl9vcmRpbmFsUGFyc2UgOiBsb2NhbGUuX29yZGluYWxQYXJzZUxlbmllbnQ7XG4gICAgfSk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnRCcsICdERCddLCBEQVRFKTtcbiAgICBhZGRQYXJzZVRva2VuKCdEbycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbREFURV0gPSB0b0ludChpbnB1dC5tYXRjaChtYXRjaDF0bzIpWzBdLCAxMCk7XG4gICAgfSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0RGF5T2ZNb250aCA9IG1ha2VHZXRTZXQoJ0RhdGUnLCB0cnVlKTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkJywgMCwgJ2RvJywgJ2RheScpO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2RkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXNNaW4odGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5c1Nob3J0KHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZGRkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzKHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZScsIDAsIDAsICd3ZWVrZGF5Jyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ0UnLCAwLCAwLCAnaXNvV2Vla2RheScpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdkYXknLCAnZCcpO1xuICAgIGFkZFVuaXRBbGlhcygnd2Vla2RheScsICdlJyk7XG4gICAgYWRkVW5pdEFsaWFzKCdpc29XZWVrZGF5JywgJ0UnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ2QnLCAgICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2UnLCAgICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0UnLCAgICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2RkJywgICBtYXRjaFdvcmQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2RkZCcsICBtYXRjaFdvcmQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2RkZGQnLCBtYXRjaFdvcmQpO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydkZCcsICdkZGQnLCAnZGRkZCddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZykge1xuICAgICAgICB2YXIgd2Vla2RheSA9IGNvbmZpZy5fbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQpO1xuICAgICAgICAvLyBpZiB3ZSBkaWRuJ3QgZ2V0IGEgd2Vla2RheSBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWRcbiAgICAgICAgaWYgKHdlZWtkYXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgd2Vlay5kID0gd2Vla2RheTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRXZWVrZGF5ID0gaW5wdXQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZCcsICdlJywgJ0UnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW5dID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgZnVuY3Rpb24gcGFyc2VXZWVrZGF5KGlucHV0LCBsb2NhbGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNOYU4oaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlucHV0ID0gbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQpO1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gTE9DQUxFU1xuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVXZWVrZGF5cyA9ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5cyAobSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNbbS5kYXkoKV07XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0ID0gJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5c1Nob3J0IChtKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0W20uZGF5KCldO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4gPSAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyk7XG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNNaW4gKG0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluW20uZGF5KCldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzUGFyc2UgKHdlZWtkYXlOYW1lKSB7XG4gICAgICAgIHZhciBpLCBtb20sIHJlZ2V4O1xuXG4gICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2UgPSB0aGlzLl93ZWVrZGF5c1BhcnNlIHx8IFtdO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICAgICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgbW9tID0gbG9jYWxfX2NyZWF0ZUxvY2FsKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICAgICAgICAgIHJlZ2V4ID0gJ14nICsgdGhpcy53ZWVrZGF5cyhtb20sICcnKSArICd8XicgKyB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykgKyAnfF4nICsgdGhpcy53ZWVrZGF5c01pbihtb20sICcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cChyZWdleC5yZXBsYWNlKCcuJywgJycpLCAnaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGVzdCB0aGUgcmVnZXhcbiAgICAgICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXREYXlPZldlZWsgKGlucHV0KSB7XG4gICAgICAgIHZhciBkYXkgPSB0aGlzLl9pc1VUQyA/IHRoaXMuX2QuZ2V0VVRDRGF5KCkgOiB0aGlzLl9kLmdldERheSgpO1xuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaW5wdXQgPSBwYXJzZVdlZWtkYXkoaW5wdXQsIHRoaXMubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZChpbnB1dCAtIGRheSwgJ2QnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBkYXk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRMb2NhbGVEYXlPZldlZWsgKGlucHV0KSB7XG4gICAgICAgIHZhciB3ZWVrZGF5ID0gKHRoaXMuZGF5KCkgKyA3IC0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG93KSAlIDc7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2Vla2RheSA6IHRoaXMuYWRkKGlucHV0IC0gd2Vla2RheSwgJ2QnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRJU09EYXlPZldlZWsgKGlucHV0KSB7XG4gICAgICAgIC8vIGJlaGF2ZXMgdGhlIHNhbWUgYXMgbW9tZW50I2RheSBleGNlcHRcbiAgICAgICAgLy8gYXMgYSBnZXR0ZXIsIHJldHVybnMgNyBpbnN0ZWFkIG9mIDAgKDEtNyByYW5nZSBpbnN0ZWFkIG9mIDAtNilcbiAgICAgICAgLy8gYXMgYSBzZXR0ZXIsIHN1bmRheSBzaG91bGQgYmVsb25nIHRvIHRoZSBwcmV2aW91cyB3ZWVrLlxuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHRoaXMuZGF5KCkgfHwgNyA6IHRoaXMuZGF5KHRoaXMuZGF5KCkgJSA3ID8gaW5wdXQgOiBpbnB1dCAtIDcpO1xuICAgIH1cblxuICAgIGFkZEZvcm1hdFRva2VuKCdIJywgWydISCcsIDJdLCAwLCAnaG91cicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdoJywgWydoaCcsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhvdXJzKCkgJSAxMiB8fCAxMjtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIG1lcmlkaWVtICh0b2tlbiwgbG93ZXJjYXNlKSB7XG4gICAgICAgIGFkZEZvcm1hdFRva2VuKHRva2VuLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubWVyaWRpZW0odGhpcy5ob3VycygpLCB0aGlzLm1pbnV0ZXMoKSwgbG93ZXJjYXNlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbWVyaWRpZW0oJ2EnLCB0cnVlKTtcbiAgICBtZXJpZGllbSgnQScsIGZhbHNlKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnaG91cicsICdoJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBmdW5jdGlvbiBtYXRjaE1lcmlkaWVtIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuX21lcmlkaWVtUGFyc2U7XG4gICAgfVxuXG4gICAgYWRkUmVnZXhUb2tlbignYScsICBtYXRjaE1lcmlkaWVtKTtcbiAgICBhZGRSZWdleFRva2VuKCdBJywgIG1hdGNoTWVyaWRpZW0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0gnLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdoJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignSEgnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignaGgnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnSCcsICdISCddLCBIT1VSKTtcbiAgICBhZGRQYXJzZVRva2VuKFsnYScsICdBJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2lzUG0gPSBjb25maWcuX2xvY2FsZS5pc1BNKGlucHV0KTtcbiAgICAgICAgY29uZmlnLl9tZXJpZGllbSA9IGlucHV0O1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oWydoJywgJ2hoJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG4gICAgfSk7XG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICBmdW5jdGlvbiBsb2NhbGVJc1BNIChpbnB1dCkge1xuICAgICAgICAvLyBJRTggUXVpcmtzIE1vZGUgJiBJRTcgU3RhbmRhcmRzIE1vZGUgZG8gbm90IGFsbG93IGFjY2Vzc2luZyBzdHJpbmdzIGxpa2UgYXJyYXlzXG4gICAgICAgIC8vIFVzaW5nIGNoYXJBdCBzaG91bGQgYmUgbW9yZSBjb21wYXRpYmxlLlxuICAgICAgICByZXR1cm4gKChpbnB1dCArICcnKS50b0xvd2VyQ2FzZSgpLmNoYXJBdCgwKSA9PT0gJ3AnKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZU1lcmlkaWVtUGFyc2UgPSAvW2FwXVxcLj9tP1xcLj8vaTtcbiAgICBmdW5jdGlvbiBsb2NhbGVNZXJpZGllbSAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXJzID4gMTEpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ3BtJyA6ICdQTSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdhbScgOiAnQU0nO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICAvLyBTZXR0aW5nIHRoZSBob3VyIHNob3VsZCBrZWVwIHRoZSB0aW1lLCBiZWNhdXNlIHRoZSB1c2VyIGV4cGxpY2l0bHlcbiAgICAvLyBzcGVjaWZpZWQgd2hpY2ggaG91ciBoZSB3YW50cy4gU28gdHJ5aW5nIHRvIG1haW50YWluIHRoZSBzYW1lIGhvdXIgKGluXG4gICAgLy8gYSBuZXcgdGltZXpvbmUpIG1ha2VzIHNlbnNlLiBBZGRpbmcvc3VidHJhY3RpbmcgaG91cnMgZG9lcyBub3QgZm9sbG93XG4gICAgLy8gdGhpcyBydWxlLlxuICAgIHZhciBnZXRTZXRIb3VyID0gbWFrZUdldFNldCgnSG91cnMnLCB0cnVlKTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdtJywgWydtbScsIDJdLCAwLCAnbWludXRlJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ21pbnV0ZScsICdtJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdtJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignbW0nLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ20nLCAnbW0nXSwgTUlOVVRFKTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRNaW51dGUgPSBtYWtlR2V0U2V0KCdNaW51dGVzJywgZmFsc2UpO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3MnLCBbJ3NzJywgMl0sIDAsICdzZWNvbmQnKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnc2Vjb25kJywgJ3MnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3MnLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdzcycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRQYXJzZVRva2VuKFsncycsICdzcyddLCBTRUNPTkQpO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldFNlY29uZCA9IG1ha2VHZXRTZXQoJ1NlY29uZHMnLCBmYWxzZSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignUycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIH5+KHRoaXMubWlsbGlzZWNvbmQoKSAvIDEwMCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIH5+KHRoaXMubWlsbGlzZWNvbmQoKSAvIDEwKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTJywgM10sIDAsICdtaWxsaXNlY29uZCcpO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTUycsIDRdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTJywgNV0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTUycsIDZdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTUycsIDddLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1NTJywgOF0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1NTUycsIDldLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDAwO1xuICAgIH0pO1xuXG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ21pbGxpc2Vjb25kJywgJ21zJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdTJywgICAgbWF0Y2gxdG8zLCBtYXRjaDEpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1NTJywgICBtYXRjaDF0bzMsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignU1NTJywgIG1hdGNoMXRvMywgbWF0Y2gzKTtcblxuICAgIHZhciB0b2tlbjtcbiAgICBmb3IgKHRva2VuID0gJ1NTU1MnOyB0b2tlbi5sZW5ndGggPD0gOTsgdG9rZW4gKz0gJ1MnKSB7XG4gICAgICAgIGFkZFJlZ2V4VG9rZW4odG9rZW4sIG1hdGNoVW5zaWduZWQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlTXMoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01JTExJU0VDT05EXSA9IHRvSW50KCgnMC4nICsgaW5wdXQpICogMTAwMCk7XG4gICAgfVxuXG4gICAgZm9yICh0b2tlbiA9ICdTJzsgdG9rZW4ubGVuZ3RoIDw9IDk7IHRva2VuICs9ICdTJykge1xuICAgICAgICBhZGRQYXJzZVRva2VuKHRva2VuLCBwYXJzZU1zKTtcbiAgICB9XG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldE1pbGxpc2Vjb25kID0gbWFrZUdldFNldCgnTWlsbGlzZWNvbmRzJywgZmFsc2UpO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3onLCAgMCwgMCwgJ3pvbmVBYmJyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ3p6JywgMCwgMCwgJ3pvbmVOYW1lJyk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRab25lQWJiciAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/ICdVVEMnIDogJyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Wm9uZU5hbWUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyAnQ29vcmRpbmF0ZWQgVW5pdmVyc2FsIFRpbWUnIDogJyc7XG4gICAgfVxuXG4gICAgdmFyIG1vbWVudFByb3RvdHlwZV9fcHJvdG8gPSBNb21lbnQucHJvdG90eXBlO1xuXG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5hZGQgICAgICAgICAgPSBhZGRfc3VidHJhY3RfX2FkZDtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmNhbGVuZGFyICAgICA9IG1vbWVudF9jYWxlbmRhcl9fY2FsZW5kYXI7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5jbG9uZSAgICAgICAgPSBjbG9uZTtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmRpZmYgICAgICAgICA9IGRpZmY7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5lbmRPZiAgICAgICAgPSBlbmRPZjtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmZvcm1hdCAgICAgICA9IGZvcm1hdDtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmZyb20gICAgICAgICA9IGZyb207XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5mcm9tTm93ICAgICAgPSBmcm9tTm93O1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8udG8gICAgICAgICAgID0gdG87XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by50b05vdyAgICAgICAgPSB0b05vdztcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmdldCAgICAgICAgICA9IGdldFNldDtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmludmFsaWRBdCAgICA9IGludmFsaWRBdDtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmlzQWZ0ZXIgICAgICA9IGlzQWZ0ZXI7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5pc0JlZm9yZSAgICAgPSBpc0JlZm9yZTtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmlzQmV0d2VlbiAgICA9IGlzQmV0d2VlbjtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmlzU2FtZSAgICAgICA9IGlzU2FtZTtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmlzVmFsaWQgICAgICA9IG1vbWVudF92YWxpZF9faXNWYWxpZDtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmxhbmcgICAgICAgICA9IGxhbmc7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5sb2NhbGUgICAgICAgPSBsb2NhbGU7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5sb2NhbGVEYXRhICAgPSBsb2NhbGVEYXRhO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8ubWF4ICAgICAgICAgID0gcHJvdG90eXBlTWF4O1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8ubWluICAgICAgICAgID0gcHJvdG90eXBlTWluO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8ucGFyc2luZ0ZsYWdzID0gcGFyc2luZ0ZsYWdzO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uc2V0ICAgICAgICAgID0gZ2V0U2V0O1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uc3RhcnRPZiAgICAgID0gc3RhcnRPZjtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnN1YnRyYWN0ICAgICA9IGFkZF9zdWJ0cmFjdF9fc3VidHJhY3Q7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by50b0FycmF5ICAgICAgPSB0b0FycmF5O1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8udG9PYmplY3QgICAgID0gdG9PYmplY3Q7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by50b0RhdGUgICAgICAgPSB0b0RhdGU7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by50b0lTT1N0cmluZyAgPSBtb21lbnRfZm9ybWF0X190b0lTT1N0cmluZztcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnRvSlNPTiAgICAgICA9IG1vbWVudF9mb3JtYXRfX3RvSVNPU3RyaW5nO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8udG9TdHJpbmcgICAgID0gdG9TdHJpbmc7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by51bml4ICAgICAgICAgPSB1bml4O1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8udmFsdWVPZiAgICAgID0gdG9fdHlwZV9fdmFsdWVPZjtcblxuICAgIC8vIFllYXJcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnllYXIgICAgICAgPSBnZXRTZXRZZWFyO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaXNMZWFwWWVhciA9IGdldElzTGVhcFllYXI7XG5cbiAgICAvLyBXZWVrIFllYXJcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLndlZWtZZWFyICAgID0gZ2V0U2V0V2Vla1llYXI7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5pc29XZWVrWWVhciA9IGdldFNldElTT1dlZWtZZWFyO1xuXG4gICAgLy8gUXVhcnRlclxuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8ucXVhcnRlciA9IG1vbWVudFByb3RvdHlwZV9fcHJvdG8ucXVhcnRlcnMgPSBnZXRTZXRRdWFydGVyO1xuXG4gICAgLy8gTW9udGhcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLm1vbnRoICAgICAgID0gZ2V0U2V0TW9udGg7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5kYXlzSW5Nb250aCA9IGdldERheXNJbk1vbnRoO1xuXG4gICAgLy8gV2Vla1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8ud2VlayAgICAgICAgICAgPSBtb21lbnRQcm90b3R5cGVfX3Byb3RvLndlZWtzICAgICAgICA9IGdldFNldFdlZWs7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5pc29XZWVrICAgICAgICA9IG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaXNvV2Vla3MgICAgID0gZ2V0U2V0SVNPV2VlaztcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLndlZWtzSW5ZZWFyICAgID0gZ2V0V2Vla3NJblllYXI7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5pc29XZWVrc0luWWVhciA9IGdldElTT1dlZWtzSW5ZZWFyO1xuXG4gICAgLy8gRGF5XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5kYXRlICAgICAgID0gZ2V0U2V0RGF5T2ZNb250aDtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmRheSAgICAgICAgPSBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmRheXMgICAgICAgICAgICAgPSBnZXRTZXREYXlPZldlZWs7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by53ZWVrZGF5ICAgID0gZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaXNvV2Vla2RheSA9IGdldFNldElTT0RheU9mV2VlaztcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmRheU9mWWVhciAgPSBnZXRTZXREYXlPZlllYXI7XG5cbiAgICAvLyBIb3VyXG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5ob3VyID0gbW9tZW50UHJvdG90eXBlX19wcm90by5ob3VycyA9IGdldFNldEhvdXI7XG5cbiAgICAvLyBNaW51dGVcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLm1pbnV0ZSA9IG1vbWVudFByb3RvdHlwZV9fcHJvdG8ubWludXRlcyA9IGdldFNldE1pbnV0ZTtcblxuICAgIC8vIFNlY29uZFxuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uc2Vjb25kID0gbW9tZW50UHJvdG90eXBlX19wcm90by5zZWNvbmRzID0gZ2V0U2V0U2Vjb25kO1xuXG4gICAgLy8gTWlsbGlzZWNvbmRcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLm1pbGxpc2Vjb25kID0gbW9tZW50UHJvdG90eXBlX19wcm90by5taWxsaXNlY29uZHMgPSBnZXRTZXRNaWxsaXNlY29uZDtcblxuICAgIC8vIE9mZnNldFxuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8udXRjT2Zmc2V0ICAgICAgICAgICAgPSBnZXRTZXRPZmZzZXQ7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by51dGMgICAgICAgICAgICAgICAgICA9IHNldE9mZnNldFRvVVRDO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8ubG9jYWwgICAgICAgICAgICAgICAgPSBzZXRPZmZzZXRUb0xvY2FsO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8ucGFyc2Vab25lICAgICAgICAgICAgPSBzZXRPZmZzZXRUb1BhcnNlZE9mZnNldDtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmhhc0FsaWduZWRIb3VyT2Zmc2V0ID0gaGFzQWxpZ25lZEhvdXJPZmZzZXQ7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5pc0RTVCAgICAgICAgICAgICAgICA9IGlzRGF5bGlnaHRTYXZpbmdUaW1lO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaXNEU1RTaGlmdGVkICAgICAgICAgPSBpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQ7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5pc0xvY2FsICAgICAgICAgICAgICA9IGlzTG9jYWw7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5pc1V0Y09mZnNldCAgICAgICAgICA9IGlzVXRjT2Zmc2V0O1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaXNVdGMgICAgICAgICAgICAgICAgPSBpc1V0YztcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmlzVVRDICAgICAgICAgICAgICAgID0gaXNVdGM7XG5cbiAgICAvLyBUaW1lem9uZVxuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uem9uZUFiYnIgPSBnZXRab25lQWJicjtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnpvbmVOYW1lID0gZ2V0Wm9uZU5hbWU7XG5cbiAgICAvLyBEZXByZWNhdGlvbnNcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmRhdGVzICA9IGRlcHJlY2F0ZSgnZGF0ZXMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIGRhdGUgaW5zdGVhZC4nLCBnZXRTZXREYXlPZk1vbnRoKTtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLm1vbnRocyA9IGRlcHJlY2F0ZSgnbW9udGhzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb250aCBpbnN0ZWFkJywgZ2V0U2V0TW9udGgpO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8ueWVhcnMgID0gZGVwcmVjYXRlKCd5ZWFycyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgeWVhciBpbnN0ZWFkJywgZ2V0U2V0WWVhcik7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by56b25lICAgPSBkZXByZWNhdGUoJ21vbWVudCgpLnpvbmUgaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudCgpLnV0Y09mZnNldCBpbnN0ZWFkLiBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMTc3OScsIGdldFNldFpvbmUpO1xuXG4gICAgdmFyIG1vbWVudFByb3RvdHlwZSA9IG1vbWVudFByb3RvdHlwZV9fcHJvdG87XG5cbiAgICBmdW5jdGlvbiBtb21lbnRfX2NyZWF0ZVVuaXggKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBsb2NhbF9fY3JlYXRlTG9jYWwoaW5wdXQgKiAxMDAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb21lbnRfX2NyZWF0ZUluWm9uZSAoKSB7XG4gICAgICAgIHJldHVybiBsb2NhbF9fY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKS5wYXJzZVpvbmUoKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdENhbGVuZGFyID0ge1xuICAgICAgICBzYW1lRGF5IDogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZV9jYWxlbmRhcl9fY2FsZW5kYXIgKGtleSwgbW9tLCBub3cpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IHRoaXMuX2NhbGVuZGFyW2tleV07XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb3V0cHV0ID09PSAnZnVuY3Rpb24nID8gb3V0cHV0LmNhbGwobW9tLCBub3cpIDogb3V0cHV0O1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9uZ0RhdGVGb3JtYXQgPSB7XG4gICAgICAgIExUUyAgOiAnaDptbTpzcyBBJyxcbiAgICAgICAgTFQgICA6ICdoOm1tIEEnLFxuICAgICAgICBMICAgIDogJ01NL0REL1lZWVknLFxuICAgICAgICBMTCAgIDogJ01NTU0gRCwgWVlZWScsXG4gICAgICAgIExMTCAgOiAnTU1NTSBELCBZWVlZIGg6bW0gQScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgTU1NTSBELCBZWVlZIGg6bW0gQSdcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbG9uZ0RhdGVGb3JtYXQgKGtleSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSxcbiAgICAgICAgICAgIGZvcm1hdFVwcGVyID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5LnRvVXBwZXJDYXNlKCldO1xuXG4gICAgICAgIGlmIChmb3JtYXQgfHwgIWZvcm1hdFVwcGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSA9IGZvcm1hdFVwcGVyLnJlcGxhY2UoL01NTU18TU18RER8ZGRkZC9nLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsLnNsaWNlKDEpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdEludmFsaWREYXRlID0gJ0ludmFsaWQgZGF0ZSc7XG5cbiAgICBmdW5jdGlvbiBpbnZhbGlkRGF0ZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZhbGlkRGF0ZTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdE9yZGluYWwgPSAnJWQnO1xuICAgIHZhciBkZWZhdWx0T3JkaW5hbFBhcnNlID0gL1xcZHsxLDJ9LztcblxuICAgIGZ1bmN0aW9uIG9yZGluYWwgKG51bWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3JkaW5hbC5yZXBsYWNlKCclZCcsIG51bWJlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlUGFyc2VQb3N0Rm9ybWF0IChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdFJlbGF0aXZlVGltZSA9IHtcbiAgICAgICAgZnV0dXJlIDogJ2luICVzJyxcbiAgICAgICAgcGFzdCAgIDogJyVzIGFnbycsXG4gICAgICAgIHMgIDogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICBtICA6ICdhIG1pbnV0ZScsXG4gICAgICAgIG1tIDogJyVkIG1pbnV0ZXMnLFxuICAgICAgICBoICA6ICdhbiBob3VyJyxcbiAgICAgICAgaGggOiAnJWQgaG91cnMnLFxuICAgICAgICBkICA6ICdhIGRheScsXG4gICAgICAgIGRkIDogJyVkIGRheXMnLFxuICAgICAgICBNICA6ICdhIG1vbnRoJyxcbiAgICAgICAgTU0gOiAnJWQgbW9udGhzJyxcbiAgICAgICAgeSAgOiAnYSB5ZWFyJyxcbiAgICAgICAgeXkgOiAnJWQgeWVhcnMnXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlX19yZWxhdGl2ZVRpbWUgKG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgb3V0cHV0ID0gdGhpcy5fcmVsYXRpdmVUaW1lW3N0cmluZ107XG4gICAgICAgIHJldHVybiAodHlwZW9mIG91dHB1dCA9PT0gJ2Z1bmN0aW9uJykgP1xuICAgICAgICAgICAgb3V0cHV0KG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkgOlxuICAgICAgICAgICAgb3V0cHV0LnJlcGxhY2UoLyVkL2ksIG51bWJlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFzdEZ1dHVyZSAoZGlmZiwgb3V0cHV0KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB0aGlzLl9yZWxhdGl2ZVRpbWVbZGlmZiA+IDAgPyAnZnV0dXJlJyA6ICdwYXN0J107XG4gICAgICAgIHJldHVybiB0eXBlb2YgZm9ybWF0ID09PSAnZnVuY3Rpb24nID8gZm9ybWF0KG91dHB1dCkgOiBmb3JtYXQucmVwbGFjZSgvJXMvaSwgb3V0cHV0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVfc2V0X19zZXQgKGNvbmZpZykge1xuICAgICAgICB2YXIgcHJvcCwgaTtcbiAgICAgICAgZm9yIChpIGluIGNvbmZpZykge1xuICAgICAgICAgICAgcHJvcCA9IGNvbmZpZ1tpXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRoaXNbaV0gPSBwcm9wO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzWydfJyArIGldID0gcHJvcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBMZW5pZW50IG9yZGluYWwgcGFyc2luZyBhY2NlcHRzIGp1c3QgYSBudW1iZXIgaW4gYWRkaXRpb24gdG9cbiAgICAgICAgLy8gbnVtYmVyICsgKHBvc3NpYmx5KSBzdHVmZiBjb21pbmcgZnJvbSBfb3JkaW5hbFBhcnNlTGVuaWVudC5cbiAgICAgICAgdGhpcy5fb3JkaW5hbFBhcnNlTGVuaWVudCA9IG5ldyBSZWdFeHAodGhpcy5fb3JkaW5hbFBhcnNlLnNvdXJjZSArICd8JyArICgvXFxkezEsMn0vKS5zb3VyY2UpO1xuICAgIH1cblxuICAgIHZhciBwcm90b3R5cGVfX3Byb3RvID0gTG9jYWxlLnByb3RvdHlwZTtcblxuICAgIHByb3RvdHlwZV9fcHJvdG8uX2NhbGVuZGFyICAgICAgID0gZGVmYXVsdENhbGVuZGFyO1xuICAgIHByb3RvdHlwZV9fcHJvdG8uY2FsZW5kYXIgICAgICAgID0gbG9jYWxlX2NhbGVuZGFyX19jYWxlbmRhcjtcbiAgICBwcm90b3R5cGVfX3Byb3RvLl9sb25nRGF0ZUZvcm1hdCA9IGRlZmF1bHRMb25nRGF0ZUZvcm1hdDtcbiAgICBwcm90b3R5cGVfX3Byb3RvLmxvbmdEYXRlRm9ybWF0ICA9IGxvbmdEYXRlRm9ybWF0O1xuICAgIHByb3RvdHlwZV9fcHJvdG8uX2ludmFsaWREYXRlICAgID0gZGVmYXVsdEludmFsaWREYXRlO1xuICAgIHByb3RvdHlwZV9fcHJvdG8uaW52YWxpZERhdGUgICAgID0gaW52YWxpZERhdGU7XG4gICAgcHJvdG90eXBlX19wcm90by5fb3JkaW5hbCAgICAgICAgPSBkZWZhdWx0T3JkaW5hbDtcbiAgICBwcm90b3R5cGVfX3Byb3RvLm9yZGluYWwgICAgICAgICA9IG9yZGluYWw7XG4gICAgcHJvdG90eXBlX19wcm90by5fb3JkaW5hbFBhcnNlICAgPSBkZWZhdWx0T3JkaW5hbFBhcnNlO1xuICAgIHByb3RvdHlwZV9fcHJvdG8ucHJlcGFyc2UgICAgICAgID0gcHJlUGFyc2VQb3N0Rm9ybWF0O1xuICAgIHByb3RvdHlwZV9fcHJvdG8ucG9zdGZvcm1hdCAgICAgID0gcHJlUGFyc2VQb3N0Rm9ybWF0O1xuICAgIHByb3RvdHlwZV9fcHJvdG8uX3JlbGF0aXZlVGltZSAgID0gZGVmYXVsdFJlbGF0aXZlVGltZTtcbiAgICBwcm90b3R5cGVfX3Byb3RvLnJlbGF0aXZlVGltZSAgICA9IHJlbGF0aXZlX19yZWxhdGl2ZVRpbWU7XG4gICAgcHJvdG90eXBlX19wcm90by5wYXN0RnV0dXJlICAgICAgPSBwYXN0RnV0dXJlO1xuICAgIHByb3RvdHlwZV9fcHJvdG8uc2V0ICAgICAgICAgICAgID0gbG9jYWxlX3NldF9fc2V0O1xuXG4gICAgLy8gTW9udGhcbiAgICBwcm90b3R5cGVfX3Byb3RvLm1vbnRocyAgICAgICA9ICAgICAgICBsb2NhbGVNb250aHM7XG4gICAgcHJvdG90eXBlX19wcm90by5fbW9udGhzICAgICAgPSBkZWZhdWx0TG9jYWxlTW9udGhzO1xuICAgIHByb3RvdHlwZV9fcHJvdG8ubW9udGhzU2hvcnQgID0gICAgICAgIGxvY2FsZU1vbnRoc1Nob3J0O1xuICAgIHByb3RvdHlwZV9fcHJvdG8uX21vbnRoc1Nob3J0ID0gZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0O1xuICAgIHByb3RvdHlwZV9fcHJvdG8ubW9udGhzUGFyc2UgID0gICAgICAgIGxvY2FsZU1vbnRoc1BhcnNlO1xuXG4gICAgLy8gV2Vla1xuICAgIHByb3RvdHlwZV9fcHJvdG8ud2VlayA9IGxvY2FsZVdlZWs7XG4gICAgcHJvdG90eXBlX19wcm90by5fd2VlayA9IGRlZmF1bHRMb2NhbGVXZWVrO1xuICAgIHByb3RvdHlwZV9fcHJvdG8uZmlyc3REYXlPZlllYXIgPSBsb2NhbGVGaXJzdERheU9mWWVhcjtcbiAgICBwcm90b3R5cGVfX3Byb3RvLmZpcnN0RGF5T2ZXZWVrID0gbG9jYWxlRmlyc3REYXlPZldlZWs7XG5cbiAgICAvLyBEYXkgb2YgV2Vla1xuICAgIHByb3RvdHlwZV9fcHJvdG8ud2Vla2RheXMgICAgICAgPSAgICAgICAgbG9jYWxlV2Vla2RheXM7XG4gICAgcHJvdG90eXBlX19wcm90by5fd2Vla2RheXMgICAgICA9IGRlZmF1bHRMb2NhbGVXZWVrZGF5cztcbiAgICBwcm90b3R5cGVfX3Byb3RvLndlZWtkYXlzTWluICAgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzTWluO1xuICAgIHByb3RvdHlwZV9fcHJvdG8uX3dlZWtkYXlzTWluICAgPSBkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW47XG4gICAgcHJvdG90eXBlX19wcm90by53ZWVrZGF5c1Nob3J0ICA9ICAgICAgICBsb2NhbGVXZWVrZGF5c1Nob3J0O1xuICAgIHByb3RvdHlwZV9fcHJvdG8uX3dlZWtkYXlzU2hvcnQgPSBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydDtcbiAgICBwcm90b3R5cGVfX3Byb3RvLndlZWtkYXlzUGFyc2UgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzUGFyc2U7XG5cbiAgICAvLyBIb3Vyc1xuICAgIHByb3RvdHlwZV9fcHJvdG8uaXNQTSA9IGxvY2FsZUlzUE07XG4gICAgcHJvdG90eXBlX19wcm90by5fbWVyaWRpZW1QYXJzZSA9IGRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlO1xuICAgIHByb3RvdHlwZV9fcHJvdG8ubWVyaWRpZW0gPSBsb2NhbGVNZXJpZGllbTtcblxuICAgIGZ1bmN0aW9uIGxpc3RzX19nZXQgKGZvcm1hdCwgaW5kZXgsIGZpZWxkLCBzZXR0ZXIpIHtcbiAgICAgICAgdmFyIGxvY2FsZSA9IGxvY2FsZV9sb2NhbGVzX19nZXRMb2NhbGUoKTtcbiAgICAgICAgdmFyIHV0YyA9IGNyZWF0ZV91dGNfX2NyZWF0ZVVUQygpLnNldChzZXR0ZXIsIGluZGV4KTtcbiAgICAgICAgcmV0dXJuIGxvY2FsZVtmaWVsZF0odXRjLCBmb3JtYXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3QgKGZvcm1hdCwgaW5kZXgsIGZpZWxkLCBjb3VudCwgc2V0dGVyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZm9ybWF0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBsaXN0c19fZ2V0KGZvcm1hdCwgaW5kZXgsIGZpZWxkLCBzZXR0ZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBvdXQgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIG91dFtpXSA9IGxpc3RzX19nZXQoZm9ybWF0LCBpLCBmaWVsZCwgc2V0dGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RzX19saXN0TW9udGhzIChmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0KGZvcm1hdCwgaW5kZXgsICdtb250aHMnLCAxMiwgJ21vbnRoJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdHNfX2xpc3RNb250aHNTaG9ydCAoZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdChmb3JtYXQsIGluZGV4LCAnbW9udGhzU2hvcnQnLCAxMiwgJ21vbnRoJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdHNfX2xpc3RXZWVrZGF5cyAoZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdChmb3JtYXQsIGluZGV4LCAnd2Vla2RheXMnLCA3LCAnZGF5Jyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdHNfX2xpc3RXZWVrZGF5c1Nob3J0IChmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0KGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5c1Nob3J0JywgNywgJ2RheScpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RzX19saXN0V2Vla2RheXNNaW4gKGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3QoZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzTWluJywgNywgJ2RheScpO1xuICAgIH1cblxuICAgIGxvY2FsZV9sb2NhbGVzX19nZXRTZXRHbG9iYWxMb2NhbGUoJ2VuJywge1xuICAgICAgICBvcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSh0aHxzdHxuZHxyZCkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAodG9JbnQobnVtYmVyICUgMTAwIC8gMTApID09PSAxKSA/ICd0aCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAxKSA/ICdzdCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAyKSA/ICduZCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAzKSA/ICdyZCcgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gU2lkZSBlZmZlY3QgaW1wb3J0c1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy5sYW5nID0gZGVwcmVjYXRlKCdtb21lbnQubGFuZyBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZSBpbnN0ZWFkLicsIGxvY2FsZV9sb2NhbGVzX19nZXRTZXRHbG9iYWxMb2NhbGUpO1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy5sYW5nRGF0YSA9IGRlcHJlY2F0ZSgnbW9tZW50LmxhbmdEYXRhIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlRGF0YSBpbnN0ZWFkLicsIGxvY2FsZV9sb2NhbGVzX19nZXRMb2NhbGUpO1xuXG4gICAgdmFyIG1hdGhBYnMgPSBNYXRoLmFicztcblxuICAgIGZ1bmN0aW9uIGR1cmF0aW9uX2Fic19fYWJzICgpIHtcbiAgICAgICAgdmFyIGRhdGEgICAgICAgICAgID0gdGhpcy5fZGF0YTtcblxuICAgICAgICB0aGlzLl9taWxsaXNlY29uZHMgPSBtYXRoQWJzKHRoaXMuX21pbGxpc2Vjb25kcyk7XG4gICAgICAgIHRoaXMuX2RheXMgICAgICAgICA9IG1hdGhBYnModGhpcy5fZGF5cyk7XG4gICAgICAgIHRoaXMuX21vbnRocyAgICAgICA9IG1hdGhBYnModGhpcy5fbW9udGhzKTtcblxuICAgICAgICBkYXRhLm1pbGxpc2Vjb25kcyAgPSBtYXRoQWJzKGRhdGEubWlsbGlzZWNvbmRzKTtcbiAgICAgICAgZGF0YS5zZWNvbmRzICAgICAgID0gbWF0aEFicyhkYXRhLnNlY29uZHMpO1xuICAgICAgICBkYXRhLm1pbnV0ZXMgICAgICAgPSBtYXRoQWJzKGRhdGEubWludXRlcyk7XG4gICAgICAgIGRhdGEuaG91cnMgICAgICAgICA9IG1hdGhBYnMoZGF0YS5ob3Vycyk7XG4gICAgICAgIGRhdGEubW9udGhzICAgICAgICA9IG1hdGhBYnMoZGF0YS5tb250aHMpO1xuICAgICAgICBkYXRhLnllYXJzICAgICAgICAgPSBtYXRoQWJzKGRhdGEueWVhcnMpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGR1cmF0aW9uX2FkZF9zdWJ0cmFjdF9fYWRkU3VidHJhY3QgKGR1cmF0aW9uLCBpbnB1dCwgdmFsdWUsIGRpcmVjdGlvbikge1xuICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVfX2NyZWF0ZUR1cmF0aW9uKGlucHV0LCB2YWx1ZSk7XG5cbiAgICAgICAgZHVyYXRpb24uX21pbGxpc2Vjb25kcyArPSBkaXJlY3Rpb24gKiBvdGhlci5fbWlsbGlzZWNvbmRzO1xuICAgICAgICBkdXJhdGlvbi5fZGF5cyAgICAgICAgICs9IGRpcmVjdGlvbiAqIG90aGVyLl9kYXlzO1xuICAgICAgICBkdXJhdGlvbi5fbW9udGhzICAgICAgICs9IGRpcmVjdGlvbiAqIG90aGVyLl9tb250aHM7XG5cbiAgICAgICAgcmV0dXJuIGR1cmF0aW9uLl9idWJibGUoKTtcbiAgICB9XG5cbiAgICAvLyBzdXBwb3J0cyBvbmx5IDIuMC1zdHlsZSBhZGQoMSwgJ3MnKSBvciBhZGQoZHVyYXRpb24pXG4gICAgZnVuY3Rpb24gZHVyYXRpb25fYWRkX3N1YnRyYWN0X19hZGQgKGlucHV0LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZHVyYXRpb25fYWRkX3N1YnRyYWN0X19hZGRTdWJ0cmFjdCh0aGlzLCBpbnB1dCwgdmFsdWUsIDEpO1xuICAgIH1cblxuICAgIC8vIHN1cHBvcnRzIG9ubHkgMi4wLXN0eWxlIHN1YnRyYWN0KDEsICdzJykgb3Igc3VidHJhY3QoZHVyYXRpb24pXG4gICAgZnVuY3Rpb24gZHVyYXRpb25fYWRkX3N1YnRyYWN0X19zdWJ0cmFjdCAoaW5wdXQsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBkdXJhdGlvbl9hZGRfc3VidHJhY3RfX2FkZFN1YnRyYWN0KHRoaXMsIGlucHV0LCB2YWx1ZSwgLTEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFic0NlaWwgKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtYmVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJ1YmJsZSAoKSB7XG4gICAgICAgIHZhciBtaWxsaXNlY29uZHMgPSB0aGlzLl9taWxsaXNlY29uZHM7XG4gICAgICAgIHZhciBkYXlzICAgICAgICAgPSB0aGlzLl9kYXlzO1xuICAgICAgICB2YXIgbW9udGhzICAgICAgID0gdGhpcy5fbW9udGhzO1xuICAgICAgICB2YXIgZGF0YSAgICAgICAgID0gdGhpcy5fZGF0YTtcbiAgICAgICAgdmFyIHNlY29uZHMsIG1pbnV0ZXMsIGhvdXJzLCB5ZWFycywgbW9udGhzRnJvbURheXM7XG5cbiAgICAgICAgLy8gaWYgd2UgaGF2ZSBhIG1peCBvZiBwb3NpdGl2ZSBhbmQgbmVnYXRpdmUgdmFsdWVzLCBidWJibGUgZG93biBmaXJzdFxuICAgICAgICAvLyBjaGVjazogaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzIxNjZcbiAgICAgICAgaWYgKCEoKG1pbGxpc2Vjb25kcyA+PSAwICYmIGRheXMgPj0gMCAmJiBtb250aHMgPj0gMCkgfHxcbiAgICAgICAgICAgICAgICAobWlsbGlzZWNvbmRzIDw9IDAgJiYgZGF5cyA8PSAwICYmIG1vbnRocyA8PSAwKSkpIHtcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kcyArPSBhYnNDZWlsKG1vbnRoc1RvRGF5cyhtb250aHMpICsgZGF5cykgKiA4NjRlNTtcbiAgICAgICAgICAgIGRheXMgPSAwO1xuICAgICAgICAgICAgbW9udGhzID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgY29kZSBidWJibGVzIHVwIHZhbHVlcywgc2VlIHRoZSB0ZXN0cyBmb3JcbiAgICAgICAgLy8gZXhhbXBsZXMgb2Ygd2hhdCB0aGF0IG1lYW5zLlxuICAgICAgICBkYXRhLm1pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kcyAlIDEwMDA7XG5cbiAgICAgICAgc2Vjb25kcyAgICAgICAgICAgPSBhYnNGbG9vcihtaWxsaXNlY29uZHMgLyAxMDAwKTtcbiAgICAgICAgZGF0YS5zZWNvbmRzICAgICAgPSBzZWNvbmRzICUgNjA7XG5cbiAgICAgICAgbWludXRlcyAgICAgICAgICAgPSBhYnNGbG9vcihzZWNvbmRzIC8gNjApO1xuICAgICAgICBkYXRhLm1pbnV0ZXMgICAgICA9IG1pbnV0ZXMgJSA2MDtcblxuICAgICAgICBob3VycyAgICAgICAgICAgICA9IGFic0Zsb29yKG1pbnV0ZXMgLyA2MCk7XG4gICAgICAgIGRhdGEuaG91cnMgICAgICAgID0gaG91cnMgJSAyNDtcblxuICAgICAgICBkYXlzICs9IGFic0Zsb29yKGhvdXJzIC8gMjQpO1xuXG4gICAgICAgIC8vIGNvbnZlcnQgZGF5cyB0byBtb250aHNcbiAgICAgICAgbW9udGhzRnJvbURheXMgPSBhYnNGbG9vcihkYXlzVG9Nb250aHMoZGF5cykpO1xuICAgICAgICBtb250aHMgKz0gbW9udGhzRnJvbURheXM7XG4gICAgICAgIGRheXMgLT0gYWJzQ2VpbChtb250aHNUb0RheXMobW9udGhzRnJvbURheXMpKTtcblxuICAgICAgICAvLyAxMiBtb250aHMgLT4gMSB5ZWFyXG4gICAgICAgIHllYXJzID0gYWJzRmxvb3IobW9udGhzIC8gMTIpO1xuICAgICAgICBtb250aHMgJT0gMTI7XG5cbiAgICAgICAgZGF0YS5kYXlzICAgPSBkYXlzO1xuICAgICAgICBkYXRhLm1vbnRocyA9IG1vbnRocztcbiAgICAgICAgZGF0YS55ZWFycyAgPSB5ZWFycztcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXlzVG9Nb250aHMgKGRheXMpIHtcbiAgICAgICAgLy8gNDAwIHllYXJzIGhhdmUgMTQ2MDk3IGRheXMgKHRha2luZyBpbnRvIGFjY291bnQgbGVhcCB5ZWFyIHJ1bGVzKVxuICAgICAgICAvLyA0MDAgeWVhcnMgaGF2ZSAxMiBtb250aHMgPT09IDQ4MDBcbiAgICAgICAgcmV0dXJuIGRheXMgKiA0ODAwIC8gMTQ2MDk3O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbnRoc1RvRGF5cyAobW9udGhzKSB7XG4gICAgICAgIC8vIHRoZSByZXZlcnNlIG9mIGRheXNUb01vbnRoc1xuICAgICAgICByZXR1cm4gbW9udGhzICogMTQ2MDk3IC8gNDgwMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcyAodW5pdHMpIHtcbiAgICAgICAgdmFyIGRheXM7XG4gICAgICAgIHZhciBtb250aHM7XG4gICAgICAgIHZhciBtaWxsaXNlY29uZHMgPSB0aGlzLl9taWxsaXNlY29uZHM7XG5cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG5cbiAgICAgICAgaWYgKHVuaXRzID09PSAnbW9udGgnIHx8IHVuaXRzID09PSAneWVhcicpIHtcbiAgICAgICAgICAgIGRheXMgICA9IHRoaXMuX2RheXMgICArIG1pbGxpc2Vjb25kcyAvIDg2NGU1O1xuICAgICAgICAgICAgbW9udGhzID0gdGhpcy5fbW9udGhzICsgZGF5c1RvTW9udGhzKGRheXMpO1xuICAgICAgICAgICAgcmV0dXJuIHVuaXRzID09PSAnbW9udGgnID8gbW9udGhzIDogbW9udGhzIC8gMTI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBoYW5kbGUgbWlsbGlzZWNvbmRzIHNlcGFyYXRlbHkgYmVjYXVzZSBvZiBmbG9hdGluZyBwb2ludCBtYXRoIGVycm9ycyAoaXNzdWUgIzE4NjcpXG4gICAgICAgICAgICBkYXlzID0gdGhpcy5fZGF5cyArIE1hdGgucm91bmQobW9udGhzVG9EYXlzKHRoaXMuX21vbnRocykpO1xuICAgICAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3dlZWsnICAgOiByZXR1cm4gZGF5cyAvIDcgICAgICsgbWlsbGlzZWNvbmRzIC8gNjA0OGU1O1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RheScgICAgOiByZXR1cm4gZGF5cyAgICAgICAgICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgICAgICAgICAgY2FzZSAnaG91cicgICA6IHJldHVybiBkYXlzICogMjQgICAgKyBtaWxsaXNlY29uZHMgLyAzNmU1O1xuICAgICAgICAgICAgICAgIGNhc2UgJ21pbnV0ZScgOiByZXR1cm4gZGF5cyAqIDE0NDAgICsgbWlsbGlzZWNvbmRzIC8gNmU0O1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NlY29uZCcgOiByZXR1cm4gZGF5cyAqIDg2NDAwICsgbWlsbGlzZWNvbmRzIC8gMTAwMDtcbiAgICAgICAgICAgICAgICAvLyBNYXRoLmZsb29yIHByZXZlbnRzIGZsb2F0aW5nIHBvaW50IG1hdGggZXJyb3JzIGhlcmVcbiAgICAgICAgICAgICAgICBjYXNlICdtaWxsaXNlY29uZCc6IHJldHVybiBNYXRoLmZsb29yKGRheXMgKiA4NjRlNSkgKyBtaWxsaXNlY29uZHM7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHVuaXQgJyArIHVuaXRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRPRE86IFVzZSB0aGlzLmFzKCdtcycpP1xuICAgIGZ1bmN0aW9uIGR1cmF0aW9uX2FzX192YWx1ZU9mICgpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMuX21pbGxpc2Vjb25kcyArXG4gICAgICAgICAgICB0aGlzLl9kYXlzICogODY0ZTUgK1xuICAgICAgICAgICAgKHRoaXMuX21vbnRocyAlIDEyKSAqIDI1OTJlNiArXG4gICAgICAgICAgICB0b0ludCh0aGlzLl9tb250aHMgLyAxMikgKiAzMTUzNmU2XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUFzIChhbGlhcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXMoYWxpYXMpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBhc01pbGxpc2Vjb25kcyA9IG1ha2VBcygnbXMnKTtcbiAgICB2YXIgYXNTZWNvbmRzICAgICAgPSBtYWtlQXMoJ3MnKTtcbiAgICB2YXIgYXNNaW51dGVzICAgICAgPSBtYWtlQXMoJ20nKTtcbiAgICB2YXIgYXNIb3VycyAgICAgICAgPSBtYWtlQXMoJ2gnKTtcbiAgICB2YXIgYXNEYXlzICAgICAgICAgPSBtYWtlQXMoJ2QnKTtcbiAgICB2YXIgYXNXZWVrcyAgICAgICAgPSBtYWtlQXMoJ3cnKTtcbiAgICB2YXIgYXNNb250aHMgICAgICAgPSBtYWtlQXMoJ00nKTtcbiAgICB2YXIgYXNZZWFycyAgICAgICAgPSBtYWtlQXMoJ3knKTtcblxuICAgIGZ1bmN0aW9uIGR1cmF0aW9uX2dldF9fZ2V0ICh1bml0cykge1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgcmV0dXJuIHRoaXNbdW5pdHMgKyAncyddKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUdldHRlcihuYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGF0YVtuYW1lXTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgbWlsbGlzZWNvbmRzID0gbWFrZUdldHRlcignbWlsbGlzZWNvbmRzJyk7XG4gICAgdmFyIHNlY29uZHMgICAgICA9IG1ha2VHZXR0ZXIoJ3NlY29uZHMnKTtcbiAgICB2YXIgbWludXRlcyAgICAgID0gbWFrZUdldHRlcignbWludXRlcycpO1xuICAgIHZhciBob3VycyAgICAgICAgPSBtYWtlR2V0dGVyKCdob3VycycpO1xuICAgIHZhciBkYXlzICAgICAgICAgPSBtYWtlR2V0dGVyKCdkYXlzJyk7XG4gICAgdmFyIG1vbnRocyAgICAgICA9IG1ha2VHZXR0ZXIoJ21vbnRocycpO1xuICAgIHZhciB5ZWFycyAgICAgICAgPSBtYWtlR2V0dGVyKCd5ZWFycycpO1xuXG4gICAgZnVuY3Rpb24gd2Vla3MgKCkge1xuICAgICAgICByZXR1cm4gYWJzRmxvb3IodGhpcy5kYXlzKCkgLyA3KTtcbiAgICB9XG5cbiAgICB2YXIgcm91bmQgPSBNYXRoLnJvdW5kO1xuICAgIHZhciB0aHJlc2hvbGRzID0ge1xuICAgICAgICBzOiA0NSwgIC8vIHNlY29uZHMgdG8gbWludXRlXG4gICAgICAgIG06IDQ1LCAgLy8gbWludXRlcyB0byBob3VyXG4gICAgICAgIGg6IDIyLCAgLy8gaG91cnMgdG8gZGF5XG4gICAgICAgIGQ6IDI2LCAgLy8gZGF5cyB0byBtb250aFxuICAgICAgICBNOiAxMSAgIC8vIG1vbnRocyB0byB5ZWFyXG4gICAgfTtcblxuICAgIC8vIGhlbHBlciBmdW5jdGlvbiBmb3IgbW9tZW50LmZuLmZyb20sIG1vbWVudC5mbi5mcm9tTm93LCBhbmQgbW9tZW50LmR1cmF0aW9uLmZuLmh1bWFuaXplXG4gICAgZnVuY3Rpb24gc3Vic3RpdHV0ZVRpbWVBZ28oc3RyaW5nLCBudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGlzRnV0dXJlLCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5yZWxhdGl2ZVRpbWUobnVtYmVyIHx8IDEsICEhd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZHVyYXRpb25faHVtYW5pemVfX3JlbGF0aXZlVGltZSAocG9zTmVnRHVyYXRpb24sIHdpdGhvdXRTdWZmaXgsIGxvY2FsZSkge1xuICAgICAgICB2YXIgZHVyYXRpb24gPSBjcmVhdGVfX2NyZWF0ZUR1cmF0aW9uKHBvc05lZ0R1cmF0aW9uKS5hYnMoKTtcbiAgICAgICAgdmFyIHNlY29uZHMgID0gcm91bmQoZHVyYXRpb24uYXMoJ3MnKSk7XG4gICAgICAgIHZhciBtaW51dGVzICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdtJykpO1xuICAgICAgICB2YXIgaG91cnMgICAgPSByb3VuZChkdXJhdGlvbi5hcygnaCcpKTtcbiAgICAgICAgdmFyIGRheXMgICAgID0gcm91bmQoZHVyYXRpb24uYXMoJ2QnKSk7XG4gICAgICAgIHZhciBtb250aHMgICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdNJykpO1xuICAgICAgICB2YXIgeWVhcnMgICAgPSByb3VuZChkdXJhdGlvbi5hcygneScpKTtcblxuICAgICAgICB2YXIgYSA9IHNlY29uZHMgPCB0aHJlc2hvbGRzLnMgJiYgWydzJywgc2Vjb25kc10gIHx8XG4gICAgICAgICAgICAgICAgbWludXRlcyA9PT0gMSAgICAgICAgICAmJiBbJ20nXSAgICAgICAgICAgfHxcbiAgICAgICAgICAgICAgICBtaW51dGVzIDwgdGhyZXNob2xkcy5tICYmIFsnbW0nLCBtaW51dGVzXSB8fFxuICAgICAgICAgICAgICAgIGhvdXJzICAgPT09IDEgICAgICAgICAgJiYgWydoJ10gICAgICAgICAgIHx8XG4gICAgICAgICAgICAgICAgaG91cnMgICA8IHRocmVzaG9sZHMuaCAmJiBbJ2hoJywgaG91cnNdICAgfHxcbiAgICAgICAgICAgICAgICBkYXlzICAgID09PSAxICAgICAgICAgICYmIFsnZCddICAgICAgICAgICB8fFxuICAgICAgICAgICAgICAgIGRheXMgICAgPCB0aHJlc2hvbGRzLmQgJiYgWydkZCcsIGRheXNdICAgIHx8XG4gICAgICAgICAgICAgICAgbW9udGhzICA9PT0gMSAgICAgICAgICAmJiBbJ00nXSAgICAgICAgICAgfHxcbiAgICAgICAgICAgICAgICBtb250aHMgIDwgdGhyZXNob2xkcy5NICYmIFsnTU0nLCBtb250aHNdICB8fFxuICAgICAgICAgICAgICAgIHllYXJzICAgPT09IDEgICAgICAgICAgJiYgWyd5J10gICAgICAgICAgIHx8IFsneXknLCB5ZWFyc107XG5cbiAgICAgICAgYVsyXSA9IHdpdGhvdXRTdWZmaXg7XG4gICAgICAgIGFbM10gPSArcG9zTmVnRHVyYXRpb24gPiAwO1xuICAgICAgICBhWzRdID0gbG9jYWxlO1xuICAgICAgICByZXR1cm4gc3Vic3RpdHV0ZVRpbWVBZ28uYXBwbHkobnVsbCwgYSk7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBhbGxvd3MgeW91IHRvIHNldCBhIHRocmVzaG9sZCBmb3IgcmVsYXRpdmUgdGltZSBzdHJpbmdzXG4gICAgZnVuY3Rpb24gZHVyYXRpb25faHVtYW5pemVfX2dldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZCAodGhyZXNob2xkLCBsaW1pdCkge1xuICAgICAgICBpZiAodGhyZXNob2xkc1t0aHJlc2hvbGRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGltaXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRocmVzaG9sZHNbdGhyZXNob2xkXTtcbiAgICAgICAgfVxuICAgICAgICB0aHJlc2hvbGRzW3RocmVzaG9sZF0gPSBsaW1pdDtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaHVtYW5pemUgKHdpdGhTdWZmaXgpIHtcbiAgICAgICAgdmFyIGxvY2FsZSA9IHRoaXMubG9jYWxlRGF0YSgpO1xuICAgICAgICB2YXIgb3V0cHV0ID0gZHVyYXRpb25faHVtYW5pemVfX3JlbGF0aXZlVGltZSh0aGlzLCAhd2l0aFN1ZmZpeCwgbG9jYWxlKTtcblxuICAgICAgICBpZiAod2l0aFN1ZmZpeCkge1xuICAgICAgICAgICAgb3V0cHV0ID0gbG9jYWxlLnBhc3RGdXR1cmUoK3RoaXMsIG91dHB1dCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbG9jYWxlLnBvc3Rmb3JtYXQob3V0cHV0KTtcbiAgICB9XG5cbiAgICB2YXIgaXNvX3N0cmluZ19fYWJzID0gTWF0aC5hYnM7XG5cbiAgICBmdW5jdGlvbiBpc29fc3RyaW5nX190b0lTT1N0cmluZygpIHtcbiAgICAgICAgLy8gZm9yIElTTyBzdHJpbmdzIHdlIGRvIG5vdCB1c2UgdGhlIG5vcm1hbCBidWJibGluZyBydWxlczpcbiAgICAgICAgLy8gICogbWlsbGlzZWNvbmRzIGJ1YmJsZSB1cCB1bnRpbCB0aGV5IGJlY29tZSBob3Vyc1xuICAgICAgICAvLyAgKiBkYXlzIGRvIG5vdCBidWJibGUgYXQgYWxsXG4gICAgICAgIC8vICAqIG1vbnRocyBidWJibGUgdXAgdW50aWwgdGhleSBiZWNvbWUgeWVhcnNcbiAgICAgICAgLy8gVGhpcyBpcyBiZWNhdXNlIHRoZXJlIGlzIG5vIGNvbnRleHQtZnJlZSBjb252ZXJzaW9uIGJldHdlZW4gaG91cnMgYW5kIGRheXNcbiAgICAgICAgLy8gKHRoaW5rIG9mIGNsb2NrIGNoYW5nZXMpXG4gICAgICAgIC8vIGFuZCBhbHNvIG5vdCBiZXR3ZWVuIGRheXMgYW5kIG1vbnRocyAoMjgtMzEgZGF5cyBwZXIgbW9udGgpXG4gICAgICAgIHZhciBzZWNvbmRzID0gaXNvX3N0cmluZ19fYWJzKHRoaXMuX21pbGxpc2Vjb25kcykgLyAxMDAwO1xuICAgICAgICB2YXIgZGF5cyAgICAgICAgID0gaXNvX3N0cmluZ19fYWJzKHRoaXMuX2RheXMpO1xuICAgICAgICB2YXIgbW9udGhzICAgICAgID0gaXNvX3N0cmluZ19fYWJzKHRoaXMuX21vbnRocyk7XG4gICAgICAgIHZhciBtaW51dGVzLCBob3VycywgeWVhcnM7XG5cbiAgICAgICAgLy8gMzYwMCBzZWNvbmRzIC0+IDYwIG1pbnV0ZXMgLT4gMSBob3VyXG4gICAgICAgIG1pbnV0ZXMgICAgICAgICAgID0gYWJzRmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICAgICAgaG91cnMgICAgICAgICAgICAgPSBhYnNGbG9vcihtaW51dGVzIC8gNjApO1xuICAgICAgICBzZWNvbmRzICU9IDYwO1xuICAgICAgICBtaW51dGVzICU9IDYwO1xuXG4gICAgICAgIC8vIDEyIG1vbnRocyAtPiAxIHllYXJcbiAgICAgICAgeWVhcnMgID0gYWJzRmxvb3IobW9udGhzIC8gMTIpO1xuICAgICAgICBtb250aHMgJT0gMTI7XG5cblxuICAgICAgICAvLyBpbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZG9yZGlsbGUvbW9tZW50LWlzb2R1cmF0aW9uL2Jsb2IvbWFzdGVyL21vbWVudC5pc29kdXJhdGlvbi5qc1xuICAgICAgICB2YXIgWSA9IHllYXJzO1xuICAgICAgICB2YXIgTSA9IG1vbnRocztcbiAgICAgICAgdmFyIEQgPSBkYXlzO1xuICAgICAgICB2YXIgaCA9IGhvdXJzO1xuICAgICAgICB2YXIgbSA9IG1pbnV0ZXM7XG4gICAgICAgIHZhciBzID0gc2Vjb25kcztcbiAgICAgICAgdmFyIHRvdGFsID0gdGhpcy5hc1NlY29uZHMoKTtcblxuICAgICAgICBpZiAoIXRvdGFsKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIHRoZSBzYW1lIGFzIEMjJ3MgKE5vZGEpIGFuZCBweXRob24gKGlzb2RhdGUpLi4uXG4gICAgICAgICAgICAvLyBidXQgbm90IG90aGVyIEpTIChnb29nLmRhdGUpXG4gICAgICAgICAgICByZXR1cm4gJ1AwRCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKHRvdGFsIDwgMCA/ICctJyA6ICcnKSArXG4gICAgICAgICAgICAnUCcgK1xuICAgICAgICAgICAgKFkgPyBZICsgJ1knIDogJycpICtcbiAgICAgICAgICAgIChNID8gTSArICdNJyA6ICcnKSArXG4gICAgICAgICAgICAoRCA/IEQgKyAnRCcgOiAnJykgK1xuICAgICAgICAgICAgKChoIHx8IG0gfHwgcykgPyAnVCcgOiAnJykgK1xuICAgICAgICAgICAgKGggPyBoICsgJ0gnIDogJycpICtcbiAgICAgICAgICAgIChtID8gbSArICdNJyA6ICcnKSArXG4gICAgICAgICAgICAocyA/IHMgKyAnUycgOiAnJyk7XG4gICAgfVxuXG4gICAgdmFyIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8gPSBEdXJhdGlvbi5wcm90b3R5cGU7XG5cbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLmFicyAgICAgICAgICAgID0gZHVyYXRpb25fYWJzX19hYnM7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5hZGQgICAgICAgICAgICA9IGR1cmF0aW9uX2FkZF9zdWJ0cmFjdF9fYWRkO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8uc3VidHJhY3QgICAgICAgPSBkdXJhdGlvbl9hZGRfc3VidHJhY3RfX3N1YnRyYWN0O1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8uYXMgICAgICAgICAgICAgPSBhcztcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLmFzTWlsbGlzZWNvbmRzID0gYXNNaWxsaXNlY29uZHM7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5hc1NlY29uZHMgICAgICA9IGFzU2Vjb25kcztcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLmFzTWludXRlcyAgICAgID0gYXNNaW51dGVzO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8uYXNIb3VycyAgICAgICAgPSBhc0hvdXJzO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8uYXNEYXlzICAgICAgICAgPSBhc0RheXM7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5hc1dlZWtzICAgICAgICA9IGFzV2Vla3M7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5hc01vbnRocyAgICAgICA9IGFzTW9udGhzO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8uYXNZZWFycyAgICAgICAgPSBhc1llYXJzO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8udmFsdWVPZiAgICAgICAgPSBkdXJhdGlvbl9hc19fdmFsdWVPZjtcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLl9idWJibGUgICAgICAgID0gYnViYmxlO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8uZ2V0ICAgICAgICAgICAgPSBkdXJhdGlvbl9nZXRfX2dldDtcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLm1pbGxpc2Vjb25kcyAgID0gbWlsbGlzZWNvbmRzO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8uc2Vjb25kcyAgICAgICAgPSBzZWNvbmRzO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8ubWludXRlcyAgICAgICAgPSBtaW51dGVzO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8uaG91cnMgICAgICAgICAgPSBob3VycztcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLmRheXMgICAgICAgICAgID0gZGF5cztcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLndlZWtzICAgICAgICAgID0gd2Vla3M7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5tb250aHMgICAgICAgICA9IG1vbnRocztcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLnllYXJzICAgICAgICAgID0geWVhcnM7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5odW1hbml6ZSAgICAgICA9IGh1bWFuaXplO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8udG9JU09TdHJpbmcgICAgPSBpc29fc3RyaW5nX190b0lTT1N0cmluZztcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLnRvU3RyaW5nICAgICAgID0gaXNvX3N0cmluZ19fdG9JU09TdHJpbmc7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by50b0pTT04gICAgICAgICA9IGlzb19zdHJpbmdfX3RvSVNPU3RyaW5nO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8ubG9jYWxlICAgICAgICAgPSBsb2NhbGU7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5sb2NhbGVEYXRhICAgICA9IGxvY2FsZURhdGE7XG5cbiAgICAvLyBEZXByZWNhdGlvbnNcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLnRvSXNvU3RyaW5nID0gZGVwcmVjYXRlKCd0b0lzb1N0cmluZygpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgdG9JU09TdHJpbmcoKSBpbnN0ZWFkIChub3RpY2UgdGhlIGNhcGl0YWxzKScsIGlzb19zdHJpbmdfX3RvSVNPU3RyaW5nKTtcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLmxhbmcgPSBsYW5nO1xuXG4gICAgLy8gU2lkZSBlZmZlY3QgaW1wb3J0c1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1gnLCAwLCAwLCAndW5peCcpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd4JywgMCwgMCwgJ3ZhbHVlT2YnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3gnLCBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignWCcsIG1hdGNoVGltZXN0YW1wKTtcbiAgICBhZGRQYXJzZVRva2VuKCdYJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKHBhcnNlRmxvYXQoaW5wdXQsIDEwKSAqIDEwMDApO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ3gnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUodG9JbnQoaW5wdXQpKTtcbiAgICB9KTtcblxuICAgIC8vIFNpZGUgZWZmZWN0IGltcG9ydHNcblxuXG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLnZlcnNpb24gPSAnMi4xMC42JztcblxuICAgIHNldEhvb2tDYWxsYmFjayhsb2NhbF9fY3JlYXRlTG9jYWwpO1xuXG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLmZuICAgICAgICAgICAgICAgICAgICA9IG1vbWVudFByb3RvdHlwZTtcbiAgICB1dGlsc19ob29rc19faG9va3MubWluICAgICAgICAgICAgICAgICAgID0gbWluO1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy5tYXggICAgICAgICAgICAgICAgICAgPSBtYXg7XG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLnV0YyAgICAgICAgICAgICAgICAgICA9IGNyZWF0ZV91dGNfX2NyZWF0ZVVUQztcbiAgICB1dGlsc19ob29rc19faG9va3MudW5peCAgICAgICAgICAgICAgICAgID0gbW9tZW50X19jcmVhdGVVbml4O1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy5tb250aHMgICAgICAgICAgICAgICAgPSBsaXN0c19fbGlzdE1vbnRocztcbiAgICB1dGlsc19ob29rc19faG9va3MuaXNEYXRlICAgICAgICAgICAgICAgID0gaXNEYXRlO1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy5sb2NhbGUgICAgICAgICAgICAgICAgPSBsb2NhbGVfbG9jYWxlc19fZ2V0U2V0R2xvYmFsTG9jYWxlO1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy5pbnZhbGlkICAgICAgICAgICAgICAgPSB2YWxpZF9fY3JlYXRlSW52YWxpZDtcbiAgICB1dGlsc19ob29rc19faG9va3MuZHVyYXRpb24gICAgICAgICAgICAgID0gY3JlYXRlX19jcmVhdGVEdXJhdGlvbjtcbiAgICB1dGlsc19ob29rc19faG9va3MuaXNNb21lbnQgICAgICAgICAgICAgID0gaXNNb21lbnQ7XG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLndlZWtkYXlzICAgICAgICAgICAgICA9IGxpc3RzX19saXN0V2Vla2RheXM7XG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLnBhcnNlWm9uZSAgICAgICAgICAgICA9IG1vbWVudF9fY3JlYXRlSW5ab25lO1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy5sb2NhbGVEYXRhICAgICAgICAgICAgPSBsb2NhbGVfbG9jYWxlc19fZ2V0TG9jYWxlO1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy5pc0R1cmF0aW9uICAgICAgICAgICAgPSBpc0R1cmF0aW9uO1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy5tb250aHNTaG9ydCAgICAgICAgICAgPSBsaXN0c19fbGlzdE1vbnRoc1Nob3J0O1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy53ZWVrZGF5c01pbiAgICAgICAgICAgPSBsaXN0c19fbGlzdFdlZWtkYXlzTWluO1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy5kZWZpbmVMb2NhbGUgICAgICAgICAgPSBkZWZpbmVMb2NhbGU7XG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLndlZWtkYXlzU2hvcnQgICAgICAgICA9IGxpc3RzX19saXN0V2Vla2RheXNTaG9ydDtcbiAgICB1dGlsc19ob29rc19faG9va3Mubm9ybWFsaXplVW5pdHMgICAgICAgID0gbm9ybWFsaXplVW5pdHM7XG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLnJlbGF0aXZlVGltZVRocmVzaG9sZCA9IGR1cmF0aW9uX2h1bWFuaXplX19nZXRTZXRSZWxhdGl2ZVRpbWVUaHJlc2hvbGQ7XG5cbiAgICB2YXIgX21vbWVudCA9IHV0aWxzX2hvb2tzX19ob29rcztcblxuICAgIHJldHVybiBfbW9tZW50O1xuXG59KSk7IiwiLyoqXG4gKiBAb3ZlcnZpZXcgVXRpbGl0eSBjbGFzcyBmb3IgZW5jb2RpbmcgYW5kIGRlY29kaW5nIHNpbXVsYXRlZCBwYWNrZXRzLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIE5ldFNpbVV0aWxzID0gcmVxdWlyZSgnLi9OZXRTaW1VdGlscycpO1xudmFyIERhdGFDb252ZXJ0ZXJzID0gcmVxdWlyZSgnLi9EYXRhQ29udmVydGVycycpO1xudmFyIE5ldFNpbUdsb2JhbHMgPSByZXF1aXJlKCcuL05ldFNpbUdsb2JhbHMnKTtcblxuLyoqXG4gKiBXcmFwcyBiaW5hcnkgcGFja2V0IGNvbnRlbnQgd2l0aCB0aGUgZm9ybWF0IGluZm9ybWF0aW9uIHJlcXVpcmVkIHRvXG4gKiBpbnRlcnByZXQgaXQuXG4gKiBAcGFyYW0ge1BhY2tldC5IZWFkZXJUeXBlW119IGZvcm1hdFNwZWNcbiAqIEBwYXJhbSB7c3RyaW5nfSBiaW5hcnlcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgUGFja2V0ID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm9ybWF0U3BlYywgYmluYXJ5KSB7XG4gIHZhciBsZXZlbCA9IE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKTtcblxuICAvKiogQHR5cGUge1BhY2tldC5FbmNvZGVyfSAqL1xuICB0aGlzLmVuY29kZXIgPSBuZXcgUGFja2V0LkVuY29kZXIobGV2ZWwuYWRkcmVzc0Zvcm1hdCxcbiAgICAgIGxldmVsLnBhY2tldENvdW50Qml0V2lkdGgsIGZvcm1hdFNwZWMpO1xuXG4gIC8qKiBAdHlwZSB7c3RyaW5nfSBvZiBiaW5hcnkgY29udGVudCAqL1xuICB0aGlzLmJpbmFyeSA9IGJpbmFyeTtcbn07XG5cbi8qKlxuICogUG9zc2libGUgcGFja2V0IGhlYWRlciBmaWVsZHMuICBWYWx1ZXMgdG8gdGhpcyBlbnVtIGJlY29tZSBrZXlzXG4gKiB0aGF0IGNhbiBiZSB1c2VkIHdoZW4gZGVmaW5pbmcgYSBsZXZlbCBjb25maWd1cmF0aW9uLiAgVGhleSBhbHNvIGNvcnJlc3BvbmRcbiAqIHRvIGNsYXNzIG5hbWVzIHRoYXQgZ2V0IGFwcGxpZWQgdG8gZmllbGRzIHJlcHJlc2VudGluZyBkYXRhIGluIHRoYXQgY29sdW1uLlxuICogQGVudW0ge3N0cmluZ31cbiAqIEByZWFkb25seVxuICovXG5QYWNrZXQuSGVhZGVyVHlwZSA9IHtcbiAgVE9fQUREUkVTUzogJ3RvQWRkcmVzcycsXG4gIEZST01fQUREUkVTUzogJ2Zyb21BZGRyZXNzJyxcbiAgUEFDS0VUX0lOREVYOiAncGFja2V0SW5kZXgnLFxuICBQQUNLRVRfQ09VTlQ6ICdwYWNrZXRDb3VudCdcbn07XG5cbi8qKlxuICogV2hldGhlciB0aGUgZ2l2ZW4gaGVhZGVyIGZpZWxkIHR5cGUgd2lsbCB1c2UgdGhlIGFkZHJlc3MgZm9ybWF0LlxuICogQHBhcmFtIHtQYWNrZXQuSGVhZGVyVHlwZX0gaGVhZGVyVHlwZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cblBhY2tldC5pc0FkZHJlc3NGaWVsZCA9IGZ1bmN0aW9uIChoZWFkZXJUeXBlKSB7XG4gIHJldHVybiBoZWFkZXJUeXBlID09PSBQYWNrZXQuSGVhZGVyVHlwZS5UT19BRERSRVNTIHx8XG4gICAgICBoZWFkZXJUeXBlID09PSBQYWNrZXQuSGVhZGVyVHlwZS5GUk9NX0FERFJFU1M7XG59O1xuXG4vKipcbiAqIFdoZXRoZXIgdGhlIGdpdmVuIGhlYWRlciBmaWVsZCB3aWxsIHVzZSB0aGUgcGFja2V0Q291bnQgYml0IHdpZHRoLlxuICogQHBhcmFtIHtQYWNrZXQuSGVhZGVyVHlwZX0gaGVhZGVyVHlwZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cblBhY2tldC5pc1BhY2tldEZpZWxkID0gZnVuY3Rpb24gKGhlYWRlclR5cGUpIHtcbiAgcmV0dXJuIGhlYWRlclR5cGUgPT09IFBhY2tldC5IZWFkZXJUeXBlLlBBQ0tFVF9JTkRFWCB8fFxuICAgICAgaGVhZGVyVHlwZSA9PT0gUGFja2V0LkhlYWRlclR5cGUuUEFDS0VUX0NPVU5UO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1BhY2tldC5IZWFkZXJUeXBlfSBoZWFkZXJUeXBlXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBvZiBiaW5hcnkgY29udGVudFxuICovXG5QYWNrZXQucHJvdG90eXBlLmdldEhlYWRlckFzQmluYXJ5ID0gZnVuY3Rpb24gKGhlYWRlclR5cGUpIHtcbiAgcmV0dXJuIHRoaXMuZW5jb2Rlci5nZXRIZWFkZXIoaGVhZGVyVHlwZSwgdGhpcy5iaW5hcnkpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1BhY2tldC5IZWFkZXJUeXBlfSBoZWFkZXJUeXBlXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5QYWNrZXQucHJvdG90eXBlLmdldEhlYWRlckFzSW50ID0gZnVuY3Rpb24gKGhlYWRlclR5cGUpIHtcbiAgcmV0dXJuIHRoaXMuZW5jb2Rlci5nZXRIZWFkZXJBc0ludChoZWFkZXJUeXBlLCB0aGlzLmJpbmFyeSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7UGFja2V0LkhlYWRlclR5cGV9IGhlYWRlclR5cGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cblBhY2tldC5wcm90b3R5cGUuZ2V0SGVhZGVyQXNBZGRyZXNzU3RyaW5nID0gZnVuY3Rpb24gKGhlYWRlclR5cGUpIHtcbiAgcmV0dXJuIHRoaXMuZW5jb2Rlci5nZXRIZWFkZXJBc0FkZHJlc3NTdHJpbmcoaGVhZGVyVHlwZSwgdGhpcy5iaW5hcnkpO1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBiaW5hcnkgY29udGVudFxuICovXG5QYWNrZXQucHJvdG90eXBlLmdldEJvZHlBc0JpbmFyeSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuZW5jb2Rlci5nZXRCb2R5KHRoaXMuYmluYXJ5KTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdHNQZXJDaGFyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBhc2NpaSBjb250ZW50XG4gKi9cblBhY2tldC5wcm90b3R5cGUuZ2V0Qm9keUFzQXNjaWkgPSBmdW5jdGlvbiAoYml0c1BlckNoYXIpIHtcbiAgcmV0dXJuIHRoaXMuZW5jb2Rlci5nZXRCb2R5QXNBc2NpaSh0aGlzLmJpbmFyeSwgYml0c1BlckNoYXIpO1xufTtcblxuLyoqXG4gKiBHaXZlbiBhIHBhcnRpY3VsYXIgcGFja2V0IGZvcm1hdCwgY2FuIGNvbnZlcnQgYSBzZXQgb2YgZmllbGRzIGRvd25cbiAqIGludG8gYSBiaW5hcnkgc3RyaW5nIG1hdGNoaW5nIHRoZSBzcGVjaWZpY2F0aW9uLCBvciBleHRyYWN0IGZpZWxkc1xuICogb24gZGVtYW5kIGZyb20gYSBiaW5hcnkgc3RyaW5nLlxuICogQHBhcmFtIHtBZGRyZXNzSGVhZGVyRm9ybWF0fSBhZGRyZXNzRm9ybWF0XG4gKiBAcGFyYW0ge251bWJlcn0gcGFja2V0Q291bnRCaXRXaWR0aFxuICogQHBhcmFtIHtQYWNrZXQuSGVhZGVyVHlwZVtdfSBoZWFkZXJTcGVjIC0gU3BlY2lmaWNhdGlvbiBvZiBwYWNrZXQgZm9ybWF0LCBhblxuICogICAgICAgIG9yZGVyZWQgc2V0IG9mIG9iamVjdHMgaW4gdGhlIGZvcm0ge2tleTpzdHJpbmcsIGJpdHM6bnVtYmVyfSB3aGVyZVxuICogICAgICAgIGtleSBpcyB0aGUgZmllbGQgbmFtZSB5b3UnbGwgdXNlIHRvIHJldHJpZXZlIHRoZSBpbmZvcm1hdGlvbiwgYW5kXG4gKiAgICAgICAgYml0cyBpcyB0aGUgbGVuZ3RoIG9mIHRoZSBmaWVsZC5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5QYWNrZXQuRW5jb2RlciA9IGZ1bmN0aW9uIChhZGRyZXNzRm9ybWF0LCBwYWNrZXRDb3VudEJpdFdpZHRoLCBoZWFkZXJTcGVjKSB7XG4gIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICB0aGlzLmFkZHJlc3NGb3JtYXRfID0gYWRkcmVzc0Zvcm1hdDtcblxuICB0aGlzLmFkZHJlc3NCaXRXaWR0aF8gPSB0aGlzLmNhbGN1bGF0ZUJpdFdpZHRoKHRoaXMuYWRkcmVzc0Zvcm1hdF8pO1xuXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICB0aGlzLnBhY2tldENvdW50Qml0V2lkdGhfID0gcGFja2V0Q291bnRCaXRXaWR0aDtcblxuICAvKiogQHR5cGUge1BhY2tldC5IZWFkZXJUeXBlW119ICovXG4gIHRoaXMuaGVhZGVyU3BlY18gPSBoZWFkZXJTcGVjO1xuXG4gIHRoaXMudmFsaWRhdGVTcGVjKCk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7QWRkcmVzc0hlYWRlckZvcm1hdH0gYWRkcmVzc0Zvcm1hdFxuICogQHByaXZhdGVcbiAqL1xuUGFja2V0LkVuY29kZXIucHJvdG90eXBlLmNhbGN1bGF0ZUJpdFdpZHRoID0gZnVuY3Rpb24gKGFkZHJlc3NGb3JtYXQpIHtcbiAgcmV0dXJuIGFkZHJlc3NGb3JtYXQuc3BsaXQoL1xcRCsvKS5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGN1cikge1xuICAgIHJldHVybiBwcmV2ICsgKHBhcnNlSW50KGN1ciwgMTApIHx8IDApO1xuICB9LCAwKTtcbn07XG5cbi8qKlxuICogVmVyaWZ5IHRoYXQgdGhlIGNvbmZpZ3VyZWQgZm9ybWF0IHNwZWNpZmljYXRpb24gZGVzY3JpYmVzIGEgdmFsaWQgZm9ybWF0IHRoYXRcbiAqIGNhbiBiZSB1c2VkIGJ5IHRoZSBQYWNrZXQuRW5jb2RlciBvYmplY3QuXG4gKi9cblBhY2tldC5FbmNvZGVyLnByb3RvdHlwZS52YWxpZGF0ZVNwZWMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBrZXlDYWNoZSA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5oZWFkZXJTcGVjXy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpc0FkZHJlc3NGaWVsZCA9IFBhY2tldC5pc0FkZHJlc3NGaWVsZCh0aGlzLmhlYWRlclNwZWNfW2ldKTtcbiAgICB2YXIgaXNQYWNrZXRGaWVsZCA9IFBhY2tldC5pc1BhY2tldEZpZWxkKHRoaXMuaGVhZGVyU3BlY19baV0pO1xuXG4gICAgaWYgKGlzQWRkcmVzc0ZpZWxkICYmIHRoaXMuYWRkcmVzc0JpdFdpZHRoXyA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBwYWNrZXQgZm9ybWF0OiBJbmNsdWRlcyBhbiBhZGRyZXNzIGZpZWxkIGJ1dCBcIiArXG4gICAgICAgIFwiIGFkZHJlc3MgZm9ybWF0IGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIGlmIChpc1BhY2tldEZpZWxkICYmIHRoaXMucGFja2V0Q291bnRCaXRXaWR0aF8gPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcGFja2V0IGZvcm1hdDogSW5jbHVkZXMgYSBwYWNrZXQgY291bnQgZmllbGQgXCIgK1xuICAgICAgICAgIFwiIGJ1dCBwYWNrZXQgZmllbGQgYml0IHdpZHRoIGlzIHplcm9cIik7XG4gICAgfVxuXG4gICAgaWYgKCFpc0FkZHJlc3NGaWVsZCAmJiAhaXNQYWNrZXRGaWVsZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBwYWNrZXQgZm9ybWF0OiBVbnJlY29nbml6ZWQgcGFja2V0IGhlYWRlciBmaWVsZCBcIiArXG4gICAgICAgICAgdGhpcy5oZWFkZXJTcGVjX1tpXSk7XG4gICAgfVxuXG4gICAgaWYgKGtleUNhY2hlLmhhc093blByb3BlcnR5KHRoaXMuaGVhZGVyU3BlY19baV0pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHBhY2tldCBmb3JtYXQ6IEZpZWxkIGtleXMgbXVzdCBiZSB1bmlxdWUuXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBrZXlDYWNoZVt0aGlzLmhlYWRlclNwZWNfW2ldXSA9ICd1c2VkJztcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogUmV0cmlldmUgcmVxdWVzdGVkIGhlYWRlciBmaWVsZCBieSBrZXkgZnJvbSB0aGUgcHJvdmlkZWQgYmluYXJ5IGJsb2IuXG4gKlxuICogQHBhcmFtIHtQYWNrZXQuSGVhZGVyVHlwZX0ga2V5IC0gd2hpY2ggaGVhZGVyIHRvIHJldHJpZXZlXG4gKiBAcGFyYW0ge3N0cmluZ30gYmluYXJ5IGZvciBlbnRpcmUgcGFja2V0XG4gKiBAcmV0dXJucyB7c3RyaW5nfSBiaW5hcnkgc3RyaW5nIHZhbHVlIGZvciBoZWFkZXIgZmllbGRcbiAqIEB0aHJvd3Mgd2hlbiByZXF1ZXN0ZWQga2V5IGlzIG5vdCBpbiB0aGUgY29uZmlndXJlZCBwYWNrZXQgc3BlY1xuICovXG5QYWNrZXQuRW5jb2Rlci5wcm90b3R5cGUuZ2V0SGVhZGVyID0gZnVuY3Rpb24gKGtleSwgYmluYXJ5KSB7XG4gIHZhciBydWxlSW5kZXggPSAwLCBiaW5hcnlJbmRleCA9IDA7XG5cbiAgLy8gU3RyaXAgd2hpdGVzcGFjZSBzbyB3ZSBkb24ndCB3b3JyeSBhYm91dCBiZWluZyBwYXNzZWQgZm9ybWF0dGVkIGJpbmFyeVxuICBiaW5hcnkgPSBEYXRhQ29udmVydGVycy5taW5pZnlCaW5hcnkoYmluYXJ5KTtcblxuICB3aGlsZSAodGhpcy5oZWFkZXJTcGVjX1tydWxlSW5kZXhdICE9PSBrZXkpIHtcbiAgICBiaW5hcnlJbmRleCArPSB0aGlzLmdldEZpZWxkQml0V2lkdGgodGhpcy5oZWFkZXJTcGVjX1tydWxlSW5kZXhdKTtcbiAgICBydWxlSW5kZXgrKztcblxuICAgIGlmIChydWxlSW5kZXggPj0gdGhpcy5oZWFkZXJTcGVjXy5sZW5ndGgpIHtcbiAgICAgIC8vIERpZG4ndCBmaW5kIGtleVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdLZXkgXCInICsga2V5ICsgJ1wiIG5vdCBmb3VuZCBpbiBwYWNrZXQgc3BlYy4nKTtcbiAgICB9XG4gIH1cblxuICAvLyBSZWFkIHZhbHVlXG4gIHZhciBiaXRXaWR0aCA9IHRoaXMuZ2V0RmllbGRCaXRXaWR0aCh0aGlzLmhlYWRlclNwZWNfW3J1bGVJbmRleF0pO1xuICB2YXIgYml0cyA9IGJpbmFyeS5zbGljZShiaW5hcnlJbmRleCwgYmluYXJ5SW5kZXggKyBiaXRXaWR0aCk7XG5cbiAgLy8gUmlnaHQtcGFkIHdpdGggemVyb2VzIHRvIGRlc2lyZWQgc2l6ZVxuICBpZiAoYml0V2lkdGggIT09IEluZmluaXR5KSB7XG4gICAgd2hpbGUgKGJpdHMubGVuZ3RoIDwgYml0V2lkdGgpIHtcbiAgICAgIGJpdHMgKz0gJzAnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBiaXRzO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1BhY2tldC5IZWFkZXJUeXBlfSBrZXkgLSBmaWVsZCBuYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gYmluYXJ5IC0gZW50aXJlIHBhY2tldCBhcyBhIGJpbmFyeSBzdHJpbmdcbiAqIEByZXR1cm5zIHtudW1iZXJ9IC0gcmVxdWVzdGVkIGZpZWxkLCBpbnRlcnByZXRlZCBhcyBhbiBpbnQuXG4gKi9cblBhY2tldC5FbmNvZGVyLnByb3RvdHlwZS5nZXRIZWFkZXJBc0ludCA9IGZ1bmN0aW9uIChrZXksIGJpbmFyeSkge1xuICByZXR1cm4gRGF0YUNvbnZlcnRlcnMuYmluYXJ5VG9JbnQodGhpcy5nZXRIZWFkZXIoa2V5LCBiaW5hcnkpKTtcbn07XG5cbi8qKlxuICogUmV0cmlldmUgYW4gYWRkcmVzcyBoZWFkZXIgYXMgYSBzdHJpbmcsIHNvIHdlIGNhbiBnaXZlIHRoZSBtdWx0aS1wYXJ0XG4gKiByZXByZXNlbnRhdGlvbi5cbiAqIEBwYXJhbSB7UGFja2V0LkhlYWRlclR5cGV9IGtleVxuICogQHBhcmFtIHtzdHJpbmd9IGJpbmFyeSBmb3Igd2hvbGUgcGFja2V0XG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5QYWNrZXQuRW5jb2Rlci5wcm90b3R5cGUuZ2V0SGVhZGVyQXNBZGRyZXNzU3RyaW5nID0gZnVuY3Rpb24gKGtleSwgYmluYXJ5KSB7XG4gIHJldHVybiBEYXRhQ29udmVydGVycy5iaW5hcnlUb0FkZHJlc3NTdHJpbmcoXG4gICAgICB0aGlzLmdldEhlYWRlcihrZXksIGJpbmFyeSksIHRoaXMuYWRkcmVzc0Zvcm1hdF8pO1xufTtcblxuLyoqXG4gKiBTa2lwIG92ZXIgaGVhZGVycyBnaXZlbiBpbiBzcGVjIGFuZCByZXR1cm4gcmVtYWluZGVyIG9mIGJpbmFyeSB3aGljaFxuICogbXVzdCBiZSB0aGUgbWVzc2FnZSBib2R5LlxuICogQHBhcmFtIHtzdHJpbmd9IGJpbmFyeSAtIGVudGlyZSBwYWNrZXQgYXMgYSBiaW5hcnkgc3RyaW5nXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBwYWNrZXQgYm9keSBiaW5hcnkgc3RyaW5nXG4gKi9cblBhY2tldC5FbmNvZGVyLnByb3RvdHlwZS5nZXRCb2R5ID0gZnVuY3Rpb24gKGJpbmFyeSkge1xuICByZXR1cm4gRGF0YUNvbnZlcnRlcnMubWluaWZ5QmluYXJ5KGJpbmFyeSlcbiAgICAgIC5zbGljZSh0aGlzLmdldEhlYWRlckxlbmd0aCgpKTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge251bWJlcn0gSG93IG1hbnkgYml0cyB0aGUgaGVhZGVyIHRha2VzIHVwXG4gKi9cblBhY2tldC5FbmNvZGVyLnByb3RvdHlwZS5nZXRIZWFkZXJMZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmhlYWRlclNwZWNfLnJlZHVjZShmdW5jdGlvbiAocHJldiwgY3VyKSB7XG4gICAgcmV0dXJuIHByZXYgKyB0aGlzLmdldEZpZWxkQml0V2lkdGgoY3VyKTtcbiAgfS5iaW5kKHRoaXMpLCAwKTtcbn07XG5cbi8qKlxuICogU2tpcCBvdmVyIGhlYWRlcnMgZ2l2ZW4gaW4gc3BlYywgYW5kIHJldHVybiByZW1haW5kZXIgb2YgcGFja2V0IGludGVycHJldGVkXG4gKiB0byBhc2NpaSB3aXRoIHRoZSBnaXZlbiBjaGFyYWN0ZXIgd2lkdGguXG4gKiBAcGFyYW0ge3N0cmluZ30gYmluYXJ5IC0gZW50aXJlIHBhY2tldCBhcyBhIGJpbmFyeSBzdHJpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRzUGVyQ2hhciAtIGJpdHMgdG8gcmVwcmVzZW50IGFzIGEgc2luZ2xlIGNoYXJhY3RlcixcbiAqICAgICAgICByZWNvbW1lbmRlZCB0byB1c2UgOCBmb3Igbm9ybWFsIEFTQ0lJLlxuICovXG5QYWNrZXQuRW5jb2Rlci5wcm90b3R5cGUuZ2V0Qm9keUFzQXNjaWkgPSBmdW5jdGlvbiAoYmluYXJ5LCBiaXRzUGVyQ2hhcikge1xuICByZXR1cm4gRGF0YUNvbnZlcnRlcnMuYmluYXJ5VG9Bc2NpaSh0aGlzLmdldEJvZHkoYmluYXJ5KSwgYml0c1BlckNoYXIpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1BhY2tldC5IZWFkZXJUeXBlfSBoZWFkZXJUeXBlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBob3cgbWFueSBiaXRzIHRoYXQgZmllbGQgc2hvdWxkIHRha2UgaW4gdGhlIHBhY2tldCBoZWFkZXJcbiAqL1xuUGFja2V0LkVuY29kZXIucHJvdG90eXBlLmdldEZpZWxkQml0V2lkdGggPSBmdW5jdGlvbiAoaGVhZGVyVHlwZSkge1xuICBpZiAoUGFja2V0LmlzQWRkcmVzc0ZpZWxkKGhlYWRlclR5cGUpKSB7XG4gICAgcmV0dXJuIHRoaXMuYWRkcmVzc0JpdFdpZHRoXztcbiAgfVxuXG4gIGlmIChQYWNrZXQuaXNQYWNrZXRGaWVsZChoZWFkZXJUeXBlKSkge1xuICAgIHJldHVybiB0aGlzLnBhY2tldENvdW50Qml0V2lkdGhfO1xuICB9XG5cbiAgLy8gU2hvdWxkIG5ldmVyIGdldCBoZXJlLlxuICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gc2VsZWN0IGEgYml0LXdpZHRoIGZvciBmaWVsZCBcIiArIGhlYWRlclR5cGUpO1xufTtcblxuLyoqXG4gKiBHaXZlbiBhIFwiaGVhZGVyc1wiIG9iamVjdCB3aGVyZSB0aGUgdmFsdWVzIGFyZSBudW1iZXJzLCByZXR1cm5zIGEgY29ycmVzcG9uZGluZ1xuICogXCJoZWFkZXJzXCIgb2JqZWN0IHdoZXJlIHRoZSB2YWx1ZXMgaGF2ZSBhbGwgYmVlbiBjb252ZXJ0ZWQgdG8gYmluYXJ5XG4gKiByZXByZXNlbnRhdGlvbnMgYXQgdGhlIGFwcHJvcHJpYXRlIHdpZHRoLiAgT25seSBoZWFkZXIgZmllbGRzIHRoYXQgYXBwZWFyIGluXG4gKiB0aGUgY29uZmlndXJlZCBwYWNrZXQgaGVhZGVyIGZvcm1hdCB3aWxsIGJlIGNvbnZlcnRlZCBhbmQgcGFzc2VkIHRocm91Z2ggdG9cbiAqIG91dHB1dC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBoZWFkZXJzIC0gd2l0aCBudW1iZXIgdmFsdWVzXG4gKi9cblBhY2tldC5FbmNvZGVyLnByb3RvdHlwZS5tYWtlQmluYXJ5SGVhZGVycyA9IGZ1bmN0aW9uIChoZWFkZXJzKSB7XG4gIHZhciBiaW5hcnlIZWFkZXJzID0ge307XG4gIHRoaXMuaGVhZGVyU3BlY18uZm9yRWFjaChmdW5jdGlvbiAoaGVhZGVyRmllbGQpe1xuICAgIGlmIChoZWFkZXJzLmhhc093blByb3BlcnR5KGhlYWRlckZpZWxkKSkge1xuICAgICAgLy8gQ29udmVydCBkaWZmZXJlbnRseSBmb3IgYWRkcmVzcyBhbmQgcGFja2V0IGZpZWxkcz9cbiAgICAgIGlmIChQYWNrZXQuaXNBZGRyZXNzRmllbGQoaGVhZGVyRmllbGQpKSB7XG4gICAgICAgIGJpbmFyeUhlYWRlcnNbaGVhZGVyRmllbGRdID0gdGhpcy5hZGRyZXNzU3RyaW5nVG9CaW5hcnkoaGVhZGVyc1toZWFkZXJGaWVsZF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmluYXJ5SGVhZGVyc1toZWFkZXJGaWVsZF0gPSBEYXRhQ29udmVydGVycy5pbnRUb0JpbmFyeShcbiAgICAgICAgICAgIGhlYWRlcnNbaGVhZGVyRmllbGRdLCB0aGlzLmdldEZpZWxkQml0V2lkdGgoaGVhZGVyRmllbGQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHRoaXMpO1xuICByZXR1cm4gYmluYXJ5SGVhZGVycztcbn07XG5cbi8qKlxuICogQ29udmVydCBhbiBhZGRyZXNzIHN0cmluZyAocG9zc2libHkgbXVsdGktcGFydCkgaW50byBiaW5hcnkgYmFzZWQgb24gdGhlXG4gKiBjb25maWd1cmVkIGFkZHJlc3MgZm9ybWF0LlxuICogQHBhcmFtIHtzdHJpbmd9IGFkZHJlc3NcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGJpbmFyeSByZXByZXNlbnRhdGlvblxuICovXG5QYWNrZXQuRW5jb2Rlci5wcm90b3R5cGUuYWRkcmVzc1N0cmluZ1RvQmluYXJ5ID0gZnVuY3Rpb24gKGFkZHJlc3MpIHtcbiAgcmV0dXJuIERhdGFDb252ZXJ0ZXJzLmFkZHJlc3NTdHJpbmdUb0JpbmFyeShhZGRyZXNzLCB0aGlzLmFkZHJlc3NGb3JtYXRfKTtcbn07XG5cbi8qKlxuICogVGFrZXMgYSBzZXQgb2YgYmluYXJ5IGhlYWRlcnMgYW5kIGEgYmluYXJ5IGJvZHksIGFuZCBnZW5lcmF0ZXMgYSBjb21wbGV0ZVxuICogcGFja2V0IGJpbmFyeSBtYXRjaGluZyB0aGUgY29uZmlndXJlZCBwYWNrZXQgc3BlYyBpbiB0ZXJtcyBvZiBoZWFkZXIgd2lkdGhcbiAqIGFuZCBvcmRlcmluZy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYmluYXJ5SGVhZGVycyAtIGhhc2ggY29udGFpbmluZyBwYWNrZXQgaGVhZGVycyBpbiBiaW5hcnksIHdoZXJlXG4gKiAgICAgICAgdGhlIGhhc2gga2V5cyBjb3JyZXNwb25kIHRvIHRoZSBcImtleVwiIHZhbHVlcyBpbiB0aGUgcGFja2V0IHNwZWMsIGFuZFxuICogICAgICAgIHRoZSBoYXNoIHZhbHVlcyBhcmUgYmluYXJ5IHN0cmluZ3MuXG4gKiBAcGFyYW0ge3N0cmluZ30gYm9keSAtIGJpbmFyeSBzdHJpbmcgb2YgdGhlIHVubGltaXRlZC1sZW5ndGggYm9keSBvZiB0aGVcbiAqICAgICAgICBwYWNrZXQsIHdoaWNoIHdpbGwgYmUgcGxhY2VkIGFmdGVyIHRoZSBwYWNrZXQgaGVhZGVycy5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBiaW5hcnkgc3RyaW5nIG9mIHByb3ZpZGVkIGRhdGEsIGNvbmZvcm1pbmcgdG8gY29uZmlndXJlZFxuICogICAgICAgICAgcGFja2V0IGZvcm1hdC5cbiAqL1xuUGFja2V0LkVuY29kZXIucHJvdG90eXBlLmNvbmNhdGVuYXRlQmluYXJ5ID0gZnVuY3Rpb24gKGJpbmFyeUhlYWRlcnMsIGJvZHkpIHtcbiAgdmFyIHBhcnRzID0gW107XG5cbiAgdGhpcy5oZWFkZXJTcGVjXy5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZFNwZWMpIHtcbiAgICB2YXIgZmllbGRXaWR0aCA9IHRoaXMuZ2V0RmllbGRCaXRXaWR0aChmaWVsZFNwZWMpO1xuXG4gICAgLy8gR2V0IGhlYWRlciB2YWx1ZSBmcm9tIHByb3ZpZGVkIGhlYWRlcnMsIGlmIGl0IGV4aXN0cy5cbiAgICAvLyBJZiBub3QsIHdlJ2xsIHN0YXJ0IHdpdGggYW4gZW1wdHkgc3RyaW5nIGFuZCBwYWQgaXQgdG8gdGhlIGNvcnJlY3RcbiAgICAvLyBsZW5ndGgsIGJlbG93LlxuICAgIHZhciBmaWVsZEJpdHMgPSBiaW5hcnlIZWFkZXJzLmhhc093blByb3BlcnR5KGZpZWxkU3BlYykgP1xuICAgICAgICBiaW5hcnlIZWFkZXJzW2ZpZWxkU3BlY10gOiAnJztcblxuICAgIC8vIFJpZ2h0LXRydW5jYXRlIHRvIHRoZSBkZXNpcmVkIHNpemVcbiAgICBmaWVsZEJpdHMgPSBmaWVsZEJpdHMuc2xpY2UoMCwgZmllbGRXaWR0aCk7XG5cbiAgICAvLyBMZWZ0LXBhZCB0byBkZXNpcmVkIHNpemVcbiAgICBmaWVsZEJpdHMgPSBOZXRTaW1VdGlscy56ZXJvUGFkTGVmdChmaWVsZEJpdHMsIGZpZWxkV2lkdGgpO1xuXG4gICAgcGFydHMucHVzaChmaWVsZEJpdHMpO1xuICB9LCB0aGlzKTtcblxuICBwYXJ0cy5wdXNoKGJvZHkpO1xuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKTtcbn07XG4iLCIvKipcbiAqIEBvdmVydmlldyBVSSBjb250cm9sbGVyIGZvciB0aGUgRE5TIHRhYiBpbiB0aGUgbGVmdCBjb2x1bW4uXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgbWFya3VwID0gcmVxdWlyZSgnLi9OZXRTaW1EbnNUYWIuaHRtbC5lanMnKTtcbnZhciBEbnNNb2RlID0gcmVxdWlyZSgnLi9OZXRTaW1Db25zdGFudHMnKS5EbnNNb2RlO1xudmFyIE5ldFNpbURuc01vZGVDb250cm9sID0gcmVxdWlyZSgnLi9OZXRTaW1EbnNNb2RlQ29udHJvbCcpO1xudmFyIE5ldFNpbURuc01hbnVhbENvbnRyb2wgPSByZXF1aXJlKCcuL05ldFNpbURuc01hbnVhbENvbnRyb2wnKTtcbnZhciBOZXRTaW1EbnNUYWJsZSA9IHJlcXVpcmUoJy4vTmV0U2ltRG5zVGFibGUnKTtcbnZhciBOZXRTaW1HbG9iYWxzID0gcmVxdWlyZSgnLi9OZXRTaW1HbG9iYWxzJyk7XG5cbi8qKlxuICogR2VuZXJhdG9yIGFuZCBjb250cm9sbGVyIGZvciBcIkROU1wiIHRhYi5cbiAqIEBwYXJhbSB7alF1ZXJ5fSByb290RGl2XG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBkbnNNb2RlQ2hhbmdlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGJlY29tZURuc0NhbGxiYWNrXG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIE5ldFNpbURuc1RhYiA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJvb3REaXYsIGRuc01vZGVDaGFuZ2VDYWxsYmFjayxcbiAgICBiZWNvbWVEbnNDYWxsYmFjaykge1xuICAvKipcbiAgICogQ29tcG9uZW50IHJvb3QsIHdoaWNoIHdlIGZpbGwgd2hlbmV2ZXIgd2UgY2FsbCByZW5kZXIoKVxuICAgKiBAdHlwZSB7alF1ZXJ5fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5yb290RGl2XyA9IHJvb3REaXY7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuZG5zTW9kZUNoYW5nZUNhbGxiYWNrXyA9IGRuc01vZGVDaGFuZ2VDYWxsYmFjaztcblxuICAvKipcbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5iZWNvbWVEbnNDYWxsYmFja18gPSBiZWNvbWVEbnNDYWxsYmFjaztcblxuICAvKipcbiAgICogQHR5cGUge05ldFNpbURuc01vZGVDb250cm9sfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5kbnNNb2RlQ29udHJvbF8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7TmV0U2ltRG5zTWFudWFsQ29udHJvbH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuZG5zTWFudWFsQ29udHJvbF8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7TmV0U2ltRG5zVGFibGV9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmRuc1RhYmxlXyA9IG51bGw7XG5cbiAgdGhpcy5yZW5kZXIoKTtcbn07XG5cbi8qKlxuICogRmlsbCB0aGUgcm9vdCBkaXYgd2l0aCBuZXcgZWxlbWVudHMgcmVmbGVjdGluZyB0aGUgY3VycmVudCBzdGF0ZVxuICovXG5OZXRTaW1EbnNUYWIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGxldmVsQ29uZmlnID0gTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpO1xuXG4gIHZhciByZW5kZXJlZE1hcmt1cCA9ICQobWFya3VwKHtcbiAgICBsZXZlbDogbGV2ZWxDb25maWdcbiAgfSkpO1xuICB0aGlzLnJvb3REaXZfLmh0bWwocmVuZGVyZWRNYXJrdXApO1xuXG4gIGlmIChsZXZlbENvbmZpZy5zaG93RG5zTW9kZUNvbnRyb2wpIHtcbiAgICB0aGlzLmRuc01vZGVDb250cm9sXyA9IG5ldyBOZXRTaW1EbnNNb2RlQ29udHJvbChcbiAgICAgICAgdGhpcy5yb290RGl2Xy5maW5kKCcuZG5zX21vZGUnKSxcbiAgICAgICAgdGhpcy5kbnNNb2RlQ2hhbmdlQ2FsbGJhY2tfKTtcbiAgfVxuXG4gIHRoaXMuZG5zTWFudWFsQ29udHJvbF8gPSBuZXcgTmV0U2ltRG5zTWFudWFsQ29udHJvbChcbiAgICAgIHRoaXMucm9vdERpdl8uZmluZCgnLmRuc19tYW51YWxfY29udHJvbCcpLFxuICAgICAgdGhpcy5iZWNvbWVEbnNDYWxsYmFja18pO1xuXG4gIHRoaXMuZG5zVGFibGVfID0gbmV3IE5ldFNpbURuc1RhYmxlKFxuICAgICAgdGhpcy5yb290RGl2Xy5maW5kKCcuZG5zX3RhYmxlJykpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0Ruc01vZGV9IG5ld0Ruc01vZGVcbiAqL1xuTmV0U2ltRG5zVGFiLnByb3RvdHlwZS5zZXREbnNNb2RlID0gZnVuY3Rpb24gKG5ld0Ruc01vZGUpIHtcbiAgaWYgKHRoaXMuZG5zTW9kZUNvbnRyb2xfKSB7XG4gICAgdGhpcy5kbnNNb2RlQ29udHJvbF8uc2V0RG5zTW9kZShuZXdEbnNNb2RlKTtcbiAgfVxuXG4gIHRoaXMuZG5zVGFibGVfLnNldERuc01vZGUobmV3RG5zTW9kZSk7XG4gIHRoaXMucm9vdERpdl8uZmluZCgnLmRuc19tYW51YWxfY29udHJvbCcpLnRvZ2dsZShuZXdEbnNNb2RlID09PSBEbnNNb2RlLk1BTlVBTCk7XG4gIHRoaXMucm9vdERpdl8uZmluZCgnLmRucy1ub3RlcycpLnRvZ2dsZShuZXdEbnNNb2RlICE9PSBEbnNNb2RlLk5PTkUpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzRG5zTm9kZVxuICovXG5OZXRTaW1EbnNUYWIucHJvdG90eXBlLnNldElzRG5zTm9kZSA9IGZ1bmN0aW9uIChpc0Ruc05vZGUpIHtcbiAgdGhpcy5kbnNNYW51YWxDb250cm9sXy5zZXRJc0Ruc05vZGUoaXNEbnNOb2RlKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtBcnJheX0gdGFibGVDb250ZW50c1xuICovXG5OZXRTaW1EbnNUYWIucHJvdG90eXBlLnNldERuc1RhYmxlQ29udGVudHMgPSBmdW5jdGlvbiAodGFibGVDb250ZW50cykge1xuICB0aGlzLmRuc1RhYmxlXy5zZXREbnNUYWJsZUNvbnRlbnRzKHRhYmxlQ29udGVudHMpO1xufTtcbiIsIi8qKlxuICogQG92ZXJ2aWV3IFVJIHRhYmxlIG9mIGxvY2FsIHN1Ym5ldCwgZGlzcGxheWluZyBob3N0bmFtZSA9PiBhZGRyZXNzIG1hcC5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBtYXJrdXAgPSByZXF1aXJlKCcuL05ldFNpbURuc1RhYmxlLmh0bWwuZWpzJyk7XG52YXIgRG5zTW9kZSA9IHJlcXVpcmUoJy4vTmV0U2ltQ29uc3RhbnRzJykuRG5zTW9kZTtcblxuLyoqXG4gKiBHZW5lcmF0b3IgYW5kIGNvbnRyb2xsZXIgZm9yIEROUyBuZXR3b3JrIGxvb2t1cCB0YWJsZSBjb21wb25lbnQuXG4gKiBTaG93cyBkaWZmZXJlbnQgYW1vdW50cyBvZiBpbmZvcm1hdGlvbiBkZXBlbmRpbmcgb24gdGhlIEROUyBtb2RlLlxuICpcbiAqIEBwYXJhbSB7alF1ZXJ5fSByb290RGl2XG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIE5ldFNpbURuc1RhYmxlID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocm9vdERpdikge1xuICAvKipcbiAgICogQ29tcG9uZW50IHJvb3QsIHdoaWNoIHdlIGZpbGwgd2hlbmV2ZXIgd2UgY2FsbCByZW5kZXIoKVxuICAgKiBAdHlwZSB7alF1ZXJ5fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5yb290RGl2XyA9IHJvb3REaXY7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtEbnNNb2RlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5kbnNNb2RlXyA9IERuc01vZGUuTk9ORTtcblxuICAvKipcbiAgICogQHR5cGUge0FycmF5fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5hZGRyZXNzVGFibGVEYXRhXyA9IFtdO1xuXG4gIHRoaXMucmVuZGVyKCk7XG59O1xuXG4vKipcbiAqIEZpbGwgdGhlIHJvb3QgZGl2IHdpdGggbmV3IGVsZW1lbnRzIHJlZmxlY3RpbmcgdGhlIGN1cnJlbnQgc3RhdGVcbiAqL1xuTmV0U2ltRG5zVGFibGUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlbmRlcmVkTWFya3VwID0gJChtYXJrdXAoe1xuICAgIGRuc01vZGU6IHRoaXMuZG5zTW9kZV8sXG4gICAgdGFibGVEYXRhOiB0aGlzLmFkZHJlc3NUYWJsZURhdGFfXG4gIH0pKTtcbiAgdGhpcy5yb290RGl2Xy5odG1sKHJlbmRlcmVkTWFya3VwKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtEbnNNb2RlfSBuZXdEbnNNb2RlXG4gKi9cbk5ldFNpbURuc1RhYmxlLnByb3RvdHlwZS5zZXREbnNNb2RlID0gZnVuY3Rpb24gKG5ld0Ruc01vZGUpIHtcbiAgdGhpcy5kbnNNb2RlXyA9IG5ld0Ruc01vZGU7XG4gIHRoaXMucmVuZGVyKCk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXl9IHRhYmxlQ29udGVudHNcbiAqL1xuTmV0U2ltRG5zVGFibGUucHJvdG90eXBlLnNldERuc1RhYmxlQ29udGVudHMgPSBmdW5jdGlvbiAodGFibGVDb250ZW50cykge1xuICB0aGlzLmFkZHJlc3NUYWJsZURhdGFfID0gdGFibGVDb250ZW50cztcbiAgdGhpcy5yZW5kZXIoKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cz0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdCA9IGZ1bmN0aW9uIGFub255bW91cyhsb2NhbHMsIGZpbHRlcnMsIGVzY2FwZVxuLyoqLykge1xuZXNjYXBlID0gZXNjYXBlIHx8IGZ1bmN0aW9uIChodG1sKXtcbiAgcmV0dXJuIFN0cmluZyhodG1sKVxuICAgIC5yZXBsYWNlKC8mKD8hXFx3KzspL2csICcmYW1wOycpXG4gICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xufTtcbnZhciBidWYgPSBbXTtcbndpdGggKGxvY2FscyB8fCB7fSkgeyAoZnVuY3Rpb24oKXsgXG4gYnVmLnB1c2goJycpOzE7XG52YXIgRG5zTW9kZSA9IHJlcXVpcmUoJy4vTmV0U2ltQ29uc3RhbnRzJykuRG5zTW9kZTtcbjsgYnVmLnB1c2goJ1xcbjxkaXYgY2xhc3M9XCJuZXRzaW0tZG5zLXRhYmxlXCI+XFxuICA8aDE+TXkgTmV0d29yazwvaDE+XFxuICA8dGFibGU+XFxuICAgIDx0aGVhZD5cXG4gICAgPHRyPlxcbiAgICAgIDx0aD5Ib3N0bmFtZTwvdGg+XFxuICAgICAgPHRoPkFkZHJlc3M8L3RoPlxcbiAgICA8L3RyPlxcbiAgICA8L3RoZWFkPlxcbiAgICA8dGJvZHk+XFxuICAgICcpOzE0O1xuICAgIHRhYmxlRGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgIHZhciBkaXNwbGF5SG9zdG5hbWUgPSByb3cuaG9zdG5hbWU7XG4gICAgICB2YXIgZGlzcGxheUFkZHJlc3MgPSAnJztcbiAgICAgIHZhciByb3dDbGFzc2VzID0gW107XG5cbiAgICAgIGlmIChkbnNNb2RlID09PSBEbnNNb2RlLk5PTkUgfHwgcm93LmlzRG5zTm9kZSB8fCByb3cuaXNMb2NhbCkge1xuICAgICAgICBkaXNwbGF5QWRkcmVzcyA9IHJvdy5hZGRyZXNzO1xuICAgICAgfVxuXG4gICAgICBpZiAocm93LmlzTG9jYWwpIHtcbiAgICAgICAgZGlzcGxheUhvc3RuYW1lICs9IFwiIChNZSlcIjtcbiAgICAgICAgcm93Q2xhc3Nlcy5wdXNoKCdsb2NhbC1ub2RlJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyb3cuaXNEbnNOb2RlICYmIGRuc01vZGUgIT09IERuc01vZGUuTk9ORSkge1xuICAgICAgICBkaXNwbGF5SG9zdG5hbWUgKz0gXCIgKEROUylcIjtcbiAgICAgICAgcm93Q2xhc3Nlcy5wdXNoKCdkbnMtbm9kZScpO1xuICAgICAgfVxuICAgICAgOyBidWYucHVzaCgnXFxuICAgICAgICA8dHIgY2xhc3M9XCInLCBlc2NhcGUoKDM0LCAgcm93Q2xhc3Nlcy5qb2luKCcgJykgKSksICdcIj5cXG4gICAgICAgICAgPHRkPicsIGVzY2FwZSgoMzUsICBkaXNwbGF5SG9zdG5hbWUgKSksICc8L3RkPlxcbiAgICAgICAgICA8dGQ+JywgZXNjYXBlKCgzNiwgIGRpc3BsYXlBZGRyZXNzICkpLCAnPC90ZD5cXG4gICAgICAgIDwvdHI+XFxuICAgICAgJyk7Mzg7XG4gICAgfSk7XG4gICAgOyBidWYucHVzaCgnXFxuICAgIDwvdGJvZHk+XFxuICA8L3RhYmxlPlxcbjwvZGl2PicpOyB9KSgpO1xufSBcbnJldHVybiBidWYuam9pbignJyk7XG59O1xuICByZXR1cm4gZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgcmV0dXJuIHQobG9jYWxzLCByZXF1aXJlKFwiZWpzXCIpLmZpbHRlcnMpO1xuICB9XG59KCkpOyIsIm1vZHVsZS5leHBvcnRzPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB0ID0gZnVuY3Rpb24gYW5vbnltb3VzKGxvY2FscywgZmlsdGVycywgZXNjYXBlXG4vKiovKSB7XG5lc2NhcGUgPSBlc2NhcGUgfHwgZnVuY3Rpb24gKGh0bWwpe1xuICByZXR1cm4gU3RyaW5nKGh0bWwpXG4gICAgLnJlcGxhY2UoLyYoPyFcXHcrOykvZywgJyZhbXA7JylcbiAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKVxuICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG59O1xudmFyIGJ1ZiA9IFtdO1xud2l0aCAobG9jYWxzIHx8IHt9KSB7IChmdW5jdGlvbigpeyBcbiBidWYucHVzaCgnPGRpdiBjbGFzcz1cIm5ldHNpbS1kbnMtdGFiXCI+XFxuICAnKTsyOyBpZiAobGV2ZWwuc2hvd0Ruc01vZGVDb250cm9sKSB7IDsgYnVmLnB1c2goJ1xcbiAgPGRpdiBjbGFzcz1cImRuc19tb2RlXCI+PC9kaXY+XFxuICAnKTs0OyB9IDsgYnVmLnB1c2goJ1xcbiAgPGRpdiBjbGFzcz1cImRuc19tYW51YWxfY29udHJvbFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cImRuc190YWJsZVwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cImRucy1ub3Rlc1wiPlxcbiAgICA8aDE+Tm90ZXM8L2gxPlxcbiAgICA8ZGl2PlxcbiAgICAgIDx0ZXh0YXJlYT48L3RleHRhcmVhPlxcbiAgICA8L2Rpdj5cXG4gIDwvZGl2PlxcbjwvZGl2PlxcbicpOyB9KSgpO1xufSBcbnJldHVybiBidWYuam9pbignJyk7XG59O1xuICByZXR1cm4gZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgcmV0dXJuIHQobG9jYWxzLCByZXF1aXJlKFwiZWpzXCIpLmZpbHRlcnMpO1xuICB9XG59KCkpOyIsIi8qKlxuICogQG92ZXJ2aWV3IFVJIGNvbXBvbmVudCB1c2VkIHRvIHNlbGVjdCBhIEROUyBtb2RlIGF0IHJ1bnRpbWUuXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgbWFya3VwID0gcmVxdWlyZSgnLi9OZXRTaW1EbnNNb2RlQ29udHJvbC5odG1sLmVqcycpO1xudmFyIERuc01vZGUgPSByZXF1aXJlKCcuL05ldFNpbUNvbnN0YW50cycpLkRuc01vZGU7XG5cbi8qKlxuICogR2VuZXJhdG9yIGFuZCBjb250cm9sbGVyIGZvciBETlMgbW9kZSBzZWxlY3RvclxuICogQHBhcmFtIHtqUXVlcnl9IHJvb3REaXZcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGRuc01vZGVDaGFuZ2VDYWxsYmFja1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBOZXRTaW1EbnNNb2RlQ29udHJvbCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJvb3REaXYsXG4gICAgZG5zTW9kZUNoYW5nZUNhbGxiYWNrKSB7XG4gIC8qKlxuICAgKiBDb21wb25lbnQgcm9vdCwgd2hpY2ggd2UgZmlsbCB3aGVuZXZlciB3ZSBjYWxsIHJlbmRlcigpXG4gICAqIEB0eXBlIHtqUXVlcnl9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnJvb3REaXZfID0gcm9vdERpdjtcblxuICAvKipcbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5kbnNNb2RlQ2hhbmdlQ2FsbGJhY2tfID0gZG5zTW9kZUNoYW5nZUNhbGxiYWNrO1xuXG4gIC8qKlxuICAgKiBTZXQgb2YgYWxsIEROUyBtb2RlIHJhZGlvIGJ1dHRvbnNcbiAgICogQHR5cGUge2pRdWVyeX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuZG5zTW9kZVJhZGlvc18gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBJbnRlcm5hbCBzdGF0ZTogQ3VycmVudCBETlMgbW9kZS5cbiAgICogQHR5cGUge0Ruc01vZGV9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmN1cnJlbnREbnNNb2RlXyA9IERuc01vZGUuTk9ORTtcblxuICB0aGlzLnJlbmRlcigpO1xufTtcblxuLyoqXG4gKiBGaWxsIHRoZSByb290IGRpdiB3aXRoIG5ldyBlbGVtZW50cyByZWZsZWN0aW5nIHRoZSBjdXJyZW50IHN0YXRlXG4gKi9cbk5ldFNpbURuc01vZGVDb250cm9sLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciByZW5kZXJlZE1hcmt1cCA9ICQobWFya3VwKHt9KSk7XG4gIHRoaXMucm9vdERpdl8uaHRtbChyZW5kZXJlZE1hcmt1cCk7XG5cbiAgdGhpcy5kbnNNb2RlUmFkaW9zXyA9IHRoaXMucm9vdERpdl8uZmluZCgnaW5wdXRbdHlwZT1cInJhZGlvXCJdW25hbWU9XCJkbnNfbW9kZVwiXScpO1xuICB0aGlzLmRuc01vZGVSYWRpb3NfLmNoYW5nZSh0aGlzLm9uRG5zTW9kZUNoYW5nZV8uYmluZCh0aGlzKSk7XG4gIHRoaXMuc2V0RG5zTW9kZSh0aGlzLmN1cnJlbnREbnNNb2RlXyk7XG59O1xuXG4vKipcbiAqIEhhbmRsZXIgZm9yIGEgbmV3IHJhZGlvIGJ1dHRvbiBiZWluZyBzZWxlY3RlZC5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbURuc01vZGVDb250cm9sLnByb3RvdHlwZS5vbkRuc01vZGVDaGFuZ2VfID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbmV3RG5zTW9kZSA9IHRoaXMuZG5zTW9kZVJhZGlvc18uZmlsdGVyKCc6Y2hlY2tlZCcpLnZhbCgpO1xuICB0aGlzLmRuc01vZGVDaGFuZ2VDYWxsYmFja18obmV3RG5zTW9kZSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7RG5zTW9kZX0gbmV3RG5zTW9kZVxuICovXG5OZXRTaW1EbnNNb2RlQ29udHJvbC5wcm90b3R5cGUuc2V0RG5zTW9kZSA9IGZ1bmN0aW9uIChuZXdEbnNNb2RlKSB7XG4gIHRoaXMuY3VycmVudERuc01vZGVfID0gbmV3RG5zTW9kZTtcbiAgdGhpcy5kbnNNb2RlUmFkaW9zX1xuICAgICAgLmZpbHRlcignW3ZhbHVlPVwiJyArIG5ld0Ruc01vZGUgKyAnXCJdJylcbiAgICAgIC5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHM9IChmdW5jdGlvbigpIHtcbiAgdmFyIHQgPSBmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzLCBmaWx0ZXJzLCBlc2NhcGVcbi8qKi8pIHtcbmVzY2FwZSA9IGVzY2FwZSB8fCBmdW5jdGlvbiAoaHRtbCl7XG4gIHJldHVybiBTdHJpbmcoaHRtbClcbiAgICAucmVwbGFjZSgvJig/IVxcdys7KS9nLCAnJmFtcDsnKVxuICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXG4gICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbn07XG52YXIgYnVmID0gW107XG53aXRoIChsb2NhbHMgfHwge30pIHsgKGZ1bmN0aW9uKCl7IFxuIGJ1Zi5wdXNoKCcnKTsxO1xuICB2YXIgRG5zTW9kZSA9IHJlcXVpcmUoJy4vTmV0U2ltQ29uc3RhbnRzJykuRG5zTW9kZTtcbiAgdmFyIGkxOG4gPSByZXF1aXJlKCcuL2xvY2FsZScpO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2V4cG9ydHMuRG5zTW9kZX0gbW9kZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGFiZWxcbiAgICovXG4gIGZ1bmN0aW9uIG1ha2VSYWRpbyhtb2RlLCBsYWJlbCkge1xuICAgIDsgYnVmLnB1c2goJ1xcbiAgICA8ZGl2IGNsYXNzPVwiZG5zX21vZGVfJywgZXNjYXBlKCgxMSwgIG1vZGUgKSksICdcIj5cXG4gICAgICA8aW5wdXQgaWQ9XCJkbnNfbW9kZV8nLCBlc2NhcGUoKDEyLCAgbW9kZSApKSwgJ1wiXFxuICAgICAgICAgICAgICAgICAgIHR5cGU9XCJyYWRpb1wiXFxuICAgICAgICAgICAgICAgICAgIG5hbWU9XCJkbnNfbW9kZVwiXFxuICAgICAgICAgICAgICAgICAgIHZhbHVlPVwiJywgZXNjYXBlKCgxNSwgIG1vZGUgKSksICdcIiAvPlxcbiAgICAgIDxsYWJlbCBmb3I9XCJkbnNfbW9kZV8nLCBlc2NhcGUoKDE2LCAgbW9kZSApKSwgJ1wiPicsIGVzY2FwZSgoMTYsICBsYWJlbCApKSwgJzwvbGFiZWw+XFxuICAgIDwvZGl2PlxcbiAgICAnKTsxODtcbiAgfVxuOyBidWYucHVzaCgnXFxuPGRpdiBjbGFzcz1cImRucy1tb2RlLWNvbnRyb2xcIj5cXG4gIDxoMT4nLCBlc2NhcGUoKDIyLCAgaTE4bi5kbnNNb2RlKCkgKSksICc8L2gxPlxcbiAgJyk7MjM7IG1ha2VSYWRpbyhEbnNNb2RlLk5PTkUsIGkxOG4uZG5zTW9kZV9OT05FKCkpOyA7IGJ1Zi5wdXNoKCdcXG4gICcpOzI0OyBtYWtlUmFkaW8oRG5zTW9kZS5NQU5VQUwsIGkxOG4uZG5zTW9kZV9NQU5VQUwoKSk7IDsgYnVmLnB1c2goJ1xcbiAgJyk7MjU7IG1ha2VSYWRpbyhEbnNNb2RlLkFVVE9NQVRJQywgaTE4bi5kbnNNb2RlX0FVVE9NQVRJQygpKTsgOyBidWYucHVzaCgnXFxuPC9kaXY+XFxuJyk7IH0pKCk7XG59IFxucmV0dXJuIGJ1Zi5qb2luKCcnKTtcbn07XG4gIHJldHVybiBmdW5jdGlvbihsb2NhbHMpIHtcbiAgICByZXR1cm4gdChsb2NhbHMsIHJlcXVpcmUoXCJlanNcIikuZmlsdGVycyk7XG4gIH1cbn0oKSk7IiwiLyoqXG4gKiBAb3ZlcnZpZXcgVUkgYnV0dG9uIHVzZWQgYmVjb21lIHRoZSBjdXJyZW50IEROUyBub2RlIGluIG1hbnVhbCBETlMgbW9kZS5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBtYXJrdXAgPSByZXF1aXJlKCcuL05ldFNpbURuc01hbnVhbENvbnRyb2wuaHRtbC5lanMnKTtcblxuLyoqXG4gKiBHZW5lcmF0b3IgYW5kIGNvbnRyb2xsZXIgZm9yIEROUyBtb2RlIHNlbGVjdG9yXG4gKiBAcGFyYW0ge2pRdWVyeX0gcm9vdERpdlxuICogQHBhcmFtIHtmdW5jdGlvbn0gYmVjb21lRG5zQ2FsbGJhY2tcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgTmV0U2ltRG5zTWFudWFsQ29udHJvbCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJvb3REaXYsXG4gICAgYmVjb21lRG5zQ2FsbGJhY2spIHtcbiAgLyoqXG4gICAqIENvbXBvbmVudCByb290LCB3aGljaCB3ZSBmaWxsIHdoZW5ldmVyIHdlIGNhbGwgcmVuZGVyKClcbiAgICogQHR5cGUge2pRdWVyeX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucm9vdERpdl8gPSByb290RGl2O1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7ZnVuY3Rpb259XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmJlY29tZURuc0NhbGxiYWNrXyA9IGJlY29tZURuc0NhbGxiYWNrO1xuXG4gIHRoaXMucmVuZGVyKCk7XG59O1xuXG4vKipcbiAqIEZpbGwgdGhlIHJvb3QgZGl2IHdpdGggbmV3IGVsZW1lbnRzIHJlZmxlY3RpbmcgdGhlIGN1cnJlbnQgc3RhdGVcbiAqL1xuTmV0U2ltRG5zTWFudWFsQ29udHJvbC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcmVuZGVyZWRNYXJrdXAgPSAkKG1hcmt1cCh7fSkpO1xuICB0aGlzLnJvb3REaXZfLmh0bWwocmVuZGVyZWRNYXJrdXApO1xuICB0aGlzLnJvb3REaXZfLmZpbmQoJ2lucHV0W3R5cGU9XCJidXR0b25cIl0nKS5jbGljayhcbiAgICAgIHRoaXMub25CZWNvbWVEbnNCdXR0b25DbGlja18uYmluZCh0aGlzKSk7XG59O1xuXG4vKipcbiAqIEhhbmRsZXIgZm9yIGJ1dHRvbiBjbGljay5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbURuc01hbnVhbENvbnRyb2wucHJvdG90eXBlLm9uQmVjb21lRG5zQnV0dG9uQ2xpY2tfID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmJlY29tZURuc0NhbGxiYWNrXygpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzRG5zTm9kZVxuICovXG5OZXRTaW1EbnNNYW51YWxDb250cm9sLnByb3RvdHlwZS5zZXRJc0Ruc05vZGUgPSBmdW5jdGlvbiAoaXNEbnNOb2RlKSB7XG4gIHRoaXMucm9vdERpdl8uZmluZCgnaW5wdXRbdHlwZT1cImJ1dHRvblwiXScpLmF0dHIoJ2Rpc2FibGVkJywgaXNEbnNOb2RlKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cz0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdCA9IGZ1bmN0aW9uIGFub255bW91cyhsb2NhbHMsIGZpbHRlcnMsIGVzY2FwZVxuLyoqLykge1xuZXNjYXBlID0gZXNjYXBlIHx8IGZ1bmN0aW9uIChodG1sKXtcbiAgcmV0dXJuIFN0cmluZyhodG1sKVxuICAgIC5yZXBsYWNlKC8mKD8hXFx3KzspL2csICcmYW1wOycpXG4gICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xufTtcbnZhciBidWYgPSBbXTtcbndpdGggKGxvY2FscyB8fCB7fSkgeyAoZnVuY3Rpb24oKXsgXG4gYnVmLnB1c2goJzxkaXYgY2xhc3M9XCJuZXRzaW1fZG5zX21hbnVhbF9jb250cm9sXCI+XFxuICA8aDE+TWFudWFsIENvbnRyb2w8L2gxPlxcbiAgPGlucHV0IGlkPVwiYmVjb21lX2Ruc19idXR0b25cIiB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJUYWtlIG92ZXIgYXMgRE5TXCIgLz5cXG48L2Rpdj4nKTsgfSkoKTtcbn0gXG5yZXR1cm4gYnVmLmpvaW4oJycpO1xufTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGxvY2Fscykge1xuICAgIHJldHVybiB0KGxvY2FscywgcmVxdWlyZShcImVqc1wiKS5maWx0ZXJzKTtcbiAgfVxufSgpKTsiLCIvKipcbiAqIEBvdmVydmlldyBTaW11bGF0ZWQgY2xpZW50IG5vZGUuXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIF8gPSB1dGlscy5nZXRMb2Rhc2goKTtcbnZhciBpMThuID0gcmVxdWlyZSgnLi9sb2NhbGUnKTtcbnZhciBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTmV0U2ltQ29uc3RhbnRzJykuTm9kZVR5cGU7XG52YXIgTmV0U2ltRW50aXR5ID0gcmVxdWlyZSgnLi9OZXRTaW1FbnRpdHknKTtcbnZhciBOZXRTaW1Ob2RlID0gcmVxdWlyZSgnLi9OZXRTaW1Ob2RlJyk7XG52YXIgTmV0U2ltV2lyZSA9IHJlcXVpcmUoJy4vTmV0U2ltV2lyZScpO1xuXG4vKipcbiAqIENsaWVudCBtb2RlbCBvZiBzaW11bGF0ZWQgbm9kZVxuICpcbiAqIFJlcHJlc2VudHMgdGhlIGNsaWVudCdzIHZpZXcgb2YgYSBub2RlIHRoYXQgaXMgY29udHJvbGxlZCBieSBhIHVzZXIgY2xpZW50LFxuICogZWl0aGVyIGJ5IG91ciBvd24gY2xpZW50IG9yIHNvbWVib2R5IGVsc2Uncy4gIElzIGEgTmV0U2ltRW50aXR5LCBtZWFuaW5nXG4gKiBpdCB3cmFwcyBhIHJvdyBpbiB0aGUgbm9kZSB0YWJsZSBhbmQgcHJvdmlkZXMgZnVuY3Rpb25hbGl0eSBhcm91bmQgaXQuXG4gKlxuICogWW91IG1heSBiZSBsb29raW5nIGZvciBOZXRTaW1Mb2NhbENsaWVudE5vZGUgaWYgeW91J3JlIHRyeWluZyB0byBtYW5pcHVsYXRlXG4gKiB5b3VyIGxvY2FsIGNsaWVudCBub2RlLlxuICpcbiAqIEBwYXJhbSB7IU5ldFNpbVNoYXJkfSBzaGFyZFxuICogQHBhcmFtIHtPYmplY3R9IFtjbGllbnRSb3ddIC0gTG9iYnkgcm93IGZvciB0aGlzIHJvdXRlci5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGF1Z21lbnRzIE5ldFNpbU5vZGVcbiAqL1xudmFyIE5ldFNpbUNsaWVudE5vZGUgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzaGFyZCwgY2xpZW50Um93KSB7XG4gIE5ldFNpbU5vZGUuY2FsbCh0aGlzLCBzaGFyZCwgY2xpZW50Um93KTtcbn07XG5OZXRTaW1DbGllbnROb2RlLmluaGVyaXRzKE5ldFNpbU5vZGUpO1xuXG4vKiogQGluaGVyaXRkb2MgKi9cbk5ldFNpbUNsaWVudE5vZGUucHJvdG90eXBlLmdldE5vZGVUeXBlID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gTm9kZVR5cGUuQ0xJRU5UO1xufTtcblxuLyoqIEBpbmhlcml0ZG9jICovXG5OZXRTaW1DbGllbnROb2RlLnByb3RvdHlwZS5nZXRTdGF0dXMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBvdXRnb2luZ1dpcmUgPSB0aGlzLmdldE91dGdvaW5nV2lyZSgpO1xuICBpZiAoIW91dGdvaW5nV2lyZSkge1xuICAgIHJldHVybiBpMThuLm5vdENvbm5lY3RlZCgpO1xuICB9XG5cbiAgLy8gR2V0IHJlbW90ZSBub2RlIGZvciBkaXNwbGF5IG5hbWUgLyBob3N0bmFtZVxuICB2YXIgY2FjaGVkTm9kZVJvd3MgPSB0aGlzLnNoYXJkXy5ub2RlVGFibGUucmVhZEFsbCgpO1xuICB2YXIgcmVtb3RlTm9kZVJvdyA9IF8uZmluZChjYWNoZWROb2RlUm93cywgZnVuY3Rpb24gKG5vZGVSb3cpIHtcbiAgICByZXR1cm4gbm9kZVJvdy5pZCA9PT0gb3V0Z29pbmdXaXJlLnJlbW90ZU5vZGVJRDtcbiAgfSk7XG5cbiAgdmFyIHJlbW90ZU5vZGVOYW1lID0gaTE4bi51bmtub3duTm9kZSgpO1xuICBpZiAocmVtb3RlTm9kZVJvdykge1xuICAgIHJlbW90ZU5vZGVOYW1lID0gcmVtb3RlTm9kZVJvdy5uYW1lO1xuICB9XG5cbiAgLy8gQ2hlY2sgZm9yIGNvbm5lY3Rpb24gc3RhdGVcbiAgdmFyIG11dHVhbENvbm5lY3Rpb247XG4gIGlmIChyZW1vdGVOb2RlUm93ICYmIHJlbW90ZU5vZGVSb3cudHlwZSA9PT0gTm9kZVR5cGUuUk9VVEVSKSB7XG4gICAgbXV0dWFsQ29ubmVjdGlvbiA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNhY2hlZFdpcmVSb3dzID0gdGhpcy5zaGFyZF8ud2lyZVRhYmxlLnJlYWRBbGwoKTtcbiAgICBtdXR1YWxDb25uZWN0aW9uID0gY2FjaGVkV2lyZVJvd3Muc29tZShmdW5jdGlvbiAod2lyZVJvdykge1xuICAgICAgcmV0dXJuIHdpcmVSb3cubG9jYWxOb2RlSUQgPT09IG91dGdvaW5nV2lyZS5yZW1vdGVOb2RlSUQgJiZcbiAgICAgICAgICB3aXJlUm93LnJlbW90ZU5vZGVJRCA9PT0gb3V0Z29pbmdXaXJlLmxvY2FsTm9kZUlEO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKG11dHVhbENvbm5lY3Rpb24pIHtcbiAgICByZXR1cm4gaTE4bi5jb25uZWN0ZWRUb05vZGVOYW1lKHtub2RlTmFtZTpyZW1vdGVOb2RlTmFtZX0pO1xuICB9XG4gIHJldHVybiBpMThuLmNvbm5lY3RpbmdUb05vZGVOYW1lKHtub2RlTmFtZTpyZW1vdGVOb2RlTmFtZX0pO1xufTtcblxuLyoqIEBpbmhlcml0ZG9jICovXG5OZXRTaW1DbGllbnROb2RlLnByb3RvdHlwZS5pc0Z1bGwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBvdXRnb2luZ1dpcmUgPSB0aGlzLmdldE91dGdvaW5nV2lyZSgpO1xuICBpZiAoIW91dGdvaW5nV2lyZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgY2FjaGVkV2lyZVJvd3MgPSB0aGlzLnNoYXJkXy53aXJlVGFibGUucmVhZEFsbCgpO1xuICByZXR1cm4gY2FjaGVkV2lyZVJvd3Muc29tZShmdW5jdGlvbiAod2lyZVJvdykge1xuICAgIHJldHVybiB3aXJlUm93LmxvY2FsTm9kZUlEID09PSBvdXRnb2luZ1dpcmUucmVtb3RlTm9kZUlEICYmXG4gICAgICAgIHdpcmVSb3cucmVtb3RlTm9kZUlEID09PSBvdXRnb2luZ1dpcmUubG9jYWxOb2RlSUQ7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgd2hhdCBhZGRyZXNzIGhhcyBiZWVuIGFzc2lnbmVkIHRvIHRoaXMgY2xpZW50IG9uIGl0cyBvdXRnb2luZ1xuICogd2lyZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfVxuICovXG5OZXRTaW1DbGllbnROb2RlLnByb3RvdHlwZS5nZXRBZGRyZXNzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgd2lyZSA9IHRoaXMuZ2V0T3V0Z29pbmdXaXJlKCk7XG4gIGlmICghd2lyZSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIHdpcmUubG9jYWxBZGRyZXNzO1xufTtcblxuLyoqXG4gKiBCYXNlZCBvbiBjYWNoZWQgd2lyZSBkYXRhLCByZXRyaWV2ZSB0aGlzIG5vZGUncyBvdXRnb2luZyB3aXJlLlxuICogQHJldHVybnMge05ldFNpbVdpcmV8bnVsbH0gbnVsbCBpZiB3aXJlIGRvZXMgbm90IGV4aXN0LlxuICovXG5OZXRTaW1DbGllbnROb2RlLnByb3RvdHlwZS5nZXRPdXRnb2luZ1dpcmUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjYWNoZWRXaXJlUm93cyA9IHRoaXMuc2hhcmRfLndpcmVUYWJsZS5yZWFkQWxsKCk7XG4gIHZhciBvdXRnb2luZ1dpcmVSb3cgPSBfLmZpbmQoY2FjaGVkV2lyZVJvd3MsIGZ1bmN0aW9uICh3aXJlUm93KSB7XG4gICAgcmV0dXJuIHdpcmVSb3cubG9jYWxOb2RlSUQgPT09IHRoaXMuZW50aXR5SUQ7XG4gIH0sIHRoaXMpO1xuICBpZiAob3V0Z29pbmdXaXJlUm93KSB7XG4gICAgcmV0dXJuIG5ldyBOZXRTaW1XaXJlKHRoaXMuc2hhcmRfLCBvdXRnb2luZ1dpcmVSb3cpO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuLyoqXG4gKiBTdGF0aWMgYXN5bmMgcmV0cmlldmFsIG1ldGhvZC4gIFNlZSBOZXRTaW1FbnRpdHkuZ2V0KCkuXG4gKiBAcGFyYW0geyFudW1iZXJ9IG5vZGVJRCAtIFRoZSByb3cgSUQgZm9yIHRoZSBlbnRpdHkgeW91J2QgbGlrZSB0byBmaW5kLlxuICogQHBhcmFtIHshTmV0U2ltU2hhcmR9IHNoYXJkXG4gKiBAcGFyYW0geyFOb2RlU3R5bGVDYWxsYmFja30gb25Db21wbGV0ZSAtIE1ldGhvZCB0aGF0IHdpbGwgYmUgZ2l2ZW4gdGhlXG4gKiAgICAgICAgZm91bmQgZW50aXR5LCBvciBudWxsIGlmIGVudGl0eSBzZWFyY2ggZmFpbGVkLlxuICovXG5OZXRTaW1DbGllbnROb2RlLmdldCA9IGZ1bmN0aW9uIChub2RlSUQsIHNoYXJkLCBvbkNvbXBsZXRlKSB7XG4gIE5ldFNpbUVudGl0eS5nZXQoTmV0U2ltQ2xpZW50Tm9kZSwgbm9kZUlELCBzaGFyZCwgb25Db21wbGV0ZSk7XG59O1xuIiwiLyoqXG4gKiBAb3ZlcnZpZXcgQSBiYXNlIGNsYXNzIGZvciBhbGwgc2ltdWxhdGlvbiBub2RlIGVudGl0aWVzLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBpMThuID0gcmVxdWlyZSgnLi9sb2NhbGUnKTtcbnZhciBOZXRTaW1FbnRpdHkgPSByZXF1aXJlKCcuL05ldFNpbUVudGl0eScpO1xudmFyIE5ldFNpbVdpcmUgPSByZXF1aXJlKCcuL05ldFNpbVdpcmUnKTtcblxuLyoqXG4gKiBDbGllbnQgbW9kZWwgb2Ygc2ltdWxhdGVkIG5ldHdvcmsgZW50aXR5LCB3aGljaCBsaXZlc1xuICogaW4gYSBzaGFyZCB0YWJsZS5cbiAqXG4gKiBXcmFwcyB0aGUgZW50aXR5IHJvdyB3aXRoIGhlbHBlciBtZXRob2RzIGZvciBleGFtaW5pbmcgYW5kIG1haW50YWluaW5nXG4gKiB0aGUgZW50aXR5IHN0YXRlIGluIHNoYXJlZCBzdG9yYWdlLlxuICpcbiAqIEBwYXJhbSB7IU5ldFNpbVNoYXJkfSBzaGFyZFxuICogQHBhcmFtIHtPYmplY3R9IFtub2RlUm93XSBKU09OIHJvdyBmcm9tIHRhYmxlLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXVnbWVudHMgTmV0U2ltRW50aXR5XG4gKi9cbnZhciBOZXRTaW1Ob2RlID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc2hhcmQsIG5vZGVSb3cpIHtcbiAgbm9kZVJvdyA9IG5vZGVSb3cgIT09IHVuZGVmaW5lZCA/IG5vZGVSb3cgOiB7fTtcbiAgTmV0U2ltRW50aXR5LmNhbGwodGhpcywgc2hhcmQsIG5vZGVSb3cpO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5kaXNwbGF5TmFtZV8gPSBub2RlUm93Lm5hbWU7XG59O1xuTmV0U2ltTm9kZS5pbmhlcml0cyhOZXRTaW1FbnRpdHkpO1xuXG4vKipcbiAqIEdldCBzaGFyZWQgdGFibGUgZm9yIG5vZGVzXG4gKiBAcmV0dXJucyB7U2hhcmVkVGFibGV9XG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Ob2RlLnByb3RvdHlwZS5nZXRUYWJsZT0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5zaGFyZF8ubm9kZVRhYmxlO1xufTtcblxuLyoqIEJ1aWxkIHRhYmxlIHJvdyBmb3IgdGhpcyBub2RlICovXG5OZXRTaW1Ob2RlLnByb3RvdHlwZS5idWlsZFJvdyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0aGlzLmdldE5vZGVUeXBlKCksXG4gICAgbmFtZTogdGhpcy5nZXREaXNwbGF5TmFtZSgpXG4gIH07XG59O1xuXG4vKipcbiAqIEdldCBub2RlJ3MgZGlzcGxheSBuYW1lLCB3aGljaCBpcyBzdG9yZWQgaW4gdGFibGUuXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5OZXRTaW1Ob2RlLnByb3RvdHlwZS5nZXREaXNwbGF5TmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuZGlzcGxheU5hbWVfID8gdGhpcy5kaXNwbGF5TmFtZV8gOiBpMThuLmRlZmF1bHROb2RlTmFtZSgpO1xufTtcblxuLyoqXG4gKiBHZXQgbm9kZSdzIHNob3J0IGRpc3BsYXkgbmFtZSwgd2hpY2ggaXMgdGhlIHNhbWUgYXMgdGhlIGRpc3BsYXkgbmFtZVxuICogYnV0IHRydW5jYXRlZCB0byB0aGUgZmlyc3Qgd29yZCBpZiBpdCdzIG92ZXIgYSBjZXJ0YWluIGxlbmd0aC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbk5ldFNpbU5vZGUucHJvdG90eXBlLmdldFNob3J0RGlzcGxheU5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIElmIHRoZSBuYW1lIGlzIGxvbmdlciB0aGFuIHRlbiBjaGFyYWN0ZXJzIChsb25nZXIgdGhhbiBcIlJvdXRlciA5OTlcIilcbiAgLy8gdGhlbiBvbmx5IHNob3cgdXAgdG8gdGhlIGZpcnN0IHdoaXRlc3BhY2UuXG4gIHZhciBzaG9ydE5hbWUgPSB0aGlzLmdldERpc3BsYXlOYW1lKCk7XG4gIGlmIChzaG9ydE5hbWUubGVuZ3RoID4gMTApIHtcbiAgICBzaG9ydE5hbWUgPSBzaG9ydE5hbWUuc3BsaXQoL1xccy8pWzBdO1xuICB9XG4gIHJldHVybiBzaG9ydE5hbWU7XG59O1xuXG4vKipcbiAqIEdldCBub2RlJ3MgaG9zdG5hbWUsIGEgbW9kaWZpZWQgdmVyc2lvbiBvZiBpdHMgZGlzcGxheSBuYW1lLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuTmV0U2ltTm9kZS5wcm90b3R5cGUuZ2V0SG9zdG5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFN0cmlwIGV2ZXJ5dGhpbmcgdGhhdCdzIG5vdCBhIHdvcmQtY2hhcmFjdGVyIG9yIGEgZGlnaXQgZnJvbSB0aGUgZGlzcGxheVxuICAvLyBuYW1lLCB0aGVuIGFwcGVuZCB0aGUgbm9kZSBJRCBzbyB0aGF0IGhvc3RuYW1lcyBhcmUgbW9yZSBsaWtlbHkgdG9cbiAgLy8gYmUgdW5pcXVlLlxuICByZXR1cm4gdGhpcy5nZXRTaG9ydERpc3BsYXlOYW1lKCkucmVwbGFjZSgvW15cXHdcXGRdL2csICcnKS50b0xvd2VyQ2FzZSgpICtcbiAgICAgIHRoaXMuZW50aXR5SUQ7XG59O1xuXG4vKipcbiAqIEdldCBub2RlJ3MgdHlwZS5cbiAqIEByZXR1cm5zIHtOb2RlVHlwZX1cbiAqL1xuTmV0U2ltTm9kZS5wcm90b3R5cGUuZ2V0Tm9kZVR5cGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignZ2V0Tm9kZVR5cGUgbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZCcpO1xufTtcblxuLyoqXG4gKiBHZXQgbG9jYWxpemVkIGRlc2NyaXB0aW9uIG9mIG5vZGUgc3RhdHVzLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuTmV0U2ltTm9kZS5wcm90b3R5cGUuZ2V0U3RhdHVzID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ2dldFN0YXR1cyBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG4vKipcbiAqIFdoZXRoZXIgb3Igbm90IHRoaXMgbm9kZSBjYW4gYWNjZXB0IGFueSBtb3JlIGNvbm5lY3Rpb25zXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuTmV0U2ltTm9kZS5wcm90b3R5cGUuaXNGdWxsID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ2lzRnVsbCBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG4vKipcbiAqIEVzdGFibGlzaCBhIGNvbm5lY3Rpb24gYmV0d2VlbiB0aGlzIG5vZGUgYW5kIGFub3RoZXIgbm9kZSxcbiAqIGJ5IGNyZWF0aW5nIGEgd2lyZSBiZXR3ZWVuIHRoZW0sIGFuZCB2ZXJpZnlpbmcgdGhhdCB0aGUgcmVtb3RlIG5vZGVcbiAqIGNhbiBhY2NlcHQgdGhlIGNvbm5lY3Rpb24uXG4gKiBXaGVuIGZpbmlzaGVkLCBjYWxscyBvbkNvbXBsZXRlKHt0aGUgbmV3IHdpcmV9KVxuICogT24gZmFpbHVyZSwgY2FsbHMgb25Db21wbGV0ZShudWxsKVxuICogQHBhcmFtIHshTmV0U2ltTm9kZX0gb3RoZXJOb2RlXG4gKiBAcGFyYW0ge05vZGVTdHlsZUNhbGxiYWNrfSBbb25Db21wbGV0ZV1cbiAqL1xuTmV0U2ltTm9kZS5wcm90b3R5cGUuY29ubmVjdFRvTm9kZSA9IGZ1bmN0aW9uIChvdGhlck5vZGUsIG9uQ29tcGxldGUpIHtcbiAgb25Db21wbGV0ZSA9IG9uQ29tcGxldGUgfHwgZnVuY3Rpb24gKCkge307XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBOZXRTaW1XaXJlLmNyZWF0ZSh0aGlzLnNoYXJkXyxcbiAgICAgIHRoaXMubWFrZVdpcmVSb3dGb3JDb25uZWN0aW5nVG8ob3RoZXJOb2RlKSxcbiAgICAgIGZ1bmN0aW9uIChlcnIsIHdpcmUpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIG9uQ29tcGxldGUoZXJyLCBudWxsKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBvdGhlck5vZGUuYWNjZXB0Q29ubmVjdGlvbihzZWxmLCBmdW5jdGlvbiAoZXJyLCBpc0FjY2VwdGVkKSB7XG4gICAgICAgICAgaWYgKGVyciB8fCAhaXNBY2NlcHRlZCkge1xuICAgICAgICAgICAgd2lyZS5kZXN0cm95KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgb25Db21wbGV0ZShuZXcgRXJyb3IoJ0Nvbm5lY3Rpb24gcmVqZWN0ZWQ6ICcgKyBlcnIubWVzc2FnZSksIG51bGwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgb25Db21wbGV0ZShudWxsLCB3aXJlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbn07XG5cbi8qKlxuICogQ3JlYXRlIGFuIGFwcHJvcHJpYXRlIGluaXRpYWwgd2lyZSByb3cgZm9yIGNvbm5lY3RpbmcgdG8gdGhlIGdpdmVuIG5vZGUuXG4gKiBAcGFyYW0geyFOZXRTaW1Ob2RlfSBvdGhlck5vZGVcbiAqIEByZXR1cm5zIHtXaXJlUm93fVxuICovXG5OZXRTaW1Ob2RlLnByb3RvdHlwZS5tYWtlV2lyZVJvd0ZvckNvbm5lY3RpbmdUbyA9IGZ1bmN0aW9uIChvdGhlck5vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICBsb2NhbE5vZGVJRDogdGhpcy5lbnRpdHlJRCxcbiAgICByZW1vdGVOb2RlSUQ6IG90aGVyTm9kZS5lbnRpdHlJRFxuICB9O1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2hlbiBhbm90aGVyIG5vZGUgZXN0YWJsaXNoZXMgYSBjb25uZWN0aW9uIHRvIHRoaXMgb25lLCBnaXZpbmcgdGhpc1xuICogbm9kZSBhIGNoYW5jZSB0byByZWplY3QgdGhlIGNvbm5lY3Rpb24uXG4gKiBAcGFyYW0geyFOZXRTaW1Ob2RlfSBvdGhlck5vZGUgYXR0ZW1wdGluZyB0byBjb25uZWN0IHRvIHRoaXMgb25lXG4gKiBAcGFyYW0geyFOb2RlU3R5bGVDYWxsYmFja30gb25Db21wbGV0ZSByZXNwb25zZSBtZXRob2QgLSBzaG91bGQgY2FsbCB3aXRoIFRSVUVcbiAqICAgICAgICBpZiBjb25uZWN0aW9uIGlzIGFsbG93ZWQsIEZBTFNFIGlmIGNvbm5lY3Rpb24gaXMgcmVqZWN0ZWQuXG4gKi9cbk5ldFNpbU5vZGUucHJvdG90eXBlLmFjY2VwdENvbm5lY3Rpb24gPSBmdW5jdGlvbiAob3RoZXJOb2RlLCBvbkNvbXBsZXRlKSB7XG4gIG9uQ29tcGxldGUobnVsbCwgdHJ1ZSk7XG59O1xuIiwiLyoqXG4gKiBAb3ZlcnZpZXcgU2ltdWxhdGlvbiBFbnRpdHk6IEEgY29ubmVjdGlvbiBiZXR3ZWVuIHR3byBub2RlcyBhbmQgcmVsYXRlZFxuICogICAgICAgICAgIG1ldGFkYXRhLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBOZXRTaW1FbnRpdHkgPSByZXF1aXJlKCcuL05ldFNpbUVudGl0eScpO1xudmFyIEFyZ3VtZW50VXRpbHMgPSByZXF1aXJlKCcuL0FyZ3VtZW50VXRpbHMnKTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBXaXJlUm93XG4gKiBAcHJvcGVydHkgeyFudW1iZXJ9IGxvY2FsTm9kZUlEXG4gKiBAcHJvcGVydHkgeyFudW1iZXJ9IHJlbW90ZU5vZGVJRFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGxvY2FsQWRkcmVzc1xuICogQHByb3BlcnR5IHtzdHJpbmd9IHJlbW90ZUFkZHJlc3NcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBsb2NhbEhvc3RuYW1lXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcmVtb3RlSG9zdG5hbWVcbiAqL1xuXG4vKipcbiAqIExvY2FsIGNvbnRyb2xsZXIgZm9yIGEgc2ltdWxhdGVkIGNvbm5lY3Rpb24gYmV0d2VlbiBub2RlcyxcbiAqIHdoaWNoIGlzIHN0b3JlZCBpbiB0aGUgd2lyZSB0YWJsZSBvbiB0aGUgc2hhcmQuICBUaGUgY29udHJvbGxlciBjYW5cbiAqIGJlIGluaXRpYWxpemVkIHdpdGggdGhlIEpTT04gcm93IGZyb20gdGhlIHRhYmxlLCBlZmZlY3RpdmVseSB3cmFwcGluZyB0aGF0XG4gKiBkYXRhIGluIGhlbHBmdWwgbWV0aG9kcy5cbiAqXG4gKiBAcGFyYW0geyFOZXRTaW1TaGFyZH0gc2hhcmQgLSBUaGUgc2hhcmQgd2hlcmUgdGhpcyB3aXJlIGxpdmVzLlxuICogQHBhcmFtIHtXaXJlUm93fSBbd2lyZVJvd10gLSBBIHJvdyBvdXQgb2YgdGhlIF93aXJlIHRhYmxlIG9uIHRoZSBzaGFyZC5cbiAqICAgICAgICBJZiBwcm92aWRlZCwgd2lsbCBpbml0aWFsaXplIHRoaXMgd2lyZSB3aXRoIHRoZSBnaXZlbiBkYXRhLiAgSWYgbm90LFxuICogICAgICAgIHRoaXMgd2lyZSB3aWxsIGluaXRpYWxpemUgdG8gZGVmYXVsdCB2YWx1ZXMuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhdWdtZW50cyBOZXRTaW1FbnRpdHlcbiAqL1xudmFyIE5ldFNpbVdpcmUgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzaGFyZCwgd2lyZVJvdykge1xuICB3aXJlUm93ID0gd2lyZVJvdyAhPT0gdW5kZWZpbmVkID8gd2lyZVJvdyA6IHt9O1xuICBOZXRTaW1FbnRpdHkuY2FsbCh0aGlzLCBzaGFyZCwgd2lyZVJvdyk7XG5cbiAgLyoqXG4gICAqIENvbm5lY3RlZCBub2RlIHJvdyBJRHMgd2l0aGluIHRoZSBfbG9iYnkgdGFibGVcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRoaXMubG9jYWxOb2RlSUQgPSB3aXJlUm93LmxvY2FsTm9kZUlEO1xuICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgdGhpcy5yZW1vdGVOb2RlSUQgPSB3aXJlUm93LnJlbW90ZU5vZGVJRDtcblxuICAvKipcbiAgICogQXNzaWduZWQgbG9jYWwgYWRkcmVzc2VzIGZvciB0aGUgZW5kcyBvZiB0aGlzIHdpcmUuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLmxvY2FsQWRkcmVzcyA9IHdpcmVSb3cubG9jYWxBZGRyZXNzO1xuICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgdGhpcy5yZW1vdGVBZGRyZXNzID0gd2lyZVJvdy5yZW1vdGVBZGRyZXNzO1xuXG4gIC8qKlxuICAgKiBEaXNwbGF5IGhvc3RuYW1lcyBmb3IgdGhlIGVuZHMgb2YgdGhpcyB3aXJlLlxuICAgKiBHZW5lcmFsbHksIGVhY2ggZW5kcG9pbnQgc2hvdWxkIHNldCBpdHMgb3duIGhvc3RuYW1lLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgdGhpcy5sb2NhbEhvc3RuYW1lID0gd2lyZVJvdy5sb2NhbEhvc3RuYW1lO1xuICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgdGhpcy5yZW1vdGVIb3N0bmFtZSA9IHdpcmVSb3cucmVtb3RlSG9zdG5hbWU7XG59O1xuTmV0U2ltV2lyZS5pbmhlcml0cyhOZXRTaW1FbnRpdHkpO1xuXG4vKipcbiAqIFN0YXRpYyBhc3luYyBjcmVhdGlvbiBtZXRob2QuICBTZWUgTmV0U2ltRW50aXR5LmNyZWF0ZSgpLlxuICogQHBhcmFtIHshTmV0U2ltU2hhcmR9IHNoYXJkXG4gKiBAcGFyYW0geyFXaXJlUm93fSBpbml0aWFsUm93XG4gKiBAcGFyYW0geyFOb2RlU3R5bGVDYWxsYmFja30gb25Db21wbGV0ZSAtIE1ldGhvZCB0aGF0IHdpbGwgYmUgZ2l2ZW4gdGhlXG4gKiAgICAgICAgY3JlYXRlZCBlbnRpdHksIG9yIG51bGwgaWYgZW50aXR5IGNyZWF0aW9uIGZhaWxlZC5cbiAqL1xuTmV0U2ltV2lyZS5jcmVhdGUgPSBmdW5jdGlvbiAoc2hhcmQsIGluaXRpYWxSb3csIG9uQ29tcGxldGUpIHtcbiAgQXJndW1lbnRVdGlscy52YWxpZGF0ZVJlcXVpcmVkKGluaXRpYWxSb3csIFwiaW5pdGlhbFJvd1wiKTtcbiAgQXJndW1lbnRVdGlscy52YWxpZGF0ZVJlcXVpcmVkKGluaXRpYWxSb3cubG9jYWxOb2RlSUQsIFwibG9jYWxOb2RlSURcIixcbiAgICAgIEFyZ3VtZW50VXRpbHMuaXNQb3NpdGl2ZU5vbmluZmluaXRlTnVtYmVyKTtcbiAgQXJndW1lbnRVdGlscy52YWxpZGF0ZVJlcXVpcmVkKGluaXRpYWxSb3cucmVtb3RlTm9kZUlELCBcInJlbW90ZU5vZGVJRFwiLFxuICAgICAgQXJndW1lbnRVdGlscy5pc1Bvc2l0aXZlTm9uaW5maW5pdGVOdW1iZXIpO1xuICB2YXIgZW50aXR5ID0gbmV3IE5ldFNpbVdpcmUoc2hhcmQsIGluaXRpYWxSb3cpO1xuICBlbnRpdHkuZ2V0VGFibGUoKS5jcmVhdGUoZW50aXR5LmJ1aWxkUm93KCksIGZ1bmN0aW9uIChlcnIsIHJvdykge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIG9uQ29tcGxldGUoZXJyLCBudWxsKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgb25Db21wbGV0ZShudWxsLCBuZXcgTmV0U2ltV2lyZShzaGFyZCwgcm93KSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBIZWxwZXIgdGhhdCBnZXRzIHRoZSB3aXJlcyB0YWJsZSBmb3IgdGhlIGNvbmZpZ3VyZWQgc2hhcmQuXG4gKiBAcmV0dXJucyB7TmV0U2ltVGFibGV9XG4gKi9cbk5ldFNpbVdpcmUucHJvdG90eXBlLmdldFRhYmxlID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5zaGFyZF8ud2lyZVRhYmxlO1xufTtcblxuLyoqXG4gKiBCdWlsZCBvd24gcm93IGZvciB0aGUgd2lyZSB0YWJsZVxuICogQHJldHVybnMge1dpcmVSb3d9XG4gKi9cbk5ldFNpbVdpcmUucHJvdG90eXBlLmJ1aWxkUm93ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIGxvY2FsTm9kZUlEOiB0aGlzLmxvY2FsTm9kZUlELFxuICAgIHJlbW90ZU5vZGVJRDogdGhpcy5yZW1vdGVOb2RlSUQsXG4gICAgbG9jYWxBZGRyZXNzOiB0aGlzLmxvY2FsQWRkcmVzcyxcbiAgICByZW1vdGVBZGRyZXNzOiB0aGlzLnJlbW90ZUFkZHJlc3MsXG4gICAgbG9jYWxIb3N0bmFtZTogdGhpcy5sb2NhbEhvc3RuYW1lLFxuICAgIHJlbW90ZUhvc3RuYW1lOiB0aGlzLnJlbW90ZUhvc3RuYW1lXG4gIH07XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7TWVzc2FnZVJvd30gbWVzc2FnZVJvd1xuICogQHJldHVybnMge2Jvb2xlYW59IFRSVUUgaWYgdGhlIGdpdmVuIG1lc3NhZ2UgaXMgdHJhdmVsbGluZyBiZXR3ZWVuIHRoZSBub2Rlc1xuICogICAgICAgICAgdGhhdCB0aGlzIHdpcmUgY29ubmVjdHMsIGluIHRoZSB3aXJlJ3MgZGlyZWN0aW9uLlxuICovXG5OZXRTaW1XaXJlLnByb3RvdHlwZS5pc01lc3NhZ2VSb3dPbkR1cGxleFdpcmUgPSBmdW5jdGlvbiAobWVzc2FnZVJvdykge1xuICByZXR1cm4gdGhpcy5sb2NhbE5vZGVJRCA9PT0gbWVzc2FnZVJvdy5mcm9tTm9kZUlEICYmXG4gICAgICB0aGlzLnJlbW90ZU5vZGVJRCA9PT0gbWVzc2FnZVJvdy50b05vZGVJRDtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtNZXNzYWdlUm93fSBtZXNzYWdlUm93XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVFJVRSBpZiB0aGUgZ2l2ZW4gbWVzc2FnZSBpcyB0cmF2ZWxsaW5nIGJldHdlZW4gdGhlIG5vZGVzXG4gKiAgICAgICAgICB0aGF0IHRoaXMgd2lyZSBjb25uZWN0cywgaW4gZWl0aGVyIGRpcmVjdGlvbi5cbiAqL1xuTmV0U2ltV2lyZS5wcm90b3R5cGUuaXNNZXNzYWdlUm93T25TaW1wbGV4V2lyZSA9IGZ1bmN0aW9uIChtZXNzYWdlUm93KSB7XG4gIHZhciBvbldpcmUgPSB0aGlzLmlzTWVzc2FnZVJvd09uRHVwbGV4V2lyZShtZXNzYWdlUm93KTtcbiAgdmFyIG9uUmV2ZXJzZVdpcmUgPSB0aGlzLmxvY2FsTm9kZUlEID09PSBtZXNzYWdlUm93LnRvTm9kZUlEICYmXG4gICAgICB0aGlzLnJlbW90ZU5vZGVJRCA9PT0gbWVzc2FnZVJvdy5mcm9tTm9kZUlEO1xuICByZXR1cm4gb25XaXJlIHx8IG9uUmV2ZXJzZVdpcmU7XG59O1xuIiwiLyoqXG4gKiBAb3ZlcnZpZXcgYmFzZSBjbGFzcyBmb3IgYWxsIHNpbXVsYXRpb24gZW50aXRpZXMuXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENsaWVudCBtb2RlbCBvZiBzaW11bGF0ZWQgbmV0d29yayBlbnRpdHksIHdoaWNoIGxpdmVzIGluIGEgc2hhcmQgdGFibGUuXG4gKlxuICogV3JhcHMgdGhlIGVudGl0eSByb3cgd2l0aCBoZWxwZXIgbWV0aG9kcyBmb3IgZXhhbWluaW5nIGFuZCBtYWludGFpbmluZ1xuICogdGhlIGVudGl0eSBzdGF0ZSBpbiBzaGFyZWQgc3RvcmFnZS5cbiAqXG4gKiBAcGFyYW0geyFOZXRTaW1TaGFyZH0gc2hhcmRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbZW50aXR5Um93XSBKU09OIHJvdyBmcm9tIHRhYmxlLlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBOZXRTaW1FbnRpdHkgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzaGFyZCwgZW50aXR5Um93KSB7XG4gIGlmIChlbnRpdHlSb3cgPT09IHVuZGVmaW5lZCkge1xuICAgIGVudGl0eVJvdyA9IHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtOZXRTaW1TaGFyZH1cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgdGhpcy5zaGFyZF8gPSBzaGFyZDtcblxuICAvKipcbiAgICogTm9kZSdzIHJvdyBJRCB3aXRoaW4gdGhlIF9sb2JieSB0YWJsZS4gIFVuaXF1ZSB3aXRoaW4gaW5zdGFuY2UuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLmVudGl0eUlEID0gZW50aXR5Um93LmlkO1xuXG4gIC8qKlxuICAgKiBOb2RlJ3MgVVVJRCBhc3NpZ25lZCB3aGVuIGl0IHdhcyBpbml0aWFsbHkgaW5zZXJ0ZWQgaW50byB0aGUgdGFibGUuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLnV1aWQgPSBlbnRpdHlSb3cudXVpZDtcbn07XG5cbi8qKlxuICogU3RhdGljIGFzeW5jIGNyZWF0aW9uIG1ldGhvZC4gIENyZWF0ZXMgYSBuZXcgZW50aXR5IG9uIHRoZSBnaXZlbiBzaGFyZCxcbiAqIGFuZCB0aGVuIGNhbGxzIHRoZSBjYWxsYmFjayB3aXRoIGEgbG9jYWwgY29udHJvbGxlciBmb3IgdGhlIG5ldyBlbnRpdHkuXG4gKiBAcGFyYW0geyFmdW5jdGlvbn0gRW50aXR5VHlwZSAtIFRoZSBjb25zdHJ1Y3RvciBmb3IgdGhlIGVudGl0eSB0eXBlIHlvdSB3YW50XG4gKiAgICAgICAgdG8gY3JlYXRlLlxuICogQHBhcmFtIHshTmV0U2ltU2hhcmR9IHNoYXJkXG4gKiBAcGFyYW0geyFOb2RlU3R5bGVDYWxsYmFja30gb25Db21wbGV0ZSAtIE1ldGhvZCB0aGF0IHdpbGwgYmUgZ2l2ZW4gdGhlXG4gKiAgICAgICAgY3JlYXRlZCBlbnRpdHksIG9yIG51bGwgaWYgZW50aXR5IGNyZWF0aW9uIGZhaWxlZC5cbiAqL1xuTmV0U2ltRW50aXR5LmNyZWF0ZSA9IGZ1bmN0aW9uIChFbnRpdHlUeXBlLCBzaGFyZCwgb25Db21wbGV0ZSkge1xuICB2YXIgZW50aXR5ID0gbmV3IEVudGl0eVR5cGUoc2hhcmQpO1xuICBlbnRpdHkuZ2V0VGFibGUoKS5jcmVhdGUoZW50aXR5LmJ1aWxkUm93KCksIGZ1bmN0aW9uIChlcnIsIHJvdykge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIG9uQ29tcGxldGUoZXJyLCBudWxsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb25Db21wbGV0ZShudWxsLCBuZXcgRW50aXR5VHlwZShzaGFyZCwgcm93KSk7XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICogU3RhdGljIGFzeW5jIHJldHJpZXZhbCBtZXRob2QuICBTZWFyY2hlcyBmb3IgYSBuZXcgZW50aXR5IG9uIHRoZSBnaXZlblxuICogc2hhcmQsIGFuZCB0aGVuIGNhbGxzIHRoZSBjYWxsYmFjayB3aXRoIGEgbG9jYWwgY29udHJvbGxlciBmb3IgdGhlXG4gKiBmb3VuZCBlbnRpdHkuXG4gKiBAcGFyYW0geyFmdW5jdGlvbn0gRW50aXR5VHlwZSAtIFRoZSBjb25zdHJ1Y3RvciBmb3IgdGhlIGVudGl0eSB0eXBlIHlvdSB3YW50XG4gKiAgICAgICAgdG8gZmluZC5cbiAqIEBwYXJhbSB7IW51bWJlcn0gZW50aXR5SUQgLSBUaGUgcm93IElEIGZvciB0aGUgZW50aXR5IHlvdSdkIGxpa2UgdG8gZmluZC5cbiAqIEBwYXJhbSB7IU5ldFNpbVNoYXJkfSBzaGFyZFxuICogQHBhcmFtIHshTm9kZVN0eWxlQ2FsbGJhY2t9IG9uQ29tcGxldGUgLSBNZXRob2QgdGhhdCB3aWxsIGJlIGdpdmVuIHRoZVxuICogICAgICAgIGZvdW5kIGVudGl0eSwgb3IgbnVsbCBpZiBlbnRpdHkgc2VhcmNoIGZhaWxlZC5cbiAqL1xuTmV0U2ltRW50aXR5LmdldCA9IGZ1bmN0aW9uIChFbnRpdHlUeXBlLCBlbnRpdHlJRCwgc2hhcmQsIG9uQ29tcGxldGUpIHtcbiAgdmFyIGVudGl0eSA9IG5ldyBFbnRpdHlUeXBlKHNoYXJkKTtcbiAgZW50aXR5LmdldFRhYmxlKCkucmVhZChlbnRpdHlJRCwgZnVuY3Rpb24gKGVyciwgcm93KSB7XG4gICAgaWYgKGVycikge1xuICAgICAgb25Db21wbGV0ZShlcnIsIG51bGwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvbkNvbXBsZXRlKGVyciwgbmV3IEVudGl0eVR5cGUoc2hhcmQsIHJvdykpO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIFB1c2ggZW50aXR5IHN0YXRlIGludG8gcmVtb3RlIHN0b3JhZ2UuXG4gKiBAcGFyYW0ge05vZGVTdHlsZUNhbGxiYWNrfSBbb25Db21wbGV0ZV0gLSBPcHRpb25hbCBjb21wbGV0aW9uIGNhbGxiYWNrLlxuICovXG5OZXRTaW1FbnRpdHkucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChvbkNvbXBsZXRlKSB7XG4gIG9uQ29tcGxldGUgPSBvbkNvbXBsZXRlIHx8IGZ1bmN0aW9uICgpIHt9O1xuXG4gIHRoaXMuZ2V0VGFibGUoKS51cGRhdGUodGhpcy5lbnRpdHlJRCwgdGhpcy5idWlsZFJvdygpLCBvbkNvbXBsZXRlKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGVudGl0eSBmcm9tIHJlbW90ZSBzdG9yYWdlLlxuICogQHBhcmFtIHtOb2RlU3R5bGVDYWxsYmFja30gW29uQ29tcGxldGVdIC0gT3B0aW9uYWwgY29tcGxldGlvbiBjYWxsYmFja1xuICovXG5OZXRTaW1FbnRpdHkucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAob25Db21wbGV0ZSkge1xuICBvbkNvbXBsZXRlID0gb25Db21wbGV0ZSB8fCBmdW5jdGlvbiAoKSB7fTtcblxuICB0aGlzLmdldFRhYmxlKCkuZGVsZXRlKHRoaXMuZW50aXR5SUQsIG9uQ29tcGxldGUpO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgZW50aXR5IGZyb20gcmVtb3RlIHN0b3JhZ2UsIHVzaW5nIGEgc3luY2hyb25vdXMgY2FsbC5cbiAqIEZvciB1c2Ugd2hlbiBuYXZpZ2F0aW5nIGF3YXkgZnJvbSB0aGUgcGFnZTsgb3RoZXJ3aXNlLCBhc3luYyB2ZXJzaW9uXG4gKiBpcyBwcmVmZXJyZWQuXG4gKiBAcmV0dXJucyB7RXJyb3J8bnVsbH0gZXJyb3IgaWYgZW50aXR5IGRlbGV0ZSBmYWlsc1xuICovXG5OZXRTaW1FbnRpdHkucHJvdG90eXBlLnN5bmNocm9ub3VzRGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuZ2V0VGFibGUoKS5zeW5jaHJvbm91c0RlbGV0ZSh0aGlzLmVudGl0eUlEKTtcbn07XG5cbi8qKiBHZXQgc3RvcmFnZSB0YWJsZSBmb3IgdGhpcyBlbnRpdHkgdHlwZS4gKi9cbk5ldFNpbUVudGl0eS5wcm90b3R5cGUuZ2V0VGFibGUgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRoaXMgbWV0aG9kIHNob3VsZCBiZSBpbXBsZW1lbnRlZCBieSBhIGNoaWxkIGNsYXNzLlxuICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBnZXRUYWJsZSBpcyBub3QgaW1wbGVtZW50ZWQuJyk7XG59O1xuXG4vKiogQ29uc3RydWN0IHRhYmxlIHJvdyBmb3IgdGhpcyBlbnRpdHkuICovXG5OZXRTaW1FbnRpdHkucHJvdG90eXBlLmJ1aWxkUm93ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge307XG59O1xuXG4vKipcbiAqIERlc3Ryb3lzIGFsbCBwcm92aWRlZCBlbnRpdGllcyAoZnJvbSByZW1vdGUgc3RvcmFnZSkgYXN5bmNocm9ub3VzbHksIGFuZFxuICogY2FsbHMgb25Db21wbGV0ZSB3aGVuIGFsbCBlbnRpdGllcyBoYXZlIGJlZW4gZGVzdHJveWVkIGFuZC9vciBhbiBlcnJvciBvY2N1cnMuXG4gKiBAcGFyYW0ge05ldFNpbUVudGl0eVtdfSBlbnRpdGllc1xuICogQHBhcmFtIHshTm9kZVN0eWxlQ2FsbGJhY2t9IG9uQ29tcGxldGVcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiBhbGwgcGFzc2VkIGVudGl0aWVzIGRvIG5vdCBiZWxvbmcgdG8gdGhlIHNhbWUgdGFibGUuXG4gKi9cbk5ldFNpbUVudGl0eS5kZXN0cm95RW50aXRpZXMgPSBmdW5jdGlvbiAoZW50aXRpZXMsIG9uQ29tcGxldGUpIHtcbiAgaWYgKGVudGl0aWVzLmxlbmd0aCA9PT0gMCkge1xuICAgIG9uQ29tcGxldGUobnVsbCwgdHJ1ZSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHRhYmxlID0gZW50aXRpZXNbMF0uZ2V0VGFibGUoKTtcbiAgdmFyIGVudGl0eUlEcyA9IGVudGl0aWVzLm1hcChmdW5jdGlvbiAoZW50aXR5KSB7XG4gICAgaWYgKGVudGl0eS5nZXRUYWJsZSgpICE9PSB0YWJsZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZGVzdHJveUVudGl0aWVzIHJlcXVpcmVzIGFsbCBlbnRpdGllcyB0byBiZSBpbiB0aGUgc2FtZSB0YWJsZVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGVudGl0eS5lbnRpdHlJRDtcbiAgfSk7XG5cbiAgdGFibGUuZGVsZXRlTWFueShlbnRpdHlJRHMsIG9uQ29tcGxldGUpO1xufTtcbiIsIi8qKlxuICogQG92ZXJ2aWV3IFVJIHNsaWRlciB1c2VkIHRvIGNoYW5nZSB0aGUgbG9jYWwgZGV2aWNlJ3MgY2h1bmsgc2l6ZSwgd2hpY2hcbiAqICAgICAgICAgICBpcyB1c2VkIHdoZW4gaW50ZXJwcmV0aW5nIGJpbmFyeSB0byBvdGhlciBmb3JtYXRzLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIGkxOG4gPSByZXF1aXJlKCcuL2xvY2FsZScpO1xudmFyIE5ldFNpbVNsaWRlciA9IHJlcXVpcmUoJy4vTmV0U2ltU2xpZGVyJyk7XG5cbi8qKlxuICogR2VuZXJhdG9yIGFuZCBjb250cm9sbGVyIGZvciBjaHVuayBzaXplIHNsaWRlci9zZWxlY3RvclxuICogQHBhcmFtIHtqUXVlcnl9IHJvb3REaXZcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNodW5rU2l6ZUNoYW5nZUNhbGxiYWNrXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhdWdtZW50cyBOZXRTaW1TbGlkZXJcbiAqL1xudmFyIE5ldFNpbUNodW5rU2l6ZUNvbnRyb2wgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyb290RGl2LFxuICAgIGNodW5rU2l6ZUNoYW5nZUNhbGxiYWNrKSB7XG4gIE5ldFNpbVNsaWRlci5jYWxsKHRoaXMsIHJvb3REaXYsIHtcbiAgICBvbkNoYW5nZTogY2h1bmtTaXplQ2hhbmdlQ2FsbGJhY2ssXG4gICAgbWluOiAxLFxuICAgIG1heDogMzJcbiAgfSk7XG5cbiAgLy8gQXV0by1yZW5kZXIsIHVubGlrZSBvdXIgcGFyZW50IGNsYXNzXG4gIHRoaXMucmVuZGVyKCk7XG59O1xuTmV0U2ltQ2h1bmtTaXplQ29udHJvbC5pbmhlcml0cyhOZXRTaW1TbGlkZXIpO1xuXG4vKipcbiAqIENvbnZlcnRzIGFuIGV4dGVybmFsLWZhY2luZyBudW1lcmljIHZhbHVlIGludG8gYSBsb2NhbGl6ZWQgc3RyaW5nXG4gKiByZXByZXNlbnRhdGlvbiBvZiB0aGF0IHZhbHVlLlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbCAtIG51bWVyaWMgdmFsdWUgb2YgdGhlIGNvbnRyb2xcbiAqIEByZXR1cm5zIHtzdHJpbmd9IC0gbG9jYWxpemVkIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB2YWx1ZVxuICogQG92ZXJyaWRlXG4gKi9cbk5ldFNpbUNodW5rU2l6ZUNvbnRyb2wucHJvdG90eXBlLnZhbHVlVG9MYWJlbCA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuIGkxOG4ubnVtQml0c1BlckNodW5rKHtcbiAgICBudW1CaXRzOiB2YWxcbiAgfSk7XG59O1xuXG4vKipcbiAqIEFsdGVybmF0ZSBsYWJlbCBjb252ZXJ0ZXIsIHVzZWQgZm9yIHNsaWRlciBlbmQgbGFiZWxzLlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbCAtIG51bWVyaWMgdmFsdWUgb2YgdGhlIGNvbnRyb2xcbiAqIEByZXR1cm5zIHtzdHJpbmd9IC0gbG9jYWxpemVkIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB2YWx1ZVxuICogQG92ZXJyaWRlXG4gKi9cbk5ldFNpbUNodW5rU2l6ZUNvbnRyb2wucHJvdG90eXBlLnZhbHVlVG9TaG9ydExhYmVsID0gZnVuY3Rpb24gKHZhbCkge1xuICByZXR1cm4gdmFsLnRvU3RyaW5nKCk7XG59O1xuIiwiLyoqXG4gKiBAb3ZlcnZpZXcgVUkgc2xpZGVyIHVzZWQgdG8gY2hhbmdlIHRoZSBsb2NhbCBkZXZpY2UncyBiaXRyYXRlLlxuICogICAgICAgICAgIERpZmZlcnMgZnJvbSB0aGUgcHVsc2UgcmF0ZSBzbGlkZXIgaW4gc2NhbGUgYW5kIHVuaXRzLlxuICogQHNlZSBOZXRTaW1QdWxzZVJhdGVDb250cm9sXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyBVdGlscyByZXF1aXJlZCBvbmx5IGZvciBGdW5jdGlvbi5wcm90b3R5cGUuaW5oZXJpdHMoKVxucmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBOZXRTaW1VdGlscyA9IHJlcXVpcmUoJy4vTmV0U2ltVXRpbHMnKTtcbnZhciBOZXRTaW1TbGlkZXIgPSByZXF1aXJlKCcuL05ldFNpbVNsaWRlcicpO1xuXG4vKipcbiAqIEdlbmVyYXRvciBhbmQgY29udHJvbGxlciBmb3IgcGFja2V0IHNpemUgc2xpZGVyL3NlbGVjdG9yXG4gKiBAcGFyYW0ge2pRdWVyeX0gcm9vdERpdlxuICogQHBhcmFtIHtudW1iZXJ9IGluaXRpYWxWYWx1ZSAtIGluIGJpdHMgcGVyIHNlY29uZFxuICogQHBhcmFtIHtmdW5jdGlvbn0gc2xpZGVyQ2hhbmdlQ2FsbGJhY2tcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgTmV0U2ltQml0UmF0ZUNvbnRyb2wgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyb290RGl2LCBpbml0aWFsVmFsdWUsXG4gICAgc2xpZGVyQ2hhbmdlQ2FsbGJhY2spIHtcbiAgTmV0U2ltU2xpZGVyLmNhbGwodGhpcywgcm9vdERpdiwge1xuICAgIG9uQ2hhbmdlOiBzbGlkZXJDaGFuZ2VDYWxsYmFjayxcbiAgICB2YWx1ZTogaW5pdGlhbFZhbHVlLFxuICAgIG1pbjogMSxcbiAgICBtYXg6IDIwLFxuICAgIHVwcGVyQm91bmRJbmZpbml0ZTogdHJ1ZVxuICB9KTtcblxuICAvLyBBdXRvLXJlbmRlciwgdW5saWtlIG91ciBiYXNlIGNsYXNzXG4gIHRoaXMucmVuZGVyKCk7XG59O1xuTmV0U2ltQml0UmF0ZUNvbnRyb2wuaW5oZXJpdHMoTmV0U2ltU2xpZGVyKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIG51bWVyaWMgcmF0ZSB2YWx1ZSAoaW4gYml0cyBwZXJzIHNlY29uZCkgaW50byBhXG4gKiBsb2NhbGl6ZWQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoYXQgdmFsdWUuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsIC0gbnVtZXJpYyB2YWx1ZSBvZiB0aGUgY29udHJvbFxuICogQHJldHVybnMge3N0cmluZ30gLSBsb2NhbGl6ZWQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHZhbHVlXG4gKiBAb3ZlcnJpZGVcbiAqL1xuTmV0U2ltQml0UmF0ZUNvbnRyb2wucHJvdG90eXBlLnZhbHVlVG9MYWJlbCA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuIE5ldFNpbVV0aWxzLmJpdHJhdGVUb0xvY2FsaXplZFJvdW5kZWRCaXRyYXRlKHZhbCk7XG59O1xuIiwiLyoqXG4gKiBAb3ZlcnZpZXcgVUkgY29tcG9uZW50LCBhIGxvZyBwYW5lbCAodXNlZCBhcyBcIlNlbnQgQml0c1wiIGFuZCBcIlJlY2VpdmVkIEJpdHNcIilcbiAqICAgICAgICAgICB0aGF0IGlzIHVzZWQgaW4gdGhlIHNpbmdsZS1iaXQtc2VuZGluZyBjb25maWd1cmF0aW9ucyBvZiB0aGUgc2ltdWxhdG9yLlxuICpcbiAqIEBzZWUgSU5ldFNpbUxvZ1BhbmVsIGZvciB0aGUgaW50ZXJmYWNlIGltcGxlbWVudGVkIGhlcmUuXG4gKiBAc2VlIE5ldFNpbUxvZ1BhbmVsIGZvciB0aGUgY29tcG9uZW50IHVzZWQgaW4gcGFja2V0LXNlbmRpbmcgbW9kZS5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJy4uL3V0aWxzJyk7IC8vIEZvciBGdW5jdGlvbi5wcm90b3R5cGUuaW5oZXJpdHMoKVxudmFyIGkxOG4gPSByZXF1aXJlKCcuL2xvY2FsZScpO1xudmFyIG1hcmt1cCA9IHJlcXVpcmUoJy4vTmV0U2ltQml0TG9nUGFuZWwuaHRtbC5lanMnKTtcbnZhciBOZXRTaW1QYW5lbCA9IHJlcXVpcmUoJy4vTmV0U2ltUGFuZWwnKTtcbnZhciBOZXRTaW1FbmNvZGluZ0NvbnRyb2wgPSByZXF1aXJlKCcuL05ldFNpbUVuY29kaW5nQ29udHJvbCcpO1xudmFyIE5ldFNpbUdsb2JhbHMgPSByZXF1aXJlKCcuL05ldFNpbUdsb2JhbHMnKTtcblxudmFyIGxvZ2dlciA9IHJlcXVpcmUoJy4vTmV0U2ltTG9nZ2VyJykuZ2V0U2luZ2xldG9uKCk7XG5cbi8qKlxuICogR2VuZXJhdG9yIGFuZCBjb250cm9sbGVyIGZvciBiaXQtbG9nLCB3aGljaCByZWNlaXZlcyBiaXRzIG9uZSBhdCBhIHRpbWUuXG4gKiBAcGFyYW0ge2pRdWVyeX0gcm9vdERpdlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmxvZ1RpdGxlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmlzTWluaW1pemVkXSBkZWZhdWx0cyB0byBGQUxTRVxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5zaG93UmVhZFdpcmVCdXR0b25dIGRlZmF1bHRzIHRvIEZBTFNFXG4gKiBAcGFyYW0ge05ldFNpbX0gb3B0aW9ucy5uZXRzaW1cbiAqIEBjb25zdHJ1Y3RvclxuICogQGF1Z21lbnRzIE5ldFNpbVBhbmVsXG4gKiBAaW1wbGVtZW50cyBJTmV0U2ltTG9nUGFuZWxcbiAqL1xudmFyIE5ldFNpbUJpdExvZ1BhbmVsID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocm9vdERpdiwgb3B0aW9ucykge1xuICAvKipcbiAgICogVGhlIGN1cnJlbnQgYmluYXJ5IGNvbnRlbnRzIG9mIHRoZSBsb2cgcGFuZWxcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuYmluYXJ5XyA9ICcnO1xuXG4gIC8qKlxuICAgKiBBIG1lc3NhZ2UgZW5jb2RpbmcgKGRpc3BsYXkpIHNldHRpbmcuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmVuY29kaW5nc18gPSBbXTtcblxuICAvKipcbiAgICogQ3VycmVudCBjaHVuayBzaXplIChieXRlc2l6ZSkgZm9yIGludGVycHJldGluZyBiaW5hcnkgaW4gdGhlIGxvZy5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuY2h1bmtTaXplXyA9IDg7XG5cbiAgLyoqXG4gICAqIExvY2FsaXplZCBwYW5lbCB0aXRsZVxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5sb2dUaXRsZV8gPSBvcHRpb25zLmxvZ1RpdGxlO1xuXG4gIC8qKlxuICAgKiBSZWZlcmVuY2UgdG8gdGhlIHRvcC1sZXZlbCBOZXRTaW0gY29udHJvbGxlciBmb3IgcmVhZGluZyBiaXRzIGFuZFxuICAgKiB0cmlnZ2VyaW5nIGFuaW1hdGlvbnMuXG4gICAqIEB0eXBlIHtOZXRTaW19XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLm5ldHNpbV8gPSBvcHRpb25zLm5ldHNpbTtcblxuICAvKipcbiAgICogV2hldGhlciB0aGlzIGxvZyBzaG91bGQgaGF2ZSBhIFwiUmVhZCBXaXJlXCIgYnV0dG9uLlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuc2hvd1JlYWRXaXJlQnV0dG9uXyA9IG9wdGlvbnMuc2hvd1JlYWRXaXJlQnV0dG9uO1xuXG4gIC8qKlxuICAgKiBIb3cgdGFsbCB0aGUgb3ZlcmFsbCBwYW5lbCBzaG91bGQgYmUgd2hlbiBpdCdzIG9wZW4gKGluIHBpeGVscykuXG4gICAqIFNldCBieSBhIGR5bmFtaWMgcmVzaXplIHN5c3RlbS5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMub3BlbkhlaWdodF8gPSAwO1xuXG4gIC8vIEluaXRpYWwgcmVuZGVyXG4gIE5ldFNpbVBhbmVsLmNhbGwodGhpcywgcm9vdERpdiwge1xuICAgIGNsYXNzTmFtZTogJ25ldHNpbS1sb2ctcGFuZWwnLFxuICAgIHBhbmVsVGl0bGU6IG9wdGlvbnMubG9nVGl0bGUsXG4gICAgYmVnaW5NaW5pbWl6ZWQ6IG9wdGlvbnMuaXNNaW5pbWl6ZWRcbiAgfSk7XG59O1xuTmV0U2ltQml0TG9nUGFuZWwuaW5oZXJpdHMoTmV0U2ltUGFuZWwpO1xuXG5OZXRTaW1CaXRMb2dQYW5lbC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAvLyBDcmVhdGUgYm9pbGVycGxhdGUgcGFuZWwgbWFya3VwXG4gIE5ldFNpbUJpdExvZ1BhbmVsLnN1cGVyUHJvdG90eXBlLnJlbmRlci5jYWxsKHRoaXMpO1xuXG4gIC8vIEFkZCBvdXIgb3duIGNvbnRlbnQgbWFya3VwXG4gIHZhciBuZXdNYXJrdXAgPSAkKG1hcmt1cCh7XG4gICAgYmluYXJ5OiB0aGlzLmJpbmFyeV8sXG4gICAgZW5hYmxlZEVuY29kaW5nczogdGhpcy5lbmNvZGluZ3NfLFxuICAgIGNodW5rU2l6ZTogdGhpcy5jaHVua1NpemVfLFxuICAgIHNob3dSZWFkV2lyZUJ1dHRvbjogdGhpcy5zaG93UmVhZFdpcmVCdXR0b25fXG4gIH0pKTtcbiAgdGhpcy5nZXRCb2R5KCkuaHRtbChuZXdNYXJrdXApO1xuICBOZXRTaW1FbmNvZGluZ0NvbnRyb2wuaGlkZVJvd3NCeUVuY29kaW5nKHRoaXMuZ2V0Qm9keSgpLCB0aGlzLmVuY29kaW5nc18pO1xuXG5cbiAgdGhpcy5nZXRCb2R5KCkuZmluZCgnI3JlYWQtd2lyZS1idXR0b24nKVxuICAgICAgLmNsaWNrKHRoaXMub25SZWNlaXZlQnV0dG9uUHJlc3NfLmJpbmQodGhpcykpO1xuXG4gIC8vIEFkZCBhIGNsZWFyIGJ1dHRvbiB0byB0aGUgcGFuZWwgaGVhZGVyXG4gIHRoaXMuYWRkQnV0dG9uKGkxOG4uY2xlYXIoKSwgdGhpcy5vbkNsZWFyQnV0dG9uUHJlc3NfLmJpbmQodGhpcykpO1xuXG4gIC8vIFNuYXAgYmFjayB0byB0aGUgZHluYW1pYyBzaXplIHdlJ3ZlIGJlZW4gZ2l2ZW4uXG4gIHRoaXMuc2l6ZVRvT3BlbkhlaWdodF8oKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFsbCBwYWNrZXRzIGZyb20gdGhlIGxvZywgcmVzZXR0aW5nIGl0cyBzdGF0ZS5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbUJpdExvZ1BhbmVsLnByb3RvdHlwZS5vbkNsZWFyQnV0dG9uUHJlc3NfID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmJpbmFyeV8gPSAnJztcbiAgdGhpcy5yZW5kZXIoKTtcbn07XG5cbi8qKlxuICogQXN5bmNocm9ub3VzbHkgZmV0Y2ggdGhlIHdpcmUgc3RhdGUgZnJvbSByZW1vdGUgc3RvcmFnZSwgYW5kIGxvZyBpdC5cbiAqIEBwYXJhbSB7RXZlbnR9IGpRdWVyeUV2ZW50XG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1CaXRMb2dQYW5lbC5wcm90b3R5cGUub25SZWNlaXZlQnV0dG9uUHJlc3NfID0gZnVuY3Rpb24gKGpRdWVyeUV2ZW50KSB7XG4gIHZhciB0aGlzQnV0dG9uID0gJChqUXVlcnlFdmVudC50YXJnZXQpO1xuICBpZiAodGhpc0J1dHRvbi5pcygnW2Rpc2FibGVkXScpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpc0J1dHRvbi5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xuICB0aGlzLm5ldHNpbV8ucmVjZWl2ZUJpdChmdW5jdGlvbiAoZXJyLCBtZXNzYWdlKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgbG9nZ2VyLndhcm4oXCJFcnJvciByZWFkaW5nIHdpcmUgc3RhdGU6IFwiICsgZXJyLm1lc3NhZ2UpO1xuICAgICAgdGhpc0J1dHRvbi5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEEgc3VjY2Vzc2Z1bCBmZXRjaCB3aXRoIGEgbnVsbCBtZXNzYWdlIG1lYW5zIHRoZXJlJ3Mgbm90aGluZ1xuICAgIC8vIG9uIHRoZSB3aXJlLiAgV2Ugc2hvdWxkIGxvZyBpdHMgZGVmYXVsdCBzdGF0ZTogb2ZmL3plcm9cbiAgICB2YXIgcmVjZWl2ZWRCaXQgPSAnMCc7XG4gICAgaWYgKG1lc3NhZ2UpIHtcbiAgICAgIHJlY2VpdmVkQml0ID0gbWVzc2FnZS5wYXlsb2FkO1xuICAgIH1cblxuICAgIHRoaXMubG9nKHJlY2VpdmVkQml0KTtcbiAgICB0aGlzLm5ldHNpbV8uYW5pbWF0ZVJlYWRXaXJlU3RhdGUocmVjZWl2ZWRCaXQpO1xuICAgIHRoaXNCdXR0b24ucmVtb3ZlQXR0cignZGlzYWJsZWQnKTtcbiAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogUHV0IGEgbWVzc2FnZSBpbnRvIHRoZSBsb2cuXG4gKiBAcGFyYW0ge3N0cmluZ30gYmluYXJ5Qml0XG4gKi9cbk5ldFNpbUJpdExvZ1BhbmVsLnByb3RvdHlwZS5sb2cgPSBmdW5jdGlvbiAoYmluYXJ5Qml0KSB7XG4gIHRoaXMuYmluYXJ5XyArPSBiaW5hcnlCaXQudG9TdHJpbmcoKTtcbiAgdGhpcy5yZW5kZXIoKTtcbn07XG5cbi8qKlxuICogU2hvdyBvciBoaWRlIHBhcnRzIG9mIHRoZSBzZW5kIFVJIGJhc2VkIG9uIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgZW5jb2RpbmdcbiAqIG1vZGUuXG4gKiBAcGFyYW0ge0VuY29kaW5nVHlwZVtdfSBuZXdFbmNvZGluZ3NcbiAqL1xuTmV0U2ltQml0TG9nUGFuZWwucHJvdG90eXBlLnNldEVuY29kaW5ncyA9IGZ1bmN0aW9uIChuZXdFbmNvZGluZ3MpIHtcbiAgdGhpcy5lbmNvZGluZ3NfID0gbmV3RW5jb2RpbmdzO1xuICB0aGlzLnJlbmRlcigpO1xufTtcblxuLyoqXG4gKiBDaGFuZ2UgaG93IGJpbmFyeSBpbnB1dCBpbiBpbnRlcnByZXRlZCBhbmQgZm9ybWF0dGVkIGluIHRoZSBsb2cuXG4gKiBAcGFyYW0ge251bWJlcn0gbmV3Q2h1bmtTaXplXG4gKi9cbk5ldFNpbUJpdExvZ1BhbmVsLnByb3RvdHlwZS5zZXRDaHVua1NpemUgPSBmdW5jdGlvbiAobmV3Q2h1bmtTaXplKSB7XG4gIHRoaXMuY2h1bmtTaXplXyA9IG5ld0NodW5rU2l6ZTtcbiAgdGhpcy5yZW5kZXIoKTtcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgdmVydGljYWwgc3BhY2UgdGhhdCB0aGlzIGxvZyBwYW5lbCBzaG91bGQgY29uc3VtZSAoaW5jbHVkaW5nIG1hcmdpbnMpXG4gKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0UGl4ZWxzXG4gKi9cbk5ldFNpbUJpdExvZ1BhbmVsLnByb3RvdHlwZS5zZXRIZWlnaHQgPSBmdW5jdGlvbiAoaGVpZ2h0UGl4ZWxzKSB7XG4gIHRoaXMub3BlbkhlaWdodF8gPSBoZWlnaHRQaXhlbHM7XG4gIHRoaXMuc2l6ZVRvT3BlbkhlaWdodF8oKTtcbn07XG5cbi8qKlxuICogU2NhbGUgdGhlIHNjcm9sbCBhcmVhIGluc2lkZSB0aGUgcGFuZWwgc28gdGhhdCB0aGUgd2hvbGUgcGFuZWxcbiAqIGlzIHRoZSBkZXNpcmVkIGhlaWdodC5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbUJpdExvZ1BhbmVsLnByb3RvdHlwZS5zaXplVG9PcGVuSGVpZ2h0XyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJvb3QgPSB0aGlzLmdldFJvb3QoKS5maW5kKCcubmV0c2ltLXBhbmVsJyk7XG4gIHZhciBwYW5lbEhlYWRlciA9IHJvb3QuZmluZCgnaDEnKTtcbiAgdmFyIHBhbmVsQm9keSA9IHJvb3QuZmluZCgnLnBhbmVsLWJvZHknKTtcbiAgdmFyIHNjcm9sbEFyZWEgPSByb290LmZpbmQoJy5zY3JvbGwtYXJlYScpO1xuXG4gIHZhciBwYW5lbE1hcmdpbnMgPSBwYXJzZUZsb2F0KHJvb3QuY3NzKCdtYXJnaW4tdG9wJykpICtcbiAgICAgIHBhcnNlRmxvYXQocm9vdC5jc3MoJ21hcmdpbi1ib3R0b20nKSk7XG4gIHZhciBoZWFkZXJIZWlnaHQgPSBwYW5lbEhlYWRlci5vdXRlckhlaWdodCh0cnVlKTtcbiAgdmFyIHBhbmVsQm9yZGVycyA9IHBhcnNlRmxvYXQocGFuZWxCb2R5LmNzcygnYm9yZGVyLXRvcC13aWR0aCcpKSArXG4gICAgICBwYXJzZUZsb2F0KHBhbmVsQm9keS5jc3MoJ2JvcmRlci1ib3R0b20td2lkdGgnKSk7XG4gIHZhciBzY3JvbGxNYXJnaW5zID0gcGFyc2VGbG9hdChzY3JvbGxBcmVhLmNzcygnbWFyZ2luLXRvcCcpKSArXG4gICAgICBwYXJzZUZsb2F0KHNjcm9sbEFyZWEuY3NzKCdtYXJnaW4tYm90dG9tJykpO1xuXG4gIC8vIFdlIHNldCB0aGUgcGFuZWwgaGVpZ2h0IGJ5IGZpeGluZyB0aGUgc2l6ZSBvZiBpdHMgaW5uZXIgc2Nyb2xsYWJsZVxuICAvLyBhcmVhLlxuICB2YXIgbmV3U2Nyb2xsVmlld3BvcnRIZWlnaHQgPSB0aGlzLm9wZW5IZWlnaHRfIC0gKHBhbmVsTWFyZ2lucyArIGhlYWRlckhlaWdodCArXG4gICAgICBwYW5lbEJvcmRlcnMgKyBzY3JvbGxNYXJnaW5zKTtcbiAgc2Nyb2xsQXJlYS5oZWlnaHQoTWF0aC5mbG9vcihuZXdTY3JvbGxWaWV3cG9ydEhlaWdodCkpO1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7bnVtYmVyfSB2ZXJ0aWNhbCBzcGFjZSB0aGF0IHBhbmVsIGN1cnJlbnRseSBjb25zdW1lcyAoaW5jbHVkaW5nXG4gKiBtYXJnaW5zKSBpbiBwaXhlbHMuXG4gKi9cbk5ldFNpbUJpdExvZ1BhbmVsLnByb3RvdHlwZS5nZXRIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmdldFJvb3QoKS5maW5kKCcubmV0c2ltLXBhbmVsJykub3V0ZXJIZWlnaHQodHJ1ZSk7XG59O1xuXG4vKipcbiAqIEFmdGVyIHRvZ2dsaW5nIHBhbmVsIHZpc2liaWxpdHksIHRyaWdnZXIgYSBsYXlvdXQgdXBkYXRlIHNvIHNlbmQvbG9nIHBhbmVsXG4gKiBzcGFjZSBpcyBzaGFyZWQgY29ycmVjdGx5LlxuICogQHByaXZhdGVcbiAqIEBvdmVycmlkZVxuICovXG5OZXRTaW1CaXRMb2dQYW5lbC5wcm90b3R5cGUub25NaW5pbWl6ZXJDbGlja18gPSBmdW5jdGlvbiAoKSB7XG4gIE5ldFNpbUJpdExvZ1BhbmVsLnN1cGVyUHJvdG90eXBlLm9uTWluaW1pemVyQ2xpY2tfLmNhbGwodGhpcyk7XG4gIE5ldFNpbUdsb2JhbHMudXBkYXRlTGF5b3V0KCk7XG59O1xuIiwiLyoqXG4gKiBAb3ZlcnZpZXcgYmFzZSBjbGFzcyBmb3IgYWxsIFwicGFuZWxzXCIgKHZpc3VhbCBib3hlcykgaW4gdGhlIE5ldFNpbVxuICogICAgICAgICAgIGludGVyZmFjZSwgcHJvdmlkZXMgc29tZSBjb21tb24gZXhwYW5kL2NvbGxhcHNlIGZ1bmN0aW9uYWxpdHkuXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIG1hcmt1cCA9IHJlcXVpcmUoJy4vTmV0U2ltUGFuZWwuaHRtbC5lanMnKTtcbnZhciBBcmd1bWVudFV0aWxzID0gcmVxdWlyZSgnLi9Bcmd1bWVudFV0aWxzJyk7XG5cbi8qKlxuICogR2VuZXJhdG9yIGFuZCBjb250cm9sbGVyIGZvciBhIE5ldFNpbSBQYW5lbCwgYSBzaW5nbGUgc2VjdGlvbiBvbiB0aGVcbiAqIHBhZ2Ugd2hpY2ggbWF5IGJlIGNvbGxhcHNpYmxlLlxuICogQHBhcmFtIHtqUXVlcnl9IHJvb3REaXYgLSBFbGVtZW50IHdpdGhpbiB3aGljaCB0aGUgcGFuZWwgaXMgcmVjcmVhdGVkXG4gKiAgICAgICAgZXZlcnkgdGltZSByZW5kZXIoKSBpcyBjYWxsZWQuICBXaWxsIHdpcGUgb3V0IGNvbnRlbnRzIG9mIHRoaXNcbiAqICAgICAgICBlbGVtZW50LCBidXQgbm90IHRoZSBlbGVtZW50IGl0c2VsZi5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5jbGFzc05hbWVdIC0gYW4gYWRkaXRpb25hbCBjbGFzcyB0byBiZSBhcHBlbmRlZCB0b1xuICogICAgICAgIHRoZSBwYW5lbCdzIHJvb3QgKG9uZSBsYXllciBpbnNpZGUgcm9vdERpdikgZm9yIHN0eWxlIHJ1bGVzLlxuICogICAgICAgIERlZmF1bHRzIHRvIG5vIGNsYXNzLCBzbyBvbmx5IHRoZSAnbmV0c2ltLXBhbmVsJyBjbGFzcyB3aWxsIGJlIHVzZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMucGFuZWxUaXRsZV0gLSBMb2NhbGl6ZWQgaW5pdGlhbCBwYW5lbCB0aXRsZS5cbiAqICAgICAgICBEZWZhdWx0cyB0byBlbXB0eSBzdHJpbmcuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnVzZXJUb2dnbGVhYmxlXSAtIFdoZXRoZXIgdGhpcyBwYW5lbCBjYW4gYmUgbWluaW1pemVkXG4gKiAgICAgICAgKGNsb3NlZCkgYnkgY2xpY2tpbmcgb24gdGhlIHRpdGxlLiBEZWZhdWx0cyB0byBUUlVFLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5iZWdpbk1pbmltaXplZF0gLSBXaGV0aGVyIHRoaXMgcGFuZWwgc2hvdWxkIGJlXG4gKiAgICAgICAgbWluaW1pemVkIChjbG9zZWQpIHdoZW4gaXQgaXMgaW5pdGlhbGx5IGNyZWF0ZWQuICBEZWZhdWx0cyB0byBGQUxTRS5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgTmV0U2ltUGFuZWwgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyb290RGl2LCBvcHRpb25zKSB7XG4gIC8qKlxuICAgKiBVbmlxdWUgaW5zdGFuY2UgSUQgZm9yIHRoaXMgcGFuZWwsIGluIGNhc2Ugd2UgaGF2ZSBzZXZlcmFsXG4gICAqIG9mIHRoZW0gb24gYSBwYWdlLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5pbnN0YW5jZUlEXyA9IE5ldFNpbVBhbmVsLnVuaXF1ZUlEQ291bnRlcjtcbiAgTmV0U2ltUGFuZWwudW5pcXVlSURDb3VudGVyKys7XG5cbiAgLyoqXG4gICAqIENvbXBvbmVudCByb290LCB3aGljaCB3ZSBmaWxsIHdoZW5ldmVyIHdlIGNhbGwgcmVuZGVyKClcbiAgICogQHR5cGUge2pRdWVyeX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucm9vdERpdl8gPSByb290RGl2O1xuXG4gIC8qKlxuICAgKiBBbiBhZGRpdGlvbmFsIGNsYXNzTmFtZSB0byBiZSBhcHBlbmRlZCB0byB0aGUgcGFuZWwncyByb290IChvbmUgbGF5ZXJcbiAgICogaW5zaWRlIHJvb3REaXYpLCBmb3Igc3R5bGUgcnVsZXMuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmNsYXNzTmFtZV8gPSB1dGlscy52YWx1ZU9yKG9wdGlvbnMuY2xhc3NOYW1lLCAnJyk7XG5cbiAgLyoqXG4gICAqIFBhbmVsIHRpdGxlLCBkaXNwbGF5ZWQgaW4gaGVhZGVyLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5wYW5lbFRpdGxlXyA9IHV0aWxzLnZhbHVlT3Iob3B0aW9ucy5wYW5lbFRpdGxlLCAnJyk7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhpcyBwYW5lbCBjYW4gYmUgbWluaW1pemVkIChjbG9zZWQpIGJ5IGNsaWNraW5nIG9uIHRoZSB0aXRsZS5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnVzZXJUb2dnbGVhYmxlXyA9IHV0aWxzLnZhbHVlT3Iob3B0aW9ucy51c2VyVG9nZ2xlYWJsZSwgdHJ1ZSk7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGNvbXBvbmVudCBpcyBtaW5pbWl6ZWQsIGZvciBjb25zaXN0ZW50XG4gICAqIHN0YXRlIGFjcm9zcyByZS1yZW5kZXJzLlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuaXNNaW5pbWl6ZWRfID0gdXRpbHMudmFsdWVPcihvcHRpb25zLmJlZ2luTWluaW1pemVkLCBmYWxzZSk7XG5cbiAgLy8gSW5pdGlhbCByZW5kZXJcbiAgdGhpcy5yZW5kZXIoKTtcbn07XG5cbi8qKlxuICogU3RhdGljIGNvdW50ZXIgdXNlZCB0byBnZW5lcmF0ZS91bmlxdWVseSBpZGVudGlmeSBkaWZmZXJlbnQgaW5zdGFuY2VzXG4gKiBvZiB0aGlzIGxvZyB3aWRnZXQgb24gdGhlIHBhZ2UuXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5OZXRTaW1QYW5lbC51bmlxdWVJRENvdW50ZXIgPSAwO1xuXG4vKipcbiAqIFJlYnVpbGQgdGhlIHBhbmVsIGNvbnRlbnRzIGluc2lkZSBvZiB0aGUgcm9vdERpdlxuICovXG5OZXRTaW1QYW5lbC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbmV3TWFya3VwID0gJChtYXJrdXAoe1xuICAgIGluc3RhbmNlSUQ6IHRoaXMuaW5zdGFuY2VJRF8sXG4gICAgY2xhc3NOYW1lOiB0aGlzLmNsYXNzTmFtZV8sXG4gICAgcGFuZWxUaXRsZTogdGhpcy5wYW5lbFRpdGxlXyxcbiAgICB1c2VyVG9nZ2xlYWJsZTogdGhpcy51c2VyVG9nZ2xlYWJsZV9cbiAgfSkpO1xuICB0aGlzLnJvb3REaXZfLmh0bWwobmV3TWFya3VwKTtcblxuICBpZiAodGhpcy51c2VyVG9nZ2xlYWJsZV8pIHtcbiAgICB0aGlzLnJvb3REaXZfLmZpbmQoJy5taW5pbWl6ZXInKS5jbGljayh0aGlzLm9uTWluaW1pemVyQ2xpY2tfLmJpbmQodGhpcykpO1xuICB9XG4gIHRoaXMuc2V0TWluaW1pemVkKHRoaXMuaXNNaW5pbWl6ZWRfKTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge2pRdWVyeX0gYSBoYW5kbGUgb24gdGhlIHJvb3QgZWxlbWVudCBmb3IgdGhpcyBwYW5lbFxuICovXG5OZXRTaW1QYW5lbC5wcm90b3R5cGUuZ2V0Um9vdCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMucm9vdERpdl87XG59O1xuXG4vKipcbiAqIFNldCBwYW5lbCB0aXRsZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuZXdUaXRsZSAtIExvY2FsaXplZCBwYW5lbCB0aXRsZS5cbiAqL1xuTmV0U2ltUGFuZWwucHJvdG90eXBlLnNldFBhbmVsVGl0bGUgPSBmdW5jdGlvbiAobmV3VGl0bGUpIHtcbiAgdGhpcy5wYW5lbFRpdGxlXyA9IG5ld1RpdGxlO1xuICB0aGlzLnJvb3REaXZfLmZpbmQoJy50aXRsZS10ZXh0JykudGV4dChuZXdUaXRsZSk7XG59O1xuXG4vKipcbiAqIFRvZ2dsZSB3aGV0aGVyIHRoaXMgcGFuZWwgaXMgbWluaW1pemVkLlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUGFuZWwucHJvdG90eXBlLm9uTWluaW1pemVyQ2xpY2tfID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnNldE1pbmltaXplZCghdGhpcy5pc01pbmltaXplZF8pO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJlY29tZU1pbmltaXplZFxuICovXG5OZXRTaW1QYW5lbC5wcm90b3R5cGUuc2V0TWluaW1pemVkID0gZnVuY3Rpb24gKGJlY29tZU1pbmltaXplZCkge1xuICB2YXIgcGFuZWxEaXYgPSB0aGlzLnJvb3REaXZfLmZpbmQoJy5uZXRzaW0tcGFuZWwnKTtcbiAgdmFyIG1pbmltaXplciA9IHBhbmVsRGl2LmZpbmQoJy5taW5pbWl6ZXInKTtcbiAgaWYgKGJlY29tZU1pbmltaXplZCkge1xuICAgIHBhbmVsRGl2LmFkZENsYXNzKCdtaW5pbWl6ZWQnKTtcbiAgICBtaW5pbWl6ZXIuZmluZCgnLmZhJylcbiAgICAgICAgLmFkZENsYXNzKCdmYS1wbHVzLXNxdWFyZScpXG4gICAgICAgIC5yZW1vdmVDbGFzcygnZmEtbWludXMtc3F1YXJlJyk7XG4gIH0gZWxzZSB7XG4gICAgcGFuZWxEaXYucmVtb3ZlQ2xhc3MoJ21pbmltaXplZCcpO1xuICAgIG1pbmltaXplci5maW5kKCcuZmEnKVxuICAgICAgICAuYWRkQ2xhc3MoJ2ZhLW1pbnVzLXNxdWFyZScpXG4gICAgICAgIC5yZW1vdmVDbGFzcygnZmEtcGx1cy1zcXVhcmUnKTtcbiAgfVxuICB0aGlzLmlzTWluaW1pemVkXyA9IGJlY29tZU1pbmltaXplZDtcbn07XG5cbi8qKlxuICogV2hldGhlciB0aGlzIHBhbmVsIGlzIGN1cnJlbnRseSBtaW5pbWl6ZWQgKHNob3dpbmcgb25seSBpdHMgaGVhZGVyKSBvciBub3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuTmV0U2ltUGFuZWwucHJvdG90eXBlLmlzTWluaW1pemVkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5pc01pbmltaXplZF87XG59O1xuXG4vKipcbiAqIEFkZCBhIGJ1dHRvbiB0byB0aGUgcmlnaHQgZW5kIG9mIHRoZSBwYW5lbCBoZWFkZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gYnV0dG9uVGV4dFxuICogQHBhcmFtIHtmdW5jdGlvbn0gcHJlc3NDYWxsYmFja1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5zZWNvbmRhcnldIC0gZGVmYXVsdCBUUlVFLCBzZWNvbmRhcnkgYnV0dG9uIHN0eWxlXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBbb3B0aW9ucy5jbGFzc2VzXSAtIGRlZmF1bHQgW10sIGFkZGl0aW9uYWwgY2xhc3NlcyBvbiB0aGVcbiAqICAgICAgICBidXR0b24gZWxlbWVudC5cbiAqL1xuTmV0U2ltUGFuZWwucHJvdG90eXBlLmFkZEJ1dHRvbiA9IGZ1bmN0aW9uKGJ1dHRvblRleHQsIHByZXNzQ2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IEFyZ3VtZW50VXRpbHMuZXh0ZW5kT3B0aW9uc09iamVjdChvcHRpb25zIHx8IHt9KTtcblxuICB2YXIgYnV0dG9uID0gJCgnPHNwYW4+JylcbiAgICAgIC5hZGRDbGFzcygnbmV0c2ltLWJ1dHRvbicpXG4gICAgICAuaHRtbChidXR0b25UZXh0KVxuICAgICAgLmNsaWNrKHByZXNzQ2FsbGJhY2spO1xuXG4gIGlmIChvcHRpb25zLmdldCgnc2Vjb25kYXJ5JywgQXJndW1lbnRVdGlscy5pc0Jvb2xlYW4sIHRydWUpKSB7XG4gICAgYnV0dG9uLmFkZENsYXNzKCdzZWNvbmRhcnknKTtcbiAgfVxuXG4gIG9wdGlvbnMuZ2V0KCdjbGFzc2VzJywgQXJndW1lbnRVdGlscy5pc0FycmF5T2ZTdHJpbmdzKCksIFtdKVxuICAgICAgLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgICAgICBidXR0b24uYWRkQ2xhc3MoY2xhc3NOYW1lKTtcbiAgICAgIH0pO1xuXG4gIGJ1dHRvbi5hcHBlbmRUbyh0aGlzLnJvb3REaXZfLmZpbmQoJy5wYW5lbC1jb250cm9scycpKTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge2pRdWVyeX0gdGhlIGJvZHkgRGl2IG9mIHRoZSBwYW5lbCwgZm9yIHBhbmVsIGNvbnRlbnQuXG4gKi9cbk5ldFNpbVBhbmVsLnByb3RvdHlwZS5nZXRCb2R5ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5yb290RGl2Xy5maW5kKCcucGFuZWwtYm9keScpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB0ID0gZnVuY3Rpb24gYW5vbnltb3VzKGxvY2FscywgZmlsdGVycywgZXNjYXBlXG4vKiovKSB7XG5lc2NhcGUgPSBlc2NhcGUgfHwgZnVuY3Rpb24gKGh0bWwpe1xuICByZXR1cm4gU3RyaW5nKGh0bWwpXG4gICAgLnJlcGxhY2UoLyYoPyFcXHcrOykvZywgJyZhbXA7JylcbiAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKVxuICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG59O1xudmFyIGJ1ZiA9IFtdO1xud2l0aCAobG9jYWxzIHx8IHt9KSB7IChmdW5jdGlvbigpeyBcbiBidWYucHVzaCgnPGRpdiBpZD1cIm5ldHNpbS1wYW5lbC0nLCBlc2NhcGUoKDEsICBpbnN0YW5jZUlEICkpLCAnXCJcXG4gICAgIGNsYXNzPVwibmV0c2ltLXBhbmVsICcsIGVzY2FwZSgoMiwgIGNsYXNzTmFtZSApKSwgJ1wiPlxcbiAgPGgxPlxcbiAgICA8ZGl2IGNsYXNzPVwicGFuZWwtY29udHJvbHNcIj48L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cInNpbmdsZS1saW5lLXdpdGgtZWxsaXBzaXMgcGFkLWxlZnQnKTs1OyBpZiAodXNlclRvZ2dsZWFibGUpIHsgOyBidWYucHVzaCgnIG1pbmltaXplcicpOzU7IH0gOyBidWYucHVzaCgnXCI+XFxuICAgICAgJyk7NjsgaWYgKHVzZXJUb2dnbGVhYmxlKSB7IDsgYnVmLnB1c2goJ1xcbiAgICAgICAgPGkgY2xhc3M9XCJmYSBmYS1taW51cy1zcXVhcmVcIj48L2k+XFxuICAgICAgJyk7ODsgfSA7IGJ1Zi5wdXNoKCdcXG4gICAgICA8c3BhbiBjbGFzcz1cInRpdGxlLXRleHRcIj4nLCBlc2NhcGUoKDksICBwYW5lbFRpdGxlICkpLCAnPC9zcGFuPlxcbiAgICA8L2Rpdj5cXG4gIDwvaDE+XFxuICA8ZGl2IGNsYXNzPVwicGFuZWwtYm9keVwiPlxcbiAgPC9kaXY+XFxuPC9kaXY+XFxuJyk7IH0pKCk7XG59IFxucmV0dXJuIGJ1Zi5qb2luKCcnKTtcbn07XG4gIHJldHVybiBmdW5jdGlvbihsb2NhbHMpIHtcbiAgICByZXR1cm4gdChsb2NhbHMsIHJlcXVpcmUoXCJlanNcIikuZmlsdGVycyk7XG4gIH1cbn0oKSk7IiwiLyoqXG4gKiBAb3ZlcnZpZXcgVUkgY29udHJvbGxlciBmb3Igc2V0IG9mIHJhZGlvIGJ1dHRvbnMgdXNlZCB0byBzZWxlY3QgZGlzcGxheSBlbmNvZGluZ3MuXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgbWFya3VwID0gcmVxdWlyZSgnLi9OZXRTaW1FbmNvZGluZ0NvbnRyb2wuaHRtbC5lanMnKTtcbnZhciBFbmNvZGluZ1R5cGUgPSByZXF1aXJlKCcuL05ldFNpbUNvbnN0YW50cycpLkVuY29kaW5nVHlwZTtcblxuLyoqXG4gKiBHZW5lcmF0b3IgYW5kIGNvbnRyb2xsZXIgZm9yIG1lc3NhZ2UgZW5jb2Rpbmcgc2VsZWN0b3I6IEEgZHJvcGRvd24gdGhhdFxuICogY29udHJvbHMgd2hldGhlciBtZXNzYWdlcyBhcmUgZGlzcGxheWVkIGluIHNvbWUgY29tYmluYXRpb24gb2YgYmluYXJ5LCBoZXgsXG4gKiBkZWNpbWFsLCBhc2NpaSwgZXRjLlxuICogQHBhcmFtIHtqUXVlcnl9IHJvb3REaXZcbiAqIEBwYXJhbSB7TmV0U2ltTGV2ZWxDb25maWd1cmF0aW9ufSBsZXZlbENvbmZpZ1xuICogQHBhcmFtIHtmdW5jdGlvbn0gY2hhbmdlRW5jb2RpbmdDYWxsYmFja1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBOZXRTaW1FbmNvZGluZ0NvbnRyb2wgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyb290RGl2LCBsZXZlbENvbmZpZyxcbiAgICBjaGFuZ2VFbmNvZGluZ0NhbGxiYWNrKSB7XG4gIC8qKlxuICAgKiBDb21wb25lbnQgcm9vdCwgd2hpY2ggd2UgZmlsbCB3aGVuZXZlciB3ZSBjYWxsIHJlbmRlcigpXG4gICAqIEB0eXBlIHtqUXVlcnl9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnJvb3REaXZfID0gcm9vdERpdjtcblxuICAvKipcbiAgICogQHR5cGUge05ldFNpbUxldmVsQ29uZmlndXJhdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubGV2ZWxDb25maWdfID0gbGV2ZWxDb25maWc7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuY2hhbmdlRW5jb2RpbmdDYWxsYmFja18gPSBjaGFuZ2VFbmNvZGluZ0NhbGxiYWNrO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7alF1ZXJ5fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5jaGVja2JveGVzXyA9IG51bGw7XG5cbiAgLy8gSW5pdGlhbCByZW5kZXJcbiAgdGhpcy5yZW5kZXIoKTtcbn07XG5cbi8qKlxuICogRmlsbCB0aGUgcm9vdCBkaXYgd2l0aCBuZXcgZWxlbWVudHMgcmVmbGVjdGluZyB0aGUgY3VycmVudCBzdGF0ZVxuICovXG5OZXRTaW1FbmNvZGluZ0NvbnRyb2wucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlbmRlcmVkTWFya3VwID0gJChtYXJrdXAoe1xuICAgIGxldmVsOiB0aGlzLmxldmVsQ29uZmlnX1xuICB9KSk7XG4gIHRoaXMucm9vdERpdl8uaHRtbChyZW5kZXJlZE1hcmt1cCk7XG4gIHRoaXMuY2hlY2tib3hlc18gPSB0aGlzLnJvb3REaXZfLmZpbmQoXG4gICAgICAnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdW25hbWU9XCJlbmNvZGluZ19jaGVja2JveGVzXCJdJyk7XG4gIHRoaXMuY2hlY2tib3hlc18uY2hhbmdlKHRoaXMub25DaGVja2JveGVzQ2hhbmdlXy5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogU2VuZCBuZXcgc2VsZWN0ZWQgZW5jb2RpbmdzIHRvIHJlZ2lzdGVyZWQgY2FsbGJhY2sgb24gY2hhbmdlLlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltRW5jb2RpbmdDb250cm9sLnByb3RvdHlwZS5vbkNoZWNrYm94ZXNDaGFuZ2VfID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZWN0ZWRFbmNvZGluZ3MgPSBbXTtcbiAgdGhpcy5jaGVja2JveGVzXy5maWx0ZXIoJzpjaGVja2VkJykuZWFjaChmdW5jdGlvbiAoaSwgZWxlbWVudCkge1xuICAgIHNlbGVjdGVkRW5jb2RpbmdzLnB1c2goZWxlbWVudC52YWx1ZSk7XG4gIH0pO1xuICB0aGlzLmNoYW5nZUVuY29kaW5nQ2FsbGJhY2tfKHNlbGVjdGVkRW5jb2RpbmdzKTtcbn07XG5cbi8qKlxuICogQ2hhbmdlIHNlbGVjdG9yIHZhbHVlIHRvIHRoZSBuZXcgcHJvdmlkZWQgdmFsdWUuXG4gKiBAcGFyYW0ge0VuY29kaW5nVHlwZVtdfSBuZXdFbmNvZGluZ3NcbiAqL1xuTmV0U2ltRW5jb2RpbmdDb250cm9sLnByb3RvdHlwZS5zZXRFbmNvZGluZ3MgPSBmdW5jdGlvbiAobmV3RW5jb2RpbmdzKSB7XG4gIHRoaXMuY2hlY2tib3hlc18uZWFjaChmdW5jdGlvbiAoaSwgZWxlbWVudCkge1xuICAgICQoZWxlbWVudCkuYXR0cignY2hlY2tlZCcsIChuZXdFbmNvZGluZ3MuaW5kZXhPZihlbGVtZW50LnZhbHVlKSA+IC0xKSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIGpRdWVyeSBzZWxlY3RvciBzdHJpbmcgdGhhdCB3aWxsIGdldCBhbGwgcm93cyB0aGF0XG4gKiBoYXZlIEFOWSBvZiB0aGUgcHJvdmlkZWQgY2xhc3Nlcy5cbiAqIEBwYXJhbSB7RW5jb2RpbmdUeXBlW119IGVuY29kaW5nc1xuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xudmFyIG1ha2VFbmNvZGluZ1Jvd1NlbGVjdG9yID0gZnVuY3Rpb24gKGVuY29kaW5ncykge1xuICByZXR1cm4gZW5jb2RpbmdzLm1hcChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgcmV0dXJuICd0ci4nICsgY2xhc3NOYW1lO1xuICB9KS5qb2luKCcsICcpO1xufTtcblxuLyoqXG4gKiBTdGF0aWMgaGVscGVyLCBzaG93cy9oaWRlcyByb3dzIHVuZGVyIHByb3ZpZGVkIGVsZW1lbnQgYWNjb3JkaW5nIHRvIHRoZSBnaXZlblxuICogZW5jb2Rpbmcgc2V0dGluZy5cbiAqIEBwYXJhbSB7alF1ZXJ5fSByb290RWxlbWVudCAtIHJvb3Qgb2YgZWxlbWVudHMgdG8gc2hvdy9oaWRlXG4gKiBAcGFyYW0ge0VuY29kaW5nVHlwZVtdfSBlbmNvZGluZ3MgLSBhIG1lc3NhZ2UgZW5jb2Rpbmcgc2V0dGluZ1xuICovXG5OZXRTaW1FbmNvZGluZ0NvbnRyb2wuaGlkZVJvd3NCeUVuY29kaW5nID0gZnVuY3Rpb24gKHJvb3RFbGVtZW50LCBlbmNvZGluZ3MpIHtcbiAgdmFyIGhpZGRlbkVuY29kaW5ncyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gRW5jb2RpbmdUeXBlKSB7XG4gICAgaWYgKEVuY29kaW5nVHlwZS5oYXNPd25Qcm9wZXJ0eShrZXkpICYmXG4gICAgICAgIGVuY29kaW5ncy5pbmRleE9mKEVuY29kaW5nVHlwZVtrZXldKSA9PT0gLTEpIHtcbiAgICAgIGhpZGRlbkVuY29kaW5ncy5wdXNoKEVuY29kaW5nVHlwZVtrZXldKTtcbiAgICB9XG4gIH1cbiAgcm9vdEVsZW1lbnQuZmluZChtYWtlRW5jb2RpbmdSb3dTZWxlY3RvcihlbmNvZGluZ3MpKS5zaG93KCk7XG4gIHJvb3RFbGVtZW50LmZpbmQobWFrZUVuY29kaW5nUm93U2VsZWN0b3IoaGlkZGVuRW5jb2RpbmdzKSkuaGlkZSgpO1xufTtcblxuLyoqXG4gKiBTdGF0aWMgaGVscGVyIHRoYXQgY29udmVydHMgYSBnaXZlbiBhcnJheSBvZiBlbmNvZGluZ3MgdG8gYW4gb2JqZWN0XG4gKiBtYXBwaW5nIGVhY2ggZW5jb2RpbmcgdG8gYHRydWVgLiBVc2VkIGZvciBtb3JlIGVmZmljaWVudFxuICogaXNFbmNvZGluZ0VuYWJsZWQgY2hlY2tzXG4gKiBAcGFyYW0ge0VuY29kaW5nVHlwZVtdfSBlbmNvZGluZ3NcbiAqIEByZXR1cm5zIHtPYmplY3QuPEVuY29kaW5nVHlwZSwgYm9vbGVhbj59XG4gKi9cbk5ldFNpbUVuY29kaW5nQ29udHJvbC5lbmNvZGluZ3NBc0hhc2ggPSBmdW5jdGlvbiAoZW5jb2RpbmdzKSB7XG4gIHJldHVybiBlbmNvZGluZ3MucmVkdWNlKGZ1bmN0aW9uIChoYXNoLCBlbmNvZGluZykge1xuICAgIGhhc2hbZW5jb2RpbmddID0gdHJ1ZTtcbiAgICByZXR1cm4gaGFzaDtcbiAgfSwge30pO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB0ID0gZnVuY3Rpb24gYW5vbnltb3VzKGxvY2FscywgZmlsdGVycywgZXNjYXBlXG4vKiovKSB7XG5lc2NhcGUgPSBlc2NhcGUgfHwgZnVuY3Rpb24gKGh0bWwpe1xuICByZXR1cm4gU3RyaW5nKGh0bWwpXG4gICAgLnJlcGxhY2UoLyYoPyFcXHcrOykvZywgJyZhbXA7JylcbiAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKVxuICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG59O1xudmFyIGJ1ZiA9IFtdO1xud2l0aCAobG9jYWxzIHx8IHt9KSB7IChmdW5jdGlvbigpeyBcbiBidWYucHVzaCgnJyk7MTtcbiAgdmFyIEVuY29kaW5nVHlwZSA9IHJlcXVpcmUoJy4vTmV0U2ltQ29uc3RhbnRzJykuRW5jb2RpbmdUeXBlO1xuICB2YXIgaTE4biA9IHJlcXVpcmUoJy4vbG9jYWxlJyk7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RW5jb2RpbmdUeXBlfSBlbmNvZGluZ1R5cGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGVuY29kaW5nTGFiZWxcbiAgICovXG4gIGZ1bmN0aW9uIG1ha2VDaGVja2JveChlbmNvZGluZ1R5cGUsIGVuY29kaW5nTGFiZWwpIHtcbiAgICB2YXIgZGl2Q2xhc3NlcyA9IFsnZW5jb2RpbmdfY2hlY2tib3hlc18nICsgZW5jb2RpbmdUeXBlXTtcbiAgICBpZiAobGV2ZWwuc2hvd0VuY29kaW5nQ29udHJvbHMuaW5kZXhPZihlbmNvZGluZ1R5cGUpID09PSAtMSkge1xuICAgICAgZGl2Q2xhc3Nlcy5wdXNoKCdoaWRkZW4tY29udHJvbCcpO1xuICAgIH1cbiAgICA7IGJ1Zi5wdXNoKCdcXG4gICAgPGRpdiBjbGFzcz1cIicsIGVzY2FwZSgoMTUsICBkaXZDbGFzc2VzLmpvaW4oJyAnKSApKSwgJ1wiPlxcbiAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIlxcbiAgICAgICAgICAgICBuYW1lPVwiZW5jb2RpbmdfY2hlY2tib3hlc1wiXFxuICAgICAgICAgICAgIGlkPVwiZW5jb2RpbmdfY2hlY2tib3hlc18nLCBlc2NhcGUoKDE4LCAgZW5jb2RpbmdUeXBlICkpLCAnXCJcXG4gICAgICAgICAgICAgdmFsdWU9XCInLCBlc2NhcGUoKDE5LCAgZW5jb2RpbmdUeXBlICkpLCAnXCJcXG4gICAgICAgICAgLz5cXG4gICAgICA8bGFiZWwgZm9yPVwiZW5jb2RpbmdfY2hlY2tib3hlc18nLCBlc2NhcGUoKDIxLCAgZW5jb2RpbmdUeXBlICkpLCAnXCI+JywgZXNjYXBlKCgyMSwgIGVuY29kaW5nTGFiZWwgKSksICc8L2xhYmVsPlxcbiAgICA8L2Rpdj5cXG4gICAgJyk7MjM7XG4gIH1cbjsgYnVmLnB1c2goJ1xcbjxkaXYgY2xhc3M9XCJuZXRzaW0tZW5jb2Rpbmctc2VsZWN0b3JcIj5cXG4gIDxoMT4nLCBlc2NhcGUoKDI3LCAgaTE4bi5lbmNvZGluZygpICkpLCAnPC9oMT5cXG4gICcpOzI4OyBtYWtlQ2hlY2tib3goRW5jb2RpbmdUeXBlLkFTQ0lJLCBpMThuLmFzY2lpKCkpOyA7IGJ1Zi5wdXNoKCdcXG4gICcpOzI5OyBtYWtlQ2hlY2tib3goRW5jb2RpbmdUeXBlLkRFQ0lNQUwsIGkxOG4uZGVjaW1hbCgpKTsgOyBidWYucHVzaCgnXFxuICAnKTszMDsgbWFrZUNoZWNrYm94KEVuY29kaW5nVHlwZS5IRVhBREVDSU1BTCwgaTE4bi5oZXhhZGVjaW1hbCgpKTsgOyBidWYucHVzaCgnXFxuICAnKTszMTsgbWFrZUNoZWNrYm94KEVuY29kaW5nVHlwZS5CSU5BUlksIGkxOG4uYmluYXJ5KCkpOyA7IGJ1Zi5wdXNoKCdcXG4gICcpOzMyOyBtYWtlQ2hlY2tib3goRW5jb2RpbmdUeXBlLkFfQU5EX0IsIGkxOG4uYV9hbmRfYigpKTsgOyBidWYucHVzaCgnXFxuPC9kaXY+Jyk7IH0pKCk7XG59IFxucmV0dXJuIGJ1Zi5qb2luKCcnKTtcbn07XG4gIHJldHVybiBmdW5jdGlvbihsb2NhbHMpIHtcbiAgICByZXR1cm4gdChsb2NhbHMsIHJlcXVpcmUoXCJlanNcIikuZmlsdGVycyk7XG4gIH1cbn0oKSk7IiwibW9kdWxlLmV4cG9ydHM9IChmdW5jdGlvbigpIHtcbiAgdmFyIHQgPSBmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzLCBmaWx0ZXJzLCBlc2NhcGVcbi8qKi8pIHtcbmVzY2FwZSA9IGVzY2FwZSB8fCBmdW5jdGlvbiAoaHRtbCl7XG4gIHJldHVybiBTdHJpbmcoaHRtbClcbiAgICAucmVwbGFjZSgvJig/IVxcdys7KS9nLCAnJmFtcDsnKVxuICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXG4gICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbn07XG52YXIgYnVmID0gW107XG53aXRoIChsb2NhbHMgfHwge30pIHsgKGZ1bmN0aW9uKCl7IFxuIGJ1Zi5wdXNoKCcnKTsxO1xuICB2YXIgaTE4biA9IHJlcXVpcmUoJy4vbG9jYWxlJyk7XG4gIHZhciBOZXRTaW1Db25zdGFudHMgPSByZXF1aXJlKCcuL05ldFNpbUNvbnN0YW50cycpO1xuICB2YXIgRGF0YUNvbnZlcnRlcnMgPSByZXF1aXJlKCcuL0RhdGFDb252ZXJ0ZXJzJyk7XG5cbiAgdmFyIGdldEVuY29kaW5nTGFiZWwgPSByZXF1aXJlKCcuL05ldFNpbVV0aWxzJykuZ2V0RW5jb2RpbmdMYWJlbDtcblxuICB2YXIgRW5jb2RpbmdUeXBlID0gTmV0U2ltQ29uc3RhbnRzLkVuY29kaW5nVHlwZTtcbiAgdmFyIFBhY2tldFVJQ29sdW1uVHlwZSA9IE5ldFNpbUNvbnN0YW50cy5QYWNrZXRVSUNvbHVtblR5cGU7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RW5jb2RpbmdUeXBlfSBlbmNvZGluZ1R5cGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGVuY29kZWRDb250ZW50XG4gICAqL1xuICBmdW5jdGlvbiBsb2dSb3coZW5jb2RpbmdUeXBlLCBlbmNvZGVkQ29udGVudCkge1xuICAgIDsgYnVmLnB1c2goJ1xcbiAgICA8dHIgY2xhc3M9XCInLCBlc2NhcGUoKDE3LCAgZW5jb2RpbmdUeXBlICkpLCAnXCI+XFxuICAgICAgPHRoIG5vd3JhcCBjbGFzcz1cIicsIGVzY2FwZSgoMTgsICBQYWNrZXRVSUNvbHVtblR5cGUuRU5DT0RJTkdfTEFCRUwgKSksICdcIj4nLCBlc2NhcGUoKDE4LCAgZ2V0RW5jb2RpbmdMYWJlbChlbmNvZGluZ1R5cGUpICkpLCAnPC90aD5cXG4gICAgICA8dGQgY2xhc3M9XCInLCBlc2NhcGUoKDE5LCAgUGFja2V0VUlDb2x1bW5UeXBlLk1FU1NBR0UgKSksICdcIj4nLCBlc2NhcGUoKDE5LCAgZW5jb2RlZENvbnRlbnQgKSksICc8L3RkPlxcbiAgICA8L3RyPlxcbiAgICAnKTsyMTtcbiAgfVxuOyBidWYucHVzaCgnXFxuPGRpdiBjbGFzcz1cInNjcm9sbC1hcmVhIGJpdC1sb2ctc2Nyb2xsLWFyZWFcIj5cXG4gIDxkaXYgY2xhc3M9XCJwYWNrZXRcIj5cXG4gICAgPHRhYmxlPlxcbiAgICAgIDx0Ym9keT5cXG4gICAgICAgICcpOzI4O1xuICAgICAgICAgIGxvZ1JvdyhFbmNvZGluZ1R5cGUuQVNDSUksIERhdGFDb252ZXJ0ZXJzLmJpbmFyeVRvQXNjaWkoYmluYXJ5LCBjaHVua1NpemUpKTtcblxuICAgICAgICAgIGxvZ1JvdyhFbmNvZGluZ1R5cGUuREVDSU1BTCwgRGF0YUNvbnZlcnRlcnMuYWxpZ25EZWNpbWFsKERhdGFDb252ZXJ0ZXJzLmJpbmFyeVRvRGVjaW1hbChiaW5hcnksIGNodW5rU2l6ZSkpKTtcblxuICAgICAgICAgIGxvZ1JvdyhFbmNvZGluZ1R5cGUuSEVYQURFQ0lNQUwsIERhdGFDb252ZXJ0ZXJzLmZvcm1hdEhleChEYXRhQ29udmVydGVycy5iaW5hcnlUb0hleChiaW5hcnkpLCBjaHVua1NpemUpKTtcblxuICAgICAgICAgIGxvZ1JvdyhFbmNvZGluZ1R5cGUuQklOQVJZLCBEYXRhQ29udmVydGVycy5mb3JtYXRCaW5hcnkoYmluYXJ5LCBjaHVua1NpemUpKTtcblxuICAgICAgICAgIGxvZ1JvdyhFbmNvZGluZ1R5cGUuQV9BTkRfQiwgRGF0YUNvbnZlcnRlcnMuZm9ybWF0QUIoRGF0YUNvbnZlcnRlcnMuYmluYXJ5VG9BQihiaW5hcnkpLCBjaHVua1NpemUpKTtcbiAgICAgICAgOyBidWYucHVzaCgnXFxuICAgICAgPC90Ym9keT5cXG4gICAgPC90YWJsZT5cXG4gIDwvZGl2PlxcbiAgJyk7NDI7IGlmIChzaG93UmVhZFdpcmVCdXR0b24pIHsgOyBidWYucHVzaCgnXFxuICAgIDxkaXYgY2xhc3M9XCJwYW5lbC1mb290ZXIgYml0LWxvZy1wYW5lbC1mb290ZXJcIj5cXG4gICAgICA8ZGl2IGNsYXNzPVwicmlnaHQtc2lkZS1jb250cm9sc1wiPlxcbiAgICAgICAgPHNwYW4gY2xhc3M9XCJuZXRzaW0tYnV0dG9uIGxhcmdlLWJ1dHRvblwiIGlkPVwicmVhZC13aXJlLWJ1dHRvblwiPicsIGVzY2FwZSgoNDUsICBpMThuLnJlYWRXaXJlKCkgKSksICc8L3NwYW4+XFxuICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgJyk7NDg7IH0gOyBidWYucHVzaCgnXFxuPC9kaXY+XFxuJyk7IH0pKCk7XG59IFxucmV0dXJuIGJ1Zi5qb2luKCcnKTtcbn07XG4gIHJldHVybiBmdW5jdGlvbihsb2NhbHMpIHtcbiAgICByZXR1cm4gdChsb2NhbHMsIHJlcXVpcmUoXCJlanNcIikuZmlsdGVycyk7XG4gIH1cbn0oKSk7IiwiLyoqXG4gKiBAb3ZlcnZpZXcgVUkgU2xpZGVyIGNvbnRyb2wgdXNlZCBmb3IgY2hhbmdpbmcgc2ltdWxhdGVkIHJvdXRlciBiYW5kd2lkdGguXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyBVdGlscyByZXF1aXJlZCBvbmx5IGZvciBGdW5jdGlvbi5wcm90b3R5cGUuaW5oZXJpdHMoKVxucmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBOZXRTaW1Db25zdGFudHMgPSByZXF1aXJlKCcuL05ldFNpbUNvbnN0YW50cycpO1xudmFyIE5ldFNpbVV0aWxzID0gcmVxdWlyZSgnLi9OZXRTaW1VdGlscycpO1xudmFyIE5ldFNpbVNsaWRlciA9IHJlcXVpcmUoJy4vTmV0U2ltU2xpZGVyJyk7XG5cbi8qKlxuICogR2VuZXJhdG9yIGFuZCBjb250cm9sbGVyIGZvciBwYWNrZXQgc2l6ZSBzbGlkZXIvc2VsZWN0b3JcbiAqIEBwYXJhbSB7alF1ZXJ5fSByb290RGl2XG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzbGlkZXJDaGFuZ2VDYWxsYmFja1xuICogQHBhcmFtIHtmdW5jdGlvbn0gc2xpZGVyU3RvcENhbGxiYWNrXG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIE5ldFNpbUJhbmR3aWR0aENvbnRyb2wgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyb290RGl2LFxuICAgIHNsaWRlckNoYW5nZUNhbGxiYWNrLCBzbGlkZXJTdG9wQ2FsbGJhY2spIHtcbiAgTmV0U2ltU2xpZGVyLkxvZ2FyaXRobWljU2xpZGVyLmNhbGwodGhpcywgcm9vdERpdiwge1xuICAgIG9uQ2hhbmdlOiBzbGlkZXJDaGFuZ2VDYWxsYmFjayxcbiAgICBvblN0b3A6IHNsaWRlclN0b3BDYWxsYmFjayxcbiAgICB2YWx1ZTogSW5maW5pdHksXG4gICAgbWluOiA0LFxuICAgIG1heDogMTI4ICogTmV0U2ltQ29uc3RhbnRzLkJJVFNfUEVSX0tJTE9CSVQsXG4gICAgdXBwZXJCb3VuZEluZmluaXRlOiB0cnVlXG4gIH0pO1xuXG4gIC8vIEF1dG8tcmVuZGVyLCB1bmxpa2Ugb3VyIGJhc2UgY2xhc3NcbiAgdGhpcy5yZW5kZXIoKTtcbn07XG5OZXRTaW1CYW5kd2lkdGhDb250cm9sLmluaGVyaXRzKE5ldFNpbVNsaWRlci5Mb2dhcml0aG1pY1NsaWRlcik7XG5cbi8qKlxuICogQ29udmVydHMgYSBudW1lcmljIGJhbmR3aWR0aCB2YWx1ZSAoaW4gYml0cykgaW50byBhIGNvbXBhY3QgbG9jYWxpemVkIHN0cmluZ1xuICogcmVwcmVzZW50YXRpb24gb2YgdGhhdCB2YWx1ZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBudW1lcmljIHZhbHVlIG9mIHRoZSBjb250cm9sXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAtIGxvY2FsaXplZCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdmFsdWVcbiAqIEBvdmVycmlkZVxuICovXG5OZXRTaW1CYW5kd2lkdGhDb250cm9sLnByb3RvdHlwZS52YWx1ZVRvTGFiZWwgPSBmdW5jdGlvbiAodmFsKSB7XG4gIHJldHVybiBOZXRTaW1VdGlscy5iaXRyYXRlVG9Mb2NhbGl6ZWRSb3VuZGVkQml0cmF0ZSh2YWwpO1xufTtcbiIsIi8qKlxuICogQG92ZXJ2aWV3IEJhc2UgaW1wbGVtZW50YXRpb24gb2YgTmV0U2ltIFVJIHNsaWRlcnMuXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIG1hcmt1cCA9IHJlcXVpcmUoJy4vTmV0U2ltU2xpZGVyLmh0bWwuZWpzJyk7XG52YXIgaTE4biA9IHJlcXVpcmUoJy4vbG9jYWxlJyk7XG5cbi8qKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdFxuICovXG52YXIgU0xJREVSX0RFRkFVTFRfTUlOX1ZBTFVFID0gMDtcblxuLyoqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0XG4gKi9cbnZhciBTTElERVJfREVGQVVMVF9NQVhfVkFMVUUgPSAxMDA7XG5cbi8qKlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtqUXVlcnl9IHJvb3REaXYgLSBlbGVtZW50IHdob3NlIGNvbnRlbnQgd2UgcmVwbGFjZSB3aXRoIHRoZSBzbGlkZXJcbiAqICAgICAgICBvbiByZW5kZXIoKVxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFtvcHRpb25zLm9uQ2hhbmdlXSAtIGEgZnVuY3Rpb24gaW52b2tlZCB3aGVuZXZlciB0aGVcbiAqICAgICAgICBzbGlkZXItdmFsdWUgaXMgY2hhbmdlZCBieSB0aGUgc3R1ZGVudC4gIFBhc3NlZCB0aGUgbmV3IHZhbHVlIGFzIGFuXG4gKiAgICAgICAgYXJndW1lbnQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbb3B0aW9ucy5vblN0b3BdIC0gYSBmdW5jdGlvbiBpbnZva2VkIG9ubHkgd2hlbiB0aGVcbiAqICAgICAgICBzbGlkZXItaGFuZGxlIGlzIHJlbGVhc2VkIGJ5IHRoZSBzdHVkZW50LiAgUGFzc2VkIHRoZSBuZXcgdmFsdWUgYXMgYW5cbiAqICAgICAgICBhcmd1bWVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy52YWx1ZV0gLSBJbml0aWFsIHZhbHVlIG9mIHRoZSBzbGlkZXIuICBEZWZhdWx0cyB0b1xuICogICAgICAgIHNsaWRlciBtaW5pbXVtIHZhbHVlLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1pbl0gLSBMb3dlc3QgcG9zc2libGUgdmFsdWUgb2YgdGhlIHNsaWRlcjtcbiAqICAgICAgICBuZXh0LXRvLWxvd2VzdCBpZiBsb3dlckJvdW5kSW5maW5pdGUgaXMgdHJ1ZS4gIERlZmF1bHRzIHRvIHplcm8uXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4XSAtIEhpZ2hlc3QgcG9zc2libGUgdmFsdWUgb2YgdGhlIHNsaWRlcjtcbiAqICAgICAgICBuZXh0LXRvLWhpZ2hlc3QgaWYgdXBwZXJCb3VuZEluZmluaXRlIGlzIHRydWUuICBEZWZhdWx0cyB0byAxMDAuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuc3RlcF0gLSBTdGVwLXZhbHVlIG9mIGpRdWVyeVVJIHNsaWRlciAtIG5vdFxuICogICAgICAgIG5lY2Vzc2FyaWx5IHJlbGF0ZWQgdG8gbWluIGFuZCBtYXggdmFsdWVzIGlmIHlvdSBwcm92aWRlIGN1c3RvbSB2YWx1ZVxuICogICAgICAgIGNvbnZlcnRlcnMuIERlZmF1bHRzIHRvIDEuICBJZiBuZWdhdGl2ZSwgdGhlIHNsaWRlciBpcyByZXZlcnNlZCBhbmRcbiAqICAgICAgICBwdXRzIHRoZSBtaW4gdmFsdWUgb24gdGhlIHJpZ2h0LiAgQ2Fubm90IGJlIHplcm8gb3Igbm9uaW50ZWdlci5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudXBwZXJCb3VuZEluZmluaXRlXSAtIGlmIFRSVUUsIHRoZSBoaWdoZXN0IHZhbHVlXG4gKiAgICAgICAgb24gdGhlIHNsaWRlciB3aWxsIGJlIEluZmluaXR5L1VubGltaXRlZC4gIERlZmF1bHQgRkFMU0UuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxvd2VyQm91bmRJbmZpbml0ZV0gLSBpZiBUUlVFLCB0aGUgbG93ZXN0IHZhbHVlXG4gKiAgICAgICAgb24gdGhlIHNsaWRlciB3aWxsIGJlIC1JbmZpbml0eS9VbmxpbWl0ZWQuICBEZWZhdWx0IEZBTFNFLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5pc0Rpc2FibGVkXSAtIGlmIFRSVUUgdGhlIHNsaWRlciB2YWx1ZSBpcyBsb2NrZWRcbiAqICAgICAgICBhbmQgY2Fubm90IGJlIGNoYW5nZWQuXG4gKi9cbnZhciBOZXRTaW1TbGlkZXIgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyb290RGl2LCBvcHRpb25zKSB7XG4gIC8qKlxuICAgKiBVbmlxdWUgaW5zdGFuY2UgSUQgZm9yIHRoaXMgcGFuZWwsIGluIGNhc2Ugd2UgaGF2ZSBzZXZlcmFsXG4gICAqIG9mIHRoZW0gb24gYSBwYWdlLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5pbnN0YW5jZUlEXyA9IE5ldFNpbVNsaWRlci51bmlxdWVJRENvdW50ZXI7XG4gIE5ldFNpbVNsaWRlci51bmlxdWVJRENvdW50ZXIrKztcblxuICAvKipcbiAgICogQHR5cGUge2pRdWVyeX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucm9vdERpdl8gPSByb290RGl2O1xuXG4gIC8qKlxuICAgKiBBIGZ1bmN0aW9uIGludm9rZWQgd2hlbmV2ZXIgdGhlIHNsaWRlci12YWx1ZSBpcyBjaGFuZ2VkIGJ5IHRoZSBzdHVkZW50LlxuICAgKiBQYXNzZWQgdGhlIG5ldyB2YWx1ZSAobm90IHNsaWRlciBwb3NpdGlvbikgYXMgYW4gYXJndW1lbnQuXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuY2hhbmdlQ2FsbGJhY2tfID0gdXRpbHMudmFsdWVPcihvcHRpb25zLm9uQ2hhbmdlLCBmdW5jdGlvbiAoKSB7fSk7XG5cbiAgLyoqXG4gICAqIEEgZnVuY3Rpb24gaW52b2tlZCBvbmx5IHdoZW4gdGhlIHNsaWRlci1oYW5kbGUgaXMgcmVsZWFzZWQgYnkgdGhlIHN0dWRlbnQuXG4gICAqIFBhc3NlZCB0aGUgbmV3IHZhbHVlIChub3Qgc2xpZGVyIHBvc2l0aW9uKSBhcyBhbiBhcmd1bWVudFxuICAgKiBAdHlwZSB7ZnVuY3Rpb259XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnN0b3BDYWxsYmFja18gPSB1dGlscy52YWx1ZU9yKG9wdGlvbnMub25TdG9wLCBmdW5jdGlvbiAoKSB7fSk7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLm1pblZhbHVlXyA9IHV0aWxzLnZhbHVlT3Iob3B0aW9ucy5taW4sIFNMSURFUl9ERUZBVUxUX01JTl9WQUxVRSk7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLm1heFZhbHVlXyA9IHV0aWxzLnZhbHVlT3Iob3B0aW9ucy5tYXgsIFNMSURFUl9ERUZBVUxUX01BWF9WQUxVRSk7XG5cbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IChvdXR3YXJkLWZhY2luZykgdmFsdWUgb2YgdGhlIHNsaWRlci5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMudmFsdWVfID0gdXRpbHMudmFsdWVPcihvcHRpb25zLnZhbHVlLCB0aGlzLm1pblZhbHVlXyk7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHNsaWRlciBtYXhpbXVtIHZhbHVlIHNob3VsZCBiZSBJbmZpbml0eS5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmlzVXBwZXJCb3VuZEluZmluaXRlXyA9IHV0aWxzLnZhbHVlT3Iob3B0aW9ucy51cHBlckJvdW5kSW5maW5pdGUsIGZhbHNlKTtcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgc2xpZGVyIG1pbmltaW11bSB2YWx1ZSBzaG91bGQgYmUgLUluZmluaXR5LlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuaXNMb3dlckJvdW5kSW5maW5pdGVfID0gdXRpbHMudmFsdWVPcihvcHRpb25zLmxvd2VyQm91bmRJbmZpbml0ZSwgZmFsc2UpO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5zdGVwXyA9IHV0aWxzLnZhbHVlT3Iob3B0aW9ucy5zdGVwLCAxKTtcbiAgaWYgKHRoaXMuc3RlcF8gPT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJOZXRTaW1TbGlkZXIgZG9lcyBub3Qgc3VwcG9ydCB6ZXJvIHN0ZXAgdmFsdWVzLlwiKTtcbiAgfSBlbHNlIGlmICh0aGlzLnN0ZXBfICUgMSAhPT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk5ldFNpbVNsaWRlciBkb2VzIG5vdCBzdXBwb3J0IG5vbi1pbnRlZ2VyIHN0ZXAgdmFsdWVzLiBcIiArXG4gICAgICAgIFwiIFVzZSBEZWNpbWFsUHJlY2lzaW9uU2xpZGVyIGluc3RlYWQuXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHNsaWRlciBpcyBkaXNhYmxlZCBhbmQgbm9uaW50ZXJhY3RhYmxlLlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuaXNEaXNhYmxlZF8gPSB1dGlscy52YWx1ZU9yKG9wdGlvbnMuaXNEaXNhYmxlZCwgZmFsc2UpO1xufTtcblxuLyoqXG4gKiBTdGF0aWMgY291bnRlciB1c2VkIHRvIGdlbmVyYXRlL3VuaXF1ZWx5IGlkZW50aWZ5IGRpZmZlcmVudCBpbnN0YW5jZXNcbiAqIG9mIHRoaXMgY29tcG9uZW50IG9uIHRoZSBwYWdlXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5OZXRTaW1TbGlkZXIudW5pcXVlSURDb3VudGVyID0gMDtcblxuLyoqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVFJVRSBpZiB0aGUgc3RlcCB2YWx1ZSBpcyBsZXNzIHRoYW4gemVyby5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVNsaWRlci5wcm90b3R5cGUuaXNTdGVwTmVnYXRpdmVfID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5zdGVwXyA8IDA7XG59O1xuXG4vKipcbiAqIEZpbGwgdGhlIHJvb3QgZGl2IHdpdGggbmV3IGVsZW1lbnRzIHJlZmxlY3RpbmcgdGhlIGN1cnJlbnQgc3RhdGVcbiAqL1xuTmV0U2ltU2xpZGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBtaW5WYWx1ZSA9IHRoaXMuaXNMb3dlckJvdW5kSW5maW5pdGVfID8gLUluZmluaXR5IDogdGhpcy5taW5WYWx1ZV87XG4gIHZhciBtYXhWYWx1ZSA9IHRoaXMuaXNVcHBlckJvdW5kSW5maW5pdGVfID8gSW5maW5pdHkgOiB0aGlzLm1heFZhbHVlXztcbiAgdmFyIG1pblBvc2l0aW9uID0gdGhpcy52YWx1ZVRvU2xpZGVyUG9zaXRpb24oXG4gICAgICB0aGlzLmlzU3RlcE5lZ2F0aXZlXygpID8gbWF4VmFsdWUgOiBtaW5WYWx1ZSk7XG4gIHZhciBtYXhQb3NpdGlvbiA9IHRoaXMudmFsdWVUb1NsaWRlclBvc2l0aW9uKFxuICAgICAgdGhpcy5pc1N0ZXBOZWdhdGl2ZV8oKSA/IG1pblZhbHVlIDogbWF4VmFsdWUpO1xuXG4gIHZhciByZW5kZXJlZE1hcmt1cCA9ICQobWFya3VwKHtcbiAgICBpbnN0YW5jZUlEOiB0aGlzLmluc3RhbmNlSURfLFxuICAgIG1pblZhbHVlOiB0aGlzLnZhbHVlVG9TaG9ydExhYmVsKHRoaXMuaXNTdGVwTmVnYXRpdmVfKCkgPyBtYXhWYWx1ZSA6IG1pblZhbHVlKSxcbiAgICBtYXhWYWx1ZTogdGhpcy52YWx1ZVRvU2hvcnRMYWJlbCh0aGlzLmlzU3RlcE5lZ2F0aXZlXygpID8gbWluVmFsdWUgOiBtYXhWYWx1ZSlcbiAgfSkpO1xuICB0aGlzLnJvb3REaXZfLmh0bWwocmVuZGVyZWRNYXJrdXApO1xuXG4gIHRoaXMucm9vdERpdl8uZmluZCgnLnNsaWRlcicpXG4gICAgICAuc2xpZGVyKHtcbiAgICAgICAgdmFsdWU6IHRoaXMudmFsdWVUb1NsaWRlclBvc2l0aW9uKHRoaXMudmFsdWVfKSxcbiAgICAgICAgbWluOiBtaW5Qb3NpdGlvbixcbiAgICAgICAgbWF4OiBtYXhQb3NpdGlvbixcbiAgICAgICAgc3RlcDogTWF0aC5hYnModGhpcy5zdGVwXyksXG4gICAgICAgIHNsaWRlOiB0aGlzLm9uU2xpZGVyVmFsdWVDaGFuZ2VfLmJpbmQodGhpcyksXG4gICAgICAgIHN0b3A6IHRoaXMub25TbGlkZXJTdG9wXy5iaW5kKHRoaXMpLFxuICAgICAgICBkaXNhYmxlZDogdGhpcy5pc0Rpc2FibGVkX1xuICAgICAgfSk7XG5cbiAgLy8gVXNlIHdpZGVyIGxhYmVscyBpZiB3ZSBoYXZlIGFuIGluZmluaXRlIGJvdW5kXG4gIGlmICh0aGlzLmlzTG93ZXJCb3VuZEluZmluaXRlXyB8fCB0aGlzLmlzVXBwZXJCb3VuZEluZmluaXRlXykge1xuICAgIHRoaXMucm9vdERpdl8uZmluZCgnLnNsaWRlci1sYWJlbHMnKS5hZGRDbGFzcygnd2lkZS1sYWJlbHMnKTtcbiAgfVxuXG4gIHRoaXMuc2V0TGFiZWxGcm9tVmFsdWVfKHRoaXMudmFsdWVfKTtcbn07XG5cbi8qKlxuICogRGlzYWJsZSB0aGlzIHNsaWRlciwgc28gdGhlIHVzZXIgY2FuJ3QgY2hhbmdlIGl0cyB2YWx1ZVxuICovXG5OZXRTaW1TbGlkZXIucHJvdG90eXBlLmRpc2FibGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuaXNEaXNhYmxlZF8gPSB0cnVlO1xuICB0aGlzLnJvb3REaXZfLmZpbmQoJy5zbGlkZXInKS5zbGlkZXIoJ29wdGlvbicsICdkaXNhYmxlZCcsIHRydWUpO1xufTtcblxuLyoqXG4gKiBFbmFibGUgdGhpcyBzbGlkZXIsIHNvIHRoZSB1c2VyIGNhbiBjaGFuZ2UgaXRzIHZhbHVlXG4gKi9cbk5ldFNpbVNsaWRlci5wcm90b3R5cGUuZW5hYmxlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmlzRGlzYWJsZWRfID0gZmFsc2U7XG4gIHRoaXMucm9vdERpdl8uZmluZCgnLnNsaWRlcicpLnNsaWRlcignb3B0aW9uJywgJ2Rpc2FibGVkJywgZmFsc2UpO1xufTtcblxuLyoqXG4gKiBFeHRlcm5hbCBhY2Nlc3MgdG8gc2V0IHRoZSB2YWx1ZSBvZiB0aGUgc2xpZGVyLlxuICogQHBhcmFtIHtudW1iZXJ9IG5ld1ZhbHVlXG4gKi9cbk5ldFNpbVNsaWRlci5wcm90b3R5cGUuc2V0VmFsdWUgPSBmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgaWYgKHRoaXMudmFsdWVfID09PSBuZXdWYWx1ZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMudmFsdWVfID0gbmV3VmFsdWU7XG4gIHRoaXMucm9vdERpdl8uZmluZCgnLnNsaWRlcicpLnNsaWRlcignb3B0aW9uJywgJ3ZhbHVlJyxcbiAgICAgIHRoaXMudmFsdWVUb1NsaWRlclBvc2l0aW9uKG5ld1ZhbHVlKSk7XG4gIHRoaXMuc2V0TGFiZWxGcm9tVmFsdWVfKG5ld1ZhbHVlKTtcbn07XG5cbi8qKiBAcHJpdmF0ZSAqL1xuTmV0U2ltU2xpZGVyLnByb3RvdHlwZS5vblNsaWRlclZhbHVlQ2hhbmdlXyA9IGZ1bmN0aW9uIChldmVudCwgdWkpIHtcbiAgdmFyIG5ld1ZhbHVlID0gdGhpcy5zbGlkZXJQb3NpdGlvblRvVmFsdWUodWkudmFsdWUpO1xuICB0aGlzLnZhbHVlXyA9IG5ld1ZhbHVlO1xuICB0aGlzLnNldExhYmVsRnJvbVZhbHVlXyhuZXdWYWx1ZSk7XG4gIHRoaXMuY2hhbmdlQ2FsbGJhY2tfKG5ld1ZhbHVlKTtcbn07XG5cbi8qKiBAcHJpdmF0ZSAqL1xuTmV0U2ltU2xpZGVyLnByb3RvdHlwZS5vblNsaWRlclN0b3BfID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnN0b3BDYWxsYmFja18odGhpcy52YWx1ZV8pO1xufTtcblxuLyoqXG4gKiBVcGRhdGVzIHRoZSBzbGlkZXIgbGFiZWwgdG8gbG9jYWxpemUgYW5kIGRpc3BsYXkgdGhlIGdpdmVuIHZhbHVlLlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbCAtIHNsaWRlciB2YWx1ZSB0byBkaXNwbGF5XG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1TbGlkZXIucHJvdG90eXBlLnNldExhYmVsRnJvbVZhbHVlXyA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgdGhpcy5yb290RGl2Xy5maW5kKCcuc2xpZGVyLXZhbHVlJykudGV4dCh0aGlzLnZhbHVlVG9MYWJlbCh2YWwpKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgdGhlIGdpdmVuIHZhbHVlIGludG8gYW4gaW50ZXJuYWwgdmFsdWUgd2UgY2FuIHBhc3MgdG8gdGhlXG4gKiBqUXVlcnlVSSBzbGlkZXIgY29udHJvbC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBleHRlcm5hbC1mYWNpbmcgdmFsdWVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IC0gaW50ZXJuYWwgc2xpZGVyIHZhbHVlXG4gKi9cbk5ldFNpbVNsaWRlci5wcm90b3R5cGUudmFsdWVUb1NsaWRlclBvc2l0aW9uID0gZnVuY3Rpb24gKHZhbCkge1xuICBpZiAodGhpcy5pc1VwcGVyQm91bmRJbmZpbml0ZV8gJiYgdmFsID4gdGhpcy5tYXhWYWx1ZV8pIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZVRvU2xpZGVyUG9zaXRpb24odGhpcy5tYXhWYWx1ZV8pICsgdGhpcy5zdGVwXztcbiAgfSBlbHNlIGlmICh0aGlzLmlzTG93ZXJCb3VuZEluZmluaXRlXyAmJiB2YWwgPCB0aGlzLm1pblZhbHVlXykge1xuICAgIHJldHVybiB0aGlzLnZhbHVlVG9TbGlkZXJQb3NpdGlvbih0aGlzLm1pblZhbHVlXykgLSB0aGlzLnN0ZXBfO1xuICB9XG4gIHJldHVybiBNYXRoLm1heCh0aGlzLm1pblZhbHVlXywgTWF0aC5taW4odGhpcy5tYXhWYWx1ZV8sIHZhbCkpICpcbiAgICAgICh0aGlzLmlzU3RlcE5lZ2F0aXZlXygpID8gLTEgOiAxKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgdGhlIGludGVybmFsIGpRdWVyeVVJIHNsaWRlciB2YWx1ZSBpbnRvIGFuIGV4dGVybmFsLWZhY2luZ1xuICogdmFsdWUgZm9yIHRoaXMgY29udHJvbC5cbiAqIFNob3VsZCBiZSBhbiBpbnZlcnNlIG9mIHZhbHVlVG9TbGlkZXJQb3NpdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IHBvcyAtIGludGVybmFsIHNsaWRlciB2YWx1ZVxuICogQHJldHVybnMge251bWJlcn0gLSBleHRlcm5hbC1mYWNpbmcgdmFsdWVcbiAqL1xuTmV0U2ltU2xpZGVyLnByb3RvdHlwZS5zbGlkZXJQb3NpdGlvblRvVmFsdWUgPSBmdW5jdGlvbiAocG9zKSB7XG4gIGlmICh0aGlzLmlzU3RlcE5lZ2F0aXZlXygpKSB7XG4gICAgaWYgKHBvcyA8IHRoaXMudmFsdWVUb1NsaWRlclBvc2l0aW9uKHRoaXMubWF4VmFsdWVfKSkge1xuICAgICAgcmV0dXJuIHRoaXMuaXNVcHBlckJvdW5kSW5maW5pdGVfID8gSW5maW5pdHkgOiB0aGlzLm1heFZhbHVlXztcbiAgICB9IGVsc2UgaWYgKHBvcyA+IHRoaXMudmFsdWVUb1NsaWRlclBvc2l0aW9uKHRoaXMubWluVmFsdWVfKSkge1xuICAgICAgcmV0dXJuIHRoaXMuaXNMb3dlckJvdW5kSW5maW5pdGVfID8gLUluZmluaXR5IDogdGhpcy5taW5WYWx1ZV87XG4gICAgfVxuICAgIHJldHVybiAtcG9zO1xuICB9IGVsc2Uge1xuICAgIGlmIChwb3MgPiB0aGlzLnZhbHVlVG9TbGlkZXJQb3NpdGlvbih0aGlzLm1heFZhbHVlXykpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzVXBwZXJCb3VuZEluZmluaXRlXyA/IEluZmluaXR5IDogdGhpcy5tYXhWYWx1ZV87XG4gICAgfSBlbHNlIGlmIChwb3MgPCB0aGlzLnZhbHVlVG9TbGlkZXJQb3NpdGlvbih0aGlzLm1pblZhbHVlXykpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzTG93ZXJCb3VuZEluZmluaXRlXyA/IC1JbmZpbml0eSA6IHRoaXMubWluVmFsdWVfO1xuICAgIH1cbiAgICByZXR1cm4gcG9zO1xuICB9XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGFuIGV4dGVybmFsLWZhY2luZyBudW1lcmljIHZhbHVlIGludG8gYSBsb2NhbGl6ZWQgc3RyaW5nXG4gKiByZXByZXNlbnRhdGlvbiBvZiB0aGF0IHZhbHVlLlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbCAtIG51bWVyaWMgdmFsdWUgb2YgdGhlIGNvbnRyb2xcbiAqIEByZXR1cm5zIHtzdHJpbmd9IC0gbG9jYWxpemVkIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB2YWx1ZVxuICovXG5OZXRTaW1TbGlkZXIucHJvdG90eXBlLnZhbHVlVG9MYWJlbCA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgaWYgKHZhbCA9PT0gSW5maW5pdHkgfHwgdmFsID09PSAtSW5maW5pdHkpIHtcbiAgICByZXR1cm4gaTE4bi51bmxpbWl0ZWQoKTtcbiAgfVxuICByZXR1cm4gdmFsO1xufTtcblxuLyoqXG4gKiBBbHRlcm5hdGUgbGFiZWwgY29udmVydGVyLCB1c2VkIGZvciBzbGlkZXIgZW5kIGxhYmVscy5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBudW1lcmljIHZhbHVlIG9mIHRoZSBjb250cm9sXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAtIGxvY2FsaXplZCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdmFsdWVcbiAqL1xuTmV0U2ltU2xpZGVyLnByb3RvdHlwZS52YWx1ZVRvU2hvcnRMYWJlbCA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuIHRoaXMudmFsdWVUb0xhYmVsKHZhbCk7XG59O1xuXG4vKipcbiAqIFNpbmNlIGpRdWVyeVVJIHNsaWRlcnMgZG9uJ3Qgc3VwcG9ydCBub25pbnRlZ2VyIHN0ZXAgdmFsdWVzLCB0aGlzIGlzXG4gKiBhIHNpbXBsZSBoZWxwZXIgd3JhcHBlZCBhcm91bmQgTmV0U2ltU2xpZGVyIHRoYXQgYWRkcyBzdXBwb3J0IGZvclxuICogZnJhY3Rpb25hbCBzdGVwIHZhbHVlcyBkb3duIHRvIGEgZ2l2ZW4gcHJlY2lzaW9uLlxuICogQHBhcmFtIHtqUXVlcnl9IHJvb3REaXZcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gdGFrZXMgTmV0U2ltU2xpZGVyIG9wdGlvbnMsIGV4Y2VwdDpcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5zdGVwXSAtIHZhbHVlcyBiZXR3ZWVuIDAgYW5kIDEgYXJlIGFsbG93ZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMucHJlY2lzaW9uXSAtIG51bWJlciBvZiBkZWNpbWFsIHBsYWNlcyBvZiBwcmVjaXNpb25cbiAqICAgICAgICB0aGlzIHNsaWRlciBuZWVkcyAoY2FuIG1hdGNoIHRoZSBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgaW4geW91clxuICogICAgICAgIHN0ZXAgdmFsdWUpLiAgRGVmYXVsdCAyLlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbk5ldFNpbVNsaWRlci5EZWNpbWFsUHJlY2lzaW9uU2xpZGVyID0gZnVuY3Rpb24gKHJvb3REaXYsIG9wdGlvbnMpIHtcbiAgLyoqXG4gICAqIE51bWJlciBvZiBkZWNpbWFsIHBsYWNlcyBvZiBwcmVjaXNpb24gYWRkZWQgdG8gdGhlIGRlZmF1bHQgc2xpZGVyXG4gICAqIGZ1bmN0aW9uYWxpdHkuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnByZWNpc2lvbl8gPSB1dGlscy52YWx1ZU9yKG9wdGlvbnMucHJlY2lzaW9uLCAyKTtcblxuICAvLyBXZSBjb252ZXJ0IHRoZSBnaXZlbiBzdGVwIHZhbHVlIGJ5IHRoZSByZXF1ZXN0ZWQgcHJlY2lzaW9uIGJlZm9yZSBwYXNzaW5nXG4gIC8vIGl0IG9uIHRvIE5ldFNpbVNsaWRlciwgc28gdGhhdCB3ZSBnaXZlIE5ldFNpbVNsaWRlciBhbiBpbnRlZ2VyIHN0ZXAgdmFsdWUuXG4gIG9wdGlvbnMuc3RlcCA9IG9wdGlvbnMuc3RlcCAqIE1hdGgucG93KDEwLCB0aGlzLnByZWNpc2lvbl8pO1xuXG4gIE5ldFNpbVNsaWRlci5jYWxsKHRoaXMsIHJvb3REaXYsIG9wdGlvbnMpO1xufTtcbk5ldFNpbVNsaWRlci5EZWNpbWFsUHJlY2lzaW9uU2xpZGVyLmluaGVyaXRzKE5ldFNpbVNsaWRlcik7XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbCAtIGV4dGVybmFsLWZhY2luZyB2YWx1ZVxuICogQHJldHVybnMge251bWJlcn0gLSBpbnRlcm5hbCBzbGlkZXIgdmFsdWVcbiAqIEBvdmVycmlkZVxuICovXG5OZXRTaW1TbGlkZXIuRGVjaW1hbFByZWNpc2lvblNsaWRlci5wcm90b3R5cGUudmFsdWVUb1NsaWRlclBvc2l0aW9uID0gZnVuY3Rpb24gKHZhbCkge1xuICAvLyBVc2UgY2xhbXBpbmcgZnJvbSBwYXJlbnQgY2xhc3MsIHdoaWNoIHNob3VsZCBiZSBhcHBsaWVkIGJlZm9yZSBvdXIgdHJhbnNmb3JtLlxuICByZXR1cm4gTmV0U2ltU2xpZGVyLnByb3RvdHlwZS52YWx1ZVRvU2xpZGVyUG9zaXRpb24uY2FsbCh0aGlzLCB2YWwpICpcbiAgICAgIE1hdGgucG93KDEwLCB0aGlzLnByZWNpc2lvbl8pO1xufTtcblxuLyoqXG4gKiBTaG91bGQgYmUgYW4gaW52ZXJzZSBvZiB2YWx1ZVRvU2xpZGVyUG9zaXRpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgLSBpbnRlcm5hbCBzbGlkZXIgdmFsdWVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IC0gZXh0ZXJuYWwtZmFjaW5nIHZhbHVlXG4gKiBAb3ZlcnJpZGVcbiAqL1xuTmV0U2ltU2xpZGVyLkRlY2ltYWxQcmVjaXNpb25TbGlkZXIucHJvdG90eXBlLnNsaWRlclBvc2l0aW9uVG9WYWx1ZSA9IGZ1bmN0aW9uIChwb3MpIHtcbiAgLy8gVXNlIGNsYW1waW5nIGZyb20gcGFyZW50IGNsYXNzLCB3aGljaCBzaG91bGQgYmUgYXBwbGllZCBiZWZvcmUgb3VyIHRyYW5zZm9ybS5cbiAgcmV0dXJuIE5ldFNpbVNsaWRlci5wcm90b3R5cGUuc2xpZGVyUG9zaXRpb25Ub1ZhbHVlLmNhbGwodGhpcywgcG9zKSAvXG4gICAgICBNYXRoLnBvdygxMCwgdGhpcy5wcmVjaXNpb25fKTtcbn07XG5cbi8qKlxuICogRGVmYXVsdCBtaW5pbXVtIG9mIHplcm8gaXMgdXNlbGVzcyB0byBhIGxvZ2FyaXRobWljIHNjYWxlXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0XG4gKi9cbnZhciBMT0dBUklUSE1JQ19ERUZBVUxUX01JTl9WQUxVRSA9IDE7XG5cbi8qKlxuICogQnkgZGVmYXVsdCwgYSBsb2dhcml0aG1pYyBzY2FsZSBzbGlkZXIgaW5jcmVhc2VzIGJ5IGEgZmFjdG9yIG9mIDJcbiAqIGV2ZXJ5IHN0ZXAuXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG52YXIgTE9HQVJJVEhNSUNfREVGQVVMVF9CQVNFID0gMjtcblxuLyoqXG4gKiBAcGFyYW0ge2pRdWVyeX0gcm9vdERpdlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSB0YWtlcyBOZXRTaW1TbGlkZXIgb3B0aW9ucywgZXhjZXB0OlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1pbl0gLSBzYW1lIGFzIGJhc2Ugc2xpZGVyLCBidXQgZGVmYXVsdHMgdG8gMS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5sb2dCYXNlXSAtIGZhY3RvciBieSB3aGljaCB0aGUgdmFsdWUgaW5jcmVhc2VzXG4gKiAgICAgICAgd2l0aCBldmVyeSBzbGlkZXIgc3RlcC4gIERlZmF1bHQgYmFzZSAyLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXVnbWVudHMgTmV0U2ltU2xpZGVyXG4gKi9cbk5ldFNpbVNsaWRlci5Mb2dhcml0aG1pY1NsaWRlciA9IGZ1bmN0aW9uIChyb290RGl2LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMubWluID0gdXRpbHMudmFsdWVPcihvcHRpb25zLm1pbiwgTE9HQVJJVEhNSUNfREVGQVVMVF9NSU5fVkFMVUUpO1xuICBOZXRTaW1TbGlkZXIuY2FsbCh0aGlzLCByb290RGl2LCBvcHRpb25zKTtcblxuICAvKipcbiAgICogRmFjdG9yIGJ5IHdoaWNoIHRoZSB2YWx1ZSBpbmNyZWFzZXMgd2l0aCBldmVyeSBzbGlkZXIgc3RlcC5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubG9nQmFzZV8gPSB1dGlscy52YWx1ZU9yKG9wdGlvbnMubG9nQmFzZSwgTE9HQVJJVEhNSUNfREVGQVVMVF9CQVNFKTtcblxuICAvKipcbiAgICogUHJlY2FsY3VsYXRlIG5hdHVyYWwgbG9nIG9mIG91ciBiYXNlIHZhbHVlLCBiZWNhdXNlIHdlJ2xsIHVzZSBpdCBhIGxvdC5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubG5Mb2dCYXNlXyA9IE1hdGgubG9nKHRoaXMubG9nQmFzZV8pO1xuXG4gIHRoaXMuY2FsY3VsYXRlU2xpZGVyQm91bmRzXygpO1xufTtcbk5ldFNpbVNsaWRlci5Mb2dhcml0aG1pY1NsaWRlci5pbmhlcml0cyhOZXRTaW1TbGlkZXIpO1xuXG4vKipcbiAqIEZvciB0aGUgbG9nYXJpdGhtaWMgc2xpZGVyLCBpdCdzIGVhc2llc3QgdG8gY2FsY3VsYXRlIHRoZSBzbGlkZXJcbiAqIGJvdW5kYXJ5IHZhbHVlcyBvbmNlIGFuZCB1c2UgdGhlbSBsYXRlci5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVNsaWRlci5Mb2dhcml0aG1pY1NsaWRlci5wcm90b3R5cGUuY2FsY3VsYXRlU2xpZGVyQm91bmRzXyA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gUGljayBib3VuZGFyeSBzbGlkZXIgdmFsdWVzXG4gIHRoaXMubWF4U2xpZGVyUG9zaXRpb24gPSB0aGlzLmxvZ0Zsb29yXyh0aGlzLm1heFZhbHVlXyk7XG4gIC8vIEFkZCBhIHN0ZXAgaWYgd2UgZG9uJ3QgYWxyZWFkeSBsYW5kIGV4YWN0bHkgb24gYSBzdGVwLCB0b1xuICAvLyBjb21wZW5zYXRlIGZvciB0aGUgZmxvb3IoKSBvcGVyYXRpb25cbiAgaWYgKE1hdGgucG93KHRoaXMubG9nQmFzZV8sIHRoaXMubWF4U2xpZGVyUG9zaXRpb24pICE9PSB0aGlzLm1heFZhbHVlXykge1xuICAgIHRoaXMubWF4U2xpZGVyUG9zaXRpb24gKz0gdGhpcy5zdGVwXztcbiAgfVxuICB0aGlzLm1pblNsaWRlclBvc2l0aW9uID0gdGhpcy5sb2dGbG9vcl8odGhpcy5taW5WYWx1ZV8pO1xuXG4gIC8vIFBpY2sgaW5maW5pdHkgc2xpZGVyIHZhbHVlc1xuICB0aGlzLmluZmluaXR5U2xpZGVyUG9zaXRpb24gPSB0aGlzLm1heFNsaWRlclBvc2l0aW9uICsgdGhpcy5zdGVwXztcbiAgdGhpcy5uZWdJbmZpbml0eVNsaWRlclBvc2l0aW9uID0gdGhpcy5taW5TbGlkZXJQb3NpdGlvbiAtIHRoaXMuc3RlcF87XG59O1xuXG4vKipcbiAqIENoZWF0ZXIgXCJmbG9vcihsb2dfYmFzZV9uKHgpKVwiIG1ldGhvZCB3aXRoIGEgaGFja3kgd29ya2Fyb3VuZCBmb3JcbiAqIGZsb2F0aW5nLXBvaW50IGVycm9ycy4gIFVzZXMgdGhlIGxvZ2FyaXRobWljIGJhc2UgZmFjdG9yIHRoYXQgdGhlIHNsaWRlclxuICogaXMgY29uZmlndXJlZCBmb3IgKHRoaXMubG9nQmFzZV8pLiBHb29kIGVub3VnaCBmb3IgdGhlIHNsaWRlci5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWxcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1TbGlkZXIuTG9nYXJpdGhtaWNTbGlkZXIucHJvdG90eXBlLmxvZ0Zsb29yXyA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgLy8gSmF2YVNjcmlwdCBmbG9hdGluZy1wb2ludCBtYXRoIGNhdXNlcyB0aGlzIGxvZ2FyaXRobSBjYWxjdWxhdGlvbiB0b1xuICAvLyBzb21ldGltZXMgcmV0dXJuIHNsaWdodGx5IGltcHJlY2lzZSB2YWx1ZXMuIEZvciBleGFtcGxlOlxuICAvLyBsb2coMTAwMCkgLyBsb2coMTApID09PSAyLjk5OTk5OTk5OTk5OTk5OTZcbiAgLy8gQWx0aG91Z2ggd2UgdXN1YWxseSB3YW50IHRvIGZsb29yIG5vbmludGVnZXIgdmFsdWVzLCB0aGUgYWJvdmUgY2FsY3VsYXRpb25cbiAgLy8gaXMgc3VwcG9zZWQgdG8gY29tZSBvdXQgYXMgZXhhY3RseSAzLlxuICAvLyBUaGUgZnVkZ2UgZmFjdG9yIGJlbG93IGdpdmVzIGEgdGhyZXNob2xkIGF0IHdoaWNoIHdlIHdpbGwgY2VpbCgpIGEgcmVzdWx0XG4gIC8vIHJhdGhlciB0aGFuIGZsb29yKCkgaXQsIHRvIGFjY291bnQgZm9yIHRoaXMgaW1wcmVjaXNpb24uXG4gIC8vIFRoZSBfcmlnaHRfIHdheSB0byBmaXggdGhpcyBpcyB0byB1c2UgYSBiZXR0ZXIgbnVtYmVyIHR5cGUgbGlrZSBCaWdEZWNpbWFsLFxuICAvLyBidXQgaXQncyBub3QgcmVhbGx5IHdvcnRoIGl0IGZvciB0aGlzIHVzZSBjYXNlLiAgU2l4IGRpZ2l0cyBpcyBtb3JlIHRoYW5cbiAgLy8gZW5vdWdoIHByZWNpc2lvbiBmb3IgdGhlIHNsaWRlciB3aGVuIHdlJ3JlIHRyeWluZyB0byB3b3JrIHdpdGggd2hvbGVcbiAgLy8gbnVtYmVycyBhbnl3YXkuXG4gIHZhciBjZWlsVGhyZXNob2xkID0gMC4wMDAwMDAxO1xuICByZXR1cm4gTWF0aC5mbG9vcihjZWlsVGhyZXNob2xkICsgKE1hdGgubG9nKHZhbCkgLyB0aGlzLmxuTG9nQmFzZV8pKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgdGhlIGdpdmVuIHZhbHVlIGludG8gYW4gaW50ZXJuYWwgdmFsdWUgd2UgY2FuIHBhc3MgdG8gdGhlXG4gKiBqUXVlcnlVSSBzbGlkZXIgY29udHJvbC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBleHRlcm5hbC1mYWNpbmcgdmFsdWVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IC0gaW50ZXJuYWwgc2xpZGVyIHZhbHVlXG4gKiBAb3ZlcnJpZGVcbiAqL1xuTmV0U2ltU2xpZGVyLkxvZ2FyaXRobWljU2xpZGVyLnByb3RvdHlwZS52YWx1ZVRvU2xpZGVyUG9zaXRpb24gPSBmdW5jdGlvbiAodmFsKSB7XG4gIGlmICh2YWwgPiB0aGlzLm1heFZhbHVlXykge1xuICAgIHJldHVybiB0aGlzLmlzVXBwZXJCb3VuZEluZmluaXRlXyA/XG4gICAgICAgIHRoaXMuaW5maW5pdHlTbGlkZXJQb3NpdGlvbiA6IHRoaXMubWF4U2xpZGVyUG9zaXRpb247XG4gIH0gZWxzZSBpZiAodmFsID09PSB0aGlzLm1heFZhbHVlXykge1xuICAgIHJldHVybiAgdGhpcy5tYXhTbGlkZXJQb3NpdGlvbjtcbiAgfSBlbHNlIGlmICh2YWwgPCB0aGlzLm1pblZhbHVlXykge1xuICAgIHJldHVybiB0aGlzLmlzTG93ZXJCb3VuZEluZmluaXRlXyA/XG4gICAgICAgIHRoaXMubmVnSW5maW5pdHlTbGlkZXJQb3NpdGlvbiA6IHRoaXMubWluU2xpZGVyUG9zaXRpb247XG4gIH0gZWxzZSBpZiAodmFsID09PSB0aGlzLm1pblZhbHVlXykge1xuICAgIHJldHVybiB0aGlzLm1pblNsaWRlclBvc2l0aW9uO1xuICB9XG4gIHJldHVybiBNYXRoLm1heCh0aGlzLm1pblNsaWRlclBvc2l0aW9uLCB0aGlzLmxvZ0Zsb29yXyh2YWwpKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgdGhlIGludGVybmFsIGpRdWVyeVVJIHNsaWRlciB2YWx1ZSBpbnRvIGFuIGV4dGVybmFsLWZhY2luZ1xuICogdmFsdWUgZm9yIHRoaXMgY29udHJvbC5cbiAqIFNob3VsZCBiZSBhbiBpbnZlcnNlIG9mIHZhbHVlVG9TbGlkZXJQb3NpdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IHBvcyAtIGludGVybmFsIHNsaWRlciB2YWx1ZVxuICogQHJldHVybnMge251bWJlcn0gLSBleHRlcm5hbC1mYWNpbmcgdmFsdWVcbiAqIEBvdmVycmlkZVxuICovXG5OZXRTaW1TbGlkZXIuTG9nYXJpdGhtaWNTbGlkZXIucHJvdG90eXBlLnNsaWRlclBvc2l0aW9uVG9WYWx1ZSA9IGZ1bmN0aW9uIChwb3MpIHtcbiAgaWYgKHBvcyA+IHRoaXMubWF4U2xpZGVyUG9zaXRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5pc1VwcGVyQm91bmRJbmZpbml0ZV8gPyBJbmZpbml0eSA6IHRoaXMubWF4VmFsdWVfO1xuICB9IGVsc2UgaWYgKHBvcyA9PT0gdGhpcy5tYXhTbGlkZXJQb3NpdGlvbikge1xuICAgIHJldHVybiB0aGlzLm1heFZhbHVlXztcbiAgfSBlbHNlIGlmIChwb3MgPCB0aGlzLm1pblNsaWRlclBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNMb3dlckJvdW5kSW5maW5pdGVfID8gLUluZmluaXR5IDogdGhpcy5taW5WYWx1ZV87XG4gIH0gZWxzZSBpZiAocG9zID09PSB0aGlzLm1pblNsaWRlclBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMubWluVmFsdWVfO1xuICB9XG4gIHJldHVybiBNYXRoLnBvdyh0aGlzLmxvZ0Jhc2VfLCBwb3MpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB0ID0gZnVuY3Rpb24gYW5vbnltb3VzKGxvY2FscywgZmlsdGVycywgZXNjYXBlXG4vKiovKSB7XG5lc2NhcGUgPSBlc2NhcGUgfHwgZnVuY3Rpb24gKGh0bWwpe1xuICByZXR1cm4gU3RyaW5nKGh0bWwpXG4gICAgLnJlcGxhY2UoLyYoPyFcXHcrOykvZywgJyZhbXA7JylcbiAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKVxuICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG59O1xudmFyIGJ1ZiA9IFtdO1xud2l0aCAobG9jYWxzIHx8IHt9KSB7IChmdW5jdGlvbigpeyBcbiBidWYucHVzaCgnPGRpdiBpZD1cIm5ldHNpbV9zbGlkZXJfJywgZXNjYXBlKCgxLCAgaW5zdGFuY2VJRCApKSwgJ1wiIGNsYXNzPVwibmV0c2ltLXNsaWRlclwiPlxcbiAgPGRpdiBjbGFzcz1cInNsaWRlci1pbmxpbmUtd3JhcFwiPlxcbiAgICA8ZGl2IGNsYXNzPVwic2xpZGVyXCI+PC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XCJzbGlkZXItbGFiZWxzXCI+XFxuICAgICAgPGRpdiBjbGFzcz1cIm1heC12YWx1ZVwiPicsIGVzY2FwZSgoNSwgIG1heFZhbHVlICkpLCAnPC9kaXY+XFxuICAgICAgPGRpdiBjbGFzcz1cIm1pbi12YWx1ZVwiPicsIGVzY2FwZSgoNiwgIG1pblZhbHVlICkpLCAnPC9kaXY+XFxuICAgICAgPGRpdiBjbGFzcz1cImN1cnJlbnQtdmFsdWVcIj5cXG4gICAgICAgIDxsYWJlbD48c3BhbiBjbGFzcz1cInNsaWRlci12YWx1ZVwiPjwvc3Bhbj48L2xhYmVsPlxcbiAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gIDwvZGl2PlxcbjwvZGl2PlxcbicpOyB9KSgpO1xufSBcbnJldHVybiBidWYuam9pbignJyk7XG59O1xuICByZXR1cm4gZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgcmV0dXJuIHQobG9jYWxzLCByZXF1aXJlKFwiZWpzXCIpLmZpbHRlcnMpO1xuICB9XG59KCkpOyIsIi8qKlxuICogQG92ZXJ2aWV3IFdyYXBzIE5ldFNpbSBSRVNUIEFQSXMgZm9yIG9wZXJhdGlvbnMgb2YgXCJ0YWJsZXNcIiBhbmQgXCJzaGFyZHMuXCJcbiAqIEBzZWUgbmV0X3NpbV9hcGkucmJcbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIE5ldFNpbUFwaUVycm9yID0gcmVxdWlyZSgnLi9OZXRTaW1BcGlFcnJvcicpO1xuXG4vKipcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAY29uc3RcbiAqL1xudmFyIE5FVFNJTV9BUElfQkFTRV9VUkwgPSAnL3YzL25ldHNpbSc7XG5cbi8qKlxuICogQG5hbWUgTmV0U2ltU2hhcmRBcGlcbiAqL1xudmFyIHNoYXJkQXBpID0ge1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gaW5pdGlhbGl6ZWQgTmV0U2ltIFNoYXJkIEFQSSBpbnN0YW5jZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHNoYXJkSURcbiAgICogQHJldHVybnMge05ldFNpbVNoYXJkQXBpfVxuICAgKi9cbiAgY3JlYXRlOiBmdW5jdGlvbiAoc2hhcmRJRCkge1xuICAgIHJldHVybiAkLmV4dGVuZCh7fSwgc2hhcmRBcGksIHtcblxuICAgICAgLyoqXG4gICAgICAgKiBTaGFyZCBpZGVudGlmaWVyLlxuICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAqL1xuICAgICAgc2hhcmRJRDogc2hhcmRJRCxcblxuICAgICAgLyoqXG4gICAgICAgKiBCZWdpbm5pbmcgcGFydCBvZiBVUkwgZm9yIGFsbCBjYWxscyB0aGF0IGludGVyYWN0IHdpdGggdGhlIHNoYXJkLlxuICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAqL1xuICAgICAgYmFzZVVybDogTkVUU0lNX0FQSV9CQVNFX1VSTCArICcvJyArIHNoYXJkSURcbiAgICB9KTtcbiAgfSxcblxuICBtYWtlVGFibGVBcGk6IGZ1bmN0aW9uICh0YWJsZU5hbWUpIHtcbiAgICByZXR1cm4gdGFibGVBcGkuY3JlYXRlKHRoaXMuc2hhcmRJRCwgdGFibGVOYW1lKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAbmFtZSBOZXRTaW1UYWJsZUFwaVxuICovXG52YXIgdGFibGVBcGkgPSB7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBpbml0aWFsaXplZCBOZXRTaW0gVGFibGUgQVBJIGluc3RhbmNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2hhcmRJRFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVOYW1lXG4gICAqIEByZXR1cm5zIHtOZXRTaW1UYWJsZUFwaX1cbiAgICovXG4gIGNyZWF0ZTogZnVuY3Rpb24gKHNoYXJkSUQsIHRhYmxlTmFtZSkge1xuICAgIHJldHVybiAkLmV4dGVuZCh7fSwgdGFibGVBcGksIHtcblxuICAgICAgLyoqXG4gICAgICAgKiBTaGFyZCBpZGVudGlmaWVyLlxuICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAqL1xuICAgICAgc2hhcmRJRDogc2hhcmRJRCxcblxuICAgICAgLyoqXG4gICAgICAgKiBUYWJsZSBuYW1lLlxuICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAqL1xuICAgICAgdGFibGVOYW1lOiB0YWJsZU5hbWUsXG5cbiAgICAgIC8qKlxuICAgICAgICogQmVnaW5uaW5nIHBhcnQgb2YgVVJMIGZvciBhbGwgY2FsbHMgdGhhdCBpbnRlcmFjdCBvbmx5IHdpdGhcbiAgICAgICAqIHRoaXMgdGFibGUuXG4gICAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAgICovXG4gICAgICBiYXNlVXJsOiBORVRTSU1fQVBJX0JBU0VfVVJMICsgJy8nICsgc2hhcmRJRCArICcvJyArIHRhYmxlTmFtZVxuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IGFsbCByb3dzIGZyb20gdGhlIGdpdmVuIHRhYmxlLlxuICAgKiBAcGFyYW0ge05vZGVTdHlsZUNhbGxiYWNrfSBjYWxsYmFjayAtIEV4cGVjdGVkIHJlc3VsdCBpcyBhbiBhcnJheSBvZlxuICAgKiAgICAgICAgcm93IG9iamVjdHMuXG4gICAqL1xuICBhbGxSb3dzOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICQuYWpheCh7XG4gICAgICB1cmw6IHRoaXMuYmFzZVVybCxcbiAgICAgIHR5cGU6IFwiZ2V0XCIsXG4gICAgICBkYXRhVHlwZTogXCJqc29uXCJcbiAgICB9KS5kb25lKGZ1bmN0aW9uKGRhdGEsIHRleHQpIHtcbiAgICAgIGNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICAgIH0pLmZhaWwoZnVuY3Rpb24ocmVxdWVzdCwgc3RhdHVzLCBlcnJvcikge1xuICAgICAgY2FsbGJhY2sobmV3IE5ldFNpbUFwaUVycm9yKHJlcXVlc3QpLCBudWxsKTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogUmVxdWVzdCBhbGwgcm93cyBpbmNsdWRpbmcgYW5kIGZvbGxvd2luZyB0aGUgZ2l2ZW4gcm93IElEIGZyb20gdGhlIHRhYmxlLlxuICAgKiBAcGFyYW0ge2ludH0gcm93SUQgLSBsb3dlciBib3VuZCBvbiByb3cgSURzIHRvIGZldGNoXG4gICAqIEBwYXJhbSB7Tm9kZVN0eWxlQ2FsbGJhY2t9IGNhbGxiYWNrIC0gRXhwZWN0ZWQgcmVzdWx0IGlzIGFuIGFycmF5IG9mXG4gICAqICAgICAgICB0YWJsZSByb3dzLlxuICAgKi9cbiAgYWxsUm93c0Zyb21JRDogZnVuY3Rpb24ocm93SUQsIGNhbGxiYWNrKSB7XG4gICAgJC5hamF4KHtcbiAgICAgIHVybDogdGhpcy5iYXNlVXJsICsgJ0AnICsgcm93SUQsXG4gICAgICB0eXBlOiBcImdldFwiLFxuICAgICAgZGF0YVR5cGU6IFwianNvblwiXG4gICAgfSkuZG9uZShmdW5jdGlvbihkYXRhLCB0ZXh0KSB7XG4gICAgICBjYWxsYmFjayhudWxsLCBkYXRhKTtcbiAgICB9KS5mYWlsKGZ1bmN0aW9uKHJlcXVlc3QsIHN0YXR1cywgZXJyb3IpIHtcbiAgICAgIGNhbGxiYWNrKG5ldyBOZXRTaW1BcGlFcnJvcihyZXF1ZXN0KSwgbnVsbCk7XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEluc2VydCBhIHJvdyBvciByb3dzIGludG8gdGhlIHRhYmxlLlxuICAgKiBAcGFyYW0ge09iamVjdHxPYmplY3RbXX0gdmFsdWUgLSBkZXNpcmVkIHJvdyBjb250ZW50cywgYXMgZWl0aGVyIGFuXG4gICAqICAgICAgICBPYmplY3QgZm9yIGEgc2luZ2xlIHJvdyBvciBhbiBBcnJheSBvZiBPYmplY3RzIGZvciBtdWx0aXBsZS5cbiAgICogICAgICAgIE11c3QgYmUgSlNPTi5zdHJpbmdpZnktYWJsZS5cbiAgICogQHBhcmFtIHtOb2RlU3R5bGVDYWxsYmFja30gY2FsbGJhY2sgLSBFeHBlY3RlZCByZXN1bHQgaXMgdGhlIGNyZWF0ZWRcbiAgICogICAgICAgIHJvdyBvYmplY3Qgb3Igb2JqZWN0cyAod2hpY2ggd2lsbCBpbmNsdWRlIGFuIGFzc2lnbmVkICdpZCdcbiAgICogICAgICAgIGtleSkuXG4gICAqL1xuICBjcmVhdGVSb3c6IGZ1bmN0aW9uKHZhbHVlLCBjYWxsYmFjaykge1xuICAgIHZhciBkYXRhO1xuXG4gICAgdHJ5IHtcbiAgICAgIGRhdGEgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY2FsbGJhY2soZSwgdW5kZWZpbmVkKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAkLmFqYXgoe1xuICAgICAgdXJsOiB0aGlzLmJhc2VVcmwsXG4gICAgICB0eXBlOiBcInBvc3RcIixcbiAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLThcIixcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KS5kb25lKGZ1bmN0aW9uKGJvZHksIHRleHQpIHtcbiAgICAgIGNhbGxiYWNrKG51bGwsIGJvZHkpO1xuICAgIH0pLmZhaWwoZnVuY3Rpb24ocmVxdWVzdCwgc3RhdHVzLCBlcnJvcikge1xuICAgICAgY2FsbGJhY2sobmV3IE5ldFNpbUFwaUVycm9yKHJlcXVlc3QpLCB1bmRlZmluZWQpO1xuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZW1vdmUgbXVsdGlwbGUgcm93cyBhdCBvbmNlLlxuICAgKiBAcGFyYW0ge251bWJlcltdfSBpZHMgLSBUaGUgcm93IElEcyB0byByZW1vdmUuXG4gICAqIEBwYXJhbSB7Tm9kZVN0eWxlQ2FsbGJhY2t9IGNhbGxiYWNrIC0gRXhwZWN0ZWQgcmVzdWx0IGlzIFRSVUUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2FzeW5jXSBkZWZhdWx0IFRSVUUuXG4gICAqL1xuICBkZWxldGVSb3dzOiBmdW5jdGlvbihpZHMsIGNhbGxiYWNrLCBhc3luYykge1xuICAgIGFzeW5jID0gYXN5bmMgIT09IGZhbHNlOyAvLyBgdW5kZWZpbmVkYCBtYXBzIHRvIHRydWVcblxuICAgIC8vIEdlbmVyYXRlIHF1ZXJ5IHN0cmluZyBpbiB0aGUgZm9ybSBcImlkW109MSZpZFtdPTImLi4uXCJcbiAgICB2YXIgcXVlcnlTdHJpbmcgPSBpZHMubWFwKGZ1bmN0aW9uIChpZCkge1xuICAgICAgcmV0dXJuICdpZFtdPScgKyBpZDtcbiAgICB9KS5qb2luKCcmJyk7XG5cbiAgICAkLmFqYXgoe1xuICAgICAgdXJsOiB0aGlzLmJhc2VVcmwgKyAnPycgKyBxdWVyeVN0cmluZyxcbiAgICAgIHR5cGU6ICdkZWxldGUnLFxuICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgIGFzeW5jOiBhc3luY1xuICAgIH0pLmRvbmUoZnVuY3Rpb24oZGF0YSwgdGV4dCkge1xuICAgICAgY2FsbGJhY2sobnVsbCwgdHJ1ZSk7XG4gICAgfSkuZmFpbChmdW5jdGlvbihyZXF1ZXN0LCBzdGF0dXMsIGVycm9yKSB7XG4gICAgICBjYWxsYmFjayhuZXcgTmV0U2ltQXBpRXJyb3IocmVxdWVzdCksIGZhbHNlKTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0cmlldmUgYSByb3cuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpZCAtIFRoZSByb3cgaWRlbnRpZmllci5cbiAgICogQHBhcmFtIHtOb2RlU3R5bGVDYWxsYmFja30gY2FsbGJhY2sgLSBFeHBlY3RlZCByZXN1bHQgaXMgdGhlIHJlcXVlc3RlZFxuICAgKiAgICAgICAgcm93IG9iamVjdC5cbiAgICovXG4gIGZldGNoUm93OiBmdW5jdGlvbihpZCwgY2FsbGJhY2spIHtcbiAgICAkLmFqYXgoe1xuICAgICAgdXJsOiB0aGlzLmJhc2VVcmwgKyBcIi9cIiArIGlkLFxuICAgICAgdHlwZTogXCJnZXRcIixcbiAgICAgIGRhdGFUeXBlOiBcImpzb25cIlxuICAgIH0pLmRvbmUoZnVuY3Rpb24oZGF0YSwgdGV4dCkge1xuICAgICAgY2FsbGJhY2sobnVsbCwgZGF0YSk7XG4gICAgfSkuZmFpbChmdW5jdGlvbihyZXF1ZXN0LCBzdGF0dXMsIGVycm9yKSB7XG4gICAgICBjYWxsYmFjayhuZXcgTmV0U2ltQXBpRXJyb3IocmVxdWVzdCksIHVuZGVmaW5lZCk7XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENoYW5nZSB0aGUgY29udGVudHMgb2YgYSByb3cuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpZCAtIFRoZSByb3cgaWRlbnRpZmllci5cbiAgICogQHBhcmFtIHtPYmplY3R9IHZhbHVlIC0gVGhlIG5ldyByb3cgY29udGVudHMuXG4gICAqIEBwYXJhbSB7Tm9kZVN0eWxlQ2FsbGJhY2t9IGNhbGxiYWNrIC0gRXhwZWN0ZWQgcmVzdWx0IGlzIHRoZSBuZXcgcm93IG9iamVjdC5cbiAgICovXG4gIHVwZGF0ZVJvdzogZnVuY3Rpb24oaWQsIHZhbHVlLCBjYWxsYmFjaykge1xuICAgICQuYWpheCh7XG4gICAgICB1cmw6IHRoaXMuYmFzZVVybCArIFwiL1wiICsgaWQsXG4gICAgICB0eXBlOiBcInBvc3RcIixcbiAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLThcIixcbiAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHZhbHVlKVxuICAgIH0pLmRvbmUoZnVuY3Rpb24oZGF0YSwgdGV4dCkge1xuICAgICAgY2FsbGJhY2sobnVsbCwgZGF0YSk7XG4gICAgfSkuZmFpbChmdW5jdGlvbihyZXF1ZXN0LCBzdGF0dXMsIGVycm9yKSB7XG4gICAgICBjYWxsYmFjayhuZXcgTmV0U2ltQXBpRXJyb3IocmVxdWVzdCksIGZhbHNlKTtcbiAgICB9KTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBOZXRTaW0gU2hhcmQgQVBJIGluc3RhbmNlIGZvciB0aGUgZ2l2ZW4gc2hhcmQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzaGFyZElEXG4gICAqIEByZXR1cm5zIHtOZXRTaW1TaGFyZEFwaX1cbiAgICovXG4gIG1ha2VTaGFyZEFwaTogZnVuY3Rpb24gKHNoYXJkSUQpIHtcbiAgICByZXR1cm4gc2hhcmRBcGkuY3JlYXRlKHNoYXJkSUQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBOZXRTaW0gVGFibGUgQVBJIGluc3RhbmNlIGZvciB0aGUgZ2l2ZW4gc2hhcmQgYW5kIHRhYmxlIG5hbWUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzaGFyZElEXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZU5hbWVcbiAgICogQHJldHVybnMge05ldFNpbVRhYmxlQXBpfVxuICAgKi9cbiAgbWFrZVRhYmxlQXBpOiBmdW5jdGlvbiAoc2hhcmRJRCwgdGFibGVOYW1lKSB7XG4gICAgcmV0dXJuIHRhYmxlQXBpLmNyZWF0ZShzaGFyZElELCB0YWJsZU5hbWUpO1xuICB9XG59O1xuIiwiLyoqXG4gKiBAb3ZlcnZpZXcgRXh0ZW5kZWQgZXJyb3IgdHlwZSByZXR1cm5lZCBmb3IgZmFpbGVkIGludGVyYWN0aW9ucyB3aXRoIE5ldFNpbVxuICogc2VydmVyIEFQSSAobmV0X3NpbV9hcGkucmIpIHRoYXQgZXh0cmFjdHMgYW5kIGV4cG9zZXMgYWRkaXRpb25hbCBlcnJvciBpbmZvLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnLi4vdXRpbHMnKTsgLy8gcHJvdmlkZSBGdW5jdGlvbi5wcm90b3R5cGUuaW5oZXJpdHNcblxuLyoqXG4gKiBTcGVjaWFsIGVycm9yIHR5cGUgZm9yIGZhaWxlZCBzZXJ2ZXIgcmVxdWVzdHMsIHdoaWNoIHRyaWVzIHRvIGV4dHJhY3RcbiAqIGFkZGl0aW9uYWwgZXJyb3IgaW5mb3JtYXRpb24gZnJvbSB0aGUgc2VydmVyJ3MgcmVzcG9uc2UuXG4gKiBAcGFyYW0ge2pxWEhSfSByZXF1ZXN0XG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIEVycm9yXG4gKi9cbnZhciBOZXRTaW1BcGlFcnJvciA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gIHRoaXMubmFtZSA9ICdOZXRTaW1BcGlFcnJvcic7XG5cbiAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gIHRoaXMubWVzc2FnZSA9ICdSZXF1ZXN0IGZhaWxlZCc7XG5cbiAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gIHRoaXMuc3RhY2sgPSAobmV3IEVycm9yKCkpLnN0YWNrO1xuXG4gIC8qKlxuICAgKiBBZGRpdGlvbmFsIGVycm9yIGluZm9ybWF0aW9uIHJldHVybmVkIGJ5IHRoZSBzZXJ2ZXIsIHdoaWNoIGNhbiBkcml2ZVxuICAgKiBzcGVjaWZpYyByZXNwb25zZXMgYnkgdGhlIGNsaWVudC5cbiAgICogQHR5cGUge3N0cmluZ3xBcnJheX1cbiAgICovXG4gIHRoaXMuZGV0YWlscyA9IHVuZGVmaW5lZDtcblxuICAvLyBBdHRlbXB0IHRvIGV4dHJhY3QgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBmcm9tIHRoZSByZXF1ZXN0IG9iamVjdFxuICBpZiAocmVxdWVzdCkge1xuICAgIHRoaXMubWVzc2FnZSA9ICdzdGF0dXM6ICcgKyByZXF1ZXN0LnN0YXR1cyArICc7IGVycm9yOiAnICsgcmVxdWVzdC5zdGF0dXNUZXh0O1xuICAgIHRyeSB7XG4gICAgICB2YXIgcmVzcG9uc2UgPSBKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2VUZXh0KTtcbiAgICAgIGlmIChyZXNwb25zZS5kZXRhaWxzKSB7XG4gICAgICAgIHRoaXMuZGV0YWlscyA9IHJlc3BvbnNlLmRldGFpbHM7XG4gICAgICAgIHRoaXMubWVzc2FnZSArPSAnOyBkZXRhaWxzOiAnICsgSlNPTi5zdHJpbmdpZnkodGhpcy5kZXRhaWxzKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLmRldGFpbHMgPSBudWxsO1xuICAgIH1cbiAgfVxufTtcbk5ldFNpbUFwaUVycm9yLmluaGVyaXRzKEVycm9yKTtcblxuLyoqXG4gKiBXYXlzIHRoYXQgYSByb3cgaW5zZXJ0IG9wZXJhdGlvbiBjYW4gZmFpbCB2aWEgTmV0U2ltQXBpLlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuTmV0U2ltQXBpRXJyb3IuVmFsaWRhdGlvbkVycm9yID0ge1xuICBNQUxGT1JNRUQ6ICdtYWxmb3JtZWQnLFxuICBDT05GTElDVDogJ2NvbmZsaWN0JyxcbiAgTElNSVRfUkVBQ0hFRDogJ2xpbWl0X3JlYWNoZWQnXG59O1xuIiwiLyoqXG4gKiBAb3ZlcnZpZXcgQ29udHJvbGxlciBmb3IgY3JlYXRpbmcgZ3Jvd2wtc3R5bGUgQm9vdHN0cmFwIGFsZXJ0c1xuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbi8qIGdsb2JhbCBzZXRUaW1lb3V0ICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBtYXJrdXAgPSByZXF1aXJlKCcuL05ldFNpbUFsZXJ0Lmh0bWwuZWpzJyk7XG52YXIgQXJndW1lbnRVdGlscyA9IHJlcXVpcmUoJy4vQXJndW1lbnRVdGlscycpO1xudmFyIE5ldFNpbUxvZ2dlciA9IHJlcXVpcmUoJy4vTmV0U2ltTG9nZ2VyJyk7XG5cbnZhciBsb2dnZXIgPSBOZXRTaW1Mb2dnZXIuZ2V0U2luZ2xldG9uKCk7XG5cbnZhciBOZXRTaW1BbGVydCA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYWxlcnQgY29udGFpbmVyLCBvciBjcmVhdGVzIGFuZCBpbnNlcnRzIG9uZSBpZiBpdCBkb2VzXG4gKiBub3QgZXhpc3QuIEFsc28gYXR0YWNoZXMgYSBjbG9zZSBoYW5kbGVyIHNvIHRoZSBjb250YWluZXIgd2lsbFxuICogcmVtb3ZlIGl0c2VsZiB3aGVuIGl0IGVtcHRpZXNcbiAqIEBwcml2YXRlXG4gKiBAcmV0dXJuIHtqUXVlcnl9XG4gKi9cbk5ldFNpbUFsZXJ0LmdldE9yQ3JlYXRlQWxlcnRDb250YWluZXJfID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYWxlcnRDb250YWluZXIgPSAkKCcubmV0c2ltLWFsZXJ0LWNvbnRhaW5lcicpO1xuXG4gIGlmIChhbGVydENvbnRhaW5lci5sZW5ndGggPT09IDApIHtcbiAgICBhbGVydENvbnRhaW5lciA9ICQoJzxkaXY+JykuYWRkQ2xhc3MoXCJuZXRzaW0tYWxlcnQtY29udGFpbmVyXCIpO1xuICAgICQoJyNuZXRzaW0nKS5hcHBlbmQoYWxlcnRDb250YWluZXIpO1xuXG4gICAgYWxlcnRDb250YWluZXIub24oJ2Nsb3NlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCQodGhpcykuY2hpbGRyZW4oKS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgJCh0aGlzKS5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBhbGVydENvbnRhaW5lcjtcbn07XG5cbi8qKlxuICogU2ltcGxlIGNoZWNrIHRvIHNlZSBpZiBCb290c3RyYXAncyBBbGVydCBmdW5jdGlvbiBpcyBhdHRhY2hlZCB0byB0aGVcbiAqIGdsb2JhbCBqUXVlcnkgb2JqZWN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gd2hldGhlciBvciBub3QgYm9vdHN0cmFwJ3MgYGFsZXJ0YCBmdW5jdGlvbiBpc1xuICogICAgICAgICAgICAgICAgICAgbG9hZGVkIGFuZCBhdmFpbGFibGVcbiAqL1xuTmV0U2ltQWxlcnQuaXNCb290c3RyYXBBbGVydExvYWRlZF8gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAodHlwZW9mICQoKS5hbGVydCA9PT0gJ2Z1bmN0aW9uJyk7XG59O1xuXG4vKipcbiAqIFByaW1hcnkgYWxlcnQgY3JlYXRpb24gbWV0aG9kLiBFeHBlY3RzIGEgYm9keSBvZiBjb250ZW50IGZvciB0aGVcbiAqIGFsZXJ0IGFuZCBhIGZsYXZvciBmb3IgdGhlIGFsZXJ0IHR5cGUuIENhbiBvcHRpb25hbGx5IGluY2x1ZGUgYSB0aXRsZVxuICogYW5kIGEgdGltZW91dCB0aW1lLlxuICpcbiAqIEBwYXJhbSB7Ym9keX0gc3RyaW5nXG4gKiBAcGFyYW0ge2ZsYXZvcn0gc3RyaW5nXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMudGl0bGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBvcHRpb25zLnRpbWVvdXQgVGltZW91dCBpbiBtcy4gZGVmYXVsdHMgdG8gNTAwMC5cbiAqIEByZXR1cm4ge2pRdWVyeX0gdGhlIGNyZWF0ZWQgYWxlcnQgZWxlbWVudFxuICovXG5OZXRTaW1BbGVydC5jcmVhdGVfID0gZnVuY3Rpb24gKGJvZHksIGZsYXZvciwgb3B0aW9ucykge1xuXG4gIGlmICghTmV0U2ltQWxlcnQuaXNCb290c3RyYXBBbGVydExvYWRlZF8oKSkge1xuICAgIGxvZ2dlci53YXJuKFwiQm9vdHN0cmFwIEFsZXJ0IG5vdCBsb2FkZWQ7IE5ldFNpbUFsZXJ0IHJlZnVzaW5nIHRvIGNyZWF0ZSBhbGVydFwiKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBBcmd1bWVudFV0aWxzLnZhbGlkYXRlUmVxdWlyZWQoYm9keSwgJ2JvZHknLCBBcmd1bWVudFV0aWxzLmlzU3RyaW5nKTtcbiAgQXJndW1lbnRVdGlscy52YWxpZGF0ZVJlcXVpcmVkKGZsYXZvciwgJ2ZsYXZvcicsIEFyZ3VtZW50VXRpbHMuaXNTdHJpbmcpO1xuICBvcHRpb25zID0gQXJndW1lbnRVdGlscy5leHRlbmRPcHRpb25zT2JqZWN0KG9wdGlvbnMpO1xuXG4gIHZhciAkY29udGFpbmVyID0gTmV0U2ltQWxlcnQuZ2V0T3JDcmVhdGVBbGVydENvbnRhaW5lcl8oKTtcblxuICB2YXIgYm9vdHN0cmFwQWxlcnQgPSAkKG1hcmt1cCh7XG4gICAgZmxhdm9yOiBmbGF2b3IsXG4gICAgYm9keTogYm9keSxcbiAgICB0aXRsZTogb3B0aW9ucy5nZXQoJ3RpdGxlJywgQXJndW1lbnRVdGlscy5pc1N0cmluZylcbiAgfSkpO1xuXG4gICRjb250YWluZXIuYXBwZW5kKGJvb3RzdHJhcEFsZXJ0KTtcbiAgYm9vdHN0cmFwQWxlcnQuYWxlcnQoKTtcblxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBib290c3RyYXBBbGVydC5hbGVydCgnY2xvc2UnKTtcbiAgfSwgb3B0aW9ucy5nZXQoJ3RpbWVvdXQnLCBBcmd1bWVudFV0aWxzLmlzUG9zaXRpdmVOb25pbmZpbml0ZU51bWJlciwgNTAwMCkpO1xuXG4gIHJldHVybiBib290c3RyYXBBbGVydDtcbn07XG5cbi8qKiBXcmFwcGVyIG1ldGhvZCB0byBjYWxsIGNyZWF0ZSB3aXRoIGFuIFwiYWxlcnQtd2FyblwiIGZsYXZvciAqL1xuTmV0U2ltQWxlcnQud2FybiA9IGZ1bmN0aW9uIChib2R5LCBvcHRpb25zKSB7XG4gIHJldHVybiBOZXRTaW1BbGVydC5jcmVhdGVfKGJvZHksIFwiYWxlcnQtd2FyblwiLCBvcHRpb25zKTtcbn07XG5cbi8qKiBXcmFwcGVyIG1ldGhvZCB0byBjYWxsIGNyZWF0ZSB3aXRoIGFuIFwiYWxlcnQtaW5mb1wiIGZsYXZvciAqL1xuTmV0U2ltQWxlcnQuaW5mbyA9IGZ1bmN0aW9uIChib2R5LCBvcHRpb25zKSB7XG4gIHJldHVybiBOZXRTaW1BbGVydC5jcmVhdGVfKGJvZHksIFwiYWxlcnQtaW5mb1wiLCBvcHRpb25zKTtcbn07XG5cbi8qKiBXcmFwcGVyIG1ldGhvZCB0byBjYWxsIGNyZWF0ZSB3aXRoIGFuIFwiYWxlcnQtZXJyb3JcIiBmbGF2b3IgKi9cbk5ldFNpbUFsZXJ0LmVycm9yID0gZnVuY3Rpb24gKGJvZHksIG9wdGlvbnMpIHtcbiAgcmV0dXJuIE5ldFNpbUFsZXJ0LmNyZWF0ZV8oYm9keSwgXCJhbGVydC1lcnJvclwiLCBvcHRpb25zKTtcbn07XG5cbi8qKiBXcmFwcGVyIG1ldGhvZCB0byBjYWxsIGNyZWF0ZSB3aXRoIGFuIFwiYWxlcnQtc3VjY2Vzc1wiIGZsYXZvciAqL1xuTmV0U2ltQWxlcnQuc3VjY2VzcyA9IGZ1bmN0aW9uIChib2R5LCBvcHRpb25zKSB7XG4gIHJldHVybiBOZXRTaW1BbGVydC5jcmVhdGVfKGJvZHksIFwiYWxlcnQtc3VjY2Vzc1wiLCBvcHRpb25zKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cz0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdCA9IGZ1bmN0aW9uIGFub255bW91cyhsb2NhbHMsIGZpbHRlcnMsIGVzY2FwZVxuLyoqLykge1xuZXNjYXBlID0gZXNjYXBlIHx8IGZ1bmN0aW9uIChodG1sKXtcbiAgcmV0dXJuIFN0cmluZyhodG1sKVxuICAgIC5yZXBsYWNlKC8mKD8hXFx3KzspL2csICcmYW1wOycpXG4gICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xufTtcbnZhciBidWYgPSBbXTtcbndpdGggKGxvY2FscyB8fCB7fSkgeyAoZnVuY3Rpb24oKXsgXG4gYnVmLnB1c2goJycpOzE7XG4gIC8qKlxuICAgKiBAbmFtZSBib2R5XG4gICAqIEB0eXBlIHshc3RyaW5nfVxuICAgKi9cblxuICAvKipcbiAgICogQG5hbWUgZmxhdm9yXG4gICAqIEB0eXBlIHshc3RyaW5nfVxuICAgKi9cblxuICAvKipcbiAgICogQG5hbWUgdGl0bGVcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG47IGJ1Zi5wdXNoKCdcXG48ZGl2IGNsYXNzPVwiYWxlcnQgbmV0c2ltLWFsZXJ0ICcsIGVzY2FwZSgoMTcsICBmbGF2b3IgKSksICcgZmFkZSBpblwiPlxcbiAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJuZXRzaW0tYWxlcnQtYnV0dG9uIGNsb3NlXCIgZGF0YS1kaXNtaXNzPVwiYWxlcnRcIiBhcmlhLWxhYmVsPVwiQ2xvc2VcIj48c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIj4mdGltZXM7PC9zcGFuPjwvYnV0dG9uPlxcbiAgJyk7MTk7IGlmICh0aXRsZSkgeyA7IGJ1Zi5wdXNoKCc8c3Ryb25nPicsIGVzY2FwZSgoMTksICB0aXRsZSApKSwgJzwvc3Ryb25nPicpOzE5OyB9IDsgYnVmLnB1c2goJ1xcbiAgJywgZXNjYXBlKCgyMCwgIGJvZHkgKSksICdcXG48L2Rpdj5cXG4nKTsgfSkoKTtcbn0gXG5yZXR1cm4gYnVmLmpvaW4oJycpO1xufTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGxvY2Fscykge1xuICAgIHJldHVybiB0KGxvY2FscywgcmVxdWlyZShcImVqc1wiKS5maWx0ZXJzKTtcbiAgfVxufSgpKTsiLCIvKipcbiAqIEBvdmVydmlldyBQcm92aWRlcyB1dGlsaXR5IG1ldGhvZHMgZm9yIGNvbnZlcnRpbmcgdXNlciBkYXRhIGJldHdlZW5cbiAqICAgICAgICAgICBkaWZmZXJlbnQgZW5jb2RpbmdzLCBhbmQgZm9ybWF0dGluZyB0aG9zZSBlbmNvZGluZ3M6IGJpbmFyeSxcbiAqICAgICAgICAgICBoZXgsIGRlY2ltYWwsIEFTQ0lJLiAgXCJBIGFuZCBCXCIgaXMgYSBzcGVjaWFsIGVuY29kaW5nIHRoYXQgaXNcbiAqICAgICAgICAgICBqdXN0IGJpbmFyeSB3aXRoIFwiQVwiIHN1YidkIGZvciAwIGFuZCBcIkJcIiBzdWInZCBmb3IgMS5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG4vKiBnbG9iYWwgd2luZG93LCByZXF1aXJlLCBleHBvcnRzICovXG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7IC8vIEZvciBTdHJpbmcucHJvdG90eXBlLnJlcGVhdCBwb2x5ZmlsbFxudmFyIE5ldFNpbVV0aWxzID0gcmVxdWlyZSgnLi9OZXRTaW1VdGlscycpO1xuXG4vLyB3aW5kb3cue2J0b2EsIGF0b2J9IHBvbHlmaWxsc1xuaWYgKCEod2luZG93LmF0b2IgJiYgd2luZG93LmJ0b2EpKSB7XG4gIHZhciBiYXNlNjQgPSByZXF1aXJlKCdCYXNlNjQnKTtcbiAgd2luZG93LmJ0b2EgPSB3aW5kb3cuYnRvYSB8fCBiYXNlNjQuYnRvYTtcbiAgd2luZG93LmF0b2IgPSB3aW5kb3cuYXRvYiB8fCBiYXNlNjQuYXRvYjtcbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7c3RyaW5nfSBBZGRyZXNzSGVhZGVyRm9ybWF0XG4gKiBBIHN0cmluZyBpbmRpY2F0aW5nIHRoZSBwYXJ0cyBvZiBhbiBhZGRyZXNzIGZpZWxkIGluIHRoZSBwYWNrZXQgaGVhZGVyLFxuICogdGhlaXIgcmVzcGVjdGl2ZSBieXRlLXdpZHRocywgYW5kIHRoZSBzZXBhcmF0b3JzIHRvIGJlIHVzZWQgd2hlbiBjb252ZXJ0aW5nXG4gKiBiaW5hcnkgdG8gYSByZWFkYWJsZSBmb3JtYXQuXG4gKiBFeGFtcGxlczpcbiAqIFwiNFwiIGluZGljYXRlcyBhIHNpbmdsZSA0LWJ5dGUgbnVtYmVyLCBlLmcuIDUgLyAwMTAxXG4gKiBcIjguNFwiIGluZGljYXRlcyBhbiA4LWJ5dGUgbnVtYmVyIGZvbGxvd2VkIGJ5IGEgNC1ieXRlIG51bWJlciwgc2VwYXJhdGVkXG4gKiAgIGJ5IGEgcGVyaW9kLCBlLmcuIDEuMSAvIDAwMDAwMDAxMDAwMSBvciAxOC45IC8gMDAwMTAwMTAgMTAwMVxuICogXCI4LjguOC44XCIgd291bGQgYmUgYW4gSVB2NCBhZGRyZXNzLCBlLmcuXG4gKiAgIDEyNy4wLjAuMSAvIDAxMTExMTExIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAxXG4gKi9cblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBBcyBhbmQgQnMgc3RyaW5nIGludG8gaXRzIG1vc3QgY29tcGFjdCByZXByZXNlbnRhdGlvbiwgZm9yY2VkXG4gKiB0byB1cHBlcmNhc2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gYWJTdHJpbmdcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydHMubWluaWZ5QUIgPSBmdW5jdGlvbiAoYWJTdHJpbmcpIHtcbiAgcmV0dXJuIGFiU3RyaW5nLnJlcGxhY2UoL1teQUJdL2dpLCAnJykudG9VcHBlckNhc2UoKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYW4gQUItYmluYXJ5IHN0cmluZyB0byBhIGZvcm1hdHRlZCByZXByZXNlbnRhdGlvbiwgd2l0aCBjaHVua3NcbiAqIG9mIGEgc2V0IHNpemUgc2VwYXJhdGVkIGJ5IGEgc3BhY2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gYWJTdHJpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSBjaHVua1NpemVcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0XSBiaXQtb2Zmc2V0IGZvciBmb3JtYXR0aW5nIGVmZmVjdDsgZGVmYXVsdCAwLlxuICogQHJldHVybnMge3N0cmluZ30gZm9ybWF0dGVkIHZlcnNpb25cbiAqL1xuZXhwb3J0cy5mb3JtYXRBQiA9IGZ1bmN0aW9uIChhYlN0cmluZywgY2h1bmtTaXplLCBvZmZzZXQpIHtcbiAgcmV0dXJuIGV4cG9ydHMuZm9ybWF0QmluYXJ5KGV4cG9ydHMuYWJUb0JpbmFyeShhYlN0cmluZyksIGNodW5rU2l6ZSwgb2Zmc2V0KVxuICAgICAgLnJlcGxhY2UoLzAvZywgJ0EnKVxuICAgICAgLnJlcGxhY2UoLzEvZywgJ0InKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBiaW5hcnkgc3RyaW5nIGludG8gaXRzIG1vc3QgY29tcGFjdCBzdHJpbmcgcmVwcmVzZW50YXRpb24uXG4gKiBAcGFyYW0ge3N0cmluZ30gYmluYXJ5U3RyaW5nIHRoYXQgbWF5IGNvbnRhaW4gd2hpdGVzcGFjZVxuICogQHJldHVybnMge3N0cmluZ30gYmluYXJ5IHN0cmluZyB3aXRoIG5vIHdoaXRlc3BhY2VcbiAqL1xuZXhwb3J0cy5taW5pZnlCaW5hcnkgPSBmdW5jdGlvbiAoYmluYXJ5U3RyaW5nKSB7XG4gIHJldHVybiBiaW5hcnlTdHJpbmcucmVwbGFjZSgvW14wMV0vZywgJycpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGJpbmFyeSBzdHJpbmcgdG8gYSBmb3JtYXR0ZWQgcmVwcmVzZW50YXRpb24sIHdpdGggY2h1bmtzIG9mXG4gKiBhIHNldCBzaXplIHNlcGFyYXRlZCBieSBhIHNwYWNlLlxuICogQHBhcmFtIHtzdHJpbmd9IGJpbmFyeVN0cmluZyAtIG1heSBiZSB1bmZvcm1hdHRlZCBhbHJlYWR5XG4gKiBAcGFyYW0ge251bWJlcn0gY2h1bmtTaXplIC0gaG93IG1hbnkgYml0cyBwZXIgZm9ybWF0IGNodW5rXG4gKiBAcGFyYW0ge251bWJlcn0gW29mZnNldF0gYml0LW9mZnNldCBmb3IgZm9ybWF0dGluZyBlZmZlY3Q7IGRlZmF1bHQgMC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IHByZXR0eSBmb3JtYXR0ZWQgYmluYXJ5IHN0cmluZ1xuICovXG5leHBvcnRzLmZvcm1hdEJpbmFyeSA9IGZ1bmN0aW9uIChiaW5hcnlTdHJpbmcsIGNodW5rU2l6ZSwgb2Zmc2V0KSB7XG4gIG9mZnNldCA9IHV0aWxzLnZhbHVlT3Iob2Zmc2V0LCAwKTtcbiAgaWYgKGNodW5rU2l6ZSA8PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJQYXJhbWV0ZXIgY2h1bmtTaXplIG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm9cIik7XG4gIH1cblxuICB2YXIgYmluYXJ5ID0gZXhwb3J0cy5taW5pZnlCaW5hcnkoYmluYXJ5U3RyaW5nKTtcblxuICB2YXIgY2h1bmtzID0gW107XG4gIHZhciBmaXJzdENodW5rTGVuZ3RoID0gdXRpbHMubW9kKG9mZnNldCwgY2h1bmtTaXplKTtcbiAgaWYgKGZpcnN0Q2h1bmtMZW5ndGggPiAwKSB7XG4gICAgY2h1bmtzLnB1c2goYmluYXJ5LnN1YnN0cigwLCBmaXJzdENodW5rTGVuZ3RoKSk7XG4gIH1cblxuICBmb3IgKHZhciBpID0gZmlyc3RDaHVua0xlbmd0aDsgaSA8IGJpbmFyeS5sZW5ndGg7IGkgKz0gY2h1bmtTaXplKSB7XG4gICAgY2h1bmtzLnB1c2goYmluYXJ5LnN1YnN0cihpLCBjaHVua1NpemUpKTtcbiAgfVxuXG4gIHJldHVybiBjaHVua3Muam9pbignICcpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGhleGFkZWNpbWFsIHN0cmluZyBpbnRvIGl0cyBtb3N0IGNvbXBhY3Qgc3RyaW5nIHJlcHJlc2VudGF0aW9uLlxuICogU3RyaXBzIHdoaXRlc3BhY2UgYW5kIG5vbi1oZXggY2hhcmFjdGVycywgYW5kIGNvZXJjZXMgbGV0dGVycyB0byB1cHBlcmNhc2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gaGV4U3RyaW5nXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnRzLm1pbmlmeUhleCA9IGZ1bmN0aW9uIChoZXhTdHJpbmcpIHtcbiAgcmV0dXJuIGhleFN0cmluZy5yZXBsYWNlKC9bXjAtOUEtRl0vZ2ksICcnKS50b1VwcGVyQ2FzZSgpO1xufTtcblxuLyoqXG4gKiBSZWR1Y2VzIGFsbCB3aGl0ZXNwYWNlIHRvIHNpbmdsZSBjaGFyYWN0ZXJzIGFuZCBzdHJpcHMgbm9uLWRpZ2l0cy5cbiAqIEBwYXJhbSBkZWNpbWFsU3RyaW5nXG4gKi9cbmV4cG9ydHMubWluaWZ5RGVjaW1hbCA9IGZ1bmN0aW9uIChkZWNpbWFsU3RyaW5nKSB7XG4gIHJldHVybiBkZWNpbWFsU3RyaW5nLnJlcGxhY2UoLyheXFxzK3xcXHMrJHxbXjAtOVxcc10pL2csICcnKS5yZXBsYWNlKC9cXHMrL2csICcgJyk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgaGV4IHN0cmluZyB0byBhIGZvcm1hdHRlZCByZXByZXNlbnRhdGlvbiwgd2l0aCBjaHVua3Mgb2ZcbiAqIGEgc2V0IHNpemUgc2VwYXJhdGVkIGJ5IGEgc3BhY2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gaGV4U3RyaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gY2h1bmtTaXplIC0gaW4gYml0cyFcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0XSBoZXgtZGlnaXQtb2Zmc2V0IGZvciBmb3JtYXR0aW5nIGVmZmVjdDsgZGVmYXVsdCAwLlxuICogQHJldHVybnMge3N0cmluZ30gZm9ybWF0dGVkIGhleFxuICovXG5leHBvcnRzLmZvcm1hdEhleCA9IGZ1bmN0aW9uIChoZXhTdHJpbmcsIGNodW5rU2l6ZSwgb2Zmc2V0KSB7XG4gIG9mZnNldCA9IHV0aWxzLnZhbHVlT3Iob2Zmc2V0LCAwKTtcbiAgaWYgKGNodW5rU2l6ZSA8PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJQYXJhbWV0ZXIgY2h1bmtTaXplIG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm9cIik7XG4gIH1cblxuICAvLyBEb24ndCBmb3JtYXQgaGV4IHdoZW4gdGhlIGNodW5rU2l6ZSBkb2Vzbid0IGFsaWduIHdpdGggaGV4IGNoYXJhY3RlcnMuXG4gIGlmIChjaHVua1NpemUgJSA0ICE9PSAwKSB7XG4gICAgcmV0dXJuIGhleFN0cmluZztcbiAgfVxuXG4gIHZhciBoZXhDaHVua1NpemUgPSBjaHVua1NpemUgLyA0O1xuICB2YXIgaGV4ID0gZXhwb3J0cy5taW5pZnlIZXgoaGV4U3RyaW5nKTtcblxuICB2YXIgY2h1bmtzID0gW107XG4gIHZhciBmaXJzdENodW5rTGVuZ3RoID0gdXRpbHMubW9kKG9mZnNldCwgaGV4Q2h1bmtTaXplKTtcbiAgaWYgKGZpcnN0Q2h1bmtMZW5ndGggPiAwKSB7XG4gICAgY2h1bmtzLnB1c2goaGV4LnN1YnN0cigwLCBmaXJzdENodW5rTGVuZ3RoKSk7XG4gIH1cblxuICBmb3IgKHZhciBpID0gZmlyc3RDaHVua0xlbmd0aDsgaSA8IGhleC5sZW5ndGg7IGkgKz0gaGV4Q2h1bmtTaXplKSB7XG4gICAgY2h1bmtzLnB1c2goaGV4LnN1YnN0cihpLCBoZXhDaHVua1NpemUpKTtcbiAgfVxuXG4gIHJldHVybiBjaHVua3Muam9pbignICcpO1xufTtcblxuLyoqXG4gKiBUYWtlcyBhIHNldCBvZiB3aGl0ZXNwYWNlLXNlcGFyYXRlZCBudW1iZXJzIGFuZCBwYWRzIHRoZSBzcGFjaW5nIGJldHdlZW5cbiAqIHRoZW0gdG8gdGhlIHdpZHRoIG9mIHRoZSB3aWRlc3QgbnVtYmVyLCBzbyB0aGF0IHRoZXkgbGluZSB1cCB3aGVuIHRoZXlcbiAqIHdyYXAuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGVjaW1hbFN0cmluZ1xuICogQHJldHVybnMge3N0cmluZ30gYWxpZ25lZCBkZWNpbWFsIHN0cmluZ1xuICovXG5leHBvcnRzLmFsaWduRGVjaW1hbCA9IGZ1bmN0aW9uIChkZWNpbWFsU3RyaW5nKSB7XG4gIGlmIChkZWNpbWFsU3RyaW5nLnJlcGxhY2UoL1xcRC9nLCAnJykgPT09ICcnKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgdmFyIG51bWJlcnMgPSBleHBvcnRzLm1pbmlmeURlY2ltYWwoZGVjaW1hbFN0cmluZykuc3BsaXQoL1xccysvKTtcblxuICAvLyBGaW5kIHRoZSBsZW5ndGggb2YgdGhlIGxvbmdlc3QgbnVtYmVyXG4gIHZhciBtb3N0RGlnaXRzID0gbnVtYmVycy5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgY3VyKSB7XG4gICAgaWYgKGN1ci5sZW5ndGggPiBwcmV2KSB7XG4gICAgICByZXR1cm4gY3VyLmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIHByZXY7XG4gIH0sIDApO1xuXG4gIHZhciB6ZXJvUGFkZGluZyA9ICcwJy5yZXBlYXQobW9zdERpZ2l0cyk7XG5cbiAgcmV0dXJuIG51bWJlcnMubWFwKGZ1bmN0aW9uIChudW1TdHJpbmcpIHtcbiAgICAvLyBMZWZ0LXBhZCBlYWNoIG51bWJlciB3aXRoIG5vbi1icmVha2luZyBzcGFjZXMgdXAgdG8gbWF4IHdpZHRoLlxuICAgIHJldHVybiAoemVyb1BhZGRpbmcgKyBudW1TdHJpbmcpLnNsaWNlKC1tb3N0RGlnaXRzKTtcbiAgfSkuam9pbignICcpO1xufTtcblxuLyoqXG4gKiBJbnRlcnByZXRzIGEgc3RyaW5nIG9mIEFzIGFuZCBCcyBhcyBiaW5hcnkgd2hlcmUgQSBpcyAwIGFuZCBCIGlzIDEsIHRoZW5cbiAqIGludGVycHJldHMgdGhhdCBiaW5hcnkgYXMgYSBzaW5nbGUgbnVtYmVyLCBhbmQgcmV0dXJucyB0aGF0IG51bWJlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBhYlN0cmluZ1xuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0cy5hYlRvSW50ID0gZnVuY3Rpb24gKGFiU3RyaW5nKSB7XG4gIHJldHVybiBleHBvcnRzLmJpbmFyeVRvSW50KGV4cG9ydHMuYWJUb0JpbmFyeShhYlN0cmluZykpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIG51bWJlciB0byBhbiBBQiBiaW5hcnkgcmVwcmVzZW50YXRpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1cbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0cy5pbnRUb0FCID0gZnVuY3Rpb24gKG51bSwgd2lkdGgpIHtcbiAgcmV0dXJuIGV4cG9ydHMuYmluYXJ5VG9BQihleHBvcnRzLmludFRvQmluYXJ5KG51bSwgd2lkdGgpKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgQXMgYW5kIEJzIHRvIGEgYmluYXJ5IHN0cmluZywgd2hlcmUgQSBpcyAwIGFuZCBCIGlzIDEuXG4gKiBAcGFyYW0ge3N0cmluZ30gYWJTdHJpbmdcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydHMuYWJUb0JpbmFyeSA9IGZ1bmN0aW9uIChhYlN0cmluZykge1xuICByZXR1cm4gZXhwb3J0cy5taW5pZnlBQihhYlN0cmluZykucmVwbGFjZSgvQS9nLCAnMCcpLnJlcGxhY2UoL0IvZywgJzEnKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYmluYXJ5IGludG8gQXMgYW5kIEJzLCB3aGVyZSAwIGlzIEEgYW5kIDEgaXMgQi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBiaW5hcnlTdHJpbmdcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydHMuYmluYXJ5VG9BQiA9IGZ1bmN0aW9uIChiaW5hcnlTdHJpbmcpIHtcbiAgcmV0dXJuIGV4cG9ydHMubWluaWZ5QmluYXJ5KGJpbmFyeVN0cmluZykucmVwbGFjZSgvMC9nLCAnQScpLnJlcGxhY2UoLzEvZywgJ0InKTtcbn07XG5cbi8qKlxuICogSW50ZXJwcmV0cyBhIGJpbmFyeSBzdHJpbmcgYXMgYSBzaW5nbGUgbnVtYmVyLCBhbmQgcmV0dXJucyB0aGF0IG51bWJlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBiaW5hcnlTdHJpbmdcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmV4cG9ydHMuYmluYXJ5VG9JbnQgPSBmdW5jdGlvbiAoYmluYXJ5U3RyaW5nKSB7XG4gIHJldHVybiBwYXJzZUludChleHBvcnRzLm1pbmlmeUJpbmFyeShiaW5hcnlTdHJpbmcpLCAyKTtcbn07XG5cbnZhciBpbnRUb1N0cmluZyA9IGZ1bmN0aW9uIChpbnQsIGJhc2UsIHdpZHRoKSB7XG4gIGlmICh3aWR0aCA8PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJPdXRwdXQgd2lkdGggbXVzdCBiZSBncmVhdGVyIHRoYW4gemVyb1wiKTtcbiAgfVxuICByZXR1cm4gTmV0U2ltVXRpbHMuemVyb1BhZExlZnQoaW50LnRvU3RyaW5nKGJhc2UpLCB3aWR0aCk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgbnVtYmVyIHRvIGEgYmluYXJ5IHN0cmluZyByZXByZXNlbnRhdGlvbiB3aXRoIHRoZSBnaXZlbiB3aWR0aC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBpbnQgLSBudW1iZXIgdG8gY29udmVydFxuICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gbnVtYmVyIG9mIGJpdHMgdG8gdXNlXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAtIGJpbmFyeSByZXByZXNlbnRhdGlvbiB3aXRoIGxlbmd0aCBvZiBcIndpZHRoXCJcbiAqL1xuZXhwb3J0cy5pbnRUb0JpbmFyeSA9IGZ1bmN0aW9uIChpbnQsIHdpZHRoKSB7XG4gIHJldHVybiBpbnRUb1N0cmluZyhpbnQsIDIsIHdpZHRoKTtcbn07XG5cbi8qKlxuICogSW50ZXJwcmV0cyBhIGhleCBzdHJpbmcgYXMgYSBzaW5nbGUgbnVtYmVyLCBhbmQgcmV0dXJucyB0aGF0IG51bWJlci5cbiAqIEBwYXJhbSBoZXhhZGVjaW1hbFN0cmluZ1xuICogQHJldHVybnMge051bWJlcn1cbiAqL1xuZXhwb3J0cy5oZXhUb0ludCA9IGZ1bmN0aW9uIChoZXhhZGVjaW1hbFN0cmluZykge1xuICByZXR1cm4gcGFyc2VJbnQoZXhwb3J0cy5taW5pZnlIZXgoaGV4YWRlY2ltYWxTdHJpbmcpLCAxNik7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgbnVtYmVyIHRvIGEgaGV4YWRlY2ltYWwgc3RyaW5nIHJlcHJlc2VudGF0aW9uIHdpdGggdGhlIGdpdmVuXG4gKiB3aWR0aC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBpbnQgLSBudW1iZXIgdG8gY29udmVydFxuICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gbnVtYmVyIG9mIGNoYXJhY3RlcnMgdG8gdXNlXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAtIGhleCByZXByZXNlbnRhdGlvbiB3aXRoIGxlbmd0aCBvZiBcIndpZHRoXCJcbiAqL1xuZXhwb3J0cy5pbnRUb0hleCA9IGZ1bmN0aW9uIChpbnQsIHdpZHRoKSB7XG4gIHJldHVybiBpbnRUb1N0cmluZyhpbnQsIDE2LCB3aWR0aCkudG9VcHBlckNhc2UoKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBoZXggc3RyaW5nIHRvIGEgYmluYXJ5IHN0cmluZywgYnkgbWFwcGluZyBlYWNoIGhleCBjaGFyYWN0ZXJcbiAqIHRvIGZvdXIgYml0cyBvZiBiaW5hcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30gaGV4YWRlY2ltYWxTdHJpbmdcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGJpbmFyeSByZXByZXNlbnRhdGlvbi5cbiAqL1xuZXhwb3J0cy5oZXhUb0JpbmFyeSA9IGZ1bmN0aW9uIChoZXhhZGVjaW1hbFN0cmluZykge1xuICB2YXIgdWdseUhleCA9IGV4cG9ydHMubWluaWZ5SGV4KGhleGFkZWNpbWFsU3RyaW5nKTtcbiAgdmFyIGJpbmFyeSA9ICcnO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdWdseUhleC5sZW5ndGg7IGkrKykge1xuICAgIGJpbmFyeSArPSBleHBvcnRzLmludFRvQmluYXJ5KGV4cG9ydHMuaGV4VG9JbnQodWdseUhleC5zdWJzdHIoaSwgMSkpLCA0KTtcbiAgfVxuXG4gIHJldHVybiBiaW5hcnk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgYmluYXJ5IHN0cmluZyB0byBhIGhleCBzdHJpbmcsIG1hcHBpbmcgZWFjaCBmb3VyIGJpdHMgaW50b1xuICogYSBoZXggY2hhcmFjdGVyIGFuZCByaWdodC1wYWRkaW5nIHdpdGggemVyb2VzIHRvIHJvdW5kIG91dCB0aGUgYmluYXJ5IGxlbmd0aC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBiaW5hcnlTdHJpbmdcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydHMuYmluYXJ5VG9IZXggPSBmdW5jdGlvbiAoYmluYXJ5U3RyaW5nKSB7XG4gIHZhciBjdXJyZW50TmliYmxlO1xuICB2YXIgbmliYmxlV2lkdGggPSA0O1xuICB2YXIgY2hhcnMgPSBbXTtcbiAgdmFyIHVnbHlCaW5hcnkgPSBleHBvcnRzLm1pbmlmeUJpbmFyeShiaW5hcnlTdHJpbmcpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHVnbHlCaW5hcnkubGVuZ3RoOyBpICs9IG5pYmJsZVdpZHRoKSB7XG4gICAgY3VycmVudE5pYmJsZSA9IE5ldFNpbVV0aWxzLnplcm9QYWRSaWdodChcbiAgICAgICAgdWdseUJpbmFyeS5zdWJzdHIoaSwgbmliYmxlV2lkdGgpLCBuaWJibGVXaWR0aCk7XG4gICAgY2hhcnMucHVzaChleHBvcnRzLmludFRvSGV4KGV4cG9ydHMuYmluYXJ5VG9JbnQoY3VycmVudE5pYmJsZSksIDEpKTtcbiAgfVxuICByZXR1cm4gY2hhcnMuam9pbignJyk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nIHNldCBvZiBudW1iZXJzIHRvIGEgYmluYXJ5IHJlcHJlc2VudGF0aW9uIG9mIHRob3NlIG51bWJlcnNcbiAqIHVzaW5nIHRoZSBnaXZlbiBieXRlLXNpemUuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGVjaW1hbFN0cmluZyAtIEEgc2V0IG9mIG51bWJlcnMgc2VwYXJhdGVkIGJ5IHdoaXRlc3BhY2UuXG4gKiBAcGFyYW0ge251bWJlcn0gYnl0ZVNpemUgLSBIb3cgbWFueSBiaXRzIHRvIHVzZSB0byByZXByZXNlbnQgZWFjaCBudW1iZXIuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBCaW5hcnkgcmVwcmVzZW50YXRpb24uXG4gKi9cbmV4cG9ydHMuZGVjaW1hbFRvQmluYXJ5ID0gZnVuY3Rpb24gKGRlY2ltYWxTdHJpbmcsIGJ5dGVTaXplKSB7XG4gIC8vIFNwZWNpYWwgY2FzZTogTm8gbnVtYmVyc1xuICBpZiAoZGVjaW1hbFN0cmluZy5yZXBsYWNlKC9cXEQvZywgJycpID09PSAnJykge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHJldHVybiBleHBvcnRzLm1pbmlmeURlY2ltYWwoZGVjaW1hbFN0cmluZylcbiAgICAgIC5zcGxpdCgvXFxzKy8pXG4gICAgICAubWFwKGZ1bmN0aW9uIChudW1TdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuaW50VG9CaW5hcnkocGFyc2VJbnQobnVtU3RyaW5nLCAxMCksIGJ5dGVTaXplKTtcbiAgICAgIH0pXG4gICAgICAuam9pbignJyk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGJpbmFyeSB0byBhIHN0cmluZyBvZiBkZWNpbWFsIG51bWJlcnMgc2VwYXJhdGVkIGJ5IHdoaXRlc3BhY2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gYmluYXJ5U3RyaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gYnl0ZVNpemUgLSBIb3cgbWFueSBiaXRzIHRvIHJlYWQgZm9yIGVhY2ggbnVtYmVyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBkZWNpbWFsIG51bWJlcnNcbiAqL1xuZXhwb3J0cy5iaW5hcnlUb0RlY2ltYWwgPSBmdW5jdGlvbiAoYmluYXJ5U3RyaW5nLCBieXRlU2l6ZSkge1xuICB2YXIgY3VycmVudEJ5dGU7XG4gIHZhciBudW1iZXJzID0gW107XG4gIHZhciBiaW5hcnkgPSBleHBvcnRzLm1pbmlmeUJpbmFyeShiaW5hcnlTdHJpbmcpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJpbmFyeS5sZW5ndGg7IGkgKz0gYnl0ZVNpemUpIHtcbiAgICBjdXJyZW50Qnl0ZSA9IE5ldFNpbVV0aWxzLnplcm9QYWRSaWdodChiaW5hcnkuc3Vic3RyKGksIGJ5dGVTaXplKSwgYnl0ZVNpemUpO1xuICAgIG51bWJlcnMucHVzaChleHBvcnRzLmJpbmFyeVRvSW50KGN1cnJlbnRCeXRlKSk7XG4gIH1cbiAgcmV0dXJuIG51bWJlcnMuam9pbignICcpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhc2NpaSB0byBiaW5hcnksIHVzaW5nIHRoZSBnaXZlbiBieXRlc2l6ZSBmb3IgZWFjaCBjaGFyYWN0ZXIuXG4gKiBPdmVyZmxvdyBpcyBpZ25vcmVkIChsZWZ0LXRyaW1tZWQpOyByZWNvbW1lbmQgdXNpbmcgYSBieXRlc2l6ZSBvZiA4IGluXG4gKiBtb3N0IGNpcmN1bXN0YW5jZXMuXG4gKiBAcGFyYW0ge3N0cmluZ30gYXNjaWlTdHJpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSBieXRlU2l6ZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0cy5hc2NpaVRvQmluYXJ5ID0gZnVuY3Rpb24gKGFzY2lpU3RyaW5nLCBieXRlU2l6ZSkge1xuICB2YXIgYnl0ZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhc2NpaVN0cmluZy5sZW5ndGg7IGkrKykge1xuICAgIGJ5dGVzLnB1c2goZXhwb3J0cy5pbnRUb0JpbmFyeShhc2NpaVN0cmluZy5jaGFyQ29kZUF0KGkpLCBieXRlU2l6ZSkpO1xuICB9XG4gIHJldHVybiBieXRlcy5qb2luKCcnKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYmluYXJ5IHRvIGFuIGFzY2lpIHN0cmluZywgdXNpbmcgdGhlIGdpdmVuIGJ5dGVzaXplIGZvciBlYWNoXG4gKiBjaGFyYWN0ZXIuICBJZiB0aGUgYmluYXJ5IGlzIG5vdCBkaXZpc2libGUgYnkgYnl0ZXNpemUsIHRoZSBmaW5hbCBjaGFyYWN0ZXJcbiAqIGlzIHJpZ2h0LXBhZGRlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBiaW5hcnlTdHJpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSBieXRlU2l6ZVxuICogQHJldHVybnMge3N0cmluZ30gQVNDSUkgc3RyaW5nXG4gKi9cbmV4cG9ydHMuYmluYXJ5VG9Bc2NpaSA9IGZ1bmN0aW9uIChiaW5hcnlTdHJpbmcsIGJ5dGVTaXplKSB7XG4gIGlmIChieXRlU2l6ZSA8PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJQYXJhbWV0ZXIgYnl0ZVNpemUgbXVzdCBiZSBncmVhdGVyIHRoYW4gemVyb1wiKTtcbiAgfVxuXG4gIHZhciBjdXJyZW50Qnl0ZTtcbiAgdmFyIGNoYXJzID0gW107XG4gIHZhciBiaW5hcnkgPSBleHBvcnRzLm1pbmlmeUJpbmFyeShiaW5hcnlTdHJpbmcpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJpbmFyeS5sZW5ndGg7IGkgKz0gYnl0ZVNpemUpIHtcbiAgICBjdXJyZW50Qnl0ZSA9IE5ldFNpbVV0aWxzLnplcm9QYWRSaWdodChiaW5hcnkuc3Vic3RyKGksIGJ5dGVTaXplKSwgYnl0ZVNpemUpO1xuICAgIGNoYXJzLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShleHBvcnRzLmJpbmFyeVRvSW50KGN1cnJlbnRCeXRlKSkpO1xuICB9XG4gIHJldHVybiBjaGFycy5qb2luKCcnKTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gQmFzZTY0UGF5bG9hZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IHN0cmluZyAtIHRoZSBiYXNlNjQtZW5jb2RlZCBwYXlsb2FkXG4gKiBAcHJvcGVydHkge251bWJlcn0gbGVuIC0gdGhlIGxlbmd0aCBvZiB0aGUgb3JpZ2luYWwgYmluYXJ5IHBheWxvYWRcbiAqL1xuXG4vKipcbiAqIENvbnZlcnRzIGJpbmFyeSB0byBhIGJhc2U2NCBzdHJpbmcgZm9yIG1vcmUgZWZmaWNpZW50IG5ldHdvcmtcbiAqIHRyYW5zZmVyLiBCZWNhdXNlIGJhc2U2NCBleHBlY3RzIGV2ZW4gYnl0ZXMsIHdlIHBhZCB0aGUgYmluYXJ5IHN0cmluZ1xuICogdG8gdGhlIG5lYXJlc3QgYnl0ZSBhbmQgcmV0dXJuIHRoZSBvcmlnaW5hbCBsZW5ndGguIFRoZSByZXZlcnNlXG4gKiBjb252ZXJzaW9uIGV4cGVjdHMgdG8gYmUgZ2l2ZW4gdGhhdCBvcmlnaW5hbCBsZW5ndGguXG4gKiBAcGFyYW0ge3N0cmluZ30gYmluYXJ5U3RyaW5nXG4gKiBAcmV0dXJucyB7QmFzZTY0UGF5bG9hZH0gT2JqZWN0IGNvbnRhaW5pbmcgdGhlIGJhc2U2NCBzdHJpbmcgYW5kIHRoZVxuICogICAgICAgICAgbGVuZ3RoIG9mIG9mIHRoZSBvcmlnaW5hbCBiaW5hcnlTdHJpbmdcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gaWYgYmluYXJ5U3RyaW5nIGFyZ3VtZW50IGlzIG5vdCBhXG4gKiAgICAgICAgIHByb3Blcmx5LWZvcm1hdHRlZCBzdHJpbmcgb2YgemVyb2VzIGFuZCBvbmVzLlxuICogQGV4YW1wbGVcbiAqIC8vIHJldHVybnMgeyBzdHJpbmc6IFwia2c9PVwiLCBsZW46IDcgfVxuICogRGF0YUNvbnZlcnRlcnMuYmluYXJ5VG9CYXNlNjQoXCIxMDAxMDAxXCIpO1xuICovXG5leHBvcnRzLmJpbmFyeVRvQmFzZTY0ID0gZnVuY3Rpb24gKGJpbmFyeVN0cmluZykge1xuXG4gIGlmICgvXlswMV0qJC8udGVzdChiaW5hcnlTdHJpbmcpID09PSBmYWxzZSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhcmd1bWVudCBiaW5hcnlTdHJpbmcgdG8gbWV0aG9kIGJpbmFyeVRvQmFzZTY0XCIgK1xuICAgICAgXCJtdXN0IGJlIGEgYmluYXJ5IHN0cmluZzsgcmVjZWl2ZWQgXFxcIlwiICsgYmluYXJ5U3RyaW5nICsgXCJcXFwiIGluc3RlYWRcIik7XG4gIH1cblxuICB2YXIgYnl0ZUxlbiA9IE1hdGguY2VpbChiaW5hcnlTdHJpbmcubGVuZ3RoLzguMCkgKiA4O1xuICB2YXIgcGFkZGVkQmluYXJ5U3RyaW5nID0gTmV0U2ltVXRpbHMuemVyb1BhZFJpZ2h0KGJpbmFyeVN0cmluZywgYnl0ZUxlbik7XG4gIHZhciBwYXlsb2FkID0gd2luZG93LmJ0b2EoZXhwb3J0cy5iaW5hcnlUb0FzY2lpKHBhZGRlZEJpbmFyeVN0cmluZywgOCkpO1xuXG4gIHJldHVybiB7IHN0cmluZzogcGF5bG9hZCwgbGVuOiBiaW5hcnlTdHJpbmcubGVuZ3RoIH07XG5cbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBiYXNlNjQgc3RyaW5nIGJhY2sgaW50byBhIGJpbmFyeSBzdHJpbmcgb2YgdGhlIHNwZWNpZmllZFxuICogbGVuZ3RoLlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2U2NHN0cmluZ1xuICogQHBhcmFtIHtudW1iZXJ9IGxlblxuICogQHJldHVybnMge3N0cmluZ30gYmluYXJ5U3RyaW5nXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IGlmIGJhc2U2NHN0cmluZyBhcmd1bWVudCBpcyBub3QgYVxuICogICAgICAgICBwcm9wZXJseSBiYXNlNjQtZW5jb2RlZCBzdHJpbmdcbiAqIEBleGFtcGxlXG4gKiAvLyByZXR1cm5zIFwiMTAwMTAwMVwiXG4gKiBEYXRhQ29udmVydGVycy5iYXNlNjRUb0JpbmFyeShcImtnPT1cIiwgNyk7XG4gKi9cbmV4cG9ydHMuYmFzZTY0VG9CaW5hcnkgPSBmdW5jdGlvbiAoYmFzZTY0c3RyaW5nLCBsZW4pIHtcbiAgdmFyIGRlY29kZWREYXRhO1xuICB0cnkge1xuICAgIGRlY29kZWREYXRhID0gd2luZG93LmF0b2IoYmFzZTY0c3RyaW5nKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhcmd1bWVudCBiYXNlNjRzdHJpbmcgdG8gbWV0aG9kIGJhc2U2NFRvQmluYXJ5XCIgK1xuICAgICAgICBcIm11c3QgYmUgYSBiYXNlNjQtZW5jb2RlZCBzdHJpbmdcIik7XG4gIH1cbiAgcmV0dXJuIGV4cG9ydHMuYXNjaWlUb0JpbmFyeShkZWNvZGVkRGF0YSwgOCkuc3Vic3RyKDAsIGxlbik7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGJpbmFyeSB0byBhbiBhZGRyZXNzIHN0cmluZyB1c2luZyB0aGUgcHJvdmlkZWQgYWRkcmVzcyBmb3JtYXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gYmluYXJ5U3RyaW5nXG4gKiBAcGFyYW0ge0FkZHJlc3NIZWFkZXJGb3JtYXR9IGFkZHJlc3NGb3JtYXRcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydHMuYmluYXJ5VG9BZGRyZXNzU3RyaW5nID0gZnVuY3Rpb24gKGJpbmFyeVN0cmluZywgYWRkcmVzc0Zvcm1hdCkge1xuICB2YXIgYmluYXJ5ID0gZXhwb3J0cy5taW5pZnlCaW5hcnkoYmluYXJ5U3RyaW5nKTtcbiAgaWYgKGJpbmFyeS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICB2YXIgaW5kZXhJbnRvQmluYXJ5ID0gMDtcblxuICAvLyBQYXJlbnRoZXNlcyBpbiB0aGUgc3BsaXQoKSByZWdleCBjYXVzZSB0aGUgZGl2aWRpbmcgZWxlbWVudHMgdG8gYmUgY2FwdHVyZWRcbiAgLy8gYW5kIGFsc28gaW5jbHVkZWQgaW4gdGhlIHJldHVybiB2YWx1ZS5cbiAgcmV0dXJuIGFkZHJlc3NGb3JtYXQuc3BsaXQoLyhcXEQrKS8pLm1hcChmdW5jdGlvbiAoZm9ybWF0UGFydCkge1xuICAgIHZhciBiaXRXaWR0aCA9IHBhcnNlSW50KGZvcm1hdFBhcnQsIDEwKTtcbiAgICBpZiAoaXNOYU4oYml0V2lkdGgpKSB7XG4gICAgICAvLyBQYXNzIG5vbi1udW1iZXIgcGFydHMgb2YgdGhlIGZvcm1hdCB0aHJvdWdoLCBzbyB3ZSB1c2UgdGhlIG9yaWdpbmFsXG4gICAgICAvLyBlbnRlcmVkIGNoYXJhY3RlcnMvbGF5b3V0IGZvciBmb3JtYXR0aW5nLlxuICAgICAgcmV0dXJuIGZvcm1hdFBhcnQ7XG4gICAgfVxuXG4gICAgdmFyIGJpbmFyeVNsaWNlID0gYmluYXJ5LnN1YnN0cihpbmRleEludG9CaW5hcnksIGJpdFdpZHRoKTtcbiAgICB2YXIgaW50VmFsID0gYmluYXJ5U2xpY2UubGVuZ3RoID4gMCA/XG4gICAgICAgIGV4cG9ydHMuYmluYXJ5VG9JbnQoYmluYXJ5U2xpY2UpIDogMDtcbiAgICBpbmRleEludG9CaW5hcnkgKz0gYml0V2lkdGg7XG4gICAgcmV0dXJuIGludFZhbC50b1N0cmluZygpO1xuICB9KS5qb2luKCcnKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBmb3JtYXR0ZWQgYWRkcmVzcyBzdHJpbmcgKGRlY2ltYWwgbnVtYmVycyB3aXRoIHNlcGFyYXRvcnMpIGludG9cbiAqIGJpbmFyeSB3aXRoIGJpdC13aWR0aHMgZm9yIGVhY2ggcGFydCBtYXRjaGluZyB0aGUgZ2l2ZW4gZm9ybWF0LlxuICogQHBhcmFtIHtzdHJpbmd9IGFkZHJlc3NTdHJpbmdcbiAqIEBwYXJhbSB7QWRkcmVzc0hlYWRlckZvcm1hdH0gYWRkcmVzc0Zvcm1hdFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0cy5hZGRyZXNzU3RyaW5nVG9CaW5hcnkgPSBmdW5jdGlvbiAoYWRkcmVzc1N0cmluZywgYWRkcmVzc0Zvcm1hdCkge1xuICBpZiAoYWRkcmVzc1N0cmluZy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICAvLyBBY3R1YWwgdXNlciBpbnB1dCwgY29udmVydGVkIHRvIGEgbnVtYmVyW11cbiAgdmFyIGFkZHJlc3NQYXJ0cyA9IGFkZHJlc3NTdHJpbmcudG9TdHJpbmcoKS5zcGxpdCgvXFxEKy8pLm1hcChmdW5jdGlvbiAoc3RyaW5nUGFydCkge1xuICAgIHJldHVybiBwYXJzZUludChzdHJpbmdQYXJ0LCAxMCk7XG4gIH0pLmZpbHRlcihmdW5jdGlvbiAobnVtYmVyUGFydCkge1xuICAgIHJldHVybiAhaXNOYU4obnVtYmVyUGFydCk7XG4gIH0pO1xuXG4gIC8vIEZvcm1hdCwgY29udmVydGVkIHRvIGEgbnVtYmVyW10gd2hlcmUgdGhlIG51bWJlcnMgYXJlIGJpdC13aWR0aHNcbiAgdmFyIHBhcnRXaWR0aHMgPSBhZGRyZXNzRm9ybWF0LnNwbGl0KC9cXEQrLykubWFwKGZ1bmN0aW9uKHN0cmluZ1BhcnQpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQoc3RyaW5nUGFydCwgMTApO1xuICB9KS5maWx0ZXIoZnVuY3Rpb24gKG51bWJlclBhcnQpIHtcbiAgICByZXR1cm4gIWlzTmFOKG51bWJlclBhcnQpO1xuICB9KTtcblxuICB2YXIgcGFydFZhbHVlO1xuICB2YXIgYmluYXJ5ID0gJyc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydFdpZHRocy5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRWYWx1ZSA9IGkgPCBhZGRyZXNzUGFydHMubGVuZ3RoID8gYWRkcmVzc1BhcnRzW2ldIDogMDtcbiAgICBiaW5hcnkgPSBiaW5hcnkgKyBleHBvcnRzLmludFRvQmluYXJ5KHBhcnRWYWx1ZSwgcGFydFdpZHRoc1tpXSk7XG4gIH1cbiAgcmV0dXJuIGJpbmFyeTtcbn07XG5cbi8qKlxuICogQ29udmVydCBhIGJpbmFyeSBzdHJpbmcgdG8gYSBmb3JtYXR0ZWQgcmVwcmVzZW50YXRpb24sIHdpdGggY2h1bmtzIHRoYXRcbiAqIGNvcnJlc3BvbmQgdG8gdGhlIHBhcnRzIG9mIHRoZSBhZGRyZXNzIGhlYWRlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBiaW5hcnlTdHJpbmdcbiAqIEBwYXJhbSB7QWRkcmVzc0hlYWRlckZvcm1hdH0gYWRkcmVzc0Zvcm1hdFxuICovXG5leHBvcnRzLmZvcm1hdEJpbmFyeUZvckFkZHJlc3NIZWFkZXIgPSBmdW5jdGlvbiAoYmluYXJ5U3RyaW5nLCBhZGRyZXNzRm9ybWF0KSB7XG4gIHZhciBiaW5hcnkgPSBleHBvcnRzLm1pbmlmeUJpbmFyeShiaW5hcnlTdHJpbmcpO1xuXG4gIHZhciBwYXJ0V2lkdGhzID0gYWRkcmVzc0Zvcm1hdC5zcGxpdCgvXFxEKy8pLm1hcChmdW5jdGlvbihzdHJpbmdQYXJ0KSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHN0cmluZ1BhcnQsIDEwKTtcbiAgfSkuZmlsdGVyKGZ1bmN0aW9uIChudW1iZXJQYXJ0KSB7XG4gICAgcmV0dXJuICFpc05hTihudW1iZXJQYXJ0KTtcbiAgfSk7XG5cbiAgdmFyIGNodW5rcyA9IFtdO1xuICB2YXIgaW5kZXggPSAwO1xuICBwYXJ0V2lkdGhzLmZvckVhY2goZnVuY3Rpb24gKGJpdFdpZHRoKSB7XG4gICAgdmFyIG5leHQgPSBiaW5hcnkuc3Vic3RyKGluZGV4LCBiaXRXaWR0aCk7XG4gICAgaWYgKG5leHQubGVuZ3RoID4gMCkge1xuICAgICAgY2h1bmtzLnB1c2gobmV4dCk7XG4gICAgfVxuICAgIGluZGV4ICs9IGJpdFdpZHRoO1xuICB9KTtcblxuICB2YXIgbmV4dCA9IGJpbmFyeS5zdWJzdHIoaW5kZXgpO1xuICBpZiAobmV4dC5sZW5ndGggPiAwKSB7XG4gICAgY2h1bmtzLnB1c2gobmV4dCk7XG4gIH1cblxuICByZXR1cm4gY2h1bmtzLmpvaW4oJyAnKTtcbn07XG4iLCI7KGZ1bmN0aW9uICgpIHtcblxuICB2YXIgb2JqZWN0ID0gdHlwZW9mIGV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcgPyBleHBvcnRzIDogdGhpczsgLy8gIzg6IHdlYiB3b3JrZXJzXG4gIHZhciBjaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSc7XG5cbiAgZnVuY3Rpb24gSW52YWxpZENoYXJhY3RlckVycm9yKG1lc3NhZ2UpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB9XG4gIEludmFsaWRDaGFyYWN0ZXJFcnJvci5wcm90b3R5cGUgPSBuZXcgRXJyb3I7XG4gIEludmFsaWRDaGFyYWN0ZXJFcnJvci5wcm90b3R5cGUubmFtZSA9ICdJbnZhbGlkQ2hhcmFjdGVyRXJyb3InO1xuXG4gIC8vIGVuY29kZXJcbiAgLy8gW2h0dHBzOi8vZ2lzdC5naXRodWIuY29tLzk5OTE2Nl0gYnkgW2h0dHBzOi8vZ2l0aHViLmNvbS9uaWduYWddXG4gIG9iamVjdC5idG9hIHx8IChcbiAgb2JqZWN0LmJ0b2EgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICB2YXIgc3RyID0gU3RyaW5nKGlucHV0KTtcbiAgICBmb3IgKFxuICAgICAgLy8gaW5pdGlhbGl6ZSByZXN1bHQgYW5kIGNvdW50ZXJcbiAgICAgIHZhciBibG9jaywgY2hhckNvZGUsIGlkeCA9IDAsIG1hcCA9IGNoYXJzLCBvdXRwdXQgPSAnJztcbiAgICAgIC8vIGlmIHRoZSBuZXh0IHN0ciBpbmRleCBkb2VzIG5vdCBleGlzdDpcbiAgICAgIC8vICAgY2hhbmdlIHRoZSBtYXBwaW5nIHRhYmxlIHRvIFwiPVwiXG4gICAgICAvLyAgIGNoZWNrIGlmIGQgaGFzIG5vIGZyYWN0aW9uYWwgZGlnaXRzXG4gICAgICBzdHIuY2hhckF0KGlkeCB8IDApIHx8IChtYXAgPSAnPScsIGlkeCAlIDEpO1xuICAgICAgLy8gXCI4IC0gaWR4ICUgMSAqIDhcIiBnZW5lcmF0ZXMgdGhlIHNlcXVlbmNlIDIsIDQsIDYsIDhcbiAgICAgIG91dHB1dCArPSBtYXAuY2hhckF0KDYzICYgYmxvY2sgPj4gOCAtIGlkeCAlIDEgKiA4KVxuICAgICkge1xuICAgICAgY2hhckNvZGUgPSBzdHIuY2hhckNvZGVBdChpZHggKz0gMy80KTtcbiAgICAgIGlmIChjaGFyQ29kZSA+IDB4RkYpIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDaGFyYWN0ZXJFcnJvcihcIididG9hJyBmYWlsZWQ6IFRoZSBzdHJpbmcgdG8gYmUgZW5jb2RlZCBjb250YWlucyBjaGFyYWN0ZXJzIG91dHNpZGUgb2YgdGhlIExhdGluMSByYW5nZS5cIik7XG4gICAgICB9XG4gICAgICBibG9jayA9IGJsb2NrIDw8IDggfCBjaGFyQ29kZTtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfSk7XG5cbiAgLy8gZGVjb2RlclxuICAvLyBbaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vMTAyMDM5Nl0gYnkgW2h0dHBzOi8vZ2l0aHViLmNvbS9hdGtdXG4gIG9iamVjdC5hdG9iIHx8IChcbiAgb2JqZWN0LmF0b2IgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICB2YXIgc3RyID0gU3RyaW5nKGlucHV0KS5yZXBsYWNlKC89KyQvLCAnJyk7XG4gICAgaWYgKHN0ci5sZW5ndGggJSA0ID09IDEpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQ2hhcmFjdGVyRXJyb3IoXCInYXRvYicgZmFpbGVkOiBUaGUgc3RyaW5nIHRvIGJlIGRlY29kZWQgaXMgbm90IGNvcnJlY3RseSBlbmNvZGVkLlwiKTtcbiAgICB9XG4gICAgZm9yIChcbiAgICAgIC8vIGluaXRpYWxpemUgcmVzdWx0IGFuZCBjb3VudGVyc1xuICAgICAgdmFyIGJjID0gMCwgYnMsIGJ1ZmZlciwgaWR4ID0gMCwgb3V0cHV0ID0gJyc7XG4gICAgICAvLyBnZXQgbmV4dCBjaGFyYWN0ZXJcbiAgICAgIGJ1ZmZlciA9IHN0ci5jaGFyQXQoaWR4KyspO1xuICAgICAgLy8gY2hhcmFjdGVyIGZvdW5kIGluIHRhYmxlPyBpbml0aWFsaXplIGJpdCBzdG9yYWdlIGFuZCBhZGQgaXRzIGFzY2lpIHZhbHVlO1xuICAgICAgfmJ1ZmZlciAmJiAoYnMgPSBiYyAlIDQgPyBicyAqIDY0ICsgYnVmZmVyIDogYnVmZmVyLFxuICAgICAgICAvLyBhbmQgaWYgbm90IGZpcnN0IG9mIGVhY2ggNCBjaGFyYWN0ZXJzLFxuICAgICAgICAvLyBjb252ZXJ0IHRoZSBmaXJzdCA4IGJpdHMgdG8gb25lIGFzY2lpIGNoYXJhY3RlclxuICAgICAgICBiYysrICUgNCkgPyBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgyNTUgJiBicyA+PiAoLTIgKiBiYyAmIDYpKSA6IDBcbiAgICApIHtcbiAgICAgIC8vIHRyeSB0byBmaW5kIGNoYXJhY3RlciBpbiB0YWJsZSAoMC02Mywgbm90IGZvdW5kID0+IC0xKVxuICAgICAgYnVmZmVyID0gY2hhcnMuaW5kZXhPZihidWZmZXIpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9KTtcblxufSgpKTtcbiIsIi8qKlxuICogQG92ZXJ2aWV3IFN0YXRpYyBoZWxwZXIgbWV0aG9kcyBmb3IgTmV0U2ltLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBfID0gdXRpbHMuZ2V0TG9kYXNoKCk7XG52YXIgaTE4biA9IHJlcXVpcmUoJy4vbG9jYWxlJyk7XG52YXIgTmV0U2ltQ29uc3RhbnRzID0gcmVxdWlyZSgnLi9OZXRTaW1Db25zdGFudHMnKTtcbnZhciBOZXRTaW1HbG9iYWxzID0gcmVxdWlyZSgnLi9OZXRTaW1HbG9iYWxzJyk7XG5cbnZhciBsb2dnZXIgPSByZXF1aXJlKCcuL05ldFNpbUxvZ2dlcicpLmdldFNpbmdsZXRvbigpO1xuXG52YXIgRW5jb2RpbmdUeXBlID0gTmV0U2ltQ29uc3RhbnRzLkVuY29kaW5nVHlwZTtcblxuLyoqXG4gKiBNYWtlIGEgbmV3IFNWRyBlbGVtZW50LCBhcHByb3ByaWF0ZWx5IG5hbWVzcGFjZWQsIHdyYXBwZWQgaW4gYSBqUXVlcnlcbiAqIG9iamVjdCBmb3IgKHNlbWktKWVhc3kgbWFuaXB1bGF0aW9uLlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSB0aGUgdGFnbmFtZSBmb3IgdGhlIHN2ZyBlbGVtZW50LlxuICogQHJldHVybnMge2pRdWVyeX0gZm9yIGNoYWluaW5nXG4gKi9cbmV4cG9ydHMualF1ZXJ5U3ZnRWxlbWVudCA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gIHZhciBuZXdFbGVtZW50ID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgdHlwZSkpO1xuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBhZGRDbGFzcyBzaW5jZSBqUXVlcnkgYWRkQ2xhc3MgZG9lc24ndCB3b3JrIG9uIHN2Zy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZVxuICAgKi9cbiAgbmV3RWxlbWVudC5hZGRDbGFzcyA9IGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICB2YXIgb2xkQ2xhc3NlcyA9IG5ld0VsZW1lbnQuYXR0cignY2xhc3MnKTtcbiAgICBpZiAoIW9sZENsYXNzZXMpIHtcbiAgICAgIG5ld0VsZW1lbnQuYXR0cignY2xhc3MnLCBjbGFzc05hbWUpO1xuICAgIH0gZWxzZSBpZiAoIW5ld0VsZW1lbnQuaGFzQ2xhc3MoY2xhc3NOYW1lKSkge1xuICAgICAgbmV3RWxlbWVudC5hdHRyKCdjbGFzcycsIG9sZENsYXNzZXMgKyAnICcgKyBjbGFzc05hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3RWxlbWVudDtcbiAgfTtcblxuICAvKipcbiAgICogT3ZlcnJpZGUgcmVtb3ZlQ2xhc3Mgc2luY2UgalF1ZXJ5IHJlbW92ZUNsYXNzIGRvZXNuJ3Qgd29yayBvbiBzdmcuXG4gICAqIFJlbW92ZXMgdGhlIGdpdmVuIGNsYXNzbmFtZSBpZiBpdCBleGlzdHMgb24gdGhlIGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWVcbiAgICogQHJldHVybnMge2pRdWVyeX0gZm9yIGNoYWluaW5nXG4gICAqL1xuICBuZXdFbGVtZW50LnJlbW92ZUNsYXNzID0gZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgIHZhciBvbGRDbGFzc2VzID0gbmV3RWxlbWVudC5hdHRyKCdjbGFzcycpO1xuICAgIGlmIChvbGRDbGFzc2VzKSB7XG4gICAgICB2YXIgbmV3Q2xhc3NlcyA9IG9sZENsYXNzZXNcbiAgICAgICAgICAuc3BsaXQoL1xccysvZylcbiAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uICh3b3JkKSB7XG4gICAgICAgICAgICByZXR1cm4gd29yZCAhPT0gY2xhc3NOYW1lO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmpvaW4oJyAnKTtcbiAgICAgIG5ld0VsZW1lbnQuYXR0cignY2xhc3MnLCBuZXdDbGFzc2VzKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0VsZW1lbnQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIGhhc0NsYXNzIHNpbmNlIGpRdWVyeSBoYXNDbGFzcyBkb2Vzbid0IHdvcmsgb24gc3ZnLlxuICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZWxlbWVudCBoYXMgdGhlIGdpdmVuIGNsYXNzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgbmV3RWxlbWVudC5oYXNDbGFzcyA9IGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICB2YXIgb2xkQ2xhc3NlcyA9IG5ld0VsZW1lbnQuYXR0cignY2xhc3MnKTtcbiAgICByZXR1cm4gb2xkQ2xhc3NlcyAmJiBvbGRDbGFzc2VzLnNwbGl0KC9cXHMrL2cpXG4gICAgICAgIC5zb21lKGZ1bmN0aW9uIChleGlzdGluZ0NsYXNzKSB7XG4gICAgICAgICAgcmV0dXJuIGV4aXN0aW5nQ2xhc3MgPT09IGNsYXNzTmFtZTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRvZ2dsZUNsYXNzIHNpbmNlIGpRdWVyeSB0b2dnbGVDbGFzcyBkb2Vzbid0IHdvcmsgb24gc3ZnLlxuICAgKlxuICAgKiBUd28gdmVyc2lvbnM6XG4gICAqXG4gICAqIHRvZ2dsZUNsYXNzKGNsYXNzTmFtZSkgcmV2ZXJzZXMgdGhlIHN0YXRlIG9mIHRoZSBjbGFzcyBvbiB0aGUgZWxlbWVudDtcbiAgICogICBpZiBpdCBoYXMgdGhlIGNsYXNzIGl0IGdldHMgcmVtb3ZlZCwgaWYgaXQgZG9lc24ndCBoYXZlIHRoZSBjbGFzcyBpdFxuICAgKiAgIGdldHMgYWRkZWQuXG4gICAqXG4gICAqIHRvZ2dsZUNsYXNzKGNsYXNzTmFtZSwgc2hvdWxkSGF2ZUNsYXNzKSBhZGRzIG9yIHJlbW92ZXMgdGhlIGNsYXNzIG9uIHRoZVxuICAgKiAgIGVsZW1lbnQgZGVwZW5kaW5nIG9uIHRoZSB2YWx1ZSBvZiB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuICAgKlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Nob3VsZEhhdmVDbGFzc11cbiAgICogQHJldHVybnMge2pRdWVyeX0gZm9yIGNoYWluaW5nXG4gICAqL1xuICBuZXdFbGVtZW50LnRvZ2dsZUNsYXNzID0gZnVuY3Rpb24gKGNsYXNzTmFtZSwgc2hvdWxkSGF2ZUNsYXNzKSB7XG4gICAgLy8gRGVmYXVsdCBzZWNvbmQgYXJndW1lbnQgLSBpZiBub3QgcHJvdmlkZWQsIHdlIGZsaXAgdGhlIGN1cnJlbnQgc3RhdGVcbiAgICBzaG91bGRIYXZlQ2xhc3MgPSB1dGlscy52YWx1ZU9yKHNob3VsZEhhdmVDbGFzcywgIW5ld0VsZW1lbnQuaGFzQ2xhc3MoY2xhc3NOYW1lKSk7XG5cbiAgICBpZiAoc2hvdWxkSGF2ZUNsYXNzKSB7XG4gICAgICBuZXdFbGVtZW50LmFkZENsYXNzKGNsYXNzTmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld0VsZW1lbnQucmVtb3ZlQ2xhc3MoY2xhc3NOYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0VsZW1lbnQ7XG4gIH07XG5cbiAgcmV0dXJuIG5ld0VsZW1lbnQ7XG59O1xuXG4vKipcbiAqIENoZWNrcyBjb25maWd1cmF0aW9uIGFnYWluc3QgdGFiIHR5cGUgdG8gZGVjaWRlIHdoZXRoZXIgdGFiXG4gKiBvZiB0eXBlIHNob3VsZCBiZSBzaG93bi5cbiAqIEBwYXJhbSB7TmV0U2ltTGV2ZWxDb25maWd1cmF0aW9ufSBsZXZlbENvbmZpZ1xuICogQHBhcmFtIHtOZXRTaW1UYWJUeXBlfSB0YWJUeXBlXG4gKi9cbmV4cG9ydHMuc2hvdWxkU2hvd1RhYiA9IGZ1bmN0aW9uIChsZXZlbENvbmZpZywgdGFiVHlwZSkge1xuICByZXR1cm4gbGV2ZWxDb25maWcuc2hvd1RhYnMuaW5kZXhPZih0YWJUeXBlKSA+IC0xO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIGxvY2FsaXplZCBzdHJpbmcgZm9yIHRoZSBnaXZlbiBlbmNvZGluZyB0eXBlLlxuICogQHBhcmFtIHtFbmNvZGluZ1R5cGV9IGVuY29kaW5nVHlwZVxuICogQHJldHVybnMge3N0cmluZ30gbG9jYWxpemVkIGVuY29kaW5nIG5hbWVcbiAqL1xuZXhwb3J0cy5nZXRFbmNvZGluZ0xhYmVsID0gZnVuY3Rpb24gKGVuY29kaW5nVHlwZSkge1xuICBpZiAoZW5jb2RpbmdUeXBlID09PSBFbmNvZGluZ1R5cGUuQVNDSUkpIHtcbiAgICByZXR1cm4gaTE4bi5hc2NpaSgpO1xuICB9IGVsc2UgaWYgKGVuY29kaW5nVHlwZSA9PT0gRW5jb2RpbmdUeXBlLkRFQ0lNQUwpIHtcbiAgICByZXR1cm4gaTE4bi5kZWNpbWFsKCk7XG4gIH0gZWxzZSBpZiAoZW5jb2RpbmdUeXBlID09PSBFbmNvZGluZ1R5cGUuSEVYQURFQ0lNQUwpIHtcbiAgICByZXR1cm4gaTE4bi5oZXgoKTtcbiAgfSBlbHNlIGlmIChlbmNvZGluZ1R5cGUgPT09IEVuY29kaW5nVHlwZS5CSU5BUlkpIHtcbiAgICByZXR1cm4gaTE4bi5iaW5hcnkoKTtcbiAgfSBlbHNlIGlmIChlbmNvZGluZ1R5cGUgPT09IEVuY29kaW5nVHlwZS5BX0FORF9CKSB7XG4gICAgcmV0dXJuIGkxOG4uYV9hbmRfYigpO1xuICB9XG4gIHJldHVybiAnJztcbn07XG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3R9IGVudW1PYmogLSBUZWNobmljYWxseSBhbnkgb2JqZWN0LCBidXQgc2hvdWxkIGJlIHVzZWQgd2l0aFxuICogICAgICAgIGFuIGVudW0gbGlrZSB0aG9zZSBmb3VuZCBpbiBOZXRTaW1Db25zdGFudHNcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmMgLSBBIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggdmFsdWUgaW4gdGhlIGVudW0sXG4gKiAgICAgICAgd2hpY2ggZ2V0cyBwYXNzZWQgdGhlIGVudW0gdmFsdWUuXG4gKi9cbmV4cG9ydHMuZm9yRWFjaEVudW1WYWx1ZSA9IGZ1bmN0aW9uIChlbnVtT2JqLCBmdW5jKSB7XG4gIGZvciAodmFyIGVudW1LZXkgaW4gZW51bU9iaikge1xuICAgIGlmIChlbnVtT2JqLmhhc093blByb3BlcnR5KGVudW1LZXkpKSB7XG4gICAgICBmdW5jKGVudW1PYmpbZW51bUtleV0pO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBSdWxlcyB1c2VkIGJ5IHNlcmlhbGl6ZU51bWJlciBhbmQgZGVzZXJpYWxpemVOdW1iZXIgdG8gbWFwIHVuc3VwcG9ydGVkXG4gKiBKYXZhU2NyaXB0IHZhbHVlcyBpbnRvIEpTT04gYW5kIGJhY2suXG4gKiBAdHlwZSB7e2pzVmFsOiBudW1iZXIsIGpzb25WYWw6IHN0cmluZ31bXX1cbiAqIEByZWFkb25seVxuICovXG52YXIgTlVNQkVSX1NFUklBTElaQVRJT05fUlVMRVMgPSBbXG4gIHsganNWYWw6IEluZmluaXR5LCBqc29uVmFsOiAnSW5maW5pdHknIH0sXG4gIHsganNWYWw6IC1JbmZpbml0eSwganNvblZhbDogJy1JbmZpbml0eScgfSxcbiAgeyBqc1ZhbDogTmFOLCBqc29uVmFsOiAnTmFOJyB9LFxuICB7IGpzVmFsOiB1bmRlZmluZWQsIGpzb25WYWw6ICd1bmRlZmluZWQnIH1cbl07XG5cbi8qKlxuICogQ2hlY2tzIHRoYXQgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIGFjdHVhbGx5IHRoZSBzcGVjaWFsIHZhbHVlIE5hTiwgdW5saWtlXG4gKiBzdGFuZGFyZCBpc05hTiB3aGljaCByZXR1cm5zIHRydWUgZm9yIGFueXRoaW5nIHRoYXQncyBub3QgYSBudW1iZXIuXG4gKiBAcGFyYW0geyp9IHZhbCAtIGFueSB2YWx1ZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbnZhciBpc0V4YWN0bHlOYU4gPSBmdW5jdGlvbiAodmFsKSB7XG4gIC8vIE5hTiBpcyB0aGUgb25seSB2YWx1ZSBpbiBKYXZhU2NyaXB0IHRoYXQgaXMgbm90IGV4YWN0bHkgZXF1YWwgdG8gaXRzZWxmLlxuICAvLyBUaGVyZWZvcmUsIGlmIHZhbCAhPT0gdmFsLCB0aGVuIHZhbCBtdXN0IGJlIE5hTi5cbiAgcmV0dXJuIHZhbCAhPT0gdmFsO1xufTtcblxuLyoqXG4gKiBCZWNhdXNlIEpTT04gZG9lc24ndCBzdXBwb3J0IHRoZSB2YWx1ZXMgSW5maW5pdHksIE5hTiwgb3IgdW5kZWZpbmVkLCB5b3UgY2FuXG4gKiB1c2UgdGhpcyBtZXRob2QgdG8gc3RvcmUgdGhvc2UgdmFsdWVzIGluIEpTT04gYXMgc3RyaW5ncy5cbiAqIEBwYXJhbSB7bnVtYmVyfE5hTn0gbnVtXG4gKiBAcmV0dXJucyB7bnVtYmVyfHN0cmluZ31cbiAqL1xuZXhwb3J0cy5zZXJpYWxpemVOdW1iZXIgPSBmdW5jdGlvbiAobnVtKSB7XG4gIHZhciBhcHBsaWNhYmxlUnVsZSA9IF8uZmluZChOVU1CRVJfU0VSSUFMSVpBVElPTl9SVUxFUywgZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICByZXR1cm4gcnVsZS5qc1ZhbCA9PT0gbnVtIHx8IChpc0V4YWN0bHlOYU4ocnVsZS5qc1ZhbCkgJiYgaXNFeGFjdGx5TmFOKG51bSkpO1xuICB9KTtcbiAgcmV0dXJuIGFwcGxpY2FibGVSdWxlID8gYXBwbGljYWJsZVJ1bGUuanNvblZhbCA6IG51bTtcbn07XG5cbi8qKlxuICogQmVjYXVzZSBKU09OIGRvZXNuJ3Qgc3VwcG9ydCB0aGUgdmFsdWVzIEluZmluaXR5LCBOYU4sIG9yIHVuZGVmaW5lZCwgeW91IGNhblxuICogdXNlIHRoaXMgbWV0aG9kIHRvIHJldHJpZXZlIGEgdmFsdWUgZnJvbSBKU09OIHRoYXQgaXMgZWl0aGVyIGEgbnVtYmVyIG9yIG9uZVxuICogb2YgdGhvc2UgdmFsdWVzLlxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSBzdG9yZWROdW1cbiAqIEByZXR1cm5zIHtudW1iZXJ8TmFOfVxuICovXG5leHBvcnRzLmRlc2VyaWFsaXplTnVtYmVyID0gZnVuY3Rpb24gKHN0b3JlZE51bSkge1xuICB2YXIgYXBwbGljYWJsZVJ1bGUgPSBfLmZpbmQoTlVNQkVSX1NFUklBTElaQVRJT05fUlVMRVMsIGZ1bmN0aW9uIChydWxlKSB7XG4gICAgcmV0dXJuIHJ1bGUuanNvblZhbCA9PT0gc3RvcmVkTnVtO1xuICB9KTtcbiAgcmV0dXJuIGFwcGxpY2FibGVSdWxlID8gYXBwbGljYWJsZVJ1bGUuanNWYWwgOiBzdG9yZWROdW07XG59O1xuXG4vKipcbiAqIEhlbHBlciBmb3IgY29udmVydGluZyBmcm9tIGFuIG9sZGVyIGhlYWRlci1zcGVjIGZvcm1hdCB0byBhIG5ldywgc2ltcGxlciBvbmUuXG4gKiBPbGQgZm9ybWF0OiB7a2V5OntzdHJpbmd9LCBiaXRzOntudW1iZXJ9fVtdXG4gKiBOZXcgZm9ybWF0OiBzdHJpbmdbXVxuICogSWYgd2UgZGV0ZWN0IHRoZSBvbGQgZm9ybWF0LCB3ZSByZXR1cm4gYSBzcGVjIGluIHRoZSBuZXcgZm9ybWF0LlxuICogQHBhcmFtIHtBcnJheX0gc3BlY1xuICogQHJldHVybnMge0FycmF5fVxuICovXG5leHBvcnRzLnNjcnViSGVhZGVyU3BlY0ZvckJhY2t3YXJkc0NvbXBhdGliaWxpdHkgPSBmdW5jdGlvbiAoc3BlYykge1xuICB2YXIgZm91bmRPbGRGb3JtYXQgPSBmYWxzZTtcbiAgdmFyIHNjcnViYmVkU3BlYyA9IFtdO1xuICBzcGVjLmZvckVhY2goZnVuY3Rpb24gKHNwZWNFbnRyeSkge1xuICAgIGlmICh0eXBlb2Ygc3BlY0VudHJ5ID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gVGhpcyBpcyBuZXcgbmV3IGZvcm1hdCwgd2UgY2FuIGp1c3QgY29weSBpdCBvdmVyLlxuICAgICAgc2NydWJiZWRTcGVjLnB1c2goc3BlY0VudHJ5KTtcbiAgICB9IGVsc2UgaWYgKHNwZWNFbnRyeSAhPT0gbnVsbCAmJiB0eXBlb2Ygc3BlY0VudHJ5ID09PSAnb2JqZWN0Jykge1xuICAgICAgLy8gVGhpcyBpcyB0aGUgb2xkIHtrZXk6JycsIGJpdHM6MH0gZm9ybWF0LiAgV2UganVzdCB3YW50IHRoZSBrZXkuXG4gICAgICBzY3J1YmJlZFNwZWMucHVzaChzcGVjRW50cnkua2V5KTtcbiAgICAgIGZvdW5kT2xkRm9ybWF0ID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIElzc3VlIGEgd2FybmluZyBpZiBhbiBvbGQgZm9ybWF0IGdvdCBjb252ZXJ0ZWQsIHNvIHdlIGtub3cgdG8gdXBkYXRlXG4gIC8vIHRoZSBsZXZlbC5cbiAgaWYgKGZvdW5kT2xkRm9ybWF0KSB7XG4gICAgbG9nZ2VyLndhcm4oXCJDb252ZXJ0aW5nIG9sZCBoZWFkZXIgc3BlY2lmaWNhdGlvbiBmb3JtYXQgdG8gbmV3IGZvcm1hdC5cIiArXG4gICAgICAgIFwiIFRoaXMgbGV2ZWwgc2hvdWxkIGJlIHVwZGF0ZWQgdG8gdXNlIHRoZSBuZXcgZm9ybWF0LlwiKTtcbiAgfVxuXG4gIHJldHVybiBzY3J1YmJlZFNwZWM7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7TmV0U2ltTGV2ZWxDb25maWd1cmF0aW9ufSBsZXZlbENvbmZpZ1xuICogQHJldHVybnMge05ldFNpbUxldmVsQ29uZmlndXJhdGlvbn0gc2FtZSB0aGluZywgYnV0IHdpdGggY2VydGFpbiB2YWx1ZXNcbiAqICAgICAgICAgIGNvbnZlcnRlZCBvciBjbGVhbmVkLlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0cy5zY3J1YkxldmVsQ29uZmlndXJhdGlvbl8gPSBmdW5jdGlvbiAobGV2ZWxDb25maWcpIHtcbiAgdmFyIHNjcnViYmVkTGV2ZWwgPSBfLmNsb25lKGxldmVsQ29uZmlnLCB0cnVlKTtcblxuICAvLyBDb252ZXJ0IG9sZCBoZWFkZXIgc3BlYyBmb3JtYXQgdG8gbmV3IGhlYWRlciBzcGVjIGZvcm1hdFxuICBzY3J1YmJlZExldmVsLnJvdXRlckV4cGVjdHNQYWNrZXRIZWFkZXIgPVxuICAgICAgZXhwb3J0cy5zY3J1YkhlYWRlclNwZWNGb3JCYWNrd2FyZHNDb21wYXRpYmlsaXR5KFxuICAgICAgICAgIHNjcnViYmVkTGV2ZWwucm91dGVyRXhwZWN0c1BhY2tldEhlYWRlcik7XG4gIHNjcnViYmVkTGV2ZWwuY2xpZW50SW5pdGlhbFBhY2tldEhlYWRlciA9XG4gICAgICBleHBvcnRzLnNjcnViSGVhZGVyU3BlY0ZvckJhY2t3YXJkc0NvbXBhdGliaWxpdHkoXG4gICAgICAgICAgc2NydWJiZWRMZXZlbC5jbGllbnRJbml0aWFsUGFja2V0SGVhZGVyKTtcblxuICAvLyBDb2VyY2UgY2VydGFpbiB2YWx1ZXMgdG8gc3RyaW5nIHRoYXQgbWlnaHQgaGF2ZSBiZWVuIG1pc3Rha2VuIGZvciBudW1iZXJzXG4gIHNjcnViYmVkTGV2ZWwuYWRkcmVzc0Zvcm1hdCA9IHNjcnViYmVkTGV2ZWwuYWRkcmVzc0Zvcm1hdC50b1N0cmluZygpO1xuXG4gIC8vIEV4cGxpY2l0bHkgbGlzdCBmaWVsZHMgdGhhdCB3ZSBzdXNwZWN0IG1heSBoYXZlIGEgc3RyaW5nIHZhbHVlIHRoYXRcbiAgLy8gbmVlZHMgdG8gYmUgY29udmVydGVkIHRvIGEgbnVtYmVyLCBsaWtlIFwiSW5maW5pdHlcIlxuICBzY3J1YmJlZExldmVsLmRlZmF1bHRQYWNrZXRTaXplTGltaXQgPSBleHBvcnRzLmRlc2VyaWFsaXplTnVtYmVyKFxuICAgICAgc2NydWJiZWRMZXZlbC5kZWZhdWx0UGFja2V0U2l6ZUxpbWl0KTtcblxuICAvLyBQYWNrZXQgU2l6ZSBjYW5ub3QgYmUgaW5maW5pdHk7IGRlZmF1bHRzIHRvIDhrYlxuICBpZiAoc2NydWJiZWRMZXZlbC5kZWZhdWx0UGFja2V0U2l6ZUxpbWl0ID09PSBJbmZpbml0eSkge1xuICAgIHNjcnViYmVkTGV2ZWwuZGVmYXVsdFBhY2tldFNpemVMaW1pdCA9IDgxOTI7XG4gIH1cblxuICBzY3J1YmJlZExldmVsLmRlZmF1bHRCaXRSYXRlQml0c1BlclNlY29uZCA9IGV4cG9ydHMuZGVzZXJpYWxpemVOdW1iZXIoXG4gICAgICBzY3J1YmJlZExldmVsLmRlZmF1bHRCaXRSYXRlQml0c1BlclNlY29uZCk7XG4gIHNjcnViYmVkTGV2ZWwuZGVmYXVsdENodW5rU2l6ZUJpdHMgPSBleHBvcnRzLmRlc2VyaWFsaXplTnVtYmVyKFxuICAgICAgc2NydWJiZWRMZXZlbC5kZWZhdWx0Q2h1bmtTaXplQml0cyk7XG4gIHNjcnViYmVkTGV2ZWwuZGVmYXVsdFJvdXRlckJhbmR3aWR0aCA9IGV4cG9ydHMuZGVzZXJpYWxpemVOdW1iZXIoXG4gICAgICBzY3J1YmJlZExldmVsLmRlZmF1bHRSb3V0ZXJCYW5kd2lkdGgpO1xuICBzY3J1YmJlZExldmVsLmRlZmF1bHRSb3V0ZXJNZW1vcnkgPSBleHBvcnRzLmRlc2VyaWFsaXplTnVtYmVyKFxuICAgICAgc2NydWJiZWRMZXZlbC5kZWZhdWx0Um91dGVyTWVtb3J5KTtcblxuICAvLyBHZW5lcmF0ZSBhIHdhcm5pbmcgaWYgd2Ugc2VlIGEgcG9zc2libGUgbWlzc2VkIHN0cmluZy10by1udW1iZXIgY29udmVyc2lvblxuICBPYmplY3Qua2V5cyhzY3J1YmJlZExldmVsKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIC8vIElnbm9yZSBsZXZlbCBwYXJhbXMgd2l0aCB1bmRlcnNjb3JlcywgdGhleSBhcmUgdGhlIGRhc2hib2FyZCB2ZXJzaW9uc1xuICAgIC8vIG9mIHRoZSBjYW1lbENhc2UgcGFyYW1ldGVycyB0aGF0IHRoZSBhcHAgYWN0dWFsbHkgdXNlcy5cbiAgICByZXR1cm4gIS9fLy50ZXN0KGtleSk7XG4gIH0pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciB1bmNvbnZlcnRlZFZhbHVlID0gTlVNQkVSX1NFUklBTElaQVRJT05fUlVMRVMuc29tZShmdW5jdGlvbiAocnVsZSkge1xuICAgICAgcmV0dXJuIHNjcnViYmVkTGV2ZWxba2V5XSA9PT0gcnVsZS5qc29uVmFsO1xuICAgIH0pO1xuICAgIGlmICh1bmNvbnZlcnRlZFZhbHVlKSB7XG4gICAgICBsb2dnZXIud2FybihcIkxldmVsIG9wdGlvbiAnXCIgKyBrZXkgK1xuICAgICAgXCInIGhhcyB1bmNvbnZlcnRlZCBzdHJpbmcgdmFsdWUgJ1wiICsgc2NydWJiZWRMZXZlbFtrZXldICsgXCInXCIpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHNjcnViYmVkTGV2ZWw7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgbnVtYmVyIG9mIGJpdHMgaW50byBhIGxvY2FsaXplZCByZXByZXNlbnRhdGlvbiBvZiB0aGF0IGRhdGFcbiAqIHNpemUgaW4gYnl0ZXMsIGtpbG9ieXRlcywgbWVnYWJ5dGVzLCBnaWdhYnl0ZXMuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0c1xuICogQHJldHVybnMge3N0cmluZ30gLSBsb2NhbGl6ZWQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHNpemUgaW4gYnl0ZXNcbiAqL1xuZXhwb3J0cy5iaXRzVG9Mb2NhbGl6ZWRSb3VuZGVkQnl0ZXNpemUgPSBmdW5jdGlvbiAoYml0cykge1xuICBpZiAoYml0cyA9PT0gSW5maW5pdHkpIHtcbiAgICByZXR1cm4gaTE4bi51bmxpbWl0ZWQoKTtcbiAgfVxuXG4gIHZhciBnYnl0ZXMgPSBNYXRoLmZsb29yKGJpdHMgLyBOZXRTaW1Db25zdGFudHMuQklUU19QRVJfR0lHQUJZVEUpO1xuICBpZiAoZ2J5dGVzID4gMCkge1xuICAgIHJldHVybiBpMThuLnhfR0J5dGVzKHsgeDogZ2J5dGVzIH0pO1xuICB9XG5cbiAgdmFyIG1ieXRlcyA9IE1hdGguZmxvb3IoYml0cyAvIE5ldFNpbUNvbnN0YW50cy5CSVRTX1BFUl9NRUdBQllURSk7XG4gIGlmIChtYnl0ZXMgPiAwKSB7XG4gICAgcmV0dXJuIGkxOG4ueF9NQnl0ZXMoeyB4OiBtYnl0ZXMgfSk7XG4gIH1cblxuICB2YXIga2J5dGVzID0gTWF0aC5mbG9vcihiaXRzIC8gTmV0U2ltQ29uc3RhbnRzLkJJVFNfUEVSX0tJTE9CWVRFKTtcbiAgaWYgKGtieXRlcyA+IDApIHtcbiAgICByZXR1cm4gaTE4bi54X0tCeXRlcyh7IHg6IGtieXRlcyB9KTtcbiAgfVxuXG4gIHZhciBieXRlcyA9IE1hdGguZmxvb3IoYml0cyAvIE5ldFNpbUNvbnN0YW50cy5CSVRTX1BFUl9CWVRFKTtcbiAgaWYgKGJ5dGVzID4gMCkge1xuICAgIHJldHVybiBpMThuLnhfQnl0ZXMoeyB4OiBieXRlcyB9KTtcbiAgfVxuXG4gIHJldHVybiBpMThuLnhfYml0cyh7IHg6IGJpdHMgfSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgYml0cmF0ZSBpbnRvIGEgbG9jYWxpemVkIHJlcHJlc2VudGF0aW9uIG9mIHRoYXQgZGF0YVxuICogc2l6ZSBpbiBiaXRzL3NlYywga2lsb2JpdHMsIG1lZ2FiaXRzLCBnaWdhYml0cy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRzUGVyU2Vjb25kXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAtIGxvY2FsaXplZCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2Ygc3BlZWQgaW4gYml0c1xuICovXG5leHBvcnRzLmJpdHJhdGVUb0xvY2FsaXplZFJvdW5kZWRCaXRyYXRlID0gZnVuY3Rpb24gKGJpdHNQZXJTZWNvbmQpIHtcbiAgaWYgKGJpdHNQZXJTZWNvbmQgPT09IEluZmluaXR5KSB7XG4gICAgcmV0dXJuIGkxOG4udW5saW1pdGVkKCk7XG4gIH1cblxuICB2YXIgZ2JwcyA9IE1hdGguZmxvb3IoYml0c1BlclNlY29uZCAvIE5ldFNpbUNvbnN0YW50cy5CSVRTX1BFUl9HSUdBQklUKTtcbiAgaWYgKGdicHMgPiAwKSB7XG4gICAgcmV0dXJuIGkxOG4ueF9HYnBzKHsgeDogZ2JwcyB9KTtcbiAgfVxuXG4gIHZhciBtYnBzID0gTWF0aC5mbG9vcihiaXRzUGVyU2Vjb25kIC8gTmV0U2ltQ29uc3RhbnRzLkJJVFNfUEVSX01FR0FCSVQpO1xuICBpZiAobWJwcyA+IDApIHtcbiAgICByZXR1cm4gaTE4bi54X01icHMoeyB4OiBtYnBzIH0pO1xuICB9XG5cbiAgdmFyIGticHMgPSBNYXRoLmZsb29yKGJpdHNQZXJTZWNvbmQgLyBOZXRTaW1Db25zdGFudHMuQklUU19QRVJfS0lMT0JJVCk7XG4gIGlmIChrYnBzID4gMCkge1xuICAgIHJldHVybiBpMThuLnhfS2Jwcyh7IHg6IGticHMgfSk7XG4gIH1cblxuICB2YXIgYnBzID0gTWF0aC5mbG9vcihiaXRzUGVyU2Vjb25kICogMTAwKSAvIDEwMDtcbiAgcmV0dXJuIGkxOG4ueF9icHMoeyB4OiBicHMgfSk7XG59O1xuXG5leHBvcnRzLnplcm9QYWRMZWZ0ID0gZnVuY3Rpb24gKHN0cmluZywgZGVzaXJlZFdpZHRoKSB7XG4gIHZhciBwYWRkaW5nID0gJzAnLnJlcGVhdChkZXNpcmVkV2lkdGgpO1xuICByZXR1cm4gKHBhZGRpbmcgKyBzdHJpbmcpLnNsaWNlKC1kZXNpcmVkV2lkdGgpO1xufTtcblxuZXhwb3J0cy56ZXJvUGFkUmlnaHQgPSBmdW5jdGlvbiAoc3RyaW5nLCBkZXNpcmVkV2lkdGgpIHtcbiAgdmFyIHBhZGRpbmcgPSAnMCcucmVwZWF0KGRlc2lyZWRXaWR0aCk7XG4gIHJldHVybiAoc3RyaW5nICsgcGFkZGluZykuc3Vic3RyKDAsIGRlc2lyZWRXaWR0aCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBDb250aW51ZS9GaW5pc2ggYnV0dG9uIG9uIHRoZSBnaXZlbiBOZXRTaW1QYW5lbCAoaW4gaXRzIGhlYWRlcikuXG4gKiBAcGFyYW0ge05ldFNpbVBhbmVsfSBvblBhbmVsXG4gKiBAc3RhdGljXG4gKi9cbmV4cG9ydHMubWFrZUNvbnRpbnVlQnV0dG9uID0gZnVuY3Rpb24gKG9uUGFuZWwpIHtcbiAgb25QYW5lbC5hZGRCdXR0b24oXG4gICAgICBpMThuLmNvbnRpbnVlQnV0dG9uKHsgY2FyZXQ6ICc8aSBjbGFzcz1cImZhIGZhLWNhcmV0LXJpZ2h0XCI+PC9pPicgfSksXG4gICAgICBmdW5jdGlvbiAoalF1ZXJ5RXZlbnQpIHtcbiAgICAgICAgaWYgKCEkKGpRdWVyeUV2ZW50LnRhcmdldCkuaXMoJzpkaXNhYmxlZCcpKSB7XG4gICAgICAgICAgTmV0U2ltR2xvYmFscy5jb21wbGV0ZUxldmVsQW5kQ29udGludWUoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc2Vjb25kYXJ5OiBmYWxzZSxcbiAgICAgICAgY2xhc3NlczogWyAnc3VibWl0QnV0dG9uJyBdXG4gICAgICB9KTtcbn07XG4iLCIvLyBsb2NhbGUgZm9yIG5ldHNpbVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdpbmRvdy5ibG9ja2x5Lm5ldHNpbV9sb2NhbGU7XG4iLCIvKipcbiAqIEBvdmVydmlldyBVdGlsaXR5IGNsYXNzIHdyYXBwaW5nIG1vcmUgZ3JhbnVsYXIgbG9nIGJlaGF2aW9yIHRoYXQgaXNuJ3RcbiAqIGF2YWlsYWJsZSBpbiBhbGwgYnJvd3NlcnMuICBBbHNvIG1ha2VzIGl0IGVhc3kgdG8gdHVybiBsb2dnaW5nIG9uIGFuZCBvZmZcbiAqIGluIHRlc3RzLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIExvZ2dpbmcgQVBJIHRvIGNvbnRyb2wgbG9nIGxldmVscyBhbmQgc3VwcG9ydCBkaWZmZXJlbnQgYnJvd3NlcnNcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtDb25zb2xlfSB3aW5kb3cgY29uc29sZSBBUElcbiAqIEBwYXJhbSB7TG9nTGV2ZWx9IHZlcmJvc2l0eVxuICovXG52YXIgTmV0U2ltTG9nZ2VyID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3V0cHV0Q29uc29sZSwgdmVyYm9zaXR5IC8qPVZFUkJPU0UqLykge1xuICAvKipcbiAgICogQHR5cGUge0NvbnNvbGV9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLm91dHB1dENvbnNvbGVfID0gb3V0cHV0Q29uc29sZTtcblxuICAvKipcbiAgICogQWx3YXlzIG1hcHBlZCB0byBjb25zb2xlLmxvZywgb3Igbm8tb3AgaWYgbm90IGF2YWlsYWJsZS5cbiAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5sb2dfID0gZnVuY3Rpb24gKCkge307XG5cbiAgLyoqXG4gICAqIElmIGNvbmZpZ3VyZWQgZm9yIGluZm8gbG9nZ2luZywgZ2V0cyBtYXBwZWQgdG8gY29uc29sZS5pbmZvLFxuICAgKiBmYWxscyBiYWNrIHRvIGNvbnNvbGUubG9nLCBvciBuby1vcC5cbiAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgKi9cbiAgdGhpcy5pbmZvID0gZnVuY3Rpb24gKCkge307XG5cbiAgLyoqXG4gICAqIElmIGNvbmZpZ3VyZWQgZm9yIHdhcm5pbmcgbG9nZ2luZywgZ2V0cyBtYXBwZWQgdG8gY29uc29sZS53YXJuLFxuICAgKiBmYWxscyBiYWNrIHRvIGNvbnNvbGUubG9nLCBvciBuby1vcC5cbiAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgKi9cbiAgdGhpcy53YXJuID0gZnVuY3Rpb24gKCkge307XG5cbiAgLyoqXG4gICAqIElmIGNvbmZpZ3VyZWQgZm9yIGVycm9yIGxvZ2dpbmcsIGdldHMgbWFwcGVkIHRvIGNvbnNvbGUuZXJyb3IsXG4gICAqIGZhbGxzIGJhY2sgdG8gY29uc29sZS5sb2csIG9yIG5vLW9wLlxuICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAqL1xuICB0aGlzLmVycm9yID0gZnVuY3Rpb24gKCkge307XG5cbiAgdGhpcy5zZXRWZXJib3NpdHkoKHVuZGVmaW5lZCA9PT0gdmVyYm9zaXR5KSA/XG4gICAgICBMb2dMZXZlbC5WRVJCT1NFIDogdmVyYm9zaXR5KTtcbn07XG5cbi8qKlxuICogTG9nIHZlcmJvc2l0eSBsZXZlbHMgZW51bS5cbiAqIEByZWFkb25seVxuICogQGVudW0ge251bWJlcn1cbiAqL1xudmFyIExvZ0xldmVsID0ge1xuICBOT05FOiAwLFxuICBFUlJPUjogMSxcbiAgV0FSTjogMixcbiAgSU5GTzogMyxcbiAgVkVSQk9TRTogNFxufTtcbk5ldFNpbUxvZ2dlci5Mb2dMZXZlbCA9IExvZ0xldmVsO1xuXG4vKipcbiAqIEdsb2JhbCBzaW5nbGV0b25cbiAqIEB0eXBlIHtOZXRTaW1Mb2dnZXJ9XG4gKi9cbnZhciBzaW5nbGV0b25JbnN0YW5jZTtcblxuLyoqXG4gKiBTdGF0aWMgZ2V0dGVyL2xhenktY3JlYXRvciBmb3IgdGhlIGdsb2JhbCBzaW5nbGV0b24gaW5zdGFuY2UuXG4gKiBAcmV0dXJucyB7TmV0U2ltTG9nZ2VyfVxuICovXG5OZXRTaW1Mb2dnZXIuZ2V0U2luZ2xldG9uID0gZnVuY3Rpb24gKCkge1xuICBpZiAoc2luZ2xldG9uSW5zdGFuY2UgPT09IHVuZGVmaW5lZCkge1xuICAgIHNpbmdsZXRvbkluc3RhbmNlID0gbmV3IE5ldFNpbUxvZ2dlcihjb25zb2xlLCBMb2dMZXZlbC5XQVJOKTtcbiAgfVxuICByZXR1cm4gc2luZ2xldG9uSW5zdGFuY2U7XG59O1xuXG4vKipcbiAqIEJpbmRzIGludGVybmFsIGZ1bmN0aW9uIGNhbGxzIGFjY29yZGluZyB0byBnaXZlbiB2ZXJib3NpdHkgbGV2ZWwuXG4gKiBAcGFyYW0gdmVyYm9zaXR5XG4gKi9cbk5ldFNpbUxvZ2dlci5wcm90b3R5cGUuc2V0VmVyYm9zaXR5ID0gZnVuY3Rpb24gKHZlcmJvc2l0eSkge1xuICAvLyBOb3RlOiBXZSBkb24ndCBjYWxsIHRoaXMub3V0cHV0Q29uc29sZV8ubG9nLmJpbmQgaGVyZSwgYmVjYXVzZSBpbiBJRTkgdGhlXG4gIC8vIGNvbnNvbGUncyBsb2dnaW5nIG1ldGhvZHMgZG8gbm90IGluaGVyaXQgZnJvbSBGdW5jdGlvbi5cblxuICB0aGlzLmxvZ18gPSAodGhpcy5vdXRwdXRDb25zb2xlXyAmJiB0aGlzLm91dHB1dENvbnNvbGVfLmxvZykgP1xuICAgICAgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuY2FsbCh0aGlzLm91dHB1dENvbnNvbGVfLmxvZywgdGhpcy5vdXRwdXRDb25zb2xlXykgOlxuICAgICAgZnVuY3Rpb24gKCkge307XG5cbiAgaWYgKHZlcmJvc2l0eSA+PSBMb2dMZXZlbC5JTkZPKSB7XG4gICAgdGhpcy5pbmZvID0gKHRoaXMub3V0cHV0Q29uc29sZV8gJiYgdGhpcy5vdXRwdXRDb25zb2xlXy5pbmZvKSA/XG4gICAgICAgIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmNhbGwodGhpcy5vdXRwdXRDb25zb2xlXy5pbmZvLCB0aGlzLm91dHB1dENvbnNvbGVfKSA6XG4gICAgICAgIHRoaXMubG9nXztcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmluZm8gPSBmdW5jdGlvbiAoKSB7fTtcbiAgfVxuXG4gIGlmICh2ZXJib3NpdHkgPj0gTG9nTGV2ZWwuV0FSTikge1xuICAgIHRoaXMud2FybiA9ICh0aGlzLm91dHB1dENvbnNvbGVfICYmIHRoaXMub3V0cHV0Q29uc29sZV8ud2FybikgP1xuICAgICAgICBGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5jYWxsKHRoaXMub3V0cHV0Q29uc29sZV8ud2FybiwgdGhpcy5vdXRwdXRDb25zb2xlXykgOlxuICAgICAgICB0aGlzLmxvZ187XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53YXJuID0gZnVuY3Rpb24gKCkge307XG4gIH1cblxuICBpZiAodmVyYm9zaXR5ID49IExvZ0xldmVsLkVSUk9SKSB7XG4gICAgdGhpcy5lcnJvciA9ICh0aGlzLm91dHB1dENvbnNvbGVfICYmIHRoaXMub3V0cHV0Q29uc29sZV8uZXJyb3IpID9cbiAgICAgICAgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuY2FsbCh0aGlzLm91dHB1dENvbnNvbGVfLmVycm9yLCB0aGlzLm91dHB1dENvbnNvbGVfKSA6XG4gICAgICAgIHRoaXMubG9nXztcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmVycm9yID0gZnVuY3Rpb24gKCkge307XG4gIH1cbn07XG5cbi8qKlxuICogV3JpdGVzIHRvIG91dHB1dCwgZGVwZW5kaW5nIG9uIGxvZyBsZXZlbFxuICogQHBhcmFtIHsqfSBtZXNzYWdlXG4gKiBAcGFyYW0ge0xvZ0xldmVsfSBsb2dMZXZlbFxuICovXG5OZXRTaW1Mb2dnZXIucHJvdG90eXBlLmxvZyA9IGZ1bmN0aW9uIChtZXNzYWdlLCBsb2dMZXZlbCAvKj1JTkZPKi8pIHtcbiAgaWYgKHVuZGVmaW5lZCA9PT0gbG9nTGV2ZWwpIHtcbiAgICBsb2dMZXZlbCA9IExvZ0xldmVsLklORk87XG4gIH1cblxuICBzd2l0Y2ggKGxvZ0xldmVsKSB7XG4gICAgY2FzZSBMb2dMZXZlbC5FUlJPUjpcbiAgICAgIHRoaXMuZXJyb3IobWVzc2FnZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIExvZ0xldmVsLldBUk46XG4gICAgICB0aGlzLndhcm4obWVzc2FnZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIExvZ0xldmVsLklORk86XG4gICAgICB0aGlzLmluZm8obWVzc2FnZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhpcy5sb2dfKG1lc3NhZ2UpO1xuICB9XG59O1xuIiwiLyoqXG4gKiBAb3ZlcnZpZXcgR2xvYmFsIHNpbmdsZXRvbiB1c2VkIHRvIHNpbXBsaWZ5IGNlcnRhaW4gY3Jvc3MtY3V0dGluZyBjb25jZXJucyxcbiAqICAgICAgICAgICBpbmNsdWRpbmc6XG4gKlxuICogICAgICAgICAgIEFjY2VzcyB0byBsZXZlbCBjb25maWd1cmF0aW9uLlxuICogICAgICAgICAgIEFjY2VzcyB0byBlbnZpcm9ubWVudC1zcGVjaWZpYyBhc3NldCBVUkxzLlxuICogICAgICAgICAgIFJlcHJvZHVjaWJsZSByYW5kb20gbnVtYmVyIGZ1bmN0aW9ucyBmb3IgZWFzeSB0ZXN0aW5nLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHNlZWRyYW5kb20gPSByZXF1aXJlKCdzZWVkcmFuZG9tJyk7XG5cbi8qKlxuICogUmVmZXJlbmNlIHRvIHJvb3QgU3R1ZGlvQXBwIGNvbnRyb2xsZXJcbiAqIEB0eXBlIHtTdHVkaW9BcHB9XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgc3R1ZGlvQXBwXyA9IG51bGw7XG5cbi8qKlxuICogUmVmZXJlbmNlIHRvIHJvb3QgTmV0U2ltIGNvbnRyb2xsZXJcbiAqIEB0eXBlIHtOZXRTaW19XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgbmV0c2ltXyA9IG51bGw7XG5cbi8qKlxuICogUmVwbGFjYWJsZSBwc2V1ZG8tcmFuZG9tIG51bWJlciBnZW5lcmF0b3IgZnVuY3Rpb24gdGhhdCBsZXRzIHVzIHNldCBhIGdsb2JhbFxuICogcmFuZG9tIHNlZWQgaWYgd2Ugd2lzaC5cbiAqIEB0eXBlIHtmdW5jdGlvbn1cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBwc2V1ZG9SYW5kb21OdW1iZXJGdW5jdGlvbl8gPSBNYXRoLnJhbmRvbTtcblxuLyoqXG4gKiBHZXQgYSByYW5kb20gaW50ZWdlciBpbiB0aGUgZ2l2ZW4gcmFuZ2UuXG4gKiBAcGFyYW0ge251bWJlcn0gbG93IGluY2x1c2l2ZSBsb3dlciBlbmQgb2YgcmFuZ2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBoaWdoIGV4Y2x1c2l2ZSB1cHBlciBlbmQgb2YgcmFuZ2VcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbnZhciByYW5kb21JbnRJblJhbmdlID0gZnVuY3Rpb24gKGxvdywgaGlnaCkge1xuICByZXR1cm4gTWF0aC5mbG9vcihwc2V1ZG9SYW5kb21OdW1iZXJGdW5jdGlvbl8oKSAqIChoaWdoIC0gbG93KSkgKyBsb3c7XG59O1xuXG4vKipcbiAqIFByb3ZpZGUgc2luZ2xldG9uIGFjY2VzcyB0byBnbG9iYWwgc2ltdWxhdGlvbiBzZXR0aW5nc1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAvKipcbiAgICogU2V0IHRoZSByb290IGNvbnRyb2xsZXJzIHRoYXQgY2FuIGJlIHVzZWQgZm9yIGdsb2JhbCBvcGVyYXRpb25zLlxuICAgKiBAcGFyYW0ge1N0dWRpb0FwcH0gc3R1ZGlvQXBwXG4gICAqIEBwYXJhbSB7TmV0U2ltfSBuZXRzaW1cbiAgICovXG4gIHNldFJvb3RDb250cm9sbGVyczogZnVuY3Rpb24gKHN0dWRpb0FwcCwgbmV0c2ltKSB7XG4gICAgc3R1ZGlvQXBwXyA9IHN0dWRpb0FwcDtcbiAgICBuZXRzaW1fID0gbmV0c2ltO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7TmV0U2ltTGV2ZWxDb25maWd1cmF0aW9ufVxuICAgKi9cbiAgZ2V0TGV2ZWxDb25maWc6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmV0c2ltXy5sZXZlbDtcbiAgfSxcblxuICAvKipcbiAgICogQHJldHVybnMge1B1YlN1YkNvbmZpZ31cbiAgICovXG4gIGdldFB1YlN1YkNvbmZpZzogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICB1c2VQdXNoZXI6IG5ldHNpbV8udXNlUHVzaGVyLFxuICAgICAgcHVzaGVyQXBwbGljYXRpb25LZXk6IG5ldHNpbV8ucHVzaGVyQXBwbGljYXRpb25LZXlcbiAgICB9O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0R2xvYmFsTWF4Um91dGVyczogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXRzaW1fLmdsb2JhbE1heFJvdXRlcnM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAgICovXG4gIGdldEFzc2V0VXJsRnVuY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gc3R1ZGlvQXBwXy5hc3NldFVybDtcbiAgfSxcblxuICAvKipcbiAgICogVHJpZ2dlciBhIGxheW91dCB1cGRhdGUgb2YgdGhlIHJpZ2h0IGNvbHVtbiwgcmVjZWl2ZWQvc2VudC9zZW5kIHBhbmVscy5cbiAgICovXG4gIHVwZGF0ZUxheW91dDogZnVuY3Rpb24gKCkge1xuICAgIG5ldHNpbV8udXBkYXRlTGF5b3V0KCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRyaWdnZXIgYW4gYXR0ZW1wdCB0byBjb21wbGV0ZSB0aGUgY3VycmVudCBsZXZlbCBhbmQgY29udGludWUgdG8gdGhlIG5leHQuXG4gICAqL1xuICBjb21wbGV0ZUxldmVsQW5kQ29udGludWU6IGZ1bmN0aW9uICgpIHtcbiAgICBuZXRzaW1fLmNvbXBsZXRlTGV2ZWxBbmRDb250aW51ZSgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXNlZWQgdGhlIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yLiAgSWYgdGhpcyBpcyBuZXZlciBjYWxsZWQsIHRoZSBkZWZhdWx0XG4gICAqIE1hdGgucmFuZG9tIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIGdlbmVyYXRvci5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5ld1NlZWRcbiAgICovXG4gIHNldFJhbmRvbVNlZWQ6IGZ1bmN0aW9uIChuZXdTZWVkKSB7XG4gICAgcHNldWRvUmFuZG9tTnVtYmVyRnVuY3Rpb25fID0gc2VlZHJhbmRvbShuZXdTZWVkKTtcbiAgfSxcblxuICAvKipcbiAgICogQHJldHVybnMge251bWJlcn0gYSByYW5kb20gdmFsdWUgYmV0d2VlbiAwIGFuZCAxXG4gICAqL1xuICByYW5kb206IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcHNldWRvUmFuZG9tTnVtYmVyRnVuY3Rpb25fKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldCBhIHJhbmRvbSBpbnRlZ2VyIGluIHRoZSBnaXZlbiByYW5nZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGxvdyBpbmNsdXNpdmUgbG93ZXIgZW5kIG9mIHJhbmdlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoaWdoIGV4Y2x1c2l2ZSB1cHBlciBlbmQgb2YgcmFuZ2VcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIHJhbmRvbUludEluUmFuZ2U6IHJhbmRvbUludEluUmFuZ2UsXG5cbiAgLyoqXG4gICAqIEdldCBhIHJhbmRvbSBpdGVtIG91dCBvZiBhIGNvbGxlY3Rpb25cbiAgICogQHBhcmFtIHtBcnJheX0gY29sbGVjdGlvblxuICAgKiBAcmV0dXJucyB7Kn0gdW5kZWZpbmVkIGlmIGNvbGxlY3Rpb24gaXMgZW1wdHlcbiAgICovXG4gIHJhbmRvbVBpY2tPbmU6IGZ1bmN0aW9uIChjb2xsZWN0aW9uKSB7XG4gICAgdmFyIHNpemUgPSBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgICBpZiAoc2l6ZSA9PT0gMCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gY29sbGVjdGlvbltyYW5kb21JbnRJblJhbmdlKDAsIHNpemUpXTtcbiAgfVxuXG59O1xuIiwiLy8gQSBsaWJyYXJ5IG9mIHNlZWRhYmxlIFJOR3MgaW1wbGVtZW50ZWQgaW4gSmF2YXNjcmlwdC5cbi8vXG4vLyBVc2FnZTpcbi8vXG4vLyB2YXIgc2VlZHJhbmRvbSA9IHJlcXVpcmUoJ3NlZWRyYW5kb20nKTtcbi8vIHZhciByYW5kb20gPSBzZWVkcmFuZG9tKDEpOyAvLyBvciBhbnkgc2VlZC5cbi8vIHZhciB4ID0gcmFuZG9tKCk7ICAgICAgIC8vIDAgPD0geCA8IDEuICBFdmVyeSBiaXQgaXMgcmFuZG9tLlxuLy8gdmFyIHggPSByYW5kb20ucXVpY2soKTsgLy8gMCA8PSB4IDwgMS4gIDMyIGJpdHMgb2YgcmFuZG9tbmVzcy5cblxuLy8gYWxlYSwgYSA1My1iaXQgbXVsdGlwbHktd2l0aC1jYXJyeSBnZW5lcmF0b3IgYnkgSm9oYW5uZXMgQmFhZ8O4ZS5cbi8vIFBlcmlvZDogfjJeMTE2XG4vLyBSZXBvcnRlZCB0byBwYXNzIGFsbCBCaWdDcnVzaCB0ZXN0cy5cbnZhciBhbGVhID0gcmVxdWlyZSgnLi9saWIvYWxlYScpO1xuXG4vLyB4b3IxMjgsIGEgcHVyZSB4b3Itc2hpZnQgZ2VuZXJhdG9yIGJ5IEdlb3JnZSBNYXJzYWdsaWEuXG4vLyBQZXJpb2Q6IDJeMTI4LTEuXG4vLyBSZXBvcnRlZCB0byBmYWlsOiBNYXRyaXhSYW5rIGFuZCBMaW5lYXJDb21wLlxudmFyIHhvcjEyOCA9IHJlcXVpcmUoJy4vbGliL3hvcjEyOCcpO1xuXG4vLyB4b3J3b3csIEdlb3JnZSBNYXJzYWdsaWEncyAxNjAtYml0IHhvci1zaGlmdCBjb21iaW5lZCBwbHVzIHdleWwuXG4vLyBQZXJpb2Q6IDJeMTkyLTJeMzJcbi8vIFJlcG9ydGVkIHRvIGZhaWw6IENvbGxpc2lvbk92ZXIsIFNpbXBQb2tlciwgYW5kIExpbmVhckNvbXAuXG52YXIgeG9yd293ID0gcmVxdWlyZSgnLi9saWIveG9yd293Jyk7XG5cbi8vIHhvcnNoaWZ0NywgYnkgRnJhbsOnb2lzIFBhbm5ldG9uIGFuZCBQaWVycmUgTCdlY3V5ZXIsIHRha2VzXG4vLyBhIGRpZmZlcmVudCBhcHByb2FjaDogaXQgYWRkcyByb2J1c3RuZXNzIGJ5IGFsbG93aW5nIG1vcmUgc2hpZnRzXG4vLyB0aGFuIE1hcnNhZ2xpYSdzIG9yaWdpbmFsIHRocmVlLiAgSXQgaXMgYSA3LXNoaWZ0IGdlbmVyYXRvclxuLy8gd2l0aCAyNTYgYml0cywgdGhhdCBwYXNzZXMgQmlnQ3J1c2ggd2l0aCBubyBzeXN0bWF0aWMgZmFpbHVyZXMuXG4vLyBQZXJpb2QgMl4yNTYtMS5cbi8vIE5vIHN5c3RlbWF0aWMgQmlnQ3J1c2ggZmFpbHVyZXMgcmVwb3J0ZWQuXG52YXIgeG9yc2hpZnQ3ID0gcmVxdWlyZSgnLi9saWIveG9yc2hpZnQ3Jyk7XG5cbi8vIHhvcjQwOTYsIGJ5IFJpY2hhcmQgQnJlbnQsIGlzIGEgNDA5Ni1iaXQgeG9yLXNoaWZ0IHdpdGggYVxuLy8gdmVyeSBsb25nIHBlcmlvZCB0aGF0IGFsc28gYWRkcyBhIFdleWwgZ2VuZXJhdG9yLiBJdCBhbHNvIHBhc3Nlc1xuLy8gQmlnQ3J1c2ggd2l0aCBubyBzeXN0ZW1hdGljIGZhaWx1cmVzLiAgSXRzIGxvbmcgcGVyaW9kIG1heVxuLy8gYmUgdXNlZnVsIGlmIHlvdSBoYXZlIG1hbnkgZ2VuZXJhdG9ycyBhbmQgbmVlZCB0byBhdm9pZFxuLy8gY29sbGlzaW9ucy5cbi8vIFBlcmlvZDogMl40MTI4LTJeMzIuXG4vLyBObyBzeXN0ZW1hdGljIEJpZ0NydXNoIGZhaWx1cmVzIHJlcG9ydGVkLlxudmFyIHhvcjQwOTYgPSByZXF1aXJlKCcuL2xpYi94b3I0MDk2Jyk7XG5cbi8vIFR5Y2hlLWksIGJ5IFNhbXVlbCBOZXZlcyBhbmQgRmlsaXBlIEFyYXVqbywgaXMgYSBiaXQtc2hpZnRpbmcgcmFuZG9tXG4vLyBudW1iZXIgZ2VuZXJhdG9yIGRlcml2ZWQgZnJvbSBDaGFDaGEsIGEgbW9kZXJuIHN0cmVhbSBjaXBoZXIuXG4vLyBodHRwczovL2VkZW4uZGVpLnVjLnB0L35zbmV2ZXMvcHVicy8yMDExLXNuZmEyLnBkZlxuLy8gUGVyaW9kOiB+Ml4xMjdcbi8vIE5vIHN5c3RlbWF0aWMgQmlnQ3J1c2ggZmFpbHVyZXMgcmVwb3J0ZWQuXG52YXIgdHljaGVpID0gcmVxdWlyZSgnLi9saWIvdHljaGVpJyk7XG5cbi8vIFRoZSBvcmlnaW5hbCBBUkM0LWJhc2VkIHBybmcgaW5jbHVkZWQgaW4gdGhpcyBsaWJyYXJ5LlxuLy8gUGVyaW9kOiB+Ml4xNjAwXG52YXIgc3IgPSByZXF1aXJlKCcuL3NlZWRyYW5kb20nKTtcblxuc3IuYWxlYSA9IGFsZWE7XG5zci54b3IxMjggPSB4b3IxMjg7XG5zci54b3J3b3cgPSB4b3J3b3c7XG5zci54b3JzaGlmdDcgPSB4b3JzaGlmdDc7XG5zci54b3I0MDk2ID0geG9yNDA5NjtcbnNyLnR5Y2hlaSA9IHR5Y2hlaTtcblxubW9kdWxlLmV4cG9ydHMgPSBzcjtcbiIsIi8qXG5Db3B5cmlnaHQgMjAxNCBEYXZpZCBCYXUuXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZ1xuYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG5cIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbndpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbmRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xucGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvXG50aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG5pbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbkVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULlxuSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTllcbkNMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsXG5UT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRVxuU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbiovXG5cbihmdW5jdGlvbiAocG9vbCwgbWF0aCkge1xuLy9cbi8vIFRoZSBmb2xsb3dpbmcgY29uc3RhbnRzIGFyZSByZWxhdGVkIHRvIElFRUUgNzU0IGxpbWl0cy5cbi8vXG52YXIgZ2xvYmFsID0gdGhpcyxcbiAgICB3aWR0aCA9IDI1NiwgICAgICAgIC8vIGVhY2ggUkM0IG91dHB1dCBpcyAwIDw9IHggPCAyNTZcbiAgICBjaHVua3MgPSA2LCAgICAgICAgIC8vIGF0IGxlYXN0IHNpeCBSQzQgb3V0cHV0cyBmb3IgZWFjaCBkb3VibGVcbiAgICBkaWdpdHMgPSA1MiwgICAgICAgIC8vIHRoZXJlIGFyZSA1MiBzaWduaWZpY2FudCBkaWdpdHMgaW4gYSBkb3VibGVcbiAgICBybmduYW1lID0gJ3JhbmRvbScsIC8vIHJuZ25hbWU6IG5hbWUgZm9yIE1hdGgucmFuZG9tIGFuZCBNYXRoLnNlZWRyYW5kb21cbiAgICBzdGFydGRlbm9tID0gbWF0aC5wb3cod2lkdGgsIGNodW5rcyksXG4gICAgc2lnbmlmaWNhbmNlID0gbWF0aC5wb3coMiwgZGlnaXRzKSxcbiAgICBvdmVyZmxvdyA9IHNpZ25pZmljYW5jZSAqIDIsXG4gICAgbWFzayA9IHdpZHRoIC0gMSxcbiAgICBub2RlY3J5cHRvOyAgICAgICAgIC8vIG5vZGUuanMgY3J5cHRvIG1vZHVsZSwgaW5pdGlhbGl6ZWQgYXQgdGhlIGJvdHRvbS5cblxuLy9cbi8vIHNlZWRyYW5kb20oKVxuLy8gVGhpcyBpcyB0aGUgc2VlZHJhbmRvbSBmdW5jdGlvbiBkZXNjcmliZWQgYWJvdmUuXG4vL1xuZnVuY3Rpb24gc2VlZHJhbmRvbShzZWVkLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICB2YXIga2V5ID0gW107XG4gIG9wdGlvbnMgPSAob3B0aW9ucyA9PSB0cnVlKSA/IHsgZW50cm9weTogdHJ1ZSB9IDogKG9wdGlvbnMgfHwge30pO1xuXG4gIC8vIEZsYXR0ZW4gdGhlIHNlZWQgc3RyaW5nIG9yIGJ1aWxkIG9uZSBmcm9tIGxvY2FsIGVudHJvcHkgaWYgbmVlZGVkLlxuICB2YXIgc2hvcnRzZWVkID0gbWl4a2V5KGZsYXR0ZW4oXG4gICAgb3B0aW9ucy5lbnRyb3B5ID8gW3NlZWQsIHRvc3RyaW5nKHBvb2wpXSA6XG4gICAgKHNlZWQgPT0gbnVsbCkgPyBhdXRvc2VlZCgpIDogc2VlZCwgMyksIGtleSk7XG5cbiAgLy8gVXNlIHRoZSBzZWVkIHRvIGluaXRpYWxpemUgYW4gQVJDNCBnZW5lcmF0b3IuXG4gIHZhciBhcmM0ID0gbmV3IEFSQzQoa2V5KTtcblxuICAvLyBUaGlzIGZ1bmN0aW9uIHJldHVybnMgYSByYW5kb20gZG91YmxlIGluIFswLCAxKSB0aGF0IGNvbnRhaW5zXG4gIC8vIHJhbmRvbW5lc3MgaW4gZXZlcnkgYml0IG9mIHRoZSBtYW50aXNzYSBvZiB0aGUgSUVFRSA3NTQgdmFsdWUuXG4gIHZhciBwcm5nID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG4gPSBhcmM0LmcoY2h1bmtzKSwgICAgICAgICAgICAgLy8gU3RhcnQgd2l0aCBhIG51bWVyYXRvciBuIDwgMiBeIDQ4XG4gICAgICAgIGQgPSBzdGFydGRlbm9tLCAgICAgICAgICAgICAgICAgLy8gICBhbmQgZGVub21pbmF0b3IgZCA9IDIgXiA0OC5cbiAgICAgICAgeCA9IDA7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGFuZCBubyAnZXh0cmEgbGFzdCBieXRlJy5cbiAgICB3aGlsZSAobiA8IHNpZ25pZmljYW5jZSkgeyAgICAgICAgICAvLyBGaWxsIHVwIGFsbCBzaWduaWZpY2FudCBkaWdpdHMgYnlcbiAgICAgIG4gPSAobiArIHgpICogd2lkdGg7ICAgICAgICAgICAgICAvLyAgIHNoaWZ0aW5nIG51bWVyYXRvciBhbmRcbiAgICAgIGQgKj0gd2lkdGg7ICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGRlbm9taW5hdG9yIGFuZCBnZW5lcmF0aW5nIGFcbiAgICAgIHggPSBhcmM0LmcoMSk7ICAgICAgICAgICAgICAgICAgICAvLyAgIG5ldyBsZWFzdC1zaWduaWZpY2FudC1ieXRlLlxuICAgIH1cbiAgICB3aGlsZSAobiA+PSBvdmVyZmxvdykgeyAgICAgICAgICAgICAvLyBUbyBhdm9pZCByb3VuZGluZyB1cCwgYmVmb3JlIGFkZGluZ1xuICAgICAgbiAvPSAyOyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgbGFzdCBieXRlLCBzaGlmdCBldmVyeXRoaW5nXG4gICAgICBkIC89IDI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICByaWdodCB1c2luZyBpbnRlZ2VyIG1hdGggdW50aWxcbiAgICAgIHggPj4+PSAxOyAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIHdlIGhhdmUgZXhhY3RseSB0aGUgZGVzaXJlZCBiaXRzLlxuICAgIH1cbiAgICByZXR1cm4gKG4gKyB4KSAvIGQ7ICAgICAgICAgICAgICAgICAvLyBGb3JtIHRoZSBudW1iZXIgd2l0aGluIFswLCAxKS5cbiAgfTtcblxuICBwcm5nLmludDMyID0gZnVuY3Rpb24oKSB7IHJldHVybiBhcmM0LmcoNCkgfCAwOyB9XG4gIHBybmcucXVpY2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGFyYzQuZyg0KSAvIDB4MTAwMDAwMDAwOyB9XG4gIHBybmcuZG91YmxlID0gcHJuZztcblxuICAvLyBNaXggdGhlIHJhbmRvbW5lc3MgaW50byBhY2N1bXVsYXRlZCBlbnRyb3B5LlxuICBtaXhrZXkodG9zdHJpbmcoYXJjNC5TKSwgcG9vbCk7XG5cbiAgLy8gQ2FsbGluZyBjb252ZW50aW9uOiB3aGF0IHRvIHJldHVybiBhcyBhIGZ1bmN0aW9uIG9mIHBybmcsIHNlZWQsIGlzX21hdGguXG4gIHJldHVybiAob3B0aW9ucy5wYXNzIHx8IGNhbGxiYWNrIHx8XG4gICAgICBmdW5jdGlvbihwcm5nLCBzZWVkLCBpc19tYXRoX2NhbGwsIHN0YXRlKSB7XG4gICAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICAgIC8vIExvYWQgdGhlIGFyYzQgc3RhdGUgZnJvbSB0aGUgZ2l2ZW4gc3RhdGUgaWYgaXQgaGFzIGFuIFMgYXJyYXkuXG4gICAgICAgICAgaWYgKHN0YXRlLlMpIHsgY29weShzdGF0ZSwgYXJjNCk7IH1cbiAgICAgICAgICAvLyBPbmx5IHByb3ZpZGUgdGhlIC5zdGF0ZSBtZXRob2QgaWYgcmVxdWVzdGVkIHZpYSBvcHRpb25zLnN0YXRlLlxuICAgICAgICAgIHBybmcuc3RhdGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGNvcHkoYXJjNCwge30pOyB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBjYWxsZWQgYXMgYSBtZXRob2Qgb2YgTWF0aCAoTWF0aC5zZWVkcmFuZG9tKCkpLCBtdXRhdGVcbiAgICAgICAgLy8gTWF0aC5yYW5kb20gYmVjYXVzZSB0aGF0IGlzIGhvdyBzZWVkcmFuZG9tLmpzIGhhcyB3b3JrZWQgc2luY2UgdjEuMC5cbiAgICAgICAgaWYgKGlzX21hdGhfY2FsbCkgeyBtYXRoW3JuZ25hbWVdID0gcHJuZzsgcmV0dXJuIHNlZWQ7IH1cblxuICAgICAgICAvLyBPdGhlcndpc2UsIGl0IGlzIGEgbmV3ZXIgY2FsbGluZyBjb252ZW50aW9uLCBzbyByZXR1cm4gdGhlXG4gICAgICAgIC8vIHBybmcgZGlyZWN0bHkuXG4gICAgICAgIGVsc2UgcmV0dXJuIHBybmc7XG4gICAgICB9KShcbiAgcHJuZyxcbiAgc2hvcnRzZWVkLFxuICAnZ2xvYmFsJyBpbiBvcHRpb25zID8gb3B0aW9ucy5nbG9iYWwgOiAodGhpcyA9PSBtYXRoKSxcbiAgb3B0aW9ucy5zdGF0ZSk7XG59XG5tYXRoWydzZWVkJyArIHJuZ25hbWVdID0gc2VlZHJhbmRvbTtcblxuLy9cbi8vIEFSQzRcbi8vXG4vLyBBbiBBUkM0IGltcGxlbWVudGF0aW9uLiAgVGhlIGNvbnN0cnVjdG9yIHRha2VzIGEga2V5IGluIHRoZSBmb3JtIG9mXG4vLyBhbiBhcnJheSBvZiBhdCBtb3N0ICh3aWR0aCkgaW50ZWdlcnMgdGhhdCBzaG91bGQgYmUgMCA8PSB4IDwgKHdpZHRoKS5cbi8vXG4vLyBUaGUgZyhjb3VudCkgbWV0aG9kIHJldHVybnMgYSBwc2V1ZG9yYW5kb20gaW50ZWdlciB0aGF0IGNvbmNhdGVuYXRlc1xuLy8gdGhlIG5leHQgKGNvdW50KSBvdXRwdXRzIGZyb20gQVJDNC4gIEl0cyByZXR1cm4gdmFsdWUgaXMgYSBudW1iZXIgeFxuLy8gdGhhdCBpcyBpbiB0aGUgcmFuZ2UgMCA8PSB4IDwgKHdpZHRoIF4gY291bnQpLlxuLy9cbmZ1bmN0aW9uIEFSQzQoa2V5KSB7XG4gIHZhciB0LCBrZXlsZW4gPSBrZXkubGVuZ3RoLFxuICAgICAgbWUgPSB0aGlzLCBpID0gMCwgaiA9IG1lLmkgPSBtZS5qID0gMCwgcyA9IG1lLlMgPSBbXTtcblxuICAvLyBUaGUgZW1wdHkga2V5IFtdIGlzIHRyZWF0ZWQgYXMgWzBdLlxuICBpZiAoIWtleWxlbikgeyBrZXkgPSBba2V5bGVuKytdOyB9XG5cbiAgLy8gU2V0IHVwIFMgdXNpbmcgdGhlIHN0YW5kYXJkIGtleSBzY2hlZHVsaW5nIGFsZ29yaXRobS5cbiAgd2hpbGUgKGkgPCB3aWR0aCkge1xuICAgIHNbaV0gPSBpKys7XG4gIH1cbiAgZm9yIChpID0gMDsgaSA8IHdpZHRoOyBpKyspIHtcbiAgICBzW2ldID0gc1tqID0gbWFzayAmIChqICsga2V5W2kgJSBrZXlsZW5dICsgKHQgPSBzW2ldKSldO1xuICAgIHNbal0gPSB0O1xuICB9XG5cbiAgLy8gVGhlIFwiZ1wiIG1ldGhvZCByZXR1cm5zIHRoZSBuZXh0IChjb3VudCkgb3V0cHV0cyBhcyBvbmUgbnVtYmVyLlxuICAobWUuZyA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgLy8gVXNpbmcgaW5zdGFuY2UgbWVtYmVycyBpbnN0ZWFkIG9mIGNsb3N1cmUgc3RhdGUgbmVhcmx5IGRvdWJsZXMgc3BlZWQuXG4gICAgdmFyIHQsIHIgPSAwLFxuICAgICAgICBpID0gbWUuaSwgaiA9IG1lLmosIHMgPSBtZS5TO1xuICAgIHdoaWxlIChjb3VudC0tKSB7XG4gICAgICB0ID0gc1tpID0gbWFzayAmIChpICsgMSldO1xuICAgICAgciA9IHIgKiB3aWR0aCArIHNbbWFzayAmICgoc1tpXSA9IHNbaiA9IG1hc2sgJiAoaiArIHQpXSkgKyAoc1tqXSA9IHQpKV07XG4gICAgfVxuICAgIG1lLmkgPSBpOyBtZS5qID0gajtcbiAgICByZXR1cm4gcjtcbiAgICAvLyBGb3Igcm9idXN0IHVucHJlZGljdGFiaWxpdHksIHRoZSBmdW5jdGlvbiBjYWxsIGJlbG93IGF1dG9tYXRpY2FsbHlcbiAgICAvLyBkaXNjYXJkcyBhbiBpbml0aWFsIGJhdGNoIG9mIHZhbHVlcy4gIFRoaXMgaXMgY2FsbGVkIFJDNC1kcm9wWzI1Nl0uXG4gICAgLy8gU2VlIGh0dHA6Ly9nb29nbGUuY29tL3NlYXJjaD9xPXJzYStmbHVocmVyK3Jlc3BvbnNlJmJ0bklcbiAgfSkod2lkdGgpO1xufVxuXG4vL1xuLy8gY29weSgpXG4vLyBDb3BpZXMgaW50ZXJuYWwgc3RhdGUgb2YgQVJDNCB0byBvciBmcm9tIGEgcGxhaW4gb2JqZWN0LlxuLy9cbmZ1bmN0aW9uIGNvcHkoZiwgdCkge1xuICB0LmkgPSBmLmk7XG4gIHQuaiA9IGYuajtcbiAgdC5TID0gZi5TLnNsaWNlKCk7XG4gIHJldHVybiB0O1xufTtcblxuLy9cbi8vIGZsYXR0ZW4oKVxuLy8gQ29udmVydHMgYW4gb2JqZWN0IHRyZWUgdG8gbmVzdGVkIGFycmF5cyBvZiBzdHJpbmdzLlxuLy9cbmZ1bmN0aW9uIGZsYXR0ZW4ob2JqLCBkZXB0aCkge1xuICB2YXIgcmVzdWx0ID0gW10sIHR5cCA9ICh0eXBlb2Ygb2JqKSwgcHJvcDtcbiAgaWYgKGRlcHRoICYmIHR5cCA9PSAnb2JqZWN0Jykge1xuICAgIGZvciAocHJvcCBpbiBvYmopIHtcbiAgICAgIHRyeSB7IHJlc3VsdC5wdXNoKGZsYXR0ZW4ob2JqW3Byb3BdLCBkZXB0aCAtIDEpKTsgfSBjYXRjaCAoZSkge31cbiAgICB9XG4gIH1cbiAgcmV0dXJuIChyZXN1bHQubGVuZ3RoID8gcmVzdWx0IDogdHlwID09ICdzdHJpbmcnID8gb2JqIDogb2JqICsgJ1xcMCcpO1xufVxuXG4vL1xuLy8gbWl4a2V5KClcbi8vIE1peGVzIGEgc3RyaW5nIHNlZWQgaW50byBhIGtleSB0aGF0IGlzIGFuIGFycmF5IG9mIGludGVnZXJzLCBhbmRcbi8vIHJldHVybnMgYSBzaG9ydGVuZWQgc3RyaW5nIHNlZWQgdGhhdCBpcyBlcXVpdmFsZW50IHRvIHRoZSByZXN1bHQga2V5LlxuLy9cbmZ1bmN0aW9uIG1peGtleShzZWVkLCBrZXkpIHtcbiAgdmFyIHN0cmluZ3NlZWQgPSBzZWVkICsgJycsIHNtZWFyLCBqID0gMDtcbiAgd2hpbGUgKGogPCBzdHJpbmdzZWVkLmxlbmd0aCkge1xuICAgIGtleVttYXNrICYgal0gPVxuICAgICAgbWFzayAmICgoc21lYXIgXj0ga2V5W21hc2sgJiBqXSAqIDE5KSArIHN0cmluZ3NlZWQuY2hhckNvZGVBdChqKyspKTtcbiAgfVxuICByZXR1cm4gdG9zdHJpbmcoa2V5KTtcbn1cblxuLy9cbi8vIGF1dG9zZWVkKClcbi8vIFJldHVybnMgYW4gb2JqZWN0IGZvciBhdXRvc2VlZGluZywgdXNpbmcgd2luZG93LmNyeXB0byBhbmQgTm9kZSBjcnlwdG9cbi8vIG1vZHVsZSBpZiBhdmFpbGFibGUuXG4vL1xuZnVuY3Rpb24gYXV0b3NlZWQoKSB7XG4gIHRyeSB7XG4gICAgaWYgKG5vZGVjcnlwdG8pIHsgcmV0dXJuIHRvc3RyaW5nKG5vZGVjcnlwdG8ucmFuZG9tQnl0ZXMod2lkdGgpKTsgfVxuICAgIHZhciBvdXQgPSBuZXcgVWludDhBcnJheSh3aWR0aCk7XG4gICAgKGdsb2JhbC5jcnlwdG8gfHwgZ2xvYmFsLm1zQ3J5cHRvKS5nZXRSYW5kb21WYWx1ZXMob3V0KTtcbiAgICByZXR1cm4gdG9zdHJpbmcob3V0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciBicm93c2VyID0gZ2xvYmFsLm5hdmlnYXRvcixcbiAgICAgICAgcGx1Z2lucyA9IGJyb3dzZXIgJiYgYnJvd3Nlci5wbHVnaW5zO1xuICAgIHJldHVybiBbK25ldyBEYXRlLCBnbG9iYWwsIHBsdWdpbnMsIGdsb2JhbC5zY3JlZW4sIHRvc3RyaW5nKHBvb2wpXTtcbiAgfVxufVxuXG4vL1xuLy8gdG9zdHJpbmcoKVxuLy8gQ29udmVydHMgYW4gYXJyYXkgb2YgY2hhcmNvZGVzIHRvIGEgc3RyaW5nXG4vL1xuZnVuY3Rpb24gdG9zdHJpbmcoYSkge1xuICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseSgwLCBhKTtcbn1cblxuLy9cbi8vIFdoZW4gc2VlZHJhbmRvbS5qcyBpcyBsb2FkZWQsIHdlIGltbWVkaWF0ZWx5IG1peCBhIGZldyBiaXRzXG4vLyBmcm9tIHRoZSBidWlsdC1pbiBSTkcgaW50byB0aGUgZW50cm9weSBwb29sLiAgQmVjYXVzZSB3ZSBkb1xuLy8gbm90IHdhbnQgdG8gaW50ZXJmZXJlIHdpdGggZGV0ZXJtaW5pc3RpYyBQUk5HIHN0YXRlIGxhdGVyLFxuLy8gc2VlZHJhbmRvbSB3aWxsIG5vdCBjYWxsIG1hdGgucmFuZG9tIG9uIGl0cyBvd24gYWdhaW4gYWZ0ZXJcbi8vIGluaXRpYWxpemF0aW9uLlxuLy9cbm1peGtleShtYXRoLnJhbmRvbSgpLCBwb29sKTtcblxuLy9cbi8vIE5vZGVqcyBhbmQgQU1EIHN1cHBvcnQ6IGV4cG9ydCB0aGUgaW1wbGVtZW50YXRpb24gYXMgYSBtb2R1bGUgdXNpbmdcbi8vIGVpdGhlciBjb252ZW50aW9uLlxuLy9cbmlmICgodHlwZW9mIG1vZHVsZSkgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBzZWVkcmFuZG9tO1xuICAvLyBXaGVuIGluIG5vZGUuanMsIHRyeSB1c2luZyBjcnlwdG8gcGFja2FnZSBmb3IgYXV0b3NlZWRpbmcuXG4gIHRyeSB7XG4gICAgbm9kZWNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuICB9IGNhdGNoIChleCkge31cbn0gZWxzZSBpZiAoKHR5cGVvZiBkZWZpbmUpID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBzZWVkcmFuZG9tOyB9KTtcbn1cblxuLy8gRW5kIGFub255bW91cyBzY29wZSwgYW5kIHBhc3MgaW5pdGlhbCB2YWx1ZXMuXG59KShcbiAgW10sICAgICAvLyBwb29sOiBlbnRyb3B5IHBvb2wgc3RhcnRzIGVtcHR5XG4gIE1hdGggICAgLy8gbWF0aDogcGFja2FnZSBjb250YWluaW5nIHJhbmRvbSwgcG93LCBhbmQgc2VlZHJhbmRvbVxuKTtcbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLnJhbmRvbUJ5dGVzID0gZXhwb3J0cy5ybmcgPSBleHBvcnRzLnBzZXVkb1JhbmRvbUJ5dGVzID0gZXhwb3J0cy5wcm5nID0gcmVxdWlyZSgncmFuZG9tYnl0ZXMnKVxuZXhwb3J0cy5jcmVhdGVIYXNoID0gZXhwb3J0cy5IYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKVxuZXhwb3J0cy5jcmVhdGVIbWFjID0gZXhwb3J0cy5IbWFjID0gcmVxdWlyZSgnY3JlYXRlLWhtYWMnKVxuXG52YXIgaGFzaGVzID0gWydzaGExJywgJ3NoYTIyNCcsICdzaGEyNTYnLCAnc2hhMzg0JywgJ3NoYTUxMicsICdtZDUnLCAncm1kMTYwJ10uY29uY2F0KE9iamVjdC5rZXlzKHJlcXVpcmUoJ2Jyb3dzZXJpZnktc2lnbi9hbGdvcycpKSlcbmV4cG9ydHMuZ2V0SGFzaGVzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaGFzaGVzXG59XG5cbnZhciBwID0gcmVxdWlyZSgncGJrZGYyJylcbmV4cG9ydHMucGJrZGYyID0gcC5wYmtkZjJcbmV4cG9ydHMucGJrZGYyU3luYyA9IHAucGJrZGYyU3luY1xuXG52YXIgYWVzID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1jaXBoZXInKVxuO1tcbiAgJ0NpcGhlcicsXG4gICdjcmVhdGVDaXBoZXInLFxuICAnQ2lwaGVyaXYnLFxuICAnY3JlYXRlQ2lwaGVyaXYnLFxuICAnRGVjaXBoZXInLFxuICAnY3JlYXRlRGVjaXBoZXInLFxuICAnRGVjaXBoZXJpdicsXG4gICdjcmVhdGVEZWNpcGhlcml2JyxcbiAgJ2dldENpcGhlcnMnLFxuICAnbGlzdENpcGhlcnMnXG5dLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBleHBvcnRzW2tleV0gPSBhZXNba2V5XVxufSlcblxudmFyIGRoID0gcmVxdWlyZSgnZGlmZmllLWhlbGxtYW4nKVxuO1tcbiAgJ0RpZmZpZUhlbGxtYW5Hcm91cCcsXG4gICdjcmVhdGVEaWZmaWVIZWxsbWFuR3JvdXAnLFxuICAnZ2V0RGlmZmllSGVsbG1hbicsXG4gICdjcmVhdGVEaWZmaWVIZWxsbWFuJyxcbiAgJ0RpZmZpZUhlbGxtYW4nXG5dLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBleHBvcnRzW2tleV0gPSBkaFtrZXldXG59KVxuXG52YXIgc2lnbiA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktc2lnbicpXG47W1xuICAnY3JlYXRlU2lnbicsXG4gICdTaWduJyxcbiAgJ2NyZWF0ZVZlcmlmeScsXG4gICdWZXJpZnknXG5dLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBleHBvcnRzW2tleV0gPSBzaWduW2tleV1cbn0pXG5cbmV4cG9ydHMuY3JlYXRlRUNESCA9IHJlcXVpcmUoJ2NyZWF0ZS1lY2RoJylcblxudmFyIHB1YmxpY0VuY3J5cHQgPSByZXF1aXJlKCdwdWJsaWMtZW5jcnlwdCcpXG5cbjtbXG4gICdwdWJsaWNFbmNyeXB0JyxcbiAgJ3ByaXZhdGVFbmNyeXB0JyxcbiAgJ3B1YmxpY0RlY3J5cHQnLFxuICAncHJpdmF0ZURlY3J5cHQnXG5dLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBleHBvcnRzW2tleV0gPSBwdWJsaWNFbmNyeXB0W2tleV1cbn0pXG5cbi8vIHRoZSBsZWFzdCBJIGNhbiBkbyBpcyBtYWtlIGVycm9yIG1lc3NhZ2VzIGZvciB0aGUgcmVzdCBvZiB0aGUgbm9kZS5qcy9jcnlwdG8gYXBpLlxuO1tcbiAgJ2NyZWF0ZUNyZWRlbnRpYWxzJ1xuXS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gIGV4cG9ydHNbbmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFtcbiAgICAgICdzb3JyeSwgJyArIG5hbWUgKyAnIGlzIG5vdCBpbXBsZW1lbnRlZCB5ZXQnLFxuICAgICAgJ3dlIGFjY2VwdCBwdWxsIHJlcXVlc3RzJyxcbiAgICAgICdodHRwczovL2dpdGh1Yi5jb20vY3J5cHRvLWJyb3dzZXJpZnkvY3J5cHRvLWJyb3dzZXJpZnknXG4gICAgXS5qb2luKCdcXG4nKSlcbiAgfVxufSlcbiIsImV4cG9ydHMucHVibGljRW5jcnlwdCA9IHJlcXVpcmUoJy4vcHVibGljRW5jcnlwdCcpO1xuZXhwb3J0cy5wcml2YXRlRGVjcnlwdCA9IHJlcXVpcmUoJy4vcHJpdmF0ZURlY3J5cHQnKTtcblxuZXhwb3J0cy5wcml2YXRlRW5jcnlwdCA9IGZ1bmN0aW9uIHByaXZhdGVFbmNyeXB0KGtleSwgYnVmKSB7XG4gIHJldHVybiBleHBvcnRzLnB1YmxpY0VuY3J5cHQoa2V5LCBidWYsIHRydWUpO1xufTtcblxuZXhwb3J0cy5wdWJsaWNEZWNyeXB0ID0gZnVuY3Rpb24gcHVibGljRGVjcnlwdChrZXksIGJ1Zikge1xuICByZXR1cm4gZXhwb3J0cy5wcml2YXRlRGVjcnlwdChrZXksIGJ1ZiwgdHJ1ZSk7XG59OyIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBwYXJzZUtleXMgPSByZXF1aXJlKCdwYXJzZS1hc24xJyk7XG52YXIgcmFuZG9tQnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpO1xudmFyIGNyZWF0ZUhhc2ggPSByZXF1aXJlKCdjcmVhdGUtaGFzaCcpO1xudmFyIG1nZiA9IHJlcXVpcmUoJy4vbWdmJyk7XG52YXIgeG9yID0gcmVxdWlyZSgnLi94b3InKTtcbnZhciBibiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgd2l0aFB1YmxpYyA9IHJlcXVpcmUoJy4vd2l0aFB1YmxpYycpO1xudmFyIGNydCA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktcnNhJyk7XG5cbnZhciBjb25zdGFudHMgPSB7XG4gIFJTQV9QS0NTMV9PQUVQX1BBRERJTkc6IDQsXG4gIFJTQV9QS0NTMV9QQURESU46IDEsXG4gIFJTQV9OT19QQURESU5HOiAzXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHB1YmxpY0VuY3J5cHQocHVibGljX2tleSwgbXNnLCByZXZlcnNlKSB7XG4gIHZhciBwYWRkaW5nO1xuICBpZiAocHVibGljX2tleS5wYWRkaW5nKSB7XG4gICAgcGFkZGluZyA9IHB1YmxpY19rZXkucGFkZGluZztcbiAgfSBlbHNlIGlmIChyZXZlcnNlKSB7XG4gICAgcGFkZGluZyA9IDE7XG4gIH0gZWxzZSB7XG4gICAgcGFkZGluZyA9IDQ7XG4gIH1cbiAgdmFyIGtleSA9IHBhcnNlS2V5cyhwdWJsaWNfa2V5KTtcbiAgdmFyIHBhZGRlZE1zZztcbiAgaWYgKHBhZGRpbmcgPT09IDQpIHtcbiAgICBwYWRkZWRNc2cgPSBvYWVwKGtleSwgbXNnKTtcbiAgfSBlbHNlIGlmIChwYWRkaW5nID09PSAxKSB7XG4gICAgcGFkZGVkTXNnID0gcGtjczEoa2V5LCBtc2csIHJldmVyc2UpO1xuICB9IGVsc2UgaWYgKHBhZGRpbmcgPT09IDMpIHtcbiAgICBwYWRkZWRNc2cgPSBuZXcgYm4obXNnKTtcbiAgICBpZiAocGFkZGVkTXNnLmNtcChrZXkubW9kdWx1cykgPj0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdkYXRhIHRvbyBsb25nIGZvciBtb2R1bHVzJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBwYWRkaW5nJyk7XG4gIH1cbiAgaWYgKHJldmVyc2UpIHtcbiAgICByZXR1cm4gY3J0KHBhZGRlZE1zZywga2V5KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gd2l0aFB1YmxpYyhwYWRkZWRNc2csIGtleSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIG9hZXAoa2V5LCBtc2cpe1xuICB2YXIgayA9IGtleS5tb2R1bHVzLmJ5dGVMZW5ndGgoKTtcbiAgdmFyIG1MZW4gPSBtc2cubGVuZ3RoO1xuICB2YXIgaUhhc2ggPSBjcmVhdGVIYXNoKCdzaGExJykudXBkYXRlKG5ldyBCdWZmZXIoJycpKS5kaWdlc3QoKTtcbiAgdmFyIGhMZW4gPSBpSGFzaC5sZW5ndGg7XG4gIHZhciBoTGVuMiA9IDIgKiBoTGVuO1xuICBpZiAobUxlbiA+IGsgLSBoTGVuMiAtIDIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ21lc3NhZ2UgdG9vIGxvbmcnKTtcbiAgfVxuICB2YXIgcHMgPSBuZXcgQnVmZmVyKGsgLSBtTGVuIC0gaExlbjIgLSAyKTtcbiAgcHMuZmlsbCgwKTtcbiAgdmFyIGRibGVuID0gayAtIGhMZW4gLSAxO1xuICB2YXIgc2VlZCA9IHJhbmRvbUJ5dGVzKGhMZW4pO1xuICB2YXIgbWFza2VkRGIgPSB4b3IoQnVmZmVyLmNvbmNhdChbaUhhc2gsIHBzLCBuZXcgQnVmZmVyKFsxXSksIG1zZ10sIGRibGVuKSwgbWdmKHNlZWQsIGRibGVuKSk7XG4gIHZhciBtYXNrZWRTZWVkID0geG9yKHNlZWQsIG1nZihtYXNrZWREYiwgaExlbikpO1xuICByZXR1cm4gbmV3IGJuKEJ1ZmZlci5jb25jYXQoW25ldyBCdWZmZXIoWzBdKSwgbWFza2VkU2VlZCwgbWFza2VkRGJdLCBrKSk7XG59XG5mdW5jdGlvbiBwa2NzMShrZXksIG1zZywgcmV2ZXJzZSl7XG4gIHZhciBtTGVuID0gbXNnLmxlbmd0aDtcbiAgdmFyIGsgPSBrZXkubW9kdWx1cy5ieXRlTGVuZ3RoKCk7XG4gIGlmIChtTGVuID4gayAtIDExKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdtZXNzYWdlIHRvbyBsb25nJyk7XG4gIH1cbiAgdmFyIHBzO1xuICBpZiAocmV2ZXJzZSkge1xuICAgIHBzID0gbmV3IEJ1ZmZlcihrIC0gbUxlbiAtIDMpO1xuICAgIHBzLmZpbGwoMHhmZik7XG4gIH0gZWxzZSB7XG4gICAgcHMgPSBub25aZXJvKGsgLSBtTGVuIC0gMyk7XG4gIH1cbiAgcmV0dXJuIG5ldyBibihCdWZmZXIuY29uY2F0KFtuZXcgQnVmZmVyKFswLCByZXZlcnNlPzE6Ml0pLCBwcywgbmV3IEJ1ZmZlcihbMF0pLCBtc2ddLCBrKSk7XG59XG5mdW5jdGlvbiBub25aZXJvKGxlbiwgY3J5cHRvKSB7XG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKGxlbik7XG4gIHZhciBpID0gMDtcbiAgdmFyIGNhY2hlID0gcmFuZG9tQnl0ZXMobGVuKjIpO1xuICB2YXIgY3VyID0gMDtcbiAgdmFyIG51bTtcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICBpZiAoY3VyID09PSBjYWNoZS5sZW5ndGgpIHtcbiAgICAgIGNhY2hlID0gcmFuZG9tQnl0ZXMobGVuKjIpO1xuICAgICAgY3VyID0gMDtcbiAgICB9XG4gICAgbnVtID0gY2FjaGVbY3VyKytdO1xuICAgIGlmIChudW0pIHtcbiAgICAgIG91dFtpKytdID0gbnVtO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb3V0O1xufVxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZjSFZpYkdsakxXVnVZM0o1Y0hRdmNIVmliR2xqUlc1amNubHdkQzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWRtRnlJSEJoY25ObFMyVjVjeUE5SUhKbGNYVnBjbVVvSjNCaGNuTmxMV0Z6YmpFbktUdGNiblpoY2lCeVlXNWtiMjFDZVhSbGN5QTlJSEpsY1hWcGNtVW9KM0poYm1SdmJXSjVkR1Z6SnlrN1hHNTJZWElnWTNKbFlYUmxTR0Z6YUNBOUlISmxjWFZwY21Vb0oyTnlaV0YwWlMxb1lYTm9KeWs3WEc1MllYSWdiV2RtSUQwZ2NtVnhkV2x5WlNnbkxpOXRaMlluS1R0Y2JuWmhjaUI0YjNJZ1BTQnlaWEYxYVhKbEtDY3VMM2h2Y2ljcE8xeHVkbUZ5SUdKdUlEMGdjbVZ4ZFdseVpTZ25ZbTR1YW5NbktUdGNiblpoY2lCM2FYUm9VSFZpYkdsaklEMGdjbVZ4ZFdseVpTZ25MaTkzYVhSb1VIVmliR2xqSnlrN1hHNTJZWElnWTNKMElEMGdjbVZ4ZFdseVpTZ25Zbkp2ZDNObGNtbG1lUzF5YzJFbktUdGNibHh1ZG1GeUlHTnZibk4wWVc1MGN5QTlJSHRjYmlBZ1VsTkJYMUJMUTFNeFgwOUJSVkJmVUVGRVJFbE9Sem9nTkN4Y2JpQWdVbE5CWDFCTFExTXhYMUJCUkVSSlRqb2dNU3hjYmlBZ1VsTkJYMDVQWDFCQlJFUkpUa2M2SUROY2JuMDdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnY0hWaWJHbGpSVzVqY25sd2RDaHdkV0pzYVdOZmEyVjVMQ0J0YzJjc0lISmxkbVZ5YzJVcElIdGNiaUFnZG1GeUlIQmhaR1JwYm1jN1hHNGdJR2xtSUNod2RXSnNhV05mYTJWNUxuQmhaR1JwYm1jcElIdGNiaUFnSUNCd1lXUmthVzVuSUQwZ2NIVmliR2xqWDJ0bGVTNXdZV1JrYVc1bk8xeHVJQ0I5SUdWc2MyVWdhV1lnS0hKbGRtVnljMlVwSUh0Y2JpQWdJQ0J3WVdSa2FXNW5JRDBnTVR0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNCd1lXUmthVzVuSUQwZ05EdGNiaUFnZlZ4dUlDQjJZWElnYTJWNUlEMGdjR0Z5YzJWTFpYbHpLSEIxWW14cFkxOXJaWGtwTzF4dUlDQjJZWElnY0dGa1pHVmtUWE5uTzF4dUlDQnBaaUFvY0dGa1pHbHVaeUE5UFQwZ05Da2dlMXh1SUNBZ0lIQmhaR1JsWkUxelp5QTlJRzloWlhBb2EyVjVMQ0J0YzJjcE8xeHVJQ0I5SUdWc2MyVWdhV1lnS0hCaFpHUnBibWNnUFQwOUlERXBJSHRjYmlBZ0lDQndZV1JrWldSTmMyY2dQU0J3YTJOek1TaHJaWGtzSUcxelp5d2djbVYyWlhKelpTazdYRzRnSUgwZ1pXeHpaU0JwWmlBb2NHRmtaR2x1WnlBOVBUMGdNeWtnZTF4dUlDQWdJSEJoWkdSbFpFMXpaeUE5SUc1bGR5QmliaWh0YzJjcE8xeHVJQ0FnSUdsbUlDaHdZV1JrWldSTmMyY3VZMjF3S0d0bGVTNXRiMlIxYkhWektTQStQU0F3S1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjJSaGRHRWdkRzl2SUd4dmJtY2dabTl5SUcxdlpIVnNkWE1uS1R0Y2JpQWdJQ0I5WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2QxYm10dWIzZHVJSEJoWkdScGJtY25LVHRjYmlBZ2ZWeHVJQ0JwWmlBb2NtVjJaWEp6WlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJqY25Rb2NHRmtaR1ZrVFhObkxDQnJaWGtwTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhKbGRIVnliaUIzYVhSb1VIVmliR2xqS0hCaFpHUmxaRTF6Wnl3Z2EyVjVLVHRjYmlBZ2ZWeHVmVHRjYmx4dVpuVnVZM1JwYjI0Z2IyRmxjQ2hyWlhrc0lHMXpaeWw3WEc0Z0lIWmhjaUJySUQwZ2EyVjVMbTF2WkhWc2RYTXVZbmwwWlV4bGJtZDBhQ2dwTzF4dUlDQjJZWElnYlV4bGJpQTlJRzF6Wnk1c1pXNW5kR2c3WEc0Z0lIWmhjaUJwU0dGemFDQTlJR055WldGMFpVaGhjMmdvSjNOb1lURW5LUzUxY0dSaGRHVW9ibVYzSUVKMVptWmxjaWduSnlrcExtUnBaMlZ6ZENncE8xeHVJQ0IyWVhJZ2FFeGxiaUE5SUdsSVlYTm9MbXhsYm1kMGFEdGNiaUFnZG1GeUlHaE1aVzR5SUQwZ01pQXFJR2hNWlc0N1hHNGdJR2xtSUNodFRHVnVJRDRnYXlBdElHaE1aVzR5SUMwZ01pa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnbmJXVnpjMkZuWlNCMGIyOGdiRzl1WnljcE8xeHVJQ0I5WEc0Z0lIWmhjaUJ3Y3lBOUlHNWxkeUJDZFdabVpYSW9heUF0SUcxTVpXNGdMU0JvVEdWdU1pQXRJRElwTzF4dUlDQndjeTVtYVd4c0tEQXBPMXh1SUNCMllYSWdaR0pzWlc0Z1BTQnJJQzBnYUV4bGJpQXRJREU3WEc0Z0lIWmhjaUJ6WldWa0lEMGdjbUZ1Wkc5dFFubDBaWE1vYUV4bGJpazdYRzRnSUhaaGNpQnRZWE5yWldSRVlpQTlJSGh2Y2loQ2RXWm1aWEl1WTI5dVkyRjBLRnRwU0dGemFDd2djSE1zSUc1bGR5QkNkV1ptWlhJb1d6RmRLU3dnYlhOblhTd2daR0pzWlc0cExDQnRaMllvYzJWbFpDd2daR0pzWlc0cEtUdGNiaUFnZG1GeUlHMWhjMnRsWkZObFpXUWdQU0I0YjNJb2MyVmxaQ3dnYldkbUtHMWhjMnRsWkVSaUxDQm9UR1Z1S1NrN1hHNGdJSEpsZEhWeWJpQnVaWGNnWW00b1FuVm1abVZ5TG1OdmJtTmhkQ2hiYm1WM0lFSjFabVpsY2loYk1GMHBMQ0J0WVhOclpXUlRaV1ZrTENCdFlYTnJaV1JFWWwwc0lHc3BLVHRjYm4xY2JtWjFibU4wYVc5dUlIQnJZM014S0d0bGVTd2diWE5uTENCeVpYWmxjbk5sS1h0Y2JpQWdkbUZ5SUcxTVpXNGdQU0J0YzJjdWJHVnVaM1JvTzF4dUlDQjJZWElnYXlBOUlHdGxlUzV0YjJSMWJIVnpMbUo1ZEdWTVpXNW5kR2dvS1R0Y2JpQWdhV1lnS0cxTVpXNGdQaUJySUMwZ01URXBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oyMWxjM05oWjJVZ2RHOXZJR3h2Ym1jbktUdGNiaUFnZlZ4dUlDQjJZWElnY0hNN1hHNGdJR2xtSUNoeVpYWmxjbk5sS1NCN1hHNGdJQ0FnY0hNZ1BTQnVaWGNnUW5WbVptVnlLR3NnTFNCdFRHVnVJQzBnTXlrN1hHNGdJQ0FnY0hNdVptbHNiQ2d3ZUdabUtUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQndjeUE5SUc1dmJscGxjbThvYXlBdElHMU1aVzRnTFNBektUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z2JtVjNJR0p1S0VKMVptWmxjaTVqYjI1allYUW9XMjVsZHlCQ2RXWm1aWElvV3pBc0lISmxkbVZ5YzJVL01Ub3lYU2tzSUhCekxDQnVaWGNnUW5WbVptVnlLRnN3WFNrc0lHMXpaMTBzSUdzcEtUdGNibjFjYm1aMWJtTjBhVzl1SUc1dmJscGxjbThvYkdWdUxDQmpjbmx3ZEc4cElIdGNiaUFnZG1GeUlHOTFkQ0E5SUc1bGR5QkNkV1ptWlhJb2JHVnVLVHRjYmlBZ2RtRnlJR2tnUFNBd08xeHVJQ0IyWVhJZ1kyRmphR1VnUFNCeVlXNWtiMjFDZVhSbGN5aHNaVzRxTWlrN1hHNGdJSFpoY2lCamRYSWdQU0F3TzF4dUlDQjJZWElnYm5WdE8xeHVJQ0IzYUdsc1pTQW9hU0E4SUd4bGJpa2dlMXh1SUNBZ0lHbG1JQ2hqZFhJZ1BUMDlJR05oWTJobExteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ1kyRmphR1VnUFNCeVlXNWtiMjFDZVhSbGN5aHNaVzRxTWlrN1hHNGdJQ0FnSUNCamRYSWdQU0F3TzF4dUlDQWdJSDFjYmlBZ0lDQnVkVzBnUFNCallXTm9aVnRqZFhJcksxMDdYRzRnSUNBZ2FXWWdLRzUxYlNrZ2UxeHVJQ0FnSUNBZ2IzVjBXMmtySzEwZ1BTQnVkVzA3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnZkWFE3WEc1OUlsMTkiLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG52YXIgcGFyc2VLZXlzID0gcmVxdWlyZSgncGFyc2UtYXNuMScpO1xudmFyIG1nZiA9IHJlcXVpcmUoJy4vbWdmJyk7XG52YXIgeG9yID0gcmVxdWlyZSgnLi94b3InKTtcbnZhciBibiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgY3J0ID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1yc2EnKTtcbnZhciBjcmVhdGVIYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKTtcbnZhciB3aXRoUHVibGljID0gcmVxdWlyZSgnLi93aXRoUHVibGljJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHByaXZhdGVEZWNyeXB0KHByaXZhdGVfa2V5LCBlbmMsIHJldmVyc2UpIHtcbiAgdmFyIHBhZGRpbmc7XG4gIGlmIChwcml2YXRlX2tleS5wYWRkaW5nKSB7XG4gICAgcGFkZGluZyA9IHByaXZhdGVfa2V5LnBhZGRpbmc7XG4gIH0gZWxzZSBpZiAocmV2ZXJzZSkge1xuICAgIHBhZGRpbmcgPSAxO1xuICB9IGVsc2Uge1xuICAgIHBhZGRpbmcgPSA0O1xuICB9XG4gIFxuICB2YXIga2V5ID0gcGFyc2VLZXlzKHByaXZhdGVfa2V5KTtcbiAgdmFyIGsgPSBrZXkubW9kdWx1cy5ieXRlTGVuZ3RoKCk7XG4gIGlmIChlbmMubGVuZ3RoID4gayB8fCBuZXcgYm4oZW5jKS5jbXAoa2V5Lm1vZHVsdXMpID49IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlY3J5cHRpb24gZXJyb3InKTtcbiAgfVxuICB2YXIgbXNnO1xuICBpZiAocmV2ZXJzZSkge1xuICAgIG1zZyA9IHdpdGhQdWJsaWMobmV3IGJuKGVuYyksIGtleSk7XG4gIH0gZWxzZSB7XG4gICAgbXNnID0gY3J0KGVuYywga2V5KTtcbiAgfVxuICB2YXIgekJ1ZmZlciA9IG5ldyBCdWZmZXIoayAtIG1zZy5sZW5ndGgpO1xuICB6QnVmZmVyLmZpbGwoMCk7XG4gIG1zZyA9IEJ1ZmZlci5jb25jYXQoW3pCdWZmZXIsIG1zZ10sIGspO1xuICBpZiAocGFkZGluZyA9PT0gNCkge1xuICAgIHJldHVybiBvYWVwKGtleSwgbXNnKTtcbiAgfSBlbHNlIGlmIChwYWRkaW5nID09PSAxKSB7XG4gICAgcmV0dXJuIHBrY3MxKGtleSwgbXNnLCByZXZlcnNlKTtcbiAgfSBlbHNlIGlmIChwYWRkaW5nID09PSAzKSB7XG4gICAgcmV0dXJuIG1zZztcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gcGFkZGluZycpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBvYWVwKGtleSwgbXNnKXtcbiAgdmFyIG4gPSBrZXkubW9kdWx1cztcbiAgdmFyIGsgPSBrZXkubW9kdWx1cy5ieXRlTGVuZ3RoKCk7XG4gIHZhciBtTGVuID0gbXNnLmxlbmd0aDtcbiAgdmFyIGlIYXNoID0gY3JlYXRlSGFzaCgnc2hhMScpLnVwZGF0ZShuZXcgQnVmZmVyKCcnKSkuZGlnZXN0KCk7XG4gIHZhciBoTGVuID0gaUhhc2gubGVuZ3RoO1xuICB2YXIgaExlbjIgPSAyICogaExlbjtcbiAgaWYgKG1zZ1swXSAhPT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVjcnlwdGlvbiBlcnJvcicpO1xuICB9XG4gIHZhciBtYXNrZWRTZWVkID0gbXNnLnNsaWNlKDEsIGhMZW4gKyAxKTtcbiAgdmFyIG1hc2tlZERiID0gIG1zZy5zbGljZShoTGVuICsgMSk7XG4gIHZhciBzZWVkID0geG9yKG1hc2tlZFNlZWQsIG1nZihtYXNrZWREYiwgaExlbikpO1xuICB2YXIgZGIgPSB4b3IobWFza2VkRGIsIG1nZihzZWVkLCBrIC0gaExlbiAtIDEpKTtcbiAgaWYgKGNvbXBhcmUoaUhhc2gsIGRiLnNsaWNlKDAsIGhMZW4pKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVjcnlwdGlvbiBlcnJvcicpO1xuICB9XG4gIHZhciBpID0gaExlbjtcbiAgd2hpbGUgKGRiW2ldID09PSAwKSB7XG4gICAgaSsrO1xuICB9XG4gIGlmIChkYltpKytdICE9PSAxKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdkZWNyeXB0aW9uIGVycm9yJyk7XG4gIH1cbiAgcmV0dXJuIGRiLnNsaWNlKGkpO1xufVxuXG5mdW5jdGlvbiBwa2NzMShrZXksIG1zZywgcmV2ZXJzZSl7XG4gIHZhciBwMSA9IG1zZy5zbGljZSgwLCAyKTtcbiAgdmFyIGkgPSAyO1xuICB2YXIgc3RhdHVzID0gMDtcbiAgd2hpbGUgKG1zZ1tpKytdICE9PSAwKSB7XG4gICAgaWYgKGkgPj0gbXNnLmxlbmd0aCkge1xuICAgICAgc3RhdHVzKys7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgdmFyIHBzID0gbXNnLnNsaWNlKDIsIGkgLSAxKTtcbiAgdmFyIHAyID0gbXNnLnNsaWNlKGkgLSAxLCBpKTtcblxuICBpZiAoKHAxLnRvU3RyaW5nKCdoZXgnKSAhPT0gJzAwMDInICYmICFyZXZlcnNlKSB8fCAocDEudG9TdHJpbmcoJ2hleCcpICE9PSAnMDAwMScgJiYgcmV2ZXJzZSkpe1xuICAgIHN0YXR1cysrO1xuICB9XG4gIGlmIChwcy5sZW5ndGggPCA4KSB7XG4gICAgc3RhdHVzKys7XG4gIH1cbiAgaWYgKHN0YXR1cykge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVjcnlwdGlvbiBlcnJvcicpO1xuICB9XG4gIHJldHVybiAgbXNnLnNsaWNlKGkpO1xufVxuZnVuY3Rpb24gY29tcGFyZShhLCBiKXtcbiAgYSA9IG5ldyBCdWZmZXIoYSk7XG4gIGIgPSBuZXcgQnVmZmVyKGIpO1xuICB2YXIgZGlmID0gMDtcbiAgdmFyIGxlbiA9IGEubGVuZ3RoO1xuICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgZGlmKys7XG4gICAgbGVuID0gTWF0aC5taW4oYS5sZW5ndGgsIGIubGVuZ3RoKTtcbiAgfVxuICB2YXIgaSA9IC0xO1xuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgZGlmICs9IChhW2ldIF4gYltpXSk7XG4gIH1cbiAgcmV0dXJuIGRpZjtcbn1cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12Y0hWaWJHbGpMV1Z1WTNKNWNIUXZjSEpwZG1GMFpVUmxZM0o1Y0hRdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlIQmhjbk5sUzJWNWN5QTlJSEpsY1hWcGNtVW9KM0JoY25ObExXRnpiakVuS1R0Y2JuWmhjaUJ0WjJZZ1BTQnlaWEYxYVhKbEtDY3VMMjFuWmljcE8xeHVkbUZ5SUhodmNpQTlJSEpsY1hWcGNtVW9KeTR2ZUc5eUp5azdYRzUyWVhJZ1ltNGdQU0J5WlhGMWFYSmxLQ2RpYmk1cWN5Y3BPMXh1ZG1GeUlHTnlkQ0E5SUhKbGNYVnBjbVVvSjJKeWIzZHpaWEpwWm5rdGNuTmhKeWs3WEc1MllYSWdZM0psWVhSbFNHRnphQ0E5SUhKbGNYVnBjbVVvSjJOeVpXRjBaUzFvWVhOb0p5azdYRzUyWVhJZ2QybDBhRkIxWW14cFl5QTlJSEpsY1hWcGNtVW9KeTR2ZDJsMGFGQjFZbXhwWXljcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpQndjbWwyWVhSbFJHVmpjbmx3ZENod2NtbDJZWFJsWDJ0bGVTd2daVzVqTENCeVpYWmxjbk5sS1NCN1hHNGdJSFpoY2lCd1lXUmthVzVuTzF4dUlDQnBaaUFvY0hKcGRtRjBaVjlyWlhrdWNHRmtaR2x1WnlrZ2UxeHVJQ0FnSUhCaFpHUnBibWNnUFNCd2NtbDJZWFJsWDJ0bGVTNXdZV1JrYVc1bk8xeHVJQ0I5SUdWc2MyVWdhV1lnS0hKbGRtVnljMlVwSUh0Y2JpQWdJQ0J3WVdSa2FXNW5JRDBnTVR0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNCd1lXUmthVzVuSUQwZ05EdGNiaUFnZlZ4dUlDQmNiaUFnZG1GeUlHdGxlU0E5SUhCaGNuTmxTMlY1Y3lod2NtbDJZWFJsWDJ0bGVTazdYRzRnSUhaaGNpQnJJRDBnYTJWNUxtMXZaSFZzZFhNdVlubDBaVXhsYm1kMGFDZ3BPMXh1SUNCcFppQW9aVzVqTG14bGJtZDBhQ0ErSUdzZ2ZId2dibVYzSUdKdUtHVnVZeWt1WTIxd0tHdGxlUzV0YjJSMWJIVnpLU0ErUFNBd0tTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Nka1pXTnllWEIwYVc5dUlHVnljbTl5SnlrN1hHNGdJSDFjYmlBZ2RtRnlJRzF6Wnp0Y2JpQWdhV1lnS0hKbGRtVnljMlVwSUh0Y2JpQWdJQ0J0YzJjZ1BTQjNhWFJvVUhWaWJHbGpLRzVsZHlCaWJpaGxibU1wTENCclpYa3BPMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJRzF6WnlBOUlHTnlkQ2hsYm1Nc0lHdGxlU2s3WEc0Z0lIMWNiaUFnZG1GeUlIcENkV1ptWlhJZ1BTQnVaWGNnUW5WbVptVnlLR3NnTFNCdGMyY3ViR1Z1WjNSb0tUdGNiaUFnZWtKMVptWmxjaTVtYVd4c0tEQXBPMXh1SUNCdGMyY2dQU0JDZFdabVpYSXVZMjl1WTJGMEtGdDZRblZtWm1WeUxDQnRjMmRkTENCcktUdGNiaUFnYVdZZ0tIQmhaR1JwYm1jZ1BUMDlJRFFwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdiMkZsY0NoclpYa3NJRzF6WnlrN1hHNGdJSDBnWld4elpTQnBaaUFvY0dGa1pHbHVaeUE5UFQwZ01Ta2dlMXh1SUNBZ0lISmxkSFZ5YmlCd2EyTnpNU2hyWlhrc0lHMXpaeXdnY21WMlpYSnpaU2s3WEc0Z0lIMGdaV3h6WlNCcFppQW9jR0ZrWkdsdVp5QTlQVDBnTXlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ0YzJjN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkMWJtdHViM2R1SUhCaFpHUnBibWNuS1R0Y2JpQWdmVnh1ZlR0Y2JseHVablZ1WTNScGIyNGdiMkZsY0NoclpYa3NJRzF6WnlsN1hHNGdJSFpoY2lCdUlEMGdhMlY1TG0xdlpIVnNkWE03WEc0Z0lIWmhjaUJySUQwZ2EyVjVMbTF2WkhWc2RYTXVZbmwwWlV4bGJtZDBhQ2dwTzF4dUlDQjJZWElnYlV4bGJpQTlJRzF6Wnk1c1pXNW5kR2c3WEc0Z0lIWmhjaUJwU0dGemFDQTlJR055WldGMFpVaGhjMmdvSjNOb1lURW5LUzUxY0dSaGRHVW9ibVYzSUVKMVptWmxjaWduSnlrcExtUnBaMlZ6ZENncE8xeHVJQ0IyWVhJZ2FFeGxiaUE5SUdsSVlYTm9MbXhsYm1kMGFEdGNiaUFnZG1GeUlHaE1aVzR5SUQwZ01pQXFJR2hNWlc0N1hHNGdJR2xtSUNodGMyZGJNRjBnSVQwOUlEQXBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oyUmxZM0o1Y0hScGIyNGdaWEp5YjNJbktUdGNiaUFnZlZ4dUlDQjJZWElnYldGemEyVmtVMlZsWkNBOUlHMXpaeTV6YkdsalpTZ3hMQ0JvVEdWdUlDc2dNU2s3WEc0Z0lIWmhjaUJ0WVhOclpXUkVZaUE5SUNCdGMyY3VjMnhwWTJVb2FFeGxiaUFySURFcE8xeHVJQ0IyWVhJZ2MyVmxaQ0E5SUhodmNpaHRZWE5yWldSVFpXVmtMQ0J0WjJZb2JXRnphMlZrUkdJc0lHaE1aVzRwS1R0Y2JpQWdkbUZ5SUdSaUlEMGdlRzl5S0cxaGMydGxaRVJpTENCdFoyWW9jMlZsWkN3Z2F5QXRJR2hNWlc0Z0xTQXhLU2s3WEc0Z0lHbG1JQ2hqYjIxd1lYSmxLR2xJWVhOb0xDQmtZaTV6YkdsalpTZ3dMQ0JvVEdWdUtTa3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oyUmxZM0o1Y0hScGIyNGdaWEp5YjNJbktUdGNiaUFnZlZ4dUlDQjJZWElnYVNBOUlHaE1aVzQ3WEc0Z0lIZG9hV3hsSUNoa1lsdHBYU0E5UFQwZ01Da2dlMXh1SUNBZ0lHa3JLenRjYmlBZ2ZWeHVJQ0JwWmlBb1pHSmJhU3NyWFNBaFBUMGdNU2tnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25aR1ZqY25sd2RHbHZiaUJsY25KdmNpY3BPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQmtZaTV6YkdsalpTaHBLVHRjYm4xY2JseHVablZ1WTNScGIyNGdjR3RqY3pFb2EyVjVMQ0J0YzJjc0lISmxkbVZ5YzJVcGUxeHVJQ0IyWVhJZ2NERWdQU0J0YzJjdWMyeHBZMlVvTUN3Z01pazdYRzRnSUhaaGNpQnBJRDBnTWp0Y2JpQWdkbUZ5SUhOMFlYUjFjeUE5SURBN1hHNGdJSGRvYVd4bElDaHRjMmRiYVNzclhTQWhQVDBnTUNrZ2UxeHVJQ0FnSUdsbUlDaHBJRDQ5SUcxelp5NXNaVzVuZEdncElIdGNiaUFnSUNBZ0lITjBZWFIxY3lzck8xeHVJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJSFpoY2lCd2N5QTlJRzF6Wnk1emJHbGpaU2d5TENCcElDMGdNU2s3WEc0Z0lIWmhjaUJ3TWlBOUlHMXpaeTV6YkdsalpTaHBJQzBnTVN3Z2FTazdYRzVjYmlBZ2FXWWdLQ2h3TVM1MGIxTjBjbWx1WnlnbmFHVjRKeWtnSVQwOUlDY3dNREF5SnlBbUppQWhjbVYyWlhKelpTa2dmSHdnS0hBeExuUnZVM1J5YVc1bktDZG9aWGduS1NBaFBUMGdKekF3TURFbklDWW1JSEpsZG1WeWMyVXBLWHRjYmlBZ0lDQnpkR0YwZFhNckt6dGNiaUFnZlZ4dUlDQnBaaUFvY0hNdWJHVnVaM1JvSUR3Z09Da2dlMXh1SUNBZ0lITjBZWFIxY3lzck8xeHVJQ0I5WEc0Z0lHbG1JQ2h6ZEdGMGRYTXBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oyUmxZM0o1Y0hScGIyNGdaWEp5YjNJbktUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z0lHMXpaeTV6YkdsalpTaHBLVHRjYm4xY2JtWjFibU4wYVc5dUlHTnZiWEJoY21Vb1lTd2dZaWw3WEc0Z0lHRWdQU0J1WlhjZ1FuVm1abVZ5S0dFcE8xeHVJQ0JpSUQwZ2JtVjNJRUoxWm1abGNpaGlLVHRjYmlBZ2RtRnlJR1JwWmlBOUlEQTdYRzRnSUhaaGNpQnNaVzRnUFNCaExteGxibWQwYUR0Y2JpQWdhV1lnS0dFdWJHVnVaM1JvSUNFOVBTQmlMbXhsYm1kMGFDa2dlMXh1SUNBZ0lHUnBaaXNyTzF4dUlDQWdJR3hsYmlBOUlFMWhkR2d1YldsdUtHRXViR1Z1WjNSb0xDQmlMbXhsYm1kMGFDazdYRzRnSUgxY2JpQWdkbUZ5SUdrZ1BTQXRNVHRjYmlBZ2QyaHBiR1VnS0NzcmFTQThJR3hsYmlrZ2UxeHVJQ0FnSUdScFppQXJQU0FvWVZ0cFhTQmVJR0piYVYwcE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCa2FXWTdYRzU5SWwxOSIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geG9yKGEsIGIpIHtcbiAgdmFyIGxlbiA9IGEubGVuZ3RoO1xuICB2YXIgaSA9IC0xO1xuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgYVtpXSBePSBiW2ldO1xuICB9XG4gIHJldHVybiBhXG59OyIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBibiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG5mdW5jdGlvbiB3aXRoUHVibGljKHBhZGRlZE1zZywga2V5KSB7XG4gIHJldHVybiBuZXcgQnVmZmVyKHBhZGRlZE1zZ1xuICAgIC50b1JlZChibi5tb250KGtleS5tb2R1bHVzKSlcbiAgICAucmVkUG93KG5ldyBibihrZXkucHVibGljRXhwb25lbnQpKVxuICAgIC5mcm9tUmVkKClcbiAgICAudG9BcnJheSgpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3aXRoUHVibGljO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZjSFZpYkdsakxXVnVZM0o1Y0hRdmQybDBhRkIxWW14cFl5NXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCaWJpQTlJSEpsY1hWcGNtVW9KMkp1TG1wekp5azdYRzVtZFc1amRHbHZiaUIzYVhSb1VIVmliR2xqS0hCaFpHUmxaRTF6Wnl3Z2EyVjVLU0I3WEc0Z0lISmxkSFZ5YmlCdVpYY2dRblZtWm1WeUtIQmhaR1JsWkUxeloxeHVJQ0FnSUM1MGIxSmxaQ2hpYmk1dGIyNTBLR3RsZVM1dGIyUjFiSFZ6S1NsY2JpQWdJQ0F1Y21Wa1VHOTNLRzVsZHlCaWJpaHJaWGt1Y0hWaWJHbGpSWGh3YjI1bGJuUXBLVnh1SUNBZ0lDNW1jbTl0VW1Wa0tDbGNiaUFnSUNBdWRHOUJjbkpoZVNncEtUdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCM2FYUm9VSFZpYkdsak95SmRmUT09IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xudmFyIGFzbjEgPSByZXF1aXJlKCcuL2FzbjEnKVxudmFyIGFlc2lkID0gcmVxdWlyZSgnLi9hZXNpZC5qc29uJylcbnZhciBmaXhQcm9jID0gcmVxdWlyZSgnLi9maXhQcm9jJylcbnZhciBjaXBoZXJzID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1hZXMnKVxudmFyIGNvbXBhdCA9IHJlcXVpcmUoJ3Bia2RmMicpXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlS2V5c1xuXG5mdW5jdGlvbiBwYXJzZUtleXMgKGJ1ZmZlcikge1xuICB2YXIgcGFzc3dvcmRcbiAgaWYgKHR5cGVvZiBidWZmZXIgPT09ICdvYmplY3QnICYmICFCdWZmZXIuaXNCdWZmZXIoYnVmZmVyKSkge1xuICAgIHBhc3N3b3JkID0gYnVmZmVyLnBhc3NwaHJhc2VcbiAgICBidWZmZXIgPSBidWZmZXIua2V5XG4gIH1cbiAgaWYgKHR5cGVvZiBidWZmZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgYnVmZmVyID0gbmV3IEJ1ZmZlcihidWZmZXIpXG4gIH1cblxuICB2YXIgc3RyaXBwZWQgPSBmaXhQcm9jKGJ1ZmZlciwgcGFzc3dvcmQpXG5cbiAgdmFyIHR5cGUgPSBzdHJpcHBlZC50YWdcbiAgdmFyIGRhdGEgPSBzdHJpcHBlZC5kYXRhXG4gIHZhciBzdWJ0eXBlLCBuZGF0YVxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdQVUJMSUMgS0VZJzpcbiAgICAgIG5kYXRhID0gYXNuMS5QdWJsaWNLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgc3VidHlwZSA9IG5kYXRhLmFsZ29yaXRobS5hbGdvcml0aG0uam9pbignLicpXG4gICAgICBzd2l0Y2ggKHN1YnR5cGUpIHtcbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMTM1NDkuMS4xLjEnOlxuICAgICAgICAgIHJldHVybiBhc24xLlJTQVB1YmxpY0tleS5kZWNvZGUobmRhdGEuc3ViamVjdFB1YmxpY0tleS5kYXRhLCAnZGVyJylcbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMDA0NS4yLjEnOlxuICAgICAgICAgIG5kYXRhLnN1YmplY3RQcml2YXRlS2V5ID0gbmRhdGEuc3ViamVjdFB1YmxpY0tleVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnZWMnLFxuICAgICAgICAgICAgZGF0YTogbmRhdGFcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTAwNDAuNC4xJzpcbiAgICAgICAgICBuZGF0YS5hbGdvcml0aG0ucGFyYW1zLnB1Yl9rZXkgPSBhc24xLkRTQXBhcmFtLmRlY29kZShuZGF0YS5zdWJqZWN0UHVibGljS2V5LmRhdGEsICdkZXInKVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnZHNhJyxcbiAgICAgICAgICAgIGRhdGE6IG5kYXRhLmFsZ29yaXRobS5wYXJhbXNcbiAgICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgaWQgJyArIHN1YnR5cGUpXG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IHR5cGUgJyArIHR5cGUpXG4gICAgY2FzZSAnRU5DUllQVEVEIFBSSVZBVEUgS0VZJzpcbiAgICAgIGRhdGEgPSBhc24xLkVuY3J5cHRlZFByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgZGF0YSA9IGRlY3J5cHQoZGF0YSwgcGFzc3dvcmQpXG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgY2FzZSAnUFJJVkFURSBLRVknOlxuICAgICAgbmRhdGEgPSBhc24xLlByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgc3VidHlwZSA9IG5kYXRhLmFsZ29yaXRobS5hbGdvcml0aG0uam9pbignLicpXG4gICAgICBzd2l0Y2ggKHN1YnR5cGUpIHtcbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMTM1NDkuMS4xLjEnOlxuICAgICAgICAgIHJldHVybiBhc24xLlJTQVByaXZhdGVLZXkuZGVjb2RlKG5kYXRhLnN1YmplY3RQcml2YXRlS2V5LCAnZGVyJylcbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMDA0NS4yLjEnOlxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjdXJ2ZTogbmRhdGEuYWxnb3JpdGhtLmN1cnZlLFxuICAgICAgICAgICAgcHJpdmF0ZUtleTogYXNuMS5FQ1ByaXZhdGVLZXkuZGVjb2RlKG5kYXRhLnN1YmplY3RQcml2YXRlS2V5LCAnZGVyJykucHJpdmF0ZUtleVxuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMDA0MC40LjEnOlxuICAgICAgICAgIG5kYXRhLmFsZ29yaXRobS5wYXJhbXMucHJpdl9rZXkgPSBhc24xLkRTQXBhcmFtLmRlY29kZShuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleSwgJ2RlcicpXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdkc2EnLFxuICAgICAgICAgICAgcGFyYW1zOiBuZGF0YS5hbGdvcml0aG0ucGFyYW1zXG4gICAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IGlkICcgKyBzdWJ0eXBlKVxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSB0eXBlICcgKyB0eXBlKVxuICAgIGNhc2UgJ1JTQSBQVUJMSUMgS0VZJzpcbiAgICAgIHJldHVybiBhc24xLlJTQVB1YmxpY0tleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgY2FzZSAnUlNBIFBSSVZBVEUgS0VZJzpcbiAgICAgIHJldHVybiBhc24xLlJTQVByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgIGNhc2UgJ0RTQSBQUklWQVRFIEtFWSc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnZHNhJyxcbiAgICAgICAgcGFyYW1zOiBhc24xLkRTQVByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgfVxuICAgIGNhc2UgJ0VDIFBSSVZBVEUgS0VZJzpcbiAgICAgIGRhdGEgPSBhc24xLkVDUHJpdmF0ZUtleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjdXJ2ZTogZGF0YS5wYXJhbWV0ZXJzLnZhbHVlLFxuICAgICAgICBwcml2YXRlS2V5OiBkYXRhLnByaXZhdGVLZXlcbiAgICAgIH1cbiAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IHR5cGUgJyArIHR5cGUpXG4gIH1cbn1cbnBhcnNlS2V5cy5zaWduYXR1cmUgPSBhc24xLnNpZ25hdHVyZVxuZnVuY3Rpb24gZGVjcnlwdCAoZGF0YSwgcGFzc3dvcmQpIHtcbiAgdmFyIHNhbHQgPSBkYXRhLmFsZ29yaXRobS5kZWNyeXB0LmtkZS5rZGVwYXJhbXMuc2FsdFxuICB2YXIgaXRlcnMgPSBwYXJzZUludChkYXRhLmFsZ29yaXRobS5kZWNyeXB0LmtkZS5rZGVwYXJhbXMuaXRlcnMudG9TdHJpbmcoKSwgMTApXG4gIHZhciBhbGdvID0gYWVzaWRbZGF0YS5hbGdvcml0aG0uZGVjcnlwdC5jaXBoZXIuYWxnby5qb2luKCcuJyldXG4gIHZhciBpdiA9IGRhdGEuYWxnb3JpdGhtLmRlY3J5cHQuY2lwaGVyLml2XG4gIHZhciBjaXBoZXJUZXh0ID0gZGF0YS5zdWJqZWN0UHJpdmF0ZUtleVxuICB2YXIga2V5bGVuID0gcGFyc2VJbnQoYWxnby5zcGxpdCgnLScpWzFdLCAxMCkgLyA4XG4gIHZhciBrZXkgPSBjb21wYXQucGJrZGYyU3luYyhwYXNzd29yZCwgc2FsdCwgaXRlcnMsIGtleWxlbilcbiAgdmFyIGNpcGhlciA9IGNpcGhlcnMuY3JlYXRlRGVjaXBoZXJpdihhbGdvLCBrZXksIGl2KVxuICB2YXIgb3V0ID0gW11cbiAgb3V0LnB1c2goY2lwaGVyLnVwZGF0ZShjaXBoZXJUZXh0KSlcbiAgb3V0LnB1c2goY2lwaGVyLmZpbmFsKCkpXG4gIHJldHVybiBCdWZmZXIuY29uY2F0KG91dClcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZjSFZpYkdsakxXVnVZM0o1Y0hRdmJtOWtaVjl0YjJSMWJHVnpMM0JoY25ObExXRnpiakV2YVc1a1pYZ3Vhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlHRnpiakVnUFNCeVpYRjFhWEpsS0NjdUwyRnpiakVuS1Z4dWRtRnlJR0ZsYzJsa0lEMGdjbVZ4ZFdseVpTZ25MaTloWlhOcFpDNXFjMjl1SnlsY2JuWmhjaUJtYVhoUWNtOWpJRDBnY21WeGRXbHlaU2duTGk5bWFYaFFjbTlqSnlsY2JuWmhjaUJqYVhCb1pYSnpJRDBnY21WeGRXbHlaU2duWW5KdmQzTmxjbWxtZVMxaFpYTW5LVnh1ZG1GeUlHTnZiWEJoZENBOUlISmxjWFZwY21Vb0ozQmlhMlJtTWljcFhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlIQmhjbk5sUzJWNWMxeHVYRzVtZFc1amRHbHZiaUJ3WVhKelpVdGxlWE1nS0dKMVptWmxjaWtnZTF4dUlDQjJZWElnY0dGemMzZHZjbVJjYmlBZ2FXWWdLSFI1Y0dWdlppQmlkV1ptWlhJZ1BUMDlJQ2R2WW1wbFkzUW5JQ1ltSUNGQ2RXWm1aWEl1YVhOQ2RXWm1aWElvWW5WbVptVnlLU2tnZTF4dUlDQWdJSEJoYzNOM2IzSmtJRDBnWW5WbVptVnlMbkJoYzNOd2FISmhjMlZjYmlBZ0lDQmlkV1ptWlhJZ1BTQmlkV1ptWlhJdWEyVjVYRzRnSUgxY2JpQWdhV1lnS0hSNWNHVnZaaUJpZFdabVpYSWdQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnWW5WbVptVnlJRDBnYm1WM0lFSjFabVpsY2loaWRXWm1aWElwWEc0Z0lIMWNibHh1SUNCMllYSWdjM1J5YVhCd1pXUWdQU0JtYVhoUWNtOWpLR0oxWm1abGNpd2djR0Z6YzNkdmNtUXBYRzVjYmlBZ2RtRnlJSFI1Y0dVZ1BTQnpkSEpwY0hCbFpDNTBZV2RjYmlBZ2RtRnlJR1JoZEdFZ1BTQnpkSEpwY0hCbFpDNWtZWFJoWEc0Z0lIWmhjaUJ6ZFdKMGVYQmxMQ0J1WkdGMFlWeHVJQ0J6ZDJsMFkyZ2dLSFI1Y0dVcElIdGNiaUFnSUNCallYTmxJQ2RRVlVKTVNVTWdTMFZaSnpwY2JpQWdJQ0FnSUc1a1lYUmhJRDBnWVhOdU1TNVFkV0pzYVdOTFpYa3VaR1ZqYjJSbEtHUmhkR0VzSUNka1pYSW5LVnh1SUNBZ0lDQWdjM1ZpZEhsd1pTQTlJRzVrWVhSaExtRnNaMjl5YVhSb2JTNWhiR2R2Y21sMGFHMHVhbTlwYmlnbkxpY3BYRzRnSUNBZ0lDQnpkMmwwWTJnZ0tITjFZblI1Y0dVcElIdGNiaUFnSUNBZ0lDQWdZMkZ6WlNBbk1TNHlMamcwTUM0eE1UTTFORGt1TVM0eExqRW5PbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJoYzI0eExsSlRRVkIxWW14cFkwdGxlUzVrWldOdlpHVW9ibVJoZEdFdWMzVmlhbVZqZEZCMVlteHBZMHRsZVM1a1lYUmhMQ0FuWkdWeUp5bGNiaUFnSUNBZ0lDQWdZMkZ6WlNBbk1TNHlMamcwTUM0eE1EQTBOUzR5TGpFbk9seHVJQ0FnSUNBZ0lDQWdJRzVrWVhSaExuTjFZbXBsWTNSUWNtbDJZWFJsUzJWNUlEMGdibVJoZEdFdWMzVmlhbVZqZEZCMVlteHBZMHRsZVZ4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQW5aV01uTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaR0YwWVRvZ2JtUmhkR0ZjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHTmhjMlVnSnpFdU1pNDROREF1TVRBd05EQXVOQzR4SnpwY2JpQWdJQ0FnSUNBZ0lDQnVaR0YwWVM1aGJHZHZjbWwwYUcwdWNHRnlZVzF6TG5CMVlsOXJaWGtnUFNCaGMyNHhMa1JUUVhCaGNtRnRMbVJsWTI5a1pTaHVaR0YwWVM1emRXSnFaV04wVUhWaWJHbGpTMlY1TG1SaGRHRXNJQ2RrWlhJbktWeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFuWkhOaEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUdSaGRHRTZJRzVrWVhSaExtRnNaMjl5YVhSb2JTNXdZWEpoYlhOY2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1JsWm1GMWJIUTZJSFJvY205M0lHNWxkeUJGY25KdmNpZ25kVzVyYm05M2JpQnJaWGtnYVdRZ0p5QXJJSE4xWW5SNWNHVXBYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0ozVnVhMjV2ZDI0Z2EyVjVJSFI1Y0dVZ0p5QXJJSFI1Y0dVcFhHNGdJQ0FnWTJGelpTQW5SVTVEVWxsUVZFVkVJRkJTU1ZaQlZFVWdTMFZaSnpwY2JpQWdJQ0FnSUdSaGRHRWdQU0JoYzI0eExrVnVZM0o1Y0hSbFpGQnlhWFpoZEdWTFpYa3VaR1ZqYjJSbEtHUmhkR0VzSUNka1pYSW5LVnh1SUNBZ0lDQWdaR0YwWVNBOUlHUmxZM0o1Y0hRb1pHRjBZU3dnY0dGemMzZHZjbVFwWEc0Z0lDQWdJQ0F2THlCbVlXeHNjeUIwYUhKdmRXZG9YRzRnSUNBZ1kyRnpaU0FuVUZKSlZrRlVSU0JMUlZrbk9seHVJQ0FnSUNBZ2JtUmhkR0VnUFNCaGMyNHhMbEJ5YVhaaGRHVkxaWGt1WkdWamIyUmxLR1JoZEdFc0lDZGtaWEluS1Z4dUlDQWdJQ0FnYzNWaWRIbHdaU0E5SUc1a1lYUmhMbUZzWjI5eWFYUm9iUzVoYkdkdmNtbDBhRzB1YW05cGJpZ25MaWNwWEc0Z0lDQWdJQ0J6ZDJsMFkyZ2dLSE4xWW5SNWNHVXBJSHRjYmlBZ0lDQWdJQ0FnWTJGelpTQW5NUzR5TGpnME1DNHhNVE0xTkRrdU1TNHhMakVuT2x4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCaGMyNHhMbEpUUVZCeWFYWmhkR1ZMWlhrdVpHVmpiMlJsS0c1a1lYUmhMbk4xWW1wbFkzUlFjbWwyWVhSbFMyVjVMQ0FuWkdWeUp5bGNiaUFnSUNBZ0lDQWdZMkZ6WlNBbk1TNHlMamcwTUM0eE1EQTBOUzR5TGpFbk9seHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamRYSjJaVG9nYm1SaGRHRXVZV3huYjNKcGRHaHRMbU4xY25abExGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0hKcGRtRjBaVXRsZVRvZ1lYTnVNUzVGUTFCeWFYWmhkR1ZMWlhrdVpHVmpiMlJsS0c1a1lYUmhMbk4xWW1wbFkzUlFjbWwyWVhSbFMyVjVMQ0FuWkdWeUp5a3VjSEpwZG1GMFpVdGxlVnh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1kyRnpaU0FuTVM0eUxqZzBNQzR4TURBME1DNDBMakVuT2x4dUlDQWdJQ0FnSUNBZ0lHNWtZWFJoTG1Gc1oyOXlhWFJvYlM1d1lYSmhiWE11Y0hKcGRsOXJaWGtnUFNCaGMyNHhMa1JUUVhCaGNtRnRMbVJsWTI5a1pTaHVaR0YwWVM1emRXSnFaV04wVUhKcGRtRjBaVXRsZVN3Z0oyUmxjaWNwWEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDZGtjMkVuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjR0Z5WVcxek9pQnVaR0YwWVM1aGJHZHZjbWwwYUcwdWNHRnlZVzF6WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmtaV1poZFd4ME9pQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0ozVnVhMjV2ZDI0Z2EyVjVJR2xrSUNjZ0t5QnpkV0owZVhCbEtWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkMWJtdHViM2R1SUd0bGVTQjBlWEJsSUNjZ0t5QjBlWEJsS1Z4dUlDQWdJR05oYzJVZ0oxSlRRU0JRVlVKTVNVTWdTMFZaSnpwY2JpQWdJQ0FnSUhKbGRIVnliaUJoYzI0eExsSlRRVkIxWW14cFkwdGxlUzVrWldOdlpHVW9aR0YwWVN3Z0oyUmxjaWNwWEc0Z0lDQWdZMkZ6WlNBblVsTkJJRkJTU1ZaQlZFVWdTMFZaSnpwY2JpQWdJQ0FnSUhKbGRIVnliaUJoYzI0eExsSlRRVkJ5YVhaaGRHVkxaWGt1WkdWamIyUmxLR1JoZEdFc0lDZGtaWEluS1Z4dUlDQWdJR05oYzJVZ0owUlRRU0JRVWtsV1FWUkZJRXRGV1NjNlhHNGdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNCMGVYQmxPaUFuWkhOaEp5eGNiaUFnSUNBZ0lDQWdjR0Z5WVcxek9pQmhjMjR4TGtSVFFWQnlhWFpoZEdWTFpYa3VaR1ZqYjJSbEtHUmhkR0VzSUNka1pYSW5LVnh1SUNBZ0lDQWdmVnh1SUNBZ0lHTmhjMlVnSjBWRElGQlNTVlpCVkVVZ1MwVlpKenBjYmlBZ0lDQWdJR1JoZEdFZ1BTQmhjMjR4TGtWRFVISnBkbUYwWlV0bGVTNWtaV052WkdVb1pHRjBZU3dnSjJSbGNpY3BYRzRnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQmpkWEoyWlRvZ1pHRjBZUzV3WVhKaGJXVjBaWEp6TG5aaGJIVmxMRnh1SUNBZ0lDQWdJQ0J3Y21sMllYUmxTMlY1T2lCa1lYUmhMbkJ5YVhaaGRHVkxaWGxjYmlBZ0lDQWdJSDFjYmlBZ0lDQmtaV1poZFd4ME9pQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0ozVnVhMjV2ZDI0Z2EyVjVJSFI1Y0dVZ0p5QXJJSFI1Y0dVcFhHNGdJSDFjYm4xY2JuQmhjbk5sUzJWNWN5NXphV2R1WVhSMWNtVWdQU0JoYzI0eExuTnBaMjVoZEhWeVpWeHVablZ1WTNScGIyNGdaR1ZqY25sd2RDQW9aR0YwWVN3Z2NHRnpjM2R2Y21RcElIdGNiaUFnZG1GeUlITmhiSFFnUFNCa1lYUmhMbUZzWjI5eWFYUm9iUzVrWldOeWVYQjBMbXRrWlM1clpHVndZWEpoYlhNdWMyRnNkRnh1SUNCMllYSWdhWFJsY25NZ1BTQndZWEp6WlVsdWRDaGtZWFJoTG1Gc1oyOXlhWFJvYlM1a1pXTnllWEIwTG10a1pTNXJaR1Z3WVhKaGJYTXVhWFJsY25NdWRHOVRkSEpwYm1jb0tTd2dNVEFwWEc0Z0lIWmhjaUJoYkdkdklEMGdZV1Z6YVdSYlpHRjBZUzVoYkdkdmNtbDBhRzB1WkdWamNubHdkQzVqYVhCb1pYSXVZV3huYnk1cWIybHVLQ2N1SnlsZFhHNGdJSFpoY2lCcGRpQTlJR1JoZEdFdVlXeG5iM0pwZEdodExtUmxZM0o1Y0hRdVkybHdhR1Z5TG1sMlhHNGdJSFpoY2lCamFYQm9aWEpVWlhoMElEMGdaR0YwWVM1emRXSnFaV04wVUhKcGRtRjBaVXRsZVZ4dUlDQjJZWElnYTJWNWJHVnVJRDBnY0dGeWMyVkpiblFvWVd4bmJ5NXpjR3hwZENnbkxTY3BXekZkTENBeE1Da2dMeUE0WEc0Z0lIWmhjaUJyWlhrZ1BTQmpiMjF3WVhRdWNHSnJaR1l5VTNsdVl5aHdZWE56ZDI5eVpDd2djMkZzZEN3Z2FYUmxjbk1zSUd0bGVXeGxiaWxjYmlBZ2RtRnlJR05wY0dobGNpQTlJR05wY0dobGNuTXVZM0psWVhSbFJHVmphWEJvWlhKcGRpaGhiR2R2TENCclpYa3NJR2wyS1Z4dUlDQjJZWElnYjNWMElEMGdXMTFjYmlBZ2IzVjBMbkIxYzJnb1kybHdhR1Z5TG5Wd1pHRjBaU2hqYVhCb1pYSlVaWGgwS1NsY2JpQWdiM1YwTG5CMWMyZ29ZMmx3YUdWeUxtWnBibUZzS0NrcFhHNGdJSEpsZEhWeWJpQkNkV1ptWlhJdVkyOXVZMkYwS0c5MWRDbGNibjFjYmlKZGZRPT0iLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG4vLyBhZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2FwYXRpbC9wZW1zdHJpcFxudmFyIGZpbmRQcm9jID0gL1Byb2MtVHlwZTogNCxFTkNSWVBURURcXHI/XFxuREVLLUluZm86IEFFUy0oKD86MTI4KXwoPzoxOTIpfCg/OjI1NikpLUNCQywoWzAtOUEtSF0rKVxccj9cXG5cXHI/XFxuKFswLTlBLXpcXG5cXHJcXCtcXC9cXD1dKylcXHI/XFxuL21cbnZhciBzdGFydFJlZ2V4ID0gL14tLS0tLUJFR0lOICguKikgS0VZLS0tLS1cXHI/XFxuL21cbnZhciBmdWxsUmVnZXggPSAvXi0tLS0tQkVHSU4gKC4qKSBLRVktLS0tLVxccj9cXG4oWzAtOUEtelxcblxcclxcK1xcL1xcPV0rKVxccj9cXG4tLS0tLUVORCBcXDEgS0VZLS0tLS0kL21cbnZhciBldnAgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpXG52YXIgY2lwaGVycyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzJylcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9rZXksIHBhc3N3b3JkKSB7XG4gIHZhciBrZXkgPSBva2V5LnRvU3RyaW5nKClcbiAgdmFyIG1hdGNoID0ga2V5Lm1hdGNoKGZpbmRQcm9jKVxuICB2YXIgZGVjcnlwdGVkXG4gIGlmICghbWF0Y2gpIHtcbiAgICB2YXIgbWF0Y2gyID0ga2V5Lm1hdGNoKGZ1bGxSZWdleClcbiAgICBkZWNyeXB0ZWQgPSBuZXcgQnVmZmVyKG1hdGNoMlsyXS5yZXBsYWNlKC9cXHI/XFxuL2csICcnKSwgJ2Jhc2U2NCcpXG4gIH0gZWxzZSB7XG4gICAgdmFyIHN1aXRlID0gJ2FlcycgKyBtYXRjaFsxXVxuICAgIHZhciBpdiA9IG5ldyBCdWZmZXIobWF0Y2hbMl0sICdoZXgnKVxuICAgIHZhciBjaXBoZXJUZXh0ID0gbmV3IEJ1ZmZlcihtYXRjaFszXS5yZXBsYWNlKC9cXHI/XFxuL2csICcnKSwgJ2Jhc2U2NCcpXG4gICAgdmFyIGNpcGhlcktleSA9IGV2cChwYXNzd29yZCwgaXYuc2xpY2UoMCwgOCksIHBhcnNlSW50KG1hdGNoWzFdLCAxMCkpLmtleVxuICAgIHZhciBvdXQgPSBbXVxuICAgIHZhciBjaXBoZXIgPSBjaXBoZXJzLmNyZWF0ZURlY2lwaGVyaXYoc3VpdGUsIGNpcGhlcktleSwgaXYpXG4gICAgb3V0LnB1c2goY2lwaGVyLnVwZGF0ZShjaXBoZXJUZXh0KSlcbiAgICBvdXQucHVzaChjaXBoZXIuZmluYWwoKSlcbiAgICBkZWNyeXB0ZWQgPSBCdWZmZXIuY29uY2F0KG91dClcbiAgfVxuICB2YXIgdGFnID0ga2V5Lm1hdGNoKHN0YXJ0UmVnZXgpWzFdICsgJyBLRVknXG4gIHJldHVybiB7XG4gICAgdGFnOiB0YWcsXG4gICAgZGF0YTogZGVjcnlwdGVkXG4gIH1cbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZjSFZpYkdsakxXVnVZM0o1Y0hRdmJtOWtaVjl0YjJSMWJHVnpMM0JoY25ObExXRnpiakV2Wm1sNFVISnZZeTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaTh2SUdGa1lYQjBaV1FnWm5KdmJTQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZZWEJoZEdsc0wzQmxiWE4wY21sd1hHNTJZWElnWm1sdVpGQnliMk1nUFNBdlVISnZZeTFVZVhCbE9pQTBMRVZPUTFKWlVGUkZSRnhjY2o5Y1hHNUVSVXN0U1c1bWJ6b2dRVVZUTFNnb1B6b3hNamdwZkNnL09qRTVNaWw4S0Q4Nk1qVTJLU2t0UTBKRExDaGJNQzA1UVMxSVhTc3BYRnh5UDF4Y2JseGNjajljWEc0b1d6QXRPVUV0ZWx4Y2JseGNjbHhjSzF4Y0wxeGNQVjByS1Z4Y2NqOWNYRzR2YlZ4dWRtRnlJSE4wWVhKMFVtVm5aWGdnUFNBdlhpMHRMUzB0UWtWSFNVNGdLQzRxS1NCTFJWa3RMUzB0TFZ4Y2NqOWNYRzR2YlZ4dWRtRnlJR1oxYkd4U1pXZGxlQ0E5SUM5ZUxTMHRMUzFDUlVkSlRpQW9MaW9wSUV0RldTMHRMUzB0WEZ4eVAxeGNiaWhiTUMwNVFTMTZYRnh1WEZ4eVhGd3JYRnd2WEZ3OVhTc3BYRnh5UDF4Y2JpMHRMUzB0UlU1RUlGeGNNU0JMUlZrdExTMHRMU1F2YlZ4dWRtRnlJR1YyY0NBOUlISmxjWFZwY21Vb0oyVjJjRjlpZVhSbGMzUnZhMlY1SnlsY2JuWmhjaUJqYVhCb1pYSnpJRDBnY21WeGRXbHlaU2duWW5KdmQzTmxjbWxtZVMxaFpYTW5LVnh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaUFvYjJ0bGVTd2djR0Z6YzNkdmNtUXBJSHRjYmlBZ2RtRnlJR3RsZVNBOUlHOXJaWGt1ZEc5VGRISnBibWNvS1Z4dUlDQjJZWElnYldGMFkyZ2dQU0JyWlhrdWJXRjBZMmdvWm1sdVpGQnliMk1wWEc0Z0lIWmhjaUJrWldOeWVYQjBaV1JjYmlBZ2FXWWdLQ0Z0WVhSamFDa2dlMXh1SUNBZ0lIWmhjaUJ0WVhSamFESWdQU0JyWlhrdWJXRjBZMmdvWm5Wc2JGSmxaMlY0S1Z4dUlDQWdJR1JsWTNKNWNIUmxaQ0E5SUc1bGR5QkNkV1ptWlhJb2JXRjBZMmd5V3pKZExuSmxjR3hoWTJVb0wxeGNjajljWEc0dlp5d2dKeWNwTENBblltRnpaVFkwSnlsY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCMllYSWdjM1ZwZEdVZ1BTQW5ZV1Z6SnlBcklHMWhkR05vV3pGZFhHNGdJQ0FnZG1GeUlHbDJJRDBnYm1WM0lFSjFabVpsY2lodFlYUmphRnN5WFN3Z0oyaGxlQ2NwWEc0Z0lDQWdkbUZ5SUdOcGNHaGxjbFJsZUhRZ1BTQnVaWGNnUW5WbVptVnlLRzFoZEdOb1d6TmRMbkpsY0d4aFkyVW9MMXhjY2o5Y1hHNHZaeXdnSnljcExDQW5ZbUZ6WlRZMEp5bGNiaUFnSUNCMllYSWdZMmx3YUdWeVMyVjVJRDBnWlhad0tIQmhjM04zYjNKa0xDQnBkaTV6YkdsalpTZ3dMQ0E0S1N3Z2NHRnljMlZKYm5Rb2JXRjBZMmhiTVYwc0lERXdLU2t1YTJWNVhHNGdJQ0FnZG1GeUlHOTFkQ0E5SUZ0ZFhHNGdJQ0FnZG1GeUlHTnBjR2hsY2lBOUlHTnBjR2hsY25NdVkzSmxZWFJsUkdWamFYQm9aWEpwZGloemRXbDBaU3dnWTJsd2FHVnlTMlY1TENCcGRpbGNiaUFnSUNCdmRYUXVjSFZ6YUNoamFYQm9aWEl1ZFhCa1lYUmxLR05wY0dobGNsUmxlSFFwS1Z4dUlDQWdJRzkxZEM1d2RYTm9LR05wY0dobGNpNW1hVzVoYkNncEtWeHVJQ0FnSUdSbFkzSjVjSFJsWkNBOUlFSjFabVpsY2k1amIyNWpZWFFvYjNWMEtWeHVJQ0I5WEc0Z0lIWmhjaUIwWVdjZ1BTQnJaWGt1YldGMFkyZ29jM1JoY25SU1pXZGxlQ2xiTVYwZ0t5QW5JRXRGV1NkY2JpQWdjbVYwZFhKdUlIdGNiaUFnSUNCMFlXYzZJSFJoWnl4Y2JpQWdJQ0JrWVhSaE9pQmtaV055ZVhCMFpXUmNiaUFnZlZ4dWZWeHVJbDE5IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xudmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgbW9kZXMgPSByZXF1aXJlKCcuL21vZGVzJylcbnZhciBlYnRrID0gcmVxdWlyZSgnZXZwX2J5dGVzdG9rZXknKVxudmFyIFN0cmVhbUNpcGhlciA9IHJlcXVpcmUoJy4vc3RyZWFtQ2lwaGVyJylcbnZhciBBdXRoQ2lwaGVyID0gcmVxdWlyZSgnLi9hdXRoQ2lwaGVyJylcbmluaGVyaXRzKENpcGhlciwgVHJhbnNmb3JtKVxuZnVuY3Rpb24gQ2lwaGVyIChtb2RlLCBrZXksIGl2KSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBDaXBoZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBDaXBoZXIobW9kZSwga2V5LCBpdilcbiAgfVxuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuICB0aGlzLl9jYWNoZSA9IG5ldyBTcGxpdHRlcigpXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IG5ldyBCdWZmZXIoaXYubGVuZ3RoKVxuICBpdi5jb3B5KHRoaXMuX3ByZXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gdHJ1ZVxufVxuQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG4gIHdoaWxlICgoY2h1bmsgPSB0aGlzLl9jYWNoZS5nZXQoKSkpIHtcbiAgICB0aGluZyA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgICBvdXQucHVzaCh0aGluZylcbiAgfVxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChvdXQpXG59XG5DaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNodW5rID0gdGhpcy5fY2FjaGUuZmx1c2goKVxuICBpZiAodGhpcy5fYXV0b3BhZGRpbmcpIHtcbiAgICBjaHVuayA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgICB0aGlzLl9jaXBoZXIuc2NydWIoKVxuICAgIHJldHVybiBjaHVua1xuICB9IGVsc2UgaWYgKGNodW5rLnRvU3RyaW5nKCdoZXgnKSAhPT0gJzEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwJykge1xuICAgIHRoaXMuX2NpcGhlci5zY3J1YigpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdkYXRhIG5vdCBtdWx0aXBsZSBvZiBibG9jayBsZW5ndGgnKVxuICB9XG59XG5DaXBoZXIucHJvdG90eXBlLnNldEF1dG9QYWRkaW5nID0gZnVuY3Rpb24gKHNldFRvKSB7XG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gISFzZXRUb1xufVxuXG5mdW5jdGlvbiBTcGxpdHRlciAoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTcGxpdHRlcikpIHtcbiAgICByZXR1cm4gbmV3IFNwbGl0dGVyKClcbiAgfVxuICB0aGlzLmNhY2hlID0gbmV3IEJ1ZmZlcignJylcbn1cblNwbGl0dGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgZGF0YV0pXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+IDE1KSB7XG4gICAgdmFyIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgcmV0dXJuIG91dFxuICB9XG4gIHJldHVybiBudWxsXG59XG5TcGxpdHRlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsZW4gPSAxNiAtIHRoaXMuY2FjaGUubGVuZ3RoXG4gIHZhciBwYWRCdWZmID0gbmV3IEJ1ZmZlcihsZW4pXG5cbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgcGFkQnVmZi53cml0ZVVJbnQ4KGxlbiwgaSlcbiAgfVxuICB2YXIgb3V0ID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgcGFkQnVmZl0pXG4gIHJldHVybiBvdXRcbn1cbnZhciBtb2RlbGlzdCA9IHtcbiAgRUNCOiByZXF1aXJlKCcuL21vZGVzL2VjYicpLFxuICBDQkM6IHJlcXVpcmUoJy4vbW9kZXMvY2JjJyksXG4gIENGQjogcmVxdWlyZSgnLi9tb2Rlcy9jZmInKSxcbiAgQ0ZCODogcmVxdWlyZSgnLi9tb2Rlcy9jZmI4JyksXG4gIENGQjE6IHJlcXVpcmUoJy4vbW9kZXMvY2ZiMScpLFxuICBPRkI6IHJlcXVpcmUoJy4vbW9kZXMvb2ZiJyksXG4gIENUUjogcmVxdWlyZSgnLi9tb2Rlcy9jdHInKSxcbiAgR0NNOiByZXF1aXJlKCcuL21vZGVzL2N0cicpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlcml2IChzdWl0ZSwgcGFzc3dvcmQsIGl2KSB7XG4gIHZhciBjb25maWcgPSBtb2Rlc1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbiAgaWYgKHR5cGVvZiBpdiA9PT0gJ3N0cmluZycpIHtcbiAgICBpdiA9IG5ldyBCdWZmZXIoaXYpXG4gIH1cbiAgaWYgKHR5cGVvZiBwYXNzd29yZCA9PT0gJ3N0cmluZycpIHtcbiAgICBwYXNzd29yZCA9IG5ldyBCdWZmZXIocGFzc3dvcmQpXG4gIH1cbiAgaWYgKHBhc3N3b3JkLmxlbmd0aCAhPT0gY29uZmlnLmtleSAvIDgpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGtleSBsZW5ndGggJyArIHBhc3N3b3JkLmxlbmd0aClcbiAgfVxuICBpZiAoaXYubGVuZ3RoICE9PSBjb25maWcuaXYpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGl2IGxlbmd0aCAnICsgaXYubGVuZ3RoKVxuICB9XG4gIGlmIChjb25maWcudHlwZSA9PT0gJ3N0cmVhbScpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihtb2RlbGlzdFtjb25maWcubW9kZV0sIHBhc3N3b3JkLCBpdilcbiAgfSBlbHNlIGlmIChjb25maWcudHlwZSA9PT0gJ2F1dGgnKSB7XG4gICAgcmV0dXJuIG5ldyBBdXRoQ2lwaGVyKG1vZGVsaXN0W2NvbmZpZy5tb2RlXSwgcGFzc3dvcmQsIGl2KVxuICB9XG4gIHJldHVybiBuZXcgQ2lwaGVyKG1vZGVsaXN0W2NvbmZpZy5tb2RlXSwgcGFzc3dvcmQsIGl2KVxufVxuZnVuY3Rpb24gY3JlYXRlQ2lwaGVyIChzdWl0ZSwgcGFzc3dvcmQpIHtcbiAgdmFyIGNvbmZpZyA9IG1vZGVzW3N1aXRlLnRvTG93ZXJDYXNlKCldXG4gIGlmICghY29uZmlnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcbiAgfVxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBjb25maWcua2V5LCBjb25maWcuaXYpXG4gIHJldHVybiBjcmVhdGVDaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5cbmV4cG9ydHMuY3JlYXRlQ2lwaGVyaXYgPSBjcmVhdGVDaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVDaXBoZXIgPSBjcmVhdGVDaXBoZXJcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZjSFZpYkdsakxXVnVZM0o1Y0hRdmJtOWtaVjl0YjJSMWJHVnpMM0JoY25ObExXRnpiakV2Ym05a1pWOXRiMlIxYkdWekwySnliM2R6WlhKcFpua3RZV1Z6TDJWdVkzSjVjSFJsY2k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUdGbGN5QTlJSEpsY1hWcGNtVW9KeTR2WVdWekp5bGNiblpoY2lCVWNtRnVjMlp2Y20wZ1BTQnlaWEYxYVhKbEtDZGphWEJvWlhJdFltRnpaU2NwWEc1MllYSWdhVzVvWlhKcGRITWdQU0J5WlhGMWFYSmxLQ2RwYm1obGNtbDBjeWNwWEc1MllYSWdiVzlrWlhNZ1BTQnlaWEYxYVhKbEtDY3VMMjF2WkdWekp5bGNiblpoY2lCbFluUnJJRDBnY21WeGRXbHlaU2duWlhad1gySjVkR1Z6ZEc5clpYa25LVnh1ZG1GeUlGTjBjbVZoYlVOcGNHaGxjaUE5SUhKbGNYVnBjbVVvSnk0dmMzUnlaV0Z0UTJsd2FHVnlKeWxjYm5aaGNpQkJkWFJvUTJsd2FHVnlJRDBnY21WeGRXbHlaU2duTGk5aGRYUm9RMmx3YUdWeUp5bGNibWx1YUdWeWFYUnpLRU5wY0dobGNpd2dWSEpoYm5ObWIzSnRLVnh1Wm5WdVkzUnBiMjRnUTJsd2FHVnlJQ2h0YjJSbExDQnJaWGtzSUdsMktTQjdYRzRnSUdsbUlDZ2hLSFJvYVhNZ2FXNXpkR0Z1WTJWdlppQkRhWEJvWlhJcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QkRhWEJvWlhJb2JXOWtaU3dnYTJWNUxDQnBkaWxjYmlBZ2ZWeHVJQ0JVY21GdWMyWnZjbTB1WTJGc2JDaDBhR2x6S1Z4dUlDQjBhR2x6TGw5allXTm9aU0E5SUc1bGR5QlRjR3hwZEhSbGNpZ3BYRzRnSUhSb2FYTXVYMk5wY0dobGNpQTlJRzVsZHlCaFpYTXVRVVZUS0d0bGVTbGNiaUFnZEdocGN5NWZjSEpsZGlBOUlHNWxkeUJDZFdabVpYSW9hWFl1YkdWdVozUm9LVnh1SUNCcGRpNWpiM0I1S0hSb2FYTXVYM0J5WlhZcFhHNGdJSFJvYVhNdVgyMXZaR1VnUFNCdGIyUmxYRzRnSUhSb2FYTXVYMkYxZEc5d1lXUmthVzVuSUQwZ2RISjFaVnh1ZlZ4dVEybHdhR1Z5TG5CeWIzUnZkSGx3WlM1ZmRYQmtZWFJsSUQwZ1puVnVZM1JwYjI0Z0tHUmhkR0VwSUh0Y2JpQWdkR2hwY3k1ZlkyRmphR1V1WVdSa0tHUmhkR0VwWEc0Z0lIWmhjaUJqYUhWdWExeHVJQ0IyWVhJZ2RHaHBibWRjYmlBZ2RtRnlJRzkxZENBOUlGdGRYRzRnSUhkb2FXeGxJQ2dvWTJoMWJtc2dQU0IwYUdsekxsOWpZV05vWlM1blpYUW9LU2twSUh0Y2JpQWdJQ0IwYUdsdVp5QTlJSFJvYVhNdVgyMXZaR1V1Wlc1amNubHdkQ2gwYUdsekxDQmphSFZ1YXlsY2JpQWdJQ0J2ZFhRdWNIVnphQ2gwYUdsdVp5bGNiaUFnZlZ4dUlDQnlaWFIxY200Z1FuVm1abVZ5TG1OdmJtTmhkQ2h2ZFhRcFhHNTlYRzVEYVhCb1pYSXVjSEp2ZEc5MGVYQmxMbDltYVc1aGJDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdkbUZ5SUdOb2RXNXJJRDBnZEdocGN5NWZZMkZqYUdVdVpteDFjMmdvS1Z4dUlDQnBaaUFvZEdocGN5NWZZWFYwYjNCaFpHUnBibWNwSUh0Y2JpQWdJQ0JqYUhWdWF5QTlJSFJvYVhNdVgyMXZaR1V1Wlc1amNubHdkQ2gwYUdsekxDQmphSFZ1YXlsY2JpQWdJQ0IwYUdsekxsOWphWEJvWlhJdWMyTnlkV0lvS1Z4dUlDQWdJSEpsZEhWeWJpQmphSFZ1YTF4dUlDQjlJR1ZzYzJVZ2FXWWdLR05vZFc1ckxuUnZVM1J5YVc1bktDZG9aWGduS1NBaFBUMGdKekV3TVRBeE1ERXdNVEF4TURFd01UQXhNREV3TVRBeE1ERXdNVEF4TURFd0p5a2dlMXh1SUNBZ0lIUm9hWE11WDJOcGNHaGxjaTV6WTNKMVlpZ3BYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Nka1lYUmhJRzV2ZENCdGRXeDBhWEJzWlNCdlppQmliRzlqYXlCc1pXNW5kR2duS1Z4dUlDQjlYRzU5WEc1RGFYQm9aWEl1Y0hKdmRHOTBlWEJsTG5ObGRFRjFkRzlRWVdSa2FXNW5JRDBnWm5WdVkzUnBiMjRnS0hObGRGUnZLU0I3WEc0Z0lIUm9hWE11WDJGMWRHOXdZV1JrYVc1bklEMGdJU0Z6WlhSVWIxeHVmVnh1WEc1bWRXNWpkR2x2YmlCVGNHeHBkSFJsY2lBb0tTQjdYRzRnSUdsbUlDZ2hLSFJvYVhNZ2FXNXpkR0Z1WTJWdlppQlRjR3hwZEhSbGNpa3BJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRk53YkdsMGRHVnlLQ2xjYmlBZ2ZWeHVJQ0IwYUdsekxtTmhZMmhsSUQwZ2JtVjNJRUoxWm1abGNpZ25KeWxjYm4xY2JsTndiR2wwZEdWeUxuQnliM1J2ZEhsd1pTNWhaR1FnUFNCbWRXNWpkR2x2YmlBb1pHRjBZU2tnZTF4dUlDQjBhR2x6TG1OaFkyaGxJRDBnUW5WbVptVnlMbU52Ym1OaGRDaGJkR2hwY3k1allXTm9aU3dnWkdGMFlWMHBYRzU5WEc1Y2JsTndiR2wwZEdWeUxuQnliM1J2ZEhsd1pTNW5aWFFnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUdsbUlDaDBhR2x6TG1OaFkyaGxMbXhsYm1kMGFDQStJREUxS1NCN1hHNGdJQ0FnZG1GeUlHOTFkQ0E5SUhSb2FYTXVZMkZqYUdVdWMyeHBZMlVvTUN3Z01UWXBYRzRnSUNBZ2RHaHBjeTVqWVdOb1pTQTlJSFJvYVhNdVkyRmphR1V1YzJ4cFkyVW9NVFlwWEc0Z0lDQWdjbVYwZFhKdUlHOTFkRnh1SUNCOVhHNGdJSEpsZEhWeWJpQnVkV3hzWEc1OVhHNVRjR3hwZEhSbGNpNXdjbTkwYjNSNWNHVXVabXgxYzJnZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lIWmhjaUJzWlc0Z1BTQXhOaUF0SUhSb2FYTXVZMkZqYUdVdWJHVnVaM1JvWEc0Z0lIWmhjaUJ3WVdSQ2RXWm1JRDBnYm1WM0lFSjFabVpsY2loc1pXNHBYRzVjYmlBZ2RtRnlJR2tnUFNBdE1WeHVJQ0IzYUdsc1pTQW9LeXRwSUR3Z2JHVnVLU0I3WEc0Z0lDQWdjR0ZrUW5WbVppNTNjbWwwWlZWSmJuUTRLR3hsYml3Z2FTbGNiaUFnZlZ4dUlDQjJZWElnYjNWMElEMGdRblZtWm1WeUxtTnZibU5oZENoYmRHaHBjeTVqWVdOb1pTd2djR0ZrUW5WbVpsMHBYRzRnSUhKbGRIVnliaUJ2ZFhSY2JuMWNiblpoY2lCdGIyUmxiR2x6ZENBOUlIdGNiaUFnUlVOQ09pQnlaWEYxYVhKbEtDY3VMMjF2WkdWekwyVmpZaWNwTEZ4dUlDQkRRa002SUhKbGNYVnBjbVVvSnk0dmJXOWtaWE12WTJKakp5a3NYRzRnSUVOR1Fqb2djbVZ4ZFdseVpTZ25MaTl0YjJSbGN5OWpabUluS1N4Y2JpQWdRMFpDT0RvZ2NtVnhkV2x5WlNnbkxpOXRiMlJsY3k5alptSTRKeWtzWEc0Z0lFTkdRakU2SUhKbGNYVnBjbVVvSnk0dmJXOWtaWE12WTJaaU1TY3BMRnh1SUNCUFJrSTZJSEpsY1hWcGNtVW9KeTR2Ylc5a1pYTXZiMlppSnlrc1hHNGdJRU5VVWpvZ2NtVnhkV2x5WlNnbkxpOXRiMlJsY3k5amRISW5LU3hjYmlBZ1IwTk5PaUJ5WlhGMWFYSmxLQ2N1TDIxdlpHVnpMMk4wY2ljcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdOeVpXRjBaVU5wY0dobGNtbDJJQ2h6ZFdsMFpTd2djR0Z6YzNkdmNtUXNJR2wyS1NCN1hHNGdJSFpoY2lCamIyNW1hV2NnUFNCdGIyUmxjMXR6ZFdsMFpTNTBiMHh2ZDJWeVEyRnpaU2dwWFZ4dUlDQnBaaUFvSVdOdmJtWnBaeWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjJsdWRtRnNhV1FnYzNWcGRHVWdkSGx3WlNjcFhHNGdJSDFjYmlBZ2FXWWdLSFI1Y0dWdlppQnBkaUE5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNCcGRpQTlJRzVsZHlCQ2RXWm1aWElvYVhZcFhHNGdJSDFjYmlBZ2FXWWdLSFI1Y0dWdlppQndZWE56ZDI5eVpDQTlQVDBnSjNOMGNtbHVaeWNwSUh0Y2JpQWdJQ0J3WVhOemQyOXlaQ0E5SUc1bGR5QkNkV1ptWlhJb2NHRnpjM2R2Y21RcFhHNGdJSDFjYmlBZ2FXWWdLSEJoYzNOM2IzSmtMbXhsYm1kMGFDQWhQVDBnWTI5dVptbG5MbXRsZVNBdklEZ3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLQ2RwYm5aaGJHbGtJR3RsZVNCc1pXNW5kR2dnSnlBcklIQmhjM04zYjNKa0xteGxibWQwYUNsY2JpQWdmVnh1SUNCcFppQW9hWFl1YkdWdVozUm9JQ0U5UFNCamIyNW1hV2N1YVhZcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZHBiblpoYkdsa0lHbDJJR3hsYm1kMGFDQW5JQ3NnYVhZdWJHVnVaM1JvS1Z4dUlDQjlYRzRnSUdsbUlDaGpiMjVtYVdjdWRIbHdaU0E5UFQwZ0ozTjBjbVZoYlNjcElIdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGTjBjbVZoYlVOcGNHaGxjaWh0YjJSbGJHbHpkRnRqYjI1bWFXY3ViVzlrWlYwc0lIQmhjM04zYjNKa0xDQnBkaWxjYmlBZ2ZTQmxiSE5sSUdsbUlDaGpiMjVtYVdjdWRIbHdaU0E5UFQwZ0oyRjFkR2duS1NCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCQmRYUm9RMmx3YUdWeUtHMXZaR1ZzYVhOMFcyTnZibVpwWnk1dGIyUmxYU3dnY0dGemMzZHZjbVFzSUdsMktWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCdVpYY2dRMmx3YUdWeUtHMXZaR1ZzYVhOMFcyTnZibVpwWnk1dGIyUmxYU3dnY0dGemMzZHZjbVFzSUdsMktWeHVmVnh1Wm5WdVkzUnBiMjRnWTNKbFlYUmxRMmx3YUdWeUlDaHpkV2wwWlN3Z2NHRnpjM2R2Y21RcElIdGNiaUFnZG1GeUlHTnZibVpwWnlBOUlHMXZaR1Z6VzNOMWFYUmxMblJ2VEc5M1pYSkRZWE5sS0NsZFhHNGdJR2xtSUNnaFkyOXVabWxuS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnbmFXNTJZV3hwWkNCemRXbDBaU0IwZVhCbEp5bGNiaUFnZlZ4dUlDQjJZWElnYTJWNWN5QTlJR1ZpZEdzb2NHRnpjM2R2Y21Rc0lHWmhiSE5sTENCamIyNW1hV2N1YTJWNUxDQmpiMjVtYVdjdWFYWXBYRzRnSUhKbGRIVnliaUJqY21WaGRHVkRhWEJvWlhKcGRpaHpkV2wwWlN3Z2EyVjVjeTVyWlhrc0lHdGxlWE11YVhZcFhHNTlYRzVjYm1WNGNHOXlkSE11WTNKbFlYUmxRMmx3YUdWeWFYWWdQU0JqY21WaGRHVkRhWEJvWlhKcGRseHVaWGh3YjNKMGN5NWpjbVZoZEdWRGFYQm9aWElnUFNCamNtVmhkR1ZEYVhCb1pYSmNiaUpkZlE9PSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIG1vZGVzID0gcmVxdWlyZSgnLi9tb2RlcycpXG52YXIgU3RyZWFtQ2lwaGVyID0gcmVxdWlyZSgnLi9zdHJlYW1DaXBoZXInKVxudmFyIEF1dGhDaXBoZXIgPSByZXF1aXJlKCcuL2F1dGhDaXBoZXInKVxudmFyIGVidGsgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpXG5cbmluaGVyaXRzKERlY2lwaGVyLCBUcmFuc2Zvcm0pXG5mdW5jdGlvbiBEZWNpcGhlciAobW9kZSwga2V5LCBpdikge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRGVjaXBoZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBEZWNpcGhlcihtb2RlLCBrZXksIGl2KVxuICB9XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuX2NhY2hlID0gbmV3IFNwbGl0dGVyKClcbiAgdGhpcy5fbGFzdCA9IHZvaWQgMFxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBuZXcgQnVmZmVyKGl2Lmxlbmd0aClcbiAgaXYuY29weSh0aGlzLl9wcmV2KVxuICB0aGlzLl9tb2RlID0gbW9kZVxuICB0aGlzLl9hdXRvcGFkZGluZyA9IHRydWVcbn1cbkRlY2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG4gIHdoaWxlICgoY2h1bmsgPSB0aGlzLl9jYWNoZS5nZXQodGhpcy5fYXV0b3BhZGRpbmcpKSkge1xuICAgIHRoaW5nID0gdGhpcy5fbW9kZS5kZWNyeXB0KHRoaXMsIGNodW5rKVxuICAgIG91dC5wdXNoKHRoaW5nKVxuICB9XG4gIHJldHVybiBCdWZmZXIuY29uY2F0KG91dClcbn1cbkRlY2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjaHVuayA9IHRoaXMuX2NhY2hlLmZsdXNoKClcbiAgaWYgKHRoaXMuX2F1dG9wYWRkaW5nKSB7XG4gICAgcmV0dXJuIHVucGFkKHRoaXMuX21vZGUuZGVjcnlwdCh0aGlzLCBjaHVuaykpXG4gIH0gZWxzZSBpZiAoY2h1bmspIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgbm90IG11bHRpcGxlIG9mIGJsb2NrIGxlbmd0aCcpXG4gIH1cbn1cbkRlY2lwaGVyLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uIChzZXRUbykge1xuICB0aGlzLl9hdXRvcGFkZGluZyA9ICEhc2V0VG9cbn1cbmZ1bmN0aW9uIFNwbGl0dGVyICgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNwbGl0dGVyKSkge1xuICAgIHJldHVybiBuZXcgU3BsaXR0ZXIoKVxuICB9XG4gIHRoaXMuY2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxufVxuU3BsaXR0ZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuY2FjaGUgPSBCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBkYXRhXSlcbn1cblxuU3BsaXR0ZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChhdXRvUGFkZGluZykge1xuICB2YXIgb3V0XG4gIGlmIChhdXRvUGFkZGluZykge1xuICAgIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+IDE2KSB7XG4gICAgICBvdXQgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgICByZXR1cm4gb3V0XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+PSAxNikge1xuICAgICAgb3V0ID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNilcbiAgICAgIHRoaXMuY2FjaGUgPSB0aGlzLmNhY2hlLnNsaWNlKDE2KVxuICAgICAgcmV0dXJuIG91dFxuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbFxufVxuU3BsaXR0ZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy5jYWNoZVxuICB9XG59XG5mdW5jdGlvbiB1bnBhZCAobGFzdCkge1xuICB2YXIgcGFkZGVkID0gbGFzdFsxNV1cbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgcGFkZGVkKSB7XG4gICAgaWYgKGxhc3RbKGkgKyAoMTYgLSBwYWRkZWQpKV0gIT09IHBhZGRlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gZGVjcnlwdCBkYXRhJylcbiAgICB9XG4gIH1cbiAgaWYgKHBhZGRlZCA9PT0gMTYpIHtcbiAgICByZXR1cm5cbiAgfVxuICByZXR1cm4gbGFzdC5zbGljZSgwLCAxNiAtIHBhZGRlZClcbn1cblxudmFyIG1vZGVsaXN0ID0ge1xuICBFQ0I6IHJlcXVpcmUoJy4vbW9kZXMvZWNiJyksXG4gIENCQzogcmVxdWlyZSgnLi9tb2Rlcy9jYmMnKSxcbiAgQ0ZCOiByZXF1aXJlKCcuL21vZGVzL2NmYicpLFxuICBDRkI4OiByZXF1aXJlKCcuL21vZGVzL2NmYjgnKSxcbiAgQ0ZCMTogcmVxdWlyZSgnLi9tb2Rlcy9jZmIxJyksXG4gIE9GQjogcmVxdWlyZSgnLi9tb2Rlcy9vZmInKSxcbiAgQ1RSOiByZXF1aXJlKCcuL21vZGVzL2N0cicpLFxuICBHQ006IHJlcXVpcmUoJy4vbW9kZXMvY3RyJylcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVjaXBoZXJpdiAoc3VpdGUsIHBhc3N3b3JkLCBpdikge1xuICB2YXIgY29uZmlnID0gbW9kZXNbc3VpdGUudG9Mb3dlckNhc2UoKV1cbiAgaWYgKCFjb25maWcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuICB9XG4gIGlmICh0eXBlb2YgaXYgPT09ICdzdHJpbmcnKSB7XG4gICAgaXYgPSBuZXcgQnVmZmVyKGl2KVxuICB9XG4gIGlmICh0eXBlb2YgcGFzc3dvcmQgPT09ICdzdHJpbmcnKSB7XG4gICAgcGFzc3dvcmQgPSBuZXcgQnVmZmVyKHBhc3N3b3JkKVxuICB9XG4gIGlmIChwYXNzd29yZC5sZW5ndGggIT09IGNvbmZpZy5rZXkgLyA4KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBrZXkgbGVuZ3RoICcgKyBwYXNzd29yZC5sZW5ndGgpXG4gIH1cbiAgaWYgKGl2Lmxlbmd0aCAhPT0gY29uZmlnLml2KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBpdiBsZW5ndGggJyArIGl2Lmxlbmd0aClcbiAgfVxuICBpZiAoY29uZmlnLnR5cGUgPT09ICdzdHJlYW0nKSB7XG4gICAgcmV0dXJuIG5ldyBTdHJlYW1DaXBoZXIobW9kZWxpc3RbY29uZmlnLm1vZGVdLCBwYXNzd29yZCwgaXYsIHRydWUpXG4gIH0gZWxzZSBpZiAoY29uZmlnLnR5cGUgPT09ICdhdXRoJykge1xuICAgIHJldHVybiBuZXcgQXV0aENpcGhlcihtb2RlbGlzdFtjb25maWcubW9kZV0sIHBhc3N3b3JkLCBpdiwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gbmV3IERlY2lwaGVyKG1vZGVsaXN0W2NvbmZpZy5tb2RlXSwgcGFzc3dvcmQsIGl2KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHZhciBjb25maWcgPSBtb2Rlc1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwgY29uZmlnLmtleSwgY29uZmlnLml2KVxuICByZXR1cm4gY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyID0gY3JlYXRlRGVjaXBoZXJcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXJpdiA9IGNyZWF0ZURlY2lwaGVyaXZcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZjSFZpYkdsakxXVnVZM0o1Y0hRdmJtOWtaVjl0YjJSMWJHVnpMM0JoY25ObExXRnpiakV2Ym05a1pWOXRiMlIxYkdWekwySnliM2R6WlhKcFpua3RZV1Z6TDJSbFkzSjVjSFJsY2k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlHRmxjeUE5SUhKbGNYVnBjbVVvSnk0dllXVnpKeWxjYm5aaGNpQlVjbUZ1YzJadmNtMGdQU0J5WlhGMWFYSmxLQ2RqYVhCb1pYSXRZbUZ6WlNjcFhHNTJZWElnYVc1b1pYSnBkSE1nUFNCeVpYRjFhWEpsS0NkcGJtaGxjbWwwY3ljcFhHNTJZWElnYlc5a1pYTWdQU0J5WlhGMWFYSmxLQ2N1TDIxdlpHVnpKeWxjYm5aaGNpQlRkSEpsWVcxRGFYQm9aWElnUFNCeVpYRjFhWEpsS0NjdUwzTjBjbVZoYlVOcGNHaGxjaWNwWEc1MllYSWdRWFYwYUVOcGNHaGxjaUE5SUhKbGNYVnBjbVVvSnk0dllYVjBhRU5wY0dobGNpY3BYRzUyWVhJZ1pXSjBheUE5SUhKbGNYVnBjbVVvSjJWMmNGOWllWFJsYzNSdmEyVjVKeWxjYmx4dWFXNW9aWEpwZEhNb1JHVmphWEJvWlhJc0lGUnlZVzV6Wm05eWJTbGNibVoxYm1OMGFXOXVJRVJsWTJsd2FHVnlJQ2h0YjJSbExDQnJaWGtzSUdsMktTQjdYRzRnSUdsbUlDZ2hLSFJvYVhNZ2FXNXpkR0Z1WTJWdlppQkVaV05wY0dobGNpa3BJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRVJsWTJsd2FHVnlLRzF2WkdVc0lHdGxlU3dnYVhZcFhHNGdJSDFjYmlBZ1ZISmhibk5tYjNKdExtTmhiR3dvZEdocGN5bGNiaUFnZEdocGN5NWZZMkZqYUdVZ1BTQnVaWGNnVTNCc2FYUjBaWElvS1Z4dUlDQjBhR2x6TGw5c1lYTjBJRDBnZG05cFpDQXdYRzRnSUhSb2FYTXVYMk5wY0dobGNpQTlJRzVsZHlCaFpYTXVRVVZUS0d0bGVTbGNiaUFnZEdocGN5NWZjSEpsZGlBOUlHNWxkeUJDZFdabVpYSW9hWFl1YkdWdVozUm9LVnh1SUNCcGRpNWpiM0I1S0hSb2FYTXVYM0J5WlhZcFhHNGdJSFJvYVhNdVgyMXZaR1VnUFNCdGIyUmxYRzRnSUhSb2FYTXVYMkYxZEc5d1lXUmthVzVuSUQwZ2RISjFaVnh1ZlZ4dVJHVmphWEJvWlhJdWNISnZkRzkwZVhCbExsOTFjR1JoZEdVZ1BTQm1kVzVqZEdsdmJpQW9aR0YwWVNrZ2UxeHVJQ0IwYUdsekxsOWpZV05vWlM1aFpHUW9aR0YwWVNsY2JpQWdkbUZ5SUdOb2RXNXJYRzRnSUhaaGNpQjBhR2x1WjF4dUlDQjJZWElnYjNWMElEMGdXMTFjYmlBZ2QyaHBiR1VnS0NoamFIVnVheUE5SUhSb2FYTXVYMk5oWTJobExtZGxkQ2gwYUdsekxsOWhkWFJ2Y0dGa1pHbHVaeWtwS1NCN1hHNGdJQ0FnZEdocGJtY2dQU0IwYUdsekxsOXRiMlJsTG1SbFkzSjVjSFFvZEdocGN5d2dZMmgxYm1zcFhHNGdJQ0FnYjNWMExuQjFjMmdvZEdocGJtY3BYRzRnSUgxY2JpQWdjbVYwZFhKdUlFSjFabVpsY2k1amIyNWpZWFFvYjNWMEtWeHVmVnh1UkdWamFYQm9aWEl1Y0hKdmRHOTBlWEJsTGw5bWFXNWhiQ0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnZG1GeUlHTm9kVzVySUQwZ2RHaHBjeTVmWTJGamFHVXVabXgxYzJnb0tWeHVJQ0JwWmlBb2RHaHBjeTVmWVhWMGIzQmhaR1JwYm1jcElIdGNiaUFnSUNCeVpYUjFjbTRnZFc1d1lXUW9kR2hwY3k1ZmJXOWtaUzVrWldOeWVYQjBLSFJvYVhNc0lHTm9kVzVyS1NsY2JpQWdmU0JsYkhObElHbG1JQ2hqYUhWdWF5a2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblpHRjBZU0J1YjNRZ2JYVnNkR2x3YkdVZ2IyWWdZbXh2WTJzZ2JHVnVaM1JvSnlsY2JpQWdmVnh1ZlZ4dVJHVmphWEJvWlhJdWNISnZkRzkwZVhCbExuTmxkRUYxZEc5UVlXUmthVzVuSUQwZ1puVnVZM1JwYjI0Z0tITmxkRlJ2S1NCN1hHNGdJSFJvYVhNdVgyRjFkRzl3WVdSa2FXNW5JRDBnSVNGelpYUlViMXh1ZlZ4dVpuVnVZM1JwYjI0Z1UzQnNhWFIwWlhJZ0tDa2dlMXh1SUNCcFppQW9JU2gwYUdseklHbHVjM1JoYm1ObGIyWWdVM0JzYVhSMFpYSXBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJUY0d4cGRIUmxjaWdwWEc0Z0lIMWNiaUFnZEdocGN5NWpZV05vWlNBOUlHNWxkeUJDZFdabVpYSW9KeWNwWEc1OVhHNVRjR3hwZEhSbGNpNXdjbTkwYjNSNWNHVXVZV1JrSUQwZ1puVnVZM1JwYjI0Z0tHUmhkR0VwSUh0Y2JpQWdkR2hwY3k1allXTm9aU0E5SUVKMVptWmxjaTVqYjI1allYUW9XM1JvYVhNdVkyRmphR1VzSUdSaGRHRmRLVnh1ZlZ4dVhHNVRjR3hwZEhSbGNpNXdjbTkwYjNSNWNHVXVaMlYwSUQwZ1puVnVZM1JwYjI0Z0tHRjFkRzlRWVdSa2FXNW5LU0I3WEc0Z0lIWmhjaUJ2ZFhSY2JpQWdhV1lnS0dGMWRHOVFZV1JrYVc1bktTQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdVkyRmphR1V1YkdWdVozUm9JRDRnTVRZcElIdGNiaUFnSUNBZ0lHOTFkQ0E5SUhSb2FYTXVZMkZqYUdVdWMyeHBZMlVvTUN3Z01UWXBYRzRnSUNBZ0lDQjBhR2x6TG1OaFkyaGxJRDBnZEdocGN5NWpZV05vWlM1emJHbGpaU2d4TmlsY2JpQWdJQ0FnSUhKbGRIVnliaUJ2ZFhSY2JpQWdJQ0I5WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11WTJGamFHVXViR1Z1WjNSb0lENDlJREUyS1NCN1hHNGdJQ0FnSUNCdmRYUWdQU0IwYUdsekxtTmhZMmhsTG5Oc2FXTmxLREFzSURFMktWeHVJQ0FnSUNBZ2RHaHBjeTVqWVdOb1pTQTlJSFJvYVhNdVkyRmphR1V1YzJ4cFkyVW9NVFlwWEc0Z0lDQWdJQ0J5WlhSMWNtNGdiM1YwWEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnVkV3hzWEc1OVhHNVRjR3hwZEhSbGNpNXdjbTkwYjNSNWNHVXVabXgxYzJnZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lHbG1JQ2gwYUdsekxtTmhZMmhsTG14bGJtZDBhQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG1OaFkyaGxYRzRnSUgxY2JuMWNibVoxYm1OMGFXOXVJSFZ1Y0dGa0lDaHNZWE4wS1NCN1hHNGdJSFpoY2lCd1lXUmtaV1FnUFNCc1lYTjBXekUxWFZ4dUlDQjJZWElnYVNBOUlDMHhYRzRnSUhkb2FXeGxJQ2dySzJrZ1BDQndZV1JrWldRcElIdGNiaUFnSUNCcFppQW9iR0Z6ZEZzb2FTQXJJQ2d4TmlBdElIQmhaR1JsWkNrcFhTQWhQVDBnY0dGa1pHVmtLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KM1Z1WVdKc1pTQjBieUJrWldOeWVYQjBJR1JoZEdFbktWeHVJQ0FnSUgxY2JpQWdmVnh1SUNCcFppQW9jR0ZrWkdWa0lEMDlQU0F4TmlrZ2UxeHVJQ0FnSUhKbGRIVnlibHh1SUNCOVhHNGdJSEpsZEhWeWJpQnNZWE4wTG5Oc2FXTmxLREFzSURFMklDMGdjR0ZrWkdWa0tWeHVmVnh1WEc1MllYSWdiVzlrWld4cGMzUWdQU0I3WEc0Z0lFVkRRam9nY21WeGRXbHlaU2duTGk5dGIyUmxjeTlsWTJJbktTeGNiaUFnUTBKRE9pQnlaWEYxYVhKbEtDY3VMMjF2WkdWekwyTmlZeWNwTEZ4dUlDQkRSa0k2SUhKbGNYVnBjbVVvSnk0dmJXOWtaWE12WTJaaUp5a3NYRzRnSUVOR1FqZzZJSEpsY1hWcGNtVW9KeTR2Ylc5a1pYTXZZMlppT0NjcExGeHVJQ0JEUmtJeE9pQnlaWEYxYVhKbEtDY3VMMjF2WkdWekwyTm1ZakVuS1N4Y2JpQWdUMFpDT2lCeVpYRjFhWEpsS0NjdUwyMXZaR1Z6TDI5bVlpY3BMRnh1SUNCRFZGSTZJSEpsY1hWcGNtVW9KeTR2Ylc5a1pYTXZZM1J5Snlrc1hHNGdJRWREVFRvZ2NtVnhkV2x5WlNnbkxpOXRiMlJsY3k5amRISW5LVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmpjbVZoZEdWRVpXTnBjR2hsY21sMklDaHpkV2wwWlN3Z2NHRnpjM2R2Y21Rc0lHbDJLU0I3WEc0Z0lIWmhjaUJqYjI1bWFXY2dQU0J0YjJSbGMxdHpkV2wwWlM1MGIweHZkMlZ5UTJGelpTZ3BYVnh1SUNCcFppQW9JV052Ym1acFp5a2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9KMmx1ZG1Gc2FXUWdjM1ZwZEdVZ2RIbHdaU2NwWEc0Z0lIMWNiaUFnYVdZZ0tIUjVjR1Z2WmlCcGRpQTlQVDBnSjNOMGNtbHVaeWNwSUh0Y2JpQWdJQ0JwZGlBOUlHNWxkeUJDZFdabVpYSW9hWFlwWEc0Z0lIMWNiaUFnYVdZZ0tIUjVjR1Z2WmlCd1lYTnpkMjl5WkNBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQndZWE56ZDI5eVpDQTlJRzVsZHlCQ2RXWm1aWElvY0dGemMzZHZjbVFwWEc0Z0lIMWNiaUFnYVdZZ0tIQmhjM04zYjNKa0xteGxibWQwYUNBaFBUMGdZMjl1Wm1sbkxtdGxlU0F2SURncElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZHBiblpoYkdsa0lHdGxlU0JzWlc1bmRHZ2dKeUFySUhCaGMzTjNiM0prTG14bGJtZDBhQ2xjYmlBZ2ZWeHVJQ0JwWmlBb2FYWXViR1Z1WjNSb0lDRTlQU0JqYjI1bWFXY3VhWFlwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkcGJuWmhiR2xrSUdsMklHeGxibWQwYUNBbklDc2dhWFl1YkdWdVozUm9LVnh1SUNCOVhHNGdJR2xtSUNoamIyNW1hV2N1ZEhsd1pTQTlQVDBnSjNOMGNtVmhiU2NwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZOMGNtVmhiVU5wY0dobGNpaHRiMlJsYkdsemRGdGpiMjVtYVdjdWJXOWtaVjBzSUhCaGMzTjNiM0prTENCcGRpd2dkSEoxWlNsY2JpQWdmU0JsYkhObElHbG1JQ2hqYjI1bWFXY3VkSGx3WlNBOVBUMGdKMkYxZEdnbktTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QkJkWFJvUTJsd2FHVnlLRzF2WkdWc2FYTjBXMk52Ym1acFp5NXRiMlJsWFN3Z2NHRnpjM2R2Y21Rc0lHbDJMQ0IwY25WbEtWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCdVpYY2dSR1ZqYVhCb1pYSW9iVzlrWld4cGMzUmJZMjl1Wm1sbkxtMXZaR1ZkTENCd1lYTnpkMjl5WkN3Z2FYWXBYRzU5WEc1Y2JtWjFibU4wYVc5dUlHTnlaV0YwWlVSbFkybHdhR1Z5SUNoemRXbDBaU3dnY0dGemMzZHZjbVFwSUh0Y2JpQWdkbUZ5SUdOdmJtWnBaeUE5SUcxdlpHVnpXM04xYVhSbExuUnZURzkzWlhKRFlYTmxLQ2xkWEc0Z0lHbG1JQ2doWTI5dVptbG5LU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWduYVc1MllXeHBaQ0J6ZFdsMFpTQjBlWEJsSnlsY2JpQWdmVnh1SUNCMllYSWdhMlY1Y3lBOUlHVmlkR3NvY0dGemMzZHZjbVFzSUdaaGJITmxMQ0JqYjI1bWFXY3VhMlY1TENCamIyNW1hV2N1YVhZcFhHNGdJSEpsZEhWeWJpQmpjbVZoZEdWRVpXTnBjR2hsY21sMktITjFhWFJsTENCclpYbHpMbXRsZVN3Z2EyVjVjeTVwZGlsY2JuMWNibVY0Y0c5eWRITXVZM0psWVhSbFJHVmphWEJvWlhJZ1BTQmpjbVZoZEdWRVpXTnBjR2hsY2x4dVpYaHdiM0owY3k1amNtVmhkR1ZFWldOcGNHaGxjbWwySUQwZ1kzSmxZWFJsUkdWamFYQm9aWEpwZGx4dUlsMTkiLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG52YXIgbWQ1ID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gvbWQ1Jylcbm1vZHVsZS5leHBvcnRzID0gRVZQX0J5dGVzVG9LZXlcbmZ1bmN0aW9uIEVWUF9CeXRlc1RvS2V5IChwYXNzd29yZCwgc2FsdCwga2V5TGVuLCBpdkxlbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwYXNzd29yZCkpIHtcbiAgICBwYXNzd29yZCA9IG5ldyBCdWZmZXIocGFzc3dvcmQsICdiaW5hcnknKVxuICB9XG4gIGlmIChzYWx0ICYmICFCdWZmZXIuaXNCdWZmZXIoc2FsdCkpIHtcbiAgICBzYWx0ID0gbmV3IEJ1ZmZlcihzYWx0LCAnYmluYXJ5JylcbiAgfVxuICBrZXlMZW4gPSBrZXlMZW4gLyA4XG4gIGl2TGVuID0gaXZMZW4gfHwgMFxuICB2YXIga2kgPSAwXG4gIHZhciBpaSA9IDBcbiAgdmFyIGtleSA9IG5ldyBCdWZmZXIoa2V5TGVuKVxuICB2YXIgaXYgPSBuZXcgQnVmZmVyKGl2TGVuKVxuICB2YXIgYWRkbWQgPSAwXG4gIHZhciBtZF9idWZcbiAgdmFyIGlcbiAgdmFyIGJ1ZnMgPSBbXVxuICB3aGlsZSAodHJ1ZSkge1xuICAgIGlmIChhZGRtZCsrID4gMCkge1xuICAgICAgYnVmcy5wdXNoKG1kX2J1ZilcbiAgICB9XG4gICAgYnVmcy5wdXNoKHBhc3N3b3JkKVxuICAgIGlmIChzYWx0KSB7XG4gICAgICBidWZzLnB1c2goc2FsdClcbiAgICB9XG4gICAgbWRfYnVmID0gbWQ1KEJ1ZmZlci5jb25jYXQoYnVmcykpXG4gICAgYnVmcyA9IFtdXG4gICAgaSA9IDBcbiAgICBpZiAoa2V5TGVuID4gMCkge1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgaWYgKGtleUxlbiA9PT0gMCkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPT09IG1kX2J1Zi5sZW5ndGgpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGtleVtraSsrXSA9IG1kX2J1ZltpXVxuICAgICAgICBrZXlMZW4tLVxuICAgICAgICBpKytcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGl2TGVuID4gMCAmJiBpICE9PSBtZF9idWYubGVuZ3RoKSB7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBpZiAoaXZMZW4gPT09IDApIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGlmIChpID09PSBtZF9idWYubGVuZ3RoKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBpdltpaSsrXSA9IG1kX2J1ZltpXVxuICAgICAgICBpdkxlbi0tXG4gICAgICAgIGkrK1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoa2V5TGVuID09PSAwICYmIGl2TGVuID09PSAwKSB7XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuICBmb3IgKGkgPSAwOyBpIDwgbWRfYnVmLmxlbmd0aDsgaSsrKSB7XG4gICAgbWRfYnVmW2ldID0gMFxuICB9XG4gIHJldHVybiB7XG4gICAga2V5OiBrZXksXG4gICAgaXY6IGl2XG4gIH1cbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZjSFZpYkdsakxXVnVZM0o1Y0hRdmJtOWtaVjl0YjJSMWJHVnpMM0JoY25ObExXRnpiakV2Ym05a1pWOXRiMlIxYkdWekwyVjJjRjlpZVhSbGMzUnZhMlY1TDJsdVpHVjRMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCdFpEVWdQU0J5WlhGMWFYSmxLQ2RqY21WaGRHVXRhR0Z6YUM5dFpEVW5LVnh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JGVmxCZlFubDBaWE5VYjB0bGVWeHVablZ1WTNScGIyNGdSVlpRWDBKNWRHVnpWRzlMWlhrZ0tIQmhjM04zYjNKa0xDQnpZV3gwTENCclpYbE1aVzRzSUdsMlRHVnVLU0I3WEc0Z0lHbG1JQ2doUW5WbVptVnlMbWx6UW5WbVptVnlLSEJoYzNOM2IzSmtLU2tnZTF4dUlDQWdJSEJoYzNOM2IzSmtJRDBnYm1WM0lFSjFabVpsY2lod1lYTnpkMjl5WkN3Z0oySnBibUZ5ZVNjcFhHNGdJSDFjYmlBZ2FXWWdLSE5oYkhRZ0ppWWdJVUoxWm1abGNpNXBjMEoxWm1abGNpaHpZV3gwS1NrZ2UxeHVJQ0FnSUhOaGJIUWdQU0J1WlhjZ1FuVm1abVZ5S0hOaGJIUXNJQ2RpYVc1aGNua25LVnh1SUNCOVhHNGdJR3RsZVV4bGJpQTlJR3RsZVV4bGJpQXZJRGhjYmlBZ2FYWk1aVzRnUFNCcGRreGxiaUI4ZkNBd1hHNGdJSFpoY2lCcmFTQTlJREJjYmlBZ2RtRnlJR2xwSUQwZ01GeHVJQ0IyWVhJZ2EyVjVJRDBnYm1WM0lFSjFabVpsY2loclpYbE1aVzRwWEc0Z0lIWmhjaUJwZGlBOUlHNWxkeUJDZFdabVpYSW9hWFpNWlc0cFhHNGdJSFpoY2lCaFpHUnRaQ0E5SURCY2JpQWdkbUZ5SUcxa1gySjFabHh1SUNCMllYSWdhVnh1SUNCMllYSWdZblZtY3lBOUlGdGRYRzRnSUhkb2FXeGxJQ2gwY25WbEtTQjdYRzRnSUNBZ2FXWWdLR0ZrWkcxa0t5c2dQaUF3S1NCN1hHNGdJQ0FnSUNCaWRXWnpMbkIxYzJnb2JXUmZZblZtS1Z4dUlDQWdJSDFjYmlBZ0lDQmlkV1p6TG5CMWMyZ29jR0Z6YzNkdmNtUXBYRzRnSUNBZ2FXWWdLSE5oYkhRcElIdGNiaUFnSUNBZ0lHSjFabk11Y0hWemFDaHpZV3gwS1Z4dUlDQWdJSDFjYmlBZ0lDQnRaRjlpZFdZZ1BTQnRaRFVvUW5WbVptVnlMbU52Ym1OaGRDaGlkV1p6S1NsY2JpQWdJQ0JpZFdaeklEMGdXMTFjYmlBZ0lDQnBJRDBnTUZ4dUlDQWdJR2xtSUNoclpYbE1aVzRnUGlBd0tTQjdYRzRnSUNBZ0lDQjNhR2xzWlNBb2RISjFaU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9hMlY1VEdWdUlEMDlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdZbkpsWVd0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvYVNBOVBUMGdiV1JmWW5WbUxteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhMlY1VzJ0cEt5dGRJRDBnYldSZlluVm1XMmxkWEc0Z0lDQWdJQ0FnSUd0bGVVeGxiaTB0WEc0Z0lDQWdJQ0FnSUdrcksxeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2FYWk1aVzRnUGlBd0lDWW1JR2tnSVQwOUlHMWtYMkoxWmk1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUhkb2FXeGxJQ2gwY25WbEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNocGRreGxiaUE5UFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tHa2dQVDA5SUcxa1gySjFaaTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsMlcybHBLeXRkSUQwZ2JXUmZZblZtVzJsZFhHNGdJQ0FnSUNBZ0lHbDJUR1Z1TFMxY2JpQWdJQ0FnSUNBZ2FTc3JYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHJaWGxNWlc0Z1BUMDlJREFnSmlZZ2FYWk1aVzRnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJR0p5WldGclhHNGdJQ0FnZlZ4dUlDQjlYRzRnSUdadmNpQW9hU0E5SURBN0lHa2dQQ0J0WkY5aWRXWXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0J0WkY5aWRXWmJhVjBnUFNBd1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0JyWlhrNklHdGxlU3hjYmlBZ0lDQnBkam9nYVhaY2JpQWdmVnh1ZlZ4dUlsMTkiLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG52YXIgYWVzID0gcmVxdWlyZSgnLi9hZXMnKVxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxuaW5oZXJpdHMoU3RyZWFtQ2lwaGVyLCBUcmFuc2Zvcm0pXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmVhbUNpcGhlclxuZnVuY3Rpb24gU3RyZWFtQ2lwaGVyIChtb2RlLCBrZXksIGl2LCBkZWNyeXB0KSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTdHJlYW1DaXBoZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBTdHJlYW1DaXBoZXIobW9kZSwga2V5LCBpdilcbiAgfVxuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBuZXcgQnVmZmVyKGl2Lmxlbmd0aClcbiAgdGhpcy5fY2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxuICB0aGlzLl9zZWNDYWNoZSA9IG5ldyBCdWZmZXIoJycpXG4gIHRoaXMuX2RlY3J5cHQgPSBkZWNyeXB0XG4gIGl2LmNvcHkodGhpcy5fcHJldilcbiAgdGhpcy5fbW9kZSA9IG1vZGVcbn1cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChjaHVuaykge1xuICByZXR1cm4gdGhpcy5fbW9kZS5lbmNyeXB0KHRoaXMsIGNodW5rLCB0aGlzLl9kZWNyeXB0KVxufVxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2NpcGhlci5zY3J1YigpXG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12Y0hWaWJHbGpMV1Z1WTNKNWNIUXZibTlrWlY5dGIyUjFiR1Z6TDNCaGNuTmxMV0Z6YmpFdmJtOWtaVjl0YjJSMWJHVnpMMkp5YjNkelpYSnBabmt0WVdWekwzTjBjbVZoYlVOcGNHaGxjaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlHRmxjeUE5SUhKbGNYVnBjbVVvSnk0dllXVnpKeWxjYm5aaGNpQlVjbUZ1YzJadmNtMGdQU0J5WlhGMWFYSmxLQ2RqYVhCb1pYSXRZbUZ6WlNjcFhHNTJZWElnYVc1b1pYSnBkSE1nUFNCeVpYRjFhWEpsS0NkcGJtaGxjbWwwY3ljcFhHNWNibWx1YUdWeWFYUnpLRk4wY21WaGJVTnBjR2hsY2l3Z1ZISmhibk5tYjNKdEtWeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlRkSEpsWVcxRGFYQm9aWEpjYm1aMWJtTjBhVzl1SUZOMGNtVmhiVU5wY0dobGNpQW9iVzlrWlN3Z2EyVjVMQ0JwZGl3Z1pHVmpjbmx3ZENrZ2UxeHVJQ0JwWmlBb0lTaDBhR2x6SUdsdWMzUmhibU5sYjJZZ1UzUnlaV0Z0UTJsd2FHVnlLU2tnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVTNSeVpXRnRRMmx3YUdWeUtHMXZaR1VzSUd0bGVTd2dhWFlwWEc0Z0lIMWNiaUFnVkhKaGJuTm1iM0p0TG1OaGJHd29kR2hwY3lsY2JpQWdkR2hwY3k1ZlkybHdhR1Z5SUQwZ2JtVjNJR0ZsY3k1QlJWTW9hMlY1S1Z4dUlDQjBhR2x6TGw5d2NtVjJJRDBnYm1WM0lFSjFabVpsY2locGRpNXNaVzVuZEdncFhHNGdJSFJvYVhNdVgyTmhZMmhsSUQwZ2JtVjNJRUoxWm1abGNpZ25KeWxjYmlBZ2RHaHBjeTVmYzJWalEyRmphR1VnUFNCdVpYY2dRblZtWm1WeUtDY25LVnh1SUNCMGFHbHpMbDlrWldOeWVYQjBJRDBnWkdWamNubHdkRnh1SUNCcGRpNWpiM0I1S0hSb2FYTXVYM0J5WlhZcFhHNGdJSFJvYVhNdVgyMXZaR1VnUFNCdGIyUmxYRzU5WEc1VGRISmxZVzFEYVhCb1pYSXVjSEp2ZEc5MGVYQmxMbDkxY0dSaGRHVWdQU0JtZFc1amRHbHZiaUFvWTJoMWJtc3BJSHRjYmlBZ2NtVjBkWEp1SUhSb2FYTXVYMjF2WkdVdVpXNWpjbmx3ZENoMGFHbHpMQ0JqYUhWdWF5d2dkR2hwY3k1ZlpHVmpjbmx3ZENsY2JuMWNibE4wY21WaGJVTnBjR2hsY2k1d2NtOTBiM1I1Y0dVdVgyWnBibUZzSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNCMGFHbHpMbDlqYVhCb1pYSXVjMk55ZFdJb0tWeHVmVnh1SWwxOSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZnVuY3Rpb24gZ2V0QmxvY2sgKHNlbGYpIHtcbiAgc2VsZi5fcHJldiA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgcmV0dXJuIHNlbGYuX3ByZXZcbn1cblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rKSB7XG4gIHdoaWxlIChzZWxmLl9jYWNoZS5sZW5ndGggPCBjaHVuay5sZW5ndGgpIHtcbiAgICBzZWxmLl9jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3NlbGYuX2NhY2hlLCBnZXRCbG9jayhzZWxmKV0pXG4gIH1cblxuICB2YXIgcGFkID0gc2VsZi5fY2FjaGUuc2xpY2UoMCwgY2h1bmsubGVuZ3RoKVxuICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGNodW5rLmxlbmd0aClcbiAgcmV0dXJuIHhvcihjaHVuaywgcGFkKVxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdmNIVmliR2xqTFdWdVkzSjVjSFF2Ym05a1pWOXRiMlIxYkdWekwzQmhjbk5sTFdGemJqRXZibTlrWlY5dGIyUjFiR1Z6TDJKeWIzZHpaWEpwWm5rdFlXVnpMMjF2WkdWekwyOW1ZaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlIaHZjaUE5SUhKbGNYVnBjbVVvSjJKMVptWmxjaTE0YjNJbktWeHVYRzVtZFc1amRHbHZiaUJuWlhSQ2JHOWpheUFvYzJWc1ppa2dlMXh1SUNCelpXeG1MbDl3Y21WMklEMGdjMlZzWmk1ZlkybHdhR1Z5TG1WdVkzSjVjSFJDYkc5amF5aHpaV3htTGw5d2NtVjJLVnh1SUNCeVpYUjFjbTRnYzJWc1ppNWZjSEpsZGx4dWZWeHVYRzVsZUhCdmNuUnpMbVZ1WTNKNWNIUWdQU0JtZFc1amRHbHZiaUFvYzJWc1ppd2dZMmgxYm1zcElIdGNiaUFnZDJocGJHVWdLSE5sYkdZdVgyTmhZMmhsTG14bGJtZDBhQ0E4SUdOb2RXNXJMbXhsYm1kMGFDa2dlMXh1SUNBZ0lITmxiR1l1WDJOaFkyaGxJRDBnUW5WbVptVnlMbU52Ym1OaGRDaGJjMlZzWmk1ZlkyRmphR1VzSUdkbGRFSnNiMk5yS0hObGJHWXBYU2xjYmlBZ2ZWeHVYRzRnSUhaaGNpQndZV1FnUFNCelpXeG1MbDlqWVdOb1pTNXpiR2xqWlNnd0xDQmphSFZ1YXk1c1pXNW5kR2dwWEc0Z0lITmxiR1l1WDJOaFkyaGxJRDBnYzJWc1ppNWZZMkZqYUdVdWMyeHBZMlVvWTJoMWJtc3ViR1Z1WjNSb0tWeHVJQ0J5WlhSMWNtNGdlRzl5S0dOb2RXNXJMQ0J3WVdRcFhHNTlYRzRpWFgwPSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZnVuY3Rpb24gaW5jcjMyIChpdikge1xuICB2YXIgbGVuID0gaXYubGVuZ3RoXG4gIHZhciBpdGVtXG4gIHdoaWxlIChsZW4tLSkge1xuICAgIGl0ZW0gPSBpdi5yZWFkVUludDgobGVuKVxuICAgIGlmIChpdGVtID09PSAyNTUpIHtcbiAgICAgIGl2LndyaXRlVUludDgoMCwgbGVuKVxuICAgIH0gZWxzZSB7XG4gICAgICBpdGVtKytcbiAgICAgIGl2LndyaXRlVUludDgoaXRlbSwgbGVuKVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QmxvY2sgKHNlbGYpIHtcbiAgdmFyIG91dCA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgaW5jcjMyKHNlbGYuX3ByZXYpXG4gIHJldHVybiBvdXRcbn1cblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rKSB7XG4gIHdoaWxlIChzZWxmLl9jYWNoZS5sZW5ndGggPCBjaHVuay5sZW5ndGgpIHtcbiAgICBzZWxmLl9jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3NlbGYuX2NhY2hlLCBnZXRCbG9jayhzZWxmKV0pXG4gIH1cbiAgdmFyIHBhZCA9IHNlbGYuX2NhY2hlLnNsaWNlKDAsIGNodW5rLmxlbmd0aClcbiAgc2VsZi5fY2FjaGUgPSBzZWxmLl9jYWNoZS5zbGljZShjaHVuay5sZW5ndGgpXG4gIHJldHVybiB4b3IoY2h1bmssIHBhZClcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZjSFZpYkdsakxXVnVZM0o1Y0hRdmJtOWtaVjl0YjJSMWJHVnpMM0JoY25ObExXRnpiakV2Ym05a1pWOXRiMlIxYkdWekwySnliM2R6WlhKcFpua3RZV1Z6TDIxdlpHVnpMMk4wY2k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUhodmNpQTlJSEpsY1hWcGNtVW9KMkoxWm1abGNpMTRiM0luS1Z4dVhHNW1kVzVqZEdsdmJpQnBibU55TXpJZ0tHbDJLU0I3WEc0Z0lIWmhjaUJzWlc0Z1BTQnBkaTVzWlc1bmRHaGNiaUFnZG1GeUlHbDBaVzFjYmlBZ2QyaHBiR1VnS0d4bGJpMHRLU0I3WEc0Z0lDQWdhWFJsYlNBOUlHbDJMbkpsWVdSVlNXNTBPQ2hzWlc0cFhHNGdJQ0FnYVdZZ0tHbDBaVzBnUFQwOUlESTFOU2tnZTF4dUlDQWdJQ0FnYVhZdWQzSnBkR1ZWU1c1ME9DZ3dMQ0JzWlc0cFhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR2wwWlcwcksxeHVJQ0FnSUNBZ2FYWXVkM0pwZEdWVlNXNTBPQ2hwZEdWdExDQnNaVzRwWEc0Z0lDQWdJQ0JpY21WaGExeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm5aWFJDYkc5amF5QW9jMlZzWmlrZ2UxeHVJQ0IyWVhJZ2IzVjBJRDBnYzJWc1ppNWZZMmx3YUdWeUxtVnVZM0o1Y0hSQ2JHOWpheWh6Wld4bUxsOXdjbVYyS1Z4dUlDQnBibU55TXpJb2MyVnNaaTVmY0hKbGRpbGNiaUFnY21WMGRYSnVJRzkxZEZ4dWZWeHVYRzVsZUhCdmNuUnpMbVZ1WTNKNWNIUWdQU0JtZFc1amRHbHZiaUFvYzJWc1ppd2dZMmgxYm1zcElIdGNiaUFnZDJocGJHVWdLSE5sYkdZdVgyTmhZMmhsTG14bGJtZDBhQ0E4SUdOb2RXNXJMbXhsYm1kMGFDa2dlMXh1SUNBZ0lITmxiR1l1WDJOaFkyaGxJRDBnUW5WbVptVnlMbU52Ym1OaGRDaGJjMlZzWmk1ZlkyRmphR1VzSUdkbGRFSnNiMk5yS0hObGJHWXBYU2xjYmlBZ2ZWeHVJQ0IyWVhJZ2NHRmtJRDBnYzJWc1ppNWZZMkZqYUdVdWMyeHBZMlVvTUN3Z1kyaDFibXN1YkdWdVozUm9LVnh1SUNCelpXeG1MbDlqWVdOb1pTQTlJSE5sYkdZdVgyTmhZMmhsTG5Oc2FXTmxLR05vZFc1ckxteGxibWQwYUNsY2JpQWdjbVYwZFhKdUlIaHZjaWhqYUhWdWF5d2djR0ZrS1Z4dWZWeHVJbDE5IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xuZnVuY3Rpb24gZW5jcnlwdEJ5dGUgKHNlbGYsIGJ5dGVQYXJhbSwgZGVjcnlwdCkge1xuICB2YXIgcGFkID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICB2YXIgb3V0ID0gcGFkWzBdIF4gYnl0ZVBhcmFtXG4gIHNlbGYuX3ByZXYgPSBCdWZmZXIuY29uY2F0KFtzZWxmLl9wcmV2LnNsaWNlKDEpLCBuZXcgQnVmZmVyKFtkZWNyeXB0ID8gYnl0ZVBhcmFtIDogb3V0XSldKVxuICByZXR1cm4gb3V0XG59XG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmssIGRlY3J5cHQpIHtcbiAgdmFyIGxlbiA9IGNodW5rLmxlbmd0aFxuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcihsZW4pXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIG91dFtpXSA9IGVuY3J5cHRCeXRlKHNlbGYsIGNodW5rW2ldLCBkZWNyeXB0KVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZjSFZpYkdsakxXVnVZM0o1Y0hRdmJtOWtaVjl0YjJSMWJHVnpMM0JoY25ObExXRnpiakV2Ym05a1pWOXRiMlIxYkdWekwySnliM2R6WlhKcFpua3RZV1Z6TDIxdlpHVnpMMk5tWWpndWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2labWxzWlNJNkltZGxibVZ5WVhSbFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUptZFc1amRHbHZiaUJsYm1OeWVYQjBRbmwwWlNBb2MyVnNaaXdnWW5sMFpWQmhjbUZ0TENCa1pXTnllWEIwS1NCN1hHNGdJSFpoY2lCd1lXUWdQU0J6Wld4bUxsOWphWEJvWlhJdVpXNWpjbmx3ZEVKc2IyTnJLSE5sYkdZdVgzQnlaWFlwWEc0Z0lIWmhjaUJ2ZFhRZ1BTQndZV1JiTUYwZ1hpQmllWFJsVUdGeVlXMWNiaUFnYzJWc1ppNWZjSEpsZGlBOUlFSjFabVpsY2k1amIyNWpZWFFvVzNObGJHWXVYM0J5WlhZdWMyeHBZMlVvTVNrc0lHNWxkeUJDZFdabVpYSW9XMlJsWTNKNWNIUWdQeUJpZVhSbFVHRnlZVzBnT2lCdmRYUmRLVjBwWEc0Z0lISmxkSFZ5YmlCdmRYUmNibjFjYm1WNGNHOXlkSE11Wlc1amNubHdkQ0E5SUdaMWJtTjBhVzl1SUNoelpXeG1MQ0JqYUhWdWF5d2daR1ZqY25sd2RDa2dlMXh1SUNCMllYSWdiR1Z1SUQwZ1kyaDFibXN1YkdWdVozUm9YRzRnSUhaaGNpQnZkWFFnUFNCdVpYY2dRblZtWm1WeUtHeGxiaWxjYmlBZ2RtRnlJR2tnUFNBdE1WeHVJQ0IzYUdsc1pTQW9LeXRwSUR3Z2JHVnVLU0I3WEc0Z0lDQWdiM1YwVzJsZElEMGdaVzVqY25sd2RFSjVkR1VvYzJWc1ppd2dZMmgxYm10YmFWMHNJR1JsWTNKNWNIUXBYRzRnSUgxY2JpQWdjbVYwZFhKdUlHOTFkRnh1ZlZ4dUlsMTkiLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG5mdW5jdGlvbiBlbmNyeXB0Qnl0ZSAoc2VsZiwgYnl0ZVBhcmFtLCBkZWNyeXB0KSB7XG4gIHZhciBwYWRcbiAgdmFyIGkgPSAtMVxuICB2YXIgbGVuID0gOFxuICB2YXIgb3V0ID0gMFxuICB2YXIgYml0LCB2YWx1ZVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgcGFkID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICAgIGJpdCA9IChieXRlUGFyYW0gJiAoMSA8PCAoNyAtIGkpKSkgPyAweDgwIDogMFxuICAgIHZhbHVlID0gcGFkWzBdIF4gYml0XG4gICAgb3V0ICs9ICgodmFsdWUgJiAweDgwKSA+PiAoaSAlIDgpKVxuICAgIHNlbGYuX3ByZXYgPSBzaGlmdEluKHNlbGYuX3ByZXYsIGRlY3J5cHQgPyBiaXQgOiB2YWx1ZSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmssIGRlY3J5cHQpIHtcbiAgdmFyIGxlbiA9IGNodW5rLmxlbmd0aFxuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcihsZW4pXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIG91dFtpXSA9IGVuY3J5cHRCeXRlKHNlbGYsIGNodW5rW2ldLCBkZWNyeXB0KVxuICB9XG4gIHJldHVybiBvdXRcbn1cbmZ1bmN0aW9uIHNoaWZ0SW4gKGJ1ZmZlciwgdmFsdWUpIHtcbiAgdmFyIGxlbiA9IGJ1ZmZlci5sZW5ndGhcbiAgdmFyIGkgPSAtMVxuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcihidWZmZXIubGVuZ3RoKVxuICBidWZmZXIgPSBCdWZmZXIuY29uY2F0KFtidWZmZXIsIG5ldyBCdWZmZXIoW3ZhbHVlXSldKVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0W2ldID0gYnVmZmVyW2ldIDw8IDEgfCBidWZmZXJbaSArIDFdID4+ICg3KVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZjSFZpYkdsakxXVnVZM0o1Y0hRdmJtOWtaVjl0YjJSMWJHVnpMM0JoY25ObExXRnpiakV2Ym05a1pWOXRiMlIxYkdWekwySnliM2R6WlhKcFpua3RZV1Z6TDIxdlpHVnpMMk5tWWpFdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltWjFibU4wYVc5dUlHVnVZM0o1Y0hSQ2VYUmxJQ2h6Wld4bUxDQmllWFJsVUdGeVlXMHNJR1JsWTNKNWNIUXBJSHRjYmlBZ2RtRnlJSEJoWkZ4dUlDQjJZWElnYVNBOUlDMHhYRzRnSUhaaGNpQnNaVzRnUFNBNFhHNGdJSFpoY2lCdmRYUWdQU0F3WEc0Z0lIWmhjaUJpYVhRc0lIWmhiSFZsWEc0Z0lIZG9hV3hsSUNncksya2dQQ0JzWlc0cElIdGNiaUFnSUNCd1lXUWdQU0J6Wld4bUxsOWphWEJvWlhJdVpXNWpjbmx3ZEVKc2IyTnJLSE5sYkdZdVgzQnlaWFlwWEc0Z0lDQWdZbWwwSUQwZ0tHSjVkR1ZRWVhKaGJTQW1JQ2d4SUR3OElDZzNJQzBnYVNrcEtTQS9JREI0T0RBZ09pQXdYRzRnSUNBZ2RtRnNkV1VnUFNCd1lXUmJNRjBnWGlCaWFYUmNiaUFnSUNCdmRYUWdLejBnS0NoMllXeDFaU0FtSURCNE9EQXBJRDQrSUNocElDVWdPQ2twWEc0Z0lDQWdjMlZzWmk1ZmNISmxkaUE5SUhOb2FXWjBTVzRvYzJWc1ppNWZjSEpsZGl3Z1pHVmpjbmx3ZENBL0lHSnBkQ0E2SUhaaGJIVmxLVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnZkWFJjYm4xY2JtVjRjRzl5ZEhNdVpXNWpjbmx3ZENBOUlHWjFibU4wYVc5dUlDaHpaV3htTENCamFIVnVheXdnWkdWamNubHdkQ2tnZTF4dUlDQjJZWElnYkdWdUlEMGdZMmgxYm1zdWJHVnVaM1JvWEc0Z0lIWmhjaUJ2ZFhRZ1BTQnVaWGNnUW5WbVptVnlLR3hsYmlsY2JpQWdkbUZ5SUdrZ1BTQXRNVnh1SUNCM2FHbHNaU0FvS3l0cElEd2diR1Z1S1NCN1hHNGdJQ0FnYjNWMFcybGRJRDBnWlc1amNubHdkRUo1ZEdVb2MyVnNaaXdnWTJoMWJtdGJhVjBzSUdSbFkzSjVjSFFwWEc0Z0lIMWNiaUFnY21WMGRYSnVJRzkxZEZ4dWZWeHVablZ1WTNScGIyNGdjMmhwWm5SSmJpQW9ZblZtWm1WeUxDQjJZV3gxWlNrZ2UxeHVJQ0IyWVhJZ2JHVnVJRDBnWW5WbVptVnlMbXhsYm1kMGFGeHVJQ0IyWVhJZ2FTQTlJQzB4WEc0Z0lIWmhjaUJ2ZFhRZ1BTQnVaWGNnUW5WbVptVnlLR0oxWm1abGNpNXNaVzVuZEdncFhHNGdJR0oxWm1abGNpQTlJRUoxWm1abGNpNWpiMjVqWVhRb1cySjFabVpsY2l3Z2JtVjNJRUoxWm1abGNpaGJkbUZzZFdWZEtWMHBYRzRnSUhkb2FXeGxJQ2dySzJrZ1BDQnNaVzRwSUh0Y2JpQWdJQ0J2ZFhSYmFWMGdQU0JpZFdabVpYSmJhVjBnUER3Z01TQjhJR0oxWm1abGNsdHBJQ3NnTVYwZ1BqNGdLRGNwWEc0Z0lIMWNiaUFnY21WMGRYSnVJRzkxZEZ4dWZWeHVJbDE5IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xudmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgZGF0YSwgZGVjcnlwdCkge1xuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcignJylcbiAgdmFyIGxlblxuXG4gIHdoaWxlIChkYXRhLmxlbmd0aCkge1xuICAgIGlmIChzZWxmLl9jYWNoZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHNlbGYuX2NhY2hlID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICAgICAgc2VsZi5fcHJldiA9IG5ldyBCdWZmZXIoJycpXG4gICAgfVxuXG4gICAgaWYgKHNlbGYuX2NhY2hlLmxlbmd0aCA8PSBkYXRhLmxlbmd0aCkge1xuICAgICAgbGVuID0gc2VsZi5fY2FjaGUubGVuZ3RoXG4gICAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFtvdXQsIGVuY3J5cHRTdGFydChzZWxmLCBkYXRhLnNsaWNlKDAsIGxlbiksIGRlY3J5cHQpXSlcbiAgICAgIGRhdGEgPSBkYXRhLnNsaWNlKGxlbilcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ID0gQnVmZmVyLmNvbmNhdChbb3V0LCBlbmNyeXB0U3RhcnQoc2VsZiwgZGF0YSwgZGVjcnlwdCldKVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3V0XG59XG5mdW5jdGlvbiBlbmNyeXB0U3RhcnQgKHNlbGYsIGRhdGEsIGRlY3J5cHQpIHtcbiAgdmFyIGxlbiA9IGRhdGEubGVuZ3RoXG4gIHZhciBvdXQgPSB4b3IoZGF0YSwgc2VsZi5fY2FjaGUpXG4gIHNlbGYuX2NhY2hlID0gc2VsZi5fY2FjaGUuc2xpY2UobGVuKVxuICBzZWxmLl9wcmV2ID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fcHJldiwgZGVjcnlwdCA/IGRhdGEgOiBvdXRdKVxuICByZXR1cm4gb3V0XG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12Y0hWaWJHbGpMV1Z1WTNKNWNIUXZibTlrWlY5dGIyUjFiR1Z6TDNCaGNuTmxMV0Z6YmpFdmJtOWtaVjl0YjJSMWJHVnpMMkp5YjNkelpYSnBabmt0WVdWekwyMXZaR1Z6TDJObVlpNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlIaHZjaUE5SUhKbGNYVnBjbVVvSjJKMVptWmxjaTE0YjNJbktWeHVYRzVsZUhCdmNuUnpMbVZ1WTNKNWNIUWdQU0JtZFc1amRHbHZiaUFvYzJWc1ppd2daR0YwWVN3Z1pHVmpjbmx3ZENrZ2UxeHVJQ0IyWVhJZ2IzVjBJRDBnYm1WM0lFSjFabVpsY2lnbkp5bGNiaUFnZG1GeUlHeGxibHh1WEc0Z0lIZG9hV3hsSUNoa1lYUmhMbXhsYm1kMGFDa2dlMXh1SUNBZ0lHbG1JQ2h6Wld4bUxsOWpZV05vWlM1c1pXNW5kR2dnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJSE5sYkdZdVgyTmhZMmhsSUQwZ2MyVnNaaTVmWTJsd2FHVnlMbVZ1WTNKNWNIUkNiRzlqYXloelpXeG1MbDl3Y21WMktWeHVJQ0FnSUNBZ2MyVnNaaTVmY0hKbGRpQTlJRzVsZHlCQ2RXWm1aWElvSnljcFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tITmxiR1l1WDJOaFkyaGxMbXhsYm1kMGFDQThQU0JrWVhSaExteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ2JHVnVJRDBnYzJWc1ppNWZZMkZqYUdVdWJHVnVaM1JvWEc0Z0lDQWdJQ0J2ZFhRZ1BTQkNkV1ptWlhJdVkyOXVZMkYwS0Z0dmRYUXNJR1Z1WTNKNWNIUlRkR0Z5ZENoelpXeG1MQ0JrWVhSaExuTnNhV05sS0RBc0lHeGxiaWtzSUdSbFkzSjVjSFFwWFNsY2JpQWdJQ0FnSUdSaGRHRWdQU0JrWVhSaExuTnNhV05sS0d4bGJpbGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnYjNWMElEMGdRblZtWm1WeUxtTnZibU5oZENoYmIzVjBMQ0JsYm1OeWVYQjBVM1JoY25Rb2MyVnNaaXdnWkdGMFlTd2daR1ZqY25sd2RDbGRLVnh1SUNBZ0lDQWdZbkpsWVd0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnYjNWMFhHNTlYRzVtZFc1amRHbHZiaUJsYm1OeWVYQjBVM1JoY25RZ0tITmxiR1lzSUdSaGRHRXNJR1JsWTNKNWNIUXBJSHRjYmlBZ2RtRnlJR3hsYmlBOUlHUmhkR0V1YkdWdVozUm9YRzRnSUhaaGNpQnZkWFFnUFNCNGIzSW9aR0YwWVN3Z2MyVnNaaTVmWTJGamFHVXBYRzRnSUhObGJHWXVYMk5oWTJobElEMGdjMlZzWmk1ZlkyRmphR1V1YzJ4cFkyVW9iR1Z1S1Z4dUlDQnpaV3htTGw5d2NtVjJJRDBnUW5WbVptVnlMbU52Ym1OaGRDaGJjMlZzWmk1ZmNISmxkaXdnWkdWamNubHdkQ0EvSUdSaGRHRWdPaUJ2ZFhSZEtWeHVJQ0J5WlhSMWNtNGdiM1YwWEc1OVhHNGlYWDA9IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xudmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgR0hBU0ggPSByZXF1aXJlKCcuL2doYXNoJylcbnZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcbmluaGVyaXRzKFN0cmVhbUNpcGhlciwgVHJhbnNmb3JtKVxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW1DaXBoZXJcblxuZnVuY3Rpb24gU3RyZWFtQ2lwaGVyIChtb2RlLCBrZXksIGl2LCBkZWNyeXB0KSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTdHJlYW1DaXBoZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBTdHJlYW1DaXBoZXIobW9kZSwga2V5LCBpdilcbiAgfVxuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuICB0aGlzLl9maW5JRCA9IEJ1ZmZlci5jb25jYXQoW2l2LCBuZXcgQnVmZmVyKFswLCAwLCAwLCAxXSldKVxuICBpdiA9IEJ1ZmZlci5jb25jYXQoW2l2LCBuZXcgQnVmZmVyKFswLCAwLCAwLCAyXSldKVxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBuZXcgQnVmZmVyKGl2Lmxlbmd0aClcbiAgdGhpcy5fY2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxuICB0aGlzLl9zZWNDYWNoZSA9IG5ldyBCdWZmZXIoJycpXG4gIHRoaXMuX2RlY3J5cHQgPSBkZWNyeXB0XG4gIHRoaXMuX2FsZW4gPSAwXG4gIHRoaXMuX2xlbiA9IDBcbiAgaXYuY29weSh0aGlzLl9wcmV2KVxuICB0aGlzLl9tb2RlID0gbW9kZVxuICB2YXIgaCA9IG5ldyBCdWZmZXIoNClcbiAgaC5maWxsKDApXG4gIHRoaXMuX2doYXNoID0gbmV3IEdIQVNIKHRoaXMuX2NpcGhlci5lbmNyeXB0QmxvY2soaCkpXG4gIHRoaXMuX2F1dGhUYWcgPSBudWxsXG4gIHRoaXMuX2NhbGxlZCA9IGZhbHNlXG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgaWYgKCF0aGlzLl9jYWxsZWQgJiYgdGhpcy5fYWxlbikge1xuICAgIHZhciBydW1wID0gMTYgLSAodGhpcy5fYWxlbiAlIDE2KVxuICAgIGlmIChydW1wIDwgMTYpIHtcbiAgICAgIHJ1bXAgPSBuZXcgQnVmZmVyKHJ1bXApXG4gICAgICBydW1wLmZpbGwoMClcbiAgICAgIHRoaXMuX2doYXNoLnVwZGF0ZShydW1wKVxuICAgIH1cbiAgfVxuICB0aGlzLl9jYWxsZWQgPSB0cnVlXG4gIHZhciBvdXQgPSB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmspXG4gIGlmICh0aGlzLl9kZWNyeXB0KSB7XG4gICAgdGhpcy5fZ2hhc2gudXBkYXRlKGNodW5rKVxuICB9IGVsc2Uge1xuICAgIHRoaXMuX2doYXNoLnVwZGF0ZShvdXQpXG4gIH1cbiAgdGhpcy5fbGVuICs9IGNodW5rLmxlbmd0aFxuICByZXR1cm4gb3V0XG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuX2RlY3J5cHQgJiYgIXRoaXMuX2F1dGhUYWcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHN0YXRlIG9yIHVuYWJsZSB0byBhdXRoZW50aWNhdGUgZGF0YScpXG4gIH1cbiAgdmFyIHRhZyA9IHhvcih0aGlzLl9naGFzaC5maW5hbCh0aGlzLl9hbGVuICogOCwgdGhpcy5fbGVuICogOCksIHRoaXMuX2NpcGhlci5lbmNyeXB0QmxvY2sodGhpcy5fZmluSUQpKVxuICBpZiAodGhpcy5fZGVjcnlwdCkge1xuICAgIGlmICh4b3JUZXN0KHRhZywgdGhpcy5fYXV0aFRhZykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgc3RhdGUgb3IgdW5hYmxlIHRvIGF1dGhlbnRpY2F0ZSBkYXRhJylcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fYXV0aFRhZyA9IHRhZ1xuICB9XG4gIHRoaXMuX2NpcGhlci5zY3J1YigpXG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLmdldEF1dGhUYWcgPSBmdW5jdGlvbiBnZXRBdXRoVGFnICgpIHtcbiAgaWYgKCF0aGlzLl9kZWNyeXB0ICYmIEJ1ZmZlci5pc0J1ZmZlcih0aGlzLl9hdXRoVGFnKSkge1xuICAgIHJldHVybiB0aGlzLl9hdXRoVGFnXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0aW5nIHRvIGdldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG4gIH1cbn1cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuc2V0QXV0aFRhZyA9IGZ1bmN0aW9uIHNldEF1dGhUYWcgKHRhZykge1xuICBpZiAodGhpcy5fZGVjcnlwdCkge1xuICAgIHRoaXMuX2F1dGhUYWcgPSB0YWdcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRpbmcgdG8gc2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbiAgfVxufVxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5zZXRBQUQgPSBmdW5jdGlvbiBzZXRBQUQgKGJ1Zikge1xuICBpZiAoIXRoaXMuX2NhbGxlZCkge1xuICAgIHRoaXMuX2doYXNoLnVwZGF0ZShidWYpXG4gICAgdGhpcy5fYWxlbiArPSBidWYubGVuZ3RoXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0aW5nIHRvIHNldCBBQUQgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxuICB9XG59XG5mdW5jdGlvbiB4b3JUZXN0IChhLCBiKSB7XG4gIHZhciBvdXQgPSAwXG4gIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICBvdXQrK1xuICB9XG4gIHZhciBsZW4gPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIG91dCArPSAoYVtpXSBeIGJbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdmNIVmliR2xqTFdWdVkzSjVjSFF2Ym05a1pWOXRiMlIxYkdWekwzQmhjbk5sTFdGemJqRXZibTlrWlY5dGIyUjFiR1Z6TDJKeWIzZHpaWEpwWm5rdFlXVnpMMkYxZEdoRGFYQm9aWEl1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW5aaGNpQmhaWE1nUFNCeVpYRjFhWEpsS0NjdUwyRmxjeWNwWEc1MllYSWdWSEpoYm5ObWIzSnRJRDBnY21WeGRXbHlaU2duWTJsd2FHVnlMV0poYzJVbktWeHVkbUZ5SUdsdWFHVnlhWFJ6SUQwZ2NtVnhkV2x5WlNnbmFXNW9aWEpwZEhNbktWeHVkbUZ5SUVkSVFWTklJRDBnY21WeGRXbHlaU2duTGk5bmFHRnphQ2NwWEc1MllYSWdlRzl5SUQwZ2NtVnhkV2x5WlNnblluVm1abVZ5TFhodmNpY3BYRzVwYm1obGNtbDBjeWhUZEhKbFlXMURhWEJvWlhJc0lGUnlZVzV6Wm05eWJTbGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdVM1J5WldGdFEybHdhR1Z5WEc1Y2JtWjFibU4wYVc5dUlGTjBjbVZoYlVOcGNHaGxjaUFvYlc5a1pTd2dhMlY1TENCcGRpd2daR1ZqY25sd2RDa2dlMXh1SUNCcFppQW9JU2gwYUdseklHbHVjM1JoYm1ObGIyWWdVM1J5WldGdFEybHdhR1Z5S1NrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1UzUnlaV0Z0UTJsd2FHVnlLRzF2WkdVc0lHdGxlU3dnYVhZcFhHNGdJSDFjYmlBZ1ZISmhibk5tYjNKdExtTmhiR3dvZEdocGN5bGNiaUFnZEdocGN5NWZabWx1U1VRZ1BTQkNkV1ptWlhJdVkyOXVZMkYwS0Z0cGRpd2dibVYzSUVKMVptWmxjaWhiTUN3Z01Dd2dNQ3dnTVYwcFhTbGNiaUFnYVhZZ1BTQkNkV1ptWlhJdVkyOXVZMkYwS0Z0cGRpd2dibVYzSUVKMVptWmxjaWhiTUN3Z01Dd2dNQ3dnTWwwcFhTbGNiaUFnZEdocGN5NWZZMmx3YUdWeUlEMGdibVYzSUdGbGN5NUJSVk1vYTJWNUtWeHVJQ0IwYUdsekxsOXdjbVYySUQwZ2JtVjNJRUoxWm1abGNpaHBkaTVzWlc1bmRHZ3BYRzRnSUhSb2FYTXVYMk5oWTJobElEMGdibVYzSUVKMVptWmxjaWduSnlsY2JpQWdkR2hwY3k1ZmMyVmpRMkZqYUdVZ1BTQnVaWGNnUW5WbVptVnlLQ2NuS1Z4dUlDQjBhR2x6TGw5a1pXTnllWEIwSUQwZ1pHVmpjbmx3ZEZ4dUlDQjBhR2x6TGw5aGJHVnVJRDBnTUZ4dUlDQjBhR2x6TGw5c1pXNGdQU0F3WEc0Z0lHbDJMbU52Y0hrb2RHaHBjeTVmY0hKbGRpbGNiaUFnZEdocGN5NWZiVzlrWlNBOUlHMXZaR1ZjYmlBZ2RtRnlJR2dnUFNCdVpYY2dRblZtWm1WeUtEUXBYRzRnSUdndVptbHNiQ2d3S1Z4dUlDQjBhR2x6TGw5bmFHRnphQ0E5SUc1bGR5QkhTRUZUU0NoMGFHbHpMbDlqYVhCb1pYSXVaVzVqY25sd2RFSnNiMk5yS0dncEtWeHVJQ0IwYUdsekxsOWhkWFJvVkdGbklEMGdiblZzYkZ4dUlDQjBhR2x6TGw5allXeHNaV1FnUFNCbVlXeHpaVnh1ZlZ4dVUzUnlaV0Z0UTJsd2FHVnlMbkJ5YjNSdmRIbHdaUzVmZFhCa1lYUmxJRDBnWm5WdVkzUnBiMjRnS0dOb2RXNXJLU0I3WEc0Z0lHbG1JQ2doZEdocGN5NWZZMkZzYkdWa0lDWW1JSFJvYVhNdVgyRnNaVzRwSUh0Y2JpQWdJQ0IyWVhJZ2NuVnRjQ0E5SURFMklDMGdLSFJvYVhNdVgyRnNaVzRnSlNBeE5pbGNiaUFnSUNCcFppQW9jblZ0Y0NBOElERTJLU0I3WEc0Z0lDQWdJQ0J5ZFcxd0lEMGdibVYzSUVKMVptWmxjaWh5ZFcxd0tWeHVJQ0FnSUNBZ2NuVnRjQzVtYVd4c0tEQXBYRzRnSUNBZ0lDQjBhR2x6TGw5bmFHRnphQzUxY0dSaGRHVW9jblZ0Y0NsY2JpQWdJQ0I5WEc0Z0lIMWNiaUFnZEdocGN5NWZZMkZzYkdWa0lEMGdkSEoxWlZ4dUlDQjJZWElnYjNWMElEMGdkR2hwY3k1ZmJXOWtaUzVsYm1OeWVYQjBLSFJvYVhNc0lHTm9kVzVyS1Z4dUlDQnBaaUFvZEdocGN5NWZaR1ZqY25sd2RDa2dlMXh1SUNBZ0lIUm9hWE11WDJkb1lYTm9MblZ3WkdGMFpTaGphSFZ1YXlsY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCMGFHbHpMbDluYUdGemFDNTFjR1JoZEdVb2IzVjBLVnh1SUNCOVhHNGdJSFJvYVhNdVgyeGxiaUFyUFNCamFIVnVheTVzWlc1bmRHaGNiaUFnY21WMGRYSnVJRzkxZEZ4dWZWeHVVM1J5WldGdFEybHdhR1Z5TG5CeWIzUnZkSGx3WlM1ZlptbHVZV3dnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUdsbUlDaDBhR2x6TGw5a1pXTnllWEIwSUNZbUlDRjBhR2x6TGw5aGRYUm9WR0ZuS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RWYm5OMWNIQnZjblJsWkNCemRHRjBaU0J2Y2lCMWJtRmliR1VnZEc4Z1lYVjBhR1Z1ZEdsallYUmxJR1JoZEdFbktWeHVJQ0I5WEc0Z0lIWmhjaUIwWVdjZ1BTQjRiM0lvZEdocGN5NWZaMmhoYzJndVptbHVZV3dvZEdocGN5NWZZV3hsYmlBcUlEZ3NJSFJvYVhNdVgyeGxiaUFxSURncExDQjBhR2x6TGw5amFYQm9aWEl1Wlc1amNubHdkRUpzYjJOcktIUm9hWE11WDJacGJrbEVLU2xjYmlBZ2FXWWdLSFJvYVhNdVgyUmxZM0o1Y0hRcElIdGNiaUFnSUNCcFppQW9lRzl5VkdWemRDaDBZV2NzSUhSb2FYTXVYMkYxZEdoVVlXY3BLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMVZ1YzNWd2NHOXlkR1ZrSUhOMFlYUmxJRzl5SUhWdVlXSnNaU0IwYnlCaGRYUm9aVzUwYVdOaGRHVWdaR0YwWVNjcFhHNGdJQ0FnZlZ4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhSb2FYTXVYMkYxZEdoVVlXY2dQU0IwWVdkY2JpQWdmVnh1SUNCMGFHbHpMbDlqYVhCb1pYSXVjMk55ZFdJb0tWeHVmVnh1VTNSeVpXRnRRMmx3YUdWeUxuQnliM1J2ZEhsd1pTNW5aWFJCZFhSb1ZHRm5JRDBnWm5WdVkzUnBiMjRnWjJWMFFYVjBhRlJoWnlBb0tTQjdYRzRnSUdsbUlDZ2hkR2hwY3k1ZlpHVmpjbmx3ZENBbUppQkNkV1ptWlhJdWFYTkNkV1ptWlhJb2RHaHBjeTVmWVhWMGFGUmhaeWtwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZllYVjBhRlJoWjF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduUVhSMFpXMXdkR2x1WnlCMGJ5Qm5aWFFnWVhWMGFDQjBZV2NnYVc0Z2RXNXpkWEJ3YjNKMFpXUWdjM1JoZEdVbktWeHVJQ0I5WEc1OVhHNVRkSEpsWVcxRGFYQm9aWEl1Y0hKdmRHOTBlWEJsTG5ObGRFRjFkR2hVWVdjZ1BTQm1kVzVqZEdsdmJpQnpaWFJCZFhSb1ZHRm5JQ2gwWVdjcElIdGNiaUFnYVdZZ0tIUm9hWE11WDJSbFkzSjVjSFFwSUh0Y2JpQWdJQ0IwYUdsekxsOWhkWFJvVkdGbklEMGdkR0ZuWEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RCZEhSbGJYQjBhVzVuSUhSdklITmxkQ0JoZFhSb0lIUmhaeUJwYmlCMWJuTjFjSEJ2Y25SbFpDQnpkR0YwWlNjcFhHNGdJSDFjYm4xY2JsTjBjbVZoYlVOcGNHaGxjaTV3Y205MGIzUjVjR1V1YzJWMFFVRkVJRDBnWm5WdVkzUnBiMjRnYzJWMFFVRkVJQ2hpZFdZcElIdGNiaUFnYVdZZ0tDRjBhR2x6TGw5allXeHNaV1FwSUh0Y2JpQWdJQ0IwYUdsekxsOW5hR0Z6YUM1MWNHUmhkR1VvWW5WbUtWeHVJQ0FnSUhSb2FYTXVYMkZzWlc0Z0t6MGdZblZtTG14bGJtZDBhRnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25RWFIwWlcxd2RHbHVaeUIwYnlCelpYUWdRVUZFSUdsdUlIVnVjM1Z3Y0c5eWRHVmtJSE4wWVhSbEp5bGNiaUFnZlZ4dWZWeHVablZ1WTNScGIyNGdlRzl5VkdWemRDQW9ZU3dnWWlrZ2UxeHVJQ0IyWVhJZ2IzVjBJRDBnTUZ4dUlDQnBaaUFvWVM1c1pXNW5kR2dnSVQwOUlHSXViR1Z1WjNSb0tTQjdYRzRnSUNBZ2IzVjBLeXRjYmlBZ2ZWeHVJQ0IyWVhJZ2JHVnVJRDBnVFdGMGFDNXRhVzRvWVM1c1pXNW5kR2dzSUdJdWJHVnVaM1JvS1Z4dUlDQjJZWElnYVNBOUlDMHhYRzRnSUhkb2FXeGxJQ2dySzJrZ1BDQnNaVzRwSUh0Y2JpQWdJQ0J2ZFhRZ0t6MGdLR0ZiYVYwZ1hpQmlXMmxkS1Z4dUlDQjlYRzRnSUhKbGRIVnliaUJ2ZFhSY2JuMWNiaUpkZlE9PSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdzdHJlYW0nKS5UcmFuc2Zvcm1cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXInKS5TdHJpbmdEZWNvZGVyXG5tb2R1bGUuZXhwb3J0cyA9IENpcGhlckJhc2VcbmluaGVyaXRzKENpcGhlckJhc2UsIFRyYW5zZm9ybSlcbmZ1bmN0aW9uIENpcGhlckJhc2UgKGhhc2hNb2RlKSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuaGFzaE1vZGUgPSB0eXBlb2YgaGFzaE1vZGUgPT09ICdzdHJpbmcnXG4gIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgdGhpc1toYXNoTW9kZV0gPSB0aGlzLl9maW5hbE9yRGlnZXN0XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5maW5hbCA9IHRoaXMuX2ZpbmFsT3JEaWdlc3RcbiAgfVxuICB0aGlzLl9kZWNvZGVyID0gbnVsbFxuICB0aGlzLl9lbmNvZGluZyA9IG51bGxcbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBpbnB1dEVuYywgb3V0cHV0RW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBkYXRhID0gbmV3IEJ1ZmZlcihkYXRhLCBpbnB1dEVuYylcbiAgfVxuICB2YXIgb3V0RGF0YSA9IHRoaXMuX3VwZGF0ZShkYXRhKVxuICBpZiAodGhpcy5oYXNoTW9kZSkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cbiAgaWYgKG91dHB1dEVuYykge1xuICAgIG91dERhdGEgPSB0aGlzLl90b1N0cmluZyhvdXREYXRhLCBvdXRwdXRFbmMpXG4gIH1cbiAgcmV0dXJuIG91dERhdGFcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QXV0b1BhZGRpbmcgPSBmdW5jdGlvbiAoKSB7fVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5nZXRBdXRoVGFnID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBnZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBdXRoVGFnID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBzZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBQUQgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhYWQgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGRhdGEsIF8sIG5leHQpIHtcbiAgdmFyIGVyclxuICB0cnkge1xuICAgIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgICB0aGlzLl91cGRhdGUoZGF0YSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXNoKHRoaXMuX3VwZGF0ZShkYXRhKSlcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnIgPSBlXG4gIH0gZmluYWxseSB7XG4gICAgbmV4dChlcnIpXG4gIH1cbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLl9mbHVzaCA9IGZ1bmN0aW9uIChkb25lKSB7XG4gIHZhciBlcnJcbiAgdHJ5IHtcbiAgICB0aGlzLnB1c2godGhpcy5fZmluYWwoKSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfSBmaW5hbGx5IHtcbiAgICBkb25lKGVycilcbiAgfVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZpbmFsT3JEaWdlc3QgPSBmdW5jdGlvbiAob3V0cHV0RW5jKSB7XG4gIHZhciBvdXREYXRhID0gdGhpcy5fZmluYWwoKSB8fCBuZXcgQnVmZmVyKCcnKVxuICBpZiAob3V0cHV0RW5jKSB7XG4gICAgb3V0RGF0YSA9IHRoaXMuX3RvU3RyaW5nKG91dERhdGEsIG91dHB1dEVuYywgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb3V0RGF0YVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fdG9TdHJpbmcgPSBmdW5jdGlvbiAodmFsdWUsIGVuYywgZmluYWwpIHtcbiAgaWYgKCF0aGlzLl9kZWNvZGVyKSB7XG4gICAgdGhpcy5fZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYylcbiAgICB0aGlzLl9lbmNvZGluZyA9IGVuY1xuICB9XG4gIGlmICh0aGlzLl9lbmNvZGluZyAhPT0gZW5jKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYW5cXCd0IHN3aXRjaCBlbmNvZGluZ3MnKVxuICB9XG4gIHZhciBvdXQgPSB0aGlzLl9kZWNvZGVyLndyaXRlKHZhbHVlKVxuICBpZiAoZmluYWwpIHtcbiAgICBvdXQgKz0gdGhpcy5fZGVjb2Rlci5lbmQoKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZjSFZpYkdsakxXVnVZM0o1Y0hRdmJtOWtaVjl0YjJSMWJHVnpMM0JoY25ObExXRnpiakV2Ym05a1pWOXRiMlIxYkdWekwySnliM2R6WlhKcFpua3RZV1Z6TDI1dlpHVmZiVzlrZFd4bGN5OWphWEJvWlhJdFltRnpaUzlwYm1SbGVDNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCVWNtRnVjMlp2Y20wZ1BTQnlaWEYxYVhKbEtDZHpkSEpsWVcwbktTNVVjbUZ1YzJadmNtMWNiblpoY2lCcGJtaGxjbWwwY3lBOUlISmxjWFZwY21Vb0oybHVhR1Z5YVhSekp5bGNiblpoY2lCVGRISnBibWRFWldOdlpHVnlJRDBnY21WeGRXbHlaU2duYzNSeWFXNW5YMlJsWTI5a1pYSW5LUzVUZEhKcGJtZEVaV052WkdWeVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlFTnBjR2hsY2tKaGMyVmNibWx1YUdWeWFYUnpLRU5wY0dobGNrSmhjMlVzSUZSeVlXNXpabTl5YlNsY2JtWjFibU4wYVc5dUlFTnBjR2hsY2tKaGMyVWdLR2hoYzJoTmIyUmxLU0I3WEc0Z0lGUnlZVzV6Wm05eWJTNWpZV3hzS0hSb2FYTXBYRzRnSUhSb2FYTXVhR0Z6YUUxdlpHVWdQU0IwZVhCbGIyWWdhR0Z6YUUxdlpHVWdQVDA5SUNkemRISnBibWNuWEc0Z0lHbG1JQ2gwYUdsekxtaGhjMmhOYjJSbEtTQjdYRzRnSUNBZ2RHaHBjMXRvWVhOb1RXOWtaVjBnUFNCMGFHbHpMbDltYVc1aGJFOXlSR2xuWlhOMFhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2RHaHBjeTVtYVc1aGJDQTlJSFJvYVhNdVgyWnBibUZzVDNKRWFXZGxjM1JjYmlBZ2ZWeHVJQ0IwYUdsekxsOWtaV052WkdWeUlEMGdiblZzYkZ4dUlDQjBhR2x6TGw5bGJtTnZaR2x1WnlBOUlHNTFiR3hjYm4xY2JrTnBjR2hsY2tKaGMyVXVjSEp2ZEc5MGVYQmxMblZ3WkdGMFpTQTlJR1oxYm1OMGFXOXVJQ2hrWVhSaExDQnBibkIxZEVWdVl5d2diM1YwY0hWMFJXNWpLU0I3WEc0Z0lHbG1JQ2gwZVhCbGIyWWdaR0YwWVNBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQmtZWFJoSUQwZ2JtVjNJRUoxWm1abGNpaGtZWFJoTENCcGJuQjFkRVZ1WXlsY2JpQWdmVnh1SUNCMllYSWdiM1YwUkdGMFlTQTlJSFJvYVhNdVgzVndaR0YwWlNoa1lYUmhLVnh1SUNCcFppQW9kR2hwY3k1b1lYTm9UVzlrWlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdselhHNGdJSDFjYmlBZ2FXWWdLRzkxZEhCMWRFVnVZeWtnZTF4dUlDQWdJRzkxZEVSaGRHRWdQU0IwYUdsekxsOTBiMU4wY21sdVp5aHZkWFJFWVhSaExDQnZkWFJ3ZFhSRmJtTXBYRzRnSUgxY2JpQWdjbVYwZFhKdUlHOTFkRVJoZEdGY2JuMWNibHh1UTJsd2FHVnlRbUZ6WlM1d2NtOTBiM1I1Y0dVdWMyVjBRWFYwYjFCaFpHUnBibWNnUFNCbWRXNWpkR2x2YmlBb0tTQjdmVnh1WEc1RGFYQm9aWEpDWVhObExuQnliM1J2ZEhsd1pTNW5aWFJCZFhSb1ZHRm5JRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KM1J5ZVdsdVp5QjBieUJuWlhRZ1lYVjBhQ0IwWVdjZ2FXNGdkVzV6ZFhCd2IzSjBaV1FnYzNSaGRHVW5LVnh1ZlZ4dVhHNURhWEJvWlhKQ1lYTmxMbkJ5YjNSdmRIbHdaUzV6WlhSQmRYUm9WR0ZuSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjNSeWVXbHVaeUIwYnlCelpYUWdZWFYwYUNCMFlXY2dhVzRnZFc1emRYQndiM0owWldRZ2MzUmhkR1VuS1Z4dWZWeHVYRzVEYVhCb1pYSkNZWE5sTG5CeWIzUnZkSGx3WlM1elpYUkJRVVFnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduZEhKNWFXNW5JSFJ2SUhObGRDQmhZV1FnYVc0Z2RXNXpkWEJ3YjNKMFpXUWdjM1JoZEdVbktWeHVmVnh1WEc1RGFYQm9aWEpDWVhObExuQnliM1J2ZEhsd1pTNWZkSEpoYm5ObWIzSnRJRDBnWm5WdVkzUnBiMjRnS0dSaGRHRXNJRjhzSUc1bGVIUXBJSHRjYmlBZ2RtRnlJR1Z5Y2x4dUlDQjBjbmtnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbWhoYzJoTmIyUmxLU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOTFjR1JoZEdVb1pHRjBZU2xjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV3ZFhOb0tIUm9hWE11WDNWd1pHRjBaU2hrWVhSaEtTbGNiaUFnSUNCOVhHNGdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0JsY25JZ1BTQmxYRzRnSUgwZ1ptbHVZV3hzZVNCN1hHNGdJQ0FnYm1WNGRDaGxjbklwWEc0Z0lIMWNibjFjYmtOcGNHaGxja0poYzJVdWNISnZkRzkwZVhCbExsOW1iSFZ6YUNBOUlHWjFibU4wYVc5dUlDaGtiMjVsS1NCN1hHNGdJSFpoY2lCbGNuSmNiaUFnZEhKNUlIdGNiaUFnSUNCMGFHbHpMbkIxYzJnb2RHaHBjeTVmWm1sdVlXd29LU2xjYmlBZ2ZTQmpZWFJqYUNBb1pTa2dlMXh1SUNBZ0lHVnljaUE5SUdWY2JpQWdmU0JtYVc1aGJHeDVJSHRjYmlBZ0lDQmtiMjVsS0dWeWNpbGNiaUFnZlZ4dWZWeHVRMmx3YUdWeVFtRnpaUzV3Y205MGIzUjVjR1V1WDJacGJtRnNUM0pFYVdkbGMzUWdQU0JtZFc1amRHbHZiaUFvYjNWMGNIVjBSVzVqS1NCN1hHNGdJSFpoY2lCdmRYUkVZWFJoSUQwZ2RHaHBjeTVmWm1sdVlXd29LU0I4ZkNCdVpYY2dRblZtWm1WeUtDY25LVnh1SUNCcFppQW9iM1YwY0hWMFJXNWpLU0I3WEc0Z0lDQWdiM1YwUkdGMFlTQTlJSFJvYVhNdVgzUnZVM1J5YVc1bktHOTFkRVJoZEdFc0lHOTFkSEIxZEVWdVl5d2dkSEoxWlNsY2JpQWdmVnh1SUNCeVpYUjFjbTRnYjNWMFJHRjBZVnh1ZlZ4dVhHNURhWEJvWlhKQ1lYTmxMbkJ5YjNSdmRIbHdaUzVmZEc5VGRISnBibWNnUFNCbWRXNWpkR2x2YmlBb2RtRnNkV1VzSUdWdVl5d2dabWx1WVd3cElIdGNiaUFnYVdZZ0tDRjBhR2x6TGw5a1pXTnZaR1Z5S1NCN1hHNGdJQ0FnZEdocGN5NWZaR1ZqYjJSbGNpQTlJRzVsZHlCVGRISnBibWRFWldOdlpHVnlLR1Z1WXlsY2JpQWdJQ0IwYUdsekxsOWxibU52WkdsdVp5QTlJR1Z1WTF4dUlDQjlYRzRnSUdsbUlDaDBhR2x6TGw5bGJtTnZaR2x1WnlBaFBUMGdaVzVqS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RqWVc1Y1hDZDBJSE4zYVhSamFDQmxibU52WkdsdVozTW5LVnh1SUNCOVhHNGdJSFpoY2lCdmRYUWdQU0IwYUdsekxsOWtaV052WkdWeUxuZHlhWFJsS0haaGJIVmxLVnh1SUNCcFppQW9abWx1WVd3cElIdGNiaUFnSUNCdmRYUWdLejBnZEdocGN5NWZaR1ZqYjJSbGNpNWxibVFvS1Z4dUlDQjlYRzRnSUhKbGRIVnliaUJ2ZFhSY2JuMWNiaUpkZlE9PSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geG9yIChhLCBiKSB7XG4gIHZhciBsZW5ndGggPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpXG4gIHZhciBidWZmZXIgPSBuZXcgQnVmZmVyKGxlbmd0aClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgYnVmZmVyW2ldID0gYVtpXSBeIGJbaV1cbiAgfVxuXG4gIHJldHVybiBidWZmZXJcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZjSFZpYkdsakxXVnVZM0o1Y0hRdmJtOWtaVjl0YjJSMWJHVnpMM0JoY25ObExXRnpiakV2Ym05a1pWOXRiMlIxYkdWekwySnliM2R6WlhKcFpua3RZV1Z6TDI1dlpHVmZiVzlrZFd4bGN5OWlkV1ptWlhJdGVHOXlMMmx1WkdWNExtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUhodmNpQW9ZU3dnWWlrZ2UxeHVJQ0IyWVhJZ2JHVnVaM1JvSUQwZ1RXRjBhQzV0YVc0b1lTNXNaVzVuZEdnc0lHSXViR1Z1WjNSb0tWeHVJQ0IyWVhJZ1luVm1abVZ5SUQwZ2JtVjNJRUoxWm1abGNpaHNaVzVuZEdncFhHNWNiaUFnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCc1pXNW5kR2c3SUNzcmFTa2dlMXh1SUNBZ0lHSjFabVpsY2x0cFhTQTlJR0ZiYVYwZ1hpQmlXMmxkWEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnWW5WbVptVnlYRzU5WEc0aVhYMD0iLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG52YXIgemVyb3MgPSBuZXcgQnVmZmVyKDE2KVxuemVyb3MuZmlsbCgwKVxubW9kdWxlLmV4cG9ydHMgPSBHSEFTSFxuZnVuY3Rpb24gR0hBU0ggKGtleSkge1xuICB0aGlzLmggPSBrZXlcbiAgdGhpcy5zdGF0ZSA9IG5ldyBCdWZmZXIoMTYpXG4gIHRoaXMuc3RhdGUuZmlsbCgwKVxuICB0aGlzLmNhY2hlID0gbmV3IEJ1ZmZlcignJylcbn1cbi8vIGZyb20gaHR0cDovL2JpdHdpc2VzaGlmdGxlZnQuZ2l0aHViLmlvL3NqY2wvZG9jL3N5bWJvbHMvc3JjL2NvcmVfZ2NtLmpzLmh0bWxcbi8vIGJ5IEp1aG8gVsOkaMOkLUhlcnR0dWFcbkdIQVNILnByb3RvdHlwZS5naGFzaCA9IGZ1bmN0aW9uIChibG9jaykge1xuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBibG9jay5sZW5ndGgpIHtcbiAgICB0aGlzLnN0YXRlW2ldIF49IGJsb2NrW2ldXG4gIH1cbiAgdGhpcy5fbXVsdGlwbHkoKVxufVxuXG5HSEFTSC5wcm90b3R5cGUuX211bHRpcGx5ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgVmkgPSB0b0FycmF5KHRoaXMuaClcbiAgdmFyIFppID0gWzAsIDAsIDAsIDBdXG4gIHZhciBqLCB4aSwgbHNiX1ZpXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IDEyOCkge1xuICAgIHhpID0gKHRoaXMuc3RhdGVbfn4oaSAvIDgpXSAmICgxIDw8ICg3IC0gaSAlIDgpKSkgIT09IDBcbiAgICBpZiAoeGkpIHtcbiAgICAgIC8vIFpfaSsxID0gWl9pIF4gVl9pXG4gICAgICBaaSA9IHhvcihaaSwgVmkpXG4gICAgfVxuXG4gICAgLy8gU3RvcmUgdGhlIHZhbHVlIG9mIExTQihWX2kpXG4gICAgbHNiX1ZpID0gKFZpWzNdICYgMSkgIT09IDBcblxuICAgIC8vIFZfaSsxID0gVl9pID4+IDFcbiAgICBmb3IgKGogPSAzOyBqID4gMDsgai0tKSB7XG4gICAgICBWaVtqXSA9IChWaVtqXSA+Pj4gMSkgfCAoKFZpW2ogLSAxXSAmIDEpIDw8IDMxKVxuICAgIH1cbiAgICBWaVswXSA9IFZpWzBdID4+PiAxXG5cbiAgICAvLyBJZiBMU0IoVl9pKSBpcyAxLCBWX2krMSA9IChWX2kgPj4gMSkgXiBSXG4gICAgaWYgKGxzYl9WaSkge1xuICAgICAgVmlbMF0gPSBWaVswXSBeICgweGUxIDw8IDI0KVxuICAgIH1cbiAgfVxuICB0aGlzLnN0YXRlID0gZnJvbUFycmF5KFppKVxufVxuR0hBU0gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChidWYpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIGJ1Zl0pXG4gIHZhciBjaHVua1xuICB3aGlsZSAodGhpcy5jYWNoZS5sZW5ndGggPj0gMTYpIHtcbiAgICBjaHVuayA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgdGhpcy5naGFzaChjaHVuaylcbiAgfVxufVxuR0hBU0gucHJvdG90eXBlLmZpbmFsID0gZnVuY3Rpb24gKGFibCwgYmwpIHtcbiAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoKSB7XG4gICAgdGhpcy5naGFzaChCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCB6ZXJvc10sIDE2KSlcbiAgfVxuICB0aGlzLmdoYXNoKGZyb21BcnJheShbXG4gICAgMCwgYWJsLFxuICAgIDAsIGJsXG4gIF0pKVxuICByZXR1cm4gdGhpcy5zdGF0ZVxufVxuXG5mdW5jdGlvbiB0b0FycmF5IChidWYpIHtcbiAgcmV0dXJuIFtcbiAgICBidWYucmVhZFVJbnQzMkJFKDApLFxuICAgIGJ1Zi5yZWFkVUludDMyQkUoNCksXG4gICAgYnVmLnJlYWRVSW50MzJCRSg4KSxcbiAgICBidWYucmVhZFVJbnQzMkJFKDEyKVxuICBdXG59XG5mdW5jdGlvbiBmcm9tQXJyYXkgKG91dCkge1xuICBvdXQgPSBvdXQubWFwKGZpeHVwX3VpbnQzMilcbiAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIoMTYpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFswXSwgMClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzFdLCA0KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMl0sIDgpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFszXSwgMTIpXG4gIHJldHVybiBidWZcbn1cbnZhciB1aW50X21heCA9IE1hdGgucG93KDIsIDMyKVxuZnVuY3Rpb24gZml4dXBfdWludDMyICh4KSB7XG4gIHZhciByZXQsIHhfcG9zXG4gIHJldCA9IHggPiB1aW50X21heCB8fCB4IDwgMCA/ICh4X3BvcyA9IE1hdGguYWJzKHgpICUgdWludF9tYXgsIHggPCAwID8gdWludF9tYXggLSB4X3BvcyA6IHhfcG9zKSA6IHhcbiAgcmV0dXJuIHJldFxufVxuZnVuY3Rpb24geG9yIChhLCBiKSB7XG4gIHJldHVybiBbXG4gICAgYVswXSBeIGJbMF0sXG4gICAgYVsxXSBeIGJbMV0sXG4gICAgYVsyXSBeIGJbMl0sXG4gICAgYVszXSBeIGJbM11cbiAgXVxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdmNIVmliR2xqTFdWdVkzSjVjSFF2Ym05a1pWOXRiMlIxYkdWekwzQmhjbk5sTFdGemJqRXZibTlrWlY5dGIyUjFiR1Z6TDJKeWIzZHpaWEpwWm5rdFlXVnpMMmRvWVhOb0xtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW5aaGNpQjZaWEp2Y3lBOUlHNWxkeUJDZFdabVpYSW9NVFlwWEc1NlpYSnZjeTVtYVd4c0tEQXBYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRWRJUVZOSVhHNW1kVzVqZEdsdmJpQkhTRUZUU0NBb2EyVjVLU0I3WEc0Z0lIUm9hWE11YUNBOUlHdGxlVnh1SUNCMGFHbHpMbk4wWVhSbElEMGdibVYzSUVKMVptWmxjaWd4TmlsY2JpQWdkR2hwY3k1emRHRjBaUzVtYVd4c0tEQXBYRzRnSUhSb2FYTXVZMkZqYUdVZ1BTQnVaWGNnUW5WbVptVnlLQ2NuS1Z4dWZWeHVMeThnWm5KdmJTQm9kSFJ3T2k4dlltbDBkMmx6WlhOb2FXWjBiR1ZtZEM1bmFYUm9kV0l1YVc4dmMycGpiQzlrYjJNdmMzbHRZbTlzY3k5emNtTXZZMjl5WlY5blkyMHVhbk11YUhSdGJGeHVMeThnWW5rZ1NuVm9ieUJXdzZSb3c2UXRTR1Z5ZEhSMVlWeHVSMGhCVTBndWNISnZkRzkwZVhCbExtZG9ZWE5vSUQwZ1puVnVZM1JwYjI0Z0tHSnNiMk5yS1NCN1hHNGdJSFpoY2lCcElEMGdMVEZjYmlBZ2QyaHBiR1VnS0NzcmFTQThJR0pzYjJOckxteGxibWQwYUNrZ2UxeHVJQ0FnSUhSb2FYTXVjM1JoZEdWYmFWMGdYajBnWW14dlkydGJhVjFjYmlBZ2ZWeHVJQ0IwYUdsekxsOXRkV3gwYVhCc2VTZ3BYRzU5WEc1Y2JrZElRVk5JTG5CeWIzUnZkSGx3WlM1ZmJYVnNkR2x3YkhrZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lIWmhjaUJXYVNBOUlIUnZRWEp5WVhrb2RHaHBjeTVvS1Z4dUlDQjJZWElnV21rZ1BTQmJNQ3dnTUN3Z01Dd2dNRjFjYmlBZ2RtRnlJR29zSUhocExDQnNjMkpmVm1sY2JpQWdkbUZ5SUdrZ1BTQXRNVnh1SUNCM2FHbHNaU0FvS3l0cElEd2dNVEk0S1NCN1hHNGdJQ0FnZUdrZ1BTQW9kR2hwY3k1emRHRjBaVnQrZmlocElDOGdPQ2xkSUNZZ0tERWdQRHdnS0RjZ0xTQnBJQ1VnT0NrcEtTQWhQVDBnTUZ4dUlDQWdJR2xtSUNoNGFTa2dlMXh1SUNBZ0lDQWdMeThnV2w5cEt6RWdQU0JhWDJrZ1hpQldYMmxjYmlBZ0lDQWdJRnBwSUQwZ2VHOXlLRnBwTENCV2FTbGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QlRkRzl5WlNCMGFHVWdkbUZzZFdVZ2IyWWdURk5DS0ZaZmFTbGNiaUFnSUNCc2MySmZWbWtnUFNBb1ZtbGJNMTBnSmlBeEtTQWhQVDBnTUZ4dVhHNGdJQ0FnTHk4Z1ZsOXBLekVnUFNCV1gya2dQajRnTVZ4dUlDQWdJR1p2Y2lBb2FpQTlJRE03SUdvZ1BpQXdPeUJxTFMwcElIdGNiaUFnSUNBZ0lGWnBXMnBkSUQwZ0tGWnBXMnBkSUQ0K1BpQXhLU0I4SUNnb1ZtbGJhaUF0SURGZElDWWdNU2tnUER3Z016RXBYRzRnSUNBZ2ZWeHVJQ0FnSUZacFd6QmRJRDBnVm1sYk1GMGdQajQrSURGY2JseHVJQ0FnSUM4dklFbG1JRXhUUWloV1gya3BJR2x6SURFc0lGWmZhU3N4SUQwZ0tGWmZhU0ErUGlBeEtTQmVJRkpjYmlBZ0lDQnBaaUFvYkhOaVgxWnBLU0I3WEc0Z0lDQWdJQ0JXYVZzd1hTQTlJRlpwV3pCZElGNGdLREI0WlRFZ1BEd2dNalFwWEc0Z0lDQWdmVnh1SUNCOVhHNGdJSFJvYVhNdWMzUmhkR1VnUFNCbWNtOXRRWEp5WVhrb1dta3BYRzU5WEc1SFNFRlRTQzV3Y205MGIzUjVjR1V1ZFhCa1lYUmxJRDBnWm5WdVkzUnBiMjRnS0dKMVppa2dlMXh1SUNCMGFHbHpMbU5oWTJobElEMGdRblZtWm1WeUxtTnZibU5oZENoYmRHaHBjeTVqWVdOb1pTd2dZblZtWFNsY2JpQWdkbUZ5SUdOb2RXNXJYRzRnSUhkb2FXeGxJQ2gwYUdsekxtTmhZMmhsTG14bGJtZDBhQ0ErUFNBeE5pa2dlMXh1SUNBZ0lHTm9kVzVySUQwZ2RHaHBjeTVqWVdOb1pTNXpiR2xqWlNnd0xDQXhOaWxjYmlBZ0lDQjBhR2x6TG1OaFkyaGxJRDBnZEdocGN5NWpZV05vWlM1emJHbGpaU2d4TmlsY2JpQWdJQ0IwYUdsekxtZG9ZWE5vS0dOb2RXNXJLVnh1SUNCOVhHNTlYRzVIU0VGVFNDNXdjbTkwYjNSNWNHVXVabWx1WVd3Z1BTQm1kVzVqZEdsdmJpQW9ZV0pzTENCaWJDa2dlMXh1SUNCcFppQW9kR2hwY3k1allXTm9aUzVzWlc1bmRHZ3BJSHRjYmlBZ0lDQjBhR2x6TG1kb1lYTm9LRUoxWm1abGNpNWpiMjVqWVhRb1czUm9hWE11WTJGamFHVXNJSHBsY205elhTd2dNVFlwS1Z4dUlDQjlYRzRnSUhSb2FYTXVaMmhoYzJnb1puSnZiVUZ5Y21GNUtGdGNiaUFnSUNBd0xDQmhZbXdzWEc0Z0lDQWdNQ3dnWW14Y2JpQWdYU2twWEc0Z0lISmxkSFZ5YmlCMGFHbHpMbk4wWVhSbFhHNTlYRzVjYm1aMWJtTjBhVzl1SUhSdlFYSnlZWGtnS0dKMVppa2dlMXh1SUNCeVpYUjFjbTRnVzF4dUlDQWdJR0oxWmk1eVpXRmtWVWx1ZERNeVFrVW9NQ2tzWEc0Z0lDQWdZblZtTG5KbFlXUlZTVzUwTXpKQ1JTZzBLU3hjYmlBZ0lDQmlkV1l1Y21WaFpGVkpiblF6TWtKRktEZ3BMRnh1SUNBZ0lHSjFaaTV5WldGa1ZVbHVkRE15UWtVb01USXBYRzRnSUYxY2JuMWNibVoxYm1OMGFXOXVJR1p5YjIxQmNuSmhlU0FvYjNWMEtTQjdYRzRnSUc5MWRDQTlJRzkxZEM1dFlYQW9abWw0ZFhCZmRXbHVkRE15S1Z4dUlDQjJZWElnWW5WbUlEMGdibVYzSUVKMVptWmxjaWd4TmlsY2JpQWdZblZtTG5keWFYUmxWVWx1ZERNeVFrVW9iM1YwV3pCZExDQXdLVnh1SUNCaWRXWXVkM0pwZEdWVlNXNTBNekpDUlNodmRYUmJNVjBzSURRcFhHNGdJR0oxWmk1M2NtbDBaVlZKYm5Rek1rSkZLRzkxZEZzeVhTd2dPQ2xjYmlBZ1luVm1MbmR5YVhSbFZVbHVkRE15UWtVb2IzVjBXek5kTENBeE1pbGNiaUFnY21WMGRYSnVJR0oxWmx4dWZWeHVkbUZ5SUhWcGJuUmZiV0Y0SUQwZ1RXRjBhQzV3YjNjb01pd2dNeklwWEc1bWRXNWpkR2x2YmlCbWFYaDFjRjkxYVc1ME16SWdLSGdwSUh0Y2JpQWdkbUZ5SUhKbGRDd2dlRjl3YjNOY2JpQWdjbVYwSUQwZ2VDQStJSFZwYm5SZmJXRjRJSHg4SUhnZ1BDQXdJRDhnS0hoZmNHOXpJRDBnVFdGMGFDNWhZbk1vZUNrZ0pTQjFhVzUwWDIxaGVDd2dlQ0E4SURBZ1B5QjFhVzUwWDIxaGVDQXRJSGhmY0c5eklEb2dlRjl3YjNNcElEb2dlRnh1SUNCeVpYUjFjbTRnY21WMFhHNTlYRzVtZFc1amRHbHZiaUI0YjNJZ0tHRXNJR0lwSUh0Y2JpQWdjbVYwZFhKdUlGdGNiaUFnSUNCaFd6QmRJRjRnWWxzd1hTeGNiaUFnSUNCaFd6RmRJRjRnWWxzeFhTeGNiaUFnSUNCaFd6SmRJRjRnWWxzeVhTeGNiaUFnSUNCaFd6TmRJRjRnWWxzelhWeHVJQ0JkWEc1OVhHNGlYWDA9IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xuLy8gYmFzZWQgb24gdGhlIGFlcyBpbXBsaW1lbnRhdGlvbiBpbiB0cmlwbGUgc2VjXG4vLyBodHRwczovL2dpdGh1Yi5jb20va2V5YmFzZS90cmlwbGVzZWNcblxuLy8gd2hpY2ggaXMgaW4gdHVybiBiYXNlZCBvbiB0aGUgb25lIGZyb20gY3J5cHRvLWpzXG4vLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy9cblxudmFyIHVpbnRfbWF4ID0gTWF0aC5wb3coMiwgMzIpXG5mdW5jdGlvbiBmaXh1cF91aW50MzIgKHgpIHtcbiAgdmFyIHJldCwgeF9wb3NcbiAgcmV0ID0geCA+IHVpbnRfbWF4IHx8IHggPCAwID8gKHhfcG9zID0gTWF0aC5hYnMoeCkgJSB1aW50X21heCwgeCA8IDAgPyB1aW50X21heCAtIHhfcG9zIDogeF9wb3MpIDogeFxuICByZXR1cm4gcmV0XG59XG5mdW5jdGlvbiBzY3J1Yl92ZWMgKHYpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2Lmxlbmd0aDsgdisrKSB7XG4gICAgdltpXSA9IDBcbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gR2xvYmFsICgpIHtcbiAgdGhpcy5TQk9YID0gW11cbiAgdGhpcy5JTlZfU0JPWCA9IFtdXG4gIHRoaXMuU1VCX01JWCA9IFtbXSwgW10sIFtdLCBbXV1cbiAgdGhpcy5JTlZfU1VCX01JWCA9IFtbXSwgW10sIFtdLCBbXV1cbiAgdGhpcy5pbml0KClcbiAgdGhpcy5SQ09OID0gWzB4MDAsIDB4MDEsIDB4MDIsIDB4MDQsIDB4MDgsIDB4MTAsIDB4MjAsIDB4NDAsIDB4ODAsIDB4MWIsIDB4MzZdXG59XG5cbkdsb2JhbC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGQsIGksIHN4LCB0LCB4LCB4MiwgeDQsIHg4LCB4aSwgX2lcbiAgZCA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9pLCBfcmVzdWx0c1xuICAgIF9yZXN1bHRzID0gW11cbiAgICBmb3IgKGkgPSBfaSA9IDA7IF9pIDwgMjU2OyBpID0gKytfaSkge1xuICAgICAgaWYgKGkgPCAxMjgpIHtcbiAgICAgICAgX3Jlc3VsdHMucHVzaChpIDw8IDEpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfcmVzdWx0cy5wdXNoKChpIDw8IDEpIF4gMHgxMWIpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBfcmVzdWx0c1xuICB9KSgpXG4gIHggPSAwXG4gIHhpID0gMFxuICBmb3IgKGkgPSBfaSA9IDA7IF9pIDwgMjU2OyBpID0gKytfaSkge1xuICAgIHN4ID0geGkgXiAoeGkgPDwgMSkgXiAoeGkgPDwgMikgXiAoeGkgPDwgMykgXiAoeGkgPDwgNClcbiAgICBzeCA9IChzeCA+Pj4gOCkgXiAoc3ggJiAweGZmKSBeIDB4NjNcbiAgICB0aGlzLlNCT1hbeF0gPSBzeFxuICAgIHRoaXMuSU5WX1NCT1hbc3hdID0geFxuICAgIHgyID0gZFt4XVxuICAgIHg0ID0gZFt4Ml1cbiAgICB4OCA9IGRbeDRdXG4gICAgdCA9IChkW3N4XSAqIDB4MTAxKSBeIChzeCAqIDB4MTAxMDEwMClcbiAgICB0aGlzLlNVQl9NSVhbMF1beF0gPSAodCA8PCAyNCkgfCAodCA+Pj4gOClcbiAgICB0aGlzLlNVQl9NSVhbMV1beF0gPSAodCA8PCAxNikgfCAodCA+Pj4gMTYpXG4gICAgdGhpcy5TVUJfTUlYWzJdW3hdID0gKHQgPDwgOCkgfCAodCA+Pj4gMjQpXG4gICAgdGhpcy5TVUJfTUlYWzNdW3hdID0gdFxuICAgIHQgPSAoeDggKiAweDEwMTAxMDEpIF4gKHg0ICogMHgxMDAwMSkgXiAoeDIgKiAweDEwMSkgXiAoeCAqIDB4MTAxMDEwMClcbiAgICB0aGlzLklOVl9TVUJfTUlYWzBdW3N4XSA9ICh0IDw8IDI0KSB8ICh0ID4+PiA4KVxuICAgIHRoaXMuSU5WX1NVQl9NSVhbMV1bc3hdID0gKHQgPDwgMTYpIHwgKHQgPj4+IDE2KVxuICAgIHRoaXMuSU5WX1NVQl9NSVhbMl1bc3hdID0gKHQgPDwgOCkgfCAodCA+Pj4gMjQpXG4gICAgdGhpcy5JTlZfU1VCX01JWFszXVtzeF0gPSB0XG4gICAgaWYgKHggPT09IDApIHtcbiAgICAgIHggPSB4aSA9IDFcbiAgICB9IGVsc2Uge1xuICAgICAgeCA9IHgyIF4gZFtkW2RbeDggXiB4Ml1dXVxuICAgICAgeGkgXj0gZFtkW3hpXV1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxudmFyIEcgPSBuZXcgR2xvYmFsKClcblxuQUVTLmJsb2NrU2l6ZSA9IDQgKiA0XG5cbkFFUy5wcm90b3R5cGUuYmxvY2tTaXplID0gQUVTLmJsb2NrU2l6ZVxuXG5BRVMua2V5U2l6ZSA9IDI1NiAvIDhcblxuQUVTLnByb3RvdHlwZS5rZXlTaXplID0gQUVTLmtleVNpemVcblxuZnVuY3Rpb24gYnVmZmVyVG9BcnJheSAoYnVmKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoIC8gNFxuICB2YXIgb3V0ID0gbmV3IEFycmF5KGxlbilcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0W2ldID0gYnVmLnJlYWRVSW50MzJCRShpICogNClcbiAgfVxuICByZXR1cm4gb3V0XG59XG5mdW5jdGlvbiBBRVMgKGtleSkge1xuICB0aGlzLl9rZXkgPSBidWZmZXJUb0FycmF5KGtleSlcbiAgdGhpcy5fZG9SZXNldCgpXG59XG5cbkFFUy5wcm90b3R5cGUuX2RvUmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpbnZLc1Jvdywga2V5U2l6ZSwga2V5V29yZHMsIGtzUm93LCBrc1Jvd3MsIHRcbiAga2V5V29yZHMgPSB0aGlzLl9rZXlcbiAga2V5U2l6ZSA9IGtleVdvcmRzLmxlbmd0aFxuICB0aGlzLl9uUm91bmRzID0ga2V5U2l6ZSArIDZcbiAga3NSb3dzID0gKHRoaXMuX25Sb3VuZHMgKyAxKSAqIDRcbiAgdGhpcy5fa2V5U2NoZWR1bGUgPSBbXVxuICBmb3IgKGtzUm93ID0gMDsga3NSb3cgPCBrc1Jvd3M7IGtzUm93KyspIHtcbiAgICB0aGlzLl9rZXlTY2hlZHVsZVtrc1Jvd10gPSBrc1JvdyA8IGtleVNpemUgPyBrZXlXb3Jkc1trc1Jvd10gOiAodCA9IHRoaXMuX2tleVNjaGVkdWxlW2tzUm93IC0gMV0sIChrc1JvdyAlIGtleVNpemUpID09PSAwID8gKHQgPSAodCA8PCA4KSB8ICh0ID4+PiAyNCksIHQgPSAoRy5TQk9YW3QgPj4+IDI0XSA8PCAyNCkgfCAoRy5TQk9YWyh0ID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoRy5TQk9YWyh0ID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgRy5TQk9YW3QgJiAweGZmXSwgdCBePSBHLlJDT05bKGtzUm93IC8ga2V5U2l6ZSkgfCAwXSA8PCAyNCkgOiBrZXlTaXplID4gNiAmJiBrc1JvdyAlIGtleVNpemUgPT09IDQgPyB0ID0gKEcuU0JPWFt0ID4+PiAyNF0gPDwgMjQpIHwgKEcuU0JPWFsodCA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKEcuU0JPWFsodCA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IEcuU0JPWFt0ICYgMHhmZl0gOiB2b2lkIDAsIHRoaXMuX2tleVNjaGVkdWxlW2tzUm93IC0ga2V5U2l6ZV0gXiB0KVxuICB9XG4gIHRoaXMuX2ludktleVNjaGVkdWxlID0gW11cbiAgZm9yIChpbnZLc1JvdyA9IDA7IGludktzUm93IDwga3NSb3dzOyBpbnZLc1JvdysrKSB7XG4gICAga3NSb3cgPSBrc1Jvd3MgLSBpbnZLc1Jvd1xuICAgIHQgPSB0aGlzLl9rZXlTY2hlZHVsZVtrc1JvdyAtIChpbnZLc1JvdyAlIDQgPyAwIDogNCldXG4gICAgdGhpcy5faW52S2V5U2NoZWR1bGVbaW52S3NSb3ddID0gaW52S3NSb3cgPCA0IHx8IGtzUm93IDw9IDQgPyB0IDogRy5JTlZfU1VCX01JWFswXVtHLlNCT1hbdCA+Pj4gMjRdXSBeIEcuSU5WX1NVQl9NSVhbMV1bRy5TQk9YWyh0ID4+PiAxNikgJiAweGZmXV0gXiBHLklOVl9TVUJfTUlYWzJdW0cuU0JPWFsodCA+Pj4gOCkgJiAweGZmXV0gXiBHLklOVl9TVUJfTUlYWzNdW0cuU0JPWFt0ICYgMHhmZl1dXG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuQUVTLnByb3RvdHlwZS5lbmNyeXB0QmxvY2sgPSBmdW5jdGlvbiAoTSkge1xuICBNID0gYnVmZmVyVG9BcnJheShuZXcgQnVmZmVyKE0pKVxuICB2YXIgb3V0ID0gdGhpcy5fZG9DcnlwdEJsb2NrKE0sIHRoaXMuX2tleVNjaGVkdWxlLCBHLlNVQl9NSVgsIEcuU0JPWClcbiAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIoMTYpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFswXSwgMClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzFdLCA0KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMl0sIDgpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFszXSwgMTIpXG4gIHJldHVybiBidWZcbn1cblxuQUVTLnByb3RvdHlwZS5kZWNyeXB0QmxvY2sgPSBmdW5jdGlvbiAoTSkge1xuICBNID0gYnVmZmVyVG9BcnJheShuZXcgQnVmZmVyKE0pKVxuICB2YXIgdGVtcCA9IFtNWzNdLCBNWzFdXVxuICBNWzFdID0gdGVtcFswXVxuICBNWzNdID0gdGVtcFsxXVxuICB2YXIgb3V0ID0gdGhpcy5fZG9DcnlwdEJsb2NrKE0sIHRoaXMuX2ludktleVNjaGVkdWxlLCBHLklOVl9TVUJfTUlYLCBHLklOVl9TQk9YKVxuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcigxNilcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzBdLCAwKVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbM10sIDQpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsyXSwgOClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzFdLCAxMilcbiAgcmV0dXJuIGJ1ZlxufVxuXG5BRVMucHJvdG90eXBlLnNjcnViID0gZnVuY3Rpb24gKCkge1xuICBzY3J1Yl92ZWModGhpcy5fa2V5U2NoZWR1bGUpXG4gIHNjcnViX3ZlYyh0aGlzLl9pbnZLZXlTY2hlZHVsZSlcbiAgc2NydWJfdmVjKHRoaXMuX2tleSlcbn1cblxuQUVTLnByb3RvdHlwZS5fZG9DcnlwdEJsb2NrID0gZnVuY3Rpb24gKE0sIGtleVNjaGVkdWxlLCBTVUJfTUlYLCBTQk9YKSB7XG4gIHZhciBrc1JvdywgczAsIHMxLCBzMiwgczMsIHQwLCB0MSwgdDIsIHQzXG5cbiAgczAgPSBNWzBdIF4ga2V5U2NoZWR1bGVbMF1cbiAgczEgPSBNWzFdIF4ga2V5U2NoZWR1bGVbMV1cbiAgczIgPSBNWzJdIF4ga2V5U2NoZWR1bGVbMl1cbiAgczMgPSBNWzNdIF4ga2V5U2NoZWR1bGVbM11cbiAga3NSb3cgPSA0XG4gIGZvciAodmFyIHJvdW5kID0gMTsgcm91bmQgPCB0aGlzLl9uUm91bmRzOyByb3VuZCsrKSB7XG4gICAgdDAgPSBTVUJfTUlYWzBdW3MwID4+PiAyNF0gXiBTVUJfTUlYWzFdWyhzMSA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYWzJdWyhzMiA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVhbM11bczMgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gICAgdDEgPSBTVUJfTUlYWzBdW3MxID4+PiAyNF0gXiBTVUJfTUlYWzFdWyhzMiA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYWzJdWyhzMyA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVhbM11bczAgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gICAgdDIgPSBTVUJfTUlYWzBdW3MyID4+PiAyNF0gXiBTVUJfTUlYWzFdWyhzMyA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYWzJdWyhzMCA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVhbM11bczEgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gICAgdDMgPSBTVUJfTUlYWzBdW3MzID4+PiAyNF0gXiBTVUJfTUlYWzFdWyhzMCA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYWzJdWyhzMSA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVhbM11bczIgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gICAgczAgPSB0MFxuICAgIHMxID0gdDFcbiAgICBzMiA9IHQyXG4gICAgczMgPSB0M1xuICB9XG4gIHQwID0gKChTQk9YW3MwID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMxID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczIgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MzICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgdDEgPSAoKFNCT1hbczEgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczIgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMyA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczAgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICB0MiA9ICgoU0JPWFtzMiA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMyA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMwID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMSAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gIHQzID0gKChTQk9YW3MzID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMwID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczEgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MyICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgcmV0dXJuIFtcbiAgICBmaXh1cF91aW50MzIodDApLFxuICAgIGZpeHVwX3VpbnQzMih0MSksXG4gICAgZml4dXBfdWludDMyKHQyKSxcbiAgICBmaXh1cF91aW50MzIodDMpXG4gIF1cbn1cblxuZXhwb3J0cy5BRVMgPSBBRVNcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZjSFZpYkdsakxXVnVZM0o1Y0hRdmJtOWtaVjl0YjJSMWJHVnpMM0JoY25ObExXRnpiakV2Ym05a1pWOXRiMlIxYkdWekwySnliM2R6WlhKcFpua3RZV1Z6TDJGbGN5NXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4dklHSmhjMlZrSUc5dUlIUm9aU0JoWlhNZ2FXMXdiR2x0Wlc1MFlYUnBiMjRnYVc0Z2RISnBjR3hsSUhObFkxeHVMeThnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDJ0bGVXSmhjMlV2ZEhKcGNHeGxjMlZqWEc1Y2JpOHZJSGRvYVdOb0lHbHpJR2x1SUhSMWNtNGdZbUZ6WldRZ2IyNGdkR2hsSUc5dVpTQm1jbTl0SUdOeWVYQjBieTFxYzF4dUx5OGdhSFIwY0hNNkx5OWpiMlJsTG1kdmIyZHNaUzVqYjIwdmNDOWpjbmx3ZEc4dGFuTXZYRzVjYm5aaGNpQjFhVzUwWDIxaGVDQTlJRTFoZEdndWNHOTNLRElzSURNeUtWeHVablZ1WTNScGIyNGdabWw0ZFhCZmRXbHVkRE15SUNoNEtTQjdYRzRnSUhaaGNpQnlaWFFzSUhoZmNHOXpYRzRnSUhKbGRDQTlJSGdnUGlCMWFXNTBYMjFoZUNCOGZDQjRJRHdnTUNBL0lDaDRYM0J2Y3lBOUlFMWhkR2d1WVdKektIZ3BJQ1VnZFdsdWRGOXRZWGdzSUhnZ1BDQXdJRDhnZFdsdWRGOXRZWGdnTFNCNFgzQnZjeUE2SUhoZmNHOXpLU0E2SUhoY2JpQWdjbVYwZFhKdUlISmxkRnh1ZlZ4dVpuVnVZM1JwYjI0Z2MyTnlkV0pmZG1WaklDaDJLU0I3WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dkaTVzWlc1bmRHZzdJSFlyS3lrZ2UxeHVJQ0FnSUhaYmFWMGdQU0F3WEc0Z0lIMWNiaUFnY21WMGRYSnVJR1poYkhObFhHNTlYRzVjYm1aMWJtTjBhVzl1SUVkc2IySmhiQ0FvS1NCN1hHNGdJSFJvYVhNdVUwSlBXQ0E5SUZ0ZFhHNGdJSFJvYVhNdVNVNVdYMU5DVDFnZ1BTQmJYVnh1SUNCMGFHbHpMbE5WUWw5TlNWZ2dQU0JiVzEwc0lGdGRMQ0JiWFN3Z1cxMWRYRzRnSUhSb2FYTXVTVTVXWDFOVlFsOU5TVmdnUFNCYlcxMHNJRnRkTENCYlhTd2dXMTFkWEc0Z0lIUm9hWE11YVc1cGRDZ3BYRzRnSUhSb2FYTXVVa05QVGlBOUlGc3dlREF3TENBd2VEQXhMQ0F3ZURBeUxDQXdlREEwTENBd2VEQTRMQ0F3ZURFd0xDQXdlREl3TENBd2VEUXdMQ0F3ZURnd0xDQXdlREZpTENBd2VETTJYVnh1ZlZ4dVhHNUhiRzlpWVd3dWNISnZkRzkwZVhCbExtbHVhWFFnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUhaaGNpQmtMQ0JwTENCemVDd2dkQ3dnZUN3Z2VESXNJSGcwTENCNE9Dd2dlR2tzSUY5cFhHNGdJR1FnUFNBb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lIWmhjaUJmYVN3Z1gzSmxjM1ZzZEhOY2JpQWdJQ0JmY21WemRXeDBjeUE5SUZ0ZFhHNGdJQ0FnWm05eUlDaHBJRDBnWDJrZ1BTQXdPeUJmYVNBOElESTFOanNnYVNBOUlDc3JYMmtwSUh0Y2JpQWdJQ0FnSUdsbUlDaHBJRHdnTVRJNEtTQjdYRzRnSUNBZ0lDQWdJRjl5WlhOMWJIUnpMbkIxYzJnb2FTQThQQ0F4S1Z4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnWDNKbGMzVnNkSE11Y0hWemFDZ29hU0E4UENBeEtTQmVJREI0TVRGaUtWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdYM0psYzNWc2RITmNiaUFnZlNrb0tWeHVJQ0I0SUQwZ01GeHVJQ0I0YVNBOUlEQmNiaUFnWm05eUlDaHBJRDBnWDJrZ1BTQXdPeUJmYVNBOElESTFOanNnYVNBOUlDc3JYMmtwSUh0Y2JpQWdJQ0J6ZUNBOUlIaHBJRjRnS0hocElEdzhJREVwSUY0Z0tIaHBJRHc4SURJcElGNGdLSGhwSUR3OElETXBJRjRnS0hocElEdzhJRFFwWEc0Z0lDQWdjM2dnUFNBb2MzZ2dQajQrSURncElGNGdLSE40SUNZZ01IaG1aaWtnWGlBd2VEWXpYRzRnSUNBZ2RHaHBjeTVUUWs5WVczaGRJRDBnYzNoY2JpQWdJQ0IwYUdsekxrbE9WbDlUUWs5WVczTjRYU0E5SUhoY2JpQWdJQ0I0TWlBOUlHUmJlRjFjYmlBZ0lDQjROQ0E5SUdSYmVESmRYRzRnSUNBZ2VEZ2dQU0JrVzNnMFhWeHVJQ0FnSUhRZ1BTQW9aRnR6ZUYwZ0tpQXdlREV3TVNrZ1hpQW9jM2dnS2lBd2VERXdNVEF4TURBcFhHNGdJQ0FnZEdocGN5NVRWVUpmVFVsWVd6QmRXM2hkSUQwZ0tIUWdQRHdnTWpRcElId2dLSFFnUGo0K0lEZ3BYRzRnSUNBZ2RHaHBjeTVUVlVKZlRVbFlXekZkVzNoZElEMGdLSFFnUER3Z01UWXBJSHdnS0hRZ1BqNCtJREUyS1Z4dUlDQWdJSFJvYVhNdVUxVkNYMDFKV0ZzeVhWdDRYU0E5SUNoMElEdzhJRGdwSUh3Z0tIUWdQajQrSURJMEtWeHVJQ0FnSUhSb2FYTXVVMVZDWDAxSldGc3pYVnQ0WFNBOUlIUmNiaUFnSUNCMElEMGdLSGc0SUNvZ01IZ3hNREV3TVRBeEtTQmVJQ2g0TkNBcUlEQjRNVEF3TURFcElGNGdLSGd5SUNvZ01IZ3hNREVwSUY0Z0tIZ2dLaUF3ZURFd01UQXhNREFwWEc0Z0lDQWdkR2hwY3k1SlRsWmZVMVZDWDAxSldGc3dYVnR6ZUYwZ1BTQW9kQ0E4UENBeU5Da2dmQ0FvZENBK1BqNGdPQ2xjYmlBZ0lDQjBhR2x6TGtsT1ZsOVRWVUpmVFVsWVd6RmRXM040WFNBOUlDaDBJRHc4SURFMktTQjhJQ2gwSUQ0K1BpQXhOaWxjYmlBZ0lDQjBhR2x6TGtsT1ZsOVRWVUpmVFVsWVd6SmRXM040WFNBOUlDaDBJRHc4SURncElId2dLSFFnUGo0K0lESTBLVnh1SUNBZ0lIUm9hWE11U1U1V1gxTlZRbDlOU1ZoYk0xMWJjM2hkSUQwZ2RGeHVJQ0FnSUdsbUlDaDRJRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQjRJRDBnZUdrZ1BTQXhYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhnZ1BTQjRNaUJlSUdSYlpGdGtXM2c0SUY0Z2VESmRYVjFjYmlBZ0lDQWdJSGhwSUY0OUlHUmJaRnQ0YVYxZFhHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhKbGRIVnliaUIwY25WbFhHNTlYRzVjYm5aaGNpQkhJRDBnYm1WM0lFZHNiMkpoYkNncFhHNWNia0ZGVXk1aWJHOWphMU5wZW1VZ1BTQTBJQ29nTkZ4dVhHNUJSVk11Y0hKdmRHOTBlWEJsTG1Kc2IyTnJVMmw2WlNBOUlFRkZVeTVpYkc5amExTnBlbVZjYmx4dVFVVlRMbXRsZVZOcGVtVWdQU0F5TlRZZ0x5QTRYRzVjYmtGRlV5NXdjbTkwYjNSNWNHVXVhMlY1VTJsNlpTQTlJRUZGVXk1clpYbFRhWHBsWEc1Y2JtWjFibU4wYVc5dUlHSjFabVpsY2xSdlFYSnlZWGtnS0dKMVppa2dlMXh1SUNCMllYSWdiR1Z1SUQwZ1luVm1MbXhsYm1kMGFDQXZJRFJjYmlBZ2RtRnlJRzkxZENBOUlHNWxkeUJCY25KaGVTaHNaVzRwWEc0Z0lIWmhjaUJwSUQwZ0xURmNiaUFnZDJocGJHVWdLQ3NyYVNBOElHeGxiaWtnZTF4dUlDQWdJRzkxZEZ0cFhTQTlJR0oxWmk1eVpXRmtWVWx1ZERNeVFrVW9hU0FxSURRcFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUc5MWRGeHVmVnh1Wm5WdVkzUnBiMjRnUVVWVElDaHJaWGtwSUh0Y2JpQWdkR2hwY3k1ZmEyVjVJRDBnWW5WbVptVnlWRzlCY25KaGVTaHJaWGtwWEc0Z0lIUm9hWE11WDJSdlVtVnpaWFFvS1Z4dWZWeHVYRzVCUlZNdWNISnZkRzkwZVhCbExsOWtiMUpsYzJWMElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQjJZWElnYVc1MlMzTlNiM2NzSUd0bGVWTnBlbVVzSUd0bGVWZHZjbVJ6TENCcmMxSnZkeXdnYTNOU2IzZHpMQ0IwWEc0Z0lHdGxlVmR2Y21SeklEMGdkR2hwY3k1ZmEyVjVYRzRnSUd0bGVWTnBlbVVnUFNCclpYbFhiM0prY3k1c1pXNW5kR2hjYmlBZ2RHaHBjeTVmYmxKdmRXNWtjeUE5SUd0bGVWTnBlbVVnS3lBMlhHNGdJR3R6VW05M2N5QTlJQ2gwYUdsekxsOXVVbTkxYm1SeklDc2dNU2tnS2lBMFhHNGdJSFJvYVhNdVgydGxlVk5qYUdWa2RXeGxJRDBnVzExY2JpQWdabTl5SUNocmMxSnZkeUE5SURBN0lHdHpVbTkzSUR3Z2EzTlNiM2R6T3lCcmMxSnZkeXNyS1NCN1hHNGdJQ0FnZEdocGN5NWZhMlY1VTJOb1pXUjFiR1ZiYTNOU2IzZGRJRDBnYTNOU2IzY2dQQ0JyWlhsVGFYcGxJRDhnYTJWNVYyOXlaSE5iYTNOU2IzZGRJRG9nS0hRZ1BTQjBhR2x6TGw5clpYbFRZMmhsWkhWc1pWdHJjMUp2ZHlBdElERmRMQ0FvYTNOU2IzY2dKU0JyWlhsVGFYcGxLU0E5UFQwZ01DQS9JQ2gwSUQwZ0tIUWdQRHdnT0NrZ2ZDQW9kQ0ErUGo0Z01qUXBMQ0IwSUQwZ0tFY3VVMEpQV0Z0MElENCtQaUF5TkYwZ1BEd2dNalFwSUh3Z0tFY3VVMEpQV0Zzb2RDQStQajRnTVRZcElDWWdNSGhtWmwwZ1BEd2dNVFlwSUh3Z0tFY3VVMEpQV0Zzb2RDQStQajRnT0NrZ0ppQXdlR1ptWFNBOFBDQTRLU0I4SUVjdVUwSlBXRnQwSUNZZ01IaG1abDBzSUhRZ1hqMGdSeTVTUTA5T1d5aHJjMUp2ZHlBdklHdGxlVk5wZW1VcElId2dNRjBnUER3Z01qUXBJRG9nYTJWNVUybDZaU0ErSURZZ0ppWWdhM05TYjNjZ0pTQnJaWGxUYVhwbElEMDlQU0EwSUQ4Z2RDQTlJQ2hITGxOQ1QxaGJkQ0ErUGo0Z01qUmRJRHc4SURJMEtTQjhJQ2hITGxOQ1QxaGJLSFFnUGo0K0lERTJLU0FtSURCNFptWmRJRHc4SURFMktTQjhJQ2hITGxOQ1QxaGJLSFFnUGo0K0lEZ3BJQ1lnTUhobVpsMGdQRHdnT0NrZ2ZDQkhMbE5DVDFoYmRDQW1JREI0Wm1aZElEb2dkbTlwWkNBd0xDQjBhR2x6TGw5clpYbFRZMmhsWkhWc1pWdHJjMUp2ZHlBdElHdGxlVk5wZW1WZElGNGdkQ2xjYmlBZ2ZWeHVJQ0IwYUdsekxsOXBiblpMWlhsVFkyaGxaSFZzWlNBOUlGdGRYRzRnSUdadmNpQW9hVzUyUzNOU2IzY2dQU0F3T3lCcGJuWkxjMUp2ZHlBOElHdHpVbTkzY3pzZ2FXNTJTM05TYjNjckt5a2dlMXh1SUNBZ0lHdHpVbTkzSUQwZ2EzTlNiM2R6SUMwZ2FXNTJTM05TYjNkY2JpQWdJQ0IwSUQwZ2RHaHBjeTVmYTJWNVUyTm9aV1IxYkdWYmEzTlNiM2NnTFNBb2FXNTJTM05TYjNjZ0pTQTBJRDhnTUNBNklEUXBYVnh1SUNBZ0lIUm9hWE11WDJsdWRrdGxlVk5qYUdWa2RXeGxXMmx1ZGt0elVtOTNYU0E5SUdsdWRrdHpVbTkzSUR3Z05DQjhmQ0JyYzFKdmR5QThQU0EwSUQ4Z2RDQTZJRWN1U1U1V1gxTlZRbDlOU1ZoYk1GMWJSeTVUUWs5WVczUWdQajQrSURJMFhWMGdYaUJITGtsT1ZsOVRWVUpmVFVsWVd6RmRXMGN1VTBKUFdGc29kQ0ErUGo0Z01UWXBJQ1lnTUhobVpsMWRJRjRnUnk1SlRsWmZVMVZDWDAxSldGc3lYVnRITGxOQ1QxaGJLSFFnUGo0K0lEZ3BJQ1lnTUhobVpsMWRJRjRnUnk1SlRsWmZVMVZDWDAxSldGc3pYVnRITGxOQ1QxaGJkQ0FtSURCNFptWmRYVnh1SUNCOVhHNGdJSEpsZEhWeWJpQjBjblZsWEc1OVhHNWNia0ZGVXk1d2NtOTBiM1I1Y0dVdVpXNWpjbmx3ZEVKc2IyTnJJRDBnWm5WdVkzUnBiMjRnS0UwcElIdGNiaUFnVFNBOUlHSjFabVpsY2xSdlFYSnlZWGtvYm1WM0lFSjFabVpsY2loTktTbGNiaUFnZG1GeUlHOTFkQ0E5SUhSb2FYTXVYMlJ2UTNKNWNIUkNiRzlqYXloTkxDQjBhR2x6TGw5clpYbFRZMmhsWkhWc1pTd2dSeTVUVlVKZlRVbFlMQ0JITGxOQ1QxZ3BYRzRnSUhaaGNpQmlkV1lnUFNCdVpYY2dRblZtWm1WeUtERTJLVnh1SUNCaWRXWXVkM0pwZEdWVlNXNTBNekpDUlNodmRYUmJNRjBzSURBcFhHNGdJR0oxWmk1M2NtbDBaVlZKYm5Rek1rSkZLRzkxZEZzeFhTd2dOQ2xjYmlBZ1luVm1MbmR5YVhSbFZVbHVkRE15UWtVb2IzVjBXekpkTENBNEtWeHVJQ0JpZFdZdWQzSnBkR1ZWU1c1ME16SkNSU2h2ZFhSYk0xMHNJREV5S1Z4dUlDQnlaWFIxY200Z1luVm1YRzU5WEc1Y2JrRkZVeTV3Y205MGIzUjVjR1V1WkdWamNubHdkRUpzYjJOcklEMGdablZ1WTNScGIyNGdLRTBwSUh0Y2JpQWdUU0E5SUdKMVptWmxjbFJ2UVhKeVlYa29ibVYzSUVKMVptWmxjaWhOS1NsY2JpQWdkbUZ5SUhSbGJYQWdQU0JiVFZzelhTd2dUVnN4WFYxY2JpQWdUVnN4WFNBOUlIUmxiWEJiTUYxY2JpQWdUVnN6WFNBOUlIUmxiWEJiTVYxY2JpQWdkbUZ5SUc5MWRDQTlJSFJvYVhNdVgyUnZRM0o1Y0hSQ2JHOWpheWhOTENCMGFHbHpMbDlwYm5aTFpYbFRZMmhsWkhWc1pTd2dSeTVKVGxaZlUxVkNYMDFKV0N3Z1J5NUpUbFpmVTBKUFdDbGNiaUFnZG1GeUlHSjFaaUE5SUc1bGR5QkNkV1ptWlhJb01UWXBYRzRnSUdKMVppNTNjbWwwWlZWSmJuUXpNa0pGS0c5MWRGc3dYU3dnTUNsY2JpQWdZblZtTG5keWFYUmxWVWx1ZERNeVFrVW9iM1YwV3pOZExDQTBLVnh1SUNCaWRXWXVkM0pwZEdWVlNXNTBNekpDUlNodmRYUmJNbDBzSURncFhHNGdJR0oxWmk1M2NtbDBaVlZKYm5Rek1rSkZLRzkxZEZzeFhTd2dNVElwWEc0Z0lISmxkSFZ5YmlCaWRXWmNibjFjYmx4dVFVVlRMbkJ5YjNSdmRIbHdaUzV6WTNKMVlpQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdjMk55ZFdKZmRtVmpLSFJvYVhNdVgydGxlVk5qYUdWa2RXeGxLVnh1SUNCelkzSjFZbDkyWldNb2RHaHBjeTVmYVc1MlMyVjVVMk5vWldSMWJHVXBYRzRnSUhOamNuVmlYM1psWXloMGFHbHpMbDlyWlhrcFhHNTlYRzVjYmtGRlV5NXdjbTkwYjNSNWNHVXVYMlJ2UTNKNWNIUkNiRzlqYXlBOUlHWjFibU4wYVc5dUlDaE5MQ0JyWlhsVFkyaGxaSFZzWlN3Z1UxVkNYMDFKV0N3Z1UwSlBXQ2tnZTF4dUlDQjJZWElnYTNOU2IzY3NJSE13TENCek1Td2djeklzSUhNekxDQjBNQ3dnZERFc0lIUXlMQ0IwTTF4dVhHNGdJSE13SUQwZ1RWc3dYU0JlSUd0bGVWTmphR1ZrZFd4bFd6QmRYRzRnSUhNeElEMGdUVnN4WFNCZUlHdGxlVk5qYUdWa2RXeGxXekZkWEc0Z0lITXlJRDBnVFZzeVhTQmVJR3RsZVZOamFHVmtkV3hsV3pKZFhHNGdJSE16SUQwZ1RWc3pYU0JlSUd0bGVWTmphR1ZrZFd4bFd6TmRYRzRnSUd0elVtOTNJRDBnTkZ4dUlDQm1iM0lnS0haaGNpQnliM1Z1WkNBOUlERTdJSEp2ZFc1a0lEd2dkR2hwY3k1ZmJsSnZkVzVrY3pzZ2NtOTFibVFyS3lrZ2UxeHVJQ0FnSUhRd0lEMGdVMVZDWDAxSldGc3dYVnR6TUNBK1BqNGdNalJkSUY0Z1UxVkNYMDFKV0ZzeFhWc29jekVnUGo0K0lERTJLU0FtSURCNFptWmRJRjRnVTFWQ1gwMUpXRnN5WFZzb2N6SWdQajQrSURncElDWWdNSGhtWmwwZ1hpQlRWVUpmVFVsWVd6TmRXM016SUNZZ01IaG1abDBnWGlCclpYbFRZMmhsWkhWc1pWdHJjMUp2ZHlzclhWeHVJQ0FnSUhReElEMGdVMVZDWDAxSldGc3dYVnR6TVNBK1BqNGdNalJkSUY0Z1UxVkNYMDFKV0ZzeFhWc29jeklnUGo0K0lERTJLU0FtSURCNFptWmRJRjRnVTFWQ1gwMUpXRnN5WFZzb2N6TWdQajQrSURncElDWWdNSGhtWmwwZ1hpQlRWVUpmVFVsWVd6TmRXM013SUNZZ01IaG1abDBnWGlCclpYbFRZMmhsWkhWc1pWdHJjMUp2ZHlzclhWeHVJQ0FnSUhReUlEMGdVMVZDWDAxSldGc3dYVnR6TWlBK1BqNGdNalJkSUY0Z1UxVkNYMDFKV0ZzeFhWc29jek1nUGo0K0lERTJLU0FtSURCNFptWmRJRjRnVTFWQ1gwMUpXRnN5WFZzb2N6QWdQajQrSURncElDWWdNSGhtWmwwZ1hpQlRWVUpmVFVsWVd6TmRXM014SUNZZ01IaG1abDBnWGlCclpYbFRZMmhsWkhWc1pWdHJjMUp2ZHlzclhWeHVJQ0FnSUhReklEMGdVMVZDWDAxSldGc3dYVnR6TXlBK1BqNGdNalJkSUY0Z1UxVkNYMDFKV0ZzeFhWc29jekFnUGo0K0lERTJLU0FtSURCNFptWmRJRjRnVTFWQ1gwMUpXRnN5WFZzb2N6RWdQajQrSURncElDWWdNSGhtWmwwZ1hpQlRWVUpmVFVsWVd6TmRXM015SUNZZ01IaG1abDBnWGlCclpYbFRZMmhsWkhWc1pWdHJjMUp2ZHlzclhWeHVJQ0FnSUhNd0lEMGdkREJjYmlBZ0lDQnpNU0E5SUhReFhHNGdJQ0FnY3pJZ1BTQjBNbHh1SUNBZ0lITXpJRDBnZEROY2JpQWdmVnh1SUNCME1DQTlJQ2dvVTBKUFdGdHpNQ0ErUGo0Z01qUmRJRHc4SURJMEtTQjhJQ2hUUWs5WVd5aHpNU0ErUGo0Z01UWXBJQ1lnTUhobVpsMGdQRHdnTVRZcElId2dLRk5DVDFoYktITXlJRDQrUGlBNEtTQW1JREI0Wm1aZElEdzhJRGdwSUh3Z1UwSlBXRnR6TXlBbUlEQjRabVpkS1NCZUlHdGxlVk5qYUdWa2RXeGxXMnR6VW05M0t5dGRYRzRnSUhReElEMGdLQ2hUUWs5WVczTXhJRDQrUGlBeU5GMGdQRHdnTWpRcElId2dLRk5DVDFoYktITXlJRDQrUGlBeE5pa2dKaUF3ZUdabVhTQThQQ0F4TmlrZ2ZDQW9VMEpQV0Zzb2N6TWdQajQrSURncElDWWdNSGhtWmwwZ1BEd2dPQ2tnZkNCVFFrOVlXM013SUNZZ01IaG1abDBwSUY0Z2EyVjVVMk5vWldSMWJHVmJhM05TYjNjcksxMWNiaUFnZERJZ1BTQW9LRk5DVDFoYmN6SWdQajQrSURJMFhTQThQQ0F5TkNrZ2ZDQW9VMEpQV0Zzb2N6TWdQajQrSURFMktTQW1JREI0Wm1aZElEdzhJREUyS1NCOElDaFRRazlZV3loek1DQStQajRnT0NrZ0ppQXdlR1ptWFNBOFBDQTRLU0I4SUZOQ1QxaGJjekVnSmlBd2VHWm1YU2tnWGlCclpYbFRZMmhsWkhWc1pWdHJjMUp2ZHlzclhWeHVJQ0IwTXlBOUlDZ29VMEpQV0Z0ek15QStQajRnTWpSZElEdzhJREkwS1NCOElDaFRRazlZV3loek1DQStQajRnTVRZcElDWWdNSGhtWmwwZ1BEd2dNVFlwSUh3Z0tGTkNUMWhiS0hNeElENCtQaUE0S1NBbUlEQjRabVpkSUR3OElEZ3BJSHdnVTBKUFdGdHpNaUFtSURCNFptWmRLU0JlSUd0bGVWTmphR1ZrZFd4bFcydHpVbTkzS3l0ZFhHNGdJSEpsZEhWeWJpQmJYRzRnSUNBZ1ptbDRkWEJmZFdsdWRETXlLSFF3S1N4Y2JpQWdJQ0JtYVhoMWNGOTFhVzUwTXpJb2RERXBMRnh1SUNBZ0lHWnBlSFZ3WDNWcGJuUXpNaWgwTWlrc1hHNGdJQ0FnWm1sNGRYQmZkV2x1ZERNeUtIUXpLVnh1SUNCZFhHNTlYRzVjYm1WNGNHOXlkSE11UVVWVElEMGdRVVZUWEc0aVhYMD0iLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG52YXIgYm4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIHJhbmRvbUJ5dGVzID0gcmVxdWlyZSgncmFuZG9tYnl0ZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gY3J0O1xuZnVuY3Rpb24gYmxpbmQocHJpdikge1xuICB2YXIgciA9IGdldHIocHJpdik7XG4gIHZhciBibGluZGVyID0gci50b1JlZChibi5tb250KHByaXYubW9kdWx1cykpXG4gIC5yZWRQb3cobmV3IGJuKHByaXYucHVibGljRXhwb25lbnQpKS5mcm9tUmVkKCk7XG4gIHJldHVybiB7XG4gICAgYmxpbmRlcjogYmxpbmRlcixcbiAgICB1bmJsaW5kZXI6ci5pbnZtKHByaXYubW9kdWx1cylcbiAgfTtcbn1cbmZ1bmN0aW9uIGNydChtc2csIHByaXYpIHtcbiAgdmFyIGJsaW5kcyA9IGJsaW5kKHByaXYpO1xuICB2YXIgbGVuID0gcHJpdi5tb2R1bHVzLmJ5dGVMZW5ndGgoKTtcbiAgdmFyIG1vZCA9IGJuLm1vbnQocHJpdi5tb2R1bHVzKTtcbiAgdmFyIGJsaW5kZWQgPSBuZXcgYm4obXNnKS5tdWwoYmxpbmRzLmJsaW5kZXIpLm1vZChwcml2Lm1vZHVsdXMpO1xuICB2YXIgYzEgPSBibGluZGVkLnRvUmVkKGJuLm1vbnQocHJpdi5wcmltZTEpKTtcbiAgdmFyIGMyID0gYmxpbmRlZC50b1JlZChibi5tb250KHByaXYucHJpbWUyKSk7XG4gIHZhciBxaW52ID0gcHJpdi5jb2VmZmljaWVudDtcbiAgdmFyIHAgPSBwcml2LnByaW1lMTtcbiAgdmFyIHEgPSBwcml2LnByaW1lMjtcbiAgdmFyIG0xID0gYzEucmVkUG93KHByaXYuZXhwb25lbnQxKTtcbiAgdmFyIG0yID0gYzIucmVkUG93KHByaXYuZXhwb25lbnQyKTtcbiAgbTEgPSBtMS5mcm9tUmVkKCk7XG4gIG0yID0gbTIuZnJvbVJlZCgpO1xuICB2YXIgaCA9IG0xLmlzdWIobTIpLmltdWwocWludikubW9kKHApO1xuICBoLmltdWwocSk7XG4gIG0yLmlhZGQoaCk7XG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKG0yLmltdWwoYmxpbmRzLnVuYmxpbmRlcikubW9kKHByaXYubW9kdWx1cykudG9BcnJheSgpKTtcbiAgaWYgKG91dC5sZW5ndGggPCBsZW4pIHtcbiAgICB2YXIgcHJlZml4ID0gbmV3IEJ1ZmZlcihsZW4gLSBvdXQubGVuZ3RoKTtcbiAgICBwcmVmaXguZmlsbCgwKTtcbiAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFtwcmVmaXgsIG91dF0sIGxlbik7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cbmNydC5nZXRyID0gZ2V0cjtcbmZ1bmN0aW9uIGdldHIocHJpdikge1xuICB2YXIgbGVuID0gcHJpdi5tb2R1bHVzLmJ5dGVMZW5ndGgoKTtcbiAgdmFyIHIgPSBuZXcgYm4ocmFuZG9tQnl0ZXMobGVuKSk7XG4gIHdoaWxlIChyLmNtcChwcml2Lm1vZHVsdXMpID49ICAwIHx8ICFyLm1vZChwcml2LnByaW1lMSkgfHwgIXIubW9kKHByaXYucHJpbWUyKSkge1xuICAgIHIgPSBuZXcgYm4ocmFuZG9tQnl0ZXMobGVuKSk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdmNIVmliR2xqTFdWdVkzSjVjSFF2Ym05a1pWOXRiMlIxYkdWekwySnliM2R6WlhKcFpua3Rjbk5oTDJsdVpHVjRMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlHSnVJRDBnY21WeGRXbHlaU2duWW00dWFuTW5LVHRjYm5aaGNpQnlZVzVrYjIxQ2VYUmxjeUE5SUhKbGNYVnBjbVVvSjNKaGJtUnZiV0o1ZEdWekp5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR055ZER0Y2JtWjFibU4wYVc5dUlHSnNhVzVrS0hCeWFYWXBJSHRjYmlBZ2RtRnlJSElnUFNCblpYUnlLSEJ5YVhZcE8xeHVJQ0IyWVhJZ1lteHBibVJsY2lBOUlISXVkRzlTWldRb1ltNHViVzl1ZENod2NtbDJMbTF2WkhWc2RYTXBLVnh1SUNBdWNtVmtVRzkzS0c1bGR5QmliaWh3Y21sMkxuQjFZbXhwWTBWNGNHOXVaVzUwS1NrdVpuSnZiVkpsWkNncE8xeHVJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lHSnNhVzVrWlhJNklHSnNhVzVrWlhJc1hHNGdJQ0FnZFc1aWJHbHVaR1Z5T25JdWFXNTJiU2h3Y21sMkxtMXZaSFZzZFhNcFhHNGdJSDA3WEc1OVhHNW1kVzVqZEdsdmJpQmpjblFvYlhObkxDQndjbWwyS1NCN1hHNGdJSFpoY2lCaWJHbHVaSE1nUFNCaWJHbHVaQ2h3Y21sMktUdGNiaUFnZG1GeUlHeGxiaUE5SUhCeWFYWXViVzlrZFd4MWN5NWllWFJsVEdWdVozUm9LQ2s3WEc0Z0lIWmhjaUJ0YjJRZ1BTQmliaTV0YjI1MEtIQnlhWFl1Ylc5a2RXeDFjeWs3WEc0Z0lIWmhjaUJpYkdsdVpHVmtJRDBnYm1WM0lHSnVLRzF6WnlrdWJYVnNLR0pzYVc1a2N5NWliR2x1WkdWeUtTNXRiMlFvY0hKcGRpNXRiMlIxYkhWektUdGNiaUFnZG1GeUlHTXhJRDBnWW14cGJtUmxaQzUwYjFKbFpDaGliaTV0YjI1MEtIQnlhWFl1Y0hKcGJXVXhLU2s3WEc0Z0lIWmhjaUJqTWlBOUlHSnNhVzVrWldRdWRHOVNaV1FvWW00dWJXOXVkQ2h3Y21sMkxuQnlhVzFsTWlrcE8xeHVJQ0IyWVhJZ2NXbHVkaUE5SUhCeWFYWXVZMjlsWm1acFkybGxiblE3WEc0Z0lIWmhjaUJ3SUQwZ2NISnBkaTV3Y21sdFpURTdYRzRnSUhaaGNpQnhJRDBnY0hKcGRpNXdjbWx0WlRJN1hHNGdJSFpoY2lCdE1TQTlJR014TG5KbFpGQnZkeWh3Y21sMkxtVjRjRzl1Wlc1ME1TazdYRzRnSUhaaGNpQnRNaUE5SUdNeUxuSmxaRkJ2ZHlod2NtbDJMbVY0Y0c5dVpXNTBNaWs3WEc0Z0lHMHhJRDBnYlRFdVpuSnZiVkpsWkNncE8xeHVJQ0J0TWlBOUlHMHlMbVp5YjIxU1pXUW9LVHRjYmlBZ2RtRnlJR2dnUFNCdE1TNXBjM1ZpS0cweUtTNXBiWFZzS0hGcGJuWXBMbTF2WkNod0tUdGNiaUFnYUM1cGJYVnNLSEVwTzF4dUlDQnRNaTVwWVdSa0tHZ3BPMXh1SUNCMllYSWdiM1YwSUQwZ2JtVjNJRUoxWm1abGNpaHRNaTVwYlhWc0tHSnNhVzVrY3k1MWJtSnNhVzVrWlhJcExtMXZaQ2h3Y21sMkxtMXZaSFZzZFhNcExuUnZRWEp5WVhrb0tTazdYRzRnSUdsbUlDaHZkWFF1YkdWdVozUm9JRHdnYkdWdUtTQjdYRzRnSUNBZ2RtRnlJSEJ5WldacGVDQTlJRzVsZHlCQ2RXWm1aWElvYkdWdUlDMGdiM1YwTG14bGJtZDBhQ2s3WEc0Z0lDQWdjSEpsWm1sNExtWnBiR3dvTUNrN1hHNGdJQ0FnYjNWMElEMGdRblZtWm1WeUxtTnZibU5oZENoYmNISmxabWw0TENCdmRYUmRMQ0JzWlc0cE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCdmRYUTdYRzU5WEc1amNuUXVaMlYwY2lBOUlHZGxkSEk3WEc1bWRXNWpkR2x2YmlCblpYUnlLSEJ5YVhZcElIdGNiaUFnZG1GeUlHeGxiaUE5SUhCeWFYWXViVzlrZFd4MWN5NWllWFJsVEdWdVozUm9LQ2s3WEc0Z0lIWmhjaUJ5SUQwZ2JtVjNJR0p1S0hKaGJtUnZiVUo1ZEdWektHeGxiaWtwTzF4dUlDQjNhR2xzWlNBb2NpNWpiWEFvY0hKcGRpNXRiMlIxYkhWektTQStQU0FnTUNCOGZDQWhjaTV0YjJRb2NISnBkaTV3Y21sdFpURXBJSHg4SUNGeUxtMXZaQ2h3Y21sMkxuQnlhVzFsTWlrcElIdGNiaUFnSUNCeUlEMGdibVYzSUdKdUtISmhibVJ2YlVKNWRHVnpLR3hsYmlrcE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCeU8xeHVmU0pkZlE9PSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBjcmVhdGVIYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHNlZWQsIGxlbikge1xuICB2YXIgdCA9IG5ldyBCdWZmZXIoJycpO1xuICB2YXIgIGkgPSAwLCBjO1xuICB3aGlsZSAodC5sZW5ndGggPCBsZW4pIHtcbiAgICBjID0gaTJvcHMoaSsrKTtcbiAgICB0ID0gQnVmZmVyLmNvbmNhdChbdCwgY3JlYXRlSGFzaCgnc2hhMScpLnVwZGF0ZShzZWVkKS51cGRhdGUoYykuZGlnZXN0KCldKTtcbiAgfVxuICByZXR1cm4gdC5zbGljZSgwLCBsZW4pO1xufTtcblxuZnVuY3Rpb24gaTJvcHMoYykge1xuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcig0KTtcbiAgb3V0LndyaXRlVUludDMyQkUoYywwKTtcbiAgcmV0dXJuIG91dDtcbn1cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12Y0hWaWJHbGpMV1Z1WTNKNWNIUXZiV2RtTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUdOeVpXRjBaVWhoYzJnZ1BTQnlaWEYxYVhKbEtDZGpjbVZoZEdVdGFHRnphQ2NwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlBb2MyVmxaQ3dnYkdWdUtTQjdYRzRnSUhaaGNpQjBJRDBnYm1WM0lFSjFabVpsY2lnbkp5azdYRzRnSUhaaGNpQWdhU0E5SURBc0lHTTdYRzRnSUhkb2FXeGxJQ2gwTG14bGJtZDBhQ0E4SUd4bGJpa2dlMXh1SUNBZ0lHTWdQU0JwTW05d2N5aHBLeXNwTzF4dUlDQWdJSFFnUFNCQ2RXWm1aWEl1WTI5dVkyRjBLRnQwTENCamNtVmhkR1ZJWVhOb0tDZHphR0V4SnlrdWRYQmtZWFJsS0hObFpXUXBMblZ3WkdGMFpTaGpLUzVrYVdkbGMzUW9LVjBwTzF4dUlDQjlYRzRnSUhKbGRIVnliaUIwTG5Oc2FXTmxLREFzSUd4bGJpazdYRzU5TzF4dVhHNW1kVzVqZEdsdmJpQnBNbTl3Y3loaktTQjdYRzRnSUhaaGNpQnZkWFFnUFNCdVpYY2dRblZtWm1WeUtEUXBPMXh1SUNCdmRYUXVkM0pwZEdWVlNXNTBNekpDUlNoakxEQXBPMXh1SUNCeVpYUjFjbTRnYjNWME8xeHVmU0pkZlE9PSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBnZW5lcmF0ZVByaW1lID0gcmVxdWlyZSgnLi9saWIvZ2VuZXJhdGVQcmltZScpO1xudmFyIHByaW1lcyA9IHJlcXVpcmUoJy4vbGliL3ByaW1lcycpO1xuXG52YXIgREggPSByZXF1aXJlKCcuL2xpYi9kaCcpO1xuXG5mdW5jdGlvbiBnZXREaWZmaWVIZWxsbWFuKG1vZCkge1xuICB2YXIgcHJpbWUgPSBuZXcgQnVmZmVyKHByaW1lc1ttb2RdLnByaW1lLCAnaGV4Jyk7XG4gIHZhciBnZW4gPSBuZXcgQnVmZmVyKHByaW1lc1ttb2RdLmdlbiwgJ2hleCcpO1xuXG4gIHJldHVybiBuZXcgREgocHJpbWUsIGdlbik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURpZmZpZUhlbGxtYW4ocHJpbWUsIGVuYywgZ2VuZXJhdG9yLCBnZW5jKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoZW5jKSB8fCAodHlwZW9mIGVuYyA9PT0gJ3N0cmluZycgJiYgWydoZXgnLCAnYmluYXJ5JywgJ2Jhc2U2NCddLmluZGV4T2YoZW5jKSA9PT0gLTEpKSB7XG4gICAgZ2VuYyA9IGdlbmVyYXRvcjtcbiAgICBnZW5lcmF0b3IgPSBlbmM7XG4gICAgZW5jID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZW5jID0gZW5jIHx8ICdiaW5hcnknO1xuICBnZW5jID0gZ2VuYyB8fCAnYmluYXJ5JztcbiAgZ2VuZXJhdG9yID0gZ2VuZXJhdG9yIHx8IG5ldyBCdWZmZXIoWzJdKTtcblxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihnZW5lcmF0b3IpKSB7XG4gICAgZ2VuZXJhdG9yID0gbmV3IEJ1ZmZlcihnZW5lcmF0b3IsIGdlbmMpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcmltZSA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gbmV3IERIKGdlbmVyYXRlUHJpbWUocHJpbWUsIGdlbmVyYXRvciksIGdlbmVyYXRvciwgdHJ1ZSk7XG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwcmltZSkpIHtcbiAgICBwcmltZSA9IG5ldyBCdWZmZXIocHJpbWUsIGVuYyk7XG4gIH1cblxuICByZXR1cm4gbmV3IERIKHByaW1lLCBnZW5lcmF0b3IsIHRydWUpO1xufVxuXG5leHBvcnRzLkRpZmZpZUhlbGxtYW5Hcm91cCA9IGV4cG9ydHMuY3JlYXRlRGlmZmllSGVsbG1hbkdyb3VwID0gZXhwb3J0cy5nZXREaWZmaWVIZWxsbWFuID0gZ2V0RGlmZmllSGVsbG1hbjtcbmV4cG9ydHMuY3JlYXRlRGlmZmllSGVsbG1hbiA9IGV4cG9ydHMuRGlmZmllSGVsbG1hbiA9IGNyZWF0ZURpZmZpZUhlbGxtYW47XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WkdsbVptbGxMV2hsYkd4dFlXNHZZbkp2ZDNObGNpNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlHZGxibVZ5WVhSbFVISnBiV1VnUFNCeVpYRjFhWEpsS0NjdUwyeHBZaTluWlc1bGNtRjBaVkJ5YVcxbEp5azdYRzUyWVhJZ2NISnBiV1Z6SUQwZ2NtVnhkV2x5WlNnbkxpOXNhV0l2Y0hKcGJXVnpKeWs3WEc1Y2JuWmhjaUJFU0NBOUlISmxjWFZwY21Vb0p5NHZiR2xpTDJSb0p5azdYRzVjYm1aMWJtTjBhVzl1SUdkbGRFUnBabVpwWlVobGJHeHRZVzRvYlc5a0tTQjdYRzRnSUhaaGNpQndjbWx0WlNBOUlHNWxkeUJDZFdabVpYSW9jSEpwYldWelcyMXZaRjB1Y0hKcGJXVXNJQ2RvWlhnbktUdGNiaUFnZG1GeUlHZGxiaUE5SUc1bGR5QkNkV1ptWlhJb2NISnBiV1Z6VzIxdlpGMHVaMlZ1TENBbmFHVjRKeWs3WEc1Y2JpQWdjbVYwZFhKdUlHNWxkeUJFU0Nod2NtbHRaU3dnWjJWdUtUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1kzSmxZWFJsUkdsbVptbGxTR1ZzYkcxaGJpaHdjbWx0WlN3Z1pXNWpMQ0JuWlc1bGNtRjBiM0lzSUdkbGJtTXBJSHRjYmlBZ2FXWWdLRUoxWm1abGNpNXBjMEoxWm1abGNpaGxibU1wSUh4OElDaDBlWEJsYjJZZ1pXNWpJRDA5UFNBbmMzUnlhVzVuSnlBbUppQmJKMmhsZUNjc0lDZGlhVzVoY25rbkxDQW5ZbUZ6WlRZMEoxMHVhVzVrWlhoUFppaGxibU1wSUQwOVBTQXRNU2twSUh0Y2JpQWdJQ0JuWlc1aklEMGdaMlZ1WlhKaGRHOXlPMXh1SUNBZ0lHZGxibVZ5WVhSdmNpQTlJR1Z1WXp0Y2JpQWdJQ0JsYm1NZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUgxY2JseHVJQ0JsYm1NZ1BTQmxibU1nZkh3Z0oySnBibUZ5ZVNjN1hHNGdJR2RsYm1NZ1BTQm5aVzVqSUh4OElDZGlhVzVoY25rbk8xeHVJQ0JuWlc1bGNtRjBiM0lnUFNCblpXNWxjbUYwYjNJZ2ZId2dibVYzSUVKMVptWmxjaWhiTWwwcE8xeHVYRzRnSUdsbUlDZ2hRblZtWm1WeUxtbHpRblZtWm1WeUtHZGxibVZ5WVhSdmNpa3BJSHRjYmlBZ0lDQm5aVzVsY21GMGIzSWdQU0J1WlhjZ1FuVm1abVZ5S0dkbGJtVnlZWFJ2Y2l3Z1oyVnVZeWs3WEc0Z0lIMWNibHh1SUNCcFppQW9kSGx3Wlc5bUlIQnlhVzFsSUQwOVBTQW5iblZ0WW1WeUp5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dSRWdvWjJWdVpYSmhkR1ZRY21sdFpTaHdjbWx0WlN3Z1oyVnVaWEpoZEc5eUtTd2daMlZ1WlhKaGRHOXlMQ0IwY25WbEtUdGNiaUFnZlZ4dVhHNGdJR2xtSUNnaFFuVm1abVZ5TG1selFuVm1abVZ5S0hCeWFXMWxLU2tnZTF4dUlDQWdJSEJ5YVcxbElEMGdibVYzSUVKMVptWmxjaWh3Y21sdFpTd2daVzVqS1R0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCdVpYY2dSRWdvY0hKcGJXVXNJR2RsYm1WeVlYUnZjaXdnZEhKMVpTazdYRzU5WEc1Y2JtVjRjRzl5ZEhNdVJHbG1abWxsU0dWc2JHMWhia2R5YjNWd0lEMGdaWGh3YjNKMGN5NWpjbVZoZEdWRWFXWm1hV1ZJWld4c2JXRnVSM0p2ZFhBZ1BTQmxlSEJ2Y25SekxtZGxkRVJwWm1acFpVaGxiR3h0WVc0Z1BTQm5aWFJFYVdabWFXVklaV3hzYldGdU8xeHVaWGh3YjNKMGN5NWpjbVZoZEdWRWFXWm1hV1ZJWld4c2JXRnVJRDBnWlhod2IzSjBjeTVFYVdabWFXVklaV3hzYldGdUlEMGdZM0psWVhSbFJHbG1abWxsU0dWc2JHMWhianRjYmlKZGZRPT0iLCJtb2R1bGUuZXhwb3J0cz17XG4gICAgXCJtb2RwMVwiOiB7XG4gICAgICAgIFwiZ2VuXCI6IFwiMDJcIixcbiAgICAgICAgXCJwcmltZVwiOiBcImZmZmZmZmZmZmZmZmZmZmZjOTBmZGFhMjIxNjhjMjM0YzRjNjYyOGI4MGRjMWNkMTI5MDI0ZTA4OGE2N2NjNzQwMjBiYmVhNjNiMTM5YjIyNTE0YTA4Nzk4ZTM0MDRkZGVmOTUxOWIzY2QzYTQzMWIzMDJiMGE2ZGYyNWYxNDM3NGZlMTM1NmQ2ZDUxYzI0NWU0ODViNTc2NjI1ZTdlYzZmNDRjNDJlOWE2M2EzNjIwZmZmZmZmZmZmZmZmZmZmZlwiXG4gICAgfSxcbiAgICBcIm1vZHAyXCI6IHtcbiAgICAgICAgXCJnZW5cIjogXCIwMlwiLFxuICAgICAgICBcInByaW1lXCI6IFwiZmZmZmZmZmZmZmZmZmZmZmM5MGZkYWEyMjE2OGMyMzRjNGM2NjI4YjgwZGMxY2QxMjkwMjRlMDg4YTY3Y2M3NDAyMGJiZWE2M2IxMzliMjI1MTRhMDg3OThlMzQwNGRkZWY5NTE5YjNjZDNhNDMxYjMwMmIwYTZkZjI1ZjE0Mzc0ZmUxMzU2ZDZkNTFjMjQ1ZTQ4NWI1NzY2MjVlN2VjNmY0NGM0MmU5YTYzN2VkNmIwYmZmNWNiNmY0MDZiN2VkZWUzODZiZmI1YTg5OWZhNWFlOWYyNDExN2M0YjFmZTY0OTI4NjY1MWVjZTY1MzgxZmZmZmZmZmZmZmZmZmZmZlwiXG4gICAgfSxcbiAgICBcIm1vZHA1XCI6IHtcbiAgICAgICAgXCJnZW5cIjogXCIwMlwiLFxuICAgICAgICBcInByaW1lXCI6IFwiZmZmZmZmZmZmZmZmZmZmZmM5MGZkYWEyMjE2OGMyMzRjNGM2NjI4YjgwZGMxY2QxMjkwMjRlMDg4YTY3Y2M3NDAyMGJiZWE2M2IxMzliMjI1MTRhMDg3OThlMzQwNGRkZWY5NTE5YjNjZDNhNDMxYjMwMmIwYTZkZjI1ZjE0Mzc0ZmUxMzU2ZDZkNTFjMjQ1ZTQ4NWI1NzY2MjVlN2VjNmY0NGM0MmU5YTYzN2VkNmIwYmZmNWNiNmY0MDZiN2VkZWUzODZiZmI1YTg5OWZhNWFlOWYyNDExN2M0YjFmZTY0OTI4NjY1MWVjZTQ1YjNkYzIwMDdjYjhhMTYzYmYwNTk4ZGE0ODM2MWM1NWQzOWE2OTE2M2ZhOGZkMjRjZjVmODM2NTVkMjNkY2EzYWQ5NjFjNjJmMzU2MjA4NTUyYmI5ZWQ1MjkwNzcwOTY5NjZkNjcwYzM1NGU0YWJjOTgwNGYxNzQ2YzA4Y2EyMzczMjdmZmZmZmZmZmZmZmZmZmZmXCJcbiAgICB9LFxuICAgIFwibW9kcDE0XCI6IHtcbiAgICAgICAgXCJnZW5cIjogXCIwMlwiLFxuICAgICAgICBcInByaW1lXCI6IFwiZmZmZmZmZmZmZmZmZmZmZmM5MGZkYWEyMjE2OGMyMzRjNGM2NjI4YjgwZGMxY2QxMjkwMjRlMDg4YTY3Y2M3NDAyMGJiZWE2M2IxMzliMjI1MTRhMDg3OThlMzQwNGRkZWY5NTE5YjNjZDNhNDMxYjMwMmIwYTZkZjI1ZjE0Mzc0ZmUxMzU2ZDZkNTFjMjQ1ZTQ4NWI1NzY2MjVlN2VjNmY0NGM0MmU5YTYzN2VkNmIwYmZmNWNiNmY0MDZiN2VkZWUzODZiZmI1YTg5OWZhNWFlOWYyNDExN2M0YjFmZTY0OTI4NjY1MWVjZTQ1YjNkYzIwMDdjYjhhMTYzYmYwNTk4ZGE0ODM2MWM1NWQzOWE2OTE2M2ZhOGZkMjRjZjVmODM2NTVkMjNkY2EzYWQ5NjFjNjJmMzU2MjA4NTUyYmI5ZWQ1MjkwNzcwOTY5NjZkNjcwYzM1NGU0YWJjOTgwNGYxNzQ2YzA4Y2ExODIxN2MzMjkwNWU0NjJlMzZjZTNiZTM5ZTc3MmMxODBlODYwMzliMjc4M2EyZWMwN2EyOGZiNWM1NWRmMDZmNGM1MmM5ZGUyYmNiZjY5NTU4MTcxODM5OTU0OTdjZWE5NTZhZTUxNWQyMjYxODk4ZmEwNTEwMTU3MjhlNWE4YWFjYWE2OGZmZmZmZmZmZmZmZmZmZmZcIlxuICAgIH0sXG4gICAgXCJtb2RwMTVcIjoge1xuICAgICAgICBcImdlblwiOiBcIjAyXCIsXG4gICAgICAgIFwicHJpbWVcIjogXCJmZmZmZmZmZmZmZmZmZmZmYzkwZmRhYTIyMTY4YzIzNGM0YzY2MjhiODBkYzFjZDEyOTAyNGUwODhhNjdjYzc0MDIwYmJlYTYzYjEzOWIyMjUxNGEwODc5OGUzNDA0ZGRlZjk1MTliM2NkM2E0MzFiMzAyYjBhNmRmMjVmMTQzNzRmZTEzNTZkNmQ1MWMyNDVlNDg1YjU3NjYyNWU3ZWM2ZjQ0YzQyZTlhNjM3ZWQ2YjBiZmY1Y2I2ZjQwNmI3ZWRlZTM4NmJmYjVhODk5ZmE1YWU5ZjI0MTE3YzRiMWZlNjQ5Mjg2NjUxZWNlNDViM2RjMjAwN2NiOGExNjNiZjA1OThkYTQ4MzYxYzU1ZDM5YTY5MTYzZmE4ZmQyNGNmNWY4MzY1NWQyM2RjYTNhZDk2MWM2MmYzNTYyMDg1NTJiYjllZDUyOTA3NzA5Njk2NmQ2NzBjMzU0ZTRhYmM5ODA0ZjE3NDZjMDhjYTE4MjE3YzMyOTA1ZTQ2MmUzNmNlM2JlMzllNzcyYzE4MGU4NjAzOWIyNzgzYTJlYzA3YTI4ZmI1YzU1ZGYwNmY0YzUyYzlkZTJiY2JmNjk1NTgxNzE4Mzk5NTQ5N2NlYTk1NmFlNTE1ZDIyNjE4OThmYTA1MTAxNTcyOGU1YThhYWFjNDJkYWQzMzE3MGQwNDUwN2EzM2E4NTUyMWFiZGYxY2JhNjRlY2ZiODUwNDU4ZGJlZjBhOGFlYTcxNTc1ZDA2MGM3ZGIzOTcwZjg1YTZlMWU0YzdhYmY1YWU4Y2RiMDkzM2Q3MWU4Yzk0ZTA0YTI1NjE5ZGNlZTNkMjI2MWFkMmVlNmJmMTJmZmEwNmQ5OGEwODY0ZDg3NjAyNzMzZWM4NmE2NDUyMWYyYjE4MTc3YjIwMGNiYmUxMTc1NzdhNjE1ZDZjNzcwOTg4YzBiYWQ5NDZlMjA4ZTI0ZmEwNzRlNWFiMzE0M2RiNWJmY2UwZmQxMDhlNGI4MmQxMjBhOTNhZDJjYWZmZmZmZmZmZmZmZmZmZmZcIlxuICAgIH0sXG4gICAgXCJtb2RwMTZcIjoge1xuICAgICAgICBcImdlblwiOiBcIjAyXCIsXG4gICAgICAgIFwicHJpbWVcIjogXCJmZmZmZmZmZmZmZmZmZmZmYzkwZmRhYTIyMTY4YzIzNGM0YzY2MjhiODBkYzFjZDEyOTAyNGUwODhhNjdjYzc0MDIwYmJlYTYzYjEzOWIyMjUxNGEwODc5OGUzNDA0ZGRlZjk1MTliM2NkM2E0MzFiMzAyYjBhNmRmMjVmMTQzNzRmZTEzNTZkNmQ1MWMyNDVlNDg1YjU3NjYyNWU3ZWM2ZjQ0YzQyZTlhNjM3ZWQ2YjBiZmY1Y2I2ZjQwNmI3ZWRlZTM4NmJmYjVhODk5ZmE1YWU5ZjI0MTE3YzRiMWZlNjQ5Mjg2NjUxZWNlNDViM2RjMjAwN2NiOGExNjNiZjA1OThkYTQ4MzYxYzU1ZDM5YTY5MTYzZmE4ZmQyNGNmNWY4MzY1NWQyM2RjYTNhZDk2MWM2MmYzNTYyMDg1NTJiYjllZDUyOTA3NzA5Njk2NmQ2NzBjMzU0ZTRhYmM5ODA0ZjE3NDZjMDhjYTE4MjE3YzMyOTA1ZTQ2MmUzNmNlM2JlMzllNzcyYzE4MGU4NjAzOWIyNzgzYTJlYzA3YTI4ZmI1YzU1ZGYwNmY0YzUyYzlkZTJiY2JmNjk1NTgxNzE4Mzk5NTQ5N2NlYTk1NmFlNTE1ZDIyNjE4OThmYTA1MTAxNTcyOGU1YThhYWFjNDJkYWQzMzE3MGQwNDUwN2EzM2E4NTUyMWFiZGYxY2JhNjRlY2ZiODUwNDU4ZGJlZjBhOGFlYTcxNTc1ZDA2MGM3ZGIzOTcwZjg1YTZlMWU0YzdhYmY1YWU4Y2RiMDkzM2Q3MWU4Yzk0ZTA0YTI1NjE5ZGNlZTNkMjI2MWFkMmVlNmJmMTJmZmEwNmQ5OGEwODY0ZDg3NjAyNzMzZWM4NmE2NDUyMWYyYjE4MTc3YjIwMGNiYmUxMTc1NzdhNjE1ZDZjNzcwOTg4YzBiYWQ5NDZlMjA4ZTI0ZmEwNzRlNWFiMzE0M2RiNWJmY2UwZmQxMDhlNGI4MmQxMjBhOTIxMDgwMTFhNzIzYzEyYTc4N2U2ZDc4ODcxOWExMGJkYmE1YjI2OTljMzI3MTg2YWY0ZTIzYzFhOTQ2ODM0YjYxNTBiZGEyNTgzZTljYTJhZDQ0Y2U4ZGJiYmMyZGIwNGRlOGVmOTJlOGVmYzE0MWZiZWNhYTYyODdjNTk0NzRlNmJjMDVkOTliMjk2NGZhMDkwYzNhMjIzM2JhMTg2NTE1YmU3ZWQxZjYxMjk3MGNlZTJkN2FmYjgxYmRkNzYyMTcwNDgxY2QwMDY5MTI3ZDViMDVhYTk5M2I0ZWE5ODhkOGZkZGMxODZmZmI3ZGM5MGE2YzA4ZjRkZjQzNWM5MzQwNjMxOTlmZmZmZmZmZmZmZmZmZmZmXCJcbiAgICB9LFxuICAgIFwibW9kcDE3XCI6IHtcbiAgICAgICAgXCJnZW5cIjogXCIwMlwiLFxuICAgICAgICBcInByaW1lXCI6IFwiZmZmZmZmZmZmZmZmZmZmZmM5MGZkYWEyMjE2OGMyMzRjNGM2NjI4YjgwZGMxY2QxMjkwMjRlMDg4YTY3Y2M3NDAyMGJiZWE2M2IxMzliMjI1MTRhMDg3OThlMzQwNGRkZWY5NTE5YjNjZDNhNDMxYjMwMmIwYTZkZjI1ZjE0Mzc0ZmUxMzU2ZDZkNTFjMjQ1ZTQ4NWI1NzY2MjVlN2VjNmY0NGM0MmU5YTYzN2VkNmIwYmZmNWNiNmY0MDZiN2VkZWUzODZiZmI1YTg5OWZhNWFlOWYyNDExN2M0YjFmZTY0OTI4NjY1MWVjZTQ1YjNkYzIwMDdjYjhhMTYzYmYwNTk4ZGE0ODM2MWM1NWQzOWE2OTE2M2ZhOGZkMjRjZjVmODM2NTVkMjNkY2EzYWQ5NjFjNjJmMzU2MjA4NTUyYmI5ZWQ1MjkwNzcwOTY5NjZkNjcwYzM1NGU0YWJjOTgwNGYxNzQ2YzA4Y2ExODIxN2MzMjkwNWU0NjJlMzZjZTNiZTM5ZTc3MmMxODBlODYwMzliMjc4M2EyZWMwN2EyOGZiNWM1NWRmMDZmNGM1MmM5ZGUyYmNiZjY5NTU4MTcxODM5OTU0OTdjZWE5NTZhZTUxNWQyMjYxODk4ZmEwNTEwMTU3MjhlNWE4YWFhYzQyZGFkMzMxNzBkMDQ1MDdhMzNhODU1MjFhYmRmMWNiYTY0ZWNmYjg1MDQ1OGRiZWYwYThhZWE3MTU3NWQwNjBjN2RiMzk3MGY4NWE2ZTFlNGM3YWJmNWFlOGNkYjA5MzNkNzFlOGM5NGUwNGEyNTYxOWRjZWUzZDIyNjFhZDJlZTZiZjEyZmZhMDZkOThhMDg2NGQ4NzYwMjczM2VjODZhNjQ1MjFmMmIxODE3N2IyMDBjYmJlMTE3NTc3YTYxNWQ2Yzc3MDk4OGMwYmFkOTQ2ZTIwOGUyNGZhMDc0ZTVhYjMxNDNkYjViZmNlMGZkMTA4ZTRiODJkMTIwYTkyMTA4MDExYTcyM2MxMmE3ODdlNmQ3ODg3MTlhMTBiZGJhNWIyNjk5YzMyNzE4NmFmNGUyM2MxYTk0NjgzNGI2MTUwYmRhMjU4M2U5Y2EyYWQ0NGNlOGRiYmJjMmRiMDRkZThlZjkyZThlZmMxNDFmYmVjYWE2Mjg3YzU5NDc0ZTZiYzA1ZDk5YjI5NjRmYTA5MGMzYTIyMzNiYTE4NjUxNWJlN2VkMWY2MTI5NzBjZWUyZDdhZmI4MWJkZDc2MjE3MDQ4MWNkMDA2OTEyN2Q1YjA1YWE5OTNiNGVhOTg4ZDhmZGRjMTg2ZmZiN2RjOTBhNmMwOGY0ZGY0MzVjOTM0MDI4NDkyMzZjM2ZhYjRkMjdjNzAyNmMxZDRkY2IyNjAyNjQ2ZGVjOTc1MWU3NjNkYmEzN2JkZjhmZjk0MDZhZDllNTMwZWU1ZGIzODJmNDEzMDAxYWViMDZhNTNlZDkwMjdkODMxMTc5NzI3YjA4NjVhODkxOGRhM2VkYmViY2Y5YjE0ZWQ0NGNlNmNiYWNlZDRiYjFiZGI3ZjE0NDdlNmNjMjU0YjMzMjA1MTUxMmJkN2FmNDI2ZmI4ZjQwMTM3OGNkMmJmNTk4M2NhMDFjNjRiOTJlY2YwMzJlYTE1ZDE3MjFkMDNmNDgyZDdjZTZlNzRmZWY2ZDU1ZTcwMmY0Njk4MGM4MmI1YTg0MDMxOTAwYjFjOWU1OWU3Yzk3ZmJlYzdlOGYzMjNhOTdhN2UzNmNjODhiZTBmMWQ0NWI3ZmY1ODVhYzU0YmQ0MDdiMjJiNDE1NGFhY2M4ZjZkN2ViZjQ4ZTFkODE0Y2M1ZWQyMGY4MDM3ZTBhNzk3MTVlZWYyOWJlMzI4MDZhMWQ1OGJiN2M1ZGE3NmY1NTBhYTNkOGExZmJmZjBlYjE5Y2NiMWEzMTNkNTVjZGE1NmM5ZWMyZWYyOTYzMjM4N2ZlOGQ3NmUzYzA0NjgwNDNlOGY2NjNmNDg2MGVlMTJiZjJkNWIwYjc0NzRkNmU2OTRmOTFlNmRjYzQwMjRmZmZmZmZmZmZmZmZmZmZmXCJcbiAgICB9LFxuICAgIFwibW9kcDE4XCI6IHtcbiAgICAgICAgXCJnZW5cIjogXCIwMlwiLFxuICAgICAgICBcInByaW1lXCI6IFwiZmZmZmZmZmZmZmZmZmZmZmM5MGZkYWEyMjE2OGMyMzRjNGM2NjI4YjgwZGMxY2QxMjkwMjRlMDg4YTY3Y2M3NDAyMGJiZWE2M2IxMzliMjI1MTRhMDg3OThlMzQwNGRkZWY5NTE5YjNjZDNhNDMxYjMwMmIwYTZkZjI1ZjE0Mzc0ZmUxMzU2ZDZkNTFjMjQ1ZTQ4NWI1NzY2MjVlN2VjNmY0NGM0MmU5YTYzN2VkNmIwYmZmNWNiNmY0MDZiN2VkZWUzODZiZmI1YTg5OWZhNWFlOWYyNDExN2M0YjFmZTY0OTI4NjY1MWVjZTQ1YjNkYzIwMDdjYjhhMTYzYmYwNTk4ZGE0ODM2MWM1NWQzOWE2OTE2M2ZhOGZkMjRjZjVmODM2NTVkMjNkY2EzYWQ5NjFjNjJmMzU2MjA4NTUyYmI5ZWQ1MjkwNzcwOTY5NjZkNjcwYzM1NGU0YWJjOTgwNGYxNzQ2YzA4Y2ExODIxN2MzMjkwNWU0NjJlMzZjZTNiZTM5ZTc3MmMxODBlODYwMzliMjc4M2EyZWMwN2EyOGZiNWM1NWRmMDZmNGM1MmM5ZGUyYmNiZjY5NTU4MTcxODM5OTU0OTdjZWE5NTZhZTUxNWQyMjYxODk4ZmEwNTEwMTU3MjhlNWE4YWFhYzQyZGFkMzMxNzBkMDQ1MDdhMzNhODU1MjFhYmRmMWNiYTY0ZWNmYjg1MDQ1OGRiZWYwYThhZWE3MTU3NWQwNjBjN2RiMzk3MGY4NWE2ZTFlNGM3YWJmNWFlOGNkYjA5MzNkNzFlOGM5NGUwNGEyNTYxOWRjZWUzZDIyNjFhZDJlZTZiZjEyZmZhMDZkOThhMDg2NGQ4NzYwMjczM2VjODZhNjQ1MjFmMmIxODE3N2IyMDBjYmJlMTE3NTc3YTYxNWQ2Yzc3MDk4OGMwYmFkOTQ2ZTIwOGUyNGZhMDc0ZTVhYjMxNDNkYjViZmNlMGZkMTA4ZTRiODJkMTIwYTkyMTA4MDExYTcyM2MxMmE3ODdlNmQ3ODg3MTlhMTBiZGJhNWIyNjk5YzMyNzE4NmFmNGUyM2MxYTk0NjgzNGI2MTUwYmRhMjU4M2U5Y2EyYWQ0NGNlOGRiYmJjMmRiMDRkZThlZjkyZThlZmMxNDFmYmVjYWE2Mjg3YzU5NDc0ZTZiYzA1ZDk5YjI5NjRmYTA5MGMzYTIyMzNiYTE4NjUxNWJlN2VkMWY2MTI5NzBjZWUyZDdhZmI4MWJkZDc2MjE3MDQ4MWNkMDA2OTEyN2Q1YjA1YWE5OTNiNGVhOTg4ZDhmZGRjMTg2ZmZiN2RjOTBhNmMwOGY0ZGY0MzVjOTM0MDI4NDkyMzZjM2ZhYjRkMjdjNzAyNmMxZDRkY2IyNjAyNjQ2ZGVjOTc1MWU3NjNkYmEzN2JkZjhmZjk0MDZhZDllNTMwZWU1ZGIzODJmNDEzMDAxYWViMDZhNTNlZDkwMjdkODMxMTc5NzI3YjA4NjVhODkxOGRhM2VkYmViY2Y5YjE0ZWQ0NGNlNmNiYWNlZDRiYjFiZGI3ZjE0NDdlNmNjMjU0YjMzMjA1MTUxMmJkN2FmNDI2ZmI4ZjQwMTM3OGNkMmJmNTk4M2NhMDFjNjRiOTJlY2YwMzJlYTE1ZDE3MjFkMDNmNDgyZDdjZTZlNzRmZWY2ZDU1ZTcwMmY0Njk4MGM4MmI1YTg0MDMxOTAwYjFjOWU1OWU3Yzk3ZmJlYzdlOGYzMjNhOTdhN2UzNmNjODhiZTBmMWQ0NWI3ZmY1ODVhYzU0YmQ0MDdiMjJiNDE1NGFhY2M4ZjZkN2ViZjQ4ZTFkODE0Y2M1ZWQyMGY4MDM3ZTBhNzk3MTVlZWYyOWJlMzI4MDZhMWQ1OGJiN2M1ZGE3NmY1NTBhYTNkOGExZmJmZjBlYjE5Y2NiMWEzMTNkNTVjZGE1NmM5ZWMyZWYyOTYzMjM4N2ZlOGQ3NmUzYzA0NjgwNDNlOGY2NjNmNDg2MGVlMTJiZjJkNWIwYjc0NzRkNmU2OTRmOTFlNmRiZTExNTk3NGEzOTI2ZjEyZmVlNWU0Mzg3NzdjYjZhOTMyZGY4Y2Q4YmVjNGQwNzNiOTMxYmEzYmM4MzJiNjhkOWRkMzAwNzQxZmE3YmY4YWZjNDdlZDI1NzZmNjkzNmJhNDI0NjYzYWFiNjM5YzVhZTRmNTY4MzQyM2I0NzQyYmYxYzk3ODIzOGYxNmNiZTM5ZDY1MmRlM2ZkYjhiZWZjODQ4YWQ5MjIyMjJlMDRhNDAzN2MwNzEzZWI1N2E4MWEyM2YwYzczNDczZmM2NDZjZWEzMDZiNGJjYmM4ODYyZjgzODVkZGZhOWQ0YjdmYTJjMDg3ZTg3OTY4MzMwM2VkNWJkZDNhMDYyYjNjZjViM2EyNzhhNjZkMmExM2Y4M2Y0NGY4MmRkZjMxMGVlMDc0YWI2YTM2NDU5N2U4OTlhMDI1NWRjMTY0ZjMxY2M1MDg0Njg1MWRmOWFiNDgxOTVkZWQ3ZWExYjFkNTEwYmQ3ZWU3NGQ3M2ZhZjM2YmMzMWVjZmEyNjgzNTkwNDZmNGViODc5ZjkyNDAwOTQzOGI0ODFjNmNkNzg4OWEwMDJlZDVlZTM4MmJjOTE5MGRhNmZjMDI2ZTQ3OTU1OGU0NDc1Njc3ZTlhYTllMzA1MGUyNzY1Njk0ZGZjODFmNTZlODgwYjk2ZTcxNjBjOTgwZGQ5OGVkZDNkZmZmZmZmZmZmZmZmZmZmZmZcIlxuICAgIH1cbn0iLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIE1pbGxlclJhYmluID0gcmVxdWlyZSgnbWlsbGVyLXJhYmluJyk7XG52YXIgbWlsbGVyUmFiaW4gPSBuZXcgTWlsbGVyUmFiaW4oKTtcbnZhciBUV0VOVFlGT1VSID0gbmV3IEJOKDI0KTtcbnZhciBFTEVWRU4gPSBuZXcgQk4oMTEpO1xudmFyIFRFTiA9IG5ldyBCTigxMCk7XG52YXIgVEhSRUUgPSBuZXcgQk4oMyk7XG52YXIgU0VWRU4gPSBuZXcgQk4oNyk7XG52YXIgcHJpbWVzID0gcmVxdWlyZSgnLi9nZW5lcmF0ZVByaW1lJyk7XG52YXIgcmFuZG9tQnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpO1xubW9kdWxlLmV4cG9ydHMgPSBESDtcblxuZnVuY3Rpb24gc2V0UHVibGljS2V5KHB1YiwgZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAndXRmOCc7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHB1YikpIHtcbiAgICBwdWIgPSBuZXcgQnVmZmVyKHB1YiwgZW5jKTtcbiAgfVxuICB0aGlzLl9wdWIgPSBuZXcgQk4ocHViKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHNldFByaXZhdGVLZXkocHJpdiwgZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAndXRmOCc7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHByaXYpKSB7XG4gICAgcHJpdiA9IG5ldyBCdWZmZXIocHJpdiwgZW5jKTtcbiAgfVxuICB0aGlzLl9wcml2ID0gbmV3IEJOKHByaXYpO1xuICByZXR1cm4gdGhpcztcbn1cblxudmFyIHByaW1lQ2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGNoZWNrUHJpbWUocHJpbWUsIGdlbmVyYXRvcikge1xuICB2YXIgZ2VuID0gZ2VuZXJhdG9yLnRvU3RyaW5nKCdoZXgnKTtcbiAgdmFyIGhleCA9IFtnZW4sIHByaW1lLnRvU3RyaW5nKDE2KV0uam9pbignXycpO1xuICBpZiAoaGV4IGluIHByaW1lQ2FjaGUpIHtcbiAgICByZXR1cm4gcHJpbWVDYWNoZVtoZXhdO1xuICB9XG4gIHZhciBlcnJvciA9IDA7XG4gIFxuICBpZiAocHJpbWUuaXNFdmVuKCkgfHxcbiAgICAhcHJpbWVzLnNpbXBsZVNpZXZlIHx8XG4gICAgIXByaW1lcy5mZXJtYXRUZXN0KHByaW1lKSB8fFxuICAgICFtaWxsZXJSYWJpbi50ZXN0KHByaW1lKSkge1xuICAgIC8vbm90IGEgcHJpbWUgc28gKzFcbiAgICBlcnJvciArPSAxO1xuICAgIFxuICAgIGlmIChnZW4gPT09ICcwMicgfHwgZ2VuID09PSAnMDUnKSB7XG4gICAgICAvLyB3ZSdkIGJlIGFibGUgdG8gY2hlY2sgdGhlIGdlbmVyYXRvclxuICAgICAgLy8gaXQgd291bGQgZmFpbCBzbyArOFxuICAgICAgZXJyb3IgKz0gODtcbiAgICB9IGVsc2Uge1xuICAgICAgLy93ZSB3b3VsZG4ndCBiZSBhYmxlIHRvIHRlc3QgdGhlIGdlbmVyYXRvclxuICAgICAgLy8gc28gKzRcbiAgICAgIGVycm9yICs9IDQ7XG4gICAgfVxuICAgIHByaW1lQ2FjaGVbaGV4XSA9IGVycm9yO1xuICAgIHJldHVybiBlcnJvcjtcbiAgfVxuICBpZiAoIW1pbGxlclJhYmluLnRlc3QocHJpbWUuc2hybigxKSkpIHtcbiAgICAvL25vdCBhIHNhZmUgcHJpbWVcbiAgICBlcnJvciArPSAyO1xuICB9XG4gIHZhciByZW07XG4gIHN3aXRjaCAoZ2VuKSB7XG4gICAgY2FzZSAnMDInOlxuICAgICAgaWYgKHByaW1lLm1vZChUV0VOVFlGT1VSKS5jbXAoRUxFVkVOKSkge1xuICAgICAgICAvLyB1bnN1aWRhYmxlIGdlbmVyYXRvclxuICAgICAgICBlcnJvciArPSA4O1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnMDUnOlxuICAgICAgcmVtID0gcHJpbWUubW9kKFRFTik7XG4gICAgICBpZiAocmVtLmNtcChUSFJFRSkgJiYgcmVtLmNtcChTRVZFTikpIHtcbiAgICAgICAgLy8gcHJpbWUgbW9kIDEwIG5lZWRzIHRvIGVxdWFsIDMgb3IgN1xuICAgICAgICBlcnJvciArPSA4O1xuICAgICAgfSBcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6IFxuICAgICAgZXJyb3IgKz0gNDtcbiAgfVxuICBwcmltZUNhY2hlW2hleF0gPSBlcnJvcjtcbiAgcmV0dXJuIGVycm9yO1xufVxuXG5mdW5jdGlvbiBkZWZpbmVFcnJvciAoc2VsZiwgZXJyb3IpIHtcbiAgdHJ5IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZiwgJ3ZlcmlmeUVycm9yJywge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBlcnJvcixcbiAgICAgIHdyaXRhYmxlOiBmYWxzZVxuICAgIH0pO1xuICB9IGNhdGNoKGUpIHtcbiAgICBzZWxmLnZlcmlmeUVycm9yID0gZXJyb3I7XG4gIH1cbn1cbmZ1bmN0aW9uIERIKHByaW1lLCBnZW5lcmF0b3IsIG1hbGxlYWJsZSkge1xuICB0aGlzLnNldEdlbmVyYXRvcihnZW5lcmF0b3IpO1xuICB0aGlzLl9fcHJpbWUgPSBuZXcgQk4ocHJpbWUpO1xuICB0aGlzLl9wcmltZSA9IEJOLm1vbnQodGhpcy5fX3ByaW1lKTtcbiAgdGhpcy5fcHJpbWVMZW4gPSBwcmltZS5sZW5ndGg7XG4gIHRoaXMuX3B1YiA9IHZvaWQgMDtcbiAgdGhpcy5fcHJpdiA9IHZvaWQgMDtcbiAgXG4gIGlmIChtYWxsZWFibGUpIHtcbiAgICB0aGlzLnNldFB1YmxpY0tleSA9IHNldFB1YmxpY0tleTtcbiAgICB0aGlzLnNldFByaXZhdGVLZXkgPSBzZXRQcml2YXRlS2V5O1xuICAgIGRlZmluZUVycm9yKHRoaXMsIGNoZWNrUHJpbWUodGhpcy5fX3ByaW1lLCBnZW5lcmF0b3IpKTtcbiAgfSBlbHNlIHtcbiAgICBkZWZpbmVFcnJvcih0aGlzLCA4KTtcbiAgfVxufVxuXG5ESC5wcm90b3R5cGUuZ2VuZXJhdGVLZXlzID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuX3ByaXYpIHtcbiAgICB0aGlzLl9wcml2ID0gbmV3IEJOKHJhbmRvbUJ5dGVzKHRoaXMuX3ByaW1lTGVuKSk7XG4gIH1cbiAgdGhpcy5fcHViID0gdGhpcy5fZ2VuLnRvUmVkKHRoaXMuX3ByaW1lKS5yZWRQb3codGhpcy5fcHJpdikuZnJvbVJlZCgpO1xuICByZXR1cm4gdGhpcy5nZXRQdWJsaWNLZXkoKTtcbn07XG5cbkRILnByb3RvdHlwZS5jb21wdXRlU2VjcmV0ID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gIG90aGVyID0gbmV3IEJOKG90aGVyKTtcbiAgb3RoZXIgPSBvdGhlci50b1JlZCh0aGlzLl9wcmltZSk7XG4gIHZhciBzZWNyZXQgPSBvdGhlci5yZWRQb3codGhpcy5fcHJpdikuZnJvbVJlZCgpO1xuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcihzZWNyZXQudG9BcnJheSgpKTtcbiAgdmFyIHByaW1lID0gdGhpcy5nZXRQcmltZSgpO1xuICBpZiAob3V0Lmxlbmd0aCA8IHByaW1lLmxlbmd0aCkge1xuICAgIHZhciBmcm9udCA9IG5ldyBCdWZmZXIocHJpbWUubGVuZ3RoIC0gb3V0Lmxlbmd0aCk7XG4gICAgZnJvbnQuZmlsbCgwKTtcbiAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFtmcm9udCwgb3V0XSk7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG5cbkRILnByb3RvdHlwZS5nZXRQdWJsaWNLZXkgPSBmdW5jdGlvbiBnZXRQdWJsaWNLZXkoZW5jKSB7XG4gIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZSh0aGlzLl9wdWIsIGVuYyk7XG59O1xuXG5ESC5wcm90b3R5cGUuZ2V0UHJpdmF0ZUtleSA9IGZ1bmN0aW9uIGdldFByaXZhdGVLZXkoZW5jKSB7XG4gIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZSh0aGlzLl9wcml2LCBlbmMpO1xufTtcblxuREgucHJvdG90eXBlLmdldFByaW1lID0gZnVuY3Rpb24gKGVuYykge1xuICByZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUodGhpcy5fX3ByaW1lLCBlbmMpO1xufTtcblxuREgucHJvdG90eXBlLmdldEdlbmVyYXRvciA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKHRoaXMuX2dlbiwgZW5jKTtcbn07XG5cbkRILnByb3RvdHlwZS5zZXRHZW5lcmF0b3IgPSBmdW5jdGlvbiAoZ2VuLCBlbmMpIHtcbiAgZW5jID0gZW5jIHx8ICd1dGY4JztcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoZ2VuKSkge1xuICAgIGdlbiA9IG5ldyBCdWZmZXIoZ2VuLCBlbmMpO1xuICB9XG4gIHRoaXMuX2dlbiA9IG5ldyBCTihnZW4pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGZvcm1hdFJldHVyblZhbHVlKGJuLCBlbmMpIHtcbiAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIoYm4udG9BcnJheSgpKTtcbiAgaWYgKCFlbmMpIHtcbiAgICByZXR1cm4gYnVmO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBidWYudG9TdHJpbmcoZW5jKTtcbiAgfVxufVxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZaR2xtWm1sbExXaGxiR3h0WVc0dmJHbGlMMlJvTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CSWl3aVptbHNaU0k2SW1kbGJtVnlZWFJsWkM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SjJZWElnUWs0Z1BTQnlaWEYxYVhKbEtDZGliaTVxY3ljcE8xeHVkbUZ5SUUxcGJHeGxjbEpoWW1sdUlEMGdjbVZ4ZFdseVpTZ25iV2xzYkdWeUxYSmhZbWx1SnlrN1hHNTJZWElnYldsc2JHVnlVbUZpYVc0Z1BTQnVaWGNnVFdsc2JHVnlVbUZpYVc0b0tUdGNiblpoY2lCVVYwVk9WRmxHVDFWU0lEMGdibVYzSUVKT0tESTBLVHRjYm5aaGNpQkZURVZXUlU0Z1BTQnVaWGNnUWs0b01URXBPMXh1ZG1GeUlGUkZUaUE5SUc1bGR5QkNUaWd4TUNrN1hHNTJZWElnVkVoU1JVVWdQU0J1WlhjZ1FrNG9NeWs3WEc1MllYSWdVMFZXUlU0Z1BTQnVaWGNnUWs0b055azdYRzUyWVhJZ2NISnBiV1Z6SUQwZ2NtVnhkV2x5WlNnbkxpOW5aVzVsY21GMFpWQnlhVzFsSnlrN1hHNTJZWElnY21GdVpHOXRRbmwwWlhNZ1BTQnlaWEYxYVhKbEtDZHlZVzVrYjIxaWVYUmxjeWNwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCRVNEdGNibHh1Wm5WdVkzUnBiMjRnYzJWMFVIVmliR2xqUzJWNUtIQjFZaXdnWlc1aktTQjdYRzRnSUdWdVl5QTlJR1Z1WXlCOGZDQW5kWFJtT0NjN1hHNGdJR2xtSUNnaFFuVm1abVZ5TG1selFuVm1abVZ5S0hCMVlpa3BJSHRjYmlBZ0lDQndkV0lnUFNCdVpYY2dRblZtWm1WeUtIQjFZaXdnWlc1aktUdGNiaUFnZlZ4dUlDQjBhR2x6TGw5d2RXSWdQU0J1WlhjZ1FrNG9jSFZpS1R0Y2JpQWdjbVYwZFhKdUlIUm9hWE03WEc1OVhHNWNibVoxYm1OMGFXOXVJSE5sZEZCeWFYWmhkR1ZMWlhrb2NISnBkaXdnWlc1aktTQjdYRzRnSUdWdVl5QTlJR1Z1WXlCOGZDQW5kWFJtT0NjN1hHNGdJR2xtSUNnaFFuVm1abVZ5TG1selFuVm1abVZ5S0hCeWFYWXBLU0I3WEc0Z0lDQWdjSEpwZGlBOUlHNWxkeUJDZFdabVpYSW9jSEpwZGl3Z1pXNWpLVHRjYmlBZ2ZWeHVJQ0IwYUdsekxsOXdjbWwySUQwZ2JtVjNJRUpPS0hCeWFYWXBPMXh1SUNCeVpYUjFjbTRnZEdocGN6dGNibjFjYmx4dWRtRnlJSEJ5YVcxbFEyRmphR1VnUFNCN2ZUdGNibVoxYm1OMGFXOXVJR05vWldOclVISnBiV1VvY0hKcGJXVXNJR2RsYm1WeVlYUnZjaWtnZTF4dUlDQjJZWElnWjJWdUlEMGdaMlZ1WlhKaGRHOXlMblJ2VTNSeWFXNW5LQ2RvWlhnbktUdGNiaUFnZG1GeUlHaGxlQ0E5SUZ0blpXNHNJSEJ5YVcxbExuUnZVM1J5YVc1bktERTJLVjB1YW05cGJpZ25YeWNwTzF4dUlDQnBaaUFvYUdWNElHbHVJSEJ5YVcxbFEyRmphR1VwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdjSEpwYldWRFlXTm9aVnRvWlhoZE8xeHVJQ0I5WEc0Z0lIWmhjaUJsY25KdmNpQTlJREE3WEc0Z0lGeHVJQ0JwWmlBb2NISnBiV1V1YVhORmRtVnVLQ2tnZkh4Y2JpQWdJQ0FoY0hKcGJXVnpMbk5wYlhCc1pWTnBaWFpsSUh4OFhHNGdJQ0FnSVhCeWFXMWxjeTVtWlhKdFlYUlVaWE4wS0hCeWFXMWxLU0I4ZkZ4dUlDQWdJQ0Z0YVd4c1pYSlNZV0pwYmk1MFpYTjBLSEJ5YVcxbEtTa2dlMXh1SUNBZ0lDOHZibTkwSUdFZ2NISnBiV1VnYzI4Z0t6RmNiaUFnSUNCbGNuSnZjaUFyUFNBeE8xeHVJQ0FnSUZ4dUlDQWdJR2xtSUNoblpXNGdQVDA5SUNjd01pY2dmSHdnWjJWdUlEMDlQU0FuTURVbktTQjdYRzRnSUNBZ0lDQXZMeUIzWlNka0lHSmxJR0ZpYkdVZ2RHOGdZMmhsWTJzZ2RHaGxJR2RsYm1WeVlYUnZjbHh1SUNBZ0lDQWdMeThnYVhRZ2QyOTFiR1FnWm1GcGJDQnpieUFyT0Z4dUlDQWdJQ0FnWlhKeWIzSWdLejBnT0R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdMeTkzWlNCM2IzVnNaRzRuZENCaVpTQmhZbXhsSUhSdklIUmxjM1FnZEdobElHZGxibVZ5WVhSdmNseHVJQ0FnSUNBZ0x5OGdjMjhnS3pSY2JpQWdJQ0FnSUdWeWNtOXlJQ3M5SURRN1hHNGdJQ0FnZlZ4dUlDQWdJSEJ5YVcxbFEyRmphR1ZiYUdWNFhTQTlJR1Z5Y205eU8xeHVJQ0FnSUhKbGRIVnliaUJsY25KdmNqdGNiaUFnZlZ4dUlDQnBaaUFvSVcxcGJHeGxjbEpoWW1sdUxuUmxjM1FvY0hKcGJXVXVjMmh5YmlneEtTa3BJSHRjYmlBZ0lDQXZMMjV2ZENCaElITmhabVVnY0hKcGJXVmNiaUFnSUNCbGNuSnZjaUFyUFNBeU8xeHVJQ0I5WEc0Z0lIWmhjaUJ5WlcwN1hHNGdJSE4zYVhSamFDQW9aMlZ1S1NCN1hHNGdJQ0FnWTJGelpTQW5NREluT2x4dUlDQWdJQ0FnYVdZZ0tIQnlhVzFsTG0xdlpDaFVWMFZPVkZsR1QxVlNLUzVqYlhBb1JVeEZWa1ZPS1NrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUIxYm5OMWFXUmhZbXhsSUdkbGJtVnlZWFJ2Y2x4dUlDQWdJQ0FnSUNCbGNuSnZjaUFyUFNBNE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdZMkZ6WlNBbk1EVW5PbHh1SUNBZ0lDQWdjbVZ0SUQwZ2NISnBiV1V1Ylc5a0tGUkZUaWs3WEc0Z0lDQWdJQ0JwWmlBb2NtVnRMbU50Y0NoVVNGSkZSU2tnSmlZZ2NtVnRMbU50Y0NoVFJWWkZUaWtwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdjSEpwYldVZ2JXOWtJREV3SUc1bFpXUnpJSFJ2SUdWeGRXRnNJRE1nYjNJZ04xeHVJQ0FnSUNBZ0lDQmxjbkp2Y2lBclBTQTRPMXh1SUNBZ0lDQWdmU0JjYmlBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUdSbFptRjFiSFE2SUZ4dUlDQWdJQ0FnWlhKeWIzSWdLejBnTkR0Y2JpQWdmVnh1SUNCd2NtbHRaVU5oWTJobFcyaGxlRjBnUFNCbGNuSnZjanRjYmlBZ2NtVjBkWEp1SUdWeWNtOXlPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmtaV1pwYm1WRmNuSnZjaUFvYzJWc1ppd2daWEp5YjNJcElIdGNiaUFnZEhKNUlIdGNiaUFnSUNCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29jMlZzWml3Z0ozWmxjbWxtZVVWeWNtOXlKeXdnZTF4dUlDQWdJQ0FnWlc1MWJXVnlZV0pzWlRvZ2RISjFaU3hjYmlBZ0lDQWdJSFpoYkhWbE9pQmxjbkp2Y2l4Y2JpQWdJQ0FnSUhkeWFYUmhZbXhsT2lCbVlXeHpaVnh1SUNBZ0lIMHBPMXh1SUNCOUlHTmhkR05vS0dVcElIdGNiaUFnSUNCelpXeG1MblpsY21sbWVVVnljbTl5SUQwZ1pYSnliM0k3WEc0Z0lIMWNibjFjYm1aMWJtTjBhVzl1SUVSSUtIQnlhVzFsTENCblpXNWxjbUYwYjNJc0lHMWhiR3hsWVdKc1pTa2dlMXh1SUNCMGFHbHpMbk5sZEVkbGJtVnlZWFJ2Y2loblpXNWxjbUYwYjNJcE8xeHVJQ0IwYUdsekxsOWZjSEpwYldVZ1BTQnVaWGNnUWs0b2NISnBiV1VwTzF4dUlDQjBhR2x6TGw5d2NtbHRaU0E5SUVKT0xtMXZiblFvZEdocGN5NWZYM0J5YVcxbEtUdGNiaUFnZEdocGN5NWZjSEpwYldWTVpXNGdQU0J3Y21sdFpTNXNaVzVuZEdnN1hHNGdJSFJvYVhNdVgzQjFZaUE5SUhadmFXUWdNRHRjYmlBZ2RHaHBjeTVmY0hKcGRpQTlJSFp2YVdRZ01EdGNiaUFnWEc0Z0lHbG1JQ2h0WVd4c1pXRmliR1VwSUh0Y2JpQWdJQ0IwYUdsekxuTmxkRkIxWW14cFkwdGxlU0E5SUhObGRGQjFZbXhwWTB0bGVUdGNiaUFnSUNCMGFHbHpMbk5sZEZCeWFYWmhkR1ZMWlhrZ1BTQnpaWFJRY21sMllYUmxTMlY1TzF4dUlDQWdJR1JsWm1sdVpVVnljbTl5S0hSb2FYTXNJR05vWldOclVISnBiV1VvZEdocGN5NWZYM0J5YVcxbExDQm5aVzVsY21GMGIzSXBLVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0JrWldacGJtVkZjbkp2Y2loMGFHbHpMQ0E0S1R0Y2JpQWdmVnh1ZlZ4dVhHNUVTQzV3Y205MGIzUjVjR1V1WjJWdVpYSmhkR1ZMWlhseklEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQnBaaUFvSVhSb2FYTXVYM0J5YVhZcElIdGNiaUFnSUNCMGFHbHpMbDl3Y21sMklEMGdibVYzSUVKT0tISmhibVJ2YlVKNWRHVnpLSFJvYVhNdVgzQnlhVzFsVEdWdUtTazdYRzRnSUgxY2JpQWdkR2hwY3k1ZmNIVmlJRDBnZEdocGN5NWZaMlZ1TG5SdlVtVmtLSFJvYVhNdVgzQnlhVzFsS1M1eVpXUlFiM2NvZEdocGN5NWZjSEpwZGlrdVpuSnZiVkpsWkNncE8xeHVJQ0J5WlhSMWNtNGdkR2hwY3k1blpYUlFkV0pzYVdOTFpYa29LVHRjYm4wN1hHNWNia1JJTG5CeWIzUnZkSGx3WlM1amIyMXdkWFJsVTJWamNtVjBJRDBnWm5WdVkzUnBiMjRnS0c5MGFHVnlLU0I3WEc0Z0lHOTBhR1Z5SUQwZ2JtVjNJRUpPS0c5MGFHVnlLVHRjYmlBZ2IzUm9aWElnUFNCdmRHaGxjaTUwYjFKbFpDaDBhR2x6TGw5d2NtbHRaU2s3WEc0Z0lIWmhjaUJ6WldOeVpYUWdQU0J2ZEdobGNpNXlaV1JRYjNjb2RHaHBjeTVmY0hKcGRpa3Vabkp2YlZKbFpDZ3BPMXh1SUNCMllYSWdiM1YwSUQwZ2JtVjNJRUoxWm1abGNpaHpaV055WlhRdWRHOUJjbkpoZVNncEtUdGNiaUFnZG1GeUlIQnlhVzFsSUQwZ2RHaHBjeTVuWlhSUWNtbHRaU2dwTzF4dUlDQnBaaUFvYjNWMExteGxibWQwYUNBOElIQnlhVzFsTG14bGJtZDBhQ2tnZTF4dUlDQWdJSFpoY2lCbWNtOXVkQ0E5SUc1bGR5QkNkV1ptWlhJb2NISnBiV1V1YkdWdVozUm9JQzBnYjNWMExteGxibWQwYUNrN1hHNGdJQ0FnWm5KdmJuUXVabWxzYkNnd0tUdGNiaUFnSUNCdmRYUWdQU0JDZFdabVpYSXVZMjl1WTJGMEtGdG1jbTl1ZEN3Z2IzVjBYU2s3WEc0Z0lIMWNiaUFnY21WMGRYSnVJRzkxZER0Y2JuMDdYRzVjYmtSSUxuQnliM1J2ZEhsd1pTNW5aWFJRZFdKc2FXTkxaWGtnUFNCbWRXNWpkR2x2YmlCblpYUlFkV0pzYVdOTFpYa29aVzVqS1NCN1hHNGdJSEpsZEhWeWJpQm1iM0p0WVhSU1pYUjFjbTVXWVd4MVpTaDBhR2x6TGw5d2RXSXNJR1Z1WXlrN1hHNTlPMXh1WEc1RVNDNXdjbTkwYjNSNWNHVXVaMlYwVUhKcGRtRjBaVXRsZVNBOUlHWjFibU4wYVc5dUlHZGxkRkJ5YVhaaGRHVkxaWGtvWlc1aktTQjdYRzRnSUhKbGRIVnliaUJtYjNKdFlYUlNaWFIxY201V1lXeDFaU2gwYUdsekxsOXdjbWwyTENCbGJtTXBPMXh1ZlR0Y2JseHVSRWd1Y0hKdmRHOTBlWEJsTG1kbGRGQnlhVzFsSUQwZ1puVnVZM1JwYjI0Z0tHVnVZeWtnZTF4dUlDQnlaWFIxY200Z1ptOXliV0YwVW1WMGRYSnVWbUZzZFdVb2RHaHBjeTVmWDNCeWFXMWxMQ0JsYm1NcE8xeHVmVHRjYmx4dVJFZ3VjSEp2ZEc5MGVYQmxMbWRsZEVkbGJtVnlZWFJ2Y2lBOUlHWjFibU4wYVc5dUlDaGxibU1wSUh0Y2JpQWdjbVYwZFhKdUlHWnZjbTFoZEZKbGRIVnlibFpoYkhWbEtIUm9hWE11WDJkbGJpd2daVzVqS1R0Y2JuMDdYRzVjYmtSSUxuQnliM1J2ZEhsd1pTNXpaWFJIWlc1bGNtRjBiM0lnUFNCbWRXNWpkR2x2YmlBb1oyVnVMQ0JsYm1NcElIdGNiaUFnWlc1aklEMGdaVzVqSUh4OElDZDFkR1k0Snp0Y2JpQWdhV1lnS0NGQ2RXWm1aWEl1YVhOQ2RXWm1aWElvWjJWdUtTa2dlMXh1SUNBZ0lHZGxiaUE5SUc1bGR5QkNkV1ptWlhJb1oyVnVMQ0JsYm1NcE8xeHVJQ0I5WEc0Z0lIUm9hWE11WDJkbGJpQTlJRzVsZHlCQ1RpaG5aVzRwTzF4dUlDQnlaWFIxY200Z2RHaHBjenRjYm4wN1hHNWNibVoxYm1OMGFXOXVJR1p2Y20xaGRGSmxkSFZ5YmxaaGJIVmxLR0p1TENCbGJtTXBJSHRjYmlBZ2RtRnlJR0oxWmlBOUlHNWxkeUJDZFdabVpYSW9ZbTR1ZEc5QmNuSmhlU2dwS1R0Y2JpQWdhV1lnS0NGbGJtTXBJSHRjYmlBZ0lDQnlaWFIxY200Z1luVm1PMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSEpsZEhWeWJpQmlkV1l1ZEc5VGRISnBibWNvWlc1aktUdGNiaUFnZlZ4dWZTSmRmUT09IiwidmFyIHJhbmRvbUJ5dGVzID0gcmVxdWlyZSgncmFuZG9tYnl0ZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZmluZFByaW1lO1xuZmluZFByaW1lLnNpbXBsZVNpZXZlID0gc2ltcGxlU2lldmU7XG5maW5kUHJpbWUuZmVybWF0VGVzdCA9IGZlcm1hdFRlc3Q7XG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIFRXRU5UWUZPVVIgPSBuZXcgQk4oMjQpO1xudmFyIE1pbGxlclJhYmluID0gcmVxdWlyZSgnbWlsbGVyLXJhYmluJyk7XG52YXIgbWlsbGVyUmFiaW4gPSBuZXcgTWlsbGVyUmFiaW4oKTtcbnZhciBPTkUgPSBuZXcgQk4oMSk7XG52YXIgVFdPID0gbmV3IEJOKDIpO1xudmFyIEZJVkUgPSBuZXcgQk4oNSk7XG52YXIgU0lYVEVFTiA9IG5ldyBCTigxNik7XG52YXIgRUlHSFQgPSBuZXcgQk4oOCk7XG52YXIgVEVOID0gbmV3IEJOKDEwKTtcbnZhciBUSFJFRSA9IG5ldyBCTigzKTtcbnZhciBTRVZFTiA9IG5ldyBCTig3KTtcbnZhciBFTEVWRU4gPSBuZXcgQk4oMTEpO1xudmFyIEZPVVIgPSBuZXcgQk4oNCk7XG52YXIgVFdFTFZFID0gbmV3IEJOKDEyKTtcbnZhciBwcmltZXMgPSBudWxsO1xuXG5mdW5jdGlvbiBfZ2V0UHJpbWVzKCkge1xuICBpZiAocHJpbWVzICE9PSBudWxsKVxuICAgIHJldHVybiBwcmltZXM7XG5cbiAgdmFyIGxpbWl0ID0gMHgxMDAwMDA7XG4gIHZhciByZXMgPSBbXTtcbiAgcmVzWzBdID0gMjtcbiAgZm9yICh2YXIgaSA9IDEsIGsgPSAzOyBrIDwgbGltaXQ7IGsgKz0gMikge1xuICAgIHZhciBzcXJ0ID0gTWF0aC5jZWlsKE1hdGguc3FydChrKSk7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBpICYmIHJlc1tqXSA8PSBzcXJ0OyBqKyspXG4gICAgICBpZiAoayAlIHJlc1tqXSA9PT0gMClcbiAgICAgICAgYnJlYWs7XG5cbiAgICBpZiAoaSAhPT0gaiAmJiByZXNbal0gPD0gc3FydClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgcmVzW2krK10gPSBrO1xuICB9XG4gIHByaW1lcyA9IHJlcztcbiAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gc2ltcGxlU2lldmUocCkge1xuICB2YXIgcHJpbWVzID0gX2dldFByaW1lcygpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJpbWVzLmxlbmd0aDsgaSsrKVxuICAgIGlmIChwLm1vZG4ocHJpbWVzW2ldKSA9PT0gMCkge1xuICAgICAgaWYgKHAuY21wbihwcmltZXNbaV0pID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZmVybWF0VGVzdChwKSB7XG4gIHZhciByZWQgPSBCTi5tb250KHApO1xuICByZXR1cm4gVFdPLnRvUmVkKHJlZCkucmVkUG93KHAuc3VibigxKSkuZnJvbVJlZCgpLmNtcG4oMSkgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGZpbmRQcmltZShiaXRzLCBnZW4pIHtcbiAgaWYgKGJpdHMgPCAxNikge1xuICAgIC8vIHRoaXMgaXMgd2hhdCBvcGVuc3NsIGRvZXNcbiAgICBpZiAoZ2VuID09PSAyIHx8IGdlbiA9PT0gNSkge1xuICAgICAgcmV0dXJuIG5ldyBCTihbMHg4YywgMHg3Yl0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IEJOKFsweDhjLCAweDI3XSk7XG4gICAgfVxuICB9XG4gIGdlbiA9IG5ldyBCTihnZW4pO1xuICB2YXIgcnVucywgY29tcDtcbiAgZnVuY3Rpb24gZ2VuZXJhdGVSYW5kb20oYml0cykge1xuICAgIHJ1bnMgPSAtMTtcbiAgICB2YXIgb3V0ID0gbmV3IEJOKHJhbmRvbUJ5dGVzKE1hdGguY2VpbChiaXRzIC8gOCkpKTtcbiAgICB3aGlsZSAob3V0LmJpdExlbmd0aCgpID4gYml0cykge1xuICAgICAgb3V0LmlzaHJuKDEpO1xuICAgIH1cbiAgICBpZiAob3V0LmlzRXZlbigpKSB7XG4gICAgICBvdXQuaWFkZChPTkUpO1xuICAgIH1cbiAgICBpZiAoIW91dC50ZXN0bigxKSkge1xuICAgICAgb3V0LmlhZGQoVFdPKTtcbiAgICB9XG4gICAgaWYgKCFnZW4uY21wKFRXTykpIHtcbiAgICAgIHdoaWxlIChvdXQubW9kKFRXRU5UWUZPVVIpLmNtcChFTEVWRU4pKSB7XG4gICAgICAgIG91dC5pYWRkKEZPVVIpO1xuICAgICAgfVxuICAgICAgY29tcCA9IHtcbiAgICAgICAgbWFqb3I6IFtUV0VOVFlGT1VSXSxcbiAgICAgICAgbWlub3I6IFtUV0VMVkVdXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoIWdlbi5jbXAoRklWRSkpIHtcbiAgICAgIHJlbSA9IG91dC5tb2QoVEVOKTtcbiAgICAgIHdoaWxlIChyZW0uY21wKFRIUkVFKSkge1xuICAgICAgICBvdXQuaWFkZChGT1VSKTtcbiAgICAgICAgcmVtID0gb3V0Lm1vZChURU4pO1xuICAgICAgfVxuICAgICAgY29tcCA9IHtcbiAgICAgICAgbWFqb3I6IFtGT1VSLCBTSVhURUVOXSxcbiAgICAgICAgbWlub3I6IFtUV08sIEVJR0hUXVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29tcCA9IHtcbiAgICAgICAgbWFqb3I6IFtGT1VSXSxcbiAgICAgICAgbWlub3I6IFtUV09dXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9XG4gIHZhciBudW0gPSBnZW5lcmF0ZVJhbmRvbShiaXRzKTtcblxuICB2YXIgbjIgPSBudW0uc2hybigxKTtcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHdoaWxlIChudW0uYml0TGVuZ3RoKCkgPiBiaXRzKSB7XG4gICAgICBudW0gPSBnZW5lcmF0ZVJhbmRvbShiaXRzKTtcbiAgICAgIG4yID0gbnVtLnNocm4oMSk7XG4gICAgfVxuICAgIHJ1bnMrKztcbiAgICBpZiAoc2ltcGxlU2lldmUobjIpICYmICBzaW1wbGVTaWV2ZShudW0pICYmXG4gICAgICBmZXJtYXRUZXN0KG4yKSAmJiAgZmVybWF0VGVzdChudW0pICYmXG4gICAgICBtaWxsZXJSYWJpbi50ZXN0KG4yKSAmJiBtaWxsZXJSYWJpbi50ZXN0KG51bSkpIHtcbiAgICAgIHJldHVybiBudW07XG4gICAgfVxuICAgIG51bS5pYWRkKGNvbXAubWFqb3JbcnVucyVjb21wLm1ham9yLmxlbmd0aF0pO1xuICAgIG4yLmlhZGQoY29tcC5taW5vcltydW5zJWNvbXAubWlub3IubGVuZ3RoXSk7XG4gIH1cblxufSIsInZhciBibiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgYnJvcmFuZCA9IHJlcXVpcmUoJ2Jyb3JhbmQnKTtcblxuZnVuY3Rpb24gTWlsbGVyUmFiaW4ocmFuZCkge1xuICB0aGlzLnJhbmQgPSByYW5kIHx8IG5ldyBicm9yYW5kLlJhbmQoKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gTWlsbGVyUmFiaW47XG5cbk1pbGxlclJhYmluLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShyYW5kKSB7XG4gIHJldHVybiBuZXcgTWlsbGVyUmFiaW4ocmFuZCk7XG59O1xuXG5NaWxsZXJSYWJpbi5wcm90b3R5cGUuX3JhbmQgPSBmdW5jdGlvbiBfcmFuZChuKSB7XG4gIHZhciBsZW4gPSBuLmJpdExlbmd0aCgpO1xuICB2YXIgYnVmID0gdGhpcy5yYW5kLmdlbmVyYXRlKE1hdGguY2VpbChsZW4gLyA4KSk7XG5cbiAgLy8gU2V0IGxvdyBiaXRzXG4gIGJ1ZlswXSB8PSAzO1xuXG4gIC8vIE1hc2sgaGlnaCBiaXRzXG4gIHZhciBtYXNrID0gbGVuICYgMHg3O1xuICBpZiAobWFzayAhPT0gMClcbiAgICBidWZbYnVmLmxlbmd0aCAtIDFdID4+PSA3IC0gbWFzaztcblxuICByZXR1cm4gbmV3IGJuKGJ1Zik7XG59XG5cbk1pbGxlclJhYmluLnByb3RvdHlwZS50ZXN0ID0gZnVuY3Rpb24gdGVzdChuLCBrLCBjYikge1xuICB2YXIgbGVuID0gbi5iaXRMZW5ndGgoKTtcbiAgdmFyIHJlZCA9IGJuLm1vbnQobik7XG4gIHZhciByb25lID0gbmV3IGJuKDEpLnRvUmVkKHJlZCk7XG5cbiAgaWYgKCFrKVxuICAgIGsgPSBNYXRoLm1heCgxLCAobGVuIC8gNDgpIHwgMCk7XG5cbiAgLy8gRmluZCBkIGFuZCBzLCAobiAtIDEpID0gKDIgXiBzKSAqIGQ7XG4gIHZhciBuMSA9IG4uc3VibigxKTtcbiAgdmFyIG4yID0gbjEuc3VibigxKTtcbiAgZm9yICh2YXIgcyA9IDA7ICFuMS50ZXN0bihzKTsgcysrKSB7fVxuICB2YXIgZCA9IG4uc2hybihzKTtcblxuICB2YXIgcm4xID0gbjEudG9SZWQocmVkKTtcblxuICB2YXIgcHJpbWUgPSB0cnVlO1xuICBmb3IgKDsgayA+IDA7IGstLSkge1xuICAgIHZhciBhID0gdGhpcy5fcmFuZChuMik7XG4gICAgaWYgKGNiKVxuICAgICAgY2IoYSk7XG5cbiAgICB2YXIgeCA9IGEudG9SZWQocmVkKS5yZWRQb3coZCk7XG4gICAgaWYgKHguY21wKHJvbmUpID09PSAwIHx8IHguY21wKHJuMSkgPT09IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgczsgaSsrKSB7XG4gICAgICB4ID0geC5yZWRTcXIoKTtcblxuICAgICAgaWYgKHguY21wKHJvbmUpID09PSAwKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICBpZiAoeC5jbXAocm4xKSA9PT0gMClcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKGkgPT09IHMpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gcHJpbWU7XG59O1xuXG5NaWxsZXJSYWJpbi5wcm90b3R5cGUuZ2V0RGl2aXNvciA9IGZ1bmN0aW9uIGdldERpdmlzb3Iobiwgaykge1xuICB2YXIgbGVuID0gbi5iaXRMZW5ndGgoKTtcbiAgdmFyIHJlZCA9IGJuLm1vbnQobik7XG4gIHZhciByb25lID0gbmV3IGJuKDEpLnRvUmVkKHJlZCk7XG5cbiAgaWYgKCFrKVxuICAgIGsgPSBNYXRoLm1heCgxLCAobGVuIC8gNDgpIHwgMCk7XG5cbiAgLy8gRmluZCBkIGFuZCBzLCAobiAtIDEpID0gKDIgXiBzKSAqIGQ7XG4gIHZhciBuMSA9IG4uc3VibigxKTtcbiAgdmFyIG4yID0gbjEuc3VibigxKTtcbiAgZm9yICh2YXIgcyA9IDA7ICFuMS50ZXN0bihzKTsgcysrKSB7fVxuICB2YXIgZCA9IG4uc2hybihzKTtcblxuICB2YXIgcm4xID0gbjEudG9SZWQocmVkKTtcblxuICBmb3IgKDsgayA+IDA7IGstLSkge1xuICAgIHZhciBhID0gdGhpcy5fcmFuZChuMik7XG5cbiAgICB2YXIgZyA9IG4uZ2NkKGEpO1xuICAgIGlmIChnLmNtcG4oMSkgIT09IDApXG4gICAgICByZXR1cm4gZztcblxuICAgIHZhciB4ID0gYS50b1JlZChyZWQpLnJlZFBvdyhkKTtcbiAgICBpZiAoeC5jbXAocm9uZSkgPT09IDAgfHwgeC5jbXAocm4xKSA9PT0gMClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBzOyBpKyspIHtcbiAgICAgIHggPSB4LnJlZFNxcigpO1xuXG4gICAgICBpZiAoeC5jbXAocm9uZSkgPT09IDApXG4gICAgICAgIHJldHVybiB4LmZyb21SZWQoKS5zdWJuKDEpLmdjZChuKTtcbiAgICAgIGlmICh4LmNtcChybjEpID09PSAwKVxuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoaSA9PT0gcykge1xuICAgICAgeCA9IHgucmVkU3FyKCk7XG4gICAgICByZXR1cm4geC5mcm9tUmVkKCkuc3VibigxKS5nY2Qobik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcbiIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBlbGxpcHRpYyA9IHJlcXVpcmUoJ2VsbGlwdGljJyk7XG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVDREgoY3VydmUpIHtcblx0cmV0dXJuIG5ldyBFQ0RIKGN1cnZlKTtcbn07XG5cbnZhciBhbGlhc2VzID0ge1xuXHRzZWNwMjU2azE6IHtcblx0XHRuYW1lOiAnc2VjcDI1NmsxJyxcblx0XHRieXRlTGVuZ3RoOiAzMlxuXHR9LFxuXHRzZWNwMjI0cjE6IHtcblx0XHRuYW1lOiAncDIyNCcsXG5cdFx0Ynl0ZUxlbmd0aDogMjhcblx0fSxcblx0cHJpbWUyNTZ2MToge1xuXHRcdG5hbWU6ICdwMjU2Jyxcblx0XHRieXRlTGVuZ3RoOiAzMlxuXHR9LFxuXHRwcmltZTE5MnYxOiB7XG5cdFx0bmFtZTogJ3AxOTInLFxuXHRcdGJ5dGVMZW5ndGg6IDI0XG5cdH0sXG5cdGVkMjU1MTk6IHtcblx0XHRuYW1lOiAnZWQyNTUxOScsXG5cdFx0Ynl0ZUxlbmd0aDogMzJcblx0fVxufTtcblxuYWxpYXNlcy5wMjI0ID0gYWxpYXNlcy5zZWNwMjI0cjE7XG5hbGlhc2VzLnAyNTYgPSBhbGlhc2VzLnNlY3AyNTZyMSA9IGFsaWFzZXMucHJpbWUyNTZ2MTtcbmFsaWFzZXMucDE5MiA9IGFsaWFzZXMuc2VjcDE5MnIxID0gYWxpYXNlcy5wcmltZTE5MnYxO1xuXG5mdW5jdGlvbiBFQ0RIKGN1cnZlKSB7XG5cdHRoaXMuY3VydmVUeXBlID0gYWxpYXNlc1tjdXJ2ZV07XG5cdGlmICghdGhpcy5jdXJ2ZVR5cGUgKSB7XG5cdFx0dGhpcy5jdXJ2ZVR5cGUgPSB7XG5cdFx0XHRuYW1lOiBjdXJ2ZVxuXHRcdH07XG5cdH1cblx0dGhpcy5jdXJ2ZSA9IG5ldyBlbGxpcHRpYy5lYyh0aGlzLmN1cnZlVHlwZS5uYW1lKTtcblx0dGhpcy5rZXlzID0gdm9pZCAwO1xufVxuXG5FQ0RILnByb3RvdHlwZS5nZW5lcmF0ZUtleXMgPSBmdW5jdGlvbiAoZW5jLCBmb3JtYXQpIHtcblx0dGhpcy5rZXlzID0gdGhpcy5jdXJ2ZS5nZW5LZXlQYWlyKCk7XG5cdHJldHVybiB0aGlzLmdldFB1YmxpY0tleShlbmMsIGZvcm1hdCk7XG59O1xuXG5FQ0RILnByb3RvdHlwZS5jb21wdXRlU2VjcmV0ID0gZnVuY3Rpb24gKG90aGVyLCBpbmVuYywgZW5jKSB7XG5cdGluZW5jID0gaW5lbmMgfHwgJ3V0ZjgnO1xuXHRpZiAoIUJ1ZmZlci5pc0J1ZmZlcihvdGhlcikpIHtcblx0XHRvdGhlciA9IG5ldyBCdWZmZXIob3RoZXIsIGluZW5jKTtcblx0fVxuXHR2YXIgb3RoZXJQdWIgPSB0aGlzLmN1cnZlLmtleUZyb21QdWJsaWMob3RoZXIpLmdldFB1YmxpYygpO1xuXHR2YXIgb3V0ID0gb3RoZXJQdWIubXVsKHRoaXMua2V5cy5nZXRQcml2YXRlKCkpLmdldFgoKTtcblx0cmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKG91dCwgZW5jLCB0aGlzLmN1cnZlVHlwZS5ieXRlTGVuZ3RoKTtcbn07XG5cbkVDREgucHJvdG90eXBlLmdldFB1YmxpY0tleSA9IGZ1bmN0aW9uIChlbmMsIGZvcm1hdCkge1xuXHR2YXIga2V5ID0gdGhpcy5rZXlzLmdldFB1YmxpYyhmb3JtYXQgPT09ICdjb21wcmVzc2VkJywgdHJ1ZSk7XG5cdGlmIChmb3JtYXQgPT09ICdoeWJyaWQnKSB7XG5cdFx0aWYgKGtleVtrZXkubGVuZ3RoIC0gMV0gJSAyKSB7XG5cdFx0XHRrZXlbMF0gPSA3O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRrZXkgWzBdID0gNjtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKGtleSwgZW5jKTtcbn07XG5cbkVDREgucHJvdG90eXBlLmdldFByaXZhdGVLZXkgPSBmdW5jdGlvbiAoZW5jKSB7XG5cdHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZSh0aGlzLmtleXMuZ2V0UHJpdmF0ZSgpLCBlbmMpO1xufTtcblxuRUNESC5wcm90b3R5cGUuc2V0UHVibGljS2V5ID0gZnVuY3Rpb24gKHB1YiwgZW5jKSB7XG5cdGVuYyA9IGVuYyB8fCAndXRmOCc7XG5cdGlmICghQnVmZmVyLmlzQnVmZmVyKHB1YikpIHtcblx0XHRwdWIgPSBuZXcgQnVmZmVyKHB1YiwgZW5jKTtcblx0fVxuXHR0aGlzLmtleXMuX2ltcG9ydFB1YmxpYyhwdWIpO1xuXHRyZXR1cm4gdGhpcztcbn07XG5cbkVDREgucHJvdG90eXBlLnNldFByaXZhdGVLZXkgPSBmdW5jdGlvbiAocHJpdiwgZW5jKSB7XG5cdGVuYyA9IGVuYyB8fCAndXRmOCc7XG5cdGlmICghQnVmZmVyLmlzQnVmZmVyKHByaXYpKSB7XG5cdFx0cHJpdiA9IG5ldyBCdWZmZXIocHJpdiwgZW5jKTtcblx0fVxuXHR2YXIgX3ByaXYgPSBuZXcgQk4ocHJpdik7XG5cdF9wcml2ID0gX3ByaXYudG9TdHJpbmcoMTYpO1xuXHR0aGlzLmtleXMuX2ltcG9ydFByaXZhdGUoX3ByaXYpO1xuXHRyZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGZvcm1hdFJldHVyblZhbHVlKGJuLCBlbmMsIGxlbikge1xuXHRpZiAoIUFycmF5LmlzQXJyYXkoYm4pKSB7XG5cdFx0Ym4gPSBibi50b0FycmF5KCk7XG5cdH1cblx0dmFyIGJ1ZiA9IG5ldyBCdWZmZXIoYm4pO1xuXHRpZiAobGVuICYmIGJ1Zi5sZW5ndGggPCBsZW4pIHtcblx0XHR2YXIgemVyb3MgPSBuZXcgQnVmZmVyKGxlbiAtIGJ1Zi5sZW5ndGgpO1xuXHRcdHplcm9zLmZpbGwoMCk7XG5cdFx0YnVmID0gQnVmZmVyLmNvbmNhdChbemVyb3MsIGJ1Zl0pO1xuXHR9XG5cdGlmICghZW5jKSB7XG5cdFx0cmV0dXJuIGJ1Zjtcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gYnVmLnRvU3RyaW5nKGVuYyk7XG5cdH1cbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZM0psWVhSbExXVmpaR2d2WW5KdmQzTmxjaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWRtRnlJR1ZzYkdsd2RHbGpJRDBnY21WeGRXbHlaU2duWld4c2FYQjBhV01uS1R0Y2JuWmhjaUJDVGlBOUlISmxjWFZwY21Vb0oySnVMbXB6SnlrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdZM0psWVhSbFJVTkVTQ2hqZFhKMlpTa2dlMXh1WEhSeVpYUjFjbTRnYm1WM0lFVkRSRWdvWTNWeWRtVXBPMXh1ZlR0Y2JseHVkbUZ5SUdGc2FXRnpaWE1nUFNCN1hHNWNkSE5sWTNBeU5UWnJNVG9nZTF4dVhIUmNkRzVoYldVNklDZHpaV053TWpVMmF6RW5MRnh1WEhSY2RHSjVkR1ZNWlc1bmRHZzZJRE15WEc1Y2RIMHNYRzVjZEhObFkzQXlNalJ5TVRvZ2UxeHVYSFJjZEc1aGJXVTZJQ2R3TWpJMEp5eGNibHgwWEhSaWVYUmxUR1Z1WjNSb09pQXlPRnh1WEhSOUxGeHVYSFJ3Y21sdFpUSTFObll4T2lCN1hHNWNkRngwYm1GdFpUb2dKM0F5TlRZbkxGeHVYSFJjZEdKNWRHVk1aVzVuZEdnNklETXlYRzVjZEgwc1hHNWNkSEJ5YVcxbE1Ua3lkakU2SUh0Y2JseDBYSFJ1WVcxbE9pQW5jREU1TWljc1hHNWNkRngwWW5sMFpVeGxibWQwYURvZ01qUmNibHgwZlN4Y2JseDBaV1F5TlRVeE9Ub2dlMXh1WEhSY2RHNWhiV1U2SUNkbFpESTFOVEU1Snl4Y2JseDBYSFJpZVhSbFRHVnVaM1JvT2lBek1seHVYSFI5WEc1OU8xeHVYRzVoYkdsaGMyVnpMbkF5TWpRZ1BTQmhiR2xoYzJWekxuTmxZM0F5TWpSeU1UdGNibUZzYVdGelpYTXVjREkxTmlBOUlHRnNhV0Z6WlhNdWMyVmpjREkxTm5JeElEMGdZV3hwWVhObGN5NXdjbWx0WlRJMU5uWXhPMXh1WVd4cFlYTmxjeTV3TVRreUlEMGdZV3hwWVhObGN5NXpaV053TVRreWNqRWdQU0JoYkdsaGMyVnpMbkJ5YVcxbE1Ua3lkakU3WEc1Y2JtWjFibU4wYVc5dUlFVkRSRWdvWTNWeWRtVXBJSHRjYmx4MGRHaHBjeTVqZFhKMlpWUjVjR1VnUFNCaGJHbGhjMlZ6VzJOMWNuWmxYVHRjYmx4MGFXWWdLQ0YwYUdsekxtTjFjblpsVkhsd1pTQXBJSHRjYmx4MFhIUjBhR2x6TG1OMWNuWmxWSGx3WlNBOUlIdGNibHgwWEhSY2RHNWhiV1U2SUdOMWNuWmxYRzVjZEZ4MGZUdGNibHgwZlZ4dVhIUjBhR2x6TG1OMWNuWmxJRDBnYm1WM0lHVnNiR2x3ZEdsakxtVmpLSFJvYVhNdVkzVnlkbVZVZVhCbExtNWhiV1VwTzF4dVhIUjBhR2x6TG10bGVYTWdQU0IyYjJsa0lEQTdYRzU5WEc1Y2JrVkRSRWd1Y0hKdmRHOTBlWEJsTG1kbGJtVnlZWFJsUzJWNWN5QTlJR1oxYm1OMGFXOXVJQ2hsYm1Nc0lHWnZjbTFoZENrZ2UxeHVYSFIwYUdsekxtdGxlWE1nUFNCMGFHbHpMbU4xY25abExtZGxia3RsZVZCaGFYSW9LVHRjYmx4MGNtVjBkWEp1SUhSb2FYTXVaMlYwVUhWaWJHbGpTMlY1S0dWdVl5d2dabTl5YldGMEtUdGNibjA3WEc1Y2JrVkRSRWd1Y0hKdmRHOTBlWEJsTG1OdmJYQjFkR1ZUWldOeVpYUWdQU0JtZFc1amRHbHZiaUFvYjNSb1pYSXNJR2x1Wlc1akxDQmxibU1wSUh0Y2JseDBhVzVsYm1NZ1BTQnBibVZ1WXlCOGZDQW5kWFJtT0NjN1hHNWNkR2xtSUNnaFFuVm1abVZ5TG1selFuVm1abVZ5S0c5MGFHVnlLU2tnZTF4dVhIUmNkRzkwYUdWeUlEMGdibVYzSUVKMVptWmxjaWh2ZEdobGNpd2dhVzVsYm1NcE8xeHVYSFI5WEc1Y2RIWmhjaUJ2ZEdobGNsQjFZaUE5SUhSb2FYTXVZM1Z5ZG1VdWEyVjVSbkp2YlZCMVlteHBZeWh2ZEdobGNpa3VaMlYwVUhWaWJHbGpLQ2s3WEc1Y2RIWmhjaUJ2ZFhRZ1BTQnZkR2hsY2xCMVlpNXRkV3dvZEdocGN5NXJaWGx6TG1kbGRGQnlhWFpoZEdVb0tTa3VaMlYwV0NncE8xeHVYSFJ5WlhSMWNtNGdabTl5YldGMFVtVjBkWEp1Vm1Gc2RXVW9iM1YwTENCbGJtTXNJSFJvYVhNdVkzVnlkbVZVZVhCbExtSjVkR1ZNWlc1bmRHZ3BPMXh1ZlR0Y2JseHVSVU5FU0M1d2NtOTBiM1I1Y0dVdVoyVjBVSFZpYkdsalMyVjVJRDBnWm5WdVkzUnBiMjRnS0dWdVl5d2dabTl5YldGMEtTQjdYRzVjZEhaaGNpQnJaWGtnUFNCMGFHbHpMbXRsZVhNdVoyVjBVSFZpYkdsaktHWnZjbTFoZENBOVBUMGdKMk52YlhCeVpYTnpaV1FuTENCMGNuVmxLVHRjYmx4MGFXWWdLR1p2Y20xaGRDQTlQVDBnSjJoNVluSnBaQ2NwSUh0Y2JseDBYSFJwWmlBb2EyVjVXMnRsZVM1c1pXNW5kR2dnTFNBeFhTQWxJRElwSUh0Y2JseDBYSFJjZEd0bGVWc3dYU0E5SURjN1hHNWNkRngwZlNCbGJITmxJSHRjYmx4MFhIUmNkR3RsZVNCYk1GMGdQU0EyTzF4dVhIUmNkSDFjYmx4MGZWeHVYSFJ5WlhSMWNtNGdabTl5YldGMFVtVjBkWEp1Vm1Gc2RXVW9hMlY1TENCbGJtTXBPMXh1ZlR0Y2JseHVSVU5FU0M1d2NtOTBiM1I1Y0dVdVoyVjBVSEpwZG1GMFpVdGxlU0E5SUdaMWJtTjBhVzl1SUNobGJtTXBJSHRjYmx4MGNtVjBkWEp1SUdadmNtMWhkRkpsZEhWeWJsWmhiSFZsS0hSb2FYTXVhMlY1Y3k1blpYUlFjbWwyWVhSbEtDa3NJR1Z1WXlrN1hHNTlPMXh1WEc1RlEwUklMbkJ5YjNSdmRIbHdaUzV6WlhSUWRXSnNhV05MWlhrZ1BTQm1kVzVqZEdsdmJpQW9jSFZpTENCbGJtTXBJSHRjYmx4MFpXNWpJRDBnWlc1aklIeDhJQ2QxZEdZNEp6dGNibHgwYVdZZ0tDRkNkV1ptWlhJdWFYTkNkV1ptWlhJb2NIVmlLU2tnZTF4dVhIUmNkSEIxWWlBOUlHNWxkeUJDZFdabVpYSW9jSFZpTENCbGJtTXBPMXh1WEhSOVhHNWNkSFJvYVhNdWEyVjVjeTVmYVcxd2IzSjBVSFZpYkdsaktIQjFZaWs3WEc1Y2RISmxkSFZ5YmlCMGFHbHpPMXh1ZlR0Y2JseHVSVU5FU0M1d2NtOTBiM1I1Y0dVdWMyVjBVSEpwZG1GMFpVdGxlU0E5SUdaMWJtTjBhVzl1SUNod2NtbDJMQ0JsYm1NcElIdGNibHgwWlc1aklEMGdaVzVqSUh4OElDZDFkR1k0Snp0Y2JseDBhV1lnS0NGQ2RXWm1aWEl1YVhOQ2RXWm1aWElvY0hKcGRpa3BJSHRjYmx4MFhIUndjbWwySUQwZ2JtVjNJRUoxWm1abGNpaHdjbWwyTENCbGJtTXBPMXh1WEhSOVhHNWNkSFpoY2lCZmNISnBkaUE5SUc1bGR5QkNUaWh3Y21sMktUdGNibHgwWDNCeWFYWWdQU0JmY0hKcGRpNTBiMU4wY21sdVp5Z3hOaWs3WEc1Y2RIUm9hWE11YTJWNWN5NWZhVzF3YjNKMFVISnBkbUYwWlNoZmNISnBkaWs3WEc1Y2RISmxkSFZ5YmlCMGFHbHpPMXh1ZlR0Y2JseHVablZ1WTNScGIyNGdabTl5YldGMFVtVjBkWEp1Vm1Gc2RXVW9ZbTRzSUdWdVl5d2diR1Z1S1NCN1hHNWNkR2xtSUNnaFFYSnlZWGt1YVhOQmNuSmhlU2hpYmlrcElIdGNibHgwWEhSaWJpQTlJR0p1TG5SdlFYSnlZWGtvS1R0Y2JseDBmVnh1WEhSMllYSWdZblZtSUQwZ2JtVjNJRUoxWm1abGNpaGliaWs3WEc1Y2RHbG1JQ2hzWlc0Z0ppWWdZblZtTG14bGJtZDBhQ0E4SUd4bGJpa2dlMXh1WEhSY2RIWmhjaUI2WlhKdmN5QTlJRzVsZHlCQ2RXWm1aWElvYkdWdUlDMGdZblZtTG14bGJtZDBhQ2s3WEc1Y2RGeDBlbVZ5YjNNdVptbHNiQ2d3S1R0Y2JseDBYSFJpZFdZZ1BTQkNkV1ptWlhJdVkyOXVZMkYwS0Z0NlpYSnZjeXdnWW5WbVhTazdYRzVjZEgxY2JseDBhV1lnS0NGbGJtTXBJSHRjYmx4MFhIUnlaWFIxY200Z1luVm1PMXh1WEhSOUlHVnNjMlVnZTF4dVhIUmNkSEpsZEhWeWJpQmlkV1l1ZEc5VGRISnBibWNvWlc1aktUdGNibHgwZlZ4dWZWeHVJbDE5IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xudmFyIF9hbGdvcyA9IHJlcXVpcmUoJy4vYWxnb3MnKVxudmFyIGNyZWF0ZUhhc2ggPSByZXF1aXJlKCdjcmVhdGUtaGFzaCcpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vc2lnbicpXG52YXIgc3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJylcbnZhciB2ZXJpZnkgPSByZXF1aXJlKCcuL3ZlcmlmeScpXG5cbnZhciBhbGdvcyA9IHt9XG5PYmplY3Qua2V5cyhfYWxnb3MpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBhbGdvc1trZXldID0gYWxnb3Nba2V5LnRvTG93ZXJDYXNlKCldID0gX2FsZ29zW2tleV1cbn0pXG5cbmZ1bmN0aW9uIFNpZ24gKGFsZ29yaXRobSkge1xuICBzdHJlYW0uV3JpdGFibGUuY2FsbCh0aGlzKVxuXG4gIHZhciBkYXRhID0gYWxnb3NbYWxnb3JpdGhtXVxuICBpZiAoIWRhdGEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbWVzc2FnZSBkaWdlc3QnKVxuICB9XG5cbiAgdGhpcy5faGFzaFR5cGUgPSBkYXRhLmhhc2hcbiAgdGhpcy5faGFzaCA9IGNyZWF0ZUhhc2goZGF0YS5oYXNoKVxuICB0aGlzLl90YWcgPSBkYXRhLmlkXG4gIHRoaXMuX3NpZ25UeXBlID0gZGF0YS5zaWduXG59XG5pbmhlcml0cyhTaWduLCBzdHJlYW0uV3JpdGFibGUpXG5cblNpZ24ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIF93cml0ZSAoZGF0YSwgXywgZG9uZSkge1xuICB0aGlzLl9oYXNoLnVwZGF0ZShkYXRhKVxuICBkb25lKClcbn1cblxuU2lnbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlIChkYXRhLCBlbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGRhdGEgPSBuZXcgQnVmZmVyKGRhdGEsIGVuYylcbiAgfVxuXG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG4gIHJldHVybiB0aGlzXG59XG5cblNpZ24ucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiBzaWduTWV0aG9kIChrZXksIGVuYykge1xuICB0aGlzLmVuZCgpXG4gIHZhciBoYXNoID0gdGhpcy5faGFzaC5kaWdlc3QoKVxuICB2YXIgc2lnID0gc2lnbihCdWZmZXIuY29uY2F0KFt0aGlzLl90YWcsIGhhc2hdKSwga2V5LCB0aGlzLl9oYXNoVHlwZSwgdGhpcy5fc2lnblR5cGUpXG5cbiAgcmV0dXJuIGVuYyA/IHNpZy50b1N0cmluZyhlbmMpIDogc2lnXG59XG5cbmZ1bmN0aW9uIFZlcmlmeSAoYWxnb3JpdGhtKSB7XG4gIHN0cmVhbS5Xcml0YWJsZS5jYWxsKHRoaXMpXG5cbiAgdmFyIGRhdGEgPSBhbGdvc1thbGdvcml0aG1dXG4gIGlmICghZGF0YSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBtZXNzYWdlIGRpZ2VzdCcpXG4gIH1cblxuICB0aGlzLl9oYXNoID0gY3JlYXRlSGFzaChkYXRhLmhhc2gpXG4gIHRoaXMuX3RhZyA9IGRhdGEuaWRcbiAgdGhpcy5fc2lnblR5cGUgPSBkYXRhLnNpZ25cbn1cbmluaGVyaXRzKFZlcmlmeSwgc3RyZWFtLldyaXRhYmxlKVxuXG5WZXJpZnkucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIF93cml0ZSAoZGF0YSwgXywgZG9uZSkge1xuICB0aGlzLl9oYXNoLnVwZGF0ZShkYXRhKVxuXG4gIGRvbmUoKVxufVxuXG5WZXJpZnkucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoZGF0YSwgZW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBkYXRhID0gbmV3IEJ1ZmZlcihkYXRhLCBlbmMpXG4gIH1cblxuICB0aGlzLl9oYXNoLnVwZGF0ZShkYXRhKVxuICByZXR1cm4gdGhpc1xufVxuXG5WZXJpZnkucHJvdG90eXBlLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeU1ldGhvZCAoa2V5LCBzaWcsIGVuYykge1xuICBpZiAodHlwZW9mIHNpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBzaWcgPSBuZXcgQnVmZmVyKHNpZywgZW5jKVxuICB9XG5cbiAgdGhpcy5lbmQoKVxuICB2YXIgaGFzaCA9IHRoaXMuX2hhc2guZGlnZXN0KClcblxuICByZXR1cm4gdmVyaWZ5KHNpZywgQnVmZmVyLmNvbmNhdChbdGhpcy5fdGFnLCBoYXNoXSksIGtleSwgdGhpcy5fc2lnblR5cGUpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNpZ24gKGFsZ29yaXRobSkge1xuICByZXR1cm4gbmV3IFNpZ24oYWxnb3JpdGhtKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVWZXJpZnkgKGFsZ29yaXRobSkge1xuICByZXR1cm4gbmV3IFZlcmlmeShhbGdvcml0aG0pXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBTaWduOiBjcmVhdGVTaWduLFxuICBWZXJpZnk6IGNyZWF0ZVZlcmlmeSxcbiAgY3JlYXRlU2lnbjogY3JlYXRlU2lnbixcbiAgY3JlYXRlVmVyaWZ5OiBjcmVhdGVWZXJpZnlcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZbkp2ZDNObGNtbG1lUzF6YVdkdUwySnliM2R6WlhJdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCZllXeG5iM01nUFNCeVpYRjFhWEpsS0NjdUwyRnNaMjl6SnlsY2JuWmhjaUJqY21WaGRHVklZWE5vSUQwZ2NtVnhkV2x5WlNnblkzSmxZWFJsTFdoaGMyZ25LVnh1ZG1GeUlHbHVhR1Z5YVhSeklEMGdjbVZ4ZFdseVpTZ25hVzVvWlhKcGRITW5LVnh1ZG1GeUlITnBaMjRnUFNCeVpYRjFhWEpsS0NjdUwzTnBaMjRuS1Z4dWRtRnlJSE4wY21WaGJTQTlJSEpsY1hWcGNtVW9KM04wY21WaGJTY3BYRzUyWVhJZ2RtVnlhV1o1SUQwZ2NtVnhkV2x5WlNnbkxpOTJaWEpwWm5rbktWeHVYRzUyWVhJZ1lXeG5iM01nUFNCN2ZWeHVUMkpxWldOMExtdGxlWE1vWDJGc1oyOXpLUzVtYjNKRllXTm9LR1oxYm1OMGFXOXVJQ2hyWlhrcElIdGNiaUFnWVd4bmIzTmJhMlY1WFNBOUlHRnNaMjl6VzJ0bGVTNTBiMHh2ZDJWeVEyRnpaU2dwWFNBOUlGOWhiR2R2YzF0clpYbGRYRzU5S1Z4dVhHNW1kVzVqZEdsdmJpQlRhV2R1SUNoaGJHZHZjbWwwYUcwcElIdGNiaUFnYzNSeVpXRnRMbGR5YVhSaFlteGxMbU5oYkd3b2RHaHBjeWxjYmx4dUlDQjJZWElnWkdGMFlTQTlJR0ZzWjI5elcyRnNaMjl5YVhSb2JWMWNiaUFnYVdZZ0tDRmtZWFJoS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RWYm10dWIzZHVJRzFsYzNOaFoyVWdaR2xuWlhOMEp5bGNiaUFnZlZ4dVhHNGdJSFJvYVhNdVgyaGhjMmhVZVhCbElEMGdaR0YwWVM1b1lYTm9YRzRnSUhSb2FYTXVYMmhoYzJnZ1BTQmpjbVZoZEdWSVlYTm9LR1JoZEdFdWFHRnphQ2xjYmlBZ2RHaHBjeTVmZEdGbklEMGdaR0YwWVM1cFpGeHVJQ0IwYUdsekxsOXphV2R1Vkhsd1pTQTlJR1JoZEdFdWMybG5ibHh1ZlZ4dWFXNW9aWEpwZEhNb1UybG5iaXdnYzNSeVpXRnRMbGR5YVhSaFlteGxLVnh1WEc1VGFXZHVMbkJ5YjNSdmRIbHdaUzVmZDNKcGRHVWdQU0JtZFc1amRHbHZiaUJmZDNKcGRHVWdLR1JoZEdFc0lGOHNJR1J2Ym1VcElIdGNiaUFnZEdocGN5NWZhR0Z6YUM1MWNHUmhkR1VvWkdGMFlTbGNiaUFnWkc5dVpTZ3BYRzU5WEc1Y2JsTnBaMjR1Y0hKdmRHOTBlWEJsTG5Wd1pHRjBaU0E5SUdaMWJtTjBhVzl1SUhWd1pHRjBaU0FvWkdGMFlTd2daVzVqS1NCN1hHNGdJR2xtSUNoMGVYQmxiMllnWkdGMFlTQTlQVDBnSjNOMGNtbHVaeWNwSUh0Y2JpQWdJQ0JrWVhSaElEMGdibVYzSUVKMVptWmxjaWhrWVhSaExDQmxibU1wWEc0Z0lIMWNibHh1SUNCMGFHbHpMbDlvWVhOb0xuVndaR0YwWlNoa1lYUmhLVnh1SUNCeVpYUjFjbTRnZEdocGMxeHVmVnh1WEc1VGFXZHVMbkJ5YjNSdmRIbHdaUzV6YVdkdUlEMGdablZ1WTNScGIyNGdjMmxuYmsxbGRHaHZaQ0FvYTJWNUxDQmxibU1wSUh0Y2JpQWdkR2hwY3k1bGJtUW9LVnh1SUNCMllYSWdhR0Z6YUNBOUlIUm9hWE11WDJoaGMyZ3VaR2xuWlhOMEtDbGNiaUFnZG1GeUlITnBaeUE5SUhOcFoyNG9RblZtWm1WeUxtTnZibU5oZENoYmRHaHBjeTVmZEdGbkxDQm9ZWE5vWFNrc0lHdGxlU3dnZEdocGN5NWZhR0Z6YUZSNWNHVXNJSFJvYVhNdVgzTnBaMjVVZVhCbEtWeHVYRzRnSUhKbGRIVnliaUJsYm1NZ1B5QnphV2N1ZEc5VGRISnBibWNvWlc1aktTQTZJSE5wWjF4dWZWeHVYRzVtZFc1amRHbHZiaUJXWlhKcFpua2dLR0ZzWjI5eWFYUm9iU2tnZTF4dUlDQnpkSEpsWVcwdVYzSnBkR0ZpYkdVdVkyRnNiQ2gwYUdsektWeHVYRzRnSUhaaGNpQmtZWFJoSUQwZ1lXeG5iM05iWVd4bmIzSnBkR2h0WFZ4dUlDQnBaaUFvSVdSaGRHRXBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oxVnVhMjV2ZDI0Z2JXVnpjMkZuWlNCa2FXZGxjM1FuS1Z4dUlDQjlYRzVjYmlBZ2RHaHBjeTVmYUdGemFDQTlJR055WldGMFpVaGhjMmdvWkdGMFlTNW9ZWE5vS1Z4dUlDQjBhR2x6TGw5MFlXY2dQU0JrWVhSaExtbGtYRzRnSUhSb2FYTXVYM05wWjI1VWVYQmxJRDBnWkdGMFlTNXphV2R1WEc1OVhHNXBibWhsY21sMGN5aFdaWEpwWm5rc0lITjBjbVZoYlM1WGNtbDBZV0pzWlNsY2JseHVWbVZ5YVdaNUxuQnliM1J2ZEhsd1pTNWZkM0pwZEdVZ1BTQm1kVzVqZEdsdmJpQmZkM0pwZEdVZ0tHUmhkR0VzSUY4c0lHUnZibVVwSUh0Y2JpQWdkR2hwY3k1ZmFHRnphQzUxY0dSaGRHVW9aR0YwWVNsY2JseHVJQ0JrYjI1bEtDbGNibjFjYmx4dVZtVnlhV1o1TG5CeWIzUnZkSGx3WlM1MWNHUmhkR1VnUFNCbWRXNWpkR2x2YmlCMWNHUmhkR1VnS0dSaGRHRXNJR1Z1WXlrZ2UxeHVJQ0JwWmlBb2RIbHdaVzltSUdSaGRHRWdQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnWkdGMFlTQTlJRzVsZHlCQ2RXWm1aWElvWkdGMFlTd2daVzVqS1Z4dUlDQjlYRzVjYmlBZ2RHaHBjeTVmYUdGemFDNTFjR1JoZEdVb1pHRjBZU2xjYmlBZ2NtVjBkWEp1SUhSb2FYTmNibjFjYmx4dVZtVnlhV1o1TG5CeWIzUnZkSGx3WlM1MlpYSnBabmtnUFNCbWRXNWpkR2x2YmlCMlpYSnBabmxOWlhSb2IyUWdLR3RsZVN3Z2MybG5MQ0JsYm1NcElIdGNiaUFnYVdZZ0tIUjVjR1Z2WmlCemFXY2dQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnYzJsbklEMGdibVYzSUVKMVptWmxjaWh6YVdjc0lHVnVZeWxjYmlBZ2ZWeHVYRzRnSUhSb2FYTXVaVzVrS0NsY2JpQWdkbUZ5SUdoaGMyZ2dQU0IwYUdsekxsOW9ZWE5vTG1ScFoyVnpkQ2dwWEc1Y2JpQWdjbVYwZFhKdUlIWmxjbWxtZVNoemFXY3NJRUoxWm1abGNpNWpiMjVqWVhRb1czUm9hWE11WDNSaFp5d2dhR0Z6YUYwcExDQnJaWGtzSUhSb2FYTXVYM05wWjI1VWVYQmxLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmpjbVZoZEdWVGFXZHVJQ2hoYkdkdmNtbDBhRzBwSUh0Y2JpQWdjbVYwZFhKdUlHNWxkeUJUYVdkdUtHRnNaMjl5YVhSb2JTbGNibjFjYmx4dVpuVnVZM1JwYjI0Z1kzSmxZWFJsVm1WeWFXWjVJQ2hoYkdkdmNtbDBhRzBwSUh0Y2JpQWdjbVYwZFhKdUlHNWxkeUJXWlhKcFpua29ZV3huYjNKcGRHaHRLVnh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlIdGNiaUFnVTJsbmJqb2dZM0psWVhSbFUybG5iaXhjYmlBZ1ZtVnlhV1o1T2lCamNtVmhkR1ZXWlhKcFpua3NYRzRnSUdOeVpXRjBaVk5wWjI0NklHTnlaV0YwWlZOcFoyNHNYRzRnSUdOeVpXRjBaVlpsY21sbWVUb2dZM0psWVhSbFZtVnlhV1o1WEc1OVhHNGlYWDA9IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xuLy8gbXVjaCBvZiB0aGlzIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L3NlbGYtc2lnbmVkL2Jsb2IvZ2gtcGFnZXMvbGliL3JzYS5qc1xudmFyIGN1cnZlcyA9IHJlcXVpcmUoJy4vY3VydmVzJylcbnZhciBlbGxpcHRpYyA9IHJlcXVpcmUoJ2VsbGlwdGljJylcbnZhciBwYXJzZUtleXMgPSByZXF1aXJlKCdwYXJzZS1hc24xJylcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKVxudmFyIEVDID0gZWxsaXB0aWMuZWNcblxuZnVuY3Rpb24gdmVyaWZ5IChzaWcsIGhhc2gsIGtleSwgc2lnblR5cGUpIHtcbiAgdmFyIHB1YiA9IHBhcnNlS2V5cyhrZXkpXG4gIGlmIChwdWIudHlwZSA9PT0gJ2VjJykge1xuICAgIGlmIChzaWduVHlwZSAhPT0gJ2VjZHNhJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwdWJsaWMga2V5IHR5cGUnKVxuICAgIH1cbiAgICByZXR1cm4gZWNWZXJpZnkoc2lnLCBoYXNoLCBwdWIpXG4gIH0gZWxzZSBpZiAocHViLnR5cGUgPT09ICdkc2EnKSB7XG4gICAgaWYgKHNpZ25UeXBlICE9PSAnZHNhJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwdWJsaWMga2V5IHR5cGUnKVxuICAgIH1cbiAgICByZXR1cm4gZHNhVmVyaWZ5KHNpZywgaGFzaCwgcHViKVxuICB9IGVsc2Uge1xuICAgIGlmIChzaWduVHlwZSAhPT0gJ3JzYScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignd3JvbmcgcHVibGljIGtleSB0eXBlJylcbiAgICB9XG4gIH1cbiAgdmFyIGxlbiA9IHB1Yi5tb2R1bHVzLmJ5dGVMZW5ndGgoKVxuICB2YXIgcGFkID0gWyAxIF1cbiAgdmFyIHBhZE51bSA9IDBcbiAgd2hpbGUgKGhhc2gubGVuZ3RoICsgcGFkLmxlbmd0aCArIDIgPCBsZW4pIHtcbiAgICBwYWQucHVzaCgweGZmKVxuICAgIHBhZE51bSsrXG4gIH1cbiAgcGFkLnB1c2goMHgwMClcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgaGFzaC5sZW5ndGgpIHtcbiAgICBwYWQucHVzaChoYXNoW2ldKVxuICB9XG4gIHBhZCA9IG5ldyBCdWZmZXIocGFkKVxuICB2YXIgcmVkID0gQk4ubW9udChwdWIubW9kdWx1cylcbiAgc2lnID0gbmV3IEJOKHNpZykudG9SZWQocmVkKVxuXG4gIHNpZyA9IHNpZy5yZWRQb3cobmV3IEJOKHB1Yi5wdWJsaWNFeHBvbmVudCkpXG5cbiAgc2lnID0gbmV3IEJ1ZmZlcihzaWcuZnJvbVJlZCgpLnRvQXJyYXkoKSlcbiAgdmFyIG91dCA9IDBcbiAgaWYgKHBhZE51bSA8IDgpIHtcbiAgICBvdXQgPSAxXG4gIH1cbiAgbGVuID0gTWF0aC5taW4oc2lnLmxlbmd0aCwgcGFkLmxlbmd0aClcbiAgaWYgKHNpZy5sZW5ndGggIT09IHBhZC5sZW5ndGgpIHtcbiAgICBvdXQgPSAxXG4gIH1cblxuICBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIG91dCB8PSAoc2lnW2ldIF4gcGFkW2ldKVxuICB9XG4gIHJldHVybiBvdXQgPT09IDBcbn1cblxuZnVuY3Rpb24gZWNWZXJpZnkgKHNpZywgaGFzaCwgcHViKSB7XG4gIHZhciBjdXJ2ZUlkID0gY3VydmVzW3B1Yi5kYXRhLmFsZ29yaXRobS5jdXJ2ZS5qb2luKCcuJyldXG4gIGlmICghY3VydmVJZCkgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGN1cnZlICcgKyBwdWIuZGF0YS5hbGdvcml0aG0uY3VydmUuam9pbignLicpKVxuXG4gIHZhciBjdXJ2ZSA9IG5ldyBFQyhjdXJ2ZUlkKVxuICB2YXIgcHVia2V5ID0gcHViLmRhdGEuc3ViamVjdFByaXZhdGVLZXkuZGF0YVxuXG4gIHJldHVybiBjdXJ2ZS52ZXJpZnkoaGFzaCwgc2lnLCBwdWJrZXkpXG59XG5cbmZ1bmN0aW9uIGRzYVZlcmlmeSAoc2lnLCBoYXNoLCBwdWIpIHtcbiAgdmFyIHAgPSBwdWIuZGF0YS5wXG4gIHZhciBxID0gcHViLmRhdGEucVxuICB2YXIgZyA9IHB1Yi5kYXRhLmdcbiAgdmFyIHkgPSBwdWIuZGF0YS5wdWJfa2V5XG4gIHZhciB1bnBhY2tlZCA9IHBhcnNlS2V5cy5zaWduYXR1cmUuZGVjb2RlKHNpZywgJ2RlcicpXG4gIHZhciBzID0gdW5wYWNrZWQuc1xuICB2YXIgciA9IHVucGFja2VkLnJcbiAgY2hlY2tWYWx1ZShzLCBxKVxuICBjaGVja1ZhbHVlKHIsIHEpXG4gIHZhciBtb250cCA9IEJOLm1vbnQocClcbiAgdmFyIHcgPSBzLmludm0ocSlcbiAgdmFyIHYgPSBnLnRvUmVkKG1vbnRwKVxuICAgIC5yZWRQb3cobmV3IEJOKGhhc2gpLm11bCh3KS5tb2QocSkpXG4gICAgLmZyb21SZWQoKVxuICAgIC5tdWwoXG4gICAgICB5LnRvUmVkKG1vbnRwKVxuICAgICAgICAucmVkUG93KHIubXVsKHcpLm1vZChxKSlcbiAgICAgICAgLmZyb21SZWQoKVxuICApLm1vZChwKS5tb2QocSlcbiAgcmV0dXJuICF2LmNtcChyKVxufVxuXG5mdW5jdGlvbiBjaGVja1ZhbHVlIChiLCBxKSB7XG4gIGlmIChiLmNtcG4oMCkgPD0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBzaWcnKVxuICB9XG4gIGlmIChiLmNtcChxKSA+PSBxKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHNpZycpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2ZXJpZnlcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZbkp2ZDNObGNtbG1lUzF6YVdkdUwzWmxjbWxtZVM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeThnYlhWamFDQnZaaUIwYUdseklHSmhjMlZrSUc5dUlHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOXBibVIxZEc1NUwzTmxiR1l0YzJsbmJtVmtMMkpzYjJJdloyZ3RjR0ZuWlhNdmJHbGlMM0p6WVM1cWMxeHVkbUZ5SUdOMWNuWmxjeUE5SUhKbGNYVnBjbVVvSnk0dlkzVnlkbVZ6SnlsY2JuWmhjaUJsYkd4cGNIUnBZeUE5SUhKbGNYVnBjbVVvSjJWc2JHbHdkR2xqSnlsY2JuWmhjaUJ3WVhKelpVdGxlWE1nUFNCeVpYRjFhWEpsS0Nkd1lYSnpaUzFoYzI0eEp5bGNibHh1ZG1GeUlFSk9JRDBnY21WeGRXbHlaU2duWW00dWFuTW5LVnh1ZG1GeUlFVkRJRDBnWld4c2FYQjBhV011WldOY2JseHVablZ1WTNScGIyNGdkbVZ5YVdaNUlDaHphV2NzSUdoaGMyZ3NJR3RsZVN3Z2MybG5ibFI1Y0dVcElIdGNiaUFnZG1GeUlIQjFZaUE5SUhCaGNuTmxTMlY1Y3loclpYa3BYRzRnSUdsbUlDaHdkV0l1ZEhsd1pTQTlQVDBnSjJWakp5a2dlMXh1SUNBZ0lHbG1JQ2h6YVdkdVZIbHdaU0FoUFQwZ0oyVmpaSE5oSnlrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkM2NtOXVaeUJ3ZFdKc2FXTWdhMlY1SUhSNWNHVW5LVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnWldOV1pYSnBabmtvYzJsbkxDQm9ZWE5vTENCd2RXSXBYRzRnSUgwZ1pXeHpaU0JwWmlBb2NIVmlMblI1Y0dVZ1BUMDlJQ2RrYzJFbktTQjdYRzRnSUNBZ2FXWWdLSE5wWjI1VWVYQmxJQ0U5UFNBblpITmhKeWtnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2QzY205dVp5QndkV0pzYVdNZ2EyVjVJSFI1Y0dVbktWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdaSE5oVm1WeWFXWjVLSE5wWnl3Z2FHRnphQ3dnY0hWaUtWeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lHbG1JQ2h6YVdkdVZIbHdaU0FoUFQwZ0ozSnpZU2NwSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduZDNKdmJtY2djSFZpYkdsaklHdGxlU0IwZVhCbEp5bGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2RtRnlJR3hsYmlBOUlIQjFZaTV0YjJSMWJIVnpMbUo1ZEdWTVpXNW5kR2dvS1Z4dUlDQjJZWElnY0dGa0lEMGdXeUF4SUYxY2JpQWdkbUZ5SUhCaFpFNTFiU0E5SURCY2JpQWdkMmhwYkdVZ0tHaGhjMmd1YkdWdVozUm9JQ3NnY0dGa0xteGxibWQwYUNBcklESWdQQ0JzWlc0cElIdGNiaUFnSUNCd1lXUXVjSFZ6YUNnd2VHWm1LVnh1SUNBZ0lIQmhaRTUxYlNzclhHNGdJSDFjYmlBZ2NHRmtMbkIxYzJnb01IZ3dNQ2xjYmlBZ2RtRnlJR2tnUFNBdE1WeHVJQ0IzYUdsc1pTQW9LeXRwSUR3Z2FHRnphQzVzWlc1bmRHZ3BJSHRjYmlBZ0lDQndZV1F1Y0hWemFDaG9ZWE5vVzJsZEtWeHVJQ0I5WEc0Z0lIQmhaQ0E5SUc1bGR5QkNkV1ptWlhJb2NHRmtLVnh1SUNCMllYSWdjbVZrSUQwZ1FrNHViVzl1ZENod2RXSXViVzlrZFd4MWN5bGNiaUFnYzJsbklEMGdibVYzSUVKT0tITnBaeWt1ZEc5U1pXUW9jbVZrS1Z4dVhHNGdJSE5wWnlBOUlITnBaeTV5WldSUWIzY29ibVYzSUVKT0tIQjFZaTV3ZFdKc2FXTkZlSEJ2Ym1WdWRDa3BYRzVjYmlBZ2MybG5JRDBnYm1WM0lFSjFabVpsY2loemFXY3Vabkp2YlZKbFpDZ3BMblJ2UVhKeVlYa29LU2xjYmlBZ2RtRnlJRzkxZENBOUlEQmNiaUFnYVdZZ0tIQmhaRTUxYlNBOElEZ3BJSHRjYmlBZ0lDQnZkWFFnUFNBeFhHNGdJSDFjYmlBZ2JHVnVJRDBnVFdGMGFDNXRhVzRvYzJsbkxteGxibWQwYUN3Z2NHRmtMbXhsYm1kMGFDbGNiaUFnYVdZZ0tITnBaeTVzWlc1bmRHZ2dJVDA5SUhCaFpDNXNaVzVuZEdncElIdGNiaUFnSUNCdmRYUWdQU0F4WEc0Z0lIMWNibHh1SUNCcElEMGdMVEZjYmlBZ2QyaHBiR1VnS0NzcmFTQThJR3hsYmlrZ2UxeHVJQ0FnSUc5MWRDQjhQU0FvYzJsblcybGRJRjRnY0dGa1cybGRLVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnZkWFFnUFQwOUlEQmNibjFjYmx4dVpuVnVZM1JwYjI0Z1pXTldaWEpwWm5rZ0tITnBaeXdnYUdGemFDd2djSFZpS1NCN1hHNGdJSFpoY2lCamRYSjJaVWxrSUQwZ1kzVnlkbVZ6VzNCMVlpNWtZWFJoTG1Gc1oyOXlhWFJvYlM1amRYSjJaUzVxYjJsdUtDY3VKeWxkWEc0Z0lHbG1JQ2doWTNWeWRtVkpaQ2tnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2QxYm10dWIzZHVJR04xY25abElDY2dLeUJ3ZFdJdVpHRjBZUzVoYkdkdmNtbDBhRzB1WTNWeWRtVXVhbTlwYmlnbkxpY3BLVnh1WEc0Z0lIWmhjaUJqZFhKMlpTQTlJRzVsZHlCRlF5aGpkWEoyWlVsa0tWeHVJQ0IyWVhJZ2NIVmlhMlY1SUQwZ2NIVmlMbVJoZEdFdWMzVmlhbVZqZEZCeWFYWmhkR1ZMWlhrdVpHRjBZVnh1WEc0Z0lISmxkSFZ5YmlCamRYSjJaUzUyWlhKcFpua29hR0Z6YUN3Z2MybG5MQ0J3ZFdKclpYa3BYRzU5WEc1Y2JtWjFibU4wYVc5dUlHUnpZVlpsY21sbWVTQW9jMmxuTENCb1lYTm9MQ0J3ZFdJcElIdGNiaUFnZG1GeUlIQWdQU0J3ZFdJdVpHRjBZUzV3WEc0Z0lIWmhjaUJ4SUQwZ2NIVmlMbVJoZEdFdWNWeHVJQ0IyWVhJZ1p5QTlJSEIxWWk1a1lYUmhMbWRjYmlBZ2RtRnlJSGtnUFNCd2RXSXVaR0YwWVM1d2RXSmZhMlY1WEc0Z0lIWmhjaUIxYm5CaFkydGxaQ0E5SUhCaGNuTmxTMlY1Y3k1emFXZHVZWFIxY21VdVpHVmpiMlJsS0hOcFp5d2dKMlJsY2ljcFhHNGdJSFpoY2lCeklEMGdkVzV3WVdOclpXUXVjMXh1SUNCMllYSWdjaUE5SUhWdWNHRmphMlZrTG5KY2JpQWdZMmhsWTJ0V1lXeDFaU2h6TENCeEtWeHVJQ0JqYUdWamExWmhiSFZsS0hJc0lIRXBYRzRnSUhaaGNpQnRiMjUwY0NBOUlFSk9MbTF2Ym5Rb2NDbGNiaUFnZG1GeUlIY2dQU0J6TG1sdWRtMG9jU2xjYmlBZ2RtRnlJSFlnUFNCbkxuUnZVbVZrS0cxdmJuUndLVnh1SUNBZ0lDNXlaV1JRYjNjb2JtVjNJRUpPS0doaGMyZ3BMbTExYkNoM0tTNXRiMlFvY1NrcFhHNGdJQ0FnTG1aeWIyMVNaV1FvS1Z4dUlDQWdJQzV0ZFd3b1hHNGdJQ0FnSUNCNUxuUnZVbVZrS0cxdmJuUndLVnh1SUNBZ0lDQWdJQ0F1Y21Wa1VHOTNLSEl1YlhWc0tIY3BMbTF2WkNoeEtTbGNiaUFnSUNBZ0lDQWdMbVp5YjIxU1pXUW9LVnh1SUNBcExtMXZaQ2h3S1M1dGIyUW9jU2xjYmlBZ2NtVjBkWEp1SUNGMkxtTnRjQ2h5S1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJqYUdWamExWmhiSFZsSUNoaUxDQnhLU0I3WEc0Z0lHbG1JQ2hpTG1OdGNHNG9NQ2tnUEQwZ01Da2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnbmFXNTJZV3hwWkNCemFXY25LVnh1SUNCOVhHNGdJR2xtSUNoaUxtTnRjQ2h4S1NBK1BTQnhLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZHBiblpoYkdsa0lITnBaeWNwWEc0Z0lIMWNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCMlpYSnBabmxjYmlKZGZRPT0iLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG4vLyBtdWNoIG9mIHRoaXMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvc2VsZi1zaWduZWQvYmxvYi9naC1wYWdlcy9saWIvcnNhLmpzXG52YXIgY3JlYXRlSG1hYyA9IHJlcXVpcmUoJ2NyZWF0ZS1obWFjJylcbnZhciBjcnQgPSByZXF1aXJlKCdicm93c2VyaWZ5LXJzYScpXG52YXIgY3VydmVzID0gcmVxdWlyZSgnLi9jdXJ2ZXMnKVxudmFyIGVsbGlwdGljID0gcmVxdWlyZSgnZWxsaXB0aWMnKVxudmFyIHBhcnNlS2V5cyA9IHJlcXVpcmUoJ3BhcnNlLWFzbjEnKVxuXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpXG52YXIgRUMgPSBlbGxpcHRpYy5lY1xuXG5mdW5jdGlvbiBzaWduIChoYXNoLCBrZXksIGhhc2hUeXBlLCBzaWduVHlwZSkge1xuICB2YXIgcHJpdiA9IHBhcnNlS2V5cyhrZXkpXG4gIGlmIChwcml2LmN1cnZlKSB7XG4gICAgaWYgKHNpZ25UeXBlICE9PSAnZWNkc2EnKSB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHByaXZhdGUga2V5IHR5cGUnKVxuXG4gICAgcmV0dXJuIGVjU2lnbihoYXNoLCBwcml2KVxuICB9IGVsc2UgaWYgKHByaXYudHlwZSA9PT0gJ2RzYScpIHtcbiAgICBpZiAoc2lnblR5cGUgIT09ICdkc2EnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHByaXZhdGUga2V5IHR5cGUnKVxuICAgIH1cbiAgICByZXR1cm4gZHNhU2lnbihoYXNoLCBwcml2LCBoYXNoVHlwZSlcbiAgfSBlbHNlIHtcbiAgICBpZiAoc2lnblR5cGUgIT09ICdyc2EnKSB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHByaXZhdGUga2V5IHR5cGUnKVxuICB9XG5cbiAgdmFyIGxlbiA9IHByaXYubW9kdWx1cy5ieXRlTGVuZ3RoKClcbiAgdmFyIHBhZCA9IFsgMCwgMSBdXG4gIHdoaWxlIChoYXNoLmxlbmd0aCArIHBhZC5sZW5ndGggKyAxIDwgbGVuKSB7XG4gICAgcGFkLnB1c2goMHhmZilcbiAgfVxuICBwYWQucHVzaCgweDAwKVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBoYXNoLmxlbmd0aCkge1xuICAgIHBhZC5wdXNoKGhhc2hbaV0pXG4gIH1cblxuICB2YXIgb3V0ID0gY3J0KHBhZCwgcHJpdilcbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiBlY1NpZ24gKGhhc2gsIHByaXYpIHtcbiAgdmFyIGN1cnZlSWQgPSBjdXJ2ZXNbcHJpdi5jdXJ2ZS5qb2luKCcuJyldXG4gIGlmICghY3VydmVJZCkgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGN1cnZlICcgKyBwcml2LmN1cnZlLmpvaW4oJy4nKSlcblxuICB2YXIgY3VydmUgPSBuZXcgRUMoY3VydmVJZClcbiAgdmFyIGtleSA9IGN1cnZlLmdlbktleVBhaXIoKVxuXG4gIGtleS5faW1wb3J0UHJpdmF0ZShwcml2LnByaXZhdGVLZXkpXG4gIHZhciBvdXQgPSBrZXkuc2lnbihoYXNoKVxuXG4gIHJldHVybiBuZXcgQnVmZmVyKG91dC50b0RFUigpKVxufVxuXG5mdW5jdGlvbiBkc2FTaWduIChoYXNoLCBwcml2LCBhbGdvKSB7XG4gIHZhciB4ID0gcHJpdi5wYXJhbXMucHJpdl9rZXlcbiAgdmFyIHAgPSBwcml2LnBhcmFtcy5wXG4gIHZhciBxID0gcHJpdi5wYXJhbXMucVxuICB2YXIgZyA9IHByaXYucGFyYW1zLmdcbiAgdmFyIHIgPSBuZXcgQk4oMClcbiAgdmFyIGtcbiAgdmFyIEggPSBiaXRzMmludChoYXNoLCBxKS5tb2QocSlcbiAgdmFyIHMgPSBmYWxzZVxuICB2YXIga3YgPSBnZXRLZXkoeCwgcSwgaGFzaCwgYWxnbylcbiAgd2hpbGUgKHMgPT09IGZhbHNlKSB7XG4gICAgayA9IG1ha2VLZXkocSwga3YsIGFsZ28pXG4gICAgciA9IG1ha2VSKGcsIGssIHAsIHEpXG4gICAgcyA9IGsuaW52bShxKS5pbXVsKEguYWRkKHgubXVsKHIpKSkubW9kKHEpXG4gICAgaWYgKCFzLmNtcG4oMCkpIHtcbiAgICAgIHMgPSBmYWxzZVxuICAgICAgciA9IG5ldyBCTigwKVxuICAgIH1cbiAgfVxuICByZXR1cm4gdG9ERVIociwgcylcbn1cblxuZnVuY3Rpb24gdG9ERVIgKHIsIHMpIHtcbiAgciA9IHIudG9BcnJheSgpXG4gIHMgPSBzLnRvQXJyYXkoKVxuXG4gIC8vIFBhZCB2YWx1ZXNcbiAgaWYgKHJbMF0gJiAweDgwKSB7XG4gICAgciA9IFsgMCBdLmNvbmNhdChyKVxuICB9XG4gIC8vIFBhZCB2YWx1ZXNcbiAgaWYgKHNbMF0gJiAweDgwKSB7XG4gICAgcyA9IFswXS5jb25jYXQocylcbiAgfVxuXG4gIHZhciB0b3RhbCA9IHIubGVuZ3RoICsgcy5sZW5ndGggKyA0XG4gIHZhciByZXMgPSBbIDB4MzAsIHRvdGFsLCAweDAyLCByLmxlbmd0aCBdXG4gIHJlcyA9IHJlcy5jb25jYXQociwgWyAweDAyLCBzLmxlbmd0aCBdLCBzKVxuICByZXR1cm4gbmV3IEJ1ZmZlcihyZXMpXG59XG5cbmZ1bmN0aW9uIGdldEtleSAoeCwgcSwgaGFzaCwgYWxnbykge1xuICB4ID0gbmV3IEJ1ZmZlcih4LnRvQXJyYXkoKSlcbiAgaWYgKHgubGVuZ3RoIDwgcS5ieXRlTGVuZ3RoKCkpIHtcbiAgICB2YXIgemVyb3MgPSBuZXcgQnVmZmVyKHEuYnl0ZUxlbmd0aCgpIC0geC5sZW5ndGgpXG4gICAgemVyb3MuZmlsbCgwKVxuICAgIHggPSBCdWZmZXIuY29uY2F0KFt6ZXJvcywgeF0pXG4gIH1cbiAgdmFyIGhsZW4gPSBoYXNoLmxlbmd0aFxuICB2YXIgaGJpdHMgPSBiaXRzMm9jdGV0cyhoYXNoLCBxKVxuICB2YXIgdiA9IG5ldyBCdWZmZXIoaGxlbilcbiAgdi5maWxsKDEpXG4gIHZhciBrID0gbmV3IEJ1ZmZlcihobGVuKVxuICBrLmZpbGwoMClcbiAgayA9IGNyZWF0ZUhtYWMoYWxnbywgaylcbiAgICAudXBkYXRlKHYpXG4gICAgLnVwZGF0ZShuZXcgQnVmZmVyKFswXSkpXG4gICAgLnVwZGF0ZSh4KVxuICAgIC51cGRhdGUoaGJpdHMpXG4gICAgLmRpZ2VzdCgpXG4gIHYgPSBjcmVhdGVIbWFjKGFsZ28sIGspXG4gICAgLnVwZGF0ZSh2KVxuICAgIC5kaWdlc3QoKVxuICBrID0gY3JlYXRlSG1hYyhhbGdvLCBrKVxuICAgIC51cGRhdGUodilcbiAgICAudXBkYXRlKG5ldyBCdWZmZXIoWzFdKSlcbiAgICAudXBkYXRlKHgpXG4gICAgLnVwZGF0ZShoYml0cylcbiAgICAuZGlnZXN0KClcbiAgdiA9IGNyZWF0ZUhtYWMoYWxnbywgaylcbiAgICAudXBkYXRlKHYpXG4gICAgLmRpZ2VzdCgpXG4gIHJldHVybiB7XG4gICAgazogayxcbiAgICB2OiB2XG4gIH1cbn1cblxuZnVuY3Rpb24gYml0czJpbnQgKG9iaXRzLCBxKSB7XG4gIHZhciBiaXRzID0gbmV3IEJOKG9iaXRzKVxuICB2YXIgc2hpZnQgPSAob2JpdHMubGVuZ3RoIDw8IDMpIC0gcS5iaXRMZW5ndGgoKVxuICBpZiAoc2hpZnQgPiAwKSB7XG4gICAgYml0cy5pc2hybihzaGlmdClcbiAgfVxuICByZXR1cm4gYml0c1xufVxuXG5mdW5jdGlvbiBiaXRzMm9jdGV0cyAoYml0cywgcSkge1xuICBiaXRzID0gYml0czJpbnQoYml0cywgcSlcbiAgYml0cyA9IGJpdHMubW9kKHEpXG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKGJpdHMudG9BcnJheSgpKVxuICBpZiAob3V0Lmxlbmd0aCA8IHEuYnl0ZUxlbmd0aCgpKSB7XG4gICAgdmFyIHplcm9zID0gbmV3IEJ1ZmZlcihxLmJ5dGVMZW5ndGgoKSAtIG91dC5sZW5ndGgpXG4gICAgemVyb3MuZmlsbCgwKVxuICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoW3plcm9zLCBvdXRdKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gbWFrZUtleSAocSwga3YsIGFsZ28pIHtcbiAgdmFyIHQsIGtcblxuICBkbyB7XG4gICAgdCA9IG5ldyBCdWZmZXIoJycpXG5cbiAgICB3aGlsZSAodC5sZW5ndGggKiA4IDwgcS5iaXRMZW5ndGgoKSkge1xuICAgICAga3YudiA9IGNyZWF0ZUhtYWMoYWxnbywga3YuaylcbiAgICAgICAgLnVwZGF0ZShrdi52KVxuICAgICAgICAuZGlnZXN0KClcbiAgICAgIHQgPSBCdWZmZXIuY29uY2F0KFt0LCBrdi52XSlcbiAgICB9XG5cbiAgICBrID0gYml0czJpbnQodCwgcSlcbiAgICBrdi5rID0gY3JlYXRlSG1hYyhhbGdvLCBrdi5rKVxuICAgICAgLnVwZGF0ZShrdi52KVxuICAgICAgLnVwZGF0ZShuZXcgQnVmZmVyKFswXSkpXG4gICAgICAuZGlnZXN0KClcbiAgICBrdi52ID0gY3JlYXRlSG1hYyhhbGdvLCBrdi5rKVxuICAgICAgLnVwZGF0ZShrdi52KVxuICAgICAgLmRpZ2VzdCgpXG4gIH0gd2hpbGUgKGsuY21wKHEpICE9PSAtMSlcblxuICByZXR1cm4ga1xufVxuXG5mdW5jdGlvbiBtYWtlUiAoZywgaywgcCwgcSkge1xuICByZXR1cm4gZy50b1JlZChCTi5tb250KHApKS5yZWRQb3coaykuZnJvbVJlZCgpLm1vZChxKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNpZ25cbm1vZHVsZS5leHBvcnRzLmdldEtleSA9IGdldEtleVxubW9kdWxlLmV4cG9ydHMubWFrZUtleSA9IG1ha2VLZXlcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZbkp2ZDNObGNtbG1lUzF6YVdkdUwzTnBaMjR1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHk4Z2JYVmphQ0J2WmlCMGFHbHpJR0poYzJWa0lHOXVJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzlwYm1SMWRHNTVMM05sYkdZdGMybG5ibVZrTDJKc2IySXZaMmd0Y0dGblpYTXZiR2xpTDNKellTNXFjMXh1ZG1GeUlHTnlaV0YwWlVodFlXTWdQU0J5WlhGMWFYSmxLQ2RqY21WaGRHVXRhRzFoWXljcFhHNTJZWElnWTNKMElEMGdjbVZ4ZFdseVpTZ25Zbkp2ZDNObGNtbG1lUzF5YzJFbktWeHVkbUZ5SUdOMWNuWmxjeUE5SUhKbGNYVnBjbVVvSnk0dlkzVnlkbVZ6SnlsY2JuWmhjaUJsYkd4cGNIUnBZeUE5SUhKbGNYVnBjbVVvSjJWc2JHbHdkR2xqSnlsY2JuWmhjaUJ3WVhKelpVdGxlWE1nUFNCeVpYRjFhWEpsS0Nkd1lYSnpaUzFoYzI0eEp5bGNibHh1ZG1GeUlFSk9JRDBnY21WeGRXbHlaU2duWW00dWFuTW5LVnh1ZG1GeUlFVkRJRDBnWld4c2FYQjBhV011WldOY2JseHVablZ1WTNScGIyNGdjMmxuYmlBb2FHRnphQ3dnYTJWNUxDQm9ZWE5vVkhsd1pTd2djMmxuYmxSNWNHVXBJSHRjYmlBZ2RtRnlJSEJ5YVhZZ1BTQndZWEp6WlV0bGVYTW9hMlY1S1Z4dUlDQnBaaUFvY0hKcGRpNWpkWEoyWlNrZ2UxeHVJQ0FnSUdsbUlDaHphV2R1Vkhsd1pTQWhQVDBnSjJWalpITmhKeWtnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2QzY205dVp5QndjbWwyWVhSbElHdGxlU0IwZVhCbEp5bGNibHh1SUNBZ0lISmxkSFZ5YmlCbFkxTnBaMjRvYUdGemFDd2djSEpwZGlsY2JpQWdmU0JsYkhObElHbG1JQ2h3Y21sMkxuUjVjR1VnUFQwOUlDZGtjMkVuS1NCN1hHNGdJQ0FnYVdZZ0tITnBaMjVVZVhCbElDRTlQU0FuWkhOaEp5a2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZDNjbTl1WnlCd2NtbDJZWFJsSUd0bGVTQjBlWEJsSnlsY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHUnpZVk5wWjI0b2FHRnphQ3dnY0hKcGRpd2dhR0Z6YUZSNWNHVXBYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdhV1lnS0hOcFoyNVVlWEJsSUNFOVBTQW5jbk5oSnlrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkM2NtOXVaeUJ3Y21sMllYUmxJR3RsZVNCMGVYQmxKeWxjYmlBZ2ZWeHVYRzRnSUhaaGNpQnNaVzRnUFNCd2NtbDJMbTF2WkhWc2RYTXVZbmwwWlV4bGJtZDBhQ2dwWEc0Z0lIWmhjaUJ3WVdRZ1BTQmJJREFzSURFZ1hWeHVJQ0IzYUdsc1pTQW9hR0Z6YUM1c1pXNW5kR2dnS3lCd1lXUXViR1Z1WjNSb0lDc2dNU0E4SUd4bGJpa2dlMXh1SUNBZ0lIQmhaQzV3ZFhOb0tEQjRabVlwWEc0Z0lIMWNiaUFnY0dGa0xuQjFjMmdvTUhnd01DbGNiaUFnZG1GeUlHa2dQU0F0TVZ4dUlDQjNhR2xzWlNBb0t5dHBJRHdnYUdGemFDNXNaVzVuZEdncElIdGNiaUFnSUNCd1lXUXVjSFZ6YUNob1lYTm9XMmxkS1Z4dUlDQjlYRzVjYmlBZ2RtRnlJRzkxZENBOUlHTnlkQ2h3WVdRc0lIQnlhWFlwWEc0Z0lISmxkSFZ5YmlCdmRYUmNibjFjYmx4dVpuVnVZM1JwYjI0Z1pXTlRhV2R1SUNob1lYTm9MQ0J3Y21sMktTQjdYRzRnSUhaaGNpQmpkWEoyWlVsa0lEMGdZM1Z5ZG1WelczQnlhWFl1WTNWeWRtVXVhbTlwYmlnbkxpY3BYVnh1SUNCcFppQW9JV04xY25abFNXUXBJSFJvY205M0lHNWxkeUJGY25KdmNpZ25kVzVyYm05M2JpQmpkWEoyWlNBbklDc2djSEpwZGk1amRYSjJaUzVxYjJsdUtDY3VKeWtwWEc1Y2JpQWdkbUZ5SUdOMWNuWmxJRDBnYm1WM0lFVkRLR04xY25abFNXUXBYRzRnSUhaaGNpQnJaWGtnUFNCamRYSjJaUzVuWlc1TFpYbFFZV2x5S0NsY2JseHVJQ0JyWlhrdVgybHRjRzl5ZEZCeWFYWmhkR1VvY0hKcGRpNXdjbWwyWVhSbFMyVjVLVnh1SUNCMllYSWdiM1YwSUQwZ2EyVjVMbk5wWjI0b2FHRnphQ2xjYmx4dUlDQnlaWFIxY200Z2JtVjNJRUoxWm1abGNpaHZkWFF1ZEc5RVJWSW9LU2xjYm4xY2JseHVablZ1WTNScGIyNGdaSE5oVTJsbmJpQW9hR0Z6YUN3Z2NISnBkaXdnWVd4bmJ5a2dlMXh1SUNCMllYSWdlQ0E5SUhCeWFYWXVjR0Z5WVcxekxuQnlhWFpmYTJWNVhHNGdJSFpoY2lCd0lEMGdjSEpwZGk1d1lYSmhiWE11Y0Z4dUlDQjJZWElnY1NBOUlIQnlhWFl1Y0dGeVlXMXpMbkZjYmlBZ2RtRnlJR2NnUFNCd2NtbDJMbkJoY21GdGN5NW5YRzRnSUhaaGNpQnlJRDBnYm1WM0lFSk9LREFwWEc0Z0lIWmhjaUJyWEc0Z0lIWmhjaUJJSUQwZ1ltbDBjekpwYm5Rb2FHRnphQ3dnY1NrdWJXOWtLSEVwWEc0Z0lIWmhjaUJ6SUQwZ1ptRnNjMlZjYmlBZ2RtRnlJR3QySUQwZ1oyVjBTMlY1S0hnc0lIRXNJR2hoYzJnc0lHRnNaMjhwWEc0Z0lIZG9hV3hsSUNoeklEMDlQU0JtWVd4elpTa2dlMXh1SUNBZ0lHc2dQU0J0WVd0bFMyVjVLSEVzSUd0MkxDQmhiR2R2S1Z4dUlDQWdJSElnUFNCdFlXdGxVaWhuTENCckxDQndMQ0J4S1Z4dUlDQWdJSE1nUFNCckxtbHVkbTBvY1NrdWFXMTFiQ2hJTG1Ga1pDaDRMbTExYkNoeUtTa3BMbTF2WkNoeEtWeHVJQ0FnSUdsbUlDZ2hjeTVqYlhCdUtEQXBLU0I3WEc0Z0lDQWdJQ0J6SUQwZ1ptRnNjMlZjYmlBZ0lDQWdJSElnUFNCdVpYY2dRazRvTUNsY2JpQWdJQ0I5WEc0Z0lIMWNiaUFnY21WMGRYSnVJSFJ2UkVWU0tISXNJSE1wWEc1OVhHNWNibVoxYm1OMGFXOXVJSFJ2UkVWU0lDaHlMQ0J6S1NCN1hHNGdJSElnUFNCeUxuUnZRWEp5WVhrb0tWeHVJQ0J6SUQwZ2N5NTBiMEZ5Y21GNUtDbGNibHh1SUNBdkx5QlFZV1FnZG1Gc2RXVnpYRzRnSUdsbUlDaHlXekJkSUNZZ01IZzRNQ2tnZTF4dUlDQWdJSElnUFNCYklEQWdYUzVqYjI1allYUW9jaWxjYmlBZ2ZWeHVJQ0F2THlCUVlXUWdkbUZzZFdWelhHNGdJR2xtSUNoeld6QmRJQ1lnTUhnNE1Da2dlMXh1SUNBZ0lITWdQU0JiTUYwdVkyOXVZMkYwS0hNcFhHNGdJSDFjYmx4dUlDQjJZWElnZEc5MFlXd2dQU0J5TG14bGJtZDBhQ0FySUhNdWJHVnVaM1JvSUNzZ05GeHVJQ0IyWVhJZ2NtVnpJRDBnV3lBd2VETXdMQ0IwYjNSaGJDd2dNSGd3TWl3Z2NpNXNaVzVuZEdnZ1hWeHVJQ0J5WlhNZ1BTQnlaWE11WTI5dVkyRjBLSElzSUZzZ01IZ3dNaXdnY3k1c1pXNW5kR2dnWFN3Z2N5bGNiaUFnY21WMGRYSnVJRzVsZHlCQ2RXWm1aWElvY21WektWeHVmVnh1WEc1bWRXNWpkR2x2YmlCblpYUkxaWGtnS0hnc0lIRXNJR2hoYzJnc0lHRnNaMjhwSUh0Y2JpQWdlQ0E5SUc1bGR5QkNkV1ptWlhJb2VDNTBiMEZ5Y21GNUtDa3BYRzRnSUdsbUlDaDRMbXhsYm1kMGFDQThJSEV1WW5sMFpVeGxibWQwYUNncEtTQjdYRzRnSUNBZ2RtRnlJSHBsY205eklEMGdibVYzSUVKMVptWmxjaWh4TG1KNWRHVk1aVzVuZEdnb0tTQXRJSGd1YkdWdVozUm9LVnh1SUNBZ0lIcGxjbTl6TG1acGJHd29NQ2xjYmlBZ0lDQjRJRDBnUW5WbVptVnlMbU52Ym1OaGRDaGJlbVZ5YjNNc0lIaGRLVnh1SUNCOVhHNGdJSFpoY2lCb2JHVnVJRDBnYUdGemFDNXNaVzVuZEdoY2JpQWdkbUZ5SUdoaWFYUnpJRDBnWW1sMGN6SnZZM1JsZEhNb2FHRnphQ3dnY1NsY2JpQWdkbUZ5SUhZZ1BTQnVaWGNnUW5WbVptVnlLR2hzWlc0cFhHNGdJSFl1Wm1sc2JDZ3hLVnh1SUNCMllYSWdheUE5SUc1bGR5QkNkV1ptWlhJb2FHeGxiaWxjYmlBZ2F5NW1hV3hzS0RBcFhHNGdJR3NnUFNCamNtVmhkR1ZJYldGaktHRnNaMjhzSUdzcFhHNGdJQ0FnTG5Wd1pHRjBaU2gyS1Z4dUlDQWdJQzUxY0dSaGRHVW9ibVYzSUVKMVptWmxjaWhiTUYwcEtWeHVJQ0FnSUM1MWNHUmhkR1VvZUNsY2JpQWdJQ0F1ZFhCa1lYUmxLR2hpYVhSektWeHVJQ0FnSUM1a2FXZGxjM1FvS1Z4dUlDQjJJRDBnWTNKbFlYUmxTRzFoWXloaGJHZHZMQ0JyS1Z4dUlDQWdJQzUxY0dSaGRHVW9kaWxjYmlBZ0lDQXVaR2xuWlhOMEtDbGNiaUFnYXlBOUlHTnlaV0YwWlVodFlXTW9ZV3huYnl3Z2F5bGNiaUFnSUNBdWRYQmtZWFJsS0hZcFhHNGdJQ0FnTG5Wd1pHRjBaU2h1WlhjZ1FuVm1abVZ5S0ZzeFhTa3BYRzRnSUNBZ0xuVndaR0YwWlNoNEtWeHVJQ0FnSUM1MWNHUmhkR1VvYUdKcGRITXBYRzRnSUNBZ0xtUnBaMlZ6ZENncFhHNGdJSFlnUFNCamNtVmhkR1ZJYldGaktHRnNaMjhzSUdzcFhHNGdJQ0FnTG5Wd1pHRjBaU2gyS1Z4dUlDQWdJQzVrYVdkbGMzUW9LVnh1SUNCeVpYUjFjbTRnZTF4dUlDQWdJR3M2SUdzc1hHNGdJQ0FnZGpvZ2RseHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJR0pwZEhNeWFXNTBJQ2h2WW1sMGN5d2djU2tnZTF4dUlDQjJZWElnWW1sMGN5QTlJRzVsZHlCQ1RpaHZZbWwwY3lsY2JpQWdkbUZ5SUhOb2FXWjBJRDBnS0c5aWFYUnpMbXhsYm1kMGFDQThQQ0F6S1NBdElIRXVZbWwwVEdWdVozUm9LQ2xjYmlBZ2FXWWdLSE5vYVdaMElENGdNQ2tnZTF4dUlDQWdJR0pwZEhNdWFYTm9jbTRvYzJocFpuUXBYRzRnSUgxY2JpQWdjbVYwZFhKdUlHSnBkSE5jYm4xY2JseHVablZ1WTNScGIyNGdZbWwwY3pKdlkzUmxkSE1nS0dKcGRITXNJSEVwSUh0Y2JpQWdZbWwwY3lBOUlHSnBkSE15YVc1MEtHSnBkSE1zSUhFcFhHNGdJR0pwZEhNZ1BTQmlhWFJ6TG0xdlpDaHhLVnh1SUNCMllYSWdiM1YwSUQwZ2JtVjNJRUoxWm1abGNpaGlhWFJ6TG5SdlFYSnlZWGtvS1NsY2JpQWdhV1lnS0c5MWRDNXNaVzVuZEdnZ1BDQnhMbUo1ZEdWTVpXNW5kR2dvS1NrZ2UxeHVJQ0FnSUhaaGNpQjZaWEp2Y3lBOUlHNWxkeUJDZFdabVpYSW9jUzVpZVhSbFRHVnVaM1JvS0NrZ0xTQnZkWFF1YkdWdVozUm9LVnh1SUNBZ0lIcGxjbTl6TG1acGJHd29NQ2xjYmlBZ0lDQnZkWFFnUFNCQ2RXWm1aWEl1WTI5dVkyRjBLRnQ2WlhKdmN5d2diM1YwWFNsY2JpQWdmVnh1SUNCeVpYUjFjbTRnYjNWMFhHNTlYRzVjYm1aMWJtTjBhVzl1SUcxaGEyVkxaWGtnS0hFc0lHdDJMQ0JoYkdkdktTQjdYRzRnSUhaaGNpQjBMQ0JyWEc1Y2JpQWdaRzhnZTF4dUlDQWdJSFFnUFNCdVpYY2dRblZtWm1WeUtDY25LVnh1WEc0Z0lDQWdkMmhwYkdVZ0tIUXViR1Z1WjNSb0lDb2dPQ0E4SUhFdVltbDBUR1Z1WjNSb0tDa3BJSHRjYmlBZ0lDQWdJR3QyTG5ZZ1BTQmpjbVZoZEdWSWJXRmpLR0ZzWjI4c0lHdDJMbXNwWEc0Z0lDQWdJQ0FnSUM1MWNHUmhkR1VvYTNZdWRpbGNiaUFnSUNBZ0lDQWdMbVJwWjJWemRDZ3BYRzRnSUNBZ0lDQjBJRDBnUW5WbVptVnlMbU52Ym1OaGRDaGJkQ3dnYTNZdWRsMHBYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2F5QTlJR0pwZEhNeWFXNTBLSFFzSUhFcFhHNGdJQ0FnYTNZdWF5QTlJR055WldGMFpVaHRZV01vWVd4bmJ5d2dhM1l1YXlsY2JpQWdJQ0FnSUM1MWNHUmhkR1VvYTNZdWRpbGNiaUFnSUNBZ0lDNTFjR1JoZEdVb2JtVjNJRUoxWm1abGNpaGJNRjBwS1Z4dUlDQWdJQ0FnTG1ScFoyVnpkQ2dwWEc0Z0lDQWdhM1l1ZGlBOUlHTnlaV0YwWlVodFlXTW9ZV3huYnl3Z2EzWXVheWxjYmlBZ0lDQWdJQzUxY0dSaGRHVW9hM1l1ZGlsY2JpQWdJQ0FnSUM1a2FXZGxjM1FvS1Z4dUlDQjlJSGRvYVd4bElDaHJMbU50Y0NoeEtTQWhQVDBnTFRFcFhHNWNiaUFnY21WMGRYSnVJR3RjYm4xY2JseHVablZ1WTNScGIyNGdiV0ZyWlZJZ0tHY3NJR3NzSUhBc0lIRXBJSHRjYmlBZ2NtVjBkWEp1SUdjdWRHOVNaV1FvUWs0dWJXOXVkQ2h3S1NrdWNtVmtVRzkzS0dzcExtWnliMjFTWldRb0tTNXRiMlFvY1NsY2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0J6YVdkdVhHNXRiMlIxYkdVdVpYaHdiM0owY3k1blpYUkxaWGtnUFNCblpYUkxaWGxjYm0xdlpIVnNaUzVsZUhCdmNuUnpMbTFoYTJWTFpYa2dQU0J0WVd0bFMyVjVYRzRpWFgwPSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBhc24xID0gcmVxdWlyZSgnLi9hc24xJylcbnZhciBhZXNpZCA9IHJlcXVpcmUoJy4vYWVzaWQuanNvbicpXG52YXIgZml4UHJvYyA9IHJlcXVpcmUoJy4vZml4UHJvYycpXG52YXIgY2lwaGVycyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzJylcbnZhciBjb21wYXQgPSByZXF1aXJlKCdwYmtkZjInKVxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZUtleXNcblxuZnVuY3Rpb24gcGFyc2VLZXlzIChidWZmZXIpIHtcbiAgdmFyIHBhc3N3b3JkXG4gIGlmICh0eXBlb2YgYnVmZmVyID09PSAnb2JqZWN0JyAmJiAhQnVmZmVyLmlzQnVmZmVyKGJ1ZmZlcikpIHtcbiAgICBwYXNzd29yZCA9IGJ1ZmZlci5wYXNzcGhyYXNlXG4gICAgYnVmZmVyID0gYnVmZmVyLmtleVxuICB9XG4gIGlmICh0eXBlb2YgYnVmZmVyID09PSAnc3RyaW5nJykge1xuICAgIGJ1ZmZlciA9IG5ldyBCdWZmZXIoYnVmZmVyKVxuICB9XG5cbiAgdmFyIHN0cmlwcGVkID0gZml4UHJvYyhidWZmZXIsIHBhc3N3b3JkKVxuXG4gIHZhciB0eXBlID0gc3RyaXBwZWQudGFnXG4gIHZhciBkYXRhID0gc3RyaXBwZWQuZGF0YVxuICB2YXIgc3VidHlwZSwgbmRhdGFcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnUFVCTElDIEtFWSc6XG4gICAgICBuZGF0YSA9IGFzbjEuUHVibGljS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICAgIHN1YnR5cGUgPSBuZGF0YS5hbGdvcml0aG0uYWxnb3JpdGhtLmpvaW4oJy4nKVxuICAgICAgc3dpdGNoIChzdWJ0eXBlKSB7XG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTEzNTQ5LjEuMS4xJzpcbiAgICAgICAgICByZXR1cm4gYXNuMS5SU0FQdWJsaWNLZXkuZGVjb2RlKG5kYXRhLnN1YmplY3RQdWJsaWNLZXkuZGF0YSwgJ2RlcicpXG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTAwNDUuMi4xJzpcbiAgICAgICAgICBuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleSA9IG5kYXRhLnN1YmplY3RQdWJsaWNLZXlcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ2VjJyxcbiAgICAgICAgICAgIGRhdGE6IG5kYXRhXG4gICAgICAgICAgfVxuICAgICAgICBjYXNlICcxLjIuODQwLjEwMDQwLjQuMSc6XG4gICAgICAgICAgbmRhdGEuYWxnb3JpdGhtLnBhcmFtcy5wdWJfa2V5ID0gYXNuMS5EU0FwYXJhbS5kZWNvZGUobmRhdGEuc3ViamVjdFB1YmxpY0tleS5kYXRhLCAnZGVyJylcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ2RzYScsXG4gICAgICAgICAgICBkYXRhOiBuZGF0YS5hbGdvcml0aG0ucGFyYW1zXG4gICAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IGlkICcgKyBzdWJ0eXBlKVxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSB0eXBlICcgKyB0eXBlKVxuICAgIGNhc2UgJ0VOQ1JZUFRFRCBQUklWQVRFIEtFWSc6XG4gICAgICBkYXRhID0gYXNuMS5FbmNyeXB0ZWRQcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICAgIGRhdGEgPSBkZWNyeXB0KGRhdGEsIHBhc3N3b3JkKVxuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgIGNhc2UgJ1BSSVZBVEUgS0VZJzpcbiAgICAgIG5kYXRhID0gYXNuMS5Qcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICAgIHN1YnR5cGUgPSBuZGF0YS5hbGdvcml0aG0uYWxnb3JpdGhtLmpvaW4oJy4nKVxuICAgICAgc3dpdGNoIChzdWJ0eXBlKSB7XG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTEzNTQ5LjEuMS4xJzpcbiAgICAgICAgICByZXR1cm4gYXNuMS5SU0FQcml2YXRlS2V5LmRlY29kZShuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleSwgJ2RlcicpXG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTAwNDUuMi4xJzpcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY3VydmU6IG5kYXRhLmFsZ29yaXRobS5jdXJ2ZSxcbiAgICAgICAgICAgIHByaXZhdGVLZXk6IGFzbjEuRUNQcml2YXRlS2V5LmRlY29kZShuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleSwgJ2RlcicpLnByaXZhdGVLZXlcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTAwNDAuNC4xJzpcbiAgICAgICAgICBuZGF0YS5hbGdvcml0aG0ucGFyYW1zLnByaXZfa2V5ID0gYXNuMS5EU0FwYXJhbS5kZWNvZGUobmRhdGEuc3ViamVjdFByaXZhdGVLZXksICdkZXInKVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnZHNhJyxcbiAgICAgICAgICAgIHBhcmFtczogbmRhdGEuYWxnb3JpdGhtLnBhcmFtc1xuICAgICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSBpZCAnICsgc3VidHlwZSlcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgdHlwZSAnICsgdHlwZSlcbiAgICBjYXNlICdSU0EgUFVCTElDIEtFWSc6XG4gICAgICByZXR1cm4gYXNuMS5SU0FQdWJsaWNLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgIGNhc2UgJ1JTQSBQUklWQVRFIEtFWSc6XG4gICAgICByZXR1cm4gYXNuMS5SU0FQcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICBjYXNlICdEU0EgUFJJVkFURSBLRVknOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ2RzYScsXG4gICAgICAgIHBhcmFtczogYXNuMS5EU0FQcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICAgIH1cbiAgICBjYXNlICdFQyBQUklWQVRFIEtFWSc6XG4gICAgICBkYXRhID0gYXNuMS5FQ1ByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY3VydmU6IGRhdGEucGFyYW1ldGVycy52YWx1ZSxcbiAgICAgICAgcHJpdmF0ZUtleTogZGF0YS5wcml2YXRlS2V5XG4gICAgICB9XG4gICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSB0eXBlICcgKyB0eXBlKVxuICB9XG59XG5wYXJzZUtleXMuc2lnbmF0dXJlID0gYXNuMS5zaWduYXR1cmVcbmZ1bmN0aW9uIGRlY3J5cHQgKGRhdGEsIHBhc3N3b3JkKSB7XG4gIHZhciBzYWx0ID0gZGF0YS5hbGdvcml0aG0uZGVjcnlwdC5rZGUua2RlcGFyYW1zLnNhbHRcbiAgdmFyIGl0ZXJzID0gcGFyc2VJbnQoZGF0YS5hbGdvcml0aG0uZGVjcnlwdC5rZGUua2RlcGFyYW1zLml0ZXJzLnRvU3RyaW5nKCksIDEwKVxuICB2YXIgYWxnbyA9IGFlc2lkW2RhdGEuYWxnb3JpdGhtLmRlY3J5cHQuY2lwaGVyLmFsZ28uam9pbignLicpXVxuICB2YXIgaXYgPSBkYXRhLmFsZ29yaXRobS5kZWNyeXB0LmNpcGhlci5pdlxuICB2YXIgY2lwaGVyVGV4dCA9IGRhdGEuc3ViamVjdFByaXZhdGVLZXlcbiAgdmFyIGtleWxlbiA9IHBhcnNlSW50KGFsZ28uc3BsaXQoJy0nKVsxXSwgMTApIC8gOFxuICB2YXIga2V5ID0gY29tcGF0LnBia2RmMlN5bmMocGFzc3dvcmQsIHNhbHQsIGl0ZXJzLCBrZXlsZW4pXG4gIHZhciBjaXBoZXIgPSBjaXBoZXJzLmNyZWF0ZURlY2lwaGVyaXYoYWxnbywga2V5LCBpdilcbiAgdmFyIG91dCA9IFtdXG4gIG91dC5wdXNoKGNpcGhlci51cGRhdGUoY2lwaGVyVGV4dCkpXG4gIG91dC5wdXNoKGNpcGhlci5maW5hbCgpKVxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChvdXQpXG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WW5KdmQzTmxjbWxtZVMxemFXZHVMMjV2WkdWZmJXOWtkV3hsY3k5d1lYSnpaUzFoYzI0eEwybHVaR1Y0TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkluWmhjaUJoYzI0eElEMGdjbVZ4ZFdseVpTZ25MaTloYzI0eEp5bGNiblpoY2lCaFpYTnBaQ0E5SUhKbGNYVnBjbVVvSnk0dllXVnphV1F1YW5OdmJpY3BYRzUyWVhJZ1ptbDRVSEp2WXlBOUlISmxjWFZwY21Vb0p5NHZabWw0VUhKdll5Y3BYRzUyWVhJZ1kybHdhR1Z5Y3lBOUlISmxjWFZwY21Vb0oySnliM2R6WlhKcFpua3RZV1Z6SnlsY2JuWmhjaUJqYjIxd1lYUWdQU0J5WlhGMWFYSmxLQ2R3WW10a1pqSW5LVnh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0J3WVhKelpVdGxlWE5jYmx4dVpuVnVZM1JwYjI0Z2NHRnljMlZMWlhseklDaGlkV1ptWlhJcElIdGNiaUFnZG1GeUlIQmhjM04zYjNKa1hHNGdJR2xtSUNoMGVYQmxiMllnWW5WbVptVnlJRDA5UFNBbmIySnFaV04wSnlBbUppQWhRblZtWm1WeUxtbHpRblZtWm1WeUtHSjFabVpsY2lrcElIdGNiaUFnSUNCd1lYTnpkMjl5WkNBOUlHSjFabVpsY2k1d1lYTnpjR2h5WVhObFhHNGdJQ0FnWW5WbVptVnlJRDBnWW5WbVptVnlMbXRsZVZ4dUlDQjlYRzRnSUdsbUlDaDBlWEJsYjJZZ1luVm1abVZ5SUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lHSjFabVpsY2lBOUlHNWxkeUJDZFdabVpYSW9ZblZtWm1WeUtWeHVJQ0I5WEc1Y2JpQWdkbUZ5SUhOMGNtbHdjR1ZrSUQwZ1ptbDRVSEp2WXloaWRXWm1aWElzSUhCaGMzTjNiM0prS1Z4dVhHNGdJSFpoY2lCMGVYQmxJRDBnYzNSeWFYQndaV1F1ZEdGblhHNGdJSFpoY2lCa1lYUmhJRDBnYzNSeWFYQndaV1F1WkdGMFlWeHVJQ0IyWVhJZ2MzVmlkSGx3WlN3Z2JtUmhkR0ZjYmlBZ2MzZHBkR05vSUNoMGVYQmxLU0I3WEc0Z0lDQWdZMkZ6WlNBblVGVkNURWxESUV0RldTYzZYRzRnSUNBZ0lDQnVaR0YwWVNBOUlHRnpiakV1VUhWaWJHbGpTMlY1TG1SbFkyOWtaU2hrWVhSaExDQW5aR1Z5SnlsY2JpQWdJQ0FnSUhOMVluUjVjR1VnUFNCdVpHRjBZUzVoYkdkdmNtbDBhRzB1WVd4bmIzSnBkR2h0TG1wdmFXNG9KeTRuS1Z4dUlDQWdJQ0FnYzNkcGRHTm9JQ2h6ZFdKMGVYQmxLU0I3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdKekV1TWk0NE5EQXVNVEV6TlRRNUxqRXVNUzR4SnpwY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1lYTnVNUzVTVTBGUWRXSnNhV05MWlhrdVpHVmpiMlJsS0c1a1lYUmhMbk4xWW1wbFkzUlFkV0pzYVdOTFpYa3VaR0YwWVN3Z0oyUmxjaWNwWEc0Z0lDQWdJQ0FnSUdOaGMyVWdKekV1TWk0NE5EQXVNVEF3TkRVdU1pNHhKenBjYmlBZ0lDQWdJQ0FnSUNCdVpHRjBZUzV6ZFdKcVpXTjBVSEpwZG1GMFpVdGxlU0E5SUc1a1lYUmhMbk4xWW1wbFkzUlFkV0pzYVdOTFpYbGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSjJWakp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUdSaGRHRTZJRzVrWVhSaFhHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JqWVhObElDY3hMakl1T0RRd0xqRXdNRFF3TGpRdU1TYzZYRzRnSUNBZ0lDQWdJQ0FnYm1SaGRHRXVZV3huYjNKcGRHaHRMbkJoY21GdGN5NXdkV0pmYTJWNUlEMGdZWE51TVM1RVUwRndZWEpoYlM1a1pXTnZaR1VvYm1SaGRHRXVjM1ZpYW1WamRGQjFZbXhwWTB0bGVTNWtZWFJoTENBblpHVnlKeWxjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0oyUnpZU2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmtZWFJoT2lCdVpHRjBZUzVoYkdkdmNtbDBhRzB1Y0dGeVlXMXpYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCa1pXWmhkV3gwT2lCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjNWdWEyNXZkMjRnYTJWNUlHbGtJQ2NnS3lCemRXSjBlWEJsS1Z4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2QxYm10dWIzZHVJR3RsZVNCMGVYQmxJQ2NnS3lCMGVYQmxLVnh1SUNBZ0lHTmhjMlVnSjBWT1ExSlpVRlJGUkNCUVVrbFdRVlJGSUV0RldTYzZYRzRnSUNBZ0lDQmtZWFJoSUQwZ1lYTnVNUzVGYm1OeWVYQjBaV1JRY21sMllYUmxTMlY1TG1SbFkyOWtaU2hrWVhSaExDQW5aR1Z5SnlsY2JpQWdJQ0FnSUdSaGRHRWdQU0JrWldOeWVYQjBLR1JoZEdFc0lIQmhjM04zYjNKa0tWeHVJQ0FnSUNBZ0x5OGdabUZzYkhNZ2RHaHliM1ZuYUZ4dUlDQWdJR05oYzJVZ0oxQlNTVlpCVkVVZ1MwVlpKenBjYmlBZ0lDQWdJRzVrWVhSaElEMGdZWE51TVM1UWNtbDJZWFJsUzJWNUxtUmxZMjlrWlNoa1lYUmhMQ0FuWkdWeUp5bGNiaUFnSUNBZ0lITjFZblI1Y0dVZ1BTQnVaR0YwWVM1aGJHZHZjbWwwYUcwdVlXeG5iM0pwZEdodExtcHZhVzRvSnk0bktWeHVJQ0FnSUNBZ2MzZHBkR05vSUNoemRXSjBlWEJsS1NCN1hHNGdJQ0FnSUNBZ0lHTmhjMlVnSnpFdU1pNDROREF1TVRFek5UUTVMakV1TVM0eEp6cGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZWE51TVM1U1UwRlFjbWwyWVhSbFMyVjVMbVJsWTI5a1pTaHVaR0YwWVM1emRXSnFaV04wVUhKcGRtRjBaVXRsZVN3Z0oyUmxjaWNwWEc0Z0lDQWdJQ0FnSUdOaGMyVWdKekV1TWk0NE5EQXVNVEF3TkRVdU1pNHhKenBjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZM1Z5ZG1VNklHNWtZWFJoTG1Gc1oyOXlhWFJvYlM1amRYSjJaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnlhWFpoZEdWTFpYazZJR0Z6YmpFdVJVTlFjbWwyWVhSbFMyVjVMbVJsWTI5a1pTaHVaR0YwWVM1emRXSnFaV04wVUhKcGRtRjBaVXRsZVN3Z0oyUmxjaWNwTG5CeWFYWmhkR1ZMWlhsY2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR05oYzJVZ0p6RXVNaTQ0TkRBdU1UQXdOREF1TkM0eEp6cGNiaUFnSUNBZ0lDQWdJQ0J1WkdGMFlTNWhiR2R2Y21sMGFHMHVjR0Z5WVcxekxuQnlhWFpmYTJWNUlEMGdZWE51TVM1RVUwRndZWEpoYlM1a1pXTnZaR1VvYm1SaGRHRXVjM1ZpYW1WamRGQnlhWFpoZEdWTFpYa3NJQ2RrWlhJbktWeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFuWkhOaEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUhCaGNtRnRjem9nYm1SaGRHRXVZV3huYjNKcGRHaHRMbkJoY21GdGMxeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWkdWbVlYVnNkRG9nZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2QxYm10dWIzZHVJR3RsZVNCcFpDQW5JQ3NnYzNWaWRIbHdaU2xjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25kVzVyYm05M2JpQnJaWGtnZEhsd1pTQW5JQ3NnZEhsd1pTbGNiaUFnSUNCallYTmxJQ2RTVTBFZ1VGVkNURWxESUV0RldTYzZYRzRnSUNBZ0lDQnlaWFIxY200Z1lYTnVNUzVTVTBGUWRXSnNhV05MWlhrdVpHVmpiMlJsS0dSaGRHRXNJQ2RrWlhJbktWeHVJQ0FnSUdOaGMyVWdKMUpUUVNCUVVrbFdRVlJGSUV0RldTYzZYRzRnSUNBZ0lDQnlaWFIxY200Z1lYTnVNUzVTVTBGUWNtbDJZWFJsUzJWNUxtUmxZMjlrWlNoa1lYUmhMQ0FuWkdWeUp5bGNiaUFnSUNCallYTmxJQ2RFVTBFZ1VGSkpWa0ZVUlNCTFJWa25PbHh1SUNBZ0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lDQWdkSGx3WlRvZ0oyUnpZU2NzWEc0Z0lDQWdJQ0FnSUhCaGNtRnRjem9nWVhOdU1TNUVVMEZRY21sMllYUmxTMlY1TG1SbFkyOWtaU2hrWVhSaExDQW5aR1Z5SnlsY2JpQWdJQ0FnSUgxY2JpQWdJQ0JqWVhObElDZEZReUJRVWtsV1FWUkZJRXRGV1NjNlhHNGdJQ0FnSUNCa1lYUmhJRDBnWVhOdU1TNUZRMUJ5YVhaaGRHVkxaWGt1WkdWamIyUmxLR1JoZEdFc0lDZGtaWEluS1Z4dUlDQWdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJQ0FnWTNWeWRtVTZJR1JoZEdFdWNHRnlZVzFsZEdWeWN5NTJZV3gxWlN4Y2JpQWdJQ0FnSUNBZ2NISnBkbUYwWlV0bGVUb2daR0YwWVM1d2NtbDJZWFJsUzJWNVhHNGdJQ0FnSUNCOVhHNGdJQ0FnWkdWbVlYVnNkRG9nZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2QxYm10dWIzZHVJR3RsZVNCMGVYQmxJQ2NnS3lCMGVYQmxLVnh1SUNCOVhHNTlYRzV3WVhKelpVdGxlWE11YzJsbmJtRjBkWEpsSUQwZ1lYTnVNUzV6YVdkdVlYUjFjbVZjYm1aMWJtTjBhVzl1SUdSbFkzSjVjSFFnS0dSaGRHRXNJSEJoYzNOM2IzSmtLU0I3WEc0Z0lIWmhjaUJ6WVd4MElEMGdaR0YwWVM1aGJHZHZjbWwwYUcwdVpHVmpjbmx3ZEM1clpHVXVhMlJsY0dGeVlXMXpMbk5oYkhSY2JpQWdkbUZ5SUdsMFpYSnpJRDBnY0dGeWMyVkpiblFvWkdGMFlTNWhiR2R2Y21sMGFHMHVaR1ZqY25sd2RDNXJaR1V1YTJSbGNHRnlZVzF6TG1sMFpYSnpMblJ2VTNSeWFXNW5LQ2tzSURFd0tWeHVJQ0IyWVhJZ1lXeG5ieUE5SUdGbGMybGtXMlJoZEdFdVlXeG5iM0pwZEdodExtUmxZM0o1Y0hRdVkybHdhR1Z5TG1Gc1oyOHVhbTlwYmlnbkxpY3BYVnh1SUNCMllYSWdhWFlnUFNCa1lYUmhMbUZzWjI5eWFYUm9iUzVrWldOeWVYQjBMbU5wY0dobGNpNXBkbHh1SUNCMllYSWdZMmx3YUdWeVZHVjRkQ0E5SUdSaGRHRXVjM1ZpYW1WamRGQnlhWFpoZEdWTFpYbGNiaUFnZG1GeUlHdGxlV3hsYmlBOUlIQmhjbk5sU1c1MEtHRnNaMjh1YzNCc2FYUW9KeTBuS1ZzeFhTd2dNVEFwSUM4Z09GeHVJQ0IyWVhJZ2EyVjVJRDBnWTI5dGNHRjBMbkJpYTJSbU1sTjVibU1vY0dGemMzZHZjbVFzSUhOaGJIUXNJR2wwWlhKekxDQnJaWGxzWlc0cFhHNGdJSFpoY2lCamFYQm9aWElnUFNCamFYQm9aWEp6TG1OeVpXRjBaVVJsWTJsd2FHVnlhWFlvWVd4bmJ5d2dhMlY1TENCcGRpbGNiaUFnZG1GeUlHOTFkQ0E5SUZ0ZFhHNGdJRzkxZEM1d2RYTm9LR05wY0dobGNpNTFjR1JoZEdVb1kybHdhR1Z5VkdWNGRDa3BYRzRnSUc5MWRDNXdkWE5vS0dOcGNHaGxjaTVtYVc1aGJDZ3BLVnh1SUNCeVpYUjFjbTRnUW5WbVptVnlMbU52Ym1OaGRDaHZkWFFwWEc1OVhHNGlYWDA9IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xudmFyIGNyZWF0ZUhtYWMgPSByZXF1aXJlKCdjcmVhdGUtaG1hYycpXG52YXIgTUFYX0FMTE9DID0gTWF0aC5wb3coMiwgMzApIC0gMSAvLyBkZWZhdWx0IGluIGlvanNcblxuZXhwb3J0cy5wYmtkZjIgPSBwYmtkZjJcbmZ1bmN0aW9uIHBia2RmMiAocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgZGlnZXN0LCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIGRpZ2VzdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gZGlnZXN0XG4gICAgZGlnZXN0ID0gdW5kZWZpbmVkXG4gIH1cblxuICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBjYWxsYmFjayBwcm92aWRlZCB0byBwYmtkZjInKVxuICB9XG5cbiAgdmFyIHJlc3VsdCA9IHBia2RmMlN5bmMocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgZGlnZXN0KVxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBjYWxsYmFjayh1bmRlZmluZWQsIHJlc3VsdClcbiAgfSlcbn1cblxuZXhwb3J0cy5wYmtkZjJTeW5jID0gcGJrZGYyU3luY1xuZnVuY3Rpb24gcGJrZGYyU3luYyAocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgZGlnZXN0KSB7XG4gIGlmICh0eXBlb2YgaXRlcmF0aW9ucyAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJdGVyYXRpb25zIG5vdCBhIG51bWJlcicpXG4gIH1cblxuICBpZiAoaXRlcmF0aW9ucyA8IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCYWQgaXRlcmF0aW9ucycpXG4gIH1cblxuICBpZiAodHlwZW9mIGtleWxlbiAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdLZXkgbGVuZ3RoIG5vdCBhIG51bWJlcicpXG4gIH1cblxuICBpZiAoa2V5bGVuIDwgMCB8fCBrZXlsZW4gPiBNQVhfQUxMT0MpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCYWQga2V5IGxlbmd0aCcpXG4gIH1cblxuICBkaWdlc3QgPSBkaWdlc3QgfHwgJ3NoYTEnXG5cbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocGFzc3dvcmQpKSBwYXNzd29yZCA9IG5ldyBCdWZmZXIocGFzc3dvcmQsICdiaW5hcnknKVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihzYWx0KSkgc2FsdCA9IG5ldyBCdWZmZXIoc2FsdCwgJ2JpbmFyeScpXG5cbiAgdmFyIGhMZW5cbiAgdmFyIGwgPSAxXG4gIHZhciBESyA9IG5ldyBCdWZmZXIoa2V5bGVuKVxuICB2YXIgYmxvY2sxID0gbmV3IEJ1ZmZlcihzYWx0Lmxlbmd0aCArIDQpXG4gIHNhbHQuY29weShibG9jazEsIDAsIDAsIHNhbHQubGVuZ3RoKVxuXG4gIHZhciByXG4gIHZhciBUXG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPD0gbDsgaSsrKSB7XG4gICAgYmxvY2sxLndyaXRlVUludDMyQkUoaSwgc2FsdC5sZW5ndGgpXG4gICAgdmFyIFUgPSBjcmVhdGVIbWFjKGRpZ2VzdCwgcGFzc3dvcmQpLnVwZGF0ZShibG9jazEpLmRpZ2VzdCgpXG5cbiAgICBpZiAoIWhMZW4pIHtcbiAgICAgIGhMZW4gPSBVLmxlbmd0aFxuICAgICAgVCA9IG5ldyBCdWZmZXIoaExlbilcbiAgICAgIGwgPSBNYXRoLmNlaWwoa2V5bGVuIC8gaExlbilcbiAgICAgIHIgPSBrZXlsZW4gLSAobCAtIDEpICogaExlblxuICAgIH1cblxuICAgIFUuY29weShULCAwLCAwLCBoTGVuKVxuXG4gICAgZm9yICh2YXIgaiA9IDE7IGogPCBpdGVyYXRpb25zOyBqKyspIHtcbiAgICAgIFUgPSBjcmVhdGVIbWFjKGRpZ2VzdCwgcGFzc3dvcmQpLnVwZGF0ZShVKS5kaWdlc3QoKVxuXG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IGhMZW47IGsrKykge1xuICAgICAgICBUW2tdIF49IFVba11cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGVzdFBvcyA9IChpIC0gMSkgKiBoTGVuXG4gICAgdmFyIGxlbiA9IChpID09PSBsID8gciA6IGhMZW4pXG4gICAgVC5jb3B5KERLLCBkZXN0UG9zLCAwLCBsZW4pXG4gIH1cblxuICByZXR1cm4gREtcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZjR0pyWkdZeUwySnliM2R6WlhJdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlHTnlaV0YwWlVodFlXTWdQU0J5WlhGMWFYSmxLQ2RqY21WaGRHVXRhRzFoWXljcFhHNTJZWElnVFVGWVgwRk1URTlESUQwZ1RXRjBhQzV3YjNjb01pd2dNekFwSUMwZ01TQXZMeUJrWldaaGRXeDBJR2x1SUdsdmFuTmNibHh1Wlhod2IzSjBjeTV3WW10a1pqSWdQU0J3WW10a1pqSmNibVoxYm1OMGFXOXVJSEJpYTJSbU1pQW9jR0Z6YzNkdmNtUXNJSE5oYkhRc0lHbDBaWEpoZEdsdmJuTXNJR3RsZVd4bGJpd2daR2xuWlhOMExDQmpZV3hzWW1GamF5a2dlMXh1SUNCcFppQW9kSGx3Wlc5bUlHUnBaMlZ6ZENBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJR05oYkd4aVlXTnJJRDBnWkdsblpYTjBYRzRnSUNBZ1pHbG5aWE4wSUQwZ2RXNWtaV1pwYm1Wa1hHNGdJSDFjYmx4dUlDQnBaaUFvZEhsd1pXOW1JR05oYkd4aVlXTnJJQ0U5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkT2J5QmpZV3hzWW1GamF5QndjbTkyYVdSbFpDQjBieUJ3WW10a1pqSW5LVnh1SUNCOVhHNWNiaUFnZG1GeUlISmxjM1ZzZENBOUlIQmlhMlJtTWxONWJtTW9jR0Z6YzNkdmNtUXNJSE5oYkhRc0lHbDBaWEpoZEdsdmJuTXNJR3RsZVd4bGJpd2daR2xuWlhOMEtWeHVJQ0J6WlhSVWFXMWxiM1YwS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCallXeHNZbUZqYXloMWJtUmxabWx1WldRc0lISmxjM1ZzZENsY2JpQWdmU2xjYm4xY2JseHVaWGh3YjNKMGN5NXdZbXRrWmpKVGVXNWpJRDBnY0dKclpHWXlVM2x1WTF4dVpuVnVZM1JwYjI0Z2NHSnJaR1l5VTNsdVl5QW9jR0Z6YzNkdmNtUXNJSE5oYkhRc0lHbDBaWEpoZEdsdmJuTXNJR3RsZVd4bGJpd2daR2xuWlhOMEtTQjdYRzRnSUdsbUlDaDBlWEJsYjJZZ2FYUmxjbUYwYVc5dWN5QWhQVDBnSjI1MWJXSmxjaWNwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkSmRHVnlZWFJwYjI1eklHNXZkQ0JoSUc1MWJXSmxjaWNwWEc0Z0lIMWNibHh1SUNCcFppQW9hWFJsY21GMGFXOXVjeUE4SURBcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZENZV1FnYVhSbGNtRjBhVzl1Y3ljcFhHNGdJSDFjYmx4dUlDQnBaaUFvZEhsd1pXOW1JR3RsZVd4bGJpQWhQVDBnSjI1MWJXSmxjaWNwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkTFpYa2diR1Z1WjNSb0lHNXZkQ0JoSUc1MWJXSmxjaWNwWEc0Z0lIMWNibHh1SUNCcFppQW9hMlY1YkdWdUlEd2dNQ0I4ZkNCclpYbHNaVzRnUGlCTlFWaGZRVXhNVDBNcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZENZV1FnYTJWNUlHeGxibWQwYUNjcFhHNGdJSDFjYmx4dUlDQmthV2RsYzNRZ1BTQmthV2RsYzNRZ2ZId2dKM05vWVRFblhHNWNiaUFnYVdZZ0tDRkNkV1ptWlhJdWFYTkNkV1ptWlhJb2NHRnpjM2R2Y21RcEtTQndZWE56ZDI5eVpDQTlJRzVsZHlCQ2RXWm1aWElvY0dGemMzZHZjbVFzSUNkaWFXNWhjbmtuS1Z4dUlDQnBaaUFvSVVKMVptWmxjaTVwYzBKMVptWmxjaWh6WVd4MEtTa2djMkZzZENBOUlHNWxkeUJDZFdabVpYSW9jMkZzZEN3Z0oySnBibUZ5ZVNjcFhHNWNiaUFnZG1GeUlHaE1aVzVjYmlBZ2RtRnlJR3dnUFNBeFhHNGdJSFpoY2lCRVN5QTlJRzVsZHlCQ2RXWm1aWElvYTJWNWJHVnVLVnh1SUNCMllYSWdZbXh2WTJzeElEMGdibVYzSUVKMVptWmxjaWh6WVd4MExteGxibWQwYUNBcklEUXBYRzRnSUhOaGJIUXVZMjl3ZVNoaWJHOWphekVzSURBc0lEQXNJSE5oYkhRdWJHVnVaM1JvS1Z4dVhHNGdJSFpoY2lCeVhHNGdJSFpoY2lCVVhHNWNiaUFnWm05eUlDaDJZWElnYVNBOUlERTdJR2tnUEQwZ2JEc2dhU3NyS1NCN1hHNGdJQ0FnWW14dlkyc3hMbmR5YVhSbFZVbHVkRE15UWtVb2FTd2djMkZzZEM1c1pXNW5kR2dwWEc0Z0lDQWdkbUZ5SUZVZ1BTQmpjbVZoZEdWSWJXRmpLR1JwWjJWemRDd2djR0Z6YzNkdmNtUXBMblZ3WkdGMFpTaGliRzlqYXpFcExtUnBaMlZ6ZENncFhHNWNiaUFnSUNCcFppQW9JV2hNWlc0cElIdGNiaUFnSUNBZ0lHaE1aVzRnUFNCVkxteGxibWQwYUZ4dUlDQWdJQ0FnVkNBOUlHNWxkeUJDZFdabVpYSW9hRXhsYmlsY2JpQWdJQ0FnSUd3Z1BTQk5ZWFJvTG1ObGFXd29hMlY1YkdWdUlDOGdhRXhsYmlsY2JpQWdJQ0FnSUhJZ1BTQnJaWGxzWlc0Z0xTQW9iQ0F0SURFcElDb2dhRXhsYmx4dUlDQWdJSDFjYmx4dUlDQWdJRlV1WTI5d2VTaFVMQ0F3TENBd0xDQm9UR1Z1S1Z4dVhHNGdJQ0FnWm05eUlDaDJZWElnYWlBOUlERTdJR29nUENCcGRHVnlZWFJwYjI1ek95QnFLeXNwSUh0Y2JpQWdJQ0FnSUZVZ1BTQmpjbVZoZEdWSWJXRmpLR1JwWjJWemRDd2djR0Z6YzNkdmNtUXBMblZ3WkdGMFpTaFZLUzVrYVdkbGMzUW9LVnh1WEc0Z0lDQWdJQ0JtYjNJZ0tIWmhjaUJySUQwZ01Ec2dheUE4SUdoTVpXNDdJR3NyS3lrZ2UxeHVJQ0FnSUNBZ0lDQlVXMnRkSUY0OUlGVmJhMTFjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQjJZWElnWkdWemRGQnZjeUE5SUNocElDMGdNU2tnS2lCb1RHVnVYRzRnSUNBZ2RtRnlJR3hsYmlBOUlDaHBJRDA5UFNCc0lEOGdjaUE2SUdoTVpXNHBYRzRnSUNBZ1ZDNWpiM0I1S0VSTExDQmtaWE4wVUc5ekxDQXdMQ0JzWlc0cFhHNGdJSDFjYmx4dUlDQnlaWFIxY200Z1JFdGNibjFjYmlKZGZRPT0iLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG4ndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoL2Jyb3dzZXInKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3N0cmVhbScpLlRyYW5zZm9ybVxuXG52YXIgWkVST1MgPSBuZXcgQnVmZmVyKDEyOClcblpFUk9TLmZpbGwoMClcblxuZnVuY3Rpb24gSG1hYyhhbGcsIGtleSkge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuICBhbGcgPSBhbGcudG9Mb3dlckNhc2UoKVxuICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcbiAgICBrZXkgPSBuZXcgQnVmZmVyKGtleSlcbiAgfVxuXG4gIHZhciBibG9ja3NpemUgPSAoYWxnID09PSAnc2hhNTEyJyB8fCBhbGcgPT09ICdzaGEzODQnKSA/IDEyOCA6IDY0XG5cbiAgdGhpcy5fYWxnID0gYWxnXG4gIHRoaXMuX2tleSA9IGtleVxuXG4gIGlmIChrZXkubGVuZ3RoID4gYmxvY2tzaXplKSB7XG4gICAga2V5ID0gY3JlYXRlSGFzaChhbGcpLnVwZGF0ZShrZXkpLmRpZ2VzdCgpXG5cbiAgfSBlbHNlIGlmIChrZXkubGVuZ3RoIDwgYmxvY2tzaXplKSB7XG4gICAga2V5ID0gQnVmZmVyLmNvbmNhdChba2V5LCBaRVJPU10sIGJsb2Nrc2l6ZSlcbiAgfVxuXG4gIHZhciBpcGFkID0gdGhpcy5faXBhZCA9IG5ldyBCdWZmZXIoYmxvY2tzaXplKVxuICB2YXIgb3BhZCA9IHRoaXMuX29wYWQgPSBuZXcgQnVmZmVyKGJsb2Nrc2l6ZSlcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2Nrc2l6ZTsgaSsrKSB7XG4gICAgaXBhZFtpXSA9IGtleVtpXSBeIDB4MzZcbiAgICBvcGFkW2ldID0ga2V5W2ldIF4gMHg1Q1xuICB9XG5cbiAgdGhpcy5faGFzaCA9IGNyZWF0ZUhhc2goYWxnKS51cGRhdGUoaXBhZClcbn1cblxuaW5oZXJpdHMoSG1hYywgVHJhbnNmb3JtKVxuXG5IbWFjLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSwgZW5jKSB7XG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEsIGVuYylcblxuICByZXR1cm4gdGhpc1xufVxuXG5IbWFjLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGRhdGEsIF8sIG5leHQpIHtcbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcblxuICBuZXh0KClcbn1cblxuSG1hYy5wcm90b3R5cGUuX2ZsdXNoID0gZnVuY3Rpb24gKG5leHQpIHtcbiAgdGhpcy5wdXNoKHRoaXMuZGlnZXN0KCkpXG5cbiAgbmV4dCgpXG59XG5cbkhtYWMucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgdmFyIGggPSB0aGlzLl9oYXNoLmRpZ2VzdCgpXG5cbiAgcmV0dXJuIGNyZWF0ZUhhc2godGhpcy5fYWxnKS51cGRhdGUodGhpcy5fb3BhZCkudXBkYXRlKGgpLmRpZ2VzdChlbmMpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlSG1hYyhhbGcsIGtleSkge1xuICByZXR1cm4gbmV3IEhtYWMoYWxnLCBrZXkpXG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WTNKbFlYUmxMV2h0WVdNdlluSnZkM05sY2k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJbmRYTmxJSE4wY21samRDYzdYRzUyWVhJZ1kzSmxZWFJsU0dGemFDQTlJSEpsY1hWcGNtVW9KMk55WldGMFpTMW9ZWE5vTDJKeWIzZHpaWEluS1R0Y2JuWmhjaUJwYm1obGNtbDBjeUE5SUhKbGNYVnBjbVVvSjJsdWFHVnlhWFJ6SnlsY2JseHVkbUZ5SUZSeVlXNXpabTl5YlNBOUlISmxjWFZwY21Vb0ozTjBjbVZoYlNjcExsUnlZVzV6Wm05eWJWeHVYRzUyWVhJZ1drVlNUMU1nUFNCdVpYY2dRblZtWm1WeUtERXlPQ2xjYmxwRlVrOVRMbVpwYkd3b01DbGNibHh1Wm5WdVkzUnBiMjRnU0cxaFl5aGhiR2NzSUd0bGVTa2dlMXh1SUNCVWNtRnVjMlp2Y20wdVkyRnNiQ2gwYUdsektWeHVJQ0JoYkdjZ1BTQmhiR2N1ZEc5TWIzZGxja05oYzJVb0tWeHVJQ0JwWmlBb2RIbHdaVzltSUd0bGVTQTlQVDBnSjNOMGNtbHVaeWNwSUh0Y2JpQWdJQ0JyWlhrZ1BTQnVaWGNnUW5WbVptVnlLR3RsZVNsY2JpQWdmVnh1WEc0Z0lIWmhjaUJpYkc5amEzTnBlbVVnUFNBb1lXeG5JRDA5UFNBbmMyaGhOVEV5SnlCOGZDQmhiR2NnUFQwOUlDZHphR0V6T0RRbktTQS9JREV5T0NBNklEWTBYRzVjYmlBZ2RHaHBjeTVmWVd4bklEMGdZV3huWEc0Z0lIUm9hWE11WDJ0bGVTQTlJR3RsZVZ4dVhHNGdJR2xtSUNoclpYa3ViR1Z1WjNSb0lENGdZbXh2WTJ0emFYcGxLU0I3WEc0Z0lDQWdhMlY1SUQwZ1kzSmxZWFJsU0dGemFDaGhiR2NwTG5Wd1pHRjBaU2hyWlhrcExtUnBaMlZ6ZENncFhHNWNiaUFnZlNCbGJITmxJR2xtSUNoclpYa3ViR1Z1WjNSb0lEd2dZbXh2WTJ0emFYcGxLU0I3WEc0Z0lDQWdhMlY1SUQwZ1FuVm1abVZ5TG1OdmJtTmhkQ2hiYTJWNUxDQmFSVkpQVTEwc0lHSnNiMk5yYzJsNlpTbGNiaUFnZlZ4dVhHNGdJSFpoY2lCcGNHRmtJRDBnZEdocGN5NWZhWEJoWkNBOUlHNWxkeUJDZFdabVpYSW9ZbXh2WTJ0emFYcGxLVnh1SUNCMllYSWdiM0JoWkNBOUlIUm9hWE11WDI5d1lXUWdQU0J1WlhjZ1FuVm1abVZ5S0dKc2IyTnJjMmw2WlNsY2JseHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUdKc2IyTnJjMmw2WlRzZ2FTc3JLU0I3WEc0Z0lDQWdhWEJoWkZ0cFhTQTlJR3RsZVZ0cFhTQmVJREI0TXpaY2JpQWdJQ0J2Y0dGa1cybGRJRDBnYTJWNVcybGRJRjRnTUhnMVExeHVJQ0I5WEc1Y2JpQWdkR2hwY3k1ZmFHRnphQ0E5SUdOeVpXRjBaVWhoYzJnb1lXeG5LUzUxY0dSaGRHVW9hWEJoWkNsY2JuMWNibHh1YVc1b1pYSnBkSE1vU0cxaFl5d2dWSEpoYm5ObWIzSnRLVnh1WEc1SWJXRmpMbkJ5YjNSdmRIbHdaUzUxY0dSaGRHVWdQU0JtZFc1amRHbHZiaUFvWkdGMFlTd2daVzVqS1NCN1hHNGdJSFJvYVhNdVgyaGhjMmd1ZFhCa1lYUmxLR1JoZEdFc0lHVnVZeWxjYmx4dUlDQnlaWFIxY200Z2RHaHBjMXh1ZlZ4dVhHNUliV0ZqTG5CeWIzUnZkSGx3WlM1ZmRISmhibk5tYjNKdElEMGdablZ1WTNScGIyNGdLR1JoZEdFc0lGOHNJRzVsZUhRcElIdGNiaUFnZEdocGN5NWZhR0Z6YUM1MWNHUmhkR1VvWkdGMFlTbGNibHh1SUNCdVpYaDBLQ2xjYm4xY2JseHVTRzFoWXk1d2NtOTBiM1I1Y0dVdVgyWnNkWE5vSUQwZ1puVnVZM1JwYjI0Z0tHNWxlSFFwSUh0Y2JpQWdkR2hwY3k1d2RYTm9LSFJvYVhNdVpHbG5aWE4wS0NrcFhHNWNiaUFnYm1WNGRDZ3BYRzU5WEc1Y2JraHRZV011Y0hKdmRHOTBlWEJsTG1ScFoyVnpkQ0E5SUdaMWJtTjBhVzl1SUNobGJtTXBJSHRjYmlBZ2RtRnlJR2dnUFNCMGFHbHpMbDlvWVhOb0xtUnBaMlZ6ZENncFhHNWNiaUFnY21WMGRYSnVJR055WldGMFpVaGhjMmdvZEdocGN5NWZZV3huS1M1MWNHUmhkR1VvZEdocGN5NWZiM0JoWkNrdWRYQmtZWFJsS0dncExtUnBaMlZ6ZENobGJtTXBYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0Z1kzSmxZWFJsU0cxaFl5aGhiR2NzSUd0bGVTa2dlMXh1SUNCeVpYUjFjbTRnYm1WM0lFaHRZV01vWVd4bkxDQnJaWGtwWEc1OVhHNGlYWDA9IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xuJ3VzZSBzdHJpY3QnO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIG1kNSA9IHJlcXVpcmUoJy4vbWQ1JylcbnZhciBybWQxNjAgPSByZXF1aXJlKCdyaXBlbWQxNjAnKVxudmFyIHNoYSA9IHJlcXVpcmUoJ3NoYS5qcycpXG5cbnZhciBCYXNlID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxuXG5mdW5jdGlvbiBIYXNoTm9Db25zdHJ1Y3RvcihoYXNoKSB7XG4gIEJhc2UuY2FsbCh0aGlzLCAnZGlnZXN0JylcblxuICB0aGlzLl9oYXNoID0gaGFzaFxuICB0aGlzLmJ1ZmZlcnMgPSBbXVxufVxuXG5pbmhlcml0cyhIYXNoTm9Db25zdHJ1Y3RvciwgQmFzZSlcblxuSGFzaE5vQ29uc3RydWN0b3IucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmJ1ZmZlcnMucHVzaChkYXRhKVxufVxuXG5IYXNoTm9Db25zdHJ1Y3Rvci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYnVmID0gQnVmZmVyLmNvbmNhdCh0aGlzLmJ1ZmZlcnMpXG4gIHZhciByID0gdGhpcy5faGFzaChidWYpXG4gIHRoaXMuYnVmZmVycyA9IG51bGxcblxuICByZXR1cm4gclxufVxuXG5mdW5jdGlvbiBIYXNoKGhhc2gpIHtcbiAgQmFzZS5jYWxsKHRoaXMsICdkaWdlc3QnKVxuXG4gIHRoaXMuX2hhc2ggPSBoYXNoXG59XG5cbmluaGVyaXRzKEhhc2gsIEJhc2UpXG5cbkhhc2gucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLl9oYXNoLnVwZGF0ZShkYXRhKVxufVxuXG5IYXNoLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9oYXNoLmRpZ2VzdCgpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlSGFzaCAoYWxnKSB7XG4gIGFsZyA9IGFsZy50b0xvd2VyQ2FzZSgpXG4gIGlmICgnbWQ1JyA9PT0gYWxnKSByZXR1cm4gbmV3IEhhc2hOb0NvbnN0cnVjdG9yKG1kNSlcbiAgaWYgKCdybWQxNjAnID09PSBhbGcgfHwgJ3JpcGVtZDE2MCcgPT09IGFsZykgcmV0dXJuIG5ldyBIYXNoTm9Db25zdHJ1Y3RvcihybWQxNjApXG5cbiAgcmV0dXJuIG5ldyBIYXNoKHNoYShhbGcpKVxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlkzSmxZWFJsTFdoaGMyZ3ZZbkp2ZDNObGNpNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJR2x1YUdWeWFYUnpJRDBnY21WeGRXbHlaU2duYVc1b1pYSnBkSE1uS1Z4dWRtRnlJRzFrTlNBOUlISmxjWFZwY21Vb0p5NHZiV1ExSnlsY2JuWmhjaUJ5YldReE5qQWdQU0J5WlhGMWFYSmxLQ2R5YVhCbGJXUXhOakFuS1Z4dWRtRnlJSE5vWVNBOUlISmxjWFZwY21Vb0ozTm9ZUzVxY3ljcFhHNWNiblpoY2lCQ1lYTmxJRDBnY21WeGRXbHlaU2duWTJsd2FHVnlMV0poYzJVbktWeHVYRzVtZFc1amRHbHZiaUJJWVhOb1RtOURiMjV6ZEhKMVkzUnZjaWhvWVhOb0tTQjdYRzRnSUVKaGMyVXVZMkZzYkNoMGFHbHpMQ0FuWkdsblpYTjBKeWxjYmx4dUlDQjBhR2x6TGw5b1lYTm9JRDBnYUdGemFGeHVJQ0IwYUdsekxtSjFabVpsY25NZ1BTQmJYVnh1ZlZ4dVhHNXBibWhsY21sMGN5aElZWE5vVG05RGIyNXpkSEoxWTNSdmNpd2dRbUZ6WlNsY2JseHVTR0Z6YUU1dlEyOXVjM1J5ZFdOMGIzSXVjSEp2ZEc5MGVYQmxMbDkxY0dSaGRHVWdQU0JtZFc1amRHbHZiaUFvWkdGMFlTa2dlMXh1SUNCMGFHbHpMbUoxWm1abGNuTXVjSFZ6YUNoa1lYUmhLVnh1ZlZ4dVhHNUlZWE5vVG05RGIyNXpkSEoxWTNSdmNpNXdjbTkwYjNSNWNHVXVYMlpwYm1Gc0lEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQjJZWElnWW5WbUlEMGdRblZtWm1WeUxtTnZibU5oZENoMGFHbHpMbUoxWm1abGNuTXBYRzRnSUhaaGNpQnlJRDBnZEdocGN5NWZhR0Z6YUNoaWRXWXBYRzRnSUhSb2FYTXVZblZtWm1WeWN5QTlJRzUxYkd4Y2JseHVJQ0J5WlhSMWNtNGdjbHh1ZlZ4dVhHNW1kVzVqZEdsdmJpQklZWE5vS0doaGMyZ3BJSHRjYmlBZ1FtRnpaUzVqWVd4c0tIUm9hWE1zSUNka2FXZGxjM1FuS1Z4dVhHNGdJSFJvYVhNdVgyaGhjMmdnUFNCb1lYTm9YRzU5WEc1Y2JtbHVhR1Z5YVhSektFaGhjMmdzSUVKaGMyVXBYRzVjYmtoaGMyZ3VjSEp2ZEc5MGVYQmxMbDkxY0dSaGRHVWdQU0JtZFc1amRHbHZiaUFvWkdGMFlTa2dlMXh1SUNCMGFHbHpMbDlvWVhOb0xuVndaR0YwWlNoa1lYUmhLVnh1ZlZ4dVhHNUlZWE5vTG5CeWIzUnZkSGx3WlM1ZlptbHVZV3dnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUhKbGRIVnliaUIwYUdsekxsOW9ZWE5vTG1ScFoyVnpkQ2dwWEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdZM0psWVhSbFNHRnphQ0FvWVd4bktTQjdYRzRnSUdGc1p5QTlJR0ZzWnk1MGIweHZkMlZ5UTJGelpTZ3BYRzRnSUdsbUlDZ25iV1ExSnlBOVBUMGdZV3huS1NCeVpYUjFjbTRnYm1WM0lFaGhjMmhPYjBOdmJuTjBjblZqZEc5eUtHMWtOU2xjYmlBZ2FXWWdLQ2R5YldReE5qQW5JRDA5UFNCaGJHY2dmSHdnSjNKcGNHVnRaREUyTUNjZ1BUMDlJR0ZzWnlrZ2NtVjBkWEp1SUc1bGR5QklZWE5vVG05RGIyNXpkSEoxWTNSdmNpaHliV1F4TmpBcFhHNWNiaUFnY21WMGRYSnVJRzVsZHlCSVlYTm9LSE5vWVNoaGJHY3BLVnh1ZlZ4dUlsMTkiLCJ2YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gU0hBIChhbGdvcml0aG0pIHtcbiAgYWxnb3JpdGhtID0gYWxnb3JpdGhtLnRvTG93ZXJDYXNlKClcblxuICB2YXIgQWxnb3JpdGhtID0gZXhwb3J0c1thbGdvcml0aG1dXG4gIGlmICghQWxnb3JpdGhtKSB0aHJvdyBuZXcgRXJyb3IoYWxnb3JpdGhtICsgJyBpcyBub3Qgc3VwcG9ydGVkICh3ZSBhY2NlcHQgcHVsbCByZXF1ZXN0cyknKVxuXG4gIHJldHVybiBuZXcgQWxnb3JpdGhtKClcbn1cblxuZXhwb3J0cy5zaGEgPSByZXF1aXJlKCcuL3NoYScpXG5leHBvcnRzLnNoYTEgPSByZXF1aXJlKCcuL3NoYTEnKVxuZXhwb3J0cy5zaGEyMjQgPSByZXF1aXJlKCcuL3NoYTIyNCcpXG5leHBvcnRzLnNoYTI1NiA9IHJlcXVpcmUoJy4vc2hhMjU2JylcbmV4cG9ydHMuc2hhMzg0ID0gcmVxdWlyZSgnLi9zaGEzODQnKVxuZXhwb3J0cy5zaGE1MTIgPSByZXF1aXJlKCcuL3NoYTUxMicpXG4iLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgU0hBNTEyID0gcmVxdWlyZSgnLi9zaGE1MTInKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxuXG52YXIgVyA9IG5ldyBBcnJheSgxNjApXG5cbmZ1bmN0aW9uIFNoYTM4NCAoKSB7XG4gIHRoaXMuaW5pdCgpXG4gIHRoaXMuX3cgPSBXXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDEyOCwgMTEyKVxufVxuXG5pbmhlcml0cyhTaGEzODQsIFNIQTUxMilcblxuU2hhMzg0LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hID0gMHhjYmJiOWQ1ZCB8IDBcbiAgdGhpcy5fYiA9IDB4NjI5YTI5MmEgfCAwXG4gIHRoaXMuX2MgPSAweDkxNTkwMTVhIHwgMFxuICB0aGlzLl9kID0gMHgxNTJmZWNkOCB8IDBcbiAgdGhpcy5fZSA9IDB4NjczMzI2NjcgfCAwXG4gIHRoaXMuX2YgPSAweDhlYjQ0YTg3IHwgMFxuICB0aGlzLl9nID0gMHhkYjBjMmUwZCB8IDBcbiAgdGhpcy5faCA9IDB4NDdiNTQ4MWQgfCAwXG5cbiAgdGhpcy5fYWwgPSAweGMxMDU5ZWQ4IHwgMFxuICB0aGlzLl9ibCA9IDB4MzY3Y2Q1MDcgfCAwXG4gIHRoaXMuX2NsID0gMHgzMDcwZGQxNyB8IDBcbiAgdGhpcy5fZGwgPSAweGY3MGU1OTM5IHwgMFxuICB0aGlzLl9lbCA9IDB4ZmZjMDBiMzEgfCAwXG4gIHRoaXMuX2ZsID0gMHg2ODU4MTUxMSB8IDBcbiAgdGhpcy5fZ2wgPSAweDY0Zjk4ZmE3IHwgMFxuICB0aGlzLl9obCA9IDB4YmVmYTRmYTQgfCAwXG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuU2hhMzg0LnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBuZXcgQnVmZmVyKDQ4KVxuXG4gIGZ1bmN0aW9uIHdyaXRlSW50NjRCRSAoaCwgbCwgb2Zmc2V0KSB7XG4gICAgSC53cml0ZUludDMyQkUoaCwgb2Zmc2V0KVxuICAgIEgud3JpdGVJbnQzMkJFKGwsIG9mZnNldCArIDQpXG4gIH1cblxuICB3cml0ZUludDY0QkUodGhpcy5fYSwgdGhpcy5fYWwsIDApXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9iLCB0aGlzLl9ibCwgOClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2MsIHRoaXMuX2NsLCAxNilcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2QsIHRoaXMuX2RsLCAyNClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2UsIHRoaXMuX2VsLCAzMilcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2YsIHRoaXMuX2ZsLCA0MClcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTM4NFxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlkzSmxZWFJsTFdoaGMyZ3ZibTlrWlY5dGIyUjFiR1Z6TDNOb1lTNXFjeTl6YUdFek9EUXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlHbHVhR1Z5YVhSeklEMGdjbVZ4ZFdseVpTZ25hVzVvWlhKcGRITW5LVnh1ZG1GeUlGTklRVFV4TWlBOUlISmxjWFZwY21Vb0p5NHZjMmhoTlRFeUp5bGNiblpoY2lCSVlYTm9JRDBnY21WeGRXbHlaU2duTGk5b1lYTm9KeWxjYmx4dWRtRnlJRmNnUFNCdVpYY2dRWEp5WVhrb01UWXdLVnh1WEc1bWRXNWpkR2x2YmlCVGFHRXpPRFFnS0NrZ2UxeHVJQ0IwYUdsekxtbHVhWFFvS1Z4dUlDQjBhR2x6TGw5M0lEMGdWMXh1WEc0Z0lFaGhjMmd1WTJGc2JDaDBhR2x6TENBeE1qZ3NJREV4TWlsY2JuMWNibHh1YVc1b1pYSnBkSE1vVTJoaE16ZzBMQ0JUU0VFMU1USXBYRzVjYmxOb1lUTTROQzV3Y205MGIzUjVjR1V1YVc1cGRDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdkR2hwY3k1ZllTQTlJREI0WTJKaVlqbGtOV1FnZkNBd1hHNGdJSFJvYVhNdVgySWdQU0F3ZURZeU9XRXlPVEpoSUh3Z01GeHVJQ0IwYUdsekxsOWpJRDBnTUhnNU1UVTVNREUxWVNCOElEQmNiaUFnZEdocGN5NWZaQ0E5SURCNE1UVXlabVZqWkRnZ2ZDQXdYRzRnSUhSb2FYTXVYMlVnUFNBd2VEWTNNek15TmpZM0lId2dNRnh1SUNCMGFHbHpMbDltSUQwZ01IZzRaV0kwTkdFNE55QjhJREJjYmlBZ2RHaHBjeTVmWnlBOUlEQjRaR0l3WXpKbE1HUWdmQ0F3WEc0Z0lIUm9hWE11WDJnZ1BTQXdlRFEzWWpVME9ERmtJSHdnTUZ4dVhHNGdJSFJvYVhNdVgyRnNJRDBnTUhoak1UQTFPV1ZrT0NCOElEQmNiaUFnZEdocGN5NWZZbXdnUFNBd2VETTJOMk5rTlRBM0lId2dNRnh1SUNCMGFHbHpMbDlqYkNBOUlEQjRNekEzTUdSa01UY2dmQ0F3WEc0Z0lIUm9hWE11WDJSc0lEMGdNSGhtTnpCbE5Ua3pPU0I4SURCY2JpQWdkR2hwY3k1ZlpXd2dQU0F3ZUdabVl6QXdZak14SUh3Z01GeHVJQ0IwYUdsekxsOW1iQ0E5SURCNE5qZzFPREUxTVRFZ2ZDQXdYRzRnSUhSb2FYTXVYMmRzSUQwZ01IZzJOR1k1T0daaE55QjhJREJjYmlBZ2RHaHBjeTVmYUd3Z1BTQXdlR0psWm1FMFptRTBJSHdnTUZ4dVhHNGdJSEpsZEhWeWJpQjBhR2x6WEc1OVhHNWNibE5vWVRNNE5DNXdjbTkwYjNSNWNHVXVYMmhoYzJnZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lIWmhjaUJJSUQwZ2JtVjNJRUoxWm1abGNpZzBPQ2xjYmx4dUlDQm1kVzVqZEdsdmJpQjNjbWwwWlVsdWREWTBRa1VnS0dnc0lHd3NJRzltWm5ObGRDa2dlMXh1SUNBZ0lFZ3VkM0pwZEdWSmJuUXpNa0pGS0dnc0lHOW1abk5sZENsY2JpQWdJQ0JJTG5keWFYUmxTVzUwTXpKQ1JTaHNMQ0J2Wm1aelpYUWdLeUEwS1Z4dUlDQjlYRzVjYmlBZ2QzSnBkR1ZKYm5RMk5FSkZLSFJvYVhNdVgyRXNJSFJvYVhNdVgyRnNMQ0F3S1Z4dUlDQjNjbWwwWlVsdWREWTBRa1VvZEdocGN5NWZZaXdnZEdocGN5NWZZbXdzSURncFhHNGdJSGR5YVhSbFNXNTBOalJDUlNoMGFHbHpMbDlqTENCMGFHbHpMbDlqYkN3Z01UWXBYRzRnSUhkeWFYUmxTVzUwTmpSQ1JTaDBhR2x6TGw5a0xDQjBhR2x6TGw5a2JDd2dNalFwWEc0Z0lIZHlhWFJsU1c1ME5qUkNSU2gwYUdsekxsOWxMQ0IwYUdsekxsOWxiQ3dnTXpJcFhHNGdJSGR5YVhSbFNXNTBOalJDUlNoMGFHbHpMbDltTENCMGFHbHpMbDltYkN3Z05EQXBYRzVjYmlBZ2NtVjBkWEp1SUVoY2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JUYUdFek9EUmNiaUpkZlE9PSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcblxudmFyIEsgPSBbXG4gIDB4NDI4YTJmOTgsIDB4ZDcyOGFlMjIsIDB4NzEzNzQ0OTEsIDB4MjNlZjY1Y2QsXG4gIDB4YjVjMGZiY2YsIDB4ZWM0ZDNiMmYsIDB4ZTliNWRiYTUsIDB4ODE4OWRiYmMsXG4gIDB4Mzk1NmMyNWIsIDB4ZjM0OGI1MzgsIDB4NTlmMTExZjEsIDB4YjYwNWQwMTksXG4gIDB4OTIzZjgyYTQsIDB4YWYxOTRmOWIsIDB4YWIxYzVlZDUsIDB4ZGE2ZDgxMTgsXG4gIDB4ZDgwN2FhOTgsIDB4YTMwMzAyNDIsIDB4MTI4MzViMDEsIDB4NDU3MDZmYmUsXG4gIDB4MjQzMTg1YmUsIDB4NGVlNGIyOGMsIDB4NTUwYzdkYzMsIDB4ZDVmZmI0ZTIsXG4gIDB4NzJiZTVkNzQsIDB4ZjI3Yjg5NmYsIDB4ODBkZWIxZmUsIDB4M2IxNjk2YjEsXG4gIDB4OWJkYzA2YTcsIDB4MjVjNzEyMzUsIDB4YzE5YmYxNzQsIDB4Y2Y2OTI2OTQsXG4gIDB4ZTQ5YjY5YzEsIDB4OWVmMTRhZDIsIDB4ZWZiZTQ3ODYsIDB4Mzg0ZjI1ZTMsXG4gIDB4MGZjMTlkYzYsIDB4OGI4Y2Q1YjUsIDB4MjQwY2ExY2MsIDB4NzdhYzljNjUsXG4gIDB4MmRlOTJjNmYsIDB4NTkyYjAyNzUsIDB4NGE3NDg0YWEsIDB4NmVhNmU0ODMsXG4gIDB4NWNiMGE5ZGMsIDB4YmQ0MWZiZDQsIDB4NzZmOTg4ZGEsIDB4ODMxMTUzYjUsXG4gIDB4OTgzZTUxNTIsIDB4ZWU2NmRmYWIsIDB4YTgzMWM2NmQsIDB4MmRiNDMyMTAsXG4gIDB4YjAwMzI3YzgsIDB4OThmYjIxM2YsIDB4YmY1OTdmYzcsIDB4YmVlZjBlZTQsXG4gIDB4YzZlMDBiZjMsIDB4M2RhODhmYzIsIDB4ZDVhNzkxNDcsIDB4OTMwYWE3MjUsXG4gIDB4MDZjYTYzNTEsIDB4ZTAwMzgyNmYsIDB4MTQyOTI5NjcsIDB4MGEwZTZlNzAsXG4gIDB4MjdiNzBhODUsIDB4NDZkMjJmZmMsIDB4MmUxYjIxMzgsIDB4NWMyNmM5MjYsXG4gIDB4NGQyYzZkZmMsIDB4NWFjNDJhZWQsIDB4NTMzODBkMTMsIDB4OWQ5NWIzZGYsXG4gIDB4NjUwYTczNTQsIDB4OGJhZjYzZGUsIDB4NzY2YTBhYmIsIDB4M2M3N2IyYTgsXG4gIDB4ODFjMmM5MmUsIDB4NDdlZGFlZTYsIDB4OTI3MjJjODUsIDB4MTQ4MjM1M2IsXG4gIDB4YTJiZmU4YTEsIDB4NGNmMTAzNjQsIDB4YTgxYTY2NGIsIDB4YmM0MjMwMDEsXG4gIDB4YzI0YjhiNzAsIDB4ZDBmODk3OTEsIDB4Yzc2YzUxYTMsIDB4MDY1NGJlMzAsXG4gIDB4ZDE5MmU4MTksIDB4ZDZlZjUyMTgsIDB4ZDY5OTA2MjQsIDB4NTU2NWE5MTAsXG4gIDB4ZjQwZTM1ODUsIDB4NTc3MTIwMmEsIDB4MTA2YWEwNzAsIDB4MzJiYmQxYjgsXG4gIDB4MTlhNGMxMTYsIDB4YjhkMmQwYzgsIDB4MWUzNzZjMDgsIDB4NTE0MWFiNTMsXG4gIDB4Mjc0ODc3NGMsIDB4ZGY4ZWViOTksIDB4MzRiMGJjYjUsIDB4ZTE5YjQ4YTgsXG4gIDB4MzkxYzBjYjMsIDB4YzVjOTVhNjMsIDB4NGVkOGFhNGEsIDB4ZTM0MThhY2IsXG4gIDB4NWI5Y2NhNGYsIDB4Nzc2M2UzNzMsIDB4NjgyZTZmZjMsIDB4ZDZiMmI4YTMsXG4gIDB4NzQ4ZjgyZWUsIDB4NWRlZmIyZmMsIDB4NzhhNTYzNmYsIDB4NDMxNzJmNjAsXG4gIDB4ODRjODc4MTQsIDB4YTFmMGFiNzIsIDB4OGNjNzAyMDgsIDB4MWE2NDM5ZWMsXG4gIDB4OTBiZWZmZmEsIDB4MjM2MzFlMjgsIDB4YTQ1MDZjZWIsIDB4ZGU4MmJkZTksXG4gIDB4YmVmOWEzZjcsIDB4YjJjNjc5MTUsIDB4YzY3MTc4ZjIsIDB4ZTM3MjUzMmIsXG4gIDB4Y2EyNzNlY2UsIDB4ZWEyNjYxOWMsIDB4ZDE4NmI4YzcsIDB4MjFjMGMyMDcsXG4gIDB4ZWFkYTdkZDYsIDB4Y2RlMGViMWUsIDB4ZjU3ZDRmN2YsIDB4ZWU2ZWQxNzgsXG4gIDB4MDZmMDY3YWEsIDB4NzIxNzZmYmEsIDB4MGE2MzdkYzUsIDB4YTJjODk4YTYsXG4gIDB4MTEzZjk4MDQsIDB4YmVmOTBkYWUsIDB4MWI3MTBiMzUsIDB4MTMxYzQ3MWIsXG4gIDB4MjhkYjc3ZjUsIDB4MjMwNDdkODQsIDB4MzJjYWFiN2IsIDB4NDBjNzI0OTMsXG4gIDB4M2M5ZWJlMGEsIDB4MTVjOWJlYmMsIDB4NDMxZDY3YzQsIDB4OWMxMDBkNGMsXG4gIDB4NGNjNWQ0YmUsIDB4Y2IzZTQyYjYsIDB4NTk3ZjI5OWMsIDB4ZmM2NTdlMmEsXG4gIDB4NWZjYjZmYWIsIDB4M2FkNmZhZWMsIDB4NmM0NDE5OGMsIDB4NGE0NzU4MTdcbl1cblxudmFyIFcgPSBuZXcgQXJyYXkoMTYwKVxuXG5mdW5jdGlvbiBTaGE1MTIgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCAxMjgsIDExMilcbn1cblxuaW5oZXJpdHMoU2hhNTEyLCBIYXNoKVxuXG5TaGE1MTIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweDZhMDllNjY3IHwgMFxuICB0aGlzLl9iID0gMHhiYjY3YWU4NSB8IDBcbiAgdGhpcy5fYyA9IDB4M2M2ZWYzNzIgfCAwXG4gIHRoaXMuX2QgPSAweGE1NGZmNTNhIHwgMFxuICB0aGlzLl9lID0gMHg1MTBlNTI3ZiB8IDBcbiAgdGhpcy5fZiA9IDB4OWIwNTY4OGMgfCAwXG4gIHRoaXMuX2cgPSAweDFmODNkOWFiIHwgMFxuICB0aGlzLl9oID0gMHg1YmUwY2QxOSB8IDBcblxuICB0aGlzLl9hbCA9IDB4ZjNiY2M5MDggfCAwXG4gIHRoaXMuX2JsID0gMHg4NGNhYTczYiB8IDBcbiAgdGhpcy5fY2wgPSAweGZlOTRmODJiIHwgMFxuICB0aGlzLl9kbCA9IDB4NWYxZDM2ZjEgfCAwXG4gIHRoaXMuX2VsID0gMHhhZGU2ODJkMSB8IDBcbiAgdGhpcy5fZmwgPSAweDJiM2U2YzFmIHwgMFxuICB0aGlzLl9nbCA9IDB4ZmI0MWJkNmIgfCAwXG4gIHRoaXMuX2hsID0gMHgxMzdlMjE3OSB8IDBcblxuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiBDaCAoeCwgeSwgeikge1xuICByZXR1cm4geiBeICh4ICYgKHkgXiB6KSlcbn1cblxuZnVuY3Rpb24gTWFqICh4LCB5LCB6KSB7XG4gIHJldHVybiAoeCAmIHkpIHwgKHogJiAoeCB8IHkpKVxufVxuXG5mdW5jdGlvbiBTaWdtYTAgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMjggfCB4bCA8PCA0KSBeICh4bCA+Pj4gMiB8IHggPDwgMzApIF4gKHhsID4+PiA3IHwgeCA8PCAyNSlcbn1cblxuZnVuY3Rpb24gU2lnbWExICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDE0IHwgeGwgPDwgMTgpIF4gKHggPj4+IDE4IHwgeGwgPDwgMTQpIF4gKHhsID4+PiA5IHwgeCA8PCAyMylcbn1cblxuZnVuY3Rpb24gR2FtbWEwICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDEgfCB4bCA8PCAzMSkgXiAoeCA+Pj4gOCB8IHhsIDw8IDI0KSBeICh4ID4+PiA3KVxufVxuXG5mdW5jdGlvbiBHYW1tYTBsICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDEgfCB4bCA8PCAzMSkgXiAoeCA+Pj4gOCB8IHhsIDw8IDI0KSBeICh4ID4+PiA3IHwgeGwgPDwgMjUpXG59XG5cbmZ1bmN0aW9uIEdhbW1hMSAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxOSB8IHhsIDw8IDEzKSBeICh4bCA+Pj4gMjkgfCB4IDw8IDMpIF4gKHggPj4+IDYpXG59XG5cbmZ1bmN0aW9uIEdhbW1hMWwgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMTkgfCB4bCA8PCAxMykgXiAoeGwgPj4+IDI5IHwgeCA8PCAzKSBeICh4ID4+PiA2IHwgeGwgPDwgMjYpXG59XG5cblNoYTUxMi5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhID0gdGhpcy5fYSB8IDBcbiAgdmFyIGIgPSB0aGlzLl9iIHwgMFxuICB2YXIgYyA9IHRoaXMuX2MgfCAwXG4gIHZhciBkID0gdGhpcy5fZCB8IDBcbiAgdmFyIGUgPSB0aGlzLl9lIHwgMFxuICB2YXIgZiA9IHRoaXMuX2YgfCAwXG4gIHZhciBnID0gdGhpcy5fZyB8IDBcbiAgdmFyIGggPSB0aGlzLl9oIHwgMFxuXG4gIHZhciBhbCA9IHRoaXMuX2FsIHwgMFxuICB2YXIgYmwgPSB0aGlzLl9ibCB8IDBcbiAgdmFyIGNsID0gdGhpcy5fY2wgfCAwXG4gIHZhciBkbCA9IHRoaXMuX2RsIHwgMFxuICB2YXIgZWwgPSB0aGlzLl9lbCB8IDBcbiAgdmFyIGZsID0gdGhpcy5fZmwgfCAwXG4gIHZhciBnbCA9IHRoaXMuX2dsIHwgMFxuICB2YXIgaGwgPSB0aGlzLl9obCB8IDBcblxuICB2YXIgaSA9IDBcbiAgdmFyIGogPSAwXG4gIHZhciBXaSwgV2lsXG4gIGZ1bmN0aW9uIGNhbGNXICgpIHtcbiAgICB2YXIgeCA9IFdbaiAtIDE1ICogMl1cbiAgICB2YXIgeGwgPSBXW2ogLSAxNSAqIDIgKyAxXVxuICAgIHZhciBnYW1tYTAgPSBHYW1tYTAoeCwgeGwpXG4gICAgdmFyIGdhbW1hMGwgPSBHYW1tYTBsKHhsLCB4KVxuXG4gICAgeCA9IFdbaiAtIDIgKiAyXVxuICAgIHhsID0gV1tqIC0gMiAqIDIgKyAxXVxuICAgIHZhciBnYW1tYTEgPSBHYW1tYTEoeCwgeGwpXG4gICAgdmFyIGdhbW1hMWwgPSBHYW1tYTFsKHhsLCB4KVxuXG4gICAgLy8gV1tpXSA9IGdhbW1hMCArIFdbaSAtIDddICsgZ2FtbWExICsgV1tpIC0gMTZdXG4gICAgdmFyIFdpNyA9IFdbaiAtIDcgKiAyXVxuICAgIHZhciBXaTdsID0gV1tqIC0gNyAqIDIgKyAxXVxuXG4gICAgdmFyIFdpMTYgPSBXW2ogLSAxNiAqIDJdXG4gICAgdmFyIFdpMTZsID0gV1tqIC0gMTYgKiAyICsgMV1cblxuICAgIFdpbCA9IGdhbW1hMGwgKyBXaTdsXG4gICAgV2kgPSBnYW1tYTAgKyBXaTcgKyAoKFdpbCA+Pj4gMCkgPCAoZ2FtbWEwbCA+Pj4gMCkgPyAxIDogMClcbiAgICBXaWwgPSBXaWwgKyBnYW1tYTFsXG4gICAgV2kgPSBXaSArIGdhbW1hMSArICgoV2lsID4+PiAwKSA8IChnYW1tYTFsID4+PiAwKSA/IDEgOiAwKVxuICAgIFdpbCA9IFdpbCArIFdpMTZsXG4gICAgV2kgPSBXaSArIFdpMTYgKyAoKFdpbCA+Pj4gMCkgPCAoV2kxNmwgPj4+IDApID8gMSA6IDApXG4gIH1cblxuICBmdW5jdGlvbiBsb29wICgpIHtcbiAgICBXW2pdID0gV2lcbiAgICBXW2ogKyAxXSA9IFdpbFxuXG4gICAgdmFyIG1haiA9IE1haihhLCBiLCBjKVxuICAgIHZhciBtYWpsID0gTWFqKGFsLCBibCwgY2wpXG5cbiAgICB2YXIgc2lnbWEwaCA9IFNpZ21hMChhLCBhbClcbiAgICB2YXIgc2lnbWEwbCA9IFNpZ21hMChhbCwgYSlcbiAgICB2YXIgc2lnbWExaCA9IFNpZ21hMShlLCBlbClcbiAgICB2YXIgc2lnbWExbCA9IFNpZ21hMShlbCwgZSlcblxuICAgIC8vIHQxID0gaCArIHNpZ21hMSArIGNoICsgS1tpXSArIFdbaV1cbiAgICB2YXIgS2kgPSBLW2pdXG4gICAgdmFyIEtpbCA9IEtbaiArIDFdXG5cbiAgICB2YXIgY2ggPSBDaChlLCBmLCBnKVxuICAgIHZhciBjaGwgPSBDaChlbCwgZmwsIGdsKVxuXG4gICAgdmFyIHQxbCA9IGhsICsgc2lnbWExbFxuICAgIHZhciB0MSA9IGggKyBzaWdtYTFoICsgKCh0MWwgPj4+IDApIDwgKGhsID4+PiAwKSA/IDEgOiAwKVxuICAgIHQxbCA9IHQxbCArIGNobFxuICAgIHQxID0gdDEgKyBjaCArICgodDFsID4+PiAwKSA8IChjaGwgPj4+IDApID8gMSA6IDApXG4gICAgdDFsID0gdDFsICsgS2lsXG4gICAgdDEgPSB0MSArIEtpICsgKCh0MWwgPj4+IDApIDwgKEtpbCA+Pj4gMCkgPyAxIDogMClcbiAgICB0MWwgPSB0MWwgKyBXaWxcbiAgICB0MSA9IHQxICsgV2kgKyAoKHQxbCA+Pj4gMCkgPCAoV2lsID4+PiAwKSA/IDEgOiAwKVxuXG4gICAgLy8gdDIgPSBzaWdtYTAgKyBtYWpcbiAgICB2YXIgdDJsID0gc2lnbWEwbCArIG1hamxcbiAgICB2YXIgdDIgPSBzaWdtYTBoICsgbWFqICsgKCh0MmwgPj4+IDApIDwgKHNpZ21hMGwgPj4+IDApID8gMSA6IDApXG5cbiAgICBoID0gZ1xuICAgIGhsID0gZ2xcbiAgICBnID0gZlxuICAgIGdsID0gZmxcbiAgICBmID0gZVxuICAgIGZsID0gZWxcbiAgICBlbCA9IChkbCArIHQxbCkgfCAwXG4gICAgZSA9IChkICsgdDEgKyAoKGVsID4+PiAwKSA8IChkbCA+Pj4gMCkgPyAxIDogMCkpIHwgMFxuICAgIGQgPSBjXG4gICAgZGwgPSBjbFxuICAgIGMgPSBiXG4gICAgY2wgPSBibFxuICAgIGIgPSBhXG4gICAgYmwgPSBhbFxuICAgIGFsID0gKHQxbCArIHQybCkgfCAwXG4gICAgYSA9ICh0MSArIHQyICsgKChhbCA+Pj4gMCkgPCAodDFsID4+PiAwKSA/IDEgOiAwKSkgfCAwXG5cbiAgICBpKytcbiAgICBqICs9IDJcbiAgfVxuXG4gIHdoaWxlIChpIDwgMTYpIHtcbiAgICBXaSA9IE0ucmVhZEludDMyQkUoaiAqIDQpXG4gICAgV2lsID0gTS5yZWFkSW50MzJCRShqICogNCArIDQpXG5cbiAgICBsb29wKClcbiAgfVxuXG4gIHdoaWxlIChpIDwgODApIHtcbiAgICBjYWxjVygpXG4gICAgbG9vcCgpXG4gIH1cblxuICB0aGlzLl9hbCA9ICh0aGlzLl9hbCArIGFsKSB8IDBcbiAgdGhpcy5fYmwgPSAodGhpcy5fYmwgKyBibCkgfCAwXG4gIHRoaXMuX2NsID0gKHRoaXMuX2NsICsgY2wpIHwgMFxuICB0aGlzLl9kbCA9ICh0aGlzLl9kbCArIGRsKSB8IDBcbiAgdGhpcy5fZWwgPSAodGhpcy5fZWwgKyBlbCkgfCAwXG4gIHRoaXMuX2ZsID0gKHRoaXMuX2ZsICsgZmwpIHwgMFxuICB0aGlzLl9nbCA9ICh0aGlzLl9nbCArIGdsKSB8IDBcbiAgdGhpcy5faGwgPSAodGhpcy5faGwgKyBobCkgfCAwXG5cbiAgdGhpcy5fYSA9ICh0aGlzLl9hICsgYSArICgodGhpcy5fYWwgPj4+IDApIDwgKGFsID4+PiAwKSA/IDEgOiAwKSkgfCAwXG4gIHRoaXMuX2IgPSAodGhpcy5fYiArIGIgKyAoKHRoaXMuX2JsID4+PiAwKSA8IChibCA+Pj4gMCkgPyAxIDogMCkpIHwgMFxuICB0aGlzLl9jID0gKHRoaXMuX2MgKyBjICsgKCh0aGlzLl9jbCA+Pj4gMCkgPCAoY2wgPj4+IDApID8gMSA6IDApKSB8IDBcbiAgdGhpcy5fZCA9ICh0aGlzLl9kICsgZCArICgodGhpcy5fZGwgPj4+IDApIDwgKGRsID4+PiAwKSA/IDEgOiAwKSkgfCAwXG4gIHRoaXMuX2UgPSAodGhpcy5fZSArIGUgKyAoKHRoaXMuX2VsID4+PiAwKSA8IChlbCA+Pj4gMCkgPyAxIDogMCkpIHwgMFxuICB0aGlzLl9mID0gKHRoaXMuX2YgKyBmICsgKCh0aGlzLl9mbCA+Pj4gMCkgPCAoZmwgPj4+IDApID8gMSA6IDApKSB8IDBcbiAgdGhpcy5fZyA9ICh0aGlzLl9nICsgZyArICgodGhpcy5fZ2wgPj4+IDApIDwgKGdsID4+PiAwKSA/IDEgOiAwKSkgfCAwXG4gIHRoaXMuX2ggPSAodGhpcy5faCArIGggKyAoKHRoaXMuX2hsID4+PiAwKSA8IChobCA+Pj4gMCkgPyAxIDogMCkpIHwgMFxufVxuXG5TaGE1MTIucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IG5ldyBCdWZmZXIoNjQpXG5cbiAgZnVuY3Rpb24gd3JpdGVJbnQ2NEJFIChoLCBsLCBvZmZzZXQpIHtcbiAgICBILndyaXRlSW50MzJCRShoLCBvZmZzZXQpXG4gICAgSC53cml0ZUludDMyQkUobCwgb2Zmc2V0ICsgNClcbiAgfVxuXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9hLCB0aGlzLl9hbCwgMClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2IsIHRoaXMuX2JsLCA4KVxuICB3cml0ZUludDY0QkUodGhpcy5fYywgdGhpcy5fY2wsIDE2KVxuICB3cml0ZUludDY0QkUodGhpcy5fZCwgdGhpcy5fZGwsIDI0KVxuICB3cml0ZUludDY0QkUodGhpcy5fZSwgdGhpcy5fZWwsIDMyKVxuICB3cml0ZUludDY0QkUodGhpcy5fZiwgdGhpcy5fZmwsIDQwKVxuICB3cml0ZUludDY0QkUodGhpcy5fZywgdGhpcy5fZ2wsIDQ4KVxuICB3cml0ZUludDY0QkUodGhpcy5faCwgdGhpcy5faGwsIDU2KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhNTEyXG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WTNKbFlYUmxMV2hoYzJndmJtOWtaVjl0YjJSMWJHVnpMM05vWVM1cWN5OXphR0UxTVRJdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWRtRnlJR2x1YUdWeWFYUnpJRDBnY21WeGRXbHlaU2duYVc1b1pYSnBkSE1uS1Z4dWRtRnlJRWhoYzJnZ1BTQnlaWEYxYVhKbEtDY3VMMmhoYzJnbktWeHVYRzUyWVhJZ1N5QTlJRnRjYmlBZ01IZzBNamhoTW1ZNU9Dd2dNSGhrTnpJNFlXVXlNaXdnTUhnM01UTTNORFE1TVN3Z01IZ3lNMlZtTmpWalpDeGNiaUFnTUhoaU5XTXdabUpqWml3Z01IaGxZelJrTTJJeVppd2dNSGhsT1dJMVpHSmhOU3dnTUhnNE1UZzVaR0ppWXl4Y2JpQWdNSGd6T1RVMll6STFZaXdnTUhobU16UTRZalV6T0N3Z01IZzFPV1l4TVRGbU1Td2dNSGhpTmpBMVpEQXhPU3hjYmlBZ01IZzVNak5tT0RKaE5Dd2dNSGhoWmpFNU5HWTVZaXdnTUhoaFlqRmpOV1ZrTlN3Z01IaGtZVFprT0RFeE9DeGNiaUFnTUhoa09EQTNZV0U1T0N3Z01IaGhNekF6TURJME1pd2dNSGd4TWpnek5XSXdNU3dnTUhnME5UY3dObVppWlN4Y2JpQWdNSGd5TkRNeE9EVmlaU3dnTUhnMFpXVTBZakk0WXl3Z01IZzFOVEJqTjJSak15d2dNSGhrTldabVlqUmxNaXhjYmlBZ01IZzNNbUpsTldRM05Dd2dNSGhtTWpkaU9EazJaaXdnTUhnNE1HUmxZakZtWlN3Z01IZ3pZakUyT1RaaU1TeGNiaUFnTUhnNVltUmpNRFpoTnl3Z01IZ3lOV00zTVRJek5Td2dNSGhqTVRsaVpqRTNOQ3dnTUhoalpqWTVNalk1TkN4Y2JpQWdNSGhsTkRsaU5qbGpNU3dnTUhnNVpXWXhOR0ZrTWl3Z01IaGxabUpsTkRjNE5pd2dNSGd6T0RSbU1qVmxNeXhjYmlBZ01IZ3dabU14T1dSak5pd2dNSGc0WWpoalpEVmlOU3dnTUhneU5EQmpZVEZqWXl3Z01IZzNOMkZqT1dNMk5TeGNiaUFnTUhneVpHVTVNbU0yWml3Z01IZzFPVEppTURJM05Td2dNSGcwWVRjME9EUmhZU3dnTUhnMlpXRTJaVFE0TXl4Y2JpQWdNSGcxWTJJd1lUbGtZeXdnTUhoaVpEUXhabUprTkN3Z01IZzNObVk1T0Roa1lTd2dNSGc0TXpFeE5UTmlOU3hjYmlBZ01IZzVPRE5sTlRFMU1pd2dNSGhsWlRZMlpHWmhZaXdnTUhoaE9ETXhZelkyWkN3Z01IZ3laR0kwTXpJeE1DeGNiaUFnTUhoaU1EQXpNamRqT0N3Z01IZzVPR1ppTWpFelppd2dNSGhpWmpVNU4yWmpOeXdnTUhoaVpXVm1NR1ZsTkN4Y2JpQWdNSGhqTm1Vd01HSm1NeXdnTUhnelpHRTRPR1pqTWl3Z01IaGtOV0UzT1RFME55d2dNSGc1TXpCaFlUY3lOU3hjYmlBZ01IZ3dObU5oTmpNMU1Td2dNSGhsTURBek9ESTJaaXdnTUhneE5ESTVNamsyTnl3Z01IZ3dZVEJsTm1VM01DeGNiaUFnTUhneU4ySTNNR0U0TlN3Z01IZzBObVF5TW1abVl5d2dNSGd5WlRGaU1qRXpPQ3dnTUhnMVl6STJZemt5Tml4Y2JpQWdNSGcwWkRKak5tUm1ZeXdnTUhnMVlXTTBNbUZsWkN3Z01IZzFNek00TUdReE15d2dNSGc1WkRrMVlqTmtaaXhjYmlBZ01IZzJOVEJoTnpNMU5Dd2dNSGc0WW1GbU5qTmtaU3dnTUhnM05qWmhNR0ZpWWl3Z01IZ3pZemMzWWpKaE9DeGNiaUFnTUhnNE1XTXlZemt5WlN3Z01IZzBOMlZrWVdWbE5pd2dNSGc1TWpjeU1tTTROU3dnTUhneE5EZ3lNelV6WWl4Y2JpQWdNSGhoTW1KbVpUaGhNU3dnTUhnMFkyWXhNRE0yTkN3Z01IaGhPREZoTmpZMFlpd2dNSGhpWXpReU16QXdNU3hjYmlBZ01IaGpNalJpT0dJM01Dd2dNSGhrTUdZNE9UYzVNU3dnTUhoak56WmpOVEZoTXl3Z01IZ3dOalUwWW1Vek1DeGNiaUFnTUhoa01Ua3laVGd4T1N3Z01IaGtObVZtTlRJeE9Dd2dNSGhrTmprNU1EWXlOQ3dnTUhnMU5UWTFZVGt4TUN4Y2JpQWdNSGhtTkRCbE16VTROU3dnTUhnMU56Y3hNakF5WVN3Z01IZ3hNRFpoWVRBM01Dd2dNSGd6TW1KaVpERmlPQ3hjYmlBZ01IZ3hPV0UwWXpFeE5pd2dNSGhpT0dReVpEQmpPQ3dnTUhneFpUTTNObU13T0N3Z01IZzFNVFF4WVdJMU15eGNiaUFnTUhneU56UTROemMwWXl3Z01IaGtaamhsWldJNU9Td2dNSGd6TkdJd1ltTmlOU3dnTUhobE1UbGlORGhoT0N4Y2JpQWdNSGd6T1RGak1HTmlNeXdnTUhoak5XTTVOV0UyTXl3Z01IZzBaV1E0WVdFMFlTd2dNSGhsTXpReE9HRmpZaXhjYmlBZ01IZzFZamxqWTJFMFppd2dNSGczTnpZelpUTTNNeXdnTUhnMk9ESmxObVptTXl3Z01IaGtObUl5WWpoaE15eGNiaUFnTUhnM05EaG1PREpsWlN3Z01IZzFaR1ZtWWpKbVl5d2dNSGczT0dFMU5qTTJaaXdnTUhnME16RTNNbVkyTUN4Y2JpQWdNSGc0TkdNNE56Z3hOQ3dnTUhoaE1XWXdZV0kzTWl3Z01IZzRZMk0zTURJd09Dd2dNSGd4WVRZME16bGxZeXhjYmlBZ01IZzVNR0psWm1abVlTd2dNSGd5TXpZek1XVXlPQ3dnTUhoaE5EVXdObU5sWWl3Z01IaGtaVGd5WW1SbE9TeGNiaUFnTUhoaVpXWTVZVE5tTnl3Z01IaGlNbU0yTnpreE5Td2dNSGhqTmpjeE56aG1NaXdnTUhobE16Y3lOVE15WWl4Y2JpQWdNSGhqWVRJM00yVmpaU3dnTUhobFlUSTJOakU1WXl3Z01IaGtNVGcyWWpoak55d2dNSGd5TVdNd1l6SXdOeXhjYmlBZ01IaGxZV1JoTjJSa05pd2dNSGhqWkdVd1pXSXhaU3dnTUhobU5UZGtOR1kzWml3Z01IaGxaVFpsWkRFM09DeGNiaUFnTUhnd05tWXdOamRoWVN3Z01IZzNNakUzTm1aaVlTd2dNSGd3WVRZek4yUmpOU3dnTUhoaE1tTTRPVGhoTml4Y2JpQWdNSGd4TVRObU9UZ3dOQ3dnTUhoaVpXWTVNR1JoWlN3Z01IZ3hZamN4TUdJek5Td2dNSGd4TXpGak5EY3hZaXhjYmlBZ01IZ3lPR1JpTnpkbU5Td2dNSGd5TXpBME4yUTROQ3dnTUhnek1tTmhZV0kzWWl3Z01IZzBNR00zTWpRNU15eGNiaUFnTUhnell6bGxZbVV3WVN3Z01IZ3hOV001WW1WaVl5d2dNSGcwTXpGa05qZGpOQ3dnTUhnNVl6RXdNR1EwWXl4Y2JpQWdNSGcwWTJNMVpEUmlaU3dnTUhoallqTmxOREppTml3Z01IZzFPVGRtTWprNVl5d2dNSGhtWXpZMU4yVXlZU3hjYmlBZ01IZzFabU5pTm1aaFlpd2dNSGd6WVdRMlptRmxZeXdnTUhnMll6UTBNVGs0WXl3Z01IZzBZVFEzTlRneE4xeHVYVnh1WEc1MllYSWdWeUE5SUc1bGR5QkJjbkpoZVNneE5qQXBYRzVjYm1aMWJtTjBhVzl1SUZOb1lUVXhNaUFvS1NCN1hHNGdJSFJvYVhNdWFXNXBkQ2dwWEc0Z0lIUm9hWE11WDNjZ1BTQlhYRzVjYmlBZ1NHRnphQzVqWVd4c0tIUm9hWE1zSURFeU9Dd2dNVEV5S1Z4dWZWeHVYRzVwYm1obGNtbDBjeWhUYUdFMU1USXNJRWhoYzJncFhHNWNibE5vWVRVeE1pNXdjbTkwYjNSNWNHVXVhVzVwZENBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ2RHaHBjeTVmWVNBOUlEQjRObUV3T1dVMk5qY2dmQ0F3WEc0Z0lIUm9hWE11WDJJZ1BTQXdlR0ppTmpkaFpUZzFJSHdnTUZ4dUlDQjBhR2x6TGw5aklEMGdNSGd6WXpabFpqTTNNaUI4SURCY2JpQWdkR2hwY3k1ZlpDQTlJREI0WVRVMFptWTFNMkVnZkNBd1hHNGdJSFJvYVhNdVgyVWdQU0F3ZURVeE1HVTFNamRtSUh3Z01GeHVJQ0IwYUdsekxsOW1JRDBnTUhnNVlqQTFOamc0WXlCOElEQmNiaUFnZEdocGN5NWZaeUE5SURCNE1XWTRNMlE1WVdJZ2ZDQXdYRzRnSUhSb2FYTXVYMmdnUFNBd2VEVmlaVEJqWkRFNUlId2dNRnh1WEc0Z0lIUm9hWE11WDJGc0lEMGdNSGhtTTJKall6a3dPQ0I4SURCY2JpQWdkR2hwY3k1Zlltd2dQU0F3ZURnMFkyRmhOek5pSUh3Z01GeHVJQ0IwYUdsekxsOWpiQ0E5SURCNFptVTVOR1k0TW1JZ2ZDQXdYRzRnSUhSb2FYTXVYMlJzSUQwZ01IZzFaakZrTXpabU1TQjhJREJjYmlBZ2RHaHBjeTVmWld3Z1BTQXdlR0ZrWlRZNE1tUXhJSHdnTUZ4dUlDQjBhR2x6TGw5bWJDQTlJREI0TW1JelpUWmpNV1lnZkNBd1hHNGdJSFJvYVhNdVgyZHNJRDBnTUhobVlqUXhZbVEyWWlCOElEQmNiaUFnZEdocGN5NWZhR3dnUFNBd2VERXpOMlV5TVRjNUlId2dNRnh1WEc0Z0lISmxkSFZ5YmlCMGFHbHpYRzU5WEc1Y2JtWjFibU4wYVc5dUlFTm9JQ2g0TENCNUxDQjZLU0I3WEc0Z0lISmxkSFZ5YmlCNklGNGdLSGdnSmlBb2VTQmVJSG9wS1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJOWVdvZ0tIZ3NJSGtzSUhvcElIdGNiaUFnY21WMGRYSnVJQ2g0SUNZZ2VTa2dmQ0FvZWlBbUlDaDRJSHdnZVNrcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUZOcFoyMWhNQ0FvZUN3Z2VHd3BJSHRjYmlBZ2NtVjBkWEp1SUNoNElENCtQaUF5T0NCOElIaHNJRHc4SURRcElGNGdLSGhzSUQ0K1BpQXlJSHdnZUNBOFBDQXpNQ2tnWGlBb2VHd2dQajQrSURjZ2ZDQjRJRHc4SURJMUtWeHVmVnh1WEc1bWRXNWpkR2x2YmlCVGFXZHRZVEVnS0hnc0lIaHNLU0I3WEc0Z0lISmxkSFZ5YmlBb2VDQStQajRnTVRRZ2ZDQjRiQ0E4UENBeE9Da2dYaUFvZUNBK1BqNGdNVGdnZkNCNGJDQThQQ0F4TkNrZ1hpQW9lR3dnUGo0K0lEa2dmQ0I0SUR3OElESXpLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQkhZVzF0WVRBZ0tIZ3NJSGhzS1NCN1hHNGdJSEpsZEhWeWJpQW9lQ0ErUGo0Z01TQjhJSGhzSUR3OElETXhLU0JlSUNoNElENCtQaUE0SUh3Z2VHd2dQRHdnTWpRcElGNGdLSGdnUGo0K0lEY3BYRzU5WEc1Y2JtWjFibU4wYVc5dUlFZGhiVzFoTUd3Z0tIZ3NJSGhzS1NCN1hHNGdJSEpsZEhWeWJpQW9lQ0ErUGo0Z01TQjhJSGhzSUR3OElETXhLU0JlSUNoNElENCtQaUE0SUh3Z2VHd2dQRHdnTWpRcElGNGdLSGdnUGo0K0lEY2dmQ0I0YkNBOFBDQXlOU2xjYm4xY2JseHVablZ1WTNScGIyNGdSMkZ0YldFeElDaDRMQ0I0YkNrZ2UxeHVJQ0J5WlhSMWNtNGdLSGdnUGo0K0lERTVJSHdnZUd3Z1BEd2dNVE1wSUY0Z0tIaHNJRDQrUGlBeU9TQjhJSGdnUER3Z015a2dYaUFvZUNBK1BqNGdOaWxjYm4xY2JseHVablZ1WTNScGIyNGdSMkZ0YldFeGJDQW9lQ3dnZUd3cElIdGNiaUFnY21WMGRYSnVJQ2g0SUQ0K1BpQXhPU0I4SUhoc0lEdzhJREV6S1NCZUlDaDRiQ0ErUGo0Z01qa2dmQ0I0SUR3OElETXBJRjRnS0hnZ1BqNCtJRFlnZkNCNGJDQThQQ0F5TmlsY2JuMWNibHh1VTJoaE5URXlMbkJ5YjNSdmRIbHdaUzVmZFhCa1lYUmxJRDBnWm5WdVkzUnBiMjRnS0UwcElIdGNiaUFnZG1GeUlGY2dQU0IwYUdsekxsOTNYRzVjYmlBZ2RtRnlJR0VnUFNCMGFHbHpMbDloSUh3Z01GeHVJQ0IyWVhJZ1lpQTlJSFJvYVhNdVgySWdmQ0F3WEc0Z0lIWmhjaUJqSUQwZ2RHaHBjeTVmWXlCOElEQmNiaUFnZG1GeUlHUWdQU0IwYUdsekxsOWtJSHdnTUZ4dUlDQjJZWElnWlNBOUlIUm9hWE11WDJVZ2ZDQXdYRzRnSUhaaGNpQm1JRDBnZEdocGN5NWZaaUI4SURCY2JpQWdkbUZ5SUdjZ1BTQjBhR2x6TGw5bklId2dNRnh1SUNCMllYSWdhQ0E5SUhSb2FYTXVYMmdnZkNBd1hHNWNiaUFnZG1GeUlHRnNJRDBnZEdocGN5NWZZV3dnZkNBd1hHNGdJSFpoY2lCaWJDQTlJSFJvYVhNdVgySnNJSHdnTUZ4dUlDQjJZWElnWTJ3Z1BTQjBhR2x6TGw5amJDQjhJREJjYmlBZ2RtRnlJR1JzSUQwZ2RHaHBjeTVmWkd3Z2ZDQXdYRzRnSUhaaGNpQmxiQ0E5SUhSb2FYTXVYMlZzSUh3Z01GeHVJQ0IyWVhJZ1ptd2dQU0IwYUdsekxsOW1iQ0I4SURCY2JpQWdkbUZ5SUdkc0lEMGdkR2hwY3k1Zloyd2dmQ0F3WEc0Z0lIWmhjaUJvYkNBOUlIUm9hWE11WDJoc0lId2dNRnh1WEc0Z0lIWmhjaUJwSUQwZ01GeHVJQ0IyWVhJZ2FpQTlJREJjYmlBZ2RtRnlJRmRwTENCWGFXeGNiaUFnWm5WdVkzUnBiMjRnWTJGc1kxY2dLQ2tnZTF4dUlDQWdJSFpoY2lCNElEMGdWMXRxSUMwZ01UVWdLaUF5WFZ4dUlDQWdJSFpoY2lCNGJDQTlJRmRiYWlBdElERTFJQ29nTWlBcklERmRYRzRnSUNBZ2RtRnlJR2RoYlcxaE1DQTlJRWRoYlcxaE1DaDRMQ0I0YkNsY2JpQWdJQ0IyWVhJZ1oyRnRiV0V3YkNBOUlFZGhiVzFoTUd3b2VHd3NJSGdwWEc1Y2JpQWdJQ0I0SUQwZ1YxdHFJQzBnTWlBcUlESmRYRzRnSUNBZ2VHd2dQU0JYVzJvZ0xTQXlJQ29nTWlBcklERmRYRzRnSUNBZ2RtRnlJR2RoYlcxaE1TQTlJRWRoYlcxaE1TaDRMQ0I0YkNsY2JpQWdJQ0IyWVhJZ1oyRnRiV0V4YkNBOUlFZGhiVzFoTVd3b2VHd3NJSGdwWEc1Y2JpQWdJQ0F2THlCWFcybGRJRDBnWjJGdGJXRXdJQ3NnVjF0cElDMGdOMTBnS3lCbllXMXRZVEVnS3lCWFcya2dMU0F4TmwxY2JpQWdJQ0IyWVhJZ1YyazNJRDBnVjF0cUlDMGdOeUFxSURKZFhHNGdJQ0FnZG1GeUlGZHBOMndnUFNCWFcyb2dMU0EzSUNvZ01pQXJJREZkWEc1Y2JpQWdJQ0IyWVhJZ1Yya3hOaUE5SUZkYmFpQXRJREUySUNvZ01sMWNiaUFnSUNCMllYSWdWMmt4Tm13Z1BTQlhXMm9nTFNBeE5pQXFJRElnS3lBeFhWeHVYRzRnSUNBZ1YybHNJRDBnWjJGdGJXRXdiQ0FySUZkcE4yeGNiaUFnSUNCWGFTQTlJR2RoYlcxaE1DQXJJRmRwTnlBcklDZ29WMmxzSUQ0K1BpQXdLU0E4SUNobllXMXRZVEJzSUQ0K1BpQXdLU0EvSURFZ09pQXdLVnh1SUNBZ0lGZHBiQ0E5SUZkcGJDQXJJR2RoYlcxaE1XeGNiaUFnSUNCWGFTQTlJRmRwSUNzZ1oyRnRiV0V4SUNzZ0tDaFhhV3dnUGo0K0lEQXBJRHdnS0dkaGJXMWhNV3dnUGo0K0lEQXBJRDhnTVNBNklEQXBYRzRnSUNBZ1YybHNJRDBnVjJsc0lDc2dWMmt4Tm14Y2JpQWdJQ0JYYVNBOUlGZHBJQ3NnVjJreE5pQXJJQ2dvVjJsc0lENCtQaUF3S1NBOElDaFhhVEUyYkNBK1BqNGdNQ2tnUHlBeElEb2dNQ2xjYmlBZ2ZWeHVYRzRnSUdaMWJtTjBhVzl1SUd4dmIzQWdLQ2tnZTF4dUlDQWdJRmRiYWwwZ1BTQlhhVnh1SUNBZ0lGZGJhaUFySURGZElEMGdWMmxzWEc1Y2JpQWdJQ0IyWVhJZ2JXRnFJRDBnVFdGcUtHRXNJR0lzSUdNcFhHNGdJQ0FnZG1GeUlHMWhhbXdnUFNCTllXb29ZV3dzSUdKc0xDQmpiQ2xjYmx4dUlDQWdJSFpoY2lCemFXZHRZVEJvSUQwZ1UybG5iV0V3S0dFc0lHRnNLVnh1SUNBZ0lIWmhjaUJ6YVdkdFlUQnNJRDBnVTJsbmJXRXdLR0ZzTENCaEtWeHVJQ0FnSUhaaGNpQnphV2R0WVRGb0lEMGdVMmxuYldFeEtHVXNJR1ZzS1Z4dUlDQWdJSFpoY2lCemFXZHRZVEZzSUQwZ1UybG5iV0V4S0dWc0xDQmxLVnh1WEc0Z0lDQWdMeThnZERFZ1BTQm9JQ3NnYzJsbmJXRXhJQ3NnWTJnZ0t5QkxXMmxkSUNzZ1YxdHBYVnh1SUNBZ0lIWmhjaUJMYVNBOUlFdGJhbDFjYmlBZ0lDQjJZWElnUzJsc0lEMGdTMXRxSUNzZ01WMWNibHh1SUNBZ0lIWmhjaUJqYUNBOUlFTm9LR1VzSUdZc0lHY3BYRzRnSUNBZ2RtRnlJR05vYkNBOUlFTm9LR1ZzTENCbWJDd2daMndwWEc1Y2JpQWdJQ0IyWVhJZ2RERnNJRDBnYUd3Z0t5QnphV2R0WVRGc1hHNGdJQ0FnZG1GeUlIUXhJRDBnYUNBcklITnBaMjFoTVdnZ0t5QW9LSFF4YkNBK1BqNGdNQ2tnUENBb2FHd2dQajQrSURBcElEOGdNU0E2SURBcFhHNGdJQ0FnZERGc0lEMGdkREZzSUNzZ1kyaHNYRzRnSUNBZ2RERWdQU0IwTVNBcklHTm9JQ3NnS0NoME1Xd2dQajQrSURBcElEd2dLR05vYkNBK1BqNGdNQ2tnUHlBeElEb2dNQ2xjYmlBZ0lDQjBNV3dnUFNCME1Xd2dLeUJMYVd4Y2JpQWdJQ0IwTVNBOUlIUXhJQ3NnUzJrZ0t5QW9LSFF4YkNBK1BqNGdNQ2tnUENBb1MybHNJRDQrUGlBd0tTQS9JREVnT2lBd0tWeHVJQ0FnSUhReGJDQTlJSFF4YkNBcklGZHBiRnh1SUNBZ0lIUXhJRDBnZERFZ0t5QlhhU0FySUNnb2RERnNJRDQrUGlBd0tTQThJQ2hYYVd3Z1BqNCtJREFwSUQ4Z01TQTZJREFwWEc1Y2JpQWdJQ0F2THlCME1pQTlJSE5wWjIxaE1DQXJJRzFoYWx4dUlDQWdJSFpoY2lCME1td2dQU0J6YVdkdFlUQnNJQ3NnYldGcWJGeHVJQ0FnSUhaaGNpQjBNaUE5SUhOcFoyMWhNR2dnS3lCdFlXb2dLeUFvS0hReWJDQStQajRnTUNrZ1BDQW9jMmxuYldFd2JDQStQajRnTUNrZ1B5QXhJRG9nTUNsY2JseHVJQ0FnSUdnZ1BTQm5YRzRnSUNBZ2FHd2dQU0JuYkZ4dUlDQWdJR2NnUFNCbVhHNGdJQ0FnWjJ3Z1BTQm1iRnh1SUNBZ0lHWWdQU0JsWEc0Z0lDQWdabXdnUFNCbGJGeHVJQ0FnSUdWc0lEMGdLR1JzSUNzZ2RERnNLU0I4SURCY2JpQWdJQ0JsSUQwZ0tHUWdLeUIwTVNBcklDZ29aV3dnUGo0K0lEQXBJRHdnS0dSc0lENCtQaUF3S1NBL0lERWdPaUF3S1NrZ2ZDQXdYRzRnSUNBZ1pDQTlJR05jYmlBZ0lDQmtiQ0E5SUdOc1hHNGdJQ0FnWXlBOUlHSmNiaUFnSUNCamJDQTlJR0pzWEc0Z0lDQWdZaUE5SUdGY2JpQWdJQ0JpYkNBOUlHRnNYRzRnSUNBZ1lXd2dQU0FvZERGc0lDc2dkREpzS1NCOElEQmNiaUFnSUNCaElEMGdLSFF4SUNzZ2RESWdLeUFvS0dGc0lENCtQaUF3S1NBOElDaDBNV3dnUGo0K0lEQXBJRDhnTVNBNklEQXBLU0I4SURCY2JseHVJQ0FnSUdrcksxeHVJQ0FnSUdvZ0t6MGdNbHh1SUNCOVhHNWNiaUFnZDJocGJHVWdLR2tnUENBeE5pa2dlMXh1SUNBZ0lGZHBJRDBnVFM1eVpXRmtTVzUwTXpKQ1JTaHFJQ29nTkNsY2JpQWdJQ0JYYVd3Z1BTQk5MbkpsWVdSSmJuUXpNa0pGS0dvZ0tpQTBJQ3NnTkNsY2JseHVJQ0FnSUd4dmIzQW9LVnh1SUNCOVhHNWNiaUFnZDJocGJHVWdLR2tnUENBNE1Da2dlMXh1SUNBZ0lHTmhiR05YS0NsY2JpQWdJQ0JzYjI5d0tDbGNiaUFnZlZ4dVhHNGdJSFJvYVhNdVgyRnNJRDBnS0hSb2FYTXVYMkZzSUNzZ1lXd3BJSHdnTUZ4dUlDQjBhR2x6TGw5aWJDQTlJQ2gwYUdsekxsOWliQ0FySUdKc0tTQjhJREJjYmlBZ2RHaHBjeTVmWTJ3Z1BTQW9kR2hwY3k1Zlkyd2dLeUJqYkNrZ2ZDQXdYRzRnSUhSb2FYTXVYMlJzSUQwZ0tIUm9hWE11WDJSc0lDc2daR3dwSUh3Z01GeHVJQ0IwYUdsekxsOWxiQ0E5SUNoMGFHbHpMbDlsYkNBcklHVnNLU0I4SURCY2JpQWdkR2hwY3k1Zlptd2dQU0FvZEdocGN5NWZabXdnS3lCbWJDa2dmQ0F3WEc0Z0lIUm9hWE11WDJkc0lEMGdLSFJvYVhNdVgyZHNJQ3NnWjJ3cElId2dNRnh1SUNCMGFHbHpMbDlvYkNBOUlDaDBhR2x6TGw5b2JDQXJJR2hzS1NCOElEQmNibHh1SUNCMGFHbHpMbDloSUQwZ0tIUm9hWE11WDJFZ0t5QmhJQ3NnS0NoMGFHbHpMbDloYkNBK1BqNGdNQ2tnUENBb1lXd2dQajQrSURBcElEOGdNU0E2SURBcEtTQjhJREJjYmlBZ2RHaHBjeTVmWWlBOUlDaDBhR2x6TGw5aUlDc2dZaUFySUNnb2RHaHBjeTVmWW13Z1BqNCtJREFwSUR3Z0tHSnNJRDQrUGlBd0tTQS9JREVnT2lBd0tTa2dmQ0F3WEc0Z0lIUm9hWE11WDJNZ1BTQW9kR2hwY3k1Zll5QXJJR01nS3lBb0tIUm9hWE11WDJOc0lENCtQaUF3S1NBOElDaGpiQ0ErUGo0Z01Da2dQeUF4SURvZ01Da3BJSHdnTUZ4dUlDQjBhR2x6TGw5a0lEMGdLSFJvYVhNdVgyUWdLeUJrSUNzZ0tDaDBhR2x6TGw5a2JDQStQajRnTUNrZ1BDQW9aR3dnUGo0K0lEQXBJRDhnTVNBNklEQXBLU0I4SURCY2JpQWdkR2hwY3k1ZlpTQTlJQ2gwYUdsekxsOWxJQ3NnWlNBcklDZ29kR2hwY3k1ZlpXd2dQajQrSURBcElEd2dLR1ZzSUQ0K1BpQXdLU0EvSURFZ09pQXdLU2tnZkNBd1hHNGdJSFJvYVhNdVgyWWdQU0FvZEdocGN5NWZaaUFySUdZZ0t5QW9LSFJvYVhNdVgyWnNJRDQrUGlBd0tTQThJQ2htYkNBK1BqNGdNQ2tnUHlBeElEb2dNQ2twSUh3Z01GeHVJQ0IwYUdsekxsOW5JRDBnS0hSb2FYTXVYMmNnS3lCbklDc2dLQ2gwYUdsekxsOW5iQ0ErUGo0Z01Da2dQQ0FvWjJ3Z1BqNCtJREFwSUQ4Z01TQTZJREFwS1NCOElEQmNiaUFnZEdocGN5NWZhQ0E5SUNoMGFHbHpMbDlvSUNzZ2FDQXJJQ2dvZEdocGN5NWZhR3dnUGo0K0lEQXBJRHdnS0doc0lENCtQaUF3S1NBL0lERWdPaUF3S1NrZ2ZDQXdYRzU5WEc1Y2JsTm9ZVFV4TWk1d2NtOTBiM1I1Y0dVdVgyaGhjMmdnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUhaaGNpQklJRDBnYm1WM0lFSjFabVpsY2lnMk5DbGNibHh1SUNCbWRXNWpkR2x2YmlCM2NtbDBaVWx1ZERZMFFrVWdLR2dzSUd3c0lHOW1abk5sZENrZ2UxeHVJQ0FnSUVndWQzSnBkR1ZKYm5Rek1rSkZLR2dzSUc5bVpuTmxkQ2xjYmlBZ0lDQklMbmR5YVhSbFNXNTBNekpDUlNoc0xDQnZabVp6WlhRZ0t5QTBLVnh1SUNCOVhHNWNiaUFnZDNKcGRHVkpiblEyTkVKRktIUm9hWE11WDJFc0lIUm9hWE11WDJGc0xDQXdLVnh1SUNCM2NtbDBaVWx1ZERZMFFrVW9kR2hwY3k1Zllpd2dkR2hwY3k1Zlltd3NJRGdwWEc0Z0lIZHlhWFJsU1c1ME5qUkNSU2gwYUdsekxsOWpMQ0IwYUdsekxsOWpiQ3dnTVRZcFhHNGdJSGR5YVhSbFNXNTBOalJDUlNoMGFHbHpMbDlrTENCMGFHbHpMbDlrYkN3Z01qUXBYRzRnSUhkeWFYUmxTVzUwTmpSQ1JTaDBhR2x6TGw5bExDQjBhR2x6TGw5bGJDd2dNeklwWEc0Z0lIZHlhWFJsU1c1ME5qUkNSU2gwYUdsekxsOW1MQ0IwYUdsekxsOW1iQ3dnTkRBcFhHNGdJSGR5YVhSbFNXNTBOalJDUlNoMGFHbHpMbDluTENCMGFHbHpMbDluYkN3Z05EZ3BYRzRnSUhkeWFYUmxTVzUwTmpSQ1JTaDBhR2x6TGw5b0xDQjBhR2x6TGw5b2JDd2dOVFlwWEc1Y2JpQWdjbVYwZFhKdUlFaGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCVGFHRTFNVEpjYmlKZGZRPT0iLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG4vKipcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMjU2LCBhcyBkZWZpbmVkXG4gKiBpbiBGSVBTIDE4MC0yXG4gKiBWZXJzaW9uIDIuMi1iZXRhIENvcHlyaWdodCBBbmdlbCBNYXJpbiwgUGF1bCBKb2huc3RvbiAyMDAwIC0gMjAwOS5cbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqXG4gKi9cblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIFNoYTI1NiA9IHJlcXVpcmUoJy4vc2hhMjU2JylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcblxudmFyIFcgPSBuZXcgQXJyYXkoNjQpXG5cbmZ1bmN0aW9uIFNoYTIyNCAoKSB7XG4gIHRoaXMuaW5pdCgpXG5cbiAgdGhpcy5fdyA9IFcgLy8gbmV3IEFycmF5KDY0KVxuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYTIyNCwgU2hhMjU2KVxuXG5TaGEyMjQucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweGMxMDU5ZWQ4IHwgMFxuICB0aGlzLl9iID0gMHgzNjdjZDUwNyB8IDBcbiAgdGhpcy5fYyA9IDB4MzA3MGRkMTcgfCAwXG4gIHRoaXMuX2QgPSAweGY3MGU1OTM5IHwgMFxuICB0aGlzLl9lID0gMHhmZmMwMGIzMSB8IDBcbiAgdGhpcy5fZiA9IDB4Njg1ODE1MTEgfCAwXG4gIHRoaXMuX2cgPSAweDY0Zjk4ZmE3IHwgMFxuICB0aGlzLl9oID0gMHhiZWZhNGZhNCB8IDBcblxuICByZXR1cm4gdGhpc1xufVxuXG5TaGEyMjQucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IG5ldyBCdWZmZXIoMjgpXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSwgMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYiwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYywgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCwgMTIpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2UsIDE2KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9mLCAyMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZywgMjQpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGEyMjRcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZM0psWVhSbExXaGhjMmd2Ym05a1pWOXRiMlIxYkdWekwzTm9ZUzVxY3k5emFHRXlNalF1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nUVNCS1lYWmhVMk55YVhCMElHbHRjR3hsYldWdWRHRjBhVzl1SUc5bUlIUm9aU0JUWldOMWNtVWdTR0Z6YUNCQmJHZHZjbWwwYUcwc0lGTklRUzB5TlRZc0lHRnpJR1JsWm1sdVpXUmNiaUFxSUdsdUlFWkpVRk1nTVRnd0xUSmNiaUFxSUZabGNuTnBiMjRnTWk0eUxXSmxkR0VnUTI5d2VYSnBaMmgwSUVGdVoyVnNJRTFoY21sdUxDQlFZWFZzSUVwdmFHNXpkRzl1SURJd01EQWdMU0F5TURBNUxseHVJQ29nVDNSb1pYSWdZMjl1ZEhKcFluVjBiM0p6T2lCSGNtVm5JRWh2YkhRc0lFRnVaSEpsZHlCTFpYQmxjblFzSUZsa2JtRnlMQ0JNYjNOMGFXNWxkRnh1SUNwY2JpQXFMMXh1WEc1MllYSWdhVzVvWlhKcGRITWdQU0J5WlhGMWFYSmxLQ2RwYm1obGNtbDBjeWNwWEc1MllYSWdVMmhoTWpVMklEMGdjbVZ4ZFdseVpTZ25MaTl6YUdFeU5UWW5LVnh1ZG1GeUlFaGhjMmdnUFNCeVpYRjFhWEpsS0NjdUwyaGhjMmduS1Z4dVhHNTJZWElnVnlBOUlHNWxkeUJCY25KaGVTZzJOQ2xjYmx4dVpuVnVZM1JwYjI0Z1UyaGhNakkwSUNncElIdGNiaUFnZEdocGN5NXBibWwwS0NsY2JseHVJQ0IwYUdsekxsOTNJRDBnVnlBdkx5QnVaWGNnUVhKeVlYa29OalFwWEc1Y2JpQWdTR0Z6YUM1allXeHNLSFJvYVhNc0lEWTBMQ0ExTmlsY2JuMWNibHh1YVc1b1pYSnBkSE1vVTJoaE1qSTBMQ0JUYUdFeU5UWXBYRzVjYmxOb1lUSXlOQzV3Y205MGIzUjVjR1V1YVc1cGRDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdkR2hwY3k1ZllTQTlJREI0WXpFd05UbGxaRGdnZkNBd1hHNGdJSFJvYVhNdVgySWdQU0F3ZURNMk4yTmtOVEEzSUh3Z01GeHVJQ0IwYUdsekxsOWpJRDBnTUhnek1EY3daR1F4TnlCOElEQmNiaUFnZEdocGN5NWZaQ0E5SURCNFpqY3daVFU1TXprZ2ZDQXdYRzRnSUhSb2FYTXVYMlVnUFNBd2VHWm1ZekF3WWpNeElId2dNRnh1SUNCMGFHbHpMbDltSUQwZ01IZzJPRFU0TVRVeE1TQjhJREJjYmlBZ2RHaHBjeTVmWnlBOUlEQjROalJtT1RobVlUY2dmQ0F3WEc0Z0lIUm9hWE11WDJnZ1BTQXdlR0psWm1FMFptRTBJSHdnTUZ4dVhHNGdJSEpsZEhWeWJpQjBhR2x6WEc1OVhHNWNibE5vWVRJeU5DNXdjbTkwYjNSNWNHVXVYMmhoYzJnZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lIWmhjaUJJSUQwZ2JtVjNJRUoxWm1abGNpZ3lPQ2xjYmx4dUlDQklMbmR5YVhSbFNXNTBNekpDUlNoMGFHbHpMbDloTENBd0tWeHVJQ0JJTG5keWFYUmxTVzUwTXpKQ1JTaDBhR2x6TGw5aUxDQTBLVnh1SUNCSUxuZHlhWFJsU1c1ME16SkNSU2gwYUdsekxsOWpMQ0E0S1Z4dUlDQklMbmR5YVhSbFNXNTBNekpDUlNoMGFHbHpMbDlrTENBeE1pbGNiaUFnU0M1M2NtbDBaVWx1ZERNeVFrVW9kR2hwY3k1ZlpTd2dNVFlwWEc0Z0lFZ3VkM0pwZEdWSmJuUXpNa0pGS0hSb2FYTXVYMllzSURJd0tWeHVJQ0JJTG5keWFYUmxTVzUwTXpKQ1JTaDBhR2x6TGw5bkxDQXlOQ2xjYmx4dUlDQnlaWFIxY200Z1NGeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUZOb1lUSXlORnh1SWwxOSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbi8qKlxuICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBTZWN1cmUgSGFzaCBBbGdvcml0aG0sIFNIQS0yNTYsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgMTgwLTJcbiAqIFZlcnNpb24gMi4yLWJldGEgQ29weXJpZ2h0IEFuZ2VsIE1hcmluLCBQYXVsIEpvaG5zdG9uIDIwMDAgLSAyMDA5LlxuICogT3RoZXIgY29udHJpYnV0b3JzOiBHcmVnIEhvbHQsIEFuZHJldyBLZXBlcnQsIFlkbmFyLCBMb3N0aW5ldFxuICpcbiAqL1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG5cbnZhciBLID0gW1xuICAweDQyOEEyRjk4LCAweDcxMzc0NDkxLCAweEI1QzBGQkNGLCAweEU5QjVEQkE1LFxuICAweDM5NTZDMjVCLCAweDU5RjExMUYxLCAweDkyM0Y4MkE0LCAweEFCMUM1RUQ1LFxuICAweEQ4MDdBQTk4LCAweDEyODM1QjAxLCAweDI0MzE4NUJFLCAweDU1MEM3REMzLFxuICAweDcyQkU1RDc0LCAweDgwREVCMUZFLCAweDlCREMwNkE3LCAweEMxOUJGMTc0LFxuICAweEU0OUI2OUMxLCAweEVGQkU0Nzg2LCAweDBGQzE5REM2LCAweDI0MENBMUNDLFxuICAweDJERTkyQzZGLCAweDRBNzQ4NEFBLCAweDVDQjBBOURDLCAweDc2Rjk4OERBLFxuICAweDk4M0U1MTUyLCAweEE4MzFDNjZELCAweEIwMDMyN0M4LCAweEJGNTk3RkM3LFxuICAweEM2RTAwQkYzLCAweEQ1QTc5MTQ3LCAweDA2Q0E2MzUxLCAweDE0MjkyOTY3LFxuICAweDI3QjcwQTg1LCAweDJFMUIyMTM4LCAweDREMkM2REZDLCAweDUzMzgwRDEzLFxuICAweDY1MEE3MzU0LCAweDc2NkEwQUJCLCAweDgxQzJDOTJFLCAweDkyNzIyQzg1LFxuICAweEEyQkZFOEExLCAweEE4MUE2NjRCLCAweEMyNEI4QjcwLCAweEM3NkM1MUEzLFxuICAweEQxOTJFODE5LCAweEQ2OTkwNjI0LCAweEY0MEUzNTg1LCAweDEwNkFBMDcwLFxuICAweDE5QTRDMTE2LCAweDFFMzc2QzA4LCAweDI3NDg3NzRDLCAweDM0QjBCQ0I1LFxuICAweDM5MUMwQ0IzLCAweDRFRDhBQTRBLCAweDVCOUNDQTRGLCAweDY4MkU2RkYzLFxuICAweDc0OEY4MkVFLCAweDc4QTU2MzZGLCAweDg0Qzg3ODE0LCAweDhDQzcwMjA4LFxuICAweDkwQkVGRkZBLCAweEE0NTA2Q0VCLCAweEJFRjlBM0Y3LCAweEM2NzE3OEYyXG5dXG5cbnZhciBXID0gbmV3IEFycmF5KDY0KVxuXG5mdW5jdGlvbiBTaGEyNTYgKCkge1xuICB0aGlzLmluaXQoKVxuXG4gIHRoaXMuX3cgPSBXIC8vIG5ldyBBcnJheSg2NClcblxuICBIYXNoLmNhbGwodGhpcywgNjQsIDU2KVxufVxuXG5pbmhlcml0cyhTaGEyNTYsIEhhc2gpXG5cblNoYTI1Ni5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4NmEwOWU2NjcgfCAwXG4gIHRoaXMuX2IgPSAweGJiNjdhZTg1IHwgMFxuICB0aGlzLl9jID0gMHgzYzZlZjM3MiB8IDBcbiAgdGhpcy5fZCA9IDB4YTU0ZmY1M2EgfCAwXG4gIHRoaXMuX2UgPSAweDUxMGU1MjdmIHwgMFxuICB0aGlzLl9mID0gMHg5YjA1Njg4YyB8IDBcbiAgdGhpcy5fZyA9IDB4MWY4M2Q5YWIgfCAwXG4gIHRoaXMuX2ggPSAweDViZTBjZDE5IHwgMFxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIENoICh4LCB5LCB6KSB7XG4gIHJldHVybiB6IF4gKHggJiAoeSBeIHopKVxufVxuXG5mdW5jdGlvbiBNYWogKHgsIHksIHopIHtcbiAgcmV0dXJuICh4ICYgeSkgfCAoeiAmICh4IHwgeSkpXG59XG5cbmZ1bmN0aW9uIFNpZ21hMCAoeCkge1xuICByZXR1cm4gKHggPj4+IDIgfCB4IDw8IDMwKSBeICh4ID4+PiAxMyB8IHggPDwgMTkpIF4gKHggPj4+IDIyIHwgeCA8PCAxMClcbn1cblxuZnVuY3Rpb24gU2lnbWExICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gNiB8IHggPDwgMjYpIF4gKHggPj4+IDExIHwgeCA8PCAyMSkgXiAoeCA+Pj4gMjUgfCB4IDw8IDcpXG59XG5cbmZ1bmN0aW9uIEdhbW1hMCAoeCkge1xuICByZXR1cm4gKHggPj4+IDcgfCB4IDw8IDI1KSBeICh4ID4+PiAxOCB8IHggPDwgMTQpIF4gKHggPj4+IDMpXG59XG5cbmZ1bmN0aW9uIEdhbW1hMSAoeCkge1xuICByZXR1cm4gKHggPj4+IDE3IHwgeCA8PCAxNSkgXiAoeCA+Pj4gMTkgfCB4IDw8IDEzKSBeICh4ID4+PiAxMClcbn1cblxuU2hhMjU2LnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGEgPSB0aGlzLl9hIHwgMFxuICB2YXIgYiA9IHRoaXMuX2IgfCAwXG4gIHZhciBjID0gdGhpcy5fYyB8IDBcbiAgdmFyIGQgPSB0aGlzLl9kIHwgMFxuICB2YXIgZSA9IHRoaXMuX2UgfCAwXG4gIHZhciBmID0gdGhpcy5fZiB8IDBcbiAgdmFyIGcgPSB0aGlzLl9nIHwgMFxuICB2YXIgaCA9IHRoaXMuX2ggfCAwXG5cbiAgdmFyIGogPSAwXG5cbiAgZnVuY3Rpb24gY2FsY1cgKCkgeyByZXR1cm4gR2FtbWExKFdbaiAtIDJdKSArIFdbaiAtIDddICsgR2FtbWEwKFdbaiAtIDE1XSkgKyBXW2ogLSAxNl0gfVxuICBmdW5jdGlvbiBsb29wICh3KSB7XG4gICAgV1tqXSA9IHdcblxuICAgIHZhciBUMSA9IGggKyBTaWdtYTEoZSkgKyBDaChlLCBmLCBnKSArIEtbal0gKyB3XG4gICAgdmFyIFQyID0gU2lnbWEwKGEpICsgTWFqKGEsIGIsIGMpXG5cbiAgICBoID0gZ1xuICAgIGcgPSBmXG4gICAgZiA9IGVcbiAgICBlID0gZCArIFQxXG4gICAgZCA9IGNcbiAgICBjID0gYlxuICAgIGIgPSBhXG4gICAgYSA9IFQxICsgVDJcblxuICAgIGorK1xuICB9XG5cbiAgd2hpbGUgKGogPCAxNikgbG9vcChNLnJlYWRJbnQzMkJFKGogKiA0KSlcbiAgd2hpbGUgKGogPCA2NCkgbG9vcChjYWxjVygpKVxuXG4gIHRoaXMuX2EgPSAoYSArIHRoaXMuX2EpIHwgMFxuICB0aGlzLl9iID0gKGIgKyB0aGlzLl9iKSB8IDBcbiAgdGhpcy5fYyA9IChjICsgdGhpcy5fYykgfCAwXG4gIHRoaXMuX2QgPSAoZCArIHRoaXMuX2QpIHwgMFxuICB0aGlzLl9lID0gKGUgKyB0aGlzLl9lKSB8IDBcbiAgdGhpcy5fZiA9IChmICsgdGhpcy5fZikgfCAwXG4gIHRoaXMuX2cgPSAoZyArIHRoaXMuX2cpIHwgMFxuICB0aGlzLl9oID0gKGggKyB0aGlzLl9oKSB8IDBcbn1cblxuU2hhMjU2LnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBuZXcgQnVmZmVyKDMyKVxuXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2EsIDApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2IsIDQpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2MsIDgpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2QsIDEyKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9lLCAxNilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZiwgMjApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2csIDI0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9oLCAyOClcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTI1NlxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlkzSmxZWFJsTFdoaGMyZ3ZibTlrWlY5dGIyUjFiR1Z6TDNOb1lTNXFjeTl6YUdFeU5UWXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpcGNiaUFxSUVFZ1NtRjJZVk5qY21sd2RDQnBiWEJzWlcxbGJuUmhkR2x2YmlCdlppQjBhR1VnVTJWamRYSmxJRWhoYzJnZ1FXeG5iM0pwZEdodExDQlRTRUV0TWpVMkxDQmhjeUJrWldacGJtVmtYRzRnS2lCcGJpQkdTVkJUSURFNE1DMHlYRzRnS2lCV1pYSnphVzl1SURJdU1pMWlaWFJoSUVOdmNIbHlhV2RvZENCQmJtZGxiQ0JOWVhKcGJpd2dVR0YxYkNCS2IyaHVjM1J2YmlBeU1EQXdJQzBnTWpBd09TNWNiaUFxSUU5MGFHVnlJR052Ym5SeWFXSjFkRzl5Y3pvZ1IzSmxaeUJJYjJ4MExDQkJibVJ5WlhjZ1MyVndaWEowTENCWlpHNWhjaXdnVEc5emRHbHVaWFJjYmlBcVhHNGdLaTljYmx4dWRtRnlJR2x1YUdWeWFYUnpJRDBnY21WeGRXbHlaU2duYVc1b1pYSnBkSE1uS1Z4dWRtRnlJRWhoYzJnZ1BTQnlaWEYxYVhKbEtDY3VMMmhoYzJnbktWeHVYRzUyWVhJZ1N5QTlJRnRjYmlBZ01IZzBNamhCTWtZNU9Dd2dNSGczTVRNM05EUTVNU3dnTUhoQ05VTXdSa0pEUml3Z01IaEZPVUkxUkVKQk5TeGNiaUFnTUhnek9UVTJRekkxUWl3Z01IZzFPVVl4TVRGR01Td2dNSGc1TWpOR09ESkJOQ3dnTUhoQlFqRkROVVZFTlN4Y2JpQWdNSGhFT0RBM1FVRTVPQ3dnTUhneE1qZ3pOVUl3TVN3Z01IZ3lORE14T0RWQ1JTd2dNSGcxTlRCRE4wUkRNeXhjYmlBZ01IZzNNa0pGTlVRM05Dd2dNSGc0TUVSRlFqRkdSU3dnTUhnNVFrUkRNRFpCTnl3Z01IaERNVGxDUmpFM05DeGNiaUFnTUhoRk5EbENOamxETVN3Z01IaEZSa0pGTkRjNE5pd2dNSGd3UmtNeE9VUkROaXdnTUhneU5EQkRRVEZEUXl4Y2JpQWdNSGd5UkVVNU1rTTJSaXdnTUhnMFFUYzBPRFJCUVN3Z01IZzFRMEl3UVRsRVF5d2dNSGczTmtZNU9EaEVRU3hjYmlBZ01IZzVPRE5GTlRFMU1pd2dNSGhCT0RNeFF6WTJSQ3dnTUhoQ01EQXpNamRET0N3Z01IaENSalU1TjBaRE55eGNiaUFnTUhoRE5rVXdNRUpHTXl3Z01IaEVOVUUzT1RFME55d2dNSGd3TmtOQk5qTTFNU3dnTUhneE5ESTVNamsyTnl4Y2JpQWdNSGd5TjBJM01FRTROU3dnTUhneVJURkNNakV6T0N3Z01IZzBSREpETmtSR1F5d2dNSGcxTXpNNE1FUXhNeXhjYmlBZ01IZzJOVEJCTnpNMU5Dd2dNSGczTmpaQk1FRkNRaXdnTUhnNE1VTXlRemt5UlN3Z01IZzVNamN5TWtNNE5TeGNiaUFnTUhoQk1rSkdSVGhCTVN3Z01IaEJPREZCTmpZMFFpd2dNSGhETWpSQ09FSTNNQ3dnTUhoRE56WkROVEZCTXl4Y2JpQWdNSGhFTVRreVJUZ3hPU3dnTUhoRU5qazVNRFl5TkN3Z01IaEdOREJGTXpVNE5Td2dNSGd4TURaQlFUQTNNQ3hjYmlBZ01IZ3hPVUUwUXpFeE5pd2dNSGd4UlRNM05rTXdPQ3dnTUhneU56UTROemMwUXl3Z01IZ3pORUl3UWtOQ05TeGNiaUFnTUhnek9URkRNRU5DTXl3Z01IZzBSVVE0UVVFMFFTd2dNSGcxUWpsRFEwRTBSaXdnTUhnMk9ESkZOa1pHTXl4Y2JpQWdNSGczTkRoR09ESkZSU3dnTUhnM09FRTFOak0yUml3Z01IZzRORU00TnpneE5Dd2dNSGc0UTBNM01ESXdPQ3hjYmlBZ01IZzVNRUpGUmtaR1FTd2dNSGhCTkRVd05rTkZRaXdnTUhoQ1JVWTVRVE5HTnl3Z01IaEROamN4TnpoR01seHVYVnh1WEc1MllYSWdWeUE5SUc1bGR5QkJjbkpoZVNnMk5DbGNibHh1Wm5WdVkzUnBiMjRnVTJoaE1qVTJJQ2dwSUh0Y2JpQWdkR2hwY3k1cGJtbDBLQ2xjYmx4dUlDQjBhR2x6TGw5M0lEMGdWeUF2THlCdVpYY2dRWEp5WVhrb05qUXBYRzVjYmlBZ1NHRnphQzVqWVd4c0tIUm9hWE1zSURZMExDQTFOaWxjYm4xY2JseHVhVzVvWlhKcGRITW9VMmhoTWpVMkxDQklZWE5vS1Z4dVhHNVRhR0V5TlRZdWNISnZkRzkwZVhCbExtbHVhWFFnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUhSb2FYTXVYMkVnUFNBd2VEWmhNRGxsTmpZM0lId2dNRnh1SUNCMGFHbHpMbDlpSUQwZ01IaGlZalkzWVdVNE5TQjhJREJjYmlBZ2RHaHBjeTVmWXlBOUlEQjRNMk0yWldZek56SWdmQ0F3WEc0Z0lIUm9hWE11WDJRZ1BTQXdlR0UxTkdabU5UTmhJSHdnTUZ4dUlDQjBhR2x6TGw5bElEMGdNSGcxTVRCbE5USTNaaUI4SURCY2JpQWdkR2hwY3k1ZlppQTlJREI0T1dJd05UWTRPR01nZkNBd1hHNGdJSFJvYVhNdVgyY2dQU0F3ZURGbU9ETmtPV0ZpSUh3Z01GeHVJQ0IwYUdsekxsOW9JRDBnTUhnMVltVXdZMlF4T1NCOElEQmNibHh1SUNCeVpYUjFjbTRnZEdocGMxeHVmVnh1WEc1bWRXNWpkR2x2YmlCRGFDQW9lQ3dnZVN3Z2Vpa2dlMXh1SUNCeVpYUjFjbTRnZWlCZUlDaDRJQ1lnS0hrZ1hpQjZLU2xjYm4xY2JseHVablZ1WTNScGIyNGdUV0ZxSUNoNExDQjVMQ0I2S1NCN1hHNGdJSEpsZEhWeWJpQW9lQ0FtSUhrcElId2dLSG9nSmlBb2VDQjhJSGtwS1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJUYVdkdFlUQWdLSGdwSUh0Y2JpQWdjbVYwZFhKdUlDaDRJRDQrUGlBeUlId2dlQ0E4UENBek1Da2dYaUFvZUNBK1BqNGdNVE1nZkNCNElEdzhJREU1S1NCZUlDaDRJRDQrUGlBeU1pQjhJSGdnUER3Z01UQXBYRzU5WEc1Y2JtWjFibU4wYVc5dUlGTnBaMjFoTVNBb2VDa2dlMXh1SUNCeVpYUjFjbTRnS0hnZ1BqNCtJRFlnZkNCNElEdzhJREkyS1NCZUlDaDRJRDQrUGlBeE1TQjhJSGdnUER3Z01qRXBJRjRnS0hnZ1BqNCtJREkxSUh3Z2VDQThQQ0EzS1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJIWVcxdFlUQWdLSGdwSUh0Y2JpQWdjbVYwZFhKdUlDaDRJRDQrUGlBM0lId2dlQ0E4UENBeU5Ta2dYaUFvZUNBK1BqNGdNVGdnZkNCNElEdzhJREUwS1NCZUlDaDRJRDQrUGlBektWeHVmVnh1WEc1bWRXNWpkR2x2YmlCSFlXMXRZVEVnS0hncElIdGNiaUFnY21WMGRYSnVJQ2g0SUQ0K1BpQXhOeUI4SUhnZ1BEd2dNVFVwSUY0Z0tIZ2dQajQrSURFNUlId2dlQ0E4UENBeE15a2dYaUFvZUNBK1BqNGdNVEFwWEc1OVhHNWNibE5vWVRJMU5pNXdjbTkwYjNSNWNHVXVYM1Z3WkdGMFpTQTlJR1oxYm1OMGFXOXVJQ2hOS1NCN1hHNGdJSFpoY2lCWElEMGdkR2hwY3k1ZmQxeHVYRzRnSUhaaGNpQmhJRDBnZEdocGN5NWZZU0I4SURCY2JpQWdkbUZ5SUdJZ1BTQjBhR2x6TGw5aUlId2dNRnh1SUNCMllYSWdZeUE5SUhSb2FYTXVYMk1nZkNBd1hHNGdJSFpoY2lCa0lEMGdkR2hwY3k1ZlpDQjhJREJjYmlBZ2RtRnlJR1VnUFNCMGFHbHpMbDlsSUh3Z01GeHVJQ0IyWVhJZ1ppQTlJSFJvYVhNdVgyWWdmQ0F3WEc0Z0lIWmhjaUJuSUQwZ2RHaHBjeTVmWnlCOElEQmNiaUFnZG1GeUlHZ2dQU0IwYUdsekxsOW9JSHdnTUZ4dVhHNGdJSFpoY2lCcUlEMGdNRnh1WEc0Z0lHWjFibU4wYVc5dUlHTmhiR05YSUNncElIc2djbVYwZFhKdUlFZGhiVzFoTVNoWFcyb2dMU0F5WFNrZ0t5QlhXMm9nTFNBM1hTQXJJRWRoYlcxaE1DaFhXMm9nTFNBeE5WMHBJQ3NnVjF0cUlDMGdNVFpkSUgxY2JpQWdablZ1WTNScGIyNGdiRzl2Y0NBb2R5a2dlMXh1SUNBZ0lGZGJhbDBnUFNCM1hHNWNiaUFnSUNCMllYSWdWREVnUFNCb0lDc2dVMmxuYldFeEtHVXBJQ3NnUTJnb1pTd2daaXdnWnlrZ0t5QkxXMnBkSUNzZ2QxeHVJQ0FnSUhaaGNpQlVNaUE5SUZOcFoyMWhNQ2hoS1NBcklFMWhhaWhoTENCaUxDQmpLVnh1WEc0Z0lDQWdhQ0E5SUdkY2JpQWdJQ0JuSUQwZ1pseHVJQ0FnSUdZZ1BTQmxYRzRnSUNBZ1pTQTlJR1FnS3lCVU1WeHVJQ0FnSUdRZ1BTQmpYRzRnSUNBZ1l5QTlJR0pjYmlBZ0lDQmlJRDBnWVZ4dUlDQWdJR0VnUFNCVU1TQXJJRlF5WEc1Y2JpQWdJQ0JxS3l0Y2JpQWdmVnh1WEc0Z0lIZG9hV3hsSUNocUlEd2dNVFlwSUd4dmIzQW9UUzV5WldGa1NXNTBNekpDUlNocUlDb2dOQ2twWEc0Z0lIZG9hV3hsSUNocUlEd2dOalFwSUd4dmIzQW9ZMkZzWTFjb0tTbGNibHh1SUNCMGFHbHpMbDloSUQwZ0tHRWdLeUIwYUdsekxsOWhLU0I4SURCY2JpQWdkR2hwY3k1ZllpQTlJQ2hpSUNzZ2RHaHBjeTVmWWlrZ2ZDQXdYRzRnSUhSb2FYTXVYMk1nUFNBb1l5QXJJSFJvYVhNdVgyTXBJSHdnTUZ4dUlDQjBhR2x6TGw5a0lEMGdLR1FnS3lCMGFHbHpMbDlrS1NCOElEQmNiaUFnZEdocGN5NWZaU0E5SUNobElDc2dkR2hwY3k1ZlpTa2dmQ0F3WEc0Z0lIUm9hWE11WDJZZ1BTQW9aaUFySUhSb2FYTXVYMllwSUh3Z01GeHVJQ0IwYUdsekxsOW5JRDBnS0djZ0t5QjBhR2x6TGw5bktTQjhJREJjYmlBZ2RHaHBjeTVmYUNBOUlDaG9JQ3NnZEdocGN5NWZhQ2tnZkNBd1hHNTlYRzVjYmxOb1lUSTFOaTV3Y205MGIzUjVjR1V1WDJoaGMyZ2dQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJSFpoY2lCSUlEMGdibVYzSUVKMVptWmxjaWd6TWlsY2JseHVJQ0JJTG5keWFYUmxTVzUwTXpKQ1JTaDBhR2x6TGw5aExDQXdLVnh1SUNCSUxuZHlhWFJsU1c1ME16SkNSU2gwYUdsekxsOWlMQ0EwS1Z4dUlDQklMbmR5YVhSbFNXNTBNekpDUlNoMGFHbHpMbDlqTENBNEtWeHVJQ0JJTG5keWFYUmxTVzUwTXpKQ1JTaDBhR2x6TGw5a0xDQXhNaWxjYmlBZ1NDNTNjbWwwWlVsdWRETXlRa1VvZEdocGN5NWZaU3dnTVRZcFhHNGdJRWd1ZDNKcGRHVkpiblF6TWtKRktIUm9hWE11WDJZc0lESXdLVnh1SUNCSUxuZHlhWFJsU1c1ME16SkNSU2gwYUdsekxsOW5MQ0F5TkNsY2JpQWdTQzUzY21sMFpVbHVkRE15UWtVb2RHaHBjeTVmYUN3Z01qZ3BYRzVjYmlBZ2NtVjBkWEp1SUVoY2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JUYUdFeU5UWmNiaUpkZlE9PSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbi8qXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTEsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgUFVCIDE4MC0xXG4gKiBWZXJzaW9uIDIuMWEgQ29weXJpZ2h0IFBhdWwgSm9obnN0b24gMjAwMCAtIDIwMDIuXG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2VcbiAqIFNlZSBodHRwOi8vcGFqaG9tZS5vcmcudWsvY3J5cHQvbWQ1IGZvciBkZXRhaWxzLlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcblxudmFyIFcgPSBuZXcgQXJyYXkoODApXG5cbmZ1bmN0aW9uIFNoYTEgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYTEsIEhhc2gpXG5cblNoYTEucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweDY3NDUyMzAxIHwgMFxuICB0aGlzLl9iID0gMHhlZmNkYWI4OSB8IDBcbiAgdGhpcy5fYyA9IDB4OThiYWRjZmUgfCAwXG4gIHRoaXMuX2QgPSAweDEwMzI1NDc2IHwgMFxuICB0aGlzLl9lID0gMHhjM2QyZTFmMCB8IDBcblxuICByZXR1cm4gdGhpc1xufVxuXG4vKlxuICogQml0d2lzZSByb3RhdGUgYSAzMi1iaXQgbnVtYmVyIHRvIHRoZSBsZWZ0LlxuICovXG5mdW5jdGlvbiByb2wgKG51bSwgY250KSB7XG4gIHJldHVybiAobnVtIDw8IGNudCkgfCAobnVtID4+PiAoMzIgLSBjbnQpKVxufVxuXG5TaGExLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGEgPSB0aGlzLl9hXG4gIHZhciBiID0gdGhpcy5fYlxuICB2YXIgYyA9IHRoaXMuX2NcbiAgdmFyIGQgPSB0aGlzLl9kXG4gIHZhciBlID0gdGhpcy5fZVxuXG4gIHZhciBqID0gMFxuICB2YXIga1xuXG4gIGZ1bmN0aW9uIGNhbGNXICgpIHsgcmV0dXJuIHJvbChXW2ogLSAzXSBeIFdbaiAtIDhdIF4gV1tqIC0gMTRdIF4gV1tqIC0gMTZdLCAxKSB9XG4gIGZ1bmN0aW9uIGxvb3AgKHcsIGYpIHtcbiAgICBXW2pdID0gd1xuXG4gICAgdmFyIHQgPSByb2woYSwgNSkgKyBmICsgZSArIHcgKyBrXG5cbiAgICBlID0gZFxuICAgIGQgPSBjXG4gICAgYyA9IHJvbChiLCAzMClcbiAgICBiID0gYVxuICAgIGEgPSB0XG4gICAgaisrXG4gIH1cblxuICBrID0gMTUxODUwMDI0OVxuICB3aGlsZSAoaiA8IDE2KSBsb29wKE0ucmVhZEludDMyQkUoaiAqIDQpLCAoYiAmIGMpIHwgKCh+YikgJiBkKSlcbiAgd2hpbGUgKGogPCAyMCkgbG9vcChjYWxjVygpLCAoYiAmIGMpIHwgKCh+YikgJiBkKSlcbiAgayA9IDE4NTk3NzUzOTNcbiAgd2hpbGUgKGogPCA0MCkgbG9vcChjYWxjVygpLCBiIF4gYyBeIGQpXG4gIGsgPSAtMTg5NDAwNzU4OFxuICB3aGlsZSAoaiA8IDYwKSBsb29wKGNhbGNXKCksIChiICYgYykgfCAoYiAmIGQpIHwgKGMgJiBkKSlcbiAgayA9IC04OTk0OTc1MTRcbiAgd2hpbGUgKGogPCA4MCkgbG9vcChjYWxjVygpLCBiIF4gYyBeIGQpXG5cbiAgdGhpcy5fYSA9IChhICsgdGhpcy5fYSkgfCAwXG4gIHRoaXMuX2IgPSAoYiArIHRoaXMuX2IpIHwgMFxuICB0aGlzLl9jID0gKGMgKyB0aGlzLl9jKSB8IDBcbiAgdGhpcy5fZCA9IChkICsgdGhpcy5fZCkgfCAwXG4gIHRoaXMuX2UgPSAoZSArIHRoaXMuX2UpIHwgMFxufVxuXG5TaGExLnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBuZXcgQnVmZmVyKDIwKVxuXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2EgfCAwLCAwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9iIHwgMCwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYyB8IDAsIDgpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2QgfCAwLCAxMilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZSB8IDAsIDE2KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhMVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlkzSmxZWFJsTFdoaGMyZ3ZibTlrWlY5dGIyUjFiR1Z6TDNOb1lTNXFjeTl6YUdFeExtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlwY2JpQXFJRUVnU21GMllWTmpjbWx3ZENCcGJYQnNaVzFsYm5SaGRHbHZiaUJ2WmlCMGFHVWdVMlZqZFhKbElFaGhjMmdnUVd4bmIzSnBkR2h0TENCVFNFRXRNU3dnWVhNZ1pHVm1hVzVsWkZ4dUlDb2dhVzRnUmtsUVV5QlFWVUlnTVRnd0xURmNiaUFxSUZabGNuTnBiMjRnTWk0eFlTQkRiM0I1Y21sbmFIUWdVR0YxYkNCS2IyaHVjM1J2YmlBeU1EQXdJQzBnTWpBd01pNWNiaUFxSUU5MGFHVnlJR052Ym5SeWFXSjFkRzl5Y3pvZ1IzSmxaeUJJYjJ4MExDQkJibVJ5WlhjZ1MyVndaWEowTENCWlpHNWhjaXdnVEc5emRHbHVaWFJjYmlBcUlFUnBjM1J5YVdKMWRHVmtJSFZ1WkdWeUlIUm9aU0JDVTBRZ1RHbGpaVzV6WlZ4dUlDb2dVMlZsSUdoMGRIQTZMeTl3WVdwb2IyMWxMbTl5Wnk1MWF5OWpjbmx3ZEM5dFpEVWdabTl5SUdSbGRHRnBiSE11WEc0Z0tpOWNibHh1ZG1GeUlHbHVhR1Z5YVhSeklEMGdjbVZ4ZFdseVpTZ25hVzVvWlhKcGRITW5LVnh1ZG1GeUlFaGhjMmdnUFNCeVpYRjFhWEpsS0NjdUwyaGhjMmduS1Z4dVhHNTJZWElnVnlBOUlHNWxkeUJCY25KaGVTZzRNQ2xjYmx4dVpuVnVZM1JwYjI0Z1UyaGhNU0FvS1NCN1hHNGdJSFJvYVhNdWFXNXBkQ2dwWEc0Z0lIUm9hWE11WDNjZ1BTQlhYRzVjYmlBZ1NHRnphQzVqWVd4c0tIUm9hWE1zSURZMExDQTFOaWxjYm4xY2JseHVhVzVvWlhKcGRITW9VMmhoTVN3Z1NHRnphQ2xjYmx4dVUyaGhNUzV3Y205MGIzUjVjR1V1YVc1cGRDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdkR2hwY3k1ZllTQTlJREI0TmpjME5USXpNREVnZkNBd1hHNGdJSFJvYVhNdVgySWdQU0F3ZUdWbVkyUmhZamc1SUh3Z01GeHVJQ0IwYUdsekxsOWpJRDBnTUhnNU9HSmhaR05tWlNCOElEQmNiaUFnZEdocGN5NWZaQ0E5SURCNE1UQXpNalUwTnpZZ2ZDQXdYRzRnSUhSb2FYTXVYMlVnUFNBd2VHTXpaREpsTVdZd0lId2dNRnh1WEc0Z0lISmxkSFZ5YmlCMGFHbHpYRzU5WEc1Y2JpOHFYRzRnS2lCQ2FYUjNhWE5sSUhKdmRHRjBaU0JoSURNeUxXSnBkQ0J1ZFcxaVpYSWdkRzhnZEdobElHeGxablF1WEc0Z0tpOWNibVoxYm1OMGFXOXVJSEp2YkNBb2JuVnRMQ0JqYm5RcElIdGNiaUFnY21WMGRYSnVJQ2h1ZFcwZ1BEd2dZMjUwS1NCOElDaHVkVzBnUGo0K0lDZ3pNaUF0SUdOdWRDa3BYRzU5WEc1Y2JsTm9ZVEV1Y0hKdmRHOTBlWEJsTGw5MWNHUmhkR1VnUFNCbWRXNWpkR2x2YmlBb1RTa2dlMXh1SUNCMllYSWdWeUE5SUhSb2FYTXVYM2RjYmx4dUlDQjJZWElnWVNBOUlIUm9hWE11WDJGY2JpQWdkbUZ5SUdJZ1BTQjBhR2x6TGw5aVhHNGdJSFpoY2lCaklEMGdkR2hwY3k1ZlkxeHVJQ0IyWVhJZ1pDQTlJSFJvYVhNdVgyUmNiaUFnZG1GeUlHVWdQU0IwYUdsekxsOWxYRzVjYmlBZ2RtRnlJR29nUFNBd1hHNGdJSFpoY2lCclhHNWNiaUFnWm5WdVkzUnBiMjRnWTJGc1kxY2dLQ2tnZXlCeVpYUjFjbTRnY205c0tGZGJhaUF0SUROZElGNGdWMXRxSUMwZ09GMGdYaUJYVzJvZ0xTQXhORjBnWGlCWFcyb2dMU0F4Tmwwc0lERXBJSDFjYmlBZ1puVnVZM1JwYjI0Z2JHOXZjQ0FvZHl3Z1ppa2dlMXh1SUNBZ0lGZGJhbDBnUFNCM1hHNWNiaUFnSUNCMllYSWdkQ0E5SUhKdmJDaGhMQ0ExS1NBcklHWWdLeUJsSUNzZ2R5QXJJR3RjYmx4dUlDQWdJR1VnUFNCa1hHNGdJQ0FnWkNBOUlHTmNiaUFnSUNCaklEMGdjbTlzS0dJc0lETXdLVnh1SUNBZ0lHSWdQU0JoWEc0Z0lDQWdZU0E5SUhSY2JpQWdJQ0JxS3l0Y2JpQWdmVnh1WEc0Z0lHc2dQU0F4TlRFNE5UQXdNalE1WEc0Z0lIZG9hV3hsSUNocUlEd2dNVFlwSUd4dmIzQW9UUzV5WldGa1NXNTBNekpDUlNocUlDb2dOQ2tzSUNoaUlDWWdZeWtnZkNBb0tINWlLU0FtSUdRcEtWeHVJQ0IzYUdsc1pTQW9haUE4SURJd0tTQnNiMjl3S0dOaGJHTlhLQ2tzSUNoaUlDWWdZeWtnZkNBb0tINWlLU0FtSUdRcEtWeHVJQ0JySUQwZ01UZzFPVGMzTlRNNU0xeHVJQ0IzYUdsc1pTQW9haUE4SURRd0tTQnNiMjl3S0dOaGJHTlhLQ2tzSUdJZ1hpQmpJRjRnWkNsY2JpQWdheUE5SUMweE9EazBNREEzTlRnNFhHNGdJSGRvYVd4bElDaHFJRHdnTmpBcElHeHZiM0FvWTJGc1kxY29LU3dnS0dJZ0ppQmpLU0I4SUNoaUlDWWdaQ2tnZkNBb1l5QW1JR1FwS1Z4dUlDQnJJRDBnTFRnNU9UUTVOelV4TkZ4dUlDQjNhR2xzWlNBb2FpQThJRGd3S1NCc2IyOXdLR05oYkdOWEtDa3NJR0lnWGlCaklGNGdaQ2xjYmx4dUlDQjBhR2x6TGw5aElEMGdLR0VnS3lCMGFHbHpMbDloS1NCOElEQmNiaUFnZEdocGN5NWZZaUE5SUNoaUlDc2dkR2hwY3k1Zllpa2dmQ0F3WEc0Z0lIUm9hWE11WDJNZ1BTQW9ZeUFySUhSb2FYTXVYMk1wSUh3Z01GeHVJQ0IwYUdsekxsOWtJRDBnS0dRZ0t5QjBhR2x6TGw5a0tTQjhJREJjYmlBZ2RHaHBjeTVmWlNBOUlDaGxJQ3NnZEdocGN5NWZaU2tnZkNBd1hHNTlYRzVjYmxOb1lURXVjSEp2ZEc5MGVYQmxMbDlvWVhOb0lEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQjJZWElnU0NBOUlHNWxkeUJDZFdabVpYSW9NakFwWEc1Y2JpQWdTQzUzY21sMFpVbHVkRE15UWtVb2RHaHBjeTVmWVNCOElEQXNJREFwWEc0Z0lFZ3VkM0pwZEdWSmJuUXpNa0pGS0hSb2FYTXVYMklnZkNBd0xDQTBLVnh1SUNCSUxuZHlhWFJsU1c1ME16SkNSU2gwYUdsekxsOWpJSHdnTUN3Z09DbGNiaUFnU0M1M2NtbDBaVWx1ZERNeVFrVW9kR2hwY3k1ZlpDQjhJREFzSURFeUtWeHVJQ0JJTG5keWFYUmxTVzUwTXpKQ1JTaDBhR2x6TGw5bElId2dNQ3dnTVRZcFhHNWNiaUFnY21WMGRYSnVJRWhjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlRhR0V4WEc0aVhYMD0iLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG4vKlxuICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBTZWN1cmUgSGFzaCBBbGdvcml0aG0sIFNIQS0wLCBhcyBkZWZpbmVkXG4gKiBpbiBGSVBTIFBVQiAxODAtMVxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBkZXJpdmVkIGZyb20gc2hhMS5qcyBvZiB0aGUgc2FtZSByZXBvc2l0b3J5LlxuICogVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBTSEEtMCBhbmQgU0hBLTEgaXMganVzdCBhIGJpdHdpc2Ugcm90YXRlIGxlZnRcbiAqIG9wZXJhdGlvbiB3YXMgYWRkZWQuXG4gKi9cblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxuXG52YXIgVyA9IG5ldyBBcnJheSg4MClcblxuZnVuY3Rpb24gU2hhICgpIHtcbiAgdGhpcy5pbml0KClcbiAgdGhpcy5fdyA9IFdcblxuICBIYXNoLmNhbGwodGhpcywgNjQsIDU2KVxufVxuXG5pbmhlcml0cyhTaGEsIEhhc2gpXG5cblNoYS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4Njc0NTIzMDEgfCAwXG4gIHRoaXMuX2IgPSAweGVmY2RhYjg5IHwgMFxuICB0aGlzLl9jID0gMHg5OGJhZGNmZSB8IDBcbiAgdGhpcy5fZCA9IDB4MTAzMjU0NzYgfCAwXG4gIHRoaXMuX2UgPSAweGMzZDJlMWYwIHwgMFxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8qXG4gKiBCaXR3aXNlIHJvdGF0ZSBhIDMyLWJpdCBudW1iZXIgdG8gdGhlIGxlZnQuXG4gKi9cbmZ1bmN0aW9uIHJvbCAobnVtLCBjbnQpIHtcbiAgcmV0dXJuIChudW0gPDwgY250KSB8IChudW0gPj4+ICgzMiAtIGNudCkpXG59XG5cblNoYS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhID0gdGhpcy5fYVxuICB2YXIgYiA9IHRoaXMuX2JcbiAgdmFyIGMgPSB0aGlzLl9jXG4gIHZhciBkID0gdGhpcy5fZFxuICB2YXIgZSA9IHRoaXMuX2VcblxuICB2YXIgaiA9IDBcbiAgdmFyIGtcblxuICAvKlxuICAgKiBTSEEtMSBoYXMgYSBiaXR3aXNlIHJvdGF0ZSBsZWZ0IG9wZXJhdGlvbi4gQnV0LCBTSEEgaXMgbm90XG4gICAqIGZ1bmN0aW9uIGNhbGNXKCkgeyByZXR1cm4gcm9sKFdbaiAtIDNdIF4gV1tqIC0gIDhdIF4gV1tqIC0gMTRdIF4gV1tqIC0gMTZdLCAxKSB9XG4gICAqL1xuICBmdW5jdGlvbiBjYWxjVyAoKSB7IHJldHVybiBXW2ogLSAzXSBeIFdbaiAtIDhdIF4gV1tqIC0gMTRdIF4gV1tqIC0gMTZdIH1cbiAgZnVuY3Rpb24gbG9vcCAodywgZikge1xuICAgIFdbal0gPSB3XG5cbiAgICB2YXIgdCA9IHJvbChhLCA1KSArIGYgKyBlICsgdyArIGtcblxuICAgIGUgPSBkXG4gICAgZCA9IGNcbiAgICBjID0gcm9sKGIsIDMwKVxuICAgIGIgPSBhXG4gICAgYSA9IHRcbiAgICBqKytcbiAgfVxuXG4gIGsgPSAxNTE4NTAwMjQ5XG4gIHdoaWxlIChqIDwgMTYpIGxvb3AoTS5yZWFkSW50MzJCRShqICogNCksIChiICYgYykgfCAoKH5iKSAmIGQpKVxuICB3aGlsZSAoaiA8IDIwKSBsb29wKGNhbGNXKCksIChiICYgYykgfCAoKH5iKSAmIGQpKVxuICBrID0gMTg1OTc3NTM5M1xuICB3aGlsZSAoaiA8IDQwKSBsb29wKGNhbGNXKCksIGIgXiBjIF4gZClcbiAgayA9IC0xODk0MDA3NTg4XG4gIHdoaWxlIChqIDwgNjApIGxvb3AoY2FsY1coKSwgKGIgJiBjKSB8IChiICYgZCkgfCAoYyAmIGQpKVxuICBrID0gLTg5OTQ5NzUxNFxuICB3aGlsZSAoaiA8IDgwKSBsb29wKGNhbGNXKCksIGIgXiBjIF4gZClcblxuICB0aGlzLl9hID0gKGEgKyB0aGlzLl9hKSB8IDBcbiAgdGhpcy5fYiA9IChiICsgdGhpcy5fYikgfCAwXG4gIHRoaXMuX2MgPSAoYyArIHRoaXMuX2MpIHwgMFxuICB0aGlzLl9kID0gKGQgKyB0aGlzLl9kKSB8IDBcbiAgdGhpcy5fZSA9IChlICsgdGhpcy5fZSkgfCAwXG59XG5cblNoYS5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gbmV3IEJ1ZmZlcigyMClcblxuICBILndyaXRlSW50MzJCRSh0aGlzLl9hIHwgMCwgMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYiB8IDAsIDQpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2MgfCAwLCA4KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9kIHwgMCwgMTIpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2UgfCAwLCAxNilcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYVxuXG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WTNKbFlYUmxMV2hoYzJndmJtOWtaVjl0YjJSMWJHVnpMM05vWVM1cWN5OXphR0V1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxWEc0Z0tpQkJJRXBoZG1GVFkzSnBjSFFnYVcxd2JHVnRaVzUwWVhScGIyNGdiMllnZEdobElGTmxZM1Z5WlNCSVlYTm9JRUZzWjI5eWFYUm9iU3dnVTBoQkxUQXNJR0Z6SUdSbFptbHVaV1JjYmlBcUlHbHVJRVpKVUZNZ1VGVkNJREU0TUMweFhHNGdLaUJVYUdseklITnZkWEpqWlNCamIyUmxJR2x6SUdSbGNtbDJaV1FnWm5KdmJTQnphR0V4TG1weklHOW1JSFJvWlNCellXMWxJSEpsY0c5emFYUnZjbmt1WEc0Z0tpQlVhR1VnWkdsbVptVnlaVzVqWlNCaVpYUjNaV1Z1SUZOSVFTMHdJR0Z1WkNCVFNFRXRNU0JwY3lCcWRYTjBJR0VnWW1sMGQybHpaU0J5YjNSaGRHVWdiR1ZtZEZ4dUlDb2diM0JsY21GMGFXOXVJSGRoY3lCaFpHUmxaQzVjYmlBcUwxeHVYRzUyWVhJZ2FXNW9aWEpwZEhNZ1BTQnlaWEYxYVhKbEtDZHBibWhsY21sMGN5Y3BYRzUyWVhJZ1NHRnphQ0E5SUhKbGNYVnBjbVVvSnk0dmFHRnphQ2NwWEc1Y2JuWmhjaUJYSUQwZ2JtVjNJRUZ5Y21GNUtEZ3dLVnh1WEc1bWRXNWpkR2x2YmlCVGFHRWdLQ2tnZTF4dUlDQjBhR2x6TG1sdWFYUW9LVnh1SUNCMGFHbHpMbDkzSUQwZ1YxeHVYRzRnSUVoaGMyZ3VZMkZzYkNoMGFHbHpMQ0EyTkN3Z05UWXBYRzU5WEc1Y2JtbHVhR1Z5YVhSektGTm9ZU3dnU0dGemFDbGNibHh1VTJoaExuQnliM1J2ZEhsd1pTNXBibWwwSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNCMGFHbHpMbDloSUQwZ01IZzJOelExTWpNd01TQjhJREJjYmlBZ2RHaHBjeTVmWWlBOUlEQjRaV1pqWkdGaU9Ea2dmQ0F3WEc0Z0lIUm9hWE11WDJNZ1BTQXdlRGs0WW1Ga1kyWmxJSHdnTUZ4dUlDQjBhR2x6TGw5a0lEMGdNSGd4TURNeU5UUTNOaUI4SURCY2JpQWdkR2hwY3k1ZlpTQTlJREI0WXpOa01tVXhaakFnZkNBd1hHNWNiaUFnY21WMGRYSnVJSFJvYVhOY2JuMWNibHh1THlwY2JpQXFJRUpwZEhkcGMyVWdjbTkwWVhSbElHRWdNekl0WW1sMElHNTFiV0psY2lCMGJ5QjBhR1VnYkdWbWRDNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z2NtOXNJQ2h1ZFcwc0lHTnVkQ2tnZTF4dUlDQnlaWFIxY200Z0tHNTFiU0E4UENCamJuUXBJSHdnS0c1MWJTQStQajRnS0RNeUlDMGdZMjUwS1NsY2JuMWNibHh1VTJoaExuQnliM1J2ZEhsd1pTNWZkWEJrWVhSbElEMGdablZ1WTNScGIyNGdLRTBwSUh0Y2JpQWdkbUZ5SUZjZ1BTQjBhR2x6TGw5M1hHNWNiaUFnZG1GeUlHRWdQU0IwYUdsekxsOWhYRzRnSUhaaGNpQmlJRDBnZEdocGN5NWZZbHh1SUNCMllYSWdZeUE5SUhSb2FYTXVYMk5jYmlBZ2RtRnlJR1FnUFNCMGFHbHpMbDlrWEc0Z0lIWmhjaUJsSUQwZ2RHaHBjeTVmWlZ4dVhHNGdJSFpoY2lCcUlEMGdNRnh1SUNCMllYSWdhMXh1WEc0Z0lDOHFYRzRnSUNBcUlGTklRUzB4SUdoaGN5QmhJR0pwZEhkcGMyVWdjbTkwWVhSbElHeGxablFnYjNCbGNtRjBhVzl1TGlCQ2RYUXNJRk5JUVNCcGN5QnViM1JjYmlBZ0lDb2dablZ1WTNScGIyNGdZMkZzWTFjb0tTQjdJSEpsZEhWeWJpQnliMndvVjF0cUlDMGdNMTBnWGlCWFcyb2dMU0FnT0YwZ1hpQlhXMm9nTFNBeE5GMGdYaUJYVzJvZ0xTQXhObDBzSURFcElIMWNiaUFnSUNvdlhHNGdJR1oxYm1OMGFXOXVJR05oYkdOWElDZ3BJSHNnY21WMGRYSnVJRmRiYWlBdElETmRJRjRnVjF0cUlDMGdPRjBnWGlCWFcyb2dMU0F4TkYwZ1hpQlhXMm9nTFNBeE5sMGdmVnh1SUNCbWRXNWpkR2x2YmlCc2IyOXdJQ2gzTENCbUtTQjdYRzRnSUNBZ1YxdHFYU0E5SUhkY2JseHVJQ0FnSUhaaGNpQjBJRDBnY205c0tHRXNJRFVwSUNzZ1ppQXJJR1VnS3lCM0lDc2dhMXh1WEc0Z0lDQWdaU0E5SUdSY2JpQWdJQ0JrSUQwZ1kxeHVJQ0FnSUdNZ1BTQnliMndvWWl3Z016QXBYRzRnSUNBZ1lpQTlJR0ZjYmlBZ0lDQmhJRDBnZEZ4dUlDQWdJR29ySzF4dUlDQjlYRzVjYmlBZ2F5QTlJREUxTVRnMU1EQXlORGxjYmlBZ2QyaHBiR1VnS0dvZ1BDQXhOaWtnYkc5dmNDaE5MbkpsWVdSSmJuUXpNa0pGS0dvZ0tpQTBLU3dnS0dJZ0ppQmpLU0I4SUNnb2ZtSXBJQ1lnWkNrcFhHNGdJSGRvYVd4bElDaHFJRHdnTWpBcElHeHZiM0FvWTJGc1kxY29LU3dnS0dJZ0ppQmpLU0I4SUNnb2ZtSXBJQ1lnWkNrcFhHNGdJR3NnUFNBeE9EVTVOemMxTXprelhHNGdJSGRvYVd4bElDaHFJRHdnTkRBcElHeHZiM0FvWTJGc1kxY29LU3dnWWlCZUlHTWdYaUJrS1Z4dUlDQnJJRDBnTFRFNE9UUXdNRGMxT0RoY2JpQWdkMmhwYkdVZ0tHb2dQQ0EyTUNrZ2JHOXZjQ2hqWVd4alZ5Z3BMQ0FvWWlBbUlHTXBJSHdnS0dJZ0ppQmtLU0I4SUNoaklDWWdaQ2twWEc0Z0lHc2dQU0F0T0RrNU5EazNOVEUwWEc0Z0lIZG9hV3hsSUNocUlEd2dPREFwSUd4dmIzQW9ZMkZzWTFjb0tTd2dZaUJlSUdNZ1hpQmtLVnh1WEc0Z0lIUm9hWE11WDJFZ1BTQW9ZU0FySUhSb2FYTXVYMkVwSUh3Z01GeHVJQ0IwYUdsekxsOWlJRDBnS0dJZ0t5QjBhR2x6TGw5aUtTQjhJREJjYmlBZ2RHaHBjeTVmWXlBOUlDaGpJQ3NnZEdocGN5NWZZeWtnZkNBd1hHNGdJSFJvYVhNdVgyUWdQU0FvWkNBcklIUm9hWE11WDJRcElId2dNRnh1SUNCMGFHbHpMbDlsSUQwZ0tHVWdLeUIwYUdsekxsOWxLU0I4SURCY2JuMWNibHh1VTJoaExuQnliM1J2ZEhsd1pTNWZhR0Z6YUNBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ2RtRnlJRWdnUFNCdVpYY2dRblZtWm1WeUtESXdLVnh1WEc0Z0lFZ3VkM0pwZEdWSmJuUXpNa0pGS0hSb2FYTXVYMkVnZkNBd0xDQXdLVnh1SUNCSUxuZHlhWFJsU1c1ME16SkNSU2gwYUdsekxsOWlJSHdnTUN3Z05DbGNiaUFnU0M1M2NtbDBaVWx1ZERNeVFrVW9kR2hwY3k1Zll5QjhJREFzSURncFhHNGdJRWd1ZDNKcGRHVkpiblF6TWtKRktIUm9hWE11WDJRZ2ZDQXdMQ0F4TWlsY2JpQWdTQzUzY21sMFpVbHVkRE15UWtVb2RHaHBjeTVmWlNCOElEQXNJREUyS1Z4dVhHNGdJSEpsZEhWeWJpQklYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1UyaGhYRzVjYmlKZGZRPT0iLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG4vLyBwcm90b3R5cGUgY2xhc3MgZm9yIGhhc2ggZnVuY3Rpb25zXG5mdW5jdGlvbiBIYXNoIChibG9ja1NpemUsIGZpbmFsU2l6ZSkge1xuICB0aGlzLl9ibG9jayA9IG5ldyBCdWZmZXIoYmxvY2tTaXplKVxuICB0aGlzLl9maW5hbFNpemUgPSBmaW5hbFNpemVcbiAgdGhpcy5fYmxvY2tTaXplID0gYmxvY2tTaXplXG4gIHRoaXMuX2xlbiA9IDBcbiAgdGhpcy5fcyA9IDBcbn1cblxuSGFzaC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEsIGVuYykge1xuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jID0gZW5jIHx8ICd1dGY4J1xuICAgIGRhdGEgPSBuZXcgQnVmZmVyKGRhdGEsIGVuYylcbiAgfVxuXG4gIHZhciBsID0gdGhpcy5fbGVuICs9IGRhdGEubGVuZ3RoXG4gIHZhciBzID0gdGhpcy5fcyB8fCAwXG4gIHZhciBmID0gMFxuICB2YXIgYnVmZmVyID0gdGhpcy5fYmxvY2tcblxuICB3aGlsZSAocyA8IGwpIHtcbiAgICB2YXIgdCA9IE1hdGgubWluKGRhdGEubGVuZ3RoLCBmICsgdGhpcy5fYmxvY2tTaXplIC0gKHMgJSB0aGlzLl9ibG9ja1NpemUpKVxuICAgIHZhciBjaCA9ICh0IC0gZilcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2g7IGkrKykge1xuICAgICAgYnVmZmVyWyhzICUgdGhpcy5fYmxvY2tTaXplKSArIGldID0gZGF0YVtpICsgZl1cbiAgICB9XG5cbiAgICBzICs9IGNoXG4gICAgZiArPSBjaFxuXG4gICAgaWYgKChzICUgdGhpcy5fYmxvY2tTaXplKSA9PT0gMCkge1xuICAgICAgdGhpcy5fdXBkYXRlKGJ1ZmZlcilcbiAgICB9XG4gIH1cbiAgdGhpcy5fcyA9IHNcblxuICByZXR1cm4gdGhpc1xufVxuXG5IYXNoLnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIC8vIFN1cHBvc2UgdGhlIGxlbmd0aCBvZiB0aGUgbWVzc2FnZSBNLCBpbiBiaXRzLCBpcyBsXG4gIHZhciBsID0gdGhpcy5fbGVuICogOFxuXG4gIC8vIEFwcGVuZCB0aGUgYml0IDEgdG8gdGhlIGVuZCBvZiB0aGUgbWVzc2FnZVxuICB0aGlzLl9ibG9ja1t0aGlzLl9sZW4gJSB0aGlzLl9ibG9ja1NpemVdID0gMHg4MFxuXG4gIC8vIGFuZCB0aGVuIGsgemVybyBiaXRzLCB3aGVyZSBrIGlzIHRoZSBzbWFsbGVzdCBub24tbmVnYXRpdmUgc29sdXRpb24gdG8gdGhlIGVxdWF0aW9uIChsICsgMSArIGspID09PSBmaW5hbFNpemUgbW9kIGJsb2NrU2l6ZVxuICB0aGlzLl9ibG9jay5maWxsKDAsIHRoaXMuX2xlbiAlIHRoaXMuX2Jsb2NrU2l6ZSArIDEpXG5cbiAgaWYgKGwgJSAodGhpcy5fYmxvY2tTaXplICogOCkgPj0gdGhpcy5fZmluYWxTaXplICogOCkge1xuICAgIHRoaXMuX3VwZGF0ZSh0aGlzLl9ibG9jaylcbiAgICB0aGlzLl9ibG9jay5maWxsKDApXG4gIH1cblxuICAvLyB0byB0aGlzIGFwcGVuZCB0aGUgYmxvY2sgd2hpY2ggaXMgZXF1YWwgdG8gdGhlIG51bWJlciBsIHdyaXR0ZW4gaW4gYmluYXJ5XG4gIC8vIFRPRE86IGhhbmRsZSBjYXNlIHdoZXJlIGwgaXMgPiBNYXRoLnBvdygyLCAyOSlcbiAgdGhpcy5fYmxvY2sud3JpdGVJbnQzMkJFKGwsIHRoaXMuX2Jsb2NrU2l6ZSAtIDQpXG5cbiAgdmFyIGhhc2ggPSB0aGlzLl91cGRhdGUodGhpcy5fYmxvY2spIHx8IHRoaXMuX2hhc2goKVxuXG4gIHJldHVybiBlbmMgPyBoYXNoLnRvU3RyaW5nKGVuYykgOiBoYXNoXG59XG5cbkhhc2gucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignX3VwZGF0ZSBtdXN0IGJlIGltcGxlbWVudGVkIGJ5IHN1YmNsYXNzJylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoXG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WTNKbFlYUmxMV2hoYzJndmJtOWtaVjl0YjJSMWJHVnpMM05vWVM1cWN5OW9ZWE5vTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeThnY0hKdmRHOTBlWEJsSUdOc1lYTnpJR1p2Y2lCb1lYTm9JR1oxYm1OMGFXOXVjMXh1Wm5WdVkzUnBiMjRnU0dGemFDQW9ZbXh2WTJ0VGFYcGxMQ0JtYVc1aGJGTnBlbVVwSUh0Y2JpQWdkR2hwY3k1ZllteHZZMnNnUFNCdVpYY2dRblZtWm1WeUtHSnNiMk5yVTJsNlpTbGNiaUFnZEdocGN5NWZabWx1WVd4VGFYcGxJRDBnWm1sdVlXeFRhWHBsWEc0Z0lIUm9hWE11WDJKc2IyTnJVMmw2WlNBOUlHSnNiMk5yVTJsNlpWeHVJQ0IwYUdsekxsOXNaVzRnUFNBd1hHNGdJSFJvYVhNdVgzTWdQU0F3WEc1OVhHNWNia2hoYzJndWNISnZkRzkwZVhCbExuVndaR0YwWlNBOUlHWjFibU4wYVc5dUlDaGtZWFJoTENCbGJtTXBJSHRjYmlBZ2FXWWdLSFI1Y0dWdlppQmtZWFJoSUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lHVnVZeUE5SUdWdVl5QjhmQ0FuZFhSbU9DZGNiaUFnSUNCa1lYUmhJRDBnYm1WM0lFSjFabVpsY2loa1lYUmhMQ0JsYm1NcFhHNGdJSDFjYmx4dUlDQjJZWElnYkNBOUlIUm9hWE11WDJ4bGJpQXJQU0JrWVhSaExteGxibWQwYUZ4dUlDQjJZWElnY3lBOUlIUm9hWE11WDNNZ2ZId2dNRnh1SUNCMllYSWdaaUE5SURCY2JpQWdkbUZ5SUdKMVptWmxjaUE5SUhSb2FYTXVYMkpzYjJOclhHNWNiaUFnZDJocGJHVWdLSE1nUENCc0tTQjdYRzRnSUNBZ2RtRnlJSFFnUFNCTllYUm9MbTFwYmloa1lYUmhMbXhsYm1kMGFDd2daaUFySUhSb2FYTXVYMkpzYjJOclUybDZaU0F0SUNoeklDVWdkR2hwY3k1ZllteHZZMnRUYVhwbEtTbGNiaUFnSUNCMllYSWdZMmdnUFNBb2RDQXRJR1lwWEc1Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUdOb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUdKMVptWmxjbHNvY3lBbElIUm9hWE11WDJKc2IyTnJVMmw2WlNrZ0t5QnBYU0E5SUdSaGRHRmJhU0FySUdaZFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnY3lBclBTQmphRnh1SUNBZ0lHWWdLejBnWTJoY2JseHVJQ0FnSUdsbUlDZ29jeUFsSUhSb2FYTXVYMkpzYjJOclUybDZaU2tnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJSFJvYVhNdVgzVndaR0YwWlNoaWRXWm1aWElwWEc0Z0lDQWdmVnh1SUNCOVhHNGdJSFJvYVhNdVgzTWdQU0J6WEc1Y2JpQWdjbVYwZFhKdUlIUm9hWE5jYm4xY2JseHVTR0Z6YUM1d2NtOTBiM1I1Y0dVdVpHbG5aWE4wSUQwZ1puVnVZM1JwYjI0Z0tHVnVZeWtnZTF4dUlDQXZMeUJUZFhCd2IzTmxJSFJvWlNCc1pXNW5kR2dnYjJZZ2RHaGxJRzFsYzNOaFoyVWdUU3dnYVc0Z1ltbDBjeXdnYVhNZ2JGeHVJQ0IyWVhJZ2JDQTlJSFJvYVhNdVgyeGxiaUFxSURoY2JseHVJQ0F2THlCQmNIQmxibVFnZEdobElHSnBkQ0F4SUhSdklIUm9aU0JsYm1RZ2IyWWdkR2hsSUcxbGMzTmhaMlZjYmlBZ2RHaHBjeTVmWW14dlkydGJkR2hwY3k1ZmJHVnVJQ1VnZEdocGN5NWZZbXh2WTJ0VGFYcGxYU0E5SURCNE9EQmNibHh1SUNBdkx5QmhibVFnZEdobGJpQnJJSHBsY204Z1ltbDBjeXdnZDJobGNtVWdheUJwY3lCMGFHVWdjMjFoYkd4bGMzUWdibTl1TFc1bFoyRjBhWFpsSUhOdmJIVjBhVzl1SUhSdklIUm9aU0JsY1hWaGRHbHZiaUFvYkNBcklERWdLeUJyS1NBOVBUMGdabWx1WVd4VGFYcGxJRzF2WkNCaWJHOWphMU5wZW1WY2JpQWdkR2hwY3k1ZllteHZZMnN1Wm1sc2JDZ3dMQ0IwYUdsekxsOXNaVzRnSlNCMGFHbHpMbDlpYkc5amExTnBlbVVnS3lBeEtWeHVYRzRnSUdsbUlDaHNJQ1VnS0hSb2FYTXVYMkpzYjJOclUybDZaU0FxSURncElENDlJSFJvYVhNdVgyWnBibUZzVTJsNlpTQXFJRGdwSUh0Y2JpQWdJQ0IwYUdsekxsOTFjR1JoZEdVb2RHaHBjeTVmWW14dlkyc3BYRzRnSUNBZ2RHaHBjeTVmWW14dlkyc3VabWxzYkNnd0tWeHVJQ0I5WEc1Y2JpQWdMeThnZEc4Z2RHaHBjeUJoY0hCbGJtUWdkR2hsSUdKc2IyTnJJSGRvYVdOb0lHbHpJR1Z4ZFdGc0lIUnZJSFJvWlNCdWRXMWlaWElnYkNCM2NtbDBkR1Z1SUdsdUlHSnBibUZ5ZVZ4dUlDQXZMeUJVVDBSUE9pQm9ZVzVrYkdVZ1kyRnpaU0IzYUdWeVpTQnNJR2x6SUQ0Z1RXRjBhQzV3YjNjb01pd2dNamtwWEc0Z0lIUm9hWE11WDJKc2IyTnJMbmR5YVhSbFNXNTBNekpDUlNoc0xDQjBhR2x6TGw5aWJHOWphMU5wZW1VZ0xTQTBLVnh1WEc0Z0lIWmhjaUJvWVhOb0lEMGdkR2hwY3k1ZmRYQmtZWFJsS0hSb2FYTXVYMkpzYjJOcktTQjhmQ0IwYUdsekxsOW9ZWE5vS0NsY2JseHVJQ0J5WlhSMWNtNGdaVzVqSUQ4Z2FHRnphQzUwYjFOMGNtbHVaeWhsYm1NcElEb2dhR0Z6YUZ4dWZWeHVYRzVJWVhOb0xuQnliM1J2ZEhsd1pTNWZkWEJrWVhSbElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oxOTFjR1JoZEdVZ2JYVnpkQ0JpWlNCcGJYQnNaVzFsYm5SbFpDQmllU0J6ZFdKamJHRnpjeWNwWEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdTR0Z6YUZ4dUlsMTkiLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG4vKlxuQ3J5cHRvSlMgdjMuMS4yXG5jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanNcbihjKSAyMDA5LTIwMTMgYnkgSmVmZiBNb3R0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZVxuKi9cbi8qKiBAcHJlc2VydmVcbihjKSAyMDEyIGJ5IEPDqWRyaWMgTWVzbmlsLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG5SZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG5cbiAgICAtIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAgICAtIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cblxuVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuLy8gY29uc3RhbnRzIHRhYmxlXG52YXIgemwgPSBbXG4gIDAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsXG4gIDcsIDQsIDEzLCAxLCAxMCwgNiwgMTUsIDMsIDEyLCAwLCA5LCA1LCAyLCAxNCwgMTEsIDgsXG4gIDMsIDEwLCAxNCwgNCwgOSwgMTUsIDgsIDEsIDIsIDcsIDAsIDYsIDEzLCAxMSwgNSwgMTIsXG4gIDEsIDksIDExLCAxMCwgMCwgOCwgMTIsIDQsIDEzLCAzLCA3LCAxNSwgMTQsIDUsIDYsIDIsXG4gIDQsIDAsIDUsIDksIDcsIDEyLCAyLCAxMCwgMTQsIDEsIDMsIDgsIDExLCA2LCAxNSwgMTNcbl1cblxudmFyIHpyID0gW1xuICA1LCAxNCwgNywgMCwgOSwgMiwgMTEsIDQsIDEzLCA2LCAxNSwgOCwgMSwgMTAsIDMsIDEyLFxuICA2LCAxMSwgMywgNywgMCwgMTMsIDUsIDEwLCAxNCwgMTUsIDgsIDEyLCA0LCA5LCAxLCAyLFxuICAxNSwgNSwgMSwgMywgNywgMTQsIDYsIDksIDExLCA4LCAxMiwgMiwgMTAsIDAsIDQsIDEzLFxuICA4LCA2LCA0LCAxLCAzLCAxMSwgMTUsIDAsIDUsIDEyLCAyLCAxMywgOSwgNywgMTAsIDE0LFxuICAxMiwgMTUsIDEwLCA0LCAxLCA1LCA4LCA3LCA2LCAyLCAxMywgMTQsIDAsIDMsIDksIDExXG5dXG5cbnZhciBzbCA9IFtcbiAgMTEsIDE0LCAxNSwgMTIsIDUsIDgsIDcsIDksIDExLCAxMywgMTQsIDE1LCA2LCA3LCA5LCA4LFxuICA3LCA2LCA4LCAxMywgMTEsIDksIDcsIDE1LCA3LCAxMiwgMTUsIDksIDExLCA3LCAxMywgMTIsXG4gIDExLCAxMywgNiwgNywgMTQsIDksIDEzLCAxNSwgMTQsIDgsIDEzLCA2LCA1LCAxMiwgNywgNSxcbiAgMTEsIDEyLCAxNCwgMTUsIDE0LCAxNSwgOSwgOCwgOSwgMTQsIDUsIDYsIDgsIDYsIDUsIDEyLFxuICA5LCAxNSwgNSwgMTEsIDYsIDgsIDEzLCAxMiwgNSwgMTIsIDEzLCAxNCwgMTEsIDgsIDUsIDZcbl1cblxudmFyIHNyID0gW1xuICA4LCA5LCA5LCAxMSwgMTMsIDE1LCAxNSwgNSwgNywgNywgOCwgMTEsIDE0LCAxNCwgMTIsIDYsXG4gIDksIDEzLCAxNSwgNywgMTIsIDgsIDksIDExLCA3LCA3LCAxMiwgNywgNiwgMTUsIDEzLCAxMSxcbiAgOSwgNywgMTUsIDExLCA4LCA2LCA2LCAxNCwgMTIsIDEzLCA1LCAxNCwgMTMsIDEzLCA3LCA1LFxuICAxNSwgNSwgOCwgMTEsIDE0LCAxNCwgNiwgMTQsIDYsIDksIDEyLCA5LCAxMiwgNSwgMTUsIDgsXG4gIDgsIDUsIDEyLCA5LCAxMiwgNSwgMTQsIDYsIDgsIDEzLCA2LCA1LCAxNSwgMTMsIDExLCAxMVxuXVxuXG52YXIgaGwgPSBbMHgwMDAwMDAwMCwgMHg1QTgyNzk5OSwgMHg2RUQ5RUJBMSwgMHg4RjFCQkNEQywgMHhBOTUzRkQ0RV1cbnZhciBociA9IFsweDUwQTI4QkU2LCAweDVDNEREMTI0LCAweDZENzAzRUYzLCAweDdBNkQ3NkU5LCAweDAwMDAwMDAwXVxuXG5mdW5jdGlvbiBieXRlc1RvV29yZHMgKGJ5dGVzKSB7XG4gIHZhciB3b3JkcyA9IFtdXG4gIGZvciAodmFyIGkgPSAwLCBiID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrLCBiICs9IDgpIHtcbiAgICB3b3Jkc1tiID4+PiA1XSB8PSBieXRlc1tpXSA8PCAoMjQgLSBiICUgMzIpXG4gIH1cbiAgcmV0dXJuIHdvcmRzXG59XG5cbmZ1bmN0aW9uIHdvcmRzVG9CeXRlcyAod29yZHMpIHtcbiAgdmFyIGJ5dGVzID0gW11cbiAgZm9yICh2YXIgYiA9IDA7IGIgPCB3b3Jkcy5sZW5ndGggKiAzMjsgYiArPSA4KSB7XG4gICAgYnl0ZXMucHVzaCgod29yZHNbYiA+Pj4gNV0gPj4+ICgyNCAtIGIgJSAzMikpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0Jsb2NrIChILCBNLCBvZmZzZXQpIHtcbiAgLy8gc3dhcCBlbmRpYW5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgdmFyIG9mZnNldF9pID0gb2Zmc2V0ICsgaVxuICAgIHZhciBNX29mZnNldF9pID0gTVtvZmZzZXRfaV1cblxuICAgIC8vIFN3YXBcbiAgICBNW29mZnNldF9pXSA9IChcbiAgICAgICgoKE1fb2Zmc2V0X2kgPDwgOCkgfCAoTV9vZmZzZXRfaSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcbiAgICAgICgoKE1fb2Zmc2V0X2kgPDwgMjQpIHwgKE1fb2Zmc2V0X2kgPj4+IDgpKSAmIDB4ZmYwMGZmMDApXG4gICAgKVxuICB9XG5cbiAgLy8gV29ya2luZyB2YXJpYWJsZXNcbiAgdmFyIGFsLCBibCwgY2wsIGRsLCBlbFxuICB2YXIgYXIsIGJyLCBjciwgZHIsIGVyXG5cbiAgYXIgPSBhbCA9IEhbMF1cbiAgYnIgPSBibCA9IEhbMV1cbiAgY3IgPSBjbCA9IEhbMl1cbiAgZHIgPSBkbCA9IEhbM11cbiAgZXIgPSBlbCA9IEhbNF1cblxuICAvLyBjb21wdXRhdGlvblxuICB2YXIgdFxuICBmb3IgKGkgPSAwOyBpIDwgODA7IGkgKz0gMSkge1xuICAgIHQgPSAoYWwgKyBNW29mZnNldCArIHpsW2ldXSkgfCAwXG4gICAgaWYgKGkgPCAxNikge1xuICAgICAgdCArPSBmMShibCwgY2wsIGRsKSArIGhsWzBdXG4gICAgfSBlbHNlIGlmIChpIDwgMzIpIHtcbiAgICAgIHQgKz0gZjIoYmwsIGNsLCBkbCkgKyBobFsxXVxuICAgIH0gZWxzZSBpZiAoaSA8IDQ4KSB7XG4gICAgICB0ICs9IGYzKGJsLCBjbCwgZGwpICsgaGxbMl1cbiAgICB9IGVsc2UgaWYgKGkgPCA2NCkge1xuICAgICAgdCArPSBmNChibCwgY2wsIGRsKSArIGhsWzNdXG4gICAgfSBlbHNlIHsvLyBpZiAoaTw4MCkge1xuICAgICAgdCArPSBmNShibCwgY2wsIGRsKSArIGhsWzRdXG4gICAgfVxuICAgIHQgPSB0IHwgMFxuICAgIHQgPSByb3RsKHQsIHNsW2ldKVxuICAgIHQgPSAodCArIGVsKSB8IDBcbiAgICBhbCA9IGVsXG4gICAgZWwgPSBkbFxuICAgIGRsID0gcm90bChjbCwgMTApXG4gICAgY2wgPSBibFxuICAgIGJsID0gdFxuXG4gICAgdCA9IChhciArIE1bb2Zmc2V0ICsgenJbaV1dKSB8IDBcbiAgICBpZiAoaSA8IDE2KSB7XG4gICAgICB0ICs9IGY1KGJyLCBjciwgZHIpICsgaHJbMF1cbiAgICB9IGVsc2UgaWYgKGkgPCAzMikge1xuICAgICAgdCArPSBmNChiciwgY3IsIGRyKSArIGhyWzFdXG4gICAgfSBlbHNlIGlmIChpIDwgNDgpIHtcbiAgICAgIHQgKz0gZjMoYnIsIGNyLCBkcikgKyBoclsyXVxuICAgIH0gZWxzZSBpZiAoaSA8IDY0KSB7XG4gICAgICB0ICs9IGYyKGJyLCBjciwgZHIpICsgaHJbM11cbiAgICB9IGVsc2Ugey8vIGlmIChpPDgwKSB7XG4gICAgICB0ICs9IGYxKGJyLCBjciwgZHIpICsgaHJbNF1cbiAgICB9XG5cbiAgICB0ID0gdCB8IDBcbiAgICB0ID0gcm90bCh0LCBzcltpXSlcbiAgICB0ID0gKHQgKyBlcikgfCAwXG4gICAgYXIgPSBlclxuICAgIGVyID0gZHJcbiAgICBkciA9IHJvdGwoY3IsIDEwKVxuICAgIGNyID0gYnJcbiAgICBiciA9IHRcbiAgfVxuXG4gIC8vIGludGVybWVkaWF0ZSBoYXNoIHZhbHVlXG4gIHQgPSAoSFsxXSArIGNsICsgZHIpIHwgMFxuICBIWzFdID0gKEhbMl0gKyBkbCArIGVyKSB8IDBcbiAgSFsyXSA9IChIWzNdICsgZWwgKyBhcikgfCAwXG4gIEhbM10gPSAoSFs0XSArIGFsICsgYnIpIHwgMFxuICBIWzRdID0gKEhbMF0gKyBibCArIGNyKSB8IDBcbiAgSFswXSA9IHRcbn1cblxuZnVuY3Rpb24gZjEgKHgsIHksIHopIHtcbiAgcmV0dXJuICgoeCkgXiAoeSkgXiAoeikpXG59XG5cbmZ1bmN0aW9uIGYyICh4LCB5LCB6KSB7XG4gIHJldHVybiAoKCh4KSAmICh5KSkgfCAoKH54KSAmICh6KSkpXG59XG5cbmZ1bmN0aW9uIGYzICh4LCB5LCB6KSB7XG4gIHJldHVybiAoKCh4KSB8ICh+KHkpKSkgXiAoeikpXG59XG5cbmZ1bmN0aW9uIGY0ICh4LCB5LCB6KSB7XG4gIHJldHVybiAoKCh4KSAmICh6KSkgfCAoKHkpICYgKH4oeikpKSlcbn1cblxuZnVuY3Rpb24gZjUgKHgsIHksIHopIHtcbiAgcmV0dXJuICgoeCkgXiAoKHkpIHwgKH4oeikpKSlcbn1cblxuZnVuY3Rpb24gcm90bCAoeCwgbikge1xuICByZXR1cm4gKHggPDwgbikgfCAoeCA+Pj4gKDMyIC0gbikpXG59XG5cbmZ1bmN0aW9uIHJpcGVtZDE2MCAobWVzc2FnZSkge1xuICB2YXIgSCA9IFsweDY3NDUyMzAxLCAweEVGQ0RBQjg5LCAweDk4QkFEQ0ZFLCAweDEwMzI1NDc2LCAweEMzRDJFMUYwXVxuXG4gIGlmICh0eXBlb2YgbWVzc2FnZSA9PT0gJ3N0cmluZycpIHtcbiAgICBtZXNzYWdlID0gbmV3IEJ1ZmZlcihtZXNzYWdlLCAndXRmOCcpXG4gIH1cblxuICB2YXIgbSA9IGJ5dGVzVG9Xb3JkcyhtZXNzYWdlKVxuXG4gIHZhciBuQml0c0xlZnQgPSBtZXNzYWdlLmxlbmd0aCAqIDhcbiAgdmFyIG5CaXRzVG90YWwgPSBtZXNzYWdlLmxlbmd0aCAqIDhcblxuICAvLyBBZGQgcGFkZGluZ1xuICBtW25CaXRzTGVmdCA+Pj4gNV0gfD0gMHg4MCA8PCAoMjQgLSBuQml0c0xlZnQgJSAzMilcbiAgbVsoKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTRdID0gKFxuICAgICgoKG5CaXRzVG90YWwgPDwgOCkgfCAobkJpdHNUb3RhbCA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcbiAgICAoKChuQml0c1RvdGFsIDw8IDI0KSB8IChuQml0c1RvdGFsID4+PiA4KSkgJiAweGZmMDBmZjAwKVxuICApXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtLmxlbmd0aDsgaSArPSAxNikge1xuICAgIHByb2Nlc3NCbG9jayhILCBtLCBpKVxuICB9XG5cbiAgLy8gc3dhcCBlbmRpYW5cbiAgZm9yIChpID0gMDsgaSA8IDU7IGkrKykge1xuICAgIC8vIHNob3J0Y3V0XG4gICAgdmFyIEhfaSA9IEhbaV1cblxuICAgIC8vIFN3YXBcbiAgICBIW2ldID0gKCgoSF9pIDw8IDgpIHwgKEhfaSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcbiAgICAgICgoKEhfaSA8PCAyNCkgfCAoSF9pID4+PiA4KSkgJiAweGZmMDBmZjAwKVxuICB9XG5cbiAgdmFyIGRpZ2VzdGJ5dGVzID0gd29yZHNUb0J5dGVzKEgpXG4gIHJldHVybiBuZXcgQnVmZmVyKGRpZ2VzdGJ5dGVzKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJpcGVtZDE2MFxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlkzSmxZWFJsTFdoaGMyZ3ZibTlrWlY5dGIyUjFiR1Z6TDNKcGNHVnRaREUyTUM5c2FXSXZjbWx3Wlcxa01UWXdMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeXBjYmtOeWVYQjBiMHBUSUhZekxqRXVNbHh1WTI5a1pTNW5iMjluYkdVdVkyOXRMM0F2WTNKNWNIUnZMV3B6WEc0b1l5a2dNakF3T1MweU1ERXpJR0o1SUVwbFptWWdUVzkwZEM0Z1FXeHNJSEpwWjJoMGN5QnlaWE5sY25abFpDNWNibU52WkdVdVoyOXZaMnhsTG1OdmJTOXdMMk55ZVhCMGJ5MXFjeTkzYVd0cEwweHBZMlZ1YzJWY2Jpb3ZYRzR2S2lvZ1FIQnlaWE5sY25abFhHNG9ZeWtnTWpBeE1pQmllU0JEdzZsa2NtbGpJRTFsYzI1cGJDNGdRV3hzSUhKcFoyaDBjeUJ5WlhObGNuWmxaQzVjYmx4dVVtVmthWE4wY21saWRYUnBiMjRnWVc1a0lIVnpaU0JwYmlCemIzVnlZMlVnWVc1a0lHSnBibUZ5ZVNCbWIzSnRjeXdnZDJsMGFDQnZjaUIzYVhSb2IzVjBJRzF2WkdsbWFXTmhkR2x2Yml3Z1lYSmxJSEJsY20xcGRIUmxaQ0J3Y205MmFXUmxaQ0IwYUdGMElIUm9aU0JtYjJ4c2IzZHBibWNnWTI5dVpHbDBhVzl1Y3lCaGNtVWdiV1YwT2x4dVhHNGdJQ0FnTFNCU1pXUnBjM1J5YVdKMWRHbHZibk1nYjJZZ2MyOTFjbU5sSUdOdlpHVWdiWFZ6ZENCeVpYUmhhVzRnZEdobElHRmliM1psSUdOdmNIbHlhV2RvZENCdWIzUnBZMlVzSUhSb2FYTWdiR2x6ZENCdlppQmpiMjVrYVhScGIyNXpJR0Z1WkNCMGFHVWdabTlzYkc5M2FXNW5JR1JwYzJOc1lXbHRaWEl1WEc0Z0lDQWdMU0JTWldScGMzUnlhV0oxZEdsdmJuTWdhVzRnWW1sdVlYSjVJR1p2Y20wZ2JYVnpkQ0J5WlhCeWIyUjFZMlVnZEdobElHRmliM1psSUdOdmNIbHlhV2RvZENCdWIzUnBZMlVzSUhSb2FYTWdiR2x6ZENCdlppQmpiMjVrYVhScGIyNXpJR0Z1WkNCMGFHVWdabTlzYkc5M2FXNW5JR1JwYzJOc1lXbHRaWElnYVc0Z2RHaGxJR1J2WTNWdFpXNTBZWFJwYjI0Z1lXNWtMMjl5SUc5MGFHVnlJRzFoZEdWeWFXRnNjeUJ3Y205MmFXUmxaQ0IzYVhSb0lIUm9aU0JrYVhOMGNtbGlkWFJwYjI0dVhHNWNibFJJU1ZNZ1UwOUdWRmRCVWtVZ1NWTWdVRkpQVmtsRVJVUWdRbGtnVkVoRklFTlBVRmxTU1VkSVZDQklUMHhFUlZKVElFRk9SQ0JEVDA1VVVrbENWVlJQVWxNZ1hDSkJVeUJKVTF3aUlFRk9SQ0JCVGxrZ1JWaFFVa1ZUVXlCUFVpQkpUVkJNU1VWRUlGZEJVbEpCVGxSSlJWTXNJRWxPUTB4VlJFbE9SeXdnUWxWVUlFNVBWQ0JNU1UxSlZFVkVJRlJQTENCVVNFVWdTVTFRVEVsRlJDQlhRVkpTUVU1VVNVVlRJRTlHSUUxRlVrTklRVTVVUVVKSlRFbFVXU0JCVGtRZ1JrbFVUa1ZUVXlCR1QxSWdRU0JRUVZKVVNVTlZURUZTSUZCVlVsQlBVMFVnUVZKRklFUkpVME5NUVVsTlJVUXVJRWxPSUU1UElFVldSVTVVSUZOSVFVeE1JRlJJUlNCRFQxQlpVa2xIU0ZRZ1NFOU1SRVZTSUU5U0lFTlBUbFJTU1VKVlZFOVNVeUJDUlNCTVNVRkNURVVnUms5U0lFRk9XU0JFU1ZKRlExUXNJRWxPUkVsU1JVTlVMQ0JKVGtOSlJFVk9WRUZNTENCVFVFVkRTVUZNTENCRldFVk5VRXhCVWxrc0lFOVNJRU5QVGxORlVWVkZUbFJKUVV3Z1JFRk5RVWRGVXlBb1NVNURURlZFU1U1SExDQkNWVlFnVGs5VUlFeEpUVWxVUlVRZ1ZFOHNJRkJTVDBOVlVrVk5SVTVVSUU5R0lGTlZRbE5VU1ZSVlZFVWdSMDlQUkZNZ1QxSWdVMFZTVmtsRFJWTTdJRXhQVTFNZ1QwWWdWVk5GTENCRVFWUkJMQ0JQVWlCUVVrOUdTVlJUT3lCUFVpQkNWVk5KVGtWVFV5QkpUbFJGVWxKVlVGUkpUMDRwSUVoUFYwVldSVklnUTBGVlUwVkVJRUZPUkNCUFRpQkJUbGtnVkVoRlQxSlpJRTlHSUV4SlFVSkpURWxVV1N3Z1YwaEZWRWhGVWlCSlRpQkRUMDVVVWtGRFZDd2dVMVJTU1VOVUlFeEpRVUpKVEVsVVdTd2dUMUlnVkU5U1ZDQW9TVTVEVEZWRVNVNUhJRTVGUjB4SlIwVk9RMFVnVDFJZ1QxUklSVkpYU1ZORktTQkJVa2xUU1U1SElFbE9JRUZPV1NCWFFWa2dUMVZVSUU5R0lGUklSU0JWVTBVZ1QwWWdWRWhKVXlCVFQwWlVWMEZTUlN3Z1JWWkZUaUJKUmlCQlJGWkpVMFZFSUU5R0lGUklSU0JRVDFOVFNVSkpURWxVV1NCUFJpQlRWVU5JSUVSQlRVRkhSUzVjYmlvdlhHNWNiaTh2SUdOdmJuTjBZVzUwY3lCMFlXSnNaVnh1ZG1GeUlIcHNJRDBnVzF4dUlDQXdMQ0F4TENBeUxDQXpMQ0EwTENBMUxDQTJMQ0EzTENBNExDQTVMQ0F4TUN3Z01URXNJREV5TENBeE15d2dNVFFzSURFMUxGeHVJQ0EzTENBMExDQXhNeXdnTVN3Z01UQXNJRFlzSURFMUxDQXpMQ0F4TWl3Z01Dd2dPU3dnTlN3Z01pd2dNVFFzSURFeExDQTRMRnh1SUNBekxDQXhNQ3dnTVRRc0lEUXNJRGtzSURFMUxDQTRMQ0F4TENBeUxDQTNMQ0F3TENBMkxDQXhNeXdnTVRFc0lEVXNJREV5TEZ4dUlDQXhMQ0E1TENBeE1Td2dNVEFzSURBc0lEZ3NJREV5TENBMExDQXhNeXdnTXl3Z055d2dNVFVzSURFMExDQTFMQ0EyTENBeUxGeHVJQ0EwTENBd0xDQTFMQ0E1TENBM0xDQXhNaXdnTWl3Z01UQXNJREUwTENBeExDQXpMQ0E0TENBeE1Td2dOaXdnTVRVc0lERXpYRzVkWEc1Y2JuWmhjaUI2Y2lBOUlGdGNiaUFnTlN3Z01UUXNJRGNzSURBc0lEa3NJRElzSURFeExDQTBMQ0F4TXl3Z05pd2dNVFVzSURnc0lERXNJREV3TENBekxDQXhNaXhjYmlBZ05pd2dNVEVzSURNc0lEY3NJREFzSURFekxDQTFMQ0F4TUN3Z01UUXNJREUxTENBNExDQXhNaXdnTkN3Z09Td2dNU3dnTWl4Y2JpQWdNVFVzSURVc0lERXNJRE1zSURjc0lERTBMQ0EyTENBNUxDQXhNU3dnT0N3Z01USXNJRElzSURFd0xDQXdMQ0EwTENBeE15eGNiaUFnT0N3Z05pd2dOQ3dnTVN3Z015d2dNVEVzSURFMUxDQXdMQ0ExTENBeE1pd2dNaXdnTVRNc0lEa3NJRGNzSURFd0xDQXhOQ3hjYmlBZ01USXNJREUxTENBeE1Dd2dOQ3dnTVN3Z05Td2dPQ3dnTnl3Z05pd2dNaXdnTVRNc0lERTBMQ0F3TENBekxDQTVMQ0F4TVZ4dVhWeHVYRzUyWVhJZ2Myd2dQU0JiWEc0Z0lERXhMQ0F4TkN3Z01UVXNJREV5TENBMUxDQTRMQ0EzTENBNUxDQXhNU3dnTVRNc0lERTBMQ0F4TlN3Z05pd2dOeXdnT1N3Z09DeGNiaUFnTnl3Z05pd2dPQ3dnTVRNc0lERXhMQ0E1TENBM0xDQXhOU3dnTnl3Z01USXNJREUxTENBNUxDQXhNU3dnTnl3Z01UTXNJREV5TEZ4dUlDQXhNU3dnTVRNc0lEWXNJRGNzSURFMExDQTVMQ0F4TXl3Z01UVXNJREUwTENBNExDQXhNeXdnTml3Z05Td2dNVElzSURjc0lEVXNYRzRnSURFeExDQXhNaXdnTVRRc0lERTFMQ0F4TkN3Z01UVXNJRGtzSURnc0lEa3NJREUwTENBMUxDQTJMQ0E0TENBMkxDQTFMQ0F4TWl4Y2JpQWdPU3dnTVRVc0lEVXNJREV4TENBMkxDQTRMQ0F4TXl3Z01USXNJRFVzSURFeUxDQXhNeXdnTVRRc0lERXhMQ0E0TENBMUxDQTJYRzVkWEc1Y2JuWmhjaUJ6Y2lBOUlGdGNiaUFnT0N3Z09Td2dPU3dnTVRFc0lERXpMQ0F4TlN3Z01UVXNJRFVzSURjc0lEY3NJRGdzSURFeExDQXhOQ3dnTVRRc0lERXlMQ0EyTEZ4dUlDQTVMQ0F4TXl3Z01UVXNJRGNzSURFeUxDQTRMQ0E1TENBeE1Td2dOeXdnTnl3Z01USXNJRGNzSURZc0lERTFMQ0F4TXl3Z01URXNYRzRnSURrc0lEY3NJREUxTENBeE1Td2dPQ3dnTml3Z05pd2dNVFFzSURFeUxDQXhNeXdnTlN3Z01UUXNJREV6TENBeE15d2dOeXdnTlN4Y2JpQWdNVFVzSURVc0lEZ3NJREV4TENBeE5Dd2dNVFFzSURZc0lERTBMQ0EyTENBNUxDQXhNaXdnT1N3Z01USXNJRFVzSURFMUxDQTRMRnh1SUNBNExDQTFMQ0F4TWl3Z09Td2dNVElzSURVc0lERTBMQ0EyTENBNExDQXhNeXdnTml3Z05Td2dNVFVzSURFekxDQXhNU3dnTVRGY2JsMWNibHh1ZG1GeUlHaHNJRDBnV3pCNE1EQXdNREF3TURBc0lEQjROVUU0TWpjNU9Ua3NJREI0TmtWRU9VVkNRVEVzSURCNE9FWXhRa0pEUkVNc0lEQjRRVGsxTTBaRU5FVmRYRzUyWVhJZ2FISWdQU0JiTUhnMU1FRXlPRUpGTml3Z01IZzFRelJFUkRFeU5Dd2dNSGcyUkRjd00wVkdNeXdnTUhnM1FUWkVOelpGT1N3Z01IZ3dNREF3TURBd01GMWNibHh1Wm5WdVkzUnBiMjRnWW5sMFpYTlViMWR2Y21SeklDaGllWFJsY3lrZ2UxeHVJQ0IyWVhJZ2QyOXlaSE1nUFNCYlhWeHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Dd2dZaUE5SURBN0lHa2dQQ0JpZVhSbGN5NXNaVzVuZEdnN0lHa3JLeXdnWWlBclBTQTRLU0I3WEc0Z0lDQWdkMjl5WkhOYllpQStQajRnTlYwZ2ZEMGdZbmwwWlhOYmFWMGdQRHdnS0RJMElDMGdZaUFsSURNeUtWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCM2IzSmtjMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQjNiM0prYzFSdlFubDBaWE1nS0hkdmNtUnpLU0I3WEc0Z0lIWmhjaUJpZVhSbGN5QTlJRnRkWEc0Z0lHWnZjaUFvZG1GeUlHSWdQU0F3T3lCaUlEd2dkMjl5WkhNdWJHVnVaM1JvSUNvZ016STdJR0lnS3owZ09Da2dlMXh1SUNBZ0lHSjVkR1Z6TG5CMWMyZ29LSGR2Y21SelcySWdQajQrSURWZElENCtQaUFvTWpRZ0xTQmlJQ1VnTXpJcEtTQW1JREI0UmtZcFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUdKNWRHVnpYRzU5WEc1Y2JtWjFibU4wYVc5dUlIQnliMk5sYzNOQ2JHOWpheUFvU0N3Z1RTd2diMlptYzJWMEtTQjdYRzRnSUM4dklITjNZWEFnWlc1a2FXRnVYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z01UWTdJR2tyS3lrZ2UxeHVJQ0FnSUhaaGNpQnZabVp6WlhSZmFTQTlJRzltWm5ObGRDQXJJR2xjYmlBZ0lDQjJZWElnVFY5dlptWnpaWFJmYVNBOUlFMWJiMlptYzJWMFgybGRYRzVjYmlBZ0lDQXZMeUJUZDJGd1hHNGdJQ0FnVFZ0dlptWnpaWFJmYVYwZ1BTQW9YRzRnSUNBZ0lDQW9LQ2hOWDI5bVpuTmxkRjlwSUR3OElEZ3BJSHdnS0UxZmIyWm1jMlYwWDJrZ1BqNCtJREkwS1NrZ0ppQXdlREF3Wm1Zd01HWm1LU0I4WEc0Z0lDQWdJQ0FvS0NoTlgyOW1abk5sZEY5cElEdzhJREkwS1NCOElDaE5YMjltWm5ObGRGOXBJRDQrUGlBNEtTa2dKaUF3ZUdabU1EQm1aakF3S1Z4dUlDQWdJQ2xjYmlBZ2ZWeHVYRzRnSUM4dklGZHZjbXRwYm1jZ2RtRnlhV0ZpYkdWelhHNGdJSFpoY2lCaGJDd2dZbXdzSUdOc0xDQmtiQ3dnWld4Y2JpQWdkbUZ5SUdGeUxDQmljaXdnWTNJc0lHUnlMQ0JsY2x4dVhHNGdJR0Z5SUQwZ1lXd2dQU0JJV3pCZFhHNGdJR0p5SUQwZ1ltd2dQU0JJV3pGZFhHNGdJR055SUQwZ1kyd2dQU0JJV3pKZFhHNGdJR1J5SUQwZ1pHd2dQU0JJV3pOZFhHNGdJR1Z5SUQwZ1pXd2dQU0JJV3pSZFhHNWNiaUFnTHk4Z1kyOXRjSFYwWVhScGIyNWNiaUFnZG1GeUlIUmNiaUFnWm05eUlDaHBJRDBnTURzZ2FTQThJRGd3T3lCcElDczlJREVwSUh0Y2JpQWdJQ0IwSUQwZ0tHRnNJQ3NnVFZ0dlptWnpaWFFnS3lCNmJGdHBYVjBwSUh3Z01GeHVJQ0FnSUdsbUlDaHBJRHdnTVRZcElIdGNiaUFnSUNBZ0lIUWdLejBnWmpFb1ltd3NJR05zTENCa2JDa2dLeUJvYkZzd1hWeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FTQThJRE15S1NCN1hHNGdJQ0FnSUNCMElDczlJR1l5S0dKc0xDQmpiQ3dnWkd3cElDc2dhR3hiTVYxY2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0drZ1BDQTBPQ2tnZTF4dUlDQWdJQ0FnZENBclBTQm1NeWhpYkN3Z1kyd3NJR1JzS1NBcklHaHNXekpkWEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hwSUR3Z05qUXBJSHRjYmlBZ0lDQWdJSFFnS3owZ1pqUW9ZbXdzSUdOc0xDQmtiQ2tnS3lCb2JGc3pYVnh1SUNBZ0lIMGdaV3h6WlNCN0x5OGdhV1lnS0drOE9EQXBJSHRjYmlBZ0lDQWdJSFFnS3owZ1pqVW9ZbXdzSUdOc0xDQmtiQ2tnS3lCb2JGczBYVnh1SUNBZ0lIMWNiaUFnSUNCMElEMGdkQ0I4SURCY2JpQWdJQ0IwSUQwZ2NtOTBiQ2gwTENCemJGdHBYU2xjYmlBZ0lDQjBJRDBnS0hRZ0t5QmxiQ2tnZkNBd1hHNGdJQ0FnWVd3Z1BTQmxiRnh1SUNBZ0lHVnNJRDBnWkd4Y2JpQWdJQ0JrYkNBOUlISnZkR3dvWTJ3c0lERXdLVnh1SUNBZ0lHTnNJRDBnWW14Y2JpQWdJQ0JpYkNBOUlIUmNibHh1SUNBZ0lIUWdQU0FvWVhJZ0t5Qk5XMjltWm5ObGRDQXJJSHB5VzJsZFhTa2dmQ0F3WEc0Z0lDQWdhV1lnS0drZ1BDQXhOaWtnZTF4dUlDQWdJQ0FnZENBclBTQm1OU2hpY2l3Z1kzSXNJR1J5S1NBcklHaHlXekJkWEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hwSUR3Z016SXBJSHRjYmlBZ0lDQWdJSFFnS3owZ1pqUW9ZbklzSUdOeUxDQmtjaWtnS3lCb2Nsc3hYVnh1SUNBZ0lIMGdaV3h6WlNCcFppQW9hU0E4SURRNEtTQjdYRzRnSUNBZ0lDQjBJQ3M5SUdZektHSnlMQ0JqY2l3Z1pISXBJQ3NnYUhKYk1sMWNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHa2dQQ0EyTkNrZ2UxeHVJQ0FnSUNBZ2RDQXJQU0JtTWloaWNpd2dZM0lzSUdSeUtTQXJJR2h5V3pOZFhHNGdJQ0FnZlNCbGJITmxJSHN2THlCcFppQW9hVHc0TUNrZ2UxeHVJQ0FnSUNBZ2RDQXJQU0JtTVNoaWNpd2dZM0lzSUdSeUtTQXJJR2h5V3pSZFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnZENBOUlIUWdmQ0F3WEc0Z0lDQWdkQ0E5SUhKdmRHd29kQ3dnYzNKYmFWMHBYRzRnSUNBZ2RDQTlJQ2gwSUNzZ1pYSXBJSHdnTUZ4dUlDQWdJR0Z5SUQwZ1pYSmNiaUFnSUNCbGNpQTlJR1J5WEc0Z0lDQWdaSElnUFNCeWIzUnNLR055TENBeE1DbGNiaUFnSUNCamNpQTlJR0p5WEc0Z0lDQWdZbklnUFNCMFhHNGdJSDFjYmx4dUlDQXZMeUJwYm5SbGNtMWxaR2xoZEdVZ2FHRnphQ0IyWVd4MVpWeHVJQ0IwSUQwZ0tFaGJNVjBnS3lCamJDQXJJR1J5S1NCOElEQmNiaUFnU0ZzeFhTQTlJQ2hJV3pKZElDc2daR3dnS3lCbGNpa2dmQ0F3WEc0Z0lFaGJNbDBnUFNBb1NGc3pYU0FySUdWc0lDc2dZWElwSUh3Z01GeHVJQ0JJV3pOZElEMGdLRWhiTkYwZ0t5QmhiQ0FySUdKeUtTQjhJREJjYmlBZ1NGczBYU0E5SUNoSVd6QmRJQ3NnWW13Z0t5QmpjaWtnZkNBd1hHNGdJRWhiTUYwZ1BTQjBYRzU5WEc1Y2JtWjFibU4wYVc5dUlHWXhJQ2g0TENCNUxDQjZLU0I3WEc0Z0lISmxkSFZ5YmlBb0tIZ3BJRjRnS0hrcElGNGdLSG9wS1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJtTWlBb2VDd2dlU3dnZWlrZ2UxeHVJQ0J5WlhSMWNtNGdLQ2dvZUNrZ0ppQW9lU2twSUh3Z0tDaCtlQ2tnSmlBb2Vpa3BLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm1NeUFvZUN3Z2VTd2dlaWtnZTF4dUlDQnlaWFIxY200Z0tDZ29lQ2tnZkNBb2ZpaDVLU2twSUY0Z0tIb3BLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm1OQ0FvZUN3Z2VTd2dlaWtnZTF4dUlDQnlaWFIxY200Z0tDZ29lQ2tnSmlBb2Vpa3BJSHdnS0NoNUtTQW1JQ2grS0hvcEtTa3BYRzU5WEc1Y2JtWjFibU4wYVc5dUlHWTFJQ2g0TENCNUxDQjZLU0I3WEc0Z0lISmxkSFZ5YmlBb0tIZ3BJRjRnS0NoNUtTQjhJQ2grS0hvcEtTa3BYRzU5WEc1Y2JtWjFibU4wYVc5dUlISnZkR3dnS0hnc0lHNHBJSHRjYmlBZ2NtVjBkWEp1SUNoNElEdzhJRzRwSUh3Z0tIZ2dQajQrSUNnek1pQXRJRzRwS1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJ5YVhCbGJXUXhOakFnS0cxbGMzTmhaMlVwSUh0Y2JpQWdkbUZ5SUVnZ1BTQmJNSGcyTnpRMU1qTXdNU3dnTUhoRlJrTkVRVUk0T1N3Z01IZzVPRUpCUkVOR1JTd2dNSGd4TURNeU5UUTNOaXdnTUhoRE0wUXlSVEZHTUYxY2JseHVJQ0JwWmlBb2RIbHdaVzltSUcxbGMzTmhaMlVnUFQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ2JXVnpjMkZuWlNBOUlHNWxkeUJDZFdabVpYSW9iV1Z6YzJGblpTd2dKM1YwWmpnbktWeHVJQ0I5WEc1Y2JpQWdkbUZ5SUcwZ1BTQmllWFJsYzFSdlYyOXlaSE1vYldWemMyRm5aU2xjYmx4dUlDQjJZWElnYmtKcGRITk1aV1owSUQwZ2JXVnpjMkZuWlM1c1pXNW5kR2dnS2lBNFhHNGdJSFpoY2lCdVFtbDBjMVJ2ZEdGc0lEMGdiV1Z6YzJGblpTNXNaVzVuZEdnZ0tpQTRYRzVjYmlBZ0x5OGdRV1JrSUhCaFpHUnBibWRjYmlBZ2JWdHVRbWwwYzB4bFpuUWdQajQrSURWZElIdzlJREI0T0RBZ1BEd2dLREkwSUMwZ2JrSnBkSE5NWldaMElDVWdNeklwWEc0Z0lHMWJLQ2dvYmtKcGRITk1aV1owSUNzZ05qUXBJRDQrUGlBNUtTQThQQ0EwS1NBcklERTBYU0E5SUNoY2JpQWdJQ0FvS0NodVFtbDBjMVJ2ZEdGc0lEdzhJRGdwSUh3Z0tHNUNhWFJ6Vkc5MFlXd2dQajQrSURJMEtTa2dKaUF3ZURBd1ptWXdNR1ptS1NCOFhHNGdJQ0FnS0Nnb2JrSnBkSE5VYjNSaGJDQThQQ0F5TkNrZ2ZDQW9ia0pwZEhOVWIzUmhiQ0ErUGo0Z09Da3BJQ1lnTUhobVpqQXdabVl3TUNsY2JpQWdLVnh1WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2diUzVzWlc1bmRHZzdJR2tnS3owZ01UWXBJSHRjYmlBZ0lDQndjbTlqWlhOelFteHZZMnNvU0N3Z2JTd2dhU2xjYmlBZ2ZWeHVYRzRnSUM4dklITjNZWEFnWlc1a2FXRnVYRzRnSUdadmNpQW9hU0E5SURBN0lHa2dQQ0ExT3lCcEt5c3BJSHRjYmlBZ0lDQXZMeUJ6YUc5eWRHTjFkRnh1SUNBZ0lIWmhjaUJJWDJrZ1BTQklXMmxkWEc1Y2JpQWdJQ0F2THlCVGQyRndYRzRnSUNBZ1NGdHBYU0E5SUNnb0tFaGZhU0E4UENBNEtTQjhJQ2hJWDJrZ1BqNCtJREkwS1NrZ0ppQXdlREF3Wm1Zd01HWm1LU0I4WEc0Z0lDQWdJQ0FvS0NoSVgya2dQRHdnTWpRcElId2dLRWhmYVNBK1BqNGdPQ2twSUNZZ01IaG1aakF3Wm1Zd01DbGNiaUFnZlZ4dVhHNGdJSFpoY2lCa2FXZGxjM1JpZVhSbGN5QTlJSGR2Y21SelZHOUNlWFJsY3loSUtWeHVJQ0J5WlhSMWNtNGdibVYzSUVKMVptWmxjaWhrYVdkbGMzUmllWFJsY3lsY2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0J5YVhCbGJXUXhOakJjYmlKZGZRPT0iLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnc3RyZWFtJykuVHJhbnNmb3JtXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyJykuU3RyaW5nRGVjb2RlclxubW9kdWxlLmV4cG9ydHMgPSBDaXBoZXJCYXNlXG5pbmhlcml0cyhDaXBoZXJCYXNlLCBUcmFuc2Zvcm0pXG5mdW5jdGlvbiBDaXBoZXJCYXNlIChoYXNoTW9kZSkge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuICB0aGlzLmhhc2hNb2RlID0gdHlwZW9mIGhhc2hNb2RlID09PSAnc3RyaW5nJ1xuICBpZiAodGhpcy5oYXNoTW9kZSkge1xuICAgIHRoaXNbaGFzaE1vZGVdID0gdGhpcy5fZmluYWxPckRpZ2VzdFxuICB9IGVsc2Uge1xuICAgIHRoaXMuZmluYWwgPSB0aGlzLl9maW5hbE9yRGlnZXN0XG4gIH1cbiAgdGhpcy5fZGVjb2RlciA9IG51bGxcbiAgdGhpcy5fZW5jb2RpbmcgPSBudWxsXG59XG5DaXBoZXJCYXNlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSwgaW5wdXRFbmMsIG91dHB1dEVuYykge1xuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgZGF0YSA9IG5ldyBCdWZmZXIoZGF0YSwgaW5wdXRFbmMpXG4gIH1cbiAgdmFyIG91dERhdGEgPSB0aGlzLl91cGRhdGUoZGF0YSlcbiAgaWYgKHRoaXMuaGFzaE1vZGUpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG4gIGlmIChvdXRwdXRFbmMpIHtcbiAgICBvdXREYXRhID0gdGhpcy5fdG9TdHJpbmcob3V0RGF0YSwgb3V0cHV0RW5jKVxuICB9XG4gIHJldHVybiBvdXREYXRhXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEF1dG9QYWRkaW5nID0gZnVuY3Rpb24gKCkge31cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuZ2V0QXV0aFRhZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gZ2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QXV0aFRhZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gc2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QUFEID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBzZXQgYWFkIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChkYXRhLCBfLCBuZXh0KSB7XG4gIHZhciBlcnJcbiAgdHJ5IHtcbiAgICBpZiAodGhpcy5oYXNoTW9kZSkge1xuICAgICAgdGhpcy5fdXBkYXRlKGRhdGEpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHVzaCh0aGlzLl91cGRhdGUoZGF0YSkpXG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyID0gZVxuICB9IGZpbmFsbHkge1xuICAgIG5leHQoZXJyKVxuICB9XG59XG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fZmx1c2ggPSBmdW5jdGlvbiAoZG9uZSkge1xuICB2YXIgZXJyXG4gIHRyeSB7XG4gICAgdGhpcy5wdXNoKHRoaXMuX2ZpbmFsKCkpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnIgPSBlXG4gIH0gZmluYWxseSB7XG4gICAgZG9uZShlcnIpXG4gIH1cbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLl9maW5hbE9yRGlnZXN0ID0gZnVuY3Rpb24gKG91dHB1dEVuYykge1xuICB2YXIgb3V0RGF0YSA9IHRoaXMuX2ZpbmFsKCkgfHwgbmV3IEJ1ZmZlcignJylcbiAgaWYgKG91dHB1dEVuYykge1xuICAgIG91dERhdGEgPSB0aGlzLl90b1N0cmluZyhvdXREYXRhLCBvdXRwdXRFbmMsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG91dERhdGFcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX3RvU3RyaW5nID0gZnVuY3Rpb24gKHZhbHVlLCBlbmMsIGZpbmFsKSB7XG4gIGlmICghdGhpcy5fZGVjb2Rlcikge1xuICAgIHRoaXMuX2RlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihlbmMpXG4gICAgdGhpcy5fZW5jb2RpbmcgPSBlbmNcbiAgfVxuICBpZiAodGhpcy5fZW5jb2RpbmcgIT09IGVuYykge1xuICAgIHRocm93IG5ldyBFcnJvcignY2FuXFwndCBzd2l0Y2ggZW5jb2RpbmdzJylcbiAgfVxuICB2YXIgb3V0ID0gdGhpcy5fZGVjb2Rlci53cml0ZSh2YWx1ZSlcbiAgaWYgKGZpbmFsKSB7XG4gICAgb3V0ICs9IHRoaXMuX2RlY29kZXIuZW5kKClcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WTNKbFlYUmxMV2hoYzJndmJtOWtaVjl0YjJSMWJHVnpMMk5wY0dobGNpMWlZWE5sTDJsdVpHVjRMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlGUnlZVzV6Wm05eWJTQTlJSEpsY1hWcGNtVW9KM04wY21WaGJTY3BMbFJ5WVc1elptOXliVnh1ZG1GeUlHbHVhR1Z5YVhSeklEMGdjbVZ4ZFdseVpTZ25hVzVvWlhKcGRITW5LVnh1ZG1GeUlGTjBjbWx1WjBSbFkyOWtaWElnUFNCeVpYRjFhWEpsS0NkemRISnBibWRmWkdWamIyUmxjaWNwTGxOMGNtbHVaMFJsWTI5a1pYSmNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdRMmx3YUdWeVFtRnpaVnh1YVc1b1pYSnBkSE1vUTJsd2FHVnlRbUZ6WlN3Z1ZISmhibk5tYjNKdEtWeHVablZ1WTNScGIyNGdRMmx3YUdWeVFtRnpaU0FvYUdGemFFMXZaR1VwSUh0Y2JpQWdWSEpoYm5ObWIzSnRMbU5oYkd3b2RHaHBjeWxjYmlBZ2RHaHBjeTVvWVhOb1RXOWtaU0E5SUhSNWNHVnZaaUJvWVhOb1RXOWtaU0E5UFQwZ0ozTjBjbWx1WnlkY2JpQWdhV1lnS0hSb2FYTXVhR0Z6YUUxdlpHVXBJSHRjYmlBZ0lDQjBhR2x6VzJoaGMyaE5iMlJsWFNBOUlIUm9hWE11WDJacGJtRnNUM0pFYVdkbGMzUmNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQjBhR2x6TG1acGJtRnNJRDBnZEdocGN5NWZabWx1WVd4UGNrUnBaMlZ6ZEZ4dUlDQjlYRzRnSUhSb2FYTXVYMlJsWTI5a1pYSWdQU0J1ZFd4c1hHNGdJSFJvYVhNdVgyVnVZMjlrYVc1bklEMGdiblZzYkZ4dWZWeHVRMmx3YUdWeVFtRnpaUzV3Y205MGIzUjVjR1V1ZFhCa1lYUmxJRDBnWm5WdVkzUnBiMjRnS0dSaGRHRXNJR2x1Y0hWMFJXNWpMQ0J2ZFhSd2RYUkZibU1wSUh0Y2JpQWdhV1lnS0hSNWNHVnZaaUJrWVhSaElEMDlQU0FuYzNSeWFXNW5KeWtnZTF4dUlDQWdJR1JoZEdFZ1BTQnVaWGNnUW5WbVptVnlLR1JoZEdFc0lHbHVjSFYwUlc1aktWeHVJQ0I5WEc0Z0lIWmhjaUJ2ZFhSRVlYUmhJRDBnZEdocGN5NWZkWEJrWVhSbEtHUmhkR0VwWEc0Z0lHbG1JQ2gwYUdsekxtaGhjMmhOYjJSbEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTmNiaUFnZlZ4dUlDQnBaaUFvYjNWMGNIVjBSVzVqS1NCN1hHNGdJQ0FnYjNWMFJHRjBZU0E5SUhSb2FYTXVYM1J2VTNSeWFXNW5LRzkxZEVSaGRHRXNJRzkxZEhCMWRFVnVZeWxjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdiM1YwUkdGMFlWeHVmVnh1WEc1RGFYQm9aWEpDWVhObExuQnliM1J2ZEhsd1pTNXpaWFJCZFhSdlVHRmtaR2x1WnlBOUlHWjFibU4wYVc5dUlDZ3BJSHQ5WEc1Y2JrTnBjR2hsY2tKaGMyVXVjSEp2ZEc5MGVYQmxMbWRsZEVGMWRHaFVZV2NnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduZEhKNWFXNW5JSFJ2SUdkbGRDQmhkWFJvSUhSaFp5QnBiaUIxYm5OMWNIQnZjblJsWkNCemRHRjBaU2NwWEc1OVhHNWNia05wY0dobGNrSmhjMlV1Y0hKdmRHOTBlWEJsTG5ObGRFRjFkR2hVWVdjZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnbmRISjVhVzVuSUhSdklITmxkQ0JoZFhSb0lIUmhaeUJwYmlCMWJuTjFjSEJ2Y25SbFpDQnpkR0YwWlNjcFhHNTlYRzVjYmtOcGNHaGxja0poYzJVdWNISnZkRzkwZVhCbExuTmxkRUZCUkNBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkMGNubHBibWNnZEc4Z2MyVjBJR0ZoWkNCcGJpQjFibk4xY0hCdmNuUmxaQ0J6ZEdGMFpTY3BYRzU5WEc1Y2JrTnBjR2hsY2tKaGMyVXVjSEp2ZEc5MGVYQmxMbDkwY21GdWMyWnZjbTBnUFNCbWRXNWpkR2x2YmlBb1pHRjBZU3dnWHl3Z2JtVjRkQ2tnZTF4dUlDQjJZWElnWlhKeVhHNGdJSFJ5ZVNCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11YUdGemFFMXZaR1VwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYM1Z3WkdGMFpTaGtZWFJoS1Z4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQjBhR2x6TG5CMWMyZ29kR2hwY3k1ZmRYQmtZWFJsS0dSaGRHRXBLVnh1SUNBZ0lIMWNiaUFnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUdWeWNpQTlJR1ZjYmlBZ2ZTQm1hVzVoYkd4NUlIdGNiaUFnSUNCdVpYaDBLR1Z5Y2lsY2JpQWdmVnh1ZlZ4dVEybHdhR1Z5UW1GelpTNXdjbTkwYjNSNWNHVXVYMlpzZFhOb0lEMGdablZ1WTNScGIyNGdLR1J2Ym1VcElIdGNiaUFnZG1GeUlHVnljbHh1SUNCMGNua2dlMXh1SUNBZ0lIUm9hWE11Y0hWemFDaDBhR2x6TGw5bWFXNWhiQ2dwS1Z4dUlDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdaWEp5SUQwZ1pWeHVJQ0I5SUdacGJtRnNiSGtnZTF4dUlDQWdJR1J2Ym1Vb1pYSnlLVnh1SUNCOVhHNTlYRzVEYVhCb1pYSkNZWE5sTG5CeWIzUnZkSGx3WlM1ZlptbHVZV3hQY2tScFoyVnpkQ0E5SUdaMWJtTjBhVzl1SUNodmRYUndkWFJGYm1NcElIdGNiaUFnZG1GeUlHOTFkRVJoZEdFZ1BTQjBhR2x6TGw5bWFXNWhiQ2dwSUh4OElHNWxkeUJDZFdabVpYSW9KeWNwWEc0Z0lHbG1JQ2h2ZFhSd2RYUkZibU1wSUh0Y2JpQWdJQ0J2ZFhSRVlYUmhJRDBnZEdocGN5NWZkRzlUZEhKcGJtY29iM1YwUkdGMFlTd2diM1YwY0hWMFJXNWpMQ0IwY25WbEtWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCdmRYUkVZWFJoWEc1OVhHNWNia05wY0dobGNrSmhjMlV1Y0hKdmRHOTBlWEJsTGw5MGIxTjBjbWx1WnlBOUlHWjFibU4wYVc5dUlDaDJZV3gxWlN3Z1pXNWpMQ0JtYVc1aGJDa2dlMXh1SUNCcFppQW9JWFJvYVhNdVgyUmxZMjlrWlhJcElIdGNiaUFnSUNCMGFHbHpMbDlrWldOdlpHVnlJRDBnYm1WM0lGTjBjbWx1WjBSbFkyOWtaWElvWlc1aktWeHVJQ0FnSUhSb2FYTXVYMlZ1WTI5a2FXNW5JRDBnWlc1alhHNGdJSDFjYmlBZ2FXWWdLSFJvYVhNdVgyVnVZMjlrYVc1bklDRTlQU0JsYm1NcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjJOaGJseGNKM1FnYzNkcGRHTm9JR1Z1WTI5a2FXNW5jeWNwWEc0Z0lIMWNiaUFnZG1GeUlHOTFkQ0E5SUhSb2FYTXVYMlJsWTI5a1pYSXVkM0pwZEdVb2RtRnNkV1VwWEc0Z0lHbG1JQ2htYVc1aGJDa2dlMXh1SUNBZ0lHOTFkQ0FyUFNCMGFHbHpMbDlrWldOdlpHVnlMbVZ1WkNncFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUc5MWRGeHVmVnh1SWwxOSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbi8vIGFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYXBhdGlsL3BlbXN0cmlwXG52YXIgZmluZFByb2MgPSAvUHJvYy1UeXBlOiA0LEVOQ1JZUFRFRFxccj9cXG5ERUstSW5mbzogQUVTLSgoPzoxMjgpfCg/OjE5Mil8KD86MjU2KSktQ0JDLChbMC05QS1IXSspXFxyP1xcblxccj9cXG4oWzAtOUEtelxcblxcclxcK1xcL1xcPV0rKVxccj9cXG4vbVxudmFyIHN0YXJ0UmVnZXggPSAvXi0tLS0tQkVHSU4gKC4qKSBLRVktLS0tLVxccj9cXG4vbVxudmFyIGZ1bGxSZWdleCA9IC9eLS0tLS1CRUdJTiAoLiopIEtFWS0tLS0tXFxyP1xcbihbMC05QS16XFxuXFxyXFwrXFwvXFw9XSspXFxyP1xcbi0tLS0tRU5EIFxcMSBLRVktLS0tLSQvbVxudmFyIGV2cCA9IHJlcXVpcmUoJ2V2cF9ieXRlc3Rva2V5JylcbnZhciBjaXBoZXJzID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1hZXMnKVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2tleSwgcGFzc3dvcmQpIHtcbiAgdmFyIGtleSA9IG9rZXkudG9TdHJpbmcoKVxuICB2YXIgbWF0Y2ggPSBrZXkubWF0Y2goZmluZFByb2MpXG4gIHZhciBkZWNyeXB0ZWRcbiAgaWYgKCFtYXRjaCkge1xuICAgIHZhciBtYXRjaDIgPSBrZXkubWF0Y2goZnVsbFJlZ2V4KVxuICAgIGRlY3J5cHRlZCA9IG5ldyBCdWZmZXIobWF0Y2gyWzJdLnJlcGxhY2UoL1xccj9cXG4vZywgJycpLCAnYmFzZTY0JylcbiAgfSBlbHNlIHtcbiAgICB2YXIgc3VpdGUgPSAnYWVzJyArIG1hdGNoWzFdXG4gICAgdmFyIGl2ID0gbmV3IEJ1ZmZlcihtYXRjaFsyXSwgJ2hleCcpXG4gICAgdmFyIGNpcGhlclRleHQgPSBuZXcgQnVmZmVyKG1hdGNoWzNdLnJlcGxhY2UoL1xccj9cXG4vZywgJycpLCAnYmFzZTY0JylcbiAgICB2YXIgY2lwaGVyS2V5ID0gZXZwKHBhc3N3b3JkLCBpdi5zbGljZSgwLCA4KSwgcGFyc2VJbnQobWF0Y2hbMV0sIDEwKSkua2V5XG4gICAgdmFyIG91dCA9IFtdXG4gICAgdmFyIGNpcGhlciA9IGNpcGhlcnMuY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwgY2lwaGVyS2V5LCBpdilcbiAgICBvdXQucHVzaChjaXBoZXIudXBkYXRlKGNpcGhlclRleHQpKVxuICAgIG91dC5wdXNoKGNpcGhlci5maW5hbCgpKVxuICAgIGRlY3J5cHRlZCA9IEJ1ZmZlci5jb25jYXQob3V0KVxuICB9XG4gIHZhciB0YWcgPSBrZXkubWF0Y2goc3RhcnRSZWdleClbMV0gKyAnIEtFWSdcbiAgcmV0dXJuIHtcbiAgICB0YWc6IHRhZyxcbiAgICBkYXRhOiBkZWNyeXB0ZWRcbiAgfVxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMXphV2R1TDI1dlpHVmZiVzlrZFd4bGN5OXdZWEp6WlMxaGMyNHhMMlpwZUZCeWIyTXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CSWl3aVptbHNaU0k2SW1kbGJtVnlZWFJsWkM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZMeUJoWkdGd2RHVmtJR1p5YjIwZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwyRndZWFJwYkM5d1pXMXpkSEpwY0Z4dWRtRnlJR1pwYm1SUWNtOWpJRDBnTDFCeWIyTXRWSGx3WlRvZ05DeEZUa05TV1ZCVVJVUmNYSEkvWEZ4dVJFVkxMVWx1Wm04NklFRkZVeTBvS0Q4Nk1USTRLWHdvUHpveE9USXBmQ2cvT2pJMU5pa3BMVU5DUXl3b1d6QXRPVUV0U0YwcktWeGNjajljWEc1Y1hISS9YRnh1S0Zzd0xUbEJMWHBjWEc1Y1hISmNYQ3RjWEM5Y1hEMWRLeWxjWEhJL1hGeHVMMjFjYm5aaGNpQnpkR0Z5ZEZKbFoyVjRJRDBnTDE0dExTMHRMVUpGUjBsT0lDZ3VLaWtnUzBWWkxTMHRMUzFjWEhJL1hGeHVMMjFjYm5aaGNpQm1kV3hzVW1WblpYZ2dQU0F2WGkwdExTMHRRa1ZIU1U0Z0tDNHFLU0JMUlZrdExTMHRMVnhjY2o5Y1hHNG9XekF0T1VFdGVseGNibHhjY2x4Y0sxeGNMMXhjUFYwcktWeGNjajljWEc0dExTMHRMVVZPUkNCY1hERWdTMFZaTFMwdExTMGtMMjFjYm5aaGNpQmxkbkFnUFNCeVpYRjFhWEpsS0NkbGRuQmZZbmwwWlhOMGIydGxlU2NwWEc1MllYSWdZMmx3YUdWeWN5QTlJSEpsY1hWcGNtVW9KMkp5YjNkelpYSnBabmt0WVdWekp5bGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdLRzlyWlhrc0lIQmhjM04zYjNKa0tTQjdYRzRnSUhaaGNpQnJaWGtnUFNCdmEyVjVMblJ2VTNSeWFXNW5LQ2xjYmlBZ2RtRnlJRzFoZEdOb0lEMGdhMlY1TG0xaGRHTm9LR1pwYm1SUWNtOWpLVnh1SUNCMllYSWdaR1ZqY25sd2RHVmtYRzRnSUdsbUlDZ2hiV0YwWTJncElIdGNiaUFnSUNCMllYSWdiV0YwWTJneUlEMGdhMlY1TG0xaGRHTm9LR1oxYkd4U1pXZGxlQ2xjYmlBZ0lDQmtaV055ZVhCMFpXUWdQU0J1WlhjZ1FuVm1abVZ5S0cxaGRHTm9NbHN5WFM1eVpYQnNZV05sS0M5Y1hISS9YRnh1TDJjc0lDY25LU3dnSjJKaGMyVTJOQ2NwWEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnZG1GeUlITjFhWFJsSUQwZ0oyRmxjeWNnS3lCdFlYUmphRnN4WFZ4dUlDQWdJSFpoY2lCcGRpQTlJRzVsZHlCQ2RXWm1aWElvYldGMFkyaGJNbDBzSUNkb1pYZ25LVnh1SUNBZ0lIWmhjaUJqYVhCb1pYSlVaWGgwSUQwZ2JtVjNJRUoxWm1abGNpaHRZWFJqYUZzelhTNXlaWEJzWVdObEtDOWNYSEkvWEZ4dUwyY3NJQ2NuS1N3Z0oySmhjMlUyTkNjcFhHNGdJQ0FnZG1GeUlHTnBjR2hsY2t0bGVTQTlJR1YyY0Nod1lYTnpkMjl5WkN3Z2FYWXVjMnhwWTJVb01Dd2dPQ2tzSUhCaGNuTmxTVzUwS0cxaGRHTm9XekZkTENBeE1Da3BMbXRsZVZ4dUlDQWdJSFpoY2lCdmRYUWdQU0JiWFZ4dUlDQWdJSFpoY2lCamFYQm9aWElnUFNCamFYQm9aWEp6TG1OeVpXRjBaVVJsWTJsd2FHVnlhWFlvYzNWcGRHVXNJR05wY0dobGNrdGxlU3dnYVhZcFhHNGdJQ0FnYjNWMExuQjFjMmdvWTJsd2FHVnlMblZ3WkdGMFpTaGphWEJvWlhKVVpYaDBLU2xjYmlBZ0lDQnZkWFF1Y0hWemFDaGphWEJvWlhJdVptbHVZV3dvS1NsY2JpQWdJQ0JrWldOeWVYQjBaV1FnUFNCQ2RXWm1aWEl1WTI5dVkyRjBLRzkxZENsY2JpQWdmVnh1SUNCMllYSWdkR0ZuSUQwZ2EyVjVMbTFoZEdOb0tITjBZWEowVW1WblpYZ3BXekZkSUNzZ0p5QkxSVmtuWEc0Z0lISmxkSFZ5YmlCN1hHNGdJQ0FnZEdGbk9pQjBZV2NzWEc0Z0lDQWdaR0YwWVRvZ1pHVmpjbmx3ZEdWa1hHNGdJSDFjYm4xY2JpSmRmUT09IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xudmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgbW9kZXMgPSByZXF1aXJlKCcuL21vZGVzJylcbnZhciBlYnRrID0gcmVxdWlyZSgnZXZwX2J5dGVzdG9rZXknKVxudmFyIFN0cmVhbUNpcGhlciA9IHJlcXVpcmUoJy4vc3RyZWFtQ2lwaGVyJylcbnZhciBBdXRoQ2lwaGVyID0gcmVxdWlyZSgnLi9hdXRoQ2lwaGVyJylcbmluaGVyaXRzKENpcGhlciwgVHJhbnNmb3JtKVxuZnVuY3Rpb24gQ2lwaGVyIChtb2RlLCBrZXksIGl2KSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBDaXBoZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBDaXBoZXIobW9kZSwga2V5LCBpdilcbiAgfVxuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuICB0aGlzLl9jYWNoZSA9IG5ldyBTcGxpdHRlcigpXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IG5ldyBCdWZmZXIoaXYubGVuZ3RoKVxuICBpdi5jb3B5KHRoaXMuX3ByZXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gdHJ1ZVxufVxuQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG4gIHdoaWxlICgoY2h1bmsgPSB0aGlzLl9jYWNoZS5nZXQoKSkpIHtcbiAgICB0aGluZyA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgICBvdXQucHVzaCh0aGluZylcbiAgfVxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChvdXQpXG59XG5DaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNodW5rID0gdGhpcy5fY2FjaGUuZmx1c2goKVxuICBpZiAodGhpcy5fYXV0b3BhZGRpbmcpIHtcbiAgICBjaHVuayA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgICB0aGlzLl9jaXBoZXIuc2NydWIoKVxuICAgIHJldHVybiBjaHVua1xuICB9IGVsc2UgaWYgKGNodW5rLnRvU3RyaW5nKCdoZXgnKSAhPT0gJzEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwJykge1xuICAgIHRoaXMuX2NpcGhlci5zY3J1YigpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdkYXRhIG5vdCBtdWx0aXBsZSBvZiBibG9jayBsZW5ndGgnKVxuICB9XG59XG5DaXBoZXIucHJvdG90eXBlLnNldEF1dG9QYWRkaW5nID0gZnVuY3Rpb24gKHNldFRvKSB7XG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gISFzZXRUb1xufVxuXG5mdW5jdGlvbiBTcGxpdHRlciAoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTcGxpdHRlcikpIHtcbiAgICByZXR1cm4gbmV3IFNwbGl0dGVyKClcbiAgfVxuICB0aGlzLmNhY2hlID0gbmV3IEJ1ZmZlcignJylcbn1cblNwbGl0dGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgZGF0YV0pXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+IDE1KSB7XG4gICAgdmFyIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgcmV0dXJuIG91dFxuICB9XG4gIHJldHVybiBudWxsXG59XG5TcGxpdHRlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsZW4gPSAxNiAtIHRoaXMuY2FjaGUubGVuZ3RoXG4gIHZhciBwYWRCdWZmID0gbmV3IEJ1ZmZlcihsZW4pXG5cbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgcGFkQnVmZi53cml0ZVVJbnQ4KGxlbiwgaSlcbiAgfVxuICB2YXIgb3V0ID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgcGFkQnVmZl0pXG4gIHJldHVybiBvdXRcbn1cbnZhciBtb2RlbGlzdCA9IHtcbiAgRUNCOiByZXF1aXJlKCcuL21vZGVzL2VjYicpLFxuICBDQkM6IHJlcXVpcmUoJy4vbW9kZXMvY2JjJyksXG4gIENGQjogcmVxdWlyZSgnLi9tb2Rlcy9jZmInKSxcbiAgQ0ZCODogcmVxdWlyZSgnLi9tb2Rlcy9jZmI4JyksXG4gIENGQjE6IHJlcXVpcmUoJy4vbW9kZXMvY2ZiMScpLFxuICBPRkI6IHJlcXVpcmUoJy4vbW9kZXMvb2ZiJyksXG4gIENUUjogcmVxdWlyZSgnLi9tb2Rlcy9jdHInKSxcbiAgR0NNOiByZXF1aXJlKCcuL21vZGVzL2N0cicpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlcml2IChzdWl0ZSwgcGFzc3dvcmQsIGl2KSB7XG4gIHZhciBjb25maWcgPSBtb2Rlc1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbiAgaWYgKHR5cGVvZiBpdiA9PT0gJ3N0cmluZycpIHtcbiAgICBpdiA9IG5ldyBCdWZmZXIoaXYpXG4gIH1cbiAgaWYgKHR5cGVvZiBwYXNzd29yZCA9PT0gJ3N0cmluZycpIHtcbiAgICBwYXNzd29yZCA9IG5ldyBCdWZmZXIocGFzc3dvcmQpXG4gIH1cbiAgaWYgKHBhc3N3b3JkLmxlbmd0aCAhPT0gY29uZmlnLmtleSAvIDgpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGtleSBsZW5ndGggJyArIHBhc3N3b3JkLmxlbmd0aClcbiAgfVxuICBpZiAoaXYubGVuZ3RoICE9PSBjb25maWcuaXYpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGl2IGxlbmd0aCAnICsgaXYubGVuZ3RoKVxuICB9XG4gIGlmIChjb25maWcudHlwZSA9PT0gJ3N0cmVhbScpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihtb2RlbGlzdFtjb25maWcubW9kZV0sIHBhc3N3b3JkLCBpdilcbiAgfSBlbHNlIGlmIChjb25maWcudHlwZSA9PT0gJ2F1dGgnKSB7XG4gICAgcmV0dXJuIG5ldyBBdXRoQ2lwaGVyKG1vZGVsaXN0W2NvbmZpZy5tb2RlXSwgcGFzc3dvcmQsIGl2KVxuICB9XG4gIHJldHVybiBuZXcgQ2lwaGVyKG1vZGVsaXN0W2NvbmZpZy5tb2RlXSwgcGFzc3dvcmQsIGl2KVxufVxuZnVuY3Rpb24gY3JlYXRlQ2lwaGVyIChzdWl0ZSwgcGFzc3dvcmQpIHtcbiAgdmFyIGNvbmZpZyA9IG1vZGVzW3N1aXRlLnRvTG93ZXJDYXNlKCldXG4gIGlmICghY29uZmlnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcbiAgfVxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBjb25maWcua2V5LCBjb25maWcuaXYpXG4gIHJldHVybiBjcmVhdGVDaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5cbmV4cG9ydHMuY3JlYXRlQ2lwaGVyaXYgPSBjcmVhdGVDaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVDaXBoZXIgPSBjcmVhdGVDaXBoZXJcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZbkp2ZDNObGNtbG1lUzF6YVdkdUwyNXZaR1ZmYlc5a2RXeGxjeTl3WVhKelpTMWhjMjR4TDI1dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMV0ZsY3k5bGJtTnllWEIwWlhJdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCaFpYTWdQU0J5WlhGMWFYSmxLQ2N1TDJGbGN5Y3BYRzUyWVhJZ1ZISmhibk5tYjNKdElEMGdjbVZ4ZFdseVpTZ25ZMmx3YUdWeUxXSmhjMlVuS1Z4dWRtRnlJR2x1YUdWeWFYUnpJRDBnY21WeGRXbHlaU2duYVc1b1pYSnBkSE1uS1Z4dWRtRnlJRzF2WkdWeklEMGdjbVZ4ZFdseVpTZ25MaTl0YjJSbGN5Y3BYRzUyWVhJZ1pXSjBheUE5SUhKbGNYVnBjbVVvSjJWMmNGOWllWFJsYzNSdmEyVjVKeWxjYm5aaGNpQlRkSEpsWVcxRGFYQm9aWElnUFNCeVpYRjFhWEpsS0NjdUwzTjBjbVZoYlVOcGNHaGxjaWNwWEc1MllYSWdRWFYwYUVOcGNHaGxjaUE5SUhKbGNYVnBjbVVvSnk0dllYVjBhRU5wY0dobGNpY3BYRzVwYm1obGNtbDBjeWhEYVhCb1pYSXNJRlJ5WVc1elptOXliU2xjYm1aMWJtTjBhVzl1SUVOcGNHaGxjaUFvYlc5a1pTd2dhMlY1TENCcGRpa2dlMXh1SUNCcFppQW9JU2gwYUdseklHbHVjM1JoYm1ObGIyWWdRMmx3YUdWeUtTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dRMmx3YUdWeUtHMXZaR1VzSUd0bGVTd2dhWFlwWEc0Z0lIMWNiaUFnVkhKaGJuTm1iM0p0TG1OaGJHd29kR2hwY3lsY2JpQWdkR2hwY3k1ZlkyRmphR1VnUFNCdVpYY2dVM0JzYVhSMFpYSW9LVnh1SUNCMGFHbHpMbDlqYVhCb1pYSWdQU0J1WlhjZ1lXVnpMa0ZGVXloclpYa3BYRzRnSUhSb2FYTXVYM0J5WlhZZ1BTQnVaWGNnUW5WbVptVnlLR2wyTG14bGJtZDBhQ2xjYmlBZ2FYWXVZMjl3ZVNoMGFHbHpMbDl3Y21WMktWeHVJQ0IwYUdsekxsOXRiMlJsSUQwZ2JXOWtaVnh1SUNCMGFHbHpMbDloZFhSdmNHRmtaR2x1WnlBOUlIUnlkV1ZjYm4xY2JrTnBjR2hsY2k1d2NtOTBiM1I1Y0dVdVgzVndaR0YwWlNBOUlHWjFibU4wYVc5dUlDaGtZWFJoS1NCN1hHNGdJSFJvYVhNdVgyTmhZMmhsTG1Ga1pDaGtZWFJoS1Z4dUlDQjJZWElnWTJoMWJtdGNiaUFnZG1GeUlIUm9hVzVuWEc0Z0lIWmhjaUJ2ZFhRZ1BTQmJYVnh1SUNCM2FHbHNaU0FvS0dOb2RXNXJJRDBnZEdocGN5NWZZMkZqYUdVdVoyVjBLQ2twS1NCN1hHNGdJQ0FnZEdocGJtY2dQU0IwYUdsekxsOXRiMlJsTG1WdVkzSjVjSFFvZEdocGN5d2dZMmgxYm1zcFhHNGdJQ0FnYjNWMExuQjFjMmdvZEdocGJtY3BYRzRnSUgxY2JpQWdjbVYwZFhKdUlFSjFabVpsY2k1amIyNWpZWFFvYjNWMEtWeHVmVnh1UTJsd2FHVnlMbkJ5YjNSdmRIbHdaUzVmWm1sdVlXd2dQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJSFpoY2lCamFIVnVheUE5SUhSb2FYTXVYMk5oWTJobExtWnNkWE5vS0NsY2JpQWdhV1lnS0hSb2FYTXVYMkYxZEc5d1lXUmthVzVuS1NCN1hHNGdJQ0FnWTJoMWJtc2dQU0IwYUdsekxsOXRiMlJsTG1WdVkzSjVjSFFvZEdocGN5d2dZMmgxYm1zcFhHNGdJQ0FnZEdocGN5NWZZMmx3YUdWeUxuTmpjblZpS0NsY2JpQWdJQ0J5WlhSMWNtNGdZMmgxYm10Y2JpQWdmU0JsYkhObElHbG1JQ2hqYUhWdWF5NTBiMU4wY21sdVp5Z25hR1Y0SnlrZ0lUMDlJQ2N4TURFd01UQXhNREV3TVRBeE1ERXdNVEF4TURFd01UQXhNREV3TVRBeE1DY3BJSHRjYmlBZ0lDQjBhR2x6TGw5amFYQm9aWEl1YzJOeWRXSW9LVnh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblpHRjBZU0J1YjNRZ2JYVnNkR2x3YkdVZ2IyWWdZbXh2WTJzZ2JHVnVaM1JvSnlsY2JpQWdmVnh1ZlZ4dVEybHdhR1Z5TG5CeWIzUnZkSGx3WlM1elpYUkJkWFJ2VUdGa1pHbHVaeUE5SUdaMWJtTjBhVzl1SUNoelpYUlVieWtnZTF4dUlDQjBhR2x6TGw5aGRYUnZjR0ZrWkdsdVp5QTlJQ0VoYzJWMFZHOWNibjFjYmx4dVpuVnVZM1JwYjI0Z1UzQnNhWFIwWlhJZ0tDa2dlMXh1SUNCcFppQW9JU2gwYUdseklHbHVjM1JoYm1ObGIyWWdVM0JzYVhSMFpYSXBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJUY0d4cGRIUmxjaWdwWEc0Z0lIMWNiaUFnZEdocGN5NWpZV05vWlNBOUlHNWxkeUJDZFdabVpYSW9KeWNwWEc1OVhHNVRjR3hwZEhSbGNpNXdjbTkwYjNSNWNHVXVZV1JrSUQwZ1puVnVZM1JwYjI0Z0tHUmhkR0VwSUh0Y2JpQWdkR2hwY3k1allXTm9aU0E5SUVKMVptWmxjaTVqYjI1allYUW9XM1JvYVhNdVkyRmphR1VzSUdSaGRHRmRLVnh1ZlZ4dVhHNVRjR3hwZEhSbGNpNXdjbTkwYjNSNWNHVXVaMlYwSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNCcFppQW9kR2hwY3k1allXTm9aUzVzWlc1bmRHZ2dQaUF4TlNrZ2UxeHVJQ0FnSUhaaGNpQnZkWFFnUFNCMGFHbHpMbU5oWTJobExuTnNhV05sS0RBc0lERTJLVnh1SUNBZ0lIUm9hWE11WTJGamFHVWdQU0IwYUdsekxtTmhZMmhsTG5Oc2FXTmxLREUyS1Z4dUlDQWdJSEpsZEhWeWJpQnZkWFJjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdiblZzYkZ4dWZWeHVVM0JzYVhSMFpYSXVjSEp2ZEc5MGVYQmxMbVpzZFhOb0lEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQjJZWElnYkdWdUlEMGdNVFlnTFNCMGFHbHpMbU5oWTJobExteGxibWQwYUZ4dUlDQjJZWElnY0dGa1FuVm1aaUE5SUc1bGR5QkNkV1ptWlhJb2JHVnVLVnh1WEc0Z0lIWmhjaUJwSUQwZ0xURmNiaUFnZDJocGJHVWdLQ3NyYVNBOElHeGxiaWtnZTF4dUlDQWdJSEJoWkVKMVptWXVkM0pwZEdWVlNXNTBPQ2hzWlc0c0lHa3BYRzRnSUgxY2JpQWdkbUZ5SUc5MWRDQTlJRUoxWm1abGNpNWpiMjVqWVhRb1czUm9hWE11WTJGamFHVXNJSEJoWkVKMVptWmRLVnh1SUNCeVpYUjFjbTRnYjNWMFhHNTlYRzUyWVhJZ2JXOWtaV3hwYzNRZ1BTQjdYRzRnSUVWRFFqb2djbVZ4ZFdseVpTZ25MaTl0YjJSbGN5OWxZMkluS1N4Y2JpQWdRMEpET2lCeVpYRjFhWEpsS0NjdUwyMXZaR1Z6TDJOaVl5Y3BMRnh1SUNCRFJrSTZJSEpsY1hWcGNtVW9KeTR2Ylc5a1pYTXZZMlppSnlrc1hHNGdJRU5HUWpnNklISmxjWFZwY21Vb0p5NHZiVzlrWlhNdlkyWmlPQ2NwTEZ4dUlDQkRSa0l4T2lCeVpYRjFhWEpsS0NjdUwyMXZaR1Z6TDJObVlqRW5LU3hjYmlBZ1QwWkNPaUJ5WlhGMWFYSmxLQ2N1TDIxdlpHVnpMMjltWWljcExGeHVJQ0JEVkZJNklISmxjWFZwY21Vb0p5NHZiVzlrWlhNdlkzUnlKeWtzWEc0Z0lFZERUVG9nY21WeGRXbHlaU2duTGk5dGIyUmxjeTlqZEhJbktWeHVmVnh1WEc1bWRXNWpkR2x2YmlCamNtVmhkR1ZEYVhCb1pYSnBkaUFvYzNWcGRHVXNJSEJoYzNOM2IzSmtMQ0JwZGlrZ2UxeHVJQ0IyWVhJZ1kyOXVabWxuSUQwZ2JXOWtaWE5iYzNWcGRHVXVkRzlNYjNkbGNrTmhjMlVvS1YxY2JpQWdhV1lnS0NGamIyNW1hV2NwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkcGJuWmhiR2xrSUhOMWFYUmxJSFI1Y0dVbktWeHVJQ0I5WEc0Z0lHbG1JQ2gwZVhCbGIyWWdhWFlnUFQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ2FYWWdQU0J1WlhjZ1FuVm1abVZ5S0dsMktWeHVJQ0I5WEc0Z0lHbG1JQ2gwZVhCbGIyWWdjR0Z6YzNkdmNtUWdQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnY0dGemMzZHZjbVFnUFNCdVpYY2dRblZtWm1WeUtIQmhjM04zYjNKa0tWeHVJQ0I5WEc0Z0lHbG1JQ2h3WVhOemQyOXlaQzVzWlc1bmRHZ2dJVDA5SUdOdmJtWnBaeTVyWlhrZ0x5QTRLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWduYVc1MllXeHBaQ0JyWlhrZ2JHVnVaM1JvSUNjZ0t5QndZWE56ZDI5eVpDNXNaVzVuZEdncFhHNGdJSDFjYmlBZ2FXWWdLR2wyTG14bGJtZDBhQ0FoUFQwZ1kyOXVabWxuTG1sMktTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25hVzUyWVd4cFpDQnBkaUJzWlc1bmRHZ2dKeUFySUdsMkxteGxibWQwYUNsY2JpQWdmVnh1SUNCcFppQW9ZMjl1Wm1sbkxuUjVjR1VnUFQwOUlDZHpkSEpsWVcwbktTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlRkSEpsWVcxRGFYQm9aWElvYlc5a1pXeHBjM1JiWTI5dVptbG5MbTF2WkdWZExDQndZWE56ZDI5eVpDd2dhWFlwWEc0Z0lIMGdaV3h6WlNCcFppQW9ZMjl1Wm1sbkxuUjVjR1VnUFQwOUlDZGhkWFJvSnlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1FYVjBhRU5wY0dobGNpaHRiMlJsYkdsemRGdGpiMjVtYVdjdWJXOWtaVjBzSUhCaGMzTjNiM0prTENCcGRpbGNiaUFnZlZ4dUlDQnlaWFIxY200Z2JtVjNJRU5wY0dobGNpaHRiMlJsYkdsemRGdGpiMjVtYVdjdWJXOWtaVjBzSUhCaGMzTjNiM0prTENCcGRpbGNibjFjYm1aMWJtTjBhVzl1SUdOeVpXRjBaVU5wY0dobGNpQW9jM1ZwZEdVc0lIQmhjM04zYjNKa0tTQjdYRzRnSUhaaGNpQmpiMjVtYVdjZ1BTQnRiMlJsYzF0emRXbDBaUzUwYjB4dmQyVnlRMkZ6WlNncFhWeHVJQ0JwWmlBb0lXTnZibVpwWnlrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0oybHVkbUZzYVdRZ2MzVnBkR1VnZEhsd1pTY3BYRzRnSUgxY2JpQWdkbUZ5SUd0bGVYTWdQU0JsWW5ScktIQmhjM04zYjNKa0xDQm1ZV3h6WlN3Z1kyOXVabWxuTG10bGVTd2dZMjl1Wm1sbkxtbDJLVnh1SUNCeVpYUjFjbTRnWTNKbFlYUmxRMmx3YUdWeWFYWW9jM1ZwZEdVc0lHdGxlWE11YTJWNUxDQnJaWGx6TG1sMktWeHVmVnh1WEc1bGVIQnZjblJ6TG1OeVpXRjBaVU5wY0dobGNtbDJJRDBnWTNKbFlYUmxRMmx3YUdWeWFYWmNibVY0Y0c5eWRITXVZM0psWVhSbFEybHdhR1Z5SUQwZ1kzSmxZWFJsUTJsd2FHVnlYRzRpWFgwPSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIG1vZGVzID0gcmVxdWlyZSgnLi9tb2RlcycpXG52YXIgU3RyZWFtQ2lwaGVyID0gcmVxdWlyZSgnLi9zdHJlYW1DaXBoZXInKVxudmFyIEF1dGhDaXBoZXIgPSByZXF1aXJlKCcuL2F1dGhDaXBoZXInKVxudmFyIGVidGsgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpXG5cbmluaGVyaXRzKERlY2lwaGVyLCBUcmFuc2Zvcm0pXG5mdW5jdGlvbiBEZWNpcGhlciAobW9kZSwga2V5LCBpdikge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRGVjaXBoZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBEZWNpcGhlcihtb2RlLCBrZXksIGl2KVxuICB9XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuX2NhY2hlID0gbmV3IFNwbGl0dGVyKClcbiAgdGhpcy5fbGFzdCA9IHZvaWQgMFxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBuZXcgQnVmZmVyKGl2Lmxlbmd0aClcbiAgaXYuY29weSh0aGlzLl9wcmV2KVxuICB0aGlzLl9tb2RlID0gbW9kZVxuICB0aGlzLl9hdXRvcGFkZGluZyA9IHRydWVcbn1cbkRlY2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG4gIHdoaWxlICgoY2h1bmsgPSB0aGlzLl9jYWNoZS5nZXQodGhpcy5fYXV0b3BhZGRpbmcpKSkge1xuICAgIHRoaW5nID0gdGhpcy5fbW9kZS5kZWNyeXB0KHRoaXMsIGNodW5rKVxuICAgIG91dC5wdXNoKHRoaW5nKVxuICB9XG4gIHJldHVybiBCdWZmZXIuY29uY2F0KG91dClcbn1cbkRlY2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjaHVuayA9IHRoaXMuX2NhY2hlLmZsdXNoKClcbiAgaWYgKHRoaXMuX2F1dG9wYWRkaW5nKSB7XG4gICAgcmV0dXJuIHVucGFkKHRoaXMuX21vZGUuZGVjcnlwdCh0aGlzLCBjaHVuaykpXG4gIH0gZWxzZSBpZiAoY2h1bmspIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgbm90IG11bHRpcGxlIG9mIGJsb2NrIGxlbmd0aCcpXG4gIH1cbn1cbkRlY2lwaGVyLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uIChzZXRUbykge1xuICB0aGlzLl9hdXRvcGFkZGluZyA9ICEhc2V0VG9cbn1cbmZ1bmN0aW9uIFNwbGl0dGVyICgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNwbGl0dGVyKSkge1xuICAgIHJldHVybiBuZXcgU3BsaXR0ZXIoKVxuICB9XG4gIHRoaXMuY2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxufVxuU3BsaXR0ZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuY2FjaGUgPSBCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBkYXRhXSlcbn1cblxuU3BsaXR0ZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChhdXRvUGFkZGluZykge1xuICB2YXIgb3V0XG4gIGlmIChhdXRvUGFkZGluZykge1xuICAgIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+IDE2KSB7XG4gICAgICBvdXQgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgICByZXR1cm4gb3V0XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+PSAxNikge1xuICAgICAgb3V0ID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNilcbiAgICAgIHRoaXMuY2FjaGUgPSB0aGlzLmNhY2hlLnNsaWNlKDE2KVxuICAgICAgcmV0dXJuIG91dFxuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbFxufVxuU3BsaXR0ZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy5jYWNoZVxuICB9XG59XG5mdW5jdGlvbiB1bnBhZCAobGFzdCkge1xuICB2YXIgcGFkZGVkID0gbGFzdFsxNV1cbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgcGFkZGVkKSB7XG4gICAgaWYgKGxhc3RbKGkgKyAoMTYgLSBwYWRkZWQpKV0gIT09IHBhZGRlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gZGVjcnlwdCBkYXRhJylcbiAgICB9XG4gIH1cbiAgaWYgKHBhZGRlZCA9PT0gMTYpIHtcbiAgICByZXR1cm5cbiAgfVxuICByZXR1cm4gbGFzdC5zbGljZSgwLCAxNiAtIHBhZGRlZClcbn1cblxudmFyIG1vZGVsaXN0ID0ge1xuICBFQ0I6IHJlcXVpcmUoJy4vbW9kZXMvZWNiJyksXG4gIENCQzogcmVxdWlyZSgnLi9tb2Rlcy9jYmMnKSxcbiAgQ0ZCOiByZXF1aXJlKCcuL21vZGVzL2NmYicpLFxuICBDRkI4OiByZXF1aXJlKCcuL21vZGVzL2NmYjgnKSxcbiAgQ0ZCMTogcmVxdWlyZSgnLi9tb2Rlcy9jZmIxJyksXG4gIE9GQjogcmVxdWlyZSgnLi9tb2Rlcy9vZmInKSxcbiAgQ1RSOiByZXF1aXJlKCcuL21vZGVzL2N0cicpLFxuICBHQ006IHJlcXVpcmUoJy4vbW9kZXMvY3RyJylcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVjaXBoZXJpdiAoc3VpdGUsIHBhc3N3b3JkLCBpdikge1xuICB2YXIgY29uZmlnID0gbW9kZXNbc3VpdGUudG9Mb3dlckNhc2UoKV1cbiAgaWYgKCFjb25maWcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuICB9XG4gIGlmICh0eXBlb2YgaXYgPT09ICdzdHJpbmcnKSB7XG4gICAgaXYgPSBuZXcgQnVmZmVyKGl2KVxuICB9XG4gIGlmICh0eXBlb2YgcGFzc3dvcmQgPT09ICdzdHJpbmcnKSB7XG4gICAgcGFzc3dvcmQgPSBuZXcgQnVmZmVyKHBhc3N3b3JkKVxuICB9XG4gIGlmIChwYXNzd29yZC5sZW5ndGggIT09IGNvbmZpZy5rZXkgLyA4KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBrZXkgbGVuZ3RoICcgKyBwYXNzd29yZC5sZW5ndGgpXG4gIH1cbiAgaWYgKGl2Lmxlbmd0aCAhPT0gY29uZmlnLml2KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBpdiBsZW5ndGggJyArIGl2Lmxlbmd0aClcbiAgfVxuICBpZiAoY29uZmlnLnR5cGUgPT09ICdzdHJlYW0nKSB7XG4gICAgcmV0dXJuIG5ldyBTdHJlYW1DaXBoZXIobW9kZWxpc3RbY29uZmlnLm1vZGVdLCBwYXNzd29yZCwgaXYsIHRydWUpXG4gIH0gZWxzZSBpZiAoY29uZmlnLnR5cGUgPT09ICdhdXRoJykge1xuICAgIHJldHVybiBuZXcgQXV0aENpcGhlcihtb2RlbGlzdFtjb25maWcubW9kZV0sIHBhc3N3b3JkLCBpdiwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gbmV3IERlY2lwaGVyKG1vZGVsaXN0W2NvbmZpZy5tb2RlXSwgcGFzc3dvcmQsIGl2KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHZhciBjb25maWcgPSBtb2Rlc1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwgY29uZmlnLmtleSwgY29uZmlnLml2KVxuICByZXR1cm4gY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyID0gY3JlYXRlRGVjaXBoZXJcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXJpdiA9IGNyZWF0ZURlY2lwaGVyaXZcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZbkp2ZDNObGNtbG1lUzF6YVdkdUwyNXZaR1ZmYlc5a2RXeGxjeTl3WVhKelpTMWhjMjR4TDI1dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMV0ZsY3k5a1pXTnllWEIwWlhJdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW5aaGNpQmhaWE1nUFNCeVpYRjFhWEpsS0NjdUwyRmxjeWNwWEc1MllYSWdWSEpoYm5ObWIzSnRJRDBnY21WeGRXbHlaU2duWTJsd2FHVnlMV0poYzJVbktWeHVkbUZ5SUdsdWFHVnlhWFJ6SUQwZ2NtVnhkV2x5WlNnbmFXNW9aWEpwZEhNbktWeHVkbUZ5SUcxdlpHVnpJRDBnY21WeGRXbHlaU2duTGk5dGIyUmxjeWNwWEc1MllYSWdVM1J5WldGdFEybHdhR1Z5SUQwZ2NtVnhkV2x5WlNnbkxpOXpkSEpsWVcxRGFYQm9aWEluS1Z4dWRtRnlJRUYxZEdoRGFYQm9aWElnUFNCeVpYRjFhWEpsS0NjdUwyRjFkR2hEYVhCb1pYSW5LVnh1ZG1GeUlHVmlkR3NnUFNCeVpYRjFhWEpsS0NkbGRuQmZZbmwwWlhOMGIydGxlU2NwWEc1Y2JtbHVhR1Z5YVhSektFUmxZMmx3YUdWeUxDQlVjbUZ1YzJadmNtMHBYRzVtZFc1amRHbHZiaUJFWldOcGNHaGxjaUFvYlc5a1pTd2dhMlY1TENCcGRpa2dlMXh1SUNCcFppQW9JU2gwYUdseklHbHVjM1JoYm1ObGIyWWdSR1ZqYVhCb1pYSXBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJFWldOcGNHaGxjaWh0YjJSbExDQnJaWGtzSUdsMktWeHVJQ0I5WEc0Z0lGUnlZVzV6Wm05eWJTNWpZV3hzS0hSb2FYTXBYRzRnSUhSb2FYTXVYMk5oWTJobElEMGdibVYzSUZOd2JHbDBkR1Z5S0NsY2JpQWdkR2hwY3k1ZmJHRnpkQ0E5SUhadmFXUWdNRnh1SUNCMGFHbHpMbDlqYVhCb1pYSWdQU0J1WlhjZ1lXVnpMa0ZGVXloclpYa3BYRzRnSUhSb2FYTXVYM0J5WlhZZ1BTQnVaWGNnUW5WbVptVnlLR2wyTG14bGJtZDBhQ2xjYmlBZ2FYWXVZMjl3ZVNoMGFHbHpMbDl3Y21WMktWeHVJQ0IwYUdsekxsOXRiMlJsSUQwZ2JXOWtaVnh1SUNCMGFHbHpMbDloZFhSdmNHRmtaR2x1WnlBOUlIUnlkV1ZjYm4xY2JrUmxZMmx3YUdWeUxuQnliM1J2ZEhsd1pTNWZkWEJrWVhSbElEMGdablZ1WTNScGIyNGdLR1JoZEdFcElIdGNiaUFnZEdocGN5NWZZMkZqYUdVdVlXUmtLR1JoZEdFcFhHNGdJSFpoY2lCamFIVnVhMXh1SUNCMllYSWdkR2hwYm1kY2JpQWdkbUZ5SUc5MWRDQTlJRnRkWEc0Z0lIZG9hV3hsSUNnb1kyaDFibXNnUFNCMGFHbHpMbDlqWVdOb1pTNW5aWFFvZEdocGN5NWZZWFYwYjNCaFpHUnBibWNwS1NrZ2UxeHVJQ0FnSUhSb2FXNW5JRDBnZEdocGN5NWZiVzlrWlM1a1pXTnllWEIwS0hSb2FYTXNJR05vZFc1cktWeHVJQ0FnSUc5MWRDNXdkWE5vS0hSb2FXNW5LVnh1SUNCOVhHNGdJSEpsZEhWeWJpQkNkV1ptWlhJdVkyOXVZMkYwS0c5MWRDbGNibjFjYmtSbFkybHdhR1Z5TG5CeWIzUnZkSGx3WlM1ZlptbHVZV3dnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUhaaGNpQmphSFZ1YXlBOUlIUm9hWE11WDJOaFkyaGxMbVpzZFhOb0tDbGNiaUFnYVdZZ0tIUm9hWE11WDJGMWRHOXdZV1JrYVc1bktTQjdYRzRnSUNBZ2NtVjBkWEp1SUhWdWNHRmtLSFJvYVhNdVgyMXZaR1V1WkdWamNubHdkQ2gwYUdsekxDQmphSFZ1YXlrcFhHNGdJSDBnWld4elpTQnBaaUFvWTJoMWJtc3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oyUmhkR0VnYm05MElHMTFiSFJwY0d4bElHOW1JR0pzYjJOcklHeGxibWQwYUNjcFhHNGdJSDFjYm4xY2JrUmxZMmx3YUdWeUxuQnliM1J2ZEhsd1pTNXpaWFJCZFhSdlVHRmtaR2x1WnlBOUlHWjFibU4wYVc5dUlDaHpaWFJVYnlrZ2UxeHVJQ0IwYUdsekxsOWhkWFJ2Y0dGa1pHbHVaeUE5SUNFaGMyVjBWRzljYm4xY2JtWjFibU4wYVc5dUlGTndiR2wwZEdWeUlDZ3BJSHRjYmlBZ2FXWWdLQ0VvZEdocGN5QnBibk4wWVc1alpXOW1JRk53YkdsMGRHVnlLU2tnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVTNCc2FYUjBaWElvS1Z4dUlDQjlYRzRnSUhSb2FYTXVZMkZqYUdVZ1BTQnVaWGNnUW5WbVptVnlLQ2NuS1Z4dWZWeHVVM0JzYVhSMFpYSXVjSEp2ZEc5MGVYQmxMbUZrWkNBOUlHWjFibU4wYVc5dUlDaGtZWFJoS1NCN1hHNGdJSFJvYVhNdVkyRmphR1VnUFNCQ2RXWm1aWEl1WTI5dVkyRjBLRnQwYUdsekxtTmhZMmhsTENCa1lYUmhYU2xjYm4xY2JseHVVM0JzYVhSMFpYSXVjSEp2ZEc5MGVYQmxMbWRsZENBOUlHWjFibU4wYVc5dUlDaGhkWFJ2VUdGa1pHbHVaeWtnZTF4dUlDQjJZWElnYjNWMFhHNGdJR2xtSUNoaGRYUnZVR0ZrWkdsdVp5a2dlMXh1SUNBZ0lHbG1JQ2gwYUdsekxtTmhZMmhsTG14bGJtZDBhQ0ErSURFMktTQjdYRzRnSUNBZ0lDQnZkWFFnUFNCMGFHbHpMbU5oWTJobExuTnNhV05sS0RBc0lERTJLVnh1SUNBZ0lDQWdkR2hwY3k1allXTm9aU0E5SUhSb2FYTXVZMkZqYUdVdWMyeHBZMlVvTVRZcFhHNGdJQ0FnSUNCeVpYUjFjbTRnYjNWMFhHNGdJQ0FnZlZ4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6TG1OaFkyaGxMbXhsYm1kMGFDQStQU0F4TmlrZ2UxeHVJQ0FnSUNBZ2IzVjBJRDBnZEdocGN5NWpZV05vWlM1emJHbGpaU2d3TENBeE5pbGNiaUFnSUNBZ0lIUm9hWE11WTJGamFHVWdQU0IwYUdsekxtTmhZMmhsTG5Oc2FXTmxLREUyS1Z4dUlDQWdJQ0FnY21WMGRYSnVJRzkxZEZ4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdiblZzYkZ4dWZWeHVVM0JzYVhSMFpYSXVjSEp2ZEc5MGVYQmxMbVpzZFhOb0lEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQnBaaUFvZEdocGN5NWpZV05vWlM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1allXTm9aVnh1SUNCOVhHNTlYRzVtZFc1amRHbHZiaUIxYm5CaFpDQW9iR0Z6ZENrZ2UxeHVJQ0IyWVhJZ2NHRmtaR1ZrSUQwZ2JHRnpkRnN4TlYxY2JpQWdkbUZ5SUdrZ1BTQXRNVnh1SUNCM2FHbHNaU0FvS3l0cElEd2djR0ZrWkdWa0tTQjdYRzRnSUNBZ2FXWWdLR3hoYzNSYktHa2dLeUFvTVRZZ0xTQndZV1JrWldRcEtWMGdJVDA5SUhCaFpHUmxaQ2tnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2QxYm1GaWJHVWdkRzhnWkdWamNubHdkQ0JrWVhSaEp5bGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2FXWWdLSEJoWkdSbFpDQTlQVDBnTVRZcElIdGNiaUFnSUNCeVpYUjFjbTVjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdiR0Z6ZEM1emJHbGpaU2d3TENBeE5pQXRJSEJoWkdSbFpDbGNibjFjYmx4dWRtRnlJRzF2WkdWc2FYTjBJRDBnZTF4dUlDQkZRMEk2SUhKbGNYVnBjbVVvSnk0dmJXOWtaWE12WldOaUp5a3NYRzRnSUVOQ1F6b2djbVZ4ZFdseVpTZ25MaTl0YjJSbGN5OWpZbU1uS1N4Y2JpQWdRMFpDT2lCeVpYRjFhWEpsS0NjdUwyMXZaR1Z6TDJObVlpY3BMRnh1SUNCRFJrSTRPaUJ5WlhGMWFYSmxLQ2N1TDIxdlpHVnpMMk5tWWpnbktTeGNiaUFnUTBaQ01Ub2djbVZ4ZFdseVpTZ25MaTl0YjJSbGN5OWpabUl4Snlrc1hHNGdJRTlHUWpvZ2NtVnhkV2x5WlNnbkxpOXRiMlJsY3k5dlptSW5LU3hjYmlBZ1ExUlNPaUJ5WlhGMWFYSmxLQ2N1TDIxdlpHVnpMMk4wY2ljcExGeHVJQ0JIUTAwNklISmxjWFZwY21Vb0p5NHZiVzlrWlhNdlkzUnlKeWxjYm4xY2JseHVablZ1WTNScGIyNGdZM0psWVhSbFJHVmphWEJvWlhKcGRpQW9jM1ZwZEdVc0lIQmhjM04zYjNKa0xDQnBkaWtnZTF4dUlDQjJZWElnWTI5dVptbG5JRDBnYlc5a1pYTmJjM1ZwZEdVdWRHOU1iM2RsY2tOaGMyVW9LVjFjYmlBZ2FXWWdLQ0ZqYjI1bWFXY3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLQ2RwYm5aaGJHbGtJSE4xYVhSbElIUjVjR1VuS1Z4dUlDQjlYRzRnSUdsbUlDaDBlWEJsYjJZZ2FYWWdQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnYVhZZ1BTQnVaWGNnUW5WbVptVnlLR2wyS1Z4dUlDQjlYRzRnSUdsbUlDaDBlWEJsYjJZZ2NHRnpjM2R2Y21RZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdjR0Z6YzNkdmNtUWdQU0J1WlhjZ1FuVm1abVZ5S0hCaGMzTjNiM0prS1Z4dUlDQjlYRzRnSUdsbUlDaHdZWE56ZDI5eVpDNXNaVzVuZEdnZ0lUMDlJR052Ym1acFp5NXJaWGtnTHlBNEtTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25hVzUyWVd4cFpDQnJaWGtnYkdWdVozUm9JQ2NnS3lCd1lYTnpkMjl5WkM1c1pXNW5kR2dwWEc0Z0lIMWNiaUFnYVdZZ0tHbDJMbXhsYm1kMGFDQWhQVDBnWTI5dVptbG5MbWwyS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnbmFXNTJZV3hwWkNCcGRpQnNaVzVuZEdnZ0p5QXJJR2wyTG14bGJtZDBhQ2xjYmlBZ2ZWeHVJQ0JwWmlBb1kyOXVabWxuTG5SNWNHVWdQVDA5SUNkemRISmxZVzBuS1NCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCVGRISmxZVzFEYVhCb1pYSW9iVzlrWld4cGMzUmJZMjl1Wm1sbkxtMXZaR1ZkTENCd1lYTnpkMjl5WkN3Z2FYWXNJSFJ5ZFdVcFhHNGdJSDBnWld4elpTQnBaaUFvWTI5dVptbG5MblI1Y0dVZ1BUMDlJQ2RoZFhSb0p5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dRWFYwYUVOcGNHaGxjaWh0YjJSbGJHbHpkRnRqYjI1bWFXY3ViVzlrWlYwc0lIQmhjM04zYjNKa0xDQnBkaXdnZEhKMVpTbGNiaUFnZlZ4dUlDQnlaWFIxY200Z2JtVjNJRVJsWTJsd2FHVnlLRzF2WkdWc2FYTjBXMk52Ym1acFp5NXRiMlJsWFN3Z2NHRnpjM2R2Y21Rc0lHbDJLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmpjbVZoZEdWRVpXTnBjR2hsY2lBb2MzVnBkR1VzSUhCaGMzTjNiM0prS1NCN1hHNGdJSFpoY2lCamIyNW1hV2NnUFNCdGIyUmxjMXR6ZFdsMFpTNTBiMHh2ZDJWeVEyRnpaU2dwWFZ4dUlDQnBaaUFvSVdOdmJtWnBaeWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjJsdWRtRnNhV1FnYzNWcGRHVWdkSGx3WlNjcFhHNGdJSDFjYmlBZ2RtRnlJR3RsZVhNZ1BTQmxZblJyS0hCaGMzTjNiM0prTENCbVlXeHpaU3dnWTI5dVptbG5MbXRsZVN3Z1kyOXVabWxuTG1sMktWeHVJQ0J5WlhSMWNtNGdZM0psWVhSbFJHVmphWEJvWlhKcGRpaHpkV2wwWlN3Z2EyVjVjeTVyWlhrc0lHdGxlWE11YVhZcFhHNTlYRzVsZUhCdmNuUnpMbU55WldGMFpVUmxZMmx3YUdWeUlEMGdZM0psWVhSbFJHVmphWEJvWlhKY2JtVjRjRzl5ZEhNdVkzSmxZWFJsUkdWamFYQm9aWEpwZGlBOUlHTnlaV0YwWlVSbFkybHdhR1Z5YVhaY2JpSmRmUT09IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xudmFyIG1kNSA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoL21kNScpXG5tb2R1bGUuZXhwb3J0cyA9IEVWUF9CeXRlc1RvS2V5XG5mdW5jdGlvbiBFVlBfQnl0ZXNUb0tleSAocGFzc3dvcmQsIHNhbHQsIGtleUxlbiwgaXZMZW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocGFzc3dvcmQpKSB7XG4gICAgcGFzc3dvcmQgPSBuZXcgQnVmZmVyKHBhc3N3b3JkLCAnYmluYXJ5JylcbiAgfVxuICBpZiAoc2FsdCAmJiAhQnVmZmVyLmlzQnVmZmVyKHNhbHQpKSB7XG4gICAgc2FsdCA9IG5ldyBCdWZmZXIoc2FsdCwgJ2JpbmFyeScpXG4gIH1cbiAga2V5TGVuID0ga2V5TGVuIC8gOFxuICBpdkxlbiA9IGl2TGVuIHx8IDBcbiAgdmFyIGtpID0gMFxuICB2YXIgaWkgPSAwXG4gIHZhciBrZXkgPSBuZXcgQnVmZmVyKGtleUxlbilcbiAgdmFyIGl2ID0gbmV3IEJ1ZmZlcihpdkxlbilcbiAgdmFyIGFkZG1kID0gMFxuICB2YXIgbWRfYnVmXG4gIHZhciBpXG4gIHZhciBidWZzID0gW11cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBpZiAoYWRkbWQrKyA+IDApIHtcbiAgICAgIGJ1ZnMucHVzaChtZF9idWYpXG4gICAgfVxuICAgIGJ1ZnMucHVzaChwYXNzd29yZClcbiAgICBpZiAoc2FsdCkge1xuICAgICAgYnVmcy5wdXNoKHNhbHQpXG4gICAgfVxuICAgIG1kX2J1ZiA9IG1kNShCdWZmZXIuY29uY2F0KGJ1ZnMpKVxuICAgIGJ1ZnMgPSBbXVxuICAgIGkgPSAwXG4gICAgaWYgKGtleUxlbiA+IDApIHtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGlmIChrZXlMZW4gPT09IDApIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGlmIChpID09PSBtZF9idWYubGVuZ3RoKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBrZXlba2krK10gPSBtZF9idWZbaV1cbiAgICAgICAga2V5TGVuLS1cbiAgICAgICAgaSsrXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpdkxlbiA+IDAgJiYgaSAhPT0gbWRfYnVmLmxlbmd0aCkge1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgaWYgKGl2TGVuID09PSAwKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaSA9PT0gbWRfYnVmLmxlbmd0aCkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgaXZbaWkrK10gPSBtZF9idWZbaV1cbiAgICAgICAgaXZMZW4tLVxuICAgICAgICBpKytcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGtleUxlbiA9PT0gMCAmJiBpdkxlbiA9PT0gMCkge1xuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbiAgZm9yIChpID0gMDsgaSA8IG1kX2J1Zi5sZW5ndGg7IGkrKykge1xuICAgIG1kX2J1ZltpXSA9IDBcbiAgfVxuICByZXR1cm4ge1xuICAgIGtleToga2V5LFxuICAgIGl2OiBpdlxuICB9XG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WW5KdmQzTmxjbWxtZVMxemFXZHVMMjV2WkdWZmJXOWtkV3hsY3k5d1lYSnpaUzFoYzI0eEwyNXZaR1ZmYlc5a2RXeGxjeTlsZG5CZllubDBaWE4wYjJ0bGVTOXBibVJsZUM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKMllYSWdiV1ExSUQwZ2NtVnhkV2x5WlNnblkzSmxZWFJsTFdoaGMyZ3ZiV1ExSnlsY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1JWWlFYMEo1ZEdWelZHOUxaWGxjYm1aMWJtTjBhVzl1SUVWV1VGOUNlWFJsYzFSdlMyVjVJQ2h3WVhOemQyOXlaQ3dnYzJGc2RDd2dhMlY1VEdWdUxDQnBka3hsYmlrZ2UxeHVJQ0JwWmlBb0lVSjFabVpsY2k1cGMwSjFabVpsY2lod1lYTnpkMjl5WkNrcElIdGNiaUFnSUNCd1lYTnpkMjl5WkNBOUlHNWxkeUJDZFdabVpYSW9jR0Z6YzNkdmNtUXNJQ2RpYVc1aGNua25LVnh1SUNCOVhHNGdJR2xtSUNoellXeDBJQ1ltSUNGQ2RXWm1aWEl1YVhOQ2RXWm1aWElvYzJGc2RDa3BJSHRjYmlBZ0lDQnpZV3gwSUQwZ2JtVjNJRUoxWm1abGNpaHpZV3gwTENBblltbHVZWEo1SnlsY2JpQWdmVnh1SUNCclpYbE1aVzRnUFNCclpYbE1aVzRnTHlBNFhHNGdJR2wyVEdWdUlEMGdhWFpNWlc0Z2ZId2dNRnh1SUNCMllYSWdhMmtnUFNBd1hHNGdJSFpoY2lCcGFTQTlJREJjYmlBZ2RtRnlJR3RsZVNBOUlHNWxkeUJDZFdabVpYSW9hMlY1VEdWdUtWeHVJQ0IyWVhJZ2FYWWdQU0J1WlhjZ1FuVm1abVZ5S0dsMlRHVnVLVnh1SUNCMllYSWdZV1JrYldRZ1BTQXdYRzRnSUhaaGNpQnRaRjlpZFdaY2JpQWdkbUZ5SUdsY2JpQWdkbUZ5SUdKMVpuTWdQU0JiWFZ4dUlDQjNhR2xzWlNBb2RISjFaU2tnZTF4dUlDQWdJR2xtSUNoaFpHUnRaQ3NySUQ0Z01Da2dlMXh1SUNBZ0lDQWdZblZtY3k1d2RYTm9LRzFrWDJKMVppbGNiaUFnSUNCOVhHNGdJQ0FnWW5WbWN5NXdkWE5vS0hCaGMzTjNiM0prS1Z4dUlDQWdJR2xtSUNoellXeDBLU0I3WEc0Z0lDQWdJQ0JpZFdaekxuQjFjMmdvYzJGc2RDbGNiaUFnSUNCOVhHNGdJQ0FnYldSZlluVm1JRDBnYldRMUtFSjFabVpsY2k1amIyNWpZWFFvWW5WbWN5a3BYRzRnSUNBZ1luVm1jeUE5SUZ0ZFhHNGdJQ0FnYVNBOUlEQmNiaUFnSUNCcFppQW9hMlY1VEdWdUlENGdNQ2tnZTF4dUlDQWdJQ0FnZDJocGJHVWdLSFJ5ZFdVcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0d0bGVVeGxiaUE5UFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tHa2dQVDA5SUcxa1gySjFaaTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUd0bGVWdHJhU3NyWFNBOUlHMWtYMkoxWmx0cFhWeHVJQ0FnSUNBZ0lDQnJaWGxNWlc0dExWeHVJQ0FnSUNBZ0lDQnBLeXRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLR2wyVEdWdUlENGdNQ0FtSmlCcElDRTlQU0J0WkY5aWRXWXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQjNhR2xzWlNBb2RISjFaU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9hWFpNWlc0Z1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmljbVZoYTF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2hwSUQwOVBTQnRaRjlpZFdZdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdZbkpsWVd0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBkbHRwYVNzclhTQTlJRzFrWDJKMVpsdHBYVnh1SUNBZ0lDQWdJQ0JwZGt4bGJpMHRYRzRnSUNBZ0lDQWdJR2tySzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvYTJWNVRHVnVJRDA5UFNBd0lDWW1JR2wyVEdWdUlEMDlQU0F3S1NCN1hHNGdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQm1iM0lnS0drZ1BTQXdPeUJwSUR3Z2JXUmZZblZtTG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ2JXUmZZblZtVzJsZElEMGdNRnh1SUNCOVhHNGdJSEpsZEhWeWJpQjdYRzRnSUNBZ2EyVjVPaUJyWlhrc1hHNGdJQ0FnYVhZNklHbDJYRzRnSUgxY2JuMWNiaUpkZlE9PSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG5pbmhlcml0cyhTdHJlYW1DaXBoZXIsIFRyYW5zZm9ybSlcbm1vZHVsZS5leHBvcnRzID0gU3RyZWFtQ2lwaGVyXG5mdW5jdGlvbiBTdHJlYW1DaXBoZXIgKG1vZGUsIGtleSwgaXYsIGRlY3J5cHQpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFN0cmVhbUNpcGhlcikpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihtb2RlLCBrZXksIGl2KVxuICB9XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IG5ldyBCdWZmZXIoaXYubGVuZ3RoKVxuICB0aGlzLl9jYWNoZSA9IG5ldyBCdWZmZXIoJycpXG4gIHRoaXMuX3NlY0NhY2hlID0gbmV3IEJ1ZmZlcignJylcbiAgdGhpcy5fZGVjcnlwdCA9IGRlY3J5cHRcbiAgaXYuY29weSh0aGlzLl9wcmV2KVxuICB0aGlzLl9tb2RlID0gbW9kZVxufVxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIHJldHVybiB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmssIHRoaXMuX2RlY3J5cHQpXG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fY2lwaGVyLnNjcnViKClcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZbkp2ZDNObGNtbG1lUzF6YVdkdUwyNXZaR1ZmYlc5a2RXeGxjeTl3WVhKelpTMWhjMjR4TDI1dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMV0ZsY3k5emRISmxZVzFEYVhCb1pYSXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCaFpYTWdQU0J5WlhGMWFYSmxLQ2N1TDJGbGN5Y3BYRzUyWVhJZ1ZISmhibk5tYjNKdElEMGdjbVZ4ZFdseVpTZ25ZMmx3YUdWeUxXSmhjMlVuS1Z4dWRtRnlJR2x1YUdWeWFYUnpJRDBnY21WeGRXbHlaU2duYVc1b1pYSnBkSE1uS1Z4dVhHNXBibWhsY21sMGN5aFRkSEpsWVcxRGFYQm9aWElzSUZSeVlXNXpabTl5YlNsY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1UzUnlaV0Z0UTJsd2FHVnlYRzVtZFc1amRHbHZiaUJUZEhKbFlXMURhWEJvWlhJZ0tHMXZaR1VzSUd0bGVTd2dhWFlzSUdSbFkzSjVjSFFwSUh0Y2JpQWdhV1lnS0NFb2RHaHBjeUJwYm5OMFlXNWpaVzltSUZOMGNtVmhiVU5wY0dobGNpa3BJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRk4wY21WaGJVTnBjR2hsY2lodGIyUmxMQ0JyWlhrc0lHbDJLVnh1SUNCOVhHNGdJRlJ5WVc1elptOXliUzVqWVd4c0tIUm9hWE1wWEc0Z0lIUm9hWE11WDJOcGNHaGxjaUE5SUc1bGR5QmhaWE11UVVWVEtHdGxlU2xjYmlBZ2RHaHBjeTVmY0hKbGRpQTlJRzVsZHlCQ2RXWm1aWElvYVhZdWJHVnVaM1JvS1Z4dUlDQjBhR2x6TGw5allXTm9aU0E5SUc1bGR5QkNkV1ptWlhJb0p5Y3BYRzRnSUhSb2FYTXVYM05sWTBOaFkyaGxJRDBnYm1WM0lFSjFabVpsY2lnbkp5bGNiaUFnZEdocGN5NWZaR1ZqY25sd2RDQTlJR1JsWTNKNWNIUmNiaUFnYVhZdVkyOXdlU2gwYUdsekxsOXdjbVYyS1Z4dUlDQjBhR2x6TGw5dGIyUmxJRDBnYlc5a1pWeHVmVnh1VTNSeVpXRnRRMmx3YUdWeUxuQnliM1J2ZEhsd1pTNWZkWEJrWVhSbElEMGdablZ1WTNScGIyNGdLR05vZFc1cktTQjdYRzRnSUhKbGRIVnliaUIwYUdsekxsOXRiMlJsTG1WdVkzSjVjSFFvZEdocGN5d2dZMmgxYm1zc0lIUm9hWE11WDJSbFkzSjVjSFFwWEc1OVhHNVRkSEpsWVcxRGFYQm9aWEl1Y0hKdmRHOTBlWEJsTGw5bWFXNWhiQ0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnZEdocGN5NWZZMmx3YUdWeUxuTmpjblZpS0NsY2JuMWNiaUpkZlE9PSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZnVuY3Rpb24gZ2V0QmxvY2sgKHNlbGYpIHtcbiAgc2VsZi5fcHJldiA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgcmV0dXJuIHNlbGYuX3ByZXZcbn1cblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rKSB7XG4gIHdoaWxlIChzZWxmLl9jYWNoZS5sZW5ndGggPCBjaHVuay5sZW5ndGgpIHtcbiAgICBzZWxmLl9jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3NlbGYuX2NhY2hlLCBnZXRCbG9jayhzZWxmKV0pXG4gIH1cblxuICB2YXIgcGFkID0gc2VsZi5fY2FjaGUuc2xpY2UoMCwgY2h1bmsubGVuZ3RoKVxuICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGNodW5rLmxlbmd0aClcbiAgcmV0dXJuIHhvcihjaHVuaywgcGFkKVxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMXphV2R1TDI1dlpHVmZiVzlrZFd4bGN5OXdZWEp6WlMxaGMyNHhMMjV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUxXRmxjeTl0YjJSbGN5OXZabUl1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW5aaGNpQjRiM0lnUFNCeVpYRjFhWEpsS0NkaWRXWm1aWEl0ZUc5eUp5bGNibHh1Wm5WdVkzUnBiMjRnWjJWMFFteHZZMnNnS0hObGJHWXBJSHRjYmlBZ2MyVnNaaTVmY0hKbGRpQTlJSE5sYkdZdVgyTnBjR2hsY2k1bGJtTnllWEIwUW14dlkyc29jMlZzWmk1ZmNISmxkaWxjYmlBZ2NtVjBkWEp1SUhObGJHWXVYM0J5WlhaY2JuMWNibHh1Wlhod2IzSjBjeTVsYm1OeWVYQjBJRDBnWm5WdVkzUnBiMjRnS0hObGJHWXNJR05vZFc1cktTQjdYRzRnSUhkb2FXeGxJQ2h6Wld4bUxsOWpZV05vWlM1c1pXNW5kR2dnUENCamFIVnVheTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQnpaV3htTGw5allXTm9aU0E5SUVKMVptWmxjaTVqYjI1allYUW9XM05sYkdZdVgyTmhZMmhsTENCblpYUkNiRzlqYXloelpXeG1LVjBwWEc0Z0lIMWNibHh1SUNCMllYSWdjR0ZrSUQwZ2MyVnNaaTVmWTJGamFHVXVjMnhwWTJVb01Dd2dZMmgxYm1zdWJHVnVaM1JvS1Z4dUlDQnpaV3htTGw5allXTm9aU0E5SUhObGJHWXVYMk5oWTJobExuTnNhV05sS0dOb2RXNXJMbXhsYm1kMGFDbGNiaUFnY21WMGRYSnVJSGh2Y2loamFIVnVheXdnY0dGa0tWeHVmVnh1SWwxOSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZnVuY3Rpb24gaW5jcjMyIChpdikge1xuICB2YXIgbGVuID0gaXYubGVuZ3RoXG4gIHZhciBpdGVtXG4gIHdoaWxlIChsZW4tLSkge1xuICAgIGl0ZW0gPSBpdi5yZWFkVUludDgobGVuKVxuICAgIGlmIChpdGVtID09PSAyNTUpIHtcbiAgICAgIGl2LndyaXRlVUludDgoMCwgbGVuKVxuICAgIH0gZWxzZSB7XG4gICAgICBpdGVtKytcbiAgICAgIGl2LndyaXRlVUludDgoaXRlbSwgbGVuKVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QmxvY2sgKHNlbGYpIHtcbiAgdmFyIG91dCA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgaW5jcjMyKHNlbGYuX3ByZXYpXG4gIHJldHVybiBvdXRcbn1cblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rKSB7XG4gIHdoaWxlIChzZWxmLl9jYWNoZS5sZW5ndGggPCBjaHVuay5sZW5ndGgpIHtcbiAgICBzZWxmLl9jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3NlbGYuX2NhY2hlLCBnZXRCbG9jayhzZWxmKV0pXG4gIH1cbiAgdmFyIHBhZCA9IHNlbGYuX2NhY2hlLnNsaWNlKDAsIGNodW5rLmxlbmd0aClcbiAgc2VsZi5fY2FjaGUgPSBzZWxmLl9jYWNoZS5zbGljZShjaHVuay5sZW5ndGgpXG4gIHJldHVybiB4b3IoY2h1bmssIHBhZClcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZbkp2ZDNObGNtbG1lUzF6YVdkdUwyNXZaR1ZmYlc5a2RXeGxjeTl3WVhKelpTMWhjMjR4TDI1dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMV0ZsY3k5dGIyUmxjeTlqZEhJdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCNGIzSWdQU0J5WlhGMWFYSmxLQ2RpZFdabVpYSXRlRzl5SnlsY2JseHVablZ1WTNScGIyNGdhVzVqY2pNeUlDaHBkaWtnZTF4dUlDQjJZWElnYkdWdUlEMGdhWFl1YkdWdVozUm9YRzRnSUhaaGNpQnBkR1Z0WEc0Z0lIZG9hV3hsSUNoc1pXNHRMU2tnZTF4dUlDQWdJR2wwWlcwZ1BTQnBkaTV5WldGa1ZVbHVkRGdvYkdWdUtWeHVJQ0FnSUdsbUlDaHBkR1Z0SUQwOVBTQXlOVFVwSUh0Y2JpQWdJQ0FnSUdsMkxuZHlhWFJsVlVsdWREZ29NQ3dnYkdWdUtWeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JwZEdWdEt5dGNiaUFnSUNBZ0lHbDJMbmR5YVhSbFZVbHVkRGdvYVhSbGJTd2diR1Z1S1Z4dUlDQWdJQ0FnWW5KbFlXdGNiaUFnSUNCOVhHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdaMlYwUW14dlkyc2dLSE5sYkdZcElIdGNiaUFnZG1GeUlHOTFkQ0E5SUhObGJHWXVYMk5wY0dobGNpNWxibU55ZVhCMFFteHZZMnNvYzJWc1ppNWZjSEpsZGlsY2JpQWdhVzVqY2pNeUtITmxiR1l1WDNCeVpYWXBYRzRnSUhKbGRIVnliaUJ2ZFhSY2JuMWNibHh1Wlhod2IzSjBjeTVsYm1OeWVYQjBJRDBnWm5WdVkzUnBiMjRnS0hObGJHWXNJR05vZFc1cktTQjdYRzRnSUhkb2FXeGxJQ2h6Wld4bUxsOWpZV05vWlM1c1pXNW5kR2dnUENCamFIVnVheTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQnpaV3htTGw5allXTm9aU0E5SUVKMVptWmxjaTVqYjI1allYUW9XM05sYkdZdVgyTmhZMmhsTENCblpYUkNiRzlqYXloelpXeG1LVjBwWEc0Z0lIMWNiaUFnZG1GeUlIQmhaQ0E5SUhObGJHWXVYMk5oWTJobExuTnNhV05sS0RBc0lHTm9kVzVyTG14bGJtZDBhQ2xjYmlBZ2MyVnNaaTVmWTJGamFHVWdQU0J6Wld4bUxsOWpZV05vWlM1emJHbGpaU2hqYUhWdWF5NXNaVzVuZEdncFhHNGdJSEpsZEhWeWJpQjRiM0lvWTJoMWJtc3NJSEJoWkNsY2JuMWNiaUpkZlE9PSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbmZ1bmN0aW9uIGVuY3J5cHRCeXRlIChzZWxmLCBieXRlUGFyYW0sIGRlY3J5cHQpIHtcbiAgdmFyIHBhZCA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgdmFyIG91dCA9IHBhZFswXSBeIGJ5dGVQYXJhbVxuICBzZWxmLl9wcmV2ID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fcHJldi5zbGljZSgxKSwgbmV3IEJ1ZmZlcihbZGVjcnlwdCA/IGJ5dGVQYXJhbSA6IG91dF0pXSlcbiAgcmV0dXJuIG91dFxufVxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rLCBkZWNyeXB0KSB7XG4gIHZhciBsZW4gPSBjaHVuay5sZW5ndGhcbiAgdmFyIG91dCA9IG5ldyBCdWZmZXIobGVuKVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBlbmNyeXB0Qnl0ZShzZWxmLCBjaHVua1tpXSwgZGVjcnlwdClcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WW5KdmQzTmxjbWxtZVMxemFXZHVMMjV2WkdWZmJXOWtkV3hsY3k5d1lYSnpaUzFoYzI0eEwyNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TFdGbGN5OXRiMlJsY3k5alptSTRMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVpuVnVZM1JwYjI0Z1pXNWpjbmx3ZEVKNWRHVWdLSE5sYkdZc0lHSjVkR1ZRWVhKaGJTd2daR1ZqY25sd2RDa2dlMXh1SUNCMllYSWdjR0ZrSUQwZ2MyVnNaaTVmWTJsd2FHVnlMbVZ1WTNKNWNIUkNiRzlqYXloelpXeG1MbDl3Y21WMktWeHVJQ0IyWVhJZ2IzVjBJRDBnY0dGa1d6QmRJRjRnWW5sMFpWQmhjbUZ0WEc0Z0lITmxiR1l1WDNCeVpYWWdQU0JDZFdabVpYSXVZMjl1WTJGMEtGdHpaV3htTGw5d2NtVjJMbk5zYVdObEtERXBMQ0J1WlhjZ1FuVm1abVZ5S0Z0a1pXTnllWEIwSUQ4Z1lubDBaVkJoY21GdElEb2diM1YwWFNsZEtWeHVJQ0J5WlhSMWNtNGdiM1YwWEc1OVhHNWxlSEJ2Y25SekxtVnVZM0o1Y0hRZ1BTQm1kVzVqZEdsdmJpQW9jMlZzWml3Z1kyaDFibXNzSUdSbFkzSjVjSFFwSUh0Y2JpQWdkbUZ5SUd4bGJpQTlJR05vZFc1ckxteGxibWQwYUZ4dUlDQjJZWElnYjNWMElEMGdibVYzSUVKMVptWmxjaWhzWlc0cFhHNGdJSFpoY2lCcElEMGdMVEZjYmlBZ2QyaHBiR1VnS0NzcmFTQThJR3hsYmlrZ2UxeHVJQ0FnSUc5MWRGdHBYU0E5SUdWdVkzSjVjSFJDZVhSbEtITmxiR1lzSUdOb2RXNXJXMmxkTENCa1pXTnllWEIwS1Z4dUlDQjlYRzRnSUhKbGRIVnliaUJ2ZFhSY2JuMWNiaUpkZlE9PSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbmZ1bmN0aW9uIGVuY3J5cHRCeXRlIChzZWxmLCBieXRlUGFyYW0sIGRlY3J5cHQpIHtcbiAgdmFyIHBhZFxuICB2YXIgaSA9IC0xXG4gIHZhciBsZW4gPSA4XG4gIHZhciBvdXQgPSAwXG4gIHZhciBiaXQsIHZhbHVlXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBwYWQgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gICAgYml0ID0gKGJ5dGVQYXJhbSAmICgxIDw8ICg3IC0gaSkpKSA/IDB4ODAgOiAwXG4gICAgdmFsdWUgPSBwYWRbMF0gXiBiaXRcbiAgICBvdXQgKz0gKCh2YWx1ZSAmIDB4ODApID4+IChpICUgOCkpXG4gICAgc2VsZi5fcHJldiA9IHNoaWZ0SW4oc2VsZi5fcHJldiwgZGVjcnlwdCA/IGJpdCA6IHZhbHVlKVxuICB9XG4gIHJldHVybiBvdXRcbn1cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaywgZGVjcnlwdCkge1xuICB2YXIgbGVuID0gY2h1bmsubGVuZ3RoXG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKGxlbilcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0W2ldID0gZW5jcnlwdEJ5dGUoc2VsZiwgY2h1bmtbaV0sIGRlY3J5cHQpXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuZnVuY3Rpb24gc2hpZnRJbiAoYnVmZmVyLCB2YWx1ZSkge1xuICB2YXIgbGVuID0gYnVmZmVyLmxlbmd0aFxuICB2YXIgaSA9IC0xXG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKGJ1ZmZlci5sZW5ndGgpXG4gIGJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoW2J1ZmZlciwgbmV3IEJ1ZmZlcihbdmFsdWVdKV0pXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBidWZmZXJbaV0gPDwgMSB8IGJ1ZmZlcltpICsgMV0gPj4gKDcpXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMXphV2R1TDI1dlpHVmZiVzlrZFd4bGN5OXdZWEp6WlMxaGMyNHhMMjV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUxXRmxjeTl0YjJSbGN5OWpabUl4TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKbWRXNWpkR2x2YmlCbGJtTnllWEIwUW5sMFpTQW9jMlZzWml3Z1lubDBaVkJoY21GdExDQmtaV055ZVhCMEtTQjdYRzRnSUhaaGNpQndZV1JjYmlBZ2RtRnlJR2tnUFNBdE1WeHVJQ0IyWVhJZ2JHVnVJRDBnT0Z4dUlDQjJZWElnYjNWMElEMGdNRnh1SUNCMllYSWdZbWwwTENCMllXeDFaVnh1SUNCM2FHbHNaU0FvS3l0cElEd2diR1Z1S1NCN1hHNGdJQ0FnY0dGa0lEMGdjMlZzWmk1ZlkybHdhR1Z5TG1WdVkzSjVjSFJDYkc5amF5aHpaV3htTGw5d2NtVjJLVnh1SUNBZ0lHSnBkQ0E5SUNoaWVYUmxVR0Z5WVcwZ0ppQW9NU0E4UENBb055QXRJR2twS1NrZ1B5QXdlRGd3SURvZ01GeHVJQ0FnSUhaaGJIVmxJRDBnY0dGa1d6QmRJRjRnWW1sMFhHNGdJQ0FnYjNWMElDczlJQ2dvZG1Gc2RXVWdKaUF3ZURnd0tTQStQaUFvYVNBbElEZ3BLVnh1SUNBZ0lITmxiR1l1WDNCeVpYWWdQU0J6YUdsbWRFbHVLSE5sYkdZdVgzQnlaWFlzSUdSbFkzSjVjSFFnUHlCaWFYUWdPaUIyWVd4MVpTbGNiaUFnZlZ4dUlDQnlaWFIxY200Z2IzVjBYRzU5WEc1bGVIQnZjblJ6TG1WdVkzSjVjSFFnUFNCbWRXNWpkR2x2YmlBb2MyVnNaaXdnWTJoMWJtc3NJR1JsWTNKNWNIUXBJSHRjYmlBZ2RtRnlJR3hsYmlBOUlHTm9kVzVyTG14bGJtZDBhRnh1SUNCMllYSWdiM1YwSUQwZ2JtVjNJRUoxWm1abGNpaHNaVzRwWEc0Z0lIWmhjaUJwSUQwZ0xURmNiaUFnZDJocGJHVWdLQ3NyYVNBOElHeGxiaWtnZTF4dUlDQWdJRzkxZEZ0cFhTQTlJR1Z1WTNKNWNIUkNlWFJsS0hObGJHWXNJR05vZFc1clcybGRMQ0JrWldOeWVYQjBLVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnZkWFJjYm4xY2JtWjFibU4wYVc5dUlITm9hV1owU1c0Z0tHSjFabVpsY2l3Z2RtRnNkV1VwSUh0Y2JpQWdkbUZ5SUd4bGJpQTlJR0oxWm1abGNpNXNaVzVuZEdoY2JpQWdkbUZ5SUdrZ1BTQXRNVnh1SUNCMllYSWdiM1YwSUQwZ2JtVjNJRUoxWm1abGNpaGlkV1ptWlhJdWJHVnVaM1JvS1Z4dUlDQmlkV1ptWlhJZ1BTQkNkV1ptWlhJdVkyOXVZMkYwS0Z0aWRXWm1aWElzSUc1bGR5QkNkV1ptWlhJb1czWmhiSFZsWFNsZEtWeHVJQ0IzYUdsc1pTQW9LeXRwSUR3Z2JHVnVLU0I3WEc0Z0lDQWdiM1YwVzJsZElEMGdZblZtWm1WeVcybGRJRHc4SURFZ2ZDQmlkV1ptWlhKYmFTQXJJREZkSUQ0K0lDZzNLVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnZkWFJjYm4xY2JpSmRmUT09IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xudmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgZGF0YSwgZGVjcnlwdCkge1xuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcignJylcbiAgdmFyIGxlblxuXG4gIHdoaWxlIChkYXRhLmxlbmd0aCkge1xuICAgIGlmIChzZWxmLl9jYWNoZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHNlbGYuX2NhY2hlID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICAgICAgc2VsZi5fcHJldiA9IG5ldyBCdWZmZXIoJycpXG4gICAgfVxuXG4gICAgaWYgKHNlbGYuX2NhY2hlLmxlbmd0aCA8PSBkYXRhLmxlbmd0aCkge1xuICAgICAgbGVuID0gc2VsZi5fY2FjaGUubGVuZ3RoXG4gICAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFtvdXQsIGVuY3J5cHRTdGFydChzZWxmLCBkYXRhLnNsaWNlKDAsIGxlbiksIGRlY3J5cHQpXSlcbiAgICAgIGRhdGEgPSBkYXRhLnNsaWNlKGxlbilcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ID0gQnVmZmVyLmNvbmNhdChbb3V0LCBlbmNyeXB0U3RhcnQoc2VsZiwgZGF0YSwgZGVjcnlwdCldKVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3V0XG59XG5mdW5jdGlvbiBlbmNyeXB0U3RhcnQgKHNlbGYsIGRhdGEsIGRlY3J5cHQpIHtcbiAgdmFyIGxlbiA9IGRhdGEubGVuZ3RoXG4gIHZhciBvdXQgPSB4b3IoZGF0YSwgc2VsZi5fY2FjaGUpXG4gIHNlbGYuX2NhY2hlID0gc2VsZi5fY2FjaGUuc2xpY2UobGVuKVxuICBzZWxmLl9wcmV2ID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fcHJldiwgZGVjcnlwdCA/IGRhdGEgOiBvdXRdKVxuICByZXR1cm4gb3V0XG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WW5KdmQzTmxjbWxtZVMxemFXZHVMMjV2WkdWZmJXOWtkV3hsY3k5d1lYSnpaUzFoYzI0eEwyNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TFdGbGN5OXRiMlJsY3k5alptSXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW5aaGNpQjRiM0lnUFNCeVpYRjFhWEpsS0NkaWRXWm1aWEl0ZUc5eUp5bGNibHh1Wlhod2IzSjBjeTVsYm1OeWVYQjBJRDBnWm5WdVkzUnBiMjRnS0hObGJHWXNJR1JoZEdFc0lHUmxZM0o1Y0hRcElIdGNiaUFnZG1GeUlHOTFkQ0E5SUc1bGR5QkNkV1ptWlhJb0p5Y3BYRzRnSUhaaGNpQnNaVzVjYmx4dUlDQjNhR2xzWlNBb1pHRjBZUzVzWlc1bmRHZ3BJSHRjYmlBZ0lDQnBaaUFvYzJWc1ppNWZZMkZqYUdVdWJHVnVaM1JvSUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0J6Wld4bUxsOWpZV05vWlNBOUlITmxiR1l1WDJOcGNHaGxjaTVsYm1OeWVYQjBRbXh2WTJzb2MyVnNaaTVmY0hKbGRpbGNiaUFnSUNBZ0lITmxiR1l1WDNCeVpYWWdQU0J1WlhjZ1FuVm1abVZ5S0NjbktWeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaHpaV3htTGw5allXTm9aUzVzWlc1bmRHZ2dQRDBnWkdGMFlTNXNaVzVuZEdncElIdGNiaUFnSUNBZ0lHeGxiaUE5SUhObGJHWXVYMk5oWTJobExteGxibWQwYUZ4dUlDQWdJQ0FnYjNWMElEMGdRblZtWm1WeUxtTnZibU5oZENoYmIzVjBMQ0JsYm1OeWVYQjBVM1JoY25Rb2MyVnNaaXdnWkdGMFlTNXpiR2xqWlNnd0xDQnNaVzRwTENCa1pXTnllWEIwS1YwcFhHNGdJQ0FnSUNCa1lYUmhJRDBnWkdGMFlTNXpiR2xqWlNoc1pXNHBYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUc5MWRDQTlJRUoxWm1abGNpNWpiMjVqWVhRb1cyOTFkQ3dnWlc1amNubHdkRk4wWVhKMEtITmxiR1lzSUdSaGRHRXNJR1JsWTNKNWNIUXBYU2xjYmlBZ0lDQWdJR0p5WldGclhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUc5MWRGeHVmVnh1Wm5WdVkzUnBiMjRnWlc1amNubHdkRk4wWVhKMElDaHpaV3htTENCa1lYUmhMQ0JrWldOeWVYQjBLU0I3WEc0Z0lIWmhjaUJzWlc0Z1BTQmtZWFJoTG14bGJtZDBhRnh1SUNCMllYSWdiM1YwSUQwZ2VHOXlLR1JoZEdFc0lITmxiR1l1WDJOaFkyaGxLVnh1SUNCelpXeG1MbDlqWVdOb1pTQTlJSE5sYkdZdVgyTmhZMmhsTG5Oc2FXTmxLR3hsYmlsY2JpQWdjMlZzWmk1ZmNISmxkaUE5SUVKMVptWmxjaTVqYjI1allYUW9XM05sYkdZdVgzQnlaWFlzSUdSbFkzSjVjSFFnUHlCa1lYUmhJRG9nYjNWMFhTbGNiaUFnY21WMGRYSnVJRzkxZEZ4dWZWeHVJbDE5IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xudmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgR0hBU0ggPSByZXF1aXJlKCcuL2doYXNoJylcbnZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcbmluaGVyaXRzKFN0cmVhbUNpcGhlciwgVHJhbnNmb3JtKVxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW1DaXBoZXJcblxuZnVuY3Rpb24gU3RyZWFtQ2lwaGVyIChtb2RlLCBrZXksIGl2LCBkZWNyeXB0KSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTdHJlYW1DaXBoZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBTdHJlYW1DaXBoZXIobW9kZSwga2V5LCBpdilcbiAgfVxuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuICB0aGlzLl9maW5JRCA9IEJ1ZmZlci5jb25jYXQoW2l2LCBuZXcgQnVmZmVyKFswLCAwLCAwLCAxXSldKVxuICBpdiA9IEJ1ZmZlci5jb25jYXQoW2l2LCBuZXcgQnVmZmVyKFswLCAwLCAwLCAyXSldKVxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBuZXcgQnVmZmVyKGl2Lmxlbmd0aClcbiAgdGhpcy5fY2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxuICB0aGlzLl9zZWNDYWNoZSA9IG5ldyBCdWZmZXIoJycpXG4gIHRoaXMuX2RlY3J5cHQgPSBkZWNyeXB0XG4gIHRoaXMuX2FsZW4gPSAwXG4gIHRoaXMuX2xlbiA9IDBcbiAgaXYuY29weSh0aGlzLl9wcmV2KVxuICB0aGlzLl9tb2RlID0gbW9kZVxuICB2YXIgaCA9IG5ldyBCdWZmZXIoNClcbiAgaC5maWxsKDApXG4gIHRoaXMuX2doYXNoID0gbmV3IEdIQVNIKHRoaXMuX2NpcGhlci5lbmNyeXB0QmxvY2soaCkpXG4gIHRoaXMuX2F1dGhUYWcgPSBudWxsXG4gIHRoaXMuX2NhbGxlZCA9IGZhbHNlXG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgaWYgKCF0aGlzLl9jYWxsZWQgJiYgdGhpcy5fYWxlbikge1xuICAgIHZhciBydW1wID0gMTYgLSAodGhpcy5fYWxlbiAlIDE2KVxuICAgIGlmIChydW1wIDwgMTYpIHtcbiAgICAgIHJ1bXAgPSBuZXcgQnVmZmVyKHJ1bXApXG4gICAgICBydW1wLmZpbGwoMClcbiAgICAgIHRoaXMuX2doYXNoLnVwZGF0ZShydW1wKVxuICAgIH1cbiAgfVxuICB0aGlzLl9jYWxsZWQgPSB0cnVlXG4gIHZhciBvdXQgPSB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmspXG4gIGlmICh0aGlzLl9kZWNyeXB0KSB7XG4gICAgdGhpcy5fZ2hhc2gudXBkYXRlKGNodW5rKVxuICB9IGVsc2Uge1xuICAgIHRoaXMuX2doYXNoLnVwZGF0ZShvdXQpXG4gIH1cbiAgdGhpcy5fbGVuICs9IGNodW5rLmxlbmd0aFxuICByZXR1cm4gb3V0XG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuX2RlY3J5cHQgJiYgIXRoaXMuX2F1dGhUYWcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHN0YXRlIG9yIHVuYWJsZSB0byBhdXRoZW50aWNhdGUgZGF0YScpXG4gIH1cbiAgdmFyIHRhZyA9IHhvcih0aGlzLl9naGFzaC5maW5hbCh0aGlzLl9hbGVuICogOCwgdGhpcy5fbGVuICogOCksIHRoaXMuX2NpcGhlci5lbmNyeXB0QmxvY2sodGhpcy5fZmluSUQpKVxuICBpZiAodGhpcy5fZGVjcnlwdCkge1xuICAgIGlmICh4b3JUZXN0KHRhZywgdGhpcy5fYXV0aFRhZykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgc3RhdGUgb3IgdW5hYmxlIHRvIGF1dGhlbnRpY2F0ZSBkYXRhJylcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fYXV0aFRhZyA9IHRhZ1xuICB9XG4gIHRoaXMuX2NpcGhlci5zY3J1YigpXG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLmdldEF1dGhUYWcgPSBmdW5jdGlvbiBnZXRBdXRoVGFnICgpIHtcbiAgaWYgKCF0aGlzLl9kZWNyeXB0ICYmIEJ1ZmZlci5pc0J1ZmZlcih0aGlzLl9hdXRoVGFnKSkge1xuICAgIHJldHVybiB0aGlzLl9hdXRoVGFnXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0aW5nIHRvIGdldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG4gIH1cbn1cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuc2V0QXV0aFRhZyA9IGZ1bmN0aW9uIHNldEF1dGhUYWcgKHRhZykge1xuICBpZiAodGhpcy5fZGVjcnlwdCkge1xuICAgIHRoaXMuX2F1dGhUYWcgPSB0YWdcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRpbmcgdG8gc2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbiAgfVxufVxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5zZXRBQUQgPSBmdW5jdGlvbiBzZXRBQUQgKGJ1Zikge1xuICBpZiAoIXRoaXMuX2NhbGxlZCkge1xuICAgIHRoaXMuX2doYXNoLnVwZGF0ZShidWYpXG4gICAgdGhpcy5fYWxlbiArPSBidWYubGVuZ3RoXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0aW5nIHRvIHNldCBBQUQgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxuICB9XG59XG5mdW5jdGlvbiB4b3JUZXN0IChhLCBiKSB7XG4gIHZhciBvdXQgPSAwXG4gIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICBvdXQrK1xuICB9XG4gIHZhciBsZW4gPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIG91dCArPSAoYVtpXSBeIGJbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMXphV2R1TDI1dlpHVmZiVzlrZFd4bGN5OXdZWEp6WlMxaGMyNHhMMjV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUxXRmxjeTloZFhSb1EybHdhR1Z5TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKMllYSWdZV1Z6SUQwZ2NtVnhkV2x5WlNnbkxpOWhaWE1uS1Z4dWRtRnlJRlJ5WVc1elptOXliU0E5SUhKbGNYVnBjbVVvSjJOcGNHaGxjaTFpWVhObEp5bGNiblpoY2lCcGJtaGxjbWwwY3lBOUlISmxjWFZwY21Vb0oybHVhR1Z5YVhSekp5bGNiblpoY2lCSFNFRlRTQ0E5SUhKbGNYVnBjbVVvSnk0dloyaGhjMmduS1Z4dWRtRnlJSGh2Y2lBOUlISmxjWFZwY21Vb0oySjFabVpsY2kxNGIzSW5LVnh1YVc1b1pYSnBkSE1vVTNSeVpXRnRRMmx3YUdWeUxDQlVjbUZ1YzJadmNtMHBYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRk4wY21WaGJVTnBjR2hsY2x4dVhHNW1kVzVqZEdsdmJpQlRkSEpsWVcxRGFYQm9aWElnS0cxdlpHVXNJR3RsZVN3Z2FYWXNJR1JsWTNKNWNIUXBJSHRjYmlBZ2FXWWdLQ0VvZEdocGN5QnBibk4wWVc1alpXOW1JRk4wY21WaGJVTnBjR2hsY2lrcElIdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGTjBjbVZoYlVOcGNHaGxjaWh0YjJSbExDQnJaWGtzSUdsMktWeHVJQ0I5WEc0Z0lGUnlZVzV6Wm05eWJTNWpZV3hzS0hSb2FYTXBYRzRnSUhSb2FYTXVYMlpwYmtsRUlEMGdRblZtWm1WeUxtTnZibU5oZENoYmFYWXNJRzVsZHlCQ2RXWm1aWElvV3pBc0lEQXNJREFzSURGZEtWMHBYRzRnSUdsMklEMGdRblZtWm1WeUxtTnZibU5oZENoYmFYWXNJRzVsZHlCQ2RXWm1aWElvV3pBc0lEQXNJREFzSURKZEtWMHBYRzRnSUhSb2FYTXVYMk5wY0dobGNpQTlJRzVsZHlCaFpYTXVRVVZUS0d0bGVTbGNiaUFnZEdocGN5NWZjSEpsZGlBOUlHNWxkeUJDZFdabVpYSW9hWFl1YkdWdVozUm9LVnh1SUNCMGFHbHpMbDlqWVdOb1pTQTlJRzVsZHlCQ2RXWm1aWElvSnljcFhHNGdJSFJvYVhNdVgzTmxZME5oWTJobElEMGdibVYzSUVKMVptWmxjaWduSnlsY2JpQWdkR2hwY3k1ZlpHVmpjbmx3ZENBOUlHUmxZM0o1Y0hSY2JpQWdkR2hwY3k1ZllXeGxiaUE5SURCY2JpQWdkR2hwY3k1ZmJHVnVJRDBnTUZ4dUlDQnBkaTVqYjNCNUtIUm9hWE11WDNCeVpYWXBYRzRnSUhSb2FYTXVYMjF2WkdVZ1BTQnRiMlJsWEc0Z0lIWmhjaUJvSUQwZ2JtVjNJRUoxWm1abGNpZzBLVnh1SUNCb0xtWnBiR3dvTUNsY2JpQWdkR2hwY3k1ZloyaGhjMmdnUFNCdVpYY2dSMGhCVTBnb2RHaHBjeTVmWTJsd2FHVnlMbVZ1WTNKNWNIUkNiRzlqYXlob0tTbGNiaUFnZEdocGN5NWZZWFYwYUZSaFp5QTlJRzUxYkd4Y2JpQWdkR2hwY3k1ZlkyRnNiR1ZrSUQwZ1ptRnNjMlZjYm4xY2JsTjBjbVZoYlVOcGNHaGxjaTV3Y205MGIzUjVjR1V1WDNWd1pHRjBaU0E5SUdaMWJtTjBhVzl1SUNoamFIVnVheWtnZTF4dUlDQnBaaUFvSVhSb2FYTXVYMk5oYkd4bFpDQW1KaUIwYUdsekxsOWhiR1Z1S1NCN1hHNGdJQ0FnZG1GeUlISjFiWEFnUFNBeE5pQXRJQ2gwYUdsekxsOWhiR1Z1SUNVZ01UWXBYRzRnSUNBZ2FXWWdLSEoxYlhBZ1BDQXhOaWtnZTF4dUlDQWdJQ0FnY25WdGNDQTlJRzVsZHlCQ2RXWm1aWElvY25WdGNDbGNiaUFnSUNBZ0lISjFiWEF1Wm1sc2JDZ3dLVnh1SUNBZ0lDQWdkR2hwY3k1ZloyaGhjMmd1ZFhCa1lYUmxLSEoxYlhBcFhHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhSb2FYTXVYMk5oYkd4bFpDQTlJSFJ5ZFdWY2JpQWdkbUZ5SUc5MWRDQTlJSFJvYVhNdVgyMXZaR1V1Wlc1amNubHdkQ2gwYUdsekxDQmphSFZ1YXlsY2JpQWdhV1lnS0hSb2FYTXVYMlJsWTNKNWNIUXBJSHRjYmlBZ0lDQjBhR2x6TGw5bmFHRnphQzUxY0dSaGRHVW9ZMmgxYm1zcFhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2RHaHBjeTVmWjJoaGMyZ3VkWEJrWVhSbEtHOTFkQ2xjYmlBZ2ZWeHVJQ0IwYUdsekxsOXNaVzRnS3owZ1kyaDFibXN1YkdWdVozUm9YRzRnSUhKbGRIVnliaUJ2ZFhSY2JuMWNibE4wY21WaGJVTnBjR2hsY2k1d2NtOTBiM1I1Y0dVdVgyWnBibUZzSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNCcFppQW9kR2hwY3k1ZlpHVmpjbmx3ZENBbUppQWhkR2hwY3k1ZllYVjBhRlJoWnlrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduVlc1emRYQndiM0owWldRZ2MzUmhkR1VnYjNJZ2RXNWhZbXhsSUhSdklHRjFkR2hsYm5ScFkyRjBaU0JrWVhSaEp5bGNiaUFnZlZ4dUlDQjJZWElnZEdGbklEMGdlRzl5S0hSb2FYTXVYMmRvWVhOb0xtWnBibUZzS0hSb2FYTXVYMkZzWlc0Z0tpQTRMQ0IwYUdsekxsOXNaVzRnS2lBNEtTd2dkR2hwY3k1ZlkybHdhR1Z5TG1WdVkzSjVjSFJDYkc5amF5aDBhR2x6TGw5bWFXNUpSQ2twWEc0Z0lHbG1JQ2gwYUdsekxsOWtaV055ZVhCMEtTQjdYRzRnSUNBZ2FXWWdLSGh2Y2xSbGMzUW9kR0ZuTENCMGFHbHpMbDloZFhSb1ZHRm5LU2tnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RWYm5OMWNIQnZjblJsWkNCemRHRjBaU0J2Y2lCMWJtRmliR1VnZEc4Z1lYVjBhR1Z1ZEdsallYUmxJR1JoZEdFbktWeHVJQ0FnSUgxY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCMGFHbHpMbDloZFhSb1ZHRm5JRDBnZEdGblhHNGdJSDFjYmlBZ2RHaHBjeTVmWTJsd2FHVnlMbk5qY25WaUtDbGNibjFjYmxOMGNtVmhiVU5wY0dobGNpNXdjbTkwYjNSNWNHVXVaMlYwUVhWMGFGUmhaeUE5SUdaMWJtTjBhVzl1SUdkbGRFRjFkR2hVWVdjZ0tDa2dlMXh1SUNCcFppQW9JWFJvYVhNdVgyUmxZM0o1Y0hRZ0ppWWdRblZtWm1WeUxtbHpRblZtWm1WeUtIUm9hWE11WDJGMWRHaFVZV2NwS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyRjFkR2hVWVdkY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjBGMGRHVnRjSFJwYm1jZ2RHOGdaMlYwSUdGMWRHZ2dkR0ZuSUdsdUlIVnVjM1Z3Y0c5eWRHVmtJSE4wWVhSbEp5bGNiaUFnZlZ4dWZWeHVVM1J5WldGdFEybHdhR1Z5TG5CeWIzUnZkSGx3WlM1elpYUkJkWFJvVkdGbklEMGdablZ1WTNScGIyNGdjMlYwUVhWMGFGUmhaeUFvZEdGbktTQjdYRzRnSUdsbUlDaDBhR2x6TGw5a1pXTnllWEIwS1NCN1hHNGdJQ0FnZEdocGN5NWZZWFYwYUZSaFp5QTlJSFJoWjF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduUVhSMFpXMXdkR2x1WnlCMGJ5QnpaWFFnWVhWMGFDQjBZV2NnYVc0Z2RXNXpkWEJ3YjNKMFpXUWdjM1JoZEdVbktWeHVJQ0I5WEc1OVhHNVRkSEpsWVcxRGFYQm9aWEl1Y0hKdmRHOTBlWEJsTG5ObGRFRkJSQ0E5SUdaMWJtTjBhVzl1SUhObGRFRkJSQ0FvWW5WbUtTQjdYRzRnSUdsbUlDZ2hkR2hwY3k1ZlkyRnNiR1ZrS1NCN1hHNGdJQ0FnZEdocGN5NWZaMmhoYzJndWRYQmtZWFJsS0dKMVppbGNiaUFnSUNCMGFHbHpMbDloYkdWdUlDczlJR0oxWmk1c1pXNW5kR2hjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMEYwZEdWdGNIUnBibWNnZEc4Z2MyVjBJRUZCUkNCcGJpQjFibk4xY0hCdmNuUmxaQ0J6ZEdGMFpTY3BYRzRnSUgxY2JuMWNibVoxYm1OMGFXOXVJSGh2Y2xSbGMzUWdLR0VzSUdJcElIdGNiaUFnZG1GeUlHOTFkQ0E5SURCY2JpQWdhV1lnS0dFdWJHVnVaM1JvSUNFOVBTQmlMbXhsYm1kMGFDa2dlMXh1SUNBZ0lHOTFkQ3NyWEc0Z0lIMWNiaUFnZG1GeUlHeGxiaUE5SUUxaGRHZ3ViV2x1S0dFdWJHVnVaM1JvTENCaUxteGxibWQwYUNsY2JpQWdkbUZ5SUdrZ1BTQXRNVnh1SUNCM2FHbHNaU0FvS3l0cElEd2diR1Z1S1NCN1hHNGdJQ0FnYjNWMElDczlJQ2hoVzJsZElGNGdZbHRwWFNsY2JpQWdmVnh1SUNCeVpYUjFjbTRnYjNWMFhHNTlYRzRpWFgwPSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdzdHJlYW0nKS5UcmFuc2Zvcm1cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXInKS5TdHJpbmdEZWNvZGVyXG5tb2R1bGUuZXhwb3J0cyA9IENpcGhlckJhc2VcbmluaGVyaXRzKENpcGhlckJhc2UsIFRyYW5zZm9ybSlcbmZ1bmN0aW9uIENpcGhlckJhc2UgKGhhc2hNb2RlKSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuaGFzaE1vZGUgPSB0eXBlb2YgaGFzaE1vZGUgPT09ICdzdHJpbmcnXG4gIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgdGhpc1toYXNoTW9kZV0gPSB0aGlzLl9maW5hbE9yRGlnZXN0XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5maW5hbCA9IHRoaXMuX2ZpbmFsT3JEaWdlc3RcbiAgfVxuICB0aGlzLl9kZWNvZGVyID0gbnVsbFxuICB0aGlzLl9lbmNvZGluZyA9IG51bGxcbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBpbnB1dEVuYywgb3V0cHV0RW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBkYXRhID0gbmV3IEJ1ZmZlcihkYXRhLCBpbnB1dEVuYylcbiAgfVxuICB2YXIgb3V0RGF0YSA9IHRoaXMuX3VwZGF0ZShkYXRhKVxuICBpZiAodGhpcy5oYXNoTW9kZSkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cbiAgaWYgKG91dHB1dEVuYykge1xuICAgIG91dERhdGEgPSB0aGlzLl90b1N0cmluZyhvdXREYXRhLCBvdXRwdXRFbmMpXG4gIH1cbiAgcmV0dXJuIG91dERhdGFcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QXV0b1BhZGRpbmcgPSBmdW5jdGlvbiAoKSB7fVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5nZXRBdXRoVGFnID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBnZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBdXRoVGFnID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBzZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBQUQgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhYWQgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGRhdGEsIF8sIG5leHQpIHtcbiAgdmFyIGVyclxuICB0cnkge1xuICAgIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgICB0aGlzLl91cGRhdGUoZGF0YSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXNoKHRoaXMuX3VwZGF0ZShkYXRhKSlcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnIgPSBlXG4gIH0gZmluYWxseSB7XG4gICAgbmV4dChlcnIpXG4gIH1cbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLl9mbHVzaCA9IGZ1bmN0aW9uIChkb25lKSB7XG4gIHZhciBlcnJcbiAgdHJ5IHtcbiAgICB0aGlzLnB1c2godGhpcy5fZmluYWwoKSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfSBmaW5hbGx5IHtcbiAgICBkb25lKGVycilcbiAgfVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZpbmFsT3JEaWdlc3QgPSBmdW5jdGlvbiAob3V0cHV0RW5jKSB7XG4gIHZhciBvdXREYXRhID0gdGhpcy5fZmluYWwoKSB8fCBuZXcgQnVmZmVyKCcnKVxuICBpZiAob3V0cHV0RW5jKSB7XG4gICAgb3V0RGF0YSA9IHRoaXMuX3RvU3RyaW5nKG91dERhdGEsIG91dHB1dEVuYywgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb3V0RGF0YVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fdG9TdHJpbmcgPSBmdW5jdGlvbiAodmFsdWUsIGVuYywgZmluYWwpIHtcbiAgaWYgKCF0aGlzLl9kZWNvZGVyKSB7XG4gICAgdGhpcy5fZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYylcbiAgICB0aGlzLl9lbmNvZGluZyA9IGVuY1xuICB9XG4gIGlmICh0aGlzLl9lbmNvZGluZyAhPT0gZW5jKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYW5cXCd0IHN3aXRjaCBlbmNvZGluZ3MnKVxuICB9XG4gIHZhciBvdXQgPSB0aGlzLl9kZWNvZGVyLndyaXRlKHZhbHVlKVxuICBpZiAoZmluYWwpIHtcbiAgICBvdXQgKz0gdGhpcy5fZGVjb2Rlci5lbmQoKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZbkp2ZDNObGNtbG1lUzF6YVdkdUwyNXZaR1ZmYlc5a2RXeGxjeTl3WVhKelpTMWhjMjR4TDI1dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMV0ZsY3k5dWIyUmxYMjF2WkhWc1pYTXZZMmx3YUdWeUxXSmhjMlV2YVc1a1pYZ3Vhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2labWxzWlNJNkltZGxibVZ5WVhSbFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUoyWVhJZ1ZISmhibk5tYjNKdElEMGdjbVZ4ZFdseVpTZ25jM1J5WldGdEp5a3VWSEpoYm5ObWIzSnRYRzUyWVhJZ2FXNW9aWEpwZEhNZ1BTQnlaWEYxYVhKbEtDZHBibWhsY21sMGN5Y3BYRzUyWVhJZ1UzUnlhVzVuUkdWamIyUmxjaUE5SUhKbGNYVnBjbVVvSjNOMGNtbHVaMTlrWldOdlpHVnlKeWt1VTNSeWFXNW5SR1ZqYjJSbGNseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQkRhWEJvWlhKQ1lYTmxYRzVwYm1obGNtbDBjeWhEYVhCb1pYSkNZWE5sTENCVWNtRnVjMlp2Y20wcFhHNW1kVzVqZEdsdmJpQkRhWEJvWlhKQ1lYTmxJQ2hvWVhOb1RXOWtaU2tnZTF4dUlDQlVjbUZ1YzJadmNtMHVZMkZzYkNoMGFHbHpLVnh1SUNCMGFHbHpMbWhoYzJoTmIyUmxJRDBnZEhsd1pXOW1JR2hoYzJoTmIyUmxJRDA5UFNBbmMzUnlhVzVuSjF4dUlDQnBaaUFvZEdocGN5NW9ZWE5vVFc5a1pTa2dlMXh1SUNBZ0lIUm9hWE5iYUdGemFFMXZaR1ZkSUQwZ2RHaHBjeTVmWm1sdVlXeFBja1JwWjJWemRGeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lIUm9hWE11Wm1sdVlXd2dQU0IwYUdsekxsOW1hVzVoYkU5eVJHbG5aWE4wWEc0Z0lIMWNiaUFnZEdocGN5NWZaR1ZqYjJSbGNpQTlJRzUxYkd4Y2JpQWdkR2hwY3k1ZlpXNWpiMlJwYm1jZ1BTQnVkV3hzWEc1OVhHNURhWEJvWlhKQ1lYTmxMbkJ5YjNSdmRIbHdaUzUxY0dSaGRHVWdQU0JtZFc1amRHbHZiaUFvWkdGMFlTd2dhVzV3ZFhSRmJtTXNJRzkxZEhCMWRFVnVZeWtnZTF4dUlDQnBaaUFvZEhsd1pXOW1JR1JoZEdFZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdaR0YwWVNBOUlHNWxkeUJDZFdabVpYSW9aR0YwWVN3Z2FXNXdkWFJGYm1NcFhHNGdJSDFjYmlBZ2RtRnlJRzkxZEVSaGRHRWdQU0IwYUdsekxsOTFjR1JoZEdVb1pHRjBZU2xjYmlBZ2FXWWdLSFJvYVhNdWFHRnphRTF2WkdVcElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGMxeHVJQ0I5WEc0Z0lHbG1JQ2h2ZFhSd2RYUkZibU1wSUh0Y2JpQWdJQ0J2ZFhSRVlYUmhJRDBnZEdocGN5NWZkRzlUZEhKcGJtY29iM1YwUkdGMFlTd2diM1YwY0hWMFJXNWpLVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnZkWFJFWVhSaFhHNTlYRzVjYmtOcGNHaGxja0poYzJVdWNISnZkRzkwZVhCbExuTmxkRUYxZEc5UVlXUmthVzVuSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMzFjYmx4dVEybHdhR1Z5UW1GelpTNXdjbTkwYjNSNWNHVXVaMlYwUVhWMGFGUmhaeUE5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2QwY25scGJtY2dkRzhnWjJWMElHRjFkR2dnZEdGbklHbHVJSFZ1YzNWd2NHOXlkR1ZrSUhOMFlYUmxKeWxjYm4xY2JseHVRMmx3YUdWeVFtRnpaUzV3Y205MGIzUjVjR1V1YzJWMFFYVjBhRlJoWnlBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkMGNubHBibWNnZEc4Z2MyVjBJR0YxZEdnZ2RHRm5JR2x1SUhWdWMzVndjRzl5ZEdWa0lITjBZWFJsSnlsY2JuMWNibHh1UTJsd2FHVnlRbUZ6WlM1d2NtOTBiM1I1Y0dVdWMyVjBRVUZFSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjNSeWVXbHVaeUIwYnlCelpYUWdZV0ZrSUdsdUlIVnVjM1Z3Y0c5eWRHVmtJSE4wWVhSbEp5bGNibjFjYmx4dVEybHdhR1Z5UW1GelpTNXdjbTkwYjNSNWNHVXVYM1J5WVc1elptOXliU0E5SUdaMWJtTjBhVzl1SUNoa1lYUmhMQ0JmTENCdVpYaDBLU0I3WEc0Z0lIWmhjaUJsY25KY2JpQWdkSEo1SUh0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVvWVhOb1RXOWtaU2tnZTF4dUlDQWdJQ0FnZEdocGN5NWZkWEJrWVhSbEtHUmhkR0VwWEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIUm9hWE11Y0hWemFDaDBhR2x6TGw5MWNHUmhkR1VvWkdGMFlTa3BYRzRnSUNBZ2ZWeHVJQ0I5SUdOaGRHTm9JQ2hsS1NCN1hHNGdJQ0FnWlhKeUlEMGdaVnh1SUNCOUlHWnBibUZzYkhrZ2UxeHVJQ0FnSUc1bGVIUW9aWEp5S1Z4dUlDQjlYRzU5WEc1RGFYQm9aWEpDWVhObExuQnliM1J2ZEhsd1pTNWZabXgxYzJnZ1BTQm1kVzVqZEdsdmJpQW9aRzl1WlNrZ2UxeHVJQ0IyWVhJZ1pYSnlYRzRnSUhSeWVTQjdYRzRnSUNBZ2RHaHBjeTV3ZFhOb0tIUm9hWE11WDJacGJtRnNLQ2twWEc0Z0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQmxjbklnUFNCbFhHNGdJSDBnWm1sdVlXeHNlU0I3WEc0Z0lDQWdaRzl1WlNobGNuSXBYRzRnSUgxY2JuMWNia05wY0dobGNrSmhjMlV1Y0hKdmRHOTBlWEJsTGw5bWFXNWhiRTl5UkdsblpYTjBJRDBnWm5WdVkzUnBiMjRnS0c5MWRIQjFkRVZ1WXlrZ2UxeHVJQ0IyWVhJZ2IzVjBSR0YwWVNBOUlIUm9hWE11WDJacGJtRnNLQ2tnZkh3Z2JtVjNJRUoxWm1abGNpZ25KeWxjYmlBZ2FXWWdLRzkxZEhCMWRFVnVZeWtnZTF4dUlDQWdJRzkxZEVSaGRHRWdQU0IwYUdsekxsOTBiMU4wY21sdVp5aHZkWFJFWVhSaExDQnZkWFJ3ZFhSRmJtTXNJSFJ5ZFdVcFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUc5MWRFUmhkR0ZjYm4xY2JseHVRMmx3YUdWeVFtRnpaUzV3Y205MGIzUjVjR1V1WDNSdlUzUnlhVzVuSUQwZ1puVnVZM1JwYjI0Z0tIWmhiSFZsTENCbGJtTXNJR1pwYm1Gc0tTQjdYRzRnSUdsbUlDZ2hkR2hwY3k1ZlpHVmpiMlJsY2lrZ2UxeHVJQ0FnSUhSb2FYTXVYMlJsWTI5a1pYSWdQU0J1WlhjZ1UzUnlhVzVuUkdWamIyUmxjaWhsYm1NcFhHNGdJQ0FnZEdocGN5NWZaVzVqYjJScGJtY2dQU0JsYm1OY2JpQWdmVnh1SUNCcFppQW9kR2hwY3k1ZlpXNWpiMlJwYm1jZ0lUMDlJR1Z1WXlrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduWTJGdVhGd25kQ0J6ZDJsMFkyZ2daVzVqYjJScGJtZHpKeWxjYmlBZ2ZWeHVJQ0IyWVhJZ2IzVjBJRDBnZEdocGN5NWZaR1ZqYjJSbGNpNTNjbWwwWlNoMllXeDFaU2xjYmlBZ2FXWWdLR1pwYm1Gc0tTQjdYRzRnSUNBZ2IzVjBJQ3M5SUhSb2FYTXVYMlJsWTI5a1pYSXVaVzVrS0NsY2JpQWdmVnh1SUNCeVpYUjFjbTRnYjNWMFhHNTlYRzRpWFgwPSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geG9yIChhLCBiKSB7XG4gIHZhciBsZW5ndGggPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpXG4gIHZhciBidWZmZXIgPSBuZXcgQnVmZmVyKGxlbmd0aClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgYnVmZmVyW2ldID0gYVtpXSBeIGJbaV1cbiAgfVxuXG4gIHJldHVybiBidWZmZXJcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZbkp2ZDNObGNtbG1lUzF6YVdkdUwyNXZaR1ZmYlc5a2RXeGxjeTl3WVhKelpTMWhjMjR4TDI1dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMV0ZsY3k5dWIyUmxYMjF2WkhWc1pYTXZZblZtWm1WeUxYaHZjaTlwYm1SbGVDNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlCNGIzSWdLR0VzSUdJcElIdGNiaUFnZG1GeUlHeGxibWQwYUNBOUlFMWhkR2d1YldsdUtHRXViR1Z1WjNSb0xDQmlMbXhsYm1kMGFDbGNiaUFnZG1GeUlHSjFabVpsY2lBOUlHNWxkeUJDZFdabVpYSW9iR1Z1WjNSb0tWeHVYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2JHVnVaM1JvT3lBcksya3BJSHRjYmlBZ0lDQmlkV1ptWlhKYmFWMGdQU0JoVzJsZElGNGdZbHRwWFZ4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUdKMVptWmxjbHh1ZlZ4dUlsMTkiLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG52YXIgemVyb3MgPSBuZXcgQnVmZmVyKDE2KVxuemVyb3MuZmlsbCgwKVxubW9kdWxlLmV4cG9ydHMgPSBHSEFTSFxuZnVuY3Rpb24gR0hBU0ggKGtleSkge1xuICB0aGlzLmggPSBrZXlcbiAgdGhpcy5zdGF0ZSA9IG5ldyBCdWZmZXIoMTYpXG4gIHRoaXMuc3RhdGUuZmlsbCgwKVxuICB0aGlzLmNhY2hlID0gbmV3IEJ1ZmZlcignJylcbn1cbi8vIGZyb20gaHR0cDovL2JpdHdpc2VzaGlmdGxlZnQuZ2l0aHViLmlvL3NqY2wvZG9jL3N5bWJvbHMvc3JjL2NvcmVfZ2NtLmpzLmh0bWxcbi8vIGJ5IEp1aG8gVsOkaMOkLUhlcnR0dWFcbkdIQVNILnByb3RvdHlwZS5naGFzaCA9IGZ1bmN0aW9uIChibG9jaykge1xuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBibG9jay5sZW5ndGgpIHtcbiAgICB0aGlzLnN0YXRlW2ldIF49IGJsb2NrW2ldXG4gIH1cbiAgdGhpcy5fbXVsdGlwbHkoKVxufVxuXG5HSEFTSC5wcm90b3R5cGUuX211bHRpcGx5ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgVmkgPSB0b0FycmF5KHRoaXMuaClcbiAgdmFyIFppID0gWzAsIDAsIDAsIDBdXG4gIHZhciBqLCB4aSwgbHNiX1ZpXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IDEyOCkge1xuICAgIHhpID0gKHRoaXMuc3RhdGVbfn4oaSAvIDgpXSAmICgxIDw8ICg3IC0gaSAlIDgpKSkgIT09IDBcbiAgICBpZiAoeGkpIHtcbiAgICAgIC8vIFpfaSsxID0gWl9pIF4gVl9pXG4gICAgICBaaSA9IHhvcihaaSwgVmkpXG4gICAgfVxuXG4gICAgLy8gU3RvcmUgdGhlIHZhbHVlIG9mIExTQihWX2kpXG4gICAgbHNiX1ZpID0gKFZpWzNdICYgMSkgIT09IDBcblxuICAgIC8vIFZfaSsxID0gVl9pID4+IDFcbiAgICBmb3IgKGogPSAzOyBqID4gMDsgai0tKSB7XG4gICAgICBWaVtqXSA9IChWaVtqXSA+Pj4gMSkgfCAoKFZpW2ogLSAxXSAmIDEpIDw8IDMxKVxuICAgIH1cbiAgICBWaVswXSA9IFZpWzBdID4+PiAxXG5cbiAgICAvLyBJZiBMU0IoVl9pKSBpcyAxLCBWX2krMSA9IChWX2kgPj4gMSkgXiBSXG4gICAgaWYgKGxzYl9WaSkge1xuICAgICAgVmlbMF0gPSBWaVswXSBeICgweGUxIDw8IDI0KVxuICAgIH1cbiAgfVxuICB0aGlzLnN0YXRlID0gZnJvbUFycmF5KFppKVxufVxuR0hBU0gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChidWYpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIGJ1Zl0pXG4gIHZhciBjaHVua1xuICB3aGlsZSAodGhpcy5jYWNoZS5sZW5ndGggPj0gMTYpIHtcbiAgICBjaHVuayA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgdGhpcy5naGFzaChjaHVuaylcbiAgfVxufVxuR0hBU0gucHJvdG90eXBlLmZpbmFsID0gZnVuY3Rpb24gKGFibCwgYmwpIHtcbiAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoKSB7XG4gICAgdGhpcy5naGFzaChCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCB6ZXJvc10sIDE2KSlcbiAgfVxuICB0aGlzLmdoYXNoKGZyb21BcnJheShbXG4gICAgMCwgYWJsLFxuICAgIDAsIGJsXG4gIF0pKVxuICByZXR1cm4gdGhpcy5zdGF0ZVxufVxuXG5mdW5jdGlvbiB0b0FycmF5IChidWYpIHtcbiAgcmV0dXJuIFtcbiAgICBidWYucmVhZFVJbnQzMkJFKDApLFxuICAgIGJ1Zi5yZWFkVUludDMyQkUoNCksXG4gICAgYnVmLnJlYWRVSW50MzJCRSg4KSxcbiAgICBidWYucmVhZFVJbnQzMkJFKDEyKVxuICBdXG59XG5mdW5jdGlvbiBmcm9tQXJyYXkgKG91dCkge1xuICBvdXQgPSBvdXQubWFwKGZpeHVwX3VpbnQzMilcbiAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIoMTYpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFswXSwgMClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzFdLCA0KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMl0sIDgpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFszXSwgMTIpXG4gIHJldHVybiBidWZcbn1cbnZhciB1aW50X21heCA9IE1hdGgucG93KDIsIDMyKVxuZnVuY3Rpb24gZml4dXBfdWludDMyICh4KSB7XG4gIHZhciByZXQsIHhfcG9zXG4gIHJldCA9IHggPiB1aW50X21heCB8fCB4IDwgMCA/ICh4X3BvcyA9IE1hdGguYWJzKHgpICUgdWludF9tYXgsIHggPCAwID8gdWludF9tYXggLSB4X3BvcyA6IHhfcG9zKSA6IHhcbiAgcmV0dXJuIHJldFxufVxuZnVuY3Rpb24geG9yIChhLCBiKSB7XG4gIHJldHVybiBbXG4gICAgYVswXSBeIGJbMF0sXG4gICAgYVsxXSBeIGJbMV0sXG4gICAgYVsyXSBeIGJbMl0sXG4gICAgYVszXSBeIGJbM11cbiAgXVxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMXphV2R1TDI1dlpHVmZiVzlrZFd4bGN5OXdZWEp6WlMxaGMyNHhMMjV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUxXRmxjeTluYUdGemFDNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKMllYSWdlbVZ5YjNNZ1BTQnVaWGNnUW5WbVptVnlLREUyS1Z4dWVtVnliM011Wm1sc2JDZ3dLVnh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JIU0VGVFNGeHVablZ1WTNScGIyNGdSMGhCVTBnZ0tHdGxlU2tnZTF4dUlDQjBhR2x6TG1nZ1BTQnJaWGxjYmlBZ2RHaHBjeTV6ZEdGMFpTQTlJRzVsZHlCQ2RXWm1aWElvTVRZcFhHNGdJSFJvYVhNdWMzUmhkR1V1Wm1sc2JDZ3dLVnh1SUNCMGFHbHpMbU5oWTJobElEMGdibVYzSUVKMVptWmxjaWduSnlsY2JuMWNiaTh2SUdaeWIyMGdhSFIwY0RvdkwySnBkSGRwYzJWemFHbG1kR3hsWm5RdVoybDBhSFZpTG1sdkwzTnFZMnd2Wkc5akwzTjViV0p2YkhNdmMzSmpMMk52Y21WZloyTnRMbXB6TG1oMGJXeGNiaTh2SUdKNUlFcDFhRzhnVnNPa2FNT2tMVWhsY25SMGRXRmNia2RJUVZOSUxuQnliM1J2ZEhsd1pTNW5hR0Z6YUNBOUlHWjFibU4wYVc5dUlDaGliRzlqYXlrZ2UxeHVJQ0IyWVhJZ2FTQTlJQzB4WEc0Z0lIZG9hV3hsSUNncksya2dQQ0JpYkc5amF5NXNaVzVuZEdncElIdGNiaUFnSUNCMGFHbHpMbk4wWVhSbFcybGRJRjQ5SUdKc2IyTnJXMmxkWEc0Z0lIMWNiaUFnZEdocGN5NWZiWFZzZEdsd2JIa29LVnh1ZlZ4dVhHNUhTRUZUU0M1d2NtOTBiM1I1Y0dVdVgyMTFiSFJwY0d4NUlEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQjJZWElnVm1rZ1BTQjBiMEZ5Y21GNUtIUm9hWE11YUNsY2JpQWdkbUZ5SUZwcElEMGdXekFzSURBc0lEQXNJREJkWEc0Z0lIWmhjaUJxTENCNGFTd2diSE5pWDFacFhHNGdJSFpoY2lCcElEMGdMVEZjYmlBZ2QyaHBiR1VnS0NzcmFTQThJREV5T0NrZ2UxeHVJQ0FnSUhocElEMGdLSFJvYVhNdWMzUmhkR1ZiZm40b2FTQXZJRGdwWFNBbUlDZ3hJRHc4SUNnM0lDMGdhU0FsSURncEtTa2dJVDA5SURCY2JpQWdJQ0JwWmlBb2VHa3BJSHRjYmlBZ0lDQWdJQzh2SUZwZmFTc3hJRDBnV2w5cElGNGdWbDlwWEc0Z0lDQWdJQ0JhYVNBOUlIaHZjaWhhYVN3Z1Zta3BYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdVM1J2Y21VZ2RHaGxJSFpoYkhWbElHOW1JRXhUUWloV1gya3BYRzRnSUNBZ2JITmlYMVpwSUQwZ0tGWnBXek5kSUNZZ01Ta2dJVDA5SURCY2JseHVJQ0FnSUM4dklGWmZhU3N4SUQwZ1ZsOXBJRDQrSURGY2JpQWdJQ0JtYjNJZ0tHb2dQU0F6T3lCcUlENGdNRHNnYWkwdEtTQjdYRzRnSUNBZ0lDQldhVnRxWFNBOUlDaFdhVnRxWFNBK1BqNGdNU2tnZkNBb0tGWnBXMm9nTFNBeFhTQW1JREVwSUR3OElETXhLVnh1SUNBZ0lIMWNiaUFnSUNCV2FWc3dYU0E5SUZacFd6QmRJRDQrUGlBeFhHNWNiaUFnSUNBdkx5QkpaaUJNVTBJb1ZsOXBLU0JwY3lBeExDQldYMmtyTVNBOUlDaFdYMmtnUGo0Z01Ta2dYaUJTWEc0Z0lDQWdhV1lnS0d4ellsOVdhU2tnZTF4dUlDQWdJQ0FnVm1sYk1GMGdQU0JXYVZzd1hTQmVJQ2d3ZUdVeElEdzhJREkwS1Z4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0IwYUdsekxuTjBZWFJsSUQwZ1puSnZiVUZ5Y21GNUtGcHBLVnh1ZlZ4dVIwaEJVMGd1Y0hKdmRHOTBlWEJsTG5Wd1pHRjBaU0E5SUdaMWJtTjBhVzl1SUNoaWRXWXBJSHRjYmlBZ2RHaHBjeTVqWVdOb1pTQTlJRUoxWm1abGNpNWpiMjVqWVhRb1czUm9hWE11WTJGamFHVXNJR0oxWmwwcFhHNGdJSFpoY2lCamFIVnVhMXh1SUNCM2FHbHNaU0FvZEdocGN5NWpZV05vWlM1c1pXNW5kR2dnUGowZ01UWXBJSHRjYmlBZ0lDQmphSFZ1YXlBOUlIUm9hWE11WTJGamFHVXVjMnhwWTJVb01Dd2dNVFlwWEc0Z0lDQWdkR2hwY3k1allXTm9aU0E5SUhSb2FYTXVZMkZqYUdVdWMyeHBZMlVvTVRZcFhHNGdJQ0FnZEdocGN5NW5hR0Z6YUNoamFIVnVheWxjYmlBZ2ZWeHVmVnh1UjBoQlUwZ3VjSEp2ZEc5MGVYQmxMbVpwYm1Gc0lEMGdablZ1WTNScGIyNGdLR0ZpYkN3Z1ltd3BJSHRjYmlBZ2FXWWdLSFJvYVhNdVkyRmphR1V1YkdWdVozUm9LU0I3WEc0Z0lDQWdkR2hwY3k1bmFHRnphQ2hDZFdabVpYSXVZMjl1WTJGMEtGdDBhR2x6TG1OaFkyaGxMQ0I2WlhKdmMxMHNJREUyS1NsY2JpQWdmVnh1SUNCMGFHbHpMbWRvWVhOb0tHWnliMjFCY25KaGVTaGJYRzRnSUNBZ01Dd2dZV0pzTEZ4dUlDQWdJREFzSUdKc1hHNGdJRjBwS1Z4dUlDQnlaWFIxY200Z2RHaHBjeTV6ZEdGMFpWeHVmVnh1WEc1bWRXNWpkR2x2YmlCMGIwRnljbUY1SUNoaWRXWXBJSHRjYmlBZ2NtVjBkWEp1SUZ0Y2JpQWdJQ0JpZFdZdWNtVmhaRlZKYm5Rek1rSkZLREFwTEZ4dUlDQWdJR0oxWmk1eVpXRmtWVWx1ZERNeVFrVW9OQ2tzWEc0Z0lDQWdZblZtTG5KbFlXUlZTVzUwTXpKQ1JTZzRLU3hjYmlBZ0lDQmlkV1l1Y21WaFpGVkpiblF6TWtKRktERXlLVnh1SUNCZFhHNTlYRzVtZFc1amRHbHZiaUJtY205dFFYSnlZWGtnS0c5MWRDa2dlMXh1SUNCdmRYUWdQU0J2ZFhRdWJXRndLR1pwZUhWd1gzVnBiblF6TWlsY2JpQWdkbUZ5SUdKMVppQTlJRzVsZHlCQ2RXWm1aWElvTVRZcFhHNGdJR0oxWmk1M2NtbDBaVlZKYm5Rek1rSkZLRzkxZEZzd1hTd2dNQ2xjYmlBZ1luVm1MbmR5YVhSbFZVbHVkRE15UWtVb2IzVjBXekZkTENBMEtWeHVJQ0JpZFdZdWQzSnBkR1ZWU1c1ME16SkNSU2h2ZFhSYk1sMHNJRGdwWEc0Z0lHSjFaaTUzY21sMFpWVkpiblF6TWtKRktHOTFkRnN6WFN3Z01USXBYRzRnSUhKbGRIVnliaUJpZFdaY2JuMWNiblpoY2lCMWFXNTBYMjFoZUNBOUlFMWhkR2d1Y0c5M0tESXNJRE15S1Z4dVpuVnVZM1JwYjI0Z1ptbDRkWEJmZFdsdWRETXlJQ2g0S1NCN1hHNGdJSFpoY2lCeVpYUXNJSGhmY0c5elhHNGdJSEpsZENBOUlIZ2dQaUIxYVc1MFgyMWhlQ0I4ZkNCNElEd2dNQ0EvSUNoNFgzQnZjeUE5SUUxaGRHZ3VZV0p6S0hncElDVWdkV2x1ZEY5dFlYZ3NJSGdnUENBd0lEOGdkV2x1ZEY5dFlYZ2dMU0I0WDNCdmN5QTZJSGhmY0c5ektTQTZJSGhjYmlBZ2NtVjBkWEp1SUhKbGRGeHVmVnh1Wm5WdVkzUnBiMjRnZUc5eUlDaGhMQ0JpS1NCN1hHNGdJSEpsZEhWeWJpQmJYRzRnSUNBZ1lWc3dYU0JlSUdKYk1GMHNYRzRnSUNBZ1lWc3hYU0JlSUdKYk1WMHNYRzRnSUNBZ1lWc3lYU0JlSUdKYk1sMHNYRzRnSUNBZ1lWc3pYU0JlSUdKYk0xMWNiaUFnWFZ4dWZWeHVJbDE5IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xuLy8gYmFzZWQgb24gdGhlIGFlcyBpbXBsaW1lbnRhdGlvbiBpbiB0cmlwbGUgc2VjXG4vLyBodHRwczovL2dpdGh1Yi5jb20va2V5YmFzZS90cmlwbGVzZWNcblxuLy8gd2hpY2ggaXMgaW4gdHVybiBiYXNlZCBvbiB0aGUgb25lIGZyb20gY3J5cHRvLWpzXG4vLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy9cblxudmFyIHVpbnRfbWF4ID0gTWF0aC5wb3coMiwgMzIpXG5mdW5jdGlvbiBmaXh1cF91aW50MzIgKHgpIHtcbiAgdmFyIHJldCwgeF9wb3NcbiAgcmV0ID0geCA+IHVpbnRfbWF4IHx8IHggPCAwID8gKHhfcG9zID0gTWF0aC5hYnMoeCkgJSB1aW50X21heCwgeCA8IDAgPyB1aW50X21heCAtIHhfcG9zIDogeF9wb3MpIDogeFxuICByZXR1cm4gcmV0XG59XG5mdW5jdGlvbiBzY3J1Yl92ZWMgKHYpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2Lmxlbmd0aDsgdisrKSB7XG4gICAgdltpXSA9IDBcbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gR2xvYmFsICgpIHtcbiAgdGhpcy5TQk9YID0gW11cbiAgdGhpcy5JTlZfU0JPWCA9IFtdXG4gIHRoaXMuU1VCX01JWCA9IFtbXSwgW10sIFtdLCBbXV1cbiAgdGhpcy5JTlZfU1VCX01JWCA9IFtbXSwgW10sIFtdLCBbXV1cbiAgdGhpcy5pbml0KClcbiAgdGhpcy5SQ09OID0gWzB4MDAsIDB4MDEsIDB4MDIsIDB4MDQsIDB4MDgsIDB4MTAsIDB4MjAsIDB4NDAsIDB4ODAsIDB4MWIsIDB4MzZdXG59XG5cbkdsb2JhbC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGQsIGksIHN4LCB0LCB4LCB4MiwgeDQsIHg4LCB4aSwgX2lcbiAgZCA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9pLCBfcmVzdWx0c1xuICAgIF9yZXN1bHRzID0gW11cbiAgICBmb3IgKGkgPSBfaSA9IDA7IF9pIDwgMjU2OyBpID0gKytfaSkge1xuICAgICAgaWYgKGkgPCAxMjgpIHtcbiAgICAgICAgX3Jlc3VsdHMucHVzaChpIDw8IDEpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfcmVzdWx0cy5wdXNoKChpIDw8IDEpIF4gMHgxMWIpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBfcmVzdWx0c1xuICB9KSgpXG4gIHggPSAwXG4gIHhpID0gMFxuICBmb3IgKGkgPSBfaSA9IDA7IF9pIDwgMjU2OyBpID0gKytfaSkge1xuICAgIHN4ID0geGkgXiAoeGkgPDwgMSkgXiAoeGkgPDwgMikgXiAoeGkgPDwgMykgXiAoeGkgPDwgNClcbiAgICBzeCA9IChzeCA+Pj4gOCkgXiAoc3ggJiAweGZmKSBeIDB4NjNcbiAgICB0aGlzLlNCT1hbeF0gPSBzeFxuICAgIHRoaXMuSU5WX1NCT1hbc3hdID0geFxuICAgIHgyID0gZFt4XVxuICAgIHg0ID0gZFt4Ml1cbiAgICB4OCA9IGRbeDRdXG4gICAgdCA9IChkW3N4XSAqIDB4MTAxKSBeIChzeCAqIDB4MTAxMDEwMClcbiAgICB0aGlzLlNVQl9NSVhbMF1beF0gPSAodCA8PCAyNCkgfCAodCA+Pj4gOClcbiAgICB0aGlzLlNVQl9NSVhbMV1beF0gPSAodCA8PCAxNikgfCAodCA+Pj4gMTYpXG4gICAgdGhpcy5TVUJfTUlYWzJdW3hdID0gKHQgPDwgOCkgfCAodCA+Pj4gMjQpXG4gICAgdGhpcy5TVUJfTUlYWzNdW3hdID0gdFxuICAgIHQgPSAoeDggKiAweDEwMTAxMDEpIF4gKHg0ICogMHgxMDAwMSkgXiAoeDIgKiAweDEwMSkgXiAoeCAqIDB4MTAxMDEwMClcbiAgICB0aGlzLklOVl9TVUJfTUlYWzBdW3N4XSA9ICh0IDw8IDI0KSB8ICh0ID4+PiA4KVxuICAgIHRoaXMuSU5WX1NVQl9NSVhbMV1bc3hdID0gKHQgPDwgMTYpIHwgKHQgPj4+IDE2KVxuICAgIHRoaXMuSU5WX1NVQl9NSVhbMl1bc3hdID0gKHQgPDwgOCkgfCAodCA+Pj4gMjQpXG4gICAgdGhpcy5JTlZfU1VCX01JWFszXVtzeF0gPSB0XG4gICAgaWYgKHggPT09IDApIHtcbiAgICAgIHggPSB4aSA9IDFcbiAgICB9IGVsc2Uge1xuICAgICAgeCA9IHgyIF4gZFtkW2RbeDggXiB4Ml1dXVxuICAgICAgeGkgXj0gZFtkW3hpXV1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxudmFyIEcgPSBuZXcgR2xvYmFsKClcblxuQUVTLmJsb2NrU2l6ZSA9IDQgKiA0XG5cbkFFUy5wcm90b3R5cGUuYmxvY2tTaXplID0gQUVTLmJsb2NrU2l6ZVxuXG5BRVMua2V5U2l6ZSA9IDI1NiAvIDhcblxuQUVTLnByb3RvdHlwZS5rZXlTaXplID0gQUVTLmtleVNpemVcblxuZnVuY3Rpb24gYnVmZmVyVG9BcnJheSAoYnVmKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoIC8gNFxuICB2YXIgb3V0ID0gbmV3IEFycmF5KGxlbilcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0W2ldID0gYnVmLnJlYWRVSW50MzJCRShpICogNClcbiAgfVxuICByZXR1cm4gb3V0XG59XG5mdW5jdGlvbiBBRVMgKGtleSkge1xuICB0aGlzLl9rZXkgPSBidWZmZXJUb0FycmF5KGtleSlcbiAgdGhpcy5fZG9SZXNldCgpXG59XG5cbkFFUy5wcm90b3R5cGUuX2RvUmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpbnZLc1Jvdywga2V5U2l6ZSwga2V5V29yZHMsIGtzUm93LCBrc1Jvd3MsIHRcbiAga2V5V29yZHMgPSB0aGlzLl9rZXlcbiAga2V5U2l6ZSA9IGtleVdvcmRzLmxlbmd0aFxuICB0aGlzLl9uUm91bmRzID0ga2V5U2l6ZSArIDZcbiAga3NSb3dzID0gKHRoaXMuX25Sb3VuZHMgKyAxKSAqIDRcbiAgdGhpcy5fa2V5U2NoZWR1bGUgPSBbXVxuICBmb3IgKGtzUm93ID0gMDsga3NSb3cgPCBrc1Jvd3M7IGtzUm93KyspIHtcbiAgICB0aGlzLl9rZXlTY2hlZHVsZVtrc1Jvd10gPSBrc1JvdyA8IGtleVNpemUgPyBrZXlXb3Jkc1trc1Jvd10gOiAodCA9IHRoaXMuX2tleVNjaGVkdWxlW2tzUm93IC0gMV0sIChrc1JvdyAlIGtleVNpemUpID09PSAwID8gKHQgPSAodCA8PCA4KSB8ICh0ID4+PiAyNCksIHQgPSAoRy5TQk9YW3QgPj4+IDI0XSA8PCAyNCkgfCAoRy5TQk9YWyh0ID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoRy5TQk9YWyh0ID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgRy5TQk9YW3QgJiAweGZmXSwgdCBePSBHLlJDT05bKGtzUm93IC8ga2V5U2l6ZSkgfCAwXSA8PCAyNCkgOiBrZXlTaXplID4gNiAmJiBrc1JvdyAlIGtleVNpemUgPT09IDQgPyB0ID0gKEcuU0JPWFt0ID4+PiAyNF0gPDwgMjQpIHwgKEcuU0JPWFsodCA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKEcuU0JPWFsodCA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IEcuU0JPWFt0ICYgMHhmZl0gOiB2b2lkIDAsIHRoaXMuX2tleVNjaGVkdWxlW2tzUm93IC0ga2V5U2l6ZV0gXiB0KVxuICB9XG4gIHRoaXMuX2ludktleVNjaGVkdWxlID0gW11cbiAgZm9yIChpbnZLc1JvdyA9IDA7IGludktzUm93IDwga3NSb3dzOyBpbnZLc1JvdysrKSB7XG4gICAga3NSb3cgPSBrc1Jvd3MgLSBpbnZLc1Jvd1xuICAgIHQgPSB0aGlzLl9rZXlTY2hlZHVsZVtrc1JvdyAtIChpbnZLc1JvdyAlIDQgPyAwIDogNCldXG4gICAgdGhpcy5faW52S2V5U2NoZWR1bGVbaW52S3NSb3ddID0gaW52S3NSb3cgPCA0IHx8IGtzUm93IDw9IDQgPyB0IDogRy5JTlZfU1VCX01JWFswXVtHLlNCT1hbdCA+Pj4gMjRdXSBeIEcuSU5WX1NVQl9NSVhbMV1bRy5TQk9YWyh0ID4+PiAxNikgJiAweGZmXV0gXiBHLklOVl9TVUJfTUlYWzJdW0cuU0JPWFsodCA+Pj4gOCkgJiAweGZmXV0gXiBHLklOVl9TVUJfTUlYWzNdW0cuU0JPWFt0ICYgMHhmZl1dXG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuQUVTLnByb3RvdHlwZS5lbmNyeXB0QmxvY2sgPSBmdW5jdGlvbiAoTSkge1xuICBNID0gYnVmZmVyVG9BcnJheShuZXcgQnVmZmVyKE0pKVxuICB2YXIgb3V0ID0gdGhpcy5fZG9DcnlwdEJsb2NrKE0sIHRoaXMuX2tleVNjaGVkdWxlLCBHLlNVQl9NSVgsIEcuU0JPWClcbiAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIoMTYpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFswXSwgMClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzFdLCA0KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMl0sIDgpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFszXSwgMTIpXG4gIHJldHVybiBidWZcbn1cblxuQUVTLnByb3RvdHlwZS5kZWNyeXB0QmxvY2sgPSBmdW5jdGlvbiAoTSkge1xuICBNID0gYnVmZmVyVG9BcnJheShuZXcgQnVmZmVyKE0pKVxuICB2YXIgdGVtcCA9IFtNWzNdLCBNWzFdXVxuICBNWzFdID0gdGVtcFswXVxuICBNWzNdID0gdGVtcFsxXVxuICB2YXIgb3V0ID0gdGhpcy5fZG9DcnlwdEJsb2NrKE0sIHRoaXMuX2ludktleVNjaGVkdWxlLCBHLklOVl9TVUJfTUlYLCBHLklOVl9TQk9YKVxuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcigxNilcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzBdLCAwKVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbM10sIDQpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsyXSwgOClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzFdLCAxMilcbiAgcmV0dXJuIGJ1ZlxufVxuXG5BRVMucHJvdG90eXBlLnNjcnViID0gZnVuY3Rpb24gKCkge1xuICBzY3J1Yl92ZWModGhpcy5fa2V5U2NoZWR1bGUpXG4gIHNjcnViX3ZlYyh0aGlzLl9pbnZLZXlTY2hlZHVsZSlcbiAgc2NydWJfdmVjKHRoaXMuX2tleSlcbn1cblxuQUVTLnByb3RvdHlwZS5fZG9DcnlwdEJsb2NrID0gZnVuY3Rpb24gKE0sIGtleVNjaGVkdWxlLCBTVUJfTUlYLCBTQk9YKSB7XG4gIHZhciBrc1JvdywgczAsIHMxLCBzMiwgczMsIHQwLCB0MSwgdDIsIHQzXG5cbiAgczAgPSBNWzBdIF4ga2V5U2NoZWR1bGVbMF1cbiAgczEgPSBNWzFdIF4ga2V5U2NoZWR1bGVbMV1cbiAgczIgPSBNWzJdIF4ga2V5U2NoZWR1bGVbMl1cbiAgczMgPSBNWzNdIF4ga2V5U2NoZWR1bGVbM11cbiAga3NSb3cgPSA0XG4gIGZvciAodmFyIHJvdW5kID0gMTsgcm91bmQgPCB0aGlzLl9uUm91bmRzOyByb3VuZCsrKSB7XG4gICAgdDAgPSBTVUJfTUlYWzBdW3MwID4+PiAyNF0gXiBTVUJfTUlYWzFdWyhzMSA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYWzJdWyhzMiA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVhbM11bczMgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gICAgdDEgPSBTVUJfTUlYWzBdW3MxID4+PiAyNF0gXiBTVUJfTUlYWzFdWyhzMiA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYWzJdWyhzMyA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVhbM11bczAgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gICAgdDIgPSBTVUJfTUlYWzBdW3MyID4+PiAyNF0gXiBTVUJfTUlYWzFdWyhzMyA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYWzJdWyhzMCA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVhbM11bczEgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gICAgdDMgPSBTVUJfTUlYWzBdW3MzID4+PiAyNF0gXiBTVUJfTUlYWzFdWyhzMCA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYWzJdWyhzMSA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVhbM11bczIgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gICAgczAgPSB0MFxuICAgIHMxID0gdDFcbiAgICBzMiA9IHQyXG4gICAgczMgPSB0M1xuICB9XG4gIHQwID0gKChTQk9YW3MwID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMxID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczIgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MzICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgdDEgPSAoKFNCT1hbczEgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczIgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMyA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczAgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICB0MiA9ICgoU0JPWFtzMiA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMyA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMwID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMSAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gIHQzID0gKChTQk9YW3MzID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMwID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczEgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MyICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgcmV0dXJuIFtcbiAgICBmaXh1cF91aW50MzIodDApLFxuICAgIGZpeHVwX3VpbnQzMih0MSksXG4gICAgZml4dXBfdWludDMyKHQyKSxcbiAgICBmaXh1cF91aW50MzIodDMpXG4gIF1cbn1cblxuZXhwb3J0cy5BRVMgPSBBRVNcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZbkp2ZDNObGNtbG1lUzF6YVdkdUwyNXZaR1ZmYlc5a2RXeGxjeTl3WVhKelpTMWhjMjR4TDI1dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMV0ZsY3k5aFpYTXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdkx5QmlZWE5sWkNCdmJpQjBhR1VnWVdWeklHbHRjR3hwYldWdWRHRjBhVzl1SUdsdUlIUnlhWEJzWlNCelpXTmNiaTh2SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5clpYbGlZWE5sTDNSeWFYQnNaWE5sWTF4dVhHNHZMeUIzYUdsamFDQnBjeUJwYmlCMGRYSnVJR0poYzJWa0lHOXVJSFJvWlNCdmJtVWdabkp2YlNCamNubHdkRzh0YW5OY2JpOHZJR2gwZEhCek9pOHZZMjlrWlM1bmIyOW5iR1V1WTI5dEwzQXZZM0o1Y0hSdkxXcHpMMXh1WEc1MllYSWdkV2x1ZEY5dFlYZ2dQU0JOWVhSb0xuQnZkeWd5TENBek1pbGNibVoxYm1OMGFXOXVJR1pwZUhWd1gzVnBiblF6TWlBb2VDa2dlMXh1SUNCMllYSWdjbVYwTENCNFgzQnZjMXh1SUNCeVpYUWdQU0I0SUQ0Z2RXbHVkRjl0WVhnZ2ZId2dlQ0E4SURBZ1B5QW9lRjl3YjNNZ1BTQk5ZWFJvTG1GaWN5aDRLU0FsSUhWcGJuUmZiV0Y0TENCNElEd2dNQ0EvSUhWcGJuUmZiV0Y0SUMwZ2VGOXdiM01nT2lCNFgzQnZjeWtnT2lCNFhHNGdJSEpsZEhWeWJpQnlaWFJjYm4xY2JtWjFibU4wYVc5dUlITmpjblZpWDNabFl5QW9kaWtnZTF4dUlDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJSFl1YkdWdVozUm9PeUIyS3lzcElIdGNiaUFnSUNCMlcybGRJRDBnTUZ4dUlDQjlYRzRnSUhKbGRIVnliaUJtWVd4elpWeHVmVnh1WEc1bWRXNWpkR2x2YmlCSGJHOWlZV3dnS0NrZ2UxeHVJQ0IwYUdsekxsTkNUMWdnUFNCYlhWeHVJQ0IwYUdsekxrbE9WbDlUUWs5WUlEMGdXMTFjYmlBZ2RHaHBjeTVUVlVKZlRVbFlJRDBnVzF0ZExDQmJYU3dnVzEwc0lGdGRYVnh1SUNCMGFHbHpMa2xPVmw5VFZVSmZUVWxZSUQwZ1cxdGRMQ0JiWFN3Z1cxMHNJRnRkWFZ4dUlDQjBhR2x6TG1sdWFYUW9LVnh1SUNCMGFHbHpMbEpEVDA0Z1BTQmJNSGd3TUN3Z01IZ3dNU3dnTUhnd01pd2dNSGd3TkN3Z01IZ3dPQ3dnTUhneE1Dd2dNSGd5TUN3Z01IZzBNQ3dnTUhnNE1Dd2dNSGd4WWl3Z01IZ3pObDFjYm4xY2JseHVSMnh2WW1Gc0xuQnliM1J2ZEhsd1pTNXBibWwwSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNCMllYSWdaQ3dnYVN3Z2MzZ3NJSFFzSUhnc0lIZ3lMQ0I0TkN3Z2VEZ3NJSGhwTENCZmFWeHVJQ0JrSUQwZ0tHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQjJZWElnWDJrc0lGOXlaWE4xYkhSelhHNGdJQ0FnWDNKbGMzVnNkSE1nUFNCYlhWeHVJQ0FnSUdadmNpQW9hU0E5SUY5cElEMGdNRHNnWDJrZ1BDQXlOVFk3SUdrZ1BTQXJLMTlwS1NCN1hHNGdJQ0FnSUNCcFppQW9hU0E4SURFeU9Da2dlMXh1SUNBZ0lDQWdJQ0JmY21WemRXeDBjeTV3ZFhOb0tHa2dQRHdnTVNsY2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUY5eVpYTjFiSFJ6TG5CMWMyZ29LR2tnUER3Z01Ta2dYaUF3ZURFeFlpbGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRjl5WlhOMWJIUnpYRzRnSUgwcEtDbGNiaUFnZUNBOUlEQmNiaUFnZUdrZ1BTQXdYRzRnSUdadmNpQW9hU0E5SUY5cElEMGdNRHNnWDJrZ1BDQXlOVFk3SUdrZ1BTQXJLMTlwS1NCN1hHNGdJQ0FnYzNnZ1BTQjRhU0JlSUNoNGFTQThQQ0F4S1NCZUlDaDRhU0E4UENBeUtTQmVJQ2g0YVNBOFBDQXpLU0JlSUNoNGFTQThQQ0EwS1Z4dUlDQWdJSE40SUQwZ0tITjRJRDQrUGlBNEtTQmVJQ2h6ZUNBbUlEQjRabVlwSUY0Z01IZzJNMXh1SUNBZ0lIUm9hWE11VTBKUFdGdDRYU0E5SUhONFhHNGdJQ0FnZEdocGN5NUpUbFpmVTBKUFdGdHplRjBnUFNCNFhHNGdJQ0FnZURJZ1BTQmtXM2hkWEc0Z0lDQWdlRFFnUFNCa1czZ3lYVnh1SUNBZ0lIZzRJRDBnWkZ0NE5GMWNiaUFnSUNCMElEMGdLR1JiYzNoZElDb2dNSGd4TURFcElGNGdLSE40SUNvZ01IZ3hNREV3TVRBd0tWeHVJQ0FnSUhSb2FYTXVVMVZDWDAxSldGc3dYVnQ0WFNBOUlDaDBJRHc4SURJMEtTQjhJQ2gwSUQ0K1BpQTRLVnh1SUNBZ0lIUm9hWE11VTFWQ1gwMUpXRnN4WFZ0NFhTQTlJQ2gwSUR3OElERTJLU0I4SUNoMElENCtQaUF4TmlsY2JpQWdJQ0IwYUdsekxsTlZRbDlOU1ZoYk1sMWJlRjBnUFNBb2RDQThQQ0E0S1NCOElDaDBJRDQrUGlBeU5DbGNiaUFnSUNCMGFHbHpMbE5WUWw5TlNWaGJNMTFiZUYwZ1BTQjBYRzRnSUNBZ2RDQTlJQ2g0T0NBcUlEQjRNVEF4TURFd01Ta2dYaUFvZURRZ0tpQXdlREV3TURBeEtTQmVJQ2g0TWlBcUlEQjRNVEF4S1NCZUlDaDRJQ29nTUhneE1ERXdNVEF3S1Z4dUlDQWdJSFJvYVhNdVNVNVdYMU5WUWw5TlNWaGJNRjFiYzNoZElEMGdLSFFnUER3Z01qUXBJSHdnS0hRZ1BqNCtJRGdwWEc0Z0lDQWdkR2hwY3k1SlRsWmZVMVZDWDAxSldGc3hYVnR6ZUYwZ1BTQW9kQ0E4UENBeE5pa2dmQ0FvZENBK1BqNGdNVFlwWEc0Z0lDQWdkR2hwY3k1SlRsWmZVMVZDWDAxSldGc3lYVnR6ZUYwZ1BTQW9kQ0E4UENBNEtTQjhJQ2gwSUQ0K1BpQXlOQ2xjYmlBZ0lDQjBhR2x6TGtsT1ZsOVRWVUpmVFVsWVd6TmRXM040WFNBOUlIUmNiaUFnSUNCcFppQW9lQ0E5UFQwZ01Da2dlMXh1SUNBZ0lDQWdlQ0E5SUhocElEMGdNVnh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCNElEMGdlRElnWGlCa1cyUmJaRnQ0T0NCZUlIZ3lYVjFkWEc0Z0lDQWdJQ0I0YVNCZVBTQmtXMlJiZUdsZFhWeHVJQ0FnSUgxY2JpQWdmVnh1SUNCeVpYUjFjbTRnZEhKMVpWeHVmVnh1WEc1MllYSWdSeUE5SUc1bGR5QkhiRzlpWVd3b0tWeHVYRzVCUlZNdVlteHZZMnRUYVhwbElEMGdOQ0FxSURSY2JseHVRVVZUTG5CeWIzUnZkSGx3WlM1aWJHOWphMU5wZW1VZ1BTQkJSVk11WW14dlkydFRhWHBsWEc1Y2JrRkZVeTVyWlhsVGFYcGxJRDBnTWpVMklDOGdPRnh1WEc1QlJWTXVjSEp2ZEc5MGVYQmxMbXRsZVZOcGVtVWdQU0JCUlZNdWEyVjVVMmw2WlZ4dVhHNW1kVzVqZEdsdmJpQmlkV1ptWlhKVWIwRnljbUY1SUNoaWRXWXBJSHRjYmlBZ2RtRnlJR3hsYmlBOUlHSjFaaTVzWlc1bmRHZ2dMeUEwWEc0Z0lIWmhjaUJ2ZFhRZ1BTQnVaWGNnUVhKeVlYa29iR1Z1S1Z4dUlDQjJZWElnYVNBOUlDMHhYRzRnSUhkb2FXeGxJQ2dySzJrZ1BDQnNaVzRwSUh0Y2JpQWdJQ0J2ZFhSYmFWMGdQU0JpZFdZdWNtVmhaRlZKYm5Rek1rSkZLR2tnS2lBMEtWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCdmRYUmNibjFjYm1aMWJtTjBhVzl1SUVGRlV5QW9hMlY1S1NCN1hHNGdJSFJvYVhNdVgydGxlU0E5SUdKMVptWmxjbFJ2UVhKeVlYa29hMlY1S1Z4dUlDQjBhR2x6TGw5a2IxSmxjMlYwS0NsY2JuMWNibHh1UVVWVExuQnliM1J2ZEhsd1pTNWZaRzlTWlhObGRDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdkbUZ5SUdsdWRrdHpVbTkzTENCclpYbFRhWHBsTENCclpYbFhiM0prY3l3Z2EzTlNiM2NzSUd0elVtOTNjeXdnZEZ4dUlDQnJaWGxYYjNKa2N5QTlJSFJvYVhNdVgydGxlVnh1SUNCclpYbFRhWHBsSUQwZ2EyVjVWMjl5WkhNdWJHVnVaM1JvWEc0Z0lIUm9hWE11WDI1U2IzVnVaSE1nUFNCclpYbFRhWHBsSUNzZ05seHVJQ0JyYzFKdmQzTWdQU0FvZEdocGN5NWZibEp2ZFc1a2N5QXJJREVwSUNvZ05GeHVJQ0IwYUdsekxsOXJaWGxUWTJobFpIVnNaU0E5SUZ0ZFhHNGdJR1p2Y2lBb2EzTlNiM2NnUFNBd095QnJjMUp2ZHlBOElHdHpVbTkzY3pzZ2EzTlNiM2NyS3lrZ2UxeHVJQ0FnSUhSb2FYTXVYMnRsZVZOamFHVmtkV3hsVzJ0elVtOTNYU0E5SUd0elVtOTNJRHdnYTJWNVUybDZaU0EvSUd0bGVWZHZjbVJ6VzJ0elVtOTNYU0E2SUNoMElEMGdkR2hwY3k1ZmEyVjVVMk5vWldSMWJHVmJhM05TYjNjZ0xTQXhYU3dnS0d0elVtOTNJQ1VnYTJWNVUybDZaU2tnUFQwOUlEQWdQeUFvZENBOUlDaDBJRHc4SURncElId2dLSFFnUGo0K0lESTBLU3dnZENBOUlDaEhMbE5DVDFoYmRDQStQajRnTWpSZElEdzhJREkwS1NCOElDaEhMbE5DVDFoYktIUWdQajQrSURFMktTQW1JREI0Wm1aZElEdzhJREUyS1NCOElDaEhMbE5DVDFoYktIUWdQajQrSURncElDWWdNSGhtWmwwZ1BEd2dPQ2tnZkNCSExsTkNUMWhiZENBbUlEQjRabVpkTENCMElGNDlJRWN1VWtOUFRsc29hM05TYjNjZ0x5QnJaWGxUYVhwbEtTQjhJREJkSUR3OElESTBLU0E2SUd0bGVWTnBlbVVnUGlBMklDWW1JR3R6VW05M0lDVWdhMlY1VTJsNlpTQTlQVDBnTkNBL0lIUWdQU0FvUnk1VFFrOVlXM1FnUGo0K0lESTBYU0E4UENBeU5Da2dmQ0FvUnk1VFFrOVlXeWgwSUQ0K1BpQXhOaWtnSmlBd2VHWm1YU0E4UENBeE5pa2dmQ0FvUnk1VFFrOVlXeWgwSUQ0K1BpQTRLU0FtSURCNFptWmRJRHc4SURncElId2dSeTVUUWs5WVczUWdKaUF3ZUdabVhTQTZJSFp2YVdRZ01Dd2dkR2hwY3k1ZmEyVjVVMk5vWldSMWJHVmJhM05TYjNjZ0xTQnJaWGxUYVhwbFhTQmVJSFFwWEc0Z0lIMWNiaUFnZEdocGN5NWZhVzUyUzJWNVUyTm9aV1IxYkdVZ1BTQmJYVnh1SUNCbWIzSWdLR2x1ZGt0elVtOTNJRDBnTURzZ2FXNTJTM05TYjNjZ1BDQnJjMUp2ZDNNN0lHbHVka3R6VW05M0t5c3BJSHRjYmlBZ0lDQnJjMUp2ZHlBOUlHdHpVbTkzY3lBdElHbHVka3R6VW05M1hHNGdJQ0FnZENBOUlIUm9hWE11WDJ0bGVWTmphR1ZrZFd4bFcydHpVbTkzSUMwZ0tHbHVka3R6VW05M0lDVWdOQ0EvSURBZ09pQTBLVjFjYmlBZ0lDQjBhR2x6TGw5cGJuWkxaWGxUWTJobFpIVnNaVnRwYm5aTGMxSnZkMTBnUFNCcGJuWkxjMUp2ZHlBOElEUWdmSHdnYTNOU2IzY2dQRDBnTkNBL0lIUWdPaUJITGtsT1ZsOVRWVUpmVFVsWVd6QmRXMGN1VTBKUFdGdDBJRDQrUGlBeU5GMWRJRjRnUnk1SlRsWmZVMVZDWDAxSldGc3hYVnRITGxOQ1QxaGJLSFFnUGo0K0lERTJLU0FtSURCNFptWmRYU0JlSUVjdVNVNVdYMU5WUWw5TlNWaGJNbDFiUnk1VFFrOVlXeWgwSUQ0K1BpQTRLU0FtSURCNFptWmRYU0JlSUVjdVNVNVdYMU5WUWw5TlNWaGJNMTFiUnk1VFFrOVlXM1FnSmlBd2VHWm1YVjFjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdkSEoxWlZ4dWZWeHVYRzVCUlZNdWNISnZkRzkwZVhCbExtVnVZM0o1Y0hSQ2JHOWpheUE5SUdaMWJtTjBhVzl1SUNoTktTQjdYRzRnSUUwZ1BTQmlkV1ptWlhKVWIwRnljbUY1S0c1bGR5QkNkV1ptWlhJb1RTa3BYRzRnSUhaaGNpQnZkWFFnUFNCMGFHbHpMbDlrYjBOeWVYQjBRbXh2WTJzb1RTd2dkR2hwY3k1ZmEyVjVVMk5vWldSMWJHVXNJRWN1VTFWQ1gwMUpXQ3dnUnk1VFFrOVlLVnh1SUNCMllYSWdZblZtSUQwZ2JtVjNJRUoxWm1abGNpZ3hOaWxjYmlBZ1luVm1MbmR5YVhSbFZVbHVkRE15UWtVb2IzVjBXekJkTENBd0tWeHVJQ0JpZFdZdWQzSnBkR1ZWU1c1ME16SkNSU2h2ZFhSYk1WMHNJRFFwWEc0Z0lHSjFaaTUzY21sMFpWVkpiblF6TWtKRktHOTFkRnN5WFN3Z09DbGNiaUFnWW5WbUxuZHlhWFJsVlVsdWRETXlRa1VvYjNWMFd6TmRMQ0F4TWlsY2JpQWdjbVYwZFhKdUlHSjFabHh1ZlZ4dVhHNUJSVk11Y0hKdmRHOTBlWEJsTG1SbFkzSjVjSFJDYkc5amF5QTlJR1oxYm1OMGFXOXVJQ2hOS1NCN1hHNGdJRTBnUFNCaWRXWm1aWEpVYjBGeWNtRjVLRzVsZHlCQ2RXWm1aWElvVFNrcFhHNGdJSFpoY2lCMFpXMXdJRDBnVzAxYk0xMHNJRTFiTVYxZFhHNGdJRTFiTVYwZ1BTQjBaVzF3V3pCZFhHNGdJRTFiTTEwZ1BTQjBaVzF3V3pGZFhHNGdJSFpoY2lCdmRYUWdQU0IwYUdsekxsOWtiME55ZVhCMFFteHZZMnNvVFN3Z2RHaHBjeTVmYVc1MlMyVjVVMk5vWldSMWJHVXNJRWN1U1U1V1gxTlZRbDlOU1Znc0lFY3VTVTVXWDFOQ1QxZ3BYRzRnSUhaaGNpQmlkV1lnUFNCdVpYY2dRblZtWm1WeUtERTJLVnh1SUNCaWRXWXVkM0pwZEdWVlNXNTBNekpDUlNodmRYUmJNRjBzSURBcFhHNGdJR0oxWmk1M2NtbDBaVlZKYm5Rek1rSkZLRzkxZEZzelhTd2dOQ2xjYmlBZ1luVm1MbmR5YVhSbFZVbHVkRE15UWtVb2IzVjBXekpkTENBNEtWeHVJQ0JpZFdZdWQzSnBkR1ZWU1c1ME16SkNSU2h2ZFhSYk1WMHNJREV5S1Z4dUlDQnlaWFIxY200Z1luVm1YRzU5WEc1Y2JrRkZVeTV3Y205MGIzUjVjR1V1YzJOeWRXSWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJSE5qY25WaVgzWmxZeWgwYUdsekxsOXJaWGxUWTJobFpIVnNaU2xjYmlBZ2MyTnlkV0pmZG1WaktIUm9hWE11WDJsdWRrdGxlVk5qYUdWa2RXeGxLVnh1SUNCelkzSjFZbDkyWldNb2RHaHBjeTVmYTJWNUtWeHVmVnh1WEc1QlJWTXVjSEp2ZEc5MGVYQmxMbDlrYjBOeWVYQjBRbXh2WTJzZ1BTQm1kVzVqZEdsdmJpQW9UU3dnYTJWNVUyTm9aV1IxYkdVc0lGTlZRbDlOU1Znc0lGTkNUMWdwSUh0Y2JpQWdkbUZ5SUd0elVtOTNMQ0J6TUN3Z2N6RXNJSE15TENCek15d2dkREFzSUhReExDQjBNaXdnZEROY2JseHVJQ0J6TUNBOUlFMWJNRjBnWGlCclpYbFRZMmhsWkhWc1pWc3dYVnh1SUNCek1TQTlJRTFiTVYwZ1hpQnJaWGxUWTJobFpIVnNaVnN4WFZ4dUlDQnpNaUE5SUUxYk1sMGdYaUJyWlhsVFkyaGxaSFZzWlZzeVhWeHVJQ0J6TXlBOUlFMWJNMTBnWGlCclpYbFRZMmhsWkhWc1pWc3pYVnh1SUNCcmMxSnZkeUE5SURSY2JpQWdabTl5SUNoMllYSWdjbTkxYm1RZ1BTQXhPeUJ5YjNWdVpDQThJSFJvYVhNdVgyNVNiM1Z1WkhNN0lISnZkVzVrS3lzcElIdGNiaUFnSUNCME1DQTlJRk5WUWw5TlNWaGJNRjFiY3pBZ1BqNCtJREkwWFNCZUlGTlZRbDlOU1ZoYk1WMWJLSE14SUQ0K1BpQXhOaWtnSmlBd2VHWm1YU0JlSUZOVlFsOU5TVmhiTWwxYktITXlJRDQrUGlBNEtTQW1JREI0Wm1aZElGNGdVMVZDWDAxSldGc3pYVnR6TXlBbUlEQjRabVpkSUY0Z2EyVjVVMk5vWldSMWJHVmJhM05TYjNjcksxMWNiaUFnSUNCME1TQTlJRk5WUWw5TlNWaGJNRjFiY3pFZ1BqNCtJREkwWFNCZUlGTlZRbDlOU1ZoYk1WMWJLSE15SUQ0K1BpQXhOaWtnSmlBd2VHWm1YU0JlSUZOVlFsOU5TVmhiTWwxYktITXpJRDQrUGlBNEtTQW1JREI0Wm1aZElGNGdVMVZDWDAxSldGc3pYVnR6TUNBbUlEQjRabVpkSUY0Z2EyVjVVMk5vWldSMWJHVmJhM05TYjNjcksxMWNiaUFnSUNCME1pQTlJRk5WUWw5TlNWaGJNRjFiY3pJZ1BqNCtJREkwWFNCZUlGTlZRbDlOU1ZoYk1WMWJLSE16SUQ0K1BpQXhOaWtnSmlBd2VHWm1YU0JlSUZOVlFsOU5TVmhiTWwxYktITXdJRDQrUGlBNEtTQW1JREI0Wm1aZElGNGdVMVZDWDAxSldGc3pYVnR6TVNBbUlEQjRabVpkSUY0Z2EyVjVVMk5vWldSMWJHVmJhM05TYjNjcksxMWNiaUFnSUNCME15QTlJRk5WUWw5TlNWaGJNRjFiY3pNZ1BqNCtJREkwWFNCZUlGTlZRbDlOU1ZoYk1WMWJLSE13SUQ0K1BpQXhOaWtnSmlBd2VHWm1YU0JlSUZOVlFsOU5TVmhiTWwxYktITXhJRDQrUGlBNEtTQW1JREI0Wm1aZElGNGdVMVZDWDAxSldGc3pYVnR6TWlBbUlEQjRabVpkSUY0Z2EyVjVVMk5vWldSMWJHVmJhM05TYjNjcksxMWNiaUFnSUNCek1DQTlJSFF3WEc0Z0lDQWdjekVnUFNCME1WeHVJQ0FnSUhNeUlEMGdkREpjYmlBZ0lDQnpNeUE5SUhRelhHNGdJSDFjYmlBZ2REQWdQU0FvS0ZOQ1QxaGJjekFnUGo0K0lESTBYU0E4UENBeU5Da2dmQ0FvVTBKUFdGc29jekVnUGo0K0lERTJLU0FtSURCNFptWmRJRHc4SURFMktTQjhJQ2hUUWs5WVd5aHpNaUErUGo0Z09Da2dKaUF3ZUdabVhTQThQQ0E0S1NCOElGTkNUMWhiY3pNZ0ppQXdlR1ptWFNrZ1hpQnJaWGxUWTJobFpIVnNaVnRyYzFKdmR5c3JYVnh1SUNCME1TQTlJQ2dvVTBKUFdGdHpNU0ErUGo0Z01qUmRJRHc4SURJMEtTQjhJQ2hUUWs5WVd5aHpNaUErUGo0Z01UWXBJQ1lnTUhobVpsMGdQRHdnTVRZcElId2dLRk5DVDFoYktITXpJRDQrUGlBNEtTQW1JREI0Wm1aZElEdzhJRGdwSUh3Z1UwSlBXRnR6TUNBbUlEQjRabVpkS1NCZUlHdGxlVk5qYUdWa2RXeGxXMnR6VW05M0t5dGRYRzRnSUhReUlEMGdLQ2hUUWs5WVczTXlJRDQrUGlBeU5GMGdQRHdnTWpRcElId2dLRk5DVDFoYktITXpJRDQrUGlBeE5pa2dKaUF3ZUdabVhTQThQQ0F4TmlrZ2ZDQW9VMEpQV0Zzb2N6QWdQajQrSURncElDWWdNSGhtWmwwZ1BEd2dPQ2tnZkNCVFFrOVlXM014SUNZZ01IaG1abDBwSUY0Z2EyVjVVMk5vWldSMWJHVmJhM05TYjNjcksxMWNiaUFnZERNZ1BTQW9LRk5DVDFoYmN6TWdQajQrSURJMFhTQThQQ0F5TkNrZ2ZDQW9VMEpQV0Zzb2N6QWdQajQrSURFMktTQW1JREI0Wm1aZElEdzhJREUyS1NCOElDaFRRazlZV3loek1TQStQajRnT0NrZ0ppQXdlR1ptWFNBOFBDQTRLU0I4SUZOQ1QxaGJjeklnSmlBd2VHWm1YU2tnWGlCclpYbFRZMmhsWkhWc1pWdHJjMUp2ZHlzclhWeHVJQ0J5WlhSMWNtNGdXMXh1SUNBZ0lHWnBlSFZ3WDNWcGJuUXpNaWgwTUNrc1hHNGdJQ0FnWm1sNGRYQmZkV2x1ZERNeUtIUXhLU3hjYmlBZ0lDQm1hWGgxY0Y5MWFXNTBNeklvZERJcExGeHVJQ0FnSUdacGVIVndYM1ZwYm5Rek1paDBNeWxjYmlBZ1hWeHVmVnh1WEc1bGVIQnZjblJ6TGtGRlV5QTlJRUZGVTF4dUlsMTkiLCIvLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L3NlbGYtc2lnbmVkL2Jsb2IvZ2gtcGFnZXMvbGliL2FzbjEuanNcbi8vIEZlZG9yLCB5b3UgYXJlIGFtYXppbmcuXG5cbnZhciBhc24xID0gcmVxdWlyZSgnYXNuMS5qcycpXG5cbnZhciBSU0FQcml2YXRlS2V5ID0gYXNuMS5kZWZpbmUoJ1JTQVByaXZhdGVLZXknLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCd2ZXJzaW9uJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ21vZHVsdXMnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHVibGljRXhwb25lbnQnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHJpdmF0ZUV4cG9uZW50JykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3ByaW1lMScpLmludCgpLFxuICAgIHRoaXMua2V5KCdwcmltZTInKS5pbnQoKSxcbiAgICB0aGlzLmtleSgnZXhwb25lbnQxJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ2V4cG9uZW50MicpLmludCgpLFxuICAgIHRoaXMua2V5KCdjb2VmZmljaWVudCcpLmludCgpXG4gIClcbn0pXG5leHBvcnRzLlJTQVByaXZhdGVLZXkgPSBSU0FQcml2YXRlS2V5XG5cbnZhciBSU0FQdWJsaWNLZXkgPSBhc24xLmRlZmluZSgnUlNBUHVibGljS2V5JywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgnbW9kdWx1cycpLmludCgpLFxuICAgIHRoaXMua2V5KCdwdWJsaWNFeHBvbmVudCcpLmludCgpXG4gIClcbn0pXG5leHBvcnRzLlJTQVB1YmxpY0tleSA9IFJTQVB1YmxpY0tleVxuXG52YXIgUHVibGljS2V5ID0gYXNuMS5kZWZpbmUoJ1N1YmplY3RQdWJsaWNLZXlJbmZvJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgnYWxnb3JpdGhtJykudXNlKEFsZ29yaXRobUlkZW50aWZpZXIpLFxuICAgIHRoaXMua2V5KCdzdWJqZWN0UHVibGljS2V5JykuYml0c3RyKClcbiAgKVxufSlcbmV4cG9ydHMuUHVibGljS2V5ID0gUHVibGljS2V5XG5cbnZhciBBbGdvcml0aG1JZGVudGlmaWVyID0gYXNuMS5kZWZpbmUoJ0FsZ29yaXRobUlkZW50aWZpZXInLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdhbGdvcml0aG0nKS5vYmppZCgpLFxuICAgIHRoaXMua2V5KCdub25lJykubnVsbF8oKS5vcHRpb25hbCgpLFxuICAgIHRoaXMua2V5KCdjdXJ2ZScpLm9iamlkKCkub3B0aW9uYWwoKSxcbiAgICB0aGlzLmtleSgncGFyYW1zJykuc2VxKCkub2JqKFxuICAgICAgdGhpcy5rZXkoJ3AnKS5pbnQoKSxcbiAgICAgIHRoaXMua2V5KCdxJykuaW50KCksXG4gICAgICB0aGlzLmtleSgnZycpLmludCgpXG4gICAgKS5vcHRpb25hbCgpXG4gIClcbn0pXG5cbnZhciBQcml2YXRlS2V5SW5mbyA9IGFzbjEuZGVmaW5lKCdQcml2YXRlS2V5SW5mbycsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3ZlcnNpb24nKS5pbnQoKSxcbiAgICB0aGlzLmtleSgnYWxnb3JpdGhtJykudXNlKEFsZ29yaXRobUlkZW50aWZpZXIpLFxuICAgIHRoaXMua2V5KCdzdWJqZWN0UHJpdmF0ZUtleScpLm9jdHN0cigpXG4gIClcbn0pXG5leHBvcnRzLlByaXZhdGVLZXkgPSBQcml2YXRlS2V5SW5mb1xudmFyIEVuY3J5cHRlZFByaXZhdGVLZXlJbmZvID0gYXNuMS5kZWZpbmUoJ0VuY3J5cHRlZFByaXZhdGVLZXlJbmZvJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgnYWxnb3JpdGhtJykuc2VxKCkub2JqKFxuICAgICAgdGhpcy5rZXkoJ2lkJykub2JqaWQoKSxcbiAgICAgIHRoaXMua2V5KCdkZWNyeXB0Jykuc2VxKCkub2JqKFxuICAgICAgICB0aGlzLmtleSgna2RlJykuc2VxKCkub2JqKFxuICAgICAgICAgIHRoaXMua2V5KCdpZCcpLm9iamlkKCksXG4gICAgICAgICAgdGhpcy5rZXkoJ2tkZXBhcmFtcycpLnNlcSgpLm9iaihcbiAgICAgICAgICAgIHRoaXMua2V5KCdzYWx0Jykub2N0c3RyKCksXG4gICAgICAgICAgICB0aGlzLmtleSgnaXRlcnMnKS5pbnQoKVxuICAgICAgICAgIClcbiAgICAgICAgKSxcbiAgICAgICAgdGhpcy5rZXkoJ2NpcGhlcicpLnNlcSgpLm9iaihcbiAgICAgICAgICB0aGlzLmtleSgnYWxnbycpLm9iamlkKCksXG4gICAgICAgICAgdGhpcy5rZXkoJ2l2Jykub2N0c3RyKClcbiAgICAgICAgKVxuICAgICAgKVxuICAgICksXG4gICAgdGhpcy5rZXkoJ3N1YmplY3RQcml2YXRlS2V5Jykub2N0c3RyKClcbiAgKVxufSlcblxuZXhwb3J0cy5FbmNyeXB0ZWRQcml2YXRlS2V5ID0gRW5jcnlwdGVkUHJpdmF0ZUtleUluZm9cblxudmFyIERTQVByaXZhdGVLZXkgPSBhc24xLmRlZmluZSgnRFNBUHJpdmF0ZUtleScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3ZlcnNpb24nKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncCcpLmludCgpLFxuICAgIHRoaXMua2V5KCdxJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ2cnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHViX2tleScpLmludCgpLFxuICAgIHRoaXMua2V5KCdwcml2X2tleScpLmludCgpXG4gIClcbn0pXG5leHBvcnRzLkRTQVByaXZhdGVLZXkgPSBEU0FQcml2YXRlS2V5XG5cbmV4cG9ydHMuRFNBcGFyYW0gPSBhc24xLmRlZmluZSgnRFNBcGFyYW0nLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuaW50KClcbn0pXG52YXIgRUNQcml2YXRlS2V5ID0gYXNuMS5kZWZpbmUoJ0VDUHJpdmF0ZUtleScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3ZlcnNpb24nKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHJpdmF0ZUtleScpLm9jdHN0cigpLFxuICAgIHRoaXMua2V5KCdwYXJhbWV0ZXJzJykub3B0aW9uYWwoKS5leHBsaWNpdCgwKS51c2UoRUNQYXJhbWV0ZXJzKSxcbiAgICB0aGlzLmtleSgncHVibGljS2V5Jykub3B0aW9uYWwoKS5leHBsaWNpdCgxKS5iaXRzdHIoKVxuICApXG59KVxuZXhwb3J0cy5FQ1ByaXZhdGVLZXkgPSBFQ1ByaXZhdGVLZXlcbnZhciBFQ1BhcmFtZXRlcnMgPSBhc24xLmRlZmluZSgnRUNQYXJhbWV0ZXJzJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLmNob2ljZSh7XG4gICAgbmFtZWRDdXJ2ZTogdGhpcy5vYmppZCgpXG4gIH0pXG59KVxuXG5leHBvcnRzLnNpZ25hdHVyZSA9IGFzbjEuZGVmaW5lKCdzaWduYXR1cmUnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdyJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3MnKS5pbnQoKVxuICApXG59KVxuIiwidmFyIGFzbjEgPSBleHBvcnRzO1xuXG5hc24xLmJpZ251bSA9IHJlcXVpcmUoJ2JuLmpzJyk7XG5cbmFzbjEuZGVmaW5lID0gcmVxdWlyZSgnLi9hc24xL2FwaScpLmRlZmluZTtcbmFzbjEuYmFzZSA9IHJlcXVpcmUoJy4vYXNuMS9iYXNlJyk7XG5hc24xLmNvbnN0YW50cyA9IHJlcXVpcmUoJy4vYXNuMS9jb25zdGFudHMnKTtcbmFzbjEuZGVjb2RlcnMgPSByZXF1aXJlKCcuL2FzbjEvZGVjb2RlcnMnKTtcbmFzbjEuZW5jb2RlcnMgPSByZXF1aXJlKCcuL2FzbjEvZW5jb2RlcnMnKTtcbiIsInZhciBlbmNvZGVycyA9IGV4cG9ydHM7XG5cbmVuY29kZXJzLmRlciA9IHJlcXVpcmUoJy4vZGVyJyk7XG5lbmNvZGVycy5wZW0gPSByZXF1aXJlKCcuL3BlbScpO1xuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG5cbnZhciBhc24xID0gcmVxdWlyZSgnLi4vLi4vYXNuMScpO1xudmFyIERFUkVuY29kZXIgPSByZXF1aXJlKCcuL2RlcicpO1xuXG5mdW5jdGlvbiBQRU1FbmNvZGVyKGVudGl0eSkge1xuICBERVJFbmNvZGVyLmNhbGwodGhpcywgZW50aXR5KTtcbiAgdGhpcy5lbmMgPSAncGVtJztcbn07XG5pbmhlcml0cyhQRU1FbmNvZGVyLCBERVJFbmNvZGVyKTtcbm1vZHVsZS5leHBvcnRzID0gUEVNRW5jb2RlcjtcblxuUEVNRW5jb2Rlci5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIGJ1ZiA9IERFUkVuY29kZXIucHJvdG90eXBlLmVuY29kZS5jYWxsKHRoaXMsIGRhdGEpO1xuXG4gIHZhciBwID0gYnVmLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgdmFyIG91dCA9IFsgJy0tLS0tQkVHSU4gJyArIG9wdGlvbnMubGFiZWwgKyAnLS0tLS0nIF07XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcC5sZW5ndGg7IGkgKz0gNjQpXG4gICAgb3V0LnB1c2gocC5zbGljZShpLCBpICsgNjQpKTtcbiAgb3V0LnB1c2goJy0tLS0tRU5EICcgKyBvcHRpb25zLmxhYmVsICsgJy0tLS0tJyk7XG4gIHJldHVybiBvdXQuam9pbignXFxuJyk7XG59O1xuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG5cbnZhciBhc24xID0gcmVxdWlyZSgnLi4vLi4vYXNuMScpO1xudmFyIGJhc2UgPSBhc24xLmJhc2U7XG52YXIgYmlnbnVtID0gYXNuMS5iaWdudW07XG5cbi8vIEltcG9ydCBERVIgY29uc3RhbnRzXG52YXIgZGVyID0gYXNuMS5jb25zdGFudHMuZGVyO1xuXG5mdW5jdGlvbiBERVJFbmNvZGVyKGVudGl0eSkge1xuICB0aGlzLmVuYyA9ICdkZXInO1xuICB0aGlzLm5hbWUgPSBlbnRpdHkubmFtZTtcbiAgdGhpcy5lbnRpdHkgPSBlbnRpdHk7XG5cbiAgLy8gQ29uc3RydWN0IGJhc2UgdHJlZVxuICB0aGlzLnRyZWUgPSBuZXcgREVSTm9kZSgpO1xuICB0aGlzLnRyZWUuX2luaXQoZW50aXR5LmJvZHkpO1xufTtcbm1vZHVsZS5leHBvcnRzID0gREVSRW5jb2RlcjtcblxuREVSRW5jb2Rlci5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKGRhdGEsIHJlcG9ydGVyKSB7XG4gIHJldHVybiB0aGlzLnRyZWUuX2VuY29kZShkYXRhLCByZXBvcnRlcikuam9pbigpO1xufTtcblxuLy8gVHJlZSBtZXRob2RzXG5cbmZ1bmN0aW9uIERFUk5vZGUocGFyZW50KSB7XG4gIGJhc2UuTm9kZS5jYWxsKHRoaXMsICdkZXInLCBwYXJlbnQpO1xufVxuaW5oZXJpdHMoREVSTm9kZSwgYmFzZS5Ob2RlKTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2VuY29kZUNvbXBvc2l0ZSA9IGZ1bmN0aW9uIGVuY29kZUNvbXBvc2l0ZSh0YWcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW1pdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50KSB7XG4gIHZhciBlbmNvZGVkVGFnID0gZW5jb2RlVGFnKHRhZywgcHJpbWl0aXZlLCBjbHMsIHRoaXMucmVwb3J0ZXIpO1xuXG4gIC8vIFNob3J0IGZvcm1cbiAgaWYgKGNvbnRlbnQubGVuZ3RoIDwgMHg4MCkge1xuICAgIHZhciBoZWFkZXIgPSBuZXcgQnVmZmVyKDIpO1xuICAgIGhlYWRlclswXSA9IGVuY29kZWRUYWc7XG4gICAgaGVhZGVyWzFdID0gY29udGVudC5sZW5ndGg7XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoWyBoZWFkZXIsIGNvbnRlbnQgXSk7XG4gIH1cblxuICAvLyBMb25nIGZvcm1cbiAgLy8gQ291bnQgb2N0ZXRzIHJlcXVpcmVkIHRvIHN0b3JlIGxlbmd0aFxuICB2YXIgbGVuT2N0ZXRzID0gMTtcbiAgZm9yICh2YXIgaSA9IGNvbnRlbnQubGVuZ3RoOyBpID49IDB4MTAwOyBpID4+PSA4KVxuICAgIGxlbk9jdGV0cysrO1xuXG4gIHZhciBoZWFkZXIgPSBuZXcgQnVmZmVyKDEgKyAxICsgbGVuT2N0ZXRzKTtcbiAgaGVhZGVyWzBdID0gZW5jb2RlZFRhZztcbiAgaGVhZGVyWzFdID0gMHg4MCB8IGxlbk9jdGV0cztcblxuICBmb3IgKHZhciBpID0gMSArIGxlbk9jdGV0cywgaiA9IGNvbnRlbnQubGVuZ3RoOyBqID4gMDsgaS0tLCBqID4+PSA4KVxuICAgIGhlYWRlcltpXSA9IGogJiAweGZmO1xuXG4gIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKFsgaGVhZGVyLCBjb250ZW50IF0pO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2VuY29kZVN0ciA9IGZ1bmN0aW9uIGVuY29kZVN0cihzdHIsIHRhZykge1xuICBpZiAodGFnID09PSAnb2N0c3RyJylcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihzdHIpO1xuICBlbHNlIGlmICh0YWcgPT09ICdiaXRzdHInKVxuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKFsgc3RyLnVudXNlZCB8IDAsIHN0ci5kYXRhIF0pO1xuICBlbHNlIGlmICh0YWcgPT09ICdpYTVzdHInIHx8IHRhZyA9PT0gJ3V0ZjhzdHInKVxuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKHN0cik7XG4gIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdFbmNvZGluZyBvZiBzdHJpbmcgdHlwZTogJyArIHRhZyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgdW5zdXBwb3J0ZWQnKTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVPYmppZCA9IGZ1bmN0aW9uIGVuY29kZU9iamlkKGlkLCB2YWx1ZXMsIHJlbGF0aXZlKSB7XG4gIGlmICh0eXBlb2YgaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKCF2YWx1ZXMpXG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignc3RyaW5nIG9iamlkIGdpdmVuLCBidXQgbm8gdmFsdWVzIG1hcCBmb3VuZCcpO1xuICAgIGlmICghdmFsdWVzLmhhc093blByb3BlcnR5KGlkKSlcbiAgICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdvYmppZCBub3QgZm91bmQgaW4gdmFsdWVzIG1hcCcpO1xuICAgIGlkID0gdmFsdWVzW2lkXS5zcGxpdCgvW1xcc1xcLl0rL2cpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaWQubGVuZ3RoOyBpKyspXG4gICAgICBpZFtpXSB8PSAwO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaWQpKSB7XG4gICAgaWQgPSBpZC5zbGljZSgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaWQubGVuZ3RoOyBpKyspXG4gICAgICBpZFtpXSB8PSAwO1xuICB9XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KGlkKSkge1xuICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdvYmppZCgpIHNob3VsZCBiZSBlaXRoZXIgYXJyYXkgb3Igc3RyaW5nLCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ290OiAnICsgSlNPTi5zdHJpbmdpZnkoaWQpKTtcbiAgfVxuXG4gIGlmICghcmVsYXRpdmUpIHtcbiAgICBpZiAoaWRbMV0gPj0gNDApXG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignU2Vjb25kIG9iamlkIGlkZW50aWZpZXIgT09CJyk7XG4gICAgaWQuc3BsaWNlKDAsIDIsIGlkWzBdICogNDAgKyBpZFsxXSk7XG4gIH1cblxuICAvLyBDb3VudCBudW1iZXIgb2Ygb2N0ZXRzXG4gIHZhciBzaXplID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBpZC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpZGVudCA9IGlkW2ldO1xuICAgIGZvciAoc2l6ZSsrOyBpZGVudCA+PSAweDgwOyBpZGVudCA+Pj0gNylcbiAgICAgIHNpemUrKztcbiAgfVxuXG4gIHZhciBvYmppZCA9IG5ldyBCdWZmZXIoc2l6ZSk7XG4gIHZhciBvZmZzZXQgPSBvYmppZC5sZW5ndGggLSAxO1xuICBmb3IgKHZhciBpID0gaWQubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgaWRlbnQgPSBpZFtpXTtcbiAgICBvYmppZFtvZmZzZXQtLV0gPSBpZGVudCAmIDB4N2Y7XG4gICAgd2hpbGUgKChpZGVudCA+Pj0gNykgPiAwKVxuICAgICAgb2JqaWRbb2Zmc2V0LS1dID0gMHg4MCB8IChpZGVudCAmIDB4N2YpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIob2JqaWQpO1xufTtcblxuZnVuY3Rpb24gdHdvKG51bSkge1xuICBpZiAobnVtIDwgMTApXG4gICAgcmV0dXJuICcwJyArIG51bTtcbiAgZWxzZVxuICAgIHJldHVybiBudW07XG59XG5cbkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVUaW1lID0gZnVuY3Rpb24gZW5jb2RlVGltZSh0aW1lLCB0YWcpIHtcbiAgdmFyIHN0cjtcbiAgdmFyIGRhdGUgPSBuZXcgRGF0ZSh0aW1lKTtcblxuICBpZiAodGFnID09PSAnZ2VudGltZScpIHtcbiAgICBzdHIgPSBbXG4gICAgICB0d28oZGF0ZS5nZXRGdWxsWWVhcigpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ0RhdGUoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENIb3VycygpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ01pbnV0ZXMoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENTZWNvbmRzKCkpLFxuICAgICAgJ1onXG4gICAgXS5qb2luKCcnKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICd1dGN0aW1lJykge1xuICAgIHN0ciA9IFtcbiAgICAgIHR3byhkYXRlLmdldEZ1bGxZZWFyKCkgJSAxMDApLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDRGF0ZSgpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ0hvdXJzKCkpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDTWludXRlcygpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ1NlY29uZHMoKSksXG4gICAgICAnWidcbiAgICBdLmpvaW4oJycpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ0VuY29kaW5nICcgKyB0YWcgKyAnIHRpbWUgaXMgbm90IHN1cHBvcnRlZCB5ZXQnKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl9lbmNvZGVTdHIoc3RyLCAnb2N0c3RyJyk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlTnVsbCA9IGZ1bmN0aW9uIGVuY29kZU51bGwoKSB7XG4gIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKCcnKTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVJbnQgPSBmdW5jdGlvbiBlbmNvZGVJbnQobnVtLCB2YWx1ZXMpIHtcbiAgaWYgKHR5cGVvZiBudW0gPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKCF2YWx1ZXMpXG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignU3RyaW5nIGludCBvciBlbnVtIGdpdmVuLCBidXQgbm8gdmFsdWVzIG1hcCcpO1xuICAgIGlmICghdmFsdWVzLmhhc093blByb3BlcnR5KG51bSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdWYWx1ZXMgbWFwIGRvZXNuXFwndCBjb250YWluOiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KG51bSkpO1xuICAgIH1cbiAgICBudW0gPSB2YWx1ZXNbbnVtXTtcbiAgfVxuXG4gIC8vIEJpZ251bSwgYXNzdW1lIGJpZyBlbmRpYW5cbiAgaWYgKHR5cGVvZiBudW0gIT09ICdudW1iZXInICYmICFCdWZmZXIuaXNCdWZmZXIobnVtKSkge1xuICAgIHZhciBudW1BcnJheSA9IG51bS50b0FycmF5KCk7XG4gICAgaWYgKG51bS5zaWduID09PSBmYWxzZSAmJiBudW1BcnJheVswXSAmIDB4ODApIHtcbiAgICAgIG51bUFycmF5LnVuc2hpZnQoMCk7XG4gICAgfVxuICAgIG51bSA9IG5ldyBCdWZmZXIobnVtQXJyYXkpO1xuICB9XG5cbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihudW0pKSB7XG4gICAgdmFyIHNpemUgPSBudW0ubGVuZ3RoO1xuICAgIGlmIChudW0ubGVuZ3RoID09PSAwKVxuICAgICAgc2l6ZSsrO1xuXG4gICAgdmFyIG91dCA9IG5ldyBCdWZmZXIoc2l6ZSk7XG4gICAgbnVtLmNvcHkob3V0KTtcbiAgICBpZiAobnVtLmxlbmd0aCA9PT0gMClcbiAgICAgIG91dFswXSA9IDBcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihvdXQpO1xuICB9XG5cbiAgaWYgKG51bSA8IDB4ODApXG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIobnVtKTtcblxuICBpZiAobnVtIDwgMHgxMDApXG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoWzAsIG51bV0pO1xuXG4gIHZhciBzaXplID0gMTtcbiAgZm9yICh2YXIgaSA9IG51bTsgaSA+PSAweDEwMDsgaSA+Pj0gOClcbiAgICBzaXplKys7XG5cbiAgdmFyIG91dCA9IG5ldyBBcnJheShzaXplKTtcbiAgZm9yICh2YXIgaSA9IG91dC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIG91dFtpXSA9IG51bSAmIDB4ZmY7XG4gICAgbnVtID4+PSA4O1xuICB9XG4gIGlmKG91dFswXSAmIDB4ODApIHtcbiAgICBvdXQudW5zaGlmdCgwKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKG5ldyBCdWZmZXIob3V0KSk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlQm9vbCA9IGZ1bmN0aW9uIGVuY29kZUJvb2wodmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIodmFsdWUgPyAweGZmIDogMCk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fdXNlID0gZnVuY3Rpb24gdXNlKGVudGl0eSwgb2JqKSB7XG4gIGlmICh0eXBlb2YgZW50aXR5ID09PSAnZnVuY3Rpb24nKVxuICAgIGVudGl0eSA9IGVudGl0eShvYmopO1xuICByZXR1cm4gZW50aXR5Ll9nZXRFbmNvZGVyKCdkZXInKS50cmVlO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX3NraXBEZWZhdWx0ID0gZnVuY3Rpb24gc2tpcERlZmF1bHQoZGF0YUJ1ZmZlciwgcmVwb3J0ZXIsIHBhcmVudCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gIHZhciBpO1xuICBpZiAoc3RhdGVbJ2RlZmF1bHQnXSA9PT0gbnVsbClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIGRhdGEgPSBkYXRhQnVmZmVyLmpvaW4oKTtcbiAgaWYgKHN0YXRlLmRlZmF1bHRCdWZmZXIgPT09IHVuZGVmaW5lZClcbiAgICBzdGF0ZS5kZWZhdWx0QnVmZmVyID0gdGhpcy5fZW5jb2RlVmFsdWUoc3RhdGVbJ2RlZmF1bHQnXSwgcmVwb3J0ZXIsIHBhcmVudCkuam9pbigpO1xuXG4gIGlmIChkYXRhLmxlbmd0aCAhPT0gc3RhdGUuZGVmYXVsdEJ1ZmZlci5sZW5ndGgpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAoaT0wOyBpIDwgZGF0YS5sZW5ndGg7IGkrKylcbiAgICBpZiAoZGF0YVtpXSAhPT0gc3RhdGUuZGVmYXVsdEJ1ZmZlcltpXSlcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8vIFV0aWxpdHkgbWV0aG9kc1xuXG5mdW5jdGlvbiBlbmNvZGVUYWcodGFnLCBwcmltaXRpdmUsIGNscywgcmVwb3J0ZXIpIHtcbiAgdmFyIHJlcztcblxuICBpZiAodGFnID09PSAnc2Vxb2YnKVxuICAgIHRhZyA9ICdzZXEnO1xuICBlbHNlIGlmICh0YWcgPT09ICdzZXRvZicpXG4gICAgdGFnID0gJ3NldCc7XG5cbiAgaWYgKGRlci50YWdCeU5hbWUuaGFzT3duUHJvcGVydHkodGFnKSlcbiAgICByZXMgPSBkZXIudGFnQnlOYW1lW3RhZ107XG4gIGVsc2UgaWYgKHR5cGVvZiB0YWcgPT09ICdudW1iZXInICYmICh0YWcgfCAwKSA9PT0gdGFnKVxuICAgIHJlcyA9IHRhZztcbiAgZWxzZVxuICAgIHJldHVybiByZXBvcnRlci5lcnJvcignVW5rbm93biB0YWc6ICcgKyB0YWcpO1xuXG4gIGlmIChyZXMgPj0gMHgxZilcbiAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ011bHRpLW9jdGV0IHRhZyBlbmNvZGluZyB1bnN1cHBvcnRlZCcpO1xuXG4gIGlmICghcHJpbWl0aXZlKVxuICAgIHJlcyB8PSAweDIwO1xuXG4gIHJlcyB8PSAoZGVyLnRhZ0NsYXNzQnlOYW1lW2NscyB8fCAndW5pdmVyc2FsJ10gPDwgNik7XG5cbiAgcmV0dXJuIHJlcztcbn1cbiIsInZhciBkZWNvZGVycyA9IGV4cG9ydHM7XG5cbmRlY29kZXJzLmRlciA9IHJlcXVpcmUoJy4vZGVyJyk7XG5kZWNvZGVycy5wZW0gPSByZXF1aXJlKCcuL3BlbScpO1xuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG5cbnZhciBhc24xID0gcmVxdWlyZSgnLi4vLi4vYXNuMScpO1xudmFyIERFUkRlY29kZXIgPSByZXF1aXJlKCcuL2RlcicpO1xuXG5mdW5jdGlvbiBQRU1EZWNvZGVyKGVudGl0eSkge1xuICBERVJEZWNvZGVyLmNhbGwodGhpcywgZW50aXR5KTtcbiAgdGhpcy5lbmMgPSAncGVtJztcbn07XG5pbmhlcml0cyhQRU1EZWNvZGVyLCBERVJEZWNvZGVyKTtcbm1vZHVsZS5leHBvcnRzID0gUEVNRGVjb2RlcjtcblxuUEVNRGVjb2Rlci5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIGxpbmVzID0gZGF0YS50b1N0cmluZygpLnNwbGl0KC9bXFxyXFxuXSsvZyk7XG5cbiAgdmFyIGxhYmVsID0gb3B0aW9ucy5sYWJlbC50b1VwcGVyQ2FzZSgpO1xuXG4gIHZhciByZSA9IC9eLS0tLS0oQkVHSU58RU5EKSAoW14tXSspLS0tLS0kLztcbiAgdmFyIHN0YXJ0ID0gLTE7XG4gIHZhciBlbmQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBtYXRjaCA9IGxpbmVzW2ldLm1hdGNoKHJlKTtcbiAgICBpZiAobWF0Y2ggPT09IG51bGwpXG4gICAgICBjb250aW51ZTtcblxuICAgIGlmIChtYXRjaFsyXSAhPT0gbGFiZWwpXG4gICAgICBjb250aW51ZTtcblxuICAgIGlmIChzdGFydCA9PT0gLTEpIHtcbiAgICAgIGlmIChtYXRjaFsxXSAhPT0gJ0JFR0lOJylcbiAgICAgICAgYnJlYWs7XG4gICAgICBzdGFydCA9IGk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChtYXRjaFsxXSAhPT0gJ0VORCcpXG4gICAgICAgIGJyZWFrO1xuICAgICAgZW5kID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBpZiAoc3RhcnQgPT09IC0xIHx8IGVuZCA9PT0gLTEpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdQRU0gc2VjdGlvbiBub3QgZm91bmQgZm9yOiAnICsgbGFiZWwpO1xuXG4gIHZhciBiYXNlNjQgPSBsaW5lcy5zbGljZShzdGFydCArIDEsIGVuZCkuam9pbignJyk7XG4gIC8vIFJlbW92ZSBleGNlc3NpdmUgc3ltYm9sc1xuICBiYXNlNjQucmVwbGFjZSgvW15hLXowLTlcXCtcXC89XSsvZ2ksICcnKTtcblxuICB2YXIgaW5wdXQgPSBuZXcgQnVmZmVyKGJhc2U2NCwgJ2Jhc2U2NCcpO1xuICByZXR1cm4gREVSRGVjb2Rlci5wcm90b3R5cGUuZGVjb2RlLmNhbGwodGhpcywgaW5wdXQsIG9wdGlvbnMpO1xufTtcbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciBhc24xID0gcmVxdWlyZSgnLi4vLi4vYXNuMScpO1xudmFyIGJhc2UgPSBhc24xLmJhc2U7XG52YXIgYmlnbnVtID0gYXNuMS5iaWdudW07XG5cbi8vIEltcG9ydCBERVIgY29uc3RhbnRzXG52YXIgZGVyID0gYXNuMS5jb25zdGFudHMuZGVyO1xuXG5mdW5jdGlvbiBERVJEZWNvZGVyKGVudGl0eSkge1xuICB0aGlzLmVuYyA9ICdkZXInO1xuICB0aGlzLm5hbWUgPSBlbnRpdHkubmFtZTtcbiAgdGhpcy5lbnRpdHkgPSBlbnRpdHk7XG5cbiAgLy8gQ29uc3RydWN0IGJhc2UgdHJlZVxuICB0aGlzLnRyZWUgPSBuZXcgREVSTm9kZSgpO1xuICB0aGlzLnRyZWUuX2luaXQoZW50aXR5LmJvZHkpO1xufTtcbm1vZHVsZS5leHBvcnRzID0gREVSRGVjb2RlcjtcblxuREVSRGVjb2Rlci5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKGRhdGEsIG9wdGlvbnMpIHtcbiAgaWYgKCEoZGF0YSBpbnN0YW5jZW9mIGJhc2UuRGVjb2RlckJ1ZmZlcikpXG4gICAgZGF0YSA9IG5ldyBiYXNlLkRlY29kZXJCdWZmZXIoZGF0YSwgb3B0aW9ucyk7XG5cbiAgcmV0dXJuIHRoaXMudHJlZS5fZGVjb2RlKGRhdGEsIG9wdGlvbnMpO1xufTtcblxuLy8gVHJlZSBtZXRob2RzXG5cbmZ1bmN0aW9uIERFUk5vZGUocGFyZW50KSB7XG4gIGJhc2UuTm9kZS5jYWxsKHRoaXMsICdkZXInLCBwYXJlbnQpO1xufVxuaW5oZXJpdHMoREVSTm9kZSwgYmFzZS5Ob2RlKTtcblxuREVSTm9kZS5wcm90b3R5cGUuX3BlZWtUYWcgPSBmdW5jdGlvbiBwZWVrVGFnKGJ1ZmZlciwgdGFnLCBhbnkpIHtcbiAgaWYgKGJ1ZmZlci5pc0VtcHR5KCkpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBzdGF0ZSA9IGJ1ZmZlci5zYXZlKCk7XG4gIHZhciBkZWNvZGVkVGFnID0gZGVyRGVjb2RlVGFnKGJ1ZmZlciwgJ0ZhaWxlZCB0byBwZWVrIHRhZzogXCInICsgdGFnICsgJ1wiJyk7XG4gIGlmIChidWZmZXIuaXNFcnJvcihkZWNvZGVkVGFnKSlcbiAgICByZXR1cm4gZGVjb2RlZFRhZztcblxuICBidWZmZXIucmVzdG9yZShzdGF0ZSk7XG5cbiAgcmV0dXJuIGRlY29kZWRUYWcudGFnID09PSB0YWcgfHwgZGVjb2RlZFRhZy50YWdTdHIgPT09IHRhZyB8fCBhbnk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlVGFnID0gZnVuY3Rpb24gZGVjb2RlVGFnKGJ1ZmZlciwgdGFnLCBhbnkpIHtcbiAgdmFyIGRlY29kZWRUYWcgPSBkZXJEZWNvZGVUYWcoYnVmZmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRmFpbGVkIHRvIGRlY29kZSB0YWcgb2YgXCInICsgdGFnICsgJ1wiJyk7XG4gIGlmIChidWZmZXIuaXNFcnJvcihkZWNvZGVkVGFnKSlcbiAgICByZXR1cm4gZGVjb2RlZFRhZztcblxuICB2YXIgbGVuID0gZGVyRGVjb2RlTGVuKGJ1ZmZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICBkZWNvZGVkVGFnLnByaW1pdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAnRmFpbGVkIHRvIGdldCBsZW5ndGggb2YgXCInICsgdGFnICsgJ1wiJyk7XG5cbiAgLy8gRmFpbHVyZVxuICBpZiAoYnVmZmVyLmlzRXJyb3IobGVuKSlcbiAgICByZXR1cm4gbGVuO1xuXG4gIGlmICghYW55ICYmXG4gICAgICBkZWNvZGVkVGFnLnRhZyAhPT0gdGFnICYmXG4gICAgICBkZWNvZGVkVGFnLnRhZ1N0ciAhPT0gdGFnICYmXG4gICAgICBkZWNvZGVkVGFnLnRhZ1N0ciArICdvZicgIT09IHRhZykge1xuICAgIHJldHVybiBidWZmZXIuZXJyb3IoJ0ZhaWxlZCB0byBtYXRjaCB0YWc6IFwiJyArIHRhZyArICdcIicpO1xuICB9XG5cbiAgaWYgKGRlY29kZWRUYWcucHJpbWl0aXZlIHx8IGxlbiAhPT0gbnVsbClcbiAgICByZXR1cm4gYnVmZmVyLnNraXAobGVuLCAnRmFpbGVkIHRvIG1hdGNoIGJvZHkgb2Y6IFwiJyArIHRhZyArICdcIicpO1xuXG4gIC8vIEluZGVmaW5pdGUgbGVuZ3RoLi4uIGZpbmQgRU5EIHRhZ1xuICB2YXIgc3RhdGUgPSBidWZmZXIuc2F2ZSgpO1xuICB2YXIgcmVzID0gdGhpcy5fc2tpcFVudGlsRW5kKFxuICAgICAgYnVmZmVyLFxuICAgICAgJ0ZhaWxlZCB0byBza2lwIGluZGVmaW5pdGUgbGVuZ3RoIGJvZHk6IFwiJyArIHRoaXMudGFnICsgJ1wiJyk7XG4gIGlmIChidWZmZXIuaXNFcnJvcihyZXMpKVxuICAgIHJldHVybiByZXM7XG5cbiAgbGVuID0gYnVmZmVyLm9mZnNldCAtIHN0YXRlLm9mZnNldDtcbiAgYnVmZmVyLnJlc3RvcmUoc3RhdGUpO1xuICByZXR1cm4gYnVmZmVyLnNraXAobGVuLCAnRmFpbGVkIHRvIG1hdGNoIGJvZHkgb2Y6IFwiJyArIHRhZyArICdcIicpO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX3NraXBVbnRpbEVuZCA9IGZ1bmN0aW9uIHNraXBVbnRpbEVuZChidWZmZXIsIGZhaWwpIHtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICB2YXIgdGFnID0gZGVyRGVjb2RlVGFnKGJ1ZmZlciwgZmFpbCk7XG4gICAgaWYgKGJ1ZmZlci5pc0Vycm9yKHRhZykpXG4gICAgICByZXR1cm4gdGFnO1xuICAgIHZhciBsZW4gPSBkZXJEZWNvZGVMZW4oYnVmZmVyLCB0YWcucHJpbWl0aXZlLCBmYWlsKTtcbiAgICBpZiAoYnVmZmVyLmlzRXJyb3IobGVuKSlcbiAgICAgIHJldHVybiBsZW47XG5cbiAgICB2YXIgcmVzO1xuICAgIGlmICh0YWcucHJpbWl0aXZlIHx8IGxlbiAhPT0gbnVsbClcbiAgICAgIHJlcyA9IGJ1ZmZlci5za2lwKGxlbilcbiAgICBlbHNlXG4gICAgICByZXMgPSB0aGlzLl9za2lwVW50aWxFbmQoYnVmZmVyLCBmYWlsKTtcblxuICAgIC8vIEZhaWx1cmVcbiAgICBpZiAoYnVmZmVyLmlzRXJyb3IocmVzKSlcbiAgICAgIHJldHVybiByZXM7XG5cbiAgICBpZiAodGFnLnRhZ1N0ciA9PT0gJ2VuZCcpXG4gICAgICBicmVhaztcbiAgfVxufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZUxpc3QgPSBmdW5jdGlvbiBkZWNvZGVMaXN0KGJ1ZmZlciwgdGFnLCBkZWNvZGVyKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgd2hpbGUgKCFidWZmZXIuaXNFbXB0eSgpKSB7XG4gICAgdmFyIHBvc3NpYmxlRW5kID0gdGhpcy5fcGVla1RhZyhidWZmZXIsICdlbmQnKTtcbiAgICBpZiAoYnVmZmVyLmlzRXJyb3IocG9zc2libGVFbmQpKVxuICAgICAgcmV0dXJuIHBvc3NpYmxlRW5kO1xuXG4gICAgdmFyIHJlcyA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlciwgJ2RlcicpO1xuICAgIGlmIChidWZmZXIuaXNFcnJvcihyZXMpICYmIHBvc3NpYmxlRW5kKVxuICAgICAgYnJlYWs7XG4gICAgcmVzdWx0LnB1c2gocmVzKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZVN0ciA9IGZ1bmN0aW9uIGRlY29kZVN0cihidWZmZXIsIHRhZykge1xuICBpZiAodGFnID09PSAnb2N0c3RyJykge1xuICAgIHJldHVybiBidWZmZXIucmF3KCk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnYml0c3RyJykge1xuICAgIHZhciB1bnVzZWQgPSBidWZmZXIucmVhZFVJbnQ4KCk7XG4gICAgaWYgKGJ1ZmZlci5pc0Vycm9yKHVudXNlZCkpXG4gICAgICByZXR1cm4gdW51c2VkO1xuXG4gICAgcmV0dXJuIHsgdW51c2VkOiB1bnVzZWQsIGRhdGE6IGJ1ZmZlci5yYXcoKSB9O1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2lhNXN0cicgfHwgdGFnID09PSAndXRmOHN0cicpIHtcbiAgICByZXR1cm4gYnVmZmVyLnJhdygpLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRoaXMuZXJyb3IoJ0RlY29kaW5nIG9mIHN0cmluZyB0eXBlOiAnICsgdGFnICsgJyB1bnN1cHBvcnRlZCcpO1xuICB9XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlT2JqaWQgPSBmdW5jdGlvbiBkZWNvZGVPYmppZChidWZmZXIsIHZhbHVlcywgcmVsYXRpdmUpIHtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIHZhciBpZGVudCA9IDA7XG4gIHdoaWxlICghYnVmZmVyLmlzRW1wdHkoKSkge1xuICAgIHZhciBzdWJpZGVudCA9IGJ1ZmZlci5yZWFkVUludDgoKTtcbiAgICBpZGVudCA8PD0gNztcbiAgICBpZGVudCB8PSBzdWJpZGVudCAmIDB4N2Y7XG4gICAgaWYgKChzdWJpZGVudCAmIDB4ODApID09PSAwKSB7XG4gICAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50KTtcbiAgICAgIGlkZW50ID0gMDtcbiAgICB9XG4gIH1cbiAgaWYgKHN1YmlkZW50ICYgMHg4MClcbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50KTtcblxuICB2YXIgZmlyc3QgPSAoaWRlbnRpZmllcnNbMF0gLyA0MCkgfCAwO1xuICB2YXIgc2Vjb25kID0gaWRlbnRpZmllcnNbMF0gJSA0MDtcblxuICBpZiAocmVsYXRpdmUpXG4gICAgcmVzdWx0ID0gaWRlbnRpZmllcnM7XG4gIGVsc2VcbiAgICByZXN1bHQgPSBbZmlyc3QsIHNlY29uZF0uY29uY2F0KGlkZW50aWZpZXJzLnNsaWNlKDEpKTtcblxuICBpZiAodmFsdWVzKVxuICAgIHJlc3VsdCA9IHZhbHVlc1tyZXN1bHQuam9pbignICcpXTtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZVRpbWUgPSBmdW5jdGlvbiBkZWNvZGVUaW1lKGJ1ZmZlciwgdGFnKSB7XG4gIHZhciBzdHIgPSBidWZmZXIucmF3KCkudG9TdHJpbmcoKTtcbiAgaWYgKHRhZyA9PT0gJ2dlbnRpbWUnKSB7XG4gICAgdmFyIHllYXIgPSBzdHIuc2xpY2UoMCwgNCkgfCAwO1xuICAgIHZhciBtb24gPSBzdHIuc2xpY2UoNCwgNikgfCAwO1xuICAgIHZhciBkYXkgPSBzdHIuc2xpY2UoNiwgOCkgfCAwO1xuICAgIHZhciBob3VyID0gc3RyLnNsaWNlKDgsIDEwKSB8IDA7XG4gICAgdmFyIG1pbiA9IHN0ci5zbGljZSgxMCwgMTIpIHwgMDtcbiAgICB2YXIgc2VjID0gc3RyLnNsaWNlKDEyLCAxNCkgfCAwO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ3V0Y3RpbWUnKSB7XG4gICAgdmFyIHllYXIgPSBzdHIuc2xpY2UoMCwgMikgfCAwO1xuICAgIHZhciBtb24gPSBzdHIuc2xpY2UoMiwgNCkgfCAwO1xuICAgIHZhciBkYXkgPSBzdHIuc2xpY2UoNCwgNikgfCAwO1xuICAgIHZhciBob3VyID0gc3RyLnNsaWNlKDYsIDgpIHwgMDtcbiAgICB2YXIgbWluID0gc3RyLnNsaWNlKDgsIDEwKSB8IDA7XG4gICAgdmFyIHNlYyA9IHN0ci5zbGljZSgxMCwgMTIpIHwgMDtcbiAgICBpZiAoeWVhciA8IDcwKVxuICAgICAgeWVhciA9IDIwMDAgKyB5ZWFyO1xuICAgIGVsc2VcbiAgICAgIHllYXIgPSAxOTAwICsgeWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdGhpcy5lcnJvcignRGVjb2RpbmcgJyArIHRhZyArICcgdGltZSBpcyBub3Qgc3VwcG9ydGVkIHlldCcpO1xuICB9XG5cbiAgcmV0dXJuIERhdGUuVVRDKHllYXIsIG1vbiAtIDEsIGRheSwgaG91ciwgbWluLCBzZWMsIDApO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZU51bGwgPSBmdW5jdGlvbiBkZWNvZGVOdWxsKGJ1ZmZlcikge1xuICByZXR1cm4gbnVsbDtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9kZWNvZGVCb29sID0gZnVuY3Rpb24gZGVjb2RlQm9vbChidWZmZXIpIHtcbiAgdmFyIHJlcyA9IGJ1ZmZlci5yZWFkVUludDgoKTtcbiAgaWYgKGJ1ZmZlci5pc0Vycm9yKHJlcykpXG4gICAgcmV0dXJuIHJlcztcbiAgZWxzZVxuICAgIHJldHVybiByZXMgIT09IDA7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlSW50ID0gZnVuY3Rpb24gZGVjb2RlSW50KGJ1ZmZlciwgdmFsdWVzKSB7XG4gIC8vIEJpZ2ludCwgcmV0dXJuIGFzIGl0IGlzIChhc3N1bWUgYmlnIGVuZGlhbilcbiAgdmFyIHJhdyA9IGJ1ZmZlci5yYXcoKTtcbiAgdmFyIHJlcyA9IG5ldyBiaWdudW0ocmF3KTtcblxuICBpZiAodmFsdWVzKVxuICAgIHJlcyA9IHZhbHVlc1tyZXMudG9TdHJpbmcoMTApXSB8fCByZXM7XG5cbiAgcmV0dXJuIHJlcztcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl91c2UgPSBmdW5jdGlvbiB1c2UoZW50aXR5LCBvYmopIHtcbiAgaWYgKHR5cGVvZiBlbnRpdHkgPT09ICdmdW5jdGlvbicpXG4gICAgZW50aXR5ID0gZW50aXR5KG9iaik7XG4gIHJldHVybiBlbnRpdHkuX2dldERlY29kZXIoJ2RlcicpLnRyZWU7XG59O1xuXG4vLyBVdGlsaXR5IG1ldGhvZHNcblxuZnVuY3Rpb24gZGVyRGVjb2RlVGFnKGJ1ZiwgZmFpbCkge1xuICB2YXIgdGFnID0gYnVmLnJlYWRVSW50OChmYWlsKTtcbiAgaWYgKGJ1Zi5pc0Vycm9yKHRhZykpXG4gICAgcmV0dXJuIHRhZztcblxuICB2YXIgY2xzID0gZGVyLnRhZ0NsYXNzW3RhZyA+PiA2XTtcbiAgdmFyIHByaW1pdGl2ZSA9ICh0YWcgJiAweDIwKSA9PT0gMDtcblxuICAvLyBNdWx0aS1vY3RldCB0YWcgLSBsb2FkXG4gIGlmICgodGFnICYgMHgxZikgPT09IDB4MWYpIHtcbiAgICB2YXIgb2N0ID0gdGFnO1xuICAgIHRhZyA9IDA7XG4gICAgd2hpbGUgKChvY3QgJiAweDgwKSA9PT0gMHg4MCkge1xuICAgICAgb2N0ID0gYnVmLnJlYWRVSW50OChmYWlsKTtcbiAgICAgIGlmIChidWYuaXNFcnJvcihvY3QpKVxuICAgICAgICByZXR1cm4gb2N0O1xuXG4gICAgICB0YWcgPDw9IDc7XG4gICAgICB0YWcgfD0gb2N0ICYgMHg3ZjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGFnICY9IDB4MWY7XG4gIH1cbiAgdmFyIHRhZ1N0ciA9IGRlci50YWdbdGFnXTtcblxuICByZXR1cm4ge1xuICAgIGNsczogY2xzLFxuICAgIHByaW1pdGl2ZTogcHJpbWl0aXZlLFxuICAgIHRhZzogdGFnLFxuICAgIHRhZ1N0cjogdGFnU3RyXG4gIH07XG59XG5cbmZ1bmN0aW9uIGRlckRlY29kZUxlbihidWYsIHByaW1pdGl2ZSwgZmFpbCkge1xuICB2YXIgbGVuID0gYnVmLnJlYWRVSW50OChmYWlsKTtcbiAgaWYgKGJ1Zi5pc0Vycm9yKGxlbikpXG4gICAgcmV0dXJuIGxlbjtcblxuICAvLyBJbmRlZmluaXRlIGZvcm1cbiAgaWYgKCFwcmltaXRpdmUgJiYgbGVuID09PSAweDgwKVxuICAgIHJldHVybiBudWxsO1xuXG4gIC8vIERlZmluaXRlIGZvcm1cbiAgaWYgKChsZW4gJiAweDgwKSA9PT0gMCkge1xuICAgIC8vIFNob3J0IGZvcm1cbiAgICByZXR1cm4gbGVuO1xuICB9XG5cbiAgLy8gTG9uZyBmb3JtXG4gIHZhciBudW0gPSBsZW4gJiAweDdmO1xuICBpZiAobnVtID49IDQpXG4gICAgcmV0dXJuIGJ1Zi5lcnJvcignbGVuZ3RoIG9jdGVjdCBpcyB0b28gbG9uZycpO1xuXG4gIGxlbiA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtOyBpKyspIHtcbiAgICBsZW4gPDw9IDg7XG4gICAgdmFyIGogPSBidWYucmVhZFVJbnQ4KGZhaWwpO1xuICAgIGlmIChidWYuaXNFcnJvcihqKSlcbiAgICAgIHJldHVybiBqO1xuICAgIGxlbiB8PSBqO1xuICB9XG5cbiAgcmV0dXJuIGxlbjtcbn1cbiIsInZhciBjb25zdGFudHMgPSBleHBvcnRzO1xuXG4vLyBIZWxwZXJcbmNvbnN0YW50cy5fcmV2ZXJzZSA9IGZ1bmN0aW9uIHJldmVyc2UobWFwKSB7XG4gIHZhciByZXMgPSB7fTtcblxuICBPYmplY3Qua2V5cyhtYXApLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgLy8gQ29udmVydCBrZXkgdG8gaW50ZWdlciBpZiBpdCBpcyBzdHJpbmdpZmllZFxuICAgIGlmICgoa2V5IHwgMCkgPT0ga2V5KVxuICAgICAga2V5ID0ga2V5IHwgMDtcblxuICAgIHZhciB2YWx1ZSA9IG1hcFtrZXldO1xuICAgIHJlc1t2YWx1ZV0gPSBrZXk7XG4gIH0pO1xuXG4gIHJldHVybiByZXM7XG59O1xuXG5jb25zdGFudHMuZGVyID0gcmVxdWlyZSgnLi9kZXInKTtcbiIsInZhciBjb25zdGFudHMgPSByZXF1aXJlKCcuLi9jb25zdGFudHMnKTtcblxuZXhwb3J0cy50YWdDbGFzcyA9IHtcbiAgMDogJ3VuaXZlcnNhbCcsXG4gIDE6ICdhcHBsaWNhdGlvbicsXG4gIDI6ICdjb250ZXh0JyxcbiAgMzogJ3ByaXZhdGUnXG59O1xuZXhwb3J0cy50YWdDbGFzc0J5TmFtZSA9IGNvbnN0YW50cy5fcmV2ZXJzZShleHBvcnRzLnRhZ0NsYXNzKTtcblxuZXhwb3J0cy50YWcgPSB7XG4gIDB4MDA6ICdlbmQnLFxuICAweDAxOiAnYm9vbCcsXG4gIDB4MDI6ICdpbnQnLFxuICAweDAzOiAnYml0c3RyJyxcbiAgMHgwNDogJ29jdHN0cicsXG4gIDB4MDU6ICdudWxsXycsXG4gIDB4MDY6ICdvYmppZCcsXG4gIDB4MDc6ICdvYmpEZXNjJyxcbiAgMHgwODogJ2V4dGVybmFsJyxcbiAgMHgwOTogJ3JlYWwnLFxuICAweDBhOiAnZW51bScsXG4gIDB4MGI6ICdlbWJlZCcsXG4gIDB4MGM6ICd1dGY4c3RyJyxcbiAgMHgwZDogJ3JlbGF0aXZlT2lkJyxcbiAgMHgxMDogJ3NlcScsXG4gIDB4MTE6ICdzZXQnLFxuICAweDEyOiAnbnVtc3RyJyxcbiAgMHgxMzogJ3ByaW50c3RyJyxcbiAgMHgxNDogJ3Q2MXN0cicsXG4gIDB4MTU6ICd2aWRlb3N0cicsXG4gIDB4MTY6ICdpYTVzdHInLFxuICAweDE3OiAndXRjdGltZScsXG4gIDB4MTg6ICdnZW50aW1lJyxcbiAgMHgxOTogJ2dyYXBoc3RyJyxcbiAgMHgxYTogJ2lzbzY0NnN0cicsXG4gIDB4MWI6ICdnZW5zdHInLFxuICAweDFjOiAndW5pc3RyJyxcbiAgMHgxZDogJ2NoYXJzdHInLFxuICAweDFlOiAnYm1wc3RyJ1xufTtcbmV4cG9ydHMudGFnQnlOYW1lID0gY29uc3RhbnRzLl9yZXZlcnNlKGV4cG9ydHMudGFnKTtcbiIsInZhciBiYXNlID0gZXhwb3J0cztcblxuYmFzZS5SZXBvcnRlciA9IHJlcXVpcmUoJy4vcmVwb3J0ZXInKS5SZXBvcnRlcjtcbmJhc2UuRGVjb2RlckJ1ZmZlciA9IHJlcXVpcmUoJy4vYnVmZmVyJykuRGVjb2RlckJ1ZmZlcjtcbmJhc2UuRW5jb2RlckJ1ZmZlciA9IHJlcXVpcmUoJy4vYnVmZmVyJykuRW5jb2RlckJ1ZmZlcjtcbmJhc2UuTm9kZSA9IHJlcXVpcmUoJy4vbm9kZScpO1xuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxuZnVuY3Rpb24gUmVwb3J0ZXIob3B0aW9ucykge1xuICB0aGlzLl9yZXBvcnRlclN0YXRlID0ge1xuICAgIG9iajogbnVsbCxcbiAgICBwYXRoOiBbXSxcbiAgICBvcHRpb25zOiBvcHRpb25zIHx8IHt9LFxuICAgIGVycm9yczogW11cbiAgfTtcbn1cbmV4cG9ydHMuUmVwb3J0ZXIgPSBSZXBvcnRlcjtcblxuUmVwb3J0ZXIucHJvdG90eXBlLmlzRXJyb3IgPSBmdW5jdGlvbiBpc0Vycm9yKG9iaikge1xuICByZXR1cm4gb2JqIGluc3RhbmNlb2YgUmVwb3J0ZXJFcnJvcjtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gc2F2ZSgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICByZXR1cm4geyBvYmo6IHN0YXRlLm9iaiwgcGF0aExlbjogc3RhdGUucGF0aC5sZW5ndGggfTtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5yZXN0b3JlID0gZnVuY3Rpb24gcmVzdG9yZShkYXRhKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgc3RhdGUub2JqID0gZGF0YS5vYmo7XG4gIHN0YXRlLnBhdGggPSBzdGF0ZS5wYXRoLnNsaWNlKDAsIGRhdGEucGF0aExlbik7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUuZW50ZXJLZXkgPSBmdW5jdGlvbiBlbnRlcktleShrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX3JlcG9ydGVyU3RhdGUucGF0aC5wdXNoKGtleSk7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUubGVhdmVLZXkgPSBmdW5jdGlvbiBsZWF2ZUtleShpbmRleCwga2V5LCB2YWx1ZSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuXG4gIHN0YXRlLnBhdGggPSBzdGF0ZS5wYXRoLnNsaWNlKDAsIGluZGV4IC0gMSk7XG4gIGlmIChzdGF0ZS5vYmogIT09IG51bGwpXG4gICAgc3RhdGUub2JqW2tleV0gPSB2YWx1ZTtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5lbnRlck9iamVjdCA9IGZ1bmN0aW9uIGVudGVyT2JqZWN0KCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuXG4gIHZhciBwcmV2ID0gc3RhdGUub2JqO1xuICBzdGF0ZS5vYmogPSB7fTtcbiAgcmV0dXJuIHByZXY7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUubGVhdmVPYmplY3QgPSBmdW5jdGlvbiBsZWF2ZU9iamVjdChwcmV2KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgdmFyIG5vdyA9IHN0YXRlLm9iajtcbiAgc3RhdGUub2JqID0gcHJldjtcbiAgcmV0dXJuIG5vdztcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIGVycm9yKG1zZykge1xuICB2YXIgZXJyO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuXG4gIHZhciBpbmhlcml0ZWQgPSBtc2cgaW5zdGFuY2VvZiBSZXBvcnRlckVycm9yO1xuICBpZiAoaW5oZXJpdGVkKSB7XG4gICAgZXJyID0gbXNnO1xuICB9IGVsc2Uge1xuICAgIGVyciA9IG5ldyBSZXBvcnRlckVycm9yKHN0YXRlLnBhdGgubWFwKGZ1bmN0aW9uKGVsZW0pIHtcbiAgICAgIHJldHVybiAnWycgKyBKU09OLnN0cmluZ2lmeShlbGVtKSArICddJztcbiAgICB9KS5qb2luKCcnKSwgbXNnLm1lc3NhZ2UgfHwgbXNnLCBtc2cuc3RhY2spO1xuICB9XG5cbiAgaWYgKCFzdGF0ZS5vcHRpb25zLnBhcnRpYWwpXG4gICAgdGhyb3cgZXJyO1xuXG4gIGlmICghaW5oZXJpdGVkKVxuICAgIHN0YXRlLmVycm9ycy5wdXNoKGVycik7XG5cbiAgcmV0dXJuIGVycjtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS53cmFwUmVzdWx0ID0gZnVuY3Rpb24gd3JhcFJlc3VsdChyZXN1bHQpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcbiAgaWYgKCFzdGF0ZS5vcHRpb25zLnBhcnRpYWwpXG4gICAgcmV0dXJuIHJlc3VsdDtcblxuICByZXR1cm4ge1xuICAgIHJlc3VsdDogdGhpcy5pc0Vycm9yKHJlc3VsdCkgPyBudWxsIDogcmVzdWx0LFxuICAgIGVycm9yczogc3RhdGUuZXJyb3JzXG4gIH07XG59O1xuXG5mdW5jdGlvbiBSZXBvcnRlckVycm9yKHBhdGgsIG1zZykge1xuICB0aGlzLnBhdGggPSBwYXRoO1xuICB0aGlzLnJldGhyb3cobXNnKTtcbn07XG5pbmhlcml0cyhSZXBvcnRlckVycm9yLCBFcnJvcik7XG5cblJlcG9ydGVyRXJyb3IucHJvdG90eXBlLnJldGhyb3cgPSBmdW5jdGlvbiByZXRocm93KG1zZykge1xuICB0aGlzLm1lc3NhZ2UgPSBtc2cgKyAnIGF0OiAnICsgKHRoaXMucGF0aCB8fCAnKHNoYWxsb3cpJyk7XG4gIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIFJlcG9ydGVyRXJyb3IpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcbiIsInZhciBSZXBvcnRlciA9IHJlcXVpcmUoJy4uL2Jhc2UnKS5SZXBvcnRlcjtcbnZhciBFbmNvZGVyQnVmZmVyID0gcmVxdWlyZSgnLi4vYmFzZScpLkVuY29kZXJCdWZmZXI7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG4vLyBTdXBwb3J0ZWQgdGFnc1xudmFyIHRhZ3MgPSBbXG4gICdzZXEnLCAnc2Vxb2YnLCAnc2V0JywgJ3NldG9mJywgJ29jdHN0cicsICdiaXRzdHInLCAnb2JqaWQnLCAnYm9vbCcsXG4gICdnZW50aW1lJywgJ3V0Y3RpbWUnLCAnbnVsbF8nLCAnZW51bScsICdpbnQnLCAnaWE1c3RyJywgJ3V0ZjhzdHInXG5dO1xuXG4vLyBQdWJsaWMgbWV0aG9kcyBsaXN0XG52YXIgbWV0aG9kcyA9IFtcbiAgJ2tleScsICdvYmonLCAndXNlJywgJ29wdGlvbmFsJywgJ2V4cGxpY2l0JywgJ2ltcGxpY2l0JywgJ2RlZicsICdjaG9pY2UnLFxuICAnYW55J1xuXS5jb25jYXQodGFncyk7XG5cbi8vIE92ZXJyaWRlZCBtZXRob2RzIGxpc3RcbnZhciBvdmVycmlkZWQgPSBbXG4gICdfcGVla1RhZycsICdfZGVjb2RlVGFnJywgJ191c2UnLFxuICAnX2RlY29kZVN0cicsICdfZGVjb2RlT2JqaWQnLCAnX2RlY29kZVRpbWUnLFxuICAnX2RlY29kZU51bGwnLCAnX2RlY29kZUludCcsICdfZGVjb2RlQm9vbCcsICdfZGVjb2RlTGlzdCcsXG5cbiAgJ19lbmNvZGVDb21wb3NpdGUnLCAnX2VuY29kZVN0cicsICdfZW5jb2RlT2JqaWQnLCAnX2VuY29kZVRpbWUnLFxuICAnX2VuY29kZU51bGwnLCAnX2VuY29kZUludCcsICdfZW5jb2RlQm9vbCdcbl07XG5cbmZ1bmN0aW9uIE5vZGUoZW5jLCBwYXJlbnQpIHtcbiAgdmFyIHN0YXRlID0ge307XG4gIHRoaXMuX2Jhc2VTdGF0ZSA9IHN0YXRlO1xuXG4gIHN0YXRlLmVuYyA9IGVuYztcblxuICBzdGF0ZS5wYXJlbnQgPSBwYXJlbnQgfHwgbnVsbDtcbiAgc3RhdGUuY2hpbGRyZW4gPSBudWxsO1xuXG4gIC8vIFN0YXRlXG4gIHN0YXRlLnRhZyA9IG51bGw7XG4gIHN0YXRlLmFyZ3MgPSBudWxsO1xuICBzdGF0ZS5yZXZlcnNlQXJncyA9IG51bGw7XG4gIHN0YXRlLmNob2ljZSA9IG51bGw7XG4gIHN0YXRlLm9wdGlvbmFsID0gZmFsc2U7XG4gIHN0YXRlLmFueSA9IGZhbHNlO1xuICBzdGF0ZS5vYmogPSBmYWxzZTtcbiAgc3RhdGUudXNlID0gbnVsbDtcbiAgc3RhdGUudXNlRGVjb2RlciA9IG51bGw7XG4gIHN0YXRlLmtleSA9IG51bGw7XG4gIHN0YXRlWydkZWZhdWx0J10gPSBudWxsO1xuICBzdGF0ZS5leHBsaWNpdCA9IG51bGw7XG4gIHN0YXRlLmltcGxpY2l0ID0gbnVsbDtcblxuICAvLyBTaG91bGQgY3JlYXRlIG5ldyBpbnN0YW5jZSBvbiBlYWNoIG1ldGhvZFxuICBpZiAoIXN0YXRlLnBhcmVudCkge1xuICAgIHN0YXRlLmNoaWxkcmVuID0gW107XG4gICAgdGhpcy5fd3JhcCgpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IE5vZGU7XG5cbnZhciBzdGF0ZVByb3BzID0gW1xuICAnZW5jJywgJ3BhcmVudCcsICdjaGlsZHJlbicsICd0YWcnLCAnYXJncycsICdyZXZlcnNlQXJncycsICdjaG9pY2UnLFxuICAnb3B0aW9uYWwnLCAnYW55JywgJ29iaicsICd1c2UnLCAnYWx0ZXJlZFVzZScsICdrZXknLCAnZGVmYXVsdCcsICdleHBsaWNpdCcsXG4gICdpbXBsaWNpdCdcbl07XG5cbk5vZGUucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gY2xvbmUoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgdmFyIGNzdGF0ZSA9IHt9O1xuICBzdGF0ZVByb3BzLmZvckVhY2goZnVuY3Rpb24ocHJvcCkge1xuICAgIGNzdGF0ZVtwcm9wXSA9IHN0YXRlW3Byb3BdO1xuICB9KTtcbiAgdmFyIHJlcyA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGNzdGF0ZS5wYXJlbnQpO1xuICByZXMuX2Jhc2VTdGF0ZSA9IGNzdGF0ZTtcbiAgcmV0dXJuIHJlcztcbn07XG5cbk5vZGUucHJvdG90eXBlLl93cmFwID0gZnVuY3Rpb24gd3JhcCgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICBtZXRob2RzLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgdGhpc1ttZXRob2RdID0gZnVuY3Rpb24gX3dyYXBwZWRNZXRob2QoKSB7XG4gICAgICB2YXIgY2xvbmUgPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzKTtcbiAgICAgIHN0YXRlLmNoaWxkcmVuLnB1c2goY2xvbmUpO1xuICAgICAgcmV0dXJuIGNsb25lW21ldGhvZF0uYXBwbHkoY2xvbmUsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfSwgdGhpcyk7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQoYm9keSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlLnBhcmVudCA9PT0gbnVsbCk7XG4gIGJvZHkuY2FsbCh0aGlzKTtcblxuICAvLyBGaWx0ZXIgY2hpbGRyZW5cbiAgc3RhdGUuY2hpbGRyZW4gPSBzdGF0ZS5jaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24oY2hpbGQpIHtcbiAgICByZXR1cm4gY2hpbGQuX2Jhc2VTdGF0ZS5wYXJlbnQgPT09IHRoaXM7XG4gIH0sIHRoaXMpO1xuICBhc3NlcnQuZXF1YWwoc3RhdGUuY2hpbGRyZW4ubGVuZ3RoLCAxLCAnUm9vdCBub2RlIGNhbiBoYXZlIG9ubHkgb25lIGNoaWxkJyk7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fdXNlQXJncyA9IGZ1bmN0aW9uIHVzZUFyZ3MoYXJncykge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgLy8gRmlsdGVyIGNoaWxkcmVuIGFuZCBhcmdzXG4gIHZhciBjaGlsZHJlbiA9IGFyZ3MuZmlsdGVyKGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBhcmcgaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yO1xuICB9LCB0aGlzKTtcbiAgYXJncyA9IGFyZ3MuZmlsdGVyKGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiAhKGFyZyBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3IpO1xuICB9LCB0aGlzKTtcblxuICBpZiAoY2hpbGRyZW4ubGVuZ3RoICE9PSAwKSB7XG4gICAgYXNzZXJ0KHN0YXRlLmNoaWxkcmVuID09PSBudWxsKTtcbiAgICBzdGF0ZS5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuXG4gICAgLy8gUmVwbGFjZSBwYXJlbnQgdG8gbWFpbnRhaW4gYmFja3dhcmQgbGlua1xuICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgIGNoaWxkLl9iYXNlU3RhdGUucGFyZW50ID0gdGhpcztcbiAgICB9LCB0aGlzKTtcbiAgfVxuICBpZiAoYXJncy5sZW5ndGggIT09IDApIHtcbiAgICBhc3NlcnQoc3RhdGUuYXJncyA9PT0gbnVsbCk7XG4gICAgc3RhdGUuYXJncyA9IGFyZ3M7XG4gICAgc3RhdGUucmV2ZXJzZUFyZ3MgPSBhcmdzLm1hcChmdW5jdGlvbihhcmcpIHtcbiAgICAgIGlmICh0eXBlb2YgYXJnICE9PSAnb2JqZWN0JyB8fCBhcmcuY29uc3RydWN0b3IgIT09IE9iamVjdClcbiAgICAgICAgcmV0dXJuIGFyZztcblxuICAgICAgdmFyIHJlcyA9IHt9O1xuICAgICAgT2JqZWN0LmtleXMoYXJnKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBpZiAoa2V5ID09IChrZXkgfCAwKSlcbiAgICAgICAgICBrZXkgfD0gMDtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJnW2tleV07XG4gICAgICAgIHJlc1t2YWx1ZV0gPSBrZXk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfSk7XG4gIH1cbn07XG5cbi8vXG4vLyBPdmVycmlkZWQgbWV0aG9kc1xuLy9cblxub3ZlcnJpZGVkLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gIE5vZGUucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbiBfb3ZlcnJpZGVkKCkge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgICB0aHJvdyBuZXcgRXJyb3IobWV0aG9kICsgJyBub3QgaW1wbGVtZW50ZWQgZm9yIGVuY29kaW5nOiAnICsgc3RhdGUuZW5jKTtcbiAgfTtcbn0pO1xuXG4vL1xuLy8gUHVibGljIG1ldGhvZHNcbi8vXG5cbnRhZ3MuZm9yRWFjaChmdW5jdGlvbih0YWcpIHtcbiAgTm9kZS5wcm90b3R5cGVbdGFnXSA9IGZ1bmN0aW9uIF90YWdNZXRob2QoKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcblxuICAgIGFzc2VydChzdGF0ZS50YWcgPT09IG51bGwpO1xuICAgIHN0YXRlLnRhZyA9IHRhZztcblxuICAgIHRoaXMuX3VzZUFyZ3MoYXJncyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbn0pO1xuXG5Ob2RlLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoaXRlbSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlLnVzZSA9PT0gbnVsbCk7XG4gIHN0YXRlLnVzZSA9IGl0ZW07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5vcHRpb25hbCA9IGZ1bmN0aW9uIG9wdGlvbmFsKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgc3RhdGUub3B0aW9uYWwgPSB0cnVlO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuZGVmID0gZnVuY3Rpb24gZGVmKHZhbCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlWydkZWZhdWx0J10gPT09IG51bGwpO1xuICBzdGF0ZVsnZGVmYXVsdCddID0gdmFsO1xuICBzdGF0ZS5vcHRpb25hbCA9IHRydWU7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5leHBsaWNpdCA9IGZ1bmN0aW9uIGV4cGxpY2l0KG51bSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlLmV4cGxpY2l0ID09PSBudWxsICYmIHN0YXRlLmltcGxpY2l0ID09PSBudWxsKTtcbiAgc3RhdGUuZXhwbGljaXQgPSBudW07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5pbXBsaWNpdCA9IGZ1bmN0aW9uIGltcGxpY2l0KG51bSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlLmV4cGxpY2l0ID09PSBudWxsICYmIHN0YXRlLmltcGxpY2l0ID09PSBudWxsKTtcbiAgc3RhdGUuaW1wbGljaXQgPSBudW07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5vYmogPSBmdW5jdGlvbiBvYmooKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gIHN0YXRlLm9iaiA9IHRydWU7XG5cbiAgaWYgKGFyZ3MubGVuZ3RoICE9PSAwKVxuICAgIHRoaXMuX3VzZUFyZ3MoYXJncyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5rZXkgPSBmdW5jdGlvbiBrZXkobmV3S2V5KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBhc3NlcnQoc3RhdGUua2V5ID09PSBudWxsKTtcbiAgc3RhdGUua2V5ID0gbmV3S2V5O1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuYW55ID0gZnVuY3Rpb24gYW55KCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgc3RhdGUuYW55ID0gdHJ1ZTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk5vZGUucHJvdG90eXBlLmNob2ljZSA9IGZ1bmN0aW9uIGNob2ljZShvYmopIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZS5jaG9pY2UgPT09IG51bGwpO1xuICBzdGF0ZS5jaG9pY2UgPSBvYmo7XG4gIHRoaXMuX3VzZUFyZ3MoT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9KSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vL1xuLy8gRGVjb2Rpbmdcbi8vXG5cbk5vZGUucHJvdG90eXBlLl9kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUoaW5wdXQpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIC8vIERlY29kZSByb290IG5vZGVcbiAgaWYgKHN0YXRlLnBhcmVudCA9PT0gbnVsbClcbiAgICByZXR1cm4gaW5wdXQud3JhcFJlc3VsdChzdGF0ZS5jaGlsZHJlblswXS5fZGVjb2RlKGlucHV0KSk7XG5cbiAgdmFyIHJlc3VsdCA9IHN0YXRlWydkZWZhdWx0J107XG4gIHZhciBwcmVzZW50ID0gdHJ1ZTtcblxuICB2YXIgcHJldktleTtcbiAgaWYgKHN0YXRlLmtleSAhPT0gbnVsbClcbiAgICBwcmV2S2V5ID0gaW5wdXQuZW50ZXJLZXkoc3RhdGUua2V5KTtcblxuICAvLyBDaGVjayBpZiB0YWcgaXMgdGhlcmVcbiAgaWYgKHN0YXRlLm9wdGlvbmFsKSB7XG4gICAgdmFyIHRhZyA9IG51bGw7XG4gICAgaWYgKHN0YXRlLmV4cGxpY2l0ICE9PSBudWxsKVxuICAgICAgdGFnID0gc3RhdGUuZXhwbGljaXQ7XG4gICAgZWxzZSBpZiAoc3RhdGUuaW1wbGljaXQgIT09IG51bGwpXG4gICAgICB0YWcgPSBzdGF0ZS5pbXBsaWNpdDtcbiAgICBlbHNlIGlmIChzdGF0ZS50YWcgIT09IG51bGwpXG4gICAgICB0YWcgPSBzdGF0ZS50YWc7XG5cbiAgICBpZiAodGFnID09PSBudWxsICYmICFzdGF0ZS5hbnkpIHtcbiAgICAgIC8vIFRyaWFsIGFuZCBFcnJvclxuICAgICAgdmFyIHNhdmUgPSBpbnB1dC5zYXZlKCk7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoc3RhdGUuY2hvaWNlID09PSBudWxsKVxuICAgICAgICAgIHRoaXMuX2RlY29kZUdlbmVyaWMoc3RhdGUudGFnLCBpbnB1dCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICB0aGlzLl9kZWNvZGVDaG9pY2UoaW5wdXQpO1xuICAgICAgICBwcmVzZW50ID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcHJlc2VudCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaW5wdXQucmVzdG9yZShzYXZlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJlc2VudCA9IHRoaXMuX3BlZWtUYWcoaW5wdXQsIHRhZywgc3RhdGUuYW55KTtcblxuICAgICAgaWYgKGlucHV0LmlzRXJyb3IocHJlc2VudCkpXG4gICAgICAgIHJldHVybiBwcmVzZW50O1xuICAgIH1cbiAgfVxuXG4gIC8vIFB1c2ggb2JqZWN0IG9uIHN0YWNrXG4gIHZhciBwcmV2T2JqO1xuICBpZiAoc3RhdGUub2JqICYmIHByZXNlbnQpXG4gICAgcHJldk9iaiA9IGlucHV0LmVudGVyT2JqZWN0KCk7XG5cbiAgaWYgKHByZXNlbnQpIHtcbiAgICAvLyBVbndyYXAgZXhwbGljaXQgdmFsdWVzXG4gICAgaWYgKHN0YXRlLmV4cGxpY2l0ICE9PSBudWxsKSB7XG4gICAgICB2YXIgZXhwbGljaXQgPSB0aGlzLl9kZWNvZGVUYWcoaW5wdXQsIHN0YXRlLmV4cGxpY2l0KTtcbiAgICAgIGlmIChpbnB1dC5pc0Vycm9yKGV4cGxpY2l0KSlcbiAgICAgICAgcmV0dXJuIGV4cGxpY2l0O1xuICAgICAgaW5wdXQgPSBleHBsaWNpdDtcbiAgICB9XG5cbiAgICAvLyBVbndyYXAgaW1wbGljaXQgYW5kIG5vcm1hbCB2YWx1ZXNcbiAgICBpZiAoc3RhdGUudXNlID09PSBudWxsICYmIHN0YXRlLmNob2ljZSA9PT0gbnVsbCkge1xuICAgICAgaWYgKHN0YXRlLmFueSlcbiAgICAgICAgdmFyIHNhdmUgPSBpbnB1dC5zYXZlKCk7XG4gICAgICB2YXIgYm9keSA9IHRoaXMuX2RlY29kZVRhZyhcbiAgICAgICAgaW5wdXQsXG4gICAgICAgIHN0YXRlLmltcGxpY2l0ICE9PSBudWxsID8gc3RhdGUuaW1wbGljaXQgOiBzdGF0ZS50YWcsXG4gICAgICAgIHN0YXRlLmFueVxuICAgICAgKTtcbiAgICAgIGlmIChpbnB1dC5pc0Vycm9yKGJvZHkpKVxuICAgICAgICByZXR1cm4gYm9keTtcblxuICAgICAgaWYgKHN0YXRlLmFueSlcbiAgICAgICAgcmVzdWx0ID0gaW5wdXQucmF3KHNhdmUpO1xuICAgICAgZWxzZVxuICAgICAgICBpbnB1dCA9IGJvZHk7XG4gICAgfVxuXG4gICAgLy8gU2VsZWN0IHByb3BlciBtZXRob2QgZm9yIHRhZ1xuICAgIGlmIChzdGF0ZS5hbnkpXG4gICAgICByZXN1bHQgPSByZXN1bHQ7XG4gICAgZWxzZSBpZiAoc3RhdGUuY2hvaWNlID09PSBudWxsKVxuICAgICAgcmVzdWx0ID0gdGhpcy5fZGVjb2RlR2VuZXJpYyhzdGF0ZS50YWcsIGlucHV0KTtcbiAgICBlbHNlXG4gICAgICByZXN1bHQgPSB0aGlzLl9kZWNvZGVDaG9pY2UoaW5wdXQpO1xuXG4gICAgaWYgKGlucHV0LmlzRXJyb3IocmVzdWx0KSlcbiAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICAvLyBEZWNvZGUgY2hpbGRyZW5cbiAgICBpZiAoIXN0YXRlLmFueSAmJiBzdGF0ZS5jaG9pY2UgPT09IG51bGwgJiYgc3RhdGUuY2hpbGRyZW4gIT09IG51bGwpIHtcbiAgICAgIHZhciBmYWlsID0gc3RhdGUuY2hpbGRyZW4uc29tZShmdW5jdGlvbiBkZWNvZGVDaGlsZHJlbihjaGlsZCkge1xuICAgICAgICAvLyBOT1RFOiBXZSBhcmUgaWdub3JpbmcgZXJyb3JzIGhlcmUsIHRvIGxldCBwYXJzZXIgY29udGludWUgd2l0aCBvdGhlclxuICAgICAgICAvLyBwYXJ0cyBvZiBlbmNvZGVkIGRhdGFcbiAgICAgICAgY2hpbGQuX2RlY29kZShpbnB1dCk7XG4gICAgICB9KTtcbiAgICAgIGlmIChmYWlsKVxuICAgICAgICByZXR1cm4gZXJyO1xuICAgIH1cbiAgfVxuXG4gIC8vIFBvcCBvYmplY3RcbiAgaWYgKHN0YXRlLm9iaiAmJiBwcmVzZW50KVxuICAgIHJlc3VsdCA9IGlucHV0LmxlYXZlT2JqZWN0KHByZXZPYmopO1xuXG4gIC8vIFNldCBrZXlcbiAgaWYgKHN0YXRlLmtleSAhPT0gbnVsbCAmJiAocmVzdWx0ICE9PSBudWxsIHx8IHByZXNlbnQgPT09IHRydWUpKVxuICAgIGlucHV0LmxlYXZlS2V5KHByZXZLZXksIHN0YXRlLmtleSwgcmVzdWx0KTtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2RlY29kZUdlbmVyaWMgPSBmdW5jdGlvbiBkZWNvZGVHZW5lcmljKHRhZywgaW5wdXQpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGlmICh0YWcgPT09ICdzZXEnIHx8IHRhZyA9PT0gJ3NldCcpXG4gICAgcmV0dXJuIG51bGw7XG4gIGlmICh0YWcgPT09ICdzZXFvZicgfHwgdGFnID09PSAnc2V0b2YnKVxuICAgIHJldHVybiB0aGlzLl9kZWNvZGVMaXN0KGlucHV0LCB0YWcsIHN0YXRlLmFyZ3NbMF0pO1xuICBlbHNlIGlmICh0YWcgPT09ICdvY3RzdHInIHx8IHRhZyA9PT0gJ2JpdHN0cicpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZVN0cihpbnB1dCwgdGFnKTtcbiAgZWxzZSBpZiAodGFnID09PSAnaWE1c3RyJyB8fCB0YWcgPT09ICd1dGY4c3RyJylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlU3RyKGlucHV0LCB0YWcpO1xuICBlbHNlIGlmICh0YWcgPT09ICdvYmppZCcgJiYgc3RhdGUuYXJncylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlT2JqaWQoaW5wdXQsIHN0YXRlLmFyZ3NbMF0sIHN0YXRlLmFyZ3NbMV0pO1xuICBlbHNlIGlmICh0YWcgPT09ICdvYmppZCcpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZU9iamlkKGlucHV0LCBudWxsLCBudWxsKTtcbiAgZWxzZSBpZiAodGFnID09PSAnZ2VudGltZScgfHwgdGFnID09PSAndXRjdGltZScpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZVRpbWUoaW5wdXQsIHRhZyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ251bGxfJylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlTnVsbChpbnB1dCk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ2Jvb2wnKVxuICAgIHJldHVybiB0aGlzLl9kZWNvZGVCb29sKGlucHV0KTtcbiAgZWxzZSBpZiAodGFnID09PSAnaW50JyB8fCB0YWcgPT09ICdlbnVtJylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlSW50KGlucHV0LCBzdGF0ZS5hcmdzICYmIHN0YXRlLmFyZ3NbMF0pO1xuICBlbHNlIGlmIChzdGF0ZS51c2UgIT09IG51bGwpXG4gICAgcmV0dXJuIHRoaXMuX2dldFVzZShzdGF0ZS51c2UsIGlucHV0Ll9yZXBvcnRlclN0YXRlLm9iaikuX2RlY29kZShpbnB1dCk7XG4gIGVsc2VcbiAgICByZXR1cm4gaW5wdXQuZXJyb3IoJ3Vua25vd24gdGFnOiAnICsgdGFnKTtcblxuICByZXR1cm4gbnVsbDtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9nZXRVc2UgPSBmdW5jdGlvbiBfZ2V0VXNlKGVudGl0eSwgb2JqKSB7XG5cbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICAvLyBDcmVhdGUgYWx0ZXJlZCB1c2UgZGVjb2RlciBpZiBpbXBsaWNpdCBpcyBzZXRcbiAgc3RhdGUudXNlRGVjb2RlciA9IHRoaXMuX3VzZShlbnRpdHksIG9iaik7XG4gIGFzc2VydChzdGF0ZS51c2VEZWNvZGVyLl9iYXNlU3RhdGUucGFyZW50ID09PSBudWxsKTtcbiAgc3RhdGUudXNlRGVjb2RlciA9IHN0YXRlLnVzZURlY29kZXIuX2Jhc2VTdGF0ZS5jaGlsZHJlblswXTtcbiAgaWYgKHN0YXRlLmltcGxpY2l0ICE9PSBzdGF0ZS51c2VEZWNvZGVyLl9iYXNlU3RhdGUuaW1wbGljaXQpIHtcbiAgICBzdGF0ZS51c2VEZWNvZGVyID0gc3RhdGUudXNlRGVjb2Rlci5jbG9uZSgpO1xuICAgIHN0YXRlLnVzZURlY29kZXIuX2Jhc2VTdGF0ZS5pbXBsaWNpdCA9IHN0YXRlLmltcGxpY2l0O1xuICB9XG4gIHJldHVybiBzdGF0ZS51c2VEZWNvZGVyO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2RlY29kZUNob2ljZSA9IGZ1bmN0aW9uIGRlY29kZUNob2ljZShpbnB1dCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gIHZhciByZXN1bHQgPSBudWxsO1xuICB2YXIgbWF0Y2ggPSBmYWxzZTtcblxuICBPYmplY3Qua2V5cyhzdGF0ZS5jaG9pY2UpLnNvbWUoZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIHNhdmUgPSBpbnB1dC5zYXZlKCk7XG4gICAgdmFyIG5vZGUgPSBzdGF0ZS5jaG9pY2Vba2V5XTtcbiAgICB0cnkge1xuICAgICAgdmFyIHZhbHVlID0gbm9kZS5fZGVjb2RlKGlucHV0KTtcbiAgICAgIGlmIChpbnB1dC5pc0Vycm9yKHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICByZXN1bHQgPSB7IHR5cGU6IGtleSwgdmFsdWU6IHZhbHVlIH07XG4gICAgICBtYXRjaCA9IHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaW5wdXQucmVzdG9yZShzYXZlKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sIHRoaXMpO1xuXG4gIGlmICghbWF0Y2gpXG4gICAgcmV0dXJuIGlucHV0LmVycm9yKCdDaG9pY2Ugbm90IG1hdGNoZWQnKTtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy9cbi8vIEVuY29kaW5nXG4vL1xuXG5Ob2RlLnByb3RvdHlwZS5fY3JlYXRlRW5jb2RlckJ1ZmZlciA9IGZ1bmN0aW9uIGNyZWF0ZUVuY29kZXJCdWZmZXIoZGF0YSkge1xuICByZXR1cm4gbmV3IEVuY29kZXJCdWZmZXIoZGF0YSwgdGhpcy5yZXBvcnRlcik7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKGRhdGEsIHJlcG9ydGVyLCBwYXJlbnQpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICBpZiAoc3RhdGVbJ2RlZmF1bHQnXSAhPT0gbnVsbCAmJiBzdGF0ZVsnZGVmYXVsdCddID09PSBkYXRhKVxuICAgIHJldHVybjtcblxuICB2YXIgcmVzdWx0ID0gdGhpcy5fZW5jb2RlVmFsdWUoZGF0YSwgcmVwb3J0ZXIsIHBhcmVudCk7XG4gIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm47XG5cbiAgaWYgKHRoaXMuX3NraXBEZWZhdWx0KHJlc3VsdCwgcmVwb3J0ZXIsIHBhcmVudCkpXG4gICAgcmV0dXJuO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZW5jb2RlVmFsdWUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgcmVwb3J0ZXIsIHBhcmVudCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgLy8gRGVjb2RlIHJvb3Qgbm9kZVxuICBpZiAoc3RhdGUucGFyZW50ID09PSBudWxsKVxuICAgIHJldHVybiBzdGF0ZS5jaGlsZHJlblswXS5fZW5jb2RlKGRhdGEsIHJlcG9ydGVyIHx8IG5ldyBSZXBvcnRlcigpKTtcblxuICB2YXIgcmVzdWx0ID0gbnVsbDtcbiAgdmFyIHByZXNlbnQgPSB0cnVlO1xuXG4gIC8vIFNldCByZXBvcnRlciB0byBzaGFyZSBpdCB3aXRoIGEgY2hpbGQgY2xhc3NcbiAgdGhpcy5yZXBvcnRlciA9IHJlcG9ydGVyO1xuXG4gIC8vIENoZWNrIGlmIGRhdGEgaXMgdGhlcmVcbiAgaWYgKHN0YXRlLm9wdGlvbmFsICYmIGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChzdGF0ZVsnZGVmYXVsdCddICE9PSBudWxsKVxuICAgICAgZGF0YSA9IHN0YXRlWydkZWZhdWx0J11cbiAgICBlbHNlXG4gICAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3IgZXJyb3IgcmVwb3J0aW5nXG4gIHZhciBwcmV2S2V5O1xuXG4gIC8vIEVuY29kZSBjaGlsZHJlbiBmaXJzdFxuICB2YXIgY29udGVudCA9IG51bGw7XG4gIHZhciBwcmltaXRpdmUgPSBmYWxzZTtcbiAgaWYgKHN0YXRlLmFueSkge1xuICAgIC8vIEFueXRoaW5nIHRoYXQgd2FzIGdpdmVuIGlzIHRyYW5zbGF0ZWQgdG8gYnVmZmVyXG4gICAgcmVzdWx0ID0gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihkYXRhKTtcbiAgfSBlbHNlIGlmIChzdGF0ZS5jaG9pY2UpIHtcbiAgICByZXN1bHQgPSB0aGlzLl9lbmNvZGVDaG9pY2UoZGF0YSwgcmVwb3J0ZXIpO1xuICB9IGVsc2UgaWYgKHN0YXRlLmNoaWxkcmVuKSB7XG4gICAgY29udGVudCA9IHN0YXRlLmNoaWxkcmVuLm1hcChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkLl9iYXNlU3RhdGUudGFnID09PSAnbnVsbF8nKVxuICAgICAgICByZXR1cm4gY2hpbGQuX2VuY29kZShudWxsLCByZXBvcnRlciwgZGF0YSk7XG5cbiAgICAgIGlmIChjaGlsZC5fYmFzZVN0YXRlLmtleSA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdDaGlsZCBzaG91bGQgaGF2ZSBhIGtleScpO1xuICAgICAgdmFyIHByZXZLZXkgPSByZXBvcnRlci5lbnRlcktleShjaGlsZC5fYmFzZVN0YXRlLmtleSk7XG5cbiAgICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gJ29iamVjdCcpXG4gICAgICAgIHJldHVybiByZXBvcnRlci5lcnJvcignQ2hpbGQgZXhwZWN0ZWQsIGJ1dCBpbnB1dCBpcyBub3Qgb2JqZWN0Jyk7XG5cbiAgICAgIHZhciByZXMgPSBjaGlsZC5fZW5jb2RlKGRhdGFbY2hpbGQuX2Jhc2VTdGF0ZS5rZXldLCByZXBvcnRlciwgZGF0YSk7XG4gICAgICByZXBvcnRlci5sZWF2ZUtleShwcmV2S2V5KTtcblxuICAgICAgcmV0dXJuIHJlcztcbiAgICB9LCB0aGlzKS5maWx0ZXIoZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9KTtcblxuICAgIGNvbnRlbnQgPSB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKGNvbnRlbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmIChzdGF0ZS50YWcgPT09ICdzZXFvZicgfHwgc3RhdGUudGFnID09PSAnc2V0b2YnKSB7XG4gICAgICAvLyBUT0RPKGluZHV0bnkpOiB0aGlzIHNob3VsZCBiZSB0aHJvd24gb24gRFNMIGxldmVsXG4gICAgICBpZiAoIShzdGF0ZS5hcmdzICYmIHN0YXRlLmFyZ3MubGVuZ3RoID09PSAxKSlcbiAgICAgICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdUb28gbWFueSBhcmdzIGZvciA6ICcgKyBzdGF0ZS50YWcpO1xuXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkpXG4gICAgICAgIHJldHVybiByZXBvcnRlci5lcnJvcignc2Vxb2Yvc2V0b2YsIGJ1dCBkYXRhIGlzIG5vdCBBcnJheScpO1xuXG4gICAgICB2YXIgY2hpbGQgPSB0aGlzLmNsb25lKCk7XG4gICAgICBjaGlsZC5fYmFzZVN0YXRlLmltcGxpY2l0ID0gbnVsbDtcbiAgICAgIGNvbnRlbnQgPSB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKGRhdGEubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRVc2Uoc3RhdGUuYXJnc1swXSwgZGF0YSkuX2VuY29kZShpdGVtLCByZXBvcnRlcik7XG4gICAgICB9LCBjaGlsZCkpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUudXNlICE9PSBudWxsKSB7XG4gICAgICByZXN1bHQgPSB0aGlzLl9nZXRVc2Uoc3RhdGUudXNlLCBwYXJlbnQpLl9lbmNvZGUoZGF0YSwgcmVwb3J0ZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZW50ID0gdGhpcy5fZW5jb2RlUHJpbWl0aXZlKHN0YXRlLnRhZywgZGF0YSk7XG4gICAgICBwcmltaXRpdmUgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIEVuY29kZSBkYXRhIGl0c2VsZlxuICB2YXIgcmVzdWx0O1xuICBpZiAoIXN0YXRlLmFueSAmJiBzdGF0ZS5jaG9pY2UgPT09IG51bGwpIHtcbiAgICB2YXIgdGFnID0gc3RhdGUuaW1wbGljaXQgIT09IG51bGwgPyBzdGF0ZS5pbXBsaWNpdCA6IHN0YXRlLnRhZztcbiAgICB2YXIgY2xzID0gc3RhdGUuaW1wbGljaXQgPT09IG51bGwgPyAndW5pdmVyc2FsJyA6ICdjb250ZXh0JztcblxuICAgIGlmICh0YWcgPT09IG51bGwpIHtcbiAgICAgIGlmIChzdGF0ZS51c2UgPT09IG51bGwpXG4gICAgICAgIHJlcG9ydGVyLmVycm9yKCdUYWcgY291bGQgYmUgb21taXRlZCBvbmx5IGZvciAudXNlKCknKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHN0YXRlLnVzZSA9PT0gbnVsbClcbiAgICAgICAgcmVzdWx0ID0gdGhpcy5fZW5jb2RlQ29tcG9zaXRlKHRhZywgcHJpbWl0aXZlLCBjbHMsIGNvbnRlbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFdyYXAgaW4gZXhwbGljaXRcbiAgaWYgKHN0YXRlLmV4cGxpY2l0ICE9PSBudWxsKVxuICAgIHJlc3VsdCA9IHRoaXMuX2VuY29kZUNvbXBvc2l0ZShzdGF0ZS5leHBsaWNpdCwgZmFsc2UsICdjb250ZXh0JywgcmVzdWx0KTtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2VuY29kZUNob2ljZSA9IGZ1bmN0aW9uIGVuY29kZUNob2ljZShkYXRhLCByZXBvcnRlcikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgdmFyIG5vZGUgPSBzdGF0ZS5jaG9pY2VbZGF0YS50eXBlXTtcbiAgaWYgKCFub2RlKSB7XG4gICAgYXNzZXJ0KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgZGF0YS50eXBlICsgJyBub3QgZm91bmQgaW4gJyArXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShPYmplY3Qua2V5cyhzdGF0ZS5jaG9pY2UpKSk7XG4gIH1cbiAgcmV0dXJuIG5vZGUuX2VuY29kZShkYXRhLnZhbHVlLCByZXBvcnRlcik7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZW5jb2RlUHJpbWl0aXZlID0gZnVuY3Rpb24gZW5jb2RlUHJpbWl0aXZlKHRhZywgZGF0YSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgaWYgKHRhZyA9PT0gJ29jdHN0cicgfHwgdGFnID09PSAnYml0c3RyJyB8fCB0YWcgPT09ICdpYTVzdHInKVxuICAgIHJldHVybiB0aGlzLl9lbmNvZGVTdHIoZGF0YSwgdGFnKTtcbiAgZWxzZSBpZiAodGFnID09PSAndXRmOHN0cicpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZVN0cihkYXRhLCB0YWcpO1xuICBlbHNlIGlmICh0YWcgPT09ICdvYmppZCcgJiYgc3RhdGUuYXJncylcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlT2JqaWQoZGF0YSwgc3RhdGUucmV2ZXJzZUFyZ3NbMF0sIHN0YXRlLmFyZ3NbMV0pO1xuICBlbHNlIGlmICh0YWcgPT09ICdvYmppZCcpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZU9iamlkKGRhdGEsIG51bGwsIG51bGwpO1xuICBlbHNlIGlmICh0YWcgPT09ICdnZW50aW1lJyB8fCB0YWcgPT09ICd1dGN0aW1lJylcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlVGltZShkYXRhLCB0YWcpO1xuICBlbHNlIGlmICh0YWcgPT09ICdudWxsXycpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZU51bGwoKTtcbiAgZWxzZSBpZiAodGFnID09PSAnaW50JyB8fCB0YWcgPT09ICdlbnVtJylcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlSW50KGRhdGEsIHN0YXRlLmFyZ3MgJiYgc3RhdGUucmV2ZXJzZUFyZ3NbMF0pO1xuICBlbHNlIGlmICh0YWcgPT09ICdib29sJylcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlQm9vbChkYXRhKTtcbiAgZWxzZVxuICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgdGFnOiAnICsgdGFnKTtcbn07XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIFJlcG9ydGVyID0gcmVxdWlyZSgnLi4vYmFzZScpLlJlcG9ydGVyO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcblxuZnVuY3Rpb24gRGVjb2RlckJ1ZmZlcihiYXNlLCBvcHRpb25zKSB7XG4gIFJlcG9ydGVyLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJhc2UpKSB7XG4gICAgdGhpcy5lcnJvcignSW5wdXQgbm90IEJ1ZmZlcicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuYmFzZSA9IGJhc2U7XG4gIHRoaXMub2Zmc2V0ID0gMDtcbiAgdGhpcy5sZW5ndGggPSBiYXNlLmxlbmd0aDtcbn1cbmluaGVyaXRzKERlY29kZXJCdWZmZXIsIFJlcG9ydGVyKTtcbmV4cG9ydHMuRGVjb2RlckJ1ZmZlciA9IERlY29kZXJCdWZmZXI7XG5cbkRlY29kZXJCdWZmZXIucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbiBzYXZlKCkge1xuICByZXR1cm4geyBvZmZzZXQ6IHRoaXMub2Zmc2V0LCByZXBvcnRlcjogUmVwb3J0ZXIucHJvdG90eXBlLnNhdmUuY2FsbCh0aGlzKSB9O1xufTtcblxuRGVjb2RlckJ1ZmZlci5wcm90b3R5cGUucmVzdG9yZSA9IGZ1bmN0aW9uIHJlc3RvcmUoc2F2ZSkge1xuICAvLyBSZXR1cm4gc2tpcHBlZCBkYXRhXG4gIHZhciByZXMgPSBuZXcgRGVjb2RlckJ1ZmZlcih0aGlzLmJhc2UpO1xuICByZXMub2Zmc2V0ID0gc2F2ZS5vZmZzZXQ7XG4gIHJlcy5sZW5ndGggPSB0aGlzLm9mZnNldDtcblxuICB0aGlzLm9mZnNldCA9IHNhdmUub2Zmc2V0O1xuICBSZXBvcnRlci5wcm90b3R5cGUucmVzdG9yZS5jYWxsKHRoaXMsIHNhdmUucmVwb3J0ZXIpO1xuXG4gIHJldHVybiByZXM7XG59O1xuXG5EZWNvZGVyQnVmZmVyLnByb3RvdHlwZS5pc0VtcHR5ID0gZnVuY3Rpb24gaXNFbXB0eSgpIHtcbiAgcmV0dXJuIHRoaXMub2Zmc2V0ID09PSB0aGlzLmxlbmd0aDtcbn07XG5cbkRlY29kZXJCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OChmYWlsKSB7XG4gIGlmICh0aGlzLm9mZnNldCArIDEgPD0gdGhpcy5sZW5ndGgpXG4gICAgcmV0dXJuIHRoaXMuYmFzZS5yZWFkVUludDgodGhpcy5vZmZzZXQrKywgdHJ1ZSk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5lcnJvcihmYWlsIHx8ICdEZWNvZGVyQnVmZmVyIG92ZXJydW4nKTtcbn1cblxuRGVjb2RlckJ1ZmZlci5wcm90b3R5cGUuc2tpcCA9IGZ1bmN0aW9uIHNraXAoYnl0ZXMsIGZhaWwpIHtcbiAgaWYgKCEodGhpcy5vZmZzZXQgKyBieXRlcyA8PSB0aGlzLmxlbmd0aCkpXG4gICAgcmV0dXJuIHRoaXMuZXJyb3IoZmFpbCB8fCAnRGVjb2RlckJ1ZmZlciBvdmVycnVuJyk7XG5cbiAgdmFyIHJlcyA9IG5ldyBEZWNvZGVyQnVmZmVyKHRoaXMuYmFzZSk7XG5cbiAgLy8gU2hhcmUgcmVwb3J0ZXIgc3RhdGVcbiAgcmVzLl9yZXBvcnRlclN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICByZXMub2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gIHJlcy5sZW5ndGggPSB0aGlzLm9mZnNldCArIGJ5dGVzO1xuICB0aGlzLm9mZnNldCArPSBieXRlcztcbiAgcmV0dXJuIHJlcztcbn1cblxuRGVjb2RlckJ1ZmZlci5wcm90b3R5cGUucmF3ID0gZnVuY3Rpb24gcmF3KHNhdmUpIHtcbiAgcmV0dXJuIHRoaXMuYmFzZS5zbGljZShzYXZlID8gc2F2ZS5vZmZzZXQgOiB0aGlzLm9mZnNldCwgdGhpcy5sZW5ndGgpO1xufVxuXG5mdW5jdGlvbiBFbmNvZGVyQnVmZmVyKHZhbHVlLCByZXBvcnRlcikge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlLm1hcChmdW5jdGlvbihpdGVtKSB7XG4gICAgICBpZiAoIShpdGVtIGluc3RhbmNlb2YgRW5jb2RlckJ1ZmZlcikpXG4gICAgICAgIGl0ZW0gPSBuZXcgRW5jb2RlckJ1ZmZlcihpdGVtLCByZXBvcnRlcik7XG4gICAgICB0aGlzLmxlbmd0aCArPSBpdGVtLmxlbmd0aDtcbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH0sIHRoaXMpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAoISgwIDw9IHZhbHVlICYmIHZhbHVlIDw9IDB4ZmYpKVxuICAgICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdub24tYnl0ZSBFbmNvZGVyQnVmZmVyIHZhbHVlJyk7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMubGVuZ3RoID0gQnVmZmVyLmJ5dGVMZW5ndGgodmFsdWUpO1xuICB9IGVsc2UgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5sZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdVbnN1cHBvcnRlZCB0eXBlOiAnICsgdHlwZW9mIHZhbHVlKTtcbiAgfVxufVxuZXhwb3J0cy5FbmNvZGVyQnVmZmVyID0gRW5jb2RlckJ1ZmZlcjtcblxuRW5jb2RlckJ1ZmZlci5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uIGpvaW4ob3V0LCBvZmZzZXQpIHtcbiAgaWYgKCFvdXQpXG4gICAgb3V0ID0gbmV3IEJ1ZmZlcih0aGlzLmxlbmd0aCk7XG4gIGlmICghb2Zmc2V0KVxuICAgIG9mZnNldCA9IDA7XG5cbiAgaWYgKHRoaXMubGVuZ3RoID09PSAwKVxuICAgIHJldHVybiBvdXQ7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy52YWx1ZSkpIHtcbiAgICB0aGlzLnZhbHVlLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgICAgaXRlbS5qb2luKG91dCwgb2Zmc2V0KTtcbiAgICAgIG9mZnNldCArPSBpdGVtLmxlbmd0aDtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIHRoaXMudmFsdWUgPT09ICdudW1iZXInKVxuICAgICAgb3V0W29mZnNldF0gPSB0aGlzLnZhbHVlO1xuICAgIGVsc2UgaWYgKHR5cGVvZiB0aGlzLnZhbHVlID09PSAnc3RyaW5nJylcbiAgICAgIG91dC53cml0ZSh0aGlzLnZhbHVlLCBvZmZzZXQpO1xuICAgIGVsc2UgaWYgKEJ1ZmZlci5pc0J1ZmZlcih0aGlzLnZhbHVlKSlcbiAgICAgIHRoaXMudmFsdWUuY29weShvdXQsIG9mZnNldCk7XG4gICAgb2Zmc2V0ICs9IHRoaXMubGVuZ3RoO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn07XG4iLCJ2YXIgYXNuMSA9IHJlcXVpcmUoJy4uL2FzbjEnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciBhcGkgPSBleHBvcnRzO1xuXG5hcGkuZGVmaW5lID0gZnVuY3Rpb24gZGVmaW5lKG5hbWUsIGJvZHkpIHtcbiAgcmV0dXJuIG5ldyBFbnRpdHkobmFtZSwgYm9keSk7XG59O1xuXG5mdW5jdGlvbiBFbnRpdHkobmFtZSwgYm9keSkge1xuICB0aGlzLm5hbWUgPSBuYW1lO1xuICB0aGlzLmJvZHkgPSBib2R5O1xuXG4gIHRoaXMuZGVjb2RlcnMgPSB7fTtcbiAgdGhpcy5lbmNvZGVycyA9IHt9O1xufTtcblxuRW50aXR5LnByb3RvdHlwZS5fY3JlYXRlTmFtZWQgPSBmdW5jdGlvbiBjcmVhdGVOYW1lZChiYXNlKSB7XG4gIHZhciBuYW1lZDtcbiAgdHJ5IHtcbiAgICBuYW1lZCA9IHJlcXVpcmUoJ3ZtJykucnVuSW5UaGlzQ29udGV4dChcbiAgICAgICcoZnVuY3Rpb24gJyArIHRoaXMubmFtZSArICcoZW50aXR5KSB7XFxuJyArXG4gICAgICAnICB0aGlzLl9pbml0TmFtZWQoZW50aXR5KTtcXG4nICtcbiAgICAgICd9KSdcbiAgICApO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbmFtZWQgPSBmdW5jdGlvbiAoZW50aXR5KSB7XG4gICAgICB0aGlzLl9pbml0TmFtZWQoZW50aXR5KTtcbiAgICB9O1xuICB9XG4gIGluaGVyaXRzKG5hbWVkLCBiYXNlKTtcbiAgbmFtZWQucHJvdG90eXBlLl9pbml0TmFtZWQgPSBmdW5jdGlvbiBpbml0bmFtZWQoZW50aXR5KSB7XG4gICAgYmFzZS5jYWxsKHRoaXMsIGVudGl0eSk7XG4gIH07XG5cbiAgcmV0dXJuIG5ldyBuYW1lZCh0aGlzKTtcbn07XG5cbkVudGl0eS5wcm90b3R5cGUuX2dldERlY29kZXIgPSBmdW5jdGlvbiBfZ2V0RGVjb2RlcihlbmMpIHtcbiAgLy8gTGF6aWx5IGNyZWF0ZSBkZWNvZGVyXG4gIGlmICghdGhpcy5kZWNvZGVycy5oYXNPd25Qcm9wZXJ0eShlbmMpKVxuICAgIHRoaXMuZGVjb2RlcnNbZW5jXSA9IHRoaXMuX2NyZWF0ZU5hbWVkKGFzbjEuZGVjb2RlcnNbZW5jXSk7XG4gIHJldHVybiB0aGlzLmRlY29kZXJzW2VuY107XG59O1xuXG5FbnRpdHkucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShkYXRhLCBlbmMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRoaXMuX2dldERlY29kZXIoZW5jKS5kZWNvZGUoZGF0YSwgb3B0aW9ucyk7XG59O1xuXG5FbnRpdHkucHJvdG90eXBlLl9nZXRFbmNvZGVyID0gZnVuY3Rpb24gX2dldEVuY29kZXIoZW5jKSB7XG4gIC8vIExhemlseSBjcmVhdGUgZW5jb2RlclxuICBpZiAoIXRoaXMuZW5jb2RlcnMuaGFzT3duUHJvcGVydHkoZW5jKSlcbiAgICB0aGlzLmVuY29kZXJzW2VuY10gPSB0aGlzLl9jcmVhdGVOYW1lZChhc24xLmVuY29kZXJzW2VuY10pO1xuICByZXR1cm4gdGhpcy5lbmNvZGVyc1tlbmNdO1xufTtcblxuRW50aXR5LnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgZW5jLCAvKiBpbnRlcm5hbCAqLyByZXBvcnRlcikge1xuICByZXR1cm4gdGhpcy5fZ2V0RW5jb2RlcihlbmMpLmVuY29kZShkYXRhLCByZXBvcnRlcik7XG59O1xuIiwidmFyIGluZGV4T2YgPSByZXF1aXJlKCdpbmRleG9mJyk7XG5cbnZhciBPYmplY3Rfa2V5cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICBpZiAoT2JqZWN0LmtleXMpIHJldHVybiBPYmplY3Qua2V5cyhvYmopXG4gICAgZWxzZSB7XG4gICAgICAgIHZhciByZXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgcmVzLnB1c2goa2V5KVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbn07XG5cbnZhciBmb3JFYWNoID0gZnVuY3Rpb24gKHhzLCBmbikge1xuICAgIGlmICh4cy5mb3JFYWNoKSByZXR1cm4geHMuZm9yRWFjaChmbilcbiAgICBlbHNlIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZm4oeHNbaV0sIGksIHhzKTtcbiAgICB9XG59O1xuXG52YXIgZGVmaW5lUHJvcCA9IChmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdfJywge30pO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24ob2JqLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgbmFtZSwge1xuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihvYmosIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICBvYmpbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfTtcbiAgICB9XG59KCkpO1xuXG52YXIgZ2xvYmFscyA9IFsnQXJyYXknLCAnQm9vbGVhbicsICdEYXRlJywgJ0Vycm9yJywgJ0V2YWxFcnJvcicsICdGdW5jdGlvbicsXG4nSW5maW5pdHknLCAnSlNPTicsICdNYXRoJywgJ05hTicsICdOdW1iZXInLCAnT2JqZWN0JywgJ1JhbmdlRXJyb3InLFxuJ1JlZmVyZW5jZUVycm9yJywgJ1JlZ0V4cCcsICdTdHJpbmcnLCAnU3ludGF4RXJyb3InLCAnVHlwZUVycm9yJywgJ1VSSUVycm9yJyxcbidkZWNvZGVVUkknLCAnZGVjb2RlVVJJQ29tcG9uZW50JywgJ2VuY29kZVVSSScsICdlbmNvZGVVUklDb21wb25lbnQnLCAnZXNjYXBlJyxcbidldmFsJywgJ2lzRmluaXRlJywgJ2lzTmFOJywgJ3BhcnNlRmxvYXQnLCAncGFyc2VJbnQnLCAndW5kZWZpbmVkJywgJ3VuZXNjYXBlJ107XG5cbmZ1bmN0aW9uIENvbnRleHQoKSB7fVxuQ29udGV4dC5wcm90b3R5cGUgPSB7fTtcblxudmFyIFNjcmlwdCA9IGV4cG9ydHMuU2NyaXB0ID0gZnVuY3Rpb24gTm9kZVNjcmlwdCAoY29kZSkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTY3JpcHQpKSByZXR1cm4gbmV3IFNjcmlwdChjb2RlKTtcbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xufTtcblxuU2NyaXB0LnByb3RvdHlwZS5ydW5JbkNvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgIGlmICghKGNvbnRleHQgaW5zdGFuY2VvZiBDb250ZXh0KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwibmVlZHMgYSAnY29udGV4dCcgYXJndW1lbnQuXCIpO1xuICAgIH1cbiAgICBcbiAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgaWYgKCFpZnJhbWUuc3R5bGUpIGlmcmFtZS5zdHlsZSA9IHt9O1xuICAgIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIFxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICBcbiAgICB2YXIgd2luID0gaWZyYW1lLmNvbnRlbnRXaW5kb3c7XG4gICAgdmFyIHdFdmFsID0gd2luLmV2YWwsIHdFeGVjU2NyaXB0ID0gd2luLmV4ZWNTY3JpcHQ7XG5cbiAgICBpZiAoIXdFdmFsICYmIHdFeGVjU2NyaXB0KSB7XG4gICAgICAgIC8vIHdpbi5ldmFsKCkgbWFnaWNhbGx5IGFwcGVhcnMgd2hlbiB0aGlzIGlzIGNhbGxlZCBpbiBJRTpcbiAgICAgICAgd0V4ZWNTY3JpcHQuY2FsbCh3aW4sICdudWxsJyk7XG4gICAgICAgIHdFdmFsID0gd2luLmV2YWw7XG4gICAgfVxuICAgIFxuICAgIGZvckVhY2goT2JqZWN0X2tleXMoY29udGV4dCksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgd2luW2tleV0gPSBjb250ZXh0W2tleV07XG4gICAgfSk7XG4gICAgZm9yRWFjaChnbG9iYWxzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChjb250ZXh0W2tleV0pIHtcbiAgICAgICAgICAgIHdpbltrZXldID0gY29udGV4dFtrZXldO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgdmFyIHdpbktleXMgPSBPYmplY3Rfa2V5cyh3aW4pO1xuXG4gICAgdmFyIHJlcyA9IHdFdmFsLmNhbGwod2luLCB0aGlzLmNvZGUpO1xuICAgIFxuICAgIGZvckVhY2goT2JqZWN0X2tleXMod2luKSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAvLyBBdm9pZCBjb3B5aW5nIGNpcmN1bGFyIG9iamVjdHMgbGlrZSBgdG9wYCBhbmQgYHdpbmRvd2AgYnkgb25seVxuICAgICAgICAvLyB1cGRhdGluZyBleGlzdGluZyBjb250ZXh0IHByb3BlcnRpZXMgb3IgbmV3IHByb3BlcnRpZXMgaW4gdGhlIGB3aW5gXG4gICAgICAgIC8vIHRoYXQgd2FzIG9ubHkgaW50cm9kdWNlZCBhZnRlciB0aGUgZXZhbC5cbiAgICAgICAgaWYgKGtleSBpbiBjb250ZXh0IHx8IGluZGV4T2Yod2luS2V5cywga2V5KSA9PT0gLTEpIHtcbiAgICAgICAgICAgIGNvbnRleHRba2V5XSA9IHdpbltrZXldO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBmb3JFYWNoKGdsb2JhbHMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIGNvbnRleHQpKSB7XG4gICAgICAgICAgICBkZWZpbmVQcm9wKGNvbnRleHQsIGtleSwgd2luW2tleV0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICAgIFxuICAgIHJldHVybiByZXM7XG59O1xuXG5TY3JpcHQucHJvdG90eXBlLnJ1bkluVGhpc0NvbnRleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGV2YWwodGhpcy5jb2RlKTsgLy8gbWF5YmUuLi5cbn07XG5cblNjcmlwdC5wcm90b3R5cGUucnVuSW5OZXdDb250ZXh0ID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICB2YXIgY3R4ID0gU2NyaXB0LmNyZWF0ZUNvbnRleHQoY29udGV4dCk7XG4gICAgdmFyIHJlcyA9IHRoaXMucnVuSW5Db250ZXh0KGN0eCk7XG5cbiAgICBmb3JFYWNoKE9iamVjdF9rZXlzKGN0eCksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgY29udGV4dFtrZXldID0gY3R4W2tleV07XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzO1xufTtcblxuZm9yRWFjaChPYmplY3Rfa2V5cyhTY3JpcHQucHJvdG90eXBlKSwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBleHBvcnRzW25hbWVdID0gU2NyaXB0W25hbWVdID0gZnVuY3Rpb24gKGNvZGUpIHtcbiAgICAgICAgdmFyIHMgPSBTY3JpcHQoY29kZSk7XG4gICAgICAgIHJldHVybiBzW25hbWVdLmFwcGx5KHMsIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgfTtcbn0pO1xuXG5leHBvcnRzLmNyZWF0ZVNjcmlwdCA9IGZ1bmN0aW9uIChjb2RlKSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuU2NyaXB0KGNvZGUpO1xufTtcblxuZXhwb3J0cy5jcmVhdGVDb250ZXh0ID0gU2NyaXB0LmNyZWF0ZUNvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgIHZhciBjb3B5ID0gbmV3IENvbnRleHQoKTtcbiAgICBpZih0eXBlb2YgY29udGV4dCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yRWFjaChPYmplY3Rfa2V5cyhjb250ZXh0KSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgY29weVtrZXldID0gY29udGV4dFtrZXldO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvcHk7XG59O1xuIiwiXG52YXIgaW5kZXhPZiA9IFtdLmluZGV4T2Y7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXJyLCBvYmope1xuICBpZiAoaW5kZXhPZikgcmV0dXJuIGFyci5pbmRleE9mKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKGFycltpXSA9PT0gb2JqKSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59OyIsIm1vZHVsZS5leHBvcnRzPXtcIjIuMTYuODQwLjEuMTAxLjMuNC4xLjFcIjogXCJhZXMtMTI4LWVjYlwiLFxuXCIyLjE2Ljg0MC4xLjEwMS4zLjQuMS4yXCI6IFwiYWVzLTEyOC1jYmNcIixcblwiMi4xNi44NDAuMS4xMDEuMy40LjEuM1wiOiBcImFlcy0xMjgtb2ZiXCIsXG5cIjIuMTYuODQwLjEuMTAxLjMuNC4xLjRcIjogXCJhZXMtMTI4LWNmYlwiLFxuXCIyLjE2Ljg0MC4xLjEwMS4zLjQuMS4yMVwiOiBcImFlcy0xOTItZWNiXCIsXG5cIjIuMTYuODQwLjEuMTAxLjMuNC4xLjIyXCI6IFwiYWVzLTE5Mi1jYmNcIixcblwiMi4xNi44NDAuMS4xMDEuMy40LjEuMjNcIjogXCJhZXMtMTkyLW9mYlwiLFxuXCIyLjE2Ljg0MC4xLjEwMS4zLjQuMS4yNFwiOiBcImFlcy0xOTItY2ZiXCIsXG5cIjIuMTYuODQwLjEuMTAxLjMuNC4xLjQxXCI6IFwiYWVzLTI1Ni1lY2JcIixcblwiMi4xNi44NDAuMS4xMDEuMy40LjEuNDJcIjogXCJhZXMtMjU2LWNiY1wiLFxuXCIyLjE2Ljg0MC4xLjEwMS4zLjQuMS40M1wiOiBcImFlcy0yNTYtb2ZiXCIsXG5cIjIuMTYuODQwLjEuMTAxLjMuNC4xLjQ0XCI6IFwiYWVzLTI1Ni1jZmJcIlxufSIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVsbGlwdGljID0gZXhwb3J0cztcblxuZWxsaXB0aWMudmVyc2lvbiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb247XG5lbGxpcHRpYy51dGlscyA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvdXRpbHMnKTtcbmVsbGlwdGljLnJhbmQgPSByZXF1aXJlKCdicm9yYW5kJyk7XG5lbGxpcHRpYy5obWFjRFJCRyA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvaG1hYy1kcmJnJyk7XG5lbGxpcHRpYy5jdXJ2ZSA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvY3VydmUnKTtcbmVsbGlwdGljLmN1cnZlcyA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvY3VydmVzJyk7XG5cbi8vIFByb3RvY29sc1xuZWxsaXB0aWMuZWMgPSByZXF1aXJlKCcuL2VsbGlwdGljL2VjJyk7XG4iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwibmFtZVwiOiBcImVsbGlwdGljXCIsXG4gIFwidmVyc2lvblwiOiBcIjMuMS4wXCIsXG4gIFwiZGVzY3JpcHRpb25cIjogXCJFQyBjcnlwdG9ncmFwaHlcIixcbiAgXCJtYWluXCI6IFwibGliL2VsbGlwdGljLmpzXCIsXG4gIFwic2NyaXB0c1wiOiB7XG4gICAgXCJ0ZXN0XCI6IFwibWFrZSBsaW50ICYmIG1vY2hhIC0tcmVwb3J0ZXI9c3BlYyB0ZXN0LyotdGVzdC5qc1wiXG4gIH0sXG4gIFwicmVwb3NpdG9yeVwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiZ2l0XCIsXG4gICAgXCJ1cmxcIjogXCJnaXQrc3NoOi8vZ2l0QGdpdGh1Yi5jb20vaW5kdXRueS9lbGxpcHRpYy5naXRcIlxuICB9LFxuICBcImtleXdvcmRzXCI6IFtcbiAgICBcIkVDXCIsXG4gICAgXCJFbGxpcHRpY1wiLFxuICAgIFwiY3VydmVcIixcbiAgICBcIkNyeXB0b2dyYXBoeVwiXG4gIF0sXG4gIFwiYXV0aG9yXCI6IHtcbiAgICBcIm5hbWVcIjogXCJGZWRvciBJbmR1dG55XCIsXG4gICAgXCJlbWFpbFwiOiBcImZlZG9yQGluZHV0bnkuY29tXCJcbiAgfSxcbiAgXCJsaWNlbnNlXCI6IFwiTUlUXCIsXG4gIFwiYnVnc1wiOiB7XG4gICAgXCJ1cmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9lbGxpcHRpYy9pc3N1ZXNcIlxuICB9LFxuICBcImhvbWVwYWdlXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvZWxsaXB0aWNcIixcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiYnJvd3NlcmlmeVwiOiBcIl4zLjQ0LjJcIixcbiAgICBcImpzY3NcIjogXCJeMS4xMS4zXCIsXG4gICAgXCJqc2hpbnRcIjogXCJeMi42LjBcIixcbiAgICBcIm1vY2hhXCI6IFwiXjIuMS4wXCIsXG4gICAgXCJ1Z2xpZnktanNcIjogXCJeMi40LjEzXCJcbiAgfSxcbiAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiYm4uanNcIjogXCJeMi4wLjNcIixcbiAgICBcImJyb3JhbmRcIjogXCJeMS4wLjFcIixcbiAgICBcImhhc2guanNcIjogXCJeMS4wLjBcIixcbiAgICBcImluaGVyaXRzXCI6IFwiXjIuMC4xXCJcbiAgfSxcbiAgXCJnaXRIZWFkXCI6IFwiZDg2Y2QyYTgxNzhmN2U3Y2VjYmQ2ZGQ5MmVlYTA4NGUyYWI0NGMxM1wiLFxuICBcIl9pZFwiOiBcImVsbGlwdGljQDMuMS4wXCIsXG4gIFwiX3NoYXN1bVwiOiBcImMyMTY4MmVmNzYyNzY5YjU2YTc0MjAxNjA5MTA1ZGExMWQ1ZjYwY2NcIixcbiAgXCJfZnJvbVwiOiBcImVsbGlwdGljQD49My4wLjAgPDQuMC4wXCIsXG4gIFwiX25wbVZlcnNpb25cIjogXCIyLjExLjBcIixcbiAgXCJfbm9kZVZlcnNpb25cIjogXCIyLjIuMVwiLFxuICBcIl9ucG1Vc2VyXCI6IHtcbiAgICBcIm5hbWVcIjogXCJpbmR1dG55XCIsXG4gICAgXCJlbWFpbFwiOiBcImZlZG9yQGluZHV0bnkuY29tXCJcbiAgfSxcbiAgXCJtYWludGFpbmVyc1wiOiBbXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiaW5kdXRueVwiLFxuICAgICAgXCJlbWFpbFwiOiBcImZlZG9yQGluZHV0bnkuY29tXCJcbiAgICB9XG4gIF0sXG4gIFwiZGlzdFwiOiB7XG4gICAgXCJzaGFzdW1cIjogXCJjMjE2ODJlZjc2Mjc2OWI1NmE3NDIwMTYwOTEwNWRhMTFkNWY2MGNjXCIsXG4gICAgXCJ0YXJiYWxsXCI6IFwiaHR0cDovL3JlZ2lzdHJ5Lm5wbWpzLm9yZy9lbGxpcHRpYy8tL2VsbGlwdGljLTMuMS4wLnRnelwiXG4gIH0sXG4gIFwiZGlyZWN0b3JpZXNcIjoge30sXG4gIFwiX3Jlc29sdmVkXCI6IFwiaHR0cHM6Ly9yZWdpc3RyeS5ucG1qcy5vcmcvZWxsaXB0aWMvLS9lbGxpcHRpYy0zLjEuMC50Z3pcIixcbiAgXCJyZWFkbWVcIjogXCJFUlJPUjogTm8gUkVBRE1FIGRhdGEgZm91bmQhXCJcbn1cbiIsInZhciByO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJhbmQobGVuKSB7XG4gIGlmICghcilcbiAgICByID0gbmV3IFJhbmQobnVsbCk7XG5cbiAgcmV0dXJuIHIuZ2VuZXJhdGUobGVuKTtcbn07XG5cbmZ1bmN0aW9uIFJhbmQocmFuZCkge1xuICB0aGlzLnJhbmQgPSByYW5kO1xufVxubW9kdWxlLmV4cG9ydHMuUmFuZCA9IFJhbmQ7XG5cblJhbmQucHJvdG90eXBlLmdlbmVyYXRlID0gZnVuY3Rpb24gZ2VuZXJhdGUobGVuKSB7XG4gIHJldHVybiB0aGlzLl9yYW5kKGxlbik7XG59O1xuXG5pZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHtcbiAgaWYgKHdpbmRvdy5jcnlwdG8gJiYgd2luZG93LmNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBNb2Rlcm4gYnJvd3NlcnNcbiAgICBSYW5kLnByb3RvdHlwZS5fcmFuZCA9IGZ1bmN0aW9uIF9yYW5kKG4pIHtcbiAgICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheShuKTtcbiAgICAgIHdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFycik7XG4gICAgICByZXR1cm4gYXJyO1xuICAgIH07XG4gIH0gZWxzZSBpZiAod2luZG93Lm1zQ3J5cHRvICYmIHdpbmRvdy5tc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBJRVxuICAgIFJhbmQucHJvdG90eXBlLl9yYW5kID0gZnVuY3Rpb24gX3JhbmQobikge1xuICAgICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KG4pO1xuICAgICAgd2luZG93Lm1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnIpO1xuICAgICAgcmV0dXJuIGFycjtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIC8vIE9sZCBqdW5rXG4gICAgUmFuZC5wcm90b3R5cGUuX3JhbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkIHlldCcpO1xuICAgIH07XG4gIH1cbn0gZWxzZSB7XG4gIC8vIE5vZGUuanMgb3IgV2ViIHdvcmtlclxuICB0cnkge1xuICAgIHZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnknICsgJ3B0bycpO1xuXG4gICAgUmFuZC5wcm90b3R5cGUuX3JhbmQgPSBmdW5jdGlvbiBfcmFuZChuKSB7XG4gICAgICByZXR1cm4gY3J5cHRvLnJhbmRvbUJ5dGVzKG4pO1xuICAgIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBFbXVsYXRlIGNyeXB0byBBUEkgdXNpbmcgcmFuZHlcbiAgICBSYW5kLnByb3RvdHlwZS5fcmFuZCA9IGZ1bmN0aW9uIF9yYW5kKG4pIHtcbiAgICAgIHZhciByZXMgPSBuZXcgVWludDhBcnJheShuKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzLmxlbmd0aDsgaSsrKVxuICAgICAgICByZXNbaV0gPSB0aGlzLnJhbmQuZ2V0Qnl0ZSgpO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9O1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IGV4cG9ydHM7XG5cbnV0aWxzLmFzc2VydCA9IGZ1bmN0aW9uIGFzc2VydCh2YWwsIG1zZykge1xuICBpZiAoIXZhbClcbiAgICB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG59O1xuXG5mdW5jdGlvbiB0b0FycmF5KG1zZywgZW5jKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KG1zZykpXG4gICAgcmV0dXJuIG1zZy5zbGljZSgpO1xuICBpZiAoIW1zZylcbiAgICByZXR1cm4gW107XG4gIHZhciByZXMgPSBbXTtcbiAgaWYgKHR5cGVvZiBtc2cgIT09ICdzdHJpbmcnKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspXG4gICAgICByZXNbaV0gPSBtc2dbaV0gfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH1cbiAgaWYgKCFlbmMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSBtc2cuY2hhckNvZGVBdChpKTtcbiAgICAgIHZhciBoaSA9IGMgPj4gODtcbiAgICAgIHZhciBsbyA9IGMgJiAweGZmO1xuICAgICAgaWYgKGhpKVxuICAgICAgICByZXMucHVzaChoaSwgbG8pO1xuICAgICAgZWxzZVxuICAgICAgICByZXMucHVzaChsbyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGVuYyA9PT0gJ2hleCcpIHtcbiAgICBtc2cgPSBtc2cucmVwbGFjZSgvW15hLXowLTldKy9pZywgJycpO1xuICAgIGlmIChtc2cubGVuZ3RoICUgMiAhPT0gMClcbiAgICAgIG1zZyA9ICcwJyArIG1zZztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkgKz0gMilcbiAgICAgIHJlcy5wdXNoKHBhcnNlSW50KG1zZ1tpXSArIG1zZ1tpICsgMV0sIDE2KSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbnV0aWxzLnRvQXJyYXkgPSB0b0FycmF5O1xuXG5mdW5jdGlvbiB6ZXJvMih3b3JkKSB7XG4gIGlmICh3b3JkLmxlbmd0aCA9PT0gMSlcbiAgICByZXR1cm4gJzAnICsgd29yZDtcbiAgZWxzZVxuICAgIHJldHVybiB3b3JkO1xufVxudXRpbHMuemVybzIgPSB6ZXJvMjtcblxuZnVuY3Rpb24gdG9IZXgobXNnKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspXG4gICAgcmVzICs9IHplcm8yKG1zZ1tpXS50b1N0cmluZygxNikpO1xuICByZXR1cm4gcmVzO1xufVxudXRpbHMudG9IZXggPSB0b0hleDtcblxudXRpbHMuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKGFyciwgZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB0b0hleChhcnIpO1xuICBlbHNlXG4gICAgcmV0dXJuIGFycjtcbn07XG5cbi8vIFJlcHJlc2VudCBudW0gaW4gYSB3LU5BRiBmb3JtXG5mdW5jdGlvbiBnZXROQUYobnVtLCB3KSB7XG4gIHZhciBuYWYgPSBbXTtcbiAgdmFyIHdzID0gMSA8PCAodyArIDEpO1xuICB2YXIgayA9IG51bS5jbG9uZSgpO1xuICB3aGlsZSAoay5jbXBuKDEpID49IDApIHtcbiAgICB2YXIgejtcbiAgICBpZiAoay5pc09kZCgpKSB7XG4gICAgICB2YXIgbW9kID0gay5hbmRsbih3cyAtIDEpO1xuICAgICAgaWYgKG1vZCA+ICh3cyA+PiAxKSAtIDEpXG4gICAgICAgIHogPSAod3MgPj4gMSkgLSBtb2Q7XG4gICAgICBlbHNlXG4gICAgICAgIHogPSBtb2Q7XG4gICAgICBrLmlzdWJuKHopO1xuICAgIH0gZWxzZSB7XG4gICAgICB6ID0gMDtcbiAgICB9XG4gICAgbmFmLnB1c2goeik7XG5cbiAgICAvLyBPcHRpbWl6YXRpb24sIHNoaWZ0IGJ5IHdvcmQgaWYgcG9zc2libGVcbiAgICB2YXIgc2hpZnQgPSAoay5jbXBuKDApICE9PSAwICYmIGsuYW5kbG4od3MgLSAxKSA9PT0gMCkgPyAodyArIDEpIDogMTtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IHNoaWZ0OyBpKyspXG4gICAgICBuYWYucHVzaCgwKTtcbiAgICBrLmlzaHJuKHNoaWZ0KTtcbiAgfVxuXG4gIHJldHVybiBuYWY7XG59XG51dGlscy5nZXROQUYgPSBnZXROQUY7XG5cbi8vIFJlcHJlc2VudCBrMSwgazIgaW4gYSBKb2ludCBTcGFyc2UgRm9ybVxuZnVuY3Rpb24gZ2V0SlNGKGsxLCBrMikge1xuICB2YXIganNmID0gW1xuICAgIFtdLFxuICAgIFtdXG4gIF07XG5cbiAgazEgPSBrMS5jbG9uZSgpO1xuICBrMiA9IGsyLmNsb25lKCk7XG4gIHZhciBkMSA9IDA7XG4gIHZhciBkMiA9IDA7XG4gIHdoaWxlIChrMS5jbXBuKC1kMSkgPiAwIHx8IGsyLmNtcG4oLWQyKSA+IDApIHtcblxuICAgIC8vIEZpcnN0IHBoYXNlXG4gICAgdmFyIG0xNCA9IChrMS5hbmRsbigzKSArIGQxKSAmIDM7XG4gICAgdmFyIG0yNCA9IChrMi5hbmRsbigzKSArIGQyKSAmIDM7XG4gICAgaWYgKG0xNCA9PT0gMylcbiAgICAgIG0xNCA9IC0xO1xuICAgIGlmIChtMjQgPT09IDMpXG4gICAgICBtMjQgPSAtMTtcbiAgICB2YXIgdTE7XG4gICAgaWYgKChtMTQgJiAxKSA9PT0gMCkge1xuICAgICAgdTEgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbTggPSAoazEuYW5kbG4oNykgKyBkMSkgJiA3O1xuICAgICAgaWYgKChtOCA9PT0gMyB8fCBtOCA9PT0gNSkgJiYgbTI0ID09PSAyKVxuICAgICAgICB1MSA9IC1tMTQ7XG4gICAgICBlbHNlXG4gICAgICAgIHUxID0gbTE0O1xuICAgIH1cbiAgICBqc2ZbMF0ucHVzaCh1MSk7XG5cbiAgICB2YXIgdTI7XG4gICAgaWYgKChtMjQgJiAxKSA9PT0gMCkge1xuICAgICAgdTIgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbTggPSAoazIuYW5kbG4oNykgKyBkMikgJiA3O1xuICAgICAgaWYgKChtOCA9PT0gMyB8fCBtOCA9PT0gNSkgJiYgbTE0ID09PSAyKVxuICAgICAgICB1MiA9IC1tMjQ7XG4gICAgICBlbHNlXG4gICAgICAgIHUyID0gbTI0O1xuICAgIH1cbiAgICBqc2ZbMV0ucHVzaCh1Mik7XG5cbiAgICAvLyBTZWNvbmQgcGhhc2VcbiAgICBpZiAoMiAqIGQxID09PSB1MSArIDEpXG4gICAgICBkMSA9IDEgLSBkMTtcbiAgICBpZiAoMiAqIGQyID09PSB1MiArIDEpXG4gICAgICBkMiA9IDEgLSBkMjtcbiAgICBrMS5pc2hybigxKTtcbiAgICBrMi5pc2hybigxKTtcbiAgfVxuXG4gIHJldHVybiBqc2Y7XG59XG51dGlscy5nZXRKU0YgPSBnZXRKU0Y7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXNoID0gcmVxdWlyZSgnaGFzaC5qcycpO1xudmFyIGVsbGlwdGljID0gcmVxdWlyZSgnLi4vZWxsaXB0aWMnKTtcbnZhciB1dGlscyA9IGVsbGlwdGljLnV0aWxzO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gSG1hY0RSQkcob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSG1hY0RSQkcpKVxuICAgIHJldHVybiBuZXcgSG1hY0RSQkcob3B0aW9ucyk7XG4gIHRoaXMuaGFzaCA9IG9wdGlvbnMuaGFzaDtcbiAgdGhpcy5wcmVkUmVzaXN0ID0gISFvcHRpb25zLnByZWRSZXNpc3Q7XG5cbiAgdGhpcy5vdXRMZW4gPSB0aGlzLmhhc2gub3V0U2l6ZTtcbiAgdGhpcy5taW5FbnRyb3B5ID0gb3B0aW9ucy5taW5FbnRyb3B5IHx8IHRoaXMuaGFzaC5obWFjU3RyZW5ndGg7XG5cbiAgdGhpcy5yZXNlZWQgPSBudWxsO1xuICB0aGlzLnJlc2VlZEludGVydmFsID0gbnVsbDtcbiAgdGhpcy5LID0gbnVsbDtcbiAgdGhpcy5WID0gbnVsbDtcblxuICB2YXIgZW50cm9weSA9IHV0aWxzLnRvQXJyYXkob3B0aW9ucy5lbnRyb3B5LCBvcHRpb25zLmVudHJvcHlFbmMpO1xuICB2YXIgbm9uY2UgPSB1dGlscy50b0FycmF5KG9wdGlvbnMubm9uY2UsIG9wdGlvbnMubm9uY2VFbmMpO1xuICB2YXIgcGVycyA9IHV0aWxzLnRvQXJyYXkob3B0aW9ucy5wZXJzLCBvcHRpb25zLnBlcnNFbmMpO1xuICBhc3NlcnQoZW50cm9weS5sZW5ndGggPj0gKHRoaXMubWluRW50cm9weSAvIDgpLFxuICAgICAgICAgJ05vdCBlbm91Z2ggZW50cm9weS4gTWluaW11bSBpczogJyArIHRoaXMubWluRW50cm9weSArICcgYml0cycpO1xuICB0aGlzLl9pbml0KGVudHJvcHksIG5vbmNlLCBwZXJzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gSG1hY0RSQkc7XG5cbkhtYWNEUkJHLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQoZW50cm9weSwgbm9uY2UsIHBlcnMpIHtcbiAgdmFyIHNlZWQgPSBlbnRyb3B5LmNvbmNhdChub25jZSkuY29uY2F0KHBlcnMpO1xuXG4gIHRoaXMuSyA9IG5ldyBBcnJheSh0aGlzLm91dExlbiAvIDgpO1xuICB0aGlzLlYgPSBuZXcgQXJyYXkodGhpcy5vdXRMZW4gLyA4KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLlYubGVuZ3RoOyBpKyspIHtcbiAgICB0aGlzLktbaV0gPSAweDAwO1xuICAgIHRoaXMuVltpXSA9IDB4MDE7XG4gIH1cblxuICB0aGlzLl91cGRhdGUoc2VlZCk7XG4gIHRoaXMucmVzZWVkID0gMTtcbiAgdGhpcy5yZXNlZWRJbnRlcnZhbCA9IDB4MTAwMDAwMDAwMDAwMDsgIC8vIDJeNDhcbn07XG5cbkhtYWNEUkJHLnByb3RvdHlwZS5faG1hYyA9IGZ1bmN0aW9uIGhtYWMoKSB7XG4gIHJldHVybiBuZXcgaGFzaC5obWFjKHRoaXMuaGFzaCwgdGhpcy5LKTtcbn07XG5cbkhtYWNEUkJHLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKHNlZWQpIHtcbiAgdmFyIGttYWMgPSB0aGlzLl9obWFjKClcbiAgICAgICAgICAgICAgICAgLnVwZGF0ZSh0aGlzLlYpXG4gICAgICAgICAgICAgICAgIC51cGRhdGUoWyAweDAwIF0pO1xuICBpZiAoc2VlZClcbiAgICBrbWFjID0ga21hYy51cGRhdGUoc2VlZCk7XG4gIHRoaXMuSyA9IGttYWMuZGlnZXN0KCk7XG4gIHRoaXMuViA9IHRoaXMuX2htYWMoKS51cGRhdGUodGhpcy5WKS5kaWdlc3QoKTtcbiAgaWYgKCFzZWVkKVxuICAgIHJldHVybjtcblxuICB0aGlzLksgPSB0aGlzLl9obWFjKClcbiAgICAgICAgICAgICAgIC51cGRhdGUodGhpcy5WKVxuICAgICAgICAgICAgICAgLnVwZGF0ZShbIDB4MDEgXSlcbiAgICAgICAgICAgICAgIC51cGRhdGUoc2VlZClcbiAgICAgICAgICAgICAgIC5kaWdlc3QoKTtcbiAgdGhpcy5WID0gdGhpcy5faG1hYygpLnVwZGF0ZSh0aGlzLlYpLmRpZ2VzdCgpO1xufTtcblxuSG1hY0RSQkcucHJvdG90eXBlLnJlc2VlZCA9IGZ1bmN0aW9uIHJlc2VlZChlbnRyb3B5LCBlbnRyb3B5RW5jLCBhZGQsIGFkZEVuYykge1xuICAvLyBPcHRpb25hbCBlbnRyb3B5IGVuY1xuICBpZiAodHlwZW9mIGVudHJvcHlFbmMgIT09ICdzdHJpbmcnKSB7XG4gICAgYWRkRW5jID0gYWRkO1xuICAgIGFkZCA9IGVudHJvcHlFbmM7XG4gICAgZW50cm9weUVuYyA9IG51bGw7XG4gIH1cblxuICBlbnRyb3B5ID0gdXRpbHMudG9CdWZmZXIoZW50cm9weSwgZW50cm9weUVuYyk7XG4gIGFkZCA9IHV0aWxzLnRvQnVmZmVyKGFkZCwgYWRkRW5jKTtcblxuICBhc3NlcnQoZW50cm9weS5sZW5ndGggPj0gKHRoaXMubWluRW50cm9weSAvIDgpLFxuICAgICAgICAgJ05vdCBlbm91Z2ggZW50cm9weS4gTWluaW11bSBpczogJyArIHRoaXMubWluRW50cm9weSArICcgYml0cycpO1xuXG4gIHRoaXMuX3VwZGF0ZShlbnRyb3B5LmNvbmNhdChhZGQgfHwgW10pKTtcbiAgdGhpcy5yZXNlZWQgPSAxO1xufTtcblxuSG1hY0RSQkcucHJvdG90eXBlLmdlbmVyYXRlID0gZnVuY3Rpb24gZ2VuZXJhdGUobGVuLCBlbmMsIGFkZCwgYWRkRW5jKSB7XG4gIGlmICh0aGlzLnJlc2VlZCA+IHRoaXMucmVzZWVkSW50ZXJ2YWwpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdSZXNlZWQgaXMgcmVxdWlyZWQnKTtcblxuICAvLyBPcHRpb25hbCBlbmNvZGluZ1xuICBpZiAodHlwZW9mIGVuYyAhPT0gJ3N0cmluZycpIHtcbiAgICBhZGRFbmMgPSBhZGQ7XG4gICAgYWRkID0gZW5jO1xuICAgIGVuYyA9IG51bGw7XG4gIH1cblxuICAvLyBPcHRpb25hbCBhZGRpdGlvbmFsIGRhdGFcbiAgaWYgKGFkZCkge1xuICAgIGFkZCA9IHV0aWxzLnRvQXJyYXkoYWRkLCBhZGRFbmMpO1xuICAgIHRoaXMuX3VwZGF0ZShhZGQpO1xuICB9XG5cbiAgdmFyIHRlbXAgPSBbXTtcbiAgd2hpbGUgKHRlbXAubGVuZ3RoIDwgbGVuKSB7XG4gICAgdGhpcy5WID0gdGhpcy5faG1hYygpLnVwZGF0ZSh0aGlzLlYpLmRpZ2VzdCgpO1xuICAgIHRlbXAgPSB0ZW1wLmNvbmNhdCh0aGlzLlYpO1xuICB9XG5cbiAgdmFyIHJlcyA9IHRlbXAuc2xpY2UoMCwgbGVuKTtcbiAgdGhpcy5fdXBkYXRlKGFkZCk7XG4gIHRoaXMucmVzZWVkKys7XG4gIHJldHVybiB1dGlscy5lbmNvZGUocmVzLCBlbmMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJuID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBlbGxpcHRpYyA9IHJlcXVpcmUoJy4uLy4uL2VsbGlwdGljJyk7XG52YXIgdXRpbHMgPSBlbGxpcHRpYy51dGlscztcbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG5cbnZhciBLZXlQYWlyID0gcmVxdWlyZSgnLi9rZXknKTtcbnZhciBTaWduYXR1cmUgPSByZXF1aXJlKCcuL3NpZ25hdHVyZScpO1xuXG5mdW5jdGlvbiBFQyhvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBFQykpXG4gICAgcmV0dXJuIG5ldyBFQyhvcHRpb25zKTtcblxuICAvLyBTaG9ydGN1dCBgZWxsaXB0aWMuZWMoY3VydmUtbmFtZSlgXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICBhc3NlcnQoZWxsaXB0aWMuY3VydmVzLmhhc093blByb3BlcnR5KG9wdGlvbnMpLCAnVW5rbm93biBjdXJ2ZSAnICsgb3B0aW9ucyk7XG5cbiAgICBvcHRpb25zID0gZWxsaXB0aWMuY3VydmVzW29wdGlvbnNdO1xuICB9XG5cbiAgLy8gU2hvcnRjdXQgZm9yIGBlbGxpcHRpYy5lYyhlbGxpcHRpYy5jdXJ2ZXMuY3VydmVOYW1lKWBcbiAgaWYgKG9wdGlvbnMgaW5zdGFuY2VvZiBlbGxpcHRpYy5jdXJ2ZXMuUHJlc2V0Q3VydmUpXG4gICAgb3B0aW9ucyA9IHsgY3VydmU6IG9wdGlvbnMgfTtcblxuICB0aGlzLmN1cnZlID0gb3B0aW9ucy5jdXJ2ZS5jdXJ2ZTtcbiAgdGhpcy5uID0gdGhpcy5jdXJ2ZS5uO1xuICB0aGlzLm5oID0gdGhpcy5uLnNocm4oMSk7XG4gIHRoaXMuZyA9IHRoaXMuY3VydmUuZztcblxuICAvLyBQb2ludCBvbiBjdXJ2ZVxuICB0aGlzLmcgPSBvcHRpb25zLmN1cnZlLmc7XG4gIHRoaXMuZy5wcmVjb21wdXRlKG9wdGlvbnMuY3VydmUubi5iaXRMZW5ndGgoKSArIDEpO1xuXG4gIC8vIEhhc2ggZm9yIGZ1bmN0aW9uIGZvciBEUkJHXG4gIHRoaXMuaGFzaCA9IG9wdGlvbnMuaGFzaCB8fCBvcHRpb25zLmN1cnZlLmhhc2g7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEVDO1xuXG5FQy5wcm90b3R5cGUua2V5UGFpciA9IGZ1bmN0aW9uIGtleVBhaXIob3B0aW9ucykge1xuICByZXR1cm4gbmV3IEtleVBhaXIodGhpcywgb3B0aW9ucyk7XG59O1xuXG5FQy5wcm90b3R5cGUua2V5RnJvbVByaXZhdGUgPSBmdW5jdGlvbiBrZXlGcm9tUHJpdmF0ZShwcml2LCBlbmMpIHtcbiAgcmV0dXJuIEtleVBhaXIuZnJvbVByaXZhdGUodGhpcywgcHJpdiwgZW5jKTtcbn07XG5cbkVDLnByb3RvdHlwZS5rZXlGcm9tUHVibGljID0gZnVuY3Rpb24ga2V5RnJvbVB1YmxpYyhwdWIsIGVuYykge1xuICByZXR1cm4gS2V5UGFpci5mcm9tUHVibGljKHRoaXMsIHB1YiwgZW5jKTtcbn07XG5cbkVDLnByb3RvdHlwZS5nZW5LZXlQYWlyID0gZnVuY3Rpb24gZ2VuS2V5UGFpcihvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucylcbiAgICBvcHRpb25zID0ge307XG5cbiAgLy8gSW5zdGFudGlhdGUgSG1hY19EUkJHXG4gIHZhciBkcmJnID0gbmV3IGVsbGlwdGljLmhtYWNEUkJHKHtcbiAgICBoYXNoOiB0aGlzLmhhc2gsXG4gICAgcGVyczogb3B0aW9ucy5wZXJzLFxuICAgIGVudHJvcHk6IG9wdGlvbnMuZW50cm9weSB8fCBlbGxpcHRpYy5yYW5kKHRoaXMuaGFzaC5obWFjU3RyZW5ndGgpLFxuICAgIG5vbmNlOiB0aGlzLm4udG9BcnJheSgpXG4gIH0pO1xuXG4gIHZhciBieXRlcyA9IHRoaXMubi5ieXRlTGVuZ3RoKCk7XG4gIHZhciBuczIgPSB0aGlzLm4uc3ViKG5ldyBibigyKSk7XG4gIGRvIHtcbiAgICB2YXIgcHJpdiA9IG5ldyBibihkcmJnLmdlbmVyYXRlKGJ5dGVzKSk7XG4gICAgaWYgKHByaXYuY21wKG5zMikgPiAwKVxuICAgICAgY29udGludWU7XG5cbiAgICBwcml2LmlhZGRuKDEpO1xuICAgIHJldHVybiB0aGlzLmtleUZyb21Qcml2YXRlKHByaXYpO1xuICB9IHdoaWxlICh0cnVlKTtcbn07XG5cbkVDLnByb3RvdHlwZS5fdHJ1bmNhdGVUb04gPSBmdW5jdGlvbiB0cnVuY2F0ZVRvTihtc2csIHRydW5jT25seSkge1xuICB2YXIgZGVsdGEgPSBtc2cuYnl0ZUxlbmd0aCgpICogOCAtIHRoaXMubi5iaXRMZW5ndGgoKTtcbiAgaWYgKGRlbHRhID4gMClcbiAgICBtc2cgPSBtc2cuc2hybihkZWx0YSk7XG4gIGlmICghdHJ1bmNPbmx5ICYmIG1zZy5jbXAodGhpcy5uKSA+PSAwKVxuICAgIHJldHVybiBtc2cuc3ViKHRoaXMubik7XG4gIGVsc2VcbiAgICByZXR1cm4gbXNnO1xufTtcblxuRUMucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiBzaWduKG1zZywga2V5LCBlbmMsIG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBlbmMgPT09ICdvYmplY3QnKSB7XG4gICAgb3B0aW9ucyA9IGVuYztcbiAgICBlbmMgPSBudWxsO1xuICB9XG4gIGlmICghb3B0aW9ucylcbiAgICBvcHRpb25zID0ge307XG5cbiAga2V5ID0gdGhpcy5rZXlGcm9tUHJpdmF0ZShrZXksIGVuYyk7XG4gIG1zZyA9IHRoaXMuX3RydW5jYXRlVG9OKG5ldyBibihtc2csIDE2KSk7XG5cbiAgLy8gWmVyby1leHRlbmQga2V5IHRvIHByb3ZpZGUgZW5vdWdoIGVudHJvcHlcbiAgdmFyIGJ5dGVzID0gdGhpcy5uLmJ5dGVMZW5ndGgoKTtcbiAgdmFyIGJrZXkgPSBrZXkuZ2V0UHJpdmF0ZSgpLnRvQXJyYXkoKTtcbiAgZm9yICh2YXIgaSA9IGJrZXkubGVuZ3RoOyBpIDwgMjE7IGkrKylcbiAgICBia2V5LnVuc2hpZnQoMCk7XG5cbiAgLy8gWmVyby1leHRlbmQgbm9uY2UgdG8gaGF2ZSB0aGUgc2FtZSBieXRlIHNpemUgYXMgTlxuICB2YXIgbm9uY2UgPSBtc2cudG9BcnJheSgpO1xuICBmb3IgKHZhciBpID0gbm9uY2UubGVuZ3RoOyBpIDwgYnl0ZXM7IGkrKylcbiAgICBub25jZS51bnNoaWZ0KDApO1xuXG4gIC8vIEluc3RhbnRpYXRlIEhtYWNfRFJCR1xuICB2YXIgZHJiZyA9IG5ldyBlbGxpcHRpYy5obWFjRFJCRyh7XG4gICAgaGFzaDogdGhpcy5oYXNoLFxuICAgIGVudHJvcHk6IGJrZXksXG4gICAgbm9uY2U6IG5vbmNlXG4gIH0pO1xuXG4gIC8vIE51bWJlciBvZiBieXRlcyB0byBnZW5lcmF0ZVxuICB2YXIgbnMxID0gdGhpcy5uLnN1YihuZXcgYm4oMSkpO1xuICBkbyB7XG4gICAgdmFyIGsgPSBuZXcgYm4oZHJiZy5nZW5lcmF0ZSh0aGlzLm4uYnl0ZUxlbmd0aCgpKSk7XG4gICAgayA9IHRoaXMuX3RydW5jYXRlVG9OKGssIHRydWUpO1xuICAgIGlmIChrLmNtcG4oMSkgPD0gMCB8fCBrLmNtcChuczEpID49IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIHZhciBrcCA9IHRoaXMuZy5tdWwoayk7XG4gICAgaWYgKGtwLmlzSW5maW5pdHkoKSlcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgdmFyIGtwWCA9IGtwLmdldFgoKTtcbiAgICB2YXIgciA9IGtwWC5tb2QodGhpcy5uKTtcbiAgICBpZiAoci5jbXBuKDApID09PSAwKVxuICAgICAgY29udGludWU7XG5cbiAgICB2YXIgcyA9IGsuaW52bSh0aGlzLm4pLm11bChyLm11bChrZXkuZ2V0UHJpdmF0ZSgpKS5pYWRkKG1zZykpLm1vZCh0aGlzLm4pO1xuICAgIGlmIChzLmNtcG4oMCkgPT09IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIC8vIFVzZSBjb21wbGVtZW50IG9mIGBzYCwgaWYgaXQgaXMgPiBgbiAvIDJgXG4gICAgaWYgKG9wdGlvbnMuY2Fub25pY2FsICYmIHMuY21wKHRoaXMubmgpID4gMClcbiAgICAgIHMgPSB0aGlzLm4uc3ViKHMpO1xuXG4gICAgdmFyIHJlY292ZXJ5UGFyYW0gPSAoa3AuZ2V0WSgpLmlzT2RkKCkgPyAxIDogMCkgfFxuICAgICAgICAgICAgICAgICAgICAgICAgKGtwWC5jbXAocikgIT09IDAgPyAyIDogMCk7XG5cbiAgICByZXR1cm4gbmV3IFNpZ25hdHVyZSh7IHI6IHIsIHM6IHMsIHJlY292ZXJ5UGFyYW06IHJlY292ZXJ5UGFyYW0gfSk7XG4gIH0gd2hpbGUgKHRydWUpO1xufTtcblxuRUMucHJvdG90eXBlLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtc2csIHNpZ25hdHVyZSwga2V5LCBlbmMpIHtcbiAgbXNnID0gdGhpcy5fdHJ1bmNhdGVUb04obmV3IGJuKG1zZywgMTYpKTtcbiAga2V5ID0gdGhpcy5rZXlGcm9tUHVibGljKGtleSwgZW5jKTtcbiAgc2lnbmF0dXJlID0gbmV3IFNpZ25hdHVyZShzaWduYXR1cmUsICdoZXgnKTtcblxuICAvLyBQZXJmb3JtIHByaW1pdGl2ZSB2YWx1ZXMgdmFsaWRhdGlvblxuICB2YXIgciA9IHNpZ25hdHVyZS5yO1xuICB2YXIgcyA9IHNpZ25hdHVyZS5zO1xuICBpZiAoci5jbXBuKDEpIDwgMCB8fCByLmNtcCh0aGlzLm4pID49IDApXG4gICAgcmV0dXJuIGZhbHNlO1xuICBpZiAocy5jbXBuKDEpIDwgMCB8fCBzLmNtcCh0aGlzLm4pID49IDApXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIFZhbGlkYXRlIHNpZ25hdHVyZVxuICB2YXIgc2ludiA9IHMuaW52bSh0aGlzLm4pO1xuICB2YXIgdTEgPSBzaW52Lm11bChtc2cpLm1vZCh0aGlzLm4pO1xuICB2YXIgdTIgPSBzaW52Lm11bChyKS5tb2QodGhpcy5uKTtcblxuICB2YXIgcCA9IHRoaXMuZy5tdWxBZGQodTEsIGtleS5nZXRQdWJsaWMoKSwgdTIpO1xuICBpZiAocC5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiBwLmdldFgoKS5tb2QodGhpcy5uKS5jbXAocikgPT09IDA7XG59O1xuXG5FQy5wcm90b3R5cGUucmVjb3ZlclB1YktleSA9IGZ1bmN0aW9uKG1zZywgc2lnbmF0dXJlLCBqLCBlbmMpIHtcbiAgYXNzZXJ0KCgzICYgaikgPT09IGosICdUaGUgcmVjb3ZlcnkgcGFyYW0gaXMgbW9yZSB0aGFuIHR3byBiaXRzJyk7XG4gIHNpZ25hdHVyZSA9IG5ldyBTaWduYXR1cmUoc2lnbmF0dXJlLCBlbmMpO1xuXG4gIHZhciBuID0gdGhpcy5uO1xuICB2YXIgZSA9IG5ldyBibihtc2cpO1xuICB2YXIgciA9IHNpZ25hdHVyZS5yO1xuICB2YXIgcyA9IHNpZ25hdHVyZS5zO1xuXG4gIC8vIEEgc2V0IExTQiBzaWduaWZpZXMgdGhhdCB0aGUgeS1jb29yZGluYXRlIGlzIG9kZFxuICB2YXIgaXNZT2RkID0gaiAmIDE7XG4gIHZhciBpc1NlY29uZEtleSA9IGogPj4gMTtcbiAgaWYgKHIuY21wKHRoaXMuY3VydmUucC5tb2QodGhpcy5jdXJ2ZS5uKSkgPj0gMCAmJiBpc1NlY29uZEtleSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBmaW5kIHNlbmNvbmQga2V5IGNhbmRpbmF0ZScpO1xuXG4gIC8vIDEuMS4gTGV0IHggPSByICsgam4uXG4gIHIgPSB0aGlzLmN1cnZlLnBvaW50RnJvbVgoaXNZT2RkLCByKTtcbiAgdmFyIGVOZWcgPSBlLm5lZygpLm1vZChuKTtcblxuICAvLyAxLjYuMSBDb21wdXRlIFEgPSByXi0xIChzUiAtICBlRylcbiAgLy8gICAgICAgICAgICAgICBRID0gcl4tMSAoc1IgKyAtZUcpXG4gIHZhciBySW52ID0gc2lnbmF0dXJlLnIuaW52bShuKTtcbiAgcmV0dXJuIHIubXVsKHMpLmFkZCh0aGlzLmcubXVsKGVOZWcpKS5tdWwockludik7XG59O1xuXG5FQy5wcm90b3R5cGUuZ2V0S2V5UmVjb3ZlcnlQYXJhbSA9IGZ1bmN0aW9uKGUsIHNpZ25hdHVyZSwgUSwgZW5jKSB7XG4gIHNpZ25hdHVyZSA9IG5ldyBTaWduYXR1cmUoc2lnbmF0dXJlLCBlbmMpO1xuICBpZiAoc2lnbmF0dXJlLnJlY292ZXJ5UGFyYW0gIT09IG51bGwpXG4gICAgcmV0dXJuIHNpZ25hdHVyZS5yZWNvdmVyeVBhcmFtO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgdmFyIFFwcmltZSA9IHRoaXMucmVjb3ZlclB1YktleShlLCBzaWduYXR1cmUsIGkpO1xuXG4gICAgaWYgKFFwcmltZS5lcShRKSlcbiAgICAgIHJldHVybiBpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGZpbmQgdmFsaWQgcmVjb3ZlcnkgZmFjdG9yJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYm4gPSByZXF1aXJlKCdibi5qcycpO1xuXG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCcuLi8uLi9lbGxpcHRpYycpO1xudmFyIHV0aWxzID0gZWxsaXB0aWMudXRpbHM7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBTaWduYXR1cmUob3B0aW9ucywgZW5jKSB7XG4gIGlmIChvcHRpb25zIGluc3RhbmNlb2YgU2lnbmF0dXJlKVxuICAgIHJldHVybiBvcHRpb25zO1xuXG4gIGlmICh0aGlzLl9pbXBvcnRERVIob3B0aW9ucywgZW5jKSlcbiAgICByZXR1cm47XG5cbiAgYXNzZXJ0KG9wdGlvbnMuciAmJiBvcHRpb25zLnMsICdTaWduYXR1cmUgd2l0aG91dCByIG9yIHMnKTtcbiAgdGhpcy5yID0gbmV3IGJuKG9wdGlvbnMuciwgMTYpO1xuICB0aGlzLnMgPSBuZXcgYm4ob3B0aW9ucy5zLCAxNik7XG4gIGlmIChvcHRpb25zLnJlY292ZXJ5UGFyYW0gIT09IG51bGwpXG4gICAgdGhpcy5yZWNvdmVyeVBhcmFtID0gb3B0aW9ucy5yZWNvdmVyeVBhcmFtO1xuICBlbHNlXG4gICAgdGhpcy5yZWNvdmVyeVBhcmFtID0gbnVsbDtcbn1cbm1vZHVsZS5leHBvcnRzID0gU2lnbmF0dXJlO1xuXG5TaWduYXR1cmUucHJvdG90eXBlLl9pbXBvcnRERVIgPSBmdW5jdGlvbiBfaW1wb3J0REVSKGRhdGEsIGVuYykge1xuICBkYXRhID0gdXRpbHMudG9BcnJheShkYXRhLCBlbmMpO1xuICBpZiAoZGF0YS5sZW5ndGggPCA2IHx8IGRhdGFbMF0gIT09IDB4MzAgfHwgZGF0YVsyXSAhPT0gMHgwMilcbiAgICByZXR1cm4gZmFsc2U7XG4gIHZhciB0b3RhbCA9IGRhdGFbMV07XG4gIGlmICgxICsgdG90YWwgPiBkYXRhLmxlbmd0aClcbiAgICByZXR1cm4gZmFsc2U7XG4gIHZhciBybGVuID0gZGF0YVszXTtcbiAgLy8gU2hvcnQgbGVuZ3RoIG5vdGF0aW9uXG4gIGlmIChybGVuID49IDB4ODApXG4gICAgcmV0dXJuIGZhbHNlO1xuICBpZiAoNCArIHJsZW4gKyAyID49IGRhdGEubGVuZ3RoKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaWYgKGRhdGFbNCArIHJsZW5dICE9PSAweDAyKVxuICAgIHJldHVybiBmYWxzZTtcbiAgdmFyIHNsZW4gPSBkYXRhWzUgKyBybGVuXTtcbiAgLy8gU2hvcnQgbGVuZ3RoIG5vdGF0aW9uXG4gIGlmIChzbGVuID49IDB4ODApXG4gICAgcmV0dXJuIGZhbHNlO1xuICBpZiAoNCArIHJsZW4gKyAyICsgc2xlbiA+IGRhdGEubGVuZ3RoKVxuICAgIHJldHVybiBmYWxzZTtcblxuICB0aGlzLnIgPSBuZXcgYm4oZGF0YS5zbGljZSg0LCA0ICsgcmxlbikpO1xuICB0aGlzLnMgPSBuZXcgYm4oZGF0YS5zbGljZSg0ICsgcmxlbiArIDIsIDQgKyBybGVuICsgMiArIHNsZW4pKTtcbiAgdGhpcy5yZWNvdmVyeVBhcmFtID0gbnVsbDtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cblNpZ25hdHVyZS5wcm90b3R5cGUudG9ERVIgPSBmdW5jdGlvbiB0b0RFUihlbmMpIHtcbiAgdmFyIHIgPSB0aGlzLnIudG9BcnJheSgpO1xuICB2YXIgcyA9IHRoaXMucy50b0FycmF5KCk7XG5cbiAgLy8gUGFkIHZhbHVlc1xuICBpZiAoclswXSAmIDB4ODApXG4gICAgciA9IFsgMCBdLmNvbmNhdChyKTtcbiAgLy8gUGFkIHZhbHVlc1xuICBpZiAoc1swXSAmIDB4ODApXG4gICAgcyA9IFsgMCBdLmNvbmNhdChzKTtcblxuICB2YXIgdG90YWwgPSByLmxlbmd0aCArIHMubGVuZ3RoICsgNDtcbiAgdmFyIHJlcyA9IFsgMHgzMCwgdG90YWwsIDB4MDIsIHIubGVuZ3RoIF07XG4gIHJlcyA9IHJlcy5jb25jYXQociwgWyAweDAyLCBzLmxlbmd0aCBdLCBzKTtcbiAgcmV0dXJuIHV0aWxzLmVuY29kZShyZXMsIGVuYyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYm4gPSByZXF1aXJlKCdibi5qcycpO1xuXG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCcuLi8uLi9lbGxpcHRpYycpO1xudmFyIHV0aWxzID0gZWxsaXB0aWMudXRpbHM7XG5cbmZ1bmN0aW9uIEtleVBhaXIoZWMsIG9wdGlvbnMpIHtcbiAgdGhpcy5lYyA9IGVjO1xuICB0aGlzLnByaXYgPSBudWxsO1xuICB0aGlzLnB1YiA9IG51bGw7XG5cbiAgLy8gS2V5UGFpcihlYywgeyBwcml2OiAuLi4sIHB1YjogLi4uIH0pXG4gIGlmIChvcHRpb25zLnByaXYpXG4gICAgdGhpcy5faW1wb3J0UHJpdmF0ZShvcHRpb25zLnByaXYsIG9wdGlvbnMucHJpdkVuYyk7XG4gIGlmIChvcHRpb25zLnB1YilcbiAgICB0aGlzLl9pbXBvcnRQdWJsaWMob3B0aW9ucy5wdWIsIG9wdGlvbnMucHViRW5jKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gS2V5UGFpcjtcblxuS2V5UGFpci5mcm9tUHVibGljID0gZnVuY3Rpb24gZnJvbVB1YmxpYyhlYywgcHViLCBlbmMpIHtcbiAgaWYgKHB1YiBpbnN0YW5jZW9mIEtleVBhaXIpXG4gICAgcmV0dXJuIHB1YjtcblxuICByZXR1cm4gbmV3IEtleVBhaXIoZWMsIHtcbiAgICBwdWI6IHB1YixcbiAgICBwdWJFbmM6IGVuY1xuICB9KTtcbn07XG5cbktleVBhaXIuZnJvbVByaXZhdGUgPSBmdW5jdGlvbiBmcm9tUHJpdmF0ZShlYywgcHJpdiwgZW5jKSB7XG4gIGlmIChwcml2IGluc3RhbmNlb2YgS2V5UGFpcilcbiAgICByZXR1cm4gcHJpdjtcblxuICByZXR1cm4gbmV3IEtleVBhaXIoZWMsIHtcbiAgICBwcml2OiBwcml2LFxuICAgIHByaXZFbmM6IGVuY1xuICB9KTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUoKSB7XG4gIHZhciBwdWIgPSB0aGlzLmdldFB1YmxpYygpO1xuXG4gIGlmIChwdWIuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB7IHJlc3VsdDogZmFsc2UsIHJlYXNvbjogJ0ludmFsaWQgcHVibGljIGtleScgfTtcbiAgaWYgKCFwdWIudmFsaWRhdGUoKSlcbiAgICByZXR1cm4geyByZXN1bHQ6IGZhbHNlLCByZWFzb246ICdQdWJsaWMga2V5IGlzIG5vdCBhIHBvaW50JyB9O1xuICBpZiAoIXB1Yi5tdWwodGhpcy5lYy5jdXJ2ZS5uKS5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHsgcmVzdWx0OiBmYWxzZSwgcmVhc29uOiAnUHVibGljIGtleSAqIE4gIT0gTycgfTtcblxuICByZXR1cm4geyByZXN1bHQ6IHRydWUsIHJlYXNvbjogbnVsbCB9O1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuZ2V0UHVibGljID0gZnVuY3Rpb24gZ2V0UHVibGljKGNvbXBhY3QsIGVuYykge1xuICBpZiAoIXRoaXMucHViKVxuICAgIHRoaXMucHViID0gdGhpcy5lYy5nLm11bCh0aGlzLnByaXYpO1xuXG4gIC8vIGNvbXBhY3QgaXMgb3B0aW9uYWwgYXJndW1lbnRcbiAgaWYgKHR5cGVvZiBjb21wYWN0ID09PSAnc3RyaW5nJykge1xuICAgIGVuYyA9IGNvbXBhY3Q7XG4gICAgY29tcGFjdCA9IG51bGw7XG4gIH1cblxuICBpZiAoIWVuYylcbiAgICByZXR1cm4gdGhpcy5wdWI7XG5cbiAgdmFyIGxlbiA9IHRoaXMuZWMuY3VydmUucC5ieXRlTGVuZ3RoKCk7XG4gIHZhciB4ID0gdGhpcy5wdWIuZ2V0WCgpLnRvQXJyYXkoKTtcblxuICBmb3IgKHZhciBpID0geC5sZW5ndGg7IGkgPCBsZW47IGkrKylcbiAgICB4LnVuc2hpZnQoMCk7XG5cbiAgdmFyIHJlcztcbiAgaWYgKHRoaXMuZWMuY3VydmUudHlwZSAhPT0gJ21vbnQnKSB7XG4gICAgaWYgKGNvbXBhY3QpIHtcbiAgICAgIHJlcyA9IFsgdGhpcy5wdWIuZ2V0WSgpLmlzRXZlbigpID8gMHgwMiA6IDB4MDMgXS5jb25jYXQoeCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB5ID0gdGhpcy5wdWIuZ2V0WSgpLnRvQXJyYXkoKTtcbiAgICAgIGZvciAodmFyIGkgPSB5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKVxuICAgICAgICB5LnVuc2hpZnQoMCk7XG4gICAgICB2YXIgcmVzID0gWyAweDA0IF0uY29uY2F0KHgsIHkpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXMgPSB4O1xuICB9XG5cbiAgcmV0dXJuIHV0aWxzLmVuY29kZShyZXMsIGVuYyk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5nZXRQcml2YXRlID0gZnVuY3Rpb24gZ2V0UHJpdmF0ZShlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHRoaXMucHJpdi50b1N0cmluZygxNiwgMik7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5wcml2O1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuX2ltcG9ydFByaXZhdGUgPSBmdW5jdGlvbiBfaW1wb3J0UHJpdmF0ZShrZXksIGVuYykge1xuICB0aGlzLnByaXYgPSBuZXcgYm4oa2V5LCBlbmMgfHwgMTYpO1xuXG4gIC8vIEVuc3VyZSB0aGF0IHRoZSBwcml2IHdvbid0IGJlIGJpZ2dlciB0aGFuIG4sIG90aGVyd2lzZSB3ZSBtYXkgZmFpbFxuICAvLyBpbiBmaXhlZCBtdWx0aXBsaWNhdGlvbiBtZXRob2RcbiAgdGhpcy5wcml2ID0gdGhpcy5wcml2Lm1vZCh0aGlzLmVjLmN1cnZlLm4pO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuX2ltcG9ydFB1YmxpYyA9IGZ1bmN0aW9uIF9pbXBvcnRQdWJsaWMoa2V5LCBlbmMpIHtcbiAgaWYgKGtleS54IHx8IGtleS55KSB7XG4gICAgdGhpcy5wdWIgPSB0aGlzLmVjLmN1cnZlLnBvaW50KGtleS54LCBrZXkueSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAga2V5ID0gdXRpbHMudG9BcnJheShrZXksIGVuYyk7XG4gIGlmICh0aGlzLmVjLmN1cnZlLnR5cGUgIT09ICdtb250JylcbiAgICByZXR1cm4gdGhpcy5faW1wb3J0UHVibGljU2hvcnQoa2V5KTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLl9pbXBvcnRQdWJsaWNNb250KGtleSk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5faW1wb3J0UHVibGljU2hvcnQgPSBmdW5jdGlvbiBfaW1wb3J0UHVibGljU2hvcnQoa2V5KSB7XG4gIHZhciBsZW4gPSB0aGlzLmVjLmN1cnZlLnAuYnl0ZUxlbmd0aCgpO1xuICBpZiAoa2V5WzBdID09PSAweDA0ICYmIGtleS5sZW5ndGggLSAxID09PSAyICogbGVuKSB7XG4gICAgdGhpcy5wdWIgPSB0aGlzLmVjLmN1cnZlLnBvaW50KFxuICAgICAga2V5LnNsaWNlKDEsIDEgKyBsZW4pLFxuICAgICAga2V5LnNsaWNlKDEgKyBsZW4sIDEgKyAyICogbGVuKSk7XG4gIH0gZWxzZSBpZiAoKGtleVswXSA9PT0gMHgwMiB8fCBrZXlbMF0gPT09IDB4MDMpICYmIGtleS5sZW5ndGggLSAxID09PSBsZW4pIHtcbiAgICB0aGlzLnB1YiA9IHRoaXMuZWMuY3VydmUucG9pbnRGcm9tWChrZXlbMF0gPT09IDB4MDMsIGtleS5zbGljZSgxLCAxICsgbGVuKSk7XG4gIH1cbn07XG5cbktleVBhaXIucHJvdG90eXBlLl9pbXBvcnRQdWJsaWNNb250ID0gZnVuY3Rpb24gX2ltcG9ydFB1YmxpY01vbnQoa2V5KSB7XG4gIHRoaXMucHViID0gdGhpcy5lYy5jdXJ2ZS5wb2ludChrZXksIDEpO1xufTtcblxuLy8gRUNESFxuS2V5UGFpci5wcm90b3R5cGUuZGVyaXZlID0gZnVuY3Rpb24gZGVyaXZlKHB1Yikge1xuICByZXR1cm4gcHViLm11bCh0aGlzLnByaXYpLmdldFgoKTtcbn07XG5cbi8vIEVDRFNBXG5LZXlQYWlyLnByb3RvdHlwZS5zaWduID0gZnVuY3Rpb24gc2lnbihtc2cpIHtcbiAgcmV0dXJuIHRoaXMuZWMuc2lnbihtc2csIHRoaXMpO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5KG1zZywgc2lnbmF0dXJlKSB7XG4gIHJldHVybiB0aGlzLmVjLnZlcmlmeShtc2csIHNpZ25hdHVyZSwgdGhpcyk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgcmV0dXJuICc8S2V5IHByaXY6ICcgKyAodGhpcy5wcml2ICYmIHRoaXMucHJpdi50b1N0cmluZygxNiwgMikpICtcbiAgICAgICAgICcgcHViOiAnICsgKHRoaXMucHViICYmIHRoaXMucHViLmluc3BlY3QoKSkgKyAnID4nO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGN1cnZlcyA9IGV4cG9ydHM7XG5cbnZhciBoYXNoID0gcmVxdWlyZSgnaGFzaC5qcycpO1xudmFyIGVsbGlwdGljID0gcmVxdWlyZSgnLi4vZWxsaXB0aWMnKTtcblxudmFyIGFzc2VydCA9IGVsbGlwdGljLnV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gUHJlc2V0Q3VydmUob3B0aW9ucykge1xuICBpZiAob3B0aW9ucy50eXBlID09PSAnc2hvcnQnKVxuICAgIHRoaXMuY3VydmUgPSBuZXcgZWxsaXB0aWMuY3VydmUuc2hvcnQob3B0aW9ucyk7XG4gIGVsc2UgaWYgKG9wdGlvbnMudHlwZSA9PT0gJ2Vkd2FyZHMnKVxuICAgIHRoaXMuY3VydmUgPSBuZXcgZWxsaXB0aWMuY3VydmUuZWR3YXJkcyhvcHRpb25zKTtcbiAgZWxzZVxuICAgIHRoaXMuY3VydmUgPSBuZXcgZWxsaXB0aWMuY3VydmUubW9udChvcHRpb25zKTtcbiAgdGhpcy5nID0gdGhpcy5jdXJ2ZS5nO1xuICB0aGlzLm4gPSB0aGlzLmN1cnZlLm47XG4gIHRoaXMuaGFzaCA9IG9wdGlvbnMuaGFzaDtcblxuICBhc3NlcnQodGhpcy5nLnZhbGlkYXRlKCksICdJbnZhbGlkIGN1cnZlJyk7XG4gIGFzc2VydCh0aGlzLmcubXVsKHRoaXMubikuaXNJbmZpbml0eSgpLCAnSW52YWxpZCBjdXJ2ZSwgRypOICE9IE8nKTtcbn1cbmN1cnZlcy5QcmVzZXRDdXJ2ZSA9IFByZXNldEN1cnZlO1xuXG5mdW5jdGlvbiBkZWZpbmVDdXJ2ZShuYW1lLCBvcHRpb25zKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdXJ2ZXMsIG5hbWUsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGN1cnZlID0gbmV3IFByZXNldEN1cnZlKG9wdGlvbnMpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN1cnZlcywgbmFtZSwge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiBjdXJ2ZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gY3VydmU7XG4gICAgfVxuICB9KTtcbn1cblxuZGVmaW5lQ3VydmUoJ3AxOTInLCB7XG4gIHR5cGU6ICdzaG9ydCcsXG4gIHByaW1lOiAncDE5MicsXG4gIHA6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmZicsXG4gIGE6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmYycsXG4gIGI6ICc2NDIxMDUxOSBlNTljODBlNyAwZmE3ZTlhYiA3MjI0MzA0OSBmZWI4ZGVlYyBjMTQ2YjliMScsXG4gIG46ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiA5OWRlZjgzNiAxNDZiYzliMSBiNGQyMjgzMScsXG4gIGhhc2g6IGhhc2guc2hhMjU2LFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICcxODhkYTgwZSBiMDMwOTBmNiA3Y2JmMjBlYiA0M2ExODgwMCBmNGZmMGFmZCA4MmZmMTAxMicsXG4gICAgJzA3MTkyYjk1IGZmYzhkYTc4IDYzMTAxMWVkIDZiMjRjZGQ1IDczZjk3N2ExIDFlNzk0ODExJ1xuICBdXG59KTtcblxuZGVmaW5lQ3VydmUoJ3AyMjQnLCB7XG4gIHR5cGU6ICdzaG9ydCcsXG4gIHByaW1lOiAncDIyNCcsXG4gIHA6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMScsXG4gIGE6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZScsXG4gIGI6ICdiNDA1MGE4NSAwYzA0YjNhYiBmNTQxMzI1NiA1MDQ0YjBiNyBkN2JmZDhiYSAyNzBiMzk0MyAyMzU1ZmZiNCcsXG4gIG46ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmMTZhMiBlMGI4ZjAzZSAxM2RkMjk0NSA1YzVjMmEzZCcsXG4gIGhhc2g6IGhhc2guc2hhMjU2LFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICdiNzBlMGNiZCA2YmI0YmY3ZiAzMjEzOTBiOSA0YTAzYzFkMyA1NmMyMTEyMiAzNDMyODBkNiAxMTVjMWQyMScsXG4gICAgJ2JkMzc2Mzg4IGI1ZjcyM2ZiIDRjMjJkZmU2IGNkNDM3NWEwIDVhMDc0NzY0IDQ0ZDU4MTk5IDg1MDA3ZTM0J1xuICBdXG59KTtcblxuZGVmaW5lQ3VydmUoJ3AyNTYnLCB7XG4gIHR5cGU6ICdzaG9ydCcsXG4gIHByaW1lOiBudWxsLFxuICBwOiAnZmZmZmZmZmYgMDAwMDAwMDEgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDAgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYnLFxuICBhOiAnZmZmZmZmZmYgMDAwMDAwMDEgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDAgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmMnLFxuICBiOiAnNWFjNjM1ZDggYWEzYTkzZTcgYjNlYmJkNTUgNzY5ODg2YmMgNjUxZDA2YjAgY2M1M2IwZjYgM2JjZTNjM2UgMjdkMjYwNGInLFxuICBuOiAnZmZmZmZmZmYgMDAwMDAwMDAgZmZmZmZmZmYgZmZmZmZmZmYgYmNlNmZhYWQgYTcxNzllODQgZjNiOWNhYzIgZmM2MzI1NTEnLFxuICBoYXNoOiBoYXNoLnNoYTI1NixcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnNmIxN2QxZjIgZTEyYzQyNDcgZjhiY2U2ZTUgNjNhNDQwZjIgNzcwMzdkODEgMmRlYjMzYTAgZjRhMTM5NDUgZDg5OGMyOTYnLFxuICAgICc0ZmUzNDJlMiBmZTFhN2Y5YiA4ZWU3ZWI0YSA3YzBmOWUxNiAyYmNlMzM1NyA2YjMxNWVjZSBjYmI2NDA2OCAzN2JmNTFmNSdcbiAgXVxufSk7XG5cbmRlZmluZUN1cnZlKCdjdXJ2ZTI1NTE5Jywge1xuICB0eXBlOiAnbW9udCcsXG4gIHByaW1lOiAncDI1NTE5JyxcbiAgcDogJzdmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZWQnLFxuICBhOiAnNzZkMDYnLFxuICBiOiAnMCcsXG4gIG46ICcxMDAwMDAwMDAwMDAwMDAwIDAwMDAwMDAwMDAwMDAwMDAgMTRkZWY5ZGVhMmY3OWNkNiA1ODEyNjMxYTVjZjVkM2VkJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzknXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgnZWQyNTUxOScsIHtcbiAgdHlwZTogJ2Vkd2FyZHMnLFxuICBwcmltZTogJ3AyNTUxOScsXG4gIHA6ICc3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkJyxcbiAgYTogJy0xJyxcbiAgYzogJzEnLFxuICAvLyAtMTIxNjY1ICogKDEyMTY2Nl4oLTEpKSAobW9kIFApXG4gIGQ6ICc1MjAzNmNlZTJiNmZmZTczIDhjYzc0MDc5Nzc3OWU4OTggMDA3MDBhNGQ0MTQxZDhhYiA3NWViNGRjYTEzNTk3OGEzJyxcbiAgbjogJzEwMDAwMDAwMDAwMDAwMDAgMDAwMDAwMDAwMDAwMDAwMCAxNGRlZjlkZWEyZjc5Y2Q2IDU4MTI2MzFhNWNmNWQzZWQnLFxuICBoYXNoOiBoYXNoLnNoYTI1NixcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnMjE2OTM2ZDNjZDZlNTNmZWMwYTRlMjMxZmRkNmRjNWM2OTJjYzc2MDk1MjVhN2IyYzk1NjJkNjA4ZjI1ZDUxYScsXG5cbiAgICAvLyA0LzVcbiAgICAnNjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY1OCdcbiAgXVxufSk7XG5cbnZhciBwcmU7XG50cnkge1xuICBwcmUgPSByZXF1aXJlKCcuL3ByZWNvbXB1dGVkL3NlY3AyNTZrMScpO1xufSBjYXRjaCAoZSkge1xuICBwcmUgPSB1bmRlZmluZWQ7XG59XG5cbmRlZmluZUN1cnZlKCdzZWNwMjU2azEnLCB7XG4gIHR5cGU6ICdzaG9ydCcsXG4gIHByaW1lOiAnazI1NicsXG4gIHA6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmMyZicsXG4gIGE6ICcwJyxcbiAgYjogJzcnLFxuICBuOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgYmFhZWRjZTYgYWY0OGEwM2IgYmZkMjVlOGMgZDAzNjQxNDEnLFxuICBoOiAnMScsXG4gIGhhc2g6IGhhc2guc2hhMjU2LFxuXG4gIC8vIFByZWNvbXB1dGVkIGVuZG9tb3JwaGlzbVxuICBiZXRhOiAnN2FlOTZhMmI2NTdjMDcxMDZlNjQ0NzllYWMzNDM0ZTk5Y2YwNDk3NTEyZjU4OTk1YzEzOTZjMjg3MTk1MDFlZScsXG4gIGxhbWJkYTogJzUzNjNhZDRjYzA1YzMwZTBhNTI2MWMwMjg4MTI2NDVhMTIyZTIyZWEyMDgxNjY3OGRmMDI5NjdjMWIyM2JkNzInLFxuICBiYXNpczogW1xuICAgIHtcbiAgICAgIGE6ICczMDg2ZDIyMWE3ZDQ2YmNkZTg2YzkwZTQ5Mjg0ZWIxNScsXG4gICAgICBiOiAnLWU0NDM3ZWQ2MDEwZTg4Mjg2ZjU0N2ZhOTBhYmZlNGMzJ1xuICAgIH0sXG4gICAge1xuICAgICAgYTogJzExNGNhNTBmN2E4ZTJmM2Y2NTdjMTEwOGQ5ZDQ0Y2ZkOCcsXG4gICAgICBiOiAnMzA4NmQyMjFhN2Q0NmJjZGU4NmM5MGU0OTI4NGViMTUnXG4gICAgfVxuICBdLFxuXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzc5YmU2NjdlZjlkY2JiYWM1NWEwNjI5NWNlODcwYjA3MDI5YmZjZGIyZGNlMjhkOTU5ZjI4MTViMTZmODE3OTgnLFxuICAgICc0ODNhZGE3NzI2YTNjNDY1NWRhNGZiZmMwZTExMDhhOGZkMTdiNDQ4YTY4NTU0MTk5YzQ3ZDA4ZmZiMTBkNGI4JyxcbiAgICBwcmVcbiAgXVxufSk7XG4iLCJ2YXIgaGFzaCA9IGV4cG9ydHM7XG5cbmhhc2gudXRpbHMgPSByZXF1aXJlKCcuL2hhc2gvdXRpbHMnKTtcbmhhc2guY29tbW9uID0gcmVxdWlyZSgnLi9oYXNoL2NvbW1vbicpO1xuaGFzaC5zaGEgPSByZXF1aXJlKCcuL2hhc2gvc2hhJyk7XG5oYXNoLnJpcGVtZCA9IHJlcXVpcmUoJy4vaGFzaC9yaXBlbWQnKTtcbmhhc2guaG1hYyA9IHJlcXVpcmUoJy4vaGFzaC9obWFjJyk7XG5cbi8vIFByb3h5IGhhc2ggZnVuY3Rpb25zIHRvIHRoZSBtYWluIG9iamVjdFxuaGFzaC5zaGExID0gaGFzaC5zaGEuc2hhMTtcbmhhc2guc2hhMjU2ID0gaGFzaC5zaGEuc2hhMjU2O1xuaGFzaC5zaGEyMjQgPSBoYXNoLnNoYS5zaGEyMjQ7XG5oYXNoLnNoYTM4NCA9IGhhc2guc2hhLnNoYTM4NDtcbmhhc2guc2hhNTEyID0gaGFzaC5zaGEuc2hhNTEyO1xuaGFzaC5yaXBlbWQxNjAgPSBoYXNoLnJpcGVtZC5yaXBlbWQxNjA7XG4iLCJ2YXIgdXRpbHMgPSBleHBvcnRzO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxuZnVuY3Rpb24gdG9BcnJheShtc2csIGVuYykge1xuICBpZiAoQXJyYXkuaXNBcnJheShtc2cpKVxuICAgIHJldHVybiBtc2cuc2xpY2UoKTtcbiAgaWYgKCFtc2cpXG4gICAgcmV0dXJuIFtdO1xuICB2YXIgcmVzID0gW107XG4gIGlmICh0eXBlb2YgbXNnID09PSAnc3RyaW5nJykge1xuICAgIGlmICghZW5jKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgYyA9IG1zZy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB2YXIgaGkgPSBjID4+IDg7XG4gICAgICAgIHZhciBsbyA9IGMgJiAweGZmO1xuICAgICAgICBpZiAoaGkpXG4gICAgICAgICAgcmVzLnB1c2goaGksIGxvKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHJlcy5wdXNoKGxvKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVuYyA9PT0gJ2hleCcpIHtcbiAgICAgIG1zZyA9IG1zZy5yZXBsYWNlKC9bXmEtejAtOV0rL2lnLCAnJyk7XG4gICAgICBpZiAobXNnLmxlbmd0aCAlIDIgIT09IDApXG4gICAgICAgIG1zZyA9ICcwJyArIG1zZztcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSArPSAyKVxuICAgICAgICByZXMucHVzaChwYXJzZUludChtc2dbaV0gKyBtc2dbaSArIDFdLCAxNikpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKylcbiAgICAgIHJlc1tpXSA9IG1zZ1tpXSB8IDA7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbnV0aWxzLnRvQXJyYXkgPSB0b0FycmF5O1xuXG5mdW5jdGlvbiB0b0hleChtc2cpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKylcbiAgICByZXMgKz0gemVybzIobXNnW2ldLnRvU3RyaW5nKDE2KSk7XG4gIHJldHVybiByZXM7XG59XG51dGlscy50b0hleCA9IHRvSGV4O1xuXG5mdW5jdGlvbiBodG9ubCh3KSB7XG4gIHZhciByZXMgPSAodyA+Pj4gMjQpIHxcbiAgICAgICAgICAgICgodyA+Pj4gOCkgJiAweGZmMDApIHxcbiAgICAgICAgICAgICgodyA8PCA4KSAmIDB4ZmYwMDAwKSB8XG4gICAgICAgICAgICAoKHcgJiAweGZmKSA8PCAyNCk7XG4gIHJldHVybiByZXMgPj4+IDA7XG59XG51dGlscy5odG9ubCA9IGh0b25sO1xuXG5mdW5jdGlvbiB0b0hleDMyKG1zZywgZW5kaWFuKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdyA9IG1zZ1tpXTtcbiAgICBpZiAoZW5kaWFuID09PSAnbGl0dGxlJylcbiAgICAgIHcgPSBodG9ubCh3KTtcbiAgICByZXMgKz0gemVybzgody50b1N0cmluZygxNikpO1xuICB9XG4gIHJldHVybiByZXM7XG59XG51dGlscy50b0hleDMyID0gdG9IZXgzMjtcblxuZnVuY3Rpb24gemVybzIod29yZCkge1xuICBpZiAod29yZC5sZW5ndGggPT09IDEpXG4gICAgcmV0dXJuICcwJyArIHdvcmQ7XG4gIGVsc2VcbiAgICByZXR1cm4gd29yZDtcbn1cbnV0aWxzLnplcm8yID0gemVybzI7XG5cbmZ1bmN0aW9uIHplcm84KHdvcmQpIHtcbiAgaWYgKHdvcmQubGVuZ3RoID09PSA3KVxuICAgIHJldHVybiAnMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gNilcbiAgICByZXR1cm4gJzAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSA1KVxuICAgIHJldHVybiAnMDAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSA0KVxuICAgIHJldHVybiAnMDAwMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gMylcbiAgICByZXR1cm4gJzAwMDAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSAyKVxuICAgIHJldHVybiAnMDAwMDAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSAxKVxuICAgIHJldHVybiAnMDAwMDAwMCcgKyB3b3JkO1xuICBlbHNlXG4gICAgcmV0dXJuIHdvcmQ7XG59XG51dGlscy56ZXJvOCA9IHplcm84O1xuXG5mdW5jdGlvbiBqb2luMzIobXNnLCBzdGFydCwgZW5kLCBlbmRpYW4pIHtcbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0O1xuICBhc3NlcnQobGVuICUgNCA9PT0gMCk7XG4gIHZhciByZXMgPSBuZXcgQXJyYXkobGVuIC8gNCk7XG4gIGZvciAodmFyIGkgPSAwLCBrID0gc3RhcnQ7IGkgPCByZXMubGVuZ3RoOyBpKyssIGsgKz0gNCkge1xuICAgIHZhciB3O1xuICAgIGlmIChlbmRpYW4gPT09ICdiaWcnKVxuICAgICAgdyA9IChtc2dba10gPDwgMjQpIHwgKG1zZ1trICsgMV0gPDwgMTYpIHwgKG1zZ1trICsgMl0gPDwgOCkgfCBtc2dbayArIDNdO1xuICAgIGVsc2VcbiAgICAgIHcgPSAobXNnW2sgKyAzXSA8PCAyNCkgfCAobXNnW2sgKyAyXSA8PCAxNikgfCAobXNnW2sgKyAxXSA8PCA4KSB8IG1zZ1trXTtcbiAgICByZXNbaV0gPSB3ID4+PiAwO1xuICB9XG4gIHJldHVybiByZXM7XG59XG51dGlscy5qb2luMzIgPSBqb2luMzI7XG5cbmZ1bmN0aW9uIHNwbGl0MzIobXNnLCBlbmRpYW4pIHtcbiAgdmFyIHJlcyA9IG5ldyBBcnJheShtc2cubGVuZ3RoICogNCk7XG4gIGZvciAodmFyIGkgPSAwLCBrID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKywgayArPSA0KSB7XG4gICAgdmFyIG0gPSBtc2dbaV07XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2JpZycpIHtcbiAgICAgIHJlc1trXSA9IG0gPj4+IDI0O1xuICAgICAgcmVzW2sgKyAxXSA9IChtID4+PiAxNikgJiAweGZmO1xuICAgICAgcmVzW2sgKyAyXSA9IChtID4+PiA4KSAmIDB4ZmY7XG4gICAgICByZXNbayArIDNdID0gbSAmIDB4ZmY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc1trICsgM10gPSBtID4+PiAyNDtcbiAgICAgIHJlc1trICsgMl0gPSAobSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgIHJlc1trICsgMV0gPSAobSA+Pj4gOCkgJiAweGZmO1xuICAgICAgcmVzW2tdID0gbSAmIDB4ZmY7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59XG51dGlscy5zcGxpdDMyID0gc3BsaXQzMjtcblxuZnVuY3Rpb24gcm90cjMyKHcsIGIpIHtcbiAgcmV0dXJuICh3ID4+PiBiKSB8ICh3IDw8ICgzMiAtIGIpKTtcbn1cbnV0aWxzLnJvdHIzMiA9IHJvdHIzMjtcblxuZnVuY3Rpb24gcm90bDMyKHcsIGIpIHtcbiAgcmV0dXJuICh3IDw8IGIpIHwgKHcgPj4+ICgzMiAtIGIpKTtcbn1cbnV0aWxzLnJvdGwzMiA9IHJvdGwzMjtcblxuZnVuY3Rpb24gc3VtMzIoYSwgYikge1xuICByZXR1cm4gKGEgKyBiKSA+Pj4gMDtcbn1cbnV0aWxzLnN1bTMyID0gc3VtMzI7XG5cbmZ1bmN0aW9uIHN1bTMyXzMoYSwgYiwgYykge1xuICByZXR1cm4gKGEgKyBiICsgYykgPj4+IDA7XG59XG51dGlscy5zdW0zMl8zID0gc3VtMzJfMztcblxuZnVuY3Rpb24gc3VtMzJfNChhLCBiLCBjLCBkKSB7XG4gIHJldHVybiAoYSArIGIgKyBjICsgZCkgPj4+IDA7XG59XG51dGlscy5zdW0zMl80ID0gc3VtMzJfNDtcblxuZnVuY3Rpb24gc3VtMzJfNShhLCBiLCBjLCBkLCBlKSB7XG4gIHJldHVybiAoYSArIGIgKyBjICsgZCArIGUpID4+PiAwO1xufVxudXRpbHMuc3VtMzJfNSA9IHN1bTMyXzU7XG5cbmZ1bmN0aW9uIGFzc2VydChjb25kLCBtc2cpIHtcbiAgaWYgKCFjb25kKVxuICAgIHRocm93IG5ldyBFcnJvcihtc2cgfHwgJ0Fzc2VydGlvbiBmYWlsZWQnKTtcbn1cbnV0aWxzLmFzc2VydCA9IGFzc2VydDtcblxudXRpbHMuaW5oZXJpdHMgPSBpbmhlcml0cztcblxuZnVuY3Rpb24gc3VtNjQoYnVmLCBwb3MsIGFoLCBhbCkge1xuICB2YXIgYmggPSBidWZbcG9zXTtcbiAgdmFyIGJsID0gYnVmW3BvcyArIDFdO1xuXG4gIHZhciBsbyA9IChhbCArIGJsKSA+Pj4gMDtcbiAgdmFyIGhpID0gKGxvIDwgYWwgPyAxIDogMCkgKyBhaCArIGJoO1xuICBidWZbcG9zXSA9IGhpID4+PiAwO1xuICBidWZbcG9zICsgMV0gPSBsbztcbn1cbmV4cG9ydHMuc3VtNjQgPSBzdW02NDtcblxuZnVuY3Rpb24gc3VtNjRfaGkoYWgsIGFsLCBiaCwgYmwpIHtcbiAgdmFyIGxvID0gKGFsICsgYmwpID4+PiAwO1xuICB2YXIgaGkgPSAobG8gPCBhbCA/IDEgOiAwKSArIGFoICsgYmg7XG4gIHJldHVybiBoaSA+Pj4gMDtcbn07XG5leHBvcnRzLnN1bTY0X2hpID0gc3VtNjRfaGk7XG5cbmZ1bmN0aW9uIHN1bTY0X2xvKGFoLCBhbCwgYmgsIGJsKSB7XG4gIHZhciBsbyA9IGFsICsgYmw7XG4gIHJldHVybiBsbyA+Pj4gMDtcbn07XG5leHBvcnRzLnN1bTY0X2xvID0gc3VtNjRfbG87XG5cbmZ1bmN0aW9uIHN1bTY0XzRfaGkoYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCwgZGgsIGRsKSB7XG4gIHZhciBjYXJyeSA9IDA7XG4gIHZhciBsbyA9IGFsO1xuICBsbyA9IChsbyArIGJsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBhbCA/IDEgOiAwO1xuICBsbyA9IChsbyArIGNsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBjbCA/IDEgOiAwO1xuICBsbyA9IChsbyArIGRsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBkbCA/IDEgOiAwO1xuXG4gIHZhciBoaSA9IGFoICsgYmggKyBjaCArIGRoICsgY2Fycnk7XG4gIHJldHVybiBoaSA+Pj4gMDtcbn07XG5leHBvcnRzLnN1bTY0XzRfaGkgPSBzdW02NF80X2hpO1xuXG5mdW5jdGlvbiBzdW02NF80X2xvKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wsIGRoLCBkbCkge1xuICB2YXIgbG8gPSBhbCArIGJsICsgY2wgKyBkbDtcbiAgcmV0dXJuIGxvID4+PiAwO1xufTtcbmV4cG9ydHMuc3VtNjRfNF9sbyA9IHN1bTY0XzRfbG87XG5cbmZ1bmN0aW9uIHN1bTY0XzVfaGkoYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCwgZGgsIGRsLCBlaCwgZWwpIHtcbiAgdmFyIGNhcnJ5ID0gMDtcbiAgdmFyIGxvID0gYWw7XG4gIGxvID0gKGxvICsgYmwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGFsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgY2wpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGNsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgZGwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGRsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgZWwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGVsID8gMSA6IDA7XG5cbiAgdmFyIGhpID0gYWggKyBiaCArIGNoICsgZGggKyBlaCArIGNhcnJ5O1xuICByZXR1cm4gaGkgPj4+IDA7XG59O1xuZXhwb3J0cy5zdW02NF81X2hpID0gc3VtNjRfNV9oaTtcblxuZnVuY3Rpb24gc3VtNjRfNV9sbyhhaCwgYWwsIGJoLCBibCwgY2gsIGNsLCBkaCwgZGwsIGVoLCBlbCkge1xuICB2YXIgbG8gPSBhbCArIGJsICsgY2wgKyBkbCArIGVsO1xuXG4gIHJldHVybiBsbyA+Pj4gMDtcbn07XG5leHBvcnRzLnN1bTY0XzVfbG8gPSBzdW02NF81X2xvO1xuXG5mdW5jdGlvbiByb3RyNjRfaGkoYWgsIGFsLCBudW0pIHtcbiAgdmFyIHIgPSAoYWwgPDwgKDMyIC0gbnVtKSkgfCAoYWggPj4+IG51bSk7XG4gIHJldHVybiByID4+PiAwO1xufTtcbmV4cG9ydHMucm90cjY0X2hpID0gcm90cjY0X2hpO1xuXG5mdW5jdGlvbiByb3RyNjRfbG8oYWgsIGFsLCBudW0pIHtcbiAgdmFyIHIgPSAoYWggPDwgKDMyIC0gbnVtKSkgfCAoYWwgPj4+IG51bSk7XG4gIHJldHVybiByID4+PiAwO1xufTtcbmV4cG9ydHMucm90cjY0X2xvID0gcm90cjY0X2xvO1xuXG5mdW5jdGlvbiBzaHI2NF9oaShhaCwgYWwsIG51bSkge1xuICByZXR1cm4gYWggPj4+IG51bTtcbn07XG5leHBvcnRzLnNocjY0X2hpID0gc2hyNjRfaGk7XG5cbmZ1bmN0aW9uIHNocjY0X2xvKGFoLCBhbCwgbnVtKSB7XG4gIHZhciByID0gKGFoIDw8ICgzMiAtIG51bSkpIHwgKGFsID4+PiBudW0pO1xuICByZXR1cm4gciA+Pj4gMDtcbn07XG5leHBvcnRzLnNocjY0X2xvID0gc2hyNjRfbG87XG4iLCJ2YXIgaGFzaCA9IHJlcXVpcmUoJy4uL2hhc2gnKTtcbnZhciB1dGlscyA9IGhhc2gudXRpbHM7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG52YXIgcm90cjMyID0gdXRpbHMucm90cjMyO1xudmFyIHJvdGwzMiA9IHV0aWxzLnJvdGwzMjtcbnZhciBzdW0zMiA9IHV0aWxzLnN1bTMyO1xudmFyIHN1bTMyXzQgPSB1dGlscy5zdW0zMl80O1xudmFyIHN1bTMyXzUgPSB1dGlscy5zdW0zMl81O1xudmFyIHJvdHI2NF9oaSA9IHV0aWxzLnJvdHI2NF9oaTtcbnZhciByb3RyNjRfbG8gPSB1dGlscy5yb3RyNjRfbG87XG52YXIgc2hyNjRfaGkgPSB1dGlscy5zaHI2NF9oaTtcbnZhciBzaHI2NF9sbyA9IHV0aWxzLnNocjY0X2xvO1xudmFyIHN1bTY0ID0gdXRpbHMuc3VtNjQ7XG52YXIgc3VtNjRfaGkgPSB1dGlscy5zdW02NF9oaTtcbnZhciBzdW02NF9sbyA9IHV0aWxzLnN1bTY0X2xvO1xudmFyIHN1bTY0XzRfaGkgPSB1dGlscy5zdW02NF80X2hpO1xudmFyIHN1bTY0XzRfbG8gPSB1dGlscy5zdW02NF80X2xvO1xudmFyIHN1bTY0XzVfaGkgPSB1dGlscy5zdW02NF81X2hpO1xudmFyIHN1bTY0XzVfbG8gPSB1dGlscy5zdW02NF81X2xvO1xudmFyIEJsb2NrSGFzaCA9IGhhc2guY29tbW9uLkJsb2NrSGFzaDtcblxudmFyIHNoYTI1Nl9LID0gW1xuICAweDQyOGEyZjk4LCAweDcxMzc0NDkxLCAweGI1YzBmYmNmLCAweGU5YjVkYmE1LFxuICAweDM5NTZjMjViLCAweDU5ZjExMWYxLCAweDkyM2Y4MmE0LCAweGFiMWM1ZWQ1LFxuICAweGQ4MDdhYTk4LCAweDEyODM1YjAxLCAweDI0MzE4NWJlLCAweDU1MGM3ZGMzLFxuICAweDcyYmU1ZDc0LCAweDgwZGViMWZlLCAweDliZGMwNmE3LCAweGMxOWJmMTc0LFxuICAweGU0OWI2OWMxLCAweGVmYmU0Nzg2LCAweDBmYzE5ZGM2LCAweDI0MGNhMWNjLFxuICAweDJkZTkyYzZmLCAweDRhNzQ4NGFhLCAweDVjYjBhOWRjLCAweDc2Zjk4OGRhLFxuICAweDk4M2U1MTUyLCAweGE4MzFjNjZkLCAweGIwMDMyN2M4LCAweGJmNTk3ZmM3LFxuICAweGM2ZTAwYmYzLCAweGQ1YTc5MTQ3LCAweDA2Y2E2MzUxLCAweDE0MjkyOTY3LFxuICAweDI3YjcwYTg1LCAweDJlMWIyMTM4LCAweDRkMmM2ZGZjLCAweDUzMzgwZDEzLFxuICAweDY1MGE3MzU0LCAweDc2NmEwYWJiLCAweDgxYzJjOTJlLCAweDkyNzIyYzg1LFxuICAweGEyYmZlOGExLCAweGE4MWE2NjRiLCAweGMyNGI4YjcwLCAweGM3NmM1MWEzLFxuICAweGQxOTJlODE5LCAweGQ2OTkwNjI0LCAweGY0MGUzNTg1LCAweDEwNmFhMDcwLFxuICAweDE5YTRjMTE2LCAweDFlMzc2YzA4LCAweDI3NDg3NzRjLCAweDM0YjBiY2I1LFxuICAweDM5MWMwY2IzLCAweDRlZDhhYTRhLCAweDViOWNjYTRmLCAweDY4MmU2ZmYzLFxuICAweDc0OGY4MmVlLCAweDc4YTU2MzZmLCAweDg0Yzg3ODE0LCAweDhjYzcwMjA4LFxuICAweDkwYmVmZmZhLCAweGE0NTA2Y2ViLCAweGJlZjlhM2Y3LCAweGM2NzE3OGYyXG5dO1xuXG52YXIgc2hhNTEyX0sgPSBbXG4gIDB4NDI4YTJmOTgsIDB4ZDcyOGFlMjIsIDB4NzEzNzQ0OTEsIDB4MjNlZjY1Y2QsXG4gIDB4YjVjMGZiY2YsIDB4ZWM0ZDNiMmYsIDB4ZTliNWRiYTUsIDB4ODE4OWRiYmMsXG4gIDB4Mzk1NmMyNWIsIDB4ZjM0OGI1MzgsIDB4NTlmMTExZjEsIDB4YjYwNWQwMTksXG4gIDB4OTIzZjgyYTQsIDB4YWYxOTRmOWIsIDB4YWIxYzVlZDUsIDB4ZGE2ZDgxMTgsXG4gIDB4ZDgwN2FhOTgsIDB4YTMwMzAyNDIsIDB4MTI4MzViMDEsIDB4NDU3MDZmYmUsXG4gIDB4MjQzMTg1YmUsIDB4NGVlNGIyOGMsIDB4NTUwYzdkYzMsIDB4ZDVmZmI0ZTIsXG4gIDB4NzJiZTVkNzQsIDB4ZjI3Yjg5NmYsIDB4ODBkZWIxZmUsIDB4M2IxNjk2YjEsXG4gIDB4OWJkYzA2YTcsIDB4MjVjNzEyMzUsIDB4YzE5YmYxNzQsIDB4Y2Y2OTI2OTQsXG4gIDB4ZTQ5YjY5YzEsIDB4OWVmMTRhZDIsIDB4ZWZiZTQ3ODYsIDB4Mzg0ZjI1ZTMsXG4gIDB4MGZjMTlkYzYsIDB4OGI4Y2Q1YjUsIDB4MjQwY2ExY2MsIDB4NzdhYzljNjUsXG4gIDB4MmRlOTJjNmYsIDB4NTkyYjAyNzUsIDB4NGE3NDg0YWEsIDB4NmVhNmU0ODMsXG4gIDB4NWNiMGE5ZGMsIDB4YmQ0MWZiZDQsIDB4NzZmOTg4ZGEsIDB4ODMxMTUzYjUsXG4gIDB4OTgzZTUxNTIsIDB4ZWU2NmRmYWIsIDB4YTgzMWM2NmQsIDB4MmRiNDMyMTAsXG4gIDB4YjAwMzI3YzgsIDB4OThmYjIxM2YsIDB4YmY1OTdmYzcsIDB4YmVlZjBlZTQsXG4gIDB4YzZlMDBiZjMsIDB4M2RhODhmYzIsIDB4ZDVhNzkxNDcsIDB4OTMwYWE3MjUsXG4gIDB4MDZjYTYzNTEsIDB4ZTAwMzgyNmYsIDB4MTQyOTI5NjcsIDB4MGEwZTZlNzAsXG4gIDB4MjdiNzBhODUsIDB4NDZkMjJmZmMsIDB4MmUxYjIxMzgsIDB4NWMyNmM5MjYsXG4gIDB4NGQyYzZkZmMsIDB4NWFjNDJhZWQsIDB4NTMzODBkMTMsIDB4OWQ5NWIzZGYsXG4gIDB4NjUwYTczNTQsIDB4OGJhZjYzZGUsIDB4NzY2YTBhYmIsIDB4M2M3N2IyYTgsXG4gIDB4ODFjMmM5MmUsIDB4NDdlZGFlZTYsIDB4OTI3MjJjODUsIDB4MTQ4MjM1M2IsXG4gIDB4YTJiZmU4YTEsIDB4NGNmMTAzNjQsIDB4YTgxYTY2NGIsIDB4YmM0MjMwMDEsXG4gIDB4YzI0YjhiNzAsIDB4ZDBmODk3OTEsIDB4Yzc2YzUxYTMsIDB4MDY1NGJlMzAsXG4gIDB4ZDE5MmU4MTksIDB4ZDZlZjUyMTgsIDB4ZDY5OTA2MjQsIDB4NTU2NWE5MTAsXG4gIDB4ZjQwZTM1ODUsIDB4NTc3MTIwMmEsIDB4MTA2YWEwNzAsIDB4MzJiYmQxYjgsXG4gIDB4MTlhNGMxMTYsIDB4YjhkMmQwYzgsIDB4MWUzNzZjMDgsIDB4NTE0MWFiNTMsXG4gIDB4Mjc0ODc3NGMsIDB4ZGY4ZWViOTksIDB4MzRiMGJjYjUsIDB4ZTE5YjQ4YTgsXG4gIDB4MzkxYzBjYjMsIDB4YzVjOTVhNjMsIDB4NGVkOGFhNGEsIDB4ZTM0MThhY2IsXG4gIDB4NWI5Y2NhNGYsIDB4Nzc2M2UzNzMsIDB4NjgyZTZmZjMsIDB4ZDZiMmI4YTMsXG4gIDB4NzQ4ZjgyZWUsIDB4NWRlZmIyZmMsIDB4NzhhNTYzNmYsIDB4NDMxNzJmNjAsXG4gIDB4ODRjODc4MTQsIDB4YTFmMGFiNzIsIDB4OGNjNzAyMDgsIDB4MWE2NDM5ZWMsXG4gIDB4OTBiZWZmZmEsIDB4MjM2MzFlMjgsIDB4YTQ1MDZjZWIsIDB4ZGU4MmJkZTksXG4gIDB4YmVmOWEzZjcsIDB4YjJjNjc5MTUsIDB4YzY3MTc4ZjIsIDB4ZTM3MjUzMmIsXG4gIDB4Y2EyNzNlY2UsIDB4ZWEyNjYxOWMsIDB4ZDE4NmI4YzcsIDB4MjFjMGMyMDcsXG4gIDB4ZWFkYTdkZDYsIDB4Y2RlMGViMWUsIDB4ZjU3ZDRmN2YsIDB4ZWU2ZWQxNzgsXG4gIDB4MDZmMDY3YWEsIDB4NzIxNzZmYmEsIDB4MGE2MzdkYzUsIDB4YTJjODk4YTYsXG4gIDB4MTEzZjk4MDQsIDB4YmVmOTBkYWUsIDB4MWI3MTBiMzUsIDB4MTMxYzQ3MWIsXG4gIDB4MjhkYjc3ZjUsIDB4MjMwNDdkODQsIDB4MzJjYWFiN2IsIDB4NDBjNzI0OTMsXG4gIDB4M2M5ZWJlMGEsIDB4MTVjOWJlYmMsIDB4NDMxZDY3YzQsIDB4OWMxMDBkNGMsXG4gIDB4NGNjNWQ0YmUsIDB4Y2IzZTQyYjYsIDB4NTk3ZjI5OWMsIDB4ZmM2NTdlMmEsXG4gIDB4NWZjYjZmYWIsIDB4M2FkNmZhZWMsIDB4NmM0NDE5OGMsIDB4NGE0NzU4MTdcbl07XG5cbnZhciBzaGExX0sgPSBbXG4gIDB4NUE4Mjc5OTksIDB4NkVEOUVCQTEsXG4gIDB4OEYxQkJDREMsIDB4Q0E2MkMxRDZcbl07XG5cbmZ1bmN0aW9uIFNIQTI1NigpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTI1NikpXG4gICAgcmV0dXJuIG5ldyBTSEEyNTYoKTtcblxuICBCbG9ja0hhc2guY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gWyAweDZhMDllNjY3LCAweGJiNjdhZTg1LCAweDNjNmVmMzcyLCAweGE1NGZmNTNhLFxuICAgICAgICAgICAgIDB4NTEwZTUyN2YsIDB4OWIwNTY4OGMsIDB4MWY4M2Q5YWIsIDB4NWJlMGNkMTkgXTtcbiAgdGhpcy5rID0gc2hhMjU2X0s7XG4gIHRoaXMuVyA9IG5ldyBBcnJheSg2NCk7XG59XG51dGlscy5pbmhlcml0cyhTSEEyNTYsIEJsb2NrSGFzaCk7XG5leHBvcnRzLnNoYTI1NiA9IFNIQTI1NjtcblxuU0hBMjU2LmJsb2NrU2l6ZSA9IDUxMjtcblNIQTI1Ni5vdXRTaXplID0gMjU2O1xuU0hBMjU2LmhtYWNTdHJlbmd0aCA9IDE5MjtcblNIQTI1Ni5wYWRMZW5ndGggPSA2NDtcblxuU0hBMjU2LnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShtc2csIHN0YXJ0KSB7XG4gIHZhciBXID0gdGhpcy5XO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKylcbiAgICBXW2ldID0gbXNnW3N0YXJ0ICsgaV07XG4gIGZvciAoOyBpIDwgVy5sZW5ndGg7IGkrKylcbiAgICBXW2ldID0gc3VtMzJfNChnMV8yNTYoV1tpIC0gMl0pLCBXW2kgLSA3XSwgZzBfMjU2KFdbaSAtIDE1XSksIFdbaSAtIDE2XSk7XG5cbiAgdmFyIGEgPSB0aGlzLmhbMF07XG4gIHZhciBiID0gdGhpcy5oWzFdO1xuICB2YXIgYyA9IHRoaXMuaFsyXTtcbiAgdmFyIGQgPSB0aGlzLmhbM107XG4gIHZhciBlID0gdGhpcy5oWzRdO1xuICB2YXIgZiA9IHRoaXMuaFs1XTtcbiAgdmFyIGcgPSB0aGlzLmhbNl07XG4gIHZhciBoID0gdGhpcy5oWzddO1xuXG4gIGFzc2VydCh0aGlzLmsubGVuZ3RoID09PSBXLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgVy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBUMSA9IHN1bTMyXzUoaCwgczFfMjU2KGUpLCBjaDMyKGUsIGYsIGcpLCB0aGlzLmtbaV0sIFdbaV0pO1xuICAgIHZhciBUMiA9IHN1bTMyKHMwXzI1NihhKSwgbWFqMzIoYSwgYiwgYykpO1xuICAgIGggPSBnO1xuICAgIGcgPSBmO1xuICAgIGYgPSBlO1xuICAgIGUgPSBzdW0zMihkLCBUMSk7XG4gICAgZCA9IGM7XG4gICAgYyA9IGI7XG4gICAgYiA9IGE7XG4gICAgYSA9IHN1bTMyKFQxLCBUMik7XG4gIH1cblxuICB0aGlzLmhbMF0gPSBzdW0zMih0aGlzLmhbMF0sIGEpO1xuICB0aGlzLmhbMV0gPSBzdW0zMih0aGlzLmhbMV0sIGIpO1xuICB0aGlzLmhbMl0gPSBzdW0zMih0aGlzLmhbMl0sIGMpO1xuICB0aGlzLmhbM10gPSBzdW0zMih0aGlzLmhbM10sIGQpO1xuICB0aGlzLmhbNF0gPSBzdW0zMih0aGlzLmhbNF0sIGUpO1xuICB0aGlzLmhbNV0gPSBzdW0zMih0aGlzLmhbNV0sIGYpO1xuICB0aGlzLmhbNl0gPSBzdW0zMih0aGlzLmhbNl0sIGcpO1xuICB0aGlzLmhbN10gPSBzdW0zMih0aGlzLmhbN10sIGgpO1xufTtcblxuU0hBMjU2LnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmgsICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCwgJ2JpZycpO1xufTtcblxuZnVuY3Rpb24gU0hBMjI0KCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0hBMjI0KSlcbiAgICByZXR1cm4gbmV3IFNIQTIyNCgpO1xuXG4gIFNIQTI1Ni5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbIDB4YzEwNTllZDgsIDB4MzY3Y2Q1MDcsIDB4MzA3MGRkMTcsIDB4ZjcwZTU5MzksXG4gICAgICAgICAgICAgMHhmZmMwMGIzMSwgMHg2ODU4MTUxMSwgMHg2NGY5OGZhNywgMHhiZWZhNGZhNCBdO1xufVxudXRpbHMuaW5oZXJpdHMoU0hBMjI0LCBTSEEyNTYpO1xuZXhwb3J0cy5zaGEyMjQgPSBTSEEyMjQ7XG5cblNIQTIyNC5ibG9ja1NpemUgPSA1MTI7XG5TSEEyMjQub3V0U2l6ZSA9IDIyNDtcblNIQTIyNC5obWFjU3RyZW5ndGggPSAxOTI7XG5TSEEyMjQucGFkTGVuZ3RoID0gNjQ7XG5cblNIQTIyNC5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgLy8gSnVzdCB0cnVuY2F0ZSBvdXRwdXRcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLnNsaWNlKDAsIDcpLCAnYmlnJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmguc2xpY2UoMCwgNyksICdiaWcnKTtcbn07XG5cbmZ1bmN0aW9uIFNIQTUxMigpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTUxMikpXG4gICAgcmV0dXJuIG5ldyBTSEE1MTIoKTtcblxuICBCbG9ja0hhc2guY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gWyAweDZhMDllNjY3LCAweGYzYmNjOTA4LFxuICAgICAgICAgICAgIDB4YmI2N2FlODUsIDB4ODRjYWE3M2IsXG4gICAgICAgICAgICAgMHgzYzZlZjM3MiwgMHhmZTk0ZjgyYixcbiAgICAgICAgICAgICAweGE1NGZmNTNhLCAweDVmMWQzNmYxLFxuICAgICAgICAgICAgIDB4NTEwZTUyN2YsIDB4YWRlNjgyZDEsXG4gICAgICAgICAgICAgMHg5YjA1Njg4YywgMHgyYjNlNmMxZixcbiAgICAgICAgICAgICAweDFmODNkOWFiLCAweGZiNDFiZDZiLFxuICAgICAgICAgICAgIDB4NWJlMGNkMTksIDB4MTM3ZTIxNzkgXTtcbiAgdGhpcy5rID0gc2hhNTEyX0s7XG4gIHRoaXMuVyA9IG5ldyBBcnJheSgxNjApO1xufVxudXRpbHMuaW5oZXJpdHMoU0hBNTEyLCBCbG9ja0hhc2gpO1xuZXhwb3J0cy5zaGE1MTIgPSBTSEE1MTI7XG5cblNIQTUxMi5ibG9ja1NpemUgPSAxMDI0O1xuU0hBNTEyLm91dFNpemUgPSA1MTI7XG5TSEE1MTIuaG1hY1N0cmVuZ3RoID0gMTkyO1xuU0hBNTEyLnBhZExlbmd0aCA9IDEyODtcblxuU0hBNTEyLnByb3RvdHlwZS5fcHJlcGFyZUJsb2NrID0gZnVuY3Rpb24gX3ByZXBhcmVCbG9jayhtc2csIHN0YXJ0KSB7XG4gIHZhciBXID0gdGhpcy5XO1xuXG4gIC8vIDMyIHggMzJiaXQgd29yZHNcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAzMjsgaSsrKVxuICAgIFdbaV0gPSBtc2dbc3RhcnQgKyBpXTtcbiAgZm9yICg7IGkgPCBXLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIGMwX2hpID0gZzFfNTEyX2hpKFdbaSAtIDRdLCBXW2kgLSAzXSk7ICAvLyBpIC0gMlxuICAgIHZhciBjMF9sbyA9IGcxXzUxMl9sbyhXW2kgLSA0XSwgV1tpIC0gM10pO1xuICAgIHZhciBjMV9oaSA9IFdbaSAtIDE0XTsgIC8vIGkgLSA3XG4gICAgdmFyIGMxX2xvID0gV1tpIC0gMTNdO1xuICAgIHZhciBjMl9oaSA9IGcwXzUxMl9oaShXW2kgLSAzMF0sIFdbaSAtIDI5XSk7ICAvLyBpIC0gMTVcbiAgICB2YXIgYzJfbG8gPSBnMF81MTJfbG8oV1tpIC0gMzBdLCBXW2kgLSAyOV0pO1xuICAgIHZhciBjM19oaSA9IFdbaSAtIDMyXTsgIC8vIGkgLSAxNlxuICAgIHZhciBjM19sbyA9IFdbaSAtIDMxXTtcblxuICAgIFdbaV0gPSBzdW02NF80X2hpKGMwX2hpLCBjMF9sbyxcbiAgICAgICAgICAgICAgICAgICAgICBjMV9oaSwgYzFfbG8sXG4gICAgICAgICAgICAgICAgICAgICAgYzJfaGksIGMyX2xvLFxuICAgICAgICAgICAgICAgICAgICAgIGMzX2hpLCBjM19sbyk7XG4gICAgV1tpICsgMV0gPSBzdW02NF80X2xvKGMwX2hpLCBjMF9sbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYzFfaGksIGMxX2xvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjMl9oaSwgYzJfbG8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGMzX2hpLCBjM19sbyk7XG4gIH1cbn07XG5cblNIQTUxMi5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUobXNnLCBzdGFydCkge1xuICB0aGlzLl9wcmVwYXJlQmxvY2sobXNnLCBzdGFydCk7XG5cbiAgdmFyIFcgPSB0aGlzLlc7XG5cbiAgdmFyIGFoID0gdGhpcy5oWzBdO1xuICB2YXIgYWwgPSB0aGlzLmhbMV07XG4gIHZhciBiaCA9IHRoaXMuaFsyXTtcbiAgdmFyIGJsID0gdGhpcy5oWzNdO1xuICB2YXIgY2ggPSB0aGlzLmhbNF07XG4gIHZhciBjbCA9IHRoaXMuaFs1XTtcbiAgdmFyIGRoID0gdGhpcy5oWzZdO1xuICB2YXIgZGwgPSB0aGlzLmhbN107XG4gIHZhciBlaCA9IHRoaXMuaFs4XTtcbiAgdmFyIGVsID0gdGhpcy5oWzldO1xuICB2YXIgZmggPSB0aGlzLmhbMTBdO1xuICB2YXIgZmwgPSB0aGlzLmhbMTFdO1xuICB2YXIgZ2ggPSB0aGlzLmhbMTJdO1xuICB2YXIgZ2wgPSB0aGlzLmhbMTNdO1xuICB2YXIgaGggPSB0aGlzLmhbMTRdO1xuICB2YXIgaGwgPSB0aGlzLmhbMTVdO1xuXG4gIGFzc2VydCh0aGlzLmsubGVuZ3RoID09PSBXLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgVy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciBjMF9oaSA9IGhoO1xuICAgIHZhciBjMF9sbyA9IGhsO1xuICAgIHZhciBjMV9oaSA9IHMxXzUxMl9oaShlaCwgZWwpO1xuICAgIHZhciBjMV9sbyA9IHMxXzUxMl9sbyhlaCwgZWwpO1xuICAgIHZhciBjMl9oaSA9IGNoNjRfaGkoZWgsIGVsLCBmaCwgZmwsIGdoLCBnbCk7XG4gICAgdmFyIGMyX2xvID0gY2g2NF9sbyhlaCwgZWwsIGZoLCBmbCwgZ2gsIGdsKTtcbiAgICB2YXIgYzNfaGkgPSB0aGlzLmtbaV07XG4gICAgdmFyIGMzX2xvID0gdGhpcy5rW2kgKyAxXTtcbiAgICB2YXIgYzRfaGkgPSBXW2ldO1xuICAgIHZhciBjNF9sbyA9IFdbaSArIDFdO1xuXG4gICAgdmFyIFQxX2hpID0gc3VtNjRfNV9oaShjMF9oaSwgYzBfbG8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjMV9oaSwgYzFfbG8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjMl9oaSwgYzJfbG8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjM19oaSwgYzNfbG8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjNF9oaSwgYzRfbG8pO1xuICAgIHZhciBUMV9sbyA9IHN1bTY0XzVfbG8oYzBfaGksIGMwX2xvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgYzFfaGksIGMxX2xvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgYzJfaGksIGMyX2xvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgYzNfaGksIGMzX2xvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgYzRfaGksIGM0X2xvKTtcblxuICAgIHZhciBjMF9oaSA9IHMwXzUxMl9oaShhaCwgYWwpO1xuICAgIHZhciBjMF9sbyA9IHMwXzUxMl9sbyhhaCwgYWwpO1xuICAgIHZhciBjMV9oaSA9IG1hajY0X2hpKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wpO1xuICAgIHZhciBjMV9sbyA9IG1hajY0X2xvKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wpO1xuXG4gICAgdmFyIFQyX2hpID0gc3VtNjRfaGkoYzBfaGksIGMwX2xvLCBjMV9oaSwgYzFfbG8pO1xuICAgIHZhciBUMl9sbyA9IHN1bTY0X2xvKGMwX2hpLCBjMF9sbywgYzFfaGksIGMxX2xvKTtcblxuICAgIGhoID0gZ2g7XG4gICAgaGwgPSBnbDtcblxuICAgIGdoID0gZmg7XG4gICAgZ2wgPSBmbDtcblxuICAgIGZoID0gZWg7XG4gICAgZmwgPSBlbDtcblxuICAgIGVoID0gc3VtNjRfaGkoZGgsIGRsLCBUMV9oaSwgVDFfbG8pO1xuICAgIGVsID0gc3VtNjRfbG8oZGwsIGRsLCBUMV9oaSwgVDFfbG8pO1xuXG4gICAgZGggPSBjaDtcbiAgICBkbCA9IGNsO1xuXG4gICAgY2ggPSBiaDtcbiAgICBjbCA9IGJsO1xuXG4gICAgYmggPSBhaDtcbiAgICBibCA9IGFsO1xuXG4gICAgYWggPSBzdW02NF9oaShUMV9oaSwgVDFfbG8sIFQyX2hpLCBUMl9sbyk7XG4gICAgYWwgPSBzdW02NF9sbyhUMV9oaSwgVDFfbG8sIFQyX2hpLCBUMl9sbyk7XG4gIH1cblxuICBzdW02NCh0aGlzLmgsIDAsIGFoLCBhbCk7XG4gIHN1bTY0KHRoaXMuaCwgMiwgYmgsIGJsKTtcbiAgc3VtNjQodGhpcy5oLCA0LCBjaCwgY2wpO1xuICBzdW02NCh0aGlzLmgsIDYsIGRoLCBkbCk7XG4gIHN1bTY0KHRoaXMuaCwgOCwgZWgsIGVsKTtcbiAgc3VtNjQodGhpcy5oLCAxMCwgZmgsIGZsKTtcbiAgc3VtNjQodGhpcy5oLCAxMiwgZ2gsIGdsKTtcbiAgc3VtNjQodGhpcy5oLCAxNCwgaGgsIGhsKTtcbn07XG5cblNIQTUxMi5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLCAnYmlnJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmgsICdiaWcnKTtcbn07XG5cbmZ1bmN0aW9uIFNIQTM4NCgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTM4NCkpXG4gICAgcmV0dXJuIG5ldyBTSEEzODQoKTtcblxuICBTSEE1MTIuY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gWyAweGNiYmI5ZDVkLCAweGMxMDU5ZWQ4LFxuICAgICAgICAgICAgIDB4NjI5YTI5MmEsIDB4MzY3Y2Q1MDcsXG4gICAgICAgICAgICAgMHg5MTU5MDE1YSwgMHgzMDcwZGQxNyxcbiAgICAgICAgICAgICAweDE1MmZlY2Q4LCAweGY3MGU1OTM5LFxuICAgICAgICAgICAgIDB4NjczMzI2NjcsIDB4ZmZjMDBiMzEsXG4gICAgICAgICAgICAgMHg4ZWI0NGE4NywgMHg2ODU4MTUxMSxcbiAgICAgICAgICAgICAweGRiMGMyZTBkLCAweDY0Zjk4ZmE3LFxuICAgICAgICAgICAgIDB4NDdiNTQ4MWQsIDB4YmVmYTRmYTQgXTtcbn1cbnV0aWxzLmluaGVyaXRzKFNIQTM4NCwgU0hBNTEyKTtcbmV4cG9ydHMuc2hhMzg0ID0gU0hBMzg0O1xuXG5TSEEzODQuYmxvY2tTaXplID0gMTAyNDtcblNIQTM4NC5vdXRTaXplID0gMzg0O1xuU0hBMzg0LmhtYWNTdHJlbmd0aCA9IDE5MjtcblNIQTM4NC5wYWRMZW5ndGggPSAxMjg7XG5cblNIQTM4NC5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLnNsaWNlKDAsIDEyKSwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLnNsaWNlKDAsIDEyKSwgJ2JpZycpO1xufTtcblxuZnVuY3Rpb24gU0hBMSgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTEpKVxuICAgIHJldHVybiBuZXcgU0hBMSgpO1xuXG4gIEJsb2NrSGFzaC5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbIDB4Njc0NTIzMDEsIDB4ZWZjZGFiODksIDB4OThiYWRjZmUsXG4gICAgICAgICAgICAgMHgxMDMyNTQ3NiwgMHhjM2QyZTFmMCBdO1xuICB0aGlzLlcgPSBuZXcgQXJyYXkoODApO1xufVxuXG51dGlscy5pbmhlcml0cyhTSEExLCBCbG9ja0hhc2gpO1xuZXhwb3J0cy5zaGExID0gU0hBMTtcblxuU0hBMS5ibG9ja1NpemUgPSA1MTI7XG5TSEExLm91dFNpemUgPSAxNjA7XG5TSEExLmhtYWNTdHJlbmd0aCA9IDgwO1xuU0hBMS5wYWRMZW5ndGggPSA2NDtcblxuU0hBMS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUobXNnLCBzdGFydCkge1xuICB2YXIgVyA9IHRoaXMuVztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspXG4gICAgV1tpXSA9IG1zZ1tzdGFydCArIGldO1xuXG4gIGZvcig7IGkgPCBXLmxlbmd0aDsgaSsrKVxuICAgIFdbaV0gPSByb3RsMzIoV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XSwgMSk7XG5cbiAgdmFyIGEgPSB0aGlzLmhbMF07XG4gIHZhciBiID0gdGhpcy5oWzFdO1xuICB2YXIgYyA9IHRoaXMuaFsyXTtcbiAgdmFyIGQgPSB0aGlzLmhbM107XG4gIHZhciBlID0gdGhpcy5oWzRdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgVy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzID0gfn4oaSAvIDIwKTtcbiAgICB2YXIgdCA9IHN1bTMyXzUocm90bDMyKGEsIDUpLCBmdF8xKHMsIGIsIGMsIGQpLCBlLCBXW2ldLCBzaGExX0tbc10pO1xuICAgIGUgPSBkO1xuICAgIGQgPSBjO1xuICAgIGMgPSByb3RsMzIoYiwgMzApO1xuICAgIGIgPSBhO1xuICAgIGEgPSB0O1xuICB9XG5cbiAgdGhpcy5oWzBdID0gc3VtMzIodGhpcy5oWzBdLCBhKTtcbiAgdGhpcy5oWzFdID0gc3VtMzIodGhpcy5oWzFdLCBiKTtcbiAgdGhpcy5oWzJdID0gc3VtMzIodGhpcy5oWzJdLCBjKTtcbiAgdGhpcy5oWzNdID0gc3VtMzIodGhpcy5oWzNdLCBkKTtcbiAgdGhpcy5oWzRdID0gc3VtMzIodGhpcy5oWzRdLCBlKTtcbn07XG5cblNIQTEucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaCwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLCAnYmlnJyk7XG59O1xuXG5mdW5jdGlvbiBjaDMyKHgsIHksIHopIHtcbiAgcmV0dXJuICh4ICYgeSkgXiAoKH54KSAmIHopO1xufVxuXG5mdW5jdGlvbiBtYWozMih4LCB5LCB6KSB7XG4gIHJldHVybiAoeCAmIHkpIF4gKHggJiB6KSBeICh5ICYgeik7XG59XG5cbmZ1bmN0aW9uIHAzMih4LCB5LCB6KSB7XG4gIHJldHVybiB4IF4geSBeIHo7XG59XG5cbmZ1bmN0aW9uIHMwXzI1Nih4KSB7XG4gIHJldHVybiByb3RyMzIoeCwgMikgXiByb3RyMzIoeCwgMTMpIF4gcm90cjMyKHgsIDIyKTtcbn1cblxuZnVuY3Rpb24gczFfMjU2KHgpIHtcbiAgcmV0dXJuIHJvdHIzMih4LCA2KSBeIHJvdHIzMih4LCAxMSkgXiByb3RyMzIoeCwgMjUpO1xufVxuXG5mdW5jdGlvbiBnMF8yNTYoeCkge1xuICByZXR1cm4gcm90cjMyKHgsIDcpIF4gcm90cjMyKHgsIDE4KSBeICh4ID4+PiAzKTtcbn1cblxuZnVuY3Rpb24gZzFfMjU2KHgpIHtcbiAgcmV0dXJuIHJvdHIzMih4LCAxNykgXiByb3RyMzIoeCwgMTkpIF4gKHggPj4+IDEwKTtcbn1cblxuZnVuY3Rpb24gZnRfMShzLCB4LCB5LCB6KSB7XG4gIGlmIChzID09PSAwKVxuICAgIHJldHVybiBjaDMyKHgsIHksIHopO1xuICBpZiAocyA9PT0gMSB8fCBzID09PSAzKVxuICAgIHJldHVybiBwMzIoeCwgeSwgeik7XG4gIGlmIChzID09PSAyKVxuICAgIHJldHVybiBtYWozMih4LCB5LCB6KTtcbn1cblxuZnVuY3Rpb24gY2g2NF9oaSh4aCwgeGwsIHloLCB5bCwgemgsIHpsKSB7XG4gIHZhciByID0gKHhoICYgeWgpIF4gKCh+eGgpICYgemgpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGNoNjRfbG8oeGgsIHhsLCB5aCwgeWwsIHpoLCB6bCkge1xuICB2YXIgciA9ICh4bCAmIHlsKSBeICgofnhsKSAmIHpsKTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBtYWo2NF9oaSh4aCwgeGwsIHloLCB5bCwgemgsIHpsKSB7XG4gIHZhciByID0gKHhoICYgeWgpIF4gKHhoICYgemgpIF4gKHloICYgemgpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIG1hajY0X2xvKHhoLCB4bCwgeWgsIHlsLCB6aCwgemwpIHtcbiAgdmFyIHIgPSAoeGwgJiB5bCkgXiAoeGwgJiB6bCkgXiAoeWwgJiB6bCk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gczBfNTEyX2hpKHhoLCB4bCkge1xuICB2YXIgYzBfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCAyOCk7XG4gIHZhciBjMV9oaSA9IHJvdHI2NF9oaSh4bCwgeGgsIDIpOyAgLy8gMzRcbiAgdmFyIGMyX2hpID0gcm90cjY0X2hpKHhsLCB4aCwgNyk7ICAvLyAzOVxuXG4gIHZhciByID0gYzBfaGkgXiBjMV9oaSBeIGMyX2hpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHMwXzUxMl9sbyh4aCwgeGwpIHtcbiAgdmFyIGMwX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMjgpO1xuICB2YXIgYzFfbG8gPSByb3RyNjRfbG8oeGwsIHhoLCAyKTsgIC8vIDM0XG4gIHZhciBjMl9sbyA9IHJvdHI2NF9sbyh4bCwgeGgsIDcpOyAgLy8gMzlcblxuICB2YXIgciA9IGMwX2xvIF4gYzFfbG8gXiBjMl9sbztcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBzMV81MTJfaGkoeGgsIHhsKSB7XG4gIHZhciBjMF9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDE0KTtcbiAgdmFyIGMxX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgMTgpO1xuICB2YXIgYzJfaGkgPSByb3RyNjRfaGkoeGwsIHhoLCA5KTsgIC8vIDQxXG5cbiAgdmFyIHIgPSBjMF9oaSBeIGMxX2hpIF4gYzJfaGk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gczFfNTEyX2xvKHhoLCB4bCkge1xuICB2YXIgYzBfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCAxNCk7XG4gIHZhciBjMV9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDE4KTtcbiAgdmFyIGMyX2xvID0gcm90cjY0X2xvKHhsLCB4aCwgOSk7ICAvLyA0MVxuXG4gIHZhciByID0gYzBfbG8gXiBjMV9sbyBeIGMyX2xvO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGcwXzUxMl9oaSh4aCwgeGwpIHtcbiAgdmFyIGMwX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgMSk7XG4gIHZhciBjMV9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDgpO1xuICB2YXIgYzJfaGkgPSBzaHI2NF9oaSh4aCwgeGwsIDcpO1xuXG4gIHZhciByID0gYzBfaGkgXiBjMV9oaSBeIGMyX2hpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGcwXzUxMl9sbyh4aCwgeGwpIHtcbiAgdmFyIGMwX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMSk7XG4gIHZhciBjMV9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDgpO1xuICB2YXIgYzJfbG8gPSBzaHI2NF9sbyh4aCwgeGwsIDcpO1xuXG4gIHZhciByID0gYzBfbG8gXiBjMV9sbyBeIGMyX2xvO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGcxXzUxMl9oaSh4aCwgeGwpIHtcbiAgdmFyIGMwX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgMTkpO1xuICB2YXIgYzFfaGkgPSByb3RyNjRfaGkoeGwsIHhoLCAyOSk7ICAvLyA2MVxuICB2YXIgYzJfaGkgPSBzaHI2NF9oaSh4aCwgeGwsIDYpO1xuXG4gIHZhciByID0gYzBfaGkgXiBjMV9oaSBeIGMyX2hpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGcxXzUxMl9sbyh4aCwgeGwpIHtcbiAgdmFyIGMwX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMTkpO1xuICB2YXIgYzFfbG8gPSByb3RyNjRfbG8oeGwsIHhoLCAyOSk7ICAvLyA2MVxuICB2YXIgYzJfbG8gPSBzaHI2NF9sbyh4aCwgeGwsIDYpO1xuXG4gIHZhciByID0gYzBfbG8gXiBjMV9sbyBeIGMyX2xvO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG4iLCJ2YXIgaGFzaCA9IHJlcXVpcmUoJy4uL2hhc2gnKTtcbnZhciB1dGlscyA9IGhhc2gudXRpbHM7XG5cbnZhciByb3RsMzIgPSB1dGlscy5yb3RsMzI7XG52YXIgc3VtMzIgPSB1dGlscy5zdW0zMjtcbnZhciBzdW0zMl8zID0gdXRpbHMuc3VtMzJfMztcbnZhciBzdW0zMl80ID0gdXRpbHMuc3VtMzJfNDtcbnZhciBCbG9ja0hhc2ggPSBoYXNoLmNvbW1vbi5CbG9ja0hhc2g7XG5cbmZ1bmN0aW9uIFJJUEVNRDE2MCgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJJUEVNRDE2MCkpXG4gICAgcmV0dXJuIG5ldyBSSVBFTUQxNjAoKTtcblxuICBCbG9ja0hhc2guY2FsbCh0aGlzKTtcblxuICB0aGlzLmggPSBbIDB4Njc0NTIzMDEsIDB4ZWZjZGFiODksIDB4OThiYWRjZmUsIDB4MTAzMjU0NzYsIDB4YzNkMmUxZjAgXTtcbiAgdGhpcy5lbmRpYW4gPSAnbGl0dGxlJztcbn1cbnV0aWxzLmluaGVyaXRzKFJJUEVNRDE2MCwgQmxvY2tIYXNoKTtcbmV4cG9ydHMucmlwZW1kMTYwID0gUklQRU1EMTYwO1xuXG5SSVBFTUQxNjAuYmxvY2tTaXplID0gNTEyO1xuUklQRU1EMTYwLm91dFNpemUgPSAxNjA7XG5SSVBFTUQxNjAuaG1hY1N0cmVuZ3RoID0gMTkyO1xuUklQRU1EMTYwLnBhZExlbmd0aCA9IDY0O1xuXG5SSVBFTUQxNjAucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUobXNnLCBzdGFydCkge1xuICB2YXIgQSA9IHRoaXMuaFswXTtcbiAgdmFyIEIgPSB0aGlzLmhbMV07XG4gIHZhciBDID0gdGhpcy5oWzJdO1xuICB2YXIgRCA9IHRoaXMuaFszXTtcbiAgdmFyIEUgPSB0aGlzLmhbNF07XG4gIHZhciBBaCA9IEE7XG4gIHZhciBCaCA9IEI7XG4gIHZhciBDaCA9IEM7XG4gIHZhciBEaCA9IEQ7XG4gIHZhciBFaCA9IEU7XG4gIGZvciAodmFyIGogPSAwOyBqIDwgODA7IGorKykge1xuICAgIHZhciBUID0gc3VtMzIoXG4gICAgICByb3RsMzIoXG4gICAgICAgIHN1bTMyXzQoQSwgZihqLCBCLCBDLCBEKSwgbXNnW3Jbal0gKyBzdGFydF0sIEsoaikpLFxuICAgICAgICBzW2pdKSxcbiAgICAgIEUpO1xuICAgIEEgPSBFO1xuICAgIEUgPSBEO1xuICAgIEQgPSByb3RsMzIoQywgMTApO1xuICAgIEMgPSBCO1xuICAgIEIgPSBUO1xuICAgIFQgPSBzdW0zMihcbiAgICAgIHJvdGwzMihcbiAgICAgICAgc3VtMzJfNChBaCwgZig3OSAtIGosIEJoLCBDaCwgRGgpLCBtc2dbcmhbal0gKyBzdGFydF0sIEtoKGopKSxcbiAgICAgICAgc2hbal0pLFxuICAgICAgRWgpO1xuICAgIEFoID0gRWg7XG4gICAgRWggPSBEaDtcbiAgICBEaCA9IHJvdGwzMihDaCwgMTApO1xuICAgIENoID0gQmg7XG4gICAgQmggPSBUO1xuICB9XG4gIFQgPSBzdW0zMl8zKHRoaXMuaFsxXSwgQywgRGgpO1xuICB0aGlzLmhbMV0gPSBzdW0zMl8zKHRoaXMuaFsyXSwgRCwgRWgpO1xuICB0aGlzLmhbMl0gPSBzdW0zMl8zKHRoaXMuaFszXSwgRSwgQWgpO1xuICB0aGlzLmhbM10gPSBzdW0zMl8zKHRoaXMuaFs0XSwgQSwgQmgpO1xuICB0aGlzLmhbNF0gPSBzdW0zMl8zKHRoaXMuaFswXSwgQiwgQ2gpO1xuICB0aGlzLmhbMF0gPSBUO1xufTtcblxuUklQRU1EMTYwLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmgsICdsaXR0bGUnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCwgJ2xpdHRsZScpO1xufTtcblxuZnVuY3Rpb24gZihqLCB4LCB5LCB6KSB7XG4gIGlmIChqIDw9IDE1KVxuICAgIHJldHVybiB4IF4geSBeIHo7XG4gIGVsc2UgaWYgKGogPD0gMzEpXG4gICAgcmV0dXJuICh4ICYgeSkgfCAoKH54KSAmIHopO1xuICBlbHNlIGlmIChqIDw9IDQ3KVxuICAgIHJldHVybiAoeCB8ICh+eSkpIF4gejtcbiAgZWxzZSBpZiAoaiA8PSA2MylcbiAgICByZXR1cm4gKHggJiB6KSB8ICh5ICYgKH56KSk7XG4gIGVsc2VcbiAgICByZXR1cm4geCBeICh5IHwgKH56KSk7XG59XG5cbmZ1bmN0aW9uIEsoaikge1xuICBpZiAoaiA8PSAxNSlcbiAgICByZXR1cm4gMHgwMDAwMDAwMDtcbiAgZWxzZSBpZiAoaiA8PSAzMSlcbiAgICByZXR1cm4gMHg1YTgyNzk5OTtcbiAgZWxzZSBpZiAoaiA8PSA0NylcbiAgICByZXR1cm4gMHg2ZWQ5ZWJhMTtcbiAgZWxzZSBpZiAoaiA8PSA2MylcbiAgICByZXR1cm4gMHg4ZjFiYmNkYztcbiAgZWxzZVxuICAgIHJldHVybiAweGE5NTNmZDRlO1xufVxuXG5mdW5jdGlvbiBLaChqKSB7XG4gIGlmIChqIDw9IDE1KVxuICAgIHJldHVybiAweDUwYTI4YmU2O1xuICBlbHNlIGlmIChqIDw9IDMxKVxuICAgIHJldHVybiAweDVjNGRkMTI0O1xuICBlbHNlIGlmIChqIDw9IDQ3KVxuICAgIHJldHVybiAweDZkNzAzZWYzO1xuICBlbHNlIGlmIChqIDw9IDYzKVxuICAgIHJldHVybiAweDdhNmQ3NmU5O1xuICBlbHNlXG4gICAgcmV0dXJuIDB4MDAwMDAwMDA7XG59XG5cbnZhciByID0gW1xuICAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyLCAxMywgMTQsIDE1LFxuICA3LCA0LCAxMywgMSwgMTAsIDYsIDE1LCAzLCAxMiwgMCwgOSwgNSwgMiwgMTQsIDExLCA4LFxuICAzLCAxMCwgMTQsIDQsIDksIDE1LCA4LCAxLCAyLCA3LCAwLCA2LCAxMywgMTEsIDUsIDEyLFxuICAxLCA5LCAxMSwgMTAsIDAsIDgsIDEyLCA0LCAxMywgMywgNywgMTUsIDE0LCA1LCA2LCAyLFxuICA0LCAwLCA1LCA5LCA3LCAxMiwgMiwgMTAsIDE0LCAxLCAzLCA4LCAxMSwgNiwgMTUsIDEzXG5dO1xuXG52YXIgcmggPSBbXG4gIDUsIDE0LCA3LCAwLCA5LCAyLCAxMSwgNCwgMTMsIDYsIDE1LCA4LCAxLCAxMCwgMywgMTIsXG4gIDYsIDExLCAzLCA3LCAwLCAxMywgNSwgMTAsIDE0LCAxNSwgOCwgMTIsIDQsIDksIDEsIDIsXG4gIDE1LCA1LCAxLCAzLCA3LCAxNCwgNiwgOSwgMTEsIDgsIDEyLCAyLCAxMCwgMCwgNCwgMTMsXG4gIDgsIDYsIDQsIDEsIDMsIDExLCAxNSwgMCwgNSwgMTIsIDIsIDEzLCA5LCA3LCAxMCwgMTQsXG4gIDEyLCAxNSwgMTAsIDQsIDEsIDUsIDgsIDcsIDYsIDIsIDEzLCAxNCwgMCwgMywgOSwgMTFcbl07XG5cbnZhciBzID0gW1xuICAxMSwgMTQsIDE1LCAxMiwgNSwgOCwgNywgOSwgMTEsIDEzLCAxNCwgMTUsIDYsIDcsIDksIDgsXG4gIDcsIDYsIDgsIDEzLCAxMSwgOSwgNywgMTUsIDcsIDEyLCAxNSwgOSwgMTEsIDcsIDEzLCAxMixcbiAgMTEsIDEzLCA2LCA3LCAxNCwgOSwgMTMsIDE1LCAxNCwgOCwgMTMsIDYsIDUsIDEyLCA3LCA1LFxuICAxMSwgMTIsIDE0LCAxNSwgMTQsIDE1LCA5LCA4LCA5LCAxNCwgNSwgNiwgOCwgNiwgNSwgMTIsXG4gIDksIDE1LCA1LCAxMSwgNiwgOCwgMTMsIDEyLCA1LCAxMiwgMTMsIDE0LCAxMSwgOCwgNSwgNlxuXTtcblxudmFyIHNoID0gW1xuICA4LCA5LCA5LCAxMSwgMTMsIDE1LCAxNSwgNSwgNywgNywgOCwgMTEsIDE0LCAxNCwgMTIsIDYsXG4gIDksIDEzLCAxNSwgNywgMTIsIDgsIDksIDExLCA3LCA3LCAxMiwgNywgNiwgMTUsIDEzLCAxMSxcbiAgOSwgNywgMTUsIDExLCA4LCA2LCA2LCAxNCwgMTIsIDEzLCA1LCAxNCwgMTMsIDEzLCA3LCA1LFxuICAxNSwgNSwgOCwgMTEsIDE0LCAxNCwgNiwgMTQsIDYsIDksIDEyLCA5LCAxMiwgNSwgMTUsIDgsXG4gIDgsIDUsIDEyLCA5LCAxMiwgNSwgMTQsIDYsIDgsIDEzLCA2LCA1LCAxNSwgMTMsIDExLCAxMVxuXTtcbiIsInZhciBobWFjID0gZXhwb3J0cztcblxudmFyIGhhc2ggPSByZXF1aXJlKCcuLi9oYXNoJyk7XG52YXIgdXRpbHMgPSBoYXNoLnV0aWxzO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gSG1hYyhoYXNoLCBrZXksIGVuYykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSG1hYykpXG4gICAgcmV0dXJuIG5ldyBIbWFjKGhhc2gsIGtleSwgZW5jKTtcbiAgdGhpcy5IYXNoID0gaGFzaDtcbiAgdGhpcy5ibG9ja1NpemUgPSBoYXNoLmJsb2NrU2l6ZSAvIDg7XG4gIHRoaXMub3V0U2l6ZSA9IGhhc2gub3V0U2l6ZSAvIDg7XG4gIHRoaXMuaW5uZXIgPSBudWxsO1xuICB0aGlzLm91dGVyID0gbnVsbDtcblxuICB0aGlzLl9pbml0KHV0aWxzLnRvQXJyYXkoa2V5LCBlbmMpKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gSG1hYztcblxuSG1hYy5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0KGtleSkge1xuICAvLyBTaG9ydGVuIGtleSwgaWYgbmVlZGVkXG4gIGlmIChrZXkubGVuZ3RoID4gdGhpcy5ibG9ja1NpemUpXG4gICAga2V5ID0gbmV3IHRoaXMuSGFzaCgpLnVwZGF0ZShrZXkpLmRpZ2VzdCgpO1xuICBhc3NlcnQoa2V5Lmxlbmd0aCA8PSB0aGlzLmJsb2NrU2l6ZSk7XG5cbiAgLy8gQWRkIHBhZGRpbmcgdG8ga2V5XG4gIGZvciAodmFyIGkgPSBrZXkubGVuZ3RoOyBpIDwgdGhpcy5ibG9ja1NpemU7IGkrKylcbiAgICBrZXkucHVzaCgwKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleS5sZW5ndGg7IGkrKylcbiAgICBrZXlbaV0gXj0gMHgzNjtcbiAgdGhpcy5pbm5lciA9IG5ldyB0aGlzLkhhc2goKS51cGRhdGUoa2V5KTtcblxuICAvLyAweDM2IF4gMHg1YyA9IDB4NmFcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXkubGVuZ3RoOyBpKyspXG4gICAga2V5W2ldIF49IDB4NmE7XG4gIHRoaXMub3V0ZXIgPSBuZXcgdGhpcy5IYXNoKCkudXBkYXRlKGtleSk7XG59O1xuXG5IbWFjLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUobXNnLCBlbmMpIHtcbiAgdGhpcy5pbm5lci51cGRhdGUobXNnLCBlbmMpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkhtYWMucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgdGhpcy5vdXRlci51cGRhdGUodGhpcy5pbm5lci5kaWdlc3QoKSk7XG4gIHJldHVybiB0aGlzLm91dGVyLmRpZ2VzdChlbmMpO1xufTtcbiIsInZhciBoYXNoID0gcmVxdWlyZSgnLi4vaGFzaCcpO1xudmFyIHV0aWxzID0gaGFzaC51dGlscztcbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG5cbmZ1bmN0aW9uIEJsb2NrSGFzaCgpIHtcbiAgdGhpcy5wZW5kaW5nID0gbnVsbDtcbiAgdGhpcy5wZW5kaW5nVG90YWwgPSAwO1xuICB0aGlzLmJsb2NrU2l6ZSA9IHRoaXMuY29uc3RydWN0b3IuYmxvY2tTaXplO1xuICB0aGlzLm91dFNpemUgPSB0aGlzLmNvbnN0cnVjdG9yLm91dFNpemU7XG4gIHRoaXMuaG1hY1N0cmVuZ3RoID0gdGhpcy5jb25zdHJ1Y3Rvci5obWFjU3RyZW5ndGg7XG4gIHRoaXMucGFkTGVuZ3RoID0gdGhpcy5jb25zdHJ1Y3Rvci5wYWRMZW5ndGggLyA4O1xuICB0aGlzLmVuZGlhbiA9ICdiaWcnO1xuXG4gIHRoaXMuX2RlbHRhOCA9IHRoaXMuYmxvY2tTaXplIC8gODtcbiAgdGhpcy5fZGVsdGEzMiA9IHRoaXMuYmxvY2tTaXplIC8gMzI7XG59XG5leHBvcnRzLkJsb2NrSGFzaCA9IEJsb2NrSGFzaDtcblxuQmxvY2tIYXNoLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUobXNnLCBlbmMpIHtcbiAgLy8gQ29udmVydCBtZXNzYWdlIHRvIGFycmF5LCBwYWQgaXQsIGFuZCBqb2luIGludG8gMzJiaXQgYmxvY2tzXG4gIG1zZyA9IHV0aWxzLnRvQXJyYXkobXNnLCBlbmMpO1xuICBpZiAoIXRoaXMucGVuZGluZylcbiAgICB0aGlzLnBlbmRpbmcgPSBtc2c7XG4gIGVsc2VcbiAgICB0aGlzLnBlbmRpbmcgPSB0aGlzLnBlbmRpbmcuY29uY2F0KG1zZyk7XG4gIHRoaXMucGVuZGluZ1RvdGFsICs9IG1zZy5sZW5ndGg7XG5cbiAgLy8gRW5vdWdoIGRhdGEsIHRyeSB1cGRhdGluZ1xuICBpZiAodGhpcy5wZW5kaW5nLmxlbmd0aCA+PSB0aGlzLl9kZWx0YTgpIHtcbiAgICBtc2cgPSB0aGlzLnBlbmRpbmc7XG5cbiAgICAvLyBQcm9jZXNzIHBlbmRpbmcgZGF0YSBpbiBibG9ja3NcbiAgICB2YXIgciA9IG1zZy5sZW5ndGggJSB0aGlzLl9kZWx0YTg7XG4gICAgdGhpcy5wZW5kaW5nID0gbXNnLnNsaWNlKG1zZy5sZW5ndGggLSByLCBtc2cubGVuZ3RoKTtcbiAgICBpZiAodGhpcy5wZW5kaW5nLmxlbmd0aCA9PT0gMClcbiAgICAgIHRoaXMucGVuZGluZyA9IG51bGw7XG5cbiAgICBtc2cgPSB1dGlscy5qb2luMzIobXNnLCAwLCBtc2cubGVuZ3RoIC0gciwgdGhpcy5lbmRpYW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSArPSB0aGlzLl9kZWx0YTMyKVxuICAgICAgdGhpcy5fdXBkYXRlKG1zZywgaSwgaSArIHRoaXMuX2RlbHRhMzIpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CbG9ja0hhc2gucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgdGhpcy51cGRhdGUodGhpcy5fcGFkKCkpO1xuICBhc3NlcnQodGhpcy5wZW5kaW5nID09PSBudWxsKTtcblxuICByZXR1cm4gdGhpcy5fZGlnZXN0KGVuYyk7XG59O1xuXG5CbG9ja0hhc2gucHJvdG90eXBlLl9wYWQgPSBmdW5jdGlvbiBwYWQoKSB7XG4gIHZhciBsZW4gPSB0aGlzLnBlbmRpbmdUb3RhbDtcbiAgdmFyIGJ5dGVzID0gdGhpcy5fZGVsdGE4O1xuICB2YXIgayA9IGJ5dGVzIC0gKChsZW4gKyB0aGlzLnBhZExlbmd0aCkgJSBieXRlcyk7XG4gIHZhciByZXMgPSBuZXcgQXJyYXkoayArIHRoaXMucGFkTGVuZ3RoKTtcbiAgcmVzWzBdID0gMHg4MDtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBrOyBpKyspXG4gICAgcmVzW2ldID0gMDtcblxuICAvLyBBcHBlbmQgbGVuZ3RoXG4gIGxlbiA8PD0gMztcbiAgaWYgKHRoaXMuZW5kaWFuID09PSAnYmlnJykge1xuICAgIGZvciAodmFyIHQgPSA4OyB0IDwgdGhpcy5wYWRMZW5ndGg7IHQrKylcbiAgICAgIHJlc1tpKytdID0gMDtcblxuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDI0KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiAxNikgJiAweGZmO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gOCkgJiAweGZmO1xuICAgIHJlc1tpKytdID0gbGVuICYgMHhmZjtcbiAgfSBlbHNlIHtcbiAgICByZXNbaSsrXSA9IGxlbiAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiA4KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiAxNikgJiAweGZmO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gMjQpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG5cbiAgICBmb3IgKHZhciB0ID0gODsgdCA8IHRoaXMucGFkTGVuZ3RoOyB0KyspXG4gICAgICByZXNbaSsrXSA9IDA7XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBkb3VibGVzOiB7XG4gICAgc3RlcDogNCxcbiAgICBwb2ludHM6IFtcbiAgICAgIFtcbiAgICAgICAgJ2U2MGZjZTkzYjU5ZTllYzUzMDExYWFiYzIxYzIzZTk3YjJhMzEzNjliODdhNWFlOWM0NGVlODllMmE2ZGVjMGEnLFxuICAgICAgICAnZjdlMzUwNzM5OWU1OTU5MjlkYjk5ZjM0ZjU3OTM3MTAxMjk2ODkxZTQ0ZDIzZjBiZTFmMzJjY2U2OTYxNjgyMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4MjgyMjYzMjEyYzYwOWQ5ZWEyYTZlM2UxNzJkZTIzOGQ4YzM5Y2FiZDVhYzFjYTEwNjQ2ZTIzZmQ1ZjUxNTA4JyxcbiAgICAgICAgJzExZjhhODA5ODU1N2RmZTQ1ZTgyNTZlODMwYjYwYWNlNjJkNjEzYWMyZjdiMTdiZWQzMWI2ZWFmZjZlMjZjYWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTc1ZTE1OWY3MjhiODY1YTcyZjk5Y2M2YzZmYzg0NmRlMGI5MzgzM2ZkMjIyMmVkNzNmY2U1YjU1MWU1YjczOScsXG4gICAgICAgICdkMzUwNmUwZDllM2M3OWViYTRlZjk3YTUxZmY3MWY1ZWFjYjU5NTVhZGQyNDM0NWM2ZWZhNmZmZWU5ZmVkNjk1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM2M2Q5MGQ0NDdiMDBjOWM5OWNlYWMwNWI2MjYyZWUwNTM0NDFjN2U1NTU1MmZmZTUyNmJhZDhmODNmZjQ2NDAnLFxuICAgICAgICAnNGUyNzNhZGZjNzMyMjIxOTUzYjQ0NTM5N2YzMzYzMTQ1YjlhODkwMDgxOTllY2I2MjAwM2M3ZjNiZWU5ZGU5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhiNGI1ZjE2NWRmM2MyYmU4YzYyNDRiNWI3NDU2Mzg4NDNlNGE3ODFhMTViY2QxYjY5Zjc5YTU1ZGZmZGY4MGMnLFxuICAgICAgICAnNGFhZDBhNmY2OGQzMDhiNGIzZmJkNzgxM2FiMGRhMDRmOWUzMzY1NDYxNjJlZTU2YjNlZmYwYzY1ZmQ0ZmQzNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3MjNjYmFhNmU1ZGI5OTZkNmJmNzcxYzAwYmQ1NDhjN2I3MDBkYmZmYTZjMGU3N2JjYjYxMTU5MjUyMzJmY2RhJyxcbiAgICAgICAgJzk2ZTg2N2I1NTk1Y2M0OThhOTIxMTM3NDg4ODI0ZDZlMjY2MGEwNjUzNzc5NDk0ODAxZGMwNjlkOWViMzlmNWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZWViZmE0ZDQ5M2JlYmY5OGJhNWZlZWM4MTJjMmQzYjUwOTQ3OTYxMjM3YTkxOTgzOWE1MzNlY2EwZTdkZDdmYScsXG4gICAgICAgICc1ZDlhOGNhMzk3MGVmMGYyNjllZTdlZGFmMTc4MDg5ZDlhZTRjZGMzYTcxMWY3MTJkZGZkNGZkYWUxZGU4OTk5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzEwMGY0NGRhNjk2ZTcxNjcyNzkxZDBhMDliN2JkZTQ1OWYxMjE1YTI5YjNjMDNiZmVmZDc4MzViMzlhNDhkYjAnLFxuICAgICAgICAnY2RkOWUxMzE5MmEwMGI3NzJlYzhmMzMwMGMwOTA2NjZiN2ZmNGExOGZmNTE5NWFjMGZiZDVjZDYyYmM2NWEwOSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlMTAzMWJlMjYyYzdlZDFiMWRjOTIyN2E0YTA0YzAxN2E3N2Y4ZDQ0NjRmM2IzODUyYzhhY2RlNmU1MzRmZDJkJyxcbiAgICAgICAgJzlkNzA2MTkyODk0MDQwNWU2YmI2YTQxNzY1OTc1MzVhZjI5MmRkNDE5ZTFjZWQ3OWE0NGYxOGYyOTQ1NmEwMGQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZmVlYTZjYWU0NmQ1NWI1MzBhYzI4MzlmMTQzYmQ3ZWM1Y2Y4YjI2NmE0MWQ2YWY1MmQ1ZTY4OGQ5MDk0Njk2ZCcsXG4gICAgICAgICdlNTdjNmI2Yzk3ZGNlMWJhYjA2ZTRlMTJiZjNlY2Q1Yzk4MWM4OTU3Y2M0MTQ0MmQzMTU1ZGViZjE4MDkwMDg4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RhNjdhOTFkOTEwNDljZGNiMzY3YmU0YmU2ZmZjYTNjZmVlZDY1N2Q4MDg1ODNkZTMzZmE5NzhiYzFlYzZjYjEnLFxuICAgICAgICAnOWJhY2FhMzU0ODE2NDJiYzQxZjQ2M2Y3ZWM5NzgwZTVkZWM3YWRjNTA4Zjc0MGExN2U5ZWE4ZTI3YTY4YmUxZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1MzkwNGZhYTBiMzM0Y2RkYTZlMDAwOTM1ZWYyMjE1MWVjMDhkMGY3YmIxMTA2OWY1NzU0NWNjYzFhMzdiN2MwJyxcbiAgICAgICAgJzViYzA4N2QwYmM4MDEwNmQ4OGM5ZWNjYWMyMGQzYzFjMTM5OTk5ODFlMTQ0MzQ2OTlkY2IwOTZiMDIyNzcxYzgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGU3YmNkMGJkMzU5ODNhNzcxOWNjYTc3NjRjYTkwNjc3OWI1M2EwNDNhOWI4YmNhZWZmOTU5ZjQzYWQ4NjA0NycsXG4gICAgICAgICcxMGI3NzcwYjJhM2RhNGIzOTQwMzEwNDIwY2E5NTE0NTc5ZTg4ZTJlNDdmZDY4YjNlYTEwMDQ3ZTg0NjAzNzJhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM4NWVlZDM0YzFjZGZmMjFlNmQwODE4Njg5YjgxYmRlNzFhN2Y0ZjE4Mzk3ZTY2OTBhODQxZTE1OTljNDM4NjInLFxuICAgICAgICAnMjgzYmViYzNlOGVhMjNmNTY3MDFkZTE5ZTllYmY0NTc2YjMwNGVlYzIwODZkYzhjYzA0NThmZTU1NDJlNTQ1MydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2ZjlkOWI4MDNlY2YxOTE2MzdjNzNhNDQxM2RmYTE4MGZkZGY4NGE1OTQ3ZmJjOWM2MDZlZDg2YzNmYWMzYTcnLFxuICAgICAgICAnN2M4MGM2OGU2MDMwNTliYTY5YjhlMmEzMGU0NWM0ZDQ3ZWE0ZGQyZjVjMjgxMDAyZDg2ODkwNjAzYTg0MjE2MCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczMzIyZDQwMTI0M2M0ZTI1ODJhMjE0N2MxMDRkNmVjYmY3NzRkMTYzZGIwZjVlNTMxM2I3ZTBlNzQyZDBlNmJkJyxcbiAgICAgICAgJzU2ZTcwNzk3ZTk2NjRlZjViZmIwMTliYzRkZGFmOWI3MjgwNWY2M2VhMjg3M2FmNjI0ZjNhMmU5NmMyOGIyYTAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODU2NzJjN2QyZGUwYjdkYTJiZDE3NzBkODk2NjU4Njg3NDFiM2Y5YWY3NjQzMzk3NzIxZDc0ZDI4MTM0YWI4MycsXG4gICAgICAgICc3YzQ4MWI5YjViNDNiMmViNjM3NDA0OWJmYTYyYzJlNWU3N2YxN2ZjYzUyOThmNDRjOGUzMDk0Zjc5MDMxM2E2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzk0OGJmODA5YjE5ODhhNDZiMDZjOWYxOTE5NDEzYjEwZjkyMjZjNjBmNjY4ODMyZmZkOTU5YWY2MGM4MmEwYScsXG4gICAgICAgICc1M2E1NjI4NTZkY2I2NjQ2ZGM2Yjc0YzVkMWMzNDE4YzZkNGRmZjA4Yzk3Y2QyYmVkNGNiN2Y4OGQ4YzhlNTg5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzYyNjBjZTdmNDYxODAxYzM0ZjA2N2NlMGYwMjg3M2E4ZjFiMGU0NGRmYzY5NzUyYWNjZWNkODE5ZjM4ZmQ4ZTgnLFxuICAgICAgICAnYmMyZGE4MmI2ZmE1YjU3MWE3ZjA5MDQ5Nzc2YTFlZjdlY2QyOTIyMzgwNTFjMTk4YzFhODRlOTViMmI0YWUxNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlNTAzN2RlMGFmYzFkOGQ0M2Q4MzQ4NDE0YmJmNDEwMzA0M2VjOGY1NzViZmRjNDMyOTUzY2M4ZDIwMzdmYTJkJyxcbiAgICAgICAgJzQ1NzE1MzRiYWE5NGQzYjVmOWY5OGQwOWZiOTkwYmRkYmQ1ZjViMDNlYzQ4MWYxMGUwZTVkYzg0MWQ3NTViZGEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTA2MzcyYjBmNGEyMDdhZGY1ZWE5MDVlOGYxNzcxYjRlN2U4ZGJkMWM2YTZjNWI3MjU4NjZhMGFlNGZjZTcyNScsXG4gICAgICAgICc3YTkwODk3NGJjZTE4Y2ZlMTJhMjdiYjJhZDVhNDg4Y2Q3NDg0YTc3ODcxMDQ4NzBiMjcwMzRmOTRlZWUzMWRkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzIxM2M3YTcxNWNkNWQ0NTM1OGQwYmJmOWRjMGNlMDIyMDRiMTBiZGRlMmEzZjU4NTQwYWQ2OTA4ZDA1NTk3NTQnLFxuICAgICAgICAnNGI2ZGFkMGI1YWU0NjI1MDcwMTNhZDA2MjQ1YmExOTBiYjQ4NTBmNWYzNmE3ZWVkZGZmMmMyNzUzNGI0NThmMidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0ZTdjMjcyYTdhZjRiMzRlOGRiYjkzNTJhNTQxOWE4N2UyODM4YzcwYWRjNjJjZGRmMGNjM2EzYjA4ZmJkNTNjJyxcbiAgICAgICAgJzE3NzQ5Yzc2NmM5ZDBiMThlMTZmZDA5ZjZkZWY2ODFiNTMwYjk2MTRiZmY3ZGQzM2UwYjM5NDE4MTdkY2FhZTYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZmVhNzRlM2RiZTc3OGIxYjEwZjIzOGFkNjE2ODZhYTVjNzZlM2RiMmJlNDMwNTc2MzI0MjdlMjg0MGZiMjdiNicsXG4gICAgICAgICc2ZTA1NjhkYjliMGIxMzI5N2NmNjc0ZGVjY2I2YWY5MzEyNmI1OTZiOTczZjdiNzc3MDFkM2RiN2YyM2NiOTZmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc2ZTY0MTEzZjY3N2NmMGUxMGEyNTcwZDU5OTk2OGQzMTU0NGUxNzliNzYwNDMyOTUyYzAyYTQ0MTdiZGRlMzknLFxuICAgICAgICAnYzkwZGRmOGRlZTRlOTVjZjU3NzA2NmQ3MDY4MWYwZDM1ZTJhMzNkMmI1NmQyMDMyYjRiMTc1MmQxOTAxYWMwMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjNzM4YzU2YjAzYjJhYmUxZTgyODFiYWE3NDNmOGY5YThmN2NjNjQzZGYyNmNiZWUzYWIxNTAyNDJiY2JiODkxJyxcbiAgICAgICAgJzg5M2ZiNTc4OTUxYWQyNTM3ZjcxOGYyZWFjYmZiYmJiODIzMTRlZWY3ODgwY2ZlOTE3ZTczNWQ5Njk5YTg0YzMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDg5NTYyNjU0OGI2NWI4MWUyNjRjNzYzN2M5NzI4NzdkMWQ3MmU1ZjNhOTI1MDE0MzcyZTlmNjU4OGY2YzE0YicsXG4gICAgICAgICdmZWJmYWEzOGYyYmM3ZWFlNzI4ZWM2MDgxOGMzNDBlYjAzNDI4ZDYzMmJiMDY3ZTE3OTM2M2VkNzVkN2Q5OTFmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2I4ZGE5NDAzMmE5NTc1MThlYjBmNjQzMzU3MWU4NzYxY2VmZmM3MzY5M2U4NGVkZDQ5MTUwYTU2NGY2NzZlMDMnLFxuICAgICAgICAnMjgwNGRmYTQ0ODA1YTFlNGQ3Yzk5Y2M5NzYyODA4YjA5MmNjNTg0ZDk1ZmYzYjUxMTQ4OGU0ZTc0ZWZkZjZlNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlODBmZWExNDQ0MWZiMzNhN2Q4YWRhYjk0NzVkN2ZhYjIwMTllZmZiNTE1NmE3OTJmMWExMTc3OGUzYzBkZjVkJyxcbiAgICAgICAgJ2VlZDFkZTdmNjM4ZTAwNzcxZTg5NzY4Y2EzY2E5NDQ3MmQxNTVlODBhZjMyMmVhOWZjYjQyOTFiNmFjOWVjNzgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYTMwMTY5N2JkZmNkNzA0MzEzYmE0OGU1MWQ1Njc1NDNmMmExODIwMzFlZmQ2OTE1ZGRjMDdiYmNjNGUxNjA3MCcsXG4gICAgICAgICc3MzcwZjkxY2ZiNjdlNGY1MDgxODA5ZmEyNWQ0MGY5YjE3MzVkYmY3YzBhMTFhMTMwYzBkMWEwNDFlMTc3ZWExJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzkwYWQ4NWIzODlkNmI5MzY0NjNmOWQwNTEyNjc4ZGUyMDhjYzMzMGIxMTMwN2ZmZmFiN2FjNjNlM2ZiMDRlZDQnLFxuICAgICAgICAnZTUwN2EzNjIwYTM4MjYxYWZmZGNiZDk0MjcyMjJiODM5YWVmYWJlMTU4Mjg5NGQ5OTFkNGQ0OGNiNmVmMTUwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhmNjhiOWQyZjYzYjVmMzM5MjM5YzFhZDk4MWYxNjJlZTg4YzU2Nzg3MjNlYTMzNTFiN2I0NDRjOWVjNGMwZGEnLFxuICAgICAgICAnNjYyYTlmMmRiYTA2Mzk4NmRlMWQ5MGMyYjZiZTIxNWRiYmVhMmNmZTk1NTEwYmZkZjIzY2JmNzk1MDFmZmY4MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlNGYzZmIwMTc2YWY4NWQ2NWZmOTlmZjkxOThjMzYwOTFmNDhlODY1MDM2ODFlM2U2Njg2ZmQ1MDUzMjMxZTExJyxcbiAgICAgICAgJzFlNjM2MzNhZDBlZjRmMWMxNjYxYTZkMGVhMDJiNzI4NmNjN2U3NGVjOTUxZDFjOTgyMmMzODU3NmZlYjczYmMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGMwMGZhOWIxOGViZjMzMWViOTYxNTM3YTQ1YTQyNjZjNzAzNGYyZjBkNGUxZDA3MTZmYjZlYWUyMGVhZTI5ZScsXG4gICAgICAgICdlZmE0NzI2N2ZlYTUyMWExYTlkYzM0M2EzNzM2Yzk3NGMyZmFkYWZhODFlMzZjNTRlN2QyYTRjNjY3MDI0MTRiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2U3YTI2Y2U2OWRkNDgyOWYzZTEwY2VjMGE5ZTk4ZWQzMTQzZDA4NGYzMDhiOTJjMDk5N2ZkZGZjNjBjYjNlNDEnLFxuICAgICAgICAnMmE3NThlMzAwZmE3OTg0YjQ3MWIwMDZhMWFhZmJiMThkMGE2YjJjMDQyMGU4M2UyMGU4YTk0MjFjZjJjZmQ1MSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiNjQ1OWUwZWUzNjYyZWM4ZDIzNTQwYzIyM2JjYmRjNTcxY2JjYjk2N2Q3OTQyNGYzY2YyOWViM2RlNmI4MGVmJyxcbiAgICAgICAgJzY3Yzg3NmQwNmYzZTA2ZGUxZGFkZjE2ZTU2NjFkYjNjNGIzYWU2ZDQ4ZTM1YjJmZjMwYmYwYjYxYTcxYmE0NSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkNjhhODBjODI4MGJiODQwNzkzMjM0YWExMThmMDYyMzFkNmYxZmM2N2U3M2M1YTVkZWRhMGY1YjQ5Njk0M2U4JyxcbiAgICAgICAgJ2RiOGJhOWZmZjRiNTg2ZDAwYzRiMWY5MTc3YjBlMjhiNWIwZTdiOGY3ODQ1Mjk1YTI5NGM4NDI2NmIxMzMxMjAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzI0YWVkN2RmNjVjODA0MjUyZGMwMjcwOTA3YTMwYjA5NjEyYWViOTczNDQ5Y2VhNDA5NTk4MGZjMjhkM2Q1ZCcsXG4gICAgICAgICc2NDhhMzY1Nzc0YjYxZjJmZjEzMGMwYzM1YWVjMWY0ZjE5MjEzYjBjN2UzMzI4NDM5NjcyMjRhZjk2YWI3Yzg0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzRkZjljMTQ5MTljZGU2MWY2ZDUxZGZkYmU1ZmVlNWRjZWVjNDE0M2JhOGQxY2E4ODhlOGJkMzczZmQwNTRjOTYnLFxuICAgICAgICAnMzVlYzUxMDkyZDg3MjgwNTA5NzRjMjNhMWQ4NWQ0YjVkNTA2Y2RjMjg4NDkwMTkyZWJhYzA2Y2FkMTBkNWQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOWMzOTE5YTg0YTQ3NDg3MGZhZWQ4YTljMWNjNjYwMjE1MjM0ODkwNTRkN2YwMzA4Y2JmYzk5YzhhYzFmOThjZCcsXG4gICAgICAgICdkZGI4NGYwZjRhNGRkZDU3NTg0ZjA0NGJmMjYwZTY0MTkwNTMyNmY3NmM2NGM4ZTZiZTdlNWUwM2Q0ZmM1OTlkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzYwNTcxNzBiMWRkMTJmZGY4ZGUwNWYyODFkOGUwNmJiOTFlMTQ5M2E4YjkxZDRjYzVhMjEzODIxMjBhOTU5ZTUnLFxuICAgICAgICAnOWExYWYwYjI2YTZhNDgwN2FkZDlhMmRhZjcxZGYyNjI0NjUxNTJiYzNlZTI0YzY1ZTg5OWJlOTMyMzg1YTJhOCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhNTc2ZGY4ZTIzYTA4NDExNDIxNDM5YTQ1MThkYTMxODgwY2VmMGZiYTdkNGRmMTJiMWE2OTczZWVjYjk0MjY2JyxcbiAgICAgICAgJzQwYTZiZjIwZTc2NjQwYjJjOTJiOTdhZmU1OGNkODJjNDMyZTEwYTdmNTE0ZDlmM2VlOGJlMTFhZTFiMjhlYzgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzc3OGE3OGMyOGRlYzNlMzBhMDVmZTk2MjlkZThjMzhiYjMwZDFmNWNmOWEzYTIwOGY3NjM4ODliZTU4YWQ3MScsXG4gICAgICAgICczNDYyNmQ5YWI1YTViMjJmZjcwOThlMTJmMmZmNTgwMDg3YjM4NDExZmYyNGFjNTYzYjUxM2ZjMWZkOWY0M2FjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzkyODk1NWVlNjM3YTg0NDYzNzI5ZmQzMGU3YWZkMmVkNWY5NjI3NGU1YWQ3ZTVjYjA5ZWRhOWMwNmQ5MDNhYycsXG4gICAgICAgICdjMjU2MjEwMDNkM2Y0MmE4MjdiNzhhMTMwOTNhOTVlZWFjM2QyNmVmYThhOGQ4M2ZjNTE4MGU5MzViY2QwOTFmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzg1ZDBmZWYzZWM2ZGIxMDkzOTkwNjRmM2EwZTNiMjg1NTY0NWI0YTkwN2FkMzU0NTI3YWFlNzUxNjNkODI3NTEnLFxuICAgICAgICAnMWYwMzY0ODQxM2EzOGMwYmUyOWQ0OTZlNTgyY2Y1NjYzZTg3NTFlOTY4NzczMzE1ODJjMjM3YTI0ZWIxZjk2MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmZjJiMGRjZTk3ZWVjZTk3YzFjOWI2MDQxNzk4Yjg1ZGZkZmI2ZDg4ODJkYTIwMzA4ZjU0MDQ4MjQ1MjYwODdlJyxcbiAgICAgICAgJzQ5M2QxM2ZlZjUyNGJhMTg4YWY0YzRkYzU0ZDA3OTM2YzdiN2VkNmZiOTBlMmNlYjJjOTUxZTAxZjBjMjk5MDcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODI3ZmJiZTRiMWU4ODBlYTllZDJiMmU2MzAxYjIxMmI1N2YxZWUxNDhjZDZkZDI4NzgwZTVlMmNmODU2ZTI0MScsXG4gICAgICAgICdjNjBmOWM5MjNjNzI3YjBiNzFiZWYyYzY3ZDFkMTI2ODdmZjdhNjMxODY5MDMxNjZkNjA1YjY4YmFlYzI5M2VjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2VhYTY0OWYyMWY1MWJkYmFlN2JlNGFlMzRjZTZlNTIxN2E1OGZkY2U3ZjQ3ZjlhYTdmM2I1OGZhMjEyMGUyYjMnLFxuICAgICAgICAnYmUzMjc5ZWQ1YmJiYjAzYWM2OWE4MGY4OTg3OWFhNWEwMWE2Yjk2NWYxM2Y3ZTU5ZDQ3YTUzMDViYTVhZDkzZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlNGE0MmQ0M2M1Y2YxNjlkOTM5MWRmNmRlY2Y0MmVlNTQxYjZkOGYwYzlhMTM3NDAxZTIzNjMyZGRhMzRkMjRmJyxcbiAgICAgICAgJzRkOWY5MmU3MTZkMWM3MzUyNmZjOTljY2ZiOGFkMzRjZTg4NmVlZGZhOGQ4ZTRmMTNhN2Y3MTMxZGViYTk0MTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMWVjODBmZWYzNjBjYmRkOTU0MTYwZmFkYWIzNTJiNmI5MmI1MzU3NmE4OGZlYTQ5NDcxNzNiOWQ0MzAwYmYxOScsXG4gICAgICAgICdhZWVmZTkzNzU2YjUzNDBkMmYzYTQ5NThhN2FiYmY1ZTAxNDZlNzdmNjI5NWEwN2I2NzFjZGMxY2MxMDdjZWZkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE0NmE3NzhjMDQ2NzBjMmY5MWIwMGFmNDY4MGRmYThiY2UzNDkwNzE3ZDU4YmE4ODlkZGI1OTI4MzY2NjQyYmUnLFxuICAgICAgICAnYjMxOGUwZWMzMzU0MDI4YWRkNjY5ODI3ZjlkNGIyODcwYWFhOTcxZDJmN2U1ZWQxZDBiMjk3NDgzZDgzZWZkMCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmYTUwYzBmNjFkMjJlNWYwN2UzYWNlYmIxYWEwN2IxMjhkMDAxMjIwOWEyOGI5Nzc2ZDc2YTg3OTMxODBlZWY5JyxcbiAgICAgICAgJzZiODRjNjkyMjM5N2ViYTliNzJjZDI4NzIyODFhNjhhNWU2ODMyOTNhNTdhMjEzYjM4Y2Q4ZDdkM2Y0ZjI4MTEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGExZDYxZDBjYTcyMWExMWIxYTViZjZiN2Q4OGU4NDIxYTI4OGFiNWQ1YmJhNTIyMGU1M2QzMmI1ZjA2N2VjMicsXG4gICAgICAgICc4MTU3ZjU1YTdjOTkzMDZjNzljMDc2NjE2MWM5MWUyOTY2YTczODk5ZDI3OWI0OGE2NTVmYmEwZjFhZDgzNmYxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2E4ZTI4MmZmMGM5NzA2OTA3MjE1ZmY5OGU4ZmQ0MTY2MTUzMTFkZTA0NDZmMWUwNjJhNzNiMDYxMGQwNjRlMTMnLFxuICAgICAgICAnN2Y5NzM1NWI4ZGI4MWMwOWFiZmI3ZjNjNWIyNTE1ODg4YjY3OWEzZTUwZGQ2YmQ2Y2VmN2M3MzExMWY0Y2MwYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNzRhNTNiOWM5YTI4NTg3MmQzOWU1NmU2OTEzY2FiMTVkNTliMWZhNTEyNTA4YzAyMmYzODJkZTgzMTk0OTdjJyxcbiAgICAgICAgJ2NjYzlkYzM3YWJmYzljMTY1N2I0MTU1ZjJjNDdmOWU2NjQ2YjNhMWQ4Y2I5ODU0MzgzZGExM2FjMDc5YWZhNzMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOTU5Mzk2OTgxOTQzNzg1YzNkM2U1N2VkZjUwMThjZGJlMDM5ZTczMGU0OTE4YjNkODg0ZmRmZjA5NDc1YjdiYScsXG4gICAgICAgICcyZTdlNTUyODg4YzMzMWRkOGJhMDM4NmE0YjljZDY4NDljNjUzZjY0Yzg3MDkzODVlOWI4YWJmODc1MjRmMmZkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2QyYTYzYTUwYWU0MDFlNTZkNjQ1YTExNTNiMTA5YThmY2NhMGE0M2Q1NjFmYmEyZGJiNTEzNDBjOWQ4MmIxNTEnLFxuICAgICAgICAnZTgyZDg2ZmI2NDQzZmNiNzU2NWFlZTU4YjI5NDgyMjBhNzBmNzUwYWY0ODRjYTUyZDQxNDIxNzRkY2Y4OTQwNSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2NDU4N2UyMzM1NDcxZWI4OTBlZTc4OTZkN2NmZGM4NjZiYWNiZGJkMzgzOTMxN2IzNDM2ZjliNDU2MTdlMDczJyxcbiAgICAgICAgJ2Q5OWZjZGQ1YmY2OTAyZTJhZTk2ZGQ2NDQ3YzI5OWExODViOTBhMzkxMzNhZWFiMzU4Mjk5ZTVlOWZhZjY1ODknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODQ4MWJkZTBlNGU0ZDg4NWIzYTU0NmQzZTU0OWRlMDQyZjBhYTZjZWEyNTBlN2ZkMzU4ZDZjODZkZDQ1ZTQ1OCcsXG4gICAgICAgICczOGVlN2I4Y2JhNTQwNGRkODRhMjViZjM5Y2VjYjJjYTkwMGE3OWM0MmIyNjJlNTU2ZDY0YjFiNTk3NzkwNTdlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzEzNDY0YTU3YTc4MTAyYWE2MmI2OTc5YWU4MTdmNDYzN2ZmY2ZlZDNjNGIxY2UzMGJjZDYzMDNmNmNhZjY2NmInLFxuICAgICAgICAnNjliZTE1OTAwNDYxNDU4MGVmN2U0MzM0NTNjY2IwY2E0OGYzMDBhODFkMDk0MmUxM2Y0OTVhOTA3ZjZlY2MyNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiYzRhOWRmNWI3MTNmZTJlOWFlZjQzMGJjYzFkYzk3YTBjZDljY2VkZTJmMjg1ODhjYWRhM2EwZDJkODNmMzY2JyxcbiAgICAgICAgJ2QzYTgxY2E2ZTc4NWMwNjM4MzkzN2FkZjRiNzk4Y2FhNmU4YTlmYmZhNTQ3YjE2ZDc1OGQ2NjY1ODFmMzNjMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4YzI4YTk3YmY4Mjk4YmMwZDIzZDhjNzQ5NDUyYTMyZTY5NGI2NWUzMGE5NDcyYTM5NTRhYjMwZmU1MzI0Y2FhJyxcbiAgICAgICAgJzQwYTMwNDYzYTMzMDUxOTMzNzhmZWRmMzFmN2NjMGViN2FlNzg0ZjA0NTFjYjk0NTllNzFkYzczY2JlZjk0ODInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGVhOTY2NjEzOTUyN2E4YzFkZDk0Y2U0ZjA3MWZkMjNjOGIzNTBjNWE0YmIzMzc0OGM0YmExMTFmYWNjYWUwJyxcbiAgICAgICAgJzYyMGVmYWJiYzhlZTI3ODJlMjRlN2MwY2ZiOTVjNWQ3MzViNzgzYmU5Y2YwZjhlOTU1YWYzNGEzMGU2MmI5NDUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGQzNjI1ZmFlZjViYTA2MDc0NjY5NzE2YmJkMzc4OGQ4OWJkZGU4MTU5NTk5NjgwOTJmNzZjYzRlYjlhOTc4NycsXG4gICAgICAgICc3YTE4OGZhMzUyMGUzMGQ0NjFkYTI1MDEwNDU3MzFjYTk0MTQ2MTk4Mjg4MzM5NTkzN2Y2OGQwMGM2NDRhNTczJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Y3MTBkNzlkOWViOTYyMjk3ZTRmNjIzMmI0MGU4ZjdmZWIyYmM2MzgxNDYxNGQ2OTJjMTJkZTc1MjQwODIyMWUnLFxuICAgICAgICAnZWE5OGU2NzIzMmQzYjMyOTVkM2I1MzU1MzIxMTVjY2FjODYxMmM3MjE4NTE2MTc1MjZhZTQ3YTljNzdiZmM4MidcbiAgICAgIF1cbiAgICBdXG4gIH0sXG4gIG5hZjoge1xuICAgIHduZDogNyxcbiAgICBwb2ludHM6IFtcbiAgICAgIFtcbiAgICAgICAgJ2Y5MzA4YTAxOTI1OGMzMTA0OTM0NGY4NWY4OWQ1MjI5YjUzMWM4NDU4MzZmOTliMDg2MDFmMTEzYmNlMDM2ZjknLFxuICAgICAgICAnMzg4ZjdiMGY2MzJkZTgxNDBmZTMzN2U2MmEzN2YzNTY2NTAwYTk5OTM0YzIyMzFiNmNiOWZkNzU4NGI4ZTY3MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyZjhiZGU0ZDFhMDcyMDkzNTViNGE3MjUwYTVjNTEyOGU4OGI4NGJkZGM2MTlhYjdjYmE4ZDU2OWIyNDBlZmU0JyxcbiAgICAgICAgJ2Q4YWMyMjI2MzZlNWUzZDZkNGRiYTlkZGE2YzljNDI2Zjc4ODI3MWJhYjBkNjg0MGRjYTg3ZDNhYTZhYzYyZDYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNWNiZGYwNjQ2ZTVkYjRlYWEzOThmMzY1ZjJlYTdhMGUzZDQxOWI3ZTAzMzBlMzljZTkyYmRkZWRjYWM0ZjliYycsXG4gICAgICAgICc2YWViY2E0MGJhMjU1OTYwYTMxNzhkNmQ4NjFhNTRkYmE4MTNkMGI4MTNmZGU3YjVhNTA4MjYyODA4NzI2NGRhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2FjZDQ4NGUyZjBjN2Y2NTMwOWFkMTc4YTlmNTU5YWJkZTA5Nzk2OTc0YzU3ZTcxNGMzNWYxMTBkZmMyN2NjYmUnLFxuICAgICAgICAnY2MzMzg5MjFiMGE3ZDlmZDY0MzgwOTcxNzYzYjYxZTlhZGQ4ODhhNDM3NWY4ZTBmMDVjYzI2MmFjNjRmOWMzNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NzRhZTdmODU4YTk0MTFlNWVmNDI0NmI3MGM2NWFhYzU2NDk5ODBiZTVjMTc4OTFiYmVjMTc4OTVkYTAwOGNiJyxcbiAgICAgICAgJ2Q5ODRhMDMyZWI2YjVlMTkwMjQzZGQ1NmQ3YjdiMzY1MzcyZGIxZTJkZmY5ZDZhODMwMWQ3NGM5Yzk1M2M2MWInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZjI4NzczYzJkOTc1Mjg4YmM3ZDFkMjA1YzM3NDg2NTFiMDc1ZmJjNjYxMGU1OGNkZGVlZGRmOGYxOTQwNWFhOCcsXG4gICAgICAgICdhYjA5MDJlOGQ4ODBhODk3NTgyMTJlYjY1Y2RhZjQ3M2ExYTA2ZGE1MjFmYTkxZjI5YjVjYjUyZGIwM2VkODEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDc5MjRkNGY3ZDQzZWE5NjVhNDY1YWUzMDk1ZmY0MTEzMWU1OTQ2ZjNjODVmNzllNDRhZGJjZjhlMjdlMDgwZScsXG4gICAgICAgICc1ODFlMjg3MmE4NmM3MmE2ODM4NDJlYzIyOGNjNmRlZmVhNDBhZjJiZDg5NmQzYTVjNTA0ZGM5ZmY2YTI2YjU4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RlZmRlYTRjZGI2Nzc3NTBhNDIwZmVlODA3ZWFjZjIxZWI5ODk4YWU3OWI5NzY4NzY2ZTRmYWEwNGEyZDRhMzQnLFxuICAgICAgICAnNDIxMWFiMDY5NDYzNTE2OGU5OTdiMGVhZDJhOTNkYWVjZWQxZjRhMDRhOTVjMGY2Y2ZiMTk5ZjY5ZTU2ZWI3NydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyYjRlYTBhNzk3YTQ0M2QyOTNlZjVjZmY0NDRmNDk3OWYwNmFjZmViZDdlODZkMjc3NDc1NjU2MTM4Mzg1YjZjJyxcbiAgICAgICAgJzg1ZTg5YmMwMzc5NDVkOTNiMzQzMDgzYjVhMWM4NjEzMWEwMWY2MGM1MDI2OTc2M2I1NzBjODU0ZTVjMDliN2EnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzUyYmJmNGE0Y2RkMTI1NjRmOTNmYTMzMmNlMzMzMzAxZDlhZDQwMjcxZjgxMDcxODEzNDBhZWYyNWJlNTlkNScsXG4gICAgICAgICczMjFlYjQwNzUzNDhmNTM0ZDU5YzE4MjU5ZGRhM2UxZjRhMWIzYjJlNzFiMTAzOWM2N2JkM2Q4YmNmODE5OThjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzJmYTIxMDRkNmIzOGQxMWIwMjMwMDEwNTU5ODc5MTI0ZTQyYWI4ZGZlZmY1ZmYyOWRjOWNkYWRkNGVjYWNjM2YnLFxuICAgICAgICAnMmRlMTA2ODI5NWRkODY1YjY0NTY5MzM1YmQ1ZGQ4MDE4MWQ3MGVjZmM4ODI2NDg0MjNiYTc2YjUzMmI3ZDY3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzkyNDgyNzliMDliNGQ2OGRhYjIxYTliMDY2ZWRkYTgzMjYzYzNkODRlMDk1NzJlMjY5Y2EwY2Q3ZjU0NTM3MTQnLFxuICAgICAgICAnNzMwMTZmN2JmMjM0YWFkZTVkMWFhNzFiZGVhMmIxZmYzZmMwZGUyYTg4NzkxMmZmZTU0YTMyY2U5N2NiMzQwMidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkYWVkNGYyYmUzYThiZjI3OGU3MDEzMmZiMGJlYjc1MjJmNTcwZTE0NGJmNjE1YzA3ZTk5NmQ0NDNkZWU4NzI5JyxcbiAgICAgICAgJ2E2OWRjZTRhN2Q2Yzk4ZThkNGExYWNhODdlZjhkNzAwM2Y4M2MyMzBmM2FmYTcyNmFiNDBlNTIyOTBiZTFjNTUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYzQ0ZDEyYzcwNjVkODEyZThhY2YyOGQ3Y2JiMTlmOTAxMWVjZDllOWZkZjI4MWIwZTZhM2I1ZTg3ZDIyZTdkYicsXG4gICAgICAgICcyMTE5YTQ2MGNlMzI2Y2RjNzZjNDU5MjZjOTgyZmRhYzBlMTA2ZTg2MWVkZjYxYzVhMDM5MDYzZjBlMGU2NDgyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzZhMjQ1YmY2ZGM2OTg1MDRjODlhMjBjZmRlZDYwODUzMTUyYjY5NTMzNmMyODA2M2I2MWM2NWNiZDI2OWU2YjQnLFxuICAgICAgICAnZTAyMmNmNDJjMmJkNGE3MDhiM2Y1MTI2ZjE2YTI0YWQ4YjMzYmE0OGQwNDIzYjZlZmQ1ZTYzNDgxMDBkOGE4MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNjk3ZmZhNmZkOWRlNjI3YzA3N2UzZDJmZTU0MTA4NGNlMTMzMDBiMGJlYzExNDZmOTVhZTU3ZjBkMGJkNmE1JyxcbiAgICAgICAgJ2I5YzM5OGYxODY4MDZmNWQyNzU2MTUwNmU0NTU3NDMzYTJjZjE1MDA5ZTQ5OGFlN2FkZWU5ZDYzZDAxYjIzOTYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNjA1YmRiMDE5OTgxNzE4Yjk4NmQwZjA3ZTgzNGNiMGQ5ZGViODM2MGZmYjdmNjFkZjk4MjM0NWVmMjdhNzQ3OScsXG4gICAgICAgICcyOTcyZDJkZTRmOGQyMDY4MWE3OGQ5M2VjOTZmZTIzYzI2YmZhZTg0ZmIxNGRiNDNiMDFlMWU5MDU2YjhjNDknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNjJkMTRkYWI0MTUwYmY0OTc0MDJmZGM0NWEyMTVlMTBkY2IwMWMzNTQ5NTliMTBjZmUzMWM3ZTlkODdmZjMzZCcsXG4gICAgICAgICc4MGZjMDZiZDhjYzViMDEwOTgwODhhMTk1MGVlZDBkYjAxYWExMzI5NjdhYjQ3MjIzNWY1NjQyNDgzYjI1ZWFmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzgwYzYwYWQwMDQwZjI3ZGFkZTViNGIwNmM0MDhlNTZiMmM1MGU5ZjU2YjliOGI0MjVlNTU1YzJmODYzMDhiNmYnLFxuICAgICAgICAnMWMzODMwM2YxY2M1YzMwZjI2ZTY2YmFkN2ZlNzJmNzBhNjVlZWQ0Y2JlNzAyNGViMWFhMDFmNTY0MzBiZDU3YSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3YTkzNzVhZDYxNjdhZDU0YWE3NGM2MzQ4Y2M1NGQzNDRjYzVkYzk0ODdkODQ3MDQ5ZDVlYWJiMGZhMDNjOGZiJyxcbiAgICAgICAgJ2QwZTNmYTllY2E4NzI2OTA5NTU5ZTBkNzkyNjkwNDZiZGM1OWVhMTBjNzBjZTJiMDJkNDk5ZWMyMjRkYzdmNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkNTI4ZWNkOWI2OTZiNTRjOTA3YTllZDA0NTQ0N2E3OWJiNDA4ZWMzOWI2OGRmNTA0YmI1MWY0NTliYzNmZmM5JyxcbiAgICAgICAgJ2VlY2Y0MTI1MzEzNmU1Zjk5OTY2ZjIxODgxZmQ2NTZlYmM0MzQ1NDA1YzUyMGRiYzA2MzQ2NWI1MjE0MDk5MzMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDkzNzBhNGI1ZjQzNDEyZWEyNWY1MTRlOGVjZGFkMDUyNjYxMTVlNGE3ZWNiMTM4NzIzMTgwOGY4YjQ1OTYzJyxcbiAgICAgICAgJzc1OGYzZjQxYWZkNmVkNDI4YjMwODFiMDUxMmZkNjJhNTRjM2YzYWZiYjViNjc2NGI2NTMwNTJhMTI5NDljOWEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzdmMjMwOTM2ZWU4OGNiYmQ3M2RmOTMwZDY0NzAyZWY4ODFkODExZTBlMTQ5OGUyZjFjMTNlYjFmYzM0NWQ3NCcsXG4gICAgICAgICc5NThlZjQyYTc4ODZiNjQwMGEwODI2NmU5YmExYjM3ODk2Yzk1MzMwZDk3MDc3Y2JiZThlYjNjNzY3MWM2MGQ2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2YyZGFjOTkxY2M0Y2U0YjllYTQ0ODg3ZTVjN2MwYmNlNThjODAwNzRhYjlkNGRiYWViMjg1MzFiNzczOWY1MzAnLFxuICAgICAgICAnZTBkZWRjOWIzYjJmOGRhZDRkYTFmMzJkZWMyNTMxZGY5ZWI1ZmJlYjA1OThlNGZkMWExMTdkYmE3MDNhM2MzNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0NjNiM2Q5ZjY2MjYyMWZiMWI0YmU4ZmJiZTI1MjAxMjVhMjE2Y2RmYzlkYWUzZGViY2JhNDg1MGM2OTBkNDViJyxcbiAgICAgICAgJzVlZDQzMGQ3OGMyOTZjMzU0MzExNDMwNmRkODYyMmQ3YzYyMmUyN2M5NzBhMWRlMzFjYjM3N2IwMWFmNzMwN2UnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZjE2ZjgwNDI0NGU0NmUyYTA5MjMyZDRhZmYzYjU5OTc2Yjk4ZmFjMTQzMjhhMmQxYTMyNDk2YjQ5OTk4ZjI0NycsXG4gICAgICAgICdjZWRhYmQ5YjgyMjAzZjdlMTNkMjA2ZmNkZjRlMzNkOTJhNmM1M2MyNmU1Y2NlMjZkNjU3OTk2MmM0ZTMxZGY2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2NhZjc1NDI3MmRjODQ1NjNiMDM1MmI3YTE0MzExYWY1NWQyNDUzMTVhY2UyN2M2NTM2OWUxNWY3MTUxZDQxZDEnLFxuICAgICAgICAnY2I0NzQ2NjBlZjM1ZjVmMmE0MWI2NDNmYTVlNDYwNTc1ZjRmYTliNzk2MjIzMmE1YzMyZjkwODMxOGEwNDQ3NidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyNjAwY2E0YjI4MmNiOTg2Zjg1ZDBmMTcwOTk3OWQ4YjQ0YTA5YzA3Y2I4NmQ3YzEyNDQ5N2JjODZmMDgyMTIwJyxcbiAgICAgICAgJzQxMTliODg3NTNjMTViZDZhNjkzYjAzZmNkZGJiNDVkNWFjNmJlNzRhYjVmMGVmNDRiMGJlOTQ3NWE3ZTRiNDAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzYzNWNhNzJkN2U4NDMyYzMzOGVjNTNjZDEyMjIwYmMwMWM0ODY4NWUyNGY3ZGM4YzYwMmE3NzQ2OTk4ZTQzNScsXG4gICAgICAgICc5MWI2NDk2MDk0ODlkNjEzZDFkNWU1OTBmNzhlNmQ3NGVjZmMwNjFkNTcwNDhiYWQ5ZTc2ZjMwMmM1YjljNjEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzU0ZTMyMzlmMzI1NTcwY2RiYmY0YTg3ZGVlZThhNjZiN2YyYjMzNDc5ZDQ2OGZiYzFhNTA3NDNiZjU2Y2MxOCcsXG4gICAgICAgICc2NzNmYjg2ZTViZGEzMGZiM2NkMGVkMzA0ZWE0OWEwMjNlZTMzZDAxOTdhNjk1ZDBjNWQ5ODA5M2M1MzY2ODMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTNlNmJkMTA3MWExZTk2YWZmNTc4NTljODJkNTcwZjAzMzA4MDA2NjFkMWM5NTJmOWZlMjY5NDY5MWQ5YjllOCcsXG4gICAgICAgICc1OWM5ZTBiYmEzOTRlNzZmNDBjMGFhNTgzNzlhM2NiNmE1YTIyODM5OTNlOTBjNDE2NzAwMmFmNDkyMGUzN2Y1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE4NmI0ODNkMDU2YTAzMzgyNmFlNzNkODhmNzMyOTg1YzRjY2IxZjMyYmEzNWY0YjRjYzQ3ZmRjZjA0YWE2ZWInLFxuICAgICAgICAnM2I5NTJkMzJjNjdjZjc3ZTJlMTc0NDZlMjA0MTgwYWIyMWZiODA5MDg5NTEzOGI0YTRhNzk3Zjg2ZTgwODg4YidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkZjlkNzBhNmI5ODc2Y2U1NDRjOTg1NjFmNGJlNGY3MjU0NDJlNmQyYjczN2Q5YzkxYTgzMjE3MjRjZTA5NjNmJyxcbiAgICAgICAgJzU1ZWIyZGFmZDg0ZDZjY2Q1Zjg2MmI3ODVkYzM5ZDRhYjE1NzIyMjcyMGVmOWRhMjE3YjhjNDVjZjJiYTI0MTcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNWVkZDVjYzIzYzUxZTg3YTQ5N2NhODE1ZDVkY2UwZjhhYjUyNTU0Zjg0OWVkODk5NWRlNjRjNWYzNGNlNzE0MycsXG4gICAgICAgICdlZmFlOWM4ZGJjMTQxMzA2NjFlOGNlYzAzMGM4OWFkMGMxM2M2NmMwZDE3YTI5MDVjZGM3MDZhYjczOTlhODY4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzI5MDc5OGMyYjY0NzY4MzBkYTEyZmUwMjI4N2U5ZTc3N2FhM2ZiYTFjMzU1YjE3YTcyMmQzNjJmODQ2MTRmYmEnLFxuICAgICAgICAnZTM4ZGE3NmRjZDQ0MDYyMTk4OGQwMGJjZjc5YWYyNWQ1YjI5YzA5NGRiMmEyMzE0NmQwMDNhZmQ0MTk0M2U3YSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhZjNjNDIzYTk1ZDlmNWIzMDU0NzU0ZWZhMTUwYWMzOWNkMjk1NTJmZTM2MDI1NzM2MmRmZGVjZWY0MDUzYjQ1JyxcbiAgICAgICAgJ2Y5OGEzZmQ4MzFlYjJiNzQ5YTkzYjBlNmYzNWNmYjQwYzhjZDVhYTY2N2ExNTU4MWJjMmZlZGVkNDk4ZmQ5YzYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzY2ZGJiMjRkMTM0ZTc0NWNjY2FhMjhjOTliZjI3NDkwNmJiNjZiMjZkY2Y5OGRmOGQyZmVkNTBkODg0MjQ5YScsXG4gICAgICAgICc3NDRiMTE1MmVhY2JlNWUzOGRjYzg4Nzk4MGRhMzhiODk3NTg0YTY1ZmEwNmNlZGQyYzkyNGY5N2NiYWM1OTk2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzU5ZGJmNDZmOGM5NDc1OWJhMjEyNzdjMzM3ODRmNDE2NDVmN2I0NGY2YzU5NmE1OGNlOTJlNjY2MTkxYWJlM2UnLFxuICAgICAgICAnYzUzNGFkNDQxNzVmYmMzMDBmNGVhNmNlNjQ4MzA5YTA0MmNlNzM5YTc5MTk3OThjZDg1ZTIxNmM0YTMwN2Y2ZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmMTNhZGE5NTEwM2M0NTM3MzA1ZTY5MWU3NGU5YTRhOGRkNjQ3ZTcxMWE5NWU3M2NiNjJkYzYwMThjZmQ4N2I4JyxcbiAgICAgICAgJ2UxMzgxN2I0NGVlMTRkZTY2M2JmNGJjODA4MzQxZjMyNjk0OWUyMWE2YTc1YzI1NzA3Nzg0MTliZGFmNTczM2QnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzc1NGI0ZmEwZThhY2VkMDZkNDE2N2EyYzU5Y2NhNGNkYTE4NjljMDZlYmFkZmI2NDg4NTUwMDE1YTg4NTIyYycsXG4gICAgICAgICczMGU5M2U4NjRlNjY5ZDgyMjI0Yjk2N2MzMDIwYjhmYThkMWU0ZTM1MGI2Y2JjYzUzN2E0OGI1Nzg0MTE2M2EyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzk0OGRjYWRmNTk5MGUwNDhhYTM4NzRkNDZhYmVmOWQ3MDE4NThmOTVkZTgwNDFkMmE2ODI4Yzk5ZTIyNjI1MTknLFxuICAgICAgICAnZTQ5MWE0MjUzN2Y2ZTU5N2Q1ZDI4YTMyMjRiMWJjMjVkZjkxNTRlZmJkMmVmMWQyY2JiYTJjYWU1MzQ3ZDU3ZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3OTYyNDE0NDUwYzc2YzE2ODljN2I0OGY4MjAyZWMzN2ZiMjI0Y2Y1YWMwYmZhMTU3MDMyOGE4YTNkN2M3N2FiJyxcbiAgICAgICAgJzEwMGI2MTBlYzRmZmI0NzYwZDVjMWZjMTMzZWY2ZjZiMTI1MDdhMDUxZjA0YWM1NzYwYWZhNWIyOWRiODM0MzcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzUxNDA4NzgzNDk2NGI1NGIxNWIxNjA2NDRkOTE1NDg1YTE2OTc3MjI1Yjg4NDdiYjBkZDA4NTEzN2VjNDdjYScsXG4gICAgICAgICdlZjBhZmJiMjA1NjIwNTQ0OGUxNjUyYzQ4ZTgxMjdmYzYwMzllNzdjMTVjMjM3OGI3ZTdkMTVhMGRlMjkzMzExJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2QzY2MzMGFkNmI0ODNlNGJjNzljZTJjOWRkOGJjNTQ5OTNlOTQ3ZWI4ZGY3ODdiNDQyOTQzZDNmN2I1MjdlYWYnLFxuICAgICAgICAnOGIzNzhhMjJkODI3Mjc4ZDg5YzVlOWJlOGY5NTA4YWUzYzJhZDQ2MjkwMzU4NjMwYWZiMzRkYjA0ZWVkZTBhNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNjI0ZDg0NzgwNzMyODYwY2UxYzc4ZmNiZmVmZTA4YjJiMjk4MjNkYjkxM2Y2NDkzOTc1YmEwZmY0ODQ3NjEwJyxcbiAgICAgICAgJzY4NjUxY2Y5YjZkYTkwM2UwOTE0NDQ4YzZjZDlkNGNhODk2ODc4ZjUyODJiZTRjOGNjMDZlMmE0MDQwNzg1NzUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzMzY2U4MGRhOTU1YThhMjY5MDJjOTU2MzNlNjJhOTg1MTkyNDc0YjVhZjIwN2RhNmRmN2I0ZmQ1ZmM2MWNkNCcsXG4gICAgICAgICdmNTQzNWEyYmQyYmFkZjdkNDg1YTRkOGI4ZGI5ZmNjZTNlMWVmOGUwMjAxZTQ1NzhjNTQ2NzNiYzFkYzVlYTFkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE1ZDk0NDEyNTQ5NDUwNjRjZjFhMWMzM2JiZDNiNDlmODk2NmM1MDkyMTcxZTY5OWVmMjU4ZGZhYjgxYzA0NWMnLFxuICAgICAgICAnZDU2ZWIzMGI2OTQ2M2U3MjM0ZjUxMzdiNzNiODQxNzc0MzQ4MDBiYWNlYmZjNjg1ZmMzN2JiZTllZmU0MDcwZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhMWQwZmNmMmVjOWRlNjc1YjYxMjEzNmU1Y2U3MGQyNzFjMjE0MTdjOWQyYjhhYWFhYzEzODU5OWQwNzE3OTQwJyxcbiAgICAgICAgJ2VkZDc3ZjUwYmNiNWEzY2FiMmU5MDczNzMwOTY2N2YyNjQxNDYyYTU0MDcwZjNkNTE5MjEyZDM5YzE5N2E2MjknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTIyZmJlMTVjMGFmOGNjYzU3ODBjMDczNWY4NGRiZTlhNzkwYmFkZWU4MjQ1YzA2YzdjYTM3MzMxY2IzNjk4MCcsXG4gICAgICAgICdhODU1YmFiYWQ1Y2Q2MGM4OGI0MzBhNjlmNTNhMWE3YTM4Mjg5MTU0OTY0Nzk5YmU0M2QwNmQ3N2QzMWRhMDYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzExMDkxZGQ5ODYwZThlMjBlZTEzNDczYzExNTVmNWY2OTYzNWUzOTQ3MDRlYWE3NDAwOTQ1MjI0NmNmYTliMycsXG4gICAgICAgICc2NmRiNjU2Zjg3ZDFmMDRmZmZkMWYwNDc4OGMwNjgzMDg3MWVjNWE2NGZlZWU2ODViZDgwZjBiMTI4NmQ4Mzc0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM0YzFmZDA0ZDMwMWJlODliMzFjMDQ0MmQzZTZhYzI0ODgzOTI4YjQ1YTkzNDA3ODE4NjdkNDIzMmVjMmRiZGYnLFxuICAgICAgICAnOTQxNDY4NWU5N2IxYjU5NTRiZDQ2ZjczMDE3NDEzNmQ1N2YxY2VlYjQ4NzQ0M2RjNTMyMTg1N2JhNzNhYmVlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2YyMTllYTVkNmI1NDcwMWMxYzE0ZGU1YjU1N2ViNDJhOGQxM2YzYWJiY2QwOGFmZmNjMmE1ZTZiMDQ5YjhkNjMnLFxuICAgICAgICAnNGNiOTU5NTdlODNkNDBiMGY3M2FmNDU0NGNjY2Y2YjFmNGIwOGQzYzA3YjI3ZmI4ZDhjMjk2MmE0MDA3NjZkMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkN2I4NzQwZjc0YThmYmFhYjFmNjgzZGI4ZjQ1ZGUyNjU0M2E1NDkwYmNhNjI3MDg3MjM2OTEyNDY5YTBiNDQ4JyxcbiAgICAgICAgJ2ZhNzc5NjgxMjhkOWM5MmVlMTAxMGYzMzdhZDQ3MTdlZmYxNWRiNWVkM2MwNDliMzQxMWUwMzE1ZWFhNDU5M2InXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzJkMzFjMjIyZjhmNmYwZWY4NmY3Yzk4ZDNhMzMzNWVhZDViY2QzMmFiZGQ5NDI4OWZlNGQzMDkxYWE4MjRiZicsXG4gICAgICAgICc1ZjMwMzJmNTg5MjE1NmUzOWNjZDNkNzkxNWI5ZTFkYTJlNmRhYzllNmYyNmU5NjExMThkMTRiODQ2MmUxNjYxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc0NjFmMzcxOTE0YWIzMjY3MTA0NWExNTVkOTgzMWVhODc5M2Q3N2NkNTk1OTJjNDM0MGY4NmNiYzE4MzQ3YjUnLFxuICAgICAgICAnOGVjMGJhMjM4Yjk2YmVjMGNiZGRkY2FlMGFhNDQyNTQyZWVlMWZmNTBjOTg2ZWE2YjM5ODQ3YjNjYzA5MmZmNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlZTA3OWFkYjFkZjE4NjAwNzQzNTZhMjVhYTM4MjA2YTZkNzE2YjJjM2U2NzQ1M2QyODc2OThiYWQ3YjJiMmQ2JyxcbiAgICAgICAgJzhkYzI0MTJhYWZlM2JlNWM0YzVmMzdlMGVjYzVmOWY2YTQ0Njk4OWFmMDRjNGUyNWViYWFjNDc5ZWMxYzhjMWUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTZlYzkzZTQ0N2VjODNmMDQ2N2IxODMwMmVlNjIwZjdlNjVkZTMzMTg3NGM5ZGM3MmJmZDg2MTZiYTlkYTZiNScsXG4gICAgICAgICc1ZTQ2MzExNTBlNjJmYjQwZDBlOGMyYTdjYTU4MDRhMzlkNTgxODZhNTBlNDk3MTM5NjI2Nzc4ZTI1YjA2NzRkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2VhYTVmOTgwYzI0NWY2ZjAzODk3ODI5MGFmYTcwYjZiZDg4NTU4OTdmOThiNmFhNDg1Yjk2MDY1ZDUzN2JkOTknLFxuICAgICAgICAnZjY1ZjVkM2UyOTJjMmUwODE5YTUyODM5MWM5OTQ2MjRkNzg0ODY5ZDdlNmVhNjdmYjE4MDQxMDI0ZWRjMDdkYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3OGM5NDA3NTQ0YWMxMzI2OTJlZTE5MTBhMDI0Mzk5NThhZTA0ODc3MTUxMzQyZWE5NmM0YjZiMzVhNDlmNTEnLFxuICAgICAgICAnZjNlMDMxOTE2OWViOWI4NWQ1NDA0Nzk1NTM5YTVlNjhmYTFmYmQ1ODNjMDY0ZDI0NjJiNjc1ZjE5NGEzZGRiNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0OTRmNGJlMjE5YTFhNzcwMTZkY2Q4Mzg0MzFhZWEwMDAxY2RjOGFlN2E2ZmM2ODg3MjY1NzhkOTcwMjg1N2E1JyxcbiAgICAgICAgJzQyMjQyYTk2OTI4M2E1ZjMzOWJhN2YwNzVlMzZiYTJhZjkyNWNlMzBkNzY3ZWQ2ZTU1ZjRiMDMxODgwZDU2MmMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYTU5OGE4MDMwZGE2ZDg2YzZiYzdmMmY1MTQ0ZWE1NDlkMjgyMTFlYTU4ZmFhNzBlYmY0YzFlNjY1YzFmZTliNScsXG4gICAgICAgICcyMDRiNWQ2Zjg0ODIyYzMwN2U0YjRhNzE0MDczN2FlYzIzZmM2M2I2NWIzNWY4NmExMDAyNmRiZDJkODY0ZTZiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2M0MTkxNjM2NWFiYjJiNWQwOTE5MmY1ZjJkYmVhZmVjMjA4ZjAyMGYxMjU3MGExODRkYmFkYzNlNTg1OTU5OTcnLFxuICAgICAgICAnNGYxNDM1MWQwMDg3ZWZhNDlkMjQ1YjMyODk4NDk4OWQ1Y2FmOTQ1MGYzNGJmYzBlZDE2ZTk2YjU4ZmE5OTEzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzg0MWQ2MDYzYTU4NmZhNDc1YTcyNDYwNGRhMDNiYzViOTJhMmUwZDJlMGEzNmFjZmU0YzczYTU1MTQ3NDI4ODEnLFxuICAgICAgICAnNzM4NjdmNTljMDY1OWU4MTkwNGY5YTFjNzU0MzY5OGU2MjU2MmQ2NzQ0YzE2OWNlN2EzNmRlMDFhOGQ2MTU0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzVlOTViYjM5OWE2OTcxZDM3NjAyNjk0N2Y4OWJkZTJmMjgyYjMzODEwOTI4YmU0ZGVkMTEyYWM0ZDcwZTIwZDUnLFxuICAgICAgICAnMzlmMjNmMzY2ODA5MDg1YmVlYmZjNzExODEzMTM3NzVhOTljOWFlZDdkOGJhMzhiMTYxMzg0Yzc0NjAxMjg2NSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNmU0NjQxYTUzOTQ4ZmQ0NzZjMzlmOGE5OWZkOTc0ZTVlYzA3NTY0YjUzMTVkOGJmOTk0NzFiY2EwZWYyZjY2JyxcbiAgICAgICAgJ2QyNDI0YjFiMWFiZTRlYjgxNjQyMjdiMDg1YzlhYTk0NTZlYTEzNDkzZmQ1NjNlMDZmZDUxY2Y1Njk0Yzc4ZmMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzM2NTgxZWE3YmZiYmIyOTBjMTkxYTJmNTA3YTQxY2Y1NjQzODQyMTcwZTkxNGZhZWFiMjdjMmM1NzlmNzI2JyxcbiAgICAgICAgJ2VhZDEyMTY4NTk1ZmUxYmU5OTI1MjEyOWI2ZTU2YjMzOTFmN2FiMTQxMGNkMWUwZWYzZGNkY2FiZDJmZGEyMjQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGFiODk4MTZkYWRmZDZiNmExZjI2MzRmY2YwMGVjODQwMzc4MTAyNWVkNjg5MGM0ODQ5NzQyNzA2YmQ0M2VkZScsXG4gICAgICAgICc2ZmRjZWYwOWYyZjZkMGEwNDRlNjU0YWVmNjI0MTM2ZjUwM2Q0NTljM2U4OTg0NTg1OGE0N2E5MTI5Y2RkMjRlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzFlMzNmMWE3NDZjOWM1Nzc4MTMzMzQ0ZDkyOTlmY2FhMjBiMDkzOGU4YWNmZjI1NDRiYjQwMjg0YjhjNWZiOTQnLFxuICAgICAgICAnNjA2NjAyNTdkZDExYjNhYTljOGVkNjE4ZDI0ZWRmZjIzMDZkMzIwZjFkMDMwMTBlMzNhN2QyMDU3ZjNiM2I2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzg1YjdjMWRjYjNjZWMxYjdlZTdmMzBkZWQ3OWRkMjBhMGVkMWY0Y2MxOGNiY2ZjZmE0MTAzNjFmZDhmMDhmMzEnLFxuICAgICAgICAnM2Q5OGE5Y2RkMDI2ZGQ0M2YzOTA0OGYyNWE4ODQ3ZjRmY2FmYWQxODk1ZDdhNjMzYzZmZWQzYzM1ZTk5OTUxMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyOWRmOWZiZDhkOWU0NjUwOTI3NWY0YjEyNWQ2ZDQ1ZDdmYmU5YTNiODc4YTdhZjg3MmEyODAwNjYxYWM1ZjUxJyxcbiAgICAgICAgJ2I0YzRmZTk5Yzc3NWE2MDZlMmQ4ODYyMTc5MTM5ZmZkYTYxZGM4NjFjMDE5ZTU1Y2QyODc2ZWIyYTI3ZDg0YidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhMGIxY2FlMDZiMGE4NDdhM2ZlYTZlNjcxYWFmOGFkZmRmZTU4Y2EyZjc2ODEwNWM4MDgyYjJlNDQ5ZmNlMjUyJyxcbiAgICAgICAgJ2FlNDM0MTAyZWRkZTA5NThlYzRiMTlkOTE3YTZhMjhlNmI3MmRhMTgzNGFmZjBlNjUwZjA0OTUwM2EyOTZjZjInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNGU4Y2VhZmI5YjNlOWExMzZkYzdmZjY3ZTg0MDI5NWI0OTlkZmIzYjIxMzNlNGJhMTEzZjJlNGMwZTEyMWU1JyxcbiAgICAgICAgJ2NmMjE3NDExOGM4YjZkN2E0YjQ4ZjZkNTM0Y2U1Yzc5NDIyYzA4NmE2MzQ2MDUwMmI4MjdjZTYyYTMyNjY4M2MnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDI0YTQ0ZTA0N2UxOWI2ZjVhZmI4MWM3Y2EyZjY5MDgwYTUwNzY2ODlhMDEwOTE5ZjQyNzI1YzJiNzg5YTMzYicsXG4gICAgICAgICc2ZmI4ZDU1OTFiNDY2ZjhmYzYzZGI1MGYxYzBmMWM2OTAxM2Y5OTY4ODdiODI0NGQyY2RlYzQxN2FmZWE4ZmEzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2VhMDE2MDZhN2E2YzljZGQyNDlmZGZjZmFjYjk5NTg0MDAxZWRkMjhhYmJhYjc3YjUxMDRlOThlOGUzYjM1ZDQnLFxuICAgICAgICAnMzIyYWY0OTA4YzczMTJiMGNmYmZlMzY5ZjdhN2IzY2RiN2Q0NDk0YmMyODIzNzAwY2ZkNjUyMTg4YTNlYTk4ZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhZjhhZGRiZjJiNjYxYzhhNmM2MzI4NjU1ZWI5NjY1MTI1MjAwN2Q4YzVlYTMxYmU0YWQxOTZkZThjZTIxMzFmJyxcbiAgICAgICAgJzY3NDllNjdjMDI5Yjg1ZjUyYTAzNGVhZmQwOTY4MzZiMjUyMDgxODY4MGUyNmFjOGYzZGZiY2RiNzE3NDk3MDAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTNhZTE5NzQ1NjZjYTA2Y2M1MTZkNDdlMGZiMTY1YTY3NGEzZGFiY2ZjYTE1ZTcyMmYwZTM0NTBmNDU4ODknLFxuICAgICAgICAnMmFlYWJlN2U0NTMxNTEwMTE2MjE3ZjA3YmY0ZDA3MzAwZGU5N2U0ODc0ZjgxZjUzMzQyMGE3MmVlYjBiZDZhNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1OTFlZTM1NTMxM2Q5OTcyMWNmNjk5M2ZmZWQxZTNlMzAxOTkzZmYzZWQyNTg4MDIwNzVlYThjZWQzOTdlMjQ2JyxcbiAgICAgICAgJ2IwZWE1NThhMTEzYzMwYmVhNjBmYzQ3NzU0NjBjNzkwMWZmMGIwNTNkMjVjYTJiZGVlZTk4ZjFhNGJlNWQxOTYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTEzOTZkNTVmZGE1NGM0OWYxOWFhOTczMThkOGRhNjFmYTg1ODRlNDdiMDg0OTQ1MDc3Y2YwMzI1NWI1Mjk4NCcsXG4gICAgICAgICc5OThjNzRhOGNkNDVhYzAxMjg5ZDU4MzNhN2JlYjQ3NDRmZjUzNmIwMWIyNTdiZTRjNTc2N2JlYTkzZWE1N2E0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzNjNWQyYTFiYTM5YzVhMTc5MDAwMDczOGM5ZTBjNDBiOGRjZGZkNTQ2ODc1NGI2NDA1NTQwMTU3ZTAxN2FhN2EnLFxuICAgICAgICAnYjIyODQyNzk5OTVhMzRlMmY5ZDRkZTczOTZmYzE4YjgwZjliOGI5ZmRkMjcwZjY2NjFmNzljYTRjODFiZDI1NydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjYzg3MDRiOGE2MGEwZGVmYTNhOTlhNzI5OWYyZTljM2ZiYzM5NWFmYjA0YWMwNzg0MjVlZjhhMTc5M2NjMDMwJyxcbiAgICAgICAgJ2JkZDQ2MDM5ZmVlZDE3ODgxZDFlMDg2MmRiMzQ3ZjhjZjM5NWI3NGZjNGJjZGM0ZTk0MGI3NGUzYWMxZjFiMTMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYzUzM2U0ZjdlYTg1NTVhYWNkOTc3N2FjNWNhZDI5Yjk3ZGQ0ZGVmY2NjNTNlZTdlYTIwNDExOWIyODg5YjE5NycsXG4gICAgICAgICc2ZjBhMjU2YmM1ZWZkZjQyOWEyZmI2MjQyZjFhNDNhMmQ5YjkyNWJiNGE0YjNhMjZiYjhlMGY0NWViNTk2MDk2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2MxNGY4ZjJjY2IyN2Q2ZjEwOWY2ZDA4ZDAzY2M5NmE2OWJhOGMzNGVlYzA3YmJjZjU2NmQ0OGUzM2RhNjU5MycsXG4gICAgICAgICdjMzU5ZDY5MjNiYjM5OGY3ZmQ0NDczZTE2ZmUxYzI4NDc1Yjc0MGRkMDk4MDc1ZTZjMGU4NjQ5MTEzZGMzYTM4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2E2Y2JjMzA0NmJjNmE0NTBiYWMyNDc4OWZhMTcxMTVhNGM5NzM5ZWQ3NWY4ZjIxY2U0NDFmNzJlMGI5MGU2ZWYnLFxuICAgICAgICAnMjFhZTdmNDY4MGU4ODliYjEzMDYxOWUyYzBmOTVhMzYwY2ViNTczYzcwNjAzMTM5ODYyYWZkNjE3ZmE5YjlmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM0N2Q2ZDlhMDJjNDg5MjdlYmZiODZjMTM1OWIxY2FmMTMwYTNjMDI2N2QxMWNlNjM0NGIzOWY5OWQ0M2NjMzgnLFxuICAgICAgICAnNjBlYTdmNjFhMzUzNTI0ZDFjOTg3ZjZlY2VjOTJmMDg2ZDU2NWFiNjg3ODcwY2IxMjY4OWZmMWUzMWM3NDQ0OCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkYTY1NDVkMjE4MWRiOGQ5ODNmN2RjYjM3NWVmNTg2NmQ0N2M2N2IxYmYzMWM4Y2Y4NTVlZjc0MzdiNzI2NTZhJyxcbiAgICAgICAgJzQ5Yjk2NzE1YWI2ODc4YTc5ZTc4ZjA3Y2U1NjgwYzVkNjY3MzA1MWI0OTM1YmQ4OTdmZWE4MjRiNzdkYzIwOGEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYzQwNzQ3Y2M5ZDAxMmNiMWExM2I4MTQ4MzA5YzZkZTdlYzI1ZDY5NDVkNjU3MTQ2YjlkNTk5NGI4ZmViMTExMScsXG4gICAgICAgICc1Y2E1NjA3NTNiZTJhMTJmYzZkZTZjYWYyY2I0ODk1NjVkYjkzNjE1NmI5NTE0ZTFiYjVlODMwMzdlMGZhMmQ0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzRlNDJjOGVjODJjOTk3OThjY2YzYTYxMGJlODcwZTc4MzM4YzdmNzEzMzQ4YmQzNGM4MjAzZWY0MDM3ZjM1MDInLFxuICAgICAgICAnNzU3MWQ3NGVlNWUwZmI5MmE3YThiMzNhMDc3ODMzNDFhNTQ5MjE0NGNjNTRiY2M0MGE5NDQ3MzY5MzYwNjQzNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNzc1YWI3MDg5YmM2YWY4MjNhYmEyZTFhZjcwYjIzNmQyNTFjYWRiMGM4Njc0MzI4NzUyMmExYjNiMGRlZGVhJyxcbiAgICAgICAgJ2JlNTJkMTA3YmNmYTA5ZDhiY2I5NzM2YTgyOGNmYTdmYWM4ZGIxN2JmN2E3NmEyYzQyYWQ5NjE0MDkwMThjZjcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnY2VlMzFjYmY3ZTM0ZWMzNzlkOTRmYjgxNGQzZDc3NWFkOTU0NTk1ZDEzMTRiYTg4NDY5NTllM2U4MmY3NGUyNicsXG4gICAgICAgICc4ZmQ2NGExNGMwNmI1ODljMjZiOTQ3YWUyYmNmNmJmYTAxNDllZjBiZTE0ZWQ0ZDgwZjQ0OGEwMWM0M2IxYzZkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2I0ZjllYWVhMDliNjkxNzYxOWY2ZWE2YTRlYjU0NjRlZmRkYjU4ZmQ0NWIxZWJlZmNkYzFhMDFkMDhiNDc5ODYnLFxuICAgICAgICAnMzllNWM5OTI1YjVhNTRiMDc0MzNhNGYxOGM2MTcyNmY4YmIxMzFjMDEyY2E1NDJlYjI0YThhYzA3MjAwNjgyYSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkNDI2M2RmYzNkMmRmOTIzYTAxNzlhNDg5NjZkMzBjZTg0ZTI1MTVhZmMzZGNjYzFiNzc5MDc3OTJlYmNjNjBlJyxcbiAgICAgICAgJzYyZGZhZjA3YTBmNzhmZWIzMGUzMGQ2Mjk1ODUzY2UxODllMTI3NzYwYWQ2Y2Y3ZmFlMTY0ZTEyMmEyMDhkNTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDg0NTc1MjQ4MjBmYTY1YTRmOGQzNWViNjkzMDg1N2MwMDMyYWNjMGE0YTJkZTQyMjIzM2VlZGE4OTc2MTJjNCcsXG4gICAgICAgICcyNWE3NDhhYjM2Nzk3OWQ5ODczM2MzOGExZmExYzJlN2RjNmNjMDdkYjJkNjBhOWFlN2E3NmFhYTQ5YmQwZjc3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RmZWVlZjE4ODExMDFmMmNiMTE2NDRmM2EyYWZkZmMyMDQ1ZTE5OTE5MTUyOTIzZjM2N2ExNzY3YzExY2NlZGEnLFxuICAgICAgICAnZWNmYjcwNTZjZjFkZTA0MmY5NDIwYmFiMzk2NzkzYzBjMzkwYmRlNzRiNGJiZGZmMTZhODNhZTA5YTlhNzUxNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2ZDdlZjZiMTc1NDNmODM3M2M1NzNmNDRlMWYzODk4MzVkODliY2JjNjA2MmNlZDM2YzgyZGY4M2I4ZmFlODU5JyxcbiAgICAgICAgJ2NkNDUwZWMzMzU0Mzg5ODZkZmVmYTEwYzU3ZmVhOWJjYzUyMWEwOTU5YjJkODBiYmY3NGIxOTBkY2E3MTJkMTAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTc1NjA1ZDU5MTAyYTVhMjY4NDUwMGQzYjk5MWYyZTNmM2M4OGI5MzIyNTU0NzAzNWFmMjVhZjY2ZTA0NTQxZicsXG4gICAgICAgICdmNWM1NDc1NGE4ZjcxZWU1NDBiOWI0ODcyODQ3M2UzMTRmNzI5YWM1MzA4YjA2OTM4MzYwOTkwZTJiZmFkMTI1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2ViOTg2NjBmNGM0ZGZhYTA2YTJiZTQ1M2Q1MDIwYmM5OWEwYzJlNjBhYmUzODg0NTdkZDQzZmVmYjFlZDYyMGMnLFxuICAgICAgICAnNmNiOWE4ODc2ZDljYjg1MjA2MDlhZjNhZGQyNmNkMjBhMGE3Y2Q4YTk0MTExMzFjZTg1ZjQ0MTAwMDk5MjIzZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxM2U4N2IwMjdkODUxNGQzNTkzOWYyZTY4OTJiMTk5MjIxNTQ1OTY5NDE4ODgzMzZkYzM1NjNlM2I4ZGJhOTQyJyxcbiAgICAgICAgJ2ZlZjVhM2M2ODA1OWE2ZGVjNWQ2MjQxMTRiZjFlOTFhYWMyYjlkYTU2OGQ2YWJlYjI1NzBkNTU2NDZiOGFkZjEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZWUxNjMwMjZlOWZkNmZlMDE3YzM4ZjA2YTViZTZmYzEyNTQyNGIzNzFjZTI3MDhlN2JmNDQ5MTY5MWU1NzY0YScsXG4gICAgICAgICcxYWNiMjUwZjI1NWRkNjFjNDNkOTRjY2M2NzBkMGY1OGY0OWFlM2ZhMTViOTY2MjNlNTQzMGRhMGFkNmM2MmIyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2IyNjhmNWVmOWFkNTFlNGQ3OGRlM2E3NTBjMmRjODliMWU2MjZkNDM1MDU4Njc5OTk5MzJlNWRiMzNhZjNkODAnLFxuICAgICAgICAnNWYzMTBkNGIzYzk5YjllYmIxOWY3N2Q0MWMxZGVlMDE4Y2YwZDM0ZmQ0MTkxNjE0MDAzZTk0NWExMjE2ZTQyMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmZjA3ZjMxMThhOWRmMDM1ZTlmYWQ4NWViNmM3YmZlNDJiMDJmMDFjYTk5Y2VlYTNiZjdmZmRiYTkzYzQ3NTBkJyxcbiAgICAgICAgJzQzODEzNmQ2MDNlODU4YTNhNWM0NDBjMzhlY2NiYWRkYzFkMjk0MjExNGUyZWRkZDQ3NDBkMDk4Y2VkMWYwZDgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGQ4Yjk4NTVjN2MwNTJhMzQxNDZmZDIwZmZiNjU4YmVhNGI5ZjY5ZTBkODI1ZWJlYzE2ZThjM2NlMmI1MjZhMScsXG4gICAgICAgICdjZGI1NTllZWRjMmQ3OWY5MjZiYWY0NGZiODRlYTRkNDRiY2Y1MGZlZTUxZDdjZWIzMGUyZTdmNDYzMDM2NzU4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzUyZGIwYjUzODRkZmJmMDViZmE5ZDQ3MmQ3YWUyNmRmZTRiODUxY2VjYTkxYjFlYmE1NDI2MzE4MGRhMzJiNjMnLFxuICAgICAgICAnYzNiOTk3ZDA1MGVlNWQ0MjNlYmFmNjZhNmRiOWY1N2IzMTgwYzkwMjg3NTY3OWRlOTI0YjY5ZDg0YTdiMzc1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2U2MmY5NDkwZDNkNTFkYTYzOTVlZmQyNGU4MDkxOWNjN2QwZjI5YzNmM2ZhNDhjNmZmZjU0M2JlY2JkNDMzNTInLFxuICAgICAgICAnNmQ4OWFkN2JhNDg3NmIwYjIyYzJjYTI4MGM2ODI4NjJmMzQyYzg1OTFmMWRhZjUxNzBlMDdiZmQ5Y2NhZmE3ZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3ZjMwZWEyNDc2YjM5OWI0OTU3NTA5Yzg4Zjc3ZDAxOTFhZmEyZmY1Y2I3YjE0ZmQ2ZDhlN2Q2NWFhYWIxMTkzJyxcbiAgICAgICAgJ2NhNWVmN2Q0YjIzMWM5NGMzYjE1Mzg5YTVmNjMxMWU5ZGFmZjdiYjY3YjEwM2U5ODgwZWY0YmZmNjM3YWNhZWMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNTA5OGZmMWUxZDlmMTRmYjQ2YTIxMGZhZGE2YzkwM2ZlZjBmYjdiNGExZGQxZDlhYzYwYTAzNjE4MDBiN2EwMCcsXG4gICAgICAgICc5NzMxMTQxZDgxZmM4ZjgwODRkMzdjNmU3NTQyMDA2YjNlZTFiNDBkNjBkZmU1MzYyYTViMTMyZmQxN2RkYzAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzJiNzhjN2RlOWVlNTEyYTcyODk1YmU2YjljYmVmYTZlMmYzYzRjY2NlNDQ1Yzk2YjlmMmM4MWUyNzc4YWQ1OCcsXG4gICAgICAgICdlZTE4NDlmNTEzZGY3MWUzMmVmYzM4OTZlZTI4MjYwYzczYmI4MDU0N2FlMjI3NWJhNDk3MjM3Nzk0Yzg3NTNjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2UyY2I3NGZkZGM4ZTlmYmNkMDc2ZWVmMmE3YzcyYjBjZTM3ZDUwZjA4MjY5ZGZjMDc0YjU4MTU1MDU0N2E0ZjcnLFxuICAgICAgICAnZDNhYTJlZDcxYzlkZDIyNDdhNjJkZjA2MjczNmViMGJhZGRlYTllMzYxMjJkMmJlODY0MWFiY2IwMDVjYzRhNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4NDM4NDQ3NTY2ZDRkN2JlZGFkYzI5OTQ5NmFiMzU3NDI2MDA5YTM1ZjIzNWNiMTQxYmUwZDk5Y2QxMGFlM2E4JyxcbiAgICAgICAgJ2M0ZTEwMjA5MTY5ODBhNGRhNWQwMWFjNWU2YWQzMzA3MzRlZjBkNzkwNjYzMWM0ZjIzOTA0MjZiMmVkZDc5MWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDE2MmQ0ODhiODk0MDIwMzliNTg0YzZmYzZjMzA4ODcwNTg3ZDljNDZmNjYwYjg3OGFiNjVjODJjNzExZDY3ZScsXG4gICAgICAgICc2NzE2M2U5MDMyMzYyODlmNzc2ZjIyYzI1ZmI4YTNhZmMxNzMyZjJiODRiNGU5NWRiZGE0N2FlNWEwODUyNjQ5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzNmYWQzZmE4NGNhZjBmMzRmMGY4OWJmZDJkY2Y1NGZjMTc1ZDc2N2FlYzNlNTA2ODRmM2JhNGE0YmY1ZjY4M2QnLFxuICAgICAgICAnY2QxYmM3Y2I2Y2M0MDdiYjJmMGNhNjQ3YzcxOGE3MzBjZjcxODcyZTdkMGQyYTUzZmEyMGVmY2RmZTYxODI2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzY3NGYyNjAwYTMwMDdhMDA1NjhjMWE3Y2UwNWQwODE2YzFmYjg0YmYxMzcwNzk4ZjFjNjk1MzJmYWViMWE4NmInLFxuICAgICAgICAnMjk5ZDIxZjk0MTNmMzNiM2VkZjQzYjI1NzAwNDU4MGI3MGRiNTdkYTBiMTgyMjU5ZTA5ZWVjYzY5ZTBkMzhhNSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkMzJmNGRhNTRhZGU3NGFiYjgxYjgxNWFkMWZiM2IyNjNkODJkNmM2OTI3MTRiY2ZmODdkMjliZDVlZTlmMDhmJyxcbiAgICAgICAgJ2Y5NDI5ZTczOGI4ZTUzYjk2OGU5OTAxNmMwNTk3MDc3ODJlMTRmNDUzNTM1OWQ1ODJmYzQxNjkxMGIzZWVhODcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzBlNGU2NzA0MzUzODU1NTZlNTkzNjU3MTM1ODQ1ZDM2ZmJiNjkzMWY3MmIwOGNiMWVkOTU0ZjFlM2NlM2ZmNicsXG4gICAgICAgICc0NjJmOWJjZTYxOTg5ODYzODQ5OTM1MDExM2JiYzliMTBhODc4ZDM1ZGE3MDc0MGRjNjk1YTU1OWViODhkYjdiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2JlMjA2MjAwM2M1MWNjMzAwNDY4MjkwNDMzMGU0ZGVlN2YzZGNkMTBiMDFlNTgwYmYxOTcxYjA0ZDRjYWQyOTcnLFxuICAgICAgICAnNjIxODhiYzQ5ZDYxZTU0Mjg1NzNkNDhhNzRlMWM2NTViMWM2MTA5MDkwNTY4MmEwZDU1NThlZDcyZGNjYjliYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5MzE0NDQyM2FjZTM0NTFlZDI5ZTBmYjlhYzJhZjIxMWNiNmU4NGE2MDFkZjU5OTNjNDE5ODU5ZmZmNWRmMDRhJyxcbiAgICAgICAgJzdjMTBkZmIxNjRjMzQyNWY1YzcxYTNmOWQ3OTkyMDM4ZjEwNjUyMjRmNzJiYjlkMWQ5MDJhNmQxMzAzN2I0N2MnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYjAxNWY4MDQ0ZjVmY2JkY2YyMWNhMjZkNmMzNGZiODE5NzgyOTIwNWM3YjdkMmE3Y2I2NjQxOGMxNTdiMTEyYycsXG4gICAgICAgICdhYjhjMWUwODZkMDRlODEzNzQ0YTY1NWIyZGY4ZDVmODNiM2NkYzZmYWEzMDg4YzFkM2FlYTE0NTRlM2ExZDVmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Q1ZTllMWRhNjQ5ZDk3ZDg5ZTQ4NjgxMTdhNDY1YTNhNGY4YTE4ZGU1N2ExNDBkMzZiM2YyYWYzNDFhMjFiNTInLFxuICAgICAgICAnNGNiMDQ0MzdmMzkxZWQ3MzExMWExM2NjMWQ0ZGQwZGIxNjkzNDY1YzIyNDA0ODBkODk1NWU4NTkyZjI3NDQ3YSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkM2FlNDEwNDdkZDdjYTA2NWRiZjhlZDc3Yjk5MjQzOTk4MzAwNWNkNzJlMTZkNmY5OTZhNTMxNmQzNjk2NmJiJyxcbiAgICAgICAgJ2JkMWFlYjIxYWQyMmViYjIyYTEwZjAzMDM0MTdjNmQ5NjRmOGNkZDdkZjBhY2E2MTRiMTBkYzE0ZDEyNWFjNDYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDYzZTI3NjNkODg1Zjk1OGZjNjZjZGQyMjgwMGYwYTQ4NzE5N2QwYTgyZTM3N2I0OWY4MGFmODdjODk3YjA2NScsXG4gICAgICAgICdiZmVmYWNkYjBlNWQwZmQ3ZGYzYTMxMWE5NGRlMDYyYjI2YjgwYzYxZmJjOTc1MDhiNzk5OTI2NzFlZjdjYTdmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc5ODVmZGZkMTI3YzA1NjdjNmY1M2VjMWJiNjNlYzMxNThlNTk3YzQwYmZlNzQ3YzgzY2RkZmM5MTA2NDE5MTcnLFxuICAgICAgICAnNjAzYzEyZGFmM2Q5ODYyZWYyYjI1ZmUxZGUyODlhZWQyNGVkMjkxZTBlYzY3MDg3MDNhNWJkNTY3ZjMyZWQwMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NGExYWQ2YjVmNzZlMzlkYjJkZDI0OTQxMGVhYzdmOTllNzRjNTljYjgzZDJkMGVkNWZmMTU0M2RhNzcwM2U5JyxcbiAgICAgICAgJ2NjNjE1N2VmMThjOWM2M2NkNjE5M2Q4MzYzMWJiZWEwMDkzZTA5Njg5NDJlOGMzM2Q1NzM3ZmQ3OTBlMGRiMDgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzA2ODJhNTA3MDMzNzVmNjAyZDQxNjY2NGJhMTliN2ZjOWJhYjQyYzcyNzQ3NDYzYTcxZDA4OTZiMjJmNmRhMycsXG4gICAgICAgICc1NTNlMDRmNmIwMThiNGZhNmM4ZjM5ZTdmMzExZDMxNzYyOTBkMGUwZjE5Y2E3M2YxNzcxNGQ5OTc3YTIyZmY4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzllMjE1OGYwZDdjMGQ1ZjI2YzM3OTFlZmVmYTc5NTk3NjU0ZTdhMmIyNDY0ZjUyYjFlZTZjMTM0Nzc2OWVmNTcnLFxuICAgICAgICAnNzEyZmNkZDFiOTA1M2YwOTAwM2EzNDgxZmE3NzYyZTlmZmQ3YzhlZjM1YTM4NTA5ZTJmYmYyNjI5MDA4MzczJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE3NmUyNjk4OWE0M2M5Y2ZlYmE0MDI5YzIwMjUzOGMyODE3MmU1NjZlM2M0ZmNlNzMyMjg1N2YzYmUzMjdkNjYnLFxuICAgICAgICAnZWQ4Y2M5ZDA0YjI5ZWI4NzdkMjcwYjQ4NzhkYzQzYzE5YWVmZDMxZjRlZWUwOWVlN2I0NzgzNGMxZmE0YjFjMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NWQ0NmVmZWEzNzcxZTZlNjhhYmI4OWExM2FkNzQ3ZWNmMTg5MjM5M2RmYzRmMWI3MDA0Nzg4YzUwMzc0ZGE4JyxcbiAgICAgICAgJzk4NTIzOTBhOTk1MDc2NzlmZDBiODZmZDJiMzlhODY4ZDdlZmMyMjE1MTM0NmUxYTNjYTQ3MjY1ODZhNmJlZDgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODA5YTIwYzY3ZDY0OTAwZmZiNjk4YzRjODI1ZjZkNWYyMzEwZmIwNDUxYzg2OTM0NWI3MzE5ZjY0NTYwNTcyMScsXG4gICAgICAgICc5ZTk5NDk4MGQ5OTE3ZTIyYjc2YjA2MTkyN2ZhMDQxNDNkMDk2Y2NjNTQ5NjNlNmE1ZWJmYTVmM2Y4ZTI4NmMxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzFiMzg5MDNhNDNmN2YxMTRlZDQ1MDBiNGVhYzcwODNmZGVmZWNlMWNmMjljNjM1MjhkNTYzNDQ2Zjk3MmMxODAnLFxuICAgICAgICAnNDAzNmVkYzkzMWE2MGFlODg5MzUzZjc3ZmQ1M2RlNGEyNzA4YjI2YjZmNWRhNzJhZDMzOTQxMTlkYWY0MDhmOSdcbiAgICAgIF1cbiAgICBdXG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjdXJ2ZSA9IGV4cG9ydHM7XG5cbmN1cnZlLmJhc2UgPSByZXF1aXJlKCcuL2Jhc2UnKTtcbmN1cnZlLnNob3J0ID0gcmVxdWlyZSgnLi9zaG9ydCcpO1xuY3VydmUubW9udCA9IHJlcXVpcmUoJy4vbW9udCcpO1xuY3VydmUuZWR3YXJkcyA9IHJlcXVpcmUoJy4vZWR3YXJkcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3VydmUgPSByZXF1aXJlKCcuLi9jdXJ2ZScpO1xudmFyIGVsbGlwdGljID0gcmVxdWlyZSgnLi4vLi4vZWxsaXB0aWMnKTtcbnZhciBibiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIEJhc2UgPSBjdXJ2ZS5iYXNlO1xuXG52YXIgYXNzZXJ0ID0gZWxsaXB0aWMudXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBTaG9ydEN1cnZlKGNvbmYpIHtcbiAgQmFzZS5jYWxsKHRoaXMsICdzaG9ydCcsIGNvbmYpO1xuXG4gIHRoaXMuYSA9IG5ldyBibihjb25mLmEsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuYiA9IG5ldyBibihjb25mLmIsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMudGludiA9IHRoaXMudHdvLnJlZEludm0oKTtcblxuICB0aGlzLnplcm9BID0gdGhpcy5hLmZyb21SZWQoKS5jbXBuKDApID09PSAwO1xuICB0aGlzLnRocmVlQSA9IHRoaXMuYS5mcm9tUmVkKCkuc3ViKHRoaXMucCkuY21wbigtMykgPT09IDA7XG5cbiAgLy8gSWYgdGhlIGN1cnZlIGlzIGVuZG9tb3JwaGljLCBwcmVjYWxjdWxhdGUgYmV0YSBhbmQgbGFtYmRhXG4gIHRoaXMuZW5kbyA9IHRoaXMuX2dldEVuZG9tb3JwaGlzbShjb25mKTtcbiAgdGhpcy5fZW5kb1duYWZUMSA9IG5ldyBBcnJheSg0KTtcbiAgdGhpcy5fZW5kb1duYWZUMiA9IG5ldyBBcnJheSg0KTtcbn1cbmluaGVyaXRzKFNob3J0Q3VydmUsIEJhc2UpO1xubW9kdWxlLmV4cG9ydHMgPSBTaG9ydEN1cnZlO1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5fZ2V0RW5kb21vcnBoaXNtID0gZnVuY3Rpb24gX2dldEVuZG9tb3JwaGlzbShjb25mKSB7XG4gIC8vIE5vIGVmZmljaWVudCBlbmRvbW9ycGhpc21cbiAgaWYgKCF0aGlzLnplcm9BIHx8ICF0aGlzLmcgfHwgIXRoaXMubiB8fCB0aGlzLnAubW9kbigzKSAhPT0gMSlcbiAgICByZXR1cm47XG5cbiAgLy8gQ29tcHV0ZSBiZXRhIGFuZCBsYW1iZGEsIHRoYXQgbGFtYmRhICogUCA9IChiZXRhICogUHg7IFB5KVxuICB2YXIgYmV0YTtcbiAgdmFyIGxhbWJkYTtcbiAgaWYgKGNvbmYuYmV0YSkge1xuICAgIGJldGEgPSBuZXcgYm4oY29uZi5iZXRhLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB9IGVsc2Uge1xuICAgIHZhciBiZXRhcyA9IHRoaXMuX2dldEVuZG9Sb290cyh0aGlzLnApO1xuICAgIC8vIENob29zZSB0aGUgc21hbGxlc3QgYmV0YVxuICAgIGJldGEgPSBiZXRhc1swXS5jbXAoYmV0YXNbMV0pIDwgMCA/IGJldGFzWzBdIDogYmV0YXNbMV07XG4gICAgYmV0YSA9IGJldGEudG9SZWQodGhpcy5yZWQpO1xuICB9XG4gIGlmIChjb25mLmxhbWJkYSkge1xuICAgIGxhbWJkYSA9IG5ldyBibihjb25mLmxhbWJkYSwgMTYpO1xuICB9IGVsc2Uge1xuICAgIC8vIENob29zZSB0aGUgbGFtYmRhIHRoYXQgaXMgbWF0Y2hpbmcgc2VsZWN0ZWQgYmV0YVxuICAgIHZhciBsYW1iZGFzID0gdGhpcy5fZ2V0RW5kb1Jvb3RzKHRoaXMubik7XG4gICAgaWYgKHRoaXMuZy5tdWwobGFtYmRhc1swXSkueC5jbXAodGhpcy5nLngucmVkTXVsKGJldGEpKSA9PT0gMCkge1xuICAgICAgbGFtYmRhID0gbGFtYmRhc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFtYmRhID0gbGFtYmRhc1sxXTtcbiAgICAgIGFzc2VydCh0aGlzLmcubXVsKGxhbWJkYSkueC5jbXAodGhpcy5nLngucmVkTXVsKGJldGEpKSA9PT0gMCk7XG4gICAgfVxuICB9XG5cbiAgLy8gR2V0IGJhc2lzIHZlY3RvcnMsIHVzZWQgZm9yIGJhbGFuY2VkIGxlbmd0aC10d28gcmVwcmVzZW50YXRpb25cbiAgdmFyIGJhc2lzO1xuICBpZiAoY29uZi5iYXNpcykge1xuICAgIGJhc2lzID0gY29uZi5iYXNpcy5tYXAoZnVuY3Rpb24odmVjKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhOiBuZXcgYm4odmVjLmEsIDE2KSxcbiAgICAgICAgYjogbmV3IGJuKHZlYy5iLCAxNilcbiAgICAgIH07XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgYmFzaXMgPSB0aGlzLl9nZXRFbmRvQmFzaXMobGFtYmRhKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgYmV0YTogYmV0YSxcbiAgICBsYW1iZGE6IGxhbWJkYSxcbiAgICBiYXNpczogYmFzaXNcbiAgfTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLl9nZXRFbmRvUm9vdHMgPSBmdW5jdGlvbiBfZ2V0RW5kb1Jvb3RzKG51bSkge1xuICAvLyBGaW5kIHJvb3RzIG9mIGZvciB4XjIgKyB4ICsgMSBpbiBGXG4gIC8vIFJvb3QgPSAoLTEgKy0gU3FydCgtMykpIC8gMlxuICAvL1xuICB2YXIgcmVkID0gbnVtID09PSB0aGlzLnAgPyB0aGlzLnJlZCA6IGJuLm1vbnQobnVtKTtcbiAgdmFyIHRpbnYgPSBuZXcgYm4oMikudG9SZWQocmVkKS5yZWRJbnZtKCk7XG4gIHZhciBudGludiA9IHRpbnYucmVkTmVnKCk7XG5cbiAgdmFyIHMgPSBuZXcgYm4oMykudG9SZWQocmVkKS5yZWROZWcoKS5yZWRTcXJ0KCkucmVkTXVsKHRpbnYpO1xuXG4gIHZhciBsMSA9IG50aW52LnJlZEFkZChzKS5mcm9tUmVkKCk7XG4gIHZhciBsMiA9IG50aW52LnJlZFN1YihzKS5mcm9tUmVkKCk7XG4gIHJldHVybiBbIGwxLCBsMiBdO1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUuX2dldEVuZG9CYXNpcyA9IGZ1bmN0aW9uIF9nZXRFbmRvQmFzaXMobGFtYmRhKSB7XG4gIC8vIGFwcnhTcXJ0ID49IHNxcnQodGhpcy5uKVxuICB2YXIgYXByeFNxcnQgPSB0aGlzLm4uc2hybihNYXRoLmZsb29yKHRoaXMubi5iaXRMZW5ndGgoKSAvIDIpKTtcblxuICAvLyAzLjc0XG4gIC8vIFJ1biBFR0NELCB1bnRpbCByKEwgKyAxKSA8IGFwcnhTcXJ0XG4gIHZhciB1ID0gbGFtYmRhO1xuICB2YXIgdiA9IHRoaXMubi5jbG9uZSgpO1xuICB2YXIgeDEgPSBuZXcgYm4oMSk7XG4gIHZhciB5MSA9IG5ldyBibigwKTtcbiAgdmFyIHgyID0gbmV3IGJuKDApO1xuICB2YXIgeTIgPSBuZXcgYm4oMSk7XG5cbiAgLy8gTk9URTogYWxsIHZlY3RvcnMgYXJlIHJvb3RzIG9mOiBhICsgYiAqIGxhbWJkYSA9IDAgKG1vZCBuKVxuICB2YXIgYTA7XG4gIHZhciBiMDtcbiAgLy8gRmlyc3QgdmVjdG9yXG4gIHZhciBhMTtcbiAgdmFyIGIxO1xuICAvLyBTZWNvbmQgdmVjdG9yXG4gIHZhciBhMjtcbiAgdmFyIGIyO1xuXG4gIHZhciBwcmV2UjtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcjtcbiAgdmFyIHg7XG4gIHdoaWxlICh1LmNtcG4oMCkgIT09IDApIHtcbiAgICB2YXIgcSA9IHYuZGl2KHUpO1xuICAgIHIgPSB2LnN1YihxLm11bCh1KSk7XG4gICAgeCA9IHgyLnN1YihxLm11bCh4MSkpO1xuICAgIHZhciB5ID0geTIuc3ViKHEubXVsKHkxKSk7XG5cbiAgICBpZiAoIWExICYmIHIuY21wKGFwcnhTcXJ0KSA8IDApIHtcbiAgICAgIGEwID0gcHJldlIubmVnKCk7XG4gICAgICBiMCA9IHgxO1xuICAgICAgYTEgPSByLm5lZygpO1xuICAgICAgYjEgPSB4O1xuICAgIH0gZWxzZSBpZiAoYTEgJiYgKytpID09PSAyKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcHJldlIgPSByO1xuXG4gICAgdiA9IHU7XG4gICAgdSA9IHI7XG4gICAgeDIgPSB4MTtcbiAgICB4MSA9IHg7XG4gICAgeTIgPSB5MTtcbiAgICB5MSA9IHk7XG4gIH1cbiAgYTIgPSByLm5lZygpO1xuICBiMiA9IHg7XG5cbiAgdmFyIGxlbjEgPSBhMS5zcXIoKS5hZGQoYjEuc3FyKCkpO1xuICB2YXIgbGVuMiA9IGEyLnNxcigpLmFkZChiMi5zcXIoKSk7XG4gIGlmIChsZW4yLmNtcChsZW4xKSA+PSAwKSB7XG4gICAgYTIgPSBhMDtcbiAgICBiMiA9IGIwO1xuICB9XG5cbiAgLy8gTm9ybWFsaXplIHNpZ25zXG4gIGlmIChhMS5zaWduKSB7XG4gICAgYTEgPSBhMS5uZWcoKTtcbiAgICBiMSA9IGIxLm5lZygpO1xuICB9XG4gIGlmIChhMi5zaWduKSB7XG4gICAgYTIgPSBhMi5uZWcoKTtcbiAgICBiMiA9IGIyLm5lZygpO1xuICB9XG5cbiAgcmV0dXJuIFtcbiAgICB7IGE6IGExLCBiOiBiMSB9LFxuICAgIHsgYTogYTIsIGI6IGIyIH1cbiAgXTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLl9lbmRvU3BsaXQgPSBmdW5jdGlvbiBfZW5kb1NwbGl0KGspIHtcbiAgdmFyIGJhc2lzID0gdGhpcy5lbmRvLmJhc2lzO1xuICB2YXIgdjEgPSBiYXNpc1swXTtcbiAgdmFyIHYyID0gYmFzaXNbMV07XG5cbiAgdmFyIGMxID0gdjIuYi5tdWwoaykuZGl2Um91bmQodGhpcy5uKTtcbiAgdmFyIGMyID0gdjEuYi5uZWcoKS5tdWwoaykuZGl2Um91bmQodGhpcy5uKTtcblxuICB2YXIgcDEgPSBjMS5tdWwodjEuYSk7XG4gIHZhciBwMiA9IGMyLm11bCh2Mi5hKTtcbiAgdmFyIHExID0gYzEubXVsKHYxLmIpO1xuICB2YXIgcTIgPSBjMi5tdWwodjIuYik7XG5cbiAgLy8gQ2FsY3VsYXRlIGFuc3dlclxuICB2YXIgazEgPSBrLnN1YihwMSkuc3ViKHAyKTtcbiAgdmFyIGsyID0gcTEuYWRkKHEyKS5uZWcoKTtcbiAgcmV0dXJuIHsgazE6IGsxLCBrMjogazIgfTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLnBvaW50RnJvbVggPSBmdW5jdGlvbiBwb2ludEZyb21YKG9kZCwgeCkge1xuICB4ID0gbmV3IGJuKHgsIDE2KTtcbiAgaWYgKCF4LnJlZClcbiAgICB4ID0geC50b1JlZCh0aGlzLnJlZCk7XG5cbiAgdmFyIHkyID0geC5yZWRTcXIoKS5yZWRNdWwoeCkucmVkSUFkZCh4LnJlZE11bCh0aGlzLmEpKS5yZWRJQWRkKHRoaXMuYik7XG4gIHZhciB5ID0geTIucmVkU3FydCgpO1xuXG4gIC8vIFhYWCBJcyB0aGVyZSBhbnkgd2F5IHRvIHRlbGwgaWYgdGhlIG51bWJlciBpcyBvZGQgd2l0aG91dCBjb252ZXJ0aW5nIGl0XG4gIC8vIHRvIG5vbi1yZWQgZm9ybT9cbiAgdmFyIGlzT2RkID0geS5mcm9tUmVkKCkuaXNPZGQoKTtcbiAgaWYgKG9kZCAmJiAhaXNPZGQgfHwgIW9kZCAmJiBpc09kZClcbiAgICB5ID0geS5yZWROZWcoKTtcblxuICByZXR1cm4gdGhpcy5wb2ludCh4LCB5KTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUocG9pbnQpIHtcbiAgaWYgKHBvaW50LmluZilcbiAgICByZXR1cm4gdHJ1ZTtcblxuICB2YXIgeCA9IHBvaW50Lng7XG4gIHZhciB5ID0gcG9pbnQueTtcblxuICB2YXIgYXggPSB0aGlzLmEucmVkTXVsKHgpO1xuICB2YXIgcmhzID0geC5yZWRTcXIoKS5yZWRNdWwoeCkucmVkSUFkZChheCkucmVkSUFkZCh0aGlzLmIpO1xuICByZXR1cm4geS5yZWRTcXIoKS5yZWRJU3ViKHJocykuY21wbigwKSA9PT0gMDtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLl9lbmRvV25hZk11bEFkZCA9XG4gICAgZnVuY3Rpb24gX2VuZG9XbmFmTXVsQWRkKHBvaW50cywgY29lZmZzKSB7XG4gIHZhciBucG9pbnRzID0gdGhpcy5fZW5kb1duYWZUMTtcbiAgdmFyIG5jb2VmZnMgPSB0aGlzLl9lbmRvV25hZlQyO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzcGxpdCA9IHRoaXMuX2VuZG9TcGxpdChjb2VmZnNbaV0pO1xuICAgIHZhciBwID0gcG9pbnRzW2ldO1xuICAgIHZhciBiZXRhID0gcC5fZ2V0QmV0YSgpO1xuXG4gICAgaWYgKHNwbGl0LmsxLnNpZ24pIHtcbiAgICAgIHNwbGl0LmsxLnNpZ24gPSAhc3BsaXQuazEuc2lnbjtcbiAgICAgIHAgPSBwLm5lZyh0cnVlKTtcbiAgICB9XG4gICAgaWYgKHNwbGl0LmsyLnNpZ24pIHtcbiAgICAgIHNwbGl0LmsyLnNpZ24gPSAhc3BsaXQuazIuc2lnbjtcbiAgICAgIGJldGEgPSBiZXRhLm5lZyh0cnVlKTtcbiAgICB9XG5cbiAgICBucG9pbnRzW2kgKiAyXSA9IHA7XG4gICAgbnBvaW50c1tpICogMiArIDFdID0gYmV0YTtcbiAgICBuY29lZmZzW2kgKiAyXSA9IHNwbGl0LmsxO1xuICAgIG5jb2VmZnNbaSAqIDIgKyAxXSA9IHNwbGl0LmsyO1xuICB9XG4gIHZhciByZXMgPSB0aGlzLl93bmFmTXVsQWRkKDEsIG5wb2ludHMsIG5jb2VmZnMsIGkgKiAyKTtcblxuICAvLyBDbGVhbi11cCByZWZlcmVuY2VzIHRvIHBvaW50cyBhbmQgY29lZmZpY2llbnRzXG4gIGZvciAodmFyIGogPSAwOyBqIDwgaSAqIDI7IGorKykge1xuICAgIG5wb2ludHNbal0gPSBudWxsO1xuICAgIG5jb2VmZnNbal0gPSBudWxsO1xuICB9XG4gIHJldHVybiByZXM7XG59O1xuXG5mdW5jdGlvbiBQb2ludChjdXJ2ZSwgeCwgeSwgaXNSZWQpIHtcbiAgQmFzZS5CYXNlUG9pbnQuY2FsbCh0aGlzLCBjdXJ2ZSwgJ2FmZmluZScpO1xuICBpZiAoeCA9PT0gbnVsbCAmJiB5ID09PSBudWxsKSB7XG4gICAgdGhpcy54ID0gbnVsbDtcbiAgICB0aGlzLnkgPSBudWxsO1xuICAgIHRoaXMuaW5mID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnggPSBuZXcgYm4oeCwgMTYpO1xuICAgIHRoaXMueSA9IG5ldyBibih5LCAxNik7XG4gICAgLy8gRm9yY2UgcmVkZ29tZXJ5IHJlcHJlc2VudGF0aW9uIHdoZW4gbG9hZGluZyBmcm9tIEpTT05cbiAgICBpZiAoaXNSZWQpIHtcbiAgICAgIHRoaXMueC5mb3JjZVJlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgICB0aGlzLnkuZm9yY2VSZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMueC5yZWQpXG4gICAgICB0aGlzLnggPSB0aGlzLngudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIGlmICghdGhpcy55LnJlZClcbiAgICAgIHRoaXMueSA9IHRoaXMueS50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgdGhpcy5pbmYgPSBmYWxzZTtcbiAgfVxufVxuaW5oZXJpdHMoUG9pbnQsIEJhc2UuQmFzZVBvaW50KTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUucG9pbnQgPSBmdW5jdGlvbiBwb2ludCh4LCB5LCBpc1JlZCkge1xuICByZXR1cm4gbmV3IFBvaW50KHRoaXMsIHgsIHksIGlzUmVkKTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLnBvaW50RnJvbUpTT04gPSBmdW5jdGlvbiBwb2ludEZyb21KU09OKG9iaiwgcmVkKSB7XG4gIHJldHVybiBQb2ludC5mcm9tSlNPTih0aGlzLCBvYmosIHJlZCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuX2dldEJldGEgPSBmdW5jdGlvbiBfZ2V0QmV0YSgpIHtcbiAgaWYgKCF0aGlzLmN1cnZlLmVuZG8pXG4gICAgcmV0dXJuO1xuXG4gIHZhciBwcmUgPSB0aGlzLnByZWNvbXB1dGVkO1xuICBpZiAocHJlICYmIHByZS5iZXRhKVxuICAgIHJldHVybiBwcmUuYmV0YTtcblxuICB2YXIgYmV0YSA9IHRoaXMuY3VydmUucG9pbnQodGhpcy54LnJlZE11bCh0aGlzLmN1cnZlLmVuZG8uYmV0YSksIHRoaXMueSk7XG4gIGlmIChwcmUpIHtcbiAgICB2YXIgY3VydmUgPSB0aGlzLmN1cnZlO1xuICAgIHZhciBlbmRvTXVsID0gZnVuY3Rpb24ocCkge1xuICAgICAgcmV0dXJuIGN1cnZlLnBvaW50KHAueC5yZWRNdWwoY3VydmUuZW5kby5iZXRhKSwgcC55KTtcbiAgICB9O1xuICAgIHByZS5iZXRhID0gYmV0YTtcbiAgICBiZXRhLnByZWNvbXB1dGVkID0ge1xuICAgICAgYmV0YTogbnVsbCxcbiAgICAgIG5hZjogcHJlLm5hZiAmJiB7XG4gICAgICAgIHduZDogcHJlLm5hZi53bmQsXG4gICAgICAgIHBvaW50czogcHJlLm5hZi5wb2ludHMubWFwKGVuZG9NdWwpXG4gICAgICB9LFxuICAgICAgZG91YmxlczogcHJlLmRvdWJsZXMgJiYge1xuICAgICAgICBzdGVwOiBwcmUuZG91Ymxlcy5zdGVwLFxuICAgICAgICBwb2ludHM6IHByZS5kb3VibGVzLnBvaW50cy5tYXAoZW5kb011bClcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHJldHVybiBiZXRhO1xufTtcblxuUG9pbnQucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgaWYgKCF0aGlzLnByZWNvbXB1dGVkKVxuICAgIHJldHVybiBbIHRoaXMueCwgdGhpcy55IF07XG5cbiAgcmV0dXJuIFsgdGhpcy54LCB0aGlzLnksIHRoaXMucHJlY29tcHV0ZWQgJiYge1xuICAgIGRvdWJsZXM6IHRoaXMucHJlY29tcHV0ZWQuZG91YmxlcyAmJiB7XG4gICAgICBzdGVwOiB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXMuc3RlcCxcbiAgICAgIHBvaW50czogdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzLnBvaW50cy5zbGljZSgxKVxuICAgIH0sXG4gICAgbmFmOiB0aGlzLnByZWNvbXB1dGVkLm5hZiAmJiB7XG4gICAgICB3bmQ6IHRoaXMucHJlY29tcHV0ZWQubmFmLnduZCxcbiAgICAgIHBvaW50czogdGhpcy5wcmVjb21wdXRlZC5uYWYucG9pbnRzLnNsaWNlKDEpXG4gICAgfVxuICB9IF07XG59O1xuXG5Qb2ludC5mcm9tSlNPTiA9IGZ1bmN0aW9uIGZyb21KU09OKGN1cnZlLCBvYmosIHJlZCkge1xuICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpXG4gICAgb2JqID0gSlNPTi5wYXJzZShvYmopO1xuICB2YXIgcmVzID0gY3VydmUucG9pbnQob2JqWzBdLCBvYmpbMV0sIHJlZCk7XG4gIGlmICghb2JqWzJdKVxuICAgIHJldHVybiByZXM7XG5cbiAgZnVuY3Rpb24gb2JqMnBvaW50KG9iaikge1xuICAgIHJldHVybiBjdXJ2ZS5wb2ludChvYmpbMF0sIG9ialsxXSwgcmVkKTtcbiAgfVxuXG4gIHZhciBwcmUgPSBvYmpbMl07XG4gIHJlcy5wcmVjb21wdXRlZCA9IHtcbiAgICBiZXRhOiBudWxsLFxuICAgIGRvdWJsZXM6IHByZS5kb3VibGVzICYmIHtcbiAgICAgIHN0ZXA6IHByZS5kb3VibGVzLnN0ZXAsXG4gICAgICBwb2ludHM6IFsgcmVzIF0uY29uY2F0KHByZS5kb3VibGVzLnBvaW50cy5tYXAob2JqMnBvaW50KSlcbiAgICB9LFxuICAgIG5hZjogcHJlLm5hZiAmJiB7XG4gICAgICB3bmQ6IHByZS5uYWYud25kLFxuICAgICAgcG9pbnRzOiBbIHJlcyBdLmNvbmNhdChwcmUubmFmLnBvaW50cy5tYXAob2JqMnBvaW50KSlcbiAgICB9XG4gIH07XG4gIHJldHVybiByZXM7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gJzxFQyBQb2ludCBJbmZpbml0eT4nO1xuICByZXR1cm4gJzxFQyBQb2ludCB4OiAnICsgdGhpcy54LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgK1xuICAgICAgJyB5OiAnICsgdGhpcy55LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgKyAnPic7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaXNJbmZpbml0eSA9IGZ1bmN0aW9uIGlzSW5maW5pdHkoKSB7XG4gIHJldHVybiB0aGlzLmluZjtcbn07XG5cblBvaW50LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQocCkge1xuICAvLyBPICsgUCA9IFBcbiAgaWYgKHRoaXMuaW5mKVxuICAgIHJldHVybiBwO1xuXG4gIC8vIFAgKyBPID0gUFxuICBpZiAocC5pbmYpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gUCArIFAgPSAyUFxuICBpZiAodGhpcy5lcShwKSlcbiAgICByZXR1cm4gdGhpcy5kYmwoKTtcblxuICAvLyBQICsgKC1QKSA9IE9cbiAgaWYgKHRoaXMubmVnKCkuZXEocCkpXG4gICAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCwgbnVsbCk7XG5cbiAgLy8gUCArIFEgPSBPXG4gIGlmICh0aGlzLnguY21wKHAueCkgPT09IDApXG4gICAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCwgbnVsbCk7XG5cbiAgdmFyIGMgPSB0aGlzLnkucmVkU3ViKHAueSk7XG4gIGlmIChjLmNtcG4oMCkgIT09IDApXG4gICAgYyA9IGMucmVkTXVsKHRoaXMueC5yZWRTdWIocC54KS5yZWRJbnZtKCkpO1xuICB2YXIgbnggPSBjLnJlZFNxcigpLnJlZElTdWIodGhpcy54KS5yZWRJU3ViKHAueCk7XG4gIHZhciBueSA9IGMucmVkTXVsKHRoaXMueC5yZWRTdWIobngpKS5yZWRJU3ViKHRoaXMueSk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZGJsID0gZnVuY3Rpb24gZGJsKCkge1xuICBpZiAodGhpcy5pbmYpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gMlAgPSBPXG4gIHZhciB5czEgPSB0aGlzLnkucmVkQWRkKHRoaXMueSk7XG4gIGlmICh5czEuY21wbigwKSA9PT0gMClcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChudWxsLCBudWxsKTtcblxuICB2YXIgYSA9IHRoaXMuY3VydmUuYTtcblxuICB2YXIgeDIgPSB0aGlzLngucmVkU3FyKCk7XG4gIHZhciBkeWludiA9IHlzMS5yZWRJbnZtKCk7XG4gIHZhciBjID0geDIucmVkQWRkKHgyKS5yZWRJQWRkKHgyKS5yZWRJQWRkKGEpLnJlZE11bChkeWludik7XG5cbiAgdmFyIG54ID0gYy5yZWRTcXIoKS5yZWRJU3ViKHRoaXMueC5yZWRBZGQodGhpcy54KSk7XG4gIHZhciBueSA9IGMucmVkTXVsKHRoaXMueC5yZWRTdWIobngpKS5yZWRJU3ViKHRoaXMueSk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZ2V0WCA9IGZ1bmN0aW9uIGdldFgoKSB7XG4gIHJldHVybiB0aGlzLnguZnJvbVJlZCgpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmdldFkgPSBmdW5jdGlvbiBnZXRZKCkge1xuICByZXR1cm4gdGhpcy55LmZyb21SZWQoKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwoaykge1xuICBrID0gbmV3IGJuKGssIDE2KTtcblxuICBpZiAodGhpcy5faGFzRG91YmxlcyhrKSlcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fZml4ZWROYWZNdWwodGhpcywgayk7XG4gIGVsc2UgaWYgKHRoaXMuY3VydmUuZW5kbylcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fZW5kb1duYWZNdWxBZGQoWyB0aGlzIF0sIFsgayBdKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsKHRoaXMsIGspO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bEFkZCA9IGZ1bmN0aW9uIG11bEFkZChrMSwgcDIsIGsyKSB7XG4gIHZhciBwb2ludHMgPSBbIHRoaXMsIHAyIF07XG4gIHZhciBjb2VmZnMgPSBbIGsxLCBrMiBdO1xuICBpZiAodGhpcy5jdXJ2ZS5lbmRvKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl9lbmRvV25hZk11bEFkZChwb2ludHMsIGNvZWZmcyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bEFkZCgxLCBwb2ludHMsIGNvZWZmcywgMik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcShwKSB7XG4gIHJldHVybiB0aGlzID09PSBwIHx8XG4gICAgICAgICB0aGlzLmluZiA9PT0gcC5pbmYgJiZcbiAgICAgICAgICAgICAodGhpcy5pbmYgfHwgdGhpcy54LmNtcChwLngpID09PSAwICYmIHRoaXMueS5jbXAocC55KSA9PT0gMCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnKF9wcmVjb21wdXRlKSB7XG4gIGlmICh0aGlzLmluZilcbiAgICByZXR1cm4gdGhpcztcblxuICB2YXIgcmVzID0gdGhpcy5jdXJ2ZS5wb2ludCh0aGlzLngsIHRoaXMueS5yZWROZWcoKSk7XG4gIGlmIChfcHJlY29tcHV0ZSAmJiB0aGlzLnByZWNvbXB1dGVkKSB7XG4gICAgdmFyIHByZSA9IHRoaXMucHJlY29tcHV0ZWQ7XG4gICAgdmFyIG5lZ2F0ZSA9IGZ1bmN0aW9uKHApIHtcbiAgICAgIHJldHVybiBwLm5lZygpO1xuICAgIH07XG4gICAgcmVzLnByZWNvbXB1dGVkID0ge1xuICAgICAgbmFmOiBwcmUubmFmICYmIHtcbiAgICAgICAgd25kOiBwcmUubmFmLnduZCxcbiAgICAgICAgcG9pbnRzOiBwcmUubmFmLnBvaW50cy5tYXAobmVnYXRlKVxuICAgICAgfSxcbiAgICAgIGRvdWJsZXM6IHByZS5kb3VibGVzICYmIHtcbiAgICAgICAgc3RlcDogcHJlLmRvdWJsZXMuc3RlcCxcbiAgICAgICAgcG9pbnRzOiBwcmUuZG91Ymxlcy5wb2ludHMubWFwKG5lZ2F0ZSlcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHJldHVybiByZXM7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUudG9KID0gZnVuY3Rpb24gdG9KKCkge1xuICBpZiAodGhpcy5pbmYpXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuXG4gIHZhciByZXMgPSB0aGlzLmN1cnZlLmpwb2ludCh0aGlzLngsIHRoaXMueSwgdGhpcy5jdXJ2ZS5vbmUpO1xuICByZXR1cm4gcmVzO1xufTtcblxuZnVuY3Rpb24gSlBvaW50KGN1cnZlLCB4LCB5LCB6KSB7XG4gIEJhc2UuQmFzZVBvaW50LmNhbGwodGhpcywgY3VydmUsICdqYWNvYmlhbicpO1xuICBpZiAoeCA9PT0gbnVsbCAmJiB5ID09PSBudWxsICYmIHogPT09IG51bGwpIHtcbiAgICB0aGlzLnggPSB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnkgPSB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnogPSBuZXcgYm4oMCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54ID0gbmV3IGJuKHgsIDE2KTtcbiAgICB0aGlzLnkgPSBuZXcgYm4oeSwgMTYpO1xuICAgIHRoaXMueiA9IG5ldyBibih6LCAxNik7XG4gIH1cbiAgaWYgKCF0aGlzLngucmVkKVxuICAgIHRoaXMueCA9IHRoaXMueC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gIGlmICghdGhpcy55LnJlZClcbiAgICB0aGlzLnkgPSB0aGlzLnkudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICBpZiAoIXRoaXMuei5yZWQpXG4gICAgdGhpcy56ID0gdGhpcy56LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcblxuICB0aGlzLnpPbmUgPSB0aGlzLnogPT09IHRoaXMuY3VydmUub25lO1xufVxuaW5oZXJpdHMoSlBvaW50LCBCYXNlLkJhc2VQb2ludCk7XG5cblNob3J0Q3VydmUucHJvdG90eXBlLmpwb2ludCA9IGZ1bmN0aW9uIGpwb2ludCh4LCB5LCB6KSB7XG4gIHJldHVybiBuZXcgSlBvaW50KHRoaXMsIHgsIHksIHopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS50b1AgPSBmdW5jdGlvbiB0b1AoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChudWxsLCBudWxsKTtcblxuICB2YXIgemludiA9IHRoaXMuei5yZWRJbnZtKCk7XG4gIHZhciB6aW52MiA9IHppbnYucmVkU3FyKCk7XG4gIHZhciBheCA9IHRoaXMueC5yZWRNdWwoemludjIpO1xuICB2YXIgYXkgPSB0aGlzLnkucmVkTXVsKHppbnYyKS5yZWRNdWwoemludik7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQoYXgsIGF5KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnKCkge1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQodGhpcy54LCB0aGlzLnkucmVkTmVnKCksIHRoaXMueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZChwKSB7XG4gIC8vIE8gKyBQID0gUFxuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHA7XG5cbiAgLy8gUCArIE8gPSBQXG4gIGlmIChwLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyAxMk0gKyA0UyArIDdBXG4gIHZhciBwejIgPSBwLnoucmVkU3FyKCk7XG4gIHZhciB6MiA9IHRoaXMuei5yZWRTcXIoKTtcbiAgdmFyIHUxID0gdGhpcy54LnJlZE11bChwejIpO1xuICB2YXIgdTIgPSBwLngucmVkTXVsKHoyKTtcbiAgdmFyIHMxID0gdGhpcy55LnJlZE11bChwejIucmVkTXVsKHAueikpO1xuICB2YXIgczIgPSBwLnkucmVkTXVsKHoyLnJlZE11bCh0aGlzLnopKTtcblxuICB2YXIgaCA9IHUxLnJlZFN1Yih1Mik7XG4gIHZhciByID0gczEucmVkU3ViKHMyKTtcbiAgaWYgKGguY21wbigwKSA9PT0gMCkge1xuICAgIGlmIChyLmNtcG4oMCkgIT09IDApXG4gICAgICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIHRoaXMuZGJsKCk7XG4gIH1cblxuICB2YXIgaDIgPSBoLnJlZFNxcigpO1xuICB2YXIgaDMgPSBoMi5yZWRNdWwoaCk7XG4gIHZhciB2ID0gdTEucmVkTXVsKGgyKTtcblxuICB2YXIgbnggPSByLnJlZFNxcigpLnJlZElBZGQoaDMpLnJlZElTdWIodikucmVkSVN1Yih2KTtcbiAgdmFyIG55ID0gci5yZWRNdWwodi5yZWRJU3ViKG54KSkucmVkSVN1YihzMS5yZWRNdWwoaDMpKTtcbiAgdmFyIG56ID0gdGhpcy56LnJlZE11bChwLnopLnJlZE11bChoKTtcblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLm1peGVkQWRkID0gZnVuY3Rpb24gbWl4ZWRBZGQocCkge1xuICAvLyBPICsgUCA9IFBcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiBwLnRvSigpO1xuXG4gIC8vIFAgKyBPID0gUFxuICBpZiAocC5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gOE0gKyAzUyArIDdBXG4gIHZhciB6MiA9IHRoaXMuei5yZWRTcXIoKTtcbiAgdmFyIHUxID0gdGhpcy54O1xuICB2YXIgdTIgPSBwLngucmVkTXVsKHoyKTtcbiAgdmFyIHMxID0gdGhpcy55O1xuICB2YXIgczIgPSBwLnkucmVkTXVsKHoyKS5yZWRNdWwodGhpcy56KTtcblxuICB2YXIgaCA9IHUxLnJlZFN1Yih1Mik7XG4gIHZhciByID0gczEucmVkU3ViKHMyKTtcbiAgaWYgKGguY21wbigwKSA9PT0gMCkge1xuICAgIGlmIChyLmNtcG4oMCkgIT09IDApXG4gICAgICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIHRoaXMuZGJsKCk7XG4gIH1cblxuICB2YXIgaDIgPSBoLnJlZFNxcigpO1xuICB2YXIgaDMgPSBoMi5yZWRNdWwoaCk7XG4gIHZhciB2ID0gdTEucmVkTXVsKGgyKTtcblxuICB2YXIgbnggPSByLnJlZFNxcigpLnJlZElBZGQoaDMpLnJlZElTdWIodikucmVkSVN1Yih2KTtcbiAgdmFyIG55ID0gci5yZWRNdWwodi5yZWRJU3ViKG54KSkucmVkSVN1YihzMS5yZWRNdWwoaDMpKTtcbiAgdmFyIG56ID0gdGhpcy56LnJlZE11bChoKTtcblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmRibHAgPSBmdW5jdGlvbiBkYmxwKHBvdykge1xuICBpZiAocG93ID09PSAwKVxuICAgIHJldHVybiB0aGlzO1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG4gIGlmICghcG93KVxuICAgIHJldHVybiB0aGlzLmRibCgpO1xuXG4gIGlmICh0aGlzLmN1cnZlLnplcm9BIHx8IHRoaXMuY3VydmUudGhyZWVBKSB7XG4gICAgdmFyIHIgPSB0aGlzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG93OyBpKyspXG4gICAgICByID0gci5kYmwoKTtcbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIC8vIDFNICsgMlMgKyAxQSArIE4gKiAoNFMgKyA1TSArIDhBKVxuICAvLyBOID0gMSA9PiA2TSArIDZTICsgOUFcbiAgdmFyIGEgPSB0aGlzLmN1cnZlLmE7XG4gIHZhciB0aW52ID0gdGhpcy5jdXJ2ZS50aW52O1xuXG4gIHZhciBqeCA9IHRoaXMueDtcbiAgdmFyIGp5ID0gdGhpcy55O1xuICB2YXIganogPSB0aGlzLno7XG4gIHZhciBqejQgPSBqei5yZWRTcXIoKS5yZWRTcXIoKTtcblxuICAvLyBSZXVzZSByZXN1bHRzXG4gIHZhciBqeWQgPSBqeS5yZWRBZGQoankpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvdzsgaSsrKSB7XG4gICAgdmFyIGp4MiA9IGp4LnJlZFNxcigpO1xuICAgIHZhciBqeWQyID0ganlkLnJlZFNxcigpO1xuICAgIHZhciBqeWQ0ID0ganlkMi5yZWRTcXIoKTtcbiAgICB2YXIgYyA9IGp4Mi5yZWRBZGQoangyKS5yZWRJQWRkKGp4MikucmVkSUFkZChhLnJlZE11bChqejQpKTtcblxuICAgIHZhciB0MSA9IGp4LnJlZE11bChqeWQyKTtcbiAgICB2YXIgbnggPSBjLnJlZFNxcigpLnJlZElTdWIodDEucmVkQWRkKHQxKSk7XG4gICAgdmFyIHQyID0gdDEucmVkSVN1YihueCk7XG4gICAgdmFyIGRueSA9IGMucmVkTXVsKHQyKTtcbiAgICBkbnkgPSBkbnkucmVkSUFkZChkbnkpLnJlZElTdWIoanlkNCk7XG4gICAgdmFyIG56ID0ganlkLnJlZE11bChqeik7XG4gICAgaWYgKGkgKyAxIDwgcG93KVxuICAgICAgano0ID0gano0LnJlZE11bChqeWQ0KTtcblxuICAgIGp4ID0gbng7XG4gICAganogPSBuejtcbiAgICBqeWQgPSBkbnk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQoangsIGp5ZC5yZWRNdWwodGludiksIGp6KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuZGJsID0gZnVuY3Rpb24gZGJsKCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgaWYgKHRoaXMuY3VydmUuemVyb0EpXG4gICAgcmV0dXJuIHRoaXMuX3plcm9EYmwoKTtcbiAgZWxzZSBpZiAodGhpcy5jdXJ2ZS50aHJlZUEpXG4gICAgcmV0dXJuIHRoaXMuX3RocmVlRGJsKCk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5fZGJsKCk7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLl96ZXJvRGJsID0gZnVuY3Rpb24gX3plcm9EYmwoKSB7XG4gIHZhciBueDtcbiAgdmFyIG55O1xuICB2YXIgbno7XG4gIC8vIFogPSAxXG4gIGlmICh0aGlzLnpPbmUpIHtcbiAgICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tc2hvcnR3LWphY29iaWFuLTAuaHRtbFxuICAgIC8vICAgICAjZG91YmxpbmctbWRibC0yMDA3LWJsXG4gICAgLy8gMU0gKyA1UyArIDE0QVxuXG4gICAgLy8gWFggPSBYMV4yXG4gICAgdmFyIHh4ID0gdGhpcy54LnJlZFNxcigpO1xuICAgIC8vIFlZID0gWTFeMlxuICAgIHZhciB5eSA9IHRoaXMueS5yZWRTcXIoKTtcbiAgICAvLyBZWVlZID0gWVleMlxuICAgIHZhciB5eXl5ID0geXkucmVkU3FyKCk7XG4gICAgLy8gUyA9IDIgKiAoKFgxICsgWVkpXjIgLSBYWCAtIFlZWVkpXG4gICAgdmFyIHMgPSB0aGlzLngucmVkQWRkKHl5KS5yZWRTcXIoKS5yZWRJU3ViKHh4KS5yZWRJU3ViKHl5eXkpO1xuICAgIHMgPSBzLnJlZElBZGQocyk7XG4gICAgLy8gTSA9IDMgKiBYWCArIGE7IGEgPSAwXG4gICAgdmFyIG0gPSB4eC5yZWRBZGQoeHgpLnJlZElBZGQoeHgpO1xuICAgIC8vIFQgPSBNIF4gMiAtIDIqU1xuICAgIHZhciB0ID0gbS5yZWRTcXIoKS5yZWRJU3ViKHMpLnJlZElTdWIocyk7XG5cbiAgICAvLyA4ICogWVlZWVxuICAgIHZhciB5eXl5OCA9IHl5eXkucmVkSUFkZCh5eXl5KTtcbiAgICB5eXl5OCA9IHl5eXk4LnJlZElBZGQoeXl5eTgpO1xuICAgIHl5eXk4ID0geXl5eTgucmVkSUFkZCh5eXl5OCk7XG5cbiAgICAvLyBYMyA9IFRcbiAgICBueCA9IHQ7XG4gICAgLy8gWTMgPSBNICogKFMgLSBUKSAtIDggKiBZWVlZXG4gICAgbnkgPSBtLnJlZE11bChzLnJlZElTdWIodCkpLnJlZElTdWIoeXl5eTgpO1xuICAgIC8vIFozID0gMipZMVxuICAgIG56ID0gdGhpcy55LnJlZEFkZCh0aGlzLnkpO1xuICB9IGVsc2Uge1xuICAgIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1zaG9ydHctamFjb2JpYW4tMC5odG1sXG4gICAgLy8gICAgICNkb3VibGluZy1kYmwtMjAwOS1sXG4gICAgLy8gMk0gKyA1UyArIDEzQVxuXG4gICAgLy8gQSA9IFgxXjJcbiAgICB2YXIgYSA9IHRoaXMueC5yZWRTcXIoKTtcbiAgICAvLyBCID0gWTFeMlxuICAgIHZhciBiID0gdGhpcy55LnJlZFNxcigpO1xuICAgIC8vIEMgPSBCXjJcbiAgICB2YXIgYyA9IGIucmVkU3FyKCk7XG4gICAgLy8gRCA9IDIgKiAoKFgxICsgQileMiAtIEEgLSBDKVxuICAgIHZhciBkID0gdGhpcy54LnJlZEFkZChiKS5yZWRTcXIoKS5yZWRJU3ViKGEpLnJlZElTdWIoYyk7XG4gICAgZCA9IGQucmVkSUFkZChkKTtcbiAgICAvLyBFID0gMyAqIEFcbiAgICB2YXIgZSA9IGEucmVkQWRkKGEpLnJlZElBZGQoYSk7XG4gICAgLy8gRiA9IEVeMlxuICAgIHZhciBmID0gZS5yZWRTcXIoKTtcblxuICAgIC8vIDggKiBDXG4gICAgdmFyIGM4ID0gYy5yZWRJQWRkKGMpO1xuICAgIGM4ID0gYzgucmVkSUFkZChjOCk7XG4gICAgYzggPSBjOC5yZWRJQWRkKGM4KTtcblxuICAgIC8vIFgzID0gRiAtIDIgKiBEXG4gICAgbnggPSBmLnJlZElTdWIoZCkucmVkSVN1YihkKTtcbiAgICAvLyBZMyA9IEUgKiAoRCAtIFgzKSAtIDggKiBDXG4gICAgbnkgPSBlLnJlZE11bChkLnJlZElTdWIobngpKS5yZWRJU3ViKGM4KTtcbiAgICAvLyBaMyA9IDIgKiBZMSAqIFoxXG4gICAgbnogPSB0aGlzLnkucmVkTXVsKHRoaXMueik7XG4gICAgbnogPSBuei5yZWRJQWRkKG56KTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuX3RocmVlRGJsID0gZnVuY3Rpb24gX3RocmVlRGJsKCkge1xuICB2YXIgbng7XG4gIHZhciBueTtcbiAgdmFyIG56O1xuICAvLyBaID0gMVxuICBpZiAodGhpcy56T25lKSB7XG4gICAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXNob3J0dy1qYWNvYmlhbi0zLmh0bWxcbiAgICAvLyAgICAgI2RvdWJsaW5nLW1kYmwtMjAwNy1ibFxuICAgIC8vIDFNICsgNVMgKyAxNUFcblxuICAgIC8vIFhYID0gWDFeMlxuICAgIHZhciB4eCA9IHRoaXMueC5yZWRTcXIoKTtcbiAgICAvLyBZWSA9IFkxXjJcbiAgICB2YXIgeXkgPSB0aGlzLnkucmVkU3FyKCk7XG4gICAgLy8gWVlZWSA9IFlZXjJcbiAgICB2YXIgeXl5eSA9IHl5LnJlZFNxcigpO1xuICAgIC8vIFMgPSAyICogKChYMSArIFlZKV4yIC0gWFggLSBZWVlZKVxuICAgIHZhciBzID0gdGhpcy54LnJlZEFkZCh5eSkucmVkU3FyKCkucmVkSVN1Yih4eCkucmVkSVN1Yih5eXl5KTtcbiAgICBzID0gcy5yZWRJQWRkKHMpO1xuICAgIC8vIE0gPSAzICogWFggKyBhXG4gICAgdmFyIG0gPSB4eC5yZWRBZGQoeHgpLnJlZElBZGQoeHgpLnJlZElBZGQodGhpcy5jdXJ2ZS5hKTtcbiAgICAvLyBUID0gTV4yIC0gMiAqIFNcbiAgICB2YXIgdCA9IG0ucmVkU3FyKCkucmVkSVN1YihzKS5yZWRJU3ViKHMpO1xuICAgIC8vIFgzID0gVFxuICAgIG54ID0gdDtcbiAgICAvLyBZMyA9IE0gKiAoUyAtIFQpIC0gOCAqIFlZWVlcbiAgICB2YXIgeXl5eTggPSB5eXl5LnJlZElBZGQoeXl5eSk7XG4gICAgeXl5eTggPSB5eXl5OC5yZWRJQWRkKHl5eXk4KTtcbiAgICB5eXl5OCA9IHl5eXk4LnJlZElBZGQoeXl5eTgpO1xuICAgIG55ID0gbS5yZWRNdWwocy5yZWRJU3ViKHQpKS5yZWRJU3ViKHl5eXk4KTtcbiAgICAvLyBaMyA9IDIgKiBZMVxuICAgIG56ID0gdGhpcy55LnJlZEFkZCh0aGlzLnkpO1xuICB9IGVsc2Uge1xuICAgIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1zaG9ydHctamFjb2JpYW4tMy5odG1sI2RvdWJsaW5nLWRibC0yMDAxLWJcbiAgICAvLyAzTSArIDVTXG5cbiAgICAvLyBkZWx0YSA9IFoxXjJcbiAgICB2YXIgZGVsdGEgPSB0aGlzLnoucmVkU3FyKCk7XG4gICAgLy8gZ2FtbWEgPSBZMV4yXG4gICAgdmFyIGdhbW1hID0gdGhpcy55LnJlZFNxcigpO1xuICAgIC8vIGJldGEgPSBYMSAqIGdhbW1hXG4gICAgdmFyIGJldGEgPSB0aGlzLngucmVkTXVsKGdhbW1hKTtcbiAgICAvLyBhbHBoYSA9IDMgKiAoWDEgLSBkZWx0YSkgKiAoWDEgKyBkZWx0YSlcbiAgICB2YXIgYWxwaGEgPSB0aGlzLngucmVkU3ViKGRlbHRhKS5yZWRNdWwodGhpcy54LnJlZEFkZChkZWx0YSkpO1xuICAgIGFscGhhID0gYWxwaGEucmVkQWRkKGFscGhhKS5yZWRJQWRkKGFscGhhKTtcbiAgICAvLyBYMyA9IGFscGhhXjIgLSA4ICogYmV0YVxuICAgIHZhciBiZXRhNCA9IGJldGEucmVkSUFkZChiZXRhKTtcbiAgICBiZXRhNCA9IGJldGE0LnJlZElBZGQoYmV0YTQpO1xuICAgIHZhciBiZXRhOCA9IGJldGE0LnJlZEFkZChiZXRhNCk7XG4gICAgbnggPSBhbHBoYS5yZWRTcXIoKS5yZWRJU3ViKGJldGE4KTtcbiAgICAvLyBaMyA9IChZMSArIFoxKV4yIC0gZ2FtbWEgLSBkZWx0YVxuICAgIG56ID0gdGhpcy55LnJlZEFkZCh0aGlzLnopLnJlZFNxcigpLnJlZElTdWIoZ2FtbWEpLnJlZElTdWIoZGVsdGEpO1xuICAgIC8vIFkzID0gYWxwaGEgKiAoNCAqIGJldGEgLSBYMykgLSA4ICogZ2FtbWFeMlxuICAgIHZhciBnZ2FtbWE4ID0gZ2FtbWEucmVkU3FyKCk7XG4gICAgZ2dhbW1hOCA9IGdnYW1tYTgucmVkSUFkZChnZ2FtbWE4KTtcbiAgICBnZ2FtbWE4ID0gZ2dhbW1hOC5yZWRJQWRkKGdnYW1tYTgpO1xuICAgIGdnYW1tYTggPSBnZ2FtbWE4LnJlZElBZGQoZ2dhbW1hOCk7XG4gICAgbnkgPSBhbHBoYS5yZWRNdWwoYmV0YTQucmVkSVN1YihueCkpLnJlZElTdWIoZ2dhbW1hOCk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLl9kYmwgPSBmdW5jdGlvbiBfZGJsKCkge1xuICB2YXIgYSA9IHRoaXMuY3VydmUuYTtcblxuICAvLyA0TSArIDZTICsgMTBBXG4gIHZhciBqeCA9IHRoaXMueDtcbiAgdmFyIGp5ID0gdGhpcy55O1xuICB2YXIganogPSB0aGlzLno7XG4gIHZhciBqejQgPSBqei5yZWRTcXIoKS5yZWRTcXIoKTtcblxuICB2YXIgangyID0gangucmVkU3FyKCk7XG4gIHZhciBqeTIgPSBqeS5yZWRTcXIoKTtcblxuICB2YXIgYyA9IGp4Mi5yZWRBZGQoangyKS5yZWRJQWRkKGp4MikucmVkSUFkZChhLnJlZE11bChqejQpKTtcblxuICB2YXIganhkNCA9IGp4LnJlZEFkZChqeCk7XG4gIGp4ZDQgPSBqeGQ0LnJlZElBZGQoanhkNCk7XG4gIHZhciB0MSA9IGp4ZDQucmVkTXVsKGp5Mik7XG4gIHZhciBueCA9IGMucmVkU3FyKCkucmVkSVN1Yih0MS5yZWRBZGQodDEpKTtcbiAgdmFyIHQyID0gdDEucmVkSVN1YihueCk7XG5cbiAgdmFyIGp5ZDggPSBqeTIucmVkU3FyKCk7XG4gIGp5ZDggPSBqeWQ4LnJlZElBZGQoanlkOCk7XG4gIGp5ZDggPSBqeWQ4LnJlZElBZGQoanlkOCk7XG4gIGp5ZDggPSBqeWQ4LnJlZElBZGQoanlkOCk7XG4gIHZhciBueSA9IGMucmVkTXVsKHQyKS5yZWRJU3ViKGp5ZDgpO1xuICB2YXIgbnogPSBqeS5yZWRBZGQoankpLnJlZE11bChqeik7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LCBueSwgbnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS50cnBsID0gZnVuY3Rpb24gdHJwbCgpIHtcbiAgaWYgKCF0aGlzLmN1cnZlLnplcm9BKVxuICAgIHJldHVybiB0aGlzLmRibCgpLmFkZCh0aGlzKTtcblxuICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tc2hvcnR3LWphY29iaWFuLTAuaHRtbCN0cmlwbGluZy10cGwtMjAwNy1ibFxuICAvLyA1TSArIDEwUyArIC4uLlxuXG4gIC8vIFhYID0gWDFeMlxuICB2YXIgeHggPSB0aGlzLngucmVkU3FyKCk7XG4gIC8vIFlZID0gWTFeMlxuICB2YXIgeXkgPSB0aGlzLnkucmVkU3FyKCk7XG4gIC8vIFpaID0gWjFeMlxuICB2YXIgenogPSB0aGlzLnoucmVkU3FyKCk7XG4gIC8vIFlZWVkgPSBZWV4yXG4gIHZhciB5eXl5ID0geXkucmVkU3FyKCk7XG4gIC8vIE0gPSAzICogWFggKyBhICogWloyOyBhID0gMFxuICB2YXIgbSA9IHh4LnJlZEFkZCh4eCkucmVkSUFkZCh4eCk7XG4gIC8vIE1NID0gTV4yXG4gIHZhciBtbSA9IG0ucmVkU3FyKCk7XG4gIC8vIEUgPSA2ICogKChYMSArIFlZKV4yIC0gWFggLSBZWVlZKSAtIE1NXG4gIHZhciBlID0gdGhpcy54LnJlZEFkZCh5eSkucmVkU3FyKCkucmVkSVN1Yih4eCkucmVkSVN1Yih5eXl5KTtcbiAgZSA9IGUucmVkSUFkZChlKTtcbiAgZSA9IGUucmVkQWRkKGUpLnJlZElBZGQoZSk7XG4gIGUgPSBlLnJlZElTdWIobW0pO1xuICAvLyBFRSA9IEVeMlxuICB2YXIgZWUgPSBlLnJlZFNxcigpO1xuICAvLyBUID0gMTYqWVlZWVxuICB2YXIgdCA9IHl5eXkucmVkSUFkZCh5eXl5KTtcbiAgdCA9IHQucmVkSUFkZCh0KTtcbiAgdCA9IHQucmVkSUFkZCh0KTtcbiAgdCA9IHQucmVkSUFkZCh0KTtcbiAgLy8gVSA9IChNICsgRSleMiAtIE1NIC0gRUUgLSBUXG4gIHZhciB1ID0gbS5yZWRJQWRkKGUpLnJlZFNxcigpLnJlZElTdWIobW0pLnJlZElTdWIoZWUpLnJlZElTdWIodCk7XG4gIC8vIFgzID0gNCAqIChYMSAqIEVFIC0gNCAqIFlZICogVSlcbiAgdmFyIHl5dTQgPSB5eS5yZWRNdWwodSk7XG4gIHl5dTQgPSB5eXU0LnJlZElBZGQoeXl1NCk7XG4gIHl5dTQgPSB5eXU0LnJlZElBZGQoeXl1NCk7XG4gIHZhciBueCA9IHRoaXMueC5yZWRNdWwoZWUpLnJlZElTdWIoeXl1NCk7XG4gIG54ID0gbngucmVkSUFkZChueCk7XG4gIG54ID0gbngucmVkSUFkZChueCk7XG4gIC8vIFkzID0gOCAqIFkxICogKFUgKiAoVCAtIFUpIC0gRSAqIEVFKVxuICB2YXIgbnkgPSB0aGlzLnkucmVkTXVsKHUucmVkTXVsKHQucmVkSVN1Yih1KSkucmVkSVN1YihlLnJlZE11bChlZSkpKTtcbiAgbnkgPSBueS5yZWRJQWRkKG55KTtcbiAgbnkgPSBueS5yZWRJQWRkKG55KTtcbiAgbnkgPSBueS5yZWRJQWRkKG55KTtcbiAgLy8gWjMgPSAoWjEgKyBFKV4yIC0gWlogLSBFRVxuICB2YXIgbnogPSB0aGlzLnoucmVkQWRkKGUpLnJlZFNxcigpLnJlZElTdWIoenopLnJlZElTdWIoZWUpO1xuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKGssIGtiYXNlKSB7XG4gIGsgPSBuZXcgYm4oaywga2Jhc2UpO1xuXG4gIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsKHRoaXMsIGspO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxKHApIHtcbiAgaWYgKHAudHlwZSA9PT0gJ2FmZmluZScpXG4gICAgcmV0dXJuIHRoaXMuZXEocC50b0ooKSk7XG5cbiAgaWYgKHRoaXMgPT09IHApXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgLy8geDEgKiB6Ml4yID09IHgyICogejFeMlxuICB2YXIgejIgPSB0aGlzLnoucmVkU3FyKCk7XG4gIHZhciBwejIgPSBwLnoucmVkU3FyKCk7XG4gIGlmICh0aGlzLngucmVkTXVsKHB6MikucmVkSVN1YihwLngucmVkTXVsKHoyKSkuY21wbigwKSAhPT0gMClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8geTEgKiB6Ml4zID09IHkyICogejFeM1xuICB2YXIgejMgPSB6Mi5yZWRNdWwodGhpcy56KTtcbiAgdmFyIHB6MyA9IHB6Mi5yZWRNdWwocC56KTtcbiAgcmV0dXJuIHRoaXMueS5yZWRNdWwocHozKS5yZWRJU3ViKHAueS5yZWRNdWwoejMpKS5jbXBuKDApID09PSAwO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiAnPEVDIEpQb2ludCBJbmZpbml0eT4nO1xuICByZXR1cm4gJzxFQyBKUG9pbnQgeDogJyArIHRoaXMueC50b1N0cmluZygxNiwgMikgK1xuICAgICAgJyB5OiAnICsgdGhpcy55LnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHo6ICcgKyB0aGlzLnoudG9TdHJpbmcoMTYsIDIpICsgJz4nO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5pc0luZmluaXR5ID0gZnVuY3Rpb24gaXNJbmZpbml0eSgpIHtcbiAgLy8gWFhYIFRoaXMgY29kZSBhc3N1bWVzIHRoYXQgemVybyBpcyBhbHdheXMgemVybyBpbiByZWRcbiAgcmV0dXJuIHRoaXMuei5jbXBuKDApID09PSAwO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGN1cnZlID0gcmVxdWlyZSgnLi4vY3VydmUnKTtcbnZhciBibiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIEJhc2UgPSBjdXJ2ZS5iYXNlO1xuXG5mdW5jdGlvbiBNb250Q3VydmUoY29uZikge1xuICBCYXNlLmNhbGwodGhpcywgJ21vbnQnLCBjb25mKTtcblxuICB0aGlzLmEgPSBuZXcgYm4oY29uZi5hLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLmIgPSBuZXcgYm4oY29uZi5iLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLmk0ID0gbmV3IGJuKDQpLnRvUmVkKHRoaXMucmVkKS5yZWRJbnZtKCk7XG4gIHRoaXMudHdvID0gbmV3IGJuKDIpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5hMjQgPSB0aGlzLmk0LnJlZE11bCh0aGlzLmEucmVkQWRkKHRoaXMudHdvKSk7XG59XG5pbmhlcml0cyhNb250Q3VydmUsIEJhc2UpO1xubW9kdWxlLmV4cG9ydHMgPSBNb250Q3VydmU7XG5cbk1vbnRDdXJ2ZS5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZShwb2ludCkge1xuICB2YXIgeCA9IHBvaW50Lm5vcm1hbGl6ZSgpLng7XG4gIHZhciB4MiA9IHgucmVkU3FyKCk7XG4gIHZhciByaHMgPSB4Mi5yZWRNdWwoeCkucmVkQWRkKHgyLnJlZE11bCh0aGlzLmEpKS5yZWRBZGQoeCk7XG4gIHZhciB5ID0gcmhzLnJlZFNxcnQoKTtcblxuICByZXR1cm4geS5yZWRTcXIoKS5jbXAocmhzKSA9PT0gMDtcbn07XG5cbmZ1bmN0aW9uIFBvaW50KGN1cnZlLCB4LCB6KSB7XG4gIEJhc2UuQmFzZVBvaW50LmNhbGwodGhpcywgY3VydmUsICdwcm9qZWN0aXZlJyk7XG4gIGlmICh4ID09PSBudWxsICYmIHogPT09IG51bGwpIHtcbiAgICB0aGlzLnggPSB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnogPSB0aGlzLmN1cnZlLnplcm87XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54ID0gbmV3IGJuKHgsIDE2KTtcbiAgICB0aGlzLnogPSBuZXcgYm4oeiwgMTYpO1xuICAgIGlmICghdGhpcy54LnJlZClcbiAgICAgIHRoaXMueCA9IHRoaXMueC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgaWYgKCF0aGlzLnoucmVkKVxuICAgICAgdGhpcy56ID0gdGhpcy56LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgfVxufVxuaW5oZXJpdHMoUG9pbnQsIEJhc2UuQmFzZVBvaW50KTtcblxuTW9udEN1cnZlLnByb3RvdHlwZS5wb2ludCA9IGZ1bmN0aW9uIHBvaW50KHgsIHopIHtcbiAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLCB4LCB6KTtcbn07XG5cbk1vbnRDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tSlNPTiA9IGZ1bmN0aW9uIHBvaW50RnJvbUpTT04ob2JqKSB7XG4gIHJldHVybiBQb2ludC5mcm9tSlNPTih0aGlzLCBvYmopO1xufTtcblxuUG9pbnQucHJvdG90eXBlLnByZWNvbXB1dGUgPSBmdW5jdGlvbiBwcmVjb21wdXRlKCkge1xuICAvLyBOby1vcFxufTtcblxuUG9pbnQuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihjdXJ2ZSwgb2JqKSB7XG4gIHJldHVybiBuZXcgUG9pbnQoY3VydmUsIG9ialswXSwgb2JqWzFdIHx8IGN1cnZlLm9uZSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gJzxFQyBQb2ludCBJbmZpbml0eT4nO1xuICByZXR1cm4gJzxFQyBQb2ludCB4OiAnICsgdGhpcy54LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgK1xuICAgICAgJyB6OiAnICsgdGhpcy56LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgKyAnPic7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaXNJbmZpbml0eSA9IGZ1bmN0aW9uIGlzSW5maW5pdHkoKSB7XG4gIC8vIFhYWCBUaGlzIGNvZGUgYXNzdW1lcyB0aGF0IHplcm8gaXMgYWx3YXlzIHplcm8gaW4gcmVkXG4gIHJldHVybiB0aGlzLnouY21wbigwKSA9PT0gMDtcbn07XG5cblBvaW50LnByb3RvdHlwZS5kYmwgPSBmdW5jdGlvbiBkYmwoKSB7XG4gIC8vIGh0dHA6Ly9oeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tbW9udGdvbS14ei5odG1sI2RvdWJsaW5nLWRibC0xOTg3LW0tM1xuICAvLyAyTSArIDJTICsgNEFcblxuICAvLyBBID0gWDEgKyBaMVxuICB2YXIgYSA9IHRoaXMueC5yZWRBZGQodGhpcy56KTtcbiAgLy8gQUEgPSBBXjJcbiAgdmFyIGFhID0gYS5yZWRTcXIoKTtcbiAgLy8gQiA9IFgxIC0gWjFcbiAgdmFyIGIgPSB0aGlzLngucmVkU3ViKHRoaXMueik7XG4gIC8vIEJCID0gQl4yXG4gIHZhciBiYiA9IGIucmVkU3FyKCk7XG4gIC8vIEMgPSBBQSAtIEJCXG4gIHZhciBjID0gYWEucmVkU3ViKGJiKTtcbiAgLy8gWDMgPSBBQSAqIEJCXG4gIHZhciBueCA9IGFhLnJlZE11bChiYik7XG4gIC8vIFozID0gQyAqIChCQiArIEEyNCAqIEMpXG4gIHZhciBueiA9IGMucmVkTXVsKGJiLnJlZEFkZCh0aGlzLmN1cnZlLmEyNC5yZWRNdWwoYykpKTtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG56KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQoKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IHN1cHBvcnRlZCBvbiBNb250Z29tZXJ5IGN1cnZlJyk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZGlmZkFkZCA9IGZ1bmN0aW9uIGRpZmZBZGQocCwgZGlmZikge1xuICAvLyBodHRwOi8vaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLW1vbnRnb20teHouaHRtbCNkaWZmYWRkLWRhZGQtMTk4Ny1tLTNcbiAgLy8gNE0gKyAyUyArIDZBXG5cbiAgLy8gQSA9IFgyICsgWjJcbiAgdmFyIGEgPSB0aGlzLngucmVkQWRkKHRoaXMueik7XG4gIC8vIEIgPSBYMiAtIFoyXG4gIHZhciBiID0gdGhpcy54LnJlZFN1Yih0aGlzLnopO1xuICAvLyBDID0gWDMgKyBaM1xuICB2YXIgYyA9IHAueC5yZWRBZGQocC56KTtcbiAgLy8gRCA9IFgzIC0gWjNcbiAgdmFyIGQgPSBwLngucmVkU3ViKHAueik7XG4gIC8vIERBID0gRCAqIEFcbiAgdmFyIGRhID0gZC5yZWRNdWwoYSk7XG4gIC8vIENCID0gQyAqIEJcbiAgdmFyIGNiID0gYy5yZWRNdWwoYik7XG4gIC8vIFg1ID0gWjEgKiAoREEgKyBDQileMlxuICB2YXIgbnggPSBkaWZmLnoucmVkTXVsKGRhLnJlZEFkZChjYikucmVkU3FyKCkpO1xuICAvLyBaNSA9IFgxICogKERBIC0gQ0IpXjJcbiAgdmFyIG56ID0gZGlmZi54LnJlZE11bChkYS5yZWRJU3ViKGNiKS5yZWRTcXIoKSk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKGspIHtcbiAgdmFyIHQgPSBrLmNsb25lKCk7XG4gIHZhciBhID0gdGhpczsgLy8gKE4gLyAyKSAqIFEgKyBRXG4gIHZhciBiID0gdGhpcy5jdXJ2ZS5wb2ludChudWxsLCBudWxsKTsgLy8gKE4gLyAyKSAqIFFcbiAgdmFyIGMgPSB0aGlzOyAvLyBRXG5cbiAgZm9yICh2YXIgYml0cyA9IFtdOyB0LmNtcG4oMCkgIT09IDA7IHQuaXNocm4oMSkpXG4gICAgYml0cy5wdXNoKHQuYW5kbG4oMSkpO1xuXG4gIGZvciAodmFyIGkgPSBiaXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKGJpdHNbaV0gPT09IDApIHtcbiAgICAgIC8vIE4gKiBRICsgUSA9ICgoTiAvIDIpICogUSArIFEpKSArIChOIC8gMikgKiBRXG4gICAgICBhID0gYS5kaWZmQWRkKGIsIGMpO1xuICAgICAgLy8gTiAqIFEgPSAyICogKChOIC8gMikgKiBRICsgUSkpXG4gICAgICBiID0gYi5kYmwoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTiAqIFEgPSAoKE4gLyAyKSAqIFEgKyBRKSArICgoTiAvIDIpICogUSlcbiAgICAgIGIgPSBhLmRpZmZBZGQoYiwgYyk7XG4gICAgICAvLyBOICogUSArIFEgPSAyICogKChOIC8gMikgKiBRICsgUSlcbiAgICAgIGEgPSBhLmRibCgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYjtcbn07XG5cblBvaW50LnByb3RvdHlwZS5tdWxBZGQgPSBmdW5jdGlvbiBtdWxBZGQoKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IHN1cHBvcnRlZCBvbiBNb250Z29tZXJ5IGN1cnZlJyk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubm9ybWFsaXplID0gZnVuY3Rpb24gbm9ybWFsaXplKCkge1xuICB0aGlzLnggPSB0aGlzLngucmVkTXVsKHRoaXMuei5yZWRJbnZtKCkpO1xuICB0aGlzLnogPSB0aGlzLmN1cnZlLm9uZTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZ2V0WCA9IGZ1bmN0aW9uIGdldFgoKSB7XG4gIC8vIE5vcm1hbGl6ZSBjb29yZGluYXRlc1xuICB0aGlzLm5vcm1hbGl6ZSgpO1xuXG4gIHJldHVybiB0aGlzLnguZnJvbVJlZCgpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGN1cnZlID0gcmVxdWlyZSgnLi4vY3VydmUnKTtcbnZhciBlbGxpcHRpYyA9IHJlcXVpcmUoJy4uLy4uL2VsbGlwdGljJyk7XG52YXIgYm4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBCYXNlID0gY3VydmUuYmFzZTtcblxudmFyIGFzc2VydCA9IGVsbGlwdGljLnV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gRWR3YXJkc0N1cnZlKGNvbmYpIHtcbiAgLy8gTk9URTogSW1wb3J0YW50IGFzIHdlIGFyZSBjcmVhdGluZyBwb2ludCBpbiBCYXNlLmNhbGwoKVxuICB0aGlzLnR3aXN0ZWQgPSAoY29uZi5hIHwgMCkgIT09IDE7XG4gIHRoaXMubU9uZUEgPSB0aGlzLnR3aXN0ZWQgJiYgKGNvbmYuYSB8IDApID09PSAtMTtcbiAgdGhpcy5leHRlbmRlZCA9IHRoaXMubU9uZUE7XG5cbiAgQmFzZS5jYWxsKHRoaXMsICdlZHdhcmRzJywgY29uZik7XG5cbiAgdGhpcy5hID0gbmV3IGJuKGNvbmYuYSwgMTYpLm1vZCh0aGlzLnJlZC5tKS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuYyA9IG5ldyBibihjb25mLmMsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuYzIgPSB0aGlzLmMucmVkU3FyKCk7XG4gIHRoaXMuZCA9IG5ldyBibihjb25mLmQsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuZGQgPSB0aGlzLmQucmVkQWRkKHRoaXMuZCk7XG5cbiAgYXNzZXJ0KCF0aGlzLnR3aXN0ZWQgfHwgdGhpcy5jLmZyb21SZWQoKS5jbXBuKDEpID09PSAwKTtcbiAgdGhpcy5vbmVDID0gKGNvbmYuYyB8IDApID09PSAxO1xufVxuaW5oZXJpdHMoRWR3YXJkc0N1cnZlLCBCYXNlKTtcbm1vZHVsZS5leHBvcnRzID0gRWR3YXJkc0N1cnZlO1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLl9tdWxBID0gZnVuY3Rpb24gX211bEEobnVtKSB7XG4gIGlmICh0aGlzLm1PbmVBKVxuICAgIHJldHVybiBudW0ucmVkTmVnKCk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5hLnJlZE11bChudW0pO1xufTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5fbXVsQyA9IGZ1bmN0aW9uIF9tdWxDKG51bSkge1xuICBpZiAodGhpcy5vbmVDKVxuICAgIHJldHVybiBudW07XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5jLnJlZE11bChudW0pO1xufTtcblxuLy8gSnVzdCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIFNob3J0IGN1cnZlXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLmpwb2ludCA9IGZ1bmN0aW9uIGpwb2ludCh4LCB5LCB6LCB0KSB7XG4gIHJldHVybiB0aGlzLnBvaW50KHgsIHksIHosIHQpO1xufTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5wb2ludEZyb21YID0gZnVuY3Rpb24gcG9pbnRGcm9tWChvZGQsIHgpIHtcbiAgeCA9IG5ldyBibih4LCAxNik7XG4gIGlmICgheC5yZWQpXG4gICAgeCA9IHgudG9SZWQodGhpcy5yZWQpO1xuXG4gIHZhciB4MiA9IHgucmVkU3FyKCk7XG4gIHZhciByaHMgPSB0aGlzLmMyLnJlZFN1Yih0aGlzLmEucmVkTXVsKHgyKSk7XG4gIHZhciBsaHMgPSB0aGlzLm9uZS5yZWRTdWIodGhpcy5jMi5yZWRNdWwodGhpcy5kKS5yZWRNdWwoeDIpKTtcblxuICB2YXIgeSA9IHJocy5yZWRNdWwobGhzLnJlZEludm0oKSkucmVkU3FydCgpO1xuICB2YXIgaXNPZGQgPSB5LmZyb21SZWQoKS5pc09kZCgpO1xuICBpZiAob2RkICYmICFpc09kZCB8fCAhb2RkICYmIGlzT2RkKVxuICAgIHkgPSB5LnJlZE5lZygpO1xuXG4gIHJldHVybiB0aGlzLnBvaW50KHgsIHksIGN1cnZlLm9uZSk7XG59O1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUocG9pbnQpIHtcbiAgaWYgKHBvaW50LmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdHJ1ZTtcblxuICAvLyBDdXJ2ZTogQSAqIFheMiArIFleMiA9IENeMiAqICgxICsgRCAqIFheMiAqIFleMilcbiAgcG9pbnQubm9ybWFsaXplKCk7XG5cbiAgdmFyIHgyID0gcG9pbnQueC5yZWRTcXIoKTtcbiAgdmFyIHkyID0gcG9pbnQueS5yZWRTcXIoKTtcbiAgdmFyIGxocyA9IHgyLnJlZE11bCh0aGlzLmEpLnJlZEFkZCh5Mik7XG4gIHZhciByaHMgPSB0aGlzLmMyLnJlZE11bCh0aGlzLm9uZS5yZWRBZGQodGhpcy5kLnJlZE11bCh4MikucmVkTXVsKHkyKSkpO1xuXG4gIHJldHVybiBsaHMuY21wKHJocykgPT09IDA7XG59O1xuXG5mdW5jdGlvbiBQb2ludChjdXJ2ZSwgeCwgeSwgeiwgdCkge1xuICBCYXNlLkJhc2VQb2ludC5jYWxsKHRoaXMsIGN1cnZlLCAncHJvamVjdGl2ZScpO1xuICBpZiAoeCA9PT0gbnVsbCAmJiB5ID09PSBudWxsICYmIHogPT09IG51bGwpIHtcbiAgICB0aGlzLnggPSB0aGlzLmN1cnZlLnplcm87XG4gICAgdGhpcy55ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy56ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy50ID0gdGhpcy5jdXJ2ZS56ZXJvO1xuICAgIHRoaXMuek9uZSA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54ID0gbmV3IGJuKHgsIDE2KTtcbiAgICB0aGlzLnkgPSBuZXcgYm4oeSwgMTYpO1xuICAgIHRoaXMueiA9IHogPyBuZXcgYm4oeiwgMTYpIDogdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy50ID0gdCAmJiBuZXcgYm4odCwgMTYpO1xuICAgIGlmICghdGhpcy54LnJlZClcbiAgICAgIHRoaXMueCA9IHRoaXMueC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgaWYgKCF0aGlzLnkucmVkKVxuICAgICAgdGhpcy55ID0gdGhpcy55LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICBpZiAoIXRoaXMuei5yZWQpXG4gICAgICB0aGlzLnogPSB0aGlzLnoudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIGlmICh0aGlzLnQgJiYgIXRoaXMudC5yZWQpXG4gICAgICB0aGlzLnQgPSB0aGlzLnQudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIHRoaXMuek9uZSA9IHRoaXMueiA9PT0gdGhpcy5jdXJ2ZS5vbmU7XG5cbiAgICAvLyBVc2UgZXh0ZW5kZWQgY29vcmRpbmF0ZXNcbiAgICBpZiAodGhpcy5jdXJ2ZS5leHRlbmRlZCAmJiAhdGhpcy50KSB7XG4gICAgICB0aGlzLnQgPSB0aGlzLngucmVkTXVsKHRoaXMueSk7XG4gICAgICBpZiAoIXRoaXMuek9uZSlcbiAgICAgICAgdGhpcy50ID0gdGhpcy50LnJlZE11bCh0aGlzLnoucmVkSW52bSgpKTtcbiAgICB9XG4gIH1cbn1cbmluaGVyaXRzKFBvaW50LCBCYXNlLkJhc2VQb2ludCk7XG5cbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tSlNPTiA9IGZ1bmN0aW9uIHBvaW50RnJvbUpTT04ob2JqKSB7XG4gIHJldHVybiBQb2ludC5mcm9tSlNPTih0aGlzLCBvYmopO1xufTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5wb2ludCA9IGZ1bmN0aW9uIHBvaW50KHgsIHksIHosIHQpIHtcbiAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLCB4LCB5LCB6LCB0KTtcbn07XG5cblBvaW50LmZyb21KU09OID0gZnVuY3Rpb24gZnJvbUpTT04oY3VydmUsIG9iaikge1xuICByZXR1cm4gbmV3IFBvaW50KGN1cnZlLCBvYmpbMF0sIG9ialsxXSwgb2JqWzJdKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiAnPEVDIFBvaW50IEluZmluaXR5Pic7XG4gIHJldHVybiAnPEVDIFBvaW50IHg6ICcgKyB0aGlzLnguZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHk6ICcgKyB0aGlzLnkuZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHo6ICcgKyB0aGlzLnouZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArICc+Jztcbn07XG5cblBvaW50LnByb3RvdHlwZS5pc0luZmluaXR5ID0gZnVuY3Rpb24gaXNJbmZpbml0eSgpIHtcbiAgLy8gWFhYIFRoaXMgY29kZSBhc3N1bWVzIHRoYXQgemVybyBpcyBhbHdheXMgemVybyBpbiByZWRcbiAgcmV0dXJuIHRoaXMueC5jbXBuKDApID09PSAwICYmXG4gICAgICAgICB0aGlzLnkuY21wKHRoaXMueikgPT09IDA7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuX2V4dERibCA9IGZ1bmN0aW9uIF9leHREYmwoKSB7XG4gIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by10d2lzdGVkLWV4dGVuZGVkLTEuaHRtbFxuICAvLyAgICAgI2RvdWJsaW5nLWRibC0yMDA4LWh3Y2RcbiAgLy8gNE0gKyA0U1xuXG4gIC8vIEEgPSBYMV4yXG4gIHZhciBhID0gdGhpcy54LnJlZFNxcigpO1xuICAvLyBCID0gWTFeMlxuICB2YXIgYiA9IHRoaXMueS5yZWRTcXIoKTtcbiAgLy8gQyA9IDIgKiBaMV4yXG4gIHZhciBjID0gdGhpcy56LnJlZFNxcigpO1xuICBjID0gYy5yZWRJQWRkKGMpO1xuICAvLyBEID0gYSAqIEFcbiAgdmFyIGQgPSB0aGlzLmN1cnZlLl9tdWxBKGEpO1xuICAvLyBFID0gKFgxICsgWTEpXjIgLSBBIC0gQlxuICB2YXIgZSA9IHRoaXMueC5yZWRBZGQodGhpcy55KS5yZWRTcXIoKS5yZWRJU3ViKGEpLnJlZElTdWIoYik7XG4gIC8vIEcgPSBEICsgQlxuICB2YXIgZyA9IGQucmVkQWRkKGIpO1xuICAvLyBGID0gRyAtIENcbiAgdmFyIGYgPSBnLnJlZFN1YihjKTtcbiAgLy8gSCA9IEQgLSBCXG4gIHZhciBoID0gZC5yZWRTdWIoYik7XG4gIC8vIFgzID0gRSAqIEZcbiAgdmFyIG54ID0gZS5yZWRNdWwoZik7XG4gIC8vIFkzID0gRyAqIEhcbiAgdmFyIG55ID0gZy5yZWRNdWwoaCk7XG4gIC8vIFQzID0gRSAqIEhcbiAgdmFyIG50ID0gZS5yZWRNdWwoaCk7XG4gIC8vIFozID0gRiAqIEdcbiAgdmFyIG56ID0gZi5yZWRNdWwoZyk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSwgbnosIG50KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fcHJvakRibCA9IGZ1bmN0aW9uIF9wcm9qRGJsKCkge1xuICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tdHdpc3RlZC1wcm9qZWN0aXZlLmh0bWxcbiAgLy8gICAgICNkb3VibGluZy1kYmwtMjAwOC1iYmpscFxuICAvLyAgICAgI2RvdWJsaW5nLWRibC0yMDA3LWJsXG4gIC8vIGFuZCBvdGhlcnNcbiAgLy8gR2VuZXJhbGx5IDNNICsgNFMgb3IgMk0gKyA0U1xuXG4gIC8vIEIgPSAoWDEgKyBZMSleMlxuICB2YXIgYiA9IHRoaXMueC5yZWRBZGQodGhpcy55KS5yZWRTcXIoKTtcbiAgLy8gQyA9IFgxXjJcbiAgdmFyIGMgPSB0aGlzLngucmVkU3FyKCk7XG4gIC8vIEQgPSBZMV4yXG4gIHZhciBkID0gdGhpcy55LnJlZFNxcigpO1xuXG4gIHZhciBueDtcbiAgdmFyIG55O1xuICB2YXIgbno7XG4gIGlmICh0aGlzLmN1cnZlLnR3aXN0ZWQpIHtcbiAgICAvLyBFID0gYSAqIENcbiAgICB2YXIgZSA9IHRoaXMuY3VydmUuX211bEEoYyk7XG4gICAgLy8gRiA9IEUgKyBEXG4gICAgdmFyIGYgPSBlLnJlZEFkZChkKTtcbiAgICBpZiAodGhpcy56T25lKSB7XG4gICAgICAvLyBYMyA9IChCIC0gQyAtIEQpICogKEYgLSAyKVxuICAgICAgbnggPSBiLnJlZFN1YihjKS5yZWRTdWIoZCkucmVkTXVsKGYucmVkU3ViKHRoaXMuY3VydmUudHdvKSk7XG4gICAgICAvLyBZMyA9IEYgKiAoRSAtIEQpXG4gICAgICBueSA9IGYucmVkTXVsKGUucmVkU3ViKGQpKTtcbiAgICAgIC8vIFozID0gRl4yIC0gMiAqIEZcbiAgICAgIG56ID0gZi5yZWRTcXIoKS5yZWRTdWIoZikucmVkU3ViKGYpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBIID0gWjFeMlxuICAgICAgdmFyIGggPSB0aGlzLnoucmVkU3FyKCk7XG4gICAgICAvLyBKID0gRiAtIDIgKiBIXG4gICAgICB2YXIgaiA9IGYucmVkU3ViKGgpLnJlZElTdWIoaCk7XG4gICAgICAvLyBYMyA9IChCLUMtRCkqSlxuICAgICAgbnggPSBiLnJlZFN1YihjKS5yZWRJU3ViKGQpLnJlZE11bChqKTtcbiAgICAgIC8vIFkzID0gRiAqIChFIC0gRClcbiAgICAgIG55ID0gZi5yZWRNdWwoZS5yZWRTdWIoZCkpO1xuICAgICAgLy8gWjMgPSBGICogSlxuICAgICAgbnogPSBmLnJlZE11bChqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gRSA9IEMgKyBEXG4gICAgdmFyIGUgPSBjLnJlZEFkZChkKTtcbiAgICAvLyBIID0gKGMgKiBaMSleMlxuICAgIHZhciBoID0gdGhpcy5jdXJ2ZS5fbXVsQyh0aGlzLmMucmVkTXVsKHRoaXMueikpLnJlZFNxcigpO1xuICAgIC8vIEogPSBFIC0gMiAqIEhcbiAgICB2YXIgaiA9IGUucmVkU3ViKGgpLnJlZFN1YihoKTtcbiAgICAvLyBYMyA9IGMgKiAoQiAtIEUpICogSlxuICAgIG54ID0gdGhpcy5jdXJ2ZS5fbXVsQyhiLnJlZElTdWIoZSkpLnJlZE11bChqKTtcbiAgICAvLyBZMyA9IGMgKiBFICogKEMgLSBEKVxuICAgIG55ID0gdGhpcy5jdXJ2ZS5fbXVsQyhlKS5yZWRNdWwoYy5yZWRJU3ViKGQpKTtcbiAgICAvLyBaMyA9IEUgKiBKXG4gICAgbnogPSBlLnJlZE11bChqKTtcbiAgfVxuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnksIG56KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5kYmwgPSBmdW5jdGlvbiBkYmwoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBEb3VibGUgaW4gZXh0ZW5kZWQgY29vcmRpbmF0ZXNcbiAgaWYgKHRoaXMuY3VydmUuZXh0ZW5kZWQpXG4gICAgcmV0dXJuIHRoaXMuX2V4dERibCgpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuX3Byb2pEYmwoKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fZXh0QWRkID0gZnVuY3Rpb24gX2V4dEFkZChwKSB7XG4gIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by10d2lzdGVkLWV4dGVuZGVkLTEuaHRtbFxuICAvLyAgICAgI2FkZGl0aW9uLWFkZC0yMDA4LWh3Y2QtM1xuICAvLyA4TVxuXG4gIC8vIEEgPSAoWTEgLSBYMSkgKiAoWTIgLSBYMilcbiAgdmFyIGEgPSB0aGlzLnkucmVkU3ViKHRoaXMueCkucmVkTXVsKHAueS5yZWRTdWIocC54KSk7XG4gIC8vIEIgPSAoWTEgKyBYMSkgKiAoWTIgKyBYMilcbiAgdmFyIGIgPSB0aGlzLnkucmVkQWRkKHRoaXMueCkucmVkTXVsKHAueS5yZWRBZGQocC54KSk7XG4gIC8vIEMgPSBUMSAqIGsgKiBUMlxuICB2YXIgYyA9IHRoaXMudC5yZWRNdWwodGhpcy5jdXJ2ZS5kZCkucmVkTXVsKHAudCk7XG4gIC8vIEQgPSBaMSAqIDIgKiBaMlxuICB2YXIgZCA9IHRoaXMuei5yZWRNdWwocC56LnJlZEFkZChwLnopKTtcbiAgLy8gRSA9IEIgLSBBXG4gIHZhciBlID0gYi5yZWRTdWIoYSk7XG4gIC8vIEYgPSBEIC0gQ1xuICB2YXIgZiA9IGQucmVkU3ViKGMpO1xuICAvLyBHID0gRCArIENcbiAgdmFyIGcgPSBkLnJlZEFkZChjKTtcbiAgLy8gSCA9IEIgKyBBXG4gIHZhciBoID0gYi5yZWRBZGQoYSk7XG4gIC8vIFgzID0gRSAqIEZcbiAgdmFyIG54ID0gZS5yZWRNdWwoZik7XG4gIC8vIFkzID0gRyAqIEhcbiAgdmFyIG55ID0gZy5yZWRNdWwoaCk7XG4gIC8vIFQzID0gRSAqIEhcbiAgdmFyIG50ID0gZS5yZWRNdWwoaCk7XG4gIC8vIFozID0gRiAqIEdcbiAgdmFyIG56ID0gZi5yZWRNdWwoZyk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSwgbnosIG50KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fcHJvakFkZCA9IGZ1bmN0aW9uIF9wcm9qQWRkKHApIHtcbiAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXR3aXN0ZWQtcHJvamVjdGl2ZS5odG1sXG4gIC8vICAgICAjYWRkaXRpb24tYWRkLTIwMDgtYmJqbHBcbiAgLy8gICAgICNhZGRpdGlvbi1hZGQtMjAwNy1ibFxuICAvLyAxME0gKyAxU1xuXG4gIC8vIEEgPSBaMSAqIFoyXG4gIHZhciBhID0gdGhpcy56LnJlZE11bChwLnopO1xuICAvLyBCID0gQV4yXG4gIHZhciBiID0gYS5yZWRTcXIoKTtcbiAgLy8gQyA9IFgxICogWDJcbiAgdmFyIGMgPSB0aGlzLngucmVkTXVsKHAueCk7XG4gIC8vIEQgPSBZMSAqIFkyXG4gIHZhciBkID0gdGhpcy55LnJlZE11bChwLnkpO1xuICAvLyBFID0gZCAqIEMgKiBEXG4gIHZhciBlID0gdGhpcy5jdXJ2ZS5kLnJlZE11bChjKS5yZWRNdWwoZCk7XG4gIC8vIEYgPSBCIC0gRVxuICB2YXIgZiA9IGIucmVkU3ViKGUpO1xuICAvLyBHID0gQiArIEVcbiAgdmFyIGcgPSBiLnJlZEFkZChlKTtcbiAgLy8gWDMgPSBBICogRiAqICgoWDEgKyBZMSkgKiAoWDIgKyBZMikgLSBDIC0gRClcbiAgdmFyIHRtcCA9IHRoaXMueC5yZWRBZGQodGhpcy55KS5yZWRNdWwocC54LnJlZEFkZChwLnkpKS5yZWRJU3ViKGMpLnJlZElTdWIoZCk7XG4gIHZhciBueCA9IGEucmVkTXVsKGYpLnJlZE11bCh0bXApO1xuICB2YXIgbnk7XG4gIHZhciBuejtcbiAgaWYgKHRoaXMuY3VydmUudHdpc3RlZCkge1xuICAgIC8vIFkzID0gQSAqIEcgKiAoRCAtIGEgKiBDKVxuICAgIG55ID0gYS5yZWRNdWwoZykucmVkTXVsKGQucmVkU3ViKHRoaXMuY3VydmUuX211bEEoYykpKTtcbiAgICAvLyBaMyA9IEYgKiBHXG4gICAgbnogPSBmLnJlZE11bChnKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBZMyA9IEEgKiBHICogKEQgLSBDKVxuICAgIG55ID0gYS5yZWRNdWwoZykucmVkTXVsKGQucmVkU3ViKGMpKTtcbiAgICAvLyBaMyA9IGMgKiBGICogR1xuICAgIG56ID0gdGhpcy5jdXJ2ZS5fbXVsQyhmKS5yZWRNdWwoZyk7XG4gIH1cbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG55LCBueik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKHApIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiBwO1xuICBpZiAocC5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgaWYgKHRoaXMuY3VydmUuZXh0ZW5kZWQpXG4gICAgcmV0dXJuIHRoaXMuX2V4dEFkZChwKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLl9wcm9qQWRkKHApO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bChrKSB7XG4gIGlmICh0aGlzLl9oYXNEb3VibGVzKGspKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl9maXhlZE5hZk11bCh0aGlzLCBrKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsKHRoaXMsIGspO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bEFkZCA9IGZ1bmN0aW9uIG11bEFkZChrMSwgcCwgazIpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWxBZGQoMSwgWyB0aGlzLCBwIF0sIFsgazEsIGsyIF0sIDIpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIG5vcm1hbGl6ZSgpIHtcbiAgaWYgKHRoaXMuek9uZSlcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBOb3JtYWxpemUgY29vcmRpbmF0ZXNcbiAgdmFyIHppID0gdGhpcy56LnJlZEludm0oKTtcbiAgdGhpcy54ID0gdGhpcy54LnJlZE11bCh6aSk7XG4gIHRoaXMueSA9IHRoaXMueS5yZWRNdWwoemkpO1xuICBpZiAodGhpcy50KVxuICAgIHRoaXMudCA9IHRoaXMudC5yZWRNdWwoemkpO1xuICB0aGlzLnogPSB0aGlzLmN1cnZlLm9uZTtcbiAgdGhpcy56T25lID0gdHJ1ZTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnKCkge1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludCh0aGlzLngucmVkTmVnKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy56LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnQgJiYgdGhpcy50LnJlZE5lZygpKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5nZXRYID0gZnVuY3Rpb24gZ2V0WCgpIHtcbiAgdGhpcy5ub3JtYWxpemUoKTtcbiAgcmV0dXJuIHRoaXMueC5mcm9tUmVkKCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZ2V0WSA9IGZ1bmN0aW9uIGdldFkoKSB7XG4gIHRoaXMubm9ybWFsaXplKCk7XG4gIHJldHVybiB0aGlzLnkuZnJvbVJlZCgpO1xufTtcblxuLy8gQ29tcGF0aWJpbGl0eSB3aXRoIEJhc2VDdXJ2ZVxuUG9pbnQucHJvdG90eXBlLnRvUCA9IFBvaW50LnByb3RvdHlwZS5ub3JtYWxpemU7XG5Qb2ludC5wcm90b3R5cGUubWl4ZWRBZGQgPSBQb2ludC5wcm90b3R5cGUuYWRkO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYm4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIGVsbGlwdGljID0gcmVxdWlyZSgnLi4vLi4vZWxsaXB0aWMnKTtcblxudmFyIGdldE5BRiA9IGVsbGlwdGljLnV0aWxzLmdldE5BRjtcbnZhciBnZXRKU0YgPSBlbGxpcHRpYy51dGlscy5nZXRKU0Y7XG52YXIgYXNzZXJ0ID0gZWxsaXB0aWMudXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBCYXNlQ3VydmUodHlwZSwgY29uZikge1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnAgPSBuZXcgYm4oY29uZi5wLCAxNik7XG5cbiAgLy8gVXNlIE1vbnRnb21lcnksIHdoZW4gdGhlcmUgaXMgbm8gZmFzdCByZWR1Y3Rpb24gZm9yIHRoZSBwcmltZVxuICB0aGlzLnJlZCA9IGNvbmYucHJpbWUgPyBibi5yZWQoY29uZi5wcmltZSkgOiBibi5tb250KHRoaXMucCk7XG5cbiAgLy8gVXNlZnVsIGZvciBtYW55IGN1cnZlc1xuICB0aGlzLnplcm8gPSBuZXcgYm4oMCkudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLm9uZSA9IG5ldyBibigxKS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMudHdvID0gbmV3IGJuKDIpLnRvUmVkKHRoaXMucmVkKTtcblxuICAvLyBDdXJ2ZSBjb25maWd1cmF0aW9uLCBvcHRpb25hbFxuICB0aGlzLm4gPSBjb25mLm4gJiYgbmV3IGJuKGNvbmYubiwgMTYpO1xuICB0aGlzLmcgPSBjb25mLmcgJiYgdGhpcy5wb2ludEZyb21KU09OKGNvbmYuZywgY29uZi5nUmVkKTtcblxuICAvLyBUZW1wb3JhcnkgYXJyYXlzXG4gIHRoaXMuX3duYWZUMSA9IG5ldyBBcnJheSg0KTtcbiAgdGhpcy5fd25hZlQyID0gbmV3IEFycmF5KDQpO1xuICB0aGlzLl93bmFmVDMgPSBuZXcgQXJyYXkoNCk7XG4gIHRoaXMuX3duYWZUNCA9IG5ldyBBcnJheSg0KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gQmFzZUN1cnZlO1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLnBvaW50ID0gZnVuY3Rpb24gcG9pbnQoKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUoKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLl9maXhlZE5hZk11bCA9IGZ1bmN0aW9uIF9maXhlZE5hZk11bChwLCBrKSB7XG4gIGFzc2VydChwLnByZWNvbXB1dGVkKTtcbiAgdmFyIGRvdWJsZXMgPSBwLl9nZXREb3VibGVzKCk7XG5cbiAgdmFyIG5hZiA9IGdldE5BRihrLCAxKTtcbiAgdmFyIEkgPSAoMSA8PCAoZG91Ymxlcy5zdGVwICsgMSkpIC0gKGRvdWJsZXMuc3RlcCAlIDIgPT09IDAgPyAyIDogMSk7XG4gIEkgLz0gMztcblxuICAvLyBUcmFuc2xhdGUgaW50byBtb3JlIHdpbmRvd2VkIGZvcm1cbiAgdmFyIHJlcHIgPSBbXTtcbiAgZm9yICh2YXIgaiA9IDA7IGogPCBuYWYubGVuZ3RoOyBqICs9IGRvdWJsZXMuc3RlcCkge1xuICAgIHZhciBuYWZXID0gMDtcbiAgICBmb3IgKHZhciBrID0gaiArIGRvdWJsZXMuc3RlcCAtIDE7IGsgPj0gajsgay0tKVxuICAgICAgbmFmVyA9IChuYWZXIDw8IDEpICsgbmFmW2tdO1xuICAgIHJlcHIucHVzaChuYWZXKTtcbiAgfVxuXG4gIHZhciBhID0gdGhpcy5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gIHZhciBiID0gdGhpcy5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gIGZvciAodmFyIGkgPSBJOyBpID4gMDsgaS0tKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCByZXByLmxlbmd0aDsgaisrKSB7XG4gICAgICB2YXIgbmFmVyA9IHJlcHJbal07XG4gICAgICBpZiAobmFmVyA9PT0gaSlcbiAgICAgICAgYiA9IGIubWl4ZWRBZGQoZG91Ymxlcy5wb2ludHNbal0pO1xuICAgICAgZWxzZSBpZiAobmFmVyA9PT0gLWkpXG4gICAgICAgIGIgPSBiLm1peGVkQWRkKGRvdWJsZXMucG9pbnRzW2pdLm5lZygpKTtcbiAgICB9XG4gICAgYSA9IGEuYWRkKGIpO1xuICB9XG4gIHJldHVybiBhLnRvUCgpO1xufTtcblxuQmFzZUN1cnZlLnByb3RvdHlwZS5fd25hZk11bCA9IGZ1bmN0aW9uIF93bmFmTXVsKHAsIGspIHtcbiAgdmFyIHcgPSA0O1xuXG4gIC8vIFByZWNvbXB1dGUgd2luZG93XG4gIHZhciBuYWZQb2ludHMgPSBwLl9nZXROQUZQb2ludHModyk7XG4gIHcgPSBuYWZQb2ludHMud25kO1xuICB2YXIgd25kID0gbmFmUG9pbnRzLnBvaW50cztcblxuICAvLyBHZXQgTkFGIGZvcm1cbiAgdmFyIG5hZiA9IGdldE5BRihrLCB3KTtcblxuICAvLyBBZGQgYHRoaXNgKihOKzEpIGZvciBldmVyeSB3LU5BRiBpbmRleFxuICB2YXIgYWNjID0gdGhpcy5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gIGZvciAodmFyIGkgPSBuYWYubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAvLyBDb3VudCB6ZXJvZXNcbiAgICBmb3IgKHZhciBrID0gMDsgaSA+PSAwICYmIG5hZltpXSA9PT0gMDsgaS0tKVxuICAgICAgaysrO1xuICAgIGlmIChpID49IDApXG4gICAgICBrKys7XG4gICAgYWNjID0gYWNjLmRibHAoayk7XG5cbiAgICBpZiAoaSA8IDApXG4gICAgICBicmVhaztcbiAgICB2YXIgeiA9IG5hZltpXTtcbiAgICBhc3NlcnQoeiAhPT0gMCk7XG4gICAgaWYgKHAudHlwZSA9PT0gJ2FmZmluZScpIHtcbiAgICAgIC8vIEogKy0gUFxuICAgICAgaWYgKHogPiAwKVxuICAgICAgICBhY2MgPSBhY2MubWl4ZWRBZGQod25kWyh6IC0gMSkgPj4gMV0pO1xuICAgICAgZWxzZVxuICAgICAgICBhY2MgPSBhY2MubWl4ZWRBZGQod25kWygteiAtIDEpID4+IDFdLm5lZygpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSiArLSBKXG4gICAgICBpZiAoeiA+IDApXG4gICAgICAgIGFjYyA9IGFjYy5hZGQod25kWyh6IC0gMSkgPj4gMV0pO1xuICAgICAgZWxzZVxuICAgICAgICBhY2MgPSBhY2MuYWRkKHduZFsoLXogLSAxKSA+PiAxXS5uZWcoKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBwLnR5cGUgPT09ICdhZmZpbmUnID8gYWNjLnRvUCgpIDogYWNjO1xufTtcblxuQmFzZUN1cnZlLnByb3RvdHlwZS5fd25hZk11bEFkZCA9IGZ1bmN0aW9uIF93bmFmTXVsQWRkKGRlZlcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZWZmcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZW4pIHtcbiAgdmFyIHduZFdpZHRoID0gdGhpcy5fd25hZlQxO1xuICB2YXIgd25kID0gdGhpcy5fd25hZlQyO1xuICB2YXIgbmFmID0gdGhpcy5fd25hZlQzO1xuXG4gIC8vIEZpbGwgYWxsIGFycmF5c1xuICB2YXIgbWF4ID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBwID0gcG9pbnRzW2ldO1xuICAgIHZhciBuYWZQb2ludHMgPSBwLl9nZXROQUZQb2ludHMoZGVmVyk7XG4gICAgd25kV2lkdGhbaV0gPSBuYWZQb2ludHMud25kO1xuICAgIHduZFtpXSA9IG5hZlBvaW50cy5wb2ludHM7XG4gIH1cblxuICAvLyBDb21iIHNtYWxsIHdpbmRvdyBOQUZzXG4gIGZvciAodmFyIGkgPSBsZW4gLSAxOyBpID49IDE7IGkgLT0gMikge1xuICAgIHZhciBhID0gaSAtIDE7XG4gICAgdmFyIGIgPSBpO1xuICAgIGlmICh3bmRXaWR0aFthXSAhPT0gMSB8fCB3bmRXaWR0aFtiXSAhPT0gMSkge1xuICAgICAgbmFmW2FdID0gZ2V0TkFGKGNvZWZmc1thXSwgd25kV2lkdGhbYV0pO1xuICAgICAgbmFmW2JdID0gZ2V0TkFGKGNvZWZmc1tiXSwgd25kV2lkdGhbYl0pO1xuICAgICAgbWF4ID0gTWF0aC5tYXgobmFmW2FdLmxlbmd0aCwgbWF4KTtcbiAgICAgIG1heCA9IE1hdGgubWF4KG5hZltiXS5sZW5ndGgsIG1heCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgY29tYiA9IFtcbiAgICAgIHBvaW50c1thXSwgLyogMSAqL1xuICAgICAgbnVsbCwgLyogMyAqL1xuICAgICAgbnVsbCwgLyogNSAqL1xuICAgICAgcG9pbnRzW2JdIC8qIDcgKi9cbiAgICBdO1xuXG4gICAgLy8gVHJ5IHRvIGF2b2lkIFByb2plY3RpdmUgcG9pbnRzLCBpZiBwb3NzaWJsZVxuICAgIGlmIChwb2ludHNbYV0ueS5jbXAocG9pbnRzW2JdLnkpID09PSAwKSB7XG4gICAgICBjb21iWzFdID0gcG9pbnRzW2FdLmFkZChwb2ludHNbYl0pO1xuICAgICAgY29tYlsyXSA9IHBvaW50c1thXS50b0ooKS5taXhlZEFkZChwb2ludHNbYl0ubmVnKCkpO1xuICAgIH0gZWxzZSBpZiAocG9pbnRzW2FdLnkuY21wKHBvaW50c1tiXS55LnJlZE5lZygpKSA9PT0gMCkge1xuICAgICAgY29tYlsxXSA9IHBvaW50c1thXS50b0ooKS5taXhlZEFkZChwb2ludHNbYl0pO1xuICAgICAgY29tYlsyXSA9IHBvaW50c1thXS5hZGQocG9pbnRzW2JdLm5lZygpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29tYlsxXSA9IHBvaW50c1thXS50b0ooKS5taXhlZEFkZChwb2ludHNbYl0pO1xuICAgICAgY29tYlsyXSA9IHBvaW50c1thXS50b0ooKS5taXhlZEFkZChwb2ludHNbYl0ubmVnKCkpO1xuICAgIH1cblxuICAgIHZhciBpbmRleCA9IFtcbiAgICAgIC0zLCAvKiAtMSAtMSAqL1xuICAgICAgLTEsIC8qIC0xIDAgKi9cbiAgICAgIC01LCAvKiAtMSAxICovXG4gICAgICAtNywgLyogMCAtMSAqL1xuICAgICAgMCwgLyogMCAwICovXG4gICAgICA3LCAvKiAwIDEgKi9cbiAgICAgIDUsIC8qIDEgLTEgKi9cbiAgICAgIDEsIC8qIDEgMCAqL1xuICAgICAgMyAgLyogMSAxICovXG4gICAgXTtcblxuICAgIHZhciBqc2YgPSBnZXRKU0YoY29lZmZzW2FdLCBjb2VmZnNbYl0pO1xuICAgIG1heCA9IE1hdGgubWF4KGpzZlswXS5sZW5ndGgsIG1heCk7XG4gICAgbmFmW2FdID0gbmV3IEFycmF5KG1heCk7XG4gICAgbmFmW2JdID0gbmV3IEFycmF5KG1heCk7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBtYXg7IGorKykge1xuICAgICAgdmFyIGphID0ganNmWzBdW2pdIHwgMDtcbiAgICAgIHZhciBqYiA9IGpzZlsxXVtqXSB8IDA7XG5cbiAgICAgIG5hZlthXVtqXSA9IGluZGV4WyhqYSArIDEpICogMyArIChqYiArIDEpXTtcbiAgICAgIG5hZltiXVtqXSA9IDA7XG4gICAgICB3bmRbYV0gPSBjb21iO1xuICAgIH1cbiAgfVxuXG4gIHZhciBhY2MgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgdmFyIHRtcCA9IHRoaXMuX3duYWZUNDtcbiAgZm9yICh2YXIgaSA9IG1heDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgayA9IDA7XG5cbiAgICB3aGlsZSAoaSA+PSAwKSB7XG4gICAgICB2YXIgemVybyA9IHRydWU7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgIHRtcFtqXSA9IG5hZltqXVtpXSB8IDA7XG4gICAgICAgIGlmICh0bXBbal0gIT09IDApXG4gICAgICAgICAgemVybyA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKCF6ZXJvKVxuICAgICAgICBicmVhaztcbiAgICAgIGsrKztcbiAgICAgIGktLTtcbiAgICB9XG4gICAgaWYgKGkgPj0gMClcbiAgICAgIGsrKztcbiAgICBhY2MgPSBhY2MuZGJscChrKTtcbiAgICBpZiAoaSA8IDApXG4gICAgICBicmVhaztcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgIHZhciB6ID0gdG1wW2pdO1xuICAgICAgdmFyIHA7XG4gICAgICBpZiAoeiA9PT0gMClcbiAgICAgICAgY29udGludWU7XG4gICAgICBlbHNlIGlmICh6ID4gMClcbiAgICAgICAgcCA9IHduZFtqXVsoeiAtIDEpID4+IDFdO1xuICAgICAgZWxzZSBpZiAoeiA8IDApXG4gICAgICAgIHAgPSB3bmRbal1bKC16IC0gMSkgPj4gMV0ubmVnKCk7XG5cbiAgICAgIGlmIChwLnR5cGUgPT09ICdhZmZpbmUnKVxuICAgICAgICBhY2MgPSBhY2MubWl4ZWRBZGQocCk7XG4gICAgICBlbHNlXG4gICAgICAgIGFjYyA9IGFjYy5hZGQocCk7XG4gICAgfVxuICB9XG4gIC8vIFplcm9pZnkgcmVmZXJlbmNlc1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKVxuICAgIHduZFtpXSA9IG51bGw7XG4gIHJldHVybiBhY2MudG9QKCk7XG59O1xuXG5mdW5jdGlvbiBCYXNlUG9pbnQoY3VydmUsIHR5cGUpIHtcbiAgdGhpcy5jdXJ2ZSA9IGN1cnZlO1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnByZWNvbXB1dGVkID0gbnVsbDtcbn1cbkJhc2VDdXJ2ZS5CYXNlUG9pbnQgPSBCYXNlUG9pbnQ7XG5cbkJhc2VQb2ludC5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZSgpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUudmFsaWRhdGUodGhpcyk7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLnByZWNvbXB1dGUgPSBmdW5jdGlvbiBwcmVjb21wdXRlKHBvd2VyKSB7XG4gIGlmICh0aGlzLnByZWNvbXB1dGVkKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIHZhciBwcmVjb21wdXRlZCA9IHtcbiAgICBkb3VibGVzOiBudWxsLFxuICAgIG5hZjogbnVsbCxcbiAgICBiZXRhOiBudWxsXG4gIH07XG4gIHByZWNvbXB1dGVkLm5hZiA9IHRoaXMuX2dldE5BRlBvaW50cyg4KTtcbiAgcHJlY29tcHV0ZWQuZG91YmxlcyA9IHRoaXMuX2dldERvdWJsZXMoNCwgcG93ZXIpO1xuICBwcmVjb21wdXRlZC5iZXRhID0gdGhpcy5fZ2V0QmV0YSgpO1xuICB0aGlzLnByZWNvbXB1dGVkID0gcHJlY29tcHV0ZWQ7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9oYXNEb3VibGVzID0gZnVuY3Rpb24gX2hhc0RvdWJsZXMoaykge1xuICBpZiAoIXRoaXMucHJlY29tcHV0ZWQpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBkb3VibGVzID0gdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzO1xuICBpZiAoIWRvdWJsZXMpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiBkb3VibGVzLnBvaW50cy5sZW5ndGggPj0gTWF0aC5jZWlsKChrLmJpdExlbmd0aCgpICsgMSkgLyBkb3VibGVzLnN0ZXApO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5fZ2V0RG91YmxlcyA9IGZ1bmN0aW9uIF9nZXREb3VibGVzKHN0ZXAsIHBvd2VyKSB7XG4gIGlmICh0aGlzLnByZWNvbXB1dGVkICYmIHRoaXMucHJlY29tcHV0ZWQuZG91YmxlcylcbiAgICByZXR1cm4gdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzO1xuXG4gIHZhciBkb3VibGVzID0gWyB0aGlzIF07XG4gIHZhciBhY2MgPSB0aGlzO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvd2VyOyBpICs9IHN0ZXApIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHN0ZXA7IGorKylcbiAgICAgIGFjYyA9IGFjYy5kYmwoKTtcbiAgICBkb3VibGVzLnB1c2goYWNjKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHN0ZXA6IHN0ZXAsXG4gICAgcG9pbnRzOiBkb3VibGVzXG4gIH07XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9nZXROQUZQb2ludHMgPSBmdW5jdGlvbiBfZ2V0TkFGUG9pbnRzKHduZCkge1xuICBpZiAodGhpcy5wcmVjb21wdXRlZCAmJiB0aGlzLnByZWNvbXB1dGVkLm5hZilcbiAgICByZXR1cm4gdGhpcy5wcmVjb21wdXRlZC5uYWY7XG5cbiAgdmFyIHJlcyA9IFsgdGhpcyBdO1xuICB2YXIgbWF4ID0gKDEgPDwgd25kKSAtIDE7XG4gIHZhciBkYmwgPSBtYXggPT09IDEgPyBudWxsIDogdGhpcy5kYmwoKTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBtYXg7IGkrKylcbiAgICByZXNbaV0gPSByZXNbaSAtIDFdLmFkZChkYmwpO1xuICByZXR1cm4ge1xuICAgIHduZDogd25kLFxuICAgIHBvaW50czogcmVzXG4gIH07XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9nZXRCZXRhID0gZnVuY3Rpb24gX2dldEJldGEoKSB7XG4gIHJldHVybiBudWxsO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5kYmxwID0gZnVuY3Rpb24gZGJscChrKSB7XG4gIHZhciByID0gdGhpcztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrOyBpKyspXG4gICAgciA9IHIuZGJsKCk7XG4gIHJldHVybiByO1xufTtcbiIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBibiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgcmFuZG9tQnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpO1xubW9kdWxlLmV4cG9ydHMgPSBjcnQ7XG5mdW5jdGlvbiBibGluZChwcml2KSB7XG4gIHZhciByID0gZ2V0cihwcml2KTtcbiAgdmFyIGJsaW5kZXIgPSByLnRvUmVkKGJuLm1vbnQocHJpdi5tb2R1bHVzKSlcbiAgLnJlZFBvdyhuZXcgYm4ocHJpdi5wdWJsaWNFeHBvbmVudCkpLmZyb21SZWQoKTtcbiAgcmV0dXJuIHtcbiAgICBibGluZGVyOiBibGluZGVyLFxuICAgIHVuYmxpbmRlcjpyLmludm0ocHJpdi5tb2R1bHVzKVxuICB9O1xufVxuZnVuY3Rpb24gY3J0KG1zZywgcHJpdikge1xuICB2YXIgYmxpbmRzID0gYmxpbmQocHJpdik7XG4gIHZhciBsZW4gPSBwcml2Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICB2YXIgbW9kID0gYm4ubW9udChwcml2Lm1vZHVsdXMpO1xuICB2YXIgYmxpbmRlZCA9IG5ldyBibihtc2cpLm11bChibGluZHMuYmxpbmRlcikubW9kKHByaXYubW9kdWx1cyk7XG4gIHZhciBjMSA9IGJsaW5kZWQudG9SZWQoYm4ubW9udChwcml2LnByaW1lMSkpO1xuICB2YXIgYzIgPSBibGluZGVkLnRvUmVkKGJuLm1vbnQocHJpdi5wcmltZTIpKTtcbiAgdmFyIHFpbnYgPSBwcml2LmNvZWZmaWNpZW50O1xuICB2YXIgcCA9IHByaXYucHJpbWUxO1xuICB2YXIgcSA9IHByaXYucHJpbWUyO1xuICB2YXIgbTEgPSBjMS5yZWRQb3cocHJpdi5leHBvbmVudDEpO1xuICB2YXIgbTIgPSBjMi5yZWRQb3cocHJpdi5leHBvbmVudDIpO1xuICBtMSA9IG0xLmZyb21SZWQoKTtcbiAgbTIgPSBtMi5mcm9tUmVkKCk7XG4gIHZhciBoID0gbTEuaXN1YihtMikuaW11bChxaW52KS5tb2QocCk7XG4gIGguaW11bChxKTtcbiAgbTIuaWFkZChoKTtcbiAgdmFyIG91dCA9IG5ldyBCdWZmZXIobTIuaW11bChibGluZHMudW5ibGluZGVyKS5tb2QocHJpdi5tb2R1bHVzKS50b0FycmF5KCkpO1xuICBpZiAob3V0Lmxlbmd0aCA8IGxlbikge1xuICAgIHZhciBwcmVmaXggPSBuZXcgQnVmZmVyKGxlbiAtIG91dC5sZW5ndGgpO1xuICAgIHByZWZpeC5maWxsKDApO1xuICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoW3ByZWZpeCwgb3V0XSwgbGVuKTtcbiAgfVxuICByZXR1cm4gb3V0O1xufVxuY3J0LmdldHIgPSBnZXRyO1xuZnVuY3Rpb24gZ2V0cihwcml2KSB7XG4gIHZhciBsZW4gPSBwcml2Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICB2YXIgciA9IG5ldyBibihyYW5kb21CeXRlcyhsZW4pKTtcbiAgd2hpbGUgKHIuY21wKHByaXYubW9kdWx1cykgPj0gIDAgfHwgIXIubW9kKHByaXYucHJpbWUxKSB8fCAhci5tb2QocHJpdi5wcmltZTIpKSB7XG4gICAgciA9IG5ldyBibihyYW5kb21CeXRlcyhsZW4pKTtcbiAgfVxuICByZXR1cm4gcjtcbn1cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WW5KdmQzTmxjbWxtZVMxemFXZHVMMjV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUxYSnpZUzlwYm1SbGVDNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCaWJpQTlJSEpsY1hWcGNtVW9KMkp1TG1wekp5azdYRzUyWVhJZ2NtRnVaRzl0UW5sMFpYTWdQU0J5WlhGMWFYSmxLQ2R5WVc1a2IyMWllWFJsY3ljcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmpjblE3WEc1bWRXNWpkR2x2YmlCaWJHbHVaQ2h3Y21sMktTQjdYRzRnSUhaaGNpQnlJRDBnWjJWMGNpaHdjbWwyS1R0Y2JpQWdkbUZ5SUdKc2FXNWtaWElnUFNCeUxuUnZVbVZrS0dKdUxtMXZiblFvY0hKcGRpNXRiMlIxYkhWektTbGNiaUFnTG5KbFpGQnZkeWh1WlhjZ1ltNG9jSEpwZGk1d2RXSnNhV05GZUhCdmJtVnVkQ2twTG1aeWIyMVNaV1FvS1R0Y2JpQWdjbVYwZFhKdUlIdGNiaUFnSUNCaWJHbHVaR1Z5T2lCaWJHbHVaR1Z5TEZ4dUlDQWdJSFZ1WW14cGJtUmxjanB5TG1sdWRtMG9jSEpwZGk1dGIyUjFiSFZ6S1Z4dUlDQjlPMXh1ZlZ4dVpuVnVZM1JwYjI0Z1kzSjBLRzF6Wnl3Z2NISnBkaWtnZTF4dUlDQjJZWElnWW14cGJtUnpJRDBnWW14cGJtUW9jSEpwZGlrN1hHNGdJSFpoY2lCc1pXNGdQU0J3Y21sMkxtMXZaSFZzZFhNdVlubDBaVXhsYm1kMGFDZ3BPMXh1SUNCMllYSWdiVzlrSUQwZ1ltNHViVzl1ZENod2NtbDJMbTF2WkhWc2RYTXBPMXh1SUNCMllYSWdZbXhwYm1SbFpDQTlJRzVsZHlCaWJpaHRjMmNwTG0xMWJDaGliR2x1WkhNdVlteHBibVJsY2lrdWJXOWtLSEJ5YVhZdWJXOWtkV3gxY3lrN1hHNGdJSFpoY2lCak1TQTlJR0pzYVc1a1pXUXVkRzlTWldRb1ltNHViVzl1ZENod2NtbDJMbkJ5YVcxbE1Ta3BPMXh1SUNCMllYSWdZeklnUFNCaWJHbHVaR1ZrTG5SdlVtVmtLR0p1TG0xdmJuUW9jSEpwZGk1d2NtbHRaVElwS1R0Y2JpQWdkbUZ5SUhGcGJuWWdQU0J3Y21sMkxtTnZaV1ptYVdOcFpXNTBPMXh1SUNCMllYSWdjQ0E5SUhCeWFYWXVjSEpwYldVeE8xeHVJQ0IyWVhJZ2NTQTlJSEJ5YVhZdWNISnBiV1V5TzF4dUlDQjJZWElnYlRFZ1BTQmpNUzV5WldSUWIzY29jSEpwZGk1bGVIQnZibVZ1ZERFcE8xeHVJQ0IyWVhJZ2JUSWdQU0JqTWk1eVpXUlFiM2NvY0hKcGRpNWxlSEJ2Ym1WdWRESXBPMXh1SUNCdE1TQTlJRzB4TG1aeWIyMVNaV1FvS1R0Y2JpQWdiVElnUFNCdE1pNW1jbTl0VW1Wa0tDazdYRzRnSUhaaGNpQm9JRDBnYlRFdWFYTjFZaWh0TWlrdWFXMTFiQ2h4YVc1MktTNXRiMlFvY0NrN1hHNGdJR2d1YVcxMWJDaHhLVHRjYmlBZ2JUSXVhV0ZrWkNob0tUdGNiaUFnZG1GeUlHOTFkQ0E5SUc1bGR5QkNkV1ptWlhJb2JUSXVhVzExYkNoaWJHbHVaSE11ZFc1aWJHbHVaR1Z5S1M1dGIyUW9jSEpwZGk1dGIyUjFiSFZ6S1M1MGIwRnljbUY1S0NrcE8xeHVJQ0JwWmlBb2IzVjBMbXhsYm1kMGFDQThJR3hsYmlrZ2UxeHVJQ0FnSUhaaGNpQndjbVZtYVhnZ1BTQnVaWGNnUW5WbVptVnlLR3hsYmlBdElHOTFkQzVzWlc1bmRHZ3BPMXh1SUNBZ0lIQnlaV1pwZUM1bWFXeHNLREFwTzF4dUlDQWdJRzkxZENBOUlFSjFabVpsY2k1amIyNWpZWFFvVzNCeVpXWnBlQ3dnYjNWMFhTd2diR1Z1S1R0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnYjNWME8xeHVmVnh1WTNKMExtZGxkSElnUFNCblpYUnlPMXh1Wm5WdVkzUnBiMjRnWjJWMGNpaHdjbWwyS1NCN1hHNGdJSFpoY2lCc1pXNGdQU0J3Y21sMkxtMXZaSFZzZFhNdVlubDBaVXhsYm1kMGFDZ3BPMXh1SUNCMllYSWdjaUE5SUc1bGR5QmliaWh5WVc1a2IyMUNlWFJsY3loc1pXNHBLVHRjYmlBZ2QyaHBiR1VnS0hJdVkyMXdLSEJ5YVhZdWJXOWtkV3gxY3lrZ1BqMGdJREFnZkh3Z0lYSXViVzlrS0hCeWFYWXVjSEpwYldVeEtTQjhmQ0FoY2k1dGIyUW9jSEpwZGk1d2NtbHRaVElwS1NCN1hHNGdJQ0FnY2lBOUlHNWxkeUJpYmloeVlXNWtiMjFDZVhSbGN5aHNaVzRwS1R0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnY2p0Y2JuMGlYWDA9IiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3J5cHRvID0gZ2xvYmFsLmNyeXB0byB8fCBnbG9iYWwubXNDcnlwdG9cbmlmKGNyeXB0byAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmFuZG9tQnl0ZXM7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IG9sZEJyb3dzZXI7XG59XG5mdW5jdGlvbiByYW5kb21CeXRlcyhzaXplLCBjYikge1xuICB2YXIgYnl0ZXMgPSBuZXcgQnVmZmVyKHNpemUpOyAvL2luIGJyb3dzZXJpZnksIHRoaXMgaXMgYW4gZXh0ZW5kZWQgVWludDhBcnJheVxuICAgIC8qIFRoaXMgd2lsbCBub3Qgd29yayBpbiBvbGRlciBicm93c2Vycy5cbiAgICAgKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL3dpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzXG4gICAgICovXG5cbiAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhieXRlcyk7XG4gIGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICBjYihudWxsLCBieXRlcyk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGJ5dGVzO1xufVxuZnVuY3Rpb24gb2xkQnJvd3NlcigpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ3NlY3VyZSByYW5kb20gbnVtYmVyIGdlbmVyYXRpb24gbm90IHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXJcXG4nK1xuICAgICAgJ3VzZSBjaHJvbWUsIEZpcmVGb3ggb3IgSW50ZXJuZXQgRXhwbG9yZXIgMTEnXG4gICAgKVxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZjbUZ1Wkc5dFlubDBaWE12WW5KdmQzTmxjaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNTJZWElnWTNKNWNIUnZJRDBnWjJ4dlltRnNMbU55ZVhCMGJ5QjhmQ0JuYkc5aVlXd3ViWE5EY25sd2RHOWNibWxtS0dOeWVYQjBieUFtSmlCamNubHdkRzh1WjJWMFVtRnVaRzl0Vm1Gc2RXVnpLU0I3WEc0Z0lHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtRnVaRzl0UW5sMFpYTTdYRzU5SUdWc2MyVWdlMXh1SUNCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUc5c1pFSnliM2R6WlhJN1hHNTlYRzVtZFc1amRHbHZiaUJ5WVc1a2IyMUNlWFJsY3loemFYcGxMQ0JqWWlrZ2UxeHVJQ0IyWVhJZ1lubDBaWE1nUFNCdVpYY2dRblZtWm1WeUtITnBlbVVwT3lBdkwybHVJR0p5YjNkelpYSnBabmtzSUhSb2FYTWdhWE1nWVc0Z1pYaDBaVzVrWldRZ1ZXbHVkRGhCY25KaGVWeHVJQ0FnSUM4cUlGUm9hWE1nZDJsc2JDQnViM1FnZDI5eWF5QnBiaUJ2YkdSbGNpQmljbTkzYzJWeWN5NWNiaUFnSUNBZ0tpQlRaV1VnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1Ylc5NmFXeHNZUzV2Y21jdlpXNHRWVk12Wkc5amN5OVhaV0l2UVZCSkwzZHBibVJ2ZHk1amNubHdkRzh1WjJWMFVtRnVaRzl0Vm1Gc2RXVnpYRzRnSUNBZ0lDb3ZYRzVjYmlBZ1kzSjVjSFJ2TG1kbGRGSmhibVJ2YlZaaGJIVmxjeWhpZVhSbGN5azdYRzRnSUdsbUlDaDBlWEJsYjJZZ1kySWdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNCeVpYUjFjbTRnY0hKdlkyVnpjeTV1WlhoMFZHbGpheWhtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNCallpaHVkV3hzTENCaWVYUmxjeWs3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNiaUFnY21WMGRYSnVJR0o1ZEdWek8xeHVmVnh1Wm5WdVkzUnBiMjRnYjJ4a1FuSnZkM05sY2lncElIdGNiaUFnZEdoeWIzY2dibVYzSUVWeWNtOXlLRnh1SUNBZ0lDQWdKM05sWTNWeVpTQnlZVzVrYjIwZ2JuVnRZbVZ5SUdkbGJtVnlZWFJwYjI0Z2JtOTBJSE4xY0hCdmNuUmxaQ0JpZVNCMGFHbHpJR0p5YjNkelpYSmNYRzRuSzF4dUlDQWdJQ0FnSjNWelpTQmphSEp2YldVc0lFWnBjbVZHYjNnZ2IzSWdTVzUwWlhKdVpYUWdSWGh3Ykc5eVpYSWdNVEVuWEc0Z0lDQWdLVnh1ZlZ4dUlsMTkiLCIoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuXG4ndXNlIHN0cmljdCc7XG5cbi8vIFV0aWxzXG5cbmZ1bmN0aW9uIGFzc2VydCh2YWwsIG1zZykge1xuICBpZiAoIXZhbClcbiAgICB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG59XG5cbi8vIENvdWxkIHVzZSBgaW5oZXJpdHNgIG1vZHVsZSwgYnV0IGRvbid0IHdhbnQgdG8gbW92ZSBmcm9tIHNpbmdsZSBmaWxlXG4vLyBhcmNoaXRlY3R1cmUgeWV0LlxuZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yO1xuICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fTtcbiAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZTtcbiAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKTtcbiAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yO1xufVxuXG4vLyBCTlxuXG5mdW5jdGlvbiBCTihudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAvLyBNYXkgYmUgYG5ldyBCTihibilgID9cbiAgaWYgKG51bWJlciAhPT0gbnVsbCAmJlxuICAgICAgdHlwZW9mIG51bWJlciA9PT0gJ29iamVjdCcgJiZcbiAgICAgIEFycmF5LmlzQXJyYXkobnVtYmVyLndvcmRzKSkge1xuICAgIHJldHVybiBudW1iZXI7XG4gIH1cblxuICB0aGlzLnNpZ24gPSBmYWxzZTtcbiAgdGhpcy53b3JkcyA9IG51bGw7XG4gIHRoaXMubGVuZ3RoID0gMDtcblxuICAvLyBSZWR1Y3Rpb24gY29udGV4dFxuICB0aGlzLnJlZCA9IG51bGw7XG5cbiAgaWYgKGJhc2UgPT09ICdsZScgfHwgYmFzZSA9PT0gJ2JlJykge1xuICAgIGVuZGlhbiA9IGJhc2U7XG4gICAgYmFzZSA9IDEwO1xuICB9XG5cbiAgaWYgKG51bWJlciAhPT0gbnVsbClcbiAgICB0aGlzLl9pbml0KG51bWJlciB8fCAwLCBiYXNlIHx8IDEwLCBlbmRpYW4gfHwgJ2JlJyk7XG59XG5pZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG4gIG1vZHVsZS5leHBvcnRzID0gQk47XG5lbHNlXG4gIGV4cG9ydHMuQk4gPSBCTjtcblxuQk4uQk4gPSBCTjtcbkJOLndvcmRTaXplID0gMjY7XG5cbkJOLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHRoaXMuX2luaXROdW1iZXIobnVtYmVyLCBiYXNlLCBlbmRpYW4pO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHRoaXMuX2luaXRBcnJheShudW1iZXIsIGJhc2UsIGVuZGlhbik7XG4gIH1cbiAgaWYgKGJhc2UgPT09ICdoZXgnKVxuICAgIGJhc2UgPSAxNjtcbiAgYXNzZXJ0KGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpO1xuXG4gIG51bWJlciA9IG51bWJlci50b1N0cmluZygpLnJlcGxhY2UoL1xccysvZywgJycpO1xuICB2YXIgc3RhcnQgPSAwO1xuICBpZiAobnVtYmVyWzBdID09PSAnLScpXG4gICAgc3RhcnQrKztcblxuICBpZiAoYmFzZSA9PT0gMTYpXG4gICAgdGhpcy5fcGFyc2VIZXgobnVtYmVyLCBzdGFydCk7XG4gIGVsc2VcbiAgICB0aGlzLl9wYXJzZUJhc2UobnVtYmVyLCBiYXNlLCBzdGFydCk7XG5cbiAgaWYgKG51bWJlclswXSA9PT0gJy0nKVxuICAgIHRoaXMuc2lnbiA9IHRydWU7XG5cbiAgdGhpcy5zdHJpcCgpO1xuXG4gIGlmIChlbmRpYW4gIT09ICdsZScpXG4gICAgcmV0dXJuO1xuXG4gIHRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSwgYmFzZSwgZW5kaWFuKTtcbn07XG5cbkJOLnByb3RvdHlwZS5faW5pdE51bWJlciA9IGZ1bmN0aW9uIF9pbml0TnVtYmVyKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gIGlmIChudW1iZXIgPCAwKSB7XG4gICAgdGhpcy5zaWduID0gdHJ1ZTtcbiAgICBudW1iZXIgPSAtbnVtYmVyO1xuICB9XG4gIGlmIChudW1iZXIgPCAweDQwMDAwMDApIHtcbiAgICB0aGlzLndvcmRzID0gWyBudW1iZXIgJiAweDNmZmZmZmYgXTtcbiAgICB0aGlzLmxlbmd0aCA9IDE7XG4gIH0gZWxzZSBpZiAobnVtYmVyIDwgMHgxMDAwMDAwMDAwMDAwMCkge1xuICAgIHRoaXMud29yZHMgPSBbXG4gICAgICBudW1iZXIgJiAweDNmZmZmZmYsXG4gICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZlxuICAgIF07XG4gICAgdGhpcy5sZW5ndGggPSAyO1xuICB9IGVsc2Uge1xuICAgIGFzc2VydChudW1iZXIgPCAweDIwMDAwMDAwMDAwMDAwKTsgLy8gMiBeIDUzICh1bnNhZmUpXG4gICAgdGhpcy53b3JkcyA9IFtcbiAgICAgIG51bWJlciAmIDB4M2ZmZmZmZixcbiAgICAgIChudW1iZXIgLyAweDQwMDAwMDApICYgMHgzZmZmZmZmLFxuICAgICAgMVxuICAgIF07XG4gICAgdGhpcy5sZW5ndGggPSAzO1xuICB9XG5cbiAgaWYgKGVuZGlhbiAhPT0gJ2xlJylcbiAgICByZXR1cm47XG5cbiAgLy8gUmV2ZXJzZSB0aGUgYnl0ZXNcbiAgdGhpcy5faW5pdEFycmF5KHRoaXMudG9BcnJheSgpLCBiYXNlLCBlbmRpYW4pO1xufTtcblxuQk4ucHJvdG90eXBlLl9pbml0QXJyYXkgPSBmdW5jdGlvbiBfaW5pdEFycmF5KG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gIC8vIFBlcmhhcHMgYSBVaW50OEFycmF5XG4gIGFzc2VydCh0eXBlb2YgbnVtYmVyLmxlbmd0aCA9PT0gJ251bWJlcicpO1xuICBpZiAobnVtYmVyLmxlbmd0aCA8PSAwKSB7XG4gICAgdGhpcy53b3JkcyA9IFsgMCBdO1xuICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHRoaXMubGVuZ3RoID0gTWF0aC5jZWlsKG51bWJlci5sZW5ndGggLyAzKTtcbiAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKylcbiAgICB0aGlzLndvcmRzW2ldID0gMDtcblxuICB2YXIgb2ZmID0gMDtcbiAgaWYgKGVuZGlhbiA9PT0gJ2JlJykge1xuICAgIGZvciAodmFyIGkgPSBudW1iZXIubGVuZ3RoIC0gMSwgaiA9IDA7IGkgPj0gMDsgaSAtPSAzKSB7XG4gICAgICB2YXIgdyA9IG51bWJlcltpXSB8IChudW1iZXJbaSAtIDFdIDw8IDgpIHwgKG51bWJlcltpIC0gMl0gPDwgMTYpO1xuICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICBvZmYgKz0gMjQ7XG4gICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgaisrO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChlbmRpYW4gPT09ICdsZScpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IDA7IGkgPCBudW1iZXIubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgIHZhciB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpICsgMV0gPDwgOCkgfCAobnVtYmVyW2kgKyAyXSA8PCAxNik7XG4gICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ogKyAxXSA9ICh3ID4+PiAoMjYgLSBvZmYpKSAmIDB4M2ZmZmZmZjtcbiAgICAgIG9mZiArPSAyNDtcbiAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICBqKys7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzLnN0cmlwKCk7XG59O1xuXG5mdW5jdGlvbiBwYXJzZUhleChzdHIsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHIgPSAwO1xuICB2YXIgbGVuID0gTWF0aC5taW4oc3RyLmxlbmd0aCwgZW5kKTtcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICByIDw8PSA0O1xuXG4gICAgLy8gJ2EnIC0gJ2YnXG4gICAgaWYgKGMgPj0gNDkgJiYgYyA8PSA1NClcbiAgICAgIHIgfD0gYyAtIDQ5ICsgMHhhO1xuXG4gICAgLy8gJ0EnIC0gJ0YnXG4gICAgZWxzZSBpZiAoYyA+PSAxNyAmJiBjIDw9IDIyKVxuICAgICAgciB8PSBjIC0gMTcgKyAweGE7XG5cbiAgICAvLyAnMCcgLSAnOSdcbiAgICBlbHNlXG4gICAgICByIHw9IGMgJiAweGY7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbkJOLnByb3RvdHlwZS5fcGFyc2VIZXggPSBmdW5jdGlvbiBfcGFyc2VIZXgobnVtYmVyLCBzdGFydCkge1xuICAvLyBDcmVhdGUgcG9zc2libHkgYmlnZ2VyIGFycmF5IHRvIGVuc3VyZSB0aGF0IGl0IGZpdHMgdGhlIG51bWJlclxuICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbCgobnVtYmVyLmxlbmd0aCAtIHN0YXJ0KSAvIDYpO1xuICB0aGlzLndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKVxuICAgIHRoaXMud29yZHNbaV0gPSAwO1xuXG4gIC8vIFNjYW4gMjQtYml0IGNodW5rcyBhbmQgYWRkIHRoZW0gdG8gdGhlIG51bWJlclxuICB2YXIgb2ZmID0gMDtcbiAgZm9yICh2YXIgaSA9IG51bWJlci5sZW5ndGggLSA2LCBqID0gMDsgaSA+PSBzdGFydDsgaSAtPSA2KSB7XG4gICAgdmFyIHcgPSBwYXJzZUhleChudW1iZXIsIGksIGkgKyA2KTtcbiAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgdGhpcy53b3Jkc1tqICsgMV0gfD0gdyA+Pj4gKDI2IC0gb2ZmKSAmIDB4M2ZmZmZmO1xuICAgIG9mZiArPSAyNDtcbiAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICBvZmYgLT0gMjY7XG4gICAgICBqKys7XG4gICAgfVxuICB9XG4gIGlmIChpICsgNiAhPT0gc3RhcnQpIHtcbiAgICB2YXIgdyA9IHBhcnNlSGV4KG51bWJlciwgc3RhcnQsIGkgKyA2KTtcbiAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgdGhpcy53b3Jkc1tqICsgMV0gfD0gdyA+Pj4gKDI2IC0gb2ZmKSAmIDB4M2ZmZmZmO1xuICB9XG4gIHRoaXMuc3RyaXAoKTtcbn07XG5cbmZ1bmN0aW9uIHBhcnNlQmFzZShzdHIsIHN0YXJ0LCBlbmQsIG11bCkge1xuICB2YXIgciA9IDA7XG4gIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSkgLSA0ODtcblxuICAgIHIgKj0gbXVsO1xuXG4gICAgLy8gJ2EnXG4gICAgaWYgKGMgPj0gNDkpXG4gICAgICByICs9IGMgLSA0OSArIDB4YTtcblxuICAgIC8vICdBJ1xuICAgIGVsc2UgaWYgKGMgPj0gMTcpXG4gICAgICByICs9IGMgLSAxNyArIDB4YTtcblxuICAgIC8vICcwJyAtICc5J1xuICAgIGVsc2VcbiAgICAgIHIgKz0gYztcbiAgfVxuICByZXR1cm4gcjtcbn1cblxuQk4ucHJvdG90eXBlLl9wYXJzZUJhc2UgPSBmdW5jdGlvbiBfcGFyc2VCYXNlKG51bWJlciwgYmFzZSwgc3RhcnQpIHtcbiAgLy8gSW5pdGlhbGl6ZSBhcyB6ZXJvXG4gIHRoaXMud29yZHMgPSBbIDAgXTtcbiAgdGhpcy5sZW5ndGggPSAxO1xuXG4gIC8vIEZpbmQgbGVuZ3RoIG9mIGxpbWIgaW4gYmFzZVxuICBmb3IgKHZhciBsaW1iTGVuID0gMCwgbGltYlBvdyA9IDE7IGxpbWJQb3cgPD0gMHgzZmZmZmZmOyBsaW1iUG93ICo9IGJhc2UpXG4gICAgbGltYkxlbisrO1xuICBsaW1iTGVuLS07XG4gIGxpbWJQb3cgPSAobGltYlBvdyAvIGJhc2UpIHwgMDtcblxuICB2YXIgdG90YWwgPSBudW1iZXIubGVuZ3RoIC0gc3RhcnQ7XG4gIHZhciBtb2QgPSB0b3RhbCAlIGxpbWJMZW47XG4gIHZhciBlbmQgPSBNYXRoLm1pbih0b3RhbCwgdG90YWwgLSBtb2QpICsgc3RhcnQ7XG5cbiAgdmFyIHdvcmQgPSAwO1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gbGltYkxlbikge1xuICAgIHdvcmQgPSBwYXJzZUJhc2UobnVtYmVyLCBpLCBpICsgbGltYkxlbiwgYmFzZSk7XG5cbiAgICB0aGlzLmltdWxuKGxpbWJQb3cpO1xuICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMClcbiAgICAgIHRoaXMud29yZHNbMF0gKz0gd29yZDtcbiAgICBlbHNlXG4gICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgfVxuXG4gIGlmIChtb2QgIT09IDApIHtcbiAgICB2YXIgcG93ID0gMTtcbiAgICB2YXIgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIG51bWJlci5sZW5ndGgsIGJhc2UpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtb2Q7IGkrKylcbiAgICAgIHBvdyAqPSBiYXNlO1xuICAgIHRoaXMuaW11bG4ocG93KTtcbiAgICBpZiAodGhpcy53b3Jkc1swXSArIHdvcmQgPCAweDQwMDAwMDApXG4gICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgZWxzZVxuICAgICAgdGhpcy5faWFkZG4od29yZCk7XG4gIH1cbn07XG5cbkJOLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weShkZXN0KSB7XG4gIGRlc3Qud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspXG4gICAgZGVzdC53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV07XG4gIGRlc3QubGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gIGRlc3Quc2lnbiA9IHRoaXMuc2lnbjtcbiAgZGVzdC5yZWQgPSB0aGlzLnJlZDtcbn07XG5cbkJOLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lKCkge1xuICB2YXIgciA9IG5ldyBCTihudWxsKTtcbiAgdGhpcy5jb3B5KHIpO1xuICByZXR1cm4gcjtcbn07XG5cbi8vIFJlbW92ZSBsZWFkaW5nIGAwYCBmcm9tIGB0aGlzYFxuQk4ucHJvdG90eXBlLnN0cmlwID0gZnVuY3Rpb24gc3RyaXAoKSB7XG4gIHdoaWxlICh0aGlzLmxlbmd0aCA+IDEgJiYgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdID09PSAwKVxuICAgIHRoaXMubGVuZ3RoLS07XG4gIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xufTtcblxuQk4ucHJvdG90eXBlLl9ub3JtU2lnbiA9IGZ1bmN0aW9uIF9ub3JtU2lnbigpIHtcbiAgLy8gLTAgPSAwXG4gIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwKVxuICAgIHRoaXMuc2lnbiA9IGZhbHNlO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkJOLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgcmV0dXJuICh0aGlzLnJlZCA/ICc8Qk4tUjogJyA6ICc8Qk46ICcpICsgdGhpcy50b1N0cmluZygxNikgKyAnPic7XG59O1xuXG4vKlxuXG52YXIgemVyb3MgPSBbXTtcbnZhciBncm91cFNpemVzID0gW107XG52YXIgZ3JvdXBCYXNlcyA9IFtdO1xuXG52YXIgcyA9ICcnO1xudmFyIGkgPSAtMTtcbndoaWxlICgrK2kgPCBCTi53b3JkU2l6ZSkge1xuICB6ZXJvc1tpXSA9IHM7XG4gIHMgKz0gJzAnO1xufVxuZ3JvdXBTaXplc1swXSA9IDA7XG5ncm91cFNpemVzWzFdID0gMDtcbmdyb3VwQmFzZXNbMF0gPSAwO1xuZ3JvdXBCYXNlc1sxXSA9IDA7XG52YXIgYmFzZSA9IDIgLSAxO1xud2hpbGUgKCsrYmFzZSA8IDM2ICsgMSkge1xuICB2YXIgZ3JvdXBTaXplID0gMDtcbiAgdmFyIGdyb3VwQmFzZSA9IDE7XG4gIHdoaWxlIChncm91cEJhc2UgPCAoMSA8PCBCTi53b3JkU2l6ZSkgLyBiYXNlKSB7XG4gICAgZ3JvdXBCYXNlICo9IGJhc2U7XG4gICAgZ3JvdXBTaXplICs9IDE7XG4gIH1cbiAgZ3JvdXBTaXplc1tiYXNlXSA9IGdyb3VwU2l6ZTtcbiAgZ3JvdXBCYXNlc1tiYXNlXSA9IGdyb3VwQmFzZTtcbn1cblxuKi9cblxudmFyIHplcm9zID0gW1xuICAnJyxcbiAgJzAnLFxuICAnMDAnLFxuICAnMDAwJyxcbiAgJzAwMDAnLFxuICAnMDAwMDAnLFxuICAnMDAwMDAwJyxcbiAgJzAwMDAwMDAnLFxuICAnMDAwMDAwMDAnLFxuICAnMDAwMDAwMDAwJyxcbiAgJzAwMDAwMDAwMDAnLFxuICAnMDAwMDAwMDAwMDAnLFxuICAnMDAwMDAwMDAwMDAwJyxcbiAgJzAwMDAwMDAwMDAwMDAnLFxuICAnMDAwMDAwMDAwMDAwMDAnLFxuICAnMDAwMDAwMDAwMDAwMDAwJyxcbiAgJzAwMDAwMDAwMDAwMDAwMDAnLFxuICAnMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAnMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgJzAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnXG5dO1xuXG52YXIgZ3JvdXBTaXplcyA9IFtcbiAgMCwgMCxcbiAgMjUsIDE2LCAxMiwgMTEsIDEwLCA5LCA4LFxuICA4LCA3LCA3LCA3LCA3LCA2LCA2LFxuICA2LCA2LCA2LCA2LCA2LCA1LCA1LFxuICA1LCA1LCA1LCA1LCA1LCA1LCA1LFxuICA1LCA1LCA1LCA1LCA1LCA1LCA1XG5dO1xuXG52YXIgZ3JvdXBCYXNlcyA9IFtcbiAgMCwgMCxcbiAgMzM1NTQ0MzIsIDQzMDQ2NzIxLCAxNjc3NzIxNiwgNDg4MjgxMjUsIDYwNDY2MTc2LCA0MDM1MzYwNywgMTY3NzcyMTYsXG4gIDQzMDQ2NzIxLCAxMDAwMDAwMCwgMTk0ODcxNzEsIDM1ODMxODA4LCA2Mjc0ODUxNywgNzUyOTUzNiwgMTEzOTA2MjUsXG4gIDE2Nzc3MjE2LCAyNDEzNzU2OSwgMzQwMTIyMjQsIDQ3MDQ1ODgxLCA2NDAwMDAwMCwgNDA4NDEwMSwgNTE1MzYzMixcbiAgNjQzNjM0MywgNzk2MjYyNCwgOTc2NTYyNSwgMTE4ODEzNzYsIDE0MzQ4OTA3LCAxNzIxMDM2OCwgMjA1MTExNDksXG4gIDI0MzAwMDAwLCAyODYyOTE1MSwgMzM1NTQ0MzIsIDM5MTM1MzkzLCA0NTQzNTQyNCwgNTI1MjE4NzUsIDYwNDY2MTc2XG5dO1xuXG5CTi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhiYXNlLCBwYWRkaW5nKSB7XG4gIGJhc2UgPSBiYXNlIHx8IDEwO1xuICBpZiAoYmFzZSA9PT0gMTYgfHwgYmFzZSA9PT0gJ2hleCcpIHtcbiAgICB2YXIgb3V0ID0gJyc7XG4gICAgdmFyIG9mZiA9IDA7XG4gICAgdmFyIHBhZGRpbmcgPSBwYWRkaW5nIHwgMCB8fCAxO1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IHRoaXMud29yZHNbaV07XG4gICAgICB2YXIgd29yZCA9ICgoKHcgPDwgb2ZmKSB8IGNhcnJ5KSAmIDB4ZmZmZmZmKS50b1N0cmluZygxNik7XG4gICAgICBjYXJyeSA9ICh3ID4+PiAoMjQgLSBvZmYpKSAmIDB4ZmZmZmZmO1xuICAgICAgaWYgKGNhcnJ5ICE9PSAwIHx8IGkgIT09IHRoaXMubGVuZ3RoIC0gMSlcbiAgICAgICAgb3V0ID0gemVyb3NbNiAtIHdvcmQubGVuZ3RoXSArIHdvcmQgKyBvdXQ7XG4gICAgICBlbHNlXG4gICAgICAgIG91dCA9IHdvcmQgKyBvdXQ7XG4gICAgICBvZmYgKz0gMjtcbiAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICBpLS07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMClcbiAgICAgIG91dCA9IGNhcnJ5LnRvU3RyaW5nKDE2KSArIG91dDtcbiAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApXG4gICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgaWYgKHRoaXMuc2lnbilcbiAgICAgIG91dCA9ICctJyArIG91dDtcbiAgICByZXR1cm4gb3V0O1xuICB9IGVsc2UgaWYgKGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpIHtcbiAgICAvLyB2YXIgZ3JvdXBTaXplID0gTWF0aC5mbG9vcihCTi53b3JkU2l6ZSAqIE1hdGguTE4yIC8gTWF0aC5sb2coYmFzZSkpO1xuICAgIHZhciBncm91cFNpemUgPSBncm91cFNpemVzW2Jhc2VdO1xuICAgIC8vIHZhciBncm91cEJhc2UgPSBNYXRoLnBvdyhiYXNlLCBncm91cFNpemUpO1xuICAgIHZhciBncm91cEJhc2UgPSBncm91cEJhc2VzW2Jhc2VdO1xuICAgIHZhciBvdXQgPSAnJztcbiAgICB2YXIgYyA9IHRoaXMuY2xvbmUoKTtcbiAgICBjLnNpZ24gPSBmYWxzZTtcbiAgICB3aGlsZSAoYy5jbXBuKDApICE9PSAwKSB7XG4gICAgICB2YXIgciA9IGMubW9kbihncm91cEJhc2UpLnRvU3RyaW5nKGJhc2UpO1xuICAgICAgYyA9IGMuaWRpdm4oZ3JvdXBCYXNlKTtcblxuICAgICAgaWYgKGMuY21wbigwKSAhPT0gMClcbiAgICAgICAgb3V0ID0gemVyb3NbZ3JvdXBTaXplIC0gci5sZW5ndGhdICsgciArIG91dDtcbiAgICAgIGVsc2VcbiAgICAgICAgb3V0ID0gciArIG91dDtcbiAgICB9XG4gICAgaWYgKHRoaXMuY21wbigwKSA9PT0gMClcbiAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICBpZiAodGhpcy5zaWduKVxuICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgIHJldHVybiBvdXQ7XG4gIH0gZWxzZSB7XG4gICAgYXNzZXJ0KGZhbHNlLCAnQmFzZSBzaG91bGQgYmUgYmV0d2VlbiAyIGFuZCAzNicpO1xuICB9XG59O1xuXG5CTi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICByZXR1cm4gdGhpcy50b1N0cmluZygxNik7XG59O1xuXG5CTi5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkoZW5kaWFuKSB7XG4gIHRoaXMuc3RyaXAoKTtcbiAgdmFyIHJlcyA9IG5ldyBBcnJheSh0aGlzLmJ5dGVMZW5ndGgoKSk7XG4gIHJlc1swXSA9IDA7XG5cbiAgdmFyIHEgPSB0aGlzLmNsb25lKCk7XG4gIGlmIChlbmRpYW4gIT09ICdsZScpIHtcbiAgICAvLyBBc3N1bWUgYmlnLWVuZGlhblxuICAgIGZvciAodmFyIGkgPSAwOyBxLmNtcG4oMCkgIT09IDA7IGkrKykge1xuICAgICAgdmFyIGIgPSBxLmFuZGxuKDB4ZmYpO1xuICAgICAgcS5pc2hybig4KTtcblxuICAgICAgcmVzW3Jlcy5sZW5ndGggLSBpIC0gMV0gPSBiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBBc3N1bWUgbGl0dGxlLWVuZGlhblxuICAgIGZvciAodmFyIGkgPSAwOyBxLmNtcG4oMCkgIT09IDA7IGkrKykge1xuICAgICAgdmFyIGIgPSBxLmFuZGxuKDB4ZmYpO1xuICAgICAgcS5pc2hybig4KTtcblxuICAgICAgcmVzW2ldID0gYjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcblxuaWYgKE1hdGguY2x6MzIpIHtcbiAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzKHcpIHtcbiAgICByZXR1cm4gMzIgLSBNYXRoLmNsejMyKHcpO1xuICB9O1xufSBlbHNlIHtcbiAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzKHcpIHtcbiAgICB2YXIgdCA9IHc7XG4gICAgdmFyIHIgPSAwO1xuICAgIGlmICh0ID49IDB4MTAwMCkge1xuICAgICAgciArPSAxMztcbiAgICAgIHQgPj4+PSAxMztcbiAgICB9XG4gICAgaWYgKHQgPj0gMHg0MCkge1xuICAgICAgciArPSA3O1xuICAgICAgdCA+Pj49IDc7XG4gICAgfVxuICAgIGlmICh0ID49IDB4OCkge1xuICAgICAgciArPSA0O1xuICAgICAgdCA+Pj49IDQ7XG4gICAgfVxuICAgIGlmICh0ID49IDB4MDIpIHtcbiAgICAgIHIgKz0gMjtcbiAgICAgIHQgPj4+PSAyO1xuICAgIH1cbiAgICByZXR1cm4gciArIHQ7XG4gIH07XG59XG5cbkJOLnByb3RvdHlwZS5femVyb0JpdHMgPSBmdW5jdGlvbiBfemVyb0JpdHModykge1xuICAvLyBTaG9ydC1jdXRcbiAgaWYgKHcgPT09IDApXG4gICAgcmV0dXJuIDI2O1xuXG4gIHZhciB0ID0gdztcbiAgdmFyIHIgPSAwO1xuICBpZiAoKHQgJiAweDFmZmYpID09PSAwKSB7XG4gICAgciArPSAxMztcbiAgICB0ID4+Pj0gMTM7XG4gIH1cbiAgaWYgKCh0ICYgMHg3ZikgPT09IDApIHtcbiAgICByICs9IDc7XG4gICAgdCA+Pj49IDc7XG4gIH1cbiAgaWYgKCh0ICYgMHhmKSA9PT0gMCkge1xuICAgIHIgKz0gNDtcbiAgICB0ID4+Pj0gNDtcbiAgfVxuICBpZiAoKHQgJiAweDMpID09PSAwKSB7XG4gICAgciArPSAyO1xuICAgIHQgPj4+PSAyO1xuICB9XG4gIGlmICgodCAmIDB4MSkgPT09IDApXG4gICAgcisrO1xuICByZXR1cm4gcjtcbn07XG5cbi8vIFJldHVybiBudW1iZXIgb2YgdXNlZCBiaXRzIGluIGEgQk5cbkJOLnByb3RvdHlwZS5iaXRMZW5ndGggPSBmdW5jdGlvbiBiaXRMZW5ndGgoKSB7XG4gIHZhciBoaSA9IDA7XG4gIHZhciB3ID0gdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdO1xuICB2YXIgaGkgPSB0aGlzLl9jb3VudEJpdHModyk7XG4gIHJldHVybiAodGhpcy5sZW5ndGggLSAxKSAqIDI2ICsgaGk7XG59O1xuXG4vLyBOdW1iZXIgb2YgdHJhaWxpbmcgemVybyBiaXRzXG5CTi5wcm90b3R5cGUuemVyb0JpdHMgPSBmdW5jdGlvbiB6ZXJvQml0cygpIHtcbiAgaWYgKHRoaXMuY21wbigwKSA9PT0gMClcbiAgICByZXR1cm4gMDtcblxuICB2YXIgciA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBiID0gdGhpcy5femVyb0JpdHModGhpcy53b3Jkc1tpXSk7XG4gICAgciArPSBiO1xuICAgIGlmIChiICE9PSAyNilcbiAgICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiByO1xufTtcblxuQk4ucHJvdG90eXBlLmJ5dGVMZW5ndGggPSBmdW5jdGlvbiBieXRlTGVuZ3RoKCkge1xuICByZXR1cm4gTWF0aC5jZWlsKHRoaXMuYml0TGVuZ3RoKCkgLyA4KTtcbn07XG5cbi8vIFJldHVybiBuZWdhdGl2ZSBjbG9uZSBvZiBgdGhpc2BcbkJOLnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcoKSB7XG4gIGlmICh0aGlzLmNtcG4oMCkgPT09IDApXG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcblxuICB2YXIgciA9IHRoaXMuY2xvbmUoKTtcbiAgci5zaWduID0gIXRoaXMuc2lnbjtcbiAgcmV0dXJuIHI7XG59O1xuXG5cbi8vIE9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG5CTi5wcm90b3R5cGUuaW9yID0gZnVuY3Rpb24gaW9yKG51bSkge1xuICB0aGlzLnNpZ24gPSB0aGlzLnNpZ24gfHwgbnVtLnNpZ247XG5cbiAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aClcbiAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoKytdID0gMDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKylcbiAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSB8IG51bS53b3Jkc1tpXTtcblxuICByZXR1cm4gdGhpcy5zdHJpcCgpO1xufTtcblxuXG4vLyBPciBgbnVtYCB3aXRoIGB0aGlzYFxuQk4ucHJvdG90eXBlLm9yID0gZnVuY3Rpb24gb3IobnVtKSB7XG4gIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpXG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pb3IobnVtKTtcbiAgZWxzZVxuICAgIHJldHVybiBudW0uY2xvbmUoKS5pb3IodGhpcyk7XG59O1xuXG5cbi8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuQk4ucHJvdG90eXBlLmlhbmQgPSBmdW5jdGlvbiBpYW5kKG51bSkge1xuICB0aGlzLnNpZ24gPSB0aGlzLnNpZ24gJiYgbnVtLnNpZ247XG5cbiAgLy8gYiA9IG1pbi1sZW5ndGgobnVtLCB0aGlzKVxuICB2YXIgYjtcbiAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aClcbiAgICBiID0gbnVtO1xuICBlbHNlXG4gICAgYiA9IHRoaXM7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKVxuICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldICYgbnVtLndvcmRzW2ldO1xuXG4gIHRoaXMubGVuZ3RoID0gYi5sZW5ndGg7XG5cbiAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbn07XG5cblxuLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgXG5CTi5wcm90b3R5cGUuYW5kID0gZnVuY3Rpb24gYW5kKG51bSkge1xuICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKVxuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWFuZChudW0pO1xuICBlbHNlXG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLmlhbmQodGhpcyk7XG59O1xuXG5cbi8vIFhvciBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuQk4ucHJvdG90eXBlLml4b3IgPSBmdW5jdGlvbiBpeG9yKG51bSkge1xuICB0aGlzLnNpZ24gPSB0aGlzLnNpZ24gfHwgbnVtLnNpZ247XG5cbiAgLy8gYS5sZW5ndGggPiBiLmxlbmd0aFxuICB2YXIgYTtcbiAgdmFyIGI7XG4gIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICBhID0gdGhpcztcbiAgICBiID0gbnVtO1xuICB9IGVsc2Uge1xuICAgIGEgPSBudW07XG4gICAgYiA9IHRoaXM7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspXG4gICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV0gXiBiLndvcmRzW2ldO1xuXG4gIGlmICh0aGlzICE9PSBhKVxuICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKylcbiAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuXG4gIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG5cbiAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbn07XG5cblxuLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgXG5CTi5wcm90b3R5cGUueG9yID0gZnVuY3Rpb24geG9yKG51bSkge1xuICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKVxuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXhvcihudW0pO1xuICBlbHNlXG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml4b3IodGhpcyk7XG59O1xuXG5cbi8vIFNldCBgYml0YCBvZiBgdGhpc2BcbkJOLnByb3RvdHlwZS5zZXRuID0gZnVuY3Rpb24gc2V0bihiaXQsIHZhbCkge1xuICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicgJiYgYml0ID49IDApO1xuXG4gIHZhciBvZmYgPSAoYml0IC8gMjYpIHwgMDtcbiAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICB3aGlsZSAodGhpcy5sZW5ndGggPD0gb2ZmKVxuICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuXG4gIGlmICh2YWwpXG4gICAgdGhpcy53b3Jkc1tvZmZdID0gdGhpcy53b3Jkc1tvZmZdIHwgKDEgPDwgd2JpdCk7XG4gIGVsc2VcbiAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gJiB+KDEgPDwgd2JpdCk7XG5cbiAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbn07XG5cblxuLy8gQWRkIGBudW1gIHRvIGB0aGlzYCBpbi1wbGFjZVxuQk4ucHJvdG90eXBlLmlhZGQgPSBmdW5jdGlvbiBpYWRkKG51bSkge1xuICAvLyBuZWdhdGl2ZSArIHBvc2l0aXZlXG4gIGlmICh0aGlzLnNpZ24gJiYgIW51bS5zaWduKSB7XG4gICAgdGhpcy5zaWduID0gZmFsc2U7XG4gICAgdmFyIHIgPSB0aGlzLmlzdWIobnVtKTtcbiAgICB0aGlzLnNpZ24gPSAhdGhpcy5zaWduO1xuICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuXG4gIC8vIHBvc2l0aXZlICsgbmVnYXRpdmVcbiAgfSBlbHNlIGlmICghdGhpcy5zaWduICYmIG51bS5zaWduKSB7XG4gICAgbnVtLnNpZ24gPSBmYWxzZTtcbiAgICB2YXIgciA9IHRoaXMuaXN1YihudW0pO1xuICAgIG51bS5zaWduID0gdHJ1ZTtcbiAgICByZXR1cm4gci5fbm9ybVNpZ24oKTtcbiAgfVxuXG4gIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgdmFyIGE7XG4gIHZhciBiO1xuICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgYSA9IHRoaXM7XG4gICAgYiA9IG51bTtcbiAgfSBlbHNlIHtcbiAgICBhID0gbnVtO1xuICAgIGIgPSB0aGlzO1xuICB9XG5cbiAgdmFyIGNhcnJ5ID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHIgPSBhLndvcmRzW2ldICsgYi53b3Jkc1tpXSArIGNhcnJ5O1xuICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgIGNhcnJ5ID0gciA+Pj4gMjY7XG4gIH1cbiAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHIgPSBhLndvcmRzW2ldICsgY2Fycnk7XG4gICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgY2FycnkgPSByID4+PiAyNjtcbiAgfVxuXG4gIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG4gIGlmIChjYXJyeSAhPT0gMCkge1xuICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGhdID0gY2Fycnk7XG4gICAgdGhpcy5sZW5ndGgrKztcbiAgLy8gQ29weSB0aGUgcmVzdCBvZiB0aGUgd29yZHNcbiAgfSBlbHNlIGlmIChhICE9PSB0aGlzKSB7XG4gICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKVxuICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIEFkZCBgbnVtYCB0byBgdGhpc2BcbkJOLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQobnVtKSB7XG4gIGlmIChudW0uc2lnbiAmJiAhdGhpcy5zaWduKSB7XG4gICAgbnVtLnNpZ24gPSBmYWxzZTtcbiAgICB2YXIgcmVzID0gdGhpcy5zdWIobnVtKTtcbiAgICBudW0uc2lnbiA9IHRydWU7XG4gICAgcmV0dXJuIHJlcztcbiAgfSBlbHNlIGlmICghbnVtLnNpZ24gJiYgdGhpcy5zaWduKSB7XG4gICAgdGhpcy5zaWduID0gZmFsc2U7XG4gICAgdmFyIHJlcyA9IG51bS5zdWIodGhpcyk7XG4gICAgdGhpcy5zaWduID0gdHJ1ZTtcbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aClcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGQobnVtKTtcbiAgZWxzZVxuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYWRkKHRoaXMpO1xufTtcblxuLy8gU3VidHJhY3QgYG51bWAgZnJvbSBgdGhpc2AgaW4tcGxhY2VcbkJOLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YihudW0pIHtcbiAgLy8gdGhpcyAtICgtbnVtKSA9IHRoaXMgKyBudW1cbiAgaWYgKG51bS5zaWduKSB7XG4gICAgbnVtLnNpZ24gPSBmYWxzZTtcbiAgICB2YXIgciA9IHRoaXMuaWFkZChudW0pO1xuICAgIG51bS5zaWduID0gdHJ1ZTtcbiAgICByZXR1cm4gci5fbm9ybVNpZ24oKTtcblxuICAvLyAtdGhpcyAtIG51bSA9IC0odGhpcyArIG51bSlcbiAgfSBlbHNlIGlmICh0aGlzLnNpZ24pIHtcbiAgICB0aGlzLnNpZ24gPSBmYWxzZTtcbiAgICB0aGlzLmlhZGQobnVtKTtcbiAgICB0aGlzLnNpZ24gPSB0cnVlO1xuICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICB9XG5cbiAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlXG4gIHZhciBjbXAgPSB0aGlzLmNtcChudW0pO1xuXG4gIC8vIE9wdGltaXphdGlvbiAtIHplcm9pZnlcbiAgaWYgKGNtcCA9PT0gMCkge1xuICAgIHRoaXMuc2lnbiA9IGZhbHNlO1xuICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIGEgPiBiXG4gIHZhciBhO1xuICB2YXIgYjtcbiAgaWYgKGNtcCA+IDApIHtcbiAgICBhID0gdGhpcztcbiAgICBiID0gbnVtO1xuICB9IGVsc2Uge1xuICAgIGEgPSBudW07XG4gICAgYiA9IHRoaXM7XG4gIH1cblxuICB2YXIgY2FycnkgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgciA9IGEud29yZHNbaV0gLSBiLndvcmRzW2ldICsgY2Fycnk7XG4gICAgY2FycnkgPSByID4+IDI2O1xuICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICB9XG4gIGZvciAoOyBjYXJyeSAhPT0gMCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgIHZhciByID0gYS53b3Jkc1tpXSArIGNhcnJ5O1xuICAgIGNhcnJ5ID0gciA+PiAyNjtcbiAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgfVxuXG4gIC8vIENvcHkgcmVzdCBvZiB0aGUgd29yZHNcbiAgaWYgKGNhcnJ5ID09PSAwICYmIGkgPCBhLmxlbmd0aCAmJiBhICE9PSB0aGlzKVxuICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKylcbiAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICB0aGlzLmxlbmd0aCA9IE1hdGgubWF4KHRoaXMubGVuZ3RoLCBpKTtcblxuICBpZiAoYSAhPT0gdGhpcylcbiAgICB0aGlzLnNpZ24gPSB0cnVlO1xuXG4gIHJldHVybiB0aGlzLnN0cmlwKCk7XG59O1xuXG4vLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYFxuQk4ucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YihudW0pIHtcbiAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3ViKG51bSk7XG59O1xuXG4vKlxuLy8gTk9URTogVGhpcyBjb3VsZCBiZSBwb3RlbnRpb25hbGx5IHVzZWQgdG8gZ2VuZXJhdGUgbG9vcC1sZXNzIG11bHRpcGxpY2F0aW9uc1xuZnVuY3Rpb24gX2dlbkNvbWJNdWxUbyhhbGVuLCBibGVuKSB7XG4gIHZhciBsZW4gPSBhbGVuICsgYmxlbiAtIDE7XG4gIHZhciBzcmMgPSBbXG4gICAgJ3ZhciBhID0gdGhpcy53b3JkcywgYiA9IG51bS53b3JkcywgbyA9IG91dC53b3JkcywgYyA9IDAsIHcsICcgK1xuICAgICAgICAnbWFzayA9IDB4M2ZmZmZmZiwgc2hpZnQgPSAweDQwMDAwMDA7JyxcbiAgICAnb3V0Lmxlbmd0aCA9ICcgKyBsZW4gKyAnOydcbiAgXTtcbiAgZm9yICh2YXIgayA9IDA7IGsgPCBsZW47IGsrKykge1xuICAgIHZhciBtaW5KID0gTWF0aC5tYXgoMCwgayAtIGFsZW4gKyAxKTtcbiAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIGJsZW4gLSAxKTtcblxuICAgIGZvciAodmFyIGogPSBtaW5KOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgdmFyIGkgPSBrIC0gajtcbiAgICAgIHZhciBtdWwgPSAnYVsnICsgaSArICddICogYlsnICsgaiArICddJztcblxuICAgICAgaWYgKGogPT09IG1pbkopIHtcbiAgICAgICAgc3JjLnB1c2goJ3cgPSAnICsgbXVsICsgJyArIGM7Jyk7XG4gICAgICAgIHNyYy5wdXNoKCdjID0gKHcgLyBzaGlmdCkgfCAwOycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3JjLnB1c2goJ3cgKz0gJyArIG11bCArICc7Jyk7XG4gICAgICAgIHNyYy5wdXNoKCdjICs9ICh3IC8gc2hpZnQpIHwgMDsnKTtcbiAgICAgIH1cbiAgICAgIHNyYy5wdXNoKCd3ICY9IG1hc2s7Jyk7XG4gICAgfVxuICAgIHNyYy5wdXNoKCdvWycgKyBrICsgJ10gPSB3OycpO1xuICB9XG4gIHNyYy5wdXNoKCdpZiAoYyAhPT0gMCkgeycsXG4gICAgICAgICAgICcgIG9bJyArIGsgKyAnXSA9IGM7JyxcbiAgICAgICAgICAgJyAgb3V0Lmxlbmd0aCsrOycsXG4gICAgICAgICAgICd9JyxcbiAgICAgICAgICAgJ3JldHVybiBvdXQ7Jyk7XG5cbiAgcmV0dXJuIHNyYy5qb2luKCdcXG4nKTtcbn1cbiovXG5cbkJOLnByb3RvdHlwZS5fc21hbGxNdWxUbyA9IGZ1bmN0aW9uIF9zbWFsbE11bFRvKG51bSwgb3V0KSB7XG4gIG91dC5zaWduID0gbnVtLnNpZ24gIT09IHRoaXMuc2lnbjtcbiAgb3V0Lmxlbmd0aCA9IHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aDtcblxuICB2YXIgY2FycnkgPSAwO1xuICBmb3IgKHZhciBrID0gMDsgayA8IG91dC5sZW5ndGggLSAxOyBrKyspIHtcbiAgICAvLyBTdW0gYWxsIHdvcmRzIHdpdGggdGhlIHNhbWUgYGkgKyBqID0ga2AgYW5kIGFjY3VtdWxhdGUgYG5jYXJyeWAsXG4gICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICB2YXIgbmNhcnJ5ID0gY2FycnkgPj4+IDI2O1xuICAgIHZhciByd29yZCA9IGNhcnJ5ICYgMHgzZmZmZmZmO1xuICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gdGhpcy5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgIHZhciBpID0gayAtIGo7XG4gICAgICB2YXIgYSA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdmFyIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgdmFyIHIgPSBhICogYjtcblxuICAgICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAoKHIgLyAweDQwMDAwMDApIHwgMCkpIHwgMDtcbiAgICAgIGxvID0gKGxvICsgcndvcmQpIHwgMDtcbiAgICAgIHJ3b3JkID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICBuY2FycnkgPSAobmNhcnJ5ICsgKGxvID4+PiAyNikpIHwgMDtcbiAgICB9XG4gICAgb3V0LndvcmRzW2tdID0gcndvcmQ7XG4gICAgY2FycnkgPSBuY2Fycnk7XG4gIH1cbiAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgb3V0LndvcmRzW2tdID0gY2Fycnk7XG4gIH0gZWxzZSB7XG4gICAgb3V0Lmxlbmd0aC0tO1xuICB9XG5cbiAgcmV0dXJuIG91dC5zdHJpcCgpO1xufTtcblxuQk4ucHJvdG90eXBlLl9iaWdNdWxUbyA9IGZ1bmN0aW9uIF9iaWdNdWxUbyhudW0sIG91dCkge1xuICBvdXQuc2lnbiA9IG51bS5zaWduICE9PSB0aGlzLnNpZ247XG4gIG91dC5sZW5ndGggPSB0aGlzLmxlbmd0aCArIG51bS5sZW5ndGg7XG5cbiAgdmFyIGNhcnJ5ID0gMDtcbiAgdmFyIGhuY2FycnkgPSAwO1xuICBmb3IgKHZhciBrID0gMDsgayA8IG91dC5sZW5ndGggLSAxOyBrKyspIHtcbiAgICAvLyBTdW0gYWxsIHdvcmRzIHdpdGggdGhlIHNhbWUgYGkgKyBqID0ga2AgYW5kIGFjY3VtdWxhdGUgYG5jYXJyeWAsXG4gICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICB2YXIgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICBobmNhcnJ5ID0gMDtcbiAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICBmb3IgKHZhciBqID0gTWF0aC5tYXgoMCwgayAtIHRoaXMubGVuZ3RoICsgMSk7IGogPD0gbWF4SjsgaisrKSB7XG4gICAgICB2YXIgaSA9IGsgLSBqO1xuICAgICAgdmFyIGEgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHZhciBiID0gbnVtLndvcmRzW2pdIHwgMDtcbiAgICAgIHZhciByID0gYSAqIGI7XG5cbiAgICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgICBuY2FycnkgPSAobmNhcnJ5ICsgKChyIC8gMHg0MDAwMDAwKSB8IDApKSB8IDA7XG4gICAgICBsbyA9IChsbyArIHJ3b3JkKSB8IDA7XG4gICAgICByd29yZCA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgbmNhcnJ5ID0gKG5jYXJyeSArIChsbyA+Pj4gMjYpKSB8IDA7XG5cbiAgICAgIGhuY2FycnkgKz0gbmNhcnJ5ID4+PiAyNjtcbiAgICAgIG5jYXJyeSAmPSAweDNmZmZmZmY7XG4gICAgfVxuICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkO1xuICAgIGNhcnJ5ID0gbmNhcnJ5O1xuICAgIG5jYXJyeSA9IGhuY2Fycnk7XG4gIH1cbiAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgb3V0LndvcmRzW2tdID0gY2Fycnk7XG4gIH0gZWxzZSB7XG4gICAgb3V0Lmxlbmd0aC0tO1xuICB9XG5cbiAgcmV0dXJuIG91dC5zdHJpcCgpO1xufTtcblxuQk4ucHJvdG90eXBlLm11bFRvID0gZnVuY3Rpb24gbXVsVG8obnVtLCBvdXQpIHtcbiAgdmFyIHJlcztcbiAgaWYgKHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aCA8IDYzKVxuICAgIHJlcyA9IHRoaXMuX3NtYWxsTXVsVG8obnVtLCBvdXQpO1xuICBlbHNlXG4gICAgcmVzID0gdGhpcy5fYmlnTXVsVG8obnVtLCBvdXQpO1xuICByZXR1cm4gcmVzO1xufTtcblxuLy8gTXVsdGlwbHkgYHRoaXNgIGJ5IGBudW1gXG5CTi5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKG51bSkge1xuICB2YXIgb3V0ID0gbmV3IEJOKG51bGwpO1xuICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgcmV0dXJuIHRoaXMubXVsVG8obnVtLCBvdXQpO1xufTtcblxuLy8gSW4tcGxhY2UgTXVsdGlwbGljYXRpb25cbkJOLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bChudW0pIHtcbiAgaWYgKHRoaXMuY21wbigwKSA9PT0gMCB8fCBudW0uY21wbigwKSA9PT0gMCkge1xuICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHZhciB0bGVuID0gdGhpcy5sZW5ndGg7XG4gIHZhciBubGVuID0gbnVtLmxlbmd0aDtcblxuICB0aGlzLnNpZ24gPSBudW0uc2lnbiAhPT0gdGhpcy5zaWduO1xuICB0aGlzLmxlbmd0aCA9IHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aDtcbiAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdID0gMDtcblxuICBmb3IgKHZhciBrID0gdGhpcy5sZW5ndGggLSAyOyBrID49IDA7IGstLSkge1xuICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgY2FycnlgLFxuICAgIC8vIG5vdGUgdGhhdCBjYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIHZhciByd29yZCA9IDA7XG4gICAgdmFyIG1heEogPSBNYXRoLm1pbihrLCBubGVuIC0gMSk7XG4gICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSB0bGVuICsgMSk7IGogPD0gbWF4SjsgaisrKSB7XG4gICAgICB2YXIgaSA9IGsgLSBqO1xuICAgICAgdmFyIGEgPSB0aGlzLndvcmRzW2ldO1xuICAgICAgdmFyIGIgPSBudW0ud29yZHNbal07XG4gICAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgICB2YXIgbG8gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgKz0gKHIgLyAweDQwMDAwMDApIHwgMDtcbiAgICAgIGxvICs9IHJ3b3JkO1xuICAgICAgcndvcmQgPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ICs9IGxvID4+PiAyNjtcbiAgICB9XG4gICAgdGhpcy53b3Jkc1trXSA9IHJ3b3JkO1xuICAgIHRoaXMud29yZHNbayArIDFdICs9IGNhcnJ5O1xuICAgIGNhcnJ5ID0gMDtcbiAgfVxuXG4gIC8vIFByb3BhZ2F0ZSBvdmVyZmxvd3NcbiAgdmFyIGNhcnJ5ID0gMDtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldICsgY2Fycnk7XG4gICAgdGhpcy53b3Jkc1tpXSA9IHcgJiAweDNmZmZmZmY7XG4gICAgY2FycnkgPSB3ID4+PiAyNjtcbiAgfVxuXG4gIHJldHVybiB0aGlzLnN0cmlwKCk7XG59O1xuXG5CTi5wcm90b3R5cGUuaW11bG4gPSBmdW5jdGlvbiBpbXVsbihudW0pIHtcbiAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcblxuICAvLyBDYXJyeVxuICB2YXIgY2FycnkgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdyA9IHRoaXMud29yZHNbaV0gKiBudW07XG4gICAgdmFyIGxvID0gKHcgJiAweDNmZmZmZmYpICsgKGNhcnJ5ICYgMHgzZmZmZmZmKTtcbiAgICBjYXJyeSA+Pj0gMjY7XG4gICAgY2FycnkgKz0gKHcgLyAweDQwMDAwMDApIHwgMDtcbiAgICAvLyBOT1RFOiBsbyBpcyAyN2JpdCBtYXhpbXVtXG4gICAgY2FycnkgKz0gbG8gPj4+IDI2O1xuICAgIHRoaXMud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgfVxuXG4gIGlmIChjYXJyeSAhPT0gMCkge1xuICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICB0aGlzLmxlbmd0aCsrO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CTi5wcm90b3R5cGUubXVsbiA9IGZ1bmN0aW9uIG11bG4obnVtKSB7XG4gIHJldHVybiB0aGlzLmNsb25lKCkuaW11bG4obnVtKTtcbn07XG5cbi8vIGB0aGlzYCAqIGB0aGlzYFxuQk4ucHJvdG90eXBlLnNxciA9IGZ1bmN0aW9uIHNxcigpIHtcbiAgcmV0dXJuIHRoaXMubXVsKHRoaXMpO1xufTtcblxuLy8gYHRoaXNgICogYHRoaXNgIGluLXBsYWNlXG5CTi5wcm90b3R5cGUuaXNxciA9IGZ1bmN0aW9uIGlzcXIoKSB7XG4gIHJldHVybiB0aGlzLm11bCh0aGlzKTtcbn07XG5cbi8vIFNoaWZ0LWxlZnQgaW4tcGxhY2VcbkJOLnByb3RvdHlwZS5pc2hsbiA9IGZ1bmN0aW9uIGlzaGxuKGJpdHMpIHtcbiAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG4gIHZhciBjYXJyeU1hc2sgPSAoMHgzZmZmZmZmID4+PiAoMjYgLSByKSkgPDwgKDI2IC0gcik7XG5cbiAgaWYgKHIgIT09IDApIHtcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIG5ld0NhcnJ5ID0gdGhpcy53b3Jkc1tpXSAmIGNhcnJ5TWFzaztcbiAgICAgIHZhciBjID0gKHRoaXMud29yZHNbaV0gLSBuZXdDYXJyeSkgPDwgcjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjIHwgY2Fycnk7XG4gICAgICBjYXJyeSA9IG5ld0NhcnJ5ID4+PiAoMjYgLSByKTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5KSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzICE9PSAwKSB7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pXG4gICAgICB0aGlzLndvcmRzW2kgKyBzXSA9IHRoaXMud29yZHNbaV07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzOyBpKyspXG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB0aGlzLmxlbmd0aCArPSBzO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbn07XG5cbi8vIFNoaWZ0LXJpZ2h0IGluLXBsYWNlXG4vLyBOT1RFOiBgaGludGAgaXMgYSBsb3dlc3QgYml0IGJlZm9yZSB0cmFpbGluZyB6ZXJvZXNcbi8vIE5PVEU6IGlmIGBleHRlbmRlZGAgaXMgcHJlc2VudCAtIGl0IHdpbGwgYmUgZmlsbGVkIHdpdGggZGVzdHJveWVkIGJpdHNcbkJOLnByb3RvdHlwZS5pc2hybiA9IGZ1bmN0aW9uIGlzaHJuKGJpdHMsIGhpbnQsIGV4dGVuZGVkKSB7XG4gIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgdmFyIGg7XG4gIGlmIChoaW50KVxuICAgIGggPSAoaGludCAtIChoaW50ICUgMjYpKSAvIDI2O1xuICBlbHNlXG4gICAgaCA9IDA7XG5cbiAgdmFyIHIgPSBiaXRzICUgMjY7XG4gIHZhciBzID0gTWF0aC5taW4oKGJpdHMgLSByKSAvIDI2LCB0aGlzLmxlbmd0aCk7XG4gIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICB2YXIgbWFza2VkV29yZHMgPSBleHRlbmRlZDtcblxuICBoIC09IHM7XG4gIGggPSBNYXRoLm1heCgwLCBoKTtcblxuICAvLyBFeHRlbmRlZCBtb2RlLCBjb3B5IG1hc2tlZCBwYXJ0XG4gIGlmIChtYXNrZWRXb3Jkcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgczsgaSsrKVxuICAgICAgbWFza2VkV29yZHMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldO1xuICAgIG1hc2tlZFdvcmRzLmxlbmd0aCA9IHM7XG4gIH1cblxuICBpZiAocyA9PT0gMCkge1xuICAgIC8vIE5vLW9wLCB3ZSBzaG91bGQgbm90IG1vdmUgYW55dGhpbmcgYXQgYWxsXG4gIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPiBzKSB7XG4gICAgdGhpcy5sZW5ndGggLT0gcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspXG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpICsgc107XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgdGhpcy5sZW5ndGggPSAxO1xuICB9XG5cbiAgdmFyIGNhcnJ5ID0gMDtcbiAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwICYmIChjYXJyeSAhPT0gMCB8fCBpID49IGgpOyBpLS0pIHtcbiAgICB2YXIgd29yZCA9IHRoaXMud29yZHNbaV07XG4gICAgdGhpcy53b3Jkc1tpXSA9IChjYXJyeSA8PCAoMjYgLSByKSkgfCAod29yZCA+Pj4gcik7XG4gICAgY2FycnkgPSB3b3JkICYgbWFzaztcbiAgfVxuXG4gIC8vIFB1c2ggY2FycmllZCBiaXRzIGFzIGEgbWFza1xuICBpZiAobWFza2VkV29yZHMgJiYgY2FycnkgIT09IDApXG4gICAgbWFza2VkV29yZHMud29yZHNbbWFza2VkV29yZHMubGVuZ3RoKytdID0gY2Fycnk7XG5cbiAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgdGhpcy5sZW5ndGggPSAxO1xuICB9XG5cbiAgdGhpcy5zdHJpcCgpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gU2hpZnQtbGVmdFxuQk4ucHJvdG90eXBlLnNobG4gPSBmdW5jdGlvbiBzaGxuKGJpdHMpIHtcbiAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc2hsbihiaXRzKTtcbn07XG5cbi8vIFNoaWZ0LXJpZ2h0XG5CTi5wcm90b3R5cGUuc2hybiA9IGZ1bmN0aW9uIHNocm4oYml0cykge1xuICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzaHJuKGJpdHMpO1xufTtcblxuLy8gVGVzdCBpZiBuIGJpdCBpcyBzZXRcbkJOLnByb3RvdHlwZS50ZXN0biA9IGZ1bmN0aW9uIHRlc3RuKGJpdCkge1xuICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicgJiYgYml0ID49IDApO1xuICB2YXIgciA9IGJpdCAlIDI2O1xuICB2YXIgcyA9IChiaXQgLSByKSAvIDI2O1xuICB2YXIgcSA9IDEgPDwgcjtcblxuICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICBpZiAodGhpcy5sZW5ndGggPD0gcykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIENoZWNrIGJpdCBhbmQgcmV0dXJuXG4gIHZhciB3ID0gdGhpcy53b3Jkc1tzXTtcblxuICByZXR1cm4gISEodyAmIHEpO1xufTtcblxuLy8gUmV0dXJuIG9ubHkgbG93ZXJzIGJpdHMgb2YgbnVtYmVyIChpbi1wbGFjZSlcbkJOLnByb3RvdHlwZS5pbWFza24gPSBmdW5jdGlvbiBpbWFza24oYml0cykge1xuICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gIHZhciByID0gYml0cyAlIDI2O1xuICB2YXIgcyA9IChiaXRzIC0gcikgLyAyNjtcblxuICBhc3NlcnQoIXRoaXMuc2lnbiwgJ2ltYXNrbiB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmUgbnVtYmVycycpO1xuXG4gIGlmIChyICE9PSAwKVxuICAgIHMrKztcbiAgdGhpcy5sZW5ndGggPSBNYXRoLm1pbihzLCB0aGlzLmxlbmd0aCk7XG5cbiAgaWYgKHIgIT09IDApIHtcbiAgICB2YXIgbWFzayA9IDB4M2ZmZmZmZiBeICgoMHgzZmZmZmZmID4+PiByKSA8PCByKTtcbiAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gJj0gbWFzaztcbiAgfVxuXG4gIHJldHVybiB0aGlzLnN0cmlwKCk7XG59O1xuXG4vLyBSZXR1cm4gb25seSBsb3dlcnMgYml0cyBvZiBudW1iZXJcbkJOLnByb3RvdHlwZS5tYXNrbiA9IGZ1bmN0aW9uIG1hc2tuKGJpdHMpIHtcbiAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbWFza24oYml0cyk7XG59O1xuXG4vLyBBZGQgcGxhaW4gbnVtYmVyIGBudW1gIHRvIGB0aGlzYFxuQk4ucHJvdG90eXBlLmlhZGRuID0gZnVuY3Rpb24gaWFkZG4obnVtKSB7XG4gIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gIGlmIChudW0gPCAwKVxuICAgIHJldHVybiB0aGlzLmlzdWJuKC1udW0pO1xuXG4gIC8vIFBvc3NpYmxlIHNpZ24gY2hhbmdlXG4gIGlmICh0aGlzLnNpZ24pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA8IG51bSkge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IG51bSAtIHRoaXMud29yZHNbMF07XG4gICAgICB0aGlzLnNpZ24gPSBmYWxzZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMuc2lnbiA9IGZhbHNlO1xuICAgIHRoaXMuaXN1Ym4obnVtKTtcbiAgICB0aGlzLnNpZ24gPSB0cnVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gQWRkIHdpdGhvdXQgY2hlY2tzXG4gIHJldHVybiB0aGlzLl9pYWRkbihudW0pO1xufTtcblxuQk4ucHJvdG90eXBlLl9pYWRkbiA9IGZ1bmN0aW9uIF9pYWRkbihudW0pIHtcbiAgdGhpcy53b3Jkc1swXSArPSBudW07XG5cbiAgLy8gQ2FycnlcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldID49IDB4NDAwMDAwMDsgaSsrKSB7XG4gICAgdGhpcy53b3Jkc1tpXSAtPSAweDQwMDAwMDA7XG4gICAgaWYgKGkgPT09IHRoaXMubGVuZ3RoIC0gMSlcbiAgICAgIHRoaXMud29yZHNbaSArIDFdID0gMTtcbiAgICBlbHNlXG4gICAgICB0aGlzLndvcmRzW2kgKyAxXSsrO1xuICB9XG4gIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkgKyAxKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIFN1YnRyYWN0IHBsYWluIG51bWJlciBgbnVtYCBmcm9tIGB0aGlzYFxuQk4ucHJvdG90eXBlLmlzdWJuID0gZnVuY3Rpb24gaXN1Ym4obnVtKSB7XG4gIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gIGlmIChudW0gPCAwKVxuICAgIHJldHVybiB0aGlzLmlhZGRuKC1udW0pO1xuXG4gIGlmICh0aGlzLnNpZ24pIHtcbiAgICB0aGlzLnNpZ24gPSBmYWxzZTtcbiAgICB0aGlzLmlhZGRuKG51bSk7XG4gICAgdGhpcy5zaWduID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHRoaXMud29yZHNbMF0gLT0gbnVtO1xuXG4gIC8vIENhcnJ5XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA8IDA7IGkrKykge1xuICAgIHRoaXMud29yZHNbaV0gKz0gMHg0MDAwMDAwO1xuICAgIHRoaXMud29yZHNbaSArIDFdIC09IDE7XG4gIH1cblxuICByZXR1cm4gdGhpcy5zdHJpcCgpO1xufTtcblxuQk4ucHJvdG90eXBlLmFkZG4gPSBmdW5jdGlvbiBhZGRuKG51bSkge1xuICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGRuKG51bSk7XG59O1xuXG5CTi5wcm90b3R5cGUuc3VibiA9IGZ1bmN0aW9uIHN1Ym4obnVtKSB7XG4gIHJldHVybiB0aGlzLmNsb25lKCkuaXN1Ym4obnVtKTtcbn07XG5cbkJOLnByb3RvdHlwZS5pYWJzID0gZnVuY3Rpb24gaWFicygpIHtcbiAgdGhpcy5zaWduID0gZmFsc2U7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CTi5wcm90b3R5cGUuYWJzID0gZnVuY3Rpb24gYWJzKCkge1xuICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhYnMoKTtcbn07XG5cbkJOLnByb3RvdHlwZS5faXNobG5zdWJtdWwgPSBmdW5jdGlvbiBfaXNobG5zdWJtdWwobnVtLCBtdWwsIHNoaWZ0KSB7XG4gIC8vIEJpZ2dlciBzdG9yYWdlIGlzIG5lZWRlZFxuICB2YXIgbGVuID0gbnVtLmxlbmd0aCArIHNoaWZ0O1xuICB2YXIgaTtcbiAgaWYgKHRoaXMud29yZHMubGVuZ3RoIDwgbGVuKSB7XG4gICAgdmFyIHQgPSBuZXcgQXJyYXkobGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspXG4gICAgICB0W2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICB0aGlzLndvcmRzID0gdDtcbiAgfSBlbHNlIHtcbiAgICBpID0gdGhpcy5sZW5ndGg7XG4gIH1cblxuICAvLyBaZXJvaWZ5IHJlc3RcbiAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgbGVuKTtcbiAgZm9yICg7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKVxuICAgIHRoaXMud29yZHNbaV0gPSAwO1xuXG4gIHZhciBjYXJyeSA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHcgPSB0aGlzLndvcmRzW2kgKyBzaGlmdF0gKyBjYXJyeTtcbiAgICB2YXIgcmlnaHQgPSBudW0ud29yZHNbaV0gKiBtdWw7XG4gICAgdyAtPSByaWdodCAmIDB4M2ZmZmZmZjtcbiAgICBjYXJyeSA9ICh3ID4+IDI2KSAtICgocmlnaHQgLyAweDQwMDAwMDApIHwgMCk7XG4gICAgdGhpcy53b3Jkc1tpICsgc2hpZnRdID0gdyAmIDB4M2ZmZmZmZjtcbiAgfVxuICBmb3IgKDsgaSA8IHRoaXMubGVuZ3RoIC0gc2hpZnQ7IGkrKykge1xuICAgIHZhciB3ID0gdGhpcy53b3Jkc1tpICsgc2hpZnRdICsgY2Fycnk7XG4gICAgY2FycnkgPSB3ID4+IDI2O1xuICAgIHRoaXMud29yZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7XG4gIH1cblxuICBpZiAoY2FycnkgPT09IDApXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcblxuICAvLyBTdWJ0cmFjdGlvbiBvdmVyZmxvd1xuICBhc3NlcnQoY2FycnkgPT09IC0xKTtcbiAgY2FycnkgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdyA9IC10aGlzLndvcmRzW2ldICsgY2Fycnk7XG4gICAgY2FycnkgPSB3ID4+IDI2O1xuICAgIHRoaXMud29yZHNbaV0gPSB3ICYgMHgzZmZmZmZmO1xuICB9XG4gIHRoaXMuc2lnbiA9IHRydWU7XG5cbiAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbn07XG5cbkJOLnByb3RvdHlwZS5fd29yZERpdiA9IGZ1bmN0aW9uIF93b3JkRGl2KG51bSwgbW9kZSkge1xuICB2YXIgc2hpZnQgPSB0aGlzLmxlbmd0aCAtIG51bS5sZW5ndGg7XG5cbiAgdmFyIGEgPSB0aGlzLmNsb25lKCk7XG4gIHZhciBiID0gbnVtO1xuXG4gIC8vIE5vcm1hbGl6ZVxuICB2YXIgYmhpID0gYi53b3Jkc1tiLmxlbmd0aCAtIDFdO1xuICB2YXIgYmhpQml0cyA9IHRoaXMuX2NvdW50Qml0cyhiaGkpO1xuICBzaGlmdCA9IDI2IC0gYmhpQml0cztcbiAgaWYgKHNoaWZ0ICE9PSAwKSB7XG4gICAgYiA9IGIuc2hsbihzaGlmdCk7XG4gICAgYS5pc2hsbihzaGlmdCk7XG4gICAgYmhpID0gYi53b3Jkc1tiLmxlbmd0aCAtIDFdO1xuICB9XG5cbiAgLy8gSW5pdGlhbGl6ZSBxdW90aWVudFxuICB2YXIgbSA9IGEubGVuZ3RoIC0gYi5sZW5ndGg7XG4gIHZhciBxO1xuXG4gIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgIHEgPSBuZXcgQk4obnVsbCk7XG4gICAgcS5sZW5ndGggPSBtICsgMTtcbiAgICBxLndvcmRzID0gbmV3IEFycmF5KHEubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHEubGVuZ3RoOyBpKyspXG4gICAgICBxLndvcmRzW2ldID0gMDtcbiAgfVxuXG4gIHZhciBkaWZmID0gYS5jbG9uZSgpLl9pc2hsbnN1Ym11bChiLCAxLCBtKTtcbiAgaWYgKCFkaWZmLnNpZ24pIHtcbiAgICBhID0gZGlmZjtcbiAgICBpZiAocSlcbiAgICAgIHEud29yZHNbbV0gPSAxO1xuICB9XG5cbiAgZm9yICh2YXIgaiA9IG0gLSAxOyBqID49IDA7IGotLSkge1xuICAgIHZhciBxaiA9IGEud29yZHNbYi5sZW5ndGggKyBqXSAqIDB4NDAwMDAwMCArIGEud29yZHNbYi5sZW5ndGggKyBqIC0gMV07XG5cbiAgICAvLyBOT1RFOiAocWogLyBiaGkpIGlzICgweDNmZmZmZmYgKiAweDQwMDAwMDAgKyAweDNmZmZmZmYpIC8gMHgyMDAwMDAwIG1heFxuICAgIC8vICgweDdmZmZmZmYpXG4gICAgcWogPSBNYXRoLm1pbigocWogLyBiaGkpIHwgMCwgMHgzZmZmZmZmKTtcblxuICAgIGEuX2lzaGxuc3VibXVsKGIsIHFqLCBqKTtcbiAgICB3aGlsZSAoYS5zaWduKSB7XG4gICAgICBxai0tO1xuICAgICAgYS5zaWduID0gZmFsc2U7XG4gICAgICBhLl9pc2hsbnN1Ym11bChiLCAxLCBqKTtcbiAgICAgIGlmIChhLmNtcG4oMCkgIT09IDApXG4gICAgICAgIGEuc2lnbiA9ICFhLnNpZ247XG4gICAgfVxuICAgIGlmIChxKVxuICAgICAgcS53b3Jkc1tqXSA9IHFqO1xuICB9XG4gIGlmIChxKVxuICAgIHEuc3RyaXAoKTtcbiAgYS5zdHJpcCgpO1xuXG4gIC8vIERlbm9ybWFsaXplXG4gIGlmIChtb2RlICE9PSAnZGl2JyAmJiBzaGlmdCAhPT0gMClcbiAgICBhLmlzaHJuKHNoaWZ0KTtcbiAgcmV0dXJuIHsgZGl2OiBxID8gcSA6IG51bGwsIG1vZDogYSB9O1xufTtcblxuQk4ucHJvdG90eXBlLmRpdm1vZCA9IGZ1bmN0aW9uIGRpdm1vZChudW0sIG1vZGUpIHtcbiAgYXNzZXJ0KG51bS5jbXBuKDApICE9PSAwKTtcblxuICBpZiAodGhpcy5zaWduICYmICFudW0uc2lnbikge1xuICAgIHZhciByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0sIG1vZGUpO1xuICAgIHZhciBkaXY7XG4gICAgdmFyIG1vZDtcbiAgICBpZiAobW9kZSAhPT0gJ21vZCcpXG4gICAgICBkaXYgPSByZXMuZGl2Lm5lZygpO1xuICAgIGlmIChtb2RlICE9PSAnZGl2JylcbiAgICAgIG1vZCA9IHJlcy5tb2QuY21wbigwKSA9PT0gMCA/IHJlcy5tb2QgOiBudW0uc3ViKHJlcy5tb2QpO1xuICAgIHJldHVybiB7XG4gICAgICBkaXY6IGRpdixcbiAgICAgIG1vZDogbW9kXG4gICAgfTtcbiAgfSBlbHNlIGlmICghdGhpcy5zaWduICYmIG51bS5zaWduKSB7XG4gICAgdmFyIHJlcyA9IHRoaXMuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG4gICAgdmFyIGRpdjtcbiAgICBpZiAobW9kZSAhPT0gJ21vZCcpXG4gICAgICBkaXYgPSByZXMuZGl2Lm5lZygpO1xuICAgIHJldHVybiB7IGRpdjogZGl2LCBtb2Q6IHJlcy5tb2QgfTtcbiAgfSBlbHNlIGlmICh0aGlzLnNpZ24gJiYgbnVtLnNpZ24pIHtcbiAgICByZXR1cm4gdGhpcy5uZWcoKS5kaXZtb2QobnVtLm5lZygpLCBtb2RlKTtcbiAgfVxuXG4gIC8vIEJvdGggbnVtYmVycyBhcmUgcG9zaXRpdmUgYXQgdGhpcyBwb2ludFxuXG4gIC8vIFN0cmlwIGJvdGggbnVtYmVycyB0byBhcHByb3hpbWF0ZSBzaGlmdCB2YWx1ZVxuICBpZiAobnVtLmxlbmd0aCA+IHRoaXMubGVuZ3RoIHx8IHRoaXMuY21wKG51bSkgPCAwKVxuICAgIHJldHVybiB7IGRpdjogbmV3IEJOKDApLCBtb2Q6IHRoaXMgfTtcblxuICAvLyBWZXJ5IHNob3J0IHJlZHVjdGlvblxuICBpZiAobnVtLmxlbmd0aCA9PT0gMSkge1xuICAgIGlmIChtb2RlID09PSAnZGl2JylcbiAgICAgIHJldHVybiB7IGRpdjogdGhpcy5kaXZuKG51bS53b3Jkc1swXSksIG1vZDogbnVsbCB9O1xuICAgIGVsc2UgaWYgKG1vZGUgPT09ICdtb2QnKVxuICAgICAgcmV0dXJuIHsgZGl2OiBudWxsLCBtb2Q6IG5ldyBCTih0aGlzLm1vZG4obnVtLndvcmRzWzBdKSkgfTtcbiAgICByZXR1cm4ge1xuICAgICAgZGl2OiB0aGlzLmRpdm4obnVtLndvcmRzWzBdKSxcbiAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gdGhpcy5fd29yZERpdihudW0sIG1vZGUpO1xufTtcblxuLy8gRmluZCBgdGhpc2AgLyBgbnVtYFxuQk4ucHJvdG90eXBlLmRpdiA9IGZ1bmN0aW9uIGRpdihudW0pIHtcbiAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ2RpdicpLmRpdjtcbn07XG5cbi8vIEZpbmQgYHRoaXNgICUgYG51bWBcbkJOLnByb3RvdHlwZS5tb2QgPSBmdW5jdGlvbiBtb2QobnVtKSB7XG4gIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdtb2QnKS5tb2Q7XG59O1xuXG4vLyBGaW5kIFJvdW5kKGB0aGlzYCAvIGBudW1gKVxuQk4ucHJvdG90eXBlLmRpdlJvdW5kID0gZnVuY3Rpb24gZGl2Um91bmQobnVtKSB7XG4gIHZhciBkbSA9IHRoaXMuZGl2bW9kKG51bSk7XG5cbiAgLy8gRmFzdCBjYXNlIC0gZXhhY3QgZGl2aXNpb25cbiAgaWYgKGRtLm1vZC5jbXBuKDApID09PSAwKVxuICAgIHJldHVybiBkbS5kaXY7XG5cbiAgdmFyIG1vZCA9IGRtLmRpdi5zaWduID8gZG0ubW9kLmlzdWIobnVtKSA6IGRtLm1vZDtcblxuICB2YXIgaGFsZiA9IG51bS5zaHJuKDEpO1xuICB2YXIgcjIgPSBudW0uYW5kbG4oMSk7XG4gIHZhciBjbXAgPSBtb2QuY21wKGhhbGYpO1xuXG4gIC8vIFJvdW5kIGRvd25cbiAgaWYgKGNtcCA8IDAgfHwgcjIgPT09IDEgJiYgY21wID09PSAwKVxuICAgIHJldHVybiBkbS5kaXY7XG5cbiAgLy8gUm91bmQgdXBcbiAgcmV0dXJuIGRtLmRpdi5zaWduID8gZG0uZGl2LmlzdWJuKDEpIDogZG0uZGl2LmlhZGRuKDEpO1xufTtcblxuQk4ucHJvdG90eXBlLm1vZG4gPSBmdW5jdGlvbiBtb2RuKG51bSkge1xuICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG4gIHZhciBwID0gKDEgPDwgMjYpICUgbnVtO1xuXG4gIHZhciBhY2MgPSAwO1xuICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSlcbiAgICBhY2MgPSAocCAqIGFjYyArIHRoaXMud29yZHNbaV0pICUgbnVtO1xuXG4gIHJldHVybiBhY2M7XG59O1xuXG4vLyBJbi1wbGFjZSBkaXZpc2lvbiBieSBudW1iZXJcbkJOLnByb3RvdHlwZS5pZGl2biA9IGZ1bmN0aW9uIGlkaXZuKG51bSkge1xuICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG5cbiAgdmFyIGNhcnJ5ID0gMDtcbiAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgdyA9IHRoaXMud29yZHNbaV0gKyBjYXJyeSAqIDB4NDAwMDAwMDtcbiAgICB0aGlzLndvcmRzW2ldID0gKHcgLyBudW0pIHwgMDtcbiAgICBjYXJyeSA9IHcgJSBudW07XG4gIH1cblxuICByZXR1cm4gdGhpcy5zdHJpcCgpO1xufTtcblxuQk4ucHJvdG90eXBlLmRpdm4gPSBmdW5jdGlvbiBkaXZuKG51bSkge1xuICByZXR1cm4gdGhpcy5jbG9uZSgpLmlkaXZuKG51bSk7XG59O1xuXG5CTi5wcm90b3R5cGUuZWdjZCA9IGZ1bmN0aW9uIGVnY2QocCkge1xuICBhc3NlcnQoIXAuc2lnbik7XG4gIGFzc2VydChwLmNtcG4oMCkgIT09IDApO1xuXG4gIHZhciB4ID0gdGhpcztcbiAgdmFyIHkgPSBwLmNsb25lKCk7XG5cbiAgaWYgKHguc2lnbilcbiAgICB4ID0geC5tb2QocCk7XG4gIGVsc2VcbiAgICB4ID0geC5jbG9uZSgpO1xuXG4gIC8vIEEgKiB4ICsgQiAqIHkgPSB4XG4gIHZhciBBID0gbmV3IEJOKDEpO1xuICB2YXIgQiA9IG5ldyBCTigwKTtcblxuICAvLyBDICogeCArIEQgKiB5ID0geVxuICB2YXIgQyA9IG5ldyBCTigwKTtcbiAgdmFyIEQgPSBuZXcgQk4oMSk7XG5cbiAgdmFyIGcgPSAwO1xuXG4gIHdoaWxlICh4LmlzRXZlbigpICYmIHkuaXNFdmVuKCkpIHtcbiAgICB4LmlzaHJuKDEpO1xuICAgIHkuaXNocm4oMSk7XG4gICAgKytnO1xuICB9XG5cbiAgdmFyIHlwID0geS5jbG9uZSgpO1xuICB2YXIgeHAgPSB4LmNsb25lKCk7XG5cbiAgd2hpbGUgKHguY21wbigwKSAhPT0gMCkge1xuICAgIHdoaWxlICh4LmlzRXZlbigpKSB7XG4gICAgICB4LmlzaHJuKDEpO1xuICAgICAgaWYgKEEuaXNFdmVuKCkgJiYgQi5pc0V2ZW4oKSkge1xuICAgICAgICBBLmlzaHJuKDEpO1xuICAgICAgICBCLmlzaHJuKDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgQS5pYWRkKHlwKS5pc2hybigxKTtcbiAgICAgICAgQi5pc3ViKHhwKS5pc2hybigxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB3aGlsZSAoeS5pc0V2ZW4oKSkge1xuICAgICAgeS5pc2hybigxKTtcbiAgICAgIGlmIChDLmlzRXZlbigpICYmIEQuaXNFdmVuKCkpIHtcbiAgICAgICAgQy5pc2hybigxKTtcbiAgICAgICAgRC5pc2hybigxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIEMuaWFkZCh5cCkuaXNocm4oMSk7XG4gICAgICAgIEQuaXN1Yih4cCkuaXNocm4oMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHguY21wKHkpID49IDApIHtcbiAgICAgIHguaXN1Yih5KTtcbiAgICAgIEEuaXN1YihDKTtcbiAgICAgIEIuaXN1YihEKTtcbiAgICB9IGVsc2Uge1xuICAgICAgeS5pc3ViKHgpO1xuICAgICAgQy5pc3ViKEEpO1xuICAgICAgRC5pc3ViKEIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgYTogQyxcbiAgICBiOiBELFxuICAgIGdjZDogeS5pc2hsbihnKVxuICB9O1xufTtcblxuLy8gVGhpcyBpcyByZWR1Y2VkIGluY2FybmF0aW9uIG9mIHRoZSBiaW5hcnkgRUVBXG4vLyBhYm92ZSwgZGVzaWduYXRlZCB0byBpbnZlcnQgbWVtYmVycyBvZiB0aGVcbi8vIF9wcmltZV8gZmllbGRzIEYocCkgYXQgYSBtYXhpbWFsIHNwZWVkXG5CTi5wcm90b3R5cGUuX2ludm1wID0gZnVuY3Rpb24gX2ludm1wKHApIHtcbiAgYXNzZXJ0KCFwLnNpZ24pO1xuICBhc3NlcnQocC5jbXBuKDApICE9PSAwKTtcblxuICB2YXIgYSA9IHRoaXM7XG4gIHZhciBiID0gcC5jbG9uZSgpO1xuXG4gIGlmIChhLnNpZ24pXG4gICAgYSA9IGEubW9kKHApO1xuICBlbHNlXG4gICAgYSA9IGEuY2xvbmUoKTtcblxuICB2YXIgeDEgPSBuZXcgQk4oMSk7XG4gIHZhciB4MiA9IG5ldyBCTigwKTtcblxuICB2YXIgZGVsdGEgPSBiLmNsb25lKCk7XG5cbiAgd2hpbGUgKGEuY21wbigxKSA+IDAgJiYgYi5jbXBuKDEpID4gMCkge1xuICAgIHdoaWxlIChhLmlzRXZlbigpKSB7XG4gICAgICBhLmlzaHJuKDEpO1xuICAgICAgaWYgKHgxLmlzRXZlbigpKVxuICAgICAgICB4MS5pc2hybigxKTtcbiAgICAgIGVsc2VcbiAgICAgICAgeDEuaWFkZChkZWx0YSkuaXNocm4oMSk7XG4gICAgfVxuICAgIHdoaWxlIChiLmlzRXZlbigpKSB7XG4gICAgICBiLmlzaHJuKDEpO1xuICAgICAgaWYgKHgyLmlzRXZlbigpKVxuICAgICAgICB4Mi5pc2hybigxKTtcbiAgICAgIGVsc2VcbiAgICAgICAgeDIuaWFkZChkZWx0YSkuaXNocm4oMSk7XG4gICAgfVxuICAgIGlmIChhLmNtcChiKSA+PSAwKSB7XG4gICAgICBhLmlzdWIoYik7XG4gICAgICB4MS5pc3ViKHgyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYi5pc3ViKGEpO1xuICAgICAgeDIuaXN1Yih4MSk7XG4gICAgfVxuICB9XG4gIGlmIChhLmNtcG4oMSkgPT09IDApXG4gICAgcmV0dXJuIHgxO1xuICBlbHNlXG4gICAgcmV0dXJuIHgyO1xufTtcblxuQk4ucHJvdG90eXBlLmdjZCA9IGZ1bmN0aW9uIGdjZChudW0pIHtcbiAgaWYgKHRoaXMuY21wbigwKSA9PT0gMClcbiAgICByZXR1cm4gbnVtLmNsb25lKCk7XG4gIGlmIChudW0uY21wbigwKSA9PT0gMClcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xuXG4gIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICB2YXIgYiA9IG51bS5jbG9uZSgpO1xuICBhLnNpZ24gPSBmYWxzZTtcbiAgYi5zaWduID0gZmFsc2U7XG5cbiAgLy8gUmVtb3ZlIGNvbW1vbiBmYWN0b3Igb2YgdHdvXG4gIGZvciAodmFyIHNoaWZ0ID0gMDsgYS5pc0V2ZW4oKSAmJiBiLmlzRXZlbigpOyBzaGlmdCsrKSB7XG4gICAgYS5pc2hybigxKTtcbiAgICBiLmlzaHJuKDEpO1xuICB9XG5cbiAgZG8ge1xuICAgIHdoaWxlIChhLmlzRXZlbigpKVxuICAgICAgYS5pc2hybigxKTtcbiAgICB3aGlsZSAoYi5pc0V2ZW4oKSlcbiAgICAgIGIuaXNocm4oMSk7XG5cbiAgICB2YXIgciA9IGEuY21wKGIpO1xuICAgIGlmIChyIDwgMCkge1xuICAgICAgLy8gU3dhcCBgYWAgYW5kIGBiYCB0byBtYWtlIGBhYCBhbHdheXMgYmlnZ2VyIHRoYW4gYGJgXG4gICAgICB2YXIgdCA9IGE7XG4gICAgICBhID0gYjtcbiAgICAgIGIgPSB0O1xuICAgIH0gZWxzZSBpZiAociA9PT0gMCB8fCBiLmNtcG4oMSkgPT09IDApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGEuaXN1YihiKTtcbiAgfSB3aGlsZSAodHJ1ZSk7XG5cbiAgcmV0dXJuIGIuaXNobG4oc2hpZnQpO1xufTtcblxuLy8gSW52ZXJ0IG51bWJlciBpbiB0aGUgZmllbGQgRihudW0pXG5CTi5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0obnVtKSB7XG4gIHJldHVybiB0aGlzLmVnY2QobnVtKS5hLm1vZChudW0pO1xufTtcblxuQk4ucHJvdG90eXBlLmlzRXZlbiA9IGZ1bmN0aW9uIGlzRXZlbigpIHtcbiAgcmV0dXJuICh0aGlzLndvcmRzWzBdICYgMSkgPT09IDA7XG59O1xuXG5CTi5wcm90b3R5cGUuaXNPZGQgPSBmdW5jdGlvbiBpc09kZCgpIHtcbiAgcmV0dXJuICh0aGlzLndvcmRzWzBdICYgMSkgPT09IDE7XG59O1xuXG4vLyBBbmQgZmlyc3Qgd29yZCBhbmQgbnVtXG5CTi5wcm90b3R5cGUuYW5kbG4gPSBmdW5jdGlvbiBhbmRsbihudW0pIHtcbiAgcmV0dXJuIHRoaXMud29yZHNbMF0gJiBudW07XG59O1xuXG4vLyBJbmNyZW1lbnQgYXQgdGhlIGJpdCBwb3NpdGlvbiBpbi1saW5lXG5CTi5wcm90b3R5cGUuYmluY24gPSBmdW5jdGlvbiBiaW5jbihiaXQpIHtcbiAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInKTtcbiAgdmFyIHIgPSBiaXQgJSAyNjtcbiAgdmFyIHMgPSAoYml0IC0gcikgLyAyNjtcbiAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgLy8gRmFzdCBjYXNlOiBiaXQgaXMgbXVjaCBoaWdoZXIgdGhhbiBhbGwgZXhpc3Rpbmcgd29yZHNcbiAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGg7IGkgPCBzICsgMTsgaSsrKVxuICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgdGhpcy53b3Jkc1tzXSB8PSBxO1xuICAgIHRoaXMubGVuZ3RoID0gcyArIDE7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBBZGQgYml0IGFuZCBwcm9wYWdhdGUsIGlmIG5lZWRlZFxuICB2YXIgY2FycnkgPSBxO1xuICBmb3IgKHZhciBpID0gczsgY2FycnkgIT09IDAgJiYgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdyA9IHRoaXMud29yZHNbaV07XG4gICAgdyArPSBjYXJyeTtcbiAgICBjYXJyeSA9IHcgPj4+IDI2O1xuICAgIHcgJj0gMHgzZmZmZmZmO1xuICAgIHRoaXMud29yZHNbaV0gPSB3O1xuICB9XG4gIGlmIChjYXJyeSAhPT0gMCkge1xuICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICB0aGlzLmxlbmd0aCsrO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuQk4ucHJvdG90eXBlLmNtcG4gPSBmdW5jdGlvbiBjbXBuKG51bSkge1xuICB2YXIgc2lnbiA9IG51bSA8IDA7XG4gIGlmIChzaWduKVxuICAgIG51bSA9IC1udW07XG5cbiAgaWYgKHRoaXMuc2lnbiAmJiAhc2lnbilcbiAgICByZXR1cm4gLTE7XG4gIGVsc2UgaWYgKCF0aGlzLnNpZ24gJiYgc2lnbilcbiAgICByZXR1cm4gMTtcblxuICBudW0gJj0gMHgzZmZmZmZmO1xuICB0aGlzLnN0cmlwKCk7XG5cbiAgdmFyIHJlcztcbiAgaWYgKHRoaXMubGVuZ3RoID4gMSkge1xuICAgIHJlcyA9IDE7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHcgPSB0aGlzLndvcmRzWzBdO1xuICAgIHJlcyA9IHcgPT09IG51bSA/IDAgOiB3IDwgbnVtID8gLTEgOiAxO1xuICB9XG4gIGlmICh0aGlzLnNpZ24pXG4gICAgcmVzID0gLXJlcztcbiAgcmV0dXJuIHJlcztcbn07XG5cbi8vIENvbXBhcmUgdHdvIG51bWJlcnMgYW5kIHJldHVybjpcbi8vIDEgLSBpZiBgdGhpc2AgPiBgbnVtYFxuLy8gMCAtIGlmIGB0aGlzYCA9PSBgbnVtYFxuLy8gLTEgLSBpZiBgdGhpc2AgPCBgbnVtYFxuQk4ucHJvdG90eXBlLmNtcCA9IGZ1bmN0aW9uIGNtcChudW0pIHtcbiAgaWYgKHRoaXMuc2lnbiAmJiAhbnVtLnNpZ24pXG4gICAgcmV0dXJuIC0xO1xuICBlbHNlIGlmICghdGhpcy5zaWduICYmIG51bS5zaWduKVxuICAgIHJldHVybiAxO1xuXG4gIHZhciByZXMgPSB0aGlzLnVjbXAobnVtKTtcbiAgaWYgKHRoaXMuc2lnbilcbiAgICByZXR1cm4gLXJlcztcbiAgZWxzZVxuICAgIHJldHVybiByZXM7XG59O1xuXG4vLyBVbnNpZ25lZCBjb21wYXJpc29uXG5CTi5wcm90b3R5cGUudWNtcCA9IGZ1bmN0aW9uIHVjbXAobnVtKSB7XG4gIC8vIEF0IHRoaXMgcG9pbnQgYm90aCBudW1iZXJzIGhhdmUgdGhlIHNhbWUgc2lnblxuICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKVxuICAgIHJldHVybiAxO1xuICBlbHNlIGlmICh0aGlzLmxlbmd0aCA8IG51bS5sZW5ndGgpXG4gICAgcmV0dXJuIC0xO1xuXG4gIHZhciByZXMgPSAwO1xuICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciBhID0gdGhpcy53b3Jkc1tpXTtcbiAgICB2YXIgYiA9IG51bS53b3Jkc1tpXTtcblxuICAgIGlmIChhID09PSBiKVxuICAgICAgY29udGludWU7XG4gICAgaWYgKGEgPCBiKVxuICAgICAgcmVzID0gLTE7XG4gICAgZWxzZSBpZiAoYSA+IGIpXG4gICAgICByZXMgPSAxO1xuICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiByZXM7XG59O1xuXG4vL1xuLy8gQSByZWR1Y2UgY29udGV4dCwgY291bGQgYmUgdXNpbmcgbW9udGdvbWVyeSBvciBzb21ldGhpbmcgYmV0dGVyLCBkZXBlbmRpbmdcbi8vIG9uIHRoZSBgbWAgaXRzZWxmLlxuLy9cbkJOLnJlZCA9IGZ1bmN0aW9uIHJlZChudW0pIHtcbiAgcmV0dXJuIG5ldyBSZWQobnVtKTtcbn07XG5cbkJOLnByb3RvdHlwZS50b1JlZCA9IGZ1bmN0aW9uIHRvUmVkKGN0eCkge1xuICBhc3NlcnQoIXRoaXMucmVkLCAnQWxyZWFkeSBhIG51bWJlciBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICBhc3NlcnQoIXRoaXMuc2lnbiwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gIHJldHVybiBjdHguY29udmVydFRvKHRoaXMpLl9mb3JjZVJlZChjdHgpO1xufTtcblxuQk4ucHJvdG90eXBlLmZyb21SZWQgPSBmdW5jdGlvbiBmcm9tUmVkKCkge1xuICBhc3NlcnQodGhpcy5yZWQsICdmcm9tUmVkIHdvcmtzIG9ubHkgd2l0aCBudW1iZXJzIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gIHJldHVybiB0aGlzLnJlZC5jb252ZXJ0RnJvbSh0aGlzKTtcbn07XG5cbkJOLnByb3RvdHlwZS5fZm9yY2VSZWQgPSBmdW5jdGlvbiBfZm9yY2VSZWQoY3R4KSB7XG4gIHRoaXMucmVkID0gY3R4O1xuICByZXR1cm4gdGhpcztcbn07XG5cbkJOLnByb3RvdHlwZS5mb3JjZVJlZCA9IGZ1bmN0aW9uIGZvcmNlUmVkKGN0eCkge1xuICBhc3NlcnQoIXRoaXMucmVkLCAnQWxyZWFkeSBhIG51bWJlciBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICByZXR1cm4gdGhpcy5fZm9yY2VSZWQoY3R4KTtcbn07XG5cbkJOLnByb3RvdHlwZS5yZWRBZGQgPSBmdW5jdGlvbiByZWRBZGQobnVtKSB7XG4gIGFzc2VydCh0aGlzLnJlZCwgJ3JlZEFkZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgcmV0dXJuIHRoaXMucmVkLmFkZCh0aGlzLCBudW0pO1xufTtcblxuQk4ucHJvdG90eXBlLnJlZElBZGQgPSBmdW5jdGlvbiByZWRJQWRkKG51bSkge1xuICBhc3NlcnQodGhpcy5yZWQsICdyZWRJQWRkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICByZXR1cm4gdGhpcy5yZWQuaWFkZCh0aGlzLCBudW0pO1xufTtcblxuQk4ucHJvdG90eXBlLnJlZFN1YiA9IGZ1bmN0aW9uIHJlZFN1YihudW0pIHtcbiAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3ViIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICByZXR1cm4gdGhpcy5yZWQuc3ViKHRoaXMsIG51bSk7XG59O1xuXG5CTi5wcm90b3R5cGUucmVkSVN1YiA9IGZ1bmN0aW9uIHJlZElTdWIobnVtKSB7XG4gIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIHJldHVybiB0aGlzLnJlZC5pc3ViKHRoaXMsIG51bSk7XG59O1xuXG5CTi5wcm90b3R5cGUucmVkU2hsID0gZnVuY3Rpb24gcmVkU2hsKG51bSkge1xuICBhc3NlcnQodGhpcy5yZWQsICdyZWRTaGwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIHJldHVybiB0aGlzLnJlZC5zaGwodGhpcywgbnVtKTtcbn07XG5cbkJOLnByb3RvdHlwZS5yZWRNdWwgPSBmdW5jdGlvbiByZWRNdWwobnVtKSB7XG4gIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE11bCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgcmV0dXJuIHRoaXMucmVkLm11bCh0aGlzLCBudW0pO1xufTtcblxuQk4ucHJvdG90eXBlLnJlZElNdWwgPSBmdW5jdGlvbiByZWRJTXVsKG51bSkge1xuICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gIHJldHVybiB0aGlzLnJlZC5pbXVsKHRoaXMsIG51bSk7XG59O1xuXG5CTi5wcm90b3R5cGUucmVkU3FyID0gZnVuY3Rpb24gcmVkU3FyKCkge1xuICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICByZXR1cm4gdGhpcy5yZWQuc3FyKHRoaXMpO1xufTtcblxuQk4ucHJvdG90eXBlLnJlZElTcXIgPSBmdW5jdGlvbiByZWRJU3FyKCkge1xuICBhc3NlcnQodGhpcy5yZWQsICdyZWRJU3FyIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgcmV0dXJuIHRoaXMucmVkLmlzcXIodGhpcyk7XG59O1xuXG4vLyBTcXVhcmUgcm9vdCBvdmVyIHBcbkJOLnByb3RvdHlwZS5yZWRTcXJ0ID0gZnVuY3Rpb24gcmVkU3FydCgpIHtcbiAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3FydCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gIHJldHVybiB0aGlzLnJlZC5zcXJ0KHRoaXMpO1xufTtcblxuQk4ucHJvdG90eXBlLnJlZEludm0gPSBmdW5jdGlvbiByZWRJbnZtKCkge1xuICBhc3NlcnQodGhpcy5yZWQsICdyZWRJbnZtIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgcmV0dXJuIHRoaXMucmVkLmludm0odGhpcyk7XG59O1xuXG4vLyBSZXR1cm4gbmVnYXRpdmUgY2xvbmUgb2YgYHRoaXNgICUgYHJlZCBtb2R1bG9gXG5CTi5wcm90b3R5cGUucmVkTmVnID0gZnVuY3Rpb24gcmVkTmVnKCkge1xuICBhc3NlcnQodGhpcy5yZWQsICdyZWROZWcgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICByZXR1cm4gdGhpcy5yZWQubmVnKHRoaXMpO1xufTtcblxuQk4ucHJvdG90eXBlLnJlZFBvdyA9IGZ1bmN0aW9uIHJlZFBvdyhudW0pIHtcbiAgYXNzZXJ0KHRoaXMucmVkICYmICFudW0ucmVkLCAncmVkUG93KG5vcm1hbE51bSknKTtcbiAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gIHJldHVybiB0aGlzLnJlZC5wb3codGhpcywgbnVtKTtcbn07XG5cbi8vIFByaW1lIG51bWJlcnMgd2l0aCBlZmZpY2llbnQgcmVkdWN0aW9uXG52YXIgcHJpbWVzID0ge1xuICBrMjU2OiBudWxsLFxuICBwMjI0OiBudWxsLFxuICBwMTkyOiBudWxsLFxuICBwMjU1MTk6IG51bGxcbn07XG5cbi8vIFBzZXVkby1NZXJzZW5uZSBwcmltZVxuZnVuY3Rpb24gTVByaW1lKG5hbWUsIHApIHtcbiAgLy8gUCA9IDIgXiBOIC0gS1xuICB0aGlzLm5hbWUgPSBuYW1lO1xuICB0aGlzLnAgPSBuZXcgQk4ocCwgMTYpO1xuICB0aGlzLm4gPSB0aGlzLnAuYml0TGVuZ3RoKCk7XG4gIHRoaXMuayA9IG5ldyBCTigxKS5pc2hsbih0aGlzLm4pLmlzdWIodGhpcy5wKTtcblxuICB0aGlzLnRtcCA9IHRoaXMuX3RtcCgpO1xufVxuXG5NUHJpbWUucHJvdG90eXBlLl90bXAgPSBmdW5jdGlvbiBfdG1wKCkge1xuICB2YXIgdG1wID0gbmV3IEJOKG51bGwpO1xuICB0bXAud29yZHMgPSBuZXcgQXJyYXkoTWF0aC5jZWlsKHRoaXMubiAvIDEzKSk7XG4gIHJldHVybiB0bXA7XG59O1xuXG5NUHJpbWUucHJvdG90eXBlLmlyZWR1Y2UgPSBmdW5jdGlvbiBpcmVkdWNlKG51bSkge1xuICAvLyBBc3N1bWVzIHRoYXQgYG51bWAgaXMgbGVzcyB0aGFuIGBQXjJgXG4gIC8vIG51bSA9IEhJICogKDIgXiBOIC0gSykgKyBISSAqIEsgKyBMTyA9IEhJICogSyArIExPIChtb2QgUClcbiAgdmFyIHIgPSBudW07XG4gIHZhciBybGVuO1xuXG4gIGRvIHtcbiAgICB0aGlzLnNwbGl0KHIsIHRoaXMudG1wKTtcbiAgICByID0gdGhpcy5pbXVsSyhyKTtcbiAgICByID0gci5pYWRkKHRoaXMudG1wKTtcbiAgICBybGVuID0gci5iaXRMZW5ndGgoKTtcbiAgfSB3aGlsZSAocmxlbiA+IHRoaXMubik7XG5cbiAgdmFyIGNtcCA9IHJsZW4gPCB0aGlzLm4gPyAtMSA6IHIudWNtcCh0aGlzLnApO1xuICBpZiAoY21wID09PSAwKSB7XG4gICAgci53b3Jkc1swXSA9IDA7XG4gICAgci5sZW5ndGggPSAxO1xuICB9IGVsc2UgaWYgKGNtcCA+IDApIHtcbiAgICByLmlzdWIodGhpcy5wKTtcbiAgfSBlbHNlIHtcbiAgICByLnN0cmlwKCk7XG4gIH1cblxuICByZXR1cm4gcjtcbn07XG5cbk1QcmltZS5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdChpbnB1dCwgb3V0KSB7XG4gIGlucHV0LmlzaHJuKHRoaXMubiwgMCwgb3V0KTtcbn07XG5cbk1QcmltZS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyhudW0pIHtcbiAgcmV0dXJuIG51bS5pbXVsKHRoaXMuayk7XG59O1xuXG5mdW5jdGlvbiBLMjU2KCkge1xuICBNUHJpbWUuY2FsbChcbiAgICB0aGlzLFxuICAgICdrMjU2JyxcbiAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZjMmYnKTtcbn1cbmluaGVyaXRzKEsyNTYsIE1QcmltZSk7XG5cbksyNTYucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQoaW5wdXQsIG91dHB1dCkge1xuICAvLyAyNTYgPSA5ICogMjYgKyAyMlxuICB2YXIgbWFzayA9IDB4M2ZmZmZmO1xuXG4gIHZhciBvdXRMZW4gPSBNYXRoLm1pbihpbnB1dC5sZW5ndGgsIDkpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG91dExlbjsgaSsrKVxuICAgIG91dHB1dC53b3Jkc1tpXSA9IGlucHV0LndvcmRzW2ldO1xuICBvdXRwdXQubGVuZ3RoID0gb3V0TGVuO1xuXG4gIGlmIChpbnB1dC5sZW5ndGggPD0gOSkge1xuICAgIGlucHV0LndvcmRzWzBdID0gMDtcbiAgICBpbnB1dC5sZW5ndGggPSAxO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFNoaWZ0IGJ5IDkgbGltYnNcbiAgdmFyIHByZXYgPSBpbnB1dC53b3Jkc1s5XTtcbiAgb3V0cHV0LndvcmRzW291dHB1dC5sZW5ndGgrK10gPSBwcmV2ICYgbWFzaztcblxuICBmb3IgKHZhciBpID0gMTA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBuZXh0ID0gaW5wdXQud29yZHNbaV07XG4gICAgaW5wdXQud29yZHNbaSAtIDEwXSA9ICgobmV4dCAmIG1hc2spIDw8IDQpIHwgKHByZXYgPj4+IDIyKTtcbiAgICBwcmV2ID0gbmV4dDtcbiAgfVxuICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gcHJldiA+Pj4gMjI7XG4gIGlucHV0Lmxlbmd0aCAtPSA5O1xufTtcblxuSzI1Ni5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyhudW0pIHtcbiAgLy8gSyA9IDB4MTAwMDAwM2QxID0gWyAweDQwLCAweDNkMSBdXG4gIG51bS53b3Jkc1tudW0ubGVuZ3RoXSA9IDA7XG4gIG51bS53b3Jkc1tudW0ubGVuZ3RoICsgMV0gPSAwO1xuICBudW0ubGVuZ3RoICs9IDI7XG5cbiAgLy8gYm91bmRlZCBhdDogMHg0MCAqIDB4M2ZmZmZmZiArIDB4M2QwID0gMHgxMDAwMDAzOTBcbiAgdmFyIGhpO1xuICB2YXIgbG8gPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgIHZhciB3ID0gbnVtLndvcmRzW2ldO1xuICAgIGhpID0gdyAqIDB4NDA7XG4gICAgbG8gKz0gdyAqIDB4M2QxO1xuICAgIGhpICs9IChsbyAvIDB4NDAwMDAwMCkgfCAwO1xuICAgIGxvICY9IDB4M2ZmZmZmZjtcblxuICAgIG51bS53b3Jkc1tpXSA9IGxvO1xuXG4gICAgbG8gPSBoaTtcbiAgfVxuXG4gIC8vIEZhc3QgbGVuZ3RoIHJlZHVjdGlvblxuICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgIG51bS5sZW5ndGgtLTtcbiAgICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMClcbiAgICAgIG51bS5sZW5ndGgtLTtcbiAgfVxuICByZXR1cm4gbnVtO1xufTtcblxuZnVuY3Rpb24gUDIyNCgpIHtcbiAgTVByaW1lLmNhbGwoXG4gICAgdGhpcyxcbiAgICAncDIyNCcsXG4gICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAxJyk7XG59XG5pbmhlcml0cyhQMjI0LCBNUHJpbWUpO1xuXG5mdW5jdGlvbiBQMTkyKCkge1xuICBNUHJpbWUuY2FsbChcbiAgICB0aGlzLFxuICAgICdwMTkyJyxcbiAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYnKTtcbn1cbmluaGVyaXRzKFAxOTIsIE1QcmltZSk7XG5cbmZ1bmN0aW9uIFAyNTUxOSgpIHtcbiAgLy8gMiBeIDI1NSAtIDE5XG4gIE1QcmltZS5jYWxsKFxuICAgIHRoaXMsXG4gICAgJzI1NTE5JyxcbiAgICAnN2ZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZlZCcpO1xufVxuaW5oZXJpdHMoUDI1NTE5LCBNUHJpbWUpO1xuXG5QMjU1MTkucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsobnVtKSB7XG4gIC8vIEsgPSAweDEzXG4gIHZhciBjYXJyeSA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGhpID0gbnVtLndvcmRzW2ldICogMHgxMyArIGNhcnJ5O1xuICAgIHZhciBsbyA9IGhpICYgMHgzZmZmZmZmO1xuICAgIGhpID4+Pj0gMjY7XG5cbiAgICBudW0ud29yZHNbaV0gPSBsbztcbiAgICBjYXJyeSA9IGhpO1xuICB9XG4gIGlmIChjYXJyeSAhPT0gMClcbiAgICBudW0ud29yZHNbbnVtLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICByZXR1cm4gbnVtO1xufTtcblxuLy8gRXhwb3J0ZWQgbW9zdGx5IGZvciB0ZXN0aW5nIHB1cnBvc2VzLCB1c2UgcGxhaW4gbmFtZSBpbnN0ZWFkXG5CTi5fcHJpbWUgPSBmdW5jdGlvbiBwcmltZShuYW1lKSB7XG4gIC8vIENhY2hlZCB2ZXJzaW9uIG9mIHByaW1lXG4gIGlmIChwcmltZXNbbmFtZV0pXG4gICAgcmV0dXJuIHByaW1lc1tuYW1lXTtcblxuICB2YXIgcHJpbWU7XG4gIGlmIChuYW1lID09PSAnazI1NicpXG4gICAgcHJpbWUgPSBuZXcgSzI1NigpO1xuICBlbHNlIGlmIChuYW1lID09PSAncDIyNCcpXG4gICAgcHJpbWUgPSBuZXcgUDIyNCgpO1xuICBlbHNlIGlmIChuYW1lID09PSAncDE5MicpXG4gICAgcHJpbWUgPSBuZXcgUDE5MigpO1xuICBlbHNlIGlmIChuYW1lID09PSAncDI1NTE5JylcbiAgICBwcmltZSA9IG5ldyBQMjU1MTkoKTtcbiAgZWxzZVxuICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwcmltZSAnICsgbmFtZSk7XG4gIHByaW1lc1tuYW1lXSA9IHByaW1lO1xuXG4gIHJldHVybiBwcmltZTtcbn07XG5cbi8vXG4vLyBCYXNlIHJlZHVjdGlvbiBlbmdpbmVcbi8vXG5mdW5jdGlvbiBSZWQobSkge1xuICBpZiAodHlwZW9mIG0gPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHByaW1lID0gQk4uX3ByaW1lKG0pO1xuICAgIHRoaXMubSA9IHByaW1lLnA7XG4gICAgdGhpcy5wcmltZSA9IHByaW1lO1xuICB9IGVsc2Uge1xuICAgIHRoaXMubSA9IG07XG4gICAgdGhpcy5wcmltZSA9IG51bGw7XG4gIH1cbn1cblxuUmVkLnByb3RvdHlwZS5fdmVyaWZ5MSA9IGZ1bmN0aW9uIF92ZXJpZnkxKGEpIHtcbiAgYXNzZXJ0KCFhLnNpZ24sICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICBhc3NlcnQoYS5yZWQsICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG59O1xuXG5SZWQucHJvdG90eXBlLl92ZXJpZnkyID0gZnVuY3Rpb24gX3ZlcmlmeTIoYSwgYikge1xuICBhc3NlcnQoIWEuc2lnbiAmJiAhYi5zaWduLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgYXNzZXJ0KGEucmVkICYmIGEucmVkID09PSBiLnJlZCxcbiAgICAgICAgICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG59O1xuXG5SZWQucHJvdG90eXBlLmltb2QgPSBmdW5jdGlvbiBpbW9kKGEpIHtcbiAgaWYgKHRoaXMucHJpbWUpXG4gICAgcmV0dXJuIHRoaXMucHJpbWUuaXJlZHVjZShhKS5fZm9yY2VSZWQodGhpcyk7XG4gIHJldHVybiBhLm1vZCh0aGlzLm0pLl9mb3JjZVJlZCh0aGlzKTtcbn07XG5cblJlZC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnKGEpIHtcbiAgdmFyIHIgPSBhLmNsb25lKCk7XG4gIHIuc2lnbiA9ICFyLnNpZ247XG4gIHJldHVybiByLmlhZGQodGhpcy5tKS5fZm9yY2VSZWQodGhpcyk7XG59O1xuXG5SZWQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZChhLCBiKSB7XG4gIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgdmFyIHJlcyA9IGEuYWRkKGIpO1xuICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApXG4gICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG59O1xuXG5SZWQucHJvdG90eXBlLmlhZGQgPSBmdW5jdGlvbiBpYWRkKGEsIGIpIHtcbiAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICB2YXIgcmVzID0gYS5pYWRkKGIpO1xuICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApXG4gICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgcmV0dXJuIHJlcztcbn07XG5cblJlZC5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViKGEsIGIpIHtcbiAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICB2YXIgcmVzID0gYS5zdWIoYik7XG4gIGlmIChyZXMuY21wbigwKSA8IDApXG4gICAgcmVzLmlhZGQodGhpcy5tKTtcbiAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG59O1xuXG5SZWQucHJvdG90eXBlLmlzdWIgPSBmdW5jdGlvbiBpc3ViKGEsIGIpIHtcbiAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICB2YXIgcmVzID0gYS5pc3ViKGIpO1xuICBpZiAocmVzLmNtcG4oMCkgPCAwKVxuICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gIHJldHVybiByZXM7XG59O1xuXG5SZWQucHJvdG90eXBlLnNobCA9IGZ1bmN0aW9uIHNobChhLCBudW0pIHtcbiAgdGhpcy5fdmVyaWZ5MShhKTtcbiAgcmV0dXJuIHRoaXMuaW1vZChhLnNobG4obnVtKSk7XG59O1xuXG5SZWQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsKGEsIGIpIHtcbiAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcbiAgcmV0dXJuIHRoaXMuaW1vZChhLmltdWwoYikpO1xufTtcblxuUmVkLnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwoYSwgYikge1xuICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICByZXR1cm4gdGhpcy5pbW9kKGEubXVsKGIpKTtcbn07XG5cblJlZC5wcm90b3R5cGUuaXNxciA9IGZ1bmN0aW9uIGlzcXIoYSkge1xuICByZXR1cm4gdGhpcy5pbXVsKGEsIGEpO1xufTtcblxuUmVkLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIoYSkge1xuICByZXR1cm4gdGhpcy5tdWwoYSwgYSk7XG59O1xuXG5SZWQucHJvdG90eXBlLnNxcnQgPSBmdW5jdGlvbiBzcXJ0KGEpIHtcbiAgaWYgKGEuY21wbigwKSA9PT0gMClcbiAgICByZXR1cm4gYS5jbG9uZSgpO1xuXG4gIHZhciBtb2QzID0gdGhpcy5tLmFuZGxuKDMpO1xuICBhc3NlcnQobW9kMyAlIDIgPT09IDEpO1xuXG4gIC8vIEZhc3QgY2FzZVxuICBpZiAobW9kMyA9PT0gMykge1xuICAgIHZhciBwb3cgPSB0aGlzLm0uYWRkKG5ldyBCTigxKSkuaXNocm4oMik7XG4gICAgdmFyIHIgPSB0aGlzLnBvdyhhLCBwb3cpO1xuICAgIHJldHVybiByO1xuICB9XG5cbiAgLy8gVG9uZWxsaS1TaGFua3MgYWxnb3JpdGhtIChUb3RhbGx5IHVub3B0aW1pemVkIGFuZCBzbG93KVxuICAvL1xuICAvLyBGaW5kIFEgYW5kIFMsIHRoYXQgUSAqIDIgXiBTID0gKFAgLSAxKVxuICB2YXIgcSA9IHRoaXMubS5zdWJuKDEpO1xuICB2YXIgcyA9IDA7XG4gIHdoaWxlIChxLmNtcG4oMCkgIT09IDAgJiYgcS5hbmRsbigxKSA9PT0gMCkge1xuICAgIHMrKztcbiAgICBxLmlzaHJuKDEpO1xuICB9XG4gIGFzc2VydChxLmNtcG4oMCkgIT09IDApO1xuXG4gIHZhciBvbmUgPSBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gIHZhciBuT25lID0gb25lLnJlZE5lZygpO1xuXG4gIC8vIEZpbmQgcXVhZHJhdGljIG5vbi1yZXNpZHVlXG4gIC8vIE5PVEU6IE1heCBpcyBzdWNoIGJlY2F1c2Ugb2YgZ2VuZXJhbGl6ZWQgUmllbWFubiBoeXBvdGhlc2lzLlxuICB2YXIgbHBvdyA9IHRoaXMubS5zdWJuKDEpLmlzaHJuKDEpO1xuICB2YXIgeiA9IHRoaXMubS5iaXRMZW5ndGgoKTtcbiAgeiA9IG5ldyBCTigyICogeiAqIHopLnRvUmVkKHRoaXMpO1xuICB3aGlsZSAodGhpcy5wb3coeiwgbHBvdykuY21wKG5PbmUpICE9PSAwKVxuICAgIHoucmVkSUFkZChuT25lKTtcblxuICB2YXIgYyA9IHRoaXMucG93KHosIHEpO1xuICB2YXIgciA9IHRoaXMucG93KGEsIHEuYWRkbigxKS5pc2hybigxKSk7XG4gIHZhciB0ID0gdGhpcy5wb3coYSwgcSk7XG4gIHZhciBtID0gcztcbiAgd2hpbGUgKHQuY21wKG9uZSkgIT09IDApIHtcbiAgICB2YXIgdG1wID0gdDtcbiAgICBmb3IgKHZhciBpID0gMDsgdG1wLmNtcChvbmUpICE9PSAwOyBpKyspXG4gICAgICB0bXAgPSB0bXAucmVkU3FyKCk7XG4gICAgYXNzZXJ0KGkgPCBtKTtcbiAgICB2YXIgYiA9IHRoaXMucG93KGMsIG5ldyBCTigxKS5pc2hsbihtIC0gaSAtIDEpKTtcblxuICAgIHIgPSByLnJlZE11bChiKTtcbiAgICBjID0gYi5yZWRTcXIoKTtcbiAgICB0ID0gdC5yZWRNdWwoYyk7XG4gICAgbSA9IGk7XG4gIH1cblxuICByZXR1cm4gcjtcbn07XG5cblJlZC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0oYSkge1xuICB2YXIgaW52ID0gYS5faW52bXAodGhpcy5tKTtcbiAgaWYgKGludi5zaWduKSB7XG4gICAgaW52LnNpZ24gPSBmYWxzZTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGludikucmVkTmVnKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpO1xuICB9XG59O1xuXG5SZWQucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyhhLCBudW0pIHtcbiAgdmFyIHcgPSBbXTtcblxuICBpZiAobnVtLmNtcG4oMCkgPT09IDApXG4gICAgcmV0dXJuIG5ldyBCTigxKTtcblxuICB2YXIgcSA9IG51bS5jbG9uZSgpO1xuXG4gIHdoaWxlIChxLmNtcG4oMCkgIT09IDApIHtcbiAgICB3LnB1c2gocS5hbmRsbigxKSk7XG4gICAgcS5pc2hybigxKTtcbiAgfVxuXG4gIC8vIFNraXAgbGVhZGluZyB6ZXJvZXNcbiAgdmFyIHJlcyA9IGE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdy5sZW5ndGg7IGkrKywgcmVzID0gdGhpcy5zcXIocmVzKSlcbiAgICBpZiAod1tpXSAhPT0gMClcbiAgICAgIGJyZWFrO1xuXG4gIGlmICgrK2kgPCB3Lmxlbmd0aCkge1xuICAgIGZvciAodmFyIHEgPSB0aGlzLnNxcihyZXMpOyBpIDwgdy5sZW5ndGg7IGkrKywgcSA9IHRoaXMuc3FyKHEpKSB7XG4gICAgICBpZiAod1tpXSA9PT0gMClcbiAgICAgICAgY29udGludWU7XG4gICAgICByZXMgPSB0aGlzLm11bChyZXMsIHEpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXM7XG59O1xuXG5SZWQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyhudW0pIHtcbiAgdmFyIHIgPSBudW0ubW9kKHRoaXMubSk7XG4gIGlmIChyID09PSBudW0pXG4gICAgcmV0dXJuIHIuY2xvbmUoKTtcbiAgZWxzZVxuICAgIHJldHVybiByO1xufTtcblxuUmVkLnByb3RvdHlwZS5jb252ZXJ0RnJvbSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tKG51bSkge1xuICB2YXIgcmVzID0gbnVtLmNsb25lKCk7XG4gIHJlcy5yZWQgPSBudWxsO1xuICByZXR1cm4gcmVzO1xufTtcblxuLy9cbi8vIE1vbnRnb21lcnkgbWV0aG9kIGVuZ2luZVxuLy9cblxuQk4ubW9udCA9IGZ1bmN0aW9uIG1vbnQobnVtKSB7XG4gIHJldHVybiBuZXcgTW9udChudW0pO1xufTtcblxuZnVuY3Rpb24gTW9udChtKSB7XG4gIFJlZC5jYWxsKHRoaXMsIG0pO1xuXG4gIHRoaXMuc2hpZnQgPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gIGlmICh0aGlzLnNoaWZ0ICUgMjYgIT09IDApXG4gICAgdGhpcy5zaGlmdCArPSAyNiAtICh0aGlzLnNoaWZ0ICUgMjYpO1xuICB0aGlzLnIgPSBuZXcgQk4oMSkuaXNobG4odGhpcy5zaGlmdCk7XG4gIHRoaXMucjIgPSB0aGlzLmltb2QodGhpcy5yLnNxcigpKTtcbiAgdGhpcy5yaW52ID0gdGhpcy5yLl9pbnZtcCh0aGlzLm0pO1xuXG4gIHRoaXMubWludiA9IHRoaXMucmludi5tdWwodGhpcy5yKS5pc3VibigxKS5kaXYodGhpcy5tKTtcbiAgdGhpcy5taW52LnNpZ24gPSB0cnVlO1xuICB0aGlzLm1pbnYgPSB0aGlzLm1pbnYubW9kKHRoaXMucik7XG59XG5pbmhlcml0cyhNb250LCBSZWQpO1xuXG5Nb250LnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8obnVtKSB7XG4gIHJldHVybiB0aGlzLmltb2QobnVtLnNobG4odGhpcy5zaGlmdCkpO1xufTtcblxuTW9udC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbShudW0pIHtcbiAgdmFyIHIgPSB0aGlzLmltb2QobnVtLm11bCh0aGlzLnJpbnYpKTtcbiAgci5yZWQgPSBudWxsO1xuICByZXR1cm4gcjtcbn07XG5cbk1vbnQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsKGEsIGIpIHtcbiAgaWYgKGEuY21wbigwKSA9PT0gMCB8fCBiLmNtcG4oMCkgPT09IDApIHtcbiAgICBhLndvcmRzWzBdID0gMDtcbiAgICBhLmxlbmd0aCA9IDE7XG4gICAgcmV0dXJuIGE7XG4gIH1cblxuICB2YXIgdCA9IGEuaW11bChiKTtcbiAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTtcbiAgdmFyIHUgPSB0LmlzdWIoYykuaXNocm4odGhpcy5zaGlmdCk7XG4gIHZhciByZXMgPSB1O1xuICBpZiAodS5jbXAodGhpcy5tKSA+PSAwKVxuICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKVxuICAgIHJlcyA9IHUuaWFkZCh0aGlzLm0pO1xuXG4gIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xufTtcblxuTW9udC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKGEsIGIpIHtcbiAgaWYgKGEuY21wbigwKSA9PT0gMCB8fCBiLmNtcG4oMCkgPT09IDApXG4gICAgcmV0dXJuIG5ldyBCTigwKS5fZm9yY2VSZWQodGhpcyk7XG5cbiAgdmFyIHQgPSBhLm11bChiKTtcbiAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTtcbiAgdmFyIHUgPSB0LmlzdWIoYykuaXNocm4odGhpcy5zaGlmdCk7XG4gIHZhciByZXMgPSB1O1xuICBpZiAodS5jbXAodGhpcy5tKSA+PSAwKVxuICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKVxuICAgIHJlcyA9IHUuaWFkZCh0aGlzLm0pO1xuXG4gIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xufTtcblxuTW9udC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0oYSkge1xuICAvLyAoQVIpXi0xICogUl4yID0gKEFeLTEgKiBSXi0xKSAqIFJeMiA9IEFeLTEgKiBSXG4gIHZhciByZXMgPSB0aGlzLmltb2QoYS5faW52bXAodGhpcy5tKS5tdWwodGhpcy5yMikpO1xuICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbn07XG5cbn0pKHR5cGVvZiBtb2R1bGUgPT09ICd1bmRlZmluZWQnIHx8IG1vZHVsZSwgdGhpcyk7XG4iLCIndXNlIHN0cmljdCdcbmV4cG9ydHNbJzEuMy4xMzIuMC4xMCddID0gJ3NlY3AyNTZrMSdcblxuZXhwb3J0c1snMS4zLjEzMi4wLjMzJ10gPSAncDIyNCdcblxuZXhwb3J0c1snMS4yLjg0MC4xMDA0NS4zLjEuMSddID0gJ3AxOTInXG5cbmV4cG9ydHNbJzEuMi44NDAuMTAwNDUuMy4xLjcnXSA9ICdwMjU2J1xuIiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xuJ3VzZSBzdHJpY3QnXG5leHBvcnRzWydSU0EtU0hBMjI0J10gPSBleHBvcnRzLnNoYTIyNFdpdGhSU0FFbmNyeXB0aW9uID0ge1xuICBzaWduOiAncnNhJyxcbiAgaGFzaDogJ3NoYTIyNCcsXG4gIGlkOiBuZXcgQnVmZmVyKCczMDJkMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDQwNTAwMDQxYycsICdoZXgnKVxufVxuZXhwb3J0c1snUlNBLVNIQTI1NiddID0gZXhwb3J0cy5zaGEyNTZXaXRoUlNBRW5jcnlwdGlvbiA9IHtcbiAgc2lnbjogJ3JzYScsXG4gIGhhc2g6ICdzaGEyNTYnLFxuICBpZDogbmV3IEJ1ZmZlcignMzAzMTMwMGQwNjA5NjA4NjQ4MDE2NTAzMDQwMjAxMDUwMDA0MjAnLCAnaGV4Jylcbn1cbmV4cG9ydHNbJ1JTQS1TSEEzODQnXSA9IGV4cG9ydHMuc2hhMzg0V2l0aFJTQUVuY3J5cHRpb24gPSB7XG4gIHNpZ246ICdyc2EnLFxuICBoYXNoOiAnc2hhMzg0JyxcbiAgaWQ6IG5ldyBCdWZmZXIoJzMwNDEzMDBkMDYwOTYwODY0ODAxNjUwMzA0MDIwMjA1MDAwNDMwJywgJ2hleCcpXG59XG5leHBvcnRzWydSU0EtU0hBNTEyJ10gPSBleHBvcnRzLnNoYTUxMldpdGhSU0FFbmNyeXB0aW9uID0ge1xuICBzaWduOiAncnNhJyxcbiAgaGFzaDogJ3NoYTUxMicsXG4gIGlkOiBuZXcgQnVmZmVyKCczMDUxMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDMwNTAwMDQ0MCcsICdoZXgnKVxufVxuZXhwb3J0c1snUlNBLVNIQTEnXSA9IHtcbiAgc2lnbjogJ3JzYScsXG4gIGhhc2g6ICdzaGExJyxcbiAgaWQ6IG5ldyBCdWZmZXIoJzMwMjEzMDA5MDYwNTJiMGUwMzAyMWEwNTAwMDQxNCcsICdoZXgnKVxufVxuZXhwb3J0c1snZWNkc2Etd2l0aC1TSEExJ10gPSB7XG4gIHNpZ246ICdlY2RzYScsXG4gIGhhc2g6ICdzaGExJyxcbiAgaWQ6IG5ldyBCdWZmZXIoJycsICdoZXgnKVxufVxuZXhwb3J0cy5EU0EgPSBleHBvcnRzWydEU0EtU0hBMSddID0gZXhwb3J0c1snRFNBLVNIQSddID0ge1xuICBzaWduOiAnZHNhJyxcbiAgaGFzaDogJ3NoYTEnLFxuICBpZDogbmV3IEJ1ZmZlcignJywgJ2hleCcpXG59XG5leHBvcnRzWydEU0EtU0hBMjI0J10gPSBleHBvcnRzWydEU0EtV0lUSC1TSEEyMjQnXSA9IHtcbiAgc2lnbjogJ2RzYScsXG4gIGhhc2g6ICdzaGEyMjQnLFxuICBpZDogbmV3IEJ1ZmZlcignJywgJ2hleCcpXG59XG5leHBvcnRzWydEU0EtU0hBMjU2J10gPSBleHBvcnRzWydEU0EtV0lUSC1TSEEyNTYnXSA9IHtcbiAgc2lnbjogJ2RzYScsXG4gIGhhc2g6ICdzaGEyNTYnLFxuICBpZDogbmV3IEJ1ZmZlcignJywgJ2hleCcpXG59XG5leHBvcnRzWydEU0EtU0hBMzg0J10gPSBleHBvcnRzWydEU0EtV0lUSC1TSEEzODQnXSA9IHtcbiAgc2lnbjogJ2RzYScsXG4gIGhhc2g6ICdzaGEzODQnLFxuICBpZDogbmV3IEJ1ZmZlcignJywgJ2hleCcpXG59XG5leHBvcnRzWydEU0EtU0hBNTEyJ10gPSBleHBvcnRzWydEU0EtV0lUSC1TSEE1MTInXSA9IHtcbiAgc2lnbjogJ2RzYScsXG4gIGhhc2g6ICdzaGE1MTInLFxuICBpZDogbmV3IEJ1ZmZlcignJywgJ2hleCcpXG59XG5leHBvcnRzWydEU0EtUklQRU1EMTYwJ10gPSB7XG4gIHNpZ246ICdkc2EnLFxuICBoYXNoOiAncm1kMTYwJyxcbiAgaWQ6IG5ldyBCdWZmZXIoJycsICdoZXgnKVxufVxuZXhwb3J0c1snUlNBLVJJUEVNRDE2MCddID0gZXhwb3J0cy5yaXBlbWQxNjBXaXRoUlNBID0ge1xuICBzaWduOiAncnNhJyxcbiAgaGFzaDogJ3JtZDE2MCcsXG4gIGlkOiBuZXcgQnVmZmVyKCczMDIxMzAwOTA2MDUyYjI0MDMwMjAxMDUwMDA0MTQnLCAnaGV4Jylcbn1cbmV4cG9ydHNbJ1JTQS1NRDUnXSA9IGV4cG9ydHMubWQ1V2l0aFJTQUVuY3J5cHRpb24gPSB7XG4gIHNpZ246ICdyc2EnLFxuICBoYXNoOiAnbWQ1JyxcbiAgaWQ6IG5ldyBCdWZmZXIoJzMwMjAzMDBjMDYwODJhODY0ODg2ZjcwZDAyMDUwNTAwMDQxMCcsICdoZXgnKVxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMXphV2R1TDJGc1oyOXpMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpZDFjMlVnYzNSeWFXTjBKMXh1Wlhod2IzSjBjMXNuVWxOQkxWTklRVEl5TkNkZElEMGdaWGh3YjNKMGN5NXphR0V5TWpSWGFYUm9VbE5CUlc1amNubHdkR2x2YmlBOUlIdGNiaUFnYzJsbmJqb2dKM0p6WVNjc1hHNGdJR2hoYzJnNklDZHphR0V5TWpRbkxGeHVJQ0JwWkRvZ2JtVjNJRUoxWm1abGNpZ25NekF5WkRNd01HUXdOakE1TmpBNE5qUTRNREUyTlRBek1EUXdNakEwTURVd01EQTBNV01uTENBbmFHVjRKeWxjYm4xY2JtVjRjRzl5ZEhOYkoxSlRRUzFUU0VFeU5UWW5YU0E5SUdWNGNHOXlkSE11YzJoaE1qVTJWMmwwYUZKVFFVVnVZM0o1Y0hScGIyNGdQU0I3WEc0Z0lITnBaMjQ2SUNkeWMyRW5MRnh1SUNCb1lYTm9PaUFuYzJoaE1qVTJKeXhjYmlBZ2FXUTZJRzVsZHlCQ2RXWm1aWElvSnpNd016RXpNREJrTURZd09UWXdPRFkwT0RBeE5qVXdNekEwTURJd01UQTFNREF3TkRJd0p5d2dKMmhsZUNjcFhHNTlYRzVsZUhCdmNuUnpXeWRTVTBFdFUwaEJNemcwSjEwZ1BTQmxlSEJ2Y25SekxuTm9ZVE00TkZkcGRHaFNVMEZGYm1OeWVYQjBhVzl1SUQwZ2UxeHVJQ0J6YVdkdU9pQW5jbk5oSnl4Y2JpQWdhR0Z6YURvZ0ozTm9ZVE00TkNjc1hHNGdJR2xrT2lCdVpYY2dRblZtWm1WeUtDY3pNRFF4TXpBd1pEQTJNRGsyTURnMk5EZ3dNVFkxTURNd05EQXlNREl3TlRBd01EUXpNQ2NzSUNkb1pYZ25LVnh1ZlZ4dVpYaHdiM0owYzFzblVsTkJMVk5JUVRVeE1pZGRJRDBnWlhod2IzSjBjeTV6YUdFMU1USlhhWFJvVWxOQlJXNWpjbmx3ZEdsdmJpQTlJSHRjYmlBZ2MybG5iam9nSjNKellTY3NYRzRnSUdoaGMyZzZJQ2R6YUdFMU1USW5MRnh1SUNCcFpEb2dibVYzSUVKMVptWmxjaWduTXpBMU1UTXdNR1F3TmpBNU5qQTROalE0TURFMk5UQXpNRFF3TWpBek1EVXdNREEwTkRBbkxDQW5hR1Y0SnlsY2JuMWNibVY0Y0c5eWRITmJKMUpUUVMxVFNFRXhKMTBnUFNCN1hHNGdJSE5wWjI0NklDZHljMkVuTEZ4dUlDQm9ZWE5vT2lBbmMyaGhNU2NzWEc0Z0lHbGtPaUJ1WlhjZ1FuVm1abVZ5S0Njek1ESXhNekF3T1RBMk1EVXlZakJsTURNd01qRmhNRFV3TURBME1UUW5MQ0FuYUdWNEp5bGNibjFjYm1WNGNHOXlkSE5iSjJWalpITmhMWGRwZEdndFUwaEJNU2RkSUQwZ2UxeHVJQ0J6YVdkdU9pQW5aV05rYzJFbkxGeHVJQ0JvWVhOb09pQW5jMmhoTVNjc1hHNGdJR2xrT2lCdVpYY2dRblZtWm1WeUtDY25MQ0FuYUdWNEp5bGNibjFjYm1WNGNHOXlkSE11UkZOQklEMGdaWGh3YjNKMGMxc25SRk5CTFZOSVFURW5YU0E5SUdWNGNHOXlkSE5iSjBSVFFTMVRTRUVuWFNBOUlIdGNiaUFnYzJsbmJqb2dKMlJ6WVNjc1hHNGdJR2hoYzJnNklDZHphR0V4Snl4Y2JpQWdhV1E2SUc1bGR5QkNkV1ptWlhJb0p5Y3NJQ2RvWlhnbktWeHVmVnh1Wlhod2IzSjBjMXNuUkZOQkxWTklRVEl5TkNkZElEMGdaWGh3YjNKMGMxc25SRk5CTFZkSlZFZ3RVMGhCTWpJMEoxMGdQU0I3WEc0Z0lITnBaMjQ2SUNka2MyRW5MRnh1SUNCb1lYTm9PaUFuYzJoaE1qSTBKeXhjYmlBZ2FXUTZJRzVsZHlCQ2RXWm1aWElvSnljc0lDZG9aWGduS1Z4dWZWeHVaWGh3YjNKMGMxc25SRk5CTFZOSVFUSTFOaWRkSUQwZ1pYaHdiM0owYzFzblJGTkJMVmRKVkVndFUwaEJNalUySjEwZ1BTQjdYRzRnSUhOcFoyNDZJQ2RrYzJFbkxGeHVJQ0JvWVhOb09pQW5jMmhoTWpVMkp5eGNiaUFnYVdRNklHNWxkeUJDZFdabVpYSW9KeWNzSUNkb1pYZ25LVnh1ZlZ4dVpYaHdiM0owYzFzblJGTkJMVk5JUVRNNE5DZGRJRDBnWlhod2IzSjBjMXNuUkZOQkxWZEpWRWd0VTBoQk16ZzBKMTBnUFNCN1hHNGdJSE5wWjI0NklDZGtjMkVuTEZ4dUlDQm9ZWE5vT2lBbmMyaGhNemcwSnl4Y2JpQWdhV1E2SUc1bGR5QkNkV1ptWlhJb0p5Y3NJQ2RvWlhnbktWeHVmVnh1Wlhod2IzSjBjMXNuUkZOQkxWTklRVFV4TWlkZElEMGdaWGh3YjNKMGMxc25SRk5CTFZkSlZFZ3RVMGhCTlRFeUoxMGdQU0I3WEc0Z0lITnBaMjQ2SUNka2MyRW5MRnh1SUNCb1lYTm9PaUFuYzJoaE5URXlKeXhjYmlBZ2FXUTZJRzVsZHlCQ2RXWm1aWElvSnljc0lDZG9aWGduS1Z4dWZWeHVaWGh3YjNKMGMxc25SRk5CTFZKSlVFVk5SREUyTUNkZElEMGdlMXh1SUNCemFXZHVPaUFuWkhOaEp5eGNiaUFnYUdGemFEb2dKM0p0WkRFMk1DY3NYRzRnSUdsa09pQnVaWGNnUW5WbVptVnlLQ2NuTENBbmFHVjRKeWxjYm4xY2JtVjRjRzl5ZEhOYkoxSlRRUzFTU1ZCRlRVUXhOakFuWFNBOUlHVjRjRzl5ZEhNdWNtbHdaVzFrTVRZd1YybDBhRkpUUVNBOUlIdGNiaUFnYzJsbmJqb2dKM0p6WVNjc1hHNGdJR2hoYzJnNklDZHliV1F4TmpBbkxGeHVJQ0JwWkRvZ2JtVjNJRUoxWm1abGNpZ25NekF5TVRNd01Ea3dOakExTW1JeU5EQXpNREl3TVRBMU1EQXdOREUwSnl3Z0oyaGxlQ2NwWEc1OVhHNWxlSEJ2Y25Seld5ZFNVMEV0VFVRMUoxMGdQU0JsZUhCdmNuUnpMbTFrTlZkcGRHaFNVMEZGYm1OeWVYQjBhVzl1SUQwZ2UxeHVJQ0J6YVdkdU9pQW5jbk5oSnl4Y2JpQWdhR0Z6YURvZ0oyMWtOU2NzWEc0Z0lHbGtPaUJ1WlhjZ1FuVm1abVZ5S0Njek1ESXdNekF3WXpBMk1EZ3lZVGcyTkRnNE5tWTNNR1F3TWpBMU1EVXdNREEwTVRBbkxDQW5hR1Y0SnlsY2JuMWNiaUpkZlE9PSIsInZhciBlYnRrID0gcmVxdWlyZSgnZXZwX2J5dGVzdG9rZXknKVxudmFyIGFlcyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzL2Jyb3dzZXInKVxudmFyIERFUyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktZGVzJylcbnZhciBkZXNNb2RlcyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktZGVzL21vZGVzJylcbnZhciBhZXNNb2RlcyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzL21vZGVzJylcbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHZhciBrZXlMZW4sIGl2TGVuXG4gIHN1aXRlID0gc3VpdGUudG9Mb3dlckNhc2UoKVxuICBpZiAoYWVzTW9kZXNbc3VpdGVdKSB7XG4gICAga2V5TGVuID0gYWVzTW9kZXNbc3VpdGVdLmtleVxuICAgIGl2TGVuID0gYWVzTW9kZXNbc3VpdGVdLml2XG4gIH0gZWxzZSBpZiAoZGVzTW9kZXNbc3VpdGVdKSB7XG4gICAga2V5TGVuID0gZGVzTW9kZXNbc3VpdGVdLmtleSAqIDhcbiAgICBpdkxlbiA9IGRlc01vZGVzW3N1aXRlXS5pdlxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwga2V5TGVuLCBpdkxlbilcbiAgcmV0dXJuIGNyZWF0ZUNpcGhlcml2KHN1aXRlLCBrZXlzLmtleSwga2V5cy5pdilcbn1cbmZ1bmN0aW9uIGNyZWF0ZURlY2lwaGVyIChzdWl0ZSwgcGFzc3dvcmQpIHtcbiAgdmFyIGtleUxlbiwgaXZMZW5cbiAgc3VpdGUgPSBzdWl0ZS50b0xvd2VyQ2FzZSgpXG4gIGlmIChhZXNNb2Rlc1tzdWl0ZV0pIHtcbiAgICBrZXlMZW4gPSBhZXNNb2Rlc1tzdWl0ZV0ua2V5XG4gICAgaXZMZW4gPSBhZXNNb2Rlc1tzdWl0ZV0uaXZcbiAgfSBlbHNlIGlmIChkZXNNb2Rlc1tzdWl0ZV0pIHtcbiAgICBrZXlMZW4gPSBkZXNNb2Rlc1tzdWl0ZV0ua2V5ICogOFxuICAgIGl2TGVuID0gZGVzTW9kZXNbc3VpdGVdLml2XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcbiAgfVxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBrZXlMZW4sIGl2TGVuKVxuICByZXR1cm4gY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlcml2IChzdWl0ZSwga2V5LCBpdikge1xuICBzdWl0ZSA9IHN1aXRlLnRvTG93ZXJDYXNlKClcbiAgaWYgKGFlc01vZGVzW3N1aXRlXSkge1xuICAgIHJldHVybiBhZXMuY3JlYXRlQ2lwaGVyaXYoc3VpdGUsIGtleSwgaXYpXG4gIH0gZWxzZSBpZiAoZGVzTW9kZXNbc3VpdGVdKSB7XG4gICAgcmV0dXJuIG5ldyBERVMoe1xuICAgICAga2V5OiBrZXksXG4gICAgICBpdjogaXYsXG4gICAgICBtb2RlOiBzdWl0ZVxuICAgIH0pXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcbiAgfVxufVxuZnVuY3Rpb24gY3JlYXRlRGVjaXBoZXJpdiAoc3VpdGUsIGtleSwgaXYpIHtcbiAgc3VpdGUgPSBzdWl0ZS50b0xvd2VyQ2FzZSgpXG4gIGlmIChhZXNNb2Rlc1tzdWl0ZV0pIHtcbiAgICByZXR1cm4gYWVzLmNyZWF0ZURlY2lwaGVyaXYoc3VpdGUsIGtleSwgaXYpXG4gIH0gZWxzZSBpZiAoZGVzTW9kZXNbc3VpdGVdKSB7XG4gICAgcmV0dXJuIG5ldyBERVMoe1xuICAgICAga2V5OiBrZXksXG4gICAgICBpdjogaXYsXG4gICAgICBtb2RlOiBzdWl0ZSxcbiAgICAgIGRlY3J5cHQ6IHRydWVcbiAgICB9KVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbn1cbmV4cG9ydHMuY3JlYXRlQ2lwaGVyID0gZXhwb3J0cy5DaXBoZXIgPSBjcmVhdGVDaXBoZXJcbmV4cG9ydHMuY3JlYXRlQ2lwaGVyaXYgPSBleHBvcnRzLkNpcGhlcml2ID0gY3JlYXRlQ2lwaGVyaXZcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXIgPSBleHBvcnRzLkRlY2lwaGVyID0gY3JlYXRlRGVjaXBoZXJcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXJpdiA9IGV4cG9ydHMuRGVjaXBoZXJpdiA9IGNyZWF0ZURlY2lwaGVyaXZcbmZ1bmN0aW9uIGdldENpcGhlcnMgKCkge1xuICByZXR1cm4gT2JqZWN0LmtleXMoZGVzTW9kZXMpLmNvbmNhdChhZXMuZ2V0Q2lwaGVycygpKVxufVxuZXhwb3J0cy5saXN0Q2lwaGVycyA9IGV4cG9ydHMuZ2V0Q2lwaGVycyA9IGdldENpcGhlcnNcbiIsImV4cG9ydHNbJ2Rlcy1lY2InXSA9IHtcbiAga2V5OiA4LFxuICBpdjogMFxufVxuZXhwb3J0c1snZGVzLWNiYyddID0gZXhwb3J0cy5kZXMgPSB7XG4gIGtleTogOCxcbiAgaXY6IDhcbn1cbmV4cG9ydHNbJ2Rlcy1lZGUzLWNiYyddID0gZXhwb3J0cy5kZXMzID0ge1xuICBrZXk6IDI0LFxuICBpdjogOFxufVxuZXhwb3J0c1snZGVzLWVkZTMnXSA9IHtcbiAga2V5OiAyNCxcbiAgaXY6IDBcbn1cbmV4cG9ydHNbJ2Rlcy1lZGUtY2JjJ10gPSB7XG4gIGtleTogMTYsXG4gIGl2OiA4XG59XG5leHBvcnRzWydkZXMtZWRlJ10gPSB7XG4gIGtleTogMTYsXG4gIGl2OiAwXG59XG4iLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG52YXIgQ2lwaGVyQmFzZSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBkZXMgPSByZXF1aXJlKCdkZXMuanMnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG52YXIgbW9kZXMgPSB7XG4gICdkZXMtZWRlMy1jYmMnOiBkZXMuQ0JDLmluc3RhbnRpYXRlKGRlcy5FREUpLFxuICAnZGVzLWVkZTMnOiBkZXMuRURFLFxuICAnZGVzLWVkZS1jYmMnOiBkZXMuQ0JDLmluc3RhbnRpYXRlKGRlcy5FREUpLFxuICAnZGVzLWVkZSc6IGRlcy5FREUsXG4gICdkZXMtY2JjJzogZGVzLkNCQy5pbnN0YW50aWF0ZShkZXMuREVTKSxcbiAgJ2Rlcy1lY2InOiBkZXMuREVTXG59XG5tb2Rlcy5kZXMgPSBtb2Rlc1snZGVzLWNiYyddXG5tb2Rlcy5kZXMzID0gbW9kZXNbJ2Rlcy1lZGUzLWNiYyddXG5tb2R1bGUuZXhwb3J0cyA9IERFU1xuaW5oZXJpdHMoREVTLCBDaXBoZXJCYXNlKVxuZnVuY3Rpb24gREVTIChvcHRzKSB7XG4gIENpcGhlckJhc2UuY2FsbCh0aGlzKVxuICB2YXIgbW9kZU5hbWUgPSBvcHRzLm1vZGUudG9Mb3dlckNhc2UoKVxuICB2YXIgbW9kZSA9IG1vZGVzW21vZGVOYW1lXVxuICB2YXIgdHlwZVxuICBpZiAob3B0cy5kZWNyeXB0KSB7XG4gICAgdHlwZSA9ICdkZWNyeXB0J1xuICB9IGVsc2Uge1xuICAgIHR5cGUgPSAnZW5jcnlwdCdcbiAgfVxuICB2YXIga2V5ID0gb3B0cy5rZXlcbiAgaWYgKG1vZGVOYW1lID09PSAnZGVzLWVkZScgfHwgbW9kZU5hbWUgPT09ICdkZXMtZWRlLWNiYycpIHtcbiAgICBrZXkgPSBCdWZmZXIuY29uY2F0KFtrZXksIGtleS5zbGljZSgwLCA4KV0pXG4gIH1cbiAgdmFyIGl2ID0gb3B0cy5pdlxuICB0aGlzLl9kZXMgPSBtb2RlLmNyZWF0ZSh7XG4gICAga2V5OiBrZXksXG4gICAgaXY6IGl2LFxuICAgIHR5cGU6IHR5cGVcbiAgfSlcbn1cbkRFUy5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHJldHVybiBuZXcgQnVmZmVyKHRoaXMuX2Rlcy51cGRhdGUoZGF0YSkpXG59XG5ERVMucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBCdWZmZXIodGhpcy5fZGVzLmZpbmFsKCkpXG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WW5KdmQzTmxjbWxtZVMxamFYQm9aWEl2Ym05a1pWOXRiMlIxYkdWekwySnliM2R6WlhKcFpua3RaR1Z6TDJsdVpHVjRMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2labWxzWlNJNkltZGxibVZ5WVhSbFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUoyWVhJZ1EybHdhR1Z5UW1GelpTQTlJSEpsY1hWcGNtVW9KMk5wY0dobGNpMWlZWE5sSnlsY2JuWmhjaUJrWlhNZ1BTQnlaWEYxYVhKbEtDZGtaWE11YW5NbktWeHVkbUZ5SUdsdWFHVnlhWFJ6SUQwZ2NtVnhkV2x5WlNnbmFXNW9aWEpwZEhNbktWeHVYRzUyWVhJZ2JXOWtaWE1nUFNCN1hHNGdJQ2RrWlhNdFpXUmxNeTFqWW1Nbk9pQmtaWE11UTBKRExtbHVjM1JoYm5ScFlYUmxLR1JsY3k1RlJFVXBMRnh1SUNBblpHVnpMV1ZrWlRNbk9pQmtaWE11UlVSRkxGeHVJQ0FuWkdWekxXVmtaUzFqWW1Nbk9pQmtaWE11UTBKRExtbHVjM1JoYm5ScFlYUmxLR1JsY3k1RlJFVXBMRnh1SUNBblpHVnpMV1ZrWlNjNklHUmxjeTVGUkVVc1hHNGdJQ2RrWlhNdFkySmpKem9nWkdWekxrTkNReTVwYm5OMFlXNTBhV0YwWlNoa1pYTXVSRVZUS1N4Y2JpQWdKMlJsY3kxbFkySW5PaUJrWlhNdVJFVlRYRzU5WEc1dGIyUmxjeTVrWlhNZ1BTQnRiMlJsYzFzblpHVnpMV05pWXlkZFhHNXRiMlJsY3k1a1pYTXpJRDBnYlc5a1pYTmJKMlJsY3kxbFpHVXpMV05pWXlkZFhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlFUkZVMXh1YVc1b1pYSnBkSE1vUkVWVExDQkRhWEJvWlhKQ1lYTmxLVnh1Wm5WdVkzUnBiMjRnUkVWVElDaHZjSFJ6S1NCN1hHNGdJRU5wY0dobGNrSmhjMlV1WTJGc2JDaDBhR2x6S1Z4dUlDQjJZWElnYlc5a1pVNWhiV1VnUFNCdmNIUnpMbTF2WkdVdWRHOU1iM2RsY2tOaGMyVW9LVnh1SUNCMllYSWdiVzlrWlNBOUlHMXZaR1Z6VzIxdlpHVk9ZVzFsWFZ4dUlDQjJZWElnZEhsd1pWeHVJQ0JwWmlBb2IzQjBjeTVrWldOeWVYQjBLU0I3WEc0Z0lDQWdkSGx3WlNBOUlDZGtaV055ZVhCMEoxeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lIUjVjR1VnUFNBblpXNWpjbmx3ZENkY2JpQWdmVnh1SUNCMllYSWdhMlY1SUQwZ2IzQjBjeTVyWlhsY2JpQWdhV1lnS0cxdlpHVk9ZVzFsSUQwOVBTQW5aR1Z6TFdWa1pTY2dmSHdnYlc5a1pVNWhiV1VnUFQwOUlDZGtaWE10WldSbExXTmlZeWNwSUh0Y2JpQWdJQ0JyWlhrZ1BTQkNkV1ptWlhJdVkyOXVZMkYwS0Z0clpYa3NJR3RsZVM1emJHbGpaU2d3TENBNEtWMHBYRzRnSUgxY2JpQWdkbUZ5SUdsMklEMGdiM0IwY3k1cGRseHVJQ0IwYUdsekxsOWtaWE1nUFNCdGIyUmxMbU55WldGMFpTaDdYRzRnSUNBZ2EyVjVPaUJyWlhrc1hHNGdJQ0FnYVhZNklHbDJMRnh1SUNBZ0lIUjVjR1U2SUhSNWNHVmNiaUFnZlNsY2JuMWNia1JGVXk1d2NtOTBiM1I1Y0dVdVgzVndaR0YwWlNBOUlHWjFibU4wYVc5dUlDaGtZWFJoS1NCN1hHNGdJSEpsZEhWeWJpQnVaWGNnUW5WbVptVnlLSFJvYVhNdVgyUmxjeTUxY0dSaGRHVW9aR0YwWVNrcFhHNTlYRzVFUlZNdWNISnZkRzkwZVhCbExsOW1hVzVoYkNBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ2NtVjBkWEp1SUc1bGR5QkNkV1ptWlhJb2RHaHBjeTVmWkdWekxtWnBibUZzS0NrcFhHNTlYRzRpWFgwPSIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy51dGlscyA9IHJlcXVpcmUoJy4vZGVzL3V0aWxzJyk7XG5leHBvcnRzLkNpcGhlciA9IHJlcXVpcmUoJy4vZGVzL2NpcGhlcicpO1xuZXhwb3J0cy5ERVMgPSByZXF1aXJlKCcuL2Rlcy9kZXMnKTtcbmV4cG9ydHMuQ0JDID0gcmVxdWlyZSgnLi9kZXMvY2JjJyk7XG5leHBvcnRzLkVERSA9IHJlcXVpcmUoJy4vZGVzL2VkZScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRShieXRlcywgb2ZmKSB7XG4gIHZhciByZXMgPSAgKGJ5dGVzWzAgKyBvZmZdIDw8IDI0KSB8XG4gICAgICAgICAgICAgKGJ5dGVzWzEgKyBvZmZdIDw8IDE2KSB8XG4gICAgICAgICAgICAgKGJ5dGVzWzIgKyBvZmZdIDw8IDgpIHxcbiAgICAgICAgICAgICBieXRlc1szICsgb2ZmXTtcbiAgcmV0dXJuIHJlcyA+Pj4gMDtcbn07XG5cbmV4cG9ydHMud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUoYnl0ZXMsIHZhbHVlLCBvZmYpIHtcbiAgYnl0ZXNbMCArIG9mZl0gPSB2YWx1ZSA+Pj4gMjQ7XG4gIGJ5dGVzWzEgKyBvZmZdID0gKHZhbHVlID4+PiAxNikgJiAweGZmO1xuICBieXRlc1syICsgb2ZmXSA9ICh2YWx1ZSA+Pj4gOCkgJiAweGZmO1xuICBieXRlc1szICsgb2ZmXSA9IHZhbHVlICYgMHhmZjtcbn07XG5cbmV4cG9ydHMuaXAgPSBmdW5jdGlvbiBpcChpbkwsIGluUiwgb3V0LCBvZmYpIHtcbiAgdmFyIG91dEwgPSAwO1xuICB2YXIgb3V0UiA9IDA7XG5cbiAgZm9yICh2YXIgaSA9IDY7IGkgPj0gMDsgaSAtPSAyKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgICAgb3V0TCA8PD0gMTtcbiAgICAgIG91dEwgfD0gKGluUiA+Pj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgICBvdXRMIDw8PSAxO1xuICAgICAgb3V0TCB8PSAoaW5MID4+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDY7IGkgPj0gMDsgaSAtPSAyKSB7XG4gICAgZm9yICh2YXIgaiA9IDE7IGogPD0gMjU7IGogKz0gOCkge1xuICAgICAgb3V0UiA8PD0gMTtcbiAgICAgIG91dFIgfD0gKGluUiA+Pj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgICBmb3IgKHZhciBqID0gMTsgaiA8PSAyNTsgaiArPSA4KSB7XG4gICAgICBvdXRSIDw8PSAxO1xuICAgICAgb3V0UiB8PSAoaW5MID4+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICB9XG5cbiAgb3V0W29mZiArIDBdID0gb3V0TCA+Pj4gMDtcbiAgb3V0W29mZiArIDFdID0gb3V0UiA+Pj4gMDtcbn07XG5cbmV4cG9ydHMucmlwID0gZnVuY3Rpb24gcmlwKGluTCwgaW5SLCBvdXQsIG9mZikge1xuICB2YXIgb3V0TCA9IDA7XG4gIHZhciBvdXRSID0gMDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIGZvciAodmFyIGogPSAyNDsgaiA+PSAwOyBqIC09IDgpIHtcbiAgICAgIG91dEwgPDw9IDE7XG4gICAgICBvdXRMIHw9IChpblIgPj4+IChqICsgaSkpICYgMTtcbiAgICAgIG91dEwgPDw9IDE7XG4gICAgICBvdXRMIHw9IChpbkwgPj4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gIH1cbiAgZm9yICh2YXIgaSA9IDQ7IGkgPCA4OyBpKyspIHtcbiAgICBmb3IgKHZhciBqID0gMjQ7IGogPj0gMDsgaiAtPSA4KSB7XG4gICAgICBvdXRSIDw8PSAxO1xuICAgICAgb3V0UiB8PSAoaW5SID4+PiAoaiArIGkpKSAmIDE7XG4gICAgICBvdXRSIDw8PSAxO1xuICAgICAgb3V0UiB8PSAoaW5MID4+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICB9XG5cbiAgb3V0W29mZiArIDBdID0gb3V0TCA+Pj4gMDtcbiAgb3V0W29mZiArIDFdID0gb3V0UiA+Pj4gMDtcbn07XG5cbmV4cG9ydHMucGMxID0gZnVuY3Rpb24gcGMxKGluTCwgaW5SLCBvdXQsIG9mZikge1xuICB2YXIgb3V0TCA9IDA7XG4gIHZhciBvdXRSID0gMDtcblxuICAvLyA3LCAxNSwgMjMsIDMxLCAzOSwgNDcsIDU1LCA2M1xuICAvLyA2LCAxNCwgMjIsIDMwLCAzOSwgNDcsIDU1LCA2M1xuICAvLyA1LCAxMywgMjEsIDI5LCAzOSwgNDcsIDU1LCA2M1xuICAvLyA0LCAxMiwgMjAsIDI4XG4gIGZvciAodmFyIGkgPSA3OyBpID49IDU7IGktLSkge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICAgIG91dEwgPDw9IDE7XG4gICAgICBvdXRMIHw9IChpblIgPj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgICBvdXRMIDw8PSAxO1xuICAgICAgb3V0TCB8PSAoaW5MID4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gIH1cbiAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgIG91dEwgPDw9IDE7XG4gICAgb3V0TCB8PSAoaW5SID4+IChqICsgaSkpICYgMTtcbiAgfVxuXG4gIC8vIDEsIDksIDE3LCAyNSwgMzMsIDQxLCA0OSwgNTdcbiAgLy8gMiwgMTAsIDE4LCAyNiwgMzQsIDQyLCA1MCwgNThcbiAgLy8gMywgMTEsIDE5LCAyNywgMzUsIDQzLCA1MSwgNTlcbiAgLy8gMzYsIDQ0LCA1MiwgNjBcbiAgZm9yICh2YXIgaSA9IDE7IGkgPD0gMzsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgICAgb3V0UiA8PD0gMTtcbiAgICAgIG91dFIgfD0gKGluUiA+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICAgIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICAgIG91dFIgPDw9IDE7XG4gICAgICBvdXRSIHw9IChpbkwgPj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgfVxuICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgb3V0UiA8PD0gMTtcbiAgICBvdXRSIHw9IChpbkwgPj4gKGogKyBpKSkgJiAxO1xuICB9XG5cbiAgb3V0W29mZiArIDBdID0gb3V0TCA+Pj4gMDtcbiAgb3V0W29mZiArIDFdID0gb3V0UiA+Pj4gMDtcbn07XG5cbmV4cG9ydHMucjI4c2hsID0gZnVuY3Rpb24gcjI4c2hsKG51bSwgc2hpZnQpIHtcbiAgcmV0dXJuICgobnVtIDw8IHNoaWZ0KSAmIDB4ZmZmZmZmZikgfCAobnVtID4+PiAoMjggLSBzaGlmdCkpO1xufTtcblxudmFyIHBjMnRhYmxlID0gW1xuICAvLyBpbkwgPT4gb3V0TFxuICAxNCwgMTEsIDE3LCA0LCAyNywgMjMsIDI1LCAwLFxuICAxMywgMjIsIDcsIDE4LCA1LCA5LCAxNiwgMjQsXG4gIDIsIDIwLCAxMiwgMjEsIDEsIDgsIDE1LCAyNixcblxuICAvLyBpblIgPT4gb3V0UlxuICAxNSwgNCwgMjUsIDE5LCA5LCAxLCAyNiwgMTYsXG4gIDUsIDExLCAyMywgOCwgMTIsIDcsIDE3LCAwLFxuICAyMiwgMywgMTAsIDE0LCA2LCAyMCwgMjcsIDI0XG5dO1xuXG5leHBvcnRzLnBjMiA9IGZ1bmN0aW9uIHBjMihpbkwsIGluUiwgb3V0LCBvZmYpIHtcbiAgdmFyIG91dEwgPSAwO1xuICB2YXIgb3V0UiA9IDA7XG5cbiAgdmFyIGxlbiA9IHBjMnRhYmxlLmxlbmd0aCA+Pj4gMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIG91dEwgPDw9IDE7XG4gICAgb3V0TCB8PSAoaW5MID4+PiBwYzJ0YWJsZVtpXSkgJiAweDE7XG4gIH1cbiAgZm9yICh2YXIgaSA9IGxlbjsgaSA8IHBjMnRhYmxlLmxlbmd0aDsgaSsrKSB7XG4gICAgb3V0UiA8PD0gMTtcbiAgICBvdXRSIHw9IChpblIgPj4+IHBjMnRhYmxlW2ldKSAmIDB4MTtcbiAgfVxuXG4gIG91dFtvZmYgKyAwXSA9IG91dEwgPj4+IDA7XG4gIG91dFtvZmYgKyAxXSA9IG91dFIgPj4+IDA7XG59O1xuXG5leHBvcnRzLmV4cGFuZCA9IGZ1bmN0aW9uIGV4cGFuZChyLCBvdXQsIG9mZikge1xuICB2YXIgb3V0TCA9IDA7XG4gIHZhciBvdXRSID0gMDtcblxuICBvdXRMID0gKChyICYgMSkgPDwgNSkgfCAociA+Pj4gMjcpO1xuICBmb3IgKHZhciBpID0gMjM7IGkgPj0gMTU7IGkgLT0gNCkge1xuICAgIG91dEwgPDw9IDY7XG4gICAgb3V0TCB8PSAociA+Pj4gaSkgJiAweDNmO1xuICB9XG4gIGZvciAodmFyIGkgPSAxMTsgaSA+PSAzOyBpIC09IDQpIHtcbiAgICBvdXRSIHw9IChyID4+PiBpKSAmIDB4M2Y7XG4gICAgb3V0UiA8PD0gNjtcbiAgfVxuICBvdXRSIHw9ICgociAmIDB4MWYpIDw8IDEpIHwgKHIgPj4+IDMxKTtcblxuICBvdXRbb2ZmICsgMF0gPSBvdXRMID4+PiAwO1xuICBvdXRbb2ZmICsgMV0gPSBvdXRSID4+PiAwO1xufTtcblxudmFyIHNUYWJsZSA9IFtcbiAgMTQsIDAsIDQsIDE1LCAxMywgNywgMSwgNCwgMiwgMTQsIDE1LCAyLCAxMSwgMTMsIDgsIDEsXG4gIDMsIDEwLCAxMCwgNiwgNiwgMTIsIDEyLCAxMSwgNSwgOSwgOSwgNSwgMCwgMywgNywgOCxcbiAgNCwgMTUsIDEsIDEyLCAxNCwgOCwgOCwgMiwgMTMsIDQsIDYsIDksIDIsIDEsIDExLCA3LFxuICAxNSwgNSwgMTIsIDExLCA5LCAzLCA3LCAxNCwgMywgMTAsIDEwLCAwLCA1LCA2LCAwLCAxMyxcblxuICAxNSwgMywgMSwgMTMsIDgsIDQsIDE0LCA3LCA2LCAxNSwgMTEsIDIsIDMsIDgsIDQsIDE0LFxuICA5LCAxMiwgNywgMCwgMiwgMSwgMTMsIDEwLCAxMiwgNiwgMCwgOSwgNSwgMTEsIDEwLCA1LFxuICAwLCAxMywgMTQsIDgsIDcsIDEwLCAxMSwgMSwgMTAsIDMsIDQsIDE1LCAxMywgNCwgMSwgMixcbiAgNSwgMTEsIDgsIDYsIDEyLCA3LCA2LCAxMiwgOSwgMCwgMywgNSwgMiwgMTQsIDE1LCA5LFxuXG4gIDEwLCAxMywgMCwgNywgOSwgMCwgMTQsIDksIDYsIDMsIDMsIDQsIDE1LCA2LCA1LCAxMCxcbiAgMSwgMiwgMTMsIDgsIDEyLCA1LCA3LCAxNCwgMTEsIDEyLCA0LCAxMSwgMiwgMTUsIDgsIDEsXG4gIDEzLCAxLCA2LCAxMCwgNCwgMTMsIDksIDAsIDgsIDYsIDE1LCA5LCAzLCA4LCAwLCA3LFxuICAxMSwgNCwgMSwgMTUsIDIsIDE0LCAxMiwgMywgNSwgMTEsIDEwLCA1LCAxNCwgMiwgNywgMTIsXG5cbiAgNywgMTMsIDEzLCA4LCAxNCwgMTEsIDMsIDUsIDAsIDYsIDYsIDE1LCA5LCAwLCAxMCwgMyxcbiAgMSwgNCwgMiwgNywgOCwgMiwgNSwgMTIsIDExLCAxLCAxMiwgMTAsIDQsIDE0LCAxNSwgOSxcbiAgMTAsIDMsIDYsIDE1LCA5LCAwLCAwLCA2LCAxMiwgMTAsIDExLCAxLCA3LCAxMywgMTMsIDgsXG4gIDE1LCA5LCAxLCA0LCAzLCA1LCAxNCwgMTEsIDUsIDEyLCAyLCA3LCA4LCAyLCA0LCAxNCxcblxuICAyLCAxNCwgMTIsIDExLCA0LCAyLCAxLCAxMiwgNywgNCwgMTAsIDcsIDExLCAxMywgNiwgMSxcbiAgOCwgNSwgNSwgMCwgMywgMTUsIDE1LCAxMCwgMTMsIDMsIDAsIDksIDE0LCA4LCA5LCA2LFxuICA0LCAxMSwgMiwgOCwgMSwgMTIsIDExLCA3LCAxMCwgMSwgMTMsIDE0LCA3LCAyLCA4LCAxMyxcbiAgMTUsIDYsIDksIDE1LCAxMiwgMCwgNSwgOSwgNiwgMTAsIDMsIDQsIDAsIDUsIDE0LCAzLFxuXG4gIDEyLCAxMCwgMSwgMTUsIDEwLCA0LCAxNSwgMiwgOSwgNywgMiwgMTIsIDYsIDksIDgsIDUsXG4gIDAsIDYsIDEzLCAxLCAzLCAxMywgNCwgMTQsIDE0LCAwLCA3LCAxMSwgNSwgMywgMTEsIDgsXG4gIDksIDQsIDE0LCAzLCAxNSwgMiwgNSwgMTIsIDIsIDksIDgsIDUsIDEyLCAxNSwgMywgMTAsXG4gIDcsIDExLCAwLCAxNCwgNCwgMSwgMTAsIDcsIDEsIDYsIDEzLCAwLCAxMSwgOCwgNiwgMTMsXG5cbiAgNCwgMTMsIDExLCAwLCAyLCAxMSwgMTQsIDcsIDE1LCA0LCAwLCA5LCA4LCAxLCAxMywgMTAsXG4gIDMsIDE0LCAxMiwgMywgOSwgNSwgNywgMTIsIDUsIDIsIDEwLCAxNSwgNiwgOCwgMSwgNixcbiAgMSwgNiwgNCwgMTEsIDExLCAxMywgMTMsIDgsIDEyLCAxLCAzLCA0LCA3LCAxMCwgMTQsIDcsXG4gIDEwLCA5LCAxNSwgNSwgNiwgMCwgOCwgMTUsIDAsIDE0LCA1LCAyLCA5LCAzLCAyLCAxMixcblxuICAxMywgMSwgMiwgMTUsIDgsIDEzLCA0LCA4LCA2LCAxMCwgMTUsIDMsIDExLCA3LCAxLCA0LFxuICAxMCwgMTIsIDksIDUsIDMsIDYsIDE0LCAxMSwgNSwgMCwgMCwgMTQsIDEyLCA5LCA3LCAyLFxuICA3LCAyLCAxMSwgMSwgNCwgMTQsIDEsIDcsIDksIDQsIDEyLCAxMCwgMTQsIDgsIDIsIDEzLFxuICAwLCAxNSwgNiwgMTIsIDEwLCA5LCAxMywgMCwgMTUsIDMsIDMsIDUsIDUsIDYsIDgsIDExXG5dO1xuXG5leHBvcnRzLnN1YnN0aXR1dGUgPSBmdW5jdGlvbiBzdWJzdGl0dXRlKGluTCwgaW5SKSB7XG4gIHZhciBvdXQgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIHZhciBiID0gKGluTCA+Pj4gKDE4IC0gaSAqIDYpKSAmIDB4M2Y7XG4gICAgdmFyIHNiID0gc1RhYmxlW2kgKiAweDQwICsgYl07XG5cbiAgICBvdXQgPDw9IDQ7XG4gICAgb3V0IHw9IHNiO1xuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgdmFyIGIgPSAoaW5SID4+PiAoMTggLSBpICogNikpICYgMHgzZjtcbiAgICB2YXIgc2IgPSBzVGFibGVbNCAqIDB4NDAgKyBpICogMHg0MCArIGJdO1xuXG4gICAgb3V0IDw8PSA0O1xuICAgIG91dCB8PSBzYjtcbiAgfVxuICByZXR1cm4gb3V0ID4+PiAwO1xufTtcblxudmFyIHBlcm11dGVUYWJsZSA9IFtcbiAgMTYsIDI1LCAxMiwgMTEsIDMsIDIwLCA0LCAxNSwgMzEsIDE3LCA5LCA2LCAyNywgMTQsIDEsIDIyLFxuICAzMCwgMjQsIDgsIDE4LCAwLCA1LCAyOSwgMjMsIDEzLCAxOSwgMiwgMjYsIDEwLCAyMSwgMjgsIDdcbl07XG5cbmV4cG9ydHMucGVybXV0ZSA9IGZ1bmN0aW9uIHBlcm11dGUobnVtKSB7XG4gIHZhciBvdXQgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBlcm11dGVUYWJsZS5sZW5ndGg7IGkrKykge1xuICAgIG91dCA8PD0gMTtcbiAgICBvdXQgfD0gKG51bSA+Pj4gcGVybXV0ZVRhYmxlW2ldKSAmIDB4MTtcbiAgfVxuICByZXR1cm4gb3V0ID4+PiAwO1xufTtcblxuZXhwb3J0cy5wYWRTcGxpdCA9IGZ1bmN0aW9uIHBhZFNwbGl0KG51bSwgc2l6ZSwgZ3JvdXApIHtcbiAgdmFyIHN0ciA9IG51bS50b1N0cmluZygyKTtcbiAgd2hpbGUgKHN0ci5sZW5ndGggPCBzaXplKVxuICAgIHN0ciA9ICcwJyArIHN0cjtcblxuICB2YXIgb3V0ID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSArPSBncm91cClcbiAgICBvdXQucHVzaChzdHIuc2xpY2UoaSwgaSArIGdyb3VwKSk7XG4gIHJldHVybiBvdXQuam9pbignICcpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciBkZXMgPSByZXF1aXJlKCcuLi9kZXMnKTtcbnZhciBDaXBoZXIgPSBkZXMuQ2lwaGVyO1xudmFyIERFUyA9IGRlcy5ERVM7XG5cbmZ1bmN0aW9uIEVERVN0YXRlKHR5cGUsIGtleSkge1xuICBhc3NlcnQuZXF1YWwoa2V5Lmxlbmd0aCwgMjQsICdJbnZhbGlkIGtleSBsZW5ndGgnKTtcblxuICB2YXIgazEgPSBrZXkuc2xpY2UoMCwgOCk7XG4gIHZhciBrMiA9IGtleS5zbGljZSg4LCAxNik7XG4gIHZhciBrMyA9IGtleS5zbGljZSgxNiwgMjQpO1xuXG4gIGlmICh0eXBlID09PSAnZW5jcnlwdCcpIHtcbiAgICB0aGlzLmNpcGhlcnMgPSBbXG4gICAgICBERVMuY3JlYXRlKHsgdHlwZTogJ2VuY3J5cHQnLCBrZXk6IGsxIH0pLFxuICAgICAgREVTLmNyZWF0ZSh7IHR5cGU6ICdkZWNyeXB0Jywga2V5OiBrMiB9KSxcbiAgICAgIERFUy5jcmVhdGUoeyB0eXBlOiAnZW5jcnlwdCcsIGtleTogazMgfSlcbiAgICBdO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuY2lwaGVycyA9IFtcbiAgICAgIERFUy5jcmVhdGUoeyB0eXBlOiAnZGVjcnlwdCcsIGtleTogazMgfSksXG4gICAgICBERVMuY3JlYXRlKHsgdHlwZTogJ2VuY3J5cHQnLCBrZXk6IGsyIH0pLFxuICAgICAgREVTLmNyZWF0ZSh7IHR5cGU6ICdkZWNyeXB0Jywga2V5OiBrMSB9KVxuICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gRURFKG9wdGlvbnMpIHtcbiAgQ2lwaGVyLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdmFyIHN0YXRlID0gbmV3IEVERVN0YXRlKHRoaXMudHlwZSwgdGhpcy5vcHRpb25zLmtleSk7XG4gIHRoaXMuX2VkZVN0YXRlID0gc3RhdGU7XG59XG5pbmhlcml0cyhFREUsIENpcGhlcik7XG5cbm1vZHVsZS5leHBvcnRzID0gRURFO1xuXG5FREUuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBFREUob3B0aW9ucyk7XG59O1xuXG5FREUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKGlucCwgaW5PZmYsIG91dCwgb3V0T2ZmKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2VkZVN0YXRlO1xuXG4gIHN0YXRlLmNpcGhlcnNbMF0uX3VwZGF0ZShpbnAsIGluT2ZmLCBvdXQsIG91dE9mZik7XG4gIHN0YXRlLmNpcGhlcnNbMV0uX3VwZGF0ZShvdXQsIG91dE9mZiwgb3V0LCBvdXRPZmYpO1xuICBzdGF0ZS5jaXBoZXJzWzJdLl91cGRhdGUob3V0LCBvdXRPZmYsIG91dCwgb3V0T2ZmKTtcbn07XG5cbkVERS5wcm90b3R5cGUuX3BhZCA9IERFUy5wcm90b3R5cGUuX3BhZDtcbkVERS5wcm90b3R5cGUuX3VucGFkID0gREVTLnByb3RvdHlwZS5fdW5wYWQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG52YXIgZGVzID0gcmVxdWlyZSgnLi4vZGVzJyk7XG52YXIgdXRpbHMgPSBkZXMudXRpbHM7XG52YXIgQ2lwaGVyID0gZGVzLkNpcGhlcjtcblxuZnVuY3Rpb24gREVTU3RhdGUoKSB7XG4gIHRoaXMudG1wID0gbmV3IEFycmF5KDIpO1xuICB0aGlzLmtleXMgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBERVMob3B0aW9ucykge1xuICBDaXBoZXIuY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICB2YXIgc3RhdGUgPSBuZXcgREVTU3RhdGUoKTtcbiAgdGhpcy5fZGVzU3RhdGUgPSBzdGF0ZTtcblxuICB0aGlzLmRlcml2ZUtleXMoc3RhdGUsIG9wdGlvbnMua2V5KTtcbn1cbmluaGVyaXRzKERFUywgQ2lwaGVyKTtcbm1vZHVsZS5leHBvcnRzID0gREVTO1xuXG5ERVMuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBERVMob3B0aW9ucyk7XG59O1xuXG52YXIgc2hpZnRUYWJsZSA9IFtcbiAgMSwgMSwgMiwgMiwgMiwgMiwgMiwgMixcbiAgMSwgMiwgMiwgMiwgMiwgMiwgMiwgMVxuXTtcblxuREVTLnByb3RvdHlwZS5kZXJpdmVLZXlzID0gZnVuY3Rpb24gZGVyaXZlS2V5cyhzdGF0ZSwga2V5KSB7XG4gIHN0YXRlLmtleXMgPSBuZXcgQXJyYXkoMTYgKiAyKTtcblxuICBhc3NlcnQuZXF1YWwoa2V5Lmxlbmd0aCwgdGhpcy5ibG9ja1NpemUsICdJbnZhbGlkIGtleSBsZW5ndGgnKTtcblxuICB2YXIga0wgPSB1dGlscy5yZWFkVUludDMyQkUoa2V5LCAwKTtcbiAgdmFyIGtSID0gdXRpbHMucmVhZFVJbnQzMkJFKGtleSwgNCk7XG5cbiAgdXRpbHMucGMxKGtMLCBrUiwgc3RhdGUudG1wLCAwKTtcbiAga0wgPSBzdGF0ZS50bXBbMF07XG4gIGtSID0gc3RhdGUudG1wWzFdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXRlLmtleXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIgc2hpZnQgPSBzaGlmdFRhYmxlW2kgPj4+IDFdO1xuICAgIGtMID0gdXRpbHMucjI4c2hsKGtMLCBzaGlmdCk7XG4gICAga1IgPSB1dGlscy5yMjhzaGwoa1IsIHNoaWZ0KTtcbiAgICB1dGlscy5wYzIoa0wsIGtSLCBzdGF0ZS5rZXlzLCBpKTtcbiAgfVxufTtcblxuREVTLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShpbnAsIGluT2ZmLCBvdXQsIG91dE9mZikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9kZXNTdGF0ZTtcblxuICB2YXIgbCA9IHV0aWxzLnJlYWRVSW50MzJCRShpbnAsIGluT2ZmKTtcbiAgdmFyIHIgPSB1dGlscy5yZWFkVUludDMyQkUoaW5wLCBpbk9mZiArIDQpO1xuXG4gIC8vIEluaXRpYWwgUGVybXV0YXRpb25cbiAgdXRpbHMuaXAobCwgciwgc3RhdGUudG1wLCAwKTtcbiAgbCA9IHN0YXRlLnRtcFswXTtcbiAgciA9IHN0YXRlLnRtcFsxXTtcblxuICBpZiAodGhpcy50eXBlID09PSAnZW5jcnlwdCcpXG4gICAgdGhpcy5fZW5jcnlwdChzdGF0ZSwgbCwgciwgc3RhdGUudG1wLCAwKTtcbiAgZWxzZVxuICAgIHRoaXMuX2RlY3J5cHQoc3RhdGUsIGwsIHIsIHN0YXRlLnRtcCwgMCk7XG5cbiAgbCA9IHN0YXRlLnRtcFswXTtcbiAgciA9IHN0YXRlLnRtcFsxXTtcblxuICB1dGlscy53cml0ZVVJbnQzMkJFKG91dCwgbCwgb3V0T2ZmKTtcbiAgdXRpbHMud3JpdGVVSW50MzJCRShvdXQsIHIsIG91dE9mZiArIDQpO1xufTtcblxuREVTLnByb3RvdHlwZS5fcGFkID0gZnVuY3Rpb24gX3BhZChidWZmZXIsIG9mZikge1xuICB2YXIgdmFsdWUgPSBidWZmZXIubGVuZ3RoIC0gb2ZmO1xuICBmb3IgKHZhciBpID0gb2ZmOyBpIDwgYnVmZmVyLmxlbmd0aDsgaSsrKVxuICAgIGJ1ZmZlcltpXSA9IHZhbHVlO1xuXG4gIHJldHVybiB0cnVlO1xufTtcblxuREVTLnByb3RvdHlwZS5fdW5wYWQgPSBmdW5jdGlvbiBfdW5wYWQoYnVmZmVyKSB7XG4gIHZhciBwYWQgPSBidWZmZXJbYnVmZmVyLmxlbmd0aCAtIDFdO1xuICBmb3IgKHZhciBpID0gYnVmZmVyLmxlbmd0aCAtIHBhZDsgaSA8IGJ1ZmZlci5sZW5ndGg7IGkrKylcbiAgICBhc3NlcnQuZXF1YWwoYnVmZmVyW2ldLCBwYWQpO1xuXG4gIHJldHVybiBidWZmZXIuc2xpY2UoMCwgYnVmZmVyLmxlbmd0aCAtIHBhZCk7XG59O1xuXG5ERVMucHJvdG90eXBlLl9lbmNyeXB0ID0gZnVuY3Rpb24gX2VuY3J5cHQoc3RhdGUsIGxTdGFydCwgclN0YXJ0LCBvdXQsIG9mZikge1xuICB2YXIgbCA9IGxTdGFydDtcbiAgdmFyIHIgPSByU3RhcnQ7XG5cbiAgLy8gQXBwbHkgZigpIHgxNiB0aW1lc1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXRlLmtleXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIga2V5TCA9IHN0YXRlLmtleXNbaV07XG4gICAgdmFyIGtleVIgPSBzdGF0ZS5rZXlzW2kgKyAxXTtcblxuICAgIC8vIGYociwgaylcbiAgICB1dGlscy5leHBhbmQociwgc3RhdGUudG1wLCAwKTtcblxuICAgIGtleUwgXj0gc3RhdGUudG1wWzBdO1xuICAgIGtleVIgXj0gc3RhdGUudG1wWzFdO1xuICAgIHZhciBzID0gdXRpbHMuc3Vic3RpdHV0ZShrZXlMLCBrZXlSKTtcbiAgICB2YXIgZiA9IHV0aWxzLnBlcm11dGUocyk7XG5cbiAgICB2YXIgdCA9IHI7XG4gICAgciA9IChsIF4gZikgPj4+IDA7XG4gICAgbCA9IHQ7XG4gIH1cblxuICAvLyBSZXZlcnNlIEluaXRpYWwgUGVybXV0YXRpb25cbiAgdXRpbHMucmlwKHIsIGwsIG91dCwgb2ZmKTtcbn07XG5cbkRFUy5wcm90b3R5cGUuX2RlY3J5cHQgPSBmdW5jdGlvbiBfZGVjcnlwdChzdGF0ZSwgbFN0YXJ0LCByU3RhcnQsIG91dCwgb2ZmKSB7XG4gIHZhciBsID0gclN0YXJ0O1xuICB2YXIgciA9IGxTdGFydDtcblxuICAvLyBBcHBseSBmKCkgeDE2IHRpbWVzXG4gIGZvciAodmFyIGkgPSBzdGF0ZS5rZXlzLmxlbmd0aCAtIDI7IGkgPj0gMDsgaSAtPSAyKSB7XG4gICAgdmFyIGtleUwgPSBzdGF0ZS5rZXlzW2ldO1xuICAgIHZhciBrZXlSID0gc3RhdGUua2V5c1tpICsgMV07XG5cbiAgICAvLyBmKHIsIGspXG4gICAgdXRpbHMuZXhwYW5kKGwsIHN0YXRlLnRtcCwgMCk7XG5cbiAgICBrZXlMIF49IHN0YXRlLnRtcFswXTtcbiAgICBrZXlSIF49IHN0YXRlLnRtcFsxXTtcbiAgICB2YXIgcyA9IHV0aWxzLnN1YnN0aXR1dGUoa2V5TCwga2V5Uik7XG4gICAgdmFyIGYgPSB1dGlscy5wZXJtdXRlKHMpO1xuXG4gICAgdmFyIHQgPSBsO1xuICAgIGwgPSAociBeIGYpID4+PiAwO1xuICAgIHIgPSB0O1xuICB9XG5cbiAgLy8gUmV2ZXJzZSBJbml0aWFsIFBlcm11dGF0aW9uXG4gIHV0aWxzLnJpcChsLCByLCBvdXQsIG9mZik7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG5mdW5jdGlvbiBDaXBoZXIob3B0aW9ucykge1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gIHRoaXMudHlwZSA9IHRoaXMub3B0aW9ucy50eXBlO1xuICB0aGlzLmJsb2NrU2l6ZSA9IDg7XG4gIHRoaXMuX2luaXQoKTtcblxuICB0aGlzLmJ1ZmZlciA9IG5ldyBBcnJheSh0aGlzLmJsb2NrU2l6ZSk7XG4gIHRoaXMuYnVmZmVyT2ZmID0gMDtcbn1cbm1vZHVsZS5leHBvcnRzID0gQ2lwaGVyO1xuXG5DaXBoZXIucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gX2luaXQoKSB7XG4gIC8vIE1pZ2h0IGJlIG92ZXJyaWRlZFxufTtcblxuQ2lwaGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoZGF0YSkge1xuICBpZiAoZGF0YS5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0aGlzLnR5cGUgPT09ICdkZWNyeXB0JylcbiAgICByZXR1cm4gdGhpcy5fdXBkYXRlRGVjcnlwdChkYXRhKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLl91cGRhdGVFbmNyeXB0KGRhdGEpO1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fYnVmZmVyID0gZnVuY3Rpb24gX2J1ZmZlcihkYXRhLCBvZmYpIHtcbiAgLy8gQXBwZW5kIGRhdGEgdG8gYnVmZmVyXG4gIHZhciBtaW4gPSBNYXRoLm1pbih0aGlzLmJ1ZmZlci5sZW5ndGggLSB0aGlzLmJ1ZmZlck9mZiwgZGF0YS5sZW5ndGggLSBvZmYpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1pbjsgaSsrKVxuICAgIHRoaXMuYnVmZmVyW3RoaXMuYnVmZmVyT2ZmICsgaV0gPSBkYXRhW29mZiArIGldO1xuICB0aGlzLmJ1ZmZlck9mZiArPSBtaW47XG5cbiAgLy8gU2hpZnQgbmV4dFxuICByZXR1cm4gbWluO1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fZmx1c2hCdWZmZXIgPSBmdW5jdGlvbiBfZmx1c2hCdWZmZXIob3V0LCBvZmYpIHtcbiAgdGhpcy5fdXBkYXRlKHRoaXMuYnVmZmVyLCAwLCBvdXQsIG9mZik7XG4gIHRoaXMuYnVmZmVyT2ZmID0gMDtcbiAgcmV0dXJuIHRoaXMuYmxvY2tTaXplO1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlRW5jcnlwdCA9IGZ1bmN0aW9uIF91cGRhdGVFbmNyeXB0KGRhdGEpIHtcbiAgdmFyIGlucHV0T2ZmID0gMDtcbiAgdmFyIG91dHB1dE9mZiA9IDA7XG5cbiAgdmFyIGNvdW50ID0gKCh0aGlzLmJ1ZmZlck9mZiArIGRhdGEubGVuZ3RoKSAvIHRoaXMuYmxvY2tTaXplKSB8IDA7XG4gIHZhciBvdXQgPSBuZXcgQXJyYXkoY291bnQgKiB0aGlzLmJsb2NrU2l6ZSk7XG5cbiAgaWYgKHRoaXMuYnVmZmVyT2ZmICE9PSAwKSB7XG4gICAgaW5wdXRPZmYgKz0gdGhpcy5fYnVmZmVyKGRhdGEsIGlucHV0T2ZmKTtcblxuICAgIGlmICh0aGlzLmJ1ZmZlck9mZiA9PT0gdGhpcy5idWZmZXIubGVuZ3RoKVxuICAgICAgb3V0cHV0T2ZmICs9IHRoaXMuX2ZsdXNoQnVmZmVyKG91dCwgb3V0cHV0T2ZmKTtcbiAgfVxuXG4gIC8vIFdyaXRlIGJsb2Nrc1xuICB2YXIgbWF4ID0gZGF0YS5sZW5ndGggLSAoKGRhdGEubGVuZ3RoIC0gaW5wdXRPZmYpICUgdGhpcy5ibG9ja1NpemUpO1xuICBmb3IgKDsgaW5wdXRPZmYgPCBtYXg7IGlucHV0T2ZmICs9IHRoaXMuYmxvY2tTaXplKSB7XG4gICAgdGhpcy5fdXBkYXRlKGRhdGEsIGlucHV0T2ZmLCBvdXQsIG91dHB1dE9mZik7XG4gICAgb3V0cHV0T2ZmICs9IHRoaXMuYmxvY2tTaXplO1xuICB9XG5cbiAgLy8gUXVldWUgcmVzdFxuICBmb3IgKDsgaW5wdXRPZmYgPCBkYXRhLmxlbmd0aDsgaW5wdXRPZmYrKywgdGhpcy5idWZmZXJPZmYrKylcbiAgICB0aGlzLmJ1ZmZlclt0aGlzLmJ1ZmZlck9mZl0gPSBkYXRhW2lucHV0T2ZmXTtcblxuICByZXR1cm4gb3V0O1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlRGVjcnlwdCA9IGZ1bmN0aW9uIF91cGRhdGVEZWNyeXB0KGRhdGEpIHtcbiAgdmFyIGlucHV0T2ZmID0gMDtcbiAgdmFyIG91dHB1dE9mZiA9IDA7XG5cbiAgdmFyIGNvdW50ID0gTWF0aC5jZWlsKCh0aGlzLmJ1ZmZlck9mZiArIGRhdGEubGVuZ3RoKSAvIHRoaXMuYmxvY2tTaXplKSAtIDE7XG4gIHZhciBvdXQgPSBuZXcgQXJyYXkoY291bnQgKiB0aGlzLmJsb2NrU2l6ZSk7XG5cbiAgLy8gVE9ETyhpbmR1dG55KTogb3B0aW1pemUgaXQsIHRoaXMgaXMgZmFyIGZyb20gb3B0aW1hbFxuICBmb3IgKDsgY291bnQgPiAwOyBjb3VudC0tKSB7XG4gICAgaW5wdXRPZmYgKz0gdGhpcy5fYnVmZmVyKGRhdGEsIGlucHV0T2ZmKTtcbiAgICBvdXRwdXRPZmYgKz0gdGhpcy5fZmx1c2hCdWZmZXIob3V0LCBvdXRwdXRPZmYpO1xuICB9XG5cbiAgLy8gQnVmZmVyIHJlc3Qgb2YgdGhlIGlucHV0XG4gIGlucHV0T2ZmICs9IHRoaXMuX2J1ZmZlcihkYXRhLCBpbnB1dE9mZik7XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuZmluYWwgPSBmdW5jdGlvbiBmaW5hbChidWZmZXIpIHtcbiAgdmFyIGZpcnN0O1xuICBpZiAoYnVmZmVyKVxuICAgIGZpcnN0ID0gdGhpcy51cGRhdGUoYnVmZmVyKTtcblxuICB2YXIgbGFzdDtcbiAgaWYgKHRoaXMudHlwZSA9PT0gJ2VuY3J5cHQnKVxuICAgIGxhc3QgPSB0aGlzLl9maW5hbEVuY3J5cHQoKTtcbiAgZWxzZVxuICAgIGxhc3QgPSB0aGlzLl9maW5hbERlY3J5cHQoKTtcblxuICBpZiAoZmlyc3QpXG4gICAgcmV0dXJuIGZpcnN0LmNvbmNhdChsYXN0KTtcbiAgZWxzZVxuICAgIHJldHVybiBsYXN0O1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fcGFkID0gZnVuY3Rpb24gX3BhZChidWZmZXIsIG9mZikge1xuICBpZiAob2ZmID09PSAwKVxuICAgIHJldHVybiBmYWxzZTtcblxuICB3aGlsZSAob2ZmIDwgYnVmZmVyLmxlbmd0aClcbiAgICBidWZmZXJbb2ZmKytdID0gMDtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX2ZpbmFsRW5jcnlwdCA9IGZ1bmN0aW9uIF9maW5hbEVuY3J5cHQoKSB7XG4gIGlmICghdGhpcy5fcGFkKHRoaXMuYnVmZmVyLCB0aGlzLmJ1ZmZlck9mZikpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBvdXQgPSBuZXcgQXJyYXkodGhpcy5ibG9ja1NpemUpO1xuICB0aGlzLl91cGRhdGUodGhpcy5idWZmZXIsIDAsIG91dCwgMCk7XG4gIHJldHVybiBvdXQ7XG59O1xuXG5DaXBoZXIucHJvdG90eXBlLl91bnBhZCA9IGZ1bmN0aW9uIF91bnBhZChidWZmZXIpIHtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX2ZpbmFsRGVjcnlwdCA9IGZ1bmN0aW9uIF9maW5hbERlY3J5cHQoKSB7XG4gIGFzc2VydC5lcXVhbCh0aGlzLmJ1ZmZlck9mZiwgdGhpcy5ibG9ja1NpemUsICdOb3QgZW5vdWdoIGRhdGEgdG8gZGVjcnlwdCcpO1xuICB2YXIgb3V0ID0gbmV3IEFycmF5KHRoaXMuYmxvY2tTaXplKTtcbiAgdGhpcy5fZmx1c2hCdWZmZXIob3V0LCAwKTtcblxuICByZXR1cm4gdGhpcy5fdW5wYWQob3V0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG52YXIgcHJvdG8gPSB7fTtcblxuZnVuY3Rpb24gQ0JDU3RhdGUoaXYpIHtcbiAgYXNzZXJ0LmVxdWFsKGl2Lmxlbmd0aCwgOCwgJ0ludmFsaWQgSVYgbGVuZ3RoJyk7XG5cbiAgdGhpcy5pdiA9IG5ldyBBcnJheSg4KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLml2Lmxlbmd0aDsgaSsrKVxuICAgIHRoaXMuaXZbaV0gPSBpdltpXTtcbn1cblxuZnVuY3Rpb24gaW5zdGFudGlhdGUoQmFzZSkge1xuICBmdW5jdGlvbiBDQkMob3B0aW9ucykge1xuICAgIEJhc2UuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgICB0aGlzLl9jYmNJbml0KCk7XG4gIH1cbiAgaW5oZXJpdHMoQ0JDLCBCYXNlKTtcblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHByb3RvKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgQ0JDLnByb3RvdHlwZVtrZXldID0gcHJvdG9ba2V5XTtcbiAgfVxuXG4gIENCQy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUob3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgQ0JDKG9wdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiBDQkM7XG59XG5cbmV4cG9ydHMuaW5zdGFudGlhdGUgPSBpbnN0YW50aWF0ZTtcblxucHJvdG8uX2NiY0luaXQgPSBmdW5jdGlvbiBfY2JjSW5pdCgpIHtcbiAgdmFyIHN0YXRlID0gbmV3IENCQ1N0YXRlKHRoaXMub3B0aW9ucy5pdik7XG4gIHRoaXMuX2NiY1N0YXRlID0gc3RhdGU7XG59O1xuXG5wcm90by5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShpbnAsIGluT2ZmLCBvdXQsIG91dE9mZikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9jYmNTdGF0ZTtcbiAgdmFyIHN1cGVyUHJvdG8gPSB0aGlzLmNvbnN0cnVjdG9yLnN1cGVyXy5wcm90b3R5cGU7XG5cbiAgdmFyIGl2ID0gc3RhdGUuaXY7XG4gIGlmICh0aGlzLnR5cGUgPT09ICdlbmNyeXB0Jykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ibG9ja1NpemU7IGkrKylcbiAgICAgIGl2W2ldIF49IGlucFtpbk9mZiArIGldO1xuXG4gICAgc3VwZXJQcm90by5fdXBkYXRlLmNhbGwodGhpcywgaXYsIDAsIG91dCwgb3V0T2ZmKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ibG9ja1NpemU7IGkrKylcbiAgICAgIGl2W2ldID0gb3V0W291dE9mZiArIGldO1xuICB9IGVsc2Uge1xuICAgIHN1cGVyUHJvdG8uX3VwZGF0ZS5jYWxsKHRoaXMsIGlucCwgaW5PZmYsIG91dCwgb3V0T2ZmKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ibG9ja1NpemU7IGkrKylcbiAgICAgIG91dFtvdXRPZmYgKyBpXSBePSBpdltpXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ibG9ja1NpemU7IGkrKylcbiAgICAgIGl2W2ldID0gaW5wW2luT2ZmICsgaV07XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGFzc2VydDtcblxuZnVuY3Rpb24gYXNzZXJ0KHZhbCwgbXNnKSB7XG4gIGlmICghdmFsKVxuICAgIHRocm93IG5ldyBFcnJvcihtc2cgfHwgJ0Fzc2VydGlvbiBmYWlsZWQnKTtcbn1cblxuYXNzZXJ0LmVxdWFsID0gZnVuY3Rpb24gYXNzZXJ0RXF1YWwobCwgciwgbXNnKSB7XG4gIGlmIChsICE9IHIpXG4gICAgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCAoJ0Fzc2VydGlvbiBmYWlsZWQ6ICcgKyBsICsgJyAhPSAnICsgcikpO1xufTtcbiIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdzdHJlYW0nKS5UcmFuc2Zvcm1cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXInKS5TdHJpbmdEZWNvZGVyXG5tb2R1bGUuZXhwb3J0cyA9IENpcGhlckJhc2VcbmluaGVyaXRzKENpcGhlckJhc2UsIFRyYW5zZm9ybSlcbmZ1bmN0aW9uIENpcGhlckJhc2UgKGhhc2hNb2RlKSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuaGFzaE1vZGUgPSB0eXBlb2YgaGFzaE1vZGUgPT09ICdzdHJpbmcnXG4gIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgdGhpc1toYXNoTW9kZV0gPSB0aGlzLl9maW5hbE9yRGlnZXN0XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5maW5hbCA9IHRoaXMuX2ZpbmFsT3JEaWdlc3RcbiAgfVxuICB0aGlzLl9kZWNvZGVyID0gbnVsbFxuICB0aGlzLl9lbmNvZGluZyA9IG51bGxcbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBpbnB1dEVuYywgb3V0cHV0RW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBkYXRhID0gbmV3IEJ1ZmZlcihkYXRhLCBpbnB1dEVuYylcbiAgfVxuICB2YXIgb3V0RGF0YSA9IHRoaXMuX3VwZGF0ZShkYXRhKVxuICBpZiAodGhpcy5oYXNoTW9kZSkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cbiAgaWYgKG91dHB1dEVuYykge1xuICAgIG91dERhdGEgPSB0aGlzLl90b1N0cmluZyhvdXREYXRhLCBvdXRwdXRFbmMpXG4gIH1cbiAgcmV0dXJuIG91dERhdGFcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QXV0b1BhZGRpbmcgPSBmdW5jdGlvbiAoKSB7fVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5nZXRBdXRoVGFnID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBnZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBdXRoVGFnID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBzZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBQUQgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhYWQgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGRhdGEsIF8sIG5leHQpIHtcbiAgdmFyIGVyclxuICB0cnkge1xuICAgIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgICB0aGlzLl91cGRhdGUoZGF0YSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXNoKHRoaXMuX3VwZGF0ZShkYXRhKSlcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnIgPSBlXG4gIH0gZmluYWxseSB7XG4gICAgbmV4dChlcnIpXG4gIH1cbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLl9mbHVzaCA9IGZ1bmN0aW9uIChkb25lKSB7XG4gIHZhciBlcnJcbiAgdHJ5IHtcbiAgICB0aGlzLnB1c2godGhpcy5fZmluYWwoKSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfSBmaW5hbGx5IHtcbiAgICBkb25lKGVycilcbiAgfVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZpbmFsT3JEaWdlc3QgPSBmdW5jdGlvbiAob3V0cHV0RW5jKSB7XG4gIHZhciBvdXREYXRhID0gdGhpcy5fZmluYWwoKSB8fCBuZXcgQnVmZmVyKCcnKVxuICBpZiAob3V0cHV0RW5jKSB7XG4gICAgb3V0RGF0YSA9IHRoaXMuX3RvU3RyaW5nKG91dERhdGEsIG91dHB1dEVuYywgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb3V0RGF0YVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fdG9TdHJpbmcgPSBmdW5jdGlvbiAodmFsdWUsIGVuYywgZmluYWwpIHtcbiAgaWYgKCF0aGlzLl9kZWNvZGVyKSB7XG4gICAgdGhpcy5fZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYylcbiAgICB0aGlzLl9lbmNvZGluZyA9IGVuY1xuICB9XG4gIGlmICh0aGlzLl9lbmNvZGluZyAhPT0gZW5jKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYW5cXCd0IHN3aXRjaCBlbmNvZGluZ3MnKVxuICB9XG4gIHZhciBvdXQgPSB0aGlzLl9kZWNvZGVyLndyaXRlKHZhbHVlKVxuICBpZiAoZmluYWwpIHtcbiAgICBvdXQgKz0gdGhpcy5fZGVjb2Rlci5lbmQoKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZbkp2ZDNObGNtbG1lUzFqYVhCb1pYSXZibTlrWlY5dGIyUjFiR1Z6TDJKeWIzZHpaWEpwWm5rdFpHVnpMMjV2WkdWZmJXOWtkV3hsY3k5amFYQm9aWEl0WW1GelpTOXBibVJsZUM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkluWmhjaUJVY21GdWMyWnZjbTBnUFNCeVpYRjFhWEpsS0NkemRISmxZVzBuS1M1VWNtRnVjMlp2Y20xY2JuWmhjaUJwYm1obGNtbDBjeUE5SUhKbGNYVnBjbVVvSjJsdWFHVnlhWFJ6SnlsY2JuWmhjaUJUZEhKcGJtZEVaV052WkdWeUlEMGdjbVZ4ZFdseVpTZ25jM1J5YVc1blgyUmxZMjlrWlhJbktTNVRkSEpwYm1kRVpXTnZaR1Z5WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUVOcGNHaGxja0poYzJWY2JtbHVhR1Z5YVhSektFTnBjR2hsY2tKaGMyVXNJRlJ5WVc1elptOXliU2xjYm1aMWJtTjBhVzl1SUVOcGNHaGxja0poYzJVZ0tHaGhjMmhOYjJSbEtTQjdYRzRnSUZSeVlXNXpabTl5YlM1allXeHNLSFJvYVhNcFhHNGdJSFJvYVhNdWFHRnphRTF2WkdVZ1BTQjBlWEJsYjJZZ2FHRnphRTF2WkdVZ1BUMDlJQ2R6ZEhKcGJtY25YRzRnSUdsbUlDaDBhR2x6TG1oaGMyaE5iMlJsS1NCN1hHNGdJQ0FnZEdocGMxdG9ZWE5vVFc5a1pWMGdQU0IwYUdsekxsOW1hVzVoYkU5eVJHbG5aWE4wWEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnZEdocGN5NW1hVzVoYkNBOUlIUm9hWE11WDJacGJtRnNUM0pFYVdkbGMzUmNiaUFnZlZ4dUlDQjBhR2x6TGw5a1pXTnZaR1Z5SUQwZ2JuVnNiRnh1SUNCMGFHbHpMbDlsYm1OdlpHbHVaeUE5SUc1MWJHeGNibjFjYmtOcGNHaGxja0poYzJVdWNISnZkRzkwZVhCbExuVndaR0YwWlNBOUlHWjFibU4wYVc5dUlDaGtZWFJoTENCcGJuQjFkRVZ1WXl3Z2IzVjBjSFYwUlc1aktTQjdYRzRnSUdsbUlDaDBlWEJsYjJZZ1pHRjBZU0E5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNCa1lYUmhJRDBnYm1WM0lFSjFabVpsY2loa1lYUmhMQ0JwYm5CMWRFVnVZeWxjYmlBZ2ZWeHVJQ0IyWVhJZ2IzVjBSR0YwWVNBOUlIUm9hWE11WDNWd1pHRjBaU2hrWVhSaEtWeHVJQ0JwWmlBb2RHaHBjeTVvWVhOb1RXOWtaU2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6WEc0Z0lIMWNiaUFnYVdZZ0tHOTFkSEIxZEVWdVl5a2dlMXh1SUNBZ0lHOTFkRVJoZEdFZ1BTQjBhR2x6TGw5MGIxTjBjbWx1WnlodmRYUkVZWFJoTENCdmRYUndkWFJGYm1NcFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUc5MWRFUmhkR0ZjYm4xY2JseHVRMmx3YUdWeVFtRnpaUzV3Y205MGIzUjVjR1V1YzJWMFFYVjBiMUJoWkdScGJtY2dQU0JtZFc1amRHbHZiaUFvS1NCN2ZWeHVYRzVEYVhCb1pYSkNZWE5sTG5CeWIzUnZkSGx3WlM1blpYUkJkWFJvVkdGbklEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0ozUnllV2x1WnlCMGJ5Qm5aWFFnWVhWMGFDQjBZV2NnYVc0Z2RXNXpkWEJ3YjNKMFpXUWdjM1JoZEdVbktWeHVmVnh1WEc1RGFYQm9aWEpDWVhObExuQnliM1J2ZEhsd1pTNXpaWFJCZFhSb1ZHRm5JRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KM1J5ZVdsdVp5QjBieUJ6WlhRZ1lYVjBhQ0IwWVdjZ2FXNGdkVzV6ZFhCd2IzSjBaV1FnYzNSaGRHVW5LVnh1ZlZ4dVhHNURhWEJvWlhKQ1lYTmxMbkJ5YjNSdmRIbHdaUzV6WlhSQlFVUWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25kSEo1YVc1bklIUnZJSE5sZENCaFlXUWdhVzRnZFc1emRYQndiM0owWldRZ2MzUmhkR1VuS1Z4dWZWeHVYRzVEYVhCb1pYSkNZWE5sTG5CeWIzUnZkSGx3WlM1ZmRISmhibk5tYjNKdElEMGdablZ1WTNScGIyNGdLR1JoZEdFc0lGOHNJRzVsZUhRcElIdGNiaUFnZG1GeUlHVnljbHh1SUNCMGNua2dlMXh1SUNBZ0lHbG1JQ2gwYUdsekxtaGhjMmhOYjJSbEtTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5MWNHUmhkR1VvWkdGMFlTbGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnZEdocGN5NXdkWE5vS0hSb2FYTXVYM1Z3WkdGMFpTaGtZWFJoS1NsY2JpQWdJQ0I5WEc0Z0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQmxjbklnUFNCbFhHNGdJSDBnWm1sdVlXeHNlU0I3WEc0Z0lDQWdibVY0ZENobGNuSXBYRzRnSUgxY2JuMWNia05wY0dobGNrSmhjMlV1Y0hKdmRHOTBlWEJsTGw5bWJIVnphQ0E5SUdaMWJtTjBhVzl1SUNoa2IyNWxLU0I3WEc0Z0lIWmhjaUJsY25KY2JpQWdkSEo1SUh0Y2JpQWdJQ0IwYUdsekxuQjFjMmdvZEdocGN5NWZabWx1WVd3b0tTbGNiaUFnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUdWeWNpQTlJR1ZjYmlBZ2ZTQm1hVzVoYkd4NUlIdGNiaUFnSUNCa2IyNWxLR1Z5Y2lsY2JpQWdmVnh1ZlZ4dVEybHdhR1Z5UW1GelpTNXdjbTkwYjNSNWNHVXVYMlpwYm1Gc1QzSkVhV2RsYzNRZ1BTQm1kVzVqZEdsdmJpQW9iM1YwY0hWMFJXNWpLU0I3WEc0Z0lIWmhjaUJ2ZFhSRVlYUmhJRDBnZEdocGN5NWZabWx1WVd3b0tTQjhmQ0J1WlhjZ1FuVm1abVZ5S0NjbktWeHVJQ0JwWmlBb2IzVjBjSFYwUlc1aktTQjdYRzRnSUNBZ2IzVjBSR0YwWVNBOUlIUm9hWE11WDNSdlUzUnlhVzVuS0c5MWRFUmhkR0VzSUc5MWRIQjFkRVZ1WXl3Z2RISjFaU2xjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdiM1YwUkdGMFlWeHVmVnh1WEc1RGFYQm9aWEpDWVhObExuQnliM1J2ZEhsd1pTNWZkRzlUZEhKcGJtY2dQU0JtZFc1amRHbHZiaUFvZG1Gc2RXVXNJR1Z1WXl3Z1ptbHVZV3dwSUh0Y2JpQWdhV1lnS0NGMGFHbHpMbDlrWldOdlpHVnlLU0I3WEc0Z0lDQWdkR2hwY3k1ZlpHVmpiMlJsY2lBOUlHNWxkeUJUZEhKcGJtZEVaV052WkdWeUtHVnVZeWxjYmlBZ0lDQjBhR2x6TGw5bGJtTnZaR2x1WnlBOUlHVnVZMXh1SUNCOVhHNGdJR2xtSUNoMGFHbHpMbDlsYm1OdlpHbHVaeUFoUFQwZ1pXNWpLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZGpZVzVjWENkMElITjNhWFJqYUNCbGJtTnZaR2x1WjNNbktWeHVJQ0I5WEc0Z0lIWmhjaUJ2ZFhRZ1BTQjBhR2x6TGw5a1pXTnZaR1Z5TG5keWFYUmxLSFpoYkhWbEtWeHVJQ0JwWmlBb1ptbHVZV3dwSUh0Y2JpQWdJQ0J2ZFhRZ0t6MGdkR2hwY3k1ZlpHVmpiMlJsY2k1bGJtUW9LVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnZkWFJjYm4xY2JpSmRmUT09IiwidmFyIGNpcGhlcnMgPSByZXF1aXJlKCcuL2VuY3J5cHRlcicpXG5leHBvcnRzLmNyZWF0ZUNpcGhlciA9IGV4cG9ydHMuQ2lwaGVyID0gY2lwaGVycy5jcmVhdGVDaXBoZXJcbmV4cG9ydHMuY3JlYXRlQ2lwaGVyaXYgPSBleHBvcnRzLkNpcGhlcml2ID0gY2lwaGVycy5jcmVhdGVDaXBoZXJpdlxudmFyIGRlY2lwaGVycyA9IHJlcXVpcmUoJy4vZGVjcnlwdGVyJylcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXIgPSBleHBvcnRzLkRlY2lwaGVyID0gZGVjaXBoZXJzLmNyZWF0ZURlY2lwaGVyXG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyaXYgPSBleHBvcnRzLkRlY2lwaGVyaXYgPSBkZWNpcGhlcnMuY3JlYXRlRGVjaXBoZXJpdlxudmFyIG1vZGVzID0gcmVxdWlyZSgnLi9tb2RlcycpXG5mdW5jdGlvbiBnZXRDaXBoZXJzICgpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG1vZGVzKVxufVxuZXhwb3J0cy5saXN0Q2lwaGVycyA9IGV4cG9ydHMuZ2V0Q2lwaGVycyA9IGdldENpcGhlcnNcbiIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIG1vZGVzID0gcmVxdWlyZSgnLi9tb2RlcycpXG52YXIgZWJ0ayA9IHJlcXVpcmUoJ2V2cF9ieXRlc3Rva2V5JylcbnZhciBTdHJlYW1DaXBoZXIgPSByZXF1aXJlKCcuL3N0cmVhbUNpcGhlcicpXG52YXIgQXV0aENpcGhlciA9IHJlcXVpcmUoJy4vYXV0aENpcGhlcicpXG5pbmhlcml0cyhDaXBoZXIsIFRyYW5zZm9ybSlcbmZ1bmN0aW9uIENpcGhlciAobW9kZSwga2V5LCBpdikge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQ2lwaGVyKSkge1xuICAgIHJldHVybiBuZXcgQ2lwaGVyKG1vZGUsIGtleSwgaXYpXG4gIH1cbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5fY2FjaGUgPSBuZXcgU3BsaXR0ZXIoKVxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBuZXcgQnVmZmVyKGl2Lmxlbmd0aClcbiAgaXYuY29weSh0aGlzLl9wcmV2KVxuICB0aGlzLl9tb2RlID0gbW9kZVxuICB0aGlzLl9hdXRvcGFkZGluZyA9IHRydWVcbn1cbkNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX2NhY2hlLmFkZChkYXRhKVxuICB2YXIgY2h1bmtcbiAgdmFyIHRoaW5nXG4gIHZhciBvdXQgPSBbXVxuICB3aGlsZSAoKGNodW5rID0gdGhpcy5fY2FjaGUuZ2V0KCkpKSB7XG4gICAgdGhpbmcgPSB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmspXG4gICAgb3V0LnB1c2godGhpbmcpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQob3V0KVxufVxuQ2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjaHVuayA9IHRoaXMuX2NhY2hlLmZsdXNoKClcbiAgaWYgKHRoaXMuX2F1dG9wYWRkaW5nKSB7XG4gICAgY2h1bmsgPSB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmspXG4gICAgdGhpcy5fY2lwaGVyLnNjcnViKClcbiAgICByZXR1cm4gY2h1bmtcbiAgfSBlbHNlIGlmIChjaHVuay50b1N0cmluZygnaGV4JykgIT09ICcxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMCcpIHtcbiAgICB0aGlzLl9jaXBoZXIuc2NydWIoKVxuICAgIHRocm93IG5ldyBFcnJvcignZGF0YSBub3QgbXVsdGlwbGUgb2YgYmxvY2sgbGVuZ3RoJylcbiAgfVxufVxuQ2lwaGVyLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uIChzZXRUbykge1xuICB0aGlzLl9hdXRvcGFkZGluZyA9ICEhc2V0VG9cbn1cblxuZnVuY3Rpb24gU3BsaXR0ZXIgKCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU3BsaXR0ZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBTcGxpdHRlcigpXG4gIH1cbiAgdGhpcy5jYWNoZSA9IG5ldyBCdWZmZXIoJycpXG59XG5TcGxpdHRlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIGRhdGFdKVxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGggPiAxNSkge1xuICAgIHZhciBvdXQgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgIHRoaXMuY2FjaGUgPSB0aGlzLmNhY2hlLnNsaWNlKDE2KVxuICAgIHJldHVybiBvdXRcbiAgfVxuICByZXR1cm4gbnVsbFxufVxuU3BsaXR0ZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbGVuID0gMTYgLSB0aGlzLmNhY2hlLmxlbmd0aFxuICB2YXIgcGFkQnVmZiA9IG5ldyBCdWZmZXIobGVuKVxuXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIHBhZEJ1ZmYud3JpdGVVSW50OChsZW4sIGkpXG4gIH1cbiAgdmFyIG91dCA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIHBhZEJ1ZmZdKVxuICByZXR1cm4gb3V0XG59XG52YXIgbW9kZWxpc3QgPSB7XG4gIEVDQjogcmVxdWlyZSgnLi9tb2Rlcy9lY2InKSxcbiAgQ0JDOiByZXF1aXJlKCcuL21vZGVzL2NiYycpLFxuICBDRkI6IHJlcXVpcmUoJy4vbW9kZXMvY2ZiJyksXG4gIENGQjg6IHJlcXVpcmUoJy4vbW9kZXMvY2ZiOCcpLFxuICBDRkIxOiByZXF1aXJlKCcuL21vZGVzL2NmYjEnKSxcbiAgT0ZCOiByZXF1aXJlKCcuL21vZGVzL29mYicpLFxuICBDVFI6IHJlcXVpcmUoJy4vbW9kZXMvY3RyJyksXG4gIEdDTTogcmVxdWlyZSgnLi9tb2Rlcy9jdHInKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDaXBoZXJpdiAoc3VpdGUsIHBhc3N3b3JkLCBpdikge1xuICB2YXIgY29uZmlnID0gbW9kZXNbc3VpdGUudG9Mb3dlckNhc2UoKV1cbiAgaWYgKCFjb25maWcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuICB9XG4gIGlmICh0eXBlb2YgaXYgPT09ICdzdHJpbmcnKSB7XG4gICAgaXYgPSBuZXcgQnVmZmVyKGl2KVxuICB9XG4gIGlmICh0eXBlb2YgcGFzc3dvcmQgPT09ICdzdHJpbmcnKSB7XG4gICAgcGFzc3dvcmQgPSBuZXcgQnVmZmVyKHBhc3N3b3JkKVxuICB9XG4gIGlmIChwYXNzd29yZC5sZW5ndGggIT09IGNvbmZpZy5rZXkgLyA4KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBrZXkgbGVuZ3RoICcgKyBwYXNzd29yZC5sZW5ndGgpXG4gIH1cbiAgaWYgKGl2Lmxlbmd0aCAhPT0gY29uZmlnLml2KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBpdiBsZW5ndGggJyArIGl2Lmxlbmd0aClcbiAgfVxuICBpZiAoY29uZmlnLnR5cGUgPT09ICdzdHJlYW0nKSB7XG4gICAgcmV0dXJuIG5ldyBTdHJlYW1DaXBoZXIobW9kZWxpc3RbY29uZmlnLm1vZGVdLCBwYXNzd29yZCwgaXYpXG4gIH0gZWxzZSBpZiAoY29uZmlnLnR5cGUgPT09ICdhdXRoJykge1xuICAgIHJldHVybiBuZXcgQXV0aENpcGhlcihtb2RlbGlzdFtjb25maWcubW9kZV0sIHBhc3N3b3JkLCBpdilcbiAgfVxuICByZXR1cm4gbmV3IENpcGhlcihtb2RlbGlzdFtjb25maWcubW9kZV0sIHBhc3N3b3JkLCBpdilcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHZhciBjb25maWcgPSBtb2Rlc1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwgY29uZmlnLmtleSwgY29uZmlnLml2KVxuICByZXR1cm4gY3JlYXRlQ2lwaGVyaXYoc3VpdGUsIGtleXMua2V5LCBrZXlzLml2KVxufVxuXG5leHBvcnRzLmNyZWF0ZUNpcGhlcml2ID0gY3JlYXRlQ2lwaGVyaXZcbmV4cG9ydHMuY3JlYXRlQ2lwaGVyID0gY3JlYXRlQ2lwaGVyXG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WW5KdmQzTmxjbWxtZVMxamFYQm9aWEl2Ym05a1pWOXRiMlIxYkdWekwySnliM2R6WlhKcFpua3RZV1Z6TDJWdVkzSjVjSFJsY2k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUdGbGN5QTlJSEpsY1hWcGNtVW9KeTR2WVdWekp5bGNiblpoY2lCVWNtRnVjMlp2Y20wZ1BTQnlaWEYxYVhKbEtDZGphWEJvWlhJdFltRnpaU2NwWEc1MllYSWdhVzVvWlhKcGRITWdQU0J5WlhGMWFYSmxLQ2RwYm1obGNtbDBjeWNwWEc1MllYSWdiVzlrWlhNZ1BTQnlaWEYxYVhKbEtDY3VMMjF2WkdWekp5bGNiblpoY2lCbFluUnJJRDBnY21WeGRXbHlaU2duWlhad1gySjVkR1Z6ZEc5clpYa25LVnh1ZG1GeUlGTjBjbVZoYlVOcGNHaGxjaUE5SUhKbGNYVnBjbVVvSnk0dmMzUnlaV0Z0UTJsd2FHVnlKeWxjYm5aaGNpQkJkWFJvUTJsd2FHVnlJRDBnY21WeGRXbHlaU2duTGk5aGRYUm9RMmx3YUdWeUp5bGNibWx1YUdWeWFYUnpLRU5wY0dobGNpd2dWSEpoYm5ObWIzSnRLVnh1Wm5WdVkzUnBiMjRnUTJsd2FHVnlJQ2h0YjJSbExDQnJaWGtzSUdsMktTQjdYRzRnSUdsbUlDZ2hLSFJvYVhNZ2FXNXpkR0Z1WTJWdlppQkRhWEJvWlhJcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QkRhWEJvWlhJb2JXOWtaU3dnYTJWNUxDQnBkaWxjYmlBZ2ZWeHVJQ0JVY21GdWMyWnZjbTB1WTJGc2JDaDBhR2x6S1Z4dUlDQjBhR2x6TGw5allXTm9aU0E5SUc1bGR5QlRjR3hwZEhSbGNpZ3BYRzRnSUhSb2FYTXVYMk5wY0dobGNpQTlJRzVsZHlCaFpYTXVRVVZUS0d0bGVTbGNiaUFnZEdocGN5NWZjSEpsZGlBOUlHNWxkeUJDZFdabVpYSW9hWFl1YkdWdVozUm9LVnh1SUNCcGRpNWpiM0I1S0hSb2FYTXVYM0J5WlhZcFhHNGdJSFJvYVhNdVgyMXZaR1VnUFNCdGIyUmxYRzRnSUhSb2FYTXVYMkYxZEc5d1lXUmthVzVuSUQwZ2RISjFaVnh1ZlZ4dVEybHdhR1Z5TG5CeWIzUnZkSGx3WlM1ZmRYQmtZWFJsSUQwZ1puVnVZM1JwYjI0Z0tHUmhkR0VwSUh0Y2JpQWdkR2hwY3k1ZlkyRmphR1V1WVdSa0tHUmhkR0VwWEc0Z0lIWmhjaUJqYUhWdWExeHVJQ0IyWVhJZ2RHaHBibWRjYmlBZ2RtRnlJRzkxZENBOUlGdGRYRzRnSUhkb2FXeGxJQ2dvWTJoMWJtc2dQU0IwYUdsekxsOWpZV05vWlM1blpYUW9LU2twSUh0Y2JpQWdJQ0IwYUdsdVp5QTlJSFJvYVhNdVgyMXZaR1V1Wlc1amNubHdkQ2gwYUdsekxDQmphSFZ1YXlsY2JpQWdJQ0J2ZFhRdWNIVnphQ2gwYUdsdVp5bGNiaUFnZlZ4dUlDQnlaWFIxY200Z1FuVm1abVZ5TG1OdmJtTmhkQ2h2ZFhRcFhHNTlYRzVEYVhCb1pYSXVjSEp2ZEc5MGVYQmxMbDltYVc1aGJDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdkbUZ5SUdOb2RXNXJJRDBnZEdocGN5NWZZMkZqYUdVdVpteDFjMmdvS1Z4dUlDQnBaaUFvZEdocGN5NWZZWFYwYjNCaFpHUnBibWNwSUh0Y2JpQWdJQ0JqYUhWdWF5QTlJSFJvYVhNdVgyMXZaR1V1Wlc1amNubHdkQ2gwYUdsekxDQmphSFZ1YXlsY2JpQWdJQ0IwYUdsekxsOWphWEJvWlhJdWMyTnlkV0lvS1Z4dUlDQWdJSEpsZEhWeWJpQmphSFZ1YTF4dUlDQjlJR1ZzYzJVZ2FXWWdLR05vZFc1ckxuUnZVM1J5YVc1bktDZG9aWGduS1NBaFBUMGdKekV3TVRBeE1ERXdNVEF4TURFd01UQXhNREV3TVRBeE1ERXdNVEF4TURFd0p5a2dlMXh1SUNBZ0lIUm9hWE11WDJOcGNHaGxjaTV6WTNKMVlpZ3BYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Nka1lYUmhJRzV2ZENCdGRXeDBhWEJzWlNCdlppQmliRzlqYXlCc1pXNW5kR2duS1Z4dUlDQjlYRzU5WEc1RGFYQm9aWEl1Y0hKdmRHOTBlWEJsTG5ObGRFRjFkRzlRWVdSa2FXNW5JRDBnWm5WdVkzUnBiMjRnS0hObGRGUnZLU0I3WEc0Z0lIUm9hWE11WDJGMWRHOXdZV1JrYVc1bklEMGdJU0Z6WlhSVWIxeHVmVnh1WEc1bWRXNWpkR2x2YmlCVGNHeHBkSFJsY2lBb0tTQjdYRzRnSUdsbUlDZ2hLSFJvYVhNZ2FXNXpkR0Z1WTJWdlppQlRjR3hwZEhSbGNpa3BJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRk53YkdsMGRHVnlLQ2xjYmlBZ2ZWeHVJQ0IwYUdsekxtTmhZMmhsSUQwZ2JtVjNJRUoxWm1abGNpZ25KeWxjYm4xY2JsTndiR2wwZEdWeUxuQnliM1J2ZEhsd1pTNWhaR1FnUFNCbWRXNWpkR2x2YmlBb1pHRjBZU2tnZTF4dUlDQjBhR2x6TG1OaFkyaGxJRDBnUW5WbVptVnlMbU52Ym1OaGRDaGJkR2hwY3k1allXTm9aU3dnWkdGMFlWMHBYRzU5WEc1Y2JsTndiR2wwZEdWeUxuQnliM1J2ZEhsd1pTNW5aWFFnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUdsbUlDaDBhR2x6TG1OaFkyaGxMbXhsYm1kMGFDQStJREUxS1NCN1hHNGdJQ0FnZG1GeUlHOTFkQ0E5SUhSb2FYTXVZMkZqYUdVdWMyeHBZMlVvTUN3Z01UWXBYRzRnSUNBZ2RHaHBjeTVqWVdOb1pTQTlJSFJvYVhNdVkyRmphR1V1YzJ4cFkyVW9NVFlwWEc0Z0lDQWdjbVYwZFhKdUlHOTFkRnh1SUNCOVhHNGdJSEpsZEhWeWJpQnVkV3hzWEc1OVhHNVRjR3hwZEhSbGNpNXdjbTkwYjNSNWNHVXVabXgxYzJnZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lIWmhjaUJzWlc0Z1BTQXhOaUF0SUhSb2FYTXVZMkZqYUdVdWJHVnVaM1JvWEc0Z0lIWmhjaUJ3WVdSQ2RXWm1JRDBnYm1WM0lFSjFabVpsY2loc1pXNHBYRzVjYmlBZ2RtRnlJR2tnUFNBdE1WeHVJQ0IzYUdsc1pTQW9LeXRwSUR3Z2JHVnVLU0I3WEc0Z0lDQWdjR0ZrUW5WbVppNTNjbWwwWlZWSmJuUTRLR3hsYml3Z2FTbGNiaUFnZlZ4dUlDQjJZWElnYjNWMElEMGdRblZtWm1WeUxtTnZibU5oZENoYmRHaHBjeTVqWVdOb1pTd2djR0ZrUW5WbVpsMHBYRzRnSUhKbGRIVnliaUJ2ZFhSY2JuMWNiblpoY2lCdGIyUmxiR2x6ZENBOUlIdGNiaUFnUlVOQ09pQnlaWEYxYVhKbEtDY3VMMjF2WkdWekwyVmpZaWNwTEZ4dUlDQkRRa002SUhKbGNYVnBjbVVvSnk0dmJXOWtaWE12WTJKakp5a3NYRzRnSUVOR1Fqb2djbVZ4ZFdseVpTZ25MaTl0YjJSbGN5OWpabUluS1N4Y2JpQWdRMFpDT0RvZ2NtVnhkV2x5WlNnbkxpOXRiMlJsY3k5alptSTRKeWtzWEc0Z0lFTkdRakU2SUhKbGNYVnBjbVVvSnk0dmJXOWtaWE12WTJaaU1TY3BMRnh1SUNCUFJrSTZJSEpsY1hWcGNtVW9KeTR2Ylc5a1pYTXZiMlppSnlrc1hHNGdJRU5VVWpvZ2NtVnhkV2x5WlNnbkxpOXRiMlJsY3k5amRISW5LU3hjYmlBZ1IwTk5PaUJ5WlhGMWFYSmxLQ2N1TDIxdlpHVnpMMk4wY2ljcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdOeVpXRjBaVU5wY0dobGNtbDJJQ2h6ZFdsMFpTd2djR0Z6YzNkdmNtUXNJR2wyS1NCN1hHNGdJSFpoY2lCamIyNW1hV2NnUFNCdGIyUmxjMXR6ZFdsMFpTNTBiMHh2ZDJWeVEyRnpaU2dwWFZ4dUlDQnBaaUFvSVdOdmJtWnBaeWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjJsdWRtRnNhV1FnYzNWcGRHVWdkSGx3WlNjcFhHNGdJSDFjYmlBZ2FXWWdLSFI1Y0dWdlppQnBkaUE5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNCcGRpQTlJRzVsZHlCQ2RXWm1aWElvYVhZcFhHNGdJSDFjYmlBZ2FXWWdLSFI1Y0dWdlppQndZWE56ZDI5eVpDQTlQVDBnSjNOMGNtbHVaeWNwSUh0Y2JpQWdJQ0J3WVhOemQyOXlaQ0E5SUc1bGR5QkNkV1ptWlhJb2NHRnpjM2R2Y21RcFhHNGdJSDFjYmlBZ2FXWWdLSEJoYzNOM2IzSmtMbXhsYm1kMGFDQWhQVDBnWTI5dVptbG5MbXRsZVNBdklEZ3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLQ2RwYm5aaGJHbGtJR3RsZVNCc1pXNW5kR2dnSnlBcklIQmhjM04zYjNKa0xteGxibWQwYUNsY2JpQWdmVnh1SUNCcFppQW9hWFl1YkdWdVozUm9JQ0U5UFNCamIyNW1hV2N1YVhZcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZHBiblpoYkdsa0lHbDJJR3hsYm1kMGFDQW5JQ3NnYVhZdWJHVnVaM1JvS1Z4dUlDQjlYRzRnSUdsbUlDaGpiMjVtYVdjdWRIbHdaU0E5UFQwZ0ozTjBjbVZoYlNjcElIdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGTjBjbVZoYlVOcGNHaGxjaWh0YjJSbGJHbHpkRnRqYjI1bWFXY3ViVzlrWlYwc0lIQmhjM04zYjNKa0xDQnBkaWxjYmlBZ2ZTQmxiSE5sSUdsbUlDaGpiMjVtYVdjdWRIbHdaU0E5UFQwZ0oyRjFkR2duS1NCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCQmRYUm9RMmx3YUdWeUtHMXZaR1ZzYVhOMFcyTnZibVpwWnk1dGIyUmxYU3dnY0dGemMzZHZjbVFzSUdsMktWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCdVpYY2dRMmx3YUdWeUtHMXZaR1ZzYVhOMFcyTnZibVpwWnk1dGIyUmxYU3dnY0dGemMzZHZjbVFzSUdsMktWeHVmVnh1Wm5WdVkzUnBiMjRnWTNKbFlYUmxRMmx3YUdWeUlDaHpkV2wwWlN3Z2NHRnpjM2R2Y21RcElIdGNiaUFnZG1GeUlHTnZibVpwWnlBOUlHMXZaR1Z6VzNOMWFYUmxMblJ2VEc5M1pYSkRZWE5sS0NsZFhHNGdJR2xtSUNnaFkyOXVabWxuS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnbmFXNTJZV3hwWkNCemRXbDBaU0IwZVhCbEp5bGNiaUFnZlZ4dUlDQjJZWElnYTJWNWN5QTlJR1ZpZEdzb2NHRnpjM2R2Y21Rc0lHWmhiSE5sTENCamIyNW1hV2N1YTJWNUxDQmpiMjVtYVdjdWFYWXBYRzRnSUhKbGRIVnliaUJqY21WaGRHVkRhWEJvWlhKcGRpaHpkV2wwWlN3Z2EyVjVjeTVyWlhrc0lHdGxlWE11YVhZcFhHNTlYRzVjYm1WNGNHOXlkSE11WTNKbFlYUmxRMmx3YUdWeWFYWWdQU0JqY21WaGRHVkRhWEJvWlhKcGRseHVaWGh3YjNKMGN5NWpjbVZoZEdWRGFYQm9aWElnUFNCamNtVmhkR1ZEYVhCb1pYSmNiaUpkZlE9PSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIG1vZGVzID0gcmVxdWlyZSgnLi9tb2RlcycpXG52YXIgU3RyZWFtQ2lwaGVyID0gcmVxdWlyZSgnLi9zdHJlYW1DaXBoZXInKVxudmFyIEF1dGhDaXBoZXIgPSByZXF1aXJlKCcuL2F1dGhDaXBoZXInKVxudmFyIGVidGsgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpXG5cbmluaGVyaXRzKERlY2lwaGVyLCBUcmFuc2Zvcm0pXG5mdW5jdGlvbiBEZWNpcGhlciAobW9kZSwga2V5LCBpdikge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRGVjaXBoZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBEZWNpcGhlcihtb2RlLCBrZXksIGl2KVxuICB9XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuX2NhY2hlID0gbmV3IFNwbGl0dGVyKClcbiAgdGhpcy5fbGFzdCA9IHZvaWQgMFxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBuZXcgQnVmZmVyKGl2Lmxlbmd0aClcbiAgaXYuY29weSh0aGlzLl9wcmV2KVxuICB0aGlzLl9tb2RlID0gbW9kZVxuICB0aGlzLl9hdXRvcGFkZGluZyA9IHRydWVcbn1cbkRlY2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG4gIHdoaWxlICgoY2h1bmsgPSB0aGlzLl9jYWNoZS5nZXQodGhpcy5fYXV0b3BhZGRpbmcpKSkge1xuICAgIHRoaW5nID0gdGhpcy5fbW9kZS5kZWNyeXB0KHRoaXMsIGNodW5rKVxuICAgIG91dC5wdXNoKHRoaW5nKVxuICB9XG4gIHJldHVybiBCdWZmZXIuY29uY2F0KG91dClcbn1cbkRlY2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjaHVuayA9IHRoaXMuX2NhY2hlLmZsdXNoKClcbiAgaWYgKHRoaXMuX2F1dG9wYWRkaW5nKSB7XG4gICAgcmV0dXJuIHVucGFkKHRoaXMuX21vZGUuZGVjcnlwdCh0aGlzLCBjaHVuaykpXG4gIH0gZWxzZSBpZiAoY2h1bmspIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgbm90IG11bHRpcGxlIG9mIGJsb2NrIGxlbmd0aCcpXG4gIH1cbn1cbkRlY2lwaGVyLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uIChzZXRUbykge1xuICB0aGlzLl9hdXRvcGFkZGluZyA9ICEhc2V0VG9cbn1cbmZ1bmN0aW9uIFNwbGl0dGVyICgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNwbGl0dGVyKSkge1xuICAgIHJldHVybiBuZXcgU3BsaXR0ZXIoKVxuICB9XG4gIHRoaXMuY2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxufVxuU3BsaXR0ZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuY2FjaGUgPSBCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBkYXRhXSlcbn1cblxuU3BsaXR0ZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChhdXRvUGFkZGluZykge1xuICB2YXIgb3V0XG4gIGlmIChhdXRvUGFkZGluZykge1xuICAgIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+IDE2KSB7XG4gICAgICBvdXQgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgICByZXR1cm4gb3V0XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+PSAxNikge1xuICAgICAgb3V0ID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNilcbiAgICAgIHRoaXMuY2FjaGUgPSB0aGlzLmNhY2hlLnNsaWNlKDE2KVxuICAgICAgcmV0dXJuIG91dFxuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbFxufVxuU3BsaXR0ZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy5jYWNoZVxuICB9XG59XG5mdW5jdGlvbiB1bnBhZCAobGFzdCkge1xuICB2YXIgcGFkZGVkID0gbGFzdFsxNV1cbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgcGFkZGVkKSB7XG4gICAgaWYgKGxhc3RbKGkgKyAoMTYgLSBwYWRkZWQpKV0gIT09IHBhZGRlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gZGVjcnlwdCBkYXRhJylcbiAgICB9XG4gIH1cbiAgaWYgKHBhZGRlZCA9PT0gMTYpIHtcbiAgICByZXR1cm5cbiAgfVxuICByZXR1cm4gbGFzdC5zbGljZSgwLCAxNiAtIHBhZGRlZClcbn1cblxudmFyIG1vZGVsaXN0ID0ge1xuICBFQ0I6IHJlcXVpcmUoJy4vbW9kZXMvZWNiJyksXG4gIENCQzogcmVxdWlyZSgnLi9tb2Rlcy9jYmMnKSxcbiAgQ0ZCOiByZXF1aXJlKCcuL21vZGVzL2NmYicpLFxuICBDRkI4OiByZXF1aXJlKCcuL21vZGVzL2NmYjgnKSxcbiAgQ0ZCMTogcmVxdWlyZSgnLi9tb2Rlcy9jZmIxJyksXG4gIE9GQjogcmVxdWlyZSgnLi9tb2Rlcy9vZmInKSxcbiAgQ1RSOiByZXF1aXJlKCcuL21vZGVzL2N0cicpLFxuICBHQ006IHJlcXVpcmUoJy4vbW9kZXMvY3RyJylcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVjaXBoZXJpdiAoc3VpdGUsIHBhc3N3b3JkLCBpdikge1xuICB2YXIgY29uZmlnID0gbW9kZXNbc3VpdGUudG9Mb3dlckNhc2UoKV1cbiAgaWYgKCFjb25maWcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuICB9XG4gIGlmICh0eXBlb2YgaXYgPT09ICdzdHJpbmcnKSB7XG4gICAgaXYgPSBuZXcgQnVmZmVyKGl2KVxuICB9XG4gIGlmICh0eXBlb2YgcGFzc3dvcmQgPT09ICdzdHJpbmcnKSB7XG4gICAgcGFzc3dvcmQgPSBuZXcgQnVmZmVyKHBhc3N3b3JkKVxuICB9XG4gIGlmIChwYXNzd29yZC5sZW5ndGggIT09IGNvbmZpZy5rZXkgLyA4KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBrZXkgbGVuZ3RoICcgKyBwYXNzd29yZC5sZW5ndGgpXG4gIH1cbiAgaWYgKGl2Lmxlbmd0aCAhPT0gY29uZmlnLml2KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBpdiBsZW5ndGggJyArIGl2Lmxlbmd0aClcbiAgfVxuICBpZiAoY29uZmlnLnR5cGUgPT09ICdzdHJlYW0nKSB7XG4gICAgcmV0dXJuIG5ldyBTdHJlYW1DaXBoZXIobW9kZWxpc3RbY29uZmlnLm1vZGVdLCBwYXNzd29yZCwgaXYsIHRydWUpXG4gIH0gZWxzZSBpZiAoY29uZmlnLnR5cGUgPT09ICdhdXRoJykge1xuICAgIHJldHVybiBuZXcgQXV0aENpcGhlcihtb2RlbGlzdFtjb25maWcubW9kZV0sIHBhc3N3b3JkLCBpdiwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gbmV3IERlY2lwaGVyKG1vZGVsaXN0W2NvbmZpZy5tb2RlXSwgcGFzc3dvcmQsIGl2KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHZhciBjb25maWcgPSBtb2Rlc1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwgY29uZmlnLmtleSwgY29uZmlnLml2KVxuICByZXR1cm4gY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyID0gY3JlYXRlRGVjaXBoZXJcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXJpdiA9IGNyZWF0ZURlY2lwaGVyaXZcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZbkp2ZDNObGNtbG1lUzFqYVhCb1pYSXZibTlrWlY5dGIyUjFiR1Z6TDJKeWIzZHpaWEpwWm5rdFlXVnpMMlJsWTNKNWNIUmxjaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUdGbGN5QTlJSEpsY1hWcGNtVW9KeTR2WVdWekp5bGNiblpoY2lCVWNtRnVjMlp2Y20wZ1BTQnlaWEYxYVhKbEtDZGphWEJvWlhJdFltRnpaU2NwWEc1MllYSWdhVzVvWlhKcGRITWdQU0J5WlhGMWFYSmxLQ2RwYm1obGNtbDBjeWNwWEc1MllYSWdiVzlrWlhNZ1BTQnlaWEYxYVhKbEtDY3VMMjF2WkdWekp5bGNiblpoY2lCVGRISmxZVzFEYVhCb1pYSWdQU0J5WlhGMWFYSmxLQ2N1TDNOMGNtVmhiVU5wY0dobGNpY3BYRzUyWVhJZ1FYVjBhRU5wY0dobGNpQTlJSEpsY1hWcGNtVW9KeTR2WVhWMGFFTnBjR2hsY2ljcFhHNTJZWElnWldKMGF5QTlJSEpsY1hWcGNtVW9KMlYyY0Y5aWVYUmxjM1J2YTJWNUp5bGNibHh1YVc1b1pYSnBkSE1vUkdWamFYQm9aWElzSUZSeVlXNXpabTl5YlNsY2JtWjFibU4wYVc5dUlFUmxZMmx3YUdWeUlDaHRiMlJsTENCclpYa3NJR2wyS1NCN1hHNGdJR2xtSUNnaEtIUm9hWE1nYVc1emRHRnVZMlZ2WmlCRVpXTnBjR2hsY2lrcElIdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lFUmxZMmx3YUdWeUtHMXZaR1VzSUd0bGVTd2dhWFlwWEc0Z0lIMWNiaUFnVkhKaGJuTm1iM0p0TG1OaGJHd29kR2hwY3lsY2JpQWdkR2hwY3k1ZlkyRmphR1VnUFNCdVpYY2dVM0JzYVhSMFpYSW9LVnh1SUNCMGFHbHpMbDlzWVhOMElEMGdkbTlwWkNBd1hHNGdJSFJvYVhNdVgyTnBjR2hsY2lBOUlHNWxkeUJoWlhNdVFVVlRLR3RsZVNsY2JpQWdkR2hwY3k1ZmNISmxkaUE5SUc1bGR5QkNkV1ptWlhJb2FYWXViR1Z1WjNSb0tWeHVJQ0JwZGk1amIzQjVLSFJvYVhNdVgzQnlaWFlwWEc0Z0lIUm9hWE11WDIxdlpHVWdQU0J0YjJSbFhHNGdJSFJvYVhNdVgyRjFkRzl3WVdSa2FXNW5JRDBnZEhKMVpWeHVmVnh1UkdWamFYQm9aWEl1Y0hKdmRHOTBlWEJsTGw5MWNHUmhkR1VnUFNCbWRXNWpkR2x2YmlBb1pHRjBZU2tnZTF4dUlDQjBhR2x6TGw5allXTm9aUzVoWkdRb1pHRjBZU2xjYmlBZ2RtRnlJR05vZFc1clhHNGdJSFpoY2lCMGFHbHVaMXh1SUNCMllYSWdiM1YwSUQwZ1cxMWNiaUFnZDJocGJHVWdLQ2hqYUhWdWF5QTlJSFJvYVhNdVgyTmhZMmhsTG1kbGRDaDBhR2x6TGw5aGRYUnZjR0ZrWkdsdVp5a3BLU0I3WEc0Z0lDQWdkR2hwYm1jZ1BTQjBhR2x6TGw5dGIyUmxMbVJsWTNKNWNIUW9kR2hwY3l3Z1kyaDFibXNwWEc0Z0lDQWdiM1YwTG5CMWMyZ29kR2hwYm1jcFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUVKMVptWmxjaTVqYjI1allYUW9iM1YwS1Z4dWZWeHVSR1ZqYVhCb1pYSXVjSEp2ZEc5MGVYQmxMbDltYVc1aGJDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdkbUZ5SUdOb2RXNXJJRDBnZEdocGN5NWZZMkZqYUdVdVpteDFjMmdvS1Z4dUlDQnBaaUFvZEdocGN5NWZZWFYwYjNCaFpHUnBibWNwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkVzV3WVdRb2RHaHBjeTVmYlc5a1pTNWtaV055ZVhCMEtIUm9hWE1zSUdOb2RXNXJLU2xjYmlBZ2ZTQmxiSE5sSUdsbUlDaGphSFZ1YXlrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduWkdGMFlTQnViM1FnYlhWc2RHbHdiR1VnYjJZZ1lteHZZMnNnYkdWdVozUm9KeWxjYmlBZ2ZWeHVmVnh1UkdWamFYQm9aWEl1Y0hKdmRHOTBlWEJsTG5ObGRFRjFkRzlRWVdSa2FXNW5JRDBnWm5WdVkzUnBiMjRnS0hObGRGUnZLU0I3WEc0Z0lIUm9hWE11WDJGMWRHOXdZV1JrYVc1bklEMGdJU0Z6WlhSVWIxeHVmVnh1Wm5WdVkzUnBiMjRnVTNCc2FYUjBaWElnS0NrZ2UxeHVJQ0JwWmlBb0lTaDBhR2x6SUdsdWMzUmhibU5sYjJZZ1UzQnNhWFIwWlhJcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlRjR3hwZEhSbGNpZ3BYRzRnSUgxY2JpQWdkR2hwY3k1allXTm9aU0E5SUc1bGR5QkNkV1ptWlhJb0p5Y3BYRzU5WEc1VGNHeHBkSFJsY2k1d2NtOTBiM1I1Y0dVdVlXUmtJRDBnWm5WdVkzUnBiMjRnS0dSaGRHRXBJSHRjYmlBZ2RHaHBjeTVqWVdOb1pTQTlJRUoxWm1abGNpNWpiMjVqWVhRb1czUm9hWE11WTJGamFHVXNJR1JoZEdGZEtWeHVmVnh1WEc1VGNHeHBkSFJsY2k1d2NtOTBiM1I1Y0dVdVoyVjBJRDBnWm5WdVkzUnBiMjRnS0dGMWRHOVFZV1JrYVc1bktTQjdYRzRnSUhaaGNpQnZkWFJjYmlBZ2FXWWdLR0YxZEc5UVlXUmthVzVuS1NCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11WTJGamFHVXViR1Z1WjNSb0lENGdNVFlwSUh0Y2JpQWdJQ0FnSUc5MWRDQTlJSFJvYVhNdVkyRmphR1V1YzJ4cFkyVW9NQ3dnTVRZcFhHNGdJQ0FnSUNCMGFHbHpMbU5oWTJobElEMGdkR2hwY3k1allXTm9aUzV6YkdsalpTZ3hOaWxjYmlBZ0lDQWdJSEpsZEhWeWJpQnZkWFJjYmlBZ0lDQjlYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTXVZMkZqYUdVdWJHVnVaM1JvSUQ0OUlERTJLU0I3WEc0Z0lDQWdJQ0J2ZFhRZ1BTQjBhR2x6TG1OaFkyaGxMbk5zYVdObEtEQXNJREUyS1Z4dUlDQWdJQ0FnZEdocGN5NWpZV05vWlNBOUlIUm9hWE11WTJGamFHVXVjMnhwWTJVb01UWXBYRzRnSUNBZ0lDQnlaWFIxY200Z2IzVjBYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCdWRXeHNYRzU5WEc1VGNHeHBkSFJsY2k1d2NtOTBiM1I1Y0dVdVpteDFjMmdnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUdsbUlDaDBhR2x6TG1OaFkyaGxMbXhsYm1kMGFDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU5oWTJobFhHNGdJSDFjYm4xY2JtWjFibU4wYVc5dUlIVnVjR0ZrSUNoc1lYTjBLU0I3WEc0Z0lIWmhjaUJ3WVdSa1pXUWdQU0JzWVhOMFd6RTFYVnh1SUNCMllYSWdhU0E5SUMweFhHNGdJSGRvYVd4bElDZ3JLMmtnUENCd1lXUmtaV1FwSUh0Y2JpQWdJQ0JwWmlBb2JHRnpkRnNvYVNBcklDZ3hOaUF0SUhCaFpHUmxaQ2twWFNBaFBUMGdjR0ZrWkdWa0tTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0ozVnVZV0pzWlNCMGJ5QmtaV055ZVhCMElHUmhkR0VuS1Z4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0JwWmlBb2NHRmtaR1ZrSUQwOVBTQXhOaWtnZTF4dUlDQWdJSEpsZEhWeWJseHVJQ0I5WEc0Z0lISmxkSFZ5YmlCc1lYTjBMbk5zYVdObEtEQXNJREUySUMwZ2NHRmtaR1ZrS1Z4dWZWeHVYRzUyWVhJZ2JXOWtaV3hwYzNRZ1BTQjdYRzRnSUVWRFFqb2djbVZ4ZFdseVpTZ25MaTl0YjJSbGN5OWxZMkluS1N4Y2JpQWdRMEpET2lCeVpYRjFhWEpsS0NjdUwyMXZaR1Z6TDJOaVl5Y3BMRnh1SUNCRFJrSTZJSEpsY1hWcGNtVW9KeTR2Ylc5a1pYTXZZMlppSnlrc1hHNGdJRU5HUWpnNklISmxjWFZwY21Vb0p5NHZiVzlrWlhNdlkyWmlPQ2NwTEZ4dUlDQkRSa0l4T2lCeVpYRjFhWEpsS0NjdUwyMXZaR1Z6TDJObVlqRW5LU3hjYmlBZ1QwWkNPaUJ5WlhGMWFYSmxLQ2N1TDIxdlpHVnpMMjltWWljcExGeHVJQ0JEVkZJNklISmxjWFZwY21Vb0p5NHZiVzlrWlhNdlkzUnlKeWtzWEc0Z0lFZERUVG9nY21WeGRXbHlaU2duTGk5dGIyUmxjeTlqZEhJbktWeHVmVnh1WEc1bWRXNWpkR2x2YmlCamNtVmhkR1ZFWldOcGNHaGxjbWwySUNoemRXbDBaU3dnY0dGemMzZHZjbVFzSUdsMktTQjdYRzRnSUhaaGNpQmpiMjVtYVdjZ1BTQnRiMlJsYzF0emRXbDBaUzUwYjB4dmQyVnlRMkZ6WlNncFhWeHVJQ0JwWmlBb0lXTnZibVpwWnlrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0oybHVkbUZzYVdRZ2MzVnBkR1VnZEhsd1pTY3BYRzRnSUgxY2JpQWdhV1lnS0hSNWNHVnZaaUJwZGlBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQnBkaUE5SUc1bGR5QkNkV1ptWlhJb2FYWXBYRzRnSUgxY2JpQWdhV1lnS0hSNWNHVnZaaUJ3WVhOemQyOXlaQ0E5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNCd1lYTnpkMjl5WkNBOUlHNWxkeUJDZFdabVpYSW9jR0Z6YzNkdmNtUXBYRzRnSUgxY2JpQWdhV1lnS0hCaGMzTjNiM0prTG14bGJtZDBhQ0FoUFQwZ1kyOXVabWxuTG10bGVTQXZJRGdwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkcGJuWmhiR2xrSUd0bGVTQnNaVzVuZEdnZ0p5QXJJSEJoYzNOM2IzSmtMbXhsYm1kMGFDbGNiaUFnZlZ4dUlDQnBaaUFvYVhZdWJHVnVaM1JvSUNFOVBTQmpiMjVtYVdjdWFYWXBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLQ2RwYm5aaGJHbGtJR2wySUd4bGJtZDBhQ0FuSUNzZ2FYWXViR1Z1WjNSb0tWeHVJQ0I5WEc0Z0lHbG1JQ2hqYjI1bWFXY3VkSGx3WlNBOVBUMGdKM04wY21WaGJTY3BJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRk4wY21WaGJVTnBjR2hsY2lodGIyUmxiR2x6ZEZ0amIyNW1hV2N1Ylc5a1pWMHNJSEJoYzNOM2IzSmtMQ0JwZGl3Z2RISjFaU2xjYmlBZ2ZTQmxiSE5sSUdsbUlDaGpiMjVtYVdjdWRIbHdaU0E5UFQwZ0oyRjFkR2duS1NCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCQmRYUm9RMmx3YUdWeUtHMXZaR1ZzYVhOMFcyTnZibVpwWnk1dGIyUmxYU3dnY0dGemMzZHZjbVFzSUdsMkxDQjBjblZsS1Z4dUlDQjlYRzRnSUhKbGRIVnliaUJ1WlhjZ1JHVmphWEJvWlhJb2JXOWtaV3hwYzNSYlkyOXVabWxuTG0xdlpHVmRMQ0J3WVhOemQyOXlaQ3dnYVhZcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdOeVpXRjBaVVJsWTJsd2FHVnlJQ2h6ZFdsMFpTd2djR0Z6YzNkdmNtUXBJSHRjYmlBZ2RtRnlJR052Ym1acFp5QTlJRzF2WkdWelczTjFhWFJsTG5SdlRHOTNaWEpEWVhObEtDbGRYRzRnSUdsbUlDZ2hZMjl1Wm1sbktTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25hVzUyWVd4cFpDQnpkV2wwWlNCMGVYQmxKeWxjYmlBZ2ZWeHVJQ0IyWVhJZ2EyVjVjeUE5SUdWaWRHc29jR0Z6YzNkdmNtUXNJR1poYkhObExDQmpiMjVtYVdjdWEyVjVMQ0JqYjI1bWFXY3VhWFlwWEc0Z0lISmxkSFZ5YmlCamNtVmhkR1ZFWldOcGNHaGxjbWwyS0hOMWFYUmxMQ0JyWlhsekxtdGxlU3dnYTJWNWN5NXBkaWxjYm4xY2JtVjRjRzl5ZEhNdVkzSmxZWFJsUkdWamFYQm9aWElnUFNCamNtVmhkR1ZFWldOcGNHaGxjbHh1Wlhod2IzSjBjeTVqY21WaGRHVkVaV05wY0dobGNtbDJJRDBnWTNKbFlYUmxSR1ZqYVhCb1pYSnBkbHh1SWwxOSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBtZDUgPSByZXF1aXJlKCdjcmVhdGUtaGFzaC9tZDUnKVxubW9kdWxlLmV4cG9ydHMgPSBFVlBfQnl0ZXNUb0tleVxuZnVuY3Rpb24gRVZQX0J5dGVzVG9LZXkgKHBhc3N3b3JkLCBzYWx0LCBrZXlMZW4sIGl2TGVuKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHBhc3N3b3JkKSkge1xuICAgIHBhc3N3b3JkID0gbmV3IEJ1ZmZlcihwYXNzd29yZCwgJ2JpbmFyeScpXG4gIH1cbiAgaWYgKHNhbHQgJiYgIUJ1ZmZlci5pc0J1ZmZlcihzYWx0KSkge1xuICAgIHNhbHQgPSBuZXcgQnVmZmVyKHNhbHQsICdiaW5hcnknKVxuICB9XG4gIGtleUxlbiA9IGtleUxlbiAvIDhcbiAgaXZMZW4gPSBpdkxlbiB8fCAwXG4gIHZhciBraSA9IDBcbiAgdmFyIGlpID0gMFxuICB2YXIga2V5ID0gbmV3IEJ1ZmZlcihrZXlMZW4pXG4gIHZhciBpdiA9IG5ldyBCdWZmZXIoaXZMZW4pXG4gIHZhciBhZGRtZCA9IDBcbiAgdmFyIG1kX2J1ZlxuICB2YXIgaVxuICB2YXIgYnVmcyA9IFtdXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgaWYgKGFkZG1kKysgPiAwKSB7XG4gICAgICBidWZzLnB1c2gobWRfYnVmKVxuICAgIH1cbiAgICBidWZzLnB1c2gocGFzc3dvcmQpXG4gICAgaWYgKHNhbHQpIHtcbiAgICAgIGJ1ZnMucHVzaChzYWx0KVxuICAgIH1cbiAgICBtZF9idWYgPSBtZDUoQnVmZmVyLmNvbmNhdChidWZzKSlcbiAgICBidWZzID0gW11cbiAgICBpID0gMFxuICAgIGlmIChrZXlMZW4gPiAwKSB7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBpZiAoa2V5TGVuID09PSAwKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaSA9PT0gbWRfYnVmLmxlbmd0aCkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAga2V5W2tpKytdID0gbWRfYnVmW2ldXG4gICAgICAgIGtleUxlbi0tXG4gICAgICAgIGkrK1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXZMZW4gPiAwICYmIGkgIT09IG1kX2J1Zi5sZW5ndGgpIHtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGlmIChpdkxlbiA9PT0gMCkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPT09IG1kX2J1Zi5sZW5ndGgpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGl2W2lpKytdID0gbWRfYnVmW2ldXG4gICAgICAgIGl2TGVuLS1cbiAgICAgICAgaSsrXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChrZXlMZW4gPT09IDAgJiYgaXZMZW4gPT09IDApIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIGZvciAoaSA9IDA7IGkgPCBtZF9idWYubGVuZ3RoOyBpKyspIHtcbiAgICBtZF9idWZbaV0gPSAwXG4gIH1cbiAgcmV0dXJuIHtcbiAgICBrZXk6IGtleSxcbiAgICBpdjogaXZcbiAgfVxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMWphWEJvWlhJdmJtOWtaVjl0YjJSMWJHVnpMMlYyY0Y5aWVYUmxjM1J2YTJWNUwybHVaR1Y0TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW5aaGNpQnRaRFVnUFNCeVpYRjFhWEpsS0NkamNtVmhkR1V0YUdGemFDOXRaRFVuS1Z4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCRlZsQmZRbmwwWlhOVWIwdGxlVnh1Wm5WdVkzUnBiMjRnUlZaUVgwSjVkR1Z6Vkc5TFpYa2dLSEJoYzNOM2IzSmtMQ0J6WVd4MExDQnJaWGxNWlc0c0lHbDJUR1Z1S1NCN1hHNGdJR2xtSUNnaFFuVm1abVZ5TG1selFuVm1abVZ5S0hCaGMzTjNiM0prS1NrZ2UxeHVJQ0FnSUhCaGMzTjNiM0prSUQwZ2JtVjNJRUoxWm1abGNpaHdZWE56ZDI5eVpDd2dKMkpwYm1GeWVTY3BYRzRnSUgxY2JpQWdhV1lnS0hOaGJIUWdKaVlnSVVKMVptWmxjaTVwYzBKMVptWmxjaWh6WVd4MEtTa2dlMXh1SUNBZ0lITmhiSFFnUFNCdVpYY2dRblZtWm1WeUtITmhiSFFzSUNkaWFXNWhjbmtuS1Z4dUlDQjlYRzRnSUd0bGVVeGxiaUE5SUd0bGVVeGxiaUF2SURoY2JpQWdhWFpNWlc0Z1BTQnBka3hsYmlCOGZDQXdYRzRnSUhaaGNpQnJhU0E5SURCY2JpQWdkbUZ5SUdscElEMGdNRnh1SUNCMllYSWdhMlY1SUQwZ2JtVjNJRUoxWm1abGNpaHJaWGxNWlc0cFhHNGdJSFpoY2lCcGRpQTlJRzVsZHlCQ2RXWm1aWElvYVhaTVpXNHBYRzRnSUhaaGNpQmhaR1J0WkNBOUlEQmNiaUFnZG1GeUlHMWtYMkoxWmx4dUlDQjJZWElnYVZ4dUlDQjJZWElnWW5WbWN5QTlJRnRkWEc0Z0lIZG9hV3hsSUNoMGNuVmxLU0I3WEc0Z0lDQWdhV1lnS0dGa1pHMWtLeXNnUGlBd0tTQjdYRzRnSUNBZ0lDQmlkV1p6TG5CMWMyZ29iV1JmWW5WbUtWeHVJQ0FnSUgxY2JpQWdJQ0JpZFdaekxuQjFjMmdvY0dGemMzZHZjbVFwWEc0Z0lDQWdhV1lnS0hOaGJIUXBJSHRjYmlBZ0lDQWdJR0oxWm5NdWNIVnphQ2h6WVd4MEtWeHVJQ0FnSUgxY2JpQWdJQ0J0WkY5aWRXWWdQU0J0WkRVb1FuVm1abVZ5TG1OdmJtTmhkQ2hpZFdaektTbGNiaUFnSUNCaWRXWnpJRDBnVzExY2JpQWdJQ0JwSUQwZ01GeHVJQ0FnSUdsbUlDaHJaWGxNWlc0Z1BpQXdLU0I3WEc0Z0lDQWdJQ0IzYUdsc1pTQW9kSEoxWlNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYTJWNVRHVnVJRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnWW5KbFlXdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb2FTQTlQVDBnYldSZlluVm1MbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYTJWNVcydHBLeXRkSUQwZ2JXUmZZblZtVzJsZFhHNGdJQ0FnSUNBZ0lHdGxlVXhsYmkwdFhHNGdJQ0FnSUNBZ0lHa3JLMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCcFppQW9hWFpNWlc0Z1BpQXdJQ1ltSUdrZ0lUMDlJRzFrWDJKMVppNXNaVzVuZEdncElIdGNiaUFnSUNBZ0lIZG9hV3hsSUNoMGNuVmxLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHBka3hsYmlBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLR2tnUFQwOUlHMWtYMkoxWmk1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmljbVZoYTF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbDJXMmxwS3l0ZElEMGdiV1JmWW5WbVcybGRYRzRnSUNBZ0lDQWdJR2wyVEdWdUxTMWNiaUFnSUNBZ0lDQWdhU3NyWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2hyWlhsTVpXNGdQVDA5SURBZ0ppWWdhWFpNWlc0Z1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lHWnZjaUFvYVNBOUlEQTdJR2tnUENCdFpGOWlkV1l1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNCdFpGOWlkV1piYVYwZ1BTQXdYRzRnSUgxY2JpQWdjbVYwZFhKdUlIdGNiaUFnSUNCclpYazZJR3RsZVN4Y2JpQWdJQ0JwZGpvZ2FYWmNiaUFnZlZ4dWZWeHVJbDE5IiwiJ3VzZSBzdHJpY3QnO1xuLypcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgUlNBIERhdGEgU2VjdXJpdHksIEluYy4gTUQ1IE1lc3NhZ2VcbiAqIERpZ2VzdCBBbGdvcml0aG0sIGFzIGRlZmluZWQgaW4gUkZDIDEzMjEuXG4gKiBWZXJzaW9uIDIuMSBDb3B5cmlnaHQgKEMpIFBhdWwgSm9obnN0b24gMTk5OSAtIDIwMDIuXG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2VcbiAqIFNlZSBodHRwOi8vcGFqaG9tZS5vcmcudWsvY3J5cHQvbWQ1IGZvciBtb3JlIGluZm8uXG4gKi9cblxudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuL2hlbHBlcnMnKTtcblxuLypcbiAqIENhbGN1bGF0ZSB0aGUgTUQ1IG9mIGFuIGFycmF5IG9mIGxpdHRsZS1lbmRpYW4gd29yZHMsIGFuZCBhIGJpdCBsZW5ndGhcbiAqL1xuZnVuY3Rpb24gY29yZV9tZDUoeCwgbGVuKVxue1xuICAvKiBhcHBlbmQgcGFkZGluZyAqL1xuICB4W2xlbiA+PiA1XSB8PSAweDgwIDw8ICgobGVuKSAlIDMyKTtcbiAgeFsoKChsZW4gKyA2NCkgPj4+IDkpIDw8IDQpICsgMTRdID0gbGVuO1xuXG4gIHZhciBhID0gIDE3MzI1ODQxOTM7XG4gIHZhciBiID0gLTI3MTczMzg3OTtcbiAgdmFyIGMgPSAtMTczMjU4NDE5NDtcbiAgdmFyIGQgPSAgMjcxNzMzODc4O1xuXG4gIGZvcih2YXIgaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSArPSAxNilcbiAge1xuICAgIHZhciBvbGRhID0gYTtcbiAgICB2YXIgb2xkYiA9IGI7XG4gICAgdmFyIG9sZGMgPSBjO1xuICAgIHZhciBvbGRkID0gZDtcblxuICAgIGEgPSBtZDVfZmYoYSwgYiwgYywgZCwgeFtpKyAwXSwgNyAsIC02ODA4NzY5MzYpO1xuICAgIGQgPSBtZDVfZmYoZCwgYSwgYiwgYywgeFtpKyAxXSwgMTIsIC0zODk1NjQ1ODYpO1xuICAgIGMgPSBtZDVfZmYoYywgZCwgYSwgYiwgeFtpKyAyXSwgMTcsICA2MDYxMDU4MTkpO1xuICAgIGIgPSBtZDVfZmYoYiwgYywgZCwgYSwgeFtpKyAzXSwgMjIsIC0xMDQ0NTI1MzMwKTtcbiAgICBhID0gbWQ1X2ZmKGEsIGIsIGMsIGQsIHhbaSsgNF0sIDcgLCAtMTc2NDE4ODk3KTtcbiAgICBkID0gbWQ1X2ZmKGQsIGEsIGIsIGMsIHhbaSsgNV0sIDEyLCAgMTIwMDA4MDQyNik7XG4gICAgYyA9IG1kNV9mZihjLCBkLCBhLCBiLCB4W2krIDZdLCAxNywgLTE0NzMyMzEzNDEpO1xuICAgIGIgPSBtZDVfZmYoYiwgYywgZCwgYSwgeFtpKyA3XSwgMjIsIC00NTcwNTk4Myk7XG4gICAgYSA9IG1kNV9mZihhLCBiLCBjLCBkLCB4W2krIDhdLCA3ICwgIDE3NzAwMzU0MTYpO1xuICAgIGQgPSBtZDVfZmYoZCwgYSwgYiwgYywgeFtpKyA5XSwgMTIsIC0xOTU4NDE0NDE3KTtcbiAgICBjID0gbWQ1X2ZmKGMsIGQsIGEsIGIsIHhbaSsxMF0sIDE3LCAtNDIwNjMpO1xuICAgIGIgPSBtZDVfZmYoYiwgYywgZCwgYSwgeFtpKzExXSwgMjIsIC0xOTkwNDA0MTYyKTtcbiAgICBhID0gbWQ1X2ZmKGEsIGIsIGMsIGQsIHhbaSsxMl0sIDcgLCAgMTgwNDYwMzY4Mik7XG4gICAgZCA9IG1kNV9mZihkLCBhLCBiLCBjLCB4W2krMTNdLCAxMiwgLTQwMzQxMTAxKTtcbiAgICBjID0gbWQ1X2ZmKGMsIGQsIGEsIGIsIHhbaSsxNF0sIDE3LCAtMTUwMjAwMjI5MCk7XG4gICAgYiA9IG1kNV9mZihiLCBjLCBkLCBhLCB4W2krMTVdLCAyMiwgIDEyMzY1MzUzMjkpO1xuXG4gICAgYSA9IG1kNV9nZyhhLCBiLCBjLCBkLCB4W2krIDFdLCA1ICwgLTE2NTc5NjUxMCk7XG4gICAgZCA9IG1kNV9nZyhkLCBhLCBiLCBjLCB4W2krIDZdLCA5ICwgLTEwNjk1MDE2MzIpO1xuICAgIGMgPSBtZDVfZ2coYywgZCwgYSwgYiwgeFtpKzExXSwgMTQsICA2NDM3MTc3MTMpO1xuICAgIGIgPSBtZDVfZ2coYiwgYywgZCwgYSwgeFtpKyAwXSwgMjAsIC0zNzM4OTczMDIpO1xuICAgIGEgPSBtZDVfZ2coYSwgYiwgYywgZCwgeFtpKyA1XSwgNSAsIC03MDE1NTg2OTEpO1xuICAgIGQgPSBtZDVfZ2coZCwgYSwgYiwgYywgeFtpKzEwXSwgOSAsICAzODAxNjA4Myk7XG4gICAgYyA9IG1kNV9nZyhjLCBkLCBhLCBiLCB4W2krMTVdLCAxNCwgLTY2MDQ3ODMzNSk7XG4gICAgYiA9IG1kNV9nZyhiLCBjLCBkLCBhLCB4W2krIDRdLCAyMCwgLTQwNTUzNzg0OCk7XG4gICAgYSA9IG1kNV9nZyhhLCBiLCBjLCBkLCB4W2krIDldLCA1ICwgIDU2ODQ0NjQzOCk7XG4gICAgZCA9IG1kNV9nZyhkLCBhLCBiLCBjLCB4W2krMTRdLCA5ICwgLTEwMTk4MDM2OTApO1xuICAgIGMgPSBtZDVfZ2coYywgZCwgYSwgYiwgeFtpKyAzXSwgMTQsIC0xODczNjM5NjEpO1xuICAgIGIgPSBtZDVfZ2coYiwgYywgZCwgYSwgeFtpKyA4XSwgMjAsICAxMTYzNTMxNTAxKTtcbiAgICBhID0gbWQ1X2dnKGEsIGIsIGMsIGQsIHhbaSsxM10sIDUgLCAtMTQ0NDY4MTQ2Nyk7XG4gICAgZCA9IG1kNV9nZyhkLCBhLCBiLCBjLCB4W2krIDJdLCA5ICwgLTUxNDAzNzg0KTtcbiAgICBjID0gbWQ1X2dnKGMsIGQsIGEsIGIsIHhbaSsgN10sIDE0LCAgMTczNTMyODQ3Myk7XG4gICAgYiA9IG1kNV9nZyhiLCBjLCBkLCBhLCB4W2krMTJdLCAyMCwgLTE5MjY2MDc3MzQpO1xuXG4gICAgYSA9IG1kNV9oaChhLCBiLCBjLCBkLCB4W2krIDVdLCA0ICwgLTM3ODU1OCk7XG4gICAgZCA9IG1kNV9oaChkLCBhLCBiLCBjLCB4W2krIDhdLCAxMSwgLTIwMjI1NzQ0NjMpO1xuICAgIGMgPSBtZDVfaGgoYywgZCwgYSwgYiwgeFtpKzExXSwgMTYsICAxODM5MDMwNTYyKTtcbiAgICBiID0gbWQ1X2hoKGIsIGMsIGQsIGEsIHhbaSsxNF0sIDIzLCAtMzUzMDk1NTYpO1xuICAgIGEgPSBtZDVfaGgoYSwgYiwgYywgZCwgeFtpKyAxXSwgNCAsIC0xNTMwOTkyMDYwKTtcbiAgICBkID0gbWQ1X2hoKGQsIGEsIGIsIGMsIHhbaSsgNF0sIDExLCAgMTI3Mjg5MzM1Myk7XG4gICAgYyA9IG1kNV9oaChjLCBkLCBhLCBiLCB4W2krIDddLCAxNiwgLTE1NTQ5NzYzMik7XG4gICAgYiA9IG1kNV9oaChiLCBjLCBkLCBhLCB4W2krMTBdLCAyMywgLTEwOTQ3MzA2NDApO1xuICAgIGEgPSBtZDVfaGgoYSwgYiwgYywgZCwgeFtpKzEzXSwgNCAsICA2ODEyNzkxNzQpO1xuICAgIGQgPSBtZDVfaGgoZCwgYSwgYiwgYywgeFtpKyAwXSwgMTEsIC0zNTg1MzcyMjIpO1xuICAgIGMgPSBtZDVfaGgoYywgZCwgYSwgYiwgeFtpKyAzXSwgMTYsIC03MjI1MjE5NzkpO1xuICAgIGIgPSBtZDVfaGgoYiwgYywgZCwgYSwgeFtpKyA2XSwgMjMsICA3NjAyOTE4OSk7XG4gICAgYSA9IG1kNV9oaChhLCBiLCBjLCBkLCB4W2krIDldLCA0ICwgLTY0MDM2NDQ4Nyk7XG4gICAgZCA9IG1kNV9oaChkLCBhLCBiLCBjLCB4W2krMTJdLCAxMSwgLTQyMTgxNTgzNSk7XG4gICAgYyA9IG1kNV9oaChjLCBkLCBhLCBiLCB4W2krMTVdLCAxNiwgIDUzMDc0MjUyMCk7XG4gICAgYiA9IG1kNV9oaChiLCBjLCBkLCBhLCB4W2krIDJdLCAyMywgLTk5NTMzODY1MSk7XG5cbiAgICBhID0gbWQ1X2lpKGEsIGIsIGMsIGQsIHhbaSsgMF0sIDYgLCAtMTk4NjMwODQ0KTtcbiAgICBkID0gbWQ1X2lpKGQsIGEsIGIsIGMsIHhbaSsgN10sIDEwLCAgMTEyNjg5MTQxNSk7XG4gICAgYyA9IG1kNV9paShjLCBkLCBhLCBiLCB4W2krMTRdLCAxNSwgLTE0MTYzNTQ5MDUpO1xuICAgIGIgPSBtZDVfaWkoYiwgYywgZCwgYSwgeFtpKyA1XSwgMjEsIC01NzQzNDA1NSk7XG4gICAgYSA9IG1kNV9paShhLCBiLCBjLCBkLCB4W2krMTJdLCA2ICwgIDE3MDA0ODU1NzEpO1xuICAgIGQgPSBtZDVfaWkoZCwgYSwgYiwgYywgeFtpKyAzXSwgMTAsIC0xODk0OTg2NjA2KTtcbiAgICBjID0gbWQ1X2lpKGMsIGQsIGEsIGIsIHhbaSsxMF0sIDE1LCAtMTA1MTUyMyk7XG4gICAgYiA9IG1kNV9paShiLCBjLCBkLCBhLCB4W2krIDFdLCAyMSwgLTIwNTQ5MjI3OTkpO1xuICAgIGEgPSBtZDVfaWkoYSwgYiwgYywgZCwgeFtpKyA4XSwgNiAsICAxODczMzEzMzU5KTtcbiAgICBkID0gbWQ1X2lpKGQsIGEsIGIsIGMsIHhbaSsxNV0sIDEwLCAtMzA2MTE3NDQpO1xuICAgIGMgPSBtZDVfaWkoYywgZCwgYSwgYiwgeFtpKyA2XSwgMTUsIC0xNTYwMTk4MzgwKTtcbiAgICBiID0gbWQ1X2lpKGIsIGMsIGQsIGEsIHhbaSsxM10sIDIxLCAgMTMwOTE1MTY0OSk7XG4gICAgYSA9IG1kNV9paShhLCBiLCBjLCBkLCB4W2krIDRdLCA2ICwgLTE0NTUyMzA3MCk7XG4gICAgZCA9IG1kNV9paShkLCBhLCBiLCBjLCB4W2krMTFdLCAxMCwgLTExMjAyMTAzNzkpO1xuICAgIGMgPSBtZDVfaWkoYywgZCwgYSwgYiwgeFtpKyAyXSwgMTUsICA3MTg3ODcyNTkpO1xuICAgIGIgPSBtZDVfaWkoYiwgYywgZCwgYSwgeFtpKyA5XSwgMjEsIC0zNDM0ODU1NTEpO1xuXG4gICAgYSA9IHNhZmVfYWRkKGEsIG9sZGEpO1xuICAgIGIgPSBzYWZlX2FkZChiLCBvbGRiKTtcbiAgICBjID0gc2FmZV9hZGQoYywgb2xkYyk7XG4gICAgZCA9IHNhZmVfYWRkKGQsIG9sZGQpO1xuICB9XG4gIHJldHVybiBBcnJheShhLCBiLCBjLCBkKTtcblxufVxuXG4vKlxuICogVGhlc2UgZnVuY3Rpb25zIGltcGxlbWVudCB0aGUgZm91ciBiYXNpYyBvcGVyYXRpb25zIHRoZSBhbGdvcml0aG0gdXNlcy5cbiAqL1xuZnVuY3Rpb24gbWQ1X2NtbihxLCBhLCBiLCB4LCBzLCB0KVxue1xuICByZXR1cm4gc2FmZV9hZGQoYml0X3JvbChzYWZlX2FkZChzYWZlX2FkZChhLCBxKSwgc2FmZV9hZGQoeCwgdCkpLCBzKSxiKTtcbn1cbmZ1bmN0aW9uIG1kNV9mZihhLCBiLCBjLCBkLCB4LCBzLCB0KVxue1xuICByZXR1cm4gbWQ1X2NtbigoYiAmIGMpIHwgKCh+YikgJiBkKSwgYSwgYiwgeCwgcywgdCk7XG59XG5mdW5jdGlvbiBtZDVfZ2coYSwgYiwgYywgZCwgeCwgcywgdClcbntcbiAgcmV0dXJuIG1kNV9jbW4oKGIgJiBkKSB8IChjICYgKH5kKSksIGEsIGIsIHgsIHMsIHQpO1xufVxuZnVuY3Rpb24gbWQ1X2hoKGEsIGIsIGMsIGQsIHgsIHMsIHQpXG57XG4gIHJldHVybiBtZDVfY21uKGIgXiBjIF4gZCwgYSwgYiwgeCwgcywgdCk7XG59XG5mdW5jdGlvbiBtZDVfaWkoYSwgYiwgYywgZCwgeCwgcywgdClcbntcbiAgcmV0dXJuIG1kNV9jbW4oYyBeIChiIHwgKH5kKSksIGEsIGIsIHgsIHMsIHQpO1xufVxuXG4vKlxuICogQWRkIGludGVnZXJzLCB3cmFwcGluZyBhdCAyXjMyLiBUaGlzIHVzZXMgMTYtYml0IG9wZXJhdGlvbnMgaW50ZXJuYWxseVxuICogdG8gd29yayBhcm91bmQgYnVncyBpbiBzb21lIEpTIGludGVycHJldGVycy5cbiAqL1xuZnVuY3Rpb24gc2FmZV9hZGQoeCwgeSlcbntcbiAgdmFyIGxzdyA9ICh4ICYgMHhGRkZGKSArICh5ICYgMHhGRkZGKTtcbiAgdmFyIG1zdyA9ICh4ID4+IDE2KSArICh5ID4+IDE2KSArIChsc3cgPj4gMTYpO1xuICByZXR1cm4gKG1zdyA8PCAxNikgfCAobHN3ICYgMHhGRkZGKTtcbn1cblxuLypcbiAqIEJpdHdpc2Ugcm90YXRlIGEgMzItYml0IG51bWJlciB0byB0aGUgbGVmdC5cbiAqL1xuZnVuY3Rpb24gYml0X3JvbChudW0sIGNudClcbntcbiAgcmV0dXJuIChudW0gPDwgY250KSB8IChudW0gPj4+ICgzMiAtIGNudCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1kNShidWYpIHtcbiAgcmV0dXJuIGhlbHBlcnMuaGFzaChidWYsIGNvcmVfbWQ1LCAxNik7XG59OyIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbid1c2Ugc3RyaWN0JztcbnZhciBpbnRTaXplID0gNDtcbnZhciB6ZXJvQnVmZmVyID0gbmV3IEJ1ZmZlcihpbnRTaXplKTsgemVyb0J1ZmZlci5maWxsKDApO1xudmFyIGNocnN6ID0gODtcblxuZnVuY3Rpb24gdG9BcnJheShidWYsIGJpZ0VuZGlhbikge1xuICBpZiAoKGJ1Zi5sZW5ndGggJSBpbnRTaXplKSAhPT0gMCkge1xuICAgIHZhciBsZW4gPSBidWYubGVuZ3RoICsgKGludFNpemUgLSAoYnVmLmxlbmd0aCAlIGludFNpemUpKTtcbiAgICBidWYgPSBCdWZmZXIuY29uY2F0KFtidWYsIHplcm9CdWZmZXJdLCBsZW4pO1xuICB9XG5cbiAgdmFyIGFyciA9IFtdO1xuICB2YXIgZm4gPSBiaWdFbmRpYW4gPyBidWYucmVhZEludDMyQkUgOiBidWYucmVhZEludDMyTEU7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnVmLmxlbmd0aDsgaSArPSBpbnRTaXplKSB7XG4gICAgYXJyLnB1c2goZm4uY2FsbChidWYsIGkpKTtcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiB0b0J1ZmZlcihhcnIsIHNpemUsIGJpZ0VuZGlhbikge1xuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcihzaXplKTtcbiAgdmFyIGZuID0gYmlnRW5kaWFuID8gYnVmLndyaXRlSW50MzJCRSA6IGJ1Zi53cml0ZUludDMyTEU7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgZm4uY2FsbChidWYsIGFycltpXSwgaSAqIDQsIHRydWUpO1xuICB9XG4gIHJldHVybiBidWY7XG59XG5cbmZ1bmN0aW9uIGhhc2goYnVmLCBmbiwgaGFzaFNpemUsIGJpZ0VuZGlhbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSBidWYgPSBuZXcgQnVmZmVyKGJ1Zik7XG4gIHZhciBhcnIgPSBmbih0b0FycmF5KGJ1ZiwgYmlnRW5kaWFuKSwgYnVmLmxlbmd0aCAqIGNocnN6KTtcbiAgcmV0dXJuIHRvQnVmZmVyKGFyciwgaGFzaFNpemUsIGJpZ0VuZGlhbik7XG59XG5leHBvcnRzLmhhc2ggPSBoYXNoO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZM0psWVhSbExXaGhjMmd2YUdWc2NHVnljeTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpZDFjMlVnYzNSeWFXTjBKenRjYm5aaGNpQnBiblJUYVhwbElEMGdORHRjYm5aaGNpQjZaWEp2UW5WbVptVnlJRDBnYm1WM0lFSjFabVpsY2locGJuUlRhWHBsS1RzZ2VtVnliMEoxWm1abGNpNW1hV3hzS0RBcE8xeHVkbUZ5SUdOb2NuTjZJRDBnT0R0Y2JseHVablZ1WTNScGIyNGdkRzlCY25KaGVTaGlkV1lzSUdKcFowVnVaR2xoYmlrZ2UxeHVJQ0JwWmlBb0tHSjFaaTVzWlc1bmRHZ2dKU0JwYm5SVGFYcGxLU0FoUFQwZ01Da2dlMXh1SUNBZ0lIWmhjaUJzWlc0Z1BTQmlkV1l1YkdWdVozUm9JQ3NnS0dsdWRGTnBlbVVnTFNBb1luVm1MbXhsYm1kMGFDQWxJR2x1ZEZOcGVtVXBLVHRjYmlBZ0lDQmlkV1lnUFNCQ2RXWm1aWEl1WTI5dVkyRjBLRnRpZFdZc0lIcGxjbTlDZFdabVpYSmRMQ0JzWlc0cE8xeHVJQ0I5WEc1Y2JpQWdkbUZ5SUdGeWNpQTlJRnRkTzF4dUlDQjJZWElnWm00Z1BTQmlhV2RGYm1ScFlXNGdQeUJpZFdZdWNtVmhaRWx1ZERNeVFrVWdPaUJpZFdZdWNtVmhaRWx1ZERNeVRFVTdYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z1luVm1MbXhsYm1kMGFEc2dhU0FyUFNCcGJuUlRhWHBsS1NCN1hHNGdJQ0FnWVhKeUxuQjFjMmdvWm00dVkyRnNiQ2hpZFdZc0lHa3BLVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdZWEp5TzF4dWZWeHVYRzVtZFc1amRHbHZiaUIwYjBKMVptWmxjaWhoY25Jc0lITnBlbVVzSUdKcFowVnVaR2xoYmlrZ2UxeHVJQ0IyWVhJZ1luVm1JRDBnYm1WM0lFSjFabVpsY2loemFYcGxLVHRjYmlBZ2RtRnlJR1p1SUQwZ1ltbG5SVzVrYVdGdUlEOGdZblZtTG5keWFYUmxTVzUwTXpKQ1JTQTZJR0oxWmk1M2NtbDBaVWx1ZERNeVRFVTdYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z1lYSnlMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnWm00dVkyRnNiQ2hpZFdZc0lHRnljbHRwWFN3Z2FTQXFJRFFzSUhSeWRXVXBPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQmlkV1k3WEc1OVhHNWNibVoxYm1OMGFXOXVJR2hoYzJnb1luVm1MQ0JtYml3Z2FHRnphRk5wZW1Vc0lHSnBaMFZ1WkdsaGJpa2dlMXh1SUNCcFppQW9JVUoxWm1abGNpNXBjMEoxWm1abGNpaGlkV1lwS1NCaWRXWWdQU0J1WlhjZ1FuVm1abVZ5S0dKMVppazdYRzRnSUhaaGNpQmhjbklnUFNCbWJpaDBiMEZ5Y21GNUtHSjFaaXdnWW1sblJXNWthV0Z1S1N3Z1luVm1MbXhsYm1kMGFDQXFJR05vY25ONktUdGNiaUFnY21WMGRYSnVJSFJ2UW5WbVptVnlLR0Z5Y2l3Z2FHRnphRk5wZW1Vc0lHSnBaMFZ1WkdsaGJpazdYRzU5WEc1bGVIQnZjblJ6TG1oaGMyZ2dQU0JvWVhOb095SmRmUT09IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xudmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmluaGVyaXRzKFN0cmVhbUNpcGhlciwgVHJhbnNmb3JtKVxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW1DaXBoZXJcbmZ1bmN0aW9uIFN0cmVhbUNpcGhlciAobW9kZSwga2V5LCBpdiwgZGVjcnlwdCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU3RyZWFtQ2lwaGVyKSkge1xuICAgIHJldHVybiBuZXcgU3RyZWFtQ2lwaGVyKG1vZGUsIGtleSwgaXYpXG4gIH1cbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KVxuICB0aGlzLl9wcmV2ID0gbmV3IEJ1ZmZlcihpdi5sZW5ndGgpXG4gIHRoaXMuX2NhY2hlID0gbmV3IEJ1ZmZlcignJylcbiAgdGhpcy5fc2VjQ2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxuICB0aGlzLl9kZWNyeXB0ID0gZGVjcnlwdFxuICBpdi5jb3B5KHRoaXMuX3ByZXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgcmV0dXJuIHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaywgdGhpcy5fZGVjcnlwdClcbn1cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9jaXBoZXIuc2NydWIoKVxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMWphWEJvWlhJdmJtOWtaVjl0YjJSMWJHVnpMMkp5YjNkelpYSnBabmt0WVdWekwzTjBjbVZoYlVOcGNHaGxjaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlHRmxjeUE5SUhKbGNYVnBjbVVvSnk0dllXVnpKeWxjYm5aaGNpQlVjbUZ1YzJadmNtMGdQU0J5WlhGMWFYSmxLQ2RqYVhCb1pYSXRZbUZ6WlNjcFhHNTJZWElnYVc1b1pYSnBkSE1nUFNCeVpYRjFhWEpsS0NkcGJtaGxjbWwwY3ljcFhHNWNibWx1YUdWeWFYUnpLRk4wY21WaGJVTnBjR2hsY2l3Z1ZISmhibk5tYjNKdEtWeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlRkSEpsWVcxRGFYQm9aWEpjYm1aMWJtTjBhVzl1SUZOMGNtVmhiVU5wY0dobGNpQW9iVzlrWlN3Z2EyVjVMQ0JwZGl3Z1pHVmpjbmx3ZENrZ2UxeHVJQ0JwWmlBb0lTaDBhR2x6SUdsdWMzUmhibU5sYjJZZ1UzUnlaV0Z0UTJsd2FHVnlLU2tnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVTNSeVpXRnRRMmx3YUdWeUtHMXZaR1VzSUd0bGVTd2dhWFlwWEc0Z0lIMWNiaUFnVkhKaGJuTm1iM0p0TG1OaGJHd29kR2hwY3lsY2JpQWdkR2hwY3k1ZlkybHdhR1Z5SUQwZ2JtVjNJR0ZsY3k1QlJWTW9hMlY1S1Z4dUlDQjBhR2x6TGw5d2NtVjJJRDBnYm1WM0lFSjFabVpsY2locGRpNXNaVzVuZEdncFhHNGdJSFJvYVhNdVgyTmhZMmhsSUQwZ2JtVjNJRUoxWm1abGNpZ25KeWxjYmlBZ2RHaHBjeTVmYzJWalEyRmphR1VnUFNCdVpYY2dRblZtWm1WeUtDY25LVnh1SUNCMGFHbHpMbDlrWldOeWVYQjBJRDBnWkdWamNubHdkRnh1SUNCcGRpNWpiM0I1S0hSb2FYTXVYM0J5WlhZcFhHNGdJSFJvYVhNdVgyMXZaR1VnUFNCdGIyUmxYRzU5WEc1VGRISmxZVzFEYVhCb1pYSXVjSEp2ZEc5MGVYQmxMbDkxY0dSaGRHVWdQU0JtZFc1amRHbHZiaUFvWTJoMWJtc3BJSHRjYmlBZ2NtVjBkWEp1SUhSb2FYTXVYMjF2WkdVdVpXNWpjbmx3ZENoMGFHbHpMQ0JqYUhWdWF5d2dkR2hwY3k1ZlpHVmpjbmx3ZENsY2JuMWNibE4wY21WaGJVTnBjR2hsY2k1d2NtOTBiM1I1Y0dVdVgyWnBibUZzSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNCMGFHbHpMbDlqYVhCb1pYSXVjMk55ZFdJb0tWeHVmVnh1SWwxOSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZnVuY3Rpb24gZ2V0QmxvY2sgKHNlbGYpIHtcbiAgc2VsZi5fcHJldiA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgcmV0dXJuIHNlbGYuX3ByZXZcbn1cblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rKSB7XG4gIHdoaWxlIChzZWxmLl9jYWNoZS5sZW5ndGggPCBjaHVuay5sZW5ndGgpIHtcbiAgICBzZWxmLl9jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3NlbGYuX2NhY2hlLCBnZXRCbG9jayhzZWxmKV0pXG4gIH1cblxuICB2YXIgcGFkID0gc2VsZi5fY2FjaGUuc2xpY2UoMCwgY2h1bmsubGVuZ3RoKVxuICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGNodW5rLmxlbmd0aClcbiAgcmV0dXJuIHhvcihjaHVuaywgcGFkKVxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMWphWEJvWlhJdmJtOWtaVjl0YjJSMWJHVnpMMkp5YjNkelpYSnBabmt0WVdWekwyMXZaR1Z6TDI5bVlpNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUhodmNpQTlJSEpsY1hWcGNtVW9KMkoxWm1abGNpMTRiM0luS1Z4dVhHNW1kVzVqZEdsdmJpQm5aWFJDYkc5amF5QW9jMlZzWmlrZ2UxeHVJQ0J6Wld4bUxsOXdjbVYySUQwZ2MyVnNaaTVmWTJsd2FHVnlMbVZ1WTNKNWNIUkNiRzlqYXloelpXeG1MbDl3Y21WMktWeHVJQ0J5WlhSMWNtNGdjMlZzWmk1ZmNISmxkbHh1ZlZ4dVhHNWxlSEJ2Y25SekxtVnVZM0o1Y0hRZ1BTQm1kVzVqZEdsdmJpQW9jMlZzWml3Z1kyaDFibXNwSUh0Y2JpQWdkMmhwYkdVZ0tITmxiR1l1WDJOaFkyaGxMbXhsYm1kMGFDQThJR05vZFc1ckxteGxibWQwYUNrZ2UxeHVJQ0FnSUhObGJHWXVYMk5oWTJobElEMGdRblZtWm1WeUxtTnZibU5oZENoYmMyVnNaaTVmWTJGamFHVXNJR2RsZEVKc2IyTnJLSE5sYkdZcFhTbGNiaUFnZlZ4dVhHNGdJSFpoY2lCd1lXUWdQU0J6Wld4bUxsOWpZV05vWlM1emJHbGpaU2d3TENCamFIVnVheTVzWlc1bmRHZ3BYRzRnSUhObGJHWXVYMk5oWTJobElEMGdjMlZzWmk1ZlkyRmphR1V1YzJ4cFkyVW9ZMmgxYm1zdWJHVnVaM1JvS1Z4dUlDQnlaWFIxY200Z2VHOXlLR05vZFc1ckxDQndZV1FwWEc1OVhHNGlYWDA9IiwiZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGJsb2NrKSB7XG4gIHJldHVybiBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKGJsb2NrKVxufVxuZXhwb3J0cy5kZWNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGJsb2NrKSB7XG4gIHJldHVybiBzZWxmLl9jaXBoZXIuZGVjcnlwdEJsb2NrKGJsb2NrKVxufVxuIiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xudmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5mdW5jdGlvbiBpbmNyMzIgKGl2KSB7XG4gIHZhciBsZW4gPSBpdi5sZW5ndGhcbiAgdmFyIGl0ZW1cbiAgd2hpbGUgKGxlbi0tKSB7XG4gICAgaXRlbSA9IGl2LnJlYWRVSW50OChsZW4pXG4gICAgaWYgKGl0ZW0gPT09IDI1NSkge1xuICAgICAgaXYud3JpdGVVSW50OCgwLCBsZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZW0rK1xuICAgICAgaXYud3JpdGVVSW50OChpdGVtLCBsZW4pXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRCbG9jayAoc2VsZikge1xuICB2YXIgb3V0ID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICBpbmNyMzIoc2VsZi5fcHJldilcbiAgcmV0dXJuIG91dFxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmspIHtcbiAgd2hpbGUgKHNlbGYuX2NhY2hlLmxlbmd0aCA8IGNodW5rLmxlbmd0aCkge1xuICAgIHNlbGYuX2NhY2hlID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fY2FjaGUsIGdldEJsb2NrKHNlbGYpXSlcbiAgfVxuICB2YXIgcGFkID0gc2VsZi5fY2FjaGUuc2xpY2UoMCwgY2h1bmsubGVuZ3RoKVxuICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGNodW5rLmxlbmd0aClcbiAgcmV0dXJuIHhvcihjaHVuaywgcGFkKVxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMWphWEJvWlhJdmJtOWtaVjl0YjJSMWJHVnpMMkp5YjNkelpYSnBabmt0WVdWekwyMXZaR1Z6TDJOMGNpNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlIaHZjaUE5SUhKbGNYVnBjbVVvSjJKMVptWmxjaTE0YjNJbktWeHVYRzVtZFc1amRHbHZiaUJwYm1OeU16SWdLR2wyS1NCN1hHNGdJSFpoY2lCc1pXNGdQU0JwZGk1c1pXNW5kR2hjYmlBZ2RtRnlJR2wwWlcxY2JpQWdkMmhwYkdVZ0tHeGxiaTB0S1NCN1hHNGdJQ0FnYVhSbGJTQTlJR2wyTG5KbFlXUlZTVzUwT0Noc1pXNHBYRzRnSUNBZ2FXWWdLR2wwWlcwZ1BUMDlJREkxTlNrZ2UxeHVJQ0FnSUNBZ2FYWXVkM0pwZEdWVlNXNTBPQ2d3TENCc1pXNHBYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdsMFpXMHJLMXh1SUNBZ0lDQWdhWFl1ZDNKcGRHVlZTVzUwT0NocGRHVnRMQ0JzWlc0cFhHNGdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lIMWNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJuWlhSQ2JHOWpheUFvYzJWc1ppa2dlMXh1SUNCMllYSWdiM1YwSUQwZ2MyVnNaaTVmWTJsd2FHVnlMbVZ1WTNKNWNIUkNiRzlqYXloelpXeG1MbDl3Y21WMktWeHVJQ0JwYm1OeU16SW9jMlZzWmk1ZmNISmxkaWxjYmlBZ2NtVjBkWEp1SUc5MWRGeHVmVnh1WEc1bGVIQnZjblJ6TG1WdVkzSjVjSFFnUFNCbWRXNWpkR2x2YmlBb2MyVnNaaXdnWTJoMWJtc3BJSHRjYmlBZ2QyaHBiR1VnS0hObGJHWXVYMk5oWTJobExteGxibWQwYUNBOElHTm9kVzVyTG14bGJtZDBhQ2tnZTF4dUlDQWdJSE5sYkdZdVgyTmhZMmhsSUQwZ1FuVm1abVZ5TG1OdmJtTmhkQ2hiYzJWc1ppNWZZMkZqYUdVc0lHZGxkRUpzYjJOcktITmxiR1lwWFNsY2JpQWdmVnh1SUNCMllYSWdjR0ZrSUQwZ2MyVnNaaTVmWTJGamFHVXVjMnhwWTJVb01Dd2dZMmgxYm1zdWJHVnVaM1JvS1Z4dUlDQnpaV3htTGw5allXTm9aU0E5SUhObGJHWXVYMk5oWTJobExuTnNhV05sS0dOb2RXNXJMbXhsYm1kMGFDbGNiaUFnY21WMGRYSnVJSGh2Y2loamFIVnVheXdnY0dGa0tWeHVmVnh1SWwxOSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbmZ1bmN0aW9uIGVuY3J5cHRCeXRlIChzZWxmLCBieXRlUGFyYW0sIGRlY3J5cHQpIHtcbiAgdmFyIHBhZCA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgdmFyIG91dCA9IHBhZFswXSBeIGJ5dGVQYXJhbVxuICBzZWxmLl9wcmV2ID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fcHJldi5zbGljZSgxKSwgbmV3IEJ1ZmZlcihbZGVjcnlwdCA/IGJ5dGVQYXJhbSA6IG91dF0pXSlcbiAgcmV0dXJuIG91dFxufVxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rLCBkZWNyeXB0KSB7XG4gIHZhciBsZW4gPSBjaHVuay5sZW5ndGhcbiAgdmFyIG91dCA9IG5ldyBCdWZmZXIobGVuKVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBlbmNyeXB0Qnl0ZShzZWxmLCBjaHVua1tpXSwgZGVjcnlwdClcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WW5KdmQzTmxjbWxtZVMxamFYQm9aWEl2Ym05a1pWOXRiMlIxYkdWekwySnliM2R6WlhKcFpua3RZV1Z6TDIxdlpHVnpMMk5tWWpndWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2labWxzWlNJNkltZGxibVZ5WVhSbFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUptZFc1amRHbHZiaUJsYm1OeWVYQjBRbmwwWlNBb2MyVnNaaXdnWW5sMFpWQmhjbUZ0TENCa1pXTnllWEIwS1NCN1hHNGdJSFpoY2lCd1lXUWdQU0J6Wld4bUxsOWphWEJvWlhJdVpXNWpjbmx3ZEVKc2IyTnJLSE5sYkdZdVgzQnlaWFlwWEc0Z0lIWmhjaUJ2ZFhRZ1BTQndZV1JiTUYwZ1hpQmllWFJsVUdGeVlXMWNiaUFnYzJWc1ppNWZjSEpsZGlBOUlFSjFabVpsY2k1amIyNWpZWFFvVzNObGJHWXVYM0J5WlhZdWMyeHBZMlVvTVNrc0lHNWxkeUJDZFdabVpYSW9XMlJsWTNKNWNIUWdQeUJpZVhSbFVHRnlZVzBnT2lCdmRYUmRLVjBwWEc0Z0lISmxkSFZ5YmlCdmRYUmNibjFjYm1WNGNHOXlkSE11Wlc1amNubHdkQ0E5SUdaMWJtTjBhVzl1SUNoelpXeG1MQ0JqYUhWdWF5d2daR1ZqY25sd2RDa2dlMXh1SUNCMllYSWdiR1Z1SUQwZ1kyaDFibXN1YkdWdVozUm9YRzRnSUhaaGNpQnZkWFFnUFNCdVpYY2dRblZtWm1WeUtHeGxiaWxjYmlBZ2RtRnlJR2tnUFNBdE1WeHVJQ0IzYUdsc1pTQW9LeXRwSUR3Z2JHVnVLU0I3WEc0Z0lDQWdiM1YwVzJsZElEMGdaVzVqY25sd2RFSjVkR1VvYzJWc1ppd2dZMmgxYm10YmFWMHNJR1JsWTNKNWNIUXBYRzRnSUgxY2JpQWdjbVYwZFhKdUlHOTFkRnh1ZlZ4dUlsMTkiLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG5mdW5jdGlvbiBlbmNyeXB0Qnl0ZSAoc2VsZiwgYnl0ZVBhcmFtLCBkZWNyeXB0KSB7XG4gIHZhciBwYWRcbiAgdmFyIGkgPSAtMVxuICB2YXIgbGVuID0gOFxuICB2YXIgb3V0ID0gMFxuICB2YXIgYml0LCB2YWx1ZVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgcGFkID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICAgIGJpdCA9IChieXRlUGFyYW0gJiAoMSA8PCAoNyAtIGkpKSkgPyAweDgwIDogMFxuICAgIHZhbHVlID0gcGFkWzBdIF4gYml0XG4gICAgb3V0ICs9ICgodmFsdWUgJiAweDgwKSA+PiAoaSAlIDgpKVxuICAgIHNlbGYuX3ByZXYgPSBzaGlmdEluKHNlbGYuX3ByZXYsIGRlY3J5cHQgPyBiaXQgOiB2YWx1ZSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmssIGRlY3J5cHQpIHtcbiAgdmFyIGxlbiA9IGNodW5rLmxlbmd0aFxuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcihsZW4pXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIG91dFtpXSA9IGVuY3J5cHRCeXRlKHNlbGYsIGNodW5rW2ldLCBkZWNyeXB0KVxuICB9XG4gIHJldHVybiBvdXRcbn1cbmZ1bmN0aW9uIHNoaWZ0SW4gKGJ1ZmZlciwgdmFsdWUpIHtcbiAgdmFyIGxlbiA9IGJ1ZmZlci5sZW5ndGhcbiAgdmFyIGkgPSAtMVxuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcihidWZmZXIubGVuZ3RoKVxuICBidWZmZXIgPSBCdWZmZXIuY29uY2F0KFtidWZmZXIsIG5ldyBCdWZmZXIoW3ZhbHVlXSldKVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0W2ldID0gYnVmZmVyW2ldIDw8IDEgfCBidWZmZXJbaSArIDFdID4+ICg3KVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZbkp2ZDNObGNtbG1lUzFqYVhCb1pYSXZibTlrWlY5dGIyUjFiR1Z6TDJKeWIzZHpaWEpwWm5rdFlXVnpMMjF2WkdWekwyTm1ZakV1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1aMWJtTjBhVzl1SUdWdVkzSjVjSFJDZVhSbElDaHpaV3htTENCaWVYUmxVR0Z5WVcwc0lHUmxZM0o1Y0hRcElIdGNiaUFnZG1GeUlIQmhaRnh1SUNCMllYSWdhU0E5SUMweFhHNGdJSFpoY2lCc1pXNGdQU0E0WEc0Z0lIWmhjaUJ2ZFhRZ1BTQXdYRzRnSUhaaGNpQmlhWFFzSUhaaGJIVmxYRzRnSUhkb2FXeGxJQ2dySzJrZ1BDQnNaVzRwSUh0Y2JpQWdJQ0J3WVdRZ1BTQnpaV3htTGw5amFYQm9aWEl1Wlc1amNubHdkRUpzYjJOcktITmxiR1l1WDNCeVpYWXBYRzRnSUNBZ1ltbDBJRDBnS0dKNWRHVlFZWEpoYlNBbUlDZ3hJRHc4SUNnM0lDMGdhU2twS1NBL0lEQjRPREFnT2lBd1hHNGdJQ0FnZG1Gc2RXVWdQU0J3WVdSYk1GMGdYaUJpYVhSY2JpQWdJQ0J2ZFhRZ0t6MGdLQ2gyWVd4MVpTQW1JREI0T0RBcElENCtJQ2hwSUNVZ09Da3BYRzRnSUNBZ2MyVnNaaTVmY0hKbGRpQTlJSE5vYVdaMFNXNG9jMlZzWmk1ZmNISmxkaXdnWkdWamNubHdkQ0EvSUdKcGRDQTZJSFpoYkhWbEtWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCdmRYUmNibjFjYm1WNGNHOXlkSE11Wlc1amNubHdkQ0E5SUdaMWJtTjBhVzl1SUNoelpXeG1MQ0JqYUhWdWF5d2daR1ZqY25sd2RDa2dlMXh1SUNCMllYSWdiR1Z1SUQwZ1kyaDFibXN1YkdWdVozUm9YRzRnSUhaaGNpQnZkWFFnUFNCdVpYY2dRblZtWm1WeUtHeGxiaWxjYmlBZ2RtRnlJR2tnUFNBdE1WeHVJQ0IzYUdsc1pTQW9LeXRwSUR3Z2JHVnVLU0I3WEc0Z0lDQWdiM1YwVzJsZElEMGdaVzVqY25sd2RFSjVkR1VvYzJWc1ppd2dZMmgxYm10YmFWMHNJR1JsWTNKNWNIUXBYRzRnSUgxY2JpQWdjbVYwZFhKdUlHOTFkRnh1ZlZ4dVpuVnVZM1JwYjI0Z2MyaHBablJKYmlBb1luVm1abVZ5TENCMllXeDFaU2tnZTF4dUlDQjJZWElnYkdWdUlEMGdZblZtWm1WeUxteGxibWQwYUZ4dUlDQjJZWElnYVNBOUlDMHhYRzRnSUhaaGNpQnZkWFFnUFNCdVpYY2dRblZtWm1WeUtHSjFabVpsY2k1c1pXNW5kR2dwWEc0Z0lHSjFabVpsY2lBOUlFSjFabVpsY2k1amIyNWpZWFFvVzJKMVptWmxjaXdnYm1WM0lFSjFabVpsY2loYmRtRnNkV1ZkS1YwcFhHNGdJSGRvYVd4bElDZ3JLMmtnUENCc1pXNHBJSHRjYmlBZ0lDQnZkWFJiYVYwZ1BTQmlkV1ptWlhKYmFWMGdQRHdnTVNCOElHSjFabVpsY2x0cElDc2dNVjBnUGo0Z0tEY3BYRzRnSUgxY2JpQWdjbVYwZFhKdUlHOTFkRnh1ZlZ4dUlsMTkiLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG52YXIgeG9yID0gcmVxdWlyZSgnYnVmZmVyLXhvcicpXG5cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBkYXRhLCBkZWNyeXB0KSB7XG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKCcnKVxuICB2YXIgbGVuXG5cbiAgd2hpbGUgKGRhdGEubGVuZ3RoKSB7XG4gICAgaWYgKHNlbGYuX2NhY2hlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgc2VsZi5fY2FjaGUgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gICAgICBzZWxmLl9wcmV2ID0gbmV3IEJ1ZmZlcignJylcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5fY2FjaGUubGVuZ3RoIDw9IGRhdGEubGVuZ3RoKSB7XG4gICAgICBsZW4gPSBzZWxmLl9jYWNoZS5sZW5ndGhcbiAgICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoW291dCwgZW5jcnlwdFN0YXJ0KHNlbGYsIGRhdGEuc2xpY2UoMCwgbGVuKSwgZGVjcnlwdCldKVxuICAgICAgZGF0YSA9IGRhdGEuc2xpY2UobGVuKVxuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFtvdXQsIGVuY3J5cHRTdGFydChzZWxmLCBkYXRhLCBkZWNyeXB0KV0pXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cbmZ1bmN0aW9uIGVuY3J5cHRTdGFydCAoc2VsZiwgZGF0YSwgZGVjcnlwdCkge1xuICB2YXIgbGVuID0gZGF0YS5sZW5ndGhcbiAgdmFyIG91dCA9IHhvcihkYXRhLCBzZWxmLl9jYWNoZSlcbiAgc2VsZi5fY2FjaGUgPSBzZWxmLl9jYWNoZS5zbGljZShsZW4pXG4gIHNlbGYuX3ByZXYgPSBCdWZmZXIuY29uY2F0KFtzZWxmLl9wcmV2LCBkZWNyeXB0ID8gZGF0YSA6IG91dF0pXG4gIHJldHVybiBvdXRcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZbkp2ZDNObGNtbG1lUzFqYVhCb1pYSXZibTlrWlY5dGIyUjFiR1Z6TDJKeWIzZHpaWEpwWm5rdFlXVnpMMjF2WkdWekwyTm1ZaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWRtRnlJSGh2Y2lBOUlISmxjWFZwY21Vb0oySjFabVpsY2kxNGIzSW5LVnh1WEc1bGVIQnZjblJ6TG1WdVkzSjVjSFFnUFNCbWRXNWpkR2x2YmlBb2MyVnNaaXdnWkdGMFlTd2daR1ZqY25sd2RDa2dlMXh1SUNCMllYSWdiM1YwSUQwZ2JtVjNJRUoxWm1abGNpZ25KeWxjYmlBZ2RtRnlJR3hsYmx4dVhHNGdJSGRvYVd4bElDaGtZWFJoTG14bGJtZDBhQ2tnZTF4dUlDQWdJR2xtSUNoelpXeG1MbDlqWVdOb1pTNXNaVzVuZEdnZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUhObGJHWXVYMk5oWTJobElEMGdjMlZzWmk1ZlkybHdhR1Z5TG1WdVkzSjVjSFJDYkc5amF5aHpaV3htTGw5d2NtVjJLVnh1SUNBZ0lDQWdjMlZzWmk1ZmNISmxkaUE5SUc1bGR5QkNkV1ptWlhJb0p5Y3BYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSE5sYkdZdVgyTmhZMmhsTG14bGJtZDBhQ0E4UFNCa1lYUmhMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdiR1Z1SUQwZ2MyVnNaaTVmWTJGamFHVXViR1Z1WjNSb1hHNGdJQ0FnSUNCdmRYUWdQU0JDZFdabVpYSXVZMjl1WTJGMEtGdHZkWFFzSUdWdVkzSjVjSFJUZEdGeWRDaHpaV3htTENCa1lYUmhMbk5zYVdObEtEQXNJR3hsYmlrc0lHUmxZM0o1Y0hRcFhTbGNiaUFnSUNBZ0lHUmhkR0VnUFNCa1lYUmhMbk5zYVdObEtHeGxiaWxjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2IzVjBJRDBnUW5WbVptVnlMbU52Ym1OaGRDaGJiM1YwTENCbGJtTnllWEIwVTNSaGNuUW9jMlZzWml3Z1pHRjBZU3dnWkdWamNubHdkQ2xkS1Z4dUlDQWdJQ0FnWW5KbFlXdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2IzVjBYRzU5WEc1bWRXNWpkR2x2YmlCbGJtTnllWEIwVTNSaGNuUWdLSE5sYkdZc0lHUmhkR0VzSUdSbFkzSjVjSFFwSUh0Y2JpQWdkbUZ5SUd4bGJpQTlJR1JoZEdFdWJHVnVaM1JvWEc0Z0lIWmhjaUJ2ZFhRZ1BTQjRiM0lvWkdGMFlTd2djMlZzWmk1ZlkyRmphR1VwWEc0Z0lITmxiR1l1WDJOaFkyaGxJRDBnYzJWc1ppNWZZMkZqYUdVdWMyeHBZMlVvYkdWdUtWeHVJQ0J6Wld4bUxsOXdjbVYySUQwZ1FuVm1abVZ5TG1OdmJtTmhkQ2hiYzJWc1ppNWZjSEpsZGl3Z1pHVmpjbmx3ZENBL0lHUmhkR0VnT2lCdmRYUmRLVnh1SUNCeVpYUjFjbTRnYjNWMFhHNTlYRzRpWFgwPSIsInZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGJsb2NrKSB7XG4gIHZhciBkYXRhID0geG9yKGJsb2NrLCBzZWxmLl9wcmV2KVxuXG4gIHNlbGYuX3ByZXYgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKGRhdGEpXG4gIHJldHVybiBzZWxmLl9wcmV2XG59XG5cbmV4cG9ydHMuZGVjcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBibG9jaykge1xuICB2YXIgcGFkID0gc2VsZi5fcHJldlxuXG4gIHNlbGYuX3ByZXYgPSBibG9ja1xuICB2YXIgb3V0ID0gc2VsZi5fY2lwaGVyLmRlY3J5cHRCbG9jayhibG9jaylcblxuICByZXR1cm4geG9yKG91dCwgcGFkKVxufVxuIiwiZXhwb3J0c1snYWVzLTEyOC1lY2InXSA9IHtcbiAgY2lwaGVyOiAnQUVTJyxcbiAga2V5OiAxMjgsXG4gIGl2OiAwLFxuICBtb2RlOiAnRUNCJyxcbiAgdHlwZTogJ2Jsb2NrJ1xufVxuZXhwb3J0c1snYWVzLTE5Mi1lY2InXSA9IHtcbiAgY2lwaGVyOiAnQUVTJyxcbiAga2V5OiAxOTIsXG4gIGl2OiAwLFxuICBtb2RlOiAnRUNCJyxcbiAgdHlwZTogJ2Jsb2NrJ1xufVxuZXhwb3J0c1snYWVzLTI1Ni1lY2InXSA9IHtcbiAgY2lwaGVyOiAnQUVTJyxcbiAga2V5OiAyNTYsXG4gIGl2OiAwLFxuICBtb2RlOiAnRUNCJyxcbiAgdHlwZTogJ2Jsb2NrJ1xufVxuZXhwb3J0c1snYWVzLTEyOC1jYmMnXSA9IHtcbiAgY2lwaGVyOiAnQUVTJyxcbiAga2V5OiAxMjgsXG4gIGl2OiAxNixcbiAgbW9kZTogJ0NCQycsXG4gIHR5cGU6ICdibG9jaydcbn1cbmV4cG9ydHNbJ2Flcy0xOTItY2JjJ10gPSB7XG4gIGNpcGhlcjogJ0FFUycsXG4gIGtleTogMTkyLFxuICBpdjogMTYsXG4gIG1vZGU6ICdDQkMnLFxuICB0eXBlOiAnYmxvY2snXG59XG5leHBvcnRzWydhZXMtMjU2LWNiYyddID0ge1xuICBjaXBoZXI6ICdBRVMnLFxuICBrZXk6IDI1NixcbiAgaXY6IDE2LFxuICBtb2RlOiAnQ0JDJyxcbiAgdHlwZTogJ2Jsb2NrJ1xufVxuZXhwb3J0c1snYWVzMTI4J10gPSBleHBvcnRzWydhZXMtMTI4LWNiYyddXG5leHBvcnRzWydhZXMxOTInXSA9IGV4cG9ydHNbJ2Flcy0xOTItY2JjJ11cbmV4cG9ydHNbJ2FlczI1NiddID0gZXhwb3J0c1snYWVzLTI1Ni1jYmMnXVxuZXhwb3J0c1snYWVzLTEyOC1jZmInXSA9IHtcbiAgY2lwaGVyOiAnQUVTJyxcbiAga2V5OiAxMjgsXG4gIGl2OiAxNixcbiAgbW9kZTogJ0NGQicsXG4gIHR5cGU6ICdzdHJlYW0nXG59XG5leHBvcnRzWydhZXMtMTkyLWNmYiddID0ge1xuICBjaXBoZXI6ICdBRVMnLFxuICBrZXk6IDE5MixcbiAgaXY6IDE2LFxuICBtb2RlOiAnQ0ZCJyxcbiAgdHlwZTogJ3N0cmVhbSdcbn1cbmV4cG9ydHNbJ2Flcy0yNTYtY2ZiJ10gPSB7XG4gIGNpcGhlcjogJ0FFUycsXG4gIGtleTogMjU2LFxuICBpdjogMTYsXG4gIG1vZGU6ICdDRkInLFxuICB0eXBlOiAnc3RyZWFtJ1xufVxuZXhwb3J0c1snYWVzLTEyOC1jZmI4J10gPSB7XG4gIGNpcGhlcjogJ0FFUycsXG4gIGtleTogMTI4LFxuICBpdjogMTYsXG4gIG1vZGU6ICdDRkI4JyxcbiAgdHlwZTogJ3N0cmVhbSdcbn1cbmV4cG9ydHNbJ2Flcy0xOTItY2ZiOCddID0ge1xuICBjaXBoZXI6ICdBRVMnLFxuICBrZXk6IDE5MixcbiAgaXY6IDE2LFxuICBtb2RlOiAnQ0ZCOCcsXG4gIHR5cGU6ICdzdHJlYW0nXG59XG5leHBvcnRzWydhZXMtMjU2LWNmYjgnXSA9IHtcbiAgY2lwaGVyOiAnQUVTJyxcbiAga2V5OiAyNTYsXG4gIGl2OiAxNixcbiAgbW9kZTogJ0NGQjgnLFxuICB0eXBlOiAnc3RyZWFtJ1xufVxuZXhwb3J0c1snYWVzLTEyOC1jZmIxJ10gPSB7XG4gIGNpcGhlcjogJ0FFUycsXG4gIGtleTogMTI4LFxuICBpdjogMTYsXG4gIG1vZGU6ICdDRkIxJyxcbiAgdHlwZTogJ3N0cmVhbSdcbn1cbmV4cG9ydHNbJ2Flcy0xOTItY2ZiMSddID0ge1xuICBjaXBoZXI6ICdBRVMnLFxuICBrZXk6IDE5MixcbiAgaXY6IDE2LFxuICBtb2RlOiAnQ0ZCMScsXG4gIHR5cGU6ICdzdHJlYW0nXG59XG5leHBvcnRzWydhZXMtMjU2LWNmYjEnXSA9IHtcbiAgY2lwaGVyOiAnQUVTJyxcbiAga2V5OiAyNTYsXG4gIGl2OiAxNixcbiAgbW9kZTogJ0NGQjEnLFxuICB0eXBlOiAnc3RyZWFtJ1xufVxuZXhwb3J0c1snYWVzLTEyOC1vZmInXSA9IHtcbiAgY2lwaGVyOiAnQUVTJyxcbiAga2V5OiAxMjgsXG4gIGl2OiAxNixcbiAgbW9kZTogJ09GQicsXG4gIHR5cGU6ICdzdHJlYW0nXG59XG5leHBvcnRzWydhZXMtMTkyLW9mYiddID0ge1xuICBjaXBoZXI6ICdBRVMnLFxuICBrZXk6IDE5MixcbiAgaXY6IDE2LFxuICBtb2RlOiAnT0ZCJyxcbiAgdHlwZTogJ3N0cmVhbSdcbn1cbmV4cG9ydHNbJ2Flcy0yNTYtb2ZiJ10gPSB7XG4gIGNpcGhlcjogJ0FFUycsXG4gIGtleTogMjU2LFxuICBpdjogMTYsXG4gIG1vZGU6ICdPRkInLFxuICB0eXBlOiAnc3RyZWFtJ1xufVxuZXhwb3J0c1snYWVzLTEyOC1jdHInXSA9IHtcbiAgY2lwaGVyOiAnQUVTJyxcbiAga2V5OiAxMjgsXG4gIGl2OiAxNixcbiAgbW9kZTogJ0NUUicsXG4gIHR5cGU6ICdzdHJlYW0nXG59XG5leHBvcnRzWydhZXMtMTkyLWN0ciddID0ge1xuICBjaXBoZXI6ICdBRVMnLFxuICBrZXk6IDE5MixcbiAgaXY6IDE2LFxuICBtb2RlOiAnQ1RSJyxcbiAgdHlwZTogJ3N0cmVhbSdcbn1cbmV4cG9ydHNbJ2Flcy0yNTYtY3RyJ10gPSB7XG4gIGNpcGhlcjogJ0FFUycsXG4gIGtleTogMjU2LFxuICBpdjogMTYsXG4gIG1vZGU6ICdDVFInLFxuICB0eXBlOiAnc3RyZWFtJ1xufVxuZXhwb3J0c1snYWVzLTEyOC1nY20nXSA9IHtcbiAgY2lwaGVyOiAnQUVTJyxcbiAga2V5OiAxMjgsXG4gIGl2OiAxMixcbiAgbW9kZTogJ0dDTScsXG4gIHR5cGU6ICdhdXRoJ1xufVxuZXhwb3J0c1snYWVzLTE5Mi1nY20nXSA9IHtcbiAgY2lwaGVyOiAnQUVTJyxcbiAga2V5OiAxOTIsXG4gIGl2OiAxMixcbiAgbW9kZTogJ0dDTScsXG4gIHR5cGU6ICdhdXRoJ1xufVxuZXhwb3J0c1snYWVzLTI1Ni1nY20nXSA9IHtcbiAgY2lwaGVyOiAnQUVTJyxcbiAga2V5OiAyNTYsXG4gIGl2OiAxMixcbiAgbW9kZTogJ0dDTScsXG4gIHR5cGU6ICdhdXRoJ1xufVxuIiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xudmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgR0hBU0ggPSByZXF1aXJlKCcuL2doYXNoJylcbnZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcbmluaGVyaXRzKFN0cmVhbUNpcGhlciwgVHJhbnNmb3JtKVxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW1DaXBoZXJcblxuZnVuY3Rpb24gU3RyZWFtQ2lwaGVyIChtb2RlLCBrZXksIGl2LCBkZWNyeXB0KSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTdHJlYW1DaXBoZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBTdHJlYW1DaXBoZXIobW9kZSwga2V5LCBpdilcbiAgfVxuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuICB0aGlzLl9maW5JRCA9IEJ1ZmZlci5jb25jYXQoW2l2LCBuZXcgQnVmZmVyKFswLCAwLCAwLCAxXSldKVxuICBpdiA9IEJ1ZmZlci5jb25jYXQoW2l2LCBuZXcgQnVmZmVyKFswLCAwLCAwLCAyXSldKVxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBuZXcgQnVmZmVyKGl2Lmxlbmd0aClcbiAgdGhpcy5fY2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxuICB0aGlzLl9zZWNDYWNoZSA9IG5ldyBCdWZmZXIoJycpXG4gIHRoaXMuX2RlY3J5cHQgPSBkZWNyeXB0XG4gIHRoaXMuX2FsZW4gPSAwXG4gIHRoaXMuX2xlbiA9IDBcbiAgaXYuY29weSh0aGlzLl9wcmV2KVxuICB0aGlzLl9tb2RlID0gbW9kZVxuICB2YXIgaCA9IG5ldyBCdWZmZXIoNClcbiAgaC5maWxsKDApXG4gIHRoaXMuX2doYXNoID0gbmV3IEdIQVNIKHRoaXMuX2NpcGhlci5lbmNyeXB0QmxvY2soaCkpXG4gIHRoaXMuX2F1dGhUYWcgPSBudWxsXG4gIHRoaXMuX2NhbGxlZCA9IGZhbHNlXG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgaWYgKCF0aGlzLl9jYWxsZWQgJiYgdGhpcy5fYWxlbikge1xuICAgIHZhciBydW1wID0gMTYgLSAodGhpcy5fYWxlbiAlIDE2KVxuICAgIGlmIChydW1wIDwgMTYpIHtcbiAgICAgIHJ1bXAgPSBuZXcgQnVmZmVyKHJ1bXApXG4gICAgICBydW1wLmZpbGwoMClcbiAgICAgIHRoaXMuX2doYXNoLnVwZGF0ZShydW1wKVxuICAgIH1cbiAgfVxuICB0aGlzLl9jYWxsZWQgPSB0cnVlXG4gIHZhciBvdXQgPSB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmspXG4gIGlmICh0aGlzLl9kZWNyeXB0KSB7XG4gICAgdGhpcy5fZ2hhc2gudXBkYXRlKGNodW5rKVxuICB9IGVsc2Uge1xuICAgIHRoaXMuX2doYXNoLnVwZGF0ZShvdXQpXG4gIH1cbiAgdGhpcy5fbGVuICs9IGNodW5rLmxlbmd0aFxuICByZXR1cm4gb3V0XG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuX2RlY3J5cHQgJiYgIXRoaXMuX2F1dGhUYWcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHN0YXRlIG9yIHVuYWJsZSB0byBhdXRoZW50aWNhdGUgZGF0YScpXG4gIH1cbiAgdmFyIHRhZyA9IHhvcih0aGlzLl9naGFzaC5maW5hbCh0aGlzLl9hbGVuICogOCwgdGhpcy5fbGVuICogOCksIHRoaXMuX2NpcGhlci5lbmNyeXB0QmxvY2sodGhpcy5fZmluSUQpKVxuICBpZiAodGhpcy5fZGVjcnlwdCkge1xuICAgIGlmICh4b3JUZXN0KHRhZywgdGhpcy5fYXV0aFRhZykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgc3RhdGUgb3IgdW5hYmxlIHRvIGF1dGhlbnRpY2F0ZSBkYXRhJylcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fYXV0aFRhZyA9IHRhZ1xuICB9XG4gIHRoaXMuX2NpcGhlci5zY3J1YigpXG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLmdldEF1dGhUYWcgPSBmdW5jdGlvbiBnZXRBdXRoVGFnICgpIHtcbiAgaWYgKCF0aGlzLl9kZWNyeXB0ICYmIEJ1ZmZlci5pc0J1ZmZlcih0aGlzLl9hdXRoVGFnKSkge1xuICAgIHJldHVybiB0aGlzLl9hdXRoVGFnXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0aW5nIHRvIGdldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG4gIH1cbn1cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuc2V0QXV0aFRhZyA9IGZ1bmN0aW9uIHNldEF1dGhUYWcgKHRhZykge1xuICBpZiAodGhpcy5fZGVjcnlwdCkge1xuICAgIHRoaXMuX2F1dGhUYWcgPSB0YWdcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRpbmcgdG8gc2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbiAgfVxufVxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5zZXRBQUQgPSBmdW5jdGlvbiBzZXRBQUQgKGJ1Zikge1xuICBpZiAoIXRoaXMuX2NhbGxlZCkge1xuICAgIHRoaXMuX2doYXNoLnVwZGF0ZShidWYpXG4gICAgdGhpcy5fYWxlbiArPSBidWYubGVuZ3RoXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0aW5nIHRvIHNldCBBQUQgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxuICB9XG59XG5mdW5jdGlvbiB4b3JUZXN0IChhLCBiKSB7XG4gIHZhciBvdXQgPSAwXG4gIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICBvdXQrK1xuICB9XG4gIHZhciBsZW4gPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIG91dCArPSAoYVtpXSBeIGJbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMWphWEJvWlhJdmJtOWtaVjl0YjJSMWJHVnpMMkp5YjNkelpYSnBabmt0WVdWekwyRjFkR2hEYVhCb1pYSXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCaFpYTWdQU0J5WlhGMWFYSmxLQ2N1TDJGbGN5Y3BYRzUyWVhJZ1ZISmhibk5tYjNKdElEMGdjbVZ4ZFdseVpTZ25ZMmx3YUdWeUxXSmhjMlVuS1Z4dWRtRnlJR2x1YUdWeWFYUnpJRDBnY21WeGRXbHlaU2duYVc1b1pYSnBkSE1uS1Z4dWRtRnlJRWRJUVZOSUlEMGdjbVZ4ZFdseVpTZ25MaTluYUdGemFDY3BYRzUyWVhJZ2VHOXlJRDBnY21WeGRXbHlaU2duWW5WbVptVnlMWGh2Y2ljcFhHNXBibWhsY21sMGN5aFRkSEpsWVcxRGFYQm9aWElzSUZSeVlXNXpabTl5YlNsY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1UzUnlaV0Z0UTJsd2FHVnlYRzVjYm1aMWJtTjBhVzl1SUZOMGNtVmhiVU5wY0dobGNpQW9iVzlrWlN3Z2EyVjVMQ0JwZGl3Z1pHVmpjbmx3ZENrZ2UxeHVJQ0JwWmlBb0lTaDBhR2x6SUdsdWMzUmhibU5sYjJZZ1UzUnlaV0Z0UTJsd2FHVnlLU2tnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVTNSeVpXRnRRMmx3YUdWeUtHMXZaR1VzSUd0bGVTd2dhWFlwWEc0Z0lIMWNiaUFnVkhKaGJuTm1iM0p0TG1OaGJHd29kR2hwY3lsY2JpQWdkR2hwY3k1ZlptbHVTVVFnUFNCQ2RXWm1aWEl1WTI5dVkyRjBLRnRwZGl3Z2JtVjNJRUoxWm1abGNpaGJNQ3dnTUN3Z01Dd2dNVjBwWFNsY2JpQWdhWFlnUFNCQ2RXWm1aWEl1WTI5dVkyRjBLRnRwZGl3Z2JtVjNJRUoxWm1abGNpaGJNQ3dnTUN3Z01Dd2dNbDBwWFNsY2JpQWdkR2hwY3k1ZlkybHdhR1Z5SUQwZ2JtVjNJR0ZsY3k1QlJWTW9hMlY1S1Z4dUlDQjBhR2x6TGw5d2NtVjJJRDBnYm1WM0lFSjFabVpsY2locGRpNXNaVzVuZEdncFhHNGdJSFJvYVhNdVgyTmhZMmhsSUQwZ2JtVjNJRUoxWm1abGNpZ25KeWxjYmlBZ2RHaHBjeTVmYzJWalEyRmphR1VnUFNCdVpYY2dRblZtWm1WeUtDY25LVnh1SUNCMGFHbHpMbDlrWldOeWVYQjBJRDBnWkdWamNubHdkRnh1SUNCMGFHbHpMbDloYkdWdUlEMGdNRnh1SUNCMGFHbHpMbDlzWlc0Z1BTQXdYRzRnSUdsMkxtTnZjSGtvZEdocGN5NWZjSEpsZGlsY2JpQWdkR2hwY3k1ZmJXOWtaU0E5SUcxdlpHVmNiaUFnZG1GeUlHZ2dQU0J1WlhjZ1FuVm1abVZ5S0RRcFhHNGdJR2d1Wm1sc2JDZ3dLVnh1SUNCMGFHbHpMbDluYUdGemFDQTlJRzVsZHlCSFNFRlRTQ2gwYUdsekxsOWphWEJvWlhJdVpXNWpjbmx3ZEVKc2IyTnJLR2dwS1Z4dUlDQjBhR2x6TGw5aGRYUm9WR0ZuSUQwZ2JuVnNiRnh1SUNCMGFHbHpMbDlqWVd4c1pXUWdQU0JtWVd4elpWeHVmVnh1VTNSeVpXRnRRMmx3YUdWeUxuQnliM1J2ZEhsd1pTNWZkWEJrWVhSbElEMGdablZ1WTNScGIyNGdLR05vZFc1cktTQjdYRzRnSUdsbUlDZ2hkR2hwY3k1ZlkyRnNiR1ZrSUNZbUlIUm9hWE11WDJGc1pXNHBJSHRjYmlBZ0lDQjJZWElnY25WdGNDQTlJREUySUMwZ0tIUm9hWE11WDJGc1pXNGdKU0F4TmlsY2JpQWdJQ0JwWmlBb2NuVnRjQ0E4SURFMktTQjdYRzRnSUNBZ0lDQnlkVzF3SUQwZ2JtVjNJRUoxWm1abGNpaHlkVzF3S1Z4dUlDQWdJQ0FnY25WdGNDNW1hV3hzS0RBcFhHNGdJQ0FnSUNCMGFHbHpMbDluYUdGemFDNTFjR1JoZEdVb2NuVnRjQ2xjYmlBZ0lDQjlYRzRnSUgxY2JpQWdkR2hwY3k1ZlkyRnNiR1ZrSUQwZ2RISjFaVnh1SUNCMllYSWdiM1YwSUQwZ2RHaHBjeTVmYlc5a1pTNWxibU55ZVhCMEtIUm9hWE1zSUdOb2RXNXJLVnh1SUNCcFppQW9kR2hwY3k1ZlpHVmpjbmx3ZENrZ2UxeHVJQ0FnSUhSb2FYTXVYMmRvWVhOb0xuVndaR0YwWlNoamFIVnVheWxjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0IwYUdsekxsOW5hR0Z6YUM1MWNHUmhkR1VvYjNWMEtWeHVJQ0I5WEc0Z0lIUm9hWE11WDJ4bGJpQXJQU0JqYUhWdWF5NXNaVzVuZEdoY2JpQWdjbVYwZFhKdUlHOTFkRnh1ZlZ4dVUzUnlaV0Z0UTJsd2FHVnlMbkJ5YjNSdmRIbHdaUzVmWm1sdVlXd2dQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJR2xtSUNoMGFHbHpMbDlrWldOeWVYQjBJQ1ltSUNGMGFHbHpMbDloZFhSb1ZHRm5LU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZFZibk4xY0hCdmNuUmxaQ0J6ZEdGMFpTQnZjaUIxYm1GaWJHVWdkRzhnWVhWMGFHVnVkR2xqWVhSbElHUmhkR0VuS1Z4dUlDQjlYRzRnSUhaaGNpQjBZV2NnUFNCNGIzSW9kR2hwY3k1ZloyaGhjMmd1Wm1sdVlXd29kR2hwY3k1ZllXeGxiaUFxSURnc0lIUm9hWE11WDJ4bGJpQXFJRGdwTENCMGFHbHpMbDlqYVhCb1pYSXVaVzVqY25sd2RFSnNiMk5yS0hSb2FYTXVYMlpwYmtsRUtTbGNiaUFnYVdZZ0tIUm9hWE11WDJSbFkzSjVjSFFwSUh0Y2JpQWdJQ0JwWmlBb2VHOXlWR1Z6ZENoMFlXY3NJSFJvYVhNdVgyRjFkR2hVWVdjcEtTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oxVnVjM1Z3Y0c5eWRHVmtJSE4wWVhSbElHOXlJSFZ1WVdKc1pTQjBieUJoZFhSb1pXNTBhV05oZEdVZ1pHRjBZU2NwWEc0Z0lDQWdmVnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSFJvYVhNdVgyRjFkR2hVWVdjZ1BTQjBZV2RjYmlBZ2ZWeHVJQ0IwYUdsekxsOWphWEJvWlhJdWMyTnlkV0lvS1Z4dWZWeHVVM1J5WldGdFEybHdhR1Z5TG5CeWIzUnZkSGx3WlM1blpYUkJkWFJvVkdGbklEMGdablZ1WTNScGIyNGdaMlYwUVhWMGFGUmhaeUFvS1NCN1hHNGdJR2xtSUNnaGRHaHBjeTVmWkdWamNubHdkQ0FtSmlCQ2RXWm1aWEl1YVhOQ2RXWm1aWElvZEdocGN5NWZZWFYwYUZSaFp5a3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWVhWMGFGUmhaMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25RWFIwWlcxd2RHbHVaeUIwYnlCblpYUWdZWFYwYUNCMFlXY2dhVzRnZFc1emRYQndiM0owWldRZ2MzUmhkR1VuS1Z4dUlDQjlYRzU5WEc1VGRISmxZVzFEYVhCb1pYSXVjSEp2ZEc5MGVYQmxMbk5sZEVGMWRHaFVZV2NnUFNCbWRXNWpkR2x2YmlCelpYUkJkWFJvVkdGbklDaDBZV2NwSUh0Y2JpQWdhV1lnS0hSb2FYTXVYMlJsWTNKNWNIUXBJSHRjYmlBZ0lDQjBhR2x6TGw5aGRYUm9WR0ZuSUQwZ2RHRm5YRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZEJkSFJsYlhCMGFXNW5JSFJ2SUhObGRDQmhkWFJvSUhSaFp5QnBiaUIxYm5OMWNIQnZjblJsWkNCemRHRjBaU2NwWEc0Z0lIMWNibjFjYmxOMGNtVmhiVU5wY0dobGNpNXdjbTkwYjNSNWNHVXVjMlYwUVVGRUlEMGdablZ1WTNScGIyNGdjMlYwUVVGRUlDaGlkV1lwSUh0Y2JpQWdhV1lnS0NGMGFHbHpMbDlqWVd4c1pXUXBJSHRjYmlBZ0lDQjBhR2x6TGw5bmFHRnphQzUxY0dSaGRHVW9ZblZtS1Z4dUlDQWdJSFJvYVhNdVgyRnNaVzRnS3owZ1luVm1MbXhsYm1kMGFGeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblFYUjBaVzF3ZEdsdVp5QjBieUJ6WlhRZ1FVRkVJR2x1SUhWdWMzVndjRzl5ZEdWa0lITjBZWFJsSnlsY2JpQWdmVnh1ZlZ4dVpuVnVZM1JwYjI0Z2VHOXlWR1Z6ZENBb1lTd2dZaWtnZTF4dUlDQjJZWElnYjNWMElEMGdNRnh1SUNCcFppQW9ZUzVzWlc1bmRHZ2dJVDA5SUdJdWJHVnVaM1JvS1NCN1hHNGdJQ0FnYjNWMEt5dGNiaUFnZlZ4dUlDQjJZWElnYkdWdUlEMGdUV0YwYUM1dGFXNG9ZUzVzWlc1bmRHZ3NJR0l1YkdWdVozUm9LVnh1SUNCMllYSWdhU0E5SUMweFhHNGdJSGRvYVd4bElDZ3JLMmtnUENCc1pXNHBJSHRjYmlBZ0lDQnZkWFFnS3owZ0tHRmJhVjBnWGlCaVcybGRLVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnZkWFJjYm4xY2JpSmRmUT09IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3N0cmVhbScpLlRyYW5zZm9ybVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2RlcicpLlN0cmluZ0RlY29kZXJcbm1vZHVsZS5leHBvcnRzID0gQ2lwaGVyQmFzZVxuaW5oZXJpdHMoQ2lwaGVyQmFzZSwgVHJhbnNmb3JtKVxuZnVuY3Rpb24gQ2lwaGVyQmFzZSAoaGFzaE1vZGUpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5oYXNoTW9kZSA9IHR5cGVvZiBoYXNoTW9kZSA9PT0gJ3N0cmluZydcbiAgaWYgKHRoaXMuaGFzaE1vZGUpIHtcbiAgICB0aGlzW2hhc2hNb2RlXSA9IHRoaXMuX2ZpbmFsT3JEaWdlc3RcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmZpbmFsID0gdGhpcy5fZmluYWxPckRpZ2VzdFxuICB9XG4gIHRoaXMuX2RlY29kZXIgPSBudWxsXG4gIHRoaXMuX2VuY29kaW5nID0gbnVsbFxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEsIGlucHV0RW5jLCBvdXRwdXRFbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGRhdGEgPSBuZXcgQnVmZmVyKGRhdGEsIGlucHV0RW5jKVxuICB9XG4gIHZhciBvdXREYXRhID0gdGhpcy5fdXBkYXRlKGRhdGEpXG4gIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuICBpZiAob3V0cHV0RW5jKSB7XG4gICAgb3V0RGF0YSA9IHRoaXMuX3RvU3RyaW5nKG91dERhdGEsIG91dHB1dEVuYylcbiAgfVxuICByZXR1cm4gb3V0RGF0YVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uICgpIHt9XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLmdldEF1dGhUYWcgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIGdldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEF1dGhUYWcgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEFBRCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gc2V0IGFhZCBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoZGF0YSwgXywgbmV4dCkge1xuICB2YXIgZXJyXG4gIHRyeSB7XG4gICAgaWYgKHRoaXMuaGFzaE1vZGUpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZShkYXRhKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1c2godGhpcy5fdXBkYXRlKGRhdGEpKVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfSBmaW5hbGx5IHtcbiAgICBuZXh0KGVycilcbiAgfVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZsdXNoID0gZnVuY3Rpb24gKGRvbmUpIHtcbiAgdmFyIGVyclxuICB0cnkge1xuICAgIHRoaXMucHVzaCh0aGlzLl9maW5hbCgpKVxuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyID0gZVxuICB9IGZpbmFsbHkge1xuICAgIGRvbmUoZXJyKVxuICB9XG59XG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fZmluYWxPckRpZ2VzdCA9IGZ1bmN0aW9uIChvdXRwdXRFbmMpIHtcbiAgdmFyIG91dERhdGEgPSB0aGlzLl9maW5hbCgpIHx8IG5ldyBCdWZmZXIoJycpXG4gIGlmIChvdXRwdXRFbmMpIHtcbiAgICBvdXREYXRhID0gdGhpcy5fdG9TdHJpbmcob3V0RGF0YSwgb3V0cHV0RW5jLCB0cnVlKVxuICB9XG4gIHJldHVybiBvdXREYXRhXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLl90b1N0cmluZyA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jLCBmaW5hbCkge1xuICBpZiAoIXRoaXMuX2RlY29kZXIpIHtcbiAgICB0aGlzLl9kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKVxuICAgIHRoaXMuX2VuY29kaW5nID0gZW5jXG4gIH1cbiAgaWYgKHRoaXMuX2VuY29kaW5nICE9PSBlbmMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NhblxcJ3Qgc3dpdGNoIGVuY29kaW5ncycpXG4gIH1cbiAgdmFyIG91dCA9IHRoaXMuX2RlY29kZXIud3JpdGUodmFsdWUpXG4gIGlmIChmaW5hbCkge1xuICAgIG91dCArPSB0aGlzLl9kZWNvZGVyLmVuZCgpXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMWphWEJvWlhJdmJtOWtaVjl0YjJSMWJHVnpMMkp5YjNkelpYSnBabmt0WVdWekwyNXZaR1ZmYlc5a2RXeGxjeTlqYVhCb1pYSXRZbUZ6WlM5cGJtUmxlQzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW5aaGNpQlVjbUZ1YzJadmNtMGdQU0J5WlhGMWFYSmxLQ2R6ZEhKbFlXMG5LUzVVY21GdWMyWnZjbTFjYm5aaGNpQnBibWhsY21sMGN5QTlJSEpsY1hWcGNtVW9KMmx1YUdWeWFYUnpKeWxjYm5aaGNpQlRkSEpwYm1kRVpXTnZaR1Z5SUQwZ2NtVnhkV2x5WlNnbmMzUnlhVzVuWDJSbFkyOWtaWEluS1M1VGRISnBibWRFWldOdlpHVnlYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRU5wY0dobGNrSmhjMlZjYm1sdWFHVnlhWFJ6S0VOcGNHaGxja0poYzJVc0lGUnlZVzV6Wm05eWJTbGNibVoxYm1OMGFXOXVJRU5wY0dobGNrSmhjMlVnS0doaGMyaE5iMlJsS1NCN1hHNGdJRlJ5WVc1elptOXliUzVqWVd4c0tIUm9hWE1wWEc0Z0lIUm9hWE11YUdGemFFMXZaR1VnUFNCMGVYQmxiMllnYUdGemFFMXZaR1VnUFQwOUlDZHpkSEpwYm1jblhHNGdJR2xtSUNoMGFHbHpMbWhoYzJoTmIyUmxLU0I3WEc0Z0lDQWdkR2hwYzF0b1lYTm9UVzlrWlYwZ1BTQjBhR2x6TGw5bWFXNWhiRTl5UkdsblpYTjBYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdkR2hwY3k1bWFXNWhiQ0E5SUhSb2FYTXVYMlpwYm1Gc1QzSkVhV2RsYzNSY2JpQWdmVnh1SUNCMGFHbHpMbDlrWldOdlpHVnlJRDBnYm5Wc2JGeHVJQ0IwYUdsekxsOWxibU52WkdsdVp5QTlJRzUxYkd4Y2JuMWNia05wY0dobGNrSmhjMlV1Y0hKdmRHOTBlWEJsTG5Wd1pHRjBaU0E5SUdaMWJtTjBhVzl1SUNoa1lYUmhMQ0JwYm5CMWRFVnVZeXdnYjNWMGNIVjBSVzVqS1NCN1hHNGdJR2xtSUNoMGVYQmxiMllnWkdGMFlTQTlQVDBnSjNOMGNtbHVaeWNwSUh0Y2JpQWdJQ0JrWVhSaElEMGdibVYzSUVKMVptWmxjaWhrWVhSaExDQnBibkIxZEVWdVl5bGNiaUFnZlZ4dUlDQjJZWElnYjNWMFJHRjBZU0E5SUhSb2FYTXVYM1Z3WkdGMFpTaGtZWFJoS1Z4dUlDQnBaaUFvZEdocGN5NW9ZWE5vVFc5a1pTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpYRzRnSUgxY2JpQWdhV1lnS0c5MWRIQjFkRVZ1WXlrZ2UxeHVJQ0FnSUc5MWRFUmhkR0VnUFNCMGFHbHpMbDkwYjFOMGNtbHVaeWh2ZFhSRVlYUmhMQ0J2ZFhSd2RYUkZibU1wWEc0Z0lIMWNiaUFnY21WMGRYSnVJRzkxZEVSaGRHRmNibjFjYmx4dVEybHdhR1Z5UW1GelpTNXdjbTkwYjNSNWNHVXVjMlYwUVhWMGIxQmhaR1JwYm1jZ1BTQm1kVzVqZEdsdmJpQW9LU0I3ZlZ4dVhHNURhWEJvWlhKQ1lYTmxMbkJ5YjNSdmRIbHdaUzVuWlhSQmRYUm9WR0ZuSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjNSeWVXbHVaeUIwYnlCblpYUWdZWFYwYUNCMFlXY2dhVzRnZFc1emRYQndiM0owWldRZ2MzUmhkR1VuS1Z4dWZWeHVYRzVEYVhCb1pYSkNZWE5sTG5CeWIzUnZkSGx3WlM1elpYUkJkWFJvVkdGbklEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0ozUnllV2x1WnlCMGJ5QnpaWFFnWVhWMGFDQjBZV2NnYVc0Z2RXNXpkWEJ3YjNKMFpXUWdjM1JoZEdVbktWeHVmVnh1WEc1RGFYQm9aWEpDWVhObExuQnliM1J2ZEhsd1pTNXpaWFJCUVVRZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnbmRISjVhVzVuSUhSdklITmxkQ0JoWVdRZ2FXNGdkVzV6ZFhCd2IzSjBaV1FnYzNSaGRHVW5LVnh1ZlZ4dVhHNURhWEJvWlhKQ1lYTmxMbkJ5YjNSdmRIbHdaUzVmZEhKaGJuTm1iM0p0SUQwZ1puVnVZM1JwYjI0Z0tHUmhkR0VzSUY4c0lHNWxlSFFwSUh0Y2JpQWdkbUZ5SUdWeWNseHVJQ0IwY25rZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6TG1oaGMyaE5iMlJsS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbDkxY0dSaGRHVW9aR0YwWVNsY2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdkR2hwY3k1d2RYTm9LSFJvYVhNdVgzVndaR0YwWlNoa1lYUmhLU2xjYmlBZ0lDQjlYRzRnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNCbGNuSWdQU0JsWEc0Z0lIMGdabWx1WVd4c2VTQjdYRzRnSUNBZ2JtVjRkQ2hsY25JcFhHNGdJSDFjYm4xY2JrTnBjR2hsY2tKaGMyVXVjSEp2ZEc5MGVYQmxMbDltYkhWemFDQTlJR1oxYm1OMGFXOXVJQ2hrYjI1bEtTQjdYRzRnSUhaaGNpQmxjbkpjYmlBZ2RISjVJSHRjYmlBZ0lDQjBhR2x6TG5CMWMyZ29kR2hwY3k1ZlptbHVZV3dvS1NsY2JpQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJR1Z5Y2lBOUlHVmNiaUFnZlNCbWFXNWhiR3g1SUh0Y2JpQWdJQ0JrYjI1bEtHVnljaWxjYmlBZ2ZWeHVmVnh1UTJsd2FHVnlRbUZ6WlM1d2NtOTBiM1I1Y0dVdVgyWnBibUZzVDNKRWFXZGxjM1FnUFNCbWRXNWpkR2x2YmlBb2IzVjBjSFYwUlc1aktTQjdYRzRnSUhaaGNpQnZkWFJFWVhSaElEMGdkR2hwY3k1ZlptbHVZV3dvS1NCOGZDQnVaWGNnUW5WbVptVnlLQ2NuS1Z4dUlDQnBaaUFvYjNWMGNIVjBSVzVqS1NCN1hHNGdJQ0FnYjNWMFJHRjBZU0E5SUhSb2FYTXVYM1J2VTNSeWFXNW5LRzkxZEVSaGRHRXNJRzkxZEhCMWRFVnVZeXdnZEhKMVpTbGNiaUFnZlZ4dUlDQnlaWFIxY200Z2IzVjBSR0YwWVZ4dWZWeHVYRzVEYVhCb1pYSkNZWE5sTG5CeWIzUnZkSGx3WlM1ZmRHOVRkSEpwYm1jZ1BTQm1kVzVqZEdsdmJpQW9kbUZzZFdVc0lHVnVZeXdnWm1sdVlXd3BJSHRjYmlBZ2FXWWdLQ0YwYUdsekxsOWtaV052WkdWeUtTQjdYRzRnSUNBZ2RHaHBjeTVmWkdWamIyUmxjaUE5SUc1bGR5QlRkSEpwYm1kRVpXTnZaR1Z5S0dWdVl5bGNiaUFnSUNCMGFHbHpMbDlsYm1OdlpHbHVaeUE5SUdWdVkxeHVJQ0I5WEc0Z0lHbG1JQ2gwYUdsekxsOWxibU52WkdsdVp5QWhQVDBnWlc1aktTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkallXNWNYQ2QwSUhOM2FYUmphQ0JsYm1OdlpHbHVaM01uS1Z4dUlDQjlYRzRnSUhaaGNpQnZkWFFnUFNCMGFHbHpMbDlrWldOdlpHVnlMbmR5YVhSbEtIWmhiSFZsS1Z4dUlDQnBaaUFvWm1sdVlXd3BJSHRjYmlBZ0lDQnZkWFFnS3owZ2RHaHBjeTVmWkdWamIyUmxjaTVsYm1Rb0tWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCdmRYUmNibjFjYmlKZGZRPT0iLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhvciAoYSwgYikge1xuICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oYS5sZW5ndGgsIGIubGVuZ3RoKVxuICB2YXIgYnVmZmVyID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGJ1ZmZlcltpXSA9IGFbaV0gXiBiW2ldXG4gIH1cblxuICByZXR1cm4gYnVmZmVyXG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WW5KdmQzTmxjbWxtZVMxamFYQm9aWEl2Ym05a1pWOXRiMlIxYkdWekwySnliM2R6WlhKcFpua3RZV1Z6TDI1dlpHVmZiVzlrZFd4bGN5OWlkV1ptWlhJdGVHOXlMMmx1WkdWNExtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUhodmNpQW9ZU3dnWWlrZ2UxeHVJQ0IyWVhJZ2JHVnVaM1JvSUQwZ1RXRjBhQzV0YVc0b1lTNXNaVzVuZEdnc0lHSXViR1Z1WjNSb0tWeHVJQ0IyWVhJZ1luVm1abVZ5SUQwZ2JtVjNJRUoxWm1abGNpaHNaVzVuZEdncFhHNWNiaUFnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCc1pXNW5kR2c3SUNzcmFTa2dlMXh1SUNBZ0lHSjFabVpsY2x0cFhTQTlJR0ZiYVYwZ1hpQmlXMmxkWEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnWW5WbVptVnlYRzU5WEc0aVhYMD0iLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG52YXIgemVyb3MgPSBuZXcgQnVmZmVyKDE2KVxuemVyb3MuZmlsbCgwKVxubW9kdWxlLmV4cG9ydHMgPSBHSEFTSFxuZnVuY3Rpb24gR0hBU0ggKGtleSkge1xuICB0aGlzLmggPSBrZXlcbiAgdGhpcy5zdGF0ZSA9IG5ldyBCdWZmZXIoMTYpXG4gIHRoaXMuc3RhdGUuZmlsbCgwKVxuICB0aGlzLmNhY2hlID0gbmV3IEJ1ZmZlcignJylcbn1cbi8vIGZyb20gaHR0cDovL2JpdHdpc2VzaGlmdGxlZnQuZ2l0aHViLmlvL3NqY2wvZG9jL3N5bWJvbHMvc3JjL2NvcmVfZ2NtLmpzLmh0bWxcbi8vIGJ5IEp1aG8gVsOkaMOkLUhlcnR0dWFcbkdIQVNILnByb3RvdHlwZS5naGFzaCA9IGZ1bmN0aW9uIChibG9jaykge1xuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBibG9jay5sZW5ndGgpIHtcbiAgICB0aGlzLnN0YXRlW2ldIF49IGJsb2NrW2ldXG4gIH1cbiAgdGhpcy5fbXVsdGlwbHkoKVxufVxuXG5HSEFTSC5wcm90b3R5cGUuX211bHRpcGx5ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgVmkgPSB0b0FycmF5KHRoaXMuaClcbiAgdmFyIFppID0gWzAsIDAsIDAsIDBdXG4gIHZhciBqLCB4aSwgbHNiX1ZpXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IDEyOCkge1xuICAgIHhpID0gKHRoaXMuc3RhdGVbfn4oaSAvIDgpXSAmICgxIDw8ICg3IC0gaSAlIDgpKSkgIT09IDBcbiAgICBpZiAoeGkpIHtcbiAgICAgIC8vIFpfaSsxID0gWl9pIF4gVl9pXG4gICAgICBaaSA9IHhvcihaaSwgVmkpXG4gICAgfVxuXG4gICAgLy8gU3RvcmUgdGhlIHZhbHVlIG9mIExTQihWX2kpXG4gICAgbHNiX1ZpID0gKFZpWzNdICYgMSkgIT09IDBcblxuICAgIC8vIFZfaSsxID0gVl9pID4+IDFcbiAgICBmb3IgKGogPSAzOyBqID4gMDsgai0tKSB7XG4gICAgICBWaVtqXSA9IChWaVtqXSA+Pj4gMSkgfCAoKFZpW2ogLSAxXSAmIDEpIDw8IDMxKVxuICAgIH1cbiAgICBWaVswXSA9IFZpWzBdID4+PiAxXG5cbiAgICAvLyBJZiBMU0IoVl9pKSBpcyAxLCBWX2krMSA9IChWX2kgPj4gMSkgXiBSXG4gICAgaWYgKGxzYl9WaSkge1xuICAgICAgVmlbMF0gPSBWaVswXSBeICgweGUxIDw8IDI0KVxuICAgIH1cbiAgfVxuICB0aGlzLnN0YXRlID0gZnJvbUFycmF5KFppKVxufVxuR0hBU0gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChidWYpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIGJ1Zl0pXG4gIHZhciBjaHVua1xuICB3aGlsZSAodGhpcy5jYWNoZS5sZW5ndGggPj0gMTYpIHtcbiAgICBjaHVuayA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgdGhpcy5naGFzaChjaHVuaylcbiAgfVxufVxuR0hBU0gucHJvdG90eXBlLmZpbmFsID0gZnVuY3Rpb24gKGFibCwgYmwpIHtcbiAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoKSB7XG4gICAgdGhpcy5naGFzaChCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCB6ZXJvc10sIDE2KSlcbiAgfVxuICB0aGlzLmdoYXNoKGZyb21BcnJheShbXG4gICAgMCwgYWJsLFxuICAgIDAsIGJsXG4gIF0pKVxuICByZXR1cm4gdGhpcy5zdGF0ZVxufVxuXG5mdW5jdGlvbiB0b0FycmF5IChidWYpIHtcbiAgcmV0dXJuIFtcbiAgICBidWYucmVhZFVJbnQzMkJFKDApLFxuICAgIGJ1Zi5yZWFkVUludDMyQkUoNCksXG4gICAgYnVmLnJlYWRVSW50MzJCRSg4KSxcbiAgICBidWYucmVhZFVJbnQzMkJFKDEyKVxuICBdXG59XG5mdW5jdGlvbiBmcm9tQXJyYXkgKG91dCkge1xuICBvdXQgPSBvdXQubWFwKGZpeHVwX3VpbnQzMilcbiAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIoMTYpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFswXSwgMClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzFdLCA0KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMl0sIDgpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFszXSwgMTIpXG4gIHJldHVybiBidWZcbn1cbnZhciB1aW50X21heCA9IE1hdGgucG93KDIsIDMyKVxuZnVuY3Rpb24gZml4dXBfdWludDMyICh4KSB7XG4gIHZhciByZXQsIHhfcG9zXG4gIHJldCA9IHggPiB1aW50X21heCB8fCB4IDwgMCA/ICh4X3BvcyA9IE1hdGguYWJzKHgpICUgdWludF9tYXgsIHggPCAwID8gdWludF9tYXggLSB4X3BvcyA6IHhfcG9zKSA6IHhcbiAgcmV0dXJuIHJldFxufVxuZnVuY3Rpb24geG9yIChhLCBiKSB7XG4gIHJldHVybiBbXG4gICAgYVswXSBeIGJbMF0sXG4gICAgYVsxXSBeIGJbMV0sXG4gICAgYVsyXSBeIGJbMl0sXG4gICAgYVszXSBeIGJbM11cbiAgXVxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMWphWEJvWlhJdmJtOWtaVjl0YjJSMWJHVnpMMkp5YjNkelpYSnBabmt0WVdWekwyZG9ZWE5vTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCNlpYSnZjeUE5SUc1bGR5QkNkV1ptWlhJb01UWXBYRzU2WlhKdmN5NW1hV3hzS0RBcFhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlFZElRVk5JWEc1bWRXNWpkR2x2YmlCSFNFRlRTQ0FvYTJWNUtTQjdYRzRnSUhSb2FYTXVhQ0E5SUd0bGVWeHVJQ0IwYUdsekxuTjBZWFJsSUQwZ2JtVjNJRUoxWm1abGNpZ3hOaWxjYmlBZ2RHaHBjeTV6ZEdGMFpTNW1hV3hzS0RBcFhHNGdJSFJvYVhNdVkyRmphR1VnUFNCdVpYY2dRblZtWm1WeUtDY25LVnh1ZlZ4dUx5OGdabkp2YlNCb2RIUndPaTh2WW1sMGQybHpaWE5vYVdaMGJHVm1kQzVuYVhSb2RXSXVhVzh2YzJwamJDOWtiMk12YzNsdFltOXNjeTl6Y21NdlkyOXlaVjluWTIwdWFuTXVhSFJ0YkZ4dUx5OGdZbmtnU25Wb2J5Qld3NlJvdzZRdFNHVnlkSFIxWVZ4dVIwaEJVMGd1Y0hKdmRHOTBlWEJsTG1kb1lYTm9JRDBnWm5WdVkzUnBiMjRnS0dKc2IyTnJLU0I3WEc0Z0lIWmhjaUJwSUQwZ0xURmNiaUFnZDJocGJHVWdLQ3NyYVNBOElHSnNiMk5yTG14bGJtZDBhQ2tnZTF4dUlDQWdJSFJvYVhNdWMzUmhkR1ZiYVYwZ1hqMGdZbXh2WTJ0YmFWMWNiaUFnZlZ4dUlDQjBhR2x6TGw5dGRXeDBhWEJzZVNncFhHNTlYRzVjYmtkSVFWTklMbkJ5YjNSdmRIbHdaUzVmYlhWc2RHbHdiSGtnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUhaaGNpQldhU0E5SUhSdlFYSnlZWGtvZEdocGN5NW9LVnh1SUNCMllYSWdXbWtnUFNCYk1Dd2dNQ3dnTUN3Z01GMWNiaUFnZG1GeUlHb3NJSGhwTENCc2MySmZWbWxjYmlBZ2RtRnlJR2tnUFNBdE1WeHVJQ0IzYUdsc1pTQW9LeXRwSUR3Z01USTRLU0I3WEc0Z0lDQWdlR2tnUFNBb2RHaHBjeTV6ZEdGMFpWdCtmaWhwSUM4Z09DbGRJQ1lnS0RFZ1BEd2dLRGNnTFNCcElDVWdPQ2twS1NBaFBUMGdNRnh1SUNBZ0lHbG1JQ2g0YVNrZ2UxeHVJQ0FnSUNBZ0x5OGdXbDlwS3pFZ1BTQmFYMmtnWGlCV1gybGNiaUFnSUNBZ0lGcHBJRDBnZUc5eUtGcHBMQ0JXYVNsY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCVGRHOXlaU0IwYUdVZ2RtRnNkV1VnYjJZZ1RGTkNLRlpmYVNsY2JpQWdJQ0JzYzJKZlZta2dQU0FvVm1sYk0xMGdKaUF4S1NBaFBUMGdNRnh1WEc0Z0lDQWdMeThnVmw5cEt6RWdQU0JXWDJrZ1BqNGdNVnh1SUNBZ0lHWnZjaUFvYWlBOUlETTdJR29nUGlBd095QnFMUzBwSUh0Y2JpQWdJQ0FnSUZacFcycGRJRDBnS0ZacFcycGRJRDQrUGlBeEtTQjhJQ2dvVm1sYmFpQXRJREZkSUNZZ01Ta2dQRHdnTXpFcFhHNGdJQ0FnZlZ4dUlDQWdJRlpwV3pCZElEMGdWbWxiTUYwZ1BqNCtJREZjYmx4dUlDQWdJQzh2SUVsbUlFeFRRaWhXWDJrcElHbHpJREVzSUZaZmFTc3hJRDBnS0ZaZmFTQStQaUF4S1NCZUlGSmNiaUFnSUNCcFppQW9iSE5pWDFacEtTQjdYRzRnSUNBZ0lDQldhVnN3WFNBOUlGWnBXekJkSUY0Z0tEQjRaVEVnUER3Z01qUXBYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lIUm9hWE11YzNSaGRHVWdQU0JtY205dFFYSnlZWGtvV21rcFhHNTlYRzVIU0VGVFNDNXdjbTkwYjNSNWNHVXVkWEJrWVhSbElEMGdablZ1WTNScGIyNGdLR0oxWmlrZ2UxeHVJQ0IwYUdsekxtTmhZMmhsSUQwZ1FuVm1abVZ5TG1OdmJtTmhkQ2hiZEdocGN5NWpZV05vWlN3Z1luVm1YU2xjYmlBZ2RtRnlJR05vZFc1clhHNGdJSGRvYVd4bElDaDBhR2x6TG1OaFkyaGxMbXhsYm1kMGFDQStQU0F4TmlrZ2UxeHVJQ0FnSUdOb2RXNXJJRDBnZEdocGN5NWpZV05vWlM1emJHbGpaU2d3TENBeE5pbGNiaUFnSUNCMGFHbHpMbU5oWTJobElEMGdkR2hwY3k1allXTm9aUzV6YkdsalpTZ3hOaWxjYmlBZ0lDQjBhR2x6TG1kb1lYTm9LR05vZFc1cktWeHVJQ0I5WEc1OVhHNUhTRUZUU0M1d2NtOTBiM1I1Y0dVdVptbHVZV3dnUFNCbWRXNWpkR2x2YmlBb1lXSnNMQ0JpYkNrZ2UxeHVJQ0JwWmlBb2RHaHBjeTVqWVdOb1pTNXNaVzVuZEdncElIdGNiaUFnSUNCMGFHbHpMbWRvWVhOb0tFSjFabVpsY2k1amIyNWpZWFFvVzNSb2FYTXVZMkZqYUdVc0lIcGxjbTl6WFN3Z01UWXBLVnh1SUNCOVhHNGdJSFJvYVhNdVoyaGhjMmdvWm5KdmJVRnljbUY1S0Z0Y2JpQWdJQ0F3TENCaFltd3NYRzRnSUNBZ01Dd2dZbXhjYmlBZ1hTa3BYRzRnSUhKbGRIVnliaUIwYUdsekxuTjBZWFJsWEc1OVhHNWNibVoxYm1OMGFXOXVJSFJ2UVhKeVlYa2dLR0oxWmlrZ2UxeHVJQ0J5WlhSMWNtNGdXMXh1SUNBZ0lHSjFaaTV5WldGa1ZVbHVkRE15UWtVb01Da3NYRzRnSUNBZ1luVm1MbkpsWVdSVlNXNTBNekpDUlNnMEtTeGNiaUFnSUNCaWRXWXVjbVZoWkZWSmJuUXpNa0pGS0RncExGeHVJQ0FnSUdKMVppNXlaV0ZrVlVsdWRETXlRa1VvTVRJcFhHNGdJRjFjYm4xY2JtWjFibU4wYVc5dUlHWnliMjFCY25KaGVTQW9iM1YwS1NCN1hHNGdJRzkxZENBOUlHOTFkQzV0WVhBb1ptbDRkWEJmZFdsdWRETXlLVnh1SUNCMllYSWdZblZtSUQwZ2JtVjNJRUoxWm1abGNpZ3hOaWxjYmlBZ1luVm1MbmR5YVhSbFZVbHVkRE15UWtVb2IzVjBXekJkTENBd0tWeHVJQ0JpZFdZdWQzSnBkR1ZWU1c1ME16SkNSU2h2ZFhSYk1WMHNJRFFwWEc0Z0lHSjFaaTUzY21sMFpWVkpiblF6TWtKRktHOTFkRnN5WFN3Z09DbGNiaUFnWW5WbUxuZHlhWFJsVlVsdWRETXlRa1VvYjNWMFd6TmRMQ0F4TWlsY2JpQWdjbVYwZFhKdUlHSjFabHh1ZlZ4dWRtRnlJSFZwYm5SZmJXRjRJRDBnVFdGMGFDNXdiM2NvTWl3Z016SXBYRzVtZFc1amRHbHZiaUJtYVhoMWNGOTFhVzUwTXpJZ0tIZ3BJSHRjYmlBZ2RtRnlJSEpsZEN3Z2VGOXdiM05jYmlBZ2NtVjBJRDBnZUNBK0lIVnBiblJmYldGNElIeDhJSGdnUENBd0lEOGdLSGhmY0c5eklEMGdUV0YwYUM1aFluTW9lQ2tnSlNCMWFXNTBYMjFoZUN3Z2VDQThJREFnUHlCMWFXNTBYMjFoZUNBdElIaGZjRzl6SURvZ2VGOXdiM01wSURvZ2VGeHVJQ0J5WlhSMWNtNGdjbVYwWEc1OVhHNW1kVzVqZEdsdmJpQjRiM0lnS0dFc0lHSXBJSHRjYmlBZ2NtVjBkWEp1SUZ0Y2JpQWdJQ0JoV3pCZElGNGdZbHN3WFN4Y2JpQWdJQ0JoV3pGZElGNGdZbHN4WFN4Y2JpQWdJQ0JoV3pKZElGNGdZbHN5WFN4Y2JpQWdJQ0JoV3pOZElGNGdZbHN6WFZ4dUlDQmRYRzU5WEc0aVhYMD0iLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG4vLyBiYXNlZCBvbiB0aGUgYWVzIGltcGxpbWVudGF0aW9uIGluIHRyaXBsZSBzZWNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9rZXliYXNlL3RyaXBsZXNlY1xuXG4vLyB3aGljaCBpcyBpbiB0dXJuIGJhc2VkIG9uIHRoZSBvbmUgZnJvbSBjcnlwdG8tanNcbi8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL1xuXG52YXIgdWludF9tYXggPSBNYXRoLnBvdygyLCAzMilcbmZ1bmN0aW9uIGZpeHVwX3VpbnQzMiAoeCkge1xuICB2YXIgcmV0LCB4X3Bvc1xuICByZXQgPSB4ID4gdWludF9tYXggfHwgeCA8IDAgPyAoeF9wb3MgPSBNYXRoLmFicyh4KSAlIHVpbnRfbWF4LCB4IDwgMCA/IHVpbnRfbWF4IC0geF9wb3MgOiB4X3BvcykgOiB4XG4gIHJldHVybiByZXRcbn1cbmZ1bmN0aW9uIHNjcnViX3ZlYyAodikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHYubGVuZ3RoOyB2KyspIHtcbiAgICB2W2ldID0gMFxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBHbG9iYWwgKCkge1xuICB0aGlzLlNCT1ggPSBbXVxuICB0aGlzLklOVl9TQk9YID0gW11cbiAgdGhpcy5TVUJfTUlYID0gW1tdLCBbXSwgW10sIFtdXVxuICB0aGlzLklOVl9TVUJfTUlYID0gW1tdLCBbXSwgW10sIFtdXVxuICB0aGlzLmluaXQoKVxuICB0aGlzLlJDT04gPSBbMHgwMCwgMHgwMSwgMHgwMiwgMHgwNCwgMHgwOCwgMHgxMCwgMHgyMCwgMHg0MCwgMHg4MCwgMHgxYiwgMHgzNl1cbn1cblxuR2xvYmFsLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZCwgaSwgc3gsIHQsIHgsIHgyLCB4NCwgeDgsIHhpLCBfaVxuICBkID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX2ksIF9yZXN1bHRzXG4gICAgX3Jlc3VsdHMgPSBbXVxuICAgIGZvciAoaSA9IF9pID0gMDsgX2kgPCAyNTY7IGkgPSArK19pKSB7XG4gICAgICBpZiAoaSA8IDEyOCkge1xuICAgICAgICBfcmVzdWx0cy5wdXNoKGkgPDwgMSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9yZXN1bHRzLnB1c2goKGkgPDwgMSkgXiAweDExYilcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIF9yZXN1bHRzXG4gIH0pKClcbiAgeCA9IDBcbiAgeGkgPSAwXG4gIGZvciAoaSA9IF9pID0gMDsgX2kgPCAyNTY7IGkgPSArK19pKSB7XG4gICAgc3ggPSB4aSBeICh4aSA8PCAxKSBeICh4aSA8PCAyKSBeICh4aSA8PCAzKSBeICh4aSA8PCA0KVxuICAgIHN4ID0gKHN4ID4+PiA4KSBeIChzeCAmIDB4ZmYpIF4gMHg2M1xuICAgIHRoaXMuU0JPWFt4XSA9IHN4XG4gICAgdGhpcy5JTlZfU0JPWFtzeF0gPSB4XG4gICAgeDIgPSBkW3hdXG4gICAgeDQgPSBkW3gyXVxuICAgIHg4ID0gZFt4NF1cbiAgICB0ID0gKGRbc3hdICogMHgxMDEpIF4gKHN4ICogMHgxMDEwMTAwKVxuICAgIHRoaXMuU1VCX01JWFswXVt4XSA9ICh0IDw8IDI0KSB8ICh0ID4+PiA4KVxuICAgIHRoaXMuU1VCX01JWFsxXVt4XSA9ICh0IDw8IDE2KSB8ICh0ID4+PiAxNilcbiAgICB0aGlzLlNVQl9NSVhbMl1beF0gPSAodCA8PCA4KSB8ICh0ID4+PiAyNClcbiAgICB0aGlzLlNVQl9NSVhbM11beF0gPSB0XG4gICAgdCA9ICh4OCAqIDB4MTAxMDEwMSkgXiAoeDQgKiAweDEwMDAxKSBeICh4MiAqIDB4MTAxKSBeICh4ICogMHgxMDEwMTAwKVxuICAgIHRoaXMuSU5WX1NVQl9NSVhbMF1bc3hdID0gKHQgPDwgMjQpIHwgKHQgPj4+IDgpXG4gICAgdGhpcy5JTlZfU1VCX01JWFsxXVtzeF0gPSAodCA8PCAxNikgfCAodCA+Pj4gMTYpXG4gICAgdGhpcy5JTlZfU1VCX01JWFsyXVtzeF0gPSAodCA8PCA4KSB8ICh0ID4+PiAyNClcbiAgICB0aGlzLklOVl9TVUJfTUlYWzNdW3N4XSA9IHRcbiAgICBpZiAoeCA9PT0gMCkge1xuICAgICAgeCA9IHhpID0gMVxuICAgIH0gZWxzZSB7XG4gICAgICB4ID0geDIgXiBkW2RbZFt4OCBeIHgyXV1dXG4gICAgICB4aSBePSBkW2RbeGldXVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG52YXIgRyA9IG5ldyBHbG9iYWwoKVxuXG5BRVMuYmxvY2tTaXplID0gNCAqIDRcblxuQUVTLnByb3RvdHlwZS5ibG9ja1NpemUgPSBBRVMuYmxvY2tTaXplXG5cbkFFUy5rZXlTaXplID0gMjU2IC8gOFxuXG5BRVMucHJvdG90eXBlLmtleVNpemUgPSBBRVMua2V5U2l6ZVxuXG5mdW5jdGlvbiBidWZmZXJUb0FycmF5IChidWYpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGggLyA0XG4gIHZhciBvdXQgPSBuZXcgQXJyYXkobGVuKVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBidWYucmVhZFVJbnQzMkJFKGkgKiA0KVxuICB9XG4gIHJldHVybiBvdXRcbn1cbmZ1bmN0aW9uIEFFUyAoa2V5KSB7XG4gIHRoaXMuX2tleSA9IGJ1ZmZlclRvQXJyYXkoa2V5KVxuICB0aGlzLl9kb1Jlc2V0KClcbn1cblxuQUVTLnByb3RvdHlwZS5fZG9SZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGludktzUm93LCBrZXlTaXplLCBrZXlXb3Jkcywga3NSb3csIGtzUm93cywgdFxuICBrZXlXb3JkcyA9IHRoaXMuX2tleVxuICBrZXlTaXplID0ga2V5V29yZHMubGVuZ3RoXG4gIHRoaXMuX25Sb3VuZHMgPSBrZXlTaXplICsgNlxuICBrc1Jvd3MgPSAodGhpcy5fblJvdW5kcyArIDEpICogNFxuICB0aGlzLl9rZXlTY2hlZHVsZSA9IFtdXG4gIGZvciAoa3NSb3cgPSAwOyBrc1JvdyA8IGtzUm93czsga3NSb3crKykge1xuICAgIHRoaXMuX2tleVNjaGVkdWxlW2tzUm93XSA9IGtzUm93IDwga2V5U2l6ZSA/IGtleVdvcmRzW2tzUm93XSA6ICh0ID0gdGhpcy5fa2V5U2NoZWR1bGVba3NSb3cgLSAxXSwgKGtzUm93ICUga2V5U2l6ZSkgPT09IDAgPyAodCA9ICh0IDw8IDgpIHwgKHQgPj4+IDI0KSwgdCA9IChHLlNCT1hbdCA+Pj4gMjRdIDw8IDI0KSB8IChHLlNCT1hbKHQgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChHLlNCT1hbKHQgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBHLlNCT1hbdCAmIDB4ZmZdLCB0IF49IEcuUkNPTlsoa3NSb3cgLyBrZXlTaXplKSB8IDBdIDw8IDI0KSA6IGtleVNpemUgPiA2ICYmIGtzUm93ICUga2V5U2l6ZSA9PT0gNCA/IHQgPSAoRy5TQk9YW3QgPj4+IDI0XSA8PCAyNCkgfCAoRy5TQk9YWyh0ID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoRy5TQk9YWyh0ID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgRy5TQk9YW3QgJiAweGZmXSA6IHZvaWQgMCwgdGhpcy5fa2V5U2NoZWR1bGVba3NSb3cgLSBrZXlTaXplXSBeIHQpXG4gIH1cbiAgdGhpcy5faW52S2V5U2NoZWR1bGUgPSBbXVxuICBmb3IgKGludktzUm93ID0gMDsgaW52S3NSb3cgPCBrc1Jvd3M7IGludktzUm93KyspIHtcbiAgICBrc1JvdyA9IGtzUm93cyAtIGludktzUm93XG4gICAgdCA9IHRoaXMuX2tleVNjaGVkdWxlW2tzUm93IC0gKGludktzUm93ICUgNCA/IDAgOiA0KV1cbiAgICB0aGlzLl9pbnZLZXlTY2hlZHVsZVtpbnZLc1Jvd10gPSBpbnZLc1JvdyA8IDQgfHwga3NSb3cgPD0gNCA/IHQgOiBHLklOVl9TVUJfTUlYWzBdW0cuU0JPWFt0ID4+PiAyNF1dIF4gRy5JTlZfU1VCX01JWFsxXVtHLlNCT1hbKHQgPj4+IDE2KSAmIDB4ZmZdXSBeIEcuSU5WX1NVQl9NSVhbMl1bRy5TQk9YWyh0ID4+PiA4KSAmIDB4ZmZdXSBeIEcuSU5WX1NVQl9NSVhbM11bRy5TQk9YW3QgJiAweGZmXV1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5BRVMucHJvdG90eXBlLmVuY3J5cHRCbG9jayA9IGZ1bmN0aW9uIChNKSB7XG4gIE0gPSBidWZmZXJUb0FycmF5KG5ldyBCdWZmZXIoTSkpXG4gIHZhciBvdXQgPSB0aGlzLl9kb0NyeXB0QmxvY2soTSwgdGhpcy5fa2V5U2NoZWR1bGUsIEcuU1VCX01JWCwgRy5TQk9YKVxuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcigxNilcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzBdLCAwKVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMV0sIDQpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsyXSwgOClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzNdLCAxMilcbiAgcmV0dXJuIGJ1ZlxufVxuXG5BRVMucHJvdG90eXBlLmRlY3J5cHRCbG9jayA9IGZ1bmN0aW9uIChNKSB7XG4gIE0gPSBidWZmZXJUb0FycmF5KG5ldyBCdWZmZXIoTSkpXG4gIHZhciB0ZW1wID0gW01bM10sIE1bMV1dXG4gIE1bMV0gPSB0ZW1wWzBdXG4gIE1bM10gPSB0ZW1wWzFdXG4gIHZhciBvdXQgPSB0aGlzLl9kb0NyeXB0QmxvY2soTSwgdGhpcy5faW52S2V5U2NoZWR1bGUsIEcuSU5WX1NVQl9NSVgsIEcuSU5WX1NCT1gpXG4gIHZhciBidWYgPSBuZXcgQnVmZmVyKDE2KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMF0sIDApXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFszXSwgNClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzJdLCA4KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMV0sIDEyKVxuICByZXR1cm4gYnVmXG59XG5cbkFFUy5wcm90b3R5cGUuc2NydWIgPSBmdW5jdGlvbiAoKSB7XG4gIHNjcnViX3ZlYyh0aGlzLl9rZXlTY2hlZHVsZSlcbiAgc2NydWJfdmVjKHRoaXMuX2ludktleVNjaGVkdWxlKVxuICBzY3J1Yl92ZWModGhpcy5fa2V5KVxufVxuXG5BRVMucHJvdG90eXBlLl9kb0NyeXB0QmxvY2sgPSBmdW5jdGlvbiAoTSwga2V5U2NoZWR1bGUsIFNVQl9NSVgsIFNCT1gpIHtcbiAgdmFyIGtzUm93LCBzMCwgczEsIHMyLCBzMywgdDAsIHQxLCB0MiwgdDNcblxuICBzMCA9IE1bMF0gXiBrZXlTY2hlZHVsZVswXVxuICBzMSA9IE1bMV0gXiBrZXlTY2hlZHVsZVsxXVxuICBzMiA9IE1bMl0gXiBrZXlTY2hlZHVsZVsyXVxuICBzMyA9IE1bM10gXiBrZXlTY2hlZHVsZVszXVxuICBrc1JvdyA9IDRcbiAgZm9yICh2YXIgcm91bmQgPSAxOyByb3VuZCA8IHRoaXMuX25Sb3VuZHM7IHJvdW5kKyspIHtcbiAgICB0MCA9IFNVQl9NSVhbMF1bczAgPj4+IDI0XSBeIFNVQl9NSVhbMV1bKHMxID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhbMl1bKHMyID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWFszXVtzMyAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICB0MSA9IFNVQl9NSVhbMF1bczEgPj4+IDI0XSBeIFNVQl9NSVhbMV1bKHMyID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhbMl1bKHMzID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWFszXVtzMCAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICB0MiA9IFNVQl9NSVhbMF1bczIgPj4+IDI0XSBeIFNVQl9NSVhbMV1bKHMzID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhbMl1bKHMwID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWFszXVtzMSAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICB0MyA9IFNVQl9NSVhbMF1bczMgPj4+IDI0XSBeIFNVQl9NSVhbMV1bKHMwID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhbMl1bKHMxID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWFszXVtzMiAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICBzMCA9IHQwXG4gICAgczEgPSB0MVxuICAgIHMyID0gdDJcbiAgICBzMyA9IHQzXG4gIH1cbiAgdDAgPSAoKFNCT1hbczAgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczEgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMiA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczMgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICB0MSA9ICgoU0JPWFtzMSA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMiA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMzID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMCAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gIHQyID0gKChTQk9YW3MyID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMzID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczAgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MxICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgdDMgPSAoKFNCT1hbczMgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczAgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMSA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczIgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICByZXR1cm4gW1xuICAgIGZpeHVwX3VpbnQzMih0MCksXG4gICAgZml4dXBfdWludDMyKHQxKSxcbiAgICBmaXh1cF91aW50MzIodDIpLFxuICAgIGZpeHVwX3VpbnQzMih0MylcbiAgXVxufVxuXG5leHBvcnRzLkFFUyA9IEFFU1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMWphWEJvWlhJdmJtOWtaVjl0YjJSMWJHVnpMMkp5YjNkelpYSnBabmt0WVdWekwyRmxjeTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHZJR0poYzJWa0lHOXVJSFJvWlNCaFpYTWdhVzF3YkdsdFpXNTBZWFJwYjI0Z2FXNGdkSEpwY0d4bElITmxZMXh1THk4Z2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwydGxlV0poYzJVdmRISnBjR3hsYzJWalhHNWNiaTh2SUhkb2FXTm9JR2x6SUdsdUlIUjFjbTRnWW1GelpXUWdiMjRnZEdobElHOXVaU0JtY205dElHTnllWEIwYnkxcWMxeHVMeThnYUhSMGNITTZMeTlqYjJSbExtZHZiMmRzWlM1amIyMHZjQzlqY25sd2RHOHRhbk12WEc1Y2JuWmhjaUIxYVc1MFgyMWhlQ0E5SUUxaGRHZ3VjRzkzS0RJc0lETXlLVnh1Wm5WdVkzUnBiMjRnWm1sNGRYQmZkV2x1ZERNeUlDaDRLU0I3WEc0Z0lIWmhjaUJ5WlhRc0lIaGZjRzl6WEc0Z0lISmxkQ0E5SUhnZ1BpQjFhVzUwWDIxaGVDQjhmQ0I0SUR3Z01DQS9JQ2g0WDNCdmN5QTlJRTFoZEdndVlXSnpLSGdwSUNVZ2RXbHVkRjl0WVhnc0lIZ2dQQ0F3SUQ4Z2RXbHVkRjl0WVhnZ0xTQjRYM0J2Y3lBNklIaGZjRzl6S1NBNklIaGNiaUFnY21WMGRYSnVJSEpsZEZ4dWZWeHVablZ1WTNScGIyNGdjMk55ZFdKZmRtVmpJQ2gyS1NCN1hHNGdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnZGk1c1pXNW5kR2c3SUhZckt5a2dlMXh1SUNBZ0lIWmJhVjBnUFNBd1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUdaaGJITmxYRzU5WEc1Y2JtWjFibU4wYVc5dUlFZHNiMkpoYkNBb0tTQjdYRzRnSUhSb2FYTXVVMEpQV0NBOUlGdGRYRzRnSUhSb2FYTXVTVTVXWDFOQ1QxZ2dQU0JiWFZ4dUlDQjBhR2x6TGxOVlFsOU5TVmdnUFNCYlcxMHNJRnRkTENCYlhTd2dXMTFkWEc0Z0lIUm9hWE11U1U1V1gxTlZRbDlOU1ZnZ1BTQmJXMTBzSUZ0ZExDQmJYU3dnVzExZFhHNGdJSFJvYVhNdWFXNXBkQ2dwWEc0Z0lIUm9hWE11VWtOUFRpQTlJRnN3ZURBd0xDQXdlREF4TENBd2VEQXlMQ0F3ZURBMExDQXdlREE0TENBd2VERXdMQ0F3ZURJd0xDQXdlRFF3TENBd2VEZ3dMQ0F3ZURGaUxDQXdlRE0yWFZ4dWZWeHVYRzVIYkc5aVlXd3VjSEp2ZEc5MGVYQmxMbWx1YVhRZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lIWmhjaUJrTENCcExDQnplQ3dnZEN3Z2VDd2dlRElzSUhnMExDQjRPQ3dnZUdrc0lGOXBYRzRnSUdRZ1BTQW9ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJSFpoY2lCZmFTd2dYM0psYzNWc2RITmNiaUFnSUNCZmNtVnpkV3gwY3lBOUlGdGRYRzRnSUNBZ1ptOXlJQ2hwSUQwZ1gya2dQU0F3T3lCZmFTQThJREkxTmpzZ2FTQTlJQ3NyWDJrcElIdGNiaUFnSUNBZ0lHbG1JQ2hwSUR3Z01USTRLU0I3WEc0Z0lDQWdJQ0FnSUY5eVpYTjFiSFJ6TG5CMWMyZ29hU0E4UENBeEtWeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ1gzSmxjM1ZzZEhNdWNIVnphQ2dvYVNBOFBDQXhLU0JlSURCNE1URmlLVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnWDNKbGMzVnNkSE5jYmlBZ2ZTa29LVnh1SUNCNElEMGdNRnh1SUNCNGFTQTlJREJjYmlBZ1ptOXlJQ2hwSUQwZ1gya2dQU0F3T3lCZmFTQThJREkxTmpzZ2FTQTlJQ3NyWDJrcElIdGNiaUFnSUNCemVDQTlJSGhwSUY0Z0tIaHBJRHc4SURFcElGNGdLSGhwSUR3OElESXBJRjRnS0hocElEdzhJRE1wSUY0Z0tIaHBJRHc4SURRcFhHNGdJQ0FnYzNnZ1BTQW9jM2dnUGo0K0lEZ3BJRjRnS0hONElDWWdNSGhtWmlrZ1hpQXdlRFl6WEc0Z0lDQWdkR2hwY3k1VFFrOVlXM2hkSUQwZ2MzaGNiaUFnSUNCMGFHbHpMa2xPVmw5VFFrOVlXM040WFNBOUlIaGNiaUFnSUNCNE1pQTlJR1JiZUYxY2JpQWdJQ0I0TkNBOUlHUmJlREpkWEc0Z0lDQWdlRGdnUFNCa1czZzBYVnh1SUNBZ0lIUWdQU0FvWkZ0emVGMGdLaUF3ZURFd01Ta2dYaUFvYzNnZ0tpQXdlREV3TVRBeE1EQXBYRzRnSUNBZ2RHaHBjeTVUVlVKZlRVbFlXekJkVzNoZElEMGdLSFFnUER3Z01qUXBJSHdnS0hRZ1BqNCtJRGdwWEc0Z0lDQWdkR2hwY3k1VFZVSmZUVWxZV3pGZFczaGRJRDBnS0hRZ1BEd2dNVFlwSUh3Z0tIUWdQajQrSURFMktWeHVJQ0FnSUhSb2FYTXVVMVZDWDAxSldGc3lYVnQ0WFNBOUlDaDBJRHc4SURncElId2dLSFFnUGo0K0lESTBLVnh1SUNBZ0lIUm9hWE11VTFWQ1gwMUpXRnN6WFZ0NFhTQTlJSFJjYmlBZ0lDQjBJRDBnS0hnNElDb2dNSGd4TURFd01UQXhLU0JlSUNoNE5DQXFJREI0TVRBd01ERXBJRjRnS0hneUlDb2dNSGd4TURFcElGNGdLSGdnS2lBd2VERXdNVEF4TURBcFhHNGdJQ0FnZEdocGN5NUpUbFpmVTFWQ1gwMUpXRnN3WFZ0emVGMGdQU0FvZENBOFBDQXlOQ2tnZkNBb2RDQStQajRnT0NsY2JpQWdJQ0IwYUdsekxrbE9WbDlUVlVKZlRVbFlXekZkVzNONFhTQTlJQ2gwSUR3OElERTJLU0I4SUNoMElENCtQaUF4TmlsY2JpQWdJQ0IwYUdsekxrbE9WbDlUVlVKZlRVbFlXekpkVzNONFhTQTlJQ2gwSUR3OElEZ3BJSHdnS0hRZ1BqNCtJREkwS1Z4dUlDQWdJSFJvYVhNdVNVNVdYMU5WUWw5TlNWaGJNMTFiYzNoZElEMGdkRnh1SUNBZ0lHbG1JQ2g0SUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0I0SUQwZ2VHa2dQU0F4WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIZ2dQU0I0TWlCZUlHUmJaRnRrVzNnNElGNGdlREpkWFYxY2JpQWdJQ0FnSUhocElGNDlJR1JiWkZ0NGFWMWRYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCMGNuVmxYRzU5WEc1Y2JuWmhjaUJISUQwZ2JtVjNJRWRzYjJKaGJDZ3BYRzVjYmtGRlV5NWliRzlqYTFOcGVtVWdQU0EwSUNvZ05GeHVYRzVCUlZNdWNISnZkRzkwZVhCbExtSnNiMk5yVTJsNlpTQTlJRUZGVXk1aWJHOWphMU5wZW1WY2JseHVRVVZUTG10bGVWTnBlbVVnUFNBeU5UWWdMeUE0WEc1Y2JrRkZVeTV3Y205MGIzUjVjR1V1YTJWNVUybDZaU0E5SUVGRlV5NXJaWGxUYVhwbFhHNWNibVoxYm1OMGFXOXVJR0oxWm1abGNsUnZRWEp5WVhrZ0tHSjFaaWtnZTF4dUlDQjJZWElnYkdWdUlEMGdZblZtTG14bGJtZDBhQ0F2SURSY2JpQWdkbUZ5SUc5MWRDQTlJRzVsZHlCQmNuSmhlU2hzWlc0cFhHNGdJSFpoY2lCcElEMGdMVEZjYmlBZ2QyaHBiR1VnS0NzcmFTQThJR3hsYmlrZ2UxeHVJQ0FnSUc5MWRGdHBYU0E5SUdKMVppNXlaV0ZrVlVsdWRETXlRa1VvYVNBcUlEUXBYRzRnSUgxY2JpQWdjbVYwZFhKdUlHOTFkRnh1ZlZ4dVpuVnVZM1JwYjI0Z1FVVlRJQ2hyWlhrcElIdGNiaUFnZEdocGN5NWZhMlY1SUQwZ1luVm1abVZ5Vkc5QmNuSmhlU2hyWlhrcFhHNGdJSFJvYVhNdVgyUnZVbVZ6WlhRb0tWeHVmVnh1WEc1QlJWTXVjSEp2ZEc5MGVYQmxMbDlrYjFKbGMyVjBJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0IyWVhJZ2FXNTJTM05TYjNjc0lHdGxlVk5wZW1Vc0lHdGxlVmR2Y21SekxDQnJjMUp2ZHl3Z2EzTlNiM2R6TENCMFhHNGdJR3RsZVZkdmNtUnpJRDBnZEdocGN5NWZhMlY1WEc0Z0lHdGxlVk5wZW1VZ1BTQnJaWGxYYjNKa2N5NXNaVzVuZEdoY2JpQWdkR2hwY3k1ZmJsSnZkVzVrY3lBOUlHdGxlVk5wZW1VZ0t5QTJYRzRnSUd0elVtOTNjeUE5SUNoMGFHbHpMbDl1VW05MWJtUnpJQ3NnTVNrZ0tpQTBYRzRnSUhSb2FYTXVYMnRsZVZOamFHVmtkV3hsSUQwZ1cxMWNiaUFnWm05eUlDaHJjMUp2ZHlBOUlEQTdJR3R6VW05M0lEd2dhM05TYjNkek95QnJjMUp2ZHlzcktTQjdYRzRnSUNBZ2RHaHBjeTVmYTJWNVUyTm9aV1IxYkdWYmEzTlNiM2RkSUQwZ2EzTlNiM2NnUENCclpYbFRhWHBsSUQ4Z2EyVjVWMjl5WkhOYmEzTlNiM2RkSURvZ0tIUWdQU0IwYUdsekxsOXJaWGxUWTJobFpIVnNaVnRyYzFKdmR5QXRJREZkTENBb2EzTlNiM2NnSlNCclpYbFRhWHBsS1NBOVBUMGdNQ0EvSUNoMElEMGdLSFFnUER3Z09Da2dmQ0FvZENBK1BqNGdNalFwTENCMElEMGdLRWN1VTBKUFdGdDBJRDQrUGlBeU5GMGdQRHdnTWpRcElId2dLRWN1VTBKUFdGc29kQ0ErUGo0Z01UWXBJQ1lnTUhobVpsMGdQRHdnTVRZcElId2dLRWN1VTBKUFdGc29kQ0ErUGo0Z09Da2dKaUF3ZUdabVhTQThQQ0E0S1NCOElFY3VVMEpQV0Z0MElDWWdNSGhtWmwwc0lIUWdYajBnUnk1U1EwOU9XeWhyYzFKdmR5QXZJR3RsZVZOcGVtVXBJSHdnTUYwZ1BEd2dNalFwSURvZ2EyVjVVMmw2WlNBK0lEWWdKaVlnYTNOU2IzY2dKU0JyWlhsVGFYcGxJRDA5UFNBMElEOGdkQ0E5SUNoSExsTkNUMWhiZENBK1BqNGdNalJkSUR3OElESTBLU0I4SUNoSExsTkNUMWhiS0hRZ1BqNCtJREUyS1NBbUlEQjRabVpkSUR3OElERTJLU0I4SUNoSExsTkNUMWhiS0hRZ1BqNCtJRGdwSUNZZ01IaG1abDBnUER3Z09Da2dmQ0JITGxOQ1QxaGJkQ0FtSURCNFptWmRJRG9nZG05cFpDQXdMQ0IwYUdsekxsOXJaWGxUWTJobFpIVnNaVnRyYzFKdmR5QXRJR3RsZVZOcGVtVmRJRjRnZENsY2JpQWdmVnh1SUNCMGFHbHpMbDlwYm5aTFpYbFRZMmhsWkhWc1pTQTlJRnRkWEc0Z0lHWnZjaUFvYVc1MlMzTlNiM2NnUFNBd095QnBiblpMYzFKdmR5QThJR3R6VW05M2N6c2dhVzUyUzNOU2IzY3JLeWtnZTF4dUlDQWdJR3R6VW05M0lEMGdhM05TYjNkeklDMGdhVzUyUzNOU2IzZGNiaUFnSUNCMElEMGdkR2hwY3k1ZmEyVjVVMk5vWldSMWJHVmJhM05TYjNjZ0xTQW9hVzUyUzNOU2IzY2dKU0EwSUQ4Z01DQTZJRFFwWFZ4dUlDQWdJSFJvYVhNdVgybHVka3RsZVZOamFHVmtkV3hsVzJsdWRrdHpVbTkzWFNBOUlHbHVka3R6VW05M0lEd2dOQ0I4ZkNCcmMxSnZkeUE4UFNBMElEOGdkQ0E2SUVjdVNVNVdYMU5WUWw5TlNWaGJNRjFiUnk1VFFrOVlXM1FnUGo0K0lESTBYVjBnWGlCSExrbE9WbDlUVlVKZlRVbFlXekZkVzBjdVUwSlBXRnNvZENBK1BqNGdNVFlwSUNZZ01IaG1abDFkSUY0Z1J5NUpUbFpmVTFWQ1gwMUpXRnN5WFZ0SExsTkNUMWhiS0hRZ1BqNCtJRGdwSUNZZ01IaG1abDFkSUY0Z1J5NUpUbFpmVTFWQ1gwMUpXRnN6WFZ0SExsTkNUMWhiZENBbUlEQjRabVpkWFZ4dUlDQjlYRzRnSUhKbGRIVnliaUIwY25WbFhHNTlYRzVjYmtGRlV5NXdjbTkwYjNSNWNHVXVaVzVqY25sd2RFSnNiMk5ySUQwZ1puVnVZM1JwYjI0Z0tFMHBJSHRjYmlBZ1RTQTlJR0oxWm1abGNsUnZRWEp5WVhrb2JtVjNJRUoxWm1abGNpaE5LU2xjYmlBZ2RtRnlJRzkxZENBOUlIUm9hWE11WDJSdlEzSjVjSFJDYkc5amF5aE5MQ0IwYUdsekxsOXJaWGxUWTJobFpIVnNaU3dnUnk1VFZVSmZUVWxZTENCSExsTkNUMWdwWEc0Z0lIWmhjaUJpZFdZZ1BTQnVaWGNnUW5WbVptVnlLREUyS1Z4dUlDQmlkV1l1ZDNKcGRHVlZTVzUwTXpKQ1JTaHZkWFJiTUYwc0lEQXBYRzRnSUdKMVppNTNjbWwwWlZWSmJuUXpNa0pGS0c5MWRGc3hYU3dnTkNsY2JpQWdZblZtTG5keWFYUmxWVWx1ZERNeVFrVW9iM1YwV3pKZExDQTRLVnh1SUNCaWRXWXVkM0pwZEdWVlNXNTBNekpDUlNodmRYUmJNMTBzSURFeUtWeHVJQ0J5WlhSMWNtNGdZblZtWEc1OVhHNWNia0ZGVXk1d2NtOTBiM1I1Y0dVdVpHVmpjbmx3ZEVKc2IyTnJJRDBnWm5WdVkzUnBiMjRnS0UwcElIdGNiaUFnVFNBOUlHSjFabVpsY2xSdlFYSnlZWGtvYm1WM0lFSjFabVpsY2loTktTbGNiaUFnZG1GeUlIUmxiWEFnUFNCYlRWc3pYU3dnVFZzeFhWMWNiaUFnVFZzeFhTQTlJSFJsYlhCYk1GMWNiaUFnVFZzelhTQTlJSFJsYlhCYk1WMWNiaUFnZG1GeUlHOTFkQ0E5SUhSb2FYTXVYMlJ2UTNKNWNIUkNiRzlqYXloTkxDQjBhR2x6TGw5cGJuWkxaWGxUWTJobFpIVnNaU3dnUnk1SlRsWmZVMVZDWDAxSldDd2dSeTVKVGxaZlUwSlBXQ2xjYmlBZ2RtRnlJR0oxWmlBOUlHNWxkeUJDZFdabVpYSW9NVFlwWEc0Z0lHSjFaaTUzY21sMFpWVkpiblF6TWtKRktHOTFkRnN3WFN3Z01DbGNiaUFnWW5WbUxuZHlhWFJsVlVsdWRETXlRa1VvYjNWMFd6TmRMQ0EwS1Z4dUlDQmlkV1l1ZDNKcGRHVlZTVzUwTXpKQ1JTaHZkWFJiTWwwc0lEZ3BYRzRnSUdKMVppNTNjbWwwWlZWSmJuUXpNa0pGS0c5MWRGc3hYU3dnTVRJcFhHNGdJSEpsZEhWeWJpQmlkV1pjYm4xY2JseHVRVVZUTG5CeWIzUnZkSGx3WlM1elkzSjFZaUE5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnYzJOeWRXSmZkbVZqS0hSb2FYTXVYMnRsZVZOamFHVmtkV3hsS1Z4dUlDQnpZM0oxWWw5MlpXTW9kR2hwY3k1ZmFXNTJTMlY1VTJOb1pXUjFiR1VwWEc0Z0lITmpjblZpWDNabFl5aDBhR2x6TGw5clpYa3BYRzU5WEc1Y2JrRkZVeTV3Y205MGIzUjVjR1V1WDJSdlEzSjVjSFJDYkc5amF5QTlJR1oxYm1OMGFXOXVJQ2hOTENCclpYbFRZMmhsWkhWc1pTd2dVMVZDWDAxSldDd2dVMEpQV0NrZ2UxeHVJQ0IyWVhJZ2EzTlNiM2NzSUhNd0xDQnpNU3dnY3pJc0lITXpMQ0IwTUN3Z2RERXNJSFF5TENCME0xeHVYRzRnSUhNd0lEMGdUVnN3WFNCZUlHdGxlVk5qYUdWa2RXeGxXekJkWEc0Z0lITXhJRDBnVFZzeFhTQmVJR3RsZVZOamFHVmtkV3hsV3pGZFhHNGdJSE15SUQwZ1RWc3lYU0JlSUd0bGVWTmphR1ZrZFd4bFd6SmRYRzRnSUhNeklEMGdUVnN6WFNCZUlHdGxlVk5qYUdWa2RXeGxXek5kWEc0Z0lHdHpVbTkzSUQwZ05GeHVJQ0JtYjNJZ0tIWmhjaUJ5YjNWdVpDQTlJREU3SUhKdmRXNWtJRHdnZEdocGN5NWZibEp2ZFc1a2N6c2djbTkxYm1Rckt5a2dlMXh1SUNBZ0lIUXdJRDBnVTFWQ1gwMUpXRnN3WFZ0ek1DQStQajRnTWpSZElGNGdVMVZDWDAxSldGc3hYVnNvY3pFZ1BqNCtJREUyS1NBbUlEQjRabVpkSUY0Z1UxVkNYMDFKV0ZzeVhWc29jeklnUGo0K0lEZ3BJQ1lnTUhobVpsMGdYaUJUVlVKZlRVbFlXek5kVzNNeklDWWdNSGhtWmwwZ1hpQnJaWGxUWTJobFpIVnNaVnRyYzFKdmR5c3JYVnh1SUNBZ0lIUXhJRDBnVTFWQ1gwMUpXRnN3WFZ0ek1TQStQajRnTWpSZElGNGdVMVZDWDAxSldGc3hYVnNvY3pJZ1BqNCtJREUyS1NBbUlEQjRabVpkSUY0Z1UxVkNYMDFKV0ZzeVhWc29jek1nUGo0K0lEZ3BJQ1lnTUhobVpsMGdYaUJUVlVKZlRVbFlXek5kVzNNd0lDWWdNSGhtWmwwZ1hpQnJaWGxUWTJobFpIVnNaVnRyYzFKdmR5c3JYVnh1SUNBZ0lIUXlJRDBnVTFWQ1gwMUpXRnN3WFZ0ek1pQStQajRnTWpSZElGNGdVMVZDWDAxSldGc3hYVnNvY3pNZ1BqNCtJREUyS1NBbUlEQjRabVpkSUY0Z1UxVkNYMDFKV0ZzeVhWc29jekFnUGo0K0lEZ3BJQ1lnTUhobVpsMGdYaUJUVlVKZlRVbFlXek5kVzNNeElDWWdNSGhtWmwwZ1hpQnJaWGxUWTJobFpIVnNaVnRyYzFKdmR5c3JYVnh1SUNBZ0lIUXpJRDBnVTFWQ1gwMUpXRnN3WFZ0ek15QStQajRnTWpSZElGNGdVMVZDWDAxSldGc3hYVnNvY3pBZ1BqNCtJREUyS1NBbUlEQjRabVpkSUY0Z1UxVkNYMDFKV0ZzeVhWc29jekVnUGo0K0lEZ3BJQ1lnTUhobVpsMGdYaUJUVlVKZlRVbFlXek5kVzNNeUlDWWdNSGhtWmwwZ1hpQnJaWGxUWTJobFpIVnNaVnRyYzFKdmR5c3JYVnh1SUNBZ0lITXdJRDBnZERCY2JpQWdJQ0J6TVNBOUlIUXhYRzRnSUNBZ2N6SWdQU0IwTWx4dUlDQWdJSE16SUQwZ2RETmNiaUFnZlZ4dUlDQjBNQ0E5SUNnb1UwSlBXRnR6TUNBK1BqNGdNalJkSUR3OElESTBLU0I4SUNoVFFrOVlXeWh6TVNBK1BqNGdNVFlwSUNZZ01IaG1abDBnUER3Z01UWXBJSHdnS0ZOQ1QxaGJLSE15SUQ0K1BpQTRLU0FtSURCNFptWmRJRHc4SURncElId2dVMEpQV0Z0ek15QW1JREI0Wm1aZEtTQmVJR3RsZVZOamFHVmtkV3hsVzJ0elVtOTNLeXRkWEc0Z0lIUXhJRDBnS0NoVFFrOVlXM014SUQ0K1BpQXlORjBnUER3Z01qUXBJSHdnS0ZOQ1QxaGJLSE15SUQ0K1BpQXhOaWtnSmlBd2VHWm1YU0E4UENBeE5pa2dmQ0FvVTBKUFdGc29jek1nUGo0K0lEZ3BJQ1lnTUhobVpsMGdQRHdnT0NrZ2ZDQlRRazlZVzNNd0lDWWdNSGhtWmwwcElGNGdhMlY1VTJOb1pXUjFiR1ZiYTNOU2IzY3JLMTFjYmlBZ2RESWdQU0FvS0ZOQ1QxaGJjeklnUGo0K0lESTBYU0E4UENBeU5Da2dmQ0FvVTBKUFdGc29jek1nUGo0K0lERTJLU0FtSURCNFptWmRJRHc4SURFMktTQjhJQ2hUUWs5WVd5aHpNQ0ErUGo0Z09Da2dKaUF3ZUdabVhTQThQQ0E0S1NCOElGTkNUMWhiY3pFZ0ppQXdlR1ptWFNrZ1hpQnJaWGxUWTJobFpIVnNaVnRyYzFKdmR5c3JYVnh1SUNCME15QTlJQ2dvVTBKUFdGdHpNeUErUGo0Z01qUmRJRHc4SURJMEtTQjhJQ2hUUWs5WVd5aHpNQ0ErUGo0Z01UWXBJQ1lnTUhobVpsMGdQRHdnTVRZcElId2dLRk5DVDFoYktITXhJRDQrUGlBNEtTQW1JREI0Wm1aZElEdzhJRGdwSUh3Z1UwSlBXRnR6TWlBbUlEQjRabVpkS1NCZUlHdGxlVk5qYUdWa2RXeGxXMnR6VW05M0t5dGRYRzRnSUhKbGRIVnliaUJiWEc0Z0lDQWdabWw0ZFhCZmRXbHVkRE15S0hRd0tTeGNiaUFnSUNCbWFYaDFjRjkxYVc1ME16SW9kREVwTEZ4dUlDQWdJR1pwZUhWd1gzVnBiblF6TWloME1pa3NYRzRnSUNBZ1ptbDRkWEJmZFdsdWRETXlLSFF6S1Z4dUlDQmRYRzU5WEc1Y2JtVjRjRzl5ZEhNdVFVVlRJRDBnUVVWVFhHNGlYWDA9IiwiLy8gQSBKYXZhc2NyaXB0IGltcGxlbWVudGFpb24gb2YgdGhlIFwieG9yd293XCIgcHJuZyBhbGdvcml0aG0gYnlcbi8vIEdlb3JnZSBNYXJzYWdsaWEuICBTZWUgaHR0cDovL3d3dy5qc3RhdHNvZnQub3JnL3YwOC9pMTQvcGFwZXJcblxuKGZ1bmN0aW9uKGdsb2JhbCwgbW9kdWxlLCBkZWZpbmUpIHtcblxuZnVuY3Rpb24gWG9yR2VuKHNlZWQpIHtcbiAgdmFyIG1lID0gdGhpcywgc3Ryc2VlZCA9ICcnO1xuXG4gIC8vIFNldCB1cCBnZW5lcmF0b3IgZnVuY3Rpb24uXG4gIG1lLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdCA9IChtZS54IF4gKG1lLnggPj4+IDIpKTtcbiAgICBtZS54ID0gbWUueTsgbWUueSA9IG1lLno7IG1lLnogPSBtZS53OyBtZS53ID0gbWUudjtcbiAgICByZXR1cm4gKG1lLmQgPSAobWUuZCArIDM2MjQzNyB8IDApKSArXG4gICAgICAgKG1lLnYgPSAobWUudiBeIChtZS52IDw8IDQpKSBeICh0IF4gKHQgPDwgMSkpKSB8IDA7XG4gIH07XG5cbiAgbWUueCA9IDA7XG4gIG1lLnkgPSAwO1xuICBtZS56ID0gMDtcbiAgbWUudyA9IDA7XG4gIG1lLnYgPSAwO1xuXG4gIGlmIChzZWVkID09PSAoc2VlZCB8IDApKSB7XG4gICAgLy8gSW50ZWdlciBzZWVkLlxuICAgIG1lLnggPSBzZWVkO1xuICB9IGVsc2Uge1xuICAgIC8vIFN0cmluZyBzZWVkLlxuICAgIHN0cnNlZWQgKz0gc2VlZDtcbiAgfVxuXG4gIC8vIE1peCBpbiBzdHJpbmcgc2VlZCwgdGhlbiBkaXNjYXJkIGFuIGluaXRpYWwgYmF0Y2ggb2YgNjQgdmFsdWVzLlxuICBmb3IgKHZhciBrID0gMDsgayA8IHN0cnNlZWQubGVuZ3RoICsgNjQ7IGsrKykge1xuICAgIG1lLnggXj0gc3Ryc2VlZC5jaGFyQ29kZUF0KGspIHwgMDtcbiAgICBpZiAoayA9PSBzdHJzZWVkLmxlbmd0aCkge1xuICAgICAgbWUuZCA9IG1lLnggPDwgMTAgXiBtZS54ID4+PiA0O1xuICAgIH1cbiAgICBtZS5uZXh0KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29weShmLCB0KSB7XG4gIHQueCA9IGYueDtcbiAgdC55ID0gZi55O1xuICB0LnogPSBmLno7XG4gIHQudyA9IGYudztcbiAgdC52ID0gZi52O1xuICB0LmQgPSBmLmQ7XG4gIHJldHVybiB0O1xufVxuXG5mdW5jdGlvbiBpbXBsKHNlZWQsIG9wdHMpIHtcbiAgdmFyIHhnID0gbmV3IFhvckdlbihzZWVkKSxcbiAgICAgIHN0YXRlID0gb3B0cyAmJiBvcHRzLnN0YXRlLFxuICAgICAgcHJuZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMDsgfTtcbiAgcHJuZy5kb3VibGUgPSBmdW5jdGlvbigpIHtcbiAgICBkbyB7XG4gICAgICB2YXIgdG9wID0geGcubmV4dCgpID4+PiAxMSxcbiAgICAgICAgICBib3QgPSAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwLFxuICAgICAgICAgIHJlc3VsdCA9ICh0b3AgKyBib3QpIC8gKDEgPDwgMjEpO1xuICAgIH0gd2hpbGUgKHJlc3VsdCA9PT0gMCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcHJuZy5pbnQzMiA9IHhnLm5leHQ7XG4gIHBybmcucXVpY2sgPSBwcm5nO1xuICBpZiAoc3RhdGUpIHtcbiAgICBpZiAodHlwZW9mKHN0YXRlKSA9PSAnb2JqZWN0JykgY29weShzdGF0ZSwgeGcpO1xuICAgIHBybmcuc3RhdGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGNvcHkoeGcsIHt9KTsgfVxuICB9XG4gIHJldHVybiBwcm5nO1xufVxuXG5pZiAobW9kdWxlICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gaW1wbDtcbn0gZWxzZSBpZiAoZGVmaW5lICYmIGRlZmluZS5hbWQpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gaW1wbDsgfSk7XG59IGVsc2Uge1xuICB0aGlzLnhvcndvdyA9IGltcGw7XG59XG5cbn0pKFxuICB0aGlzLFxuICAodHlwZW9mIG1vZHVsZSkgPT0gJ29iamVjdCcgJiYgbW9kdWxlLCAgICAvLyBwcmVzZW50IGluIG5vZGUuanNcbiAgKHR5cGVvZiBkZWZpbmUpID09ICdmdW5jdGlvbicgJiYgZGVmaW5lICAgLy8gcHJlc2VudCB3aXRoIGFuIEFNRCBsb2FkZXJcbik7XG5cblxuIiwiLy8gQSBKYXZhc2NyaXB0IGltcGxlbWVudGFpb24gb2YgdGhlIFwieG9yc2hpZnQ3XCIgYWxnb3JpdGhtIGJ5XG4vLyBGcmFuw6dvaXMgUGFubmV0b24gYW5kIFBpZXJyZSBMJ2VjdXllcjpcbi8vIFwiT24gdGhlIFhvcmdzaGlmdCBSYW5kb20gTnVtYmVyIEdlbmVyYXRvcnNcIlxuLy8gaHR0cDovL3NhbHVjLmVuZ3IudWNvbm4uZWR1L3JlZnMvY3J5cHRvL3JuZy9wYW5uZXRvbjA1b250aGV4b3JzaGlmdC5wZGZcblxuKGZ1bmN0aW9uKGdsb2JhbCwgbW9kdWxlLCBkZWZpbmUpIHtcblxuZnVuY3Rpb24gWG9yR2VuKHNlZWQpIHtcbiAgdmFyIG1lID0gdGhpcztcblxuICAvLyBTZXQgdXAgZ2VuZXJhdG9yIGZ1bmN0aW9uLlxuICBtZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gVXBkYXRlIHhvciBnZW5lcmF0b3IuXG4gICAgdmFyIFggPSBtZS54LCBpID0gbWUuaSwgdCwgdiwgdztcbiAgICB0ID0gWFtpXTsgdCBePSAodCA+Pj4gNyk7IHYgPSB0IF4gKHQgPDwgMjQpO1xuICAgIHQgPSBYWyhpICsgMSkgJiA3XTsgdiBePSB0IF4gKHQgPj4+IDEwKTtcbiAgICB0ID0gWFsoaSArIDMpICYgN107IHYgXj0gdCBeICh0ID4+PiAzKTtcbiAgICB0ID0gWFsoaSArIDQpICYgN107IHYgXj0gdCBeICh0IDw8IDcpO1xuICAgIHQgPSBYWyhpICsgNykgJiA3XTsgdCA9IHQgXiAodCA8PCAxMyk7IHYgXj0gdCBeICh0IDw8IDkpO1xuICAgIFhbaV0gPSB2O1xuICAgIG1lLmkgPSAoaSArIDEpICYgNztcbiAgICByZXR1cm4gdjtcbiAgfTtcblxuICBmdW5jdGlvbiBpbml0KG1lLCBzZWVkKSB7XG4gICAgdmFyIGosIHcsIFggPSBbXTtcblxuICAgIGlmIChzZWVkID09PSAoc2VlZCB8IDApKSB7XG4gICAgICAvLyBTZWVkIHN0YXRlIGFycmF5IHVzaW5nIGEgMzItYml0IGludGVnZXIuXG4gICAgICB3ID0gWFswXSA9IHNlZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNlZWQgc3RhdGUgdXNpbmcgYSBzdHJpbmcuXG4gICAgICBzZWVkID0gJycgKyBzZWVkO1xuICAgICAgZm9yIChqID0gMDsgaiA8IHNlZWQubGVuZ3RoOyArK2opIHtcbiAgICAgICAgWFtqICYgN10gPSAoWFtqICYgN10gPDwgMTUpIF5cbiAgICAgICAgICAgIChzZWVkLmNoYXJDb2RlQXQoaikgKyBYWyhqICsgMSkgJiA3XSA8PCAxMyk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIEVuZm9yY2UgYW4gYXJyYXkgbGVuZ3RoIG9mIDgsIG5vdCBhbGwgemVyb2VzLlxuICAgIHdoaWxlIChYLmxlbmd0aCA8IDgpIFgucHVzaCgwKTtcbiAgICBmb3IgKGogPSAwOyBqIDwgOCAmJiBYW2pdID09PSAwOyArK2opO1xuICAgIGlmIChqID09IDgpIHcgPSBYWzddID0gLTE7IGVsc2UgdyA9IFhbal07XG5cbiAgICBtZS54ID0gWDtcbiAgICBtZS5pID0gMDtcblxuICAgIC8vIERpc2NhcmQgYW4gaW5pdGlhbCAyNTYgdmFsdWVzLlxuICAgIGZvciAoaiA9IDI1NjsgaiA+IDA7IC0taikge1xuICAgICAgbWUubmV4dCgpO1xuICAgIH1cbiAgfVxuXG4gIGluaXQobWUsIHNlZWQpO1xufVxuXG5mdW5jdGlvbiBjb3B5KGYsIHQpIHtcbiAgdC54ID0gZi54LnNsaWNlKCk7XG4gIHQuaSA9IGYuaTtcbiAgcmV0dXJuIHQ7XG59XG5cbmZ1bmN0aW9uIGltcGwoc2VlZCwgb3B0cykge1xuICBpZiAoc2VlZCA9PSBudWxsKSBzZWVkID0gKyhuZXcgRGF0ZSk7XG4gIHZhciB4ZyA9IG5ldyBYb3JHZW4oc2VlZCksXG4gICAgICBzdGF0ZSA9IG9wdHMgJiYgb3B0cy5zdGF0ZSxcbiAgICAgIHBybmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDA7IH07XG4gIHBybmcuZG91YmxlID0gZnVuY3Rpb24oKSB7XG4gICAgZG8ge1xuICAgICAgdmFyIHRvcCA9IHhnLm5leHQoKSA+Pj4gMTEsXG4gICAgICAgICAgYm90ID0gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMCxcbiAgICAgICAgICByZXN1bHQgPSAodG9wICsgYm90KSAvICgxIDw8IDIxKTtcbiAgICB9IHdoaWxlIChyZXN1bHQgPT09IDApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHBybmcuaW50MzIgPSB4Zy5uZXh0O1xuICBwcm5nLnF1aWNrID0gcHJuZztcbiAgaWYgKHN0YXRlKSB7XG4gICAgaWYgKHN0YXRlLngpIGNvcHkoc3RhdGUsIHhnKTtcbiAgICBwcm5nLnN0YXRlID0gZnVuY3Rpb24oKSB7IHJldHVybiBjb3B5KHhnLCB7fSk7IH1cbiAgfVxuICByZXR1cm4gcHJuZztcbn1cblxuaWYgKG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGltcGw7XG59IGVsc2UgaWYgKGRlZmluZSAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIGltcGw7IH0pO1xufSBlbHNlIHtcbiAgdGhpcy54b3JzaGlmdDcgPSBpbXBsO1xufVxuXG59KShcbiAgdGhpcyxcbiAgKHR5cGVvZiBtb2R1bGUpID09ICdvYmplY3QnICYmIG1vZHVsZSwgICAgLy8gcHJlc2VudCBpbiBub2RlLmpzXG4gICh0eXBlb2YgZGVmaW5lKSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZSAgIC8vIHByZXNlbnQgd2l0aCBhbiBBTUQgbG9hZGVyXG4pO1xuXG4iLCIvLyBBIEphdmFzY3JpcHQgaW1wbGVtZW50YWlvbiBvZiBSaWNoYXJkIEJyZW50J3MgWG9yZ2VucyB4b3I0MDk2IGFsZ29yaXRobS5cbi8vXG4vLyBUaGlzIGZhc3Qgbm9uLWNyeXB0b2dyYXBoaWMgcmFuZG9tIG51bWJlciBnZW5lcmF0b3IgaXMgZGVzaWduZWQgZm9yXG4vLyB1c2UgaW4gTW9udGUtQ2FybG8gYWxnb3JpdGhtcy4gSXQgY29tYmluZXMgYSBsb25nLXBlcmlvZCB4b3JzaGlmdFxuLy8gZ2VuZXJhdG9yIHdpdGggYSBXZXlsIGdlbmVyYXRvciwgYW5kIGl0IHBhc3NlcyBhbGwgY29tbW9uIGJhdHRlcmllc1xuLy8gb2Ygc3Rhc3RpY2lhbCB0ZXN0cyBmb3IgcmFuZG9tbmVzcyB3aGlsZSBjb25zdW1pbmcgb25seSBhIGZldyBuYW5vc2Vjb25kc1xuLy8gZm9yIGVhY2ggcHJuZyBnZW5lcmF0ZWQuICBGb3IgYmFja2dyb3VuZCBvbiB0aGUgZ2VuZXJhdG9yLCBzZWUgQnJlbnQnc1xuLy8gcGFwZXI6IFwiU29tZSBsb25nLXBlcmlvZCByYW5kb20gbnVtYmVyIGdlbmVyYXRvcnMgdXNpbmcgc2hpZnRzIGFuZCB4b3JzLlwiXG4vLyBodHRwOi8vYXJ4aXYub3JnL3BkZi8xMTA0LjMxMTUucGRmXG4vL1xuLy8gVXNhZ2U6XG4vL1xuLy8gdmFyIHhvcjQwOTYgPSByZXF1aXJlKCd4b3I0MDk2Jyk7XG4vLyByYW5kb20gPSB4b3I0MDk2KDEpOyAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNlZWQgd2l0aCBpbnQzMiBvciBzdHJpbmcuXG4vLyBhc3NlcnQuZXF1YWwocmFuZG9tKCksIDAuMTUyMDQzNjQ1MDUzODU0Nyk7IC8vICgwLCAxKSByYW5nZSwgNTMgYml0cy5cbi8vIGFzc2VydC5lcXVhbChyYW5kb20uaW50MzIoKSwgMTgwNjUzNDg5Nyk7ICAgLy8gc2lnbmVkIGludDMyLCAzMiBiaXRzLlxuLy9cbi8vIEZvciBub256ZXJvIG51bWVyaWMga2V5cywgdGhpcyBpbXBlbGVtZW50YXRpb24gcHJvdmlkZXMgYSBzZXF1ZW5jZVxuLy8gaWRlbnRpY2FsIHRvIHRoYXQgYnkgQnJlbnQncyB4b3JnZW5zIDMgaW1wbGVtZW50YWlvbiBpbiBDLiAgVGhpc1xuLy8gaW1wbGVtZW50YXRpb24gYWxzbyBwcm92aWRlcyBmb3IgaW5pdGFsaXppbmcgdGhlIGdlbmVyYXRvciB3aXRoXG4vLyBzdHJpbmcgc2VlZHMsIG9yIGZvciBzYXZpbmcgYW5kIHJlc3RvcmluZyB0aGUgc3RhdGUgb2YgdGhlIGdlbmVyYXRvci5cbi8vXG4vLyBPbiBDaHJvbWUsIHRoaXMgcHJuZyBiZW5jaG1hcmtzIGFib3V0IDIuMSB0aW1lcyBzbG93ZXIgdGhhblxuLy8gSmF2YXNjcmlwdCdzIGJ1aWx0LWluIE1hdGgucmFuZG9tKCkuXG5cbihmdW5jdGlvbihnbG9iYWwsIG1vZHVsZSwgZGVmaW5lKSB7XG5cbmZ1bmN0aW9uIFhvckdlbihzZWVkKSB7XG4gIHZhciBtZSA9IHRoaXM7XG5cbiAgLy8gU2V0IHVwIGdlbmVyYXRvciBmdW5jdGlvbi5cbiAgbWUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB3ID0gbWUudyxcbiAgICAgICAgWCA9IG1lLlgsIGkgPSBtZS5pLCB0LCB2O1xuICAgIC8vIFVwZGF0ZSBXZXlsIGdlbmVyYXRvci5cbiAgICBtZS53ID0gdyA9ICh3ICsgMHg2MWM4ODY0NykgfCAwO1xuICAgIC8vIFVwZGF0ZSB4b3IgZ2VuZXJhdG9yLlxuICAgIHYgPSBYWyhpICsgMzQpICYgMTI3XTtcbiAgICB0ID0gWFtpID0gKChpICsgMSkgJiAxMjcpXTtcbiAgICB2IF49IHYgPDwgMTM7XG4gICAgdCBePSB0IDw8IDE3O1xuICAgIHYgXj0gdiA+Pj4gMTU7XG4gICAgdCBePSB0ID4+PiAxMjtcbiAgICAvLyBVcGRhdGUgWG9yIGdlbmVyYXRvciBhcnJheSBzdGF0ZS5cbiAgICB2ID0gWFtpXSA9IHYgXiB0O1xuICAgIG1lLmkgPSBpO1xuICAgIC8vIFJlc3VsdCBpcyB0aGUgY29tYmluYXRpb24uXG4gICAgcmV0dXJuICh2ICsgKHcgXiAodyA+Pj4gMTYpKSkgfCAwO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGluaXQobWUsIHNlZWQpIHtcbiAgICB2YXIgdCwgdiwgaSwgaiwgdywgWCA9IFtdLCBsaW1pdCA9IDEyODtcbiAgICBpZiAoc2VlZCA9PT0gKHNlZWQgfCAwKSkge1xuICAgICAgLy8gTnVtZXJpYyBzZWVkcyBpbml0aWFsaXplIHYsIHdoaWNoIGlzIHVzZWQgdG8gZ2VuZXJhdGVzIFguXG4gICAgICB2ID0gc2VlZDtcbiAgICAgIHNlZWQgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTdHJpbmcgc2VlZHMgYXJlIG1peGVkIGludG8gdiBhbmQgWCBvbmUgY2hhcmFjdGVyIGF0IGEgdGltZS5cbiAgICAgIHNlZWQgPSBzZWVkICsgJ1xcMCc7XG4gICAgICB2ID0gMDtcbiAgICAgIGxpbWl0ID0gTWF0aC5tYXgobGltaXQsIHNlZWQubGVuZ3RoKTtcbiAgICB9XG4gICAgLy8gSW5pdGlhbGl6ZSBjaXJjdWxhciBhcnJheSBhbmQgd2V5bCB2YWx1ZS5cbiAgICBmb3IgKGkgPSAwLCBqID0gLTMyOyBqIDwgbGltaXQ7ICsraikge1xuICAgICAgLy8gUHV0IHRoZSB1bmljb2RlIGNoYXJhY3RlcnMgaW50byB0aGUgYXJyYXksIGFuZCBzaHVmZmxlIHRoZW0uXG4gICAgICBpZiAoc2VlZCkgdiBePSBzZWVkLmNoYXJDb2RlQXQoKGogKyAzMikgJSBzZWVkLmxlbmd0aCk7XG4gICAgICAvLyBBZnRlciAzMiBzaHVmZmxlcywgdGFrZSB2IGFzIHRoZSBzdGFydGluZyB3IHZhbHVlLlxuICAgICAgaWYgKGogPT09IDApIHcgPSB2O1xuICAgICAgdiBePSB2IDw8IDEwO1xuICAgICAgdiBePSB2ID4+PiAxNTtcbiAgICAgIHYgXj0gdiA8PCA0O1xuICAgICAgdiBePSB2ID4+PiAxMztcbiAgICAgIGlmIChqID49IDApIHtcbiAgICAgICAgdyA9ICh3ICsgMHg2MWM4ODY0NykgfCAwOyAgICAgLy8gV2V5bC5cbiAgICAgICAgdCA9IChYW2ogJiAxMjddIF49ICh2ICsgdykpOyAgLy8gQ29tYmluZSB4b3IgYW5kIHdleWwgdG8gaW5pdCBhcnJheS5cbiAgICAgICAgaSA9ICgwID09IHQpID8gaSArIDEgOiAwOyAgICAgLy8gQ291bnQgemVyb2VzLlxuICAgICAgfVxuICAgIH1cbiAgICAvLyBXZSBoYXZlIGRldGVjdGVkIGFsbCB6ZXJvZXM7IG1ha2UgdGhlIGtleSBub256ZXJvLlxuICAgIGlmIChpID49IDEyOCkge1xuICAgICAgWFsoc2VlZCAmJiBzZWVkLmxlbmd0aCB8fCAwKSAmIDEyN10gPSAtMTtcbiAgICB9XG4gICAgLy8gUnVuIHRoZSBnZW5lcmF0b3IgNTEyIHRpbWVzIHRvIGZ1cnRoZXIgbWl4IHRoZSBzdGF0ZSBiZWZvcmUgdXNpbmcgaXQuXG4gICAgLy8gRmFjdG9yaW5nIHRoaXMgYXMgYSBmdW5jdGlvbiBzbG93cyB0aGUgbWFpbiBnZW5lcmF0b3IsIHNvIGl0IGlzIGp1c3RcbiAgICAvLyB1bnJvbGxlZCBoZXJlLiAgVGhlIHdleWwgZ2VuZXJhdG9yIGlzIG5vdCBhZHZhbmNlZCB3aGlsZSB3YXJtaW5nIHVwLlxuICAgIGkgPSAxMjc7XG4gICAgZm9yIChqID0gNCAqIDEyODsgaiA+IDA7IC0taikge1xuICAgICAgdiA9IFhbKGkgKyAzNCkgJiAxMjddO1xuICAgICAgdCA9IFhbaSA9ICgoaSArIDEpICYgMTI3KV07XG4gICAgICB2IF49IHYgPDwgMTM7XG4gICAgICB0IF49IHQgPDwgMTc7XG4gICAgICB2IF49IHYgPj4+IDE1O1xuICAgICAgdCBePSB0ID4+PiAxMjtcbiAgICAgIFhbaV0gPSB2IF4gdDtcbiAgICB9XG4gICAgLy8gU3RvcmluZyBzdGF0ZSBhcyBvYmplY3QgbWVtYmVycyBpcyBmYXN0ZXIgdGhhbiB1c2luZyBjbG9zdXJlIHZhcmlhYmxlcy5cbiAgICBtZS53ID0gdztcbiAgICBtZS5YID0gWDtcbiAgICBtZS5pID0gaTtcbiAgfVxuXG4gIGluaXQobWUsIHNlZWQpO1xufVxuXG5mdW5jdGlvbiBjb3B5KGYsIHQpIHtcbiAgdC5pID0gZi5pO1xuICB0LncgPSBmLnc7XG4gIHQuWCA9IGYuWC5zbGljZSgpO1xuICByZXR1cm4gdDtcbn07XG5cbmZ1bmN0aW9uIGltcGwoc2VlZCwgb3B0cykge1xuICBpZiAoc2VlZCA9PSBudWxsKSBzZWVkID0gKyhuZXcgRGF0ZSk7XG4gIHZhciB4ZyA9IG5ldyBYb3JHZW4oc2VlZCksXG4gICAgICBzdGF0ZSA9IG9wdHMgJiYgb3B0cy5zdGF0ZSxcbiAgICAgIHBybmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDA7IH07XG4gIHBybmcuZG91YmxlID0gZnVuY3Rpb24oKSB7XG4gICAgZG8ge1xuICAgICAgdmFyIHRvcCA9IHhnLm5leHQoKSA+Pj4gMTEsXG4gICAgICAgICAgYm90ID0gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMCxcbiAgICAgICAgICByZXN1bHQgPSAodG9wICsgYm90KSAvICgxIDw8IDIxKTtcbiAgICB9IHdoaWxlIChyZXN1bHQgPT09IDApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHBybmcuaW50MzIgPSB4Zy5uZXh0O1xuICBwcm5nLnF1aWNrID0gcHJuZztcbiAgaWYgKHN0YXRlKSB7XG4gICAgaWYgKHN0YXRlLlgpIGNvcHkoc3RhdGUsIHhnKTtcbiAgICBwcm5nLnN0YXRlID0gZnVuY3Rpb24oKSB7IHJldHVybiBjb3B5KHhnLCB7fSk7IH1cbiAgfVxuICByZXR1cm4gcHJuZztcbn1cblxuaWYgKG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGltcGw7XG59IGVsc2UgaWYgKGRlZmluZSAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIGltcGw7IH0pO1xufSBlbHNlIHtcbiAgdGhpcy54b3I0MDk2ID0gaW1wbDtcbn1cblxufSkoXG4gIHRoaXMsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdpbmRvdyBvYmplY3Qgb3IgZ2xvYmFsXG4gICh0eXBlb2YgbW9kdWxlKSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUsICAgIC8vIHByZXNlbnQgaW4gbm9kZS5qc1xuICAodHlwZW9mIGRlZmluZSkgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUgICAvLyBwcmVzZW50IHdpdGggYW4gQU1EIGxvYWRlclxuKTtcbiIsIi8vIEEgSmF2YXNjcmlwdCBpbXBsZW1lbnRhaW9uIG9mIHRoZSBcInhvcjEyOFwiIHBybmcgYWxnb3JpdGhtIGJ5XG4vLyBHZW9yZ2UgTWFyc2FnbGlhLiAgU2VlIGh0dHA6Ly93d3cuanN0YXRzb2Z0Lm9yZy92MDgvaTE0L3BhcGVyXG5cbihmdW5jdGlvbihnbG9iYWwsIG1vZHVsZSwgZGVmaW5lKSB7XG5cbmZ1bmN0aW9uIFhvckdlbihzZWVkKSB7XG4gIHZhciBtZSA9IHRoaXMsIHN0cnNlZWQgPSAnJztcblxuICBtZS54ID0gMDtcbiAgbWUueSA9IDA7XG4gIG1lLnogPSAwO1xuICBtZS53ID0gMDtcblxuICAvLyBTZXQgdXAgZ2VuZXJhdG9yIGZ1bmN0aW9uLlxuICBtZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHQgPSBtZS54IF4gKG1lLnggPDwgMTEpO1xuICAgIG1lLnggPSBtZS55O1xuICAgIG1lLnkgPSBtZS56O1xuICAgIG1lLnogPSBtZS53O1xuICAgIHJldHVybiBtZS53IF49IChtZS53ID4+PiAxOSkgXiB0IF4gKHQgPj4+IDgpO1xuICB9O1xuXG4gIGlmIChzZWVkID09PSAoc2VlZCB8IDApKSB7XG4gICAgLy8gSW50ZWdlciBzZWVkLlxuICAgIG1lLnggPSBzZWVkO1xuICB9IGVsc2Uge1xuICAgIC8vIFN0cmluZyBzZWVkLlxuICAgIHN0cnNlZWQgKz0gc2VlZDtcbiAgfVxuXG4gIC8vIE1peCBpbiBzdHJpbmcgc2VlZCwgdGhlbiBkaXNjYXJkIGFuIGluaXRpYWwgYmF0Y2ggb2YgNjQgdmFsdWVzLlxuICBmb3IgKHZhciBrID0gMDsgayA8IHN0cnNlZWQubGVuZ3RoICsgNjQ7IGsrKykge1xuICAgIG1lLnggXj0gc3Ryc2VlZC5jaGFyQ29kZUF0KGspIHwgMDtcbiAgICBtZS5uZXh0KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29weShmLCB0KSB7XG4gIHQueCA9IGYueDtcbiAgdC55ID0gZi55O1xuICB0LnogPSBmLno7XG4gIHQudyA9IGYudztcbiAgcmV0dXJuIHQ7XG59XG5cbmZ1bmN0aW9uIGltcGwoc2VlZCwgb3B0cykge1xuICB2YXIgeGcgPSBuZXcgWG9yR2VuKHNlZWQpLFxuICAgICAgc3RhdGUgPSBvcHRzICYmIG9wdHMuc3RhdGUsXG4gICAgICBwcm5nID0gZnVuY3Rpb24oKSB7IHJldHVybiAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwOyB9O1xuICBwcm5nLmRvdWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIGRvIHtcbiAgICAgIHZhciB0b3AgPSB4Zy5uZXh0KCkgPj4+IDExLFxuICAgICAgICAgIGJvdCA9ICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDAsXG4gICAgICAgICAgcmVzdWx0ID0gKHRvcCArIGJvdCkgLyAoMSA8PCAyMSk7XG4gICAgfSB3aGlsZSAocmVzdWx0ID09PSAwKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBwcm5nLmludDMyID0geGcubmV4dDtcbiAgcHJuZy5xdWljayA9IHBybmc7XG4gIGlmIChzdGF0ZSkge1xuICAgIGlmICh0eXBlb2Yoc3RhdGUpID09ICdvYmplY3QnKSBjb3B5KHN0YXRlLCB4Zyk7XG4gICAgcHJuZy5zdGF0ZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29weSh4Zywge30pOyB9XG4gIH1cbiAgcmV0dXJuIHBybmc7XG59XG5cbmlmIChtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBpbXBsO1xufSBlbHNlIGlmIChkZWZpbmUgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBpbXBsOyB9KTtcbn0gZWxzZSB7XG4gIHRoaXMueG9yMTI4ID0gaW1wbDtcbn1cblxufSkoXG4gIHRoaXMsXG4gICh0eXBlb2YgbW9kdWxlKSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUsICAgIC8vIHByZXNlbnQgaW4gbm9kZS5qc1xuICAodHlwZW9mIGRlZmluZSkgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUgICAvLyBwcmVzZW50IHdpdGggYW4gQU1EIGxvYWRlclxuKTtcblxuXG4iLCIvLyBBIEphdmFzY3JpcHQgaW1wbGVtZW50YWlvbiBvZiB0aGUgXCJUeWNoZS1pXCIgcHJuZyBhbGdvcml0aG0gYnlcbi8vIFNhbXVlbCBOZXZlcyBhbmQgRmlsaXBlIEFyYXVqby5cbi8vIFNlZSBodHRwczovL2VkZW4uZGVpLnVjLnB0L35zbmV2ZXMvcHVicy8yMDExLXNuZmEyLnBkZlxuXG4oZnVuY3Rpb24oZ2xvYmFsLCBtb2R1bGUsIGRlZmluZSkge1xuXG5mdW5jdGlvbiBYb3JHZW4oc2VlZCkge1xuICB2YXIgbWUgPSB0aGlzLCBzdHJzZWVkID0gJyc7XG5cbiAgLy8gU2V0IHVwIGdlbmVyYXRvciBmdW5jdGlvbi5cbiAgbWUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBiID0gbWUuYiwgYyA9IG1lLmMsIGQgPSBtZS5kLCBhID0gbWUuYTtcbiAgICBiID0gKGIgPDwgMjUpIF4gKGIgPj4+IDcpIF4gYztcbiAgICBjID0gKGMgLSBkKSB8IDA7XG4gICAgZCA9IChkIDw8IDI0KSBeIChkID4+PiA4KSBeIGE7XG4gICAgYSA9IChhIC0gYikgfCAwO1xuICAgIG1lLmIgPSBiID0gKGIgPDwgMjApIF4gKGIgPj4+IDEyKSBeIGM7XG4gICAgbWUuYyA9IGMgPSAoYyAtIGQpIHwgMDtcbiAgICBtZS5kID0gKGQgPDwgMTYpIF4gKGMgPj4+IDE2KSBeIGE7XG4gICAgcmV0dXJuIG1lLmEgPSAoYSAtIGIpIHwgMDtcbiAgfTtcblxuICAvKiBUaGUgZm9sbG93aW5nIGlzIG5vbi1pbnZlcnRlZCB0eWNoZSwgd2hpY2ggaGFzIGJldHRlciBpbnRlcm5hbFxuICAgKiBiaXQgZGlmZnVzaW9uLCBidXQgd2hpY2ggaXMgYWJvdXQgMjUlIHNsb3dlciB0aGFuIHR5Y2hlLWkgaW4gSlMuXG4gIG1lLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSA9IG1lLmEsIGIgPSBtZS5iLCBjID0gbWUuYywgZCA9IG1lLmQ7XG4gICAgYSA9IChtZS5hICsgbWUuYiB8IDApID4+PiAwO1xuICAgIGQgPSBtZS5kIF4gYTsgZCA9IGQgPDwgMTYgXiBkID4+PiAxNjtcbiAgICBjID0gbWUuYyArIGQgfCAwO1xuICAgIGIgPSBtZS5iIF4gYzsgYiA9IGIgPDwgMTIgXiBkID4+PiAyMDtcbiAgICBtZS5hID0gYSA9IGEgKyBiIHwgMDtcbiAgICBkID0gZCBeIGE7IG1lLmQgPSBkID0gZCA8PCA4IF4gZCA+Pj4gMjQ7XG4gICAgbWUuYyA9IGMgPSBjICsgZCB8IDA7XG4gICAgYiA9IGIgXiBjO1xuICAgIHJldHVybiBtZS5iID0gKGIgPDwgNyBeIGIgPj4+IDI1KTtcbiAgfVxuICAqL1xuXG4gIG1lLmEgPSAwO1xuICBtZS5iID0gMDtcbiAgbWUuYyA9IDI2NTQ0MzU3NjkgfCAwO1xuICBtZS5kID0gMTM2NzEzMDU1MTtcblxuICBpZiAoc2VlZCA9PT0gTWF0aC5mbG9vcihzZWVkKSkge1xuICAgIC8vIEludGVnZXIgc2VlZC5cbiAgICBtZS5hID0gKHNlZWQgLyAweDEwMDAwMDAwMCkgfCAwO1xuICAgIG1lLmIgPSBzZWVkIHwgMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBTdHJpbmcgc2VlZC5cbiAgICBzdHJzZWVkICs9IHNlZWQ7XG4gIH1cblxuICAvLyBNaXggaW4gc3RyaW5nIHNlZWQsIHRoZW4gZGlzY2FyZCBhbiBpbml0aWFsIGJhdGNoIG9mIDY0IHZhbHVlcy5cbiAgZm9yICh2YXIgayA9IDA7IGsgPCBzdHJzZWVkLmxlbmd0aCArIDIwOyBrKyspIHtcbiAgICBtZS5iIF49IHN0cnNlZWQuY2hhckNvZGVBdChrKSB8IDA7XG4gICAgbWUubmV4dCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvcHkoZiwgdCkge1xuICB0LmEgPSBmLmE7XG4gIHQuYiA9IGYuYjtcbiAgdC5jID0gZi5jO1xuICB0LmQgPSBmLmQ7XG4gIHJldHVybiB0O1xufTtcblxuZnVuY3Rpb24gaW1wbChzZWVkLCBvcHRzKSB7XG4gIHZhciB4ZyA9IG5ldyBYb3JHZW4oc2VlZCksXG4gICAgICBzdGF0ZSA9IG9wdHMgJiYgb3B0cy5zdGF0ZSxcbiAgICAgIHBybmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDA7IH07XG4gIHBybmcuZG91YmxlID0gZnVuY3Rpb24oKSB7XG4gICAgZG8ge1xuICAgICAgdmFyIHRvcCA9IHhnLm5leHQoKSA+Pj4gMTEsXG4gICAgICAgICAgYm90ID0gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMCxcbiAgICAgICAgICByZXN1bHQgPSAodG9wICsgYm90KSAvICgxIDw8IDIxKTtcbiAgICB9IHdoaWxlIChyZXN1bHQgPT09IDApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHBybmcuaW50MzIgPSB4Zy5uZXh0O1xuICBwcm5nLnF1aWNrID0gcHJuZztcbiAgaWYgKHN0YXRlKSB7XG4gICAgaWYgKHR5cGVvZihzdGF0ZSkgPT0gJ29iamVjdCcpIGNvcHkoc3RhdGUsIHhnKTtcbiAgICBwcm5nLnN0YXRlID0gZnVuY3Rpb24oKSB7IHJldHVybiBjb3B5KHhnLCB7fSk7IH1cbiAgfVxuICByZXR1cm4gcHJuZztcbn1cblxuaWYgKG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGltcGw7XG59IGVsc2UgaWYgKGRlZmluZSAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIGltcGw7IH0pO1xufSBlbHNlIHtcbiAgdGhpcy50eWNoZWkgPSBpbXBsO1xufVxuXG59KShcbiAgdGhpcyxcbiAgKHR5cGVvZiBtb2R1bGUpID09ICdvYmplY3QnICYmIG1vZHVsZSwgICAgLy8gcHJlc2VudCBpbiBub2RlLmpzXG4gICh0eXBlb2YgZGVmaW5lKSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZSAgIC8vIHByZXNlbnQgd2l0aCBhbiBBTUQgbG9hZGVyXG4pO1xuXG5cbiIsIi8vIEEgcG9ydCBvZiBhbiBhbGdvcml0aG0gYnkgSm9oYW5uZXMgQmFhZ8O4ZSA8YmFhZ29lQGJhYWdvZS5jb20+LCAyMDEwXG4vLyBodHRwOi8vYmFhZ29lLmNvbS9lbi9SYW5kb21NdXNpbmdzL2phdmFzY3JpcHQvXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbnF1aW5sYW4vYmV0dGVyLXJhbmRvbS1udW1iZXJzLWZvci1qYXZhc2NyaXB0LW1pcnJvclxuLy8gT3JpZ2luYWwgd29yayBpcyB1bmRlciBNSVQgbGljZW5zZSAtXG5cbi8vIENvcHlyaWdodCAoQykgMjAxMCBieSBKb2hhbm5lcyBCYWFnw7hlIDxiYWFnb2VAYmFhZ29lLm9yZz5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vLyBcbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vIFxuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cblxuXG4oZnVuY3Rpb24oZ2xvYmFsLCBtb2R1bGUsIGRlZmluZSkge1xuXG5mdW5jdGlvbiBBbGVhKHNlZWQpIHtcbiAgdmFyIG1lID0gdGhpcywgbWFzaCA9IE1hc2goKTtcblxuICBtZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHQgPSAyMDkxNjM5ICogbWUuczAgKyBtZS5jICogMi4zMjgzMDY0MzY1Mzg2OTYzZS0xMDsgLy8gMl4tMzJcbiAgICBtZS5zMCA9IG1lLnMxO1xuICAgIG1lLnMxID0gbWUuczI7XG4gICAgcmV0dXJuIG1lLnMyID0gdCAtIChtZS5jID0gdCB8IDApO1xuICB9O1xuXG4gIC8vIEFwcGx5IHRoZSBzZWVkaW5nIGFsZ29yaXRobSBmcm9tIEJhYWdvZS5cbiAgbWUuYyA9IDE7XG4gIG1lLnMwID0gbWFzaCgnICcpO1xuICBtZS5zMSA9IG1hc2goJyAnKTtcbiAgbWUuczIgPSBtYXNoKCcgJyk7XG4gIG1lLnMwIC09IG1hc2goc2VlZCk7XG4gIGlmIChtZS5zMCA8IDApIHsgbWUuczAgKz0gMTsgfVxuICBtZS5zMSAtPSBtYXNoKHNlZWQpO1xuICBpZiAobWUuczEgPCAwKSB7IG1lLnMxICs9IDE7IH1cbiAgbWUuczIgLT0gbWFzaChzZWVkKTtcbiAgaWYgKG1lLnMyIDwgMCkgeyBtZS5zMiArPSAxOyB9XG4gIG1hc2ggPSBudWxsO1xufVxuXG5mdW5jdGlvbiBjb3B5KGYsIHQpIHtcbiAgdC5jID0gZi5jO1xuICB0LnMwID0gZi5zMDtcbiAgdC5zMSA9IGYuczE7XG4gIHQuczIgPSBmLnMyO1xuICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gaW1wbChzZWVkLCBvcHRzKSB7XG4gIHZhciB4ZyA9IG5ldyBBbGVhKHNlZWQpLFxuICAgICAgc3RhdGUgPSBvcHRzICYmIG9wdHMuc3RhdGUsXG4gICAgICBwcm5nID0geGcubmV4dDtcbiAgcHJuZy5pbnQzMiA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gKHhnLm5leHQoKSAqIDB4MTAwMDAwMDAwKSB8IDA7IH1cbiAgcHJuZy5kb3VibGUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcHJuZygpICsgKHBybmcoKSAqIDB4MjAwMDAwIHwgMCkgKiAxLjExMDIyMzAyNDYyNTE1NjVlLTE2OyAvLyAyXi01M1xuICB9O1xuICBwcm5nLnF1aWNrID0gcHJuZztcbiAgaWYgKHN0YXRlKSB7XG4gICAgaWYgKHR5cGVvZihzdGF0ZSkgPT0gJ29iamVjdCcpIGNvcHkoc3RhdGUsIHhnKTtcbiAgICBwcm5nLnN0YXRlID0gZnVuY3Rpb24oKSB7IHJldHVybiBjb3B5KHhnLCB7fSk7IH1cbiAgfVxuICByZXR1cm4gcHJuZztcbn1cblxuZnVuY3Rpb24gTWFzaCgpIHtcbiAgdmFyIG4gPSAweGVmYzgyNDlkO1xuXG4gIHZhciBtYXNoID0gZnVuY3Rpb24oZGF0YSkge1xuICAgIGRhdGEgPSBkYXRhLnRvU3RyaW5nKCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBuICs9IGRhdGEuY2hhckNvZGVBdChpKTtcbiAgICAgIHZhciBoID0gMC4wMjUxOTYwMzI4MjQxNjkzOCAqIG47XG4gICAgICBuID0gaCA+Pj4gMDtcbiAgICAgIGggLT0gbjtcbiAgICAgIGggKj0gbjtcbiAgICAgIG4gPSBoID4+PiAwO1xuICAgICAgaCAtPSBuO1xuICAgICAgbiArPSBoICogMHgxMDAwMDAwMDA7IC8vIDJeMzJcbiAgICB9XG4gICAgcmV0dXJuIChuID4+PiAwKSAqIDIuMzI4MzA2NDM2NTM4Njk2M2UtMTA7IC8vIDJeLTMyXG4gIH07XG5cbiAgcmV0dXJuIG1hc2g7XG59XG5cblxuaWYgKG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGltcGw7XG59IGVsc2UgaWYgKGRlZmluZSAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIGltcGw7IH0pO1xufSBlbHNlIHtcbiAgdGhpcy5hbGVhID0gaW1wbDtcbn1cblxufSkoXG4gIHRoaXMsXG4gICh0eXBlb2YgbW9kdWxlKSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUsICAgIC8vIHByZXNlbnQgaW4gbm9kZS5qc1xuICAodHlwZW9mIGRlZmluZSkgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUgICAvLyBwcmVzZW50IHdpdGggYW4gQU1EIGxvYWRlclxuKTtcblxuXG4iLCIvKipcbiAqIEBvdmVydmlldyBDb25zdGFudHMgYW5kIGVudW1zIHVzZWQgYWNyb3NzIEludGVybmV0IFNpbXVsYXRvci5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4vKiBnbG9iYWwgZXhwb3J0cyAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqL1xuZXhwb3J0cy5CSVRTX1BFUl9OSUJCTEUgPSA0O1xuXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqL1xuZXhwb3J0cy5CSVRTX1BFUl9CWVRFID0gODtcblxuLyoqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0XG4gKi9cbmV4cG9ydHMuQklUU19QRVJfS0lMT0JZVEUgPSAxMDI0ICogZXhwb3J0cy5CSVRTX1BFUl9CWVRFO1xuXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqL1xuZXhwb3J0cy5CSVRTX1BFUl9NRUdBQllURSA9IDEwMjQgKiBleHBvcnRzLkJJVFNfUEVSX0tJTE9CWVRFO1xuXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqL1xuZXhwb3J0cy5CSVRTX1BFUl9HSUdBQllURSA9IDEwMjQgKiBleHBvcnRzLkJJVFNfUEVSX01FR0FCWVRFO1xuXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqL1xuZXhwb3J0cy5CSVRTX1BFUl9LSUxPQklUID0gMTAyNDtcblxuLyoqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0XG4gKi9cbmV4cG9ydHMuQklUU19QRVJfTUVHQUJJVCA9IDEwMjQgKiBleHBvcnRzLkJJVFNfUEVSX0tJTE9CSVQ7XG5cbi8qKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdFxuICovXG5leHBvcnRzLkJJVFNfUEVSX0dJR0FCSVQgPSAxMDI0ICogZXhwb3J0cy5CSVRTX1BFUl9NRUdBQklUO1xuXG4vKipcbiAqIFR5cGVzIG9mIG5vZGVzIHRoYXQgY2FuIHNob3cgdXAgaW4gdGhlIHNpbXVsYXRpb24uXG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG5leHBvcnRzLk5vZGVUeXBlID0ge1xuICBDTElFTlQ6ICdjbGllbnQnLFxuICBST1VURVI6ICdyb3V0ZXInXG59O1xuXG4vKipcbiAqIFdoYXQgdHlwZSBvZiBtZXNzYWdlIG1ha2VzIHVwIHRoZSAnYXRvbScgb2YgY29tbXVuaWNhdGlvbiBmb3IgdGhpc1xuICogc2ltdWxhdG9yIG1vZGUgLSBzaW5nbGUtYml0IG1lc3NhZ2VzICh2YXJpYW50IDEpIG9yIHdob2xlIHBhY2tldHMgKHZhcmlhbnRzXG4gKiAyIGFuZCB1cClcbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmV4cG9ydHMuTWVzc2FnZUdyYW51bGFyaXR5ID0ge1xuICBQQUNLRVRTOiAncGFja2V0cycsXG4gIEJJVFM6ICdiaXRzJ1xufTtcblxuLyoqXG4gKiBETlMgbW9kZXMgZm9yIHRoZSBzaW11bGF0b3IuICBPbmx5IGFwcGxpZXMgaW4gdmFyaWFudCAzLCB3aGVuIGNvbm5lY3RpbmdcbiAqIHRvIGEgcm91dGVyLlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuZXhwb3J0cy5EbnNNb2RlID0ge1xuICAvKiogVGhlcmUgaXMgbm8gRE5TIG5vZGUuICBFdmVyeW9uZSBjYW4gc2VlIGV2ZXJ5IG90aGVyIG5vZGUncyBhZGRyZXNzLiAqL1xuICBOT05FOiAnbm9uZScsXG5cbiAgLyoqIE9uZSB1c2VyIGFjdHMgYXMgdGhlIEROUyBub2RlIGF0IGEgdGltZS4gIEV2ZXJ5b25lIGNhbiBzZWUgdGhlaXIgb3duXG4gICAqICBhZGRyZXNzIGFuZCB0aGUgRE5TIG5vZGUncyBhZGRyZXNzLCBidXQgbm90aGluZyBlbHNlLiAqL1xuICBNQU5VQUw6ICdtYW51YWwnLFxuXG4gIC8qKiBBbiBhdXRvbWF0aWMgRE5TIG5vZGUgaXMgYWRkZWQgdG8gdGhlIHNpbXVsYXRpb24uICBOb2RlcyBhcmUgYXV0b21hdGljYWxseVxuICAgKiAgcmVnaXN0ZXJlZCB3aXRoIHRoZSBETlMgb24gY29ubmVjdGlvbi4gKi9cbiAgQVVUT01BVElDOiAnYXV0b21hdGljJ1xufTtcblxuLyoqXG4gKiBFbmNvZGluZ3MgdGhhdCBjYW4gYmUgdXNlZCB0byBpbnRlcnByZXQgYW5kIGRpc3BsYXkgYmluYXJ5IG1lc3NhZ2VzIGluXG4gKiB0aGUgc2ltdWxhdG9yLlxuICogTWFwIHRvIGNsYXNzLW5hbWVzIHRoYXQgY2FuIGJlIGFwcGxpZWQgdG8gcmVsYXRlZCB0YWJsZSByb3dzLlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuZXhwb3J0cy5FbmNvZGluZ1R5cGUgPSB7XG4gIC8qKiBSZW5kZXJzIGVhY2ggY2h1bmsgb2YgYml0cyAodXNpbmcgdmFyaWFibGUgY2h1bmtzaXplKSBpbiBhc2NpaSAqL1xuICBBU0NJSTogJ2FzY2lpJyxcblxuICAvKiogUmVuZGVycyBlYWNoIGNodW5rIG9mIGJpdHMgKHVzaW5nIHZhcmlhYmxlIGNodW5rc2l6ZSkgaW4gZGVjaW1hbCAqL1xuICBERUNJTUFMOiAnZGVjaW1hbCcsXG5cbiAgLyoqIFJlbmRlcnMgZWFjaCBiaW5hcnkgbmliYmxlIGFzIGEgaGV4IGNoYXJhY3Rlci4gKi9cbiAgSEVYQURFQ0lNQUw6ICdoZXhhZGVjaW1hbCcsXG5cbiAgLyoqIEFsbCBwYWNrZXQgZGF0YSBpcyBhY3R1YWxseSBzdG9yZWQgYW5kIG1vdmVkIGFyb3VuZCBpbiBiaW5hcnksIHNvXG4gICAqICB0aGUgJ2JpbmFyeScgZW5jb2RpbmcganVzdCByZXByZXNlbnRzIGFjY2VzcyB0byB0aGF0IHJhdyBkYXRhLiAqL1xuICBCSU5BUlk6ICdiaW5hcnknLFxuXG4gIC8qKiBBbiBlbmNvZGluZyB1c2VkIGVhcmx5IGluIHRoZSBsZXNzb25zIHRvIHNob3cgdGhhdCBiaW5hcnkgaXNuJ3QgYWx3YXlzXG4gICAqICAxcyBhbmQgMHMuICBKdXN0IGxpa2UgYmluYXJ5LCBidXQgcmVwbGFjZXMgMS8wIHdpdGggQS9CLiAqL1xuICBBX0FORF9COiAnYV9hbmRfYidcbn07XG5cbi8qKlxuICogRW51bWVyYXRpb24gb2YgdGFicyBmb3IgbGV2ZWwgY29uZmlndXJhdGlvblxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuZXhwb3J0cy5OZXRTaW1UYWJUeXBlID0ge1xuICBJTlNUUlVDVElPTlM6ICdpbnN0cnVjdGlvbnMnLFxuICBNWV9ERVZJQ0U6ICdteV9kZXZpY2UnLFxuICBST1VURVI6ICdyb3V0ZXInLFxuICBETlM6ICdkbnMnXG59O1xuXG4vKipcbiAqIENvbHVtbiB0eXBlcyB0aGF0IGNhbiBiZSB1c2VkIGFueSB0aW1lIGEgcGFja2V0IGlzIGRpc3BsYXllZCBvbiB0aGUgcGFnZS5cbiAqIFJlbGF0ZWQgdG8gUGFja2V0LkhlYWRlclR5cGUsIGJ1dCBkaWZmZXJlbnQgYmVjYXVzZSB0aGlzIGluY2x1ZGVzIGNvbHVtbnNcbiAqIHRoYXQgYXJlbid0IHBhcnQgb2YgdGhlIGhlYWRlciwgYW5kIGdyb3VwcyB0aGUgcGFja2V0SW5mbyB0b2dldGhlci5cbiAqIE1hcCB0byBjbGFzcy1uYW1lcyB0aGF0IGNhbiBiZSBhcHBsaWVkIHRvIHJlbGF0ZWQgdGFibGUgY2VsbHMuXG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG5leHBvcnRzLlBhY2tldFVJQ29sdW1uVHlwZSA9IHtcbiAgRU5DT0RJTkdfTEFCRUw6ICdlbmNvZGluZ0xhYmVsJyxcbiAgVE9fQUREUkVTUzogJ3RvQWRkcmVzcycsXG4gIEZST01fQUREUkVTUzogJ2Zyb21BZGRyZXNzJyxcbiAgUEFDS0VUX0lORk86ICdwYWNrZXRJbmZvJyxcbiAgTUVTU0FHRTogJ21lc3NhZ2UnXG59O1xuIiwiLyoqXG4gKiBAb3ZlcnZpZXcgSW50ZXJmYWNlIHRvIGRhc2hib2FyZCB1c2VyIGRhdGEgQVBJLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTZWN0aW9uXG4gKiBAcHJvcGVydHkge251bWJlcn0gaWQgLSBTZWN0aW9uJ3MgbnVtZXJpYyBpZGVudGlmaWVyIGluIERhc2hib2FyZC5cbiAqL1xuXG4vLyBUT0RPIChiYnVjaGFuYW4pOiBUaGlzIHdob2xlIGZpbGUgc2hvdWxkIGdvIGF3YXkgd2hlbiB3ZSBoYXZlIGEgc2hhcmVkXG4vLyAgICAgICAgICAgICAgICAgICBKYXZhc2NyaXB0IFVzZXIgb2JqZWN0IHRoYXQgY2FuIGJlIGF2YWlsYWJsZSBvbiBwYWdlIGxvYWQuXG5cbi8qKlxuICogUmVwcmVzZW50cyBhIERhc2hib2FyZCB1c2VyIGFjY291bnQgLSBjb3VsZCBiZSBhIHRlYWNoZXIsIGEgc3R1ZGVudCwgZXRjLlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBEYXNoYm9hcmRVc2VyID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgYXN5bmMgY2FsbCBoYXMgY29tcGxldGVkIHlldC5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLmlzUmVhZHkgPSBmYWxzZTtcblxuICAvKipcbiAgICogUXVldWUgb2YgY2FsbGJhY2tzIHRvIGhpdCB3aGVuIHRoaXMgb2JqZWN0IGdldHMgaW5pdGlhbGl6ZWQuXG4gICAqIEB0eXBlIHtmdW5jdGlvbltdfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy53aGVuUmVhZHlDYWxsYmFja3NfID0gW107XG5cbiAgLyoqXG4gICAqIFVzZXIgSURcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRoaXMuaWQgPSB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFVzZXIgZGlzcGxheSBuYW1lXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLm5hbWUgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSB1c2VyIGlzIGEgc2l0ZSBhZG1pbi5cbiAgICogTk9URTogVGhpcyBzaG91bGQgb25seSBiZSB1c2VkIGluIGEgY29udmVuaWVuY2UvZGlzcGxheSBzZW5zZTsgYW55dGhpbmdcbiAgICogICAgICAgcmVxdWlyaW5nIGFjdHVhbCBzZWN1cml0eSBzaG91bGQgYmUgYXV0aGVudGljYXRlZCB0aHJvdWdoIHRoZSBzZXJ2ZXIsXG4gICAqICAgICAgIGFuZCBub3QgZGVwZW5kIG9uIGNsaWVudCBjb2RlLlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuaXNBZG1pbiA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBMaXN0IG9mIHNlY3Rpb25zIG93bmVkIGJ5IHRoaXMgdXNlci5cbiAgICogQHR5cGUge1NlY3Rpb25bXX1cbiAgICovXG4gIHRoaXMub3duZWRTZWN0aW9ucyA9IFtdO1xufTtcblxuLyoqXG4gKiBAdHlwZSB7RGFzaGJvYXJkVXNlcn1cbiAqIEBwcml2YXRlXG4gKiBAc3RhdGljXG4gKi9cbkRhc2hib2FyZFVzZXIuY3VycmVudFVzZXJfID0gbnVsbDtcblxuLyoqXG4gKiBLaWNrIG9mIGFuIGFzeW5jaHJvbm91cyByZXF1ZXN0IGZvciB0aGUgY3VycmVudCB1c2VyJ3MgZGF0YSwgYW5kIGltbWVkaWF0ZWx5XG4gKiBwYXNzIGJhY2sgYSBwbGFjZWhvbGRlciBvYmplY3QgdGhhdCBoYXMgYSB3aGVuUmVhZHkgbWV0aG9kIG90aGVycyBjYW5cbiAqIHVzZSB0byBndWFyYW50ZWUgdGhlIGRhdGEgaXMgcHJlc2VudC5cbiAqXG4gKiBAcmV0dXJuIHtEYXNoYm9hcmRVc2VyfSB0aGF0IGRvZXNuJ3QgaGF2ZSBpdHMgZGF0YSB5ZXQsIGJ1dCB3aWxsIHNvb24uXG4gKi9cbkRhc2hib2FyZFVzZXIuZ2V0Q3VycmVudFVzZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghRGFzaGJvYXJkVXNlci5jdXJyZW50VXNlcl8pIHtcbiAgICBEYXNoYm9hcmRVc2VyLmN1cnJlbnRVc2VyXyA9IG5ldyBEYXNoYm9hcmRVc2VyKCk7XG4gICAgJC5hamF4KHtcbiAgICAgIHVybDogJy92Mi91c2VyJyxcbiAgICAgIHR5cGU6ICdnZXQnLFxuICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhIC8qLCB0ZXh0U3RhdHVzLCBqcVhIUiovKSB7XG4gICAgICAgIERhc2hib2FyZFVzZXIuY3VycmVudFVzZXJfLmluaXRpYWxpemUoZGF0YSk7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uICgvKmpxWEhSLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93biovKSB7XG4gICAgICAgIERhc2hib2FyZFVzZXIuY3VycmVudFVzZXJfLmluaXRpYWxpemUoe1xuICAgICAgICAgIGlzU2lnbmVkSW46IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBEYXNoYm9hcmRVc2VyLmN1cnJlbnRVc2VyXztcbn07XG5cbi8qKlxuICogTG9hZCBkYXRhIGludG8gdXNlciBmcm9tIGFzeW5jIHJlcXVlc3QsIHdoZW4gcmVhZHkuXG4gKiBAcGFyYW0gZGF0YVxuICovXG5EYXNoYm9hcmRVc2VyLnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5pZCA9IGRhdGEuaWQ7XG4gIHRoaXMubmFtZSA9IGRhdGEubmFtZTtcbiAgdGhpcy5pc0FkbWluID0gKGRhdGEuYWRtaW4gPT09IHRydWUpO1xuICB0aGlzLm93bmVkU2VjdGlvbnMgPSBkYXRhLm93bmVkX3NlY3Rpb25zO1xuICB0aGlzLmlzU2lnbmVkSW4gPSBkYXRhLmlzU2lnbmVkSW4gIT09IGZhbHNlO1xuICB0aGlzLmlzUmVhZHkgPSB0cnVlO1xuXG4gIC8vIENhbGwgYW55IHF1ZXVlZCBjYWxsYmFja3NcbiAgdGhpcy53aGVuUmVhZHlDYWxsYmFja3NfLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgY2FsbGJhY2sodGhpcyk7XG4gIH0uYmluZCh0aGlzKSk7XG4gIHRoaXMud2hlblJlYWR5Q2FsbGJhY2tzXy5sZW5ndGggPSAwO1xufTtcblxuLyoqXG4gKiBQcm92aWRlIGNvZGUgdG8gYmUgY2FsbGVkIHdoZW4gdGhpcyBvYmplY3QgaXMgcmVhZHkgdG8gdXNlXG4gKiBQb3NzaWJsZSBmb3IgaXQgdG8gYmUgY2FsbGVkIGltbWVkaWF0ZWx5LlxuICogQHBhcmFtIHshZnVuY3Rpb259IGNhbGxiYWNrXG4gKi9cbkRhc2hib2FyZFVzZXIucHJvdG90eXBlLndoZW5SZWFkeSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICBpZiAodGhpcy5pc1JlYWR5KSB7XG4gICAgY2FsbGJhY2sodGhpcyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53aGVuUmVhZHlDYWxsYmFja3NfLnB1c2goY2FsbGJhY2spO1xuICB9XG59O1xuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgdGhlIGN1cnJlbnQgdXNlciBvd25zIHRoZSBzZWN0aW9uIHdpdGggdGhlIGdpdmVuIHNlY3Rpb24gSUQuXG4gKiBAcGFyYW0ge251bWJlcn0gc2VjdGlvbklEXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuRGFzaGJvYXJkVXNlci5wcm90b3R5cGUub3duc1NlY3Rpb24gPSBmdW5jdGlvbiAoc2VjdGlvbklEKSB7XG4gIHJldHVybiB0aGlzLm93bmVkU2VjdGlvbnMuc29tZShmdW5jdGlvbiAoc2VjdGlvbikge1xuICAgIHJldHVybiBzZWN0aW9uLmlkID09PSBzZWN0aW9uSUQ7XG4gIH0pO1xufTtcbiIsIi8qKlxuICogQG92ZXJ2aWV3IFV0aWxpdGllcyBmb3IgdmFsaWRhdGluZyBhbmQgcmV0cmlldmluZyBhcmd1bWVudHMgdG8gYSBtZXRob2QuXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1ha2VzIHN1cmUgdGhlIGdpdmVuIGFyZ3VtZW50IGlzIHByb3ZpZGVkIGFuZCBwYXNzZXMgdGhlIHZhbGlkYXRpb24gY2hlY2suXG4gKiBAcGFyYW0gez99IGFyZyAtIHRoZSBhcmd1bWVudCB0byB2YWxpZGF0ZVxuICogQHBhcmFtIHshc3RyaW5nfSBhcmdOYW1lIC0gQXJndW1lbnQgbmFtZSAoZm9yIHVzZWZ1bCBlcnJvciByZXBvcnRpbmcpXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKD8pfSBbdmFsaWRhdG9yXSAtIHZhbGlkYXRpb24gY2hlY2sgdG8gcnVuIG9uIHRoZSBhcmd1bWVudC5cbiAqICAgICAgICBEZWZhdWx0cyB0byBubyBjaGVjayAoYW55dGhpbmcgcGFzc2VzKS5cbiAqIEByZXR1cm5zIHs/fSB0aGUgb3JpZ2luYWwgYXJndW1lbnQuXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IGlmIHRoZSBhcmd1bWVudCBpcyBtaXNzaW5nIG9yIGludmFsaWQuXG4gKi9cbmV4cG9ydHMudmFsaWRhdGVSZXF1aXJlZCA9IGZ1bmN0aW9uIChhcmcsIGFyZ05hbWUsIHZhbGlkYXRvcikge1xuICBpZiAodW5kZWZpbmVkID09PSBhcmcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGFyZ05hbWUgKyAnIGlzIHJlcXVpcmVkLicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWxpZGF0b3IgPT09ICdmdW5jdGlvbicgJiYgIXZhbGlkYXRvcihhcmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IHNldCAnICsgYXJnTmFtZSArICcgdG8gJyArIGFyZyArICcuJyk7XG4gIH1cbiAgcmV0dXJuIGFyZztcbn07XG5cbi8qKlxuICogQWRkcyBhbiBvcHRpb24gZ2V0dGVyIHRvIHRoZSBwcm92aWRlZCBvcHRpb25zIE9iamVjdCB0aGF0IHZhbGlkYXRlc1xuICogdGhlIHBhc3NlZCBhcmd1bWVudHMgYW5kIGNhbiBwcm92aWRlIGRlZmF1bHQgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNPYmplY3QgLSB0aGUgcmF3IG9wdGlvbnMgb2JqZWN0LiAgTWF5IGJlIHBhc3NlZFxuICogICAgICAgIHVuZGVmaW5lZCAoYXMgaW4gYW4gb21pdHRlZCBvcHRpb25zIG9iamVjdCkgYnV0IG11c3Qgbm90IGJlIG51bGxcbiAqICAgICAgICBvciBhIG5vbi1vYmplY3QgdHlwZS4gIE5vdCBtb2RpZmllZC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IHRoYXQgaW5jbHVkZXMgYSBgZ2V0YCBtZXRob2QuICBXaWxsIGJlIGFuIG9iamVjdFxuICogICAgICAgICAgZXZlbiBpZiBvcmlnaW5hbCBvcHRpb25zT2JqZWN0IGFyZ3VtZW50IHdhcyB1bmRlZmluZWQuXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IGlmIGEgbm9uLW9iamVjdCBpcyBwYXNzZWQgdG8gdGhlIGNvbnN0cnVjdG9yLlxuICogQHRocm93cyB7RXJyb3J9IGlmIGV4dGVuZGluZyB0aGUgb2JqZWN0IHdvdWxkIG92ZXJ3cml0ZSBhbiBleGlzdGluZyBwcm9wZXJ0eS5cbiAqL1xuZXhwb3J0cy5leHRlbmRPcHRpb25zT2JqZWN0ID0gZnVuY3Rpb24gKG9wdGlvbnNPYmplY3QpIHtcbiAgLy8gQWxsb3cgYHVuZGVmaW5lZGAgYW5kIGFsbCBvYmplY3RzIGV4Y2VwdCBmb3IgYG51bGxgXG4gIHZhciBpc1VuZGVmaW5lZCA9IChvcHRpb25zT2JqZWN0ID09PSB1bmRlZmluZWQpO1xuICB2YXIgaXNSZWFsT2JqZWN0ID0gKHR5cGVvZiBvcHRpb25zT2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvcHRpb25zT2JqZWN0ICE9PSBudWxsKTtcbiAgaWYgKCEoaXNVbmRlZmluZWQgfHwgaXNSZWFsT2JqZWN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ09wdGlvbnMgb2JqZWN0IG11c3QgYmUgYW4gb2JqZWN0LicpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnNPYmplY3QgJiYgb3B0aW9uc09iamVjdC5oYXNPd25Qcm9wZXJ0eSgnZ2V0JykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBleHRlbmQgb3B0aW9uczsgcHJvcGVydHkgXCJnZXRcIiB3b3VsZCBiZSBvdmVyd3JpdHRlbi4nKTtcbiAgfVxuXG4gIHJldHVybiAkLmV4dGVuZCh7fSwgb3B0aW9uc09iamVjdCwge1xuICAgIC8qKlxuICAgICAqIFJldHJpZXZlIGFuIG9wdGlvbmFsIHZhbHVlIGZyb20gdGhlIG9wdGlvbnMgb2JqZWN0LCBwYXNzaW5nIGl0IHRocm91Z2ggdGhlXG4gICAgICogcHJvdmlkZWQgdmFsaWRhdGlvbiBmdW5jdGlvbiwgYW5kIHJldHVybmluZyB0aGUgZ2l2ZW4gZGVmYXVsdCB2YWx1ZSBpZlxuICAgICAqIHRoZSByZXF1ZXN0ZWQgb3B0aW9uIHdhcyBub3Qgc2V0LlxuICAgICAqIEBwYXJhbSB7IXN0cmluZ30gb3B0aW9uS2V5IC0gbmFtZSBvZiB0aGUgb3B0aW9uIGluIHRoZSByYXcgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbig/KX0gW3ZhbGlkYXRvcl0gLSB2YWxpZGF0aW9uIGNoZWNrIHRvIHJ1biBvbiB0aGUgdmFsdWUsXG4gICAgICogICAgICAgIGlmIGl0IGhhcyBiZWVuIHNldC4gIFNob3VsZCByZXR1cm4gVFJVRSBpZiB2YWxpZCBhbmQgRkFMU0Ugb3RoZXJ3aXNlLlxuICAgICAqICAgICAgICBEZWZhdWx0cyB0byBubyBjaGVjayAoYW55dGhpbmcgcGFzc2VzKS5cbiAgICAgKiBAcGFyYW0gez99IFtkZWZhdWx0VmFsdWVdIC0gV2hhdCB0byByZXR1cm4gaWYgdGhlIG9wdGlvbiB3YXMgbm90IHNldC5cbiAgICAgKiAgICAgICAgRGVmYXVsdHMgdG8gYHVuZGVmaW5lZGAuXG4gICAgICogQHJldHVybnMgez99IFRoZSB2YWx1ZSBvZiB0aGUgb3B0aW9uIGlmIGl0IHdhcyBzZXQsIGFuZCB0aGUgcHJvdmlkZWRcbiAgICAgKiAgICAgICAgICBkZWZhdWx0IHZhbHVlIGlmIGl0IHdhcyBub3Qgc2V0LlxuICAgICAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gaWYgdGhlIHZhbGlkYXRvciBmdW5jdGlvbiByZXR1cm5zIEZBTFNFIHdoZW4gY2FsbGVkXG4gICAgICogICAgICAgICBvbiB0aGUgb3B0aW9uIHZhbHVlLlxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gKG9wdGlvbktleSwgdmFsaWRhdG9yLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIGlmICghb3B0aW9uc09iamVjdCB8fCBvcHRpb25zT2JqZWN0W29wdGlvbktleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHZhbGlkYXRvciA9PT0gJ2Z1bmN0aW9uJyAmJiAhdmFsaWRhdG9yKG9wdGlvbnNPYmplY3Rbb3B0aW9uS2V5XSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IHNldCAnICsgb3B0aW9uS2V5ICsgJyB0byAnICtcbiAgICAgICAgICAgIG9wdGlvbnNPYmplY3Rbb3B0aW9uS2V5XSArICcuJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvcHRpb25zT2JqZWN0W29wdGlvbktleV07XG4gICAgfVxuICB9KTtcbn07XG5cblxuLyoqXG4gKiBWYWxpZGF0b3IgZnVuY3Rpb24gdGhhdCB2ZXJpZmllcyB0aGF0IHRoZSBhcmd1bWVudCBpcyBhIG51bWJlciwgaXNcbiAqIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB6ZXJvLCBhbmQgaXMgbm90IEluZmluaXR5LlxuICogQHBhcmFtIGFyZ1xuICogQHJldHVybnMge2Jvb2xlYW59IFRSVUUgaWYgcHJvdmlkZWQgYXJndW1lbnQgaXMgdmFsaWQuXG4gKiBAc3RhdGljXG4gKi9cbmV4cG9ydHMuaXNQb3NpdGl2ZU5vbmluZmluaXRlTnVtYmVyID0gZnVuY3Rpb24gKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgJiZcbiAgICAgICFpc05hTihhcmcpICYmXG4gICAgICBhcmcgPj0gMCAmJlxuICAgICAgYXJnICE9PSBJbmZpbml0eTtcbn07XG5cbi8qKlxuICogVmFsaWRhdG9yIGZ1bmN0aW9uIHRoYXQgdmVyaWZpZXMgdGhhdCB0aGUgYXJndW1lbnQgaXMgYSBudW1iZXIsIGlzXG4gKiBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gemVybywgYW5kIGlzIG5vdCBJbmZpbml0eS5cbiAqIEBwYXJhbSB7P30gYXJnXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVFJVRSBpZiBwcm92aWRlZCBhcmd1bWVudCBpcyB2YWxpZC5cbiAqIEBzdGF0aWNcbiAqL1xuZXhwb3J0cy5pc0Jvb2xlYW4gPSBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59O1xuXG4vKipcbiAqIFZhbGlkYXRvciBmdW5jdGlvbiB0aGF0IHZlcmlmaWVzIHRoYXQgdGhlIGFyZ3VtZW50IGlzIGEgc3RyaW5nLlxuICogQHBhcmFtIHs/fSBhcmdcbiAqIEByZXR1cm5zIHtib29sZWFufSBUUlVFIGlmIHByb3ZpZGVkIGFyZ3VtZW50IGlzIHZhbGlkLlxuICogQHN0YXRpY1xuICovXG5leHBvcnRzLmlzU3RyaW5nID0gZnVuY3Rpb24gKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59O1xuXG4vKipcbiAqIFZhbGlkYXRvciBmdW5jdGlvbiB0aGF0IHZlcmlmaWVzIHRoZSBhcmd1bWVudCBpcyBhbiBhcnJheS5cbiAqIFN1cmUgdGhpcyBzZWVtcyByZWR1bmRhbnQsIGJ1dCBpbmNsdWRlZCBoZXJlIGZvciBkaXNjb3ZlcmFiaWxpdHkuXG4gKiBAcGFyYW0gez99IGFyZ1xuICogQHJldHVybnMge2Jvb2xlYW59IFRSVUUgaWYgdGhlIHByb3ZpZGVkIGFyZ3VtZW50IGlzIGFuIGFycmF5LlxuICovXG5leHBvcnRzLmlzQXJyYXkgPSBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGFyZyk7XG59O1xuXG4vKipcbiAqIFZhbGlkYXRvciBmdW5jdGlvbiB0aGF0IHZlcmlmaWVzIHRoYXQgYXJndW1lbnQgaXMgYW4gYXJyYXkgb2Ygc3RyaW5ncy5cbiAqIEBwYXJhbSB7P30gYXJnXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVFJVRSBpZiBwcm92aWRlZCBhcmd1bWVudCBpcyBhbiBhcnJheSBhbmQgZXZlcnkgZWxlbWVudFxuICogICAgICAgICAgaW4gdGhlIGFycmF5IGlzIGEgc3RyaW5nLlxuICogQHN0YXRpY1xuICovXG5leHBvcnRzLmlzQXJyYXlPZlN0cmluZ3MgPSBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGFyZykgJiYgYXJnLmV2ZXJ5KGV4cG9ydHMuaXNTdHJpbmcpO1xufTtcbiIsIi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuLyogZ2xvYmFsIHdpbmRvdyAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgT2JzZXJ2YWJsZUV2ZW50ID0gcmVxdWlyZSgnLi9PYnNlcnZhYmxlRXZlbnQnKTtcblxuLy8gSXQgaXMgbW9yZSBhY2N1cmF0ZSB0byB1c2UgcGVyZm9ybWFuY2Uubm93KCksIGJ1dCB3ZSB1c2UgRGF0ZS5ub3coKVxuLy8gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBTYWZhcmkgYW5kIG9sZGVyIGJyb3dzZXJzLiBUaGlzIHNob3VsZCBvbmx5IGNhdXNlXG4vLyBhIHNtYWxsIGVycm9yIGluIHRoZSBkZWx0YVRpbWUgZm9yIHRoZSBpbml0aWFsIGZyYW1lIGFueXdheS5cbi8vIFNlZSBBbHNvOlxuLy8gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZVxuLy8gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvUGVyZm9ybWFuY2Uubm93XG52YXIgd2luZG93Tm93ID0gKHdpbmRvdy5wZXJmb3JtYW5jZSAmJiB3aW5kb3cucGVyZm9ybWFuY2Uubm93KSA/XG4gICAgd2luZG93LnBlcmZvcm1hbmNlLm5vdy5iaW5kKHdpbmRvdy5wZXJmb3JtYW5jZSkgOiBEYXRlLm5vdztcblxuLyoqXG4gKiBIb3cgbWFueSB0aWNrcyB3ZSB0cnkgdG8gZmlyZSBldmVyeSBzZWNvbmQuXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0XG4gKi9cbnZhciBQUkVGRVJSRURfVElDS1NfUEVSX1NFQ09ORCA9IDEwO1xuXG4vKipcbiAqIFByZWNhbGN1bGF0ZWQgbWlsbGlzZWNvbmRzIHBlciB0aWNrLlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdFxuICovXG52YXIgUFJFRkVSUkVEX01TX1BFUl9USUNLID0gKDEwMDAgLyBQUkVGRVJSRURfVElDS1NfUEVSX1NFQ09ORCk7XG5cbi8qKlxuICogUmVuZGVyZWQgZnJhbWVzIHBlciBzZWNvbmQgb24gb2xkZXIgYnJvd3NlcnMgd2hlcmUgd2UgY2FuJ3QgbG9jayB0byB0aGVcbiAqIHJlcGFpbnQgZXZlbnQuXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0XG4gKi9cbnZhciBGQUxMQkFDS19GUFMgPSAzMDtcblxuLyoqXG4gKiBQcmVjYWxjdWxhdGVkIG1pbGxpc2Vjb25kcyBwZXIgZnJhbWUgZm9yIGZhbGxiYWNrIGNhc2VcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqL1xudmFyIEZBTExCQUNLX01TX1BFUl9GUkFNRSA9ICgxMDAwIC8gRkFMTEJBQ0tfRlBTKTtcblxuXG5cbi8qKlxuICogU2ltcGxlIHJ1bi1sb29wIG1hbmFnZXJcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgUnVuTG9vcCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBydW4tbG9vcCB3aWxsIGNvbnRpbnVlIHJ1bm5pbmcuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5lbmFibGVkID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFRyYWNrcyBjdXJyZW50IHRpbWUgYW5kIGRlbHRhIHRpbWUgZm9yIHRoZSB0aWNrIGxvb3AuXG4gICAqIFBhc3NlZCB0byBvYnNlcnZlcnMgd2hlbiBldmVudHMgZmlyZS5cbiAgICogQHR5cGUge1J1bkxvb3AuQ2xvY2t9XG4gICAqL1xuICB0aGlzLnRpY2tDbG9jayA9IG5ldyBSdW5Mb29wLkNsb2NrKCk7XG5cbiAgLyoqXG4gICAqIFRyYWNrcyBjdXJyZW50IHRpbWUgYW5kIGRlbHRhIHRpbWUgZm9yIHRoZSByZW5kZXIgbG9vcC5cbiAgICogUGFzc2VkIHRvIG9ic2VydmVycyB3aGVuIGV2ZW50cyBmaXJlLlxuICAgKiBAdHlwZSB7UnVuTG9vcC5DbG9ja31cbiAgICovXG4gIHRoaXMucmVuZGVyQ2xvY2sgPSBuZXcgUnVuTG9vcC5DbG9jaygpO1xuXG4gIC8qKlxuICAgKiBNZXRob2QgdGhhdCBnZXRzIGNhbGxlZCBvdmVyIGFuZCBvdmVyLCByZWdhcmRsZXNzIG9mIHdoZXRoZXIgTmV0U2ltXG4gICAqIGlzIGluIGZvY3VzIG9yIG5vdC4gIENhbGxlZCBsZXNzIG9mdGVuIHRoYW4gcmVuZGVyKCkuICBDYW4gYmUgc2xvd2VkXG4gICAqIHRvIGFib3V0IG9uY2UgcGVyIHNlY29uZCB3aGVuIE5ldFNpbSBpcyBpbiB0aGUgYmFja2dyb3VuZC5cbiAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy50aWNrXyA9IHRoaXMuYnVpbGRUaWNrTWV0aG9kXygpO1xuXG4gIC8qKlxuICAgKiBNZXRob2QgdGhhdCBnZXRzIGNhbGxlZCBvdmVyIGFuZCBvdmVyIHdoZW4gTmV0U2ltIGlzIHZpc2libGUuICBHZXRzIGFzXG4gICAqIGNsb3NlIHRvIG1heGltdW0gZnJhbWVyYXRlIGFzIHBvc3NpYmxlLiAgQ2FsbGVkIG1vcmUgb2Z0ZW4gdGhhbiB0aWNrKCksIGJ1dFxuICAgKiBjYW4gYmUgcGF1c2VkIGVudGlyZWx5IHdoZW4gTmV0U2ltIGlzIGluIHRoZSBiYWNrZ3JvdW5kLlxuICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnJlbmRlcl8gPSB0aGlzLmJ1aWxkUmVuZGVyTWV0aG9kXygpO1xuXG4gIC8qKiAgQHR5cGUge09ic2VydmFibGVFdmVudH0gKi9cbiAgdGhpcy50aWNrID0gbmV3IE9ic2VydmFibGVFdmVudCgpO1xuXG4gIC8qKiBAdHlwZSB7T2JzZXJ2YWJsZUV2ZW50fSAqL1xuICB0aGlzLnJlbmRlciA9IG5ldyBPYnNlcnZhYmxlRXZlbnQoKTtcbn07XG5cbi8qKlxuICogU2ltcGxlIHRyYWNraW5nIGZvciB0aW1lIHZhbHVlc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cblJ1bkxvb3AuQ2xvY2sgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBUaW1lIHRoZSBjdXJyZW50L21vc3QgcmVjZW50IHRpY2sgc3RhcnRlZCwgaW4gbXMuXG4gICAqIERlcGVuZGluZyBvbiBicm93c2VyIHRoaXMgbWlnaHQgYmUgZXBvY2ggdGltZSBvciB0aW1lIHNpbmNlIGxvYWQgLVxuICAgKiAgdGhlcmVmb3JlLCBkb24ndCB1c2UgZm9yIGFic29sdXRlIHRpbWUhXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLnRpbWUgPSB3aW5kb3dOb3coKTtcblxuICAvKipcbiAgICogVGltZSBpbiBtcyBiZXR3ZWVuIHRoZSBsYXRlc3QvY3VycmVudCB0aWNrIGFuZCB0aGUgcHJldmlvdXMgdGljay5cbiAgICogUHJlY2lzaW9uIGRlcGVuZGVudCBvbiBicm93c2VyIGNhcGFiaWxpdGllcy5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRoaXMuZGVsdGFUaW1lID0gMDtcbn07XG5cblJ1bkxvb3AucHJvdG90eXBlLmJ1aWxkVGlja01ldGhvZF8gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aWNrTWV0aG9kO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRpY2tNZXRob2QgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHNlbGYuZW5hYmxlZCkge1xuICAgICAgdmFyIGN1clRpbWUgPSB3aW5kb3dOb3coKTtcbiAgICAgIHNlbGYudGlja0Nsb2NrLmRlbHRhVGltZSA9IGN1clRpbWUgLSBzZWxmLnRpY2tDbG9jay50aW1lO1xuICAgICAgc2VsZi50aWNrQ2xvY2sudGltZSA9IGN1clRpbWU7XG4gICAgICBzZWxmLnRpY2subm90aWZ5T2JzZXJ2ZXJzKHNlbGYudGlja0Nsb2NrKTtcbiAgICAgIHNldFRpbWVvdXQodGlja01ldGhvZCwgUFJFRkVSUkVEX01TX1BFUl9USUNLIC0gc2VsZi50aWNrQ2xvY2suZGVsdGFUaW1lKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB0aWNrTWV0aG9kO1xufTtcblxuUnVuTG9vcC5wcm90b3R5cGUuYnVpbGRSZW5kZXJNZXRob2RfID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcmVuZGVyTWV0aG9kO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGlmICh3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgcmVuZGVyTWV0aG9kID0gZnVuY3Rpb24gKGhpUmVzVGltZVN0YW1wKSB7XG4gICAgICBpZiAoc2VsZi5lbmFibGVkKSB7XG4gICAgICAgIHNlbGYucmVuZGVyQ2xvY2suZGVsdGFUaW1lID0gaGlSZXNUaW1lU3RhbXAgLSBzZWxmLnJlbmRlckNsb2NrLnRpbWU7XG4gICAgICAgIHNlbGYucmVuZGVyQ2xvY2sudGltZSA9IGhpUmVzVGltZVN0YW1wO1xuICAgICAgICBzZWxmLnJlbmRlci5ub3RpZnlPYnNlcnZlcnMoc2VsZi5yZW5kZXJDbG9jayk7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXJNZXRob2QpO1xuICAgICAgfVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmVuZGVyTWV0aG9kID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNlbGYuZW5hYmxlZCkge1xuICAgICAgICB2YXIgY3VyVGltZSA9IHdpbmRvd05vdygpO1xuICAgICAgICBzZWxmLnJlbmRlckNsb2NrLmRlbHRhVGltZSA9IGN1clRpbWUgLSBzZWxmLnJlbmRlckNsb2NrLnRpbWU7XG4gICAgICAgIHNlbGYucmVuZGVyQ2xvY2sudGltZSA9IGN1clRpbWU7XG4gICAgICAgIHNlbGYucmVuZGVyLm5vdGlmeU9ic2VydmVycyhzZWxmLnJlbmRlckNsb2NrKTtcbiAgICAgICAgc2V0VGltZW91dChyZW5kZXJNZXRob2QsIEZBTExCQUNLX01TX1BFUl9GUkFNRSAtIHNlbGYucmVuZGVyQ2xvY2suZGVsdGFUaW1lKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHJldHVybiByZW5kZXJNZXRob2Q7XG59O1xuXG4vKiogU3RhcnQgdGhlIHJ1biBsb29wIChydW5zIGltbWVkaWF0ZWx5KSAqL1xuUnVuTG9vcC5wcm90b3R5cGUuYmVnaW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW5hYmxlZCA9IHRydWU7XG4gIHRoaXMudGlja0Nsb2NrLnRpbWUgPSB3aW5kb3dOb3coKTtcbiAgdGhpcy5yZW5kZXJDbG9jay50aW1lID0gd2luZG93Tm93KCk7XG4gIHRoaXMudGlja18odGhpcy50aWNrQ2xvY2sudGltZSk7XG4gIHRoaXMucmVuZGVyXyh0aGlzLnJlbmRlckNsb2NrLnRpbWUpO1xufTtcblxuLyoqXG4gKiBTdG9wIHRoZSBydW4gbG9vcFxuICogSWYgaW4gdGhlIG1pZGRsZSBvZiBhIHRpY2ssIHdpbGwgZmluaXNoIHRoZSBjdXJyZW50IHRpY2suXG4gKiBJZiBjYWxsZWQgYnkgYW4gZXZlbnQgYmV0d2VlbiB0aWNrcywgd2lsbCBwcmV2ZW50IHRoZSBuZXh0IHRpY2sgZnJvbSBmaXJpbmcuXG4gKi9cblJ1bkxvb3AucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbmFibGVkID0gZmFsc2U7XG59O1xuIl19
