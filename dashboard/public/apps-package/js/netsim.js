require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/home/ubuntu/staging/apps/build/js/netsim/main.js":[function(require,module,exports){
'use strict';

var appMain = require('../appMain');
var studioApp = require('../StudioApp').singleton;
var NetSim = require('./netsim');

var levels = require('./levels');
var skins = require('./skins');

window.netsimMain = function (options) {
  options.skinsModule = skins;
  options.isEditorless = true;

  var netSim = new NetSim();
  netSim.injectStudioApp(studioApp);
  appMain(netSim, levels, options);
};

},{"../StudioApp":"/home/ubuntu/staging/apps/build/js/StudioApp.js","../appMain":"/home/ubuntu/staging/apps/build/js/appMain.js","./levels":"/home/ubuntu/staging/apps/build/js/netsim/levels.js","./netsim":"/home/ubuntu/staging/apps/build/js/netsim/netsim.js","./skins":"/home/ubuntu/staging/apps/build/js/netsim/skins.js"}],"/home/ubuntu/staging/apps/build/js/netsim/skins.js":[function(require,module,exports){
'use strict';

var skinBase = require('../skins');

exports.load = function (assetUrl, id) {
  var skin = skinBase.load(assetUrl, id);
  return skin;
};

},{"../skins":"/home/ubuntu/staging/apps/build/js/skins.js"}],"/home/ubuntu/staging/apps/build/js/netsim/netsim.js":[function(require,module,exports){
/**
 * @overview Internet Simulator app for Code.org.
 *           This file is the main entry point for the Internet Simulator.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
*/
/* global -Blockly */
/* global sendReport */
/* global confirm */
'use strict';

var utils = require('../utils');
var _ = utils.getLodash();
var i18n = require('./locale');
var ObservableEvent = require('../ObservableEvent');
var RunLoop = require('../RunLoop');
var page = require('./page.html.ejs');
var NetSimAlert = require('./NetSimAlert');
var NetSimConstants = require('./NetSimConstants');
var NetSimUtils = require('./NetSimUtils');
var DashboardUser = require('./DashboardUser');
var NetSimBitLogPanel = require('./NetSimBitLogPanel');
var NetSimLobby = require('./NetSimLobby');
var NetSimLocalClientNode = require('./NetSimLocalClientNode');
var NetSimLogger = require('./NetSimLogger');
var NetSimLogPanel = require('./NetSimLogPanel');
var NetSimRouterLogModal = require('./NetSimRouterLogModal');
var NetSimRouterNode = require('./NetSimRouterNode');
var NetSimSendPanel = require('./NetSimSendPanel');
var NetSimShard = require('./NetSimShard');
var NetSimStatusPanel = require('./NetSimStatusPanel');
var NetSimTabsComponent = require('./NetSimTabsComponent');
var NetSimVisualization = require('./NetSimVisualization');

var DnsMode = NetSimConstants.DnsMode;
var MessageGranularity = NetSimConstants.MessageGranularity;

var logger = NetSimLogger.getSingleton();
var NetSimGlobals = require('./NetSimGlobals');

/**
 * The top-level Internet Simulator controller.
 * @param {StudioApp} studioApp The studioApp instance to build upon.
 */
var NetSim = module.exports = function () {
  /**
   * @type {Object}
   */
  this.skin = null;

  /**
   * @type {NetSimLevelConfiguration}
   */
  this.level = {};

  /**
   * @type {number}
   */
  this.heading = 0;

  /**
   * Current user object which asynchronously grabs the current user's
   * info from the dashboard API.
   * @type {DashboardUser}
   * @private
   */
  this.currentUser_ = DashboardUser.getCurrentUser();

  /**
   * Accessor object for select simulation shard's tables, where an shard
   * is a group of tables shared by a group of users, allowing them to observe
   * a common network state.
   *
   * See en.wikipedia.org/wiki/Instance_dungeon for a popular example of this
   * concept.
   *
   * @type {NetSimShard}
   * @private
   */
  this.shard_ = null;

  /**
   * The local client's node representation within the shard.
   * @type {NetSimLocalClientNode}
   */
  this.myNode = null;

  /**
   * Tick and Render loop manager for the simulator
   * @type {RunLoop}
   * @private
   */
  this.runLoop_ = new RunLoop();

  /**
   * Current chunk size (bytesize)
   * @type {number}
   * @private
   */
  this.chunkSize_ = 8;

  /**
   * The "my device" bitrate in bits per second
   * @type {number}
   * @private
   */
  this.myDeviceBitRate_ = Infinity;

  /**
   * Currently enabled encoding types.
   * @type {EncodingType[]}
   * @private
   */
  this.enabledEncodings_ = [];

  /**
   * Current dns mode.
   * @type {DnsMode}
   * @private
   */
  this.dnsMode_ = DnsMode.NONE;

  // -- Components --
  /**
   * @type {INetSimLogPanel}
   * @private
   */
  this.receivedMessageLog_ = null;

  /**
   * @type {INetSimLogPanel}
   * @private
   */
  this.sentMessageLog_ = null;

  /**
   * Event: Connected to, or disconnected from, a shard.
   * Specifically, added or removed our client node from the shard's node table.
   * @type {ObservableEvent}
   */
  this.shardChange = new ObservableEvent();
  this.shardChange.register(this.onShardChange_.bind(this));

  /**
   * Untyped storage for information about which events we have currently bound.
   * @type {Object}
   */
  this.eventKeys = {};
};

NetSim.prototype.injectStudioApp = function (studioApp) {
  this.studioApp_ = studioApp;
};

/**
 * Called on page load.
 * @param {Object} config
 * @param {Object} config.skin
 * @param {NetSimLevelConfiguration} config.level
 * @param {string} config.rackEnv - development/production/etc.
 * @param {boolean} config.enableShowCode - Always false for NetSim
 * @param {function} config.loadAudio
 * @param {string} config.html - rendered markup to be created inside this method
 */
NetSim.prototype.init = function (config) {
  if (!this.studioApp_) {
    throw new Error("NetSim requires a StudioApp");
  }

  // Set up global singleton for easy access to simulator-wide settings
  NetSimGlobals.setRootControllers(this.studioApp_, this);

  // Remove icon from all NetSim instructions dialogs
  config.skin.staticAvatar = null;
  config.skin.smallStaticAvatar = null;
  config.skin.failureAvatar = null;
  config.skin.winAvatar = null;

  /**
   * Skin for the loaded level
   * @type {Object}
   */
  this.skin = config.skin;

  /**
   * Configuration for the loaded level
   * @type {NetSimLevelConfiguration}
   */
  this.level = NetSimUtils.scrubLevelConfiguration_(config.level);

  /**
   * Current operating environment, used to drive certain configuration.
   * @type {string} one of "development"|"staging"|"test"|"production"
   */
  this.environment = config.rackEnv;

  /**
   * Whether NetSim should subscribe to events using Pusher.
   * @type {boolean}
   */
  this.usePusher = config.usePusher;

  /**
   * The public application key for the Pusher service. (Not used if not using
   * Pusher).
   * @type {string}
   */
  this.pusherApplicationKey = config.pusherApplicationKey;

  /**
   * The strict maximum number of routers per shard.  Note the real maximum
   * may be lower if bounded by addressable space.
   * @type {number}
   */
  this.globalMaxRouters = config.netsimMaxRouters;

  /**
   * Configuration for reporting level completion
   * @type {Object}
   */
  this.reportingInfo_ = config.report;

  config.html = page({
    assetUrl: this.studioApp_.assetUrl,
    data: {
      visualization: '',
      localeDirection: this.studioApp_.localeDirection(),
      controls: require('./controls.html.ejs')({ assetUrl: this.studioApp_.assetUrl })
    },
    hideRunButton: true
  });

  config.enableShowCode = false;
  config.pinWorkspaceToBottom = true;
  config.loadAudio = this.loadAudio_.bind(this);

  // Override certain StudioApp methods - netsim does a lot of configuration
  // itself, because of its nonstandard layout.
  this.studioApp_.configureDom = NetSim.configureDomOverride_.bind(this.studioApp_);
  this.studioApp_.onResize = NetSim.onResizeOverride_.bind(this.studioApp_);

  this.studioApp_.init(config);

  // Create netsim lobby widget in page
  this.currentUser_.whenReady((function () {
    this.initWithUser_(this.currentUser_);
  }).bind(this));

  // Begin the main simulation loop
  this.runLoop_.tick.register(this.tick.bind(this));
  this.runLoop_.begin();
};

/**
 * @param {RunLoop.Clock} clock
 */
NetSim.prototype.tick = function (clock) {
  if (this.isConnectedToShard()) {
    this.myNode.tick(clock);
    this.shard_.tick(clock);
  }
};

/**
 * Pull an identifier from the URL that separates this level's shard from others.
 * @returns {string}
 */
NetSim.prototype.getUniqueLevelKey = function () {
  return location.pathname.substr(1).replace(/\W/g, '-');
};

/**
 * Extracts query parameters from a full URL and returns them as a simple
 * object.
 * @returns {*}
 */
NetSim.prototype.getOverrideShardID = function () {
  var parts = location.search.split('?');
  if (parts.length === 1) {
    return undefined;
  }

  var shardID;
  parts[1].split('&').forEach(function (param) {
    var sides = param.split('=');
    if (sides.length > 1 && sides[0] === 's') {
      shardID = sides[1];
    }
  });
  return shardID;
};

/**
 * @returns {boolean} TRUE if the level is configured to show any tabs.
 */
NetSim.prototype.shouldShowAnyTabs = function () {
  return this.level.showTabs.length > 0;
};

/**
 * Initialization that can happen once we have a user name.
 * Could collapse this back into init if at some point we can guarantee that
 * user name is available on load.
 * @param {DashboardUser} user
 * @private
 */
NetSim.prototype.initWithUser_ = function (user) {
  this.mainContainer_ = $('#netsim');

  // Create log panels according to level configuration
  if (this.level.messageGranularity === MessageGranularity.PACKETS) {
    this.receivedMessageLog_ = new NetSimLogPanel($('#netsim-received'), {
      logTitle: i18n.receivedMessageLog(),
      isMinimized: false,
      hasUnreadMessages: true,
      packetSpec: this.level.clientInitialPacketHeader
    });

    this.sentMessageLog_ = new NetSimLogPanel($('#netsim-sent'), {
      logTitle: i18n.sentMessageLog(),
      isMinimized: true,
      hasUnreadMessages: false,
      packetSpec: this.level.clientInitialPacketHeader
    });
  } else if (this.level.messageGranularity === MessageGranularity.BITS) {
    this.receivedMessageLog_ = new NetSimBitLogPanel($('#netsim-received'), {
      logTitle: i18n.receiveBits(),
      isMinimized: false,
      netsim: this,
      showReadWireButton: true
    });

    this.sentMessageLog_ = new NetSimBitLogPanel($('#netsim-sent'), {
      logTitle: i18n.sentBitsLog(),
      isMinimized: false,
      netsim: this
    });
  }

  this.statusPanel_ = new NetSimStatusPanel($('#netsim-status'), {
    disconnectCallback: this.disconnectFromRemote.bind(this, function () {})
  });

  this.routerLogModal_ = new NetSimRouterLogModal($('#router-log-modal'));

  this.visualization_ = new NetSimVisualization($('#netsim-visualization'), this.runLoop_);

  // Lobby panel: Controls for picking a remote node and connecting to it.
  this.lobby_ = new NetSimLobby($('.lobby-panel'), this, {
    user: user,
    levelKey: this.getUniqueLevelKey(),
    sharedShardSeed: this.getOverrideShardID()
  });

  // Tab panel - contains instructions, my device, router, dns
  if (this.shouldShowAnyTabs()) {
    this.tabs_ = new NetSimTabsComponent($('#netsim-tabs'), this.runLoop_, {
      chunkSizeSliderChangeCallback: this.setChunkSize.bind(this),
      myDeviceBitRateChangeCallback: this.setMyDeviceBitRate.bind(this),
      encodingChangeCallback: this.changeEncodings.bind(this),
      routerBandwidthSliderChangeCallback: this.setRouterBandwidth.bind(this),
      routerBandwidthSliderStopCallback: this.changeRemoteRouterBandwidth.bind(this),
      routerMemorySliderChangeCallback: this.setRouterMemory.bind(this),
      routerMemorySliderStopCallback: this.changeRemoteRouterMemory.bind(this),
      dnsModeChangeCallback: this.changeRemoteDnsMode.bind(this),
      becomeDnsCallback: this.becomeDnsNode.bind(this)
    });
    this.tabs_.attachToRunLoop(this.runLoop_);
  }

  this.sendPanel_ = new NetSimSendPanel($('#netsim-send'), this.level, this);

  this.changeEncodings(this.level.defaultEnabledEncodings);
  this.setChunkSize(this.level.defaultChunkSizeBits);
  this.setMyDeviceBitRate(this.level.defaultBitRateBitsPerSecond);
  this.setRouterBandwidth(this.level.defaultRouterBandwidth);
  this.setRouterMemory(this.level.defaultRouterMemory);
  this.setDnsMode(this.level.defaultDnsMode);
  this.render();

  // Try and gracefully disconnect when closing the window
  window.addEventListener('beforeunload', this.onBeforeUnload_.bind(this));
  window.addEventListener('unload', this.onUnload_.bind(this));
  window.addEventListener('resize', _.debounce(this.updateLayout.bind(this), 250));
};

/**
 * Before-unload handler, used to warn the user (if necessary) of what they
 * are abandoning if they navigate away from the page.
 *
 * This event has some weird special properties and inconsistent behavior
 * across browsers
 *
 * See:
 * https://developer.mozilla.org/en-US/docs/Web/Events/beforeunload
 * http://www.zachleat.com/web/dont-let-the-door-hit-you-onunload-and-onbeforeunload/
 * http://www.hunlock.com/blogs/Mastering_The_Back_Button_With_Javascript
 *
 * @param {Event} event
 * @returns {string|undefined} If we want to warn the user before they leave
 *          the page, this method will return a warning string, which may or
 *          may not actually be used by the browser to present a warning.  If
 *          we don't want to warn the user, this method doesn't return anything.
 * @private
 */
NetSim.prototype.onBeforeUnload_ = function (event) {
  if (window.__TestInterface && window.__TestInterface.ignoreOnBeforeUnload) {
    return;
  }

  // No need to warn about navigating away if the student is not connected,
  // or is still in the lobby.
  if (this.isConnectedToRemote()) {
    event.returnValue = i18n.onBeforeUnloadWarning();
    return i18n.onBeforeUnloadWarning();
  }
};

/**
 * Unload handler.  Used to attempt a clean disconnect from the simulation
 * using synchronous AJAX calls to remove our own rows from remote storage.
 *
 * See:
 * https://developer.mozilla.org/en-US/docs/Web/Events/unload
 *
 * @private
 */
NetSim.prototype.onUnload_ = function () {
  if (this.isConnectedToShard()) {
    this.synchronousDisconnectFromShard_();
  }
};

/**
 * Whether we are currently connected to a netsim shard
 * @returns {boolean}
 */
NetSim.prototype.isConnectedToShard = function () {
  return null !== this.myNode;
};

/**
 * Whether we are currently connected to a shard with the given ID
 * @param {string} shardID
 * @returns {boolean}
 */
NetSim.prototype.isConnectedToShardID = function (shardID) {
  return this.isConnectedToShard() && this.shard_.id === shardID;
};

/**
 * Establishes a new connection to a netsim shard, closing the old one
 * if present.
 * @param {!string} shardID
 * @param {!string} displayName
 */
NetSim.prototype.connectToShard = function (shardID, displayName) {
  if (this.isConnectedToShard()) {
    logger.warn("Auto-closing previous connection...");
    this.disconnectFromShard(this.connectToShard.bind(this, shardID, displayName));
    return;
  }

  this.shard_ = new NetSimShard(shardID, NetSimGlobals.getPubSubConfig());
  this.createMyClientNode_(displayName, (function (err, myNode) {
    this.myNode = myNode;
    this.shardChange.notifyObservers(this.shard_, this.myNode);
  }).bind(this));
};

/**
 * Given a lobby table has already been configured, connects to that table
 * by inserting a row for ourselves into that table and saving the row ID.
 * @param {!string} displayName
 * @param {!NodeStyleCallback} onComplete - result is new local node
 * @private
 */
NetSim.prototype.createMyClientNode_ = function (displayName, onComplete) {
  NetSimLocalClientNode.create(this.shard_, displayName, (function (err, node) {
    if (err) {
      logger.error("Failed to create client node; " + err.message);
      NetSimAlert.error(i18n.createMyClientNodeError());
      onComplete(err, null);
      return;
    }

    node.setLostConnectionCallback((function () {
      NetSimAlert.warn(i18n.alertConnectionReset());
      this.disconnectFromShard();
    }).bind(this));
    node.initializeSimulation(this.sentMessageLog_, this.receivedMessageLog_);
    onComplete(err, node);
  }).bind(this));
};

/**
 * Synchronous disconnect, for use when navigating away from the page
 * @private
 */
NetSim.prototype.synchronousDisconnectFromShard_ = function () {
  this.myNode.stopSimulation();
  this.myNode.synchronousDestroy();
  this.myNode = null;
  // Don't notify observers, this should only be used when navigating away
  // from the page.
};

/**
 * Ends the connection to the netsim shard.
 * @param {NodeStyleCallback} [onComplete]
 */
NetSim.prototype.disconnectFromShard = function (onComplete) {
  onComplete = onComplete || function () {};

  if (!this.isConnectedToShard()) {
    logger.warn("Redundant disconnect call.");
    onComplete(null, null);
    return;
  }

  if (this.isConnectedToRemote()) {
    // Disconnect, from the remote node, and try this again on completion.
    this.disconnectFromRemote(this.disconnectFromShard.bind(this, onComplete));
    return;
  }

  this.myNode.stopSimulation();
  this.myNode.destroy((function (err, result) {
    if (err) {
      logger.warn('Error destroying node:' + err.message);
      // Don't stop disconnecting on an error here; we make a good-faith
      // effort to clean up after ourselves, and let the cleaning system take
      // care of the rest.
    }

    this.myNode = null;
    this.shard_.disconnect();
    this.shard_ = null;
    this.shardChange.notifyObservers(null, null);
    onComplete(err, result);
  }).bind(this));
};

/**
 * @returns {boolean} Whether the local client is connected to a remote node
 */
NetSim.prototype.isConnectedToRemote = function () {
  return this.isConnectedToClient() || this.isConnectedToRouter();
};

/**
 * @returns {NetSimNode} the remote node our client is connected to, or null if
 *          not connected
 */
NetSim.prototype.getConnectedRemoteNode = function () {
  var client = this.getConnectedClient();
  var router = this.getConnectedRouter();
  return client ? client : router;
};

/**
 * @returns {boolean} Whether the local client has a mutual P2P connection to
 *          another client.
 */
NetSim.prototype.isConnectedToClient = function () {
  return !!this.getConnectedClient();
};

/**
 * @returns {NetSimClientNode} the client node our client is connected to, or
 *          null if not connected to another client.
 */
NetSim.prototype.getConnectedClient = function () {
  if (this.isConnectedToShard()) {
    return this.myNode.myRemoteClient;
  }
  return null;
};

/**
 * Whether our client node is connected to a router node.
 * @returns {boolean}
 */
NetSim.prototype.isConnectedToRouter = function () {
  return !!this.getConnectedRouter();
};

/**
 * @returns {NetSimRouterNode} the router node our client is connected to, or
 *          null if not connected to a router.
 */
NetSim.prototype.getConnectedRouter = function () {
  if (this.isConnectedToShard()) {
    return this.myNode.getMyRouter();
  }
  return null;
};

/**
 * Establish a connection between the local client and the given
 * simulated router.
 * @param {number} routerID
 * @param {NodeStyleCallback} onComplete
 */
NetSim.prototype.connectToRouter = function (routerID, onComplete) {
  if (this.isConnectedToRemote()) {
    // Disconnect and try to connect again when we're done.
    logger.warn("Auto-disconnecting from previous router.");
    this.disconnectFromRemote(this.connectToRouter.bind(this, routerID, onComplete));
    return;
  }

  var self = this;
  NetSimRouterNode.get(routerID, this.shard_, function (err, router) {
    if (err) {
      logger.warn('Failed to find router with ID ' + routerID + '; ' + err.message);
      onComplete(err);
      return;
    }

    self.myNode.connectToRouter(router, function (err) {
      if (err) {
        logger.warn('Failed to connect to ' + router.getDisplayName() + '; ' + err.message);
      }
      onComplete(err, router);
    });
  });
};

/**
 * Disconnects our client node from the currently connected remote node.
 * Destroys the shared wire.
 * @param {NodeStyleCallback} [onComplete] optional function to call when
 *        disconnect is complete
 */
NetSim.prototype.disconnectFromRemote = function (onComplete) {
  onComplete = utils.valueOr(onComplete, function () {});
  this.myNode.disconnectRemote(onComplete);
};

/**
 * Asynchronous fetch of the latest message shared between the local
 * node and its connected remote.
 * Used only in simplex & bit-granular mode.
 * @param {!NodeStyleCallback} onComplete
 */
NetSim.prototype.receiveBit = function (onComplete) {
  this.myNode.getLatestMessageOnSimplexWire(onComplete);
};

/**
 * Update encoding-view setting across the whole app.
 *
 * Propagates the change down into relevant child components, possibly
 * including the control that initiated the change; in that case, re-setting
 * the value should be a no-op and safe to do.
 *
 * @param {EncodingType[]} newEncodings
 */
NetSim.prototype.changeEncodings = function (newEncodings) {
  this.enabledEncodings_ = newEncodings;
  if (this.tabs_) {
    this.tabs_.setEncodings(newEncodings);
  }
  this.receivedMessageLog_.setEncodings(newEncodings);
  this.sentMessageLog_.setEncodings(newEncodings);
  this.sendPanel_.setEncodings(newEncodings);
  this.visualization_.setEncodings(newEncodings);
  this.updateLayout();
};

/**
 * Get the currently enabled encoding types.
 * @returns {EncodingType[]}
 */
NetSim.prototype.getEncodings = function () {
  return this.enabledEncodings_;
};

/**
 * Update chunk-size/bytesize setting across the whole app.
 *
 * Propagates the change down into relevant child components, possibly
 * including the control that initiated the change; in that case, re-setting
 * the value should be a no-op and safe to do.
 *
 * @param {number} newChunkSize
 */
NetSim.prototype.setChunkSize = function (newChunkSize) {
  this.chunkSize_ = newChunkSize;
  if (this.tabs_) {
    this.tabs_.setChunkSize(newChunkSize);
  }
  this.receivedMessageLog_.setChunkSize(newChunkSize);
  this.sentMessageLog_.setChunkSize(newChunkSize);
  this.sendPanel_.setChunkSize(newChunkSize);
};

/**
 * Update bitrate for the local device, which affects send-animation speed.
 * @param {number} newBitRate in bits per second
 */
NetSim.prototype.setMyDeviceBitRate = function (newBitRate) {
  this.myDeviceBitRate_ = newBitRate;
  if (this.tabs_) {
    this.tabs_.setMyDeviceBitRate(newBitRate);
  }
  this.sendPanel_.setBitRate(newBitRate);
};

/** @param {number} creationTimestampMs */
NetSim.prototype.setRouterCreationTime = function (creationTimestampMs) {
  if (this.tabs_) {
    this.tabs_.setRouterCreationTime(creationTimestampMs);
  }
};

/**
 * Update router bandwidth across the app.
 *
 * Propagates the change down into relevant child components, possibly including
 * the control that initiated the change; in that case, re-setting the value
 * should be a no-op and safe to do.
 *
 * @param {number} newBandwidth in bits/second
 */
NetSim.prototype.setRouterBandwidth = function (newBandwidth) {
  if (this.tabs_) {
    this.tabs_.setRouterBandwidth(newBandwidth);
  }
};

/**
 * Sets router bandwidth across the simulation, proagating the change to other
 * clients.
 * @param {number} newBandwidth in bits/second
 */
NetSim.prototype.changeRemoteRouterBandwidth = function (newBandwidth) {
  this.setRouterBandwidth(newBandwidth);
  if (this.isConnectedToRouter()) {
    this.getConnectedRouter().setBandwidth(newBandwidth);
  }
};

/**
 * Update router memory across the app.
 *
 * Propagates the change down into relevant child components, possibly including
 * the control that initiated the change; in that case, re-setting the value
 * should be a no-op and safe to do.
 *
 * @param {number} newMemory in bits
 */
NetSim.prototype.setRouterMemory = function (newMemory) {
  if (this.tabs_) {
    this.tabs_.setRouterMemory(newMemory);
  }
};

/**
 * Sets router memory capacity across the simulation, propagating the change
 * to other clients.
 * @param {number} newMemory in bits
 */
NetSim.prototype.changeRemoteRouterMemory = function (newMemory) {
  this.setRouterMemory(newMemory);
  if (this.isConnectedToRouter()) {
    this.getConnectedRouter().setMemory(newMemory);
  }
};

/**
 * Update DNS mode across the whole app.
 *
 * Propagates the change down into relevant child components, possibly
 * including the control that initiated the change; in that case, re-setting
 * the value should be a no-op and safe to do.
 *
 * @param {DnsMode} newDnsMode
 */
NetSim.prototype.setDnsMode = function (newDnsMode) {
  this.dnsMode_ = newDnsMode;
  if (this.tabs_) {
    this.tabs_.setDnsMode(newDnsMode);
  }
  this.visualization_.setDnsMode(newDnsMode);
};

/**
 * Get current DNS mode.
 * @returns {DnsMode}
 */
NetSim.prototype.getDnsMode = function () {
  return this.dnsMode_;
};

/**
 * Sets DNS mode across the whole simulation, propagating the change
 * to other clients.
 * @param {DnsMode} newDnsMode
 */
NetSim.prototype.changeRemoteDnsMode = function (newDnsMode) {
  this.setDnsMode(newDnsMode);
  if (this.isConnectedToRouter()) {
    this.getConnectedRouter().setDnsMode(newDnsMode);
  }
};

/**
 * @param {boolean} isDnsNode
 */
NetSim.prototype.setIsDnsNode = function (isDnsNode) {
  if (this.tabs_) {
    this.tabs_.setIsDnsNode(isDnsNode);
  }

  if (this.isConnectedToRouter()) {
    this.setDnsTableContents(this.getConnectedRouter().getAddressTable());
  }
};

/**
 * @param {number} dnsNodeID
 */
NetSim.prototype.setDnsNodeID = function (dnsNodeID) {
  this.visualization_.setDnsNodeID(dnsNodeID);
};

/**
 * Tells simulation that we want to become the DNS node for our
 * connected router.
 */
NetSim.prototype.becomeDnsNode = function () {
  this.setIsDnsNode(true);
  if (this.myNode && this.myNode.getMyRouter()) {
    // STATE IS THE ROOT OF ALL EVIL
    var myNode = this.myNode;
    var router = myNode.getMyRouter();
    router.dnsNodeID = myNode.entityID;
    router.update();
  }
};

/**
 * @param {Array} tableContents
 */
NetSim.prototype.setDnsTableContents = function (tableContents) {
  if (this.tabs_) {
    this.tabs_.setDnsTableContents(tableContents);
  }
};

/**
 * @param {Array} logData
 */
NetSim.prototype.setRouterLogData = function (logData) {
  if (this.tabs_) {
    this.tabs_.setRouterLogData(logData);
  }
};

/**
 * @param {number} queuedPacketCount
 * @private
 */
NetSim.prototype.setRouterQueuedPacketCount_ = function (queuedPacketCount) {
  if (this.tabs_) {
    this.tabs_.setRouterQueuedPacketCount(queuedPacketCount);
  }
};

/**
 * @param {number} usedMemoryInBits
 * @private
 */
NetSim.prototype.setRouterMemoryInUse_ = function (usedMemoryInBits) {
  if (this.tabs_) {
    this.tabs_.setRouterMemoryInUse(usedMemoryInBits);
  }
};

/**
 * @param {number} dataRateBitsPerSecond
 * @private
 */
NetSim.prototype.setRouterDataRate_ = function (dataRateBitsPerSecond) {
  if (this.tabs_) {
    this.tabs_.setRouterDataRate(dataRateBitsPerSecond);
  }
};

/**
 * Load audio assets for this app
 * TODO (bbuchanan): Ought to pull this into an audio management module
 * @private
 */
NetSim.prototype.loadAudio_ = function () {};

/**
 * Replaces StudioApp.configureDom.
 * Should be bound against StudioApp instance.
 * @param {Object} config Should at least contain
 *   containerId: ID of a parent DOM element for app content
 *   html: Content to put inside #containerId
 * @private
 */
NetSim.configureDomOverride_ = function (config) {
  var container = document.getElementById(config.containerId);
  container.innerHTML = config.html;

  var vizHeight = this.MIN_WORKSPACE_HEIGHT;
  var visualizationColumn = document.getElementById('netsim-leftcol');

  if (config.pinWorkspaceToBottom) {
    document.body.style.overflow = "hidden";
    container.className = container.className + " pin_bottom";
    visualizationColumn.className = visualizationColumn.className + " pin_bottom";
  } else {
    visualizationColumn.style.minHeight = vizHeight + 'px';
    container.style.minHeight = vizHeight + 'px';
  }
};

/**
 * Resize the left column so it pins above the footer.
 */
function resizeLeftColumnToSitAboveFooter() {
  var pinnedLeftColumn = document.querySelector('#netsim-leftcol.pin_bottom');
  if (!pinnedLeftColumn) {
    return;
  }

  var smallFooter = document.querySelector('#page-small-footer .small-footer-base');

  var bottom = 0;
  if (smallFooter) {
    var codeApp = $('#codeApp');
    bottom += $(smallFooter).outerHeight(true);
    // Footer is relative to the document, not codeApp, so we need to
    // remove the codeApp bottom offset to get the correct margin.
    bottom -= parseInt(codeApp.css('bottom'), 10);
  }

  pinnedLeftColumn.style.bottom = bottom + 'px';
}

function resizeFooterToFitToLeftOfContent() {
  var leftColumn = document.querySelector('#netsim-leftcol.pin_bottom');
  var instructions = document.querySelector('.instructions');
  var smallFooter = document.querySelector('#page-small-footer .small-footer-base');

  if (!smallFooter) {
    return;
  }

  var padding = parseInt(window.getComputedStyle(smallFooter)["padding-left"]);

  var boundingWidth;
  if (leftColumn && $(leftColumn).is(':visible')) {
    boundingWidth = leftColumn.getBoundingClientRect().right;
  } else if (instructions && $(instructions).is(':visible')) {
    boundingWidth = instructions.getBoundingClientRect().right;
  }

  smallFooter.style.maxWidth = boundingWidth ? boundingWidth - padding + 'px' : null;
}

var netsimDebouncedResizeFooter = _.debounce(function () {
  resizeFooterToFitToLeftOfContent();
  resizeLeftColumnToSitAboveFooter();
}, 10);

/**
 * Replaces StudioApp.onResize
 * Should be bound against StudioApp instance.
 * @private
 */
NetSim.onResizeOverride_ = function () {
  var div = document.getElementById('appcontainer');
  var divParent = div.parentNode;
  var parentStyle = window.getComputedStyle(divParent);
  var parentWidth = parseInt(parentStyle.width, 10);
  div.style.top = divParent.offsetTop + 'px';
  div.style.width = parentWidth + 'px';

  netsimDebouncedResizeFooter();
};

/**
 * Passthrough to local "static" netsimDebounceResizeFooter method
 */
NetSim.prototype.debouncedResizeFooter = function () {
  netsimDebouncedResizeFooter();
};

/**
 * Re-render parts of the page that can be re-rendered in place.
 */
NetSim.prototype.render = function () {
  if (this.isConnectedToRemote()) {
    var myAddress = this.myNode.getAddress();

    // Swap in 'connected' div
    this.mainContainer_.find('#netsim-disconnected').hide();
    this.mainContainer_.find('#netsim-connected').show();

    // Render right column
    this.sendPanel_.setFromAddress(myAddress);

    // Render left column
    if (this.statusPanel_) {
      this.statusPanel_.render({
        myHostname: this.myNode.getHostname(),
        myAddress: myAddress,
        remoteNodeName: this.getConnectedRemoteNode().getDisplayName(),
        shareLink: this.lobby_.getShareLink()
      });
    }
  } else {
    // Swap in 'disconnected' div
    this.mainContainer_.find('#netsim-disconnected').show();
    this.mainContainer_.find('#netsim-connected').hide();

    // Render lobby
    this.lobby_.render();
  }

  if (this.routerLogModal_) {
    this.routerLogModal_.render();
  }

  this.updateLayout();
};

/**
 * Called whenever the connection notifies us that we've connected to,
 * or disconnected from, a shard.
 * @param {NetSimShard} shard - null if disconnected.
 * @param {NetSimLocalClientNode} localNode - null if disconnected
 * @private
 */
NetSim.prototype.onShardChange_ = function (shard, localNode) {
  // Unregister old handlers
  if (this.eventKeys.registeredWithLocalNode) {
    this.eventKeys.registeredWithLocalNode.remoteChange.unregister(this.eventKeys.remoteChange);
    this.eventKeys.registeredWithLocalNode = null;
  }

  // Register new handlers
  if (localNode) {
    this.eventKeys.remoteChange = localNode.remoteChange.register(this.onRemoteChange_.bind(this));
    this.eventKeys.registeredWithLocalNode = localNode;
  }

  // Update the log viewer's shard reference so it can get current data.
  if (this.routerLogModal_) {
    this.routerLogModal_.setShard(shard);
  }

  // Shard changes almost ALWAYS require a re-render
  this.visualization_.setShard(shard);
  this.visualization_.setLocalNode(localNode);
  this.render();
};

/**
 * Called whenever the local node notifies that we've been connected to,
 * or disconnected from, a router.
 * @param {NetSimWire} wire - null if disconnected.
 * @param {NetSimNode} remoteNode - null if disconnected
 * @private
 */
NetSim.prototype.onRemoteChange_ = function (wire, remoteNode) {
  var routerConnectEvent = remoteNode && remoteNode instanceof NetSimRouterNode;
  var routerDisconnectEvent = !remoteNode && this.eventKeys.registeredWithRouter;

  // Unhook old handlers
  if (this.eventKeys.registeredWithRouter) {
    this.eventKeys.registeredWithRouter.stateChange.unregister(this.eventKeys.routerStateChange);
    this.eventKeys.registeredWithRouter.statsChange.unregister(this.eventKeys.routerStatsChange);
    this.eventKeys.registeredWithRouter.wiresChange.unregister(this.eventKeys.routerWiresChange);
    this.eventKeys.registeredWithRouter.logChange.unregister(this.eventKeys.routerLogChange);
    this.eventKeys.registeredWithRouter = null;
  }

  // Hook up new handlers
  if (routerConnectEvent) {
    this.eventKeys.routerStateChange = remoteNode.stateChange.register(this.onRouterStateChange_.bind(this));
    this.eventKeys.routerStatsChange = remoteNode.statsChange.register(this.onRouterStatsChange_.bind(this));
    this.eventKeys.routerWiresChange = remoteNode.wiresChange.register(this.onRouterWiresChange_.bind(this));
    this.eventKeys.routerLogChange = remoteNode.logChange.register(this.onRouterLogChange_.bind(this));
    this.eventKeys.registeredWithRouter = remoteNode;
  }

  this.render();

  if (routerConnectEvent) {
    this.onRouterConnect_(remoteNode);
  } else if (routerDisconnectEvent) {
    this.onRouterDisconnect_();
  }
};

/**
 * Steps to take when we were not connected to a router and now we are.
 * @param {NetSimRouterNode} router that we are now connected to
 * @private
 */
NetSim.prototype.onRouterConnect_ = function (router) {
  this.onRouterStateChange_(router);
  this.onRouterStatsChange_(router);
  this.setRouterLogData(router.getLog());
  this.routerLogModal_.setRouter(router);
};

/**
 * Steps to take when we were connected to a router and now we are not.
 * @private
 */
NetSim.prototype.onRouterDisconnect_ = function () {
  this.setRouterCreationTime(0);
  this.setRouterQueuedPacketCount_(0);
  this.setRouterMemoryInUse_(0);
  this.setRouterDataRate_(0);
  this.setRouterLogData([]);
  this.routerLogModal_.setRouter(null);
};

/**
 * Local response to router state changing, which may have been triggered
 * locally or remotely.
 * @param {NetSimRouterNode} router
 * @private
 */
NetSim.prototype.onRouterStateChange_ = function (router) {
  var myNode = {};
  if (this.myNode) {
    myNode = this.myNode;
  }

  this.setRouterCreationTime(router.creationTime);
  this.setRouterBandwidth(router.bandwidth);
  this.setRouterMemory(router.memory);
  this.setDnsMode(router.dnsMode);
  this.setDnsNodeID(router.dnsMode === DnsMode.NONE ? undefined : router.dnsNodeID);
  this.setIsDnsNode(router.dnsMode === DnsMode.MANUAL && router.dnsNodeID === myNode.entityID);
};

/**
 * Isolates updates that we should do when a router's stats change, since
 * these happen a lot more often.
 * @param {NetSimRouterNode} router
 * @private
 */
NetSim.prototype.onRouterStatsChange_ = function (router) {
  this.setRouterQueuedPacketCount_(router.getQueuedPacketCount());
  this.setRouterMemoryInUse_(router.getMemoryInUse());
  this.setRouterDataRate_(router.getCurrentDataRate());
};

/**
 * What to do when our connected router's local network changes.
 * @private
 */
NetSim.prototype.onRouterWiresChange_ = function () {
  if (this.isConnectedToRouter()) {
    this.setDnsTableContents(this.getConnectedRouter().getAddressTable());
  }
};

/**
 * What to do when our connected router's logs change.
 * @private
 */
NetSim.prototype.onRouterLogChange_ = function () {
  if (this.isConnectedToRouter()) {
    this.setRouterLogData(this.getConnectedRouter().getLog());
  }
};

/**
 * Kick off an animation that shows the local node setting the state of a
 * simplex wire.
 * @param {"0"|"1"} newState
 */
NetSim.prototype.animateSetWireState = function (newState) {
  this.visualization_.animateSetWireState(newState);
};

/**
 * Kick off an animation that shows the local node reading the state of a
 * simplex wire.
 * @param {"0"|"1"} newState
 */
NetSim.prototype.animateReadWireState = function (newState) {
  this.visualization_.animateReadWireState(newState);
};

/**
 * Specifically, update the layout of the right column when connected,
 * and change how the three panels there (received log, sent log, send controls)
 * share the current vertical space in the viewport.
 *
 * We're trying to use the following rules:
 *
 * 1. The send controls panel is fixed to the bottom of the viewport, and will
 *    size upwards to fit its contents up to a maximum height.
 * 2. The log widgets use the remaining vertical space
 *    a) If only one log widget is open, it fills the vertical space (except
 *       leaves enough room to see the other header)
 *    b) If both log widgets are open, they share the vertical space 50/50
 *    c) If both log widgets are closed, they float at the top of the space.
 */
NetSim.prototype.updateLayout = function () {
  var rightColumn = $('#netsim-rightcol');
  var sendPanel = $('#netsim-send');
  var logWrap = $('#netsim-logs');

  netsimDebouncedResizeFooter();

  if (this.lobby_) {
    this.lobby_.updateLayout();
  }

  if (!rightColumn.is(':visible')) {
    return;
  }

  // Right column wrapper and the send panel are both sized by CSS
  var rightColumnHeight = rightColumn.height();
  var sendPanelHeight = sendPanel.height();
  var logsSharedVerticalSpace = rightColumnHeight - sendPanelHeight;

  var showingSent = !this.sentMessageLog_.isMinimized();
  var showingReceived = !this.receivedMessageLog_.isMinimized();
  if (showingReceived && showingSent) {
    var halfHeight = Math.floor(logsSharedVerticalSpace / 2);
    this.receivedMessageLog_.setHeight(halfHeight);
    this.sentMessageLog_.setHeight(halfHeight);
  } else if (showingReceived) {
    this.receivedMessageLog_.setHeight(Math.floor(logsSharedVerticalSpace - this.sentMessageLog_.getHeight()));
  } else if (showingSent) {
    this.sentMessageLog_.setHeight(Math.floor(logsSharedVerticalSpace - this.receivedMessageLog_.getHeight()));
  }

  // Manually adjust the logwrap to the remaining height
  logWrap.css('height', rightColumnHeight - sendPanelHeight);
};

/**
 * Appropriate steps for when the student hits the "Continue to next level"
 * button.  Should mark the level as complete and navigate to the next level.
 */
NetSim.prototype.completeLevelAndContinue = function () {
  if (this.isConnectedToRemote() && !confirm(i18n.onBeforeUnloadWarning())) {
    return;
  }

  // Avoid multiple simultaneous submissions.
  $('.submitButton').attr('disabled', true);

  sendReport({
    fallbackResponse: this.reportingInfo_.fallback_response,
    callback: this.reportingInfo_.callback,
    app: 'netsim',
    level: this.level.id,
    result: true,
    testResult: 100,
    onComplete: (function (serverResponse) {

      // Re-enable submit button, in case there's nowhere to go.
      $('.submitButton').attr('disabled', false);

      // If there's somewhere to go, disconnect and go!
      if (serverResponse.redirect) {
        if (this.isConnectedToRemote()) {
          this.disconnectFromRemote(function () {
            window.location.href = serverResponse.redirect;
          });
        } else {
          window.location.href = serverResponse.redirect;
        }
      }
    }).bind(this)
  });
};

/**
 * Attempt to reset the simulation shard, kicking all users out and resetting
 * all data.
 */
NetSim.prototype.resetShard = function () {
  if (this.shard_ && confirm(i18n.shardResetConfirmation())) {
    this.shard_.resetEverything((function (err) {
      if (err) {
        logger.error(err);
        NetSimAlert.error(i18n.shardResetError());
        return;
      }
    }).bind(this));
  }
};

},{"../ObservableEvent":"/home/ubuntu/staging/apps/build/js/ObservableEvent.js","../RunLoop":"/home/ubuntu/staging/apps/build/js/RunLoop.js","../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./DashboardUser":"/home/ubuntu/staging/apps/build/js/netsim/DashboardUser.js","./NetSimAlert":"/home/ubuntu/staging/apps/build/js/netsim/NetSimAlert.js","./NetSimBitLogPanel":"/home/ubuntu/staging/apps/build/js/netsim/NetSimBitLogPanel.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimLobby":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLobby.js","./NetSimLocalClientNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLocalClientNode.js","./NetSimLogPanel":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogPanel.js","./NetSimLogger":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogger.js","./NetSimRouterLogModal":"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterLogModal.js","./NetSimRouterNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterNode.js","./NetSimSendPanel":"/home/ubuntu/staging/apps/build/js/netsim/NetSimSendPanel.js","./NetSimShard":"/home/ubuntu/staging/apps/build/js/netsim/NetSimShard.js","./NetSimStatusPanel":"/home/ubuntu/staging/apps/build/js/netsim/NetSimStatusPanel.js","./NetSimTabsComponent":"/home/ubuntu/staging/apps/build/js/netsim/NetSimTabsComponent.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js","./NetSimVisualization":"/home/ubuntu/staging/apps/build/js/netsim/NetSimVisualization.js","./controls.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/controls.html.ejs","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js","./page.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/page.html.ejs"}],"/home/ubuntu/staging/apps/build/js/netsim/page.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
  var msg = require('../locale');
; buf.push('\n\n<div id="rotateContainer" style="background-image: url(', escape((5,  assetUrl('media/turnphone_horizontal.png') )), ')">\n  <div id="rotateText">\n    <p>', escape((7,  msg.rotateText() )), '<br>', escape((7,  msg.orientationLock() )), '</p>\n  </div>\n</div>\n\n');11; var instructions = function() {; buf.push('  <div id="bubble" class="clearfix">\n    <table id="prompt-table">\n      <tr>\n        <td id="prompt-icon-cell">\n          <img id="prompt-icon"/>\n        </td>\n        <td id="prompt-cell">\n          <p id="prompt">\n          </p>\n        </td>\n      </tr>\n    </table>\n    <div id="ani-gif-preview-wrapper">\n      <div id="ani-gif-preview">\n      </div>\n    </div>\n  </div>\n');28; };; buf.push('\n<div id="appcontainer">\n  <!-- Should disable spell-check on all netsim elements -->\n  <div id="netsim" autocapitalize="false" autocorrect="false" autocomplete="false" spellcheck="false">\n\n    <div id="netsim-disconnected">\n      <div class="lobby-panel"></div>\n    </div>\n\n\n    <div id="netsim-connected">\n      <div id="netsim-leftcol">\n        <div class="column-width-limiter">\n\n          <div id="netsim-status"></div>\n\n          <div id="netsim-visualization"></div>\n\n          <div id="netsim-tabs"></div>\n\n        </div>\n      </div>\n\n      <div id="netsim-rightcol">\n        <div id="netsim-logs">\n          <div id="netsim-received"></div>\n          <div id="netsim-sent"></div>\n        </div>\n        <div id="netsim-send"></div>\n      </div>\n    </div>\n\n    <div id="router-log-modal" class="modal fade"></div>\n\n  </div>\n  <div id="footers" dir="', escape((63,  data.localeDirection )), '">\n  </div>\n  <div class="hidden">\n    ');66; instructions(); ; buf.push('\n  </div>\n</div>\n\n<div class="clear"></div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"../locale":"/home/ubuntu/staging/apps/build/js/locale.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/levels.js":[function(require,module,exports){
/*jshint multistr: true */
/**
 * @overview Type documentation for a NetSim level configuration object,
 *           and default values for that object.
 */

'use strict';

var NetSimConstants = require('./NetSimConstants');
var Packet = require('./Packet');
var BITS_PER_NIBBLE = NetSimConstants.BITS_PER_NIBBLE;
var MessageGranularity = NetSimConstants.MessageGranularity;
var DnsMode = NetSimConstants.DnsMode;
var EncodingType = NetSimConstants.EncodingType;
var NetSimTabType = NetSimConstants.NetSimTabType;

/**
 * A level configuration that can be used by NetSim
 * @typedef {Object} NetSimLevelConfiguration
 *
 * @property {string} instructions - Inherited from blockly level configuration.
 *
 * @property {boolean} showClientsInLobby - Whether client nodes should appear
 *           in the lobby list at all.
 *
 * @property {boolean} showRoutersInLobby - Whether router nodes should appear
 *           in the lobby list at all.
 *
 * @property {boolean} canConnectToClients - Whether client nodes are selectable
 *           and can be connected to
 *
 * @property {boolean} canConnectToRouters - Whether router nodes are selectable
 *           and can be connected to
 *
 * @property {boolean} showAddRouterButton - Whether the "Add Router" button
 *           should appear above the lobby list.
 *
 * @property {boolean} showLogBrowserButton - Whether the "Log Browser" is
 *           available in the lobby.
 *
 * @property {MessageGranularity} messageGranularity - Whether the simulator
 *           puts a single bit into storage at a time, or a whole packet.
 *           Should use 'bits' for variant 1 (levels about the coordination
 *           problem), and 'packets' for levels where the coordination problem
 *           is abstracted away.
 *
 * @property {boolean} automaticReceive - Whether the local node will
 *           automatically pick up messages to itself from the message table,
 *           and dump them to the received message log.  If false, some other
 *           method must be used for receiving messages.
 *
 * @property {boolean} broadcastMode - Enabling this option turns "routers"
 *           into "rooms" and makes it so every message sent in the room
 *           will be received by every other person in that room.
 *
 * @property {boolean} connectedRouters - When false (default), each router or
 *           room exists in isolation and will have no contact with other routers
 *           or rooms.  When true, it is possible for messages to travel between
 *           routers, connecting the whole shard.
 *
 * @property {number} minimumExtraHops - Fewest non-destination routers an
 *           inter-router message should try to visit before going to its
 *           destination router.  Number of hops can be lower if network
 *           conditions don't allow it.
 *
 * @property {number} maximumExtraHops - Most non-destination routers an
 *           inter-router message should try to visit before going to its
 *           destination router.
 *
 * @property {AddressHeaderFormat} addressFormat - Specify how many bits wide
 *           an address is within the simulation and how it should be divided
 *           up into a hierarchy. Format resembles IPv4 dot-decimal notation,
 *           but the numbers specify the number of bits for each section.
 *           Examples:
 *           "8.8" - 16-bit address, represented as two 8-bit integers.
 *           "4" - 4 bit address represented as one 4-bit integer.
 *           "8.4" - 12-bit address, represented as an 8-bit integer followed
 *                   by a 4-bit integer
 *            This format will be applied to any "fromAddress" or "toAddress"
 *            header fields in the packet specification, and will determine
 *            how routers assign addresses.
 *
 * @property {number} packetCountBitWidth - How many bits should be allocated
 *           for any "packetIndex" or "packetCount" fields in the packet
 *           specification.
 *
 * @property {Packet.HeaderType[]} routerExpectsPacketHeader - The header format
 *           the router uses to parse incoming packets and figure out where
 *           to route them.
 *
 * @property {Packet.HeaderType[]} clientInitialPacketHeader - The header format
 *           used by the local client node when generating/parsing packets,
 *           which affects the layout of the send panel and log panels.
 *
 * @property {boolean} showHostnameInGraph - If false, student display name
 *           is used in the network graph.  If true, their generated hostname
 *           is displayed.
 *
 * @property {boolean} showAddPacketButton - Whether the "Add Packet" button
 *           should appear in the send widget.
 *
 * @property {boolean} showPacketSizeControl - Whether the packet size slider
 *           should appear in the send widget.
 *
 * @property {number} defaultPacketSizeLimit - Initial maximum packet size.
 *
 * @property {NetSimTabType[]} showTabs - Which tabs should appear beneath the
 *           network visualization.  Does not determine tab order; tabs always
 *           appear in the order "Instructions, My Device, Router, DNS."
 *
 * @property {number} defaultTabIndex - The zero-based index of the tab
 *           that should be active by default, which depends on which tabs
 *           you have enabled.
 *
 * @property {boolean} showPulseRateSlider - Whether the pulse rate slider
 *           is visible on the "My Device" tab.  This control is a different
 *           view on the bitrate, given in seconds-per-pulse; in fact, if both
 *           this and the bitrate slider are visible, dragging one will change
 *           the other.
 *
 * @property {boolean} showMetronome - Whether the metronome should show up on
 *           the "My Device" tab.
 *
 * @property {EncodingType[]} showEncodingControls - Which encodings, (ASCII,
 *           binary, etc.) should have visible controls on the "My Device" tab.
 *
 * @property {EncodingType[]} defaultEnabledEncodings - Which encodings should
 *           be enabled on page load.  Note: An encoding enabled here but not
 *           included in the visible controls will be enabled and cannot be
 *           disabled by the student.
 *
 * @property {boolean} showBitRateControl - Whether the bit rate slider should
 *           be displayed on the "My Device" tab.
 *
 * @property {boolean} lockBitRateControl - Whether the bit rate slider should
 *           be adjustable by the student.
 *
 * @property {number} defaultBitRateBitsPerSecond - Default bit rate on level
 *           load.  Also sets the pulse rate for levels with the metronome.
 *
 * @property {boolean} showChunkSizeControl - Whether the chunk size slider
 *           should be displayed on the "My Device" tab.
 *
 * @property {boolean} lockChunkSizeControl - Whether the chunk size slider
 *           should be adjustable by the student.
 *
 * @property {number} defaultChunkSizeBits- Default chunk size on level load.
 *
 * @property {boolean} showRouterBandwidthControl - Whether students should be
 *           able to see and manipulate the slider that adjusts the router's
 *           max throughput speed.
 *
 * @property {number} defaultRouterBandwidth - How fast the router should be
 *           able to process packets, on initial level load.
 *
 * @property {boolean} showRouterMemoryControl - Whether students should be
 *           able to see and manipulate the slider that adjusts the router's
 *           maximum queue memory.
 *
 * @property {number} defaultRouterMemory - How much data the router packet
 *           queue is able to hold before it starts dropping packets, in bits.
 *
 * @property {number} defaultRandomDropChance - Odds that the router will drop
 *           the packet for no reason while routing it.  Value in range
 *           0 (no drops) to 1 (drop everything)
 *
 * @property {boolean} showDnsModeControl - Whether the DNS mode controls will
 *           be available to the student.
 *
 * @property {DnsMode} defaultDnsMode - Which DNS mode the simulator should
 *           initialize into.
 */

/*
 * Configuration for all levels.
 */
var levels = module.exports = {};

/**
 * A default level configuration so that we can define the others by delta.
 * This default configuration enables everything possible, so other configs
 * should start with this one and disable features.
 * @type {NetSimLevelConfiguration}
 */
levels.custom = {

  // Lobby configuration
  showClientsInLobby: false,
  showRoutersInLobby: false,
  canConnectToClients: false,
  canConnectToRouters: false,
  showAddRouterButton: false,
  showLogBrowserButton: false,

  // Simulator-wide setup
  messageGranularity: MessageGranularity.BITS,
  automaticReceive: false,
  broadcastMode: false,
  connectedRouters: false,
  minimumExtraHops: 0,
  maximumExtraHops: 0,

  // Packet header specification
  addressFormat: '4',
  packetCountBitWidth: 4,
  routerExpectsPacketHeader: [],
  clientInitialPacketHeader: [],

  // Visualization configuration
  showHostnameInGraph: false,

  // Send widget configuration
  showAddPacketButton: false,
  showPacketSizeControl: false,
  defaultPacketSizeLimit: 8192,

  // Tab-panel control
  showTabs: [],
  defaultTabIndex: 0,

  // Instructions tab and its controls
  // Note: Uses the blockly-standard level.instructions value, which should
  //       be localized by the time it gets here.

  // "My Device" tab and its controls
  showPulseRateSlider: false,
  showMetronome: false,
  showEncodingControls: [],
  defaultEnabledEncodings: [],
  showBitRateControl: false,
  lockBitRateControl: false,
  defaultBitRateBitsPerSecond: Infinity,
  showChunkSizeControl: false,
  lockChunkSizeControl: false,
  defaultChunkSizeBits: 8,

  // Router tab and its controls
  showRouterBandwidthControl: false,
  defaultRouterBandwidth: Infinity,
  showRouterMemoryControl: false,
  defaultRouterMemory: Infinity,
  defaultRandomDropChance: 0,

  // DNS tab and its controls
  showDnsModeControl: false,
  defaultDnsMode: DnsMode.NONE
};

/**
 * Special level configuration for use with 'grunt dev' standalone mode.
 * Never used when serving NetSim levels through dashboard.
 * @type {NetSimLevelConfiguration}
 */
levels.playground = {

  // Lobby configuration
  showClientsInLobby: false,
  showRoutersInLobby: true,
  canConnectToClients: false,
  canConnectToRouters: true,
  showAddRouterButton: true,
  showLogBrowserButton: true,

  // Simulator-wide setup
  messageGranularity: MessageGranularity.PACKETS,
  automaticReceive: true,
  broadcastMode: false,
  connectedRouters: false,
  minimumExtraHops: 0,
  maximumExtraHops: 0,

  // Packet header specification
  addressFormat: '4',
  packetCountBitWidth: 4,
  routerExpectsPacketHeader: ['toAddress', 'fromAddress'],
  clientInitialPacketHeader: ['toAddress', 'fromAddress'],

  // Visualization configuration
  showHostnameInGraph: false,

  // Send widget configuration
  showAddPacketButton: false,
  showPacketSizeControl: false,
  defaultPacketSizeLimit: 8192,

  // Tab-panel control
  showTabs: ['instructions', 'my_device', 'router', 'dns'],
  defaultTabIndex: 0,

  // Instructions tab and its controls
  // Note: Uses the blockly-standard level.instructions value, which should
  //       be localized by the time it gets here.

  // "My Device" tab and its controls
  showPulseRateSlider: false,
  showMetronome: false,
  showEncodingControls: ['a_and_b', 'binary', 'hexadecimal', 'decimal', 'ascii'],
  defaultEnabledEncodings: ['a_and_b', 'binary', 'hexadecimal', 'decimal', 'ascii'],
  showBitRateControl: true,
  lockBitRateControl: false,
  defaultBitRateBitsPerSecond: Infinity,
  showChunkSizeControl: true,
  lockChunkSizeControl: false,
  defaultChunkSizeBits: 8,

  // Router tab and its controls
  showRouterBandwidthControl: true,
  defaultRouterBandwidth: Infinity,
  showRouterMemoryControl: true,
  defaultRouterMemory: Infinity,
  defaultRandomDropChance: 0,

  // DNS tab and its controls
  showDnsModeControl: true,
  defaultDnsMode: DnsMode.NONE
};

},{"./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./Packet":"/home/ubuntu/staging/apps/build/js/netsim/Packet.js"}],"/home/ubuntu/staging/apps/build/js/netsim/controls.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('<div id="slider-cell">\n  <img id="spinner" style="visibility: hidden;" src="', escape((2,  assetUrl('media/netsim/loading.gif') )), '" height=15 width=15>\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimVisualization.js":[function(require,module,exports){
/**
 * @overview Top-level controller for the network visualization.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var utils = require('../utils');
var _ = utils.getLodash();
var visualizationMarkup = require('./NetSimVisualization.html.ejs');
var NetSimNodeFactory = require('./NetSimNodeFactory');
var NetSimWire = require('./NetSimWire');
var NetSimVizAutoDnsNode = require('./NetSimVizAutoDnsNode');
var NetSimVizNode = require('./NetSimVizNode');
var NetSimVizSimulationNode = require('./NetSimVizSimulationNode');
var NetSimVizSimulationWire = require('./NetSimVizSimulationWire');
var NetSimVizWire = require('./NetSimVizWire');
var NetSimGlobals = require('./NetSimGlobals');
var tweens = require('./tweens');
var NetSimConstants = require('./NetSimConstants');
var DnsMode = NetSimConstants.DnsMode;
var NodeType = NetSimConstants.NodeType;

/**
 * Whether the blurred visualization background should be shown.
 * @const {boolean}
 */
var SHOW_BACKGROUND = false;

/**
 * Top-level controller for the network visualization.
 *
 * For the most part, the visualization attaches to the raw network state
 * representation (the storage tables) and updates to reflect that state,
 * independent of the rest of the controls on the page.  This separation means
 * that the visualization always has one canonical state to observe.
 *
 * @param {jQuery} rootDiv - The <div> tag within which the visualization
 *        will be created.
 * @param {RunLoop} runLoop - Loop providing tick and render events that the
 *        visualization can hook up to and respond to.
 * @constructor
 */
var NetSimVisualization = module.exports = function (rootDiv, runLoop) {
  /**
   * @private {jQuery}
   */
  this.rootDiv_ = rootDiv;

  // Immediately, drop our SVG canvas and basic groups into the DOM
  this.rootDiv_.html(visualizationMarkup({
    showBackground: SHOW_BACKGROUND
  }));

  /**
   * @private {jQuery}
   */
  this.svgRoot_ = this.rootDiv_.find('svg');

  /**
   * Background group never goes away, so search for it once and cache
   * it here.
   * @private {jQuery}
   */
  this.backgroundGroup_ = this.svgRoot_.find('#background-group');

  /**
   * Foreground group never goes away, so search for it once and cache
   * it here.
   * @private {jQuery}
   */
  this.foregroundGroup_ = this.svgRoot_.find('#foreground-group');

  /**
   * The shard currently being represented.
   * We don't have a shard now, but we register with the connection manager
   * to find out when we have one.
   * @private {NetSimShard}
   */
  this.shard_ = null;

  /**
   * List of VizEntities, which are all the elements that will actually show up
   * in our visualization.
   * @private {NetSimVizElement[]}
   */
  this.elements_ = [];

  /**
   * Reference to the local node viz element, the anchor for the visualization.
   * @type {NetSimVizSimulationNode}
   */
  this.localNode = null;

  /**
   * Width (in svg-units) of visualization
   * @type {number}
   */
  this.visualizationWidth = 300;

  /**
   * Height (in svg-units) of visualization
   * @type {number}
   */
  this.visualizationHeight = 300;

  /**
  * Last known DNS mode, so that new elements can be created with the
  * correct default
  * @type {DnsMode}
  */
  this.dnsMode_ = null;

  /**
   * Reference to visualized auto-DNS node, a fake node (not mapped to the
   * simulation in a normal way) that also lives in our elements_ collection.
   * @type {NetSimVizAutoDnsNode}
   * @private
   */
  this.autoDnsNode_ = null;

  /**
   * Reference to wire between the auto-DNS node and the foreground router.
   * Managed manually so we keep a handle on it, but also lives in the elements_
   * collection.
   * @type {NetSimVizWire}
   * @private
   */
  this.autoDnsWire_ = null;

  /**
   * Event registration information
   * @type {Object}
   */
  this.eventKeys = {};

  /**
   * Last known encodings set, so that new elements can be created with
   * the correct default
   * @type {EncodingType[]}
   */
  this.encodings_ = [];

  // Hook up tick and render methods
  runLoop.tick.register(this.tick.bind(this));
  runLoop.render.register(this.render.bind(this));
};

/**
 * Tick: Update all vizentities, giving them an opportunity to recalculate
 *       their internal state, and remove any dead entities from the
 *       visualization.
 * @param {RunLoop.Clock} clock
 */
NetSimVisualization.prototype.tick = function (clock) {
  // Everyone gets an update
  this.elements_.forEach(function (element) {
    element.tick(clock);
  });

  // Tear out dead entities.
  this.elements_ = this.elements_.filter(function (element) {
    if (element.isDead()) {
      element.getRoot().remove();
      return false;
    }
    return true;
  });
};

/**
 * Render: Let all vizentities "redraw" (or in our case, touch the DOM)
 * @param {RunLoop.Clock} clock
 */
NetSimVisualization.prototype.render = function (clock) {
  this.elements_.forEach(function (element) {
    element.render(clock);
  });
};

/**
 * Change the shard this visualization will source its data from.
 * Re-attaches table change listeners for all the tables we need to monitor.
 * @param {?NetSimShard} newShard - null if disconnected
 */
NetSimVisualization.prototype.setShard = function (newShard) {
  this.shard_ = newShard;

  // If we were registered for shard events, unregister old handlers.
  if (this.eventKeys.registeredWithShard) {
    this.eventKeys.registeredWithShard.nodeTable.tableChange.unregister(this.eventKeys.nodeTable);
    this.eventKeys.registeredWithShard.wireTable.tableChange.unregister(this.eventKeys.wireTable);
    this.eventKeys.registeredWithShard = null;
  }

  // If we have a new shard, register new handlers.
  if (newShard) {
    this.eventKeys.nodeTable = newShard.nodeTable.tableChange.register(this.onNodeTableChange_.bind(this));
    this.eventKeys.wireTable = newShard.wireTable.tableChange.register(this.onWireTableChange_.bind(this));
    this.eventKeys.registeredWithShard = newShard;
  }
};

/**
 * Change which node we consider the 'local node' in the visualization.
 * We go through a special creation process for this node, so that it
 * looks and behaves differently.
 * @param {?NetSimLocalClientNode} newLocalNode - null if disconnected
 */
NetSimVisualization.prototype.setLocalNode = function (newLocalNode) {
  // Unregister old handlers
  if (this.eventKeys.registeredWithLocalNode) {
    this.eventKeys.registeredWithLocalNode.remoteChange.unregister(this.eventKeys.remoteChange);
    this.eventKeys.registeredWithLocalNode = null;
  }

  // Register new handlers
  if (newLocalNode) {
    this.eventKeys.remoteChange = newLocalNode.remoteChange.register(this.onRemoteChange_.bind(this));
    this.eventKeys.registeredWithLocalNode = newLocalNode;
  }

  // Create viznode for local node
  if (newLocalNode) {
    if (this.localNode) {
      this.localNode.configureFrom(newLocalNode);
    } else {
      this.localNode = new NetSimVizSimulationNode(newLocalNode, SHOW_BACKGROUND);
      this.elements_.push(this.localNode);
      this.backgroundGroup_.append(this.localNode.getRoot());
    }
    this.localNode.setIsLocalNode();
  } else {
    if (this.localNode) {
      this.localNode.kill();
      this.localNode = null;
    }
  }
  this.pullElementsToForeground();
};

/**
 * Called whenever the local node notifies that we've been connected to,
 * or disconnected from, a router.
 * @private
 */
NetSimVisualization.prototype.onRemoteChange_ = function () {
  this.pullElementsToForeground();
  this.distributeForegroundNodes();
};

/**
 * Find a particular VizElement in the visualization, by type and ID.
 * @param {function} elementType - constructor of element we're looking for
 * @param {number} entityID - ID, with corresponds to NetSimEntity.entityID
 * @returns {NetSimVizElement} or undefined if not found
 */
NetSimVisualization.prototype.getElementByEntityID = function (elementType, entityID) {
  return _.find(this.elements_, function (element) {
    return element instanceof elementType && element.getCorrespondingEntityId && element.getCorrespondingEntityId() === entityID;
  });
};

/**
 * Gets the set of VizWires directly attached to the given VizNode on
 * the local end for which there are also corresponding VizWires coming
 * from the opposite end. Note that if the VizNode is a router, we
 * consider all attached wires to be reciprocated.
 * @param {NetSimVizSimulationNode} vizNode
 * @returns {Array.<NetSimVizSimulationWire>} the attached wires
 */
NetSimVisualization.prototype.getReciprocatedWiresAttachedToNode = function (vizNode) {

  if (vizNode.isRouter) {
    return this.getWiresAttachedToNode(vizNode);
  }

  var localWires = this.getLocalWiresAttachedToNode(vizNode);

  return localWires.filter(function (localWire) {

    if (localWire.remoteVizNode.isRouter) {
      return true;
    }

    return this.getWiresAttachedToNode(localWire.remoteVizNode).some(function (wire) {
      return wire.remoteVizNode === vizNode;
    });
  }, this);
};

/**
 * Gets the set of VizWires directly attached to the given VizNode on the local end
 * @param {NetSimVizSimulationNode} vizNode
 * @returns {Array.<NetSimVizSimulationWire>} the attached wires
 */
NetSimVisualization.prototype.getLocalWiresAttachedToNode = function (vizNode) {
  return this.elements_.filter(function (element) {
    return element instanceof NetSimVizWire && element.localVizNode === vizNode;
  });
};

/**
 * Gets the set of VizWires directly attached to the given VizNode, (either
 * on the local end or remote end)
 * @param {NetSimVizSimulationNode} vizNode
 * @returns {Array.<NetSimVizSimulationWire>} the attached wires
 */
NetSimVisualization.prototype.getWiresAttachedToNode = function (vizNode) {
  return this.elements_.filter(function (element) {
    return element instanceof NetSimVizWire && (element.localVizNode === vizNode || element.remoteVizNode === vizNode);
  });
};

/**
 * Handle notification that node table contents have changed.
 * @private
 */
NetSimVisualization.prototype.onNodeTableChange_ = function () {
  // Convert rows to correctly-typed objects
  var tableNodes = NetSimNodeFactory.nodesFromRows(this.shard_, this.shard_.nodeTable.readAll());

  // Update collection of VizNodes from source data
  this.updateVizEntitiesOfType_(NetSimVizSimulationNode, tableNodes, (function (node) {
    var newVizNode = new NetSimVizSimulationNode(node, SHOW_BACKGROUND);
    newVizNode.setDnsMode(this.dnsMode_);
    newVizNode.snapToPosition(Math.random() * this.visualizationWidth - this.visualizationWidth / 2, Math.random() * this.visualizationHeight - this.visualizationHeight / 2);
    return newVizNode;
  }).bind(this));
};

/**
 * Handle notification that wire table contents have changed.
 * @private
 */
NetSimVisualization.prototype.onWireTableChange_ = function () {
  // Convert rows to correctly-typed objects
  var tableWires = this.shard_.wireTable.readAll().map(function (row) {
    return new NetSimWire(this.shard_, row);
  }, this);

  // Update collection of VizWires from source data
  this.updateVizEntitiesOfType_(NetSimVizSimulationWire, tableWires, (function (wire) {
    var newVizWire = new NetSimVizSimulationWire(wire, this.getElementByEntityID.bind(this));
    newVizWire.setEncodings(this.encodings_);
    return newVizWire;
  }).bind(this));

  // In broadcast mode we hide the real wires and router, and overlay a set
  // of fake wires showing everybody connected to everybody else.
  if (NetSimGlobals.getLevelConfig().broadcastMode) {
    this.updateBroadcastModeWires_();
  }

  // Since the wires table determines simulated connectivity, we trigger a
  // recalculation of which nodes are in the local network (should be in the
  // foreground) and then re-layout the foreground nodes.
  this.pullElementsToForeground();
  this.distributeForegroundNodes();
};

/**
 * Based on new connectivity information, recalculate which 'fake' connections
 * we need to display to show all nodes in a 'room' having direct wires to
 * one another.
 * @private
 */
NetSimVisualization.prototype.updateBroadcastModeWires_ = function () {
  // Kill all fake wires
  this.elements_.forEach(function (vizElement) {
    if (vizElement instanceof NetSimVizWire && !(vizElement instanceof NetSimVizSimulationWire)) {
      vizElement.kill();
    }
  }, this);

  // Generate new wires
  var connections = this.generateBroadcastModeConnections_();
  connections.forEach(function (connectedPair) {
    var newFakeWire = new NetSimVizWire(connectedPair.nodeA, connectedPair.nodeB);
    this.addVizElement_(newFakeWire);
  }, this);
};

/**
 * Using the cached node and wire data, generates the set of all node pairs (A,B)
 * on the shard such that both A and B are client nodes, and A is reachable
 * from B.
 * @returns {Array.<{nodeA:{number}, nodeB:{number}}>}
 * @private
 */
NetSimVisualization.prototype.generateBroadcastModeConnections_ = function () {
  var nodeRows = this.shard_.nodeTable.readAll();
  var wireRows = this.shard_.wireTable.readAll();
  var nodeCount = nodeRows.length;

  // Generate a reverse mapping for lookups
  var nodeIDToIndex = {};
  for (var matrixIndex = 0; matrixIndex < nodeCount; matrixIndex++) {
    nodeIDToIndex[nodeRows[matrixIndex].id] = matrixIndex;
  }

  // Generate empty graph matrix initialized with no connections.
  var graph = new Array(nodeCount);
  for (var x = 0; x < nodeCount; x++) {
    graph[x] = new Array(nodeCount);
    for (var y = 0; y < nodeCount; y++) {
      graph[x][y] = false;
    }
  }

  // Apply real connections (wires) to the graph matrix
  wireRows.forEach(function (wireRow) {
    var localNodeIndex = nodeIDToIndex[wireRow.localNodeID];
    var remoteNodeIndex = nodeIDToIndex[wireRow.remoteNodeID];
    if (localNodeIndex !== undefined && remoteNodeIndex !== undefined) {
      graph[localNodeIndex][remoteNodeIndex] = true;
      graph[remoteNodeIndex][localNodeIndex] = true;
    }
  });

  // Use simple Floyd-Warshall to complete the transitive closure graph
  for (var k = 0; k < nodeCount; k++) {
    for (var i = 0; i < nodeCount; i++) {
      for (var j = 0; j < nodeCount; j++) {
        if (graph[i][k] && graph[k][j]) {
          graph[i][j] = true;
        }
      }
    }
  }

  // Now, generate unique pairs doing lookup on our transitive closure graph
  var connections = [];
  for (var from = 0; from < nodeCount - 1; from++) {
    for (var to = from + 1; to < nodeCount; to++) {
      // leave router connections out of this list
      var clientToClient = nodeRows[from].type === NodeType.CLIENT && nodeRows[to].type === NodeType.CLIENT;
      // Must be reachable
      var reachable = graph[from][to];
      if (clientToClient && reachable) {
        connections.push({
          nodeA: this.getElementByEntityID(NetSimVizSimulationNode, nodeRows[from].id),
          nodeB: this.getElementByEntityID(NetSimVizSimulationNode, nodeRows[to].id)
        });
      }
    }
  }
  return connections;
};

/**
 * Compares VizEntities of the given type that are currently in the
 * visualization to the source data given, and creates/updates/removes
 * VizEntities so that the visualization reflects the new source data.
 *
 * @param {function} vizElementType
 * @param {Array.<NetSimEntity>} entityCollection
 * @param {function} creationMethod
 * @private
 */
NetSimVisualization.prototype.updateVizEntitiesOfType_ = function (vizElementType, entityCollection, creationMethod) {

  // 1. Kill VizEntities that are no longer in the source data
  this.killVizEntitiesOfTypeMissingMatch_(vizElementType, entityCollection);

  entityCollection.forEach(function (entity) {
    var vizElement = this.getElementByEntityID(vizElementType, entity.entityID);
    if (vizElement) {
      // 2. Update existing VizEntities from their source data
      vizElement.configureFrom(entity);
    } else {
      // 3. Create new VizEntities for new source data
      this.addVizElement_(creationMethod(entity));
    }
  }, this);
};

/**
 * Call kill() on any vizentities that match the given type and don't map to
 * a NetSimEntity in the provided collection.
 * @param {function} vizElementType
 * @param {Array.<NetSimEntity>} entityCollection
 * @private
 */
NetSimVisualization.prototype.killVizEntitiesOfTypeMissingMatch_ = function (vizElementType, entityCollection) {
  this.elements_.forEach(function (vizElement) {
    var isCorrectType = vizElement instanceof vizElementType;
    var foundMatch = entityCollection.some(function (entity) {
      return vizElement.representsEntity && vizElement.representsEntity(entity);
    });

    if (isCorrectType && !foundMatch) {
      vizElement.kill();
    }
  });
};

/**
 * Adds a VizElement to the visualization.
 * @param {NetSimVizElement} vizElement
 * @private
 */
NetSimVisualization.prototype.addVizElement_ = function (vizElement) {
  this.elements_.push(vizElement);
  this.backgroundGroup_.prepend(vizElement.getRoot());
};

/**
 * If we do need a DOM change, detach the element and reattach it to the new
 * layer. Special rule (for now): Prepend wires so that they show up behind
 * nodes.  Will need a better solution for this if/when the viz gets more
 * complex.
 * @param {NetSimVizElement} vizElement
 * @param {jQuery} newParent
 */
var moveVizElementToGroup = function moveVizElementToGroup(vizElement, newParent) {
  vizElement.getRoot().detach();
  if (vizElement instanceof NetSimVizWire) {
    vizElement.getRoot().prependTo(newParent);
  } else {
    vizElement.getRoot().appendTo(newParent);
  }
};

/**
 * Recalculate which nodes should be in the foreground layer by doing a full
 * traversal starting with the local node.  In short, everything reachable
 * from the local node belongs in the foreground.
 */
NetSimVisualization.prototype.pullElementsToForeground = function () {
  // Begin by marking all entities background (unvisited)
  this.elements_.forEach(function (vizElement) {
    vizElement.visited = false;
  });

  var toExplore = [];
  if (this.localNode) {
    toExplore.push(this.localNode);
  }

  // While there are still nodes that need visiting,
  // visit the next node, marking it as "foreground/visited" and
  // pushing all of its unvisited connections onto the stack.
  var currentVizElement;
  while (toExplore.length > 0) {
    currentVizElement = toExplore.pop();
    currentVizElement.visited = true;
    toExplore = toExplore.concat(this.getUnvisitedNeighborsOf_(currentVizElement));
  }

  // Now, visited nodes belong in the foreground.
  // Move all nodes to their new, correct layers
  // Possible optimization: Can we do this with just one operation on the live DOM?
  var foreground = this.foregroundGroup_;
  var background = this.backgroundGroup_;
  this.elements_.forEach(function (vizElement) {
    var isForeground = $.contains(foreground[0], vizElement.getRoot()[0]);

    // Check whether a change should occur.  If not, we leave
    // newParent undefined so that we don't make unneeded DOM changes.
    if (vizElement.visited && !isForeground) {
      moveVizElementToGroup(vizElement, foreground);
      vizElement.onDepthChange(true);
    } else if (!vizElement.visited && isForeground) {
      moveVizElementToGroup(vizElement, background);
      vizElement.onDepthChange(false);
    }
  }, this);

  this.updateAutoDnsNode();
};

/**
 * Visit method for pullElementsToForeground, not used anywhere else.
 * Notes that the current element is should be foreground when we're all done,
 * finds the current element's unvisited connections,
 * pushes those connections onto the stack.
 * @param {NetSimVizSimulationNode|NetSimVizSimulationWire} vizElement
 * @returns {Array.<NetSimVizElement>}
 * @private
 */
NetSimVisualization.prototype.getUnvisitedNeighborsOf_ = function (vizElement) {
  // Find new entities to explore based on node type and connections
  var neighbors = [];

  if (vizElement instanceof NetSimVizSimulationNode) {

    // In broadcast mode we display "fake," unidirectional wires. In
    // regular mode, we only want to display wires connecting us to
    // nodes that are also connected back.
    if (NetSimGlobals.getLevelConfig().broadcastMode) {
      neighbors = this.getWiresAttachedToNode(vizElement);
    } else {
      neighbors = this.getReciprocatedWiresAttachedToNode(vizElement);
    }

    // Special case: The DNS node fake is a neighbor of a visited router
    if (vizElement.isRouter && this.autoDnsNode_) {
      neighbors.push(this.autoDnsNode_);
      neighbors.push(this.autoDnsWire_);
    }
  } else if (vizElement instanceof NetSimVizWire) {
    if (vizElement.localVizNode) {
      neighbors.push(vizElement.localVizNode);
    }

    if (vizElement.remoteVizNode) {
      neighbors.push(vizElement.remoteVizNode);
    }
  }

  return neighbors.filter(function (vizElement) {
    return !vizElement.visited;
  });
};

/**
 * Explicitly control VizNodes in the foreground, moving them into a desired
 * configuration based on their number and types.  Nodes are given animation
 * commands (via tweenToPosition) so that they interpolate nicely to their target
 * positions.
 *
 * Configurations:
 * One node (local node): Centered on the screen.
 *   |  L  |
 *
 * Two nodes: Local node on left, remote node on right, nothing in the middle.
 *   | L-R |
 *
 * Three or more nodes: Local node on left, router in the middle, other
 * nodes distributed evenly around the router in a circle
 * 3:         4:    O    5:  O      6:O   O    7:O   O
 *                 /         |         \ /        \ /
 *   L-R-0      L-R        L-R-O      L-R        L-R-O
 *                 \         |         / \        / \
 *                  O        O        O   O      O   O
 */
NetSimVisualization.prototype.distributeForegroundNodes = function () {
  if (NetSimGlobals.getLevelConfig().broadcastMode) {
    this.distributeForegroundNodesForBroadcast_();
    return;
  }

  /** @type {Array.<NetSimVizSimulationNode>} */
  var foregroundNodes = this.elements_.filter(function (element) {
    return element instanceof NetSimVizNode && element.isForeground;
  });

  // Sometimes, there's no work to do.
  if (foregroundNodes.length === 0) {
    return;
  }

  // One node: Centered on screen
  if (foregroundNodes.length === 1) {
    foregroundNodes[0].tweenToPosition(0, 0, 600, tweens.easeOutQuad);
    return;
  }

  var myNode;

  // Two nodes: Placed across from each other, local node on left
  if (foregroundNodes.length === 2) {
    myNode = this.localNode;
    var otherNode = _.find(foregroundNodes, function (node) {
      return node !== myNode;
    });
    myNode.tweenToPosition(-75, 0, 400, tweens.easeOutQuad);
    otherNode.tweenToPosition(75, 0, 600, tweens.easeOutQuad);
    return;
  }

  // Three or more nodes:
  // * Local node on left
  // * Router in the middle
  // * Other nodes evenly distributed in a circle
  myNode = this.localNode;
  var routerNode = _.find(foregroundNodes, function (node) {
    return node.isRouter;
  });
  var otherNodes = foregroundNodes.filter(function (node) {
    return node !== myNode && node !== routerNode;
  });

  myNode.tweenToPosition(-100, 0, 400, tweens.easeOutQuad);
  routerNode.tweenToPosition(0, 0, 500, tweens.easeOutQuad);
  var radiansBetweenNodes = 2 * Math.PI / (otherNodes.length + 1); // Include myNode!
  for (var i = 0; i < otherNodes.length; i++) {
    // sin(rad) = o/h
    var h = 100;
    // Extra Math.PI here puts 0deg on the left.
    var rad = Math.PI + (i + 1) * radiansBetweenNodes;
    var x = Math.cos(rad) * h;
    var y = Math.sin(rad) * h;
    otherNodes[i].tweenToPosition(x, y, 600, tweens.easeOutQuad);
  }
};

/**
 * Explicitly control VizNodes in the foreground, moving them into a desired
 * configuration based on their number and types.  Nodes are given animation
 * commands (via tweenToPosition) so that they interpolate nicely to their target
 * positions.
 *
 * Configurations:
 * One node (local node): Centered on the screen.
 *   |  L  |
 *
 * Two nodes: Local node on left, remote node on right, nothing in the middle.
 *   | L-R |
 *
 * Three or more nodes: Distributed around center of frame
 * 3:    O    4:  O      5: O  O    6: O O
 *   L          L   O      L          L   O
 *       O        O         O  O       O O
 */
NetSimVisualization.prototype.distributeForegroundNodesForBroadcast_ = function () {
  /** @type {Array.<NetSimVizSimulationNode>} */
  var foregroundNodes = this.elements_.filter(function (element) {
    return element instanceof NetSimVizSimulationNode && element.isForeground && !element.isRouter;
  });

  // Sometimes, there's no work to do.
  if (foregroundNodes.length === 0) {
    return;
  }

  // One node: Centered on screen
  if (foregroundNodes.length === 1) {
    foregroundNodes[0].tweenToPosition(0, 0, 600, tweens.easeOutQuad);
    return;
  }

  var myNode;

  // Two nodes: Placed across from each other, local node on left
  if (foregroundNodes.length === 2) {
    myNode = this.localNode;
    var otherNode = _.find(foregroundNodes, function (node) {
      return node !== myNode;
    });
    myNode.tweenToPosition(-75, 0, 400, tweens.easeOutQuad);
    otherNode.tweenToPosition(75, 0, 600, tweens.easeOutQuad);
    return;
  }

  // Three or more nodes:
  // * Local node on left
  // * Other nodes evenly distributed in a circle
  myNode = this.localNode;
  var otherNodes = foregroundNodes.filter(function (node) {
    return node !== myNode;
  });

  myNode.tweenToPosition(-100, 0, 400, tweens.easeOutQuad);
  var radiansBetweenNodes = 2 * Math.PI / (otherNodes.length + 1); // Include myNode!
  for (var i = 0; i < otherNodes.length; i++) {
    // sin(rad) = o/h
    var h = 100;
    // Extra Math.PI here puts 0deg on the left.
    var rad = Math.PI + (i + 1) * radiansBetweenNodes;
    var x = Math.cos(rad) * h;
    var y = Math.sin(rad) * h;
    otherNodes[i].tweenToPosition(x, y, 600, tweens.easeOutQuad);
  }
};

/**
 * @param {DnsMode} newDnsMode
 */
NetSimVisualization.prototype.setDnsMode = function (newDnsMode) {

  this.dnsMode_ = newDnsMode;

  // Show/hide the auto-DNS node according to the new state
  if (newDnsMode === DnsMode.AUTOMATIC) {
    this.makeAutoDnsNode();
  } else {
    this.destroyAutoDnsNode();
  }

  // Tell all nodes about the new DNS mode, so they can decide whether to
  // show or hide their address.
  this.elements_.forEach(function (vizElement) {
    if (vizElement instanceof NetSimVizSimulationNode) {
      vizElement.setDnsMode(newDnsMode);
    }
  });

  // Update layering and layout since we just added/removed a node.
  this.pullElementsToForeground();
  this.distributeForegroundNodes();
};

/**
 * If it doesn't already exist, create an auto-DNS node and corresponding
 * wire.
 */
NetSimVisualization.prototype.makeAutoDnsNode = function () {
  if (!this.autoDnsNode_) {
    this.autoDnsNode_ = new NetSimVizAutoDnsNode(SHOW_BACKGROUND);
    this.addVizElement_(this.autoDnsNode_);

    this.autoDnsWire_ = new NetSimVizWire(this.autoDnsNode_, null);
    this.addVizElement_(this.autoDnsWire_);
  }
};

/**
 * Manually update the auto-DNS node and wire to match the foreground router.
 */
NetSimVisualization.prototype.updateAutoDnsNode = function () {
  if (!this.autoDnsNode_) {
    return;
  }

  var foregroundRouterNode = _.find(this.elements_, function (element) {
    return element instanceof NetSimVizSimulationNode && element.isRouter && element.isForeground;
  });

  // Update address to match foreground router
  if (foregroundRouterNode) {
    this.autoDnsNode_.setAddress(foregroundRouterNode.autoDnsAddress);
  }

  // Update wire endpoints
  this.autoDnsWire_.localVizNode = this.autoDnsNode_;
  this.autoDnsWire_.remoteVizNode = foregroundRouterNode;
};

/**
 * Remove the auto-DNS node and wire.
 */
NetSimVisualization.prototype.destroyAutoDnsNode = function () {
  if (this.autoDnsNode_) {
    this.autoDnsNode_.kill();
    this.autoDnsNode_ = null;
  }

  if (this.autoDnsWire_) {
    this.autoDnsWire_.kill();
    this.autoDnsWire_ = null;
  }
};

/**
 * @param {number} dnsNodeID
 */
NetSimVisualization.prototype.setDnsNodeID = function (dnsNodeID) {
  this.elements_.forEach(function (vizElement) {
    if (vizElement instanceof NetSimVizSimulationNode) {
      vizElement.setIsDnsNode(vizElement.getCorrespondingEntityId() === dnsNodeID);
    }
  });
};

/**
 * Update encoding-view setting across the visualization.
 *
 * @param {EncodingType[]} newEncodings
 */
NetSimVisualization.prototype.setEncodings = function (newEncodings) {
  this.encodings_ = newEncodings;
  this.elements_.forEach(function (vizElement) {
    if (vizElement instanceof NetSimVizSimulationWire) {
      vizElement.setEncodings(newEncodings);
    }
  });
};

/**
 * Kick off an animation that will show the state of the simplex wire being
 * set by the local node.
 * @param {"0"|"1"} newState
 */
NetSimVisualization.prototype.animateSetWireState = function (newState) {
  // Assumptions - we are talking about the wire between the local node
  // and its remote partner.
  // This only gets used in peer-to-peer mode, so there should be an incoming
  // wire too, which we should hide.
  // This is a no-op if no such wire exists.
  // We can stop any previous animation on the wire if this is called

  var vizWire = this.getVizWireToRemote();
  var incomingWire = this.getVizWireFromRemote();
  if (!(vizWire && incomingWire)) {
    return;
  }

  // Hide the incoming wire because we are in simplex mode.
  incomingWire.hide();
  // Animate the outgoing wire
  vizWire.animateSetState(newState);
};

/**
 * Kick off an animation that will show the state of the simplex wire being
 * read by the local node.
 * @param {"0"|"1"} newState
 */
NetSimVisualization.prototype.animateReadWireState = function (newState) {
  // Assumes we are in simplex P2P mode and talking about the wire between
  // the local node and its remote partner.  This is a no-op if no such wire
  // exists.  We can stop any previous animation on the wire if this is called.

  var vizWire = this.getVizWireToRemote();
  var incomingWire = this.getVizWireFromRemote();
  if (!(vizWire && incomingWire)) {
    return;
  }

  // Hide the incoming wire because we are in simplex mode.
  incomingWire.hide();
  // Animate the outgoing wire
  vizWire.animateReadState(newState);
};

/**
 * Find the outgoing wire from the local node to a remote node.
 * @returns {NetSimVizSimulationWire|null} null if no outgoing connection is established.
 */
NetSimVisualization.prototype.getVizWireToRemote = function () {
  if (!this.localNode) {
    return null;
  }

  var outgoingWires = this.elements_.filter(function (element) {
    return element instanceof NetSimVizSimulationWire && element.localVizNode === this.localNode;
  }, this);

  if (outgoingWires.length === 0) {
    return null;
  }

  return outgoingWires[0];
};

/**
 * Find the incoming wire from a remote node to the local node.
 * @returns {NetSimVizSimulationWire|null} null if no incoming connection is established.
 */
NetSimVisualization.prototype.getVizWireFromRemote = function () {
  if (!this.localNode) {
    return null;
  }

  var incomingWires = this.elements_.filter(function (element) {
    return element instanceof NetSimVizSimulationWire && element.remoteVizNode === this.localNode;
  }, this);

  if (incomingWires.length === 0) {
    return null;
  }

  return incomingWires[0];
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimNodeFactory":"/home/ubuntu/staging/apps/build/js/netsim/NetSimNodeFactory.js","./NetSimVisualization.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimVisualization.html.ejs","./NetSimVizAutoDnsNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizAutoDnsNode.js","./NetSimVizNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizNode.js","./NetSimVizSimulationNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizSimulationNode.js","./NetSimVizSimulationWire":"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizSimulationWire.js","./NetSimVizWire":"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizWire.js","./NetSimWire":"/home/ubuntu/staging/apps/build/js/netsim/NetSimWire.js","./tweens":"/home/ubuntu/staging/apps/build/js/netsim/tweens.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizSimulationWire.js":[function(require,module,exports){
/**
 * @overview Wires in the visualization that map to simulation entities.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

require('../utils');
var NetSimGlobals = require('./NetSimGlobals');
var NetSimVizNode = require('./NetSimVizNode');
var NetSimVizWire = require('./NetSimVizWire');

/**
 * @param {NetSimWire} sourceWire
 * @param {function} getElementByEntityID - Allows this wire to search
 *        for other entities in the simulation
 * @constructor
 * @augments NetSimVizWire
 */
var NetSimVizSimulationWire = module.exports = function (sourceWire, getElementByEntityId) {
  var localNode = getElementByEntityId(NetSimVizNode, sourceWire.localNodeID);
  var remoteNode = getElementByEntityId(NetSimVizNode, sourceWire.remoteNodeID);
  NetSimVizWire.call(this, localNode, remoteNode);

  /**
   * ID of the NetSimWire that this NetSimVizSimulationWire maps to.
   * @type {number}
   */
  this.correspondingWireId_ = sourceWire.entityID;

  /**
   * UUID of the NetSimWire that this NetSimVizSimulationWire maps to.
   * @type {number}
   */
  this.correspondingWireUuid_ = sourceWire.uuid;

  /**
   * Bound getElementByEntityId method from vizualization controller;
   * we hold on to this so that calls to configureFrom can find nodes later.
   * @type {Function}
   * @private
   */
  this.getElementByEntityId_ = getElementByEntityId;

  this.configureFrom(sourceWire);
  this.render();
};
NetSimVizSimulationWire.inherits(NetSimVizWire);

/**
 * Configuring a wire means looking up the viz nodes that will be its endpoints.
 * @param {NetSimWire} sourceWire
 */
NetSimVizSimulationWire.prototype.configureFrom = function (sourceWire) {
  this.correspondingWireId_ = sourceWire.entityID;
  this.correspondingWireUuid_ = sourceWire.uuid;

  this.localVizNode = this.getElementByEntityId_(NetSimVizNode, sourceWire.localNodeID);
  this.remoteVizNode = this.getElementByEntityId_(NetSimVizNode, sourceWire.remoteNodeID);

  if (this.localVizNode) {
    this.localVizNode.setAddress(sourceWire.localAddress);
  }

  if (this.remoteVizNode) {
    this.remoteVizNode.setAddress(sourceWire.remoteAddress);
  }

  if (NetSimGlobals.getLevelConfig().broadcastMode) {
    this.getRoot().css('display', 'none');
  }
};

/**
 * ID of the NetSimEntity that maps to this visualization element.
 * @returns {number}
 */
NetSimVizSimulationWire.prototype.getCorrespondingEntityId = function () {
  return this.correspondingWireId_;
};

/**
 * @param {NetSimEntity} entity
 * @returns {boolean} TRUE if this VizElement represents the given NetSimEntity.
 */
NetSimVizSimulationWire.prototype.representsEntity = function (entity) {
  return this.correspondingWireId_ === entity.entityID && this.correspondingWireUuid_ === entity.uuid;
};

/**
 * Killing a visualization node removes its ID so that it won't conflict with
 * another viznode of matching ID being added, and begins its exit animation.
 * @override
 */
NetSimVizSimulationWire.prototype.kill = function () {
  NetSimVizSimulationWire.superPrototype.kill.call(this);
  this.correspondingWireId_ = undefined;
  this.correspondingWireUuid_ = undefined;
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimVizNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizNode.js","./NetSimVizWire":"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizWire.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizWire.js":[function(require,module,exports){
/**
 * @overview Wires in the visualization.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

require('../utils');
var jQuerySvgElement = require('./NetSimUtils').jQuerySvgElement;
var NetSimVizElement = require('./NetSimVizElement');
var tweens = require('./tweens');
var DataConverters = require('./DataConverters');
var NetSimConstants = require('./NetSimConstants');

var EncodingType = NetSimConstants.EncodingType;

var binaryToAB = DataConverters.binaryToAB;

/**
 * How far the flying label should rest above the wire.
 * @type {number}
 * @const
 */
var TEXT_FINAL_VERTICAL_OFFSET = -10;

/**
 * @param {NetSimVizNode} localNode
 * @param {NetSimVizNode} remoteNode
 * @constructor
 * @augments NetSimVizElement
 */
var NetSimVizWire = module.exports = function (localNode, remoteNode) {
  NetSimVizElement.call(this);

  var root = this.getRoot();
  root.addClass('viz-wire');

  /**
   * @type {jQuery} wrapped around a SVGPathElement
   * @private
   */
  this.line_ = jQuerySvgElement('path').appendTo(root);

  /**
   * @type {jQuery} wrapped around a SVGTextElement
   * @private
   */
  this.questionMark_ = jQuerySvgElement('text').text('?').addClass('question-mark').appendTo(root);

  /**
   * @type {jQuery} wrapped around a SVGTextElement
   * @private
   */
  this.text_ = jQuerySvgElement('text').addClass('state-label').appendTo(root);

  /**
   * X-coordinate of text label, for animation.
   * @type {number}
   * @private
   */
  this.textPosX_ = 0;

  /**
   * Y-coordinate of text label, for animation.
   * @type {number}
   * @private
   */
  this.textPosY_ = 0;

  /**
   * Flag that allows us to force an update of the text position; used
   * when we move text without tweens because that method prevents us
   * from being able to detect normally that something has changed
   * @type {boolean}
   * @private
   */
  this.forceTextPosRender_ = false;

  /**
   * SVG Path Description of this.line_, for animation
   * @type {string}
   * @private
   */
  this.pathData_ = '';

  /**
   * `TEXT_FINAL_VERTICAL_OFFSET`-offset X and Y coordinates for the
   * center of the wire; used for positioning the question mark
   * @type {{x:number, y:number}}
   * @private
   */
  this.wireCenter_ = { x: 0, y: 0 };

  /**
   * Enabled encoding types.
   * @type {EncodingType[]}
   * @private
   */
  this.encodings_ = [];

  this.localVizNode = localNode;
  this.remoteVizNode = remoteNode;

  this.render();
};
NetSimVizWire.inherits(NetSimVizElement);

/**
 * Update path data for wire if we can detect pending changes
 * @param {RunLoop.Clock} [clock] - somtimes omitted during setup
 */
NetSimVizWire.prototype.render = function (clock) {

  // Cache the local position values here, so we can check later if
  // anything has changed before making an expensive `.attr` call
  var textPosX = this.textPosX_;
  var textPosY = this.textPosY_;
  var pathData = this.pathData_;
  var wireCenter = this.wireCenter_;

  // Make the call to super to update everything we can, then
  // recalculate the values of ours that are dependent on the movement
  // of our connected nodes
  NetSimVizWire.superPrototype.render.call(this, clock);

  if (this.localVizNode && this.remoteVizNode) {
    this.pathData_ = ['M', this.localVizNode.posX, this.localVizNode.posY, 'L', this.remoteVizNode.posX, this.remoteVizNode.posY].join(' ');
    this.wireCenter_ = this.getWireCenterPosition();
  }

  // Finally, if and only if any of the values we care about have
  // changed, update our element in the DOM
  if (this.forceTextPosRender_ || textPosX !== this.textPosX_ || textPosY !== this.textPosY_) {
    this.text_.attr('x', this.textPosX_).attr('y', this.textPosY_);
    this.forceTextPosRender_ = false;
  }
  if (pathData !== this.pathData_) {
    this.line_.attr('d', this.pathData_);
  }
  if (wireCenter.x !== this.wireCenter_.x || wireCenter.y !== this.wireCenter_.y) {
    this.questionMark_.attr('x', this.wireCenter_.x).attr('y', this.wireCenter_.y);
  }
};

/**
 * Hide this wire - used to hide the incoming wire when we're trying to show
 * simplex mode.
 */
NetSimVizWire.prototype.hide = function () {
  this.getRoot().addClass('hidden-wire');
};

/**
 * Killing a visualization node removes its ID so that it won't conflict with
 * another node of matching ID being added, and begins its exit animation.
 * @override
 */
NetSimVizWire.prototype.kill = function () {
  NetSimVizWire.superPrototype.kill.call(this);
  this.localVizNode = null;
  this.remoteVizNode = null;
};

/**
 * Update encoding-view settings.  Determines how bit sets/reads are
 * displayed when animating above the wire.
 *
 * @param {EncodingType[]} newEncodings
 */
NetSimVizWire.prototype.setEncodings = function (newEncodings) {
  this.encodings_ = newEncodings;
};

/**
 * Kick off an animation of the wire state being set by the local viznode.
 * @param {"0"|"1"} newState
 */
NetSimVizWire.prototype.animateSetState = function (newState) {
  if (!(this.localVizNode && this.remoteVizNode)) {
    return;
  }

  var flyOutMs = 300;
  var holdPositionMs = 300;

  this.stopAllAnimation();
  this.setWireClasses_(newState);
  this.text_.text(this.getDisplayBit_(newState));
  this.snapTextToPosition(this.getLocalNodePosition());
  this.tweenTextToPosition(this.getWireCenterPosition(), flyOutMs, tweens.easeOutQuad);
  this.doAfterDelay(flyOutMs + holdPositionMs, (function () {
    this.setWireClasses_('unknown');
  }).bind(this));
};

/**
 * Kick off an animation of the wire state being read by the local viznode.
 * @param {"0"|"1"} newState
 */
NetSimVizWire.prototype.animateReadState = function (newState) {
  if (!(this.localVizNode && this.remoteVizNode)) {
    return;
  }

  var holdPositionMs = 300;
  var flyToNodeMs = 300;

  this.stopAllAnimation();
  this.setWireClasses_(newState);
  this.text_.text(this.getDisplayBit_(newState));
  this.snapTextToPosition(this.getWireCenterPosition());
  this.doAfterDelay(holdPositionMs, (function () {
    this.tweenTextToPosition(this.getLocalNodePosition(), flyToNodeMs, tweens.easeOutQuad);
    this.setWireClasses_('unknown');
  }).bind(this));
};

/**
 * Adds/removes classes from the SVG root according to the given wire state.
 * Passing anything other than "1" or "0" will put the wire in an "unknown"
 * state, which begins a CSS transition fade back to gray.
 * @param {"0"|"1"|*} newState
 * @private
 */
NetSimVizWire.prototype.setWireClasses_ = function (newState) {
  var stateOff = newState === '0';
  var stateOn = !stateOff && newState === '1';
  var stateUnknown = !stateOff && !stateOn;

  this.getRoot().toggleClass('state-on', stateOn);
  this.getRoot().toggleClass('state-off', stateOff);
  this.getRoot().toggleClass('state-unknown', stateUnknown);
};

/**
 * Get an appropriate "display bit" to show above the wire, given the
 * current enabled encodings (should match the "set wire" button label)
 * @param {"0"|"1"} wireState
 * @returns {string} a display bit appropriate to the enabled encodings.
 * @private
 */
NetSimVizWire.prototype.getDisplayBit_ = function (wireState) {
  if (this.isEncodingEnabled_(EncodingType.A_AND_B) && !this.isEncodingEnabled_(EncodingType.BINARY)) {
    wireState = binaryToAB(wireState);
  }
  return wireState;
};

/**
 * Check whether the given encoding is currently displayed by the panel.
 * @param {EncodingType} queryEncoding
 * @returns {boolean}
 * @private
 */
NetSimVizWire.prototype.isEncodingEnabled_ = function (queryEncoding) {
  return this.encodings_.some(function (enabledEncoding) {
    return enabledEncoding === queryEncoding;
  });
};

/**
 * Creates an animated motion from the text's current position to the
 * given coordinates.
 * @param {{x:number, y:number}} destination
 * @param {number} [duration=600] in milliseconds
 * @param {TweenFunction} [tweenFunction=linear]
 */
NetSimVizWire.prototype.tweenTextToPosition = function (destination, duration, tweenFunction) {
  if (duration > 0) {
    this.tweens_.push(new tweens.TweenValueTo(this, 'textPosX_', destination.x, duration, tweenFunction));
    this.tweens_.push(new tweens.TweenValueTo(this, 'textPosY_', destination.y, duration, tweenFunction));
  } else {
    this.textPosX_ = destination.x;
    this.textPosY_ = destination.y;
    this.forceTextPosRender_ = true;
  }
};

/**
 * Snaps the text to the given position.
 * @param {{x:number, y:number}} destination
 */
NetSimVizWire.prototype.snapTextToPosition = function (destination) {
  this.tweenTextToPosition(destination, 0);
};

/**
 * @returns {{x:number, y:number}}
 */
NetSimVizWire.prototype.getLocalNodePosition = function () {
  return {
    x: this.localVizNode.posX,
    y: this.localVizNode.posY
  };
};

/**
 * @returns {{x:number, y:number}}
 */
NetSimVizWire.prototype.getWireCenterPosition = function () {
  return {
    x: (this.remoteVizNode.posX - this.localVizNode.posX) / 2 + this.localVizNode.posX,
    y: (this.remoteVizNode.posY - this.remoteVizNode.posY) / 2 + this.localVizNode.posY + TEXT_FINAL_VERTICAL_OFFSET
  };
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./DataConverters":"/home/ubuntu/staging/apps/build/js/netsim/DataConverters.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js","./NetSimVizElement":"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizElement.js","./tweens":"/home/ubuntu/staging/apps/build/js/netsim/tweens.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizSimulationNode.js":[function(require,module,exports){
/**
 * @overview Nodes in the visualization that map to simulation entities.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

require('../utils');
var NetSimConstants = require('./NetSimConstants');
var NetSimVizNode = require('./NetSimVizNode');

var NodeType = NetSimConstants.NodeType;

var NetSimGlobals = require('./NetSimGlobals');

/**
 * @param {NetSimNode} sourceNode
 * @param {boolean} useBackgroundAnimation - changes the behavior of this node
 *        when it's in the background layer
 * @constructor
 * @augments NetSimVizNode
 */
var NetSimVizSimulationNode = module.exports = function (sourceNode, useBackgroundAnimation) {
  NetSimVizNode.call(this, useBackgroundAnimation);

  /**
   * ID of the NetSimNode that this NetSimVizSimulationNode represents.
   * @type {number}
   */
  this.correspondingNodeID_ = sourceNode.entityID;

  /**
   * UUID of the NetSimNode that this NetSimVizSimulationNode represents.
   * @type {string}
   */
  this.correspondingNodeUuid_ = sourceNode.uuid;

  /**
   * If we end up representing a router, we may need to hold the auto-dns address
   * to pass to a fake auto-dns node.
   * @type {string}
   */
  this.autoDnsAddress = undefined;

  this.configureFrom(sourceNode);
  this.render();
};
NetSimVizSimulationNode.inherits(NetSimVizNode);

/**
 *
 * @param {NetSimNode} sourceNode
 */
NetSimVizSimulationNode.prototype.configureFrom = function (sourceNode) {
  this.correspondingNodeId_ = sourceNode.entityID;
  this.correspondingNodeUuid_ = sourceNode.uuid;

  var levelConfig = NetSimGlobals.getLevelConfig();
  if (levelConfig.showHostnameInGraph) {
    this.setName(sourceNode.getHostname());
  } else {
    this.setName(sourceNode.getShortDisplayName());
  }

  if (sourceNode.getNodeType() === NodeType.ROUTER) {
    this.isRouter = true;
    this.getRoot().addClass('router-node');
    this.autoDnsAddress = sourceNode.getAutoDnsAddress();
    if (levelConfig.broadcastMode) {
      this.getRoot().css('display', 'none');
    }
  }
};

/**
 * ID of the simulation entity that maps to this one.
 * @returns {number}
 */
NetSimVizSimulationNode.prototype.getCorrespondingEntityId = function () {
  return this.correspondingNodeId_;
};

/**
 * @param {NetSimEntity} entity
 * @returns {boolean} TRUE of this VizElement represents the given Entity.
 */
NetSimVizSimulationNode.prototype.representsEntity = function (entity) {
  return this.correspondingNodeId_ === entity.entityID && this.correspondingNodeUuid_ === entity.uuid;
};

/**
 * Killing a visualization node removes its ID so that it won't conflict with
 * another node of matching ID being added, and begins its exit animation.
 * @override
 */
NetSimVizSimulationNode.prototype.kill = function () {
  NetSimVizSimulationNode.superPrototype.kill.call(this);
  this.correspondingNodeId_ = undefined;
  this.correspondingNodeUuid_ = undefined;
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimVizNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizNode.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizAutoDnsNode.js":[function(require,module,exports){
/**
 * @overview Visualization auto-dns node.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

require('../utils');
var NetSimGlobals = require('./NetSimGlobals');
var NetSimVizNode = require('./NetSimVizNode');

/**
 * @param {boolean} useBackgroundAnimation - changes the behavior of this node
 *        when it's in the background layer
 * @constructor
 * @augments NetSimVizNode
 */
var NetSimVizAutoDnsNode = module.exports = function (useBackgroundAnimation) {
  NetSimVizNode.call(this, useBackgroundAnimation);

  this.getRoot().addClass('auto-dns-node');

  var levelConfig = NetSimGlobals.getLevelConfig();
  if (levelConfig.showHostnameInGraph) {
    this.setName('dns');
  } else {
    this.setName('DNS');
  }

  this.setIsDnsNode(true);
  this.render();
};
NetSimVizAutoDnsNode.inherits(NetSimVizNode);

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimVizNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizNode.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizNode.js":[function(require,module,exports){
/**
 * @overview Nodes in the visualization.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

require('../utils');
var NetSimConstants = require('./NetSimConstants');
var jQuerySvgElement = require('./NetSimUtils').jQuerySvgElement;
var NetSimVizElement = require('./NetSimVizElement');
var tweens = require('./tweens');

var DnsMode = NetSimConstants.DnsMode;

var NetSimGlobals = require('./NetSimGlobals');

/**
 * The narrowest that a text bubble is allowed to be.
 * @type {number}
 * @const
 */
var TEXT_MIN_WIDTH = 30;

/**
 * Width to add to the bubble beyond the width of the student's name.
 * @type {number}
 * @const
 */
var TEXT_PADDING_X = 20;

/**
 * Height to add to the bubble beyond the height of the student's name.
 * @type {number}
 * @const
 */
var TEXT_PADDING_Y = 10;

/**
 * @param {boolean} useBackgroundAnimation - changes the behavior of this node
 *        when it's in the background layer.
 * @constructor
 * @augments NetSimVizElement
 */
var NetSimVizNode = module.exports = function (useBackgroundAnimation) {
  NetSimVizElement.call(this);

  /**
   * @private {string}
   */
  this.address_ = undefined;

  /**
   * @private {DnsMode}
   */
  this.dnsMode_ = undefined;

  /**
   * Whether to start or update any tweens while the node is in the background
   * layer.
   * @private {boolean}
   */
  this.useBackgroundAnimation_ = useBackgroundAnimation;

  /**
   * @type {boolean}
   */
  this.isRouter = false;

  /**
   * @type {boolean}
   */
  this.isLocalNode = false;

  /**
   * @type {boolean}
   */
  this.isDnsNode = false;

  // Give our root node a useful class
  var root = this.getRoot();
  root.addClass('viz-node');

  // Going for a diameter of _close_ to 75
  var radius = 37;
  var textVerticalOffset = 4;

  /**
   *
   * @type {jQuery}
   * @private
   */
  jQuerySvgElement('circle').attr('cx', 0).attr('cy', 0).attr('r', radius).appendTo(root);

  this.nameGroup_ = jQuerySvgElement('g').attr('transform', 'translate(0,0)').appendTo(root);

  this.displayName_ = jQuerySvgElement('text').attr('x', 0).attr('y', textVerticalOffset);

  this.nameBox_ = jQuerySvgElement('rect').addClass('name-box');

  this.nameGroup_.append(this.nameBox_).append(this.displayName_);

  this.addressGroup_ = jQuerySvgElement('g').attr('transform', 'translate(0,30)').hide().appendTo(root);

  this.addressBox_ = jQuerySvgElement('rect').addClass('address-box').appendTo(this.addressGroup_);

  this.addressText_ = jQuerySvgElement('text').addClass('address-box').attr('x', 0).attr('y', textVerticalOffset).text('?').appendTo(this.addressGroup_);

  // Set an initial default tween for zooming in from nothing.
  if (this.useBackgroundAnimation_) {
    this.snapToScale(0);
    this.tweenToScale(0.5, 800, tweens.easeOutElastic);
  } else {
    this.snapToScale(0.5);
  }
};
NetSimVizNode.inherits(NetSimVizElement);

/**
 * Flag this viz node as the simulation local node.
 */
NetSimVizNode.prototype.setIsLocalNode = function () {
  this.isLocalNode = true;
  this.getRoot().addClass('local-node');
};

/**
 * Change the display name of the viz node
 * @param {string} newName
 */
NetSimVizNode.prototype.setName = function (newName) {
  this.displayName_.text(newName);
  this.resizeNameBox_();
};

/** @private */
NetSimVizNode.prototype.resizeNameBox_ = function () {
  this.resizeRectToText_(this.nameBox_, this.displayName_);
};

/** @private */
NetSimVizNode.prototype.resizeAddressBox_ = function () {
  this.resizeRectToText_(this.addressBox_, this.addressText_);
};

/**
 * Utility for resizing a background rounded-rect to fit the given text element.
 * @param {jQuery} rect
 * @param {jQuery} text
 * @private
 */
NetSimVizNode.prototype.resizeRectToText_ = function (rect, text) {
  try {
    var box = text[0].getBBox();
    var width = Math.max(TEXT_MIN_WIDTH, box.width + TEXT_PADDING_X);
    var height = box.height + TEXT_PADDING_Y;
    var halfWidth = width / 2;
    var halfHeight = height / 2;
    rect.attr('x', -halfWidth).attr('y', -halfHeight).attr('rx', halfHeight).attr('ry', halfHeight).attr('width', width).attr('height', height);
  } catch (e) {
    // Just allow this to be a no-op if it fails.  In some browsers,
    // getBBox will throw if the element is not yet in the DOM.
  }
};

/**
 * Killing a visualization node removes its ID so that it won't conflict with
 * another node of matching ID being added, and begins its exit animation.
 * @override
 */
NetSimVizNode.prototype.kill = function () {
  NetSimVizNode.superPrototype.kill.call(this);
  this.stopAllAnimation();
  this.tweenToScale(0, 200, tweens.easeInQuad);
};

/**
 * Provides drifting animation for nodes in the background.
 * @param {RunLoop.Clock} clock
 */
NetSimVizNode.prototype.tick = function (clock) {
  NetSimVizNode.superPrototype.tick.call(this, clock);

  // Trigger a new drift if we're in the background and the last one finished.
  if (this.useBackgroundAnimation_ && !this.isForeground && this.tweens_.length === 0) {
    var randomX = 300 * Math.random() - 150;
    var randomY = 300 * Math.random() - 150;
    this.tweenToPosition(randomX, randomY, 20000, tweens.easeInOutQuad);
  }
};

/**
 * When visible, runs every frame
 * @param {RunLoop.Clock} [clock]
 */
NetSimVizNode.prototype.render = function (clock) {
  NetSimVizNode.superPrototype.render.call(this, clock);

  // If currently animating, adjust text box sizes to match
  if (this.isForeground && this.tweens_.length > 0) {
    this.resizeNameBox_();
    this.resizeAddressBox_();
  }
};

/**
 * @param {boolean} isForeground
 */
NetSimVizNode.prototype.onDepthChange = function (isForeground) {
  NetSimVizNode.superPrototype.onDepthChange.call(this, isForeground);

  // Don't add tweens if this node has been killed
  if (this.isDying() || this.isDead()) {
    return;
  }

  this.tweens_.length = 0;
  if (isForeground) {
    this.tweenToScale(1, 600, tweens.easeOutElastic);
  } else if (this.useBackgroundAnimation_) {
    this.tweenToScale(0.5, 600, tweens.easeOutElastic);
  } else {
    this.snapToScale(0.5);
  }
};

/**
 * @param {string} address
 */
NetSimVizNode.prototype.setAddress = function (address) {
  this.address_ = address;
  this.updateAddressDisplay();
};

/**
 * @param {DNSMode} newDnsMode
 */
NetSimVizNode.prototype.setDnsMode = function (newDnsMode) {
  this.dnsMode_ = newDnsMode;
  this.updateAddressDisplay();
};

/**
 * @param {boolean} isDnsNode
 */
NetSimVizNode.prototype.setIsDnsNode = function (isDnsNode) {
  this.isDnsNode = isDnsNode;
  this.updateAddressDisplay();
};

NetSimVizNode.prototype.updateAddressDisplay = function () {
  var levelConfig = NetSimGlobals.getLevelConfig();

  // If we are never assigned an address, don't try to show one.
  // In broadcast mode we will be assigned addresses but never use them, so
  //   they should be hidden.
  // Routers never show their address.
  if (this.address_ === undefined || levelConfig.broadcastMode || this.isRouter) {
    this.addressGroup_.hide();
    return;
  }

  this.addressGroup_.show();
  if (this.dnsMode_ === DnsMode.NONE) {
    this.addressText_.text(this.address_ !== undefined ? this.address_ : '?');
  } else {
    this.addressText_.text(this.isLocalNode || this.isDnsNode ? this.address_ : '?');
  }
  this.resizeAddressBox_();
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js","./NetSimVizElement":"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizElement.js","./tweens":"/home/ubuntu/staging/apps/build/js/netsim/tweens.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimVizElement.js":[function(require,module,exports){
/**
 * @overview Base type for visible elements in the visualization.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var jQuerySvgElement = require('./NetSimUtils').jQuerySvgElement;
var tweens = require('./tweens');

/**
 * A VizElement is an object that  has a representation in the network
 * visualization.  Its role is to maintain that visual representation.
 * A VizElement has helpers for positioning, scaling and tweening.
 * Every VizElement has a root element which is a <g> tag, an SVG "group"
 * that contains the other components that will actually draw.
 *
 * @constructor
 */
var NetSimVizElement = module.exports = function () {
  /**
   * @type {number}
   */
  this.posX = 0;

  /**
   * @type {number}
   */
  this.posY = 0;

  /**
   * @type {number}
   */
  this.scale = 1;

  /**
   * @type {boolean}
   */
  this.isForeground = false;

  /**
   * Root SVG <g> (group) element for this object.
   * @type {jQuery}
   * @private
   */
  this.rootGroup_ = jQuerySvgElement('g');

  /**
   * Set of tweens we should currently be running on this node.
   * Processed by tick()
   * @type {Array.<exports.TweenValueTo>}
   * @private
   */
  this.tweens_ = [];

  /**
   * @type {boolean}
   * @private
   */
  this.isDead_ = false;
};

/**
 * @returns {jQuery} wrapper around root <g> element
 */
NetSimVizElement.prototype.getRoot = function () {
  return this.rootGroup_;
};

/**
 * Begins the process of destroying this VizElement.  Once started, this
 * process cannot be stopped.
 * This method can be overridden to trigger an "on-death" animation.
 */
NetSimVizElement.prototype.kill = function () {
  this.isDead_ = true;
};

/**
 * @returns {boolean} whether this entity is done with its death animation
 *          and is ready to be cleaned up by the visualization manager.
 *          The default implementation here returns TRUE as soon as kill()
 *          is called and all animations are completed.
 */
NetSimVizElement.prototype.isDead = function () {
  return this.isDead_ && this.tweens_.length === 0;
};

/**
 * @returns {boolean} whether this entity is playing its final animation
 *          and will be ready to be cleaned up by the visualization manager
 *          soon.
 */
NetSimVizElement.prototype.isDying = function () {
  return this.isDead_ && this.tweens_.length > 0;
};

/**
 * Update all of the tweens currently running on this VizElement (which will
 * probably modify its properties) and then remove any tweens that are completed
 * from the list.
 */
NetSimVizElement.prototype.tick = function () {};

/**
 * Update the root group's properties to reflect our current position
 * and scale.
 * @param {RunLoop.Clock} [clock] - sometimes omitted during setup
 */
NetSimVizElement.prototype.render = function (clock) {
  if (!clock) {
    return;
  }

  // cache initial settings here; we check them later to see if anything
  // has actually changed
  var posX = this.posX;
  var posY = this.posY;
  var scale = this.scale;

  // Update tweens in the render loop so they are very smooth
  this.tweens_.forEach(function (tween) {
    tween.tick(clock);
  });
  this.tweens_ = this.tweens_.filter(function (tween) {
    return !tween.isFinished;
  });

  // If nothing has changed, don't bother to update transform
  if (posX !== this.posX || posY !== this.posY || scale !== this.scale) {
    var transform = 'translate(' + this.posX + ' ' + this.posY + ')' + ' scale(' + this.scale + ')';
    this.rootGroup_.attr('transform', transform);
  }
};

/**
 * @param {boolean} isForeground
 */
NetSimVizElement.prototype.onDepthChange = function (isForeground) {
  this.isForeground = isForeground;
};

/**
 * Throw away all existing tweens on this object.
 */
NetSimVizElement.prototype.stopAllAnimation = function () {
  this.tweens_.length = 0;
};

/**
 * Stops any existing motion animation and begins an animated motion to the
 * given coordinates.  Note: This animates the VizElement's root group.
 * @param {number} newX given in SVG points
 * @param {number} newY given in SVG points
 * @param {number} [duration=600] in milliseconds
 * @param {TweenFunction} [tweenFunction=linear]
 */
NetSimVizElement.prototype.tweenToPosition = function (newX, newY, duration, tweenFunction) {
  // Don't accept new animation commands if we've already been killed
  if (this.isDying() || this.isDead()) {
    return;
  }

  // Remove any existing tweens controlling posX or posY
  this.removeAllTweensOnProperties(['posX', 'posY']);

  // Add two new tweens, one for each axis
  if (duration > 0) {
    this.tweens_.push(new tweens.TweenValueTo(this, 'posX', newX, duration, tweenFunction));
    this.tweens_.push(new tweens.TweenValueTo(this, 'posY', newY, duration, tweenFunction));
  } else {
    this.posX = newX;
    this.posY = newY;
  }
};

/**
 * Alias for calling tweenToPosition with a zero duration
 * @param {number} newX given in SVG points
 * @param {number} newY given in SVG points
 */
NetSimVizElement.prototype.snapToPosition = function (newX, newY) {
  this.tweenToPosition(newX, newY, 0);
};

/**
 * Stops any existing animation of the entity's scale and begins an animated
 * change to the given target scale value.  Note: this animates the VizElement's
 * root group.
 * @param {number} newScale where 1.0 is 100% (unscaled)
 * @param {number} [duration=600] in milliseconds
 * @param {TweenFunction} [tweenFunction=linear]
 */
NetSimVizElement.prototype.tweenToScale = function (newScale, duration, tweenFunction) {
  // Remove existing scale tweens
  this.removeAllTweensOnProperty('scale');

  // On nonzero duration, add tween to target scale.  Otherwise just set it.
  if (duration > 0) {
    this.tweens_.push(new tweens.TweenValueTo(this, 'scale', newScale, duration, tweenFunction));
  } else {
    this.scale = newScale;
  }
};

NetSimVizElement.prototype.doAfterDelay = function (delay, callback) {
  if (delay > 0) {
    this.tweens_.push(new tweens.DoAfterDelay(this, delay, callback));
  } else {
    callback();
  }
};

/**
 * Remove (stop) all active tweens that control the given property on this
 * visualization entity.
 * @param {string} propertyName
 */
NetSimVizElement.prototype.removeAllTweensOnProperty = function (propertyName) {
  this.removeAllTweensOnProperties([propertyName]);
};

/**
 * Remove (stop) all active tweens that control any of the given properties
 * on this visualization entity.
 * @param {string[]} propertyNames
 */
NetSimVizElement.prototype.removeAllTweensOnProperties = function (propertyNames) {
  this.tweens_ = this.tweens_.filter(function (tween) {
    var targetsThisEntity = tween.target === this;
    var isRemovableProperty = propertyNames.some(function (name) {
      return tween.propertyName === name;
    });

    // Invert for filter() because we want to keep everything BUT the matched
    // properties
    return !(targetsThisEntity && isRemovableProperty);
  }, this);
};

/**
 * Alias for calling tweenToScale with a zero duration.
 * @param {number} newScale where 1.0 is 100% (unscaled)
 */
NetSimVizElement.prototype.snapToScale = function (newScale) {
  this.tweenToScale(newScale, 0);
};

},{"./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js","./tweens":"/home/ubuntu/staging/apps/build/js/netsim/tweens.js"}],"/home/ubuntu/staging/apps/build/js/netsim/tweens.js":[function(require,module,exports){
/**
 * @overview Tween functions used to animate visualization elements.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var valueOr = require('../utils').valueOr;

/**
 * Default tween duration in milliseconds
 * @type {number}
 * @const
 */
var DEFAULT_TWEEN_DURATION = 600;

/**
 * A four-arg interpolation function.
 *
 * @typedef {function} TweenFunction
 * @param {number} t - current Time, in milliseconds since tween began
 * @param {number} b - Begin value
 * @param {number} c - final Change in value
 * @param {number} d - total tween Duration
 * @returns {number} the interpolated value for the current time
 */

/**
 * Interpolates with a little back-and-forth over the target value at the end.
 * @type {TweenFunction}
 */
exports.easeOutElastic = function (t, b, c, d) {
  var s, p, a;
  s = 1.70158;
  p = 0;
  a = c;
  if (t === 0) {
    return b;
  }
  if ((t /= d) === 1) {
    return b + c;
  }
  if (!p) {
    p = d * 0.3;
  }
  if (a < Math.abs(c)) {
    a = c;
    s = p / 4;
  } else {
    s = p / (2 * Math.PI) * Math.asin(c / a);
  }
  return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
};

/**
 * Interpolates, accelerating as it goes.
 * @type {TweenFunction}
 */
exports.easeInQuad = function (t, b, c, d) {
  return c * (t /= d) * t + b;
};

/**
 * Interpolates, decelerating as it goes.
 * @type {TweenFunction}
 */
exports.easeOutQuad = function (t, b, c, d) {
  return -c * (t /= d) * (t - 2) + b;
};

exports.easeInOutQuad = function (t, b, c, d) {
  if ((t /= d / 2) < 1) {
    return c / 2 * t * t + b;
  }
  return -c / 2 * (--t * (t - 2) - 1) + b;
};

/**
 * Linear interpolation
 * @type {TweenFunction}
 */
exports.linear = function (t, b, c, d) {
  return c * (t / d) + b;
};

/**
 * Wraps a tween method with the state it needs to animate a property.
 * On creation, assumes that property's current value for start values.
 * Must be ticked to progress toward completion.
 *
 * @param {!Object} target - The object owning the property we want to animate
 * @param {!string} propertyName - Must be a valid property on target
 * @param {!number} endValue - The desired final value of the property
 * @param {number} [duration] - How long the tween should take in milliseconds,
 *        default 600ms
 * @param {TweenFunction} [tweenFunction] - A tween function, default linear
 * @constructor
 */
exports.TweenValueTo = function (target, propertyName, endValue, duration, tweenFunction) {
  /**
   * Will be set to TRUE when tween is completed.
   * @type {boolean}
   */
  this.isFinished = false;

  /**
   * Will be set on our first tick.
   * @type {number}
   * @private
   */
  this.startTime_ = undefined;

  /**
   * @type {Object}
   */
  this.target = target;

  /**
   * @type {string}
   * @private
   */
  this.propertyName = propertyName;

  /**
   * @type {TweenFunction}
   * @private
   */
  this.tweenFunction_ = valueOr(tweenFunction, exports.linear);

  /**
   * @type {number}
   * @private
   */
  this.startValue_ = target[propertyName];

  /**
   * @type {number}
   * @private
   */
  this.deltaValue_ = endValue - this.startValue_;

  /**
   * Duration of tween in milliseconds
   * @type {number}
   * @private
   */
  this.duration_ = valueOr(duration, DEFAULT_TWEEN_DURATION);
};

/**
 * @param {RunLoop.clock} clock
 */
exports.TweenValueTo.prototype.tick = function (clock) {
  if (this.startTime_ === undefined) {
    this.startTime_ = clock.time;
  }

  var timeSinceStart = clock.time - this.startTime_;

  if (this.deltaValue_ !== 0) {
    this.target[this.propertyName] = this.tweenFunction_(timeSinceStart, this.startValue_, this.deltaValue_, this.duration_);
  }

  if (timeSinceStart >= this.duration_) {
    this.target[this.propertyName] = this.startValue_ + this.deltaValue_;
    this.isFinished = true;
  }
};

exports.DoAfterDelay = function (target, duration, callback) {
  /**
   * Will be set to TRUE when tween is completed.
   * @type {boolean}
   */
  this.isFinished = false;

  /**
   * Will be set on our first tick.
   * @type {number}
   * @private
   */
  this.startTime_ = undefined;

  /**
   * @type {Object}
   */
  this.target = target;

  /**
   * @type {string}
   * @private
   */
  this.propertyName = null;

  /**
   * Duration of tween in milliseconds
   * @type {number}
   * @private
   */
  this.duration_ = duration;

  /**
   * Function to call when the duration has elapsed.
   * @type {function}
   */
  this.callback_ = callback;
};

/**
 * @param {RunLoop.clock} clock
 */
exports.DoAfterDelay.prototype.tick = function (clock) {
  if (this.startTime_ === undefined) {
    this.startTime_ = clock.time;
  }

  var timeSinceStart = clock.time - this.startTime_;
  if (timeSinceStart >= this.duration_) {
    this.callback_();
    this.isFinished = true;
  }
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimVisualization.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
/**
 * Whether the blurred background layer should be visible.
 * @name showBackground
 * @type {boolean}
 */
; buf.push('\n<svg version="1.1" width="298" height="298" xmlns="http://www.w3.org/2000/svg">\n\n  ');10; if (showBackground) { ; buf.push('\n    <filter id="backgroundBlur">\n      <feGaussianBlur in="SourceGraphic" stdDeviation="5" />\n      <feComponentTransfer>\n        <feFuncA slope="0.5" type="linear"></feFuncA>\n      </feComponentTransfer>\n    </filter>\n  ');17; } ; buf.push('\n\n  <g id="centered-group" transform="translate(150,150)">\n    <g id="background-group"\n       ');21; if (showBackground) { ; buf.push('\n         filter="url(#backgroundBlur)"\n       ');23; } else { ; buf.push('\n         visibility="hidden"\n       ');25; } ; buf.push('\n        ></g>\n\n    <g id="foreground-group"></g>\n  </g>\n</svg>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimTabsComponent.js":[function(require,module,exports){
/**
 * @overview UI controller for tabs area in left column
 *           Directly controls the instructions tab, others are delegated.
 * @see NetSimMyDeviceTab
 * @see NetSimRouterTab
 * @see NetSimDnsTab
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var buildMarkup = require('./NetSimTabsComponent.html.ejs');
var NetSimRouterTab = require('./NetSimRouterTab');
var NetSimMyDeviceTab = require('./NetSimMyDeviceTab');
var NetSimDnsTab = require('./NetSimDnsTab');
var NetSimTabType = require('./NetSimConstants').NetSimTabType;
var shouldShowTab = require('./NetSimUtils').shouldShowTab;
var NetSimGlobals = require('./NetSimGlobals');

/**
 * Wrapper component for tabs panel on the right side of the page.
 * @param {jQuery} rootDiv
 * @param {RunLoop} runLoop
 * @param {Object} callbacks
 * @param {function} callbacks.chunkSizeSliderChangeCallback
 * @param {function} callbacks.myDeviceBitRateChangeCallback
 * @param {function} callbacks.encodingChangeCallback
 * @param {function} callbacks.routerBandwidthSliderChangeCallback
 * @param {function} callbacks.routerBandwidthSliderStopCallback
 * @param {function} callbacks.routerMemorySliderChangeCallback
 * @param {function} callbacks.routerMemorySliderStopCallback
 * @param {function} callbacks.dnsModeChangeCallback
 * @param {function} callbacks.becomeDnsCallback
 * @constructor
 */
var NetSimTabsComponent = module.exports = function (rootDiv, runLoop, callbacks) {
  /**
   * Component root, which we fill whenever we call render()
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = rootDiv;

  /**
   * @type {RunLoop}
   * @private
   */
  this.runLoop_ = runLoop;

  /**
   * @type {function}
   * @private
   */
  this.chunkSizeSliderChangeCallback_ = callbacks.chunkSizeSliderChangeCallback;

  /**
   * @type {function}
   * @private
   */
  this.myDeviceBitRateChangeCallback_ = callbacks.myDeviceBitRateChangeCallback;

  /**
   * @type {function}
   * @private
   */
  this.encodingChangeCallback_ = callbacks.encodingChangeCallback;

  /**
   * @type {function}
   * @private
   */
  this.routerBandwidthSliderChangeCallback_ = callbacks.routerBandwidthSliderChangeCallback;

  /**
   * @type {function}
   * @private
   */
  this.routerBandwidthSliderStopCallback_ = callbacks.routerBandwidthSliderStopCallback;

  /**
   * @type {function}
   * @private
   */
  this.routerMemorySliderChangeCallback_ = callbacks.routerMemorySliderChangeCallback;

  /**
   * @type {function}
   * @private
   */
  this.routerMemorySliderStopCallback_ = callbacks.routerMemorySliderStopCallback;

  /**
   * @type {function}
   * @private
   */
  this.dnsModeChangeCallback_ = callbacks.dnsModeChangeCallback;

  /**
   * @type {function}
   * @private
   */
  this.becomeDnsCallback_ = callbacks.becomeDnsCallback;

  /**
   * @type {NetSimRouterTab}
   * @private
   */
  this.routerTab_ = null;

  /**
   * @type {NetSimMyDeviceTab}
   * @private
   */
  this.myDeviceTab_ = null;

  /**
   * @type {NetSimDnsTab}
   * @private
   */
  this.dnsTab_ = null;

  // Initial render
  this.render();
};

/**
 * @param {RunLoop} runLoop
 */
NetSimTabsComponent.prototype.attachToRunLoop = function (runLoop) {
  if (this.routerTab_) {
    this.routerTab_.attachToRunLoop(runLoop);
  }
};

/**
 * Fill the root div with new elements reflecting the current state
 */
NetSimTabsComponent.prototype.render = function () {
  var levelConfig = NetSimGlobals.getLevelConfig();
  // Clone the reference area (with handlers) before we re-render
  var referenceArea = $('#reference_area').first().clone(true);

  // Remove the instructions area, to reattach in a minute.
  var instructionsArea = $('#bubble').first().detach();

  var rawMarkup = buildMarkup({
    level: levelConfig
  });
  var jQueryWrap = $(rawMarkup);
  this.rootDiv_.html(jQueryWrap);

  this.rootDiv_.find('.netsim-tabs').tabs({
    active: levelConfig.defaultTabIndex
  });

  if (shouldShowTab(levelConfig, NetSimTabType.INSTRUCTIONS) && referenceArea) {
    var instructionsTab = this.rootDiv_.find('#tab_instructions').first();
    instructionsArea.appendTo(instructionsTab);
    referenceArea.appendTo(instructionsTab);
  }

  if (shouldShowTab(levelConfig, NetSimTabType.MY_DEVICE)) {
    this.myDeviceTab_ = new NetSimMyDeviceTab(this.rootDiv_.find('#tab_my_device'), this.runLoop_, {
      chunkSizeChangeCallback: this.chunkSizeSliderChangeCallback_,
      bitRateChangeCallback: this.myDeviceBitRateChangeCallback_,
      encodingChangeCallback: this.encodingChangeCallback_
    });
  }

  if (shouldShowTab(levelConfig, NetSimTabType.ROUTER)) {
    this.routerTab_ = new NetSimRouterTab(this.rootDiv_.find('#tab_router'), {
      bandwidthSliderChangeCallback: this.routerBandwidthSliderChangeCallback_,
      bandwidthSliderStopCallback: this.routerBandwidthSliderStopCallback_,
      memorySliderChangeCallback: this.routerMemorySliderChangeCallback_,
      memorySliderStopCallback: this.routerMemorySliderStopCallback_
    });
  }

  if (shouldShowTab(levelConfig, NetSimTabType.DNS)) {
    this.dnsTab_ = new NetSimDnsTab(this.rootDiv_.find('#tab_dns'), this.dnsModeChangeCallback_, this.becomeDnsCallback_);
  }
};

/** @param {number} newChunkSize */
NetSimTabsComponent.prototype.setChunkSize = function (newChunkSize) {
  if (this.myDeviceTab_) {
    this.myDeviceTab_.setChunkSize(newChunkSize);
  }
};

/** @param {number} newBitRate in bits per second */
NetSimTabsComponent.prototype.setMyDeviceBitRate = function (newBitRate) {
  if (this.myDeviceTab_) {
    this.myDeviceTab_.setBitRate(newBitRate);
  }
};

/** @param {EncodingType[]} newEncodings */
NetSimTabsComponent.prototype.setEncodings = function (newEncodings) {
  if (this.myDeviceTab_) {
    this.myDeviceTab_.setEncodings(newEncodings);
  }
};

/** @param {number} creationTimestampMs */
NetSimTabsComponent.prototype.setRouterCreationTime = function (creationTimestampMs) {
  if (this.routerTab_) {
    this.routerTab_.setRouterCreationTime(creationTimestampMs);
  }
};

/** @param {number} newBandwidth in bits/second */
NetSimTabsComponent.prototype.setRouterBandwidth = function (newBandwidth) {
  if (this.routerTab_) {
    this.routerTab_.setBandwidth(newBandwidth);
  }
};

/** @param {number} newMemory in bits */
NetSimTabsComponent.prototype.setRouterMemory = function (newMemory) {
  if (this.routerTab_) {
    this.routerTab_.setMemory(newMemory);
  }
};

/**
 * @param {number} queuedPacketCount
 */
NetSimTabsComponent.prototype.setRouterQueuedPacketCount = function (queuedPacketCount) {
  if (this.routerTab_) {
    this.routerTab_.setRouterQueuedPacketCount(queuedPacketCount);
  }
};

/** @param {number} usedMemoryInBits */
NetSimTabsComponent.prototype.setRouterMemoryInUse = function (usedMemoryInBits) {
  if (this.routerTab_) {
    this.routerTab_.setMemoryInUse(usedMemoryInBits);
  }
};

NetSimTabsComponent.prototype.setRouterDataRate = function (dataRateBitsPerSecond) {
  if (this.routerTab_) {
    this.routerTab_.setDataRate(dataRateBitsPerSecond);
  }
};

/** @param {string} newDnsMode */
NetSimTabsComponent.prototype.setDnsMode = function (newDnsMode) {
  if (this.dnsTab_) {
    this.dnsTab_.setDnsMode(newDnsMode);
  }
};

/** @param {boolean} isDnsNode */
NetSimTabsComponent.prototype.setIsDnsNode = function (isDnsNode) {
  if (this.dnsTab_) {
    this.dnsTab_.setIsDnsNode(isDnsNode);
  }
};

/** @param {Array} tableContents */
NetSimTabsComponent.prototype.setDnsTableContents = function (tableContents) {
  if (this.dnsTab_) {
    this.dnsTab_.setDnsTableContents(tableContents);
  }
};

/** @param {Array} logData */
NetSimTabsComponent.prototype.setRouterLogData = function (logData) {
  if (this.routerTab_) {
    this.routerTab_.setRouterLogData(logData);
  }
};

},{"./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimDnsTab":"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsTab.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimMyDeviceTab":"/home/ubuntu/staging/apps/build/js/netsim/NetSimMyDeviceTab.js","./NetSimRouterTab":"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterTab.js","./NetSimTabsComponent.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimTabsComponent.html.ejs","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimTabsComponent.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
  var i18n = require('./locale');

  var shouldShowTab = require('./NetSimUtils').shouldShowTab;
  var NetSimTabType = require('./NetSimConstants').NetSimTabType;

  var showInstructions = shouldShowTab(level, NetSimTabType.INSTRUCTIONS);
  var showMyDevice = shouldShowTab(level, NetSimTabType.MY_DEVICE);
  var showRouter = shouldShowTab(level, NetSimTabType.ROUTER);
  var showDns = shouldShowTab(level, NetSimTabType.DNS);
; buf.push('\n<div class="netsim-tabs">\n  <ul>\n    ');14; if (showInstructions) { ; buf.push('\n    <li><a href="#tab_instructions">', escape((15,  i18n.instructions() )), '</a></li>\n    ');16; } ; buf.push('\n    ');17; if (showMyDevice) { ; buf.push('\n      <li><a href="#tab_my_device">', escape((18,  i18n.myDevice() )), '</a></li>\n    ');19; } ; buf.push('\n    ');20; if (showRouter) { ; buf.push('\n      <li><a href="#tab_router">', escape((21,  i18n.router() )), '</a></li>\n    ');22; } ; buf.push('\n    ');23; if (showDns) { ; buf.push('\n      <li><a href="#tab_dns">', escape((24,  i18n.dns() )), '</a></li>\n    ');25; } ; buf.push('\n  </ul>\n  ');27; if (showInstructions) { ; buf.push('\n    <div id="tab_instructions"></div>\n  ');29; } ; buf.push('\n  ');30; if (showMyDevice) { ; buf.push('\n    <div id="tab_my_device"></div>\n  ');32; } ; buf.push('\n  ');33; if (showRouter) { ; buf.push('\n    <div id="tab_router"></div>\n  ');35; } ; buf.push('\n  ');36; if (showDns) { ; buf.push('\n    <div id="tab_dns"></div>\n  ');38; } ; buf.push('\n</div>'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimStatusPanel.js":[function(require,module,exports){
/**
 * @overview UI component: The small expandable box above the visualization,
 *           used to show debug and diagnostic information.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

require('../utils'); // For Function.prototype.inherits()
var i18n = require('./locale');
var markup = require('./NetSimStatusPanel.html.ejs');
var NetSimPanel = require('./NetSimPanel.js');
var NetSimUtils = require('./NetSimUtils');

/**
 * Generator and controller for connection status panel
 * in left column, displayed while connected.
 * @param {jQuery} rootDiv
 * @param {Object} callbacks
 * @param {function} callbacks.disconnectCallback - method to call when disconnect button
 *        is clicked.
 * @constructor
 * @augments NetSimPanel
 */
var NetSimStatusPanel = module.exports = function (rootDiv, callbacks) {
  /**
   * @type {function}
   * @private
   */
  this.disconnectCallback_ = callbacks.disconnectCallback;

  // Superclass constructor
  NetSimPanel.call(this, rootDiv, {
    className: 'netsim_status_panel',
    panelTitle: 'Status',
    userToggleable: false,
    beginMinimized: true
  });
};
NetSimStatusPanel.inherits(NetSimPanel);

/**
 * @param {Object} [data]
 * @param {string} [data.remoteNodeName] - Display name of remote node.
 * @param {string} [data.myHostname] - Hostname of local node
 * @param {number} [data.myAddress] - Local node address assigned by router
 * @param {string} [data.shareLink] - URL for sharing private shard
 */
NetSimStatusPanel.prototype.render = function (data) {
  data = data || {};

  // Capture title before we render the wrapper panel.
  this.setPanelTitle(data.remoteNodeName);

  // Render boilerplate panel stuff
  NetSimStatusPanel.superPrototype.render.call(this);

  // Put our own content into the panel body
  var newMarkup = $(markup({
    myHostname: data.myHostname,
    myAddress: data.myAddress,
    shareLink: data.shareLink
  }));
  this.getBody().html(newMarkup);

  // Add a button to the panel header
  this.addButton(i18n.disconnectButton({ caret: '<i class="fa fa-caret-left"></i>' }), this.disconnectCallback_);

  // Button that takes you to the next level.
  NetSimUtils.makeContinueButton(this);
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimPanel.js":"/home/ubuntu/staging/apps/build/js/netsim/NetSimPanel.js","./NetSimStatusPanel.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimStatusPanel.html.ejs","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimStatusPanel.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
var i18n = require('./locale');
; buf.push('\n<div class="content-wrap">\n  ');5; if (myHostname) { ; buf.push('\n  <p>My hostname: ', escape((6,  myHostname )), '</p>\n  ');7; } ; buf.push('\n\n  ');9; if (myAddress) { ; buf.push('\n  <p>My address: ', escape((10,  myAddress )), '</p>\n  ');11; } ; buf.push('\n\n  ');13; if (shareLink) { ; buf.push('\n  <p><a href="', escape((14,  shareLink )), '">', escape((14,  i18n.shareThisNetwork() )), '</a></p>\n  ');15; } ; buf.push('\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimShard.js":[function(require,module,exports){
/**
 * @overview Represents a collection of tables that map to a particular
 *           class section's simulation, isolated from other class sections.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var NetSimTable = require('./NetSimTable');
var PubSubService = require('./PubSubService');

/**
 * PubSub event key for events invalidating all tables.
 * @const {string}
 */
var WHOLE_SHARD_EVENT = 'all_tables';

/**
 * A shard is an isolated, complete simulation state shared by a subset of
 * users.  It's made of a set of storage tables set apart by a particular
 * shard ID in their names.  We use shards to allow students to interact only
 * with their particular class while still storing all NetSim tables under
 * the same App ID.
 *
 * @param {!string} shardID
 * @param {!PubSubConfig} pubSubConfig
 * @constructor
 */
var NetSimShard = module.exports = function (shardID, pubSubConfig) {
  /** @type {string} */
  this.id = shardID;

  /** @type {PubSubService} */
  this.pubSub = PubSubService.create(pubSubConfig);

  /** @type {PubSubChannel} */
  this.pubSubChannel = this.pubSub.subscribe(this.id);
  this.pubSubChannel.subscribe(WHOLE_SHARD_EVENT, NetSimShard.prototype.onPubSubEvent_.bind(this));

  /**
   * Collection of client (user) nodes and router nodes on the shard.
   * Each client node corresponds to a user (or browser tab, to be specific).
   * Router nodes are not associated with a particular user.
   *
   * All entities in this table descend from NetSimNode, and can be deserialized
   * via utilities in NetSimNodeFactory
   *
   * Rows in this table are
   * - inserted when a node is created (such as when a user connects)
   * - updated for certain changes to node status or router configuration
   * - deleted when a node is destroyed (such as when a user disconnects)
   *
   * @type {NetSimTable}
   * @see {NetSimNode}
   * @see {NetSimClientNode}
   * @see {NetSimRouterNode}
   * @see {NetSimLocalClientNode}
   * @see {NetSimNodeFactory}
   */
  this.nodeTable = new NetSimTable(this.pubSubChannel, shardID, 'n');

  /**
   * Collection of wires on the shard.  Wires document the connections between
   * nodes and certain node metadata, like hostnames and addresses.  Wires
   * reference node IDs, and are therefore referentially dependent on the node
   * table.
   *
   * All entities in this table deserialize into NetSimWire.
   *
   * Rows in this table are
   * - inserted when two nodes are connected
   * - updated when assigning an address
   * - deleted when two nodes are disconnected
   *
   * @type {NetSimTable}
   * @see {NetSimWire}
   */
  this.wireTable = new NetSimTable(this.pubSubChannel, shardID, 'w');

  /**
   * Collection of messages (enqueued or in-flight) on the shard.  Messages
   * reference node IDs, and are therefore referentially dependent on the node
   * table.
   *
   * All entities in this table deserialize into NetSimMessage.
   *
   * Rows in this table are
   * - inserted when a message is sent
   * - never updated
   * - deleted when a message is received
   *
   * @type {NetSimTable}
   * @see {NetSimMessage}
   */
  this.messageTable = new NetSimTable(this.pubSubChannel, shardID, 'm');

  /**
   * Collection of log entries for nodes on the shard.  Logs reference node IDs,
   * and are therefore referentially dependent on the node table (but we should
   * change this).channel
   *
   * All entities in this table deserialize into NetSimLogEntry.
   *
   * Rows in this table are
   * - inserted when a router routes or drops a message
   * - never updated
   * - never deleted
   *
   * @type {NetSimTable}
   * @see {NetSimLogEntry}
   */
  this.logTable = new NetSimTable(this.pubSubChannel, shardID, 'l', {
    // This is only safe to do because we never update or delete rows in this table.
    useIncrementalRefresh: true
  });
  this.logTable.unsubscribe();
};

/**
 * Necessary tear-down for shard.  In particular, disconnecting
 * from pubsub service.
 */
NetSimShard.prototype.disconnect = function () {
  this.nodeTable.unsubscribe();
  this.wireTable.unsubscribe();
  this.messageTable.unsubscribe();
  this.logTable.unsubscribe();
  this.pubSubChannel.unsubscribe(WHOLE_SHARD_EVENT);
  this.pubSubChannel = null;
  this.pubSub.unsubscribe(this.id);
};

/**
 * This tick allows our tables to poll the server for changes.
 * @param {!RunLoop.Clock} clock
 */
NetSimShard.prototype.tick = function (clock) {
  this.nodeTable.tick(clock);
  this.wireTable.tick(clock);
  this.messageTable.tick(clock);
  this.logTable.tick(clock);
};

/**
 * The "panic button" option - clears all data on the shard, kicking all
 * users out and starting over.
 * @param {NodeStyleCallback} onComplete
 */
NetSimShard.prototype.resetEverything = function (onComplete) {
  $.ajax({
    url: '/v3/netsim/' + this.id,
    type: 'delete',
    contentType: 'application/json; charset=utf-8',
    dataType: "json"
  }).done(function () {
    onComplete(null, true);
  }).fail(function (request, status, error) {
    var err = new Error('status: ' + status + '; error: ' + error);
    onComplete(err, false);
  });
};

/**
 * Called when the PubSub service fires an event that applies to all tables
 * @private
 */
NetSimShard.prototype.onPubSubEvent_ = function () {
  // Right now, the only all_tables event is the shard reset.
  // Refreshing the node table informs our node that a reset has occurred.
  // TODO: Use a "disconnect from shard" callback instead here.
  this.nodeTable.refresh();
};

},{"./NetSimTable":"/home/ubuntu/staging/apps/build/js/netsim/NetSimTable.js","./PubSubService":"/home/ubuntu/staging/apps/build/js/netsim/PubSubService.js"}],"/home/ubuntu/staging/apps/build/js/netsim/PubSubService.js":[function(require,module,exports){
/**
 * @overview Wrapped pub/sub service client APIs (like Pusher)
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,

 maxlen: 120
 */
/* global Pusher */
'use strict';

var PubSubChannel = require('./PubSubChannel');

/**
 * JavaScript interface for a publish/subscribe service provider.
 * @param {string} applicationKey
 * @interface
 */
var PubSubService = exports;

/**
 * @typedef {Object} PubSubConfig
 * @property {boolean} usePusher - Whether to use Pusher's API, or a null
 *           implementation.
 * @property {string} pusherApplicationKey - If using Pusher, the public key
 *           required to initialize the Pusher API.
 */

/**
 * Create an API instance appropriate to the current configuration.
 * @param {!PubSubConfig} pubSubConfig
 * @returns {PubSubService}
 */
PubSubService.create = function (pubSubConfig) {
  if (pubSubConfig.usePusher) {
    return new PubSubService.PusherService(pubSubConfig.pusherApplicationKey);
  }

  return new PubSubService.NullService();
};

/**
 * @function
 * @name PubSubService#subscribe
 * @param {string} channelID - Channel to which we subscribe.
 * @returns {PubSubChannel}
 */

/**
 * @function
 * @name PubSubService#unsubscribe
 * @param {string} channelID - Channel from which we unsubscribe.
 */

/**
 * Stub implementation of PubSub API.
 * @constructor
 * @implements PubSubService
 */
// Disable "unused variable" errors for null implementation declarations
/* jshint unused:false */
PubSubService.NullService = function () {};

/**
 * Subscribe to events on a particular channel.
 * @param {string} channelID
 * @returns {PubSubChannel}
 */
PubSubService.NullService.prototype.subscribe = function (channelID) {
  return new PubSubChannel.NullChannel();
};

/**
 * Unsubscribe from events on a particular channel.
 * @param {string} channelID
 */
PubSubService.NullService.prototype.unsubscribe = function (channelID) {};

// Re-enable "unused variable" error
/* jshint unused:true */

/**
 * Wrapped Pusher.com API.
 * @param {string} applicationKey
 * @constructor
 * @implements PubSubService
 */
PubSubService.PusherService = function (applicationKey) {
  /**
   * Instance of actual Pusher JavaScript API.
   * @type {Pusher}
   * @private
   */
  this.api_ = new Pusher(applicationKey, { encrypted: true });
};

/**
 * Subscribe to events on a particular channel.
 * @param {string} channelID
 * @returns {PubSubChannel}
 */
PubSubService.PusherService.prototype.subscribe = function (channelID) {
  return new PubSubChannel.PusherChannel(this.api_.subscribe(channelID));
};

/**
 * Unsubscribe from events on a particular channel.
 * @param {string} channelID
 */
PubSubService.PusherService.prototype.unsubscribe = function (channelID) {
  this.api_.unsubscribe(channelID);
};

},{"./PubSubChannel":"/home/ubuntu/staging/apps/build/js/netsim/PubSubChannel.js"}],"/home/ubuntu/staging/apps/build/js/netsim/PubSubChannel.js":[function(require,module,exports){
/**
 * @overview Wrapped pub/sub service channel APIs (like Pusher's Channel)
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

/**
 * Javascript interface for a publish/subscribe channel.
 * @interface
 */
var PubSubChannel = exports;

/**
 * Subscribe to an event, so that the given callback is called when the
 * event occurs.
 * @function
 * @name PubSubChannel#subscribe
 * @param {string} eventName - The name of the event to bind to.
 * @param {function} callback - A function to be called whenever the event is
 *        triggered.
 */

// Disable "unused variable" errors for null implementation declarations
/* jshint unused:false */

/**
 * @constructor
 * @implements PubSubChannel
 */
PubSubChannel.NullChannel = function () {};

/**
 * Subscribe to an event so the given callback is called when the event occurs.
 * @param {string} eventName - The name of the event to bind to.
 * @param {function} callback - A function to be called whenever the event is
 *        triggered.
 */
PubSubChannel.NullChannel.prototype.subscribe = function (eventName, callback) {};

/**
 * Unsubscribe a given callback from a given event
 * @param {string} eventName
 */
PubSubChannel.NullChannel.prototype.unsubscribe = function (eventName) {};

// Re-enable "unused variable" error
/* jshint unused:true */

/**
 * @constructor
 * @implements PubSubChannel
 */
PubSubChannel.PusherChannel = function (pusherApiChannel) {
  /**
   * The actual Pusher API's channel.
   * @private {Channel}
   */
  this.pusherChannel_ = pusherApiChannel;

  /**
   * Cache provided callbacks for easy unsubscribe.
   * Maps event name to callback.
   * @type {Object}
   * @private
   */
  this.callbacks_ = {};
};

/**
 * Subscribe to an event so the given callback is called when the event occurs.
 * @param {string} eventName
 * @param {function()} callback
 * @throws {Error} on double-subscribe.
 */
PubSubChannel.PusherChannel.prototype.subscribe = function (eventName, callback) {
  this.pusherChannel_.bind(eventName, callback);
  if (this.callbacks_[eventName] !== undefined) {
    throw new Error("Already subscribed to event " + eventName);
  }
  this.callbacks_[eventName] = callback;
};

/**
 * Unsubscribe a given callback from a given event
 * @param {string} eventName
 */
PubSubChannel.PusherChannel.prototype.unsubscribe = function (eventName) {
  this.pusherChannel_.unbind(eventName, this.callbacks_[eventName]);
  delete this.callbacks_[eventName];
};

},{}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimTable.js":[function(require,module,exports){
/**
 * @overview Wraps remote storage interface and polling behavior.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var _ = require('../utils').getLodash();
var ObservableEvent = require('../ObservableEvent');
var NetSimApi = require('./NetSimApi');
var NetSimGlobals = require('./NetSimGlobals');
var ArgumentUtils = require('./ArgumentUtils');

/**
 * Maximum time (in milliseconds) that tables should wait between full cache
 * updates from the server.
 * @type {number}
 */
var DEFAULT_POLLING_DELAY_MS = 10000;

/**
 * Minimum time (in ms) to wait after an invalidation event before attempting
 * to trigger a refresh request.  This produces a window in which clustered
 * invalidations can be captured and coalesced together.
 * @type {number}
 */
var DEFAULT_MINIMUM_DELAY_BEFORE_REFRESH_MS = 250;

/**
 * Maximum additional random delay (in ms) to add before the refresh request.
 * Helps spread out requests from different clients responding to the same
 * invalidation events.
 * @type {number}
 */
var DEFAULT_MAXIMUM_DELAY_JITTER_MS = 200;

/**
 * Minimum time (in ms) to wait between refresh requests, regardless of how
 * many invalidation events occur.
 * @type {number}
 */
var DEFAULT_MINIMUM_DELAY_BETWEEN_REFRESHES_MS = 2500;

/**
 * Wraps the app storage table API in an object with local
 * caching and callbacks, which provides a notification API to the rest
 * of the NetSim code.
 * @param {!PubSubChannel} channel - The pubsub channel used to listen
 *        for changes to the table.cellPadding
 * @param {!string} shardID - The shard ID specific to this class' NetSim instance.
 * @param {!string} tableName - The name of the remote storage table to wrap.
 * @param {Object} [options] - Additional table configuration options
 * @param {boolean} [options.useIncrementalRefresh] - defaults to FALSE.  If
 *        TRUE, this table will only request content that is new since its
 *        last refresh, not the entire table contents.  Currently this option
 *        is not safe to use if you care about updates or deletes in the table.
 * @param {number} [options.minimumDelayBeforeRefresh] - Minimum time (in ms)
 *        to wait after an invalidation event before attempting to trigger a
 *        refresh request.  This produces a window in which clustered
 *        invalidations can be captured and coalesced together.
 * @param {number} [options.maximumJitterDelay] - Maximum additional random
 *        delay (in ms) to add before the refresh request.  Helps spread out
 *        requests from different clients responding to the same invalidation
 *        events.
 * @param {number} [options.minimumDelayBetweenRefreshes] - Minimum time (in ms)
 *        to wait between refresh requests, regardless of how many invalidation
 *        events occur.
 * @constructor
 * @throws {Error} if wrong number of arguments are provided.
 * @throws {TypeError} if invalid types are passed in the options object.
 */
var NetSimTable = module.exports = function (channel, shardID, tableName, options) {
  ArgumentUtils.validateRequired(channel, 'channel');
  ArgumentUtils.validateRequired(shardID, 'shardID', ArgumentUtils.isString);
  ArgumentUtils.validateRequired(tableName, 'tableName', ArgumentUtils.isString);
  options = ArgumentUtils.extendOptionsObject(options);

  /**
   * @private {string}
   */
  this.tableName_ = tableName;

  /**
   * @private {PubSubChannel}
   */
  this.channel_ = channel;
  this.subscribe();

  /**
   * API object for making remote calls
   * @type {NetSimApi}
   * @private
   */
  this.api_ = NetSimApi.makeTableApi(shardID, tableName);

  /**
   * Event that fires when full table updates indicate a change,
   * when rows are added, or when rows are removed, or when rows change.
   * @type {ObservableEvent}
   */
  this.tableChange = new ObservableEvent();

  /**
   * Store table contents locally, so we can detect when changes occur.
   * @private {Object}
   */
  this.cache_ = {};

  /**
   * The row ID of the most recently inserted row retrieved from remote storage.
   * @type {number}
   * @private
   */
  this.latestRowID_ = 0;

  /**
   * Unix timestamp for last time this table's cache contents were fully
   * updated.  Used to determine when to poll the server for changes.
   * @private {number}
   */
  this.lastRefreshTime_ = 0;

  /**
   * If TRUE, will only request deltas from remote storage.  Currently
   * unsafe if we care about more than inserts to the table.
   * @type {boolean}
   * @private
   */
  this.useIncrementalRefresh_ = options.get('useIncrementalRefresh', ArgumentUtils.isBoolean, false);

  /**
   * Minimum time (in ms) to wait after an invalidation event before attempting
   * to trigger a refresh request.  This produces a window in which clustered
   * invalidations can be captured and coalesced together.
   * @private {number}
   */
  this.minimumDelayBeforeRefresh_ = options.get('minimumDelayBeforeRefresh', ArgumentUtils.isPositiveNoninfiniteNumber, DEFAULT_MINIMUM_DELAY_BEFORE_REFRESH_MS);

  /**
   * Maximum additional random delay (in ms) to add before the refresh request.
   * Helps spread out requests from different clients responding to the same
   * invalidation events.
   * @private {number}
   */
  this.maximumJitterDelay_ = options.get('maximumJitterDelay', ArgumentUtils.isPositiveNoninfiniteNumber, DEFAULT_MAXIMUM_DELAY_JITTER_MS);

  /**
   * Minimum time (in ms) to wait between refresh requests, regardless of how
   * many invalidation events occur.
   * @private {number}
   */
  this.minimumDelayBetweenRefreshes_ = options.get('minimumDelayBetweenRefreshes', ArgumentUtils.isPositiveNoninfiniteNumber, DEFAULT_MINIMUM_DELAY_BETWEEN_REFRESHES_MS);

  /**
   * Minimum time (in milliseconds) to wait between pulling full table contents
   * from remote storage.
   * @private {number}
   */
  this.pollingInterval_ = DEFAULT_POLLING_DELAY_MS;

  /**
   * Throttled version (specific to this instance) of the refresh operation,
   * used to coalesce refresh requests.
   * @private {function}
   */
  this.refreshTable_ = this.makeThrottledRefresh_();
};

/**
 * @returns {string} the configured table name.
 */
NetSimTable.prototype.getTableName = function () {
  return this.tableName_;
};

/**
 * Subscribes this table's onPubSubEvent method to events for this table
 * on our local channel.
 */
NetSimTable.prototype.subscribe = function () {
  this.channel_.subscribe(this.tableName_, NetSimTable.prototype.onPubSubEvent_.bind(this));
};

/**
 * Unubscribes the saved callback from events for this table on our
 * local channel.
 */
NetSimTable.prototype.unsubscribe = function () {
  this.channel_.unsubscribe(this.tableName_);
};

/**
 * Asynchronously retrieve new/updated table content from the server, using
 * whatever method is most appropriate to this table's configuration.
 * When done, updates the local cache and hits the provided callback to
 * indicate completion.
 * @param {NodeStyleCallback} [callback] - indicates completion of the operation.
 * @returns {jQuery.Promise} Guaranteed to resolve after the cache update,
 *          so .done() operations can interact with the cache.
 */
NetSimTable.prototype.refresh = function (callback) {
  callback = callback || function () {};
  var deferred = $.Deferred();

  // Which API call to make
  var apiCall = this.useIncrementalRefresh_ ? this.api_.allRowsFromID.bind(this.api_, this.latestRowID_ + 1) : this.api_.allRows.bind(this.api_);

  // How to update the cache (depends on what we expect to get back)
  var cacheUpdate = this.useIncrementalRefresh_ ? this.incrementalCacheUpdate_.bind(this) : this.fullCacheUpdate_.bind(this);

  // What should happen when the API call completes.
  var apiCallCallback = function apiCallCallback(err, data) {
    if (err) {
      callback(err, data);
      deferred.reject(err);
    } else {
      cacheUpdate(data);
      callback(err, data);
      deferred.resolve();
    }
  };

  // Do we fire the API call now, or after a random delay?
  if (this.maximumJitterDelay_ === 0) {
    apiCall(apiCallCallback);
  } else {
    var jitterTime = NetSimGlobals.randomIntInRange(0, this.maximumJitterDelay_);
    setTimeout(apiCall.bind(this, apiCallCallback), jitterTime);
  }

  return deferred.promise();
};

/**
 * Generate throttled refresh function which will generate actual server
 * requests at the maximum given rate no matter how fast it is called. This
 * allows us to coalesce refreshAll events and reduce server load.
 *
 * How this works:
 * Wraps a longer throttle with leading and trailing events in a shorter debounce
 * with a maximum wait time.  This gives grouped events a chance to coalesce
 * without triggering an unneeded trailing event on the longer throttle.
 *
 * Here are some examples of what's going on, if using a 1000ms throttle
 * wrapped in a 250ms debounce.
 *
 * In low traffic we collapse two groups of events to just two events.
 *
 * original events   :   || |                     | |
 * debounced         :   -250>|                   -250>|
 * then throttled    :        |--------------1000->    |--------------1000->
 *
 * In higher traffic we collapse the groups but still keep events at least
 * one second apart.
 *
 * original events   :   || |        |     |      | |
 * debounced         :   -250>|      -250>|-250>| -250>|
 * then throttled    :        |--------------1000->|--------------1000->|
 *
 * @returns {function()}
 * @private
 */
NetSimTable.prototype.makeThrottledRefresh_ = function () {
  var throttledRefresh = _.throttle(this.refresh.bind(this), this.minimumDelayBetweenRefreshes_);
  return _.debounce(throttledRefresh, this.minimumDelayBeforeRefresh_, { maxWait: this.minimumDelayBeforeRefresh_ });
};

/**
 * @returns {Array} all locally cached table rows
 */
NetSimTable.prototype.readAll = function () {
  return this.arrayFromCache_();
};

/**
 * @param {!number} firstRowID
 * @returns {Array} all locally cached table rows having row ID >= firstRowID
 */
NetSimTable.prototype.readAllFromID = function (firstRowID) {
  return this.arrayFromCache_(function (key) {
    return key >= firstRowID;
  });
};

/**
 * @param {!number} id
 * @param {!NodeStyleCallback} callback
 */
NetSimTable.prototype.read = function (id, callback) {
  this.api_.fetchRow(id, (function (err, data) {
    if (err === null) {
      this.updateCacheRow_(id, data);
    }
    callback(err, data);
  }).bind(this));
};

/**
 * @param {Object} value
 * @param {!NodeStyleCallback} callback
 */
NetSimTable.prototype.create = function (value, callback) {
  this.api_.createRow(value, (function (err, data) {
    if (err === null) {
      this.addRowToCache_(data);
    }
    callback(err, data);
  }).bind(this));
};

/**
 * @param {Object[]} values
 * @param {!NodeStyleCallback} callback
 */
NetSimTable.prototype.multiCreate = function (values, callback) {
  this.api_.createRow(values, (function (err, datas) {
    if (err === null) {
      datas.forEach(function (data) {
        this.addRowToCache_(data);
      }, this);
    }
    callback(err, datas);
  }).bind(this));
};

/**
 * @param {!number} id
 * @param {Object} value
 * @param {!NodeStyleCallback} callback
 */
NetSimTable.prototype.update = function (id, value, callback) {
  this.api_.updateRow(id, value, (function (err, success) {
    if (err === null) {
      this.updateCacheRow_(id, value);
    }
    callback(err, success);
  }).bind(this));
};

/**
 * @param {!number} id
 * @param {!NodeStyleCallback} callback
 */
NetSimTable.prototype['delete'] = function (id, callback) {
  this.deleteMany([id], callback);
};

/**
 * Deletes multiple rows from the table.
 * @param {!number[]} ids
 * @param {!NodeStyleCallback} callback
 */
NetSimTable.prototype.deleteMany = function (ids, callback) {
  this.api_.deleteRows(ids, (function (err, success) {
    if (err === null) {
      this.removeRowsFromCache_(ids);
    }
    callback(err, success);
  }).bind(this));
};

/**
 * Delete a row using a synchronous call. For use when navigating away from
 * the page; most of the time an asynchronous call is preferred.
 * @param {!number} id
 */
NetSimTable.prototype.synchronousDelete = function (id) {
  var async = false; // Force synchronous request
  this.api_.deleteRows([id], (function (err) {
    if (err) {
      // Nothing we can really do with the error, as we're in the process of
      // navigating away. Throw so that high incidence rates will show up in
      // new relic.
      throw err;
    }
    this.removeRowsFromCache_([id]);
  }).bind(this), async);
};

/**
 * @param {Array} allRows
 * @private
 */
NetSimTable.prototype.fullCacheUpdate_ = function (allRows) {
  // Rebuild entire cache
  var maxRowID = 0;
  var newCache = allRows.reduce(function (prev, currentRow) {
    prev[currentRow.id] = currentRow;
    if (currentRow.id > maxRowID) {
      maxRowID = currentRow.id;
    }
    return prev;
  }, {});

  // Check for changes, if anything changed notify all observers on table.
  if (!_.isEqual(this.cache_, newCache)) {
    this.cache_ = newCache;
    this.latestRowID_ = maxRowID;
    this.tableChange.notifyObservers();
  }

  this.lastRefreshTime_ = Date.now();
};

/**
 * Add and update rows in the local cache from the given set of new rows
 * (probably retrieved from the server).
 * @param {Array} newRows
 * @private
 */
NetSimTable.prototype.incrementalCacheUpdate_ = function (newRows) {
  if (newRows.length > 0) {
    var maxRowID = 0;
    newRows.forEach(function (row) {
      this.cache_[row.id] = row;
      maxRowID = Math.max(maxRowID, row.id);
    }, this);
    this.latestRowID_ = maxRowID;
    this.tableChange.notifyObservers();
  }

  this.lastRefreshTime_ = Date.now();
};

/**
 * @param {!Object} row
 * @param {!number} row.id
 * @private
 */
NetSimTable.prototype.addRowToCache_ = function (row) {
  this.cache_[row.id] = row;
  this.tableChange.notifyObservers();
};

/**
 * @param {!number[]} ids
 * @private
 */
NetSimTable.prototype.removeRowsFromCache_ = function (ids) {
  var cacheChanged = false;
  ids.forEach(function (id) {
    if (this.cache_[id] !== undefined) {
      delete this.cache_[id];
      cacheChanged = true;
    }
  }, this);

  if (cacheChanged) {
    this.tableChange.notifyObservers();
  }
};

/**
 * @param {!number} id
 * @param {!Object} row
 * @private
 */
NetSimTable.prototype.updateCacheRow_ = function (id, row) {
  var oldRow = this.cache_[id];
  var newRow = row;

  // Manually apply IDs which should be present in row.
  newRow.id = id;
  newRow.uuid = oldRow.uuid;

  if (!_.isEqual(oldRow, newRow)) {
    this.cache_[id] = newRow;
    this.tableChange.notifyObservers();
  }
};

/**
 * @param {function(key, value)} [predicate] - A condition on returning the row.
 * @returns {Array}
 * @private
 */
NetSimTable.prototype.arrayFromCache_ = function (predicate) {
  predicate = predicate || function () {
    return true;
  };
  var result = [];
  for (var k in this.cache_) {
    if (this.cache_.hasOwnProperty(k) && predicate(k, this.cache_[k])) {
      result.push(this.cache_[k]);
    }
  }
  return result;
};

/**
 * Changes how often this table fetches a full table update from the
 * server.
 * @param {number} intervalMs - milliseconds of delay between updates.
 */
NetSimTable.prototype.setPollingInterval = function (intervalMs) {
  this.pollingInterval_ = intervalMs;
};

/**
 * Change the maximum rate at which the refresh operation for this table
 * will _actually_ be executed, no matter how fast we receive invalidations.
 * @param {number} delayMs - Minimum number of milliseconds
 *        between invalidation-triggered requests to the server.
 */
NetSimTable.prototype.setMinimumDelayBetweenRefreshes = function (delayMs) {
  // To do this, we just replace the throttled refresh function with a new one.
  this.minimumDelayBetweenRefreshes_ = delayMs;
  this.refreshTable_ = this.makeThrottledRefresh_();
};

/**
 * Change the minimum time (in ms) to wait after an invalidation event before
 * attempting to trigger a refresh request.  This produces a window in which
 * clustered invalidations can be captured and coalesced together.
 * @param {number} delayMs - Minimum number of milliseconds between first
 *        invalidation and request to server.
 */
NetSimTable.prototype.setMinimumDelayBeforeRefresh = function (delayMs) {
  // To do this, we just replace the throttled refresh function with a new one.
  this.minimumDelayBeforeRefresh_ = delayMs;
  this.refreshTable_ = this.makeThrottledRefresh_();
};

/**
 * Change the Maximum additional random delay (in ms) to add before the refresh
 * request.  Helps spread out requests from different clients responding to the
 * same events.
 * @param {number} delayMs - Maximum number of milliseconds to add before
 *        refresh request fires.
 */
NetSimTable.prototype.setMaximumJitterDelay = function (delayMs) {
  // To do this, we just replace the throttled refresh function with a new one.
  this.maximumJitterDelay_ = delayMs;
};

/** Polls server for updates, if it's been long enough. */
NetSimTable.prototype.tick = function () {
  var now = Date.now();
  if (now - this.lastRefreshTime_ >= this.pollingInterval_) {
    this.lastRefreshTime_ = now;
    this.refreshTable_();
  }
};

/**
 * Called when the PubSub service fires an event that this table is subscribed to.
 * @private
 */
NetSimTable.prototype.onPubSubEvent_ = function () {
  this.refreshTable_();
};

},{"../ObservableEvent":"/home/ubuntu/staging/apps/build/js/ObservableEvent.js","../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./ArgumentUtils":"/home/ubuntu/staging/apps/build/js/netsim/ArgumentUtils.js","./NetSimApi":"/home/ubuntu/staging/apps/build/js/netsim/NetSimApi.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimSendPanel.js":[function(require,module,exports){
/**
 * @overview UI controller for the send panel (the bottom panel on the right)
 *           which is used to transmit packets.
 * @see NetSimPacketEditor which is used extensively here.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var utils = require('../utils');
var i18n = require('./locale');
var markup = require('./NetSimSendPanel.html.ejs');
var NetSimPanel = require('./NetSimPanel');
var NetSimPacketEditor = require('./NetSimPacketEditor');
var NetSimPacketSizeControl = require('./NetSimPacketSizeControl');
var Packet = require('./Packet');
var DataConverters = require('./DataConverters');
var NetSimConstants = require('./NetSimConstants');
var NetSimGlobals = require('./NetSimGlobals');

var EncodingType = NetSimConstants.EncodingType;
var MessageGranularity = NetSimConstants.MessageGranularity;
var BITS_PER_BYTE = NetSimConstants.BITS_PER_BYTE;

var binaryToAB = DataConverters.binaryToAB;

var logger = require('./NetSimLogger').getSingleton();

/**
 * Generator and controller for message sending view.
 * @param {jQuery} rootDiv
 * @param {NetSimLevelConfiguration} levelConfig
 * @param {NetSim} netsim
 * @constructor
 * @augments NetSimPanel
 */
var NetSimSendPanel = module.exports = function (rootDiv, levelConfig, netsim) {

  /**
   * @type {NetSimLevelConfiguration}
   * @private
   */
  this.levelConfig_ = levelConfig;

  /**
   * @type {Packet.HeaderType[]}
   * @private
   */
  this.packetSpec_ = levelConfig.clientInitialPacketHeader;

  /**
   * Connection that owns the router we will represent / manipulate
   * @type {NetSim}
   * @private
   */
  this.netsim_ = netsim;

  /**
   * List of controllers for packets currently being edited.
   * @type {NetSimPacketEditor[]}
   * @private
   */
  this.packets_ = [];

  /**
   * Our local node's address, zero until assigned by a router.
   * @type {number}
   * @private
   */
  this.fromAddress_ = 0;

  /**
   * Maximum packet length configurable by slider.
   * @type {number}
   * @private
   */
  this.maxPacketSize_ = levelConfig.defaultPacketSizeLimit;

  /**
   * Byte-size used for formatting binary and for interpreting it
   * to decimal or ASCII.
   * @type {number}
   * @private
   */
  this.chunkSize_ = BITS_PER_BYTE;

  /**
   * Local device bitrate in bits-per-second, which affects send animation
   * speed.
   * @type {number}
   * @private
   */
  this.bitRate_ = Infinity;

  /**
   * What encodings are currently selected and displayed in each
   * packet and packet editor.
   * @type {EncodingType[]}
   * @private
   */
  this.enabledEncodings_ = levelConfig.defaultEnabledEncodings;

  /**
   * Reference to parent div of packet editor list, for adding and
   * removing packet editors.
   * @type {jQuery}
   * @private
   */
  this.packetsDiv_ = null;

  /**
   * @type {NetSimPacketSizeControl}
   * @private
   */
  this.packetSizeControl_ = null;

  /**
   * Flag for whether this panel is in "sending" mode, non-interactive while
   * it animates the send process for the current message.
   * @type {boolean}
   * @private
   */
  this.isPlayingSendAnimation_ = false;

  var panelTitle = levelConfig.messageGranularity === MessageGranularity.PACKETS ? i18n.sendAMessage() : i18n.sendBits();

  // TODO: Bad private member access
  this.netsim_.runLoop_.tick.register(this.tick.bind(this));

  NetSimPanel.call(this, rootDiv, {
    className: 'netsim-send-panel',
    panelTitle: panelTitle
  });
};
NetSimSendPanel.inherits(NetSimPanel);

/**
 * Puts send panel in a "sending packets" noninteractive state and begins
 * sending packets to remote.
 * @private
 */
NetSimSendPanel.prototype.beginSendingPackets_ = function () {
  if (0 === this.packets_.length) {
    return;
  }

  this.isPlayingSendAnimation_ = true;
  this.disableEverything();
  this.packets_[0].beginSending(this.netsim_.myNode);
};

/**
 * Callback for when an individual packet finishes its send animation.
 * Most of the time the packet gets removed and the next packet begins its
 * animation.
 * If it's the last packet, we finish sending and perform a packet editor
 * reset instead.
 * @param {NetSimPacketEditor} packet
 * @private
 */
NetSimSendPanel.prototype.doneSendingPacket_ = function (packet) {
  // If it's the last packet, we're done sending altogether.
  if (1 === this.packets_.length) {
    this.resetPackets_();
    this.enableEverything();
    this.packets_[0].getFirstVisibleMessageBox().focus();
    this.isPlayingSendAnimation_ = false;
    return;
  }

  // Remove the completed packet and start sending the next one.
  this.removePacket_(packet);
  this.packets_[0].beginSending(this.netsim_.myNode);
};

/**
 * Send panel uses its tick to "send" packets at different bitrates, animating
 * the binary draining out of the widget and actually posting each packet
 * to storage as it completes.
 * @param {RunLoop.Clock} clock
 */
NetSimSendPanel.prototype.tick = function (clock) {
  if (this.isPlayingSendAnimation_ && this.packets_.length > 0) {
    this.packets_[0].tick(clock);
  }
};

/** Replace contents of our root element with our own markup. */
NetSimSendPanel.prototype.render = function () {
  // Render boilerplate panel stuff
  NetSimSendPanel.superPrototype.render.call(this);

  // Put our own content into the panel body
  var newMarkup = $(markup({
    level: this.levelConfig_
  }));
  this.getBody().html(newMarkup);

  // Add packet size slider control
  if (this.levelConfig_.showPacketSizeControl) {
    var level = NetSimGlobals.getLevelConfig();
    var encoder = new Packet.Encoder(level.addressFormat, level.packetCountBitWidth, this.packetSpec_);
    this.packetSizeControl_ = new NetSimPacketSizeControl(this.rootDiv_.find('.packet-size'), this.packetSizeChangeCallback_.bind(this), {
      minimumPacketSize: encoder.getHeaderLength(),
      sliderStepValue: 1
    });
    this.packetSizeControl_.setValue(this.maxPacketSize_);
  }

  // Bind useful elements and add handlers
  this.packetsDiv_ = this.getBody().find('.send-panel-packets');
  this.getBody().find('#add-packet-button').click(this.onAddPacketButtonPress_.bind(this));
  // TODO: NetSim buttons in this panel need to do nothing if disabled!
  this.getBody().find('#send-button').click(this.onSendEventTriggered_.bind(this));
  this.getBody().find('#set-wire-button').click(this.onSendEventTriggered_.bind(this));

  // Note: At some point, we might want to replace this with something
  // that nicely re-renders the contents of this.packets_... for now,
  // we only call render for set-up, so it's okay.
  this.resetPackets_();
};

/**
 * Add a new, blank packet to the set of packets being edited.
 * @private
 */
NetSimSendPanel.prototype.addPacket_ = function () {
  var newPacketCount = this.packets_.length + 1;

  // Update the total packet count on all existing packets
  this.packets_.forEach(function (packetEditor) {
    packetEditor.setPacketCount(newPacketCount);
  });

  // Copy the to address of the previous packet if it exists. Otherwise
  // use the last address sent.
  // TODO: Do we need to lock the toAddress for all of these packets together?
  var newPacketToAddress;
  if (this.packets_.length > 0) {
    newPacketToAddress = this.packets_[this.packets_.length - 1].toAddress;
  } else {
    newPacketToAddress = '0';
  }

  // Create a new packet
  var newPacket = new NetSimPacketEditor({
    messageGranularity: this.levelConfig_.messageGranularity,
    packetSpec: this.packetSpec_,
    toAddress: newPacketToAddress,
    fromAddress: this.fromAddress_,
    packetIndex: newPacketCount,
    packetCount: newPacketCount,
    maxPacketSize: this.maxPacketSize_,
    chunkSize: this.chunkSize_,
    bitRate: this.bitRate_,
    enabledEncodings: this.enabledEncodings_,
    removePacketCallback: this.removePacket_.bind(this),
    doneSendingCallback: this.doneSendingPacket_.bind(this),
    contentChangeCallback: this.onContentChange_.bind(this),
    enterKeyPressedCallback: this.onSendEventTriggered_.bind(this)
  });

  // Attach the new packet to this SendPanel
  var updateLayout = this.netsim_.updateLayout.bind(this.netsim_);
  newPacket.getRoot().appendTo(this.packetsDiv_);
  newPacket.getRoot().hide().slideDown('fast', function () {
    newPacket.getFirstVisibleMessageBox().focus();
    updateLayout();
  });
  this.packets_.push(newPacket);
};

/**
 * Remove a packet from the send panel, and adjust other packets for
 * consistency.
 * @param {NetSimPacketEditor} packet
 * @private
 */
NetSimSendPanel.prototype.removePacket_ = function (packet) {
  // Remove from DOM
  var updateLayout = this.netsim_.updateLayout.bind(this.netsim_);
  packet.getRoot().slideUp('fast', function () {
    $(this).remove();
    updateLayout();
  });

  // Remove from internal collection
  this.packets_ = this.packets_.filter(function (packetEditor) {
    return packetEditor !== packet;
  });

  // Adjust numbering of remaining packets if we're not mid-send
  if (!this.isPlayingSendAnimation_) {
    var packetCount = this.packets_.length;
    var packetIndex;
    for (var i = 0; i < packetCount; i++) {
      packetIndex = i + 1;
      this.packets_[i].setPacketIndex(packetIndex);
      this.packets_[i].setPacketCount(packetCount);
    }
  }
};

/**
 * Reset the editor to its 'empty' state: Remove all but the first packet,
 * and reset the first packet to empty.
 * @private
 */
NetSimSendPanel.prototype.resetPackets_ = function () {
  if (this.packets_.length > 0) {
    this.packetsDiv_.children().slice(1).remove();
    this.packets_.length = Math.min(1, this.packets_.length);
    this.packets_[0].resetPacket();
  } else {
    this.addPacket_();
  }
};

/**
 * When any packet editor's binary content changes, we may want
 * to update UI wrapper elements (like the "set next bit" button)
 * in response
 * @private
 */
NetSimSendPanel.prototype.onContentChange_ = function () {
  var nextBit = this.getNextBit_();

  if (nextBit === undefined) {
    // If there are no bits queued up, disable the button
    this.getSetWireButton().text(i18n.setWire());
    this.conditionallyToggleSetWireButton();
  } else {
    // Special case: If we have the "A/B" encoding enabled but _not_ "Binary",
    // format this button label using the "A/B" convention
    if (this.isEncodingEnabled_(EncodingType.A_AND_B) && !this.isEncodingEnabled_(EncodingType.BINARY)) {
      nextBit = binaryToAB(nextBit);
    }

    this.getSetWireButton().text(i18n.setWireToValue({ value: nextBit }));
    this.conditionallyToggleSetWireButton();
  }
};

/**
 * Check whether the given encoding is currently displayed by the panel.
 * @param {EncodingType} queryEncoding
 * @returns {boolean}
 * @private
 */
NetSimSendPanel.prototype.isEncodingEnabled_ = function (queryEncoding) {
  return this.enabledEncodings_.some(function (enabledEncoding) {
    return enabledEncoding === queryEncoding;
  });
};

/**
 * Update from address for the panel, update all the packets to reflect this.
 * @param {number} [fromAddress] default zero
 */
NetSimSendPanel.prototype.setFromAddress = function (fromAddress) {
  // fromAddress can be undefined for other parts of the sim, but within
  // the send panel we just set it to zero.
  this.fromAddress_ = utils.valueOr(fromAddress, 0);

  this.packets_.forEach((function (packetEditor) {
    packetEditor.setFromAddress(this.fromAddress_);
  }).bind(this));
};

/**
 * @param {Event} jQueryEvent
 * @private
 */
NetSimSendPanel.prototype.onAddPacketButtonPress_ = function (jQueryEvent) {
  var thisButton = $(jQueryEvent.target);
  if (thisButton.is('[disabled]')) {
    return;
  }

  this.addPacket_();

  // Scroll to end of packet area
  var scrollingArea = this.getBody().find('.send-panel-packets');
  scrollingArea.animate({ scrollTop: scrollingArea[0].scrollHeight }, 'fast');
};

/**
 * Send message to connected remote
 * @param {Event} jQueryEvent
 * @private
 */
NetSimSendPanel.prototype.onSendEventTriggered_ = function (jQueryEvent) {
  var triggeringTarget = $(jQueryEvent.target);
  if (triggeringTarget.is('[disabled]')) {
    return;
  }

  var level = NetSimGlobals.getLevelConfig();
  if (level.messageGranularity === MessageGranularity.PACKETS) {
    this.beginSendingPackets_();
  } else if (level.messageGranularity === MessageGranularity.BITS) {
    this.sendOneBit_();
  }
};

/**
 * Send a single bit, manually 'setting the wire state'.
 * @private
 */
NetSimSendPanel.prototype.sendOneBit_ = function () {
  var myNode = this.netsim_.myNode;
  if (!myNode) {
    throw new Error("Tried to set wire state when no connection is established.");
  }

  // Find the first bit of the first packet. Disallow setting the wire
  // if there is no first bit.
  var nextBit = this.getNextBit_();
  if (nextBit === undefined) {
    throw new Error("Tried to set wire state when no bit is queued.");
  } else {
    this.disableEverything();
    this.netsim_.animateSetWireState(nextBit);
    myNode.setSimplexWireState(nextBit, (function (err) {
      if (err) {
        logger.warn(err.message);
        return;
      }

      this.consumeFirstBit();
      this.enableEverything();
      this.conditionallyToggleSetWireButton();
    }).bind(this));
  }
};

/**
 * Get the next bit that would be sent, if sending the entered message one
 * bit at a time.
 * @returns {string|undefined} single bit as a "0" or "1" if there are
 * bits to be sent, or undefined otherwise
 * @private
 */
NetSimSendPanel.prototype.getNextBit_ = function () {
  return this.packets_.length > 0 ? this.packets_[0].getFirstBit() : undefined;
};

/** Disable all controls in this panel, usually during network activity. */
NetSimSendPanel.prototype.disableEverything = function () {
  this.getBody().find('input, textarea').prop('disabled', true);
  this.getBody().find('.netsim-button').attr('disabled', 'disabled');
  if (this.packetSizeControl_) {
    this.packetSizeControl_.disable();
  }
};

/**
 * Finds the button used to set the wire state
 * @returns {jQuery}
 */
NetSimSendPanel.prototype.getSetWireButton = function () {
  return this.getBody().find('#set-wire-button');
};

/** Enables the setWireButton if there is another bit in the queue,
 * disables it otherwise.
 * @returns {jQuery}
 */
NetSimSendPanel.prototype.conditionallyToggleSetWireButton = function () {
  var setWireButton = this.getSetWireButton();
  if (this.getNextBit_() === undefined) {
    setWireButton.attr('disabled', 'disabled');
  } else {
    setWireButton.removeAttr('disabled');
  }
  return setWireButton;
};

/** Enable all controls in this panel, usually after network activity. */
NetSimSendPanel.prototype.enableEverything = function () {
  this.getBody().find('input, textarea').prop('disabled', false);
  this.getBody().find('.netsim-button').removeAttr('disabled');
  if (this.packetSizeControl_) {
    this.packetSizeControl_.enable();
  }
};

/**
 * Remove the first bit of the first packet, usually because we just sent
 * a single bit in variant 1.
 */
NetSimSendPanel.prototype.consumeFirstBit = function () {
  if (this.packets_.length > 0) {
    this.packets_[0].consumeFirstBit();
    if (this.packets_[0].getPacketBinary() === '' && this.packets_.length > 1) {
      this.removePacket_(this.packets_[0]);
    }
  }
};

/**
 * Show or hide parts of the send UI based on the currently selected encoding
 * mode.
 * @param {EncodingType[]} newEncodings
 */
NetSimSendPanel.prototype.setEncodings = function (newEncodings) {
  this.enabledEncodings_ = newEncodings;
  this.packets_.forEach(function (packetEditor) {
    packetEditor.setEncodings(newEncodings);
  });
  this.onContentChange_();
};

/**
 * Change how data is interpreted and formatted by this component, triggering
 * an update of all input fields.
 * @param {number} newChunkSize
 */
NetSimSendPanel.prototype.setChunkSize = function (newChunkSize) {
  this.chunkSize_ = newChunkSize;
  this.packets_.forEach(function (packetEditor) {
    packetEditor.setChunkSize(newChunkSize);
  });
};

/**
 * Change the local device bitrate which affects send animation speed.
 * @param {number} newBitRate in bits per second
 */
NetSimSendPanel.prototype.setBitRate = function (newBitRate) {
  this.bitRate_ = newBitRate;
  this.packets_.forEach(function (packetEditor) {
    packetEditor.setBitRate(newBitRate);
  });
};

/**
 * Callback passed down into packet size control, called when packet size
 * is changed by the user.
 * @param {number} newPacketSize
 * @private
 */
NetSimSendPanel.prototype.packetSizeChangeCallback_ = function (newPacketSize) {
  this.maxPacketSize_ = newPacketSize;
  this.packets_.forEach(function (packetEditor) {
    packetEditor.setMaxPacketSize(newPacketSize);
  });
};

/**
 * After toggling panel visibility, trigger a layout update so send/log panel
 * space is shared correctly.
 * @private
 * @override
 */
NetSimSendPanel.prototype.onMinimizerClick_ = function () {
  NetSimSendPanel.superPrototype.onMinimizerClick_.call(this);
  this.netsim_.updateLayout();
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./DataConverters":"/home/ubuntu/staging/apps/build/js/netsim/DataConverters.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimLogger":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogger.js","./NetSimPacketEditor":"/home/ubuntu/staging/apps/build/js/netsim/NetSimPacketEditor.js","./NetSimPacketSizeControl":"/home/ubuntu/staging/apps/build/js/netsim/NetSimPacketSizeControl.js","./NetSimPanel":"/home/ubuntu/staging/apps/build/js/netsim/NetSimPanel.js","./NetSimSendPanel.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimSendPanel.html.ejs","./Packet":"/home/ubuntu/staging/apps/build/js/netsim/Packet.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimSendPanel.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
  var i18n = require('./locale');
  var MessageGranularity = require('./NetSimConstants').MessageGranularity;
; buf.push('\n<div class="send-panel-packets"></div>\n<div class="panel-footer">\n  <div class="right-side-controls">\n    ');8; if (level.showAddPacketButton) { ; buf.push('\n      <span class="netsim-button secondary large-button" id="add-packet-button">', escape((9,  i18n.addPacket() )), '</span>\n    ');10; } ; buf.push('\n    ');11; if (level.messageGranularity === MessageGranularity.PACKETS) { ; buf.push('\n      <span class="netsim-button large-button" id="send-button">', escape((12,  i18n.send() )), '</span>\n    ');13; } else if (level.messageGranularity === MessageGranularity.BITS) { ; buf.push('\n      <span class="netsim-button large-button" id="set-wire-button">', escape((14,  i18n.setWire() )), '</span>\n    ');15; } ; buf.push('\n  </div>\n  <div class="packet-size"></div>\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterTab.js":[function(require,module,exports){
/**
 * @overview UI controller for the "Router" tab in the left column.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var markup = require('./NetSimRouterTab.html.ejs');
var NetSimBandwidthControl = require('./NetSimBandwidthControl');
var NetSimMemoryControl = require('./NetSimMemoryControl');
var NetSimRouterStatsTable = require('./NetSimRouterStatsTable');
var NetSimGlobals = require('./NetSimGlobals');

/**
 * Generator and controller for router information view.
 * @param {jQuery} rootDiv - Parent element for this component.
 * @param {Object} callbacks
 * @param {function} callbacks.bandwidthSliderChangeCallback
 * @param {function} callbacks.bandwidthSliderStopCallback
 * @param {function} callbacks.memorySliderChangeCallback
 * @param {function} callbacks.memorySliderStopCallback
 * @constructor
 */
var NetSimRouterTab = module.exports = function (rootDiv, callbacks) {
  /**
   * Component root, which we fill whenever we call render()
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = rootDiv;

  /**
   * @type {function}
   * @private
   */
  this.bandwidthSliderChangeCallback_ = callbacks.bandwidthSliderChangeCallback;

  /**
   * @type {function}
   * @private
   */
  this.bandwidthSliderStopCallback_ = callbacks.bandwidthSliderStopCallback;

  /**
   * @type {function}
   * @private
   */
  this.memorySliderChangeCallback_ = callbacks.memorySliderChangeCallback;

  /**
   * @type {function}
   * @private
   */
  this.memorySliderStopCallback_ = callbacks.memorySliderStopCallback;

  /**
   * @type {NetSimRouterStatsTable}
   * @private
   */
  this.routerStatsTable_ = null;

  /**
   * @type {NetSimBandwidthControl}
   * @private
   */
  this.bandwidthControl_ = null;

  /**
   * @type {NetSimMemoryControl}
   * @private
   */
  this.memoryControl_ = null;

  // Initial render
  this.render();
};

/**
 * @param {RunLoop} runLoop
 */
NetSimRouterTab.prototype.attachToRunLoop = function (runLoop) {
  if (this.routerStatsTable_) {
    this.routerStatsTable_.attachToRunLoop(runLoop);
  }
};

/**
 * Fill the root div with new elements reflecting the current state.
 */
NetSimRouterTab.prototype.render = function () {
  var levelConfig = NetSimGlobals.getLevelConfig();

  var renderedMarkup = $(markup({
    level: levelConfig
  }));
  this.rootDiv_.html(renderedMarkup);
  this.routerStatsTable_ = new NetSimRouterStatsTable(this.rootDiv_.find('.router-stats'));
  if (levelConfig.showRouterBandwidthControl) {
    this.bandwidthControl_ = new NetSimBandwidthControl(this.rootDiv_.find('.bandwidth-control'), this.bandwidthSliderChangeCallback_, this.bandwidthSliderStopCallback_);
  }
  if (levelConfig.showRouterMemoryControl) {
    this.memoryControl_ = new NetSimMemoryControl(this.rootDiv_.find('.memory-control'), this.memorySliderChangeCallback_, this.memorySliderStopCallback_);
  }
};

/**
 * @param {NetSimLogEntry[]} logData
 */
NetSimRouterTab.prototype.setRouterLogData = function (logData) {
  if (this.routerStatsTable_) {
    this.routerStatsTable_.setRouterLogData(logData);
  }
};

/** @param {number} creationTimestampMs */
NetSimRouterTab.prototype.setRouterCreationTime = function (creationTimestampMs) {
  if (this.routerStatsTable_) {
    this.routerStatsTable_.setRouterCreationTime(creationTimestampMs);
  }
};

/**
 * @param {number} newBandwidth in bits/second
 */
NetSimRouterTab.prototype.setBandwidth = function (newBandwidth) {
  if (this.bandwidthControl_) {
    this.bandwidthControl_.setValue(newBandwidth);
  }
  if (this.routerStatsTable_) {
    this.routerStatsTable_.setBandwidth(newBandwidth);
  }
};

/** @param {number} newMemory in bits/second */
NetSimRouterTab.prototype.setMemory = function (newMemory) {
  if (this.memoryControl_) {
    this.memoryControl_.setValue(newMemory);
  }
  if (this.routerStatsTable_) {
    this.routerStatsTable_.setTotalMemory(newMemory);
  }
};

/**
 * @param {number} queuedPacketCount
 */
NetSimRouterTab.prototype.setRouterQueuedPacketCount = function (queuedPacketCount) {
  if (this.routerStatsTable_) {
    this.routerStatsTable_.setRouterQueuedPacketCount(queuedPacketCount);
  }
};

/** @param {number} usedMemoryInBits */
NetSimRouterTab.prototype.setMemoryInUse = function (usedMemoryInBits) {
  if (this.routerStatsTable_) {
    this.routerStatsTable_.setMemoryInUse(usedMemoryInBits);
  }
};

/** @param {number} dataRateBitsPerSecond */
NetSimRouterTab.prototype.setDataRate = function (dataRateBitsPerSecond) {
  if (this.routerStatsTable_) {
    this.routerStatsTable_.setDataRate(dataRateBitsPerSecond);
  }
};

},{"./NetSimBandwidthControl":"/home/ubuntu/staging/apps/build/js/netsim/NetSimBandwidthControl.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimMemoryControl":"/home/ubuntu/staging/apps/build/js/netsim/NetSimMemoryControl.js","./NetSimRouterStatsTable":"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterStatsTable.js","./NetSimRouterTab.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterTab.html.ejs"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterTab.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
var i18n = require('./locale');
; buf.push('\n<div class="netsim-router-tab">\n  <h1>', escape((5,  i18n.routerTab_stats() )), '</h1>\n  <div class="router-stats"></div>\n  ');7; if (level.showRouterBandwidthControl) { ; buf.push('\n    <h1>', escape((8,  i18n.routerTab_bandwidth() )), '</h1>\n    <div class="bandwidth-control"></div>\n  ');10; } ; buf.push('\n  ');11; if (level.showRouterMemoryControl) { ; buf.push('\n    <h1>', escape((12,  i18n.routerTab_memory() )), '</h1>\n    <div class="memory-control"></div>\n  ');14; } ; buf.push('\n  <h1>', escape((15,  i18n.routerTab_logs() )), '</h1>\n  <span class="secondary netsim-button large-button" id="show-router-log-modal-two" data-toggle="modal" data-target="#router-log-modal">', escape((16,  i18n.logBrowserButton() )), '</span>\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterStatsTable.js":[function(require,module,exports){
/**
 * @overview UI component displaying router stats on the "Router" tab.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var markup = require('./NetSimRouterStatsTable.html.ejs');
var NetSimUtils = require('./NetSimUtils');
var NetSimLogEntry = require('./NetSimLogEntry');

/**
 * Render every half-second, minimum.
 * @type {number}
 * @const
 */
var MAX_RENDER_DELAY_MS = 500;

/**
 * @type {number}
 * @const
 */
var MILLIS_PER_SECOND = 1000;

/**
 * @type {number}
 * @const
 */
var SECONDS_PER_MINUTE = 60;

/**
 * @type {number}
 * @const
 */
var MILLIS_PER_MINUTE = MILLIS_PER_SECOND * SECONDS_PER_MINUTE;

/**
 * @type {number}
 * @const
 */
var MINUTES_PER_HOUR = 60;

/**
 * @type {number}
 * @const
 */
var MILLIS_PER_HOUR = MILLIS_PER_MINUTE * MINUTES_PER_HOUR;

/**
 * Generator and controller for DNS network lookup table component.
 * Shows different amounts of information depending on the DNS mode.
 *
 * @param {jQuery} rootDiv
 * @constructor
 */
var NetSimRouterStatsTable = module.exports = function (rootDiv) {
  /**
   * Component root, which we fill whenever we call render()
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = rootDiv;

  /**
   * Last render time, in simulation-time.
   * @type {number}
   * @private
   */
  this.lastRenderTime_ = null;

  /**
   * Unix timestamp (local) of router creation time
   * @type {number}
   * @private
   */
  this.routerCreationTime_ = 0;

  /**
   * Total count of packets this router has received.
   * @type {number}
   * @private
   */
  this.totalPackets_ = 0;

  /**
   * Total count of packets this router has successfully processed.
   * @type {number}
   * @private
   */
  this.successfulPackets_ = 0;

  /**
   * Total size of all packets received by this router, in bits.
   * @type {number}
   * @private
   */
  this.totalData_ = 0;

  /**
   * Total size of all packets successfully processed by this router, in bits.
   * @type {number}
   * @private
   */
  this.successfulData_ = 0;

  /**
   * Maximum rate of data transfer (in bits per second)
   * @type {number}
   * @private
   */
  this.bandwidthLimit_ = 0;

  /**
   * Average rate of data transfer (in bits per second) over the last
   * DATA_RATE_WINDOW_MS milliseconds.
   * @type {number}
   * @private
   */
  this.dataRate_ = 0;

  /**
   * Router's total memory capacity, in bits.
   * @type {number}
   * @private
   */
  this.totalMemory_ = 0;

  /**
   * Number of packets in the router's queue.
   * @type {number}
   * @private
   */
  this.queuedPackets_ = 0;

  /**
   * Current size of the router's packet queue, in bits.
   * @type {number}
   * @private
   */
  this.usedMemory_ = 0;

  this.render({});
};

/**
 * @param {RunLoop} runLoop
 */
NetSimRouterStatsTable.prototype.attachToRunLoop = function (runLoop) {
  runLoop.render.register(this.render.bind(this));
};

/**
 * Fill the root div with new elements reflecting the current state
 * @param {RunLoop.Clock} clock
 */
NetSimRouterStatsTable.prototype.render = function (clock) {
  if (!this.needsRender(clock)) {
    return;
  }

  var renderedMarkup = $(markup({
    uptime: this.getLocalizedUptime(),
    queuedPackets: this.queuedPackets_,
    totalPackets: this.totalPackets_,
    successfulPackets: this.successfulPackets_,
    totalData: this.totalData_,
    successfulData: this.successfulData_,
    bandwidthLimit: this.bandwidthLimit_,
    dataRate: this.dataRate_,
    totalMemory: this.totalMemory_,
    usedMemory: this.usedMemory_
  }));
  this.rootDiv_.html(renderedMarkup);
  this.lastRenderTime_ = clock.time;
};

/**
 * @param {RunLoop.Clock} clock
 * @returns {boolean} whether a render operation is needed.
 */
NetSimRouterStatsTable.prototype.needsRender = function (clock) {
  return !this.lastRenderTime_ || clock.time - this.lastRenderTime_ > MAX_RENDER_DELAY_MS;
};

/**
 * Mark the router log data dirty, so that it will re-render on the
 * next frame.
 */
NetSimRouterStatsTable.prototype.setNeedsRender = function () {
  this.lastRenderTime_ = null;
};

/**
 * Get a duration string for the current router uptime.
 * @returns {string}
 */
NetSimRouterStatsTable.prototype.getLocalizedUptime = function () {
  var hoursUptime = 0;
  var minutesUptime = 0;
  var secondsUptime = 0;
  if (this.routerCreationTime_ > 0) {
    var millisecondsUptime = Date.now() - this.routerCreationTime_;
    hoursUptime = Math.floor(millisecondsUptime / MILLIS_PER_HOUR);
    millisecondsUptime -= hoursUptime * MILLIS_PER_HOUR;
    minutesUptime = Math.floor(millisecondsUptime / MILLIS_PER_MINUTE);
    millisecondsUptime -= minutesUptime * MILLIS_PER_MINUTE;
    secondsUptime = Math.floor(millisecondsUptime / MILLIS_PER_SECOND);
  }
  return hoursUptime.toString() + ':' + NetSimUtils.zeroPadLeft(minutesUptime, 2) + ':' + NetSimUtils.zeroPadLeft(secondsUptime, 2);
};

/**
 * @param {NetSimLogEntry[]} logEntries
 * @returns {number} total data size, in bits, of packets represented by the
 *          given log entries.
 */
var totalSizeOfPackets = function totalSizeOfPackets(logEntries) {
  return logEntries.reduce(function (prev, cur) {
    return prev + cur.binary.length;
  }, 0);
};

/**
 * @param {NetSimLogEntry[]} logData
 */
NetSimRouterStatsTable.prototype.setRouterLogData = function (logData) {
  var successLogs = logData.filter(function (logEntry) {
    return logEntry.status === NetSimLogEntry.LogStatus.SUCCESS;
  });

  this.totalPackets_ = logData.length;
  this.successfulPackets_ = successLogs.length;

  this.totalData_ = totalSizeOfPackets(logData);
  this.successfulData_ = totalSizeOfPackets(successLogs);

  this.setNeedsRender();
};

/** @param {number} creationTimestampMs */
NetSimRouterStatsTable.prototype.setRouterCreationTime = function (creationTimestampMs) {
  this.routerCreationTime_ = creationTimestampMs;
  this.setNeedsRender();
};

/** @param {number} newBandwidth in bits per second */
NetSimRouterStatsTable.prototype.setBandwidth = function (newBandwidth) {
  this.bandwidthLimit_ = newBandwidth;
  this.setNeedsRender();
};

/** @param {number} totalMemoryInBits */
NetSimRouterStatsTable.prototype.setTotalMemory = function (totalMemoryInBits) {
  this.totalMemory_ = totalMemoryInBits;
  this.setNeedsRender();
};

/**
 * @param {number} queuedPacketCount
 */
NetSimRouterStatsTable.prototype.setRouterQueuedPacketCount = function (queuedPacketCount) {
  this.queuedPackets_ = queuedPacketCount;
  this.setNeedsRender();
};

/** @param {number} usedMemoryInBits */
NetSimRouterStatsTable.prototype.setMemoryInUse = function (usedMemoryInBits) {
  this.usedMemory_ = usedMemoryInBits;
  this.setNeedsRender();
};

/** @param {number} dataRateBitsPerSecond */
NetSimRouterStatsTable.prototype.setDataRate = function (dataRateBitsPerSecond) {
  this.dataRate_ = dataRateBitsPerSecond;
  this.setNeedsRender();
};

},{"./NetSimLogEntry":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogEntry.js","./NetSimRouterStatsTable.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterStatsTable.html.ejs","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterStatsTable.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
  var utils = require('../utils');
  var NetSimUtils = require('./NetSimUtils');

  /**
   * Write a stats row with the given title and value.
   * @param {string} title - localized name of the statistic (the header column contents)
   * @param {*} statValue - the value of the statistic
   */
  var writeStatRow = function (title, statValue) {
    ; buf.push('\n      <tr>\n        <th nowrap>', escape((13,  title )), '</th>\n        <td>', escape((14,  statValue )), '</td>\n      </tr>\n    ');16;
  };

  /**
   * Write a stats row that displays a fraction and also its percentage form.
   * @param {string} title - localized name of the statistic (the header column contents)
   * @param {number} partValue - numerator of the stat
   * @param {number} totalValue - denominator of the stat
   * @param {function} [toStringFunction] method for converting numerator and denominator to display format
   */
  var fractionStatRow = function (title, partValue, totalValue, toStringFunction) {
    toStringFunction = utils.valueOr(toStringFunction, function (x) { return x; });
    var valueString = toStringFunction(partValue) + ' / ' + toStringFunction(totalValue);
    if (totalValue > 0 && totalValue < Infinity) {
      valueString += ' (' + Math.round(100 * partValue / totalValue) + '%)';
    }
    writeStatRow(title, valueString);
  };
; buf.push('\n<table>\n  <tbody>\n    ');37; writeStatRow('Uptime', uptime); ; buf.push('\n    ');38; writeStatRow('Queued Packets', queuedPackets); ; buf.push('\n    ');39; fractionStatRow('Memory Use', usedMemory, totalMemory, NetSimUtils.bitsToLocalizedRoundedBytesize); ; buf.push('\n    ');40; fractionStatRow('Throughput', dataRate, bandwidthLimit, NetSimUtils.bitrateToLocalizedRoundedBitrate); ; buf.push('\n    ');41; fractionStatRow('Routed Packets', successfulPackets, totalPackets); ; buf.push('\n    ');42; fractionStatRow('Routed Data', successfulData, totalData, NetSimUtils.bitsToLocalizedRoundedBytesize); ; buf.push('\n  </tbody>\n</table>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterLogModal.js":[function(require,module,exports){
/**
 * @overview a modal dialog showing the union of all router logs for the
 *           current shard.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var i18n = require('./locale');
var NetSimLogEntry = require('./NetSimLogEntry');
var Packet = require('./Packet');
var markup = require('./NetSimRouterLogModal.html.ejs');
var NetSimGlobals = require('./NetSimGlobals');

/** @const {string} */
var LOG_ENTRY_DATA_KEY = 'LogEntry';

/** @const {number} */
var MAXIMUM_ROWS_IN_FULL_RENDER = 500;

/**
 * Generator and controller for contents of modal dialog that reveals
 * all router logs together, in a searchable/sortable/filterable manner.
 *
 * @param {jQuery} rootDiv
 * @constructor
 */
var NetSimRouterLogModal = module.exports = function (rootDiv) {

  /**
   * Component root, which we fill whenever we call render()
   * @private {jQuery}
   */
  this.rootDiv_ = rootDiv;

  /**
   * Hidden by default.
   * @private {boolean}
   */
  this.isVisible_ = false;

  // Attach handlers for showing and hiding the modal
  this.rootDiv_.on('shown.bs.modal', this.onShow_.bind(this));
  this.rootDiv_.on('hidden.bs.modal', this.onHide_.bind(this));

  /**
   * @private {NetSimShard}
   */
  this.shard_ = null;

  /**
   * @private {NetSimRouterNode}
   */
  this.router_ = null;

  /**
   * @private {NetSimLogEntry}
   */
  this.logEntries_ = [];

  /**
   * The highest log row ID stored in logEntries_, used to only retrieve new
   * log rows, we don't need to retrieve everything.
   * @private {number}
   */
  this.latestRowID_ = 0;

  /**
   * Tracking information for which events we're registered to, so we can
   * perform cleanup as needed.
   * @private {Object}
   */
  this.eventKeys_ = {};

  /**
   * Sorting key, changed by user interaction, which determines which sort
   * we use on render.
   * @private {string}
   */
  this.sortBy_ = 'timestamp';

  /**
   * Whether currently using a descending sort.
   * @private {boolean}
   */
  this.sortDescending_ = true;

  /**
   * Whether we are currently in "All-Router" mode or dealing with a
   * single router.  Always initializes to true because we never initialize
   * connected to a single router.
   * @private {boolean}
   */
  this.isAllRouterLogMode_ = true;

  this.render();
};

/**
 * Create a comparator function that can be used to sort log entries, configured
 * to sort according to the log browser's current configuration.
 * @returns {function(NetSimLogEntry, NetSimLogEntry)} compares two log entries,
 *          returns -1 if the first one belongs before the second one, 1 if
 *          the first one belongs after the second one, and 0 if they have the
 *          same sort position.
 * @private
 */
NetSimRouterLogModal.prototype.getSortComparator_ = function () {
  var getSortValue = NetSimRouterLogModal.sortKeyToSortValueGetterMap[this.sortBy_];
  var invertMultiplier = this.sortDescending_ ? -1 : 1;
  return function (a, b) {
    var x = getSortValue(a);
    var y = getSortValue(b);
    return (x < y ? -1 : x > y ? 1 : 0) * invertMultiplier;
  };
};

NetSimRouterLogModal.sortKeyToSortValueGetterMap = {

  'timestamp': function timestamp(logEntry) {
    return logEntry.timestamp;
  },

  'logged-by': function loggedBy(logEntry) {
    var originNode = logEntry.getOriginNode();
    if (originNode) {
      return originNode.getDisplayName();
    }
    return logEntry.nodeID.toString(10);
  },

  'status': function status(logEntry) {
    return logEntry.getLocalizedStatus();
  },

  'from-address': function fromAddress(logEntry) {
    return logEntry.getHeaderField(Packet.HeaderType.FROM_ADDRESS);
  },

  'to-address': function toAddress(logEntry) {
    return logEntry.getHeaderField(Packet.HeaderType.TO_ADDRESS);
  },

  'packet-info': function packetInfo(logEntry) {
    return logEntry.getLocalizedPacketInfo();
  },

  'message': function message(logEntry) {
    return logEntry.getMessageAscii();
  }

};

/**
 * State changes that occur when shoing the log.
 * @private
 */
NetSimRouterLogModal.prototype.onShow_ = function () {
  if (this.shard_) {
    this.shard_.logTable.subscribe();
  }
  this.isVisible_ = true;
  this.render();
};

/**
 * State changes that occur when hiding the log.
 * @private
 */
NetSimRouterLogModal.prototype.onHide_ = function () {
  if (this.shard_) {
    this.shard_.logTable.unsubscribe();
  }
  this.isVisible_ = false;
};

/**
 * @returns {boolean} TRUE if the modal is currently showing.
 */
NetSimRouterLogModal.prototype.isVisible = function () {
  return this.isVisible_;
};

/**
 * Fill the root div with new elements reflecting the current state
 */
NetSimRouterLogModal.prototype.render = function () {
  // Be lazy, don't render if not visible.
  if (!this.isVisible()) {
    return;
  }

  // Re-render entire log browser UI
  var renderedMarkup = $(markup({
    isAllRouterLogMode: this.isAllRouterLogMode_,
    canToggleRouterLogMode: this.canToggleRouterLogMode_(),
    sortBy: this.sortBy_,
    sortDescending: this.sortDescending_
  }));
  this.rootDiv_.html(renderedMarkup);

  // Add input handlers
  this.getRouterLogToggleButton().one('click', (function () {
    this.toggleRouterLogMode_();
    this.render();
  }).bind(this));

  this.rootDiv_.find('th').click((function (event) {
    this.onSortHeaderClick_($(event.target).attr('data-sort-key'));
  }).bind(this));

  // Add rows to the table
  var rows = this.getSortedFilteredLogEntries(this.logEntries_).slice(0, MAXIMUM_ROWS_IN_FULL_RENDER).map(this.makeTableRow_.bind(this));
  this.rootDiv_.find('tbody').append(rows);

  if (rows.length === MAXIMUM_ROWS_IN_FULL_RENDER) {
    var maxRenderedWarning = document.createElement('div');
    maxRenderedWarning.className = 'log-browser-limit-message';
    maxRenderedWarning.textContent = i18n.showingFirstXLogEntries({
      x: MAXIMUM_ROWS_IN_FULL_RENDER
    });
    this.rootDiv_.find('table').after(maxRenderedWarning);
  }
};

/**
 * Convert the given set of log entries to table rows and insert them
 * into the DOM, instead of re-rendering the whole table.
 * @param {!NetSimLogEntry[]} newEntries
 * @private
 */
NetSimRouterLogModal.prototype.renderNewLogEntries_ = function (newEntries) {
  // Be lazy, don't render at all if not visible.
  if (!this.isVisible() || newEntries.length === 0) {
    return;
  }

  /** @type {jQuery} Table body element. */
  var tbody = this.rootDiv_.find('tbody');

  // Get existing table row elements, which are already sorted and filtered.
  var oldRows = tbody.find('tr');

  // Sort and filter the new entries, and generate DOM rows for them.
  newEntries = this.getSortedFilteredLogEntries(newEntries);
  var newRows = $(newEntries.map(this.makeTableRow_.bind(this)));

  // Walk both collections to merge new rows into the DOM
  var nextOld = getNextInfo(oldRows, 0);
  var nextNew = getNextInfo(newRows, 0);
  var comparator = this.getSortComparator_();
  while (nextNew.index < newRows.length && nextOld.index < oldRows.length) {
    if (comparator(nextNew.logEntry, nextOld.logEntry) <= 0) {
      nextNew.tableRow.insertBefore(nextOld.tableRow);
      nextNew = getNextInfo(newRows, nextNew.index + 1);
    } else {
      nextOld = getNextInfo(oldRows, nextOld.index + 1);
    }
  }

  // Put whatever's left on the end of the table
  tbody.append(newRows.slice(nextNew.index));
};

/**
 * Generates a helper object for performing the log row merge.
 * @param {jQuery} rows - Wrapped collection of table rows.
 * @param {!number} atIndex - Index into `rows` at which info should be generated.
 * @returns {{index: number, tableRow: jQuery, logEntry: NetSimLogEntry}}
 */
function getNextInfo(rows, atIndex) {
  var row = rows.eq(atIndex);
  return {
    index: atIndex,
    tableRow: row,
    logEntry: row.length > 0 ? row.data(LOG_ENTRY_DATA_KEY) : {}
  };
}

/**
 * @param {!NetSimLogEntry[]} logEntries
 * @returns {NetSimLogEntry[]} subset of logEntries, sorted and filtered
 *          according to the log browser's current settings.
 */
NetSimRouterLogModal.prototype.getSortedFilteredLogEntries = function (logEntries) {
  // Filter entries to current log browser filter mode
  var filteredLogEntries = this.isAllRouterLogMode_ ? logEntries : logEntries.filter(function (entry) {
    return entry.nodeID === this.router_.entityID;
  }, this);

  return filteredLogEntries.sort(this.getSortComparator_());
};

/**
 * Given a log entry, generate a table row that can be added to the log modal.
 * @param {!NetSimLogEntry} logEntry
 * @returns {Element} a tr element.
 * @private
 */
NetSimRouterLogModal.prototype.makeTableRow_ = function (logEntry) {
  var headerFields = NetSimGlobals.getLevelConfig().routerExpectsPacketHeader;

  var showToAddress = headerFields.indexOf(Packet.HeaderType.TO_ADDRESS) > -1;

  var showFromAddress = headerFields.indexOf(Packet.HeaderType.FROM_ADDRESS) > -1;

  var showPacketInfo = headerFields.indexOf(Packet.HeaderType.PACKET_INDEX) > -1 && headerFields.indexOf(Packet.HeaderType.PACKET_COUNT) > -1;

  var originNode = logEntry.getOriginNode();

  var row = document.createElement('tr');

  // Store the actual logEntry on the row for sorting/merging later.
  $(row).data(LOG_ENTRY_DATA_KEY, logEntry);

  row.appendChild(makeCell(logEntry.getTimeString()));

  row.appendChild(makeCell(originNode ? originNode.getDisplayName() : logEntry.nodeID));

  row.appendChild(makeCell(logEntry.getLocalizedStatus()));

  if (showFromAddress) {
    row.appendChild(makeCell(logEntry.getHeaderField(Packet.HeaderType.FROM_ADDRESS)));
  }

  if (showToAddress) {
    row.appendChild(makeCell(logEntry.getHeaderField(Packet.HeaderType.TO_ADDRESS)));
  }

  if (showPacketInfo) {
    row.appendChild(makeCell(logEntry.getLocalizedPacketInfo()));
  }

  var tdMessageBody = makeCell(logEntry.getMessageAscii());
  tdMessageBody.className = 'message';
  row.appendChild(tdMessageBody);

  return row;
};

/**
 * @param {!string} text
 * @returns {HTMLElement} the new TD element.
 */
function makeCell(text) {
  var td = document.createElement('td');
  td.style.whiteSpace = 'nowrap';
  td.textContent = text;
  return td;
}

/**
 * Change the sort settings and re-render the log table.
 * @param {!string} sortKey
 * @private
 */
NetSimRouterLogModal.prototype.onSortHeaderClick_ = function (sortKey) {
  if (!sortKey) {
    return;
  }

  if (this.sortBy_ === sortKey) {
    this.sortDescending_ = !this.sortDescending_;
  } else {
    this.sortBy_ = sortKey;
    this.sortDescending_ = false;
  }
  this.render();
};

/**
 * Called by the sumulation's onRouterConnect and onRouterDisconnect
 * methods, this locally remembers the current router state and triggers
 * a rerender
 * @param {NetSimRouterNode} router
 */
NetSimRouterLogModal.prototype.setRouter = function (router) {
  this.router_ = router;
  this.isAllRouterLogMode_ = !this.hasLocalRouter_();
  this.render();
};

/**
 * Whether we are currently capable of logging all routers or not.
 * Is always true if we are in a level with connected routers.
 * Otherwise, is only true if we are not locally connected to a router.
 * @returns {boolean}
 * @private
 */
NetSimRouterLogModal.prototype.canLogAllRouters_ = function () {
  return NetSimGlobals.getLevelConfig().connectedRouters || !this.hasLocalRouter_();
};

/**
 * Returns true iff we are locally connected to a router.
 * @returns {boolean}
 * @private
 */
NetSimRouterLogModal.prototype.hasLocalRouter_ = function () {
  return !!this.router_;
};

/**
 * Whether or not we can switch between all-router and single-router log
 * mode. We can switch to single-router iff we have a local router, and
 * we can switch to all-router iff we are capable of logging all routers
 * @returns {boolean}
 * @private
 */
NetSimRouterLogModal.prototype.canToggleRouterLogMode_ = function () {
  if (this.isAllRouterLogMode_) {
    return this.hasLocalRouter_();
  } else {
    return this.canLogAllRouters_();
  }
};

/**
 * Toggles this.isAllRouterLogMode_ between `true` and `false`
 * @private
 */
NetSimRouterLogModal.prototype.toggleRouterLogMode_ = function () {
  this.isAllRouterLogMode_ = !this.isAllRouterLogMode_;
};

/**
 * Finds the button used to toggle between router log modes
 * @returns {jQuery}
 * @private
 */
NetSimRouterLogModal.prototype.getRouterLogToggleButton = function () {
  return this.rootDiv_.find('button#routerlog-toggle');
};

/**
 * Give the log browser a reference to the shard, so that it can query the
 * log table.  Or, pass null when disconnecting from a shard.
 * @param {NetSimShard|null} newShard
 */
NetSimRouterLogModal.prototype.setShard = function (newShard) {

  if (this.eventKeys_.registeredWithShard) {
    this.eventKeys_.registeredWithShard.logTable.tableChange.unregister(this.eventKeys_.logTableChange);
    this.eventKeys_.registeredWithShard = null;
  }

  if (newShard) {
    this.eventKeys_.logTableChange = newShard.logTable.tableChange.register(this.onLogTableChange_.bind(this));
    this.eventKeys_.registeredWithShard = newShard;
  }

  // When changing shards, reset log so we fetch the whole thing next time.
  this.logEntries_.length = 0;
  this.latestRowID_ = 0;
  this.shard_ = newShard;
};

/**
 * Handle log table changes.
 * @private
 */
NetSimRouterLogModal.prototype.onLogTableChange_ = function () {
  var headerSpec = NetSimGlobals.getLevelConfig().routerExpectsPacketHeader;
  var newRows = this.shard_.logTable.readAllFromID(this.latestRowID_ + 1);
  var newLogEntries = newRows.map(function (row) {
    this.latestRowID_ = Math.max(row.id, this.latestRowID_);
    return new NetSimLogEntry(this.shard_, row, headerSpec);
  }, this);
  // Modify this.logEntries_ in-place, appending new log entries
  Array.prototype.push.apply(this.logEntries_, newLogEntries);
  this.renderNewLogEntries_(newLogEntries);
};

},{"./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimLogEntry":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogEntry.js","./NetSimRouterLogModal.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterLogModal.html.ejs","./Packet":"/home/ubuntu/staging/apps/build/js/netsim/Packet.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterLogModal.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
var Packet = require('./Packet');
var i18n = require('./locale');
var NetSimGlobals = require('./NetSimGlobals');

var headerFields = NetSimGlobals.getLevelConfig().routerExpectsPacketHeader;

/** @type {boolean} */
var showToAddress = headerFields.indexOf(Packet.HeaderType.TO_ADDRESS) > -1;

/** @type {boolean} */
var showFromAddress = headerFields.indexOf(Packet.HeaderType.FROM_ADDRESS) > -1;

/** @type {boolean} */
var showPacketInfo = headerFields.indexOf(Packet.HeaderType.PACKET_INDEX) > -1 &&
    headerFields.indexOf(Packet.HeaderType.PACKET_COUNT) > -1;

/**
 * @name isAllRouterLogMode
 * @type {boolean}
 */

/**
 * @name sortBy
 * @type {string}
 */

/**
 * @name sortDescending
 * @type {boolean}
 */

function sortMarkupFor(sortKey) {
  if (sortKey === sortBy) {
    if (sortDescending) {
      return '<i class="fa fa-sort-desc"></i>';
    } else {
      return '<i class="fa fa-sort-asc"></i>';
    }
  }
  return '';
}
; buf.push('\n<div class="modal-dialog modal-lg">\n    <div class="modal-header">\n      <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>\n\n      ');48; if (canToggleRouterLogMode) { ; buf.push('\n        <button type="button" id="routerlog-toggle" class="pull-right btn btn-primary btn-mini">', escape((49,  (isAllRouterLogMode) ? i18n.logBrowserHeader_toggleMine() : i18n.logBrowserHeader_toggleAll() )), '</button>\n      ');50; } ; buf.push('\n\n      ');52; if (isAllRouterLogMode) { ; buf.push('\n        <h4 class="modal-title">', escape((53,  i18n.logBrowserHeader_all() )), '</h4>\n      ');54; } else { ; buf.push('\n        <h4 class="modal-title">', escape((55,  i18n.logBrowserHeader_mine() )), '</h4>\n      ');56; } ; buf.push('\n    </div>\n    <div class="modal-body">\n      <table>\n        <thead>\n          <tr>\n            <th nowrap data-sort-key="timestamp">', escape((62,  i18n.time() )), ' ', (62,  sortMarkupFor('timestamp') ), '</th>\n            <th nowrap data-sort-key="logged-by">', escape((63,  i18n.loggedByNode() )), ' ', (63,  sortMarkupFor('logged-by') ), '</th>\n            <th nowrap data-sort-key="status">', escape((64,  i18n.status() )), ' ', (64,  sortMarkupFor('status') ), '</th>\n            ');65; if (showFromAddress) { ; buf.push('\n              <th nowrap data-sort-key="from-address">', escape((66,  i18n.from() )), ' ', (66,  sortMarkupFor('from-address') ), '</th>\n            ');67; } ; buf.push('\n            ');68; if (showToAddress) { ; buf.push('\n              <th nowrap data-sort-key="to-address">', escape((69,  i18n.to() )), ' ', (69,  sortMarkupFor('to-address') ), '</th>\n            ');70; } ; buf.push('\n            ');71; if (showPacketInfo) { ; buf.push('\n              <th nowrap data-sort-key="packet-info">', escape((72,  i18n.packet() )), ' ', (72,  sortMarkupFor('packet-info') ), '</th>\n            ');73; } ; buf.push('\n            <th nowrap data-sort-key="message">', escape((74,  i18n.message() )), ' ', (74,  sortMarkupFor('message') ), '</th>\n          </tr>\n        </thead>\n        <tbody>\n        </tbody>\n      </table>\n    </div>\n    <div class="modal-footer">\n      <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>\n    </div>\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./Packet":"/home/ubuntu/staging/apps/build/js/netsim/Packet.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimPacketSizeControl.js":[function(require,module,exports){
/**
 * @overview UI slider used to change maximum packet length.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,

 maxlen: 120
 */
'use strict';

var i18n = require('./locale');
var NetSimSlider = require('./NetSimSlider');

/**
 * Generator and controller for packet size slider/selector
 * @param {jQuery} rootDiv
 * @param {function} packetSizeChangeCallback
 * @param {Object} options
 * @param {number} options.minimumPacketSize
 * @constructor
 * @augments NetSimSlider
 */
var NetSimPacketSizeControl = module.exports = function (rootDiv, packetSizeChangeCallback, options) {
  NetSimSlider.call(this, rootDiv, {
    onChange: packetSizeChangeCallback,
    min: options.minimumPacketSize,
    max: 8192,
    upperBoundInfinite: false
  });

  // Auto-render, unlike our base class
  this.render();
};
NetSimPacketSizeControl.inherits(NetSimSlider);

/**
 * Get localized packet size description for the given packet size.
 * @param {number} packetSize
 * @returns {string}
 */
NetSimPacketSizeControl.prototype.getPacketSizeText = function (packetSize) {
  return i18n.numBitsPerPacket({ numBits: packetSize });
};

/**
 * Converts a numeric value (in bits) into a compact localized string
 * representation of that value.
 * @param {number} val - numeric value of the control
 * @returns {string} - localized string representation of value
 * @override
 */
NetSimPacketSizeControl.prototype.valueToLabel = function (val) {
  if (val === Infinity) {
    return i18n.unlimited();
  }
  return i18n.numBitsPerPacket({ numBits: val });
};

/**
 * Get labels for end sliders
 * @param {number} val
 * @returns {string}
 * @override
 */
NetSimPacketSizeControl.prototype.valueToShortLabel = function (val) {
  if (val === Infinity) {
    return i18n.unlimited();
  }
  return val;
};

},{"./NetSimSlider":"/home/ubuntu/staging/apps/build/js/netsim/NetSimSlider.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimPacketEditor.js":[function(require,module,exports){
/**
 * @overview UI controller for the packet editor which allows editing multiple
 *           encodings at once and lives inside the send panel.
 * @see NetSimSendPanel for how this is used.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

require('../utils'); // For Function.prototype.inherits()
var netsimMsg = require('./locale');
var markup = require('./NetSimPacketEditor.html.ejs');
var KeyCodes = require('../constants').KeyCodes;
var NetSimEncodingControl = require('./NetSimEncodingControl');
var NetSimLogPanel = require('./NetSimLogPanel');
var Packet = require('./Packet');
var DataConverters = require('./DataConverters');
var NetSimConstants = require('./NetSimConstants');
var NetSimGlobals = require('./NetSimGlobals');

var EncodingType = NetSimConstants.EncodingType;
var BITS_PER_BYTE = NetSimConstants.BITS_PER_BYTE;

var minifyBinary = DataConverters.minifyBinary;
var formatAB = DataConverters.formatAB;
var formatBinary = DataConverters.formatBinary;
var formatHex = DataConverters.formatHex;
var alignDecimal = DataConverters.alignDecimal;
var abToBinary = DataConverters.abToBinary;
var abToInt = DataConverters.abToInt;
var binaryToAB = DataConverters.binaryToAB;
var binaryToHex = DataConverters.binaryToHex;
var binaryToInt = DataConverters.binaryToInt;
var binaryToDecimal = DataConverters.binaryToDecimal;
var binaryToAscii = DataConverters.binaryToAscii;
var hexToBinary = DataConverters.hexToBinary;
var intToAB = DataConverters.intToAB;
var intToBinary = DataConverters.intToBinary;
var intToHex = DataConverters.intToHex;
var decimalToBinary = DataConverters.decimalToBinary;
var asciiToBinary = DataConverters.asciiToBinary;

/**
 * Type for tructured access to jQuery-wrapped DOM elements.  Two layers deep;
 * can be used for quick access to one of the fields in the packet editor grid
 * by referencing via row and column.
 *
 * Map keys at the first layer correspond to NetSimConstants.EncodingType.
 * Map keys at the second layer correspond to Packet.HeaderType, plus the
 *   'message' field.
 *
 * Usage:
 *   map.binary.fromAddress
 *   map['binary']['fromAddress']
 *   map[EncodingType.BINARY][Packet.HeaderType.FROM_ADDRESS]
 *
 * @typedef {Object} UIMap
 * @property {UIRowMap} a_and_b
 * @property {UIRowMap} binary
 * @property {UIRowMap} hexadecimal
 * @property {UIRowMap} decimal
 * @property {UIRowMap} ascii
 */

/**
 * @typedef {Object} UIRowMap
 * @property {jQuery} toAddress
 * @property {jQuery} fromAddress
 * @property {jQuery} packetIndex
 * @property {jQuery} packetCount
 * @property {jQuery} message
 */

/**
 * Generator and controller for message sending view.
 * @param {Object} initialConfig
 * @param {MessageGranularity} initialConfig.messageGranularity
 * @param {Packet.HeaderType[]} initialConfig.packetSpec
 * @param {number} [initialConfig.toAddress]
 * @param {number} [initialConfig.fromAddress]
 * @param {number} [initialConfig.packetIndex]
 * @param {number} [initialConfig.packetCount]
 * @param {string} [initialConfig.message]
 * @param {number} [initialConfig.maxPacketSize]
 * @param {number} [initialConfig.chunkSize]
 * @param {number} [initialConfig.bitRate]
 * @param {EncodingType[]} [initialConfig.enabledEncodings]
 * @param {function} initialConfig.removePacketCallback
 * @param {function} initialConfig.doneSendingCallback
 * @param {function} initialConfig.contentChangeCallback
 * @param {function} initialConfig.enterKeyPressedCallback
 * @constructor
 */
var NetSimPacketEditor = module.exports = function (initialConfig) {
  var level = NetSimGlobals.getLevelConfig();

  /**
   * @type {RowType[]}
   * @const
   */
  this.ROW_TYPES = [{
    typeName: EncodingType.A_AND_B,
    addressFieldAllowedCharacters: /[AB\s]/i,
    addressFieldConversion: function addressFieldConversion(abString) {
      return DataConverters.binaryToAddressString(DataConverters.abToBinary(abString), level.addressFormat);
    },
    shortNumberAllowedCharacters: /[AB]/i,
    shortNumberConversion: truncatedABToInt,
    messageAllowedCharacters: /[AB\s]/i,
    messageConversion: abToBinary
  }, {
    typeName: EncodingType.BINARY,
    addressFieldAllowedCharacters: /[01\s]/i,
    addressFieldConversion: function addressFieldConversion(binaryString) {
      return DataConverters.binaryToAddressString(binaryString, level.addressFormat);
    },
    shortNumberAllowedCharacters: /[01]/,
    shortNumberConversion: truncatedBinaryToInt,
    messageAllowedCharacters: /[01\s]/,
    messageConversion: minifyBinary
  }, {
    typeName: EncodingType.HEXADECIMAL,
    addressFieldAllowedCharacters: /[0-9a-f\s]/i,
    addressFieldConversion: function addressFieldConversion(hexString) {
      return DataConverters.binaryToAddressString(DataConverters.hexToBinary(hexString), level.addressFormat);
    },
    shortNumberAllowedCharacters: /[0-9a-f]/i,
    shortNumberConversion: truncatedHexToInt,
    messageAllowedCharacters: /[0-9a-f\s]/i,
    messageConversion: hexToBinary
  }, {
    typeName: EncodingType.DECIMAL,
    addressFieldAllowedCharacters: /[0-9.\s]/i,
    addressFieldConversion: cleanAddressString,
    shortNumberAllowedCharacters: /[0-9]/,
    shortNumberConversion: truncatedDecimalToInt,
    messageAllowedCharacters: /[0-9\s]/,
    messageConversion: (function (decimalString) {
      return decimalToBinary(decimalString, this.currentChunkSize_);
    }).bind(this)
  }, {
    typeName: EncodingType.ASCII,
    addressFieldAllowedCharacters: /[0-9.\s]/i,
    addressFieldConversion: cleanAddressString,
    shortNumberAllowedCharacters: /[0-9]/,
    shortNumberConversion: truncatedDecimalToInt,
    messageAllowedCharacters: /./,
    messageConversion: (function (asciiString) {
      return asciiToBinary(asciiString, this.currentChunkSize_);
    }).bind(this)
  }];

  /**
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = $('<div>').addClass('netsim-packet');

  /**
   * @type {MessageGranularity}
   * @private
   */
  this.messageGranularity_ = initialConfig.messageGranularity;

  /**
   * @type {Packet.HeaderType[]}
   * @private
   */
  this.packetSpec_ = initialConfig.packetSpec;

  /** @type {string} */
  this.toAddress = initialConfig.toAddress || DataConverters.binaryToAddressString('0', level.addressFormat);

  /** @type {string} */
  this.fromAddress = initialConfig.fromAddress || DataConverters.binaryToAddressString('0', level.addressFormat);

  /** @type {number} */
  this.packetIndex = initialConfig.packetIndex !== undefined ? initialConfig.packetIndex : 1;

  /** @type {number} */
  this.packetCount = initialConfig.packetCount !== undefined ? initialConfig.packetCount : 1;

  /**
   * Binary string of message body, live-interpreted to other values.
   * @type {string}
   */
  this.message = initialConfig.message || '';

  /**
   * Maximum packet length configurable by slider.
   * @type {Number}
   * @private
   */
  this.maxPacketSize_ = initialConfig.maxPacketSize || 8192;

  /**
   * Bits per chunk/byte for parsing and formatting purposes.
   * @type {number}
   * @private
   */
  this.currentChunkSize_ = initialConfig.chunkSize || BITS_PER_BYTE;

  /**
   * Local device bitrate (bps), which affects send-animation speed.
   * @type {number}
   * @private
   */
  this.bitRate_ = initialConfig.bitRate || Infinity;

  var encodings = initialConfig.enabledEncodings || [];
  /**
   * Which encodings should be visible in the editor.
   * @type {Object.<EncodingType, boolean>}
   * @private
   */
  this.enabledEncodingsHash_ = NetSimEncodingControl.encodingsAsHash(encodings);

  /**
   * Method to call in order to remove this packet from its parent.
   * Function should take this PacketEditor as an argument.
   * @type {function}
   * @private
   */
  this.removePacketCallback_ = initialConfig.removePacketCallback;

  /**
   * Method to call when this packet is done playing its sending animation.
   * Function should take this PacketEditor as an argument.
   * @type {function}
   * @private
   */
  this.doneSendingCallback_ = initialConfig.doneSendingCallback;

  /**
   * Method to notify our parent container that the packet's binary
   * content has changed.
   * @type {function}
   * @private
   */
  this.contentChangeCallback_ = initialConfig.contentChangeCallback;

  /**
   * Method to notify our parent container that the enter key has been
   * pressed
   * @type {function}
   * @private
   */
  this.enterKeyPressedCallback_ = initialConfig.enterKeyPressedCallback;

  /**
   * @type {jQuery}
   * @private
   */
  this.removePacketButton_ = null;

  /**
   * @type {jQuery}
   * @private
   */
  this.bitCounter_ = null;

  /**
   * Flag noting whether this packet editor is in a non-interactive mode
   * where it animates bits draining/being sent.
   * @type {boolean}
   * @private
   */
  this.isPlayingSendAnimation_ = false;

  /**
   * Flag for whether this editor is in the middle of an async send command.
   * @type {boolean}
   * @private
   */
  this.isSendingPacketToRemote_ = false;

  /**
   * Reference to local client node, used for sending messages.
   * @type {NetSimLocalClientNode}
   * @private
   */
  this.myNode_ = null;

  /**
   * Capture packet binary before the send animation begins so that we can
   * send the whole packet to remote storage when the animation is done.
   * @type {string}
   * @private
   */
  this.originalBinary_ = '';

  /**
   * Index into original binary indicating how many bits have been 'sent'
   * in the animation.
   * @type {number}
   * @private
   */
  this.sendAnimationIndex_ = 0;

  /**
   * Simulation-time timestamp (ms) of the last bit-send animation.
   * @type {number}
   * @private
   */
  this.lastBitSentTime_ = undefined;

  /**
   * Map of bound UI elements manipulated by this editor.  Provides quick
   * access to input elements in the editor grid.  See type notes for usage.
   *
   * Populated dynamically in `bindElements_` during `render`.  May not include
   * all fields, as we try to optimize and omit fields not enabled in the level.
   *
   * @type {UIMap}
   * @private
   */
  this.ui_ = {};

  this.render();
};

/**
 * Return root div, for hooking up to a parent element.
 * @returns {jQuery}
 */
NetSimPacketEditor.prototype.getRoot = function () {
  return this.rootDiv_;
};

/**
 * Clear the packet payload and put the editor back in a state where it's
 * ready for composing a new packet.
 * Intentionally preserves toAddress and fromAddress.
 */
NetSimPacketEditor.prototype.resetPacket = function () {
  this.message = '';
  this.packetIndex = 1;
  this.packetCount = 1;
  this.originalBinary_ = '';
  this.sendAnimationIndex_ = 0;
  this.lastBitSentTime_ = undefined;
  this.updateFields_();
  this.updateRemoveButtonVisibility_();
};

/**
 * Returns the first visible message box, so that we can focus() on it
 * @returns {jQuery}
 */
NetSimPacketEditor.prototype.getFirstVisibleMessageBox = function () {
  return this.getRoot().find('textarea.message:visible').first();
};

/** Replace contents of our root element with our own markup. */
NetSimPacketEditor.prototype.render = function () {
  var newMarkup = $(markup({
    messageGranularity: this.messageGranularity_,
    packetSpec: this.packetSpec_,
    enabledEncodingsHash: this.enabledEncodingsHash_
  }));
  this.rootDiv_.html(newMarkup);
  this.bindElements_();
  this.updateFields_();
  this.updateRemoveButtonVisibility_();
  NetSimLogPanel.adjustHeaderColumnWidths(this.rootDiv_);
  NetSimEncodingControl.hideRowsByEncoding(this.rootDiv_, Object.keys(this.enabledEncodingsHash_));
};

/**
 * Put this packet in a mode where it's not editable.  Instead, it will drain
 * its binary at the current bitrate and call the given callback when all
 * of the binary has been drained/"sent"
 * @param {NetSimLocalClientNode} myNode
 */
NetSimPacketEditor.prototype.beginSending = function (myNode) {
  this.isPlayingSendAnimation_ = true;
  this.originalBinary_ = this.getPacketBinary().substr(0, this.maxPacketSize_);
  this.sendAnimationIndex_ = 0;
  this.myNode_ = myNode;

  // Finish now if the packet is empty.
  if (0 === this.originalBinary_.length) {
    this.finishSending();
  }
};

/**
 * Kick off the async send-to-remote operation for the original packet binary.
 * When it's done, remove this now-empty packet.
 */
NetSimPacketEditor.prototype.finishSending = function () {
  this.isPlayingSendAnimation_ = false;
  this.isSendingPacketToRemote_ = true;
  this.myNode_.sendMessage(this.originalBinary_, (function () {
    this.isSendingPacketToRemote_ = false;
    this.doneSendingCallback_(this);
  }).bind(this));
};

/**
 * @returns {boolean} TRUE if this packet is currently being sent.
 */
NetSimPacketEditor.prototype.isSending = function () {
  return this.isPlayingSendAnimation_ || this.isSendingPacketToRemote_;
};

/**
 * Packet Editor tick is called (manually by the NetSimSendPanel) to advance
 * its sending animation.
 * @param {RunLoop.Clock} clock
 */
NetSimPacketEditor.prototype.tick = function (clock) {
  // Before we start animating, or after we are done animating, do nothing.
  if (!this.isPlayingSendAnimation_ || this.isSendingPacketToRemote_) {
    return;
  }

  if (!this.lastBitSentTime_) {
    this.lastBitSentTime_ = clock.time;
  }

  // How many characters should be consumed this tick?
  var msPerBit = 1000 * (1 / this.bitRate_);
  var maxBitsToSendThisTick = Infinity;
  if (msPerBit > 0) {
    var msSinceLastBitConsumed = clock.time - this.lastBitSentTime_;
    maxBitsToSendThisTick = Math.floor(msSinceLastBitConsumed / msPerBit);
  }

  if (maxBitsToSendThisTick > 0) {
    this.lastBitSentTime_ = clock.time;
    this.sendAnimationIndex_ += maxBitsToSendThisTick;
    this.updateForAnimation_();
    if (this.sendAnimationIndex_ >= this.originalBinary_.length) {
      this.finishSending();
    }
  }
};

/**
 * Focus event handler.  If the target element has a 'watermark' class then
 * it contains text we intend to clear before any editing occurs.  This
 * handler clears that text and removes the class.
 * @param focusEvent
 */
var removeWatermark = function removeWatermark(focusEvent) {
  var target = $(focusEvent.target);
  if (target.hasClass('watermark')) {
    target.val('');
    target.removeClass('watermark');
  }
};

/**
 * Helper method for determining if a given keyPress event represents a
 * CLEAN enter press. As in, one without the Shift or Control modifiers.
 * @param {Event} jqueryEvent
 * @returns {boolean} true iff the given event represents a clean enter
 */
var isUnmodifiedEnterPress = function isUnmodifiedEnterPress(jqueryEvent) {
  return jqueryEvent.keyCode === KeyCodes.ENTER && !(jqueryEvent.ctrlKey || jqueryEvent.shiftKey);
};

/**
 * Creates a keyPress handler that allows only the given characters to be
 * typed into a text field.
 * @param {RegExp} whitelistRegex
 * @return {function} appropriate to pass to .keypress()
 */
var makeKeypressHandlerWithWhitelist = function makeKeypressHandlerWithWhitelist(whitelistRegex) {
  /**
   * A keyPress handler that blocks all visible characters except those
   * matching the whitelist.  Passes through invisible characters (backspace,
   * delete) and control combinations (copy, paste).
   *
   * @param keyEvent
   * @returns {boolean} - Whether to propagate this event.  Should return
   *          FALSE if we handle the event and don't want to pass it on, TRUE
   *          if we are not handling the event.
   */
  return function (keyEvent) {

    // Don't block control combinations (copy, paste, etc.)
    if (keyEvent.metaKey || keyEvent.ctrlKey) {
      return true;
    }

    // Don't block invisible characters; we want to allow backspace, delete, etc.
    if (keyEvent.which < KeyCodes.SPACE || keyEvent.which >= KeyCodes.DELETE) {
      return true;
    }

    // At this point, if the character doesn't match, we should block it.
    var key = String.fromCharCode(keyEvent.which);
    if (!whitelistRegex.test(key)) {
      keyEvent.preventDefault();
      return false;
    }
  };
};

/**
 * Generate a jQuery-appropriate keyup handler for a text field.
 * Grabs the new value of the text field, runs it through the provided
 * converter function, sets the result on the SendWidget's internal state
 * and triggers a field update on the widget that skips the field being edited.
 *
 * Similar to makeBlurHandler, but does not update the field currently
 * being edited.
 *
 * @param {string} fieldName - name of internal state field that the text
 *        field should update.
 * @param {function} converterFunction - Takes the text field's value and
 *        converts it to a format appropriate to the internal state field.
 * @param {number} [fieldWidth] - maximum number of bits for field, passed
 *        through as second argument to converter function.
 * @returns {function} that can be passed to $.keyup()
 */
NetSimPacketEditor.prototype.makeKeyupHandler = function (fieldName, converterFunction, fieldWidth) {
  return (function (jqueryEvent) {
    var newValue = converterFunction(jqueryEvent.target.value, fieldWidth);
    if (typeof newValue === 'string' || !isNaN(newValue)) {
      this[fieldName] = newValue;
      this.updateFields_(jqueryEvent.target);
    }
  }).bind(this);
};

/**
 * Generate a jQuery-appropriate blur handler for a text field.
 * Grabs the new value of the text field, runs it through the provided
 * converter function, sets the result on the SendWidget's internal state
 * and triggers a full field update of the widget (including the field that was
 * just edited).
 *
 * Similar to makeKeyupHandler, but also updates the field that was
 * just edited.
 *
 * @param {string} fieldName - name of internal state field that the text
 *        field should update.
 * @param {function} converterFunction - Takes the text field's value and
 *        converts it to a format appropriate to the internal state field.
 * @param {number} [fieldWidth] - maximum number of bits for field, passed
 *        through as second argument to converter function.
 * @returns {function} that can be passed to $.blur()
 */
NetSimPacketEditor.prototype.makeBlurHandler = function (fieldName, converterFunction, fieldWidth) {
  return (function (jqueryEvent) {
    var newValue = converterFunction(jqueryEvent.target.value, fieldWidth);
    if (typeof newValue === 'number' && isNaN(newValue)) {
      newValue = converterFunction('0');
    }
    this[fieldName] = newValue;
    this.updateFields_();
  }).bind(this);
};

/**
 * Specification for an encoding row in the editor, which designates character
 * whitelists to limit typing in certain fields, and rules for intepreting the
 * field from binary.
 * @typedef {Object} RowType
 * @property {EncodingType} typeName
 * @property {RegExp} addressFieldAllowedCharacters - Whitelist of characters
 *           that may be typed into an address field.
 * @property {function} addressFieldConversion - How to convert from binary
 *           to an address string in this row when the binary is updated.
 * @property {RegExp} shortNumberAllowedCharacters - Whitelist of characters
 *           that may be typed into a header field.
 * @property {function} shortNumberConversion - How to convert from binary
 *           to a header value in this row when the binary is updated.
 * @property {RegExp} messageAllowedCharacters - Whitelist of characters
 *           that may be typed into the message field.
 * @property {function} messageConversion - How to convert from binary to
 *           the message value in this row when the binary is updated.
 */

/**
 * Convert binary to an integer, intentionally limiting the binary width so
 * that overflow can occur.
 * @param {string} binaryString (interpreted as unsigned)
 * @param {number} maxWidth in bits
 * @returns {number}
 */
var truncatedBinaryToInt = function truncatedBinaryToInt(binaryString, maxWidth) {
  return binaryToInt(binaryString.substr(-maxWidth));
};

/**
 * Convert ABs to an integer, intentionally limiting the width so that overflow
 * can occur (analagous to truncatedBinaryToInt).  A is treated as zero, B as
 * one.
 * @param {string} abString
 * @param {number} maxWidth in bits
 * @returns {number}
 */
var truncatedABToInt = function truncatedABToInt(abString, maxWidth) {
  return abToInt(abString.substr(-maxWidth));
};

/**
 * Convert a hexadecimal string to a single integer, intentionally limiting
 * the bit-width to so that overflow can occur.
 * @param {string} hexString
 * @param {number} maxWidth in bits
 * @returns {number}
 */
var truncatedHexToInt = function truncatedHexToInt(hexString, maxWidth) {
  return truncatedBinaryToInt(hexToBinary(hexString), maxWidth);
};

/**
 * Convert a decimal string to an integer, intentionally limiting the bit-width
 * so that overflow can occur.
 * @param {string} decimalString
 * @param {number} maxWidth in bits
 * @returns {number}
 */
var truncatedDecimalToInt = function truncatedDecimalToInt(decimalString, maxWidth) {
  return truncatedBinaryToInt(intToBinary(parseInt(decimalString, 10)), maxWidth);
};

/**
 * Convert an address string to binary and back using the level's address
 * format, which coerces it to the exact format the level wants.
 * @param {string} originalString
 * @returns {string}
 */
var cleanAddressString = function cleanAddressString(originalString) {
  var level = NetSimGlobals.getLevelConfig();
  var binaryForm = DataConverters.addressStringToBinary(originalString, level.addressFormat);
  return DataConverters.binaryToAddressString(binaryForm, level.addressFormat);
};

/**
 * Helper method to filter this.ROW_TYPES by enabled encodings
 * @private
 * @returns {RowType[]}
 */
NetSimPacketEditor.prototype.getEnabledRowTypes_ = function () {
  return this.ROW_TYPES.filter(function (rowType) {
    return this.isEncodingEnabled_(rowType.typeName);
  }, this);
};

/**
 * Get relevant elements from the page and bind them to local variables.
 * @private
 */
NetSimPacketEditor.prototype.bindElements_ = function () {
  var level = NetSimGlobals.getLevelConfig();
  var encoder = new Packet.Encoder(level.addressFormat, level.packetCountBitWidth, this.packetSpec_);
  var rootDiv = this.rootDiv_;

  this.getEnabledRowTypes_().forEach(function (rowType) {
    var tr = rootDiv.find('tr.' + rowType.typeName);
    this.ui_[rowType.typeName] = {};
    var rowFields = this.ui_[rowType.typeName];

    // We attach focus (sometimes) to clear the field watermark, if present
    // We attach keypress to block certain characters
    // We attach keyup to live-update the widget as the user types
    // We attach blur to reformat the edited field when the user leaves it,
    //    and to catch non-keyup cases like copy/paste.

    this.packetSpec_.forEach(function (fieldSpec) {
      /** @type {Packet.HeaderType} */
      var fieldName = fieldSpec;
      /** @type {number} */
      var fieldWidth = encoder.getFieldBitWidth(fieldName);

      var allowedCharacterFunction, conversionFunction;
      if (Packet.isAddressField(fieldName)) {
        allowedCharacterFunction = rowType.addressFieldAllowedCharacters;
        conversionFunction = rowType.addressFieldConversion;
      } else {
        allowedCharacterFunction = rowType.shortNumberAllowedCharacters;
        conversionFunction = rowType.shortNumberConversion;
      }

      rowFields[fieldName] = tr.find('input.' + fieldName);
      rowFields[fieldName].keypress(makeKeypressHandlerWithWhitelist(allowedCharacterFunction));
      rowFields[fieldName].keyup(this.makeKeyupHandler(fieldName, conversionFunction, fieldWidth));
      rowFields[fieldName].blur(this.makeBlurHandler(fieldName, conversionFunction, fieldWidth));
    }, this);

    rowFields.message = tr.find('textarea.message');
    rowFields.message.focus(removeWatermark);
    rowFields.message.keypress(makeKeypressHandlerWithWhitelist(rowType.messageAllowedCharacters));
    rowFields.message.keydown((function (jqueryEvent) {
      if (isUnmodifiedEnterPress(jqueryEvent)) {
        this.enterKeyPressedCallback_(jqueryEvent);
      }
    }).bind(this));
    rowFields.message.keyup(this.makeKeyupHandler('message', rowType.messageConversion));
    rowFields.message.blur(this.makeBlurHandler('message', rowType.messageConversion));
  }, this);

  this.removePacketButton_ = rootDiv.find('.remove-packet-button');
  this.removePacketButton_.click(this.onRemovePacketButtonClick_.bind(this));
  this.bitCounter_ = rootDiv.find('.bit-counter');
};

/**
 * Special update method called during send animation that changes the editor
 * display to show each field left-truncated at an appropriate amount for the
 * simulated send progress.
 *
 * This works differently for different fields:
 *  - Binary and A/B fields send a single bit at a time.
 *  - Hex sends a single hex digit at a time, but at the correct slower rate.
 *  - Decimal and ASCII send one chunk at a time, which depends on the current
 *    chunk size, and is adjusted to the correct slower rate as well.  For
 *    ASCII this maps to one character at a time.  For decimal, it's one
 *    whitespace-delimited number.
 *
 * This avoids the jumbled effect of reinterpreting nonbinary fields using
 * misaligned binary, and communicates in a visual way that it takes longer to
 * send a single character than it does to send a single bit.
 *
 * This method is also designed to send the packet header fields in sequence
 * before sending the packet body.  Body binary is never seen in the header
 * fields, each field is treated as an independent space.
 * @private
 */
NetSimPacketEditor.prototype.updateForAnimation_ = function () {
  var chunkSize = this.currentChunkSize_;
  var liveFields = [];

  // There may be potential for performance optimization here, but it's not
  // particularly high on our perf list right now.

  var level = NetSimGlobals.getLevelConfig();
  var encoder = new Packet.Encoder(level.addressFormat, level.packetCountBitWidth, this.packetSpec_);

  var fieldStart = 0;

  this.packetSpec_.forEach(function (fieldSpec) {
    /** @type {Packet.HeaderType} */
    var fieldName = fieldSpec;
    /** @type {number} */
    var fieldWidth = encoder.getFieldBitWidth(fieldName);

    if (this.sendAnimationIndex_ < fieldStart + fieldWidth) {
      // Either we haven't reached this field yet or we're currently animating
      // through it; don't do anything to the more complex fields, and animate
      // the binary appropriately.
      var fieldBinary = this.originalBinary_.substr(fieldStart, fieldWidth);
      var truncatedBits = Math.max(0, this.sendAnimationIndex_ - fieldStart);

      if (this.isEncodingEnabled_(EncodingType.A_AND_B)) {
        liveFields.push({
          inputElement: this.ui_[EncodingType.A_AND_B][fieldName],
          newValue: binaryToAB(fieldBinary).substr(truncatedBits)
        });
      }

      if (this.isEncodingEnabled_(EncodingType.BINARY)) {
        liveFields.push({
          inputElement: this.ui_[EncodingType.BINARY][fieldName],
          newValue: fieldBinary.substr(truncatedBits)
        });
      }

      if (this.isEncodingEnabled_(EncodingType.HEXADECIMAL)) {
        var truncatedHexDigits = Math.floor(truncatedBits / 4);
        liveFields.push({
          inputElement: this.ui_[EncodingType.HEXADECIMAL][fieldName],
          newValue: binaryToHex(fieldBinary).substr(truncatedHexDigits)
        });
      }
    } else {
      // We're past this field - it should be blank
      if (this.isEncodingEnabled_(EncodingType.A_AND_B)) {
        liveFields.push({
          inputElement: this.ui_[EncodingType.A_AND_B][fieldName],
          newValue: ''
        });
      }

      if (this.isEncodingEnabled_(EncodingType.BINARY)) {
        liveFields.push({
          inputElement: this.ui_[EncodingType.BINARY][fieldName],
          newValue: ''
        });
      }

      if (this.isEncodingEnabled_(EncodingType.HEXADECIMAL)) {
        liveFields.push({
          inputElement: this.ui_[EncodingType.HEXADECIMAL][fieldName],
          newValue: ''
        });
      }

      if (this.isEncodingEnabled_(EncodingType.DECIMAL)) {
        liveFields.push({
          inputElement: this.ui_[EncodingType.DECIMAL][fieldName],
          newValue: ''
        });
      }

      if (this.isEncodingEnabled_(EncodingType.ASCII)) {
        liveFields.push({
          inputElement: this.ui_[EncodingType.ASCII][fieldName],
          newValue: ''
        });
      }
    }

    // Advance to the next field
    fieldStart += fieldWidth;
  }, this);

  var bodyBinary = this.originalBinary_.substr(fieldStart);
  var truncatedBits = Math.max(0, this.sendAnimationIndex_ - fieldStart);
  var truncatedChunks = Math.floor(truncatedBits / chunkSize);
  var partialBinaryAtChunkSize = bodyBinary.substr(truncatedChunks * chunkSize);

  if (this.isEncodingEnabled_(EncodingType.A_AND_B)) {
    liveFields.push({
      inputElement: this.ui_[EncodingType.A_AND_B].message,
      newValue: formatAB(binaryToAB(bodyBinary).substr(truncatedBits), chunkSize, -truncatedBits),
      watermark: netsimMsg.a_and_b()
    });
  }

  if (this.isEncodingEnabled_(EncodingType.BINARY)) {
    liveFields.push({
      inputElement: this.ui_[EncodingType.BINARY].message,
      newValue: formatBinary(bodyBinary.substr(truncatedBits), chunkSize, -truncatedBits),
      watermark: netsimMsg.binary()
    });
  }

  if (this.isEncodingEnabled_(EncodingType.HEXADECIMAL)) {
    var truncatedHexDigits = Math.floor(truncatedBits / 4);
    liveFields.push({
      inputElement: this.ui_[EncodingType.HEXADECIMAL].message,
      newValue: formatHex(binaryToHex(bodyBinary).substr(truncatedHexDigits), chunkSize, -truncatedHexDigits),
      watermark: netsimMsg.hexadecimal()
    });
  }

  if (this.isEncodingEnabled_(EncodingType.DECIMAL)) {
    liveFields.push({
      inputElement: this.ui_[EncodingType.DECIMAL].message,
      newValue: alignDecimal(binaryToDecimal(partialBinaryAtChunkSize, chunkSize)),
      watermark: netsimMsg.decimal()
    });
  }

  if (this.isEncodingEnabled_(EncodingType.ASCII)) {
    liveFields.push({
      inputElement: this.ui_[EncodingType.ASCII].message,
      newValue: binaryToAscii(partialBinaryAtChunkSize, chunkSize),
      watermark: netsimMsg.ascii()
    });
  }

  liveFields.forEach(function (field) {
    if (field.watermark && field.newValue === '') {
      field.inputElement.val(field.watermark);
      field.inputElement.addClass('watermark');
    } else {
      field.inputElement.val(field.newValue);
      field.inputElement.removeClass('watermark');
    }
  });
};

/**
 * Update send widget display
 * @param {HTMLElement} [skipElement] - A field to skip while updating,
 *        because we don't want to transform content out from under the
 *        user's cursor.
 * @private
 */
NetSimPacketEditor.prototype.updateFields_ = function (skipElement) {
  var chunkSize = this.currentChunkSize_;
  var liveFields = [];

  var level = NetSimGlobals.getLevelConfig();
  var encoder = new Packet.Encoder(level.addressFormat, level.packetCountBitWidth, this.packetSpec_);

  this.packetSpec_.forEach(function (fieldSpec) {
    /** @type {Packet.HeaderType} */
    var fieldName = fieldSpec;
    /** @type {number} */
    var fieldWidth = encoder.getFieldBitWidth(fieldName);

    var abConverter, binaryConverter, hexConverter, decimalConverter, asciiConverter;
    if (Packet.isAddressField(fieldName)) {
      abConverter = function (addressString) {
        return DataConverters.binaryToAB(DataConverters.addressStringToBinary(addressString, level.addressFormat));
      };
      binaryConverter = function (addressString) {
        return DataConverters.formatBinaryForAddressHeader(DataConverters.addressStringToBinary(addressString, level.addressFormat), level.addressFormat);
      };
      hexConverter = function (addressString) {
        return DataConverters.binaryToHex(DataConverters.addressStringToBinary(addressString, level.addressFormat));
      };
      decimalConverter = cleanAddressString;
      asciiConverter = cleanAddressString;
    } else {
      abConverter = intToAB;
      binaryConverter = intToBinary;
      hexConverter = intToHex;
      decimalConverter = function (val) {
        return val.toString(10);
      };
      asciiConverter = decimalConverter;
    }

    if (this.isEncodingEnabled_(EncodingType.A_AND_B)) {
      liveFields.push({
        inputElement: this.ui_[EncodingType.A_AND_B][fieldName],
        newValue: abConverter(this[fieldName], fieldWidth)
      });
    }

    if (this.isEncodingEnabled_(EncodingType.BINARY)) {
      liveFields.push({
        inputElement: this.ui_[EncodingType.BINARY][fieldName],
        newValue: binaryConverter(this[fieldName], fieldWidth)
      });
    }

    if (this.isEncodingEnabled_(EncodingType.HEXADECIMAL)) {
      liveFields.push({
        inputElement: this.ui_[EncodingType.HEXADECIMAL][fieldName],
        newValue: hexConverter(this[fieldName], Math.ceil(fieldWidth / 4))
      });
    }

    if (this.isEncodingEnabled_(EncodingType.DECIMAL)) {
      liveFields.push({
        inputElement: this.ui_[EncodingType.DECIMAL][fieldName],
        newValue: decimalConverter(this[fieldName], fieldWidth)
      });
    }

    if (this.isEncodingEnabled_(EncodingType.ASCII)) {
      liveFields.push({
        inputElement: this.ui_[EncodingType.ASCII][fieldName],
        newValue: asciiConverter(this[fieldName], fieldWidth)
      });
    }
  }, this);

  if (this.isEncodingEnabled_(EncodingType.A_AND_B)) {
    liveFields.push({
      inputElement: this.ui_[EncodingType.A_AND_B].message,
      newValue: formatAB(binaryToAB(this.message), chunkSize),
      watermark: netsimMsg.a_and_b()
    });
  }

  if (this.isEncodingEnabled_(EncodingType.BINARY)) {
    liveFields.push({
      inputElement: this.ui_[EncodingType.BINARY].message,
      newValue: formatBinary(this.message, chunkSize),
      watermark: netsimMsg.binary()
    });
  }

  if (this.isEncodingEnabled_(EncodingType.HEXADECIMAL)) {
    liveFields.push({
      inputElement: this.ui_[EncodingType.HEXADECIMAL].message,
      newValue: formatHex(binaryToHex(this.message), chunkSize),
      watermark: netsimMsg.hexadecimal()
    });
  }

  if (this.isEncodingEnabled_(EncodingType.DECIMAL)) {
    liveFields.push({
      inputElement: this.ui_[EncodingType.DECIMAL].message,
      newValue: alignDecimal(binaryToDecimal(this.message, chunkSize)),
      watermark: netsimMsg.decimal()
    });
  }

  if (this.isEncodingEnabled_(EncodingType.ASCII)) {
    liveFields.push({
      inputElement: this.ui_[EncodingType.ASCII].message,
      newValue: binaryToAscii(this.message, chunkSize),
      watermark: netsimMsg.ascii()
    });
  }

  liveFields.forEach(function (field) {
    if (field.inputElement[0] !== skipElement) {
      if (field.watermark && field.newValue === '') {
        field.inputElement.val(field.watermark);
        field.inputElement.addClass('watermark');
      } else {
        field.inputElement.val(field.newValue);
        field.inputElement.removeClass('watermark');
      }
    }
  });

  this.updateBitCounter();
  this.contentChangeCallback_();
};

/**
 * If there's only one packet, applies "display: none" to the button so the
 * last packet can't be removed.  Otherwise, clears the CSS property override.
 * @private
 */
NetSimPacketEditor.prototype.updateRemoveButtonVisibility_ = function () {
  this.removePacketButton_.css('display', this.packetCount === 1 ? 'none' : '');
};

/**
 * Produces a single binary string in the current packet format, based
 * on the current state of the widget (content of its internal fields).
 * @returns {string} - binary representation of packet
 * @private
 */
NetSimPacketEditor.prototype.getPacketBinary = function () {
  var level = NetSimGlobals.getLevelConfig();
  var encoder = new Packet.Encoder(level.addressFormat, level.packetCountBitWidth, this.packetSpec_);
  return encoder.concatenateBinary(encoder.makeBinaryHeaders({
    toAddress: this.toAddress,
    fromAddress: this.fromAddress,
    packetIndex: this.packetIndex,
    packetCount: this.packetCount
  }), this.message);
};

/**
 * Sets editor fields from a complete packet binary, according to
 * the configured header specification.
 * @param {string} rawBinary
 */
NetSimPacketEditor.prototype.setPacketBinary = function (rawBinary) {
  var packet = new Packet(this.packetSpec_, rawBinary);

  if (this.specContainsHeader_(Packet.HeaderType.TO_ADDRESS)) {
    this.toAddress = packet.getHeaderAsAddressString(Packet.HeaderType.TO_ADDRESS);
  }

  if (this.specContainsHeader_(Packet.HeaderType.FROM_ADDRESS)) {
    this.fromAddress = packet.getHeaderAsAddressString(Packet.HeaderType.FROM_ADDRESS);
  }

  if (this.specContainsHeader_(Packet.HeaderType.PACKET_INDEX)) {
    this.packetIndex = packet.getHeaderAsInt(Packet.HeaderType.PACKET_INDEX);
  }

  if (this.specContainsHeader_(Packet.HeaderType.PACKET_COUNT)) {
    this.packetCount = packet.getHeaderAsInt(Packet.HeaderType.PACKET_COUNT);
  }

  this.message = packet.getBodyAsBinary();

  // Re-render all encodings
  this.updateFields_();
};

/**
 * @param {Packet.HeaderType} headerKey
 * @returns {boolean}
 * @private
 */
NetSimPacketEditor.prototype.specContainsHeader_ = function (headerKey) {
  return this.packetSpec_.some(function (headerSpec) {
    return headerSpec === headerKey;
  });
};

/**
 * Get just the first bit of the packet binary if it exists, for
 * single-bit sending mode.
 * @returns {string|undefined} a single bit if it exists, as "0" or "1",
 * or undefined if none does.
 */
NetSimPacketEditor.prototype.getFirstBit = function () {
  var binary = this.getPacketBinary();
  return binary.length > 0 ? binary.substr(0, 1) : undefined;
};

/** @param {number} fromAddress */
NetSimPacketEditor.prototype.setFromAddress = function (fromAddress) {
  this.fromAddress = fromAddress;
  this.updateFields_();
};

/** @param {number} packetIndex */
NetSimPacketEditor.prototype.setPacketIndex = function (packetIndex) {
  this.packetIndex = packetIndex;
  this.updateFields_();
};

/** @param {number} packetCount */
NetSimPacketEditor.prototype.setPacketCount = function (packetCount) {
  this.packetCount = packetCount;
  this.updateFields_();
  this.updateRemoveButtonVisibility_();
};

/** @param {number} maxPacketSize */
NetSimPacketEditor.prototype.setMaxPacketSize = function (maxPacketSize) {
  this.maxPacketSize_ = maxPacketSize;
  this.updateBitCounter();
};

/**
 * Show or hide parts of the send UI based on the currently selected encoding
 * mode.
 * @param {EncodingType[]} newEncodings
 */
NetSimPacketEditor.prototype.setEncodings = function (newEncodings) {
  this.enabledEncodingsHash_ = NetSimEncodingControl.encodingsAsHash(newEncodings);
  NetSimEncodingControl.hideRowsByEncoding(this.rootDiv_, newEncodings);
  this.render();
};

/**
 * Helper method that checks this.enabledEncodingsHash_ to see if the given
 * encoding is enabled
 * @param {EncodingType} queryEncoding
 * @returns {boolean} whether or not the given encoding is enabled
 * @private
 */
NetSimPacketEditor.prototype.isEncodingEnabled_ = function (queryEncoding) {
  return this.enabledEncodingsHash_[queryEncoding] === true;
};

/**
 * Change how data is interpreted and formatted by this component, triggering
 * an update of all input fields.
 * @param {number} newChunkSize
 */
NetSimPacketEditor.prototype.setChunkSize = function (newChunkSize) {
  this.currentChunkSize_ = newChunkSize;
  this.updateFields_();
};

/**
 * Change local device bitrate which changes send animation speed.
 * @param {number} newBitRate in bits per second
 */
NetSimPacketEditor.prototype.setBitRate = function (newBitRate) {
  this.bitRate_ = newBitRate;
};

/**
 * Update the visual state of the bit counter to reflect the current
 * message binary length and maximum packet size.
 */
NetSimPacketEditor.prototype.updateBitCounter = function () {
  var size = this.getPacketBinary().length;
  var maxSize = this.maxPacketSize_;
  this.bitCounter_.html(netsimMsg.bitCounter({
    x: size,
    y: maxSize
  }));

  this.bitCounter_.toggleClass('oversized', size > this.maxPacketSize_);
};

/**
 * Handler for the "Remove Packet" button. Calls handler provided by
 * parent, passing self, so that parent can remove this packet.
 * @param {Event} jQueryEvent
 * @private
 */
NetSimPacketEditor.prototype.onRemovePacketButtonClick_ = function (jQueryEvent) {
  var thisButton = $(jQueryEvent.target);
  // We also check parent elements here, because this button uses a font-awesome
  // glyph that can receive the event instead of the actual button.
  if (thisButton.is('[disabled]') || thisButton.parents().is('[disabled]')) {
    return;
  }

  this.removePacketCallback_(this);
};

/**
 * Remove the first bit of the packet binary, used when sending one bit
 * at a time.
 */
NetSimPacketEditor.prototype.consumeFirstBit = function () {
  this.setPacketBinary(this.getPacketBinary().substr(1));
};

},{"../constants":"/home/ubuntu/staging/apps/build/js/constants.js","../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./DataConverters":"/home/ubuntu/staging/apps/build/js/netsim/DataConverters.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimEncodingControl":"/home/ubuntu/staging/apps/build/js/netsim/NetSimEncodingControl.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimLogPanel":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogPanel.js","./NetSimPacketEditor.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimPacketEditor.html.ejs","./Packet":"/home/ubuntu/staging/apps/build/js/netsim/Packet.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimPacketEditor.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
  var i18n = require('./locale');
  var NetSimConstants = require('./NetSimConstants');
  var NetSimUtils = require('./NetSimUtils');
  var Packet = require('./Packet');

  var EncodingType = NetSimConstants.EncodingType;
  var MessageGranularity = NetSimConstants.MessageGranularity;
  var PacketUIColumnType = NetSimConstants.PacketUIColumnType;

  var getEncodingLabel = NetSimUtils.getEncodingLabel;
  var forEachEnumValue = NetSimUtils.forEachEnumValue;

  /**
  * @name enabledEncodingsHash
  * @type {Object}
  */

  function isEncodingEnabled(queryEncoding) {
    return enabledEncodingsHash[queryEncoding] === true;
  }

  /** @type {Packet.HeaderType[]} */
  var headerFields = packetSpec;

  /** @type {boolean} */
  var showToAddress = headerFields.indexOf(Packet.HeaderType.TO_ADDRESS) > -1;

  /** @type {boolean} */
  var showFromAddress = headerFields.indexOf(Packet.HeaderType.FROM_ADDRESS) > -1;

  /** @type {boolean} */
  var showPacketInfo = headerFields.indexOf(Packet.HeaderType.PACKET_INDEX) > -1 &&
      headerFields.indexOf(Packet.HeaderType.PACKET_COUNT) > -1;

  /** @type {boolean} */
  var usePacketGranularity = (messageGranularity === MessageGranularity.PACKETS);

  /**
   * Write the table header to the page, with the appropriate packet-header columns enabled.
   */
  function tableHeader() {
    ; buf.push('\n      <thead>\n        <tr>\n          <th nowrap class="', escape((46,  PacketUIColumnType.ENCODING_LABEL )), '"></th>\n          ');47; if (showToAddress) { ; buf.push('\n          <th nowrap class="', escape((48,  PacketUIColumnType.TO_ADDRESS )), '">', escape((48,  i18n.to() )), '</th>\n          ');49; } ; buf.push('\n          ');50; if (showFromAddress) { ; buf.push('\n          <th nowrap class="', escape((51,  PacketUIColumnType.FROM_ADDRESS )), '">', escape((51,  i18n.from() )), '</th>\n          ');52; } ; buf.push('\n          ');53; if (showPacketInfo) { ; buf.push('\n          <th nowrap class="', escape((54,  PacketUIColumnType.PACKET_INFO )), '">', escape((54,  i18n.packet() )), '</th>\n          ');55; } ; buf.push('\n          <th class="', escape((56,  PacketUIColumnType.MESSAGE )), '">\n            ', escape((57,  i18n.message() )), '\n            <div class="packet-controls">\n              <span class="netsim-button secondary remove-packet-button" title="', escape((59,  i18n.removePacket() )), '"><i class="fa fa-times"></i></span>\n            </div>\n          </th>\n        </tr>\n      </thead>\n    ');64;
  }

  /**
   * Write a table row to the page for the given data encoding.
   * @param {EncodingType} encodingType
   */
  function editorRow(encodingType) {
    ; buf.push('\n      <tr class="', escape((73,  encodingType )), '">\n        <th nowrap class="', escape((74,  PacketUIColumnType.ENCODING_LABEL )), '">', escape((74,  getEncodingLabel(encodingType) )), '</th>\n        ');75; if (showToAddress) { ; buf.push('\n        <td nowrap class="', escape((76,  PacketUIColumnType.TO_ADDRESS )), '"><input type="text" class="', escape((76,  Packet.HeaderType.TO_ADDRESS )), '" /></td>\n        ');77; } ; buf.push('\n        ');78; if (showFromAddress) { ; buf.push('\n        <td nowrap class="', escape((79,  PacketUIColumnType.FROM_ADDRESS )), '"><input type="text" readonly class="', escape((79,  Packet.HeaderType.FROM_ADDRESS )), '" /></td>\n        ');80; } ; buf.push('\n        ');81; if (showPacketInfo) { ; buf.push('\n        <td nowrap class="', escape((82,  PacketUIColumnType.PACKET_INFO )), '"><input type="text" readonly class="', escape((82,  Packet.HeaderType.PACKET_INDEX )), '" />', escape((82,  i18n._of_() )), '<input type="text" readonly class="', escape((82,  Packet.HeaderType.PACKET_COUNT )), '" /></td>\n        ');83; } ; buf.push('\n        <td class="', escape((84,  PacketUIColumnType.MESSAGE )), '"><div><textarea class="message"></textarea></div></td>\n      </tr>\n    ');86;
  }
; buf.push('\n<table>\n  ');90;
    // Only write the header row if we are using packets
    if (usePacketGranularity) {
      tableHeader();
    }
  ; buf.push('\n  <tbody>\n    ');97;
      // Write a body row for every packet encoding; we hide some of them post-render.
      forEachEnumValue(EncodingType, function (encodingType) {
        if (isEncodingEnabled(encodingType)) {
          editorRow(encodingType);
        }
      });
    ; buf.push('\n  </tbody>\n</table>\n\n');108; if (usePacketGranularity) { ; buf.push('\n  <div class="bit-counter"></div>\n');110; } ; buf.push('\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js","./Packet":"/home/ubuntu/staging/apps/build/js/netsim/Packet.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimMyDeviceTab.js":[function(require,module,exports){
/**
 * @overview UI controller for the "My Device" tab in the left column.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var markup = require('./NetSimMyDeviceTab.html.ejs');
var NetSimBitRateControl = require('./NetSimBitRateControl');
var NetSimPulseRateControl = require('./NetSimPulseRateControl');
var NetSimChunkSizeControl = require('./NetSimChunkSizeControl');
var NetSimEncodingControl = require('./NetSimEncodingControl');
var NetSimMetronome = require('./NetSimMetronome');
var NetSimGlobals = require('./NetSimGlobals');

/**
 * Generator and controller for "My Device" tab.
 * @param {jQuery} rootDiv
 * @param {RunLoop} runLoop
 * @param {Object} callbacks
 * @param {function} callbacks.chunkSizeChangeCallback
 * @param {function} callbacks.bitRateChangeCallback
 * @param {function} callbacks.encodingChangeCallback
 * @constructor
 */
var NetSimMyDeviceTab = module.exports = function (rootDiv, runLoop, callbacks) {
  /**
   * Component root, which we fill whenever we call render()
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = rootDiv;

  /**
   * @type {RunLoop}
   * @private
   */
  this.runLoop_ = runLoop;

  /**
   * Frequency of metronome pulses, in pulses per second
   * @type {number}
   * @private
   */
  this.bitsPerSecond_ = 1;

  /**
   * @type {function}
   * @private
   */
  this.chunkSizeSliderChangeCallback_ = callbacks.chunkSizeChangeCallback;

  /**
   * @type {function}
   * @private
   */
  this.bitRateChangeCallback_ = callbacks.bitRateChangeCallback;

  /**
   * @type {function}
   * @private
   */
  this.encodingChangeCallback_ = callbacks.encodingChangeCallback;

  /**
   * @type {NetSimMetronome}
   * @private
   */
  this.metronome_ = null;

  /**
   * @type {NetSimPulseRateControl}
   * @private
   */
  this.pulseRateControl_ = null;

  /**
   * @type {NetSimBitRateControl}
   * @private
   */
  this.bitRateControl_ = null;

  /**
   * @type {NetSimChunkSizeControl}
   * @private
   */
  this.chunkSizeControl_ = null;

  /**
   * @type {NetSimEncodingControl}
   * @private
   */
  this.encodingControl_ = null;

  this.render();
};

/**
 * Fill the root div with new elements reflecting the current state
 */
NetSimMyDeviceTab.prototype.render = function () {
  var levelConfig = NetSimGlobals.getLevelConfig();

  var renderedMarkup = $(markup({
    level: levelConfig
  }));
  this.rootDiv_.html(renderedMarkup);

  if (levelConfig.showMetronome) {
    this.metronome_ = new NetSimMetronome(this.rootDiv_.find('.metronome'), this.runLoop_);
    this.metronome_.setFrequency(this.bitsPerSecond_);
  }

  if (levelConfig.showPulseRateSlider) {
    this.pulseRateControl_ = new NetSimPulseRateControl(this.rootDiv_.find('.pulse-rate'), 1 / this.bitsPerSecond_, (function (secondsPerBit) {
      this.bitRateChangeCallback_(1 / secondsPerBit);
    }).bind(this));
  }

  if (levelConfig.showBitRateControl) {
    this.bitRateControl_ = new NetSimBitRateControl(this.rootDiv_.find('.bitrate'), this.bitsPerSecond_, this.bitRateChangeCallback_);
    if (levelConfig.lockBitRateControl) {
      this.bitRateControl_.disable();
    }
  }

  if (levelConfig.showChunkSizeControl) {
    this.chunkSizeControl_ = new NetSimChunkSizeControl(this.rootDiv_.find('.chunk-size'), this.chunkSizeSliderChangeCallback_);
    if (levelConfig.lockChunkSizeControl) {
      this.chunkSizeControl_.disable();
    }
  }

  if (levelConfig.showEncodingControls.length > 0) {
    this.encodingControl_ = new NetSimEncodingControl(this.rootDiv_.find('.encoding'), levelConfig, this.encodingChangeCallback_);
  }
};

/**
 * Handler for changing the position of the pulse-rate slider
 * @param {number} secondsPerPulse in seconds per pulse
 * @private
 */
NetSimMyDeviceTab.prototype.pulseRateSliderChange_ = function (secondsPerPulse) {
  this.setBitRate(1 / secondsPerPulse);
};

/**
 * @param {number} bitsPerSecond
 */
NetSimMyDeviceTab.prototype.setBitRate = function (bitsPerSecond) {
  this.bitsPerSecond_ = bitsPerSecond;

  if (this.metronome_) {
    this.metronome_.setFrequency(bitsPerSecond);
  }

  if (this.bitRateControl_) {
    this.bitRateControl_.setValue(bitsPerSecond);
  }

  if (this.pulseRateControl_ && bitsPerSecond < Infinity) {
    this.pulseRateControl_.setValue(1 / bitsPerSecond);
  }
};

/**
 * Update the slider and its label to display the provided value.
 * @param {number} newChunkSize
 */
NetSimMyDeviceTab.prototype.setChunkSize = function (newChunkSize) {
  if (this.chunkSizeControl_) {
    this.chunkSizeControl_.setValue(newChunkSize);
  }
};

/**
 * @param {EncodingType[]} newEncodings
 */
NetSimMyDeviceTab.prototype.setEncodings = function (newEncodings) {
  if (this.encodingControl_) {
    this.encodingControl_.setEncodings(newEncodings);
  }
};

},{"./NetSimBitRateControl":"/home/ubuntu/staging/apps/build/js/netsim/NetSimBitRateControl.js","./NetSimChunkSizeControl":"/home/ubuntu/staging/apps/build/js/netsim/NetSimChunkSizeControl.js","./NetSimEncodingControl":"/home/ubuntu/staging/apps/build/js/netsim/NetSimEncodingControl.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimMetronome":"/home/ubuntu/staging/apps/build/js/netsim/NetSimMetronome.js","./NetSimMyDeviceTab.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimMyDeviceTab.html.ejs","./NetSimPulseRateControl":"/home/ubuntu/staging/apps/build/js/netsim/NetSimPulseRateControl.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimPulseRateControl.js":[function(require,module,exports){
/**
 * @overview UI slider for changing the pulse rate (bitrate) of the local device.
 *           Differs from the bitrate slider in its scale and units.
 * @see NetSimBitRateControl
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

// Utils required only for Function.prototype.inherits()
require('../utils');
var i18n = require('./locale');
var NetSimSlider = require('./NetSimSlider');

/**
 * Generator and controller for packet size slider/selector
 * @param {jQuery} rootDiv
 * @param {number} initialValue - in seconds per pulse
 * @param {function} sliderChangeCallback
 * @constructor
 */
var NetSimPulseRateControl = module.exports = function (rootDiv, initialValue, sliderChangeCallback) {
  NetSimSlider.DecimalPrecisionSlider.call(this, rootDiv, {
    onChange: sliderChangeCallback,
    value: initialValue,
    min: 0.5,
    max: 5.0,
    step: -0.25
  });

  // Auto-render, unlike our base class
  this.render();
};
NetSimPulseRateControl.inherits(NetSimSlider.DecimalPrecisionSlider);

/**
 * Converts a numeric rate value (in seconds per pulse) into a
 * localized string representation of that value.
 * @param {number} val - numeric value of the control
 * @returns {string} - localized string representation of value
 * @override
 */
NetSimPulseRateControl.prototype.valueToLabel = function (val) {
  var rounded = Math.floor(val * 100) / 100;
  if (rounded === 1) {
    return i18n.xSecondPerPulse({ x: rounded });
  }
  return i18n.xSecondsPerPulse({ x: rounded });
};

/**
 * Converts a numeric rate value (in seconds per pulse) into a compact
 * localized string representation of that value, used for ends of the slider.
 * @param {number} val - numeric value of the control
 * @returns {string} - localized string representation of value
 * @override
 */
NetSimPulseRateControl.prototype.valueToShortLabel = function (val) {
  return val;
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimSlider":"/home/ubuntu/staging/apps/build/js/netsim/NetSimSlider.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimMyDeviceTab.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('<div class="netsim-my-device-tab">\n\n  ');3; if (level.showMetronome) { ; buf.push('\n    <div class="metronome"></div>\n  ');5; } ; buf.push('\n\n  ');7; if (level.showPulseRateSlider) { ; buf.push('\n    <h1>Pulse rate</h1>\n    <div class="pulse-rate"></div>\n  ');10; } ; buf.push('\n\n  ');12; if (level.showBitRateControl) { ; buf.push('\n    <h1>Bitrate</h1>\n    <div class="bitrate"></div>\n  ');15; } ; buf.push('\n\n  ');17; if (level.showChunkSizeControl) { ; buf.push('\n    <h1>Chunk size</h1>\n    <div class="chunk-size"></div>\n  ');20; } ; buf.push('\n\n  ');22; if (level.showEncodingControls.length > 0) { ; buf.push('\n    <div class="encoding"></div>\n  ');24; } ; buf.push('\n\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimMetronome.js":[function(require,module,exports){
/**
 * @overview UI component: An animated SVG metronome.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var markup = require('./NetSimMetronome.html.ejs');

/**
 * An SVG "metronome", in the form of a radial meter that fills and resets
 * at a regular interval.
 *
 * @param {jQuery} rootDiv
 * @param {RunLoop} runLoop
 * @constructor
 */
var NetSimMetronome = module.exports = function (rootDiv, runLoop) {
  /**
   * Component root, which we fill whenever we call render()
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = rootDiv;

  /**
   * Time of last pulse, in RunLoop simulation time
   * @type {number}
   * @private
   */
  this.lastPulseTime_ = undefined;

  /**
   * Milliseconds between metronome pulses
   * @type {number}
   * @private
   */
  this.pulseIntervalMillis_ = 0;

  /**
   * Normalized progress toward the next pulse, from 0.0 to 1.0
   * @type {number}
   * @private
   */
  this.progress_ = 0;

  /**
   * How long it's been since the last pulse in ms
   * @type {number}
   * @private
   */
  this.pulseAge_ = 0;

  // Register with run loop
  runLoop.render.register(this.render.bind(this));
};

/**
 * Fill the root div with new elements reflecting the current state
 * @param {RunLoop.Clock} clock
 */
NetSimMetronome.prototype.render = function (clock) {
  if (!this.lastPulseTime_) {
    this.lastPulseTime_ = clock.time;
  }

  // An infinite interval means we're effectively paused, so snap to zero
  // progress (visualized as an "empty" meter)
  if (this.pulseIntervalMillis_ === Infinity) {
    this.progress_ = 0;
    this.pulseAge_ = Infinity;
  } else {
    // For a non-infinite interval, update the meter progress value according
    // to the current time.
    this.pulseAge_ = clock.time - this.lastPulseTime_;
    this.progress_ = Math.min(this.pulseAge_ / this.pulseIntervalMillis_, 1);

    if (this.pulseAge_ >= this.pulseIntervalMillis_) {
      // Pulse
      var minimumLastPulseTime = clock.time - this.pulseIntervalMillis_;
      while (this.lastPulseTime_ < minimumLastPulseTime) {
        this.lastPulseTime_ += this.pulseIntervalMillis_;
      }
    }
  }

  var renderedMarkup = $(markup({
    progress: this.progress_,
    pulseAge: this.pulseAge_
  }));
  this.rootDiv_.html(renderedMarkup);
};

/**
 * Change the metronome speed
 * @param {number} pulsesPerSecond
 */
NetSimMetronome.prototype.setFrequency = function (pulsesPerSecond) {
  if (pulsesPerSecond === 0 || pulsesPerSecond === Infinity) {
    this.pulseIntervalMillis_ = Infinity;
    return;
  }
  this.pulseIntervalMillis_ = 1000 / pulsesPerSecond;
};

},{"./NetSimMetronome.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimMetronome.html.ejs"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimMetronome.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
  function moveCommand(x, y) {
    return 'M' + x + ' ' + y;
  }

  function lineCommand(x, y) {
    return 'L ' + x + ' ' + y;
  }

  function arcCommand(rX, rY, rot, largeArcFlag, sweepFlag, finalX, finalY) {
    return 'A ' + rX + ' ' + rY + ', ' + rot + ', ' + largeArcFlag + ', ' + sweepFlag + ', ' + finalX + ' ' + finalY;
  }

  function closeShapeCommand() {
    return 'Z';
  }

  /**
   * Outer radius of progress meter
   * @type {number}
   * @const
   */
  var OUTER_RADUS = 45;

  /**
   * Inner radius of progress meter, and maximum radius of pulse dot
   * @type {number}
   * @const
   */
  var INNER_RADIUS = 30;

  /**
   * How long (in ms) it takes the pulse circle to shrink back to nothing after it appears
   * @type {number}
   * @const
   */
  var PULSE_FALLOFF_MS = 500;

  /**
   * Radius of the inner pulse dot, based on the pulse age.  Starts full size, then shrinks
   * to r=0 over PULSE_FALLOFF_MS.
   * @type {number}
   */
  var pulseFalloffNormalizedProgress = Math.min(pulseAge/ PULSE_FALLOFF_MS, 1);
  var pulseDotRadius = INNER_RADIUS * (1 - pulseFalloffNormalizedProgress);


  /**
   * Given a certain percentage (as a value in the range [0.0-1.0]) this
   * generates a data string for a "path" svg object that draws a partially-filled arc
   * sweeping the appropriate percentage of a circle.
   * Progress begins its sweep at "east" and proceeds clockwise.
   * @param {number} normalizedProgress - number from 0.0 to 1.0
   * @returns {string} data string of commands for SVG path
   */
  function progressMeterSvgPathData(normalizedProgress) {
    var terminalRadians = 2 * Math.PI * normalizedProgress
    var largeArc = (normalizedProgress >= 0.5) ? 1 : 0;
    var sinAngle = Math.sin(terminalRadians);
    var cosAngle = Math.cos(terminalRadians);
    var outerTerminalX = OUTER_RADUS * cosAngle;
    var outerTerminalY = OUTER_RADUS * sinAngle;
    var innerTerminalX = INNER_RADIUS * cosAngle;
    var innerTerminalY = INNER_RADIUS * sinAngle;
    return [
      moveCommand(OUTER_RADUS, 0),
      arcCommand(OUTER_RADUS, OUTER_RADUS, 0, largeArc, 1, outerTerminalX, outerTerminalY),
      lineCommand(innerTerminalX, innerTerminalY),
      arcCommand(INNER_RADIUS, INNER_RADIUS, 0, largeArc, 0, INNER_RADIUS, 0),
      closeShapeCommand()
    ].join(' ');
  }
; buf.push('\n<div class="netsim-metronome">\n  <svg version="1.1" width="100" height="100" xmlns="http://www.w3.org/2000/svg">\n    <g id="centered-group" transform="translate(50,50)">\n      <circle r="48" cx="0" cy="0" fill="darkgray"></circle>\n      <circle r="48" cx="-1" cy="1" fill="lightgray"></circle>\n      <circle r="46" cx="0" cy="0" fill="#f5f5f5"></circle>\n      <circle class="pulse-dot" r="', escape((80,  pulseDotRadius )), '" cx="0" cy="0"></circle>\n      <g transform="rotate(-90)">\n        <path class="progress-meter" d="', escape((82,  progressMeterSvgPathData(progress) )), '"></path>\n      </g>\n    </g>\n  </svg>\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimMemoryControl.js":[function(require,module,exports){
/**
 * @overview UI slider used to control router memory size.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

require('../utils');
var NetSimConstants = require('./NetSimConstants');
var NetSimUtils = require('./NetSimUtils');
var NetSimSlider = require('./NetSimSlider');

/**
 * Generator and controller for packet size slider/selector
 * @param {jQuery} rootDiv
 * @param {function} sliderChangeCallback
 * @param {function} sliderStopCallback
 * @constructor
 */
var NetSimMemoryControl = module.exports = function (rootDiv, sliderChangeCallback, sliderStopCallback) {
  NetSimSlider.LogarithmicSlider.call(this, rootDiv, {
    onChange: sliderChangeCallback,
    onStop: sliderStopCallback,
    value: Infinity,
    min: NetSimConstants.BITS_PER_BYTE,
    max: NetSimConstants.BITS_PER_MEGABYTE,
    upperBoundInfinite: true
  });

  // Auto-render, unlike our base class
  this.render();
};
NetSimMemoryControl.inherits(NetSimSlider.LogarithmicSlider);

/**
 * Converts a numeric memory value (in bits) into a compact localized string
 * representation of that value.
 * @param {number} val - numeric value of the control
 * @returns {string} - localized string representation of value
 * @override
 */
NetSimMemoryControl.prototype.valueToLabel = function (val) {
  return NetSimUtils.bitsToLocalizedRoundedBytesize(val);
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimSlider":"/home/ubuntu/staging/apps/build/js/netsim/NetSimSlider.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogPanel.js":[function(require,module,exports){
/**
 * @overview UI component, a log panel (used as "Sent Packets" and
 *           "Received Packets") that is used in the packet-sending
 *           configurations of the simulator.
 *
 * @see INetSimLogPanel for the interface implemented here.
 * @see NetSimBitLogPanel for the component used in bit-sending mode.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var utils = require('../utils');
var i18n = require('./locale');
var markup = require('./NetSimLogPanel.html.ejs');
var Packet = require('./Packet');
var packetMarkup = require('./NetSimLogPacket.html.ejs');
var NetSimPanel = require('./NetSimPanel');
var NetSimEncodingControl = require('./NetSimEncodingControl');
var NetSimGlobals = require('./NetSimGlobals');

/**
 * How long the "entrance" animation for new messages lasts, in milliseconds.
 * @type {number}
 * @const
 */
var MESSAGE_SLIDE_IN_DURATION_MS = 400;

/**
 * How many packets the log may keep in its history (and in the DOM!)
 * @type {number}
 * @const
 */
var DEFAULT_MAXIMUM_LOG_PACKETS = 50;

/**
 * Object that can be sent data to be browsed by the user at their discretion
 * @interface
 * @name INetSimLogPanel
 */

/**
 * Put data into the log
 * @function
 * @name INetSimLogPanel#log
 * @param {string} binary
 */

/**
 * Show or hide parts of the log based on the currently selected encoding mode.
 * @function
 * @name INetSimLogPanel#setEncodings
 * @param {EncodingType[]} newEncodings
 */

/**
 * Change how binary input in interpreted and formatted in the log.
 * @function
 * @name INetSimLogPanel#setChunkSize
 * @param {number} newChunkSize
 */

/**
 * @function
 * @name INetSimLogPanel#getHeight
 * @returns {number} vertical space that panel currently consumes (including
 *          margins) in pixels.
 */

/**
 * Sets the vertical space that this log panel should consume (including margins)
 * @function
 * @name INetSimLogPanel#setHeight
 * @param {number} heightPixels
 */

/**
 * Generator and controller for message log.
 * @param {jQuery} rootDiv
 * @param {Object} options
 * @param {string} options.logTitle
 * @param {boolean} [options.isMinimized] defaults to FALSE
 * @param {boolean} [options.hasUnreadMessages] defaults to FALSE
 * @param {Packet.HeaderType[]} options.packetSpec
 * @param {number} [options.maximumLogPackets] How many packets the log will
 *        keep before it starts dropping the oldest ones.  Defaults to
 *        DEFAULT_MAXIMUM_LOG_PACKETS.
 * @constructor
 * @augments NetSimPanel
 * @implements INetSimLogPanel
 */
var NetSimLogPanel = module.exports = function (rootDiv, options) {
  /**
   * @type {Packet.HeaderType[]}
   * @private
   */
  this.packetSpec_ = options.packetSpec;

  /**
   * List of controllers for currently displayed packets.
   * @type {Array.<NetSimLogPacket>}
   * @private
   */
  this.packets_ = [];

  /**
   * A message encoding (display) setting.
   * @type {string}
   * @private
   */
  this.currentEncodings_ = [];

  /**
   * Current chunk size (bytesize) for interpreting binary in the log.
   * @type {number}
   * @private
   */
  this.currentChunkSize_ = 8;

  /**
   * Localized panel title
   * @type {string}
   * @private
   */
  this.logTitle_ = options.logTitle;

  /**
   * Whether newly logged messages in this log should be marked as unread
   * @type {boolean}
   * @private
   */
  this.hasUnreadMessages_ = !!options.hasUnreadMessages;

  /**
   * The maximum number of packets this log panel will keep in its memory
   * and in the DOM, so we don't have a forever-growing log.
   * @type {number}
   * @private,,
   */
  this.maximumLogPackets_ = utils.valueOr(options.maximumLogPackets, DEFAULT_MAXIMUM_LOG_PACKETS);

  // Initial render
  NetSimPanel.call(this, rootDiv, {
    className: 'netsim-log-panel',
    panelTitle: options.logTitle,
    beginMinimized: options.isMinimized
  });
};
NetSimLogPanel.inherits(NetSimPanel);

NetSimLogPanel.prototype.render = function () {
  // Create boilerplate panel markup
  NetSimLogPanel.superPrototype.render.call(this);

  // Add our own content markup
  var newMarkup = $(markup({}));
  this.getBody().html(newMarkup);

  // Add a clear button to the panel header
  this.addButton(i18n.clear(), this.onClearButtonPress_.bind(this));

  // Bind reference to scrollArea for use when logging.
  this.scrollArea_ = this.getBody().find('.scroll-area');

  this.updateUnreadCount();
};

/**
 * Remove all packets from the log, resetting its state.
 * @private
 */
NetSimLogPanel.prototype.onClearButtonPress_ = function () {
  this.scrollArea_.empty();
  this.packets_.length = 0;

  this.updateUnreadCount();
};

/**
 * Put a message into the log.
 * @param {string} packetBinary
 * @param {number} packetID
 */
NetSimLogPanel.prototype.log = function (packetBinary, packetID) {

  var packetAlreadyInLog = this.packets_.some(function (packet) {
    return packet.packetID === packetID;
  });

  if (packetAlreadyInLog) {
    return;
  }

  // Remove all packets that are beyond our maximum size
  this.packets_.splice(this.maximumLogPackets_ - 1, this.packets_.length).forEach(function (packet) {
    packet.getRoot().remove();
  });

  var newPacket = new NetSimLogPacket(packetBinary, packetID, {
    packetSpec: this.packetSpec_,
    encodings: this.currentEncodings_,
    chunkSize: this.currentChunkSize_,
    isUnread: this.hasUnreadMessages_,
    markAsReadCallback: this.updateUnreadCount.bind(this)
  });

  newPacket.getRoot().prependTo(this.scrollArea_);

  var scrollTop = this.scrollArea_.scrollTop();

  if (scrollTop === 0) {
    // If scrolled to the top, animate a pretty slidedown
    newPacket.getRoot().hide();
    newPacket.getRoot().slideDown(MESSAGE_SLIDE_IN_DURATION_MS);
  } else {
    // If we're somewhere in the middle of the messages, scroll "down"
    // to maintain our place relative to the messages we're looking at

    // Scrolling only takes the bottom margin into account, not top
    var packetHeight = newPacket.getRoot().outerHeight() + parseInt(newPacket.getRoot().css('marginBottom'));

    this.scrollArea_.scrollTop(scrollTop + packetHeight);
  }

  this.packets_.unshift(newPacket);

  this.updateUnreadCount();
};

NetSimLogPanel.prototype.updateUnreadCount = function () {
  var unreadCount = this.packets_.reduce(function (prev, cur) {
    return prev + (cur.isUnread ? 1 : 0);
  }, 0);

  if (unreadCount > 0) {
    this.setPanelTitle(i18n.appendCountToTitle({
      title: this.logTitle_,
      count: unreadCount
    }));
  } else {
    this.setPanelTitle(this.logTitle_);
  }
};

/**
 * Show or hide parts of the send UI based on the currently selected encoding
 * mode.
 * @param {EncodingType[]} newEncodings
 */
NetSimLogPanel.prototype.setEncodings = function (newEncodings) {
  this.currentEncodings_ = newEncodings;
  this.packets_.forEach(function (packet) {
    packet.setEncodings(newEncodings);
  });
};

/**
 * Change how binary input in interpreted and formatted in the log.
 * @param {number} newChunkSize
 */
NetSimLogPanel.prototype.setChunkSize = function (newChunkSize) {
  this.currentChunkSize_ = newChunkSize;
  this.packets_.forEach(function (packet) {
    packet.setChunkSize(newChunkSize);
  });
};

/**
 * A component/controller for display of an individual packet in the log.
 * @param {string} packetBinary - raw packet data
 * @param {Object} options
 * @param {Packet.HeaderType[]} options.packetSpec
 * @param {EncodingType[]} options.encodings - which display style to use initially
 * @param {number} options.chunkSize - (or bytesize) to use when interpreting and
 *        formatting the data.
 * @param {boolean} options.isUnread - whether this packet should be styled
 *        as "unread" and have a "mark as read" button
 * @param {function} options.markAsReadCallback
 * @constructor
 */
var NetSimLogPacket = function NetSimLogPacket(packetBinary, packetID, options) {

  /**
   * @type {number}
   */
  this.packetID = packetID;

  /**
   * @type {string}
   * @private
   */
  this.packetBinary_ = packetBinary;

  /**
   * @type {Packet.HeaderType[]}
   * @private
   */
  this.packetSpec_ = options.packetSpec;

  /**
   * @type {EncodingType[]}
   * @private
   */
  this.encodings_ = options.encodings;

  /**
   * @type {number}
   * @private
   */
  this.chunkSize_ = options.chunkSize;

  /**
   * @type {boolean}
   */
  this.isUnread = options.isUnread;

  /**
   * @type {boolean}
   */
  this.isMinimized = false;

  /**
   * @type {function}
   * @private
   */
  this.markAsReadCallback_ = options.markAsReadCallback;

  /**
   * Wrapper div that we create once, and fill repeatedly with render()
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = $('<div>').addClass('packet');
  this.rootDiv_.click(this.markAsRead.bind(this));

  // Initial content population
  this.render();
};

/**
 * Re-render div contents to represent the packet in a different way.
 */
NetSimLogPacket.prototype.render = function () {
  var encodingsHash = NetSimEncodingControl.encodingsAsHash(this.encodings_);
  var rawMarkup = packetMarkup({
    packetBinary: this.packetBinary_,
    packetSpec: this.packetSpec_,
    enabledEncodingsHash: encodingsHash,
    chunkSize: this.chunkSize_,
    isMinimized: this.isMinimized
  });
  var jQueryWrap = $(rawMarkup);
  NetSimLogPanel.adjustHeaderColumnWidths(jQueryWrap);
  NetSimEncodingControl.hideRowsByEncoding(jQueryWrap, this.encodings_);
  this.rootDiv_.html(jQueryWrap);
  this.rootDiv_.find('.expander').click(this.toggleMinimized.bind(this));
  this.rootDiv_.toggleClass('unread', this.isUnread);
};

/**
 * Return root div, for hooking up to a parent element.
 * @returns {jQuery}
 */
NetSimLogPacket.prototype.getRoot = function () {
  return this.rootDiv_;
};

/**
 * Beneath the given root element, adjust widths of packet header columns
 * and fields to match the level's configured packet format.
 * @param {jQuery} rootElement
 */
NetSimLogPanel.adjustHeaderColumnWidths = function (rootElement) {
  var level = NetSimGlobals.getLevelConfig();
  var encoder = new Packet.Encoder(level.addressFormat, level.packetCountBitWidth, level.clientInitialPacketHeader);
  var addressBitWidth = encoder.getFieldBitWidth(Packet.HeaderType.TO_ADDRESS);
  var packetInfoBitWidth = encoder.getFieldBitWidth(Packet.HeaderType.PACKET_COUNT);

  // Adjust width of address columns
  // For columns, 50px is sufficient for 4 bits
  var PX_PER_BIT = 50 / 4;
  var addressColumnWidthInPx = PX_PER_BIT * addressBitWidth;

  // Adjust width of address columns
  rootElement.find('td.toAddress, th.toAddress, td.fromAddress, th.fromAddress').css('width', addressColumnWidthInPx + 'px');

  // Adjust width of address input fields
  // For inputs, 3em is sufficient for 4 bits
  var EMS_PER_BIT = 3 / 4;
  var addressFieldWidthInEms = EMS_PER_BIT * addressBitWidth;
  rootElement.find('td.toAddress input, td.fromAddress input').css('width', addressFieldWidthInEms + 'em');

  // Adjust width of packet info column
  // Packet info column uses two fields and an extra 21px for " of "
  var packetInfoColumnWidthInPx = 2 * PX_PER_BIT * packetInfoBitWidth + 21;
  rootElement.find('td.packetInfo, th.packetInfo').css('width', packetInfoColumnWidthInPx + 'px');

  // Adjust width of packet info fields
  var packetInfoFieldWidthInEms = EMS_PER_BIT * packetInfoBitWidth;
  rootElement.find('td.packetInfo input').css('width', packetInfoFieldWidthInEms + 'em');
};

/**
 * Change encoding-display setting and re-render packet contents accordingly.
 * @param {EncodingType[]} newEncodings
 */
NetSimLogPacket.prototype.setEncodings = function (newEncodings) {
  this.encodings_ = newEncodings;
  this.render();
};

/**
 * Change chunk size for interpreting data and re-render packet contents
 * accordingly.
 * @param {number} newChunkSize
 */
NetSimLogPacket.prototype.setChunkSize = function (newChunkSize) {
  this.chunkSize_ = newChunkSize;
  this.render();
};

/**
 * Mark the packet as read, changing its style and removing the "mark as read"
 * button.
 */
NetSimLogPacket.prototype.markAsRead = function () {
  if (this.isUnread) {
    this.isUnread = false;
    this.render();
    this.markAsReadCallback_();
  }
};

NetSimLogPacket.prototype.toggleMinimized = function () {
  this.isMinimized = !this.isMinimized;
  this.render();
};

/**
 * Sets the vertical space that this log panel should consume (including margins)
 * @param {number} heightPixels
 */
NetSimLogPanel.prototype.setHeight = function (heightPixels) {
  var root = this.getRoot().find('.netsim-panel');
  var panelHeader = root.find('h1');
  var panelBody = root.find('.panel-body');

  var panelMargins = parseFloat(root.css('margin-top')) + parseFloat(root.css('margin-bottom'));
  var headerHeight = panelHeader.outerHeight(true);
  var panelBorders = parseFloat(panelBody.css('border-top-width')) + parseFloat(panelBody.css('border-bottom-width'));
  var scrollMargins = parseFloat(this.scrollArea_.css('margin-top')) + parseFloat(this.scrollArea_.css('margin-bottom'));

  // We set the panel height by fixing the size of its inner scrollable
  // area.
  var newScrollViewportHeight = heightPixels - (panelMargins + headerHeight + panelBorders + scrollMargins);
  this.scrollArea_.height(Math.floor(newScrollViewportHeight));
};

/**
 * @returns {number} vertical space that panel currently consumes (including
 *          margins) in pixels.
 */
NetSimLogPanel.prototype.getHeight = function () {
  return this.getRoot().find('.netsim-panel').outerHeight(true);
};

/**
 * After toggling panel visibility, trigger a layout update so send/log panel
 * space is shared correctly.
 * @private
 * @override
 */
NetSimLogPanel.prototype.onMinimizerClick_ = function () {
  NetSimLogPanel.superPrototype.onMinimizerClick_.call(this);
  NetSimGlobals.updateLayout();
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimEncodingControl":"/home/ubuntu/staging/apps/build/js/netsim/NetSimEncodingControl.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimLogPacket.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogPacket.html.ejs","./NetSimLogPanel.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogPanel.html.ejs","./NetSimPanel":"/home/ubuntu/staging/apps/build/js/netsim/NetSimPanel.js","./Packet":"/home/ubuntu/staging/apps/build/js/netsim/Packet.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogPanel.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('<div class="scroll-area">\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogPacket.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
  var NetSimConstants = require('./NetSimConstants');
  var NetSimGlobals = require('./NetSimGlobals');
  var DataConverters = require('./DataConverters');
  var i18n = require('./locale');
  var getEncodingLabel = require('./NetSimUtils').getEncodingLabel;
  var Packet = require('./Packet');

  var level = NetSimGlobals.getLevelConfig();

  var EncodingType = NetSimConstants.EncodingType;
  var PacketUIColumnType = NetSimConstants.PacketUIColumnType;

  var formatAB = DataConverters.formatAB;
  var formatBinary = DataConverters.formatBinary;
  var formatHex = DataConverters.formatHex;
  var alignDecimal = DataConverters.alignDecimal;
  var binaryToAB = DataConverters.binaryToAB;
  var binaryToInt = DataConverters.binaryToInt;
  var binaryToHex = DataConverters.binaryToHex;
  var binaryToDecimal = DataConverters.binaryToDecimal;
  var binaryToAscii = DataConverters.binaryToAscii;
  var binaryToAddressString = function (binaryString) {
    return DataConverters.binaryToAddressString(binaryString, level.addressFormat);
  };
  var formatBinaryForAddressHeader = function (binaryString) {
    return DataConverters.formatBinaryForAddressHeader(binaryString, level.addressFormat);
  };

  /** @type {Packet} */
  var packet = new Packet(packetSpec, packetBinary);

  /** @type {Packet.HeaderType[]} */
  var headerFields = packetSpec;

  var showToAddress = headerFields.indexOf(Packet.HeaderType.TO_ADDRESS) > -1;
  var showFromAddress = headerFields.indexOf(Packet.HeaderType.FROM_ADDRESS) > -1;
  var showPacketInfo = headerFields.indexOf(Packet.HeaderType.PACKET_INDEX) > -1 &&
      headerFields.indexOf(Packet.HeaderType.PACKET_COUNT) > -1;

  /**
  * @name enabledEncodingsHash
  * @type {Object}
  */

  function isEncodingEnabled(queryEncoding) {
    return enabledEncodingsHash[queryEncoding] === true;
  }

  /**
   * Packet one-line summary should only use the highest-level enabled encoding.
   */
  function getOneLinePacketSummary() {
    var messageBinary = packet.getBodyAsBinary();
    if (isEncodingEnabled(EncodingType.ASCII)) {
      return binaryToAscii(messageBinary, chunkSize);
    } else if (isEncodingEnabled(EncodingType.DECIMAL)) {
      return alignDecimal(binaryToDecimal(messageBinary, chunkSize));
    } else if (isEncodingEnabled(EncodingType.HEXADECIMAL)) {
      return formatHex(binaryToHex(messageBinary), chunkSize);
    } else if (isEncodingEnabled(EncodingType.BINARY)) {
      return formatBinary(messageBinary, chunkSize);
    } else if (isEncodingEnabled(EncodingType.A_AND_B)) {
      return formatAB(binaryToAB(messageBinary), chunkSize);
    }
    return messageBinary;
  }

  /**
   * @param {EncodingType} encodingType
   * @param {string} toAddress
   * @param {string} fromAddress
   * @param {string} packetInfo
   * @param {string} message
   */
  function logRowIfEncodingEnabled(encodingType, toAddress, fromAddress, packetInfo, message) {
    if (isEncodingEnabled(encodingType)) {
      ; buf.push('\n        <tr class="', escape((79,  encodingType )), '">\n          <th nowrap class="', escape((80,  PacketUIColumnType.ENCODING_LABEL )), '">', escape((80,  getEncodingLabel(encodingType) )), '</th>\n          ');81; if (showToAddress) { ; buf.push('\n            <td nowrap class="', escape((82,  PacketUIColumnType.TO_ADDRESS )), '">', escape((82,  toAddress )), '</td>\n          ');83; } ; buf.push('\n          ');84; if (showFromAddress) { ; buf.push('\n            <td nowrap class="', escape((85,  PacketUIColumnType.FROM_ADDRESS )), '">', escape((85,  fromAddress )), '</td>\n          ');86; } ; buf.push('\n          ');87; if (showPacketInfo) { ; buf.push('\n            <td nowrap class="', escape((88,  PacketUIColumnType.PACKET_INFO )), '">', escape((88,  packetInfo )), '</td>\n          ');89; } ; buf.push('\n          <td class="', escape((90,  PacketUIColumnType.MESSAGE )), '">', escape((90,  message )), '</td>\n        </tr>\n    ');92;
    }
  }
 ; buf.push('\n  ');96;
    var toAddress = showToAddress ? packet.getHeaderAsBinary(Packet.HeaderType.TO_ADDRESS) : '';
    var fromAddress = showFromAddress ? packet.getHeaderAsBinary(Packet.HeaderType.FROM_ADDRESS) : '';
    var packetIndex = showPacketInfo ? packet.getHeaderAsBinary(Packet.HeaderType.PACKET_INDEX) : '';
    var packetCount = showPacketInfo ? packet.getHeaderAsBinary(Packet.HeaderType.PACKET_COUNT) : '';
    var message = packet.getBodyAsBinary();
  ; buf.push('\n  ');103; if (isMinimized) { ; buf.push('\n      <div class="minimized-packet single-line-with-ellipsis user-data">\n        <i class="fa fa-plus-square expander"></i>\n        ', escape((106,  getOneLinePacketSummary() )), '\n      </div>\n  ');108; } else { ; buf.push('\n    <table class="maximized-packet">\n      <thead>\n        <tr>\n          <th nowrap class="', escape((112,  PacketUIColumnType.ENCODING_LABEL )), '">\n            <i class="fa fa-minus-square expander"></i>\n          </th>\n          ');115; if (showToAddress) { ; buf.push('\n            <th nowrap class="', escape((116,  PacketUIColumnType.TO_ADDRESS )), '">', escape((116,  i18n.to() )), '</th>\n          ');117; } ; buf.push('\n          ');118; if (showFromAddress) { ; buf.push('\n            <th nowrap class="', escape((119,  PacketUIColumnType.FROM_ADDRESS )), '">', escape((119,  i18n.from() )), '</th>\n          ');120; } ; buf.push('\n          ');121; if (showPacketInfo) { ; buf.push('\n            <th nowrap class="', escape((122,  PacketUIColumnType.PACKET_INFO )), '">', escape((122,  i18n.packet() )), '</th>\n          ');123; } ; buf.push('\n          <th class="', escape((124,  PacketUIColumnType.MESSAGE )), '">\n            ', escape((125,  i18n.message() )), '\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n      ');130;
        logRowIfEncodingEnabled(EncodingType.ASCII,
            binaryToAddressString(toAddress),
            binaryToAddressString(fromAddress),
            i18n.xOfYPackets({
              x: binaryToInt(packetIndex),
              y: binaryToInt(packetCount)
            }),
            binaryToAscii(message, chunkSize));

        logRowIfEncodingEnabled(EncodingType.DECIMAL,
            binaryToAddressString(toAddress),
            binaryToAddressString(fromAddress),
            i18n.xOfYPackets({
              x: binaryToInt(packetIndex),
              y: binaryToInt(packetCount)
            }),
            alignDecimal(binaryToDecimal(message, chunkSize)));

        logRowIfEncodingEnabled(EncodingType.HEXADECIMAL,
            binaryToHex(toAddress),
            binaryToHex(fromAddress),
            i18n.xOfYPackets({
              x: binaryToHex(packetIndex),
              y: binaryToHex(packetCount)
            }),
            formatHex(binaryToHex(message), chunkSize));

        logRowIfEncodingEnabled(EncodingType.BINARY,
            formatBinaryForAddressHeader(toAddress, 4),
            formatBinaryForAddressHeader(fromAddress, 4),
            formatBinary(packetIndex + packetCount, level.packetCountBitWidth),
            formatBinary(message, chunkSize));

        logRowIfEncodingEnabled(EncodingType.A_AND_B,
            binaryToAB(toAddress),
            binaryToAB(fromAddress),
            formatAB(binaryToAB(packetIndex + packetCount), level.packetCountBitWidth),
            formatAB(binaryToAB(message), chunkSize));
       ; buf.push('\n      </tbody>\n    </table>\n  ');172; } ; buf.push('\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"./DataConverters":"/home/ubuntu/staging/apps/build/js/netsim/DataConverters.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js","./Packet":"/home/ubuntu/staging/apps/build/js/netsim/Packet.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimLocalClientNode.js":[function(require,module,exports){
/**
 * @overview Simulation entity controller reserved for the local client's
 *           simulation node.
 * @see NetSimClientNode for the controller used for other client nodes
 *      in the simulation.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var utils = require('../utils');
var _ = utils.getLodash();
var i18n = require('./locale');
var NetSimClientNode = require('./NetSimClientNode');
var NetSimEntity = require('./NetSimEntity');
var NetSimAlert = require('./NetSimAlert');
var NetSimMessage = require('./NetSimMessage');
var NetSimLogger = require('./NetSimLogger');
var NetSimRouterNode = require('./NetSimRouterNode');
var ObservableEvent = require('../ObservableEvent');

var logger = NetSimLogger.getSingleton();
var NetSimConstants = require('./NetSimConstants');
var NetSimGlobals = require('./NetSimGlobals');

var MessageGranularity = NetSimConstants.MessageGranularity;

/**
 * Client model of node being simulated on the local client.
 *
 * Provides special access for manipulating the locally-owned client node in
 * ways that you aren't allowed to manipulate other client nodes.
 *
 * @param {!NetSimShard} shard
 * @param {Object} [clientRow] - Lobby row for this router.
 * @constructor
 * @augments NetSimClientNode
 */
var NetSimLocalClientNode = module.exports = function (shard, clientRow) {
  NetSimClientNode.call(this, shard, clientRow);

  // TODO (bbuchanan): Consider:
  //      Do we benefit from inheritance here?  Would it be cleaner to make this
  //      not-an-entity that manipulates a stock NetSimClientNode?  Will another
  //      developer find it easy to understand how this class works?

  /**
   * Client nodes can be connected to other clients.
   * @type {NetSimClientNode}
   */
  this.myRemoteClient = null;

  /**
   * ID of the router this client node is connected to.  Undefined if
   * not connected to a router.
   * @type {number|undefined}
   * @private
   */
  this.myRouterID_ = undefined;

  /**
   * Set of router controllers enabled for simulation by this node.
   * @type {NetSimRouterNode[]}
   * @private
   */
  this.routers_ = [];

  /**
   * Widget where we will post sent messages.
   * @type {NetSimLogPanel}
   * @private
   */
  this.sentLog_ = null;

  /**
   * Widget where we will post received messages
   * @type {NetSimLogPanel}
   * @private
   */
  this.receivedLog_ = null;

  /**
   * Change event others can observe, which we will fire when we
   * connect or disconnect from a router or remote client
   * @type {ObservableEvent}
   */
  this.remoteChange = new ObservableEvent();

  /**
   * Callback for when something indicates that this node has been
   * disconnected from the instance.
   * @type {function}
   * @private
   */
  this.onNodeLostConnection_ = function () {};

  /**
   * Event registration information
   * @type {Object}
   */
  this.eventKeys = {};
};
NetSimLocalClientNode.inherits(NetSimClientNode);

/**
 * Static async creation method. See NetSimEntity.create().
 * @param {!NetSimShard} shard
 * @param {string} displayName
 * @param {!NodeStyleCallback} onComplete - Method that will be given the
 *        created entity, or null if entity creation failed.
 */
NetSimLocalClientNode.create = function (shard, displayName, onComplete) {
  // TODO (bbuchanan): Modify and return the template node instead of
  // making two in this method.
  var templateNode = new NetSimLocalClientNode(shard);
  templateNode.displayName_ = displayName;
  templateNode.getTable().create(templateNode.buildRow(), function (err, row) {
    if (err) {
      onComplete(err, null);
      return;
    }

    var newNode = new NetSimLocalClientNode(shard, row);
    onComplete(null, newNode);
  });
};

/** Set node's display name.  Does not trigger an update! */
NetSimLocalClientNode.prototype.setDisplayName = function (displayName) {
  this.displayName_ = displayName;
};

/**
 * Configure this node controller to actively simulate, and to post sent and
 * received messages to the given log widgets.
 * @param {!NetSimLogPanel} sentLog
 * @param {!NetSimLogPanel} receivedLog
 */
NetSimLocalClientNode.prototype.initializeSimulation = function (sentLog, receivedLog) {
  this.sentLog_ = sentLog;
  this.receivedLog_ = receivedLog;

  // Subscribe to table changes
  this.eventKeys.nodeTable = this.shard_.nodeTable.tableChange.register(this.onNodeTableChange_.bind(this));
  this.eventKeys.wireTable = this.shard_.wireTable.tableChange.register(this.onWireTableChange_.bind(this));
  this.eventKeys.messageTable = this.shard_.messageTable.tableChange.register(this.onMessageTableChange_.bind(this));
  this.eventKeys.registeredOnShard = this.shard_;

  // Set up initial state from cached rows
  this.onNodeTableChange_();
};

/**
 * Gives the simulating node a chance to unregister from anything it was
 * observing.
 */
NetSimLocalClientNode.prototype.stopSimulation = function () {
  if (this.eventKeys.registeredOnShard) {
    this.eventKeys.registeredOnShard.nodeTable.tableChange.unregister(this.eventKeys.nodeTable);
    this.eventKeys.registeredOnShard.wireTable.tableChange.unregister(this.eventKeys.wireTable);
    this.eventKeys.registeredOnShard.messageTable.tableChange.unregister(this.eventKeys.messageTable);
    this.eventKeys.registeredOnShard = null;
  }
};

/**
 * Ticks the simulation routers
 * @param {!RunLoop.Clock} clock
 */
NetSimLocalClientNode.prototype.tick = function (clock) {
  // TODO (bbuchanan): Move the router collection and ticking the
  // routers up to netsim.js (or elsewhere)
  this.routers_.forEach(function (router) {
    router.tick(clock);
  });
};

/**
 * Give this node an action to take if it detects that it is no longer part
 * of the shard.
 * @param {function} onNodeLostConnection
 */
NetSimLocalClientNode.prototype.setLostConnectionCallback = function (onNodeLostConnection) {
  this.onNodeLostConnection_ = onNodeLostConnection;
};

/**
 * If a client update fails, should attempt an automatic reconnect.
 * @param {NodeStyleCallback} [onComplete]
 */
NetSimLocalClientNode.prototype.update = function (onComplete) {
  onComplete = onComplete || function () {};

  var self = this;
  NetSimLocalClientNode.superPrototype.update.call(this, function (err, result) {
    if (err) {
      logger.error("Local node update failed: " + err.message);
      self.onNodeLostConnection_();
    }
    onComplete(err, result);
  });
};

/**
 * Connect to a remote client node.
 * @param {NetSimClientNode} client
 * @param {!NodeStyleCallback} onComplete
 */
NetSimLocalClientNode.prototype.connectToClient = function (client, onComplete) {
  this.connectToNode(client, (function (err, wire) {
    if (err) {
      onComplete(err);
      return;
    }

    // Check whether WE just established a mutual connection with a remote client.
    this.shard_.wireTable.refresh().always((function () {
      this.onWireTableChange_(this.shard_.wireTable.readAll());
      onComplete(err, wire);
    }).bind(this));
  }).bind(this));
};

/**
 * @param {!NetSimRouterNode} router
 * @param {NodeStyleCallback} onComplete
 */
NetSimLocalClientNode.prototype.connectToRouter = function (router, onComplete) {
  onComplete = onComplete || function () {};

  logger.info(this.getDisplayName() + ": Connecting to " + router.getDisplayName());
  this.connectToNode(router, (function (err, wire) {
    if (err) {
      onComplete(err);
      return;
    }

    this.myRouterID_ = router.entityID;

    this.remoteChange.notifyObservers(this.getOutgoingWire(), this.getMyRouter());
    onComplete(null, wire);
  }).bind(this));
};

/**
 * Create an appropriate initial wire row for connecting to the given node.
 * Overrides NetSimNode version to add improved connect-to-router functionality.
 * @param {!NetSimNode} otherNode
 * @returns {WireRow}
 * @override
 */
NetSimLocalClientNode.prototype.makeWireRowForConnectingTo = function (otherNode) {
  if (otherNode instanceof NetSimRouterNode) {
    return {
      localNodeID: this.entityID,
      remoteNodeID: otherNode.entityID,
      localAddress: otherNode.getRandomAvailableClientAddress(),
      remoteAddress: otherNode.getAddress(),
      localHostname: this.getHostname(),
      remoteHostname: otherNode.getHostname()
    };
  }
  return NetSimLocalClientNode.superPrototype.makeWireRowForConnectingTo.call(this, otherNode);
};

/**
 * Helper/accessor for router controller instance for the router that this
 * client is directly connected to.
 * @returns {NetSimRouterNode|null} Router we are connected to or null if not
 *          connected to a router at all.
 */
NetSimLocalClientNode.prototype.getMyRouter = function () {
  if (this.myRouterID_ === undefined) {
    return null;
  }

  return _.find(this.routers_, (function (router) {
    return router.entityID === this.myRouterID_;
  }).bind(this));
};

/**
 * @param {NodeStyleCallback} [onComplete]
 */
NetSimLocalClientNode.prototype.disconnectRemote = function (onComplete) {
  onComplete = onComplete || function () {};

  // save the wire so we can destroy it
  var wire = this.getOutgoingWire();

  // remove all local references to connections
  this.cleanUpBeforeDestroyingWire_();

  // destroy wire on API
  wire.destroy((function (err) {
    // We're not going to stop if an error occurred here; the error might
    // just be that the wire was already cleaned up by another node.
    // As long as we make a good-faith disconnect effort, the cleanup system
    // will correct any mistakes and we won't lock up our client trying to
    // re-disconnect.
    if (err) {
      logger.info("Error while disconnecting: " + err.message);
    }
    onComplete(null);
  }).bind(this));
};

/**
 * Common cleanup behavior shared between the synchronous and asynchronous
 * disconnect paths.
 * @private
 */
NetSimLocalClientNode.prototype.cleanUpBeforeDestroyingWire_ = function () {
  this.myRemoteClient = null;
  this.myRouterID_ = undefined;
  this.remoteChange.notifyObservers(null, null);
};

/**
 * Put a message on our outgoing wire, to whatever we are connected to
 * at the moment.
 * @param {string} payload
 * @param {!NodeStyleCallback} onComplete
 */
NetSimLocalClientNode.prototype.sendMessage = function (payload, onComplete) {
  var myWire = this.getOutgoingWire();
  if (!myWire) {
    onComplete(new Error('Cannot send message; not connected.'));
    return;
  }

  var localNodeID = myWire.localNodeID;
  var remoteNodeID = myWire.remoteNodeID;

  // Who will be responsible for picking up/cleaning up this message?
  var simulatingNodeID = this.selectSimulatingNode_(localNodeID, remoteNodeID);
  var levelConfig = NetSimGlobals.getLevelConfig();
  var extraHops = levelConfig.minimumExtraHops;
  if (levelConfig.minimumExtraHops !== levelConfig.maximumExtraHops) {
    extraHops = NetSimGlobals.randomIntInRange(levelConfig.minimumExtraHops, levelConfig.maximumExtraHops + 1);
  }

  var self = this;
  NetSimMessage.send(this.shard_, {
    fromNodeID: localNodeID,
    toNodeID: remoteNodeID,
    simulatedBy: simulatingNodeID,
    payload: payload,
    extraHopsRemaining: extraHops
  }, (function (err, row) {
    if (err) {
      logger.error('Failed to send message: ' + err.message + "\n" + JSON.stringify(payload));
      NetSimAlert.error(i18n.sendMessageError());
      onComplete(err);
      return;
    }

    logger.info(this.getDisplayName() + ': Sent message:' + '\nfrom: ' + localNodeID + '\nto  : ' + remoteNodeID + '\nsim : ' + simulatingNodeID + '\nhops: ' + extraHops);

    if (self.sentLog_) {
      self.sentLog_.log(payload, row.id);
    }
    onComplete(null);
  }).bind(this));
};

/**
 * Decide whether the local node or the remote node will be responsible
 * for picking up and cleaning up this message from remote storage.
 * @param {number} localNodeID
 * @param {number} remoteNodeID
 * @returns {number} one of the two IDs provided
 */
NetSimLocalClientNode.prototype.selectSimulatingNode_ = function (localNodeID, remoteNodeID) {
  if (NetSimGlobals.getLevelConfig().messageGranularity === MessageGranularity.BITS) {
    // In simplex wire mode, the local node cleans up its own messages
    // when it knows they are no longer current.
    return localNodeID;
  } else if (this.myRouterID_ !== undefined && this.myRouterID_ === remoteNodeID) {
    // If sending to a router, we will do our own simulation on the router's
    // behalf
    return localNodeID;
  }
  // Default case: The designated recipient must pick up the message.
  return remoteNodeID;
};

/**
 * Sequentially puts a list of messages onto the outgoing wire, to whatever
 * we are connected to at the moment.
 * @param {string[]} payloads
 * @param {!NodeStyleCallback} onComplete
 */
NetSimLocalClientNode.prototype.sendMessages = function (payloads, onComplete) {
  if (payloads.length === 0) {
    onComplete(null);
    return;
  }

  this.sendMessage(payloads[0], (function (err, result) {
    if (err) {
      onComplete(err, result);
      return;
    }

    this.sendMessages(payloads.slice(1), onComplete);
  }).bind(this));
};

/**
 * Whenever the node table changes, make needed changes to our collection of
 * routers configured to simulate for the local node.
 * @private
 */
NetSimLocalClientNode.prototype.onNodeTableChange_ = function () {
  var nodeRows = this.shard_.nodeTable.readAll();

  // If our own row is gone, drop everything and handle disconnect.
  if (!this.canFindOwnRowIn(nodeRows)) {
    this.onNodeLostConnection_();
    return;
  }

  // Remove simulating routers that have vanished from remote storage.
  this.routers_ = this.routers_.filter(function (simulatingRouter) {
    var stillExists = nodeRows.some(function (row) {
      return row.id === simulatingRouter.entityID;
    });
    if (!stillExists) {
      simulatingRouter.stopSimulation();
      return false;
    }
    return true;
  });

  // Create and simulate new routers
  nodeRows.filter(function (row) {
    return row.type === NetSimConstants.NodeType.ROUTER;
  }).forEach(function (row) {
    var alreadySimulating = this.routers_.some(function (simulatingRouter) {
      return row.id === simulatingRouter.entityID;
    });

    if (!alreadySimulating) {
      var newRouter = new NetSimRouterNode(this.shard_, row);
      newRouter.initializeSimulation(this.entityID);
      this.routers_.push(newRouter);
    }
  }, this);
};

/**
 * @param {Object[]} nodeRows
 * @returns {boolean} TRUE if own row is in given row collection
 */
NetSimLocalClientNode.prototype.canFindOwnRowIn = function (nodeRows) {
  return nodeRows.some(function (row) {
    return row.id === this.entityID && row.uuid === this.uuid;
  }, this);
};

/**
 * Handler for any wire table change.  Used here to detect mutual
 * connections between client nodes that indicate we can move to a
 * "connected" state or stop trying to connect.
 * @private
 */
NetSimLocalClientNode.prototype.onWireTableChange_ = function () {
  var myWire = this.getOutgoingWire();
  if (!myWire) {
    return;
  }

  var wireRows = this.shard_.wireTable.readAll();
  var myConnectionTargetWireRow, isTargetConnectedToSomeoneElse;

  // Look for mutual connection
  var mutualConnectionRow = _.find(wireRows, (function (row) {
    return row.remoteNodeID === myWire.localNodeID && row.localNodeID === myWire.remoteNodeID;
  }).bind(this));

  if (mutualConnectionRow && !this.myRemoteClient) {
    // New mutual connection! Get the node for our own use.
    NetSimClientNode.get(mutualConnectionRow.localNodeID, this.shard_, (function (err, remoteClient) {
      this.myRemoteClient = remoteClient;
      this.remoteChange.notifyObservers(myWire, this.myRemoteClient);
    }).bind(this));
  } else if (!mutualConnectionRow && this.myRemoteClient) {
    // Remote client disconnected or we disconnected; either way we are
    // no longer connected.
    NetSimAlert.info(i18n.alertPartnerDisconnected());
    this.disconnectRemote();
  } else if (!mutualConnectionRow && !this.myRemoteClient) {
    // The client we're trying to connect to might have connected to
    // someone else; check if they did and if so, stop trying to connect
    myConnectionTargetWireRow = _.find(wireRows, (function (row) {
      return row.localNodeID === myWire.remoteNodeID && row.remoteNodeID !== myWire.localNodeID;
    }).bind(this));
    isTargetConnectedToSomeoneElse = myConnectionTargetWireRow ? wireRows.some(function (row) {
      return row.remoteNodeID === myConnectionTargetWireRow.localNodeID && row.localNodeID === myConnectionTargetWireRow.remoteNodeID;
    }) : undefined;
    if (myConnectionTargetWireRow && isTargetConnectedToSomeoneElse) {
      NetSimAlert.info(i18n.alertConnectionRefused());
      this.disconnectRemote();
    }
  }
};

/**
 * Listens for changes to the message table.  Detects and handles messages
 * sent to this node.
 * @private
 */
NetSimLocalClientNode.prototype.onMessageTableChange_ = function () {
  if (!NetSimGlobals.getLevelConfig().automaticReceive) {
    // In this level, we will not automatically pick up messages directed
    // at us.  We must manually call a receive method instead.
    return;
  }

  if (this.isProcessingMessages_) {
    // We're already in this method, getting called recursively because
    // we are making changes to the table.  Ignore this call.
    return;
  }

  var messages = this.shard_.messageTable.readAll().map((function (row) {
    return new NetSimMessage(this.shard_, row);
  }).bind(this)).filter((function (message) {
    return message.toNodeID === this.entityID && message.simulatedBy === this.entityID;
  }).bind(this));

  if (messages.length === 0) {
    // No messages for us, no work to do
    return;
  }

  // Setup (sync): Set processing flag
  logger.info("Local node received " + messages.length + " messages");
  this.isProcessingMessages_ = true;

  // Step 1 (async): Pull all our messages out of storage
  NetSimEntity.destroyEntities(messages, (function (err) {
    if (err) {
      logger.error('Error pulling message off the wire: ' + err.message);
      this.isProcessingMessages_ = false;
      return;
    }

    // Step 2 (sync): Handle all messages
    messages.forEach(function (message) {
      this.handleMessage_(message);
    }, this);

    // Cleanup (sync): Clear processing flag
    logger.info("Local node finished processing " + messages.length + " messages");
    this.isProcessingMessages_ = false;
  }).bind(this));
};

/**
 * Post message to 'received' log.
 * @param {!NetSimMessage} message
 * @private
 */
NetSimLocalClientNode.prototype.handleMessage_ = function (message) {
  logger.info(this.getDisplayName() + ': Handling incoming message');
  // TODO: How much validation should we do here?
  if (this.receivedLog_) {
    this.receivedLog_.log(message.payload, message.entityID);
  }
};

/**
 * Asynchronously receive the latest message shared between this node
 * and its connected remote node.
 * @param {!NodeStyleCallback} onComplete - given the message as a result, or
 *        NULL if no messages exist.
 */
NetSimLocalClientNode.prototype.getLatestMessageOnSimplexWire = function (onComplete) {
  var myWire = this.getOutgoingWire();
  if (!myWire) {
    onComplete(new Error("Unable to retrieve message; not connected."));
    return;
  }

  // Does an asynchronous request to the message table to ensure we have
  // the latest contents
  var messageTable = this.shard_.messageTable;
  messageTable.refresh().fail(onComplete).done((function () {
    // We only care about rows on our (simplex) wire
    var rowsOnWire = messageTable.readAll().filter((function (row) {
      return myWire.isMessageRowOnSimplexWire(row);
    }).bind(this));

    // If there are no rows, complete successfully but pass null result.
    if (rowsOnWire.length === 0) {
      onComplete(null, null);
      return;
    }

    var lastRow = rowsOnWire[rowsOnWire.length - 1];
    onComplete(null, new NetSimMessage(this.shard_, lastRow));
  }).bind(this));
};

/**
 * Asynchronously set the state of the shared wire.
 * @param {string} newState - probably ought to be "0" or "1"
 * @param {!NodeStyleCallback} onComplete
 */
NetSimLocalClientNode.prototype.setSimplexWireState = function (newState, onComplete) {
  this.sendMessage(newState, (function (err) {
    if (err) {
      logger.warn(err.message);
      onComplete(new Error("Failed to set wire state."));
      return;
    }

    // We're not done!  Also do our part to keep the message table clean.
    this.removeMyOldMessagesFromWire_(onComplete);
  }).bind(this));
};

/**
 * Removes all messages on the current wire that are simulated by the local
 * node and are not the latest message on the wire.
 * Used by simplex configurations where we only care about the wire's current
 * (latest) state.
 * @param {!NodeStyleCallback} onComplete
 */
NetSimLocalClientNode.prototype.removeMyOldMessagesFromWire_ = function (onComplete) {
  var myWire = this.getOutgoingWire();
  if (!myWire) {
    onComplete(new Error("Unable to retrieve message; not connected."));
    return;
  }

  // Does an asynchronous request to the message table to ensure we have
  // the latest contents
  var messageTable = this.shard_.messageTable;
  messageTable.refresh().fail(onComplete).done((function () {
    // We only care about rows on our (simplex) wire
    var rowsOnWire = messageTable.readAll().filter(function (row) {
      return myWire.isMessageRowOnSimplexWire(row);
    }, this);

    // "Old" rows are all but the last element (the latest one)
    var oldRowsOnWire = rowsOnWire.slice(0, -1);

    // We are only in charge of deleting messages that we are simulating
    var myOldRowsOnWire = oldRowsOnWire.filter(function (row) {
      return row.simulatedBy === this.entityID;
    }, this);

    // Convert to message entities so we can destroy them
    var myOldMessagesOnWire = myOldRowsOnWire.map(function (row) {
      return new NetSimMessage(this.shard_, row);
    }, this);

    NetSimEntity.destroyEntities(myOldMessagesOnWire, onComplete);
  }).bind(this));
};

},{"../ObservableEvent":"/home/ubuntu/staging/apps/build/js/ObservableEvent.js","../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimAlert":"/home/ubuntu/staging/apps/build/js/netsim/NetSimAlert.js","./NetSimClientNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimClientNode.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimEntity":"/home/ubuntu/staging/apps/build/js/netsim/NetSimEntity.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimLogger":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogger.js","./NetSimMessage":"/home/ubuntu/staging/apps/build/js/netsim/NetSimMessage.js","./NetSimRouterNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterNode.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimLobby.js":[function(require,module,exports){
/**
 * @overview UI controller for lobby - handles flow for name entry, section
 *           selection, and remote node selection.
 * @see NetSimShardSelectionPanel for name entry and shard selection.
 * @see NetSimRemoteNodeSelectionPanel for implementation of the actual
 *      lobby table.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var utils = require('../utils');
var _ = utils.getLodash();
var i18n = require('./locale');
var NetSimNodeFactory = require('./NetSimNodeFactory');
var NetSimClientNode = require('./NetSimClientNode');
var NetSimAlert = require('./NetSimAlert');
var NetSimApiError = require('./NetSimApiError');
var NetSimRouterNode = require('./NetSimRouterNode');
var NetSimShardSelectionPanel = require('./NetSimShardSelectionPanel');
var NetSimRemoteNodeSelectionPanel = require('./NetSimRemoteNodeSelectionPanel');

var logger = require('./NetSimLogger').getSingleton();
var NetSimGlobals = require('./NetSimGlobals');

/**
 * @typedef {Object} ShardChoice
 * @property {string} shardSeed - unique key for shard within level, used in
 *           share URLs
 * @property {string} shardID - unique key for shard in tables API, used as
 *           prefix to table names.  Must be 48 characters or less, and
 *           consistently generatable from a level ID and seed.
 * @property {string} displayName - localized shard name
 */

/**
 * Generator and controller for lobby/connection controls.
 *
 * @param {jQuery} rootDiv
 * @param {NetSim} connection - The shard connection that this
 *        lobby control will manipulate.
 * @param {Object} options
 * @param {DashboardUser} options.user
 * @param {string} options.levelKey
 * @param {string} options.sharedShardSeed
 * @constructor
 * @augments NetSimPanel
 */
var NetSimLobby = module.exports = function (rootDiv, netsim, options) {
  /**
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = rootDiv;

  /**
   * Shard connection that this lobby control will manipulate.
   * @type {NetSim}
   * @private
   */
  this.netsim_ = netsim;

  /**
   * @type {string}
   * @private
   */
  this.levelKey_ = options.levelKey;

  /**
   * @type {NetSimShardSelectionPanel}
   * @private
   */
  this.shardSelectionPanel_ = null;

  /**
   * @type {NetSimRemoteNodeSelectionPanel}
   * @private
   */
  this.nodeSelectionPanel_ = null;

  /**
   * @type {NetSimShard}
   * @private
   */
  this.shard_ = null;

  /**
   * @type {NetSimLocalClientNode}
   * @private
   */
  this.myNode_ = null;

  /**
   * Storage for ObservableEvent registration keys, to make sure we
   * can unregister as needed.
   * @type {Object}
   */
  this.eventKeys = {};

  /**
   * @type {DashboardUser}
   * @private
   */
  this.user_ = options.user;

  /**
   * @type {string}
   * @private
   */
  this.displayName_ = options.user.isSignedIn ? options.user.name : '';

  /**
   * Shard options for the current user
   * @type {ShardChoice[]}
   * @private
   */
  this.shardChoices_ = [];

  /**
   * Which shard ID is currently selected
   * @type {string}
   * @private
   */
  this.selectedShardID_ = undefined;

  /**
   * @type {NetSimNode[]}
   * @private
   */
  this.nodesOnShard_ = [];

  /**
   * @type {NetSimNode[]}
   * @private
   */
  this.incomingConnectionNodes_ = [];

  /**
   * @type {NetSimNode}
   * @private
   */
  this.remoteNode_ = null;

  /**
   * Allows multiple methods to have a 'disable' lock on the lobby.
   * @type {Object}
   * @private
   */
  this.disableEverythingKeys_ = {};

  // Figure out the list of user sections, which requires an async request
  // and re-render if the user is signed in.
  if (options.user.isSignedIn) {
    this.getUserSections_((function (sectionList) {
      this.buildShardChoiceList_(sectionList, options.sharedShardSeed);
      this.render();
    }).bind(this));
  } else {
    this.buildShardChoiceList_([], options.sharedShardSeed);
  }

  // Initial render
  this.render();

  // Register for events
  this.netsim_.shardChange.register(this.onShardChange_.bind(this));
};

/**
 * Recreate markup within panel body.
 */
NetSimLobby.prototype.render = function () {
  var isConnectedToShard = this.shard_ !== null;
  if (!isConnectedToShard) {

    // Shard selection panel: Controls for setting display name and picking
    // a section, if they aren't set automatically.
    this.shardSelectionPanel_ = new NetSimShardSelectionPanel(this.rootDiv_, {
      displayName: this.displayName_,
      shardChoices: this.shardChoices_,
      selectedShardID: this.selectedShardID_,
      disableControls: this.isEverythingDisabled()
    }, {
      setNameCallback: this.setDisplayName.bind(this),
      setShardCallback: this.setShardID.bind(this)
    });
  } else {

    // Node selection panel: The lobby list of who we can connect to, and
    // controls for picking one and connecting.
    this.nodeSelectionPanel_ = new NetSimRemoteNodeSelectionPanel(this.rootDiv_, {
      user: this.user_,
      shardID: this.shard_.id,
      nodesOnShard: this.nodesOnShard_,
      incomingConnectionNodes: this.incomingConnectionNodes_,
      remoteNode: this.remoteNode_,
      myNodeID: this.myNode_.entityID,
      disableControls: this.isEverythingDisabled()
    }, {
      addRouterCallback: this.addRouterToLobby.bind(this),
      cancelButtonCallback: this.onCancelButtonClick_.bind(this),
      joinButtonCallback: this.onJoinButtonClick_.bind(this),
      resetShardCallback: this.onResetShardButtonClick_.bind(this)
    });
  }

  this.netsim_.debouncedResizeFooter();
};

NetSimLobby.prototype.updateLayout = function () {
  if (this.nodeSelectionPanel_) {
    this.nodeSelectionPanel_.updateLayout();
  }
};

/**
 * @param {string} displayName
 */
NetSimLobby.prototype.setDisplayName = function (displayName) {
  this.displayName_ = displayName;
  this.render();

  if (this.selectedShardID_ && this.displayName_ && !this.netsim_.isConnectedToShardID(this.selectedShardID_)) {
    this.netsim_.connectToShard(this.selectedShardID_, this.displayName_);
  }
};

/**
 * @param {string} shardID
 */
NetSimLobby.prototype.setShardID = function (shardID) {
  this.selectedShardID_ = shardID;
  this.render();

  if (this.selectedShardID_ && this.displayName_ && !this.netsim_.isConnectedToShardID(this.selectedShardID_)) {
    this.netsim_.connectToShard(this.selectedShardID_, this.displayName_);
  }
};

/**
 * @param {NetSimShard} shard
 * @param {NetSimLocalClientNode} myNode
 * @private
 */
NetSimLobby.prototype.onShardChange_ = function (shard, myNode) {
  // Unregister old handlers
  if (this.eventKeys.registeredShard) {
    this.eventKeys.registeredShard.nodeTable.tableChange.unregister(this.eventKeys.nodeTable);
    this.eventKeys.registeredShard.wireTable.tableChange.unregister(this.eventKeys.wireTable);
    this.registeredShard = undefined;
  }

  this.shard_ = shard;
  this.myNode_ = myNode;

  if (this.shard_) {
    // We got connected to a shard!
    // Register for events
    this.eventKeys.nodeTable = this.shard_.nodeTable.tableChange.register(this.onNodeTableChange_.bind(this));
    this.eventKeys.wireTable = this.shard_.wireTable.tableChange.register(this.onWireTableChange_.bind(this));
    this.eventKeys.registeredShard = this.shard_;

    // Trigger a forced read of the node table
    this.fetchInitialLobbyData_();
  } else {
    // We've been disconnected from a shard
    // Clear our selected shard ID
    this.selectedShardID_ = undefined;

    // Clear cached lobby data
    this.nodesOnShard_.length = 0;
    this.incomingConnectionNodes_.length = 0;

    // Redraw the lobby
    this.render();

    // If there's only one option, try to auto-reconnect
    if (this.shardChoices_.length === 1) {
      this.setShardID(this.shardChoices_[0].shardID);
    }
  }
};

/**
 * Upon connecting to a new shard, we need to trigger a manual read of the
 * node and wire tables to ensure our lobby listing is correct.  Otherwise we'd
 * have to wait until a change was detected in one of those tables.
 * @private
 */
NetSimLobby.prototype.fetchInitialLobbyData_ = function () {
  $.when(this.shard_.nodeTable.refresh(), this.shard_.wireTable.refresh()).fail((function (nodeErr, wireErr) {
    if (nodeErr) {
      logger.warn('Node table refresh failed: ' + nodeErr);
    } else if (wireErr) {
      logger.warn('Wire table refresh failed: ' + wireErr);
    }
  }).bind(this)).done((function () {
    // Because the lobby may not get table-change events from this refresh,
    // manually pass the cached table contents in.
    this.onNodeTableChange_();
    this.onWireTableChange_();

    // If we use routers and there's no router, create a router.
    // TODO: Move this logic to the server, somehow.
    if (NetSimGlobals.getLevelConfig().canConnectToRouters && !this.doesShardContainRouter()) {
      this.addRouterToLobby();
    }
  }).bind(this));
};

/**
 * @returns {boolean} whether the currently cached node data for the shard
 *          includes a router node.
 */
NetSimLobby.prototype.doesShardContainRouter = function () {
  return undefined !== _.find(this.nodesOnShard_, function (shardNode) {
    return shardNode instanceof NetSimRouterNode;
  });
};

/**
 * Generate a new router node, configured according to the current level.
 * The change to the node table should trigger appropriate updates to various
 * UI elements.
 */
NetSimLobby.prototype.addRouterToLobby = function () {
  var enableCallback = this.disableEverything();
  NetSimRouterNode.create(this.shard_, (function (err) {
    enableCallback();
    if (err) {
      var ValidationError = NetSimApiError.ValidationError;
      switch (err.details) {
        case ValidationError.CONFLICT:
          // Another router with the same routerNumber already exists.
          // Ignore this; to the user it looks like it worked!
          logger.warn('Did not create router; ' + 'Another user created a router at the same time.');
          break;

        case ValidationError.LIMIT_REACHED:
          // The server's router limit has been reached.
          // Usually the client will remove the "Add Router" button first.
          logger.warn('Did not create router; Router limit reached.');
          NetSimAlert.warn(i18n.routerLimitReachedError());
          break;

        default:
          // Malformed row or some other unexpected error.
          logger.error("Unable to create router: " + err.message);
          NetSimAlert.error(i18n.addRouterToLobbyError());
      }
    }
  }).bind(this));
};

/**
 * @returns {boolean} TRUE if anything has requested the whole lobby to be
 *          disabled, false otherwise.
 */
NetSimLobby.prototype.isEverythingDisabled = function () {
  return Object.keys(this.disableEverythingKeys_).length > 0;
};

/**
 * Disable all of the lobby controls together.
 * @returns {function} Callback for re-enabling the lobby.
 */
NetSimLobby.prototype.disableEverything = function () {
  var requestKey = utils.createUuid();
  this.disableEverythingKeys_[requestKey] = true;

  if (this.nodeSelectionPanel_) {
    this.nodeSelectionPanel_.disableEverything();
  }

  // Return an 'enable' callback
  return this.enableEverything_.bind(this, requestKey);
};

/**
 * Release a 'disable-hold' on the lobby and re-enable the lobby controls if
 * it was the last such disable-hold.
 * @param {!string} key - a unique identifier for this particular disable request.
 * @private
 */
NetSimLobby.prototype.enableEverything_ = function (key) {
  delete this.disableEverythingKeys_[key];
  if (!this.isEverythingDisabled()) {
    if (this.nodeSelectionPanel_) {
      this.nodeSelectionPanel_.enableEverything();
    }
  }
};

/**
 * Handler for clicking the "Join" button.
 * @param {NetSimClientNode|NetSimRouterNode} nodeToJoin
 */
NetSimLobby.prototype.onJoinButtonClick_ = function (nodeToJoin) {
  var enableCallback = this.disableEverything();
  if (nodeToJoin instanceof NetSimRouterNode) {
    this.netsim_.connectToRouter(nodeToJoin.entityID, enableCallback);
  } else if (nodeToJoin instanceof NetSimClientNode) {
    this.myNode_.connectToClient(nodeToJoin, enableCallback);
  }
};

/**
 * Handler for clicking the "Cancel" button to stop trying to connect to
 * another client.
 * @private
 */
NetSimLobby.prototype.onCancelButtonClick_ = function () {
  var enableCallback = this.disableEverything();
  this.netsim_.disconnectFromRemote(enableCallback);
};

/**
 * Handle for clicking the reset shard button.
 * @private
 */
NetSimLobby.prototype.onResetShardButtonClick_ = function () {
  this.netsim_.resetShard();
};

/**
 * Called whenever a change is detected in the nodes table - which should
 * trigger a refresh of the lobby listing
 * @private
 */
NetSimLobby.prototype.onNodeTableChange_ = function () {
  this.nodesOnShard_ = NetSimNodeFactory.nodesFromRows(this.shard_, this.shard_.nodeTable.readAll());
  this.render();
};

/**
 * Called whenever a change is detected in the wires table.
 * @private
 */
NetSimLobby.prototype.onWireTableChange_ = function () {
  var rows = this.shard_.wireTable.readAll();
  // Update the collection of nodes with connections pointing toward us.
  this.incomingConnectionNodes_ = rows.filter(function (wireRow) {
    return wireRow.remoteNodeID === this.myNode_.entityID;
  }, this).map(function (wireRow) {
    return _.find(this.nodesOnShard_, function (node) {
      return node.entityID === wireRow.localNodeID;
    });
  }, this).filter(function (node) {
    // In case the wire table change comes in before the node table change.
    return node !== undefined;
  });

  // Find outgoing wires
  var outgoingWireRow = _.find(rows, (function (wireRow) {
    return wireRow.localNodeID === this.myNode_.entityID;
  }).bind(this));

  this.remoteNode_ = outgoingWireRow ? _.find(this.nodesOnShard_, function (node) {
    return node.entityID === outgoingWireRow.remoteNodeID;
  }) : null;

  // Re-render with new information
  this.render();
};

/**
 * Send a request to dashboard and retrieve a JSON array listing the
 * sections this user belongs to.
 * @param {function} callback
 * @private
 */
NetSimLobby.prototype.getUserSections_ = function (callback) {
  var memberSectionsRequest = $.ajax({
    dataType: 'json',
    url: '/v2/sections/membership'
  });

  var ownedSectionsRequest = $.ajax({
    dataType: 'json',
    url: '/v2/sections'
  });

  $.when(memberSectionsRequest, ownedSectionsRequest).done(function (result1, result2) {
    var memberSectionData = result1[0];
    var ownedSectionData = result2[0];
    callback(memberSectionData.concat(ownedSectionData));
  });
};

/**
 * Populate the internal cache of shard options, given a set of the current
 * user's sections.
 * @param {Array} sectionList - list of sections this user is a member or
 *        administrator of.  Each section has an id and a name.  May be empty.
 * @param {string} sharedShardSeed - a shard ID present if we reached netsim
 *        via a share link.  We should make sure this shard is an option.
 * @private
 */
NetSimLobby.prototype.buildShardChoiceList_ = function (sectionList, sharedShardSeed) {
  this.shardChoices_.length = 0;

  // If we have a shared shard seed, put it first in the list:
  if (sharedShardSeed) {
    var sharedShardID = this.makeShardIDFromSeed_(sharedShardSeed);
    this.shardChoices_.push({
      shardSeed: sharedShardSeed,
      shardID: sharedShardID,
      displayName: sharedShardSeed
    });
  }

  // Add user's sections to the shard list
  this.shardChoices_ = this.shardChoices_.concat(sectionList.map((function (section) {
    return {
      shardSeed: section.id,
      shardID: this.makeShardIDFromSeed_(section.id),
      displayName: section.name
    };
  }).bind(this)));

  // If there still aren't any options, generate a random shard
  if (this.shardChoices_.length === 0) {
    var seed = utils.createUuid();
    var randomShardID = this.makeShardIDFromSeed_(seed);
    this.shardChoices_.push({
      shardSeed: seed,
      shardID: randomShardID,
      displayName: i18n.myPrivateNetwork()
    });
  }

  // If there's only one possible shard, select it by default
  if (this.shardChoices_.length === 1 && !this.selectedShardID_) {
    this.setShardID(this.shardChoices_[0].shardID);
  }
};

/**
 * Generate a unique shard key from the given seed
 * @param {string} seed
 * @private
 */
NetSimLobby.prototype.makeShardIDFromSeed_ = function (seed) {
  // TODO (bbuchanan) : Hash shard ID, more likely to ensure it's unique
  //                    and fits within 48 characters.
  // Maybe grab this MIT-licensed implementation via node?
  // https://github.com/blueimp/JavaScript-MD5
  return ('ns_' + this.levelKey_ + '_' + seed).substr(0, 48);
};

/**
 * Gets a share URL for the currently-selected shard ID.
 * @returns {string} or empty string if there is no shard selected.
 */
NetSimLobby.prototype.getShareLink = function () {
  if (!this.displayName_) {
    return '';
  }

  var selectedShard = _.find(this.shardChoices_, (function (shard) {
    return shard.shardID === this.selectedShardID_;
  }).bind(this));

  if (selectedShard) {
    var baseLocation = document.location.protocol + '//' + document.location.host + document.location.pathname;
    return baseLocation + '?s=' + selectedShard.shardSeed;
  }

  return '';
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimAlert":"/home/ubuntu/staging/apps/build/js/netsim/NetSimAlert.js","./NetSimApiError":"/home/ubuntu/staging/apps/build/js/netsim/NetSimApiError.js","./NetSimClientNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimClientNode.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimLogger":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogger.js","./NetSimNodeFactory":"/home/ubuntu/staging/apps/build/js/netsim/NetSimNodeFactory.js","./NetSimRemoteNodeSelectionPanel":"/home/ubuntu/staging/apps/build/js/netsim/NetSimRemoteNodeSelectionPanel.js","./NetSimRouterNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterNode.js","./NetSimShardSelectionPanel":"/home/ubuntu/staging/apps/build/js/netsim/NetSimShardSelectionPanel.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimShardSelectionPanel.js":[function(require,module,exports){
/**
 * @overview Lobby UI component used for name entry and selecting a shard/class
 *           section.
 * @see NetSimLobby for usage.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var utils = require('../utils');
var i18n = require('./locale');
var markup = require('./NetSimShardSelectionPanel.html.ejs');
var NetSimPanel = require('./NetSimPanel');

var KeyCodes = require('../constants').KeyCodes;

/**
 * @type {string}
 * @const
 */
var SELECTOR_NONE_VALUE = '';

/**
 * Generator and controller for message log.
 *
 * @param {jQuery} rootDiv
 *
 * @param {Object} options
 * @param {string} options.displayName
 * @param {Array} options.shardChoices
 * @param {string} options.selectedShardID
 *
 * @param {Object} callbacks
 * @param {function} callbacks.setNameCallback
 * @param {function} callbacks.setShardCallback
 *
 * @constructor
 * @augments NetSimPanel
 */
var NetSimShardSelectionPanel = module.exports = function (rootDiv, options, callbacks) {
  /**
   * @type {string}
   * @private
   */
  this.displayName_ = options.displayName;

  /**
   * Shard options for the current user
   * @type {ShardChoice[]}
   * @private
   */
  this.shardChoices_ = utils.valueOr(options.shardChoices, []);

  /**
   * Which shard ID is currently selected
   * @type {string}
   * @private
   */
  this.selectedShardID_ = utils.valueOr(options.selectedShardID, SELECTOR_NONE_VALUE);

  /**
   * @type {function}
   * @private
   */
  this.setNameCallback_ = callbacks.setNameCallback;

  /**
   * @type {function}
   * @private
   */
  this.setShardCallback_ = callbacks.setShardCallback;

  // Initial render
  NetSimPanel.call(this, rootDiv, {
    className: 'netsim-shard-selection-panel',
    panelTitle: i18n.pickASection(),
    userToggleable: false
  });
};
NetSimShardSelectionPanel.inherits(NetSimPanel);

/**
 * Recreate markup within panel body.
 */
NetSimShardSelectionPanel.prototype.render = function () {
  // Create boilerplate panel markup
  NetSimShardSelectionPanel.superPrototype.render.call(this);

  // Add our own content markup
  var newMarkup = $(markup({
    displayName: this.displayName_,
    selectedShardID: this.selectedShardID_,
    shardChoices: this.shardChoices_,
    SELECTOR_NONE_VALUE: SELECTOR_NONE_VALUE
  }));
  this.getBody().html(newMarkup);

  // Bind handlers
  var nameField = this.getBody().find('#netsim-lobby-name');
  nameField.keyup(this.onNameKeyUp_.bind(this));

  var setNameButton = this.getBody().find('#netsim-lobby-set-name-button');
  setNameButton.click(this.setNameButtonClick_.bind(this));

  var shardSelect = this.getBody().find('#netsim-shard-select');
  shardSelect.change(this.onShardSelectChange_.bind(this));
  shardSelect.keyup(this.onShardSelectKeyUp_.bind(this));

  var setShardButton = this.getBody().find('#netsim-shard-confirm-button');
  setShardButton.click(this.setShardButtonClick_.bind(this));

  // At the end of any render we should focus on the earliest unsatisfied
  // field, or if all fields are satisfied, try connecting to the specified
  // shard.
  if (this.displayName_.length === 0) {
    nameField.focus();
  } else if (this.selectedShardID_ === SELECTOR_NONE_VALUE) {
    shardSelect.focus();
  }
};

/**
 * @param {Event} jQueryEvent
 * @private
 */
NetSimShardSelectionPanel.prototype.onNameKeyUp_ = function (jQueryEvent) {
  var name = jQueryEvent.target.value;
  var setNameButton = this.getBody().find('#netsim-lobby-set-name-button');
  setNameButton.attr('disabled', name.length === 0);

  if (name.length > 0 && jQueryEvent.which === KeyCodes.ENTER) {
    this.setNameButtonClick_();
  }
};

/** @private */
NetSimShardSelectionPanel.prototype.setNameButtonClick_ = function () {
  this.setNameCallback_(this.getBody().find('#netsim-lobby-name').val());
};

/**
 * @param {Event} jQueryEvent
 * @private
 */
NetSimShardSelectionPanel.prototype.onShardSelectChange_ = function (jQueryEvent) {
  var shardID = jQueryEvent.target.value;
  var setShardButton = this.getBody().find('#netsim-shard-confirm-button');
  setShardButton.attr('disabled', !shardID || shardID === SELECTOR_NONE_VALUE);
};

/**
 * @param {Event} jQueryEvent
 * @private
 */
NetSimShardSelectionPanel.prototype.onShardSelectKeyUp_ = function (jQueryEvent) {
  var shardID = jQueryEvent.target.value;
  if (shardID && shardID !== SELECTOR_NONE_VALUE && jQueryEvent.which === KeyCodes.ENTER) {
    this.setShardButtonClick_();
  }
};

/** @private */
NetSimShardSelectionPanel.prototype.setShardButtonClick_ = function () {
  this.setShardCallback_(this.getBody().find('#netsim-shard-select').val());
};

},{"../constants":"/home/ubuntu/staging/apps/build/js/constants.js","../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimPanel":"/home/ubuntu/staging/apps/build/js/netsim/NetSimPanel.js","./NetSimShardSelectionPanel.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimShardSelectionPanel.html.ejs","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimShardSelectionPanel.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
  var i18n = require('./locale');
; buf.push('\n<div class="content-wrap">\n  <div class="field-box display-name-control">\n    <label for="netsim-lobby-name">', escape((6,  i18n.myName() )), '</label>\n    <input id="netsim-lobby-name" type="text" value="', escape((7,  displayName )), '" ');7; if (displayName.length > 0) { ; buf.push('disabled');7; } ; buf.push(' />\n    ');8; if (displayName.length === 0) { ; buf.push('\n      <input id="netsim-lobby-set-name-button" type="button" value="', escape((9,  i18n.setName() )), '" disabled />\n    ');10; } ; buf.push('\n  </div>\n  ');12; if (displayName.length > 0) { ; buf.push('\n    <div class="field-box shard-control">\n      <label for="netsim-shard-select">', escape((14,  i18n.mySection() )), '</label>\n      <select id="netsim-shard-select" ');15; if (selectedShardID) { ; buf.push('disabled');15; } ; buf.push('>\n        <option value="', escape((16,  SELECTOR_NONE_VALUE )), '">', escape((16,  i18n.dropdownPickOne() )), '</option>\n        ');17;
          var selectedAnyShard = false;
          shardChoices.forEach(function (shardChoice) {
            var attributes = '';
            if (shardChoice.shardID === selectedShardID) {
              attributes = 'selected';
              selectedAnyShard = true;
            }
            ; buf.push('\n              <option value="', escape((26,  shardChoice.shardID )), '" ', escape((26,  attributes )), '>', escape((26,  shardChoice.displayName )), '</option>\n            ');27;
          });
        ; buf.push('\n      </select>\n      ');31; if (!selectedShardID) { ; buf.push('\n        <input id="netsim-shard-confirm-button" type="button" value="', escape((32,  i18n.joinSection() )), '" ');32; if (!selectedAnyShard) { ; buf.push('disabled');32; } ; buf.push(' />\n      ');33; } ; buf.push('\n    </div>\n  ');35; } ; buf.push('\n  <div class="clearfix"></div>\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimRemoteNodeSelectionPanel.js":[function(require,module,exports){
/**
 * @overview Lobby table UI component.
 * @see NetSimLobby for usage.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var utils = require('../utils');
var _ = utils.getLodash();
var i18n = require('./locale');
var NetSimPanel = require('./NetSimPanel');
var markup = require('./NetSimRemoteNodeSelectionPanel.html.ejs');
var NodeType = require('./NetSimConstants').NodeType;
var NetSimGlobals = require('./NetSimGlobals');
var NetSimUtils = require('./NetSimUtils');
var NetSimRouterNode = require('./NetSimRouterNode');

/**
 * Apply a very small debounce to lobby buttons to avoid doing extra work
 * as a result of double-clicks and/or scripts that want to click buttons a
 * few thousand times.
 * @const {number}
 */
var BUTTON_DEBOUNCE_DURATION_MS = 100;

/**
 * Generator and controller for lobby node listing, selection, and connection
 * controls.
 *
 * @param {jQuery} rootDiv
 *
 * @param {Object} options
 * @param {DashboardUser} options.user
 * @param {string} options.shardID
 * @param {NetSimNode[]} options.nodesOnShard
 * @param {NetSimNode[]} options.incomingConnectionNodes
 * @param {NetSimNode} options.remoteNode - null if not attempting to connect
 * @param {number} options.myNodeID
 * @param {boolean} options.disableControls
 *
 * @param {Object} callbacks
 * @param {function} callbacks.addRouterCallback
 * @param {function} callbacks.cancelButtonCallback
 * @param {function} callbacks.joinButtonCallback
 * @param {function} callbacks.resetShardCallback
 *
 * @constructor
 * @augments NetSimPanel
 */
var NetSimRemoteNodeSelectionPanel = module.exports = function (rootDiv, options, callbacks) {

  /**
   * @type {DashboardUser}
   * @private
   */
  this.user_ = options.user;

  /**
   * @type {string}
   * @private
   */
  this.shardID_ = options.shardID;

  /**
   * @type {NetSimNode[]}
   * @private
   */
  this.nodesOnShard_ = options.nodesOnShard;

  /**
   * @type {NetSimNode[]}
   * @private
   */
  this.incomingConnectionNodes_ = options.incomingConnectionNodes;

  /**
   * @type {NetSimNode}
   * @private
   */
  this.remoteNode_ = options.remoteNode;

  /**
   * @type {number}
   * @private
   */
  this.myNodeID_ = options.myNodeID;

  function buttonDebounce(callback) {
    return _.debounce(callback, BUTTON_DEBOUNCE_DURATION_MS, {
      leading: true,
      trailing: false
    });
  }

  /**
   * Handler for "Add Router" button
   * @type {function}
   * @private
   */
  this.addRouterCallback_ = buttonDebounce(callbacks.addRouterCallback);

  /**
   * Handler for cancel button (backs out of non-mutual connection)
   * @type {function}
   * @private
   */
  this.cancelButtonCallback_ = buttonDebounce(callbacks.cancelButtonCallback);

  /**
   * Handler for "join" button next to each connectable node.
   * @type {function}
   * @private
   */
  this.joinButtonCallback_ = buttonDebounce(callbacks.joinButtonCallback);

  /**
   * Handler for "reset shard" button click.
   * @type {function}
   * @private
   */
  this.resetShardCallback_ = buttonDebounce(callbacks.resetShardCallback);

  // Initial render
  NetSimPanel.call(this, rootDiv, {
    className: 'netsim-lobby-panel',
    panelTitle: this.getLocalizedPanelTitle(),
    userToggleable: false
  });

  if (options.disableControls) {
    this.disableEverything();
  }
};
NetSimRemoteNodeSelectionPanel.inherits(NetSimPanel);

/**
 * Recreate markup within panel body.
 */
NetSimRemoteNodeSelectionPanel.prototype.render = function () {
  // Clone the reference area (with handlers) before we re-render
  var referenceArea = $('#reference_area').first().clone(true);

  // Create boilerplate panel markup
  NetSimRemoteNodeSelectionPanel.superPrototype.render.call(this);

  // Add our own content markup
  var newMarkup = $(markup({
    controller: this,
    nodesOnShard: this.nodesOnShard_,
    incomingConnectionNodes: this.incomingConnectionNodes_,
    remoteNode: this.remoteNode_
  }));
  this.getBody().html(newMarkup);

  this.updateLayout();

  // Move the reference area to beneath the instructions
  this.getBody().find('.reference-area-placeholder').append(referenceArea);

  // Teachers and admins get a special "Reset Simulation" button
  if (this.canCurrentUserResetShard()) {
    this.addButton(i18n.shardResetButton(), this.resetShardCallback_);
  }

  // Button that takes you to the next level.
  NetSimUtils.makeContinueButton(this);

  this.addRouterButton_ = this.getBody().find('#netsim-lobby-add-router');
  this.addRouterButton_.click(unlessDisabled(this.addRouterCallback_));

  this.getBody().find('.join-button').click(unlessDisabled(this.onJoinClick_.bind(this)));
  this.getBody().find('.accept-button').click(unlessDisabled(this.onJoinClick_.bind(this)));
  this.getBody().find('.cancel-button').click(unlessDisabled(this.cancelButtonCallback_));
};

/**
 * Wrap the provided callback in a check to make sure the target is not disabled.
 * @param {function} callback
 * @returns {function}
 */
function unlessDisabled(callback) {
  return function (jQueryEvent) {
    if (!$(jQueryEvent.target).is('[disabled]')) {
      callback(jQueryEvent);
    }
  };
}

/**
 * Updates the layout of the markup, usually in response to a window
 * resize. Currently just adjusts the height of the lobby table to keep
 * everything onscreen.
 */
NetSimRemoteNodeSelectionPanel.prototype.updateLayout = function () {

  var lobbyTable = this.getBody().find('#netsim-scrolling-lobby');
  var container = this.getBody().closest('#netsim-disconnected');

  if (lobbyTable.is(':visible')) {
    lobbyTable.height("none");
    var overflow = container.prop('scrollHeight') - container.prop('clientHeight');

    if (overflow > 0) {
      var newHeight = lobbyTable.height() - overflow;
      var minHeight = lobbyTable.find('tr').first().outerHeight(true);
      lobbyTable.height(Math.max(newHeight, minHeight));
    }
  }
};

/**
 * @returns {string} a localized panel title appropriate to the current level
 *          configuration
 */
NetSimRemoteNodeSelectionPanel.prototype.getLocalizedPanelTitle = function () {
  var levelConfig = NetSimGlobals.getLevelConfig();

  if (levelConfig.canConnectToClients && levelConfig.canConnectToRouters) {
    return i18n.connectToANode();
  } else if (levelConfig.canConnectToClients) {
    return i18n.connectToAPeer();
  } else if (levelConfig.canConnectToRouters) {
    if (levelConfig.broadcastMode) {
      return i18n.connectToARoom();
    }
    return i18n.connectToARouter();
  }
  return i18n.connectToANode();
};

/**
 * @returns {string} localized lobby instructions appropriate to the current
 *          level configuration
 */
NetSimRemoteNodeSelectionPanel.prototype.getLocalizedLobbyInstructions = function () {
  var levelConfig = NetSimGlobals.getLevelConfig();

  if (levelConfig.canConnectToClients && levelConfig.canConnectToRouters) {
    return i18n.lobbyInstructionsGeneral();
  } else if (levelConfig.canConnectToClients) {
    return i18n.lobbyInstructionsForPeers();
  } else if (levelConfig.canConnectToRouters) {
    if (levelConfig.broadcastMode) {
      return i18n.lobbyInstructionsForRooms();
    }
    return i18n.lobbyInstructionsForRouters();
  }
  return i18n.lobbyInstructionsGeneral();
};

/**
 * @param {Event} jQueryEvent
 * @private
 */
NetSimRemoteNodeSelectionPanel.prototype.onJoinClick_ = function (jQueryEvent) {
  var target = $(jQueryEvent.target);
  var nodeID = target.data('nodeId');
  var clickedNode = _.find(this.nodesOnShard_, function (node) {
    return node.entityID === nodeID;
  });

  this.joinButtonCallback_(clickedNode);
};

/**
 * @param {NetSimNode} node
 * @returns {boolean}
 */
NetSimRemoteNodeSelectionPanel.prototype.isMyNode = function (node) {
  return this.myNodeID_ === node.entityID;
};

/**
 * Check whether the level configuration allows connections to the specified
 * node.
 * @param {NetSimNode} connectionTarget
 * @returns {boolean} whether connection to the target is allowed
 */
NetSimRemoteNodeSelectionPanel.prototype.canConnectToNode = function (connectionTarget) {
  // Can't connect to own node
  if (this.isMyNode(connectionTarget)) {
    return false;
  }

  var isClient = connectionTarget.getNodeType() === NodeType.CLIENT;
  var isRouter = connectionTarget.getNodeType() === NodeType.ROUTER;

  // Can't connect to full routers
  if (connectionTarget.isFull()) {
    return false;
  }

  // Permissible connection limited by level configuration
  var levelConfig = NetSimGlobals.getLevelConfig();
  var allowClients = levelConfig.canConnectToClients;
  var allowRouters = levelConfig.canConnectToRouters;
  return isClient && allowClients || isRouter && allowRouters;
};

/**
 * @returns {boolean} TRUE if we have an open outgoing connection request.
 */
NetSimRemoteNodeSelectionPanel.prototype.hasOutgoingRequest = function () {
  return !!this.remoteNode_;
};

/**
 * For use with Array.prototype.filter()
 * @param {NetSimNode} node
 * @returns {boolean} TRUE if the given node should show up in the lobby
 */
NetSimRemoteNodeSelectionPanel.prototype.shouldShowNode = function (node) {
  var levelConfig = NetSimGlobals.getLevelConfig();
  var isClient = node.getNodeType() === NodeType.CLIENT;
  var isRouter = node.getNodeType() === NodeType.ROUTER;
  var showClients = levelConfig.showClientsInLobby;
  var showRouters = levelConfig.showRoutersInLobby;
  return isClient && showClients || isRouter && showRouters;
};

/**
 * @returns {boolean} TRUE if we expect the current user to have permission to
 *          perform a shard reset.  Only governs display of shard reset button,
 *          actual reset is authenticated on the server.
 */
NetSimRemoteNodeSelectionPanel.prototype.canCurrentUserResetShard = function () {
  if (!this.user_) {
    return false;
  } else if (this.user_.isAdmin) {
    return true;
  }

  // Find a section ID in the current shard ID
  var matches = /_(\d+)$/.exec(this.shardID_);
  if (!matches) {
    return false;
  }

  // matches[1] is the first capture group (\d+), the numeric section ID.
  var sectionID = parseInt(matches[1], 10);
  return this.user_.ownsSection(sectionID);
};

/**
 * @returns {boolean} TRUE if it's currently possible to add a new router.
 *          Drives whether the "Add Router" button should be displayed.
 */
NetSimRemoteNodeSelectionPanel.prototype.canAddRouter = function () {
  var levelConfig = NetSimGlobals.getLevelConfig();
  if (this.hasOutgoingRequest() || !levelConfig.showAddRouterButton) {
    return false;
  }

  var routerLimit = NetSimRouterNode.getMaximumRoutersPerShard();
  var routerCount = this.nodesOnShard_.filter(function (node) {
    return NodeType.ROUTER === node.getNodeType();
  }).length;
  return routerCount < routerLimit;
};

/**
 * Disable all of the buttons within the panel (does not apply to panel-header
 * buttons!)
 */
NetSimRemoteNodeSelectionPanel.prototype.disableEverything = function () {
  this.getBody().find('.netsim-button').attr('disabled', true);
};

/**
 * Enable all of the buttons within the panel (does not apply to panel-header
 * buttons!)
 */
NetSimRemoteNodeSelectionPanel.prototype.enableEverything = function () {
  this.getBody().find('.netsim-button').removeAttr('disabled');
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimPanel":"/home/ubuntu/staging/apps/build/js/netsim/NetSimPanel.js","./NetSimRemoteNodeSelectionPanel.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimRemoteNodeSelectionPanel.html.ejs","./NetSimRouterNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterNode.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimRemoteNodeSelectionPanel.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
var utils = require('../utils');
var _ = utils.getLodash();
var i18n = require('./locale');
var NetSimGlobals = require('./NetSimGlobals');
var NodeType = require('./NetSimConstants').NodeType;

/** @type {function} */
var getAssetUrl = NetSimGlobals.getAssetUrlFunction();

/** @type {NetSimLevelConfiguration} */
var levelConfig = NetSimGlobals.getLevelConfig();

/**
 * @typedef {Object} RowMetadata
 * @property {number} nodeID
 * @property {string} classAttr
 * @property {string} displayName
 * @property {string} status
 */

/**
 * For use with Array.prototype.filter()
 * @param {NetSimNode} node
 * @returns {boolean}
 */
var omitIncomingConnectionNodes = function (node) {
  return undefined === _.find(incomingConnectionNodes, function (connectionRequestNode) {
        return connectionRequestNode.entityID === node.entityID;
      });
};

/**
 * For use with Array.prototype.filter()
 * @param {NetSimNode} node
 * @returns {boolean}
 */
var omitOutgoingRequestTargets = function (node) {
  return !remoteNode || (remoteNode.entityID !== node.entityID);
};

/**
 * For use with Array.prototype.map()
 * @param {NetSimNode} node
 * @returns {RowMetadata}
 */
var nodeToRowMetadata = function (node) {
  var displayName = node.getDisplayName();
  var sortKey = displayName;
  var classes = ['user-row'];

  if (node.getNodeType() === NodeType.ROUTER) {
    // Sort routers by left-padded router number (looks like natural sort)
    sortKey = ('000' + node.routerNumber).slice(-3);
    classes = ['router-row'];
  }

  if (controller.isMyNode(node)) {
    classes.push('own-row');
  }

  return {
    nodeID: node.entityID,
    sortKey: sortKey,
    classAttr: classes.join(' '),
    displayName: displayName,
    hostname: node.getHostname(),
    status: node.getStatus(),
    isFull: node.isFull(),
    canConnectToNode: controller.canConnectToNode(node)
  };
};

/**
 * For use with Array.prototype.sort()
 * @param {RowMetadata} a
 * @param {RowMetadata} b
 * @returns {number}
 */
var lobbySort = function (a, b) {
  return (a.sortKey > b.sortKey) ? 1 : -1;
};

var lobbyRows = nodesOnShard
    .filter(controller.shouldShowNode.bind(controller))
    .filter(omitIncomingConnectionNodes)
    .filter(omitOutgoingRequestTargets)
    .map(nodeToRowMetadata)
    .sort(lobbySort);

var requestRows = incomingConnectionNodes
    .filter(controller.shouldShowNode.bind(controller))
    .filter(omitOutgoingRequestTargets)
    .map(nodeToRowMetadata)
    .sort(lobbySort);

var outgoingRequestRows = (remoteNode ? [ remoteNode ] : [])
    .filter(controller.shouldShowNode.bind(controller))
    .map(nodeToRowMetadata);

/**
 * @param {string} buttonText
 * @param {string} buttonID
 * @param {string[]} extraClasses
 * @param {Object} extraAttributes
 * @returns {string} markup for NetSim-style button
 */
function buttonMarkup(buttonText, buttonID, extraClasses, extraAttributes) {
  var classes = utils.valueOr(extraClasses, []);
  classes.push('netsim-button');
  classes.push('large-button');

  extraAttributes = utils.valueOr(extraAttributes, {});

  var markup = '<span class="' + classes.join(' ') + '" ';

  // ID attribute for span tag
  if (buttonID) {
    markup += 'id="' + buttonID + '" ';
  }

  // Extra attributes for span tag
  for (var key in extraAttributes) {
    if (extraAttributes.hasOwnProperty(key)) {
      markup += key + '="' + extraAttributes[key] + '" ';
    }
  }

  markup += '>' + buttonText + '</span>';
  return markup;
}

function writeBeginTable(classname) {
  if (classname) {
    ; buf.push('<table class="', escape((135, classname)), '">');135;
  } else {
    ; buf.push('<table>');137;
  }
}

function writeEndTable() {
  ; buf.push('</table>');142;
}

function writeBeginTbody() {
  ; buf.push('<tbody>');146;
}

function writeEndTbody() {
  ; buf.push('</tbody>');150;
}

function writeHeader(headerText) {
  ; buf.push('\n    <thead>\n      <tr>\n        <th colspan="3">', escape((157,  headerText )), '</th>\n      </tr>\n    </thead>\n  ');160;
}

function writeEmptyRow(contents) {
  contents = utils.valueOr(contents, '');
  ; buf.push('\n    <tr>\n      <td colspan="3" class="empty-row">', (167,  contents ), '</td>\n    </tr>\n  ');169;
}

function writeNodeRow(row, nodeStatus, buttonType, addlClass) {
    var button;
    if (buttonType === 'join-button') {
      button = buttonMarkup(i18n.buttonJoin(), undefined, [buttonType, addlClass], { 'data-node-id': row.nodeID });
    } else if (buttonType === 'accept-button') {
      button = buttonMarkup(i18n.buttonAccept(), undefined, [buttonType, addlClass], { 'data-node-id': row.nodeID });
    } else if (buttonType === 'cancel-button') {
      button = buttonMarkup(i18n.buttonCancel(), undefined, [buttonType, addlClass, 'secondary'], { 'data-node-id': row.nodeID });
    } else if (buttonType === 'full-button') {
      button = buttonMarkup(i18n.buttonFull(), undefined, [buttonType, addlClass], { 'disabled': 'disabled' });
    }
  ; buf.push('\n    <tr>\n      <td nowrap>', escape((185,  row.displayName )), ' <small>(', escape((185,  row.hostname )), ')</small></td>\n      ');186; if (button) { ; buf.push('\n        <td>', (187,  nodeStatus ), '</td>\n        <td class="button-column">\n          ', (189,  button ), '\n        </td>\n      ');191; } else { ; buf.push('\n        <td colspan="2">', (192,  nodeStatus ), '</td>\n      ');193; } ; buf.push('\n    </tr>\n  ');195;
}

; buf.push('\n<div class="content-wrap">\n  <div class="instructions">\n    ', escape((201,  controller.getLocalizedLobbyInstructions() )), '\n    <div class="reference-area-placeholder"></div>\n  </div>\n  <div class="controls">\n\n    ');206;
      // Outgoing request table (hidden if empty)
      if (outgoingRequestRows.length > 0) {
        writeBeginTable();
        writeHeader(i18n.outgoingConnectionRequests());
        writeBeginTbody();
        outgoingRequestRows.forEach(function (row) {
          var outgoingStatus = i18n.lobbyStatusWaitingForOther({
            spinner: '<img src="' + getAssetUrl('media/netsim/loading.gif') + '" />',
            otherName: row.displayName,
            otherStatus: row.status
          });
          writeNodeRow(row, outgoingStatus, 'cancel-button', row.classAttr);
        });
        writeEndTbody();
        writeEndTable();
      }

      // Incoming requests table (hidden if empty)
      if (requestRows.length > 0) {
        writeBeginTable();
        writeHeader(i18n.incomingConnectionRequests());
        writeBeginTbody();
        requestRows.forEach(function (row) {
          var buttonType;
          if (!controller.hasOutgoingRequest() && row.canConnectToNode) {
            buttonType = 'accept-button';
          }
          var incomingStatus = i18n.lobbyStatusWaitingForYou();
          writeNodeRow(row, incomingStatus, buttonType, row.classAttr);
        });
        writeEndTbody();
        writeEndTable();
      }
    ; buf.push('\n\n    ');242;
      // Primary lobby list
      writeBeginTable("nomargin");
      writeHeader(i18n.lobby());
      writeEndTable();
    ; buf.push('\n    <div id="netsim-scrolling-lobby">\n    ');249;
      writeBeginTable();
      writeBeginTbody();
      lobbyRows.forEach(function (row) {
        var buttonType;
        if (!controller.hasOutgoingRequest()) {
          if (row.isFull) {
            buttonType = 'full-button';
          } else if (row.canConnectToNode) {
            buttonType = 'join-button';
          }
        }
        writeNodeRow(row, row.status, buttonType, row.classAttr);
      });

      var buttons = [];

      if (controller.canAddRouter()) {
        var buttonText = levelConfig.broadcastMode ? i18n.addRoom() : i18n.addRouter();
        buttons.push(buttonMarkup(
            buttonText,
            'netsim-lobby-add-router',
            ['secondary']
        ));
      }

      if (levelConfig.showLogBrowserButton) {
        buttons.push(buttonMarkup(
            i18n.logBrowserButton(),
            'show-router-log-modal',
            ['secondary'],
            {
              'data-toggle':'modal',
              'data-target':'#router-log-modal'
            }
        ));
      }

      if (buttons.length > 0) {
        writeEmptyRow(buttons.join(' '));
      } else if (lobbyRows.length === 0) {
        writeEmptyRow(i18n.lobbyIsEmpty());
      }

      writeEndTbody();
      writeEndTable();
    ; buf.push('\n    </div>\n\n  </div>\n  <div class="clear"></div>\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimNodeFactory.js":[function(require,module,exports){
/**
 * @overview Utility methods for generating the right kinds of node controllers
 *           from raw node table rows.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var NetSimConstants = require('./NetSimConstants');

var NodeType = NetSimConstants.NodeType;

var NetSimNodeFactory = module.exports;

/**
 * Given a set of rows from the node table on a shard, gives back a set of node
 * controllers (of appropriate types).
 * @param {!NetSimShard} shard
 * @param {!Array.<Object>} nodeRows
 * @throws when a row doesn't have a mappable node type.
 * @return {Array.<NetSimNode>} nodes for the rows
 */
NetSimNodeFactory.nodesFromRows = function (shard, nodeRows) {
  return nodeRows.map(NetSimNodeFactory.nodeFromRow.bind(this, shard));
};

/**
 * Given a row from the node table on a shard, gives back a node controllers
 * (of appropriate types).
 * @param {!NetSimShard} shard
 * @param {!Object} nodeRow
 * @throws when the row doesn't have a mappable node type.
 * @return {NetSimNode} node for the rows
 */
NetSimNodeFactory.nodeFromRow = function (shard, nodeRow) {
  if (nodeRow.type === NodeType.CLIENT) {
    var NetSimClientNode = require('./NetSimClientNode');
    return new NetSimClientNode(shard, nodeRow);
  } else if (nodeRow.type === NodeType.ROUTER) {
    var NetSimRouterNode = require('./NetSimRouterNode');
    return new NetSimRouterNode(shard, nodeRow);
  }

  // Oops!  We probably shouldn't ever get here.
  throw new Error("Unable to map row to node.");
};

},{"./NetSimClientNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimClientNode.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimRouterNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterNode.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimRouterNode.js":[function(require,module,exports){
/**
 * @overview Router node simulation entity.  Also contains logic for the
 *           auto-DNS system.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var utils = require('../utils');
var i18n = require('./locale');
var NetSimConstants = require('./NetSimConstants');
var NetSimUtils = require('./NetSimUtils');
var NetSimNode = require('./NetSimNode');
var NetSimEntity = require('./NetSimEntity');
var NetSimLogEntry = require('./NetSimLogEntry');
var NetSimLogger = require('./NetSimLogger');
var NetSimWire = require('./NetSimWire');
var NetSimMessage = require('./NetSimMessage');
var ObservableEvent = require('../ObservableEvent');
var Packet = require('./Packet');
var DataConverters = require('./DataConverters');
var NetSimNodeFactory = require('./NetSimNodeFactory');

var _ = utils.getLodash();

var serializeNumber = NetSimUtils.serializeNumber;
var deserializeNumber = NetSimUtils.deserializeNumber;

var asciiToBinary = DataConverters.asciiToBinary;

var DnsMode = NetSimConstants.DnsMode;
var NodeType = NetSimConstants.NodeType;
var BITS_PER_BYTE = NetSimConstants.BITS_PER_BYTE;

var logger = NetSimLogger.getSingleton();
var NetSimGlobals = require('./NetSimGlobals');

/**
 * @type {number}
 * @readonly
 */
var MAX_CLIENT_CONNECTIONS = 6;

/**
 * Conveniently, a router's address in its local network is always zero.
 * @type {number}
 * @readonly
 */
var ROUTER_LOCAL_ADDRESS = 0;

/**
 * Address that can only be used for the auto-dns node.
 * May eventually be replaced with a dynamically assigned address.
 * @type {number}
 * @readonly
 */
var AUTO_DNS_RESERVED_ADDRESS = 15;

/**
 * Hostname assigned to the automatic dns 'node' in the local network.
 * There will only be one of these, so it can be simple.
 * @type {string}
 * @readonly
 */
var AUTO_DNS_HOSTNAME = 'dns';

/**
 * Value the auto-DNS will return instead of an address when it can't
 * locate a node with the given hostname in the local network.
 * @type {string}
 * @readonly
 */
var AUTO_DNS_NOT_FOUND = 'NOT_FOUND';

/**
 * Maximum packet lifetime in the router queue, sort of a primitive Time-To-Live
 * system that helps prevent a queue from being indefinitely blocked by a very
 * large packet.  Packets that exceed this time will silently fail delivery.
 * @type {number}
 * @readonly
 */
var PACKET_MAX_LIFETIME_MS = 10 * 60 * 1000;

/**
 * To avoid calculating a totally unreasonable number of addresses, this is
 * the most addresses we will consider when picking one for a new host.
 * This means full support up to a 12-bit address part, which should be more
 * than enough.
 * @type {number}
 */
var ADDRESS_OPTION_LIMIT = 4096;

/**
 * Client model of simulated router
 *
 * Represents the client's view of a given router, provides methods for
 *   letting the client interact with the router, and wraps the client's
 *   work doing part of the router simulation.
 *
 * A router -exists- when it has a row in the lobby table of type 'router'
 * A router is connected to a user when a 'user' row exists in the lobby
 *   table that has a status 'Connected to {router ID} by wires {X, Y}'.
 * A router will also share a wire (simplex) or wires (duplex) with each user,
 *   which appear in the wire table.
 *
 * @param {!NetSimShard} shard
 * @param {RouterRow} [routerRow] - Lobby row for this router.
 * @constructor
 * @augments NetSimNode
 */
var NetSimRouterNode = module.exports = function (shard, row) {
  row = row !== undefined ? row : {};
  NetSimNode.call(this, shard, row);

  var levelConfig = NetSimGlobals.getLevelConfig();

  /**
   * This router's identifying number, which gets translated into its address.
   * Should be unique among routers on the shard.
   * @type {number}
   */
  this.routerNumber = row.routerNumber;

  /**
   * Unix timestamp (local) of router creation time.
   * @type {number}
   */
  this.creationTime = utils.valueOr(row.creationTime, Date.now());

  /**
   * Sets current DNS mode for the router's local network.
   * This value is manipulated by all clients.
   * @type {DnsMode}
   * @private
   */
  this.dnsMode = utils.valueOr(row.dnsMode, levelConfig.defaultDnsMode);

  /**
   * Sets current DNS node ID for the router's local network.
   * This value is manipulated by all clients.
   * @type {number}
   * @private
   */
  this.dnsNodeID = row.dnsNodeID;

  /**
   * Speed (in bits per second) at which messages are processed.
   * @type {number}
   */
  this.bandwidth = utils.valueOr(deserializeNumber(row.bandwidth), levelConfig.defaultRouterBandwidth);

  /**
   * Amount of data (in bits) that the router queue can hold before it starts
   * dropping packets.
   * @type {number}
   */
  this.memory = utils.valueOr(deserializeNumber(row.memory), levelConfig.defaultRouterMemory);

  /**
   * Percent chance (0-1) that a packet being routed will be dropped for no
   * reason.
   * @type {number}
   */
  this.randomDropChance = utils.valueOr(row.randomDropChance, levelConfig.defaultRandomDropChance);

  /**
   * Determines a subset of connection and message events that this
   * router will respond to, only managing events from the given node ID,
   * to avoid conflicting with other clients also simulating this router.
   *
   * Not persisted on server.
   *
   * @type {number}
   * @private
   */
  this.simulateForSender_ = undefined;

  /**
   * Local cache of the last tick time in the local simulation.
   * Allows us to schedule/timestamp events that don't happen inside the
   * tick event.
   * @type {number}
   * @private
   */
  this.simulationTime_ = 0;

  /**
   * Packet format specification this router will use to parse, route, and log
   * packets that it receives.  Set on router that is simulated by client.
   *
   * Not persisted on server.
   *
   * @type {Packet.HeaderType[]}
   * @private
   */
  this.packetSpec_ = [];

  /**
   * Local cache of our remote row, used to decide whether our state has
   * changed.
   * 
   * Not persisted to server.
   * 
   * @type {Object}
   * @private
   */
  this.stateCache_ = {};

  /**
   * Event others can observe, which we fire when our own remote row changes.
   * 
   * @type {ObservableEvent}
   */
  this.stateChange = new ObservableEvent();

  /**
   * Event others can observe, which we fire when the router statistics
   * change (which may be very frequent...)
   *
   * @type {ObservableEvent}
   */
  this.statsChange = new ObservableEvent();

  /**
   * Local cache of wires attached to this router, used for detecting and
   * broadcasting relevant changes.
   *
   * Not persisted on server.
   *
   * @type {Array}
   * @private
   */
  this.myWireRowCache_ = [];

  /**
   * Event others can observe, which we fire when the router's set of wires
   * changes indicating a change in the local network.
   *
   * @type {ObservableEvent}
   */
  this.wiresChange = new ObservableEvent();

  /**
   * Local cache of log rows associated with this router, used for detecting
   * and broadcasting relevant changes.
   * 
   * @type {Array}
   * @private
   */
  this.myLogRowCache_ = [];

  /**
   * Event others can observe, which we fire when the router's log content
   * changes.
   * 
   * @type {ObservableEvent}
   */
  this.logChange = new ObservableEvent();

  /**
   * Whether router is in the middle of work.  Keeps router from picking up
   * its own change notifications or interrupting its own processes.
   * @type {boolean}
   * @private
   */
  this.isRouterProcessing_ = false;

  /**
   * Local cache of messages that need to be processed by (any simulation
   * of) the router.  Used for tracking router memory, throughput, etc.
   * @type {NetSimMessage[]}
   * @private
   */
  this.routerQueueCache_ = [];

  /**
   * Set of scheduled 'routing events'
   * @type {Object[]}
   * @private
   */
  this.localRoutingSchedule_ = [];

  /**
   * @type {boolean}
   * @private
   */
  this.isAutoDnsProcessing_ = false;

  /**
   * Local cache of messages that need to be processed by (any simulation
   * of) the auto-DNS. Used for stats and limiting.
   * @type {NetSimMessage[]}
   * @private
   */
  this.autoDnsQueue_ = [];

  /**
   * Most clients that can be connected to this router.
   * Moved to instance variable so that tests can override it in certain cases.
   * @type {number}
   * @private
   */
  this.maxClientConnections_ = MAX_CLIENT_CONNECTIONS;
};
NetSimRouterNode.inherits(NetSimNode);

/**
 * Static async creation method. See NetSimEntity.create().
 * @param {!NetSimShard} shard
 * @param {!NodeStyleCallback} onComplete - Method that will be given the
 *        created entity, or null if entity creation failed.
 */
NetSimRouterNode.create = function (shard, onComplete) {
  var nextRouterNumber = 1;
  shard.nodeTable.readAll().forEach(function (node) {
    if (NodeType.ROUTER === node.type && node.routerNumber >= nextRouterNumber) {
      nextRouterNumber = node.routerNumber + 1;
    }
  });

  var entity = new NetSimRouterNode(shard, { routerNumber: nextRouterNumber });
  entity.getTable().create(entity.buildRow(), function (err, row) {
    if (err) {
      onComplete(err, null);
      return;
    }
    onComplete(null, new NetSimRouterNode(shard, row));
  });
};

/**
 * Static async retrieval method.  See NetSimEntity.get().
 * @param {!number} routerID - The row ID for the entity you'd like to find.
 * @param {!NetSimShard} shard
 * @param {!NodeStyleCallback} onComplete - Method that will be given the
 *        found entity, or null if entity search failed.
 */
NetSimRouterNode.get = function (routerID, shard, onComplete) {
  NetSimEntity.get(NetSimRouterNode, routerID, shard, onComplete);
};

/**
 * @typedef {Object} RouterRow
 * @property {number} creationTime - Unix timestamp (local)
 * @property {number} bandwidth - Router max transmission/processing rate
 *           in bits/second
 * @property {number} memory - Router max queue capacity in bits
 * @property {DnsMode} dnsMode - Current DNS mode for the local network
 * @property {number} dnsNodeID - Entity ID of the current DNS node in the
 *           local network.
 * @property {number} randomDropChance - Odds (0-1) that a packet being routed
 *           will be dropped for no reason.
 */

/**
 * Build table row for this node.
 * @returns {RouterRow}
 * @private
 * @override
 */
NetSimRouterNode.prototype.buildRow = function () {
  return utils.extend(NetSimRouterNode.superPrototype.buildRow.call(this), {
    routerNumber: this.routerNumber,
    creationTime: this.creationTime,
    bandwidth: serializeNumber(this.bandwidth),
    memory: serializeNumber(this.memory),
    dnsMode: this.dnsMode,
    dnsNodeID: this.dnsNodeID,
    randomDropChance: this.randomDropChance
  });
};

/**
 * Load state from remoteRow into local model, then notify anything observing
 * us that we've changed.
 * @param {RouterRow} remoteRow
 * @private
 */
NetSimRouterNode.prototype.onMyStateChange_ = function (remoteRow) {
  this.routerNumber = remoteRow.routerNumber;
  this.creationTime = remoteRow.creationTime;
  this.bandwidth = deserializeNumber(remoteRow.bandwidth);
  this.memory = deserializeNumber(remoteRow.memory);
  this.dnsMode = remoteRow.dnsMode;
  this.dnsNodeID = remoteRow.dnsNodeID;
  this.randomDropChance = remoteRow.randomDropChance;
  this.stateChange.notifyObservers(this);
};

/**
 * Performs queued routing and DNS operations.
 * @param {RunLoop.Clock} clock
 */
NetSimRouterNode.prototype.tick = function (clock) {
  this.simulationTime_ = clock.time;
  this.routeOverdueMessages_(clock);
  if (this.dnsMode === DnsMode.AUTOMATIC) {
    this.tickAutoDns_(clock);
  }
};

/**
 * This name is a bit of a misnomer, but it's memorable; we actually route
 * all messages that are DUE or OVERDUE.
 * @param {RunLoop.Clock} clock
 * @private
 */
NetSimRouterNode.prototype.routeOverdueMessages_ = function (clock) {
  if (this.isRouterProcessing_) {
    return;
  }

  // Separate out messages whose scheduled time has arrived or is past.
  // Flag them so we can remove them later.
  var readyScheduleMessages = [];
  var expiredScheduleMessages = [];
  this.localRoutingSchedule_.forEach(function (item) {
    if (clock.time >= item.completionTime) {
      item.beingRouted = true;
      readyScheduleMessages.push(item.message);
    } else if (clock.time >= item.expirationTime) {
      item.beingRouted = true;
      expiredScheduleMessages.push(item.message);
    }
  });

  // If no messages are ready, we're done.
  if (readyScheduleMessages.length + expiredScheduleMessages.length === 0) {
    return;
  }

  // First, remove the expired items.  They just silently vanish
  this.isRouterProcessing_ = true;
  NetSimEntity.destroyEntities(expiredScheduleMessages, (function () {

    // Next, process the messages that are ready for routing
    this.routeMessages_(readyScheduleMessages, (function () {

      // Finally, remove all the schedule entries that we flagged earlier
      this.localRoutingSchedule_ = this.localRoutingSchedule_.filter(function (item) {
        return !item.beingRouted;
      });
      this.isRouterProcessing_ = false;
    }).bind(this));
  }).bind(this));
};

/**
 * Examine the queue, and add/adjust schedule entries for packets that
 * should be handled by the local simulation.  If a packet has no entry,
 * it should be added to the schedule.  If it does and we can see that its
 * scheduled completion time is too far in the future, we should move it up.
 */
NetSimRouterNode.prototype.recalculateSchedule = function () {
  // To calculate our schedule, we keep a rolling "Pessimistic completion time"
  // as we walk down the queue.  This "pessimistic time" is when the packet
  // would finish processing, assuming all of the packets ahead of it in the
  // queue must be processed first and the first packet in the queue is just
  // starting to process now.  We do this because the first packet might be
  // owned by a remote client, so we won't have partial progress information
  // on it.
  //
  // Thus, the pessimistic time is the _latest_ we would expect the router
  // to be done processing the packet given the current bandwidth setting,
  // if the router was an actual hardware device.
  //
  // The estimate is actually _optimistic_ in the sense that it doesn't wait
  // for notification that a remotely-simulated packet is done before
  // processing a locally-simulated one.  We're making our best guess about
  // how the packets would be timed with no latency introducing gaps between
  // packets.
  //
  // If the client simulating the packet at the head of the queue disconnects
  // it won't block other packets from being sent, but it will increase their
  // "pessimistic estimates" until that orphaned packet gets cleaned up.

  var queueSizeInBits = 0;
  var pessimisticCompletionTime = this.simulationTime_;
  var queuedMessage;
  var processingDuration;
  for (var i = 0; i < this.routerQueueCache_.length; i++) {
    queuedMessage = this.routerQueueCache_[i];
    queueSizeInBits += queuedMessage.payload.length;
    processingDuration = this.calculateProcessingDurationForMessage_(queuedMessage);
    pessimisticCompletionTime += processingDuration;

    // Don't schedule beyond memory capacity; we're going to drop those packets
    if (this.localSimulationOwnsMessage_(queuedMessage) && queueSizeInBits <= this.memory) {
      this.scheduleRoutingForMessage(queuedMessage, pessimisticCompletionTime);
    }
  }
};

/**
 * Checks the schedule for the queued row.  If no schedule entry exists, adds
 * a new one with the provided pessimistic completion time.  If it's already
 * scheduled and the pessimistic time given is BETTER than the previously
 * scheduled completion time, will update the schedule entry with the better
 * time.
 * @param {NetSimMessage} queuedMessage
 * @param {number} pessimisticCompletionTime - in local simulation time
 */
NetSimRouterNode.prototype.scheduleRoutingForMessage = function (queuedMessage, pessimisticCompletionTime) {
  var scheduleItem = _.find(this.localRoutingSchedule_, function (item) {
    return item.message.entityID === queuedMessage.entityID;
  });

  if (scheduleItem) {
    // When our pessimistic time is better than our scheduled time we
    // should update the scheduled time.  This can happen when messages
    // earlier in the queue expire, or are otherwise removed earlier than
    // their size led us to expect.
    if (pessimisticCompletionTime < scheduleItem.completionTime) {
      scheduleItem.completionTime = pessimisticCompletionTime;
    }
  } else {
    // If the item doesn't have a schedule entry at all, add it
    this.addMessageToSchedule_(queuedMessage, pessimisticCompletionTime);
  }
};

/**
 * Adds a new entry to the routing schedule, with a default expiration time.
 * @param {NetSimMessage} queuedMessage - message to route
 * @param {number} completionTime - in simulation time
 * @private
 */
NetSimRouterNode.prototype.addMessageToSchedule_ = function (queuedMessage, completionTime) {
  this.localRoutingSchedule_.push({
    message: queuedMessage,
    completionTime: completionTime,
    expirationTime: this.simulationTime_ + PACKET_MAX_LIFETIME_MS,
    beingRouted: false
  });
};

/**
 * Takes a message out of the routing schedule.  Modifies the schedule,
 * should not be called while iterating through the schedule!
 * Does nothing if the message isn't present in the schedule.
 * @param {NetSimMessage} queuedMessage
 * @private
 */
NetSimRouterNode.prototype.removeMessageFromSchedule_ = function (queuedMessage) {
  var scheduleIdx;
  for (var i = 0; i < this.localRoutingSchedule_.length; i++) {
    if (this.localRoutingSchedule_[i].message.entityID === queuedMessage.entityID) {
      scheduleIdx = i;
    }
  }
  if (scheduleIdx !== undefined) {
    this.localRoutingSchedule_.splice(scheduleIdx, 1);
  }
};

/**
 * Lets the auto-DNS part of the router simulation handle its requests.
 * For now, auto-DNS can do "batch" processing, no throughput limits.
 * @private
 */
NetSimRouterNode.prototype.tickAutoDns_ = function () {
  if (this.isAutoDnsProcessing_) {
    return;
  }

  // Filter DNS queue down to requests the local simulation should handle.
  var localSimDnsRequests = this.autoDnsQueue_.filter(this.localSimulationOwnsMessage_.bind(this));

  // If there's nothing we can process, we're done.
  if (localSimDnsRequests.length === 0) {
    return;
  }

  // Process DNS requests
  this.isAutoDnsProcessing_ = true;
  this.processAutoDnsRequests_(localSimDnsRequests, (function () {
    this.isAutoDnsProcessing_ = false;
  }).bind(this));
};

/** @inheritdoc */
NetSimRouterNode.prototype.getDisplayName = function () {
  if (NetSimGlobals.getLevelConfig().broadcastMode) {
    return i18n.roomNumberX({
      x: this.getRouterNumber()
    });
  }

  return i18n.routerNumberX({
    x: this.getRouterNumber()
  });
};

/**
 * Given the level address format string (e.g. "4.4.4.4") which it pulls from
 * globals, returns an array of the parsed lengths of each format part in order
 * (e.g. [4, 4, 4, 4]).
 * @returns {number[]}
 */
function getAddressFormatParts() {
  return NetSimGlobals.getLevelConfig().addressFormat.split(/\D+/).filter(function (part) {
    return part.length > 0;
  }).map(function (part) {
    return parseInt(part, 10);
  });
}

/**
 * Helper that prevents the router's display number or address from being beyond
 * the representable size of the the router part in the address format (if
 * two-part addresses are being used).
 * Does not do anything special to prevent collisions, just returns entityID
 * modulo the assignable address space - but this will be better than having
 * non-conflicting routers you can never address at all.
 * @returns {number}
 */
NetSimRouterNode.prototype.getRouterNumber = function () {
  // If two or more parts, limit our router number to the maximum value of
  // the second-to-last address part.
  var addressFormatParts = getAddressFormatParts();
  if (addressFormatParts.length >= 2) {
    var assignableAddressValues = Math.pow(2, addressFormatParts.reverse()[1]);
    return this.routerNumber % assignableAddressValues;
  }
  return this.routerNumber;
};

/**
 * Get the maximum number of routers that will be allowed on the shard.
 * In most levels this is a strict global value (probably 20).
 * In levels using an address format with two or more parts the second-to-last
 * part determines the addressable space for routers, and the max routers
 * will be the minimum of the global max and the addressable space.
 *
 * @example If the global max routers is 20, but the address format is 4.4,
 *          we can only address 16 routers (less than 20) so 16 is our max
 *          routers per shard value.
 *
 * @returns {number}
 */
NetSimRouterNode.getMaximumRoutersPerShard = function () {
  // If two or more parts, limit our routers to the maximum value of
  // the second-to-last address part.
  var addressFormatParts = getAddressFormatParts();
  if (addressFormatParts.length >= 2) {
    return Math.min(NetSimGlobals.getGlobalMaxRouters(), Math.pow(2, addressFormatParts.reverse()[1]));
  }
  return NetSimGlobals.getGlobalMaxRouters();
};

/**
 * Get node's own address, which is dependent on the address format
 * configured in the level but for routers always ends in zero.
 * @returns {string}
 */
NetSimRouterNode.prototype.getAddress = function () {
  return this.makeLocalNetworkAddress_(ROUTER_LOCAL_ADDRESS);
};

/**
 * Get local network's auto-dns address, which is dependent on the address
 * format configured for the level but the last part should always be 15.
 * @returns {string}
 */
NetSimRouterNode.prototype.getAutoDnsAddress = function () {
  return this.makeLocalNetworkAddress_(AUTO_DNS_RESERVED_ADDRESS);
};

/**
 * Get node's hostname, a modified version of its display name.
 * @returns {string}
 * @override
 */
NetSimRouterNode.prototype.getHostname = function () {
  // Use regex to strip anything that's not a word-character or a digit
  // from the node's display name.  For routers, we don't append the node ID
  // because it's already part of the display name.
  return this.getDisplayName().replace(/[^\w\d]/g, '').toLowerCase();
};

/** @inheritdoc */
NetSimRouterNode.prototype.getNodeType = function () {
  return NodeType.ROUTER;
};

/** @inheritdoc */
NetSimRouterNode.prototype.getStatus = function () {
  var levelConfig = NetSimGlobals.getLevelConfig();
  var connectionCount = this.countConnections();
  if (connectionCount === 0) {
    if (levelConfig.broadcastMode) {
      return i18n.roomStatusNoConnections({
        maximumClients: this.maxClientConnections_
      });
    }

    return i18n.routerStatusNoConnections({
      maximumClients: this.maxClientConnections_
    });
  }

  var connectedNodeNames = this.getConnectedNodeNames_().join(', ');
  if (connectionCount >= this.maxClientConnections_) {
    if (levelConfig.broadcastMode) {
      return i18n.roomStatusFull({
        connectedClients: connectedNodeNames
      });
    }

    return i18n.routerStatusFull({
      connectedClients: connectedNodeNames
    });
  }

  if (levelConfig.broadcastMode) {
    return i18n.roomStatus({
      connectedClients: connectedNodeNames,
      remainingSpace: this.maxClientConnections_ - connectionCount
    });
  }

  return i18n.routerStatus({
    connectedClients: connectedNodeNames,
    remainingSpace: this.maxClientConnections_ - connectionCount
  });
};

/**
 * @returns {string[]} the names of all the nodes connected to this router.
 * @private
 */
NetSimRouterNode.prototype.getConnectedNodeNames_ = function () {
  var cachedNodeRows = this.shard_.nodeTable.readAll();
  return this.getConnections().map(function (wire) {
    var nodeRow = _.find(cachedNodeRows, function (nodeRow) {
      return nodeRow.id === wire.localNodeID;
    });
    if (nodeRow) {
      return nodeRow.name;
    }
    return i18n.unknownNode();
  });
};

/** @inheritdoc */
NetSimRouterNode.prototype.isFull = function () {
  // Determine status based on cached wire data
  var cachedWireRows = this.shard_.wireTable.readAll();
  var incomingWireRows = cachedWireRows.filter(function (wireRow) {
    return wireRow.remoteNodeID === this.entityID;
  }, this);

  return incomingWireRows.length >= this.maxClientConnections_;
};

/**
 * Makes sure that the given specification contains the fields that this
 * router needs to do its job.
 * @param {Packet.HeaderType[]} packetSpec
 * @private
 */
NetSimRouterNode.prototype.validatePacketSpec_ = function (packetSpec) {
  // There are no requirements in broadcast mode
  if (NetSimGlobals.getLevelConfig().broadcastMode) {
    return;
  }

  // Require TO_ADDRESS for routing
  if (!packetSpec.some(function (headerField) {
    return headerField === Packet.HeaderType.TO_ADDRESS;
  })) {
    logger.warn("Packet specification does not have a toAddress field.");
  }

  // Require FROM_ADDRESS for auto-DNS tasks
  if (!packetSpec.some(function (headerField) {
    return headerField === Packet.HeaderType.FROM_ADDRESS;
  })) {
    logger.warn("Packet specification does not have a fromAddress field.");
  }
};

/**
 * Puts this router controller into a mode where it will only
 * simulate for connection and messages -from- the given node.
 * @param {!number} nodeID
 */
NetSimRouterNode.prototype.initializeSimulation = function (nodeID) {
  this.simulateForSender_ = nodeID;
  this.packetSpec_ = NetSimGlobals.getLevelConfig().routerExpectsPacketHeader;
  this.validatePacketSpec_(this.packetSpec_);

  if (nodeID !== undefined) {
    var nodeChangeEvent = this.shard_.nodeTable.tableChange;
    var nodeChangeHandler = this.onNodeTableChange_.bind(this);
    this.nodeChangeKey_ = nodeChangeEvent.register(nodeChangeHandler);

    var wireChangeEvent = this.shard_.wireTable.tableChange;
    var wireChangeHandler = this.onWireTableChange_.bind(this);
    this.wireChangeKey_ = wireChangeEvent.register(wireChangeHandler);

    var logChangeEvent = this.shard_.logTable.tableChange;
    var logChangeHandler = this.onLogTableChange_.bind(this);
    this.logChangeKey_ = logChangeEvent.register(logChangeHandler);

    var newMessageEvent = this.shard_.messageTable.tableChange;
    var newMessageHandler = this.onMessageTableChange_.bind(this);
    this.newMessageEventKey_ = newMessageEvent.register(newMessageHandler);

    // Populate router wire cache with initial data
    this.onWireTableChange_();

    // Populate router log cache with initial data
    this.onLogTableChange_();
  }
};

/**
 * Gives the simulating node a chance to unregister from anything it
 * was observing.
 */
NetSimRouterNode.prototype.stopSimulation = function () {
  if (this.nodeChangeKey_ !== undefined) {
    var nodeChangeEvent = this.shard_.nodeTable.tableChange;
    nodeChangeEvent.unregister(this.nodeChangeKey_);
    this.nodeChangeKey_ = undefined;
  }

  if (this.wireChangeKey_ !== undefined) {
    var wireChangeEvent = this.shard_.wireTable.tableChange;
    wireChangeEvent.unregister(this.wireChangeKey_);
    this.wireChangeKey_ = undefined;
  }

  if (this.logChangeKey_ !== undefined) {
    var logChangeEvent = this.shard_.logTable.tableChange;
    logChangeEvent.unregister(this.logChangeKey_);
    this.logChangeKey_ = undefined;
  }

  if (this.newMessageEventKey_ !== undefined) {
    var newMessageEvent = this.shard_.messageTable.tableChange;
    newMessageEvent.unregister(this.newMessageEventKey_);
    this.newMessageEventKey_ = undefined;
  }
};

/**
 * Puts the router into the given DNS mode, triggers a remote update,
 * and creates/destroys the network's automatic DNS node.
 * @param {DnsMode} newDnsMode
 */
NetSimRouterNode.prototype.setDnsMode = function (newDnsMode) {
  if (this.dnsMode === newDnsMode) {
    return;
  }

  if (this.dnsMode === DnsMode.NONE) {
    this.dnsNodeID = undefined;
  } else if (this.dnsMode === DnsMode.AUTOMATIC) {
    this.dnsNodeID = AUTO_DNS_RESERVED_ADDRESS;
  }

  this.dnsMode = newDnsMode;
  this.update();
};

/**
 * @param {number} newBandwidth in bits per second
 */
NetSimRouterNode.prototype.setBandwidth = function (newBandwidth) {
  if (this.bandwidth === newBandwidth) {
    return;
  }

  this.bandwidth = newBandwidth;
  this.recalculateSchedule();
  this.update();
};

/**
 * @param {number} newMemory in bits
 */
NetSimRouterNode.prototype.setMemory = function (newMemory) {
  if (this.memory === newMemory) {
    return;
  }

  this.memory = newMemory;
  this.enforceMemoryLimit_();
  this.update();
};

/**
 * @returns {NetSimWire[]} all of the wires that are attached to this router.
 */
NetSimRouterNode.prototype.getConnections = function () {
  var shard = this.shard_;
  var routerID = this.entityID;
  return shard.wireTable.readAll().filter(function (wireRow) {
    return wireRow.remoteNodeID === routerID;
  }).map(function (wireRow) {
    return new NetSimWire(shard, wireRow);
  });
};

/**
 * @returns {number} total number of wires connected to this router.
 */
NetSimRouterNode.prototype.countConnections = function () {
  return this.getConnections().length;
};

/**
 * Add a router log entry (not development logging, this is user-facing!)
 * @param {string} packet - binary log payload
 * @param {NetSimLogEntry.LogStatus} status
 */
NetSimRouterNode.prototype.log = function (packet, status) {
  NetSimLogEntry.create(this.shard_, this.entityID, packet, status, function () {});
};

/**
 * @param {Array} haystack
 * @param {*} needle
 * @returns {boolean} TRUE if needle found in haystack
 */
var contains = function contains(haystack, needle) {
  return haystack.some(function (element) {
    return element === needle;
  });
};

/**
 * Called when another node establishes a connection to this one, giving this
 * node a chance to reject the connection.
 *
 * The router checks against its connection limit, and rejects the connection
 * if its limit is now exceeded.
 *
 * @param {!NetSimNode} otherNode attempting to connect to this one
 * @param {!NodeStyleCallback} onComplete response method - should call with TRUE
 *        if connection is allowed, FALSE if connection is rejected.
 */
NetSimRouterNode.prototype.acceptConnection = function (otherNode, onComplete) {
  var rejectionReason = null;

  // Force a refresh to verify that we have not exceeded the connection limit.
  this.shard_.wireTable.refresh().done((function () {
    var connections = this.getConnections();

    // Check for connection limit exceeded
    if (connections.length > this.maxClientConnections_) {
      rejectionReason = new Error("Too many connections.");
      return;
    }

    // Check for address collisions
    var addressesSoFar = {};
    addressesSoFar[this.getAddress()] = true;
    addressesSoFar[this.getAutoDnsAddress()] = true;
    var addressCollision = connections.some(function (wire) {
      var collides = addressesSoFar.hasOwnProperty(wire.localAddress);
      addressesSoFar[wire.localAddress] = true;
      return collides;
    });
    if (addressCollision) {
      rejectionReason = new Error("Address collision detected.");
    }
  }).bind(this)).fail(function (err) {
    logger.info("Rejected connection from " + otherNode.getDisplayName() + ": " + err.message);
    rejectionReason = err;
  }).always(function () {
    onComplete(rejectionReason, null === rejectionReason);
  });
};

/**
 * Generate a list of available addresses, then pick one at random and return it.
 * @returns {string} a new available address.
 */
NetSimRouterNode.prototype.getRandomAvailableClientAddress = function () {
  var addressList = this.getConnections().filter(function (wire) {
    return wire.localAddress !== undefined;
  }).map(function (wire) {
    return wire.localAddress;
  });

  // Generate a list of unused addresses in the addressable space (to a limit)
  var addressFormat = NetSimGlobals.getLevelConfig().addressFormat;
  var addressPartSizes = addressFormat.split(/\D+/).filter(function (part) {
    return part.length > 0;
  }).map(function (part) {
    return parseInt(part, 10);
  }).reverse();
  var maxLocalAddresses = Math.min(Math.pow(2, addressPartSizes[0]), ADDRESS_OPTION_LIMIT);

  var possibleAddresses = [];
  var nextAddress;
  for (var i = 0; i < maxLocalAddresses; i++) {
    nextAddress = this.makeLocalNetworkAddress_(i);
    // Verify that the address in question is not taken already.
    if (!(nextAddress === this.getAddress() || nextAddress === this.getAutoDnsAddress() || contains(addressList, nextAddress))) {
      possibleAddresses.push(nextAddress);
    }
  }

  var randomIndex = NetSimGlobals.randomIntInRange(0, possibleAddresses.length);
  return possibleAddresses[randomIndex];
};

/**
 * Generate an address matching the level's configured address format, that
 * falls within this router's local network and ends in the given value.
 * @param {number} lastPart
 * @returns {string}
 * @private
 */
NetSimRouterNode.prototype.makeLocalNetworkAddress_ = function (lastPart) {
  var addressFormat = NetSimGlobals.getLevelConfig().addressFormat;
  var usedLastPart = false;
  var usedRouterID = false;

  return addressFormat.split(/(\D+)/).reverse().map((function (part) {
    var bitWidth = parseInt(part, 10);
    if (isNaN(bitWidth)) {
      // This is a non-number part, pass it through to the result
      return part;
    }

    if (!usedLastPart) {
      usedLastPart = true;
      return lastPart.toString();
    }

    if (!usedRouterID) {
      usedRouterID = true;
      return this.getRouterNumber().toString();
    }

    return '0';
  }).bind(this)).reverse().join('');
};

/**
 * @returns {Array} A list of remote nodes connected to this router, including
 *          their hostname, address, whether they are the local node, and
 *          whether they are the current DNS node for the network.
 */
NetSimRouterNode.prototype.getAddressTable = function () {
  var addressTable = this.myWireRowCache_.map((function (row) {
    return {
      hostname: row.localHostname,
      address: row.localAddress,
      isLocal: row.localNodeID === this.simulateForSender_,
      isDnsNode: row.localNodeID === this.dnsNodeID
    };
  }).bind(this));

  // Special case: In auto-dns mode we add the DNS entry to the address table
  if (this.dnsMode === DnsMode.AUTOMATIC) {
    addressTable.push({
      hostname: AUTO_DNS_HOSTNAME,
      address: this.getAutoDnsAddress(),
      isLocal: false,
      isDnsNode: true
    });
  }

  return addressTable;
};

/**
 * Given a node ID, finds the local network address of that node.  Cannot
 * be used to find the address of the router or auto-dns node (since their
 * node IDs are not unique).  Will return undefined if the node ID is not
 * found.
 *
 * @param {number} nodeID
 * @returns {number|undefined}
 * @private
 */
NetSimRouterNode.prototype.getAddressForNodeID_ = function (nodeID) {
  var wireRow = _.find(this.myWireRowCache_, function (row) {
    return row.localNodeID === nodeID;
  });

  if (wireRow !== undefined) {
    return wireRow.localAddress;
  }
  return undefined;
};

/**
 * Given a hostname, finds the local network address of the node with that
 * hostname.  Will return undefined if no node with that hostname is found.
 *
 * @param {string} hostname
 * @returns {number|undefined}
 * @private
 */
NetSimRouterNode.prototype.getAddressForHostname_ = function (hostname) {
  if (hostname === this.getHostname()) {
    return this.getAddress();
  }

  if (this.dnsMode === DnsMode.AUTOMATIC && hostname === AUTO_DNS_HOSTNAME) {
    return this.getAutoDnsAddress();
  }

  var wireRow = _.find(this.myWireRowCache_, function (row) {
    return row.localHostname === hostname;
  });

  if (wireRow !== undefined) {
    return wireRow.localAddress;
  }

  // If we don't have connected routers, this is as far as the auto-DNS can see.
  if (!NetSimGlobals.getLevelConfig().connectedRouters) {
    return undefined;
  }

  // Is it some node elsewhere on the shard?
  var nodes = NetSimNodeFactory.nodesFromRows(this.shard_, this.shard_.nodeTable.readAll());
  var node = _.find(nodes, function (node) {
    return node.getHostname() === hostname;
  });
  if (node) {
    return node.getAddress();
  }

  return undefined;
};

/**
 * Given a local network address, finds the node ID of the node at that
 * address.  Will return undefined if no node is found at the given address.
 *
 * @param {string} address
 * @returns {number|undefined}
 * @private
 */
NetSimRouterNode.prototype.getNodeIDForAddress_ = function (address) {
  if (address === this.getAddress()) {
    return this.entityID;
  }

  if (this.dnsMode === DnsMode.AUTOMATIC && address === this.getAutoDnsAddress()) {
    return this.entityID;
  }

  var wireRow = _.find(this.myWireRowCache_, function (row) {
    return row.localAddress === address;
  });

  if (wireRow !== undefined) {
    return wireRow.localNodeID;
  }
  return undefined;
};

/**
 * Given a network address, finds the node that is the next step along the
 * correct path from this router to that address.  Will return null if no
 * path to the address is found.
 * @param {string} address
 * @param {number} hopsRemaining
 * @param {number[]} visitedNodeIDs
 * @returns {NetSimNode|null}
 * @private
 */
NetSimRouterNode.prototype.getNextNodeTowardAddress_ = function (address, hopsRemaining, visitedNodeIDs) {
  // Is it us?
  if (address === this.getAddress()) {
    return this;
  }

  // Is it our Auto-DNS node?
  if (this.dnsMode === DnsMode.AUTOMATIC && address === this.getAutoDnsAddress()) {
    return this;
  }

  // Is it a local client?
  var nodes = NetSimNodeFactory.nodesFromRows(this.shard_, this.shard_.nodeTable.readAll());
  var wireRow = _.find(this.myWireRowCache_, function (row) {
    return row.localAddress === address;
  });
  if (wireRow !== undefined) {
    var localClient = _.find(nodes, function (node) {
      return node.entityID === wireRow.localNodeID;
    });
    if (localClient !== undefined) {
      return localClient;
    }
  }

  // End of local subnet cases:
  // In levels where routers are not connected, this is as far as we go.
  var levelConfig = NetSimGlobals.getLevelConfig();
  if (!levelConfig.connectedRouters) {
    return null;
  }

  // Is it another node?
  var destinationNode = _.find(nodes, function (node) {
    return address === node.getAddress() || node.dnsMode === DnsMode.AUTOMATIC && node.getNodeType() === NodeType.ROUTER && address === node.getAutoDnsAddress();
  });

  // If the node we're after doesn't exist anywhere, we should stop now.
  if (!destinationNode) {
    return null;
  }

  // We are trying to get somewhere else!  Figure out what the target router
  // for our destination is.
  var destinationRouter = null;
  if (destinationNode.getNodeType() === NodeType.ROUTER) {
    destinationRouter = destinationNode;
  } else {
    var destinationWire = destinationNode.getOutgoingWire();
    if (destinationWire) {
      destinationRouter = utils.valueOr(_.find(nodes, function (node) {
        return node.entityID === destinationWire.remoteNodeID;
      }), null);
    }
  }

  if (!destinationRouter) {
    return null;
  }

  // If we have extra hops, we should try and go to a router that is NOT
  // the target router.
  if (hopsRemaining > 0) {
    // Generate the set of possible target routers
    var possibleDestinationRouters = nodes.filter(function (node) {
      return node.getNodeType() === NodeType.ROUTER && node.entityID !== destinationRouter.entityID && node.entityID !== this.entityID && !visitedNodeIDs.some(function (visitedID) {
        return node.entityID === visitedID;
      });
    }, this);
    if (possibleDestinationRouters.length > 0) {
      return NetSimGlobals.randomPickOne(possibleDestinationRouters);
    }
  }

  // If there's nowhere else to go or we are out of extra hops, go to the
  // target router.
  return destinationRouter;
};

/**
 * When the node table changes, we check whether our own row has changed
 * and propagate those changes as appropriate.
 * @private
 * @throws
 */
NetSimRouterNode.prototype.onNodeTableChange_ = function () {
  var myRow = _.find(this.shard_.nodeTable.readAll(), (function (row) {
    return row.id === this.entityID;
  }).bind(this));

  if (myRow === undefined) {
    // This can happen now, to non-primary routers, because detection
    // of the router's removal (stopping its simulation) in NetSimLocalClientNode
    // and this method happen in an uncertain order.
    return;
  }

  if (!_.isEqual(this.stateCache_, myRow)) {
    this.stateCache_ = myRow;
    this.onMyStateChange_(myRow);
  }
};

/**
 * When the wires table changes, we may have a new connection or have lost
 * a connection.  Propagate updates about our connections
 * @private
 */
NetSimRouterNode.prototype.onWireTableChange_ = function () {
  var myWireRows = this.shard_.wireTable.readAll().filter((function (row) {
    return row.remoteNodeID === this.entityID;
  }).bind(this));

  if (!_.isEqual(this.myWireRowCache_, myWireRows)) {
    this.myWireRowCache_ = myWireRows;
    this.wiresChange.notifyObservers();
  }
};

/**
 * When the logs table changes, we may have a new connection or have lost
 * a connection.  Propagate updates about our connections
 * @private
 */
NetSimRouterNode.prototype.onLogTableChange_ = function () {
  var myLogRows = this.shard_.logTable.readAll().filter((function (row) {
    return row.nodeID === this.entityID;
  }).bind(this));

  if (!_.isEqual(this.myLogRowCache_, myLogRows)) {
    this.myLogRowCache_ = myLogRows;
    this.logChange.notifyObservers();
  }
};

/**
 * Get list of log entries in this router's memory.
 * @returns {NetSimLogEntry[]}
 */
NetSimRouterNode.prototype.getLog = function () {
  return this.myLogRowCache_.map((function (row) {
    return new NetSimLogEntry(this.shard_, row, this.packetSpec_);
  }).bind(this));
};

/**
 * @returns {number} the number of packets in the router queue
 */
NetSimRouterNode.prototype.getQueuedPacketCount = function () {
  return this.routerQueueCache_.length;
};

/**
 * @returns {number} router memory currently in use, in bits
 */
NetSimRouterNode.prototype.getMemoryInUse = function () {
  return this.routerQueueCache_.reduce(function (prev, cur) {
    return prev + cur.payload.length;
  }, 0);
};

/**
 * @returns {number} expected router data rate (in bits per second) over the
 *          next second
 */
NetSimRouterNode.prototype.getCurrentDataRate = function () {
  // For simplicity, we're defining the 'curent data rate' as how many bits
  // we expect to get processed in the next second; which is our queue size,
  // capped at our bandwidth.
  return Math.min(this.getMemoryInUse(), this.bandwidth);
};

/**
 * When the message table changes, we might have a new message to handle.
 * Check for and handle unhandled messages.
 * @private
 * @throws if this method is called on a non-simulating router.
 */
NetSimRouterNode.prototype.onMessageTableChange_ = function () {
  if (!this.simulateForSender_) {
    // What?  Only simulating routers should be hooked up to message notifications.
    throw new Error("Non-simulating router got message table change notifiction");
  }

  var messages = this.shard_.messageTable.readAll().map((function (row) {
    return new NetSimMessage(this.shard_, row);
  }).bind(this));

  this.updateRouterQueue_(messages);

  if (this.dnsMode === DnsMode.AUTOMATIC) {
    this.updateAutoDnsQueue_(messages);
  }
};

/**
 * Updates our cache of all messages that are going to the router (regardless
 * of which simulation will handle them), so we can use it for stats and rate
 * limiting.
 * @param {NetSimMessage[]} messages
 */
NetSimRouterNode.prototype.updateRouterQueue_ = function (messages) {
  var newQueue = messages.filter(NetSimMessage.isValid).filter(this.isMessageToRouter_.bind(this));
  if (_.isEqual(this.routerQueueCache_, newQueue)) {
    return;
  }

  logger.info(this.getDisplayName() + ': Message queue updated (size ' + newQueue.length + ')');

  this.routerQueueCache_ = newQueue;
  this.recalculateSchedule();
  this.enforceMemoryLimit_();
  this.statsChange.notifyObservers(this);
};

/**
 * Checks the router queue for packets beyond the router's memory limit,
 * and drops the first one we simulate locally.  Since this will trigger
 * a table change, this will occur async-recursively until all packets
 * over the memory limit are dropped.
 * @private
 */
NetSimRouterNode.prototype.enforceMemoryLimit_ = function () {
  // Only proceed if a packet we simulate exists beyond the memory limit
  var droppablePacket = this.findFirstLocallySimulatedPacketOverMemoryLimit();
  if (!droppablePacket) {
    return;
  }

  this.removeMessageFromSchedule_(droppablePacket);
  droppablePacket.destroy((function (err) {
    if (err) {
      // Rarely, this could fire twice for one packet and have one drop fail.
      // That's fine; just don't log if we didn't successfully drop.
      return;
    }

    this.log(droppablePacket.payload, NetSimLogEntry.LogStatus.DROPPED);
  }).bind(this));
};

/**
 * Walk the router queue, and return the first packet we find beyond the router's
 * memory capacity that the local simulation controls and is able to drop.
 * @returns {NetSimMessage|null} null if no such message is found.
 */
NetSimRouterNode.prototype.findFirstLocallySimulatedPacketOverMemoryLimit = function () {
  var packet;
  var usedMemory = 0;
  for (var i = 0; i < this.routerQueueCache_.length; i++) {
    packet = this.routerQueueCache_[i];
    usedMemory += packet.payload.length;
    if (usedMemory > this.memory && this.localSimulationOwnsMessage_(packet)) {
      return packet;
    }
  }
  return null;
};

/**
 * @param {NetSimMessage} message
 * @returns {boolean} TRUE if this message is destined for the router (not the
 *          auto-DNS part though!) and FALSE if destined anywhere else.
 * @private
 */
NetSimRouterNode.prototype.isMessageToRouter_ = function (message) {
  if (this.dnsMode === DnsMode.AUTOMATIC && this.isMessageToAutoDns_(message)) {
    return false;
  }

  return message.toNodeID === this.entityID;
};

NetSimRouterNode.prototype.routeMessages_ = function (messages, onComplete) {
  if (messages.length === 0) {
    onComplete(null);
    return;
  }

  this.routeMessage_(messages[0], (function (err, result) {
    if (err) {
      onComplete(err, result);
      return;
    }

    this.routeMessages_(messages.slice(1), onComplete);
  }).bind(this));
};

/**
 *
 * @param {NetSimMessage} message
 * @param {!NodeStyleCallback} onComplete
 * @private
 */
NetSimRouterNode.prototype.routeMessage_ = function (message, onComplete) {
  message.destroy((function (err, result) {
    if (err) {
      onComplete(err, result);
      return;
    }

    // Apply random chance to drop packet, right as we are about to forward it
    if (this.randomDropChance > 0 && NetSimGlobals.random() <= this.randomDropChance) {
      this.log(message.payload, NetSimLogEntry.LogStatus.DROPPED);
      onComplete(null);
      return;
    }

    var levelConfig = NetSimGlobals.getLevelConfig();
    if (levelConfig.broadcastMode) {
      this.forwardMessageToAll_(message, onComplete);
    } else {
      this.forwardMessageToRecipient_(message, onComplete);
    }
  }).bind(this));
};

/**
 * Forward the given message to all nodes that are connected to this router.
 * This is effectively "hub" operation.
 * @param {NetSimMessage} message
 * @param {!NodeStyleCallback} onComplete
 * @private
 */
NetSimRouterNode.prototype.forwardMessageToAll_ = function (message, onComplete) {
  // Assumptions for broadcast mode:
  // 1. We can totally ignore packet headers, because addresses don't matter
  // 2. We won't send to the Auto-DNS, since DNS make no sense with no addresses

  // Grab the list of all connected nodes
  var connectedNodeIDs = this.myWireRowCache_.map(function (wireRow) {
    return wireRow.localNodeID;
  });

  this.forwardMessageToNodeIDs_(message, connectedNodeIDs, (function (err, result) {
    if (err) {
      this.log(message.payload, NetSimLogEntry.LogStatus.DROPPED);
    } else {
      this.log(message.payload, NetSimLogEntry.LogStatus.SUCCESS);
    }
    onComplete(err, result);
  }).bind(this));
};

/**
 * Forward the given message to the list of node IDs provided.
 * This function works by calling itself recursively with the tail of the
 * node ID list each time it finishes sending one of the messages, so
 * timing on this "broadcast" won't be exactly correct - that's probably okay
 * though, especially at the point in the curriculum where this is used.
 * @param {NetSimMessage} message
 * @param {number[]} nodeIDs
 * @param {!NodeStyleCallback} onComplete
 * @private
 */
NetSimRouterNode.prototype.forwardMessageToNodeIDs_ = function (message, nodeIDs, onComplete) {

  var messages = nodeIDs.map(function (nodeID) {
    return {
      fromNodeID: this.entityID,
      toNodeID: nodeID,
      simulatedBy: nodeID,
      payload: message.payload
    };
  }, this);

  NetSimMessage.sendMany(this.shard_, messages, onComplete);
};

/**
 * Read the given message to find its destination address, try and map that
 * address to one of our connections, and send the message payload to
 * the new address.
 *
 * @param {NetSimMessage} message
 * @param {!NodeStyleCallback} onComplete
 * @private
 */
NetSimRouterNode.prototype.forwardMessageToRecipient_ = function (message, onComplete) {
  var toAddress;
  var routerNodeID = this.entityID;

  // Find a connection to route this message to.
  try {
    var packet = new Packet(this.packetSpec_, message.payload);
    toAddress = packet.getHeaderAsAddressString(Packet.HeaderType.TO_ADDRESS);
  } catch (error) {
    logger.warn("Packet not readable by router");
    this.log(message.payload, NetSimLogEntry.LogStatus.DROPPED);
    onComplete(null);
    return;
  }

  var destinationNode = this.getNextNodeTowardAddress_(toAddress, message.extraHopsRemaining, message.visitedNodeIDs);
  if (destinationNode === null) {
    // Can't find or reach the address within the simulation
    logger.warn("Destination address not reachable");
    this.log(message.payload, NetSimLogEntry.LogStatus.DROPPED);
    onComplete(null);
    return;
  } else if (destinationNode === this && toAddress === this.getAddress()) {
    // This router IS the packet's destination, it's done.
    logger.warn("Packet stopped at router.");
    this.log(message.payload, NetSimLogEntry.LogStatus.SUCCESS);
    onComplete(null);
    return;
  }

  // TODO: Handle bad state where more than one wire matches dest address?

  // The sender simulates a message until it reaches the final leg of its trip,
  // when it's going to a client node.  At that point, the recipient takes over.
  var simulatingNodeID = message.simulatedBy;
  if (destinationNode.getNodeType() === NodeType.CLIENT) {
    simulatingNodeID = destinationNode.entityID;
  }

  // Create a new message with a new payload.
  NetSimMessage.send(this.shard_, {
    fromNodeID: routerNodeID,
    toNodeID: destinationNode.entityID,
    simulatedBy: simulatingNodeID,
    payload: message.payload,
    extraHopsRemaining: Math.max(0, message.extraHopsRemaining - 1),
    visitedNodeIDs: message.visitedNodeIDs.concat(this.entityID)
  }, (function (err, result) {
    this.log(message.payload, NetSimLogEntry.LogStatus.SUCCESS);
    onComplete(err, result);
  }).bind(this));
};

/**
 * @param {NetSimMessage} message
 * @returns {boolean} TRUE if the given message should be operated on by the local
 *          simulation, FALSE if another user's simulation should handle it.
 * @private
 */
NetSimRouterNode.prototype.localSimulationOwnsMessage_ = function (message) {
  return this.simulateForSender_ && message.simulatedBy === this.simulateForSender_;
};

/**
 * @param {NetSimMessage} message
 * @returns {number} time required to process this message, in milliseconds.
 * @private
 */
NetSimRouterNode.prototype.calculateProcessingDurationForMessage_ = function (message) {
  if (this.bandwidth === Infinity) {
    return 0;
  }
  return message.payload.length * 1000 / this.bandwidth;
};

/**
 * Update queue of all auto-dns messages, which can be used for stats or limiting.
 * @param {NetSimMessage[]} messages
 * @private
 */
NetSimRouterNode.prototype.updateAutoDnsQueue_ = function (messages) {
  var newQueue = messages.filter(this.isMessageToAutoDns_.bind(this));
  if (_.isEqual(this.autoDnsQueue_, newQueue)) {
    return;
  }

  this.autoDnsQueue_ = newQueue;
  // Propagate notification of queue change?
  // Work will proceed on next tick
};

/**
 * @param {NetSimMessage} message
 * @return {boolean}
 */
NetSimRouterNode.prototype.isMessageToAutoDns_ = function (message) {
  var packet, toAddress;
  try {
    packet = new Packet(this.packetSpec_, message.payload);
    toAddress = packet.getHeaderAsAddressString(Packet.HeaderType.TO_ADDRESS);
  } catch (error) {
    logger.warn("Packet not readable by auto-DNS: " + error);
    return false;
  }

  // Messages to the auto-dns are both to and from the router node, and
  // addressed to the DNS.
  return message.toNodeID === this.entityID && message.fromNodeID === this.entityID && toAddress === this.getAutoDnsAddress();
};

/**
 * Batch-process DNS requests, generating responses wherever possible.
 * @param {NetSimMessage[]} messages
 * @param {!NodeStyleCallback} onComplete
 * @private
 */
NetSimRouterNode.prototype.processAutoDnsRequests_ = function (messages, onComplete) {
  // 1. Remove the requests from the wire
  NetSimEntity.destroyEntities(messages, (function (err, result) {
    if (err) {
      onComplete(err, result);
      return;
    }

    // 2. Generate all responses, asynchronously.
    this.generateDnsResponses_(messages, onComplete);
  }).bind(this));
};

/**
 * @param {NetSimMessage[]} messages
 * @param {!NodeStyleCallback} onComplete
 * @private
 */
NetSimRouterNode.prototype.generateDnsResponses_ = function (messages, onComplete) {
  if (messages.length === 0) {
    onComplete(null);
    return;
  }

  // Process head
  this.generateDnsResponse_(messages[0], (function (err, result) {
    if (err) {
      onComplete(err, result);
      return;
    }

    // Process tail
    this.generateDnsResponses_(messages.slice(1), onComplete);
  }).bind(this));
};

/**
 * @param {NetSimMessage} message
 * @param {!NodeStyleCallback} onComplete
 * @private
 */
NetSimRouterNode.prototype.generateDnsResponse_ = function (message, onComplete) {
  var packet, fromAddress, query, responseHeaders, responseBody, responseBinary;
  var routerNodeID = this.entityID;
  var autoDnsNodeID = this.entityID;

  // Extract message contents
  try {
    packet = new Packet(this.packetSpec_, message.payload);
    fromAddress = packet.getHeaderAsAddressString(Packet.HeaderType.FROM_ADDRESS);
    query = packet.getBodyAsAscii(BITS_PER_BYTE);
  } catch (error) {
    // Malformed packet, ignore
    onComplete(error);
    return;
  }

  // Check that the query is well-formed
  // Regex match "GET [hostnames...]"
  // Then below, we'll split the hostnames on whitespace to process them.
  var requestMatch = query.match(/GET\s+(\S.*)/);
  if (requestMatch !== null) {
    // Good request, look up all addresses and build up response
    // Skipping first match, which is the full regex
    var responses = requestMatch[1].split(/\s+/).map((function (queryHostname) {
      var address = this.getAddressForHostname_(queryHostname);
      return queryHostname + ':' + utils.valueOr(address, AUTO_DNS_NOT_FOUND);
    }).bind(this));
    responseBody = responses.join(' ');
  } else {
    // Malformed request, send back instructions
    responseBody = i18n.autoDnsUsageMessage();
  }

  responseHeaders = {
    fromAddress: this.getAutoDnsAddress(),
    toAddress: fromAddress,
    packetIndex: 1,
    packetCount: 1
  };

  responseBinary = packet.encoder.concatenateBinary(packet.encoder.makeBinaryHeaders(responseHeaders), asciiToBinary(responseBody, BITS_PER_BYTE));

  NetSimMessage.send(this.shard_, {
    fromNodeID: autoDnsNodeID,
    toNodeID: routerNodeID,
    simulatedBy: message.simulatedBy,
    payload: responseBinary
  }, onComplete);
};

},{"../ObservableEvent":"/home/ubuntu/staging/apps/build/js/ObservableEvent.js","../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./DataConverters":"/home/ubuntu/staging/apps/build/js/netsim/DataConverters.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimEntity":"/home/ubuntu/staging/apps/build/js/netsim/NetSimEntity.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimLogEntry":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogEntry.js","./NetSimLogger":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogger.js","./NetSimMessage":"/home/ubuntu/staging/apps/build/js/netsim/NetSimMessage.js","./NetSimNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimNode.js","./NetSimNodeFactory":"/home/ubuntu/staging/apps/build/js/netsim/NetSimNodeFactory.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js","./NetSimWire":"/home/ubuntu/staging/apps/build/js/netsim/NetSimWire.js","./Packet":"/home/ubuntu/staging/apps/build/js/netsim/Packet.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimMessage.js":[function(require,module,exports){
/**
 * @overview Simulation entity for a message between two nodes.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var utils = require('../utils');
var NetSimEntity = require('./NetSimEntity');
var DataConverters = require('./DataConverters');
var base64ToBinary = DataConverters.base64ToBinary;
var binaryToBase64 = DataConverters.binaryToBase64;
var NetSimLogger = require('./NetSimLogger');

var logger = NetSimLogger.getSingleton();

/**
 * @typedef {Object} MessageData
 * @property {!number} fromNodeID - sender node ID
 * @property {!number} toNodeID - destination node ID
 * @property {!number} simulatedBy - node ID of client simulating message
 * @property {!string} payload - message content in a binary string
 * @property {number} extraHopsRemaining
 * @property {number[]} visitedNodeIDs
 */

/**
 * @typedef {Object} MessageRow
 * @property {!number} fromNodeID - this message in-flight-from node
 * @property {!number} toNodeID - this message in-flight-to node
 * @property {!number} simulatedBy - Node ID of the client responsible for
 *           all operations involving this message.
 * @property {!Base64Payload} base64Payload - base64-encoded binary
 *           message content, all of which can be exposed to the
 *           student.  May contain headers of its own.
 * @property {!number} extraHopsRemaining
 * @property {!number[]} visitedNodeIDs
 */

/**
 * Local controller for a message that is 'on the wire'
 *
 * Doesn't actually have any association with the wire - one could,
 * theoretically, send a message from any node in the simulation to any other
 * node in the simulation.
 *
 * Any message that exists in the table is 'in transit' to a node.  Nodes
 * should remove messages as soon as they receive them.
 *
 * @param {!NetSimShard} shard - The shard where this wire lives.
 * @param {MessageRow} [messageRow] - A row out of the _message table on the
 *        shard.  If provided, will initialize this message with the given
 *        data.  If not, this message will initialize to default values.
 * @constructor
 * @augments NetSimEntity
 * @implements MessageData
 */
var NetSimMessage = module.exports = function (shard, messageRow) {
  messageRow = messageRow !== undefined ? messageRow : {};
  NetSimEntity.call(this, shard, messageRow);

  /**
   * Node ID that this message is 'in transit' from.
   * @type {number}
   */
  this.fromNodeID = messageRow.fromNodeID;

  /**
   * Node ID that this message is 'in transit' to.
   * @type {number}
   */
  this.toNodeID = messageRow.toNodeID;

  /**
   * ID of the node responsible for operations on this message.
   * @type {number}
   */
  this.simulatedBy = messageRow.simulatedBy;

  /**
   * All other message content, including the 'packets' students will send.
   * @type {*}
   */
  this.payload = '';
  if (messageRow.base64Payload) {
    try {
      this.payload = base64ToBinary(messageRow.base64Payload.string, messageRow.base64Payload.len);
    } catch (e) {
      logger.error(e.message);
    }
  }

  /**
   * If this is an inter-router message, the number of routers this
   * message should try to visit before going to the router that
   * will actually lead to its destination.
   * @type {number}
   */
  this.extraHopsRemaining = utils.valueOr(messageRow.extraHopsRemaining, 0);

  /**
   * A history of router node IDs this message has visited.
   * @type {number[]}
   */
  this.visitedNodeIDs = utils.valueOr(messageRow.visitedNodeIDs, []);
};
NetSimMessage.inherits(NetSimEntity);

/**
 * Static row construction method. Used by dynamic buildRow method and
 * by static async API creation methods to create a properly-formatted
 * row for database insertion
 * @param {MessageData} messageData
 * @returns {MessageRow}
 * @throws {TypeError} if payload is invalid
 */
NetSimMessage.buildRowFromData = function (messageData) {
  return {
    fromNodeID: messageData.fromNodeID,
    toNodeID: messageData.toNodeID,
    simulatedBy: messageData.simulatedBy,
    base64Payload: binaryToBase64(messageData.payload),
    extraHopsRemaining: utils.valueOr(messageData.extraHopsRemaining, 0),
    visitedNodeIDs: utils.valueOr(messageData.visitedNodeIDs, [])
  };
};

/**
 * Static async creation method.  Creates a new message on the given shard,
 * and then calls the callback with a success boolean.
 * @param {!NetSimShard} shard
 * @param {!MessageData} messageData
 * @param {!NodeStyleCallback} onComplete (success)
 */
NetSimMessage.send = function (shard, messageData, onComplete) {
  try {
    var row = NetSimMessage.buildRowFromData(messageData);
    shard.messageTable.create(row, onComplete);
  } catch (err) {
    onComplete(err, null);
  }
};

/**
 * Static async multi-create method. Creates new messages on the given shard,
 * and then calls the callback with a success boolean.
 * @param {!NetSimShard} shard
 * @param {MessageData[]} messageDatas
 * @param {!NodeStyleCallback} onComplete (success)
 */
NetSimMessage.sendMany = function (shard, messageDatas, onComplete) {
  try {
    var rows = messageDatas.map(NetSimMessage.buildRowFromData);
    shard.messageTable.multiCreate(rows, onComplete);
  } catch (err) {
    onComplete(err, null);
  }
};

/**
 * Static helper.
 * @param {NetSimMessage} message
 * @returns {boolean} TRUE iff the given message is well-formed.
 */
NetSimMessage.isValid = function (message) {
  return (/^[01]*$/.test(message.payload)
  );
};

/**
 * Helper that gets the wires table for the configured instance.
 * @returns {NetSimTable}
 */
NetSimMessage.prototype.getTable = function () {
  return this.shard_.messageTable;
};

/**
 * Build own row for the message table
 * @returns {MessageRow}
 * @throws {TypeError} if payload is invalid
 */
NetSimMessage.prototype.buildRow = function () {
  return NetSimMessage.buildRowFromData(this);
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./DataConverters":"/home/ubuntu/staging/apps/build/js/netsim/DataConverters.js","./NetSimEntity":"/home/ubuntu/staging/apps/build/js/netsim/NetSimEntity.js","./NetSimLogger":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogger.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogEntry.js":[function(require,module,exports){
/**
 * @overview Simulation entity for router log entries.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var moment = require('moment');
var utils = require('../utils');
var _ = utils.getLodash();
var i18n = require('./locale');
var NetSimEntity = require('./NetSimEntity');
var Packet = require('./Packet');
var NetSimNodeFactory = require('./NetSimNodeFactory');
var DataConverters = require('./DataConverters');
var formatBinary = DataConverters.formatBinary;
var base64ToBinary = DataConverters.base64ToBinary;
var binaryToBase64 = DataConverters.binaryToBase64;
var NetSimLogger = require('./NetSimLogger');

var BITS_PER_BYTE = require('./NetSimConstants').BITS_PER_BYTE;
var logger = NetSimLogger.getSingleton();

/**
 * @typedef {Object} LogEntryRow
 * @property {number} nodeID
 * @property {Base64Payload} base64Binary - base64-encoded binary
 *           message content, all of which can be exposed to the
 *           student.  May contain headers of its own.
 * @property {NetSimLogEntry.LogStatus} status
 * @property {number} timestamp
 */

/**
 * Entry in shared log for a node on the network.
 *
 * Once created, should not be modified until/unless a cleanup process
 * removes it.
 *
 * @param {!NetSimShard} shard - The shard where this log entry lives.
 * @param {LogEntryRow} [row] - A row out of the log table on the
 *        shard.  If provided, will initialize this log with the given
 *        data.  If not, this log will initialize to default values.
 * @param {Packet.HeaderType[]} [packetSpec] - Packet layout spec used to
 *        interpret the contents of the logged packet
 * @constructor
 * @augments NetSimEntity
 */
var NetSimLogEntry = module.exports = function (shard, row, packetSpec) {
  row = row !== undefined ? row : {};
  NetSimEntity.call(this, shard, row);

  /**
   * Node ID of the node that owns this log entry (e.g. a router node)
   * @type {number}
   */
  this.nodeID = row.nodeID;

  /**
   * Binary content of the log entry.  Defaults to empty string.
   * @type {string}
   */
  this.binary = '';
  if (row.base64Binary) {
    try {
      this.binary = base64ToBinary(row.base64Binary.string, row.base64Binary.len);
    } catch (e) {
      logger.error(e.message);
    }
  }

  /**
   * Status value for log entry; for router log, usually SUCCESS for completion
   * of routing or DROPPED if routing failed.
   * @type {NetSimLogEntry.LogStatus}
   */
  this.status = utils.valueOr(row.status, NetSimLogEntry.LogStatus.SUCCESS);

  /**
   * @type {Packet}
   * @private
   */
  this.packet_ = new Packet(utils.valueOr(packetSpec, []), this.binary);

  /**
   * Unix timestamp (local) of log creation time.
   * @type {number}
   */
  this.timestamp = row.timestamp !== undefined ? row.timestamp : Date.now();
};
NetSimLogEntry.inherits(NetSimEntity);

/**
 * @enum {string}
 * @const
 */
NetSimLogEntry.LogStatus = {
  SUCCESS: 'success',
  DROPPED: 'dropped'
};

/**
 * Helper that gets the log table for the configured instance.
 * @returns {NetSimTable}
 */
NetSimLogEntry.prototype.getTable = function () {
  return this.shard_.logTable;
};

/**
 * Build own row for the log table
 * @returns {LogEntryRow}
 */
NetSimLogEntry.prototype.buildRow = function () {
  return {
    nodeID: this.nodeID,
    base64Binary: binaryToBase64(this.binary),
    status: this.status,
    timestamp: this.timestamp
  };
};

/**
 * Static async creation method.  Creates a new message on the given shard,
 * and then calls the callback with a success boolean.
 * @param {!NetSimShard} shard
 * @param {!number} nodeID - associated node's row ID
 * @param {!string} binary - log contents
 * @param {NetSimLogEntry.LogStatus} status
 * @param {!NodeStyleCallback} onComplete (success)
 */
NetSimLogEntry.create = function (shard, nodeID, binary, status, onComplete) {
  var entity = new NetSimLogEntry(shard);
  entity.nodeID = nodeID;
  entity.binary = binary;
  entity.status = status;
  entity.timestamp = Date.now();
  entity.getTable().create(entity.buildRow(), function (err, result) {
    if (err) {
      onComplete(err, null);
      return;
    }
    onComplete(err, new NetSimLogEntry(shard, result));
  });
};

/**
 * Get requested packet header field as a string.  Returns empty string
 * if the requested field is not in the current packet format.
 * @param {Packet.HeaderType} field
 * @returns {string}
 */
NetSimLogEntry.prototype.getHeaderField = function (field) {
  try {
    if (Packet.isAddressField(field)) {
      return this.packet_.getHeaderAsAddressString(field);
    } else {
      return this.packet_.getHeaderAsInt(field).toString();
    }
  } catch (e) {
    return '';
  }
};

/** Get packet message as binary. */
NetSimLogEntry.prototype.getMessageBinary = function () {
  return formatBinary(this.packet_.getBodyAsBinary(), BITS_PER_BYTE);
};

/** Get packet message as ASCII */
NetSimLogEntry.prototype.getMessageAscii = function () {
  return this.packet_.getBodyAsAscii(BITS_PER_BYTE);
};

/**
 * @returns {string} Localized packet status, "success" or "dropped"
 */
NetSimLogEntry.prototype.getLocalizedStatus = function () {
  if (this.status === NetSimLogEntry.LogStatus.SUCCESS) {
    return i18n.logStatus_success();
  } else if (this.status === NetSimLogEntry.LogStatus.DROPPED) {
    return i18n.logStatus_dropped();
  }
  return '';
};

/**
 * @returns {string} Localized "X of Y" packet count info for this entry.
 */
NetSimLogEntry.prototype.getLocalizedPacketInfo = function () {
  return i18n.xOfYPackets({
    x: this.getHeaderField(Packet.HeaderType.PACKET_INDEX),
    y: this.getHeaderField(Packet.HeaderType.PACKET_COUNT)
  });
};

/**
 * @returns {string} 12-hour time with milliseconds
 */
NetSimLogEntry.prototype.getTimeString = function () {
  return moment(this.timestamp).format('h:mm:ss.SSS A');
};

/**
 * Get a controller for the node that generated this log entry
 * @returns {NetSimClientNode|NetSimRouterNode|null}
 */
NetSimLogEntry.prototype.getOriginNode = function () {
  var nodeRows = this.shard_.nodeTable.readAll();
  var originNodeRow = _.find(nodeRows, (function (row) {
    return row.id === this.nodeID;
  }).bind(this));

  if (!originNodeRow) {
    return null;
  }

  return NetSimNodeFactory.nodeFromRow(this.shard_, originNodeRow);
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./DataConverters":"/home/ubuntu/staging/apps/build/js/netsim/DataConverters.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimEntity":"/home/ubuntu/staging/apps/build/js/netsim/NetSimEntity.js","./NetSimLogger":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogger.js","./NetSimNodeFactory":"/home/ubuntu/staging/apps/build/js/netsim/NetSimNodeFactory.js","./Packet":"/home/ubuntu/staging/apps/build/js/netsim/Packet.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js","moment":"/home/ubuntu/staging/apps/node_modules/moment/moment.js"}],"/home/ubuntu/staging/apps/node_modules/moment/moment.js":[function(require,module,exports){
//! moment.js
//! version : 2.10.6
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, function () { 'use strict';

    var hookCallback;

    function utils_hooks__hooks () {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback (callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return Object.prototype.toString.call(input) === '[object Array]';
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function create_utc__createUTC (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty           : false,
            unusedTokens    : [],
            unusedInput     : [],
            overflow        : -2,
            charsLeftOver   : 0,
            nullInput       : false,
            invalidMonth    : null,
            invalidFormat   : false,
            userInvalidated : false,
            iso             : false
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    function valid__isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            m._isValid = !isNaN(m._d.getTime()) &&
                flags.overflow < 0 &&
                !flags.empty &&
                !flags.invalidMonth &&
                !flags.invalidWeekday &&
                !flags.nullInput &&
                !flags.invalidFormat &&
                !flags.userInvalidated;

            if (m._strict) {
                m._isValid = m._isValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }
        }
        return m._isValid;
    }

    function valid__createInvalid (flags) {
        var m = create_utc__createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        }
        else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    var momentProperties = utils_hooks__hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (typeof from._isAMomentObject !== 'undefined') {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (typeof from._i !== 'undefined') {
            to._i = from._i;
        }
        if (typeof from._f !== 'undefined') {
            to._f = from._f;
        }
        if (typeof from._l !== 'undefined') {
            to._l = from._l;
        }
        if (typeof from._strict !== 'undefined') {
            to._strict = from._strict;
        }
        if (typeof from._tzm !== 'undefined') {
            to._tzm = from._tzm;
        }
        if (typeof from._isUTC !== 'undefined') {
            to._isUTC = from._isUTC;
        }
        if (typeof from._offset !== 'undefined') {
            to._offset = from._offset;
        }
        if (typeof from._pf !== 'undefined') {
            to._pf = getParsingFlags(from);
        }
        if (typeof from._locale !== 'undefined') {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i in momentProperties) {
                prop = momentProperties[i];
                val = from[prop];
                if (typeof val !== 'undefined') {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            utils_hooks__hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment (obj) {
        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
    }

    function absFloor (number) {
        if (number < 0) {
            return Math.ceil(number);
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function Locale() {
    }

    var locales = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return null;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && typeof module !== 'undefined' &&
                module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                require('./locale/' + name);
                // because defineLocale currently also sets the global locale, we
                // want to undo that for lazy loaded locales
                locale_locales__getSetGlobalLocale(oldLocale);
            } catch (e) { }
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function locale_locales__getSetGlobalLocale (key, values) {
        var data;
        if (key) {
            if (typeof values === 'undefined') {
                data = locale_locales__getLocale(key);
            }
            else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale (name, values) {
        if (values !== null) {
            values.abbr = name;
            locales[name] = locales[name] || new Locale();
            locales[name].set(values);

            // backwards compat for now: also set the locale
            locale_locales__getSetGlobalLocale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    // returns locale data
    function locale_locales__getLocale (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    var aliases = {};

    function addUnitAlias (unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    function makeGetSet (unit, keepTime) {
        return function (value) {
            if (value != null) {
                get_set__set(this, unit, value);
                utils_hooks__hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get_set__get(this, unit);
            }
        };
    }

    function get_set__get (mom, unit) {
        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
    }

    function get_set__set (mom, unit, value) {
        return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    }

    // MOMENTS

    function getSet (units, value) {
        var unit;
        if (typeof units === 'object') {
            for (unit in units) {
                this.set(unit, units[unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (typeof this[units] === 'function') {
                return this[units](value);
            }
        }
        return this;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken (token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '';
            for (i = 0; i < length; i++) {
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1         = /\d/;            //       0 - 9
    var match2         = /\d\d/;          //      00 - 99
    var match3         = /\d{3}/;         //     000 - 999
    var match4         = /\d{4}/;         //    0000 - 9999
    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
    var match1to2      = /\d\d?/;         //       0 - 99
    var match1to3      = /\d{1,3}/;       //       0 - 999
    var match1to4      = /\d{1,4}/;       //       0 - 9999
    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

    var matchUnsigned  = /\d+/;           //       0 - inf
    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;

    var regexes = {};

    function isFunction (sth) {
        // https://github.com/moment/moment/issues/2325
        return typeof sth === 'function' &&
            Object.prototype.toString.call(sth) === '[object Function]';
    }


    function addRegexToken (token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict) {
            return (isStrict && strictRegex) ? strictRegex : regex;
        };
    }

    function getParseRegexForToken (token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }).replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken (token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (typeof callback === 'number') {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken (token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;

    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PARSING

    addRegexToken('M',    match1to2);
    addRegexToken('MM',   match1to2, match2);
    addRegexToken('MMM',  matchWord);
    addRegexToken('MMMM', matchWord);

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths (m) {
        return this._months[m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort (m) {
        return this._monthsShort[m.month()];
    }

    function localeMonthsParse (monthName, format, strict) {
        var i, mom, regex;

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = create_utc__createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth (mom, value) {
        var dayOfMonth;

        // TODO: Move this out of here!
        if (typeof value === 'string') {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (typeof value !== 'number') {
                return mom;
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth (value) {
        if (value != null) {
            setMonth(this, value);
            utils_hooks__hooks.updateOffset(this, true);
            return this;
        } else {
            return get_set__get(this, 'Month');
        }
    }

    function getDaysInMonth () {
        return daysInMonth(this.year(), this.month());
    }

    function checkOverflow (m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    function warn(msg) {
        if (utils_hooks__hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (firstTime) {
                warn(msg + '\n' + (new Error()).stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    utils_hooks__hooks.suppressDeprecationWarnings = false;

    var from_string__isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

    var isoDates = [
        ['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/],
        ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/],
        ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/],
        ['GGGG-[W]WW', /\d{4}-W\d{2}/],
        ['YYYY-DDD', /\d{4}-\d{3}/]
    ];

    // iso time formats and regexes
    var isoTimes = [
        ['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/],
        ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/],
        ['HH:mm', /(T| )\d\d:\d\d/],
        ['HH', /(T| )\d\d/]
    ];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
        var i, l,
            string = config._i,
            match = from_string__isoRegex.exec(string);

        if (match) {
            getParsingFlags(config).iso = true;
            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(string)) {
                    config._f = isoDates[i][0];
                    break;
                }
            }
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(string)) {
                    // match[6] should be 'T' or space
                    config._f += (match[6] || ' ') + isoTimes[i][0];
                    break;
                }
            }
            if (string.match(matchOffset)) {
                config._f += 'Z';
            }
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }

    utils_hooks__hooks.createFromInputFallback = deprecate(
        'moment construction falls back to js Date. This is ' +
        'discouraged and will be removed in upcoming major ' +
        'release. Please refer to ' +
        'https://github.com/moment/moment/issues/1407 for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    function createDate (y, m, d, h, M, s, ms) {
        //can't just apply() to create a date:
        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
        var date = new Date(y, m, d, h, M, s, ms);

        //the date constructor doesn't accept years < 1970
        if (y < 1970) {
            date.setFullYear(y);
        }
        return date;
    }

    function createUTCDate (y) {
        var date = new Date(Date.UTC.apply(null, arguments));
        if (y < 1970) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY',   4],       0, 'year');
    addFormatToken(0, ['YYYYY',  5],       0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PARSING

    addRegexToken('Y',      matchSigned);
    addRegexToken('YY',     match1to2, match2);
    addRegexToken('YYYY',   match1to4, match4);
    addRegexToken('YYYYY',  match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    // HOOKS

    utils_hooks__hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', false);

    function getIsLeapYear () {
        return isLeapYear(this.year());
    }

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PARSING

    addRegexToken('w',  match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W',  match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // firstDayOfWeek       0 = sun, 6 = sat
    //                      the day of the week that starts the week
    //                      (usually sunday or monday)
    // firstDayOfWeekOfYear 0 = sun, 6 = sat
    //                      the first week is the week that contains the first
    //                      of this day of the week
    //                      (eg. ISO weeks use thursday (4))
    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
        var end = firstDayOfWeekOfYear - firstDayOfWeek,
            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
            adjustedMoment;


        if (daysToDayOfWeek > end) {
            daysToDayOfWeek -= 7;
        }

        if (daysToDayOfWeek < end - 7) {
            daysToDayOfWeek += 7;
        }

        adjustedMoment = local__createLocal(mom).add(daysToDayOfWeek, 'd');
        return {
            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
            year: adjustedMoment.year()
        };
    }

    // LOCALES

    function localeWeek (mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    };

    function localeFirstDayOfWeek () {
        return this._week.dow;
    }

    function localeFirstDayOfYear () {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek (input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek (input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PARSING

    addRegexToken('DDD',  match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
        var week1Jan = 6 + firstDayOfWeek - firstDayOfWeekOfYear, janX = createUTCDate(year, 0, 1 + week1Jan), d = janX.getUTCDay(), dayOfYear;
        if (d < firstDayOfWeek) {
            d += 7;
        }

        weekday = weekday != null ? 1 * weekday : firstDayOfWeek;

        dayOfYear = 1 + week1Jan + 7 * (week - 1) - d + weekday;

        return {
            year: dayOfYear > 0 ? year : year - 1,
            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear
        };
    }

    // MOMENTS

    function getSetDayOfYear (input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
    }

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        var now = new Date();
        if (config._useUTC) {
            return [now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()];
        }
        return [now.getFullYear(), now.getMonth(), now.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray (config) {
        var i, date, input = [], currentDate, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse)) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
            week = defaults(w.w, 1);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < dow) {
                    ++week;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from begining of week
                weekday = w.e + dow;
            } else {
                // default to begining of week
                weekday = dow;
            }
        }
        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);

        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }

    utils_hooks__hooks.ISO_8601 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === utils_hooks__hooks.ISO_8601) {
            configFromISO(config);
            return;
        }

        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                }
                else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (getParsingFlags(config).bigHour === true &&
                config._a[HOUR] <= 12 &&
                config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }


    function meridiemFixWrap (locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!valid__isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = [i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond];

        configFromArray(config);
    }

    function createFromConfig (config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig (config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || locale_locales__getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return valid__createInvalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else if (isDate(input)) {
            config._d = input;
        } else {
            configFromInput(config);
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (input === undefined) {
            config._d = new Date();
        } else if (isDate(input)) {
            config._d = new Date(+input);
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (typeof(input) === 'object') {
            configFromObject(config);
        } else if (typeof(input) === 'number') {
            // from milliseconds
            config._d = new Date(input);
        } else {
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC (input, format, locale, strict, isUTC) {
        var c = {};

        if (typeof(locale) === 'boolean') {
            strict = locale;
            locale = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function local__createLocal (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
         'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',
         function () {
             var other = local__createLocal.apply(null, arguments);
             return other < this ? this : other;
         }
     );

    var prototypeMax = deprecate(
        'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',
        function () {
            var other = local__createLocal.apply(null, arguments);
            return other > this ? this : other;
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return local__createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    function Duration (duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 36e5; // 1000 * 60 * 60
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = locale_locales__getLocale();

        this._bubble();
    }

    function isDuration (obj) {
        return obj instanceof Duration;
    }

    function offset (token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z',  matchOffset);
    addRegexToken('ZZ', matchOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(string) {
        var matches = ((string || '').match(matchOffset) || []);
        var chunk   = matches[matches.length - 1] || [];
        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? +input : +local__createLocal(input)) - (+res);
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(+res._d + diff);
            utils_hooks__hooks.updateOffset(res, false);
            return res;
        } else {
            return local__createLocal(input).local();
        }
    }

    function getDateOffset (m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    utils_hooks__hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset (input, keepLocalTime) {
        var offset = this._offset || 0,
            localAdjust;
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(input);
            }
            if (Math.abs(input) < 16) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    utils_hooks__hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone (input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC (keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal (keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset () {
        if (this._tzm) {
            this.utcOffset(this._tzm);
        } else if (typeof this._i === 'string') {
            this.utcOffset(offsetFromString(this._i));
        }
        return this;
    }

    function hasAlignedHourOffset (input) {
        input = input ? local__createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime () {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted () {
        if (typeof this._isDSTShifted !== 'undefined') {
            return this._isDSTShifted;
        }

        var c = {};

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
            this._isDSTShifted = this.isValid() &&
                compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal () {
        return !this._isUTC;
    }

    function isUtcOffset () {
        return this._isUTC;
    }

    function isUtc () {
        return this._isUTC && this._offset === 0;
    }

    var aspNetRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    var create__isoRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;

    function create__createDuration (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms : input._milliseconds,
                d  : input._days,
                M  : input._months
            };
        } else if (typeof input === 'number') {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y  : 0,
                d  : toInt(match[DATE])        * sign,
                h  : toInt(match[HOUR])        * sign,
                m  : toInt(match[MINUTE])      * sign,
                s  : toInt(match[SECOND])      * sign,
                ms : toInt(match[MILLISECOND]) * sign
            };
        } else if (!!(match = create__isoRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y : parseIso(match[2], sign),
                M : parseIso(match[3], sign),
                d : parseIso(match[4], sign),
                h : parseIso(match[5], sign),
                m : parseIso(match[6], sign),
                s : parseIso(match[7], sign),
                w : parseIso(match[8], sign)
            };
        } else if (duration == null) {// checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    create__createDuration.fn = Duration.prototype;

    function parseIso (inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {milliseconds: 0, months: 0};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = create__createDuration(val, period);
            add_subtract__addSubtract(this, dur, direction);
            return this;
        };
    }

    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = duration._days,
            months = duration._months;
        updateOffset = updateOffset == null ? true : updateOffset;

        if (milliseconds) {
            mom._d.setTime(+mom._d + milliseconds * isAdding);
        }
        if (days) {
            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
        }
        if (months) {
            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
        }
        if (updateOffset) {
            utils_hooks__hooks.updateOffset(mom, days || months);
        }
    }

    var add_subtract__add      = createAdder(1, 'add');
    var add_subtract__subtract = createAdder(-1, 'subtract');

    function moment_calendar__calendar (time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || local__createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            diff = this.diff(sod, 'days', true),
            format = diff < -6 ? 'sameElse' :
                diff < -1 ? 'lastWeek' :
                diff < 0 ? 'lastDay' :
                diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                diff < 7 ? 'nextWeek' : 'sameElse';
        return this.format(formats && formats[format] || this.localeData().calendar(format, this, local__createLocal(now)));
    }

    function clone () {
        return new Moment(this);
    }

    function isAfter (input, units) {
        var inputMs;
        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this > +input;
        } else {
            inputMs = isMoment(input) ? +input : +local__createLocal(input);
            return inputMs < +this.clone().startOf(units);
        }
    }

    function isBefore (input, units) {
        var inputMs;
        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this < +input;
        } else {
            inputMs = isMoment(input) ? +input : +local__createLocal(input);
            return +this.clone().endOf(units) < inputMs;
        }
    }

    function isBetween (from, to, units) {
        return this.isAfter(from, units) && this.isBefore(to, units);
    }

    function isSame (input, units) {
        var inputMs;
        units = normalizeUnits(units || 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this === +input;
        } else {
            inputMs = +local__createLocal(input);
            return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));
        }
    }

    function diff (input, units, asFloat) {
        var that = cloneWithOffset(input, this),
            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4,
            delta, output;

        units = normalizeUnits(units);

        if (units === 'year' || units === 'month' || units === 'quarter') {
            output = monthDiff(this, that);
            if (units === 'quarter') {
                output = output / 3;
            } else if (units === 'year') {
                output = output / 12;
            }
        } else {
            delta = this - that;
            output = units === 'second' ? delta / 1e3 : // 1000
                units === 'minute' ? delta / 6e4 : // 1000 * 60
                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                delta;
        }
        return asFloat ? output : absFloor(output);
    }

    function monthDiff (a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        return -(wholeMonthDiff + adjust);
    }

    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';

    function toString () {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function moment_format__toISOString () {
        var m = this.clone().utc();
        if (0 < m.year() && m.year() <= 9999) {
            if ('function' === typeof Date.prototype.toISOString) {
                // native implementation is ~50x faster, use it when we can
                return this.toDate().toISOString();
            } else {
                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            }
        } else {
            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        }
    }

    function format (inputString) {
        var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);
        return this.localeData().postformat(output);
    }

    function from (time, withoutSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
        return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
    }

    function fromNow (withoutSuffix) {
        return this.from(local__createLocal(), withoutSuffix);
    }

    function to (time, withoutSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
        return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
    }

    function toNow (withoutSuffix) {
        return this.to(local__createLocal(), withoutSuffix);
    }

    function locale (key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = locale_locales__getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData () {
        return this._locale;
    }

    function startOf (units) {
        units = normalizeUnits(units);
        // the following switch intentionally omits break keywords
        // to utilize falling through the cases.
        switch (units) {
        case 'year':
            this.month(0);
            /* falls through */
        case 'quarter':
        case 'month':
            this.date(1);
            /* falls through */
        case 'week':
        case 'isoWeek':
        case 'day':
            this.hours(0);
            /* falls through */
        case 'hour':
            this.minutes(0);
            /* falls through */
        case 'minute':
            this.seconds(0);
            /* falls through */
        case 'second':
            this.milliseconds(0);
        }

        // weeks are a special case
        if (units === 'week') {
            this.weekday(0);
        }
        if (units === 'isoWeek') {
            this.isoWeekday(1);
        }

        // quarters are also special
        if (units === 'quarter') {
            this.month(Math.floor(this.month() / 3) * 3);
        }

        return this;
    }

    function endOf (units) {
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond') {
            return this;
        }
        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
    }

    function to_type__valueOf () {
        return +this._d - ((this._offset || 0) * 60000);
    }

    function unix () {
        return Math.floor(+this / 1000);
    }

    function toDate () {
        return this._offset ? new Date(+this) : this._d;
    }

    function toArray () {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject () {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }

    function moment_valid__isValid () {
        return valid__isValid(this);
    }

    function parsingFlags () {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt () {
        return getParsingFlags(this).overflow;
    }

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken (token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg',     'weekYear');
    addWeekYearFormatToken('ggggg',    'weekYear');
    addWeekYearFormatToken('GGGG',  'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PARSING

    addRegexToken('G',      matchSigned);
    addRegexToken('g',      matchSigned);
    addRegexToken('GG',     match1to2, match2);
    addRegexToken('gg',     match1to2, match2);
    addRegexToken('GGGG',   match1to4, match4);
    addRegexToken('gggg',   match1to4, match4);
    addRegexToken('GGGGG',  match1to6, match6);
    addRegexToken('ggggg',  match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
    });

    // HELPERS

    function weeksInYear(year, dow, doy) {
        return weekOfYear(local__createLocal([year, 11, 31 + dow - doy]), dow, doy).week;
    }

    // MOMENTS

    function getSetWeekYear (input) {
        var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
        return input == null ? year : this.add((input - year), 'y');
    }

    function getSetISOWeekYear (input) {
        var year = weekOfYear(this, 1, 4).year;
        return input == null ? year : this.add((input - year), 'y');
    }

    function getISOWeeksInYear () {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear () {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    addFormatToken('Q', 0, 0, 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter (input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PARSING

    addRegexToken('D',  match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0], 10);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PARSING

    addRegexToken('d',    match1to2);
    addRegexToken('e',    match1to2);
    addRegexToken('E',    match1to2);
    addRegexToken('dd',   matchWord);
    addRegexToken('ddd',  matchWord);
    addRegexToken('dddd', matchWord);

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config) {
        var weekday = config._locale.weekdaysParse(input);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    // LOCALES

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays (m) {
        return this._weekdays[m.day()];
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort (m) {
        return this._weekdaysShort[m.day()];
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin (m) {
        return this._weekdaysMin[m.day()];
    }

    function localeWeekdaysParse (weekdayName) {
        var i, mom, regex;

        this._weekdaysParse = this._weekdaysParse || [];

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            if (!this._weekdaysParse[i]) {
                mom = local__createLocal([2000, 1]).day(i);
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek (input) {
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek (input) {
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek (input) {
        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.
        return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, function () {
        return this.hours() % 12 || 12;
    });

    function meridiem (token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PARSING

    function matchMeridiem (isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a',  matchMeridiem);
    addRegexToken('A',  matchMeridiem);
    addRegexToken('H',  match1to2);
    addRegexToken('h',  match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });

    // LOCALES

    function localeIsPM (input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return ((input + '').toLowerCase().charAt(0) === 'p');
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }


    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour he wants. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PARSING

    addRegexToken('m',  match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PARSING

    addRegexToken('s',  match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });


    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PARSING

    addRegexToken('S',    match1to3, match1);
    addRegexToken('SS',   match1to3, match2);
    addRegexToken('SSS',  match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    addFormatToken('z',  0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr () {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName () {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var momentPrototype__proto = Moment.prototype;

    momentPrototype__proto.add          = add_subtract__add;
    momentPrototype__proto.calendar     = moment_calendar__calendar;
    momentPrototype__proto.clone        = clone;
    momentPrototype__proto.diff         = diff;
    momentPrototype__proto.endOf        = endOf;
    momentPrototype__proto.format       = format;
    momentPrototype__proto.from         = from;
    momentPrototype__proto.fromNow      = fromNow;
    momentPrototype__proto.to           = to;
    momentPrototype__proto.toNow        = toNow;
    momentPrototype__proto.get          = getSet;
    momentPrototype__proto.invalidAt    = invalidAt;
    momentPrototype__proto.isAfter      = isAfter;
    momentPrototype__proto.isBefore     = isBefore;
    momentPrototype__proto.isBetween    = isBetween;
    momentPrototype__proto.isSame       = isSame;
    momentPrototype__proto.isValid      = moment_valid__isValid;
    momentPrototype__proto.lang         = lang;
    momentPrototype__proto.locale       = locale;
    momentPrototype__proto.localeData   = localeData;
    momentPrototype__proto.max          = prototypeMax;
    momentPrototype__proto.min          = prototypeMin;
    momentPrototype__proto.parsingFlags = parsingFlags;
    momentPrototype__proto.set          = getSet;
    momentPrototype__proto.startOf      = startOf;
    momentPrototype__proto.subtract     = add_subtract__subtract;
    momentPrototype__proto.toArray      = toArray;
    momentPrototype__proto.toObject     = toObject;
    momentPrototype__proto.toDate       = toDate;
    momentPrototype__proto.toISOString  = moment_format__toISOString;
    momentPrototype__proto.toJSON       = moment_format__toISOString;
    momentPrototype__proto.toString     = toString;
    momentPrototype__proto.unix         = unix;
    momentPrototype__proto.valueOf      = to_type__valueOf;

    // Year
    momentPrototype__proto.year       = getSetYear;
    momentPrototype__proto.isLeapYear = getIsLeapYear;

    // Week Year
    momentPrototype__proto.weekYear    = getSetWeekYear;
    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;

    // Quarter
    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;

    // Month
    momentPrototype__proto.month       = getSetMonth;
    momentPrototype__proto.daysInMonth = getDaysInMonth;

    // Week
    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;
    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;
    momentPrototype__proto.weeksInYear    = getWeeksInYear;
    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;

    // Day
    momentPrototype__proto.date       = getSetDayOfMonth;
    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;
    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;
    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
    momentPrototype__proto.dayOfYear  = getSetDayOfYear;

    // Hour
    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;

    // Minute
    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;

    // Second
    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;

    // Millisecond
    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;

    // Offset
    momentPrototype__proto.utcOffset            = getSetOffset;
    momentPrototype__proto.utc                  = setOffsetToUTC;
    momentPrototype__proto.local                = setOffsetToLocal;
    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;
    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
    momentPrototype__proto.isDST                = isDaylightSavingTime;
    momentPrototype__proto.isDSTShifted         = isDaylightSavingTimeShifted;
    momentPrototype__proto.isLocal              = isLocal;
    momentPrototype__proto.isUtcOffset          = isUtcOffset;
    momentPrototype__proto.isUtc                = isUtc;
    momentPrototype__proto.isUTC                = isUtc;

    // Timezone
    momentPrototype__proto.zoneAbbr = getZoneAbbr;
    momentPrototype__proto.zoneName = getZoneName;

    // Deprecations
    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', getSetZone);

    var momentPrototype = momentPrototype__proto;

    function moment__createUnix (input) {
        return local__createLocal(input * 1000);
    }

    function moment__createInZone () {
        return local__createLocal.apply(null, arguments).parseZone();
    }

    var defaultCalendar = {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    };

    function locale_calendar__calendar (key, mom, now) {
        var output = this._calendar[key];
        return typeof output === 'function' ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS  : 'h:mm:ss A',
        LT   : 'h:mm A',
        L    : 'MM/DD/YYYY',
        LL   : 'MMMM D, YYYY',
        LLL  : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat (key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate () {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultOrdinalParse = /\d{1,2}/;

    function ordinal (number) {
        return this._ordinal.replace('%d', number);
    }

    function preParsePostFormat (string) {
        return string;
    }

    var defaultRelativeTime = {
        future : 'in %s',
        past   : '%s ago',
        s  : 'a few seconds',
        m  : 'a minute',
        mm : '%d minutes',
        h  : 'an hour',
        hh : '%d hours',
        d  : 'a day',
        dd : '%d days',
        M  : 'a month',
        MM : '%d months',
        y  : 'a year',
        yy : '%d years'
    };

    function relative__relativeTime (number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return (typeof output === 'function') ?
            output(number, withoutSuffix, string, isFuture) :
            output.replace(/%d/i, number);
    }

    function pastFuture (diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
    }

    function locale_set__set (config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (typeof prop === 'function') {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _ordinalParseLenient.
        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
    }

    var prototype__proto = Locale.prototype;

    prototype__proto._calendar       = defaultCalendar;
    prototype__proto.calendar        = locale_calendar__calendar;
    prototype__proto._longDateFormat = defaultLongDateFormat;
    prototype__proto.longDateFormat  = longDateFormat;
    prototype__proto._invalidDate    = defaultInvalidDate;
    prototype__proto.invalidDate     = invalidDate;
    prototype__proto._ordinal        = defaultOrdinal;
    prototype__proto.ordinal         = ordinal;
    prototype__proto._ordinalParse   = defaultOrdinalParse;
    prototype__proto.preparse        = preParsePostFormat;
    prototype__proto.postformat      = preParsePostFormat;
    prototype__proto._relativeTime   = defaultRelativeTime;
    prototype__proto.relativeTime    = relative__relativeTime;
    prototype__proto.pastFuture      = pastFuture;
    prototype__proto.set             = locale_set__set;

    // Month
    prototype__proto.months       =        localeMonths;
    prototype__proto._months      = defaultLocaleMonths;
    prototype__proto.monthsShort  =        localeMonthsShort;
    prototype__proto._monthsShort = defaultLocaleMonthsShort;
    prototype__proto.monthsParse  =        localeMonthsParse;

    // Week
    prototype__proto.week = localeWeek;
    prototype__proto._week = defaultLocaleWeek;
    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;

    // Day of Week
    prototype__proto.weekdays       =        localeWeekdays;
    prototype__proto._weekdays      = defaultLocaleWeekdays;
    prototype__proto.weekdaysMin    =        localeWeekdaysMin;
    prototype__proto._weekdaysMin   = defaultLocaleWeekdaysMin;
    prototype__proto.weekdaysShort  =        localeWeekdaysShort;
    prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;
    prototype__proto.weekdaysParse  =        localeWeekdaysParse;

    // Hours
    prototype__proto.isPM = localeIsPM;
    prototype__proto._meridiemParse = defaultLocaleMeridiemParse;
    prototype__proto.meridiem = localeMeridiem;

    function lists__get (format, index, field, setter) {
        var locale = locale_locales__getLocale();
        var utc = create_utc__createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function list (format, index, field, count, setter) {
        if (typeof format === 'number') {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return lists__get(format, index, field, setter);
        }

        var i;
        var out = [];
        for (i = 0; i < count; i++) {
            out[i] = lists__get(format, i, field, setter);
        }
        return out;
    }

    function lists__listMonths (format, index) {
        return list(format, index, 'months', 12, 'month');
    }

    function lists__listMonthsShort (format, index) {
        return list(format, index, 'monthsShort', 12, 'month');
    }

    function lists__listWeekdays (format, index) {
        return list(format, index, 'weekdays', 7, 'day');
    }

    function lists__listWeekdaysShort (format, index) {
        return list(format, index, 'weekdaysShort', 7, 'day');
    }

    function lists__listWeekdaysMin (format, index) {
        return list(format, index, 'weekdaysMin', 7, 'day');
    }

    locale_locales__getSetGlobalLocale('en', {
        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    // Side effect imports
    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);

    var mathAbs = Math.abs;

    function duration_abs__abs () {
        var data           = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days         = mathAbs(this._days);
        this._months       = mathAbs(this._months);

        data.milliseconds  = mathAbs(data.milliseconds);
        data.seconds       = mathAbs(data.seconds);
        data.minutes       = mathAbs(data.minutes);
        data.hours         = mathAbs(data.hours);
        data.months        = mathAbs(data.months);
        data.years         = mathAbs(data.years);

        return this;
    }

    function duration_add_subtract__addSubtract (duration, input, value, direction) {
        var other = create__createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days         += direction * other._days;
        duration._months       += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function duration_add_subtract__add (input, value) {
        return duration_add_subtract__addSubtract(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function duration_add_subtract__subtract (input, value) {
        return duration_add_subtract__addSubtract(this, input, value, -1);
    }

    function absCeil (number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble () {
        var milliseconds = this._milliseconds;
        var days         = this._days;
        var months       = this._months;
        var data         = this._data;
        var seconds, minutes, hours, years, monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0))) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds           = absFloor(milliseconds / 1000);
        data.seconds      = seconds % 60;

        minutes           = absFloor(seconds / 60);
        data.minutes      = minutes % 60;

        hours             = absFloor(minutes / 60);
        data.hours        = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days   = days;
        data.months = months;
        data.years  = years;

        return this;
    }

    function daysToMonths (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }

    function monthsToDays (months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }

    function as (units) {
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'year') {
            days   = this._days   + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            return units === 'month' ? months : months / 12;
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week'   : return days / 7     + milliseconds / 6048e5;
                case 'day'    : return days         + milliseconds / 864e5;
                case 'hour'   : return days * 24    + milliseconds / 36e5;
                case 'minute' : return days * 1440  + milliseconds / 6e4;
                case 'second' : return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
                default: throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function duration_as__valueOf () {
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs (alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds      = makeAs('s');
    var asMinutes      = makeAs('m');
    var asHours        = makeAs('h');
    var asDays         = makeAs('d');
    var asWeeks        = makeAs('w');
    var asMonths       = makeAs('M');
    var asYears        = makeAs('y');

    function duration_get__get (units) {
        units = normalizeUnits(units);
        return this[units + 's']();
    }

    function makeGetter(name) {
        return function () {
            return this._data[name];
        };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds      = makeGetter('seconds');
    var minutes      = makeGetter('minutes');
    var hours        = makeGetter('hours');
    var days         = makeGetter('days');
    var months       = makeGetter('months');
    var years        = makeGetter('years');

    function weeks () {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        s: 45,  // seconds to minute
        m: 45,  // minutes to hour
        h: 22,  // hours to day
        d: 26,  // days to month
        M: 11   // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {
        var duration = create__createDuration(posNegDuration).abs();
        var seconds  = round(duration.as('s'));
        var minutes  = round(duration.as('m'));
        var hours    = round(duration.as('h'));
        var days     = round(duration.as('d'));
        var months   = round(duration.as('M'));
        var years    = round(duration.as('y'));

        var a = seconds < thresholds.s && ['s', seconds]  ||
                minutes === 1          && ['m']           ||
                minutes < thresholds.m && ['mm', minutes] ||
                hours   === 1          && ['h']           ||
                hours   < thresholds.h && ['hh', hours]   ||
                days    === 1          && ['d']           ||
                days    < thresholds.d && ['dd', days]    ||
                months  === 1          && ['M']           ||
                months  < thresholds.M && ['MM', months]  ||
                years   === 1          && ['y']           || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set a threshold for relative time strings
    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        return true;
    }

    function humanize (withSuffix) {
        var locale = this.localeData();
        var output = duration_humanize__relativeTime(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var iso_string__abs = Math.abs;

    function iso_string__toISOString() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        var seconds = iso_string__abs(this._milliseconds) / 1000;
        var days         = iso_string__abs(this._days);
        var months       = iso_string__abs(this._months);
        var minutes, hours, years;

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes           = absFloor(seconds / 60);
        hours             = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years  = absFloor(months / 12);
        months %= 12;


        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds;
        var total = this.asSeconds();

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        return (total < 0 ? '-' : '') +
            'P' +
            (Y ? Y + 'Y' : '') +
            (M ? M + 'M' : '') +
            (D ? D + 'D' : '') +
            ((h || m || s) ? 'T' : '') +
            (h ? h + 'H' : '') +
            (m ? m + 'M' : '') +
            (s ? s + 'S' : '');
    }

    var duration_prototype__proto = Duration.prototype;

    duration_prototype__proto.abs            = duration_abs__abs;
    duration_prototype__proto.add            = duration_add_subtract__add;
    duration_prototype__proto.subtract       = duration_add_subtract__subtract;
    duration_prototype__proto.as             = as;
    duration_prototype__proto.asMilliseconds = asMilliseconds;
    duration_prototype__proto.asSeconds      = asSeconds;
    duration_prototype__proto.asMinutes      = asMinutes;
    duration_prototype__proto.asHours        = asHours;
    duration_prototype__proto.asDays         = asDays;
    duration_prototype__proto.asWeeks        = asWeeks;
    duration_prototype__proto.asMonths       = asMonths;
    duration_prototype__proto.asYears        = asYears;
    duration_prototype__proto.valueOf        = duration_as__valueOf;
    duration_prototype__proto._bubble        = bubble;
    duration_prototype__proto.get            = duration_get__get;
    duration_prototype__proto.milliseconds   = milliseconds;
    duration_prototype__proto.seconds        = seconds;
    duration_prototype__proto.minutes        = minutes;
    duration_prototype__proto.hours          = hours;
    duration_prototype__proto.days           = days;
    duration_prototype__proto.weeks          = weeks;
    duration_prototype__proto.months         = months;
    duration_prototype__proto.years          = years;
    duration_prototype__proto.humanize       = humanize;
    duration_prototype__proto.toISOString    = iso_string__toISOString;
    duration_prototype__proto.toString       = iso_string__toISOString;
    duration_prototype__proto.toJSON         = iso_string__toISOString;
    duration_prototype__proto.locale         = locale;
    duration_prototype__proto.localeData     = localeData;

    // Deprecations
    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
    duration_prototype__proto.lang = lang;

    // Side effect imports

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    // Side effect imports


    utils_hooks__hooks.version = '2.10.6';

    setHookCallback(local__createLocal);

    utils_hooks__hooks.fn                    = momentPrototype;
    utils_hooks__hooks.min                   = min;
    utils_hooks__hooks.max                   = max;
    utils_hooks__hooks.utc                   = create_utc__createUTC;
    utils_hooks__hooks.unix                  = moment__createUnix;
    utils_hooks__hooks.months                = lists__listMonths;
    utils_hooks__hooks.isDate                = isDate;
    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;
    utils_hooks__hooks.invalid               = valid__createInvalid;
    utils_hooks__hooks.duration              = create__createDuration;
    utils_hooks__hooks.isMoment              = isMoment;
    utils_hooks__hooks.weekdays              = lists__listWeekdays;
    utils_hooks__hooks.parseZone             = moment__createInZone;
    utils_hooks__hooks.localeData            = locale_locales__getLocale;
    utils_hooks__hooks.isDuration            = isDuration;
    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;
    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;
    utils_hooks__hooks.defineLocale          = defineLocale;
    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;
    utils_hooks__hooks.normalizeUnits        = normalizeUnits;
    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;

    var _moment = utils_hooks__hooks;

    return _moment;

}));
},{}],"/home/ubuntu/staging/apps/build/js/netsim/Packet.js":[function(require,module,exports){
/**
 * @overview Utility class for encoding and decoding simulated packets.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var NetSimUtils = require('./NetSimUtils');
var DataConverters = require('./DataConverters');
var NetSimGlobals = require('./NetSimGlobals');

/**
 * Wraps binary packet content with the format information required to
 * interpret it.
 * @param {Packet.HeaderType[]} formatSpec
 * @param {string} binary
 * @constructor
 */
var Packet = module.exports = function (formatSpec, binary) {
  var level = NetSimGlobals.getLevelConfig();

  /** @type {Packet.Encoder} */
  this.encoder = new Packet.Encoder(level.addressFormat, level.packetCountBitWidth, formatSpec);

  /** @type {string} of binary content */
  this.binary = binary;
};

/**
 * Possible packet header fields.  Values to this enum become keys
 * that can be used when defining a level configuration.  They also correspond
 * to class names that get applied to fields representing data in that column.
 * @enum {string}
 * @readonly
 */
Packet.HeaderType = {
  TO_ADDRESS: 'toAddress',
  FROM_ADDRESS: 'fromAddress',
  PACKET_INDEX: 'packetIndex',
  PACKET_COUNT: 'packetCount'
};

/**
 * Whether the given header field type will use the address format.
 * @param {Packet.HeaderType} headerType
 * @returns {boolean}
 */
Packet.isAddressField = function (headerType) {
  return headerType === Packet.HeaderType.TO_ADDRESS || headerType === Packet.HeaderType.FROM_ADDRESS;
};

/**
 * Whether the given header field will use the packetCount bit width.
 * @param {Packet.HeaderType} headerType
 * @returns {boolean}
 */
Packet.isPacketField = function (headerType) {
  return headerType === Packet.HeaderType.PACKET_INDEX || headerType === Packet.HeaderType.PACKET_COUNT;
};

/**
 * @param {Packet.HeaderType} headerType
 * @returns {string} of binary content
 */
Packet.prototype.getHeaderAsBinary = function (headerType) {
  return this.encoder.getHeader(headerType, this.binary);
};

/**
 * @param {Packet.HeaderType} headerType
 * @returns {number}
 */
Packet.prototype.getHeaderAsInt = function (headerType) {
  return this.encoder.getHeaderAsInt(headerType, this.binary);
};

/**
 * @param {Packet.HeaderType} headerType
 * @returns {string}
 */
Packet.prototype.getHeaderAsAddressString = function (headerType) {
  return this.encoder.getHeaderAsAddressString(headerType, this.binary);
};

/**
 * @returns {string} binary content
 */
Packet.prototype.getBodyAsBinary = function () {
  return this.encoder.getBody(this.binary);
};

/**
 * @param {number} bitsPerChar
 * @returns {string} ascii content
 */
Packet.prototype.getBodyAsAscii = function (bitsPerChar) {
  return this.encoder.getBodyAsAscii(this.binary, bitsPerChar);
};

/**
 * Given a particular packet format, can convert a set of fields down
 * into a binary string matching the specification, or extract fields
 * on demand from a binary string.
 * @param {AddressHeaderFormat} addressFormat
 * @param {number} packetCountBitWidth
 * @param {Packet.HeaderType[]} headerSpec - Specification of packet format, an
 *        ordered set of objects in the form {key:string, bits:number} where
 *        key is the field name you'll use to retrieve the information, and
 *        bits is the length of the field.
 * @constructor
 */
Packet.Encoder = function (addressFormat, packetCountBitWidth, headerSpec) {
  /** @type {string} */
  this.addressFormat_ = addressFormat;

  this.addressBitWidth_ = this.calculateBitWidth(this.addressFormat_);

  /** @type {number} */
  this.packetCountBitWidth_ = packetCountBitWidth;

  /** @type {Packet.HeaderType[]} */
  this.headerSpec_ = headerSpec;

  this.validateSpec();
};

/**
 * @param {AddressHeaderFormat} addressFormat
 * @private
 */
Packet.Encoder.prototype.calculateBitWidth = function (addressFormat) {
  return addressFormat.split(/\D+/).reduce(function (prev, cur) {
    return prev + (parseInt(cur, 10) || 0);
  }, 0);
};

/**
 * Verify that the configured format specification describes a valid format that
 * can be used by the Packet.Encoder object.
 */
Packet.Encoder.prototype.validateSpec = function () {
  var keyCache = {};

  for (var i = 0; i < this.headerSpec_.length; i++) {
    var isAddressField = Packet.isAddressField(this.headerSpec_[i]);
    var isPacketField = Packet.isPacketField(this.headerSpec_[i]);

    if (isAddressField && this.addressBitWidth_ === 0) {
      throw new Error("Invalid packet format: Includes an address field but " + " address format is invalid.");
    }

    if (isPacketField && this.packetCountBitWidth_ === 0) {
      throw new Error("Invalid packet format: Includes a packet count field " + " but packet field bit width is zero");
    }

    if (!isAddressField && !isPacketField) {
      throw new Error("Invalid packet format: Unrecognized packet header field " + this.headerSpec_[i]);
    }

    if (keyCache.hasOwnProperty(this.headerSpec_[i])) {
      throw new Error("Invalid packet format: Field keys must be unique.");
    } else {
      keyCache[this.headerSpec_[i]] = 'used';
    }
  }
};

/**
 * Retrieve requested header field by key from the provided binary blob.
 *
 * @param {Packet.HeaderType} key - which header to retrieve
 * @param {string} binary for entire packet
 * @returns {string} binary string value for header field
 * @throws when requested key is not in the configured packet spec
 */
Packet.Encoder.prototype.getHeader = function (key, binary) {
  var ruleIndex = 0,
      binaryIndex = 0;

  // Strip whitespace so we don't worry about being passed formatted binary
  binary = DataConverters.minifyBinary(binary);

  while (this.headerSpec_[ruleIndex] !== key) {
    binaryIndex += this.getFieldBitWidth(this.headerSpec_[ruleIndex]);
    ruleIndex++;

    if (ruleIndex >= this.headerSpec_.length) {
      // Didn't find key
      throw new Error('Key "' + key + '" not found in packet spec.');
    }
  }

  // Read value
  var bitWidth = this.getFieldBitWidth(this.headerSpec_[ruleIndex]);
  var bits = binary.slice(binaryIndex, binaryIndex + bitWidth);

  // Right-pad with zeroes to desired size
  if (bitWidth !== Infinity) {
    while (bits.length < bitWidth) {
      bits += '0';
    }
  }

  return bits;
};

/**
 * @param {Packet.HeaderType} key - field name
 * @param {string} binary - entire packet as a binary string
 * @returns {number} - requested field, interpreted as an int.
 */
Packet.Encoder.prototype.getHeaderAsInt = function (key, binary) {
  return DataConverters.binaryToInt(this.getHeader(key, binary));
};

/**
 * Retrieve an address header as a string, so we can give the multi-part
 * representation.
 * @param {Packet.HeaderType} key
 * @param {string} binary for whole packet
 * @returns {string}
 */
Packet.Encoder.prototype.getHeaderAsAddressString = function (key, binary) {
  return DataConverters.binaryToAddressString(this.getHeader(key, binary), this.addressFormat_);
};

/**
 * Skip over headers given in spec and return remainder of binary which
 * must be the message body.
 * @param {string} binary - entire packet as a binary string
 * @returns {string} packet body binary string
 */
Packet.Encoder.prototype.getBody = function (binary) {
  return DataConverters.minifyBinary(binary).slice(this.getHeaderLength());
};

/**
 * @returns {number} How many bits the header takes up
 */
Packet.Encoder.prototype.getHeaderLength = function () {
  return this.headerSpec_.reduce((function (prev, cur) {
    return prev + this.getFieldBitWidth(cur);
  }).bind(this), 0);
};

/**
 * Skip over headers given in spec, and return remainder of packet interpreted
 * to ascii with the given character width.
 * @param {string} binary - entire packet as a binary string
 * @param {number} bitsPerChar - bits to represent as a single character,
 *        recommended to use 8 for normal ASCII.
 */
Packet.Encoder.prototype.getBodyAsAscii = function (binary, bitsPerChar) {
  return DataConverters.binaryToAscii(this.getBody(binary), bitsPerChar);
};

/**
 * @param {Packet.HeaderType} headerType
 * @returns {number} how many bits that field should take in the packet header
 */
Packet.Encoder.prototype.getFieldBitWidth = function (headerType) {
  if (Packet.isAddressField(headerType)) {
    return this.addressBitWidth_;
  }

  if (Packet.isPacketField(headerType)) {
    return this.packetCountBitWidth_;
  }

  // Should never get here.
  throw new Error("Unable to select a bit-width for field " + headerType);
};

/**
 * Given a "headers" object where the values are numbers, returns a corresponding
 * "headers" object where the values have all been converted to binary
 * representations at the appropriate width.  Only header fields that appear in
 * the configured packet header format will be converted and passed through to
 * output.
 * @param {Object} headers - with number values
 */
Packet.Encoder.prototype.makeBinaryHeaders = function (headers) {
  var binaryHeaders = {};
  this.headerSpec_.forEach(function (headerField) {
    if (headers.hasOwnProperty(headerField)) {
      // Convert differently for address and packet fields?
      if (Packet.isAddressField(headerField)) {
        binaryHeaders[headerField] = this.addressStringToBinary(headers[headerField]);
      } else {
        binaryHeaders[headerField] = DataConverters.intToBinary(headers[headerField], this.getFieldBitWidth(headerField));
      }
    }
  }, this);
  return binaryHeaders;
};

/**
 * Convert an address string (possibly multi-part) into binary based on the
 * configured address format.
 * @param {string} address
 * @returns {string} binary representation
 */
Packet.Encoder.prototype.addressStringToBinary = function (address) {
  return DataConverters.addressStringToBinary(address, this.addressFormat_);
};

/**
 * Takes a set of binary headers and a binary body, and generates a complete
 * packet binary matching the configured packet spec in terms of header width
 * and ordering.
 *
 * @param {Object} binaryHeaders - hash containing packet headers in binary, where
 *        the hash keys correspond to the "key" values in the packet spec, and
 *        the hash values are binary strings.
 * @param {string} body - binary string of the unlimited-length body of the
 *        packet, which will be placed after the packet headers.
 *
 * @returns {string} binary string of provided data, conforming to configured
 *          packet format.
 */
Packet.Encoder.prototype.concatenateBinary = function (binaryHeaders, body) {
  var parts = [];

  this.headerSpec_.forEach(function (fieldSpec) {
    var fieldWidth = this.getFieldBitWidth(fieldSpec);

    // Get header value from provided headers, if it exists.
    // If not, we'll start with an empty string and pad it to the correct
    // length, below.
    var fieldBits = binaryHeaders.hasOwnProperty(fieldSpec) ? binaryHeaders[fieldSpec] : '';

    // Right-truncate to the desired size
    fieldBits = fieldBits.slice(0, fieldWidth);

    // Left-pad to desired size
    fieldBits = NetSimUtils.zeroPadLeft(fieldBits, fieldWidth);

    parts.push(fieldBits);
  }, this);

  parts.push(body);

  return parts.join('');
};

},{"./DataConverters":"/home/ubuntu/staging/apps/build/js/netsim/DataConverters.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsTab.js":[function(require,module,exports){
/**
 * @overview UI controller for the DNS tab in the left column.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var markup = require('./NetSimDnsTab.html.ejs');
var DnsMode = require('./NetSimConstants').DnsMode;
var NetSimDnsModeControl = require('./NetSimDnsModeControl');
var NetSimDnsManualControl = require('./NetSimDnsManualControl');
var NetSimDnsTable = require('./NetSimDnsTable');
var NetSimGlobals = require('./NetSimGlobals');

/**
 * Generator and controller for "DNS" tab.
 * @param {jQuery} rootDiv
 * @param {function} dnsModeChangeCallback
 * @param {function} becomeDnsCallback
 * @constructor
 */
var NetSimDnsTab = module.exports = function (rootDiv, dnsModeChangeCallback, becomeDnsCallback) {
  /**
   * Component root, which we fill whenever we call render()
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = rootDiv;

  /**
   * @type {function}
   * @private
   */
  this.dnsModeChangeCallback_ = dnsModeChangeCallback;

  /**
   * @type {function}
   * @private
   */
  this.becomeDnsCallback_ = becomeDnsCallback;

  /**
   * @type {NetSimDnsModeControl}
   * @private
   */
  this.dnsModeControl_ = null;

  /**
   * @type {NetSimDnsManualControl}
   * @private
   */
  this.dnsManualControl_ = null;

  /**
   * @type {NetSimDnsTable}
   * @private
   */
  this.dnsTable_ = null;

  this.render();
};

/**
 * Fill the root div with new elements reflecting the current state
 */
NetSimDnsTab.prototype.render = function () {
  var levelConfig = NetSimGlobals.getLevelConfig();

  var renderedMarkup = $(markup({
    level: levelConfig
  }));
  this.rootDiv_.html(renderedMarkup);

  if (levelConfig.showDnsModeControl) {
    this.dnsModeControl_ = new NetSimDnsModeControl(this.rootDiv_.find('.dns_mode'), this.dnsModeChangeCallback_);
  }

  this.dnsManualControl_ = new NetSimDnsManualControl(this.rootDiv_.find('.dns_manual_control'), this.becomeDnsCallback_);

  this.dnsTable_ = new NetSimDnsTable(this.rootDiv_.find('.dns_table'));
};

/**
 * @param {DnsMode} newDnsMode
 */
NetSimDnsTab.prototype.setDnsMode = function (newDnsMode) {
  if (this.dnsModeControl_) {
    this.dnsModeControl_.setDnsMode(newDnsMode);
  }

  this.dnsTable_.setDnsMode(newDnsMode);
  this.rootDiv_.find('.dns_manual_control').toggle(newDnsMode === DnsMode.MANUAL);
  this.rootDiv_.find('.dns-notes').toggle(newDnsMode !== DnsMode.NONE);
};

/**
 * @param {boolean} isDnsNode
 */
NetSimDnsTab.prototype.setIsDnsNode = function (isDnsNode) {
  this.dnsManualControl_.setIsDnsNode(isDnsNode);
};

/**
 * @param {Array} tableContents
 */
NetSimDnsTab.prototype.setDnsTableContents = function (tableContents) {
  this.dnsTable_.setDnsTableContents(tableContents);
};

},{"./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimDnsManualControl":"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsManualControl.js","./NetSimDnsModeControl":"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsModeControl.js","./NetSimDnsTab.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsTab.html.ejs","./NetSimDnsTable":"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsTable.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsTable.js":[function(require,module,exports){
/**
 * @overview UI table of local subnet, displaying hostname => address map.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var markup = require('./NetSimDnsTable.html.ejs');
var DnsMode = require('./NetSimConstants').DnsMode;

/**
 * Generator and controller for DNS network lookup table component.
 * Shows different amounts of information depending on the DNS mode.
 *
 * @param {jQuery} rootDiv
 * @constructor
 */
var NetSimDnsTable = module.exports = function (rootDiv) {
  /**
   * Component root, which we fill whenever we call render()
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = rootDiv;

  /**
   * @type {DnsMode}
   * @private
   */
  this.dnsMode_ = DnsMode.NONE;

  /**
   * @type {Array}
   * @private
   */
  this.addressTableData_ = [];

  this.render();
};

/**
 * Fill the root div with new elements reflecting the current state
 */
NetSimDnsTable.prototype.render = function () {
  var renderedMarkup = $(markup({
    dnsMode: this.dnsMode_,
    tableData: this.addressTableData_
  }));
  this.rootDiv_.html(renderedMarkup);
};

/**
 * @param {DnsMode} newDnsMode
 */
NetSimDnsTable.prototype.setDnsMode = function (newDnsMode) {
  this.dnsMode_ = newDnsMode;
  this.render();
};

/**
 * @param {Array} tableContents
 */
NetSimDnsTable.prototype.setDnsTableContents = function (tableContents) {
  this.addressTableData_ = tableContents;
  this.render();
};

},{"./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimDnsTable.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsTable.html.ejs"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsTable.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
var DnsMode = require('./NetSimConstants').DnsMode;
; buf.push('\n<div class="netsim-dns-table">\n  <h1>My Network</h1>\n  <table>\n    <thead>\n    <tr>\n      <th>Hostname</th>\n      <th>Address</th>\n    </tr>\n    </thead>\n    <tbody>\n    ');14;
    tableData.forEach(function (row) {
      var displayHostname = row.hostname;
      var displayAddress = '';
      var rowClasses = [];

      if (dnsMode === DnsMode.NONE || row.isDnsNode || row.isLocal) {
        displayAddress = row.address;
      }

      if (row.isLocal) {
        displayHostname += " (Me)";
        rowClasses.push('local-node');
      }

      if (row.isDnsNode && dnsMode !== DnsMode.NONE) {
        displayHostname += " (DNS)";
        rowClasses.push('dns-node');
      }
      ; buf.push('\n        <tr class="', escape((34,  rowClasses.join(' ') )), '">\n          <td>', escape((35,  displayHostname )), '</td>\n          <td>', escape((36,  displayAddress )), '</td>\n        </tr>\n      ');38;
    });
    ; buf.push('\n    </tbody>\n  </table>\n</div>'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsTab.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('<div class="netsim-dns-tab">\n  ');2; if (level.showDnsModeControl) { ; buf.push('\n  <div class="dns_mode"></div>\n  ');4; } ; buf.push('\n  <div class="dns_manual_control"></div>\n  <div class="dns_table"></div>\n  <div class="dns-notes">\n    <h1>Notes</h1>\n    <div>\n      <textarea></textarea>\n    </div>\n  </div>\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsModeControl.js":[function(require,module,exports){
/**
 * @overview UI component used to select a DNS mode at runtime.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var markup = require('./NetSimDnsModeControl.html.ejs');
var DnsMode = require('./NetSimConstants').DnsMode;

/**
 * Generator and controller for DNS mode selector
 * @param {jQuery} rootDiv
 * @param {function} dnsModeChangeCallback
 * @constructor
 */
var NetSimDnsModeControl = module.exports = function (rootDiv, dnsModeChangeCallback) {
  /**
   * Component root, which we fill whenever we call render()
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = rootDiv;

  /**
   * @type {function}
   * @private
   */
  this.dnsModeChangeCallback_ = dnsModeChangeCallback;

  /**
   * Set of all DNS mode radio buttons
   * @type {jQuery}
   * @private
   */
  this.dnsModeRadios_ = null;

  /**
   * Internal state: Current DNS mode.
   * @type {DnsMode}
   * @private
   */
  this.currentDnsMode_ = DnsMode.NONE;

  this.render();
};

/**
 * Fill the root div with new elements reflecting the current state
 */
NetSimDnsModeControl.prototype.render = function () {
  var renderedMarkup = $(markup({}));
  this.rootDiv_.html(renderedMarkup);

  this.dnsModeRadios_ = this.rootDiv_.find('input[type="radio"][name="dns_mode"]');
  this.dnsModeRadios_.change(this.onDnsModeChange_.bind(this));
  this.setDnsMode(this.currentDnsMode_);
};

/**
 * Handler for a new radio button being selected.
 * @private
 */
NetSimDnsModeControl.prototype.onDnsModeChange_ = function () {
  var newDnsMode = this.dnsModeRadios_.filter(':checked').val();
  this.dnsModeChangeCallback_(newDnsMode);
};

/**
 * @param {DnsMode} newDnsMode
 */
NetSimDnsModeControl.prototype.setDnsMode = function (newDnsMode) {
  this.currentDnsMode_ = newDnsMode;
  this.dnsModeRadios_.filter('[value="' + newDnsMode + '"]').prop('checked', true);
};

},{"./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimDnsModeControl.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsModeControl.html.ejs"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsModeControl.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
  var DnsMode = require('./NetSimConstants').DnsMode;
  var i18n = require('./locale');

  /**
   * @param {exports.DnsMode} mode
   * @param {string} label
   */
  function makeRadio(mode, label) {
    ; buf.push('\n    <div class="dns_mode_', escape((11,  mode )), '">\n      <input id="dns_mode_', escape((12,  mode )), '"\n                   type="radio"\n                   name="dns_mode"\n                   value="', escape((15,  mode )), '" />\n      <label for="dns_mode_', escape((16,  mode )), '">', escape((16,  label )), '</label>\n    </div>\n    ');18;
  }
; buf.push('\n<div class="dns-mode-control">\n  <h1>', escape((22,  i18n.dnsMode() )), '</h1>\n  ');23; makeRadio(DnsMode.NONE, i18n.dnsMode_NONE()); ; buf.push('\n  ');24; makeRadio(DnsMode.MANUAL, i18n.dnsMode_MANUAL()); ; buf.push('\n  ');25; makeRadio(DnsMode.AUTOMATIC, i18n.dnsMode_AUTOMATIC()); ; buf.push('\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsManualControl.js":[function(require,module,exports){
/**
 * @overview UI button used become the current DNS node in manual DNS mode.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var markup = require('./NetSimDnsManualControl.html.ejs');

/**
 * Generator and controller for DNS mode selector
 * @param {jQuery} rootDiv
 * @param {function} becomeDnsCallback
 * @constructor
 */
var NetSimDnsManualControl = module.exports = function (rootDiv, becomeDnsCallback) {
  /**
   * Component root, which we fill whenever we call render()
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = rootDiv;

  /**
   * @type {function}
   * @private
   */
  this.becomeDnsCallback_ = becomeDnsCallback;

  this.render();
};

/**
 * Fill the root div with new elements reflecting the current state
 */
NetSimDnsManualControl.prototype.render = function () {
  var renderedMarkup = $(markup({}));
  this.rootDiv_.html(renderedMarkup);
  this.rootDiv_.find('input[type="button"]').click(this.onBecomeDnsButtonClick_.bind(this));
};

/**
 * Handler for button click.
 * @private
 */
NetSimDnsManualControl.prototype.onBecomeDnsButtonClick_ = function () {
  this.becomeDnsCallback_();
};

/**
 * @param {boolean} isDnsNode
 */
NetSimDnsManualControl.prototype.setIsDnsNode = function (isDnsNode) {
  this.rootDiv_.find('input[type="button"]').attr('disabled', isDnsNode);
};

},{"./NetSimDnsManualControl.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsManualControl.html.ejs"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimDnsManualControl.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('<div class="netsim_dns_manual_control">\n  <h1>Manual Control</h1>\n  <input id="become_dns_button" type="button" value="Take over as DNS" />\n</div>'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimClientNode.js":[function(require,module,exports){
/**
 * @overview Simulated client node.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var utils = require('../utils');
var _ = utils.getLodash();
var i18n = require('./locale');
var NodeType = require('./NetSimConstants').NodeType;
var NetSimEntity = require('./NetSimEntity');
var NetSimNode = require('./NetSimNode');
var NetSimWire = require('./NetSimWire');

/**
 * Client model of simulated node
 *
 * Represents the client's view of a node that is controlled by a user client,
 * either by our own client or somebody else's.  Is a NetSimEntity, meaning
 * it wraps a row in the node table and provides functionality around it.
 *
 * You may be looking for NetSimLocalClientNode if you're trying to manipulate
 * your local client node.
 *
 * @param {!NetSimShard} shard
 * @param {Object} [clientRow] - Lobby row for this router.
 * @constructor
 * @augments NetSimNode
 */
var NetSimClientNode = module.exports = function (shard, clientRow) {
  NetSimNode.call(this, shard, clientRow);
};
NetSimClientNode.inherits(NetSimNode);

/** @inheritdoc */
NetSimClientNode.prototype.getNodeType = function () {
  return NodeType.CLIENT;
};

/** @inheritdoc */
NetSimClientNode.prototype.getStatus = function () {
  var outgoingWire = this.getOutgoingWire();
  if (!outgoingWire) {
    return i18n.notConnected();
  }

  // Get remote node for display name / hostname
  var cachedNodeRows = this.shard_.nodeTable.readAll();
  var remoteNodeRow = _.find(cachedNodeRows, function (nodeRow) {
    return nodeRow.id === outgoingWire.remoteNodeID;
  });

  var remoteNodeName = i18n.unknownNode();
  if (remoteNodeRow) {
    remoteNodeName = remoteNodeRow.name;
  }

  // Check for connection state
  var mutualConnection;
  if (remoteNodeRow && remoteNodeRow.type === NodeType.ROUTER) {
    mutualConnection = true;
  } else {
    var cachedWireRows = this.shard_.wireTable.readAll();
    mutualConnection = cachedWireRows.some(function (wireRow) {
      return wireRow.localNodeID === outgoingWire.remoteNodeID && wireRow.remoteNodeID === outgoingWire.localNodeID;
    });
  }

  if (mutualConnection) {
    return i18n.connectedToNodeName({ nodeName: remoteNodeName });
  }
  return i18n.connectingToNodeName({ nodeName: remoteNodeName });
};

/** @inheritdoc */
NetSimClientNode.prototype.isFull = function () {
  var outgoingWire = this.getOutgoingWire();
  if (!outgoingWire) {
    return false;
  }
  var cachedWireRows = this.shard_.wireTable.readAll();
  return cachedWireRows.some(function (wireRow) {
    return wireRow.localNodeID === outgoingWire.remoteNodeID && wireRow.remoteNodeID === outgoingWire.localNodeID;
  });
};

/**
 * Determine what address has been assigned to this client on its outgoing
 * wire.
 * @returns {string|undefined}
 */
NetSimClientNode.prototype.getAddress = function () {
  var wire = this.getOutgoingWire();
  if (!wire) {
    return undefined;
  }
  return wire.localAddress;
};

/**
 * Based on cached wire data, retrieve this node's outgoing wire.
 * @returns {NetSimWire|null} null if wire does not exist.
 */
NetSimClientNode.prototype.getOutgoingWire = function () {
  var cachedWireRows = this.shard_.wireTable.readAll();
  var outgoingWireRow = _.find(cachedWireRows, function (wireRow) {
    return wireRow.localNodeID === this.entityID;
  }, this);
  if (outgoingWireRow) {
    return new NetSimWire(this.shard_, outgoingWireRow);
  }
  return null;
};

/**
 * Static async retrieval method.  See NetSimEntity.get().
 * @param {!number} nodeID - The row ID for the entity you'd like to find.
 * @param {!NetSimShard} shard
 * @param {!NodeStyleCallback} onComplete - Method that will be given the
 *        found entity, or null if entity search failed.
 */
NetSimClientNode.get = function (nodeID, shard, onComplete) {
  NetSimEntity.get(NetSimClientNode, nodeID, shard, onComplete);
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimEntity":"/home/ubuntu/staging/apps/build/js/netsim/NetSimEntity.js","./NetSimNode":"/home/ubuntu/staging/apps/build/js/netsim/NetSimNode.js","./NetSimWire":"/home/ubuntu/staging/apps/build/js/netsim/NetSimWire.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimNode.js":[function(require,module,exports){
/**
 * @overview A base class for all simulation node entities.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

require('../utils');
var i18n = require('./locale');
var NetSimEntity = require('./NetSimEntity');
var NetSimWire = require('./NetSimWire');

/**
 * Client model of simulated network entity, which lives
 * in a shard table.
 *
 * Wraps the entity row with helper methods for examining and maintaining
 * the entity state in shared storage.
 *
 * @param {!NetSimShard} shard
 * @param {Object} [nodeRow] JSON row from table.
 * @constructor
 * @augments NetSimEntity
 */
var NetSimNode = module.exports = function (shard, nodeRow) {
  nodeRow = nodeRow !== undefined ? nodeRow : {};
  NetSimEntity.call(this, shard, nodeRow);

  /**
   * @type {string}
   * @private
   */
  this.displayName_ = nodeRow.name;
};
NetSimNode.inherits(NetSimEntity);

/**
 * Get shared table for nodes
 * @returns {SharedTable}
 * @private
 */
NetSimNode.prototype.getTable = function () {
  return this.shard_.nodeTable;
};

/** Build table row for this node */
NetSimNode.prototype.buildRow = function () {
  return {
    type: this.getNodeType(),
    name: this.getDisplayName()
  };
};

/**
 * Get node's display name, which is stored in table.
 * @returns {string}
 */
NetSimNode.prototype.getDisplayName = function () {
  return this.displayName_ ? this.displayName_ : i18n.defaultNodeName();
};

/**
 * Get node's short display name, which is the same as the display name
 * but truncated to the first word if it's over a certain length.
 * @returns {string}
 */
NetSimNode.prototype.getShortDisplayName = function () {
  // If the name is longer than ten characters (longer than "Router 999")
  // then only show up to the first whitespace.
  var shortName = this.getDisplayName();
  if (shortName.length > 10) {
    shortName = shortName.split(/\s/)[0];
  }
  return shortName;
};

/**
 * Get node's hostname, a modified version of its display name.
 * @returns {string}
 */
NetSimNode.prototype.getHostname = function () {
  // Strip everything that's not a word-character or a digit from the display
  // name, then append the node ID so that hostnames are more likely to
  // be unique.
  return this.getShortDisplayName().replace(/[^\w\d]/g, '').toLowerCase() + this.entityID;
};

/**
 * Get node's type.
 * @returns {NodeType}
 */
NetSimNode.prototype.getNodeType = function () {
  throw new Error('getNodeType method is not implemented');
};

/**
 * Get localized description of node status.
 * @returns {string}
 */
NetSimNode.prototype.getStatus = function () {
  throw new Error('getStatus method is not implemented');
};

/**
 * Whether or not this node can accept any more connections
 * @returns {boolean}
 */
NetSimNode.prototype.isFull = function () {
  throw new Error('isFull method is not implemented');
};

/**
 * Establish a connection between this node and another node,
 * by creating a wire between them, and verifying that the remote node
 * can accept the connection.
 * When finished, calls onComplete({the new wire})
 * On failure, calls onComplete(null)
 * @param {!NetSimNode} otherNode
 * @param {NodeStyleCallback} [onComplete]
 */
NetSimNode.prototype.connectToNode = function (otherNode, onComplete) {
  onComplete = onComplete || function () {};

  var self = this;
  NetSimWire.create(this.shard_, this.makeWireRowForConnectingTo(otherNode), function (err, wire) {
    if (err) {
      onComplete(err, null);
      return;
    }

    otherNode.acceptConnection(self, function (err, isAccepted) {
      if (err || !isAccepted) {
        wire.destroy(function () {
          onComplete(new Error('Connection rejected: ' + err.message), null);
        });
        return;
      }

      onComplete(null, wire);
    });
  });
};

/**
 * Create an appropriate initial wire row for connecting to the given node.
 * @param {!NetSimNode} otherNode
 * @returns {WireRow}
 */
NetSimNode.prototype.makeWireRowForConnectingTo = function (otherNode) {
  return {
    localNodeID: this.entityID,
    remoteNodeID: otherNode.entityID
  };
};

/**
 * Called when another node establishes a connection to this one, giving this
 * node a chance to reject the connection.
 * @param {!NetSimNode} otherNode attempting to connect to this one
 * @param {!NodeStyleCallback} onComplete response method - should call with TRUE
 *        if connection is allowed, FALSE if connection is rejected.
 */
NetSimNode.prototype.acceptConnection = function (otherNode, onComplete) {
  onComplete(null, true);
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimEntity":"/home/ubuntu/staging/apps/build/js/netsim/NetSimEntity.js","./NetSimWire":"/home/ubuntu/staging/apps/build/js/netsim/NetSimWire.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimWire.js":[function(require,module,exports){
/**
 * @overview Simulation Entity: A connection between two nodes and related
 *           metadata.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

require('../utils');
var NetSimEntity = require('./NetSimEntity');
var ArgumentUtils = require('./ArgumentUtils');

/**
 * @typedef {Object} WireRow
 * @property {!number} localNodeID
 * @property {!number} remoteNodeID
 * @property {string} localAddress
 * @property {string} remoteAddress
 * @property {string} localHostname
 * @property {string} remoteHostname
 */

/**
 * Local controller for a simulated connection between nodes,
 * which is stored in the wire table on the shard.  The controller can
 * be initialized with the JSON row from the table, effectively wrapping that
 * data in helpful methods.
 *
 * @param {!NetSimShard} shard - The shard where this wire lives.
 * @param {WireRow} [wireRow] - A row out of the _wire table on the shard.
 *        If provided, will initialize this wire with the given data.  If not,
 *        this wire will initialize to default values.
 * @constructor
 * @augments NetSimEntity
 */
var NetSimWire = module.exports = function (shard, wireRow) {
  wireRow = wireRow !== undefined ? wireRow : {};
  NetSimEntity.call(this, shard, wireRow);

  /**
   * Connected node row IDs within the _lobby table
   * @type {number}
   */
  this.localNodeID = wireRow.localNodeID;
  /** @type {number} */
  this.remoteNodeID = wireRow.remoteNodeID;

  /**
   * Assigned local addresses for the ends of this wire.
   * @type {string}
   */
  this.localAddress = wireRow.localAddress;
  /** @type {string} */
  this.remoteAddress = wireRow.remoteAddress;

  /**
   * Display hostnames for the ends of this wire.
   * Generally, each endpoint should set its own hostname.
   * @type {string}
   */
  this.localHostname = wireRow.localHostname;
  /** @type {string} */
  this.remoteHostname = wireRow.remoteHostname;
};
NetSimWire.inherits(NetSimEntity);

/**
 * Static async creation method.  See NetSimEntity.create().
 * @param {!NetSimShard} shard
 * @param {!WireRow} initialRow
 * @param {!NodeStyleCallback} onComplete - Method that will be given the
 *        created entity, or null if entity creation failed.
 */
NetSimWire.create = function (shard, initialRow, onComplete) {
  ArgumentUtils.validateRequired(initialRow, "initialRow");
  ArgumentUtils.validateRequired(initialRow.localNodeID, "localNodeID", ArgumentUtils.isPositiveNoninfiniteNumber);
  ArgumentUtils.validateRequired(initialRow.remoteNodeID, "remoteNodeID", ArgumentUtils.isPositiveNoninfiniteNumber);
  var entity = new NetSimWire(shard, initialRow);
  entity.getTable().create(entity.buildRow(), function (err, row) {
    if (err) {
      onComplete(err, null);
      return;
    }
    onComplete(null, new NetSimWire(shard, row));
  });
};

/**
 * Helper that gets the wires table for the configured shard.
 * @returns {NetSimTable}
 */
NetSimWire.prototype.getTable = function () {
  return this.shard_.wireTable;
};

/**
 * Build own row for the wire table
 * @returns {WireRow}
 */
NetSimWire.prototype.buildRow = function () {
  return {
    localNodeID: this.localNodeID,
    remoteNodeID: this.remoteNodeID,
    localAddress: this.localAddress,
    remoteAddress: this.remoteAddress,
    localHostname: this.localHostname,
    remoteHostname: this.remoteHostname
  };
};

/**
 * @param {MessageRow} messageRow
 * @returns {boolean} TRUE if the given message is travelling between the nodes
 *          that this wire connects, in the wire's direction.
 */
NetSimWire.prototype.isMessageRowOnDuplexWire = function (messageRow) {
  return this.localNodeID === messageRow.fromNodeID && this.remoteNodeID === messageRow.toNodeID;
};

/**
 * @param {MessageRow} messageRow
 * @returns {boolean} TRUE if the given message is travelling between the nodes
 *          that this wire connects, in either direction.
 */
NetSimWire.prototype.isMessageRowOnSimplexWire = function (messageRow) {
  var onWire = this.isMessageRowOnDuplexWire(messageRow);
  var onReverseWire = this.localNodeID === messageRow.toNodeID && this.remoteNodeID === messageRow.fromNodeID;
  return onWire || onReverseWire;
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./ArgumentUtils":"/home/ubuntu/staging/apps/build/js/netsim/ArgumentUtils.js","./NetSimEntity":"/home/ubuntu/staging/apps/build/js/netsim/NetSimEntity.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimEntity.js":[function(require,module,exports){
/**
 * @overview base class for all simulation entities.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

/**
 * Client model of simulated network entity, which lives in a shard table.
 *
 * Wraps the entity row with helper methods for examining and maintaining
 * the entity state in shared storage.
 *
 * @param {!NetSimShard} shard
 * @param {Object} [entityRow] JSON row from table.
 * @constructor
 */
var NetSimEntity = module.exports = function (shard, entityRow) {
  if (entityRow === undefined) {
    entityRow = {};
  }

  /**
   * @type {NetSimShard}
   * @protected
   */
  this.shard_ = shard;

  /**
   * Node's row ID within the _lobby table.  Unique within instance.
   * @type {number}
   */
  this.entityID = entityRow.id;

  /**
   * Node's UUID assigned when it was initially inserted into the table.
   * @type {string}
   */
  this.uuid = entityRow.uuid;
};

/**
 * Static async creation method.  Creates a new entity on the given shard,
 * and then calls the callback with a local controller for the new entity.
 * @param {!function} EntityType - The constructor for the entity type you want
 *        to create.
 * @param {!NetSimShard} shard
 * @param {!NodeStyleCallback} onComplete - Method that will be given the
 *        created entity, or null if entity creation failed.
 */
NetSimEntity.create = function (EntityType, shard, onComplete) {
  var entity = new EntityType(shard);
  entity.getTable().create(entity.buildRow(), function (err, row) {
    if (err) {
      onComplete(err, null);
    } else {
      onComplete(null, new EntityType(shard, row));
    }
  });
};

/**
 * Static async retrieval method.  Searches for a new entity on the given
 * shard, and then calls the callback with a local controller for the
 * found entity.
 * @param {!function} EntityType - The constructor for the entity type you want
 *        to find.
 * @param {!number} entityID - The row ID for the entity you'd like to find.
 * @param {!NetSimShard} shard
 * @param {!NodeStyleCallback} onComplete - Method that will be given the
 *        found entity, or null if entity search failed.
 */
NetSimEntity.get = function (EntityType, entityID, shard, onComplete) {
  var entity = new EntityType(shard);
  entity.getTable().read(entityID, function (err, row) {
    if (err) {
      onComplete(err, null);
    } else {
      onComplete(err, new EntityType(shard, row));
    }
  });
};

/**
 * Push entity state into remote storage.
 * @param {NodeStyleCallback} [onComplete] - Optional completion callback.
 */
NetSimEntity.prototype.update = function (onComplete) {
  onComplete = onComplete || function () {};

  this.getTable().update(this.entityID, this.buildRow(), onComplete);
};

/**
 * Remove entity from remote storage.
 * @param {NodeStyleCallback} [onComplete] - Optional completion callback
 */
NetSimEntity.prototype.destroy = function (onComplete) {
  onComplete = onComplete || function () {};

  this.getTable()['delete'](this.entityID, onComplete);
};

/**
 * Remove entity from remote storage, using a synchronous call.
 * For use when navigating away from the page; otherwise, async version
 * is preferred.
 * @returns {Error|null} error if entity delete fails
 */
NetSimEntity.prototype.synchronousDestroy = function () {
  return this.getTable().synchronousDelete(this.entityID);
};

/** Get storage table for this entity type. */
NetSimEntity.prototype.getTable = function () {
  // This method should be implemented by a child class.
  throw new Error('Method getTable is not implemented.');
};

/** Construct table row for this entity. */
NetSimEntity.prototype.buildRow = function () {
  return {};
};

/**
 * Destroys all provided entities (from remote storage) asynchronously, and
 * calls onComplete when all entities have been destroyed and/or an error occurs.
 * @param {NetSimEntity[]} entities
 * @param {!NodeStyleCallback} onComplete
 * @throws {Error} if all passed entities do not belong to the same table.
 */
NetSimEntity.destroyEntities = function (entities, onComplete) {
  if (entities.length === 0) {
    onComplete(null, true);
    return;
  }

  var table = entities[0].getTable();
  var entityIDs = entities.map(function (entity) {
    if (entity.getTable() !== table) {
      throw new Error("destroyEntities requires all entities to be in the same table");
    }
    return entity.entityID;
  });

  table.deleteMany(entityIDs, onComplete);
};

},{}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimChunkSizeControl.js":[function(require,module,exports){
/**
 * @overview UI slider used to change the local device's chunk size, which
 *           is used when interpreting binary to other formats.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var i18n = require('./locale');
var NetSimSlider = require('./NetSimSlider');

/**
 * Generator and controller for chunk size slider/selector
 * @param {jQuery} rootDiv
 * @param {function} chunkSizeChangeCallback
 * @constructor
 * @augments NetSimSlider
 */
var NetSimChunkSizeControl = module.exports = function (rootDiv, chunkSizeChangeCallback) {
  NetSimSlider.call(this, rootDiv, {
    onChange: chunkSizeChangeCallback,
    min: 1,
    max: 32
  });

  // Auto-render, unlike our parent class
  this.render();
};
NetSimChunkSizeControl.inherits(NetSimSlider);

/**
 * Converts an external-facing numeric value into a localized string
 * representation of that value.
 * @param {number} val - numeric value of the control
 * @returns {string} - localized string representation of value
 * @override
 */
NetSimChunkSizeControl.prototype.valueToLabel = function (val) {
  return i18n.numBitsPerChunk({
    numBits: val
  });
};

/**
 * Alternate label converter, used for slider end labels.
 * @param {number} val - numeric value of the control
 * @returns {string} - localized string representation of value
 * @override
 */
NetSimChunkSizeControl.prototype.valueToShortLabel = function (val) {
  return val.toString();
};

},{"./NetSimSlider":"/home/ubuntu/staging/apps/build/js/netsim/NetSimSlider.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimBitRateControl.js":[function(require,module,exports){
/**
 * @overview UI slider used to change the local device's bitrate.
 *           Differs from the pulse rate slider in scale and units.
 * @see NetSimPulseRateControl
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

// Utils required only for Function.prototype.inherits()
require('../utils');
var NetSimUtils = require('./NetSimUtils');
var NetSimSlider = require('./NetSimSlider');

/**
 * Generator and controller for packet size slider/selector
 * @param {jQuery} rootDiv
 * @param {number} initialValue - in bits per second
 * @param {function} sliderChangeCallback
 * @constructor
 */
var NetSimBitRateControl = module.exports = function (rootDiv, initialValue, sliderChangeCallback) {
  NetSimSlider.call(this, rootDiv, {
    onChange: sliderChangeCallback,
    value: initialValue,
    min: 1,
    max: 20,
    upperBoundInfinite: true
  });

  // Auto-render, unlike our base class
  this.render();
};
NetSimBitRateControl.inherits(NetSimSlider);

/**
 * Converts a numeric rate value (in bits pers second) into a
 * localized string representation of that value.
 * @param {number} val - numeric value of the control
 * @returns {string} - localized string representation of value
 * @override
 */
NetSimBitRateControl.prototype.valueToLabel = function (val) {
  return NetSimUtils.bitrateToLocalizedRoundedBitrate(val);
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimSlider":"/home/ubuntu/staging/apps/build/js/netsim/NetSimSlider.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimBitLogPanel.js":[function(require,module,exports){
/**
 * @overview UI component, a log panel (used as "Sent Bits" and "Received Bits")
 *           that is used in the single-bit-sending configurations of the simulator.
 *
 * @see INetSimLogPanel for the interface implemented here.
 * @see NetSimLogPanel for the component used in packet-sending mode.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

require('../utils'); // For Function.prototype.inherits()
var i18n = require('./locale');
var markup = require('./NetSimBitLogPanel.html.ejs');
var NetSimPanel = require('./NetSimPanel');
var NetSimEncodingControl = require('./NetSimEncodingControl');
var NetSimGlobals = require('./NetSimGlobals');

var logger = require('./NetSimLogger').getSingleton();

/**
 * Generator and controller for bit-log, which receives bits one at a time.
 * @param {jQuery} rootDiv
 * @param {Object} options
 * @param {string} options.logTitle
 * @param {boolean} [options.isMinimized] defaults to FALSE
 * @param {boolean} [options.showReadWireButton] defaults to FALSE
 * @param {NetSim} options.netsim
 * @constructor
 * @augments NetSimPanel
 * @implements INetSimLogPanel
 */
var NetSimBitLogPanel = module.exports = function (rootDiv, options) {
  /**
   * The current binary contents of the log panel
   * @type {string}
   * @private
   */
  this.binary_ = '';

  /**
   * A message encoding (display) setting.
   * @type {string}
   * @private
   */
  this.encodings_ = [];

  /**
   * Current chunk size (bytesize) for interpreting binary in the log.
   * @type {number}
   * @private
   */
  this.chunkSize_ = 8;

  /**
   * Localized panel title
   * @type {string}
   * @private
   */
  this.logTitle_ = options.logTitle;

  /**
   * Reference to the top-level NetSim controller for reading bits and
   * triggering animations.
   * @type {NetSim}
   * @private
   */
  this.netsim_ = options.netsim;

  /**
   * Whether this log should have a "Read Wire" button.
   * @type {boolean}
   * @private
   */
  this.showReadWireButton_ = options.showReadWireButton;

  /**
   * How tall the overall panel should be when it's open (in pixels).
   * Set by a dynamic resize system.
   * @type {number}
   * @private
   */
  this.openHeight_ = 0;

  // Initial render
  NetSimPanel.call(this, rootDiv, {
    className: 'netsim-log-panel',
    panelTitle: options.logTitle,
    beginMinimized: options.isMinimized
  });
};
NetSimBitLogPanel.inherits(NetSimPanel);

NetSimBitLogPanel.prototype.render = function () {
  // Create boilerplate panel markup
  NetSimBitLogPanel.superPrototype.render.call(this);

  // Add our own content markup
  var newMarkup = $(markup({
    binary: this.binary_,
    enabledEncodings: this.encodings_,
    chunkSize: this.chunkSize_,
    showReadWireButton: this.showReadWireButton_
  }));
  this.getBody().html(newMarkup);
  NetSimEncodingControl.hideRowsByEncoding(this.getBody(), this.encodings_);

  this.getBody().find('#read-wire-button').click(this.onReceiveButtonPress_.bind(this));

  // Add a clear button to the panel header
  this.addButton(i18n.clear(), this.onClearButtonPress_.bind(this));

  // Snap back to the dynamic size we've been given.
  this.sizeToOpenHeight_();
};

/**
 * Remove all packets from the log, resetting its state.
 * @private
 */
NetSimBitLogPanel.prototype.onClearButtonPress_ = function () {
  this.binary_ = '';
  this.render();
};

/**
 * Asynchronously fetch the wire state from remote storage, and log it.
 * @param {Event} jQueryEvent
 * @private
 */
NetSimBitLogPanel.prototype.onReceiveButtonPress_ = function (jQueryEvent) {
  var thisButton = $(jQueryEvent.target);
  if (thisButton.is('[disabled]')) {
    return;
  }

  thisButton.attr('disabled', 'disabled');
  this.netsim_.receiveBit((function (err, message) {
    if (err) {
      logger.warn("Error reading wire state: " + err.message);
      thisButton.removeAttr('disabled');
      return;
    }

    // A successful fetch with a null message means there's nothing
    // on the wire.  We should log its default state: off/zero
    var receivedBit = '0';
    if (message) {
      receivedBit = message.payload;
    }

    this.log(receivedBit);
    this.netsim_.animateReadWireState(receivedBit);
    thisButton.removeAttr('disabled');
  }).bind(this));
};

/**
 * Put a message into the log.
 * @param {string} binaryBit
 */
NetSimBitLogPanel.prototype.log = function (binaryBit) {
  this.binary_ += binaryBit.toString();
  this.render();
};

/**
 * Show or hide parts of the send UI based on the currently selected encoding
 * mode.
 * @param {EncodingType[]} newEncodings
 */
NetSimBitLogPanel.prototype.setEncodings = function (newEncodings) {
  this.encodings_ = newEncodings;
  this.render();
};

/**
 * Change how binary input in interpreted and formatted in the log.
 * @param {number} newChunkSize
 */
NetSimBitLogPanel.prototype.setChunkSize = function (newChunkSize) {
  this.chunkSize_ = newChunkSize;
  this.render();
};

/**
 * Sets the vertical space that this log panel should consume (including margins)
 * @param {number} heightPixels
 */
NetSimBitLogPanel.prototype.setHeight = function (heightPixels) {
  this.openHeight_ = heightPixels;
  this.sizeToOpenHeight_();
};

/**
 * Scale the scroll area inside the panel so that the whole panel
 * is the desired height.
 * @private
 */
NetSimBitLogPanel.prototype.sizeToOpenHeight_ = function () {
  var root = this.getRoot().find('.netsim-panel');
  var panelHeader = root.find('h1');
  var panelBody = root.find('.panel-body');
  var scrollArea = root.find('.scroll-area');

  var panelMargins = parseFloat(root.css('margin-top')) + parseFloat(root.css('margin-bottom'));
  var headerHeight = panelHeader.outerHeight(true);
  var panelBorders = parseFloat(panelBody.css('border-top-width')) + parseFloat(panelBody.css('border-bottom-width'));
  var scrollMargins = parseFloat(scrollArea.css('margin-top')) + parseFloat(scrollArea.css('margin-bottom'));

  // We set the panel height by fixing the size of its inner scrollable
  // area.
  var newScrollViewportHeight = this.openHeight_ - (panelMargins + headerHeight + panelBorders + scrollMargins);
  scrollArea.height(Math.floor(newScrollViewportHeight));
};

/**
 * @returns {number} vertical space that panel currently consumes (including
 * margins) in pixels.
 */
NetSimBitLogPanel.prototype.getHeight = function () {
  return this.getRoot().find('.netsim-panel').outerHeight(true);
};

/**
 * After toggling panel visibility, trigger a layout update so send/log panel
 * space is shared correctly.
 * @private
 * @override
 */
NetSimBitLogPanel.prototype.onMinimizerClick_ = function () {
  NetSimBitLogPanel.superPrototype.onMinimizerClick_.call(this);
  NetSimGlobals.updateLayout();
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimBitLogPanel.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimBitLogPanel.html.ejs","./NetSimEncodingControl":"/home/ubuntu/staging/apps/build/js/netsim/NetSimEncodingControl.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimLogger":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogger.js","./NetSimPanel":"/home/ubuntu/staging/apps/build/js/netsim/NetSimPanel.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimPanel.js":[function(require,module,exports){
/**
 * @overview base class for all "panels" (visual boxes) in the NetSim
 *           interface, provides some common expand/collapse functionality.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var utils = require('../utils');
var markup = require('./NetSimPanel.html.ejs');
var ArgumentUtils = require('./ArgumentUtils');

/**
 * Generator and controller for a NetSim Panel, a single section on the
 * page which may be collapsible.
 * @param {jQuery} rootDiv - Element within which the panel is recreated
 *        every time render() is called.  Will wipe out contents of this
 *        element, but not the element itself.
 * @param {Object} [options]
 * @param {string} [options.className] - an additional class to be appended to
 *        the panel's root (one layer inside rootDiv) for style rules.
 *        Defaults to no class, so only the 'netsim-panel' class will be used.
 * @param {string} [options.panelTitle] - Localized initial panel title.
 *        Defaults to empty string.
 * @param {boolean} [options.userToggleable] - Whether this panel can be minimized
 *        (closed) by clicking on the title. Defaults to TRUE.
 * @param {boolean} [options.beginMinimized] - Whether this panel should be
 *        minimized (closed) when it is initially created.  Defaults to FALSE.
 * @constructor
 */
var NetSimPanel = module.exports = function (rootDiv, options) {
  /**
   * Unique instance ID for this panel, in case we have several
   * of them on a page.
   * @type {number}
   * @private
   */
  this.instanceID_ = NetSimPanel.uniqueIDCounter;
  NetSimPanel.uniqueIDCounter++;

  /**
   * Component root, which we fill whenever we call render()
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = rootDiv;

  /**
   * An additional className to be appended to the panel's root (one layer
   * inside rootDiv), for style rules.
   * @type {string}
   * @private
   */
  this.className_ = utils.valueOr(options.className, '');

  /**
   * Panel title, displayed in header.
   * @type {string}
   * @private
   */
  this.panelTitle_ = utils.valueOr(options.panelTitle, '');

  /**
   * Whether this panel can be minimized (closed) by clicking on the title.
   * @type {boolean}
   * @private
   */
  this.userToggleable_ = utils.valueOr(options.userToggleable, true);

  /**
   * Whether the component is minimized, for consistent
   * state across re-renders.
   * @type {boolean}
   * @private
   */
  this.isMinimized_ = utils.valueOr(options.beginMinimized, false);

  // Initial render
  this.render();
};

/**
 * Static counter used to generate/uniquely identify different instances
 * of this log widget on the page.
 * @type {number}
 */
NetSimPanel.uniqueIDCounter = 0;

/**
 * Rebuild the panel contents inside of the rootDiv
 */
NetSimPanel.prototype.render = function () {
  var newMarkup = $(markup({
    instanceID: this.instanceID_,
    className: this.className_,
    panelTitle: this.panelTitle_,
    userToggleable: this.userToggleable_
  }));
  this.rootDiv_.html(newMarkup);

  if (this.userToggleable_) {
    this.rootDiv_.find('.minimizer').click(this.onMinimizerClick_.bind(this));
  }
  this.setMinimized(this.isMinimized_);
};

/**
 * @returns {jQuery} a handle on the root element for this panel
 */
NetSimPanel.prototype.getRoot = function () {
  return this.rootDiv_;
};

/**
 * Set panel title.
 * @param {string} newTitle - Localized panel title.
 */
NetSimPanel.prototype.setPanelTitle = function (newTitle) {
  this.panelTitle_ = newTitle;
  this.rootDiv_.find('.title-text').text(newTitle);
};

/**
 * Toggle whether this panel is minimized.
 * @private
 */
NetSimPanel.prototype.onMinimizerClick_ = function () {
  this.setMinimized(!this.isMinimized_);
};

/**
 * @param {boolean} becomeMinimized
 */
NetSimPanel.prototype.setMinimized = function (becomeMinimized) {
  var panelDiv = this.rootDiv_.find('.netsim-panel');
  var minimizer = panelDiv.find('.minimizer');
  if (becomeMinimized) {
    panelDiv.addClass('minimized');
    minimizer.find('.fa').addClass('fa-plus-square').removeClass('fa-minus-square');
  } else {
    panelDiv.removeClass('minimized');
    minimizer.find('.fa').addClass('fa-minus-square').removeClass('fa-plus-square');
  }
  this.isMinimized_ = becomeMinimized;
};

/**
 * Whether this panel is currently minimized (showing only its header) or not.
 * @returns {boolean}
 */
NetSimPanel.prototype.isMinimized = function () {
  return this.isMinimized_;
};

/**
 * Add a button to the right end of the panel header.
 * @param {string} buttonText
 * @param {function} pressCallback
 * @param {Object} [options]
 * @param {boolean} [options.secondary] - default TRUE, secondary button style
 * @param {string[]} [options.classes] - default [], additional classes on the
 *        button element.
 */
NetSimPanel.prototype.addButton = function (buttonText, pressCallback, options) {
  options = ArgumentUtils.extendOptionsObject(options || {});

  var button = $('<span>').addClass('netsim-button').html(buttonText).click(pressCallback);

  if (options.get('secondary', ArgumentUtils.isBoolean, true)) {
    button.addClass('secondary');
  }

  options.get('classes', ArgumentUtils.isArrayOfStrings(), []).forEach(function (className) {
    button.addClass(className);
  });

  button.appendTo(this.rootDiv_.find('.panel-controls'));
};

/**
 * @returns {jQuery} the body Div of the panel, for panel content.
 */
NetSimPanel.prototype.getBody = function () {
  return this.rootDiv_.find('.panel-body');
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./ArgumentUtils":"/home/ubuntu/staging/apps/build/js/netsim/ArgumentUtils.js","./NetSimPanel.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimPanel.html.ejs"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimPanel.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('<div id="netsim-panel-', escape((1,  instanceID )), '"\n     class="netsim-panel ', escape((2,  className )), '">\n  <h1>\n    <div class="panel-controls"></div>\n    <div class="single-line-with-ellipsis pad-left');5; if (userToggleable) { ; buf.push(' minimizer');5; } ; buf.push('">\n      ');6; if (userToggleable) { ; buf.push('\n        <i class="fa fa-minus-square"></i>\n      ');8; } ; buf.push('\n      <span class="title-text">', escape((9,  panelTitle )), '</span>\n    </div>\n  </h1>\n  <div class="panel-body">\n  </div>\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimEncodingControl.js":[function(require,module,exports){
/**
 * @overview UI controller for set of radio buttons used to select display encodings.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var markup = require('./NetSimEncodingControl.html.ejs');
var EncodingType = require('./NetSimConstants').EncodingType;

/**
 * Generator and controller for message encoding selector: A dropdown that
 * controls whether messages are displayed in some combination of binary, hex,
 * decimal, ascii, etc.
 * @param {jQuery} rootDiv
 * @param {NetSimLevelConfiguration} levelConfig
 * @param {function} changeEncodingCallback
 * @constructor
 */
var NetSimEncodingControl = module.exports = function (rootDiv, levelConfig, changeEncodingCallback) {
  /**
   * Component root, which we fill whenever we call render()
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = rootDiv;

  /**
   * @type {NetSimLevelConfiguration}
   * @private
   */
  this.levelConfig_ = levelConfig;

  /**
   * @type {function}
   * @private
   */
  this.changeEncodingCallback_ = changeEncodingCallback;

  /**
   * @type {jQuery}
   * @private
   */
  this.checkboxes_ = null;

  // Initial render
  this.render();
};

/**
 * Fill the root div with new elements reflecting the current state
 */
NetSimEncodingControl.prototype.render = function () {
  var renderedMarkup = $(markup({
    level: this.levelConfig_
  }));
  this.rootDiv_.html(renderedMarkup);
  this.checkboxes_ = this.rootDiv_.find('input[type="checkbox"][name="encoding_checkboxes"]');
  this.checkboxes_.change(this.onCheckboxesChange_.bind(this));
};

/**
 * Send new selected encodings to registered callback on change.
 * @private
 */
NetSimEncodingControl.prototype.onCheckboxesChange_ = function () {
  var selectedEncodings = [];
  this.checkboxes_.filter(':checked').each(function (i, element) {
    selectedEncodings.push(element.value);
  });
  this.changeEncodingCallback_(selectedEncodings);
};

/**
 * Change selector value to the new provided value.
 * @param {EncodingType[]} newEncodings
 */
NetSimEncodingControl.prototype.setEncodings = function (newEncodings) {
  this.checkboxes_.each(function (i, element) {
    $(element).attr('checked', newEncodings.indexOf(element.value) > -1);
  });
};

/**
 * Generate a jQuery selector string that will get all rows that
 * have ANY of the provided classes.
 * @param {EncodingType[]} encodings
 * @returns {string}
 */
var makeEncodingRowSelector = function makeEncodingRowSelector(encodings) {
  return encodings.map(function (className) {
    return 'tr.' + className;
  }).join(', ');
};

/**
 * Static helper, shows/hides rows under provided element according to the given
 * encoding setting.
 * @param {jQuery} rootElement - root of elements to show/hide
 * @param {EncodingType[]} encodings - a message encoding setting
 */
NetSimEncodingControl.hideRowsByEncoding = function (rootElement, encodings) {
  var hiddenEncodings = [];
  for (var key in EncodingType) {
    if (EncodingType.hasOwnProperty(key) && encodings.indexOf(EncodingType[key]) === -1) {
      hiddenEncodings.push(EncodingType[key]);
    }
  }
  rootElement.find(makeEncodingRowSelector(encodings)).show();
  rootElement.find(makeEncodingRowSelector(hiddenEncodings)).hide();
};

/**
 * Static helper that converts a given array of encodings to an object
 * mapping each encoding to `true`. Used for more efficient
 * isEncodingEnabled checks
 * @param {EncodingType[]} encodings
 * @returns {Object.<EncodingType, boolean>}
 */
NetSimEncodingControl.encodingsAsHash = function (encodings) {
  return encodings.reduce(function (hash, encoding) {
    hash[encoding] = true;
    return hash;
  }, {});
};

},{"./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimEncodingControl.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimEncodingControl.html.ejs"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimEncodingControl.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
  var EncodingType = require('./NetSimConstants').EncodingType;
  var i18n = require('./locale');

  /**
   * @param {EncodingType} encodingType
   * @param {string} encodingLabel
   */
  function makeCheckbox(encodingType, encodingLabel) {
    var divClasses = ['encoding_checkboxes_' + encodingType];
    if (level.showEncodingControls.indexOf(encodingType) === -1) {
      divClasses.push('hidden-control');
    }
    ; buf.push('\n    <div class="', escape((15,  divClasses.join(' ') )), '">\n      <input type="checkbox"\n             name="encoding_checkboxes"\n             id="encoding_checkboxes_', escape((18,  encodingType )), '"\n             value="', escape((19,  encodingType )), '"\n          />\n      <label for="encoding_checkboxes_', escape((21,  encodingType )), '">', escape((21,  encodingLabel )), '</label>\n    </div>\n    ');23;
  }
; buf.push('\n<div class="netsim-encoding-selector">\n  <h1>', escape((27,  i18n.encoding() )), '</h1>\n  ');28; makeCheckbox(EncodingType.ASCII, i18n.ascii()); ; buf.push('\n  ');29; makeCheckbox(EncodingType.DECIMAL, i18n.decimal()); ; buf.push('\n  ');30; makeCheckbox(EncodingType.HEXADECIMAL, i18n.hexadecimal()); ; buf.push('\n  ');31; makeCheckbox(EncodingType.BINARY, i18n.binary()); ; buf.push('\n  ');32; makeCheckbox(EncodingType.A_AND_B, i18n.a_and_b()); ; buf.push('\n</div>'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimBitLogPanel.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
  var i18n = require('./locale');
  var NetSimConstants = require('./NetSimConstants');
  var DataConverters = require('./DataConverters');

  var getEncodingLabel = require('./NetSimUtils').getEncodingLabel;

  var EncodingType = NetSimConstants.EncodingType;
  var PacketUIColumnType = NetSimConstants.PacketUIColumnType;

  /**
   * @param {EncodingType} encodingType
   * @param {string} encodedContent
   */
  function logRow(encodingType, encodedContent) {
    ; buf.push('\n    <tr class="', escape((17,  encodingType )), '">\n      <th nowrap class="', escape((18,  PacketUIColumnType.ENCODING_LABEL )), '">', escape((18,  getEncodingLabel(encodingType) )), '</th>\n      <td class="', escape((19,  PacketUIColumnType.MESSAGE )), '">', escape((19,  encodedContent )), '</td>\n    </tr>\n    ');21;
  }
; buf.push('\n<div class="scroll-area bit-log-scroll-area">\n  <div class="packet">\n    <table>\n      <tbody>\n        ');28;
          logRow(EncodingType.ASCII, DataConverters.binaryToAscii(binary, chunkSize));

          logRow(EncodingType.DECIMAL, DataConverters.alignDecimal(DataConverters.binaryToDecimal(binary, chunkSize)));

          logRow(EncodingType.HEXADECIMAL, DataConverters.formatHex(DataConverters.binaryToHex(binary), chunkSize));

          logRow(EncodingType.BINARY, DataConverters.formatBinary(binary, chunkSize));

          logRow(EncodingType.A_AND_B, DataConverters.formatAB(DataConverters.binaryToAB(binary), chunkSize));
        ; buf.push('\n      </tbody>\n    </table>\n  </div>\n  ');42; if (showReadWireButton) { ; buf.push('\n    <div class="panel-footer bit-log-panel-footer">\n      <div class="right-side-controls">\n        <span class="netsim-button large-button" id="read-wire-button">', escape((45,  i18n.readWire() )), '</span>\n      </div>\n    </div>\n  ');48; } ; buf.push('\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"./DataConverters":"/home/ubuntu/staging/apps/build/js/netsim/DataConverters.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimBandwidthControl.js":[function(require,module,exports){
/**
 * @overview UI Slider control used for changing simulated router bandwidth.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

// Utils required only for Function.prototype.inherits()
require('../utils');
var NetSimConstants = require('./NetSimConstants');
var NetSimUtils = require('./NetSimUtils');
var NetSimSlider = require('./NetSimSlider');

/**
 * Generator and controller for packet size slider/selector
 * @param {jQuery} rootDiv
 * @param {function} sliderChangeCallback
 * @param {function} sliderStopCallback
 * @constructor
 */
var NetSimBandwidthControl = module.exports = function (rootDiv, sliderChangeCallback, sliderStopCallback) {
  NetSimSlider.LogarithmicSlider.call(this, rootDiv, {
    onChange: sliderChangeCallback,
    onStop: sliderStopCallback,
    value: Infinity,
    min: 4,
    max: 128 * NetSimConstants.BITS_PER_KILOBIT,
    upperBoundInfinite: true
  });

  // Auto-render, unlike our base class
  this.render();
};
NetSimBandwidthControl.inherits(NetSimSlider.LogarithmicSlider);

/**
 * Converts a numeric bandwidth value (in bits) into a compact localized string
 * representation of that value.
 * @param {number} val - numeric value of the control
 * @returns {string} - localized string representation of value
 * @override
 */
NetSimBandwidthControl.prototype.valueToLabel = function (val) {
  return NetSimUtils.bitrateToLocalizedRoundedBitrate(val);
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimSlider":"/home/ubuntu/staging/apps/build/js/netsim/NetSimSlider.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimSlider.js":[function(require,module,exports){
/**
 * @overview Base implementation of NetSim UI sliders.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var utils = require('../utils');
var markup = require('./NetSimSlider.html.ejs');
var i18n = require('./locale');

/**
 * @type {number}
 * @const
 */
var SLIDER_DEFAULT_MIN_VALUE = 0;

/**
 * @type {number}
 * @const
 */
var SLIDER_DEFAULT_MAX_VALUE = 100;

/**
 *
 * @constructor
 * @param {jQuery} rootDiv - element whose content we replace with the slider
 *        on render()
 * @param {Object} options
 * @param {function} [options.onChange] - a function invoked whenever the
 *        slider-value is changed by the student.  Passed the new value as an
 *        argument.
 * @param {function} [options.onStop] - a function invoked only when the
 *        slider-handle is released by the student.  Passed the new value as an
 *        argument.
 * @param {number} [options.value] - Initial value of the slider.  Defaults to
 *        slider minimum value.
 * @param {number} [options.min] - Lowest possible value of the slider;
 *        next-to-lowest if lowerBoundInfinite is true.  Defaults to zero.
 * @param {number} [options.max] - Highest possible value of the slider;
 *        next-to-highest if upperBoundInfinite is true.  Defaults to 100.
 * @param {number} [options.step] - Step-value of jQueryUI slider - not
 *        necessarily related to min and max values if you provide custom value
 *        converters. Defaults to 1.  If negative, the slider is reversed and
 *        puts the min value on the right.  Cannot be zero or noninteger.
 * @param {boolean} [options.upperBoundInfinite] - if TRUE, the highest value
 *        on the slider will be Infinity/Unlimited.  Default FALSE.
 * @param {boolean} [options.lowerBoundInfinite] - if TRUE, the lowest value
 *        on the slider will be -Infinity/Unlimited.  Default FALSE.
 * @param {boolean} [options.isDisabled] - if TRUE the slider value is locked
 *        and cannot be changed.
 */
var NetSimSlider = module.exports = function (rootDiv, options) {
  /**
   * Unique instance ID for this panel, in case we have several
   * of them on a page.
   * @type {number}
   * @private
   */
  this.instanceID_ = NetSimSlider.uniqueIDCounter;
  NetSimSlider.uniqueIDCounter++;

  /**
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = rootDiv;

  /**
   * A function invoked whenever the slider-value is changed by the student.
   * Passed the new value (not slider position) as an argument.
   * @type {function}
   * @private
   */
  this.changeCallback_ = utils.valueOr(options.onChange, function () {});

  /**
   * A function invoked only when the slider-handle is released by the student.
   * Passed the new value (not slider position) as an argument
   * @type {function}
   * @private
   */
  this.stopCallback_ = utils.valueOr(options.onStop, function () {});

  /**
   * @type {number}
   * @private
   */
  this.minValue_ = utils.valueOr(options.min, SLIDER_DEFAULT_MIN_VALUE);

  /**
   * @type {number}
   * @private
   */
  this.maxValue_ = utils.valueOr(options.max, SLIDER_DEFAULT_MAX_VALUE);

  /**
   * The current (outward-facing) value of the slider.
   * @type {number}
   * @private
   */
  this.value_ = utils.valueOr(options.value, this.minValue_);

  /**
   * Whether the slider maximum value should be Infinity.
   * @type {boolean}
   * @private
   */
  this.isUpperBoundInfinite_ = utils.valueOr(options.upperBoundInfinite, false);

  /**
   * Whether the slider minimimum value should be -Infinity.
   * @type {boolean}
   * @private
   */
  this.isLowerBoundInfinite_ = utils.valueOr(options.lowerBoundInfinite, false);

  /**
   * @type {number}
   * @private
   */
  this.step_ = utils.valueOr(options.step, 1);
  if (this.step_ === 0) {
    throw new Error("NetSimSlider does not support zero step values.");
  } else if (this.step_ % 1 !== 0) {
    throw new Error("NetSimSlider does not support non-integer step values. " + " Use DecimalPrecisionSlider instead.");
  }

  /**
   * Whether the slider is disabled and noninteractable.
   * @type {boolean}
   * @private
   */
  this.isDisabled_ = utils.valueOr(options.isDisabled, false);
};

/**
 * Static counter used to generate/uniquely identify different instances
 * of this component on the page
 * @type {number}
 */
NetSimSlider.uniqueIDCounter = 0;

/**
 * @returns {boolean} TRUE if the step value is less than zero.
 * @private
 */
NetSimSlider.prototype.isStepNegative_ = function () {
  return this.step_ < 0;
};

/**
 * Fill the root div with new elements reflecting the current state
 */
NetSimSlider.prototype.render = function () {
  var minValue = this.isLowerBoundInfinite_ ? -Infinity : this.minValue_;
  var maxValue = this.isUpperBoundInfinite_ ? Infinity : this.maxValue_;
  var minPosition = this.valueToSliderPosition(this.isStepNegative_() ? maxValue : minValue);
  var maxPosition = this.valueToSliderPosition(this.isStepNegative_() ? minValue : maxValue);

  var renderedMarkup = $(markup({
    instanceID: this.instanceID_,
    minValue: this.valueToShortLabel(this.isStepNegative_() ? maxValue : minValue),
    maxValue: this.valueToShortLabel(this.isStepNegative_() ? minValue : maxValue)
  }));
  this.rootDiv_.html(renderedMarkup);

  this.rootDiv_.find('.slider').slider({
    value: this.valueToSliderPosition(this.value_),
    min: minPosition,
    max: maxPosition,
    step: Math.abs(this.step_),
    slide: this.onSliderValueChange_.bind(this),
    stop: this.onSliderStop_.bind(this),
    disabled: this.isDisabled_
  });

  // Use wider labels if we have an infinite bound
  if (this.isLowerBoundInfinite_ || this.isUpperBoundInfinite_) {
    this.rootDiv_.find('.slider-labels').addClass('wide-labels');
  }

  this.setLabelFromValue_(this.value_);
};

/**
 * Disable this slider, so the user can't change its value
 */
NetSimSlider.prototype.disable = function () {
  this.isDisabled_ = true;
  this.rootDiv_.find('.slider').slider('option', 'disabled', true);
};

/**
 * Enable this slider, so the user can change its value
 */
NetSimSlider.prototype.enable = function () {
  this.isDisabled_ = false;
  this.rootDiv_.find('.slider').slider('option', 'disabled', false);
};

/**
 * External access to set the value of the slider.
 * @param {number} newValue
 */
NetSimSlider.prototype.setValue = function (newValue) {
  if (this.value_ === newValue) {
    return;
  }

  this.value_ = newValue;
  this.rootDiv_.find('.slider').slider('option', 'value', this.valueToSliderPosition(newValue));
  this.setLabelFromValue_(newValue);
};

/** @private */
NetSimSlider.prototype.onSliderValueChange_ = function (event, ui) {
  var newValue = this.sliderPositionToValue(ui.value);
  this.value_ = newValue;
  this.setLabelFromValue_(newValue);
  this.changeCallback_(newValue);
};

/** @private */
NetSimSlider.prototype.onSliderStop_ = function () {
  this.stopCallback_(this.value_);
};

/**
 * Updates the slider label to localize and display the given value.
 * @param {number} val - slider value to display
 * @private
 */
NetSimSlider.prototype.setLabelFromValue_ = function (val) {
  this.rootDiv_.find('.slider-value').text(this.valueToLabel(val));
};

/**
 * Converts the given value into an internal value we can pass to the
 * jQueryUI slider control.
 * @param {number} val - external-facing value
 * @returns {number} - internal slider value
 */
NetSimSlider.prototype.valueToSliderPosition = function (val) {
  if (this.isUpperBoundInfinite_ && val > this.maxValue_) {
    return this.valueToSliderPosition(this.maxValue_) + this.step_;
  } else if (this.isLowerBoundInfinite_ && val < this.minValue_) {
    return this.valueToSliderPosition(this.minValue_) - this.step_;
  }
  return Math.max(this.minValue_, Math.min(this.maxValue_, val)) * (this.isStepNegative_() ? -1 : 1);
};

/**
 * Converts the internal jQueryUI slider value into an external-facing
 * value for this control.
 * Should be an inverse of valueToSliderPosition
 * @param {number} pos - internal slider value
 * @returns {number} - external-facing value
 */
NetSimSlider.prototype.sliderPositionToValue = function (pos) {
  if (this.isStepNegative_()) {
    if (pos < this.valueToSliderPosition(this.maxValue_)) {
      return this.isUpperBoundInfinite_ ? Infinity : this.maxValue_;
    } else if (pos > this.valueToSliderPosition(this.minValue_)) {
      return this.isLowerBoundInfinite_ ? -Infinity : this.minValue_;
    }
    return -pos;
  } else {
    if (pos > this.valueToSliderPosition(this.maxValue_)) {
      return this.isUpperBoundInfinite_ ? Infinity : this.maxValue_;
    } else if (pos < this.valueToSliderPosition(this.minValue_)) {
      return this.isLowerBoundInfinite_ ? -Infinity : this.minValue_;
    }
    return pos;
  }
};

/**
 * Converts an external-facing numeric value into a localized string
 * representation of that value.
 * @param {number} val - numeric value of the control
 * @returns {string} - localized string representation of value
 */
NetSimSlider.prototype.valueToLabel = function (val) {
  if (val === Infinity || val === -Infinity) {
    return i18n.unlimited();
  }
  return val;
};

/**
 * Alternate label converter, used for slider end labels.
 * @param {number} val - numeric value of the control
 * @returns {string} - localized string representation of value
 */
NetSimSlider.prototype.valueToShortLabel = function (val) {
  return this.valueToLabel(val);
};

/**
 * Since jQueryUI sliders don't support noninteger step values, this is
 * a simple helper wrapped around NetSimSlider that adds support for
 * fractional step values down to a given precision.
 * @param {jQuery} rootDiv
 * @param {Object} options - takes NetSimSlider options, except:
 * @param {number} [options.step] - values between 0 and 1 are allowed.
 * @param {number} [options.precision] - number of decimal places of precision
 *        this slider needs (can match the number of decimal places in your
 *        step value).  Default 2.
 * @constructor
 */
NetSimSlider.DecimalPrecisionSlider = function (rootDiv, options) {
  /**
   * Number of decimal places of precision added to the default slider
   * functionality.
   * @type {number}
   * @private
   */
  this.precision_ = utils.valueOr(options.precision, 2);

  // We convert the given step value by the requested precision before passing
  // it on to NetSimSlider, so that we give NetSimSlider an integer step value.
  options.step = options.step * Math.pow(10, this.precision_);

  NetSimSlider.call(this, rootDiv, options);
};
NetSimSlider.DecimalPrecisionSlider.inherits(NetSimSlider);

/**
 * @param {number} val - external-facing value
 * @returns {number} - internal slider value
 * @override
 */
NetSimSlider.DecimalPrecisionSlider.prototype.valueToSliderPosition = function (val) {
  // Use clamping from parent class, which should be applied before our transform.
  return NetSimSlider.prototype.valueToSliderPosition.call(this, val) * Math.pow(10, this.precision_);
};

/**
 * Should be an inverse of valueToSliderPosition
 * @param {number} pos - internal slider value
 * @returns {number} - external-facing value
 * @override
 */
NetSimSlider.DecimalPrecisionSlider.prototype.sliderPositionToValue = function (pos) {
  // Use clamping from parent class, which should be applied before our transform.
  return NetSimSlider.prototype.sliderPositionToValue.call(this, pos) / Math.pow(10, this.precision_);
};

/**
 * Default minimum of zero is useless to a logarithmic scale
 * @type {number}
 * @const
 */
var LOGARITHMIC_DEFAULT_MIN_VALUE = 1;

/**
 * By default, a logarithmic scale slider increases by a factor of 2
 * every step.
 * @type {number}
 */
var LOGARITHMIC_DEFAULT_BASE = 2;

/**
 * @param {jQuery} rootDiv
 * @param {Object} options - takes NetSimSlider options, except:
 * @param {number} [options.min] - same as base slider, but defaults to 1.
 * @param {number} [options.logBase] - factor by which the value increases
 *        with every slider step.  Default base 2.
 * @constructor
 * @augments NetSimSlider
 */
NetSimSlider.LogarithmicSlider = function (rootDiv, options) {
  options.min = utils.valueOr(options.min, LOGARITHMIC_DEFAULT_MIN_VALUE);
  NetSimSlider.call(this, rootDiv, options);

  /**
   * Factor by which the value increases with every slider step.
   * @type {number}
   * @private
   */
  this.logBase_ = utils.valueOr(options.logBase, LOGARITHMIC_DEFAULT_BASE);

  /**
   * Precalculate natural log of our base value, because we'll use it a lot.
   * @type {number}
   * @private
   */
  this.lnLogBase_ = Math.log(this.logBase_);

  this.calculateSliderBounds_();
};
NetSimSlider.LogarithmicSlider.inherits(NetSimSlider);

/**
 * For the logarithmic slider, it's easiest to calculate the slider
 * boundary values once and use them later.
 * @private
 */
NetSimSlider.LogarithmicSlider.prototype.calculateSliderBounds_ = function () {
  // Pick boundary slider values
  this.maxSliderPosition = this.logFloor_(this.maxValue_);
  // Add a step if we don't already land exactly on a step, to
  // compensate for the floor() operation
  if (Math.pow(this.logBase_, this.maxSliderPosition) !== this.maxValue_) {
    this.maxSliderPosition += this.step_;
  }
  this.minSliderPosition = this.logFloor_(this.minValue_);

  // Pick infinity slider values
  this.infinitySliderPosition = this.maxSliderPosition + this.step_;
  this.negInfinitySliderPosition = this.minSliderPosition - this.step_;
};

/**
 * Cheater "floor(log_base_n(x))" method with a hacky workaround for
 * floating-point errors.  Uses the logarithmic base factor that the slider
 * is configured for (this.logBase_). Good enough for the slider.
 * @param {number} val
 * @returns {number}
 * @private
 */
NetSimSlider.LogarithmicSlider.prototype.logFloor_ = function (val) {
  // JavaScript floating-point math causes this logarithm calculation to
  // sometimes return slightly imprecise values. For example:
  // log(1000) / log(10) === 2.9999999999999996
  // Although we usually want to floor noninteger values, the above calculation
  // is supposed to come out as exactly 3.
  // The fudge factor below gives a threshold at which we will ceil() a result
  // rather than floor() it, to account for this imprecision.
  // The _right_ way to fix this is to use a better number type like BigDecimal,
  // but it's not really worth it for this use case.  Six digits is more than
  // enough precision for the slider when we're trying to work with whole
  // numbers anyway.
  var ceilThreshold = 0.0000001;
  return Math.floor(ceilThreshold + Math.log(val) / this.lnLogBase_);
};

/**
 * Converts the given value into an internal value we can pass to the
 * jQueryUI slider control.
 * @param {number} val - external-facing value
 * @returns {number} - internal slider value
 * @override
 */
NetSimSlider.LogarithmicSlider.prototype.valueToSliderPosition = function (val) {
  if (val > this.maxValue_) {
    return this.isUpperBoundInfinite_ ? this.infinitySliderPosition : this.maxSliderPosition;
  } else if (val === this.maxValue_) {
    return this.maxSliderPosition;
  } else if (val < this.minValue_) {
    return this.isLowerBoundInfinite_ ? this.negInfinitySliderPosition : this.minSliderPosition;
  } else if (val === this.minValue_) {
    return this.minSliderPosition;
  }
  return Math.max(this.minSliderPosition, this.logFloor_(val));
};

/**
 * Converts the internal jQueryUI slider value into an external-facing
 * value for this control.
 * Should be an inverse of valueToSliderPosition
 * @param {number} pos - internal slider value
 * @returns {number} - external-facing value
 * @override
 */
NetSimSlider.LogarithmicSlider.prototype.sliderPositionToValue = function (pos) {
  if (pos > this.maxSliderPosition) {
    return this.isUpperBoundInfinite_ ? Infinity : this.maxValue_;
  } else if (pos === this.maxSliderPosition) {
    return this.maxValue_;
  } else if (pos < this.minSliderPosition) {
    return this.isLowerBoundInfinite_ ? -Infinity : this.minValue_;
  } else if (pos === this.minSliderPosition) {
    return this.minValue_;
  }
  return Math.pow(this.logBase_, pos);
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimSlider.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimSlider.html.ejs","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimSlider.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('<div id="netsim_slider_', escape((1,  instanceID )), '" class="netsim-slider">\n  <div class="slider-inline-wrap">\n    <div class="slider"></div>\n    <div class="slider-labels">\n      <div class="max-value">', escape((5,  maxValue )), '</div>\n      <div class="min-value">', escape((6,  minValue )), '</div>\n      <div class="current-value">\n        <label><span class="slider-value"></span></label>\n      </div>\n    </div>\n  </div>\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimApi.js":[function(require,module,exports){
/**
 * @overview Wraps NetSim REST APIs for operations of "tables" and "shards."
 * @see net_sim_api.rb
 */
// Strict linting: Absorb into global config when possible
/* jshint
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var NetSimApiError = require('./NetSimApiError');

/**
 * @type {string}
 * @const
 */
var NETSIM_API_BASE_URL = '/v3/netsim';

/**
 * @name NetSimShardApi
 */
var shardApi = {

  /**
   * Create an initialized NetSim Shard API instance.
   * @param {string} shardID
   * @returns {NetSimShardApi}
   */
  create: function create(shardID) {
    return $.extend({}, shardApi, {

      /**
       * Shard identifier.
       * @type {string}
       */
      shardID: shardID,

      /**
       * Beginning part of URL for all calls that interact with the shard.
       * @type {string}
       */
      baseUrl: NETSIM_API_BASE_URL + '/' + shardID
    });
  },

  makeTableApi: function makeTableApi(tableName) {
    return tableApi.create(this.shardID, tableName);
  }
};

/**
 * @name NetSimTableApi
 */
var tableApi = {

  /**
   * Create an initialized NetSim Table API instance.
   * @param {string} shardID
   * @param {string} tableName
   * @returns {NetSimTableApi}
   */
  create: function create(shardID, tableName) {
    return $.extend({}, tableApi, {

      /**
       * Shard identifier.
       * @type {string}
       */
      shardID: shardID,

      /**
       * Table name.
       * @type {string}
       */
      tableName: tableName,

      /**
       * Beginning part of URL for all calls that interact only with
       * this table.
       * @type {string}
       */
      baseUrl: NETSIM_API_BASE_URL + '/' + shardID + '/' + tableName
    });
  },

  /**
   * Request all rows from the given table.
   * @param {NodeStyleCallback} callback - Expected result is an array of
   *        row objects.
   */
  allRows: function allRows(callback) {
    $.ajax({
      url: this.baseUrl,
      type: "get",
      dataType: "json"
    }).done(function (data, text) {
      callback(null, data);
    }).fail(function (request, status, error) {
      callback(new NetSimApiError(request), null);
    });
  },

  /**
   * Request all rows including and following the given row ID from the table.
   * @param {int} rowID - lower bound on row IDs to fetch
   * @param {NodeStyleCallback} callback - Expected result is an array of
   *        table rows.
   */
  allRowsFromID: function allRowsFromID(rowID, callback) {
    $.ajax({
      url: this.baseUrl + '@' + rowID,
      type: "get",
      dataType: "json"
    }).done(function (data, text) {
      callback(null, data);
    }).fail(function (request, status, error) {
      callback(new NetSimApiError(request), null);
    });
  },

  /**
   * Insert a row or rows into the table.
   * @param {Object|Object[]} value - desired row contents, as either an
   *        Object for a single row or an Array of Objects for multiple.
   *        Must be JSON.stringify-able.
   * @param {NodeStyleCallback} callback - Expected result is the created
   *        row object or objects (which will include an assigned 'id'
   *        key).
   */
  createRow: function createRow(value, callback) {
    var data;

    try {
      data = JSON.stringify(value);
    } catch (e) {
      callback(e, undefined);
      return;
    }

    $.ajax({
      url: this.baseUrl,
      type: "post",
      contentType: "application/json; charset=utf-8",
      data: data
    }).done(function (body, text) {
      callback(null, body);
    }).fail(function (request, status, error) {
      callback(new NetSimApiError(request), undefined);
    });
  },

  /**
   * Remove multiple rows at once.
   * @param {number[]} ids - The row IDs to remove.
   * @param {NodeStyleCallback} callback - Expected result is TRUE.
   * @param {boolean} [async] default TRUE.
   */
  deleteRows: function deleteRows(ids, callback, async) {
    async = async !== false; // `undefined` maps to true

    // Generate query string in the form "id[]=1&id[]=2&..."
    var queryString = ids.map(function (id) {
      return 'id[]=' + id;
    }).join('&');

    $.ajax({
      url: this.baseUrl + '?' + queryString,
      type: 'delete',
      dataType: 'json',
      async: async
    }).done(function (data, text) {
      callback(null, true);
    }).fail(function (request, status, error) {
      callback(new NetSimApiError(request), false);
    });
  },

  /**
   * Retrieve a row.
   * @param {number} id - The row identifier.
   * @param {NodeStyleCallback} callback - Expected result is the requested
   *        row object.
   */
  fetchRow: function fetchRow(id, callback) {
    $.ajax({
      url: this.baseUrl + "/" + id,
      type: "get",
      dataType: "json"
    }).done(function (data, text) {
      callback(null, data);
    }).fail(function (request, status, error) {
      callback(new NetSimApiError(request), undefined);
    });
  },

  /**
   * Change the contents of a row.
   * @param {number} id - The row identifier.
   * @param {Object} value - The new row contents.
   * @param {NodeStyleCallback} callback - Expected result is the new row object.
   */
  updateRow: function updateRow(id, value, callback) {
    $.ajax({
      url: this.baseUrl + "/" + id,
      type: "post",
      contentType: "application/json; charset=utf-8",
      data: JSON.stringify(value)
    }).done(function (data, text) {
      callback(null, data);
    }).fail(function (request, status, error) {
      callback(new NetSimApiError(request), false);
    });
  }
};

module.exports = {
  /**
   * Create a NetSim Shard API instance for the given shard.
   * @param {string} shardID
   * @returns {NetSimShardApi}
   */
  makeShardApi: function makeShardApi(shardID) {
    return shardApi.create(shardID);
  },

  /**
   * Create a NetSim Table API instance for the given shard and table name.
   * @param {string} shardID
   * @param {string} tableName
   * @returns {NetSimTableApi}
   */
  makeTableApi: function makeTableApi(shardID, tableName) {
    return tableApi.create(shardID, tableName);
  }
};

},{"./NetSimApiError":"/home/ubuntu/staging/apps/build/js/netsim/NetSimApiError.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimApiError.js":[function(require,module,exports){
/**
 * @overview Extended error type returned for failed interactions with NetSim
 * server API (net_sim_api.rb) that extracts and exposes additional error info.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

require('../utils'); // provide Function.prototype.inherits

/**
 * Special error type for failed server requests, which tries to extract
 * additional error information from the server's response.
 * @param {jqXHR} request
 * @constructor
 * @extends Error
 */
var NetSimApiError = module.exports = function (request) {
  /** @type {string} */
  this.name = 'NetSimApiError';

  /** @type {string} */
  this.message = 'Request failed';

  /** @type {string} */
  this.stack = new Error().stack;

  /**
   * Additional error information returned by the server, which can drive
   * specific responses by the client.
   * @type {string|Array}
   */
  this.details = undefined;

  // Attempt to extract additional information from the request object
  if (request) {
    this.message = 'status: ' + request.status + '; error: ' + request.statusText;
    try {
      var response = JSON.parse(request.responseText);
      if (response.details) {
        this.details = response.details;
        this.message += '; details: ' + JSON.stringify(this.details);
      }
    } catch (e) {
      this.details = null;
    }
  }
};
NetSimApiError.inherits(Error);

/**
 * Ways that a row insert operation can fail via NetSimApi.
 * @enum {string}
 */
NetSimApiError.ValidationError = {
  MALFORMED: 'malformed',
  CONFLICT: 'conflict',
  LIMIT_REACHED: 'limit_reached'
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimAlert.js":[function(require,module,exports){
/**
 * @overview Controller for creating growl-style Bootstrap alerts
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
/* global setTimeout */
'use strict';

var markup = require('./NetSimAlert.html.ejs');
var ArgumentUtils = require('./ArgumentUtils');
var NetSimLogger = require('./NetSimLogger');

var logger = NetSimLogger.getSingleton();

var NetSimAlert = module.exports = {};

/**
 * Returns the alert container, or creates and inserts one if it does
 * not exist. Also attaches a close handler so the container will
 * remove itself when it empties
 * @private
 * @return {jQuery}
 */
NetSimAlert.getOrCreateAlertContainer_ = function () {
  var alertContainer = $('.netsim-alert-container');

  if (alertContainer.length === 0) {
    alertContainer = $('<div>').addClass("netsim-alert-container");
    $('#netsim').append(alertContainer);

    alertContainer.on('closed', function () {
      if ($(this).children().length === 1) {
        $(this).remove();
      }
    });
  }

  return alertContainer;
};

/**
 * Simple check to see if Bootstrap's Alert function is attached to the
 * global jQuery object.
 * @return {boolean} whether or not bootstrap's `alert` function is
 *                   loaded and available
 */
NetSimAlert.isBootstrapAlertLoaded_ = function () {
  return typeof $().alert === 'function';
};

/**
 * Primary alert creation method. Expects a body of content for the
 * alert and a flavor for the alert type. Can optionally include a title
 * and a timeout time.
 *
 * @param {body} string
 * @param {flavor} string
 * @param {Object} options
 * @param {string} options.title
 * @param {number} options.timeout Timeout in ms. defaults to 5000.
 * @return {jQuery} the created alert element
 */
NetSimAlert.create_ = function (body, flavor, options) {

  if (!NetSimAlert.isBootstrapAlertLoaded_()) {
    logger.warn("Bootstrap Alert not loaded; NetSimAlert refusing to create alert");
    return;
  }

  ArgumentUtils.validateRequired(body, 'body', ArgumentUtils.isString);
  ArgumentUtils.validateRequired(flavor, 'flavor', ArgumentUtils.isString);
  options = ArgumentUtils.extendOptionsObject(options);

  var $container = NetSimAlert.getOrCreateAlertContainer_();

  var bootstrapAlert = $(markup({
    flavor: flavor,
    body: body,
    title: options.get('title', ArgumentUtils.isString)
  }));

  $container.append(bootstrapAlert);
  bootstrapAlert.alert();

  setTimeout(function () {
    bootstrapAlert.alert('close');
  }, options.get('timeout', ArgumentUtils.isPositiveNoninfiniteNumber, 5000));

  return bootstrapAlert;
};

/** Wrapper method to call create with an "alert-warn" flavor */
NetSimAlert.warn = function (body, options) {
  return NetSimAlert.create_(body, "alert-warn", options);
};

/** Wrapper method to call create with an "alert-info" flavor */
NetSimAlert.info = function (body, options) {
  return NetSimAlert.create_(body, "alert-info", options);
};

/** Wrapper method to call create with an "alert-error" flavor */
NetSimAlert.error = function (body, options) {
  return NetSimAlert.create_(body, "alert-error", options);
};

/** Wrapper method to call create with an "alert-success" flavor */
NetSimAlert.success = function (body, options) {
  return NetSimAlert.create_(body, "alert-success", options);
};

},{"./ArgumentUtils":"/home/ubuntu/staging/apps/build/js/netsim/ArgumentUtils.js","./NetSimAlert.html.ejs":"/home/ubuntu/staging/apps/build/js/netsim/NetSimAlert.html.ejs","./NetSimLogger":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogger.js"}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimAlert.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
  /**
   * @name body
   * @type {!string}
   */

  /**
   * @name flavor
   * @type {!string}
   */

  /**
   * @name title
   * @type {string}
   */
; buf.push('\n<div class="alert netsim-alert ', escape((17,  flavor )), ' fade in">\n  <button type="button" class="netsim-alert-button close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>\n  ');19; if (title) { ; buf.push('<strong>', escape((19,  title )), '</strong>');19; } ; buf.push('\n  ', escape((20,  body )), '\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/netsim/DataConverters.js":[function(require,module,exports){
/**
 * @overview Provides utility methods for converting user data between
 *           different encodings, and formatting those encodings: binary,
 *           hex, decimal, ASCII.  "A and B" is a special encoding that is
 *           just binary with "A" sub'd for 0 and "B" sub'd for 1.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';
/* global window, require, exports */

var utils = require('../utils'); // For String.prototype.repeat polyfill
var NetSimUtils = require('./NetSimUtils');

// window.{btoa, atob} polyfills
if (!(window.atob && window.btoa)) {
  var base64 = require('Base64');
  window.btoa = window.btoa || base64.btoa;
  window.atob = window.atob || base64.atob;
}

/**
 * @typedef {string} AddressHeaderFormat
 * A string indicating the parts of an address field in the packet header,
 * their respective byte-widths, and the separators to be used when converting
 * binary to a readable format.
 * Examples:
 * "4" indicates a single 4-byte number, e.g. 5 / 0101
 * "8.4" indicates an 8-byte number followed by a 4-byte number, separated
 *   by a period, e.g. 1.1 / 000000010001 or 18.9 / 00010010 1001
 * "8.8.8.8" would be an IPv4 address, e.g.
 *   127.0.0.1 / 01111111 00000000 00000000 00000001
 */

/**
 * Converts an As and Bs string into its most compact representation, forced
 * to uppercase.
 * @param {string} abString
 * @returns {string}
 */
exports.minifyAB = function (abString) {
  return abString.replace(/[^AB]/gi, '').toUpperCase();
};

/**
 * Converts an AB-binary string to a formatted representation, with chunks
 * of a set size separated by a space.
 * @param {string} abString
 * @param {number} chunkSize
 * @param {number} [offset] bit-offset for formatting effect; default 0.
 * @returns {string} formatted version
 */
exports.formatAB = function (abString, chunkSize, offset) {
  return exports.formatBinary(exports.abToBinary(abString), chunkSize, offset).replace(/0/g, 'A').replace(/1/g, 'B');
};

/**
 * Converts a binary string into its most compact string representation.
 * @param {string} binaryString that may contain whitespace
 * @returns {string} binary string with no whitespace
 */
exports.minifyBinary = function (binaryString) {
  return binaryString.replace(/[^01]/g, '');
};

/**
 * Converts a binary string to a formatted representation, with chunks of
 * a set size separated by a space.
 * @param {string} binaryString - may be unformatted already
 * @param {number} chunkSize - how many bits per format chunk
 * @param {number} [offset] bit-offset for formatting effect; default 0.
 * @returns {string} pretty formatted binary string
 */
exports.formatBinary = function (binaryString, chunkSize, offset) {
  offset = utils.valueOr(offset, 0);
  if (chunkSize <= 0) {
    throw new RangeError("Parameter chunkSize must be greater than zero");
  }

  var binary = exports.minifyBinary(binaryString);

  var chunks = [];
  var firstChunkLength = utils.mod(offset, chunkSize);
  if (firstChunkLength > 0) {
    chunks.push(binary.substr(0, firstChunkLength));
  }

  for (var i = firstChunkLength; i < binary.length; i += chunkSize) {
    chunks.push(binary.substr(i, chunkSize));
  }

  return chunks.join(' ');
};

/**
 * Converts a hexadecimal string into its most compact string representation.
 * Strips whitespace and non-hex characters, and coerces letters to uppercase.
 * @param {string} hexString
 * @returns {string}
 */
exports.minifyHex = function (hexString) {
  return hexString.replace(/[^0-9A-F]/gi, '').toUpperCase();
};

/**
 * Reduces all whitespace to single characters and strips non-digits.
 * @param decimalString
 */
exports.minifyDecimal = function (decimalString) {
  return decimalString.replace(/(^\s+|\s+$|[^0-9\s])/g, '').replace(/\s+/g, ' ');
};

/**
 * Converts a hex string to a formatted representation, with chunks of
 * a set size separated by a space.
 * @param {string} hexString
 * @param {number} chunkSize - in bits!
 * @param {number} [offset] hex-digit-offset for formatting effect; default 0.
 * @returns {string} formatted hex
 */
exports.formatHex = function (hexString, chunkSize, offset) {
  offset = utils.valueOr(offset, 0);
  if (chunkSize <= 0) {
    throw new RangeError("Parameter chunkSize must be greater than zero");
  }

  // Don't format hex when the chunkSize doesn't align with hex characters.
  if (chunkSize % 4 !== 0) {
    return hexString;
  }

  var hexChunkSize = chunkSize / 4;
  var hex = exports.minifyHex(hexString);

  var chunks = [];
  var firstChunkLength = utils.mod(offset, hexChunkSize);
  if (firstChunkLength > 0) {
    chunks.push(hex.substr(0, firstChunkLength));
  }

  for (var i = firstChunkLength; i < hex.length; i += hexChunkSize) {
    chunks.push(hex.substr(i, hexChunkSize));
  }

  return chunks.join(' ');
};

/**
 * Takes a set of whitespace-separated numbers and pads the spacing between
 * them to the width of the widest number, so that they line up when they
 * wrap.
 * @param {string} decimalString
 * @returns {string} aligned decimal string
 */
exports.alignDecimal = function (decimalString) {
  if (decimalString.replace(/\D/g, '') === '') {
    return '';
  }

  var numbers = exports.minifyDecimal(decimalString).split(/\s+/);

  // Find the length of the longest number
  var mostDigits = numbers.reduce(function (prev, cur) {
    if (cur.length > prev) {
      return cur.length;
    }
    return prev;
  }, 0);

  var zeroPadding = '0'.repeat(mostDigits);

  return numbers.map(function (numString) {
    // Left-pad each number with non-breaking spaces up to max width.
    return (zeroPadding + numString).slice(-mostDigits);
  }).join(' ');
};

/**
 * Interprets a string of As and Bs as binary where A is 0 and B is 1, then
 * interprets that binary as a single number, and returns that number.
 * @param {string} abString
 * @returns {number}
 */
exports.abToInt = function (abString) {
  return exports.binaryToInt(exports.abToBinary(abString));
};

/**
 * Converts a number to an AB binary representation
 * @param {number} num
 * @param {number} width
 * @returns {string}
 */
exports.intToAB = function (num, width) {
  return exports.binaryToAB(exports.intToBinary(num, width));
};

/**
 * Converts As and Bs to a binary string, where A is 0 and B is 1.
 * @param {string} abString
 * @returns {string}
 */
exports.abToBinary = function (abString) {
  return exports.minifyAB(abString).replace(/A/g, '0').replace(/B/g, '1');
};

/**
 * Converts binary into As and Bs, where 0 is A and 1 is B.
 * @param {string} binaryString
 * @returns {string}
 */
exports.binaryToAB = function (binaryString) {
  return exports.minifyBinary(binaryString).replace(/0/g, 'A').replace(/1/g, 'B');
};

/**
 * Interprets a binary string as a single number, and returns that number.
 * @param {string} binaryString
 * @returns {number}
 */
exports.binaryToInt = function (binaryString) {
  return parseInt(exports.minifyBinary(binaryString), 2);
};

var intToString = function intToString(int, base, width) {
  if (width <= 0) {
    throw new RangeError("Output width must be greater than zero");
  }
  return NetSimUtils.zeroPadLeft(int.toString(base), width);
};

/**
 * Converts a number to a binary string representation with the given width.
 * @param {number} int - number to convert
 * @param {number} width - number of bits to use
 * @returns {string} - binary representation with length of "width"
 */
exports.intToBinary = function (int, width) {
  return intToString(int, 2, width);
};

/**
 * Interprets a hex string as a single number, and returns that number.
 * @param hexadecimalString
 * @returns {Number}
 */
exports.hexToInt = function (hexadecimalString) {
  return parseInt(exports.minifyHex(hexadecimalString), 16);
};

/**
 * Converts a number to a hexadecimal string representation with the given
 * width.
 * @param {number} int - number to convert
 * @param {number} width - number of characters to use
 * @returns {string} - hex representation with length of "width"
 */
exports.intToHex = function (int, width) {
  return intToString(int, 16, width).toUpperCase();
};

/**
 * Converts a hex string to a binary string, by mapping each hex character
 * to four bits of binary.
 * @param {string} hexadecimalString
 * @returns {string} binary representation.
 */
exports.hexToBinary = function (hexadecimalString) {
  var uglyHex = exports.minifyHex(hexadecimalString);
  var binary = '';

  for (var i = 0; i < uglyHex.length; i++) {
    binary += exports.intToBinary(exports.hexToInt(uglyHex.substr(i, 1)), 4);
  }

  return binary;
};

/**
 * Converts a binary string to a hex string, mapping each four bits into
 * a hex character and right-padding with zeroes to round out the binary length.
 * @param {string} binaryString
 * @returns {string}
 */
exports.binaryToHex = function (binaryString) {
  var currentNibble;
  var nibbleWidth = 4;
  var chars = [];
  var uglyBinary = exports.minifyBinary(binaryString);
  for (var i = 0; i < uglyBinary.length; i += nibbleWidth) {
    currentNibble = NetSimUtils.zeroPadRight(uglyBinary.substr(i, nibbleWidth), nibbleWidth);
    chars.push(exports.intToHex(exports.binaryToInt(currentNibble), 1));
  }
  return chars.join('');
};

/**
 * Converts a string set of numbers to a binary representation of those numbers
 * using the given byte-size.
 * @param {string} decimalString - A set of numbers separated by whitespace.
 * @param {number} byteSize - How many bits to use to represent each number.
 * @returns {string} Binary representation.
 */
exports.decimalToBinary = function (decimalString, byteSize) {
  // Special case: No numbers
  if (decimalString.replace(/\D/g, '') === '') {
    return '';
  }

  return exports.minifyDecimal(decimalString).split(/\s+/).map(function (numString) {
    return exports.intToBinary(parseInt(numString, 10), byteSize);
  }).join('');
};

/**
 * Converts binary to a string of decimal numbers separated by whitespace.
 * @param {string} binaryString
 * @param {number} byteSize - How many bits to read for each number
 * @returns {string} decimal numbers
 */
exports.binaryToDecimal = function (binaryString, byteSize) {
  var currentByte;
  var numbers = [];
  var binary = exports.minifyBinary(binaryString);
  for (var i = 0; i < binary.length; i += byteSize) {
    currentByte = NetSimUtils.zeroPadRight(binary.substr(i, byteSize), byteSize);
    numbers.push(exports.binaryToInt(currentByte));
  }
  return numbers.join(' ');
};

/**
 * Converts ascii to binary, using the given bytesize for each character.
 * Overflow is ignored (left-trimmed); recommend using a bytesize of 8 in
 * most circumstances.
 * @param {string} asciiString
 * @param {number} byteSize
 * @returns {string}
 */
exports.asciiToBinary = function (asciiString, byteSize) {
  var bytes = [];
  for (var i = 0; i < asciiString.length; i++) {
    bytes.push(exports.intToBinary(asciiString.charCodeAt(i), byteSize));
  }
  return bytes.join('');
};

/**
 * Converts binary to an ascii string, using the given bytesize for each
 * character.  If the binary is not divisible by bytesize, the final character
 * is right-padded.
 * @param {string} binaryString
 * @param {number} byteSize
 * @returns {string} ASCII string
 */
exports.binaryToAscii = function (binaryString, byteSize) {
  if (byteSize <= 0) {
    throw new RangeError("Parameter byteSize must be greater than zero");
  }

  var currentByte;
  var chars = [];
  var binary = exports.minifyBinary(binaryString);
  for (var i = 0; i < binary.length; i += byteSize) {
    currentByte = NetSimUtils.zeroPadRight(binary.substr(i, byteSize), byteSize);
    chars.push(String.fromCharCode(exports.binaryToInt(currentByte)));
  }
  return chars.join('');
};

/**
 * @typedef {Object} Base64Payload
 * @property {string} string - the base64-encoded payload
 * @property {number} len - the length of the original binary payload
 */

/**
 * Converts binary to a base64 string for more efficient network
 * transfer. Because base64 expects even bytes, we pad the binary string
 * to the nearest byte and return the original length. The reverse
 * conversion expects to be given that original length.
 * @param {string} binaryString
 * @returns {Base64Payload} Object containing the base64 string and the
 *          length of of the original binaryString
 * @throws {TypeError} if binaryString argument is not a
 *         properly-formatted string of zeroes and ones.
 * @example
 * // returns { string: "kg==", len: 7 }
 * DataConverters.binaryToBase64("1001001");
 */
exports.binaryToBase64 = function (binaryString) {

  if (/^[01]*$/.test(binaryString) === false) {
    throw new TypeError("argument binaryString to method binaryToBase64" + "must be a binary string; received \"" + binaryString + "\" instead");
  }

  var byteLen = Math.ceil(binaryString.length / 8.0) * 8;
  var paddedBinaryString = NetSimUtils.zeroPadRight(binaryString, byteLen);
  var payload = window.btoa(exports.binaryToAscii(paddedBinaryString, 8));

  return { string: payload, len: binaryString.length };
};

/**
 * Converts a base64 string back into a binary string of the specified
 * length.
 * @param {string} base64string
 * @param {number} len
 * @returns {string} binaryString
 * @throws {TypeError} if base64string argument is not a
 *         properly base64-encoded string
 * @example
 * // returns "1001001"
 * DataConverters.base64ToBinary("kg==", 7);
 */
exports.base64ToBinary = function (base64string, len) {
  var decodedData;
  try {
    decodedData = window.atob(base64string);
  } catch (e) {
    throw new TypeError("argument base64string to method base64ToBinary" + "must be a base64-encoded string");
  }
  return exports.asciiToBinary(decodedData, 8).substr(0, len);
};

/**
 * Converts binary to an address string using the provided address format.
 * @param {string} binaryString
 * @param {AddressHeaderFormat} addressFormat
 * @returns {string}
 */
exports.binaryToAddressString = function (binaryString, addressFormat) {
  var binary = exports.minifyBinary(binaryString);
  if (binary.length === 0) {
    return '';
  }

  var indexIntoBinary = 0;

  // Parentheses in the split() regex cause the dividing elements to be captured
  // and also included in the return value.
  return addressFormat.split(/(\D+)/).map(function (formatPart) {
    var bitWidth = parseInt(formatPart, 10);
    if (isNaN(bitWidth)) {
      // Pass non-number parts of the format through, so we use the original
      // entered characters/layout for formatting.
      return formatPart;
    }

    var binarySlice = binary.substr(indexIntoBinary, bitWidth);
    var intVal = binarySlice.length > 0 ? exports.binaryToInt(binarySlice) : 0;
    indexIntoBinary += bitWidth;
    return intVal.toString();
  }).join('');
};

/**
 * Converts a formatted address string (decimal numbers with separators) into
 * binary with bit-widths for each part matching the given format.
 * @param {string} addressString
 * @param {AddressHeaderFormat} addressFormat
 * @returns {string}
 */
exports.addressStringToBinary = function (addressString, addressFormat) {
  if (addressString.length === 0) {
    return '';
  }

  // Actual user input, converted to a number[]
  var addressParts = addressString.toString().split(/\D+/).map(function (stringPart) {
    return parseInt(stringPart, 10);
  }).filter(function (numberPart) {
    return !isNaN(numberPart);
  });

  // Format, converted to a number[] where the numbers are bit-widths
  var partWidths = addressFormat.split(/\D+/).map(function (stringPart) {
    return parseInt(stringPart, 10);
  }).filter(function (numberPart) {
    return !isNaN(numberPart);
  });

  var partValue;
  var binary = '';
  for (var i = 0; i < partWidths.length; i++) {
    partValue = i < addressParts.length ? addressParts[i] : 0;
    binary = binary + exports.intToBinary(partValue, partWidths[i]);
  }
  return binary;
};

/**
 * Convert a binary string to a formatted representation, with chunks that
 * correspond to the parts of the address header.
 * @param {string} binaryString
 * @param {AddressHeaderFormat} addressFormat
 */
exports.formatBinaryForAddressHeader = function (binaryString, addressFormat) {
  var binary = exports.minifyBinary(binaryString);

  var partWidths = addressFormat.split(/\D+/).map(function (stringPart) {
    return parseInt(stringPart, 10);
  }).filter(function (numberPart) {
    return !isNaN(numberPart);
  });

  var chunks = [];
  var index = 0;
  partWidths.forEach(function (bitWidth) {
    var next = binary.substr(index, bitWidth);
    if (next.length > 0) {
      chunks.push(next);
    }
    index += bitWidth;
  });

  var next = binary.substr(index);
  if (next.length > 0) {
    chunks.push(next);
  }

  return chunks.join(' ');
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimUtils":"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js","Base64":"/home/ubuntu/staging/apps/node_modules/Base64/base64.js"}],"/home/ubuntu/staging/apps/node_modules/Base64/base64.js":[function(require,module,exports){
;(function () {

  var object = typeof exports != 'undefined' ? exports : this; // #8: web workers
  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  function InvalidCharacterError(message) {
    this.message = message;
  }
  InvalidCharacterError.prototype = new Error;
  InvalidCharacterError.prototype.name = 'InvalidCharacterError';

  // encoder
  // [https://gist.github.com/999166] by [https://github.com/nignag]
  object.btoa || (
  object.btoa = function (input) {
    var str = String(input);
    for (
      // initialize result and counter
      var block, charCode, idx = 0, map = chars, output = '';
      // if the next str index does not exist:
      //   change the mapping table to "="
      //   check if d has no fractional digits
      str.charAt(idx | 0) || (map = '=', idx % 1);
      // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
      output += map.charAt(63 & block >> 8 - idx % 1 * 8)
    ) {
      charCode = str.charCodeAt(idx += 3/4);
      if (charCode > 0xFF) {
        throw new InvalidCharacterError("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
      }
      block = block << 8 | charCode;
    }
    return output;
  });

  // decoder
  // [https://gist.github.com/1020396] by [https://github.com/atk]
  object.atob || (
  object.atob = function (input) {
    var str = String(input).replace(/=+$/, '');
    if (str.length % 4 == 1) {
      throw new InvalidCharacterError("'atob' failed: The string to be decoded is not correctly encoded.");
    }
    for (
      // initialize result and counters
      var bc = 0, bs, buffer, idx = 0, output = '';
      // get next character
      buffer = str.charAt(idx++);
      // character found in table? initialize bit storage and add its ascii value;
      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
        // and if not first of each 4 characters,
        // convert the first 8 bits to one ascii character
        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0
    ) {
      // try to find character in table (0-63, not found => -1)
      buffer = chars.indexOf(buffer);
    }
    return output;
  });

}());

},{}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimUtils.js":[function(require,module,exports){
/**
 * @overview Static helper methods for NetSim.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var utils = require('../utils');
var _ = utils.getLodash();
var i18n = require('./locale');
var NetSimConstants = require('./NetSimConstants');
var NetSimGlobals = require('./NetSimGlobals');

var logger = require('./NetSimLogger').getSingleton();

var EncodingType = NetSimConstants.EncodingType;

/**
 * Make a new SVG element, appropriately namespaced, wrapped in a jQuery
 * object for (semi-)easy manipulation.
 * @param {string} type - the tagname for the svg element.
 * @returns {jQuery} for chaining
 */
exports.jQuerySvgElement = function (type) {
  var newElement = $(document.createElementNS('http://www.w3.org/2000/svg', type));

  /**
   * Override addClass since jQuery addClass doesn't work on svg.
   * @param {string} className
   */
  newElement.addClass = function (className) {
    var oldClasses = newElement.attr('class');
    if (!oldClasses) {
      newElement.attr('class', className);
    } else if (!newElement.hasClass(className)) {
      newElement.attr('class', oldClasses + ' ' + className);
    }
    return newElement;
  };

  /**
   * Override removeClass since jQuery removeClass doesn't work on svg.
   * Removes the given classname if it exists on the element.
   * @param {string} className
   * @returns {jQuery} for chaining
   */
  newElement.removeClass = function (className) {
    var oldClasses = newElement.attr('class');
    if (oldClasses) {
      var newClasses = oldClasses.split(/\s+/g).filter(function (word) {
        return word !== className;
      }).join(' ');
      newElement.attr('class', newClasses);
    }
    return newElement;
  };

  /**
   * Override hasClass since jQuery hasClass doesn't work on svg.
   * Checks whether the element has the given class.
   * @param {string} className
   * @returns {boolean}
   */
  newElement.hasClass = function (className) {
    var oldClasses = newElement.attr('class');
    return oldClasses && oldClasses.split(/\s+/g).some(function (existingClass) {
      return existingClass === className;
    });
  };

  /**
   * Override toggleClass since jQuery toggleClass doesn't work on svg.
   *
   * Two versions:
   *
   * toggleClass(className) reverses the state of the class on the element;
   *   if it has the class it gets removed, if it doesn't have the class it
   *   gets added.
   *
   * toggleClass(className, shouldHaveClass) adds or removes the class on the
   *   element depending on the value of the second argument.
   *
   *
   * @param {string} className
   * @param {boolean} [shouldHaveClass]
   * @returns {jQuery} for chaining
   */
  newElement.toggleClass = function (className, shouldHaveClass) {
    // Default second argument - if not provided, we flip the current state
    shouldHaveClass = utils.valueOr(shouldHaveClass, !newElement.hasClass(className));

    if (shouldHaveClass) {
      newElement.addClass(className);
    } else {
      newElement.removeClass(className);
    }
    return newElement;
  };

  return newElement;
};

/**
 * Checks configuration against tab type to decide whether tab
 * of type should be shown.
 * @param {NetSimLevelConfiguration} levelConfig
 * @param {NetSimTabType} tabType
 */
exports.shouldShowTab = function (levelConfig, tabType) {
  return levelConfig.showTabs.indexOf(tabType) > -1;
};

/**
 * Get the localized string for the given encoding type.
 * @param {EncodingType} encodingType
 * @returns {string} localized encoding name
 */
exports.getEncodingLabel = function (encodingType) {
  if (encodingType === EncodingType.ASCII) {
    return i18n.ascii();
  } else if (encodingType === EncodingType.DECIMAL) {
    return i18n.decimal();
  } else if (encodingType === EncodingType.HEXADECIMAL) {
    return i18n.hex();
  } else if (encodingType === EncodingType.BINARY) {
    return i18n.binary();
  } else if (encodingType === EncodingType.A_AND_B) {
    return i18n.a_and_b();
  }
  return '';
};

/**
 * @param {Object} enumObj - Technically any object, but should be used with
 *        an enum like those found in NetSimConstants
 * @param {function} func - A function to call for each value in the enum,
 *        which gets passed the enum value.
 */
exports.forEachEnumValue = function (enumObj, func) {
  for (var enumKey in enumObj) {
    if (enumObj.hasOwnProperty(enumKey)) {
      func(enumObj[enumKey]);
    }
  }
};

/**
 * Rules used by serializeNumber and deserializeNumber to map unsupported
 * JavaScript values into JSON and back.
 * @type {{jsVal: number, jsonVal: string}[]}
 * @readonly
 */
var NUMBER_SERIALIZATION_RULES = [{ jsVal: Infinity, jsonVal: 'Infinity' }, { jsVal: -Infinity, jsonVal: '-Infinity' }, { jsVal: NaN, jsonVal: 'NaN' }, { jsVal: undefined, jsonVal: 'undefined' }];

/**
 * Checks that the provided value is actually the special value NaN, unlike
 * standard isNaN which returns true for anything that's not a number.
 * @param {*} val - any value
 * @returns {boolean}
 */
var isExactlyNaN = function isExactlyNaN(val) {
  // NaN is the only value in JavaScript that is not exactly equal to itself.
  // Therefore, if val !== val, then val must be NaN.
  return val !== val;
};

/**
 * Because JSON doesn't support the values Infinity, NaN, or undefined, you can
 * use this method to store those values in JSON as strings.
 * @param {number|NaN} num
 * @returns {number|string}
 */
exports.serializeNumber = function (num) {
  var applicableRule = _.find(NUMBER_SERIALIZATION_RULES, function (rule) {
    return rule.jsVal === num || isExactlyNaN(rule.jsVal) && isExactlyNaN(num);
  });
  return applicableRule ? applicableRule.jsonVal : num;
};

/**
 * Because JSON doesn't support the values Infinity, NaN, or undefined, you can
 * use this method to retrieve a value from JSON that is either a number or one
 * of those values.
 * @param {number|string} storedNum
 * @returns {number|NaN}
 */
exports.deserializeNumber = function (storedNum) {
  var applicableRule = _.find(NUMBER_SERIALIZATION_RULES, function (rule) {
    return rule.jsonVal === storedNum;
  });
  return applicableRule ? applicableRule.jsVal : storedNum;
};

/**
 * Helper for converting from an older header-spec format to a new, simpler one.
 * Old format: {key:{string}, bits:{number}}[]
 * New format: string[]
 * If we detect the old format, we return a spec in the new format.
 * @param {Array} spec
 * @returns {Array}
 */
exports.scrubHeaderSpecForBackwardsCompatibility = function (spec) {
  var foundOldFormat = false;
  var scrubbedSpec = [];
  spec.forEach(function (specEntry) {
    if (typeof specEntry === 'string') {
      // This is new new format, we can just copy it over.
      scrubbedSpec.push(specEntry);
    } else if (specEntry !== null && typeof specEntry === 'object') {
      // This is the old {key:'', bits:0} format.  We just want the key.
      scrubbedSpec.push(specEntry.key);
      foundOldFormat = true;
    }
  });

  // Issue a warning if an old format got converted, so we know to update
  // the level.
  if (foundOldFormat) {
    logger.warn("Converting old header specification format to new format." + " This level should be updated to use the new format.");
  }

  return scrubbedSpec;
};

/**
 * @param {NetSimLevelConfiguration} levelConfig
 * @returns {NetSimLevelConfiguration} same thing, but with certain values
 *          converted or cleaned.
 * @private
 */
exports.scrubLevelConfiguration_ = function (levelConfig) {
  var scrubbedLevel = _.clone(levelConfig, true);

  // Convert old header spec format to new header spec format
  scrubbedLevel.routerExpectsPacketHeader = exports.scrubHeaderSpecForBackwardsCompatibility(scrubbedLevel.routerExpectsPacketHeader);
  scrubbedLevel.clientInitialPacketHeader = exports.scrubHeaderSpecForBackwardsCompatibility(scrubbedLevel.clientInitialPacketHeader);

  // Coerce certain values to string that might have been mistaken for numbers
  scrubbedLevel.addressFormat = scrubbedLevel.addressFormat.toString();

  // Explicitly list fields that we suspect may have a string value that
  // needs to be converted to a number, like "Infinity"
  scrubbedLevel.defaultPacketSizeLimit = exports.deserializeNumber(scrubbedLevel.defaultPacketSizeLimit);

  // Packet Size cannot be infinity; defaults to 8kb
  if (scrubbedLevel.defaultPacketSizeLimit === Infinity) {
    scrubbedLevel.defaultPacketSizeLimit = 8192;
  }

  scrubbedLevel.defaultBitRateBitsPerSecond = exports.deserializeNumber(scrubbedLevel.defaultBitRateBitsPerSecond);
  scrubbedLevel.defaultChunkSizeBits = exports.deserializeNumber(scrubbedLevel.defaultChunkSizeBits);
  scrubbedLevel.defaultRouterBandwidth = exports.deserializeNumber(scrubbedLevel.defaultRouterBandwidth);
  scrubbedLevel.defaultRouterMemory = exports.deserializeNumber(scrubbedLevel.defaultRouterMemory);

  // Generate a warning if we see a possible missed string-to-number conversion
  Object.keys(scrubbedLevel).filter(function (key) {
    // Ignore level params with underscores, they are the dashboard versions
    // of the camelCase parameters that the app actually uses.
    return !/_/.test(key);
  }).forEach(function (key) {
    var unconvertedValue = NUMBER_SERIALIZATION_RULES.some(function (rule) {
      return scrubbedLevel[key] === rule.jsonVal;
    });
    if (unconvertedValue) {
      logger.warn("Level option '" + key + "' has unconverted string value '" + scrubbedLevel[key] + "'");
    }
  });

  return scrubbedLevel;
};

/**
 * Converts a number of bits into a localized representation of that data
 * size in bytes, kilobytes, megabytes, gigabytes.
 * @param {number} bits
 * @returns {string} - localized string representation of size in bytes
 */
exports.bitsToLocalizedRoundedBytesize = function (bits) {
  if (bits === Infinity) {
    return i18n.unlimited();
  }

  var gbytes = Math.floor(bits / NetSimConstants.BITS_PER_GIGABYTE);
  if (gbytes > 0) {
    return i18n.x_GBytes({ x: gbytes });
  }

  var mbytes = Math.floor(bits / NetSimConstants.BITS_PER_MEGABYTE);
  if (mbytes > 0) {
    return i18n.x_MBytes({ x: mbytes });
  }

  var kbytes = Math.floor(bits / NetSimConstants.BITS_PER_KILOBYTE);
  if (kbytes > 0) {
    return i18n.x_KBytes({ x: kbytes });
  }

  var bytes = Math.floor(bits / NetSimConstants.BITS_PER_BYTE);
  if (bytes > 0) {
    return i18n.x_Bytes({ x: bytes });
  }

  return i18n.x_bits({ x: bits });
};

/**
 * Converts a bitrate into a localized representation of that data
 * size in bits/sec, kilobits, megabits, gigabits.
 * @param {number} bitsPerSecond
 * @returns {string} - localized string representation of speed in bits
 */
exports.bitrateToLocalizedRoundedBitrate = function (bitsPerSecond) {
  if (bitsPerSecond === Infinity) {
    return i18n.unlimited();
  }

  var gbps = Math.floor(bitsPerSecond / NetSimConstants.BITS_PER_GIGABIT);
  if (gbps > 0) {
    return i18n.x_Gbps({ x: gbps });
  }

  var mbps = Math.floor(bitsPerSecond / NetSimConstants.BITS_PER_MEGABIT);
  if (mbps > 0) {
    return i18n.x_Mbps({ x: mbps });
  }

  var kbps = Math.floor(bitsPerSecond / NetSimConstants.BITS_PER_KILOBIT);
  if (kbps > 0) {
    return i18n.x_Kbps({ x: kbps });
  }

  var bps = Math.floor(bitsPerSecond * 100) / 100;
  return i18n.x_bps({ x: bps });
};

exports.zeroPadLeft = function (string, desiredWidth) {
  var padding = '0'.repeat(desiredWidth);
  return (padding + string).slice(-desiredWidth);
};

exports.zeroPadRight = function (string, desiredWidth) {
  var padding = '0'.repeat(desiredWidth);
  return (string + padding).substr(0, desiredWidth);
};

/**
 * Creates a Continue/Finish button on the given NetSimPanel (in its header).
 * @param {NetSimPanel} onPanel
 * @static
 */
exports.makeContinueButton = function (onPanel) {
  onPanel.addButton(i18n.continueButton({ caret: '<i class="fa fa-caret-right"></i>' }), function (jQueryEvent) {
    if (!$(jQueryEvent.target).is(':disabled')) {
      NetSimGlobals.completeLevelAndContinue();
    }
  }, {
    secondary: false,
    classes: ['submitButton']
  });
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./NetSimConstants":"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js","./NetSimGlobals":"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js","./NetSimLogger":"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogger.js","./locale":"/home/ubuntu/staging/apps/build/js/netsim/locale.js"}],"/home/ubuntu/staging/apps/build/js/netsim/locale.js":[function(require,module,exports){
// locale for netsim

"use strict";

module.exports = window.blockly.netsim_locale;

},{}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimLogger.js":[function(require,module,exports){
/**
 * @overview Utility class wrapping more granular log behavior that isn't
 * available in all browsers.  Also makes it easy to turn logging on and off
 * in tests.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,

 maxlen: 120
 */
'use strict';

/**
 * Logging API to control log levels and support different browsers
 * @constructor
 * @param {Console} window console API
 * @param {LogLevel} verbosity
 */
var NetSimLogger = module.exports = function (outputConsole, verbosity /*=VERBOSE*/) {
  /**
   * @type {Console}
   * @private
   */
  this.outputConsole_ = outputConsole;

  /**
   * Always mapped to console.log, or no-op if not available.
   * @type {Function}
   * @private
   */
  this.log_ = function () {};

  /**
   * If configured for info logging, gets mapped to console.info,
   * falls back to console.log, or no-op.
   * @type {Function}
   */
  this.info = function () {};

  /**
   * If configured for warning logging, gets mapped to console.warn,
   * falls back to console.log, or no-op.
   * @type {Function}
   */
  this.warn = function () {};

  /**
   * If configured for error logging, gets mapped to console.error,
   * falls back to console.log, or no-op.
   * @type {Function}
   */
  this.error = function () {};

  this.setVerbosity(undefined === verbosity ? LogLevel.VERBOSE : verbosity);
};

/**
 * Log verbosity levels enum.
 * @readonly
 * @enum {number}
 */
var LogLevel = {
  NONE: 0,
  ERROR: 1,
  WARN: 2,
  INFO: 3,
  VERBOSE: 4
};
NetSimLogger.LogLevel = LogLevel;

/**
 * Global singleton
 * @type {NetSimLogger}
 */
var singletonInstance;

/**
 * Static getter/lazy-creator for the global singleton instance.
 * @returns {NetSimLogger}
 */
NetSimLogger.getSingleton = function () {
  if (singletonInstance === undefined) {
    singletonInstance = new NetSimLogger(console, LogLevel.WARN);
  }
  return singletonInstance;
};

/**
 * Binds internal function calls according to given verbosity level.
 * @param verbosity
 */
NetSimLogger.prototype.setVerbosity = function (verbosity) {
  // Note: We don't call this.outputConsole_.log.bind here, because in IE9 the
  // console's logging methods do not inherit from Function.

  this.log_ = this.outputConsole_ && this.outputConsole_.log ? Function.prototype.bind.call(this.outputConsole_.log, this.outputConsole_) : function () {};

  if (verbosity >= LogLevel.INFO) {
    this.info = this.outputConsole_ && this.outputConsole_.info ? Function.prototype.bind.call(this.outputConsole_.info, this.outputConsole_) : this.log_;
  } else {
    this.info = function () {};
  }

  if (verbosity >= LogLevel.WARN) {
    this.warn = this.outputConsole_ && this.outputConsole_.warn ? Function.prototype.bind.call(this.outputConsole_.warn, this.outputConsole_) : this.log_;
  } else {
    this.warn = function () {};
  }

  if (verbosity >= LogLevel.ERROR) {
    this.error = this.outputConsole_ && this.outputConsole_.error ? Function.prototype.bind.call(this.outputConsole_.error, this.outputConsole_) : this.log_;
  } else {
    this.error = function () {};
  }
};

/**
 * Writes to output, depending on log level
 * @param {*} message
 * @param {LogLevel} logLevel
 */
NetSimLogger.prototype.log = function (message, logLevel /*=INFO*/) {
  if (undefined === logLevel) {
    logLevel = LogLevel.INFO;
  }

  switch (logLevel) {
    case LogLevel.ERROR:
      this.error(message);
      break;
    case LogLevel.WARN:
      this.warn(message);
      break;
    case LogLevel.INFO:
      this.info(message);
      break;
    default:
      this.log_(message);
  }
};

},{}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimGlobals.js":[function(require,module,exports){
/**
 * @overview Global singleton used to simplify certain cross-cutting concerns,
 *           including:
 *
 *           Access to level configuration.
 *           Access to environment-specific asset URLs.
 *           Reproducible random number functions for easy testing.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var seedrandom = require('seedrandom');

/**
 * Reference to root StudioApp controller
 * @type {StudioApp}
 * @private
 */
var studioApp_ = null;

/**
 * Reference to root NetSim controller
 * @type {NetSim}
 * @private
 */
var netsim_ = null;

/**
 * Replacable pseudo-random number generator function that lets us set a global
 * random seed if we wish.
 * @type {function}
 * @private
 */
var pseudoRandomNumberFunction_ = Math.random;

/**
 * Get a random integer in the given range.
 * @param {number} low inclusive lower end of range
 * @param {number} high exclusive upper end of range
 * @returns {number}
 */
var randomIntInRange = function randomIntInRange(low, high) {
  return Math.floor(pseudoRandomNumberFunction_() * (high - low)) + low;
};

/**
 * Provide singleton access to global simulation settings
 */
module.exports = {

  /**
   * Set the root controllers that can be used for global operations.
   * @param {StudioApp} studioApp
   * @param {NetSim} netsim
   */
  setRootControllers: function setRootControllers(studioApp, netsim) {
    studioApp_ = studioApp;
    netsim_ = netsim;
  },

  /**
   * @returns {NetSimLevelConfiguration}
   */
  getLevelConfig: function getLevelConfig() {
    return netsim_.level;
  },

  /**
   * @returns {PubSubConfig}
   */
  getPubSubConfig: function getPubSubConfig() {
    return {
      usePusher: netsim_.usePusher,
      pusherApplicationKey: netsim_.pusherApplicationKey
    };
  },

  /**
   * @returns {number}
   */
  getGlobalMaxRouters: function getGlobalMaxRouters() {
    return netsim_.globalMaxRouters;
  },

  /**
   * @returns {function}
   */
  getAssetUrlFunction: function getAssetUrlFunction() {
    return studioApp_.assetUrl;
  },

  /**
   * Trigger a layout update of the right column, received/sent/send panels.
   */
  updateLayout: function updateLayout() {
    netsim_.updateLayout();
  },

  /**
   * Trigger an attempt to complete the current level and continue to the next.
   */
  completeLevelAndContinue: function completeLevelAndContinue() {
    netsim_.completeLevelAndContinue();
  },

  /**
   * Reseed the random number generator.  If this is never called, the default
   * Math.random function is used as the generator.
   * @param {string} newSeed
   */
  setRandomSeed: function setRandomSeed(newSeed) {
    pseudoRandomNumberFunction_ = seedrandom(newSeed);
  },

  /**
   * @returns {number} a random value between 0 and 1
   */
  random: function random() {
    return pseudoRandomNumberFunction_();
  },

  /**
   * Get a random integer in the given range.
   * @param {number} low inclusive lower end of range
   * @param {number} high exclusive upper end of range
   * @returns {number}
   */
  randomIntInRange: randomIntInRange,

  /**
   * Get a random item out of a collection
   * @param {Array} collection
   * @returns {*} undefined if collection is empty
   */
  randomPickOne: function randomPickOne(collection) {
    var size = collection.length;
    if (size === 0) {
      return undefined;
    }

    return collection[randomIntInRange(0, size)];
  }

};

},{"seedrandom":"/home/ubuntu/staging/apps/node_modules/seedrandom/index.js"}],"/home/ubuntu/staging/apps/node_modules/seedrandom/index.js":[function(require,module,exports){
// A library of seedable RNGs implemented in Javascript.
//
// Usage:
//
// var seedrandom = require('seedrandom');
// var random = seedrandom(1); // or any seed.
// var x = random();       // 0 <= x < 1.  Every bit is random.
// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.

// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.
// Period: ~2^116
// Reported to pass all BigCrush tests.
var alea = require('./lib/alea');

// xor128, a pure xor-shift generator by George Marsaglia.
// Period: 2^128-1.
// Reported to fail: MatrixRank and LinearComp.
var xor128 = require('./lib/xor128');

// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.
// Period: 2^192-2^32
// Reported to fail: CollisionOver, SimpPoker, and LinearComp.
var xorwow = require('./lib/xorwow');

// xorshift7, by François Panneton and Pierre L'ecuyer, takes
// a different approach: it adds robustness by allowing more shifts
// than Marsaglia's original three.  It is a 7-shift generator
// with 256 bits, that passes BigCrush with no systmatic failures.
// Period 2^256-1.
// No systematic BigCrush failures reported.
var xorshift7 = require('./lib/xorshift7');

// xor4096, by Richard Brent, is a 4096-bit xor-shift with a
// very long period that also adds a Weyl generator. It also passes
// BigCrush with no systematic failures.  Its long period may
// be useful if you have many generators and need to avoid
// collisions.
// Period: 2^4128-2^32.
// No systematic BigCrush failures reported.
var xor4096 = require('./lib/xor4096');

// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random
// number generator derived from ChaCha, a modern stream cipher.
// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf
// Period: ~2^127
// No systematic BigCrush failures reported.
var tychei = require('./lib/tychei');

// The original ARC4-based prng included in this library.
// Period: ~2^1600
var sr = require('./seedrandom');

sr.alea = alea;
sr.xor128 = xor128;
sr.xorwow = xorwow;
sr.xorshift7 = xorshift7;
sr.xor4096 = xor4096;
sr.tychei = tychei;

module.exports = sr;

},{"./lib/alea":"/home/ubuntu/staging/apps/node_modules/seedrandom/lib/alea.js","./lib/tychei":"/home/ubuntu/staging/apps/node_modules/seedrandom/lib/tychei.js","./lib/xor128":"/home/ubuntu/staging/apps/node_modules/seedrandom/lib/xor128.js","./lib/xor4096":"/home/ubuntu/staging/apps/node_modules/seedrandom/lib/xor4096.js","./lib/xorshift7":"/home/ubuntu/staging/apps/node_modules/seedrandom/lib/xorshift7.js","./lib/xorwow":"/home/ubuntu/staging/apps/node_modules/seedrandom/lib/xorwow.js","./seedrandom":"/home/ubuntu/staging/apps/node_modules/seedrandom/seedrandom.js"}],"/home/ubuntu/staging/apps/node_modules/seedrandom/seedrandom.js":[function(require,module,exports){
/*
Copyright 2014 David Bau.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/

(function (pool, math) {
//
// The following constants are related to IEEE 754 limits.
//
var global = this,
    width = 256,        // each RC4 output is 0 <= x < 256
    chunks = 6,         // at least six RC4 outputs for each double
    digits = 52,        // there are 52 significant digits in a double
    rngname = 'random', // rngname: name for Math.random and Math.seedrandom
    startdenom = math.pow(width, chunks),
    significance = math.pow(2, digits),
    overflow = significance * 2,
    mask = width - 1,
    nodecrypto;         // node.js crypto module, initialized at the bottom.

//
// seedrandom()
// This is the seedrandom function described above.
//
function seedrandom(seed, options, callback) {
  var key = [];
  options = (options == true) ? { entropy: true } : (options || {});

  // Flatten the seed string or build one from local entropy if needed.
  var shortseed = mixkey(flatten(
    options.entropy ? [seed, tostring(pool)] :
    (seed == null) ? autoseed() : seed, 3), key);

  // Use the seed to initialize an ARC4 generator.
  var arc4 = new ARC4(key);

  // This function returns a random double in [0, 1) that contains
  // randomness in every bit of the mantissa of the IEEE 754 value.
  var prng = function() {
    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48
        d = startdenom,                 //   and denominator d = 2 ^ 48.
        x = 0;                          //   and no 'extra last byte'.
    while (n < significance) {          // Fill up all significant digits by
      n = (n + x) * width;              //   shifting numerator and
      d *= width;                       //   denominator and generating a
      x = arc4.g(1);                    //   new least-significant-byte.
    }
    while (n >= overflow) {             // To avoid rounding up, before adding
      n /= 2;                           //   last byte, shift everything
      d /= 2;                           //   right using integer math until
      x >>>= 1;                         //   we have exactly the desired bits.
    }
    return (n + x) / d;                 // Form the number within [0, 1).
  };

  prng.int32 = function() { return arc4.g(4) | 0; }
  prng.quick = function() { return arc4.g(4) / 0x100000000; }
  prng.double = prng;

  // Mix the randomness into accumulated entropy.
  mixkey(tostring(arc4.S), pool);

  // Calling convention: what to return as a function of prng, seed, is_math.
  return (options.pass || callback ||
      function(prng, seed, is_math_call, state) {
        if (state) {
          // Load the arc4 state from the given state if it has an S array.
          if (state.S) { copy(state, arc4); }
          // Only provide the .state method if requested via options.state.
          prng.state = function() { return copy(arc4, {}); }
        }

        // If called as a method of Math (Math.seedrandom()), mutate
        // Math.random because that is how seedrandom.js has worked since v1.0.
        if (is_math_call) { math[rngname] = prng; return seed; }

        // Otherwise, it is a newer calling convention, so return the
        // prng directly.
        else return prng;
      })(
  prng,
  shortseed,
  'global' in options ? options.global : (this == math),
  options.state);
}
math['seed' + rngname] = seedrandom;

//
// ARC4
//
// An ARC4 implementation.  The constructor takes a key in the form of
// an array of at most (width) integers that should be 0 <= x < (width).
//
// The g(count) method returns a pseudorandom integer that concatenates
// the next (count) outputs from ARC4.  Its return value is a number x
// that is in the range 0 <= x < (width ^ count).
//
function ARC4(key) {
  var t, keylen = key.length,
      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];

  // The empty key [] is treated as [0].
  if (!keylen) { key = [keylen++]; }

  // Set up S using the standard key scheduling algorithm.
  while (i < width) {
    s[i] = i++;
  }
  for (i = 0; i < width; i++) {
    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
    s[j] = t;
  }

  // The "g" method returns the next (count) outputs as one number.
  (me.g = function(count) {
    // Using instance members instead of closure state nearly doubles speed.
    var t, r = 0,
        i = me.i, j = me.j, s = me.S;
    while (count--) {
      t = s[i = mask & (i + 1)];
      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
    }
    me.i = i; me.j = j;
    return r;
    // For robust unpredictability, the function call below automatically
    // discards an initial batch of values.  This is called RC4-drop[256].
    // See http://google.com/search?q=rsa+fluhrer+response&btnI
  })(width);
}

//
// copy()
// Copies internal state of ARC4 to or from a plain object.
//
function copy(f, t) {
  t.i = f.i;
  t.j = f.j;
  t.S = f.S.slice();
  return t;
};

//
// flatten()
// Converts an object tree to nested arrays of strings.
//
function flatten(obj, depth) {
  var result = [], typ = (typeof obj), prop;
  if (depth && typ == 'object') {
    for (prop in obj) {
      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
    }
  }
  return (result.length ? result : typ == 'string' ? obj : obj + '\0');
}

//
// mixkey()
// Mixes a string seed into a key that is an array of integers, and
// returns a shortened string seed that is equivalent to the result key.
//
function mixkey(seed, key) {
  var stringseed = seed + '', smear, j = 0;
  while (j < stringseed.length) {
    key[mask & j] =
      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
  }
  return tostring(key);
}

//
// autoseed()
// Returns an object for autoseeding, using window.crypto and Node crypto
// module if available.
//
function autoseed() {
  try {
    if (nodecrypto) { return tostring(nodecrypto.randomBytes(width)); }
    var out = new Uint8Array(width);
    (global.crypto || global.msCrypto).getRandomValues(out);
    return tostring(out);
  } catch (e) {
    var browser = global.navigator,
        plugins = browser && browser.plugins;
    return [+new Date, global, plugins, global.screen, tostring(pool)];
  }
}

//
// tostring()
// Converts an array of charcodes to a string
//
function tostring(a) {
  return String.fromCharCode.apply(0, a);
}

//
// When seedrandom.js is loaded, we immediately mix a few bits
// from the built-in RNG into the entropy pool.  Because we do
// not want to interfere with deterministic PRNG state later,
// seedrandom will not call math.random on its own again after
// initialization.
//
mixkey(math.random(), pool);

//
// Nodejs and AMD support: export the implementation as a module using
// either convention.
//
if ((typeof module) == 'object' && module.exports) {
  module.exports = seedrandom;
  // When in node.js, try using crypto package for autoseeding.
  try {
    nodecrypto = require('crypto');
  } catch (ex) {}
} else if ((typeof define) == 'function' && define.amd) {
  define(function() { return seedrandom; });
}

// End anonymous scope, and pass initial values.
})(
  [],     // pool: entropy pool starts empty
  Math    // math: package containing random, pow, and seedrandom
);

},{"crypto":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/index.js":[function(require,module,exports){
'use strict'

exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')
exports.createHash = exports.Hash = require('create-hash')
exports.createHmac = exports.Hmac = require('create-hmac')

var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(Object.keys(require('browserify-sign/algos')))
exports.getHashes = function () {
  return hashes
}

var p = require('pbkdf2')
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = require('browserify-cipher')
;[
  'Cipher',
  'createCipher',
  'Cipheriv',
  'createCipheriv',
  'Decipher',
  'createDecipher',
  'Decipheriv',
  'createDecipheriv',
  'getCiphers',
  'listCiphers'
].forEach(function (key) {
  exports[key] = aes[key]
})

var dh = require('diffie-hellman')
;[
  'DiffieHellmanGroup',
  'createDiffieHellmanGroup',
  'getDiffieHellman',
  'createDiffieHellman',
  'DiffieHellman'
].forEach(function (key) {
  exports[key] = dh[key]
})

var sign = require('browserify-sign')
;[
  'createSign',
  'Sign',
  'createVerify',
  'Verify'
].forEach(function (key) {
  exports[key] = sign[key]
})

exports.createECDH = require('create-ecdh')

var publicEncrypt = require('public-encrypt')

;[
  'publicEncrypt',
  'privateEncrypt',
  'publicDecrypt',
  'privateDecrypt'
].forEach(function (key) {
  exports[key] = publicEncrypt[key]
})

// the least I can do is make error messages for the rest of the node.js/crypto api.
;[
  'createCredentials'
].forEach(function (name) {
  exports[name] = function () {
    throw new Error([
      'sorry, ' + name + ' is not implemented yet',
      'we accept pull requests',
      'https://github.com/crypto-browserify/crypto-browserify'
    ].join('\n'))
  }
})

},{"browserify-cipher":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/browser.js","browserify-sign":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/browser.js","browserify-sign/algos":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/algos.js","create-ecdh":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/browser.js","create-hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/browser.js","create-hmac":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hmac/browser.js","diffie-hellman":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/browser.js","pbkdf2":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/pbkdf2/browser.js","public-encrypt":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/browser.js","randombytes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/randombytes/browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/browser.js":[function(require,module,exports){
exports.publicEncrypt = require('./publicEncrypt');
exports.privateDecrypt = require('./privateDecrypt');

exports.privateEncrypt = function privateEncrypt(key, buf) {
  return exports.publicEncrypt(key, buf, true);
};

exports.publicDecrypt = function publicDecrypt(key, buf) {
  return exports.privateDecrypt(key, buf, true);
};
},{"./privateDecrypt":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/privateDecrypt.js","./publicEncrypt":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/publicEncrypt.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/publicEncrypt.js":[function(require,module,exports){
(function (Buffer){
var parseKeys = require('parse-asn1');
var randomBytes = require('randombytes');
var createHash = require('create-hash');
var mgf = require('./mgf');
var xor = require('./xor');
var bn = require('bn.js');
var withPublic = require('./withPublic');
var crt = require('browserify-rsa');

var constants = {
  RSA_PKCS1_OAEP_PADDING: 4,
  RSA_PKCS1_PADDIN: 1,
  RSA_NO_PADDING: 3
};

module.exports = function publicEncrypt(public_key, msg, reverse) {
  var padding;
  if (public_key.padding) {
    padding = public_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }
  var key = parseKeys(public_key);
  var paddedMsg;
  if (padding === 4) {
    paddedMsg = oaep(key, msg);
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    paddedMsg = new bn(msg);
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus');
    }
  } else {
    throw new Error('unknown padding');
  }
  if (reverse) {
    return crt(paddedMsg, key);
  } else {
    return withPublic(paddedMsg, key);
  }
};

function oaep(key, msg){
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long');
  }
  var ps = new Buffer(k - mLen - hLen2 - 2);
  ps.fill(0);
  var dblen = k - hLen - 1;
  var seed = randomBytes(hLen);
  var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));
  var maskedSeed = xor(seed, mgf(maskedDb, hLen));
  return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));
}
function pkcs1(key, msg, reverse){
  var mLen = msg.length;
  var k = key.modulus.byteLength();
  if (mLen > k - 11) {
    throw new Error('message too long');
  }
  var ps;
  if (reverse) {
    ps = new Buffer(k - mLen - 3);
    ps.fill(0xff);
  } else {
    ps = nonZero(k - mLen - 3);
  }
  return new bn(Buffer.concat([new Buffer([0, reverse?1:2]), ps, new Buffer([0]), msg], k));
}
function nonZero(len, crypto) {
  var out = new Buffer(len);
  var i = 0;
  var cache = randomBytes(len*2);
  var cur = 0;
  var num;
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len*2);
      cur = 0;
    }
    num = cache[cur++];
    if (num) {
      out[i++] = num;
    }
  }
  return out;
}
}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvcHVibGljRW5jcnlwdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHBhcnNlS2V5cyA9IHJlcXVpcmUoJ3BhcnNlLWFzbjEnKTtcbnZhciByYW5kb21CeXRlcyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJyk7XG52YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJyk7XG52YXIgbWdmID0gcmVxdWlyZSgnLi9tZ2YnKTtcbnZhciB4b3IgPSByZXF1aXJlKCcuL3hvcicpO1xudmFyIGJuID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciB3aXRoUHVibGljID0gcmVxdWlyZSgnLi93aXRoUHVibGljJyk7XG52YXIgY3J0ID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1yc2EnKTtcblxudmFyIGNvbnN0YW50cyA9IHtcbiAgUlNBX1BLQ1MxX09BRVBfUEFERElORzogNCxcbiAgUlNBX1BLQ1MxX1BBRERJTjogMSxcbiAgUlNBX05PX1BBRERJTkc6IDNcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcHVibGljRW5jcnlwdChwdWJsaWNfa2V5LCBtc2csIHJldmVyc2UpIHtcbiAgdmFyIHBhZGRpbmc7XG4gIGlmIChwdWJsaWNfa2V5LnBhZGRpbmcpIHtcbiAgICBwYWRkaW5nID0gcHVibGljX2tleS5wYWRkaW5nO1xuICB9IGVsc2UgaWYgKHJldmVyc2UpIHtcbiAgICBwYWRkaW5nID0gMTtcbiAgfSBlbHNlIHtcbiAgICBwYWRkaW5nID0gNDtcbiAgfVxuICB2YXIga2V5ID0gcGFyc2VLZXlzKHB1YmxpY19rZXkpO1xuICB2YXIgcGFkZGVkTXNnO1xuICBpZiAocGFkZGluZyA9PT0gNCkge1xuICAgIHBhZGRlZE1zZyA9IG9hZXAoa2V5LCBtc2cpO1xuICB9IGVsc2UgaWYgKHBhZGRpbmcgPT09IDEpIHtcbiAgICBwYWRkZWRNc2cgPSBwa2NzMShrZXksIG1zZywgcmV2ZXJzZSk7XG4gIH0gZWxzZSBpZiAocGFkZGluZyA9PT0gMykge1xuICAgIHBhZGRlZE1zZyA9IG5ldyBibihtc2cpO1xuICAgIGlmIChwYWRkZWRNc2cuY21wKGtleS5tb2R1bHVzKSA+PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgdG9vIGxvbmcgZm9yIG1vZHVsdXMnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIHBhZGRpbmcnKTtcbiAgfVxuICBpZiAocmV2ZXJzZSkge1xuICAgIHJldHVybiBjcnQocGFkZGVkTXNnLCBrZXkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB3aXRoUHVibGljKHBhZGRlZE1zZywga2V5KTtcbiAgfVxufTtcblxuZnVuY3Rpb24gb2FlcChrZXksIG1zZyl7XG4gIHZhciBrID0ga2V5Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICB2YXIgbUxlbiA9IG1zZy5sZW5ndGg7XG4gIHZhciBpSGFzaCA9IGNyZWF0ZUhhc2goJ3NoYTEnKS51cGRhdGUobmV3IEJ1ZmZlcignJykpLmRpZ2VzdCgpO1xuICB2YXIgaExlbiA9IGlIYXNoLmxlbmd0aDtcbiAgdmFyIGhMZW4yID0gMiAqIGhMZW47XG4gIGlmIChtTGVuID4gayAtIGhMZW4yIC0gMikge1xuICAgIHRocm93IG5ldyBFcnJvcignbWVzc2FnZSB0b28gbG9uZycpO1xuICB9XG4gIHZhciBwcyA9IG5ldyBCdWZmZXIoayAtIG1MZW4gLSBoTGVuMiAtIDIpO1xuICBwcy5maWxsKDApO1xuICB2YXIgZGJsZW4gPSBrIC0gaExlbiAtIDE7XG4gIHZhciBzZWVkID0gcmFuZG9tQnl0ZXMoaExlbik7XG4gIHZhciBtYXNrZWREYiA9IHhvcihCdWZmZXIuY29uY2F0KFtpSGFzaCwgcHMsIG5ldyBCdWZmZXIoWzFdKSwgbXNnXSwgZGJsZW4pLCBtZ2Yoc2VlZCwgZGJsZW4pKTtcbiAgdmFyIG1hc2tlZFNlZWQgPSB4b3Ioc2VlZCwgbWdmKG1hc2tlZERiLCBoTGVuKSk7XG4gIHJldHVybiBuZXcgYm4oQnVmZmVyLmNvbmNhdChbbmV3IEJ1ZmZlcihbMF0pLCBtYXNrZWRTZWVkLCBtYXNrZWREYl0sIGspKTtcbn1cbmZ1bmN0aW9uIHBrY3MxKGtleSwgbXNnLCByZXZlcnNlKXtcbiAgdmFyIG1MZW4gPSBtc2cubGVuZ3RoO1xuICB2YXIgayA9IGtleS5tb2R1bHVzLmJ5dGVMZW5ndGgoKTtcbiAgaWYgKG1MZW4gPiBrIC0gMTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ21lc3NhZ2UgdG9vIGxvbmcnKTtcbiAgfVxuICB2YXIgcHM7XG4gIGlmIChyZXZlcnNlKSB7XG4gICAgcHMgPSBuZXcgQnVmZmVyKGsgLSBtTGVuIC0gMyk7XG4gICAgcHMuZmlsbCgweGZmKTtcbiAgfSBlbHNlIHtcbiAgICBwcyA9IG5vblplcm8oayAtIG1MZW4gLSAzKTtcbiAgfVxuICByZXR1cm4gbmV3IGJuKEJ1ZmZlci5jb25jYXQoW25ldyBCdWZmZXIoWzAsIHJldmVyc2U/MToyXSksIHBzLCBuZXcgQnVmZmVyKFswXSksIG1zZ10sIGspKTtcbn1cbmZ1bmN0aW9uIG5vblplcm8obGVuLCBjcnlwdG8pIHtcbiAgdmFyIG91dCA9IG5ldyBCdWZmZXIobGVuKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgY2FjaGUgPSByYW5kb21CeXRlcyhsZW4qMik7XG4gIHZhciBjdXIgPSAwO1xuICB2YXIgbnVtO1xuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIGlmIChjdXIgPT09IGNhY2hlLmxlbmd0aCkge1xuICAgICAgY2FjaGUgPSByYW5kb21CeXRlcyhsZW4qMik7XG4gICAgICBjdXIgPSAwO1xuICAgIH1cbiAgICBudW0gPSBjYWNoZVtjdXIrK107XG4gICAgaWYgKG51bSkge1xuICAgICAgb3V0W2krK10gPSBudW07XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXQ7XG59Il19
},{"./mgf":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/mgf.js","./withPublic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/withPublic.js","./xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/xor.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/bn.js/lib/bn.js","browserify-rsa":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/browserify-rsa/index.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","create-hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/browser.js","parse-asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/index.js","randombytes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/randombytes/browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/privateDecrypt.js":[function(require,module,exports){
(function (Buffer){
var parseKeys = require('parse-asn1');
var mgf = require('./mgf');
var xor = require('./xor');
var bn = require('bn.js');
var crt = require('browserify-rsa');
var createHash = require('create-hash');
var withPublic = require('./withPublic');
module.exports = function privateDecrypt(private_key, enc, reverse) {
  var padding;
  if (private_key.padding) {
    padding = private_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }
  
  var key = parseKeys(private_key);
  var k = key.modulus.byteLength();
  if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error');
  }
  var msg;
  if (reverse) {
    msg = withPublic(new bn(enc), key);
  } else {
    msg = crt(enc, key);
  }
  var zBuffer = new Buffer(k - msg.length);
  zBuffer.fill(0);
  msg = Buffer.concat([zBuffer, msg], k);
  if (padding === 4) {
    return oaep(key, msg);
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    return msg;
  } else {
    throw new Error('unknown padding');
  }
};

function oaep(key, msg){
  var n = key.modulus;
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (msg[0] !== 0) {
    throw new Error('decryption error');
  }
  var maskedSeed = msg.slice(1, hLen + 1);
  var maskedDb =  msg.slice(hLen + 1);
  var seed = xor(maskedSeed, mgf(maskedDb, hLen));
  var db = xor(maskedDb, mgf(seed, k - hLen - 1));
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error');
  }
  var i = hLen;
  while (db[i] === 0) {
    i++;
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error');
  }
  return db.slice(i);
}

function pkcs1(key, msg, reverse){
  var p1 = msg.slice(0, 2);
  var i = 2;
  var status = 0;
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++;
      break;
    }
  }
  var ps = msg.slice(2, i - 1);
  var p2 = msg.slice(i - 1, i);

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)){
    status++;
  }
  if (ps.length < 8) {
    status++;
  }
  if (status) {
    throw new Error('decryption error');
  }
  return  msg.slice(i);
}
function compare(a, b){
  a = new Buffer(a);
  b = new Buffer(b);
  var dif = 0;
  var len = a.length;
  if (a.length !== b.length) {
    dif++;
    len = Math.min(a.length, b.length);
  }
  var i = -1;
  while (++i < len) {
    dif += (a[i] ^ b[i]);
  }
  return dif;
}
}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvcHJpdmF0ZURlY3J5cHQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHBhcnNlS2V5cyA9IHJlcXVpcmUoJ3BhcnNlLWFzbjEnKTtcbnZhciBtZ2YgPSByZXF1aXJlKCcuL21nZicpO1xudmFyIHhvciA9IHJlcXVpcmUoJy4veG9yJyk7XG52YXIgYm4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIGNydCA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktcnNhJyk7XG52YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJyk7XG52YXIgd2l0aFB1YmxpYyA9IHJlcXVpcmUoJy4vd2l0aFB1YmxpYycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwcml2YXRlRGVjcnlwdChwcml2YXRlX2tleSwgZW5jLCByZXZlcnNlKSB7XG4gIHZhciBwYWRkaW5nO1xuICBpZiAocHJpdmF0ZV9rZXkucGFkZGluZykge1xuICAgIHBhZGRpbmcgPSBwcml2YXRlX2tleS5wYWRkaW5nO1xuICB9IGVsc2UgaWYgKHJldmVyc2UpIHtcbiAgICBwYWRkaW5nID0gMTtcbiAgfSBlbHNlIHtcbiAgICBwYWRkaW5nID0gNDtcbiAgfVxuICBcbiAgdmFyIGtleSA9IHBhcnNlS2V5cyhwcml2YXRlX2tleSk7XG4gIHZhciBrID0ga2V5Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICBpZiAoZW5jLmxlbmd0aCA+IGsgfHwgbmV3IGJuKGVuYykuY21wKGtleS5tb2R1bHVzKSA+PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdkZWNyeXB0aW9uIGVycm9yJyk7XG4gIH1cbiAgdmFyIG1zZztcbiAgaWYgKHJldmVyc2UpIHtcbiAgICBtc2cgPSB3aXRoUHVibGljKG5ldyBibihlbmMpLCBrZXkpO1xuICB9IGVsc2Uge1xuICAgIG1zZyA9IGNydChlbmMsIGtleSk7XG4gIH1cbiAgdmFyIHpCdWZmZXIgPSBuZXcgQnVmZmVyKGsgLSBtc2cubGVuZ3RoKTtcbiAgekJ1ZmZlci5maWxsKDApO1xuICBtc2cgPSBCdWZmZXIuY29uY2F0KFt6QnVmZmVyLCBtc2ddLCBrKTtcbiAgaWYgKHBhZGRpbmcgPT09IDQpIHtcbiAgICByZXR1cm4gb2FlcChrZXksIG1zZyk7XG4gIH0gZWxzZSBpZiAocGFkZGluZyA9PT0gMSkge1xuICAgIHJldHVybiBwa2NzMShrZXksIG1zZywgcmV2ZXJzZSk7XG4gIH0gZWxzZSBpZiAocGFkZGluZyA9PT0gMykge1xuICAgIHJldHVybiBtc2c7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIHBhZGRpbmcnKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gb2FlcChrZXksIG1zZyl7XG4gIHZhciBuID0ga2V5Lm1vZHVsdXM7XG4gIHZhciBrID0ga2V5Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICB2YXIgbUxlbiA9IG1zZy5sZW5ndGg7XG4gIHZhciBpSGFzaCA9IGNyZWF0ZUhhc2goJ3NoYTEnKS51cGRhdGUobmV3IEJ1ZmZlcignJykpLmRpZ2VzdCgpO1xuICB2YXIgaExlbiA9IGlIYXNoLmxlbmd0aDtcbiAgdmFyIGhMZW4yID0gMiAqIGhMZW47XG4gIGlmIChtc2dbMF0gIT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlY3J5cHRpb24gZXJyb3InKTtcbiAgfVxuICB2YXIgbWFza2VkU2VlZCA9IG1zZy5zbGljZSgxLCBoTGVuICsgMSk7XG4gIHZhciBtYXNrZWREYiA9ICBtc2cuc2xpY2UoaExlbiArIDEpO1xuICB2YXIgc2VlZCA9IHhvcihtYXNrZWRTZWVkLCBtZ2YobWFza2VkRGIsIGhMZW4pKTtcbiAgdmFyIGRiID0geG9yKG1hc2tlZERiLCBtZ2Yoc2VlZCwgayAtIGhMZW4gLSAxKSk7XG4gIGlmIChjb21wYXJlKGlIYXNoLCBkYi5zbGljZSgwLCBoTGVuKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlY3J5cHRpb24gZXJyb3InKTtcbiAgfVxuICB2YXIgaSA9IGhMZW47XG4gIHdoaWxlIChkYltpXSA9PT0gMCkge1xuICAgIGkrKztcbiAgfVxuICBpZiAoZGJbaSsrXSAhPT0gMSkge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVjcnlwdGlvbiBlcnJvcicpO1xuICB9XG4gIHJldHVybiBkYi5zbGljZShpKTtcbn1cblxuZnVuY3Rpb24gcGtjczEoa2V5LCBtc2csIHJldmVyc2Upe1xuICB2YXIgcDEgPSBtc2cuc2xpY2UoMCwgMik7XG4gIHZhciBpID0gMjtcbiAgdmFyIHN0YXR1cyA9IDA7XG4gIHdoaWxlIChtc2dbaSsrXSAhPT0gMCkge1xuICAgIGlmIChpID49IG1zZy5sZW5ndGgpIHtcbiAgICAgIHN0YXR1cysrO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHZhciBwcyA9IG1zZy5zbGljZSgyLCBpIC0gMSk7XG4gIHZhciBwMiA9IG1zZy5zbGljZShpIC0gMSwgaSk7XG5cbiAgaWYgKChwMS50b1N0cmluZygnaGV4JykgIT09ICcwMDAyJyAmJiAhcmV2ZXJzZSkgfHwgKHAxLnRvU3RyaW5nKCdoZXgnKSAhPT0gJzAwMDEnICYmIHJldmVyc2UpKXtcbiAgICBzdGF0dXMrKztcbiAgfVxuICBpZiAocHMubGVuZ3RoIDwgOCkge1xuICAgIHN0YXR1cysrO1xuICB9XG4gIGlmIChzdGF0dXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlY3J5cHRpb24gZXJyb3InKTtcbiAgfVxuICByZXR1cm4gIG1zZy5zbGljZShpKTtcbn1cbmZ1bmN0aW9uIGNvbXBhcmUoYSwgYil7XG4gIGEgPSBuZXcgQnVmZmVyKGEpO1xuICBiID0gbmV3IEJ1ZmZlcihiKTtcbiAgdmFyIGRpZiA9IDA7XG4gIHZhciBsZW4gPSBhLmxlbmd0aDtcbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgIGRpZisrO1xuICAgIGxlbiA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aCk7XG4gIH1cbiAgdmFyIGkgPSAtMTtcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIGRpZiArPSAoYVtpXSBeIGJbaV0pO1xuICB9XG4gIHJldHVybiBkaWY7XG59Il19
},{"./mgf":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/mgf.js","./withPublic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/withPublic.js","./xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/xor.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/bn.js/lib/bn.js","browserify-rsa":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/browserify-rsa/index.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","create-hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/browser.js","parse-asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/xor.js":[function(require,module,exports){
module.exports = function xor(a, b) {
  var len = a.length;
  var i = -1;
  while (++i < len) {
    a[i] ^= b[i];
  }
  return a
};
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/withPublic.js":[function(require,module,exports){
(function (Buffer){
var bn = require('bn.js');
function withPublic(paddedMsg, key) {
  return new Buffer(paddedMsg
    .toRed(bn.mont(key.modulus))
    .redPow(new bn(key.publicExponent))
    .fromRed()
    .toArray());
}

module.exports = withPublic;
}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvd2l0aFB1YmxpYy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBibiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG5mdW5jdGlvbiB3aXRoUHVibGljKHBhZGRlZE1zZywga2V5KSB7XG4gIHJldHVybiBuZXcgQnVmZmVyKHBhZGRlZE1zZ1xuICAgIC50b1JlZChibi5tb250KGtleS5tb2R1bHVzKSlcbiAgICAucmVkUG93KG5ldyBibihrZXkucHVibGljRXhwb25lbnQpKVxuICAgIC5mcm9tUmVkKClcbiAgICAudG9BcnJheSgpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3aXRoUHVibGljOyJdfQ==
},{"bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/bn.js/lib/bn.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/index.js":[function(require,module,exports){
(function (Buffer){
var asn1 = require('./asn1')
var aesid = require('./aesid.json')
var fixProc = require('./fixProc')
var ciphers = require('browserify-aes')
var compat = require('pbkdf2')
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = new Buffer(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'PUBLIC KEY':
      ndata = asn1.PublicKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen)
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFzbjEgPSByZXF1aXJlKCcuL2FzbjEnKVxudmFyIGFlc2lkID0gcmVxdWlyZSgnLi9hZXNpZC5qc29uJylcbnZhciBmaXhQcm9jID0gcmVxdWlyZSgnLi9maXhQcm9jJylcbnZhciBjaXBoZXJzID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1hZXMnKVxudmFyIGNvbXBhdCA9IHJlcXVpcmUoJ3Bia2RmMicpXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlS2V5c1xuXG5mdW5jdGlvbiBwYXJzZUtleXMgKGJ1ZmZlcikge1xuICB2YXIgcGFzc3dvcmRcbiAgaWYgKHR5cGVvZiBidWZmZXIgPT09ICdvYmplY3QnICYmICFCdWZmZXIuaXNCdWZmZXIoYnVmZmVyKSkge1xuICAgIHBhc3N3b3JkID0gYnVmZmVyLnBhc3NwaHJhc2VcbiAgICBidWZmZXIgPSBidWZmZXIua2V5XG4gIH1cbiAgaWYgKHR5cGVvZiBidWZmZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgYnVmZmVyID0gbmV3IEJ1ZmZlcihidWZmZXIpXG4gIH1cblxuICB2YXIgc3RyaXBwZWQgPSBmaXhQcm9jKGJ1ZmZlciwgcGFzc3dvcmQpXG5cbiAgdmFyIHR5cGUgPSBzdHJpcHBlZC50YWdcbiAgdmFyIGRhdGEgPSBzdHJpcHBlZC5kYXRhXG4gIHZhciBzdWJ0eXBlLCBuZGF0YVxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdQVUJMSUMgS0VZJzpcbiAgICAgIG5kYXRhID0gYXNuMS5QdWJsaWNLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgc3VidHlwZSA9IG5kYXRhLmFsZ29yaXRobS5hbGdvcml0aG0uam9pbignLicpXG4gICAgICBzd2l0Y2ggKHN1YnR5cGUpIHtcbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMTM1NDkuMS4xLjEnOlxuICAgICAgICAgIHJldHVybiBhc24xLlJTQVB1YmxpY0tleS5kZWNvZGUobmRhdGEuc3ViamVjdFB1YmxpY0tleS5kYXRhLCAnZGVyJylcbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMDA0NS4yLjEnOlxuICAgICAgICAgIG5kYXRhLnN1YmplY3RQcml2YXRlS2V5ID0gbmRhdGEuc3ViamVjdFB1YmxpY0tleVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnZWMnLFxuICAgICAgICAgICAgZGF0YTogbmRhdGFcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTAwNDAuNC4xJzpcbiAgICAgICAgICBuZGF0YS5hbGdvcml0aG0ucGFyYW1zLnB1Yl9rZXkgPSBhc24xLkRTQXBhcmFtLmRlY29kZShuZGF0YS5zdWJqZWN0UHVibGljS2V5LmRhdGEsICdkZXInKVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnZHNhJyxcbiAgICAgICAgICAgIGRhdGE6IG5kYXRhLmFsZ29yaXRobS5wYXJhbXNcbiAgICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgaWQgJyArIHN1YnR5cGUpXG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IHR5cGUgJyArIHR5cGUpXG4gICAgY2FzZSAnRU5DUllQVEVEIFBSSVZBVEUgS0VZJzpcbiAgICAgIGRhdGEgPSBhc24xLkVuY3J5cHRlZFByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgZGF0YSA9IGRlY3J5cHQoZGF0YSwgcGFzc3dvcmQpXG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgY2FzZSAnUFJJVkFURSBLRVknOlxuICAgICAgbmRhdGEgPSBhc24xLlByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgc3VidHlwZSA9IG5kYXRhLmFsZ29yaXRobS5hbGdvcml0aG0uam9pbignLicpXG4gICAgICBzd2l0Y2ggKHN1YnR5cGUpIHtcbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMTM1NDkuMS4xLjEnOlxuICAgICAgICAgIHJldHVybiBhc24xLlJTQVByaXZhdGVLZXkuZGVjb2RlKG5kYXRhLnN1YmplY3RQcml2YXRlS2V5LCAnZGVyJylcbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMDA0NS4yLjEnOlxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjdXJ2ZTogbmRhdGEuYWxnb3JpdGhtLmN1cnZlLFxuICAgICAgICAgICAgcHJpdmF0ZUtleTogYXNuMS5FQ1ByaXZhdGVLZXkuZGVjb2RlKG5kYXRhLnN1YmplY3RQcml2YXRlS2V5LCAnZGVyJykucHJpdmF0ZUtleVxuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMDA0MC40LjEnOlxuICAgICAgICAgIG5kYXRhLmFsZ29yaXRobS5wYXJhbXMucHJpdl9rZXkgPSBhc24xLkRTQXBhcmFtLmRlY29kZShuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleSwgJ2RlcicpXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdkc2EnLFxuICAgICAgICAgICAgcGFyYW1zOiBuZGF0YS5hbGdvcml0aG0ucGFyYW1zXG4gICAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IGlkICcgKyBzdWJ0eXBlKVxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSB0eXBlICcgKyB0eXBlKVxuICAgIGNhc2UgJ1JTQSBQVUJMSUMgS0VZJzpcbiAgICAgIHJldHVybiBhc24xLlJTQVB1YmxpY0tleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgY2FzZSAnUlNBIFBSSVZBVEUgS0VZJzpcbiAgICAgIHJldHVybiBhc24xLlJTQVByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgIGNhc2UgJ0RTQSBQUklWQVRFIEtFWSc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnZHNhJyxcbiAgICAgICAgcGFyYW1zOiBhc24xLkRTQVByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgfVxuICAgIGNhc2UgJ0VDIFBSSVZBVEUgS0VZJzpcbiAgICAgIGRhdGEgPSBhc24xLkVDUHJpdmF0ZUtleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjdXJ2ZTogZGF0YS5wYXJhbWV0ZXJzLnZhbHVlLFxuICAgICAgICBwcml2YXRlS2V5OiBkYXRhLnByaXZhdGVLZXlcbiAgICAgIH1cbiAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IHR5cGUgJyArIHR5cGUpXG4gIH1cbn1cbnBhcnNlS2V5cy5zaWduYXR1cmUgPSBhc24xLnNpZ25hdHVyZVxuZnVuY3Rpb24gZGVjcnlwdCAoZGF0YSwgcGFzc3dvcmQpIHtcbiAgdmFyIHNhbHQgPSBkYXRhLmFsZ29yaXRobS5kZWNyeXB0LmtkZS5rZGVwYXJhbXMuc2FsdFxuICB2YXIgaXRlcnMgPSBwYXJzZUludChkYXRhLmFsZ29yaXRobS5kZWNyeXB0LmtkZS5rZGVwYXJhbXMuaXRlcnMudG9TdHJpbmcoKSwgMTApXG4gIHZhciBhbGdvID0gYWVzaWRbZGF0YS5hbGdvcml0aG0uZGVjcnlwdC5jaXBoZXIuYWxnby5qb2luKCcuJyldXG4gIHZhciBpdiA9IGRhdGEuYWxnb3JpdGhtLmRlY3J5cHQuY2lwaGVyLml2XG4gIHZhciBjaXBoZXJUZXh0ID0gZGF0YS5zdWJqZWN0UHJpdmF0ZUtleVxuICB2YXIga2V5bGVuID0gcGFyc2VJbnQoYWxnby5zcGxpdCgnLScpWzFdLCAxMCkgLyA4XG4gIHZhciBrZXkgPSBjb21wYXQucGJrZGYyU3luYyhwYXNzd29yZCwgc2FsdCwgaXRlcnMsIGtleWxlbilcbiAgdmFyIGNpcGhlciA9IGNpcGhlcnMuY3JlYXRlRGVjaXBoZXJpdihhbGdvLCBrZXksIGl2KVxuICB2YXIgb3V0ID0gW11cbiAgb3V0LnB1c2goY2lwaGVyLnVwZGF0ZShjaXBoZXJUZXh0KSlcbiAgb3V0LnB1c2goY2lwaGVyLmZpbmFsKCkpXG4gIHJldHVybiBCdWZmZXIuY29uY2F0KG91dClcbn1cbiJdfQ==
},{"./aesid.json":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/aesid.json","./asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/asn1.js","./fixProc":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/fixProc.js","browserify-aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/browser.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","pbkdf2":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/pbkdf2/browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/fixProc.js":[function(require,module,exports){
(function (Buffer){
// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED\r?\nDEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\r?\n\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n/m
var startRegex = /^-----BEGIN (.*) KEY-----\r?\n/m
var fullRegex = /^-----BEGIN (.*) KEY-----\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n-----END \1 KEY-----$/m
var evp = require('evp_bytestokey')
var ciphers = require('browserify-aes')
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = new Buffer(match2[2].replace(/\r?\n/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = new Buffer(match[2], 'hex')
    var cipherText = new Buffer(match[3].replace(/\r?\n/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1] + ' KEY'
  return {
    tag: tag,
    data: decrypted
  }
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvZml4UHJvYy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8vIGFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYXBhdGlsL3BlbXN0cmlwXG52YXIgZmluZFByb2MgPSAvUHJvYy1UeXBlOiA0LEVOQ1JZUFRFRFxccj9cXG5ERUstSW5mbzogQUVTLSgoPzoxMjgpfCg/OjE5Mil8KD86MjU2KSktQ0JDLChbMC05QS1IXSspXFxyP1xcblxccj9cXG4oWzAtOUEtelxcblxcclxcK1xcL1xcPV0rKVxccj9cXG4vbVxudmFyIHN0YXJ0UmVnZXggPSAvXi0tLS0tQkVHSU4gKC4qKSBLRVktLS0tLVxccj9cXG4vbVxudmFyIGZ1bGxSZWdleCA9IC9eLS0tLS1CRUdJTiAoLiopIEtFWS0tLS0tXFxyP1xcbihbMC05QS16XFxuXFxyXFwrXFwvXFw9XSspXFxyP1xcbi0tLS0tRU5EIFxcMSBLRVktLS0tLSQvbVxudmFyIGV2cCA9IHJlcXVpcmUoJ2V2cF9ieXRlc3Rva2V5JylcbnZhciBjaXBoZXJzID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1hZXMnKVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2tleSwgcGFzc3dvcmQpIHtcbiAgdmFyIGtleSA9IG9rZXkudG9TdHJpbmcoKVxuICB2YXIgbWF0Y2ggPSBrZXkubWF0Y2goZmluZFByb2MpXG4gIHZhciBkZWNyeXB0ZWRcbiAgaWYgKCFtYXRjaCkge1xuICAgIHZhciBtYXRjaDIgPSBrZXkubWF0Y2goZnVsbFJlZ2V4KVxuICAgIGRlY3J5cHRlZCA9IG5ldyBCdWZmZXIobWF0Y2gyWzJdLnJlcGxhY2UoL1xccj9cXG4vZywgJycpLCAnYmFzZTY0JylcbiAgfSBlbHNlIHtcbiAgICB2YXIgc3VpdGUgPSAnYWVzJyArIG1hdGNoWzFdXG4gICAgdmFyIGl2ID0gbmV3IEJ1ZmZlcihtYXRjaFsyXSwgJ2hleCcpXG4gICAgdmFyIGNpcGhlclRleHQgPSBuZXcgQnVmZmVyKG1hdGNoWzNdLnJlcGxhY2UoL1xccj9cXG4vZywgJycpLCAnYmFzZTY0JylcbiAgICB2YXIgY2lwaGVyS2V5ID0gZXZwKHBhc3N3b3JkLCBpdi5zbGljZSgwLCA4KSwgcGFyc2VJbnQobWF0Y2hbMV0sIDEwKSkua2V5XG4gICAgdmFyIG91dCA9IFtdXG4gICAgdmFyIGNpcGhlciA9IGNpcGhlcnMuY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwgY2lwaGVyS2V5LCBpdilcbiAgICBvdXQucHVzaChjaXBoZXIudXBkYXRlKGNpcGhlclRleHQpKVxuICAgIG91dC5wdXNoKGNpcGhlci5maW5hbCgpKVxuICAgIGRlY3J5cHRlZCA9IEJ1ZmZlci5jb25jYXQob3V0KVxuICB9XG4gIHZhciB0YWcgPSBrZXkubWF0Y2goc3RhcnRSZWdleClbMV0gKyAnIEtFWSdcbiAgcmV0dXJuIHtcbiAgICB0YWc6IHRhZyxcbiAgICBkYXRhOiBkZWNyeXB0ZWRcbiAgfVxufVxuIl19
},{"browserify-aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/browser.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","evp_bytestokey":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/evp_bytestokey/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/browser.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/browser.js"][0].apply(exports,arguments)
},{"./decrypter":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/decrypter.js","./encrypter":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/encrypter.js","./modes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/encrypter.js":[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')
var modes = require('./modes')
var ebtk = require('evp_bytestokey')
var StreamCipher = require('./streamCipher')
var AuthCipher = require('./authCipher')
inherits(Cipher, Transform)
function Cipher (mode, key, iv) {
  if (!(this instanceof Cipher)) {
    return new Cipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  } else if (chunk.toString('hex') !== '10101010101010101010101010101010') {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}
Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
}

function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}
Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = new Buffer(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }
  var out = Buffer.concat([this.cache, padBuff])
  return out
}
var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
}

function createCipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv)
  }
  return new Cipher(modelist[config.mode], password, iv)
}
function createCipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2VuY3J5cHRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgbW9kZXMgPSByZXF1aXJlKCcuL21vZGVzJylcbnZhciBlYnRrID0gcmVxdWlyZSgnZXZwX2J5dGVzdG9rZXknKVxudmFyIFN0cmVhbUNpcGhlciA9IHJlcXVpcmUoJy4vc3RyZWFtQ2lwaGVyJylcbnZhciBBdXRoQ2lwaGVyID0gcmVxdWlyZSgnLi9hdXRoQ2lwaGVyJylcbmluaGVyaXRzKENpcGhlciwgVHJhbnNmb3JtKVxuZnVuY3Rpb24gQ2lwaGVyIChtb2RlLCBrZXksIGl2KSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBDaXBoZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBDaXBoZXIobW9kZSwga2V5LCBpdilcbiAgfVxuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuICB0aGlzLl9jYWNoZSA9IG5ldyBTcGxpdHRlcigpXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IG5ldyBCdWZmZXIoaXYubGVuZ3RoKVxuICBpdi5jb3B5KHRoaXMuX3ByZXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gdHJ1ZVxufVxuQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG4gIHdoaWxlICgoY2h1bmsgPSB0aGlzLl9jYWNoZS5nZXQoKSkpIHtcbiAgICB0aGluZyA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgICBvdXQucHVzaCh0aGluZylcbiAgfVxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChvdXQpXG59XG5DaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNodW5rID0gdGhpcy5fY2FjaGUuZmx1c2goKVxuICBpZiAodGhpcy5fYXV0b3BhZGRpbmcpIHtcbiAgICBjaHVuayA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgICB0aGlzLl9jaXBoZXIuc2NydWIoKVxuICAgIHJldHVybiBjaHVua1xuICB9IGVsc2UgaWYgKGNodW5rLnRvU3RyaW5nKCdoZXgnKSAhPT0gJzEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwJykge1xuICAgIHRoaXMuX2NpcGhlci5zY3J1YigpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdkYXRhIG5vdCBtdWx0aXBsZSBvZiBibG9jayBsZW5ndGgnKVxuICB9XG59XG5DaXBoZXIucHJvdG90eXBlLnNldEF1dG9QYWRkaW5nID0gZnVuY3Rpb24gKHNldFRvKSB7XG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gISFzZXRUb1xufVxuXG5mdW5jdGlvbiBTcGxpdHRlciAoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTcGxpdHRlcikpIHtcbiAgICByZXR1cm4gbmV3IFNwbGl0dGVyKClcbiAgfVxuICB0aGlzLmNhY2hlID0gbmV3IEJ1ZmZlcignJylcbn1cblNwbGl0dGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgZGF0YV0pXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+IDE1KSB7XG4gICAgdmFyIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgcmV0dXJuIG91dFxuICB9XG4gIHJldHVybiBudWxsXG59XG5TcGxpdHRlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsZW4gPSAxNiAtIHRoaXMuY2FjaGUubGVuZ3RoXG4gIHZhciBwYWRCdWZmID0gbmV3IEJ1ZmZlcihsZW4pXG5cbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgcGFkQnVmZi53cml0ZVVJbnQ4KGxlbiwgaSlcbiAgfVxuICB2YXIgb3V0ID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgcGFkQnVmZl0pXG4gIHJldHVybiBvdXRcbn1cbnZhciBtb2RlbGlzdCA9IHtcbiAgRUNCOiByZXF1aXJlKCcuL21vZGVzL2VjYicpLFxuICBDQkM6IHJlcXVpcmUoJy4vbW9kZXMvY2JjJyksXG4gIENGQjogcmVxdWlyZSgnLi9tb2Rlcy9jZmInKSxcbiAgQ0ZCODogcmVxdWlyZSgnLi9tb2Rlcy9jZmI4JyksXG4gIENGQjE6IHJlcXVpcmUoJy4vbW9kZXMvY2ZiMScpLFxuICBPRkI6IHJlcXVpcmUoJy4vbW9kZXMvb2ZiJyksXG4gIENUUjogcmVxdWlyZSgnLi9tb2Rlcy9jdHInKSxcbiAgR0NNOiByZXF1aXJlKCcuL21vZGVzL2N0cicpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlcml2IChzdWl0ZSwgcGFzc3dvcmQsIGl2KSB7XG4gIHZhciBjb25maWcgPSBtb2Rlc1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbiAgaWYgKHR5cGVvZiBpdiA9PT0gJ3N0cmluZycpIHtcbiAgICBpdiA9IG5ldyBCdWZmZXIoaXYpXG4gIH1cbiAgaWYgKHR5cGVvZiBwYXNzd29yZCA9PT0gJ3N0cmluZycpIHtcbiAgICBwYXNzd29yZCA9IG5ldyBCdWZmZXIocGFzc3dvcmQpXG4gIH1cbiAgaWYgKHBhc3N3b3JkLmxlbmd0aCAhPT0gY29uZmlnLmtleSAvIDgpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGtleSBsZW5ndGggJyArIHBhc3N3b3JkLmxlbmd0aClcbiAgfVxuICBpZiAoaXYubGVuZ3RoICE9PSBjb25maWcuaXYpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGl2IGxlbmd0aCAnICsgaXYubGVuZ3RoKVxuICB9XG4gIGlmIChjb25maWcudHlwZSA9PT0gJ3N0cmVhbScpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihtb2RlbGlzdFtjb25maWcubW9kZV0sIHBhc3N3b3JkLCBpdilcbiAgfSBlbHNlIGlmIChjb25maWcudHlwZSA9PT0gJ2F1dGgnKSB7XG4gICAgcmV0dXJuIG5ldyBBdXRoQ2lwaGVyKG1vZGVsaXN0W2NvbmZpZy5tb2RlXSwgcGFzc3dvcmQsIGl2KVxuICB9XG4gIHJldHVybiBuZXcgQ2lwaGVyKG1vZGVsaXN0W2NvbmZpZy5tb2RlXSwgcGFzc3dvcmQsIGl2KVxufVxuZnVuY3Rpb24gY3JlYXRlQ2lwaGVyIChzdWl0ZSwgcGFzc3dvcmQpIHtcbiAgdmFyIGNvbmZpZyA9IG1vZGVzW3N1aXRlLnRvTG93ZXJDYXNlKCldXG4gIGlmICghY29uZmlnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcbiAgfVxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBjb25maWcua2V5LCBjb25maWcuaXYpXG4gIHJldHVybiBjcmVhdGVDaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5cbmV4cG9ydHMuY3JlYXRlQ2lwaGVyaXYgPSBjcmVhdGVDaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVDaXBoZXIgPSBjcmVhdGVDaXBoZXJcbiJdfQ==
},{"./aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/aes.js","./authCipher":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/authCipher.js","./modes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes.js","./modes/cbc":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/cbc.js","./modes/cfb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb.js","./modes/cfb1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb1.js","./modes/cfb8":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb8.js","./modes/ctr":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/ctr.js","./modes/ecb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/ecb.js","./modes/ofb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/ofb.js","./streamCipher":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/streamCipher.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","cipher-base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/cipher-base/index.js","evp_bytestokey":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/evp_bytestokey/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/decrypter.js":[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')
var modes = require('./modes')
var StreamCipher = require('./streamCipher')
var AuthCipher = require('./authCipher')
var ebtk = require('evp_bytestokey')

inherits(Decipher, Transform)
function Decipher (mode, key, iv) {
  if (!(this instanceof Decipher)) {
    return new Decipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}
Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
}
function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }
  return null
}
Splitter.prototype.flush = function () {
  if (this.cache.length) {
    return this.cache
  }
}
function unpad (last) {
  var padded = last[15]
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) {
    return
  }
  return last.slice(0, 16 - padded)
}

var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
}

function createDecipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv, true)
  }
  return new Decipher(modelist[config.mode], password, iv)
}

function createDecipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}
exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2RlY3J5cHRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgbW9kZXMgPSByZXF1aXJlKCcuL21vZGVzJylcbnZhciBTdHJlYW1DaXBoZXIgPSByZXF1aXJlKCcuL3N0cmVhbUNpcGhlcicpXG52YXIgQXV0aENpcGhlciA9IHJlcXVpcmUoJy4vYXV0aENpcGhlcicpXG52YXIgZWJ0ayA9IHJlcXVpcmUoJ2V2cF9ieXRlc3Rva2V5JylcblxuaW5oZXJpdHMoRGVjaXBoZXIsIFRyYW5zZm9ybSlcbmZ1bmN0aW9uIERlY2lwaGVyIChtb2RlLCBrZXksIGl2KSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEZWNpcGhlcikpIHtcbiAgICByZXR1cm4gbmV3IERlY2lwaGVyKG1vZGUsIGtleSwgaXYpXG4gIH1cbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5fY2FjaGUgPSBuZXcgU3BsaXR0ZXIoKVxuICB0aGlzLl9sYXN0ID0gdm9pZCAwXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IG5ldyBCdWZmZXIoaXYubGVuZ3RoKVxuICBpdi5jb3B5KHRoaXMuX3ByZXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gdHJ1ZVxufVxuRGVjaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLl9jYWNoZS5hZGQoZGF0YSlcbiAgdmFyIGNodW5rXG4gIHZhciB0aGluZ1xuICB2YXIgb3V0ID0gW11cbiAgd2hpbGUgKChjaHVuayA9IHRoaXMuX2NhY2hlLmdldCh0aGlzLl9hdXRvcGFkZGluZykpKSB7XG4gICAgdGhpbmcgPSB0aGlzLl9tb2RlLmRlY3J5cHQodGhpcywgY2h1bmspXG4gICAgb3V0LnB1c2godGhpbmcpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQob3V0KVxufVxuRGVjaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNodW5rID0gdGhpcy5fY2FjaGUuZmx1c2goKVxuICBpZiAodGhpcy5fYXV0b3BhZGRpbmcpIHtcbiAgICByZXR1cm4gdW5wYWQodGhpcy5fbW9kZS5kZWNyeXB0KHRoaXMsIGNodW5rKSlcbiAgfSBlbHNlIGlmIChjaHVuaykge1xuICAgIHRocm93IG5ldyBFcnJvcignZGF0YSBub3QgbXVsdGlwbGUgb2YgYmxvY2sgbGVuZ3RoJylcbiAgfVxufVxuRGVjaXBoZXIucHJvdG90eXBlLnNldEF1dG9QYWRkaW5nID0gZnVuY3Rpb24gKHNldFRvKSB7XG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gISFzZXRUb1xufVxuZnVuY3Rpb24gU3BsaXR0ZXIgKCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU3BsaXR0ZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBTcGxpdHRlcigpXG4gIH1cbiAgdGhpcy5jYWNoZSA9IG5ldyBCdWZmZXIoJycpXG59XG5TcGxpdHRlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIGRhdGFdKVxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGF1dG9QYWRkaW5nKSB7XG4gIHZhciBvdXRcbiAgaWYgKGF1dG9QYWRkaW5nKSB7XG4gICAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoID4gMTYpIHtcbiAgICAgIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICAgIHJldHVybiBvdXRcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoID49IDE2KSB7XG4gICAgICBvdXQgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgICByZXR1cm4gb3V0XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsXG59XG5TcGxpdHRlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNhY2hlLmxlbmd0aCkge1xuICAgIHJldHVybiB0aGlzLmNhY2hlXG4gIH1cbn1cbmZ1bmN0aW9uIHVucGFkIChsYXN0KSB7XG4gIHZhciBwYWRkZWQgPSBsYXN0WzE1XVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBwYWRkZWQpIHtcbiAgICBpZiAobGFzdFsoaSArICgxNiAtIHBhZGRlZCkpXSAhPT0gcGFkZGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byBkZWNyeXB0IGRhdGEnKVxuICAgIH1cbiAgfVxuICBpZiAocGFkZGVkID09PSAxNikge1xuICAgIHJldHVyblxuICB9XG4gIHJldHVybiBsYXN0LnNsaWNlKDAsIDE2IC0gcGFkZGVkKVxufVxuXG52YXIgbW9kZWxpc3QgPSB7XG4gIEVDQjogcmVxdWlyZSgnLi9tb2Rlcy9lY2InKSxcbiAgQ0JDOiByZXF1aXJlKCcuL21vZGVzL2NiYycpLFxuICBDRkI6IHJlcXVpcmUoJy4vbW9kZXMvY2ZiJyksXG4gIENGQjg6IHJlcXVpcmUoJy4vbW9kZXMvY2ZiOCcpLFxuICBDRkIxOiByZXF1aXJlKCcuL21vZGVzL2NmYjEnKSxcbiAgT0ZCOiByZXF1aXJlKCcuL21vZGVzL29mYicpLFxuICBDVFI6IHJlcXVpcmUoJy4vbW9kZXMvY3RyJyksXG4gIEdDTTogcmVxdWlyZSgnLi9tb2Rlcy9jdHInKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWNpcGhlcml2IChzdWl0ZSwgcGFzc3dvcmQsIGl2KSB7XG4gIHZhciBjb25maWcgPSBtb2Rlc1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbiAgaWYgKHR5cGVvZiBpdiA9PT0gJ3N0cmluZycpIHtcbiAgICBpdiA9IG5ldyBCdWZmZXIoaXYpXG4gIH1cbiAgaWYgKHR5cGVvZiBwYXNzd29yZCA9PT0gJ3N0cmluZycpIHtcbiAgICBwYXNzd29yZCA9IG5ldyBCdWZmZXIocGFzc3dvcmQpXG4gIH1cbiAgaWYgKHBhc3N3b3JkLmxlbmd0aCAhPT0gY29uZmlnLmtleSAvIDgpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGtleSBsZW5ndGggJyArIHBhc3N3b3JkLmxlbmd0aClcbiAgfVxuICBpZiAoaXYubGVuZ3RoICE9PSBjb25maWcuaXYpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGl2IGxlbmd0aCAnICsgaXYubGVuZ3RoKVxuICB9XG4gIGlmIChjb25maWcudHlwZSA9PT0gJ3N0cmVhbScpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihtb2RlbGlzdFtjb25maWcubW9kZV0sIHBhc3N3b3JkLCBpdiwgdHJ1ZSlcbiAgfSBlbHNlIGlmIChjb25maWcudHlwZSA9PT0gJ2F1dGgnKSB7XG4gICAgcmV0dXJuIG5ldyBBdXRoQ2lwaGVyKG1vZGVsaXN0W2NvbmZpZy5tb2RlXSwgcGFzc3dvcmQsIGl2LCB0cnVlKVxuICB9XG4gIHJldHVybiBuZXcgRGVjaXBoZXIobW9kZWxpc3RbY29uZmlnLm1vZGVdLCBwYXNzd29yZCwgaXYpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURlY2lwaGVyIChzdWl0ZSwgcGFzc3dvcmQpIHtcbiAgdmFyIGNvbmZpZyA9IG1vZGVzW3N1aXRlLnRvTG93ZXJDYXNlKCldXG4gIGlmICghY29uZmlnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcbiAgfVxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBjb25maWcua2V5LCBjb25maWcuaXYpXG4gIHJldHVybiBjcmVhdGVEZWNpcGhlcml2KHN1aXRlLCBrZXlzLmtleSwga2V5cy5pdilcbn1cbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXIgPSBjcmVhdGVEZWNpcGhlclxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlcml2ID0gY3JlYXRlRGVjaXBoZXJpdlxuIl19
},{"./aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/aes.js","./authCipher":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/authCipher.js","./modes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes.js","./modes/cbc":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/cbc.js","./modes/cfb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb.js","./modes/cfb1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb1.js","./modes/cfb8":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb8.js","./modes/ctr":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/ctr.js","./modes/ecb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/ecb.js","./modes/ofb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/ofb.js","./streamCipher":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/streamCipher.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","cipher-base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/cipher-base/index.js","evp_bytestokey":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/evp_bytestokey/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/evp_bytestokey/index.js":[function(require,module,exports){
(function (Buffer){
var md5 = require('create-hash/md5')
module.exports = EVP_BytesToKey
function EVP_BytesToKey (password, salt, keyLen, ivLen) {
  if (!Buffer.isBuffer(password)) {
    password = new Buffer(password, 'binary')
  }
  if (salt && !Buffer.isBuffer(salt)) {
    salt = new Buffer(salt, 'binary')
  }
  keyLen = keyLen / 8
  ivLen = ivLen || 0
  var ki = 0
  var ii = 0
  var key = new Buffer(keyLen)
  var iv = new Buffer(ivLen)
  var addmd = 0
  var md_buf
  var i
  var bufs = []
  while (true) {
    if (addmd++ > 0) {
      bufs.push(md_buf)
    }
    bufs.push(password)
    if (salt) {
      bufs.push(salt)
    }
    md_buf = md5(Buffer.concat(bufs))
    bufs = []
    i = 0
    if (keyLen > 0) {
      while (true) {
        if (keyLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        key[ki++] = md_buf[i]
        keyLen--
        i++
      }
    }
    if (ivLen > 0 && i !== md_buf.length) {
      while (true) {
        if (ivLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        iv[ii++] = md_buf[i]
        ivLen--
        i++
      }
    }
    if (keyLen === 0 && ivLen === 0) {
      break
    }
  }
  for (i = 0; i < md_buf.length; i++) {
    md_buf[i] = 0
  }
  return {
    key: key,
    iv: iv
  }
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2V2cF9ieXRlc3Rva2V5L2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBtZDUgPSByZXF1aXJlKCdjcmVhdGUtaGFzaC9tZDUnKVxubW9kdWxlLmV4cG9ydHMgPSBFVlBfQnl0ZXNUb0tleVxuZnVuY3Rpb24gRVZQX0J5dGVzVG9LZXkgKHBhc3N3b3JkLCBzYWx0LCBrZXlMZW4sIGl2TGVuKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHBhc3N3b3JkKSkge1xuICAgIHBhc3N3b3JkID0gbmV3IEJ1ZmZlcihwYXNzd29yZCwgJ2JpbmFyeScpXG4gIH1cbiAgaWYgKHNhbHQgJiYgIUJ1ZmZlci5pc0J1ZmZlcihzYWx0KSkge1xuICAgIHNhbHQgPSBuZXcgQnVmZmVyKHNhbHQsICdiaW5hcnknKVxuICB9XG4gIGtleUxlbiA9IGtleUxlbiAvIDhcbiAgaXZMZW4gPSBpdkxlbiB8fCAwXG4gIHZhciBraSA9IDBcbiAgdmFyIGlpID0gMFxuICB2YXIga2V5ID0gbmV3IEJ1ZmZlcihrZXlMZW4pXG4gIHZhciBpdiA9IG5ldyBCdWZmZXIoaXZMZW4pXG4gIHZhciBhZGRtZCA9IDBcbiAgdmFyIG1kX2J1ZlxuICB2YXIgaVxuICB2YXIgYnVmcyA9IFtdXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgaWYgKGFkZG1kKysgPiAwKSB7XG4gICAgICBidWZzLnB1c2gobWRfYnVmKVxuICAgIH1cbiAgICBidWZzLnB1c2gocGFzc3dvcmQpXG4gICAgaWYgKHNhbHQpIHtcbiAgICAgIGJ1ZnMucHVzaChzYWx0KVxuICAgIH1cbiAgICBtZF9idWYgPSBtZDUoQnVmZmVyLmNvbmNhdChidWZzKSlcbiAgICBidWZzID0gW11cbiAgICBpID0gMFxuICAgIGlmIChrZXlMZW4gPiAwKSB7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBpZiAoa2V5TGVuID09PSAwKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaSA9PT0gbWRfYnVmLmxlbmd0aCkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAga2V5W2tpKytdID0gbWRfYnVmW2ldXG4gICAgICAgIGtleUxlbi0tXG4gICAgICAgIGkrK1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXZMZW4gPiAwICYmIGkgIT09IG1kX2J1Zi5sZW5ndGgpIHtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGlmIChpdkxlbiA9PT0gMCkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPT09IG1kX2J1Zi5sZW5ndGgpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGl2W2lpKytdID0gbWRfYnVmW2ldXG4gICAgICAgIGl2TGVuLS1cbiAgICAgICAgaSsrXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChrZXlMZW4gPT09IDAgJiYgaXZMZW4gPT09IDApIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIGZvciAoaSA9IDA7IGkgPCBtZF9idWYubGVuZ3RoOyBpKyspIHtcbiAgICBtZF9idWZbaV0gPSAwXG4gIH1cbiAgcmV0dXJuIHtcbiAgICBrZXk6IGtleSxcbiAgICBpdjogaXZcbiAgfVxufVxuIl19
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","create-hash/md5":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/md5.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/streamCipher.js":[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')

inherits(StreamCipher, Transform)
module.exports = StreamCipher
function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  iv.copy(this._prev)
  this._mode = mode
}
StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}
StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL3N0cmVhbUNpcGhlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmluaGVyaXRzKFN0cmVhbUNpcGhlciwgVHJhbnNmb3JtKVxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW1DaXBoZXJcbmZ1bmN0aW9uIFN0cmVhbUNpcGhlciAobW9kZSwga2V5LCBpdiwgZGVjcnlwdCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU3RyZWFtQ2lwaGVyKSkge1xuICAgIHJldHVybiBuZXcgU3RyZWFtQ2lwaGVyKG1vZGUsIGtleSwgaXYpXG4gIH1cbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KVxuICB0aGlzLl9wcmV2ID0gbmV3IEJ1ZmZlcihpdi5sZW5ndGgpXG4gIHRoaXMuX2NhY2hlID0gbmV3IEJ1ZmZlcignJylcbiAgdGhpcy5fc2VjQ2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxuICB0aGlzLl9kZWNyeXB0ID0gZGVjcnlwdFxuICBpdi5jb3B5KHRoaXMuX3ByZXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgcmV0dXJuIHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaywgdGhpcy5fZGVjcnlwdClcbn1cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9jaXBoZXIuc2NydWIoKVxufVxuIl19
},{"./aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/aes.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","cipher-base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/cipher-base/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/ofb.js":[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL29mYi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5mdW5jdGlvbiBnZXRCbG9jayAoc2VsZikge1xuICBzZWxmLl9wcmV2ID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICByZXR1cm4gc2VsZi5fcHJldlxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmspIHtcbiAgd2hpbGUgKHNlbGYuX2NhY2hlLmxlbmd0aCA8IGNodW5rLmxlbmd0aCkge1xuICAgIHNlbGYuX2NhY2hlID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fY2FjaGUsIGdldEJsb2NrKHNlbGYpXSlcbiAgfVxuXG4gIHZhciBwYWQgPSBzZWxmLl9jYWNoZS5zbGljZSgwLCBjaHVuay5sZW5ndGgpXG4gIHNlbGYuX2NhY2hlID0gc2VsZi5fY2FjaGUuc2xpY2UoY2h1bmsubGVuZ3RoKVxuICByZXR1cm4geG9yKGNodW5rLCBwYWQpXG59XG4iXX0=
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/buffer-xor/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/ecb.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/ecb.js"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/ctr.js":[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}

function getBlock (self) {
  var out = self._cipher.encryptBlock(self._prev)
  incr32(self._prev)
  return out
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2N0ci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5mdW5jdGlvbiBpbmNyMzIgKGl2KSB7XG4gIHZhciBsZW4gPSBpdi5sZW5ndGhcbiAgdmFyIGl0ZW1cbiAgd2hpbGUgKGxlbi0tKSB7XG4gICAgaXRlbSA9IGl2LnJlYWRVSW50OChsZW4pXG4gICAgaWYgKGl0ZW0gPT09IDI1NSkge1xuICAgICAgaXYud3JpdGVVSW50OCgwLCBsZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZW0rK1xuICAgICAgaXYud3JpdGVVSW50OChpdGVtLCBsZW4pXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRCbG9jayAoc2VsZikge1xuICB2YXIgb3V0ID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICBpbmNyMzIoc2VsZi5fcHJldilcbiAgcmV0dXJuIG91dFxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmspIHtcbiAgd2hpbGUgKHNlbGYuX2NhY2hlLmxlbmd0aCA8IGNodW5rLmxlbmd0aCkge1xuICAgIHNlbGYuX2NhY2hlID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fY2FjaGUsIGdldEJsb2NrKHNlbGYpXSlcbiAgfVxuICB2YXIgcGFkID0gc2VsZi5fY2FjaGUuc2xpY2UoMCwgY2h1bmsubGVuZ3RoKVxuICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGNodW5rLmxlbmd0aClcbiAgcmV0dXJuIHhvcihjaHVuaywgcGFkKVxufVxuIl19
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/buffer-xor/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb8.js":[function(require,module,exports){
(function (Buffer){
function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam
  self._prev = Buffer.concat([self._prev.slice(1), new Buffer([decrypt ? byteParam : out])])
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NmYjguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBlbmNyeXB0Qnl0ZSAoc2VsZiwgYnl0ZVBhcmFtLCBkZWNyeXB0KSB7XG4gIHZhciBwYWQgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gIHZhciBvdXQgPSBwYWRbMF0gXiBieXRlUGFyYW1cbiAgc2VsZi5fcHJldiA9IEJ1ZmZlci5jb25jYXQoW3NlbGYuX3ByZXYuc2xpY2UoMSksIG5ldyBCdWZmZXIoW2RlY3J5cHQgPyBieXRlUGFyYW0gOiBvdXRdKV0pXG4gIHJldHVybiBvdXRcbn1cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaywgZGVjcnlwdCkge1xuICB2YXIgbGVuID0gY2h1bmsubGVuZ3RoXG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKGxlbilcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0W2ldID0gZW5jcnlwdEJ5dGUoc2VsZiwgY2h1bmtbaV0sIGRlY3J5cHQpXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuIl19
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb1.js":[function(require,module,exports){
(function (Buffer){
function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}
function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = new Buffer(buffer.length)
  buffer = Buffer.concat([buffer, new Buffer([value])])
  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NmYjEuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGVuY3J5cHRCeXRlIChzZWxmLCBieXRlUGFyYW0sIGRlY3J5cHQpIHtcbiAgdmFyIHBhZFxuICB2YXIgaSA9IC0xXG4gIHZhciBsZW4gPSA4XG4gIHZhciBvdXQgPSAwXG4gIHZhciBiaXQsIHZhbHVlXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBwYWQgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gICAgYml0ID0gKGJ5dGVQYXJhbSAmICgxIDw8ICg3IC0gaSkpKSA/IDB4ODAgOiAwXG4gICAgdmFsdWUgPSBwYWRbMF0gXiBiaXRcbiAgICBvdXQgKz0gKCh2YWx1ZSAmIDB4ODApID4+IChpICUgOCkpXG4gICAgc2VsZi5fcHJldiA9IHNoaWZ0SW4oc2VsZi5fcHJldiwgZGVjcnlwdCA/IGJpdCA6IHZhbHVlKVxuICB9XG4gIHJldHVybiBvdXRcbn1cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaywgZGVjcnlwdCkge1xuICB2YXIgbGVuID0gY2h1bmsubGVuZ3RoXG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKGxlbilcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0W2ldID0gZW5jcnlwdEJ5dGUoc2VsZiwgY2h1bmtbaV0sIGRlY3J5cHQpXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuZnVuY3Rpb24gc2hpZnRJbiAoYnVmZmVyLCB2YWx1ZSkge1xuICB2YXIgbGVuID0gYnVmZmVyLmxlbmd0aFxuICB2YXIgaSA9IC0xXG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKGJ1ZmZlci5sZW5ndGgpXG4gIGJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoW2J1ZmZlciwgbmV3IEJ1ZmZlcihbdmFsdWVdKV0pXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBidWZmZXJbaV0gPDwgMSB8IGJ1ZmZlcltpICsgMV0gPj4gKDcpXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuIl19
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb.js":[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

exports.encrypt = function (self, data, decrypt) {
  var out = new Buffer('')
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = new Buffer('')
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}
function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NmYi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgZGF0YSwgZGVjcnlwdCkge1xuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcignJylcbiAgdmFyIGxlblxuXG4gIHdoaWxlIChkYXRhLmxlbmd0aCkge1xuICAgIGlmIChzZWxmLl9jYWNoZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHNlbGYuX2NhY2hlID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICAgICAgc2VsZi5fcHJldiA9IG5ldyBCdWZmZXIoJycpXG4gICAgfVxuXG4gICAgaWYgKHNlbGYuX2NhY2hlLmxlbmd0aCA8PSBkYXRhLmxlbmd0aCkge1xuICAgICAgbGVuID0gc2VsZi5fY2FjaGUubGVuZ3RoXG4gICAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFtvdXQsIGVuY3J5cHRTdGFydChzZWxmLCBkYXRhLnNsaWNlKDAsIGxlbiksIGRlY3J5cHQpXSlcbiAgICAgIGRhdGEgPSBkYXRhLnNsaWNlKGxlbilcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ID0gQnVmZmVyLmNvbmNhdChbb3V0LCBlbmNyeXB0U3RhcnQoc2VsZiwgZGF0YSwgZGVjcnlwdCldKVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3V0XG59XG5mdW5jdGlvbiBlbmNyeXB0U3RhcnQgKHNlbGYsIGRhdGEsIGRlY3J5cHQpIHtcbiAgdmFyIGxlbiA9IGRhdGEubGVuZ3RoXG4gIHZhciBvdXQgPSB4b3IoZGF0YSwgc2VsZi5fY2FjaGUpXG4gIHNlbGYuX2NhY2hlID0gc2VsZi5fY2FjaGUuc2xpY2UobGVuKVxuICBzZWxmLl9wcmV2ID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fcHJldiwgZGVjcnlwdCA/IGRhdGEgOiBvdXRdKVxuICByZXR1cm4gb3V0XG59XG4iXX0=
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/buffer-xor/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes/cbc.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/cbc.js"][0].apply(exports,arguments)
},{"buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/buffer-xor/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/modes.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes.js"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/authCipher.js":[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')
var GHASH = require('./ghash')
var xor = require('buffer-xor')
inherits(StreamCipher, Transform)
module.exports = StreamCipher

function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._finID = Buffer.concat([iv, new Buffer([0, 0, 0, 1])])
  iv = Buffer.concat([iv, new Buffer([0, 0, 0, 2])])
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  iv.copy(this._prev)
  this._mode = mode
  var h = new Buffer(4)
  h.fill(0)
  this._ghash = new GHASH(this._cipher.encryptBlock(h))
  this._authTag = null
  this._called = false
}
StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = new Buffer(rump)
      rump.fill(0)
      this._ghash.update(rump)
    }
  }
  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}
StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) {
    throw new Error('Unsupported state or unable to authenticate data')
  }
  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt) {
    if (xorTest(tag, this._authTag)) {
      throw new Error('Unsupported state or unable to authenticate data')
    }
  } else {
    this._authTag = tag
  }
  this._cipher.scrub()
}
StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (!this._decrypt && Buffer.isBuffer(this._authTag)) {
    return this._authTag
  } else {
    throw new Error('Attempting to get auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (this._decrypt) {
    this._authTag = tag
  } else {
    throw new Error('Attempting to set auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (!this._called) {
    this._ghash.update(buf)
    this._alen += buf.length
  } else {
    throw new Error('Attempting to set AAD in unsupported state')
  }
}
function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) {
    out++
  }
  var len = Math.min(a.length, b.length)
  var i = -1
  while (++i < len) {
    out += (a[i] ^ b[i])
  }
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2F1dGhDaXBoZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEdIQVNIID0gcmVxdWlyZSgnLi9naGFzaCcpXG52YXIgeG9yID0gcmVxdWlyZSgnYnVmZmVyLXhvcicpXG5pbmhlcml0cyhTdHJlYW1DaXBoZXIsIFRyYW5zZm9ybSlcbm1vZHVsZS5leHBvcnRzID0gU3RyZWFtQ2lwaGVyXG5cbmZ1bmN0aW9uIFN0cmVhbUNpcGhlciAobW9kZSwga2V5LCBpdiwgZGVjcnlwdCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU3RyZWFtQ2lwaGVyKSkge1xuICAgIHJldHVybiBuZXcgU3RyZWFtQ2lwaGVyKG1vZGUsIGtleSwgaXYpXG4gIH1cbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5fZmluSUQgPSBCdWZmZXIuY29uY2F0KFtpdiwgbmV3IEJ1ZmZlcihbMCwgMCwgMCwgMV0pXSlcbiAgaXYgPSBCdWZmZXIuY29uY2F0KFtpdiwgbmV3IEJ1ZmZlcihbMCwgMCwgMCwgMl0pXSlcbiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KVxuICB0aGlzLl9wcmV2ID0gbmV3IEJ1ZmZlcihpdi5sZW5ndGgpXG4gIHRoaXMuX2NhY2hlID0gbmV3IEJ1ZmZlcignJylcbiAgdGhpcy5fc2VjQ2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxuICB0aGlzLl9kZWNyeXB0ID0gZGVjcnlwdFxuICB0aGlzLl9hbGVuID0gMFxuICB0aGlzLl9sZW4gPSAwXG4gIGl2LmNvcHkodGhpcy5fcHJldilcbiAgdGhpcy5fbW9kZSA9IG1vZGVcbiAgdmFyIGggPSBuZXcgQnVmZmVyKDQpXG4gIGguZmlsbCgwKVxuICB0aGlzLl9naGFzaCA9IG5ldyBHSEFTSCh0aGlzLl9jaXBoZXIuZW5jcnlwdEJsb2NrKGgpKVxuICB0aGlzLl9hdXRoVGFnID0gbnVsbFxuICB0aGlzLl9jYWxsZWQgPSBmYWxzZVxufVxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIGlmICghdGhpcy5fY2FsbGVkICYmIHRoaXMuX2FsZW4pIHtcbiAgICB2YXIgcnVtcCA9IDE2IC0gKHRoaXMuX2FsZW4gJSAxNilcbiAgICBpZiAocnVtcCA8IDE2KSB7XG4gICAgICBydW1wID0gbmV3IEJ1ZmZlcihydW1wKVxuICAgICAgcnVtcC5maWxsKDApXG4gICAgICB0aGlzLl9naGFzaC51cGRhdGUocnVtcClcbiAgICB9XG4gIH1cbiAgdGhpcy5fY2FsbGVkID0gdHJ1ZVxuICB2YXIgb3V0ID0gdGhpcy5fbW9kZS5lbmNyeXB0KHRoaXMsIGNodW5rKVxuICBpZiAodGhpcy5fZGVjcnlwdCkge1xuICAgIHRoaXMuX2doYXNoLnVwZGF0ZShjaHVuaylcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9naGFzaC51cGRhdGUob3V0KVxuICB9XG4gIHRoaXMuX2xlbiArPSBjaHVuay5sZW5ndGhcbiAgcmV0dXJuIG91dFxufVxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLl9kZWNyeXB0ICYmICF0aGlzLl9hdXRoVGFnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBzdGF0ZSBvciB1bmFibGUgdG8gYXV0aGVudGljYXRlIGRhdGEnKVxuICB9XG4gIHZhciB0YWcgPSB4b3IodGhpcy5fZ2hhc2guZmluYWwodGhpcy5fYWxlbiAqIDgsIHRoaXMuX2xlbiAqIDgpLCB0aGlzLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHRoaXMuX2ZpbklEKSlcbiAgaWYgKHRoaXMuX2RlY3J5cHQpIHtcbiAgICBpZiAoeG9yVGVzdCh0YWcsIHRoaXMuX2F1dGhUYWcpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHN0YXRlIG9yIHVuYWJsZSB0byBhdXRoZW50aWNhdGUgZGF0YScpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMuX2F1dGhUYWcgPSB0YWdcbiAgfVxuICB0aGlzLl9jaXBoZXIuc2NydWIoKVxufVxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5nZXRBdXRoVGFnID0gZnVuY3Rpb24gZ2V0QXV0aFRhZyAoKSB7XG4gIGlmICghdGhpcy5fZGVjcnlwdCAmJiBCdWZmZXIuaXNCdWZmZXIodGhpcy5fYXV0aFRhZykpIHtcbiAgICByZXR1cm4gdGhpcy5fYXV0aFRhZ1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGluZyB0byBnZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxuICB9XG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLnNldEF1dGhUYWcgPSBmdW5jdGlvbiBzZXRBdXRoVGFnICh0YWcpIHtcbiAgaWYgKHRoaXMuX2RlY3J5cHQpIHtcbiAgICB0aGlzLl9hdXRoVGFnID0gdGFnXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0aW5nIHRvIHNldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG4gIH1cbn1cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuc2V0QUFEID0gZnVuY3Rpb24gc2V0QUFEIChidWYpIHtcbiAgaWYgKCF0aGlzLl9jYWxsZWQpIHtcbiAgICB0aGlzLl9naGFzaC51cGRhdGUoYnVmKVxuICAgIHRoaXMuX2FsZW4gKz0gYnVmLmxlbmd0aFxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGluZyB0byBzZXQgQUFEIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbiAgfVxufVxuZnVuY3Rpb24geG9yVGVzdCAoYSwgYikge1xuICB2YXIgb3V0ID0gMFxuICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgb3V0KytcbiAgfVxuICB2YXIgbGVuID0gTWF0aC5taW4oYS5sZW5ndGgsIGIubGVuZ3RoKVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXQgKz0gKGFbaV0gXiBiW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cbiJdfQ==
},{"./aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/aes.js","./ghash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/ghash.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/buffer-xor/index.js","cipher-base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/cipher-base/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/cipher-base/index.js":[function(require,module,exports){
(function (Buffer){
var Transform = require('stream').Transform
var inherits = require('inherits')
var StringDecoder = require('string_decoder').StringDecoder
module.exports = CipherBase
inherits(CipherBase, Transform)
function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  this._decoder = null
  this._encoding = null
}
CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = new Buffer(data, inputEnc)
  }
  var outData = this._update(data)
  if (this.hashMode) {
    return this
  }
  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }
  return outData
}

CipherBase.prototype.setAutoPadding = function () {}

CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this._final())
  } catch (e) {
    err = e
  } finally {
    done(err)
  }
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this._final() || new Buffer('')
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, final) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }
  if (this._encoding !== enc) {
    throw new Error('can\'t switch encodings')
  }
  var out = this._decoder.write(value)
  if (final) {
    out += this._decoder.end()
  }
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL25vZGVfbW9kdWxlcy9jaXBoZXItYmFzZS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdzdHJlYW0nKS5UcmFuc2Zvcm1cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXInKS5TdHJpbmdEZWNvZGVyXG5tb2R1bGUuZXhwb3J0cyA9IENpcGhlckJhc2VcbmluaGVyaXRzKENpcGhlckJhc2UsIFRyYW5zZm9ybSlcbmZ1bmN0aW9uIENpcGhlckJhc2UgKGhhc2hNb2RlKSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuaGFzaE1vZGUgPSB0eXBlb2YgaGFzaE1vZGUgPT09ICdzdHJpbmcnXG4gIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgdGhpc1toYXNoTW9kZV0gPSB0aGlzLl9maW5hbE9yRGlnZXN0XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5maW5hbCA9IHRoaXMuX2ZpbmFsT3JEaWdlc3RcbiAgfVxuICB0aGlzLl9kZWNvZGVyID0gbnVsbFxuICB0aGlzLl9lbmNvZGluZyA9IG51bGxcbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBpbnB1dEVuYywgb3V0cHV0RW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBkYXRhID0gbmV3IEJ1ZmZlcihkYXRhLCBpbnB1dEVuYylcbiAgfVxuICB2YXIgb3V0RGF0YSA9IHRoaXMuX3VwZGF0ZShkYXRhKVxuICBpZiAodGhpcy5oYXNoTW9kZSkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cbiAgaWYgKG91dHB1dEVuYykge1xuICAgIG91dERhdGEgPSB0aGlzLl90b1N0cmluZyhvdXREYXRhLCBvdXRwdXRFbmMpXG4gIH1cbiAgcmV0dXJuIG91dERhdGFcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QXV0b1BhZGRpbmcgPSBmdW5jdGlvbiAoKSB7fVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5nZXRBdXRoVGFnID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBnZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBdXRoVGFnID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBzZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBQUQgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhYWQgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGRhdGEsIF8sIG5leHQpIHtcbiAgdmFyIGVyclxuICB0cnkge1xuICAgIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgICB0aGlzLl91cGRhdGUoZGF0YSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXNoKHRoaXMuX3VwZGF0ZShkYXRhKSlcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnIgPSBlXG4gIH0gZmluYWxseSB7XG4gICAgbmV4dChlcnIpXG4gIH1cbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLl9mbHVzaCA9IGZ1bmN0aW9uIChkb25lKSB7XG4gIHZhciBlcnJcbiAgdHJ5IHtcbiAgICB0aGlzLnB1c2godGhpcy5fZmluYWwoKSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfSBmaW5hbGx5IHtcbiAgICBkb25lKGVycilcbiAgfVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZpbmFsT3JEaWdlc3QgPSBmdW5jdGlvbiAob3V0cHV0RW5jKSB7XG4gIHZhciBvdXREYXRhID0gdGhpcy5fZmluYWwoKSB8fCBuZXcgQnVmZmVyKCcnKVxuICBpZiAob3V0cHV0RW5jKSB7XG4gICAgb3V0RGF0YSA9IHRoaXMuX3RvU3RyaW5nKG91dERhdGEsIG91dHB1dEVuYywgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb3V0RGF0YVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fdG9TdHJpbmcgPSBmdW5jdGlvbiAodmFsdWUsIGVuYywgZmluYWwpIHtcbiAgaWYgKCF0aGlzLl9kZWNvZGVyKSB7XG4gICAgdGhpcy5fZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYylcbiAgICB0aGlzLl9lbmNvZGluZyA9IGVuY1xuICB9XG4gIGlmICh0aGlzLl9lbmNvZGluZyAhPT0gZW5jKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYW5cXCd0IHN3aXRjaCBlbmNvZGluZ3MnKVxuICB9XG4gIHZhciBvdXQgPSB0aGlzLl9kZWNvZGVyLndyaXRlKHZhbHVlKVxuICBpZiAoZmluYWwpIHtcbiAgICBvdXQgKz0gdGhpcy5fZGVjb2Rlci5lbmQoKVxuICB9XG4gIHJldHVybiBvdXRcbn1cbiJdfQ==
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js","stream":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/stream-browserify/index.js","string_decoder":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/string_decoder/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/buffer-xor/index.js":[function(require,module,exports){
(function (Buffer){
module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL25vZGVfbW9kdWxlcy9idWZmZXIteG9yL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhvciAoYSwgYikge1xuICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oYS5sZW5ndGgsIGIubGVuZ3RoKVxuICB2YXIgYnVmZmVyID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGJ1ZmZlcltpXSA9IGFbaV0gXiBiW2ldXG4gIH1cblxuICByZXR1cm4gYnVmZmVyXG59XG4iXX0=
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/ghash.js":[function(require,module,exports){
(function (Buffer){
var zeros = new Buffer(16)
zeros.fill(0)
module.exports = GHASH
function GHASH (key) {
  this.h = key
  this.state = new Buffer(16)
  this.state.fill(0)
  this.cache = new Buffer('')
}
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsb_Vi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - i % 8))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi = xor(Zi, Vi)
    }

    // Store the value of LSB(V_i)
    lsb_Vi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsb_Vi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}
GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}
GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, zeros], 16))
  }
  this.ghash(fromArray([
    0, abl,
    0, bl
  ]))
  return this.state
}

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}
function fromArray (out) {
  out = out.map(fixup_uint32)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}
var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function xor (a, b) {
  return [
    a[0] ^ b[0],
    a[1] ^ b[1],
    a[2] ^ b[2],
    a[3] ^ b[3]
  ]
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2doYXNoLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciB6ZXJvcyA9IG5ldyBCdWZmZXIoMTYpXG56ZXJvcy5maWxsKDApXG5tb2R1bGUuZXhwb3J0cyA9IEdIQVNIXG5mdW5jdGlvbiBHSEFTSCAoa2V5KSB7XG4gIHRoaXMuaCA9IGtleVxuICB0aGlzLnN0YXRlID0gbmV3IEJ1ZmZlcigxNilcbiAgdGhpcy5zdGF0ZS5maWxsKDApXG4gIHRoaXMuY2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxufVxuLy8gZnJvbSBodHRwOi8vYml0d2lzZXNoaWZ0bGVmdC5naXRodWIuaW8vc2pjbC9kb2Mvc3ltYm9scy9zcmMvY29yZV9nY20uanMuaHRtbFxuLy8gYnkgSnVobyBWw6Row6QtSGVydHR1YVxuR0hBU0gucHJvdG90eXBlLmdoYXNoID0gZnVuY3Rpb24gKGJsb2NrKSB7XG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGJsb2NrLmxlbmd0aCkge1xuICAgIHRoaXMuc3RhdGVbaV0gXj0gYmxvY2tbaV1cbiAgfVxuICB0aGlzLl9tdWx0aXBseSgpXG59XG5cbkdIQVNILnByb3RvdHlwZS5fbXVsdGlwbHkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBWaSA9IHRvQXJyYXkodGhpcy5oKVxuICB2YXIgWmkgPSBbMCwgMCwgMCwgMF1cbiAgdmFyIGosIHhpLCBsc2JfVmlcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgMTI4KSB7XG4gICAgeGkgPSAodGhpcy5zdGF0ZVt+fihpIC8gOCldICYgKDEgPDwgKDcgLSBpICUgOCkpKSAhPT0gMFxuICAgIGlmICh4aSkge1xuICAgICAgLy8gWl9pKzEgPSBaX2kgXiBWX2lcbiAgICAgIFppID0geG9yKFppLCBWaSlcbiAgICB9XG5cbiAgICAvLyBTdG9yZSB0aGUgdmFsdWUgb2YgTFNCKFZfaSlcbiAgICBsc2JfVmkgPSAoVmlbM10gJiAxKSAhPT0gMFxuXG4gICAgLy8gVl9pKzEgPSBWX2kgPj4gMVxuICAgIGZvciAoaiA9IDM7IGogPiAwOyBqLS0pIHtcbiAgICAgIFZpW2pdID0gKFZpW2pdID4+PiAxKSB8ICgoVmlbaiAtIDFdICYgMSkgPDwgMzEpXG4gICAgfVxuICAgIFZpWzBdID0gVmlbMF0gPj4+IDFcblxuICAgIC8vIElmIExTQihWX2kpIGlzIDEsIFZfaSsxID0gKFZfaSA+PiAxKSBeIFJcbiAgICBpZiAobHNiX1ZpKSB7XG4gICAgICBWaVswXSA9IFZpWzBdIF4gKDB4ZTEgPDwgMjQpXG4gICAgfVxuICB9XG4gIHRoaXMuc3RhdGUgPSBmcm9tQXJyYXkoWmkpXG59XG5HSEFTSC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGJ1Zikge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgYnVmXSlcbiAgdmFyIGNodW5rXG4gIHdoaWxlICh0aGlzLmNhY2hlLmxlbmd0aCA+PSAxNikge1xuICAgIGNodW5rID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNilcbiAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICB0aGlzLmdoYXNoKGNodW5rKVxuICB9XG59XG5HSEFTSC5wcm90b3R5cGUuZmluYWwgPSBmdW5jdGlvbiAoYWJsLCBibCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGgpIHtcbiAgICB0aGlzLmdoYXNoKEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIHplcm9zXSwgMTYpKVxuICB9XG4gIHRoaXMuZ2hhc2goZnJvbUFycmF5KFtcbiAgICAwLCBhYmwsXG4gICAgMCwgYmxcbiAgXSkpXG4gIHJldHVybiB0aGlzLnN0YXRlXG59XG5cbmZ1bmN0aW9uIHRvQXJyYXkgKGJ1Zikge1xuICByZXR1cm4gW1xuICAgIGJ1Zi5yZWFkVUludDMyQkUoMCksXG4gICAgYnVmLnJlYWRVSW50MzJCRSg0KSxcbiAgICBidWYucmVhZFVJbnQzMkJFKDgpLFxuICAgIGJ1Zi5yZWFkVUludDMyQkUoMTIpXG4gIF1cbn1cbmZ1bmN0aW9uIGZyb21BcnJheSAob3V0KSB7XG4gIG91dCA9IG91dC5tYXAoZml4dXBfdWludDMyKVxuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcigxNilcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzBdLCAwKVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMV0sIDQpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsyXSwgOClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzNdLCAxMilcbiAgcmV0dXJuIGJ1ZlxufVxudmFyIHVpbnRfbWF4ID0gTWF0aC5wb3coMiwgMzIpXG5mdW5jdGlvbiBmaXh1cF91aW50MzIgKHgpIHtcbiAgdmFyIHJldCwgeF9wb3NcbiAgcmV0ID0geCA+IHVpbnRfbWF4IHx8IHggPCAwID8gKHhfcG9zID0gTWF0aC5hYnMoeCkgJSB1aW50X21heCwgeCA8IDAgPyB1aW50X21heCAtIHhfcG9zIDogeF9wb3MpIDogeFxuICByZXR1cm4gcmV0XG59XG5mdW5jdGlvbiB4b3IgKGEsIGIpIHtcbiAgcmV0dXJuIFtcbiAgICBhWzBdIF4gYlswXSxcbiAgICBhWzFdIF4gYlsxXSxcbiAgICBhWzJdIF4gYlsyXSxcbiAgICBhWzNdIF4gYlszXVxuICBdXG59XG4iXX0=
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/browserify-aes/aes.js":[function(require,module,exports){
(function (Buffer){
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec

// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function scrub_vec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
  return false
}

function Global () {
  this.SBOX = []
  this.INV_SBOX = []
  this.SUB_MIX = [[], [], [], []]
  this.INV_SUB_MIX = [[], [], [], []]
  this.init()
  this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
}

Global.prototype.init = function () {
  var d, i, sx, t, x, x2, x4, x8, xi, _i
  d = (function () {
    var _i, _results
    _results = []
    for (i = _i = 0; _i < 256; i = ++_i) {
      if (i < 128) {
        _results.push(i << 1)
      } else {
        _results.push((i << 1) ^ 0x11b)
      }
    }
    return _results
  })()
  x = 0
  xi = 0
  for (i = _i = 0; _i < 256; i = ++_i) {
    sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    this.SBOX[x] = sx
    this.INV_SBOX[sx] = x
    x2 = d[x]
    x4 = d[x2]
    x8 = d[x4]
    t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    this.SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    this.SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    this.SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    this.SUB_MIX[3][x] = t
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    this.INV_SUB_MIX[3][sx] = t
    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }
  return true
}

var G = new Global()

AES.blockSize = 4 * 4

AES.prototype.blockSize = AES.blockSize

AES.keySize = 256 / 8

AES.prototype.keySize = AES.keySize

function bufferToArray (buf) {
  var len = buf.length / 4
  var out = new Array(len)
  var i = -1
  while (++i < len) {
    out[i] = buf.readUInt32BE(i * 4)
  }
  return out
}
function AES (key) {
  this._key = bufferToArray(key)
  this._doReset()
}

AES.prototype._doReset = function () {
  var invKsRow, keySize, keyWords, ksRow, ksRows, t
  keyWords = this._key
  keySize = keyWords.length
  this._nRounds = keySize + 6
  ksRows = (this._nRounds + 1) * 4
  this._keySchedule = []
  for (ksRow = 0; ksRow < ksRows; ksRow++) {
    this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t)
  }
  this._invKeySchedule = []
  for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {
    ksRow = ksRows - invKsRow
    t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)]
    this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]]
  }
  return true
}

AES.prototype.encryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var temp = [M[3], M[1]]
  M[1] = temp[0]
  M[3] = temp[1]
  var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrub_vec(this._keySchedule)
  scrub_vec(this._invKeySchedule)
  scrub_vec(this._key)
}

AES.prototype._doCryptBlock = function (M, keySchedule, SUB_MIX, SBOX) {
  var ksRow, s0, s1, s2, s3, t0, t1, t2, t3

  s0 = M[0] ^ keySchedule[0]
  s1 = M[1] ^ keySchedule[1]
  s2 = M[2] ^ keySchedule[2]
  s3 = M[3] ^ keySchedule[3]
  ksRow = 4
  for (var round = 1; round < this._nRounds; round++) {
    t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }
  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  return [
    fixup_uint32(t0),
    fixup_uint32(t1),
    fixup_uint32(t2),
    fixup_uint32(t3)
  ]
}

exports.AES = AES

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/asn1.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/asn1.js"][0].apply(exports,arguments)
},{"asn1.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js"][0].apply(exports,arguments)
},{"./asn1/api":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/api.js","./asn1/base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/index.js","./asn1/constants":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/constants/index.js","./asn1/decoders":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/index.js","./asn1/encoders":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/index.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/bn.js/lib/bn.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/index.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/index.js"][0].apply(exports,arguments)
},{"./der":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/der.js","./pem":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/pem.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/pem.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/pem.js"][0].apply(exports,arguments)
},{"../../asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js","./der":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/der.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/der.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/der.js"][0].apply(exports,arguments)
},{"../../asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/index.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/index.js"][0].apply(exports,arguments)
},{"./der":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/der.js","./pem":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/pem.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/pem.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/pem.js"][0].apply(exports,arguments)
},{"../../asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js","./der":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/der.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/der.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/der.js"][0].apply(exports,arguments)
},{"../../asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/constants/index.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/constants/index.js"][0].apply(exports,arguments)
},{"./der":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/constants/der.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/constants/der.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/constants/der.js"][0].apply(exports,arguments)
},{"../constants":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/constants/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/index.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/index.js"][0].apply(exports,arguments)
},{"./buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/buffer.js","./node":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/node.js","./reporter":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/reporter.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/reporter.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/reporter.js"][0].apply(exports,arguments)
},{"inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/node.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/node.js"][0].apply(exports,arguments)
},{"../base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/index.js","minimalistic-assert":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/node_modules/minimalistic-assert/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/node_modules/minimalistic-assert/index.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/node_modules/minimalistic-assert/index.js"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/buffer.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/buffer.js"][0].apply(exports,arguments)
},{"../base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/index.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/api.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/api.js"][0].apply(exports,arguments)
},{"../asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js","vm":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/vm-browserify/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/aesid.json":[function(require,module,exports){
module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/aesid.json"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/browserify-rsa/index.js":[function(require,module,exports){
(function (Buffer){
var bn = require('bn.js');
var randomBytes = require('randombytes');
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).mod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).mod(p);
  h.imul(q);
  m2.iadd(h);
  var out = new Buffer(m2.imul(blinds.unblinder).mod(priv.modulus).toArray());
  if (out.length < len) {
    var prefix = new Buffer(len - out.length);
    prefix.fill(0);
    out = Buffer.concat([prefix, out], len);
  }
  return out;
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.mod(priv.prime1) || !r.mod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}
}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktcnNhL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGJuID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciByYW5kb21CeXRlcyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGNydDtcbmZ1bmN0aW9uIGJsaW5kKHByaXYpIHtcbiAgdmFyIHIgPSBnZXRyKHByaXYpO1xuICB2YXIgYmxpbmRlciA9IHIudG9SZWQoYm4ubW9udChwcml2Lm1vZHVsdXMpKVxuICAucmVkUG93KG5ldyBibihwcml2LnB1YmxpY0V4cG9uZW50KSkuZnJvbVJlZCgpO1xuICByZXR1cm4ge1xuICAgIGJsaW5kZXI6IGJsaW5kZXIsXG4gICAgdW5ibGluZGVyOnIuaW52bShwcml2Lm1vZHVsdXMpXG4gIH07XG59XG5mdW5jdGlvbiBjcnQobXNnLCBwcml2KSB7XG4gIHZhciBibGluZHMgPSBibGluZChwcml2KTtcbiAgdmFyIGxlbiA9IHByaXYubW9kdWx1cy5ieXRlTGVuZ3RoKCk7XG4gIHZhciBtb2QgPSBibi5tb250KHByaXYubW9kdWx1cyk7XG4gIHZhciBibGluZGVkID0gbmV3IGJuKG1zZykubXVsKGJsaW5kcy5ibGluZGVyKS5tb2QocHJpdi5tb2R1bHVzKTtcbiAgdmFyIGMxID0gYmxpbmRlZC50b1JlZChibi5tb250KHByaXYucHJpbWUxKSk7XG4gIHZhciBjMiA9IGJsaW5kZWQudG9SZWQoYm4ubW9udChwcml2LnByaW1lMikpO1xuICB2YXIgcWludiA9IHByaXYuY29lZmZpY2llbnQ7XG4gIHZhciBwID0gcHJpdi5wcmltZTE7XG4gIHZhciBxID0gcHJpdi5wcmltZTI7XG4gIHZhciBtMSA9IGMxLnJlZFBvdyhwcml2LmV4cG9uZW50MSk7XG4gIHZhciBtMiA9IGMyLnJlZFBvdyhwcml2LmV4cG9uZW50Mik7XG4gIG0xID0gbTEuZnJvbVJlZCgpO1xuICBtMiA9IG0yLmZyb21SZWQoKTtcbiAgdmFyIGggPSBtMS5pc3ViKG0yKS5pbXVsKHFpbnYpLm1vZChwKTtcbiAgaC5pbXVsKHEpO1xuICBtMi5pYWRkKGgpO1xuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcihtMi5pbXVsKGJsaW5kcy51bmJsaW5kZXIpLm1vZChwcml2Lm1vZHVsdXMpLnRvQXJyYXkoKSk7XG4gIGlmIChvdXQubGVuZ3RoIDwgbGVuKSB7XG4gICAgdmFyIHByZWZpeCA9IG5ldyBCdWZmZXIobGVuIC0gb3V0Lmxlbmd0aCk7XG4gICAgcHJlZml4LmZpbGwoMCk7XG4gICAgb3V0ID0gQnVmZmVyLmNvbmNhdChbcHJlZml4LCBvdXRdLCBsZW4pO1xuICB9XG4gIHJldHVybiBvdXQ7XG59XG5jcnQuZ2V0ciA9IGdldHI7XG5mdW5jdGlvbiBnZXRyKHByaXYpIHtcbiAgdmFyIGxlbiA9IHByaXYubW9kdWx1cy5ieXRlTGVuZ3RoKCk7XG4gIHZhciByID0gbmV3IGJuKHJhbmRvbUJ5dGVzKGxlbikpO1xuICB3aGlsZSAoci5jbXAocHJpdi5tb2R1bHVzKSA+PSAgMCB8fCAhci5tb2QocHJpdi5wcmltZTEpIHx8ICFyLm1vZChwcml2LnByaW1lMikpIHtcbiAgICByID0gbmV3IGJuKHJhbmRvbUJ5dGVzKGxlbikpO1xuICB9XG4gIHJldHVybiByO1xufSJdfQ==
},{"bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/bn.js/lib/bn.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","randombytes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/randombytes/browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/node_modules/bn.js/lib/bn.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/node_modules/bn.js/lib/bn.js"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/public-encrypt/mgf.js":[function(require,module,exports){
(function (Buffer){
var createHash = require('create-hash');
module.exports = function (seed, len) {
  var t = new Buffer('');
  var  i = 0, c;
  while (t.length < len) {
    c = i2ops(i++);
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);
  }
  return t.slice(0, len);
};

function i2ops(c) {
  var out = new Buffer(4);
  out.writeUInt32BE(c,0);
  return out;
}
}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbWdmLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNyZWF0ZUhhc2ggPSByZXF1aXJlKCdjcmVhdGUtaGFzaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc2VlZCwgbGVuKSB7XG4gIHZhciB0ID0gbmV3IEJ1ZmZlcignJyk7XG4gIHZhciAgaSA9IDAsIGM7XG4gIHdoaWxlICh0Lmxlbmd0aCA8IGxlbikge1xuICAgIGMgPSBpMm9wcyhpKyspO1xuICAgIHQgPSBCdWZmZXIuY29uY2F0KFt0LCBjcmVhdGVIYXNoKCdzaGExJykudXBkYXRlKHNlZWQpLnVwZGF0ZShjKS5kaWdlc3QoKV0pO1xuICB9XG4gIHJldHVybiB0LnNsaWNlKDAsIGxlbik7XG59O1xuXG5mdW5jdGlvbiBpMm9wcyhjKSB7XG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKDQpO1xuICBvdXQud3JpdGVVSW50MzJCRShjLDApO1xuICByZXR1cm4gb3V0O1xufSJdfQ==
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","create-hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/browser.js":[function(require,module,exports){
(function (Buffer){
var generatePrime = require('./lib/generatePrime');
var primes = require('./lib/primes');

var DH = require('./lib/dh');

function getDiffieHellman(mod) {
  var prime = new Buffer(primes[mod].prime, 'hex');
  var gen = new Buffer(primes[mod].gen, 'hex');

  return new DH(prime, gen);
}

function createDiffieHellman(prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || (typeof enc === 'string' && ['hex', 'binary', 'base64'].indexOf(enc) === -1)) {
    genc = generator;
    generator = enc;
    enc = undefined;
  }

  enc = enc || 'binary';
  genc = genc || 'binary';
  generator = generator || new Buffer([2]);

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc);
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true);
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc);
  }

  return new DH(prime, generator, true);
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvZGlmZmllLWhlbGxtYW4vYnJvd3Nlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGdlbmVyYXRlUHJpbWUgPSByZXF1aXJlKCcuL2xpYi9nZW5lcmF0ZVByaW1lJyk7XG52YXIgcHJpbWVzID0gcmVxdWlyZSgnLi9saWIvcHJpbWVzJyk7XG5cbnZhciBESCA9IHJlcXVpcmUoJy4vbGliL2RoJyk7XG5cbmZ1bmN0aW9uIGdldERpZmZpZUhlbGxtYW4obW9kKSB7XG4gIHZhciBwcmltZSA9IG5ldyBCdWZmZXIocHJpbWVzW21vZF0ucHJpbWUsICdoZXgnKTtcbiAgdmFyIGdlbiA9IG5ldyBCdWZmZXIocHJpbWVzW21vZF0uZ2VuLCAnaGV4Jyk7XG5cbiAgcmV0dXJuIG5ldyBESChwcmltZSwgZ2VuKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGlmZmllSGVsbG1hbihwcmltZSwgZW5jLCBnZW5lcmF0b3IsIGdlbmMpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihlbmMpIHx8ICh0eXBlb2YgZW5jID09PSAnc3RyaW5nJyAmJiBbJ2hleCcsICdiaW5hcnknLCAnYmFzZTY0J10uaW5kZXhPZihlbmMpID09PSAtMSkpIHtcbiAgICBnZW5jID0gZ2VuZXJhdG9yO1xuICAgIGdlbmVyYXRvciA9IGVuYztcbiAgICBlbmMgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBlbmMgPSBlbmMgfHwgJ2JpbmFyeSc7XG4gIGdlbmMgPSBnZW5jIHx8ICdiaW5hcnknO1xuICBnZW5lcmF0b3IgPSBnZW5lcmF0b3IgfHwgbmV3IEJ1ZmZlcihbMl0pO1xuXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGdlbmVyYXRvcikpIHtcbiAgICBnZW5lcmF0b3IgPSBuZXcgQnVmZmVyKGdlbmVyYXRvciwgZ2VuYyk7XG4gIH1cblxuICBpZiAodHlwZW9mIHByaW1lID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBuZXcgREgoZ2VuZXJhdGVQcmltZShwcmltZSwgZ2VuZXJhdG9yKSwgZ2VuZXJhdG9yLCB0cnVlKTtcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHByaW1lKSkge1xuICAgIHByaW1lID0gbmV3IEJ1ZmZlcihwcmltZSwgZW5jKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgREgocHJpbWUsIGdlbmVyYXRvciwgdHJ1ZSk7XG59XG5cbmV4cG9ydHMuRGlmZmllSGVsbG1hbkdyb3VwID0gZXhwb3J0cy5jcmVhdGVEaWZmaWVIZWxsbWFuR3JvdXAgPSBleHBvcnRzLmdldERpZmZpZUhlbGxtYW4gPSBnZXREaWZmaWVIZWxsbWFuO1xuZXhwb3J0cy5jcmVhdGVEaWZmaWVIZWxsbWFuID0gZXhwb3J0cy5EaWZmaWVIZWxsbWFuID0gY3JlYXRlRGlmZmllSGVsbG1hbjtcbiJdfQ==
},{"./lib/dh":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/lib/dh.js","./lib/generatePrime":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/lib/generatePrime.js","./lib/primes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/lib/primes.json","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/lib/primes.json":[function(require,module,exports){
module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports={
    "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    },
    "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    },
    "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    },
    "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    },
    "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    },
    "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    },
    "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    },
    "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    }
}
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/lib/dh.js":[function(require,module,exports){
(function (Buffer){
var BN = require('bn.js');
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require('./generatePrime');
var randomBytes = require('randombytes');
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;
  
  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;
    
    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      } 
      break;
    default: 
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function defineError (self, error) {
  try {
    Object.defineProperty(self, 'verifyError', {
      enumerable: true,
      value: error,
      writable: false
    });
  } catch(e) {
    self.verifyError = error;
  }
}
function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = void 0;
  this._priv = void 0;
  
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
    defineError(this, checkPrime(this.__prime, generator));
  } else {
    defineError(this, 8);
  }
}

DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}
}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvZGlmZmllLWhlbGxtYW4vbGliL2RoLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIE1pbGxlclJhYmluID0gcmVxdWlyZSgnbWlsbGVyLXJhYmluJyk7XG52YXIgbWlsbGVyUmFiaW4gPSBuZXcgTWlsbGVyUmFiaW4oKTtcbnZhciBUV0VOVFlGT1VSID0gbmV3IEJOKDI0KTtcbnZhciBFTEVWRU4gPSBuZXcgQk4oMTEpO1xudmFyIFRFTiA9IG5ldyBCTigxMCk7XG52YXIgVEhSRUUgPSBuZXcgQk4oMyk7XG52YXIgU0VWRU4gPSBuZXcgQk4oNyk7XG52YXIgcHJpbWVzID0gcmVxdWlyZSgnLi9nZW5lcmF0ZVByaW1lJyk7XG52YXIgcmFuZG9tQnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpO1xubW9kdWxlLmV4cG9ydHMgPSBESDtcblxuZnVuY3Rpb24gc2V0UHVibGljS2V5KHB1YiwgZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAndXRmOCc7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHB1YikpIHtcbiAgICBwdWIgPSBuZXcgQnVmZmVyKHB1YiwgZW5jKTtcbiAgfVxuICB0aGlzLl9wdWIgPSBuZXcgQk4ocHViKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHNldFByaXZhdGVLZXkocHJpdiwgZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAndXRmOCc7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHByaXYpKSB7XG4gICAgcHJpdiA9IG5ldyBCdWZmZXIocHJpdiwgZW5jKTtcbiAgfVxuICB0aGlzLl9wcml2ID0gbmV3IEJOKHByaXYpO1xuICByZXR1cm4gdGhpcztcbn1cblxudmFyIHByaW1lQ2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGNoZWNrUHJpbWUocHJpbWUsIGdlbmVyYXRvcikge1xuICB2YXIgZ2VuID0gZ2VuZXJhdG9yLnRvU3RyaW5nKCdoZXgnKTtcbiAgdmFyIGhleCA9IFtnZW4sIHByaW1lLnRvU3RyaW5nKDE2KV0uam9pbignXycpO1xuICBpZiAoaGV4IGluIHByaW1lQ2FjaGUpIHtcbiAgICByZXR1cm4gcHJpbWVDYWNoZVtoZXhdO1xuICB9XG4gIHZhciBlcnJvciA9IDA7XG4gIFxuICBpZiAocHJpbWUuaXNFdmVuKCkgfHxcbiAgICAhcHJpbWVzLnNpbXBsZVNpZXZlIHx8XG4gICAgIXByaW1lcy5mZXJtYXRUZXN0KHByaW1lKSB8fFxuICAgICFtaWxsZXJSYWJpbi50ZXN0KHByaW1lKSkge1xuICAgIC8vbm90IGEgcHJpbWUgc28gKzFcbiAgICBlcnJvciArPSAxO1xuICAgIFxuICAgIGlmIChnZW4gPT09ICcwMicgfHwgZ2VuID09PSAnMDUnKSB7XG4gICAgICAvLyB3ZSdkIGJlIGFibGUgdG8gY2hlY2sgdGhlIGdlbmVyYXRvclxuICAgICAgLy8gaXQgd291bGQgZmFpbCBzbyArOFxuICAgICAgZXJyb3IgKz0gODtcbiAgICB9IGVsc2Uge1xuICAgICAgLy93ZSB3b3VsZG4ndCBiZSBhYmxlIHRvIHRlc3QgdGhlIGdlbmVyYXRvclxuICAgICAgLy8gc28gKzRcbiAgICAgIGVycm9yICs9IDQ7XG4gICAgfVxuICAgIHByaW1lQ2FjaGVbaGV4XSA9IGVycm9yO1xuICAgIHJldHVybiBlcnJvcjtcbiAgfVxuICBpZiAoIW1pbGxlclJhYmluLnRlc3QocHJpbWUuc2hybigxKSkpIHtcbiAgICAvL25vdCBhIHNhZmUgcHJpbWVcbiAgICBlcnJvciArPSAyO1xuICB9XG4gIHZhciByZW07XG4gIHN3aXRjaCAoZ2VuKSB7XG4gICAgY2FzZSAnMDInOlxuICAgICAgaWYgKHByaW1lLm1vZChUV0VOVFlGT1VSKS5jbXAoRUxFVkVOKSkge1xuICAgICAgICAvLyB1bnN1aWRhYmxlIGdlbmVyYXRvclxuICAgICAgICBlcnJvciArPSA4O1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnMDUnOlxuICAgICAgcmVtID0gcHJpbWUubW9kKFRFTik7XG4gICAgICBpZiAocmVtLmNtcChUSFJFRSkgJiYgcmVtLmNtcChTRVZFTikpIHtcbiAgICAgICAgLy8gcHJpbWUgbW9kIDEwIG5lZWRzIHRvIGVxdWFsIDMgb3IgN1xuICAgICAgICBlcnJvciArPSA4O1xuICAgICAgfSBcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6IFxuICAgICAgZXJyb3IgKz0gNDtcbiAgfVxuICBwcmltZUNhY2hlW2hleF0gPSBlcnJvcjtcbiAgcmV0dXJuIGVycm9yO1xufVxuXG5mdW5jdGlvbiBkZWZpbmVFcnJvciAoc2VsZiwgZXJyb3IpIHtcbiAgdHJ5IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZiwgJ3ZlcmlmeUVycm9yJywge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBlcnJvcixcbiAgICAgIHdyaXRhYmxlOiBmYWxzZVxuICAgIH0pO1xuICB9IGNhdGNoKGUpIHtcbiAgICBzZWxmLnZlcmlmeUVycm9yID0gZXJyb3I7XG4gIH1cbn1cbmZ1bmN0aW9uIERIKHByaW1lLCBnZW5lcmF0b3IsIG1hbGxlYWJsZSkge1xuICB0aGlzLnNldEdlbmVyYXRvcihnZW5lcmF0b3IpO1xuICB0aGlzLl9fcHJpbWUgPSBuZXcgQk4ocHJpbWUpO1xuICB0aGlzLl9wcmltZSA9IEJOLm1vbnQodGhpcy5fX3ByaW1lKTtcbiAgdGhpcy5fcHJpbWVMZW4gPSBwcmltZS5sZW5ndGg7XG4gIHRoaXMuX3B1YiA9IHZvaWQgMDtcbiAgdGhpcy5fcHJpdiA9IHZvaWQgMDtcbiAgXG4gIGlmIChtYWxsZWFibGUpIHtcbiAgICB0aGlzLnNldFB1YmxpY0tleSA9IHNldFB1YmxpY0tleTtcbiAgICB0aGlzLnNldFByaXZhdGVLZXkgPSBzZXRQcml2YXRlS2V5O1xuICAgIGRlZmluZUVycm9yKHRoaXMsIGNoZWNrUHJpbWUodGhpcy5fX3ByaW1lLCBnZW5lcmF0b3IpKTtcbiAgfSBlbHNlIHtcbiAgICBkZWZpbmVFcnJvcih0aGlzLCA4KTtcbiAgfVxufVxuXG5ESC5wcm90b3R5cGUuZ2VuZXJhdGVLZXlzID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuX3ByaXYpIHtcbiAgICB0aGlzLl9wcml2ID0gbmV3IEJOKHJhbmRvbUJ5dGVzKHRoaXMuX3ByaW1lTGVuKSk7XG4gIH1cbiAgdGhpcy5fcHViID0gdGhpcy5fZ2VuLnRvUmVkKHRoaXMuX3ByaW1lKS5yZWRQb3codGhpcy5fcHJpdikuZnJvbVJlZCgpO1xuICByZXR1cm4gdGhpcy5nZXRQdWJsaWNLZXkoKTtcbn07XG5cbkRILnByb3RvdHlwZS5jb21wdXRlU2VjcmV0ID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gIG90aGVyID0gbmV3IEJOKG90aGVyKTtcbiAgb3RoZXIgPSBvdGhlci50b1JlZCh0aGlzLl9wcmltZSk7XG4gIHZhciBzZWNyZXQgPSBvdGhlci5yZWRQb3codGhpcy5fcHJpdikuZnJvbVJlZCgpO1xuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcihzZWNyZXQudG9BcnJheSgpKTtcbiAgdmFyIHByaW1lID0gdGhpcy5nZXRQcmltZSgpO1xuICBpZiAob3V0Lmxlbmd0aCA8IHByaW1lLmxlbmd0aCkge1xuICAgIHZhciBmcm9udCA9IG5ldyBCdWZmZXIocHJpbWUubGVuZ3RoIC0gb3V0Lmxlbmd0aCk7XG4gICAgZnJvbnQuZmlsbCgwKTtcbiAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFtmcm9udCwgb3V0XSk7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG5cbkRILnByb3RvdHlwZS5nZXRQdWJsaWNLZXkgPSBmdW5jdGlvbiBnZXRQdWJsaWNLZXkoZW5jKSB7XG4gIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZSh0aGlzLl9wdWIsIGVuYyk7XG59O1xuXG5ESC5wcm90b3R5cGUuZ2V0UHJpdmF0ZUtleSA9IGZ1bmN0aW9uIGdldFByaXZhdGVLZXkoZW5jKSB7XG4gIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZSh0aGlzLl9wcml2LCBlbmMpO1xufTtcblxuREgucHJvdG90eXBlLmdldFByaW1lID0gZnVuY3Rpb24gKGVuYykge1xuICByZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUodGhpcy5fX3ByaW1lLCBlbmMpO1xufTtcblxuREgucHJvdG90eXBlLmdldEdlbmVyYXRvciA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKHRoaXMuX2dlbiwgZW5jKTtcbn07XG5cbkRILnByb3RvdHlwZS5zZXRHZW5lcmF0b3IgPSBmdW5jdGlvbiAoZ2VuLCBlbmMpIHtcbiAgZW5jID0gZW5jIHx8ICd1dGY4JztcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoZ2VuKSkge1xuICAgIGdlbiA9IG5ldyBCdWZmZXIoZ2VuLCBlbmMpO1xuICB9XG4gIHRoaXMuX2dlbiA9IG5ldyBCTihnZW4pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGZvcm1hdFJldHVyblZhbHVlKGJuLCBlbmMpIHtcbiAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIoYm4udG9BcnJheSgpKTtcbiAgaWYgKCFlbmMpIHtcbiAgICByZXR1cm4gYnVmO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBidWYudG9TdHJpbmcoZW5jKTtcbiAgfVxufSJdfQ==
},{"./generatePrime":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/lib/generatePrime.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/node_modules/bn.js/lib/bn.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","miller-rabin":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/node_modules/miller-rabin/lib/mr.js","randombytes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/randombytes/browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/lib/generatePrime.js":[function(require,module,exports){
var randomBytes = require('randombytes');
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);
  var runs, comp;
  function generateRandom(bits) {
    runs = -1;
    var out = new BN(randomBytes(Math.ceil(bits / 8)));
    while (out.bitLength() > bits) {
      out.ishrn(1);
    }
    if (out.isEven()) {
      out.iadd(ONE);
    }
    if (!out.testn(1)) {
      out.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (out.mod(TWENTYFOUR).cmp(ELEVEN)) {
        out.iadd(FOUR);
      }
      comp = {
        major: [TWENTYFOUR],
        minor: [TWELVE]
      };
    } else if (!gen.cmp(FIVE)) {
      rem = out.mod(TEN);
      while (rem.cmp(THREE)) {
        out.iadd(FOUR);
        rem = out.mod(TEN);
      }
      comp = {
        major: [FOUR, SIXTEEN],
        minor: [TWO, EIGHT]
      };
    } else {
      comp = {
        major: [FOUR],
        minor: [TWO]
      };
    }
    return out;
  }
  var num = generateRandom(bits);

  var n2 = num.shrn(1);

  while (true) {
    while (num.bitLength() > bits) {
      num = generateRandom(bits);
      n2 = num.shrn(1);
    }
    runs++;
    if (simpleSieve(n2) &&  simpleSieve(num) &&
      fermatTest(n2) &&  fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
    num.iadd(comp.major[runs%comp.major.length]);
    n2.iadd(comp.minor[runs%comp.minor.length]);
  }

}
},{"bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/node_modules/bn.js/lib/bn.js","miller-rabin":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/node_modules/miller-rabin/lib/mr.js","randombytes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/randombytes/browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/node_modules/miller-rabin/lib/mr.js":[function(require,module,exports){
var bn = require('bn.js');
var brorand = require('brorand');

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._rand = function _rand(n) {
  var len = n.bitLength();
  var buf = this.rand.generate(Math.ceil(len / 8));

  // Set low bits
  buf[0] |= 3;

  // Mask high bits
  var mask = len & 0x7;
  if (mask !== 0)
    buf[buf.length - 1] >>= 7 - mask;

  return new bn(buf);
}

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  var n2 = n1.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._rand(n2);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  var n2 = n1.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._rand(n2);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};

},{"bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/node_modules/bn.js/lib/bn.js","brorand":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/node_modules/miller-rabin/node_modules/brorand/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/node_modules/miller-rabin/node_modules/brorand/index.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/brorand/index.js"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/diffie-hellman/node_modules/bn.js/lib/bn.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/bn.js/lib/bn.js"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/browser.js":[function(require,module,exports){
(function (Buffer){
var elliptic = require('elliptic');
var BN = require('bn.js');

module.exports = function createECDH(curve) {
	return new ECDH(curve);
};

var aliases = {
	secp256k1: {
		name: 'secp256k1',
		byteLength: 32
	},
	secp224r1: {
		name: 'p224',
		byteLength: 28
	},
	prime256v1: {
		name: 'p256',
		byteLength: 32
	},
	prime192v1: {
		name: 'p192',
		byteLength: 24
	},
	ed25519: {
		name: 'ed25519',
		byteLength: 32
	}
};

aliases.p224 = aliases.secp224r1;
aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
aliases.p192 = aliases.secp192r1 = aliases.prime192v1;

function ECDH(curve) {
	this.curveType = aliases[curve];
	if (!this.curveType ) {
		this.curveType = {
			name: curve
		};
	}
	this.curve = new elliptic.ec(this.curveType.name);
	this.keys = void 0;
}

ECDH.prototype.generateKeys = function (enc, format) {
	this.keys = this.curve.genKeyPair();
	return this.getPublicKey(enc, format);
};

ECDH.prototype.computeSecret = function (other, inenc, enc) {
	inenc = inenc || 'utf8';
	if (!Buffer.isBuffer(other)) {
		other = new Buffer(other, inenc);
	}
	var otherPub = this.curve.keyFromPublic(other).getPublic();
	var out = otherPub.mul(this.keys.getPrivate()).getX();
	return formatReturnValue(out, enc, this.curveType.byteLength);
};

ECDH.prototype.getPublicKey = function (enc, format) {
	var key = this.keys.getPublic(format === 'compressed', true);
	if (format === 'hybrid') {
		if (key[key.length - 1] % 2) {
			key[0] = 7;
		} else {
			key [0] = 6;
		}
	}
	return formatReturnValue(key, enc);
};

ECDH.prototype.getPrivateKey = function (enc) {
	return formatReturnValue(this.keys.getPrivate(), enc);
};

ECDH.prototype.setPublicKey = function (pub, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(pub)) {
		pub = new Buffer(pub, enc);
	}
	this.keys._importPublic(pub);
	return this;
};

ECDH.prototype.setPrivateKey = function (priv, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(priv)) {
		priv = new Buffer(priv, enc);
	}
	var _priv = new BN(priv);
	_priv = _priv.toString(16);
	this.keys._importPrivate(_priv);
	return this;
};

function formatReturnValue(bn, enc, len) {
	if (!Array.isArray(bn)) {
		bn = bn.toArray();
	}
	var buf = new Buffer(bn);
	if (len && buf.length < len) {
		var zeros = new Buffer(len - buf.length);
		zeros.fill(0);
		buf = Buffer.concat([zeros, buf]);
	}
	if (!enc) {
		return buf;
	} else {
		return buf.toString(enc);
	}
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWVjZGgvYnJvd3Nlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGVsbGlwdGljID0gcmVxdWlyZSgnZWxsaXB0aWMnKTtcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRUNESChjdXJ2ZSkge1xuXHRyZXR1cm4gbmV3IEVDREgoY3VydmUpO1xufTtcblxudmFyIGFsaWFzZXMgPSB7XG5cdHNlY3AyNTZrMToge1xuXHRcdG5hbWU6ICdzZWNwMjU2azEnLFxuXHRcdGJ5dGVMZW5ndGg6IDMyXG5cdH0sXG5cdHNlY3AyMjRyMToge1xuXHRcdG5hbWU6ICdwMjI0Jyxcblx0XHRieXRlTGVuZ3RoOiAyOFxuXHR9LFxuXHRwcmltZTI1NnYxOiB7XG5cdFx0bmFtZTogJ3AyNTYnLFxuXHRcdGJ5dGVMZW5ndGg6IDMyXG5cdH0sXG5cdHByaW1lMTkydjE6IHtcblx0XHRuYW1lOiAncDE5MicsXG5cdFx0Ynl0ZUxlbmd0aDogMjRcblx0fSxcblx0ZWQyNTUxOToge1xuXHRcdG5hbWU6ICdlZDI1NTE5Jyxcblx0XHRieXRlTGVuZ3RoOiAzMlxuXHR9XG59O1xuXG5hbGlhc2VzLnAyMjQgPSBhbGlhc2VzLnNlY3AyMjRyMTtcbmFsaWFzZXMucDI1NiA9IGFsaWFzZXMuc2VjcDI1NnIxID0gYWxpYXNlcy5wcmltZTI1NnYxO1xuYWxpYXNlcy5wMTkyID0gYWxpYXNlcy5zZWNwMTkycjEgPSBhbGlhc2VzLnByaW1lMTkydjE7XG5cbmZ1bmN0aW9uIEVDREgoY3VydmUpIHtcblx0dGhpcy5jdXJ2ZVR5cGUgPSBhbGlhc2VzW2N1cnZlXTtcblx0aWYgKCF0aGlzLmN1cnZlVHlwZSApIHtcblx0XHR0aGlzLmN1cnZlVHlwZSA9IHtcblx0XHRcdG5hbWU6IGN1cnZlXG5cdFx0fTtcblx0fVxuXHR0aGlzLmN1cnZlID0gbmV3IGVsbGlwdGljLmVjKHRoaXMuY3VydmVUeXBlLm5hbWUpO1xuXHR0aGlzLmtleXMgPSB2b2lkIDA7XG59XG5cbkVDREgucHJvdG90eXBlLmdlbmVyYXRlS2V5cyA9IGZ1bmN0aW9uIChlbmMsIGZvcm1hdCkge1xuXHR0aGlzLmtleXMgPSB0aGlzLmN1cnZlLmdlbktleVBhaXIoKTtcblx0cmV0dXJuIHRoaXMuZ2V0UHVibGljS2V5KGVuYywgZm9ybWF0KTtcbn07XG5cbkVDREgucHJvdG90eXBlLmNvbXB1dGVTZWNyZXQgPSBmdW5jdGlvbiAob3RoZXIsIGluZW5jLCBlbmMpIHtcblx0aW5lbmMgPSBpbmVuYyB8fCAndXRmOCc7XG5cdGlmICghQnVmZmVyLmlzQnVmZmVyKG90aGVyKSkge1xuXHRcdG90aGVyID0gbmV3IEJ1ZmZlcihvdGhlciwgaW5lbmMpO1xuXHR9XG5cdHZhciBvdGhlclB1YiA9IHRoaXMuY3VydmUua2V5RnJvbVB1YmxpYyhvdGhlcikuZ2V0UHVibGljKCk7XG5cdHZhciBvdXQgPSBvdGhlclB1Yi5tdWwodGhpcy5rZXlzLmdldFByaXZhdGUoKSkuZ2V0WCgpO1xuXHRyZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUob3V0LCBlbmMsIHRoaXMuY3VydmVUeXBlLmJ5dGVMZW5ndGgpO1xufTtcblxuRUNESC5wcm90b3R5cGUuZ2V0UHVibGljS2V5ID0gZnVuY3Rpb24gKGVuYywgZm9ybWF0KSB7XG5cdHZhciBrZXkgPSB0aGlzLmtleXMuZ2V0UHVibGljKGZvcm1hdCA9PT0gJ2NvbXByZXNzZWQnLCB0cnVlKTtcblx0aWYgKGZvcm1hdCA9PT0gJ2h5YnJpZCcpIHtcblx0XHRpZiAoa2V5W2tleS5sZW5ndGggLSAxXSAlIDIpIHtcblx0XHRcdGtleVswXSA9IDc7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGtleSBbMF0gPSA2O1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUoa2V5LCBlbmMpO1xufTtcblxuRUNESC5wcm90b3R5cGUuZ2V0UHJpdmF0ZUtleSA9IGZ1bmN0aW9uIChlbmMpIHtcblx0cmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKHRoaXMua2V5cy5nZXRQcml2YXRlKCksIGVuYyk7XG59O1xuXG5FQ0RILnByb3RvdHlwZS5zZXRQdWJsaWNLZXkgPSBmdW5jdGlvbiAocHViLCBlbmMpIHtcblx0ZW5jID0gZW5jIHx8ICd1dGY4Jztcblx0aWYgKCFCdWZmZXIuaXNCdWZmZXIocHViKSkge1xuXHRcdHB1YiA9IG5ldyBCdWZmZXIocHViLCBlbmMpO1xuXHR9XG5cdHRoaXMua2V5cy5faW1wb3J0UHVibGljKHB1Yik7XG5cdHJldHVybiB0aGlzO1xufTtcblxuRUNESC5wcm90b3R5cGUuc2V0UHJpdmF0ZUtleSA9IGZ1bmN0aW9uIChwcml2LCBlbmMpIHtcblx0ZW5jID0gZW5jIHx8ICd1dGY4Jztcblx0aWYgKCFCdWZmZXIuaXNCdWZmZXIocHJpdikpIHtcblx0XHRwcml2ID0gbmV3IEJ1ZmZlcihwcml2LCBlbmMpO1xuXHR9XG5cdHZhciBfcHJpdiA9IG5ldyBCTihwcml2KTtcblx0X3ByaXYgPSBfcHJpdi50b1N0cmluZygxNik7XG5cdHRoaXMua2V5cy5faW1wb3J0UHJpdmF0ZShfcHJpdik7XG5cdHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZm9ybWF0UmV0dXJuVmFsdWUoYm4sIGVuYywgbGVuKSB7XG5cdGlmICghQXJyYXkuaXNBcnJheShibikpIHtcblx0XHRibiA9IGJuLnRvQXJyYXkoKTtcblx0fVxuXHR2YXIgYnVmID0gbmV3IEJ1ZmZlcihibik7XG5cdGlmIChsZW4gJiYgYnVmLmxlbmd0aCA8IGxlbikge1xuXHRcdHZhciB6ZXJvcyA9IG5ldyBCdWZmZXIobGVuIC0gYnVmLmxlbmd0aCk7XG5cdFx0emVyb3MuZmlsbCgwKTtcblx0XHRidWYgPSBCdWZmZXIuY29uY2F0KFt6ZXJvcywgYnVmXSk7XG5cdH1cblx0aWYgKCFlbmMpIHtcblx0XHRyZXR1cm4gYnVmO1xuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBidWYudG9TdHJpbmcoZW5jKTtcblx0fVxufVxuIl19
},{"bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/bn.js/lib/bn.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic.js"][0].apply(exports,arguments)
},{"../package.json":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/package.json","./elliptic/curve":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curve/index.js","./elliptic/curves":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curves.js","./elliptic/ec":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/ec/index.js","./elliptic/hmac-drbg":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/hmac-drbg.js","./elliptic/utils":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/utils.js","brorand":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/brorand/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/package.json":[function(require,module,exports){
module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/package.json"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/brorand/index.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/brorand/index.js"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/utils.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/utils.js"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/hmac-drbg.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/hmac-drbg.js"][0].apply(exports,arguments)
},{"../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic.js","hash.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/ec/index.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/ec/index.js"][0].apply(exports,arguments)
},{"../../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic.js","./key":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/ec/key.js","./signature":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/ec/signature.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/bn.js/lib/bn.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/ec/signature.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/ec/signature.js"][0].apply(exports,arguments)
},{"../../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/bn.js/lib/bn.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/ec/key.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/ec/key.js"][0].apply(exports,arguments)
},{"../../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/bn.js/lib/bn.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curves.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curves.js"][0].apply(exports,arguments)
},{"../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic.js","./precomputed/secp256k1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js","hash.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash.js"][0].apply(exports,arguments)
},{"./hash/common":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash/common.js","./hash/hmac":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash/hmac.js","./hash/ripemd":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash/ripemd.js","./hash/sha":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash/sha.js","./hash/utils":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash/utils.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash/utils.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/utils.js"][0].apply(exports,arguments)
},{"inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash/sha.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/sha.js"][0].apply(exports,arguments)
},{"../hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash/ripemd.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/ripemd.js"][0].apply(exports,arguments)
},{"../hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash/hmac.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/hmac.js"][0].apply(exports,arguments)
},{"../hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash/common.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/common.js"][0].apply(exports,arguments)
},{"../hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/node_modules/hash.js/lib/hash.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curve/index.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/index.js"][0].apply(exports,arguments)
},{"./base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curve/base.js","./edwards":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curve/edwards.js","./mont":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curve/mont.js","./short":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curve/short.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curve/short.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/short.js"][0].apply(exports,arguments)
},{"../../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic.js","../curve":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curve/index.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/bn.js/lib/bn.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curve/mont.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/mont.js"][0].apply(exports,arguments)
},{"../curve":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curve/index.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/bn.js/lib/bn.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curve/edwards.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/edwards.js"][0].apply(exports,arguments)
},{"../../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic.js","../curve":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curve/index.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/bn.js/lib/bn.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic/curve/base.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/base.js"][0].apply(exports,arguments)
},{"../../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/elliptic/lib/elliptic.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/bn.js/lib/bn.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-ecdh/node_modules/bn.js/lib/bn.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/bn.js/lib/bn.js"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/browser.js":[function(require,module,exports){
(function (Buffer){
var _algos = require('./algos')
var createHash = require('create-hash')
var inherits = require('inherits')
var sign = require('./sign')
var stream = require('stream')
var verify = require('./verify')

var algos = {}
Object.keys(_algos).forEach(function (key) {
  algos[key] = algos[key.toLowerCase()] = _algos[key]
})

function Sign (algorithm) {
  stream.Writable.call(this)

  var data = algos[algorithm]
  if (!data) {
    throw new Error('Unknown message digest')
  }

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Sign, stream.Writable)

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string') {
    data = new Buffer(data, enc)
  }

  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(Buffer.concat([this._tag, hash]), key, this._hashType, this._signType)

  return enc ? sig.toString(enc) : sig
}

function Verify (algorithm) {
  stream.Writable.call(this)

  var data = algos[algorithm]
  if (!data) {
    throw new Error('Unknown message digest')
  }

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Verify, stream.Writable)

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)

  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string') {
    data = new Buffer(data, enc)
  }

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  if (typeof sig === 'string') {
    sig = new Buffer(sig, enc)
  }

  this.end()
  var hash = this._hash.digest()

  return verify(sig, Buffer.concat([this._tag, hash]), key, this._signType)
}

function createSign (algorithm) {
  return new Sign(algorithm)
}

function createVerify (algorithm) {
  return new Verify(algorithm)
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL2Jyb3dzZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBfYWxnb3MgPSByZXF1aXJlKCcuL2FsZ29zJylcbnZhciBjcmVhdGVIYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIHNpZ24gPSByZXF1aXJlKCcuL3NpZ24nKVxudmFyIHN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpXG52YXIgdmVyaWZ5ID0gcmVxdWlyZSgnLi92ZXJpZnknKVxuXG52YXIgYWxnb3MgPSB7fVxuT2JqZWN0LmtleXMoX2FsZ29zKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgYWxnb3Nba2V5XSA9IGFsZ29zW2tleS50b0xvd2VyQ2FzZSgpXSA9IF9hbGdvc1trZXldXG59KVxuXG5mdW5jdGlvbiBTaWduIChhbGdvcml0aG0pIHtcbiAgc3RyZWFtLldyaXRhYmxlLmNhbGwodGhpcylcblxuICB2YXIgZGF0YSA9IGFsZ29zW2FsZ29yaXRobV1cbiAgaWYgKCFkYXRhKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIG1lc3NhZ2UgZGlnZXN0JylcbiAgfVxuXG4gIHRoaXMuX2hhc2hUeXBlID0gZGF0YS5oYXNoXG4gIHRoaXMuX2hhc2ggPSBjcmVhdGVIYXNoKGRhdGEuaGFzaClcbiAgdGhpcy5fdGFnID0gZGF0YS5pZFxuICB0aGlzLl9zaWduVHlwZSA9IGRhdGEuc2lnblxufVxuaW5oZXJpdHMoU2lnbiwgc3RyZWFtLldyaXRhYmxlKVxuXG5TaWduLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiBfd3JpdGUgKGRhdGEsIF8sIGRvbmUpIHtcbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbiAgZG9uZSgpXG59XG5cblNpZ24ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoZGF0YSwgZW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBkYXRhID0gbmV3IEJ1ZmZlcihkYXRhLCBlbmMpXG4gIH1cblxuICB0aGlzLl9oYXNoLnVwZGF0ZShkYXRhKVxuICByZXR1cm4gdGhpc1xufVxuXG5TaWduLnByb3RvdHlwZS5zaWduID0gZnVuY3Rpb24gc2lnbk1ldGhvZCAoa2V5LCBlbmMpIHtcbiAgdGhpcy5lbmQoKVxuICB2YXIgaGFzaCA9IHRoaXMuX2hhc2guZGlnZXN0KClcbiAgdmFyIHNpZyA9IHNpZ24oQnVmZmVyLmNvbmNhdChbdGhpcy5fdGFnLCBoYXNoXSksIGtleSwgdGhpcy5faGFzaFR5cGUsIHRoaXMuX3NpZ25UeXBlKVxuXG4gIHJldHVybiBlbmMgPyBzaWcudG9TdHJpbmcoZW5jKSA6IHNpZ1xufVxuXG5mdW5jdGlvbiBWZXJpZnkgKGFsZ29yaXRobSkge1xuICBzdHJlYW0uV3JpdGFibGUuY2FsbCh0aGlzKVxuXG4gIHZhciBkYXRhID0gYWxnb3NbYWxnb3JpdGhtXVxuICBpZiAoIWRhdGEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbWVzc2FnZSBkaWdlc3QnKVxuICB9XG5cbiAgdGhpcy5faGFzaCA9IGNyZWF0ZUhhc2goZGF0YS5oYXNoKVxuICB0aGlzLl90YWcgPSBkYXRhLmlkXG4gIHRoaXMuX3NpZ25UeXBlID0gZGF0YS5zaWduXG59XG5pbmhlcml0cyhWZXJpZnksIHN0cmVhbS5Xcml0YWJsZSlcblxuVmVyaWZ5LnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiBfd3JpdGUgKGRhdGEsIF8sIGRvbmUpIHtcbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcblxuICBkb25lKClcbn1cblxuVmVyaWZ5LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKGRhdGEsIGVuYykge1xuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgZGF0YSA9IG5ldyBCdWZmZXIoZGF0YSwgZW5jKVxuICB9XG5cbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbiAgcmV0dXJuIHRoaXNcbn1cblxuVmVyaWZ5LnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnlNZXRob2QgKGtleSwgc2lnLCBlbmMpIHtcbiAgaWYgKHR5cGVvZiBzaWcgPT09ICdzdHJpbmcnKSB7XG4gICAgc2lnID0gbmV3IEJ1ZmZlcihzaWcsIGVuYylcbiAgfVxuXG4gIHRoaXMuZW5kKClcbiAgdmFyIGhhc2ggPSB0aGlzLl9oYXNoLmRpZ2VzdCgpXG5cbiAgcmV0dXJuIHZlcmlmeShzaWcsIEJ1ZmZlci5jb25jYXQoW3RoaXMuX3RhZywgaGFzaF0pLCBrZXksIHRoaXMuX3NpZ25UeXBlKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTaWduIChhbGdvcml0aG0pIHtcbiAgcmV0dXJuIG5ldyBTaWduKGFsZ29yaXRobSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlVmVyaWZ5IChhbGdvcml0aG0pIHtcbiAgcmV0dXJuIG5ldyBWZXJpZnkoYWxnb3JpdGhtKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgU2lnbjogY3JlYXRlU2lnbixcbiAgVmVyaWZ5OiBjcmVhdGVWZXJpZnksXG4gIGNyZWF0ZVNpZ246IGNyZWF0ZVNpZ24sXG4gIGNyZWF0ZVZlcmlmeTogY3JlYXRlVmVyaWZ5XG59XG4iXX0=
},{"./algos":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/algos.js","./sign":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/sign.js","./verify":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/verify.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","create-hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/browser.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js","stream":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/stream-browserify/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/verify.js":[function(require,module,exports){
(function (Buffer){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var curves = require('./curves')
var elliptic = require('elliptic')
var parseKeys = require('parse-asn1')

var BN = require('bn.js')
var EC = elliptic.ec

function verify (sig, hash, key, signType) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    if (signType !== 'ecdsa') {
      throw new Error('wrong public key type')
    }
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') {
      throw new Error('wrong public key type')
    }
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa') {
      throw new Error('wrong public key type')
    }
  }
  var len = pub.modulus.byteLength()
  var pad = [ 1 ]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = new Buffer(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))

  sig = new Buffer(sig.fromRed().toArray())
  var out = 0
  if (padNum < 8) {
    out = 1
  }
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) {
    out = 1
  }

  i = -1
  while (++i < len) {
    out |= (sig[i] ^ pad[i])
  }
  return out === 0
}

function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new EC(curveId)
  var pubkey = pub.data.subjectPrivateKey.data

  return curve.verify(hash, sig, pubkey)
}

function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montp = BN.mont(p)
  var w = s.invm(q)
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(
      y.toRed(montp)
        .redPow(r.mul(w).mod(q))
        .fromRed()
  ).mod(p).mod(q)
  return !v.cmp(r)
}

function checkValue (b, q) {
  if (b.cmpn(0) <= 0) {
    throw new Error('invalid sig')
  }
  if (b.cmp(q) >= q) {
    throw new Error('invalid sig')
  }
}

module.exports = verify

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL3ZlcmlmeS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbXVjaCBvZiB0aGlzIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L3NlbGYtc2lnbmVkL2Jsb2IvZ2gtcGFnZXMvbGliL3JzYS5qc1xudmFyIGN1cnZlcyA9IHJlcXVpcmUoJy4vY3VydmVzJylcbnZhciBlbGxpcHRpYyA9IHJlcXVpcmUoJ2VsbGlwdGljJylcbnZhciBwYXJzZUtleXMgPSByZXF1aXJlKCdwYXJzZS1hc24xJylcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKVxudmFyIEVDID0gZWxsaXB0aWMuZWNcblxuZnVuY3Rpb24gdmVyaWZ5IChzaWcsIGhhc2gsIGtleSwgc2lnblR5cGUpIHtcbiAgdmFyIHB1YiA9IHBhcnNlS2V5cyhrZXkpXG4gIGlmIChwdWIudHlwZSA9PT0gJ2VjJykge1xuICAgIGlmIChzaWduVHlwZSAhPT0gJ2VjZHNhJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwdWJsaWMga2V5IHR5cGUnKVxuICAgIH1cbiAgICByZXR1cm4gZWNWZXJpZnkoc2lnLCBoYXNoLCBwdWIpXG4gIH0gZWxzZSBpZiAocHViLnR5cGUgPT09ICdkc2EnKSB7XG4gICAgaWYgKHNpZ25UeXBlICE9PSAnZHNhJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwdWJsaWMga2V5IHR5cGUnKVxuICAgIH1cbiAgICByZXR1cm4gZHNhVmVyaWZ5KHNpZywgaGFzaCwgcHViKVxuICB9IGVsc2Uge1xuICAgIGlmIChzaWduVHlwZSAhPT0gJ3JzYScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignd3JvbmcgcHVibGljIGtleSB0eXBlJylcbiAgICB9XG4gIH1cbiAgdmFyIGxlbiA9IHB1Yi5tb2R1bHVzLmJ5dGVMZW5ndGgoKVxuICB2YXIgcGFkID0gWyAxIF1cbiAgdmFyIHBhZE51bSA9IDBcbiAgd2hpbGUgKGhhc2gubGVuZ3RoICsgcGFkLmxlbmd0aCArIDIgPCBsZW4pIHtcbiAgICBwYWQucHVzaCgweGZmKVxuICAgIHBhZE51bSsrXG4gIH1cbiAgcGFkLnB1c2goMHgwMClcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgaGFzaC5sZW5ndGgpIHtcbiAgICBwYWQucHVzaChoYXNoW2ldKVxuICB9XG4gIHBhZCA9IG5ldyBCdWZmZXIocGFkKVxuICB2YXIgcmVkID0gQk4ubW9udChwdWIubW9kdWx1cylcbiAgc2lnID0gbmV3IEJOKHNpZykudG9SZWQocmVkKVxuXG4gIHNpZyA9IHNpZy5yZWRQb3cobmV3IEJOKHB1Yi5wdWJsaWNFeHBvbmVudCkpXG5cbiAgc2lnID0gbmV3IEJ1ZmZlcihzaWcuZnJvbVJlZCgpLnRvQXJyYXkoKSlcbiAgdmFyIG91dCA9IDBcbiAgaWYgKHBhZE51bSA8IDgpIHtcbiAgICBvdXQgPSAxXG4gIH1cbiAgbGVuID0gTWF0aC5taW4oc2lnLmxlbmd0aCwgcGFkLmxlbmd0aClcbiAgaWYgKHNpZy5sZW5ndGggIT09IHBhZC5sZW5ndGgpIHtcbiAgICBvdXQgPSAxXG4gIH1cblxuICBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIG91dCB8PSAoc2lnW2ldIF4gcGFkW2ldKVxuICB9XG4gIHJldHVybiBvdXQgPT09IDBcbn1cblxuZnVuY3Rpb24gZWNWZXJpZnkgKHNpZywgaGFzaCwgcHViKSB7XG4gIHZhciBjdXJ2ZUlkID0gY3VydmVzW3B1Yi5kYXRhLmFsZ29yaXRobS5jdXJ2ZS5qb2luKCcuJyldXG4gIGlmICghY3VydmVJZCkgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGN1cnZlICcgKyBwdWIuZGF0YS5hbGdvcml0aG0uY3VydmUuam9pbignLicpKVxuXG4gIHZhciBjdXJ2ZSA9IG5ldyBFQyhjdXJ2ZUlkKVxuICB2YXIgcHVia2V5ID0gcHViLmRhdGEuc3ViamVjdFByaXZhdGVLZXkuZGF0YVxuXG4gIHJldHVybiBjdXJ2ZS52ZXJpZnkoaGFzaCwgc2lnLCBwdWJrZXkpXG59XG5cbmZ1bmN0aW9uIGRzYVZlcmlmeSAoc2lnLCBoYXNoLCBwdWIpIHtcbiAgdmFyIHAgPSBwdWIuZGF0YS5wXG4gIHZhciBxID0gcHViLmRhdGEucVxuICB2YXIgZyA9IHB1Yi5kYXRhLmdcbiAgdmFyIHkgPSBwdWIuZGF0YS5wdWJfa2V5XG4gIHZhciB1bnBhY2tlZCA9IHBhcnNlS2V5cy5zaWduYXR1cmUuZGVjb2RlKHNpZywgJ2RlcicpXG4gIHZhciBzID0gdW5wYWNrZWQuc1xuICB2YXIgciA9IHVucGFja2VkLnJcbiAgY2hlY2tWYWx1ZShzLCBxKVxuICBjaGVja1ZhbHVlKHIsIHEpXG4gIHZhciBtb250cCA9IEJOLm1vbnQocClcbiAgdmFyIHcgPSBzLmludm0ocSlcbiAgdmFyIHYgPSBnLnRvUmVkKG1vbnRwKVxuICAgIC5yZWRQb3cobmV3IEJOKGhhc2gpLm11bCh3KS5tb2QocSkpXG4gICAgLmZyb21SZWQoKVxuICAgIC5tdWwoXG4gICAgICB5LnRvUmVkKG1vbnRwKVxuICAgICAgICAucmVkUG93KHIubXVsKHcpLm1vZChxKSlcbiAgICAgICAgLmZyb21SZWQoKVxuICApLm1vZChwKS5tb2QocSlcbiAgcmV0dXJuICF2LmNtcChyKVxufVxuXG5mdW5jdGlvbiBjaGVja1ZhbHVlIChiLCBxKSB7XG4gIGlmIChiLmNtcG4oMCkgPD0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBzaWcnKVxuICB9XG4gIGlmIChiLmNtcChxKSA+PSBxKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHNpZycpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2ZXJpZnlcbiJdfQ==
},{"./curves":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/curves.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/bn.js/lib/bn.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic.js","parse-asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/sign.js":[function(require,module,exports){
(function (Buffer){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var createHmac = require('create-hmac')
var crt = require('browserify-rsa')
var curves = require('./curves')
var elliptic = require('elliptic')
var parseKeys = require('parse-asn1')

var BN = require('bn.js')
var EC = elliptic.ec

function sign (hash, key, hashType, signType) {
  var priv = parseKeys(key)
  if (priv.curve) {
    if (signType !== 'ecdsa') throw new Error('wrong private key type')

    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') {
      throw new Error('wrong private key type')
    }
    return dsaSign(hash, priv, hashType)
  } else {
    if (signType !== 'rsa') throw new Error('wrong private key type')
  }

  var len = priv.modulus.byteLength()
  var pad = [ 0, 1 ]
  while (hash.length + pad.length + 1 < len) {
    pad.push(0xff)
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }

  var out = crt(pad, priv)
  return out
}

function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new EC(curveId)
  var key = curve.genKeyPair()

  key._importPrivate(priv.privateKey)
  var out = key.sign(hash)

  return new Buffer(out.toDER())
}

function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (!s.cmpn(0)) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}

function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80) {
    r = [ 0 ].concat(r)
  }
  // Pad values
  if (s[0] & 0x80) {
    s = [0].concat(s)
  }

  var total = r.length + s.length + 4
  var res = [ 0x30, total, 0x02, r.length ]
  res = res.concat(r, [ 0x02, s.length ], s)
  return new Buffer(res)
}

function getKey (x, q, hash, algo) {
  x = new Buffer(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - x.length)
    zeros.fill(0)
    x = Buffer.concat([zeros, x])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = new Buffer(hlen)
  v.fill(1)
  var k = new Buffer(hlen)
  k.fill(0)
  k = createHmac(algo, k)
    .update(v)
    .update(new Buffer([0]))
    .update(x)
    .update(hbits)
    .digest()
  v = createHmac(algo, k)
    .update(v)
    .digest()
  k = createHmac(algo, k)
    .update(v)
    .update(new Buffer([1]))
    .update(x)
    .update(hbits)
    .digest()
  v = createHmac(algo, k)
    .update(v)
    .digest()
  return {
    k: k,
    v: v
  }
}

function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) {
    bits.ishrn(shift)
  }
  return bits
}

function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = new Buffer(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - out.length)
    zeros.fill(0)
    out = Buffer.concat([zeros, out])
  }
  return out
}

function makeKey (q, kv, algo) {
  var t, k

  do {
    t = new Buffer('')

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k)
        .update(kv.v)
        .digest()
      t = Buffer.concat([t, kv.v])
    }

    k = bits2int(t, q)
    kv.k = createHmac(algo, kv.k)
      .update(kv.v)
      .update(new Buffer([0]))
      .digest()
    kv.v = createHmac(algo, kv.k)
      .update(kv.v)
      .digest()
  } while (k.cmp(q) !== -1)

  return k
}

function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

module.exports = sign
module.exports.getKey = getKey
module.exports.makeKey = makeKey

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL3NpZ24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbXVjaCBvZiB0aGlzIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L3NlbGYtc2lnbmVkL2Jsb2IvZ2gtcGFnZXMvbGliL3JzYS5qc1xudmFyIGNyZWF0ZUhtYWMgPSByZXF1aXJlKCdjcmVhdGUtaG1hYycpXG52YXIgY3J0ID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1yc2EnKVxudmFyIGN1cnZlcyA9IHJlcXVpcmUoJy4vY3VydmVzJylcbnZhciBlbGxpcHRpYyA9IHJlcXVpcmUoJ2VsbGlwdGljJylcbnZhciBwYXJzZUtleXMgPSByZXF1aXJlKCdwYXJzZS1hc24xJylcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKVxudmFyIEVDID0gZWxsaXB0aWMuZWNcblxuZnVuY3Rpb24gc2lnbiAoaGFzaCwga2V5LCBoYXNoVHlwZSwgc2lnblR5cGUpIHtcbiAgdmFyIHByaXYgPSBwYXJzZUtleXMoa2V5KVxuICBpZiAocHJpdi5jdXJ2ZSkge1xuICAgIGlmIChzaWduVHlwZSAhPT0gJ2VjZHNhJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwcml2YXRlIGtleSB0eXBlJylcblxuICAgIHJldHVybiBlY1NpZ24oaGFzaCwgcHJpdilcbiAgfSBlbHNlIGlmIChwcml2LnR5cGUgPT09ICdkc2EnKSB7XG4gICAgaWYgKHNpZ25UeXBlICE9PSAnZHNhJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwcml2YXRlIGtleSB0eXBlJylcbiAgICB9XG4gICAgcmV0dXJuIGRzYVNpZ24oaGFzaCwgcHJpdiwgaGFzaFR5cGUpXG4gIH0gZWxzZSB7XG4gICAgaWYgKHNpZ25UeXBlICE9PSAncnNhJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwcml2YXRlIGtleSB0eXBlJylcbiAgfVxuXG4gIHZhciBsZW4gPSBwcml2Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpXG4gIHZhciBwYWQgPSBbIDAsIDEgXVxuICB3aGlsZSAoaGFzaC5sZW5ndGggKyBwYWQubGVuZ3RoICsgMSA8IGxlbikge1xuICAgIHBhZC5wdXNoKDB4ZmYpXG4gIH1cbiAgcGFkLnB1c2goMHgwMClcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgaGFzaC5sZW5ndGgpIHtcbiAgICBwYWQucHVzaChoYXNoW2ldKVxuICB9XG5cbiAgdmFyIG91dCA9IGNydChwYWQsIHByaXYpXG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gZWNTaWduIChoYXNoLCBwcml2KSB7XG4gIHZhciBjdXJ2ZUlkID0gY3VydmVzW3ByaXYuY3VydmUuam9pbignLicpXVxuICBpZiAoIWN1cnZlSWQpIHRocm93IG5ldyBFcnJvcigndW5rbm93biBjdXJ2ZSAnICsgcHJpdi5jdXJ2ZS5qb2luKCcuJykpXG5cbiAgdmFyIGN1cnZlID0gbmV3IEVDKGN1cnZlSWQpXG4gIHZhciBrZXkgPSBjdXJ2ZS5nZW5LZXlQYWlyKClcblxuICBrZXkuX2ltcG9ydFByaXZhdGUocHJpdi5wcml2YXRlS2V5KVxuICB2YXIgb3V0ID0ga2V5LnNpZ24oaGFzaClcblxuICByZXR1cm4gbmV3IEJ1ZmZlcihvdXQudG9ERVIoKSlcbn1cblxuZnVuY3Rpb24gZHNhU2lnbiAoaGFzaCwgcHJpdiwgYWxnbykge1xuICB2YXIgeCA9IHByaXYucGFyYW1zLnByaXZfa2V5XG4gIHZhciBwID0gcHJpdi5wYXJhbXMucFxuICB2YXIgcSA9IHByaXYucGFyYW1zLnFcbiAgdmFyIGcgPSBwcml2LnBhcmFtcy5nXG4gIHZhciByID0gbmV3IEJOKDApXG4gIHZhciBrXG4gIHZhciBIID0gYml0czJpbnQoaGFzaCwgcSkubW9kKHEpXG4gIHZhciBzID0gZmFsc2VcbiAgdmFyIGt2ID0gZ2V0S2V5KHgsIHEsIGhhc2gsIGFsZ28pXG4gIHdoaWxlIChzID09PSBmYWxzZSkge1xuICAgIGsgPSBtYWtlS2V5KHEsIGt2LCBhbGdvKVxuICAgIHIgPSBtYWtlUihnLCBrLCBwLCBxKVxuICAgIHMgPSBrLmludm0ocSkuaW11bChILmFkZCh4Lm11bChyKSkpLm1vZChxKVxuICAgIGlmICghcy5jbXBuKDApKSB7XG4gICAgICBzID0gZmFsc2VcbiAgICAgIHIgPSBuZXcgQk4oMClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvREVSKHIsIHMpXG59XG5cbmZ1bmN0aW9uIHRvREVSIChyLCBzKSB7XG4gIHIgPSByLnRvQXJyYXkoKVxuICBzID0gcy50b0FycmF5KClcblxuICAvLyBQYWQgdmFsdWVzXG4gIGlmIChyWzBdICYgMHg4MCkge1xuICAgIHIgPSBbIDAgXS5jb25jYXQocilcbiAgfVxuICAvLyBQYWQgdmFsdWVzXG4gIGlmIChzWzBdICYgMHg4MCkge1xuICAgIHMgPSBbMF0uY29uY2F0KHMpXG4gIH1cblxuICB2YXIgdG90YWwgPSByLmxlbmd0aCArIHMubGVuZ3RoICsgNFxuICB2YXIgcmVzID0gWyAweDMwLCB0b3RhbCwgMHgwMiwgci5sZW5ndGggXVxuICByZXMgPSByZXMuY29uY2F0KHIsIFsgMHgwMiwgcy5sZW5ndGggXSwgcylcbiAgcmV0dXJuIG5ldyBCdWZmZXIocmVzKVxufVxuXG5mdW5jdGlvbiBnZXRLZXkgKHgsIHEsIGhhc2gsIGFsZ28pIHtcbiAgeCA9IG5ldyBCdWZmZXIoeC50b0FycmF5KCkpXG4gIGlmICh4Lmxlbmd0aCA8IHEuYnl0ZUxlbmd0aCgpKSB7XG4gICAgdmFyIHplcm9zID0gbmV3IEJ1ZmZlcihxLmJ5dGVMZW5ndGgoKSAtIHgubGVuZ3RoKVxuICAgIHplcm9zLmZpbGwoMClcbiAgICB4ID0gQnVmZmVyLmNvbmNhdChbemVyb3MsIHhdKVxuICB9XG4gIHZhciBobGVuID0gaGFzaC5sZW5ndGhcbiAgdmFyIGhiaXRzID0gYml0czJvY3RldHMoaGFzaCwgcSlcbiAgdmFyIHYgPSBuZXcgQnVmZmVyKGhsZW4pXG4gIHYuZmlsbCgxKVxuICB2YXIgayA9IG5ldyBCdWZmZXIoaGxlbilcbiAgay5maWxsKDApXG4gIGsgPSBjcmVhdGVIbWFjKGFsZ28sIGspXG4gICAgLnVwZGF0ZSh2KVxuICAgIC51cGRhdGUobmV3IEJ1ZmZlcihbMF0pKVxuICAgIC51cGRhdGUoeClcbiAgICAudXBkYXRlKGhiaXRzKVxuICAgIC5kaWdlc3QoKVxuICB2ID0gY3JlYXRlSG1hYyhhbGdvLCBrKVxuICAgIC51cGRhdGUodilcbiAgICAuZGlnZXN0KClcbiAgayA9IGNyZWF0ZUhtYWMoYWxnbywgaylcbiAgICAudXBkYXRlKHYpXG4gICAgLnVwZGF0ZShuZXcgQnVmZmVyKFsxXSkpXG4gICAgLnVwZGF0ZSh4KVxuICAgIC51cGRhdGUoaGJpdHMpXG4gICAgLmRpZ2VzdCgpXG4gIHYgPSBjcmVhdGVIbWFjKGFsZ28sIGspXG4gICAgLnVwZGF0ZSh2KVxuICAgIC5kaWdlc3QoKVxuICByZXR1cm4ge1xuICAgIGs6IGssXG4gICAgdjogdlxuICB9XG59XG5cbmZ1bmN0aW9uIGJpdHMyaW50IChvYml0cywgcSkge1xuICB2YXIgYml0cyA9IG5ldyBCTihvYml0cylcbiAgdmFyIHNoaWZ0ID0gKG9iaXRzLmxlbmd0aCA8PCAzKSAtIHEuYml0TGVuZ3RoKClcbiAgaWYgKHNoaWZ0ID4gMCkge1xuICAgIGJpdHMuaXNocm4oc2hpZnQpXG4gIH1cbiAgcmV0dXJuIGJpdHNcbn1cblxuZnVuY3Rpb24gYml0czJvY3RldHMgKGJpdHMsIHEpIHtcbiAgYml0cyA9IGJpdHMyaW50KGJpdHMsIHEpXG4gIGJpdHMgPSBiaXRzLm1vZChxKVxuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcihiaXRzLnRvQXJyYXkoKSlcbiAgaWYgKG91dC5sZW5ndGggPCBxLmJ5dGVMZW5ndGgoKSkge1xuICAgIHZhciB6ZXJvcyA9IG5ldyBCdWZmZXIocS5ieXRlTGVuZ3RoKCkgLSBvdXQubGVuZ3RoKVxuICAgIHplcm9zLmZpbGwoMClcbiAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFt6ZXJvcywgb3V0XSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIG1ha2VLZXkgKHEsIGt2LCBhbGdvKSB7XG4gIHZhciB0LCBrXG5cbiAgZG8ge1xuICAgIHQgPSBuZXcgQnVmZmVyKCcnKVxuXG4gICAgd2hpbGUgKHQubGVuZ3RoICogOCA8IHEuYml0TGVuZ3RoKCkpIHtcbiAgICAgIGt2LnYgPSBjcmVhdGVIbWFjKGFsZ28sIGt2LmspXG4gICAgICAgIC51cGRhdGUoa3YudilcbiAgICAgICAgLmRpZ2VzdCgpXG4gICAgICB0ID0gQnVmZmVyLmNvbmNhdChbdCwga3Yudl0pXG4gICAgfVxuXG4gICAgayA9IGJpdHMyaW50KHQsIHEpXG4gICAga3YuayA9IGNyZWF0ZUhtYWMoYWxnbywga3YuaylcbiAgICAgIC51cGRhdGUoa3YudilcbiAgICAgIC51cGRhdGUobmV3IEJ1ZmZlcihbMF0pKVxuICAgICAgLmRpZ2VzdCgpXG4gICAga3YudiA9IGNyZWF0ZUhtYWMoYWxnbywga3YuaylcbiAgICAgIC51cGRhdGUoa3YudilcbiAgICAgIC5kaWdlc3QoKVxuICB9IHdoaWxlIChrLmNtcChxKSAhPT0gLTEpXG5cbiAgcmV0dXJuIGtcbn1cblxuZnVuY3Rpb24gbWFrZVIgKGcsIGssIHAsIHEpIHtcbiAgcmV0dXJuIGcudG9SZWQoQk4ubW9udChwKSkucmVkUG93KGspLmZyb21SZWQoKS5tb2QocSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaWduXG5tb2R1bGUuZXhwb3J0cy5nZXRLZXkgPSBnZXRLZXlcbm1vZHVsZS5leHBvcnRzLm1ha2VLZXkgPSBtYWtlS2V5XG4iXX0=
},{"./curves":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/curves.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/bn.js/lib/bn.js","browserify-rsa":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/browserify-rsa/index.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","create-hmac":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hmac/browser.js","elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic.js","parse-asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/index.js":[function(require,module,exports){
(function (Buffer){
var asn1 = require('./asn1')
var aesid = require('./aesid.json')
var fixProc = require('./fixProc')
var ciphers = require('browserify-aes')
var compat = require('pbkdf2')
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = new Buffer(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'PUBLIC KEY':
      ndata = asn1.PublicKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen)
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBhc24xID0gcmVxdWlyZSgnLi9hc24xJylcbnZhciBhZXNpZCA9IHJlcXVpcmUoJy4vYWVzaWQuanNvbicpXG52YXIgZml4UHJvYyA9IHJlcXVpcmUoJy4vZml4UHJvYycpXG52YXIgY2lwaGVycyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzJylcbnZhciBjb21wYXQgPSByZXF1aXJlKCdwYmtkZjInKVxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZUtleXNcblxuZnVuY3Rpb24gcGFyc2VLZXlzIChidWZmZXIpIHtcbiAgdmFyIHBhc3N3b3JkXG4gIGlmICh0eXBlb2YgYnVmZmVyID09PSAnb2JqZWN0JyAmJiAhQnVmZmVyLmlzQnVmZmVyKGJ1ZmZlcikpIHtcbiAgICBwYXNzd29yZCA9IGJ1ZmZlci5wYXNzcGhyYXNlXG4gICAgYnVmZmVyID0gYnVmZmVyLmtleVxuICB9XG4gIGlmICh0eXBlb2YgYnVmZmVyID09PSAnc3RyaW5nJykge1xuICAgIGJ1ZmZlciA9IG5ldyBCdWZmZXIoYnVmZmVyKVxuICB9XG5cbiAgdmFyIHN0cmlwcGVkID0gZml4UHJvYyhidWZmZXIsIHBhc3N3b3JkKVxuXG4gIHZhciB0eXBlID0gc3RyaXBwZWQudGFnXG4gIHZhciBkYXRhID0gc3RyaXBwZWQuZGF0YVxuICB2YXIgc3VidHlwZSwgbmRhdGFcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnUFVCTElDIEtFWSc6XG4gICAgICBuZGF0YSA9IGFzbjEuUHVibGljS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICAgIHN1YnR5cGUgPSBuZGF0YS5hbGdvcml0aG0uYWxnb3JpdGhtLmpvaW4oJy4nKVxuICAgICAgc3dpdGNoIChzdWJ0eXBlKSB7XG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTEzNTQ5LjEuMS4xJzpcbiAgICAgICAgICByZXR1cm4gYXNuMS5SU0FQdWJsaWNLZXkuZGVjb2RlKG5kYXRhLnN1YmplY3RQdWJsaWNLZXkuZGF0YSwgJ2RlcicpXG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTAwNDUuMi4xJzpcbiAgICAgICAgICBuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleSA9IG5kYXRhLnN1YmplY3RQdWJsaWNLZXlcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ2VjJyxcbiAgICAgICAgICAgIGRhdGE6IG5kYXRhXG4gICAgICAgICAgfVxuICAgICAgICBjYXNlICcxLjIuODQwLjEwMDQwLjQuMSc6XG4gICAgICAgICAgbmRhdGEuYWxnb3JpdGhtLnBhcmFtcy5wdWJfa2V5ID0gYXNuMS5EU0FwYXJhbS5kZWNvZGUobmRhdGEuc3ViamVjdFB1YmxpY0tleS5kYXRhLCAnZGVyJylcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ2RzYScsXG4gICAgICAgICAgICBkYXRhOiBuZGF0YS5hbGdvcml0aG0ucGFyYW1zXG4gICAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IGlkICcgKyBzdWJ0eXBlKVxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSB0eXBlICcgKyB0eXBlKVxuICAgIGNhc2UgJ0VOQ1JZUFRFRCBQUklWQVRFIEtFWSc6XG4gICAgICBkYXRhID0gYXNuMS5FbmNyeXB0ZWRQcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICAgIGRhdGEgPSBkZWNyeXB0KGRhdGEsIHBhc3N3b3JkKVxuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgIGNhc2UgJ1BSSVZBVEUgS0VZJzpcbiAgICAgIG5kYXRhID0gYXNuMS5Qcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICAgIHN1YnR5cGUgPSBuZGF0YS5hbGdvcml0aG0uYWxnb3JpdGhtLmpvaW4oJy4nKVxuICAgICAgc3dpdGNoIChzdWJ0eXBlKSB7XG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTEzNTQ5LjEuMS4xJzpcbiAgICAgICAgICByZXR1cm4gYXNuMS5SU0FQcml2YXRlS2V5LmRlY29kZShuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleSwgJ2RlcicpXG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTAwNDUuMi4xJzpcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY3VydmU6IG5kYXRhLmFsZ29yaXRobS5jdXJ2ZSxcbiAgICAgICAgICAgIHByaXZhdGVLZXk6IGFzbjEuRUNQcml2YXRlS2V5LmRlY29kZShuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleSwgJ2RlcicpLnByaXZhdGVLZXlcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTAwNDAuNC4xJzpcbiAgICAgICAgICBuZGF0YS5hbGdvcml0aG0ucGFyYW1zLnByaXZfa2V5ID0gYXNuMS5EU0FwYXJhbS5kZWNvZGUobmRhdGEuc3ViamVjdFByaXZhdGVLZXksICdkZXInKVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnZHNhJyxcbiAgICAgICAgICAgIHBhcmFtczogbmRhdGEuYWxnb3JpdGhtLnBhcmFtc1xuICAgICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSBpZCAnICsgc3VidHlwZSlcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgdHlwZSAnICsgdHlwZSlcbiAgICBjYXNlICdSU0EgUFVCTElDIEtFWSc6XG4gICAgICByZXR1cm4gYXNuMS5SU0FQdWJsaWNLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgIGNhc2UgJ1JTQSBQUklWQVRFIEtFWSc6XG4gICAgICByZXR1cm4gYXNuMS5SU0FQcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICBjYXNlICdEU0EgUFJJVkFURSBLRVknOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ2RzYScsXG4gICAgICAgIHBhcmFtczogYXNuMS5EU0FQcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICAgIH1cbiAgICBjYXNlICdFQyBQUklWQVRFIEtFWSc6XG4gICAgICBkYXRhID0gYXNuMS5FQ1ByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY3VydmU6IGRhdGEucGFyYW1ldGVycy52YWx1ZSxcbiAgICAgICAgcHJpdmF0ZUtleTogZGF0YS5wcml2YXRlS2V5XG4gICAgICB9XG4gICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSB0eXBlICcgKyB0eXBlKVxuICB9XG59XG5wYXJzZUtleXMuc2lnbmF0dXJlID0gYXNuMS5zaWduYXR1cmVcbmZ1bmN0aW9uIGRlY3J5cHQgKGRhdGEsIHBhc3N3b3JkKSB7XG4gIHZhciBzYWx0ID0gZGF0YS5hbGdvcml0aG0uZGVjcnlwdC5rZGUua2RlcGFyYW1zLnNhbHRcbiAgdmFyIGl0ZXJzID0gcGFyc2VJbnQoZGF0YS5hbGdvcml0aG0uZGVjcnlwdC5rZGUua2RlcGFyYW1zLml0ZXJzLnRvU3RyaW5nKCksIDEwKVxuICB2YXIgYWxnbyA9IGFlc2lkW2RhdGEuYWxnb3JpdGhtLmRlY3J5cHQuY2lwaGVyLmFsZ28uam9pbignLicpXVxuICB2YXIgaXYgPSBkYXRhLmFsZ29yaXRobS5kZWNyeXB0LmNpcGhlci5pdlxuICB2YXIgY2lwaGVyVGV4dCA9IGRhdGEuc3ViamVjdFByaXZhdGVLZXlcbiAgdmFyIGtleWxlbiA9IHBhcnNlSW50KGFsZ28uc3BsaXQoJy0nKVsxXSwgMTApIC8gOFxuICB2YXIga2V5ID0gY29tcGF0LnBia2RmMlN5bmMocGFzc3dvcmQsIHNhbHQsIGl0ZXJzLCBrZXlsZW4pXG4gIHZhciBjaXBoZXIgPSBjaXBoZXJzLmNyZWF0ZURlY2lwaGVyaXYoYWxnbywga2V5LCBpdilcbiAgdmFyIG91dCA9IFtdXG4gIG91dC5wdXNoKGNpcGhlci51cGRhdGUoY2lwaGVyVGV4dCkpXG4gIG91dC5wdXNoKGNpcGhlci5maW5hbCgpKVxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChvdXQpXG59XG4iXX0=
},{"./aesid.json":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/aesid.json","./asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/asn1.js","./fixProc":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/fixProc.js","browserify-aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/browser.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","pbkdf2":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/pbkdf2/browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/pbkdf2/browser.js":[function(require,module,exports){
(function (Buffer){
var createHmac = require('create-hmac')
var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

exports.pbkdf2 = pbkdf2
function pbkdf2 (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  if (typeof callback !== 'function') {
    throw new Error('No callback provided to pbkdf2')
  }

  var result = pbkdf2Sync(password, salt, iterations, keylen, digest)
  setTimeout(function () {
    callback(undefined, result)
  })
}

exports.pbkdf2Sync = pbkdf2Sync
function pbkdf2Sync (password, salt, iterations, keylen, digest) {
  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC) {
    throw new TypeError('Bad key length')
  }

  digest = digest || 'sha1'

  if (!Buffer.isBuffer(password)) password = new Buffer(password, 'binary')
  if (!Buffer.isBuffer(salt)) salt = new Buffer(salt, 'binary')

  var hLen
  var l = 1
  var DK = new Buffer(keylen)
  var block1 = new Buffer(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var r
  var T

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)
    var U = createHmac(digest, password).update(block1).digest()

    if (!hLen) {
      hLen = U.length
      T = new Buffer(hLen)
      l = Math.ceil(keylen / hLen)
      r = keylen - (l - 1) * hLen
    }

    U.copy(T, 0, 0, hLen)

    for (var j = 1; j < iterations; j++) {
      U = createHmac(digest, password).update(U).digest()

      for (var k = 0; k < hLen; k++) {
        T[k] ^= U[k]
      }
    }

    var destPos = (i - 1) * hLen
    var len = (i === l ? r : hLen)
    T.copy(DK, destPos, 0, len)
  }

  return DK
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcGJrZGYyL2Jyb3dzZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNyZWF0ZUhtYWMgPSByZXF1aXJlKCdjcmVhdGUtaG1hYycpXG52YXIgTUFYX0FMTE9DID0gTWF0aC5wb3coMiwgMzApIC0gMSAvLyBkZWZhdWx0IGluIGlvanNcblxuZXhwb3J0cy5wYmtkZjIgPSBwYmtkZjJcbmZ1bmN0aW9uIHBia2RmMiAocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgZGlnZXN0LCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIGRpZ2VzdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gZGlnZXN0XG4gICAgZGlnZXN0ID0gdW5kZWZpbmVkXG4gIH1cblxuICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBjYWxsYmFjayBwcm92aWRlZCB0byBwYmtkZjInKVxuICB9XG5cbiAgdmFyIHJlc3VsdCA9IHBia2RmMlN5bmMocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgZGlnZXN0KVxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBjYWxsYmFjayh1bmRlZmluZWQsIHJlc3VsdClcbiAgfSlcbn1cblxuZXhwb3J0cy5wYmtkZjJTeW5jID0gcGJrZGYyU3luY1xuZnVuY3Rpb24gcGJrZGYyU3luYyAocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgZGlnZXN0KSB7XG4gIGlmICh0eXBlb2YgaXRlcmF0aW9ucyAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJdGVyYXRpb25zIG5vdCBhIG51bWJlcicpXG4gIH1cblxuICBpZiAoaXRlcmF0aW9ucyA8IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCYWQgaXRlcmF0aW9ucycpXG4gIH1cblxuICBpZiAodHlwZW9mIGtleWxlbiAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdLZXkgbGVuZ3RoIG5vdCBhIG51bWJlcicpXG4gIH1cblxuICBpZiAoa2V5bGVuIDwgMCB8fCBrZXlsZW4gPiBNQVhfQUxMT0MpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCYWQga2V5IGxlbmd0aCcpXG4gIH1cblxuICBkaWdlc3QgPSBkaWdlc3QgfHwgJ3NoYTEnXG5cbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocGFzc3dvcmQpKSBwYXNzd29yZCA9IG5ldyBCdWZmZXIocGFzc3dvcmQsICdiaW5hcnknKVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihzYWx0KSkgc2FsdCA9IG5ldyBCdWZmZXIoc2FsdCwgJ2JpbmFyeScpXG5cbiAgdmFyIGhMZW5cbiAgdmFyIGwgPSAxXG4gIHZhciBESyA9IG5ldyBCdWZmZXIoa2V5bGVuKVxuICB2YXIgYmxvY2sxID0gbmV3IEJ1ZmZlcihzYWx0Lmxlbmd0aCArIDQpXG4gIHNhbHQuY29weShibG9jazEsIDAsIDAsIHNhbHQubGVuZ3RoKVxuXG4gIHZhciByXG4gIHZhciBUXG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPD0gbDsgaSsrKSB7XG4gICAgYmxvY2sxLndyaXRlVUludDMyQkUoaSwgc2FsdC5sZW5ndGgpXG4gICAgdmFyIFUgPSBjcmVhdGVIbWFjKGRpZ2VzdCwgcGFzc3dvcmQpLnVwZGF0ZShibG9jazEpLmRpZ2VzdCgpXG5cbiAgICBpZiAoIWhMZW4pIHtcbiAgICAgIGhMZW4gPSBVLmxlbmd0aFxuICAgICAgVCA9IG5ldyBCdWZmZXIoaExlbilcbiAgICAgIGwgPSBNYXRoLmNlaWwoa2V5bGVuIC8gaExlbilcbiAgICAgIHIgPSBrZXlsZW4gLSAobCAtIDEpICogaExlblxuICAgIH1cblxuICAgIFUuY29weShULCAwLCAwLCBoTGVuKVxuXG4gICAgZm9yICh2YXIgaiA9IDE7IGogPCBpdGVyYXRpb25zOyBqKyspIHtcbiAgICAgIFUgPSBjcmVhdGVIbWFjKGRpZ2VzdCwgcGFzc3dvcmQpLnVwZGF0ZShVKS5kaWdlc3QoKVxuXG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IGhMZW47IGsrKykge1xuICAgICAgICBUW2tdIF49IFVba11cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGVzdFBvcyA9IChpIC0gMSkgKiBoTGVuXG4gICAgdmFyIGxlbiA9IChpID09PSBsID8gciA6IGhMZW4pXG4gICAgVC5jb3B5KERLLCBkZXN0UG9zLCAwLCBsZW4pXG4gIH1cblxuICByZXR1cm4gREtcbn1cbiJdfQ==
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","create-hmac":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hmac/browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hmac/browser.js":[function(require,module,exports){
(function (Buffer){
'use strict';
var createHash = require('create-hash/browser');
var inherits = require('inherits')

var Transform = require('stream').Transform

var ZEROS = new Buffer(128)
ZEROS.fill(0)

function Hmac(alg, key) {
  Transform.call(this)
  alg = alg.toLowerCase()
  if (typeof key === 'string') {
    key = new Buffer(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = createHash(alg).update(key).digest()

  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = new Buffer(blocksize)
  var opad = this._opad = new Buffer(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = createHash(alg).update(ipad)
}

inherits(Hmac, Transform)

Hmac.prototype.update = function (data, enc) {
  this._hash.update(data, enc)

  return this
}

Hmac.prototype._transform = function (data, _, next) {
  this._hash.update(data)

  next()
}

Hmac.prototype._flush = function (next) {
  this.push(this.digest())

  next()
}

Hmac.prototype.digest = function (enc) {
  var h = this._hash.digest()

  return createHash(this._alg).update(this._opad).update(h).digest(enc)
}

module.exports = function createHmac(alg, key) {
  return new Hmac(alg, key)
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhtYWMvYnJvd3Nlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoL2Jyb3dzZXInKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3N0cmVhbScpLlRyYW5zZm9ybVxuXG52YXIgWkVST1MgPSBuZXcgQnVmZmVyKDEyOClcblpFUk9TLmZpbGwoMClcblxuZnVuY3Rpb24gSG1hYyhhbGcsIGtleSkge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuICBhbGcgPSBhbGcudG9Mb3dlckNhc2UoKVxuICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcbiAgICBrZXkgPSBuZXcgQnVmZmVyKGtleSlcbiAgfVxuXG4gIHZhciBibG9ja3NpemUgPSAoYWxnID09PSAnc2hhNTEyJyB8fCBhbGcgPT09ICdzaGEzODQnKSA/IDEyOCA6IDY0XG5cbiAgdGhpcy5fYWxnID0gYWxnXG4gIHRoaXMuX2tleSA9IGtleVxuXG4gIGlmIChrZXkubGVuZ3RoID4gYmxvY2tzaXplKSB7XG4gICAga2V5ID0gY3JlYXRlSGFzaChhbGcpLnVwZGF0ZShrZXkpLmRpZ2VzdCgpXG5cbiAgfSBlbHNlIGlmIChrZXkubGVuZ3RoIDwgYmxvY2tzaXplKSB7XG4gICAga2V5ID0gQnVmZmVyLmNvbmNhdChba2V5LCBaRVJPU10sIGJsb2Nrc2l6ZSlcbiAgfVxuXG4gIHZhciBpcGFkID0gdGhpcy5faXBhZCA9IG5ldyBCdWZmZXIoYmxvY2tzaXplKVxuICB2YXIgb3BhZCA9IHRoaXMuX29wYWQgPSBuZXcgQnVmZmVyKGJsb2Nrc2l6ZSlcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2Nrc2l6ZTsgaSsrKSB7XG4gICAgaXBhZFtpXSA9IGtleVtpXSBeIDB4MzZcbiAgICBvcGFkW2ldID0ga2V5W2ldIF4gMHg1Q1xuICB9XG5cbiAgdGhpcy5faGFzaCA9IGNyZWF0ZUhhc2goYWxnKS51cGRhdGUoaXBhZClcbn1cblxuaW5oZXJpdHMoSG1hYywgVHJhbnNmb3JtKVxuXG5IbWFjLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSwgZW5jKSB7XG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEsIGVuYylcblxuICByZXR1cm4gdGhpc1xufVxuXG5IbWFjLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGRhdGEsIF8sIG5leHQpIHtcbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcblxuICBuZXh0KClcbn1cblxuSG1hYy5wcm90b3R5cGUuX2ZsdXNoID0gZnVuY3Rpb24gKG5leHQpIHtcbiAgdGhpcy5wdXNoKHRoaXMuZGlnZXN0KCkpXG5cbiAgbmV4dCgpXG59XG5cbkhtYWMucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgdmFyIGggPSB0aGlzLl9oYXNoLmRpZ2VzdCgpXG5cbiAgcmV0dXJuIGNyZWF0ZUhhc2godGhpcy5fYWxnKS51cGRhdGUodGhpcy5fb3BhZCkudXBkYXRlKGgpLmRpZ2VzdChlbmMpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlSG1hYyhhbGcsIGtleSkge1xuICByZXR1cm4gbmV3IEhtYWMoYWxnLCBrZXkpXG59XG4iXX0=
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","create-hash/browser":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/browser.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js","stream":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/stream-browserify/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/browser.js":[function(require,module,exports){
(function (Buffer){
'use strict';
var inherits = require('inherits')
var md5 = require('./md5')
var rmd160 = require('ripemd160')
var sha = require('sha.js')

var Base = require('cipher-base')

function HashNoConstructor(hash) {
  Base.call(this, 'digest')

  this._hash = hash
  this.buffers = []
}

inherits(HashNoConstructor, Base)

HashNoConstructor.prototype._update = function (data) {
  this.buffers.push(data)
}

HashNoConstructor.prototype._final = function () {
  var buf = Buffer.concat(this.buffers)
  var r = this._hash(buf)
  this.buffers = null

  return r
}

function Hash(hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if ('md5' === alg) return new HashNoConstructor(md5)
  if ('rmd160' === alg || 'ripemd160' === alg) return new HashNoConstructor(rmd160)

  return new Hash(sha(alg))
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvYnJvd3Nlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIG1kNSA9IHJlcXVpcmUoJy4vbWQ1JylcbnZhciBybWQxNjAgPSByZXF1aXJlKCdyaXBlbWQxNjAnKVxudmFyIHNoYSA9IHJlcXVpcmUoJ3NoYS5qcycpXG5cbnZhciBCYXNlID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxuXG5mdW5jdGlvbiBIYXNoTm9Db25zdHJ1Y3RvcihoYXNoKSB7XG4gIEJhc2UuY2FsbCh0aGlzLCAnZGlnZXN0JylcblxuICB0aGlzLl9oYXNoID0gaGFzaFxuICB0aGlzLmJ1ZmZlcnMgPSBbXVxufVxuXG5pbmhlcml0cyhIYXNoTm9Db25zdHJ1Y3RvciwgQmFzZSlcblxuSGFzaE5vQ29uc3RydWN0b3IucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmJ1ZmZlcnMucHVzaChkYXRhKVxufVxuXG5IYXNoTm9Db25zdHJ1Y3Rvci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYnVmID0gQnVmZmVyLmNvbmNhdCh0aGlzLmJ1ZmZlcnMpXG4gIHZhciByID0gdGhpcy5faGFzaChidWYpXG4gIHRoaXMuYnVmZmVycyA9IG51bGxcblxuICByZXR1cm4gclxufVxuXG5mdW5jdGlvbiBIYXNoKGhhc2gpIHtcbiAgQmFzZS5jYWxsKHRoaXMsICdkaWdlc3QnKVxuXG4gIHRoaXMuX2hhc2ggPSBoYXNoXG59XG5cbmluaGVyaXRzKEhhc2gsIEJhc2UpXG5cbkhhc2gucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLl9oYXNoLnVwZGF0ZShkYXRhKVxufVxuXG5IYXNoLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9oYXNoLmRpZ2VzdCgpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlSGFzaCAoYWxnKSB7XG4gIGFsZyA9IGFsZy50b0xvd2VyQ2FzZSgpXG4gIGlmICgnbWQ1JyA9PT0gYWxnKSByZXR1cm4gbmV3IEhhc2hOb0NvbnN0cnVjdG9yKG1kNSlcbiAgaWYgKCdybWQxNjAnID09PSBhbGcgfHwgJ3JpcGVtZDE2MCcgPT09IGFsZykgcmV0dXJuIG5ldyBIYXNoTm9Db25zdHJ1Y3RvcihybWQxNjApXG5cbiAgcmV0dXJuIG5ldyBIYXNoKHNoYShhbGcpKVxufVxuIl19
},{"./md5":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/md5.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","cipher-base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/cipher-base/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js","ripemd160":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/ripemd160/lib/ripemd160.js","sha.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/index.js":[function(require,module,exports){
var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = require('./sha')
exports.sha1 = require('./sha1')
exports.sha224 = require('./sha224')
exports.sha256 = require('./sha256')
exports.sha384 = require('./sha384')
exports.sha512 = require('./sha512')

},{"./sha":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/sha.js","./sha1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/sha1.js","./sha224":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/sha224.js","./sha256":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/sha256.js","./sha384":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/sha384.js","./sha512":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/sha512.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/sha384.js":[function(require,module,exports){
(function (Buffer){
var inherits = require('inherits')
var SHA512 = require('./sha512')
var Hash = require('./hash')

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._a = 0xcbbb9d5d | 0
  this._b = 0x629a292a | 0
  this._c = 0x9159015a | 0
  this._d = 0x152fecd8 | 0
  this._e = 0x67332667 | 0
  this._f = 0x8eb44a87 | 0
  this._g = 0xdb0c2e0d | 0
  this._h = 0x47b5481d | 0

  this._al = 0xc1059ed8 | 0
  this._bl = 0x367cd507 | 0
  this._cl = 0x3070dd17 | 0
  this._dl = 0xf70e5939 | 0
  this._el = 0xffc00b31 | 0
  this._fl = 0x68581511 | 0
  this._gl = 0x64f98fa7 | 0
  this._hl = 0xbefa4fa4 | 0

  return this
}

Sha384.prototype._hash = function () {
  var H = new Buffer(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._a, this._al, 0)
  writeInt64BE(this._b, this._bl, 8)
  writeInt64BE(this._c, this._cl, 16)
  writeInt64BE(this._d, this._dl, 24)
  writeInt64BE(this._e, this._el, 32)
  writeInt64BE(this._f, this._fl, 40)

  return H
}

module.exports = Sha384

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEzODQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIFNIQTUxMiA9IHJlcXVpcmUoJy4vc2hhNTEyJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcblxudmFyIFcgPSBuZXcgQXJyYXkoMTYwKVxuXG5mdW5jdGlvbiBTaGEzODQgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCAxMjgsIDExMilcbn1cblxuaW5oZXJpdHMoU2hhMzg0LCBTSEE1MTIpXG5cblNoYTM4NC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4Y2JiYjlkNWQgfCAwXG4gIHRoaXMuX2IgPSAweDYyOWEyOTJhIHwgMFxuICB0aGlzLl9jID0gMHg5MTU5MDE1YSB8IDBcbiAgdGhpcy5fZCA9IDB4MTUyZmVjZDggfCAwXG4gIHRoaXMuX2UgPSAweDY3MzMyNjY3IHwgMFxuICB0aGlzLl9mID0gMHg4ZWI0NGE4NyB8IDBcbiAgdGhpcy5fZyA9IDB4ZGIwYzJlMGQgfCAwXG4gIHRoaXMuX2ggPSAweDQ3YjU0ODFkIHwgMFxuXG4gIHRoaXMuX2FsID0gMHhjMTA1OWVkOCB8IDBcbiAgdGhpcy5fYmwgPSAweDM2N2NkNTA3IHwgMFxuICB0aGlzLl9jbCA9IDB4MzA3MGRkMTcgfCAwXG4gIHRoaXMuX2RsID0gMHhmNzBlNTkzOSB8IDBcbiAgdGhpcy5fZWwgPSAweGZmYzAwYjMxIHwgMFxuICB0aGlzLl9mbCA9IDB4Njg1ODE1MTEgfCAwXG4gIHRoaXMuX2dsID0gMHg2NGY5OGZhNyB8IDBcbiAgdGhpcy5faGwgPSAweGJlZmE0ZmE0IHwgMFxuXG4gIHJldHVybiB0aGlzXG59XG5cblNoYTM4NC5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gbmV3IEJ1ZmZlcig0OClcblxuICBmdW5jdGlvbiB3cml0ZUludDY0QkUgKGgsIGwsIG9mZnNldCkge1xuICAgIEgud3JpdGVJbnQzMkJFKGgsIG9mZnNldClcbiAgICBILndyaXRlSW50MzJCRShsLCBvZmZzZXQgKyA0KVxuICB9XG5cbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2EsIHRoaXMuX2FsLCAwKVxuICB3cml0ZUludDY0QkUodGhpcy5fYiwgdGhpcy5fYmwsIDgpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9jLCB0aGlzLl9jbCwgMTYpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9kLCB0aGlzLl9kbCwgMjQpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9lLCB0aGlzLl9lbCwgMzIpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9mLCB0aGlzLl9mbCwgNDApXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGEzODRcbiJdfQ==
},{"./hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/hash.js","./sha512":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/sha512.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/sha512.js":[function(require,module,exports){
(function (Buffer){
var inherits = require('inherits')
var Hash = require('./hash')

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._a = 0x6a09e667 | 0
  this._b = 0xbb67ae85 | 0
  this._c = 0x3c6ef372 | 0
  this._d = 0xa54ff53a | 0
  this._e = 0x510e527f | 0
  this._f = 0x9b05688c | 0
  this._g = 0x1f83d9ab | 0
  this._h = 0x5be0cd19 | 0

  this._al = 0xf3bcc908 | 0
  this._bl = 0x84caa73b | 0
  this._cl = 0xfe94f82b | 0
  this._dl = 0x5f1d36f1 | 0
  this._el = 0xade682d1 | 0
  this._fl = 0x2b3e6c1f | 0
  this._gl = 0xfb41bd6b | 0
  this._hl = 0x137e2179 | 0

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function Maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function Sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function Sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  var i = 0
  var j = 0
  var Wi, Wil
  function calcW () {
    var x = W[j - 15 * 2]
    var xl = W[j - 15 * 2 + 1]
    var gamma0 = Gamma0(x, xl)
    var gamma0l = Gamma0l(xl, x)

    x = W[j - 2 * 2]
    xl = W[j - 2 * 2 + 1]
    var gamma1 = Gamma1(x, xl)
    var gamma1l = Gamma1l(xl, x)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7 = W[j - 7 * 2]
    var Wi7l = W[j - 7 * 2 + 1]

    var Wi16 = W[j - 16 * 2]
    var Wi16l = W[j - 16 * 2 + 1]

    Wil = gamma0l + Wi7l
    Wi = gamma0 + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
    Wil = Wil + gamma1l
    Wi = Wi + gamma1 + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
    Wil = Wil + Wi16l
    Wi = Wi + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)
  }

  function loop () {
    W[j] = Wi
    W[j + 1] = Wil

    var maj = Maj(a, b, c)
    var majl = Maj(al, bl, cl)

    var sigma0h = Sigma0(a, al)
    var sigma0l = Sigma0(al, a)
    var sigma1h = Sigma1(e, el)
    var sigma1l = Sigma1(el, e)

    // t1 = h + sigma1 + ch + K[i] + W[i]
    var Ki = K[j]
    var Kil = K[j + 1]

    var ch = Ch(e, f, g)
    var chl = Ch(el, fl, gl)

    var t1l = hl + sigma1l
    var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
    t1l = t1l + chl
    t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
    t1l = t1l + Kil
    t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
    t1l = t1l + Wil
    t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

    // t2 = sigma0 + maj
    var t2l = sigma0l + majl
    var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

    h = g
    hl = gl
    g = f
    gl = fl
    f = e
    fl = el
    el = (dl + t1l) | 0
    e = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
    d = c
    dl = cl
    c = b
    cl = bl
    b = a
    bl = al
    al = (t1l + t2l) | 0
    a = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0

    i++
    j += 2
  }

  while (i < 16) {
    Wi = M.readInt32BE(j * 4)
    Wil = M.readInt32BE(j * 4 + 4)

    loop()
  }

  while (i < 80) {
    calcW()
    loop()
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
  this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
  this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
  this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
  this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
  this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
  this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
  this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
}

Sha512.prototype._hash = function () {
  var H = new Buffer(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._a, this._al, 0)
  writeInt64BE(this._b, this._bl, 8)
  writeInt64BE(this._c, this._cl, 16)
  writeInt64BE(this._d, this._dl, 24)
  writeInt64BE(this._e, this._el, 32)
  writeInt64BE(this._f, this._fl, 40)
  writeInt64BE(this._g, this._gl, 48)
  writeInt64BE(this._h, this._hl, 56)

  return H
}

module.exports = Sha512

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGE1MTIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxuXG52YXIgSyA9IFtcbiAgMHg0MjhhMmY5OCwgMHhkNzI4YWUyMiwgMHg3MTM3NDQ5MSwgMHgyM2VmNjVjZCxcbiAgMHhiNWMwZmJjZiwgMHhlYzRkM2IyZiwgMHhlOWI1ZGJhNSwgMHg4MTg5ZGJiYyxcbiAgMHgzOTU2YzI1YiwgMHhmMzQ4YjUzOCwgMHg1OWYxMTFmMSwgMHhiNjA1ZDAxOSxcbiAgMHg5MjNmODJhNCwgMHhhZjE5NGY5YiwgMHhhYjFjNWVkNSwgMHhkYTZkODExOCxcbiAgMHhkODA3YWE5OCwgMHhhMzAzMDI0MiwgMHgxMjgzNWIwMSwgMHg0NTcwNmZiZSxcbiAgMHgyNDMxODViZSwgMHg0ZWU0YjI4YywgMHg1NTBjN2RjMywgMHhkNWZmYjRlMixcbiAgMHg3MmJlNWQ3NCwgMHhmMjdiODk2ZiwgMHg4MGRlYjFmZSwgMHgzYjE2OTZiMSxcbiAgMHg5YmRjMDZhNywgMHgyNWM3MTIzNSwgMHhjMTliZjE3NCwgMHhjZjY5MjY5NCxcbiAgMHhlNDliNjljMSwgMHg5ZWYxNGFkMiwgMHhlZmJlNDc4NiwgMHgzODRmMjVlMyxcbiAgMHgwZmMxOWRjNiwgMHg4YjhjZDViNSwgMHgyNDBjYTFjYywgMHg3N2FjOWM2NSxcbiAgMHgyZGU5MmM2ZiwgMHg1OTJiMDI3NSwgMHg0YTc0ODRhYSwgMHg2ZWE2ZTQ4MyxcbiAgMHg1Y2IwYTlkYywgMHhiZDQxZmJkNCwgMHg3NmY5ODhkYSwgMHg4MzExNTNiNSxcbiAgMHg5ODNlNTE1MiwgMHhlZTY2ZGZhYiwgMHhhODMxYzY2ZCwgMHgyZGI0MzIxMCxcbiAgMHhiMDAzMjdjOCwgMHg5OGZiMjEzZiwgMHhiZjU5N2ZjNywgMHhiZWVmMGVlNCxcbiAgMHhjNmUwMGJmMywgMHgzZGE4OGZjMiwgMHhkNWE3OTE0NywgMHg5MzBhYTcyNSxcbiAgMHgwNmNhNjM1MSwgMHhlMDAzODI2ZiwgMHgxNDI5Mjk2NywgMHgwYTBlNmU3MCxcbiAgMHgyN2I3MGE4NSwgMHg0NmQyMmZmYywgMHgyZTFiMjEzOCwgMHg1YzI2YzkyNixcbiAgMHg0ZDJjNmRmYywgMHg1YWM0MmFlZCwgMHg1MzM4MGQxMywgMHg5ZDk1YjNkZixcbiAgMHg2NTBhNzM1NCwgMHg4YmFmNjNkZSwgMHg3NjZhMGFiYiwgMHgzYzc3YjJhOCxcbiAgMHg4MWMyYzkyZSwgMHg0N2VkYWVlNiwgMHg5MjcyMmM4NSwgMHgxNDgyMzUzYixcbiAgMHhhMmJmZThhMSwgMHg0Y2YxMDM2NCwgMHhhODFhNjY0YiwgMHhiYzQyMzAwMSxcbiAgMHhjMjRiOGI3MCwgMHhkMGY4OTc5MSwgMHhjNzZjNTFhMywgMHgwNjU0YmUzMCxcbiAgMHhkMTkyZTgxOSwgMHhkNmVmNTIxOCwgMHhkNjk5MDYyNCwgMHg1NTY1YTkxMCxcbiAgMHhmNDBlMzU4NSwgMHg1NzcxMjAyYSwgMHgxMDZhYTA3MCwgMHgzMmJiZDFiOCxcbiAgMHgxOWE0YzExNiwgMHhiOGQyZDBjOCwgMHgxZTM3NmMwOCwgMHg1MTQxYWI1MyxcbiAgMHgyNzQ4Nzc0YywgMHhkZjhlZWI5OSwgMHgzNGIwYmNiNSwgMHhlMTliNDhhOCxcbiAgMHgzOTFjMGNiMywgMHhjNWM5NWE2MywgMHg0ZWQ4YWE0YSwgMHhlMzQxOGFjYixcbiAgMHg1YjljY2E0ZiwgMHg3NzYzZTM3MywgMHg2ODJlNmZmMywgMHhkNmIyYjhhMyxcbiAgMHg3NDhmODJlZSwgMHg1ZGVmYjJmYywgMHg3OGE1NjM2ZiwgMHg0MzE3MmY2MCxcbiAgMHg4NGM4NzgxNCwgMHhhMWYwYWI3MiwgMHg4Y2M3MDIwOCwgMHgxYTY0MzllYyxcbiAgMHg5MGJlZmZmYSwgMHgyMzYzMWUyOCwgMHhhNDUwNmNlYiwgMHhkZTgyYmRlOSxcbiAgMHhiZWY5YTNmNywgMHhiMmM2NzkxNSwgMHhjNjcxNzhmMiwgMHhlMzcyNTMyYixcbiAgMHhjYTI3M2VjZSwgMHhlYTI2NjE5YywgMHhkMTg2YjhjNywgMHgyMWMwYzIwNyxcbiAgMHhlYWRhN2RkNiwgMHhjZGUwZWIxZSwgMHhmNTdkNGY3ZiwgMHhlZTZlZDE3OCxcbiAgMHgwNmYwNjdhYSwgMHg3MjE3NmZiYSwgMHgwYTYzN2RjNSwgMHhhMmM4OThhNixcbiAgMHgxMTNmOTgwNCwgMHhiZWY5MGRhZSwgMHgxYjcxMGIzNSwgMHgxMzFjNDcxYixcbiAgMHgyOGRiNzdmNSwgMHgyMzA0N2Q4NCwgMHgzMmNhYWI3YiwgMHg0MGM3MjQ5MyxcbiAgMHgzYzllYmUwYSwgMHgxNWM5YmViYywgMHg0MzFkNjdjNCwgMHg5YzEwMGQ0YyxcbiAgMHg0Y2M1ZDRiZSwgMHhjYjNlNDJiNiwgMHg1OTdmMjk5YywgMHhmYzY1N2UyYSxcbiAgMHg1ZmNiNmZhYiwgMHgzYWQ2ZmFlYywgMHg2YzQ0MTk4YywgMHg0YTQ3NTgxN1xuXVxuXG52YXIgVyA9IG5ldyBBcnJheSgxNjApXG5cbmZ1bmN0aW9uIFNoYTUxMiAoKSB7XG4gIHRoaXMuaW5pdCgpXG4gIHRoaXMuX3cgPSBXXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDEyOCwgMTEyKVxufVxuXG5pbmhlcml0cyhTaGE1MTIsIEhhc2gpXG5cblNoYTUxMi5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4NmEwOWU2NjcgfCAwXG4gIHRoaXMuX2IgPSAweGJiNjdhZTg1IHwgMFxuICB0aGlzLl9jID0gMHgzYzZlZjM3MiB8IDBcbiAgdGhpcy5fZCA9IDB4YTU0ZmY1M2EgfCAwXG4gIHRoaXMuX2UgPSAweDUxMGU1MjdmIHwgMFxuICB0aGlzLl9mID0gMHg5YjA1Njg4YyB8IDBcbiAgdGhpcy5fZyA9IDB4MWY4M2Q5YWIgfCAwXG4gIHRoaXMuX2ggPSAweDViZTBjZDE5IHwgMFxuXG4gIHRoaXMuX2FsID0gMHhmM2JjYzkwOCB8IDBcbiAgdGhpcy5fYmwgPSAweDg0Y2FhNzNiIHwgMFxuICB0aGlzLl9jbCA9IDB4ZmU5NGY4MmIgfCAwXG4gIHRoaXMuX2RsID0gMHg1ZjFkMzZmMSB8IDBcbiAgdGhpcy5fZWwgPSAweGFkZTY4MmQxIHwgMFxuICB0aGlzLl9mbCA9IDB4MmIzZTZjMWYgfCAwXG4gIHRoaXMuX2dsID0gMHhmYjQxYmQ2YiB8IDBcbiAgdGhpcy5faGwgPSAweDEzN2UyMTc5IHwgMFxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIENoICh4LCB5LCB6KSB7XG4gIHJldHVybiB6IF4gKHggJiAoeSBeIHopKVxufVxuXG5mdW5jdGlvbiBNYWogKHgsIHksIHopIHtcbiAgcmV0dXJuICh4ICYgeSkgfCAoeiAmICh4IHwgeSkpXG59XG5cbmZ1bmN0aW9uIFNpZ21hMCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAyOCB8IHhsIDw8IDQpIF4gKHhsID4+PiAyIHwgeCA8PCAzMCkgXiAoeGwgPj4+IDcgfCB4IDw8IDI1KVxufVxuXG5mdW5jdGlvbiBTaWdtYTEgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMTQgfCB4bCA8PCAxOCkgXiAoeCA+Pj4gMTggfCB4bCA8PCAxNCkgXiAoeGwgPj4+IDkgfCB4IDw8IDIzKVxufVxuXG5mdW5jdGlvbiBHYW1tYTAgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMSB8IHhsIDw8IDMxKSBeICh4ID4+PiA4IHwgeGwgPDwgMjQpIF4gKHggPj4+IDcpXG59XG5cbmZ1bmN0aW9uIEdhbW1hMGwgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMSB8IHhsIDw8IDMxKSBeICh4ID4+PiA4IHwgeGwgPDwgMjQpIF4gKHggPj4+IDcgfCB4bCA8PCAyNSlcbn1cblxuZnVuY3Rpb24gR2FtbWExICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDE5IHwgeGwgPDwgMTMpIF4gKHhsID4+PiAyOSB8IHggPDwgMykgXiAoeCA+Pj4gNilcbn1cblxuZnVuY3Rpb24gR2FtbWExbCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxOSB8IHhsIDw8IDEzKSBeICh4bCA+Pj4gMjkgfCB4IDw8IDMpIF4gKHggPj4+IDYgfCB4bCA8PCAyNilcbn1cblxuU2hhNTEyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGEgPSB0aGlzLl9hIHwgMFxuICB2YXIgYiA9IHRoaXMuX2IgfCAwXG4gIHZhciBjID0gdGhpcy5fYyB8IDBcbiAgdmFyIGQgPSB0aGlzLl9kIHwgMFxuICB2YXIgZSA9IHRoaXMuX2UgfCAwXG4gIHZhciBmID0gdGhpcy5fZiB8IDBcbiAgdmFyIGcgPSB0aGlzLl9nIHwgMFxuICB2YXIgaCA9IHRoaXMuX2ggfCAwXG5cbiAgdmFyIGFsID0gdGhpcy5fYWwgfCAwXG4gIHZhciBibCA9IHRoaXMuX2JsIHwgMFxuICB2YXIgY2wgPSB0aGlzLl9jbCB8IDBcbiAgdmFyIGRsID0gdGhpcy5fZGwgfCAwXG4gIHZhciBlbCA9IHRoaXMuX2VsIHwgMFxuICB2YXIgZmwgPSB0aGlzLl9mbCB8IDBcbiAgdmFyIGdsID0gdGhpcy5fZ2wgfCAwXG4gIHZhciBobCA9IHRoaXMuX2hsIHwgMFxuXG4gIHZhciBpID0gMFxuICB2YXIgaiA9IDBcbiAgdmFyIFdpLCBXaWxcbiAgZnVuY3Rpb24gY2FsY1cgKCkge1xuICAgIHZhciB4ID0gV1tqIC0gMTUgKiAyXVxuICAgIHZhciB4bCA9IFdbaiAtIDE1ICogMiArIDFdXG4gICAgdmFyIGdhbW1hMCA9IEdhbW1hMCh4LCB4bClcbiAgICB2YXIgZ2FtbWEwbCA9IEdhbW1hMGwoeGwsIHgpXG5cbiAgICB4ID0gV1tqIC0gMiAqIDJdXG4gICAgeGwgPSBXW2ogLSAyICogMiArIDFdXG4gICAgdmFyIGdhbW1hMSA9IEdhbW1hMSh4LCB4bClcbiAgICB2YXIgZ2FtbWExbCA9IEdhbW1hMWwoeGwsIHgpXG5cbiAgICAvLyBXW2ldID0gZ2FtbWEwICsgV1tpIC0gN10gKyBnYW1tYTEgKyBXW2kgLSAxNl1cbiAgICB2YXIgV2k3ID0gV1tqIC0gNyAqIDJdXG4gICAgdmFyIFdpN2wgPSBXW2ogLSA3ICogMiArIDFdXG5cbiAgICB2YXIgV2kxNiA9IFdbaiAtIDE2ICogMl1cbiAgICB2YXIgV2kxNmwgPSBXW2ogLSAxNiAqIDIgKyAxXVxuXG4gICAgV2lsID0gZ2FtbWEwbCArIFdpN2xcbiAgICBXaSA9IGdhbW1hMCArIFdpNyArICgoV2lsID4+PiAwKSA8IChnYW1tYTBsID4+PiAwKSA/IDEgOiAwKVxuICAgIFdpbCA9IFdpbCArIGdhbW1hMWxcbiAgICBXaSA9IFdpICsgZ2FtbWExICsgKChXaWwgPj4+IDApIDwgKGdhbW1hMWwgPj4+IDApID8gMSA6IDApXG4gICAgV2lsID0gV2lsICsgV2kxNmxcbiAgICBXaSA9IFdpICsgV2kxNiArICgoV2lsID4+PiAwKSA8IChXaTE2bCA+Pj4gMCkgPyAxIDogMClcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvb3AgKCkge1xuICAgIFdbal0gPSBXaVxuICAgIFdbaiArIDFdID0gV2lsXG5cbiAgICB2YXIgbWFqID0gTWFqKGEsIGIsIGMpXG4gICAgdmFyIG1hamwgPSBNYWooYWwsIGJsLCBjbClcblxuICAgIHZhciBzaWdtYTBoID0gU2lnbWEwKGEsIGFsKVxuICAgIHZhciBzaWdtYTBsID0gU2lnbWEwKGFsLCBhKVxuICAgIHZhciBzaWdtYTFoID0gU2lnbWExKGUsIGVsKVxuICAgIHZhciBzaWdtYTFsID0gU2lnbWExKGVsLCBlKVxuXG4gICAgLy8gdDEgPSBoICsgc2lnbWExICsgY2ggKyBLW2ldICsgV1tpXVxuICAgIHZhciBLaSA9IEtbal1cbiAgICB2YXIgS2lsID0gS1tqICsgMV1cblxuICAgIHZhciBjaCA9IENoKGUsIGYsIGcpXG4gICAgdmFyIGNobCA9IENoKGVsLCBmbCwgZ2wpXG5cbiAgICB2YXIgdDFsID0gaGwgKyBzaWdtYTFsXG4gICAgdmFyIHQxID0gaCArIHNpZ21hMWggKyAoKHQxbCA+Pj4gMCkgPCAoaGwgPj4+IDApID8gMSA6IDApXG4gICAgdDFsID0gdDFsICsgY2hsXG4gICAgdDEgPSB0MSArIGNoICsgKCh0MWwgPj4+IDApIDwgKGNobCA+Pj4gMCkgPyAxIDogMClcbiAgICB0MWwgPSB0MWwgKyBLaWxcbiAgICB0MSA9IHQxICsgS2kgKyAoKHQxbCA+Pj4gMCkgPCAoS2lsID4+PiAwKSA/IDEgOiAwKVxuICAgIHQxbCA9IHQxbCArIFdpbFxuICAgIHQxID0gdDEgKyBXaSArICgodDFsID4+PiAwKSA8IChXaWwgPj4+IDApID8gMSA6IDApXG5cbiAgICAvLyB0MiA9IHNpZ21hMCArIG1halxuICAgIHZhciB0MmwgPSBzaWdtYTBsICsgbWFqbFxuICAgIHZhciB0MiA9IHNpZ21hMGggKyBtYWogKyAoKHQybCA+Pj4gMCkgPCAoc2lnbWEwbCA+Pj4gMCkgPyAxIDogMClcblxuICAgIGggPSBnXG4gICAgaGwgPSBnbFxuICAgIGcgPSBmXG4gICAgZ2wgPSBmbFxuICAgIGYgPSBlXG4gICAgZmwgPSBlbFxuICAgIGVsID0gKGRsICsgdDFsKSB8IDBcbiAgICBlID0gKGQgKyB0MSArICgoZWwgPj4+IDApIDwgKGRsID4+PiAwKSA/IDEgOiAwKSkgfCAwXG4gICAgZCA9IGNcbiAgICBkbCA9IGNsXG4gICAgYyA9IGJcbiAgICBjbCA9IGJsXG4gICAgYiA9IGFcbiAgICBibCA9IGFsXG4gICAgYWwgPSAodDFsICsgdDJsKSB8IDBcbiAgICBhID0gKHQxICsgdDIgKyAoKGFsID4+PiAwKSA8ICh0MWwgPj4+IDApID8gMSA6IDApKSB8IDBcblxuICAgIGkrK1xuICAgIGogKz0gMlxuICB9XG5cbiAgd2hpbGUgKGkgPCAxNikge1xuICAgIFdpID0gTS5yZWFkSW50MzJCRShqICogNClcbiAgICBXaWwgPSBNLnJlYWRJbnQzMkJFKGogKiA0ICsgNClcblxuICAgIGxvb3AoKVxuICB9XG5cbiAgd2hpbGUgKGkgPCA4MCkge1xuICAgIGNhbGNXKClcbiAgICBsb29wKClcbiAgfVxuXG4gIHRoaXMuX2FsID0gKHRoaXMuX2FsICsgYWwpIHwgMFxuICB0aGlzLl9ibCA9ICh0aGlzLl9ibCArIGJsKSB8IDBcbiAgdGhpcy5fY2wgPSAodGhpcy5fY2wgKyBjbCkgfCAwXG4gIHRoaXMuX2RsID0gKHRoaXMuX2RsICsgZGwpIHwgMFxuICB0aGlzLl9lbCA9ICh0aGlzLl9lbCArIGVsKSB8IDBcbiAgdGhpcy5fZmwgPSAodGhpcy5fZmwgKyBmbCkgfCAwXG4gIHRoaXMuX2dsID0gKHRoaXMuX2dsICsgZ2wpIHwgMFxuICB0aGlzLl9obCA9ICh0aGlzLl9obCArIGhsKSB8IDBcblxuICB0aGlzLl9hID0gKHRoaXMuX2EgKyBhICsgKCh0aGlzLl9hbCA+Pj4gMCkgPCAoYWwgPj4+IDApID8gMSA6IDApKSB8IDBcbiAgdGhpcy5fYiA9ICh0aGlzLl9iICsgYiArICgodGhpcy5fYmwgPj4+IDApIDwgKGJsID4+PiAwKSA/IDEgOiAwKSkgfCAwXG4gIHRoaXMuX2MgPSAodGhpcy5fYyArIGMgKyAoKHRoaXMuX2NsID4+PiAwKSA8IChjbCA+Pj4gMCkgPyAxIDogMCkpIHwgMFxuICB0aGlzLl9kID0gKHRoaXMuX2QgKyBkICsgKCh0aGlzLl9kbCA+Pj4gMCkgPCAoZGwgPj4+IDApID8gMSA6IDApKSB8IDBcbiAgdGhpcy5fZSA9ICh0aGlzLl9lICsgZSArICgodGhpcy5fZWwgPj4+IDApIDwgKGVsID4+PiAwKSA/IDEgOiAwKSkgfCAwXG4gIHRoaXMuX2YgPSAodGhpcy5fZiArIGYgKyAoKHRoaXMuX2ZsID4+PiAwKSA8IChmbCA+Pj4gMCkgPyAxIDogMCkpIHwgMFxuICB0aGlzLl9nID0gKHRoaXMuX2cgKyBnICsgKCh0aGlzLl9nbCA+Pj4gMCkgPCAoZ2wgPj4+IDApID8gMSA6IDApKSB8IDBcbiAgdGhpcy5faCA9ICh0aGlzLl9oICsgaCArICgodGhpcy5faGwgPj4+IDApIDwgKGhsID4+PiAwKSA/IDEgOiAwKSkgfCAwXG59XG5cblNoYTUxMi5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gbmV3IEJ1ZmZlcig2NClcblxuICBmdW5jdGlvbiB3cml0ZUludDY0QkUgKGgsIGwsIG9mZnNldCkge1xuICAgIEgud3JpdGVJbnQzMkJFKGgsIG9mZnNldClcbiAgICBILndyaXRlSW50MzJCRShsLCBvZmZzZXQgKyA0KVxuICB9XG5cbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2EsIHRoaXMuX2FsLCAwKVxuICB3cml0ZUludDY0QkUodGhpcy5fYiwgdGhpcy5fYmwsIDgpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9jLCB0aGlzLl9jbCwgMTYpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9kLCB0aGlzLl9kbCwgMjQpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9lLCB0aGlzLl9lbCwgMzIpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9mLCB0aGlzLl9mbCwgNDApXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9nLCB0aGlzLl9nbCwgNDgpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9oLCB0aGlzLl9obCwgNTYpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGE1MTJcbiJdfQ==
},{"./hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/hash.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/sha224.js":[function(require,module,exports){
(function (Buffer){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Sha256 = require('./sha256')
var Hash = require('./hash')

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8 | 0
  this._b = 0x367cd507 | 0
  this._c = 0x3070dd17 | 0
  this._d = 0xf70e5939 | 0
  this._e = 0xffc00b31 | 0
  this._f = 0x68581511 | 0
  this._g = 0x64f98fa7 | 0
  this._h = 0xbefa4fa4 | 0

  return this
}

Sha224.prototype._hash = function () {
  var H = new Buffer(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEyMjQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBTZWN1cmUgSGFzaCBBbGdvcml0aG0sIFNIQS0yNTYsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgMTgwLTJcbiAqIFZlcnNpb24gMi4yLWJldGEgQ29weXJpZ2h0IEFuZ2VsIE1hcmluLCBQYXVsIEpvaG5zdG9uIDIwMDAgLSAyMDA5LlxuICogT3RoZXIgY29udHJpYnV0b3JzOiBHcmVnIEhvbHQsIEFuZHJldyBLZXBlcnQsIFlkbmFyLCBMb3N0aW5ldFxuICpcbiAqL1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgU2hhMjU2ID0gcmVxdWlyZSgnLi9zaGEyNTYnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxuXG52YXIgVyA9IG5ldyBBcnJheSg2NClcblxuZnVuY3Rpb24gU2hhMjI0ICgpIHtcbiAgdGhpcy5pbml0KClcblxuICB0aGlzLl93ID0gVyAvLyBuZXcgQXJyYXkoNjQpXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDY0LCA1Nilcbn1cblxuaW5oZXJpdHMoU2hhMjI0LCBTaGEyNTYpXG5cblNoYTIyNC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4YzEwNTllZDggfCAwXG4gIHRoaXMuX2IgPSAweDM2N2NkNTA3IHwgMFxuICB0aGlzLl9jID0gMHgzMDcwZGQxNyB8IDBcbiAgdGhpcy5fZCA9IDB4ZjcwZTU5MzkgfCAwXG4gIHRoaXMuX2UgPSAweGZmYzAwYjMxIHwgMFxuICB0aGlzLl9mID0gMHg2ODU4MTUxMSB8IDBcbiAgdGhpcy5fZyA9IDB4NjRmOThmYTcgfCAwXG4gIHRoaXMuX2ggPSAweGJlZmE0ZmE0IHwgMFxuXG4gIHJldHVybiB0aGlzXG59XG5cblNoYTIyNC5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gbmV3IEJ1ZmZlcigyOClcblxuICBILndyaXRlSW50MzJCRSh0aGlzLl9hLCAwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9iLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jLCA4KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9kLCAxMilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZSwgMTYpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2YsIDIwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9nLCAyNClcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTIyNFxuIl19
},{"./hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/hash.js","./sha256":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/sha256.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/sha256.js":[function(require,module,exports){
(function (Buffer){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Hash = require('./hash')

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667 | 0
  this._b = 0xbb67ae85 | 0
  this._c = 0x3c6ef372 | 0
  this._d = 0xa54ff53a | 0
  this._e = 0x510e527f | 0
  this._f = 0x9b05688c | 0
  this._g = 0x1f83d9ab | 0
  this._h = 0x5be0cd19 | 0

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function Maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function Sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function Sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function Gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function Gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  var j = 0

  function calcW () { return Gamma1(W[j - 2]) + W[j - 7] + Gamma0(W[j - 15]) + W[j - 16] }
  function loop (w) {
    W[j] = w

    var T1 = h + Sigma1(e) + Ch(e, f, g) + K[j] + w
    var T2 = Sigma0(a) + Maj(a, b, c)

    h = g
    g = f
    f = e
    e = d + T1
    d = c
    c = b
    b = a
    a = T1 + T2

    j++
  }

  while (j < 16) loop(M.readInt32BE(j * 4))
  while (j < 64) loop(calcW())

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = new Buffer(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEyNTYuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMjU2LCBhcyBkZWZpbmVkXG4gKiBpbiBGSVBTIDE4MC0yXG4gKiBWZXJzaW9uIDIuMi1iZXRhIENvcHlyaWdodCBBbmdlbCBNYXJpbiwgUGF1bCBKb2huc3RvbiAyMDAwIC0gMjAwOS5cbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqXG4gKi9cblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxuXG52YXIgSyA9IFtcbiAgMHg0MjhBMkY5OCwgMHg3MTM3NDQ5MSwgMHhCNUMwRkJDRiwgMHhFOUI1REJBNSxcbiAgMHgzOTU2QzI1QiwgMHg1OUYxMTFGMSwgMHg5MjNGODJBNCwgMHhBQjFDNUVENSxcbiAgMHhEODA3QUE5OCwgMHgxMjgzNUIwMSwgMHgyNDMxODVCRSwgMHg1NTBDN0RDMyxcbiAgMHg3MkJFNUQ3NCwgMHg4MERFQjFGRSwgMHg5QkRDMDZBNywgMHhDMTlCRjE3NCxcbiAgMHhFNDlCNjlDMSwgMHhFRkJFNDc4NiwgMHgwRkMxOURDNiwgMHgyNDBDQTFDQyxcbiAgMHgyREU5MkM2RiwgMHg0QTc0ODRBQSwgMHg1Q0IwQTlEQywgMHg3NkY5ODhEQSxcbiAgMHg5ODNFNTE1MiwgMHhBODMxQzY2RCwgMHhCMDAzMjdDOCwgMHhCRjU5N0ZDNyxcbiAgMHhDNkUwMEJGMywgMHhENUE3OTE0NywgMHgwNkNBNjM1MSwgMHgxNDI5Mjk2NyxcbiAgMHgyN0I3MEE4NSwgMHgyRTFCMjEzOCwgMHg0RDJDNkRGQywgMHg1MzM4MEQxMyxcbiAgMHg2NTBBNzM1NCwgMHg3NjZBMEFCQiwgMHg4MUMyQzkyRSwgMHg5MjcyMkM4NSxcbiAgMHhBMkJGRThBMSwgMHhBODFBNjY0QiwgMHhDMjRCOEI3MCwgMHhDNzZDNTFBMyxcbiAgMHhEMTkyRTgxOSwgMHhENjk5MDYyNCwgMHhGNDBFMzU4NSwgMHgxMDZBQTA3MCxcbiAgMHgxOUE0QzExNiwgMHgxRTM3NkMwOCwgMHgyNzQ4Nzc0QywgMHgzNEIwQkNCNSxcbiAgMHgzOTFDMENCMywgMHg0RUQ4QUE0QSwgMHg1QjlDQ0E0RiwgMHg2ODJFNkZGMyxcbiAgMHg3NDhGODJFRSwgMHg3OEE1NjM2RiwgMHg4NEM4NzgxNCwgMHg4Q0M3MDIwOCxcbiAgMHg5MEJFRkZGQSwgMHhBNDUwNkNFQiwgMHhCRUY5QTNGNywgMHhDNjcxNzhGMlxuXVxuXG52YXIgVyA9IG5ldyBBcnJheSg2NClcblxuZnVuY3Rpb24gU2hhMjU2ICgpIHtcbiAgdGhpcy5pbml0KClcblxuICB0aGlzLl93ID0gVyAvLyBuZXcgQXJyYXkoNjQpXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDY0LCA1Nilcbn1cblxuaW5oZXJpdHMoU2hhMjU2LCBIYXNoKVxuXG5TaGEyNTYucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweDZhMDllNjY3IHwgMFxuICB0aGlzLl9iID0gMHhiYjY3YWU4NSB8IDBcbiAgdGhpcy5fYyA9IDB4M2M2ZWYzNzIgfCAwXG4gIHRoaXMuX2QgPSAweGE1NGZmNTNhIHwgMFxuICB0aGlzLl9lID0gMHg1MTBlNTI3ZiB8IDBcbiAgdGhpcy5fZiA9IDB4OWIwNTY4OGMgfCAwXG4gIHRoaXMuX2cgPSAweDFmODNkOWFiIHwgMFxuICB0aGlzLl9oID0gMHg1YmUwY2QxOSB8IDBcblxuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiBDaCAoeCwgeSwgeikge1xuICByZXR1cm4geiBeICh4ICYgKHkgXiB6KSlcbn1cblxuZnVuY3Rpb24gTWFqICh4LCB5LCB6KSB7XG4gIHJldHVybiAoeCAmIHkpIHwgKHogJiAoeCB8IHkpKVxufVxuXG5mdW5jdGlvbiBTaWdtYTAgKHgpIHtcbiAgcmV0dXJuICh4ID4+PiAyIHwgeCA8PCAzMCkgXiAoeCA+Pj4gMTMgfCB4IDw8IDE5KSBeICh4ID4+PiAyMiB8IHggPDwgMTApXG59XG5cbmZ1bmN0aW9uIFNpZ21hMSAoeCkge1xuICByZXR1cm4gKHggPj4+IDYgfCB4IDw8IDI2KSBeICh4ID4+PiAxMSB8IHggPDwgMjEpIF4gKHggPj4+IDI1IHwgeCA8PCA3KVxufVxuXG5mdW5jdGlvbiBHYW1tYTAgKHgpIHtcbiAgcmV0dXJuICh4ID4+PiA3IHwgeCA8PCAyNSkgXiAoeCA+Pj4gMTggfCB4IDw8IDE0KSBeICh4ID4+PiAzKVxufVxuXG5mdW5jdGlvbiBHYW1tYTEgKHgpIHtcbiAgcmV0dXJuICh4ID4+PiAxNyB8IHggPDwgMTUpIF4gKHggPj4+IDE5IHwgeCA8PCAxMykgXiAoeCA+Pj4gMTApXG59XG5cblNoYTI1Ni5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhID0gdGhpcy5fYSB8IDBcbiAgdmFyIGIgPSB0aGlzLl9iIHwgMFxuICB2YXIgYyA9IHRoaXMuX2MgfCAwXG4gIHZhciBkID0gdGhpcy5fZCB8IDBcbiAgdmFyIGUgPSB0aGlzLl9lIHwgMFxuICB2YXIgZiA9IHRoaXMuX2YgfCAwXG4gIHZhciBnID0gdGhpcy5fZyB8IDBcbiAgdmFyIGggPSB0aGlzLl9oIHwgMFxuXG4gIHZhciBqID0gMFxuXG4gIGZ1bmN0aW9uIGNhbGNXICgpIHsgcmV0dXJuIEdhbW1hMShXW2ogLSAyXSkgKyBXW2ogLSA3XSArIEdhbW1hMChXW2ogLSAxNV0pICsgV1tqIC0gMTZdIH1cbiAgZnVuY3Rpb24gbG9vcCAodykge1xuICAgIFdbal0gPSB3XG5cbiAgICB2YXIgVDEgPSBoICsgU2lnbWExKGUpICsgQ2goZSwgZiwgZykgKyBLW2pdICsgd1xuICAgIHZhciBUMiA9IFNpZ21hMChhKSArIE1haihhLCBiLCBjKVxuXG4gICAgaCA9IGdcbiAgICBnID0gZlxuICAgIGYgPSBlXG4gICAgZSA9IGQgKyBUMVxuICAgIGQgPSBjXG4gICAgYyA9IGJcbiAgICBiID0gYVxuICAgIGEgPSBUMSArIFQyXG5cbiAgICBqKytcbiAgfVxuXG4gIHdoaWxlIChqIDwgMTYpIGxvb3AoTS5yZWFkSW50MzJCRShqICogNCkpXG4gIHdoaWxlIChqIDwgNjQpIGxvb3AoY2FsY1coKSlcblxuICB0aGlzLl9hID0gKGEgKyB0aGlzLl9hKSB8IDBcbiAgdGhpcy5fYiA9IChiICsgdGhpcy5fYikgfCAwXG4gIHRoaXMuX2MgPSAoYyArIHRoaXMuX2MpIHwgMFxuICB0aGlzLl9kID0gKGQgKyB0aGlzLl9kKSB8IDBcbiAgdGhpcy5fZSA9IChlICsgdGhpcy5fZSkgfCAwXG4gIHRoaXMuX2YgPSAoZiArIHRoaXMuX2YpIHwgMFxuICB0aGlzLl9nID0gKGcgKyB0aGlzLl9nKSB8IDBcbiAgdGhpcy5faCA9IChoICsgdGhpcy5faCkgfCAwXG59XG5cblNoYTI1Ni5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gbmV3IEJ1ZmZlcigzMilcblxuICBILndyaXRlSW50MzJCRSh0aGlzLl9hLCAwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9iLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jLCA4KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9kLCAxMilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZSwgMTYpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2YsIDIwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9nLCAyNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5faCwgMjgpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGEyNTZcbiJdfQ==
},{"./hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/hash.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/sha1.js":[function(require,module,exports){
(function (Buffer){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('inherits')
var Hash = require('./hash')

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301 | 0
  this._b = 0xefcdab89 | 0
  this._c = 0x98badcfe | 0
  this._d = 0x10325476 | 0
  this._e = 0xc3d2e1f0 | 0

  return this
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function rol (num, cnt) {
  return (num << cnt) | (num >>> (32 - cnt))
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d
  var e = this._e

  var j = 0
  var k

  function calcW () { return rol(W[j - 3] ^ W[j - 8] ^ W[j - 14] ^ W[j - 16], 1) }
  function loop (w, f) {
    W[j] = w

    var t = rol(a, 5) + f + e + w + k

    e = d
    d = c
    c = rol(b, 30)
    b = a
    a = t
    j++
  }

  k = 1518500249
  while (j < 16) loop(M.readInt32BE(j * 4), (b & c) | ((~b) & d))
  while (j < 20) loop(calcW(), (b & c) | ((~b) & d))
  k = 1859775393
  while (j < 40) loop(calcW(), b ^ c ^ d)
  k = -1894007588
  while (j < 60) loop(calcW(), (b & c) | (b & d) | (c & d))
  k = -899497514
  while (j < 80) loop(calcW(), b ^ c ^ d)

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = new Buffer(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGExLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMSwgYXMgZGVmaW5lZFxuICogaW4gRklQUyBQVUIgMTgwLTFcbiAqIFZlcnNpb24gMi4xYSBDb3B5cmlnaHQgUGF1bCBKb2huc3RvbiAyMDAwIC0gMjAwMi5cbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCU0QgTGljZW5zZVxuICogU2VlIGh0dHA6Ly9wYWpob21lLm9yZy51ay9jcnlwdC9tZDUgZm9yIGRldGFpbHMuXG4gKi9cblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxuXG52YXIgVyA9IG5ldyBBcnJheSg4MClcblxuZnVuY3Rpb24gU2hhMSAoKSB7XG4gIHRoaXMuaW5pdCgpXG4gIHRoaXMuX3cgPSBXXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDY0LCA1Nilcbn1cblxuaW5oZXJpdHMoU2hhMSwgSGFzaClcblxuU2hhMS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4Njc0NTIzMDEgfCAwXG4gIHRoaXMuX2IgPSAweGVmY2RhYjg5IHwgMFxuICB0aGlzLl9jID0gMHg5OGJhZGNmZSB8IDBcbiAgdGhpcy5fZCA9IDB4MTAzMjU0NzYgfCAwXG4gIHRoaXMuX2UgPSAweGMzZDJlMWYwIHwgMFxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8qXG4gKiBCaXR3aXNlIHJvdGF0ZSBhIDMyLWJpdCBudW1iZXIgdG8gdGhlIGxlZnQuXG4gKi9cbmZ1bmN0aW9uIHJvbCAobnVtLCBjbnQpIHtcbiAgcmV0dXJuIChudW0gPDwgY250KSB8IChudW0gPj4+ICgzMiAtIGNudCkpXG59XG5cblNoYTEucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoTSkge1xuICB2YXIgVyA9IHRoaXMuX3dcblxuICB2YXIgYSA9IHRoaXMuX2FcbiAgdmFyIGIgPSB0aGlzLl9iXG4gIHZhciBjID0gdGhpcy5fY1xuICB2YXIgZCA9IHRoaXMuX2RcbiAgdmFyIGUgPSB0aGlzLl9lXG5cbiAgdmFyIGogPSAwXG4gIHZhciBrXG5cbiAgZnVuY3Rpb24gY2FsY1cgKCkgeyByZXR1cm4gcm9sKFdbaiAtIDNdIF4gV1tqIC0gOF0gXiBXW2ogLSAxNF0gXiBXW2ogLSAxNl0sIDEpIH1cbiAgZnVuY3Rpb24gbG9vcCAodywgZikge1xuICAgIFdbal0gPSB3XG5cbiAgICB2YXIgdCA9IHJvbChhLCA1KSArIGYgKyBlICsgdyArIGtcblxuICAgIGUgPSBkXG4gICAgZCA9IGNcbiAgICBjID0gcm9sKGIsIDMwKVxuICAgIGIgPSBhXG4gICAgYSA9IHRcbiAgICBqKytcbiAgfVxuXG4gIGsgPSAxNTE4NTAwMjQ5XG4gIHdoaWxlIChqIDwgMTYpIGxvb3AoTS5yZWFkSW50MzJCRShqICogNCksIChiICYgYykgfCAoKH5iKSAmIGQpKVxuICB3aGlsZSAoaiA8IDIwKSBsb29wKGNhbGNXKCksIChiICYgYykgfCAoKH5iKSAmIGQpKVxuICBrID0gMTg1OTc3NTM5M1xuICB3aGlsZSAoaiA8IDQwKSBsb29wKGNhbGNXKCksIGIgXiBjIF4gZClcbiAgayA9IC0xODk0MDA3NTg4XG4gIHdoaWxlIChqIDwgNjApIGxvb3AoY2FsY1coKSwgKGIgJiBjKSB8IChiICYgZCkgfCAoYyAmIGQpKVxuICBrID0gLTg5OTQ5NzUxNFxuICB3aGlsZSAoaiA8IDgwKSBsb29wKGNhbGNXKCksIGIgXiBjIF4gZClcblxuICB0aGlzLl9hID0gKGEgKyB0aGlzLl9hKSB8IDBcbiAgdGhpcy5fYiA9IChiICsgdGhpcy5fYikgfCAwXG4gIHRoaXMuX2MgPSAoYyArIHRoaXMuX2MpIHwgMFxuICB0aGlzLl9kID0gKGQgKyB0aGlzLl9kKSB8IDBcbiAgdGhpcy5fZSA9IChlICsgdGhpcy5fZSkgfCAwXG59XG5cblNoYTEucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IG5ldyBCdWZmZXIoMjApXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSB8IDAsIDApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2IgfCAwLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jIHwgMCwgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCB8IDAsIDEyKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9lIHwgMCwgMTYpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGExXG4iXX0=
},{"./hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/hash.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/sha.js":[function(require,module,exports){
(function (Buffer){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = require('inherits')
var Hash = require('./hash')

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301 | 0
  this._b = 0xefcdab89 | 0
  this._c = 0x98badcfe | 0
  this._d = 0x10325476 | 0
  this._e = 0xc3d2e1f0 | 0

  return this
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function rol (num, cnt) {
  return (num << cnt) | (num >>> (32 - cnt))
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d
  var e = this._e

  var j = 0
  var k

  /*
   * SHA-1 has a bitwise rotate left operation. But, SHA is not
   * function calcW() { return rol(W[j - 3] ^ W[j -  8] ^ W[j - 14] ^ W[j - 16], 1) }
   */
  function calcW () { return W[j - 3] ^ W[j - 8] ^ W[j - 14] ^ W[j - 16] }
  function loop (w, f) {
    W[j] = w

    var t = rol(a, 5) + f + e + w + k

    e = d
    d = c
    c = rol(b, 30)
    b = a
    a = t
    j++
  }

  k = 1518500249
  while (j < 16) loop(M.readInt32BE(j * 4), (b & c) | ((~b) & d))
  while (j < 20) loop(calcW(), (b & c) | ((~b) & d))
  k = 1859775393
  while (j < 40) loop(calcW(), b ^ c ^ d)
  k = -1894007588
  while (j < 60) loop(calcW(), (b & c) | (b & d) | (c & d))
  k = -899497514
  while (j < 80) loop(calcW(), b ^ c ^ d)

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = new Buffer(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha


}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTAsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgUFVCIDE4MC0xXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGRlcml2ZWQgZnJvbSBzaGExLmpzIG9mIHRoZSBzYW1lIHJlcG9zaXRvcnkuXG4gKiBUaGUgZGlmZmVyZW5jZSBiZXR3ZWVuIFNIQS0wIGFuZCBTSEEtMSBpcyBqdXN0IGEgYml0d2lzZSByb3RhdGUgbGVmdFxuICogb3BlcmF0aW9uIHdhcyBhZGRlZC5cbiAqL1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG5cbnZhciBXID0gbmV3IEFycmF5KDgwKVxuXG5mdW5jdGlvbiBTaGEgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYSwgSGFzaClcblxuU2hhLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hID0gMHg2NzQ1MjMwMSB8IDBcbiAgdGhpcy5fYiA9IDB4ZWZjZGFiODkgfCAwXG4gIHRoaXMuX2MgPSAweDk4YmFkY2ZlIHwgMFxuICB0aGlzLl9kID0gMHgxMDMyNTQ3NiB8IDBcbiAgdGhpcy5fZSA9IDB4YzNkMmUxZjAgfCAwXG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLypcbiAqIEJpdHdpc2Ugcm90YXRlIGEgMzItYml0IG51bWJlciB0byB0aGUgbGVmdC5cbiAqL1xuZnVuY3Rpb24gcm9sIChudW0sIGNudCkge1xuICByZXR1cm4gKG51bSA8PCBjbnQpIHwgKG51bSA+Pj4gKDMyIC0gY250KSlcbn1cblxuU2hhLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGEgPSB0aGlzLl9hXG4gIHZhciBiID0gdGhpcy5fYlxuICB2YXIgYyA9IHRoaXMuX2NcbiAgdmFyIGQgPSB0aGlzLl9kXG4gIHZhciBlID0gdGhpcy5fZVxuXG4gIHZhciBqID0gMFxuICB2YXIga1xuXG4gIC8qXG4gICAqIFNIQS0xIGhhcyBhIGJpdHdpc2Ugcm90YXRlIGxlZnQgb3BlcmF0aW9uLiBCdXQsIFNIQSBpcyBub3RcbiAgICogZnVuY3Rpb24gY2FsY1coKSB7IHJldHVybiByb2woV1tqIC0gM10gXiBXW2ogLSAgOF0gXiBXW2ogLSAxNF0gXiBXW2ogLSAxNl0sIDEpIH1cbiAgICovXG4gIGZ1bmN0aW9uIGNhbGNXICgpIHsgcmV0dXJuIFdbaiAtIDNdIF4gV1tqIC0gOF0gXiBXW2ogLSAxNF0gXiBXW2ogLSAxNl0gfVxuICBmdW5jdGlvbiBsb29wICh3LCBmKSB7XG4gICAgV1tqXSA9IHdcblxuICAgIHZhciB0ID0gcm9sKGEsIDUpICsgZiArIGUgKyB3ICsga1xuXG4gICAgZSA9IGRcbiAgICBkID0gY1xuICAgIGMgPSByb2woYiwgMzApXG4gICAgYiA9IGFcbiAgICBhID0gdFxuICAgIGorK1xuICB9XG5cbiAgayA9IDE1MTg1MDAyNDlcbiAgd2hpbGUgKGogPCAxNikgbG9vcChNLnJlYWRJbnQzMkJFKGogKiA0KSwgKGIgJiBjKSB8ICgofmIpICYgZCkpXG4gIHdoaWxlIChqIDwgMjApIGxvb3AoY2FsY1coKSwgKGIgJiBjKSB8ICgofmIpICYgZCkpXG4gIGsgPSAxODU5Nzc1MzkzXG4gIHdoaWxlIChqIDwgNDApIGxvb3AoY2FsY1coKSwgYiBeIGMgXiBkKVxuICBrID0gLTE4OTQwMDc1ODhcbiAgd2hpbGUgKGogPCA2MCkgbG9vcChjYWxjVygpLCAoYiAmIGMpIHwgKGIgJiBkKSB8IChjICYgZCkpXG4gIGsgPSAtODk5NDk3NTE0XG4gIHdoaWxlIChqIDwgODApIGxvb3AoY2FsY1coKSwgYiBeIGMgXiBkKVxuXG4gIHRoaXMuX2EgPSAoYSArIHRoaXMuX2EpIHwgMFxuICB0aGlzLl9iID0gKGIgKyB0aGlzLl9iKSB8IDBcbiAgdGhpcy5fYyA9IChjICsgdGhpcy5fYykgfCAwXG4gIHRoaXMuX2QgPSAoZCArIHRoaXMuX2QpIHwgMFxuICB0aGlzLl9lID0gKGUgKyB0aGlzLl9lKSB8IDBcbn1cblxuU2hhLnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBuZXcgQnVmZmVyKDIwKVxuXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2EgfCAwLCAwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9iIHwgMCwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYyB8IDAsIDgpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2QgfCAwLCAxMilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZSB8IDAsIDE2KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhXG5cbiJdfQ==
},{"./hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/hash.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/sha.js/hash.js":[function(require,module,exports){
(function (Buffer){
// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = new Buffer(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
  this._s = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = new Buffer(data, enc)
  }

  var l = this._len += data.length
  var s = this._s || 0
  var f = 0
  var buffer = this._block

  while (s < l) {
    var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
    var ch = (t - f)

    for (var i = 0; i < ch; i++) {
      buffer[(s % this._blockSize) + i] = data[i + f]
    }

    s += ch
    f += ch

    if ((s % this._blockSize) === 0) {
      this._update(buffer)
    }
  }
  this._s = s

  return this
}

Hash.prototype.digest = function (enc) {
  // Suppose the length of the message M, in bits, is l
  var l = this._len * 8

  // Append the bit 1 to the end of the message
  this._block[this._len % this._blockSize] = 0x80

  // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
  this._block.fill(0, this._len % this._blockSize + 1)

  if (l % (this._blockSize * 8) >= this._finalSize * 8) {
    this._update(this._block)
    this._block.fill(0)
  }

  // to this append the block which is equal to the number l written in binary
  // TODO: handle case where l is > Math.pow(2, 29)
  this._block.writeInt32BE(l, this._blockSize - 4)

  var hash = this._update(this._block) || this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbm9kZV9tb2R1bGVzL3NoYS5qcy9oYXNoLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcHJvdG90eXBlIGNsYXNzIGZvciBoYXNoIGZ1bmN0aW9uc1xuZnVuY3Rpb24gSGFzaCAoYmxvY2tTaXplLCBmaW5hbFNpemUpIHtcbiAgdGhpcy5fYmxvY2sgPSBuZXcgQnVmZmVyKGJsb2NrU2l6ZSlcbiAgdGhpcy5fZmluYWxTaXplID0gZmluYWxTaXplXG4gIHRoaXMuX2Jsb2NrU2l6ZSA9IGJsb2NrU2l6ZVxuICB0aGlzLl9sZW4gPSAwXG4gIHRoaXMuX3MgPSAwXG59XG5cbkhhc2gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBlbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGVuYyA9IGVuYyB8fCAndXRmOCdcbiAgICBkYXRhID0gbmV3IEJ1ZmZlcihkYXRhLCBlbmMpXG4gIH1cblxuICB2YXIgbCA9IHRoaXMuX2xlbiArPSBkYXRhLmxlbmd0aFxuICB2YXIgcyA9IHRoaXMuX3MgfHwgMFxuICB2YXIgZiA9IDBcbiAgdmFyIGJ1ZmZlciA9IHRoaXMuX2Jsb2NrXG5cbiAgd2hpbGUgKHMgPCBsKSB7XG4gICAgdmFyIHQgPSBNYXRoLm1pbihkYXRhLmxlbmd0aCwgZiArIHRoaXMuX2Jsb2NrU2l6ZSAtIChzICUgdGhpcy5fYmxvY2tTaXplKSlcbiAgICB2YXIgY2ggPSAodCAtIGYpXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoOyBpKyspIHtcbiAgICAgIGJ1ZmZlclsocyAlIHRoaXMuX2Jsb2NrU2l6ZSkgKyBpXSA9IGRhdGFbaSArIGZdXG4gICAgfVxuXG4gICAgcyArPSBjaFxuICAgIGYgKz0gY2hcblxuICAgIGlmICgocyAlIHRoaXMuX2Jsb2NrU2l6ZSkgPT09IDApIHtcbiAgICAgIHRoaXMuX3VwZGF0ZShidWZmZXIpXG4gICAgfVxuICB9XG4gIHRoaXMuX3MgPSBzXG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuSGFzaC5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gKGVuYykge1xuICAvLyBTdXBwb3NlIHRoZSBsZW5ndGggb2YgdGhlIG1lc3NhZ2UgTSwgaW4gYml0cywgaXMgbFxuICB2YXIgbCA9IHRoaXMuX2xlbiAqIDhcblxuICAvLyBBcHBlbmQgdGhlIGJpdCAxIHRvIHRoZSBlbmQgb2YgdGhlIG1lc3NhZ2VcbiAgdGhpcy5fYmxvY2tbdGhpcy5fbGVuICUgdGhpcy5fYmxvY2tTaXplXSA9IDB4ODBcblxuICAvLyBhbmQgdGhlbiBrIHplcm8gYml0cywgd2hlcmUgayBpcyB0aGUgc21hbGxlc3Qgbm9uLW5lZ2F0aXZlIHNvbHV0aW9uIHRvIHRoZSBlcXVhdGlvbiAobCArIDEgKyBrKSA9PT0gZmluYWxTaXplIG1vZCBibG9ja1NpemVcbiAgdGhpcy5fYmxvY2suZmlsbCgwLCB0aGlzLl9sZW4gJSB0aGlzLl9ibG9ja1NpemUgKyAxKVxuXG4gIGlmIChsICUgKHRoaXMuX2Jsb2NrU2l6ZSAqIDgpID49IHRoaXMuX2ZpbmFsU2l6ZSAqIDgpIHtcbiAgICB0aGlzLl91cGRhdGUodGhpcy5fYmxvY2spXG4gICAgdGhpcy5fYmxvY2suZmlsbCgwKVxuICB9XG5cbiAgLy8gdG8gdGhpcyBhcHBlbmQgdGhlIGJsb2NrIHdoaWNoIGlzIGVxdWFsIHRvIHRoZSBudW1iZXIgbCB3cml0dGVuIGluIGJpbmFyeVxuICAvLyBUT0RPOiBoYW5kbGUgY2FzZSB3aGVyZSBsIGlzID4gTWF0aC5wb3coMiwgMjkpXG4gIHRoaXMuX2Jsb2NrLndyaXRlSW50MzJCRShsLCB0aGlzLl9ibG9ja1NpemUgLSA0KVxuXG4gIHZhciBoYXNoID0gdGhpcy5fdXBkYXRlKHRoaXMuX2Jsb2NrKSB8fCB0aGlzLl9oYXNoKClcblxuICByZXR1cm4gZW5jID8gaGFzaC50b1N0cmluZyhlbmMpIDogaGFzaFxufVxuXG5IYXNoLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ191cGRhdGUgbXVzdCBiZSBpbXBsZW1lbnRlZCBieSBzdWJjbGFzcycpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzaFxuIl19
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/ripemd160/lib/ripemd160.js":[function(require,module,exports){
(function (Buffer){
/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
/** @preserve
(c) 2012 by Cédric Mesnil. All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// constants table
var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]
var hr = [0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]

function bytesToWords (bytes) {
  var words = []
  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
    words[b >>> 5] |= bytes[i] << (24 - b % 32)
  }
  return words
}

function wordsToBytes (words) {
  var bytes = []
  for (var b = 0; b < words.length * 32; b += 8) {
    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF)
  }
  return bytes
}

function processBlock (H, M, offset) {
  // swap endian
  for (var i = 0; i < 16; i++) {
    var offset_i = offset + i
    var M_offset_i = M[offset_i]

    // Swap
    M[offset_i] = (
      (((M_offset_i << 8) | (M_offset_i >>> 24)) & 0x00ff00ff) |
      (((M_offset_i << 24) | (M_offset_i >>> 8)) & 0xff00ff00)
    )
  }

  // Working variables
  var al, bl, cl, dl, el
  var ar, br, cr, dr, er

  ar = al = H[0]
  br = bl = H[1]
  cr = cl = H[2]
  dr = dl = H[3]
  er = el = H[4]

  // computation
  var t
  for (i = 0; i < 80; i += 1) {
    t = (al + M[offset + zl[i]]) | 0
    if (i < 16) {
      t += f1(bl, cl, dl) + hl[0]
    } else if (i < 32) {
      t += f2(bl, cl, dl) + hl[1]
    } else if (i < 48) {
      t += f3(bl, cl, dl) + hl[2]
    } else if (i < 64) {
      t += f4(bl, cl, dl) + hl[3]
    } else {// if (i<80) {
      t += f5(bl, cl, dl) + hl[4]
    }
    t = t | 0
    t = rotl(t, sl[i])
    t = (t + el) | 0
    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = t

    t = (ar + M[offset + zr[i]]) | 0
    if (i < 16) {
      t += f5(br, cr, dr) + hr[0]
    } else if (i < 32) {
      t += f4(br, cr, dr) + hr[1]
    } else if (i < 48) {
      t += f3(br, cr, dr) + hr[2]
    } else if (i < 64) {
      t += f2(br, cr, dr) + hr[3]
    } else {// if (i<80) {
      t += f1(br, cr, dr) + hr[4]
    }

    t = t | 0
    t = rotl(t, sr[i])
    t = (t + er) | 0
    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = t
  }

  // intermediate hash value
  t = (H[1] + cl + dr) | 0
  H[1] = (H[2] + dl + er) | 0
  H[2] = (H[3] + el + ar) | 0
  H[3] = (H[4] + al + br) | 0
  H[4] = (H[0] + bl + cr) | 0
  H[0] = t
}

function f1 (x, y, z) {
  return ((x) ^ (y) ^ (z))
}

function f2 (x, y, z) {
  return (((x) & (y)) | ((~x) & (z)))
}

function f3 (x, y, z) {
  return (((x) | (~(y))) ^ (z))
}

function f4 (x, y, z) {
  return (((x) & (z)) | ((y) & (~(z))))
}

function f5 (x, y, z) {
  return ((x) ^ ((y) | (~(z))))
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function ripemd160 (message) {
  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]

  if (typeof message === 'string') {
    message = new Buffer(message, 'utf8')
  }

  var m = bytesToWords(message)

  var nBitsLeft = message.length * 8
  var nBitsTotal = message.length * 8

  // Add padding
  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32)
  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
    (((nBitsTotal << 8) | (nBitsTotal >>> 24)) & 0x00ff00ff) |
    (((nBitsTotal << 24) | (nBitsTotal >>> 8)) & 0xff00ff00)
  )

  for (var i = 0; i < m.length; i += 16) {
    processBlock(H, m, i)
  }

  // swap endian
  for (i = 0; i < 5; i++) {
    // shortcut
    var H_i = H[i]

    // Swap
    H[i] = (((H_i << 8) | (H_i >>> 24)) & 0x00ff00ff) |
      (((H_i << 24) | (H_i >>> 8)) & 0xff00ff00)
  }

  var digestbytes = wordsToBytes(H)
  return new Buffer(digestbytes)
}

module.exports = ripemd160

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/node_modules/cipher-base/index.js":[function(require,module,exports){
(function (Buffer){
var Transform = require('stream').Transform
var inherits = require('inherits')
var StringDecoder = require('string_decoder').StringDecoder
module.exports = CipherBase
inherits(CipherBase, Transform)
function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  this._decoder = null
  this._encoding = null
}
CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = new Buffer(data, inputEnc)
  }
  var outData = this._update(data)
  if (this.hashMode) {
    return this
  }
  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }
  return outData
}

CipherBase.prototype.setAutoPadding = function () {}

CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this._final())
  } catch (e) {
    err = e
  } finally {
    done(err)
  }
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this._final() || new Buffer('')
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, final) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }
  if (this._encoding !== enc) {
    throw new Error('can\'t switch encodings')
  }
  var out = this._decoder.write(value)
  if (final) {
    out += this._decoder.end()
  }
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbm9kZV9tb2R1bGVzL2NpcGhlci1iYXNlL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3N0cmVhbScpLlRyYW5zZm9ybVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2RlcicpLlN0cmluZ0RlY29kZXJcbm1vZHVsZS5leHBvcnRzID0gQ2lwaGVyQmFzZVxuaW5oZXJpdHMoQ2lwaGVyQmFzZSwgVHJhbnNmb3JtKVxuZnVuY3Rpb24gQ2lwaGVyQmFzZSAoaGFzaE1vZGUpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5oYXNoTW9kZSA9IHR5cGVvZiBoYXNoTW9kZSA9PT0gJ3N0cmluZydcbiAgaWYgKHRoaXMuaGFzaE1vZGUpIHtcbiAgICB0aGlzW2hhc2hNb2RlXSA9IHRoaXMuX2ZpbmFsT3JEaWdlc3RcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmZpbmFsID0gdGhpcy5fZmluYWxPckRpZ2VzdFxuICB9XG4gIHRoaXMuX2RlY29kZXIgPSBudWxsXG4gIHRoaXMuX2VuY29kaW5nID0gbnVsbFxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEsIGlucHV0RW5jLCBvdXRwdXRFbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGRhdGEgPSBuZXcgQnVmZmVyKGRhdGEsIGlucHV0RW5jKVxuICB9XG4gIHZhciBvdXREYXRhID0gdGhpcy5fdXBkYXRlKGRhdGEpXG4gIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuICBpZiAob3V0cHV0RW5jKSB7XG4gICAgb3V0RGF0YSA9IHRoaXMuX3RvU3RyaW5nKG91dERhdGEsIG91dHB1dEVuYylcbiAgfVxuICByZXR1cm4gb3V0RGF0YVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uICgpIHt9XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLmdldEF1dGhUYWcgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIGdldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEF1dGhUYWcgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEFBRCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gc2V0IGFhZCBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoZGF0YSwgXywgbmV4dCkge1xuICB2YXIgZXJyXG4gIHRyeSB7XG4gICAgaWYgKHRoaXMuaGFzaE1vZGUpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZShkYXRhKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1c2godGhpcy5fdXBkYXRlKGRhdGEpKVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfSBmaW5hbGx5IHtcbiAgICBuZXh0KGVycilcbiAgfVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZsdXNoID0gZnVuY3Rpb24gKGRvbmUpIHtcbiAgdmFyIGVyclxuICB0cnkge1xuICAgIHRoaXMucHVzaCh0aGlzLl9maW5hbCgpKVxuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyID0gZVxuICB9IGZpbmFsbHkge1xuICAgIGRvbmUoZXJyKVxuICB9XG59XG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fZmluYWxPckRpZ2VzdCA9IGZ1bmN0aW9uIChvdXRwdXRFbmMpIHtcbiAgdmFyIG91dERhdGEgPSB0aGlzLl9maW5hbCgpIHx8IG5ldyBCdWZmZXIoJycpXG4gIGlmIChvdXRwdXRFbmMpIHtcbiAgICBvdXREYXRhID0gdGhpcy5fdG9TdHJpbmcob3V0RGF0YSwgb3V0cHV0RW5jLCB0cnVlKVxuICB9XG4gIHJldHVybiBvdXREYXRhXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLl90b1N0cmluZyA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jLCBmaW5hbCkge1xuICBpZiAoIXRoaXMuX2RlY29kZXIpIHtcbiAgICB0aGlzLl9kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKVxuICAgIHRoaXMuX2VuY29kaW5nID0gZW5jXG4gIH1cbiAgaWYgKHRoaXMuX2VuY29kaW5nICE9PSBlbmMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NhblxcJ3Qgc3dpdGNoIGVuY29kaW5ncycpXG4gIH1cbiAgdmFyIG91dCA9IHRoaXMuX2RlY29kZXIud3JpdGUodmFsdWUpXG4gIGlmIChmaW5hbCkge1xuICAgIG91dCArPSB0aGlzLl9kZWNvZGVyLmVuZCgpXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuIl19
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js","stream":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/stream-browserify/index.js","string_decoder":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/string_decoder/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/fixProc.js":[function(require,module,exports){
(function (Buffer){
// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED\r?\nDEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\r?\n\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n/m
var startRegex = /^-----BEGIN (.*) KEY-----\r?\n/m
var fullRegex = /^-----BEGIN (.*) KEY-----\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n-----END \1 KEY-----$/m
var evp = require('evp_bytestokey')
var ciphers = require('browserify-aes')
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = new Buffer(match2[2].replace(/\r?\n/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = new Buffer(match[2], 'hex')
    var cipherText = new Buffer(match[3].replace(/\r?\n/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1] + ' KEY'
  return {
    tag: tag,
    data: decrypted
  }
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL2ZpeFByb2MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBhZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2FwYXRpbC9wZW1zdHJpcFxudmFyIGZpbmRQcm9jID0gL1Byb2MtVHlwZTogNCxFTkNSWVBURURcXHI/XFxuREVLLUluZm86IEFFUy0oKD86MTI4KXwoPzoxOTIpfCg/OjI1NikpLUNCQywoWzAtOUEtSF0rKVxccj9cXG5cXHI/XFxuKFswLTlBLXpcXG5cXHJcXCtcXC9cXD1dKylcXHI/XFxuL21cbnZhciBzdGFydFJlZ2V4ID0gL14tLS0tLUJFR0lOICguKikgS0VZLS0tLS1cXHI/XFxuL21cbnZhciBmdWxsUmVnZXggPSAvXi0tLS0tQkVHSU4gKC4qKSBLRVktLS0tLVxccj9cXG4oWzAtOUEtelxcblxcclxcK1xcL1xcPV0rKVxccj9cXG4tLS0tLUVORCBcXDEgS0VZLS0tLS0kL21cbnZhciBldnAgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpXG52YXIgY2lwaGVycyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzJylcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9rZXksIHBhc3N3b3JkKSB7XG4gIHZhciBrZXkgPSBva2V5LnRvU3RyaW5nKClcbiAgdmFyIG1hdGNoID0ga2V5Lm1hdGNoKGZpbmRQcm9jKVxuICB2YXIgZGVjcnlwdGVkXG4gIGlmICghbWF0Y2gpIHtcbiAgICB2YXIgbWF0Y2gyID0ga2V5Lm1hdGNoKGZ1bGxSZWdleClcbiAgICBkZWNyeXB0ZWQgPSBuZXcgQnVmZmVyKG1hdGNoMlsyXS5yZXBsYWNlKC9cXHI/XFxuL2csICcnKSwgJ2Jhc2U2NCcpXG4gIH0gZWxzZSB7XG4gICAgdmFyIHN1aXRlID0gJ2FlcycgKyBtYXRjaFsxXVxuICAgIHZhciBpdiA9IG5ldyBCdWZmZXIobWF0Y2hbMl0sICdoZXgnKVxuICAgIHZhciBjaXBoZXJUZXh0ID0gbmV3IEJ1ZmZlcihtYXRjaFszXS5yZXBsYWNlKC9cXHI/XFxuL2csICcnKSwgJ2Jhc2U2NCcpXG4gICAgdmFyIGNpcGhlcktleSA9IGV2cChwYXNzd29yZCwgaXYuc2xpY2UoMCwgOCksIHBhcnNlSW50KG1hdGNoWzFdLCAxMCkpLmtleVxuICAgIHZhciBvdXQgPSBbXVxuICAgIHZhciBjaXBoZXIgPSBjaXBoZXJzLmNyZWF0ZURlY2lwaGVyaXYoc3VpdGUsIGNpcGhlcktleSwgaXYpXG4gICAgb3V0LnB1c2goY2lwaGVyLnVwZGF0ZShjaXBoZXJUZXh0KSlcbiAgICBvdXQucHVzaChjaXBoZXIuZmluYWwoKSlcbiAgICBkZWNyeXB0ZWQgPSBCdWZmZXIuY29uY2F0KG91dClcbiAgfVxuICB2YXIgdGFnID0ga2V5Lm1hdGNoKHN0YXJ0UmVnZXgpWzFdICsgJyBLRVknXG4gIHJldHVybiB7XG4gICAgdGFnOiB0YWcsXG4gICAgZGF0YTogZGVjcnlwdGVkXG4gIH1cbn1cbiJdfQ==
},{"browserify-aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/browser.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","evp_bytestokey":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/evp_bytestokey/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/browser.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/browser.js"][0].apply(exports,arguments)
},{"./decrypter":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/decrypter.js","./encrypter":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/encrypter.js","./modes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/encrypter.js":[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')
var modes = require('./modes')
var ebtk = require('evp_bytestokey')
var StreamCipher = require('./streamCipher')
var AuthCipher = require('./authCipher')
inherits(Cipher, Transform)
function Cipher (mode, key, iv) {
  if (!(this instanceof Cipher)) {
    return new Cipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  } else if (chunk.toString('hex') !== '10101010101010101010101010101010') {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}
Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
}

function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}
Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = new Buffer(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }
  var out = Buffer.concat([this.cache, padBuff])
  return out
}
var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
}

function createCipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv)
  }
  return new Cipher(modelist[config.mode], password, iv)
}
function createCipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9lbmNyeXB0ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIG1vZGVzID0gcmVxdWlyZSgnLi9tb2RlcycpXG52YXIgZWJ0ayA9IHJlcXVpcmUoJ2V2cF9ieXRlc3Rva2V5JylcbnZhciBTdHJlYW1DaXBoZXIgPSByZXF1aXJlKCcuL3N0cmVhbUNpcGhlcicpXG52YXIgQXV0aENpcGhlciA9IHJlcXVpcmUoJy4vYXV0aENpcGhlcicpXG5pbmhlcml0cyhDaXBoZXIsIFRyYW5zZm9ybSlcbmZ1bmN0aW9uIENpcGhlciAobW9kZSwga2V5LCBpdikge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQ2lwaGVyKSkge1xuICAgIHJldHVybiBuZXcgQ2lwaGVyKG1vZGUsIGtleSwgaXYpXG4gIH1cbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5fY2FjaGUgPSBuZXcgU3BsaXR0ZXIoKVxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBuZXcgQnVmZmVyKGl2Lmxlbmd0aClcbiAgaXYuY29weSh0aGlzLl9wcmV2KVxuICB0aGlzLl9tb2RlID0gbW9kZVxuICB0aGlzLl9hdXRvcGFkZGluZyA9IHRydWVcbn1cbkNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX2NhY2hlLmFkZChkYXRhKVxuICB2YXIgY2h1bmtcbiAgdmFyIHRoaW5nXG4gIHZhciBvdXQgPSBbXVxuICB3aGlsZSAoKGNodW5rID0gdGhpcy5fY2FjaGUuZ2V0KCkpKSB7XG4gICAgdGhpbmcgPSB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmspXG4gICAgb3V0LnB1c2godGhpbmcpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQob3V0KVxufVxuQ2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjaHVuayA9IHRoaXMuX2NhY2hlLmZsdXNoKClcbiAgaWYgKHRoaXMuX2F1dG9wYWRkaW5nKSB7XG4gICAgY2h1bmsgPSB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmspXG4gICAgdGhpcy5fY2lwaGVyLnNjcnViKClcbiAgICByZXR1cm4gY2h1bmtcbiAgfSBlbHNlIGlmIChjaHVuay50b1N0cmluZygnaGV4JykgIT09ICcxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMCcpIHtcbiAgICB0aGlzLl9jaXBoZXIuc2NydWIoKVxuICAgIHRocm93IG5ldyBFcnJvcignZGF0YSBub3QgbXVsdGlwbGUgb2YgYmxvY2sgbGVuZ3RoJylcbiAgfVxufVxuQ2lwaGVyLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uIChzZXRUbykge1xuICB0aGlzLl9hdXRvcGFkZGluZyA9ICEhc2V0VG9cbn1cblxuZnVuY3Rpb24gU3BsaXR0ZXIgKCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU3BsaXR0ZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBTcGxpdHRlcigpXG4gIH1cbiAgdGhpcy5jYWNoZSA9IG5ldyBCdWZmZXIoJycpXG59XG5TcGxpdHRlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIGRhdGFdKVxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGggPiAxNSkge1xuICAgIHZhciBvdXQgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgIHRoaXMuY2FjaGUgPSB0aGlzLmNhY2hlLnNsaWNlKDE2KVxuICAgIHJldHVybiBvdXRcbiAgfVxuICByZXR1cm4gbnVsbFxufVxuU3BsaXR0ZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbGVuID0gMTYgLSB0aGlzLmNhY2hlLmxlbmd0aFxuICB2YXIgcGFkQnVmZiA9IG5ldyBCdWZmZXIobGVuKVxuXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIHBhZEJ1ZmYud3JpdGVVSW50OChsZW4sIGkpXG4gIH1cbiAgdmFyIG91dCA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIHBhZEJ1ZmZdKVxuICByZXR1cm4gb3V0XG59XG52YXIgbW9kZWxpc3QgPSB7XG4gIEVDQjogcmVxdWlyZSgnLi9tb2Rlcy9lY2InKSxcbiAgQ0JDOiByZXF1aXJlKCcuL21vZGVzL2NiYycpLFxuICBDRkI6IHJlcXVpcmUoJy4vbW9kZXMvY2ZiJyksXG4gIENGQjg6IHJlcXVpcmUoJy4vbW9kZXMvY2ZiOCcpLFxuICBDRkIxOiByZXF1aXJlKCcuL21vZGVzL2NmYjEnKSxcbiAgT0ZCOiByZXF1aXJlKCcuL21vZGVzL29mYicpLFxuICBDVFI6IHJlcXVpcmUoJy4vbW9kZXMvY3RyJyksXG4gIEdDTTogcmVxdWlyZSgnLi9tb2Rlcy9jdHInKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDaXBoZXJpdiAoc3VpdGUsIHBhc3N3b3JkLCBpdikge1xuICB2YXIgY29uZmlnID0gbW9kZXNbc3VpdGUudG9Mb3dlckNhc2UoKV1cbiAgaWYgKCFjb25maWcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuICB9XG4gIGlmICh0eXBlb2YgaXYgPT09ICdzdHJpbmcnKSB7XG4gICAgaXYgPSBuZXcgQnVmZmVyKGl2KVxuICB9XG4gIGlmICh0eXBlb2YgcGFzc3dvcmQgPT09ICdzdHJpbmcnKSB7XG4gICAgcGFzc3dvcmQgPSBuZXcgQnVmZmVyKHBhc3N3b3JkKVxuICB9XG4gIGlmIChwYXNzd29yZC5sZW5ndGggIT09IGNvbmZpZy5rZXkgLyA4KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBrZXkgbGVuZ3RoICcgKyBwYXNzd29yZC5sZW5ndGgpXG4gIH1cbiAgaWYgKGl2Lmxlbmd0aCAhPT0gY29uZmlnLml2KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBpdiBsZW5ndGggJyArIGl2Lmxlbmd0aClcbiAgfVxuICBpZiAoY29uZmlnLnR5cGUgPT09ICdzdHJlYW0nKSB7XG4gICAgcmV0dXJuIG5ldyBTdHJlYW1DaXBoZXIobW9kZWxpc3RbY29uZmlnLm1vZGVdLCBwYXNzd29yZCwgaXYpXG4gIH0gZWxzZSBpZiAoY29uZmlnLnR5cGUgPT09ICdhdXRoJykge1xuICAgIHJldHVybiBuZXcgQXV0aENpcGhlcihtb2RlbGlzdFtjb25maWcubW9kZV0sIHBhc3N3b3JkLCBpdilcbiAgfVxuICByZXR1cm4gbmV3IENpcGhlcihtb2RlbGlzdFtjb25maWcubW9kZV0sIHBhc3N3b3JkLCBpdilcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHZhciBjb25maWcgPSBtb2Rlc1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwgY29uZmlnLmtleSwgY29uZmlnLml2KVxuICByZXR1cm4gY3JlYXRlQ2lwaGVyaXYoc3VpdGUsIGtleXMua2V5LCBrZXlzLml2KVxufVxuXG5leHBvcnRzLmNyZWF0ZUNpcGhlcml2ID0gY3JlYXRlQ2lwaGVyaXZcbmV4cG9ydHMuY3JlYXRlQ2lwaGVyID0gY3JlYXRlQ2lwaGVyXG4iXX0=
},{"./aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/aes.js","./authCipher":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/authCipher.js","./modes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes.js","./modes/cbc":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/cbc.js","./modes/cfb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb.js","./modes/cfb1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb1.js","./modes/cfb8":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb8.js","./modes/ctr":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/ctr.js","./modes/ecb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/ecb.js","./modes/ofb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/ofb.js","./streamCipher":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/streamCipher.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","cipher-base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/cipher-base/index.js","evp_bytestokey":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/evp_bytestokey/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/decrypter.js":[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')
var modes = require('./modes')
var StreamCipher = require('./streamCipher')
var AuthCipher = require('./authCipher')
var ebtk = require('evp_bytestokey')

inherits(Decipher, Transform)
function Decipher (mode, key, iv) {
  if (!(this instanceof Decipher)) {
    return new Decipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}
Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
}
function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }
  return null
}
Splitter.prototype.flush = function () {
  if (this.cache.length) {
    return this.cache
  }
}
function unpad (last) {
  var padded = last[15]
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) {
    return
  }
  return last.slice(0, 16 - padded)
}

var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
}

function createDecipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv, true)
  }
  return new Decipher(modelist[config.mode], password, iv)
}

function createDecipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}
exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9kZWNyeXB0ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIG1vZGVzID0gcmVxdWlyZSgnLi9tb2RlcycpXG52YXIgU3RyZWFtQ2lwaGVyID0gcmVxdWlyZSgnLi9zdHJlYW1DaXBoZXInKVxudmFyIEF1dGhDaXBoZXIgPSByZXF1aXJlKCcuL2F1dGhDaXBoZXInKVxudmFyIGVidGsgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpXG5cbmluaGVyaXRzKERlY2lwaGVyLCBUcmFuc2Zvcm0pXG5mdW5jdGlvbiBEZWNpcGhlciAobW9kZSwga2V5LCBpdikge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRGVjaXBoZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBEZWNpcGhlcihtb2RlLCBrZXksIGl2KVxuICB9XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuX2NhY2hlID0gbmV3IFNwbGl0dGVyKClcbiAgdGhpcy5fbGFzdCA9IHZvaWQgMFxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBuZXcgQnVmZmVyKGl2Lmxlbmd0aClcbiAgaXYuY29weSh0aGlzLl9wcmV2KVxuICB0aGlzLl9tb2RlID0gbW9kZVxuICB0aGlzLl9hdXRvcGFkZGluZyA9IHRydWVcbn1cbkRlY2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG4gIHdoaWxlICgoY2h1bmsgPSB0aGlzLl9jYWNoZS5nZXQodGhpcy5fYXV0b3BhZGRpbmcpKSkge1xuICAgIHRoaW5nID0gdGhpcy5fbW9kZS5kZWNyeXB0KHRoaXMsIGNodW5rKVxuICAgIG91dC5wdXNoKHRoaW5nKVxuICB9XG4gIHJldHVybiBCdWZmZXIuY29uY2F0KG91dClcbn1cbkRlY2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjaHVuayA9IHRoaXMuX2NhY2hlLmZsdXNoKClcbiAgaWYgKHRoaXMuX2F1dG9wYWRkaW5nKSB7XG4gICAgcmV0dXJuIHVucGFkKHRoaXMuX21vZGUuZGVjcnlwdCh0aGlzLCBjaHVuaykpXG4gIH0gZWxzZSBpZiAoY2h1bmspIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgbm90IG11bHRpcGxlIG9mIGJsb2NrIGxlbmd0aCcpXG4gIH1cbn1cbkRlY2lwaGVyLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uIChzZXRUbykge1xuICB0aGlzLl9hdXRvcGFkZGluZyA9ICEhc2V0VG9cbn1cbmZ1bmN0aW9uIFNwbGl0dGVyICgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNwbGl0dGVyKSkge1xuICAgIHJldHVybiBuZXcgU3BsaXR0ZXIoKVxuICB9XG4gIHRoaXMuY2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxufVxuU3BsaXR0ZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuY2FjaGUgPSBCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBkYXRhXSlcbn1cblxuU3BsaXR0ZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChhdXRvUGFkZGluZykge1xuICB2YXIgb3V0XG4gIGlmIChhdXRvUGFkZGluZykge1xuICAgIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+IDE2KSB7XG4gICAgICBvdXQgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgICByZXR1cm4gb3V0XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+PSAxNikge1xuICAgICAgb3V0ID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNilcbiAgICAgIHRoaXMuY2FjaGUgPSB0aGlzLmNhY2hlLnNsaWNlKDE2KVxuICAgICAgcmV0dXJuIG91dFxuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbFxufVxuU3BsaXR0ZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy5jYWNoZVxuICB9XG59XG5mdW5jdGlvbiB1bnBhZCAobGFzdCkge1xuICB2YXIgcGFkZGVkID0gbGFzdFsxNV1cbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgcGFkZGVkKSB7XG4gICAgaWYgKGxhc3RbKGkgKyAoMTYgLSBwYWRkZWQpKV0gIT09IHBhZGRlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gZGVjcnlwdCBkYXRhJylcbiAgICB9XG4gIH1cbiAgaWYgKHBhZGRlZCA9PT0gMTYpIHtcbiAgICByZXR1cm5cbiAgfVxuICByZXR1cm4gbGFzdC5zbGljZSgwLCAxNiAtIHBhZGRlZClcbn1cblxudmFyIG1vZGVsaXN0ID0ge1xuICBFQ0I6IHJlcXVpcmUoJy4vbW9kZXMvZWNiJyksXG4gIENCQzogcmVxdWlyZSgnLi9tb2Rlcy9jYmMnKSxcbiAgQ0ZCOiByZXF1aXJlKCcuL21vZGVzL2NmYicpLFxuICBDRkI4OiByZXF1aXJlKCcuL21vZGVzL2NmYjgnKSxcbiAgQ0ZCMTogcmVxdWlyZSgnLi9tb2Rlcy9jZmIxJyksXG4gIE9GQjogcmVxdWlyZSgnLi9tb2Rlcy9vZmInKSxcbiAgQ1RSOiByZXF1aXJlKCcuL21vZGVzL2N0cicpLFxuICBHQ006IHJlcXVpcmUoJy4vbW9kZXMvY3RyJylcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVjaXBoZXJpdiAoc3VpdGUsIHBhc3N3b3JkLCBpdikge1xuICB2YXIgY29uZmlnID0gbW9kZXNbc3VpdGUudG9Mb3dlckNhc2UoKV1cbiAgaWYgKCFjb25maWcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuICB9XG4gIGlmICh0eXBlb2YgaXYgPT09ICdzdHJpbmcnKSB7XG4gICAgaXYgPSBuZXcgQnVmZmVyKGl2KVxuICB9XG4gIGlmICh0eXBlb2YgcGFzc3dvcmQgPT09ICdzdHJpbmcnKSB7XG4gICAgcGFzc3dvcmQgPSBuZXcgQnVmZmVyKHBhc3N3b3JkKVxuICB9XG4gIGlmIChwYXNzd29yZC5sZW5ndGggIT09IGNvbmZpZy5rZXkgLyA4KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBrZXkgbGVuZ3RoICcgKyBwYXNzd29yZC5sZW5ndGgpXG4gIH1cbiAgaWYgKGl2Lmxlbmd0aCAhPT0gY29uZmlnLml2KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBpdiBsZW5ndGggJyArIGl2Lmxlbmd0aClcbiAgfVxuICBpZiAoY29uZmlnLnR5cGUgPT09ICdzdHJlYW0nKSB7XG4gICAgcmV0dXJuIG5ldyBTdHJlYW1DaXBoZXIobW9kZWxpc3RbY29uZmlnLm1vZGVdLCBwYXNzd29yZCwgaXYsIHRydWUpXG4gIH0gZWxzZSBpZiAoY29uZmlnLnR5cGUgPT09ICdhdXRoJykge1xuICAgIHJldHVybiBuZXcgQXV0aENpcGhlcihtb2RlbGlzdFtjb25maWcubW9kZV0sIHBhc3N3b3JkLCBpdiwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gbmV3IERlY2lwaGVyKG1vZGVsaXN0W2NvbmZpZy5tb2RlXSwgcGFzc3dvcmQsIGl2KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHZhciBjb25maWcgPSBtb2Rlc1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwgY29uZmlnLmtleSwgY29uZmlnLml2KVxuICByZXR1cm4gY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyID0gY3JlYXRlRGVjaXBoZXJcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXJpdiA9IGNyZWF0ZURlY2lwaGVyaXZcbiJdfQ==
},{"./aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/aes.js","./authCipher":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/authCipher.js","./modes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes.js","./modes/cbc":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/cbc.js","./modes/cfb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb.js","./modes/cfb1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb1.js","./modes/cfb8":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb8.js","./modes/ctr":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/ctr.js","./modes/ecb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/ecb.js","./modes/ofb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/ofb.js","./streamCipher":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/streamCipher.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","cipher-base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/cipher-base/index.js","evp_bytestokey":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/evp_bytestokey/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/evp_bytestokey/index.js":[function(require,module,exports){
(function (Buffer){
var md5 = require('create-hash/md5')
module.exports = EVP_BytesToKey
function EVP_BytesToKey (password, salt, keyLen, ivLen) {
  if (!Buffer.isBuffer(password)) {
    password = new Buffer(password, 'binary')
  }
  if (salt && !Buffer.isBuffer(salt)) {
    salt = new Buffer(salt, 'binary')
  }
  keyLen = keyLen / 8
  ivLen = ivLen || 0
  var ki = 0
  var ii = 0
  var key = new Buffer(keyLen)
  var iv = new Buffer(ivLen)
  var addmd = 0
  var md_buf
  var i
  var bufs = []
  while (true) {
    if (addmd++ > 0) {
      bufs.push(md_buf)
    }
    bufs.push(password)
    if (salt) {
      bufs.push(salt)
    }
    md_buf = md5(Buffer.concat(bufs))
    bufs = []
    i = 0
    if (keyLen > 0) {
      while (true) {
        if (keyLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        key[ki++] = md_buf[i]
        keyLen--
        i++
      }
    }
    if (ivLen > 0 && i !== md_buf.length) {
      while (true) {
        if (ivLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        iv[ii++] = md_buf[i]
        ivLen--
        i++
      }
    }
    if (keyLen === 0 && ivLen === 0) {
      break
    }
  }
  for (i = 0; i < md_buf.length; i++) {
    md_buf[i] = 0
  }
  return {
    key: key,
    iv: iv
  }
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9ldnBfYnl0ZXN0b2tleS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWQ1ID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gvbWQ1Jylcbm1vZHVsZS5leHBvcnRzID0gRVZQX0J5dGVzVG9LZXlcbmZ1bmN0aW9uIEVWUF9CeXRlc1RvS2V5IChwYXNzd29yZCwgc2FsdCwga2V5TGVuLCBpdkxlbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwYXNzd29yZCkpIHtcbiAgICBwYXNzd29yZCA9IG5ldyBCdWZmZXIocGFzc3dvcmQsICdiaW5hcnknKVxuICB9XG4gIGlmIChzYWx0ICYmICFCdWZmZXIuaXNCdWZmZXIoc2FsdCkpIHtcbiAgICBzYWx0ID0gbmV3IEJ1ZmZlcihzYWx0LCAnYmluYXJ5JylcbiAgfVxuICBrZXlMZW4gPSBrZXlMZW4gLyA4XG4gIGl2TGVuID0gaXZMZW4gfHwgMFxuICB2YXIga2kgPSAwXG4gIHZhciBpaSA9IDBcbiAgdmFyIGtleSA9IG5ldyBCdWZmZXIoa2V5TGVuKVxuICB2YXIgaXYgPSBuZXcgQnVmZmVyKGl2TGVuKVxuICB2YXIgYWRkbWQgPSAwXG4gIHZhciBtZF9idWZcbiAgdmFyIGlcbiAgdmFyIGJ1ZnMgPSBbXVxuICB3aGlsZSAodHJ1ZSkge1xuICAgIGlmIChhZGRtZCsrID4gMCkge1xuICAgICAgYnVmcy5wdXNoKG1kX2J1ZilcbiAgICB9XG4gICAgYnVmcy5wdXNoKHBhc3N3b3JkKVxuICAgIGlmIChzYWx0KSB7XG4gICAgICBidWZzLnB1c2goc2FsdClcbiAgICB9XG4gICAgbWRfYnVmID0gbWQ1KEJ1ZmZlci5jb25jYXQoYnVmcykpXG4gICAgYnVmcyA9IFtdXG4gICAgaSA9IDBcbiAgICBpZiAoa2V5TGVuID4gMCkge1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgaWYgKGtleUxlbiA9PT0gMCkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPT09IG1kX2J1Zi5sZW5ndGgpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGtleVtraSsrXSA9IG1kX2J1ZltpXVxuICAgICAgICBrZXlMZW4tLVxuICAgICAgICBpKytcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGl2TGVuID4gMCAmJiBpICE9PSBtZF9idWYubGVuZ3RoKSB7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBpZiAoaXZMZW4gPT09IDApIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGlmIChpID09PSBtZF9idWYubGVuZ3RoKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBpdltpaSsrXSA9IG1kX2J1ZltpXVxuICAgICAgICBpdkxlbi0tXG4gICAgICAgIGkrK1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoa2V5TGVuID09PSAwICYmIGl2TGVuID09PSAwKSB7XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuICBmb3IgKGkgPSAwOyBpIDwgbWRfYnVmLmxlbmd0aDsgaSsrKSB7XG4gICAgbWRfYnVmW2ldID0gMFxuICB9XG4gIHJldHVybiB7XG4gICAga2V5OiBrZXksXG4gICAgaXY6IGl2XG4gIH1cbn1cbiJdfQ==
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","create-hash/md5":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/md5.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/streamCipher.js":[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')

inherits(StreamCipher, Transform)
module.exports = StreamCipher
function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  iv.copy(this._prev)
  this._mode = mode
}
StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}
StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9zdHJlYW1DaXBoZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG5pbmhlcml0cyhTdHJlYW1DaXBoZXIsIFRyYW5zZm9ybSlcbm1vZHVsZS5leHBvcnRzID0gU3RyZWFtQ2lwaGVyXG5mdW5jdGlvbiBTdHJlYW1DaXBoZXIgKG1vZGUsIGtleSwgaXYsIGRlY3J5cHQpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFN0cmVhbUNpcGhlcikpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihtb2RlLCBrZXksIGl2KVxuICB9XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IG5ldyBCdWZmZXIoaXYubGVuZ3RoKVxuICB0aGlzLl9jYWNoZSA9IG5ldyBCdWZmZXIoJycpXG4gIHRoaXMuX3NlY0NhY2hlID0gbmV3IEJ1ZmZlcignJylcbiAgdGhpcy5fZGVjcnlwdCA9IGRlY3J5cHRcbiAgaXYuY29weSh0aGlzLl9wcmV2KVxuICB0aGlzLl9tb2RlID0gbW9kZVxufVxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIHJldHVybiB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmssIHRoaXMuX2RlY3J5cHQpXG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fY2lwaGVyLnNjcnViKClcbn1cbiJdfQ==
},{"./aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/aes.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","cipher-base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/cipher-base/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/ofb.js":[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9vZmIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZnVuY3Rpb24gZ2V0QmxvY2sgKHNlbGYpIHtcbiAgc2VsZi5fcHJldiA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgcmV0dXJuIHNlbGYuX3ByZXZcbn1cblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rKSB7XG4gIHdoaWxlIChzZWxmLl9jYWNoZS5sZW5ndGggPCBjaHVuay5sZW5ndGgpIHtcbiAgICBzZWxmLl9jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3NlbGYuX2NhY2hlLCBnZXRCbG9jayhzZWxmKV0pXG4gIH1cblxuICB2YXIgcGFkID0gc2VsZi5fY2FjaGUuc2xpY2UoMCwgY2h1bmsubGVuZ3RoKVxuICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGNodW5rLmxlbmd0aClcbiAgcmV0dXJuIHhvcihjaHVuaywgcGFkKVxufVxuIl19
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/buffer-xor/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/ecb.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/ecb.js"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/ctr.js":[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}

function getBlock (self) {
  var out = self._cipher.encryptBlock(self._prev)
  incr32(self._prev)
  return out
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jdHIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZnVuY3Rpb24gaW5jcjMyIChpdikge1xuICB2YXIgbGVuID0gaXYubGVuZ3RoXG4gIHZhciBpdGVtXG4gIHdoaWxlIChsZW4tLSkge1xuICAgIGl0ZW0gPSBpdi5yZWFkVUludDgobGVuKVxuICAgIGlmIChpdGVtID09PSAyNTUpIHtcbiAgICAgIGl2LndyaXRlVUludDgoMCwgbGVuKVxuICAgIH0gZWxzZSB7XG4gICAgICBpdGVtKytcbiAgICAgIGl2LndyaXRlVUludDgoaXRlbSwgbGVuKVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QmxvY2sgKHNlbGYpIHtcbiAgdmFyIG91dCA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgaW5jcjMyKHNlbGYuX3ByZXYpXG4gIHJldHVybiBvdXRcbn1cblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rKSB7XG4gIHdoaWxlIChzZWxmLl9jYWNoZS5sZW5ndGggPCBjaHVuay5sZW5ndGgpIHtcbiAgICBzZWxmLl9jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3NlbGYuX2NhY2hlLCBnZXRCbG9jayhzZWxmKV0pXG4gIH1cbiAgdmFyIHBhZCA9IHNlbGYuX2NhY2hlLnNsaWNlKDAsIGNodW5rLmxlbmd0aClcbiAgc2VsZi5fY2FjaGUgPSBzZWxmLl9jYWNoZS5zbGljZShjaHVuay5sZW5ndGgpXG4gIHJldHVybiB4b3IoY2h1bmssIHBhZClcbn1cbiJdfQ==
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/buffer-xor/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb8.js":[function(require,module,exports){
(function (Buffer){
function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam
  self._prev = Buffer.concat([self._prev.slice(1), new Buffer([decrypt ? byteParam : out])])
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jZmI4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZW5jcnlwdEJ5dGUgKHNlbGYsIGJ5dGVQYXJhbSwgZGVjcnlwdCkge1xuICB2YXIgcGFkID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICB2YXIgb3V0ID0gcGFkWzBdIF4gYnl0ZVBhcmFtXG4gIHNlbGYuX3ByZXYgPSBCdWZmZXIuY29uY2F0KFtzZWxmLl9wcmV2LnNsaWNlKDEpLCBuZXcgQnVmZmVyKFtkZWNyeXB0ID8gYnl0ZVBhcmFtIDogb3V0XSldKVxuICByZXR1cm4gb3V0XG59XG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmssIGRlY3J5cHQpIHtcbiAgdmFyIGxlbiA9IGNodW5rLmxlbmd0aFxuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcihsZW4pXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIG91dFtpXSA9IGVuY3J5cHRCeXRlKHNlbGYsIGNodW5rW2ldLCBkZWNyeXB0KVxuICB9XG4gIHJldHVybiBvdXRcbn1cbiJdfQ==
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb1.js":[function(require,module,exports){
(function (Buffer){
function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}
function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = new Buffer(buffer.length)
  buffer = Buffer.concat([buffer, new Buffer([value])])
  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jZmIxLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBlbmNyeXB0Qnl0ZSAoc2VsZiwgYnl0ZVBhcmFtLCBkZWNyeXB0KSB7XG4gIHZhciBwYWRcbiAgdmFyIGkgPSAtMVxuICB2YXIgbGVuID0gOFxuICB2YXIgb3V0ID0gMFxuICB2YXIgYml0LCB2YWx1ZVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgcGFkID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICAgIGJpdCA9IChieXRlUGFyYW0gJiAoMSA8PCAoNyAtIGkpKSkgPyAweDgwIDogMFxuICAgIHZhbHVlID0gcGFkWzBdIF4gYml0XG4gICAgb3V0ICs9ICgodmFsdWUgJiAweDgwKSA+PiAoaSAlIDgpKVxuICAgIHNlbGYuX3ByZXYgPSBzaGlmdEluKHNlbGYuX3ByZXYsIGRlY3J5cHQgPyBiaXQgOiB2YWx1ZSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmssIGRlY3J5cHQpIHtcbiAgdmFyIGxlbiA9IGNodW5rLmxlbmd0aFxuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcihsZW4pXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIG91dFtpXSA9IGVuY3J5cHRCeXRlKHNlbGYsIGNodW5rW2ldLCBkZWNyeXB0KVxuICB9XG4gIHJldHVybiBvdXRcbn1cbmZ1bmN0aW9uIHNoaWZ0SW4gKGJ1ZmZlciwgdmFsdWUpIHtcbiAgdmFyIGxlbiA9IGJ1ZmZlci5sZW5ndGhcbiAgdmFyIGkgPSAtMVxuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcihidWZmZXIubGVuZ3RoKVxuICBidWZmZXIgPSBCdWZmZXIuY29uY2F0KFtidWZmZXIsIG5ldyBCdWZmZXIoW3ZhbHVlXSldKVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0W2ldID0gYnVmZmVyW2ldIDw8IDEgfCBidWZmZXJbaSArIDFdID4+ICg3KVxuICB9XG4gIHJldHVybiBvdXRcbn1cbiJdfQ==
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/cfb.js":[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

exports.encrypt = function (self, data, decrypt) {
  var out = new Buffer('')
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = new Buffer('')
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}
function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jZmIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGRhdGEsIGRlY3J5cHQpIHtcbiAgdmFyIG91dCA9IG5ldyBCdWZmZXIoJycpXG4gIHZhciBsZW5cblxuICB3aGlsZSAoZGF0YS5sZW5ndGgpIHtcbiAgICBpZiAoc2VsZi5fY2FjaGUubGVuZ3RoID09PSAwKSB7XG4gICAgICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgICAgIHNlbGYuX3ByZXYgPSBuZXcgQnVmZmVyKCcnKVxuICAgIH1cblxuICAgIGlmIChzZWxmLl9jYWNoZS5sZW5ndGggPD0gZGF0YS5sZW5ndGgpIHtcbiAgICAgIGxlbiA9IHNlbGYuX2NhY2hlLmxlbmd0aFxuICAgICAgb3V0ID0gQnVmZmVyLmNvbmNhdChbb3V0LCBlbmNyeXB0U3RhcnQoc2VsZiwgZGF0YS5zbGljZSgwLCBsZW4pLCBkZWNyeXB0KV0pXG4gICAgICBkYXRhID0gZGF0YS5zbGljZShsZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoW291dCwgZW5jcnlwdFN0YXJ0KHNlbGYsIGRhdGEsIGRlY3J5cHQpXSlcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuZnVuY3Rpb24gZW5jcnlwdFN0YXJ0IChzZWxmLCBkYXRhLCBkZWNyeXB0KSB7XG4gIHZhciBsZW4gPSBkYXRhLmxlbmd0aFxuICB2YXIgb3V0ID0geG9yKGRhdGEsIHNlbGYuX2NhY2hlKVxuICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGxlbilcbiAgc2VsZi5fcHJldiA9IEJ1ZmZlci5jb25jYXQoW3NlbGYuX3ByZXYsIGRlY3J5cHQgPyBkYXRhIDogb3V0XSlcbiAgcmV0dXJuIG91dFxufVxuIl19
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/buffer-xor/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes/cbc.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/cbc.js"][0].apply(exports,arguments)
},{"buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/buffer-xor/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/modes.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes.js"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/authCipher.js":[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')
var GHASH = require('./ghash')
var xor = require('buffer-xor')
inherits(StreamCipher, Transform)
module.exports = StreamCipher

function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._finID = Buffer.concat([iv, new Buffer([0, 0, 0, 1])])
  iv = Buffer.concat([iv, new Buffer([0, 0, 0, 2])])
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  iv.copy(this._prev)
  this._mode = mode
  var h = new Buffer(4)
  h.fill(0)
  this._ghash = new GHASH(this._cipher.encryptBlock(h))
  this._authTag = null
  this._called = false
}
StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = new Buffer(rump)
      rump.fill(0)
      this._ghash.update(rump)
    }
  }
  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}
StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) {
    throw new Error('Unsupported state or unable to authenticate data')
  }
  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt) {
    if (xorTest(tag, this._authTag)) {
      throw new Error('Unsupported state or unable to authenticate data')
    }
  } else {
    this._authTag = tag
  }
  this._cipher.scrub()
}
StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (!this._decrypt && Buffer.isBuffer(this._authTag)) {
    return this._authTag
  } else {
    throw new Error('Attempting to get auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (this._decrypt) {
    this._authTag = tag
  } else {
    throw new Error('Attempting to set auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (!this._called) {
    this._ghash.update(buf)
    this._alen += buf.length
  } else {
    throw new Error('Attempting to set AAD in unsupported state')
  }
}
function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) {
    out++
  }
  var len = Math.min(a.length, b.length)
  var i = -1
  while (++i < len) {
    out += (a[i] ^ b[i])
  }
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9hdXRoQ2lwaGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYWVzID0gcmVxdWlyZSgnLi9hZXMnKVxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBHSEFTSCA9IHJlcXVpcmUoJy4vZ2hhc2gnKVxudmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuaW5oZXJpdHMoU3RyZWFtQ2lwaGVyLCBUcmFuc2Zvcm0pXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmVhbUNpcGhlclxuXG5mdW5jdGlvbiBTdHJlYW1DaXBoZXIgKG1vZGUsIGtleSwgaXYsIGRlY3J5cHQpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFN0cmVhbUNpcGhlcikpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihtb2RlLCBrZXksIGl2KVxuICB9XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuX2ZpbklEID0gQnVmZmVyLmNvbmNhdChbaXYsIG5ldyBCdWZmZXIoWzAsIDAsIDAsIDFdKV0pXG4gIGl2ID0gQnVmZmVyLmNvbmNhdChbaXYsIG5ldyBCdWZmZXIoWzAsIDAsIDAsIDJdKV0pXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IG5ldyBCdWZmZXIoaXYubGVuZ3RoKVxuICB0aGlzLl9jYWNoZSA9IG5ldyBCdWZmZXIoJycpXG4gIHRoaXMuX3NlY0NhY2hlID0gbmV3IEJ1ZmZlcignJylcbiAgdGhpcy5fZGVjcnlwdCA9IGRlY3J5cHRcbiAgdGhpcy5fYWxlbiA9IDBcbiAgdGhpcy5fbGVuID0gMFxuICBpdi5jb3B5KHRoaXMuX3ByZXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG4gIHZhciBoID0gbmV3IEJ1ZmZlcig0KVxuICBoLmZpbGwoMClcbiAgdGhpcy5fZ2hhc2ggPSBuZXcgR0hBU0godGhpcy5fY2lwaGVyLmVuY3J5cHRCbG9jayhoKSlcbiAgdGhpcy5fYXV0aFRhZyA9IG51bGxcbiAgdGhpcy5fY2FsbGVkID0gZmFsc2Vcbn1cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChjaHVuaykge1xuICBpZiAoIXRoaXMuX2NhbGxlZCAmJiB0aGlzLl9hbGVuKSB7XG4gICAgdmFyIHJ1bXAgPSAxNiAtICh0aGlzLl9hbGVuICUgMTYpXG4gICAgaWYgKHJ1bXAgPCAxNikge1xuICAgICAgcnVtcCA9IG5ldyBCdWZmZXIocnVtcClcbiAgICAgIHJ1bXAuZmlsbCgwKVxuICAgICAgdGhpcy5fZ2hhc2gudXBkYXRlKHJ1bXApXG4gICAgfVxuICB9XG4gIHRoaXMuX2NhbGxlZCA9IHRydWVcbiAgdmFyIG91dCA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgaWYgKHRoaXMuX2RlY3J5cHQpIHtcbiAgICB0aGlzLl9naGFzaC51cGRhdGUoY2h1bmspXG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fZ2hhc2gudXBkYXRlKG91dClcbiAgfVxuICB0aGlzLl9sZW4gKz0gY2h1bmsubGVuZ3RoXG4gIHJldHVybiBvdXRcbn1cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5fZGVjcnlwdCAmJiAhdGhpcy5fYXV0aFRhZykge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgc3RhdGUgb3IgdW5hYmxlIHRvIGF1dGhlbnRpY2F0ZSBkYXRhJylcbiAgfVxuICB2YXIgdGFnID0geG9yKHRoaXMuX2doYXNoLmZpbmFsKHRoaXMuX2FsZW4gKiA4LCB0aGlzLl9sZW4gKiA4KSwgdGhpcy5fY2lwaGVyLmVuY3J5cHRCbG9jayh0aGlzLl9maW5JRCkpXG4gIGlmICh0aGlzLl9kZWNyeXB0KSB7XG4gICAgaWYgKHhvclRlc3QodGFnLCB0aGlzLl9hdXRoVGFnKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBzdGF0ZSBvciB1bmFibGUgdG8gYXV0aGVudGljYXRlIGRhdGEnKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9hdXRoVGFnID0gdGFnXG4gIH1cbiAgdGhpcy5fY2lwaGVyLnNjcnViKClcbn1cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuZ2V0QXV0aFRhZyA9IGZ1bmN0aW9uIGdldEF1dGhUYWcgKCkge1xuICBpZiAoIXRoaXMuX2RlY3J5cHQgJiYgQnVmZmVyLmlzQnVmZmVyKHRoaXMuX2F1dGhUYWcpKSB7XG4gICAgcmV0dXJuIHRoaXMuX2F1dGhUYWdcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRpbmcgdG8gZ2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbiAgfVxufVxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5zZXRBdXRoVGFnID0gZnVuY3Rpb24gc2V0QXV0aFRhZyAodGFnKSB7XG4gIGlmICh0aGlzLl9kZWNyeXB0KSB7XG4gICAgdGhpcy5fYXV0aFRhZyA9IHRhZ1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGluZyB0byBzZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxuICB9XG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLnNldEFBRCA9IGZ1bmN0aW9uIHNldEFBRCAoYnVmKSB7XG4gIGlmICghdGhpcy5fY2FsbGVkKSB7XG4gICAgdGhpcy5fZ2hhc2gudXBkYXRlKGJ1ZilcbiAgICB0aGlzLl9hbGVuICs9IGJ1Zi5sZW5ndGhcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRpbmcgdG8gc2V0IEFBRCBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG4gIH1cbn1cbmZ1bmN0aW9uIHhvclRlc3QgKGEsIGIpIHtcbiAgdmFyIG91dCA9IDBcbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgIG91dCsrXG4gIH1cbiAgdmFyIGxlbiA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aClcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0ICs9IChhW2ldIF4gYltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG4iXX0=
},{"./aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/aes.js","./ghash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/ghash.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/buffer-xor/index.js","cipher-base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/cipher-base/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/cipher-base/index.js":[function(require,module,exports){
(function (Buffer){
var Transform = require('stream').Transform
var inherits = require('inherits')
var StringDecoder = require('string_decoder').StringDecoder
module.exports = CipherBase
inherits(CipherBase, Transform)
function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  this._decoder = null
  this._encoding = null
}
CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = new Buffer(data, inputEnc)
  }
  var outData = this._update(data)
  if (this.hashMode) {
    return this
  }
  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }
  return outData
}

CipherBase.prototype.setAutoPadding = function () {}

CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this._final())
  } catch (e) {
    err = e
  } finally {
    done(err)
  }
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this._final() || new Buffer('')
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, final) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }
  if (this._encoding !== enc) {
    throw new Error('can\'t switch encodings')
  }
  var out = this._decoder.write(value)
  if (final) {
    out += this._decoder.end()
  }
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9ub2RlX21vZHVsZXMvY2lwaGVyLWJhc2UvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnc3RyZWFtJykuVHJhbnNmb3JtXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyJykuU3RyaW5nRGVjb2RlclxubW9kdWxlLmV4cG9ydHMgPSBDaXBoZXJCYXNlXG5pbmhlcml0cyhDaXBoZXJCYXNlLCBUcmFuc2Zvcm0pXG5mdW5jdGlvbiBDaXBoZXJCYXNlIChoYXNoTW9kZSkge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuICB0aGlzLmhhc2hNb2RlID0gdHlwZW9mIGhhc2hNb2RlID09PSAnc3RyaW5nJ1xuICBpZiAodGhpcy5oYXNoTW9kZSkge1xuICAgIHRoaXNbaGFzaE1vZGVdID0gdGhpcy5fZmluYWxPckRpZ2VzdFxuICB9IGVsc2Uge1xuICAgIHRoaXMuZmluYWwgPSB0aGlzLl9maW5hbE9yRGlnZXN0XG4gIH1cbiAgdGhpcy5fZGVjb2RlciA9IG51bGxcbiAgdGhpcy5fZW5jb2RpbmcgPSBudWxsXG59XG5DaXBoZXJCYXNlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSwgaW5wdXRFbmMsIG91dHB1dEVuYykge1xuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgZGF0YSA9IG5ldyBCdWZmZXIoZGF0YSwgaW5wdXRFbmMpXG4gIH1cbiAgdmFyIG91dERhdGEgPSB0aGlzLl91cGRhdGUoZGF0YSlcbiAgaWYgKHRoaXMuaGFzaE1vZGUpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG4gIGlmIChvdXRwdXRFbmMpIHtcbiAgICBvdXREYXRhID0gdGhpcy5fdG9TdHJpbmcob3V0RGF0YSwgb3V0cHV0RW5jKVxuICB9XG4gIHJldHVybiBvdXREYXRhXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEF1dG9QYWRkaW5nID0gZnVuY3Rpb24gKCkge31cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuZ2V0QXV0aFRhZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gZ2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QXV0aFRhZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gc2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QUFEID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBzZXQgYWFkIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChkYXRhLCBfLCBuZXh0KSB7XG4gIHZhciBlcnJcbiAgdHJ5IHtcbiAgICBpZiAodGhpcy5oYXNoTW9kZSkge1xuICAgICAgdGhpcy5fdXBkYXRlKGRhdGEpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHVzaCh0aGlzLl91cGRhdGUoZGF0YSkpXG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyID0gZVxuICB9IGZpbmFsbHkge1xuICAgIG5leHQoZXJyKVxuICB9XG59XG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fZmx1c2ggPSBmdW5jdGlvbiAoZG9uZSkge1xuICB2YXIgZXJyXG4gIHRyeSB7XG4gICAgdGhpcy5wdXNoKHRoaXMuX2ZpbmFsKCkpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnIgPSBlXG4gIH0gZmluYWxseSB7XG4gICAgZG9uZShlcnIpXG4gIH1cbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLl9maW5hbE9yRGlnZXN0ID0gZnVuY3Rpb24gKG91dHB1dEVuYykge1xuICB2YXIgb3V0RGF0YSA9IHRoaXMuX2ZpbmFsKCkgfHwgbmV3IEJ1ZmZlcignJylcbiAgaWYgKG91dHB1dEVuYykge1xuICAgIG91dERhdGEgPSB0aGlzLl90b1N0cmluZyhvdXREYXRhLCBvdXRwdXRFbmMsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG91dERhdGFcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX3RvU3RyaW5nID0gZnVuY3Rpb24gKHZhbHVlLCBlbmMsIGZpbmFsKSB7XG4gIGlmICghdGhpcy5fZGVjb2Rlcikge1xuICAgIHRoaXMuX2RlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihlbmMpXG4gICAgdGhpcy5fZW5jb2RpbmcgPSBlbmNcbiAgfVxuICBpZiAodGhpcy5fZW5jb2RpbmcgIT09IGVuYykge1xuICAgIHRocm93IG5ldyBFcnJvcignY2FuXFwndCBzd2l0Y2ggZW5jb2RpbmdzJylcbiAgfVxuICB2YXIgb3V0ID0gdGhpcy5fZGVjb2Rlci53cml0ZSh2YWx1ZSlcbiAgaWYgKGZpbmFsKSB7XG4gICAgb3V0ICs9IHRoaXMuX2RlY29kZXIuZW5kKClcbiAgfVxuICByZXR1cm4gb3V0XG59XG4iXX0=
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js","stream":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/stream-browserify/index.js","string_decoder":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/string_decoder/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/node_modules/buffer-xor/index.js":[function(require,module,exports){
(function (Buffer){
module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9ub2RlX21vZHVsZXMvYnVmZmVyLXhvci9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4b3IgKGEsIGIpIHtcbiAgdmFyIGxlbmd0aCA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aClcbiAgdmFyIGJ1ZmZlciA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBidWZmZXJbaV0gPSBhW2ldIF4gYltpXVxuICB9XG5cbiAgcmV0dXJuIGJ1ZmZlclxufVxuIl19
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/ghash.js":[function(require,module,exports){
(function (Buffer){
var zeros = new Buffer(16)
zeros.fill(0)
module.exports = GHASH
function GHASH (key) {
  this.h = key
  this.state = new Buffer(16)
  this.state.fill(0)
  this.cache = new Buffer('')
}
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsb_Vi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - i % 8))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi = xor(Zi, Vi)
    }

    // Store the value of LSB(V_i)
    lsb_Vi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsb_Vi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}
GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}
GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, zeros], 16))
  }
  this.ghash(fromArray([
    0, abl,
    0, bl
  ]))
  return this.state
}

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}
function fromArray (out) {
  out = out.map(fixup_uint32)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}
var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function xor (a, b) {
  return [
    a[0] ^ b[0],
    a[1] ^ b[1],
    a[2] ^ b[2],
    a[3] ^ b[3]
  ]
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9naGFzaC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgemVyb3MgPSBuZXcgQnVmZmVyKDE2KVxuemVyb3MuZmlsbCgwKVxubW9kdWxlLmV4cG9ydHMgPSBHSEFTSFxuZnVuY3Rpb24gR0hBU0ggKGtleSkge1xuICB0aGlzLmggPSBrZXlcbiAgdGhpcy5zdGF0ZSA9IG5ldyBCdWZmZXIoMTYpXG4gIHRoaXMuc3RhdGUuZmlsbCgwKVxuICB0aGlzLmNhY2hlID0gbmV3IEJ1ZmZlcignJylcbn1cbi8vIGZyb20gaHR0cDovL2JpdHdpc2VzaGlmdGxlZnQuZ2l0aHViLmlvL3NqY2wvZG9jL3N5bWJvbHMvc3JjL2NvcmVfZ2NtLmpzLmh0bWxcbi8vIGJ5IEp1aG8gVsOkaMOkLUhlcnR0dWFcbkdIQVNILnByb3RvdHlwZS5naGFzaCA9IGZ1bmN0aW9uIChibG9jaykge1xuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBibG9jay5sZW5ndGgpIHtcbiAgICB0aGlzLnN0YXRlW2ldIF49IGJsb2NrW2ldXG4gIH1cbiAgdGhpcy5fbXVsdGlwbHkoKVxufVxuXG5HSEFTSC5wcm90b3R5cGUuX211bHRpcGx5ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgVmkgPSB0b0FycmF5KHRoaXMuaClcbiAgdmFyIFppID0gWzAsIDAsIDAsIDBdXG4gIHZhciBqLCB4aSwgbHNiX1ZpXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IDEyOCkge1xuICAgIHhpID0gKHRoaXMuc3RhdGVbfn4oaSAvIDgpXSAmICgxIDw8ICg3IC0gaSAlIDgpKSkgIT09IDBcbiAgICBpZiAoeGkpIHtcbiAgICAgIC8vIFpfaSsxID0gWl9pIF4gVl9pXG4gICAgICBaaSA9IHhvcihaaSwgVmkpXG4gICAgfVxuXG4gICAgLy8gU3RvcmUgdGhlIHZhbHVlIG9mIExTQihWX2kpXG4gICAgbHNiX1ZpID0gKFZpWzNdICYgMSkgIT09IDBcblxuICAgIC8vIFZfaSsxID0gVl9pID4+IDFcbiAgICBmb3IgKGogPSAzOyBqID4gMDsgai0tKSB7XG4gICAgICBWaVtqXSA9IChWaVtqXSA+Pj4gMSkgfCAoKFZpW2ogLSAxXSAmIDEpIDw8IDMxKVxuICAgIH1cbiAgICBWaVswXSA9IFZpWzBdID4+PiAxXG5cbiAgICAvLyBJZiBMU0IoVl9pKSBpcyAxLCBWX2krMSA9IChWX2kgPj4gMSkgXiBSXG4gICAgaWYgKGxzYl9WaSkge1xuICAgICAgVmlbMF0gPSBWaVswXSBeICgweGUxIDw8IDI0KVxuICAgIH1cbiAgfVxuICB0aGlzLnN0YXRlID0gZnJvbUFycmF5KFppKVxufVxuR0hBU0gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChidWYpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIGJ1Zl0pXG4gIHZhciBjaHVua1xuICB3aGlsZSAodGhpcy5jYWNoZS5sZW5ndGggPj0gMTYpIHtcbiAgICBjaHVuayA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgdGhpcy5naGFzaChjaHVuaylcbiAgfVxufVxuR0hBU0gucHJvdG90eXBlLmZpbmFsID0gZnVuY3Rpb24gKGFibCwgYmwpIHtcbiAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoKSB7XG4gICAgdGhpcy5naGFzaChCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCB6ZXJvc10sIDE2KSlcbiAgfVxuICB0aGlzLmdoYXNoKGZyb21BcnJheShbXG4gICAgMCwgYWJsLFxuICAgIDAsIGJsXG4gIF0pKVxuICByZXR1cm4gdGhpcy5zdGF0ZVxufVxuXG5mdW5jdGlvbiB0b0FycmF5IChidWYpIHtcbiAgcmV0dXJuIFtcbiAgICBidWYucmVhZFVJbnQzMkJFKDApLFxuICAgIGJ1Zi5yZWFkVUludDMyQkUoNCksXG4gICAgYnVmLnJlYWRVSW50MzJCRSg4KSxcbiAgICBidWYucmVhZFVJbnQzMkJFKDEyKVxuICBdXG59XG5mdW5jdGlvbiBmcm9tQXJyYXkgKG91dCkge1xuICBvdXQgPSBvdXQubWFwKGZpeHVwX3VpbnQzMilcbiAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIoMTYpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFswXSwgMClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzFdLCA0KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMl0sIDgpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFszXSwgMTIpXG4gIHJldHVybiBidWZcbn1cbnZhciB1aW50X21heCA9IE1hdGgucG93KDIsIDMyKVxuZnVuY3Rpb24gZml4dXBfdWludDMyICh4KSB7XG4gIHZhciByZXQsIHhfcG9zXG4gIHJldCA9IHggPiB1aW50X21heCB8fCB4IDwgMCA/ICh4X3BvcyA9IE1hdGguYWJzKHgpICUgdWludF9tYXgsIHggPCAwID8gdWludF9tYXggLSB4X3BvcyA6IHhfcG9zKSA6IHhcbiAgcmV0dXJuIHJldFxufVxuZnVuY3Rpb24geG9yIChhLCBiKSB7XG4gIHJldHVybiBbXG4gICAgYVswXSBeIGJbMF0sXG4gICAgYVsxXSBeIGJbMV0sXG4gICAgYVsyXSBeIGJbMl0sXG4gICAgYVszXSBeIGJbM11cbiAgXVxufVxuIl19
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/browserify-aes/aes.js":[function(require,module,exports){
(function (Buffer){
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec

// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function scrub_vec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
  return false
}

function Global () {
  this.SBOX = []
  this.INV_SBOX = []
  this.SUB_MIX = [[], [], [], []]
  this.INV_SUB_MIX = [[], [], [], []]
  this.init()
  this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
}

Global.prototype.init = function () {
  var d, i, sx, t, x, x2, x4, x8, xi, _i
  d = (function () {
    var _i, _results
    _results = []
    for (i = _i = 0; _i < 256; i = ++_i) {
      if (i < 128) {
        _results.push(i << 1)
      } else {
        _results.push((i << 1) ^ 0x11b)
      }
    }
    return _results
  })()
  x = 0
  xi = 0
  for (i = _i = 0; _i < 256; i = ++_i) {
    sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    this.SBOX[x] = sx
    this.INV_SBOX[sx] = x
    x2 = d[x]
    x4 = d[x2]
    x8 = d[x4]
    t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    this.SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    this.SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    this.SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    this.SUB_MIX[3][x] = t
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    this.INV_SUB_MIX[3][sx] = t
    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }
  return true
}

var G = new Global()

AES.blockSize = 4 * 4

AES.prototype.blockSize = AES.blockSize

AES.keySize = 256 / 8

AES.prototype.keySize = AES.keySize

function bufferToArray (buf) {
  var len = buf.length / 4
  var out = new Array(len)
  var i = -1
  while (++i < len) {
    out[i] = buf.readUInt32BE(i * 4)
  }
  return out
}
function AES (key) {
  this._key = bufferToArray(key)
  this._doReset()
}

AES.prototype._doReset = function () {
  var invKsRow, keySize, keyWords, ksRow, ksRows, t
  keyWords = this._key
  keySize = keyWords.length
  this._nRounds = keySize + 6
  ksRows = (this._nRounds + 1) * 4
  this._keySchedule = []
  for (ksRow = 0; ksRow < ksRows; ksRow++) {
    this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t)
  }
  this._invKeySchedule = []
  for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {
    ksRow = ksRows - invKsRow
    t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)]
    this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]]
  }
  return true
}

AES.prototype.encryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var temp = [M[3], M[1]]
  M[1] = temp[0]
  M[3] = temp[1]
  var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrub_vec(this._keySchedule)
  scrub_vec(this._invKeySchedule)
  scrub_vec(this._key)
}

AES.prototype._doCryptBlock = function (M, keySchedule, SUB_MIX, SBOX) {
  var ksRow, s0, s1, s2, s3, t0, t1, t2, t3

  s0 = M[0] ^ keySchedule[0]
  s1 = M[1] ^ keySchedule[1]
  s2 = M[2] ^ keySchedule[2]
  s3 = M[3] ^ keySchedule[3]
  ksRow = 4
  for (var round = 1; round < this._nRounds; round++) {
    t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }
  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  return [
    fixup_uint32(t0),
    fixup_uint32(t1),
    fixup_uint32(t2),
    fixup_uint32(t3)
  ]
}

exports.AES = AES

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/asn1.js":[function(require,module,exports){
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.

var asn1 = require('asn1.js')

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})
var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey
var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})

},{"asn1.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js":[function(require,module,exports){
var asn1 = exports;

asn1.bignum = require('bn.js');

asn1.define = require('./asn1/api').define;
asn1.base = require('./asn1/base');
asn1.constants = require('./asn1/constants');
asn1.decoders = require('./asn1/decoders');
asn1.encoders = require('./asn1/encoders');

},{"./asn1/api":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/api.js","./asn1/base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/index.js","./asn1/constants":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/constants/index.js","./asn1/decoders":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/index.js","./asn1/encoders":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/index.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/bn.js/lib/bn.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/index.js":[function(require,module,exports){
var encoders = exports;

encoders.der = require('./der');
encoders.pem = require('./pem');

},{"./der":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/der.js","./pem":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/pem.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/pem.js":[function(require,module,exports){
var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var asn1 = require('../../asn1');
var DEREncoder = require('./der');

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  var buf = DEREncoder.prototype.encode.call(this, data);

  var p = buf.toString('base64');
  var out = [ '-----BEGIN ' + options.label + '-----' ];
  for (var i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};

},{"../../asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js","./der":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/der.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/encoders/der.js":[function(require,module,exports){
var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var asn1 = require('../../asn1');
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                              primitive,
                                                              cls,
                                                              content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  var lenOctets = 1;
  for (var i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'octstr')
    return this._createEncoderBuffer(str);
  else if (tag === 'bitstr')
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  else if (tag === 'ia5str' || tag === 'utf8str')
    return this._createEncoderBuffer(str);
  return this.reporter.error('Encoding of string type: ' + tag +
                             ' unsupported');
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s\.]+/g);
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  var size = 0;
  for (var i = 0; i < id.length; i++) {
    var ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;
  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    var numArray = num.toArray();
    if (num.sign === false && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0)
      size++;

    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  var size = 1;
  for (var i = num; i >= 0x100; i >>= 8)
    size++;

  var out = new Array(size);
  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null)
    return false;

  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  var res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}

},{"../../asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/index.js":[function(require,module,exports){
var decoders = exports;

decoders.der = require('./der');
decoders.pem = require('./pem');

},{"./der":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/der.js","./pem":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/pem.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/pem.js":[function(require,module,exports){
var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var asn1 = require('../../asn1');
var DERDecoder = require('./der');

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  var lines = data.toString().split(/[\r\n]+/g);

  var label = options.label.toUpperCase();

  var re = /^-----(BEGIN|END) ([^-]+)-----$/;
  var start = -1;
  var end = -1;
  for (var i = 0; i < lines.length; i++) {
    var match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  var base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9\+\/=]+/gi, '');

  var input = new Buffer(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};

},{"../../asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js","./der":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/der.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/decoders/der.js":[function(require,module,exports){
var inherits = require('inherits');

var asn1 = require('../../asn1');
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer))
    data = new base.DecoderBuffer(data, options);

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer,
                                'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  var len = derDecodeLen(buffer,
                         decodedTag.primitive,
                         'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  var state = buffer.save();
  var res = this._skipUntilEnd(
      buffer,
      'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    var res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len)
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder) {
  var result = [];
  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    var res = decoder.decode(buffer, 'der');
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;

    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'ia5str' || tag === 'utf8str') {
    return buffer.raw().toString();
  } else {
    return this.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var identifiers = [];
  var ident = 0;
  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  var first = (identifiers[0] / 40) | 0;
  var second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values)
    result = values[result.join(' ')];

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();
  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return this.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  var res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  var tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  var num = len & 0x7f;
  if (num >= 4)
    return buf.error('length octect is too long');

  len = 0;
  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}

},{"../../asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/constants/index.js":[function(require,module,exports){
var constants = exports;

// Helper
constants._reverse = function reverse(map) {
  var res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    var value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = require('./der');

},{"./der":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/constants/der.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/constants/der.js":[function(require,module,exports){
var constants = require('../constants');

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);

},{"../constants":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/constants/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/index.js":[function(require,module,exports){
var base = exports;

base.Reporter = require('./reporter').Reporter;
base.DecoderBuffer = require('./buffer').DecoderBuffer;
base.EncoderBuffer = require('./buffer').EncoderBuffer;
base.Node = require('./node');

},{"./buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/buffer.js","./node":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/node.js","./reporter":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/reporter.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/reporter.js":[function(require,module,exports){
var inherits = require('inherits');

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  var state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  var state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;

  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;

  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;

  var inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
};
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  Error.captureStackTrace(this, ReporterError);

  return this;
};

},{"inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/node.js":[function(require,module,exports){
var Reporter = require('../base').Reporter;
var EncoderBuffer = require('../base').EncoderBuffer;
var assert = require('minimalistic-assert');

// Supported tags
var tags = [
  'seq', 'seqof', 'set', 'setof', 'octstr', 'bitstr', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'ia5str', 'utf8str'
];

// Public methods list
var methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any'
].concat(tags);

// Overrided methods list
var overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;

  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

var stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit'
];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState;

  // Filter children and args
  var children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      var res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input));

  var result = state['default'];
  var present = true;

  var prevKey;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    var tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      var save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input);
        else
          this._decodeChoice(input);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  var prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      if (state.any)
        var save = input.save();
      var body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    // Select proper method for tag
    if (state.any)
      result = result;
    else if (state.choice === null)
      result = this._decodeGeneric(state.tag, input);
    else
      result = this._decodeChoice(input);

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      var fail = state.children.some(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input);
      });
      if (fail)
        return err;
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input) {
  var state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0]);
  else if (tag === 'octstr' || tag === 'bitstr')
    return this._decodeStr(input, tag);
  else if (tag === 'ia5str' || tag === 'utf8str')
    return this._decodeStr(input, tag);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1]);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag);
  else if (tag === 'null_')
    return this._decodeNull(input);
  else if (tag === 'bool')
    return this._decodeBool(input);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0]);
  else if (state.use !== null)
    return this._getUse(state.use, input._reporterState.obj)._decode(input);
  else
    return input.error('unknown tag: ' + tag);

  return null;
};

Node.prototype._getUse = function _getUse(entity, obj) {

  var state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input) {
  var state = this._baseState;
  var result = null;
  var match = false;

  Object.keys(state.choice).some(function(key) {
    var save = input.save();
    var node = state.choice[key];
    try {
      var value = node._decode(input);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  var result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  var result = null;
  var present = true;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default']
    else
      return;
  }

  // For error reporting
  var prevKey;

  // Encode children first
  var content = null;
  var primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });

    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        var state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  var result;
  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be ommited only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;

  var node = state.choice[data.type];
  if (!node) {
    assert(
        false,
        data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;

  if (tag === 'octstr' || tag === 'bitstr' || tag === 'ia5str')
    return this._encodeStr(data, tag);
  else if (tag === 'utf8str')
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else
    throw new Error('Unsupported tag: ' + tag);
};

},{"../base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/index.js","minimalistic-assert":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/node_modules/minimalistic-assert/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/node_modules/minimalistic-assert/index.js":[function(require,module,exports){
arguments[4]["/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/node_modules/minimalistic-assert/index.js"][0].apply(exports,arguments)
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/buffer.js":[function(require,module,exports){
var inherits = require('inherits');
var Reporter = require('../base').Reporter;
var Buffer = require('buffer').Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
}

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  var res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
}

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
}

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!(item instanceof EncoderBuffer))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = new Buffer(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

},{"../base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/base/index.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1/api.js":[function(require,module,exports){
var asn1 = require('../asn1');
var inherits = require('inherits');

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
};

Entity.prototype._createNamed = function createNamed(base) {
  var named;
  try {
    named = require('vm').runInThisContext(
      '(function ' + this.name + '(entity) {\n' +
      '  this._initNamed(entity);\n' +
      '})'
    );
  } catch (e) {
    named = function (entity) {
      this._initNamed(entity);
    };
  }
  inherits(named, base);
  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

},{"../asn1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/node_modules/asn1.js/lib/asn1.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js","vm":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/vm-browserify/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/vm-browserify/index.js":[function(require,module,exports){
var indexOf = require('indexof');

var Object_keys = function (obj) {
    if (Object.keys) return Object.keys(obj)
    else {
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    }
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = (function() {
    try {
        Object.defineProperty({}, '_', {});
        return function(obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            })
        };
    } catch(e) {
        return function(obj, name, value) {
            obj[name] = value;
        };
    }
}());

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript (code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }
    
    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';
    
    document.body.appendChild(iframe);
    
    var win = iframe.contentWindow;
    var wEval = win.eval, wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }
    
    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });
    
    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);
    
    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });
    
    document.body.removeChild(iframe);
    
    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    forEach(Object_keys(ctx), function (key) {
        context[key] = ctx[key];
    });

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if(typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};

},{"indexof":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/vm-browserify/node_modules/indexof/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/vm-browserify/node_modules/indexof/index.js":[function(require,module,exports){

var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/parse-asn1/aesid.json":[function(require,module,exports){
module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
}
},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic.js":[function(require,module,exports){
'use strict';

var elliptic = exports;

elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.hmacDRBG = require('./elliptic/hmac-drbg');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');

},{"../package.json":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/package.json","./elliptic/curve":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/index.js","./elliptic/curves":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curves.js","./elliptic/ec":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/ec/index.js","./elliptic/hmac-drbg":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/hmac-drbg.js","./elliptic/utils":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/utils.js","brorand":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/brorand/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/package.json":[function(require,module,exports){
module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports=module.exports={
  "name": "elliptic",
  "version": "3.1.0",
  "description": "EC cryptography",
  "main": "lib/elliptic.js",
  "scripts": {
    "test": "make lint && mocha --reporter=spec test/*-test.js"
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/indutny/elliptic.git"
  },
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "author": {
    "name": "Fedor Indutny",
    "email": "fedor@indutny.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "homepage": "https://github.com/indutny/elliptic",
  "devDependencies": {
    "browserify": "^3.44.2",
    "jscs": "^1.11.3",
    "jshint": "^2.6.0",
    "mocha": "^2.1.0",
    "uglify-js": "^2.4.13"
  },
  "dependencies": {
    "bn.js": "^2.0.3",
    "brorand": "^1.0.1",
    "hash.js": "^1.0.0",
    "inherits": "^2.0.1"
  },
  "gitHead": "d86cd2a8178f7e7cecbd6dd92eea084e2ab44c13",
  "_id": "elliptic@3.1.0",
  "_shasum": "c21682ef762769b56a74201609105da11d5f60cc",
  "_from": "elliptic@>=3.0.0 <4.0.0",
  "_npmVersion": "2.11.0",
  "_nodeVersion": "2.2.1",
  "_npmUser": {
    "name": "indutny",
    "email": "fedor@indutny.com"
  },
  "maintainers": [
    {
      "name": "indutny",
      "email": "fedor@indutny.com"
    }
  ],
  "dist": {
    "shasum": "c21682ef762769b56a74201609105da11d5f60cc",
    "tarball": "http://registry.npmjs.org/elliptic/-/elliptic-3.1.0.tgz"
  },
  "directories": {},
  "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-3.1.0.tgz",
  "readme": "ERROR: No README data found!"
}

},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/brorand/index.js":[function(require,module,exports){
var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

if (typeof window === 'object') {
  if (window.crypto && window.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      window.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (window.msCrypto && window.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      window.msCrypto.getRandomValues(arr);
      return arr;
    };
  } else {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker
  try {
    var crypto = require('cry' + 'pto');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
    // Emulate crypto API using randy
    Rand.prototype._rand = function _rand(n) {
      var res = new Uint8Array(n);
      for (var i = 0; i < res.length; i++)
        res[i] = this.rand.getByte();
      return res;
    };
  }
}

},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/utils.js":[function(require,module,exports){
'use strict';

var utils = exports;

utils.assert = function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
};

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (!enc) {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  } else if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

// Represent num in a w-NAF form
function getNAF(num, w) {
  var naf = [];
  var ws = 1 << (w + 1);
  var k = num.clone();
  while (k.cmpn(1) >= 0) {
    var z;
    if (k.isOdd()) {
      var mod = k.andln(ws - 1);
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }
    naf.push(z);

    // Optimization, shift by word if possible
    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
    for (var i = 1; i < shift; i++)
      naf.push(0);
    k.ishrn(shift);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.ishrn(1);
    k2.ishrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/hmac-drbg.js":[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var elliptic = require('../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this.reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc);
  var nonce = utils.toArray(options.nonce, options.nonceEnc);
  var pers = utils.toArray(options.pers, options.persEnc);
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this.reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toBuffer(entropy, entropyEnc);
  add = utils.toBuffer(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this.reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this.reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc);
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this.reseed++;
  return utils.encode(res, enc);
};

},{"../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic.js","hash.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/ec/index.js":[function(require,module,exports){
'use strict';

var bn = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = elliptic.curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof elliptic.curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.shrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new elliptic.hmacDRBG({
    hash: this.hash,
    pers: options.pers,
    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new bn(2));
  do {
    var priv = new bn(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.shrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new bn(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray();
  for (var i = bkey.length; i < 21; i++)
    bkey.unshift(0);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray();
  for (var i = nonce.length; i < bytes; i++)
    nonce.unshift(0);

  // Instantiate Hmac_DRBG
  var drbg = new elliptic.hmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new bn(1));
  do {
    var k = new bn(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.mod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg)).mod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0)
      s = this.n.sub(s);

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  } while (true);
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new bn(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).mod(this.n);
  var u2 = sinv.mul(r).mod(this.n);

  var p = this.g.mulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  return p.getX().mod(this.n).cmp(r) === 0;
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new bn(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.mod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  r = this.curve.pointFromX(isYOdd, r);
  var eNeg = e.neg().mod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  var rInv = signature.r.invm(n);
  return r.mul(s).add(this.g.mul(eNeg)).mul(rInv);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime = this.recoverPubKey(e, signature, i);

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"../../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic.js","./key":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/ec/key.js","./signature":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/ec/signature.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/bn.js/lib/bn.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/ec/signature.js":[function(require,module,exports){
'use strict';

var bn = require('bn.js');

var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new bn(options.r, 16);
  this.s = new bn(options.s, 16);
  if (options.recoveryParam !== null)
    this.recoveryParam = options.recoveryParam;
  else
    this.recoveryParam = null;
}
module.exports = Signature;

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  if (data.length < 6 || data[0] !== 0x30 || data[2] !== 0x02)
    return false;
  var total = data[1];
  if (1 + total > data.length)
    return false;
  var rlen = data[3];
  // Short length notation
  if (rlen >= 0x80)
    return false;
  if (4 + rlen + 2 >= data.length)
    return false;
  if (data[4 + rlen] !== 0x02)
    return false;
  var slen = data[5 + rlen];
  // Short length notation
  if (slen >= 0x80)
    return false;
  if (4 + rlen + 2 + slen > data.length)
    return false;

  this.r = new bn(data.slice(4, 4 + rlen));
  this.s = new bn(data.slice(4 + rlen + 2, 4 + rlen + 2 + slen));
  this.recoveryParam = null;

  return true;
};

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  var total = r.length + s.length + 4;
  var res = [ 0x30, total, 0x02, r.length ];
  res = res.concat(r, [ 0x02, s.length ], s);
  return utils.encode(res, enc);
};

},{"../../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/bn.js/lib/bn.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/ec/key.js":[function(require,module,exports){
'use strict';

var bn = require('bn.js');

var elliptic = require('../../elliptic');
var utils = elliptic.utils;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!enc)
    return this.pub;

  var len = this.ec.curve.p.byteLength();
  var x = this.pub.getX().toArray();

  for (var i = x.length; i < len; i++)
    x.unshift(0);

  var res;
  if (this.ec.curve.type !== 'mont') {
    if (compact) {
      res = [ this.pub.getY().isEven() ? 0x02 : 0x03 ].concat(x);
    } else {
      var y = this.pub.getY().toArray();
      for (var i = y.length; i < len; i++)
        y.unshift(0);
      var res = [ 0x04 ].concat(x, y);
    }
  } else {
    res = x;
  }

  return utils.encode(res, enc);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new bn(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.mod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }

  key = utils.toArray(key, enc);
  if (this.ec.curve.type !== 'mont')
    return this._importPublicShort(key);
  else
    return this._importPublicMont(key);
};

KeyPair.prototype._importPublicShort = function _importPublicShort(key) {
  var len = this.ec.curve.p.byteLength();
  if (key[0] === 0x04 && key.length - 1 === 2 * len) {
    this.pub = this.ec.curve.point(
      key.slice(1, 1 + len),
      key.slice(1 + len, 1 + 2 * len));
  } else if ((key[0] === 0x02 || key[0] === 0x03) && key.length - 1 === len) {
    this.pub = this.ec.curve.pointFromX(key[0] === 0x03, key.slice(1, 1 + len));
  }
};

KeyPair.prototype._importPublicMont = function _importPublicMont(key) {
  this.pub = this.ec.curve.point(key, 1);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg) {
  return this.ec.sign(msg, this);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"../../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/bn.js/lib/bn.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curves.js":[function(require,module,exports){
'use strict';

var curves = exports;

var hash = require('hash.js');
var elliptic = require('../elliptic');

var assert = elliptic.utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new elliptic.curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new elliptic.curve.edwards(options);
  else
    this.curve = new elliptic.curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ]
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ]
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ]
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '0',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

var pre;
try {
  pre = require('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre
  ]
});

},{"../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic.js","./precomputed/secp256k1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js","hash.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash.js":[function(require,module,exports){
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/common":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/common.js","./hash/hmac":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/hmac.js","./hash/ripemd":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/ripemd.js","./hash/sha":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/sha.js","./hash/utils":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/utils.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/utils.js":[function(require,module,exports){
var utils = exports;
var inherits = require('inherits');

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (var i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
utils.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
utils.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
utils.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
utils.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
utils.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
utils.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
utils.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
utils.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
utils.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
utils.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
utils.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
utils.sum32_5 = sum32_5;

function assert(cond, msg) {
  if (!cond)
    throw new Error(msg || 'Assertion failed');
}
utils.assert = assert;

utils.inherits = inherits;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
};
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
};
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
};
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
};
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
};
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
};
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
};
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
};
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
};
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
};
exports.shr64_lo = shr64_lo;

},{"inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/sha.js":[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

var rotr32 = utils.rotr32;
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;
var BlockHash = hash.common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [ 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
             0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
exports.sha256 = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [ 0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
             0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
exports.sha224 = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [ 0x6a09e667, 0xf3bcc908,
             0xbb67ae85, 0x84caa73b,
             0x3c6ef372, 0xfe94f82b,
             0xa54ff53a, 0x5f1d36f1,
             0x510e527f, 0xade682d1,
             0x9b05688c, 0x2b3e6c1f,
             0x1f83d9ab, 0xfb41bd6b,
             0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
exports.sha512 = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(c0_hi, c0_lo,
                      c1_hi, c1_lo,
                      c2_hi, c2_lo,
                      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(c0_hi, c0_lo,
                          c1_hi, c1_lo,
                          c2_hi, c2_lo,
                          c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(c0_hi, c0_lo,
                           c1_hi, c1_lo,
                           c2_hi, c2_lo,
                           c3_hi, c3_lo,
                           c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(c0_hi, c0_lo,
                           c1_hi, c1_lo,
                           c2_hi, c2_lo,
                           c3_hi, c3_lo,
                           c4_hi, c4_lo);

    var c0_hi = s0_512_hi(ah, al);
    var c0_lo = s0_512_lo(ah, al);
    var c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    var c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [ 0xcbbb9d5d, 0xc1059ed8,
             0x629a292a, 0x367cd507,
             0x9159015a, 0x3070dd17,
             0x152fecd8, 0xf70e5939,
             0x67332667, 0xffc00b31,
             0x8eb44a87, 0x68581511,
             0xdb0c2e0d, 0x64f98fa7,
             0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
exports.sha384 = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe,
             0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
exports.sha1 = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (var i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}

function p32(x, y, z) {
  return x ^ y ^ z;
}

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}

function ch64_hi(xh, xl, yh, yl, zh, zl) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh, zl) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/ripemd.js":[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = hash.common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"../hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/hmac.js":[function(require,module,exports){
var hmac = exports;

var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (var i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (var i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"../hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash/common.js":[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"../hash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/node_modules/hash.js/lib/hash.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js":[function(require,module,exports){
module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
      ]
    ]
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
      ]
    ]
  }
};

},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/index.js":[function(require,module,exports){
'use strict';

var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/base.js","./edwards":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/edwards.js","./mont":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/mont.js","./short":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/short.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/short.js":[function(require,module,exports){
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var bn = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var assert = elliptic.utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new bn(conf.a, 16).toRed(this.red);
  this.b = new bn(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new bn(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new bn(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new bn(vec.a, 16),
        b: new bn(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : bn.mont(num);
  var tinv = new bn(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.shrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new bn(1);
  var y1 = new bn(0);
  var x2 = new bn(0);
  var y2 = new bn(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.sign) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.sign) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(odd, x) {
  x = new bn(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.sign) {
      split.k1.sign = !split.k1.sign;
      p = p.neg(true);
    }
    if (split.k2.sign) {
      split.k2.sign = !split.k2.sign;
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new bn(x, 16);
    this.y = new bn(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new bn(k, 16);

  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new bn(0);
  } else {
    this.x = new bn(x, 16);
    this.y = new bn(y, 16);
    this.z = new bn(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new bn(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic.js","../curve":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/index.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/bn.js/lib/bn.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/mont.js":[function(require,module,exports){
'use strict';

var curve = require('../curve');
var bn = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new bn(conf.a, 16).toRed(this.red);
  this.b = new bn(conf.b, 16).toRed(this.red);
  this.i4 = new bn(4).toRed(this.red).redInvm();
  this.two = new bn(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new bn(x, 16);
    this.z = new bn(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.ishrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../curve":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/index.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/bn.js/lib/bn.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/edwards.js":[function(require,module,exports){
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var bn = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var assert = elliptic.utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new bn(conf.a, 16).mod(this.red.m).toRed(this.red);
  this.c = new bn(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new bn(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(odd, x) {
  x = new bn(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y = rhs.redMul(lhs.redInvm()).redSqrt();
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y, curve.one);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new bn(x, 16);
    this.y = new bn(y, 16);
    this.z = z ? new bn(z, 16) : this.curve.one;
    this.t = t && new bn(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
         this.y.cmp(this.z) === 0;
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic.js","../curve":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/index.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/bn.js/lib/bn.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic/curve/base.js":[function(require,module,exports){
'use strict';

var bn = require('bn.js');
var elliptic = require('../../elliptic');

var getNAF = elliptic.utils.getNAF;
var getJSF = elliptic.utils.getJSF;
var assert = elliptic.utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new bn(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);

  // Useful for many curves
  this.zero = new bn(0).toRed(this.red);
  this.one = new bn(1).toRed(this.red);
  this.two = new bn(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new bn(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a]);
      naf[b] = getNAF(coeffs[b], wndWidth[b]);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;
  return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"../../elliptic":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/elliptic/lib/elliptic.js","bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/bn.js/lib/bn.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/browserify-rsa/index.js":[function(require,module,exports){
(function (Buffer){
var bn = require('bn.js');
var randomBytes = require('randombytes');
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).mod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).mod(p);
  h.imul(q);
  m2.iadd(h);
  var out = new Buffer(m2.imul(blinds.unblinder).mod(priv.modulus).toArray());
  if (out.length < len) {
    var prefix = new Buffer(len - out.length);
    prefix.fill(0);
    out = Buffer.concat([prefix, out], len);
  }
  return out;
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.mod(priv.prime1) || !r.mod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}
}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXJzYS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBibiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgcmFuZG9tQnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpO1xubW9kdWxlLmV4cG9ydHMgPSBjcnQ7XG5mdW5jdGlvbiBibGluZChwcml2KSB7XG4gIHZhciByID0gZ2V0cihwcml2KTtcbiAgdmFyIGJsaW5kZXIgPSByLnRvUmVkKGJuLm1vbnQocHJpdi5tb2R1bHVzKSlcbiAgLnJlZFBvdyhuZXcgYm4ocHJpdi5wdWJsaWNFeHBvbmVudCkpLmZyb21SZWQoKTtcbiAgcmV0dXJuIHtcbiAgICBibGluZGVyOiBibGluZGVyLFxuICAgIHVuYmxpbmRlcjpyLmludm0ocHJpdi5tb2R1bHVzKVxuICB9O1xufVxuZnVuY3Rpb24gY3J0KG1zZywgcHJpdikge1xuICB2YXIgYmxpbmRzID0gYmxpbmQocHJpdik7XG4gIHZhciBsZW4gPSBwcml2Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICB2YXIgbW9kID0gYm4ubW9udChwcml2Lm1vZHVsdXMpO1xuICB2YXIgYmxpbmRlZCA9IG5ldyBibihtc2cpLm11bChibGluZHMuYmxpbmRlcikubW9kKHByaXYubW9kdWx1cyk7XG4gIHZhciBjMSA9IGJsaW5kZWQudG9SZWQoYm4ubW9udChwcml2LnByaW1lMSkpO1xuICB2YXIgYzIgPSBibGluZGVkLnRvUmVkKGJuLm1vbnQocHJpdi5wcmltZTIpKTtcbiAgdmFyIHFpbnYgPSBwcml2LmNvZWZmaWNpZW50O1xuICB2YXIgcCA9IHByaXYucHJpbWUxO1xuICB2YXIgcSA9IHByaXYucHJpbWUyO1xuICB2YXIgbTEgPSBjMS5yZWRQb3cocHJpdi5leHBvbmVudDEpO1xuICB2YXIgbTIgPSBjMi5yZWRQb3cocHJpdi5leHBvbmVudDIpO1xuICBtMSA9IG0xLmZyb21SZWQoKTtcbiAgbTIgPSBtMi5mcm9tUmVkKCk7XG4gIHZhciBoID0gbTEuaXN1YihtMikuaW11bChxaW52KS5tb2QocCk7XG4gIGguaW11bChxKTtcbiAgbTIuaWFkZChoKTtcbiAgdmFyIG91dCA9IG5ldyBCdWZmZXIobTIuaW11bChibGluZHMudW5ibGluZGVyKS5tb2QocHJpdi5tb2R1bHVzKS50b0FycmF5KCkpO1xuICBpZiAob3V0Lmxlbmd0aCA8IGxlbikge1xuICAgIHZhciBwcmVmaXggPSBuZXcgQnVmZmVyKGxlbiAtIG91dC5sZW5ndGgpO1xuICAgIHByZWZpeC5maWxsKDApO1xuICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoW3ByZWZpeCwgb3V0XSwgbGVuKTtcbiAgfVxuICByZXR1cm4gb3V0O1xufVxuY3J0LmdldHIgPSBnZXRyO1xuZnVuY3Rpb24gZ2V0cihwcml2KSB7XG4gIHZhciBsZW4gPSBwcml2Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICB2YXIgciA9IG5ldyBibihyYW5kb21CeXRlcyhsZW4pKTtcbiAgd2hpbGUgKHIuY21wKHByaXYubW9kdWx1cykgPj0gIDAgfHwgIXIubW9kKHByaXYucHJpbWUxKSB8fCAhci5tb2QocHJpdi5wcmltZTIpKSB7XG4gICAgciA9IG5ldyBibihyYW5kb21CeXRlcyhsZW4pKTtcbiAgfVxuICByZXR1cm4gcjtcbn0iXX0=
},{"bn.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/bn.js/lib/bn.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","randombytes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/randombytes/browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/randombytes/browser.js":[function(require,module,exports){
(function (process,global,Buffer){
'use strict';

var crypto = global.crypto || global.msCrypto
if(crypto && crypto.getRandomValues) {
  module.exports = randomBytes;
} else {
  module.exports = oldBrowser;
}
function randomBytes(size, cb) {
  var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
    /* This will not work in older browsers.
     * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
     */

  crypto.getRandomValues(bytes);
  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes);
    });
  }
  return bytes;
}
function oldBrowser() {
  throw new Error(
      'secure random number generation not supported by this browser\n'+
      'use chrome, FireFox or Internet Explorer 11'
    )
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcmFuZG9tYnl0ZXMvYnJvd3Nlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3J5cHRvID0gZ2xvYmFsLmNyeXB0byB8fCBnbG9iYWwubXNDcnlwdG9cbmlmKGNyeXB0byAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmFuZG9tQnl0ZXM7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IG9sZEJyb3dzZXI7XG59XG5mdW5jdGlvbiByYW5kb21CeXRlcyhzaXplLCBjYikge1xuICB2YXIgYnl0ZXMgPSBuZXcgQnVmZmVyKHNpemUpOyAvL2luIGJyb3dzZXJpZnksIHRoaXMgaXMgYW4gZXh0ZW5kZWQgVWludDhBcnJheVxuICAgIC8qIFRoaXMgd2lsbCBub3Qgd29yayBpbiBvbGRlciBicm93c2Vycy5cbiAgICAgKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL3dpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzXG4gICAgICovXG5cbiAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhieXRlcyk7XG4gIGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICBjYihudWxsLCBieXRlcyk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGJ5dGVzO1xufVxuZnVuY3Rpb24gb2xkQnJvd3NlcigpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ3NlY3VyZSByYW5kb20gbnVtYmVyIGdlbmVyYXRpb24gbm90IHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXJcXG4nK1xuICAgICAgJ3VzZSBjaHJvbWUsIEZpcmVGb3ggb3IgSW50ZXJuZXQgRXhwbG9yZXIgMTEnXG4gICAgKVxufVxuIl19
},{"_process":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/node_modules/bn.js/lib/bn.js":[function(require,module,exports){
(function (module, exports) {

'use strict';

// Utils

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

// Could use `inherits` module, but don't want to move from single file
// architecture yet.
function inherits(ctor, superCtor) {
  ctor.super_ = superCtor;
  var TempCtor = function () {};
  TempCtor.prototype = superCtor.prototype;
  ctor.prototype = new TempCtor();
  ctor.prototype.constructor = ctor;
}

// BN

function BN(number, base, endian) {
  // May be `new BN(bn)` ?
  if (number !== null &&
      typeof number === 'object' &&
      Array.isArray(number.words)) {
    return number;
  }

  this.sign = false;
  this.words = null;
  this.length = 0;

  // Reduction context
  this.red = null;

  if (base === 'le' || base === 'be') {
    endian = base;
    base = 10;
  }

  if (number !== null)
    this._init(number || 0, base || 10, endian || 'be');
}
if (typeof module === 'object')
  module.exports = BN;
else
  exports.BN = BN;

BN.BN = BN;
BN.wordSize = 26;

BN.prototype._init = function init(number, base, endian) {
  if (typeof number === 'number') {
    return this._initNumber(number, base, endian);
  } else if (typeof number === 'object') {
    return this._initArray(number, base, endian);
  }
  if (base === 'hex')
    base = 16;
  assert(base === (base | 0) && base >= 2 && base <= 36);

  number = number.toString().replace(/\s+/g, '');
  var start = 0;
  if (number[0] === '-')
    start++;

  if (base === 16)
    this._parseHex(number, start);
  else
    this._parseBase(number, base, start);

  if (number[0] === '-')
    this.sign = true;

  this.strip();

  if (endian !== 'le')
    return;

  this._initArray(this.toArray(), base, endian);
};

BN.prototype._initNumber = function _initNumber(number, base, endian) {
  if (number < 0) {
    this.sign = true;
    number = -number;
  }
  if (number < 0x4000000) {
    this.words = [ number & 0x3ffffff ];
    this.length = 1;
  } else if (number < 0x10000000000000) {
    this.words = [
      number & 0x3ffffff,
      (number / 0x4000000) & 0x3ffffff
    ];
    this.length = 2;
  } else {
    assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
    this.words = [
      number & 0x3ffffff,
      (number / 0x4000000) & 0x3ffffff,
      1
    ];
    this.length = 3;
  }

  if (endian !== 'le')
    return;

  // Reverse the bytes
  this._initArray(this.toArray(), base, endian);
};

BN.prototype._initArray = function _initArray(number, base, endian) {
  // Perhaps a Uint8Array
  assert(typeof number.length === 'number');
  if (number.length <= 0) {
    this.words = [ 0 ];
    this.length = 1;
    return this;
  }

  this.length = Math.ceil(number.length / 3);
  this.words = new Array(this.length);
  for (var i = 0; i < this.length; i++)
    this.words[i] = 0;

  var off = 0;
  if (endian === 'be') {
    for (var i = number.length - 1, j = 0; i >= 0; i -= 3) {
      var w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
  } else if (endian === 'le') {
    for (var i = 0, j = 0; i < number.length; i += 3) {
      var w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
  }
  return this.strip();
};

function parseHex(str, start, end) {
  var r = 0;
  var len = Math.min(str.length, end);
  for (var i = start; i < len; i++) {
    var c = str.charCodeAt(i) - 48;

    r <<= 4;

    // 'a' - 'f'
    if (c >= 49 && c <= 54)
      r |= c - 49 + 0xa;

    // 'A' - 'F'
    else if (c >= 17 && c <= 22)
      r |= c - 17 + 0xa;

    // '0' - '9'
    else
      r |= c & 0xf;
  }
  return r;
}

BN.prototype._parseHex = function _parseHex(number, start) {
  // Create possibly bigger array to ensure that it fits the number
  this.length = Math.ceil((number.length - start) / 6);
  this.words = new Array(this.length);
  for (var i = 0; i < this.length; i++)
    this.words[i] = 0;

  // Scan 24-bit chunks and add them to the number
  var off = 0;
  for (var i = number.length - 6, j = 0; i >= start; i -= 6) {
    var w = parseHex(number, i, i + 6);
    this.words[j] |= (w << off) & 0x3ffffff;
    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    off += 24;
    if (off >= 26) {
      off -= 26;
      j++;
    }
  }
  if (i + 6 !== start) {
    var w = parseHex(number, start, i + 6);
    this.words[j] |= (w << off) & 0x3ffffff;
    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
  }
  this.strip();
};

function parseBase(str, start, end, mul) {
  var r = 0;
  var len = Math.min(str.length, end);
  for (var i = start; i < len; i++) {
    var c = str.charCodeAt(i) - 48;

    r *= mul;

    // 'a'
    if (c >= 49)
      r += c - 49 + 0xa;

    // 'A'
    else if (c >= 17)
      r += c - 17 + 0xa;

    // '0' - '9'
    else
      r += c;
  }
  return r;
}

BN.prototype._parseBase = function _parseBase(number, base, start) {
  // Initialize as zero
  this.words = [ 0 ];
  this.length = 1;

  // Find length of limb in base
  for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)
    limbLen++;
  limbLen--;
  limbPow = (limbPow / base) | 0;

  var total = number.length - start;
  var mod = total % limbLen;
  var end = Math.min(total, total - mod) + start;

  var word = 0;
  for (var i = start; i < end; i += limbLen) {
    word = parseBase(number, i, i + limbLen, base);

    this.imuln(limbPow);
    if (this.words[0] + word < 0x4000000)
      this.words[0] += word;
    else
      this._iaddn(word);
  }

  if (mod !== 0) {
    var pow = 1;
    var word = parseBase(number, i, number.length, base);

    for (var i = 0; i < mod; i++)
      pow *= base;
    this.imuln(pow);
    if (this.words[0] + word < 0x4000000)
      this.words[0] += word;
    else
      this._iaddn(word);
  }
};

BN.prototype.copy = function copy(dest) {
  dest.words = new Array(this.length);
  for (var i = 0; i < this.length; i++)
    dest.words[i] = this.words[i];
  dest.length = this.length;
  dest.sign = this.sign;
  dest.red = this.red;
};

BN.prototype.clone = function clone() {
  var r = new BN(null);
  this.copy(r);
  return r;
};

// Remove leading `0` from `this`
BN.prototype.strip = function strip() {
  while (this.length > 1 && this.words[this.length - 1] === 0)
    this.length--;
  return this._normSign();
};

BN.prototype._normSign = function _normSign() {
  // -0 = 0
  if (this.length === 1 && this.words[0] === 0)
    this.sign = false;
  return this;
};

BN.prototype.inspect = function inspect() {
  return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
};

/*

var zeros = [];
var groupSizes = [];
var groupBases = [];

var s = '';
var i = -1;
while (++i < BN.wordSize) {
  zeros[i] = s;
  s += '0';
}
groupSizes[0] = 0;
groupSizes[1] = 0;
groupBases[0] = 0;
groupBases[1] = 0;
var base = 2 - 1;
while (++base < 36 + 1) {
  var groupSize = 0;
  var groupBase = 1;
  while (groupBase < (1 << BN.wordSize) / base) {
    groupBase *= base;
    groupSize += 1;
  }
  groupSizes[base] = groupSize;
  groupBases[base] = groupBase;
}

*/

var zeros = [
  '',
  '0',
  '00',
  '000',
  '0000',
  '00000',
  '000000',
  '0000000',
  '00000000',
  '000000000',
  '0000000000',
  '00000000000',
  '000000000000',
  '0000000000000',
  '00000000000000',
  '000000000000000',
  '0000000000000000',
  '00000000000000000',
  '000000000000000000',
  '0000000000000000000',
  '00000000000000000000',
  '000000000000000000000',
  '0000000000000000000000',
  '00000000000000000000000',
  '000000000000000000000000',
  '0000000000000000000000000'
];

var groupSizes = [
  0, 0,
  25, 16, 12, 11, 10, 9, 8,
  8, 7, 7, 7, 7, 6, 6,
  6, 6, 6, 6, 6, 5, 5,
  5, 5, 5, 5, 5, 5, 5,
  5, 5, 5, 5, 5, 5, 5
];

var groupBases = [
  0, 0,
  33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
  43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
  16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
  6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
  24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
];

BN.prototype.toString = function toString(base, padding) {
  base = base || 10;
  if (base === 16 || base === 'hex') {
    var out = '';
    var off = 0;
    var padding = padding | 0 || 1;
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = this.words[i];
      var word = (((w << off) | carry) & 0xffffff).toString(16);
      carry = (w >>> (24 - off)) & 0xffffff;
      if (carry !== 0 || i !== this.length - 1)
        out = zeros[6 - word.length] + word + out;
      else
        out = word + out;
      off += 2;
      if (off >= 26) {
        off -= 26;
        i--;
      }
    }
    if (carry !== 0)
      out = carry.toString(16) + out;
    while (out.length % padding !== 0)
      out = '0' + out;
    if (this.sign)
      out = '-' + out;
    return out;
  } else if (base === (base | 0) && base >= 2 && base <= 36) {
    // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
    var groupSize = groupSizes[base];
    // var groupBase = Math.pow(base, groupSize);
    var groupBase = groupBases[base];
    var out = '';
    var c = this.clone();
    c.sign = false;
    while (c.cmpn(0) !== 0) {
      var r = c.modn(groupBase).toString(base);
      c = c.idivn(groupBase);

      if (c.cmpn(0) !== 0)
        out = zeros[groupSize - r.length] + r + out;
      else
        out = r + out;
    }
    if (this.cmpn(0) === 0)
      out = '0' + out;
    if (this.sign)
      out = '-' + out;
    return out;
  } else {
    assert(false, 'Base should be between 2 and 36');
  }
};

BN.prototype.toJSON = function toJSON() {
  return this.toString(16);
};

BN.prototype.toArray = function toArray(endian) {
  this.strip();
  var res = new Array(this.byteLength());
  res[0] = 0;

  var q = this.clone();
  if (endian !== 'le') {
    // Assume big-endian
    for (var i = 0; q.cmpn(0) !== 0; i++) {
      var b = q.andln(0xff);
      q.ishrn(8);

      res[res.length - i - 1] = b;
    }
  } else {
    // Assume little-endian
    for (var i = 0; q.cmpn(0) !== 0; i++) {
      var b = q.andln(0xff);
      q.ishrn(8);

      res[i] = b;
    }
  }

  return res;
};

if (Math.clz32) {
  BN.prototype._countBits = function _countBits(w) {
    return 32 - Math.clz32(w);
  };
} else {
  BN.prototype._countBits = function _countBits(w) {
    var t = w;
    var r = 0;
    if (t >= 0x1000) {
      r += 13;
      t >>>= 13;
    }
    if (t >= 0x40) {
      r += 7;
      t >>>= 7;
    }
    if (t >= 0x8) {
      r += 4;
      t >>>= 4;
    }
    if (t >= 0x02) {
      r += 2;
      t >>>= 2;
    }
    return r + t;
  };
}

BN.prototype._zeroBits = function _zeroBits(w) {
  // Short-cut
  if (w === 0)
    return 26;

  var t = w;
  var r = 0;
  if ((t & 0x1fff) === 0) {
    r += 13;
    t >>>= 13;
  }
  if ((t & 0x7f) === 0) {
    r += 7;
    t >>>= 7;
  }
  if ((t & 0xf) === 0) {
    r += 4;
    t >>>= 4;
  }
  if ((t & 0x3) === 0) {
    r += 2;
    t >>>= 2;
  }
  if ((t & 0x1) === 0)
    r++;
  return r;
};

// Return number of used bits in a BN
BN.prototype.bitLength = function bitLength() {
  var hi = 0;
  var w = this.words[this.length - 1];
  var hi = this._countBits(w);
  return (this.length - 1) * 26 + hi;
};

// Number of trailing zero bits
BN.prototype.zeroBits = function zeroBits() {
  if (this.cmpn(0) === 0)
    return 0;

  var r = 0;
  for (var i = 0; i < this.length; i++) {
    var b = this._zeroBits(this.words[i]);
    r += b;
    if (b !== 26)
      break;
  }
  return r;
};

BN.prototype.byteLength = function byteLength() {
  return Math.ceil(this.bitLength() / 8);
};

// Return negative clone of `this`
BN.prototype.neg = function neg() {
  if (this.cmpn(0) === 0)
    return this.clone();

  var r = this.clone();
  r.sign = !this.sign;
  return r;
};


// Or `num` with `this` in-place
BN.prototype.ior = function ior(num) {
  this.sign = this.sign || num.sign;

  while (this.length < num.length)
    this.words[this.length++] = 0;

  for (var i = 0; i < num.length; i++)
    this.words[i] = this.words[i] | num.words[i];

  return this.strip();
};


// Or `num` with `this`
BN.prototype.or = function or(num) {
  if (this.length > num.length)
    return this.clone().ior(num);
  else
    return num.clone().ior(this);
};


// And `num` with `this` in-place
BN.prototype.iand = function iand(num) {
  this.sign = this.sign && num.sign;

  // b = min-length(num, this)
  var b;
  if (this.length > num.length)
    b = num;
  else
    b = this;

  for (var i = 0; i < b.length; i++)
    this.words[i] = this.words[i] & num.words[i];

  this.length = b.length;

  return this.strip();
};


// And `num` with `this`
BN.prototype.and = function and(num) {
  if (this.length > num.length)
    return this.clone().iand(num);
  else
    return num.clone().iand(this);
};


// Xor `num` with `this` in-place
BN.prototype.ixor = function ixor(num) {
  this.sign = this.sign || num.sign;

  // a.length > b.length
  var a;
  var b;
  if (this.length > num.length) {
    a = this;
    b = num;
  } else {
    a = num;
    b = this;
  }

  for (var i = 0; i < b.length; i++)
    this.words[i] = a.words[i] ^ b.words[i];

  if (this !== a)
    for (; i < a.length; i++)
      this.words[i] = a.words[i];

  this.length = a.length;

  return this.strip();
};


// Xor `num` with `this`
BN.prototype.xor = function xor(num) {
  if (this.length > num.length)
    return this.clone().ixor(num);
  else
    return num.clone().ixor(this);
};


// Set `bit` of `this`
BN.prototype.setn = function setn(bit, val) {
  assert(typeof bit === 'number' && bit >= 0);

  var off = (bit / 26) | 0;
  var wbit = bit % 26;

  while (this.length <= off)
    this.words[this.length++] = 0;

  if (val)
    this.words[off] = this.words[off] | (1 << wbit);
  else
    this.words[off] = this.words[off] & ~(1 << wbit);

  return this.strip();
};


// Add `num` to `this` in-place
BN.prototype.iadd = function iadd(num) {
  // negative + positive
  if (this.sign && !num.sign) {
    this.sign = false;
    var r = this.isub(num);
    this.sign = !this.sign;
    return this._normSign();

  // positive + negative
  } else if (!this.sign && num.sign) {
    num.sign = false;
    var r = this.isub(num);
    num.sign = true;
    return r._normSign();
  }

  // a.length > b.length
  var a;
  var b;
  if (this.length > num.length) {
    a = this;
    b = num;
  } else {
    a = num;
    b = this;
  }

  var carry = 0;
  for (var i = 0; i < b.length; i++) {
    var r = a.words[i] + b.words[i] + carry;
    this.words[i] = r & 0x3ffffff;
    carry = r >>> 26;
  }
  for (; carry !== 0 && i < a.length; i++) {
    var r = a.words[i] + carry;
    this.words[i] = r & 0x3ffffff;
    carry = r >>> 26;
  }

  this.length = a.length;
  if (carry !== 0) {
    this.words[this.length] = carry;
    this.length++;
  // Copy the rest of the words
  } else if (a !== this) {
    for (; i < a.length; i++)
      this.words[i] = a.words[i];
  }

  return this;
};

// Add `num` to `this`
BN.prototype.add = function add(num) {
  if (num.sign && !this.sign) {
    num.sign = false;
    var res = this.sub(num);
    num.sign = true;
    return res;
  } else if (!num.sign && this.sign) {
    this.sign = false;
    var res = num.sub(this);
    this.sign = true;
    return res;
  }

  if (this.length > num.length)
    return this.clone().iadd(num);
  else
    return num.clone().iadd(this);
};

// Subtract `num` from `this` in-place
BN.prototype.isub = function isub(num) {
  // this - (-num) = this + num
  if (num.sign) {
    num.sign = false;
    var r = this.iadd(num);
    num.sign = true;
    return r._normSign();

  // -this - num = -(this + num)
  } else if (this.sign) {
    this.sign = false;
    this.iadd(num);
    this.sign = true;
    return this._normSign();
  }

  // At this point both numbers are positive
  var cmp = this.cmp(num);

  // Optimization - zeroify
  if (cmp === 0) {
    this.sign = false;
    this.length = 1;
    this.words[0] = 0;
    return this;
  }

  // a > b
  var a;
  var b;
  if (cmp > 0) {
    a = this;
    b = num;
  } else {
    a = num;
    b = this;
  }

  var carry = 0;
  for (var i = 0; i < b.length; i++) {
    var r = a.words[i] - b.words[i] + carry;
    carry = r >> 26;
    this.words[i] = r & 0x3ffffff;
  }
  for (; carry !== 0 && i < a.length; i++) {
    var r = a.words[i] + carry;
    carry = r >> 26;
    this.words[i] = r & 0x3ffffff;
  }

  // Copy rest of the words
  if (carry === 0 && i < a.length && a !== this)
    for (; i < a.length; i++)
      this.words[i] = a.words[i];
  this.length = Math.max(this.length, i);

  if (a !== this)
    this.sign = true;

  return this.strip();
};

// Subtract `num` from `this`
BN.prototype.sub = function sub(num) {
  return this.clone().isub(num);
};

/*
// NOTE: This could be potentionally used to generate loop-less multiplications
function _genCombMulTo(alen, blen) {
  var len = alen + blen - 1;
  var src = [
    'var a = this.words, b = num.words, o = out.words, c = 0, w, ' +
        'mask = 0x3ffffff, shift = 0x4000000;',
    'out.length = ' + len + ';'
  ];
  for (var k = 0; k < len; k++) {
    var minJ = Math.max(0, k - alen + 1);
    var maxJ = Math.min(k, blen - 1);

    for (var j = minJ; j <= maxJ; j++) {
      var i = k - j;
      var mul = 'a[' + i + '] * b[' + j + ']';

      if (j === minJ) {
        src.push('w = ' + mul + ' + c;');
        src.push('c = (w / shift) | 0;');
      } else {
        src.push('w += ' + mul + ';');
        src.push('c += (w / shift) | 0;');
      }
      src.push('w &= mask;');
    }
    src.push('o[' + k + '] = w;');
  }
  src.push('if (c !== 0) {',
           '  o[' + k + '] = c;',
           '  out.length++;',
           '}',
           'return out;');

  return src.join('\n');
}
*/

BN.prototype._smallMulTo = function _smallMulTo(num, out) {
  out.sign = num.sign !== this.sign;
  out.length = this.length + num.length;

  var carry = 0;
  for (var k = 0; k < out.length - 1; k++) {
    // Sum all words with the same `i + j = k` and accumulate `ncarry`,
    // note that ncarry could be >= 0x3ffffff
    var ncarry = carry >>> 26;
    var rword = carry & 0x3ffffff;
    var maxJ = Math.min(k, num.length - 1);
    for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {
      var i = k - j;
      var a = this.words[i] | 0;
      var b = num.words[j] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
      lo = (lo + rword) | 0;
      rword = lo & 0x3ffffff;
      ncarry = (ncarry + (lo >>> 26)) | 0;
    }
    out.words[k] = rword;
    carry = ncarry;
  }
  if (carry !== 0) {
    out.words[k] = carry;
  } else {
    out.length--;
  }

  return out.strip();
};

BN.prototype._bigMulTo = function _bigMulTo(num, out) {
  out.sign = num.sign !== this.sign;
  out.length = this.length + num.length;

  var carry = 0;
  var hncarry = 0;
  for (var k = 0; k < out.length - 1; k++) {
    // Sum all words with the same `i + j = k` and accumulate `ncarry`,
    // note that ncarry could be >= 0x3ffffff
    var ncarry = hncarry;
    hncarry = 0;
    var rword = carry & 0x3ffffff;
    var maxJ = Math.min(k, num.length - 1);
    for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {
      var i = k - j;
      var a = this.words[i] | 0;
      var b = num.words[j] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
      lo = (lo + rword) | 0;
      rword = lo & 0x3ffffff;
      ncarry = (ncarry + (lo >>> 26)) | 0;

      hncarry += ncarry >>> 26;
      ncarry &= 0x3ffffff;
    }
    out.words[k] = rword;
    carry = ncarry;
    ncarry = hncarry;
  }
  if (carry !== 0) {
    out.words[k] = carry;
  } else {
    out.length--;
  }

  return out.strip();
};

BN.prototype.mulTo = function mulTo(num, out) {
  var res;
  if (this.length + num.length < 63)
    res = this._smallMulTo(num, out);
  else
    res = this._bigMulTo(num, out);
  return res;
};

// Multiply `this` by `num`
BN.prototype.mul = function mul(num) {
  var out = new BN(null);
  out.words = new Array(this.length + num.length);
  return this.mulTo(num, out);
};

// In-place Multiplication
BN.prototype.imul = function imul(num) {
  if (this.cmpn(0) === 0 || num.cmpn(0) === 0) {
    this.words[0] = 0;
    this.length = 1;
    return this;
  }

  var tlen = this.length;
  var nlen = num.length;

  this.sign = num.sign !== this.sign;
  this.length = this.length + num.length;
  this.words[this.length - 1] = 0;

  for (var k = this.length - 2; k >= 0; k--) {
    // Sum all words with the same `i + j = k` and accumulate `carry`,
    // note that carry could be >= 0x3ffffff
    var carry = 0;
    var rword = 0;
    var maxJ = Math.min(k, nlen - 1);
    for (var j = Math.max(0, k - tlen + 1); j <= maxJ; j++) {
      var i = k - j;
      var a = this.words[i];
      var b = num.words[j];
      var r = a * b;

      var lo = r & 0x3ffffff;
      carry += (r / 0x4000000) | 0;
      lo += rword;
      rword = lo & 0x3ffffff;
      carry += lo >>> 26;
    }
    this.words[k] = rword;
    this.words[k + 1] += carry;
    carry = 0;
  }

  // Propagate overflows
  var carry = 0;
  for (var i = 1; i < this.length; i++) {
    var w = this.words[i] + carry;
    this.words[i] = w & 0x3ffffff;
    carry = w >>> 26;
  }

  return this.strip();
};

BN.prototype.imuln = function imuln(num) {
  assert(typeof num === 'number');

  // Carry
  var carry = 0;
  for (var i = 0; i < this.length; i++) {
    var w = this.words[i] * num;
    var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
    carry >>= 26;
    carry += (w / 0x4000000) | 0;
    // NOTE: lo is 27bit maximum
    carry += lo >>> 26;
    this.words[i] = lo & 0x3ffffff;
  }

  if (carry !== 0) {
    this.words[i] = carry;
    this.length++;
  }

  return this;
};

BN.prototype.muln = function muln(num) {
  return this.clone().imuln(num);
};

// `this` * `this`
BN.prototype.sqr = function sqr() {
  return this.mul(this);
};

// `this` * `this` in-place
BN.prototype.isqr = function isqr() {
  return this.mul(this);
};

// Shift-left in-place
BN.prototype.ishln = function ishln(bits) {
  assert(typeof bits === 'number' && bits >= 0);
  var r = bits % 26;
  var s = (bits - r) / 26;
  var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);

  if (r !== 0) {
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var newCarry = this.words[i] & carryMask;
      var c = (this.words[i] - newCarry) << r;
      this.words[i] = c | carry;
      carry = newCarry >>> (26 - r);
    }
    if (carry) {
      this.words[i] = carry;
      this.length++;
    }
  }

  if (s !== 0) {
    for (var i = this.length - 1; i >= 0; i--)
      this.words[i + s] = this.words[i];
    for (var i = 0; i < s; i++)
      this.words[i] = 0;
    this.length += s;
  }

  return this.strip();
};

// Shift-right in-place
// NOTE: `hint` is a lowest bit before trailing zeroes
// NOTE: if `extended` is present - it will be filled with destroyed bits
BN.prototype.ishrn = function ishrn(bits, hint, extended) {
  assert(typeof bits === 'number' && bits >= 0);
  var h;
  if (hint)
    h = (hint - (hint % 26)) / 26;
  else
    h = 0;

  var r = bits % 26;
  var s = Math.min((bits - r) / 26, this.length);
  var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
  var maskedWords = extended;

  h -= s;
  h = Math.max(0, h);

  // Extended mode, copy masked part
  if (maskedWords) {
    for (var i = 0; i < s; i++)
      maskedWords.words[i] = this.words[i];
    maskedWords.length = s;
  }

  if (s === 0) {
    // No-op, we should not move anything at all
  } else if (this.length > s) {
    this.length -= s;
    for (var i = 0; i < this.length; i++)
      this.words[i] = this.words[i + s];
  } else {
    this.words[0] = 0;
    this.length = 1;
  }

  var carry = 0;
  for (var i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
    var word = this.words[i];
    this.words[i] = (carry << (26 - r)) | (word >>> r);
    carry = word & mask;
  }

  // Push carried bits as a mask
  if (maskedWords && carry !== 0)
    maskedWords.words[maskedWords.length++] = carry;

  if (this.length === 0) {
    this.words[0] = 0;
    this.length = 1;
  }

  this.strip();

  return this;
};

// Shift-left
BN.prototype.shln = function shln(bits) {
  return this.clone().ishln(bits);
};

// Shift-right
BN.prototype.shrn = function shrn(bits) {
  return this.clone().ishrn(bits);
};

// Test if n bit is set
BN.prototype.testn = function testn(bit) {
  assert(typeof bit === 'number' && bit >= 0);
  var r = bit % 26;
  var s = (bit - r) / 26;
  var q = 1 << r;

  // Fast case: bit is much higher than all existing words
  if (this.length <= s) {
    return false;
  }

  // Check bit and return
  var w = this.words[s];

  return !!(w & q);
};

// Return only lowers bits of number (in-place)
BN.prototype.imaskn = function imaskn(bits) {
  assert(typeof bits === 'number' && bits >= 0);
  var r = bits % 26;
  var s = (bits - r) / 26;

  assert(!this.sign, 'imaskn works only with positive numbers');

  if (r !== 0)
    s++;
  this.length = Math.min(s, this.length);

  if (r !== 0) {
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    this.words[this.length - 1] &= mask;
  }

  return this.strip();
};

// Return only lowers bits of number
BN.prototype.maskn = function maskn(bits) {
  return this.clone().imaskn(bits);
};

// Add plain number `num` to `this`
BN.prototype.iaddn = function iaddn(num) {
  assert(typeof num === 'number');
  if (num < 0)
    return this.isubn(-num);

  // Possible sign change
  if (this.sign) {
    if (this.length === 1 && this.words[0] < num) {
      this.words[0] = num - this.words[0];
      this.sign = false;
      return this;
    }

    this.sign = false;
    this.isubn(num);
    this.sign = true;
    return this;
  }

  // Add without checks
  return this._iaddn(num);
};

BN.prototype._iaddn = function _iaddn(num) {
  this.words[0] += num;

  // Carry
  for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
    this.words[i] -= 0x4000000;
    if (i === this.length - 1)
      this.words[i + 1] = 1;
    else
      this.words[i + 1]++;
  }
  this.length = Math.max(this.length, i + 1);

  return this;
};

// Subtract plain number `num` from `this`
BN.prototype.isubn = function isubn(num) {
  assert(typeof num === 'number');
  if (num < 0)
    return this.iaddn(-num);

  if (this.sign) {
    this.sign = false;
    this.iaddn(num);
    this.sign = true;
    return this;
  }

  this.words[0] -= num;

  // Carry
  for (var i = 0; i < this.length && this.words[i] < 0; i++) {
    this.words[i] += 0x4000000;
    this.words[i + 1] -= 1;
  }

  return this.strip();
};

BN.prototype.addn = function addn(num) {
  return this.clone().iaddn(num);
};

BN.prototype.subn = function subn(num) {
  return this.clone().isubn(num);
};

BN.prototype.iabs = function iabs() {
  this.sign = false;

  return this;
};

BN.prototype.abs = function abs() {
  return this.clone().iabs();
};

BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
  // Bigger storage is needed
  var len = num.length + shift;
  var i;
  if (this.words.length < len) {
    var t = new Array(len);
    for (var i = 0; i < this.length; i++)
      t[i] = this.words[i];
    this.words = t;
  } else {
    i = this.length;
  }

  // Zeroify rest
  this.length = Math.max(this.length, len);
  for (; i < this.length; i++)
    this.words[i] = 0;

  var carry = 0;
  for (var i = 0; i < num.length; i++) {
    var w = this.words[i + shift] + carry;
    var right = num.words[i] * mul;
    w -= right & 0x3ffffff;
    carry = (w >> 26) - ((right / 0x4000000) | 0);
    this.words[i + shift] = w & 0x3ffffff;
  }
  for (; i < this.length - shift; i++) {
    var w = this.words[i + shift] + carry;
    carry = w >> 26;
    this.words[i + shift] = w & 0x3ffffff;
  }

  if (carry === 0)
    return this.strip();

  // Subtraction overflow
  assert(carry === -1);
  carry = 0;
  for (var i = 0; i < this.length; i++) {
    var w = -this.words[i] + carry;
    carry = w >> 26;
    this.words[i] = w & 0x3ffffff;
  }
  this.sign = true;

  return this.strip();
};

BN.prototype._wordDiv = function _wordDiv(num, mode) {
  var shift = this.length - num.length;

  var a = this.clone();
  var b = num;

  // Normalize
  var bhi = b.words[b.length - 1];
  var bhiBits = this._countBits(bhi);
  shift = 26 - bhiBits;
  if (shift !== 0) {
    b = b.shln(shift);
    a.ishln(shift);
    bhi = b.words[b.length - 1];
  }

  // Initialize quotient
  var m = a.length - b.length;
  var q;

  if (mode !== 'mod') {
    q = new BN(null);
    q.length = m + 1;
    q.words = new Array(q.length);
    for (var i = 0; i < q.length; i++)
      q.words[i] = 0;
  }

  var diff = a.clone()._ishlnsubmul(b, 1, m);
  if (!diff.sign) {
    a = diff;
    if (q)
      q.words[m] = 1;
  }

  for (var j = m - 1; j >= 0; j--) {
    var qj = a.words[b.length + j] * 0x4000000 + a.words[b.length + j - 1];

    // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
    // (0x7ffffff)
    qj = Math.min((qj / bhi) | 0, 0x3ffffff);

    a._ishlnsubmul(b, qj, j);
    while (a.sign) {
      qj--;
      a.sign = false;
      a._ishlnsubmul(b, 1, j);
      if (a.cmpn(0) !== 0)
        a.sign = !a.sign;
    }
    if (q)
      q.words[j] = qj;
  }
  if (q)
    q.strip();
  a.strip();

  // Denormalize
  if (mode !== 'div' && shift !== 0)
    a.ishrn(shift);
  return { div: q ? q : null, mod: a };
};

BN.prototype.divmod = function divmod(num, mode) {
  assert(num.cmpn(0) !== 0);

  if (this.sign && !num.sign) {
    var res = this.neg().divmod(num, mode);
    var div;
    var mod;
    if (mode !== 'mod')
      div = res.div.neg();
    if (mode !== 'div')
      mod = res.mod.cmpn(0) === 0 ? res.mod : num.sub(res.mod);
    return {
      div: div,
      mod: mod
    };
  } else if (!this.sign && num.sign) {
    var res = this.divmod(num.neg(), mode);
    var div;
    if (mode !== 'mod')
      div = res.div.neg();
    return { div: div, mod: res.mod };
  } else if (this.sign && num.sign) {
    return this.neg().divmod(num.neg(), mode);
  }

  // Both numbers are positive at this point

  // Strip both numbers to approximate shift value
  if (num.length > this.length || this.cmp(num) < 0)
    return { div: new BN(0), mod: this };

  // Very short reduction
  if (num.length === 1) {
    if (mode === 'div')
      return { div: this.divn(num.words[0]), mod: null };
    else if (mode === 'mod')
      return { div: null, mod: new BN(this.modn(num.words[0])) };
    return {
      div: this.divn(num.words[0]),
      mod: new BN(this.modn(num.words[0]))
    };
  }

  return this._wordDiv(num, mode);
};

// Find `this` / `num`
BN.prototype.div = function div(num) {
  return this.divmod(num, 'div').div;
};

// Find `this` % `num`
BN.prototype.mod = function mod(num) {
  return this.divmod(num, 'mod').mod;
};

// Find Round(`this` / `num`)
BN.prototype.divRound = function divRound(num) {
  var dm = this.divmod(num);

  // Fast case - exact division
  if (dm.mod.cmpn(0) === 0)
    return dm.div;

  var mod = dm.div.sign ? dm.mod.isub(num) : dm.mod;

  var half = num.shrn(1);
  var r2 = num.andln(1);
  var cmp = mod.cmp(half);

  // Round down
  if (cmp < 0 || r2 === 1 && cmp === 0)
    return dm.div;

  // Round up
  return dm.div.sign ? dm.div.isubn(1) : dm.div.iaddn(1);
};

BN.prototype.modn = function modn(num) {
  assert(num <= 0x3ffffff);
  var p = (1 << 26) % num;

  var acc = 0;
  for (var i = this.length - 1; i >= 0; i--)
    acc = (p * acc + this.words[i]) % num;

  return acc;
};

// In-place division by number
BN.prototype.idivn = function idivn(num) {
  assert(num <= 0x3ffffff);

  var carry = 0;
  for (var i = this.length - 1; i >= 0; i--) {
    var w = this.words[i] + carry * 0x4000000;
    this.words[i] = (w / num) | 0;
    carry = w % num;
  }

  return this.strip();
};

BN.prototype.divn = function divn(num) {
  return this.clone().idivn(num);
};

BN.prototype.egcd = function egcd(p) {
  assert(!p.sign);
  assert(p.cmpn(0) !== 0);

  var x = this;
  var y = p.clone();

  if (x.sign)
    x = x.mod(p);
  else
    x = x.clone();

  // A * x + B * y = x
  var A = new BN(1);
  var B = new BN(0);

  // C * x + D * y = y
  var C = new BN(0);
  var D = new BN(1);

  var g = 0;

  while (x.isEven() && y.isEven()) {
    x.ishrn(1);
    y.ishrn(1);
    ++g;
  }

  var yp = y.clone();
  var xp = x.clone();

  while (x.cmpn(0) !== 0) {
    while (x.isEven()) {
      x.ishrn(1);
      if (A.isEven() && B.isEven()) {
        A.ishrn(1);
        B.ishrn(1);
      } else {
        A.iadd(yp).ishrn(1);
        B.isub(xp).ishrn(1);
      }
    }

    while (y.isEven()) {
      y.ishrn(1);
      if (C.isEven() && D.isEven()) {
        C.ishrn(1);
        D.ishrn(1);
      } else {
        C.iadd(yp).ishrn(1);
        D.isub(xp).ishrn(1);
      }
    }

    if (x.cmp(y) >= 0) {
      x.isub(y);
      A.isub(C);
      B.isub(D);
    } else {
      y.isub(x);
      C.isub(A);
      D.isub(B);
    }
  }

  return {
    a: C,
    b: D,
    gcd: y.ishln(g)
  };
};

// This is reduced incarnation of the binary EEA
// above, designated to invert members of the
// _prime_ fields F(p) at a maximal speed
BN.prototype._invmp = function _invmp(p) {
  assert(!p.sign);
  assert(p.cmpn(0) !== 0);

  var a = this;
  var b = p.clone();

  if (a.sign)
    a = a.mod(p);
  else
    a = a.clone();

  var x1 = new BN(1);
  var x2 = new BN(0);

  var delta = b.clone();

  while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
    while (a.isEven()) {
      a.ishrn(1);
      if (x1.isEven())
        x1.ishrn(1);
      else
        x1.iadd(delta).ishrn(1);
    }
    while (b.isEven()) {
      b.ishrn(1);
      if (x2.isEven())
        x2.ishrn(1);
      else
        x2.iadd(delta).ishrn(1);
    }
    if (a.cmp(b) >= 0) {
      a.isub(b);
      x1.isub(x2);
    } else {
      b.isub(a);
      x2.isub(x1);
    }
  }
  if (a.cmpn(1) === 0)
    return x1;
  else
    return x2;
};

BN.prototype.gcd = function gcd(num) {
  if (this.cmpn(0) === 0)
    return num.clone();
  if (num.cmpn(0) === 0)
    return this.clone();

  var a = this.clone();
  var b = num.clone();
  a.sign = false;
  b.sign = false;

  // Remove common factor of two
  for (var shift = 0; a.isEven() && b.isEven(); shift++) {
    a.ishrn(1);
    b.ishrn(1);
  }

  do {
    while (a.isEven())
      a.ishrn(1);
    while (b.isEven())
      b.ishrn(1);

    var r = a.cmp(b);
    if (r < 0) {
      // Swap `a` and `b` to make `a` always bigger than `b`
      var t = a;
      a = b;
      b = t;
    } else if (r === 0 || b.cmpn(1) === 0) {
      break;
    }

    a.isub(b);
  } while (true);

  return b.ishln(shift);
};

// Invert number in the field F(num)
BN.prototype.invm = function invm(num) {
  return this.egcd(num).a.mod(num);
};

BN.prototype.isEven = function isEven() {
  return (this.words[0] & 1) === 0;
};

BN.prototype.isOdd = function isOdd() {
  return (this.words[0] & 1) === 1;
};

// And first word and num
BN.prototype.andln = function andln(num) {
  return this.words[0] & num;
};

// Increment at the bit position in-line
BN.prototype.bincn = function bincn(bit) {
  assert(typeof bit === 'number');
  var r = bit % 26;
  var s = (bit - r) / 26;
  var q = 1 << r;

  // Fast case: bit is much higher than all existing words
  if (this.length <= s) {
    for (var i = this.length; i < s + 1; i++)
      this.words[i] = 0;
    this.words[s] |= q;
    this.length = s + 1;
    return this;
  }

  // Add bit and propagate, if needed
  var carry = q;
  for (var i = s; carry !== 0 && i < this.length; i++) {
    var w = this.words[i];
    w += carry;
    carry = w >>> 26;
    w &= 0x3ffffff;
    this.words[i] = w;
  }
  if (carry !== 0) {
    this.words[i] = carry;
    this.length++;
  }
  return this;
};

BN.prototype.cmpn = function cmpn(num) {
  var sign = num < 0;
  if (sign)
    num = -num;

  if (this.sign && !sign)
    return -1;
  else if (!this.sign && sign)
    return 1;

  num &= 0x3ffffff;
  this.strip();

  var res;
  if (this.length > 1) {
    res = 1;
  } else {
    var w = this.words[0];
    res = w === num ? 0 : w < num ? -1 : 1;
  }
  if (this.sign)
    res = -res;
  return res;
};

// Compare two numbers and return:
// 1 - if `this` > `num`
// 0 - if `this` == `num`
// -1 - if `this` < `num`
BN.prototype.cmp = function cmp(num) {
  if (this.sign && !num.sign)
    return -1;
  else if (!this.sign && num.sign)
    return 1;

  var res = this.ucmp(num);
  if (this.sign)
    return -res;
  else
    return res;
};

// Unsigned comparison
BN.prototype.ucmp = function ucmp(num) {
  // At this point both numbers have the same sign
  if (this.length > num.length)
    return 1;
  else if (this.length < num.length)
    return -1;

  var res = 0;
  for (var i = this.length - 1; i >= 0; i--) {
    var a = this.words[i];
    var b = num.words[i];

    if (a === b)
      continue;
    if (a < b)
      res = -1;
    else if (a > b)
      res = 1;
    break;
  }
  return res;
};

//
// A reduce context, could be using montgomery or something better, depending
// on the `m` itself.
//
BN.red = function red(num) {
  return new Red(num);
};

BN.prototype.toRed = function toRed(ctx) {
  assert(!this.red, 'Already a number in reduction context');
  assert(!this.sign, 'red works only with positives');
  return ctx.convertTo(this)._forceRed(ctx);
};

BN.prototype.fromRed = function fromRed() {
  assert(this.red, 'fromRed works only with numbers in reduction context');
  return this.red.convertFrom(this);
};

BN.prototype._forceRed = function _forceRed(ctx) {
  this.red = ctx;
  return this;
};

BN.prototype.forceRed = function forceRed(ctx) {
  assert(!this.red, 'Already a number in reduction context');
  return this._forceRed(ctx);
};

BN.prototype.redAdd = function redAdd(num) {
  assert(this.red, 'redAdd works only with red numbers');
  return this.red.add(this, num);
};

BN.prototype.redIAdd = function redIAdd(num) {
  assert(this.red, 'redIAdd works only with red numbers');
  return this.red.iadd(this, num);
};

BN.prototype.redSub = function redSub(num) {
  assert(this.red, 'redSub works only with red numbers');
  return this.red.sub(this, num);
};

BN.prototype.redISub = function redISub(num) {
  assert(this.red, 'redISub works only with red numbers');
  return this.red.isub(this, num);
};

BN.prototype.redShl = function redShl(num) {
  assert(this.red, 'redShl works only with red numbers');
  return this.red.shl(this, num);
};

BN.prototype.redMul = function redMul(num) {
  assert(this.red, 'redMul works only with red numbers');
  this.red._verify2(this, num);
  return this.red.mul(this, num);
};

BN.prototype.redIMul = function redIMul(num) {
  assert(this.red, 'redMul works only with red numbers');
  this.red._verify2(this, num);
  return this.red.imul(this, num);
};

BN.prototype.redSqr = function redSqr() {
  assert(this.red, 'redSqr works only with red numbers');
  this.red._verify1(this);
  return this.red.sqr(this);
};

BN.prototype.redISqr = function redISqr() {
  assert(this.red, 'redISqr works only with red numbers');
  this.red._verify1(this);
  return this.red.isqr(this);
};

// Square root over p
BN.prototype.redSqrt = function redSqrt() {
  assert(this.red, 'redSqrt works only with red numbers');
  this.red._verify1(this);
  return this.red.sqrt(this);
};

BN.prototype.redInvm = function redInvm() {
  assert(this.red, 'redInvm works only with red numbers');
  this.red._verify1(this);
  return this.red.invm(this);
};

// Return negative clone of `this` % `red modulo`
BN.prototype.redNeg = function redNeg() {
  assert(this.red, 'redNeg works only with red numbers');
  this.red._verify1(this);
  return this.red.neg(this);
};

BN.prototype.redPow = function redPow(num) {
  assert(this.red && !num.red, 'redPow(normalNum)');
  this.red._verify1(this);
  return this.red.pow(this, num);
};

// Prime numbers with efficient reduction
var primes = {
  k256: null,
  p224: null,
  p192: null,
  p25519: null
};

// Pseudo-Mersenne prime
function MPrime(name, p) {
  // P = 2 ^ N - K
  this.name = name;
  this.p = new BN(p, 16);
  this.n = this.p.bitLength();
  this.k = new BN(1).ishln(this.n).isub(this.p);

  this.tmp = this._tmp();
}

MPrime.prototype._tmp = function _tmp() {
  var tmp = new BN(null);
  tmp.words = new Array(Math.ceil(this.n / 13));
  return tmp;
};

MPrime.prototype.ireduce = function ireduce(num) {
  // Assumes that `num` is less than `P^2`
  // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
  var r = num;
  var rlen;

  do {
    this.split(r, this.tmp);
    r = this.imulK(r);
    r = r.iadd(this.tmp);
    rlen = r.bitLength();
  } while (rlen > this.n);

  var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
  if (cmp === 0) {
    r.words[0] = 0;
    r.length = 1;
  } else if (cmp > 0) {
    r.isub(this.p);
  } else {
    r.strip();
  }

  return r;
};

MPrime.prototype.split = function split(input, out) {
  input.ishrn(this.n, 0, out);
};

MPrime.prototype.imulK = function imulK(num) {
  return num.imul(this.k);
};

function K256() {
  MPrime.call(
    this,
    'k256',
    'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
}
inherits(K256, MPrime);

K256.prototype.split = function split(input, output) {
  // 256 = 9 * 26 + 22
  var mask = 0x3fffff;

  var outLen = Math.min(input.length, 9);
  for (var i = 0; i < outLen; i++)
    output.words[i] = input.words[i];
  output.length = outLen;

  if (input.length <= 9) {
    input.words[0] = 0;
    input.length = 1;
    return;
  }

  // Shift by 9 limbs
  var prev = input.words[9];
  output.words[output.length++] = prev & mask;

  for (var i = 10; i < input.length; i++) {
    var next = input.words[i];
    input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
    prev = next;
  }
  input.words[i - 10] = prev >>> 22;
  input.length -= 9;
};

K256.prototype.imulK = function imulK(num) {
  // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
  num.words[num.length] = 0;
  num.words[num.length + 1] = 0;
  num.length += 2;

  // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
  var hi;
  var lo = 0;
  for (var i = 0; i < num.length; i++) {
    var w = num.words[i];
    hi = w * 0x40;
    lo += w * 0x3d1;
    hi += (lo / 0x4000000) | 0;
    lo &= 0x3ffffff;

    num.words[i] = lo;

    lo = hi;
  }

  // Fast length reduction
  if (num.words[num.length - 1] === 0) {
    num.length--;
    if (num.words[num.length - 1] === 0)
      num.length--;
  }
  return num;
};

function P224() {
  MPrime.call(
    this,
    'p224',
    'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
}
inherits(P224, MPrime);

function P192() {
  MPrime.call(
    this,
    'p192',
    'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
}
inherits(P192, MPrime);

function P25519() {
  // 2 ^ 255 - 19
  MPrime.call(
    this,
    '25519',
    '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
}
inherits(P25519, MPrime);

P25519.prototype.imulK = function imulK(num) {
  // K = 0x13
  var carry = 0;
  for (var i = 0; i < num.length; i++) {
    var hi = num.words[i] * 0x13 + carry;
    var lo = hi & 0x3ffffff;
    hi >>>= 26;

    num.words[i] = lo;
    carry = hi;
  }
  if (carry !== 0)
    num.words[num.length++] = carry;
  return num;
};

// Exported mostly for testing purposes, use plain name instead
BN._prime = function prime(name) {
  // Cached version of prime
  if (primes[name])
    return primes[name];

  var prime;
  if (name === 'k256')
    prime = new K256();
  else if (name === 'p224')
    prime = new P224();
  else if (name === 'p192')
    prime = new P192();
  else if (name === 'p25519')
    prime = new P25519();
  else
    throw new Error('Unknown prime ' + name);
  primes[name] = prime;

  return prime;
};

//
// Base reduction engine
//
function Red(m) {
  if (typeof m === 'string') {
    var prime = BN._prime(m);
    this.m = prime.p;
    this.prime = prime;
  } else {
    this.m = m;
    this.prime = null;
  }
}

Red.prototype._verify1 = function _verify1(a) {
  assert(!a.sign, 'red works only with positives');
  assert(a.red, 'red works only with red numbers');
};

Red.prototype._verify2 = function _verify2(a, b) {
  assert(!a.sign && !b.sign, 'red works only with positives');
  assert(a.red && a.red === b.red,
         'red works only with red numbers');
};

Red.prototype.imod = function imod(a) {
  if (this.prime)
    return this.prime.ireduce(a)._forceRed(this);
  return a.mod(this.m)._forceRed(this);
};

Red.prototype.neg = function neg(a) {
  var r = a.clone();
  r.sign = !r.sign;
  return r.iadd(this.m)._forceRed(this);
};

Red.prototype.add = function add(a, b) {
  this._verify2(a, b);

  var res = a.add(b);
  if (res.cmp(this.m) >= 0)
    res.isub(this.m);
  return res._forceRed(this);
};

Red.prototype.iadd = function iadd(a, b) {
  this._verify2(a, b);

  var res = a.iadd(b);
  if (res.cmp(this.m) >= 0)
    res.isub(this.m);
  return res;
};

Red.prototype.sub = function sub(a, b) {
  this._verify2(a, b);

  var res = a.sub(b);
  if (res.cmpn(0) < 0)
    res.iadd(this.m);
  return res._forceRed(this);
};

Red.prototype.isub = function isub(a, b) {
  this._verify2(a, b);

  var res = a.isub(b);
  if (res.cmpn(0) < 0)
    res.iadd(this.m);
  return res;
};

Red.prototype.shl = function shl(a, num) {
  this._verify1(a);
  return this.imod(a.shln(num));
};

Red.prototype.imul = function imul(a, b) {
  this._verify2(a, b);
  return this.imod(a.imul(b));
};

Red.prototype.mul = function mul(a, b) {
  this._verify2(a, b);
  return this.imod(a.mul(b));
};

Red.prototype.isqr = function isqr(a) {
  return this.imul(a, a);
};

Red.prototype.sqr = function sqr(a) {
  return this.mul(a, a);
};

Red.prototype.sqrt = function sqrt(a) {
  if (a.cmpn(0) === 0)
    return a.clone();

  var mod3 = this.m.andln(3);
  assert(mod3 % 2 === 1);

  // Fast case
  if (mod3 === 3) {
    var pow = this.m.add(new BN(1)).ishrn(2);
    var r = this.pow(a, pow);
    return r;
  }

  // Tonelli-Shanks algorithm (Totally unoptimized and slow)
  //
  // Find Q and S, that Q * 2 ^ S = (P - 1)
  var q = this.m.subn(1);
  var s = 0;
  while (q.cmpn(0) !== 0 && q.andln(1) === 0) {
    s++;
    q.ishrn(1);
  }
  assert(q.cmpn(0) !== 0);

  var one = new BN(1).toRed(this);
  var nOne = one.redNeg();

  // Find quadratic non-residue
  // NOTE: Max is such because of generalized Riemann hypothesis.
  var lpow = this.m.subn(1).ishrn(1);
  var z = this.m.bitLength();
  z = new BN(2 * z * z).toRed(this);
  while (this.pow(z, lpow).cmp(nOne) !== 0)
    z.redIAdd(nOne);

  var c = this.pow(z, q);
  var r = this.pow(a, q.addn(1).ishrn(1));
  var t = this.pow(a, q);
  var m = s;
  while (t.cmp(one) !== 0) {
    var tmp = t;
    for (var i = 0; tmp.cmp(one) !== 0; i++)
      tmp = tmp.redSqr();
    assert(i < m);
    var b = this.pow(c, new BN(1).ishln(m - i - 1));

    r = r.redMul(b);
    c = b.redSqr();
    t = t.redMul(c);
    m = i;
  }

  return r;
};

Red.prototype.invm = function invm(a) {
  var inv = a._invmp(this.m);
  if (inv.sign) {
    inv.sign = false;
    return this.imod(inv).redNeg();
  } else {
    return this.imod(inv);
  }
};

Red.prototype.pow = function pow(a, num) {
  var w = [];

  if (num.cmpn(0) === 0)
    return new BN(1);

  var q = num.clone();

  while (q.cmpn(0) !== 0) {
    w.push(q.andln(1));
    q.ishrn(1);
  }

  // Skip leading zeroes
  var res = a;
  for (var i = 0; i < w.length; i++, res = this.sqr(res))
    if (w[i] !== 0)
      break;

  if (++i < w.length) {
    for (var q = this.sqr(res); i < w.length; i++, q = this.sqr(q)) {
      if (w[i] === 0)
        continue;
      res = this.mul(res, q);
    }
  }

  return res;
};

Red.prototype.convertTo = function convertTo(num) {
  var r = num.mod(this.m);
  if (r === num)
    return r.clone();
  else
    return r;
};

Red.prototype.convertFrom = function convertFrom(num) {
  var res = num.clone();
  res.red = null;
  return res;
};

//
// Montgomery method engine
//

BN.mont = function mont(num) {
  return new Mont(num);
};

function Mont(m) {
  Red.call(this, m);

  this.shift = this.m.bitLength();
  if (this.shift % 26 !== 0)
    this.shift += 26 - (this.shift % 26);
  this.r = new BN(1).ishln(this.shift);
  this.r2 = this.imod(this.r.sqr());
  this.rinv = this.r._invmp(this.m);

  this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
  this.minv.sign = true;
  this.minv = this.minv.mod(this.r);
}
inherits(Mont, Red);

Mont.prototype.convertTo = function convertTo(num) {
  return this.imod(num.shln(this.shift));
};

Mont.prototype.convertFrom = function convertFrom(num) {
  var r = this.imod(num.mul(this.rinv));
  r.red = null;
  return r;
};

Mont.prototype.imul = function imul(a, b) {
  if (a.cmpn(0) === 0 || b.cmpn(0) === 0) {
    a.words[0] = 0;
    a.length = 1;
    return a;
  }

  var t = a.imul(b);
  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
  var u = t.isub(c).ishrn(this.shift);
  var res = u;
  if (u.cmp(this.m) >= 0)
    res = u.isub(this.m);
  else if (u.cmpn(0) < 0)
    res = u.iadd(this.m);

  return res._forceRed(this);
};

Mont.prototype.mul = function mul(a, b) {
  if (a.cmpn(0) === 0 || b.cmpn(0) === 0)
    return new BN(0)._forceRed(this);

  var t = a.mul(b);
  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
  var u = t.isub(c).ishrn(this.shift);
  var res = u;
  if (u.cmp(this.m) >= 0)
    res = u.isub(this.m);
  else if (u.cmpn(0) < 0)
    res = u.iadd(this.m);

  return res._forceRed(this);
};

Mont.prototype.invm = function invm(a) {
  // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
  var res = this.imod(a._invmp(this.m).mul(this.r2));
  return res._forceRed(this);
};

})(typeof module === 'undefined' || module, this);

},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/curves.js":[function(require,module,exports){
'use strict'
exports['1.3.132.0.10'] = 'secp256k1'

exports['1.3.132.0.33'] = 'p224'

exports['1.2.840.10045.3.1.1'] = 'p192'

exports['1.2.840.10045.3.1.7'] = 'p256'

},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-sign/algos.js":[function(require,module,exports){
(function (Buffer){
'use strict'
exports['RSA-SHA224'] = exports.sha224WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha224',
  id: new Buffer('302d300d06096086480165030402040500041c', 'hex')
}
exports['RSA-SHA256'] = exports.sha256WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha256',
  id: new Buffer('3031300d060960864801650304020105000420', 'hex')
}
exports['RSA-SHA384'] = exports.sha384WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha384',
  id: new Buffer('3041300d060960864801650304020205000430', 'hex')
}
exports['RSA-SHA512'] = exports.sha512WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha512',
  id: new Buffer('3051300d060960864801650304020305000440', 'hex')
}
exports['RSA-SHA1'] = {
  sign: 'rsa',
  hash: 'sha1',
  id: new Buffer('3021300906052b0e03021a05000414', 'hex')
}
exports['ecdsa-with-SHA1'] = {
  sign: 'ecdsa',
  hash: 'sha1',
  id: new Buffer('', 'hex')
}
exports.DSA = exports['DSA-SHA1'] = exports['DSA-SHA'] = {
  sign: 'dsa',
  hash: 'sha1',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA224'] = exports['DSA-WITH-SHA224'] = {
  sign: 'dsa',
  hash: 'sha224',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA256'] = exports['DSA-WITH-SHA256'] = {
  sign: 'dsa',
  hash: 'sha256',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA384'] = exports['DSA-WITH-SHA384'] = {
  sign: 'dsa',
  hash: 'sha384',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA512'] = exports['DSA-WITH-SHA512'] = {
  sign: 'dsa',
  hash: 'sha512',
  id: new Buffer('', 'hex')
}
exports['DSA-RIPEMD160'] = {
  sign: 'dsa',
  hash: 'rmd160',
  id: new Buffer('', 'hex')
}
exports['RSA-RIPEMD160'] = exports.ripemd160WithRSA = {
  sign: 'rsa',
  hash: 'rmd160',
  id: new Buffer('3021300906052b2403020105000414', 'hex')
}
exports['RSA-MD5'] = exports.md5WithRSAEncryption = {
  sign: 'rsa',
  hash: 'md5',
  id: new Buffer('3020300c06082a864886f70d020505000410', 'hex')
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL2FsZ29zLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuZXhwb3J0c1snUlNBLVNIQTIyNCddID0gZXhwb3J0cy5zaGEyMjRXaXRoUlNBRW5jcnlwdGlvbiA9IHtcbiAgc2lnbjogJ3JzYScsXG4gIGhhc2g6ICdzaGEyMjQnLFxuICBpZDogbmV3IEJ1ZmZlcignMzAyZDMwMGQwNjA5NjA4NjQ4MDE2NTAzMDQwMjA0MDUwMDA0MWMnLCAnaGV4Jylcbn1cbmV4cG9ydHNbJ1JTQS1TSEEyNTYnXSA9IGV4cG9ydHMuc2hhMjU2V2l0aFJTQUVuY3J5cHRpb24gPSB7XG4gIHNpZ246ICdyc2EnLFxuICBoYXNoOiAnc2hhMjU2JyxcbiAgaWQ6IG5ldyBCdWZmZXIoJzMwMzEzMDBkMDYwOTYwODY0ODAxNjUwMzA0MDIwMTA1MDAwNDIwJywgJ2hleCcpXG59XG5leHBvcnRzWydSU0EtU0hBMzg0J10gPSBleHBvcnRzLnNoYTM4NFdpdGhSU0FFbmNyeXB0aW9uID0ge1xuICBzaWduOiAncnNhJyxcbiAgaGFzaDogJ3NoYTM4NCcsXG4gIGlkOiBuZXcgQnVmZmVyKCczMDQxMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDIwNTAwMDQzMCcsICdoZXgnKVxufVxuZXhwb3J0c1snUlNBLVNIQTUxMiddID0gZXhwb3J0cy5zaGE1MTJXaXRoUlNBRW5jcnlwdGlvbiA9IHtcbiAgc2lnbjogJ3JzYScsXG4gIGhhc2g6ICdzaGE1MTInLFxuICBpZDogbmV3IEJ1ZmZlcignMzA1MTMwMGQwNjA5NjA4NjQ4MDE2NTAzMDQwMjAzMDUwMDA0NDAnLCAnaGV4Jylcbn1cbmV4cG9ydHNbJ1JTQS1TSEExJ10gPSB7XG4gIHNpZ246ICdyc2EnLFxuICBoYXNoOiAnc2hhMScsXG4gIGlkOiBuZXcgQnVmZmVyKCczMDIxMzAwOTA2MDUyYjBlMDMwMjFhMDUwMDA0MTQnLCAnaGV4Jylcbn1cbmV4cG9ydHNbJ2VjZHNhLXdpdGgtU0hBMSddID0ge1xuICBzaWduOiAnZWNkc2EnLFxuICBoYXNoOiAnc2hhMScsXG4gIGlkOiBuZXcgQnVmZmVyKCcnLCAnaGV4Jylcbn1cbmV4cG9ydHMuRFNBID0gZXhwb3J0c1snRFNBLVNIQTEnXSA9IGV4cG9ydHNbJ0RTQS1TSEEnXSA9IHtcbiAgc2lnbjogJ2RzYScsXG4gIGhhc2g6ICdzaGExJyxcbiAgaWQ6IG5ldyBCdWZmZXIoJycsICdoZXgnKVxufVxuZXhwb3J0c1snRFNBLVNIQTIyNCddID0gZXhwb3J0c1snRFNBLVdJVEgtU0hBMjI0J10gPSB7XG4gIHNpZ246ICdkc2EnLFxuICBoYXNoOiAnc2hhMjI0JyxcbiAgaWQ6IG5ldyBCdWZmZXIoJycsICdoZXgnKVxufVxuZXhwb3J0c1snRFNBLVNIQTI1NiddID0gZXhwb3J0c1snRFNBLVdJVEgtU0hBMjU2J10gPSB7XG4gIHNpZ246ICdkc2EnLFxuICBoYXNoOiAnc2hhMjU2JyxcbiAgaWQ6IG5ldyBCdWZmZXIoJycsICdoZXgnKVxufVxuZXhwb3J0c1snRFNBLVNIQTM4NCddID0gZXhwb3J0c1snRFNBLVdJVEgtU0hBMzg0J10gPSB7XG4gIHNpZ246ICdkc2EnLFxuICBoYXNoOiAnc2hhMzg0JyxcbiAgaWQ6IG5ldyBCdWZmZXIoJycsICdoZXgnKVxufVxuZXhwb3J0c1snRFNBLVNIQTUxMiddID0gZXhwb3J0c1snRFNBLVdJVEgtU0hBNTEyJ10gPSB7XG4gIHNpZ246ICdkc2EnLFxuICBoYXNoOiAnc2hhNTEyJyxcbiAgaWQ6IG5ldyBCdWZmZXIoJycsICdoZXgnKVxufVxuZXhwb3J0c1snRFNBLVJJUEVNRDE2MCddID0ge1xuICBzaWduOiAnZHNhJyxcbiAgaGFzaDogJ3JtZDE2MCcsXG4gIGlkOiBuZXcgQnVmZmVyKCcnLCAnaGV4Jylcbn1cbmV4cG9ydHNbJ1JTQS1SSVBFTUQxNjAnXSA9IGV4cG9ydHMucmlwZW1kMTYwV2l0aFJTQSA9IHtcbiAgc2lnbjogJ3JzYScsXG4gIGhhc2g6ICdybWQxNjAnLFxuICBpZDogbmV3IEJ1ZmZlcignMzAyMTMwMDkwNjA1MmIyNDAzMDIwMTA1MDAwNDE0JywgJ2hleCcpXG59XG5leHBvcnRzWydSU0EtTUQ1J10gPSBleHBvcnRzLm1kNVdpdGhSU0FFbmNyeXB0aW9uID0ge1xuICBzaWduOiAncnNhJyxcbiAgaGFzaDogJ21kNScsXG4gIGlkOiBuZXcgQnVmZmVyKCczMDIwMzAwYzA2MDgyYTg2NDg4NmY3MGQwMjA1MDUwMDA0MTAnLCAnaGV4Jylcbn1cbiJdfQ==
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/browser.js":[function(require,module,exports){
var ebtk = require('evp_bytestokey')
var aes = require('browserify-aes/browser')
var DES = require('browserify-des')
var desModes = require('browserify-des/modes')
var aesModes = require('browserify-aes/modes')
function createCipher (suite, password) {
  var keyLen, ivLen
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}
function createDecipher (suite, password) {
  var keyLen, ivLen
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    return aes.createCipheriv(suite, key, iv)
  } else if (desModes[suite]) {
    return new DES({
      key: key,
      iv: iv,
      mode: suite
    })
  } else {
    throw new TypeError('invalid suite type')
  }
}
function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    return aes.createDecipheriv(suite, key, iv)
  } else if (desModes[suite]) {
    return new DES({
      key: key,
      iv: iv,
      mode: suite,
      decrypt: true
    })
  } else {
    throw new TypeError('invalid suite type')
  }
}
exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}
exports.listCiphers = exports.getCiphers = getCiphers

},{"browserify-aes/browser":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/browser.js","browserify-aes/modes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes.js","browserify-des":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/index.js","browserify-des/modes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/modes.js","evp_bytestokey":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/evp_bytestokey/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/modes.js":[function(require,module,exports){
exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}

},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/index.js":[function(require,module,exports){
(function (Buffer){
var CipherBase = require('cipher-base')
var des = require('des.js')
var inherits = require('inherits')

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return new Buffer(this._des.update(data))
}
DES.prototype._final = function () {
  return new Buffer(this._des.final())
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktZGVzL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQ2lwaGVyQmFzZSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBkZXMgPSByZXF1aXJlKCdkZXMuanMnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG52YXIgbW9kZXMgPSB7XG4gICdkZXMtZWRlMy1jYmMnOiBkZXMuQ0JDLmluc3RhbnRpYXRlKGRlcy5FREUpLFxuICAnZGVzLWVkZTMnOiBkZXMuRURFLFxuICAnZGVzLWVkZS1jYmMnOiBkZXMuQ0JDLmluc3RhbnRpYXRlKGRlcy5FREUpLFxuICAnZGVzLWVkZSc6IGRlcy5FREUsXG4gICdkZXMtY2JjJzogZGVzLkNCQy5pbnN0YW50aWF0ZShkZXMuREVTKSxcbiAgJ2Rlcy1lY2InOiBkZXMuREVTXG59XG5tb2Rlcy5kZXMgPSBtb2Rlc1snZGVzLWNiYyddXG5tb2Rlcy5kZXMzID0gbW9kZXNbJ2Rlcy1lZGUzLWNiYyddXG5tb2R1bGUuZXhwb3J0cyA9IERFU1xuaW5oZXJpdHMoREVTLCBDaXBoZXJCYXNlKVxuZnVuY3Rpb24gREVTIChvcHRzKSB7XG4gIENpcGhlckJhc2UuY2FsbCh0aGlzKVxuICB2YXIgbW9kZU5hbWUgPSBvcHRzLm1vZGUudG9Mb3dlckNhc2UoKVxuICB2YXIgbW9kZSA9IG1vZGVzW21vZGVOYW1lXVxuICB2YXIgdHlwZVxuICBpZiAob3B0cy5kZWNyeXB0KSB7XG4gICAgdHlwZSA9ICdkZWNyeXB0J1xuICB9IGVsc2Uge1xuICAgIHR5cGUgPSAnZW5jcnlwdCdcbiAgfVxuICB2YXIga2V5ID0gb3B0cy5rZXlcbiAgaWYgKG1vZGVOYW1lID09PSAnZGVzLWVkZScgfHwgbW9kZU5hbWUgPT09ICdkZXMtZWRlLWNiYycpIHtcbiAgICBrZXkgPSBCdWZmZXIuY29uY2F0KFtrZXksIGtleS5zbGljZSgwLCA4KV0pXG4gIH1cbiAgdmFyIGl2ID0gb3B0cy5pdlxuICB0aGlzLl9kZXMgPSBtb2RlLmNyZWF0ZSh7XG4gICAga2V5OiBrZXksXG4gICAgaXY6IGl2LFxuICAgIHR5cGU6IHR5cGVcbiAgfSlcbn1cbkRFUy5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHJldHVybiBuZXcgQnVmZmVyKHRoaXMuX2Rlcy51cGRhdGUoZGF0YSkpXG59XG5ERVMucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBCdWZmZXIodGhpcy5fZGVzLmZpbmFsKCkpXG59XG4iXX0=
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","cipher-base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/cipher-base/index.js","des.js":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/lib/des.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/lib/des.js":[function(require,module,exports){
'use strict';

exports.utils = require('./des/utils');
exports.Cipher = require('./des/cipher');
exports.DES = require('./des/des');
exports.CBC = require('./des/cbc');
exports.EDE = require('./des/ede');

},{"./des/cbc":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/lib/des/cbc.js","./des/cipher":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/lib/des/cipher.js","./des/des":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/lib/des/des.js","./des/ede":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/lib/des/ede.js","./des/utils":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/lib/des/utils.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/lib/des/utils.js":[function(require,module,exports){
'use strict';

exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};

},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/lib/des/ede.js":[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var des = require('../des');
var Cipher = des.Cipher;
var DES = des.DES;

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

},{"../des":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/lib/des.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js","minimalistic-assert":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/node_modules/minimalistic-assert/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/lib/des/des.js":[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var des = require('../des');
var utils = des.utils;
var Cipher = des.Cipher;

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};

},{"../des":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/lib/des.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js","minimalistic-assert":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/node_modules/minimalistic-assert/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/lib/des/cipher.js":[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};

},{"minimalistic-assert":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/node_modules/minimalistic-assert/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/lib/des/cbc.js":[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};

},{"inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js","minimalistic-assert":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/node_modules/minimalistic-assert/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/des.js/node_modules/minimalistic-assert/index.js":[function(require,module,exports){
module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-des/node_modules/cipher-base/index.js":[function(require,module,exports){
(function (Buffer){
var Transform = require('stream').Transform
var inherits = require('inherits')
var StringDecoder = require('string_decoder').StringDecoder
module.exports = CipherBase
inherits(CipherBase, Transform)
function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  this._decoder = null
  this._encoding = null
}
CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = new Buffer(data, inputEnc)
  }
  var outData = this._update(data)
  if (this.hashMode) {
    return this
  }
  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }
  return outData
}

CipherBase.prototype.setAutoPadding = function () {}

CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this._final())
  } catch (e) {
    err = e
  } finally {
    done(err)
  }
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this._final() || new Buffer('')
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, final) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }
  if (this._encoding !== enc) {
    throw new Error('can\'t switch encodings')
  }
  var out = this._decoder.write(value)
  if (final) {
    out += this._decoder.end()
  }
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktZGVzL25vZGVfbW9kdWxlcy9jaXBoZXItYmFzZS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdzdHJlYW0nKS5UcmFuc2Zvcm1cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXInKS5TdHJpbmdEZWNvZGVyXG5tb2R1bGUuZXhwb3J0cyA9IENpcGhlckJhc2VcbmluaGVyaXRzKENpcGhlckJhc2UsIFRyYW5zZm9ybSlcbmZ1bmN0aW9uIENpcGhlckJhc2UgKGhhc2hNb2RlKSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuaGFzaE1vZGUgPSB0eXBlb2YgaGFzaE1vZGUgPT09ICdzdHJpbmcnXG4gIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgdGhpc1toYXNoTW9kZV0gPSB0aGlzLl9maW5hbE9yRGlnZXN0XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5maW5hbCA9IHRoaXMuX2ZpbmFsT3JEaWdlc3RcbiAgfVxuICB0aGlzLl9kZWNvZGVyID0gbnVsbFxuICB0aGlzLl9lbmNvZGluZyA9IG51bGxcbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBpbnB1dEVuYywgb3V0cHV0RW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBkYXRhID0gbmV3IEJ1ZmZlcihkYXRhLCBpbnB1dEVuYylcbiAgfVxuICB2YXIgb3V0RGF0YSA9IHRoaXMuX3VwZGF0ZShkYXRhKVxuICBpZiAodGhpcy5oYXNoTW9kZSkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cbiAgaWYgKG91dHB1dEVuYykge1xuICAgIG91dERhdGEgPSB0aGlzLl90b1N0cmluZyhvdXREYXRhLCBvdXRwdXRFbmMpXG4gIH1cbiAgcmV0dXJuIG91dERhdGFcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QXV0b1BhZGRpbmcgPSBmdW5jdGlvbiAoKSB7fVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5nZXRBdXRoVGFnID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBnZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBdXRoVGFnID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBzZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBQUQgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhYWQgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGRhdGEsIF8sIG5leHQpIHtcbiAgdmFyIGVyclxuICB0cnkge1xuICAgIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgICB0aGlzLl91cGRhdGUoZGF0YSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXNoKHRoaXMuX3VwZGF0ZShkYXRhKSlcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnIgPSBlXG4gIH0gZmluYWxseSB7XG4gICAgbmV4dChlcnIpXG4gIH1cbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLl9mbHVzaCA9IGZ1bmN0aW9uIChkb25lKSB7XG4gIHZhciBlcnJcbiAgdHJ5IHtcbiAgICB0aGlzLnB1c2godGhpcy5fZmluYWwoKSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfSBmaW5hbGx5IHtcbiAgICBkb25lKGVycilcbiAgfVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZpbmFsT3JEaWdlc3QgPSBmdW5jdGlvbiAob3V0cHV0RW5jKSB7XG4gIHZhciBvdXREYXRhID0gdGhpcy5fZmluYWwoKSB8fCBuZXcgQnVmZmVyKCcnKVxuICBpZiAob3V0cHV0RW5jKSB7XG4gICAgb3V0RGF0YSA9IHRoaXMuX3RvU3RyaW5nKG91dERhdGEsIG91dHB1dEVuYywgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb3V0RGF0YVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fdG9TdHJpbmcgPSBmdW5jdGlvbiAodmFsdWUsIGVuYywgZmluYWwpIHtcbiAgaWYgKCF0aGlzLl9kZWNvZGVyKSB7XG4gICAgdGhpcy5fZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYylcbiAgICB0aGlzLl9lbmNvZGluZyA9IGVuY1xuICB9XG4gIGlmICh0aGlzLl9lbmNvZGluZyAhPT0gZW5jKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYW5cXCd0IHN3aXRjaCBlbmNvZGluZ3MnKVxuICB9XG4gIHZhciBvdXQgPSB0aGlzLl9kZWNvZGVyLndyaXRlKHZhbHVlKVxuICBpZiAoZmluYWwpIHtcbiAgICBvdXQgKz0gdGhpcy5fZGVjb2Rlci5lbmQoKVxuICB9XG4gIHJldHVybiBvdXRcbn1cbiJdfQ==
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js","stream":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/stream-browserify/index.js","string_decoder":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/string_decoder/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/browser.js":[function(require,module,exports){
var ciphers = require('./encrypter')
exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
var deciphers = require('./decrypter')
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
var modes = require('./modes')
function getCiphers () {
  return Object.keys(modes)
}
exports.listCiphers = exports.getCiphers = getCiphers

},{"./decrypter":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/decrypter.js","./encrypter":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/encrypter.js","./modes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/encrypter.js":[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')
var modes = require('./modes')
var ebtk = require('evp_bytestokey')
var StreamCipher = require('./streamCipher')
var AuthCipher = require('./authCipher')
inherits(Cipher, Transform)
function Cipher (mode, key, iv) {
  if (!(this instanceof Cipher)) {
    return new Cipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  } else if (chunk.toString('hex') !== '10101010101010101010101010101010') {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}
Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
}

function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}
Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = new Buffer(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }
  var out = Buffer.concat([this.cache, padBuff])
  return out
}
var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
}

function createCipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv)
  }
  return new Cipher(modelist[config.mode], password, iv)
}
function createCipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2VuY3J5cHRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgbW9kZXMgPSByZXF1aXJlKCcuL21vZGVzJylcbnZhciBlYnRrID0gcmVxdWlyZSgnZXZwX2J5dGVzdG9rZXknKVxudmFyIFN0cmVhbUNpcGhlciA9IHJlcXVpcmUoJy4vc3RyZWFtQ2lwaGVyJylcbnZhciBBdXRoQ2lwaGVyID0gcmVxdWlyZSgnLi9hdXRoQ2lwaGVyJylcbmluaGVyaXRzKENpcGhlciwgVHJhbnNmb3JtKVxuZnVuY3Rpb24gQ2lwaGVyIChtb2RlLCBrZXksIGl2KSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBDaXBoZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBDaXBoZXIobW9kZSwga2V5LCBpdilcbiAgfVxuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuICB0aGlzLl9jYWNoZSA9IG5ldyBTcGxpdHRlcigpXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IG5ldyBCdWZmZXIoaXYubGVuZ3RoKVxuICBpdi5jb3B5KHRoaXMuX3ByZXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gdHJ1ZVxufVxuQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG4gIHdoaWxlICgoY2h1bmsgPSB0aGlzLl9jYWNoZS5nZXQoKSkpIHtcbiAgICB0aGluZyA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgICBvdXQucHVzaCh0aGluZylcbiAgfVxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChvdXQpXG59XG5DaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNodW5rID0gdGhpcy5fY2FjaGUuZmx1c2goKVxuICBpZiAodGhpcy5fYXV0b3BhZGRpbmcpIHtcbiAgICBjaHVuayA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgICB0aGlzLl9jaXBoZXIuc2NydWIoKVxuICAgIHJldHVybiBjaHVua1xuICB9IGVsc2UgaWYgKGNodW5rLnRvU3RyaW5nKCdoZXgnKSAhPT0gJzEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwJykge1xuICAgIHRoaXMuX2NpcGhlci5zY3J1YigpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdkYXRhIG5vdCBtdWx0aXBsZSBvZiBibG9jayBsZW5ndGgnKVxuICB9XG59XG5DaXBoZXIucHJvdG90eXBlLnNldEF1dG9QYWRkaW5nID0gZnVuY3Rpb24gKHNldFRvKSB7XG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gISFzZXRUb1xufVxuXG5mdW5jdGlvbiBTcGxpdHRlciAoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTcGxpdHRlcikpIHtcbiAgICByZXR1cm4gbmV3IFNwbGl0dGVyKClcbiAgfVxuICB0aGlzLmNhY2hlID0gbmV3IEJ1ZmZlcignJylcbn1cblNwbGl0dGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgZGF0YV0pXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+IDE1KSB7XG4gICAgdmFyIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgcmV0dXJuIG91dFxuICB9XG4gIHJldHVybiBudWxsXG59XG5TcGxpdHRlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsZW4gPSAxNiAtIHRoaXMuY2FjaGUubGVuZ3RoXG4gIHZhciBwYWRCdWZmID0gbmV3IEJ1ZmZlcihsZW4pXG5cbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgcGFkQnVmZi53cml0ZVVJbnQ4KGxlbiwgaSlcbiAgfVxuICB2YXIgb3V0ID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgcGFkQnVmZl0pXG4gIHJldHVybiBvdXRcbn1cbnZhciBtb2RlbGlzdCA9IHtcbiAgRUNCOiByZXF1aXJlKCcuL21vZGVzL2VjYicpLFxuICBDQkM6IHJlcXVpcmUoJy4vbW9kZXMvY2JjJyksXG4gIENGQjogcmVxdWlyZSgnLi9tb2Rlcy9jZmInKSxcbiAgQ0ZCODogcmVxdWlyZSgnLi9tb2Rlcy9jZmI4JyksXG4gIENGQjE6IHJlcXVpcmUoJy4vbW9kZXMvY2ZiMScpLFxuICBPRkI6IHJlcXVpcmUoJy4vbW9kZXMvb2ZiJyksXG4gIENUUjogcmVxdWlyZSgnLi9tb2Rlcy9jdHInKSxcbiAgR0NNOiByZXF1aXJlKCcuL21vZGVzL2N0cicpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlcml2IChzdWl0ZSwgcGFzc3dvcmQsIGl2KSB7XG4gIHZhciBjb25maWcgPSBtb2Rlc1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbiAgaWYgKHR5cGVvZiBpdiA9PT0gJ3N0cmluZycpIHtcbiAgICBpdiA9IG5ldyBCdWZmZXIoaXYpXG4gIH1cbiAgaWYgKHR5cGVvZiBwYXNzd29yZCA9PT0gJ3N0cmluZycpIHtcbiAgICBwYXNzd29yZCA9IG5ldyBCdWZmZXIocGFzc3dvcmQpXG4gIH1cbiAgaWYgKHBhc3N3b3JkLmxlbmd0aCAhPT0gY29uZmlnLmtleSAvIDgpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGtleSBsZW5ndGggJyArIHBhc3N3b3JkLmxlbmd0aClcbiAgfVxuICBpZiAoaXYubGVuZ3RoICE9PSBjb25maWcuaXYpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGl2IGxlbmd0aCAnICsgaXYubGVuZ3RoKVxuICB9XG4gIGlmIChjb25maWcudHlwZSA9PT0gJ3N0cmVhbScpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihtb2RlbGlzdFtjb25maWcubW9kZV0sIHBhc3N3b3JkLCBpdilcbiAgfSBlbHNlIGlmIChjb25maWcudHlwZSA9PT0gJ2F1dGgnKSB7XG4gICAgcmV0dXJuIG5ldyBBdXRoQ2lwaGVyKG1vZGVsaXN0W2NvbmZpZy5tb2RlXSwgcGFzc3dvcmQsIGl2KVxuICB9XG4gIHJldHVybiBuZXcgQ2lwaGVyKG1vZGVsaXN0W2NvbmZpZy5tb2RlXSwgcGFzc3dvcmQsIGl2KVxufVxuZnVuY3Rpb24gY3JlYXRlQ2lwaGVyIChzdWl0ZSwgcGFzc3dvcmQpIHtcbiAgdmFyIGNvbmZpZyA9IG1vZGVzW3N1aXRlLnRvTG93ZXJDYXNlKCldXG4gIGlmICghY29uZmlnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcbiAgfVxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBjb25maWcua2V5LCBjb25maWcuaXYpXG4gIHJldHVybiBjcmVhdGVDaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5cbmV4cG9ydHMuY3JlYXRlQ2lwaGVyaXYgPSBjcmVhdGVDaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVDaXBoZXIgPSBjcmVhdGVDaXBoZXJcbiJdfQ==
},{"./aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/aes.js","./authCipher":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/authCipher.js","./modes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes.js","./modes/cbc":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/cbc.js","./modes/cfb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/cfb.js","./modes/cfb1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/cfb1.js","./modes/cfb8":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/cfb8.js","./modes/ctr":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/ctr.js","./modes/ecb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/ecb.js","./modes/ofb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/ofb.js","./streamCipher":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/streamCipher.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","cipher-base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/node_modules/cipher-base/index.js","evp_bytestokey":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/evp_bytestokey/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/decrypter.js":[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')
var modes = require('./modes')
var StreamCipher = require('./streamCipher')
var AuthCipher = require('./authCipher')
var ebtk = require('evp_bytestokey')

inherits(Decipher, Transform)
function Decipher (mode, key, iv) {
  if (!(this instanceof Decipher)) {
    return new Decipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}
Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
}
function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }
  return null
}
Splitter.prototype.flush = function () {
  if (this.cache.length) {
    return this.cache
  }
}
function unpad (last) {
  var padded = last[15]
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) {
    return
  }
  return last.slice(0, 16 - padded)
}

var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
}

function createDecipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv, true)
  }
  return new Decipher(modelist[config.mode], password, iv)
}

function createDecipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}
exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2RlY3J5cHRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgbW9kZXMgPSByZXF1aXJlKCcuL21vZGVzJylcbnZhciBTdHJlYW1DaXBoZXIgPSByZXF1aXJlKCcuL3N0cmVhbUNpcGhlcicpXG52YXIgQXV0aENpcGhlciA9IHJlcXVpcmUoJy4vYXV0aENpcGhlcicpXG52YXIgZWJ0ayA9IHJlcXVpcmUoJ2V2cF9ieXRlc3Rva2V5JylcblxuaW5oZXJpdHMoRGVjaXBoZXIsIFRyYW5zZm9ybSlcbmZ1bmN0aW9uIERlY2lwaGVyIChtb2RlLCBrZXksIGl2KSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEZWNpcGhlcikpIHtcbiAgICByZXR1cm4gbmV3IERlY2lwaGVyKG1vZGUsIGtleSwgaXYpXG4gIH1cbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5fY2FjaGUgPSBuZXcgU3BsaXR0ZXIoKVxuICB0aGlzLl9sYXN0ID0gdm9pZCAwXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IG5ldyBCdWZmZXIoaXYubGVuZ3RoKVxuICBpdi5jb3B5KHRoaXMuX3ByZXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gdHJ1ZVxufVxuRGVjaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLl9jYWNoZS5hZGQoZGF0YSlcbiAgdmFyIGNodW5rXG4gIHZhciB0aGluZ1xuICB2YXIgb3V0ID0gW11cbiAgd2hpbGUgKChjaHVuayA9IHRoaXMuX2NhY2hlLmdldCh0aGlzLl9hdXRvcGFkZGluZykpKSB7XG4gICAgdGhpbmcgPSB0aGlzLl9tb2RlLmRlY3J5cHQodGhpcywgY2h1bmspXG4gICAgb3V0LnB1c2godGhpbmcpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQob3V0KVxufVxuRGVjaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNodW5rID0gdGhpcy5fY2FjaGUuZmx1c2goKVxuICBpZiAodGhpcy5fYXV0b3BhZGRpbmcpIHtcbiAgICByZXR1cm4gdW5wYWQodGhpcy5fbW9kZS5kZWNyeXB0KHRoaXMsIGNodW5rKSlcbiAgfSBlbHNlIGlmIChjaHVuaykge1xuICAgIHRocm93IG5ldyBFcnJvcignZGF0YSBub3QgbXVsdGlwbGUgb2YgYmxvY2sgbGVuZ3RoJylcbiAgfVxufVxuRGVjaXBoZXIucHJvdG90eXBlLnNldEF1dG9QYWRkaW5nID0gZnVuY3Rpb24gKHNldFRvKSB7XG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gISFzZXRUb1xufVxuZnVuY3Rpb24gU3BsaXR0ZXIgKCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU3BsaXR0ZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBTcGxpdHRlcigpXG4gIH1cbiAgdGhpcy5jYWNoZSA9IG5ldyBCdWZmZXIoJycpXG59XG5TcGxpdHRlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIGRhdGFdKVxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGF1dG9QYWRkaW5nKSB7XG4gIHZhciBvdXRcbiAgaWYgKGF1dG9QYWRkaW5nKSB7XG4gICAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoID4gMTYpIHtcbiAgICAgIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICAgIHJldHVybiBvdXRcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoID49IDE2KSB7XG4gICAgICBvdXQgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgICByZXR1cm4gb3V0XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsXG59XG5TcGxpdHRlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNhY2hlLmxlbmd0aCkge1xuICAgIHJldHVybiB0aGlzLmNhY2hlXG4gIH1cbn1cbmZ1bmN0aW9uIHVucGFkIChsYXN0KSB7XG4gIHZhciBwYWRkZWQgPSBsYXN0WzE1XVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBwYWRkZWQpIHtcbiAgICBpZiAobGFzdFsoaSArICgxNiAtIHBhZGRlZCkpXSAhPT0gcGFkZGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byBkZWNyeXB0IGRhdGEnKVxuICAgIH1cbiAgfVxuICBpZiAocGFkZGVkID09PSAxNikge1xuICAgIHJldHVyblxuICB9XG4gIHJldHVybiBsYXN0LnNsaWNlKDAsIDE2IC0gcGFkZGVkKVxufVxuXG52YXIgbW9kZWxpc3QgPSB7XG4gIEVDQjogcmVxdWlyZSgnLi9tb2Rlcy9lY2InKSxcbiAgQ0JDOiByZXF1aXJlKCcuL21vZGVzL2NiYycpLFxuICBDRkI6IHJlcXVpcmUoJy4vbW9kZXMvY2ZiJyksXG4gIENGQjg6IHJlcXVpcmUoJy4vbW9kZXMvY2ZiOCcpLFxuICBDRkIxOiByZXF1aXJlKCcuL21vZGVzL2NmYjEnKSxcbiAgT0ZCOiByZXF1aXJlKCcuL21vZGVzL29mYicpLFxuICBDVFI6IHJlcXVpcmUoJy4vbW9kZXMvY3RyJyksXG4gIEdDTTogcmVxdWlyZSgnLi9tb2Rlcy9jdHInKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWNpcGhlcml2IChzdWl0ZSwgcGFzc3dvcmQsIGl2KSB7XG4gIHZhciBjb25maWcgPSBtb2Rlc1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbiAgaWYgKHR5cGVvZiBpdiA9PT0gJ3N0cmluZycpIHtcbiAgICBpdiA9IG5ldyBCdWZmZXIoaXYpXG4gIH1cbiAgaWYgKHR5cGVvZiBwYXNzd29yZCA9PT0gJ3N0cmluZycpIHtcbiAgICBwYXNzd29yZCA9IG5ldyBCdWZmZXIocGFzc3dvcmQpXG4gIH1cbiAgaWYgKHBhc3N3b3JkLmxlbmd0aCAhPT0gY29uZmlnLmtleSAvIDgpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGtleSBsZW5ndGggJyArIHBhc3N3b3JkLmxlbmd0aClcbiAgfVxuICBpZiAoaXYubGVuZ3RoICE9PSBjb25maWcuaXYpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGl2IGxlbmd0aCAnICsgaXYubGVuZ3RoKVxuICB9XG4gIGlmIChjb25maWcudHlwZSA9PT0gJ3N0cmVhbScpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihtb2RlbGlzdFtjb25maWcubW9kZV0sIHBhc3N3b3JkLCBpdiwgdHJ1ZSlcbiAgfSBlbHNlIGlmIChjb25maWcudHlwZSA9PT0gJ2F1dGgnKSB7XG4gICAgcmV0dXJuIG5ldyBBdXRoQ2lwaGVyKG1vZGVsaXN0W2NvbmZpZy5tb2RlXSwgcGFzc3dvcmQsIGl2LCB0cnVlKVxuICB9XG4gIHJldHVybiBuZXcgRGVjaXBoZXIobW9kZWxpc3RbY29uZmlnLm1vZGVdLCBwYXNzd29yZCwgaXYpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURlY2lwaGVyIChzdWl0ZSwgcGFzc3dvcmQpIHtcbiAgdmFyIGNvbmZpZyA9IG1vZGVzW3N1aXRlLnRvTG93ZXJDYXNlKCldXG4gIGlmICghY29uZmlnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcbiAgfVxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBjb25maWcua2V5LCBjb25maWcuaXYpXG4gIHJldHVybiBjcmVhdGVEZWNpcGhlcml2KHN1aXRlLCBrZXlzLmtleSwga2V5cy5pdilcbn1cbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXIgPSBjcmVhdGVEZWNpcGhlclxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlcml2ID0gY3JlYXRlRGVjaXBoZXJpdlxuIl19
},{"./aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/aes.js","./authCipher":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/authCipher.js","./modes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes.js","./modes/cbc":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/cbc.js","./modes/cfb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/cfb.js","./modes/cfb1":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/cfb1.js","./modes/cfb8":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/cfb8.js","./modes/ctr":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/ctr.js","./modes/ecb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/ecb.js","./modes/ofb":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/ofb.js","./streamCipher":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/streamCipher.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","cipher-base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/node_modules/cipher-base/index.js","evp_bytestokey":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/evp_bytestokey/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/evp_bytestokey/index.js":[function(require,module,exports){
(function (Buffer){
var md5 = require('create-hash/md5')
module.exports = EVP_BytesToKey
function EVP_BytesToKey (password, salt, keyLen, ivLen) {
  if (!Buffer.isBuffer(password)) {
    password = new Buffer(password, 'binary')
  }
  if (salt && !Buffer.isBuffer(salt)) {
    salt = new Buffer(salt, 'binary')
  }
  keyLen = keyLen / 8
  ivLen = ivLen || 0
  var ki = 0
  var ii = 0
  var key = new Buffer(keyLen)
  var iv = new Buffer(ivLen)
  var addmd = 0
  var md_buf
  var i
  var bufs = []
  while (true) {
    if (addmd++ > 0) {
      bufs.push(md_buf)
    }
    bufs.push(password)
    if (salt) {
      bufs.push(salt)
    }
    md_buf = md5(Buffer.concat(bufs))
    bufs = []
    i = 0
    if (keyLen > 0) {
      while (true) {
        if (keyLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        key[ki++] = md_buf[i]
        keyLen--
        i++
      }
    }
    if (ivLen > 0 && i !== md_buf.length) {
      while (true) {
        if (ivLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        iv[ii++] = md_buf[i]
        ivLen--
        i++
      }
    }
    if (keyLen === 0 && ivLen === 0) {
      break
    }
  }
  for (i = 0; i < md_buf.length; i++) {
    md_buf[i] = 0
  }
  return {
    key: key,
    iv: iv
  }
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2V2cF9ieXRlc3Rva2V5L2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBtZDUgPSByZXF1aXJlKCdjcmVhdGUtaGFzaC9tZDUnKVxubW9kdWxlLmV4cG9ydHMgPSBFVlBfQnl0ZXNUb0tleVxuZnVuY3Rpb24gRVZQX0J5dGVzVG9LZXkgKHBhc3N3b3JkLCBzYWx0LCBrZXlMZW4sIGl2TGVuKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHBhc3N3b3JkKSkge1xuICAgIHBhc3N3b3JkID0gbmV3IEJ1ZmZlcihwYXNzd29yZCwgJ2JpbmFyeScpXG4gIH1cbiAgaWYgKHNhbHQgJiYgIUJ1ZmZlci5pc0J1ZmZlcihzYWx0KSkge1xuICAgIHNhbHQgPSBuZXcgQnVmZmVyKHNhbHQsICdiaW5hcnknKVxuICB9XG4gIGtleUxlbiA9IGtleUxlbiAvIDhcbiAgaXZMZW4gPSBpdkxlbiB8fCAwXG4gIHZhciBraSA9IDBcbiAgdmFyIGlpID0gMFxuICB2YXIga2V5ID0gbmV3IEJ1ZmZlcihrZXlMZW4pXG4gIHZhciBpdiA9IG5ldyBCdWZmZXIoaXZMZW4pXG4gIHZhciBhZGRtZCA9IDBcbiAgdmFyIG1kX2J1ZlxuICB2YXIgaVxuICB2YXIgYnVmcyA9IFtdXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgaWYgKGFkZG1kKysgPiAwKSB7XG4gICAgICBidWZzLnB1c2gobWRfYnVmKVxuICAgIH1cbiAgICBidWZzLnB1c2gocGFzc3dvcmQpXG4gICAgaWYgKHNhbHQpIHtcbiAgICAgIGJ1ZnMucHVzaChzYWx0KVxuICAgIH1cbiAgICBtZF9idWYgPSBtZDUoQnVmZmVyLmNvbmNhdChidWZzKSlcbiAgICBidWZzID0gW11cbiAgICBpID0gMFxuICAgIGlmIChrZXlMZW4gPiAwKSB7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBpZiAoa2V5TGVuID09PSAwKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaSA9PT0gbWRfYnVmLmxlbmd0aCkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAga2V5W2tpKytdID0gbWRfYnVmW2ldXG4gICAgICAgIGtleUxlbi0tXG4gICAgICAgIGkrK1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXZMZW4gPiAwICYmIGkgIT09IG1kX2J1Zi5sZW5ndGgpIHtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGlmIChpdkxlbiA9PT0gMCkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPT09IG1kX2J1Zi5sZW5ndGgpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGl2W2lpKytdID0gbWRfYnVmW2ldXG4gICAgICAgIGl2TGVuLS1cbiAgICAgICAgaSsrXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChrZXlMZW4gPT09IDAgJiYgaXZMZW4gPT09IDApIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIGZvciAoaSA9IDA7IGkgPCBtZF9idWYubGVuZ3RoOyBpKyspIHtcbiAgICBtZF9idWZbaV0gPSAwXG4gIH1cbiAgcmV0dXJuIHtcbiAgICBrZXk6IGtleSxcbiAgICBpdjogaXZcbiAgfVxufVxuIl19
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","create-hash/md5":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/md5.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/md5.js":[function(require,module,exports){
'use strict';
/*
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

var helpers = require('./helpers');

/*
 * Calculate the MD5 of an array of little-endian words, and a bit length
 */
function core_md5(x, len)
{
  /* append padding */
  x[len >> 5] |= 0x80 << ((len) % 32);
  x[(((len + 64) >>> 9) << 4) + 14] = len;

  var a =  1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d =  271733878;

  for(var i = 0; i < x.length; i += 16)
  {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;

    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
  }
  return Array(a, b, c, d);

}

/*
 * These functions implement the four basic operations the algorithm uses.
 */
function md5_cmn(q, a, b, x, s, t)
{
  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
}
function md5_ff(a, b, c, d, x, s, t)
{
  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
}
function md5_gg(a, b, c, d, x, s, t)
{
  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
}
function md5_hh(a, b, c, d, x, s, t)
{
  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5_ii(a, b, c, d, x, s, t)
{
  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add(x, y)
{
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return (msw << 16) | (lsw & 0xFFFF);
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function bit_rol(num, cnt)
{
  return (num << cnt) | (num >>> (32 - cnt));
}

module.exports = function md5(buf) {
  return helpers.hash(buf, core_md5, 16);
};
},{"./helpers":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/helpers.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/create-hash/helpers.js":[function(require,module,exports){
(function (Buffer){
'use strict';
var intSize = 4;
var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
var chrsz = 8;

function toArray(buf, bigEndian) {
  if ((buf.length % intSize) !== 0) {
    var len = buf.length + (intSize - (buf.length % intSize));
    buf = Buffer.concat([buf, zeroBuffer], len);
  }

  var arr = [];
  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
  for (var i = 0; i < buf.length; i += intSize) {
    arr.push(fn.call(buf, i));
  }
  return arr;
}

function toBuffer(arr, size, bigEndian) {
  var buf = new Buffer(size);
  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
  for (var i = 0; i < arr.length; i++) {
    fn.call(buf, arr[i], i * 4, true);
  }
  return buf;
}

function hash(buf, fn, hashSize, bigEndian) {
  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
  return toBuffer(arr, hashSize, bigEndian);
}
exports.hash = hash;
}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvaGVscGVycy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBpbnRTaXplID0gNDtcbnZhciB6ZXJvQnVmZmVyID0gbmV3IEJ1ZmZlcihpbnRTaXplKTsgemVyb0J1ZmZlci5maWxsKDApO1xudmFyIGNocnN6ID0gODtcblxuZnVuY3Rpb24gdG9BcnJheShidWYsIGJpZ0VuZGlhbikge1xuICBpZiAoKGJ1Zi5sZW5ndGggJSBpbnRTaXplKSAhPT0gMCkge1xuICAgIHZhciBsZW4gPSBidWYubGVuZ3RoICsgKGludFNpemUgLSAoYnVmLmxlbmd0aCAlIGludFNpemUpKTtcbiAgICBidWYgPSBCdWZmZXIuY29uY2F0KFtidWYsIHplcm9CdWZmZXJdLCBsZW4pO1xuICB9XG5cbiAgdmFyIGFyciA9IFtdO1xuICB2YXIgZm4gPSBiaWdFbmRpYW4gPyBidWYucmVhZEludDMyQkUgOiBidWYucmVhZEludDMyTEU7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnVmLmxlbmd0aDsgaSArPSBpbnRTaXplKSB7XG4gICAgYXJyLnB1c2goZm4uY2FsbChidWYsIGkpKTtcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiB0b0J1ZmZlcihhcnIsIHNpemUsIGJpZ0VuZGlhbikge1xuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcihzaXplKTtcbiAgdmFyIGZuID0gYmlnRW5kaWFuID8gYnVmLndyaXRlSW50MzJCRSA6IGJ1Zi53cml0ZUludDMyTEU7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgZm4uY2FsbChidWYsIGFycltpXSwgaSAqIDQsIHRydWUpO1xuICB9XG4gIHJldHVybiBidWY7XG59XG5cbmZ1bmN0aW9uIGhhc2goYnVmLCBmbiwgaGFzaFNpemUsIGJpZ0VuZGlhbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSBidWYgPSBuZXcgQnVmZmVyKGJ1Zik7XG4gIHZhciBhcnIgPSBmbih0b0FycmF5KGJ1ZiwgYmlnRW5kaWFuKSwgYnVmLmxlbmd0aCAqIGNocnN6KTtcbiAgcmV0dXJuIHRvQnVmZmVyKGFyciwgaGFzaFNpemUsIGJpZ0VuZGlhbik7XG59XG5leHBvcnRzLmhhc2ggPSBoYXNoOyJdfQ==
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/streamCipher.js":[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')

inherits(StreamCipher, Transform)
module.exports = StreamCipher
function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  iv.copy(this._prev)
  this._mode = mode
}
StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}
StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL3N0cmVhbUNpcGhlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmluaGVyaXRzKFN0cmVhbUNpcGhlciwgVHJhbnNmb3JtKVxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW1DaXBoZXJcbmZ1bmN0aW9uIFN0cmVhbUNpcGhlciAobW9kZSwga2V5LCBpdiwgZGVjcnlwdCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU3RyZWFtQ2lwaGVyKSkge1xuICAgIHJldHVybiBuZXcgU3RyZWFtQ2lwaGVyKG1vZGUsIGtleSwgaXYpXG4gIH1cbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KVxuICB0aGlzLl9wcmV2ID0gbmV3IEJ1ZmZlcihpdi5sZW5ndGgpXG4gIHRoaXMuX2NhY2hlID0gbmV3IEJ1ZmZlcignJylcbiAgdGhpcy5fc2VjQ2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxuICB0aGlzLl9kZWNyeXB0ID0gZGVjcnlwdFxuICBpdi5jb3B5KHRoaXMuX3ByZXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgcmV0dXJuIHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaywgdGhpcy5fZGVjcnlwdClcbn1cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9jaXBoZXIuc2NydWIoKVxufVxuIl19
},{"./aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/aes.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","cipher-base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/node_modules/cipher-base/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/ofb.js":[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL29mYi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5mdW5jdGlvbiBnZXRCbG9jayAoc2VsZikge1xuICBzZWxmLl9wcmV2ID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICByZXR1cm4gc2VsZi5fcHJldlxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmspIHtcbiAgd2hpbGUgKHNlbGYuX2NhY2hlLmxlbmd0aCA8IGNodW5rLmxlbmd0aCkge1xuICAgIHNlbGYuX2NhY2hlID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fY2FjaGUsIGdldEJsb2NrKHNlbGYpXSlcbiAgfVxuXG4gIHZhciBwYWQgPSBzZWxmLl9jYWNoZS5zbGljZSgwLCBjaHVuay5sZW5ndGgpXG4gIHNlbGYuX2NhY2hlID0gc2VsZi5fY2FjaGUuc2xpY2UoY2h1bmsubGVuZ3RoKVxuICByZXR1cm4geG9yKGNodW5rLCBwYWQpXG59XG4iXX0=
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/node_modules/buffer-xor/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/ecb.js":[function(require,module,exports){
exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}
exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}

},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/ctr.js":[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}

function getBlock (self) {
  var out = self._cipher.encryptBlock(self._prev)
  incr32(self._prev)
  return out
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2N0ci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5mdW5jdGlvbiBpbmNyMzIgKGl2KSB7XG4gIHZhciBsZW4gPSBpdi5sZW5ndGhcbiAgdmFyIGl0ZW1cbiAgd2hpbGUgKGxlbi0tKSB7XG4gICAgaXRlbSA9IGl2LnJlYWRVSW50OChsZW4pXG4gICAgaWYgKGl0ZW0gPT09IDI1NSkge1xuICAgICAgaXYud3JpdGVVSW50OCgwLCBsZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZW0rK1xuICAgICAgaXYud3JpdGVVSW50OChpdGVtLCBsZW4pXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRCbG9jayAoc2VsZikge1xuICB2YXIgb3V0ID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICBpbmNyMzIoc2VsZi5fcHJldilcbiAgcmV0dXJuIG91dFxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmspIHtcbiAgd2hpbGUgKHNlbGYuX2NhY2hlLmxlbmd0aCA8IGNodW5rLmxlbmd0aCkge1xuICAgIHNlbGYuX2NhY2hlID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fY2FjaGUsIGdldEJsb2NrKHNlbGYpXSlcbiAgfVxuICB2YXIgcGFkID0gc2VsZi5fY2FjaGUuc2xpY2UoMCwgY2h1bmsubGVuZ3RoKVxuICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGNodW5rLmxlbmd0aClcbiAgcmV0dXJuIHhvcihjaHVuaywgcGFkKVxufVxuIl19
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/node_modules/buffer-xor/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/cfb8.js":[function(require,module,exports){
(function (Buffer){
function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam
  self._prev = Buffer.concat([self._prev.slice(1), new Buffer([decrypt ? byteParam : out])])
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NmYjguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBlbmNyeXB0Qnl0ZSAoc2VsZiwgYnl0ZVBhcmFtLCBkZWNyeXB0KSB7XG4gIHZhciBwYWQgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gIHZhciBvdXQgPSBwYWRbMF0gXiBieXRlUGFyYW1cbiAgc2VsZi5fcHJldiA9IEJ1ZmZlci5jb25jYXQoW3NlbGYuX3ByZXYuc2xpY2UoMSksIG5ldyBCdWZmZXIoW2RlY3J5cHQgPyBieXRlUGFyYW0gOiBvdXRdKV0pXG4gIHJldHVybiBvdXRcbn1cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaywgZGVjcnlwdCkge1xuICB2YXIgbGVuID0gY2h1bmsubGVuZ3RoXG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKGxlbilcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0W2ldID0gZW5jcnlwdEJ5dGUoc2VsZiwgY2h1bmtbaV0sIGRlY3J5cHQpXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuIl19
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/cfb1.js":[function(require,module,exports){
(function (Buffer){
function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}
function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = new Buffer(buffer.length)
  buffer = Buffer.concat([buffer, new Buffer([value])])
  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NmYjEuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGVuY3J5cHRCeXRlIChzZWxmLCBieXRlUGFyYW0sIGRlY3J5cHQpIHtcbiAgdmFyIHBhZFxuICB2YXIgaSA9IC0xXG4gIHZhciBsZW4gPSA4XG4gIHZhciBvdXQgPSAwXG4gIHZhciBiaXQsIHZhbHVlXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBwYWQgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gICAgYml0ID0gKGJ5dGVQYXJhbSAmICgxIDw8ICg3IC0gaSkpKSA/IDB4ODAgOiAwXG4gICAgdmFsdWUgPSBwYWRbMF0gXiBiaXRcbiAgICBvdXQgKz0gKCh2YWx1ZSAmIDB4ODApID4+IChpICUgOCkpXG4gICAgc2VsZi5fcHJldiA9IHNoaWZ0SW4oc2VsZi5fcHJldiwgZGVjcnlwdCA/IGJpdCA6IHZhbHVlKVxuICB9XG4gIHJldHVybiBvdXRcbn1cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaywgZGVjcnlwdCkge1xuICB2YXIgbGVuID0gY2h1bmsubGVuZ3RoXG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKGxlbilcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0W2ldID0gZW5jcnlwdEJ5dGUoc2VsZiwgY2h1bmtbaV0sIGRlY3J5cHQpXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuZnVuY3Rpb24gc2hpZnRJbiAoYnVmZmVyLCB2YWx1ZSkge1xuICB2YXIgbGVuID0gYnVmZmVyLmxlbmd0aFxuICB2YXIgaSA9IC0xXG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKGJ1ZmZlci5sZW5ndGgpXG4gIGJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoW2J1ZmZlciwgbmV3IEJ1ZmZlcihbdmFsdWVdKV0pXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBidWZmZXJbaV0gPDwgMSB8IGJ1ZmZlcltpICsgMV0gPj4gKDcpXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuIl19
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/cfb.js":[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

exports.encrypt = function (self, data, decrypt) {
  var out = new Buffer('')
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = new Buffer('')
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}
function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NmYi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgZGF0YSwgZGVjcnlwdCkge1xuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcignJylcbiAgdmFyIGxlblxuXG4gIHdoaWxlIChkYXRhLmxlbmd0aCkge1xuICAgIGlmIChzZWxmLl9jYWNoZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHNlbGYuX2NhY2hlID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICAgICAgc2VsZi5fcHJldiA9IG5ldyBCdWZmZXIoJycpXG4gICAgfVxuXG4gICAgaWYgKHNlbGYuX2NhY2hlLmxlbmd0aCA8PSBkYXRhLmxlbmd0aCkge1xuICAgICAgbGVuID0gc2VsZi5fY2FjaGUubGVuZ3RoXG4gICAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFtvdXQsIGVuY3J5cHRTdGFydChzZWxmLCBkYXRhLnNsaWNlKDAsIGxlbiksIGRlY3J5cHQpXSlcbiAgICAgIGRhdGEgPSBkYXRhLnNsaWNlKGxlbilcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ID0gQnVmZmVyLmNvbmNhdChbb3V0LCBlbmNyeXB0U3RhcnQoc2VsZiwgZGF0YSwgZGVjcnlwdCldKVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3V0XG59XG5mdW5jdGlvbiBlbmNyeXB0U3RhcnQgKHNlbGYsIGRhdGEsIGRlY3J5cHQpIHtcbiAgdmFyIGxlbiA9IGRhdGEubGVuZ3RoXG4gIHZhciBvdXQgPSB4b3IoZGF0YSwgc2VsZi5fY2FjaGUpXG4gIHNlbGYuX2NhY2hlID0gc2VsZi5fY2FjaGUuc2xpY2UobGVuKVxuICBzZWxmLl9wcmV2ID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fcHJldiwgZGVjcnlwdCA/IGRhdGEgOiBvdXRdKVxuICByZXR1cm4gb3V0XG59XG4iXX0=
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/node_modules/buffer-xor/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes/cbc.js":[function(require,module,exports){
var xor = require('buffer-xor')

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}

},{"buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/node_modules/buffer-xor/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/modes.js":[function(require,module,exports){
exports['aes-128-ecb'] = {
  cipher: 'AES',
  key: 128,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-192-ecb'] = {
  cipher: 'AES',
  key: 192,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-256-ecb'] = {
  cipher: 'AES',
  key: 256,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-128-cbc'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes-192-cbc'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes-256-cbc'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes128'] = exports['aes-128-cbc']
exports['aes192'] = exports['aes-192-cbc']
exports['aes256'] = exports['aes-256-cbc']
exports['aes-128-cfb'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-192-cfb'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-256-cfb'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-128-cfb8'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-192-cfb8'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-256-cfb8'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-128-cfb1'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-192-cfb1'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-256-cfb1'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-128-ofb'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-192-ofb'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-256-ofb'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-128-ctr'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-192-ctr'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-256-ctr'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-128-gcm'] = {
  cipher: 'AES',
  key: 128,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}
exports['aes-192-gcm'] = {
  cipher: 'AES',
  key: 192,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}
exports['aes-256-gcm'] = {
  cipher: 'AES',
  key: 256,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}

},{}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/authCipher.js":[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')
var GHASH = require('./ghash')
var xor = require('buffer-xor')
inherits(StreamCipher, Transform)
module.exports = StreamCipher

function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._finID = Buffer.concat([iv, new Buffer([0, 0, 0, 1])])
  iv = Buffer.concat([iv, new Buffer([0, 0, 0, 2])])
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  iv.copy(this._prev)
  this._mode = mode
  var h = new Buffer(4)
  h.fill(0)
  this._ghash = new GHASH(this._cipher.encryptBlock(h))
  this._authTag = null
  this._called = false
}
StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = new Buffer(rump)
      rump.fill(0)
      this._ghash.update(rump)
    }
  }
  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}
StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) {
    throw new Error('Unsupported state or unable to authenticate data')
  }
  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt) {
    if (xorTest(tag, this._authTag)) {
      throw new Error('Unsupported state or unable to authenticate data')
    }
  } else {
    this._authTag = tag
  }
  this._cipher.scrub()
}
StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (!this._decrypt && Buffer.isBuffer(this._authTag)) {
    return this._authTag
  } else {
    throw new Error('Attempting to get auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (this._decrypt) {
    this._authTag = tag
  } else {
    throw new Error('Attempting to set auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (!this._called) {
    this._ghash.update(buf)
    this._alen += buf.length
  } else {
    throw new Error('Attempting to set AAD in unsupported state')
  }
}
function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) {
    out++
  }
  var len = Math.min(a.length, b.length)
  var i = -1
  while (++i < len) {
    out += (a[i] ^ b[i])
  }
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2F1dGhDaXBoZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEdIQVNIID0gcmVxdWlyZSgnLi9naGFzaCcpXG52YXIgeG9yID0gcmVxdWlyZSgnYnVmZmVyLXhvcicpXG5pbmhlcml0cyhTdHJlYW1DaXBoZXIsIFRyYW5zZm9ybSlcbm1vZHVsZS5leHBvcnRzID0gU3RyZWFtQ2lwaGVyXG5cbmZ1bmN0aW9uIFN0cmVhbUNpcGhlciAobW9kZSwga2V5LCBpdiwgZGVjcnlwdCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU3RyZWFtQ2lwaGVyKSkge1xuICAgIHJldHVybiBuZXcgU3RyZWFtQ2lwaGVyKG1vZGUsIGtleSwgaXYpXG4gIH1cbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5fZmluSUQgPSBCdWZmZXIuY29uY2F0KFtpdiwgbmV3IEJ1ZmZlcihbMCwgMCwgMCwgMV0pXSlcbiAgaXYgPSBCdWZmZXIuY29uY2F0KFtpdiwgbmV3IEJ1ZmZlcihbMCwgMCwgMCwgMl0pXSlcbiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KVxuICB0aGlzLl9wcmV2ID0gbmV3IEJ1ZmZlcihpdi5sZW5ndGgpXG4gIHRoaXMuX2NhY2hlID0gbmV3IEJ1ZmZlcignJylcbiAgdGhpcy5fc2VjQ2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxuICB0aGlzLl9kZWNyeXB0ID0gZGVjcnlwdFxuICB0aGlzLl9hbGVuID0gMFxuICB0aGlzLl9sZW4gPSAwXG4gIGl2LmNvcHkodGhpcy5fcHJldilcbiAgdGhpcy5fbW9kZSA9IG1vZGVcbiAgdmFyIGggPSBuZXcgQnVmZmVyKDQpXG4gIGguZmlsbCgwKVxuICB0aGlzLl9naGFzaCA9IG5ldyBHSEFTSCh0aGlzLl9jaXBoZXIuZW5jcnlwdEJsb2NrKGgpKVxuICB0aGlzLl9hdXRoVGFnID0gbnVsbFxuICB0aGlzLl9jYWxsZWQgPSBmYWxzZVxufVxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIGlmICghdGhpcy5fY2FsbGVkICYmIHRoaXMuX2FsZW4pIHtcbiAgICB2YXIgcnVtcCA9IDE2IC0gKHRoaXMuX2FsZW4gJSAxNilcbiAgICBpZiAocnVtcCA8IDE2KSB7XG4gICAgICBydW1wID0gbmV3IEJ1ZmZlcihydW1wKVxuICAgICAgcnVtcC5maWxsKDApXG4gICAgICB0aGlzLl9naGFzaC51cGRhdGUocnVtcClcbiAgICB9XG4gIH1cbiAgdGhpcy5fY2FsbGVkID0gdHJ1ZVxuICB2YXIgb3V0ID0gdGhpcy5fbW9kZS5lbmNyeXB0KHRoaXMsIGNodW5rKVxuICBpZiAodGhpcy5fZGVjcnlwdCkge1xuICAgIHRoaXMuX2doYXNoLnVwZGF0ZShjaHVuaylcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9naGFzaC51cGRhdGUob3V0KVxuICB9XG4gIHRoaXMuX2xlbiArPSBjaHVuay5sZW5ndGhcbiAgcmV0dXJuIG91dFxufVxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLl9kZWNyeXB0ICYmICF0aGlzLl9hdXRoVGFnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBzdGF0ZSBvciB1bmFibGUgdG8gYXV0aGVudGljYXRlIGRhdGEnKVxuICB9XG4gIHZhciB0YWcgPSB4b3IodGhpcy5fZ2hhc2guZmluYWwodGhpcy5fYWxlbiAqIDgsIHRoaXMuX2xlbiAqIDgpLCB0aGlzLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHRoaXMuX2ZpbklEKSlcbiAgaWYgKHRoaXMuX2RlY3J5cHQpIHtcbiAgICBpZiAoeG9yVGVzdCh0YWcsIHRoaXMuX2F1dGhUYWcpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHN0YXRlIG9yIHVuYWJsZSB0byBhdXRoZW50aWNhdGUgZGF0YScpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMuX2F1dGhUYWcgPSB0YWdcbiAgfVxuICB0aGlzLl9jaXBoZXIuc2NydWIoKVxufVxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5nZXRBdXRoVGFnID0gZnVuY3Rpb24gZ2V0QXV0aFRhZyAoKSB7XG4gIGlmICghdGhpcy5fZGVjcnlwdCAmJiBCdWZmZXIuaXNCdWZmZXIodGhpcy5fYXV0aFRhZykpIHtcbiAgICByZXR1cm4gdGhpcy5fYXV0aFRhZ1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGluZyB0byBnZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxuICB9XG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLnNldEF1dGhUYWcgPSBmdW5jdGlvbiBzZXRBdXRoVGFnICh0YWcpIHtcbiAgaWYgKHRoaXMuX2RlY3J5cHQpIHtcbiAgICB0aGlzLl9hdXRoVGFnID0gdGFnXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0aW5nIHRvIHNldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG4gIH1cbn1cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuc2V0QUFEID0gZnVuY3Rpb24gc2V0QUFEIChidWYpIHtcbiAgaWYgKCF0aGlzLl9jYWxsZWQpIHtcbiAgICB0aGlzLl9naGFzaC51cGRhdGUoYnVmKVxuICAgIHRoaXMuX2FsZW4gKz0gYnVmLmxlbmd0aFxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGluZyB0byBzZXQgQUFEIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbiAgfVxufVxuZnVuY3Rpb24geG9yVGVzdCAoYSwgYikge1xuICB2YXIgb3V0ID0gMFxuICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgb3V0KytcbiAgfVxuICB2YXIgbGVuID0gTWF0aC5taW4oYS5sZW5ndGgsIGIubGVuZ3RoKVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXQgKz0gKGFbaV0gXiBiW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cbiJdfQ==
},{"./aes":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/aes.js","./ghash":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/ghash.js","buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","buffer-xor":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/node_modules/buffer-xor/index.js","cipher-base":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/node_modules/cipher-base/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/node_modules/cipher-base/index.js":[function(require,module,exports){
(function (Buffer){
var Transform = require('stream').Transform
var inherits = require('inherits')
var StringDecoder = require('string_decoder').StringDecoder
module.exports = CipherBase
inherits(CipherBase, Transform)
function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  this._decoder = null
  this._encoding = null
}
CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = new Buffer(data, inputEnc)
  }
  var outData = this._update(data)
  if (this.hashMode) {
    return this
  }
  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }
  return outData
}

CipherBase.prototype.setAutoPadding = function () {}

CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this._final())
  } catch (e) {
    err = e
  } finally {
    done(err)
  }
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this._final() || new Buffer('')
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, final) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }
  if (this._encoding !== enc) {
    throw new Error('can\'t switch encodings')
  }
  var out = this._decoder.write(value)
  if (final) {
    out += this._decoder.end()
  }
  return out
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL25vZGVfbW9kdWxlcy9jaXBoZXItYmFzZS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdzdHJlYW0nKS5UcmFuc2Zvcm1cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXInKS5TdHJpbmdEZWNvZGVyXG5tb2R1bGUuZXhwb3J0cyA9IENpcGhlckJhc2VcbmluaGVyaXRzKENpcGhlckJhc2UsIFRyYW5zZm9ybSlcbmZ1bmN0aW9uIENpcGhlckJhc2UgKGhhc2hNb2RlKSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuaGFzaE1vZGUgPSB0eXBlb2YgaGFzaE1vZGUgPT09ICdzdHJpbmcnXG4gIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgdGhpc1toYXNoTW9kZV0gPSB0aGlzLl9maW5hbE9yRGlnZXN0XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5maW5hbCA9IHRoaXMuX2ZpbmFsT3JEaWdlc3RcbiAgfVxuICB0aGlzLl9kZWNvZGVyID0gbnVsbFxuICB0aGlzLl9lbmNvZGluZyA9IG51bGxcbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBpbnB1dEVuYywgb3V0cHV0RW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBkYXRhID0gbmV3IEJ1ZmZlcihkYXRhLCBpbnB1dEVuYylcbiAgfVxuICB2YXIgb3V0RGF0YSA9IHRoaXMuX3VwZGF0ZShkYXRhKVxuICBpZiAodGhpcy5oYXNoTW9kZSkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cbiAgaWYgKG91dHB1dEVuYykge1xuICAgIG91dERhdGEgPSB0aGlzLl90b1N0cmluZyhvdXREYXRhLCBvdXRwdXRFbmMpXG4gIH1cbiAgcmV0dXJuIG91dERhdGFcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QXV0b1BhZGRpbmcgPSBmdW5jdGlvbiAoKSB7fVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5nZXRBdXRoVGFnID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBnZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBdXRoVGFnID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBzZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBQUQgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhYWQgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGRhdGEsIF8sIG5leHQpIHtcbiAgdmFyIGVyclxuICB0cnkge1xuICAgIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgICB0aGlzLl91cGRhdGUoZGF0YSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXNoKHRoaXMuX3VwZGF0ZShkYXRhKSlcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnIgPSBlXG4gIH0gZmluYWxseSB7XG4gICAgbmV4dChlcnIpXG4gIH1cbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLl9mbHVzaCA9IGZ1bmN0aW9uIChkb25lKSB7XG4gIHZhciBlcnJcbiAgdHJ5IHtcbiAgICB0aGlzLnB1c2godGhpcy5fZmluYWwoKSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfSBmaW5hbGx5IHtcbiAgICBkb25lKGVycilcbiAgfVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZpbmFsT3JEaWdlc3QgPSBmdW5jdGlvbiAob3V0cHV0RW5jKSB7XG4gIHZhciBvdXREYXRhID0gdGhpcy5fZmluYWwoKSB8fCBuZXcgQnVmZmVyKCcnKVxuICBpZiAob3V0cHV0RW5jKSB7XG4gICAgb3V0RGF0YSA9IHRoaXMuX3RvU3RyaW5nKG91dERhdGEsIG91dHB1dEVuYywgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb3V0RGF0YVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fdG9TdHJpbmcgPSBmdW5jdGlvbiAodmFsdWUsIGVuYywgZmluYWwpIHtcbiAgaWYgKCF0aGlzLl9kZWNvZGVyKSB7XG4gICAgdGhpcy5fZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYylcbiAgICB0aGlzLl9lbmNvZGluZyA9IGVuY1xuICB9XG4gIGlmICh0aGlzLl9lbmNvZGluZyAhPT0gZW5jKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYW5cXCd0IHN3aXRjaCBlbmNvZGluZ3MnKVxuICB9XG4gIHZhciBvdXQgPSB0aGlzLl9kZWNvZGVyLndyaXRlKHZhbHVlKVxuICBpZiAoZmluYWwpIHtcbiAgICBvdXQgKz0gdGhpcy5fZGVjb2Rlci5lbmQoKVxuICB9XG4gIHJldHVybiBvdXRcbn1cbiJdfQ==
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js","stream":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/stream-browserify/index.js","string_decoder":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/string_decoder/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/node_modules/buffer-xor/index.js":[function(require,module,exports){
(function (Buffer){
module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL25vZGVfbW9kdWxlcy9idWZmZXIteG9yL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhvciAoYSwgYikge1xuICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oYS5sZW5ndGgsIGIubGVuZ3RoKVxuICB2YXIgYnVmZmVyID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGJ1ZmZlcltpXSA9IGFbaV0gXiBiW2ldXG4gIH1cblxuICByZXR1cm4gYnVmZmVyXG59XG4iXX0=
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/ghash.js":[function(require,module,exports){
(function (Buffer){
var zeros = new Buffer(16)
zeros.fill(0)
module.exports = GHASH
function GHASH (key) {
  this.h = key
  this.state = new Buffer(16)
  this.state.fill(0)
  this.cache = new Buffer('')
}
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsb_Vi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - i % 8))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi = xor(Zi, Vi)
    }

    // Store the value of LSB(V_i)
    lsb_Vi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsb_Vi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}
GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}
GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, zeros], 16))
  }
  this.ghash(fromArray([
    0, abl,
    0, bl
  ]))
  return this.state
}

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}
function fromArray (out) {
  out = out.map(fixup_uint32)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}
var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function xor (a, b) {
  return [
    a[0] ^ b[0],
    a[1] ^ b[1],
    a[2] ^ b[2],
    a[3] ^ b[3]
  ]
}

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2doYXNoLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciB6ZXJvcyA9IG5ldyBCdWZmZXIoMTYpXG56ZXJvcy5maWxsKDApXG5tb2R1bGUuZXhwb3J0cyA9IEdIQVNIXG5mdW5jdGlvbiBHSEFTSCAoa2V5KSB7XG4gIHRoaXMuaCA9IGtleVxuICB0aGlzLnN0YXRlID0gbmV3IEJ1ZmZlcigxNilcbiAgdGhpcy5zdGF0ZS5maWxsKDApXG4gIHRoaXMuY2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxufVxuLy8gZnJvbSBodHRwOi8vYml0d2lzZXNoaWZ0bGVmdC5naXRodWIuaW8vc2pjbC9kb2Mvc3ltYm9scy9zcmMvY29yZV9nY20uanMuaHRtbFxuLy8gYnkgSnVobyBWw6Row6QtSGVydHR1YVxuR0hBU0gucHJvdG90eXBlLmdoYXNoID0gZnVuY3Rpb24gKGJsb2NrKSB7XG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGJsb2NrLmxlbmd0aCkge1xuICAgIHRoaXMuc3RhdGVbaV0gXj0gYmxvY2tbaV1cbiAgfVxuICB0aGlzLl9tdWx0aXBseSgpXG59XG5cbkdIQVNILnByb3RvdHlwZS5fbXVsdGlwbHkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBWaSA9IHRvQXJyYXkodGhpcy5oKVxuICB2YXIgWmkgPSBbMCwgMCwgMCwgMF1cbiAgdmFyIGosIHhpLCBsc2JfVmlcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgMTI4KSB7XG4gICAgeGkgPSAodGhpcy5zdGF0ZVt+fihpIC8gOCldICYgKDEgPDwgKDcgLSBpICUgOCkpKSAhPT0gMFxuICAgIGlmICh4aSkge1xuICAgICAgLy8gWl9pKzEgPSBaX2kgXiBWX2lcbiAgICAgIFppID0geG9yKFppLCBWaSlcbiAgICB9XG5cbiAgICAvLyBTdG9yZSB0aGUgdmFsdWUgb2YgTFNCKFZfaSlcbiAgICBsc2JfVmkgPSAoVmlbM10gJiAxKSAhPT0gMFxuXG4gICAgLy8gVl9pKzEgPSBWX2kgPj4gMVxuICAgIGZvciAoaiA9IDM7IGogPiAwOyBqLS0pIHtcbiAgICAgIFZpW2pdID0gKFZpW2pdID4+PiAxKSB8ICgoVmlbaiAtIDFdICYgMSkgPDwgMzEpXG4gICAgfVxuICAgIFZpWzBdID0gVmlbMF0gPj4+IDFcblxuICAgIC8vIElmIExTQihWX2kpIGlzIDEsIFZfaSsxID0gKFZfaSA+PiAxKSBeIFJcbiAgICBpZiAobHNiX1ZpKSB7XG4gICAgICBWaVswXSA9IFZpWzBdIF4gKDB4ZTEgPDwgMjQpXG4gICAgfVxuICB9XG4gIHRoaXMuc3RhdGUgPSBmcm9tQXJyYXkoWmkpXG59XG5HSEFTSC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGJ1Zikge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgYnVmXSlcbiAgdmFyIGNodW5rXG4gIHdoaWxlICh0aGlzLmNhY2hlLmxlbmd0aCA+PSAxNikge1xuICAgIGNodW5rID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNilcbiAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICB0aGlzLmdoYXNoKGNodW5rKVxuICB9XG59XG5HSEFTSC5wcm90b3R5cGUuZmluYWwgPSBmdW5jdGlvbiAoYWJsLCBibCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGgpIHtcbiAgICB0aGlzLmdoYXNoKEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIHplcm9zXSwgMTYpKVxuICB9XG4gIHRoaXMuZ2hhc2goZnJvbUFycmF5KFtcbiAgICAwLCBhYmwsXG4gICAgMCwgYmxcbiAgXSkpXG4gIHJldHVybiB0aGlzLnN0YXRlXG59XG5cbmZ1bmN0aW9uIHRvQXJyYXkgKGJ1Zikge1xuICByZXR1cm4gW1xuICAgIGJ1Zi5yZWFkVUludDMyQkUoMCksXG4gICAgYnVmLnJlYWRVSW50MzJCRSg0KSxcbiAgICBidWYucmVhZFVJbnQzMkJFKDgpLFxuICAgIGJ1Zi5yZWFkVUludDMyQkUoMTIpXG4gIF1cbn1cbmZ1bmN0aW9uIGZyb21BcnJheSAob3V0KSB7XG4gIG91dCA9IG91dC5tYXAoZml4dXBfdWludDMyKVxuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcigxNilcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzBdLCAwKVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMV0sIDQpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsyXSwgOClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzNdLCAxMilcbiAgcmV0dXJuIGJ1ZlxufVxudmFyIHVpbnRfbWF4ID0gTWF0aC5wb3coMiwgMzIpXG5mdW5jdGlvbiBmaXh1cF91aW50MzIgKHgpIHtcbiAgdmFyIHJldCwgeF9wb3NcbiAgcmV0ID0geCA+IHVpbnRfbWF4IHx8IHggPCAwID8gKHhfcG9zID0gTWF0aC5hYnMoeCkgJSB1aW50X21heCwgeCA8IDAgPyB1aW50X21heCAtIHhfcG9zIDogeF9wb3MpIDogeFxuICByZXR1cm4gcmV0XG59XG5mdW5jdGlvbiB4b3IgKGEsIGIpIHtcbiAgcmV0dXJuIFtcbiAgICBhWzBdIF4gYlswXSxcbiAgICBhWzFdIF4gYlsxXSxcbiAgICBhWzJdIF4gYlsyXSxcbiAgICBhWzNdIF4gYlszXVxuICBdXG59XG4iXX0=
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/crypto-browserify/node_modules/browserify-cipher/node_modules/browserify-aes/aes.js":[function(require,module,exports){
(function (Buffer){
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec

// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function scrub_vec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
  return false
}

function Global () {
  this.SBOX = []
  this.INV_SBOX = []
  this.SUB_MIX = [[], [], [], []]
  this.INV_SUB_MIX = [[], [], [], []]
  this.init()
  this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
}

Global.prototype.init = function () {
  var d, i, sx, t, x, x2, x4, x8, xi, _i
  d = (function () {
    var _i, _results
    _results = []
    for (i = _i = 0; _i < 256; i = ++_i) {
      if (i < 128) {
        _results.push(i << 1)
      } else {
        _results.push((i << 1) ^ 0x11b)
      }
    }
    return _results
  })()
  x = 0
  xi = 0
  for (i = _i = 0; _i < 256; i = ++_i) {
    sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    this.SBOX[x] = sx
    this.INV_SBOX[sx] = x
    x2 = d[x]
    x4 = d[x2]
    x8 = d[x4]
    t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    this.SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    this.SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    this.SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    this.SUB_MIX[3][x] = t
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    this.INV_SUB_MIX[3][sx] = t
    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }
  return true
}

var G = new Global()

AES.blockSize = 4 * 4

AES.prototype.blockSize = AES.blockSize

AES.keySize = 256 / 8

AES.prototype.keySize = AES.keySize

function bufferToArray (buf) {
  var len = buf.length / 4
  var out = new Array(len)
  var i = -1
  while (++i < len) {
    out[i] = buf.readUInt32BE(i * 4)
  }
  return out
}
function AES (key) {
  this._key = bufferToArray(key)
  this._doReset()
}

AES.prototype._doReset = function () {
  var invKsRow, keySize, keyWords, ksRow, ksRows, t
  keyWords = this._key
  keySize = keyWords.length
  this._nRounds = keySize + 6
  ksRows = (this._nRounds + 1) * 4
  this._keySchedule = []
  for (ksRow = 0; ksRow < ksRows; ksRow++) {
    this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t)
  }
  this._invKeySchedule = []
  for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {
    ksRow = ksRows - invKsRow
    t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)]
    this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]]
  }
  return true
}

AES.prototype.encryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var temp = [M[3], M[1]]
  M[1] = temp[0]
  M[3] = temp[1]
  var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrub_vec(this._keySchedule)
  scrub_vec(this._invKeySchedule)
  scrub_vec(this._key)
}

AES.prototype._doCryptBlock = function (M, keySchedule, SUB_MIX, SBOX) {
  var ksRow, s0, s1, s2, s3, t0, t1, t2, t3

  s0 = M[0] ^ keySchedule[0]
  s1 = M[1] ^ keySchedule[1]
  s2 = M[2] ^ keySchedule[2]
  s3 = M[3] ^ keySchedule[3]
  ksRow = 4
  for (var round = 1; round < this._nRounds; round++) {
    t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }
  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  return [
    fixup_uint32(t0),
    fixup_uint32(t1),
    fixup_uint32(t2),
    fixup_uint32(t3)
  ]
}

exports.AES = AES

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"buffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/staging/apps/node_modules/seedrandom/lib/xorwow.js":[function(require,module,exports){
// A Javascript implementaion of the "xorwow" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  // Set up generator function.
  me.next = function() {
    var t = (me.x ^ (me.x >>> 2));
    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;
    return (me.d = (me.d + 362437 | 0)) +
       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;
  };

  me.x = 0;
  me.y = 0;
  me.z = 0;
  me.w = 0;
  me.v = 0;

  if (seed === (seed | 0)) {
    // Integer seed.
    me.x = seed;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 64; k++) {
    me.x ^= strseed.charCodeAt(k) | 0;
    if (k == strseed.length) {
      me.d = me.x << 10 ^ me.x >>> 4;
    }
    me.next();
  }
}

function copy(f, t) {
  t.x = f.x;
  t.y = f.y;
  t.z = f.z;
  t.w = f.w;
  t.v = f.v;
  t.d = f.d;
  return t;
}

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.xorwow = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);



},{}],"/home/ubuntu/staging/apps/node_modules/seedrandom/lib/xorshift7.js":[function(require,module,exports){
// A Javascript implementaion of the "xorshift7" algorithm by
// François Panneton and Pierre L'ecuyer:
// "On the Xorgshift Random Number Generators"
// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf

(function(global, module, define) {

function XorGen(seed) {
  var me = this;

  // Set up generator function.
  me.next = function() {
    // Update xor generator.
    var X = me.x, i = me.i, t, v, w;
    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);
    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);
    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);
    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);
    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);
    X[i] = v;
    me.i = (i + 1) & 7;
    return v;
  };

  function init(me, seed) {
    var j, w, X = [];

    if (seed === (seed | 0)) {
      // Seed state array using a 32-bit integer.
      w = X[0] = seed;
    } else {
      // Seed state using a string.
      seed = '' + seed;
      for (j = 0; j < seed.length; ++j) {
        X[j & 7] = (X[j & 7] << 15) ^
            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);
      }
    }
    // Enforce an array length of 8, not all zeroes.
    while (X.length < 8) X.push(0);
    for (j = 0; j < 8 && X[j] === 0; ++j);
    if (j == 8) w = X[7] = -1; else w = X[j];

    me.x = X;
    me.i = 0;

    // Discard an initial 256 values.
    for (j = 256; j > 0; --j) {
      me.next();
    }
  }

  init(me, seed);
}

function copy(f, t) {
  t.x = f.x.slice();
  t.i = f.i;
  return t;
}

function impl(seed, opts) {
  if (seed == null) seed = +(new Date);
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (state.x) copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.xorshift7 = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);


},{}],"/home/ubuntu/staging/apps/node_modules/seedrandom/lib/xor4096.js":[function(require,module,exports){
// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.
//
// This fast non-cryptographic random number generator is designed for
// use in Monte-Carlo algorithms. It combines a long-period xorshift
// generator with a Weyl generator, and it passes all common batteries
// of stasticial tests for randomness while consuming only a few nanoseconds
// for each prng generated.  For background on the generator, see Brent's
// paper: "Some long-period random number generators using shifts and xors."
// http://arxiv.org/pdf/1104.3115.pdf
//
// Usage:
//
// var xor4096 = require('xor4096');
// random = xor4096(1);                        // Seed with int32 or string.
// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.
// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.
//
// For nonzero numeric keys, this impelementation provides a sequence
// identical to that by Brent's xorgens 3 implementaion in C.  This
// implementation also provides for initalizing the generator with
// string seeds, or for saving and restoring the state of the generator.
//
// On Chrome, this prng benchmarks about 2.1 times slower than
// Javascript's built-in Math.random().

(function(global, module, define) {

function XorGen(seed) {
  var me = this;

  // Set up generator function.
  me.next = function() {
    var w = me.w,
        X = me.X, i = me.i, t, v;
    // Update Weyl generator.
    me.w = w = (w + 0x61c88647) | 0;
    // Update xor generator.
    v = X[(i + 34) & 127];
    t = X[i = ((i + 1) & 127)];
    v ^= v << 13;
    t ^= t << 17;
    v ^= v >>> 15;
    t ^= t >>> 12;
    // Update Xor generator array state.
    v = X[i] = v ^ t;
    me.i = i;
    // Result is the combination.
    return (v + (w ^ (w >>> 16))) | 0;
  };

  function init(me, seed) {
    var t, v, i, j, w, X = [], limit = 128;
    if (seed === (seed | 0)) {
      // Numeric seeds initialize v, which is used to generates X.
      v = seed;
      seed = null;
    } else {
      // String seeds are mixed into v and X one character at a time.
      seed = seed + '\0';
      v = 0;
      limit = Math.max(limit, seed.length);
    }
    // Initialize circular array and weyl value.
    for (i = 0, j = -32; j < limit; ++j) {
      // Put the unicode characters into the array, and shuffle them.
      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);
      // After 32 shuffles, take v as the starting w value.
      if (j === 0) w = v;
      v ^= v << 10;
      v ^= v >>> 15;
      v ^= v << 4;
      v ^= v >>> 13;
      if (j >= 0) {
        w = (w + 0x61c88647) | 0;     // Weyl.
        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.
        i = (0 == t) ? i + 1 : 0;     // Count zeroes.
      }
    }
    // We have detected all zeroes; make the key nonzero.
    if (i >= 128) {
      X[(seed && seed.length || 0) & 127] = -1;
    }
    // Run the generator 512 times to further mix the state before using it.
    // Factoring this as a function slows the main generator, so it is just
    // unrolled here.  The weyl generator is not advanced while warming up.
    i = 127;
    for (j = 4 * 128; j > 0; --j) {
      v = X[(i + 34) & 127];
      t = X[i = ((i + 1) & 127)];
      v ^= v << 13;
      t ^= t << 17;
      v ^= v >>> 15;
      t ^= t >>> 12;
      X[i] = v ^ t;
    }
    // Storing state as object members is faster than using closure variables.
    me.w = w;
    me.X = X;
    me.i = i;
  }

  init(me, seed);
}

function copy(f, t) {
  t.i = f.i;
  t.w = f.w;
  t.X = f.X.slice();
  return t;
};

function impl(seed, opts) {
  if (seed == null) seed = +(new Date);
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (state.X) copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.xor4096 = impl;
}

})(
  this,                                     // window object or global
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);

},{}],"/home/ubuntu/staging/apps/node_modules/seedrandom/lib/xor128.js":[function(require,module,exports){
// A Javascript implementaion of the "xor128" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  me.x = 0;
  me.y = 0;
  me.z = 0;
  me.w = 0;

  // Set up generator function.
  me.next = function() {
    var t = me.x ^ (me.x << 11);
    me.x = me.y;
    me.y = me.z;
    me.z = me.w;
    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);
  };

  if (seed === (seed | 0)) {
    // Integer seed.
    me.x = seed;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 64; k++) {
    me.x ^= strseed.charCodeAt(k) | 0;
    me.next();
  }
}

function copy(f, t) {
  t.x = f.x;
  t.y = f.y;
  t.z = f.z;
  t.w = f.w;
  return t;
}

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.xor128 = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);



},{}],"/home/ubuntu/staging/apps/node_modules/seedrandom/lib/tychei.js":[function(require,module,exports){
// A Javascript implementaion of the "Tyche-i" prng algorithm by
// Samuel Neves and Filipe Araujo.
// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  // Set up generator function.
  me.next = function() {
    var b = me.b, c = me.c, d = me.d, a = me.a;
    b = (b << 25) ^ (b >>> 7) ^ c;
    c = (c - d) | 0;
    d = (d << 24) ^ (d >>> 8) ^ a;
    a = (a - b) | 0;
    me.b = b = (b << 20) ^ (b >>> 12) ^ c;
    me.c = c = (c - d) | 0;
    me.d = (d << 16) ^ (c >>> 16) ^ a;
    return me.a = (a - b) | 0;
  };

  /* The following is non-inverted tyche, which has better internal
   * bit diffusion, but which is about 25% slower than tyche-i in JS.
  me.next = function() {
    var a = me.a, b = me.b, c = me.c, d = me.d;
    a = (me.a + me.b | 0) >>> 0;
    d = me.d ^ a; d = d << 16 ^ d >>> 16;
    c = me.c + d | 0;
    b = me.b ^ c; b = b << 12 ^ d >>> 20;
    me.a = a = a + b | 0;
    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;
    me.c = c = c + d | 0;
    b = b ^ c;
    return me.b = (b << 7 ^ b >>> 25);
  }
  */

  me.a = 0;
  me.b = 0;
  me.c = 2654435769 | 0;
  me.d = 1367130551;

  if (seed === Math.floor(seed)) {
    // Integer seed.
    me.a = (seed / 0x100000000) | 0;
    me.b = seed | 0;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 20; k++) {
    me.b ^= strseed.charCodeAt(k) | 0;
    me.next();
  }
}

function copy(f, t) {
  t.a = f.a;
  t.b = f.b;
  t.c = f.c;
  t.d = f.d;
  return t;
};

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.tychei = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);



},{}],"/home/ubuntu/staging/apps/node_modules/seedrandom/lib/alea.js":[function(require,module,exports){
// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010
// http://baagoe.com/en/RandomMusings/javascript/
// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror
// Original work is under MIT license -

// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.



(function(global, module, define) {

function Alea(seed) {
  var me = this, mash = Mash();

  me.next = function() {
    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32
    me.s0 = me.s1;
    me.s1 = me.s2;
    return me.s2 = t - (me.c = t | 0);
  };

  // Apply the seeding algorithm from Baagoe.
  me.c = 1;
  me.s0 = mash(' ');
  me.s1 = mash(' ');
  me.s2 = mash(' ');
  me.s0 -= mash(seed);
  if (me.s0 < 0) { me.s0 += 1; }
  me.s1 -= mash(seed);
  if (me.s1 < 0) { me.s1 += 1; }
  me.s2 -= mash(seed);
  if (me.s2 < 0) { me.s2 += 1; }
  mash = null;
}

function copy(f, t) {
  t.c = f.c;
  t.s0 = f.s0;
  t.s1 = f.s1;
  t.s2 = f.s2;
  return t;
}

function impl(seed, opts) {
  var xg = new Alea(seed),
      state = opts && opts.state,
      prng = xg.next;
  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; }
  prng.double = function() {
    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53
  };
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

function Mash() {
  var n = 0xefc8249d;

  var mash = function(data) {
    data = data.toString();
    for (var i = 0; i < data.length; i++) {
      n += data.charCodeAt(i);
      var h = 0.02519603282416938 * n;
      n = h >>> 0;
      h -= n;
      h *= n;
      n = h >>> 0;
      h -= n;
      n += h * 0x100000000; // 2^32
    }
    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32
  };

  return mash;
}


if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.alea = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);



},{}],"/home/ubuntu/staging/apps/build/js/netsim/NetSimConstants.js":[function(require,module,exports){
/**
 * @overview Constants and enums used across Internet Simulator.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
/* global exports */
'use strict';

/**
 * @type {number}
 * @const
 */
exports.BITS_PER_NIBBLE = 4;

/**
 * @type {number}
 * @const
 */
exports.BITS_PER_BYTE = 8;

/**
 * @type {number}
 * @const
 */
exports.BITS_PER_KILOBYTE = 1024 * exports.BITS_PER_BYTE;

/**
 * @type {number}
 * @const
 */
exports.BITS_PER_MEGABYTE = 1024 * exports.BITS_PER_KILOBYTE;

/**
 * @type {number}
 * @const
 */
exports.BITS_PER_GIGABYTE = 1024 * exports.BITS_PER_MEGABYTE;

/**
 * @type {number}
 * @const
 */
exports.BITS_PER_KILOBIT = 1024;

/**
 * @type {number}
 * @const
 */
exports.BITS_PER_MEGABIT = 1024 * exports.BITS_PER_KILOBIT;

/**
 * @type {number}
 * @const
 */
exports.BITS_PER_GIGABIT = 1024 * exports.BITS_PER_MEGABIT;

/**
 * Types of nodes that can show up in the simulation.
 * @enum {string}
 */
exports.NodeType = {
  CLIENT: 'client',
  ROUTER: 'router'
};

/**
 * What type of message makes up the 'atom' of communication for this
 * simulator mode - single-bit messages (variant 1) or whole packets (variants
 * 2 and up)
 * @enum {string}
 */
exports.MessageGranularity = {
  PACKETS: 'packets',
  BITS: 'bits'
};

/**
 * DNS modes for the simulator.  Only applies in variant 3, when connecting
 * to a router.
 * @enum {string}
 */
exports.DnsMode = {
  /** There is no DNS node.  Everyone can see every other node's address. */
  NONE: 'none',

  /** One user acts as the DNS node at a time.  Everyone can see their own
   *  address and the DNS node's address, but nothing else. */
  MANUAL: 'manual',

  /** An automatic DNS node is added to the simulation.  Nodes are automatically
   *  registered with the DNS on connection. */
  AUTOMATIC: 'automatic'
};

/**
 * Encodings that can be used to interpret and display binary messages in
 * the simulator.
 * Map to class-names that can be applied to related table rows.
 * @enum {string}
 */
exports.EncodingType = {
  /** Renders each chunk of bits (using variable chunksize) in ascii */
  ASCII: 'ascii',

  /** Renders each chunk of bits (using variable chunksize) in decimal */
  DECIMAL: 'decimal',

  /** Renders each binary nibble as a hex character. */
  HEXADECIMAL: 'hexadecimal',

  /** All packet data is actually stored and moved around in binary, so
   *  the 'binary' encoding just represents access to that raw data. */
  BINARY: 'binary',

  /** An encoding used early in the lessons to show that binary isn't always
   *  1s and 0s.  Just like binary, but replaces 1/0 with A/B. */
  A_AND_B: 'a_and_b'
};

/**
 * Enumeration of tabs for level configuration
 * @enum {string}
 */
exports.NetSimTabType = {
  INSTRUCTIONS: 'instructions',
  MY_DEVICE: 'my_device',
  ROUTER: 'router',
  DNS: 'dns'
};

/**
 * Column types that can be used any time a packet is displayed on the page.
 * Related to Packet.HeaderType, but different because this includes columns
 * that aren't part of the header, and groups the packetInfo together.
 * Map to class-names that can be applied to related table cells.
 * @enum {string}
 */
exports.PacketUIColumnType = {
  ENCODING_LABEL: 'encodingLabel',
  TO_ADDRESS: 'toAddress',
  FROM_ADDRESS: 'fromAddress',
  PACKET_INFO: 'packetInfo',
  MESSAGE: 'message'
};

},{}],"/home/ubuntu/staging/apps/build/js/netsim/DashboardUser.js":[function(require,module,exports){
/**
 * @overview Interface to dashboard user data API.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

/**
 * @typedef {Object} Section
 * @property {number} id - Section's numeric identifier in Dashboard.
 */

// TODO (bbuchanan): This whole file should go away when we have a shared
//                   Javascript User object that can be available on page load.

/**
 * Represents a Dashboard user account - could be a teacher, a student, etc.
 * @constructor
 */
var DashboardUser = module.exports = function () {
  /**
   * Indicates whether the async call has completed yet.
   * @type {boolean}
   */
  this.isReady = false;

  /**
   * Queue of callbacks to hit when this object gets initialized.
   * @type {function[]}
   * @private
   */
  this.whenReadyCallbacks_ = [];

  /**
   * User ID
   * @type {number}
   */
  this.id = undefined;

  /**
   * User display name
   * @type {string}
   */
  this.name = "";

  /**
   * Whether the user is a site admin.
   * NOTE: This should only be used in a convenience/display sense; anything
   *       requiring actual security should be authenticated through the server,
   *       and not depend on client code.
   * @type {boolean}
   */
  this.isAdmin = false;

  /**
   * List of sections owned by this user.
   * @type {Section[]}
   */
  this.ownedSections = [];
};

/**
 * @type {DashboardUser}
 * @private
 * @static
 */
DashboardUser.currentUser_ = null;

/**
 * Kick of an asynchronous request for the current user's data, and immediately
 * pass back a placeholder object that has a whenReady method others can
 * use to guarantee the data is present.
 *
 * @return {DashboardUser} that doesn't have its data yet, but will soon.
 */
DashboardUser.getCurrentUser = function () {
  if (!DashboardUser.currentUser_) {
    DashboardUser.currentUser_ = new DashboardUser();
    $.ajax({
      url: '/v2/user',
      type: 'get',
      dataType: 'json',
      success: function success(data /*, textStatus, jqXHR*/) {
        DashboardUser.currentUser_.initialize(data);
      },
      error: function error() /*jqXHR, textStatus, errorThrown*/{
        DashboardUser.currentUser_.initialize({
          isSignedIn: false
        });
      }
    });
  }
  return DashboardUser.currentUser_;
};

/**
 * Load data into user from async request, when ready.
 * @param data
 */
DashboardUser.prototype.initialize = function (data) {
  this.id = data.id;
  this.name = data.name;
  this.isAdmin = data.admin === true;
  this.ownedSections = data.owned_sections;
  this.isSignedIn = data.isSignedIn !== false;
  this.isReady = true;

  // Call any queued callbacks
  this.whenReadyCallbacks_.forEach((function (callback) {
    callback(this);
  }).bind(this));
  this.whenReadyCallbacks_.length = 0;
};

/**
 * Provide code to be called when this object is ready to use
 * Possible for it to be called immediately.
 * @param {!function} callback
 */
DashboardUser.prototype.whenReady = function (callback) {
  if (this.isReady) {
    callback(this);
  } else {
    this.whenReadyCallbacks_.push(callback);
  }
};

/**
 * Check whether the current user owns the section with the given section ID.
 * @param {number} sectionID
 * @returns {boolean}
 */
DashboardUser.prototype.ownsSection = function (sectionID) {
  return this.ownedSections.some(function (section) {
    return section.id === sectionID;
  });
};

},{}],"/home/ubuntu/staging/apps/build/js/netsim/ArgumentUtils.js":[function(require,module,exports){
/**
 * @overview Utilities for validating and retrieving arguments to a method.
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

/**
 * Makes sure the given argument is provided and passes the validation check.
 * @param {?} arg - the argument to validate
 * @param {!string} argName - Argument name (for useful error reporting)
 * @param {function(?)} [validator] - validation check to run on the argument.
 *        Defaults to no check (anything passes).
 * @returns {?} the original argument.
 * @throws {TypeError} if the argument is missing or invalid.
 */
exports.validateRequired = function (arg, argName, validator) {
  if (undefined === arg) {
    throw new TypeError(argName + ' is required.');
  } else if (typeof validator === 'function' && !validator(arg)) {
    throw new TypeError('Cannot set ' + argName + ' to ' + arg + '.');
  }
  return arg;
};

/**
 * Adds an option getter to the provided options Object that validates
 * the passed arguments and can provide default values.
 * @param {Object} optionsObject - the raw options object.  May be passed
 *        undefined (as in an omitted options object) but must not be null
 *        or a non-object type.  Not modified.
 * @returns {Object} that includes a `get` method.  Will be an object
 *          even if original optionsObject argument was undefined.
 * @throws {TypeError} if a non-object is passed to the constructor.
 * @throws {Error} if extending the object would overwrite an existing property.
 */
exports.extendOptionsObject = function (optionsObject) {
  // Allow `undefined` and all objects except for `null`
  var isUndefined = optionsObject === undefined;
  var isRealObject = typeof optionsObject === 'object' && optionsObject !== null;
  if (!(isUndefined || isRealObject)) {
    throw new TypeError('Options object must be an object.');
  }

  if (optionsObject && optionsObject.hasOwnProperty('get')) {
    throw new Error('Cannot extend options; property "get" would be overwritten.');
  }

  return $.extend({}, optionsObject, {
    /**
     * Retrieve an optional value from the options object, passing it through the
     * provided validation function, and returning the given default value if
     * the requested option was not set.
     * @param {!string} optionKey - name of the option in the raw options object.
     * @param {function(?)} [validator] - validation check to run on the value,
     *        if it has been set.  Should return TRUE if valid and FALSE otherwise.
     *        Defaults to no check (anything passes).
     * @param {?} [defaultValue] - What to return if the option was not set.
     *        Defaults to `undefined`.
     * @returns {?} The value of the option if it was set, and the provided
     *          default value if it was not set.
     * @throws {TypeError} if the validator function returns FALSE when called
     *         on the option value.
     */
    get: function get(optionKey, validator, defaultValue) {
      if (!optionsObject || optionsObject[optionKey] === undefined) {
        return defaultValue;
      }

      if (typeof validator === 'function' && !validator(optionsObject[optionKey])) {
        throw new TypeError('Cannot set ' + optionKey + ' to ' + optionsObject[optionKey] + '.');
      }

      return optionsObject[optionKey];
    }
  });
};

/**
 * Validator function that verifies that the argument is a number, is
 * greater than or equal to zero, and is not Infinity.
 * @param arg
 * @returns {boolean} TRUE if provided argument is valid.
 * @static
 */
exports.isPositiveNoninfiniteNumber = function (arg) {
  return typeof arg === 'number' && !isNaN(arg) && arg >= 0 && arg !== Infinity;
};

/**
 * Validator function that verifies that the argument is a number, is
 * greater than or equal to zero, and is not Infinity.
 * @param {?} arg
 * @returns {boolean} TRUE if provided argument is valid.
 * @static
 */
exports.isBoolean = function (arg) {
  return typeof arg === 'boolean';
};

/**
 * Validator function that verifies that the argument is a string.
 * @param {?} arg
 * @returns {boolean} TRUE if provided argument is valid.
 * @static
 */
exports.isString = function (arg) {
  return typeof arg === 'string';
};

/**
 * Validator function that verifies the argument is an array.
 * Sure this seems redundant, but included here for discoverability.
 * @param {?} arg
 * @returns {boolean} TRUE if the provided argument is an array.
 */
exports.isArray = function (arg) {
  return Array.isArray(arg);
};

/**
 * Validator function that verifies that argument is an array of strings.
 * @param {?} arg
 * @returns {boolean} TRUE if provided argument is an array and every element
 *          in the array is a string.
 * @static
 */
exports.isArrayOfStrings = function (arg) {
  return Array.isArray(arg) && arg.every(exports.isString);
};

},{}],"/home/ubuntu/staging/apps/build/js/RunLoop.js":[function(require,module,exports){
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
/* global window */
'use strict';

var ObservableEvent = require('./ObservableEvent');

// It is more accurate to use performance.now(), but we use Date.now()
// for compatibility with Safari and older browsers. This should only cause
// a small error in the deltaTime for the initial frame anyway.
// See Also:
// * https://developer.mozilla.org/en-US/docs/Web/API/window.requestAnimationFrame
// * https://developer.mozilla.org/en-US/docs/Web/API/Performance.now
var windowNow = window.performance && window.performance.now ? window.performance.now.bind(window.performance) : Date.now;

/**
 * How many ticks we try to fire every second.
 * @type {number}
 * @const
 */
var PREFERRED_TICKS_PER_SECOND = 10;

/**
 * Precalculated milliseconds per tick.
 * @type {number}
 * @const
 */
var PREFERRED_MS_PER_TICK = 1000 / PREFERRED_TICKS_PER_SECOND;

/**
 * Rendered frames per second on older browsers where we can't lock to the
 * repaint event.
 * @type {number}
 * @const
 */
var FALLBACK_FPS = 30;

/**
 * Precalculated milliseconds per frame for fallback case
 * @type {number}
 * @const
 */
var FALLBACK_MS_PER_FRAME = 1000 / FALLBACK_FPS;

/**
 * Simple run-loop manager
 * @constructor
 */
var RunLoop = module.exports = function () {

  /**
   * Whether the run-loop will continue running.
   * @type {boolean}
   */
  this.enabled = false;

  /**
   * Tracks current time and delta time for the tick loop.
   * Passed to observers when events fire.
   * @type {RunLoop.Clock}
   */
  this.tickClock = new RunLoop.Clock();

  /**
   * Tracks current time and delta time for the render loop.
   * Passed to observers when events fire.
   * @type {RunLoop.Clock}
   */
  this.renderClock = new RunLoop.Clock();

  /**
   * Method that gets called over and over, regardless of whether NetSim
   * is in focus or not.  Called less often than render().  Can be slowed
   * to about once per second when NetSim is in the background.
   * @type {Function}
   * @private
   */
  this.tick_ = this.buildTickMethod_();

  /**
   * Method that gets called over and over when NetSim is visible.  Gets as
   * close to maximum framerate as possible.  Called more often than tick(), but
   * can be paused entirely when NetSim is in the background.
   * @type {Function}
   * @private
   */
  this.render_ = this.buildRenderMethod_();

  /**  @type {ObservableEvent} */
  this.tick = new ObservableEvent();

  /** @type {ObservableEvent} */
  this.render = new ObservableEvent();
};

/**
 * Simple tracking for time values
 * @constructor
 */
RunLoop.Clock = function () {
  /**
   * Time the current/most recent tick started, in ms.
   * Depending on browser this might be epoch time or time since load -
   *  therefore, don't use for absolute time!
   * @type {number}
   */
  this.time = windowNow();

  /**
   * Time in ms between the latest/current tick and the previous tick.
   * Precision dependent on browser capabilities.
   * @type {number}
   */
  this.deltaTime = 0;
};

RunLoop.prototype.buildTickMethod_ = function () {
  var tickMethod;
  var self = this;
  tickMethod = function () {
    if (self.enabled) {
      var curTime = windowNow();
      self.tickClock.deltaTime = curTime - self.tickClock.time;
      self.tickClock.time = curTime;
      self.tick.notifyObservers(self.tickClock);
      setTimeout(tickMethod, PREFERRED_MS_PER_TICK - self.tickClock.deltaTime);
    }
  };
  return tickMethod;
};

RunLoop.prototype.buildRenderMethod_ = function () {
  var renderMethod;
  var self = this;
  if (window.requestAnimationFrame) {
    renderMethod = function (hiResTimeStamp) {
      if (self.enabled) {
        self.renderClock.deltaTime = hiResTimeStamp - self.renderClock.time;
        self.renderClock.time = hiResTimeStamp;
        self.render.notifyObservers(self.renderClock);
        requestAnimationFrame(renderMethod);
      }
    };
  } else {
    renderMethod = function () {
      if (self.enabled) {
        var curTime = windowNow();
        self.renderClock.deltaTime = curTime - self.renderClock.time;
        self.renderClock.time = curTime;
        self.render.notifyObservers(self.renderClock);
        setTimeout(renderMethod, FALLBACK_MS_PER_FRAME - self.renderClock.deltaTime);
      }
    };
  }
  return renderMethod;
};

/** Start the run loop (runs immediately) */
RunLoop.prototype.begin = function () {
  this.enabled = true;
  this.tickClock.time = windowNow();
  this.renderClock.time = windowNow();
  this.tick_(this.tickClock.time);
  this.render_(this.renderClock.time);
};

/**
 * Stop the run loop
 * If in the middle of a tick, will finish the current tick.
 * If called by an event between ticks, will prevent the next tick from firing.
 */
RunLoop.prototype.end = function () {
  this.enabled = false;
};

},{"./ObservableEvent":"/home/ubuntu/staging/apps/build/js/ObservableEvent.js"}]},{},["/home/ubuntu/staging/apps/build/js/netsim/main.js"])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9mYWN0b3ItYnVuZGxlL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJidWlsZC9qcy9uZXRzaW0vbWFpbi5qcyIsImJ1aWxkL2pzL25ldHNpbS9za2lucy5qcyIsImJ1aWxkL2pzL25ldHNpbS9uZXRzaW0uanMiLCJidWlsZC9qcy9uZXRzaW0vcGFnZS5odG1sLmVqcyIsImJ1aWxkL2pzL25ldHNpbS9sZXZlbHMuanMiLCJidWlsZC9qcy9uZXRzaW0vY29udHJvbHMuaHRtbC5lanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltVmlzdWFsaXphdGlvbi5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1WaXpTaW11bGF0aW9uV2lyZS5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1WaXpXaXJlLmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbVZpelNpbXVsYXRpb25Ob2RlLmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbVZpekF1dG9EbnNOb2RlLmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbVZpek5vZGUuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltVml6RWxlbWVudC5qcyIsImJ1aWxkL2pzL25ldHNpbS90d2VlbnMuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltVmlzdWFsaXphdGlvbi5odG1sLmVqcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1UYWJzQ29tcG9uZW50LmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbVRhYnNDb21wb25lbnQuaHRtbC5lanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltU3RhdHVzUGFuZWwuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltU3RhdHVzUGFuZWwuaHRtbC5lanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltU2hhcmQuanMiLCJidWlsZC9qcy9uZXRzaW0vUHViU3ViU2VydmljZS5qcyIsImJ1aWxkL2pzL25ldHNpbS9QdWJTdWJDaGFubmVsLmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbVRhYmxlLmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbVNlbmRQYW5lbC5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1TZW5kUGFuZWwuaHRtbC5lanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltUm91dGVyVGFiLmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbVJvdXRlclRhYi5odG1sLmVqcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1Sb3V0ZXJTdGF0c1RhYmxlLmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbVJvdXRlclN0YXRzVGFibGUuaHRtbC5lanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltUm91dGVyTG9nTW9kYWwuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltUm91dGVyTG9nTW9kYWwuaHRtbC5lanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltUGFja2V0U2l6ZUNvbnRyb2wuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltUGFja2V0RWRpdG9yLmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbVBhY2tldEVkaXRvci5odG1sLmVqcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1NeURldmljZVRhYi5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1QdWxzZVJhdGVDb250cm9sLmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbU15RGV2aWNlVGFiLmh0bWwuZWpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbU1ldHJvbm9tZS5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1NZXRyb25vbWUuaHRtbC5lanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltTWVtb3J5Q29udHJvbC5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1Mb2dQYW5lbC5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1Mb2dQYW5lbC5odG1sLmVqcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1Mb2dQYWNrZXQuaHRtbC5lanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltTG9jYWxDbGllbnROb2RlLmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbUxvYmJ5LmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbVNoYXJkU2VsZWN0aW9uUGFuZWwuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltU2hhcmRTZWxlY3Rpb25QYW5lbC5odG1sLmVqcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1SZW1vdGVOb2RlU2VsZWN0aW9uUGFuZWwuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltUmVtb3RlTm9kZVNlbGVjdGlvblBhbmVsLmh0bWwuZWpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbU5vZGVGYWN0b3J5LmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbVJvdXRlck5vZGUuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltTWVzc2FnZS5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1Mb2dFbnRyeS5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvbW9tZW50LmpzIiwiYnVpbGQvanMvbmV0c2ltL1BhY2tldC5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1EbnNUYWIuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltRG5zVGFibGUuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltRG5zVGFibGUuaHRtbC5lanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltRG5zVGFiLmh0bWwuZWpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbURuc01vZGVDb250cm9sLmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbURuc01vZGVDb250cm9sLmh0bWwuZWpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbURuc01hbnVhbENvbnRyb2wuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltRG5zTWFudWFsQ29udHJvbC5odG1sLmVqcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1DbGllbnROb2RlLmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbU5vZGUuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltV2lyZS5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1FbnRpdHkuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltQ2h1bmtTaXplQ29udHJvbC5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1CaXRSYXRlQ29udHJvbC5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1CaXRMb2dQYW5lbC5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1QYW5lbC5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1QYW5lbC5odG1sLmVqcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1FbmNvZGluZ0NvbnRyb2wuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltRW5jb2RpbmdDb250cm9sLmh0bWwuZWpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbUJpdExvZ1BhbmVsLmh0bWwuZWpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbUJhbmR3aWR0aENvbnRyb2wuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltU2xpZGVyLmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbVNsaWRlci5odG1sLmVqcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1BcGkuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltQXBpRXJyb3IuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltQWxlcnQuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltQWxlcnQuaHRtbC5lanMiLCJidWlsZC9qcy9uZXRzaW0vRGF0YUNvbnZlcnRlcnMuanMiLCJub2RlX21vZHVsZXMvQmFzZTY0L2Jhc2U2NC5qcyIsImJ1aWxkL2pzL25ldHNpbS9OZXRTaW1VdGlscy5qcyIsImJ1aWxkL2pzL25ldHNpbS9sb2NhbGUuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltTG9nZ2VyLmpzIiwiYnVpbGQvanMvbmV0c2ltL05ldFNpbUdsb2JhbHMuanMiLCJub2RlX21vZHVsZXMvc2VlZHJhbmRvbS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL3NlZWRyYW5kb20uanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L3B1YmxpY0VuY3J5cHQuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L3ByaXZhdGVEZWNyeXB0LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC94b3IuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L3dpdGhQdWJsaWMuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9maXhQcm9jLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2VuY3J5cHRlci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2RlY3J5cHRlci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2V2cF9ieXRlc3Rva2V5L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvc3RyZWFtQ2lwaGVyLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvb2ZiLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvZWNiLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvY3RyLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvY2ZiOC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NmYjEuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jZmIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jYmMuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2F1dGhDaXBoZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9ub2RlX21vZHVsZXMvY2lwaGVyLWJhc2UvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9ub2RlX21vZHVsZXMvYnVmZmVyLXhvci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2doYXNoLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvYWVzLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9hc24xLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZW5jb2RlcnMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2VuY29kZXJzL3BlbS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZW5jb2RlcnMvZGVyLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9kZWNvZGVycy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZGVjb2RlcnMvcGVtLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9kZWNvZGVycy9kZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2NvbnN0YW50cy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvY29uc3RhbnRzL2Rlci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYmFzZS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYmFzZS9yZXBvcnRlci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYmFzZS9ub2RlLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYXNuMS5qcy9ub2RlX21vZHVsZXMvbWluaW1hbGlzdGljLWFzc2VydC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYmFzZS9idWZmZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2FwaS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvYWVzaWQuanNvbiIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktcnNhL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9ub2RlX21vZHVsZXMvYm4uanMvbGliL2JuLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9tZ2YuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2RpZmZpZS1oZWxsbWFuL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2RpZmZpZS1oZWxsbWFuL2xpYi9wcmltZXMuanNvbiIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvZGlmZmllLWhlbGxtYW4vbGliL2RoLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9kaWZmaWUtaGVsbG1hbi9saWIvZ2VuZXJhdGVQcmltZS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvZGlmZmllLWhlbGxtYW4vbm9kZV9tb2R1bGVzL21pbGxlci1yYWJpbi9saWIvbXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2RpZmZpZS1oZWxsbWFuL25vZGVfbW9kdWxlcy9taWxsZXItcmFiaW4vbm9kZV9tb2R1bGVzL2Jyb3JhbmQvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2RpZmZpZS1oZWxsbWFuL25vZGVfbW9kdWxlcy9ibi5qcy9saWIvYm4uanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyZWF0ZS1lY2RoL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyZWF0ZS1lY2RoL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyZWF0ZS1lY2RoL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9wYWNrYWdlLmpzb24iLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyZWF0ZS1lY2RoL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9ub2RlX21vZHVsZXMvYnJvcmFuZC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWVjZGgvbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy91dGlscy5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWVjZGgvbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9obWFjLWRyYmcuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyZWF0ZS1lY2RoL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvZWMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyZWF0ZS1lY2RoL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvZWMvc2lnbmF0dXJlLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcmVhdGUtZWNkaC9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VjL2tleS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWVjZGgvbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZXMuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyZWF0ZS1lY2RoL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWVjZGgvbm9kZV9tb2R1bGVzL2VsbGlwdGljL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3V0aWxzLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcmVhdGUtZWNkaC9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcmVhdGUtZWNkaC9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvcmlwZW1kLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcmVhdGUtZWNkaC9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvaG1hYy5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWVjZGgvbm9kZV9tb2R1bGVzL2VsbGlwdGljL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL2NvbW1vbi5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWVjZGgvbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9wcmVjb21wdXRlZC9zZWNwMjU2azEuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyZWF0ZS1lY2RoL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmUvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyZWF0ZS1lY2RoL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmUvc2hvcnQuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyZWF0ZS1lY2RoL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmUvbW9udC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWVjZGgvbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9lZHdhcmRzLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcmVhdGUtZWNkaC9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlL2Jhc2UuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyZWF0ZS1lY2RoL25vZGVfbW9kdWxlcy9ibi5qcy9saWIvYm4uanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vdmVyaWZ5LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wYmtkZjIvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhtYWMvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbm9kZV9tb2R1bGVzL3NoYS5qcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEzODQuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyZWF0ZS1oYXNoL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhNTEyLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcmVhdGUtaGFzaC9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTIyNC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEyNTYuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyZWF0ZS1oYXNoL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhMS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyZWF0ZS1oYXNoL25vZGVfbW9kdWxlcy9zaGEuanMvaGFzaC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbm9kZV9tb2R1bGVzL3JpcGVtZDE2MC9saWIvcmlwZW1kMTYwLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcmVhdGUtaGFzaC9ub2RlX21vZHVsZXMvY2lwaGVyLWJhc2UvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9maXhQcm9jLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvZW5jcnlwdGVyLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2RlY3J5cHRlci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9ldnBfYnl0ZXN0b2tleS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9zdHJlYW1DaXBoZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvb2ZiLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2VjYi5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jdHIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvY2ZiOC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jZmIxLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NmYi5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jYmMuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvYXV0aENpcGhlci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9ub2RlX21vZHVsZXMvY2lwaGVyLWJhc2UvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbm9kZV9tb2R1bGVzL2J1ZmZlci14b3IvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvZ2hhc2guanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvYWVzLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvYXNuMS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZW5jb2RlcnMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9lbmNvZGVycy9wZW0uanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9lbmNvZGVycy9kZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9kZWNvZGVycy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2RlY29kZXJzL3BlbS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2RlY29kZXJzL2Rlci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2NvbnN0YW50cy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2NvbnN0YW50cy9kZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9iYXNlL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYmFzZS9yZXBvcnRlci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2Jhc2Uvbm9kZS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9hc24xLmpzL25vZGVfbW9kdWxlcy9taW5pbWFsaXN0aWMtYXNzZXJ0L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYmFzZS9idWZmZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9hcGkuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvdm0tYnJvd3NlcmlmeS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy92bS1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9pbmRleG9mL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvYWVzaWQuanNvbiIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvcGFja2FnZS5qc29uIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL2VsbGlwdGljL25vZGVfbW9kdWxlcy9icm9yYW5kL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy91dGlscy5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvaG1hYy1kcmJnLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lYy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvZWMvc2lnbmF0dXJlLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lYy9rZXkuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlcy5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC91dGlscy5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvcmlwZW1kLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL2VsbGlwdGljL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL2htYWMuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvY29tbW9uLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9wcmVjb21wdXRlZC9zZWNwMjU2azEuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9zaG9ydC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmUvbW9udC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmUvZWR3YXJkcy5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmUvYmFzZS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXJzYS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcmFuZG9tYnl0ZXMvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9ibi5qcy9saWIvYm4uanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9jdXJ2ZXMuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9hbGdvcy5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktZGVzL21vZGVzLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWNpcGhlci9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1kZXMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktY2lwaGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWRlcy9ub2RlX21vZHVsZXMvZGVzLmpzL2xpYi9kZXMuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktY2lwaGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWRlcy9ub2RlX21vZHVsZXMvZGVzLmpzL2xpYi9kZXMvdXRpbHMuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktY2lwaGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWRlcy9ub2RlX21vZHVsZXMvZGVzLmpzL2xpYi9kZXMvZWRlLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWNpcGhlci9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1kZXMvbm9kZV9tb2R1bGVzL2Rlcy5qcy9saWIvZGVzL2Rlcy5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktZGVzL25vZGVfbW9kdWxlcy9kZXMuanMvbGliL2Rlcy9jaXBoZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktY2lwaGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWRlcy9ub2RlX21vZHVsZXMvZGVzLmpzL2xpYi9kZXMvY2JjLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWNpcGhlci9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1kZXMvbm9kZV9tb2R1bGVzL2Rlcy5qcy9ub2RlX21vZHVsZXMvbWluaW1hbGlzdGljLWFzc2VydC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktZGVzL25vZGVfbW9kdWxlcy9jaXBoZXItYmFzZS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktY2lwaGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9lbmNyeXB0ZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktY2lwaGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9kZWNyeXB0ZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktY2lwaGVyL25vZGVfbW9kdWxlcy9ldnBfYnl0ZXN0b2tleS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbWQ1LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcmVhdGUtaGFzaC9oZWxwZXJzLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWNpcGhlci9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvc3RyZWFtQ2lwaGVyLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWNpcGhlci9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvb2ZiLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWNpcGhlci9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvZWNiLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWNpcGhlci9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvY3RyLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWNpcGhlci9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvY2ZiOC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NmYjEuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktY2lwaGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jZmIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktY2lwaGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jYmMuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktY2lwaGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2F1dGhDaXBoZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktY2lwaGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9ub2RlX21vZHVsZXMvY2lwaGVyLWJhc2UvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktY2lwaGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9ub2RlX21vZHVsZXMvYnVmZmVyLXhvci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2doYXNoLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWNpcGhlci9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvYWVzLmpzIiwibm9kZV9tb2R1bGVzL3NlZWRyYW5kb20vbGliL3hvcndvdy5qcyIsIm5vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL2xpYi94b3JzaGlmdDcuanMiLCJub2RlX21vZHVsZXMvc2VlZHJhbmRvbS9saWIveG9yNDA5Ni5qcyIsIm5vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL2xpYi94b3IxMjguanMiLCJub2RlX21vZHVsZXMvc2VlZHJhbmRvbS9saWIvdHljaGVpLmpzIiwibm9kZV9tb2R1bGVzL3NlZWRyYW5kb20vbGliL2FsZWEuanMiLCJidWlsZC9qcy9uZXRzaW0vTmV0U2ltQ29uc3RhbnRzLmpzIiwiYnVpbGQvanMvbmV0c2ltL0Rhc2hib2FyZFVzZXIuanMiLCJidWlsZC9qcy9uZXRzaW0vQXJndW1lbnRVdGlscy5qcyIsImJ1aWxkL2pzL1J1bkxvb3AuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0FBLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNwQyxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQ2xELElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQzs7QUFFakMsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ2pDLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQzs7QUFFL0IsTUFBTSxDQUFDLFVBQVUsR0FBRyxVQUFTLE9BQU8sRUFBRTtBQUNwQyxTQUFPLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztBQUM1QixTQUFPLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQzs7QUFFNUIsTUFBSSxNQUFNLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQztBQUMxQixRQUFNLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2xDLFNBQU8sQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0NBQ2xDLENBQUM7Ozs7O0FDZEYsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDOztBQUVuQyxPQUFPLENBQUMsSUFBSSxHQUFHLFVBQVUsUUFBUSxFQUFFLEVBQUUs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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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dUJBQVUsVUFBVSxFQUFFO0FBQ25DLFFBQUksSUFBSSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUM7QUFDN0IsUUFBSSxJQUFJLEtBQUssQ0FBQyxFQUFFO0FBQ2QsYUFBTyxTQUFTLENBQUM7S0FDbEI7O0FBRUQsV0FBTyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7R0FDOUM7O0NBRUYsQ0FBQzs7O0FDcEpGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbFBBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakNBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0lBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbENBOztBQ0FBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcExBOztBQ0FBOztBQ0FBOztBQ0FBOztBQ0FBOztBQ0FBOztBQ0FBOztBQ0FBOztBQ0FBOztBQ0FBOztBQ0FBOztBQ0FBOztBQ0FBOztBQ0FBOztBQ0FBOztBQ0FBOztBQ0FBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hEQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDektBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pIQTs7QUNBQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25IQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25GQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pDQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xDQTs7QUNBQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNySEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25TQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdGxCQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0SkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3SkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNXdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzNEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25YQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5d0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaFFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0lBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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Q0FBQyxDQUFDO09BQzlFO0tBQ0YsQ0FBQztHQUNIO0FBQ0QsU0FBTyxZQUFZLENBQUM7Q0FDckIsQ0FBQzs7O0FBR0YsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsWUFBWTtBQUNwQyxNQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztBQUNwQixNQUFJLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxTQUFTLEVBQUUsQ0FBQztBQUNsQyxNQUFJLENBQUMsV0FBVyxDQUFDLElBQUksR0FBRyxTQUFTLEVBQUUsQ0FBQztBQUNwQyxNQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDaEMsTUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQ3JDLENBQUM7Ozs7Ozs7QUFPRixPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxZQUFZO0FBQ2xDLE1BQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0NBQ3RCLENBQUMiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwidmFyIGFwcE1haW4gPSByZXF1aXJlKCcuLi9hcHBNYWluJyk7XG52YXIgc3R1ZGlvQXBwID0gcmVxdWlyZSgnLi4vU3R1ZGlvQXBwJykuc2luZ2xldG9uO1xudmFyIE5ldFNpbSA9IHJlcXVpcmUoJy4vbmV0c2ltJyk7XG5cbnZhciBsZXZlbHMgPSByZXF1aXJlKCcuL2xldmVscycpO1xudmFyIHNraW5zID0gcmVxdWlyZSgnLi9za2lucycpO1xuXG53aW5kb3cubmV0c2ltTWFpbiA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgb3B0aW9ucy5za2luc01vZHVsZSA9IHNraW5zO1xuICBvcHRpb25zLmlzRWRpdG9ybGVzcyA9IHRydWU7XG5cbiAgdmFyIG5ldFNpbSA9IG5ldyBOZXRTaW0oKTtcbiAgbmV0U2ltLmluamVjdFN0dWRpb0FwcChzdHVkaW9BcHApO1xuICBhcHBNYWluKG5ldFNpbSwgbGV2ZWxzLCBvcHRpb25zKTtcbn07XG4iLCJ2YXIgc2tpbkJhc2UgPSByZXF1aXJlKCcuLi9za2lucycpO1xuXG5leHBvcnRzLmxvYWQgPSBmdW5jdGlvbiAoYXNzZXRVcmwsIGlkKSB7XG4gIHZhciBza2luID0gc2tpbkJhc2UubG9hZChhc3NldFVybCwgaWQpO1xuICByZXR1cm4gc2tpbjtcbn07XG4iLCIvKipcbiAqIEBvdmVydmlldyBJbnRlcm5ldCBTaW11bGF0b3IgYXBwIGZvciBDb2RlLm9yZy5cbiAqICAgICAgICAgICBUaGlzIGZpbGUgaXMgdGhlIG1haW4gZW50cnkgcG9pbnQgZm9yIHRoZSBJbnRlcm5ldCBTaW11bGF0b3IuXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiovXG4vKiBnbG9iYWwgLUJsb2NrbHkgKi9cbi8qIGdsb2JhbCBzZW5kUmVwb3J0ICovXG4vKiBnbG9iYWwgY29uZmlybSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIF8gPSB1dGlscy5nZXRMb2Rhc2goKTtcbnZhciBpMThuID0gcmVxdWlyZSgnLi9sb2NhbGUnKTtcbnZhciBPYnNlcnZhYmxlRXZlbnQgPSByZXF1aXJlKCcuLi9PYnNlcnZhYmxlRXZlbnQnKTtcbnZhciBSdW5Mb29wID0gcmVxdWlyZSgnLi4vUnVuTG9vcCcpO1xudmFyIHBhZ2UgPSByZXF1aXJlKCcuL3BhZ2UuaHRtbC5lanMnKTtcbnZhciBOZXRTaW1BbGVydCA9IHJlcXVpcmUoJy4vTmV0U2ltQWxlcnQnKTtcbnZhciBOZXRTaW1Db25zdGFudHMgPSByZXF1aXJlKCcuL05ldFNpbUNvbnN0YW50cycpO1xudmFyIE5ldFNpbVV0aWxzID0gcmVxdWlyZSgnLi9OZXRTaW1VdGlscycpO1xudmFyIERhc2hib2FyZFVzZXIgPSByZXF1aXJlKCcuL0Rhc2hib2FyZFVzZXInKTtcbnZhciBOZXRTaW1CaXRMb2dQYW5lbCA9IHJlcXVpcmUoJy4vTmV0U2ltQml0TG9nUGFuZWwnKTtcbnZhciBOZXRTaW1Mb2JieSA9IHJlcXVpcmUoJy4vTmV0U2ltTG9iYnknKTtcbnZhciBOZXRTaW1Mb2NhbENsaWVudE5vZGUgPSByZXF1aXJlKCcuL05ldFNpbUxvY2FsQ2xpZW50Tm9kZScpO1xudmFyIE5ldFNpbUxvZ2dlciA9IHJlcXVpcmUoJy4vTmV0U2ltTG9nZ2VyJyk7XG52YXIgTmV0U2ltTG9nUGFuZWwgPSByZXF1aXJlKCcuL05ldFNpbUxvZ1BhbmVsJyk7XG52YXIgTmV0U2ltUm91dGVyTG9nTW9kYWwgPSByZXF1aXJlKCcuL05ldFNpbVJvdXRlckxvZ01vZGFsJyk7XG52YXIgTmV0U2ltUm91dGVyTm9kZSA9IHJlcXVpcmUoJy4vTmV0U2ltUm91dGVyTm9kZScpO1xudmFyIE5ldFNpbVNlbmRQYW5lbCA9IHJlcXVpcmUoJy4vTmV0U2ltU2VuZFBhbmVsJyk7XG52YXIgTmV0U2ltU2hhcmQgPSByZXF1aXJlKCcuL05ldFNpbVNoYXJkJyk7XG52YXIgTmV0U2ltU3RhdHVzUGFuZWwgPSByZXF1aXJlKCcuL05ldFNpbVN0YXR1c1BhbmVsJyk7XG52YXIgTmV0U2ltVGFic0NvbXBvbmVudCA9IHJlcXVpcmUoJy4vTmV0U2ltVGFic0NvbXBvbmVudCcpO1xudmFyIE5ldFNpbVZpc3VhbGl6YXRpb24gPSByZXF1aXJlKCcuL05ldFNpbVZpc3VhbGl6YXRpb24nKTtcblxudmFyIERuc01vZGUgPSBOZXRTaW1Db25zdGFudHMuRG5zTW9kZTtcbnZhciBNZXNzYWdlR3JhbnVsYXJpdHkgPSBOZXRTaW1Db25zdGFudHMuTWVzc2FnZUdyYW51bGFyaXR5O1xuXG52YXIgbG9nZ2VyID0gTmV0U2ltTG9nZ2VyLmdldFNpbmdsZXRvbigpO1xudmFyIE5ldFNpbUdsb2JhbHMgPSByZXF1aXJlKCcuL05ldFNpbUdsb2JhbHMnKTtcblxuLyoqXG4gKiBUaGUgdG9wLWxldmVsIEludGVybmV0IFNpbXVsYXRvciBjb250cm9sbGVyLlxuICogQHBhcmFtIHtTdHVkaW9BcHB9IHN0dWRpb0FwcCBUaGUgc3R1ZGlvQXBwIGluc3RhbmNlIHRvIGJ1aWxkIHVwb24uXG4gKi9cbnZhciBOZXRTaW0gPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICB0aGlzLnNraW4gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7TmV0U2ltTGV2ZWxDb25maWd1cmF0aW9ufVxuICAgKi9cbiAgdGhpcy5sZXZlbCA9IHt9O1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5oZWFkaW5nID0gMDtcblxuICAvKipcbiAgICogQ3VycmVudCB1c2VyIG9iamVjdCB3aGljaCBhc3luY2hyb25vdXNseSBncmFicyB0aGUgY3VycmVudCB1c2VyJ3NcbiAgICogaW5mbyBmcm9tIHRoZSBkYXNoYm9hcmQgQVBJLlxuICAgKiBAdHlwZSB7RGFzaGJvYXJkVXNlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuY3VycmVudFVzZXJfID0gRGFzaGJvYXJkVXNlci5nZXRDdXJyZW50VXNlcigpO1xuXG4gIC8qKlxuICAgKiBBY2Nlc3NvciBvYmplY3QgZm9yIHNlbGVjdCBzaW11bGF0aW9uIHNoYXJkJ3MgdGFibGVzLCB3aGVyZSBhbiBzaGFyZFxuICAgKiBpcyBhIGdyb3VwIG9mIHRhYmxlcyBzaGFyZWQgYnkgYSBncm91cCBvZiB1c2VycywgYWxsb3dpbmcgdGhlbSB0byBvYnNlcnZlXG4gICAqIGEgY29tbW9uIG5ldHdvcmsgc3RhdGUuXG4gICAqXG4gICAqIFNlZSBlbi53aWtpcGVkaWEub3JnL3dpa2kvSW5zdGFuY2VfZHVuZ2VvbiBmb3IgYSBwb3B1bGFyIGV4YW1wbGUgb2YgdGhpc1xuICAgKiBjb25jZXB0LlxuICAgKlxuICAgKiBAdHlwZSB7TmV0U2ltU2hhcmR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnNoYXJkXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBsb2NhbCBjbGllbnQncyBub2RlIHJlcHJlc2VudGF0aW9uIHdpdGhpbiB0aGUgc2hhcmQuXG4gICAqIEB0eXBlIHtOZXRTaW1Mb2NhbENsaWVudE5vZGV9XG4gICAqL1xuICB0aGlzLm15Tm9kZSA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFRpY2sgYW5kIFJlbmRlciBsb29wIG1hbmFnZXIgZm9yIHRoZSBzaW11bGF0b3JcbiAgICogQHR5cGUge1J1bkxvb3B9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnJ1bkxvb3BfID0gbmV3IFJ1bkxvb3AoKTtcblxuICAvKipcbiAgICogQ3VycmVudCBjaHVuayBzaXplIChieXRlc2l6ZSlcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuY2h1bmtTaXplXyA9IDg7XG5cbiAgLyoqXG4gICAqIFRoZSBcIm15IGRldmljZVwiIGJpdHJhdGUgaW4gYml0cyBwZXIgc2Vjb25kXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLm15RGV2aWNlQml0UmF0ZV8gPSBJbmZpbml0eTtcblxuICAvKipcbiAgICogQ3VycmVudGx5IGVuYWJsZWQgZW5jb2RpbmcgdHlwZXMuXG4gICAqIEB0eXBlIHtFbmNvZGluZ1R5cGVbXX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuZW5hYmxlZEVuY29kaW5nc18gPSBbXTtcblxuICAvKipcbiAgICogQ3VycmVudCBkbnMgbW9kZS5cbiAgICogQHR5cGUge0Ruc01vZGV9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmRuc01vZGVfID0gRG5zTW9kZS5OT05FO1xuXG4gIC8vIC0tIENvbXBvbmVudHMgLS1cbiAgLyoqXG4gICAqIEB0eXBlIHtJTmV0U2ltTG9nUGFuZWx9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnJlY2VpdmVkTWVzc2FnZUxvZ18gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7SU5ldFNpbUxvZ1BhbmVsfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5zZW50TWVzc2FnZUxvZ18gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBFdmVudDogQ29ubmVjdGVkIHRvLCBvciBkaXNjb25uZWN0ZWQgZnJvbSwgYSBzaGFyZC5cbiAgICogU3BlY2lmaWNhbGx5LCBhZGRlZCBvciByZW1vdmVkIG91ciBjbGllbnQgbm9kZSBmcm9tIHRoZSBzaGFyZCdzIG5vZGUgdGFibGUuXG4gICAqIEB0eXBlIHtPYnNlcnZhYmxlRXZlbnR9XG4gICAqL1xuICB0aGlzLnNoYXJkQ2hhbmdlID0gbmV3IE9ic2VydmFibGVFdmVudCgpO1xuICB0aGlzLnNoYXJkQ2hhbmdlLnJlZ2lzdGVyKHRoaXMub25TaGFyZENoYW5nZV8uYmluZCh0aGlzKSk7XG5cbiAgLyoqXG4gICAqIFVudHlwZWQgc3RvcmFnZSBmb3IgaW5mb3JtYXRpb24gYWJvdXQgd2hpY2ggZXZlbnRzIHdlIGhhdmUgY3VycmVudGx5IGJvdW5kLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgdGhpcy5ldmVudEtleXMgPSB7fTtcbn07XG5cbk5ldFNpbS5wcm90b3R5cGUuaW5qZWN0U3R1ZGlvQXBwID0gZnVuY3Rpb24gKHN0dWRpb0FwcCkge1xuICB0aGlzLnN0dWRpb0FwcF8gPSBzdHVkaW9BcHA7XG59O1xuXG4vKipcbiAqIENhbGxlZCBvbiBwYWdlIGxvYWQuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnLnNraW5cbiAqIEBwYXJhbSB7TmV0U2ltTGV2ZWxDb25maWd1cmF0aW9ufSBjb25maWcubGV2ZWxcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb25maWcucmFja0VudiAtIGRldmVsb3BtZW50L3Byb2R1Y3Rpb24vZXRjLlxuICogQHBhcmFtIHtib29sZWFufSBjb25maWcuZW5hYmxlU2hvd0NvZGUgLSBBbHdheXMgZmFsc2UgZm9yIE5ldFNpbVxuICogQHBhcmFtIHtmdW5jdGlvbn0gY29uZmlnLmxvYWRBdWRpb1xuICogQHBhcmFtIHtzdHJpbmd9IGNvbmZpZy5odG1sIC0gcmVuZGVyZWQgbWFya3VwIHRvIGJlIGNyZWF0ZWQgaW5zaWRlIHRoaXMgbWV0aG9kXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICBpZiAoIXRoaXMuc3R1ZGlvQXBwXykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk5ldFNpbSByZXF1aXJlcyBhIFN0dWRpb0FwcFwiKTtcbiAgfVxuXG4gIC8vIFNldCB1cCBnbG9iYWwgc2luZ2xldG9uIGZvciBlYXN5IGFjY2VzcyB0byBzaW11bGF0b3Itd2lkZSBzZXR0aW5nc1xuICBOZXRTaW1HbG9iYWxzLnNldFJvb3RDb250cm9sbGVycyh0aGlzLnN0dWRpb0FwcF8sIHRoaXMpO1xuXG4gIC8vIFJlbW92ZSBpY29uIGZyb20gYWxsIE5ldFNpbSBpbnN0cnVjdGlvbnMgZGlhbG9nc1xuICBjb25maWcuc2tpbi5zdGF0aWNBdmF0YXIgPSBudWxsO1xuICBjb25maWcuc2tpbi5zbWFsbFN0YXRpY0F2YXRhciA9IG51bGw7XG4gIGNvbmZpZy5za2luLmZhaWx1cmVBdmF0YXIgPSBudWxsO1xuICBjb25maWcuc2tpbi53aW5BdmF0YXIgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBTa2luIGZvciB0aGUgbG9hZGVkIGxldmVsXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICB0aGlzLnNraW4gPSBjb25maWcuc2tpbjtcblxuICAvKipcbiAgICogQ29uZmlndXJhdGlvbiBmb3IgdGhlIGxvYWRlZCBsZXZlbFxuICAgKiBAdHlwZSB7TmV0U2ltTGV2ZWxDb25maWd1cmF0aW9ufVxuICAgKi9cbiAgdGhpcy5sZXZlbCA9IE5ldFNpbVV0aWxzLnNjcnViTGV2ZWxDb25maWd1cmF0aW9uXyhjb25maWcubGV2ZWwpO1xuXG4gIC8qKlxuICAgKiBDdXJyZW50IG9wZXJhdGluZyBlbnZpcm9ubWVudCwgdXNlZCB0byBkcml2ZSBjZXJ0YWluIGNvbmZpZ3VyYXRpb24uXG4gICAqIEB0eXBlIHtzdHJpbmd9IG9uZSBvZiBcImRldmVsb3BtZW50XCJ8XCJzdGFnaW5nXCJ8XCJ0ZXN0XCJ8XCJwcm9kdWN0aW9uXCJcbiAgICovXG4gIHRoaXMuZW52aXJvbm1lbnQgPSBjb25maWcucmFja0VudjtcblxuICAvKipcbiAgICogV2hldGhlciBOZXRTaW0gc2hvdWxkIHN1YnNjcmliZSB0byBldmVudHMgdXNpbmcgUHVzaGVyLlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMudXNlUHVzaGVyID0gY29uZmlnLnVzZVB1c2hlcjtcblxuICAvKipcbiAgICogVGhlIHB1YmxpYyBhcHBsaWNhdGlvbiBrZXkgZm9yIHRoZSBQdXNoZXIgc2VydmljZS4gKE5vdCB1c2VkIGlmIG5vdCB1c2luZ1xuICAgKiBQdXNoZXIpLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgdGhpcy5wdXNoZXJBcHBsaWNhdGlvbktleSA9IGNvbmZpZy5wdXNoZXJBcHBsaWNhdGlvbktleTtcblxuICAvKipcbiAgICogVGhlIHN0cmljdCBtYXhpbXVtIG51bWJlciBvZiByb3V0ZXJzIHBlciBzaGFyZC4gIE5vdGUgdGhlIHJlYWwgbWF4aW11bVxuICAgKiBtYXkgYmUgbG93ZXIgaWYgYm91bmRlZCBieSBhZGRyZXNzYWJsZSBzcGFjZS5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRoaXMuZ2xvYmFsTWF4Um91dGVycyA9IGNvbmZpZy5uZXRzaW1NYXhSb3V0ZXJzO1xuXG4gIC8qKlxuICAgKiBDb25maWd1cmF0aW9uIGZvciByZXBvcnRpbmcgbGV2ZWwgY29tcGxldGlvblxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgdGhpcy5yZXBvcnRpbmdJbmZvXyA9IGNvbmZpZy5yZXBvcnQ7XG5cbiAgY29uZmlnLmh0bWwgPSBwYWdlKHtcbiAgICBhc3NldFVybDogdGhpcy5zdHVkaW9BcHBfLmFzc2V0VXJsLFxuICAgIGRhdGE6IHtcbiAgICAgIHZpc3VhbGl6YXRpb246ICcnLFxuICAgICAgbG9jYWxlRGlyZWN0aW9uOiB0aGlzLnN0dWRpb0FwcF8ubG9jYWxlRGlyZWN0aW9uKCksXG4gICAgICBjb250cm9sczogcmVxdWlyZSgnLi9jb250cm9scy5odG1sLmVqcycpKHthc3NldFVybDogdGhpcy5zdHVkaW9BcHBfLmFzc2V0VXJsfSlcbiAgICB9LFxuICAgIGhpZGVSdW5CdXR0b246IHRydWVcbiAgfSk7XG5cbiAgY29uZmlnLmVuYWJsZVNob3dDb2RlID0gZmFsc2U7XG4gIGNvbmZpZy5waW5Xb3Jrc3BhY2VUb0JvdHRvbSA9IHRydWU7XG4gIGNvbmZpZy5sb2FkQXVkaW8gPSB0aGlzLmxvYWRBdWRpb18uYmluZCh0aGlzKTtcblxuICAvLyBPdmVycmlkZSBjZXJ0YWluIFN0dWRpb0FwcCBtZXRob2RzIC0gbmV0c2ltIGRvZXMgYSBsb3Qgb2YgY29uZmlndXJhdGlvblxuICAvLyBpdHNlbGYsIGJlY2F1c2Ugb2YgaXRzIG5vbnN0YW5kYXJkIGxheW91dC5cbiAgdGhpcy5zdHVkaW9BcHBfLmNvbmZpZ3VyZURvbSA9IE5ldFNpbS5jb25maWd1cmVEb21PdmVycmlkZV8uYmluZCh0aGlzLnN0dWRpb0FwcF8pO1xuICB0aGlzLnN0dWRpb0FwcF8ub25SZXNpemUgPSBOZXRTaW0ub25SZXNpemVPdmVycmlkZV8uYmluZCh0aGlzLnN0dWRpb0FwcF8pO1xuXG4gIHRoaXMuc3R1ZGlvQXBwXy5pbml0KGNvbmZpZyk7XG5cbiAgLy8gQ3JlYXRlIG5ldHNpbSBsb2JieSB3aWRnZXQgaW4gcGFnZVxuICB0aGlzLmN1cnJlbnRVc2VyXy53aGVuUmVhZHkoZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaW5pdFdpdGhVc2VyXyh0aGlzLmN1cnJlbnRVc2VyXyk7XG4gIH0uYmluZCh0aGlzKSk7XG5cbiAgLy8gQmVnaW4gdGhlIG1haW4gc2ltdWxhdGlvbiBsb29wXG4gIHRoaXMucnVuTG9vcF8udGljay5yZWdpc3Rlcih0aGlzLnRpY2suYmluZCh0aGlzKSk7XG4gIHRoaXMucnVuTG9vcF8uYmVnaW4oKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtSdW5Mb29wLkNsb2NrfSBjbG9ja1xuICovXG5OZXRTaW0ucHJvdG90eXBlLnRpY2sgPSBmdW5jdGlvbiAoY2xvY2spIHtcbiAgaWYgKHRoaXMuaXNDb25uZWN0ZWRUb1NoYXJkKCkpIHtcbiAgICB0aGlzLm15Tm9kZS50aWNrKGNsb2NrKTtcbiAgICB0aGlzLnNoYXJkXy50aWNrKGNsb2NrKTtcbiAgfVxufTtcblxuLyoqXG4gKiBQdWxsIGFuIGlkZW50aWZpZXIgZnJvbSB0aGUgVVJMIHRoYXQgc2VwYXJhdGVzIHRoaXMgbGV2ZWwncyBzaGFyZCBmcm9tIG90aGVycy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbk5ldFNpbS5wcm90b3R5cGUuZ2V0VW5pcXVlTGV2ZWxLZXkgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBsb2NhdGlvbi5wYXRobmFtZS5zdWJzdHIoMSkucmVwbGFjZSgvXFxXL2csICctJyk7XG59O1xuXG4vKipcbiAqIEV4dHJhY3RzIHF1ZXJ5IHBhcmFtZXRlcnMgZnJvbSBhIGZ1bGwgVVJMIGFuZCByZXR1cm5zIHRoZW0gYXMgYSBzaW1wbGVcbiAqIG9iamVjdC5cbiAqIEByZXR1cm5zIHsqfVxuICovXG5OZXRTaW0ucHJvdG90eXBlLmdldE92ZXJyaWRlU2hhcmRJRCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHBhcnRzID0gbG9jYXRpb24uc2VhcmNoLnNwbGl0KCc/Jyk7XG4gIGlmIChwYXJ0cy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgdmFyIHNoYXJkSUQ7XG4gIHBhcnRzWzFdLnNwbGl0KCcmJykuZm9yRWFjaChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICB2YXIgc2lkZXMgPSBwYXJhbS5zcGxpdCgnPScpO1xuICAgIGlmIChzaWRlcy5sZW5ndGggPiAxICYmIHNpZGVzWzBdID09PSAncycpIHtcbiAgICAgIHNoYXJkSUQgPSBzaWRlc1sxXTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gc2hhcmRJRDtcbn07XG5cbi8qKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRSVUUgaWYgdGhlIGxldmVsIGlzIGNvbmZpZ3VyZWQgdG8gc2hvdyBhbnkgdGFicy5cbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5zaG91bGRTaG93QW55VGFicyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMubGV2ZWwuc2hvd1RhYnMubGVuZ3RoID4gMDtcbn07XG5cbi8qKlxuICogSW5pdGlhbGl6YXRpb24gdGhhdCBjYW4gaGFwcGVuIG9uY2Ugd2UgaGF2ZSBhIHVzZXIgbmFtZS5cbiAqIENvdWxkIGNvbGxhcHNlIHRoaXMgYmFjayBpbnRvIGluaXQgaWYgYXQgc29tZSBwb2ludCB3ZSBjYW4gZ3VhcmFudGVlIHRoYXRcbiAqIHVzZXIgbmFtZSBpcyBhdmFpbGFibGUgb24gbG9hZC5cbiAqIEBwYXJhbSB7RGFzaGJvYXJkVXNlcn0gdXNlclxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5pbml0V2l0aFVzZXJfID0gZnVuY3Rpb24gKHVzZXIpIHtcbiAgdGhpcy5tYWluQ29udGFpbmVyXyA9ICQoJyNuZXRzaW0nKTtcblxuICAvLyBDcmVhdGUgbG9nIHBhbmVscyBhY2NvcmRpbmcgdG8gbGV2ZWwgY29uZmlndXJhdGlvblxuICBpZiAodGhpcy5sZXZlbC5tZXNzYWdlR3JhbnVsYXJpdHkgPT09IE1lc3NhZ2VHcmFudWxhcml0eS5QQUNLRVRTKSB7XG4gICAgdGhpcy5yZWNlaXZlZE1lc3NhZ2VMb2dfID0gbmV3IE5ldFNpbUxvZ1BhbmVsKCQoJyNuZXRzaW0tcmVjZWl2ZWQnKSwge1xuICAgICAgbG9nVGl0bGU6IGkxOG4ucmVjZWl2ZWRNZXNzYWdlTG9nKCksXG4gICAgICBpc01pbmltaXplZDogZmFsc2UsXG4gICAgICBoYXNVbnJlYWRNZXNzYWdlczogdHJ1ZSxcbiAgICAgIHBhY2tldFNwZWM6IHRoaXMubGV2ZWwuY2xpZW50SW5pdGlhbFBhY2tldEhlYWRlclxuICAgIH0pO1xuXG4gICAgdGhpcy5zZW50TWVzc2FnZUxvZ18gPSBuZXcgTmV0U2ltTG9nUGFuZWwoJCgnI25ldHNpbS1zZW50JyksIHtcbiAgICAgIGxvZ1RpdGxlOiBpMThuLnNlbnRNZXNzYWdlTG9nKCksXG4gICAgICBpc01pbmltaXplZDogdHJ1ZSxcbiAgICAgIGhhc1VucmVhZE1lc3NhZ2VzOiBmYWxzZSxcbiAgICAgIHBhY2tldFNwZWM6IHRoaXMubGV2ZWwuY2xpZW50SW5pdGlhbFBhY2tldEhlYWRlclxuICAgIH0pO1xuICB9IGVsc2UgaWYgKHRoaXMubGV2ZWwubWVzc2FnZUdyYW51bGFyaXR5ID09PSBNZXNzYWdlR3JhbnVsYXJpdHkuQklUUykge1xuICAgIHRoaXMucmVjZWl2ZWRNZXNzYWdlTG9nXyA9IG5ldyBOZXRTaW1CaXRMb2dQYW5lbCgkKCcjbmV0c2ltLXJlY2VpdmVkJyksIHtcbiAgICAgIGxvZ1RpdGxlOiBpMThuLnJlY2VpdmVCaXRzKCksXG4gICAgICBpc01pbmltaXplZDogZmFsc2UsXG4gICAgICBuZXRzaW06IHRoaXMsXG4gICAgICBzaG93UmVhZFdpcmVCdXR0b246IHRydWVcbiAgICB9KTtcblxuICAgIHRoaXMuc2VudE1lc3NhZ2VMb2dfID0gbmV3IE5ldFNpbUJpdExvZ1BhbmVsKCQoJyNuZXRzaW0tc2VudCcpLCB7XG4gICAgICBsb2dUaXRsZTogaTE4bi5zZW50Qml0c0xvZygpLFxuICAgICAgaXNNaW5pbWl6ZWQ6IGZhbHNlLFxuICAgICAgbmV0c2ltOiB0aGlzXG4gICAgfSk7XG4gIH1cblxuICB0aGlzLnN0YXR1c1BhbmVsXyA9IG5ldyBOZXRTaW1TdGF0dXNQYW5lbChcbiAgICAgICQoJyNuZXRzaW0tc3RhdHVzJyksXG4gICAgICB7XG4gICAgICAgIGRpc2Nvbm5lY3RDYWxsYmFjazogdGhpcy5kaXNjb25uZWN0RnJvbVJlbW90ZS5iaW5kKHRoaXMsIGZ1bmN0aW9uICgpIHt9KVxuICAgICAgfSk7XG5cbiAgdGhpcy5yb3V0ZXJMb2dNb2RhbF8gPSBuZXcgTmV0U2ltUm91dGVyTG9nTW9kYWwoJCgnI3JvdXRlci1sb2ctbW9kYWwnKSk7XG5cbiAgdGhpcy52aXN1YWxpemF0aW9uXyA9IG5ldyBOZXRTaW1WaXN1YWxpemF0aW9uKCQoJyNuZXRzaW0tdmlzdWFsaXphdGlvbicpLFxuICAgICAgdGhpcy5ydW5Mb29wXyk7XG5cbiAgLy8gTG9iYnkgcGFuZWw6IENvbnRyb2xzIGZvciBwaWNraW5nIGEgcmVtb3RlIG5vZGUgYW5kIGNvbm5lY3RpbmcgdG8gaXQuXG4gIHRoaXMubG9iYnlfID0gbmV3IE5ldFNpbUxvYmJ5KFxuICAgICAgJCgnLmxvYmJ5LXBhbmVsJyksXG4gICAgICB0aGlzLCB7XG4gICAgICAgIHVzZXI6IHVzZXIsXG4gICAgICAgIGxldmVsS2V5OiB0aGlzLmdldFVuaXF1ZUxldmVsS2V5KCksXG4gICAgICAgIHNoYXJlZFNoYXJkU2VlZDogdGhpcy5nZXRPdmVycmlkZVNoYXJkSUQoKVxuICAgICAgfSk7XG5cbiAgLy8gVGFiIHBhbmVsIC0gY29udGFpbnMgaW5zdHJ1Y3Rpb25zLCBteSBkZXZpY2UsIHJvdXRlciwgZG5zXG4gIGlmICh0aGlzLnNob3VsZFNob3dBbnlUYWJzKCkpIHtcbiAgICB0aGlzLnRhYnNfID0gbmV3IE5ldFNpbVRhYnNDb21wb25lbnQoXG4gICAgICAgICQoJyNuZXRzaW0tdGFicycpLFxuICAgICAgICB0aGlzLnJ1bkxvb3BfLFxuICAgICAgICB7XG4gICAgICAgICAgY2h1bmtTaXplU2xpZGVyQ2hhbmdlQ2FsbGJhY2s6IHRoaXMuc2V0Q2h1bmtTaXplLmJpbmQodGhpcyksXG4gICAgICAgICAgbXlEZXZpY2VCaXRSYXRlQ2hhbmdlQ2FsbGJhY2s6IHRoaXMuc2V0TXlEZXZpY2VCaXRSYXRlLmJpbmQodGhpcyksXG4gICAgICAgICAgZW5jb2RpbmdDaGFuZ2VDYWxsYmFjazogdGhpcy5jaGFuZ2VFbmNvZGluZ3MuYmluZCh0aGlzKSxcbiAgICAgICAgICByb3V0ZXJCYW5kd2lkdGhTbGlkZXJDaGFuZ2VDYWxsYmFjazogdGhpcy5zZXRSb3V0ZXJCYW5kd2lkdGguYmluZCh0aGlzKSxcbiAgICAgICAgICByb3V0ZXJCYW5kd2lkdGhTbGlkZXJTdG9wQ2FsbGJhY2s6IHRoaXMuY2hhbmdlUmVtb3RlUm91dGVyQmFuZHdpZHRoLmJpbmQodGhpcyksXG4gICAgICAgICAgcm91dGVyTWVtb3J5U2xpZGVyQ2hhbmdlQ2FsbGJhY2s6IHRoaXMuc2V0Um91dGVyTWVtb3J5LmJpbmQodGhpcyksXG4gICAgICAgICAgcm91dGVyTWVtb3J5U2xpZGVyU3RvcENhbGxiYWNrOiB0aGlzLmNoYW5nZVJlbW90ZVJvdXRlck1lbW9yeS5iaW5kKHRoaXMpLFxuICAgICAgICAgIGRuc01vZGVDaGFuZ2VDYWxsYmFjazogdGhpcy5jaGFuZ2VSZW1vdGVEbnNNb2RlLmJpbmQodGhpcyksXG4gICAgICAgICAgYmVjb21lRG5zQ2FsbGJhY2s6IHRoaXMuYmVjb21lRG5zTm9kZS5iaW5kKHRoaXMpXG4gICAgICAgIH0pO1xuICAgIHRoaXMudGFic18uYXR0YWNoVG9SdW5Mb29wKHRoaXMucnVuTG9vcF8pO1xuICB9XG5cbiAgdGhpcy5zZW5kUGFuZWxfID0gbmV3IE5ldFNpbVNlbmRQYW5lbCgkKCcjbmV0c2ltLXNlbmQnKSwgdGhpcy5sZXZlbCxcbiAgICAgIHRoaXMpO1xuXG4gIHRoaXMuY2hhbmdlRW5jb2RpbmdzKHRoaXMubGV2ZWwuZGVmYXVsdEVuYWJsZWRFbmNvZGluZ3MpO1xuICB0aGlzLnNldENodW5rU2l6ZSh0aGlzLmxldmVsLmRlZmF1bHRDaHVua1NpemVCaXRzKTtcbiAgdGhpcy5zZXRNeURldmljZUJpdFJhdGUodGhpcy5sZXZlbC5kZWZhdWx0Qml0UmF0ZUJpdHNQZXJTZWNvbmQpO1xuICB0aGlzLnNldFJvdXRlckJhbmR3aWR0aCh0aGlzLmxldmVsLmRlZmF1bHRSb3V0ZXJCYW5kd2lkdGgpO1xuICB0aGlzLnNldFJvdXRlck1lbW9yeSh0aGlzLmxldmVsLmRlZmF1bHRSb3V0ZXJNZW1vcnkpO1xuICB0aGlzLnNldERuc01vZGUodGhpcy5sZXZlbC5kZWZhdWx0RG5zTW9kZSk7XG4gIHRoaXMucmVuZGVyKCk7XG5cbiAgLy8gVHJ5IGFuZCBncmFjZWZ1bGx5IGRpc2Nvbm5lY3Qgd2hlbiBjbG9zaW5nIHRoZSB3aW5kb3dcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIHRoaXMub25CZWZvcmVVbmxvYWRfLmJpbmQodGhpcykpO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndW5sb2FkJywgdGhpcy5vblVubG9hZF8uYmluZCh0aGlzKSk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBfLmRlYm91bmNlKHRoaXMudXBkYXRlTGF5b3V0LmJpbmQodGhpcyksIDI1MCkpO1xufTtcblxuLyoqXG4gKiBCZWZvcmUtdW5sb2FkIGhhbmRsZXIsIHVzZWQgdG8gd2FybiB0aGUgdXNlciAoaWYgbmVjZXNzYXJ5KSBvZiB3aGF0IHRoZXlcbiAqIGFyZSBhYmFuZG9uaW5nIGlmIHRoZXkgbmF2aWdhdGUgYXdheSBmcm9tIHRoZSBwYWdlLlxuICpcbiAqIFRoaXMgZXZlbnQgaGFzIHNvbWUgd2VpcmQgc3BlY2lhbCBwcm9wZXJ0aWVzIGFuZCBpbmNvbnNpc3RlbnQgYmVoYXZpb3JcbiAqIGFjcm9zcyBicm93c2Vyc1xuICpcbiAqIFNlZTpcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0V2ZW50cy9iZWZvcmV1bmxvYWRcbiAqIGh0dHA6Ly93d3cuemFjaGxlYXQuY29tL3dlYi9kb250LWxldC10aGUtZG9vci1oaXQteW91LW9udW5sb2FkLWFuZC1vbmJlZm9yZXVubG9hZC9cbiAqIGh0dHA6Ly93d3cuaHVubG9jay5jb20vYmxvZ3MvTWFzdGVyaW5nX1RoZV9CYWNrX0J1dHRvbl9XaXRoX0phdmFzY3JpcHRcbiAqXG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IElmIHdlIHdhbnQgdG8gd2FybiB0aGUgdXNlciBiZWZvcmUgdGhleSBsZWF2ZVxuICogICAgICAgICAgdGhlIHBhZ2UsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGEgd2FybmluZyBzdHJpbmcsIHdoaWNoIG1heSBvclxuICogICAgICAgICAgbWF5IG5vdCBhY3R1YWxseSBiZSB1c2VkIGJ5IHRoZSBicm93c2VyIHRvIHByZXNlbnQgYSB3YXJuaW5nLiAgSWZcbiAqICAgICAgICAgIHdlIGRvbid0IHdhbnQgdG8gd2FybiB0aGUgdXNlciwgdGhpcyBtZXRob2QgZG9lc24ndCByZXR1cm4gYW55dGhpbmcuXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW0ucHJvdG90eXBlLm9uQmVmb3JlVW5sb2FkXyA9IGZ1bmN0aW9uIChldmVudCkge1xuICBpZiAod2luZG93Ll9fVGVzdEludGVyZmFjZSAmJiB3aW5kb3cuX19UZXN0SW50ZXJmYWNlLmlnbm9yZU9uQmVmb3JlVW5sb2FkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gTm8gbmVlZCB0byB3YXJuIGFib3V0IG5hdmlnYXRpbmcgYXdheSBpZiB0aGUgc3R1ZGVudCBpcyBub3QgY29ubmVjdGVkLFxuICAvLyBvciBpcyBzdGlsbCBpbiB0aGUgbG9iYnkuXG4gIGlmICh0aGlzLmlzQ29ubmVjdGVkVG9SZW1vdGUoKSkge1xuICAgIGV2ZW50LnJldHVyblZhbHVlID0gaTE4bi5vbkJlZm9yZVVubG9hZFdhcm5pbmcoKTtcbiAgICByZXR1cm4gaTE4bi5vbkJlZm9yZVVubG9hZFdhcm5pbmcoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBVbmxvYWQgaGFuZGxlci4gIFVzZWQgdG8gYXR0ZW1wdCBhIGNsZWFuIGRpc2Nvbm5lY3QgZnJvbSB0aGUgc2ltdWxhdGlvblxuICogdXNpbmcgc3luY2hyb25vdXMgQUpBWCBjYWxscyB0byByZW1vdmUgb3VyIG93biByb3dzIGZyb20gcmVtb3RlIHN0b3JhZ2UuXG4gKlxuICogU2VlOlxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvRXZlbnRzL3VubG9hZFxuICpcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUub25VbmxvYWRfID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5pc0Nvbm5lY3RlZFRvU2hhcmQoKSkge1xuICAgIHRoaXMuc3luY2hyb25vdXNEaXNjb25uZWN0RnJvbVNoYXJkXygpO1xuICB9XG59O1xuXG4vKipcbiAqIFdoZXRoZXIgd2UgYXJlIGN1cnJlbnRseSBjb25uZWN0ZWQgdG8gYSBuZXRzaW0gc2hhcmRcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5OZXRTaW0ucHJvdG90eXBlLmlzQ29ubmVjdGVkVG9TaGFyZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIChudWxsICE9PSB0aGlzLm15Tm9kZSk7XG59O1xuXG4vKipcbiAqIFdoZXRoZXIgd2UgYXJlIGN1cnJlbnRseSBjb25uZWN0ZWQgdG8gYSBzaGFyZCB3aXRoIHRoZSBnaXZlbiBJRFxuICogQHBhcmFtIHtzdHJpbmd9IHNoYXJkSURcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5OZXRTaW0ucHJvdG90eXBlLmlzQ29ubmVjdGVkVG9TaGFyZElEID0gZnVuY3Rpb24gKHNoYXJkSUQpIHtcbiAgcmV0dXJuIHRoaXMuaXNDb25uZWN0ZWRUb1NoYXJkKCkgJiYgdGhpcy5zaGFyZF8uaWQgPT09IHNoYXJkSUQ7XG59O1xuXG4vKipcbiAqIEVzdGFibGlzaGVzIGEgbmV3IGNvbm5lY3Rpb24gdG8gYSBuZXRzaW0gc2hhcmQsIGNsb3NpbmcgdGhlIG9sZCBvbmVcbiAqIGlmIHByZXNlbnQuXG4gKiBAcGFyYW0geyFzdHJpbmd9IHNoYXJkSURcbiAqIEBwYXJhbSB7IXN0cmluZ30gZGlzcGxheU5hbWVcbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5jb25uZWN0VG9TaGFyZCA9IGZ1bmN0aW9uIChzaGFyZElELCBkaXNwbGF5TmFtZSkge1xuICBpZiAodGhpcy5pc0Nvbm5lY3RlZFRvU2hhcmQoKSkge1xuICAgIGxvZ2dlci53YXJuKFwiQXV0by1jbG9zaW5nIHByZXZpb3VzIGNvbm5lY3Rpb24uLi5cIik7XG4gICAgdGhpcy5kaXNjb25uZWN0RnJvbVNoYXJkKHRoaXMuY29ubmVjdFRvU2hhcmQuYmluZCh0aGlzLCBzaGFyZElELCBkaXNwbGF5TmFtZSkpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuc2hhcmRfID0gbmV3IE5ldFNpbVNoYXJkKHNoYXJkSUQsIE5ldFNpbUdsb2JhbHMuZ2V0UHViU3ViQ29uZmlnKCkpO1xuICB0aGlzLmNyZWF0ZU15Q2xpZW50Tm9kZV8oZGlzcGxheU5hbWUsIGZ1bmN0aW9uIChlcnIsIG15Tm9kZSkge1xuICAgIHRoaXMubXlOb2RlID0gbXlOb2RlO1xuICAgIHRoaXMuc2hhcmRDaGFuZ2Uubm90aWZ5T2JzZXJ2ZXJzKHRoaXMuc2hhcmRfLCB0aGlzLm15Tm9kZSk7XG4gIH0uYmluZCh0aGlzKSk7XG59O1xuXG4vKipcbiAqIEdpdmVuIGEgbG9iYnkgdGFibGUgaGFzIGFscmVhZHkgYmVlbiBjb25maWd1cmVkLCBjb25uZWN0cyB0byB0aGF0IHRhYmxlXG4gKiBieSBpbnNlcnRpbmcgYSByb3cgZm9yIG91cnNlbHZlcyBpbnRvIHRoYXQgdGFibGUgYW5kIHNhdmluZyB0aGUgcm93IElELlxuICogQHBhcmFtIHshc3RyaW5nfSBkaXNwbGF5TmFtZVxuICogQHBhcmFtIHshTm9kZVN0eWxlQ2FsbGJhY2t9IG9uQ29tcGxldGUgLSByZXN1bHQgaXMgbmV3IGxvY2FsIG5vZGVcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUuY3JlYXRlTXlDbGllbnROb2RlXyA9IGZ1bmN0aW9uIChkaXNwbGF5TmFtZSwgb25Db21wbGV0ZSkge1xuICBOZXRTaW1Mb2NhbENsaWVudE5vZGUuY3JlYXRlKHRoaXMuc2hhcmRfLCBkaXNwbGF5TmFtZSwgZnVuY3Rpb24gKGVyciwgbm9kZSkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGxvZ2dlci5lcnJvcihcIkZhaWxlZCB0byBjcmVhdGUgY2xpZW50IG5vZGU7IFwiICsgZXJyLm1lc3NhZ2UpO1xuICAgICAgTmV0U2ltQWxlcnQuZXJyb3IoaTE4bi5jcmVhdGVNeUNsaWVudE5vZGVFcnJvcigpKTtcbiAgICAgIG9uQ29tcGxldGUoZXJyLCBudWxsKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBub2RlLnNldExvc3RDb25uZWN0aW9uQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgICAgTmV0U2ltQWxlcnQud2FybihpMThuLmFsZXJ0Q29ubmVjdGlvblJlc2V0KCkpO1xuICAgICAgdGhpcy5kaXNjb25uZWN0RnJvbVNoYXJkKCk7XG4gICAgfS5iaW5kKHRoaXMpKTtcbiAgICBub2RlLmluaXRpYWxpemVTaW11bGF0aW9uKHRoaXMuc2VudE1lc3NhZ2VMb2dfLCB0aGlzLnJlY2VpdmVkTWVzc2FnZUxvZ18pO1xuICAgIG9uQ29tcGxldGUoZXJyLCBub2RlKTtcbiAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogU3luY2hyb25vdXMgZGlzY29ubmVjdCwgZm9yIHVzZSB3aGVuIG5hdmlnYXRpbmcgYXdheSBmcm9tIHRoZSBwYWdlXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW0ucHJvdG90eXBlLnN5bmNocm9ub3VzRGlzY29ubmVjdEZyb21TaGFyZF8gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMubXlOb2RlLnN0b3BTaW11bGF0aW9uKCk7XG4gIHRoaXMubXlOb2RlLnN5bmNocm9ub3VzRGVzdHJveSgpO1xuICB0aGlzLm15Tm9kZSA9IG51bGw7XG4gIC8vIERvbid0IG5vdGlmeSBvYnNlcnZlcnMsIHRoaXMgc2hvdWxkIG9ubHkgYmUgdXNlZCB3aGVuIG5hdmlnYXRpbmcgYXdheVxuICAvLyBmcm9tIHRoZSBwYWdlLlxufTtcblxuLyoqXG4gKiBFbmRzIHRoZSBjb25uZWN0aW9uIHRvIHRoZSBuZXRzaW0gc2hhcmQuXG4gKiBAcGFyYW0ge05vZGVTdHlsZUNhbGxiYWNrfSBbb25Db21wbGV0ZV1cbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5kaXNjb25uZWN0RnJvbVNoYXJkID0gZnVuY3Rpb24gKG9uQ29tcGxldGUpIHtcbiAgb25Db21wbGV0ZSA9IG9uQ29tcGxldGUgfHwgZnVuY3Rpb24gKCkge307XG5cbiAgaWYgKCF0aGlzLmlzQ29ubmVjdGVkVG9TaGFyZCgpKSB7XG4gICAgbG9nZ2VyLndhcm4oXCJSZWR1bmRhbnQgZGlzY29ubmVjdCBjYWxsLlwiKTtcbiAgICBvbkNvbXBsZXRlKG51bGwsIG51bGwpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0aGlzLmlzQ29ubmVjdGVkVG9SZW1vdGUoKSkge1xuICAgIC8vIERpc2Nvbm5lY3QsIGZyb20gdGhlIHJlbW90ZSBub2RlLCBhbmQgdHJ5IHRoaXMgYWdhaW4gb24gY29tcGxldGlvbi5cbiAgICB0aGlzLmRpc2Nvbm5lY3RGcm9tUmVtb3RlKHRoaXMuZGlzY29ubmVjdEZyb21TaGFyZC5iaW5kKHRoaXMsIG9uQ29tcGxldGUpKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLm15Tm9kZS5zdG9wU2ltdWxhdGlvbigpO1xuICB0aGlzLm15Tm9kZS5kZXN0cm95KGZ1bmN0aW9uIChlcnIsIHJlc3VsdCkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGxvZ2dlci53YXJuKCdFcnJvciBkZXN0cm95aW5nIG5vZGU6JyArIGVyci5tZXNzYWdlKTtcbiAgICAgIC8vIERvbid0IHN0b3AgZGlzY29ubmVjdGluZyBvbiBhbiBlcnJvciBoZXJlOyB3ZSBtYWtlIGEgZ29vZC1mYWl0aFxuICAgICAgLy8gZWZmb3J0IHRvIGNsZWFuIHVwIGFmdGVyIG91cnNlbHZlcywgYW5kIGxldCB0aGUgY2xlYW5pbmcgc3lzdGVtIHRha2VcbiAgICAgIC8vIGNhcmUgb2YgdGhlIHJlc3QuXG4gICAgfVxuXG4gICAgdGhpcy5teU5vZGUgPSBudWxsO1xuICAgIHRoaXMuc2hhcmRfLmRpc2Nvbm5lY3QoKTtcbiAgICB0aGlzLnNoYXJkXyA9IG51bGw7XG4gICAgdGhpcy5zaGFyZENoYW5nZS5ub3RpZnlPYnNlcnZlcnMobnVsbCwgbnVsbCk7XG4gICAgb25Db21wbGV0ZShlcnIsIHJlc3VsdCk7XG4gIH0uYmluZCh0aGlzKSk7XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIHRoZSBsb2NhbCBjbGllbnQgaXMgY29ubmVjdGVkIHRvIGEgcmVtb3RlIG5vZGVcbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5pc0Nvbm5lY3RlZFRvUmVtb3RlID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5pc0Nvbm5lY3RlZFRvQ2xpZW50KCkgfHwgdGhpcy5pc0Nvbm5lY3RlZFRvUm91dGVyKCk7XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHtOZXRTaW1Ob2RlfSB0aGUgcmVtb3RlIG5vZGUgb3VyIGNsaWVudCBpcyBjb25uZWN0ZWQgdG8sIG9yIG51bGwgaWZcbiAqICAgICAgICAgIG5vdCBjb25uZWN0ZWRcbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5nZXRDb25uZWN0ZWRSZW1vdGVOb2RlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgY2xpZW50ID0gdGhpcy5nZXRDb25uZWN0ZWRDbGllbnQoKTtcbiAgdmFyIHJvdXRlciA9IHRoaXMuZ2V0Q29ubmVjdGVkUm91dGVyKCk7XG4gIHJldHVybiBjbGllbnQgPyBjbGllbnQgOiByb3V0ZXI7XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIHRoZSBsb2NhbCBjbGllbnQgaGFzIGEgbXV0dWFsIFAyUCBjb25uZWN0aW9uIHRvXG4gKiAgICAgICAgICBhbm90aGVyIGNsaWVudC5cbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5pc0Nvbm5lY3RlZFRvQ2xpZW50ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISEodGhpcy5nZXRDb25uZWN0ZWRDbGllbnQoKSk7XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHtOZXRTaW1DbGllbnROb2RlfSB0aGUgY2xpZW50IG5vZGUgb3VyIGNsaWVudCBpcyBjb25uZWN0ZWQgdG8sIG9yXG4gKiAgICAgICAgICBudWxsIGlmIG5vdCBjb25uZWN0ZWQgdG8gYW5vdGhlciBjbGllbnQuXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUuZ2V0Q29ubmVjdGVkQ2xpZW50ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5pc0Nvbm5lY3RlZFRvU2hhcmQoKSkge1xuICAgIHJldHVybiB0aGlzLm15Tm9kZS5teVJlbW90ZUNsaWVudDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cbi8qKlxuICogV2hldGhlciBvdXIgY2xpZW50IG5vZGUgaXMgY29ubmVjdGVkIHRvIGEgcm91dGVyIG5vZGUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5pc0Nvbm5lY3RlZFRvUm91dGVyID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISEodGhpcy5nZXRDb25uZWN0ZWRSb3V0ZXIoKSk7XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHtOZXRTaW1Sb3V0ZXJOb2RlfSB0aGUgcm91dGVyIG5vZGUgb3VyIGNsaWVudCBpcyBjb25uZWN0ZWQgdG8sIG9yXG4gKiAgICAgICAgICBudWxsIGlmIG5vdCBjb25uZWN0ZWQgdG8gYSByb3V0ZXIuXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUuZ2V0Q29ubmVjdGVkUm91dGVyID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5pc0Nvbm5lY3RlZFRvU2hhcmQoKSkge1xuICAgIHJldHVybiB0aGlzLm15Tm9kZS5nZXRNeVJvdXRlcigpO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuLyoqXG4gKiBFc3RhYmxpc2ggYSBjb25uZWN0aW9uIGJldHdlZW4gdGhlIGxvY2FsIGNsaWVudCBhbmQgdGhlIGdpdmVuXG4gKiBzaW11bGF0ZWQgcm91dGVyLlxuICogQHBhcmFtIHtudW1iZXJ9IHJvdXRlcklEXG4gKiBAcGFyYW0ge05vZGVTdHlsZUNhbGxiYWNrfSBvbkNvbXBsZXRlXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUuY29ubmVjdFRvUm91dGVyID0gZnVuY3Rpb24gKHJvdXRlcklELCBvbkNvbXBsZXRlKSB7XG4gIGlmICh0aGlzLmlzQ29ubmVjdGVkVG9SZW1vdGUoKSkge1xuICAgIC8vIERpc2Nvbm5lY3QgYW5kIHRyeSB0byBjb25uZWN0IGFnYWluIHdoZW4gd2UncmUgZG9uZS5cbiAgICBsb2dnZXIud2FybihcIkF1dG8tZGlzY29ubmVjdGluZyBmcm9tIHByZXZpb3VzIHJvdXRlci5cIik7XG4gICAgdGhpcy5kaXNjb25uZWN0RnJvbVJlbW90ZSh0aGlzLmNvbm5lY3RUb1JvdXRlci5iaW5kKHRoaXMsIHJvdXRlcklELCBvbkNvbXBsZXRlKSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBOZXRTaW1Sb3V0ZXJOb2RlLmdldChyb3V0ZXJJRCwgdGhpcy5zaGFyZF8sIGZ1bmN0aW9uIChlcnIsIHJvdXRlcikge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGxvZ2dlci53YXJuKCdGYWlsZWQgdG8gZmluZCByb3V0ZXIgd2l0aCBJRCAnICsgcm91dGVySUQgKyAnOyAnICtcbiAgICAgICAgICBlcnIubWVzc2FnZSk7XG4gICAgICBvbkNvbXBsZXRlKGVycik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2VsZi5teU5vZGUuY29ubmVjdFRvUm91dGVyKHJvdXRlciwgZnVuY3Rpb24gKGVycikge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBsb2dnZXIud2FybignRmFpbGVkIHRvIGNvbm5lY3QgdG8gJyArIHJvdXRlci5nZXREaXNwbGF5TmFtZSgpICsgJzsgJyArXG4gICAgICAgICAgICBlcnIubWVzc2FnZSk7XG4gICAgICB9XG4gICAgICBvbkNvbXBsZXRlKGVyciwgcm91dGVyKTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIERpc2Nvbm5lY3RzIG91ciBjbGllbnQgbm9kZSBmcm9tIHRoZSBjdXJyZW50bHkgY29ubmVjdGVkIHJlbW90ZSBub2RlLlxuICogRGVzdHJveXMgdGhlIHNoYXJlZCB3aXJlLlxuICogQHBhcmFtIHtOb2RlU3R5bGVDYWxsYmFja30gW29uQ29tcGxldGVdIG9wdGlvbmFsIGZ1bmN0aW9uIHRvIGNhbGwgd2hlblxuICogICAgICAgIGRpc2Nvbm5lY3QgaXMgY29tcGxldGVcbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5kaXNjb25uZWN0RnJvbVJlbW90ZSA9IGZ1bmN0aW9uIChvbkNvbXBsZXRlKSB7XG4gIG9uQ29tcGxldGUgPSB1dGlscy52YWx1ZU9yKG9uQ29tcGxldGUsIGZ1bmN0aW9uICgpIHt9KTtcbiAgdGhpcy5teU5vZGUuZGlzY29ubmVjdFJlbW90ZShvbkNvbXBsZXRlKTtcbn07XG5cbi8qKlxuICogQXN5bmNocm9ub3VzIGZldGNoIG9mIHRoZSBsYXRlc3QgbWVzc2FnZSBzaGFyZWQgYmV0d2VlbiB0aGUgbG9jYWxcbiAqIG5vZGUgYW5kIGl0cyBjb25uZWN0ZWQgcmVtb3RlLlxuICogVXNlZCBvbmx5IGluIHNpbXBsZXggJiBiaXQtZ3JhbnVsYXIgbW9kZS5cbiAqIEBwYXJhbSB7IU5vZGVTdHlsZUNhbGxiYWNrfSBvbkNvbXBsZXRlXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUucmVjZWl2ZUJpdCA9IGZ1bmN0aW9uIChvbkNvbXBsZXRlKSB7XG4gIHRoaXMubXlOb2RlLmdldExhdGVzdE1lc3NhZ2VPblNpbXBsZXhXaXJlKG9uQ29tcGxldGUpO1xufTtcblxuLyoqXG4gKiBVcGRhdGUgZW5jb2RpbmctdmlldyBzZXR0aW5nIGFjcm9zcyB0aGUgd2hvbGUgYXBwLlxuICpcbiAqIFByb3BhZ2F0ZXMgdGhlIGNoYW5nZSBkb3duIGludG8gcmVsZXZhbnQgY2hpbGQgY29tcG9uZW50cywgcG9zc2libHlcbiAqIGluY2x1ZGluZyB0aGUgY29udHJvbCB0aGF0IGluaXRpYXRlZCB0aGUgY2hhbmdlOyBpbiB0aGF0IGNhc2UsIHJlLXNldHRpbmdcbiAqIHRoZSB2YWx1ZSBzaG91bGQgYmUgYSBuby1vcCBhbmQgc2FmZSB0byBkby5cbiAqXG4gKiBAcGFyYW0ge0VuY29kaW5nVHlwZVtdfSBuZXdFbmNvZGluZ3NcbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5jaGFuZ2VFbmNvZGluZ3MgPSBmdW5jdGlvbiAobmV3RW5jb2RpbmdzKSB7XG4gIHRoaXMuZW5hYmxlZEVuY29kaW5nc18gPSBuZXdFbmNvZGluZ3M7XG4gIGlmICh0aGlzLnRhYnNfKSB7XG4gICAgdGhpcy50YWJzXy5zZXRFbmNvZGluZ3MobmV3RW5jb2RpbmdzKTtcbiAgfVxuICB0aGlzLnJlY2VpdmVkTWVzc2FnZUxvZ18uc2V0RW5jb2RpbmdzKG5ld0VuY29kaW5ncyk7XG4gIHRoaXMuc2VudE1lc3NhZ2VMb2dfLnNldEVuY29kaW5ncyhuZXdFbmNvZGluZ3MpO1xuICB0aGlzLnNlbmRQYW5lbF8uc2V0RW5jb2RpbmdzKG5ld0VuY29kaW5ncyk7XG4gIHRoaXMudmlzdWFsaXphdGlvbl8uc2V0RW5jb2RpbmdzKG5ld0VuY29kaW5ncyk7XG4gIHRoaXMudXBkYXRlTGF5b3V0KCk7XG59O1xuXG4vKipcbiAqIEdldCB0aGUgY3VycmVudGx5IGVuYWJsZWQgZW5jb2RpbmcgdHlwZXMuXG4gKiBAcmV0dXJucyB7RW5jb2RpbmdUeXBlW119XG4gKi9cbk5ldFNpbS5wcm90b3R5cGUuZ2V0RW5jb2RpbmdzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5lbmFibGVkRW5jb2RpbmdzXztcbn07XG5cbi8qKlxuICogVXBkYXRlIGNodW5rLXNpemUvYnl0ZXNpemUgc2V0dGluZyBhY3Jvc3MgdGhlIHdob2xlIGFwcC5cbiAqXG4gKiBQcm9wYWdhdGVzIHRoZSBjaGFuZ2UgZG93biBpbnRvIHJlbGV2YW50IGNoaWxkIGNvbXBvbmVudHMsIHBvc3NpYmx5XG4gKiBpbmNsdWRpbmcgdGhlIGNvbnRyb2wgdGhhdCBpbml0aWF0ZWQgdGhlIGNoYW5nZTsgaW4gdGhhdCBjYXNlLCByZS1zZXR0aW5nXG4gKiB0aGUgdmFsdWUgc2hvdWxkIGJlIGEgbm8tb3AgYW5kIHNhZmUgdG8gZG8uXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IG5ld0NodW5rU2l6ZVxuICovXG5OZXRTaW0ucHJvdG90eXBlLnNldENodW5rU2l6ZSA9IGZ1bmN0aW9uIChuZXdDaHVua1NpemUpIHtcbiAgdGhpcy5jaHVua1NpemVfID0gbmV3Q2h1bmtTaXplO1xuICBpZiAodGhpcy50YWJzXykge1xuICAgIHRoaXMudGFic18uc2V0Q2h1bmtTaXplKG5ld0NodW5rU2l6ZSk7XG4gIH1cbiAgdGhpcy5yZWNlaXZlZE1lc3NhZ2VMb2dfLnNldENodW5rU2l6ZShuZXdDaHVua1NpemUpO1xuICB0aGlzLnNlbnRNZXNzYWdlTG9nXy5zZXRDaHVua1NpemUobmV3Q2h1bmtTaXplKTtcbiAgdGhpcy5zZW5kUGFuZWxfLnNldENodW5rU2l6ZShuZXdDaHVua1NpemUpO1xufTtcblxuLyoqXG4gKiBVcGRhdGUgYml0cmF0ZSBmb3IgdGhlIGxvY2FsIGRldmljZSwgd2hpY2ggYWZmZWN0cyBzZW5kLWFuaW1hdGlvbiBzcGVlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBuZXdCaXRSYXRlIGluIGJpdHMgcGVyIHNlY29uZFxuICovXG5OZXRTaW0ucHJvdG90eXBlLnNldE15RGV2aWNlQml0UmF0ZSA9IGZ1bmN0aW9uIChuZXdCaXRSYXRlKSB7XG4gIHRoaXMubXlEZXZpY2VCaXRSYXRlXyA9IG5ld0JpdFJhdGU7XG4gIGlmICh0aGlzLnRhYnNfKSB7XG4gICAgdGhpcy50YWJzXy5zZXRNeURldmljZUJpdFJhdGUobmV3Qml0UmF0ZSk7XG4gIH1cbiAgdGhpcy5zZW5kUGFuZWxfLnNldEJpdFJhdGUobmV3Qml0UmF0ZSk7XG59O1xuXG4vKiogQHBhcmFtIHtudW1iZXJ9IGNyZWF0aW9uVGltZXN0YW1wTXMgKi9cbk5ldFNpbS5wcm90b3R5cGUuc2V0Um91dGVyQ3JlYXRpb25UaW1lID0gZnVuY3Rpb24gKGNyZWF0aW9uVGltZXN0YW1wTXMpIHtcbiAgaWYgKHRoaXMudGFic18pIHtcbiAgICB0aGlzLnRhYnNfLnNldFJvdXRlckNyZWF0aW9uVGltZShjcmVhdGlvblRpbWVzdGFtcE1zKTtcbiAgfVxufTtcblxuLyoqXG4gKiBVcGRhdGUgcm91dGVyIGJhbmR3aWR0aCBhY3Jvc3MgdGhlIGFwcC5cbiAqXG4gKiBQcm9wYWdhdGVzIHRoZSBjaGFuZ2UgZG93biBpbnRvIHJlbGV2YW50IGNoaWxkIGNvbXBvbmVudHMsIHBvc3NpYmx5IGluY2x1ZGluZ1xuICogdGhlIGNvbnRyb2wgdGhhdCBpbml0aWF0ZWQgdGhlIGNoYW5nZTsgaW4gdGhhdCBjYXNlLCByZS1zZXR0aW5nIHRoZSB2YWx1ZVxuICogc2hvdWxkIGJlIGEgbm8tb3AgYW5kIHNhZmUgdG8gZG8uXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IG5ld0JhbmR3aWR0aCBpbiBiaXRzL3NlY29uZFxuICovXG5OZXRTaW0ucHJvdG90eXBlLnNldFJvdXRlckJhbmR3aWR0aCA9IGZ1bmN0aW9uIChuZXdCYW5kd2lkdGgpIHtcbiAgaWYgKHRoaXMudGFic18pIHtcbiAgICB0aGlzLnRhYnNfLnNldFJvdXRlckJhbmR3aWR0aChuZXdCYW5kd2lkdGgpO1xuICB9XG59O1xuXG4vKipcbiAqIFNldHMgcm91dGVyIGJhbmR3aWR0aCBhY3Jvc3MgdGhlIHNpbXVsYXRpb24sIHByb2FnYXRpbmcgdGhlIGNoYW5nZSB0byBvdGhlclxuICogY2xpZW50cy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBuZXdCYW5kd2lkdGggaW4gYml0cy9zZWNvbmRcbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5jaGFuZ2VSZW1vdGVSb3V0ZXJCYW5kd2lkdGggPSBmdW5jdGlvbiAobmV3QmFuZHdpZHRoKSB7XG4gIHRoaXMuc2V0Um91dGVyQmFuZHdpZHRoKG5ld0JhbmR3aWR0aCk7XG4gIGlmICh0aGlzLmlzQ29ubmVjdGVkVG9Sb3V0ZXIoKSkge1xuICAgIHRoaXMuZ2V0Q29ubmVjdGVkUm91dGVyKCkuc2V0QmFuZHdpZHRoKG5ld0JhbmR3aWR0aCk7XG4gIH1cbn07XG5cbi8qKlxuICogVXBkYXRlIHJvdXRlciBtZW1vcnkgYWNyb3NzIHRoZSBhcHAuXG4gKlxuICogUHJvcGFnYXRlcyB0aGUgY2hhbmdlIGRvd24gaW50byByZWxldmFudCBjaGlsZCBjb21wb25lbnRzLCBwb3NzaWJseSBpbmNsdWRpbmdcbiAqIHRoZSBjb250cm9sIHRoYXQgaW5pdGlhdGVkIHRoZSBjaGFuZ2U7IGluIHRoYXQgY2FzZSwgcmUtc2V0dGluZyB0aGUgdmFsdWVcbiAqIHNob3VsZCBiZSBhIG5vLW9wIGFuZCBzYWZlIHRvIGRvLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBuZXdNZW1vcnkgaW4gYml0c1xuICovXG5OZXRTaW0ucHJvdG90eXBlLnNldFJvdXRlck1lbW9yeSA9IGZ1bmN0aW9uIChuZXdNZW1vcnkpIHtcbiAgaWYgKHRoaXMudGFic18pIHtcbiAgICB0aGlzLnRhYnNfLnNldFJvdXRlck1lbW9yeShuZXdNZW1vcnkpO1xuICB9XG59O1xuXG4vKipcbiAqIFNldHMgcm91dGVyIG1lbW9yeSBjYXBhY2l0eSBhY3Jvc3MgdGhlIHNpbXVsYXRpb24sIHByb3BhZ2F0aW5nIHRoZSBjaGFuZ2VcbiAqIHRvIG90aGVyIGNsaWVudHMuXG4gKiBAcGFyYW0ge251bWJlcn0gbmV3TWVtb3J5IGluIGJpdHNcbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5jaGFuZ2VSZW1vdGVSb3V0ZXJNZW1vcnkgPSBmdW5jdGlvbiAobmV3TWVtb3J5KSB7XG4gIHRoaXMuc2V0Um91dGVyTWVtb3J5KG5ld01lbW9yeSk7XG4gIGlmICh0aGlzLmlzQ29ubmVjdGVkVG9Sb3V0ZXIoKSkge1xuICAgIHRoaXMuZ2V0Q29ubmVjdGVkUm91dGVyKCkuc2V0TWVtb3J5KG5ld01lbW9yeSk7XG4gIH1cbn07XG5cbi8qKlxuICogVXBkYXRlIEROUyBtb2RlIGFjcm9zcyB0aGUgd2hvbGUgYXBwLlxuICpcbiAqIFByb3BhZ2F0ZXMgdGhlIGNoYW5nZSBkb3duIGludG8gcmVsZXZhbnQgY2hpbGQgY29tcG9uZW50cywgcG9zc2libHlcbiAqIGluY2x1ZGluZyB0aGUgY29udHJvbCB0aGF0IGluaXRpYXRlZCB0aGUgY2hhbmdlOyBpbiB0aGF0IGNhc2UsIHJlLXNldHRpbmdcbiAqIHRoZSB2YWx1ZSBzaG91bGQgYmUgYSBuby1vcCBhbmQgc2FmZSB0byBkby5cbiAqXG4gKiBAcGFyYW0ge0Ruc01vZGV9IG5ld0Ruc01vZGVcbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5zZXREbnNNb2RlID0gZnVuY3Rpb24gKG5ld0Ruc01vZGUpIHtcbiAgdGhpcy5kbnNNb2RlXyA9IG5ld0Ruc01vZGU7XG4gIGlmICh0aGlzLnRhYnNfKSB7XG4gICAgdGhpcy50YWJzXy5zZXREbnNNb2RlKG5ld0Ruc01vZGUpO1xuICB9XG4gIHRoaXMudmlzdWFsaXphdGlvbl8uc2V0RG5zTW9kZShuZXdEbnNNb2RlKTtcbn07XG5cbi8qKlxuICogR2V0IGN1cnJlbnQgRE5TIG1vZGUuXG4gKiBAcmV0dXJucyB7RG5zTW9kZX1cbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5nZXREbnNNb2RlID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5kbnNNb2RlXztcbn07XG5cbi8qKlxuICogU2V0cyBETlMgbW9kZSBhY3Jvc3MgdGhlIHdob2xlIHNpbXVsYXRpb24sIHByb3BhZ2F0aW5nIHRoZSBjaGFuZ2VcbiAqIHRvIG90aGVyIGNsaWVudHMuXG4gKiBAcGFyYW0ge0Ruc01vZGV9IG5ld0Ruc01vZGVcbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5jaGFuZ2VSZW1vdGVEbnNNb2RlID0gZnVuY3Rpb24gKG5ld0Ruc01vZGUpIHtcbiAgdGhpcy5zZXREbnNNb2RlKG5ld0Ruc01vZGUpO1xuICBpZiAodGhpcy5pc0Nvbm5lY3RlZFRvUm91dGVyKCkpIHtcbiAgICB0aGlzLmdldENvbm5lY3RlZFJvdXRlcigpLnNldERuc01vZGUobmV3RG5zTW9kZSk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtib29sZWFufSBpc0Ruc05vZGVcbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5zZXRJc0Ruc05vZGUgPSBmdW5jdGlvbiAoaXNEbnNOb2RlKSB7XG4gIGlmICh0aGlzLnRhYnNfKSB7XG4gICAgdGhpcy50YWJzXy5zZXRJc0Ruc05vZGUoaXNEbnNOb2RlKTtcbiAgfVxuXG4gIGlmICh0aGlzLmlzQ29ubmVjdGVkVG9Sb3V0ZXIoKSkge1xuICAgIHRoaXMuc2V0RG5zVGFibGVDb250ZW50cyh0aGlzLmdldENvbm5lY3RlZFJvdXRlcigpLmdldEFkZHJlc3NUYWJsZSgpKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gZG5zTm9kZUlEXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUuc2V0RG5zTm9kZUlEID0gZnVuY3Rpb24gKGRuc05vZGVJRCkge1xuICB0aGlzLnZpc3VhbGl6YXRpb25fLnNldERuc05vZGVJRChkbnNOb2RlSUQpO1xufTtcblxuLyoqXG4gKiBUZWxscyBzaW11bGF0aW9uIHRoYXQgd2Ugd2FudCB0byBiZWNvbWUgdGhlIEROUyBub2RlIGZvciBvdXJcbiAqIGNvbm5lY3RlZCByb3V0ZXIuXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUuYmVjb21lRG5zTm9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXRJc0Ruc05vZGUodHJ1ZSk7XG4gIGlmICh0aGlzLm15Tm9kZSAmJiB0aGlzLm15Tm9kZS5nZXRNeVJvdXRlcigpKSB7XG4gICAgLy8gU1RBVEUgSVMgVEhFIFJPT1QgT0YgQUxMIEVWSUxcbiAgICB2YXIgbXlOb2RlID0gdGhpcy5teU5vZGU7XG4gICAgdmFyIHJvdXRlciA9IG15Tm9kZS5nZXRNeVJvdXRlcigpO1xuICAgIHJvdXRlci5kbnNOb2RlSUQgPSBteU5vZGUuZW50aXR5SUQ7XG4gICAgcm91dGVyLnVwZGF0ZSgpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXl9IHRhYmxlQ29udGVudHNcbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5zZXREbnNUYWJsZUNvbnRlbnRzID0gZnVuY3Rpb24gKHRhYmxlQ29udGVudHMpIHtcbiAgaWYgKHRoaXMudGFic18pIHtcbiAgICB0aGlzLnRhYnNfLnNldERuc1RhYmxlQ29udGVudHModGFibGVDb250ZW50cyk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtBcnJheX0gbG9nRGF0YVxuICovXG5OZXRTaW0ucHJvdG90eXBlLnNldFJvdXRlckxvZ0RhdGEgPSBmdW5jdGlvbiAobG9nRGF0YSkge1xuICBpZiAodGhpcy50YWJzXykge1xuICAgIHRoaXMudGFic18uc2V0Um91dGVyTG9nRGF0YShsb2dEYXRhKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gcXVldWVkUGFja2V0Q291bnRcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUuc2V0Um91dGVyUXVldWVkUGFja2V0Q291bnRfID0gZnVuY3Rpb24gKHF1ZXVlZFBhY2tldENvdW50KSB7XG4gIGlmICh0aGlzLnRhYnNfKSB7XG4gICAgdGhpcy50YWJzXy5zZXRSb3V0ZXJRdWV1ZWRQYWNrZXRDb3VudChxdWV1ZWRQYWNrZXRDb3VudCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHVzZWRNZW1vcnlJbkJpdHNcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUuc2V0Um91dGVyTWVtb3J5SW5Vc2VfID0gZnVuY3Rpb24gKHVzZWRNZW1vcnlJbkJpdHMpIHtcbiAgaWYgKHRoaXMudGFic18pIHtcbiAgICB0aGlzLnRhYnNfLnNldFJvdXRlck1lbW9yeUluVXNlKHVzZWRNZW1vcnlJbkJpdHMpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBkYXRhUmF0ZUJpdHNQZXJTZWNvbmRcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUuc2V0Um91dGVyRGF0YVJhdGVfID0gZnVuY3Rpb24gKGRhdGFSYXRlQml0c1BlclNlY29uZCkge1xuICBpZiAodGhpcy50YWJzXykge1xuICAgIHRoaXMudGFic18uc2V0Um91dGVyRGF0YVJhdGUoZGF0YVJhdGVCaXRzUGVyU2Vjb25kKTtcbiAgfVxufTtcblxuLyoqXG4gKiBMb2FkIGF1ZGlvIGFzc2V0cyBmb3IgdGhpcyBhcHBcbiAqIFRPRE8gKGJidWNoYW5hbik6IE91Z2h0IHRvIHB1bGwgdGhpcyBpbnRvIGFuIGF1ZGlvIG1hbmFnZW1lbnQgbW9kdWxlXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW0ucHJvdG90eXBlLmxvYWRBdWRpb18gPSBmdW5jdGlvbiAoKSB7XG59O1xuXG4vKipcbiAqIFJlcGxhY2VzIFN0dWRpb0FwcC5jb25maWd1cmVEb20uXG4gKiBTaG91bGQgYmUgYm91bmQgYWdhaW5zdCBTdHVkaW9BcHAgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFNob3VsZCBhdCBsZWFzdCBjb250YWluXG4gKiAgIGNvbnRhaW5lcklkOiBJRCBvZiBhIHBhcmVudCBET00gZWxlbWVudCBmb3IgYXBwIGNvbnRlbnRcbiAqICAgaHRtbDogQ29udGVudCB0byBwdXQgaW5zaWRlICNjb250YWluZXJJZFxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltLmNvbmZpZ3VyZURvbU92ZXJyaWRlXyA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvbmZpZy5jb250YWluZXJJZCk7XG4gIGNvbnRhaW5lci5pbm5lckhUTUwgPSBjb25maWcuaHRtbDtcblxuICB2YXIgdml6SGVpZ2h0ID0gdGhpcy5NSU5fV09SS1NQQUNFX0hFSUdIVDtcbiAgdmFyIHZpc3VhbGl6YXRpb25Db2x1bW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmV0c2ltLWxlZnRjb2wnKTtcblxuICBpZiAoY29uZmlnLnBpbldvcmtzcGFjZVRvQm90dG9tKSB7XG4gICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG4gICAgY29udGFpbmVyLmNsYXNzTmFtZSA9IGNvbnRhaW5lci5jbGFzc05hbWUgKyBcIiBwaW5fYm90dG9tXCI7XG4gICAgdmlzdWFsaXphdGlvbkNvbHVtbi5jbGFzc05hbWUgPSB2aXN1YWxpemF0aW9uQ29sdW1uLmNsYXNzTmFtZSArIFwiIHBpbl9ib3R0b21cIjtcbiAgfSBlbHNlIHtcbiAgICB2aXN1YWxpemF0aW9uQ29sdW1uLnN0eWxlLm1pbkhlaWdodCA9IHZpekhlaWdodCArICdweCc7XG4gICAgY29udGFpbmVyLnN0eWxlLm1pbkhlaWdodCA9IHZpekhlaWdodCArICdweCc7XG4gIH1cbn07XG5cbi8qKlxuICogUmVzaXplIHRoZSBsZWZ0IGNvbHVtbiBzbyBpdCBwaW5zIGFib3ZlIHRoZSBmb290ZXIuXG4gKi9cbmZ1bmN0aW9uIHJlc2l6ZUxlZnRDb2x1bW5Ub1NpdEFib3ZlRm9vdGVyKCkge1xuICB2YXIgcGlubmVkTGVmdENvbHVtbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNuZXRzaW0tbGVmdGNvbC5waW5fYm90dG9tJyk7XG4gIGlmICghcGlubmVkTGVmdENvbHVtbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzbWFsbEZvb3RlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwYWdlLXNtYWxsLWZvb3RlciAuc21hbGwtZm9vdGVyLWJhc2UnKTtcblxuICB2YXIgYm90dG9tID0gMDtcbiAgaWYgKHNtYWxsRm9vdGVyKSB7XG4gICAgdmFyIGNvZGVBcHAgPSAkKCcjY29kZUFwcCcpO1xuICAgIGJvdHRvbSArPSAkKHNtYWxsRm9vdGVyKS5vdXRlckhlaWdodCh0cnVlKTtcbiAgICAvLyBGb290ZXIgaXMgcmVsYXRpdmUgdG8gdGhlIGRvY3VtZW50LCBub3QgY29kZUFwcCwgc28gd2UgbmVlZCB0b1xuICAgIC8vIHJlbW92ZSB0aGUgY29kZUFwcCBib3R0b20gb2Zmc2V0IHRvIGdldCB0aGUgY29ycmVjdCBtYXJnaW4uXG4gICAgYm90dG9tIC09IHBhcnNlSW50KGNvZGVBcHAuY3NzKCdib3R0b20nKSwgMTApO1xuICB9XG5cbiAgcGlubmVkTGVmdENvbHVtbi5zdHlsZS5ib3R0b20gPSBib3R0b20gKyAncHgnO1xufVxuXG5mdW5jdGlvbiByZXNpemVGb290ZXJUb0ZpdFRvTGVmdE9mQ29udGVudCgpIHtcbiAgdmFyIGxlZnRDb2x1bW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbmV0c2ltLWxlZnRjb2wucGluX2JvdHRvbScpO1xuICB2YXIgaW5zdHJ1Y3Rpb25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmluc3RydWN0aW9ucycpO1xuICB2YXIgc21hbGxGb290ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcGFnZS1zbWFsbC1mb290ZXIgLnNtYWxsLWZvb3Rlci1iYXNlJyk7XG5cbiAgaWYgKCFzbWFsbEZvb3Rlcikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBwYWRkaW5nID0gcGFyc2VJbnQod2luZG93LmdldENvbXB1dGVkU3R5bGUoc21hbGxGb290ZXIpW1wicGFkZGluZy1sZWZ0XCJdKTtcblxuICB2YXIgYm91bmRpbmdXaWR0aDtcbiAgaWYgKGxlZnRDb2x1bW4gJiYgJChsZWZ0Q29sdW1uKS5pcygnOnZpc2libGUnKSkge1xuICAgIGJvdW5kaW5nV2lkdGggPSBsZWZ0Q29sdW1uLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnJpZ2h0O1xuICB9IGVsc2UgaWYgKGluc3RydWN0aW9ucyAmJiAkKGluc3RydWN0aW9ucykuaXMoJzp2aXNpYmxlJykpIHtcbiAgICBib3VuZGluZ1dpZHRoID0gaW5zdHJ1Y3Rpb25zLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnJpZ2h0O1xuICB9XG5cbiAgc21hbGxGb290ZXIuc3R5bGUubWF4V2lkdGggPSAoYm91bmRpbmdXaWR0aCkgPyAoYm91bmRpbmdXaWR0aCAtIHBhZGRpbmcpICsgJ3B4JyA6IG51bGw7XG59XG5cbnZhciBuZXRzaW1EZWJvdW5jZWRSZXNpemVGb290ZXIgPSBfLmRlYm91bmNlKGZ1bmN0aW9uICgpIHtcbiAgcmVzaXplRm9vdGVyVG9GaXRUb0xlZnRPZkNvbnRlbnQoKTtcbiAgcmVzaXplTGVmdENvbHVtblRvU2l0QWJvdmVGb290ZXIoKTtcbn0sIDEwKTtcblxuLyoqXG4gKiBSZXBsYWNlcyBTdHVkaW9BcHAub25SZXNpemVcbiAqIFNob3VsZCBiZSBib3VuZCBhZ2FpbnN0IFN0dWRpb0FwcCBpbnN0YW5jZS5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbS5vblJlc2l6ZU92ZXJyaWRlXyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcGNvbnRhaW5lcicpO1xuICB2YXIgZGl2UGFyZW50ID0gZGl2LnBhcmVudE5vZGU7XG4gIHZhciBwYXJlbnRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRpdlBhcmVudCk7XG4gIHZhciBwYXJlbnRXaWR0aCA9IHBhcnNlSW50KHBhcmVudFN0eWxlLndpZHRoLCAxMCk7XG4gIGRpdi5zdHlsZS50b3AgPSBkaXZQYXJlbnQub2Zmc2V0VG9wICsgJ3B4JztcbiAgZGl2LnN0eWxlLndpZHRoID0gcGFyZW50V2lkdGggKyAncHgnO1xuXG4gIG5ldHNpbURlYm91bmNlZFJlc2l6ZUZvb3RlcigpO1xufTtcblxuLyoqXG4gKiBQYXNzdGhyb3VnaCB0byBsb2NhbCBcInN0YXRpY1wiIG5ldHNpbURlYm91bmNlUmVzaXplRm9vdGVyIG1ldGhvZFxuICovXG5OZXRTaW0ucHJvdG90eXBlLmRlYm91bmNlZFJlc2l6ZUZvb3RlciA9IGZ1bmN0aW9uICgpIHtcbiAgbmV0c2ltRGVib3VuY2VkUmVzaXplRm9vdGVyKCk7XG59O1xuXG4vKipcbiAqIFJlLXJlbmRlciBwYXJ0cyBvZiB0aGUgcGFnZSB0aGF0IGNhbiBiZSByZS1yZW5kZXJlZCBpbiBwbGFjZS5cbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmlzQ29ubmVjdGVkVG9SZW1vdGUoKSkge1xuICAgIHZhciBteUFkZHJlc3MgPSB0aGlzLm15Tm9kZS5nZXRBZGRyZXNzKCk7XG5cbiAgICAvLyBTd2FwIGluICdjb25uZWN0ZWQnIGRpdlxuICAgIHRoaXMubWFpbkNvbnRhaW5lcl8uZmluZCgnI25ldHNpbS1kaXNjb25uZWN0ZWQnKS5oaWRlKCk7XG4gICAgdGhpcy5tYWluQ29udGFpbmVyXy5maW5kKCcjbmV0c2ltLWNvbm5lY3RlZCcpLnNob3coKTtcblxuICAgIC8vIFJlbmRlciByaWdodCBjb2x1bW5cbiAgICB0aGlzLnNlbmRQYW5lbF8uc2V0RnJvbUFkZHJlc3MobXlBZGRyZXNzKTtcblxuICAgIC8vIFJlbmRlciBsZWZ0IGNvbHVtblxuICAgIGlmICh0aGlzLnN0YXR1c1BhbmVsXykge1xuICAgICAgdGhpcy5zdGF0dXNQYW5lbF8ucmVuZGVyKHtcbiAgICAgICAgbXlIb3N0bmFtZTogdGhpcy5teU5vZGUuZ2V0SG9zdG5hbWUoKSxcbiAgICAgICAgbXlBZGRyZXNzOiBteUFkZHJlc3MsXG4gICAgICAgIHJlbW90ZU5vZGVOYW1lOiB0aGlzLmdldENvbm5lY3RlZFJlbW90ZU5vZGUoKS5nZXREaXNwbGF5TmFtZSgpLFxuICAgICAgICBzaGFyZUxpbms6IHRoaXMubG9iYnlfLmdldFNoYXJlTGluaygpXG4gICAgICB9KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gU3dhcCBpbiAnZGlzY29ubmVjdGVkJyBkaXZcbiAgICB0aGlzLm1haW5Db250YWluZXJfLmZpbmQoJyNuZXRzaW0tZGlzY29ubmVjdGVkJykuc2hvdygpO1xuICAgIHRoaXMubWFpbkNvbnRhaW5lcl8uZmluZCgnI25ldHNpbS1jb25uZWN0ZWQnKS5oaWRlKCk7XG5cbiAgICAvLyBSZW5kZXIgbG9iYnlcbiAgICB0aGlzLmxvYmJ5Xy5yZW5kZXIoKTtcbiAgfVxuXG4gIGlmICh0aGlzLnJvdXRlckxvZ01vZGFsXykge1xuICAgIHRoaXMucm91dGVyTG9nTW9kYWxfLnJlbmRlcigpO1xuICB9XG5cbiAgdGhpcy51cGRhdGVMYXlvdXQoKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdoZW5ldmVyIHRoZSBjb25uZWN0aW9uIG5vdGlmaWVzIHVzIHRoYXQgd2UndmUgY29ubmVjdGVkIHRvLFxuICogb3IgZGlzY29ubmVjdGVkIGZyb20sIGEgc2hhcmQuXG4gKiBAcGFyYW0ge05ldFNpbVNoYXJkfSBzaGFyZCAtIG51bGwgaWYgZGlzY29ubmVjdGVkLlxuICogQHBhcmFtIHtOZXRTaW1Mb2NhbENsaWVudE5vZGV9IGxvY2FsTm9kZSAtIG51bGwgaWYgZGlzY29ubmVjdGVkXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW0ucHJvdG90eXBlLm9uU2hhcmRDaGFuZ2VfPSBmdW5jdGlvbiAoc2hhcmQsIGxvY2FsTm9kZSkge1xuICAvLyBVbnJlZ2lzdGVyIG9sZCBoYW5kbGVyc1xuICBpZiAodGhpcy5ldmVudEtleXMucmVnaXN0ZXJlZFdpdGhMb2NhbE5vZGUpIHtcbiAgICB0aGlzLmV2ZW50S2V5cy5yZWdpc3RlcmVkV2l0aExvY2FsTm9kZS5yZW1vdGVDaGFuZ2UudW5yZWdpc3RlcihcbiAgICAgICAgdGhpcy5ldmVudEtleXMucmVtb3RlQ2hhbmdlKTtcbiAgICB0aGlzLmV2ZW50S2V5cy5yZWdpc3RlcmVkV2l0aExvY2FsTm9kZSA9IG51bGw7XG4gIH1cblxuICAvLyBSZWdpc3RlciBuZXcgaGFuZGxlcnNcbiAgaWYgKGxvY2FsTm9kZSkge1xuICAgIHRoaXMuZXZlbnRLZXlzLnJlbW90ZUNoYW5nZSA9IGxvY2FsTm9kZS5yZW1vdGVDaGFuZ2UucmVnaXN0ZXIoXG4gICAgICAgIHRoaXMub25SZW1vdGVDaGFuZ2VfLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZXZlbnRLZXlzLnJlZ2lzdGVyZWRXaXRoTG9jYWxOb2RlID0gbG9jYWxOb2RlO1xuICB9XG5cbiAgLy8gVXBkYXRlIHRoZSBsb2cgdmlld2VyJ3Mgc2hhcmQgcmVmZXJlbmNlIHNvIGl0IGNhbiBnZXQgY3VycmVudCBkYXRhLlxuICBpZiAodGhpcy5yb3V0ZXJMb2dNb2RhbF8pIHtcbiAgICB0aGlzLnJvdXRlckxvZ01vZGFsXy5zZXRTaGFyZChzaGFyZCk7XG4gIH1cblxuICAvLyBTaGFyZCBjaGFuZ2VzIGFsbW9zdCBBTFdBWVMgcmVxdWlyZSBhIHJlLXJlbmRlclxuICB0aGlzLnZpc3VhbGl6YXRpb25fLnNldFNoYXJkKHNoYXJkKTtcbiAgdGhpcy52aXN1YWxpemF0aW9uXy5zZXRMb2NhbE5vZGUobG9jYWxOb2RlKTtcbiAgdGhpcy5yZW5kZXIoKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdoZW5ldmVyIHRoZSBsb2NhbCBub2RlIG5vdGlmaWVzIHRoYXQgd2UndmUgYmVlbiBjb25uZWN0ZWQgdG8sXG4gKiBvciBkaXNjb25uZWN0ZWQgZnJvbSwgYSByb3V0ZXIuXG4gKiBAcGFyYW0ge05ldFNpbVdpcmV9IHdpcmUgLSBudWxsIGlmIGRpc2Nvbm5lY3RlZC5cbiAqIEBwYXJhbSB7TmV0U2ltTm9kZX0gcmVtb3RlTm9kZSAtIG51bGwgaWYgZGlzY29ubmVjdGVkXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW0ucHJvdG90eXBlLm9uUmVtb3RlQ2hhbmdlXyA9IGZ1bmN0aW9uICh3aXJlLCByZW1vdGVOb2RlKSB7XG4gIHZhciByb3V0ZXJDb25uZWN0RXZlbnQgPSByZW1vdGVOb2RlICYmIHJlbW90ZU5vZGUgaW5zdGFuY2VvZiBOZXRTaW1Sb3V0ZXJOb2RlO1xuICB2YXIgcm91dGVyRGlzY29ubmVjdEV2ZW50ID0gIXJlbW90ZU5vZGUgJiYgdGhpcy5ldmVudEtleXMucmVnaXN0ZXJlZFdpdGhSb3V0ZXI7XG5cbiAgLy8gVW5ob29rIG9sZCBoYW5kbGVyc1xuICBpZiAodGhpcy5ldmVudEtleXMucmVnaXN0ZXJlZFdpdGhSb3V0ZXIpIHtcbiAgICB0aGlzLmV2ZW50S2V5cy5yZWdpc3RlcmVkV2l0aFJvdXRlci5zdGF0ZUNoYW5nZS51bnJlZ2lzdGVyKFxuICAgICAgICB0aGlzLmV2ZW50S2V5cy5yb3V0ZXJTdGF0ZUNoYW5nZSk7XG4gICAgdGhpcy5ldmVudEtleXMucmVnaXN0ZXJlZFdpdGhSb3V0ZXIuc3RhdHNDaGFuZ2UudW5yZWdpc3RlcihcbiAgICAgICAgdGhpcy5ldmVudEtleXMucm91dGVyU3RhdHNDaGFuZ2UpO1xuICAgIHRoaXMuZXZlbnRLZXlzLnJlZ2lzdGVyZWRXaXRoUm91dGVyLndpcmVzQ2hhbmdlLnVucmVnaXN0ZXIoXG4gICAgICAgIHRoaXMuZXZlbnRLZXlzLnJvdXRlcldpcmVzQ2hhbmdlKTtcbiAgICB0aGlzLmV2ZW50S2V5cy5yZWdpc3RlcmVkV2l0aFJvdXRlci5sb2dDaGFuZ2UudW5yZWdpc3RlcihcbiAgICAgICAgdGhpcy5ldmVudEtleXMucm91dGVyTG9nQ2hhbmdlKTtcbiAgICB0aGlzLmV2ZW50S2V5cy5yZWdpc3RlcmVkV2l0aFJvdXRlciA9IG51bGw7XG4gIH1cblxuICAvLyBIb29rIHVwIG5ldyBoYW5kbGVyc1xuICBpZiAocm91dGVyQ29ubmVjdEV2ZW50KSB7XG4gICAgdGhpcy5ldmVudEtleXMucm91dGVyU3RhdGVDaGFuZ2UgPSByZW1vdGVOb2RlLnN0YXRlQ2hhbmdlLnJlZ2lzdGVyKFxuICAgICAgICB0aGlzLm9uUm91dGVyU3RhdGVDaGFuZ2VfLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZXZlbnRLZXlzLnJvdXRlclN0YXRzQ2hhbmdlID0gcmVtb3RlTm9kZS5zdGF0c0NoYW5nZS5yZWdpc3RlcihcbiAgICAgICAgdGhpcy5vblJvdXRlclN0YXRzQ2hhbmdlXy5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmV2ZW50S2V5cy5yb3V0ZXJXaXJlc0NoYW5nZSA9IHJlbW90ZU5vZGUud2lyZXNDaGFuZ2UucmVnaXN0ZXIoXG4gICAgICAgIHRoaXMub25Sb3V0ZXJXaXJlc0NoYW5nZV8uYmluZCh0aGlzKSk7XG4gICAgdGhpcy5ldmVudEtleXMucm91dGVyTG9nQ2hhbmdlID0gcmVtb3RlTm9kZS5sb2dDaGFuZ2UucmVnaXN0ZXIoXG4gICAgICAgIHRoaXMub25Sb3V0ZXJMb2dDaGFuZ2VfLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZXZlbnRLZXlzLnJlZ2lzdGVyZWRXaXRoUm91dGVyID0gcmVtb3RlTm9kZTtcbiAgfVxuXG4gIHRoaXMucmVuZGVyKCk7XG5cbiAgaWYgKHJvdXRlckNvbm5lY3RFdmVudCkge1xuICAgIHRoaXMub25Sb3V0ZXJDb25uZWN0XyhyZW1vdGVOb2RlKTtcbiAgfSBlbHNlIGlmIChyb3V0ZXJEaXNjb25uZWN0RXZlbnQpIHtcbiAgICB0aGlzLm9uUm91dGVyRGlzY29ubmVjdF8oKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTdGVwcyB0byB0YWtlIHdoZW4gd2Ugd2VyZSBub3QgY29ubmVjdGVkIHRvIGEgcm91dGVyIGFuZCBub3cgd2UgYXJlLlxuICogQHBhcmFtIHtOZXRTaW1Sb3V0ZXJOb2RlfSByb3V0ZXIgdGhhdCB3ZSBhcmUgbm93IGNvbm5lY3RlZCB0b1xuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5vblJvdXRlckNvbm5lY3RfID0gZnVuY3Rpb24gKHJvdXRlcikge1xuICB0aGlzLm9uUm91dGVyU3RhdGVDaGFuZ2VfKHJvdXRlcik7XG4gIHRoaXMub25Sb3V0ZXJTdGF0c0NoYW5nZV8ocm91dGVyKTtcbiAgdGhpcy5zZXRSb3V0ZXJMb2dEYXRhKHJvdXRlci5nZXRMb2coKSk7XG4gIHRoaXMucm91dGVyTG9nTW9kYWxfLnNldFJvdXRlcihyb3V0ZXIpO1xufTtcblxuLyoqXG4gKiBTdGVwcyB0byB0YWtlIHdoZW4gd2Ugd2VyZSBjb25uZWN0ZWQgdG8gYSByb3V0ZXIgYW5kIG5vdyB3ZSBhcmUgbm90LlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5vblJvdXRlckRpc2Nvbm5lY3RfID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnNldFJvdXRlckNyZWF0aW9uVGltZSgwKTtcbiAgdGhpcy5zZXRSb3V0ZXJRdWV1ZWRQYWNrZXRDb3VudF8oMCk7XG4gIHRoaXMuc2V0Um91dGVyTWVtb3J5SW5Vc2VfKDApO1xuICB0aGlzLnNldFJvdXRlckRhdGFSYXRlXygwKTtcbiAgdGhpcy5zZXRSb3V0ZXJMb2dEYXRhKFtdKTtcbiAgdGhpcy5yb3V0ZXJMb2dNb2RhbF8uc2V0Um91dGVyKG51bGwpO1xufTtcblxuLyoqXG4gKiBMb2NhbCByZXNwb25zZSB0byByb3V0ZXIgc3RhdGUgY2hhbmdpbmcsIHdoaWNoIG1heSBoYXZlIGJlZW4gdHJpZ2dlcmVkXG4gKiBsb2NhbGx5IG9yIHJlbW90ZWx5LlxuICogQHBhcmFtIHtOZXRTaW1Sb3V0ZXJOb2RlfSByb3V0ZXJcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUub25Sb3V0ZXJTdGF0ZUNoYW5nZV8gPSBmdW5jdGlvbiAocm91dGVyKSB7XG4gIHZhciBteU5vZGUgPSB7fTtcbiAgaWYgKHRoaXMubXlOb2RlKSB7XG4gICAgbXlOb2RlID0gdGhpcy5teU5vZGU7XG4gIH1cblxuICB0aGlzLnNldFJvdXRlckNyZWF0aW9uVGltZShyb3V0ZXIuY3JlYXRpb25UaW1lKTtcbiAgdGhpcy5zZXRSb3V0ZXJCYW5kd2lkdGgocm91dGVyLmJhbmR3aWR0aCk7XG4gIHRoaXMuc2V0Um91dGVyTWVtb3J5KHJvdXRlci5tZW1vcnkpO1xuICB0aGlzLnNldERuc01vZGUocm91dGVyLmRuc01vZGUpO1xuICB0aGlzLnNldERuc05vZGVJRChyb3V0ZXIuZG5zTW9kZSA9PT0gRG5zTW9kZS5OT05FID8gdW5kZWZpbmVkIDogcm91dGVyLmRuc05vZGVJRCk7XG4gIHRoaXMuc2V0SXNEbnNOb2RlKHJvdXRlci5kbnNNb2RlID09PSBEbnNNb2RlLk1BTlVBTCAmJlxuICAgICAgcm91dGVyLmRuc05vZGVJRCA9PT0gbXlOb2RlLmVudGl0eUlEKTtcbn07XG5cbi8qKlxuICogSXNvbGF0ZXMgdXBkYXRlcyB0aGF0IHdlIHNob3VsZCBkbyB3aGVuIGEgcm91dGVyJ3Mgc3RhdHMgY2hhbmdlLCBzaW5jZVxuICogdGhlc2UgaGFwcGVuIGEgbG90IG1vcmUgb2Z0ZW4uXG4gKiBAcGFyYW0ge05ldFNpbVJvdXRlck5vZGV9IHJvdXRlclxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5vblJvdXRlclN0YXRzQ2hhbmdlXyA9IGZ1bmN0aW9uIChyb3V0ZXIpIHtcbiAgdGhpcy5zZXRSb3V0ZXJRdWV1ZWRQYWNrZXRDb3VudF8ocm91dGVyLmdldFF1ZXVlZFBhY2tldENvdW50KCkpO1xuICB0aGlzLnNldFJvdXRlck1lbW9yeUluVXNlXyhyb3V0ZXIuZ2V0TWVtb3J5SW5Vc2UoKSk7XG4gIHRoaXMuc2V0Um91dGVyRGF0YVJhdGVfKHJvdXRlci5nZXRDdXJyZW50RGF0YVJhdGUoKSk7XG59O1xuXG4vKipcbiAqIFdoYXQgdG8gZG8gd2hlbiBvdXIgY29ubmVjdGVkIHJvdXRlcidzIGxvY2FsIG5ldHdvcmsgY2hhbmdlcy5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUub25Sb3V0ZXJXaXJlc0NoYW5nZV8gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmlzQ29ubmVjdGVkVG9Sb3V0ZXIoKSkge1xuICAgIHRoaXMuc2V0RG5zVGFibGVDb250ZW50cyh0aGlzLmdldENvbm5lY3RlZFJvdXRlcigpLmdldEFkZHJlc3NUYWJsZSgpKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXaGF0IHRvIGRvIHdoZW4gb3VyIGNvbm5lY3RlZCByb3V0ZXIncyBsb2dzIGNoYW5nZS5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUub25Sb3V0ZXJMb2dDaGFuZ2VfID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5pc0Nvbm5lY3RlZFRvUm91dGVyKCkpIHtcbiAgICB0aGlzLnNldFJvdXRlckxvZ0RhdGEodGhpcy5nZXRDb25uZWN0ZWRSb3V0ZXIoKS5nZXRMb2coKSk7XG4gIH1cbn07XG5cbi8qKlxuICogS2ljayBvZmYgYW4gYW5pbWF0aW9uIHRoYXQgc2hvd3MgdGhlIGxvY2FsIG5vZGUgc2V0dGluZyB0aGUgc3RhdGUgb2YgYVxuICogc2ltcGxleCB3aXJlLlxuICogQHBhcmFtIHtcIjBcInxcIjFcIn0gbmV3U3RhdGVcbiAqL1xuTmV0U2ltLnByb3RvdHlwZS5hbmltYXRlU2V0V2lyZVN0YXRlID0gZnVuY3Rpb24gKG5ld1N0YXRlKSB7XG4gIHRoaXMudmlzdWFsaXphdGlvbl8uYW5pbWF0ZVNldFdpcmVTdGF0ZShuZXdTdGF0ZSk7XG59O1xuXG4vKipcbiAqIEtpY2sgb2ZmIGFuIGFuaW1hdGlvbiB0aGF0IHNob3dzIHRoZSBsb2NhbCBub2RlIHJlYWRpbmcgdGhlIHN0YXRlIG9mIGFcbiAqIHNpbXBsZXggd2lyZS5cbiAqIEBwYXJhbSB7XCIwXCJ8XCIxXCJ9IG5ld1N0YXRlXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUuYW5pbWF0ZVJlYWRXaXJlU3RhdGUgPSBmdW5jdGlvbiAobmV3U3RhdGUpIHtcbiAgdGhpcy52aXN1YWxpemF0aW9uXy5hbmltYXRlUmVhZFdpcmVTdGF0ZShuZXdTdGF0ZSk7XG59O1xuXG4vKipcbiAqIFNwZWNpZmljYWxseSwgdXBkYXRlIHRoZSBsYXlvdXQgb2YgdGhlIHJpZ2h0IGNvbHVtbiB3aGVuIGNvbm5lY3RlZCxcbiAqIGFuZCBjaGFuZ2UgaG93IHRoZSB0aHJlZSBwYW5lbHMgdGhlcmUgKHJlY2VpdmVkIGxvZywgc2VudCBsb2csIHNlbmQgY29udHJvbHMpXG4gKiBzaGFyZSB0aGUgY3VycmVudCB2ZXJ0aWNhbCBzcGFjZSBpbiB0aGUgdmlld3BvcnQuXG4gKlxuICogV2UncmUgdHJ5aW5nIHRvIHVzZSB0aGUgZm9sbG93aW5nIHJ1bGVzOlxuICpcbiAqIDEuIFRoZSBzZW5kIGNvbnRyb2xzIHBhbmVsIGlzIGZpeGVkIHRvIHRoZSBib3R0b20gb2YgdGhlIHZpZXdwb3J0LCBhbmQgd2lsbFxuICogICAgc2l6ZSB1cHdhcmRzIHRvIGZpdCBpdHMgY29udGVudHMgdXAgdG8gYSBtYXhpbXVtIGhlaWdodC5cbiAqIDIuIFRoZSBsb2cgd2lkZ2V0cyB1c2UgdGhlIHJlbWFpbmluZyB2ZXJ0aWNhbCBzcGFjZVxuICogICAgYSkgSWYgb25seSBvbmUgbG9nIHdpZGdldCBpcyBvcGVuLCBpdCBmaWxscyB0aGUgdmVydGljYWwgc3BhY2UgKGV4Y2VwdFxuICogICAgICAgbGVhdmVzIGVub3VnaCByb29tIHRvIHNlZSB0aGUgb3RoZXIgaGVhZGVyKVxuICogICAgYikgSWYgYm90aCBsb2cgd2lkZ2V0cyBhcmUgb3BlbiwgdGhleSBzaGFyZSB0aGUgdmVydGljYWwgc3BhY2UgNTAvNTBcbiAqICAgIGMpIElmIGJvdGggbG9nIHdpZGdldHMgYXJlIGNsb3NlZCwgdGhleSBmbG9hdCBhdCB0aGUgdG9wIG9mIHRoZSBzcGFjZS5cbiAqL1xuTmV0U2ltLnByb3RvdHlwZS51cGRhdGVMYXlvdXQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciByaWdodENvbHVtbiA9ICQoJyNuZXRzaW0tcmlnaHRjb2wnKTtcbiAgdmFyIHNlbmRQYW5lbCA9ICQoJyNuZXRzaW0tc2VuZCcpO1xuICB2YXIgbG9nV3JhcCA9ICQoJyNuZXRzaW0tbG9ncycpO1xuXG4gIG5ldHNpbURlYm91bmNlZFJlc2l6ZUZvb3RlcigpO1xuXG4gIGlmICh0aGlzLmxvYmJ5Xykge1xuICAgIHRoaXMubG9iYnlfLnVwZGF0ZUxheW91dCgpO1xuICB9XG5cbiAgaWYgKCFyaWdodENvbHVtbi5pcygnOnZpc2libGUnKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFJpZ2h0IGNvbHVtbiB3cmFwcGVyIGFuZCB0aGUgc2VuZCBwYW5lbCBhcmUgYm90aCBzaXplZCBieSBDU1NcbiAgdmFyIHJpZ2h0Q29sdW1uSGVpZ2h0ID0gcmlnaHRDb2x1bW4uaGVpZ2h0KCk7XG4gIHZhciBzZW5kUGFuZWxIZWlnaHQgPSBzZW5kUGFuZWwuaGVpZ2h0KCk7XG4gIHZhciBsb2dzU2hhcmVkVmVydGljYWxTcGFjZSA9IHJpZ2h0Q29sdW1uSGVpZ2h0IC0gc2VuZFBhbmVsSGVpZ2h0O1xuXG4gIHZhciBzaG93aW5nU2VudCA9ICF0aGlzLnNlbnRNZXNzYWdlTG9nXy5pc01pbmltaXplZCgpO1xuICB2YXIgc2hvd2luZ1JlY2VpdmVkID0gIXRoaXMucmVjZWl2ZWRNZXNzYWdlTG9nXy5pc01pbmltaXplZCgpO1xuICBpZiAoc2hvd2luZ1JlY2VpdmVkICYmIHNob3dpbmdTZW50KSB7XG4gICAgdmFyIGhhbGZIZWlnaHQgPSBNYXRoLmZsb29yKGxvZ3NTaGFyZWRWZXJ0aWNhbFNwYWNlIC8gMik7XG4gICAgdGhpcy5yZWNlaXZlZE1lc3NhZ2VMb2dfLnNldEhlaWdodChoYWxmSGVpZ2h0KTtcbiAgICB0aGlzLnNlbnRNZXNzYWdlTG9nXy5zZXRIZWlnaHQoaGFsZkhlaWdodCk7XG4gIH0gZWxzZSBpZiAoc2hvd2luZ1JlY2VpdmVkKSB7XG4gICAgdGhpcy5yZWNlaXZlZE1lc3NhZ2VMb2dfLnNldEhlaWdodChNYXRoLmZsb29yKGxvZ3NTaGFyZWRWZXJ0aWNhbFNwYWNlIC1cbiAgICAgICAgdGhpcy5zZW50TWVzc2FnZUxvZ18uZ2V0SGVpZ2h0KCkpKTtcbiAgfSBlbHNlIGlmIChzaG93aW5nU2VudCkge1xuICAgIHRoaXMuc2VudE1lc3NhZ2VMb2dfLnNldEhlaWdodChNYXRoLmZsb29yKGxvZ3NTaGFyZWRWZXJ0aWNhbFNwYWNlIC1cbiAgICAgICAgdGhpcy5yZWNlaXZlZE1lc3NhZ2VMb2dfLmdldEhlaWdodCgpKSk7XG4gIH1cblxuICAvLyBNYW51YWxseSBhZGp1c3QgdGhlIGxvZ3dyYXAgdG8gdGhlIHJlbWFpbmluZyBoZWlnaHRcbiAgbG9nV3JhcC5jc3MoJ2hlaWdodCcsIHJpZ2h0Q29sdW1uSGVpZ2h0IC0gc2VuZFBhbmVsSGVpZ2h0KTtcbn07XG5cbi8qKlxuICogQXBwcm9wcmlhdGUgc3RlcHMgZm9yIHdoZW4gdGhlIHN0dWRlbnQgaGl0cyB0aGUgXCJDb250aW51ZSB0byBuZXh0IGxldmVsXCJcbiAqIGJ1dHRvbi4gIFNob3VsZCBtYXJrIHRoZSBsZXZlbCBhcyBjb21wbGV0ZSBhbmQgbmF2aWdhdGUgdG8gdGhlIG5leHQgbGV2ZWwuXG4gKi9cbk5ldFNpbS5wcm90b3R5cGUuY29tcGxldGVMZXZlbEFuZENvbnRpbnVlID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5pc0Nvbm5lY3RlZFRvUmVtb3RlKCkgJiYgIWNvbmZpcm0oaTE4bi5vbkJlZm9yZVVubG9hZFdhcm5pbmcoKSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBBdm9pZCBtdWx0aXBsZSBzaW11bHRhbmVvdXMgc3VibWlzc2lvbnMuXG4gICQoJy5zdWJtaXRCdXR0b24nKS5hdHRyKCdkaXNhYmxlZCcsIHRydWUpO1xuXG4gIHNlbmRSZXBvcnQoe1xuICAgIGZhbGxiYWNrUmVzcG9uc2U6IHRoaXMucmVwb3J0aW5nSW5mb18uZmFsbGJhY2tfcmVzcG9uc2UsXG4gICAgY2FsbGJhY2s6IHRoaXMucmVwb3J0aW5nSW5mb18uY2FsbGJhY2ssXG4gICAgYXBwOiAnbmV0c2ltJyxcbiAgICBsZXZlbDogdGhpcy5sZXZlbC5pZCxcbiAgICByZXN1bHQ6IHRydWUsXG4gICAgdGVzdFJlc3VsdDogMTAwLFxuICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uIChzZXJ2ZXJSZXNwb25zZSkge1xuXG4gICAgICAvLyBSZS1lbmFibGUgc3VibWl0IGJ1dHRvbiwgaW4gY2FzZSB0aGVyZSdzIG5vd2hlcmUgdG8gZ28uXG4gICAgICAkKCcuc3VibWl0QnV0dG9uJykuYXR0cignZGlzYWJsZWQnLCBmYWxzZSk7XG5cbiAgICAgIC8vIElmIHRoZXJlJ3Mgc29tZXdoZXJlIHRvIGdvLCBkaXNjb25uZWN0IGFuZCBnbyFcbiAgICAgIGlmIChzZXJ2ZXJSZXNwb25zZS5yZWRpcmVjdCkge1xuICAgICAgICBpZiAodGhpcy5pc0Nvbm5lY3RlZFRvUmVtb3RlKCkpIHtcbiAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3RGcm9tUmVtb3RlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gc2VydmVyUmVzcG9uc2UucmVkaXJlY3Q7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBzZXJ2ZXJSZXNwb25zZS5yZWRpcmVjdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0uYmluZCh0aGlzKVxuICB9KTtcbn07XG5cbi8qKlxuICogQXR0ZW1wdCB0byByZXNldCB0aGUgc2ltdWxhdGlvbiBzaGFyZCwga2lja2luZyBhbGwgdXNlcnMgb3V0IGFuZCByZXNldHRpbmdcbiAqIGFsbCBkYXRhLlxuICovXG5OZXRTaW0ucHJvdG90eXBlLnJlc2V0U2hhcmQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnNoYXJkXyAmJiBjb25maXJtKGkxOG4uc2hhcmRSZXNldENvbmZpcm1hdGlvbigpKSkge1xuICAgIHRoaXMuc2hhcmRfLnJlc2V0RXZlcnl0aGluZyhmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGxvZ2dlci5lcnJvcihlcnIpO1xuICAgICAgICBOZXRTaW1BbGVydC5lcnJvcihpMThuLnNoYXJkUmVzZXRFcnJvcigpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0uYmluZCh0aGlzKSk7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cz0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdCA9IGZ1bmN0aW9uIGFub255bW91cyhsb2NhbHMsIGZpbHRlcnMsIGVzY2FwZVxuLyoqLykge1xuZXNjYXBlID0gZXNjYXBlIHx8IGZ1bmN0aW9uIChodG1sKXtcbiAgcmV0dXJuIFN0cmluZyhodG1sKVxuICAgIC5yZXBsYWNlKC8mKD8hXFx3KzspL2csICcmYW1wOycpXG4gICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xufTtcbnZhciBidWYgPSBbXTtcbndpdGggKGxvY2FscyB8fCB7fSkgeyAoZnVuY3Rpb24oKXsgXG4gYnVmLnB1c2goJycpOzE7XG4gIHZhciBtc2cgPSByZXF1aXJlKCcuLi9sb2NhbGUnKTtcbjsgYnVmLnB1c2goJ1xcblxcbjxkaXYgaWQ9XCJyb3RhdGVDb250YWluZXJcIiBzdHlsZT1cImJhY2tncm91bmQtaW1hZ2U6IHVybCgnLCBlc2NhcGUoKDUsICBhc3NldFVybCgnbWVkaWEvdHVybnBob25lX2hvcml6b250YWwucG5nJykgKSksICcpXCI+XFxuICA8ZGl2IGlkPVwicm90YXRlVGV4dFwiPlxcbiAgICA8cD4nLCBlc2NhcGUoKDcsICBtc2cucm90YXRlVGV4dCgpICkpLCAnPGJyPicsIGVzY2FwZSgoNywgIG1zZy5vcmllbnRhdGlvbkxvY2soKSApKSwgJzwvcD5cXG4gIDwvZGl2PlxcbjwvZGl2PlxcblxcbicpOzExOyB2YXIgaW5zdHJ1Y3Rpb25zID0gZnVuY3Rpb24oKSB7OyBidWYucHVzaCgnICA8ZGl2IGlkPVwiYnViYmxlXCIgY2xhc3M9XCJjbGVhcmZpeFwiPlxcbiAgICA8dGFibGUgaWQ9XCJwcm9tcHQtdGFibGVcIj5cXG4gICAgICA8dHI+XFxuICAgICAgICA8dGQgaWQ9XCJwcm9tcHQtaWNvbi1jZWxsXCI+XFxuICAgICAgICAgIDxpbWcgaWQ9XCJwcm9tcHQtaWNvblwiLz5cXG4gICAgICAgIDwvdGQ+XFxuICAgICAgICA8dGQgaWQ9XCJwcm9tcHQtY2VsbFwiPlxcbiAgICAgICAgICA8cCBpZD1cInByb21wdFwiPlxcbiAgICAgICAgICA8L3A+XFxuICAgICAgICA8L3RkPlxcbiAgICAgIDwvdHI+XFxuICAgIDwvdGFibGU+XFxuICAgIDxkaXYgaWQ9XCJhbmktZ2lmLXByZXZpZXctd3JhcHBlclwiPlxcbiAgICAgIDxkaXYgaWQ9XCJhbmktZ2lmLXByZXZpZXdcIj5cXG4gICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuICA8L2Rpdj5cXG4nKTsyODsgfTs7IGJ1Zi5wdXNoKCdcXG48ZGl2IGlkPVwiYXBwY29udGFpbmVyXCI+XFxuICA8IS0tIFNob3VsZCBkaXNhYmxlIHNwZWxsLWNoZWNrIG9uIGFsbCBuZXRzaW0gZWxlbWVudHMgLS0+XFxuICA8ZGl2IGlkPVwibmV0c2ltXCIgYXV0b2NhcGl0YWxpemU9XCJmYWxzZVwiIGF1dG9jb3JyZWN0PVwiZmFsc2VcIiBhdXRvY29tcGxldGU9XCJmYWxzZVwiIHNwZWxsY2hlY2s9XCJmYWxzZVwiPlxcblxcbiAgICA8ZGl2IGlkPVwibmV0c2ltLWRpc2Nvbm5lY3RlZFwiPlxcbiAgICAgIDxkaXYgY2xhc3M9XCJsb2JieS1wYW5lbFwiPjwvZGl2PlxcbiAgICA8L2Rpdj5cXG5cXG5cXG4gICAgPGRpdiBpZD1cIm5ldHNpbS1jb25uZWN0ZWRcIj5cXG4gICAgICA8ZGl2IGlkPVwibmV0c2ltLWxlZnRjb2xcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2x1bW4td2lkdGgtbGltaXRlclwiPlxcblxcbiAgICAgICAgICA8ZGl2IGlkPVwibmV0c2ltLXN0YXR1c1wiPjwvZGl2PlxcblxcbiAgICAgICAgICA8ZGl2IGlkPVwibmV0c2ltLXZpc3VhbGl6YXRpb25cIj48L2Rpdj5cXG5cXG4gICAgICAgICAgPGRpdiBpZD1cIm5ldHNpbS10YWJzXCI+PC9kaXY+XFxuXFxuICAgICAgICA8L2Rpdj5cXG4gICAgICA8L2Rpdj5cXG5cXG4gICAgICA8ZGl2IGlkPVwibmV0c2ltLXJpZ2h0Y29sXCI+XFxuICAgICAgICA8ZGl2IGlkPVwibmV0c2ltLWxvZ3NcIj5cXG4gICAgICAgICAgPGRpdiBpZD1cIm5ldHNpbS1yZWNlaXZlZFwiPjwvZGl2PlxcbiAgICAgICAgICA8ZGl2IGlkPVwibmV0c2ltLXNlbnRcIj48L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGRpdiBpZD1cIm5ldHNpbS1zZW5kXCI+PC9kaXY+XFxuICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcblxcbiAgICA8ZGl2IGlkPVwicm91dGVyLWxvZy1tb2RhbFwiIGNsYXNzPVwibW9kYWwgZmFkZVwiPjwvZGl2PlxcblxcbiAgPC9kaXY+XFxuICA8ZGl2IGlkPVwiZm9vdGVyc1wiIGRpcj1cIicsIGVzY2FwZSgoNjMsICBkYXRhLmxvY2FsZURpcmVjdGlvbiApKSwgJ1wiPlxcbiAgPC9kaXY+XFxuICA8ZGl2IGNsYXNzPVwiaGlkZGVuXCI+XFxuICAgICcpOzY2OyBpbnN0cnVjdGlvbnMoKTsgOyBidWYucHVzaCgnXFxuICA8L2Rpdj5cXG48L2Rpdj5cXG5cXG48ZGl2IGNsYXNzPVwiY2xlYXJcIj48L2Rpdj5cXG4nKTsgfSkoKTtcbn0gXG5yZXR1cm4gYnVmLmpvaW4oJycpO1xufTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGxvY2Fscykge1xuICAgIHJldHVybiB0KGxvY2FscywgcmVxdWlyZShcImVqc1wiKS5maWx0ZXJzKTtcbiAgfVxufSgpKTsiLCIvKmpzaGludCBtdWx0aXN0cjogdHJ1ZSAqL1xuLyoqXG4gKiBAb3ZlcnZpZXcgVHlwZSBkb2N1bWVudGF0aW9uIGZvciBhIE5ldFNpbSBsZXZlbCBjb25maWd1cmF0aW9uIG9iamVjdCxcbiAqICAgICAgICAgICBhbmQgZGVmYXVsdCB2YWx1ZXMgZm9yIHRoYXQgb2JqZWN0LlxuICovXG5cbnZhciBOZXRTaW1Db25zdGFudHMgPSByZXF1aXJlKCcuL05ldFNpbUNvbnN0YW50cycpO1xudmFyIFBhY2tldCA9IHJlcXVpcmUoJy4vUGFja2V0Jyk7XG52YXIgQklUU19QRVJfTklCQkxFID0gTmV0U2ltQ29uc3RhbnRzLkJJVFNfUEVSX05JQkJMRTtcbnZhciBNZXNzYWdlR3JhbnVsYXJpdHkgPSBOZXRTaW1Db25zdGFudHMuTWVzc2FnZUdyYW51bGFyaXR5O1xudmFyIERuc01vZGUgPSBOZXRTaW1Db25zdGFudHMuRG5zTW9kZTtcbnZhciBFbmNvZGluZ1R5cGUgPSBOZXRTaW1Db25zdGFudHMuRW5jb2RpbmdUeXBlO1xudmFyIE5ldFNpbVRhYlR5cGUgPSBOZXRTaW1Db25zdGFudHMuTmV0U2ltVGFiVHlwZTtcblxuLyoqXG4gKiBBIGxldmVsIGNvbmZpZ3VyYXRpb24gdGhhdCBjYW4gYmUgdXNlZCBieSBOZXRTaW1cbiAqIEB0eXBlZGVmIHtPYmplY3R9IE5ldFNpbUxldmVsQ29uZmlndXJhdGlvblxuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpbnN0cnVjdGlvbnMgLSBJbmhlcml0ZWQgZnJvbSBibG9ja2x5IGxldmVsIGNvbmZpZ3VyYXRpb24uXG4gKlxuICogQHByb3BlcnR5IHtib29sZWFufSBzaG93Q2xpZW50c0luTG9iYnkgLSBXaGV0aGVyIGNsaWVudCBub2RlcyBzaG91bGQgYXBwZWFyXG4gKiAgICAgICAgICAgaW4gdGhlIGxvYmJ5IGxpc3QgYXQgYWxsLlxuICpcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gc2hvd1JvdXRlcnNJbkxvYmJ5IC0gV2hldGhlciByb3V0ZXIgbm9kZXMgc2hvdWxkIGFwcGVhclxuICogICAgICAgICAgIGluIHRoZSBsb2JieSBsaXN0IGF0IGFsbC5cbiAqXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGNhbkNvbm5lY3RUb0NsaWVudHMgLSBXaGV0aGVyIGNsaWVudCBub2RlcyBhcmUgc2VsZWN0YWJsZVxuICogICAgICAgICAgIGFuZCBjYW4gYmUgY29ubmVjdGVkIHRvXG4gKlxuICogQHByb3BlcnR5IHtib29sZWFufSBjYW5Db25uZWN0VG9Sb3V0ZXJzIC0gV2hldGhlciByb3V0ZXIgbm9kZXMgYXJlIHNlbGVjdGFibGVcbiAqICAgICAgICAgICBhbmQgY2FuIGJlIGNvbm5lY3RlZCB0b1xuICpcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gc2hvd0FkZFJvdXRlckJ1dHRvbiAtIFdoZXRoZXIgdGhlIFwiQWRkIFJvdXRlclwiIGJ1dHRvblxuICogICAgICAgICAgIHNob3VsZCBhcHBlYXIgYWJvdmUgdGhlIGxvYmJ5IGxpc3QuXG4gKlxuICogQHByb3BlcnR5IHtib29sZWFufSBzaG93TG9nQnJvd3NlckJ1dHRvbiAtIFdoZXRoZXIgdGhlIFwiTG9nIEJyb3dzZXJcIiBpc1xuICogICAgICAgICAgIGF2YWlsYWJsZSBpbiB0aGUgbG9iYnkuXG4gKlxuICogQHByb3BlcnR5IHtNZXNzYWdlR3JhbnVsYXJpdHl9IG1lc3NhZ2VHcmFudWxhcml0eSAtIFdoZXRoZXIgdGhlIHNpbXVsYXRvclxuICogICAgICAgICAgIHB1dHMgYSBzaW5nbGUgYml0IGludG8gc3RvcmFnZSBhdCBhIHRpbWUsIG9yIGEgd2hvbGUgcGFja2V0LlxuICogICAgICAgICAgIFNob3VsZCB1c2UgJ2JpdHMnIGZvciB2YXJpYW50IDEgKGxldmVscyBhYm91dCB0aGUgY29vcmRpbmF0aW9uXG4gKiAgICAgICAgICAgcHJvYmxlbSksIGFuZCAncGFja2V0cycgZm9yIGxldmVscyB3aGVyZSB0aGUgY29vcmRpbmF0aW9uIHByb2JsZW1cbiAqICAgICAgICAgICBpcyBhYnN0cmFjdGVkIGF3YXkuXG4gKlxuICogQHByb3BlcnR5IHtib29sZWFufSBhdXRvbWF0aWNSZWNlaXZlIC0gV2hldGhlciB0aGUgbG9jYWwgbm9kZSB3aWxsXG4gKiAgICAgICAgICAgYXV0b21hdGljYWxseSBwaWNrIHVwIG1lc3NhZ2VzIHRvIGl0c2VsZiBmcm9tIHRoZSBtZXNzYWdlIHRhYmxlLFxuICogICAgICAgICAgIGFuZCBkdW1wIHRoZW0gdG8gdGhlIHJlY2VpdmVkIG1lc3NhZ2UgbG9nLiAgSWYgZmFsc2UsIHNvbWUgb3RoZXJcbiAqICAgICAgICAgICBtZXRob2QgbXVzdCBiZSB1c2VkIGZvciByZWNlaXZpbmcgbWVzc2FnZXMuXG4gKlxuICogQHByb3BlcnR5IHtib29sZWFufSBicm9hZGNhc3RNb2RlIC0gRW5hYmxpbmcgdGhpcyBvcHRpb24gdHVybnMgXCJyb3V0ZXJzXCJcbiAqICAgICAgICAgICBpbnRvIFwicm9vbXNcIiBhbmQgbWFrZXMgaXQgc28gZXZlcnkgbWVzc2FnZSBzZW50IGluIHRoZSByb29tXG4gKiAgICAgICAgICAgd2lsbCBiZSByZWNlaXZlZCBieSBldmVyeSBvdGhlciBwZXJzb24gaW4gdGhhdCByb29tLlxuICpcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gY29ubmVjdGVkUm91dGVycyAtIFdoZW4gZmFsc2UgKGRlZmF1bHQpLCBlYWNoIHJvdXRlciBvclxuICogICAgICAgICAgIHJvb20gZXhpc3RzIGluIGlzb2xhdGlvbiBhbmQgd2lsbCBoYXZlIG5vIGNvbnRhY3Qgd2l0aCBvdGhlciByb3V0ZXJzXG4gKiAgICAgICAgICAgb3Igcm9vbXMuICBXaGVuIHRydWUsIGl0IGlzIHBvc3NpYmxlIGZvciBtZXNzYWdlcyB0byB0cmF2ZWwgYmV0d2VlblxuICogICAgICAgICAgIHJvdXRlcnMsIGNvbm5lY3RpbmcgdGhlIHdob2xlIHNoYXJkLlxuICpcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBtaW5pbXVtRXh0cmFIb3BzIC0gRmV3ZXN0IG5vbi1kZXN0aW5hdGlvbiByb3V0ZXJzIGFuXG4gKiAgICAgICAgICAgaW50ZXItcm91dGVyIG1lc3NhZ2Ugc2hvdWxkIHRyeSB0byB2aXNpdCBiZWZvcmUgZ29pbmcgdG8gaXRzXG4gKiAgICAgICAgICAgZGVzdGluYXRpb24gcm91dGVyLiAgTnVtYmVyIG9mIGhvcHMgY2FuIGJlIGxvd2VyIGlmIG5ldHdvcmtcbiAqICAgICAgICAgICBjb25kaXRpb25zIGRvbid0IGFsbG93IGl0LlxuICpcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBtYXhpbXVtRXh0cmFIb3BzIC0gTW9zdCBub24tZGVzdGluYXRpb24gcm91dGVycyBhblxuICogICAgICAgICAgIGludGVyLXJvdXRlciBtZXNzYWdlIHNob3VsZCB0cnkgdG8gdmlzaXQgYmVmb3JlIGdvaW5nIHRvIGl0c1xuICogICAgICAgICAgIGRlc3RpbmF0aW9uIHJvdXRlci5cbiAqXG4gKiBAcHJvcGVydHkge0FkZHJlc3NIZWFkZXJGb3JtYXR9IGFkZHJlc3NGb3JtYXQgLSBTcGVjaWZ5IGhvdyBtYW55IGJpdHMgd2lkZVxuICogICAgICAgICAgIGFuIGFkZHJlc3MgaXMgd2l0aGluIHRoZSBzaW11bGF0aW9uIGFuZCBob3cgaXQgc2hvdWxkIGJlIGRpdmlkZWRcbiAqICAgICAgICAgICB1cCBpbnRvIGEgaGllcmFyY2h5LiBGb3JtYXQgcmVzZW1ibGVzIElQdjQgZG90LWRlY2ltYWwgbm90YXRpb24sXG4gKiAgICAgICAgICAgYnV0IHRoZSBudW1iZXJzIHNwZWNpZnkgdGhlIG51bWJlciBvZiBiaXRzIGZvciBlYWNoIHNlY3Rpb24uXG4gKiAgICAgICAgICAgRXhhbXBsZXM6XG4gKiAgICAgICAgICAgXCI4LjhcIiAtIDE2LWJpdCBhZGRyZXNzLCByZXByZXNlbnRlZCBhcyB0d28gOC1iaXQgaW50ZWdlcnMuXG4gKiAgICAgICAgICAgXCI0XCIgLSA0IGJpdCBhZGRyZXNzIHJlcHJlc2VudGVkIGFzIG9uZSA0LWJpdCBpbnRlZ2VyLlxuICogICAgICAgICAgIFwiOC40XCIgLSAxMi1iaXQgYWRkcmVzcywgcmVwcmVzZW50ZWQgYXMgYW4gOC1iaXQgaW50ZWdlciBmb2xsb3dlZFxuICogICAgICAgICAgICAgICAgICAgYnkgYSA0LWJpdCBpbnRlZ2VyXG4gKiAgICAgICAgICAgIFRoaXMgZm9ybWF0IHdpbGwgYmUgYXBwbGllZCB0byBhbnkgXCJmcm9tQWRkcmVzc1wiIG9yIFwidG9BZGRyZXNzXCJcbiAqICAgICAgICAgICAgaGVhZGVyIGZpZWxkcyBpbiB0aGUgcGFja2V0IHNwZWNpZmljYXRpb24sIGFuZCB3aWxsIGRldGVybWluZVxuICogICAgICAgICAgICBob3cgcm91dGVycyBhc3NpZ24gYWRkcmVzc2VzLlxuICpcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBwYWNrZXRDb3VudEJpdFdpZHRoIC0gSG93IG1hbnkgYml0cyBzaG91bGQgYmUgYWxsb2NhdGVkXG4gKiAgICAgICAgICAgZm9yIGFueSBcInBhY2tldEluZGV4XCIgb3IgXCJwYWNrZXRDb3VudFwiIGZpZWxkcyBpbiB0aGUgcGFja2V0XG4gKiAgICAgICAgICAgc3BlY2lmaWNhdGlvbi5cbiAqXG4gKiBAcHJvcGVydHkge1BhY2tldC5IZWFkZXJUeXBlW119IHJvdXRlckV4cGVjdHNQYWNrZXRIZWFkZXIgLSBUaGUgaGVhZGVyIGZvcm1hdFxuICogICAgICAgICAgIHRoZSByb3V0ZXIgdXNlcyB0byBwYXJzZSBpbmNvbWluZyBwYWNrZXRzIGFuZCBmaWd1cmUgb3V0IHdoZXJlXG4gKiAgICAgICAgICAgdG8gcm91dGUgdGhlbS5cbiAqXG4gKiBAcHJvcGVydHkge1BhY2tldC5IZWFkZXJUeXBlW119IGNsaWVudEluaXRpYWxQYWNrZXRIZWFkZXIgLSBUaGUgaGVhZGVyIGZvcm1hdFxuICogICAgICAgICAgIHVzZWQgYnkgdGhlIGxvY2FsIGNsaWVudCBub2RlIHdoZW4gZ2VuZXJhdGluZy9wYXJzaW5nIHBhY2tldHMsXG4gKiAgICAgICAgICAgd2hpY2ggYWZmZWN0cyB0aGUgbGF5b3V0IG9mIHRoZSBzZW5kIHBhbmVsIGFuZCBsb2cgcGFuZWxzLlxuICpcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gc2hvd0hvc3RuYW1lSW5HcmFwaCAtIElmIGZhbHNlLCBzdHVkZW50IGRpc3BsYXkgbmFtZVxuICogICAgICAgICAgIGlzIHVzZWQgaW4gdGhlIG5ldHdvcmsgZ3JhcGguICBJZiB0cnVlLCB0aGVpciBnZW5lcmF0ZWQgaG9zdG5hbWVcbiAqICAgICAgICAgICBpcyBkaXNwbGF5ZWQuXG4gKlxuICogQHByb3BlcnR5IHtib29sZWFufSBzaG93QWRkUGFja2V0QnV0dG9uIC0gV2hldGhlciB0aGUgXCJBZGQgUGFja2V0XCIgYnV0dG9uXG4gKiAgICAgICAgICAgc2hvdWxkIGFwcGVhciBpbiB0aGUgc2VuZCB3aWRnZXQuXG4gKlxuICogQHByb3BlcnR5IHtib29sZWFufSBzaG93UGFja2V0U2l6ZUNvbnRyb2wgLSBXaGV0aGVyIHRoZSBwYWNrZXQgc2l6ZSBzbGlkZXJcbiAqICAgICAgICAgICBzaG91bGQgYXBwZWFyIGluIHRoZSBzZW5kIHdpZGdldC5cbiAqXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGVmYXVsdFBhY2tldFNpemVMaW1pdCAtIEluaXRpYWwgbWF4aW11bSBwYWNrZXQgc2l6ZS5cbiAqXG4gKiBAcHJvcGVydHkge05ldFNpbVRhYlR5cGVbXX0gc2hvd1RhYnMgLSBXaGljaCB0YWJzIHNob3VsZCBhcHBlYXIgYmVuZWF0aCB0aGVcbiAqICAgICAgICAgICBuZXR3b3JrIHZpc3VhbGl6YXRpb24uICBEb2VzIG5vdCBkZXRlcm1pbmUgdGFiIG9yZGVyOyB0YWJzIGFsd2F5c1xuICogICAgICAgICAgIGFwcGVhciBpbiB0aGUgb3JkZXIgXCJJbnN0cnVjdGlvbnMsIE15IERldmljZSwgUm91dGVyLCBETlMuXCJcbiAqXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGVmYXVsdFRhYkluZGV4IC0gVGhlIHplcm8tYmFzZWQgaW5kZXggb2YgdGhlIHRhYlxuICogICAgICAgICAgIHRoYXQgc2hvdWxkIGJlIGFjdGl2ZSBieSBkZWZhdWx0LCB3aGljaCBkZXBlbmRzIG9uIHdoaWNoIHRhYnNcbiAqICAgICAgICAgICB5b3UgaGF2ZSBlbmFibGVkLlxuICpcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gc2hvd1B1bHNlUmF0ZVNsaWRlciAtIFdoZXRoZXIgdGhlIHB1bHNlIHJhdGUgc2xpZGVyXG4gKiAgICAgICAgICAgaXMgdmlzaWJsZSBvbiB0aGUgXCJNeSBEZXZpY2VcIiB0YWIuICBUaGlzIGNvbnRyb2wgaXMgYSBkaWZmZXJlbnRcbiAqICAgICAgICAgICB2aWV3IG9uIHRoZSBiaXRyYXRlLCBnaXZlbiBpbiBzZWNvbmRzLXBlci1wdWxzZTsgaW4gZmFjdCwgaWYgYm90aFxuICogICAgICAgICAgIHRoaXMgYW5kIHRoZSBiaXRyYXRlIHNsaWRlciBhcmUgdmlzaWJsZSwgZHJhZ2dpbmcgb25lIHdpbGwgY2hhbmdlXG4gKiAgICAgICAgICAgdGhlIG90aGVyLlxuICpcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gc2hvd01ldHJvbm9tZSAtIFdoZXRoZXIgdGhlIG1ldHJvbm9tZSBzaG91bGQgc2hvdyB1cCBvblxuICogICAgICAgICAgIHRoZSBcIk15IERldmljZVwiIHRhYi5cbiAqXG4gKiBAcHJvcGVydHkge0VuY29kaW5nVHlwZVtdfSBzaG93RW5jb2RpbmdDb250cm9scyAtIFdoaWNoIGVuY29kaW5ncywgKEFTQ0lJLFxuICogICAgICAgICAgIGJpbmFyeSwgZXRjLikgc2hvdWxkIGhhdmUgdmlzaWJsZSBjb250cm9scyBvbiB0aGUgXCJNeSBEZXZpY2VcIiB0YWIuXG4gKlxuICogQHByb3BlcnR5IHtFbmNvZGluZ1R5cGVbXX0gZGVmYXVsdEVuYWJsZWRFbmNvZGluZ3MgLSBXaGljaCBlbmNvZGluZ3Mgc2hvdWxkXG4gKiAgICAgICAgICAgYmUgZW5hYmxlZCBvbiBwYWdlIGxvYWQuICBOb3RlOiBBbiBlbmNvZGluZyBlbmFibGVkIGhlcmUgYnV0IG5vdFxuICogICAgICAgICAgIGluY2x1ZGVkIGluIHRoZSB2aXNpYmxlIGNvbnRyb2xzIHdpbGwgYmUgZW5hYmxlZCBhbmQgY2Fubm90IGJlXG4gKiAgICAgICAgICAgZGlzYWJsZWQgYnkgdGhlIHN0dWRlbnQuXG4gKlxuICogQHByb3BlcnR5IHtib29sZWFufSBzaG93Qml0UmF0ZUNvbnRyb2wgLSBXaGV0aGVyIHRoZSBiaXQgcmF0ZSBzbGlkZXIgc2hvdWxkXG4gKiAgICAgICAgICAgYmUgZGlzcGxheWVkIG9uIHRoZSBcIk15IERldmljZVwiIHRhYi5cbiAqXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGxvY2tCaXRSYXRlQ29udHJvbCAtIFdoZXRoZXIgdGhlIGJpdCByYXRlIHNsaWRlciBzaG91bGRcbiAqICAgICAgICAgICBiZSBhZGp1c3RhYmxlIGJ5IHRoZSBzdHVkZW50LlxuICpcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkZWZhdWx0Qml0UmF0ZUJpdHNQZXJTZWNvbmQgLSBEZWZhdWx0IGJpdCByYXRlIG9uIGxldmVsXG4gKiAgICAgICAgICAgbG9hZC4gIEFsc28gc2V0cyB0aGUgcHVsc2UgcmF0ZSBmb3IgbGV2ZWxzIHdpdGggdGhlIG1ldHJvbm9tZS5cbiAqXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHNob3dDaHVua1NpemVDb250cm9sIC0gV2hldGhlciB0aGUgY2h1bmsgc2l6ZSBzbGlkZXJcbiAqICAgICAgICAgICBzaG91bGQgYmUgZGlzcGxheWVkIG9uIHRoZSBcIk15IERldmljZVwiIHRhYi5cbiAqXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGxvY2tDaHVua1NpemVDb250cm9sIC0gV2hldGhlciB0aGUgY2h1bmsgc2l6ZSBzbGlkZXJcbiAqICAgICAgICAgICBzaG91bGQgYmUgYWRqdXN0YWJsZSBieSB0aGUgc3R1ZGVudC5cbiAqXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGVmYXVsdENodW5rU2l6ZUJpdHMtIERlZmF1bHQgY2h1bmsgc2l6ZSBvbiBsZXZlbCBsb2FkLlxuICpcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gc2hvd1JvdXRlckJhbmR3aWR0aENvbnRyb2wgLSBXaGV0aGVyIHN0dWRlbnRzIHNob3VsZCBiZVxuICogICAgICAgICAgIGFibGUgdG8gc2VlIGFuZCBtYW5pcHVsYXRlIHRoZSBzbGlkZXIgdGhhdCBhZGp1c3RzIHRoZSByb3V0ZXInc1xuICogICAgICAgICAgIG1heCB0aHJvdWdocHV0IHNwZWVkLlxuICpcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkZWZhdWx0Um91dGVyQmFuZHdpZHRoIC0gSG93IGZhc3QgdGhlIHJvdXRlciBzaG91bGQgYmVcbiAqICAgICAgICAgICBhYmxlIHRvIHByb2Nlc3MgcGFja2V0cywgb24gaW5pdGlhbCBsZXZlbCBsb2FkLlxuICpcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gc2hvd1JvdXRlck1lbW9yeUNvbnRyb2wgLSBXaGV0aGVyIHN0dWRlbnRzIHNob3VsZCBiZVxuICogICAgICAgICAgIGFibGUgdG8gc2VlIGFuZCBtYW5pcHVsYXRlIHRoZSBzbGlkZXIgdGhhdCBhZGp1c3RzIHRoZSByb3V0ZXInc1xuICogICAgICAgICAgIG1heGltdW0gcXVldWUgbWVtb3J5LlxuICpcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkZWZhdWx0Um91dGVyTWVtb3J5IC0gSG93IG11Y2ggZGF0YSB0aGUgcm91dGVyIHBhY2tldFxuICogICAgICAgICAgIHF1ZXVlIGlzIGFibGUgdG8gaG9sZCBiZWZvcmUgaXQgc3RhcnRzIGRyb3BwaW5nIHBhY2tldHMsIGluIGJpdHMuXG4gKlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRlZmF1bHRSYW5kb21Ecm9wQ2hhbmNlIC0gT2RkcyB0aGF0IHRoZSByb3V0ZXIgd2lsbCBkcm9wXG4gKiAgICAgICAgICAgdGhlIHBhY2tldCBmb3Igbm8gcmVhc29uIHdoaWxlIHJvdXRpbmcgaXQuICBWYWx1ZSBpbiByYW5nZVxuICogICAgICAgICAgIDAgKG5vIGRyb3BzKSB0byAxIChkcm9wIGV2ZXJ5dGhpbmcpXG4gKlxuICogQHByb3BlcnR5IHtib29sZWFufSBzaG93RG5zTW9kZUNvbnRyb2wgLSBXaGV0aGVyIHRoZSBETlMgbW9kZSBjb250cm9scyB3aWxsXG4gKiAgICAgICAgICAgYmUgYXZhaWxhYmxlIHRvIHRoZSBzdHVkZW50LlxuICpcbiAqIEBwcm9wZXJ0eSB7RG5zTW9kZX0gZGVmYXVsdERuc01vZGUgLSBXaGljaCBETlMgbW9kZSB0aGUgc2ltdWxhdG9yIHNob3VsZFxuICogICAgICAgICAgIGluaXRpYWxpemUgaW50by5cbiAqL1xuXG4vKlxuICogQ29uZmlndXJhdGlvbiBmb3IgYWxsIGxldmVscy5cbiAqL1xudmFyIGxldmVscyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8qKlxuICogQSBkZWZhdWx0IGxldmVsIGNvbmZpZ3VyYXRpb24gc28gdGhhdCB3ZSBjYW4gZGVmaW5lIHRoZSBvdGhlcnMgYnkgZGVsdGEuXG4gKiBUaGlzIGRlZmF1bHQgY29uZmlndXJhdGlvbiBlbmFibGVzIGV2ZXJ5dGhpbmcgcG9zc2libGUsIHNvIG90aGVyIGNvbmZpZ3NcbiAqIHNob3VsZCBzdGFydCB3aXRoIHRoaXMgb25lIGFuZCBkaXNhYmxlIGZlYXR1cmVzLlxuICogQHR5cGUge05ldFNpbUxldmVsQ29uZmlndXJhdGlvbn1cbiAqL1xubGV2ZWxzLmN1c3RvbSA9IHtcblxuICAvLyBMb2JieSBjb25maWd1cmF0aW9uXG4gIHNob3dDbGllbnRzSW5Mb2JieTogZmFsc2UsXG4gIHNob3dSb3V0ZXJzSW5Mb2JieTogZmFsc2UsXG4gIGNhbkNvbm5lY3RUb0NsaWVudHM6IGZhbHNlLFxuICBjYW5Db25uZWN0VG9Sb3V0ZXJzOiBmYWxzZSxcbiAgc2hvd0FkZFJvdXRlckJ1dHRvbjogZmFsc2UsXG4gIHNob3dMb2dCcm93c2VyQnV0dG9uOiBmYWxzZSxcblxuICAvLyBTaW11bGF0b3Itd2lkZSBzZXR1cFxuICBtZXNzYWdlR3JhbnVsYXJpdHk6IE1lc3NhZ2VHcmFudWxhcml0eS5CSVRTLFxuICBhdXRvbWF0aWNSZWNlaXZlOiBmYWxzZSxcbiAgYnJvYWRjYXN0TW9kZTogZmFsc2UsXG4gIGNvbm5lY3RlZFJvdXRlcnM6IGZhbHNlLFxuICBtaW5pbXVtRXh0cmFIb3BzOiAwLFxuICBtYXhpbXVtRXh0cmFIb3BzOiAwLFxuXG4gIC8vIFBhY2tldCBoZWFkZXIgc3BlY2lmaWNhdGlvblxuICBhZGRyZXNzRm9ybWF0OiAnNCcsXG4gIHBhY2tldENvdW50Qml0V2lkdGg6IDQsXG4gIHJvdXRlckV4cGVjdHNQYWNrZXRIZWFkZXI6IFtdLFxuICBjbGllbnRJbml0aWFsUGFja2V0SGVhZGVyOiBbXSxcblxuICAvLyBWaXN1YWxpemF0aW9uIGNvbmZpZ3VyYXRpb25cbiAgc2hvd0hvc3RuYW1lSW5HcmFwaDogZmFsc2UsXG5cbiAgLy8gU2VuZCB3aWRnZXQgY29uZmlndXJhdGlvblxuICBzaG93QWRkUGFja2V0QnV0dG9uOiBmYWxzZSxcbiAgc2hvd1BhY2tldFNpemVDb250cm9sOiBmYWxzZSxcbiAgZGVmYXVsdFBhY2tldFNpemVMaW1pdDogODE5MixcblxuICAvLyBUYWItcGFuZWwgY29udHJvbFxuICBzaG93VGFiczogW10sXG4gIGRlZmF1bHRUYWJJbmRleDogMCxcblxuICAvLyBJbnN0cnVjdGlvbnMgdGFiIGFuZCBpdHMgY29udHJvbHNcbiAgLy8gTm90ZTogVXNlcyB0aGUgYmxvY2tseS1zdGFuZGFyZCBsZXZlbC5pbnN0cnVjdGlvbnMgdmFsdWUsIHdoaWNoIHNob3VsZFxuICAvLyAgICAgICBiZSBsb2NhbGl6ZWQgYnkgdGhlIHRpbWUgaXQgZ2V0cyBoZXJlLlxuXG4gIC8vIFwiTXkgRGV2aWNlXCIgdGFiIGFuZCBpdHMgY29udHJvbHNcbiAgc2hvd1B1bHNlUmF0ZVNsaWRlcjogZmFsc2UsXG4gIHNob3dNZXRyb25vbWU6IGZhbHNlLFxuICBzaG93RW5jb2RpbmdDb250cm9sczogW10sXG4gIGRlZmF1bHRFbmFibGVkRW5jb2RpbmdzOiBbXSxcbiAgc2hvd0JpdFJhdGVDb250cm9sOiBmYWxzZSxcbiAgbG9ja0JpdFJhdGVDb250cm9sOiBmYWxzZSxcbiAgZGVmYXVsdEJpdFJhdGVCaXRzUGVyU2Vjb25kOiBJbmZpbml0eSxcbiAgc2hvd0NodW5rU2l6ZUNvbnRyb2w6IGZhbHNlLFxuICBsb2NrQ2h1bmtTaXplQ29udHJvbDogZmFsc2UsXG4gIGRlZmF1bHRDaHVua1NpemVCaXRzOiA4LFxuXG4gIC8vIFJvdXRlciB0YWIgYW5kIGl0cyBjb250cm9sc1xuICBzaG93Um91dGVyQmFuZHdpZHRoQ29udHJvbDogZmFsc2UsXG4gIGRlZmF1bHRSb3V0ZXJCYW5kd2lkdGg6IEluZmluaXR5LFxuICBzaG93Um91dGVyTWVtb3J5Q29udHJvbDogZmFsc2UsXG4gIGRlZmF1bHRSb3V0ZXJNZW1vcnk6IEluZmluaXR5LFxuICBkZWZhdWx0UmFuZG9tRHJvcENoYW5jZTogMCxcblxuICAvLyBETlMgdGFiIGFuZCBpdHMgY29udHJvbHNcbiAgc2hvd0Ruc01vZGVDb250cm9sOiBmYWxzZSxcbiAgZGVmYXVsdERuc01vZGU6IERuc01vZGUuTk9ORVxufTtcblxuLyoqXG4gKiBTcGVjaWFsIGxldmVsIGNvbmZpZ3VyYXRpb24gZm9yIHVzZSB3aXRoICdncnVudCBkZXYnIHN0YW5kYWxvbmUgbW9kZS5cbiAqIE5ldmVyIHVzZWQgd2hlbiBzZXJ2aW5nIE5ldFNpbSBsZXZlbHMgdGhyb3VnaCBkYXNoYm9hcmQuXG4gKiBAdHlwZSB7TmV0U2ltTGV2ZWxDb25maWd1cmF0aW9ufVxuICovXG5sZXZlbHMucGxheWdyb3VuZCA9IHtcblxuICAvLyBMb2JieSBjb25maWd1cmF0aW9uXG4gIHNob3dDbGllbnRzSW5Mb2JieTogZmFsc2UsXG4gIHNob3dSb3V0ZXJzSW5Mb2JieTogdHJ1ZSxcbiAgY2FuQ29ubmVjdFRvQ2xpZW50czogZmFsc2UsXG4gIGNhbkNvbm5lY3RUb1JvdXRlcnM6IHRydWUsXG4gIHNob3dBZGRSb3V0ZXJCdXR0b246IHRydWUsXG4gIHNob3dMb2dCcm93c2VyQnV0dG9uOiB0cnVlLFxuXG4gIC8vIFNpbXVsYXRvci13aWRlIHNldHVwXG4gIG1lc3NhZ2VHcmFudWxhcml0eTogTWVzc2FnZUdyYW51bGFyaXR5LlBBQ0tFVFMsXG4gIGF1dG9tYXRpY1JlY2VpdmU6IHRydWUsXG4gIGJyb2FkY2FzdE1vZGU6IGZhbHNlLFxuICBjb25uZWN0ZWRSb3V0ZXJzOiBmYWxzZSxcbiAgbWluaW11bUV4dHJhSG9wczogMCxcbiAgbWF4aW11bUV4dHJhSG9wczogMCxcblxuICAvLyBQYWNrZXQgaGVhZGVyIHNwZWNpZmljYXRpb25cbiAgYWRkcmVzc0Zvcm1hdDogJzQnLFxuICBwYWNrZXRDb3VudEJpdFdpZHRoOiA0LFxuICByb3V0ZXJFeHBlY3RzUGFja2V0SGVhZGVyOiBbJ3RvQWRkcmVzcycsICdmcm9tQWRkcmVzcyddLFxuICBjbGllbnRJbml0aWFsUGFja2V0SGVhZGVyOiBbJ3RvQWRkcmVzcycsICdmcm9tQWRkcmVzcyddLFxuXG4gIC8vIFZpc3VhbGl6YXRpb24gY29uZmlndXJhdGlvblxuICBzaG93SG9zdG5hbWVJbkdyYXBoOiBmYWxzZSxcblxuICAvLyBTZW5kIHdpZGdldCBjb25maWd1cmF0aW9uXG4gIHNob3dBZGRQYWNrZXRCdXR0b246IGZhbHNlLFxuICBzaG93UGFja2V0U2l6ZUNvbnRyb2w6IGZhbHNlLFxuICBkZWZhdWx0UGFja2V0U2l6ZUxpbWl0OiA4MTkyLFxuXG4gIC8vIFRhYi1wYW5lbCBjb250cm9sXG4gIHNob3dUYWJzOiBbJ2luc3RydWN0aW9ucycsICdteV9kZXZpY2UnLCAncm91dGVyJywgJ2RucyddLFxuICBkZWZhdWx0VGFiSW5kZXg6IDAsXG5cbiAgLy8gSW5zdHJ1Y3Rpb25zIHRhYiBhbmQgaXRzIGNvbnRyb2xzXG4gIC8vIE5vdGU6IFVzZXMgdGhlIGJsb2NrbHktc3RhbmRhcmQgbGV2ZWwuaW5zdHJ1Y3Rpb25zIHZhbHVlLCB3aGljaCBzaG91bGRcbiAgLy8gICAgICAgYmUgbG9jYWxpemVkIGJ5IHRoZSB0aW1lIGl0IGdldHMgaGVyZS5cblxuICAvLyBcIk15IERldmljZVwiIHRhYiBhbmQgaXRzIGNvbnRyb2xzXG4gIHNob3dQdWxzZVJhdGVTbGlkZXI6IGZhbHNlLFxuICBzaG93TWV0cm9ub21lOiBmYWxzZSxcbiAgc2hvd0VuY29kaW5nQ29udHJvbHM6IFsnYV9hbmRfYicsICdiaW5hcnknLCAnaGV4YWRlY2ltYWwnLCAnZGVjaW1hbCcsICdhc2NpaSddLFxuICBkZWZhdWx0RW5hYmxlZEVuY29kaW5nczogWydhX2FuZF9iJywgJ2JpbmFyeScsICdoZXhhZGVjaW1hbCcsICdkZWNpbWFsJywgJ2FzY2lpJ10sXG4gIHNob3dCaXRSYXRlQ29udHJvbDogdHJ1ZSxcbiAgbG9ja0JpdFJhdGVDb250cm9sOiBmYWxzZSxcbiAgZGVmYXVsdEJpdFJhdGVCaXRzUGVyU2Vjb25kOiBJbmZpbml0eSxcbiAgc2hvd0NodW5rU2l6ZUNvbnRyb2w6IHRydWUsXG4gIGxvY2tDaHVua1NpemVDb250cm9sOiBmYWxzZSxcbiAgZGVmYXVsdENodW5rU2l6ZUJpdHM6IDgsXG5cbiAgLy8gUm91dGVyIHRhYiBhbmQgaXRzIGNvbnRyb2xzXG4gIHNob3dSb3V0ZXJCYW5kd2lkdGhDb250cm9sOiB0cnVlLFxuICBkZWZhdWx0Um91dGVyQmFuZHdpZHRoOiBJbmZpbml0eSxcbiAgc2hvd1JvdXRlck1lbW9yeUNvbnRyb2w6IHRydWUsXG4gIGRlZmF1bHRSb3V0ZXJNZW1vcnk6IEluZmluaXR5LFxuICBkZWZhdWx0UmFuZG9tRHJvcENoYW5jZTogMCxcblxuICAvLyBETlMgdGFiIGFuZCBpdHMgY29udHJvbHNcbiAgc2hvd0Ruc01vZGVDb250cm9sOiB0cnVlLFxuICBkZWZhdWx0RG5zTW9kZTogRG5zTW9kZS5OT05FXG59O1xuIiwibW9kdWxlLmV4cG9ydHM9IChmdW5jdGlvbigpIHtcbiAgdmFyIHQgPSBmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzLCBmaWx0ZXJzLCBlc2NhcGVcbi8qKi8pIHtcbmVzY2FwZSA9IGVzY2FwZSB8fCBmdW5jdGlvbiAoaHRtbCl7XG4gIHJldHVybiBTdHJpbmcoaHRtbClcbiAgICAucmVwbGFjZSgvJig/IVxcdys7KS9nLCAnJmFtcDsnKVxuICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXG4gICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbn07XG52YXIgYnVmID0gW107XG53aXRoIChsb2NhbHMgfHwge30pIHsgKGZ1bmN0aW9uKCl7IFxuIGJ1Zi5wdXNoKCc8ZGl2IGlkPVwic2xpZGVyLWNlbGxcIj5cXG4gIDxpbWcgaWQ9XCJzcGlubmVyXCIgc3R5bGU9XCJ2aXNpYmlsaXR5OiBoaWRkZW47XCIgc3JjPVwiJywgZXNjYXBlKCgyLCAgYXNzZXRVcmwoJ21lZGlhL25ldHNpbS9sb2FkaW5nLmdpZicpICkpLCAnXCIgaGVpZ2h0PTE1IHdpZHRoPTE1PlxcbjwvZGl2PlxcbicpOyB9KSgpO1xufSBcbnJldHVybiBidWYuam9pbignJyk7XG59O1xuICByZXR1cm4gZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgcmV0dXJuIHQobG9jYWxzLCByZXF1aXJlKFwiZWpzXCIpLmZpbHRlcnMpO1xuICB9XG59KCkpOyIsIi8qKlxuICogQG92ZXJ2aWV3IFRvcC1sZXZlbCBjb250cm9sbGVyIGZvciB0aGUgbmV0d29yayB2aXN1YWxpemF0aW9uLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBfID0gdXRpbHMuZ2V0TG9kYXNoKCk7XG52YXIgdmlzdWFsaXphdGlvbk1hcmt1cCA9IHJlcXVpcmUoJy4vTmV0U2ltVmlzdWFsaXphdGlvbi5odG1sLmVqcycpO1xudmFyIE5ldFNpbU5vZGVGYWN0b3J5ID0gcmVxdWlyZSgnLi9OZXRTaW1Ob2RlRmFjdG9yeScpO1xudmFyIE5ldFNpbVdpcmUgPSByZXF1aXJlKCcuL05ldFNpbVdpcmUnKTtcbnZhciBOZXRTaW1WaXpBdXRvRG5zTm9kZSA9IHJlcXVpcmUoJy4vTmV0U2ltVml6QXV0b0Ruc05vZGUnKTtcbnZhciBOZXRTaW1WaXpOb2RlID0gcmVxdWlyZSgnLi9OZXRTaW1WaXpOb2RlJyk7XG52YXIgTmV0U2ltVml6U2ltdWxhdGlvbk5vZGUgPSByZXF1aXJlKCcuL05ldFNpbVZpelNpbXVsYXRpb25Ob2RlJyk7XG52YXIgTmV0U2ltVml6U2ltdWxhdGlvbldpcmUgPSByZXF1aXJlKCcuL05ldFNpbVZpelNpbXVsYXRpb25XaXJlJyk7XG52YXIgTmV0U2ltVml6V2lyZSA9IHJlcXVpcmUoJy4vTmV0U2ltVml6V2lyZScpO1xudmFyIE5ldFNpbUdsb2JhbHMgPSByZXF1aXJlKCcuL05ldFNpbUdsb2JhbHMnKTtcbnZhciB0d2VlbnMgPSByZXF1aXJlKCcuL3R3ZWVucycpO1xudmFyIE5ldFNpbUNvbnN0YW50cyA9IHJlcXVpcmUoJy4vTmV0U2ltQ29uc3RhbnRzJyk7XG52YXIgRG5zTW9kZSA9IE5ldFNpbUNvbnN0YW50cy5EbnNNb2RlO1xudmFyIE5vZGVUeXBlID0gTmV0U2ltQ29uc3RhbnRzLk5vZGVUeXBlO1xuXG4vKipcbiAqIFdoZXRoZXIgdGhlIGJsdXJyZWQgdmlzdWFsaXphdGlvbiBiYWNrZ3JvdW5kIHNob3VsZCBiZSBzaG93bi5cbiAqIEBjb25zdCB7Ym9vbGVhbn1cbiAqL1xudmFyIFNIT1dfQkFDS0dST1VORCA9IGZhbHNlO1xuXG4vKipcbiAqIFRvcC1sZXZlbCBjb250cm9sbGVyIGZvciB0aGUgbmV0d29yayB2aXN1YWxpemF0aW9uLlxuICpcbiAqIEZvciB0aGUgbW9zdCBwYXJ0LCB0aGUgdmlzdWFsaXphdGlvbiBhdHRhY2hlcyB0byB0aGUgcmF3IG5ldHdvcmsgc3RhdGVcbiAqIHJlcHJlc2VudGF0aW9uICh0aGUgc3RvcmFnZSB0YWJsZXMpIGFuZCB1cGRhdGVzIHRvIHJlZmxlY3QgdGhhdCBzdGF0ZSxcbiAqIGluZGVwZW5kZW50IG9mIHRoZSByZXN0IG9mIHRoZSBjb250cm9scyBvbiB0aGUgcGFnZS4gIFRoaXMgc2VwYXJhdGlvbiBtZWFuc1xuICogdGhhdCB0aGUgdmlzdWFsaXphdGlvbiBhbHdheXMgaGFzIG9uZSBjYW5vbmljYWwgc3RhdGUgdG8gb2JzZXJ2ZS5cbiAqXG4gKiBAcGFyYW0ge2pRdWVyeX0gcm9vdERpdiAtIFRoZSA8ZGl2PiB0YWcgd2l0aGluIHdoaWNoIHRoZSB2aXN1YWxpemF0aW9uXG4gKiAgICAgICAgd2lsbCBiZSBjcmVhdGVkLlxuICogQHBhcmFtIHtSdW5Mb29wfSBydW5Mb29wIC0gTG9vcCBwcm92aWRpbmcgdGljayBhbmQgcmVuZGVyIGV2ZW50cyB0aGF0IHRoZVxuICogICAgICAgIHZpc3VhbGl6YXRpb24gY2FuIGhvb2sgdXAgdG8gYW5kIHJlc3BvbmQgdG8uXG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIE5ldFNpbVZpc3VhbGl6YXRpb24gPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyb290RGl2LCBydW5Mb29wKSB7XG4gIC8qKlxuICAgKiBAcHJpdmF0ZSB7alF1ZXJ5fVxuICAgKi9cbiAgdGhpcy5yb290RGl2XyA9IHJvb3REaXY7XG5cbiAgLy8gSW1tZWRpYXRlbHksIGRyb3Agb3VyIFNWRyBjYW52YXMgYW5kIGJhc2ljIGdyb3VwcyBpbnRvIHRoZSBET01cbiAgdGhpcy5yb290RGl2Xy5odG1sKHZpc3VhbGl6YXRpb25NYXJrdXAoe1xuICAgIHNob3dCYWNrZ3JvdW5kOiBTSE9XX0JBQ0tHUk9VTkRcbiAgfSkpO1xuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZSB7alF1ZXJ5fVxuICAgKi9cbiAgdGhpcy5zdmdSb290XyA9IHRoaXMucm9vdERpdl8uZmluZCgnc3ZnJyk7XG5cbiAgLyoqXG4gICAqIEJhY2tncm91bmQgZ3JvdXAgbmV2ZXIgZ29lcyBhd2F5LCBzbyBzZWFyY2ggZm9yIGl0IG9uY2UgYW5kIGNhY2hlXG4gICAqIGl0IGhlcmUuXG4gICAqIEBwcml2YXRlIHtqUXVlcnl9XG4gICAqL1xuICB0aGlzLmJhY2tncm91bmRHcm91cF8gPSB0aGlzLnN2Z1Jvb3RfLmZpbmQoJyNiYWNrZ3JvdW5kLWdyb3VwJyk7XG5cbiAgLyoqXG4gICAqIEZvcmVncm91bmQgZ3JvdXAgbmV2ZXIgZ29lcyBhd2F5LCBzbyBzZWFyY2ggZm9yIGl0IG9uY2UgYW5kIGNhY2hlXG4gICAqIGl0IGhlcmUuXG4gICAqIEBwcml2YXRlIHtqUXVlcnl9XG4gICAqL1xuICB0aGlzLmZvcmVncm91bmRHcm91cF8gPSB0aGlzLnN2Z1Jvb3RfLmZpbmQoJyNmb3JlZ3JvdW5kLWdyb3VwJyk7XG5cbiAgLyoqXG4gICAqIFRoZSBzaGFyZCBjdXJyZW50bHkgYmVpbmcgcmVwcmVzZW50ZWQuXG4gICAqIFdlIGRvbid0IGhhdmUgYSBzaGFyZCBub3csIGJ1dCB3ZSByZWdpc3RlciB3aXRoIHRoZSBjb25uZWN0aW9uIG1hbmFnZXJcbiAgICogdG8gZmluZCBvdXQgd2hlbiB3ZSBoYXZlIG9uZS5cbiAgICogQHByaXZhdGUge05ldFNpbVNoYXJkfVxuICAgKi9cbiAgdGhpcy5zaGFyZF8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBMaXN0IG9mIFZpekVudGl0aWVzLCB3aGljaCBhcmUgYWxsIHRoZSBlbGVtZW50cyB0aGF0IHdpbGwgYWN0dWFsbHkgc2hvdyB1cFxuICAgKiBpbiBvdXIgdmlzdWFsaXphdGlvbi5cbiAgICogQHByaXZhdGUge05ldFNpbVZpekVsZW1lbnRbXX1cbiAgICovXG4gIHRoaXMuZWxlbWVudHNfID0gW107XG5cbiAgLyoqXG4gICAqIFJlZmVyZW5jZSB0byB0aGUgbG9jYWwgbm9kZSB2aXogZWxlbWVudCwgdGhlIGFuY2hvciBmb3IgdGhlIHZpc3VhbGl6YXRpb24uXG4gICAqIEB0eXBlIHtOZXRTaW1WaXpTaW11bGF0aW9uTm9kZX1cbiAgICovXG4gIHRoaXMubG9jYWxOb2RlID0gbnVsbDtcblxuICAvKipcbiAgICogV2lkdGggKGluIHN2Zy11bml0cykgb2YgdmlzdWFsaXphdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy52aXN1YWxpemF0aW9uV2lkdGggPSAzMDA7XG5cbiAgLyoqXG4gICAqIEhlaWdodCAoaW4gc3ZnLXVuaXRzKSBvZiB2aXN1YWxpemF0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLnZpc3VhbGl6YXRpb25IZWlnaHQgPSAzMDA7XG5cbiAgLyoqXG4gICogTGFzdCBrbm93biBETlMgbW9kZSwgc28gdGhhdCBuZXcgZWxlbWVudHMgY2FuIGJlIGNyZWF0ZWQgd2l0aCB0aGVcbiAgKiBjb3JyZWN0IGRlZmF1bHRcbiAgKiBAdHlwZSB7RG5zTW9kZX1cbiAgKi9cbiAgdGhpcy5kbnNNb2RlXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFJlZmVyZW5jZSB0byB2aXN1YWxpemVkIGF1dG8tRE5TIG5vZGUsIGEgZmFrZSBub2RlIChub3QgbWFwcGVkIHRvIHRoZVxuICAgKiBzaW11bGF0aW9uIGluIGEgbm9ybWFsIHdheSkgdGhhdCBhbHNvIGxpdmVzIGluIG91ciBlbGVtZW50c18gY29sbGVjdGlvbi5cbiAgICogQHR5cGUge05ldFNpbVZpekF1dG9EbnNOb2RlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5hdXRvRG5zTm9kZV8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBSZWZlcmVuY2UgdG8gd2lyZSBiZXR3ZWVuIHRoZSBhdXRvLUROUyBub2RlIGFuZCB0aGUgZm9yZWdyb3VuZCByb3V0ZXIuXG4gICAqIE1hbmFnZWQgbWFudWFsbHkgc28gd2Uga2VlcCBhIGhhbmRsZSBvbiBpdCwgYnV0IGFsc28gbGl2ZXMgaW4gdGhlIGVsZW1lbnRzX1xuICAgKiBjb2xsZWN0aW9uLlxuICAgKiBAdHlwZSB7TmV0U2ltVml6V2lyZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuYXV0b0Ruc1dpcmVfID0gbnVsbDtcblxuICAvKipcbiAgICogRXZlbnQgcmVnaXN0cmF0aW9uIGluZm9ybWF0aW9uXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICB0aGlzLmV2ZW50S2V5cyA9IHt9O1xuXG4gIC8qKlxuICAgKiBMYXN0IGtub3duIGVuY29kaW5ncyBzZXQsIHNvIHRoYXQgbmV3IGVsZW1lbnRzIGNhbiBiZSBjcmVhdGVkIHdpdGhcbiAgICogdGhlIGNvcnJlY3QgZGVmYXVsdFxuICAgKiBAdHlwZSB7RW5jb2RpbmdUeXBlW119XG4gICAqL1xuICB0aGlzLmVuY29kaW5nc18gPSBbXTtcblxuICAvLyBIb29rIHVwIHRpY2sgYW5kIHJlbmRlciBtZXRob2RzXG4gIHJ1bkxvb3AudGljay5yZWdpc3Rlcih0aGlzLnRpY2suYmluZCh0aGlzKSk7XG4gIHJ1bkxvb3AucmVuZGVyLnJlZ2lzdGVyKHRoaXMucmVuZGVyLmJpbmQodGhpcykpO1xufTtcblxuLyoqXG4gKiBUaWNrOiBVcGRhdGUgYWxsIHZpemVudGl0aWVzLCBnaXZpbmcgdGhlbSBhbiBvcHBvcnR1bml0eSB0byByZWNhbGN1bGF0ZVxuICogICAgICAgdGhlaXIgaW50ZXJuYWwgc3RhdGUsIGFuZCByZW1vdmUgYW55IGRlYWQgZW50aXRpZXMgZnJvbSB0aGVcbiAqICAgICAgIHZpc3VhbGl6YXRpb24uXG4gKiBAcGFyYW0ge1J1bkxvb3AuQ2xvY2t9IGNsb2NrXG4gKi9cbk5ldFNpbVZpc3VhbGl6YXRpb24ucHJvdG90eXBlLnRpY2sgPSBmdW5jdGlvbiAoY2xvY2spIHtcbiAgLy8gRXZlcnlvbmUgZ2V0cyBhbiB1cGRhdGVcbiAgdGhpcy5lbGVtZW50c18uZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIGVsZW1lbnQudGljayhjbG9jayk7XG4gIH0pO1xuXG4gIC8vIFRlYXIgb3V0IGRlYWQgZW50aXRpZXMuXG4gIHRoaXMuZWxlbWVudHNfID0gdGhpcy5lbGVtZW50c18uZmlsdGVyKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgaWYgKGVsZW1lbnQuaXNEZWFkKCkpIHtcbiAgICAgIGVsZW1lbnQuZ2V0Um9vdCgpLnJlbW92ZSgpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFJlbmRlcjogTGV0IGFsbCB2aXplbnRpdGllcyBcInJlZHJhd1wiIChvciBpbiBvdXIgY2FzZSwgdG91Y2ggdGhlIERPTSlcbiAqIEBwYXJhbSB7UnVuTG9vcC5DbG9ja30gY2xvY2tcbiAqL1xuTmV0U2ltVmlzdWFsaXphdGlvbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKGNsb2NrKSB7XG4gIHRoaXMuZWxlbWVudHNfLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICBlbGVtZW50LnJlbmRlcihjbG9jayk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBDaGFuZ2UgdGhlIHNoYXJkIHRoaXMgdmlzdWFsaXphdGlvbiB3aWxsIHNvdXJjZSBpdHMgZGF0YSBmcm9tLlxuICogUmUtYXR0YWNoZXMgdGFibGUgY2hhbmdlIGxpc3RlbmVycyBmb3IgYWxsIHRoZSB0YWJsZXMgd2UgbmVlZCB0byBtb25pdG9yLlxuICogQHBhcmFtIHs/TmV0U2ltU2hhcmR9IG5ld1NoYXJkIC0gbnVsbCBpZiBkaXNjb25uZWN0ZWRcbiAqL1xuTmV0U2ltVmlzdWFsaXphdGlvbi5wcm90b3R5cGUuc2V0U2hhcmQgPSBmdW5jdGlvbiAobmV3U2hhcmQpIHtcbiAgdGhpcy5zaGFyZF8gPSBuZXdTaGFyZDtcblxuICAvLyBJZiB3ZSB3ZXJlIHJlZ2lzdGVyZWQgZm9yIHNoYXJkIGV2ZW50cywgdW5yZWdpc3RlciBvbGQgaGFuZGxlcnMuXG4gIGlmICh0aGlzLmV2ZW50S2V5cy5yZWdpc3RlcmVkV2l0aFNoYXJkKSB7XG4gICAgdGhpcy5ldmVudEtleXMucmVnaXN0ZXJlZFdpdGhTaGFyZC5ub2RlVGFibGUudGFibGVDaGFuZ2UudW5yZWdpc3RlcihcbiAgICAgICAgdGhpcy5ldmVudEtleXMubm9kZVRhYmxlKTtcbiAgICB0aGlzLmV2ZW50S2V5cy5yZWdpc3RlcmVkV2l0aFNoYXJkLndpcmVUYWJsZS50YWJsZUNoYW5nZS51bnJlZ2lzdGVyKFxuICAgICAgICB0aGlzLmV2ZW50S2V5cy53aXJlVGFibGUpO1xuICAgIHRoaXMuZXZlbnRLZXlzLnJlZ2lzdGVyZWRXaXRoU2hhcmQgPSBudWxsO1xuICB9XG5cbiAgLy8gSWYgd2UgaGF2ZSBhIG5ldyBzaGFyZCwgcmVnaXN0ZXIgbmV3IGhhbmRsZXJzLlxuICBpZiAobmV3U2hhcmQpIHtcbiAgICB0aGlzLmV2ZW50S2V5cy5ub2RlVGFibGUgPSBuZXdTaGFyZC5ub2RlVGFibGUudGFibGVDaGFuZ2UucmVnaXN0ZXIoXG4gICAgICAgIHRoaXMub25Ob2RlVGFibGVDaGFuZ2VfLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZXZlbnRLZXlzLndpcmVUYWJsZSA9IG5ld1NoYXJkLndpcmVUYWJsZS50YWJsZUNoYW5nZS5yZWdpc3RlcihcbiAgICAgICAgdGhpcy5vbldpcmVUYWJsZUNoYW5nZV8uYmluZCh0aGlzKSk7XG4gICAgdGhpcy5ldmVudEtleXMucmVnaXN0ZXJlZFdpdGhTaGFyZCA9IG5ld1NoYXJkO1xuICB9XG59O1xuXG4vKipcbiAqIENoYW5nZSB3aGljaCBub2RlIHdlIGNvbnNpZGVyIHRoZSAnbG9jYWwgbm9kZScgaW4gdGhlIHZpc3VhbGl6YXRpb24uXG4gKiBXZSBnbyB0aHJvdWdoIGEgc3BlY2lhbCBjcmVhdGlvbiBwcm9jZXNzIGZvciB0aGlzIG5vZGUsIHNvIHRoYXQgaXRcbiAqIGxvb2tzIGFuZCBiZWhhdmVzIGRpZmZlcmVudGx5LlxuICogQHBhcmFtIHs/TmV0U2ltTG9jYWxDbGllbnROb2RlfSBuZXdMb2NhbE5vZGUgLSBudWxsIGlmIGRpc2Nvbm5lY3RlZFxuICovXG5OZXRTaW1WaXN1YWxpemF0aW9uLnByb3RvdHlwZS5zZXRMb2NhbE5vZGUgPSBmdW5jdGlvbiAobmV3TG9jYWxOb2RlKSB7XG4gIC8vIFVucmVnaXN0ZXIgb2xkIGhhbmRsZXJzXG4gIGlmICh0aGlzLmV2ZW50S2V5cy5yZWdpc3RlcmVkV2l0aExvY2FsTm9kZSkge1xuICAgIHRoaXMuZXZlbnRLZXlzLnJlZ2lzdGVyZWRXaXRoTG9jYWxOb2RlLnJlbW90ZUNoYW5nZS51bnJlZ2lzdGVyKFxuICAgICAgICB0aGlzLmV2ZW50S2V5cy5yZW1vdGVDaGFuZ2UpO1xuICAgIHRoaXMuZXZlbnRLZXlzLnJlZ2lzdGVyZWRXaXRoTG9jYWxOb2RlID0gbnVsbDtcbiAgfVxuXG4gIC8vIFJlZ2lzdGVyIG5ldyBoYW5kbGVyc1xuICBpZiAobmV3TG9jYWxOb2RlKSB7XG4gICAgdGhpcy5ldmVudEtleXMucmVtb3RlQ2hhbmdlID0gbmV3TG9jYWxOb2RlLnJlbW90ZUNoYW5nZS5yZWdpc3RlcihcbiAgICAgICAgdGhpcy5vblJlbW90ZUNoYW5nZV8uYmluZCh0aGlzKSk7XG4gICAgdGhpcy5ldmVudEtleXMucmVnaXN0ZXJlZFdpdGhMb2NhbE5vZGUgPSBuZXdMb2NhbE5vZGU7XG4gIH1cblxuICAvLyBDcmVhdGUgdml6bm9kZSBmb3IgbG9jYWwgbm9kZVxuICBpZiAobmV3TG9jYWxOb2RlKSB7XG4gICAgaWYgKHRoaXMubG9jYWxOb2RlKSB7XG4gICAgICB0aGlzLmxvY2FsTm9kZS5jb25maWd1cmVGcm9tKG5ld0xvY2FsTm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubG9jYWxOb2RlID0gbmV3IE5ldFNpbVZpelNpbXVsYXRpb25Ob2RlKG5ld0xvY2FsTm9kZSwgU0hPV19CQUNLR1JPVU5EKTtcbiAgICAgIHRoaXMuZWxlbWVudHNfLnB1c2godGhpcy5sb2NhbE5vZGUpO1xuICAgICAgdGhpcy5iYWNrZ3JvdW5kR3JvdXBfLmFwcGVuZCh0aGlzLmxvY2FsTm9kZS5nZXRSb290KCkpO1xuICAgIH1cbiAgICB0aGlzLmxvY2FsTm9kZS5zZXRJc0xvY2FsTm9kZSgpO1xuICB9IGVsc2Uge1xuICAgIGlmICh0aGlzLmxvY2FsTm9kZSkge1xuICAgICAgdGhpcy5sb2NhbE5vZGUua2lsbCgpO1xuICAgICAgdGhpcy5sb2NhbE5vZGUgPSBudWxsO1xuICAgIH1cbiAgfVxuICB0aGlzLnB1bGxFbGVtZW50c1RvRm9yZWdyb3VuZCgpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2hlbmV2ZXIgdGhlIGxvY2FsIG5vZGUgbm90aWZpZXMgdGhhdCB3ZSd2ZSBiZWVuIGNvbm5lY3RlZCB0byxcbiAqIG9yIGRpc2Nvbm5lY3RlZCBmcm9tLCBhIHJvdXRlci5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVZpc3VhbGl6YXRpb24ucHJvdG90eXBlLm9uUmVtb3RlQ2hhbmdlXyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5wdWxsRWxlbWVudHNUb0ZvcmVncm91bmQoKTtcbiAgdGhpcy5kaXN0cmlidXRlRm9yZWdyb3VuZE5vZGVzKCk7XG59O1xuXG4vKipcbiAqIEZpbmQgYSBwYXJ0aWN1bGFyIFZpekVsZW1lbnQgaW4gdGhlIHZpc3VhbGl6YXRpb24sIGJ5IHR5cGUgYW5kIElELlxuICogQHBhcmFtIHtmdW5jdGlvbn0gZWxlbWVudFR5cGUgLSBjb25zdHJ1Y3RvciBvZiBlbGVtZW50IHdlJ3JlIGxvb2tpbmcgZm9yXG4gKiBAcGFyYW0ge251bWJlcn0gZW50aXR5SUQgLSBJRCwgd2l0aCBjb3JyZXNwb25kcyB0byBOZXRTaW1FbnRpdHkuZW50aXR5SURcbiAqIEByZXR1cm5zIHtOZXRTaW1WaXpFbGVtZW50fSBvciB1bmRlZmluZWQgaWYgbm90IGZvdW5kXG4gKi9cbk5ldFNpbVZpc3VhbGl6YXRpb24ucHJvdG90eXBlLmdldEVsZW1lbnRCeUVudGl0eUlEID0gZnVuY3Rpb24gKGVsZW1lbnRUeXBlLCBlbnRpdHlJRCkge1xuICByZXR1cm4gXy5maW5kKHRoaXMuZWxlbWVudHNfLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50IGluc3RhbmNlb2YgZWxlbWVudFR5cGUgJiZcbiAgICAgICAgZWxlbWVudC5nZXRDb3JyZXNwb25kaW5nRW50aXR5SWQgJiZcbiAgICAgICAgZWxlbWVudC5nZXRDb3JyZXNwb25kaW5nRW50aXR5SWQoKSA9PT0gZW50aXR5SUQ7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBHZXRzIHRoZSBzZXQgb2YgVml6V2lyZXMgZGlyZWN0bHkgYXR0YWNoZWQgdG8gdGhlIGdpdmVuIFZpek5vZGUgb25cbiAqIHRoZSBsb2NhbCBlbmQgZm9yIHdoaWNoIHRoZXJlIGFyZSBhbHNvIGNvcnJlc3BvbmRpbmcgVml6V2lyZXMgY29taW5nXG4gKiBmcm9tIHRoZSBvcHBvc2l0ZSBlbmQuIE5vdGUgdGhhdCBpZiB0aGUgVml6Tm9kZSBpcyBhIHJvdXRlciwgd2VcbiAqIGNvbnNpZGVyIGFsbCBhdHRhY2hlZCB3aXJlcyB0byBiZSByZWNpcHJvY2F0ZWQuXG4gKiBAcGFyYW0ge05ldFNpbVZpelNpbXVsYXRpb25Ob2RlfSB2aXpOb2RlXG4gKiBAcmV0dXJucyB7QXJyYXkuPE5ldFNpbVZpelNpbXVsYXRpb25XaXJlPn0gdGhlIGF0dGFjaGVkIHdpcmVzXG4gKi9cbk5ldFNpbVZpc3VhbGl6YXRpb24ucHJvdG90eXBlLmdldFJlY2lwcm9jYXRlZFdpcmVzQXR0YWNoZWRUb05vZGUgPSBmdW5jdGlvbiAodml6Tm9kZSkge1xuXG4gIGlmICh2aXpOb2RlLmlzUm91dGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0V2lyZXNBdHRhY2hlZFRvTm9kZSh2aXpOb2RlKTtcbiAgfVxuXG4gIHZhciBsb2NhbFdpcmVzID0gdGhpcy5nZXRMb2NhbFdpcmVzQXR0YWNoZWRUb05vZGUodml6Tm9kZSk7XG5cbiAgcmV0dXJuIGxvY2FsV2lyZXMuZmlsdGVyKGZ1bmN0aW9uIChsb2NhbFdpcmUpIHtcblxuICAgIGlmIChsb2NhbFdpcmUucmVtb3RlVml6Tm9kZS5pc1JvdXRlcikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZ2V0V2lyZXNBdHRhY2hlZFRvTm9kZShsb2NhbFdpcmUucmVtb3RlVml6Tm9kZSkuc29tZShmdW5jdGlvbiAod2lyZSkge1xuICAgICAgcmV0dXJuIHdpcmUucmVtb3RlVml6Tm9kZSA9PT0gdml6Tm9kZTtcbiAgICB9KTtcblxuICB9LCB0aGlzKTtcbn07XG5cbi8qKlxuICogR2V0cyB0aGUgc2V0IG9mIFZpeldpcmVzIGRpcmVjdGx5IGF0dGFjaGVkIHRvIHRoZSBnaXZlbiBWaXpOb2RlIG9uIHRoZSBsb2NhbCBlbmRcbiAqIEBwYXJhbSB7TmV0U2ltVml6U2ltdWxhdGlvbk5vZGV9IHZpek5vZGVcbiAqIEByZXR1cm5zIHtBcnJheS48TmV0U2ltVml6U2ltdWxhdGlvbldpcmU+fSB0aGUgYXR0YWNoZWQgd2lyZXNcbiAqL1xuTmV0U2ltVmlzdWFsaXphdGlvbi5wcm90b3R5cGUuZ2V0TG9jYWxXaXJlc0F0dGFjaGVkVG9Ob2RlID0gZnVuY3Rpb24gKHZpek5vZGUpIHtcbiAgcmV0dXJuIHRoaXMuZWxlbWVudHNfLmZpbHRlcihmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50IGluc3RhbmNlb2YgTmV0U2ltVml6V2lyZSAmJiBlbGVtZW50LmxvY2FsVml6Tm9kZSA9PT0gdml6Tm9kZTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEdldHMgdGhlIHNldCBvZiBWaXpXaXJlcyBkaXJlY3RseSBhdHRhY2hlZCB0byB0aGUgZ2l2ZW4gVml6Tm9kZSwgKGVpdGhlclxuICogb24gdGhlIGxvY2FsIGVuZCBvciByZW1vdGUgZW5kKVxuICogQHBhcmFtIHtOZXRTaW1WaXpTaW11bGF0aW9uTm9kZX0gdml6Tm9kZVxuICogQHJldHVybnMge0FycmF5LjxOZXRTaW1WaXpTaW11bGF0aW9uV2lyZT59IHRoZSBhdHRhY2hlZCB3aXJlc1xuICovXG5OZXRTaW1WaXN1YWxpemF0aW9uLnByb3RvdHlwZS5nZXRXaXJlc0F0dGFjaGVkVG9Ob2RlID0gZnVuY3Rpb24gKHZpek5vZGUpIHtcbiAgcmV0dXJuIHRoaXMuZWxlbWVudHNfLmZpbHRlcihmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50IGluc3RhbmNlb2YgTmV0U2ltVml6V2lyZSAmJlxuICAgICAgICAoZWxlbWVudC5sb2NhbFZpek5vZGUgPT09IHZpek5vZGUgfHwgZWxlbWVudC5yZW1vdGVWaXpOb2RlID09PSB2aXpOb2RlKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEhhbmRsZSBub3RpZmljYXRpb24gdGhhdCBub2RlIHRhYmxlIGNvbnRlbnRzIGhhdmUgY2hhbmdlZC5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVZpc3VhbGl6YXRpb24ucHJvdG90eXBlLm9uTm9kZVRhYmxlQ2hhbmdlXyA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gQ29udmVydCByb3dzIHRvIGNvcnJlY3RseS10eXBlZCBvYmplY3RzXG4gIHZhciB0YWJsZU5vZGVzID0gTmV0U2ltTm9kZUZhY3Rvcnkubm9kZXNGcm9tUm93cyh0aGlzLnNoYXJkXyxcbiAgICAgIHRoaXMuc2hhcmRfLm5vZGVUYWJsZS5yZWFkQWxsKCkpO1xuXG4gIC8vIFVwZGF0ZSBjb2xsZWN0aW9uIG9mIFZpek5vZGVzIGZyb20gc291cmNlIGRhdGFcbiAgdGhpcy51cGRhdGVWaXpFbnRpdGllc09mVHlwZV8oTmV0U2ltVml6U2ltdWxhdGlvbk5vZGUsIHRhYmxlTm9kZXMsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgdmFyIG5ld1Zpek5vZGUgPSBuZXcgTmV0U2ltVml6U2ltdWxhdGlvbk5vZGUobm9kZSwgU0hPV19CQUNLR1JPVU5EKTtcbiAgICBuZXdWaXpOb2RlLnNldERuc01vZGUodGhpcy5kbnNNb2RlXyk7XG4gICAgbmV3Vml6Tm9kZS5zbmFwVG9Qb3NpdGlvbihcbiAgICAgICAgTWF0aC5yYW5kb20oKSAqIHRoaXMudmlzdWFsaXphdGlvbldpZHRoIC0gKHRoaXMudmlzdWFsaXphdGlvbldpZHRoIC8gMiksXG4gICAgICAgIE1hdGgucmFuZG9tKCkgKiB0aGlzLnZpc3VhbGl6YXRpb25IZWlnaHQgLSAodGhpcy52aXN1YWxpemF0aW9uSGVpZ2h0IC8gMikpO1xuICAgIHJldHVybiBuZXdWaXpOb2RlO1xuICB9LmJpbmQodGhpcykpO1xufTtcblxuLyoqXG4gKiBIYW5kbGUgbm90aWZpY2F0aW9uIHRoYXQgd2lyZSB0YWJsZSBjb250ZW50cyBoYXZlIGNoYW5nZWQuXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1WaXN1YWxpemF0aW9uLnByb3RvdHlwZS5vbldpcmVUYWJsZUNoYW5nZV8gPSBmdW5jdGlvbiAoKSB7XG4gIC8vIENvbnZlcnQgcm93cyB0byBjb3JyZWN0bHktdHlwZWQgb2JqZWN0c1xuICB2YXIgdGFibGVXaXJlcyA9IHRoaXMuc2hhcmRfLndpcmVUYWJsZS5yZWFkQWxsKCkubWFwKGZ1bmN0aW9uIChyb3cpIHtcbiAgICByZXR1cm4gbmV3IE5ldFNpbVdpcmUodGhpcy5zaGFyZF8sIHJvdyk7XG4gIH0sIHRoaXMpO1xuXG4gIC8vIFVwZGF0ZSBjb2xsZWN0aW9uIG9mIFZpeldpcmVzIGZyb20gc291cmNlIGRhdGFcbiAgdGhpcy51cGRhdGVWaXpFbnRpdGllc09mVHlwZV8oTmV0U2ltVml6U2ltdWxhdGlvbldpcmUsIHRhYmxlV2lyZXMsIGZ1bmN0aW9uICh3aXJlKSB7XG4gICAgdmFyIG5ld1ZpeldpcmUgPSBuZXcgTmV0U2ltVml6U2ltdWxhdGlvbldpcmUod2lyZSxcbiAgICAgICAgdGhpcy5nZXRFbGVtZW50QnlFbnRpdHlJRC5iaW5kKHRoaXMpKTtcbiAgICBuZXdWaXpXaXJlLnNldEVuY29kaW5ncyh0aGlzLmVuY29kaW5nc18pO1xuICAgIHJldHVybiBuZXdWaXpXaXJlO1xuICB9LmJpbmQodGhpcykpO1xuXG4gIC8vIEluIGJyb2FkY2FzdCBtb2RlIHdlIGhpZGUgdGhlIHJlYWwgd2lyZXMgYW5kIHJvdXRlciwgYW5kIG92ZXJsYXkgYSBzZXRcbiAgLy8gb2YgZmFrZSB3aXJlcyBzaG93aW5nIGV2ZXJ5Ym9keSBjb25uZWN0ZWQgdG8gZXZlcnlib2R5IGVsc2UuXG4gIGlmIChOZXRTaW1HbG9iYWxzLmdldExldmVsQ29uZmlnKCkuYnJvYWRjYXN0TW9kZSkge1xuICAgIHRoaXMudXBkYXRlQnJvYWRjYXN0TW9kZVdpcmVzXygpO1xuICB9XG5cbiAgLy8gU2luY2UgdGhlIHdpcmVzIHRhYmxlIGRldGVybWluZXMgc2ltdWxhdGVkIGNvbm5lY3Rpdml0eSwgd2UgdHJpZ2dlciBhXG4gIC8vIHJlY2FsY3VsYXRpb24gb2Ygd2hpY2ggbm9kZXMgYXJlIGluIHRoZSBsb2NhbCBuZXR3b3JrIChzaG91bGQgYmUgaW4gdGhlXG4gIC8vIGZvcmVncm91bmQpIGFuZCB0aGVuIHJlLWxheW91dCB0aGUgZm9yZWdyb3VuZCBub2Rlcy5cbiAgdGhpcy5wdWxsRWxlbWVudHNUb0ZvcmVncm91bmQoKTtcbiAgdGhpcy5kaXN0cmlidXRlRm9yZWdyb3VuZE5vZGVzKCk7XG59O1xuXG4vKipcbiAqIEJhc2VkIG9uIG5ldyBjb25uZWN0aXZpdHkgaW5mb3JtYXRpb24sIHJlY2FsY3VsYXRlIHdoaWNoICdmYWtlJyBjb25uZWN0aW9uc1xuICogd2UgbmVlZCB0byBkaXNwbGF5IHRvIHNob3cgYWxsIG5vZGVzIGluIGEgJ3Jvb20nIGhhdmluZyBkaXJlY3Qgd2lyZXMgdG9cbiAqIG9uZSBhbm90aGVyLlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltVmlzdWFsaXphdGlvbi5wcm90b3R5cGUudXBkYXRlQnJvYWRjYXN0TW9kZVdpcmVzXyA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gS2lsbCBhbGwgZmFrZSB3aXJlc1xuICB0aGlzLmVsZW1lbnRzXy5mb3JFYWNoKGZ1bmN0aW9uICh2aXpFbGVtZW50KSB7XG4gICAgaWYgKHZpekVsZW1lbnQgaW5zdGFuY2VvZiBOZXRTaW1WaXpXaXJlICYmXG4gICAgICAgICEodml6RWxlbWVudCBpbnN0YW5jZW9mIE5ldFNpbVZpelNpbXVsYXRpb25XaXJlKSkge1xuICAgICAgdml6RWxlbWVudC5raWxsKCk7XG4gICAgfVxuICB9LCB0aGlzKTtcblxuICAvLyBHZW5lcmF0ZSBuZXcgd2lyZXNcbiAgdmFyIGNvbm5lY3Rpb25zID0gdGhpcy5nZW5lcmF0ZUJyb2FkY2FzdE1vZGVDb25uZWN0aW9uc18oKTtcbiAgY29ubmVjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoY29ubmVjdGVkUGFpcikge1xuICAgIHZhciBuZXdGYWtlV2lyZSA9IG5ldyBOZXRTaW1WaXpXaXJlKGNvbm5lY3RlZFBhaXIubm9kZUEsIGNvbm5lY3RlZFBhaXIubm9kZUIpO1xuICAgIHRoaXMuYWRkVml6RWxlbWVudF8obmV3RmFrZVdpcmUpO1xuICB9LCB0aGlzKTtcbn07XG5cbi8qKlxuICogVXNpbmcgdGhlIGNhY2hlZCBub2RlIGFuZCB3aXJlIGRhdGEsIGdlbmVyYXRlcyB0aGUgc2V0IG9mIGFsbCBub2RlIHBhaXJzIChBLEIpXG4gKiBvbiB0aGUgc2hhcmQgc3VjaCB0aGF0IGJvdGggQSBhbmQgQiBhcmUgY2xpZW50IG5vZGVzLCBhbmQgQSBpcyByZWFjaGFibGVcbiAqIGZyb20gQi5cbiAqIEByZXR1cm5zIHtBcnJheS48e25vZGVBOntudW1iZXJ9LCBub2RlQjp7bnVtYmVyfX0+fVxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltVmlzdWFsaXphdGlvbi5wcm90b3R5cGUuZ2VuZXJhdGVCcm9hZGNhc3RNb2RlQ29ubmVjdGlvbnNfID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbm9kZVJvd3MgPSB0aGlzLnNoYXJkXy5ub2RlVGFibGUucmVhZEFsbCgpO1xuICB2YXIgd2lyZVJvd3MgPSB0aGlzLnNoYXJkXy53aXJlVGFibGUucmVhZEFsbCgpO1xuICB2YXIgbm9kZUNvdW50ID0gbm9kZVJvd3MubGVuZ3RoO1xuXG4gIC8vIEdlbmVyYXRlIGEgcmV2ZXJzZSBtYXBwaW5nIGZvciBsb29rdXBzXG4gIHZhciBub2RlSURUb0luZGV4ID0ge307XG4gIGZvciAodmFyIG1hdHJpeEluZGV4ID0gMDsgbWF0cml4SW5kZXggPCBub2RlQ291bnQ7IG1hdHJpeEluZGV4KyspIHtcbiAgICBub2RlSURUb0luZGV4W25vZGVSb3dzW21hdHJpeEluZGV4XS5pZF0gPSBtYXRyaXhJbmRleDtcbiAgfVxuXG4gIC8vIEdlbmVyYXRlIGVtcHR5IGdyYXBoIG1hdHJpeCBpbml0aWFsaXplZCB3aXRoIG5vIGNvbm5lY3Rpb25zLlxuICB2YXIgZ3JhcGggPSBuZXcgQXJyYXkobm9kZUNvdW50KTtcbiAgZm9yICh2YXIgeCA9IDA7IHggPCBub2RlQ291bnQ7IHgrKykge1xuICAgIGdyYXBoW3hdID0gbmV3IEFycmF5KG5vZGVDb3VudCk7XG4gICAgZm9yICh2YXIgeSA9IDA7IHkgPCBub2RlQ291bnQ7IHkrKykge1xuICAgICAgZ3JhcGhbeF1beV0gPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvLyBBcHBseSByZWFsIGNvbm5lY3Rpb25zICh3aXJlcykgdG8gdGhlIGdyYXBoIG1hdHJpeFxuICB3aXJlUm93cy5mb3JFYWNoKGZ1bmN0aW9uICh3aXJlUm93KSB7XG4gICAgdmFyIGxvY2FsTm9kZUluZGV4ID0gbm9kZUlEVG9JbmRleFt3aXJlUm93LmxvY2FsTm9kZUlEXTtcbiAgICB2YXIgcmVtb3RlTm9kZUluZGV4ID0gbm9kZUlEVG9JbmRleFt3aXJlUm93LnJlbW90ZU5vZGVJRF07XG4gICAgaWYgKGxvY2FsTm9kZUluZGV4ICE9PSB1bmRlZmluZWQgJiYgcmVtb3RlTm9kZUluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGdyYXBoW2xvY2FsTm9kZUluZGV4XVtyZW1vdGVOb2RlSW5kZXhdID0gdHJ1ZTtcbiAgICAgIGdyYXBoW3JlbW90ZU5vZGVJbmRleF1bbG9jYWxOb2RlSW5kZXhdID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIFVzZSBzaW1wbGUgRmxveWQtV2Fyc2hhbGwgdG8gY29tcGxldGUgdGhlIHRyYW5zaXRpdmUgY2xvc3VyZSBncmFwaFxuICBmb3IgKHZhciBrID0gMDsgayA8IG5vZGVDb3VudDsgaysrKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlQ291bnQ7IGkrKykge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBub2RlQ291bnQ7IGorKykge1xuICAgICAgICBpZiAoZ3JhcGhbaV1ba10gJiYgZ3JhcGhba11bal0pIHtcbiAgICAgICAgICBncmFwaFtpXVtqXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBOb3csIGdlbmVyYXRlIHVuaXF1ZSBwYWlycyBkb2luZyBsb29rdXAgb24gb3VyIHRyYW5zaXRpdmUgY2xvc3VyZSBncmFwaFxuICB2YXIgY29ubmVjdGlvbnMgPSBbXTtcbiAgZm9yICh2YXIgZnJvbSA9IDA7IGZyb20gPCBub2RlQ291bnQgLSAxOyBmcm9tKyspIHtcbiAgICBmb3IgKHZhciB0byA9IGZyb20gKyAxOyB0byA8IG5vZGVDb3VudDsgdG8rKykge1xuICAgICAgLy8gbGVhdmUgcm91dGVyIGNvbm5lY3Rpb25zIG91dCBvZiB0aGlzIGxpc3RcbiAgICAgIHZhciBjbGllbnRUb0NsaWVudCA9IChub2RlUm93c1tmcm9tXS50eXBlID09PSBOb2RlVHlwZS5DTElFTlQgJiZcbiAgICAgICAgICBub2RlUm93c1t0b10udHlwZSA9PT0gTm9kZVR5cGUuQ0xJRU5UKTtcbiAgICAgIC8vIE11c3QgYmUgcmVhY2hhYmxlXG4gICAgICB2YXIgcmVhY2hhYmxlID0gZ3JhcGhbZnJvbV1bdG9dO1xuICAgICAgaWYgKGNsaWVudFRvQ2xpZW50ICYmIHJlYWNoYWJsZSkge1xuICAgICAgICBjb25uZWN0aW9ucy5wdXNoKHtcbiAgICAgICAgICBub2RlQTogdGhpcy5nZXRFbGVtZW50QnlFbnRpdHlJRChOZXRTaW1WaXpTaW11bGF0aW9uTm9kZSwgbm9kZVJvd3NbZnJvbV0uaWQpLFxuICAgICAgICAgIG5vZGVCOiB0aGlzLmdldEVsZW1lbnRCeUVudGl0eUlEKE5ldFNpbVZpelNpbXVsYXRpb25Ob2RlLCBub2RlUm93c1t0b10uaWQpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gY29ubmVjdGlvbnM7XG59O1xuXG4vKipcbiAqIENvbXBhcmVzIFZpekVudGl0aWVzIG9mIHRoZSBnaXZlbiB0eXBlIHRoYXQgYXJlIGN1cnJlbnRseSBpbiB0aGVcbiAqIHZpc3VhbGl6YXRpb24gdG8gdGhlIHNvdXJjZSBkYXRhIGdpdmVuLCBhbmQgY3JlYXRlcy91cGRhdGVzL3JlbW92ZXNcbiAqIFZpekVudGl0aWVzIHNvIHRoYXQgdGhlIHZpc3VhbGl6YXRpb24gcmVmbGVjdHMgdGhlIG5ldyBzb3VyY2UgZGF0YS5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSB2aXpFbGVtZW50VHlwZVxuICogQHBhcmFtIHtBcnJheS48TmV0U2ltRW50aXR5Pn0gZW50aXR5Q29sbGVjdGlvblxuICogQHBhcmFtIHtmdW5jdGlvbn0gY3JlYXRpb25NZXRob2RcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVZpc3VhbGl6YXRpb24ucHJvdG90eXBlLnVwZGF0ZVZpekVudGl0aWVzT2ZUeXBlXyA9IGZ1bmN0aW9uIChcbiAgICB2aXpFbGVtZW50VHlwZSwgZW50aXR5Q29sbGVjdGlvbiwgY3JlYXRpb25NZXRob2QpIHtcblxuICAvLyAxLiBLaWxsIFZpekVudGl0aWVzIHRoYXQgYXJlIG5vIGxvbmdlciBpbiB0aGUgc291cmNlIGRhdGFcbiAgdGhpcy5raWxsVml6RW50aXRpZXNPZlR5cGVNaXNzaW5nTWF0Y2hfKHZpekVsZW1lbnRUeXBlLCBlbnRpdHlDb2xsZWN0aW9uKTtcblxuICBlbnRpdHlDb2xsZWN0aW9uLmZvckVhY2goZnVuY3Rpb24gKGVudGl0eSkge1xuICAgIHZhciB2aXpFbGVtZW50ID0gdGhpcy5nZXRFbGVtZW50QnlFbnRpdHlJRCh2aXpFbGVtZW50VHlwZSwgZW50aXR5LmVudGl0eUlEKTtcbiAgICBpZiAodml6RWxlbWVudCkge1xuICAgICAgLy8gMi4gVXBkYXRlIGV4aXN0aW5nIFZpekVudGl0aWVzIGZyb20gdGhlaXIgc291cmNlIGRhdGFcbiAgICAgIHZpekVsZW1lbnQuY29uZmlndXJlRnJvbShlbnRpdHkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyAzLiBDcmVhdGUgbmV3IFZpekVudGl0aWVzIGZvciBuZXcgc291cmNlIGRhdGFcbiAgICAgIHRoaXMuYWRkVml6RWxlbWVudF8oY3JlYXRpb25NZXRob2QoZW50aXR5KSk7XG4gICAgfVxuICB9LCB0aGlzKTtcbn07XG5cbi8qKlxuICogQ2FsbCBraWxsKCkgb24gYW55IHZpemVudGl0aWVzIHRoYXQgbWF0Y2ggdGhlIGdpdmVuIHR5cGUgYW5kIGRvbid0IG1hcCB0b1xuICogYSBOZXRTaW1FbnRpdHkgaW4gdGhlIHByb3ZpZGVkIGNvbGxlY3Rpb24uXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSB2aXpFbGVtZW50VHlwZVxuICogQHBhcmFtIHtBcnJheS48TmV0U2ltRW50aXR5Pn0gZW50aXR5Q29sbGVjdGlvblxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltVmlzdWFsaXphdGlvbi5wcm90b3R5cGUua2lsbFZpekVudGl0aWVzT2ZUeXBlTWlzc2luZ01hdGNoXyA9IGZ1bmN0aW9uIChcbiAgICB2aXpFbGVtZW50VHlwZSwgZW50aXR5Q29sbGVjdGlvbikge1xuICB0aGlzLmVsZW1lbnRzXy5mb3JFYWNoKGZ1bmN0aW9uICh2aXpFbGVtZW50KSB7XG4gICAgdmFyIGlzQ29ycmVjdFR5cGUgPSAodml6RWxlbWVudCBpbnN0YW5jZW9mIHZpekVsZW1lbnRUeXBlKTtcbiAgICB2YXIgZm91bmRNYXRjaCA9IGVudGl0eUNvbGxlY3Rpb24uc29tZShmdW5jdGlvbiAoZW50aXR5KSB7XG4gICAgICByZXR1cm4gdml6RWxlbWVudC5yZXByZXNlbnRzRW50aXR5ICYmIHZpekVsZW1lbnQucmVwcmVzZW50c0VudGl0eShlbnRpdHkpO1xuICAgIH0pO1xuXG4gICAgaWYgKGlzQ29ycmVjdFR5cGUgJiYgIWZvdW5kTWF0Y2gpIHtcbiAgICAgIHZpekVsZW1lbnQua2lsbCgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIEFkZHMgYSBWaXpFbGVtZW50IHRvIHRoZSB2aXN1YWxpemF0aW9uLlxuICogQHBhcmFtIHtOZXRTaW1WaXpFbGVtZW50fSB2aXpFbGVtZW50XG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1WaXN1YWxpemF0aW9uLnByb3RvdHlwZS5hZGRWaXpFbGVtZW50XyA9IGZ1bmN0aW9uICh2aXpFbGVtZW50KSB7XG4gIHRoaXMuZWxlbWVudHNfLnB1c2godml6RWxlbWVudCk7XG4gIHRoaXMuYmFja2dyb3VuZEdyb3VwXy5wcmVwZW5kKHZpekVsZW1lbnQuZ2V0Um9vdCgpKTtcbn07XG5cbi8qKlxuICogSWYgd2UgZG8gbmVlZCBhIERPTSBjaGFuZ2UsIGRldGFjaCB0aGUgZWxlbWVudCBhbmQgcmVhdHRhY2ggaXQgdG8gdGhlIG5ld1xuICogbGF5ZXIuIFNwZWNpYWwgcnVsZSAoZm9yIG5vdyk6IFByZXBlbmQgd2lyZXMgc28gdGhhdCB0aGV5IHNob3cgdXAgYmVoaW5kXG4gKiBub2Rlcy4gIFdpbGwgbmVlZCBhIGJldHRlciBzb2x1dGlvbiBmb3IgdGhpcyBpZi93aGVuIHRoZSB2aXogZ2V0cyBtb3JlXG4gKiBjb21wbGV4LlxuICogQHBhcmFtIHtOZXRTaW1WaXpFbGVtZW50fSB2aXpFbGVtZW50XG4gKiBAcGFyYW0ge2pRdWVyeX0gbmV3UGFyZW50XG4gKi9cbnZhciBtb3ZlVml6RWxlbWVudFRvR3JvdXAgPSBmdW5jdGlvbiAodml6RWxlbWVudCwgbmV3UGFyZW50KSB7XG4gIHZpekVsZW1lbnQuZ2V0Um9vdCgpLmRldGFjaCgpO1xuICBpZiAodml6RWxlbWVudCBpbnN0YW5jZW9mIE5ldFNpbVZpeldpcmUpIHtcbiAgICB2aXpFbGVtZW50LmdldFJvb3QoKS5wcmVwZW5kVG8obmV3UGFyZW50KTtcbiAgfSBlbHNlIHtcbiAgICB2aXpFbGVtZW50LmdldFJvb3QoKS5hcHBlbmRUbyhuZXdQYXJlbnQpO1xuICB9XG59O1xuXG4vKipcbiAqIFJlY2FsY3VsYXRlIHdoaWNoIG5vZGVzIHNob3VsZCBiZSBpbiB0aGUgZm9yZWdyb3VuZCBsYXllciBieSBkb2luZyBhIGZ1bGxcbiAqIHRyYXZlcnNhbCBzdGFydGluZyB3aXRoIHRoZSBsb2NhbCBub2RlLiAgSW4gc2hvcnQsIGV2ZXJ5dGhpbmcgcmVhY2hhYmxlXG4gKiBmcm9tIHRoZSBsb2NhbCBub2RlIGJlbG9uZ3MgaW4gdGhlIGZvcmVncm91bmQuXG4gKi9cbk5ldFNpbVZpc3VhbGl6YXRpb24ucHJvdG90eXBlLnB1bGxFbGVtZW50c1RvRm9yZWdyb3VuZCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gQmVnaW4gYnkgbWFya2luZyBhbGwgZW50aXRpZXMgYmFja2dyb3VuZCAodW52aXNpdGVkKVxuICB0aGlzLmVsZW1lbnRzXy5mb3JFYWNoKGZ1bmN0aW9uICh2aXpFbGVtZW50KSB7XG4gICAgdml6RWxlbWVudC52aXNpdGVkID0gZmFsc2U7XG4gIH0pO1xuXG4gIHZhciB0b0V4cGxvcmUgPSBbXTtcbiAgaWYgKHRoaXMubG9jYWxOb2RlKSB7XG4gICAgdG9FeHBsb3JlLnB1c2godGhpcy5sb2NhbE5vZGUpO1xuICB9XG5cbiAgLy8gV2hpbGUgdGhlcmUgYXJlIHN0aWxsIG5vZGVzIHRoYXQgbmVlZCB2aXNpdGluZyxcbiAgLy8gdmlzaXQgdGhlIG5leHQgbm9kZSwgbWFya2luZyBpdCBhcyBcImZvcmVncm91bmQvdmlzaXRlZFwiIGFuZFxuICAvLyBwdXNoaW5nIGFsbCBvZiBpdHMgdW52aXNpdGVkIGNvbm5lY3Rpb25zIG9udG8gdGhlIHN0YWNrLlxuICB2YXIgY3VycmVudFZpekVsZW1lbnQ7XG4gIHdoaWxlICh0b0V4cGxvcmUubGVuZ3RoID4gMCkge1xuICAgIGN1cnJlbnRWaXpFbGVtZW50ID0gdG9FeHBsb3JlLnBvcCgpO1xuICAgIGN1cnJlbnRWaXpFbGVtZW50LnZpc2l0ZWQgPSB0cnVlO1xuICAgIHRvRXhwbG9yZSA9IHRvRXhwbG9yZS5jb25jYXQodGhpcy5nZXRVbnZpc2l0ZWROZWlnaGJvcnNPZl8oY3VycmVudFZpekVsZW1lbnQpKTtcbiAgfVxuXG4gIC8vIE5vdywgdmlzaXRlZCBub2RlcyBiZWxvbmcgaW4gdGhlIGZvcmVncm91bmQuXG4gIC8vIE1vdmUgYWxsIG5vZGVzIHRvIHRoZWlyIG5ldywgY29ycmVjdCBsYXllcnNcbiAgLy8gUG9zc2libGUgb3B0aW1pemF0aW9uOiBDYW4gd2UgZG8gdGhpcyB3aXRoIGp1c3Qgb25lIG9wZXJhdGlvbiBvbiB0aGUgbGl2ZSBET00/XG4gIHZhciBmb3JlZ3JvdW5kID0gdGhpcy5mb3JlZ3JvdW5kR3JvdXBfO1xuICB2YXIgYmFja2dyb3VuZCA9IHRoaXMuYmFja2dyb3VuZEdyb3VwXztcbiAgdGhpcy5lbGVtZW50c18uZm9yRWFjaChmdW5jdGlvbiAodml6RWxlbWVudCkge1xuICAgIHZhciBpc0ZvcmVncm91bmQgPSAkLmNvbnRhaW5zKGZvcmVncm91bmRbMF0sIHZpekVsZW1lbnQuZ2V0Um9vdCgpWzBdKTtcblxuICAgIC8vIENoZWNrIHdoZXRoZXIgYSBjaGFuZ2Ugc2hvdWxkIG9jY3VyLiAgSWYgbm90LCB3ZSBsZWF2ZVxuICAgIC8vIG5ld1BhcmVudCB1bmRlZmluZWQgc28gdGhhdCB3ZSBkb24ndCBtYWtlIHVubmVlZGVkIERPTSBjaGFuZ2VzLlxuICAgIGlmICh2aXpFbGVtZW50LnZpc2l0ZWQgJiYgIWlzRm9yZWdyb3VuZCkge1xuICAgICAgbW92ZVZpekVsZW1lbnRUb0dyb3VwKHZpekVsZW1lbnQsIGZvcmVncm91bmQpO1xuICAgICAgdml6RWxlbWVudC5vbkRlcHRoQ2hhbmdlKHRydWUpO1xuICAgIH0gZWxzZSBpZiAoIXZpekVsZW1lbnQudmlzaXRlZCAmJiBpc0ZvcmVncm91bmQpIHtcbiAgICAgIG1vdmVWaXpFbGVtZW50VG9Hcm91cCh2aXpFbGVtZW50LCBiYWNrZ3JvdW5kKTtcbiAgICAgIHZpekVsZW1lbnQub25EZXB0aENoYW5nZShmYWxzZSk7XG4gICAgfVxuICB9LCB0aGlzKTtcblxuICB0aGlzLnVwZGF0ZUF1dG9EbnNOb2RlKCk7XG59O1xuXG4vKipcbiAqIFZpc2l0IG1ldGhvZCBmb3IgcHVsbEVsZW1lbnRzVG9Gb3JlZ3JvdW5kLCBub3QgdXNlZCBhbnl3aGVyZSBlbHNlLlxuICogTm90ZXMgdGhhdCB0aGUgY3VycmVudCBlbGVtZW50IGlzIHNob3VsZCBiZSBmb3JlZ3JvdW5kIHdoZW4gd2UncmUgYWxsIGRvbmUsXG4gKiBmaW5kcyB0aGUgY3VycmVudCBlbGVtZW50J3MgdW52aXNpdGVkIGNvbm5lY3Rpb25zLFxuICogcHVzaGVzIHRob3NlIGNvbm5lY3Rpb25zIG9udG8gdGhlIHN0YWNrLlxuICogQHBhcmFtIHtOZXRTaW1WaXpTaW11bGF0aW9uTm9kZXxOZXRTaW1WaXpTaW11bGF0aW9uV2lyZX0gdml6RWxlbWVudFxuICogQHJldHVybnMge0FycmF5LjxOZXRTaW1WaXpFbGVtZW50Pn1cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVZpc3VhbGl6YXRpb24ucHJvdG90eXBlLmdldFVudmlzaXRlZE5laWdoYm9yc09mXyA9IGZ1bmN0aW9uICh2aXpFbGVtZW50KSB7XG4gIC8vIEZpbmQgbmV3IGVudGl0aWVzIHRvIGV4cGxvcmUgYmFzZWQgb24gbm9kZSB0eXBlIGFuZCBjb25uZWN0aW9uc1xuICB2YXIgbmVpZ2hib3JzID0gW107XG5cbiAgaWYgKHZpekVsZW1lbnQgaW5zdGFuY2VvZiBOZXRTaW1WaXpTaW11bGF0aW9uTm9kZSkge1xuXG4gICAgLy8gSW4gYnJvYWRjYXN0IG1vZGUgd2UgZGlzcGxheSBcImZha2UsXCIgdW5pZGlyZWN0aW9uYWwgd2lyZXMuIEluXG4gICAgLy8gcmVndWxhciBtb2RlLCB3ZSBvbmx5IHdhbnQgdG8gZGlzcGxheSB3aXJlcyBjb25uZWN0aW5nIHVzIHRvXG4gICAgLy8gbm9kZXMgdGhhdCBhcmUgYWxzbyBjb25uZWN0ZWQgYmFjay5cbiAgICBpZiAoTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpLmJyb2FkY2FzdE1vZGUpIHtcbiAgICAgIG5laWdoYm9ycyA9IHRoaXMuZ2V0V2lyZXNBdHRhY2hlZFRvTm9kZSh2aXpFbGVtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmVpZ2hib3JzID0gdGhpcy5nZXRSZWNpcHJvY2F0ZWRXaXJlc0F0dGFjaGVkVG9Ob2RlKHZpekVsZW1lbnQpO1xuICAgIH1cblxuICAgIC8vIFNwZWNpYWwgY2FzZTogVGhlIEROUyBub2RlIGZha2UgaXMgYSBuZWlnaGJvciBvZiBhIHZpc2l0ZWQgcm91dGVyXG4gICAgaWYgKHZpekVsZW1lbnQuaXNSb3V0ZXIgJiYgdGhpcy5hdXRvRG5zTm9kZV8pIHtcbiAgICAgIG5laWdoYm9ycy5wdXNoKHRoaXMuYXV0b0Ruc05vZGVfKTtcbiAgICAgIG5laWdoYm9ycy5wdXNoKHRoaXMuYXV0b0Ruc1dpcmVfKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodml6RWxlbWVudCBpbnN0YW5jZW9mIE5ldFNpbVZpeldpcmUpIHtcbiAgICBpZiAodml6RWxlbWVudC5sb2NhbFZpek5vZGUpIHtcbiAgICAgIG5laWdoYm9ycy5wdXNoKHZpekVsZW1lbnQubG9jYWxWaXpOb2RlKTtcbiAgICB9XG5cbiAgICBpZiAodml6RWxlbWVudC5yZW1vdGVWaXpOb2RlKSB7XG4gICAgICBuZWlnaGJvcnMucHVzaCh2aXpFbGVtZW50LnJlbW90ZVZpek5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZWlnaGJvcnMuZmlsdGVyKGZ1bmN0aW9uICh2aXpFbGVtZW50KSB7XG4gICAgcmV0dXJuICF2aXpFbGVtZW50LnZpc2l0ZWQ7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBFeHBsaWNpdGx5IGNvbnRyb2wgVml6Tm9kZXMgaW4gdGhlIGZvcmVncm91bmQsIG1vdmluZyB0aGVtIGludG8gYSBkZXNpcmVkXG4gKiBjb25maWd1cmF0aW9uIGJhc2VkIG9uIHRoZWlyIG51bWJlciBhbmQgdHlwZXMuICBOb2RlcyBhcmUgZ2l2ZW4gYW5pbWF0aW9uXG4gKiBjb21tYW5kcyAodmlhIHR3ZWVuVG9Qb3NpdGlvbikgc28gdGhhdCB0aGV5IGludGVycG9sYXRlIG5pY2VseSB0byB0aGVpciB0YXJnZXRcbiAqIHBvc2l0aW9ucy5cbiAqXG4gKiBDb25maWd1cmF0aW9uczpcbiAqIE9uZSBub2RlIChsb2NhbCBub2RlKTogQ2VudGVyZWQgb24gdGhlIHNjcmVlbi5cbiAqICAgfCAgTCAgfFxuICpcbiAqIFR3byBub2RlczogTG9jYWwgbm9kZSBvbiBsZWZ0LCByZW1vdGUgbm9kZSBvbiByaWdodCwgbm90aGluZyBpbiB0aGUgbWlkZGxlLlxuICogICB8IEwtUiB8XG4gKlxuICogVGhyZWUgb3IgbW9yZSBub2RlczogTG9jYWwgbm9kZSBvbiBsZWZ0LCByb3V0ZXIgaW4gdGhlIG1pZGRsZSwgb3RoZXJcbiAqIG5vZGVzIGRpc3RyaWJ1dGVkIGV2ZW5seSBhcm91bmQgdGhlIHJvdXRlciBpbiBhIGNpcmNsZVxuICogMzogICAgICAgICA0OiAgICBPICAgIDU6ICBPICAgICAgNjpPICAgTyAgICA3Ok8gICBPXG4gKiAgICAgICAgICAgICAgICAgLyAgICAgICAgIHwgICAgICAgICBcXCAvICAgICAgICBcXCAvXG4gKiAgIEwtUi0wICAgICAgTC1SICAgICAgICBMLVItTyAgICAgIEwtUiAgICAgICAgTC1SLU9cbiAqICAgICAgICAgICAgICAgICBcXCAgICAgICAgIHwgICAgICAgICAvIFxcICAgICAgICAvIFxcXG4gKiAgICAgICAgICAgICAgICAgIE8gICAgICAgIE8gICAgICAgIE8gICBPICAgICAgTyAgIE9cbiAqL1xuTmV0U2ltVmlzdWFsaXphdGlvbi5wcm90b3R5cGUuZGlzdHJpYnV0ZUZvcmVncm91bmROb2RlcyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKS5icm9hZGNhc3RNb2RlKSB7XG4gICAgdGhpcy5kaXN0cmlidXRlRm9yZWdyb3VuZE5vZGVzRm9yQnJvYWRjYXN0XygpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKiBAdHlwZSB7QXJyYXkuPE5ldFNpbVZpelNpbXVsYXRpb25Ob2RlPn0gKi9cbiAgdmFyIGZvcmVncm91bmROb2RlcyA9IHRoaXMuZWxlbWVudHNfLmZpbHRlcihmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50IGluc3RhbmNlb2YgTmV0U2ltVml6Tm9kZSAmJiBlbGVtZW50LmlzRm9yZWdyb3VuZDtcbiAgfSk7XG5cbiAgLy8gU29tZXRpbWVzLCB0aGVyZSdzIG5vIHdvcmsgdG8gZG8uXG4gIGlmIChmb3JlZ3JvdW5kTm9kZXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gT25lIG5vZGU6IENlbnRlcmVkIG9uIHNjcmVlblxuICBpZiAoZm9yZWdyb3VuZE5vZGVzLmxlbmd0aCA9PT0gMSkge1xuICAgIGZvcmVncm91bmROb2Rlc1swXS50d2VlblRvUG9zaXRpb24oMCwgMCwgNjAwLCB0d2VlbnMuZWFzZU91dFF1YWQpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBteU5vZGU7XG5cbiAgLy8gVHdvIG5vZGVzOiBQbGFjZWQgYWNyb3NzIGZyb20gZWFjaCBvdGhlciwgbG9jYWwgbm9kZSBvbiBsZWZ0XG4gIGlmIChmb3JlZ3JvdW5kTm9kZXMubGVuZ3RoID09PSAyKSB7XG4gICAgbXlOb2RlID0gdGhpcy5sb2NhbE5vZGU7XG4gICAgdmFyIG90aGVyTm9kZSA9IF8uZmluZChmb3JlZ3JvdW5kTm9kZXMsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICByZXR1cm4gbm9kZSAhPT0gbXlOb2RlO1xuICAgIH0pO1xuICAgIG15Tm9kZS50d2VlblRvUG9zaXRpb24oLTc1LCAwLCA0MDAsIHR3ZWVucy5lYXNlT3V0UXVhZCk7XG4gICAgb3RoZXJOb2RlLnR3ZWVuVG9Qb3NpdGlvbig3NSwgMCwgNjAwLCB0d2VlbnMuZWFzZU91dFF1YWQpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFRocmVlIG9yIG1vcmUgbm9kZXM6XG4gIC8vICogTG9jYWwgbm9kZSBvbiBsZWZ0XG4gIC8vICogUm91dGVyIGluIHRoZSBtaWRkbGVcbiAgLy8gKiBPdGhlciBub2RlcyBldmVubHkgZGlzdHJpYnV0ZWQgaW4gYSBjaXJjbGVcbiAgbXlOb2RlID0gdGhpcy5sb2NhbE5vZGU7XG4gIHZhciByb3V0ZXJOb2RlID0gXy5maW5kKGZvcmVncm91bmROb2RlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5pc1JvdXRlcjtcbiAgfSk7XG4gIHZhciBvdGhlck5vZGVzID0gZm9yZWdyb3VuZE5vZGVzLmZpbHRlcihmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiBub2RlICE9PSBteU5vZGUgJiYgbm9kZSAhPT0gcm91dGVyTm9kZTtcbiAgfSk7XG5cbiAgbXlOb2RlLnR3ZWVuVG9Qb3NpdGlvbigtMTAwLCAwLCA0MDAsIHR3ZWVucy5lYXNlT3V0UXVhZCk7XG4gIHJvdXRlck5vZGUudHdlZW5Ub1Bvc2l0aW9uKDAsIDAsIDUwMCwgdHdlZW5zLmVhc2VPdXRRdWFkKTtcbiAgdmFyIHJhZGlhbnNCZXR3ZWVuTm9kZXMgPSAyKk1hdGguUEkgLyAob3RoZXJOb2Rlcy5sZW5ndGggKyAxKTsgLy8gSW5jbHVkZSBteU5vZGUhXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgb3RoZXJOb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgIC8vIHNpbihyYWQpID0gby9oXG4gICAgdmFyIGggPSAxMDA7XG4gICAgLy8gRXh0cmEgTWF0aC5QSSBoZXJlIHB1dHMgMGRlZyBvbiB0aGUgbGVmdC5cbiAgICB2YXIgcmFkID0gTWF0aC5QSSArIChpKzEpICogcmFkaWFuc0JldHdlZW5Ob2RlcztcbiAgICB2YXIgeCA9IE1hdGguY29zKHJhZCkgKiBoO1xuICAgIHZhciB5ID0gTWF0aC5zaW4ocmFkKSAqIGg7XG4gICAgb3RoZXJOb2Rlc1tpXS50d2VlblRvUG9zaXRpb24oeCwgeSwgNjAwLCB0d2VlbnMuZWFzZU91dFF1YWQpO1xuICB9XG59O1xuXG4vKipcbiAqIEV4cGxpY2l0bHkgY29udHJvbCBWaXpOb2RlcyBpbiB0aGUgZm9yZWdyb3VuZCwgbW92aW5nIHRoZW0gaW50byBhIGRlc2lyZWRcbiAqIGNvbmZpZ3VyYXRpb24gYmFzZWQgb24gdGhlaXIgbnVtYmVyIGFuZCB0eXBlcy4gIE5vZGVzIGFyZSBnaXZlbiBhbmltYXRpb25cbiAqIGNvbW1hbmRzICh2aWEgdHdlZW5Ub1Bvc2l0aW9uKSBzbyB0aGF0IHRoZXkgaW50ZXJwb2xhdGUgbmljZWx5IHRvIHRoZWlyIHRhcmdldFxuICogcG9zaXRpb25zLlxuICpcbiAqIENvbmZpZ3VyYXRpb25zOlxuICogT25lIG5vZGUgKGxvY2FsIG5vZGUpOiBDZW50ZXJlZCBvbiB0aGUgc2NyZWVuLlxuICogICB8ICBMICB8XG4gKlxuICogVHdvIG5vZGVzOiBMb2NhbCBub2RlIG9uIGxlZnQsIHJlbW90ZSBub2RlIG9uIHJpZ2h0LCBub3RoaW5nIGluIHRoZSBtaWRkbGUuXG4gKiAgIHwgTC1SIHxcbiAqXG4gKiBUaHJlZSBvciBtb3JlIG5vZGVzOiBEaXN0cmlidXRlZCBhcm91bmQgY2VudGVyIG9mIGZyYW1lXG4gKiAzOiAgICBPICAgIDQ6ICBPICAgICAgNTogTyAgTyAgICA2OiBPIE9cbiAqICAgTCAgICAgICAgICBMICAgTyAgICAgIEwgICAgICAgICAgTCAgIE9cbiAqICAgICAgIE8gICAgICAgIE8gICAgICAgICBPICBPICAgICAgIE8gT1xuICovXG5OZXRTaW1WaXN1YWxpemF0aW9uLnByb3RvdHlwZS5kaXN0cmlidXRlRm9yZWdyb3VuZE5vZGVzRm9yQnJvYWRjYXN0XyA9IGZ1bmN0aW9uICgpIHtcbiAgLyoqIEB0eXBlIHtBcnJheS48TmV0U2ltVml6U2ltdWxhdGlvbk5vZGU+fSAqL1xuICB2YXIgZm9yZWdyb3VuZE5vZGVzID0gdGhpcy5lbGVtZW50c18uZmlsdGVyKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQgaW5zdGFuY2VvZiBOZXRTaW1WaXpTaW11bGF0aW9uTm9kZSAmJlxuICAgICAgICBlbGVtZW50LmlzRm9yZWdyb3VuZCAmJlxuICAgICAgICAhZWxlbWVudC5pc1JvdXRlcjtcbiAgfSk7XG5cbiAgLy8gU29tZXRpbWVzLCB0aGVyZSdzIG5vIHdvcmsgdG8gZG8uXG4gIGlmIChmb3JlZ3JvdW5kTm9kZXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gT25lIG5vZGU6IENlbnRlcmVkIG9uIHNjcmVlblxuICBpZiAoZm9yZWdyb3VuZE5vZGVzLmxlbmd0aCA9PT0gMSkge1xuICAgIGZvcmVncm91bmROb2Rlc1swXS50d2VlblRvUG9zaXRpb24oMCwgMCwgNjAwLCB0d2VlbnMuZWFzZU91dFF1YWQpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBteU5vZGU7XG5cbiAgLy8gVHdvIG5vZGVzOiBQbGFjZWQgYWNyb3NzIGZyb20gZWFjaCBvdGhlciwgbG9jYWwgbm9kZSBvbiBsZWZ0XG4gIGlmIChmb3JlZ3JvdW5kTm9kZXMubGVuZ3RoID09PSAyKSB7XG4gICAgbXlOb2RlID0gdGhpcy5sb2NhbE5vZGU7XG4gICAgdmFyIG90aGVyTm9kZSA9IF8uZmluZChmb3JlZ3JvdW5kTm9kZXMsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICByZXR1cm4gbm9kZSAhPT0gbXlOb2RlO1xuICAgIH0pO1xuICAgIG15Tm9kZS50d2VlblRvUG9zaXRpb24oLTc1LCAwLCA0MDAsIHR3ZWVucy5lYXNlT3V0UXVhZCk7XG4gICAgb3RoZXJOb2RlLnR3ZWVuVG9Qb3NpdGlvbig3NSwgMCwgNjAwLCB0d2VlbnMuZWFzZU91dFF1YWQpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFRocmVlIG9yIG1vcmUgbm9kZXM6XG4gIC8vICogTG9jYWwgbm9kZSBvbiBsZWZ0XG4gIC8vICogT3RoZXIgbm9kZXMgZXZlbmx5IGRpc3RyaWJ1dGVkIGluIGEgY2lyY2xlXG4gIG15Tm9kZSA9IHRoaXMubG9jYWxOb2RlO1xuICB2YXIgb3RoZXJOb2RlcyA9IGZvcmVncm91bmROb2Rlcy5maWx0ZXIoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZSAhPT0gbXlOb2RlO1xuICB9KTtcblxuICBteU5vZGUudHdlZW5Ub1Bvc2l0aW9uKC0xMDAsIDAsIDQwMCwgdHdlZW5zLmVhc2VPdXRRdWFkKTtcbiAgdmFyIHJhZGlhbnNCZXR3ZWVuTm9kZXMgPSAyKk1hdGguUEkgLyAob3RoZXJOb2Rlcy5sZW5ndGggKyAxKTsgLy8gSW5jbHVkZSBteU5vZGUhXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgb3RoZXJOb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgIC8vIHNpbihyYWQpID0gby9oXG4gICAgdmFyIGggPSAxMDA7XG4gICAgLy8gRXh0cmEgTWF0aC5QSSBoZXJlIHB1dHMgMGRlZyBvbiB0aGUgbGVmdC5cbiAgICB2YXIgcmFkID0gTWF0aC5QSSArIChpKzEpICogcmFkaWFuc0JldHdlZW5Ob2RlcztcbiAgICB2YXIgeCA9IE1hdGguY29zKHJhZCkgKiBoO1xuICAgIHZhciB5ID0gTWF0aC5zaW4ocmFkKSAqIGg7XG4gICAgb3RoZXJOb2Rlc1tpXS50d2VlblRvUG9zaXRpb24oeCwgeSwgNjAwLCB0d2VlbnMuZWFzZU91dFF1YWQpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7RG5zTW9kZX0gbmV3RG5zTW9kZVxuICovXG5OZXRTaW1WaXN1YWxpemF0aW9uLnByb3RvdHlwZS5zZXREbnNNb2RlID0gZnVuY3Rpb24gKG5ld0Ruc01vZGUpIHtcblxuICB0aGlzLmRuc01vZGVfID0gbmV3RG5zTW9kZTtcblxuICAvLyBTaG93L2hpZGUgdGhlIGF1dG8tRE5TIG5vZGUgYWNjb3JkaW5nIHRvIHRoZSBuZXcgc3RhdGVcbiAgaWYgKG5ld0Ruc01vZGUgPT09IERuc01vZGUuQVVUT01BVElDKSB7XG4gICAgdGhpcy5tYWtlQXV0b0Ruc05vZGUoKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRlc3Ryb3lBdXRvRG5zTm9kZSgpO1xuICB9XG5cbiAgLy8gVGVsbCBhbGwgbm9kZXMgYWJvdXQgdGhlIG5ldyBETlMgbW9kZSwgc28gdGhleSBjYW4gZGVjaWRlIHdoZXRoZXIgdG9cbiAgLy8gc2hvdyBvciBoaWRlIHRoZWlyIGFkZHJlc3MuXG4gIHRoaXMuZWxlbWVudHNfLmZvckVhY2goZnVuY3Rpb24gKHZpekVsZW1lbnQpIHtcbiAgICBpZiAodml6RWxlbWVudCBpbnN0YW5jZW9mIE5ldFNpbVZpelNpbXVsYXRpb25Ob2RlKSB7XG4gICAgICB2aXpFbGVtZW50LnNldERuc01vZGUobmV3RG5zTW9kZSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBVcGRhdGUgbGF5ZXJpbmcgYW5kIGxheW91dCBzaW5jZSB3ZSBqdXN0IGFkZGVkL3JlbW92ZWQgYSBub2RlLlxuICB0aGlzLnB1bGxFbGVtZW50c1RvRm9yZWdyb3VuZCgpO1xuICB0aGlzLmRpc3RyaWJ1dGVGb3JlZ3JvdW5kTm9kZXMoKTtcbn07XG5cbi8qKlxuICogSWYgaXQgZG9lc24ndCBhbHJlYWR5IGV4aXN0LCBjcmVhdGUgYW4gYXV0by1ETlMgbm9kZSBhbmQgY29ycmVzcG9uZGluZ1xuICogd2lyZS5cbiAqL1xuTmV0U2ltVmlzdWFsaXphdGlvbi5wcm90b3R5cGUubWFrZUF1dG9EbnNOb2RlID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuYXV0b0Ruc05vZGVfKSB7XG4gICAgdGhpcy5hdXRvRG5zTm9kZV8gPSBuZXcgTmV0U2ltVml6QXV0b0Ruc05vZGUoU0hPV19CQUNLR1JPVU5EKTtcbiAgICB0aGlzLmFkZFZpekVsZW1lbnRfKHRoaXMuYXV0b0Ruc05vZGVfKTtcblxuICAgIHRoaXMuYXV0b0Ruc1dpcmVfID0gbmV3IE5ldFNpbVZpeldpcmUodGhpcy5hdXRvRG5zTm9kZV8sIG51bGwpO1xuICAgIHRoaXMuYWRkVml6RWxlbWVudF8odGhpcy5hdXRvRG5zV2lyZV8pO1xuICB9XG59O1xuXG4vKipcbiAqIE1hbnVhbGx5IHVwZGF0ZSB0aGUgYXV0by1ETlMgbm9kZSBhbmQgd2lyZSB0byBtYXRjaCB0aGUgZm9yZWdyb3VuZCByb3V0ZXIuXG4gKi9cbk5ldFNpbVZpc3VhbGl6YXRpb24ucHJvdG90eXBlLnVwZGF0ZUF1dG9EbnNOb2RlID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuYXV0b0Ruc05vZGVfKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGZvcmVncm91bmRSb3V0ZXJOb2RlID0gXy5maW5kKHRoaXMuZWxlbWVudHNfLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50IGluc3RhbmNlb2YgTmV0U2ltVml6U2ltdWxhdGlvbk5vZGUgJiZcbiAgICAgICAgZWxlbWVudC5pc1JvdXRlciAmJlxuICAgICAgICBlbGVtZW50LmlzRm9yZWdyb3VuZDtcbiAgfSk7XG5cbiAgLy8gVXBkYXRlIGFkZHJlc3MgdG8gbWF0Y2ggZm9yZWdyb3VuZCByb3V0ZXJcbiAgaWYgKGZvcmVncm91bmRSb3V0ZXJOb2RlKSB7XG4gICAgdGhpcy5hdXRvRG5zTm9kZV8uc2V0QWRkcmVzcyhmb3JlZ3JvdW5kUm91dGVyTm9kZS5hdXRvRG5zQWRkcmVzcyk7XG4gIH1cblxuICAvLyBVcGRhdGUgd2lyZSBlbmRwb2ludHNcbiAgdGhpcy5hdXRvRG5zV2lyZV8ubG9jYWxWaXpOb2RlID0gdGhpcy5hdXRvRG5zTm9kZV87XG4gIHRoaXMuYXV0b0Ruc1dpcmVfLnJlbW90ZVZpek5vZGUgPSBmb3JlZ3JvdW5kUm91dGVyTm9kZTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBhdXRvLUROUyBub2RlIGFuZCB3aXJlLlxuICovXG5OZXRTaW1WaXN1YWxpemF0aW9uLnByb3RvdHlwZS5kZXN0cm95QXV0b0Ruc05vZGUgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmF1dG9EbnNOb2RlXykge1xuICAgIHRoaXMuYXV0b0Ruc05vZGVfLmtpbGwoKTtcbiAgICB0aGlzLmF1dG9EbnNOb2RlXyA9IG51bGw7XG4gIH1cblxuICBpZiAodGhpcy5hdXRvRG5zV2lyZV8pIHtcbiAgICB0aGlzLmF1dG9EbnNXaXJlXy5raWxsKCk7XG4gICAgdGhpcy5hdXRvRG5zV2lyZV8gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBkbnNOb2RlSURcbiAqL1xuTmV0U2ltVmlzdWFsaXphdGlvbi5wcm90b3R5cGUuc2V0RG5zTm9kZUlEID0gZnVuY3Rpb24gKGRuc05vZGVJRCkge1xuICB0aGlzLmVsZW1lbnRzXy5mb3JFYWNoKGZ1bmN0aW9uICh2aXpFbGVtZW50KSB7XG4gICAgaWYgKHZpekVsZW1lbnQgaW5zdGFuY2VvZiBOZXRTaW1WaXpTaW11bGF0aW9uTm9kZSkge1xuICAgICAgdml6RWxlbWVudC5zZXRJc0Ruc05vZGUodml6RWxlbWVudC5nZXRDb3JyZXNwb25kaW5nRW50aXR5SWQoKSA9PT0gZG5zTm9kZUlEKTtcbiAgICB9XG4gIH0pO1xufTtcblxuLyoqXG4gKiBVcGRhdGUgZW5jb2RpbmctdmlldyBzZXR0aW5nIGFjcm9zcyB0aGUgdmlzdWFsaXphdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0VuY29kaW5nVHlwZVtdfSBuZXdFbmNvZGluZ3NcbiAqL1xuTmV0U2ltVmlzdWFsaXphdGlvbi5wcm90b3R5cGUuc2V0RW5jb2RpbmdzID0gZnVuY3Rpb24gKG5ld0VuY29kaW5ncykge1xuICB0aGlzLmVuY29kaW5nc18gPSBuZXdFbmNvZGluZ3M7XG4gIHRoaXMuZWxlbWVudHNfLmZvckVhY2goZnVuY3Rpb24gKHZpekVsZW1lbnQpIHtcbiAgICBpZiAodml6RWxlbWVudCBpbnN0YW5jZW9mIE5ldFNpbVZpelNpbXVsYXRpb25XaXJlKSB7XG4gICAgICB2aXpFbGVtZW50LnNldEVuY29kaW5ncyhuZXdFbmNvZGluZ3MpO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIEtpY2sgb2ZmIGFuIGFuaW1hdGlvbiB0aGF0IHdpbGwgc2hvdyB0aGUgc3RhdGUgb2YgdGhlIHNpbXBsZXggd2lyZSBiZWluZ1xuICogc2V0IGJ5IHRoZSBsb2NhbCBub2RlLlxuICogQHBhcmFtIHtcIjBcInxcIjFcIn0gbmV3U3RhdGVcbiAqL1xuTmV0U2ltVmlzdWFsaXphdGlvbi5wcm90b3R5cGUuYW5pbWF0ZVNldFdpcmVTdGF0ZSA9IGZ1bmN0aW9uIChuZXdTdGF0ZSkge1xuICAvLyBBc3N1bXB0aW9ucyAtIHdlIGFyZSB0YWxraW5nIGFib3V0IHRoZSB3aXJlIGJldHdlZW4gdGhlIGxvY2FsIG5vZGVcbiAgLy8gYW5kIGl0cyByZW1vdGUgcGFydG5lci5cbiAgLy8gVGhpcyBvbmx5IGdldHMgdXNlZCBpbiBwZWVyLXRvLXBlZXIgbW9kZSwgc28gdGhlcmUgc2hvdWxkIGJlIGFuIGluY29taW5nXG4gIC8vIHdpcmUgdG9vLCB3aGljaCB3ZSBzaG91bGQgaGlkZS5cbiAgLy8gVGhpcyBpcyBhIG5vLW9wIGlmIG5vIHN1Y2ggd2lyZSBleGlzdHMuXG4gIC8vIFdlIGNhbiBzdG9wIGFueSBwcmV2aW91cyBhbmltYXRpb24gb24gdGhlIHdpcmUgaWYgdGhpcyBpcyBjYWxsZWRcblxuICB2YXIgdml6V2lyZSA9IHRoaXMuZ2V0Vml6V2lyZVRvUmVtb3RlKCk7XG4gIHZhciBpbmNvbWluZ1dpcmUgPSB0aGlzLmdldFZpeldpcmVGcm9tUmVtb3RlKCk7XG4gIGlmICghKHZpeldpcmUgJiYgaW5jb21pbmdXaXJlKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEhpZGUgdGhlIGluY29taW5nIHdpcmUgYmVjYXVzZSB3ZSBhcmUgaW4gc2ltcGxleCBtb2RlLlxuICBpbmNvbWluZ1dpcmUuaGlkZSgpO1xuICAvLyBBbmltYXRlIHRoZSBvdXRnb2luZyB3aXJlXG4gIHZpeldpcmUuYW5pbWF0ZVNldFN0YXRlKG5ld1N0YXRlKTtcbn07XG5cbi8qKlxuICogS2ljayBvZmYgYW4gYW5pbWF0aW9uIHRoYXQgd2lsbCBzaG93IHRoZSBzdGF0ZSBvZiB0aGUgc2ltcGxleCB3aXJlIGJlaW5nXG4gKiByZWFkIGJ5IHRoZSBsb2NhbCBub2RlLlxuICogQHBhcmFtIHtcIjBcInxcIjFcIn0gbmV3U3RhdGVcbiAqL1xuTmV0U2ltVmlzdWFsaXphdGlvbi5wcm90b3R5cGUuYW5pbWF0ZVJlYWRXaXJlU3RhdGUgPSBmdW5jdGlvbiAobmV3U3RhdGUpIHtcbiAgLy8gQXNzdW1lcyB3ZSBhcmUgaW4gc2ltcGxleCBQMlAgbW9kZSBhbmQgdGFsa2luZyBhYm91dCB0aGUgd2lyZSBiZXR3ZWVuXG4gIC8vIHRoZSBsb2NhbCBub2RlIGFuZCBpdHMgcmVtb3RlIHBhcnRuZXIuICBUaGlzIGlzIGEgbm8tb3AgaWYgbm8gc3VjaCB3aXJlXG4gIC8vIGV4aXN0cy4gIFdlIGNhbiBzdG9wIGFueSBwcmV2aW91cyBhbmltYXRpb24gb24gdGhlIHdpcmUgaWYgdGhpcyBpcyBjYWxsZWQuXG5cbiAgdmFyIHZpeldpcmUgPSB0aGlzLmdldFZpeldpcmVUb1JlbW90ZSgpO1xuICB2YXIgaW5jb21pbmdXaXJlID0gdGhpcy5nZXRWaXpXaXJlRnJvbVJlbW90ZSgpO1xuICBpZiAoISh2aXpXaXJlICYmIGluY29taW5nV2lyZSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBIaWRlIHRoZSBpbmNvbWluZyB3aXJlIGJlY2F1c2Ugd2UgYXJlIGluIHNpbXBsZXggbW9kZS5cbiAgaW5jb21pbmdXaXJlLmhpZGUoKTtcbiAgLy8gQW5pbWF0ZSB0aGUgb3V0Z29pbmcgd2lyZVxuICB2aXpXaXJlLmFuaW1hdGVSZWFkU3RhdGUobmV3U3RhdGUpO1xufTtcblxuLyoqXG4gKiBGaW5kIHRoZSBvdXRnb2luZyB3aXJlIGZyb20gdGhlIGxvY2FsIG5vZGUgdG8gYSByZW1vdGUgbm9kZS5cbiAqIEByZXR1cm5zIHtOZXRTaW1WaXpTaW11bGF0aW9uV2lyZXxudWxsfSBudWxsIGlmIG5vIG91dGdvaW5nIGNvbm5lY3Rpb24gaXMgZXN0YWJsaXNoZWQuXG4gKi9cbk5ldFNpbVZpc3VhbGl6YXRpb24ucHJvdG90eXBlLmdldFZpeldpcmVUb1JlbW90ZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCF0aGlzLmxvY2FsTm9kZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIG91dGdvaW5nV2lyZXMgPSB0aGlzLmVsZW1lbnRzXy5maWx0ZXIoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudCBpbnN0YW5jZW9mIE5ldFNpbVZpelNpbXVsYXRpb25XaXJlICYmXG4gICAgICAgIGVsZW1lbnQubG9jYWxWaXpOb2RlID09PSB0aGlzLmxvY2FsTm9kZTtcbiAgfSwgdGhpcyk7XG5cbiAgaWYgKG91dGdvaW5nV2lyZXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gb3V0Z29pbmdXaXJlc1swXTtcbn07XG5cbi8qKlxuICogRmluZCB0aGUgaW5jb21pbmcgd2lyZSBmcm9tIGEgcmVtb3RlIG5vZGUgdG8gdGhlIGxvY2FsIG5vZGUuXG4gKiBAcmV0dXJucyB7TmV0U2ltVml6U2ltdWxhdGlvbldpcmV8bnVsbH0gbnVsbCBpZiBubyBpbmNvbWluZyBjb25uZWN0aW9uIGlzIGVzdGFibGlzaGVkLlxuICovXG5OZXRTaW1WaXN1YWxpemF0aW9uLnByb3RvdHlwZS5nZXRWaXpXaXJlRnJvbVJlbW90ZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCF0aGlzLmxvY2FsTm9kZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGluY29taW5nV2lyZXMgPSB0aGlzLmVsZW1lbnRzXy5maWx0ZXIoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudCBpbnN0YW5jZW9mIE5ldFNpbVZpelNpbXVsYXRpb25XaXJlICYmXG4gICAgICAgIGVsZW1lbnQucmVtb3RlVml6Tm9kZSA9PT0gdGhpcy5sb2NhbE5vZGU7XG4gIH0sIHRoaXMpO1xuXG4gIGlmIChpbmNvbWluZ1dpcmVzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGluY29taW5nV2lyZXNbMF07XG59O1xuIiwiLyoqXG4gKiBAb3ZlcnZpZXcgV2lyZXMgaW4gdGhlIHZpc3VhbGl6YXRpb24gdGhhdCBtYXAgdG8gc2ltdWxhdGlvbiBlbnRpdGllcy5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgTmV0U2ltR2xvYmFscyA9IHJlcXVpcmUoJy4vTmV0U2ltR2xvYmFscycpO1xudmFyIE5ldFNpbVZpek5vZGUgPSByZXF1aXJlKCcuL05ldFNpbVZpek5vZGUnKTtcbnZhciBOZXRTaW1WaXpXaXJlID0gcmVxdWlyZSgnLi9OZXRTaW1WaXpXaXJlJyk7XG5cbi8qKlxuICogQHBhcmFtIHtOZXRTaW1XaXJlfSBzb3VyY2VXaXJlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBnZXRFbGVtZW50QnlFbnRpdHlJRCAtIEFsbG93cyB0aGlzIHdpcmUgdG8gc2VhcmNoXG4gKiAgICAgICAgZm9yIG90aGVyIGVudGl0aWVzIGluIHRoZSBzaW11bGF0aW9uXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhdWdtZW50cyBOZXRTaW1WaXpXaXJlXG4gKi9cbnZhciBOZXRTaW1WaXpTaW11bGF0aW9uV2lyZSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHNvdXJjZVdpcmUsXG4gICAgZ2V0RWxlbWVudEJ5RW50aXR5SWQpIHtcbiAgdmFyIGxvY2FsTm9kZSA9IGdldEVsZW1lbnRCeUVudGl0eUlkKE5ldFNpbVZpek5vZGUsIHNvdXJjZVdpcmUubG9jYWxOb2RlSUQpO1xuICB2YXIgcmVtb3RlTm9kZSA9IGdldEVsZW1lbnRCeUVudGl0eUlkKE5ldFNpbVZpek5vZGUsIHNvdXJjZVdpcmUucmVtb3RlTm9kZUlEKTtcbiAgTmV0U2ltVml6V2lyZS5jYWxsKHRoaXMsIGxvY2FsTm9kZSwgcmVtb3RlTm9kZSk7XG5cbiAgLyoqXG4gICAqIElEIG9mIHRoZSBOZXRTaW1XaXJlIHRoYXQgdGhpcyBOZXRTaW1WaXpTaW11bGF0aW9uV2lyZSBtYXBzIHRvLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5jb3JyZXNwb25kaW5nV2lyZUlkXyA9IHNvdXJjZVdpcmUuZW50aXR5SUQ7XG5cbiAgLyoqXG4gICAqIFVVSUQgb2YgdGhlIE5ldFNpbVdpcmUgdGhhdCB0aGlzIE5ldFNpbVZpelNpbXVsYXRpb25XaXJlIG1hcHMgdG8uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLmNvcnJlc3BvbmRpbmdXaXJlVXVpZF8gPSBzb3VyY2VXaXJlLnV1aWQ7XG5cbiAgLyoqXG4gICAqIEJvdW5kIGdldEVsZW1lbnRCeUVudGl0eUlkIG1ldGhvZCBmcm9tIHZpenVhbGl6YXRpb24gY29udHJvbGxlcjtcbiAgICogd2UgaG9sZCBvbiB0byB0aGlzIHNvIHRoYXQgY2FsbHMgdG8gY29uZmlndXJlRnJvbSBjYW4gZmluZCBub2RlcyBsYXRlci5cbiAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5nZXRFbGVtZW50QnlFbnRpdHlJZF8gPSBnZXRFbGVtZW50QnlFbnRpdHlJZDtcblxuICB0aGlzLmNvbmZpZ3VyZUZyb20oc291cmNlV2lyZSk7XG4gIHRoaXMucmVuZGVyKCk7XG59O1xuTmV0U2ltVml6U2ltdWxhdGlvbldpcmUuaW5oZXJpdHMoTmV0U2ltVml6V2lyZSk7XG5cbi8qKlxuICogQ29uZmlndXJpbmcgYSB3aXJlIG1lYW5zIGxvb2tpbmcgdXAgdGhlIHZpeiBub2RlcyB0aGF0IHdpbGwgYmUgaXRzIGVuZHBvaW50cy5cbiAqIEBwYXJhbSB7TmV0U2ltV2lyZX0gc291cmNlV2lyZVxuICovXG5OZXRTaW1WaXpTaW11bGF0aW9uV2lyZS5wcm90b3R5cGUuY29uZmlndXJlRnJvbSA9IGZ1bmN0aW9uIChzb3VyY2VXaXJlKSB7XG4gIHRoaXMuY29ycmVzcG9uZGluZ1dpcmVJZF8gPSBzb3VyY2VXaXJlLmVudGl0eUlEO1xuICB0aGlzLmNvcnJlc3BvbmRpbmdXaXJlVXVpZF8gPSBzb3VyY2VXaXJlLnV1aWQ7XG5cbiAgdGhpcy5sb2NhbFZpek5vZGUgPSB0aGlzLmdldEVsZW1lbnRCeUVudGl0eUlkXyhOZXRTaW1WaXpOb2RlLCBzb3VyY2VXaXJlLmxvY2FsTm9kZUlEKTtcbiAgdGhpcy5yZW1vdGVWaXpOb2RlID0gdGhpcy5nZXRFbGVtZW50QnlFbnRpdHlJZF8oTmV0U2ltVml6Tm9kZSwgc291cmNlV2lyZS5yZW1vdGVOb2RlSUQpO1xuXG4gIGlmICh0aGlzLmxvY2FsVml6Tm9kZSkge1xuICAgIHRoaXMubG9jYWxWaXpOb2RlLnNldEFkZHJlc3Moc291cmNlV2lyZS5sb2NhbEFkZHJlc3MpO1xuICB9XG5cbiAgaWYgKHRoaXMucmVtb3RlVml6Tm9kZSkge1xuICAgIHRoaXMucmVtb3RlVml6Tm9kZS5zZXRBZGRyZXNzKHNvdXJjZVdpcmUucmVtb3RlQWRkcmVzcyk7XG4gIH1cblxuICBpZiAoTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpLmJyb2FkY2FzdE1vZGUpIHtcbiAgICB0aGlzLmdldFJvb3QoKS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICB9XG59O1xuXG4vKipcbiAqIElEIG9mIHRoZSBOZXRTaW1FbnRpdHkgdGhhdCBtYXBzIHRvIHRoaXMgdmlzdWFsaXphdGlvbiBlbGVtZW50LlxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuTmV0U2ltVml6U2ltdWxhdGlvbldpcmUucHJvdG90eXBlLmdldENvcnJlc3BvbmRpbmdFbnRpdHlJZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuY29ycmVzcG9uZGluZ1dpcmVJZF87XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7TmV0U2ltRW50aXR5fSBlbnRpdHlcbiAqIEByZXR1cm5zIHtib29sZWFufSBUUlVFIGlmIHRoaXMgVml6RWxlbWVudCByZXByZXNlbnRzIHRoZSBnaXZlbiBOZXRTaW1FbnRpdHkuXG4gKi9cbk5ldFNpbVZpelNpbXVsYXRpb25XaXJlLnByb3RvdHlwZS5yZXByZXNlbnRzRW50aXR5ID0gZnVuY3Rpb24gKGVudGl0eSkge1xuICByZXR1cm4gdGhpcy5jb3JyZXNwb25kaW5nV2lyZUlkXyA9PT0gZW50aXR5LmVudGl0eUlEICYmXG4gICAgICB0aGlzLmNvcnJlc3BvbmRpbmdXaXJlVXVpZF8gPT09IGVudGl0eS51dWlkO1xufTtcblxuLyoqXG4gKiBLaWxsaW5nIGEgdmlzdWFsaXphdGlvbiBub2RlIHJlbW92ZXMgaXRzIElEIHNvIHRoYXQgaXQgd29uJ3QgY29uZmxpY3Qgd2l0aFxuICogYW5vdGhlciB2aXpub2RlIG9mIG1hdGNoaW5nIElEIGJlaW5nIGFkZGVkLCBhbmQgYmVnaW5zIGl0cyBleGl0IGFuaW1hdGlvbi5cbiAqIEBvdmVycmlkZVxuICovXG5OZXRTaW1WaXpTaW11bGF0aW9uV2lyZS5wcm90b3R5cGUua2lsbCA9IGZ1bmN0aW9uICgpIHtcbiAgTmV0U2ltVml6U2ltdWxhdGlvbldpcmUuc3VwZXJQcm90b3R5cGUua2lsbC5jYWxsKHRoaXMpO1xuICB0aGlzLmNvcnJlc3BvbmRpbmdXaXJlSWRfID0gdW5kZWZpbmVkO1xuICB0aGlzLmNvcnJlc3BvbmRpbmdXaXJlVXVpZF8gPSB1bmRlZmluZWQ7XG59O1xuIiwiLyoqXG4gKiBAb3ZlcnZpZXcgV2lyZXMgaW4gdGhlIHZpc3VhbGl6YXRpb24uXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGpRdWVyeVN2Z0VsZW1lbnQgPSByZXF1aXJlKCcuL05ldFNpbVV0aWxzJykualF1ZXJ5U3ZnRWxlbWVudDtcbnZhciBOZXRTaW1WaXpFbGVtZW50ID0gcmVxdWlyZSgnLi9OZXRTaW1WaXpFbGVtZW50Jyk7XG52YXIgdHdlZW5zID0gcmVxdWlyZSgnLi90d2VlbnMnKTtcbnZhciBEYXRhQ29udmVydGVycyA9IHJlcXVpcmUoJy4vRGF0YUNvbnZlcnRlcnMnKTtcbnZhciBOZXRTaW1Db25zdGFudHMgPSByZXF1aXJlKCcuL05ldFNpbUNvbnN0YW50cycpO1xuXG52YXIgRW5jb2RpbmdUeXBlID0gTmV0U2ltQ29uc3RhbnRzLkVuY29kaW5nVHlwZTtcblxudmFyIGJpbmFyeVRvQUIgPSBEYXRhQ29udmVydGVycy5iaW5hcnlUb0FCO1xuXG4vKipcbiAqIEhvdyBmYXIgdGhlIGZseWluZyBsYWJlbCBzaG91bGQgcmVzdCBhYm92ZSB0aGUgd2lyZS5cbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqL1xudmFyIFRFWFRfRklOQUxfVkVSVElDQUxfT0ZGU0VUID0gLTEwO1xuXG4vKipcbiAqIEBwYXJhbSB7TmV0U2ltVml6Tm9kZX0gbG9jYWxOb2RlXG4gKiBAcGFyYW0ge05ldFNpbVZpek5vZGV9IHJlbW90ZU5vZGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQGF1Z21lbnRzIE5ldFNpbVZpekVsZW1lbnRcbiAqL1xudmFyIE5ldFNpbVZpeldpcmUgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsb2NhbE5vZGUsIHJlbW90ZU5vZGUpIHtcbiAgTmV0U2ltVml6RWxlbWVudC5jYWxsKHRoaXMpO1xuXG4gIHZhciByb290ID0gdGhpcy5nZXRSb290KCk7XG4gIHJvb3QuYWRkQ2xhc3MoJ3Zpei13aXJlJyk7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtqUXVlcnl9IHdyYXBwZWQgYXJvdW5kIGEgU1ZHUGF0aEVsZW1lbnRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubGluZV8gPSBqUXVlcnlTdmdFbGVtZW50KCdwYXRoJylcbiAgICAgIC5hcHBlbmRUbyhyb290KTtcblxuICAvKipcbiAgICogQHR5cGUge2pRdWVyeX0gd3JhcHBlZCBhcm91bmQgYSBTVkdUZXh0RWxlbWVudFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5xdWVzdGlvbk1hcmtfID0galF1ZXJ5U3ZnRWxlbWVudCgndGV4dCcpXG4gICAgICAudGV4dCgnPycpXG4gICAgICAuYWRkQ2xhc3MoJ3F1ZXN0aW9uLW1hcmsnKVxuICAgICAgLmFwcGVuZFRvKHJvb3QpO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7alF1ZXJ5fSB3cmFwcGVkIGFyb3VuZCBhIFNWR1RleHRFbGVtZW50XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnRleHRfID0galF1ZXJ5U3ZnRWxlbWVudCgndGV4dCcpXG4gICAgICAuYWRkQ2xhc3MoJ3N0YXRlLWxhYmVsJylcbiAgICAgIC5hcHBlbmRUbyhyb290KTtcblxuICAvKipcbiAgICogWC1jb29yZGluYXRlIG9mIHRleHQgbGFiZWwsIGZvciBhbmltYXRpb24uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnRleHRQb3NYXyA9IDA7XG5cbiAgLyoqXG4gICAqIFktY29vcmRpbmF0ZSBvZiB0ZXh0IGxhYmVsLCBmb3IgYW5pbWF0aW9uLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy50ZXh0UG9zWV8gPSAwO1xuXG4gIC8qKlxuICAgKiBGbGFnIHRoYXQgYWxsb3dzIHVzIHRvIGZvcmNlIGFuIHVwZGF0ZSBvZiB0aGUgdGV4dCBwb3NpdGlvbjsgdXNlZFxuICAgKiB3aGVuIHdlIG1vdmUgdGV4dCB3aXRob3V0IHR3ZWVucyBiZWNhdXNlIHRoYXQgbWV0aG9kIHByZXZlbnRzIHVzXG4gICAqIGZyb20gYmVpbmcgYWJsZSB0byBkZXRlY3Qgbm9ybWFsbHkgdGhhdCBzb21ldGhpbmcgaGFzIGNoYW5nZWRcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmZvcmNlVGV4dFBvc1JlbmRlcl8gPSBmYWxzZTtcblxuICAvKipcbiAgICogU1ZHIFBhdGggRGVzY3JpcHRpb24gb2YgdGhpcy5saW5lXywgZm9yIGFuaW1hdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5wYXRoRGF0YV8gPSAnJztcblxuICAvKipcbiAgICogYFRFWFRfRklOQUxfVkVSVElDQUxfT0ZGU0VUYC1vZmZzZXQgWCBhbmQgWSBjb29yZGluYXRlcyBmb3IgdGhlXG4gICAqIGNlbnRlciBvZiB0aGUgd2lyZTsgdXNlZCBmb3IgcG9zaXRpb25pbmcgdGhlIHF1ZXN0aW9uIG1hcmtcbiAgICogQHR5cGUge3t4Om51bWJlciwgeTpudW1iZXJ9fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy53aXJlQ2VudGVyXyA9IHsgeDogMCwgeTogMCB9O1xuXG4gIC8qKlxuICAgKiBFbmFibGVkIGVuY29kaW5nIHR5cGVzLlxuICAgKiBAdHlwZSB7RW5jb2RpbmdUeXBlW119XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmVuY29kaW5nc18gPSBbXTtcblxuICB0aGlzLmxvY2FsVml6Tm9kZSA9IGxvY2FsTm9kZTtcbiAgdGhpcy5yZW1vdGVWaXpOb2RlID0gcmVtb3RlTm9kZTtcblxuICB0aGlzLnJlbmRlcigpO1xufTtcbk5ldFNpbVZpeldpcmUuaW5oZXJpdHMoTmV0U2ltVml6RWxlbWVudCk7XG5cbi8qKlxuICogVXBkYXRlIHBhdGggZGF0YSBmb3Igd2lyZSBpZiB3ZSBjYW4gZGV0ZWN0IHBlbmRpbmcgY2hhbmdlc1xuICogQHBhcmFtIHtSdW5Mb29wLkNsb2NrfSBbY2xvY2tdIC0gc29tdGltZXMgb21pdHRlZCBkdXJpbmcgc2V0dXBcbiAqL1xuTmV0U2ltVml6V2lyZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKGNsb2NrKSB7XG5cbiAgLy8gQ2FjaGUgdGhlIGxvY2FsIHBvc2l0aW9uIHZhbHVlcyBoZXJlLCBzbyB3ZSBjYW4gY2hlY2sgbGF0ZXIgaWZcbiAgLy8gYW55dGhpbmcgaGFzIGNoYW5nZWQgYmVmb3JlIG1ha2luZyBhbiBleHBlbnNpdmUgYC5hdHRyYCBjYWxsXG4gIHZhciB0ZXh0UG9zWCA9IHRoaXMudGV4dFBvc1hfO1xuICB2YXIgdGV4dFBvc1kgPSB0aGlzLnRleHRQb3NZXztcbiAgdmFyIHBhdGhEYXRhID0gdGhpcy5wYXRoRGF0YV87XG4gIHZhciB3aXJlQ2VudGVyID0gdGhpcy53aXJlQ2VudGVyXztcblxuICAvLyBNYWtlIHRoZSBjYWxsIHRvIHN1cGVyIHRvIHVwZGF0ZSBldmVyeXRoaW5nIHdlIGNhbiwgdGhlblxuICAvLyByZWNhbGN1bGF0ZSB0aGUgdmFsdWVzIG9mIG91cnMgdGhhdCBhcmUgZGVwZW5kZW50IG9uIHRoZSBtb3ZlbWVudFxuICAvLyBvZiBvdXIgY29ubmVjdGVkIG5vZGVzXG4gIE5ldFNpbVZpeldpcmUuc3VwZXJQcm90b3R5cGUucmVuZGVyLmNhbGwodGhpcywgY2xvY2spO1xuXG4gIGlmICh0aGlzLmxvY2FsVml6Tm9kZSAmJiB0aGlzLnJlbW90ZVZpek5vZGUpIHtcbiAgICB0aGlzLnBhdGhEYXRhXyA9IFsnTScsIHRoaXMubG9jYWxWaXpOb2RlLnBvc1gsIHRoaXMubG9jYWxWaXpOb2RlLnBvc1ksXG4gICAgICAgICdMJywgdGhpcy5yZW1vdGVWaXpOb2RlLnBvc1gsIHRoaXMucmVtb3RlVml6Tm9kZS5wb3NZXS5qb2luKCcgJyk7XG4gICAgdGhpcy53aXJlQ2VudGVyXyA9IHRoaXMuZ2V0V2lyZUNlbnRlclBvc2l0aW9uKCk7XG4gIH1cblxuICAvLyBGaW5hbGx5LCBpZiBhbmQgb25seSBpZiBhbnkgb2YgdGhlIHZhbHVlcyB3ZSBjYXJlIGFib3V0IGhhdmVcbiAgLy8gY2hhbmdlZCwgdXBkYXRlIG91ciBlbGVtZW50IGluIHRoZSBET01cbiAgaWYgKHRoaXMuZm9yY2VUZXh0UG9zUmVuZGVyXyB8fCB0ZXh0UG9zWCAhPT0gdGhpcy50ZXh0UG9zWF8gfHxcbiAgICAgIHRleHRQb3NZICE9PSB0aGlzLnRleHRQb3NZXykge1xuICAgIHRoaXMudGV4dF9cbiAgICAgICAgLmF0dHIoJ3gnLCB0aGlzLnRleHRQb3NYXylcbiAgICAgICAgLmF0dHIoJ3knLCB0aGlzLnRleHRQb3NZXyk7XG4gICAgdGhpcy5mb3JjZVRleHRQb3NSZW5kZXJfID0gZmFsc2U7XG4gIH1cbiAgaWYgKHBhdGhEYXRhICE9PSB0aGlzLnBhdGhEYXRhXykge1xuICAgIHRoaXMubGluZV8uYXR0cignZCcsIHRoaXMucGF0aERhdGFfKTtcbiAgfVxuICBpZiAod2lyZUNlbnRlci54ICE9PSB0aGlzLndpcmVDZW50ZXJfLnggfHwgd2lyZUNlbnRlci55ICE9PSB0aGlzLndpcmVDZW50ZXJfLnkpIHtcbiAgICB0aGlzLnF1ZXN0aW9uTWFya19cbiAgICAgICAgLmF0dHIoJ3gnLCB0aGlzLndpcmVDZW50ZXJfLngpXG4gICAgICAgIC5hdHRyKCd5JywgdGhpcy53aXJlQ2VudGVyXy55KTtcbiAgfVxufTtcblxuLyoqXG4gKiBIaWRlIHRoaXMgd2lyZSAtIHVzZWQgdG8gaGlkZSB0aGUgaW5jb21pbmcgd2lyZSB3aGVuIHdlJ3JlIHRyeWluZyB0byBzaG93XG4gKiBzaW1wbGV4IG1vZGUuXG4gKi9cbk5ldFNpbVZpeldpcmUucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZ2V0Um9vdCgpLmFkZENsYXNzKCdoaWRkZW4td2lyZScpO1xufTtcblxuLyoqXG4gKiBLaWxsaW5nIGEgdmlzdWFsaXphdGlvbiBub2RlIHJlbW92ZXMgaXRzIElEIHNvIHRoYXQgaXQgd29uJ3QgY29uZmxpY3Qgd2l0aFxuICogYW5vdGhlciBub2RlIG9mIG1hdGNoaW5nIElEIGJlaW5nIGFkZGVkLCBhbmQgYmVnaW5zIGl0cyBleGl0IGFuaW1hdGlvbi5cbiAqIEBvdmVycmlkZVxuICovXG5OZXRTaW1WaXpXaXJlLnByb3RvdHlwZS5raWxsID0gZnVuY3Rpb24gKCkge1xuICBOZXRTaW1WaXpXaXJlLnN1cGVyUHJvdG90eXBlLmtpbGwuY2FsbCh0aGlzKTtcbiAgdGhpcy5sb2NhbFZpek5vZGUgPSBudWxsO1xuICB0aGlzLnJlbW90ZVZpek5vZGUgPSBudWxsO1xufTtcblxuLyoqXG4gKiBVcGRhdGUgZW5jb2RpbmctdmlldyBzZXR0aW5ncy4gIERldGVybWluZXMgaG93IGJpdCBzZXRzL3JlYWRzIGFyZVxuICogZGlzcGxheWVkIHdoZW4gYW5pbWF0aW5nIGFib3ZlIHRoZSB3aXJlLlxuICpcbiAqIEBwYXJhbSB7RW5jb2RpbmdUeXBlW119IG5ld0VuY29kaW5nc1xuICovXG5OZXRTaW1WaXpXaXJlLnByb3RvdHlwZS5zZXRFbmNvZGluZ3MgPSBmdW5jdGlvbiAobmV3RW5jb2RpbmdzKSB7XG4gIHRoaXMuZW5jb2RpbmdzXyA9IG5ld0VuY29kaW5ncztcbn07XG5cbi8qKlxuICogS2ljayBvZmYgYW4gYW5pbWF0aW9uIG9mIHRoZSB3aXJlIHN0YXRlIGJlaW5nIHNldCBieSB0aGUgbG9jYWwgdml6bm9kZS5cbiAqIEBwYXJhbSB7XCIwXCJ8XCIxXCJ9IG5ld1N0YXRlXG4gKi9cbk5ldFNpbVZpeldpcmUucHJvdG90eXBlLmFuaW1hdGVTZXRTdGF0ZSA9IGZ1bmN0aW9uIChuZXdTdGF0ZSkge1xuICBpZiAoISh0aGlzLmxvY2FsVml6Tm9kZSAmJiB0aGlzLnJlbW90ZVZpek5vZGUpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGZseU91dE1zID0gMzAwO1xuICB2YXIgaG9sZFBvc2l0aW9uTXMgPSAzMDA7XG5cbiAgdGhpcy5zdG9wQWxsQW5pbWF0aW9uKCk7XG4gIHRoaXMuc2V0V2lyZUNsYXNzZXNfKG5ld1N0YXRlKTtcbiAgdGhpcy50ZXh0Xy50ZXh0KHRoaXMuZ2V0RGlzcGxheUJpdF8obmV3U3RhdGUpKTtcbiAgdGhpcy5zbmFwVGV4dFRvUG9zaXRpb24odGhpcy5nZXRMb2NhbE5vZGVQb3NpdGlvbigpKTtcbiAgdGhpcy50d2VlblRleHRUb1Bvc2l0aW9uKHRoaXMuZ2V0V2lyZUNlbnRlclBvc2l0aW9uKCksIGZseU91dE1zLFxuICAgICAgdHdlZW5zLmVhc2VPdXRRdWFkKTtcbiAgdGhpcy5kb0FmdGVyRGVsYXkoZmx5T3V0TXMgKyBob2xkUG9zaXRpb25NcywgZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuc2V0V2lyZUNsYXNzZXNfKCd1bmtub3duJyk7XG4gIH0uYmluZCh0aGlzKSk7XG59O1xuXG4vKipcbiAqIEtpY2sgb2ZmIGFuIGFuaW1hdGlvbiBvZiB0aGUgd2lyZSBzdGF0ZSBiZWluZyByZWFkIGJ5IHRoZSBsb2NhbCB2aXpub2RlLlxuICogQHBhcmFtIHtcIjBcInxcIjFcIn0gbmV3U3RhdGVcbiAqL1xuTmV0U2ltVml6V2lyZS5wcm90b3R5cGUuYW5pbWF0ZVJlYWRTdGF0ZSA9IGZ1bmN0aW9uIChuZXdTdGF0ZSkge1xuICBpZiAoISh0aGlzLmxvY2FsVml6Tm9kZSAmJiB0aGlzLnJlbW90ZVZpek5vZGUpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGhvbGRQb3NpdGlvbk1zID0gMzAwO1xuICB2YXIgZmx5VG9Ob2RlTXMgPSAzMDA7XG5cbiAgdGhpcy5zdG9wQWxsQW5pbWF0aW9uKCk7XG4gIHRoaXMuc2V0V2lyZUNsYXNzZXNfKG5ld1N0YXRlKTtcbiAgdGhpcy50ZXh0Xy50ZXh0KHRoaXMuZ2V0RGlzcGxheUJpdF8obmV3U3RhdGUpKTtcbiAgdGhpcy5zbmFwVGV4dFRvUG9zaXRpb24odGhpcy5nZXRXaXJlQ2VudGVyUG9zaXRpb24oKSk7XG4gIHRoaXMuZG9BZnRlckRlbGF5KGhvbGRQb3NpdGlvbk1zLCBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy50d2VlblRleHRUb1Bvc2l0aW9uKHRoaXMuZ2V0TG9jYWxOb2RlUG9zaXRpb24oKSwgZmx5VG9Ob2RlTXMsXG4gICAgICAgIHR3ZWVucy5lYXNlT3V0UXVhZCk7XG4gICAgdGhpcy5zZXRXaXJlQ2xhc3Nlc18oJ3Vua25vd24nKTtcbiAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogQWRkcy9yZW1vdmVzIGNsYXNzZXMgZnJvbSB0aGUgU1ZHIHJvb3QgYWNjb3JkaW5nIHRvIHRoZSBnaXZlbiB3aXJlIHN0YXRlLlxuICogUGFzc2luZyBhbnl0aGluZyBvdGhlciB0aGFuIFwiMVwiIG9yIFwiMFwiIHdpbGwgcHV0IHRoZSB3aXJlIGluIGFuIFwidW5rbm93blwiXG4gKiBzdGF0ZSwgd2hpY2ggYmVnaW5zIGEgQ1NTIHRyYW5zaXRpb24gZmFkZSBiYWNrIHRvIGdyYXkuXG4gKiBAcGFyYW0ge1wiMFwifFwiMVwifCp9IG5ld1N0YXRlXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1WaXpXaXJlLnByb3RvdHlwZS5zZXRXaXJlQ2xhc3Nlc18gPSBmdW5jdGlvbiAobmV3U3RhdGUpIHtcbiAgdmFyIHN0YXRlT2ZmID0gKG5ld1N0YXRlID09PSAnMCcpO1xuICB2YXIgc3RhdGVPbiA9ICghc3RhdGVPZmYgJiYgbmV3U3RhdGUgPT09ICcxJyk7XG4gIHZhciBzdGF0ZVVua25vd24gPSAoIXN0YXRlT2ZmICYmICFzdGF0ZU9uKTtcblxuICB0aGlzLmdldFJvb3QoKS50b2dnbGVDbGFzcygnc3RhdGUtb24nLCBzdGF0ZU9uKTtcbiAgdGhpcy5nZXRSb290KCkudG9nZ2xlQ2xhc3MoJ3N0YXRlLW9mZicsIHN0YXRlT2ZmKTtcbiAgdGhpcy5nZXRSb290KCkudG9nZ2xlQ2xhc3MoJ3N0YXRlLXVua25vd24nLCBzdGF0ZVVua25vd24pO1xufTtcblxuLyoqXG4gKiBHZXQgYW4gYXBwcm9wcmlhdGUgXCJkaXNwbGF5IGJpdFwiIHRvIHNob3cgYWJvdmUgdGhlIHdpcmUsIGdpdmVuIHRoZVxuICogY3VycmVudCBlbmFibGVkIGVuY29kaW5ncyAoc2hvdWxkIG1hdGNoIHRoZSBcInNldCB3aXJlXCIgYnV0dG9uIGxhYmVsKVxuICogQHBhcmFtIHtcIjBcInxcIjFcIn0gd2lyZVN0YXRlXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBhIGRpc3BsYXkgYml0IGFwcHJvcHJpYXRlIHRvIHRoZSBlbmFibGVkIGVuY29kaW5ncy5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVZpeldpcmUucHJvdG90eXBlLmdldERpc3BsYXlCaXRfID0gZnVuY3Rpb24gKHdpcmVTdGF0ZSkge1xuICBpZiAodGhpcy5pc0VuY29kaW5nRW5hYmxlZF8oRW5jb2RpbmdUeXBlLkFfQU5EX0IpICYmXG4gICAgICAhdGhpcy5pc0VuY29kaW5nRW5hYmxlZF8oRW5jb2RpbmdUeXBlLkJJTkFSWSkpIHtcbiAgICB3aXJlU3RhdGUgPSBiaW5hcnlUb0FCKHdpcmVTdGF0ZSk7XG4gIH1cbiAgcmV0dXJuIHdpcmVTdGF0ZTtcbn07XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgZ2l2ZW4gZW5jb2RpbmcgaXMgY3VycmVudGx5IGRpc3BsYXllZCBieSB0aGUgcGFuZWwuXG4gKiBAcGFyYW0ge0VuY29kaW5nVHlwZX0gcXVlcnlFbmNvZGluZ1xuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1WaXpXaXJlLnByb3RvdHlwZS5pc0VuY29kaW5nRW5hYmxlZF8gPSBmdW5jdGlvbiAocXVlcnlFbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5lbmNvZGluZ3NfLnNvbWUoZnVuY3Rpb24gKGVuYWJsZWRFbmNvZGluZykge1xuICAgIHJldHVybiBlbmFibGVkRW5jb2RpbmcgPT09IHF1ZXJ5RW5jb2Rpbmc7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFuaW1hdGVkIG1vdGlvbiBmcm9tIHRoZSB0ZXh0J3MgY3VycmVudCBwb3NpdGlvbiB0byB0aGVcbiAqIGdpdmVuIGNvb3JkaW5hdGVzLlxuICogQHBhcmFtIHt7eDpudW1iZXIsIHk6bnVtYmVyfX0gZGVzdGluYXRpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSBbZHVyYXRpb249NjAwXSBpbiBtaWxsaXNlY29uZHNcbiAqIEBwYXJhbSB7VHdlZW5GdW5jdGlvbn0gW3R3ZWVuRnVuY3Rpb249bGluZWFyXVxuICovXG5OZXRTaW1WaXpXaXJlLnByb3RvdHlwZS50d2VlblRleHRUb1Bvc2l0aW9uID0gZnVuY3Rpb24gKGRlc3RpbmF0aW9uLCBkdXJhdGlvbixcbiAgICB0d2VlbkZ1bmN0aW9uKSB7XG4gIGlmIChkdXJhdGlvbiA+IDApIHtcbiAgICB0aGlzLnR3ZWVuc18ucHVzaChuZXcgdHdlZW5zLlR3ZWVuVmFsdWVUbyh0aGlzLCAndGV4dFBvc1hfJywgZGVzdGluYXRpb24ueCxcbiAgICAgICAgZHVyYXRpb24sIHR3ZWVuRnVuY3Rpb24pKTtcbiAgICB0aGlzLnR3ZWVuc18ucHVzaChuZXcgdHdlZW5zLlR3ZWVuVmFsdWVUbyh0aGlzLCAndGV4dFBvc1lfJywgZGVzdGluYXRpb24ueSxcbiAgICAgICAgZHVyYXRpb24sIHR3ZWVuRnVuY3Rpb24pKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnRleHRQb3NYXyA9IGRlc3RpbmF0aW9uLng7XG4gICAgdGhpcy50ZXh0UG9zWV8gPSBkZXN0aW5hdGlvbi55O1xuICAgIHRoaXMuZm9yY2VUZXh0UG9zUmVuZGVyXyA9IHRydWU7XG4gIH1cbn07XG5cbi8qKlxuICogU25hcHMgdGhlIHRleHQgdG8gdGhlIGdpdmVuIHBvc2l0aW9uLlxuICogQHBhcmFtIHt7eDpudW1iZXIsIHk6bnVtYmVyfX0gZGVzdGluYXRpb25cbiAqL1xuTmV0U2ltVml6V2lyZS5wcm90b3R5cGUuc25hcFRleHRUb1Bvc2l0aW9uID0gZnVuY3Rpb24gKGRlc3RpbmF0aW9uKSB7XG4gIHRoaXMudHdlZW5UZXh0VG9Qb3NpdGlvbihkZXN0aW5hdGlvbiwgMCk7XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHt7eDpudW1iZXIsIHk6bnVtYmVyfX1cbiAqL1xuTmV0U2ltVml6V2lyZS5wcm90b3R5cGUuZ2V0TG9jYWxOb2RlUG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgeDogdGhpcy5sb2NhbFZpek5vZGUucG9zWCxcbiAgICB5OiB0aGlzLmxvY2FsVml6Tm9kZS5wb3NZXG4gIH07XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHt7eDpudW1iZXIsIHk6bnVtYmVyfX1cbiAqL1xuTmV0U2ltVml6V2lyZS5wcm90b3R5cGUuZ2V0V2lyZUNlbnRlclBvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIHg6ICh0aGlzLnJlbW90ZVZpek5vZGUucG9zWCAtIHRoaXMubG9jYWxWaXpOb2RlLnBvc1gpIC8gMiArXG4gICAgICAgIHRoaXMubG9jYWxWaXpOb2RlLnBvc1gsXG4gICAgeTogKHRoaXMucmVtb3RlVml6Tm9kZS5wb3NZIC0gdGhpcy5yZW1vdGVWaXpOb2RlLnBvc1kpIC8gMiArXG4gICAgICAgIHRoaXMubG9jYWxWaXpOb2RlLnBvc1kgKyBURVhUX0ZJTkFMX1ZFUlRJQ0FMX09GRlNFVFxuICB9O1xufTtcbiIsIi8qKlxuICogQG92ZXJ2aWV3IE5vZGVzIGluIHRoZSB2aXN1YWxpemF0aW9uIHRoYXQgbWFwIHRvIHNpbXVsYXRpb24gZW50aXRpZXMuXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCcuLi91dGlscycpO1xudmFyIE5ldFNpbUNvbnN0YW50cyA9IHJlcXVpcmUoJy4vTmV0U2ltQ29uc3RhbnRzJyk7XG52YXIgTmV0U2ltVml6Tm9kZSA9IHJlcXVpcmUoJy4vTmV0U2ltVml6Tm9kZScpO1xuXG52YXIgTm9kZVR5cGUgPSBOZXRTaW1Db25zdGFudHMuTm9kZVR5cGU7XG5cbnZhciBOZXRTaW1HbG9iYWxzID0gcmVxdWlyZSgnLi9OZXRTaW1HbG9iYWxzJyk7XG5cbi8qKlxuICogQHBhcmFtIHtOZXRTaW1Ob2RlfSBzb3VyY2VOb2RlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHVzZUJhY2tncm91bmRBbmltYXRpb24gLSBjaGFuZ2VzIHRoZSBiZWhhdmlvciBvZiB0aGlzIG5vZGVcbiAqICAgICAgICB3aGVuIGl0J3MgaW4gdGhlIGJhY2tncm91bmQgbGF5ZXJcbiAqIEBjb25zdHJ1Y3RvclxuICogQGF1Z21lbnRzIE5ldFNpbVZpek5vZGVcbiAqL1xudmFyIE5ldFNpbVZpelNpbXVsYXRpb25Ob2RlID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc291cmNlTm9kZSxcbiAgICB1c2VCYWNrZ3JvdW5kQW5pbWF0aW9uKSB7XG4gIE5ldFNpbVZpek5vZGUuY2FsbCh0aGlzLCB1c2VCYWNrZ3JvdW5kQW5pbWF0aW9uKTtcblxuICAvKipcbiAgICogSUQgb2YgdGhlIE5ldFNpbU5vZGUgdGhhdCB0aGlzIE5ldFNpbVZpelNpbXVsYXRpb25Ob2RlIHJlcHJlc2VudHMuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLmNvcnJlc3BvbmRpbmdOb2RlSURfID0gc291cmNlTm9kZS5lbnRpdHlJRDtcblxuICAvKipcbiAgICogVVVJRCBvZiB0aGUgTmV0U2ltTm9kZSB0aGF0IHRoaXMgTmV0U2ltVml6U2ltdWxhdGlvbk5vZGUgcmVwcmVzZW50cy5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHRoaXMuY29ycmVzcG9uZGluZ05vZGVVdWlkXyA9IHNvdXJjZU5vZGUudXVpZDtcblxuICAvKipcbiAgICogSWYgd2UgZW5kIHVwIHJlcHJlc2VudGluZyBhIHJvdXRlciwgd2UgbWF5IG5lZWQgdG8gaG9sZCB0aGUgYXV0by1kbnMgYWRkcmVzc1xuICAgKiB0byBwYXNzIHRvIGEgZmFrZSBhdXRvLWRucyBub2RlLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgdGhpcy5hdXRvRG5zQWRkcmVzcyA9IHVuZGVmaW5lZDtcblxuICB0aGlzLmNvbmZpZ3VyZUZyb20oc291cmNlTm9kZSk7XG4gIHRoaXMucmVuZGVyKCk7XG59O1xuTmV0U2ltVml6U2ltdWxhdGlvbk5vZGUuaW5oZXJpdHMoTmV0U2ltVml6Tm9kZSk7XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7TmV0U2ltTm9kZX0gc291cmNlTm9kZVxuICovXG5OZXRTaW1WaXpTaW11bGF0aW9uTm9kZS5wcm90b3R5cGUuY29uZmlndXJlRnJvbSA9IGZ1bmN0aW9uIChzb3VyY2VOb2RlKSB7XG4gIHRoaXMuY29ycmVzcG9uZGluZ05vZGVJZF8gPSBzb3VyY2VOb2RlLmVudGl0eUlEO1xuICB0aGlzLmNvcnJlc3BvbmRpbmdOb2RlVXVpZF8gPSBzb3VyY2VOb2RlLnV1aWQ7XG5cbiAgdmFyIGxldmVsQ29uZmlnID0gTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpO1xuICBpZiAobGV2ZWxDb25maWcuc2hvd0hvc3RuYW1lSW5HcmFwaCkge1xuICAgIHRoaXMuc2V0TmFtZShzb3VyY2VOb2RlLmdldEhvc3RuYW1lKCkpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc2V0TmFtZShzb3VyY2VOb2RlLmdldFNob3J0RGlzcGxheU5hbWUoKSk7XG4gIH1cblxuICBpZiAoc291cmNlTm9kZS5nZXROb2RlVHlwZSgpID09PSBOb2RlVHlwZS5ST1VURVIpIHtcbiAgICB0aGlzLmlzUm91dGVyID0gdHJ1ZTtcbiAgICB0aGlzLmdldFJvb3QoKS5hZGRDbGFzcygncm91dGVyLW5vZGUnKTtcbiAgICB0aGlzLmF1dG9EbnNBZGRyZXNzID0gc291cmNlTm9kZS5nZXRBdXRvRG5zQWRkcmVzcygpO1xuICAgIGlmIChsZXZlbENvbmZpZy5icm9hZGNhc3RNb2RlKSB7XG4gICAgICB0aGlzLmdldFJvb3QoKS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBJRCBvZiB0aGUgc2ltdWxhdGlvbiBlbnRpdHkgdGhhdCBtYXBzIHRvIHRoaXMgb25lLlxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuTmV0U2ltVml6U2ltdWxhdGlvbk5vZGUucHJvdG90eXBlLmdldENvcnJlc3BvbmRpbmdFbnRpdHlJZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuY29ycmVzcG9uZGluZ05vZGVJZF87XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7TmV0U2ltRW50aXR5fSBlbnRpdHlcbiAqIEByZXR1cm5zIHtib29sZWFufSBUUlVFIG9mIHRoaXMgVml6RWxlbWVudCByZXByZXNlbnRzIHRoZSBnaXZlbiBFbnRpdHkuXG4gKi9cbk5ldFNpbVZpelNpbXVsYXRpb25Ob2RlLnByb3RvdHlwZS5yZXByZXNlbnRzRW50aXR5ID0gZnVuY3Rpb24gKGVudGl0eSkge1xuICByZXR1cm4gdGhpcy5jb3JyZXNwb25kaW5nTm9kZUlkXyA9PT0gZW50aXR5LmVudGl0eUlEICYmXG4gICAgICB0aGlzLmNvcnJlc3BvbmRpbmdOb2RlVXVpZF8gPT09IGVudGl0eS51dWlkO1xufTtcblxuLyoqXG4gKiBLaWxsaW5nIGEgdmlzdWFsaXphdGlvbiBub2RlIHJlbW92ZXMgaXRzIElEIHNvIHRoYXQgaXQgd29uJ3QgY29uZmxpY3Qgd2l0aFxuICogYW5vdGhlciBub2RlIG9mIG1hdGNoaW5nIElEIGJlaW5nIGFkZGVkLCBhbmQgYmVnaW5zIGl0cyBleGl0IGFuaW1hdGlvbi5cbiAqIEBvdmVycmlkZVxuICovXG5OZXRTaW1WaXpTaW11bGF0aW9uTm9kZS5wcm90b3R5cGUua2lsbCA9IGZ1bmN0aW9uICgpIHtcbiAgTmV0U2ltVml6U2ltdWxhdGlvbk5vZGUuc3VwZXJQcm90b3R5cGUua2lsbC5jYWxsKHRoaXMpO1xuICB0aGlzLmNvcnJlc3BvbmRpbmdOb2RlSWRfID0gdW5kZWZpbmVkO1xuICB0aGlzLmNvcnJlc3BvbmRpbmdOb2RlVXVpZF8gPSB1bmRlZmluZWQ7XG59O1xuIiwiLyoqXG4gKiBAb3ZlcnZpZXcgVmlzdWFsaXphdGlvbiBhdXRvLWRucyBub2RlLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBOZXRTaW1HbG9iYWxzID0gcmVxdWlyZSgnLi9OZXRTaW1HbG9iYWxzJyk7XG52YXIgTmV0U2ltVml6Tm9kZSA9IHJlcXVpcmUoJy4vTmV0U2ltVml6Tm9kZScpO1xuXG4vKipcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdXNlQmFja2dyb3VuZEFuaW1hdGlvbiAtIGNoYW5nZXMgdGhlIGJlaGF2aW9yIG9mIHRoaXMgbm9kZVxuICogICAgICAgIHdoZW4gaXQncyBpbiB0aGUgYmFja2dyb3VuZCBsYXllclxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXVnbWVudHMgTmV0U2ltVml6Tm9kZVxuICovXG52YXIgTmV0U2ltVml6QXV0b0Ruc05vZGUgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VCYWNrZ3JvdW5kQW5pbWF0aW9uKSB7XG4gIE5ldFNpbVZpek5vZGUuY2FsbCh0aGlzLCB1c2VCYWNrZ3JvdW5kQW5pbWF0aW9uKTtcblxuICB0aGlzLmdldFJvb3QoKS5hZGRDbGFzcygnYXV0by1kbnMtbm9kZScpO1xuXG4gIHZhciBsZXZlbENvbmZpZyA9IE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKTtcbiAgaWYgKGxldmVsQ29uZmlnLnNob3dIb3N0bmFtZUluR3JhcGgpIHtcbiAgICB0aGlzLnNldE5hbWUoJ2RucycpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc2V0TmFtZSgnRE5TJyk7XG4gIH1cblxuICB0aGlzLnNldElzRG5zTm9kZSh0cnVlKTtcbiAgdGhpcy5yZW5kZXIoKTtcbn07XG5OZXRTaW1WaXpBdXRvRG5zTm9kZS5pbmhlcml0cyhOZXRTaW1WaXpOb2RlKTtcbiIsIi8qKlxuICogQG92ZXJ2aWV3IE5vZGVzIGluIHRoZSB2aXN1YWxpemF0aW9uLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBOZXRTaW1Db25zdGFudHMgPSByZXF1aXJlKCcuL05ldFNpbUNvbnN0YW50cycpO1xudmFyIGpRdWVyeVN2Z0VsZW1lbnQgPSByZXF1aXJlKCcuL05ldFNpbVV0aWxzJykualF1ZXJ5U3ZnRWxlbWVudDtcbnZhciBOZXRTaW1WaXpFbGVtZW50ID0gcmVxdWlyZSgnLi9OZXRTaW1WaXpFbGVtZW50Jyk7XG52YXIgdHdlZW5zID0gcmVxdWlyZSgnLi90d2VlbnMnKTtcblxudmFyIERuc01vZGUgPSBOZXRTaW1Db25zdGFudHMuRG5zTW9kZTtcblxudmFyIE5ldFNpbUdsb2JhbHMgPSByZXF1aXJlKCcuL05ldFNpbUdsb2JhbHMnKTtcblxuLyoqXG4gKiBUaGUgbmFycm93ZXN0IHRoYXQgYSB0ZXh0IGJ1YmJsZSBpcyBhbGxvd2VkIHRvIGJlLlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdFxuICovXG52YXIgVEVYVF9NSU5fV0lEVEggPSAzMDtcblxuLyoqXG4gKiBXaWR0aCB0byBhZGQgdG8gdGhlIGJ1YmJsZSBiZXlvbmQgdGhlIHdpZHRoIG9mIHRoZSBzdHVkZW50J3MgbmFtZS5cbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqL1xudmFyIFRFWFRfUEFERElOR19YID0gMjA7XG5cbi8qKlxuICogSGVpZ2h0IHRvIGFkZCB0byB0aGUgYnViYmxlIGJleW9uZCB0aGUgaGVpZ2h0IG9mIHRoZSBzdHVkZW50J3MgbmFtZS5cbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqL1xudmFyIFRFWFRfUEFERElOR19ZID0gMTA7XG5cbi8qKlxuICogQHBhcmFtIHtib29sZWFufSB1c2VCYWNrZ3JvdW5kQW5pbWF0aW9uIC0gY2hhbmdlcyB0aGUgYmVoYXZpb3Igb2YgdGhpcyBub2RlXG4gKiAgICAgICAgd2hlbiBpdCdzIGluIHRoZSBiYWNrZ3JvdW5kIGxheWVyLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXVnbWVudHMgTmV0U2ltVml6RWxlbWVudFxuICovXG52YXIgTmV0U2ltVml6Tm9kZSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZUJhY2tncm91bmRBbmltYXRpb24pIHtcbiAgTmV0U2ltVml6RWxlbWVudC5jYWxsKHRoaXMpO1xuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZSB7c3RyaW5nfVxuICAgKi9cbiAgdGhpcy5hZGRyZXNzXyA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogQHByaXZhdGUge0Ruc01vZGV9XG4gICAqL1xuICB0aGlzLmRuc01vZGVfID0gdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHN0YXJ0IG9yIHVwZGF0ZSBhbnkgdHdlZW5zIHdoaWxlIHRoZSBub2RlIGlzIGluIHRoZSBiYWNrZ3JvdW5kXG4gICAqIGxheWVyLlxuICAgKiBAcHJpdmF0ZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMudXNlQmFja2dyb3VuZEFuaW1hdGlvbl8gPSB1c2VCYWNrZ3JvdW5kQW5pbWF0aW9uO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuaXNSb3V0ZXIgPSBmYWxzZTtcblxuICAvKipcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLmlzTG9jYWxOb2RlID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5pc0Ruc05vZGUgPSBmYWxzZTtcblxuICAvLyBHaXZlIG91ciByb290IG5vZGUgYSB1c2VmdWwgY2xhc3NcbiAgdmFyIHJvb3QgPSB0aGlzLmdldFJvb3QoKTtcbiAgcm9vdC5hZGRDbGFzcygndml6LW5vZGUnKTtcblxuICAvLyBHb2luZyBmb3IgYSBkaWFtZXRlciBvZiBfY2xvc2VfIHRvIDc1XG4gIHZhciByYWRpdXMgPSAzNztcbiAgdmFyIHRleHRWZXJ0aWNhbE9mZnNldCA9IDQ7XG5cbiAgLyoqXG4gICAqXG4gICAqIEB0eXBlIHtqUXVlcnl9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBqUXVlcnlTdmdFbGVtZW50KCdjaXJjbGUnKVxuICAgICAgLmF0dHIoJ2N4JywgMClcbiAgICAgIC5hdHRyKCdjeScsIDApXG4gICAgICAuYXR0cigncicsIHJhZGl1cylcbiAgICAgIC5hcHBlbmRUbyhyb290KTtcblxuICB0aGlzLm5hbWVHcm91cF8gPSBqUXVlcnlTdmdFbGVtZW50KCdnJylcbiAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDAsMCknKVxuICAgICAgLmFwcGVuZFRvKHJvb3QpO1xuXG4gIHRoaXMuZGlzcGxheU5hbWVfID0galF1ZXJ5U3ZnRWxlbWVudCgndGV4dCcpXG4gICAgICAuYXR0cigneCcsIDApXG4gICAgICAuYXR0cigneScsIHRleHRWZXJ0aWNhbE9mZnNldCk7XG5cbiAgdGhpcy5uYW1lQm94XyA9IGpRdWVyeVN2Z0VsZW1lbnQoJ3JlY3QnKVxuICAgICAgLmFkZENsYXNzKCduYW1lLWJveCcpO1xuXG4gIHRoaXMubmFtZUdyb3VwX1xuICAgICAgLmFwcGVuZCh0aGlzLm5hbWVCb3hfKVxuICAgICAgLmFwcGVuZCh0aGlzLmRpc3BsYXlOYW1lXyk7XG5cbiAgdGhpcy5hZGRyZXNzR3JvdXBfID0galF1ZXJ5U3ZnRWxlbWVudCgnZycpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgwLDMwKScpXG4gICAgICAuaGlkZSgpXG4gICAgICAuYXBwZW5kVG8ocm9vdCk7XG5cbiAgdGhpcy5hZGRyZXNzQm94XyA9IGpRdWVyeVN2Z0VsZW1lbnQoJ3JlY3QnKVxuICAgICAgLmFkZENsYXNzKCdhZGRyZXNzLWJveCcpXG4gICAgICAuYXBwZW5kVG8odGhpcy5hZGRyZXNzR3JvdXBfKTtcblxuICB0aGlzLmFkZHJlc3NUZXh0XyA9IGpRdWVyeVN2Z0VsZW1lbnQoJ3RleHQnKVxuICAgICAgLmFkZENsYXNzKCdhZGRyZXNzLWJveCcpXG4gICAgICAuYXR0cigneCcsIDApXG4gICAgICAuYXR0cigneScsIHRleHRWZXJ0aWNhbE9mZnNldClcbiAgICAgIC50ZXh0KCc/JylcbiAgICAgIC5hcHBlbmRUbyh0aGlzLmFkZHJlc3NHcm91cF8pO1xuXG4gIC8vIFNldCBhbiBpbml0aWFsIGRlZmF1bHQgdHdlZW4gZm9yIHpvb21pbmcgaW4gZnJvbSBub3RoaW5nLlxuICBpZiAodGhpcy51c2VCYWNrZ3JvdW5kQW5pbWF0aW9uXykge1xuICAgIHRoaXMuc25hcFRvU2NhbGUoMCk7XG4gICAgdGhpcy50d2VlblRvU2NhbGUoMC41LCA4MDAsIHR3ZWVucy5lYXNlT3V0RWxhc3RpYyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zbmFwVG9TY2FsZSgwLjUpO1xuICB9XG59O1xuTmV0U2ltVml6Tm9kZS5pbmhlcml0cyhOZXRTaW1WaXpFbGVtZW50KTtcblxuLyoqXG4gKiBGbGFnIHRoaXMgdml6IG5vZGUgYXMgdGhlIHNpbXVsYXRpb24gbG9jYWwgbm9kZS5cbiAqL1xuTmV0U2ltVml6Tm9kZS5wcm90b3R5cGUuc2V0SXNMb2NhbE5vZGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuaXNMb2NhbE5vZGUgPSB0cnVlO1xuICB0aGlzLmdldFJvb3QoKS5hZGRDbGFzcygnbG9jYWwtbm9kZScpO1xufTtcblxuLyoqXG4gKiBDaGFuZ2UgdGhlIGRpc3BsYXkgbmFtZSBvZiB0aGUgdml6IG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZXdOYW1lXG4gKi9cbk5ldFNpbVZpek5vZGUucHJvdG90eXBlLnNldE5hbWUgPSBmdW5jdGlvbiAobmV3TmFtZSkge1xuICB0aGlzLmRpc3BsYXlOYW1lXy50ZXh0KG5ld05hbWUpO1xuICB0aGlzLnJlc2l6ZU5hbWVCb3hfKCk7XG59O1xuXG4vKiogQHByaXZhdGUgKi9cbk5ldFNpbVZpek5vZGUucHJvdG90eXBlLnJlc2l6ZU5hbWVCb3hfID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnJlc2l6ZVJlY3RUb1RleHRfKHRoaXMubmFtZUJveF8sIHRoaXMuZGlzcGxheU5hbWVfKTtcbn07XG5cbi8qKiBAcHJpdmF0ZSAqL1xuTmV0U2ltVml6Tm9kZS5wcm90b3R5cGUucmVzaXplQWRkcmVzc0JveF8gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVzaXplUmVjdFRvVGV4dF8odGhpcy5hZGRyZXNzQm94XywgdGhpcy5hZGRyZXNzVGV4dF8pO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZvciByZXNpemluZyBhIGJhY2tncm91bmQgcm91bmRlZC1yZWN0IHRvIGZpdCB0aGUgZ2l2ZW4gdGV4dCBlbGVtZW50LlxuICogQHBhcmFtIHtqUXVlcnl9IHJlY3RcbiAqIEBwYXJhbSB7alF1ZXJ5fSB0ZXh0XG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1WaXpOb2RlLnByb3RvdHlwZS5yZXNpemVSZWN0VG9UZXh0XyA9IGZ1bmN0aW9uIChyZWN0LCB0ZXh0KSB7XG4gIHRyeSB7XG4gICAgdmFyIGJveCA9IHRleHRbMF0uZ2V0QkJveCgpO1xuICAgIHZhciB3aWR0aCA9IE1hdGgubWF4KFRFWFRfTUlOX1dJRFRILCBib3gud2lkdGggKyBURVhUX1BBRERJTkdfWCk7XG4gICAgdmFyIGhlaWdodCA9IGJveC5oZWlnaHQgKyBURVhUX1BBRERJTkdfWTtcbiAgICB2YXIgaGFsZldpZHRoID0gd2lkdGggLyAyO1xuICAgIHZhciBoYWxmSGVpZ2h0ID0gaGVpZ2h0IC8gMjtcbiAgICByZWN0LmF0dHIoJ3gnLCAtaGFsZldpZHRoKVxuICAgICAgICAuYXR0cigneScsIC1oYWxmSGVpZ2h0KVxuICAgICAgICAuYXR0cigncngnLCBoYWxmSGVpZ2h0KVxuICAgICAgICAuYXR0cigncnknLCBoYWxmSGVpZ2h0KVxuICAgICAgICAuYXR0cignd2lkdGgnLCB3aWR0aClcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGhlaWdodCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBKdXN0IGFsbG93IHRoaXMgdG8gYmUgYSBuby1vcCBpZiBpdCBmYWlscy4gIEluIHNvbWUgYnJvd3NlcnMsXG4gICAgLy8gZ2V0QkJveCB3aWxsIHRocm93IGlmIHRoZSBlbGVtZW50IGlzIG5vdCB5ZXQgaW4gdGhlIERPTS5cbiAgfVxufTtcblxuLyoqXG4gKiBLaWxsaW5nIGEgdmlzdWFsaXphdGlvbiBub2RlIHJlbW92ZXMgaXRzIElEIHNvIHRoYXQgaXQgd29uJ3QgY29uZmxpY3Qgd2l0aFxuICogYW5vdGhlciBub2RlIG9mIG1hdGNoaW5nIElEIGJlaW5nIGFkZGVkLCBhbmQgYmVnaW5zIGl0cyBleGl0IGFuaW1hdGlvbi5cbiAqIEBvdmVycmlkZVxuICovXG5OZXRTaW1WaXpOb2RlLnByb3RvdHlwZS5raWxsID0gZnVuY3Rpb24gKCkge1xuICBOZXRTaW1WaXpOb2RlLnN1cGVyUHJvdG90eXBlLmtpbGwuY2FsbCh0aGlzKTtcbiAgdGhpcy5zdG9wQWxsQW5pbWF0aW9uKCk7XG4gIHRoaXMudHdlZW5Ub1NjYWxlKDAsIDIwMCwgdHdlZW5zLmVhc2VJblF1YWQpO1xufTtcblxuLyoqXG4gKiBQcm92aWRlcyBkcmlmdGluZyBhbmltYXRpb24gZm9yIG5vZGVzIGluIHRoZSBiYWNrZ3JvdW5kLlxuICogQHBhcmFtIHtSdW5Mb29wLkNsb2NrfSBjbG9ja1xuICovXG5OZXRTaW1WaXpOb2RlLnByb3RvdHlwZS50aWNrID0gZnVuY3Rpb24gKGNsb2NrKSB7XG4gIE5ldFNpbVZpek5vZGUuc3VwZXJQcm90b3R5cGUudGljay5jYWxsKHRoaXMsIGNsb2NrKTtcblxuICAvLyBUcmlnZ2VyIGEgbmV3IGRyaWZ0IGlmIHdlJ3JlIGluIHRoZSBiYWNrZ3JvdW5kIGFuZCB0aGUgbGFzdCBvbmUgZmluaXNoZWQuXG4gIGlmICh0aGlzLnVzZUJhY2tncm91bmRBbmltYXRpb25fICYmICF0aGlzLmlzRm9yZWdyb3VuZCAmJlxuICAgICAgdGhpcy50d2VlbnNfLmxlbmd0aCA9PT0gMCkge1xuICAgIHZhciByYW5kb21YID0gMzAwICogTWF0aC5yYW5kb20oKSAtIDE1MDtcbiAgICB2YXIgcmFuZG9tWSA9IDMwMCAqIE1hdGgucmFuZG9tKCkgLSAxNTA7XG4gICAgdGhpcy50d2VlblRvUG9zaXRpb24ocmFuZG9tWCwgcmFuZG9tWSwgMjAwMDAsIHR3ZWVucy5lYXNlSW5PdXRRdWFkKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXaGVuIHZpc2libGUsIHJ1bnMgZXZlcnkgZnJhbWVcbiAqIEBwYXJhbSB7UnVuTG9vcC5DbG9ja30gW2Nsb2NrXVxuICovXG5OZXRTaW1WaXpOb2RlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoY2xvY2spIHtcbiAgTmV0U2ltVml6Tm9kZS5zdXBlclByb3RvdHlwZS5yZW5kZXIuY2FsbCh0aGlzLCBjbG9jayk7XG5cbiAgLy8gSWYgY3VycmVudGx5IGFuaW1hdGluZywgYWRqdXN0IHRleHQgYm94IHNpemVzIHRvIG1hdGNoXG4gIGlmICh0aGlzLmlzRm9yZWdyb3VuZCAmJiB0aGlzLnR3ZWVuc18ubGVuZ3RoID4gMCkge1xuICAgIHRoaXMucmVzaXplTmFtZUJveF8oKTtcbiAgICB0aGlzLnJlc2l6ZUFkZHJlc3NCb3hfKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtib29sZWFufSBpc0ZvcmVncm91bmRcbiAqL1xuTmV0U2ltVml6Tm9kZS5wcm90b3R5cGUub25EZXB0aENoYW5nZSA9IGZ1bmN0aW9uIChpc0ZvcmVncm91bmQpIHtcbiAgTmV0U2ltVml6Tm9kZS5zdXBlclByb3RvdHlwZS5vbkRlcHRoQ2hhbmdlLmNhbGwodGhpcywgaXNGb3JlZ3JvdW5kKTtcblxuICAvLyBEb24ndCBhZGQgdHdlZW5zIGlmIHRoaXMgbm9kZSBoYXMgYmVlbiBraWxsZWRcbiAgaWYgKHRoaXMuaXNEeWluZygpIHx8IHRoaXMuaXNEZWFkKCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLnR3ZWVuc18ubGVuZ3RoID0gMDtcbiAgaWYgKGlzRm9yZWdyb3VuZCkge1xuICAgIHRoaXMudHdlZW5Ub1NjYWxlKDEsIDYwMCwgdHdlZW5zLmVhc2VPdXRFbGFzdGljKTtcbiAgfSBlbHNlIGlmICh0aGlzLnVzZUJhY2tncm91bmRBbmltYXRpb25fKSB7XG4gICAgdGhpcy50d2VlblRvU2NhbGUoMC41LCA2MDAsIHR3ZWVucy5lYXNlT3V0RWxhc3RpYyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zbmFwVG9TY2FsZSgwLjUpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBhZGRyZXNzXG4gKi9cbk5ldFNpbVZpek5vZGUucHJvdG90eXBlLnNldEFkZHJlc3MgPSBmdW5jdGlvbiAoYWRkcmVzcykge1xuICB0aGlzLmFkZHJlc3NfID0gYWRkcmVzcztcbiAgdGhpcy51cGRhdGVBZGRyZXNzRGlzcGxheSgpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0ROU01vZGV9IG5ld0Ruc01vZGVcbiAqL1xuTmV0U2ltVml6Tm9kZS5wcm90b3R5cGUuc2V0RG5zTW9kZSA9IGZ1bmN0aW9uIChuZXdEbnNNb2RlKSB7XG4gIHRoaXMuZG5zTW9kZV8gPSBuZXdEbnNNb2RlO1xuICB0aGlzLnVwZGF0ZUFkZHJlc3NEaXNwbGF5KCk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNEbnNOb2RlXG4gKi9cbk5ldFNpbVZpek5vZGUucHJvdG90eXBlLnNldElzRG5zTm9kZSA9IGZ1bmN0aW9uIChpc0Ruc05vZGUpIHtcbiAgdGhpcy5pc0Ruc05vZGUgPSBpc0Ruc05vZGU7XG4gIHRoaXMudXBkYXRlQWRkcmVzc0Rpc3BsYXkoKTtcbn07XG5cbk5ldFNpbVZpek5vZGUucHJvdG90eXBlLnVwZGF0ZUFkZHJlc3NEaXNwbGF5ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbGV2ZWxDb25maWcgPSBOZXRTaW1HbG9iYWxzLmdldExldmVsQ29uZmlnKCk7XG5cbiAgLy8gSWYgd2UgYXJlIG5ldmVyIGFzc2lnbmVkIGFuIGFkZHJlc3MsIGRvbid0IHRyeSB0byBzaG93IG9uZS5cbiAgLy8gSW4gYnJvYWRjYXN0IG1vZGUgd2Ugd2lsbCBiZSBhc3NpZ25lZCBhZGRyZXNzZXMgYnV0IG5ldmVyIHVzZSB0aGVtLCBzb1xuICAvLyAgIHRoZXkgc2hvdWxkIGJlIGhpZGRlbi5cbiAgLy8gUm91dGVycyBuZXZlciBzaG93IHRoZWlyIGFkZHJlc3MuXG4gIGlmICh0aGlzLmFkZHJlc3NfID09PSB1bmRlZmluZWQgfHwgbGV2ZWxDb25maWcuYnJvYWRjYXN0TW9kZSB8fCB0aGlzLmlzUm91dGVyKSB7XG4gICAgdGhpcy5hZGRyZXNzR3JvdXBfLmhpZGUoKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLmFkZHJlc3NHcm91cF8uc2hvdygpO1xuICBpZiAodGhpcy5kbnNNb2RlXyA9PT0gRG5zTW9kZS5OT05FKSB7XG4gICAgdGhpcy5hZGRyZXNzVGV4dF8udGV4dCh0aGlzLmFkZHJlc3NfICE9PSB1bmRlZmluZWQgPyB0aGlzLmFkZHJlc3NfIDogJz8nKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmFkZHJlc3NUZXh0Xy50ZXh0KHRoaXMuaXNMb2NhbE5vZGUgfHwgdGhpcy5pc0Ruc05vZGUgPyB0aGlzLmFkZHJlc3NfIDogJz8nKTtcbiAgfVxuICB0aGlzLnJlc2l6ZUFkZHJlc3NCb3hfKCk7XG59O1xuIiwiLyoqXG4gKiBAb3ZlcnZpZXcgQmFzZSB0eXBlIGZvciB2aXNpYmxlIGVsZW1lbnRzIGluIHRoZSB2aXN1YWxpemF0aW9uLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIGpRdWVyeVN2Z0VsZW1lbnQgPSByZXF1aXJlKCcuL05ldFNpbVV0aWxzJykualF1ZXJ5U3ZnRWxlbWVudDtcbnZhciB0d2VlbnMgPSByZXF1aXJlKCcuL3R3ZWVucycpO1xuXG4vKipcbiAqIEEgVml6RWxlbWVudCBpcyBhbiBvYmplY3QgdGhhdCAgaGFzIGEgcmVwcmVzZW50YXRpb24gaW4gdGhlIG5ldHdvcmtcbiAqIHZpc3VhbGl6YXRpb24uICBJdHMgcm9sZSBpcyB0byBtYWludGFpbiB0aGF0IHZpc3VhbCByZXByZXNlbnRhdGlvbi5cbiAqIEEgVml6RWxlbWVudCBoYXMgaGVscGVycyBmb3IgcG9zaXRpb25pbmcsIHNjYWxpbmcgYW5kIHR3ZWVuaW5nLlxuICogRXZlcnkgVml6RWxlbWVudCBoYXMgYSByb290IGVsZW1lbnQgd2hpY2ggaXMgYSA8Zz4gdGFnLCBhbiBTVkcgXCJncm91cFwiXG4gKiB0aGF0IGNvbnRhaW5zIHRoZSBvdGhlciBjb21wb25lbnRzIHRoYXQgd2lsbCBhY3R1YWxseSBkcmF3LlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgTmV0U2ltVml6RWxlbWVudCA9IG1vZHVsZS5leHBvcnRzID0gIGZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLnBvc1ggPSAwO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5wb3NZID0gMDtcblxuICAvKipcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRoaXMuc2NhbGUgPSAxO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuaXNGb3JlZ3JvdW5kID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFJvb3QgU1ZHIDxnPiAoZ3JvdXApIGVsZW1lbnQgZm9yIHRoaXMgb2JqZWN0LlxuICAgKiBAdHlwZSB7alF1ZXJ5fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5yb290R3JvdXBfID0galF1ZXJ5U3ZnRWxlbWVudCgnZycpO1xuXG4gIC8qKlxuICAgKiBTZXQgb2YgdHdlZW5zIHdlIHNob3VsZCBjdXJyZW50bHkgYmUgcnVubmluZyBvbiB0aGlzIG5vZGUuXG4gICAqIFByb2Nlc3NlZCBieSB0aWNrKClcbiAgICogQHR5cGUge0FycmF5LjxleHBvcnRzLlR3ZWVuVmFsdWVUbz59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnR3ZWVuc18gPSBbXTtcblxuICAvKipcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmlzRGVhZF8gPSBmYWxzZTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge2pRdWVyeX0gd3JhcHBlciBhcm91bmQgcm9vdCA8Zz4gZWxlbWVudFxuICovXG5OZXRTaW1WaXpFbGVtZW50LnByb3RvdHlwZS5nZXRSb290ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5yb290R3JvdXBfO1xufTtcblxuLyoqXG4gKiBCZWdpbnMgdGhlIHByb2Nlc3Mgb2YgZGVzdHJveWluZyB0aGlzIFZpekVsZW1lbnQuICBPbmNlIHN0YXJ0ZWQsIHRoaXNcbiAqIHByb2Nlc3MgY2Fubm90IGJlIHN0b3BwZWQuXG4gKiBUaGlzIG1ldGhvZCBjYW4gYmUgb3ZlcnJpZGRlbiB0byB0cmlnZ2VyIGFuIFwib24tZGVhdGhcIiBhbmltYXRpb24uXG4gKi9cbk5ldFNpbVZpekVsZW1lbnQucHJvdG90eXBlLmtpbGwgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuaXNEZWFkXyA9IHRydWU7XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHtib29sZWFufSB3aGV0aGVyIHRoaXMgZW50aXR5IGlzIGRvbmUgd2l0aCBpdHMgZGVhdGggYW5pbWF0aW9uXG4gKiAgICAgICAgICBhbmQgaXMgcmVhZHkgdG8gYmUgY2xlYW5lZCB1cCBieSB0aGUgdmlzdWFsaXphdGlvbiBtYW5hZ2VyLlxuICogICAgICAgICAgVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gaGVyZSByZXR1cm5zIFRSVUUgYXMgc29vbiBhcyBraWxsKClcbiAqICAgICAgICAgIGlzIGNhbGxlZCBhbmQgYWxsIGFuaW1hdGlvbnMgYXJlIGNvbXBsZXRlZC5cbiAqL1xuTmV0U2ltVml6RWxlbWVudC5wcm90b3R5cGUuaXNEZWFkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5pc0RlYWRfICYmIHRoaXMudHdlZW5zXy5sZW5ndGggPT09IDA7XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHtib29sZWFufSB3aGV0aGVyIHRoaXMgZW50aXR5IGlzIHBsYXlpbmcgaXRzIGZpbmFsIGFuaW1hdGlvblxuICogICAgICAgICAgYW5kIHdpbGwgYmUgcmVhZHkgdG8gYmUgY2xlYW5lZCB1cCBieSB0aGUgdmlzdWFsaXphdGlvbiBtYW5hZ2VyXG4gKiAgICAgICAgICBzb29uLlxuICovXG5OZXRTaW1WaXpFbGVtZW50LnByb3RvdHlwZS5pc0R5aW5nID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5pc0RlYWRfICYmIHRoaXMudHdlZW5zXy5sZW5ndGggPiAwO1xufTtcblxuLyoqXG4gKiBVcGRhdGUgYWxsIG9mIHRoZSB0d2VlbnMgY3VycmVudGx5IHJ1bm5pbmcgb24gdGhpcyBWaXpFbGVtZW50ICh3aGljaCB3aWxsXG4gKiBwcm9iYWJseSBtb2RpZnkgaXRzIHByb3BlcnRpZXMpIGFuZCB0aGVuIHJlbW92ZSBhbnkgdHdlZW5zIHRoYXQgYXJlIGNvbXBsZXRlZFxuICogZnJvbSB0aGUgbGlzdC5cbiAqL1xuTmV0U2ltVml6RWxlbWVudC5wcm90b3R5cGUudGljayA9IGZ1bmN0aW9uICgpIHtcbn07XG5cbi8qKlxuICogVXBkYXRlIHRoZSByb290IGdyb3VwJ3MgcHJvcGVydGllcyB0byByZWZsZWN0IG91ciBjdXJyZW50IHBvc2l0aW9uXG4gKiBhbmQgc2NhbGUuXG4gKiBAcGFyYW0ge1J1bkxvb3AuQ2xvY2t9IFtjbG9ja10gLSBzb21ldGltZXMgb21pdHRlZCBkdXJpbmcgc2V0dXBcbiAqL1xuTmV0U2ltVml6RWxlbWVudC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKGNsb2NrKSB7XG4gIGlmICghY2xvY2spIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBjYWNoZSBpbml0aWFsIHNldHRpbmdzIGhlcmU7IHdlIGNoZWNrIHRoZW0gbGF0ZXIgdG8gc2VlIGlmIGFueXRoaW5nXG4gIC8vIGhhcyBhY3R1YWxseSBjaGFuZ2VkXG4gIHZhciBwb3NYID0gdGhpcy5wb3NYO1xuICB2YXIgcG9zWSA9IHRoaXMucG9zWTtcbiAgdmFyIHNjYWxlID0gdGhpcy5zY2FsZTtcblxuICAvLyBVcGRhdGUgdHdlZW5zIGluIHRoZSByZW5kZXIgbG9vcCBzbyB0aGV5IGFyZSB2ZXJ5IHNtb290aFxuICB0aGlzLnR3ZWVuc18uZm9yRWFjaChmdW5jdGlvbiAodHdlZW4pIHtcbiAgICB0d2Vlbi50aWNrKGNsb2NrKTtcbiAgfSk7XG4gIHRoaXMudHdlZW5zXyA9IHRoaXMudHdlZW5zXy5maWx0ZXIoZnVuY3Rpb24gKHR3ZWVuKSB7XG4gICAgcmV0dXJuICF0d2Vlbi5pc0ZpbmlzaGVkO1xuICB9KTtcblxuICAvLyBJZiBub3RoaW5nIGhhcyBjaGFuZ2VkLCBkb24ndCBib3RoZXIgdG8gdXBkYXRlIHRyYW5zZm9ybVxuICBpZiAocG9zWCAhPT0gdGhpcy5wb3NYIHx8XG4gICAgICBwb3NZICE9PSB0aGlzLnBvc1kgfHxcbiAgICAgIHNjYWxlICE9PSB0aGlzLnNjYWxlKSB7XG4gICAgdmFyIHRyYW5zZm9ybSA9ICd0cmFuc2xhdGUoJyArIHRoaXMucG9zWCArICcgJyArIHRoaXMucG9zWSArICcpJyArXG4gICAgICAgICcgc2NhbGUoJyArIHRoaXMuc2NhbGUgKyAnKSc7XG4gICAgdGhpcy5yb290R3JvdXBfLmF0dHIoJ3RyYW5zZm9ybScsIHRyYW5zZm9ybSk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtib29sZWFufSBpc0ZvcmVncm91bmRcbiAqL1xuTmV0U2ltVml6RWxlbWVudC5wcm90b3R5cGUub25EZXB0aENoYW5nZSA9IGZ1bmN0aW9uIChpc0ZvcmVncm91bmQpIHtcbiAgdGhpcy5pc0ZvcmVncm91bmQgPSBpc0ZvcmVncm91bmQ7XG59O1xuXG4vKipcbiAqIFRocm93IGF3YXkgYWxsIGV4aXN0aW5nIHR3ZWVucyBvbiB0aGlzIG9iamVjdC5cbiAqL1xuTmV0U2ltVml6RWxlbWVudC5wcm90b3R5cGUuc3RvcEFsbEFuaW1hdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy50d2VlbnNfLmxlbmd0aCA9IDA7XG59O1xuXG4vKipcbiAqIFN0b3BzIGFueSBleGlzdGluZyBtb3Rpb24gYW5pbWF0aW9uIGFuZCBiZWdpbnMgYW4gYW5pbWF0ZWQgbW90aW9uIHRvIHRoZVxuICogZ2l2ZW4gY29vcmRpbmF0ZXMuICBOb3RlOiBUaGlzIGFuaW1hdGVzIHRoZSBWaXpFbGVtZW50J3Mgcm9vdCBncm91cC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBuZXdYIGdpdmVuIGluIFNWRyBwb2ludHNcbiAqIEBwYXJhbSB7bnVtYmVyfSBuZXdZIGdpdmVuIGluIFNWRyBwb2ludHNcbiAqIEBwYXJhbSB7bnVtYmVyfSBbZHVyYXRpb249NjAwXSBpbiBtaWxsaXNlY29uZHNcbiAqIEBwYXJhbSB7VHdlZW5GdW5jdGlvbn0gW3R3ZWVuRnVuY3Rpb249bGluZWFyXVxuICovXG5OZXRTaW1WaXpFbGVtZW50LnByb3RvdHlwZS50d2VlblRvUG9zaXRpb24gPSBmdW5jdGlvbiAobmV3WCwgbmV3WSwgZHVyYXRpb24sXG4gICAgdHdlZW5GdW5jdGlvbikge1xuICAvLyBEb24ndCBhY2NlcHQgbmV3IGFuaW1hdGlvbiBjb21tYW5kcyBpZiB3ZSd2ZSBhbHJlYWR5IGJlZW4ga2lsbGVkXG4gIGlmICh0aGlzLmlzRHlpbmcoKSB8fCB0aGlzLmlzRGVhZCgpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gUmVtb3ZlIGFueSBleGlzdGluZyB0d2VlbnMgY29udHJvbGxpbmcgcG9zWCBvciBwb3NZXG4gIHRoaXMucmVtb3ZlQWxsVHdlZW5zT25Qcm9wZXJ0aWVzKFsncG9zWCcsICdwb3NZJ10pO1xuXG4gIC8vIEFkZCB0d28gbmV3IHR3ZWVucywgb25lIGZvciBlYWNoIGF4aXNcbiAgaWYgKGR1cmF0aW9uID4gMCkge1xuICAgIHRoaXMudHdlZW5zXy5wdXNoKG5ldyB0d2VlbnMuVHdlZW5WYWx1ZVRvKHRoaXMsICdwb3NYJywgbmV3WCwgZHVyYXRpb24sXG4gICAgICAgIHR3ZWVuRnVuY3Rpb24pKTtcbiAgICB0aGlzLnR3ZWVuc18ucHVzaChuZXcgdHdlZW5zLlR3ZWVuVmFsdWVUbyh0aGlzLCAncG9zWScsIG5ld1ksIGR1cmF0aW9uLFxuICAgICAgICB0d2VlbkZ1bmN0aW9uKSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5wb3NYID0gbmV3WDtcbiAgICB0aGlzLnBvc1kgPSBuZXdZO1xuICB9XG5cbn07XG5cbi8qKlxuICogQWxpYXMgZm9yIGNhbGxpbmcgdHdlZW5Ub1Bvc2l0aW9uIHdpdGggYSB6ZXJvIGR1cmF0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gbmV3WCBnaXZlbiBpbiBTVkcgcG9pbnRzXG4gKiBAcGFyYW0ge251bWJlcn0gbmV3WSBnaXZlbiBpbiBTVkcgcG9pbnRzXG4gKi9cbk5ldFNpbVZpekVsZW1lbnQucHJvdG90eXBlLnNuYXBUb1Bvc2l0aW9uID0gZnVuY3Rpb24gKG5ld1gsIG5ld1kpIHtcbiAgdGhpcy50d2VlblRvUG9zaXRpb24obmV3WCwgbmV3WSwgMCk7XG59O1xuXG4vKipcbiAqIFN0b3BzIGFueSBleGlzdGluZyBhbmltYXRpb24gb2YgdGhlIGVudGl0eSdzIHNjYWxlIGFuZCBiZWdpbnMgYW4gYW5pbWF0ZWRcbiAqIGNoYW5nZSB0byB0aGUgZ2l2ZW4gdGFyZ2V0IHNjYWxlIHZhbHVlLiAgTm90ZTogdGhpcyBhbmltYXRlcyB0aGUgVml6RWxlbWVudCdzXG4gKiByb290IGdyb3VwLlxuICogQHBhcmFtIHtudW1iZXJ9IG5ld1NjYWxlIHdoZXJlIDEuMCBpcyAxMDAlICh1bnNjYWxlZClcbiAqIEBwYXJhbSB7bnVtYmVyfSBbZHVyYXRpb249NjAwXSBpbiBtaWxsaXNlY29uZHNcbiAqIEBwYXJhbSB7VHdlZW5GdW5jdGlvbn0gW3R3ZWVuRnVuY3Rpb249bGluZWFyXVxuICovXG5OZXRTaW1WaXpFbGVtZW50LnByb3RvdHlwZS50d2VlblRvU2NhbGUgPSBmdW5jdGlvbiAobmV3U2NhbGUsIGR1cmF0aW9uLFxuICAgIHR3ZWVuRnVuY3Rpb24pIHtcbiAgLy8gUmVtb3ZlIGV4aXN0aW5nIHNjYWxlIHR3ZWVuc1xuICB0aGlzLnJlbW92ZUFsbFR3ZWVuc09uUHJvcGVydHkoJ3NjYWxlJyk7XG5cbiAgLy8gT24gbm9uemVybyBkdXJhdGlvbiwgYWRkIHR3ZWVuIHRvIHRhcmdldCBzY2FsZS4gIE90aGVyd2lzZSBqdXN0IHNldCBpdC5cbiAgaWYgKGR1cmF0aW9uID4gMCkge1xuICAgIHRoaXMudHdlZW5zXy5wdXNoKG5ldyB0d2VlbnMuVHdlZW5WYWx1ZVRvKHRoaXMsICdzY2FsZScsIG5ld1NjYWxlLCBkdXJhdGlvbixcbiAgICAgICAgdHdlZW5GdW5jdGlvbikpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc2NhbGUgPSBuZXdTY2FsZTtcbiAgfVxufTtcblxuTmV0U2ltVml6RWxlbWVudC5wcm90b3R5cGUuZG9BZnRlckRlbGF5ID0gZnVuY3Rpb24gKGRlbGF5LCBjYWxsYmFjaykge1xuICBpZiAoZGVsYXkgPiAwKSB7XG4gICAgdGhpcy50d2VlbnNfLnB1c2gobmV3IHR3ZWVucy5Eb0FmdGVyRGVsYXkodGhpcywgZGVsYXksIGNhbGxiYWNrKSk7XG4gIH0gZWxzZSB7XG4gICAgY2FsbGJhY2soKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgKHN0b3ApIGFsbCBhY3RpdmUgdHdlZW5zIHRoYXQgY29udHJvbCB0aGUgZ2l2ZW4gcHJvcGVydHkgb24gdGhpc1xuICogdmlzdWFsaXphdGlvbiBlbnRpdHkuXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlOYW1lXG4gKi9cbk5ldFNpbVZpekVsZW1lbnQucHJvdG90eXBlLnJlbW92ZUFsbFR3ZWVuc09uUHJvcGVydHkgPSBmdW5jdGlvbiAocHJvcGVydHlOYW1lKSB7XG4gIHRoaXMucmVtb3ZlQWxsVHdlZW5zT25Qcm9wZXJ0aWVzKFtwcm9wZXJ0eU5hbWVdKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIChzdG9wKSBhbGwgYWN0aXZlIHR3ZWVucyB0aGF0IGNvbnRyb2wgYW55IG9mIHRoZSBnaXZlbiBwcm9wZXJ0aWVzXG4gKiBvbiB0aGlzIHZpc3VhbGl6YXRpb24gZW50aXR5LlxuICogQHBhcmFtIHtzdHJpbmdbXX0gcHJvcGVydHlOYW1lc1xuICovXG5OZXRTaW1WaXpFbGVtZW50LnByb3RvdHlwZS5yZW1vdmVBbGxUd2VlbnNPblByb3BlcnRpZXMgPSBmdW5jdGlvbiAocHJvcGVydHlOYW1lcykge1xuICB0aGlzLnR3ZWVuc18gPSB0aGlzLnR3ZWVuc18uZmlsdGVyKGZ1bmN0aW9uICh0d2Vlbikge1xuICAgIHZhciB0YXJnZXRzVGhpc0VudGl0eSA9IHR3ZWVuLnRhcmdldCA9PT0gdGhpcztcbiAgICB2YXIgaXNSZW1vdmFibGVQcm9wZXJ0eSA9IHByb3BlcnR5TmFtZXMuc29tZShmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmV0dXJuIHR3ZWVuLnByb3BlcnR5TmFtZSA9PT0gbmFtZTtcbiAgICB9KTtcblxuICAgIC8vIEludmVydCBmb3IgZmlsdGVyKCkgYmVjYXVzZSB3ZSB3YW50IHRvIGtlZXAgZXZlcnl0aGluZyBCVVQgdGhlIG1hdGNoZWRcbiAgICAvLyBwcm9wZXJ0aWVzXG4gICAgcmV0dXJuICEodGFyZ2V0c1RoaXNFbnRpdHkgJiYgaXNSZW1vdmFibGVQcm9wZXJ0eSk7XG4gIH0sIHRoaXMpO1xufTtcblxuLyoqXG4gKiBBbGlhcyBmb3IgY2FsbGluZyB0d2VlblRvU2NhbGUgd2l0aCBhIHplcm8gZHVyYXRpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gbmV3U2NhbGUgd2hlcmUgMS4wIGlzIDEwMCUgKHVuc2NhbGVkKVxuICovXG5OZXRTaW1WaXpFbGVtZW50LnByb3RvdHlwZS5zbmFwVG9TY2FsZSA9IGZ1bmN0aW9uIChuZXdTY2FsZSkge1xuICB0aGlzLnR3ZWVuVG9TY2FsZShuZXdTY2FsZSwgMCk7XG59O1xuIiwiLyoqXG4gKiBAb3ZlcnZpZXcgVHdlZW4gZnVuY3Rpb25zIHVzZWQgdG8gYW5pbWF0ZSB2aXN1YWxpemF0aW9uIGVsZW1lbnRzLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHZhbHVlT3IgPSByZXF1aXJlKCcuLi91dGlscycpLnZhbHVlT3I7XG5cbi8qKlxuICogRGVmYXVsdCB0d2VlbiBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHNcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqL1xudmFyIERFRkFVTFRfVFdFRU5fRFVSQVRJT04gPSA2MDA7XG5cbi8qKlxuICogQSBmb3VyLWFyZyBpbnRlcnBvbGF0aW9uIGZ1bmN0aW9uLlxuICpcbiAqIEB0eXBlZGVmIHtmdW5jdGlvbn0gVHdlZW5GdW5jdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IHQgLSBjdXJyZW50IFRpbWUsIGluIG1pbGxpc2Vjb25kcyBzaW5jZSB0d2VlbiBiZWdhblxuICogQHBhcmFtIHtudW1iZXJ9IGIgLSBCZWdpbiB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IGMgLSBmaW5hbCBDaGFuZ2UgaW4gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBkIC0gdG90YWwgdHdlZW4gRHVyYXRpb25cbiAqIEByZXR1cm5zIHtudW1iZXJ9IHRoZSBpbnRlcnBvbGF0ZWQgdmFsdWUgZm9yIHRoZSBjdXJyZW50IHRpbWVcbiAqL1xuXG4vKipcbiAqIEludGVycG9sYXRlcyB3aXRoIGEgbGl0dGxlIGJhY2stYW5kLWZvcnRoIG92ZXIgdGhlIHRhcmdldCB2YWx1ZSBhdCB0aGUgZW5kLlxuICogQHR5cGUge1R3ZWVuRnVuY3Rpb259XG4gKi9cbmV4cG9ydHMuZWFzZU91dEVsYXN0aWMgPSBmdW5jdGlvbiAodCwgYiwgYywgZCkge1xuICB2YXIgcywgcCwgYTtcbiAgcz0xLjcwMTU4O1xuICBwPTA7XG4gIGE9YztcbiAgaWYgKHQ9PT0wKSB7XG4gICAgcmV0dXJuIGI7XG4gIH1cbiAgaWYgKCh0Lz1kKT09PTEpIHtcbiAgICByZXR1cm4gYitjO1xuICB9XG4gIGlmICghcCkge1xuICAgIHA9ZCowLjM7XG4gIH1cbiAgaWYgKGEgPCBNYXRoLmFicyhjKSkge1xuICAgIGE9YztcbiAgICBzPXAvNDtcbiAgfSBlbHNlIHtcbiAgICBzID0gcC8oMipNYXRoLlBJKSAqIE1hdGguYXNpbiAoYy9hKTtcbiAgfVxuICByZXR1cm4gYSpNYXRoLnBvdygyLC0xMCp0KSAqIE1hdGguc2luKCAodCpkLXMpKigyKk1hdGguUEkpL3AgKSArIGMgKyBiO1xufTtcblxuLyoqXG4gKiBJbnRlcnBvbGF0ZXMsIGFjY2VsZXJhdGluZyBhcyBpdCBnb2VzLlxuICogQHR5cGUge1R3ZWVuRnVuY3Rpb259XG4gKi9cbmV4cG9ydHMuZWFzZUluUXVhZCA9IGZ1bmN0aW9uICh0LCBiLCBjLCBkKSB7XG4gIHJldHVybiBjKih0Lz1kKSp0ICsgYjtcbn07XG5cbi8qKlxuICogSW50ZXJwb2xhdGVzLCBkZWNlbGVyYXRpbmcgYXMgaXQgZ29lcy5cbiAqIEB0eXBlIHtUd2VlbkZ1bmN0aW9ufVxuICovXG5leHBvcnRzLmVhc2VPdXRRdWFkID0gZnVuY3Rpb24gKHQsIGIsIGMsIGQpIHtcbiAgcmV0dXJuIC1jKih0Lz1kKSoodC0yKSArIGI7XG59O1xuXG5leHBvcnRzLmVhc2VJbk91dFF1YWQgPSBmdW5jdGlvbiAodCwgYiwgYywgZCkge1xuICBpZiAoKHQvPWQvMikgPCAxKSB7XG4gICAgcmV0dXJuIGMvMip0KnQgKyBiO1xuICB9XG4gIHJldHVybiAtYy8yICogKCgtLXQpKih0LTIpIC0gMSkgKyBiO1xufTtcblxuLyoqXG4gKiBMaW5lYXIgaW50ZXJwb2xhdGlvblxuICogQHR5cGUge1R3ZWVuRnVuY3Rpb259XG4gKi9cbmV4cG9ydHMubGluZWFyID0gZnVuY3Rpb24gKHQsIGIsIGMsIGQpIHtcbiAgcmV0dXJuIGMgKiAodCAvIGQpICsgYjtcbn07XG5cbi8qKlxuICogV3JhcHMgYSB0d2VlbiBtZXRob2Qgd2l0aCB0aGUgc3RhdGUgaXQgbmVlZHMgdG8gYW5pbWF0ZSBhIHByb3BlcnR5LlxuICogT24gY3JlYXRpb24sIGFzc3VtZXMgdGhhdCBwcm9wZXJ0eSdzIGN1cnJlbnQgdmFsdWUgZm9yIHN0YXJ0IHZhbHVlcy5cbiAqIE11c3QgYmUgdGlja2VkIHRvIHByb2dyZXNzIHRvd2FyZCBjb21wbGV0aW9uLlxuICpcbiAqIEBwYXJhbSB7IU9iamVjdH0gdGFyZ2V0IC0gVGhlIG9iamVjdCBvd25pbmcgdGhlIHByb3BlcnR5IHdlIHdhbnQgdG8gYW5pbWF0ZVxuICogQHBhcmFtIHshc3RyaW5nfSBwcm9wZXJ0eU5hbWUgLSBNdXN0IGJlIGEgdmFsaWQgcHJvcGVydHkgb24gdGFyZ2V0XG4gKiBAcGFyYW0geyFudW1iZXJ9IGVuZFZhbHVlIC0gVGhlIGRlc2lyZWQgZmluYWwgdmFsdWUgb2YgdGhlIHByb3BlcnR5XG4gKiBAcGFyYW0ge251bWJlcn0gW2R1cmF0aW9uXSAtIEhvdyBsb25nIHRoZSB0d2VlbiBzaG91bGQgdGFrZSBpbiBtaWxsaXNlY29uZHMsXG4gKiAgICAgICAgZGVmYXVsdCA2MDBtc1xuICogQHBhcmFtIHtUd2VlbkZ1bmN0aW9ufSBbdHdlZW5GdW5jdGlvbl0gLSBBIHR3ZWVuIGZ1bmN0aW9uLCBkZWZhdWx0IGxpbmVhclxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmV4cG9ydHMuVHdlZW5WYWx1ZVRvID0gZnVuY3Rpb24gKHRhcmdldCwgcHJvcGVydHlOYW1lLCBlbmRWYWx1ZSwgZHVyYXRpb24sXG4gICAgdHdlZW5GdW5jdGlvbikge1xuICAvKipcbiAgICogV2lsbCBiZSBzZXQgdG8gVFJVRSB3aGVuIHR3ZWVuIGlzIGNvbXBsZXRlZC5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLmlzRmluaXNoZWQgPSBmYWxzZTtcblxuICAvKipcbiAgICogV2lsbCBiZSBzZXQgb24gb3VyIGZpcnN0IHRpY2suXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnN0YXJ0VGltZV8gPSB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICB0aGlzLnRhcmdldCA9IHRhcmdldDtcblxuICAvKipcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucHJvcGVydHlOYW1lID0gcHJvcGVydHlOYW1lO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7VHdlZW5GdW5jdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMudHdlZW5GdW5jdGlvbl8gPSB2YWx1ZU9yKHR3ZWVuRnVuY3Rpb24sIGV4cG9ydHMubGluZWFyKTtcblxuICAvKipcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuc3RhcnRWYWx1ZV8gPSB0YXJnZXRbcHJvcGVydHlOYW1lXTtcblxuICAvKipcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuZGVsdGFWYWx1ZV8gPSBlbmRWYWx1ZSAtIHRoaXMuc3RhcnRWYWx1ZV87XG5cbiAgLyoqXG4gICAqIER1cmF0aW9uIG9mIHR3ZWVuIGluIG1pbGxpc2Vjb25kc1xuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5kdXJhdGlvbl8gPSB2YWx1ZU9yKGR1cmF0aW9uLCBERUZBVUxUX1RXRUVOX0RVUkFUSU9OKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtSdW5Mb29wLmNsb2NrfSBjbG9ja1xuICovXG5leHBvcnRzLlR3ZWVuVmFsdWVUby5wcm90b3R5cGUudGljayA9IGZ1bmN0aW9uIChjbG9jaykge1xuICBpZiAodGhpcy5zdGFydFRpbWVfID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLnN0YXJ0VGltZV8gPSBjbG9jay50aW1lO1xuICB9XG5cbiAgdmFyIHRpbWVTaW5jZVN0YXJ0ID0gY2xvY2sudGltZSAtIHRoaXMuc3RhcnRUaW1lXztcblxuICBpZiAodGhpcy5kZWx0YVZhbHVlXyAhPT0gMCkge1xuICAgIHRoaXMudGFyZ2V0W3RoaXMucHJvcGVydHlOYW1lXSA9IHRoaXMudHdlZW5GdW5jdGlvbl8oXG4gICAgICAgIHRpbWVTaW5jZVN0YXJ0LFxuICAgICAgICB0aGlzLnN0YXJ0VmFsdWVfLFxuICAgICAgICB0aGlzLmRlbHRhVmFsdWVfLFxuICAgICAgICB0aGlzLmR1cmF0aW9uX1xuICAgICk7XG4gIH1cblxuICBpZiAodGltZVNpbmNlU3RhcnQgPj0gdGhpcy5kdXJhdGlvbl8pIHtcbiAgICB0aGlzLnRhcmdldFt0aGlzLnByb3BlcnR5TmFtZV0gPSB0aGlzLnN0YXJ0VmFsdWVfICsgdGhpcy5kZWx0YVZhbHVlXztcbiAgICB0aGlzLmlzRmluaXNoZWQgPSB0cnVlO1xuICB9XG59O1xuXG5leHBvcnRzLkRvQWZ0ZXJEZWxheSA9IGZ1bmN0aW9uICh0YXJnZXQsIGR1cmF0aW9uLCBjYWxsYmFjaykge1xuICAvKipcbiAgICogV2lsbCBiZSBzZXQgdG8gVFJVRSB3aGVuIHR3ZWVuIGlzIGNvbXBsZXRlZC5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLmlzRmluaXNoZWQgPSBmYWxzZTtcblxuXG4gIC8qKlxuICAgKiBXaWxsIGJlIHNldCBvbiBvdXIgZmlyc3QgdGljay5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuc3RhcnRUaW1lXyA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5wcm9wZXJ0eU5hbWUgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBEdXJhdGlvbiBvZiB0d2VlbiBpbiBtaWxsaXNlY29uZHNcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuZHVyYXRpb25fID0gZHVyYXRpb247XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgZHVyYXRpb24gaGFzIGVsYXBzZWQuXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICovXG4gIHRoaXMuY2FsbGJhY2tfID0gY2FsbGJhY2s7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7UnVuTG9vcC5jbG9ja30gY2xvY2tcbiAqL1xuZXhwb3J0cy5Eb0FmdGVyRGVsYXkucHJvdG90eXBlLnRpY2sgPSBmdW5jdGlvbiAoY2xvY2spIHtcbiAgaWYgKHRoaXMuc3RhcnRUaW1lXyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5zdGFydFRpbWVfID0gY2xvY2sudGltZTtcbiAgfVxuXG4gIHZhciB0aW1lU2luY2VTdGFydCA9IGNsb2NrLnRpbWUgLSB0aGlzLnN0YXJ0VGltZV87XG4gIGlmICh0aW1lU2luY2VTdGFydCA+PSB0aGlzLmR1cmF0aW9uXykge1xuICAgIHRoaXMuY2FsbGJhY2tfKCk7XG4gICAgdGhpcy5pc0ZpbmlzaGVkID0gdHJ1ZTtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB0ID0gZnVuY3Rpb24gYW5vbnltb3VzKGxvY2FscywgZmlsdGVycywgZXNjYXBlXG4vKiovKSB7XG5lc2NhcGUgPSBlc2NhcGUgfHwgZnVuY3Rpb24gKGh0bWwpe1xuICByZXR1cm4gU3RyaW5nKGh0bWwpXG4gICAgLnJlcGxhY2UoLyYoPyFcXHcrOykvZywgJyZhbXA7JylcbiAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKVxuICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG59O1xudmFyIGJ1ZiA9IFtdO1xud2l0aCAobG9jYWxzIHx8IHt9KSB7IChmdW5jdGlvbigpeyBcbiBidWYucHVzaCgnJyk7MTtcbi8qKlxuICogV2hldGhlciB0aGUgYmx1cnJlZCBiYWNrZ3JvdW5kIGxheWVyIHNob3VsZCBiZSB2aXNpYmxlLlxuICogQG5hbWUgc2hvd0JhY2tncm91bmRcbiAqIEB0eXBlIHtib29sZWFufVxuICovXG47IGJ1Zi5wdXNoKCdcXG48c3ZnIHZlcnNpb249XCIxLjFcIiB3aWR0aD1cIjI5OFwiIGhlaWdodD1cIjI5OFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cXG5cXG4gICcpOzEwOyBpZiAoc2hvd0JhY2tncm91bmQpIHsgOyBidWYucHVzaCgnXFxuICAgIDxmaWx0ZXIgaWQ9XCJiYWNrZ3JvdW5kQmx1clwiPlxcbiAgICAgIDxmZUdhdXNzaWFuQmx1ciBpbj1cIlNvdXJjZUdyYXBoaWNcIiBzdGREZXZpYXRpb249XCI1XCIgLz5cXG4gICAgICA8ZmVDb21wb25lbnRUcmFuc2Zlcj5cXG4gICAgICAgIDxmZUZ1bmNBIHNsb3BlPVwiMC41XCIgdHlwZT1cImxpbmVhclwiPjwvZmVGdW5jQT5cXG4gICAgICA8L2ZlQ29tcG9uZW50VHJhbnNmZXI+XFxuICAgIDwvZmlsdGVyPlxcbiAgJyk7MTc7IH0gOyBidWYucHVzaCgnXFxuXFxuICA8ZyBpZD1cImNlbnRlcmVkLWdyb3VwXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDE1MCwxNTApXCI+XFxuICAgIDxnIGlkPVwiYmFja2dyb3VuZC1ncm91cFwiXFxuICAgICAgICcpOzIxOyBpZiAoc2hvd0JhY2tncm91bmQpIHsgOyBidWYucHVzaCgnXFxuICAgICAgICAgZmlsdGVyPVwidXJsKCNiYWNrZ3JvdW5kQmx1cilcIlxcbiAgICAgICAnKTsyMzsgfSBlbHNlIHsgOyBidWYucHVzaCgnXFxuICAgICAgICAgdmlzaWJpbGl0eT1cImhpZGRlblwiXFxuICAgICAgICcpOzI1OyB9IDsgYnVmLnB1c2goJ1xcbiAgICAgICAgPjwvZz5cXG5cXG4gICAgPGcgaWQ9XCJmb3JlZ3JvdW5kLWdyb3VwXCI+PC9nPlxcbiAgPC9nPlxcbjwvc3ZnPlxcbicpOyB9KSgpO1xufSBcbnJldHVybiBidWYuam9pbignJyk7XG59O1xuICByZXR1cm4gZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgcmV0dXJuIHQobG9jYWxzLCByZXF1aXJlKFwiZWpzXCIpLmZpbHRlcnMpO1xuICB9XG59KCkpOyIsIi8qKlxuICogQG92ZXJ2aWV3IFVJIGNvbnRyb2xsZXIgZm9yIHRhYnMgYXJlYSBpbiBsZWZ0IGNvbHVtblxuICogICAgICAgICAgIERpcmVjdGx5IGNvbnRyb2xzIHRoZSBpbnN0cnVjdGlvbnMgdGFiLCBvdGhlcnMgYXJlIGRlbGVnYXRlZC5cbiAqIEBzZWUgTmV0U2ltTXlEZXZpY2VUYWJcbiAqIEBzZWUgTmV0U2ltUm91dGVyVGFiXG4gKiBAc2VlIE5ldFNpbURuc1RhYlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIGJ1aWxkTWFya3VwID0gcmVxdWlyZSgnLi9OZXRTaW1UYWJzQ29tcG9uZW50Lmh0bWwuZWpzJyk7XG52YXIgTmV0U2ltUm91dGVyVGFiID0gcmVxdWlyZSgnLi9OZXRTaW1Sb3V0ZXJUYWInKTtcbnZhciBOZXRTaW1NeURldmljZVRhYiA9IHJlcXVpcmUoJy4vTmV0U2ltTXlEZXZpY2VUYWInKTtcbnZhciBOZXRTaW1EbnNUYWIgPSByZXF1aXJlKCcuL05ldFNpbURuc1RhYicpO1xudmFyIE5ldFNpbVRhYlR5cGUgPSByZXF1aXJlKCcuL05ldFNpbUNvbnN0YW50cycpLk5ldFNpbVRhYlR5cGU7XG52YXIgc2hvdWxkU2hvd1RhYiA9IHJlcXVpcmUoJy4vTmV0U2ltVXRpbHMnKS5zaG91bGRTaG93VGFiO1xudmFyIE5ldFNpbUdsb2JhbHMgPSByZXF1aXJlKCcuL05ldFNpbUdsb2JhbHMnKTtcblxuLyoqXG4gKiBXcmFwcGVyIGNvbXBvbmVudCBmb3IgdGFicyBwYW5lbCBvbiB0aGUgcmlnaHQgc2lkZSBvZiB0aGUgcGFnZS5cbiAqIEBwYXJhbSB7alF1ZXJ5fSByb290RGl2XG4gKiBAcGFyYW0ge1J1bkxvb3B9IHJ1bkxvb3BcbiAqIEBwYXJhbSB7T2JqZWN0fSBjYWxsYmFja3NcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrcy5jaHVua1NpemVTbGlkZXJDaGFuZ2VDYWxsYmFja1xuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tzLm15RGV2aWNlQml0UmF0ZUNoYW5nZUNhbGxiYWNrXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja3MuZW5jb2RpbmdDaGFuZ2VDYWxsYmFja1xuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tzLnJvdXRlckJhbmR3aWR0aFNsaWRlckNoYW5nZUNhbGxiYWNrXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja3Mucm91dGVyQmFuZHdpZHRoU2xpZGVyU3RvcENhbGxiYWNrXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja3Mucm91dGVyTWVtb3J5U2xpZGVyQ2hhbmdlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrcy5yb3V0ZXJNZW1vcnlTbGlkZXJTdG9wQ2FsbGJhY2tcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrcy5kbnNNb2RlQ2hhbmdlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrcy5iZWNvbWVEbnNDYWxsYmFja1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBOZXRTaW1UYWJzQ29tcG9uZW50ID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocm9vdERpdiwgcnVuTG9vcCwgY2FsbGJhY2tzKSB7XG4gIC8qKlxuICAgKiBDb21wb25lbnQgcm9vdCwgd2hpY2ggd2UgZmlsbCB3aGVuZXZlciB3ZSBjYWxsIHJlbmRlcigpXG4gICAqIEB0eXBlIHtqUXVlcnl9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnJvb3REaXZfID0gcm9vdERpdjtcblxuICAvKipcbiAgICogQHR5cGUge1J1bkxvb3B9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnJ1bkxvb3BfID0gcnVuTG9vcDtcblxuICAvKipcbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5jaHVua1NpemVTbGlkZXJDaGFuZ2VDYWxsYmFja18gPSBjYWxsYmFja3MuY2h1bmtTaXplU2xpZGVyQ2hhbmdlQ2FsbGJhY2s7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubXlEZXZpY2VCaXRSYXRlQ2hhbmdlQ2FsbGJhY2tfID0gY2FsbGJhY2tzLm15RGV2aWNlQml0UmF0ZUNoYW5nZUNhbGxiYWNrO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7ZnVuY3Rpb259XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmVuY29kaW5nQ2hhbmdlQ2FsbGJhY2tfID0gY2FsbGJhY2tzLmVuY29kaW5nQ2hhbmdlQ2FsbGJhY2s7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucm91dGVyQmFuZHdpZHRoU2xpZGVyQ2hhbmdlQ2FsbGJhY2tfID1cbiAgICAgIGNhbGxiYWNrcy5yb3V0ZXJCYW5kd2lkdGhTbGlkZXJDaGFuZ2VDYWxsYmFjaztcblxuICAvKipcbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5yb3V0ZXJCYW5kd2lkdGhTbGlkZXJTdG9wQ2FsbGJhY2tfID1cbiAgICAgIGNhbGxiYWNrcy5yb3V0ZXJCYW5kd2lkdGhTbGlkZXJTdG9wQ2FsbGJhY2s7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucm91dGVyTWVtb3J5U2xpZGVyQ2hhbmdlQ2FsbGJhY2tfID1cbiAgICAgIGNhbGxiYWNrcy5yb3V0ZXJNZW1vcnlTbGlkZXJDaGFuZ2VDYWxsYmFjaztcblxuICAvKipcbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5yb3V0ZXJNZW1vcnlTbGlkZXJTdG9wQ2FsbGJhY2tfID1cbiAgICAgIGNhbGxiYWNrcy5yb3V0ZXJNZW1vcnlTbGlkZXJTdG9wQ2FsbGJhY2s7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuZG5zTW9kZUNoYW5nZUNhbGxiYWNrXyA9IGNhbGxiYWNrcy5kbnNNb2RlQ2hhbmdlQ2FsbGJhY2s7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuYmVjb21lRG5zQ2FsbGJhY2tfID0gY2FsbGJhY2tzLmJlY29tZURuc0NhbGxiYWNrO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7TmV0U2ltUm91dGVyVGFifVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5yb3V0ZXJUYWJfID0gbnVsbDtcblxuICAvKipcbiAgICogQHR5cGUge05ldFNpbU15RGV2aWNlVGFifVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5teURldmljZVRhYl8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7TmV0U2ltRG5zVGFifVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5kbnNUYWJfID0gbnVsbDtcblxuICAvLyBJbml0aWFsIHJlbmRlclxuICB0aGlzLnJlbmRlcigpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1J1bkxvb3B9IHJ1bkxvb3BcbiAqL1xuTmV0U2ltVGFic0NvbXBvbmVudC5wcm90b3R5cGUuYXR0YWNoVG9SdW5Mb29wID0gZnVuY3Rpb24gKHJ1bkxvb3ApIHtcbiAgaWYgKHRoaXMucm91dGVyVGFiXykge1xuICAgIHRoaXMucm91dGVyVGFiXy5hdHRhY2hUb1J1bkxvb3AocnVuTG9vcCk7XG4gIH1cbn07XG5cbi8qKlxuICogRmlsbCB0aGUgcm9vdCBkaXYgd2l0aCBuZXcgZWxlbWVudHMgcmVmbGVjdGluZyB0aGUgY3VycmVudCBzdGF0ZVxuICovXG5OZXRTaW1UYWJzQ29tcG9uZW50LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsZXZlbENvbmZpZyA9IE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKTtcbiAgLy8gQ2xvbmUgdGhlIHJlZmVyZW5jZSBhcmVhICh3aXRoIGhhbmRsZXJzKSBiZWZvcmUgd2UgcmUtcmVuZGVyXG4gIHZhciByZWZlcmVuY2VBcmVhID0gJCgnI3JlZmVyZW5jZV9hcmVhJykuZmlyc3QoKS5jbG9uZSh0cnVlKTtcblxuICAvLyBSZW1vdmUgdGhlIGluc3RydWN0aW9ucyBhcmVhLCB0byByZWF0dGFjaCBpbiBhIG1pbnV0ZS5cbiAgdmFyIGluc3RydWN0aW9uc0FyZWEgPSAkKCcjYnViYmxlJykuZmlyc3QoKS5kZXRhY2goKTtcblxuICB2YXIgcmF3TWFya3VwID0gYnVpbGRNYXJrdXAoe1xuICAgIGxldmVsOiBsZXZlbENvbmZpZ1xuICB9KTtcbiAgdmFyIGpRdWVyeVdyYXAgPSAkKHJhd01hcmt1cCk7XG4gIHRoaXMucm9vdERpdl8uaHRtbChqUXVlcnlXcmFwKTtcblxuICB0aGlzLnJvb3REaXZfLmZpbmQoJy5uZXRzaW0tdGFicycpLnRhYnMoe1xuICAgIGFjdGl2ZTogbGV2ZWxDb25maWcuZGVmYXVsdFRhYkluZGV4XG4gIH0pO1xuXG4gIGlmIChzaG91bGRTaG93VGFiKGxldmVsQ29uZmlnLCBOZXRTaW1UYWJUeXBlLklOU1RSVUNUSU9OUykgJiYgcmVmZXJlbmNlQXJlYSkge1xuICAgIHZhciBpbnN0cnVjdGlvbnNUYWIgPSB0aGlzLnJvb3REaXZfLmZpbmQoJyN0YWJfaW5zdHJ1Y3Rpb25zJykuZmlyc3QoKTtcbiAgICBpbnN0cnVjdGlvbnNBcmVhLmFwcGVuZFRvKGluc3RydWN0aW9uc1RhYik7XG4gICAgcmVmZXJlbmNlQXJlYS5hcHBlbmRUbyhpbnN0cnVjdGlvbnNUYWIpO1xuICB9XG5cbiAgaWYgKHNob3VsZFNob3dUYWIobGV2ZWxDb25maWcsIE5ldFNpbVRhYlR5cGUuTVlfREVWSUNFKSkge1xuICAgIHRoaXMubXlEZXZpY2VUYWJfID0gbmV3IE5ldFNpbU15RGV2aWNlVGFiKFxuICAgICAgICB0aGlzLnJvb3REaXZfLmZpbmQoJyN0YWJfbXlfZGV2aWNlJyksXG4gICAgICAgIHRoaXMucnVuTG9vcF8sXG4gICAgICAgIHtcbiAgICAgICAgICBjaHVua1NpemVDaGFuZ2VDYWxsYmFjazogdGhpcy5jaHVua1NpemVTbGlkZXJDaGFuZ2VDYWxsYmFja18sXG4gICAgICAgICAgYml0UmF0ZUNoYW5nZUNhbGxiYWNrOiB0aGlzLm15RGV2aWNlQml0UmF0ZUNoYW5nZUNhbGxiYWNrXyxcbiAgICAgICAgICBlbmNvZGluZ0NoYW5nZUNhbGxiYWNrOiB0aGlzLmVuY29kaW5nQ2hhbmdlQ2FsbGJhY2tfXG4gICAgICAgIH0pO1xuICB9XG5cbiAgaWYgKHNob3VsZFNob3dUYWIobGV2ZWxDb25maWcsIE5ldFNpbVRhYlR5cGUuUk9VVEVSKSkge1xuICAgIHRoaXMucm91dGVyVGFiXyA9IG5ldyBOZXRTaW1Sb3V0ZXJUYWIoXG4gICAgICAgIHRoaXMucm9vdERpdl8uZmluZCgnI3RhYl9yb3V0ZXInKSxcbiAgICAgICAge1xuICAgICAgICAgIGJhbmR3aWR0aFNsaWRlckNoYW5nZUNhbGxiYWNrOiB0aGlzLnJvdXRlckJhbmR3aWR0aFNsaWRlckNoYW5nZUNhbGxiYWNrXyxcbiAgICAgICAgICBiYW5kd2lkdGhTbGlkZXJTdG9wQ2FsbGJhY2s6IHRoaXMucm91dGVyQmFuZHdpZHRoU2xpZGVyU3RvcENhbGxiYWNrXyxcbiAgICAgICAgICBtZW1vcnlTbGlkZXJDaGFuZ2VDYWxsYmFjazogdGhpcy5yb3V0ZXJNZW1vcnlTbGlkZXJDaGFuZ2VDYWxsYmFja18sXG4gICAgICAgICAgbWVtb3J5U2xpZGVyU3RvcENhbGxiYWNrOiB0aGlzLnJvdXRlck1lbW9yeVNsaWRlclN0b3BDYWxsYmFja19cbiAgICAgICAgfSk7XG4gIH1cblxuICBpZiAoc2hvdWxkU2hvd1RhYihsZXZlbENvbmZpZywgTmV0U2ltVGFiVHlwZS5ETlMpKSB7XG4gICAgdGhpcy5kbnNUYWJfID0gbmV3IE5ldFNpbURuc1RhYihcbiAgICAgICAgdGhpcy5yb290RGl2Xy5maW5kKCcjdGFiX2RucycpLFxuICAgICAgICB0aGlzLmRuc01vZGVDaGFuZ2VDYWxsYmFja18sXG4gICAgICAgIHRoaXMuYmVjb21lRG5zQ2FsbGJhY2tfKTtcbiAgfVxufTtcblxuLyoqIEBwYXJhbSB7bnVtYmVyfSBuZXdDaHVua1NpemUgKi9cbk5ldFNpbVRhYnNDb21wb25lbnQucHJvdG90eXBlLnNldENodW5rU2l6ZSA9IGZ1bmN0aW9uIChuZXdDaHVua1NpemUpIHtcbiAgaWYgKHRoaXMubXlEZXZpY2VUYWJfKSB7XG4gICAgdGhpcy5teURldmljZVRhYl8uc2V0Q2h1bmtTaXplKG5ld0NodW5rU2l6ZSk7XG4gIH1cbn07XG5cbi8qKiBAcGFyYW0ge251bWJlcn0gbmV3Qml0UmF0ZSBpbiBiaXRzIHBlciBzZWNvbmQgKi9cbk5ldFNpbVRhYnNDb21wb25lbnQucHJvdG90eXBlLnNldE15RGV2aWNlQml0UmF0ZSA9IGZ1bmN0aW9uIChuZXdCaXRSYXRlKSB7XG4gIGlmICh0aGlzLm15RGV2aWNlVGFiXykge1xuICAgIHRoaXMubXlEZXZpY2VUYWJfLnNldEJpdFJhdGUobmV3Qml0UmF0ZSk7XG4gIH1cbn07XG5cbi8qKiBAcGFyYW0ge0VuY29kaW5nVHlwZVtdfSBuZXdFbmNvZGluZ3MgKi9cbk5ldFNpbVRhYnNDb21wb25lbnQucHJvdG90eXBlLnNldEVuY29kaW5ncyA9IGZ1bmN0aW9uIChuZXdFbmNvZGluZ3MpIHtcbiAgaWYgKHRoaXMubXlEZXZpY2VUYWJfKSB7XG4gICAgdGhpcy5teURldmljZVRhYl8uc2V0RW5jb2RpbmdzKG5ld0VuY29kaW5ncyk7XG4gIH1cbn07XG5cbi8qKiBAcGFyYW0ge251bWJlcn0gY3JlYXRpb25UaW1lc3RhbXBNcyAqL1xuTmV0U2ltVGFic0NvbXBvbmVudC5wcm90b3R5cGUuc2V0Um91dGVyQ3JlYXRpb25UaW1lID0gZnVuY3Rpb24gKGNyZWF0aW9uVGltZXN0YW1wTXMpIHtcbiAgaWYgKHRoaXMucm91dGVyVGFiXykge1xuICAgIHRoaXMucm91dGVyVGFiXy5zZXRSb3V0ZXJDcmVhdGlvblRpbWUoY3JlYXRpb25UaW1lc3RhbXBNcyk7XG4gIH1cbn07XG5cbi8qKiBAcGFyYW0ge251bWJlcn0gbmV3QmFuZHdpZHRoIGluIGJpdHMvc2Vjb25kICovXG5OZXRTaW1UYWJzQ29tcG9uZW50LnByb3RvdHlwZS5zZXRSb3V0ZXJCYW5kd2lkdGggPSBmdW5jdGlvbiAobmV3QmFuZHdpZHRoKSB7XG4gIGlmICh0aGlzLnJvdXRlclRhYl8pIHtcbiAgICB0aGlzLnJvdXRlclRhYl8uc2V0QmFuZHdpZHRoKG5ld0JhbmR3aWR0aCk7XG4gIH1cbn07XG5cbi8qKiBAcGFyYW0ge251bWJlcn0gbmV3TWVtb3J5IGluIGJpdHMgKi9cbk5ldFNpbVRhYnNDb21wb25lbnQucHJvdG90eXBlLnNldFJvdXRlck1lbW9yeSA9IGZ1bmN0aW9uIChuZXdNZW1vcnkpIHtcbiAgaWYgKHRoaXMucm91dGVyVGFiXykge1xuICAgIHRoaXMucm91dGVyVGFiXy5zZXRNZW1vcnkobmV3TWVtb3J5KTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gcXVldWVkUGFja2V0Q291bnRcbiAqL1xuTmV0U2ltVGFic0NvbXBvbmVudC5wcm90b3R5cGUuc2V0Um91dGVyUXVldWVkUGFja2V0Q291bnQgPSBmdW5jdGlvbiAocXVldWVkUGFja2V0Q291bnQpIHtcbiAgaWYgKHRoaXMucm91dGVyVGFiXykge1xuICAgIHRoaXMucm91dGVyVGFiXy5zZXRSb3V0ZXJRdWV1ZWRQYWNrZXRDb3VudChxdWV1ZWRQYWNrZXRDb3VudCk7XG4gIH1cbn07XG5cbi8qKiBAcGFyYW0ge251bWJlcn0gdXNlZE1lbW9yeUluQml0cyAqL1xuTmV0U2ltVGFic0NvbXBvbmVudC5wcm90b3R5cGUuc2V0Um91dGVyTWVtb3J5SW5Vc2UgPSBmdW5jdGlvbiAodXNlZE1lbW9yeUluQml0cykge1xuICBpZiAodGhpcy5yb3V0ZXJUYWJfKSB7XG4gICAgdGhpcy5yb3V0ZXJUYWJfLnNldE1lbW9yeUluVXNlKHVzZWRNZW1vcnlJbkJpdHMpO1xuICB9XG59O1xuXG5OZXRTaW1UYWJzQ29tcG9uZW50LnByb3RvdHlwZS5zZXRSb3V0ZXJEYXRhUmF0ZSA9IGZ1bmN0aW9uIChkYXRhUmF0ZUJpdHNQZXJTZWNvbmQpIHtcbiAgaWYgKHRoaXMucm91dGVyVGFiXykge1xuICAgIHRoaXMucm91dGVyVGFiXy5zZXREYXRhUmF0ZShkYXRhUmF0ZUJpdHNQZXJTZWNvbmQpO1xuICB9XG59O1xuXG4vKiogQHBhcmFtIHtzdHJpbmd9IG5ld0Ruc01vZGUgKi9cbk5ldFNpbVRhYnNDb21wb25lbnQucHJvdG90eXBlLnNldERuc01vZGUgPSBmdW5jdGlvbiAobmV3RG5zTW9kZSkge1xuICBpZiAodGhpcy5kbnNUYWJfKSB7XG4gICAgdGhpcy5kbnNUYWJfLnNldERuc01vZGUobmV3RG5zTW9kZSk7XG4gIH1cbn07XG5cbi8qKiBAcGFyYW0ge2Jvb2xlYW59IGlzRG5zTm9kZSAqL1xuTmV0U2ltVGFic0NvbXBvbmVudC5wcm90b3R5cGUuc2V0SXNEbnNOb2RlID0gZnVuY3Rpb24gKGlzRG5zTm9kZSkge1xuICBpZiAodGhpcy5kbnNUYWJfKSB7XG4gICAgdGhpcy5kbnNUYWJfLnNldElzRG5zTm9kZShpc0Ruc05vZGUpO1xuICB9XG59O1xuXG4vKiogQHBhcmFtIHtBcnJheX0gdGFibGVDb250ZW50cyAqL1xuTmV0U2ltVGFic0NvbXBvbmVudC5wcm90b3R5cGUuc2V0RG5zVGFibGVDb250ZW50cyA9IGZ1bmN0aW9uICh0YWJsZUNvbnRlbnRzKSB7XG4gIGlmICh0aGlzLmRuc1RhYl8pIHtcbiAgICB0aGlzLmRuc1RhYl8uc2V0RG5zVGFibGVDb250ZW50cyh0YWJsZUNvbnRlbnRzKTtcbiAgfVxufTtcblxuLyoqIEBwYXJhbSB7QXJyYXl9IGxvZ0RhdGEgKi9cbk5ldFNpbVRhYnNDb21wb25lbnQucHJvdG90eXBlLnNldFJvdXRlckxvZ0RhdGEgPSBmdW5jdGlvbiAobG9nRGF0YSkge1xuICBpZiAodGhpcy5yb3V0ZXJUYWJfKSB7XG4gICAgdGhpcy5yb3V0ZXJUYWJfLnNldFJvdXRlckxvZ0RhdGEobG9nRGF0YSk7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cz0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdCA9IGZ1bmN0aW9uIGFub255bW91cyhsb2NhbHMsIGZpbHRlcnMsIGVzY2FwZVxuLyoqLykge1xuZXNjYXBlID0gZXNjYXBlIHx8IGZ1bmN0aW9uIChodG1sKXtcbiAgcmV0dXJuIFN0cmluZyhodG1sKVxuICAgIC5yZXBsYWNlKC8mKD8hXFx3KzspL2csICcmYW1wOycpXG4gICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xufTtcbnZhciBidWYgPSBbXTtcbndpdGggKGxvY2FscyB8fCB7fSkgeyAoZnVuY3Rpb24oKXsgXG4gYnVmLnB1c2goJycpOzE7XG4gIHZhciBpMThuID0gcmVxdWlyZSgnLi9sb2NhbGUnKTtcblxuICB2YXIgc2hvdWxkU2hvd1RhYiA9IHJlcXVpcmUoJy4vTmV0U2ltVXRpbHMnKS5zaG91bGRTaG93VGFiO1xuICB2YXIgTmV0U2ltVGFiVHlwZSA9IHJlcXVpcmUoJy4vTmV0U2ltQ29uc3RhbnRzJykuTmV0U2ltVGFiVHlwZTtcblxuICB2YXIgc2hvd0luc3RydWN0aW9ucyA9IHNob3VsZFNob3dUYWIobGV2ZWwsIE5ldFNpbVRhYlR5cGUuSU5TVFJVQ1RJT05TKTtcbiAgdmFyIHNob3dNeURldmljZSA9IHNob3VsZFNob3dUYWIobGV2ZWwsIE5ldFNpbVRhYlR5cGUuTVlfREVWSUNFKTtcbiAgdmFyIHNob3dSb3V0ZXIgPSBzaG91bGRTaG93VGFiKGxldmVsLCBOZXRTaW1UYWJUeXBlLlJPVVRFUik7XG4gIHZhciBzaG93RG5zID0gc2hvdWxkU2hvd1RhYihsZXZlbCwgTmV0U2ltVGFiVHlwZS5ETlMpO1xuOyBidWYucHVzaCgnXFxuPGRpdiBjbGFzcz1cIm5ldHNpbS10YWJzXCI+XFxuICA8dWw+XFxuICAgICcpOzE0OyBpZiAoc2hvd0luc3RydWN0aW9ucykgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgPGxpPjxhIGhyZWY9XCIjdGFiX2luc3RydWN0aW9uc1wiPicsIGVzY2FwZSgoMTUsICBpMThuLmluc3RydWN0aW9ucygpICkpLCAnPC9hPjwvbGk+XFxuICAgICcpOzE2OyB9IDsgYnVmLnB1c2goJ1xcbiAgICAnKTsxNzsgaWYgKHNob3dNeURldmljZSkgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgICA8bGk+PGEgaHJlZj1cIiN0YWJfbXlfZGV2aWNlXCI+JywgZXNjYXBlKCgxOCwgIGkxOG4ubXlEZXZpY2UoKSApKSwgJzwvYT48L2xpPlxcbiAgICAnKTsxOTsgfSA7IGJ1Zi5wdXNoKCdcXG4gICAgJyk7MjA7IGlmIChzaG93Um91dGVyKSB7IDsgYnVmLnB1c2goJ1xcbiAgICAgIDxsaT48YSBocmVmPVwiI3RhYl9yb3V0ZXJcIj4nLCBlc2NhcGUoKDIxLCAgaTE4bi5yb3V0ZXIoKSApKSwgJzwvYT48L2xpPlxcbiAgICAnKTsyMjsgfSA7IGJ1Zi5wdXNoKCdcXG4gICAgJyk7MjM7IGlmIChzaG93RG5zKSB7IDsgYnVmLnB1c2goJ1xcbiAgICAgIDxsaT48YSBocmVmPVwiI3RhYl9kbnNcIj4nLCBlc2NhcGUoKDI0LCAgaTE4bi5kbnMoKSApKSwgJzwvYT48L2xpPlxcbiAgICAnKTsyNTsgfSA7IGJ1Zi5wdXNoKCdcXG4gIDwvdWw+XFxuICAnKTsyNzsgaWYgKHNob3dJbnN0cnVjdGlvbnMpIHsgOyBidWYucHVzaCgnXFxuICAgIDxkaXYgaWQ9XCJ0YWJfaW5zdHJ1Y3Rpb25zXCI+PC9kaXY+XFxuICAnKTsyOTsgfSA7IGJ1Zi5wdXNoKCdcXG4gICcpOzMwOyBpZiAoc2hvd015RGV2aWNlKSB7IDsgYnVmLnB1c2goJ1xcbiAgICA8ZGl2IGlkPVwidGFiX215X2RldmljZVwiPjwvZGl2PlxcbiAgJyk7MzI7IH0gOyBidWYucHVzaCgnXFxuICAnKTszMzsgaWYgKHNob3dSb3V0ZXIpIHsgOyBidWYucHVzaCgnXFxuICAgIDxkaXYgaWQ9XCJ0YWJfcm91dGVyXCI+PC9kaXY+XFxuICAnKTszNTsgfSA7IGJ1Zi5wdXNoKCdcXG4gICcpOzM2OyBpZiAoc2hvd0RucykgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgPGRpdiBpZD1cInRhYl9kbnNcIj48L2Rpdj5cXG4gICcpOzM4OyB9IDsgYnVmLnB1c2goJ1xcbjwvZGl2PicpOyB9KSgpO1xufSBcbnJldHVybiBidWYuam9pbignJyk7XG59O1xuICByZXR1cm4gZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgcmV0dXJuIHQobG9jYWxzLCByZXF1aXJlKFwiZWpzXCIpLmZpbHRlcnMpO1xuICB9XG59KCkpOyIsIi8qKlxuICogQG92ZXJ2aWV3IFVJIGNvbXBvbmVudDogVGhlIHNtYWxsIGV4cGFuZGFibGUgYm94IGFib3ZlIHRoZSB2aXN1YWxpemF0aW9uLFxuICogICAgICAgICAgIHVzZWQgdG8gc2hvdyBkZWJ1ZyBhbmQgZGlhZ25vc3RpYyBpbmZvcm1hdGlvbi5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJy4uL3V0aWxzJyk7IC8vIEZvciBGdW5jdGlvbi5wcm90b3R5cGUuaW5oZXJpdHMoKVxudmFyIGkxOG4gPSByZXF1aXJlKCcuL2xvY2FsZScpO1xudmFyIG1hcmt1cCA9IHJlcXVpcmUoJy4vTmV0U2ltU3RhdHVzUGFuZWwuaHRtbC5lanMnKTtcbnZhciBOZXRTaW1QYW5lbCA9IHJlcXVpcmUoJy4vTmV0U2ltUGFuZWwuanMnKTtcbnZhciBOZXRTaW1VdGlscyA9IHJlcXVpcmUoJy4vTmV0U2ltVXRpbHMnKTtcblxuLyoqXG4gKiBHZW5lcmF0b3IgYW5kIGNvbnRyb2xsZXIgZm9yIGNvbm5lY3Rpb24gc3RhdHVzIHBhbmVsXG4gKiBpbiBsZWZ0IGNvbHVtbiwgZGlzcGxheWVkIHdoaWxlIGNvbm5lY3RlZC5cbiAqIEBwYXJhbSB7alF1ZXJ5fSByb290RGl2XG4gKiBAcGFyYW0ge09iamVjdH0gY2FsbGJhY2tzXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja3MuZGlzY29ubmVjdENhbGxiYWNrIC0gbWV0aG9kIHRvIGNhbGwgd2hlbiBkaXNjb25uZWN0IGJ1dHRvblxuICogICAgICAgIGlzIGNsaWNrZWQuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhdWdtZW50cyBOZXRTaW1QYW5lbFxuICovXG52YXIgTmV0U2ltU3RhdHVzUGFuZWwgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyb290RGl2LCBjYWxsYmFja3MpIHtcbiAgLyoqXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuZGlzY29ubmVjdENhbGxiYWNrXyA9IGNhbGxiYWNrcy5kaXNjb25uZWN0Q2FsbGJhY2s7XG5cbiAgLy8gU3VwZXJjbGFzcyBjb25zdHJ1Y3RvclxuICBOZXRTaW1QYW5lbC5jYWxsKHRoaXMsIHJvb3REaXYsIHtcbiAgICBjbGFzc05hbWU6ICduZXRzaW1fc3RhdHVzX3BhbmVsJyxcbiAgICBwYW5lbFRpdGxlOiAnU3RhdHVzJyxcbiAgICB1c2VyVG9nZ2xlYWJsZTogZmFsc2UsXG4gICAgYmVnaW5NaW5pbWl6ZWQ6IHRydWVcbiAgfSk7XG59O1xuTmV0U2ltU3RhdHVzUGFuZWwuaW5oZXJpdHMoTmV0U2ltUGFuZWwpO1xuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBbZGF0YV1cbiAqIEBwYXJhbSB7c3RyaW5nfSBbZGF0YS5yZW1vdGVOb2RlTmFtZV0gLSBEaXNwbGF5IG5hbWUgb2YgcmVtb3RlIG5vZGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2RhdGEubXlIb3N0bmFtZV0gLSBIb3N0bmFtZSBvZiBsb2NhbCBub2RlXG4gKiBAcGFyYW0ge251bWJlcn0gW2RhdGEubXlBZGRyZXNzXSAtIExvY2FsIG5vZGUgYWRkcmVzcyBhc3NpZ25lZCBieSByb3V0ZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBbZGF0YS5zaGFyZUxpbmtdIC0gVVJMIGZvciBzaGFyaW5nIHByaXZhdGUgc2hhcmRcbiAqL1xuTmV0U2ltU3RhdHVzUGFuZWwucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIGRhdGEgPSBkYXRhIHx8IHt9O1xuXG4gIC8vIENhcHR1cmUgdGl0bGUgYmVmb3JlIHdlIHJlbmRlciB0aGUgd3JhcHBlciBwYW5lbC5cbiAgdGhpcy5zZXRQYW5lbFRpdGxlKGRhdGEucmVtb3RlTm9kZU5hbWUpO1xuXG4gIC8vIFJlbmRlciBib2lsZXJwbGF0ZSBwYW5lbCBzdHVmZlxuICBOZXRTaW1TdGF0dXNQYW5lbC5zdXBlclByb3RvdHlwZS5yZW5kZXIuY2FsbCh0aGlzKTtcblxuICAvLyBQdXQgb3VyIG93biBjb250ZW50IGludG8gdGhlIHBhbmVsIGJvZHlcbiAgdmFyIG5ld01hcmt1cCA9ICQobWFya3VwKHtcbiAgICBteUhvc3RuYW1lOiBkYXRhLm15SG9zdG5hbWUsXG4gICAgbXlBZGRyZXNzOiBkYXRhLm15QWRkcmVzcyxcbiAgICBzaGFyZUxpbms6IGRhdGEuc2hhcmVMaW5rXG4gIH0pKTtcbiAgdGhpcy5nZXRCb2R5KCkuaHRtbChuZXdNYXJrdXApO1xuXG4gIC8vIEFkZCBhIGJ1dHRvbiB0byB0aGUgcGFuZWwgaGVhZGVyXG4gIHRoaXMuYWRkQnV0dG9uKFxuICAgICAgaTE4bi5kaXNjb25uZWN0QnV0dG9uKHsgY2FyZXQ6ICc8aSBjbGFzcz1cImZhIGZhLWNhcmV0LWxlZnRcIj48L2k+JyB9KSxcbiAgICAgIHRoaXMuZGlzY29ubmVjdENhbGxiYWNrXyk7XG5cbiAgLy8gQnV0dG9uIHRoYXQgdGFrZXMgeW91IHRvIHRoZSBuZXh0IGxldmVsLlxuICBOZXRTaW1VdGlscy5tYWtlQ29udGludWVCdXR0b24odGhpcyk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHM9IChmdW5jdGlvbigpIHtcbiAgdmFyIHQgPSBmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzLCBmaWx0ZXJzLCBlc2NhcGVcbi8qKi8pIHtcbmVzY2FwZSA9IGVzY2FwZSB8fCBmdW5jdGlvbiAoaHRtbCl7XG4gIHJldHVybiBTdHJpbmcoaHRtbClcbiAgICAucmVwbGFjZSgvJig/IVxcdys7KS9nLCAnJmFtcDsnKVxuICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXG4gICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbn07XG52YXIgYnVmID0gW107XG53aXRoIChsb2NhbHMgfHwge30pIHsgKGZ1bmN0aW9uKCl7IFxuIGJ1Zi5wdXNoKCcnKTsxO1xudmFyIGkxOG4gPSByZXF1aXJlKCcuL2xvY2FsZScpO1xuOyBidWYucHVzaCgnXFxuPGRpdiBjbGFzcz1cImNvbnRlbnQtd3JhcFwiPlxcbiAgJyk7NTsgaWYgKG15SG9zdG5hbWUpIHsgOyBidWYucHVzaCgnXFxuICA8cD5NeSBob3N0bmFtZTogJywgZXNjYXBlKCg2LCAgbXlIb3N0bmFtZSApKSwgJzwvcD5cXG4gICcpOzc7IH0gOyBidWYucHVzaCgnXFxuXFxuICAnKTs5OyBpZiAobXlBZGRyZXNzKSB7IDsgYnVmLnB1c2goJ1xcbiAgPHA+TXkgYWRkcmVzczogJywgZXNjYXBlKCgxMCwgIG15QWRkcmVzcyApKSwgJzwvcD5cXG4gICcpOzExOyB9IDsgYnVmLnB1c2goJ1xcblxcbiAgJyk7MTM7IGlmIChzaGFyZUxpbmspIHsgOyBidWYucHVzaCgnXFxuICA8cD48YSBocmVmPVwiJywgZXNjYXBlKCgxNCwgIHNoYXJlTGluayApKSwgJ1wiPicsIGVzY2FwZSgoMTQsICBpMThuLnNoYXJlVGhpc05ldHdvcmsoKSApKSwgJzwvYT48L3A+XFxuICAnKTsxNTsgfSA7IGJ1Zi5wdXNoKCdcXG48L2Rpdj5cXG4nKTsgfSkoKTtcbn0gXG5yZXR1cm4gYnVmLmpvaW4oJycpO1xufTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGxvY2Fscykge1xuICAgIHJldHVybiB0KGxvY2FscywgcmVxdWlyZShcImVqc1wiKS5maWx0ZXJzKTtcbiAgfVxufSgpKTsiLCIvKipcbiAqIEBvdmVydmlldyBSZXByZXNlbnRzIGEgY29sbGVjdGlvbiBvZiB0YWJsZXMgdGhhdCBtYXAgdG8gYSBwYXJ0aWN1bGFyXG4gKiAgICAgICAgICAgY2xhc3Mgc2VjdGlvbidzIHNpbXVsYXRpb24sIGlzb2xhdGVkIGZyb20gb3RoZXIgY2xhc3Mgc2VjdGlvbnMuXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgTmV0U2ltVGFibGUgPSByZXF1aXJlKCcuL05ldFNpbVRhYmxlJyk7XG52YXIgUHViU3ViU2VydmljZSA9IHJlcXVpcmUoJy4vUHViU3ViU2VydmljZScpO1xuXG4vKipcbiAqIFB1YlN1YiBldmVudCBrZXkgZm9yIGV2ZW50cyBpbnZhbGlkYXRpbmcgYWxsIHRhYmxlcy5cbiAqIEBjb25zdCB7c3RyaW5nfVxuICovXG52YXIgV0hPTEVfU0hBUkRfRVZFTlQgPSAnYWxsX3RhYmxlcyc7XG5cbi8qKlxuICogQSBzaGFyZCBpcyBhbiBpc29sYXRlZCwgY29tcGxldGUgc2ltdWxhdGlvbiBzdGF0ZSBzaGFyZWQgYnkgYSBzdWJzZXQgb2ZcbiAqIHVzZXJzLiAgSXQncyBtYWRlIG9mIGEgc2V0IG9mIHN0b3JhZ2UgdGFibGVzIHNldCBhcGFydCBieSBhIHBhcnRpY3VsYXJcbiAqIHNoYXJkIElEIGluIHRoZWlyIG5hbWVzLiAgV2UgdXNlIHNoYXJkcyB0byBhbGxvdyBzdHVkZW50cyB0byBpbnRlcmFjdCBvbmx5XG4gKiB3aXRoIHRoZWlyIHBhcnRpY3VsYXIgY2xhc3Mgd2hpbGUgc3RpbGwgc3RvcmluZyBhbGwgTmV0U2ltIHRhYmxlcyB1bmRlclxuICogdGhlIHNhbWUgQXBwIElELlxuICpcbiAqIEBwYXJhbSB7IXN0cmluZ30gc2hhcmRJRFxuICogQHBhcmFtIHshUHViU3ViQ29uZmlnfSBwdWJTdWJDb25maWdcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgTmV0U2ltU2hhcmQgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzaGFyZElELCBwdWJTdWJDb25maWcpIHtcbiAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gIHRoaXMuaWQgPSBzaGFyZElEO1xuXG4gIC8qKiBAdHlwZSB7UHViU3ViU2VydmljZX0gKi9cbiAgdGhpcy5wdWJTdWIgPSBQdWJTdWJTZXJ2aWNlLmNyZWF0ZShwdWJTdWJDb25maWcpO1xuXG4gIC8qKiBAdHlwZSB7UHViU3ViQ2hhbm5lbH0gKi9cbiAgdGhpcy5wdWJTdWJDaGFubmVsID0gdGhpcy5wdWJTdWIuc3Vic2NyaWJlKHRoaXMuaWQpO1xuICB0aGlzLnB1YlN1YkNoYW5uZWwuc3Vic2NyaWJlKFdIT0xFX1NIQVJEX0VWRU5ULFxuICAgICAgTmV0U2ltU2hhcmQucHJvdG90eXBlLm9uUHViU3ViRXZlbnRfLmJpbmQodGhpcykpO1xuXG4gIC8qKlxuICAgKiBDb2xsZWN0aW9uIG9mIGNsaWVudCAodXNlcikgbm9kZXMgYW5kIHJvdXRlciBub2RlcyBvbiB0aGUgc2hhcmQuXG4gICAqIEVhY2ggY2xpZW50IG5vZGUgY29ycmVzcG9uZHMgdG8gYSB1c2VyIChvciBicm93c2VyIHRhYiwgdG8gYmUgc3BlY2lmaWMpLlxuICAgKiBSb3V0ZXIgbm9kZXMgYXJlIG5vdCBhc3NvY2lhdGVkIHdpdGggYSBwYXJ0aWN1bGFyIHVzZXIuXG4gICAqXG4gICAqIEFsbCBlbnRpdGllcyBpbiB0aGlzIHRhYmxlIGRlc2NlbmQgZnJvbSBOZXRTaW1Ob2RlLCBhbmQgY2FuIGJlIGRlc2VyaWFsaXplZFxuICAgKiB2aWEgdXRpbGl0aWVzIGluIE5ldFNpbU5vZGVGYWN0b3J5XG4gICAqXG4gICAqIFJvd3MgaW4gdGhpcyB0YWJsZSBhcmVcbiAgICogLSBpbnNlcnRlZCB3aGVuIGEgbm9kZSBpcyBjcmVhdGVkIChzdWNoIGFzIHdoZW4gYSB1c2VyIGNvbm5lY3RzKVxuICAgKiAtIHVwZGF0ZWQgZm9yIGNlcnRhaW4gY2hhbmdlcyB0byBub2RlIHN0YXR1cyBvciByb3V0ZXIgY29uZmlndXJhdGlvblxuICAgKiAtIGRlbGV0ZWQgd2hlbiBhIG5vZGUgaXMgZGVzdHJveWVkIChzdWNoIGFzIHdoZW4gYSB1c2VyIGRpc2Nvbm5lY3RzKVxuICAgKlxuICAgKiBAdHlwZSB7TmV0U2ltVGFibGV9XG4gICAqIEBzZWUge05ldFNpbU5vZGV9XG4gICAqIEBzZWUge05ldFNpbUNsaWVudE5vZGV9XG4gICAqIEBzZWUge05ldFNpbVJvdXRlck5vZGV9XG4gICAqIEBzZWUge05ldFNpbUxvY2FsQ2xpZW50Tm9kZX1cbiAgICogQHNlZSB7TmV0U2ltTm9kZUZhY3Rvcnl9XG4gICAqL1xuICB0aGlzLm5vZGVUYWJsZSA9IG5ldyBOZXRTaW1UYWJsZSh0aGlzLnB1YlN1YkNoYW5uZWwsIHNoYXJkSUQsICduJyk7XG5cbiAgLyoqXG4gICAqIENvbGxlY3Rpb24gb2Ygd2lyZXMgb24gdGhlIHNoYXJkLiAgV2lyZXMgZG9jdW1lbnQgdGhlIGNvbm5lY3Rpb25zIGJldHdlZW5cbiAgICogbm9kZXMgYW5kIGNlcnRhaW4gbm9kZSBtZXRhZGF0YSwgbGlrZSBob3N0bmFtZXMgYW5kIGFkZHJlc3Nlcy4gIFdpcmVzXG4gICAqIHJlZmVyZW5jZSBub2RlIElEcywgYW5kIGFyZSB0aGVyZWZvcmUgcmVmZXJlbnRpYWxseSBkZXBlbmRlbnQgb24gdGhlIG5vZGVcbiAgICogdGFibGUuXG4gICAqXG4gICAqIEFsbCBlbnRpdGllcyBpbiB0aGlzIHRhYmxlIGRlc2VyaWFsaXplIGludG8gTmV0U2ltV2lyZS5cbiAgICpcbiAgICogUm93cyBpbiB0aGlzIHRhYmxlIGFyZVxuICAgKiAtIGluc2VydGVkIHdoZW4gdHdvIG5vZGVzIGFyZSBjb25uZWN0ZWRcbiAgICogLSB1cGRhdGVkIHdoZW4gYXNzaWduaW5nIGFuIGFkZHJlc3NcbiAgICogLSBkZWxldGVkIHdoZW4gdHdvIG5vZGVzIGFyZSBkaXNjb25uZWN0ZWRcbiAgICpcbiAgICogQHR5cGUge05ldFNpbVRhYmxlfVxuICAgKiBAc2VlIHtOZXRTaW1XaXJlfVxuICAgKi9cbiAgdGhpcy53aXJlVGFibGUgPSBuZXcgTmV0U2ltVGFibGUodGhpcy5wdWJTdWJDaGFubmVsLCBzaGFyZElELCAndycpO1xuXG4gIC8qKlxuICAgKiBDb2xsZWN0aW9uIG9mIG1lc3NhZ2VzIChlbnF1ZXVlZCBvciBpbi1mbGlnaHQpIG9uIHRoZSBzaGFyZC4gIE1lc3NhZ2VzXG4gICAqIHJlZmVyZW5jZSBub2RlIElEcywgYW5kIGFyZSB0aGVyZWZvcmUgcmVmZXJlbnRpYWxseSBkZXBlbmRlbnQgb24gdGhlIG5vZGVcbiAgICogdGFibGUuXG4gICAqXG4gICAqIEFsbCBlbnRpdGllcyBpbiB0aGlzIHRhYmxlIGRlc2VyaWFsaXplIGludG8gTmV0U2ltTWVzc2FnZS5cbiAgICpcbiAgICogUm93cyBpbiB0aGlzIHRhYmxlIGFyZVxuICAgKiAtIGluc2VydGVkIHdoZW4gYSBtZXNzYWdlIGlzIHNlbnRcbiAgICogLSBuZXZlciB1cGRhdGVkXG4gICAqIC0gZGVsZXRlZCB3aGVuIGEgbWVzc2FnZSBpcyByZWNlaXZlZFxuICAgKlxuICAgKiBAdHlwZSB7TmV0U2ltVGFibGV9XG4gICAqIEBzZWUge05ldFNpbU1lc3NhZ2V9XG4gICAqL1xuICB0aGlzLm1lc3NhZ2VUYWJsZSA9IG5ldyBOZXRTaW1UYWJsZSh0aGlzLnB1YlN1YkNoYW5uZWwsIHNoYXJkSUQsICdtJyk7XG5cbiAgLyoqXG4gICAqIENvbGxlY3Rpb24gb2YgbG9nIGVudHJpZXMgZm9yIG5vZGVzIG9uIHRoZSBzaGFyZC4gIExvZ3MgcmVmZXJlbmNlIG5vZGUgSURzLFxuICAgKiBhbmQgYXJlIHRoZXJlZm9yZSByZWZlcmVudGlhbGx5IGRlcGVuZGVudCBvbiB0aGUgbm9kZSB0YWJsZSAoYnV0IHdlIHNob3VsZFxuICAgKiBjaGFuZ2UgdGhpcykuY2hhbm5lbFxuICAgKlxuICAgKiBBbGwgZW50aXRpZXMgaW4gdGhpcyB0YWJsZSBkZXNlcmlhbGl6ZSBpbnRvIE5ldFNpbUxvZ0VudHJ5LlxuICAgKlxuICAgKiBSb3dzIGluIHRoaXMgdGFibGUgYXJlXG4gICAqIC0gaW5zZXJ0ZWQgd2hlbiBhIHJvdXRlciByb3V0ZXMgb3IgZHJvcHMgYSBtZXNzYWdlXG4gICAqIC0gbmV2ZXIgdXBkYXRlZFxuICAgKiAtIG5ldmVyIGRlbGV0ZWRcbiAgICpcbiAgICogQHR5cGUge05ldFNpbVRhYmxlfVxuICAgKiBAc2VlIHtOZXRTaW1Mb2dFbnRyeX1cbiAgICovXG4gIHRoaXMubG9nVGFibGUgPSBuZXcgTmV0U2ltVGFibGUodGhpcy5wdWJTdWJDaGFubmVsLCBzaGFyZElELCAnbCcsIHtcbiAgICAvLyBUaGlzIGlzIG9ubHkgc2FmZSB0byBkbyBiZWNhdXNlIHdlIG5ldmVyIHVwZGF0ZSBvciBkZWxldGUgcm93cyBpbiB0aGlzIHRhYmxlLlxuICAgIHVzZUluY3JlbWVudGFsUmVmcmVzaDogdHJ1ZVxuICB9KTtcbiAgdGhpcy5sb2dUYWJsZS51bnN1YnNjcmliZSgpO1xufTtcblxuLyoqXG4gKiBOZWNlc3NhcnkgdGVhci1kb3duIGZvciBzaGFyZC4gIEluIHBhcnRpY3VsYXIsIGRpc2Nvbm5lY3RpbmdcbiAqIGZyb20gcHVic3ViIHNlcnZpY2UuXG4gKi9cbk5ldFNpbVNoYXJkLnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLm5vZGVUYWJsZS51bnN1YnNjcmliZSgpO1xuICB0aGlzLndpcmVUYWJsZS51bnN1YnNjcmliZSgpO1xuICB0aGlzLm1lc3NhZ2VUYWJsZS51bnN1YnNjcmliZSgpO1xuICB0aGlzLmxvZ1RhYmxlLnVuc3Vic2NyaWJlKCk7XG4gIHRoaXMucHViU3ViQ2hhbm5lbC51bnN1YnNjcmliZShXSE9MRV9TSEFSRF9FVkVOVCk7XG4gIHRoaXMucHViU3ViQ2hhbm5lbCA9IG51bGw7XG4gIHRoaXMucHViU3ViLnVuc3Vic2NyaWJlKHRoaXMuaWQpO1xufTtcblxuLyoqXG4gKiBUaGlzIHRpY2sgYWxsb3dzIG91ciB0YWJsZXMgdG8gcG9sbCB0aGUgc2VydmVyIGZvciBjaGFuZ2VzLlxuICogQHBhcmFtIHshUnVuTG9vcC5DbG9ja30gY2xvY2tcbiAqL1xuTmV0U2ltU2hhcmQucHJvdG90eXBlLnRpY2sgPSBmdW5jdGlvbiAoY2xvY2spIHtcbiAgdGhpcy5ub2RlVGFibGUudGljayhjbG9jayk7XG4gIHRoaXMud2lyZVRhYmxlLnRpY2soY2xvY2spO1xuICB0aGlzLm1lc3NhZ2VUYWJsZS50aWNrKGNsb2NrKTtcbiAgdGhpcy5sb2dUYWJsZS50aWNrKGNsb2NrKTtcbn07XG5cbi8qKlxuICogVGhlIFwicGFuaWMgYnV0dG9uXCIgb3B0aW9uIC0gY2xlYXJzIGFsbCBkYXRhIG9uIHRoZSBzaGFyZCwga2lja2luZyBhbGxcbiAqIHVzZXJzIG91dCBhbmQgc3RhcnRpbmcgb3Zlci5cbiAqIEBwYXJhbSB7Tm9kZVN0eWxlQ2FsbGJhY2t9IG9uQ29tcGxldGVcbiAqL1xuTmV0U2ltU2hhcmQucHJvdG90eXBlLnJlc2V0RXZlcnl0aGluZyA9IGZ1bmN0aW9uIChvbkNvbXBsZXRlKSB7XG4gICQuYWpheCh7XG4gICAgdXJsOiAnL3YzL25ldHNpbS8nICsgdGhpcy5pZCxcbiAgICB0eXBlOiAnZGVsZXRlJyxcbiAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnLFxuICAgIGRhdGFUeXBlOiBcImpzb25cIlxuICB9KS5kb25lKGZ1bmN0aW9uKCkge1xuICAgIG9uQ29tcGxldGUobnVsbCwgdHJ1ZSk7XG4gIH0pLmZhaWwoZnVuY3Rpb24ocmVxdWVzdCwgc3RhdHVzLCBlcnJvcikge1xuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ3N0YXR1czogJyArIHN0YXR1cyArICc7IGVycm9yOiAnICsgZXJyb3IpO1xuICAgIG9uQ29tcGxldGUoZXJyLCBmYWxzZSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2hlbiB0aGUgUHViU3ViIHNlcnZpY2UgZmlyZXMgYW4gZXZlbnQgdGhhdCBhcHBsaWVzIHRvIGFsbCB0YWJsZXNcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVNoYXJkLnByb3RvdHlwZS5vblB1YlN1YkV2ZW50XyA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gUmlnaHQgbm93LCB0aGUgb25seSBhbGxfdGFibGVzIGV2ZW50IGlzIHRoZSBzaGFyZCByZXNldC5cbiAgLy8gUmVmcmVzaGluZyB0aGUgbm9kZSB0YWJsZSBpbmZvcm1zIG91ciBub2RlIHRoYXQgYSByZXNldCBoYXMgb2NjdXJyZWQuXG4gIC8vIFRPRE86IFVzZSBhIFwiZGlzY29ubmVjdCBmcm9tIHNoYXJkXCIgY2FsbGJhY2sgaW5zdGVhZCBoZXJlLlxuICB0aGlzLm5vZGVUYWJsZS5yZWZyZXNoKCk7XG59O1xuIiwiLyoqXG4gKiBAb3ZlcnZpZXcgV3JhcHBlZCBwdWIvc3ViIHNlcnZpY2UgY2xpZW50IEFQSXMgKGxpa2UgUHVzaGVyKVxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuXG4gbWF4bGVuOiAxMjBcbiAqL1xuLyogZ2xvYmFsIFB1c2hlciAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUHViU3ViQ2hhbm5lbCA9IHJlcXVpcmUoJy4vUHViU3ViQ2hhbm5lbCcpO1xuXG4vKipcbiAqIEphdmFTY3JpcHQgaW50ZXJmYWNlIGZvciBhIHB1Ymxpc2gvc3Vic2NyaWJlIHNlcnZpY2UgcHJvdmlkZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwbGljYXRpb25LZXlcbiAqIEBpbnRlcmZhY2VcbiAqL1xudmFyIFB1YlN1YlNlcnZpY2UgPSBleHBvcnRzO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFB1YlN1YkNvbmZpZ1xuICogQHByb3BlcnR5IHtib29sZWFufSB1c2VQdXNoZXIgLSBXaGV0aGVyIHRvIHVzZSBQdXNoZXIncyBBUEksIG9yIGEgbnVsbFxuICogICAgICAgICAgIGltcGxlbWVudGF0aW9uLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHB1c2hlckFwcGxpY2F0aW9uS2V5IC0gSWYgdXNpbmcgUHVzaGVyLCB0aGUgcHVibGljIGtleVxuICogICAgICAgICAgIHJlcXVpcmVkIHRvIGluaXRpYWxpemUgdGhlIFB1c2hlciBBUEkuXG4gKi9cblxuLyoqXG4gKiBDcmVhdGUgYW4gQVBJIGluc3RhbmNlIGFwcHJvcHJpYXRlIHRvIHRoZSBjdXJyZW50IGNvbmZpZ3VyYXRpb24uXG4gKiBAcGFyYW0geyFQdWJTdWJDb25maWd9IHB1YlN1YkNvbmZpZ1xuICogQHJldHVybnMge1B1YlN1YlNlcnZpY2V9XG4gKi9cblB1YlN1YlNlcnZpY2UuY3JlYXRlID0gZnVuY3Rpb24gKHB1YlN1YkNvbmZpZykge1xuICBpZiAocHViU3ViQ29uZmlnLnVzZVB1c2hlcikge1xuICAgIHJldHVybiBuZXcgUHViU3ViU2VydmljZS5QdXNoZXJTZXJ2aWNlKHB1YlN1YkNvbmZpZy5wdXNoZXJBcHBsaWNhdGlvbktleSk7XG4gIH1cblxuICByZXR1cm4gbmV3IFB1YlN1YlNlcnZpY2UuTnVsbFNlcnZpY2UoKTtcbn07XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbmFtZSBQdWJTdWJTZXJ2aWNlI3N1YnNjcmliZVxuICogQHBhcmFtIHtzdHJpbmd9IGNoYW5uZWxJRCAtIENoYW5uZWwgdG8gd2hpY2ggd2Ugc3Vic2NyaWJlLlxuICogQHJldHVybnMge1B1YlN1YkNoYW5uZWx9XG4gKi9cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBuYW1lIFB1YlN1YlNlcnZpY2UjdW5zdWJzY3JpYmVcbiAqIEBwYXJhbSB7c3RyaW5nfSBjaGFubmVsSUQgLSBDaGFubmVsIGZyb20gd2hpY2ggd2UgdW5zdWJzY3JpYmUuXG4gKi9cblxuLyoqXG4gKiBTdHViIGltcGxlbWVudGF0aW9uIG9mIFB1YlN1YiBBUEkuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBpbXBsZW1lbnRzIFB1YlN1YlNlcnZpY2VcbiAqL1xuLy8gRGlzYWJsZSBcInVudXNlZCB2YXJpYWJsZVwiIGVycm9ycyBmb3IgbnVsbCBpbXBsZW1lbnRhdGlvbiBkZWNsYXJhdGlvbnNcbi8qIGpzaGludCB1bnVzZWQ6ZmFsc2UgKi9cblB1YlN1YlNlcnZpY2UuTnVsbFNlcnZpY2UgPSBmdW5jdGlvbiAoKSB7IH07XG5cbi8qKlxuICogU3Vic2NyaWJlIHRvIGV2ZW50cyBvbiBhIHBhcnRpY3VsYXIgY2hhbm5lbC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjaGFubmVsSURcbiAqIEByZXR1cm5zIHtQdWJTdWJDaGFubmVsfVxuICovXG5QdWJTdWJTZXJ2aWNlLk51bGxTZXJ2aWNlLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoY2hhbm5lbElEKSB7XG4gIHJldHVybiBuZXcgUHViU3ViQ2hhbm5lbC5OdWxsQ2hhbm5lbCgpO1xufTtcblxuLyoqXG4gKiBVbnN1YnNjcmliZSBmcm9tIGV2ZW50cyBvbiBhIHBhcnRpY3VsYXIgY2hhbm5lbC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjaGFubmVsSURcbiAqL1xuUHViU3ViU2VydmljZS5OdWxsU2VydmljZS5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoY2hhbm5lbElEKSB7IH07XG5cbi8vIFJlLWVuYWJsZSBcInVudXNlZCB2YXJpYWJsZVwiIGVycm9yXG4vKiBqc2hpbnQgdW51c2VkOnRydWUgKi9cblxuLyoqXG4gKiBXcmFwcGVkIFB1c2hlci5jb20gQVBJLlxuICogQHBhcmFtIHtzdHJpbmd9IGFwcGxpY2F0aW9uS2V5XG4gKiBAY29uc3RydWN0b3JcbiAqIEBpbXBsZW1lbnRzIFB1YlN1YlNlcnZpY2VcbiAqL1xuUHViU3ViU2VydmljZS5QdXNoZXJTZXJ2aWNlID0gZnVuY3Rpb24gKGFwcGxpY2F0aW9uS2V5KSB7XG4gIC8qKlxuICAgKiBJbnN0YW5jZSBvZiBhY3R1YWwgUHVzaGVyIEphdmFTY3JpcHQgQVBJLlxuICAgKiBAdHlwZSB7UHVzaGVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5hcGlfID0gbmV3IFB1c2hlcihhcHBsaWNhdGlvbktleSwgeyBlbmNyeXB0ZWQ6IHRydWUgfSk7XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZSB0byBldmVudHMgb24gYSBwYXJ0aWN1bGFyIGNoYW5uZWwuXG4gKiBAcGFyYW0ge3N0cmluZ30gY2hhbm5lbElEXG4gKiBAcmV0dXJucyB7UHViU3ViQ2hhbm5lbH1cbiAqL1xuUHViU3ViU2VydmljZS5QdXNoZXJTZXJ2aWNlLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoY2hhbm5lbElEKSB7XG4gIHJldHVybiBuZXcgUHViU3ViQ2hhbm5lbC5QdXNoZXJDaGFubmVsKHRoaXMuYXBpXy5zdWJzY3JpYmUoY2hhbm5lbElEKSk7XG59O1xuXG4vKipcbiAqIFVuc3Vic2NyaWJlIGZyb20gZXZlbnRzIG9uIGEgcGFydGljdWxhciBjaGFubmVsLlxuICogQHBhcmFtIHtzdHJpbmd9IGNoYW5uZWxJRFxuICovXG5QdWJTdWJTZXJ2aWNlLlB1c2hlclNlcnZpY2UucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKGNoYW5uZWxJRCkge1xuICB0aGlzLmFwaV8udW5zdWJzY3JpYmUoY2hhbm5lbElEKTtcbn07XG4iLCIvKipcbiAqIEBvdmVydmlldyBXcmFwcGVkIHB1Yi9zdWIgc2VydmljZSBjaGFubmVsIEFQSXMgKGxpa2UgUHVzaGVyJ3MgQ2hhbm5lbClcbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogSmF2YXNjcmlwdCBpbnRlcmZhY2UgZm9yIGEgcHVibGlzaC9zdWJzY3JpYmUgY2hhbm5lbC5cbiAqIEBpbnRlcmZhY2VcbiAqL1xudmFyIFB1YlN1YkNoYW5uZWwgPSBleHBvcnRzO1xuXG4vKipcbiAqIFN1YnNjcmliZSB0byBhbiBldmVudCwgc28gdGhhdCB0aGUgZ2l2ZW4gY2FsbGJhY2sgaXMgY2FsbGVkIHdoZW4gdGhlXG4gKiBldmVudCBvY2N1cnMuXG4gKiBAZnVuY3Rpb25cbiAqIEBuYW1lIFB1YlN1YkNoYW5uZWwjc3Vic2NyaWJlXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGV2ZW50IHRvIGJpbmQgdG8uXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIEEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW5ldmVyIHRoZSBldmVudCBpc1xuICogICAgICAgIHRyaWdnZXJlZC5cbiAqL1xuXG4vLyBEaXNhYmxlIFwidW51c2VkIHZhcmlhYmxlXCIgZXJyb3JzIGZvciBudWxsIGltcGxlbWVudGF0aW9uIGRlY2xhcmF0aW9uc1xuLyoganNoaW50IHVudXNlZDpmYWxzZSAqL1xuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICogQGltcGxlbWVudHMgUHViU3ViQ2hhbm5lbFxuICovXG5QdWJTdWJDaGFubmVsLk51bGxDaGFubmVsID0gZnVuY3Rpb24gKCkgeyB9O1xuXG4vKipcbiAqIFN1YnNjcmliZSB0byBhbiBldmVudCBzbyB0aGUgZ2l2ZW4gY2FsbGJhY2sgaXMgY2FsbGVkIHdoZW4gdGhlIGV2ZW50IG9jY3Vycy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgZXZlbnQgdG8gYmluZCB0by5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gQSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbmV2ZXIgdGhlIGV2ZW50IGlzXG4gKiAgICAgICAgdHJpZ2dlcmVkLlxuICovXG5QdWJTdWJDaGFubmVsLk51bGxDaGFubmVsLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBjYWxsYmFjaykgeyB9O1xuXG4vKipcbiAqIFVuc3Vic2NyaWJlIGEgZ2l2ZW4gY2FsbGJhY2sgZnJvbSBhIGdpdmVuIGV2ZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXG4gKi9cblB1YlN1YkNoYW5uZWwuTnVsbENoYW5uZWwucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKGV2ZW50TmFtZSkgeyB9O1xuXG4vLyBSZS1lbmFibGUgXCJ1bnVzZWQgdmFyaWFibGVcIiBlcnJvclxuLyoganNoaW50IHVudXNlZDp0cnVlICovXG5cbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAaW1wbGVtZW50cyBQdWJTdWJDaGFubmVsXG4gKi9cblB1YlN1YkNoYW5uZWwuUHVzaGVyQ2hhbm5lbCA9IGZ1bmN0aW9uIChwdXNoZXJBcGlDaGFubmVsKSB7XG4gIC8qKlxuICAgKiBUaGUgYWN0dWFsIFB1c2hlciBBUEkncyBjaGFubmVsLlxuICAgKiBAcHJpdmF0ZSB7Q2hhbm5lbH1cbiAgICovXG4gIHRoaXMucHVzaGVyQ2hhbm5lbF8gPSBwdXNoZXJBcGlDaGFubmVsO1xuXG4gIC8qKlxuICAgKiBDYWNoZSBwcm92aWRlZCBjYWxsYmFja3MgZm9yIGVhc3kgdW5zdWJzY3JpYmUuXG4gICAqIE1hcHMgZXZlbnQgbmFtZSB0byBjYWxsYmFjay5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuY2FsbGJhY2tzXyA9IHt9O1xufTtcblxuLyoqXG4gKiBTdWJzY3JpYmUgdG8gYW4gZXZlbnQgc28gdGhlIGdpdmVuIGNhbGxiYWNrIGlzIGNhbGxlZCB3aGVuIHRoZSBldmVudCBvY2N1cnMuXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGNhbGxiYWNrXG4gKiBAdGhyb3dzIHtFcnJvcn0gb24gZG91YmxlLXN1YnNjcmliZS5cbiAqL1xuUHViU3ViQ2hhbm5lbC5QdXNoZXJDaGFubmVsLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICB0aGlzLnB1c2hlckNoYW5uZWxfLmJpbmQoZXZlbnROYW1lLCBjYWxsYmFjayk7XG4gIGlmICh0aGlzLmNhbGxiYWNrc19bZXZlbnROYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQWxyZWFkeSBzdWJzY3JpYmVkIHRvIGV2ZW50IFwiICsgZXZlbnROYW1lKTtcbiAgfVxuICB0aGlzLmNhbGxiYWNrc19bZXZlbnROYW1lXSA9IGNhbGxiYWNrO1xufTtcblxuLyoqXG4gKiBVbnN1YnNjcmliZSBhIGdpdmVuIGNhbGxiYWNrIGZyb20gYSBnaXZlbiBldmVudFxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVxuICovXG5QdWJTdWJDaGFubmVsLlB1c2hlckNoYW5uZWwucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICB0aGlzLnB1c2hlckNoYW5uZWxfLnVuYmluZChldmVudE5hbWUsIHRoaXMuY2FsbGJhY2tzX1tldmVudE5hbWVdKTtcbiAgZGVsZXRlIHRoaXMuY2FsbGJhY2tzX1tldmVudE5hbWVdO1xufTtcbiIsIi8qKlxuICogQG92ZXJ2aWV3IFdyYXBzIHJlbW90ZSBzdG9yYWdlIGludGVyZmFjZSBhbmQgcG9sbGluZyBiZWhhdmlvci5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfID0gcmVxdWlyZSgnLi4vdXRpbHMnKS5nZXRMb2Rhc2goKTtcbnZhciBPYnNlcnZhYmxlRXZlbnQgPSByZXF1aXJlKCcuLi9PYnNlcnZhYmxlRXZlbnQnKTtcbnZhciBOZXRTaW1BcGkgPSByZXF1aXJlKCcuL05ldFNpbUFwaScpO1xudmFyIE5ldFNpbUdsb2JhbHMgPSByZXF1aXJlKCcuL05ldFNpbUdsb2JhbHMnKTtcbnZhciBBcmd1bWVudFV0aWxzID0gcmVxdWlyZSgnLi9Bcmd1bWVudFV0aWxzJyk7XG5cbi8qKlxuICogTWF4aW11bSB0aW1lIChpbiBtaWxsaXNlY29uZHMpIHRoYXQgdGFibGVzIHNob3VsZCB3YWl0IGJldHdlZW4gZnVsbCBjYWNoZVxuICogdXBkYXRlcyBmcm9tIHRoZSBzZXJ2ZXIuXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG52YXIgREVGQVVMVF9QT0xMSU5HX0RFTEFZX01TID0gMTAwMDA7XG5cbi8qKlxuICogTWluaW11bSB0aW1lIChpbiBtcykgdG8gd2FpdCBhZnRlciBhbiBpbnZhbGlkYXRpb24gZXZlbnQgYmVmb3JlIGF0dGVtcHRpbmdcbiAqIHRvIHRyaWdnZXIgYSByZWZyZXNoIHJlcXVlc3QuICBUaGlzIHByb2R1Y2VzIGEgd2luZG93IGluIHdoaWNoIGNsdXN0ZXJlZFxuICogaW52YWxpZGF0aW9ucyBjYW4gYmUgY2FwdHVyZWQgYW5kIGNvYWxlc2NlZCB0b2dldGhlci5cbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbnZhciBERUZBVUxUX01JTklNVU1fREVMQVlfQkVGT1JFX1JFRlJFU0hfTVMgPSAyNTA7XG5cbi8qKlxuICogTWF4aW11bSBhZGRpdGlvbmFsIHJhbmRvbSBkZWxheSAoaW4gbXMpIHRvIGFkZCBiZWZvcmUgdGhlIHJlZnJlc2ggcmVxdWVzdC5cbiAqIEhlbHBzIHNwcmVhZCBvdXQgcmVxdWVzdHMgZnJvbSBkaWZmZXJlbnQgY2xpZW50cyByZXNwb25kaW5nIHRvIHRoZSBzYW1lXG4gKiBpbnZhbGlkYXRpb24gZXZlbnRzLlxuICogQHR5cGUge251bWJlcn1cbiAqL1xudmFyIERFRkFVTFRfTUFYSU1VTV9ERUxBWV9KSVRURVJfTVMgPSAyMDA7XG5cbi8qKlxuICogTWluaW11bSB0aW1lIChpbiBtcykgdG8gd2FpdCBiZXR3ZWVuIHJlZnJlc2ggcmVxdWVzdHMsIHJlZ2FyZGxlc3Mgb2YgaG93XG4gKiBtYW55IGludmFsaWRhdGlvbiBldmVudHMgb2NjdXIuXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG52YXIgREVGQVVMVF9NSU5JTVVNX0RFTEFZX0JFVFdFRU5fUkVGUkVTSEVTX01TID0gMjUwMDtcblxuLyoqXG4gKiBXcmFwcyB0aGUgYXBwIHN0b3JhZ2UgdGFibGUgQVBJIGluIGFuIG9iamVjdCB3aXRoIGxvY2FsXG4gKiBjYWNoaW5nIGFuZCBjYWxsYmFja3MsIHdoaWNoIHByb3ZpZGVzIGEgbm90aWZpY2F0aW9uIEFQSSB0byB0aGUgcmVzdFxuICogb2YgdGhlIE5ldFNpbSBjb2RlLlxuICogQHBhcmFtIHshUHViU3ViQ2hhbm5lbH0gY2hhbm5lbCAtIFRoZSBwdWJzdWIgY2hhbm5lbCB1c2VkIHRvIGxpc3RlblxuICogICAgICAgIGZvciBjaGFuZ2VzIHRvIHRoZSB0YWJsZS5jZWxsUGFkZGluZ1xuICogQHBhcmFtIHshc3RyaW5nfSBzaGFyZElEIC0gVGhlIHNoYXJkIElEIHNwZWNpZmljIHRvIHRoaXMgY2xhc3MnIE5ldFNpbSBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7IXN0cmluZ30gdGFibGVOYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHJlbW90ZSBzdG9yYWdlIHRhYmxlIHRvIHdyYXAuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gQWRkaXRpb25hbCB0YWJsZSBjb25maWd1cmF0aW9uIG9wdGlvbnNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudXNlSW5jcmVtZW50YWxSZWZyZXNoXSAtIGRlZmF1bHRzIHRvIEZBTFNFLiAgSWZcbiAqICAgICAgICBUUlVFLCB0aGlzIHRhYmxlIHdpbGwgb25seSByZXF1ZXN0IGNvbnRlbnQgdGhhdCBpcyBuZXcgc2luY2UgaXRzXG4gKiAgICAgICAgbGFzdCByZWZyZXNoLCBub3QgdGhlIGVudGlyZSB0YWJsZSBjb250ZW50cy4gIEN1cnJlbnRseSB0aGlzIG9wdGlvblxuICogICAgICAgIGlzIG5vdCBzYWZlIHRvIHVzZSBpZiB5b3UgY2FyZSBhYm91dCB1cGRhdGVzIG9yIGRlbGV0ZXMgaW4gdGhlIHRhYmxlLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1pbmltdW1EZWxheUJlZm9yZVJlZnJlc2hdIC0gTWluaW11bSB0aW1lIChpbiBtcylcbiAqICAgICAgICB0byB3YWl0IGFmdGVyIGFuIGludmFsaWRhdGlvbiBldmVudCBiZWZvcmUgYXR0ZW1wdGluZyB0byB0cmlnZ2VyIGFcbiAqICAgICAgICByZWZyZXNoIHJlcXVlc3QuICBUaGlzIHByb2R1Y2VzIGEgd2luZG93IGluIHdoaWNoIGNsdXN0ZXJlZFxuICogICAgICAgIGludmFsaWRhdGlvbnMgY2FuIGJlIGNhcHR1cmVkIGFuZCBjb2FsZXNjZWQgdG9nZXRoZXIuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4aW11bUppdHRlckRlbGF5XSAtIE1heGltdW0gYWRkaXRpb25hbCByYW5kb21cbiAqICAgICAgICBkZWxheSAoaW4gbXMpIHRvIGFkZCBiZWZvcmUgdGhlIHJlZnJlc2ggcmVxdWVzdC4gIEhlbHBzIHNwcmVhZCBvdXRcbiAqICAgICAgICByZXF1ZXN0cyBmcm9tIGRpZmZlcmVudCBjbGllbnRzIHJlc3BvbmRpbmcgdG8gdGhlIHNhbWUgaW52YWxpZGF0aW9uXG4gKiAgICAgICAgZXZlbnRzLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1pbmltdW1EZWxheUJldHdlZW5SZWZyZXNoZXNdIC0gTWluaW11bSB0aW1lIChpbiBtcylcbiAqICAgICAgICB0byB3YWl0IGJldHdlZW4gcmVmcmVzaCByZXF1ZXN0cywgcmVnYXJkbGVzcyBvZiBob3cgbWFueSBpbnZhbGlkYXRpb25cbiAqICAgICAgICBldmVudHMgb2NjdXIuXG4gKiBAY29uc3RydWN0b3JcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiB3cm9uZyBudW1iZXIgb2YgYXJndW1lbnRzIGFyZSBwcm92aWRlZC5cbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gaWYgaW52YWxpZCB0eXBlcyBhcmUgcGFzc2VkIGluIHRoZSBvcHRpb25zIG9iamVjdC5cbiAqL1xudmFyIE5ldFNpbVRhYmxlID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY2hhbm5lbCwgc2hhcmRJRCwgdGFibGVOYW1lLCBvcHRpb25zKSB7XG4gIEFyZ3VtZW50VXRpbHMudmFsaWRhdGVSZXF1aXJlZChjaGFubmVsLCAnY2hhbm5lbCcpO1xuICBBcmd1bWVudFV0aWxzLnZhbGlkYXRlUmVxdWlyZWQoc2hhcmRJRCwgJ3NoYXJkSUQnLCBBcmd1bWVudFV0aWxzLmlzU3RyaW5nKTtcbiAgQXJndW1lbnRVdGlscy52YWxpZGF0ZVJlcXVpcmVkKHRhYmxlTmFtZSwgJ3RhYmxlTmFtZScsIEFyZ3VtZW50VXRpbHMuaXNTdHJpbmcpO1xuICBvcHRpb25zID0gQXJndW1lbnRVdGlscy5leHRlbmRPcHRpb25zT2JqZWN0KG9wdGlvbnMpO1xuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZSB7c3RyaW5nfVxuICAgKi9cbiAgdGhpcy50YWJsZU5hbWVfID0gdGFibGVOYW1lO1xuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZSB7UHViU3ViQ2hhbm5lbH1cbiAgICovXG4gIHRoaXMuY2hhbm5lbF8gPSBjaGFubmVsO1xuICB0aGlzLnN1YnNjcmliZSgpO1xuXG4gIC8qKlxuICAgKiBBUEkgb2JqZWN0IGZvciBtYWtpbmcgcmVtb3RlIGNhbGxzXG4gICAqIEB0eXBlIHtOZXRTaW1BcGl9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmFwaV8gPSBOZXRTaW1BcGkubWFrZVRhYmxlQXBpKHNoYXJkSUQsIHRhYmxlTmFtZSk7XG5cbiAgLyoqXG4gICAqIEV2ZW50IHRoYXQgZmlyZXMgd2hlbiBmdWxsIHRhYmxlIHVwZGF0ZXMgaW5kaWNhdGUgYSBjaGFuZ2UsXG4gICAqIHdoZW4gcm93cyBhcmUgYWRkZWQsIG9yIHdoZW4gcm93cyBhcmUgcmVtb3ZlZCwgb3Igd2hlbiByb3dzIGNoYW5nZS5cbiAgICogQHR5cGUge09ic2VydmFibGVFdmVudH1cbiAgICovXG4gIHRoaXMudGFibGVDaGFuZ2UgPSBuZXcgT2JzZXJ2YWJsZUV2ZW50KCk7XG5cbiAgLyoqXG4gICAqIFN0b3JlIHRhYmxlIGNvbnRlbnRzIGxvY2FsbHksIHNvIHdlIGNhbiBkZXRlY3Qgd2hlbiBjaGFuZ2VzIG9jY3VyLlxuICAgKiBAcHJpdmF0ZSB7T2JqZWN0fVxuICAgKi9cbiAgdGhpcy5jYWNoZV8gPSB7fTtcblxuICAvKipcbiAgICogVGhlIHJvdyBJRCBvZiB0aGUgbW9zdCByZWNlbnRseSBpbnNlcnRlZCByb3cgcmV0cmlldmVkIGZyb20gcmVtb3RlIHN0b3JhZ2UuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmxhdGVzdFJvd0lEXyA9IDA7XG5cbiAgLyoqXG4gICAqIFVuaXggdGltZXN0YW1wIGZvciBsYXN0IHRpbWUgdGhpcyB0YWJsZSdzIGNhY2hlIGNvbnRlbnRzIHdlcmUgZnVsbHlcbiAgICogdXBkYXRlZC4gIFVzZWQgdG8gZGV0ZXJtaW5lIHdoZW4gdG8gcG9sbCB0aGUgc2VydmVyIGZvciBjaGFuZ2VzLlxuICAgKiBAcHJpdmF0ZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5sYXN0UmVmcmVzaFRpbWVfID0gMDtcblxuICAvKipcbiAgICogSWYgVFJVRSwgd2lsbCBvbmx5IHJlcXVlc3QgZGVsdGFzIGZyb20gcmVtb3RlIHN0b3JhZ2UuICBDdXJyZW50bHlcbiAgICogdW5zYWZlIGlmIHdlIGNhcmUgYWJvdXQgbW9yZSB0aGFuIGluc2VydHMgdG8gdGhlIHRhYmxlLlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMudXNlSW5jcmVtZW50YWxSZWZyZXNoXyA9IG9wdGlvbnMuZ2V0KFxuICAgICAgJ3VzZUluY3JlbWVudGFsUmVmcmVzaCcsXG4gICAgICBBcmd1bWVudFV0aWxzLmlzQm9vbGVhbixcbiAgICAgIGZhbHNlKTtcblxuICAvKipcbiAgICogTWluaW11bSB0aW1lIChpbiBtcykgdG8gd2FpdCBhZnRlciBhbiBpbnZhbGlkYXRpb24gZXZlbnQgYmVmb3JlIGF0dGVtcHRpbmdcbiAgICogdG8gdHJpZ2dlciBhIHJlZnJlc2ggcmVxdWVzdC4gIFRoaXMgcHJvZHVjZXMgYSB3aW5kb3cgaW4gd2hpY2ggY2x1c3RlcmVkXG4gICAqIGludmFsaWRhdGlvbnMgY2FuIGJlIGNhcHR1cmVkIGFuZCBjb2FsZXNjZWQgdG9nZXRoZXIuXG4gICAqIEBwcml2YXRlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLm1pbmltdW1EZWxheUJlZm9yZVJlZnJlc2hfID0gb3B0aW9ucy5nZXQoXG4gICAgICAnbWluaW11bURlbGF5QmVmb3JlUmVmcmVzaCcsXG4gICAgICBBcmd1bWVudFV0aWxzLmlzUG9zaXRpdmVOb25pbmZpbml0ZU51bWJlcixcbiAgICAgIERFRkFVTFRfTUlOSU1VTV9ERUxBWV9CRUZPUkVfUkVGUkVTSF9NUyk7XG5cbiAgLyoqXG4gICAqIE1heGltdW0gYWRkaXRpb25hbCByYW5kb20gZGVsYXkgKGluIG1zKSB0byBhZGQgYmVmb3JlIHRoZSByZWZyZXNoIHJlcXVlc3QuXG4gICAqIEhlbHBzIHNwcmVhZCBvdXQgcmVxdWVzdHMgZnJvbSBkaWZmZXJlbnQgY2xpZW50cyByZXNwb25kaW5nIHRvIHRoZSBzYW1lXG4gICAqIGludmFsaWRhdGlvbiBldmVudHMuXG4gICAqIEBwcml2YXRlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLm1heGltdW1KaXR0ZXJEZWxheV8gPSBvcHRpb25zLmdldChcbiAgICAgICdtYXhpbXVtSml0dGVyRGVsYXknLFxuICAgICAgQXJndW1lbnRVdGlscy5pc1Bvc2l0aXZlTm9uaW5maW5pdGVOdW1iZXIsXG4gICAgICBERUZBVUxUX01BWElNVU1fREVMQVlfSklUVEVSX01TKTtcblxuICAvKipcbiAgICogTWluaW11bSB0aW1lIChpbiBtcykgdG8gd2FpdCBiZXR3ZWVuIHJlZnJlc2ggcmVxdWVzdHMsIHJlZ2FyZGxlc3Mgb2YgaG93XG4gICAqIG1hbnkgaW52YWxpZGF0aW9uIGV2ZW50cyBvY2N1ci5cbiAgICogQHByaXZhdGUge251bWJlcn1cbiAgICovXG4gIHRoaXMubWluaW11bURlbGF5QmV0d2VlblJlZnJlc2hlc18gPSBvcHRpb25zLmdldChcbiAgICAgICdtaW5pbXVtRGVsYXlCZXR3ZWVuUmVmcmVzaGVzJyxcbiAgICAgIEFyZ3VtZW50VXRpbHMuaXNQb3NpdGl2ZU5vbmluZmluaXRlTnVtYmVyLFxuICAgICAgREVGQVVMVF9NSU5JTVVNX0RFTEFZX0JFVFdFRU5fUkVGUkVTSEVTX01TKTtcblxuICAvKipcbiAgICogTWluaW11bSB0aW1lIChpbiBtaWxsaXNlY29uZHMpIHRvIHdhaXQgYmV0d2VlbiBwdWxsaW5nIGZ1bGwgdGFibGUgY29udGVudHNcbiAgICogZnJvbSByZW1vdGUgc3RvcmFnZS5cbiAgICogQHByaXZhdGUge251bWJlcn1cbiAgICovXG4gIHRoaXMucG9sbGluZ0ludGVydmFsXyA9IERFRkFVTFRfUE9MTElOR19ERUxBWV9NUztcblxuICAvKipcbiAgICogVGhyb3R0bGVkIHZlcnNpb24gKHNwZWNpZmljIHRvIHRoaXMgaW5zdGFuY2UpIG9mIHRoZSByZWZyZXNoIG9wZXJhdGlvbixcbiAgICogdXNlZCB0byBjb2FsZXNjZSByZWZyZXNoIHJlcXVlc3RzLlxuICAgKiBAcHJpdmF0ZSB7ZnVuY3Rpb259XG4gICAqL1xuICB0aGlzLnJlZnJlc2hUYWJsZV8gPSB0aGlzLm1ha2VUaHJvdHRsZWRSZWZyZXNoXygpO1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgY29uZmlndXJlZCB0YWJsZSBuYW1lLlxuICovXG5OZXRTaW1UYWJsZS5wcm90b3R5cGUuZ2V0VGFibGVOYW1lID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy50YWJsZU5hbWVfO1xufTtcblxuLyoqXG4gKiBTdWJzY3JpYmVzIHRoaXMgdGFibGUncyBvblB1YlN1YkV2ZW50IG1ldGhvZCB0byBldmVudHMgZm9yIHRoaXMgdGFibGVcbiAqIG9uIG91ciBsb2NhbCBjaGFubmVsLlxuICovXG5OZXRTaW1UYWJsZS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmNoYW5uZWxfLnN1YnNjcmliZSh0aGlzLnRhYmxlTmFtZV8sXG4gICAgICBOZXRTaW1UYWJsZS5wcm90b3R5cGUub25QdWJTdWJFdmVudF8uYmluZCh0aGlzKSk7XG59O1xuXG4vKipcbiAqIFVudWJzY3JpYmVzIHRoZSBzYXZlZCBjYWxsYmFjayBmcm9tIGV2ZW50cyBmb3IgdGhpcyB0YWJsZSBvbiBvdXJcbiAqIGxvY2FsIGNoYW5uZWwuXG4gKi9cbk5ldFNpbVRhYmxlLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jaGFubmVsXy51bnN1YnNjcmliZSh0aGlzLnRhYmxlTmFtZV8pO1xufTtcblxuLyoqXG4gKiBBc3luY2hyb25vdXNseSByZXRyaWV2ZSBuZXcvdXBkYXRlZCB0YWJsZSBjb250ZW50IGZyb20gdGhlIHNlcnZlciwgdXNpbmdcbiAqIHdoYXRldmVyIG1ldGhvZCBpcyBtb3N0IGFwcHJvcHJpYXRlIHRvIHRoaXMgdGFibGUncyBjb25maWd1cmF0aW9uLlxuICogV2hlbiBkb25lLCB1cGRhdGVzIHRoZSBsb2NhbCBjYWNoZSBhbmQgaGl0cyB0aGUgcHJvdmlkZWQgY2FsbGJhY2sgdG9cbiAqIGluZGljYXRlIGNvbXBsZXRpb24uXG4gKiBAcGFyYW0ge05vZGVTdHlsZUNhbGxiYWNrfSBbY2FsbGJhY2tdIC0gaW5kaWNhdGVzIGNvbXBsZXRpb24gb2YgdGhlIG9wZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtqUXVlcnkuUHJvbWlzZX0gR3VhcmFudGVlZCB0byByZXNvbHZlIGFmdGVyIHRoZSBjYWNoZSB1cGRhdGUsXG4gKiAgICAgICAgICBzbyAuZG9uZSgpIG9wZXJhdGlvbnMgY2FuIGludGVyYWN0IHdpdGggdGhlIGNhY2hlLlxuICovXG5OZXRTaW1UYWJsZS5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9O1xuICB2YXIgZGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7XG5cbiAgLy8gV2hpY2ggQVBJIGNhbGwgdG8gbWFrZVxuICB2YXIgYXBpQ2FsbCA9IHRoaXMudXNlSW5jcmVtZW50YWxSZWZyZXNoXyA/XG4gICAgICB0aGlzLmFwaV8uYWxsUm93c0Zyb21JRC5iaW5kKHRoaXMuYXBpXywgdGhpcy5sYXRlc3RSb3dJRF8gKyAxKSA6XG4gICAgICB0aGlzLmFwaV8uYWxsUm93cy5iaW5kKHRoaXMuYXBpXyk7XG5cbiAgLy8gSG93IHRvIHVwZGF0ZSB0aGUgY2FjaGUgKGRlcGVuZHMgb24gd2hhdCB3ZSBleHBlY3QgdG8gZ2V0IGJhY2spXG4gIHZhciBjYWNoZVVwZGF0ZSA9IHRoaXMudXNlSW5jcmVtZW50YWxSZWZyZXNoXyA/XG4gICAgICB0aGlzLmluY3JlbWVudGFsQ2FjaGVVcGRhdGVfLmJpbmQodGhpcykgOlxuICAgICAgdGhpcy5mdWxsQ2FjaGVVcGRhdGVfLmJpbmQodGhpcyk7XG5cbiAgLy8gV2hhdCBzaG91bGQgaGFwcGVuIHdoZW4gdGhlIEFQSSBjYWxsIGNvbXBsZXRlcy5cbiAgdmFyIGFwaUNhbGxDYWxsYmFjayA9IGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBjYWxsYmFjayhlcnIsIGRhdGEpO1xuICAgICAgZGVmZXJyZWQucmVqZWN0KGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhY2hlVXBkYXRlKGRhdGEpO1xuICAgICAgY2FsbGJhY2soZXJyLCBkYXRhKTtcbiAgICAgIGRlZmVycmVkLnJlc29sdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gRG8gd2UgZmlyZSB0aGUgQVBJIGNhbGwgbm93LCBvciBhZnRlciBhIHJhbmRvbSBkZWxheT9cbiAgaWYgKHRoaXMubWF4aW11bUppdHRlckRlbGF5XyA9PT0gMCkge1xuICAgIGFwaUNhbGwoYXBpQ2FsbENhbGxiYWNrKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaml0dGVyVGltZSA9IE5ldFNpbUdsb2JhbHMucmFuZG9tSW50SW5SYW5nZSgwLCB0aGlzLm1heGltdW1KaXR0ZXJEZWxheV8pO1xuICAgIHNldFRpbWVvdXQoYXBpQ2FsbC5iaW5kKHRoaXMsIGFwaUNhbGxDYWxsYmFjayksIGppdHRlclRpbWUpO1xuICB9XG5cbiAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcbn07XG5cbi8qKlxuICogR2VuZXJhdGUgdGhyb3R0bGVkIHJlZnJlc2ggZnVuY3Rpb24gd2hpY2ggd2lsbCBnZW5lcmF0ZSBhY3R1YWwgc2VydmVyXG4gKiByZXF1ZXN0cyBhdCB0aGUgbWF4aW11bSBnaXZlbiByYXRlIG5vIG1hdHRlciBob3cgZmFzdCBpdCBpcyBjYWxsZWQuIFRoaXNcbiAqIGFsbG93cyB1cyB0byBjb2FsZXNjZSByZWZyZXNoQWxsIGV2ZW50cyBhbmQgcmVkdWNlIHNlcnZlciBsb2FkLlxuICpcbiAqIEhvdyB0aGlzIHdvcmtzOlxuICogV3JhcHMgYSBsb25nZXIgdGhyb3R0bGUgd2l0aCBsZWFkaW5nIGFuZCB0cmFpbGluZyBldmVudHMgaW4gYSBzaG9ydGVyIGRlYm91bmNlXG4gKiB3aXRoIGEgbWF4aW11bSB3YWl0IHRpbWUuICBUaGlzIGdpdmVzIGdyb3VwZWQgZXZlbnRzIGEgY2hhbmNlIHRvIGNvYWxlc2NlXG4gKiB3aXRob3V0IHRyaWdnZXJpbmcgYW4gdW5uZWVkZWQgdHJhaWxpbmcgZXZlbnQgb24gdGhlIGxvbmdlciB0aHJvdHRsZS5cbiAqXG4gKiBIZXJlIGFyZSBzb21lIGV4YW1wbGVzIG9mIHdoYXQncyBnb2luZyBvbiwgaWYgdXNpbmcgYSAxMDAwbXMgdGhyb3R0bGVcbiAqIHdyYXBwZWQgaW4gYSAyNTBtcyBkZWJvdW5jZS5cbiAqXG4gKiBJbiBsb3cgdHJhZmZpYyB3ZSBjb2xsYXBzZSB0d28gZ3JvdXBzIG9mIGV2ZW50cyB0byBqdXN0IHR3byBldmVudHMuXG4gKlxuICogb3JpZ2luYWwgZXZlbnRzICAgOiAgIHx8IHwgICAgICAgICAgICAgICAgICAgICB8IHxcbiAqIGRlYm91bmNlZCAgICAgICAgIDogICAtMjUwPnwgICAgICAgICAgICAgICAgICAgLTI1MD58XG4gKiB0aGVuIHRocm90dGxlZCAgICA6ICAgICAgICB8LS0tLS0tLS0tLS0tLS0xMDAwLT4gICAgfC0tLS0tLS0tLS0tLS0tMTAwMC0+XG4gKlxuICogSW4gaGlnaGVyIHRyYWZmaWMgd2UgY29sbGFwc2UgdGhlIGdyb3VwcyBidXQgc3RpbGwga2VlcCBldmVudHMgYXQgbGVhc3RcbiAqIG9uZSBzZWNvbmQgYXBhcnQuXG4gKlxuICogb3JpZ2luYWwgZXZlbnRzICAgOiAgIHx8IHwgICAgICAgIHwgICAgIHwgICAgICB8IHxcbiAqIGRlYm91bmNlZCAgICAgICAgIDogICAtMjUwPnwgICAgICAtMjUwPnwtMjUwPnwgLTI1MD58XG4gKiB0aGVuIHRocm90dGxlZCAgICA6ICAgICAgICB8LS0tLS0tLS0tLS0tLS0xMDAwLT58LS0tLS0tLS0tLS0tLS0xMDAwLT58XG4gKlxuICogQHJldHVybnMge2Z1bmN0aW9uKCl9XG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1UYWJsZS5wcm90b3R5cGUubWFrZVRocm90dGxlZFJlZnJlc2hfID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhyb3R0bGVkUmVmcmVzaCA9IF8udGhyb3R0bGUodGhpcy5yZWZyZXNoLmJpbmQodGhpcyksXG4gICAgICB0aGlzLm1pbmltdW1EZWxheUJldHdlZW5SZWZyZXNoZXNfKTtcbiAgcmV0dXJuIF8uZGVib3VuY2UodGhyb3R0bGVkUmVmcmVzaCwgdGhpcy5taW5pbXVtRGVsYXlCZWZvcmVSZWZyZXNoXyxcbiAgICAgIHttYXhXYWl0OiB0aGlzLm1pbmltdW1EZWxheUJlZm9yZVJlZnJlc2hffSk7XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHtBcnJheX0gYWxsIGxvY2FsbHkgY2FjaGVkIHRhYmxlIHJvd3NcbiAqL1xuTmV0U2ltVGFibGUucHJvdG90eXBlLnJlYWRBbGwgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmFycmF5RnJvbUNhY2hlXygpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0geyFudW1iZXJ9IGZpcnN0Um93SURcbiAqIEByZXR1cm5zIHtBcnJheX0gYWxsIGxvY2FsbHkgY2FjaGVkIHRhYmxlIHJvd3MgaGF2aW5nIHJvdyBJRCA+PSBmaXJzdFJvd0lEXG4gKi9cbk5ldFNpbVRhYmxlLnByb3RvdHlwZS5yZWFkQWxsRnJvbUlEID0gZnVuY3Rpb24gKGZpcnN0Um93SUQpIHtcbiAgcmV0dXJuIHRoaXMuYXJyYXlGcm9tQ2FjaGVfKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4ga2V5ID49IGZpcnN0Um93SUQ7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBAcGFyYW0geyFudW1iZXJ9IGlkXG4gKiBAcGFyYW0geyFOb2RlU3R5bGVDYWxsYmFja30gY2FsbGJhY2tcbiAqL1xuTmV0U2ltVGFibGUucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAoaWQsIGNhbGxiYWNrKSB7XG4gIHRoaXMuYXBpXy5mZXRjaFJvdyhpZCwgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuICAgIGlmIChlcnIgPT09IG51bGwpIHtcbiAgICAgIHRoaXMudXBkYXRlQ2FjaGVSb3dfKGlkLCBkYXRhKTtcbiAgICB9XG4gICAgY2FsbGJhY2soZXJyLCBkYXRhKTtcbiAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbHVlXG4gKiBAcGFyYW0geyFOb2RlU3R5bGVDYWxsYmFja30gY2FsbGJhY2tcbiAqL1xuTmV0U2ltVGFibGUucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgY2FsbGJhY2spIHtcbiAgdGhpcy5hcGlfLmNyZWF0ZVJvdyh2YWx1ZSwgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuICAgIGlmIChlcnIgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuYWRkUm93VG9DYWNoZV8oZGF0YSk7XG4gICAgfVxuICAgIGNhbGxiYWNrKGVyciwgZGF0YSk7XG4gIH0uYmluZCh0aGlzKSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0W119IHZhbHVlc1xuICogQHBhcmFtIHshTm9kZVN0eWxlQ2FsbGJhY2t9IGNhbGxiYWNrXG4gKi9cbk5ldFNpbVRhYmxlLnByb3RvdHlwZS5tdWx0aUNyZWF0ZSA9IGZ1bmN0aW9uICh2YWx1ZXMsIGNhbGxiYWNrKSB7XG4gIHRoaXMuYXBpXy5jcmVhdGVSb3codmFsdWVzLCBmdW5jdGlvbiAoZXJyLCBkYXRhcykge1xuICAgIGlmIChlcnIgPT09IG51bGwpIHtcbiAgICAgIGRhdGFzLmZvckVhY2goZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdGhpcy5hZGRSb3dUb0NhY2hlXyhkYXRhKTtcbiAgICAgIH0sIHRoaXMpO1xuICAgIH1cbiAgICBjYWxsYmFjayhlcnIsIGRhdGFzKTtcbiAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHshbnVtYmVyfSBpZFxuICogQHBhcmFtIHtPYmplY3R9IHZhbHVlXG4gKiBAcGFyYW0geyFOb2RlU3R5bGVDYWxsYmFja30gY2FsbGJhY2tcbiAqL1xuTmV0U2ltVGFibGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChpZCwgdmFsdWUsIGNhbGxiYWNrKSB7XG4gIHRoaXMuYXBpXy51cGRhdGVSb3coaWQsIHZhbHVlLCBmdW5jdGlvbiAoZXJyLCBzdWNjZXNzKSB7XG4gICAgaWYgKGVyciA9PT0gbnVsbCkge1xuICAgICAgdGhpcy51cGRhdGVDYWNoZVJvd18oaWQsIHZhbHVlKTtcbiAgICB9XG4gICAgY2FsbGJhY2soZXJyLCBzdWNjZXNzKTtcbiAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHshbnVtYmVyfSBpZFxuICogQHBhcmFtIHshTm9kZVN0eWxlQ2FsbGJhY2t9IGNhbGxiYWNrXG4gKi9cbk5ldFNpbVRhYmxlLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAoaWQsIGNhbGxiYWNrKSB7XG4gIHRoaXMuZGVsZXRlTWFueShbaWRdLCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIERlbGV0ZXMgbXVsdGlwbGUgcm93cyBmcm9tIHRoZSB0YWJsZS5cbiAqIEBwYXJhbSB7IW51bWJlcltdfSBpZHNcbiAqIEBwYXJhbSB7IU5vZGVTdHlsZUNhbGxiYWNrfSBjYWxsYmFja1xuICovXG5OZXRTaW1UYWJsZS5wcm90b3R5cGUuZGVsZXRlTWFueSA9IGZ1bmN0aW9uIChpZHMsIGNhbGxiYWNrKSB7XG4gIHRoaXMuYXBpXy5kZWxldGVSb3dzKGlkcywgZnVuY3Rpb24gKGVyciwgc3VjY2Vzcykge1xuICAgIGlmIChlcnIgPT09IG51bGwpIHtcbiAgICAgIHRoaXMucmVtb3ZlUm93c0Zyb21DYWNoZV8oaWRzKTtcbiAgICB9XG4gICAgY2FsbGJhY2soZXJyLCBzdWNjZXNzKTtcbiAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogRGVsZXRlIGEgcm93IHVzaW5nIGEgc3luY2hyb25vdXMgY2FsbC4gRm9yIHVzZSB3aGVuIG5hdmlnYXRpbmcgYXdheSBmcm9tXG4gKiB0aGUgcGFnZTsgbW9zdCBvZiB0aGUgdGltZSBhbiBhc3luY2hyb25vdXMgY2FsbCBpcyBwcmVmZXJyZWQuXG4gKiBAcGFyYW0geyFudW1iZXJ9IGlkXG4gKi9cbk5ldFNpbVRhYmxlLnByb3RvdHlwZS5zeW5jaHJvbm91c0RlbGV0ZSA9IGZ1bmN0aW9uIChpZCkge1xuICB2YXIgYXN5bmMgPSBmYWxzZTsgLy8gRm9yY2Ugc3luY2hyb25vdXMgcmVxdWVzdFxuICB0aGlzLmFwaV8uZGVsZXRlUm93cyhbaWRdLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgLy8gTm90aGluZyB3ZSBjYW4gcmVhbGx5IGRvIHdpdGggdGhlIGVycm9yLCBhcyB3ZSdyZSBpbiB0aGUgcHJvY2VzcyBvZlxuICAgICAgLy8gbmF2aWdhdGluZyBhd2F5LiBUaHJvdyBzbyB0aGF0IGhpZ2ggaW5jaWRlbmNlIHJhdGVzIHdpbGwgc2hvdyB1cCBpblxuICAgICAgLy8gbmV3IHJlbGljLlxuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgICB0aGlzLnJlbW92ZVJvd3NGcm9tQ2FjaGVfKFtpZF0pO1xuICB9LmJpbmQodGhpcyksIGFzeW5jKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtBcnJheX0gYWxsUm93c1xuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltVGFibGUucHJvdG90eXBlLmZ1bGxDYWNoZVVwZGF0ZV8gPSBmdW5jdGlvbiAoYWxsUm93cykge1xuICAvLyBSZWJ1aWxkIGVudGlyZSBjYWNoZVxuICB2YXIgbWF4Um93SUQgPSAwO1xuICB2YXIgbmV3Q2FjaGUgPSBhbGxSb3dzLnJlZHVjZShmdW5jdGlvbiAocHJldiwgY3VycmVudFJvdykge1xuICAgIHByZXZbY3VycmVudFJvdy5pZF0gPSBjdXJyZW50Um93O1xuICAgIGlmIChjdXJyZW50Um93LmlkID4gbWF4Um93SUQpIHtcbiAgICAgIG1heFJvd0lEID0gY3VycmVudFJvdy5pZDtcbiAgICB9XG4gICAgcmV0dXJuIHByZXY7XG4gIH0sIHt9KTtcblxuICAvLyBDaGVjayBmb3IgY2hhbmdlcywgaWYgYW55dGhpbmcgY2hhbmdlZCBub3RpZnkgYWxsIG9ic2VydmVycyBvbiB0YWJsZS5cbiAgaWYgKCFfLmlzRXF1YWwodGhpcy5jYWNoZV8sIG5ld0NhY2hlKSkge1xuICAgIHRoaXMuY2FjaGVfID0gbmV3Q2FjaGU7XG4gICAgdGhpcy5sYXRlc3RSb3dJRF8gPSBtYXhSb3dJRDtcbiAgICB0aGlzLnRhYmxlQ2hhbmdlLm5vdGlmeU9ic2VydmVycygpO1xuICB9XG5cbiAgdGhpcy5sYXN0UmVmcmVzaFRpbWVfID0gRGF0ZS5ub3coKTtcbn07XG5cbi8qKlxuICogQWRkIGFuZCB1cGRhdGUgcm93cyBpbiB0aGUgbG9jYWwgY2FjaGUgZnJvbSB0aGUgZ2l2ZW4gc2V0IG9mIG5ldyByb3dzXG4gKiAocHJvYmFibHkgcmV0cmlldmVkIGZyb20gdGhlIHNlcnZlcikuXG4gKiBAcGFyYW0ge0FycmF5fSBuZXdSb3dzXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1UYWJsZS5wcm90b3R5cGUuaW5jcmVtZW50YWxDYWNoZVVwZGF0ZV8gPSBmdW5jdGlvbiAobmV3Um93cykge1xuICBpZiAobmV3Um93cy5sZW5ndGggPiAwKSB7XG4gICAgdmFyIG1heFJvd0lEID0gMDtcbiAgICBuZXdSb3dzLmZvckVhY2goZnVuY3Rpb24gKHJvdykge1xuICAgICAgdGhpcy5jYWNoZV9bcm93LmlkXSA9IHJvdztcbiAgICAgIG1heFJvd0lEID0gTWF0aC5tYXgobWF4Um93SUQsIHJvdy5pZCk7XG4gICAgfSwgdGhpcyk7XG4gICAgdGhpcy5sYXRlc3RSb3dJRF8gPSBtYXhSb3dJRDtcbiAgICB0aGlzLnRhYmxlQ2hhbmdlLm5vdGlmeU9ic2VydmVycygpO1xuICB9XG5cbiAgdGhpcy5sYXN0UmVmcmVzaFRpbWVfID0gRGF0ZS5ub3coKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHshT2JqZWN0fSByb3dcbiAqIEBwYXJhbSB7IW51bWJlcn0gcm93LmlkXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1UYWJsZS5wcm90b3R5cGUuYWRkUm93VG9DYWNoZV8gPSBmdW5jdGlvbiAocm93KSB7XG4gIHRoaXMuY2FjaGVfW3Jvdy5pZF0gPSByb3c7XG4gIHRoaXMudGFibGVDaGFuZ2Uubm90aWZ5T2JzZXJ2ZXJzKCk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7IW51bWJlcltdfSBpZHNcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVRhYmxlLnByb3RvdHlwZS5yZW1vdmVSb3dzRnJvbUNhY2hlXyA9IGZ1bmN0aW9uIChpZHMpIHtcbiAgdmFyIGNhY2hlQ2hhbmdlZCA9IGZhbHNlO1xuICBpZHMuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHtcbiAgICBpZiAodGhpcy5jYWNoZV9baWRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmNhY2hlX1tpZF07XG4gICAgICBjYWNoZUNoYW5nZWQgPSB0cnVlO1xuICAgIH1cbiAgfSwgdGhpcyk7XG5cbiAgaWYgKGNhY2hlQ2hhbmdlZCkge1xuICAgIHRoaXMudGFibGVDaGFuZ2Uubm90aWZ5T2JzZXJ2ZXJzKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHshbnVtYmVyfSBpZFxuICogQHBhcmFtIHshT2JqZWN0fSByb3dcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVRhYmxlLnByb3RvdHlwZS51cGRhdGVDYWNoZVJvd18gPSBmdW5jdGlvbiAoaWQsIHJvdykge1xuICB2YXIgb2xkUm93ID0gdGhpcy5jYWNoZV9baWRdO1xuICB2YXIgbmV3Um93ID0gcm93O1xuXG4gIC8vIE1hbnVhbGx5IGFwcGx5IElEcyB3aGljaCBzaG91bGQgYmUgcHJlc2VudCBpbiByb3cuXG4gIG5ld1Jvdy5pZCA9IGlkO1xuICBuZXdSb3cudXVpZCA9IG9sZFJvdy51dWlkO1xuXG4gIGlmICghXy5pc0VxdWFsKG9sZFJvdywgbmV3Um93KSkge1xuICAgIHRoaXMuY2FjaGVfW2lkXSA9IG5ld1JvdztcbiAgICB0aGlzLnRhYmxlQ2hhbmdlLm5vdGlmeU9ic2VydmVycygpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oa2V5LCB2YWx1ZSl9IFtwcmVkaWNhdGVdIC0gQSBjb25kaXRpb24gb24gcmV0dXJuaW5nIHRoZSByb3cuXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1UYWJsZS5wcm90b3R5cGUuYXJyYXlGcm9tQ2FjaGVfID0gZnVuY3Rpb24gKHByZWRpY2F0ZSkge1xuICBwcmVkaWNhdGUgPSBwcmVkaWNhdGUgfHwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBrIGluIHRoaXMuY2FjaGVfKSB7XG4gICAgaWYgKHRoaXMuY2FjaGVfLmhhc093blByb3BlcnR5KGspICYmIHByZWRpY2F0ZShrLCB0aGlzLmNhY2hlX1trXSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHRoaXMuY2FjaGVfW2tdKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogQ2hhbmdlcyBob3cgb2Z0ZW4gdGhpcyB0YWJsZSBmZXRjaGVzIGEgZnVsbCB0YWJsZSB1cGRhdGUgZnJvbSB0aGVcbiAqIHNlcnZlci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBpbnRlcnZhbE1zIC0gbWlsbGlzZWNvbmRzIG9mIGRlbGF5IGJldHdlZW4gdXBkYXRlcy5cbiAqL1xuTmV0U2ltVGFibGUucHJvdG90eXBlLnNldFBvbGxpbmdJbnRlcnZhbCA9IGZ1bmN0aW9uIChpbnRlcnZhbE1zKSB7XG4gIHRoaXMucG9sbGluZ0ludGVydmFsXyA9IGludGVydmFsTXM7XG59O1xuXG4vKipcbiAqIENoYW5nZSB0aGUgbWF4aW11bSByYXRlIGF0IHdoaWNoIHRoZSByZWZyZXNoIG9wZXJhdGlvbiBmb3IgdGhpcyB0YWJsZVxuICogd2lsbCBfYWN0dWFsbHlfIGJlIGV4ZWN1dGVkLCBubyBtYXR0ZXIgaG93IGZhc3Qgd2UgcmVjZWl2ZSBpbnZhbGlkYXRpb25zLlxuICogQHBhcmFtIHtudW1iZXJ9IGRlbGF5TXMgLSBNaW5pbXVtIG51bWJlciBvZiBtaWxsaXNlY29uZHNcbiAqICAgICAgICBiZXR3ZWVuIGludmFsaWRhdGlvbi10cmlnZ2VyZWQgcmVxdWVzdHMgdG8gdGhlIHNlcnZlci5cbiAqL1xuTmV0U2ltVGFibGUucHJvdG90eXBlLnNldE1pbmltdW1EZWxheUJldHdlZW5SZWZyZXNoZXMgPSBmdW5jdGlvbiAoZGVsYXlNcykge1xuICAvLyBUbyBkbyB0aGlzLCB3ZSBqdXN0IHJlcGxhY2UgdGhlIHRocm90dGxlZCByZWZyZXNoIGZ1bmN0aW9uIHdpdGggYSBuZXcgb25lLlxuICB0aGlzLm1pbmltdW1EZWxheUJldHdlZW5SZWZyZXNoZXNfID0gZGVsYXlNcztcbiAgdGhpcy5yZWZyZXNoVGFibGVfID0gdGhpcy5tYWtlVGhyb3R0bGVkUmVmcmVzaF8oKTtcbn07XG5cbi8qKlxuICogQ2hhbmdlIHRoZSBtaW5pbXVtIHRpbWUgKGluIG1zKSB0byB3YWl0IGFmdGVyIGFuIGludmFsaWRhdGlvbiBldmVudCBiZWZvcmVcbiAqIGF0dGVtcHRpbmcgdG8gdHJpZ2dlciBhIHJlZnJlc2ggcmVxdWVzdC4gIFRoaXMgcHJvZHVjZXMgYSB3aW5kb3cgaW4gd2hpY2hcbiAqIGNsdXN0ZXJlZCBpbnZhbGlkYXRpb25zIGNhbiBiZSBjYXB0dXJlZCBhbmQgY29hbGVzY2VkIHRvZ2V0aGVyLlxuICogQHBhcmFtIHtudW1iZXJ9IGRlbGF5TXMgLSBNaW5pbXVtIG51bWJlciBvZiBtaWxsaXNlY29uZHMgYmV0d2VlbiBmaXJzdFxuICogICAgICAgIGludmFsaWRhdGlvbiBhbmQgcmVxdWVzdCB0byBzZXJ2ZXIuXG4gKi9cbk5ldFNpbVRhYmxlLnByb3RvdHlwZS5zZXRNaW5pbXVtRGVsYXlCZWZvcmVSZWZyZXNoID0gZnVuY3Rpb24gKGRlbGF5TXMpIHtcbiAgLy8gVG8gZG8gdGhpcywgd2UganVzdCByZXBsYWNlIHRoZSB0aHJvdHRsZWQgcmVmcmVzaCBmdW5jdGlvbiB3aXRoIGEgbmV3IG9uZS5cbiAgdGhpcy5taW5pbXVtRGVsYXlCZWZvcmVSZWZyZXNoXyA9IGRlbGF5TXM7XG4gIHRoaXMucmVmcmVzaFRhYmxlXyA9IHRoaXMubWFrZVRocm90dGxlZFJlZnJlc2hfKCk7XG59O1xuXG4vKipcbiAqIENoYW5nZSB0aGUgTWF4aW11bSBhZGRpdGlvbmFsIHJhbmRvbSBkZWxheSAoaW4gbXMpIHRvIGFkZCBiZWZvcmUgdGhlIHJlZnJlc2hcbiAqIHJlcXVlc3QuICBIZWxwcyBzcHJlYWQgb3V0IHJlcXVlc3RzIGZyb20gZGlmZmVyZW50IGNsaWVudHMgcmVzcG9uZGluZyB0byB0aGVcbiAqIHNhbWUgZXZlbnRzLlxuICogQHBhcmFtIHtudW1iZXJ9IGRlbGF5TXMgLSBNYXhpbXVtIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gYWRkIGJlZm9yZVxuICogICAgICAgIHJlZnJlc2ggcmVxdWVzdCBmaXJlcy5cbiAqL1xuTmV0U2ltVGFibGUucHJvdG90eXBlLnNldE1heGltdW1KaXR0ZXJEZWxheSA9IGZ1bmN0aW9uIChkZWxheU1zKSB7XG4gIC8vIFRvIGRvIHRoaXMsIHdlIGp1c3QgcmVwbGFjZSB0aGUgdGhyb3R0bGVkIHJlZnJlc2ggZnVuY3Rpb24gd2l0aCBhIG5ldyBvbmUuXG4gIHRoaXMubWF4aW11bUppdHRlckRlbGF5XyA9IGRlbGF5TXM7XG59O1xuXG4vKiogUG9sbHMgc2VydmVyIGZvciB1cGRhdGVzLCBpZiBpdCdzIGJlZW4gbG9uZyBlbm91Z2guICovXG5OZXRTaW1UYWJsZS5wcm90b3R5cGUudGljayA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gIGlmIChub3cgLSB0aGlzLmxhc3RSZWZyZXNoVGltZV8gPj0gdGhpcy5wb2xsaW5nSW50ZXJ2YWxfKSB7XG4gICAgdGhpcy5sYXN0UmVmcmVzaFRpbWVfID0gbm93O1xuICAgIHRoaXMucmVmcmVzaFRhYmxlXygpO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aGVuIHRoZSBQdWJTdWIgc2VydmljZSBmaXJlcyBhbiBldmVudCB0aGF0IHRoaXMgdGFibGUgaXMgc3Vic2NyaWJlZCB0by5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVRhYmxlLnByb3RvdHlwZS5vblB1YlN1YkV2ZW50XyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5yZWZyZXNoVGFibGVfKCk7XG59O1xuIiwiLyoqXG4gKiBAb3ZlcnZpZXcgVUkgY29udHJvbGxlciBmb3IgdGhlIHNlbmQgcGFuZWwgKHRoZSBib3R0b20gcGFuZWwgb24gdGhlIHJpZ2h0KVxuICogICAgICAgICAgIHdoaWNoIGlzIHVzZWQgdG8gdHJhbnNtaXQgcGFja2V0cy5cbiAqIEBzZWUgTmV0U2ltUGFja2V0RWRpdG9yIHdoaWNoIGlzIHVzZWQgZXh0ZW5zaXZlbHkgaGVyZS5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgaTE4biA9IHJlcXVpcmUoJy4vbG9jYWxlJyk7XG52YXIgbWFya3VwID0gcmVxdWlyZSgnLi9OZXRTaW1TZW5kUGFuZWwuaHRtbC5lanMnKTtcbnZhciBOZXRTaW1QYW5lbCA9IHJlcXVpcmUoJy4vTmV0U2ltUGFuZWwnKTtcbnZhciBOZXRTaW1QYWNrZXRFZGl0b3IgPSByZXF1aXJlKCcuL05ldFNpbVBhY2tldEVkaXRvcicpO1xudmFyIE5ldFNpbVBhY2tldFNpemVDb250cm9sID0gcmVxdWlyZSgnLi9OZXRTaW1QYWNrZXRTaXplQ29udHJvbCcpO1xudmFyIFBhY2tldCA9IHJlcXVpcmUoJy4vUGFja2V0Jyk7XG52YXIgRGF0YUNvbnZlcnRlcnMgPSByZXF1aXJlKCcuL0RhdGFDb252ZXJ0ZXJzJyk7XG52YXIgTmV0U2ltQ29uc3RhbnRzID0gcmVxdWlyZSgnLi9OZXRTaW1Db25zdGFudHMnKTtcbnZhciBOZXRTaW1HbG9iYWxzID0gcmVxdWlyZSgnLi9OZXRTaW1HbG9iYWxzJyk7XG5cbnZhciBFbmNvZGluZ1R5cGUgPSBOZXRTaW1Db25zdGFudHMuRW5jb2RpbmdUeXBlO1xudmFyIE1lc3NhZ2VHcmFudWxhcml0eSA9IE5ldFNpbUNvbnN0YW50cy5NZXNzYWdlR3JhbnVsYXJpdHk7XG52YXIgQklUU19QRVJfQllURSA9IE5ldFNpbUNvbnN0YW50cy5CSVRTX1BFUl9CWVRFO1xuXG52YXIgYmluYXJ5VG9BQiA9IERhdGFDb252ZXJ0ZXJzLmJpbmFyeVRvQUI7XG5cbnZhciBsb2dnZXIgPSByZXF1aXJlKCcuL05ldFNpbUxvZ2dlcicpLmdldFNpbmdsZXRvbigpO1xuXG4vKipcbiAqIEdlbmVyYXRvciBhbmQgY29udHJvbGxlciBmb3IgbWVzc2FnZSBzZW5kaW5nIHZpZXcuXG4gKiBAcGFyYW0ge2pRdWVyeX0gcm9vdERpdlxuICogQHBhcmFtIHtOZXRTaW1MZXZlbENvbmZpZ3VyYXRpb259IGxldmVsQ29uZmlnXG4gKiBAcGFyYW0ge05ldFNpbX0gbmV0c2ltXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhdWdtZW50cyBOZXRTaW1QYW5lbFxuICovXG52YXIgTmV0U2ltU2VuZFBhbmVsID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocm9vdERpdiwgbGV2ZWxDb25maWcsXG4gICAgbmV0c2ltKSB7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtOZXRTaW1MZXZlbENvbmZpZ3VyYXRpb259XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmxldmVsQ29uZmlnXyA9IGxldmVsQ29uZmlnO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7UGFja2V0LkhlYWRlclR5cGVbXX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucGFja2V0U3BlY18gPSBsZXZlbENvbmZpZy5jbGllbnRJbml0aWFsUGFja2V0SGVhZGVyO1xuXG4gIC8qKlxuICAgKiBDb25uZWN0aW9uIHRoYXQgb3ducyB0aGUgcm91dGVyIHdlIHdpbGwgcmVwcmVzZW50IC8gbWFuaXB1bGF0ZVxuICAgKiBAdHlwZSB7TmV0U2ltfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5uZXRzaW1fID0gbmV0c2ltO1xuXG4gIC8qKlxuICAgKiBMaXN0IG9mIGNvbnRyb2xsZXJzIGZvciBwYWNrZXRzIGN1cnJlbnRseSBiZWluZyBlZGl0ZWQuXG4gICAqIEB0eXBlIHtOZXRTaW1QYWNrZXRFZGl0b3JbXX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucGFja2V0c18gPSBbXTtcblxuICAvKipcbiAgICogT3VyIGxvY2FsIG5vZGUncyBhZGRyZXNzLCB6ZXJvIHVudGlsIGFzc2lnbmVkIGJ5IGEgcm91dGVyLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5mcm9tQWRkcmVzc18gPSAwO1xuXG4gIC8qKlxuICAgKiBNYXhpbXVtIHBhY2tldCBsZW5ndGggY29uZmlndXJhYmxlIGJ5IHNsaWRlci5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubWF4UGFja2V0U2l6ZV8gPSBsZXZlbENvbmZpZy5kZWZhdWx0UGFja2V0U2l6ZUxpbWl0O1xuXG4gIC8qKlxuICAgKiBCeXRlLXNpemUgdXNlZCBmb3IgZm9ybWF0dGluZyBiaW5hcnkgYW5kIGZvciBpbnRlcnByZXRpbmcgaXRcbiAgICogdG8gZGVjaW1hbCBvciBBU0NJSS5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuY2h1bmtTaXplXyA9IEJJVFNfUEVSX0JZVEU7XG5cbiAgLyoqXG4gICAqIExvY2FsIGRldmljZSBiaXRyYXRlIGluIGJpdHMtcGVyLXNlY29uZCwgd2hpY2ggYWZmZWN0cyBzZW5kIGFuaW1hdGlvblxuICAgKiBzcGVlZC5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuYml0UmF0ZV8gPSBJbmZpbml0eTtcblxuICAvKipcbiAgICogV2hhdCBlbmNvZGluZ3MgYXJlIGN1cnJlbnRseSBzZWxlY3RlZCBhbmQgZGlzcGxheWVkIGluIGVhY2hcbiAgICogcGFja2V0IGFuZCBwYWNrZXQgZWRpdG9yLlxuICAgKiBAdHlwZSB7RW5jb2RpbmdUeXBlW119XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmVuYWJsZWRFbmNvZGluZ3NfID0gbGV2ZWxDb25maWcuZGVmYXVsdEVuYWJsZWRFbmNvZGluZ3M7XG5cbiAgLyoqXG4gICAqIFJlZmVyZW5jZSB0byBwYXJlbnQgZGl2IG9mIHBhY2tldCBlZGl0b3IgbGlzdCwgZm9yIGFkZGluZyBhbmRcbiAgICogcmVtb3ZpbmcgcGFja2V0IGVkaXRvcnMuXG4gICAqIEB0eXBlIHtqUXVlcnl9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnBhY2tldHNEaXZfID0gbnVsbDtcblxuICAvKipcbiAgICogQHR5cGUge05ldFNpbVBhY2tldFNpemVDb250cm9sfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5wYWNrZXRTaXplQ29udHJvbF8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBGbGFnIGZvciB3aGV0aGVyIHRoaXMgcGFuZWwgaXMgaW4gXCJzZW5kaW5nXCIgbW9kZSwgbm9uLWludGVyYWN0aXZlIHdoaWxlXG4gICAqIGl0IGFuaW1hdGVzIHRoZSBzZW5kIHByb2Nlc3MgZm9yIHRoZSBjdXJyZW50IG1lc3NhZ2UuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5pc1BsYXlpbmdTZW5kQW5pbWF0aW9uXyA9IGZhbHNlO1xuXG4gIHZhciBwYW5lbFRpdGxlID0gKGxldmVsQ29uZmlnLm1lc3NhZ2VHcmFudWxhcml0eSA9PT0gTWVzc2FnZUdyYW51bGFyaXR5LlBBQ0tFVFMpID9cbiAgICAgIGkxOG4uc2VuZEFNZXNzYWdlKCkgOiBpMThuLnNlbmRCaXRzKCk7XG5cbiAgLy8gVE9ETzogQmFkIHByaXZhdGUgbWVtYmVyIGFjY2Vzc1xuICB0aGlzLm5ldHNpbV8ucnVuTG9vcF8udGljay5yZWdpc3Rlcih0aGlzLnRpY2suYmluZCh0aGlzKSk7XG5cbiAgTmV0U2ltUGFuZWwuY2FsbCh0aGlzLCByb290RGl2LCB7XG4gICAgY2xhc3NOYW1lOiAnbmV0c2ltLXNlbmQtcGFuZWwnLFxuICAgIHBhbmVsVGl0bGU6IHBhbmVsVGl0bGVcbiAgfSk7XG59O1xuTmV0U2ltU2VuZFBhbmVsLmluaGVyaXRzKE5ldFNpbVBhbmVsKTtcblxuLyoqXG4gKiBQdXRzIHNlbmQgcGFuZWwgaW4gYSBcInNlbmRpbmcgcGFja2V0c1wiIG5vbmludGVyYWN0aXZlIHN0YXRlIGFuZCBiZWdpbnNcbiAqIHNlbmRpbmcgcGFja2V0cyB0byByZW1vdGUuXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1TZW5kUGFuZWwucHJvdG90eXBlLmJlZ2luU2VuZGluZ1BhY2tldHNfID0gZnVuY3Rpb24gKCkge1xuICBpZiAoMCA9PT0gdGhpcy5wYWNrZXRzXy5sZW5ndGgpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLmlzUGxheWluZ1NlbmRBbmltYXRpb25fID0gdHJ1ZTtcbiAgdGhpcy5kaXNhYmxlRXZlcnl0aGluZygpO1xuICB0aGlzLnBhY2tldHNfWzBdLmJlZ2luU2VuZGluZyh0aGlzLm5ldHNpbV8ubXlOb2RlKTtcbn07XG5cbi8qKlxuICogQ2FsbGJhY2sgZm9yIHdoZW4gYW4gaW5kaXZpZHVhbCBwYWNrZXQgZmluaXNoZXMgaXRzIHNlbmQgYW5pbWF0aW9uLlxuICogTW9zdCBvZiB0aGUgdGltZSB0aGUgcGFja2V0IGdldHMgcmVtb3ZlZCBhbmQgdGhlIG5leHQgcGFja2V0IGJlZ2lucyBpdHNcbiAqIGFuaW1hdGlvbi5cbiAqIElmIGl0J3MgdGhlIGxhc3QgcGFja2V0LCB3ZSBmaW5pc2ggc2VuZGluZyBhbmQgcGVyZm9ybSBhIHBhY2tldCBlZGl0b3JcbiAqIHJlc2V0IGluc3RlYWQuXG4gKiBAcGFyYW0ge05ldFNpbVBhY2tldEVkaXRvcn0gcGFja2V0XG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1TZW5kUGFuZWwucHJvdG90eXBlLmRvbmVTZW5kaW5nUGFja2V0XyA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgLy8gSWYgaXQncyB0aGUgbGFzdCBwYWNrZXQsIHdlJ3JlIGRvbmUgc2VuZGluZyBhbHRvZ2V0aGVyLlxuICBpZiAoMSA9PT0gdGhpcy5wYWNrZXRzXy5sZW5ndGgpIHtcbiAgICB0aGlzLnJlc2V0UGFja2V0c18oKTtcbiAgICB0aGlzLmVuYWJsZUV2ZXJ5dGhpbmcoKTtcbiAgICB0aGlzLnBhY2tldHNfWzBdLmdldEZpcnN0VmlzaWJsZU1lc3NhZ2VCb3goKS5mb2N1cygpO1xuICAgIHRoaXMuaXNQbGF5aW5nU2VuZEFuaW1hdGlvbl8gPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBSZW1vdmUgdGhlIGNvbXBsZXRlZCBwYWNrZXQgYW5kIHN0YXJ0IHNlbmRpbmcgdGhlIG5leHQgb25lLlxuICB0aGlzLnJlbW92ZVBhY2tldF8ocGFja2V0KTtcbiAgdGhpcy5wYWNrZXRzX1swXS5iZWdpblNlbmRpbmcodGhpcy5uZXRzaW1fLm15Tm9kZSk7XG59O1xuXG4vKipcbiAqIFNlbmQgcGFuZWwgdXNlcyBpdHMgdGljayB0byBcInNlbmRcIiBwYWNrZXRzIGF0IGRpZmZlcmVudCBiaXRyYXRlcywgYW5pbWF0aW5nXG4gKiB0aGUgYmluYXJ5IGRyYWluaW5nIG91dCBvZiB0aGUgd2lkZ2V0IGFuZCBhY3R1YWxseSBwb3N0aW5nIGVhY2ggcGFja2V0XG4gKiB0byBzdG9yYWdlIGFzIGl0IGNvbXBsZXRlcy5cbiAqIEBwYXJhbSB7UnVuTG9vcC5DbG9ja30gY2xvY2tcbiAqL1xuTmV0U2ltU2VuZFBhbmVsLnByb3RvdHlwZS50aWNrID0gZnVuY3Rpb24gKGNsb2NrKSB7XG4gIGlmICh0aGlzLmlzUGxheWluZ1NlbmRBbmltYXRpb25fICYmIHRoaXMucGFja2V0c18ubGVuZ3RoID4gMCkge1xuICAgIHRoaXMucGFja2V0c19bMF0udGljayhjbG9jayk7XG4gIH1cbn07XG5cbi8qKiBSZXBsYWNlIGNvbnRlbnRzIG9mIG91ciByb290IGVsZW1lbnQgd2l0aCBvdXIgb3duIG1hcmt1cC4gKi9cbk5ldFNpbVNlbmRQYW5lbC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAvLyBSZW5kZXIgYm9pbGVycGxhdGUgcGFuZWwgc3R1ZmZcbiAgTmV0U2ltU2VuZFBhbmVsLnN1cGVyUHJvdG90eXBlLnJlbmRlci5jYWxsKHRoaXMpO1xuXG4gIC8vIFB1dCBvdXIgb3duIGNvbnRlbnQgaW50byB0aGUgcGFuZWwgYm9keVxuICB2YXIgbmV3TWFya3VwID0gJChtYXJrdXAoe1xuICAgIGxldmVsOiB0aGlzLmxldmVsQ29uZmlnX1xuICB9KSk7XG4gIHRoaXMuZ2V0Qm9keSgpLmh0bWwobmV3TWFya3VwKTtcblxuICAvLyBBZGQgcGFja2V0IHNpemUgc2xpZGVyIGNvbnRyb2xcbiAgaWYgKHRoaXMubGV2ZWxDb25maWdfLnNob3dQYWNrZXRTaXplQ29udHJvbCkge1xuICAgIHZhciBsZXZlbCA9IE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKTtcbiAgICB2YXIgZW5jb2RlciA9IG5ldyBQYWNrZXQuRW5jb2RlcihsZXZlbC5hZGRyZXNzRm9ybWF0LFxuICAgICAgICBsZXZlbC5wYWNrZXRDb3VudEJpdFdpZHRoLCB0aGlzLnBhY2tldFNwZWNfKTtcbiAgICB0aGlzLnBhY2tldFNpemVDb250cm9sXyA9IG5ldyBOZXRTaW1QYWNrZXRTaXplQ29udHJvbChcbiAgICAgICAgdGhpcy5yb290RGl2Xy5maW5kKCcucGFja2V0LXNpemUnKSxcbiAgICAgICAgdGhpcy5wYWNrZXRTaXplQ2hhbmdlQ2FsbGJhY2tfLmJpbmQodGhpcyksXG4gICAgICAgIHtcbiAgICAgICAgICBtaW5pbXVtUGFja2V0U2l6ZTogZW5jb2Rlci5nZXRIZWFkZXJMZW5ndGgoKSxcbiAgICAgICAgICBzbGlkZXJTdGVwVmFsdWU6IDFcbiAgICAgICAgfSk7XG4gICAgdGhpcy5wYWNrZXRTaXplQ29udHJvbF8uc2V0VmFsdWUodGhpcy5tYXhQYWNrZXRTaXplXyk7XG4gIH1cblxuICAvLyBCaW5kIHVzZWZ1bCBlbGVtZW50cyBhbmQgYWRkIGhhbmRsZXJzXG4gIHRoaXMucGFja2V0c0Rpdl8gPSB0aGlzLmdldEJvZHkoKS5maW5kKCcuc2VuZC1wYW5lbC1wYWNrZXRzJyk7XG4gIHRoaXMuZ2V0Qm9keSgpXG4gICAgICAuZmluZCgnI2FkZC1wYWNrZXQtYnV0dG9uJylcbiAgICAgIC5jbGljayh0aGlzLm9uQWRkUGFja2V0QnV0dG9uUHJlc3NfLmJpbmQodGhpcykpO1xuICAvLyBUT0RPOiBOZXRTaW0gYnV0dG9ucyBpbiB0aGlzIHBhbmVsIG5lZWQgdG8gZG8gbm90aGluZyBpZiBkaXNhYmxlZCFcbiAgdGhpcy5nZXRCb2R5KClcbiAgICAgIC5maW5kKCcjc2VuZC1idXR0b24nKVxuICAgICAgLmNsaWNrKHRoaXMub25TZW5kRXZlbnRUcmlnZ2VyZWRfLmJpbmQodGhpcykpO1xuICB0aGlzLmdldEJvZHkoKVxuICAgICAgLmZpbmQoJyNzZXQtd2lyZS1idXR0b24nKVxuICAgICAgLmNsaWNrKHRoaXMub25TZW5kRXZlbnRUcmlnZ2VyZWRfLmJpbmQodGhpcykpO1xuXG4gIC8vIE5vdGU6IEF0IHNvbWUgcG9pbnQsIHdlIG1pZ2h0IHdhbnQgdG8gcmVwbGFjZSB0aGlzIHdpdGggc29tZXRoaW5nXG4gIC8vIHRoYXQgbmljZWx5IHJlLXJlbmRlcnMgdGhlIGNvbnRlbnRzIG9mIHRoaXMucGFja2V0c18uLi4gZm9yIG5vdyxcbiAgLy8gd2Ugb25seSBjYWxsIHJlbmRlciBmb3Igc2V0LXVwLCBzbyBpdCdzIG9rYXkuXG4gIHRoaXMucmVzZXRQYWNrZXRzXygpO1xufTtcblxuLyoqXG4gKiBBZGQgYSBuZXcsIGJsYW5rIHBhY2tldCB0byB0aGUgc2V0IG9mIHBhY2tldHMgYmVpbmcgZWRpdGVkLlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltU2VuZFBhbmVsLnByb3RvdHlwZS5hZGRQYWNrZXRfID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbmV3UGFja2V0Q291bnQgPSB0aGlzLnBhY2tldHNfLmxlbmd0aCArIDE7XG5cbiAgLy8gVXBkYXRlIHRoZSB0b3RhbCBwYWNrZXQgY291bnQgb24gYWxsIGV4aXN0aW5nIHBhY2tldHNcbiAgdGhpcy5wYWNrZXRzXy5mb3JFYWNoKGZ1bmN0aW9uIChwYWNrZXRFZGl0b3IpIHtcbiAgICBwYWNrZXRFZGl0b3Iuc2V0UGFja2V0Q291bnQobmV3UGFja2V0Q291bnQpO1xuICB9KTtcblxuICAvLyBDb3B5IHRoZSB0byBhZGRyZXNzIG9mIHRoZSBwcmV2aW91cyBwYWNrZXQgaWYgaXQgZXhpc3RzLiBPdGhlcndpc2VcbiAgLy8gdXNlIHRoZSBsYXN0IGFkZHJlc3Mgc2VudC5cbiAgLy8gVE9ETzogRG8gd2UgbmVlZCB0byBsb2NrIHRoZSB0b0FkZHJlc3MgZm9yIGFsbCBvZiB0aGVzZSBwYWNrZXRzIHRvZ2V0aGVyP1xuICB2YXIgbmV3UGFja2V0VG9BZGRyZXNzO1xuICBpZiAodGhpcy5wYWNrZXRzXy5sZW5ndGggPiAwKSB7XG4gICAgbmV3UGFja2V0VG9BZGRyZXNzID0gdGhpcy5wYWNrZXRzX1t0aGlzLnBhY2tldHNfLmxlbmd0aCAtIDFdLnRvQWRkcmVzcztcbiAgfSBlbHNlIHtcbiAgICBuZXdQYWNrZXRUb0FkZHJlc3MgPSAnMCc7XG4gIH1cblxuICAvLyBDcmVhdGUgYSBuZXcgcGFja2V0XG4gIHZhciBuZXdQYWNrZXQgPSBuZXcgTmV0U2ltUGFja2V0RWRpdG9yKHtcbiAgICBtZXNzYWdlR3JhbnVsYXJpdHk6IHRoaXMubGV2ZWxDb25maWdfLm1lc3NhZ2VHcmFudWxhcml0eSxcbiAgICBwYWNrZXRTcGVjOiB0aGlzLnBhY2tldFNwZWNfLFxuICAgIHRvQWRkcmVzczogbmV3UGFja2V0VG9BZGRyZXNzLFxuICAgIGZyb21BZGRyZXNzOiB0aGlzLmZyb21BZGRyZXNzXyxcbiAgICBwYWNrZXRJbmRleDogbmV3UGFja2V0Q291bnQsXG4gICAgcGFja2V0Q291bnQ6IG5ld1BhY2tldENvdW50LFxuICAgIG1heFBhY2tldFNpemU6IHRoaXMubWF4UGFja2V0U2l6ZV8sXG4gICAgY2h1bmtTaXplOiB0aGlzLmNodW5rU2l6ZV8sXG4gICAgYml0UmF0ZTogdGhpcy5iaXRSYXRlXyxcbiAgICBlbmFibGVkRW5jb2RpbmdzOiB0aGlzLmVuYWJsZWRFbmNvZGluZ3NfLFxuICAgIHJlbW92ZVBhY2tldENhbGxiYWNrOiB0aGlzLnJlbW92ZVBhY2tldF8uYmluZCh0aGlzKSxcbiAgICBkb25lU2VuZGluZ0NhbGxiYWNrOiB0aGlzLmRvbmVTZW5kaW5nUGFja2V0Xy5iaW5kKHRoaXMpLFxuICAgIGNvbnRlbnRDaGFuZ2VDYWxsYmFjazogdGhpcy5vbkNvbnRlbnRDaGFuZ2VfLmJpbmQodGhpcyksXG4gICAgZW50ZXJLZXlQcmVzc2VkQ2FsbGJhY2s6IHRoaXMub25TZW5kRXZlbnRUcmlnZ2VyZWRfLmJpbmQodGhpcylcbiAgfSk7XG5cbiAgLy8gQXR0YWNoIHRoZSBuZXcgcGFja2V0IHRvIHRoaXMgU2VuZFBhbmVsXG4gIHZhciB1cGRhdGVMYXlvdXQgPSB0aGlzLm5ldHNpbV8udXBkYXRlTGF5b3V0LmJpbmQodGhpcy5uZXRzaW1fKTtcbiAgbmV3UGFja2V0LmdldFJvb3QoKS5hcHBlbmRUbyh0aGlzLnBhY2tldHNEaXZfKTtcbiAgbmV3UGFja2V0LmdldFJvb3QoKS5oaWRlKCkuc2xpZGVEb3duKCdmYXN0JywgZnVuY3Rpb24gKCkge1xuICAgIG5ld1BhY2tldC5nZXRGaXJzdFZpc2libGVNZXNzYWdlQm94KCkuZm9jdXMoKTtcbiAgICB1cGRhdGVMYXlvdXQoKTtcbiAgfSk7XG4gIHRoaXMucGFja2V0c18ucHVzaChuZXdQYWNrZXQpO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYSBwYWNrZXQgZnJvbSB0aGUgc2VuZCBwYW5lbCwgYW5kIGFkanVzdCBvdGhlciBwYWNrZXRzIGZvclxuICogY29uc2lzdGVuY3kuXG4gKiBAcGFyYW0ge05ldFNpbVBhY2tldEVkaXRvcn0gcGFja2V0XG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1TZW5kUGFuZWwucHJvdG90eXBlLnJlbW92ZVBhY2tldF8gPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIC8vIFJlbW92ZSBmcm9tIERPTVxuICB2YXIgdXBkYXRlTGF5b3V0ID0gdGhpcy5uZXRzaW1fLnVwZGF0ZUxheW91dC5iaW5kKHRoaXMubmV0c2ltXyk7XG4gIHBhY2tldC5nZXRSb290KClcbiAgICAgIC5zbGlkZVVwKCdmYXN0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICQodGhpcykucmVtb3ZlKCk7XG4gICAgICAgIHVwZGF0ZUxheW91dCgpO1xuICAgICAgfSk7XG5cbiAgLy8gUmVtb3ZlIGZyb20gaW50ZXJuYWwgY29sbGVjdGlvblxuICB0aGlzLnBhY2tldHNfID0gdGhpcy5wYWNrZXRzXy5maWx0ZXIoZnVuY3Rpb24gKHBhY2tldEVkaXRvcikge1xuICAgIHJldHVybiBwYWNrZXRFZGl0b3IgIT09IHBhY2tldDtcbiAgfSk7XG5cbiAgLy8gQWRqdXN0IG51bWJlcmluZyBvZiByZW1haW5pbmcgcGFja2V0cyBpZiB3ZSdyZSBub3QgbWlkLXNlbmRcbiAgaWYgKCF0aGlzLmlzUGxheWluZ1NlbmRBbmltYXRpb25fKSB7XG4gICAgdmFyIHBhY2tldENvdW50ID0gdGhpcy5wYWNrZXRzXy5sZW5ndGg7XG4gICAgdmFyIHBhY2tldEluZGV4O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFja2V0Q291bnQ7IGkrKykge1xuICAgICAgcGFja2V0SW5kZXggPSBpICsgMTtcbiAgICAgIHRoaXMucGFja2V0c19baV0uc2V0UGFja2V0SW5kZXgocGFja2V0SW5kZXgpO1xuICAgICAgdGhpcy5wYWNrZXRzX1tpXS5zZXRQYWNrZXRDb3VudChwYWNrZXRDb3VudCk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFJlc2V0IHRoZSBlZGl0b3IgdG8gaXRzICdlbXB0eScgc3RhdGU6IFJlbW92ZSBhbGwgYnV0IHRoZSBmaXJzdCBwYWNrZXQsXG4gKiBhbmQgcmVzZXQgdGhlIGZpcnN0IHBhY2tldCB0byBlbXB0eS5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVNlbmRQYW5lbC5wcm90b3R5cGUucmVzZXRQYWNrZXRzXyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMucGFja2V0c18ubGVuZ3RoID4gMCkge1xuICAgIHRoaXMucGFja2V0c0Rpdl8uY2hpbGRyZW4oKS5zbGljZSgxKS5yZW1vdmUoKTtcbiAgICB0aGlzLnBhY2tldHNfLmxlbmd0aCA9IE1hdGgubWluKDEsIHRoaXMucGFja2V0c18ubGVuZ3RoKTtcbiAgICB0aGlzLnBhY2tldHNfWzBdLnJlc2V0UGFja2V0KCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5hZGRQYWNrZXRfKCk7XG4gIH1cbn07XG5cbi8qKlxuICogV2hlbiBhbnkgcGFja2V0IGVkaXRvcidzIGJpbmFyeSBjb250ZW50IGNoYW5nZXMsIHdlIG1heSB3YW50XG4gKiB0byB1cGRhdGUgVUkgd3JhcHBlciBlbGVtZW50cyAobGlrZSB0aGUgXCJzZXQgbmV4dCBiaXRcIiBidXR0b24pXG4gKiBpbiByZXNwb25zZVxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltU2VuZFBhbmVsLnByb3RvdHlwZS5vbkNvbnRlbnRDaGFuZ2VfID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbmV4dEJpdCA9IHRoaXMuZ2V0TmV4dEJpdF8oKTtcblxuICBpZiAobmV4dEJpdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gSWYgdGhlcmUgYXJlIG5vIGJpdHMgcXVldWVkIHVwLCBkaXNhYmxlIHRoZSBidXR0b25cbiAgICB0aGlzLmdldFNldFdpcmVCdXR0b24oKS50ZXh0KGkxOG4uc2V0V2lyZSgpKTtcbiAgICB0aGlzLmNvbmRpdGlvbmFsbHlUb2dnbGVTZXRXaXJlQnV0dG9uKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBJZiB3ZSBoYXZlIHRoZSBcIkEvQlwiIGVuY29kaW5nIGVuYWJsZWQgYnV0IF9ub3RfIFwiQmluYXJ5XCIsXG4gICAgLy8gZm9ybWF0IHRoaXMgYnV0dG9uIGxhYmVsIHVzaW5nIHRoZSBcIkEvQlwiIGNvbnZlbnRpb25cbiAgICBpZiAodGhpcy5pc0VuY29kaW5nRW5hYmxlZF8oRW5jb2RpbmdUeXBlLkFfQU5EX0IpICYmXG4gICAgICAgICF0aGlzLmlzRW5jb2RpbmdFbmFibGVkXyhFbmNvZGluZ1R5cGUuQklOQVJZKSkge1xuICAgICAgbmV4dEJpdCA9IGJpbmFyeVRvQUIobmV4dEJpdCk7XG4gICAgfVxuXG4gICAgdGhpcy5nZXRTZXRXaXJlQnV0dG9uKCkudGV4dChpMThuLnNldFdpcmVUb1ZhbHVlKHsgdmFsdWU6IG5leHRCaXQgfSkpO1xuICAgIHRoaXMuY29uZGl0aW9uYWxseVRvZ2dsZVNldFdpcmVCdXR0b24oKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBnaXZlbiBlbmNvZGluZyBpcyBjdXJyZW50bHkgZGlzcGxheWVkIGJ5IHRoZSBwYW5lbC5cbiAqIEBwYXJhbSB7RW5jb2RpbmdUeXBlfSBxdWVyeUVuY29kaW5nXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVNlbmRQYW5lbC5wcm90b3R5cGUuaXNFbmNvZGluZ0VuYWJsZWRfID0gZnVuY3Rpb24gKHF1ZXJ5RW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuZW5hYmxlZEVuY29kaW5nc18uc29tZShmdW5jdGlvbiAoZW5hYmxlZEVuY29kaW5nKSB7XG4gICAgcmV0dXJuIGVuYWJsZWRFbmNvZGluZyA9PT0gcXVlcnlFbmNvZGluZztcbiAgfSk7XG59O1xuXG4vKipcbiAqIFVwZGF0ZSBmcm9tIGFkZHJlc3MgZm9yIHRoZSBwYW5lbCwgdXBkYXRlIGFsbCB0aGUgcGFja2V0cyB0byByZWZsZWN0IHRoaXMuXG4gKiBAcGFyYW0ge251bWJlcn0gW2Zyb21BZGRyZXNzXSBkZWZhdWx0IHplcm9cbiAqL1xuTmV0U2ltU2VuZFBhbmVsLnByb3RvdHlwZS5zZXRGcm9tQWRkcmVzcyA9IGZ1bmN0aW9uIChmcm9tQWRkcmVzcykge1xuICAvLyBmcm9tQWRkcmVzcyBjYW4gYmUgdW5kZWZpbmVkIGZvciBvdGhlciBwYXJ0cyBvZiB0aGUgc2ltLCBidXQgd2l0aGluXG4gIC8vIHRoZSBzZW5kIHBhbmVsIHdlIGp1c3Qgc2V0IGl0IHRvIHplcm8uXG4gIHRoaXMuZnJvbUFkZHJlc3NfID0gdXRpbHMudmFsdWVPcihmcm9tQWRkcmVzcywgMCk7XG5cbiAgdGhpcy5wYWNrZXRzXy5mb3JFYWNoKGZ1bmN0aW9uIChwYWNrZXRFZGl0b3IpIHtcbiAgICBwYWNrZXRFZGl0b3Iuc2V0RnJvbUFkZHJlc3ModGhpcy5mcm9tQWRkcmVzc18pO1xuICB9LmJpbmQodGhpcykpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0V2ZW50fSBqUXVlcnlFdmVudFxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltU2VuZFBhbmVsLnByb3RvdHlwZS5vbkFkZFBhY2tldEJ1dHRvblByZXNzXyA9IGZ1bmN0aW9uIChqUXVlcnlFdmVudCkge1xuICB2YXIgdGhpc0J1dHRvbiA9ICQoalF1ZXJ5RXZlbnQudGFyZ2V0KTtcbiAgaWYgKHRoaXNCdXR0b24uaXMoJ1tkaXNhYmxlZF0nKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuYWRkUGFja2V0XygpO1xuXG4gIC8vIFNjcm9sbCB0byBlbmQgb2YgcGFja2V0IGFyZWFcbiAgdmFyIHNjcm9sbGluZ0FyZWEgPSB0aGlzLmdldEJvZHkoKS5maW5kKCcuc2VuZC1wYW5lbC1wYWNrZXRzJyk7XG4gIHNjcm9sbGluZ0FyZWEuYW5pbWF0ZSh7IHNjcm9sbFRvcDogc2Nyb2xsaW5nQXJlYVswXS5zY3JvbGxIZWlnaHQgfSwgJ2Zhc3QnKTtcbn07XG5cbi8qKlxuICogU2VuZCBtZXNzYWdlIHRvIGNvbm5lY3RlZCByZW1vdGVcbiAqIEBwYXJhbSB7RXZlbnR9IGpRdWVyeUV2ZW50XG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1TZW5kUGFuZWwucHJvdG90eXBlLm9uU2VuZEV2ZW50VHJpZ2dlcmVkXyA9IGZ1bmN0aW9uIChqUXVlcnlFdmVudCkge1xuICB2YXIgdHJpZ2dlcmluZ1RhcmdldCA9ICQoalF1ZXJ5RXZlbnQudGFyZ2V0KTtcbiAgaWYgKHRyaWdnZXJpbmdUYXJnZXQuaXMoJ1tkaXNhYmxlZF0nKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBsZXZlbCA9IE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKTtcbiAgaWYgKGxldmVsLm1lc3NhZ2VHcmFudWxhcml0eSA9PT0gTWVzc2FnZUdyYW51bGFyaXR5LlBBQ0tFVFMpIHtcbiAgICB0aGlzLmJlZ2luU2VuZGluZ1BhY2tldHNfKCk7XG4gIH0gZWxzZSBpZiAobGV2ZWwubWVzc2FnZUdyYW51bGFyaXR5ID09PSBNZXNzYWdlR3JhbnVsYXJpdHkuQklUUykge1xuICAgIHRoaXMuc2VuZE9uZUJpdF8oKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTZW5kIGEgc2luZ2xlIGJpdCwgbWFudWFsbHkgJ3NldHRpbmcgdGhlIHdpcmUgc3RhdGUnLlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltU2VuZFBhbmVsLnByb3RvdHlwZS5zZW5kT25lQml0XyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG15Tm9kZSA9IHRoaXMubmV0c2ltXy5teU5vZGU7XG4gIGlmICghbXlOb2RlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVHJpZWQgdG8gc2V0IHdpcmUgc3RhdGUgd2hlbiBubyBjb25uZWN0aW9uIGlzIGVzdGFibGlzaGVkLlwiKTtcbiAgfVxuXG4gIC8vIEZpbmQgdGhlIGZpcnN0IGJpdCBvZiB0aGUgZmlyc3QgcGFja2V0LiBEaXNhbGxvdyBzZXR0aW5nIHRoZSB3aXJlXG4gIC8vIGlmIHRoZXJlIGlzIG5vIGZpcnN0IGJpdC5cbiAgdmFyIG5leHRCaXQgPSB0aGlzLmdldE5leHRCaXRfKCk7XG4gIGlmIChuZXh0Qml0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJUcmllZCB0byBzZXQgd2lyZSBzdGF0ZSB3aGVuIG5vIGJpdCBpcyBxdWV1ZWQuXCIpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZGlzYWJsZUV2ZXJ5dGhpbmcoKTtcbiAgICB0aGlzLm5ldHNpbV8uYW5pbWF0ZVNldFdpcmVTdGF0ZShuZXh0Qml0KTtcbiAgICBteU5vZGUuc2V0U2ltcGxleFdpcmVTdGF0ZShuZXh0Qml0LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGxvZ2dlci53YXJuKGVyci5tZXNzYWdlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbnN1bWVGaXJzdEJpdCgpO1xuICAgICAgdGhpcy5lbmFibGVFdmVyeXRoaW5nKCk7XG4gICAgICB0aGlzLmNvbmRpdGlvbmFsbHlUb2dnbGVTZXRXaXJlQnV0dG9uKCk7XG4gICAgfS5iaW5kKHRoaXMpKTtcbiAgfVxufTtcblxuLyoqXG4gKiBHZXQgdGhlIG5leHQgYml0IHRoYXQgd291bGQgYmUgc2VudCwgaWYgc2VuZGluZyB0aGUgZW50ZXJlZCBtZXNzYWdlIG9uZVxuICogYml0IGF0IGEgdGltZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBzaW5nbGUgYml0IGFzIGEgXCIwXCIgb3IgXCIxXCIgaWYgdGhlcmUgYXJlXG4gKiBiaXRzIHRvIGJlIHNlbnQsIG9yIHVuZGVmaW5lZCBvdGhlcndpc2VcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVNlbmRQYW5lbC5wcm90b3R5cGUuZ2V0TmV4dEJpdF8gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLnBhY2tldHNfLmxlbmd0aCA+IDAgPyB0aGlzLnBhY2tldHNfWzBdLmdldEZpcnN0Qml0KCkgOiB1bmRlZmluZWQ7XG59O1xuXG4vKiogRGlzYWJsZSBhbGwgY29udHJvbHMgaW4gdGhpcyBwYW5lbCwgdXN1YWxseSBkdXJpbmcgbmV0d29yayBhY3Rpdml0eS4gKi9cbk5ldFNpbVNlbmRQYW5lbC5wcm90b3R5cGUuZGlzYWJsZUV2ZXJ5dGhpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZ2V0Qm9keSgpLmZpbmQoJ2lucHV0LCB0ZXh0YXJlYScpLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gIHRoaXMuZ2V0Qm9keSgpLmZpbmQoJy5uZXRzaW0tYnV0dG9uJykuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgaWYgKHRoaXMucGFja2V0U2l6ZUNvbnRyb2xfKSB7XG4gICAgdGhpcy5wYWNrZXRTaXplQ29udHJvbF8uZGlzYWJsZSgpO1xuICB9XG59O1xuXG4vKipcbiAqIEZpbmRzIHRoZSBidXR0b24gdXNlZCB0byBzZXQgdGhlIHdpcmUgc3RhdGVcbiAqIEByZXR1cm5zIHtqUXVlcnl9XG4gKi9cbk5ldFNpbVNlbmRQYW5lbC5wcm90b3R5cGUuZ2V0U2V0V2lyZUJ1dHRvbiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuZ2V0Qm9keSgpLmZpbmQoJyNzZXQtd2lyZS1idXR0b24nKTtcbn07XG5cbi8qKiBFbmFibGVzIHRoZSBzZXRXaXJlQnV0dG9uIGlmIHRoZXJlIGlzIGFub3RoZXIgYml0IGluIHRoZSBxdWV1ZSxcbiAqIGRpc2FibGVzIGl0IG90aGVyd2lzZS5cbiAqIEByZXR1cm5zIHtqUXVlcnl9XG4gKi9cbk5ldFNpbVNlbmRQYW5lbC5wcm90b3R5cGUuY29uZGl0aW9uYWxseVRvZ2dsZVNldFdpcmVCdXR0b24gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZXRXaXJlQnV0dG9uID0gdGhpcy5nZXRTZXRXaXJlQnV0dG9uKCk7XG4gIGlmICh0aGlzLmdldE5leHRCaXRfKCkgPT09IHVuZGVmaW5lZCkge1xuICAgIHNldFdpcmVCdXR0b24uYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgfSBlbHNlIHtcbiAgICBzZXRXaXJlQnV0dG9uLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJyk7XG4gIH1cbiAgcmV0dXJuIHNldFdpcmVCdXR0b247XG59O1xuXG4vKiogRW5hYmxlIGFsbCBjb250cm9scyBpbiB0aGlzIHBhbmVsLCB1c3VhbGx5IGFmdGVyIG5ldHdvcmsgYWN0aXZpdHkuICovXG5OZXRTaW1TZW5kUGFuZWwucHJvdG90eXBlLmVuYWJsZUV2ZXJ5dGhpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZ2V0Qm9keSgpLmZpbmQoJ2lucHV0LCB0ZXh0YXJlYScpLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xuICB0aGlzLmdldEJvZHkoKS5maW5kKCcubmV0c2ltLWJ1dHRvbicpLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJyk7XG4gIGlmICh0aGlzLnBhY2tldFNpemVDb250cm9sXykge1xuICAgIHRoaXMucGFja2V0U2l6ZUNvbnRyb2xfLmVuYWJsZSgpO1xuICB9XG59O1xuXG4vKipcbiAqIFJlbW92ZSB0aGUgZmlyc3QgYml0IG9mIHRoZSBmaXJzdCBwYWNrZXQsIHVzdWFsbHkgYmVjYXVzZSB3ZSBqdXN0IHNlbnRcbiAqIGEgc2luZ2xlIGJpdCBpbiB2YXJpYW50IDEuXG4gKi9cbk5ldFNpbVNlbmRQYW5lbC5wcm90b3R5cGUuY29uc3VtZUZpcnN0Qml0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5wYWNrZXRzXy5sZW5ndGggPiAwKSB7XG4gICAgdGhpcy5wYWNrZXRzX1swXS5jb25zdW1lRmlyc3RCaXQoKTtcbiAgICBpZiAodGhpcy5wYWNrZXRzX1swXS5nZXRQYWNrZXRCaW5hcnkoKSA9PT0gJycgJiYgdGhpcy5wYWNrZXRzXy5sZW5ndGggPiAxKSB7XG4gICAgICB0aGlzLnJlbW92ZVBhY2tldF8odGhpcy5wYWNrZXRzX1swXSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFNob3cgb3IgaGlkZSBwYXJ0cyBvZiB0aGUgc2VuZCBVSSBiYXNlZCBvbiB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGVuY29kaW5nXG4gKiBtb2RlLlxuICogQHBhcmFtIHtFbmNvZGluZ1R5cGVbXX0gbmV3RW5jb2RpbmdzXG4gKi9cbk5ldFNpbVNlbmRQYW5lbC5wcm90b3R5cGUuc2V0RW5jb2RpbmdzID0gZnVuY3Rpb24gKG5ld0VuY29kaW5ncykge1xuICB0aGlzLmVuYWJsZWRFbmNvZGluZ3NfID0gbmV3RW5jb2RpbmdzO1xuICB0aGlzLnBhY2tldHNfLmZvckVhY2goZnVuY3Rpb24gKHBhY2tldEVkaXRvcikge1xuICAgIHBhY2tldEVkaXRvci5zZXRFbmNvZGluZ3MobmV3RW5jb2RpbmdzKTtcbiAgfSk7XG4gIHRoaXMub25Db250ZW50Q2hhbmdlXygpO1xufTtcblxuLyoqXG4gKiBDaGFuZ2UgaG93IGRhdGEgaXMgaW50ZXJwcmV0ZWQgYW5kIGZvcm1hdHRlZCBieSB0aGlzIGNvbXBvbmVudCwgdHJpZ2dlcmluZ1xuICogYW4gdXBkYXRlIG9mIGFsbCBpbnB1dCBmaWVsZHMuXG4gKiBAcGFyYW0ge251bWJlcn0gbmV3Q2h1bmtTaXplXG4gKi9cbk5ldFNpbVNlbmRQYW5lbC5wcm90b3R5cGUuc2V0Q2h1bmtTaXplID0gZnVuY3Rpb24gKG5ld0NodW5rU2l6ZSkge1xuICB0aGlzLmNodW5rU2l6ZV8gPSBuZXdDaHVua1NpemU7XG4gIHRoaXMucGFja2V0c18uZm9yRWFjaChmdW5jdGlvbiAocGFja2V0RWRpdG9yKSB7XG4gICAgcGFja2V0RWRpdG9yLnNldENodW5rU2l6ZShuZXdDaHVua1NpemUpO1xuICB9KTtcbn07XG5cbi8qKlxuICogQ2hhbmdlIHRoZSBsb2NhbCBkZXZpY2UgYml0cmF0ZSB3aGljaCBhZmZlY3RzIHNlbmQgYW5pbWF0aW9uIHNwZWVkLlxuICogQHBhcmFtIHtudW1iZXJ9IG5ld0JpdFJhdGUgaW4gYml0cyBwZXIgc2Vjb25kXG4gKi9cbk5ldFNpbVNlbmRQYW5lbC5wcm90b3R5cGUuc2V0Qml0UmF0ZSA9IGZ1bmN0aW9uIChuZXdCaXRSYXRlKSB7XG4gIHRoaXMuYml0UmF0ZV8gPSBuZXdCaXRSYXRlO1xuICB0aGlzLnBhY2tldHNfLmZvckVhY2goZnVuY3Rpb24gKHBhY2tldEVkaXRvcikge1xuICAgIHBhY2tldEVkaXRvci5zZXRCaXRSYXRlKG5ld0JpdFJhdGUpO1xuICB9KTtcbn07XG5cbi8qKlxuICogQ2FsbGJhY2sgcGFzc2VkIGRvd24gaW50byBwYWNrZXQgc2l6ZSBjb250cm9sLCBjYWxsZWQgd2hlbiBwYWNrZXQgc2l6ZVxuICogaXMgY2hhbmdlZCBieSB0aGUgdXNlci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBuZXdQYWNrZXRTaXplXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1TZW5kUGFuZWwucHJvdG90eXBlLnBhY2tldFNpemVDaGFuZ2VDYWxsYmFja18gPSBmdW5jdGlvbiAobmV3UGFja2V0U2l6ZSkge1xuICB0aGlzLm1heFBhY2tldFNpemVfID0gbmV3UGFja2V0U2l6ZTtcbiAgdGhpcy5wYWNrZXRzXy5mb3JFYWNoKGZ1bmN0aW9uIChwYWNrZXRFZGl0b3Ipe1xuICAgIHBhY2tldEVkaXRvci5zZXRNYXhQYWNrZXRTaXplKG5ld1BhY2tldFNpemUpO1xuICB9KTtcbn07XG5cbi8qKlxuICogQWZ0ZXIgdG9nZ2xpbmcgcGFuZWwgdmlzaWJpbGl0eSwgdHJpZ2dlciBhIGxheW91dCB1cGRhdGUgc28gc2VuZC9sb2cgcGFuZWxcbiAqIHNwYWNlIGlzIHNoYXJlZCBjb3JyZWN0bHkuXG4gKiBAcHJpdmF0ZVxuICogQG92ZXJyaWRlXG4gKi9cbk5ldFNpbVNlbmRQYW5lbC5wcm90b3R5cGUub25NaW5pbWl6ZXJDbGlja18gPSBmdW5jdGlvbiAoKSB7XG4gIE5ldFNpbVNlbmRQYW5lbC5zdXBlclByb3RvdHlwZS5vbk1pbmltaXplckNsaWNrXy5jYWxsKHRoaXMpO1xuICB0aGlzLm5ldHNpbV8udXBkYXRlTGF5b3V0KCk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHM9IChmdW5jdGlvbigpIHtcbiAgdmFyIHQgPSBmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzLCBmaWx0ZXJzLCBlc2NhcGVcbi8qKi8pIHtcbmVzY2FwZSA9IGVzY2FwZSB8fCBmdW5jdGlvbiAoaHRtbCl7XG4gIHJldHVybiBTdHJpbmcoaHRtbClcbiAgICAucmVwbGFjZSgvJig/IVxcdys7KS9nLCAnJmFtcDsnKVxuICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXG4gICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbn07XG52YXIgYnVmID0gW107XG53aXRoIChsb2NhbHMgfHwge30pIHsgKGZ1bmN0aW9uKCl7IFxuIGJ1Zi5wdXNoKCcnKTsxO1xuICB2YXIgaTE4biA9IHJlcXVpcmUoJy4vbG9jYWxlJyk7XG4gIHZhciBNZXNzYWdlR3JhbnVsYXJpdHkgPSByZXF1aXJlKCcuL05ldFNpbUNvbnN0YW50cycpLk1lc3NhZ2VHcmFudWxhcml0eTtcbjsgYnVmLnB1c2goJ1xcbjxkaXYgY2xhc3M9XCJzZW5kLXBhbmVsLXBhY2tldHNcIj48L2Rpdj5cXG48ZGl2IGNsYXNzPVwicGFuZWwtZm9vdGVyXCI+XFxuICA8ZGl2IGNsYXNzPVwicmlnaHQtc2lkZS1jb250cm9sc1wiPlxcbiAgICAnKTs4OyBpZiAobGV2ZWwuc2hvd0FkZFBhY2tldEJ1dHRvbikgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgICA8c3BhbiBjbGFzcz1cIm5ldHNpbS1idXR0b24gc2Vjb25kYXJ5IGxhcmdlLWJ1dHRvblwiIGlkPVwiYWRkLXBhY2tldC1idXR0b25cIj4nLCBlc2NhcGUoKDksICBpMThuLmFkZFBhY2tldCgpICkpLCAnPC9zcGFuPlxcbiAgICAnKTsxMDsgfSA7IGJ1Zi5wdXNoKCdcXG4gICAgJyk7MTE7IGlmIChsZXZlbC5tZXNzYWdlR3JhbnVsYXJpdHkgPT09IE1lc3NhZ2VHcmFudWxhcml0eS5QQUNLRVRTKSB7IDsgYnVmLnB1c2goJ1xcbiAgICAgIDxzcGFuIGNsYXNzPVwibmV0c2ltLWJ1dHRvbiBsYXJnZS1idXR0b25cIiBpZD1cInNlbmQtYnV0dG9uXCI+JywgZXNjYXBlKCgxMiwgIGkxOG4uc2VuZCgpICkpLCAnPC9zcGFuPlxcbiAgICAnKTsxMzsgfSBlbHNlIGlmIChsZXZlbC5tZXNzYWdlR3JhbnVsYXJpdHkgPT09IE1lc3NhZ2VHcmFudWxhcml0eS5CSVRTKSB7IDsgYnVmLnB1c2goJ1xcbiAgICAgIDxzcGFuIGNsYXNzPVwibmV0c2ltLWJ1dHRvbiBsYXJnZS1idXR0b25cIiBpZD1cInNldC13aXJlLWJ1dHRvblwiPicsIGVzY2FwZSgoMTQsICBpMThuLnNldFdpcmUoKSApKSwgJzwvc3Bhbj5cXG4gICAgJyk7MTU7IH0gOyBidWYucHVzaCgnXFxuICA8L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XCJwYWNrZXQtc2l6ZVwiPjwvZGl2PlxcbjwvZGl2PlxcbicpOyB9KSgpO1xufSBcbnJldHVybiBidWYuam9pbignJyk7XG59O1xuICByZXR1cm4gZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgcmV0dXJuIHQobG9jYWxzLCByZXF1aXJlKFwiZWpzXCIpLmZpbHRlcnMpO1xuICB9XG59KCkpOyIsIi8qKlxuICogQG92ZXJ2aWV3IFVJIGNvbnRyb2xsZXIgZm9yIHRoZSBcIlJvdXRlclwiIHRhYiBpbiB0aGUgbGVmdCBjb2x1bW4uXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgbWFya3VwID0gcmVxdWlyZSgnLi9OZXRTaW1Sb3V0ZXJUYWIuaHRtbC5lanMnKTtcbnZhciBOZXRTaW1CYW5kd2lkdGhDb250cm9sID0gcmVxdWlyZSgnLi9OZXRTaW1CYW5kd2lkdGhDb250cm9sJyk7XG52YXIgTmV0U2ltTWVtb3J5Q29udHJvbCA9IHJlcXVpcmUoJy4vTmV0U2ltTWVtb3J5Q29udHJvbCcpO1xudmFyIE5ldFNpbVJvdXRlclN0YXRzVGFibGUgPSByZXF1aXJlKCcuL05ldFNpbVJvdXRlclN0YXRzVGFibGUnKTtcbnZhciBOZXRTaW1HbG9iYWxzID0gcmVxdWlyZSgnLi9OZXRTaW1HbG9iYWxzJyk7XG5cbi8qKlxuICogR2VuZXJhdG9yIGFuZCBjb250cm9sbGVyIGZvciByb3V0ZXIgaW5mb3JtYXRpb24gdmlldy5cbiAqIEBwYXJhbSB7alF1ZXJ5fSByb290RGl2IC0gUGFyZW50IGVsZW1lbnQgZm9yIHRoaXMgY29tcG9uZW50LlxuICogQHBhcmFtIHtPYmplY3R9IGNhbGxiYWNrc1xuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tzLmJhbmR3aWR0aFNsaWRlckNoYW5nZUNhbGxiYWNrXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja3MuYmFuZHdpZHRoU2xpZGVyU3RvcENhbGxiYWNrXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja3MubWVtb3J5U2xpZGVyQ2hhbmdlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrcy5tZW1vcnlTbGlkZXJTdG9wQ2FsbGJhY2tcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgTmV0U2ltUm91dGVyVGFiID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocm9vdERpdiwgY2FsbGJhY2tzKSB7XG4gIC8qKlxuICAgKiBDb21wb25lbnQgcm9vdCwgd2hpY2ggd2UgZmlsbCB3aGVuZXZlciB3ZSBjYWxsIHJlbmRlcigpXG4gICAqIEB0eXBlIHtqUXVlcnl9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnJvb3REaXZfID0gcm9vdERpdjtcblxuICAvKipcbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5iYW5kd2lkdGhTbGlkZXJDaGFuZ2VDYWxsYmFja18gPSBjYWxsYmFja3MuYmFuZHdpZHRoU2xpZGVyQ2hhbmdlQ2FsbGJhY2s7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuYmFuZHdpZHRoU2xpZGVyU3RvcENhbGxiYWNrXyA9IGNhbGxiYWNrcy5iYW5kd2lkdGhTbGlkZXJTdG9wQ2FsbGJhY2s7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubWVtb3J5U2xpZGVyQ2hhbmdlQ2FsbGJhY2tfID0gY2FsbGJhY2tzLm1lbW9yeVNsaWRlckNoYW5nZUNhbGxiYWNrO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7ZnVuY3Rpb259XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLm1lbW9yeVNsaWRlclN0b3BDYWxsYmFja18gPSBjYWxsYmFja3MubWVtb3J5U2xpZGVyU3RvcENhbGxiYWNrO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7TmV0U2ltUm91dGVyU3RhdHNUYWJsZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucm91dGVyU3RhdHNUYWJsZV8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7TmV0U2ltQmFuZHdpZHRoQ29udHJvbH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuYmFuZHdpZHRoQ29udHJvbF8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7TmV0U2ltTWVtb3J5Q29udHJvbH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubWVtb3J5Q29udHJvbF8gPSBudWxsO1xuXG4gIC8vIEluaXRpYWwgcmVuZGVyXG4gIHRoaXMucmVuZGVyKCk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7UnVuTG9vcH0gcnVuTG9vcFxuICovXG5OZXRTaW1Sb3V0ZXJUYWIucHJvdG90eXBlLmF0dGFjaFRvUnVuTG9vcCA9IGZ1bmN0aW9uIChydW5Mb29wKSB7XG4gIGlmICh0aGlzLnJvdXRlclN0YXRzVGFibGVfKSB7XG4gICAgdGhpcy5yb3V0ZXJTdGF0c1RhYmxlXy5hdHRhY2hUb1J1bkxvb3AocnVuTG9vcCk7XG4gIH1cbn07XG5cbi8qKlxuICogRmlsbCB0aGUgcm9vdCBkaXYgd2l0aCBuZXcgZWxlbWVudHMgcmVmbGVjdGluZyB0aGUgY3VycmVudCBzdGF0ZS5cbiAqL1xuTmV0U2ltUm91dGVyVGFiLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsZXZlbENvbmZpZyA9IE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKTtcblxuICB2YXIgcmVuZGVyZWRNYXJrdXAgPSAkKG1hcmt1cCh7XG4gICAgbGV2ZWw6IGxldmVsQ29uZmlnXG4gIH0pKTtcbiAgdGhpcy5yb290RGl2Xy5odG1sKHJlbmRlcmVkTWFya3VwKTtcbiAgdGhpcy5yb3V0ZXJTdGF0c1RhYmxlXyA9IG5ldyBOZXRTaW1Sb3V0ZXJTdGF0c1RhYmxlKFxuICAgICAgdGhpcy5yb290RGl2Xy5maW5kKCcucm91dGVyLXN0YXRzJykpO1xuICBpZiAobGV2ZWxDb25maWcuc2hvd1JvdXRlckJhbmR3aWR0aENvbnRyb2wpIHtcbiAgICB0aGlzLmJhbmR3aWR0aENvbnRyb2xfID0gbmV3IE5ldFNpbUJhbmR3aWR0aENvbnRyb2woXG4gICAgICAgIHRoaXMucm9vdERpdl8uZmluZCgnLmJhbmR3aWR0aC1jb250cm9sJyksXG4gICAgICAgIHRoaXMuYmFuZHdpZHRoU2xpZGVyQ2hhbmdlQ2FsbGJhY2tfLFxuICAgICAgICB0aGlzLmJhbmR3aWR0aFNsaWRlclN0b3BDYWxsYmFja18pO1xuICB9XG4gIGlmIChsZXZlbENvbmZpZy5zaG93Um91dGVyTWVtb3J5Q29udHJvbCkge1xuICAgIHRoaXMubWVtb3J5Q29udHJvbF8gPSBuZXcgTmV0U2ltTWVtb3J5Q29udHJvbChcbiAgICAgICAgdGhpcy5yb290RGl2Xy5maW5kKCcubWVtb3J5LWNvbnRyb2wnKSxcbiAgICAgICAgdGhpcy5tZW1vcnlTbGlkZXJDaGFuZ2VDYWxsYmFja18sXG4gICAgICAgIHRoaXMubWVtb3J5U2xpZGVyU3RvcENhbGxiYWNrXyk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtOZXRTaW1Mb2dFbnRyeVtdfSBsb2dEYXRhXG4gKi9cbk5ldFNpbVJvdXRlclRhYi5wcm90b3R5cGUuc2V0Um91dGVyTG9nRGF0YSA9IGZ1bmN0aW9uIChsb2dEYXRhKSB7XG4gIGlmICh0aGlzLnJvdXRlclN0YXRzVGFibGVfKSB7XG4gICAgdGhpcy5yb3V0ZXJTdGF0c1RhYmxlXy5zZXRSb3V0ZXJMb2dEYXRhKGxvZ0RhdGEpO1xuICB9XG59O1xuXG4vKiogQHBhcmFtIHtudW1iZXJ9IGNyZWF0aW9uVGltZXN0YW1wTXMgKi9cbk5ldFNpbVJvdXRlclRhYi5wcm90b3R5cGUuc2V0Um91dGVyQ3JlYXRpb25UaW1lID0gZnVuY3Rpb24gKGNyZWF0aW9uVGltZXN0YW1wTXMpIHtcbiAgaWYgKHRoaXMucm91dGVyU3RhdHNUYWJsZV8pIHtcbiAgICB0aGlzLnJvdXRlclN0YXRzVGFibGVfLnNldFJvdXRlckNyZWF0aW9uVGltZShjcmVhdGlvblRpbWVzdGFtcE1zKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gbmV3QmFuZHdpZHRoIGluIGJpdHMvc2Vjb25kXG4gKi9cbk5ldFNpbVJvdXRlclRhYi5wcm90b3R5cGUuc2V0QmFuZHdpZHRoID0gZnVuY3Rpb24gKG5ld0JhbmR3aWR0aCkge1xuICBpZiAodGhpcy5iYW5kd2lkdGhDb250cm9sXykge1xuICAgIHRoaXMuYmFuZHdpZHRoQ29udHJvbF8uc2V0VmFsdWUobmV3QmFuZHdpZHRoKTtcbiAgfVxuICBpZiAodGhpcy5yb3V0ZXJTdGF0c1RhYmxlXykge1xuICAgIHRoaXMucm91dGVyU3RhdHNUYWJsZV8uc2V0QmFuZHdpZHRoKG5ld0JhbmR3aWR0aCk7XG4gIH1cbn07XG5cbi8qKiBAcGFyYW0ge251bWJlcn0gbmV3TWVtb3J5IGluIGJpdHMvc2Vjb25kICovXG5OZXRTaW1Sb3V0ZXJUYWIucHJvdG90eXBlLnNldE1lbW9yeSA9IGZ1bmN0aW9uIChuZXdNZW1vcnkpIHtcbiAgaWYgKHRoaXMubWVtb3J5Q29udHJvbF8pIHtcbiAgICB0aGlzLm1lbW9yeUNvbnRyb2xfLnNldFZhbHVlKG5ld01lbW9yeSk7XG4gIH1cbiAgaWYgKHRoaXMucm91dGVyU3RhdHNUYWJsZV8pIHtcbiAgICB0aGlzLnJvdXRlclN0YXRzVGFibGVfLnNldFRvdGFsTWVtb3J5KG5ld01lbW9yeSk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHF1ZXVlZFBhY2tldENvdW50XG4gKi9cbk5ldFNpbVJvdXRlclRhYi5wcm90b3R5cGUuc2V0Um91dGVyUXVldWVkUGFja2V0Q291bnQgPSBmdW5jdGlvbiAocXVldWVkUGFja2V0Q291bnQpIHtcbiAgaWYgKHRoaXMucm91dGVyU3RhdHNUYWJsZV8pIHtcbiAgICB0aGlzLnJvdXRlclN0YXRzVGFibGVfLnNldFJvdXRlclF1ZXVlZFBhY2tldENvdW50KHF1ZXVlZFBhY2tldENvdW50KTtcbiAgfVxufTtcblxuLyoqIEBwYXJhbSB7bnVtYmVyfSB1c2VkTWVtb3J5SW5CaXRzICovXG5OZXRTaW1Sb3V0ZXJUYWIucHJvdG90eXBlLnNldE1lbW9yeUluVXNlID0gZnVuY3Rpb24gKHVzZWRNZW1vcnlJbkJpdHMpIHtcbiAgaWYgKHRoaXMucm91dGVyU3RhdHNUYWJsZV8pIHtcbiAgICB0aGlzLnJvdXRlclN0YXRzVGFibGVfLnNldE1lbW9yeUluVXNlKHVzZWRNZW1vcnlJbkJpdHMpO1xuICB9XG59O1xuXG4vKiogQHBhcmFtIHtudW1iZXJ9IGRhdGFSYXRlQml0c1BlclNlY29uZCAqL1xuTmV0U2ltUm91dGVyVGFiLnByb3RvdHlwZS5zZXREYXRhUmF0ZSA9IGZ1bmN0aW9uIChkYXRhUmF0ZUJpdHNQZXJTZWNvbmQpIHtcbiAgaWYgKHRoaXMucm91dGVyU3RhdHNUYWJsZV8pIHtcbiAgICB0aGlzLnJvdXRlclN0YXRzVGFibGVfLnNldERhdGFSYXRlKGRhdGFSYXRlQml0c1BlclNlY29uZCk7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cz0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdCA9IGZ1bmN0aW9uIGFub255bW91cyhsb2NhbHMsIGZpbHRlcnMsIGVzY2FwZVxuLyoqLykge1xuZXNjYXBlID0gZXNjYXBlIHx8IGZ1bmN0aW9uIChodG1sKXtcbiAgcmV0dXJuIFN0cmluZyhodG1sKVxuICAgIC5yZXBsYWNlKC8mKD8hXFx3KzspL2csICcmYW1wOycpXG4gICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xufTtcbnZhciBidWYgPSBbXTtcbndpdGggKGxvY2FscyB8fCB7fSkgeyAoZnVuY3Rpb24oKXsgXG4gYnVmLnB1c2goJycpOzE7XG52YXIgaTE4biA9IHJlcXVpcmUoJy4vbG9jYWxlJyk7XG47IGJ1Zi5wdXNoKCdcXG48ZGl2IGNsYXNzPVwibmV0c2ltLXJvdXRlci10YWJcIj5cXG4gIDxoMT4nLCBlc2NhcGUoKDUsICBpMThuLnJvdXRlclRhYl9zdGF0cygpICkpLCAnPC9oMT5cXG4gIDxkaXYgY2xhc3M9XCJyb3V0ZXItc3RhdHNcIj48L2Rpdj5cXG4gICcpOzc7IGlmIChsZXZlbC5zaG93Um91dGVyQmFuZHdpZHRoQ29udHJvbCkgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgPGgxPicsIGVzY2FwZSgoOCwgIGkxOG4ucm91dGVyVGFiX2JhbmR3aWR0aCgpICkpLCAnPC9oMT5cXG4gICAgPGRpdiBjbGFzcz1cImJhbmR3aWR0aC1jb250cm9sXCI+PC9kaXY+XFxuICAnKTsxMDsgfSA7IGJ1Zi5wdXNoKCdcXG4gICcpOzExOyBpZiAobGV2ZWwuc2hvd1JvdXRlck1lbW9yeUNvbnRyb2wpIHsgOyBidWYucHVzaCgnXFxuICAgIDxoMT4nLCBlc2NhcGUoKDEyLCAgaTE4bi5yb3V0ZXJUYWJfbWVtb3J5KCkgKSksICc8L2gxPlxcbiAgICA8ZGl2IGNsYXNzPVwibWVtb3J5LWNvbnRyb2xcIj48L2Rpdj5cXG4gICcpOzE0OyB9IDsgYnVmLnB1c2goJ1xcbiAgPGgxPicsIGVzY2FwZSgoMTUsICBpMThuLnJvdXRlclRhYl9sb2dzKCkgKSksICc8L2gxPlxcbiAgPHNwYW4gY2xhc3M9XCJzZWNvbmRhcnkgbmV0c2ltLWJ1dHRvbiBsYXJnZS1idXR0b25cIiBpZD1cInNob3ctcm91dGVyLWxvZy1tb2RhbC10d29cIiBkYXRhLXRvZ2dsZT1cIm1vZGFsXCIgZGF0YS10YXJnZXQ9XCIjcm91dGVyLWxvZy1tb2RhbFwiPicsIGVzY2FwZSgoMTYsICBpMThuLmxvZ0Jyb3dzZXJCdXR0b24oKSApKSwgJzwvc3Bhbj5cXG48L2Rpdj5cXG4nKTsgfSkoKTtcbn0gXG5yZXR1cm4gYnVmLmpvaW4oJycpO1xufTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGxvY2Fscykge1xuICAgIHJldHVybiB0KGxvY2FscywgcmVxdWlyZShcImVqc1wiKS5maWx0ZXJzKTtcbiAgfVxufSgpKTsiLCIvKipcbiAqIEBvdmVydmlldyBVSSBjb21wb25lbnQgZGlzcGxheWluZyByb3V0ZXIgc3RhdHMgb24gdGhlIFwiUm91dGVyXCIgdGFiLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIG1hcmt1cCA9IHJlcXVpcmUoJy4vTmV0U2ltUm91dGVyU3RhdHNUYWJsZS5odG1sLmVqcycpO1xudmFyIE5ldFNpbVV0aWxzID0gcmVxdWlyZSgnLi9OZXRTaW1VdGlscycpO1xudmFyIE5ldFNpbUxvZ0VudHJ5ID0gcmVxdWlyZSgnLi9OZXRTaW1Mb2dFbnRyeScpO1xuXG4vKipcbiAqIFJlbmRlciBldmVyeSBoYWxmLXNlY29uZCwgbWluaW11bS5cbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqL1xudmFyIE1BWF9SRU5ERVJfREVMQVlfTVMgPSA1MDA7XG5cbi8qKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdFxuICovXG52YXIgTUlMTElTX1BFUl9TRUNPTkQgPSAxMDAwO1xuXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqL1xudmFyIFNFQ09ORFNfUEVSX01JTlVURSA9IDYwO1xuXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqL1xudmFyIE1JTExJU19QRVJfTUlOVVRFID0gTUlMTElTX1BFUl9TRUNPTkQgKiBTRUNPTkRTX1BFUl9NSU5VVEU7XG5cbi8qKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdFxuICovXG52YXIgTUlOVVRFU19QRVJfSE9VUiA9IDYwO1xuXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqL1xudmFyIE1JTExJU19QRVJfSE9VUiA9IE1JTExJU19QRVJfTUlOVVRFICogTUlOVVRFU19QRVJfSE9VUjtcblxuLyoqXG4gKiBHZW5lcmF0b3IgYW5kIGNvbnRyb2xsZXIgZm9yIEROUyBuZXR3b3JrIGxvb2t1cCB0YWJsZSBjb21wb25lbnQuXG4gKiBTaG93cyBkaWZmZXJlbnQgYW1vdW50cyBvZiBpbmZvcm1hdGlvbiBkZXBlbmRpbmcgb24gdGhlIEROUyBtb2RlLlxuICpcbiAqIEBwYXJhbSB7alF1ZXJ5fSByb290RGl2XG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIE5ldFNpbVJvdXRlclN0YXRzVGFibGUgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyb290RGl2KSB7XG4gIC8qKlxuICAgKiBDb21wb25lbnQgcm9vdCwgd2hpY2ggd2UgZmlsbCB3aGVuZXZlciB3ZSBjYWxsIHJlbmRlcigpXG4gICAqIEB0eXBlIHtqUXVlcnl9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnJvb3REaXZfID0gcm9vdERpdjtcblxuICAvKipcbiAgICogTGFzdCByZW5kZXIgdGltZSwgaW4gc2ltdWxhdGlvbi10aW1lLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5sYXN0UmVuZGVyVGltZV8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBVbml4IHRpbWVzdGFtcCAobG9jYWwpIG9mIHJvdXRlciBjcmVhdGlvbiB0aW1lXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnJvdXRlckNyZWF0aW9uVGltZV8gPSAwO1xuXG4gIC8qKlxuICAgKiBUb3RhbCBjb3VudCBvZiBwYWNrZXRzIHRoaXMgcm91dGVyIGhhcyByZWNlaXZlZC5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMudG90YWxQYWNrZXRzXyA9IDA7XG5cbiAgLyoqXG4gICAqIFRvdGFsIGNvdW50IG9mIHBhY2tldHMgdGhpcyByb3V0ZXIgaGFzIHN1Y2Nlc3NmdWxseSBwcm9jZXNzZWQuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnN1Y2Nlc3NmdWxQYWNrZXRzXyA9IDA7XG5cbiAgLyoqXG4gICAqIFRvdGFsIHNpemUgb2YgYWxsIHBhY2tldHMgcmVjZWl2ZWQgYnkgdGhpcyByb3V0ZXIsIGluIGJpdHMuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnRvdGFsRGF0YV8gPSAwO1xuXG4gIC8qKlxuICAgKiBUb3RhbCBzaXplIG9mIGFsbCBwYWNrZXRzIHN1Y2Nlc3NmdWxseSBwcm9jZXNzZWQgYnkgdGhpcyByb3V0ZXIsIGluIGJpdHMuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnN1Y2Nlc3NmdWxEYXRhXyA9IDA7XG5cbiAgLyoqXG4gICAqIE1heGltdW0gcmF0ZSBvZiBkYXRhIHRyYW5zZmVyIChpbiBiaXRzIHBlciBzZWNvbmQpXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmJhbmR3aWR0aExpbWl0XyA9IDA7XG5cbiAgLyoqXG4gICAqIEF2ZXJhZ2UgcmF0ZSBvZiBkYXRhIHRyYW5zZmVyIChpbiBiaXRzIHBlciBzZWNvbmQpIG92ZXIgdGhlIGxhc3RcbiAgICogREFUQV9SQVRFX1dJTkRPV19NUyBtaWxsaXNlY29uZHMuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmRhdGFSYXRlXyA9IDA7XG5cbiAgLyoqXG4gICAqIFJvdXRlcidzIHRvdGFsIG1lbW9yeSBjYXBhY2l0eSwgaW4gYml0cy5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMudG90YWxNZW1vcnlfID0gMDtcblxuICAvKipcbiAgICogTnVtYmVyIG9mIHBhY2tldHMgaW4gdGhlIHJvdXRlcidzIHF1ZXVlLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5xdWV1ZWRQYWNrZXRzXyA9IDA7XG5cbiAgLyoqXG4gICAqIEN1cnJlbnQgc2l6ZSBvZiB0aGUgcm91dGVyJ3MgcGFja2V0IHF1ZXVlLCBpbiBiaXRzLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy51c2VkTWVtb3J5XyA9IDA7XG5cbiAgdGhpcy5yZW5kZXIoe30pO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1J1bkxvb3B9IHJ1bkxvb3BcbiAqL1xuTmV0U2ltUm91dGVyU3RhdHNUYWJsZS5wcm90b3R5cGUuYXR0YWNoVG9SdW5Mb29wID0gZnVuY3Rpb24gKHJ1bkxvb3ApIHtcbiAgcnVuTG9vcC5yZW5kZXIucmVnaXN0ZXIodGhpcy5yZW5kZXIuYmluZCh0aGlzKSk7XG59O1xuXG4vKipcbiAqIEZpbGwgdGhlIHJvb3QgZGl2IHdpdGggbmV3IGVsZW1lbnRzIHJlZmxlY3RpbmcgdGhlIGN1cnJlbnQgc3RhdGVcbiAqIEBwYXJhbSB7UnVuTG9vcC5DbG9ja30gY2xvY2tcbiAqL1xuTmV0U2ltUm91dGVyU3RhdHNUYWJsZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKGNsb2NrKSB7XG4gIGlmICghdGhpcy5uZWVkc1JlbmRlcihjbG9jaykpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgcmVuZGVyZWRNYXJrdXAgPSAkKG1hcmt1cCh7XG4gICAgdXB0aW1lOiB0aGlzLmdldExvY2FsaXplZFVwdGltZSgpLFxuICAgIHF1ZXVlZFBhY2tldHM6IHRoaXMucXVldWVkUGFja2V0c18sXG4gICAgdG90YWxQYWNrZXRzOiB0aGlzLnRvdGFsUGFja2V0c18sXG4gICAgc3VjY2Vzc2Z1bFBhY2tldHM6IHRoaXMuc3VjY2Vzc2Z1bFBhY2tldHNfLFxuICAgIHRvdGFsRGF0YTogdGhpcy50b3RhbERhdGFfLFxuICAgIHN1Y2Nlc3NmdWxEYXRhOiB0aGlzLnN1Y2Nlc3NmdWxEYXRhXyxcbiAgICBiYW5kd2lkdGhMaW1pdDogdGhpcy5iYW5kd2lkdGhMaW1pdF8sXG4gICAgZGF0YVJhdGU6IHRoaXMuZGF0YVJhdGVfLFxuICAgIHRvdGFsTWVtb3J5OiB0aGlzLnRvdGFsTWVtb3J5XyxcbiAgICB1c2VkTWVtb3J5OiB0aGlzLnVzZWRNZW1vcnlfXG4gIH0pKTtcbiAgdGhpcy5yb290RGl2Xy5odG1sKHJlbmRlcmVkTWFya3VwKTtcbiAgdGhpcy5sYXN0UmVuZGVyVGltZV8gPSBjbG9jay50aW1lO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1J1bkxvb3AuQ2xvY2t9IGNsb2NrXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gd2hldGhlciBhIHJlbmRlciBvcGVyYXRpb24gaXMgbmVlZGVkLlxuICovXG5OZXRTaW1Sb3V0ZXJTdGF0c1RhYmxlLnByb3RvdHlwZS5uZWVkc1JlbmRlciA9IGZ1bmN0aW9uIChjbG9jaykge1xuICByZXR1cm4gKCF0aGlzLmxhc3RSZW5kZXJUaW1lXyB8fFxuICAgICAgY2xvY2sudGltZSAtIHRoaXMubGFzdFJlbmRlclRpbWVfID4gTUFYX1JFTkRFUl9ERUxBWV9NUyk7XG59O1xuXG4vKipcbiAqIE1hcmsgdGhlIHJvdXRlciBsb2cgZGF0YSBkaXJ0eSwgc28gdGhhdCBpdCB3aWxsIHJlLXJlbmRlciBvbiB0aGVcbiAqIG5leHQgZnJhbWUuXG4gKi9cbk5ldFNpbVJvdXRlclN0YXRzVGFibGUucHJvdG90eXBlLnNldE5lZWRzUmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmxhc3RSZW5kZXJUaW1lXyA9IG51bGw7XG59O1xuXG4vKipcbiAqIEdldCBhIGR1cmF0aW9uIHN0cmluZyBmb3IgdGhlIGN1cnJlbnQgcm91dGVyIHVwdGltZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbk5ldFNpbVJvdXRlclN0YXRzVGFibGUucHJvdG90eXBlLmdldExvY2FsaXplZFVwdGltZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdXJzVXB0aW1lID0gMDtcbiAgdmFyIG1pbnV0ZXNVcHRpbWUgPSAwO1xuICB2YXIgc2Vjb25kc1VwdGltZSA9IDA7XG4gIGlmICh0aGlzLnJvdXRlckNyZWF0aW9uVGltZV8gPiAwKSB7XG4gICAgdmFyIG1pbGxpc2Vjb25kc1VwdGltZSA9IERhdGUubm93KCkgLSB0aGlzLnJvdXRlckNyZWF0aW9uVGltZV87XG4gICAgaG91cnNVcHRpbWUgPSBNYXRoLmZsb29yKG1pbGxpc2Vjb25kc1VwdGltZSAvIE1JTExJU19QRVJfSE9VUik7XG4gICAgbWlsbGlzZWNvbmRzVXB0aW1lIC09IGhvdXJzVXB0aW1lICogTUlMTElTX1BFUl9IT1VSO1xuICAgIG1pbnV0ZXNVcHRpbWUgPSBNYXRoLmZsb29yKG1pbGxpc2Vjb25kc1VwdGltZSAvIE1JTExJU19QRVJfTUlOVVRFKTtcbiAgICBtaWxsaXNlY29uZHNVcHRpbWUgLT0gbWludXRlc1VwdGltZSAqIE1JTExJU19QRVJfTUlOVVRFO1xuICAgIHNlY29uZHNVcHRpbWUgPSBNYXRoLmZsb29yKG1pbGxpc2Vjb25kc1VwdGltZSAvIE1JTExJU19QRVJfU0VDT05EKTtcbiAgfVxuICByZXR1cm4gaG91cnNVcHRpbWUudG9TdHJpbmcoKSArXG4gICAgICAnOicgKyBOZXRTaW1VdGlscy56ZXJvUGFkTGVmdChtaW51dGVzVXB0aW1lLCAyKSArXG4gICAgICAnOicgKyBOZXRTaW1VdGlscy56ZXJvUGFkTGVmdChzZWNvbmRzVXB0aW1lLCAyKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtOZXRTaW1Mb2dFbnRyeVtdfSBsb2dFbnRyaWVzXG4gKiBAcmV0dXJucyB7bnVtYmVyfSB0b3RhbCBkYXRhIHNpemUsIGluIGJpdHMsIG9mIHBhY2tldHMgcmVwcmVzZW50ZWQgYnkgdGhlXG4gKiAgICAgICAgICBnaXZlbiBsb2cgZW50cmllcy5cbiAqL1xudmFyIHRvdGFsU2l6ZU9mUGFja2V0cyA9IGZ1bmN0aW9uIChsb2dFbnRyaWVzKSB7XG4gIHJldHVybiBsb2dFbnRyaWVzLnJlZHVjZShmdW5jdGlvbiAocHJldiwgY3VyKSB7XG4gICAgcmV0dXJuIHByZXYgKyBjdXIuYmluYXJ5Lmxlbmd0aDtcbiAgfSwgMCk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7TmV0U2ltTG9nRW50cnlbXX0gbG9nRGF0YVxuICovXG5OZXRTaW1Sb3V0ZXJTdGF0c1RhYmxlLnByb3RvdHlwZS5zZXRSb3V0ZXJMb2dEYXRhID0gZnVuY3Rpb24gKGxvZ0RhdGEpIHtcbiAgdmFyIHN1Y2Nlc3NMb2dzID0gbG9nRGF0YS5maWx0ZXIoZnVuY3Rpb24gKGxvZ0VudHJ5KSB7XG4gICAgcmV0dXJuIGxvZ0VudHJ5LnN0YXR1cyA9PT0gTmV0U2ltTG9nRW50cnkuTG9nU3RhdHVzLlNVQ0NFU1M7XG4gIH0pO1xuXG4gIHRoaXMudG90YWxQYWNrZXRzXyA9IGxvZ0RhdGEubGVuZ3RoO1xuICB0aGlzLnN1Y2Nlc3NmdWxQYWNrZXRzXyA9IHN1Y2Nlc3NMb2dzLmxlbmd0aDtcblxuICB0aGlzLnRvdGFsRGF0YV8gPSB0b3RhbFNpemVPZlBhY2tldHMobG9nRGF0YSk7XG4gIHRoaXMuc3VjY2Vzc2Z1bERhdGFfID0gdG90YWxTaXplT2ZQYWNrZXRzKHN1Y2Nlc3NMb2dzKTtcblxuICB0aGlzLnNldE5lZWRzUmVuZGVyKCk7XG59O1xuXG4vKiogQHBhcmFtIHtudW1iZXJ9IGNyZWF0aW9uVGltZXN0YW1wTXMgKi9cbk5ldFNpbVJvdXRlclN0YXRzVGFibGUucHJvdG90eXBlLnNldFJvdXRlckNyZWF0aW9uVGltZSA9IGZ1bmN0aW9uIChjcmVhdGlvblRpbWVzdGFtcE1zKSB7XG4gIHRoaXMucm91dGVyQ3JlYXRpb25UaW1lXyA9IGNyZWF0aW9uVGltZXN0YW1wTXM7XG4gIHRoaXMuc2V0TmVlZHNSZW5kZXIoKTtcbn07XG5cbi8qKiBAcGFyYW0ge251bWJlcn0gbmV3QmFuZHdpZHRoIGluIGJpdHMgcGVyIHNlY29uZCAqL1xuTmV0U2ltUm91dGVyU3RhdHNUYWJsZS5wcm90b3R5cGUuc2V0QmFuZHdpZHRoID0gZnVuY3Rpb24gKG5ld0JhbmR3aWR0aCkge1xuICB0aGlzLmJhbmR3aWR0aExpbWl0XyA9IG5ld0JhbmR3aWR0aDtcbiAgdGhpcy5zZXROZWVkc1JlbmRlcigpO1xufTtcblxuLyoqIEBwYXJhbSB7bnVtYmVyfSB0b3RhbE1lbW9yeUluQml0cyAqL1xuTmV0U2ltUm91dGVyU3RhdHNUYWJsZS5wcm90b3R5cGUuc2V0VG90YWxNZW1vcnkgPSBmdW5jdGlvbiAodG90YWxNZW1vcnlJbkJpdHMpIHtcbiAgdGhpcy50b3RhbE1lbW9yeV8gPSB0b3RhbE1lbW9yeUluQml0cztcbiAgdGhpcy5zZXROZWVkc1JlbmRlcigpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gcXVldWVkUGFja2V0Q291bnRcbiAqL1xuTmV0U2ltUm91dGVyU3RhdHNUYWJsZS5wcm90b3R5cGUuc2V0Um91dGVyUXVldWVkUGFja2V0Q291bnQgPSBmdW5jdGlvbiAoXG4gICAgcXVldWVkUGFja2V0Q291bnQpIHtcbiAgdGhpcy5xdWV1ZWRQYWNrZXRzXyA9IHF1ZXVlZFBhY2tldENvdW50O1xuICB0aGlzLnNldE5lZWRzUmVuZGVyKCk7XG59O1xuXG4vKiogQHBhcmFtIHtudW1iZXJ9IHVzZWRNZW1vcnlJbkJpdHMgKi9cbk5ldFNpbVJvdXRlclN0YXRzVGFibGUucHJvdG90eXBlLnNldE1lbW9yeUluVXNlID0gZnVuY3Rpb24gKHVzZWRNZW1vcnlJbkJpdHMpIHtcbiAgdGhpcy51c2VkTWVtb3J5XyA9IHVzZWRNZW1vcnlJbkJpdHM7XG4gIHRoaXMuc2V0TmVlZHNSZW5kZXIoKTtcbn07XG5cbi8qKiBAcGFyYW0ge251bWJlcn0gZGF0YVJhdGVCaXRzUGVyU2Vjb25kICovXG5OZXRTaW1Sb3V0ZXJTdGF0c1RhYmxlLnByb3RvdHlwZS5zZXREYXRhUmF0ZSA9IGZ1bmN0aW9uIChkYXRhUmF0ZUJpdHNQZXJTZWNvbmQpIHtcbiAgdGhpcy5kYXRhUmF0ZV8gPSBkYXRhUmF0ZUJpdHNQZXJTZWNvbmQ7XG4gIHRoaXMuc2V0TmVlZHNSZW5kZXIoKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cz0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdCA9IGZ1bmN0aW9uIGFub255bW91cyhsb2NhbHMsIGZpbHRlcnMsIGVzY2FwZVxuLyoqLykge1xuZXNjYXBlID0gZXNjYXBlIHx8IGZ1bmN0aW9uIChodG1sKXtcbiAgcmV0dXJuIFN0cmluZyhodG1sKVxuICAgIC5yZXBsYWNlKC8mKD8hXFx3KzspL2csICcmYW1wOycpXG4gICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xufTtcbnZhciBidWYgPSBbXTtcbndpdGggKGxvY2FscyB8fCB7fSkgeyAoZnVuY3Rpb24oKXsgXG4gYnVmLnB1c2goJycpOzE7XG4gIHZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG4gIHZhciBOZXRTaW1VdGlscyA9IHJlcXVpcmUoJy4vTmV0U2ltVXRpbHMnKTtcblxuICAvKipcbiAgICogV3JpdGUgYSBzdGF0cyByb3cgd2l0aCB0aGUgZ2l2ZW4gdGl0bGUgYW5kIHZhbHVlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGUgLSBsb2NhbGl6ZWQgbmFtZSBvZiB0aGUgc3RhdGlzdGljICh0aGUgaGVhZGVyIGNvbHVtbiBjb250ZW50cylcbiAgICogQHBhcmFtIHsqfSBzdGF0VmFsdWUgLSB0aGUgdmFsdWUgb2YgdGhlIHN0YXRpc3RpY1xuICAgKi9cbiAgdmFyIHdyaXRlU3RhdFJvdyA9IGZ1bmN0aW9uICh0aXRsZSwgc3RhdFZhbHVlKSB7XG4gICAgOyBidWYucHVzaCgnXFxuICAgICAgPHRyPlxcbiAgICAgICAgPHRoIG5vd3JhcD4nLCBlc2NhcGUoKDEzLCAgdGl0bGUgKSksICc8L3RoPlxcbiAgICAgICAgPHRkPicsIGVzY2FwZSgoMTQsICBzdGF0VmFsdWUgKSksICc8L3RkPlxcbiAgICAgIDwvdHI+XFxuICAgICcpOzE2O1xuICB9O1xuXG4gIC8qKlxuICAgKiBXcml0ZSBhIHN0YXRzIHJvdyB0aGF0IGRpc3BsYXlzIGEgZnJhY3Rpb24gYW5kIGFsc28gaXRzIHBlcmNlbnRhZ2UgZm9ybS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRpdGxlIC0gbG9jYWxpemVkIG5hbWUgb2YgdGhlIHN0YXRpc3RpYyAodGhlIGhlYWRlciBjb2x1bW4gY29udGVudHMpXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwYXJ0VmFsdWUgLSBudW1lcmF0b3Igb2YgdGhlIHN0YXRcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRvdGFsVmFsdWUgLSBkZW5vbWluYXRvciBvZiB0aGUgc3RhdFxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbdG9TdHJpbmdGdW5jdGlvbl0gbWV0aG9kIGZvciBjb252ZXJ0aW5nIG51bWVyYXRvciBhbmQgZGVub21pbmF0b3IgdG8gZGlzcGxheSBmb3JtYXRcbiAgICovXG4gIHZhciBmcmFjdGlvblN0YXRSb3cgPSBmdW5jdGlvbiAodGl0bGUsIHBhcnRWYWx1ZSwgdG90YWxWYWx1ZSwgdG9TdHJpbmdGdW5jdGlvbikge1xuICAgIHRvU3RyaW5nRnVuY3Rpb24gPSB1dGlscy52YWx1ZU9yKHRvU3RyaW5nRnVuY3Rpb24sIGZ1bmN0aW9uICh4KSB7IHJldHVybiB4OyB9KTtcbiAgICB2YXIgdmFsdWVTdHJpbmcgPSB0b1N0cmluZ0Z1bmN0aW9uKHBhcnRWYWx1ZSkgKyAnIC8gJyArIHRvU3RyaW5nRnVuY3Rpb24odG90YWxWYWx1ZSk7XG4gICAgaWYgKHRvdGFsVmFsdWUgPiAwICYmIHRvdGFsVmFsdWUgPCBJbmZpbml0eSkge1xuICAgICAgdmFsdWVTdHJpbmcgKz0gJyAoJyArIE1hdGgucm91bmQoMTAwICogcGFydFZhbHVlIC8gdG90YWxWYWx1ZSkgKyAnJSknO1xuICAgIH1cbiAgICB3cml0ZVN0YXRSb3codGl0bGUsIHZhbHVlU3RyaW5nKTtcbiAgfTtcbjsgYnVmLnB1c2goJ1xcbjx0YWJsZT5cXG4gIDx0Ym9keT5cXG4gICAgJyk7Mzc7IHdyaXRlU3RhdFJvdygnVXB0aW1lJywgdXB0aW1lKTsgOyBidWYucHVzaCgnXFxuICAgICcpOzM4OyB3cml0ZVN0YXRSb3coJ1F1ZXVlZCBQYWNrZXRzJywgcXVldWVkUGFja2V0cyk7IDsgYnVmLnB1c2goJ1xcbiAgICAnKTszOTsgZnJhY3Rpb25TdGF0Um93KCdNZW1vcnkgVXNlJywgdXNlZE1lbW9yeSwgdG90YWxNZW1vcnksIE5ldFNpbVV0aWxzLmJpdHNUb0xvY2FsaXplZFJvdW5kZWRCeXRlc2l6ZSk7IDsgYnVmLnB1c2goJ1xcbiAgICAnKTs0MDsgZnJhY3Rpb25TdGF0Um93KCdUaHJvdWdocHV0JywgZGF0YVJhdGUsIGJhbmR3aWR0aExpbWl0LCBOZXRTaW1VdGlscy5iaXRyYXRlVG9Mb2NhbGl6ZWRSb3VuZGVkQml0cmF0ZSk7IDsgYnVmLnB1c2goJ1xcbiAgICAnKTs0MTsgZnJhY3Rpb25TdGF0Um93KCdSb3V0ZWQgUGFja2V0cycsIHN1Y2Nlc3NmdWxQYWNrZXRzLCB0b3RhbFBhY2tldHMpOyA7IGJ1Zi5wdXNoKCdcXG4gICAgJyk7NDI7IGZyYWN0aW9uU3RhdFJvdygnUm91dGVkIERhdGEnLCBzdWNjZXNzZnVsRGF0YSwgdG90YWxEYXRhLCBOZXRTaW1VdGlscy5iaXRzVG9Mb2NhbGl6ZWRSb3VuZGVkQnl0ZXNpemUpOyA7IGJ1Zi5wdXNoKCdcXG4gIDwvdGJvZHk+XFxuPC90YWJsZT5cXG4nKTsgfSkoKTtcbn0gXG5yZXR1cm4gYnVmLmpvaW4oJycpO1xufTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGxvY2Fscykge1xuICAgIHJldHVybiB0KGxvY2FscywgcmVxdWlyZShcImVqc1wiKS5maWx0ZXJzKTtcbiAgfVxufSgpKTsiLCIvKipcbiAqIEBvdmVydmlldyBhIG1vZGFsIGRpYWxvZyBzaG93aW5nIHRoZSB1bmlvbiBvZiBhbGwgcm91dGVyIGxvZ3MgZm9yIHRoZVxuICogICAgICAgICAgIGN1cnJlbnQgc2hhcmQuXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaTE4biA9IHJlcXVpcmUoJy4vbG9jYWxlJyk7XG52YXIgTmV0U2ltTG9nRW50cnkgPSByZXF1aXJlKCcuL05ldFNpbUxvZ0VudHJ5Jyk7XG52YXIgUGFja2V0ID0gcmVxdWlyZSgnLi9QYWNrZXQnKTtcbnZhciBtYXJrdXAgPSByZXF1aXJlKCcuL05ldFNpbVJvdXRlckxvZ01vZGFsLmh0bWwuZWpzJyk7XG52YXIgTmV0U2ltR2xvYmFscyA9IHJlcXVpcmUoJy4vTmV0U2ltR2xvYmFscycpO1xuXG4vKiogQGNvbnN0IHtzdHJpbmd9ICovXG52YXIgTE9HX0VOVFJZX0RBVEFfS0VZID0gJ0xvZ0VudHJ5JztcblxuLyoqIEBjb25zdCB7bnVtYmVyfSAqL1xudmFyIE1BWElNVU1fUk9XU19JTl9GVUxMX1JFTkRFUiA9IDUwMDtcblxuLyoqXG4gKiBHZW5lcmF0b3IgYW5kIGNvbnRyb2xsZXIgZm9yIGNvbnRlbnRzIG9mIG1vZGFsIGRpYWxvZyB0aGF0IHJldmVhbHNcbiAqIGFsbCByb3V0ZXIgbG9ncyB0b2dldGhlciwgaW4gYSBzZWFyY2hhYmxlL3NvcnRhYmxlL2ZpbHRlcmFibGUgbWFubmVyLlxuICpcbiAqIEBwYXJhbSB7alF1ZXJ5fSByb290RGl2XG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIE5ldFNpbVJvdXRlckxvZ01vZGFsID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocm9vdERpdikge1xuXG4gIC8qKlxuICAgKiBDb21wb25lbnQgcm9vdCwgd2hpY2ggd2UgZmlsbCB3aGVuZXZlciB3ZSBjYWxsIHJlbmRlcigpXG4gICAqIEBwcml2YXRlIHtqUXVlcnl9XG4gICAqL1xuICB0aGlzLnJvb3REaXZfID0gcm9vdERpdjtcblxuICAvKipcbiAgICogSGlkZGVuIGJ5IGRlZmF1bHQuXG4gICAqIEBwcml2YXRlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5pc1Zpc2libGVfID0gZmFsc2U7XG5cbiAgLy8gQXR0YWNoIGhhbmRsZXJzIGZvciBzaG93aW5nIGFuZCBoaWRpbmcgdGhlIG1vZGFsXG4gIHRoaXMucm9vdERpdl8ub24oJ3Nob3duLmJzLm1vZGFsJywgdGhpcy5vblNob3dfLmJpbmQodGhpcykpO1xuICB0aGlzLnJvb3REaXZfLm9uKCdoaWRkZW4uYnMubW9kYWwnLCB0aGlzLm9uSGlkZV8uYmluZCh0aGlzKSk7XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlIHtOZXRTaW1TaGFyZH1cbiAgICovXG4gIHRoaXMuc2hhcmRfID0gbnVsbDtcblxuICAvKipcbiAgICogQHByaXZhdGUge05ldFNpbVJvdXRlck5vZGV9XG4gICAqL1xuICB0aGlzLnJvdXRlcl8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZSB7TmV0U2ltTG9nRW50cnl9XG4gICAqL1xuICB0aGlzLmxvZ0VudHJpZXNfID0gW107XG5cbiAgLyoqXG4gICAqIFRoZSBoaWdoZXN0IGxvZyByb3cgSUQgc3RvcmVkIGluIGxvZ0VudHJpZXNfLCB1c2VkIHRvIG9ubHkgcmV0cmlldmUgbmV3XG4gICAqIGxvZyByb3dzLCB3ZSBkb24ndCBuZWVkIHRvIHJldHJpZXZlIGV2ZXJ5dGhpbmcuXG4gICAqIEBwcml2YXRlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLmxhdGVzdFJvd0lEXyA9IDA7XG5cbiAgLyoqXG4gICAqIFRyYWNraW5nIGluZm9ybWF0aW9uIGZvciB3aGljaCBldmVudHMgd2UncmUgcmVnaXN0ZXJlZCB0bywgc28gd2UgY2FuXG4gICAqIHBlcmZvcm0gY2xlYW51cCBhcyBuZWVkZWQuXG4gICAqIEBwcml2YXRlIHtPYmplY3R9XG4gICAqL1xuICB0aGlzLmV2ZW50S2V5c18gPSB7fTtcblxuICAvKipcbiAgICogU29ydGluZyBrZXksIGNoYW5nZWQgYnkgdXNlciBpbnRlcmFjdGlvbiwgd2hpY2ggZGV0ZXJtaW5lcyB3aGljaCBzb3J0XG4gICAqIHdlIHVzZSBvbiByZW5kZXIuXG4gICAqIEBwcml2YXRlIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLnNvcnRCeV8gPSAndGltZXN0YW1wJztcblxuICAvKipcbiAgICogV2hldGhlciBjdXJyZW50bHkgdXNpbmcgYSBkZXNjZW5kaW5nIHNvcnQuXG4gICAqIEBwcml2YXRlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5zb3J0RGVzY2VuZGluZ18gPSB0cnVlO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHdlIGFyZSBjdXJyZW50bHkgaW4gXCJBbGwtUm91dGVyXCIgbW9kZSBvciBkZWFsaW5nIHdpdGggYVxuICAgKiBzaW5nbGUgcm91dGVyLiAgQWx3YXlzIGluaXRpYWxpemVzIHRvIHRydWUgYmVjYXVzZSB3ZSBuZXZlciBpbml0aWFsaXplXG4gICAqIGNvbm5lY3RlZCB0byBhIHNpbmdsZSByb3V0ZXIuXG4gICAqIEBwcml2YXRlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5pc0FsbFJvdXRlckxvZ01vZGVfID0gdHJ1ZTtcblxuICB0aGlzLnJlbmRlcigpO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYSBjb21wYXJhdG9yIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gc29ydCBsb2cgZW50cmllcywgY29uZmlndXJlZFxuICogdG8gc29ydCBhY2NvcmRpbmcgdG8gdGhlIGxvZyBicm93c2VyJ3MgY3VycmVudCBjb25maWd1cmF0aW9uLlxuICogQHJldHVybnMge2Z1bmN0aW9uKE5ldFNpbUxvZ0VudHJ5LCBOZXRTaW1Mb2dFbnRyeSl9IGNvbXBhcmVzIHR3byBsb2cgZW50cmllcyxcbiAqICAgICAgICAgIHJldHVybnMgLTEgaWYgdGhlIGZpcnN0IG9uZSBiZWxvbmdzIGJlZm9yZSB0aGUgc2Vjb25kIG9uZSwgMSBpZlxuICogICAgICAgICAgdGhlIGZpcnN0IG9uZSBiZWxvbmdzIGFmdGVyIHRoZSBzZWNvbmQgb25lLCBhbmQgMCBpZiB0aGV5IGhhdmUgdGhlXG4gKiAgICAgICAgICBzYW1lIHNvcnQgcG9zaXRpb24uXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Sb3V0ZXJMb2dNb2RhbC5wcm90b3R5cGUuZ2V0U29ydENvbXBhcmF0b3JfID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZ2V0U29ydFZhbHVlID0gTmV0U2ltUm91dGVyTG9nTW9kYWwuc29ydEtleVRvU29ydFZhbHVlR2V0dGVyTWFwW3RoaXMuc29ydEJ5X107XG4gIHZhciBpbnZlcnRNdWx0aXBsaWVyID0gdGhpcy5zb3J0RGVzY2VuZGluZ18gPyAtMSA6IDE7XG4gIHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgIHZhciB4ID0gZ2V0U29ydFZhbHVlKGEpO1xuICAgIHZhciB5ID0gZ2V0U29ydFZhbHVlKGIpO1xuICAgIHJldHVybiAoeCA8IHkgPyAtMSA6IHggPiB5ID8gMSA6IDApICogaW52ZXJ0TXVsdGlwbGllcjtcbiAgfTtcbn07XG5cbk5ldFNpbVJvdXRlckxvZ01vZGFsLnNvcnRLZXlUb1NvcnRWYWx1ZUdldHRlck1hcCA9IHtcblxuICAndGltZXN0YW1wJzogZnVuY3Rpb24gKGxvZ0VudHJ5KSB7XG4gICAgcmV0dXJuIGxvZ0VudHJ5LnRpbWVzdGFtcDtcbiAgfSxcblxuICAnbG9nZ2VkLWJ5JzogZnVuY3Rpb24gKGxvZ0VudHJ5KSB7XG4gICAgdmFyIG9yaWdpbk5vZGUgPSBsb2dFbnRyeS5nZXRPcmlnaW5Ob2RlKCk7XG4gICAgaWYgKG9yaWdpbk5vZGUpIHtcbiAgICAgIHJldHVybiBvcmlnaW5Ob2RlLmdldERpc3BsYXlOYW1lKCk7XG4gICAgfVxuICAgIHJldHVybiBsb2dFbnRyeS5ub2RlSUQudG9TdHJpbmcoMTApO1xuICB9LFxuXG4gICdzdGF0dXMnOiBmdW5jdGlvbiAobG9nRW50cnkpIHtcbiAgICByZXR1cm4gbG9nRW50cnkuZ2V0TG9jYWxpemVkU3RhdHVzKCk7XG4gIH0sXG5cbiAgJ2Zyb20tYWRkcmVzcyc6IGZ1bmN0aW9uIChsb2dFbnRyeSkge1xuICAgIHJldHVybiBsb2dFbnRyeS5nZXRIZWFkZXJGaWVsZChQYWNrZXQuSGVhZGVyVHlwZS5GUk9NX0FERFJFU1MpO1xuICB9LFxuXG4gICd0by1hZGRyZXNzJzogZnVuY3Rpb24gKGxvZ0VudHJ5KSB7XG4gICAgcmV0dXJuIGxvZ0VudHJ5LmdldEhlYWRlckZpZWxkKFBhY2tldC5IZWFkZXJUeXBlLlRPX0FERFJFU1MpO1xuICB9LFxuXG4gICdwYWNrZXQtaW5mbyc6IGZ1bmN0aW9uIChsb2dFbnRyeSkge1xuICAgIHJldHVybiBsb2dFbnRyeS5nZXRMb2NhbGl6ZWRQYWNrZXRJbmZvKCk7XG4gIH0sXG5cbiAgJ21lc3NhZ2UnOiBmdW5jdGlvbiAobG9nRW50cnkpIHtcbiAgICByZXR1cm4gbG9nRW50cnkuZ2V0TWVzc2FnZUFzY2lpKCk7XG4gIH1cblxufTtcblxuLyoqXG4gKiBTdGF0ZSBjaGFuZ2VzIHRoYXQgb2NjdXIgd2hlbiBzaG9pbmcgdGhlIGxvZy5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVJvdXRlckxvZ01vZGFsLnByb3RvdHlwZS5vblNob3dfID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5zaGFyZF8pIHtcbiAgICB0aGlzLnNoYXJkXy5sb2dUYWJsZS5zdWJzY3JpYmUoKTtcbiAgfVxuICB0aGlzLmlzVmlzaWJsZV8gPSB0cnVlO1xuICB0aGlzLnJlbmRlcigpO1xufTtcblxuLyoqXG4gKiBTdGF0ZSBjaGFuZ2VzIHRoYXQgb2NjdXIgd2hlbiBoaWRpbmcgdGhlIGxvZy5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVJvdXRlckxvZ01vZGFsLnByb3RvdHlwZS5vbkhpZGVfID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5zaGFyZF8pIHtcbiAgICB0aGlzLnNoYXJkXy5sb2dUYWJsZS51bnN1YnNjcmliZSgpO1xuICB9XG4gIHRoaXMuaXNWaXNpYmxlXyA9IGZhbHNlO1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVFJVRSBpZiB0aGUgbW9kYWwgaXMgY3VycmVudGx5IHNob3dpbmcuXG4gKi9cbk5ldFNpbVJvdXRlckxvZ01vZGFsLnByb3RvdHlwZS5pc1Zpc2libGUgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmlzVmlzaWJsZV87XG59O1xuXG4vKipcbiAqIEZpbGwgdGhlIHJvb3QgZGl2IHdpdGggbmV3IGVsZW1lbnRzIHJlZmxlY3RpbmcgdGhlIGN1cnJlbnQgc3RhdGVcbiAqL1xuTmV0U2ltUm91dGVyTG9nTW9kYWwucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gQmUgbGF6eSwgZG9uJ3QgcmVuZGVyIGlmIG5vdCB2aXNpYmxlLlxuICBpZiAoIXRoaXMuaXNWaXNpYmxlKCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBSZS1yZW5kZXIgZW50aXJlIGxvZyBicm93c2VyIFVJXG4gIHZhciByZW5kZXJlZE1hcmt1cCA9ICQobWFya3VwKHtcbiAgICBpc0FsbFJvdXRlckxvZ01vZGU6IHRoaXMuaXNBbGxSb3V0ZXJMb2dNb2RlXyxcbiAgICBjYW5Ub2dnbGVSb3V0ZXJMb2dNb2RlOiB0aGlzLmNhblRvZ2dsZVJvdXRlckxvZ01vZGVfKCksXG4gICAgc29ydEJ5OiB0aGlzLnNvcnRCeV8sXG4gICAgc29ydERlc2NlbmRpbmc6IHRoaXMuc29ydERlc2NlbmRpbmdfXG4gIH0pKTtcbiAgdGhpcy5yb290RGl2Xy5odG1sKHJlbmRlcmVkTWFya3VwKTtcblxuICAvLyBBZGQgaW5wdXQgaGFuZGxlcnNcbiAgdGhpcy5nZXRSb3V0ZXJMb2dUb2dnbGVCdXR0b24oKS5vbmUoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50b2dnbGVSb3V0ZXJMb2dNb2RlXygpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH0uYmluZCh0aGlzKSk7XG5cbiAgdGhpcy5yb290RGl2Xy5maW5kKCd0aCcpLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIHRoaXMub25Tb3J0SGVhZGVyQ2xpY2tfKCQoZXZlbnQudGFyZ2V0KS5hdHRyKCdkYXRhLXNvcnQta2V5JykpO1xuICB9LmJpbmQodGhpcykpO1xuXG4gIC8vIEFkZCByb3dzIHRvIHRoZSB0YWJsZVxuICB2YXIgcm93cyA9IHRoaXMuZ2V0U29ydGVkRmlsdGVyZWRMb2dFbnRyaWVzKHRoaXMubG9nRW50cmllc18pXG4gICAgICAuc2xpY2UoMCwgTUFYSU1VTV9ST1dTX0lOX0ZVTExfUkVOREVSKVxuICAgICAgLm1hcCh0aGlzLm1ha2VUYWJsZVJvd18uYmluZCh0aGlzKSk7XG4gIHRoaXMucm9vdERpdl8uZmluZCgndGJvZHknKS5hcHBlbmQocm93cyk7XG5cbiAgaWYgKHJvd3MubGVuZ3RoID09PSBNQVhJTVVNX1JPV1NfSU5fRlVMTF9SRU5ERVIpIHtcbiAgICB2YXIgbWF4UmVuZGVyZWRXYXJuaW5nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgbWF4UmVuZGVyZWRXYXJuaW5nLmNsYXNzTmFtZSA9ICdsb2ctYnJvd3Nlci1saW1pdC1tZXNzYWdlJztcbiAgICBtYXhSZW5kZXJlZFdhcm5pbmcudGV4dENvbnRlbnQgPSBpMThuLnNob3dpbmdGaXJzdFhMb2dFbnRyaWVzKHtcbiAgICAgIHg6IE1BWElNVU1fUk9XU19JTl9GVUxMX1JFTkRFUlxuICAgIH0pO1xuICAgIHRoaXMucm9vdERpdl8uZmluZCgndGFibGUnKS5hZnRlcihtYXhSZW5kZXJlZFdhcm5pbmcpO1xuICB9XG59O1xuXG4vKipcbiAqIENvbnZlcnQgdGhlIGdpdmVuIHNldCBvZiBsb2cgZW50cmllcyB0byB0YWJsZSByb3dzIGFuZCBpbnNlcnQgdGhlbVxuICogaW50byB0aGUgRE9NLCBpbnN0ZWFkIG9mIHJlLXJlbmRlcmluZyB0aGUgd2hvbGUgdGFibGUuXG4gKiBAcGFyYW0geyFOZXRTaW1Mb2dFbnRyeVtdfSBuZXdFbnRyaWVzXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Sb3V0ZXJMb2dNb2RhbC5wcm90b3R5cGUucmVuZGVyTmV3TG9nRW50cmllc18gPSBmdW5jdGlvbiAobmV3RW50cmllcykge1xuICAvLyBCZSBsYXp5LCBkb24ndCByZW5kZXIgYXQgYWxsIGlmIG5vdCB2aXNpYmxlLlxuICBpZiAoIXRoaXMuaXNWaXNpYmxlKCkgfHwgbmV3RW50cmllcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKiogQHR5cGUge2pRdWVyeX0gVGFibGUgYm9keSBlbGVtZW50LiAqL1xuICB2YXIgdGJvZHkgPSB0aGlzLnJvb3REaXZfLmZpbmQoJ3Rib2R5Jyk7XG5cbiAgLy8gR2V0IGV4aXN0aW5nIHRhYmxlIHJvdyBlbGVtZW50cywgd2hpY2ggYXJlIGFscmVhZHkgc29ydGVkIGFuZCBmaWx0ZXJlZC5cbiAgdmFyIG9sZFJvd3MgPSB0Ym9keS5maW5kKCd0cicpO1xuXG4gIC8vIFNvcnQgYW5kIGZpbHRlciB0aGUgbmV3IGVudHJpZXMsIGFuZCBnZW5lcmF0ZSBET00gcm93cyBmb3IgdGhlbS5cbiAgbmV3RW50cmllcyA9IHRoaXMuZ2V0U29ydGVkRmlsdGVyZWRMb2dFbnRyaWVzKG5ld0VudHJpZXMpO1xuICB2YXIgbmV3Um93cyA9ICQobmV3RW50cmllcy5tYXAodGhpcy5tYWtlVGFibGVSb3dfLmJpbmQodGhpcykpKTtcblxuICAvLyBXYWxrIGJvdGggY29sbGVjdGlvbnMgdG8gbWVyZ2UgbmV3IHJvd3MgaW50byB0aGUgRE9NXG4gIHZhciBuZXh0T2xkID0gZ2V0TmV4dEluZm8ob2xkUm93cywgMCk7XG4gIHZhciBuZXh0TmV3ID0gZ2V0TmV4dEluZm8obmV3Um93cywgMCk7XG4gIHZhciBjb21wYXJhdG9yID0gdGhpcy5nZXRTb3J0Q29tcGFyYXRvcl8oKTtcbiAgd2hpbGUgKG5leHROZXcuaW5kZXggPCBuZXdSb3dzLmxlbmd0aCAmJiBuZXh0T2xkLmluZGV4IDwgb2xkUm93cy5sZW5ndGgpIHtcbiAgICBpZiAoY29tcGFyYXRvcihuZXh0TmV3LmxvZ0VudHJ5LCBuZXh0T2xkLmxvZ0VudHJ5KSA8PSAwKSB7XG4gICAgICBuZXh0TmV3LnRhYmxlUm93Lmluc2VydEJlZm9yZShuZXh0T2xkLnRhYmxlUm93KTtcbiAgICAgIG5leHROZXcgPSBnZXROZXh0SW5mbyhuZXdSb3dzLCBuZXh0TmV3LmluZGV4ICsgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5leHRPbGQgPSBnZXROZXh0SW5mbyhvbGRSb3dzLCBuZXh0T2xkLmluZGV4ICsgMSk7XG4gICAgfVxuICB9XG5cbiAgLy8gUHV0IHdoYXRldmVyJ3MgbGVmdCBvbiB0aGUgZW5kIG9mIHRoZSB0YWJsZVxuICB0Ym9keS5hcHBlbmQobmV3Um93cy5zbGljZShuZXh0TmV3LmluZGV4KSk7XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlcyBhIGhlbHBlciBvYmplY3QgZm9yIHBlcmZvcm1pbmcgdGhlIGxvZyByb3cgbWVyZ2UuXG4gKiBAcGFyYW0ge2pRdWVyeX0gcm93cyAtIFdyYXBwZWQgY29sbGVjdGlvbiBvZiB0YWJsZSByb3dzLlxuICogQHBhcmFtIHshbnVtYmVyfSBhdEluZGV4IC0gSW5kZXggaW50byBgcm93c2AgYXQgd2hpY2ggaW5mbyBzaG91bGQgYmUgZ2VuZXJhdGVkLlxuICogQHJldHVybnMge3tpbmRleDogbnVtYmVyLCB0YWJsZVJvdzogalF1ZXJ5LCBsb2dFbnRyeTogTmV0U2ltTG9nRW50cnl9fVxuICovXG5mdW5jdGlvbiBnZXROZXh0SW5mbyhyb3dzLCBhdEluZGV4KSB7XG4gIHZhciByb3cgPSByb3dzLmVxKGF0SW5kZXgpO1xuICByZXR1cm4ge1xuICAgIGluZGV4OiBhdEluZGV4LFxuICAgIHRhYmxlUm93OiByb3csXG4gICAgbG9nRW50cnk6IHJvdy5sZW5ndGggPiAwID8gcm93LmRhdGEoTE9HX0VOVFJZX0RBVEFfS0VZKSA6IHt9XG4gIH07XG59XG5cbi8qKlxuICogQHBhcmFtIHshTmV0U2ltTG9nRW50cnlbXX0gbG9nRW50cmllc1xuICogQHJldHVybnMge05ldFNpbUxvZ0VudHJ5W119IHN1YnNldCBvZiBsb2dFbnRyaWVzLCBzb3J0ZWQgYW5kIGZpbHRlcmVkXG4gKiAgICAgICAgICBhY2NvcmRpbmcgdG8gdGhlIGxvZyBicm93c2VyJ3MgY3VycmVudCBzZXR0aW5ncy5cbiAqL1xuTmV0U2ltUm91dGVyTG9nTW9kYWwucHJvdG90eXBlLmdldFNvcnRlZEZpbHRlcmVkTG9nRW50cmllcyA9IGZ1bmN0aW9uIChsb2dFbnRyaWVzKSB7XG4gIC8vIEZpbHRlciBlbnRyaWVzIHRvIGN1cnJlbnQgbG9nIGJyb3dzZXIgZmlsdGVyIG1vZGVcbiAgdmFyIGZpbHRlcmVkTG9nRW50cmllcyA9IHRoaXMuaXNBbGxSb3V0ZXJMb2dNb2RlXyA/XG4gICAgICBsb2dFbnRyaWVzIDpcbiAgICAgIGxvZ0VudHJpZXMuZmlsdGVyKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICByZXR1cm4gZW50cnkubm9kZUlEID09PSB0aGlzLnJvdXRlcl8uZW50aXR5SUQ7XG4gICAgICB9LCB0aGlzKTtcblxuICByZXR1cm4gZmlsdGVyZWRMb2dFbnRyaWVzLnNvcnQodGhpcy5nZXRTb3J0Q29tcGFyYXRvcl8oKSk7XG59O1xuXG4vKipcbiAqIEdpdmVuIGEgbG9nIGVudHJ5LCBnZW5lcmF0ZSBhIHRhYmxlIHJvdyB0aGF0IGNhbiBiZSBhZGRlZCB0byB0aGUgbG9nIG1vZGFsLlxuICogQHBhcmFtIHshTmV0U2ltTG9nRW50cnl9IGxvZ0VudHJ5XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gYSB0ciBlbGVtZW50LlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUm91dGVyTG9nTW9kYWwucHJvdG90eXBlLm1ha2VUYWJsZVJvd18gPSBmdW5jdGlvbiAobG9nRW50cnkpIHtcbiAgdmFyIGhlYWRlckZpZWxkcyA9IE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKS5yb3V0ZXJFeHBlY3RzUGFja2V0SGVhZGVyO1xuXG4gIHZhciBzaG93VG9BZGRyZXNzID0gaGVhZGVyRmllbGRzLmluZGV4T2YoUGFja2V0LkhlYWRlclR5cGUuVE9fQUREUkVTUykgPiAtMTtcblxuICB2YXIgc2hvd0Zyb21BZGRyZXNzID0gaGVhZGVyRmllbGRzLmluZGV4T2YoUGFja2V0LkhlYWRlclR5cGUuRlJPTV9BRERSRVNTKSA+IC0xO1xuXG4gIHZhciBzaG93UGFja2V0SW5mbyA9IGhlYWRlckZpZWxkcy5pbmRleE9mKFBhY2tldC5IZWFkZXJUeXBlLlBBQ0tFVF9JTkRFWCkgPiAtMSAmJlxuICAgICAgaGVhZGVyRmllbGRzLmluZGV4T2YoUGFja2V0LkhlYWRlclR5cGUuUEFDS0VUX0NPVU5UKSA+IC0xO1xuXG4gIHZhciBvcmlnaW5Ob2RlID0gbG9nRW50cnkuZ2V0T3JpZ2luTm9kZSgpO1xuXG4gIHZhciByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuXG4gIC8vIFN0b3JlIHRoZSBhY3R1YWwgbG9nRW50cnkgb24gdGhlIHJvdyBmb3Igc29ydGluZy9tZXJnaW5nIGxhdGVyLlxuICAkKHJvdykuZGF0YShMT0dfRU5UUllfREFUQV9LRVksIGxvZ0VudHJ5KTtcblxuICByb3cuYXBwZW5kQ2hpbGQobWFrZUNlbGwobG9nRW50cnkuZ2V0VGltZVN0cmluZygpKSk7XG5cbiAgcm93LmFwcGVuZENoaWxkKG1ha2VDZWxsKG9yaWdpbk5vZGUgP1xuICAgICAgb3JpZ2luTm9kZS5nZXREaXNwbGF5TmFtZSgpIDogbG9nRW50cnkubm9kZUlEKSk7XG5cbiAgcm93LmFwcGVuZENoaWxkKG1ha2VDZWxsKGxvZ0VudHJ5LmdldExvY2FsaXplZFN0YXR1cygpKSk7XG5cbiAgaWYgKHNob3dGcm9tQWRkcmVzcykge1xuICAgIHJvdy5hcHBlbmRDaGlsZChtYWtlQ2VsbChsb2dFbnRyeS5nZXRIZWFkZXJGaWVsZChQYWNrZXQuSGVhZGVyVHlwZS5GUk9NX0FERFJFU1MpKSk7XG4gIH1cblxuICBpZiAoc2hvd1RvQWRkcmVzcykge1xuICAgIHJvdy5hcHBlbmRDaGlsZChtYWtlQ2VsbChsb2dFbnRyeS5nZXRIZWFkZXJGaWVsZChQYWNrZXQuSGVhZGVyVHlwZS5UT19BRERSRVNTKSkpO1xuICB9XG5cbiAgaWYgKHNob3dQYWNrZXRJbmZvKSB7XG4gICAgcm93LmFwcGVuZENoaWxkKG1ha2VDZWxsKGxvZ0VudHJ5LmdldExvY2FsaXplZFBhY2tldEluZm8oKSkpO1xuICB9XG5cbiAgdmFyIHRkTWVzc2FnZUJvZHkgPSBtYWtlQ2VsbChsb2dFbnRyeS5nZXRNZXNzYWdlQXNjaWkoKSk7XG4gIHRkTWVzc2FnZUJvZHkuY2xhc3NOYW1lID0gJ21lc3NhZ2UnO1xuICByb3cuYXBwZW5kQ2hpbGQodGRNZXNzYWdlQm9keSk7XG5cbiAgcmV0dXJuIHJvdztcbn07XG5cbi8qKlxuICogQHBhcmFtIHshc3RyaW5nfSB0ZXh0XG4gKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9IHRoZSBuZXcgVEQgZWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gbWFrZUNlbGwodGV4dCkge1xuICB2YXIgdGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICB0ZC5zdHlsZS53aGl0ZVNwYWNlID0gJ25vd3JhcCc7XG4gIHRkLnRleHRDb250ZW50ID0gdGV4dDtcbiAgcmV0dXJuIHRkO1xufVxuXG4vKipcbiAqIENoYW5nZSB0aGUgc29ydCBzZXR0aW5ncyBhbmQgcmUtcmVuZGVyIHRoZSBsb2cgdGFibGUuXG4gKiBAcGFyYW0geyFzdHJpbmd9IHNvcnRLZXlcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVJvdXRlckxvZ01vZGFsLnByb3RvdHlwZS5vblNvcnRIZWFkZXJDbGlja18gPSBmdW5jdGlvbiAoc29ydEtleSkge1xuICBpZiAoIXNvcnRLZXkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodGhpcy5zb3J0QnlfID09PSBzb3J0S2V5KSB7XG4gICAgdGhpcy5zb3J0RGVzY2VuZGluZ18gPSAhdGhpcy5zb3J0RGVzY2VuZGluZ187XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zb3J0QnlfID0gc29ydEtleTtcbiAgICB0aGlzLnNvcnREZXNjZW5kaW5nXyA9IGZhbHNlO1xuICB9XG4gIHRoaXMucmVuZGVyKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCBieSB0aGUgc3VtdWxhdGlvbidzIG9uUm91dGVyQ29ubmVjdCBhbmQgb25Sb3V0ZXJEaXNjb25uZWN0XG4gKiBtZXRob2RzLCB0aGlzIGxvY2FsbHkgcmVtZW1iZXJzIHRoZSBjdXJyZW50IHJvdXRlciBzdGF0ZSBhbmQgdHJpZ2dlcnNcbiAqIGEgcmVyZW5kZXJcbiAqIEBwYXJhbSB7TmV0U2ltUm91dGVyTm9kZX0gcm91dGVyXG4gKi9cbk5ldFNpbVJvdXRlckxvZ01vZGFsLnByb3RvdHlwZS5zZXRSb3V0ZXIgPSBmdW5jdGlvbiAocm91dGVyKSB7XG4gIHRoaXMucm91dGVyXyA9IHJvdXRlcjtcbiAgdGhpcy5pc0FsbFJvdXRlckxvZ01vZGVfID0gIXRoaXMuaGFzTG9jYWxSb3V0ZXJfKCk7XG4gIHRoaXMucmVuZGVyKCk7XG59O1xuXG4vKipcbiAqIFdoZXRoZXIgd2UgYXJlIGN1cnJlbnRseSBjYXBhYmxlIG9mIGxvZ2dpbmcgYWxsIHJvdXRlcnMgb3Igbm90LlxuICogSXMgYWx3YXlzIHRydWUgaWYgd2UgYXJlIGluIGEgbGV2ZWwgd2l0aCBjb25uZWN0ZWQgcm91dGVycy5cbiAqIE90aGVyd2lzZSwgaXMgb25seSB0cnVlIGlmIHdlIGFyZSBub3QgbG9jYWxseSBjb25uZWN0ZWQgdG8gYSByb3V0ZXIuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVJvdXRlckxvZ01vZGFsLnByb3RvdHlwZS5jYW5Mb2dBbGxSb3V0ZXJzXyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKS5jb25uZWN0ZWRSb3V0ZXJzIHx8ICF0aGlzLmhhc0xvY2FsUm91dGVyXygpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWZmIHdlIGFyZSBsb2NhbGx5IGNvbm5lY3RlZCB0byBhIHJvdXRlci5cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUm91dGVyTG9nTW9kYWwucHJvdG90eXBlLmhhc0xvY2FsUm91dGVyXyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEhKHRoaXMucm91dGVyXyk7XG59O1xuXG4vKipcbiAqIFdoZXRoZXIgb3Igbm90IHdlIGNhbiBzd2l0Y2ggYmV0d2VlbiBhbGwtcm91dGVyIGFuZCBzaW5nbGUtcm91dGVyIGxvZ1xuICogbW9kZS4gV2UgY2FuIHN3aXRjaCB0byBzaW5nbGUtcm91dGVyIGlmZiB3ZSBoYXZlIGEgbG9jYWwgcm91dGVyLCBhbmRcbiAqIHdlIGNhbiBzd2l0Y2ggdG8gYWxsLXJvdXRlciBpZmYgd2UgYXJlIGNhcGFibGUgb2YgbG9nZ2luZyBhbGwgcm91dGVyc1xuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Sb3V0ZXJMb2dNb2RhbC5wcm90b3R5cGUuY2FuVG9nZ2xlUm91dGVyTG9nTW9kZV8gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmlzQWxsUm91dGVyTG9nTW9kZV8pIHtcbiAgICByZXR1cm4gdGhpcy5oYXNMb2NhbFJvdXRlcl8oKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdGhpcy5jYW5Mb2dBbGxSb3V0ZXJzXygpO1xuICB9XG59O1xuXG4vKipcbiAqIFRvZ2dsZXMgdGhpcy5pc0FsbFJvdXRlckxvZ01vZGVfIGJldHdlZW4gYHRydWVgIGFuZCBgZmFsc2VgXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Sb3V0ZXJMb2dNb2RhbC5wcm90b3R5cGUudG9nZ2xlUm91dGVyTG9nTW9kZV8gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuaXNBbGxSb3V0ZXJMb2dNb2RlXyA9ICF0aGlzLmlzQWxsUm91dGVyTG9nTW9kZV87XG59O1xuXG4vKipcbiAqIEZpbmRzIHRoZSBidXR0b24gdXNlZCB0byB0b2dnbGUgYmV0d2VlbiByb3V0ZXIgbG9nIG1vZGVzXG4gKiBAcmV0dXJucyB7alF1ZXJ5fVxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUm91dGVyTG9nTW9kYWwucHJvdG90eXBlLmdldFJvdXRlckxvZ1RvZ2dsZUJ1dHRvbiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMucm9vdERpdl8uZmluZCgnYnV0dG9uI3JvdXRlcmxvZy10b2dnbGUnKTtcbn07XG5cbi8qKlxuICogR2l2ZSB0aGUgbG9nIGJyb3dzZXIgYSByZWZlcmVuY2UgdG8gdGhlIHNoYXJkLCBzbyB0aGF0IGl0IGNhbiBxdWVyeSB0aGVcbiAqIGxvZyB0YWJsZS4gIE9yLCBwYXNzIG51bGwgd2hlbiBkaXNjb25uZWN0aW5nIGZyb20gYSBzaGFyZC5cbiAqIEBwYXJhbSB7TmV0U2ltU2hhcmR8bnVsbH0gbmV3U2hhcmRcbiAqL1xuTmV0U2ltUm91dGVyTG9nTW9kYWwucHJvdG90eXBlLnNldFNoYXJkID0gZnVuY3Rpb24gKG5ld1NoYXJkKSB7XG5cbiAgaWYgKHRoaXMuZXZlbnRLZXlzXy5yZWdpc3RlcmVkV2l0aFNoYXJkKSB7XG4gICAgdGhpcy5ldmVudEtleXNfLnJlZ2lzdGVyZWRXaXRoU2hhcmQubG9nVGFibGUudGFibGVDaGFuZ2UudW5yZWdpc3RlcihcbiAgICAgICAgdGhpcy5ldmVudEtleXNfLmxvZ1RhYmxlQ2hhbmdlKTtcbiAgICB0aGlzLmV2ZW50S2V5c18ucmVnaXN0ZXJlZFdpdGhTaGFyZCA9IG51bGw7XG4gIH1cblxuICBpZiAobmV3U2hhcmQpIHtcbiAgICB0aGlzLmV2ZW50S2V5c18ubG9nVGFibGVDaGFuZ2UgPSBuZXdTaGFyZC5sb2dUYWJsZS50YWJsZUNoYW5nZS5yZWdpc3RlcihcbiAgICAgICAgdGhpcy5vbkxvZ1RhYmxlQ2hhbmdlXy5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmV2ZW50S2V5c18ucmVnaXN0ZXJlZFdpdGhTaGFyZCA9IG5ld1NoYXJkO1xuICB9XG5cbiAgLy8gV2hlbiBjaGFuZ2luZyBzaGFyZHMsIHJlc2V0IGxvZyBzbyB3ZSBmZXRjaCB0aGUgd2hvbGUgdGhpbmcgbmV4dCB0aW1lLlxuICB0aGlzLmxvZ0VudHJpZXNfLmxlbmd0aCA9IDA7XG4gIHRoaXMubGF0ZXN0Um93SURfID0gMDtcbiAgdGhpcy5zaGFyZF8gPSBuZXdTaGFyZDtcbn07XG5cbi8qKlxuICogSGFuZGxlIGxvZyB0YWJsZSBjaGFuZ2VzLlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUm91dGVyTG9nTW9kYWwucHJvdG90eXBlLm9uTG9nVGFibGVDaGFuZ2VfID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaGVhZGVyU3BlYyA9IE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKS5yb3V0ZXJFeHBlY3RzUGFja2V0SGVhZGVyO1xuICB2YXIgbmV3Um93cyA9IHRoaXMuc2hhcmRfLmxvZ1RhYmxlLnJlYWRBbGxGcm9tSUQodGhpcy5sYXRlc3RSb3dJRF8gKyAxKTtcbiAgdmFyIG5ld0xvZ0VudHJpZXMgPSBuZXdSb3dzLm1hcChmdW5jdGlvbiAocm93KSB7XG4gICAgdGhpcy5sYXRlc3RSb3dJRF8gPSBNYXRoLm1heChyb3cuaWQsIHRoaXMubGF0ZXN0Um93SURfKTtcbiAgICByZXR1cm4gbmV3IE5ldFNpbUxvZ0VudHJ5KHRoaXMuc2hhcmRfLCByb3csIGhlYWRlclNwZWMpO1xuICB9LCB0aGlzKTtcbiAgLy8gTW9kaWZ5IHRoaXMubG9nRW50cmllc18gaW4tcGxhY2UsIGFwcGVuZGluZyBuZXcgbG9nIGVudHJpZXNcbiAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5sb2dFbnRyaWVzXywgbmV3TG9nRW50cmllcyk7XG4gIHRoaXMucmVuZGVyTmV3TG9nRW50cmllc18obmV3TG9nRW50cmllcyk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHM9IChmdW5jdGlvbigpIHtcbiAgdmFyIHQgPSBmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzLCBmaWx0ZXJzLCBlc2NhcGVcbi8qKi8pIHtcbmVzY2FwZSA9IGVzY2FwZSB8fCBmdW5jdGlvbiAoaHRtbCl7XG4gIHJldHVybiBTdHJpbmcoaHRtbClcbiAgICAucmVwbGFjZSgvJig/IVxcdys7KS9nLCAnJmFtcDsnKVxuICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXG4gICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbn07XG52YXIgYnVmID0gW107XG53aXRoIChsb2NhbHMgfHwge30pIHsgKGZ1bmN0aW9uKCl7IFxuIGJ1Zi5wdXNoKCcnKTsxO1xudmFyIFBhY2tldCA9IHJlcXVpcmUoJy4vUGFja2V0Jyk7XG52YXIgaTE4biA9IHJlcXVpcmUoJy4vbG9jYWxlJyk7XG52YXIgTmV0U2ltR2xvYmFscyA9IHJlcXVpcmUoJy4vTmV0U2ltR2xvYmFscycpO1xuXG52YXIgaGVhZGVyRmllbGRzID0gTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpLnJvdXRlckV4cGVjdHNQYWNrZXRIZWFkZXI7XG5cbi8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbnZhciBzaG93VG9BZGRyZXNzID0gaGVhZGVyRmllbGRzLmluZGV4T2YoUGFja2V0LkhlYWRlclR5cGUuVE9fQUREUkVTUykgPiAtMTtcblxuLyoqIEB0eXBlIHtib29sZWFufSAqL1xudmFyIHNob3dGcm9tQWRkcmVzcyA9IGhlYWRlckZpZWxkcy5pbmRleE9mKFBhY2tldC5IZWFkZXJUeXBlLkZST01fQUREUkVTUykgPiAtMTtcblxuLyoqIEB0eXBlIHtib29sZWFufSAqL1xudmFyIHNob3dQYWNrZXRJbmZvID0gaGVhZGVyRmllbGRzLmluZGV4T2YoUGFja2V0LkhlYWRlclR5cGUuUEFDS0VUX0lOREVYKSA+IC0xICYmXG4gICAgaGVhZGVyRmllbGRzLmluZGV4T2YoUGFja2V0LkhlYWRlclR5cGUuUEFDS0VUX0NPVU5UKSA+IC0xO1xuXG4vKipcbiAqIEBuYW1lIGlzQWxsUm91dGVyTG9nTW9kZVxuICogQHR5cGUge2Jvb2xlYW59XG4gKi9cblxuLyoqXG4gKiBAbmFtZSBzb3J0QnlcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cblxuLyoqXG4gKiBAbmFtZSBzb3J0RGVzY2VuZGluZ1xuICogQHR5cGUge2Jvb2xlYW59XG4gKi9cblxuZnVuY3Rpb24gc29ydE1hcmt1cEZvcihzb3J0S2V5KSB7XG4gIGlmIChzb3J0S2V5ID09PSBzb3J0QnkpIHtcbiAgICBpZiAoc29ydERlc2NlbmRpbmcpIHtcbiAgICAgIHJldHVybiAnPGkgY2xhc3M9XCJmYSBmYS1zb3J0LWRlc2NcIj48L2k+JztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICc8aSBjbGFzcz1cImZhIGZhLXNvcnQtYXNjXCI+PC9pPic7XG4gICAgfVxuICB9XG4gIHJldHVybiAnJztcbn1cbjsgYnVmLnB1c2goJ1xcbjxkaXYgY2xhc3M9XCJtb2RhbC1kaWFsb2cgbW9kYWwtbGdcIj5cXG4gICAgPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPlxcbiAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiY2xvc2VcIiBkYXRhLWRpc21pc3M9XCJtb2RhbFwiIGFyaWEtbGFiZWw9XCJDbG9zZVwiPjxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPiZ0aW1lczs8L3NwYW4+PC9idXR0b24+XFxuXFxuICAgICAgJyk7NDg7IGlmIChjYW5Ub2dnbGVSb3V0ZXJMb2dNb2RlKSB7IDsgYnVmLnB1c2goJ1xcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9XCJyb3V0ZXJsb2ctdG9nZ2xlXCIgY2xhc3M9XCJwdWxsLXJpZ2h0IGJ0biBidG4tcHJpbWFyeSBidG4tbWluaVwiPicsIGVzY2FwZSgoNDksICAoaXNBbGxSb3V0ZXJMb2dNb2RlKSA/IGkxOG4ubG9nQnJvd3NlckhlYWRlcl90b2dnbGVNaW5lKCkgOiBpMThuLmxvZ0Jyb3dzZXJIZWFkZXJfdG9nZ2xlQWxsKCkgKSksICc8L2J1dHRvbj5cXG4gICAgICAnKTs1MDsgfSA7IGJ1Zi5wdXNoKCdcXG5cXG4gICAgICAnKTs1MjsgaWYgKGlzQWxsUm91dGVyTG9nTW9kZSkgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgIDxoNCBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+JywgZXNjYXBlKCg1MywgIGkxOG4ubG9nQnJvd3NlckhlYWRlcl9hbGwoKSApKSwgJzwvaDQ+XFxuICAgICAgJyk7NTQ7IH0gZWxzZSB7IDsgYnVmLnB1c2goJ1xcbiAgICAgICAgPGg0IGNsYXNzPVwibW9kYWwtdGl0bGVcIj4nLCBlc2NhcGUoKDU1LCAgaTE4bi5sb2dCcm93c2VySGVhZGVyX21pbmUoKSApKSwgJzwvaDQ+XFxuICAgICAgJyk7NTY7IH0gOyBidWYucHVzaCgnXFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPlxcbiAgICAgIDx0YWJsZT5cXG4gICAgICAgIDx0aGVhZD5cXG4gICAgICAgICAgPHRyPlxcbiAgICAgICAgICAgIDx0aCBub3dyYXAgZGF0YS1zb3J0LWtleT1cInRpbWVzdGFtcFwiPicsIGVzY2FwZSgoNjIsICBpMThuLnRpbWUoKSApKSwgJyAnLCAoNjIsICBzb3J0TWFya3VwRm9yKCd0aW1lc3RhbXAnKSApLCAnPC90aD5cXG4gICAgICAgICAgICA8dGggbm93cmFwIGRhdGEtc29ydC1rZXk9XCJsb2dnZWQtYnlcIj4nLCBlc2NhcGUoKDYzLCAgaTE4bi5sb2dnZWRCeU5vZGUoKSApKSwgJyAnLCAoNjMsICBzb3J0TWFya3VwRm9yKCdsb2dnZWQtYnknKSApLCAnPC90aD5cXG4gICAgICAgICAgICA8dGggbm93cmFwIGRhdGEtc29ydC1rZXk9XCJzdGF0dXNcIj4nLCBlc2NhcGUoKDY0LCAgaTE4bi5zdGF0dXMoKSApKSwgJyAnLCAoNjQsICBzb3J0TWFya3VwRm9yKCdzdGF0dXMnKSApLCAnPC90aD5cXG4gICAgICAgICAgICAnKTs2NTsgaWYgKHNob3dGcm9tQWRkcmVzcykgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgICAgICAgIDx0aCBub3dyYXAgZGF0YS1zb3J0LWtleT1cImZyb20tYWRkcmVzc1wiPicsIGVzY2FwZSgoNjYsICBpMThuLmZyb20oKSApKSwgJyAnLCAoNjYsICBzb3J0TWFya3VwRm9yKCdmcm9tLWFkZHJlc3MnKSApLCAnPC90aD5cXG4gICAgICAgICAgICAnKTs2NzsgfSA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgICAgICAnKTs2ODsgaWYgKHNob3dUb0FkZHJlc3MpIHsgOyBidWYucHVzaCgnXFxuICAgICAgICAgICAgICA8dGggbm93cmFwIGRhdGEtc29ydC1rZXk9XCJ0by1hZGRyZXNzXCI+JywgZXNjYXBlKCg2OSwgIGkxOG4udG8oKSApKSwgJyAnLCAoNjksICBzb3J0TWFya3VwRm9yKCd0by1hZGRyZXNzJykgKSwgJzwvdGg+XFxuICAgICAgICAgICAgJyk7NzA7IH0gOyBidWYucHVzaCgnXFxuICAgICAgICAgICAgJyk7NzE7IGlmIChzaG93UGFja2V0SW5mbykgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgICAgICAgIDx0aCBub3dyYXAgZGF0YS1zb3J0LWtleT1cInBhY2tldC1pbmZvXCI+JywgZXNjYXBlKCg3MiwgIGkxOG4ucGFja2V0KCkgKSksICcgJywgKDcyLCAgc29ydE1hcmt1cEZvcigncGFja2V0LWluZm8nKSApLCAnPC90aD5cXG4gICAgICAgICAgICAnKTs3MzsgfSA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgICAgICA8dGggbm93cmFwIGRhdGEtc29ydC1rZXk9XCJtZXNzYWdlXCI+JywgZXNjYXBlKCg3NCwgIGkxOG4ubWVzc2FnZSgpICkpLCAnICcsICg3NCwgIHNvcnRNYXJrdXBGb3IoJ21lc3NhZ2UnKSApLCAnPC90aD5cXG4gICAgICAgICAgPC90cj5cXG4gICAgICAgIDwvdGhlYWQ+XFxuICAgICAgICA8dGJvZHk+XFxuICAgICAgICA8L3Rib2R5PlxcbiAgICAgIDwvdGFibGU+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+XFxuICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHRcIiBkYXRhLWRpc21pc3M9XCJtb2RhbFwiPkNsb3NlPC9idXR0b24+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcbicpOyB9KSgpO1xufSBcbnJldHVybiBidWYuam9pbignJyk7XG59O1xuICByZXR1cm4gZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgcmV0dXJuIHQobG9jYWxzLCByZXF1aXJlKFwiZWpzXCIpLmZpbHRlcnMpO1xuICB9XG59KCkpOyIsIi8qKlxuICogQG92ZXJ2aWV3IFVJIHNsaWRlciB1c2VkIHRvIGNoYW5nZSBtYXhpbXVtIHBhY2tldCBsZW5ndGguXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG5cbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpMThuID0gcmVxdWlyZSgnLi9sb2NhbGUnKTtcbnZhciBOZXRTaW1TbGlkZXIgPSByZXF1aXJlKCcuL05ldFNpbVNsaWRlcicpO1xuXG4vKipcbiAqIEdlbmVyYXRvciBhbmQgY29udHJvbGxlciBmb3IgcGFja2V0IHNpemUgc2xpZGVyL3NlbGVjdG9yXG4gKiBAcGFyYW0ge2pRdWVyeX0gcm9vdERpdlxuICogQHBhcmFtIHtmdW5jdGlvbn0gcGFja2V0U2l6ZUNoYW5nZUNhbGxiYWNrXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtudW1iZXJ9IG9wdGlvbnMubWluaW11bVBhY2tldFNpemVcbiAqIEBjb25zdHJ1Y3RvclxuICogQGF1Z21lbnRzIE5ldFNpbVNsaWRlclxuICovXG52YXIgTmV0U2ltUGFja2V0U2l6ZUNvbnRyb2wgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyb290RGl2LFxuICAgIHBhY2tldFNpemVDaGFuZ2VDYWxsYmFjaywgb3B0aW9ucykge1xuICBOZXRTaW1TbGlkZXIuY2FsbCh0aGlzLCByb290RGl2LCB7XG4gICAgb25DaGFuZ2U6IHBhY2tldFNpemVDaGFuZ2VDYWxsYmFjayxcbiAgICBtaW46IG9wdGlvbnMubWluaW11bVBhY2tldFNpemUsXG4gICAgbWF4OiA4MTkyLFxuICAgIHVwcGVyQm91bmRJbmZpbml0ZTogZmFsc2VcbiAgfSk7XG5cbiAgLy8gQXV0by1yZW5kZXIsIHVubGlrZSBvdXIgYmFzZSBjbGFzc1xuICB0aGlzLnJlbmRlcigpO1xufTtcbk5ldFNpbVBhY2tldFNpemVDb250cm9sLmluaGVyaXRzKE5ldFNpbVNsaWRlcik7XG5cbi8qKlxuICogR2V0IGxvY2FsaXplZCBwYWNrZXQgc2l6ZSBkZXNjcmlwdGlvbiBmb3IgdGhlIGdpdmVuIHBhY2tldCBzaXplLlxuICogQHBhcmFtIHtudW1iZXJ9IHBhY2tldFNpemVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbk5ldFNpbVBhY2tldFNpemVDb250cm9sLnByb3RvdHlwZS5nZXRQYWNrZXRTaXplVGV4dCA9IGZ1bmN0aW9uIChwYWNrZXRTaXplKSB7XG4gIHJldHVybiBpMThuLm51bUJpdHNQZXJQYWNrZXQoeyBudW1CaXRzOiBwYWNrZXRTaXplIH0pO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIG51bWVyaWMgdmFsdWUgKGluIGJpdHMpIGludG8gYSBjb21wYWN0IGxvY2FsaXplZCBzdHJpbmdcbiAqIHJlcHJlc2VudGF0aW9uIG9mIHRoYXQgdmFsdWUuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsIC0gbnVtZXJpYyB2YWx1ZSBvZiB0aGUgY29udHJvbFxuICogQHJldHVybnMge3N0cmluZ30gLSBsb2NhbGl6ZWQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHZhbHVlXG4gKiBAb3ZlcnJpZGVcbiAqL1xuTmV0U2ltUGFja2V0U2l6ZUNvbnRyb2wucHJvdG90eXBlLnZhbHVlVG9MYWJlbCA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgaWYgKHZhbCA9PT0gSW5maW5pdHkpIHtcbiAgICByZXR1cm4gaTE4bi51bmxpbWl0ZWQoKTtcbiAgfVxuICByZXR1cm4gaTE4bi5udW1CaXRzUGVyUGFja2V0KHtudW1CaXRzOiB2YWx9KTtcbn07XG5cbi8qKlxuICogR2V0IGxhYmVscyBmb3IgZW5kIHNsaWRlcnNcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWxcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKiBAb3ZlcnJpZGVcbiAqL1xuTmV0U2ltUGFja2V0U2l6ZUNvbnRyb2wucHJvdG90eXBlLnZhbHVlVG9TaG9ydExhYmVsID0gZnVuY3Rpb24gKHZhbCkge1xuICBpZiAodmFsID09PSBJbmZpbml0eSkge1xuICAgIHJldHVybiBpMThuLnVubGltaXRlZCgpO1xuICB9XG4gIHJldHVybiB2YWw7XG59O1xuIiwiLyoqXG4gKiBAb3ZlcnZpZXcgVUkgY29udHJvbGxlciBmb3IgdGhlIHBhY2tldCBlZGl0b3Igd2hpY2ggYWxsb3dzIGVkaXRpbmcgbXVsdGlwbGVcbiAqICAgICAgICAgICBlbmNvZGluZ3MgYXQgb25jZSBhbmQgbGl2ZXMgaW5zaWRlIHRoZSBzZW5kIHBhbmVsLlxuICogQHNlZSBOZXRTaW1TZW5kUGFuZWwgZm9yIGhvdyB0aGlzIGlzIHVzZWQuXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCcuLi91dGlscycpOyAvLyBGb3IgRnVuY3Rpb24ucHJvdG90eXBlLmluaGVyaXRzKClcbnZhciBuZXRzaW1Nc2cgPSByZXF1aXJlKCcuL2xvY2FsZScpO1xudmFyIG1hcmt1cCA9IHJlcXVpcmUoJy4vTmV0U2ltUGFja2V0RWRpdG9yLmh0bWwuZWpzJyk7XG52YXIgS2V5Q29kZXMgPSByZXF1aXJlKCcuLi9jb25zdGFudHMnKS5LZXlDb2RlcztcbnZhciBOZXRTaW1FbmNvZGluZ0NvbnRyb2wgPSByZXF1aXJlKCcuL05ldFNpbUVuY29kaW5nQ29udHJvbCcpO1xudmFyIE5ldFNpbUxvZ1BhbmVsID0gcmVxdWlyZSgnLi9OZXRTaW1Mb2dQYW5lbCcpO1xudmFyIFBhY2tldCA9IHJlcXVpcmUoJy4vUGFja2V0Jyk7XG52YXIgRGF0YUNvbnZlcnRlcnMgPSByZXF1aXJlKCcuL0RhdGFDb252ZXJ0ZXJzJyk7XG52YXIgTmV0U2ltQ29uc3RhbnRzID0gcmVxdWlyZSgnLi9OZXRTaW1Db25zdGFudHMnKTtcbnZhciBOZXRTaW1HbG9iYWxzID0gcmVxdWlyZSgnLi9OZXRTaW1HbG9iYWxzJyk7XG5cbnZhciBFbmNvZGluZ1R5cGUgPSBOZXRTaW1Db25zdGFudHMuRW5jb2RpbmdUeXBlO1xudmFyIEJJVFNfUEVSX0JZVEUgPSBOZXRTaW1Db25zdGFudHMuQklUU19QRVJfQllURTtcblxudmFyIG1pbmlmeUJpbmFyeSA9IERhdGFDb252ZXJ0ZXJzLm1pbmlmeUJpbmFyeTtcbnZhciBmb3JtYXRBQiA9IERhdGFDb252ZXJ0ZXJzLmZvcm1hdEFCO1xudmFyIGZvcm1hdEJpbmFyeSA9IERhdGFDb252ZXJ0ZXJzLmZvcm1hdEJpbmFyeTtcbnZhciBmb3JtYXRIZXggPSBEYXRhQ29udmVydGVycy5mb3JtYXRIZXg7XG52YXIgYWxpZ25EZWNpbWFsID0gRGF0YUNvbnZlcnRlcnMuYWxpZ25EZWNpbWFsO1xudmFyIGFiVG9CaW5hcnkgPSBEYXRhQ29udmVydGVycy5hYlRvQmluYXJ5O1xudmFyIGFiVG9JbnQgPSBEYXRhQ29udmVydGVycy5hYlRvSW50O1xudmFyIGJpbmFyeVRvQUIgPSBEYXRhQ29udmVydGVycy5iaW5hcnlUb0FCO1xudmFyIGJpbmFyeVRvSGV4ID0gRGF0YUNvbnZlcnRlcnMuYmluYXJ5VG9IZXg7XG52YXIgYmluYXJ5VG9JbnQgPSBEYXRhQ29udmVydGVycy5iaW5hcnlUb0ludDtcbnZhciBiaW5hcnlUb0RlY2ltYWwgPSBEYXRhQ29udmVydGVycy5iaW5hcnlUb0RlY2ltYWw7XG52YXIgYmluYXJ5VG9Bc2NpaSA9IERhdGFDb252ZXJ0ZXJzLmJpbmFyeVRvQXNjaWk7XG52YXIgaGV4VG9CaW5hcnkgPSBEYXRhQ29udmVydGVycy5oZXhUb0JpbmFyeTtcbnZhciBpbnRUb0FCID0gRGF0YUNvbnZlcnRlcnMuaW50VG9BQjtcbnZhciBpbnRUb0JpbmFyeSA9IERhdGFDb252ZXJ0ZXJzLmludFRvQmluYXJ5O1xudmFyIGludFRvSGV4ID0gRGF0YUNvbnZlcnRlcnMuaW50VG9IZXg7XG52YXIgZGVjaW1hbFRvQmluYXJ5ID0gRGF0YUNvbnZlcnRlcnMuZGVjaW1hbFRvQmluYXJ5O1xudmFyIGFzY2lpVG9CaW5hcnkgPSBEYXRhQ29udmVydGVycy5hc2NpaVRvQmluYXJ5O1xuXG4vKipcbiAqIFR5cGUgZm9yIHRydWN0dXJlZCBhY2Nlc3MgdG8galF1ZXJ5LXdyYXBwZWQgRE9NIGVsZW1lbnRzLiAgVHdvIGxheWVycyBkZWVwO1xuICogY2FuIGJlIHVzZWQgZm9yIHF1aWNrIGFjY2VzcyB0byBvbmUgb2YgdGhlIGZpZWxkcyBpbiB0aGUgcGFja2V0IGVkaXRvciBncmlkXG4gKiBieSByZWZlcmVuY2luZyB2aWEgcm93IGFuZCBjb2x1bW4uXG4gKlxuICogTWFwIGtleXMgYXQgdGhlIGZpcnN0IGxheWVyIGNvcnJlc3BvbmQgdG8gTmV0U2ltQ29uc3RhbnRzLkVuY29kaW5nVHlwZS5cbiAqIE1hcCBrZXlzIGF0IHRoZSBzZWNvbmQgbGF5ZXIgY29ycmVzcG9uZCB0byBQYWNrZXQuSGVhZGVyVHlwZSwgcGx1cyB0aGVcbiAqICAgJ21lc3NhZ2UnIGZpZWxkLlxuICpcbiAqIFVzYWdlOlxuICogICBtYXAuYmluYXJ5LmZyb21BZGRyZXNzXG4gKiAgIG1hcFsnYmluYXJ5J11bJ2Zyb21BZGRyZXNzJ11cbiAqICAgbWFwW0VuY29kaW5nVHlwZS5CSU5BUlldW1BhY2tldC5IZWFkZXJUeXBlLkZST01fQUREUkVTU11cbiAqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBVSU1hcFxuICogQHByb3BlcnR5IHtVSVJvd01hcH0gYV9hbmRfYlxuICogQHByb3BlcnR5IHtVSVJvd01hcH0gYmluYXJ5XG4gKiBAcHJvcGVydHkge1VJUm93TWFwfSBoZXhhZGVjaW1hbFxuICogQHByb3BlcnR5IHtVSVJvd01hcH0gZGVjaW1hbFxuICogQHByb3BlcnR5IHtVSVJvd01hcH0gYXNjaWlcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFVJUm93TWFwXG4gKiBAcHJvcGVydHkge2pRdWVyeX0gdG9BZGRyZXNzXG4gKiBAcHJvcGVydHkge2pRdWVyeX0gZnJvbUFkZHJlc3NcbiAqIEBwcm9wZXJ0eSB7alF1ZXJ5fSBwYWNrZXRJbmRleFxuICogQHByb3BlcnR5IHtqUXVlcnl9IHBhY2tldENvdW50XG4gKiBAcHJvcGVydHkge2pRdWVyeX0gbWVzc2FnZVxuICovXG5cbi8qKlxuICogR2VuZXJhdG9yIGFuZCBjb250cm9sbGVyIGZvciBtZXNzYWdlIHNlbmRpbmcgdmlldy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBpbml0aWFsQ29uZmlnXG4gKiBAcGFyYW0ge01lc3NhZ2VHcmFudWxhcml0eX0gaW5pdGlhbENvbmZpZy5tZXNzYWdlR3JhbnVsYXJpdHlcbiAqIEBwYXJhbSB7UGFja2V0LkhlYWRlclR5cGVbXX0gaW5pdGlhbENvbmZpZy5wYWNrZXRTcGVjXG4gKiBAcGFyYW0ge251bWJlcn0gW2luaXRpYWxDb25maWcudG9BZGRyZXNzXVxuICogQHBhcmFtIHtudW1iZXJ9IFtpbml0aWFsQ29uZmlnLmZyb21BZGRyZXNzXVxuICogQHBhcmFtIHtudW1iZXJ9IFtpbml0aWFsQ29uZmlnLnBhY2tldEluZGV4XVxuICogQHBhcmFtIHtudW1iZXJ9IFtpbml0aWFsQ29uZmlnLnBhY2tldENvdW50XVxuICogQHBhcmFtIHtzdHJpbmd9IFtpbml0aWFsQ29uZmlnLm1lc3NhZ2VdXG4gKiBAcGFyYW0ge251bWJlcn0gW2luaXRpYWxDb25maWcubWF4UGFja2V0U2l6ZV1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbaW5pdGlhbENvbmZpZy5jaHVua1NpemVdXG4gKiBAcGFyYW0ge251bWJlcn0gW2luaXRpYWxDb25maWcuYml0UmF0ZV1cbiAqIEBwYXJhbSB7RW5jb2RpbmdUeXBlW119IFtpbml0aWFsQ29uZmlnLmVuYWJsZWRFbmNvZGluZ3NdXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBpbml0aWFsQ29uZmlnLnJlbW92ZVBhY2tldENhbGxiYWNrXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBpbml0aWFsQ29uZmlnLmRvbmVTZW5kaW5nQ2FsbGJhY2tcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGluaXRpYWxDb25maWcuY29udGVudENoYW5nZUNhbGxiYWNrXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBpbml0aWFsQ29uZmlnLmVudGVyS2V5UHJlc3NlZENhbGxiYWNrXG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIE5ldFNpbVBhY2tldEVkaXRvciA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluaXRpYWxDb25maWcpIHtcbiAgdmFyIGxldmVsID0gTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7Um93VHlwZVtdfVxuICAgKiBAY29uc3RcbiAgICovXG4gIHRoaXMuUk9XX1RZUEVTID0gW1xuICAgIHtcbiAgICAgIHR5cGVOYW1lOiBFbmNvZGluZ1R5cGUuQV9BTkRfQixcbiAgICAgIGFkZHJlc3NGaWVsZEFsbG93ZWRDaGFyYWN0ZXJzOiAvW0FCXFxzXS9pLFxuICAgICAgYWRkcmVzc0ZpZWxkQ29udmVyc2lvbjogZnVuY3Rpb24gKGFiU3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBEYXRhQ29udmVydGVycy5iaW5hcnlUb0FkZHJlc3NTdHJpbmcoXG4gICAgICAgICAgICBEYXRhQ29udmVydGVycy5hYlRvQmluYXJ5KGFiU3RyaW5nKSwgbGV2ZWwuYWRkcmVzc0Zvcm1hdCk7XG4gICAgICB9LFxuICAgICAgc2hvcnROdW1iZXJBbGxvd2VkQ2hhcmFjdGVyczogL1tBQl0vaSxcbiAgICAgIHNob3J0TnVtYmVyQ29udmVyc2lvbjogdHJ1bmNhdGVkQUJUb0ludCxcbiAgICAgIG1lc3NhZ2VBbGxvd2VkQ2hhcmFjdGVyczogL1tBQlxcc10vaSxcbiAgICAgIG1lc3NhZ2VDb252ZXJzaW9uOiBhYlRvQmluYXJ5XG4gICAgfSxcbiAgICB7XG4gICAgICB0eXBlTmFtZTogRW5jb2RpbmdUeXBlLkJJTkFSWSxcbiAgICAgIGFkZHJlc3NGaWVsZEFsbG93ZWRDaGFyYWN0ZXJzOiAvWzAxXFxzXS9pLFxuICAgICAgYWRkcmVzc0ZpZWxkQ29udmVyc2lvbjogZnVuY3Rpb24gKGJpbmFyeVN0cmluZykge1xuICAgICAgICByZXR1cm4gRGF0YUNvbnZlcnRlcnMuYmluYXJ5VG9BZGRyZXNzU3RyaW5nKFxuICAgICAgICAgICAgYmluYXJ5U3RyaW5nLCBsZXZlbC5hZGRyZXNzRm9ybWF0KTtcbiAgICAgIH0sXG4gICAgICBzaG9ydE51bWJlckFsbG93ZWRDaGFyYWN0ZXJzOiAvWzAxXS8sXG4gICAgICBzaG9ydE51bWJlckNvbnZlcnNpb246IHRydW5jYXRlZEJpbmFyeVRvSW50LFxuICAgICAgbWVzc2FnZUFsbG93ZWRDaGFyYWN0ZXJzOiAvWzAxXFxzXS8sXG4gICAgICBtZXNzYWdlQ29udmVyc2lvbjogbWluaWZ5QmluYXJ5XG4gICAgfSxcbiAgICB7XG4gICAgICB0eXBlTmFtZTogRW5jb2RpbmdUeXBlLkhFWEFERUNJTUFMLFxuICAgICAgYWRkcmVzc0ZpZWxkQWxsb3dlZENoYXJhY3RlcnM6IC9bMC05YS1mXFxzXS9pLFxuICAgICAgYWRkcmVzc0ZpZWxkQ29udmVyc2lvbjogZnVuY3Rpb24gKGhleFN0cmluZykge1xuICAgICAgICByZXR1cm4gRGF0YUNvbnZlcnRlcnMuYmluYXJ5VG9BZGRyZXNzU3RyaW5nKFxuICAgICAgICAgICAgRGF0YUNvbnZlcnRlcnMuaGV4VG9CaW5hcnkoaGV4U3RyaW5nKSwgbGV2ZWwuYWRkcmVzc0Zvcm1hdCk7XG4gICAgICB9LFxuICAgICAgc2hvcnROdW1iZXJBbGxvd2VkQ2hhcmFjdGVyczogL1swLTlhLWZdL2ksXG4gICAgICBzaG9ydE51bWJlckNvbnZlcnNpb246IHRydW5jYXRlZEhleFRvSW50LFxuICAgICAgbWVzc2FnZUFsbG93ZWRDaGFyYWN0ZXJzOiAvWzAtOWEtZlxcc10vaSxcbiAgICAgIG1lc3NhZ2VDb252ZXJzaW9uOiBoZXhUb0JpbmFyeVxuICAgIH0sXG4gICAge1xuICAgICAgdHlwZU5hbWU6IEVuY29kaW5nVHlwZS5ERUNJTUFMLFxuICAgICAgYWRkcmVzc0ZpZWxkQWxsb3dlZENoYXJhY3RlcnM6IC9bMC05Llxcc10vaSxcbiAgICAgIGFkZHJlc3NGaWVsZENvbnZlcnNpb246IGNsZWFuQWRkcmVzc1N0cmluZyxcbiAgICAgIHNob3J0TnVtYmVyQWxsb3dlZENoYXJhY3RlcnM6IC9bMC05XS8sXG4gICAgICBzaG9ydE51bWJlckNvbnZlcnNpb246IHRydW5jYXRlZERlY2ltYWxUb0ludCxcbiAgICAgIG1lc3NhZ2VBbGxvd2VkQ2hhcmFjdGVyczogL1swLTlcXHNdLyxcbiAgICAgIG1lc3NhZ2VDb252ZXJzaW9uOiBmdW5jdGlvbiAoZGVjaW1hbFN0cmluZykge1xuICAgICAgICByZXR1cm4gZGVjaW1hbFRvQmluYXJ5KGRlY2ltYWxTdHJpbmcsIHRoaXMuY3VycmVudENodW5rU2l6ZV8pO1xuICAgICAgfS5iaW5kKHRoaXMpXG4gICAgfSxcbiAgICB7XG4gICAgICB0eXBlTmFtZTogRW5jb2RpbmdUeXBlLkFTQ0lJLFxuICAgICAgYWRkcmVzc0ZpZWxkQWxsb3dlZENoYXJhY3RlcnM6IC9bMC05Llxcc10vaSxcbiAgICAgIGFkZHJlc3NGaWVsZENvbnZlcnNpb246IGNsZWFuQWRkcmVzc1N0cmluZyxcbiAgICAgIHNob3J0TnVtYmVyQWxsb3dlZENoYXJhY3RlcnM6IC9bMC05XS8sXG4gICAgICBzaG9ydE51bWJlckNvbnZlcnNpb246IHRydW5jYXRlZERlY2ltYWxUb0ludCxcbiAgICAgIG1lc3NhZ2VBbGxvd2VkQ2hhcmFjdGVyczogLy4vLFxuICAgICAgbWVzc2FnZUNvbnZlcnNpb246IGZ1bmN0aW9uIChhc2NpaVN0cmluZykge1xuICAgICAgICByZXR1cm4gYXNjaWlUb0JpbmFyeShhc2NpaVN0cmluZywgdGhpcy5jdXJyZW50Q2h1bmtTaXplXyk7XG4gICAgICB9LmJpbmQodGhpcylcbiAgICB9XG4gIF07XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtqUXVlcnl9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnJvb3REaXZfID0gJCgnPGRpdj4nKS5hZGRDbGFzcygnbmV0c2ltLXBhY2tldCcpO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7TWVzc2FnZUdyYW51bGFyaXR5fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5tZXNzYWdlR3JhbnVsYXJpdHlfID0gaW5pdGlhbENvbmZpZy5tZXNzYWdlR3JhbnVsYXJpdHk7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtQYWNrZXQuSGVhZGVyVHlwZVtdfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5wYWNrZXRTcGVjXyA9IGluaXRpYWxDb25maWcucGFja2V0U3BlYztcblxuICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgdGhpcy50b0FkZHJlc3MgPSBpbml0aWFsQ29uZmlnLnRvQWRkcmVzcyB8fFxuICAgICAgRGF0YUNvbnZlcnRlcnMuYmluYXJ5VG9BZGRyZXNzU3RyaW5nKCcwJywgbGV2ZWwuYWRkcmVzc0Zvcm1hdCk7XG5cbiAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gIHRoaXMuZnJvbUFkZHJlc3MgPSBpbml0aWFsQ29uZmlnLmZyb21BZGRyZXNzIHx8XG4gICAgICBEYXRhQ29udmVydGVycy5iaW5hcnlUb0FkZHJlc3NTdHJpbmcoJzAnLCBsZXZlbC5hZGRyZXNzRm9ybWF0KTtcblxuICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgdGhpcy5wYWNrZXRJbmRleCA9IGluaXRpYWxDb25maWcucGFja2V0SW5kZXggIT09IHVuZGVmaW5lZCA/XG4gICAgICBpbml0aWFsQ29uZmlnLnBhY2tldEluZGV4IDogMTtcblxuICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgdGhpcy5wYWNrZXRDb3VudCA9IGluaXRpYWxDb25maWcucGFja2V0Q291bnQgIT09IHVuZGVmaW5lZCA/XG4gICAgICBpbml0aWFsQ29uZmlnLnBhY2tldENvdW50IDogMTtcblxuICAvKipcbiAgICogQmluYXJ5IHN0cmluZyBvZiBtZXNzYWdlIGJvZHksIGxpdmUtaW50ZXJwcmV0ZWQgdG8gb3RoZXIgdmFsdWVzLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgdGhpcy5tZXNzYWdlID0gaW5pdGlhbENvbmZpZy5tZXNzYWdlIHx8ICcnO1xuXG4gIC8qKlxuICAgKiBNYXhpbXVtIHBhY2tldCBsZW5ndGggY29uZmlndXJhYmxlIGJ5IHNsaWRlci5cbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubWF4UGFja2V0U2l6ZV8gPSBpbml0aWFsQ29uZmlnLm1heFBhY2tldFNpemUgfHwgODE5MjtcblxuICAvKipcbiAgICogQml0cyBwZXIgY2h1bmsvYnl0ZSBmb3IgcGFyc2luZyBhbmQgZm9ybWF0dGluZyBwdXJwb3Nlcy5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuY3VycmVudENodW5rU2l6ZV8gPSBpbml0aWFsQ29uZmlnLmNodW5rU2l6ZSB8fCBCSVRTX1BFUl9CWVRFO1xuXG4gIC8qKlxuICAgKiBMb2NhbCBkZXZpY2UgYml0cmF0ZSAoYnBzKSwgd2hpY2ggYWZmZWN0cyBzZW5kLWFuaW1hdGlvbiBzcGVlZC5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuYml0UmF0ZV8gPSBpbml0aWFsQ29uZmlnLmJpdFJhdGUgfHwgSW5maW5pdHk7XG5cbiAgdmFyIGVuY29kaW5ncyA9IGluaXRpYWxDb25maWcuZW5hYmxlZEVuY29kaW5ncyB8fCBbXTtcbiAgLyoqXG4gICAqIFdoaWNoIGVuY29kaW5ncyBzaG91bGQgYmUgdmlzaWJsZSBpbiB0aGUgZWRpdG9yLlxuICAgKiBAdHlwZSB7T2JqZWN0LjxFbmNvZGluZ1R5cGUsIGJvb2xlYW4+fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5lbmFibGVkRW5jb2RpbmdzSGFzaF8gPSBOZXRTaW1FbmNvZGluZ0NvbnRyb2wuZW5jb2RpbmdzQXNIYXNoKGVuY29kaW5ncyk7XG5cbiAgLyoqXG4gICAqIE1ldGhvZCB0byBjYWxsIGluIG9yZGVyIHRvIHJlbW92ZSB0aGlzIHBhY2tldCBmcm9tIGl0cyBwYXJlbnQuXG4gICAqIEZ1bmN0aW9uIHNob3VsZCB0YWtlIHRoaXMgUGFja2V0RWRpdG9yIGFzIGFuIGFyZ3VtZW50LlxuICAgKiBAdHlwZSB7ZnVuY3Rpb259XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnJlbW92ZVBhY2tldENhbGxiYWNrXyA9IGluaXRpYWxDb25maWcucmVtb3ZlUGFja2V0Q2FsbGJhY2s7XG5cbiAgLyoqXG4gICAqIE1ldGhvZCB0byBjYWxsIHdoZW4gdGhpcyBwYWNrZXQgaXMgZG9uZSBwbGF5aW5nIGl0cyBzZW5kaW5nIGFuaW1hdGlvbi5cbiAgICogRnVuY3Rpb24gc2hvdWxkIHRha2UgdGhpcyBQYWNrZXRFZGl0b3IgYXMgYW4gYXJndW1lbnQuXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuZG9uZVNlbmRpbmdDYWxsYmFja18gPSBpbml0aWFsQ29uZmlnLmRvbmVTZW5kaW5nQ2FsbGJhY2s7XG5cbiAgLyoqXG4gICAqIE1ldGhvZCB0byBub3RpZnkgb3VyIHBhcmVudCBjb250YWluZXIgdGhhdCB0aGUgcGFja2V0J3MgYmluYXJ5XG4gICAqIGNvbnRlbnQgaGFzIGNoYW5nZWQuXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuY29udGVudENoYW5nZUNhbGxiYWNrXyA9IGluaXRpYWxDb25maWcuY29udGVudENoYW5nZUNhbGxiYWNrO1xuXG4gIC8qKlxuICAgKiBNZXRob2QgdG8gbm90aWZ5IG91ciBwYXJlbnQgY29udGFpbmVyIHRoYXQgdGhlIGVudGVyIGtleSBoYXMgYmVlblxuICAgKiBwcmVzc2VkXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuZW50ZXJLZXlQcmVzc2VkQ2FsbGJhY2tfID0gaW5pdGlhbENvbmZpZy5lbnRlcktleVByZXNzZWRDYWxsYmFjaztcblxuICAvKipcbiAgICogQHR5cGUge2pRdWVyeX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucmVtb3ZlUGFja2V0QnV0dG9uXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtqUXVlcnl9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmJpdENvdW50ZXJfID0gbnVsbDtcblxuICAvKipcbiAgICogRmxhZyBub3Rpbmcgd2hldGhlciB0aGlzIHBhY2tldCBlZGl0b3IgaXMgaW4gYSBub24taW50ZXJhY3RpdmUgbW9kZVxuICAgKiB3aGVyZSBpdCBhbmltYXRlcyBiaXRzIGRyYWluaW5nL2JlaW5nIHNlbnQuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5pc1BsYXlpbmdTZW5kQW5pbWF0aW9uXyA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBGbGFnIGZvciB3aGV0aGVyIHRoaXMgZWRpdG9yIGlzIGluIHRoZSBtaWRkbGUgb2YgYW4gYXN5bmMgc2VuZCBjb21tYW5kLlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuaXNTZW5kaW5nUGFja2V0VG9SZW1vdGVfID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFJlZmVyZW5jZSB0byBsb2NhbCBjbGllbnQgbm9kZSwgdXNlZCBmb3Igc2VuZGluZyBtZXNzYWdlcy5cbiAgICogQHR5cGUge05ldFNpbUxvY2FsQ2xpZW50Tm9kZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubXlOb2RlXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIENhcHR1cmUgcGFja2V0IGJpbmFyeSBiZWZvcmUgdGhlIHNlbmQgYW5pbWF0aW9uIGJlZ2lucyBzbyB0aGF0IHdlIGNhblxuICAgKiBzZW5kIHRoZSB3aG9sZSBwYWNrZXQgdG8gcmVtb3RlIHN0b3JhZ2Ugd2hlbiB0aGUgYW5pbWF0aW9uIGlzIGRvbmUuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLm9yaWdpbmFsQmluYXJ5XyA9ICcnO1xuXG4gIC8qKlxuICAgKiBJbmRleCBpbnRvIG9yaWdpbmFsIGJpbmFyeSBpbmRpY2F0aW5nIGhvdyBtYW55IGJpdHMgaGF2ZSBiZWVuICdzZW50J1xuICAgKiBpbiB0aGUgYW5pbWF0aW9uLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5zZW5kQW5pbWF0aW9uSW5kZXhfID0gMDtcblxuICAvKipcbiAgICogU2ltdWxhdGlvbi10aW1lIHRpbWVzdGFtcCAobXMpIG9mIHRoZSBsYXN0IGJpdC1zZW5kIGFuaW1hdGlvbi5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubGFzdEJpdFNlbnRUaW1lXyA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogTWFwIG9mIGJvdW5kIFVJIGVsZW1lbnRzIG1hbmlwdWxhdGVkIGJ5IHRoaXMgZWRpdG9yLiAgUHJvdmlkZXMgcXVpY2tcbiAgICogYWNjZXNzIHRvIGlucHV0IGVsZW1lbnRzIGluIHRoZSBlZGl0b3IgZ3JpZC4gIFNlZSB0eXBlIG5vdGVzIGZvciB1c2FnZS5cbiAgICpcbiAgICogUG9wdWxhdGVkIGR5bmFtaWNhbGx5IGluIGBiaW5kRWxlbWVudHNfYCBkdXJpbmcgYHJlbmRlcmAuICBNYXkgbm90IGluY2x1ZGVcbiAgICogYWxsIGZpZWxkcywgYXMgd2UgdHJ5IHRvIG9wdGltaXplIGFuZCBvbWl0IGZpZWxkcyBub3QgZW5hYmxlZCBpbiB0aGUgbGV2ZWwuXG4gICAqXG4gICAqIEB0eXBlIHtVSU1hcH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMudWlfID0ge307XG5cbiAgdGhpcy5yZW5kZXIoKTtcbn07XG5cbi8qKlxuICogUmV0dXJuIHJvb3QgZGl2LCBmb3IgaG9va2luZyB1cCB0byBhIHBhcmVudCBlbGVtZW50LlxuICogQHJldHVybnMge2pRdWVyeX1cbiAqL1xuTmV0U2ltUGFja2V0RWRpdG9yLnByb3RvdHlwZS5nZXRSb290ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5yb290RGl2Xztcbn07XG5cbi8qKlxuICogQ2xlYXIgdGhlIHBhY2tldCBwYXlsb2FkIGFuZCBwdXQgdGhlIGVkaXRvciBiYWNrIGluIGEgc3RhdGUgd2hlcmUgaXQnc1xuICogcmVhZHkgZm9yIGNvbXBvc2luZyBhIG5ldyBwYWNrZXQuXG4gKiBJbnRlbnRpb25hbGx5IHByZXNlcnZlcyB0b0FkZHJlc3MgYW5kIGZyb21BZGRyZXNzLlxuICovXG5OZXRTaW1QYWNrZXRFZGl0b3IucHJvdG90eXBlLnJlc2V0UGFja2V0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLm1lc3NhZ2UgPSAnJztcbiAgdGhpcy5wYWNrZXRJbmRleCA9IDE7XG4gIHRoaXMucGFja2V0Q291bnQgPSAxO1xuICB0aGlzLm9yaWdpbmFsQmluYXJ5XyA9ICcnO1xuICB0aGlzLnNlbmRBbmltYXRpb25JbmRleF8gPSAwO1xuICB0aGlzLmxhc3RCaXRTZW50VGltZV8gPSB1bmRlZmluZWQ7XG4gIHRoaXMudXBkYXRlRmllbGRzXygpO1xuICB0aGlzLnVwZGF0ZVJlbW92ZUJ1dHRvblZpc2liaWxpdHlfKCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGZpcnN0IHZpc2libGUgbWVzc2FnZSBib3gsIHNvIHRoYXQgd2UgY2FuIGZvY3VzKCkgb24gaXRcbiAqIEByZXR1cm5zIHtqUXVlcnl9XG4gKi9cbk5ldFNpbVBhY2tldEVkaXRvci5wcm90b3R5cGUuZ2V0Rmlyc3RWaXNpYmxlTWVzc2FnZUJveCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuZ2V0Um9vdCgpLmZpbmQoJ3RleHRhcmVhLm1lc3NhZ2U6dmlzaWJsZScpLmZpcnN0KCk7XG59O1xuXG4vKiogUmVwbGFjZSBjb250ZW50cyBvZiBvdXIgcm9vdCBlbGVtZW50IHdpdGggb3VyIG93biBtYXJrdXAuICovXG5OZXRTaW1QYWNrZXRFZGl0b3IucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG5ld01hcmt1cCA9ICQobWFya3VwKHtcbiAgICBtZXNzYWdlR3JhbnVsYXJpdHk6IHRoaXMubWVzc2FnZUdyYW51bGFyaXR5XyxcbiAgICBwYWNrZXRTcGVjOiB0aGlzLnBhY2tldFNwZWNfLFxuICAgIGVuYWJsZWRFbmNvZGluZ3NIYXNoOiB0aGlzLmVuYWJsZWRFbmNvZGluZ3NIYXNoX1xuICB9KSk7XG4gIHRoaXMucm9vdERpdl8uaHRtbChuZXdNYXJrdXApO1xuICB0aGlzLmJpbmRFbGVtZW50c18oKTtcbiAgdGhpcy51cGRhdGVGaWVsZHNfKCk7XG4gIHRoaXMudXBkYXRlUmVtb3ZlQnV0dG9uVmlzaWJpbGl0eV8oKTtcbiAgTmV0U2ltTG9nUGFuZWwuYWRqdXN0SGVhZGVyQ29sdW1uV2lkdGhzKHRoaXMucm9vdERpdl8pO1xuICBOZXRTaW1FbmNvZGluZ0NvbnRyb2wuaGlkZVJvd3NCeUVuY29kaW5nKHRoaXMucm9vdERpdl8sXG4gICAgICBPYmplY3Qua2V5cyh0aGlzLmVuYWJsZWRFbmNvZGluZ3NIYXNoXykpO1xufTtcblxuLyoqXG4gKiBQdXQgdGhpcyBwYWNrZXQgaW4gYSBtb2RlIHdoZXJlIGl0J3Mgbm90IGVkaXRhYmxlLiAgSW5zdGVhZCwgaXQgd2lsbCBkcmFpblxuICogaXRzIGJpbmFyeSBhdCB0aGUgY3VycmVudCBiaXRyYXRlIGFuZCBjYWxsIHRoZSBnaXZlbiBjYWxsYmFjayB3aGVuIGFsbFxuICogb2YgdGhlIGJpbmFyeSBoYXMgYmVlbiBkcmFpbmVkL1wic2VudFwiXG4gKiBAcGFyYW0ge05ldFNpbUxvY2FsQ2xpZW50Tm9kZX0gbXlOb2RlXG4gKi9cbk5ldFNpbVBhY2tldEVkaXRvci5wcm90b3R5cGUuYmVnaW5TZW5kaW5nID0gZnVuY3Rpb24gKG15Tm9kZSkge1xuICB0aGlzLmlzUGxheWluZ1NlbmRBbmltYXRpb25fID0gdHJ1ZTtcbiAgdGhpcy5vcmlnaW5hbEJpbmFyeV8gPSB0aGlzLmdldFBhY2tldEJpbmFyeSgpLnN1YnN0cigwLCB0aGlzLm1heFBhY2tldFNpemVfKTtcbiAgdGhpcy5zZW5kQW5pbWF0aW9uSW5kZXhfID0gMDtcbiAgdGhpcy5teU5vZGVfID0gbXlOb2RlO1xuXG4gIC8vIEZpbmlzaCBub3cgaWYgdGhlIHBhY2tldCBpcyBlbXB0eS5cbiAgaWYgKDAgPT09IHRoaXMub3JpZ2luYWxCaW5hcnlfLmxlbmd0aCkge1xuICAgIHRoaXMuZmluaXNoU2VuZGluZygpO1xuICB9XG59O1xuXG4vKipcbiAqIEtpY2sgb2ZmIHRoZSBhc3luYyBzZW5kLXRvLXJlbW90ZSBvcGVyYXRpb24gZm9yIHRoZSBvcmlnaW5hbCBwYWNrZXQgYmluYXJ5LlxuICogV2hlbiBpdCdzIGRvbmUsIHJlbW92ZSB0aGlzIG5vdy1lbXB0eSBwYWNrZXQuXG4gKi9cbk5ldFNpbVBhY2tldEVkaXRvci5wcm90b3R5cGUuZmluaXNoU2VuZGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5pc1BsYXlpbmdTZW5kQW5pbWF0aW9uXyA9IGZhbHNlO1xuICB0aGlzLmlzU2VuZGluZ1BhY2tldFRvUmVtb3RlXyA9IHRydWU7XG4gIHRoaXMubXlOb2RlXy5zZW5kTWVzc2FnZSh0aGlzLm9yaWdpbmFsQmluYXJ5XywgZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaXNTZW5kaW5nUGFja2V0VG9SZW1vdGVfID0gZmFsc2U7XG4gICAgdGhpcy5kb25lU2VuZGluZ0NhbGxiYWNrXyh0aGlzKTtcbiAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRSVUUgaWYgdGhpcyBwYWNrZXQgaXMgY3VycmVudGx5IGJlaW5nIHNlbnQuXG4gKi9cbk5ldFNpbVBhY2tldEVkaXRvci5wcm90b3R5cGUuaXNTZW5kaW5nID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5pc1BsYXlpbmdTZW5kQW5pbWF0aW9uXyB8fCB0aGlzLmlzU2VuZGluZ1BhY2tldFRvUmVtb3RlXztcbn07XG5cbi8qKlxuICogUGFja2V0IEVkaXRvciB0aWNrIGlzIGNhbGxlZCAobWFudWFsbHkgYnkgdGhlIE5ldFNpbVNlbmRQYW5lbCkgdG8gYWR2YW5jZVxuICogaXRzIHNlbmRpbmcgYW5pbWF0aW9uLlxuICogQHBhcmFtIHtSdW5Mb29wLkNsb2NrfSBjbG9ja1xuICovXG5OZXRTaW1QYWNrZXRFZGl0b3IucHJvdG90eXBlLnRpY2sgPSBmdW5jdGlvbiAoY2xvY2spIHtcbiAgLy8gQmVmb3JlIHdlIHN0YXJ0IGFuaW1hdGluZywgb3IgYWZ0ZXIgd2UgYXJlIGRvbmUgYW5pbWF0aW5nLCBkbyBub3RoaW5nLlxuICBpZiAoIXRoaXMuaXNQbGF5aW5nU2VuZEFuaW1hdGlvbl8gfHwgdGhpcy5pc1NlbmRpbmdQYWNrZXRUb1JlbW90ZV8pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIXRoaXMubGFzdEJpdFNlbnRUaW1lXykge1xuICAgIHRoaXMubGFzdEJpdFNlbnRUaW1lXyA9IGNsb2NrLnRpbWU7XG4gIH1cblxuICAvLyBIb3cgbWFueSBjaGFyYWN0ZXJzIHNob3VsZCBiZSBjb25zdW1lZCB0aGlzIHRpY2s/XG4gIHZhciBtc1BlckJpdCA9IDEwMDAgKiAoMSAvIHRoaXMuYml0UmF0ZV8pO1xuICB2YXIgbWF4Qml0c1RvU2VuZFRoaXNUaWNrID0gSW5maW5pdHk7XG4gIGlmIChtc1BlckJpdCA+IDApIHtcbiAgICB2YXIgbXNTaW5jZUxhc3RCaXRDb25zdW1lZCA9IGNsb2NrLnRpbWUgLSB0aGlzLmxhc3RCaXRTZW50VGltZV87XG4gICAgbWF4Qml0c1RvU2VuZFRoaXNUaWNrID0gTWF0aC5mbG9vcihtc1NpbmNlTGFzdEJpdENvbnN1bWVkIC8gbXNQZXJCaXQpO1xuICB9XG5cbiAgaWYgKG1heEJpdHNUb1NlbmRUaGlzVGljayA+IDApIHtcbiAgICB0aGlzLmxhc3RCaXRTZW50VGltZV8gPSBjbG9jay50aW1lO1xuICAgIHRoaXMuc2VuZEFuaW1hdGlvbkluZGV4XyArPSBtYXhCaXRzVG9TZW5kVGhpc1RpY2s7XG4gICAgdGhpcy51cGRhdGVGb3JBbmltYXRpb25fKCk7XG4gICAgaWYgKHRoaXMuc2VuZEFuaW1hdGlvbkluZGV4XyA+PSB0aGlzLm9yaWdpbmFsQmluYXJ5Xy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuZmluaXNoU2VuZGluZygpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBGb2N1cyBldmVudCBoYW5kbGVyLiAgSWYgdGhlIHRhcmdldCBlbGVtZW50IGhhcyBhICd3YXRlcm1hcmsnIGNsYXNzIHRoZW5cbiAqIGl0IGNvbnRhaW5zIHRleHQgd2UgaW50ZW5kIHRvIGNsZWFyIGJlZm9yZSBhbnkgZWRpdGluZyBvY2N1cnMuICBUaGlzXG4gKiBoYW5kbGVyIGNsZWFycyB0aGF0IHRleHQgYW5kIHJlbW92ZXMgdGhlIGNsYXNzLlxuICogQHBhcmFtIGZvY3VzRXZlbnRcbiAqL1xudmFyIHJlbW92ZVdhdGVybWFyayA9IGZ1bmN0aW9uIChmb2N1c0V2ZW50KSB7XG4gIHZhciB0YXJnZXQgPSAkKGZvY3VzRXZlbnQudGFyZ2V0KTtcbiAgaWYgKHRhcmdldC5oYXNDbGFzcygnd2F0ZXJtYXJrJykpIHtcbiAgICB0YXJnZXQudmFsKCcnKTtcbiAgICB0YXJnZXQucmVtb3ZlQ2xhc3MoJ3dhdGVybWFyaycpO1xuICB9XG59O1xuXG4vKipcbiAqIEhlbHBlciBtZXRob2QgZm9yIGRldGVybWluaW5nIGlmIGEgZ2l2ZW4ga2V5UHJlc3MgZXZlbnQgcmVwcmVzZW50cyBhXG4gKiBDTEVBTiBlbnRlciBwcmVzcy4gQXMgaW4sIG9uZSB3aXRob3V0IHRoZSBTaGlmdCBvciBDb250cm9sIG1vZGlmaWVycy5cbiAqIEBwYXJhbSB7RXZlbnR9IGpxdWVyeUV2ZW50XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZmYgdGhlIGdpdmVuIGV2ZW50IHJlcHJlc2VudHMgYSBjbGVhbiBlbnRlclxuICovXG52YXIgaXNVbm1vZGlmaWVkRW50ZXJQcmVzcyA9IGZ1bmN0aW9uIChqcXVlcnlFdmVudCkge1xuICByZXR1cm4gKGpxdWVyeUV2ZW50LmtleUNvZGUgPT09IEtleUNvZGVzLkVOVEVSICYmXG4gICAgICAhKGpxdWVyeUV2ZW50LmN0cmxLZXkgfHwganF1ZXJ5RXZlbnQuc2hpZnRLZXkpKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGtleVByZXNzIGhhbmRsZXIgdGhhdCBhbGxvd3Mgb25seSB0aGUgZ2l2ZW4gY2hhcmFjdGVycyB0byBiZVxuICogdHlwZWQgaW50byBhIHRleHQgZmllbGQuXG4gKiBAcGFyYW0ge1JlZ0V4cH0gd2hpdGVsaXN0UmVnZXhcbiAqIEByZXR1cm4ge2Z1bmN0aW9ufSBhcHByb3ByaWF0ZSB0byBwYXNzIHRvIC5rZXlwcmVzcygpXG4gKi9cbnZhciBtYWtlS2V5cHJlc3NIYW5kbGVyV2l0aFdoaXRlbGlzdCA9IGZ1bmN0aW9uICh3aGl0ZWxpc3RSZWdleCkge1xuICAvKipcbiAgICogQSBrZXlQcmVzcyBoYW5kbGVyIHRoYXQgYmxvY2tzIGFsbCB2aXNpYmxlIGNoYXJhY3RlcnMgZXhjZXB0IHRob3NlXG4gICAqIG1hdGNoaW5nIHRoZSB3aGl0ZWxpc3QuICBQYXNzZXMgdGhyb3VnaCBpbnZpc2libGUgY2hhcmFjdGVycyAoYmFja3NwYWNlLFxuICAgKiBkZWxldGUpIGFuZCBjb250cm9sIGNvbWJpbmF0aW9ucyAoY29weSwgcGFzdGUpLlxuICAgKlxuICAgKiBAcGFyYW0ga2V5RXZlbnRcbiAgICogQHJldHVybnMge2Jvb2xlYW59IC0gV2hldGhlciB0byBwcm9wYWdhdGUgdGhpcyBldmVudC4gIFNob3VsZCByZXR1cm5cbiAgICogICAgICAgICAgRkFMU0UgaWYgd2UgaGFuZGxlIHRoZSBldmVudCBhbmQgZG9uJ3Qgd2FudCB0byBwYXNzIGl0IG9uLCBUUlVFXG4gICAqICAgICAgICAgIGlmIHdlIGFyZSBub3QgaGFuZGxpbmcgdGhlIGV2ZW50LlxuICAgKi9cbiAgcmV0dXJuIGZ1bmN0aW9uIChrZXlFdmVudCkge1xuXG4gICAgLy8gRG9uJ3QgYmxvY2sgY29udHJvbCBjb21iaW5hdGlvbnMgKGNvcHksIHBhc3RlLCBldGMuKVxuICAgIGlmIChrZXlFdmVudC5tZXRhS2V5IHx8IGtleUV2ZW50LmN0cmxLZXkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIERvbid0IGJsb2NrIGludmlzaWJsZSBjaGFyYWN0ZXJzOyB3ZSB3YW50IHRvIGFsbG93IGJhY2tzcGFjZSwgZGVsZXRlLCBldGMuXG4gICAgaWYgKGtleUV2ZW50LndoaWNoIDwgS2V5Q29kZXMuU1BBQ0UgfHwga2V5RXZlbnQud2hpY2ggPj0gS2V5Q29kZXMuREVMRVRFKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBdCB0aGlzIHBvaW50LCBpZiB0aGUgY2hhcmFjdGVyIGRvZXNuJ3QgbWF0Y2gsIHdlIHNob3VsZCBibG9jayBpdC5cbiAgICB2YXIga2V5ID0gU3RyaW5nLmZyb21DaGFyQ29kZShrZXlFdmVudC53aGljaCk7XG4gICAgaWYgKCF3aGl0ZWxpc3RSZWdleC50ZXN0KGtleSkpIHtcbiAgICAgIGtleUV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xufTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIGpRdWVyeS1hcHByb3ByaWF0ZSBrZXl1cCBoYW5kbGVyIGZvciBhIHRleHQgZmllbGQuXG4gKiBHcmFicyB0aGUgbmV3IHZhbHVlIG9mIHRoZSB0ZXh0IGZpZWxkLCBydW5zIGl0IHRocm91Z2ggdGhlIHByb3ZpZGVkXG4gKiBjb252ZXJ0ZXIgZnVuY3Rpb24sIHNldHMgdGhlIHJlc3VsdCBvbiB0aGUgU2VuZFdpZGdldCdzIGludGVybmFsIHN0YXRlXG4gKiBhbmQgdHJpZ2dlcnMgYSBmaWVsZCB1cGRhdGUgb24gdGhlIHdpZGdldCB0aGF0IHNraXBzIHRoZSBmaWVsZCBiZWluZyBlZGl0ZWQuXG4gKlxuICogU2ltaWxhciB0byBtYWtlQmx1ckhhbmRsZXIsIGJ1dCBkb2VzIG5vdCB1cGRhdGUgdGhlIGZpZWxkIGN1cnJlbnRseVxuICogYmVpbmcgZWRpdGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmaWVsZE5hbWUgLSBuYW1lIG9mIGludGVybmFsIHN0YXRlIGZpZWxkIHRoYXQgdGhlIHRleHRcbiAqICAgICAgICBmaWVsZCBzaG91bGQgdXBkYXRlLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY29udmVydGVyRnVuY3Rpb24gLSBUYWtlcyB0aGUgdGV4dCBmaWVsZCdzIHZhbHVlIGFuZFxuICogICAgICAgIGNvbnZlcnRzIGl0IHRvIGEgZm9ybWF0IGFwcHJvcHJpYXRlIHRvIHRoZSBpbnRlcm5hbCBzdGF0ZSBmaWVsZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbZmllbGRXaWR0aF0gLSBtYXhpbXVtIG51bWJlciBvZiBiaXRzIGZvciBmaWVsZCwgcGFzc2VkXG4gKiAgICAgICAgdGhyb3VnaCBhcyBzZWNvbmQgYXJndW1lbnQgdG8gY29udmVydGVyIGZ1bmN0aW9uLlxuICogQHJldHVybnMge2Z1bmN0aW9ufSB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gJC5rZXl1cCgpXG4gKi9cbk5ldFNpbVBhY2tldEVkaXRvci5wcm90b3R5cGUubWFrZUtleXVwSGFuZGxlciA9IGZ1bmN0aW9uIChmaWVsZE5hbWUsXG4gICAgY29udmVydGVyRnVuY3Rpb24sIGZpZWxkV2lkdGgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChqcXVlcnlFdmVudCkge1xuICAgIHZhciBuZXdWYWx1ZSA9IGNvbnZlcnRlckZ1bmN0aW9uKGpxdWVyeUV2ZW50LnRhcmdldC52YWx1ZSwgZmllbGRXaWR0aCk7XG4gICAgaWYgKHR5cGVvZiBuZXdWYWx1ZSA9PT0gJ3N0cmluZycgfHwgIWlzTmFOKG5ld1ZhbHVlKSkge1xuICAgICAgdGhpc1tmaWVsZE5hbWVdID0gbmV3VmFsdWU7XG4gICAgICB0aGlzLnVwZGF0ZUZpZWxkc18oanF1ZXJ5RXZlbnQudGFyZ2V0KTtcbiAgICB9XG4gIH0uYmluZCh0aGlzKTtcbn07XG5cbi8qKlxuICogR2VuZXJhdGUgYSBqUXVlcnktYXBwcm9wcmlhdGUgYmx1ciBoYW5kbGVyIGZvciBhIHRleHQgZmllbGQuXG4gKiBHcmFicyB0aGUgbmV3IHZhbHVlIG9mIHRoZSB0ZXh0IGZpZWxkLCBydW5zIGl0IHRocm91Z2ggdGhlIHByb3ZpZGVkXG4gKiBjb252ZXJ0ZXIgZnVuY3Rpb24sIHNldHMgdGhlIHJlc3VsdCBvbiB0aGUgU2VuZFdpZGdldCdzIGludGVybmFsIHN0YXRlXG4gKiBhbmQgdHJpZ2dlcnMgYSBmdWxsIGZpZWxkIHVwZGF0ZSBvZiB0aGUgd2lkZ2V0IChpbmNsdWRpbmcgdGhlIGZpZWxkIHRoYXQgd2FzXG4gKiBqdXN0IGVkaXRlZCkuXG4gKlxuICogU2ltaWxhciB0byBtYWtlS2V5dXBIYW5kbGVyLCBidXQgYWxzbyB1cGRhdGVzIHRoZSBmaWVsZCB0aGF0IHdhc1xuICoganVzdCBlZGl0ZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZpZWxkTmFtZSAtIG5hbWUgb2YgaW50ZXJuYWwgc3RhdGUgZmllbGQgdGhhdCB0aGUgdGV4dFxuICogICAgICAgIGZpZWxkIHNob3VsZCB1cGRhdGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb252ZXJ0ZXJGdW5jdGlvbiAtIFRha2VzIHRoZSB0ZXh0IGZpZWxkJ3MgdmFsdWUgYW5kXG4gKiAgICAgICAgY29udmVydHMgaXQgdG8gYSBmb3JtYXQgYXBwcm9wcmlhdGUgdG8gdGhlIGludGVybmFsIHN0YXRlIGZpZWxkLlxuICogQHBhcmFtIHtudW1iZXJ9IFtmaWVsZFdpZHRoXSAtIG1heGltdW0gbnVtYmVyIG9mIGJpdHMgZm9yIGZpZWxkLCBwYXNzZWRcbiAqICAgICAgICB0aHJvdWdoIGFzIHNlY29uZCBhcmd1bWVudCB0byBjb252ZXJ0ZXIgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259IHRoYXQgY2FuIGJlIHBhc3NlZCB0byAkLmJsdXIoKVxuICovXG5OZXRTaW1QYWNrZXRFZGl0b3IucHJvdG90eXBlLm1ha2VCbHVySGFuZGxlciA9IGZ1bmN0aW9uIChmaWVsZE5hbWUsXG4gICAgY29udmVydGVyRnVuY3Rpb24sIGZpZWxkV2lkdGgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChqcXVlcnlFdmVudCkge1xuICAgIHZhciBuZXdWYWx1ZSA9IGNvbnZlcnRlckZ1bmN0aW9uKGpxdWVyeUV2ZW50LnRhcmdldC52YWx1ZSwgZmllbGRXaWR0aCk7XG4gICAgaWYgKHR5cGVvZiBuZXdWYWx1ZSA9PT0gJ251bWJlcicgJiYgaXNOYU4obmV3VmFsdWUpKSB7XG4gICAgICBuZXdWYWx1ZSA9IGNvbnZlcnRlckZ1bmN0aW9uKCcwJyk7XG4gICAgfVxuICAgIHRoaXNbZmllbGROYW1lXSA9IG5ld1ZhbHVlO1xuICAgIHRoaXMudXBkYXRlRmllbGRzXygpO1xuICB9LmJpbmQodGhpcyk7XG59O1xuXG4vKipcbiAqIFNwZWNpZmljYXRpb24gZm9yIGFuIGVuY29kaW5nIHJvdyBpbiB0aGUgZWRpdG9yLCB3aGljaCBkZXNpZ25hdGVzIGNoYXJhY3RlclxuICogd2hpdGVsaXN0cyB0byBsaW1pdCB0eXBpbmcgaW4gY2VydGFpbiBmaWVsZHMsIGFuZCBydWxlcyBmb3IgaW50ZXByZXRpbmcgdGhlXG4gKiBmaWVsZCBmcm9tIGJpbmFyeS5cbiAqIEB0eXBlZGVmIHtPYmplY3R9IFJvd1R5cGVcbiAqIEBwcm9wZXJ0eSB7RW5jb2RpbmdUeXBlfSB0eXBlTmFtZVxuICogQHByb3BlcnR5IHtSZWdFeHB9IGFkZHJlc3NGaWVsZEFsbG93ZWRDaGFyYWN0ZXJzIC0gV2hpdGVsaXN0IG9mIGNoYXJhY3RlcnNcbiAqICAgICAgICAgICB0aGF0IG1heSBiZSB0eXBlZCBpbnRvIGFuIGFkZHJlc3MgZmllbGQuXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBhZGRyZXNzRmllbGRDb252ZXJzaW9uIC0gSG93IHRvIGNvbnZlcnQgZnJvbSBiaW5hcnlcbiAqICAgICAgICAgICB0byBhbiBhZGRyZXNzIHN0cmluZyBpbiB0aGlzIHJvdyB3aGVuIHRoZSBiaW5hcnkgaXMgdXBkYXRlZC5cbiAqIEBwcm9wZXJ0eSB7UmVnRXhwfSBzaG9ydE51bWJlckFsbG93ZWRDaGFyYWN0ZXJzIC0gV2hpdGVsaXN0IG9mIGNoYXJhY3RlcnNcbiAqICAgICAgICAgICB0aGF0IG1heSBiZSB0eXBlZCBpbnRvIGEgaGVhZGVyIGZpZWxkLlxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gc2hvcnROdW1iZXJDb252ZXJzaW9uIC0gSG93IHRvIGNvbnZlcnQgZnJvbSBiaW5hcnlcbiAqICAgICAgICAgICB0byBhIGhlYWRlciB2YWx1ZSBpbiB0aGlzIHJvdyB3aGVuIHRoZSBiaW5hcnkgaXMgdXBkYXRlZC5cbiAqIEBwcm9wZXJ0eSB7UmVnRXhwfSBtZXNzYWdlQWxsb3dlZENoYXJhY3RlcnMgLSBXaGl0ZWxpc3Qgb2YgY2hhcmFjdGVyc1xuICogICAgICAgICAgIHRoYXQgbWF5IGJlIHR5cGVkIGludG8gdGhlIG1lc3NhZ2UgZmllbGQuXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBtZXNzYWdlQ29udmVyc2lvbiAtIEhvdyB0byBjb252ZXJ0IGZyb20gYmluYXJ5IHRvXG4gKiAgICAgICAgICAgdGhlIG1lc3NhZ2UgdmFsdWUgaW4gdGhpcyByb3cgd2hlbiB0aGUgYmluYXJ5IGlzIHVwZGF0ZWQuXG4gKi9cblxuLyoqXG4gKiBDb252ZXJ0IGJpbmFyeSB0byBhbiBpbnRlZ2VyLCBpbnRlbnRpb25hbGx5IGxpbWl0aW5nIHRoZSBiaW5hcnkgd2lkdGggc29cbiAqIHRoYXQgb3ZlcmZsb3cgY2FuIG9jY3VyLlxuICogQHBhcmFtIHtzdHJpbmd9IGJpbmFyeVN0cmluZyAoaW50ZXJwcmV0ZWQgYXMgdW5zaWduZWQpXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4V2lkdGggaW4gYml0c1xuICogQHJldHVybnMge251bWJlcn1cbiAqL1xudmFyIHRydW5jYXRlZEJpbmFyeVRvSW50ID0gZnVuY3Rpb24gKGJpbmFyeVN0cmluZywgbWF4V2lkdGgpIHtcbiAgcmV0dXJuIGJpbmFyeVRvSW50KGJpbmFyeVN0cmluZy5zdWJzdHIoLW1heFdpZHRoKSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgQUJzIHRvIGFuIGludGVnZXIsIGludGVudGlvbmFsbHkgbGltaXRpbmcgdGhlIHdpZHRoIHNvIHRoYXQgb3ZlcmZsb3dcbiAqIGNhbiBvY2N1ciAoYW5hbGFnb3VzIHRvIHRydW5jYXRlZEJpbmFyeVRvSW50KS4gIEEgaXMgdHJlYXRlZCBhcyB6ZXJvLCBCIGFzXG4gKiBvbmUuXG4gKiBAcGFyYW0ge3N0cmluZ30gYWJTdHJpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXhXaWR0aCBpbiBiaXRzXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG52YXIgdHJ1bmNhdGVkQUJUb0ludCA9IGZ1bmN0aW9uIChhYlN0cmluZywgbWF4V2lkdGgpIHtcbiAgcmV0dXJuIGFiVG9JbnQoYWJTdHJpbmcuc3Vic3RyKC1tYXhXaWR0aCkpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgaGV4YWRlY2ltYWwgc3RyaW5nIHRvIGEgc2luZ2xlIGludGVnZXIsIGludGVudGlvbmFsbHkgbGltaXRpbmdcbiAqIHRoZSBiaXQtd2lkdGggdG8gc28gdGhhdCBvdmVyZmxvdyBjYW4gb2NjdXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gaGV4U3RyaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4V2lkdGggaW4gYml0c1xuICogQHJldHVybnMge251bWJlcn1cbiAqL1xudmFyIHRydW5jYXRlZEhleFRvSW50ID0gZnVuY3Rpb24gKGhleFN0cmluZywgbWF4V2lkdGgpIHtcbiAgcmV0dXJuIHRydW5jYXRlZEJpbmFyeVRvSW50KGhleFRvQmluYXJ5KGhleFN0cmluZyksIG1heFdpZHRoKTtcbn07XG5cbi8qKlxuICogQ29udmVydCBhIGRlY2ltYWwgc3RyaW5nIHRvIGFuIGludGVnZXIsIGludGVudGlvbmFsbHkgbGltaXRpbmcgdGhlIGJpdC13aWR0aFxuICogc28gdGhhdCBvdmVyZmxvdyBjYW4gb2NjdXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGVjaW1hbFN0cmluZ1xuICogQHBhcmFtIHtudW1iZXJ9IG1heFdpZHRoIGluIGJpdHNcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbnZhciB0cnVuY2F0ZWREZWNpbWFsVG9JbnQgPSBmdW5jdGlvbiAoZGVjaW1hbFN0cmluZywgbWF4V2lkdGgpIHtcbiAgcmV0dXJuIHRydW5jYXRlZEJpbmFyeVRvSW50KGludFRvQmluYXJ5KHBhcnNlSW50KGRlY2ltYWxTdHJpbmcsIDEwKSksIG1heFdpZHRoKTtcbn07XG5cbi8qKlxuICogQ29udmVydCBhbiBhZGRyZXNzIHN0cmluZyB0byBiaW5hcnkgYW5kIGJhY2sgdXNpbmcgdGhlIGxldmVsJ3MgYWRkcmVzc1xuICogZm9ybWF0LCB3aGljaCBjb2VyY2VzIGl0IHRvIHRoZSBleGFjdCBmb3JtYXQgdGhlIGxldmVsIHdhbnRzLlxuICogQHBhcmFtIHtzdHJpbmd9IG9yaWdpbmFsU3RyaW5nXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG52YXIgY2xlYW5BZGRyZXNzU3RyaW5nID0gZnVuY3Rpb24gKG9yaWdpbmFsU3RyaW5nKSB7XG4gIHZhciBsZXZlbCA9IE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKTtcbiAgdmFyIGJpbmFyeUZvcm0gPSBEYXRhQ29udmVydGVycy5hZGRyZXNzU3RyaW5nVG9CaW5hcnkoXG4gICAgICBvcmlnaW5hbFN0cmluZywgbGV2ZWwuYWRkcmVzc0Zvcm1hdCk7XG4gIHJldHVybiBEYXRhQ29udmVydGVycy5iaW5hcnlUb0FkZHJlc3NTdHJpbmcoXG4gICAgICBiaW5hcnlGb3JtLCBsZXZlbC5hZGRyZXNzRm9ybWF0KTtcbn07XG5cbi8qKlxuICogSGVscGVyIG1ldGhvZCB0byBmaWx0ZXIgdGhpcy5ST1dfVFlQRVMgYnkgZW5hYmxlZCBlbmNvZGluZ3NcbiAqIEBwcml2YXRlXG4gKiBAcmV0dXJucyB7Um93VHlwZVtdfVxuICovXG5OZXRTaW1QYWNrZXRFZGl0b3IucHJvdG90eXBlLmdldEVuYWJsZWRSb3dUeXBlc18gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLlJPV19UWVBFUy5maWx0ZXIoZnVuY3Rpb24gKHJvd1R5cGUpIHtcbiAgICByZXR1cm4gdGhpcy5pc0VuY29kaW5nRW5hYmxlZF8ocm93VHlwZS50eXBlTmFtZSk7XG4gIH0sIHRoaXMpO1xufTtcblxuLyoqXG4gKiBHZXQgcmVsZXZhbnQgZWxlbWVudHMgZnJvbSB0aGUgcGFnZSBhbmQgYmluZCB0aGVtIHRvIGxvY2FsIHZhcmlhYmxlcy5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVBhY2tldEVkaXRvci5wcm90b3R5cGUuYmluZEVsZW1lbnRzXyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGxldmVsID0gTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpO1xuICB2YXIgZW5jb2RlciA9IG5ldyBQYWNrZXQuRW5jb2RlcihsZXZlbC5hZGRyZXNzRm9ybWF0LFxuICAgICAgbGV2ZWwucGFja2V0Q291bnRCaXRXaWR0aCwgdGhpcy5wYWNrZXRTcGVjXyk7XG4gIHZhciByb290RGl2ID0gdGhpcy5yb290RGl2XztcblxuICB0aGlzLmdldEVuYWJsZWRSb3dUeXBlc18oKS5mb3JFYWNoKGZ1bmN0aW9uIChyb3dUeXBlKSB7XG4gICAgdmFyIHRyID0gcm9vdERpdi5maW5kKCd0ci4nICsgcm93VHlwZS50eXBlTmFtZSk7XG4gICAgdGhpcy51aV9bcm93VHlwZS50eXBlTmFtZV0gPSB7fTtcbiAgICB2YXIgcm93RmllbGRzID0gdGhpcy51aV9bcm93VHlwZS50eXBlTmFtZV07XG5cbiAgICAvLyBXZSBhdHRhY2ggZm9jdXMgKHNvbWV0aW1lcykgdG8gY2xlYXIgdGhlIGZpZWxkIHdhdGVybWFyaywgaWYgcHJlc2VudFxuICAgIC8vIFdlIGF0dGFjaCBrZXlwcmVzcyB0byBibG9jayBjZXJ0YWluIGNoYXJhY3RlcnNcbiAgICAvLyBXZSBhdHRhY2gga2V5dXAgdG8gbGl2ZS11cGRhdGUgdGhlIHdpZGdldCBhcyB0aGUgdXNlciB0eXBlc1xuICAgIC8vIFdlIGF0dGFjaCBibHVyIHRvIHJlZm9ybWF0IHRoZSBlZGl0ZWQgZmllbGQgd2hlbiB0aGUgdXNlciBsZWF2ZXMgaXQsXG4gICAgLy8gICAgYW5kIHRvIGNhdGNoIG5vbi1rZXl1cCBjYXNlcyBsaWtlIGNvcHkvcGFzdGUuXG5cbiAgICB0aGlzLnBhY2tldFNwZWNfLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkU3BlYykge1xuICAgICAgLyoqIEB0eXBlIHtQYWNrZXQuSGVhZGVyVHlwZX0gKi9cbiAgICAgIHZhciBmaWVsZE5hbWUgPSBmaWVsZFNwZWM7XG4gICAgICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgICAgIHZhciBmaWVsZFdpZHRoID0gZW5jb2Rlci5nZXRGaWVsZEJpdFdpZHRoKGZpZWxkTmFtZSk7XG5cbiAgICAgIHZhciBhbGxvd2VkQ2hhcmFjdGVyRnVuY3Rpb24sIGNvbnZlcnNpb25GdW5jdGlvbjtcbiAgICAgIGlmIChQYWNrZXQuaXNBZGRyZXNzRmllbGQoZmllbGROYW1lKSkge1xuICAgICAgICBhbGxvd2VkQ2hhcmFjdGVyRnVuY3Rpb24gPSByb3dUeXBlLmFkZHJlc3NGaWVsZEFsbG93ZWRDaGFyYWN0ZXJzO1xuICAgICAgICBjb252ZXJzaW9uRnVuY3Rpb24gPSByb3dUeXBlLmFkZHJlc3NGaWVsZENvbnZlcnNpb247XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhbGxvd2VkQ2hhcmFjdGVyRnVuY3Rpb24gPSByb3dUeXBlLnNob3J0TnVtYmVyQWxsb3dlZENoYXJhY3RlcnM7XG4gICAgICAgIGNvbnZlcnNpb25GdW5jdGlvbiA9IHJvd1R5cGUuc2hvcnROdW1iZXJDb252ZXJzaW9uO1xuICAgICAgfVxuXG4gICAgICByb3dGaWVsZHNbZmllbGROYW1lXSA9IHRyLmZpbmQoJ2lucHV0LicgKyBmaWVsZE5hbWUpO1xuICAgICAgcm93RmllbGRzW2ZpZWxkTmFtZV0ua2V5cHJlc3MobWFrZUtleXByZXNzSGFuZGxlcldpdGhXaGl0ZWxpc3QoXG4gICAgICAgICAgYWxsb3dlZENoYXJhY3RlckZ1bmN0aW9uKSk7XG4gICAgICByb3dGaWVsZHNbZmllbGROYW1lXS5rZXl1cCh0aGlzLm1ha2VLZXl1cEhhbmRsZXIoZmllbGROYW1lLFxuICAgICAgICAgIGNvbnZlcnNpb25GdW5jdGlvbiwgZmllbGRXaWR0aCkpO1xuICAgICAgcm93RmllbGRzW2ZpZWxkTmFtZV0uYmx1cih0aGlzLm1ha2VCbHVySGFuZGxlcihmaWVsZE5hbWUsXG4gICAgICAgICAgY29udmVyc2lvbkZ1bmN0aW9uLCBmaWVsZFdpZHRoKSk7XG4gICAgfSwgdGhpcyk7XG5cbiAgICByb3dGaWVsZHMubWVzc2FnZSA9IHRyLmZpbmQoJ3RleHRhcmVhLm1lc3NhZ2UnKTtcbiAgICByb3dGaWVsZHMubWVzc2FnZS5mb2N1cyhyZW1vdmVXYXRlcm1hcmspO1xuICAgIHJvd0ZpZWxkcy5tZXNzYWdlLmtleXByZXNzKFxuICAgICAgICBtYWtlS2V5cHJlc3NIYW5kbGVyV2l0aFdoaXRlbGlzdChyb3dUeXBlLm1lc3NhZ2VBbGxvd2VkQ2hhcmFjdGVycykpO1xuICAgIHJvd0ZpZWxkcy5tZXNzYWdlLmtleWRvd24oZnVuY3Rpb24oanF1ZXJ5RXZlbnQpe1xuICAgICAgaWYgKGlzVW5tb2RpZmllZEVudGVyUHJlc3MoanF1ZXJ5RXZlbnQpKSB7XG4gICAgICAgIHRoaXMuZW50ZXJLZXlQcmVzc2VkQ2FsbGJhY2tfKGpxdWVyeUV2ZW50KTtcbiAgICAgIH1cbiAgICB9LmJpbmQodGhpcykpO1xuICAgIHJvd0ZpZWxkcy5tZXNzYWdlLmtleXVwKFxuICAgICAgICB0aGlzLm1ha2VLZXl1cEhhbmRsZXIoJ21lc3NhZ2UnLCByb3dUeXBlLm1lc3NhZ2VDb252ZXJzaW9uKSk7XG4gICAgcm93RmllbGRzLm1lc3NhZ2UuYmx1cihcbiAgICAgICAgdGhpcy5tYWtlQmx1ckhhbmRsZXIoJ21lc3NhZ2UnLCByb3dUeXBlLm1lc3NhZ2VDb252ZXJzaW9uKSk7XG4gIH0sIHRoaXMpO1xuXG4gIHRoaXMucmVtb3ZlUGFja2V0QnV0dG9uXyA9IHJvb3REaXYuZmluZCgnLnJlbW92ZS1wYWNrZXQtYnV0dG9uJyk7XG4gIHRoaXMucmVtb3ZlUGFja2V0QnV0dG9uXy5jbGljayh0aGlzLm9uUmVtb3ZlUGFja2V0QnV0dG9uQ2xpY2tfLmJpbmQodGhpcykpO1xuICB0aGlzLmJpdENvdW50ZXJfID0gcm9vdERpdi5maW5kKCcuYml0LWNvdW50ZXInKTtcbn07XG5cbi8qKlxuICogU3BlY2lhbCB1cGRhdGUgbWV0aG9kIGNhbGxlZCBkdXJpbmcgc2VuZCBhbmltYXRpb24gdGhhdCBjaGFuZ2VzIHRoZSBlZGl0b3JcbiAqIGRpc3BsYXkgdG8gc2hvdyBlYWNoIGZpZWxkIGxlZnQtdHJ1bmNhdGVkIGF0IGFuIGFwcHJvcHJpYXRlIGFtb3VudCBmb3IgdGhlXG4gKiBzaW11bGF0ZWQgc2VuZCBwcm9ncmVzcy5cbiAqXG4gKiBUaGlzIHdvcmtzIGRpZmZlcmVudGx5IGZvciBkaWZmZXJlbnQgZmllbGRzOlxuICogIC0gQmluYXJ5IGFuZCBBL0IgZmllbGRzIHNlbmQgYSBzaW5nbGUgYml0IGF0IGEgdGltZS5cbiAqICAtIEhleCBzZW5kcyBhIHNpbmdsZSBoZXggZGlnaXQgYXQgYSB0aW1lLCBidXQgYXQgdGhlIGNvcnJlY3Qgc2xvd2VyIHJhdGUuXG4gKiAgLSBEZWNpbWFsIGFuZCBBU0NJSSBzZW5kIG9uZSBjaHVuayBhdCBhIHRpbWUsIHdoaWNoIGRlcGVuZHMgb24gdGhlIGN1cnJlbnRcbiAqICAgIGNodW5rIHNpemUsIGFuZCBpcyBhZGp1c3RlZCB0byB0aGUgY29ycmVjdCBzbG93ZXIgcmF0ZSBhcyB3ZWxsLiAgRm9yXG4gKiAgICBBU0NJSSB0aGlzIG1hcHMgdG8gb25lIGNoYXJhY3RlciBhdCBhIHRpbWUuICBGb3IgZGVjaW1hbCwgaXQncyBvbmVcbiAqICAgIHdoaXRlc3BhY2UtZGVsaW1pdGVkIG51bWJlci5cbiAqXG4gKiBUaGlzIGF2b2lkcyB0aGUganVtYmxlZCBlZmZlY3Qgb2YgcmVpbnRlcnByZXRpbmcgbm9uYmluYXJ5IGZpZWxkcyB1c2luZ1xuICogbWlzYWxpZ25lZCBiaW5hcnksIGFuZCBjb21tdW5pY2F0ZXMgaW4gYSB2aXN1YWwgd2F5IHRoYXQgaXQgdGFrZXMgbG9uZ2VyIHRvXG4gKiBzZW5kIGEgc2luZ2xlIGNoYXJhY3RlciB0aGFuIGl0IGRvZXMgdG8gc2VuZCBhIHNpbmdsZSBiaXQuXG4gKlxuICogVGhpcyBtZXRob2QgaXMgYWxzbyBkZXNpZ25lZCB0byBzZW5kIHRoZSBwYWNrZXQgaGVhZGVyIGZpZWxkcyBpbiBzZXF1ZW5jZVxuICogYmVmb3JlIHNlbmRpbmcgdGhlIHBhY2tldCBib2R5LiAgQm9keSBiaW5hcnkgaXMgbmV2ZXIgc2VlbiBpbiB0aGUgaGVhZGVyXG4gKiBmaWVsZHMsIGVhY2ggZmllbGQgaXMgdHJlYXRlZCBhcyBhbiBpbmRlcGVuZGVudCBzcGFjZS5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVBhY2tldEVkaXRvci5wcm90b3R5cGUudXBkYXRlRm9yQW5pbWF0aW9uXyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNodW5rU2l6ZSA9IHRoaXMuY3VycmVudENodW5rU2l6ZV87XG4gIHZhciBsaXZlRmllbGRzID0gW107XG5cbiAgLy8gVGhlcmUgbWF5IGJlIHBvdGVudGlhbCBmb3IgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIGhlcmUsIGJ1dCBpdCdzIG5vdFxuICAvLyBwYXJ0aWN1bGFybHkgaGlnaCBvbiBvdXIgcGVyZiBsaXN0IHJpZ2h0IG5vdy5cblxuICB2YXIgbGV2ZWwgPSBOZXRTaW1HbG9iYWxzLmdldExldmVsQ29uZmlnKCk7XG4gIHZhciBlbmNvZGVyID0gbmV3IFBhY2tldC5FbmNvZGVyKGxldmVsLmFkZHJlc3NGb3JtYXQsXG4gICAgICBsZXZlbC5wYWNrZXRDb3VudEJpdFdpZHRoLCB0aGlzLnBhY2tldFNwZWNfKTtcblxuICB2YXIgZmllbGRTdGFydCA9IDA7XG5cbiAgdGhpcy5wYWNrZXRTcGVjXy5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZFNwZWMpIHtcbiAgICAvKiogQHR5cGUge1BhY2tldC5IZWFkZXJUeXBlfSAqL1xuICAgIHZhciBmaWVsZE5hbWUgPSBmaWVsZFNwZWM7XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgdmFyIGZpZWxkV2lkdGggPSBlbmNvZGVyLmdldEZpZWxkQml0V2lkdGgoZmllbGROYW1lKTtcblxuICAgIGlmICh0aGlzLnNlbmRBbmltYXRpb25JbmRleF8gPCBmaWVsZFN0YXJ0ICsgZmllbGRXaWR0aCkge1xuICAgICAgLy8gRWl0aGVyIHdlIGhhdmVuJ3QgcmVhY2hlZCB0aGlzIGZpZWxkIHlldCBvciB3ZSdyZSBjdXJyZW50bHkgYW5pbWF0aW5nXG4gICAgICAvLyB0aHJvdWdoIGl0OyBkb24ndCBkbyBhbnl0aGluZyB0byB0aGUgbW9yZSBjb21wbGV4IGZpZWxkcywgYW5kIGFuaW1hdGVcbiAgICAgIC8vIHRoZSBiaW5hcnkgYXBwcm9wcmlhdGVseS5cbiAgICAgIHZhciBmaWVsZEJpbmFyeSA9IHRoaXMub3JpZ2luYWxCaW5hcnlfLnN1YnN0cihmaWVsZFN0YXJ0LCBmaWVsZFdpZHRoKTtcbiAgICAgIHZhciB0cnVuY2F0ZWRCaXRzID0gTWF0aC5tYXgoMCwgdGhpcy5zZW5kQW5pbWF0aW9uSW5kZXhfIC0gZmllbGRTdGFydCk7XG5cbiAgICAgIGlmICh0aGlzLmlzRW5jb2RpbmdFbmFibGVkXyhFbmNvZGluZ1R5cGUuQV9BTkRfQikpIHtcbiAgICAgICAgbGl2ZUZpZWxkcy5wdXNoKHtcbiAgICAgICAgICBpbnB1dEVsZW1lbnQ6IHRoaXMudWlfW0VuY29kaW5nVHlwZS5BX0FORF9CXVtmaWVsZE5hbWVdLFxuICAgICAgICAgIG5ld1ZhbHVlOiBiaW5hcnlUb0FCKGZpZWxkQmluYXJ5KS5zdWJzdHIodHJ1bmNhdGVkQml0cylcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmlzRW5jb2RpbmdFbmFibGVkXyhFbmNvZGluZ1R5cGUuQklOQVJZKSkge1xuICAgICAgICBsaXZlRmllbGRzLnB1c2goe1xuICAgICAgICAgIGlucHV0RWxlbWVudDogdGhpcy51aV9bRW5jb2RpbmdUeXBlLkJJTkFSWV1bZmllbGROYW1lXSxcbiAgICAgICAgICBuZXdWYWx1ZTogZmllbGRCaW5hcnkuc3Vic3RyKHRydW5jYXRlZEJpdHMpXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pc0VuY29kaW5nRW5hYmxlZF8oRW5jb2RpbmdUeXBlLkhFWEFERUNJTUFMKSkge1xuICAgICAgICB2YXIgdHJ1bmNhdGVkSGV4RGlnaXRzID0gTWF0aC5mbG9vcih0cnVuY2F0ZWRCaXRzIC8gNCk7XG4gICAgICAgIGxpdmVGaWVsZHMucHVzaCh7XG4gICAgICAgICAgaW5wdXRFbGVtZW50OiB0aGlzLnVpX1tFbmNvZGluZ1R5cGUuSEVYQURFQ0lNQUxdW2ZpZWxkTmFtZV0sXG4gICAgICAgICAgbmV3VmFsdWU6IGJpbmFyeVRvSGV4KGZpZWxkQmluYXJ5KS5zdWJzdHIodHJ1bmNhdGVkSGV4RGlnaXRzKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gV2UncmUgcGFzdCB0aGlzIGZpZWxkIC0gaXQgc2hvdWxkIGJlIGJsYW5rXG4gICAgICBpZiAodGhpcy5pc0VuY29kaW5nRW5hYmxlZF8oRW5jb2RpbmdUeXBlLkFfQU5EX0IpKSB7XG4gICAgICAgIGxpdmVGaWVsZHMucHVzaCh7XG4gICAgICAgICAgaW5wdXRFbGVtZW50OiB0aGlzLnVpX1tFbmNvZGluZ1R5cGUuQV9BTkRfQl1bZmllbGROYW1lXSxcbiAgICAgICAgICBuZXdWYWx1ZTogJydcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmlzRW5jb2RpbmdFbmFibGVkXyhFbmNvZGluZ1R5cGUuQklOQVJZKSkge1xuICAgICAgICBsaXZlRmllbGRzLnB1c2goe1xuICAgICAgICAgIGlucHV0RWxlbWVudDogdGhpcy51aV9bRW5jb2RpbmdUeXBlLkJJTkFSWV1bZmllbGROYW1lXSxcbiAgICAgICAgICBuZXdWYWx1ZTogJydcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmlzRW5jb2RpbmdFbmFibGVkXyhFbmNvZGluZ1R5cGUuSEVYQURFQ0lNQUwpKSB7XG4gICAgICAgIGxpdmVGaWVsZHMucHVzaCh7XG4gICAgICAgICAgaW5wdXRFbGVtZW50OiB0aGlzLnVpX1tFbmNvZGluZ1R5cGUuSEVYQURFQ0lNQUxdW2ZpZWxkTmFtZV0sXG4gICAgICAgICAgbmV3VmFsdWU6ICcnXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pc0VuY29kaW5nRW5hYmxlZF8oRW5jb2RpbmdUeXBlLkRFQ0lNQUwpKSB7XG4gICAgICAgIGxpdmVGaWVsZHMucHVzaCh7XG4gICAgICAgICAgaW5wdXRFbGVtZW50OiB0aGlzLnVpX1tFbmNvZGluZ1R5cGUuREVDSU1BTF1bZmllbGROYW1lXSxcbiAgICAgICAgICBuZXdWYWx1ZTogJydcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmlzRW5jb2RpbmdFbmFibGVkXyhFbmNvZGluZ1R5cGUuQVNDSUkpKSB7XG4gICAgICAgIGxpdmVGaWVsZHMucHVzaCh7XG4gICAgICAgICAgaW5wdXRFbGVtZW50OiB0aGlzLnVpX1tFbmNvZGluZ1R5cGUuQVNDSUldW2ZpZWxkTmFtZV0sXG4gICAgICAgICAgbmV3VmFsdWU6ICcnXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkdmFuY2UgdG8gdGhlIG5leHQgZmllbGRcbiAgICBmaWVsZFN0YXJ0ICs9IGZpZWxkV2lkdGg7XG4gIH0sIHRoaXMpO1xuXG4gIHZhciBib2R5QmluYXJ5ID0gdGhpcy5vcmlnaW5hbEJpbmFyeV8uc3Vic3RyKGZpZWxkU3RhcnQpO1xuICB2YXIgdHJ1bmNhdGVkQml0cyA9IE1hdGgubWF4KDAsIHRoaXMuc2VuZEFuaW1hdGlvbkluZGV4XyAtIGZpZWxkU3RhcnQpO1xuICB2YXIgdHJ1bmNhdGVkQ2h1bmtzID0gTWF0aC5mbG9vcih0cnVuY2F0ZWRCaXRzIC8gY2h1bmtTaXplKTtcbiAgdmFyIHBhcnRpYWxCaW5hcnlBdENodW5rU2l6ZSA9IGJvZHlCaW5hcnkuc3Vic3RyKHRydW5jYXRlZENodW5rcyAqIGNodW5rU2l6ZSk7XG5cbiAgaWYgKHRoaXMuaXNFbmNvZGluZ0VuYWJsZWRfKEVuY29kaW5nVHlwZS5BX0FORF9CKSkge1xuICAgIGxpdmVGaWVsZHMucHVzaCh7XG4gICAgICBpbnB1dEVsZW1lbnQ6IHRoaXMudWlfW0VuY29kaW5nVHlwZS5BX0FORF9CXS5tZXNzYWdlLFxuICAgICAgbmV3VmFsdWU6IGZvcm1hdEFCKGJpbmFyeVRvQUIoYm9keUJpbmFyeSkuc3Vic3RyKHRydW5jYXRlZEJpdHMpLFxuICAgICAgICAgIGNodW5rU2l6ZSwgLXRydW5jYXRlZEJpdHMpLFxuICAgICAgd2F0ZXJtYXJrOiBuZXRzaW1Nc2cuYV9hbmRfYigpXG4gICAgfSk7XG4gIH1cblxuICBpZiAodGhpcy5pc0VuY29kaW5nRW5hYmxlZF8oRW5jb2RpbmdUeXBlLkJJTkFSWSkpIHtcbiAgICBsaXZlRmllbGRzLnB1c2goe1xuICAgICAgaW5wdXRFbGVtZW50OiB0aGlzLnVpX1tFbmNvZGluZ1R5cGUuQklOQVJZXS5tZXNzYWdlLFxuICAgICAgbmV3VmFsdWU6IGZvcm1hdEJpbmFyeShib2R5QmluYXJ5LnN1YnN0cih0cnVuY2F0ZWRCaXRzKSwgY2h1bmtTaXplLFxuICAgICAgICAgIC10cnVuY2F0ZWRCaXRzKSxcbiAgICAgIHdhdGVybWFyazogbmV0c2ltTXNnLmJpbmFyeSgpXG4gICAgfSk7XG4gIH1cblxuICBpZiAodGhpcy5pc0VuY29kaW5nRW5hYmxlZF8oRW5jb2RpbmdUeXBlLkhFWEFERUNJTUFMKSkge1xuICAgIHZhciB0cnVuY2F0ZWRIZXhEaWdpdHMgPSBNYXRoLmZsb29yKHRydW5jYXRlZEJpdHMgLyA0KTtcbiAgICBsaXZlRmllbGRzLnB1c2goe1xuICAgICAgaW5wdXRFbGVtZW50OiB0aGlzLnVpX1tFbmNvZGluZ1R5cGUuSEVYQURFQ0lNQUxdLm1lc3NhZ2UsXG4gICAgICBuZXdWYWx1ZTogZm9ybWF0SGV4KGJpbmFyeVRvSGV4KGJvZHlCaW5hcnkpLnN1YnN0cih0cnVuY2F0ZWRIZXhEaWdpdHMpLFxuICAgICAgICAgIGNodW5rU2l6ZSwgLXRydW5jYXRlZEhleERpZ2l0cyksXG4gICAgICB3YXRlcm1hcms6IG5ldHNpbU1zZy5oZXhhZGVjaW1hbCgpXG4gICAgfSk7XG4gIH1cblxuICBpZiAodGhpcy5pc0VuY29kaW5nRW5hYmxlZF8oRW5jb2RpbmdUeXBlLkRFQ0lNQUwpKSB7XG4gICAgbGl2ZUZpZWxkcy5wdXNoKHtcbiAgICAgIGlucHV0RWxlbWVudDogdGhpcy51aV9bRW5jb2RpbmdUeXBlLkRFQ0lNQUxdLm1lc3NhZ2UsXG4gICAgICBuZXdWYWx1ZTogYWxpZ25EZWNpbWFsKGJpbmFyeVRvRGVjaW1hbChwYXJ0aWFsQmluYXJ5QXRDaHVua1NpemUsIGNodW5rU2l6ZSkpLFxuICAgICAgd2F0ZXJtYXJrOiBuZXRzaW1Nc2cuZGVjaW1hbCgpXG4gICAgfSk7XG4gIH1cblxuICBpZiAodGhpcy5pc0VuY29kaW5nRW5hYmxlZF8oRW5jb2RpbmdUeXBlLkFTQ0lJKSkge1xuICAgIGxpdmVGaWVsZHMucHVzaCh7XG4gICAgICBpbnB1dEVsZW1lbnQ6IHRoaXMudWlfW0VuY29kaW5nVHlwZS5BU0NJSV0ubWVzc2FnZSxcbiAgICAgIG5ld1ZhbHVlOiBiaW5hcnlUb0FzY2lpKHBhcnRpYWxCaW5hcnlBdENodW5rU2l6ZSwgY2h1bmtTaXplKSxcbiAgICAgIHdhdGVybWFyazogbmV0c2ltTXNnLmFzY2lpKClcbiAgICB9KTtcbiAgfVxuXG4gIGxpdmVGaWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICBpZiAoZmllbGQud2F0ZXJtYXJrICYmIGZpZWxkLm5ld1ZhbHVlID09PSAnJykge1xuICAgICAgZmllbGQuaW5wdXRFbGVtZW50LnZhbChmaWVsZC53YXRlcm1hcmspO1xuICAgICAgZmllbGQuaW5wdXRFbGVtZW50LmFkZENsYXNzKCd3YXRlcm1hcmsnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZmllbGQuaW5wdXRFbGVtZW50LnZhbChmaWVsZC5uZXdWYWx1ZSk7XG4gICAgICBmaWVsZC5pbnB1dEVsZW1lbnQucmVtb3ZlQ2xhc3MoJ3dhdGVybWFyaycpO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIFVwZGF0ZSBzZW5kIHdpZGdldCBkaXNwbGF5XG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBbc2tpcEVsZW1lbnRdIC0gQSBmaWVsZCB0byBza2lwIHdoaWxlIHVwZGF0aW5nLFxuICogICAgICAgIGJlY2F1c2Ugd2UgZG9uJ3Qgd2FudCB0byB0cmFuc2Zvcm0gY29udGVudCBvdXQgZnJvbSB1bmRlciB0aGVcbiAqICAgICAgICB1c2VyJ3MgY3Vyc29yLlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUGFja2V0RWRpdG9yLnByb3RvdHlwZS51cGRhdGVGaWVsZHNfID0gZnVuY3Rpb24gKHNraXBFbGVtZW50KSB7XG4gIHZhciBjaHVua1NpemUgPSB0aGlzLmN1cnJlbnRDaHVua1NpemVfO1xuICB2YXIgbGl2ZUZpZWxkcyA9IFtdO1xuXG4gIHZhciBsZXZlbCA9IE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKTtcbiAgdmFyIGVuY29kZXIgPSBuZXcgUGFja2V0LkVuY29kZXIobGV2ZWwuYWRkcmVzc0Zvcm1hdCxcbiAgICAgIGxldmVsLnBhY2tldENvdW50Qml0V2lkdGgsIHRoaXMucGFja2V0U3BlY18pO1xuXG4gIHRoaXMucGFja2V0U3BlY18uZm9yRWFjaChmdW5jdGlvbiAoZmllbGRTcGVjKSB7XG4gICAgLyoqIEB0eXBlIHtQYWNrZXQuSGVhZGVyVHlwZX0gKi9cbiAgICB2YXIgZmllbGROYW1lID0gZmllbGRTcGVjO1xuICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICAgIHZhciBmaWVsZFdpZHRoID0gZW5jb2Rlci5nZXRGaWVsZEJpdFdpZHRoKGZpZWxkTmFtZSk7XG5cbiAgICB2YXIgYWJDb252ZXJ0ZXIsIGJpbmFyeUNvbnZlcnRlciwgaGV4Q29udmVydGVyLCBkZWNpbWFsQ29udmVydGVyLCBhc2NpaUNvbnZlcnRlcjtcbiAgICBpZiAoUGFja2V0LmlzQWRkcmVzc0ZpZWxkKGZpZWxkTmFtZSkpIHtcbiAgICAgIGFiQ29udmVydGVyID0gZnVuY3Rpb24gKGFkZHJlc3NTdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIERhdGFDb252ZXJ0ZXJzLmJpbmFyeVRvQUIoXG4gICAgICAgICAgICBEYXRhQ29udmVydGVycy5hZGRyZXNzU3RyaW5nVG9CaW5hcnkoXG4gICAgICAgICAgICAgICAgYWRkcmVzc1N0cmluZywgbGV2ZWwuYWRkcmVzc0Zvcm1hdCkpO1xuICAgICAgfTtcbiAgICAgIGJpbmFyeUNvbnZlcnRlciA9IGZ1bmN0aW9uIChhZGRyZXNzU3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBEYXRhQ29udmVydGVycy5mb3JtYXRCaW5hcnlGb3JBZGRyZXNzSGVhZGVyKFxuICAgICAgICAgICAgRGF0YUNvbnZlcnRlcnMuYWRkcmVzc1N0cmluZ1RvQmluYXJ5KFxuICAgICAgICAgICAgICAgIGFkZHJlc3NTdHJpbmcsXG4gICAgICAgICAgICAgICAgbGV2ZWwuYWRkcmVzc0Zvcm1hdCksXG4gICAgICAgICAgICBsZXZlbC5hZGRyZXNzRm9ybWF0KTtcbiAgICAgIH07XG4gICAgICBoZXhDb252ZXJ0ZXIgPSBmdW5jdGlvbiAoYWRkcmVzc1N0cmluZykge1xuICAgICAgICByZXR1cm4gRGF0YUNvbnZlcnRlcnMuYmluYXJ5VG9IZXgoXG4gICAgICAgICAgICBEYXRhQ29udmVydGVycy5hZGRyZXNzU3RyaW5nVG9CaW5hcnkoXG4gICAgICAgICAgICAgICAgYWRkcmVzc1N0cmluZywgbGV2ZWwuYWRkcmVzc0Zvcm1hdCkpO1xuICAgICAgfTtcbiAgICAgIGRlY2ltYWxDb252ZXJ0ZXIgPSBjbGVhbkFkZHJlc3NTdHJpbmc7XG4gICAgICBhc2NpaUNvbnZlcnRlciA9IGNsZWFuQWRkcmVzc1N0cmluZztcbiAgICB9IGVsc2Uge1xuICAgICAgYWJDb252ZXJ0ZXIgPSBpbnRUb0FCO1xuICAgICAgYmluYXJ5Q29udmVydGVyID0gaW50VG9CaW5hcnk7XG4gICAgICBoZXhDb252ZXJ0ZXIgPSBpbnRUb0hleDtcbiAgICAgIGRlY2ltYWxDb252ZXJ0ZXIgPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIHJldHVybiB2YWwudG9TdHJpbmcoMTApO1xuICAgICAgfTtcbiAgICAgIGFzY2lpQ29udmVydGVyID0gZGVjaW1hbENvbnZlcnRlcjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc0VuY29kaW5nRW5hYmxlZF8oRW5jb2RpbmdUeXBlLkFfQU5EX0IpKSB7XG4gICAgICBsaXZlRmllbGRzLnB1c2goe1xuICAgICAgICBpbnB1dEVsZW1lbnQ6IHRoaXMudWlfW0VuY29kaW5nVHlwZS5BX0FORF9CXVtmaWVsZE5hbWVdLFxuICAgICAgICBuZXdWYWx1ZTogYWJDb252ZXJ0ZXIodGhpc1tmaWVsZE5hbWVdLCBmaWVsZFdpZHRoKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNFbmNvZGluZ0VuYWJsZWRfKEVuY29kaW5nVHlwZS5CSU5BUlkpKSB7XG4gICAgICBsaXZlRmllbGRzLnB1c2goe1xuICAgICAgICBpbnB1dEVsZW1lbnQ6IHRoaXMudWlfW0VuY29kaW5nVHlwZS5CSU5BUlldW2ZpZWxkTmFtZV0sXG4gICAgICAgIG5ld1ZhbHVlOiBiaW5hcnlDb252ZXJ0ZXIodGhpc1tmaWVsZE5hbWVdLCBmaWVsZFdpZHRoKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNFbmNvZGluZ0VuYWJsZWRfKEVuY29kaW5nVHlwZS5IRVhBREVDSU1BTCkpIHtcbiAgICAgIGxpdmVGaWVsZHMucHVzaCh7XG4gICAgICAgIGlucHV0RWxlbWVudDogdGhpcy51aV9bRW5jb2RpbmdUeXBlLkhFWEFERUNJTUFMXVtmaWVsZE5hbWVdLFxuICAgICAgICBuZXdWYWx1ZTogaGV4Q29udmVydGVyKHRoaXNbZmllbGROYW1lXSwgTWF0aC5jZWlsKGZpZWxkV2lkdGggLyA0KSlcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzRW5jb2RpbmdFbmFibGVkXyhFbmNvZGluZ1R5cGUuREVDSU1BTCkpIHtcbiAgICAgIGxpdmVGaWVsZHMucHVzaCh7XG4gICAgICAgIGlucHV0RWxlbWVudDogdGhpcy51aV9bRW5jb2RpbmdUeXBlLkRFQ0lNQUxdW2ZpZWxkTmFtZV0sXG4gICAgICAgIG5ld1ZhbHVlOiBkZWNpbWFsQ29udmVydGVyKHRoaXNbZmllbGROYW1lXSwgZmllbGRXaWR0aClcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzRW5jb2RpbmdFbmFibGVkXyhFbmNvZGluZ1R5cGUuQVNDSUkpKSB7XG4gICAgICBsaXZlRmllbGRzLnB1c2goe1xuICAgICAgICBpbnB1dEVsZW1lbnQ6IHRoaXMudWlfW0VuY29kaW5nVHlwZS5BU0NJSV1bZmllbGROYW1lXSxcbiAgICAgICAgbmV3VmFsdWU6IGFzY2lpQ29udmVydGVyKHRoaXNbZmllbGROYW1lXSwgZmllbGRXaWR0aClcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgdGhpcyk7XG5cbiAgaWYgKHRoaXMuaXNFbmNvZGluZ0VuYWJsZWRfKEVuY29kaW5nVHlwZS5BX0FORF9CKSkge1xuICAgIGxpdmVGaWVsZHMucHVzaCh7XG4gICAgICBpbnB1dEVsZW1lbnQ6IHRoaXMudWlfW0VuY29kaW5nVHlwZS5BX0FORF9CXS5tZXNzYWdlLFxuICAgICAgbmV3VmFsdWU6IGZvcm1hdEFCKGJpbmFyeVRvQUIodGhpcy5tZXNzYWdlKSwgY2h1bmtTaXplKSxcbiAgICAgIHdhdGVybWFyazogbmV0c2ltTXNnLmFfYW5kX2IoKVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHRoaXMuaXNFbmNvZGluZ0VuYWJsZWRfKEVuY29kaW5nVHlwZS5CSU5BUlkpKSB7XG4gICAgbGl2ZUZpZWxkcy5wdXNoKHtcbiAgICAgIGlucHV0RWxlbWVudDogdGhpcy51aV9bRW5jb2RpbmdUeXBlLkJJTkFSWV0ubWVzc2FnZSxcbiAgICAgIG5ld1ZhbHVlOiBmb3JtYXRCaW5hcnkodGhpcy5tZXNzYWdlLCBjaHVua1NpemUpLFxuICAgICAgd2F0ZXJtYXJrOiBuZXRzaW1Nc2cuYmluYXJ5KClcbiAgICB9KTtcbiAgfVxuXG4gIGlmICh0aGlzLmlzRW5jb2RpbmdFbmFibGVkXyhFbmNvZGluZ1R5cGUuSEVYQURFQ0lNQUwpKSB7XG4gICAgbGl2ZUZpZWxkcy5wdXNoKHtcbiAgICAgIGlucHV0RWxlbWVudDogdGhpcy51aV9bRW5jb2RpbmdUeXBlLkhFWEFERUNJTUFMXS5tZXNzYWdlLFxuICAgICAgbmV3VmFsdWU6IGZvcm1hdEhleChiaW5hcnlUb0hleCh0aGlzLm1lc3NhZ2UpLCBjaHVua1NpemUpLFxuICAgICAgd2F0ZXJtYXJrOiBuZXRzaW1Nc2cuaGV4YWRlY2ltYWwoKVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHRoaXMuaXNFbmNvZGluZ0VuYWJsZWRfKEVuY29kaW5nVHlwZS5ERUNJTUFMKSkge1xuICAgIGxpdmVGaWVsZHMucHVzaCh7XG4gICAgICBpbnB1dEVsZW1lbnQ6IHRoaXMudWlfW0VuY29kaW5nVHlwZS5ERUNJTUFMXS5tZXNzYWdlLFxuICAgICAgbmV3VmFsdWU6IGFsaWduRGVjaW1hbChiaW5hcnlUb0RlY2ltYWwodGhpcy5tZXNzYWdlLCBjaHVua1NpemUpKSxcbiAgICAgIHdhdGVybWFyazogbmV0c2ltTXNnLmRlY2ltYWwoKVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHRoaXMuaXNFbmNvZGluZ0VuYWJsZWRfKEVuY29kaW5nVHlwZS5BU0NJSSkpIHtcbiAgICBsaXZlRmllbGRzLnB1c2goe1xuICAgICAgaW5wdXRFbGVtZW50OiB0aGlzLnVpX1tFbmNvZGluZ1R5cGUuQVNDSUldLm1lc3NhZ2UsXG4gICAgICBuZXdWYWx1ZTogYmluYXJ5VG9Bc2NpaSh0aGlzLm1lc3NhZ2UsIGNodW5rU2l6ZSksXG4gICAgICB3YXRlcm1hcms6IG5ldHNpbU1zZy5hc2NpaSgpXG4gICAgfSk7XG4gIH1cblxuICBsaXZlRmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgaWYgKGZpZWxkLmlucHV0RWxlbWVudFswXSAhPT0gc2tpcEVsZW1lbnQpIHtcbiAgICAgIGlmIChmaWVsZC53YXRlcm1hcmsgJiYgZmllbGQubmV3VmFsdWUgPT09ICcnKSB7XG4gICAgICAgIGZpZWxkLmlucHV0RWxlbWVudC52YWwoZmllbGQud2F0ZXJtYXJrKTtcbiAgICAgICAgZmllbGQuaW5wdXRFbGVtZW50LmFkZENsYXNzKCd3YXRlcm1hcmsnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpZWxkLmlucHV0RWxlbWVudC52YWwoZmllbGQubmV3VmFsdWUpO1xuICAgICAgICBmaWVsZC5pbnB1dEVsZW1lbnQucmVtb3ZlQ2xhc3MoJ3dhdGVybWFyaycpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgdGhpcy51cGRhdGVCaXRDb3VudGVyKCk7XG4gIHRoaXMuY29udGVudENoYW5nZUNhbGxiYWNrXygpO1xufTtcblxuLyoqXG4gKiBJZiB0aGVyZSdzIG9ubHkgb25lIHBhY2tldCwgYXBwbGllcyBcImRpc3BsYXk6IG5vbmVcIiB0byB0aGUgYnV0dG9uIHNvIHRoZVxuICogbGFzdCBwYWNrZXQgY2FuJ3QgYmUgcmVtb3ZlZC4gIE90aGVyd2lzZSwgY2xlYXJzIHRoZSBDU1MgcHJvcGVydHkgb3ZlcnJpZGUuXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1QYWNrZXRFZGl0b3IucHJvdG90eXBlLnVwZGF0ZVJlbW92ZUJ1dHRvblZpc2liaWxpdHlfID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnJlbW92ZVBhY2tldEJ1dHRvbl8uY3NzKCdkaXNwbGF5JywgKHRoaXMucGFja2V0Q291bnQgPT09IDEgPyAnbm9uZScgOiAnJykpO1xufTtcblxuLyoqXG4gKiBQcm9kdWNlcyBhIHNpbmdsZSBiaW5hcnkgc3RyaW5nIGluIHRoZSBjdXJyZW50IHBhY2tldCBmb3JtYXQsIGJhc2VkXG4gKiBvbiB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgd2lkZ2V0IChjb250ZW50IG9mIGl0cyBpbnRlcm5hbCBmaWVsZHMpLlxuICogQHJldHVybnMge3N0cmluZ30gLSBiaW5hcnkgcmVwcmVzZW50YXRpb24gb2YgcGFja2V0XG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1QYWNrZXRFZGl0b3IucHJvdG90eXBlLmdldFBhY2tldEJpbmFyeSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGxldmVsID0gTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpO1xuICB2YXIgZW5jb2RlciA9IG5ldyBQYWNrZXQuRW5jb2RlcihsZXZlbC5hZGRyZXNzRm9ybWF0LFxuICAgICAgbGV2ZWwucGFja2V0Q291bnRCaXRXaWR0aCwgdGhpcy5wYWNrZXRTcGVjXyk7XG4gIHJldHVybiBlbmNvZGVyLmNvbmNhdGVuYXRlQmluYXJ5KFxuICAgICAgZW5jb2Rlci5tYWtlQmluYXJ5SGVhZGVycyh7XG4gICAgICAgIHRvQWRkcmVzczogdGhpcy50b0FkZHJlc3MsXG4gICAgICAgIGZyb21BZGRyZXNzOiB0aGlzLmZyb21BZGRyZXNzLFxuICAgICAgICBwYWNrZXRJbmRleDogdGhpcy5wYWNrZXRJbmRleCxcbiAgICAgICAgcGFja2V0Q291bnQ6IHRoaXMucGFja2V0Q291bnRcbiAgICAgIH0pLFxuICAgICAgdGhpcy5tZXNzYWdlKTtcbn07XG5cbi8qKlxuICogU2V0cyBlZGl0b3IgZmllbGRzIGZyb20gYSBjb21wbGV0ZSBwYWNrZXQgYmluYXJ5LCBhY2NvcmRpbmcgdG9cbiAqIHRoZSBjb25maWd1cmVkIGhlYWRlciBzcGVjaWZpY2F0aW9uLlxuICogQHBhcmFtIHtzdHJpbmd9IHJhd0JpbmFyeVxuICovXG5OZXRTaW1QYWNrZXRFZGl0b3IucHJvdG90eXBlLnNldFBhY2tldEJpbmFyeSA9IGZ1bmN0aW9uIChyYXdCaW5hcnkpIHtcbiAgdmFyIHBhY2tldCA9IG5ldyBQYWNrZXQodGhpcy5wYWNrZXRTcGVjXywgcmF3QmluYXJ5KTtcblxuICBpZiAodGhpcy5zcGVjQ29udGFpbnNIZWFkZXJfKFBhY2tldC5IZWFkZXJUeXBlLlRPX0FERFJFU1MpKSB7XG4gICAgdGhpcy50b0FkZHJlc3MgPSBwYWNrZXQuZ2V0SGVhZGVyQXNBZGRyZXNzU3RyaW5nKFBhY2tldC5IZWFkZXJUeXBlLlRPX0FERFJFU1MpO1xuICB9XG5cbiAgaWYgKHRoaXMuc3BlY0NvbnRhaW5zSGVhZGVyXyhQYWNrZXQuSGVhZGVyVHlwZS5GUk9NX0FERFJFU1MpKSB7XG4gICAgdGhpcy5mcm9tQWRkcmVzcyA9IHBhY2tldC5nZXRIZWFkZXJBc0FkZHJlc3NTdHJpbmcoUGFja2V0LkhlYWRlclR5cGUuRlJPTV9BRERSRVNTKTtcbiAgfVxuXG4gIGlmICh0aGlzLnNwZWNDb250YWluc0hlYWRlcl8oUGFja2V0LkhlYWRlclR5cGUuUEFDS0VUX0lOREVYKSkge1xuICAgIHRoaXMucGFja2V0SW5kZXggPSBwYWNrZXQuZ2V0SGVhZGVyQXNJbnQoUGFja2V0LkhlYWRlclR5cGUuUEFDS0VUX0lOREVYKTtcbiAgfVxuXG4gIGlmICh0aGlzLnNwZWNDb250YWluc0hlYWRlcl8oUGFja2V0LkhlYWRlclR5cGUuUEFDS0VUX0NPVU5UKSkge1xuICAgIHRoaXMucGFja2V0Q291bnQgPSBwYWNrZXQuZ2V0SGVhZGVyQXNJbnQoUGFja2V0LkhlYWRlclR5cGUuUEFDS0VUX0NPVU5UKTtcbiAgfVxuXG4gIHRoaXMubWVzc2FnZSA9IHBhY2tldC5nZXRCb2R5QXNCaW5hcnkoKTtcblxuICAvLyBSZS1yZW5kZXIgYWxsIGVuY29kaW5nc1xuICB0aGlzLnVwZGF0ZUZpZWxkc18oKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtQYWNrZXQuSGVhZGVyVHlwZX0gaGVhZGVyS2V5XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVBhY2tldEVkaXRvci5wcm90b3R5cGUuc3BlY0NvbnRhaW5zSGVhZGVyXyA9IGZ1bmN0aW9uIChoZWFkZXJLZXkpIHtcbiAgcmV0dXJuIHRoaXMucGFja2V0U3BlY18uc29tZShmdW5jdGlvbiAoaGVhZGVyU3BlYykge1xuICAgIHJldHVybiBoZWFkZXJTcGVjID09PSBoZWFkZXJLZXk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBHZXQganVzdCB0aGUgZmlyc3QgYml0IG9mIHRoZSBwYWNrZXQgYmluYXJ5IGlmIGl0IGV4aXN0cywgZm9yXG4gKiBzaW5nbGUtYml0IHNlbmRpbmcgbW9kZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBhIHNpbmdsZSBiaXQgaWYgaXQgZXhpc3RzLCBhcyBcIjBcIiBvciBcIjFcIixcbiAqIG9yIHVuZGVmaW5lZCBpZiBub25lIGRvZXMuXG4gKi9cbk5ldFNpbVBhY2tldEVkaXRvci5wcm90b3R5cGUuZ2V0Rmlyc3RCaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBiaW5hcnkgPSB0aGlzLmdldFBhY2tldEJpbmFyeSgpO1xuICByZXR1cm4gYmluYXJ5Lmxlbmd0aCA+IDAgPyBiaW5hcnkuc3Vic3RyKDAsIDEpIDogdW5kZWZpbmVkO1xufTtcblxuLyoqIEBwYXJhbSB7bnVtYmVyfSBmcm9tQWRkcmVzcyAqL1xuTmV0U2ltUGFja2V0RWRpdG9yLnByb3RvdHlwZS5zZXRGcm9tQWRkcmVzcyA9IGZ1bmN0aW9uIChmcm9tQWRkcmVzcykge1xuICB0aGlzLmZyb21BZGRyZXNzID0gZnJvbUFkZHJlc3M7XG4gIHRoaXMudXBkYXRlRmllbGRzXygpO1xufTtcblxuLyoqIEBwYXJhbSB7bnVtYmVyfSBwYWNrZXRJbmRleCAqL1xuTmV0U2ltUGFja2V0RWRpdG9yLnByb3RvdHlwZS5zZXRQYWNrZXRJbmRleCA9IGZ1bmN0aW9uIChwYWNrZXRJbmRleCkge1xuICB0aGlzLnBhY2tldEluZGV4ID0gcGFja2V0SW5kZXg7XG4gIHRoaXMudXBkYXRlRmllbGRzXygpO1xufTtcblxuLyoqIEBwYXJhbSB7bnVtYmVyfSBwYWNrZXRDb3VudCAqL1xuTmV0U2ltUGFja2V0RWRpdG9yLnByb3RvdHlwZS5zZXRQYWNrZXRDb3VudCA9IGZ1bmN0aW9uIChwYWNrZXRDb3VudCkge1xuICB0aGlzLnBhY2tldENvdW50ID0gcGFja2V0Q291bnQ7XG4gIHRoaXMudXBkYXRlRmllbGRzXygpO1xuICB0aGlzLnVwZGF0ZVJlbW92ZUJ1dHRvblZpc2liaWxpdHlfKCk7XG59O1xuXG4vKiogQHBhcmFtIHtudW1iZXJ9IG1heFBhY2tldFNpemUgKi9cbk5ldFNpbVBhY2tldEVkaXRvci5wcm90b3R5cGUuc2V0TWF4UGFja2V0U2l6ZSA9IGZ1bmN0aW9uIChtYXhQYWNrZXRTaXplKSB7XG4gIHRoaXMubWF4UGFja2V0U2l6ZV8gPSBtYXhQYWNrZXRTaXplO1xuICB0aGlzLnVwZGF0ZUJpdENvdW50ZXIoKTtcbn07XG5cbi8qKlxuICogU2hvdyBvciBoaWRlIHBhcnRzIG9mIHRoZSBzZW5kIFVJIGJhc2VkIG9uIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgZW5jb2RpbmdcbiAqIG1vZGUuXG4gKiBAcGFyYW0ge0VuY29kaW5nVHlwZVtdfSBuZXdFbmNvZGluZ3NcbiAqL1xuTmV0U2ltUGFja2V0RWRpdG9yLnByb3RvdHlwZS5zZXRFbmNvZGluZ3MgPSBmdW5jdGlvbiAobmV3RW5jb2RpbmdzKSB7XG4gIHRoaXMuZW5hYmxlZEVuY29kaW5nc0hhc2hfID0gTmV0U2ltRW5jb2RpbmdDb250cm9sLmVuY29kaW5nc0FzSGFzaChuZXdFbmNvZGluZ3MpO1xuICBOZXRTaW1FbmNvZGluZ0NvbnRyb2wuaGlkZVJvd3NCeUVuY29kaW5nKHRoaXMucm9vdERpdl8sIG5ld0VuY29kaW5ncyk7XG4gIHRoaXMucmVuZGVyKCk7XG59O1xuXG4vKipcbiAqIEhlbHBlciBtZXRob2QgdGhhdCBjaGVja3MgdGhpcy5lbmFibGVkRW5jb2RpbmdzSGFzaF8gdG8gc2VlIGlmIHRoZSBnaXZlblxuICogZW5jb2RpbmcgaXMgZW5hYmxlZFxuICogQHBhcmFtIHtFbmNvZGluZ1R5cGV9IHF1ZXJ5RW5jb2RpbmdcbiAqIEByZXR1cm5zIHtib29sZWFufSB3aGV0aGVyIG9yIG5vdCB0aGUgZ2l2ZW4gZW5jb2RpbmcgaXMgZW5hYmxlZFxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUGFja2V0RWRpdG9yLnByb3RvdHlwZS5pc0VuY29kaW5nRW5hYmxlZF8gPSBmdW5jdGlvbiAocXVlcnlFbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5lbmFibGVkRW5jb2RpbmdzSGFzaF9bcXVlcnlFbmNvZGluZ10gPT09IHRydWU7XG59O1xuXG4vKipcbiAqIENoYW5nZSBob3cgZGF0YSBpcyBpbnRlcnByZXRlZCBhbmQgZm9ybWF0dGVkIGJ5IHRoaXMgY29tcG9uZW50LCB0cmlnZ2VyaW5nXG4gKiBhbiB1cGRhdGUgb2YgYWxsIGlucHV0IGZpZWxkcy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBuZXdDaHVua1NpemVcbiAqL1xuTmV0U2ltUGFja2V0RWRpdG9yLnByb3RvdHlwZS5zZXRDaHVua1NpemUgPSBmdW5jdGlvbiAobmV3Q2h1bmtTaXplKSB7XG4gIHRoaXMuY3VycmVudENodW5rU2l6ZV8gPSBuZXdDaHVua1NpemU7XG4gIHRoaXMudXBkYXRlRmllbGRzXygpO1xufTtcblxuLyoqXG4gKiBDaGFuZ2UgbG9jYWwgZGV2aWNlIGJpdHJhdGUgd2hpY2ggY2hhbmdlcyBzZW5kIGFuaW1hdGlvbiBzcGVlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBuZXdCaXRSYXRlIGluIGJpdHMgcGVyIHNlY29uZFxuICovXG5OZXRTaW1QYWNrZXRFZGl0b3IucHJvdG90eXBlLnNldEJpdFJhdGUgPSBmdW5jdGlvbiAobmV3Qml0UmF0ZSkge1xuICB0aGlzLmJpdFJhdGVfID0gbmV3Qml0UmF0ZTtcbn07XG5cbi8qKlxuICogVXBkYXRlIHRoZSB2aXN1YWwgc3RhdGUgb2YgdGhlIGJpdCBjb3VudGVyIHRvIHJlZmxlY3QgdGhlIGN1cnJlbnRcbiAqIG1lc3NhZ2UgYmluYXJ5IGxlbmd0aCBhbmQgbWF4aW11bSBwYWNrZXQgc2l6ZS5cbiAqL1xuTmV0U2ltUGFja2V0RWRpdG9yLnByb3RvdHlwZS51cGRhdGVCaXRDb3VudGVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2l6ZSA9IHRoaXMuZ2V0UGFja2V0QmluYXJ5KCkubGVuZ3RoO1xuICB2YXIgbWF4U2l6ZSA9IHRoaXMubWF4UGFja2V0U2l6ZV87XG4gIHRoaXMuYml0Q291bnRlcl8uaHRtbChuZXRzaW1Nc2cuYml0Q291bnRlcih7XG4gICAgeDogc2l6ZSxcbiAgICB5OiBtYXhTaXplXG4gIH0pKTtcblxuICB0aGlzLmJpdENvdW50ZXJfLnRvZ2dsZUNsYXNzKCdvdmVyc2l6ZWQnLCBzaXplID4gdGhpcy5tYXhQYWNrZXRTaXplXyk7XG59O1xuXG4vKipcbiAqIEhhbmRsZXIgZm9yIHRoZSBcIlJlbW92ZSBQYWNrZXRcIiBidXR0b24uIENhbGxzIGhhbmRsZXIgcHJvdmlkZWQgYnlcbiAqIHBhcmVudCwgcGFzc2luZyBzZWxmLCBzbyB0aGF0IHBhcmVudCBjYW4gcmVtb3ZlIHRoaXMgcGFja2V0LlxuICogQHBhcmFtIHtFdmVudH0galF1ZXJ5RXZlbnRcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVBhY2tldEVkaXRvci5wcm90b3R5cGUub25SZW1vdmVQYWNrZXRCdXR0b25DbGlja18gPSBmdW5jdGlvbiAoalF1ZXJ5RXZlbnQpIHtcbiAgdmFyIHRoaXNCdXR0b24gPSAkKGpRdWVyeUV2ZW50LnRhcmdldCk7XG4gIC8vIFdlIGFsc28gY2hlY2sgcGFyZW50IGVsZW1lbnRzIGhlcmUsIGJlY2F1c2UgdGhpcyBidXR0b24gdXNlcyBhIGZvbnQtYXdlc29tZVxuICAvLyBnbHlwaCB0aGF0IGNhbiByZWNlaXZlIHRoZSBldmVudCBpbnN0ZWFkIG9mIHRoZSBhY3R1YWwgYnV0dG9uLlxuICBpZiAodGhpc0J1dHRvbi5pcygnW2Rpc2FibGVkXScpIHx8IHRoaXNCdXR0b24ucGFyZW50cygpLmlzKCdbZGlzYWJsZWRdJykpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLnJlbW92ZVBhY2tldENhbGxiYWNrXyh0aGlzKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBmaXJzdCBiaXQgb2YgdGhlIHBhY2tldCBiaW5hcnksIHVzZWQgd2hlbiBzZW5kaW5nIG9uZSBiaXRcbiAqIGF0IGEgdGltZS5cbiAqL1xuTmV0U2ltUGFja2V0RWRpdG9yLnByb3RvdHlwZS5jb25zdW1lRmlyc3RCaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2V0UGFja2V0QmluYXJ5KHRoaXMuZ2V0UGFja2V0QmluYXJ5KCkuc3Vic3RyKDEpKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cz0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdCA9IGZ1bmN0aW9uIGFub255bW91cyhsb2NhbHMsIGZpbHRlcnMsIGVzY2FwZVxuLyoqLykge1xuZXNjYXBlID0gZXNjYXBlIHx8IGZ1bmN0aW9uIChodG1sKXtcbiAgcmV0dXJuIFN0cmluZyhodG1sKVxuICAgIC5yZXBsYWNlKC8mKD8hXFx3KzspL2csICcmYW1wOycpXG4gICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xufTtcbnZhciBidWYgPSBbXTtcbndpdGggKGxvY2FscyB8fCB7fSkgeyAoZnVuY3Rpb24oKXsgXG4gYnVmLnB1c2goJycpOzE7XG4gIHZhciBpMThuID0gcmVxdWlyZSgnLi9sb2NhbGUnKTtcbiAgdmFyIE5ldFNpbUNvbnN0YW50cyA9IHJlcXVpcmUoJy4vTmV0U2ltQ29uc3RhbnRzJyk7XG4gIHZhciBOZXRTaW1VdGlscyA9IHJlcXVpcmUoJy4vTmV0U2ltVXRpbHMnKTtcbiAgdmFyIFBhY2tldCA9IHJlcXVpcmUoJy4vUGFja2V0Jyk7XG5cbiAgdmFyIEVuY29kaW5nVHlwZSA9IE5ldFNpbUNvbnN0YW50cy5FbmNvZGluZ1R5cGU7XG4gIHZhciBNZXNzYWdlR3JhbnVsYXJpdHkgPSBOZXRTaW1Db25zdGFudHMuTWVzc2FnZUdyYW51bGFyaXR5O1xuICB2YXIgUGFja2V0VUlDb2x1bW5UeXBlID0gTmV0U2ltQ29uc3RhbnRzLlBhY2tldFVJQ29sdW1uVHlwZTtcblxuICB2YXIgZ2V0RW5jb2RpbmdMYWJlbCA9IE5ldFNpbVV0aWxzLmdldEVuY29kaW5nTGFiZWw7XG4gIHZhciBmb3JFYWNoRW51bVZhbHVlID0gTmV0U2ltVXRpbHMuZm9yRWFjaEVudW1WYWx1ZTtcblxuICAvKipcbiAgKiBAbmFtZSBlbmFibGVkRW5jb2RpbmdzSGFzaFxuICAqIEB0eXBlIHtPYmplY3R9XG4gICovXG5cbiAgZnVuY3Rpb24gaXNFbmNvZGluZ0VuYWJsZWQocXVlcnlFbmNvZGluZykge1xuICAgIHJldHVybiBlbmFibGVkRW5jb2RpbmdzSGFzaFtxdWVyeUVuY29kaW5nXSA9PT0gdHJ1ZTtcbiAgfVxuXG4gIC8qKiBAdHlwZSB7UGFja2V0LkhlYWRlclR5cGVbXX0gKi9cbiAgdmFyIGhlYWRlckZpZWxkcyA9IHBhY2tldFNwZWM7XG5cbiAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICB2YXIgc2hvd1RvQWRkcmVzcyA9IGhlYWRlckZpZWxkcy5pbmRleE9mKFBhY2tldC5IZWFkZXJUeXBlLlRPX0FERFJFU1MpID4gLTE7XG5cbiAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICB2YXIgc2hvd0Zyb21BZGRyZXNzID0gaGVhZGVyRmllbGRzLmluZGV4T2YoUGFja2V0LkhlYWRlclR5cGUuRlJPTV9BRERSRVNTKSA+IC0xO1xuXG4gIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbiAgdmFyIHNob3dQYWNrZXRJbmZvID0gaGVhZGVyRmllbGRzLmluZGV4T2YoUGFja2V0LkhlYWRlclR5cGUuUEFDS0VUX0lOREVYKSA+IC0xICYmXG4gICAgICBoZWFkZXJGaWVsZHMuaW5kZXhPZihQYWNrZXQuSGVhZGVyVHlwZS5QQUNLRVRfQ09VTlQpID4gLTE7XG5cbiAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICB2YXIgdXNlUGFja2V0R3JhbnVsYXJpdHkgPSAobWVzc2FnZUdyYW51bGFyaXR5ID09PSBNZXNzYWdlR3JhbnVsYXJpdHkuUEFDS0VUUyk7XG5cbiAgLyoqXG4gICAqIFdyaXRlIHRoZSB0YWJsZSBoZWFkZXIgdG8gdGhlIHBhZ2UsIHdpdGggdGhlIGFwcHJvcHJpYXRlIHBhY2tldC1oZWFkZXIgY29sdW1ucyBlbmFibGVkLlxuICAgKi9cbiAgZnVuY3Rpb24gdGFibGVIZWFkZXIoKSB7XG4gICAgOyBidWYucHVzaCgnXFxuICAgICAgPHRoZWFkPlxcbiAgICAgICAgPHRyPlxcbiAgICAgICAgICA8dGggbm93cmFwIGNsYXNzPVwiJywgZXNjYXBlKCg0NiwgIFBhY2tldFVJQ29sdW1uVHlwZS5FTkNPRElOR19MQUJFTCApKSwgJ1wiPjwvdGg+XFxuICAgICAgICAgICcpOzQ3OyBpZiAoc2hvd1RvQWRkcmVzcykgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgICAgPHRoIG5vd3JhcCBjbGFzcz1cIicsIGVzY2FwZSgoNDgsICBQYWNrZXRVSUNvbHVtblR5cGUuVE9fQUREUkVTUyApKSwgJ1wiPicsIGVzY2FwZSgoNDgsICBpMThuLnRvKCkgKSksICc8L3RoPlxcbiAgICAgICAgICAnKTs0OTsgfSA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgICAgJyk7NTA7IGlmIChzaG93RnJvbUFkZHJlc3MpIHsgOyBidWYucHVzaCgnXFxuICAgICAgICAgIDx0aCBub3dyYXAgY2xhc3M9XCInLCBlc2NhcGUoKDUxLCAgUGFja2V0VUlDb2x1bW5UeXBlLkZST01fQUREUkVTUyApKSwgJ1wiPicsIGVzY2FwZSgoNTEsICBpMThuLmZyb20oKSApKSwgJzwvdGg+XFxuICAgICAgICAgICcpOzUyOyB9IDsgYnVmLnB1c2goJ1xcbiAgICAgICAgICAnKTs1MzsgaWYgKHNob3dQYWNrZXRJbmZvKSB7IDsgYnVmLnB1c2goJ1xcbiAgICAgICAgICA8dGggbm93cmFwIGNsYXNzPVwiJywgZXNjYXBlKCg1NCwgIFBhY2tldFVJQ29sdW1uVHlwZS5QQUNLRVRfSU5GTyApKSwgJ1wiPicsIGVzY2FwZSgoNTQsICBpMThuLnBhY2tldCgpICkpLCAnPC90aD5cXG4gICAgICAgICAgJyk7NTU7IH0gOyBidWYucHVzaCgnXFxuICAgICAgICAgIDx0aCBjbGFzcz1cIicsIGVzY2FwZSgoNTYsICBQYWNrZXRVSUNvbHVtblR5cGUuTUVTU0FHRSApKSwgJ1wiPlxcbiAgICAgICAgICAgICcsIGVzY2FwZSgoNTcsICBpMThuLm1lc3NhZ2UoKSApKSwgJ1xcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwYWNrZXQtY29udHJvbHNcIj5cXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibmV0c2ltLWJ1dHRvbiBzZWNvbmRhcnkgcmVtb3ZlLXBhY2tldC1idXR0b25cIiB0aXRsZT1cIicsIGVzY2FwZSgoNTksICBpMThuLnJlbW92ZVBhY2tldCgpICkpLCAnXCI+PGkgY2xhc3M9XCJmYSBmYS10aW1lc1wiPjwvaT48L3NwYW4+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgIDwvdGg+XFxuICAgICAgICA8L3RyPlxcbiAgICAgIDwvdGhlYWQ+XFxuICAgICcpOzY0O1xuICB9XG5cbiAgLyoqXG4gICAqIFdyaXRlIGEgdGFibGUgcm93IHRvIHRoZSBwYWdlIGZvciB0aGUgZ2l2ZW4gZGF0YSBlbmNvZGluZy5cbiAgICogQHBhcmFtIHtFbmNvZGluZ1R5cGV9IGVuY29kaW5nVHlwZVxuICAgKi9cbiAgZnVuY3Rpb24gZWRpdG9yUm93KGVuY29kaW5nVHlwZSkge1xuICAgIDsgYnVmLnB1c2goJ1xcbiAgICAgIDx0ciBjbGFzcz1cIicsIGVzY2FwZSgoNzMsICBlbmNvZGluZ1R5cGUgKSksICdcIj5cXG4gICAgICAgIDx0aCBub3dyYXAgY2xhc3M9XCInLCBlc2NhcGUoKDc0LCAgUGFja2V0VUlDb2x1bW5UeXBlLkVOQ09ESU5HX0xBQkVMICkpLCAnXCI+JywgZXNjYXBlKCg3NCwgIGdldEVuY29kaW5nTGFiZWwoZW5jb2RpbmdUeXBlKSApKSwgJzwvdGg+XFxuICAgICAgICAnKTs3NTsgaWYgKHNob3dUb0FkZHJlc3MpIHsgOyBidWYucHVzaCgnXFxuICAgICAgICA8dGQgbm93cmFwIGNsYXNzPVwiJywgZXNjYXBlKCg3NiwgIFBhY2tldFVJQ29sdW1uVHlwZS5UT19BRERSRVNTICkpLCAnXCI+PGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCInLCBlc2NhcGUoKDc2LCAgUGFja2V0LkhlYWRlclR5cGUuVE9fQUREUkVTUyApKSwgJ1wiIC8+PC90ZD5cXG4gICAgICAgICcpOzc3OyB9IDsgYnVmLnB1c2goJ1xcbiAgICAgICAgJyk7Nzg7IGlmIChzaG93RnJvbUFkZHJlc3MpIHsgOyBidWYucHVzaCgnXFxuICAgICAgICA8dGQgbm93cmFwIGNsYXNzPVwiJywgZXNjYXBlKCg3OSwgIFBhY2tldFVJQ29sdW1uVHlwZS5GUk9NX0FERFJFU1MgKSksICdcIj48aW5wdXQgdHlwZT1cInRleHRcIiByZWFkb25seSBjbGFzcz1cIicsIGVzY2FwZSgoNzksICBQYWNrZXQuSGVhZGVyVHlwZS5GUk9NX0FERFJFU1MgKSksICdcIiAvPjwvdGQ+XFxuICAgICAgICAnKTs4MDsgfSA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgICcpOzgxOyBpZiAoc2hvd1BhY2tldEluZm8pIHsgOyBidWYucHVzaCgnXFxuICAgICAgICA8dGQgbm93cmFwIGNsYXNzPVwiJywgZXNjYXBlKCg4MiwgIFBhY2tldFVJQ29sdW1uVHlwZS5QQUNLRVRfSU5GTyApKSwgJ1wiPjxpbnB1dCB0eXBlPVwidGV4dFwiIHJlYWRvbmx5IGNsYXNzPVwiJywgZXNjYXBlKCg4MiwgIFBhY2tldC5IZWFkZXJUeXBlLlBBQ0tFVF9JTkRFWCApKSwgJ1wiIC8+JywgZXNjYXBlKCg4MiwgIGkxOG4uX29mXygpICkpLCAnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcmVhZG9ubHkgY2xhc3M9XCInLCBlc2NhcGUoKDgyLCAgUGFja2V0LkhlYWRlclR5cGUuUEFDS0VUX0NPVU5UICkpLCAnXCIgLz48L3RkPlxcbiAgICAgICAgJyk7ODM7IH0gOyBidWYucHVzaCgnXFxuICAgICAgICA8dGQgY2xhc3M9XCInLCBlc2NhcGUoKDg0LCAgUGFja2V0VUlDb2x1bW5UeXBlLk1FU1NBR0UgKSksICdcIj48ZGl2Pjx0ZXh0YXJlYSBjbGFzcz1cIm1lc3NhZ2VcIj48L3RleHRhcmVhPjwvZGl2PjwvdGQ+XFxuICAgICAgPC90cj5cXG4gICAgJyk7ODY7XG4gIH1cbjsgYnVmLnB1c2goJ1xcbjx0YWJsZT5cXG4gICcpOzkwO1xuICAgIC8vIE9ubHkgd3JpdGUgdGhlIGhlYWRlciByb3cgaWYgd2UgYXJlIHVzaW5nIHBhY2tldHNcbiAgICBpZiAodXNlUGFja2V0R3JhbnVsYXJpdHkpIHtcbiAgICAgIHRhYmxlSGVhZGVyKCk7XG4gICAgfVxuICA7IGJ1Zi5wdXNoKCdcXG4gIDx0Ym9keT5cXG4gICAgJyk7OTc7XG4gICAgICAvLyBXcml0ZSBhIGJvZHkgcm93IGZvciBldmVyeSBwYWNrZXQgZW5jb2Rpbmc7IHdlIGhpZGUgc29tZSBvZiB0aGVtIHBvc3QtcmVuZGVyLlxuICAgICAgZm9yRWFjaEVudW1WYWx1ZShFbmNvZGluZ1R5cGUsIGZ1bmN0aW9uIChlbmNvZGluZ1R5cGUpIHtcbiAgICAgICAgaWYgKGlzRW5jb2RpbmdFbmFibGVkKGVuY29kaW5nVHlwZSkpIHtcbiAgICAgICAgICBlZGl0b3JSb3coZW5jb2RpbmdUeXBlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgOyBidWYucHVzaCgnXFxuICA8L3Rib2R5PlxcbjwvdGFibGU+XFxuXFxuJyk7MTA4OyBpZiAodXNlUGFja2V0R3JhbnVsYXJpdHkpIHsgOyBidWYucHVzaCgnXFxuICA8ZGl2IGNsYXNzPVwiYml0LWNvdW50ZXJcIj48L2Rpdj5cXG4nKTsxMTA7IH0gOyBidWYucHVzaCgnXFxuJyk7IH0pKCk7XG59IFxucmV0dXJuIGJ1Zi5qb2luKCcnKTtcbn07XG4gIHJldHVybiBmdW5jdGlvbihsb2NhbHMpIHtcbiAgICByZXR1cm4gdChsb2NhbHMsIHJlcXVpcmUoXCJlanNcIikuZmlsdGVycyk7XG4gIH1cbn0oKSk7IiwiLyoqXG4gKiBAb3ZlcnZpZXcgVUkgY29udHJvbGxlciBmb3IgdGhlIFwiTXkgRGV2aWNlXCIgdGFiIGluIHRoZSBsZWZ0IGNvbHVtbi5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBtYXJrdXAgPSByZXF1aXJlKCcuL05ldFNpbU15RGV2aWNlVGFiLmh0bWwuZWpzJyk7XG52YXIgTmV0U2ltQml0UmF0ZUNvbnRyb2wgPSByZXF1aXJlKCcuL05ldFNpbUJpdFJhdGVDb250cm9sJyk7XG52YXIgTmV0U2ltUHVsc2VSYXRlQ29udHJvbCA9IHJlcXVpcmUoJy4vTmV0U2ltUHVsc2VSYXRlQ29udHJvbCcpO1xudmFyIE5ldFNpbUNodW5rU2l6ZUNvbnRyb2wgPSByZXF1aXJlKCcuL05ldFNpbUNodW5rU2l6ZUNvbnRyb2wnKTtcbnZhciBOZXRTaW1FbmNvZGluZ0NvbnRyb2wgPSByZXF1aXJlKCcuL05ldFNpbUVuY29kaW5nQ29udHJvbCcpO1xudmFyIE5ldFNpbU1ldHJvbm9tZSA9IHJlcXVpcmUoJy4vTmV0U2ltTWV0cm9ub21lJyk7XG52YXIgTmV0U2ltR2xvYmFscyA9IHJlcXVpcmUoJy4vTmV0U2ltR2xvYmFscycpO1xuXG4vKipcbiAqIEdlbmVyYXRvciBhbmQgY29udHJvbGxlciBmb3IgXCJNeSBEZXZpY2VcIiB0YWIuXG4gKiBAcGFyYW0ge2pRdWVyeX0gcm9vdERpdlxuICogQHBhcmFtIHtSdW5Mb29wfSBydW5Mb29wXG4gKiBAcGFyYW0ge09iamVjdH0gY2FsbGJhY2tzXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja3MuY2h1bmtTaXplQ2hhbmdlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrcy5iaXRSYXRlQ2hhbmdlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrcy5lbmNvZGluZ0NoYW5nZUNhbGxiYWNrXG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIE5ldFNpbU15RGV2aWNlVGFiID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocm9vdERpdiwgcnVuTG9vcCwgY2FsbGJhY2tzKSB7XG4gIC8qKlxuICAgKiBDb21wb25lbnQgcm9vdCwgd2hpY2ggd2UgZmlsbCB3aGVuZXZlciB3ZSBjYWxsIHJlbmRlcigpXG4gICAqIEB0eXBlIHtqUXVlcnl9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnJvb3REaXZfID0gcm9vdERpdjtcblxuICAvKipcbiAgICogQHR5cGUge1J1bkxvb3B9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnJ1bkxvb3BfID0gcnVuTG9vcDtcblxuICAvKipcbiAgICogRnJlcXVlbmN5IG9mIG1ldHJvbm9tZSBwdWxzZXMsIGluIHB1bHNlcyBwZXIgc2Vjb25kXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmJpdHNQZXJTZWNvbmRfID0gMTtcblxuICAvKipcbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5jaHVua1NpemVTbGlkZXJDaGFuZ2VDYWxsYmFja18gPSBjYWxsYmFja3MuY2h1bmtTaXplQ2hhbmdlQ2FsbGJhY2s7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuYml0UmF0ZUNoYW5nZUNhbGxiYWNrXyA9IGNhbGxiYWNrcy5iaXRSYXRlQ2hhbmdlQ2FsbGJhY2s7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuZW5jb2RpbmdDaGFuZ2VDYWxsYmFja18gPSBjYWxsYmFja3MuZW5jb2RpbmdDaGFuZ2VDYWxsYmFjaztcblxuICAvKipcbiAgICogQHR5cGUge05ldFNpbU1ldHJvbm9tZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubWV0cm9ub21lXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtOZXRTaW1QdWxzZVJhdGVDb250cm9sfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5wdWxzZVJhdGVDb250cm9sXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtOZXRTaW1CaXRSYXRlQ29udHJvbH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuYml0UmF0ZUNvbnRyb2xfID0gbnVsbDtcblxuICAvKipcbiAgICogQHR5cGUge05ldFNpbUNodW5rU2l6ZUNvbnRyb2x9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmNodW5rU2l6ZUNvbnRyb2xfID0gbnVsbDtcblxuICAvKipcbiAgICogQHR5cGUge05ldFNpbUVuY29kaW5nQ29udHJvbH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuZW5jb2RpbmdDb250cm9sXyA9IG51bGw7XG5cbiAgdGhpcy5yZW5kZXIoKTtcbn07XG5cbi8qKlxuICogRmlsbCB0aGUgcm9vdCBkaXYgd2l0aCBuZXcgZWxlbWVudHMgcmVmbGVjdGluZyB0aGUgY3VycmVudCBzdGF0ZVxuICovXG5OZXRTaW1NeURldmljZVRhYi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbGV2ZWxDb25maWcgPSBOZXRTaW1HbG9iYWxzLmdldExldmVsQ29uZmlnKCk7XG5cbiAgdmFyIHJlbmRlcmVkTWFya3VwID0gJChtYXJrdXAoe1xuICAgIGxldmVsOiBsZXZlbENvbmZpZ1xuICB9KSk7XG4gIHRoaXMucm9vdERpdl8uaHRtbChyZW5kZXJlZE1hcmt1cCk7XG5cbiAgaWYgKGxldmVsQ29uZmlnLnNob3dNZXRyb25vbWUpIHtcbiAgICB0aGlzLm1ldHJvbm9tZV8gPSBuZXcgTmV0U2ltTWV0cm9ub21lKFxuICAgICAgICB0aGlzLnJvb3REaXZfLmZpbmQoJy5tZXRyb25vbWUnKSxcbiAgICAgICAgdGhpcy5ydW5Mb29wXyk7XG4gICAgdGhpcy5tZXRyb25vbWVfLnNldEZyZXF1ZW5jeSh0aGlzLmJpdHNQZXJTZWNvbmRfKTtcbiAgfVxuXG4gIGlmIChsZXZlbENvbmZpZy5zaG93UHVsc2VSYXRlU2xpZGVyKSB7XG4gICAgdGhpcy5wdWxzZVJhdGVDb250cm9sXyA9IG5ldyBOZXRTaW1QdWxzZVJhdGVDb250cm9sKFxuICAgICAgICB0aGlzLnJvb3REaXZfLmZpbmQoJy5wdWxzZS1yYXRlJyksXG4gICAgICAgIDEgLyB0aGlzLmJpdHNQZXJTZWNvbmRfLFxuICAgICAgICBmdW5jdGlvbiAoc2Vjb25kc1BlckJpdCkge1xuICAgICAgICAgIHRoaXMuYml0UmF0ZUNoYW5nZUNhbGxiYWNrXygxIC8gc2Vjb25kc1BlckJpdCk7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gIH1cblxuICBpZiAobGV2ZWxDb25maWcuc2hvd0JpdFJhdGVDb250cm9sKSB7XG4gICAgdGhpcy5iaXRSYXRlQ29udHJvbF8gPSBuZXcgTmV0U2ltQml0UmF0ZUNvbnRyb2woXG4gICAgICAgIHRoaXMucm9vdERpdl8uZmluZCgnLmJpdHJhdGUnKSxcbiAgICAgICAgdGhpcy5iaXRzUGVyU2Vjb25kXyxcbiAgICAgICAgdGhpcy5iaXRSYXRlQ2hhbmdlQ2FsbGJhY2tfKTtcbiAgICBpZiAobGV2ZWxDb25maWcubG9ja0JpdFJhdGVDb250cm9sKSB7XG4gICAgICB0aGlzLmJpdFJhdGVDb250cm9sXy5kaXNhYmxlKCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGxldmVsQ29uZmlnLnNob3dDaHVua1NpemVDb250cm9sKSB7XG4gICAgdGhpcy5jaHVua1NpemVDb250cm9sXyA9IG5ldyBOZXRTaW1DaHVua1NpemVDb250cm9sKFxuICAgICAgICB0aGlzLnJvb3REaXZfLmZpbmQoJy5jaHVuay1zaXplJyksXG4gICAgICAgIHRoaXMuY2h1bmtTaXplU2xpZGVyQ2hhbmdlQ2FsbGJhY2tfKTtcbiAgICBpZiAobGV2ZWxDb25maWcubG9ja0NodW5rU2l6ZUNvbnRyb2wpIHtcbiAgICAgIHRoaXMuY2h1bmtTaXplQ29udHJvbF8uZGlzYWJsZSgpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChsZXZlbENvbmZpZy5zaG93RW5jb2RpbmdDb250cm9scy5sZW5ndGggPiAwKSB7XG4gICAgdGhpcy5lbmNvZGluZ0NvbnRyb2xfID0gbmV3IE5ldFNpbUVuY29kaW5nQ29udHJvbChcbiAgICAgICAgdGhpcy5yb290RGl2Xy5maW5kKCcuZW5jb2RpbmcnKSxcbiAgICAgICAgbGV2ZWxDb25maWcsXG4gICAgICAgIHRoaXMuZW5jb2RpbmdDaGFuZ2VDYWxsYmFja18pO1xuICB9XG59O1xuXG4vKipcbiAqIEhhbmRsZXIgZm9yIGNoYW5naW5nIHRoZSBwb3NpdGlvbiBvZiB0aGUgcHVsc2UtcmF0ZSBzbGlkZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBzZWNvbmRzUGVyUHVsc2UgaW4gc2Vjb25kcyBwZXIgcHVsc2VcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbU15RGV2aWNlVGFiLnByb3RvdHlwZS5wdWxzZVJhdGVTbGlkZXJDaGFuZ2VfID0gZnVuY3Rpb24gKHNlY29uZHNQZXJQdWxzZSkge1xuICB0aGlzLnNldEJpdFJhdGUoMSAvIHNlY29uZHNQZXJQdWxzZSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRzUGVyU2Vjb25kXG4gKi9cbk5ldFNpbU15RGV2aWNlVGFiLnByb3RvdHlwZS5zZXRCaXRSYXRlID0gZnVuY3Rpb24gKGJpdHNQZXJTZWNvbmQpIHtcbiAgdGhpcy5iaXRzUGVyU2Vjb25kXyA9IGJpdHNQZXJTZWNvbmQ7XG5cbiAgaWYgKHRoaXMubWV0cm9ub21lXykge1xuICAgIHRoaXMubWV0cm9ub21lXy5zZXRGcmVxdWVuY3koYml0c1BlclNlY29uZCk7XG4gIH1cblxuICBpZiAodGhpcy5iaXRSYXRlQ29udHJvbF8pIHtcbiAgICB0aGlzLmJpdFJhdGVDb250cm9sXy5zZXRWYWx1ZShiaXRzUGVyU2Vjb25kKTtcbiAgfVxuXG4gIGlmICh0aGlzLnB1bHNlUmF0ZUNvbnRyb2xfICYmIGJpdHNQZXJTZWNvbmQgPCBJbmZpbml0eSkge1xuICAgIHRoaXMucHVsc2VSYXRlQ29udHJvbF8uc2V0VmFsdWUoMSAvIGJpdHNQZXJTZWNvbmQpO1xuICB9XG59O1xuXG4vKipcbiAqIFVwZGF0ZSB0aGUgc2xpZGVyIGFuZCBpdHMgbGFiZWwgdG8gZGlzcGxheSB0aGUgcHJvdmlkZWQgdmFsdWUuXG4gKiBAcGFyYW0ge251bWJlcn0gbmV3Q2h1bmtTaXplXG4gKi9cbk5ldFNpbU15RGV2aWNlVGFiLnByb3RvdHlwZS5zZXRDaHVua1NpemUgPSBmdW5jdGlvbiAobmV3Q2h1bmtTaXplKSB7XG4gIGlmICh0aGlzLmNodW5rU2l6ZUNvbnRyb2xfKSB7XG4gICAgdGhpcy5jaHVua1NpemVDb250cm9sXy5zZXRWYWx1ZShuZXdDaHVua1NpemUpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7RW5jb2RpbmdUeXBlW119IG5ld0VuY29kaW5nc1xuICovXG5OZXRTaW1NeURldmljZVRhYi5wcm90b3R5cGUuc2V0RW5jb2RpbmdzID0gZnVuY3Rpb24gKG5ld0VuY29kaW5ncykge1xuICBpZiAodGhpcy5lbmNvZGluZ0NvbnRyb2xfKSB7XG4gICAgdGhpcy5lbmNvZGluZ0NvbnRyb2xfLnNldEVuY29kaW5ncyhuZXdFbmNvZGluZ3MpO1xuICB9XG59O1xuIiwiLyoqXG4gKiBAb3ZlcnZpZXcgVUkgc2xpZGVyIGZvciBjaGFuZ2luZyB0aGUgcHVsc2UgcmF0ZSAoYml0cmF0ZSkgb2YgdGhlIGxvY2FsIGRldmljZS5cbiAqICAgICAgICAgICBEaWZmZXJzIGZyb20gdGhlIGJpdHJhdGUgc2xpZGVyIGluIGl0cyBzY2FsZSBhbmQgdW5pdHMuXG4gKiBAc2VlIE5ldFNpbUJpdFJhdGVDb250cm9sXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyBVdGlscyByZXF1aXJlZCBvbmx5IGZvciBGdW5jdGlvbi5wcm90b3R5cGUuaW5oZXJpdHMoKVxucmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBpMThuID0gcmVxdWlyZSgnLi9sb2NhbGUnKTtcbnZhciBOZXRTaW1TbGlkZXIgPSByZXF1aXJlKCcuL05ldFNpbVNsaWRlcicpO1xuXG4vKipcbiAqIEdlbmVyYXRvciBhbmQgY29udHJvbGxlciBmb3IgcGFja2V0IHNpemUgc2xpZGVyL3NlbGVjdG9yXG4gKiBAcGFyYW0ge2pRdWVyeX0gcm9vdERpdlxuICogQHBhcmFtIHtudW1iZXJ9IGluaXRpYWxWYWx1ZSAtIGluIHNlY29uZHMgcGVyIHB1bHNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzbGlkZXJDaGFuZ2VDYWxsYmFja1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBOZXRTaW1QdWxzZVJhdGVDb250cm9sID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocm9vdERpdiwgaW5pdGlhbFZhbHVlLFxuICAgIHNsaWRlckNoYW5nZUNhbGxiYWNrKSB7XG4gIE5ldFNpbVNsaWRlci5EZWNpbWFsUHJlY2lzaW9uU2xpZGVyLmNhbGwodGhpcywgcm9vdERpdiwge1xuICAgIG9uQ2hhbmdlOiBzbGlkZXJDaGFuZ2VDYWxsYmFjayxcbiAgICB2YWx1ZTogaW5pdGlhbFZhbHVlLFxuICAgIG1pbjogMC41LFxuICAgIG1heDogNS4wLFxuICAgIHN0ZXA6IC0wLjI1XG4gIH0pO1xuXG4gIC8vIEF1dG8tcmVuZGVyLCB1bmxpa2Ugb3VyIGJhc2UgY2xhc3NcbiAgdGhpcy5yZW5kZXIoKTtcbn07XG5OZXRTaW1QdWxzZVJhdGVDb250cm9sLmluaGVyaXRzKE5ldFNpbVNsaWRlci5EZWNpbWFsUHJlY2lzaW9uU2xpZGVyKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIG51bWVyaWMgcmF0ZSB2YWx1ZSAoaW4gc2Vjb25kcyBwZXIgcHVsc2UpIGludG8gYVxuICogbG9jYWxpemVkIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGF0IHZhbHVlLlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbCAtIG51bWVyaWMgdmFsdWUgb2YgdGhlIGNvbnRyb2xcbiAqIEByZXR1cm5zIHtzdHJpbmd9IC0gbG9jYWxpemVkIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB2YWx1ZVxuICogQG92ZXJyaWRlXG4gKi9cbk5ldFNpbVB1bHNlUmF0ZUNvbnRyb2wucHJvdG90eXBlLnZhbHVlVG9MYWJlbCA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgdmFyIHJvdW5kZWQgPSBNYXRoLmZsb29yKHZhbCAqIDEwMCkgLyAxMDA7XG4gIGlmIChyb3VuZGVkID09PSAxKSB7XG4gICAgcmV0dXJuIGkxOG4ueFNlY29uZFBlclB1bHNlKHsgeDogcm91bmRlZCB9KTtcbiAgfVxuICByZXR1cm4gaTE4bi54U2Vjb25kc1BlclB1bHNlKHsgeDogcm91bmRlZCB9KTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBudW1lcmljIHJhdGUgdmFsdWUgKGluIHNlY29uZHMgcGVyIHB1bHNlKSBpbnRvIGEgY29tcGFjdFxuICogbG9jYWxpemVkIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGF0IHZhbHVlLCB1c2VkIGZvciBlbmRzIG9mIHRoZSBzbGlkZXIuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsIC0gbnVtZXJpYyB2YWx1ZSBvZiB0aGUgY29udHJvbFxuICogQHJldHVybnMge3N0cmluZ30gLSBsb2NhbGl6ZWQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHZhbHVlXG4gKiBAb3ZlcnJpZGVcbiAqL1xuTmV0U2ltUHVsc2VSYXRlQ29udHJvbC5wcm90b3R5cGUudmFsdWVUb1Nob3J0TGFiZWwgPSBmdW5jdGlvbiAodmFsKSB7XG4gIHJldHVybiB2YWw7XG59O1xuIiwibW9kdWxlLmV4cG9ydHM9IChmdW5jdGlvbigpIHtcbiAgdmFyIHQgPSBmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzLCBmaWx0ZXJzLCBlc2NhcGVcbi8qKi8pIHtcbmVzY2FwZSA9IGVzY2FwZSB8fCBmdW5jdGlvbiAoaHRtbCl7XG4gIHJldHVybiBTdHJpbmcoaHRtbClcbiAgICAucmVwbGFjZSgvJig/IVxcdys7KS9nLCAnJmFtcDsnKVxuICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXG4gICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbn07XG52YXIgYnVmID0gW107XG53aXRoIChsb2NhbHMgfHwge30pIHsgKGZ1bmN0aW9uKCl7IFxuIGJ1Zi5wdXNoKCc8ZGl2IGNsYXNzPVwibmV0c2ltLW15LWRldmljZS10YWJcIj5cXG5cXG4gICcpOzM7IGlmIChsZXZlbC5zaG93TWV0cm9ub21lKSB7IDsgYnVmLnB1c2goJ1xcbiAgICA8ZGl2IGNsYXNzPVwibWV0cm9ub21lXCI+PC9kaXY+XFxuICAnKTs1OyB9IDsgYnVmLnB1c2goJ1xcblxcbiAgJyk7NzsgaWYgKGxldmVsLnNob3dQdWxzZVJhdGVTbGlkZXIpIHsgOyBidWYucHVzaCgnXFxuICAgIDxoMT5QdWxzZSByYXRlPC9oMT5cXG4gICAgPGRpdiBjbGFzcz1cInB1bHNlLXJhdGVcIj48L2Rpdj5cXG4gICcpOzEwOyB9IDsgYnVmLnB1c2goJ1xcblxcbiAgJyk7MTI7IGlmIChsZXZlbC5zaG93Qml0UmF0ZUNvbnRyb2wpIHsgOyBidWYucHVzaCgnXFxuICAgIDxoMT5CaXRyYXRlPC9oMT5cXG4gICAgPGRpdiBjbGFzcz1cImJpdHJhdGVcIj48L2Rpdj5cXG4gICcpOzE1OyB9IDsgYnVmLnB1c2goJ1xcblxcbiAgJyk7MTc7IGlmIChsZXZlbC5zaG93Q2h1bmtTaXplQ29udHJvbCkgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgPGgxPkNodW5rIHNpemU8L2gxPlxcbiAgICA8ZGl2IGNsYXNzPVwiY2h1bmstc2l6ZVwiPjwvZGl2PlxcbiAgJyk7MjA7IH0gOyBidWYucHVzaCgnXFxuXFxuICAnKTsyMjsgaWYgKGxldmVsLnNob3dFbmNvZGluZ0NvbnRyb2xzLmxlbmd0aCA+IDApIHsgOyBidWYucHVzaCgnXFxuICAgIDxkaXYgY2xhc3M9XCJlbmNvZGluZ1wiPjwvZGl2PlxcbiAgJyk7MjQ7IH0gOyBidWYucHVzaCgnXFxuXFxuPC9kaXY+XFxuJyk7IH0pKCk7XG59IFxucmV0dXJuIGJ1Zi5qb2luKCcnKTtcbn07XG4gIHJldHVybiBmdW5jdGlvbihsb2NhbHMpIHtcbiAgICByZXR1cm4gdChsb2NhbHMsIHJlcXVpcmUoXCJlanNcIikuZmlsdGVycyk7XG4gIH1cbn0oKSk7IiwiLyoqXG4gKiBAb3ZlcnZpZXcgVUkgY29tcG9uZW50OiBBbiBhbmltYXRlZCBTVkcgbWV0cm9ub21lLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIG1hcmt1cCA9IHJlcXVpcmUoJy4vTmV0U2ltTWV0cm9ub21lLmh0bWwuZWpzJyk7XG5cbi8qKlxuICogQW4gU1ZHIFwibWV0cm9ub21lXCIsIGluIHRoZSBmb3JtIG9mIGEgcmFkaWFsIG1ldGVyIHRoYXQgZmlsbHMgYW5kIHJlc2V0c1xuICogYXQgYSByZWd1bGFyIGludGVydmFsLlxuICpcbiAqIEBwYXJhbSB7alF1ZXJ5fSByb290RGl2XG4gKiBAcGFyYW0ge1J1bkxvb3B9IHJ1bkxvb3BcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgTmV0U2ltTWV0cm9ub21lID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocm9vdERpdiwgcnVuTG9vcCkge1xuICAvKipcbiAgICogQ29tcG9uZW50IHJvb3QsIHdoaWNoIHdlIGZpbGwgd2hlbmV2ZXIgd2UgY2FsbCByZW5kZXIoKVxuICAgKiBAdHlwZSB7alF1ZXJ5fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5yb290RGl2XyA9IHJvb3REaXY7XG5cbiAgLyoqXG4gICAqIFRpbWUgb2YgbGFzdCBwdWxzZSwgaW4gUnVuTG9vcCBzaW11bGF0aW9uIHRpbWVcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubGFzdFB1bHNlVGltZV8gPSB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIE1pbGxpc2Vjb25kcyBiZXR3ZWVuIG1ldHJvbm9tZSBwdWxzZXNcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucHVsc2VJbnRlcnZhbE1pbGxpc18gPSAwO1xuXG4gIC8qKlxuICAgKiBOb3JtYWxpemVkIHByb2dyZXNzIHRvd2FyZCB0aGUgbmV4dCBwdWxzZSwgZnJvbSAwLjAgdG8gMS4wXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnByb2dyZXNzXyA9IDA7XG5cbiAgLyoqXG4gICAqIEhvdyBsb25nIGl0J3MgYmVlbiBzaW5jZSB0aGUgbGFzdCBwdWxzZSBpbiBtc1xuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5wdWxzZUFnZV8gPSAwO1xuXG4gIC8vIFJlZ2lzdGVyIHdpdGggcnVuIGxvb3BcbiAgcnVuTG9vcC5yZW5kZXIucmVnaXN0ZXIodGhpcy5yZW5kZXIuYmluZCh0aGlzKSk7XG59O1xuXG4vKipcbiAqIEZpbGwgdGhlIHJvb3QgZGl2IHdpdGggbmV3IGVsZW1lbnRzIHJlZmxlY3RpbmcgdGhlIGN1cnJlbnQgc3RhdGVcbiAqIEBwYXJhbSB7UnVuTG9vcC5DbG9ja30gY2xvY2tcbiAqL1xuTmV0U2ltTWV0cm9ub21lLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoY2xvY2spIHtcbiAgaWYgKCF0aGlzLmxhc3RQdWxzZVRpbWVfKSB7XG4gICAgdGhpcy5sYXN0UHVsc2VUaW1lXyA9IGNsb2NrLnRpbWU7XG4gIH1cblxuICAvLyBBbiBpbmZpbml0ZSBpbnRlcnZhbCBtZWFucyB3ZSdyZSBlZmZlY3RpdmVseSBwYXVzZWQsIHNvIHNuYXAgdG8gemVyb1xuICAvLyBwcm9ncmVzcyAodmlzdWFsaXplZCBhcyBhbiBcImVtcHR5XCIgbWV0ZXIpXG4gIGlmICh0aGlzLnB1bHNlSW50ZXJ2YWxNaWxsaXNfID09PSBJbmZpbml0eSkge1xuICAgIHRoaXMucHJvZ3Jlc3NfID0gMDtcbiAgICB0aGlzLnB1bHNlQWdlXyA9IEluZmluaXR5O1xuICB9IGVsc2Uge1xuICAgIC8vIEZvciBhIG5vbi1pbmZpbml0ZSBpbnRlcnZhbCwgdXBkYXRlIHRoZSBtZXRlciBwcm9ncmVzcyB2YWx1ZSBhY2NvcmRpbmdcbiAgICAvLyB0byB0aGUgY3VycmVudCB0aW1lLlxuICAgIHRoaXMucHVsc2VBZ2VfID0gY2xvY2sudGltZSAtIHRoaXMubGFzdFB1bHNlVGltZV87XG4gICAgdGhpcy5wcm9ncmVzc18gPSBNYXRoLm1pbih0aGlzLnB1bHNlQWdlXyAvIHRoaXMucHVsc2VJbnRlcnZhbE1pbGxpc18sIDEpO1xuXG4gICAgaWYgKHRoaXMucHVsc2VBZ2VfID49IHRoaXMucHVsc2VJbnRlcnZhbE1pbGxpc18pIHtcbiAgICAgIC8vIFB1bHNlXG4gICAgICB2YXIgbWluaW11bUxhc3RQdWxzZVRpbWUgPSBjbG9jay50aW1lIC0gdGhpcy5wdWxzZUludGVydmFsTWlsbGlzXztcbiAgICAgIHdoaWxlICh0aGlzLmxhc3RQdWxzZVRpbWVfIDwgbWluaW11bUxhc3RQdWxzZVRpbWUpIHtcbiAgICAgICAgdGhpcy5sYXN0UHVsc2VUaW1lXyArPSB0aGlzLnB1bHNlSW50ZXJ2YWxNaWxsaXNfO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciByZW5kZXJlZE1hcmt1cCA9ICQobWFya3VwKHtcbiAgICBwcm9ncmVzczogdGhpcy5wcm9ncmVzc18sXG4gICAgcHVsc2VBZ2U6IHRoaXMucHVsc2VBZ2VfXG4gIH0pKTtcbiAgdGhpcy5yb290RGl2Xy5odG1sKHJlbmRlcmVkTWFya3VwKTtcbn07XG5cbi8qKlxuICogQ2hhbmdlIHRoZSBtZXRyb25vbWUgc3BlZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBwdWxzZXNQZXJTZWNvbmRcbiAqL1xuTmV0U2ltTWV0cm9ub21lLnByb3RvdHlwZS5zZXRGcmVxdWVuY3kgPSBmdW5jdGlvbiAocHVsc2VzUGVyU2Vjb25kKSB7XG4gIGlmIChwdWxzZXNQZXJTZWNvbmQgPT09IDAgfHwgcHVsc2VzUGVyU2Vjb25kID09PSBJbmZpbml0eSkge1xuICAgIHRoaXMucHVsc2VJbnRlcnZhbE1pbGxpc18gPSBJbmZpbml0eTtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5wdWxzZUludGVydmFsTWlsbGlzXyA9IDEwMDAgLyBwdWxzZXNQZXJTZWNvbmQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHM9IChmdW5jdGlvbigpIHtcbiAgdmFyIHQgPSBmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzLCBmaWx0ZXJzLCBlc2NhcGVcbi8qKi8pIHtcbmVzY2FwZSA9IGVzY2FwZSB8fCBmdW5jdGlvbiAoaHRtbCl7XG4gIHJldHVybiBTdHJpbmcoaHRtbClcbiAgICAucmVwbGFjZSgvJig/IVxcdys7KS9nLCAnJmFtcDsnKVxuICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXG4gICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbn07XG52YXIgYnVmID0gW107XG53aXRoIChsb2NhbHMgfHwge30pIHsgKGZ1bmN0aW9uKCl7IFxuIGJ1Zi5wdXNoKCcnKTsxO1xuICBmdW5jdGlvbiBtb3ZlQ29tbWFuZCh4LCB5KSB7XG4gICAgcmV0dXJuICdNJyArIHggKyAnICcgKyB5O1xuICB9XG5cbiAgZnVuY3Rpb24gbGluZUNvbW1hbmQoeCwgeSkge1xuICAgIHJldHVybiAnTCAnICsgeCArICcgJyArIHk7XG4gIH1cblxuICBmdW5jdGlvbiBhcmNDb21tYW5kKHJYLCByWSwgcm90LCBsYXJnZUFyY0ZsYWcsIHN3ZWVwRmxhZywgZmluYWxYLCBmaW5hbFkpIHtcbiAgICByZXR1cm4gJ0EgJyArIHJYICsgJyAnICsgclkgKyAnLCAnICsgcm90ICsgJywgJyArIGxhcmdlQXJjRmxhZyArICcsICcgKyBzd2VlcEZsYWcgKyAnLCAnICsgZmluYWxYICsgJyAnICsgZmluYWxZO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xvc2VTaGFwZUNvbW1hbmQoKSB7XG4gICAgcmV0dXJuICdaJztcbiAgfVxuXG4gIC8qKlxuICAgKiBPdXRlciByYWRpdXMgb2YgcHJvZ3Jlc3MgbWV0ZXJcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGNvbnN0XG4gICAqL1xuICB2YXIgT1VURVJfUkFEVVMgPSA0NTtcblxuICAvKipcbiAgICogSW5uZXIgcmFkaXVzIG9mIHByb2dyZXNzIG1ldGVyLCBhbmQgbWF4aW11bSByYWRpdXMgb2YgcHVsc2UgZG90XG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBjb25zdFxuICAgKi9cbiAgdmFyIElOTkVSX1JBRElVUyA9IDMwO1xuXG4gIC8qKlxuICAgKiBIb3cgbG9uZyAoaW4gbXMpIGl0IHRha2VzIHRoZSBwdWxzZSBjaXJjbGUgdG8gc2hyaW5rIGJhY2sgdG8gbm90aGluZyBhZnRlciBpdCBhcHBlYXJzXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBjb25zdFxuICAgKi9cbiAgdmFyIFBVTFNFX0ZBTExPRkZfTVMgPSA1MDA7XG5cbiAgLyoqXG4gICAqIFJhZGl1cyBvZiB0aGUgaW5uZXIgcHVsc2UgZG90LCBiYXNlZCBvbiB0aGUgcHVsc2UgYWdlLiAgU3RhcnRzIGZ1bGwgc2l6ZSwgdGhlbiBzaHJpbmtzXG4gICAqIHRvIHI9MCBvdmVyIFBVTFNFX0ZBTExPRkZfTVMuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB2YXIgcHVsc2VGYWxsb2ZmTm9ybWFsaXplZFByb2dyZXNzID0gTWF0aC5taW4ocHVsc2VBZ2UvIFBVTFNFX0ZBTExPRkZfTVMsIDEpO1xuICB2YXIgcHVsc2VEb3RSYWRpdXMgPSBJTk5FUl9SQURJVVMgKiAoMSAtIHB1bHNlRmFsbG9mZk5vcm1hbGl6ZWRQcm9ncmVzcyk7XG5cblxuICAvKipcbiAgICogR2l2ZW4gYSBjZXJ0YWluIHBlcmNlbnRhZ2UgKGFzIGEgdmFsdWUgaW4gdGhlIHJhbmdlIFswLjAtMS4wXSkgdGhpc1xuICAgKiBnZW5lcmF0ZXMgYSBkYXRhIHN0cmluZyBmb3IgYSBcInBhdGhcIiBzdmcgb2JqZWN0IHRoYXQgZHJhd3MgYSBwYXJ0aWFsbHktZmlsbGVkIGFyY1xuICAgKiBzd2VlcGluZyB0aGUgYXBwcm9wcmlhdGUgcGVyY2VudGFnZSBvZiBhIGNpcmNsZS5cbiAgICogUHJvZ3Jlc3MgYmVnaW5zIGl0cyBzd2VlcCBhdCBcImVhc3RcIiBhbmQgcHJvY2VlZHMgY2xvY2t3aXNlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbm9ybWFsaXplZFByb2dyZXNzIC0gbnVtYmVyIGZyb20gMC4wIHRvIDEuMFxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBkYXRhIHN0cmluZyBvZiBjb21tYW5kcyBmb3IgU1ZHIHBhdGhcbiAgICovXG4gIGZ1bmN0aW9uIHByb2dyZXNzTWV0ZXJTdmdQYXRoRGF0YShub3JtYWxpemVkUHJvZ3Jlc3MpIHtcbiAgICB2YXIgdGVybWluYWxSYWRpYW5zID0gMiAqIE1hdGguUEkgKiBub3JtYWxpemVkUHJvZ3Jlc3NcbiAgICB2YXIgbGFyZ2VBcmMgPSAobm9ybWFsaXplZFByb2dyZXNzID49IDAuNSkgPyAxIDogMDtcbiAgICB2YXIgc2luQW5nbGUgPSBNYXRoLnNpbih0ZXJtaW5hbFJhZGlhbnMpO1xuICAgIHZhciBjb3NBbmdsZSA9IE1hdGguY29zKHRlcm1pbmFsUmFkaWFucyk7XG4gICAgdmFyIG91dGVyVGVybWluYWxYID0gT1VURVJfUkFEVVMgKiBjb3NBbmdsZTtcbiAgICB2YXIgb3V0ZXJUZXJtaW5hbFkgPSBPVVRFUl9SQURVUyAqIHNpbkFuZ2xlO1xuICAgIHZhciBpbm5lclRlcm1pbmFsWCA9IElOTkVSX1JBRElVUyAqIGNvc0FuZ2xlO1xuICAgIHZhciBpbm5lclRlcm1pbmFsWSA9IElOTkVSX1JBRElVUyAqIHNpbkFuZ2xlO1xuICAgIHJldHVybiBbXG4gICAgICBtb3ZlQ29tbWFuZChPVVRFUl9SQURVUywgMCksXG4gICAgICBhcmNDb21tYW5kKE9VVEVSX1JBRFVTLCBPVVRFUl9SQURVUywgMCwgbGFyZ2VBcmMsIDEsIG91dGVyVGVybWluYWxYLCBvdXRlclRlcm1pbmFsWSksXG4gICAgICBsaW5lQ29tbWFuZChpbm5lclRlcm1pbmFsWCwgaW5uZXJUZXJtaW5hbFkpLFxuICAgICAgYXJjQ29tbWFuZChJTk5FUl9SQURJVVMsIElOTkVSX1JBRElVUywgMCwgbGFyZ2VBcmMsIDAsIElOTkVSX1JBRElVUywgMCksXG4gICAgICBjbG9zZVNoYXBlQ29tbWFuZCgpXG4gICAgXS5qb2luKCcgJyk7XG4gIH1cbjsgYnVmLnB1c2goJ1xcbjxkaXYgY2xhc3M9XCJuZXRzaW0tbWV0cm9ub21lXCI+XFxuICA8c3ZnIHZlcnNpb249XCIxLjFcIiB3aWR0aD1cIjEwMFwiIGhlaWdodD1cIjEwMFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cXG4gICAgPGcgaWQ9XCJjZW50ZXJlZC1ncm91cFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSg1MCw1MClcIj5cXG4gICAgICA8Y2lyY2xlIHI9XCI0OFwiIGN4PVwiMFwiIGN5PVwiMFwiIGZpbGw9XCJkYXJrZ3JheVwiPjwvY2lyY2xlPlxcbiAgICAgIDxjaXJjbGUgcj1cIjQ4XCIgY3g9XCItMVwiIGN5PVwiMVwiIGZpbGw9XCJsaWdodGdyYXlcIj48L2NpcmNsZT5cXG4gICAgICA8Y2lyY2xlIHI9XCI0NlwiIGN4PVwiMFwiIGN5PVwiMFwiIGZpbGw9XCIjZjVmNWY1XCI+PC9jaXJjbGU+XFxuICAgICAgPGNpcmNsZSBjbGFzcz1cInB1bHNlLWRvdFwiIHI9XCInLCBlc2NhcGUoKDgwLCAgcHVsc2VEb3RSYWRpdXMgKSksICdcIiBjeD1cIjBcIiBjeT1cIjBcIj48L2NpcmNsZT5cXG4gICAgICA8ZyB0cmFuc2Zvcm09XCJyb3RhdGUoLTkwKVwiPlxcbiAgICAgICAgPHBhdGggY2xhc3M9XCJwcm9ncmVzcy1tZXRlclwiIGQ9XCInLCBlc2NhcGUoKDgyLCAgcHJvZ3Jlc3NNZXRlclN2Z1BhdGhEYXRhKHByb2dyZXNzKSApKSwgJ1wiPjwvcGF0aD5cXG4gICAgICA8L2c+XFxuICAgIDwvZz5cXG4gIDwvc3ZnPlxcbjwvZGl2PlxcbicpOyB9KSgpO1xufSBcbnJldHVybiBidWYuam9pbignJyk7XG59O1xuICByZXR1cm4gZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgcmV0dXJuIHQobG9jYWxzLCByZXF1aXJlKFwiZWpzXCIpLmZpbHRlcnMpO1xuICB9XG59KCkpOyIsIi8qKlxuICogQG92ZXJ2aWV3IFVJIHNsaWRlciB1c2VkIHRvIGNvbnRyb2wgcm91dGVyIG1lbW9yeSBzaXplLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBOZXRTaW1Db25zdGFudHMgPSByZXF1aXJlKCcuL05ldFNpbUNvbnN0YW50cycpO1xudmFyIE5ldFNpbVV0aWxzID0gcmVxdWlyZSgnLi9OZXRTaW1VdGlscycpO1xudmFyIE5ldFNpbVNsaWRlciA9IHJlcXVpcmUoJy4vTmV0U2ltU2xpZGVyJyk7XG5cbi8qKlxuICogR2VuZXJhdG9yIGFuZCBjb250cm9sbGVyIGZvciBwYWNrZXQgc2l6ZSBzbGlkZXIvc2VsZWN0b3JcbiAqIEBwYXJhbSB7alF1ZXJ5fSByb290RGl2XG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzbGlkZXJDaGFuZ2VDYWxsYmFja1xuICogQHBhcmFtIHtmdW5jdGlvbn0gc2xpZGVyU3RvcENhbGxiYWNrXG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIE5ldFNpbU1lbW9yeUNvbnRyb2wgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyb290RGl2LFxuICAgIHNsaWRlckNoYW5nZUNhbGxiYWNrLCBzbGlkZXJTdG9wQ2FsbGJhY2spIHtcbiAgTmV0U2ltU2xpZGVyLkxvZ2FyaXRobWljU2xpZGVyLmNhbGwodGhpcywgcm9vdERpdiwge1xuICAgIG9uQ2hhbmdlOiBzbGlkZXJDaGFuZ2VDYWxsYmFjayxcbiAgICBvblN0b3A6IHNsaWRlclN0b3BDYWxsYmFjayxcbiAgICB2YWx1ZTogSW5maW5pdHksXG4gICAgbWluOiBOZXRTaW1Db25zdGFudHMuQklUU19QRVJfQllURSxcbiAgICBtYXg6IE5ldFNpbUNvbnN0YW50cy5CSVRTX1BFUl9NRUdBQllURSxcbiAgICB1cHBlckJvdW5kSW5maW5pdGU6IHRydWVcbiAgfSk7XG5cbiAgLy8gQXV0by1yZW5kZXIsIHVubGlrZSBvdXIgYmFzZSBjbGFzc1xuICB0aGlzLnJlbmRlcigpO1xufTtcbk5ldFNpbU1lbW9yeUNvbnRyb2wuaW5oZXJpdHMoTmV0U2ltU2xpZGVyLkxvZ2FyaXRobWljU2xpZGVyKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIG51bWVyaWMgbWVtb3J5IHZhbHVlIChpbiBiaXRzKSBpbnRvIGEgY29tcGFjdCBsb2NhbGl6ZWQgc3RyaW5nXG4gKiByZXByZXNlbnRhdGlvbiBvZiB0aGF0IHZhbHVlLlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbCAtIG51bWVyaWMgdmFsdWUgb2YgdGhlIGNvbnRyb2xcbiAqIEByZXR1cm5zIHtzdHJpbmd9IC0gbG9jYWxpemVkIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB2YWx1ZVxuICogQG92ZXJyaWRlXG4gKi9cbk5ldFNpbU1lbW9yeUNvbnRyb2wucHJvdG90eXBlLnZhbHVlVG9MYWJlbCA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuIE5ldFNpbVV0aWxzLmJpdHNUb0xvY2FsaXplZFJvdW5kZWRCeXRlc2l6ZSh2YWwpO1xufTtcbiIsIi8qKlxuICogQG92ZXJ2aWV3IFVJIGNvbXBvbmVudCwgYSBsb2cgcGFuZWwgKHVzZWQgYXMgXCJTZW50IFBhY2tldHNcIiBhbmRcbiAqICAgICAgICAgICBcIlJlY2VpdmVkIFBhY2tldHNcIikgdGhhdCBpcyB1c2VkIGluIHRoZSBwYWNrZXQtc2VuZGluZ1xuICogICAgICAgICAgIGNvbmZpZ3VyYXRpb25zIG9mIHRoZSBzaW11bGF0b3IuXG4gKlxuICogQHNlZSBJTmV0U2ltTG9nUGFuZWwgZm9yIHRoZSBpbnRlcmZhY2UgaW1wbGVtZW50ZWQgaGVyZS5cbiAqIEBzZWUgTmV0U2ltQml0TG9nUGFuZWwgZm9yIHRoZSBjb21wb25lbnQgdXNlZCBpbiBiaXQtc2VuZGluZyBtb2RlLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBpMThuID0gcmVxdWlyZSgnLi9sb2NhbGUnKTtcbnZhciBtYXJrdXAgPSByZXF1aXJlKCcuL05ldFNpbUxvZ1BhbmVsLmh0bWwuZWpzJyk7XG52YXIgUGFja2V0ID0gcmVxdWlyZSgnLi9QYWNrZXQnKTtcbnZhciBwYWNrZXRNYXJrdXAgPSByZXF1aXJlKCcuL05ldFNpbUxvZ1BhY2tldC5odG1sLmVqcycpO1xudmFyIE5ldFNpbVBhbmVsID0gcmVxdWlyZSgnLi9OZXRTaW1QYW5lbCcpO1xudmFyIE5ldFNpbUVuY29kaW5nQ29udHJvbCA9IHJlcXVpcmUoJy4vTmV0U2ltRW5jb2RpbmdDb250cm9sJyk7XG52YXIgTmV0U2ltR2xvYmFscyA9IHJlcXVpcmUoJy4vTmV0U2ltR2xvYmFscycpO1xuXG4vKipcbiAqIEhvdyBsb25nIHRoZSBcImVudHJhbmNlXCIgYW5pbWF0aW9uIGZvciBuZXcgbWVzc2FnZXMgbGFzdHMsIGluIG1pbGxpc2Vjb25kcy5cbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqL1xudmFyIE1FU1NBR0VfU0xJREVfSU5fRFVSQVRJT05fTVMgPSA0MDA7XG5cbi8qKlxuICogSG93IG1hbnkgcGFja2V0cyB0aGUgbG9nIG1heSBrZWVwIGluIGl0cyBoaXN0b3J5IChhbmQgaW4gdGhlIERPTSEpXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0XG4gKi9cbnZhciBERUZBVUxUX01BWElNVU1fTE9HX1BBQ0tFVFMgPSA1MDtcblxuLyoqXG4gKiBPYmplY3QgdGhhdCBjYW4gYmUgc2VudCBkYXRhIHRvIGJlIGJyb3dzZWQgYnkgdGhlIHVzZXIgYXQgdGhlaXIgZGlzY3JldGlvblxuICogQGludGVyZmFjZVxuICogQG5hbWUgSU5ldFNpbUxvZ1BhbmVsXG4gKi9cblxuLyoqXG4gKiBQdXQgZGF0YSBpbnRvIHRoZSBsb2dcbiAqIEBmdW5jdGlvblxuICogQG5hbWUgSU5ldFNpbUxvZ1BhbmVsI2xvZ1xuICogQHBhcmFtIHtzdHJpbmd9IGJpbmFyeVxuICovXG5cbi8qKlxuICogU2hvdyBvciBoaWRlIHBhcnRzIG9mIHRoZSBsb2cgYmFzZWQgb24gdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBlbmNvZGluZyBtb2RlLlxuICogQGZ1bmN0aW9uXG4gKiBAbmFtZSBJTmV0U2ltTG9nUGFuZWwjc2V0RW5jb2RpbmdzXG4gKiBAcGFyYW0ge0VuY29kaW5nVHlwZVtdfSBuZXdFbmNvZGluZ3NcbiAqL1xuXG4vKipcbiAqIENoYW5nZSBob3cgYmluYXJ5IGlucHV0IGluIGludGVycHJldGVkIGFuZCBmb3JtYXR0ZWQgaW4gdGhlIGxvZy5cbiAqIEBmdW5jdGlvblxuICogQG5hbWUgSU5ldFNpbUxvZ1BhbmVsI3NldENodW5rU2l6ZVxuICogQHBhcmFtIHtudW1iZXJ9IG5ld0NodW5rU2l6ZVxuICovXG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbmFtZSBJTmV0U2ltTG9nUGFuZWwjZ2V0SGVpZ2h0XG4gKiBAcmV0dXJucyB7bnVtYmVyfSB2ZXJ0aWNhbCBzcGFjZSB0aGF0IHBhbmVsIGN1cnJlbnRseSBjb25zdW1lcyAoaW5jbHVkaW5nXG4gKiAgICAgICAgICBtYXJnaW5zKSBpbiBwaXhlbHMuXG4gKi9cblxuLyoqXG4gKiBTZXRzIHRoZSB2ZXJ0aWNhbCBzcGFjZSB0aGF0IHRoaXMgbG9nIHBhbmVsIHNob3VsZCBjb25zdW1lIChpbmNsdWRpbmcgbWFyZ2lucylcbiAqIEBmdW5jdGlvblxuICogQG5hbWUgSU5ldFNpbUxvZ1BhbmVsI3NldEhlaWdodFxuICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFBpeGVsc1xuICovXG5cbi8qKlxuICogR2VuZXJhdG9yIGFuZCBjb250cm9sbGVyIGZvciBtZXNzYWdlIGxvZy5cbiAqIEBwYXJhbSB7alF1ZXJ5fSByb290RGl2XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubG9nVGl0bGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuaXNNaW5pbWl6ZWRdIGRlZmF1bHRzIHRvIEZBTFNFXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmhhc1VucmVhZE1lc3NhZ2VzXSBkZWZhdWx0cyB0byBGQUxTRVxuICogQHBhcmFtIHtQYWNrZXQuSGVhZGVyVHlwZVtdfSBvcHRpb25zLnBhY2tldFNwZWNcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhpbXVtTG9nUGFja2V0c10gSG93IG1hbnkgcGFja2V0cyB0aGUgbG9nIHdpbGxcbiAqICAgICAgICBrZWVwIGJlZm9yZSBpdCBzdGFydHMgZHJvcHBpbmcgdGhlIG9sZGVzdCBvbmVzLiAgRGVmYXVsdHMgdG9cbiAqICAgICAgICBERUZBVUxUX01BWElNVU1fTE9HX1BBQ0tFVFMuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhdWdtZW50cyBOZXRTaW1QYW5lbFxuICogQGltcGxlbWVudHMgSU5ldFNpbUxvZ1BhbmVsXG4gKi9cbnZhciBOZXRTaW1Mb2dQYW5lbCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJvb3REaXYsIG9wdGlvbnMpIHtcbiAgLyoqXG4gICAqIEB0eXBlIHtQYWNrZXQuSGVhZGVyVHlwZVtdfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5wYWNrZXRTcGVjXyA9IG9wdGlvbnMucGFja2V0U3BlYztcblxuICAvKipcbiAgICogTGlzdCBvZiBjb250cm9sbGVycyBmb3IgY3VycmVudGx5IGRpc3BsYXllZCBwYWNrZXRzLlxuICAgKiBAdHlwZSB7QXJyYXkuPE5ldFNpbUxvZ1BhY2tldD59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnBhY2tldHNfID0gW107XG5cbiAgLyoqXG4gICAqIEEgbWVzc2FnZSBlbmNvZGluZyAoZGlzcGxheSkgc2V0dGluZy5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuY3VycmVudEVuY29kaW5nc18gPSBbXTtcblxuICAvKipcbiAgICogQ3VycmVudCBjaHVuayBzaXplIChieXRlc2l6ZSkgZm9yIGludGVycHJldGluZyBiaW5hcnkgaW4gdGhlIGxvZy5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuY3VycmVudENodW5rU2l6ZV8gPSA4O1xuXG4gIC8qKlxuICAgKiBMb2NhbGl6ZWQgcGFuZWwgdGl0bGVcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubG9nVGl0bGVfID0gb3B0aW9ucy5sb2dUaXRsZTtcblxuICAvKipcbiAgICogV2hldGhlciBuZXdseSBsb2dnZWQgbWVzc2FnZXMgaW4gdGhpcyBsb2cgc2hvdWxkIGJlIG1hcmtlZCBhcyB1bnJlYWRcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmhhc1VucmVhZE1lc3NhZ2VzXyA9ICEhKG9wdGlvbnMuaGFzVW5yZWFkTWVzc2FnZXMpO1xuXG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgcGFja2V0cyB0aGlzIGxvZyBwYW5lbCB3aWxsIGtlZXAgaW4gaXRzIG1lbW9yeVxuICAgKiBhbmQgaW4gdGhlIERPTSwgc28gd2UgZG9uJ3QgaGF2ZSBhIGZvcmV2ZXItZ3Jvd2luZyBsb2cuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlLCxcbiAgICovXG4gIHRoaXMubWF4aW11bUxvZ1BhY2tldHNfID0gdXRpbHMudmFsdWVPcihvcHRpb25zLm1heGltdW1Mb2dQYWNrZXRzLFxuICAgICAgREVGQVVMVF9NQVhJTVVNX0xPR19QQUNLRVRTKTtcblxuICAvLyBJbml0aWFsIHJlbmRlclxuICBOZXRTaW1QYW5lbC5jYWxsKHRoaXMsIHJvb3REaXYsIHtcbiAgICBjbGFzc05hbWU6ICduZXRzaW0tbG9nLXBhbmVsJyxcbiAgICBwYW5lbFRpdGxlOiBvcHRpb25zLmxvZ1RpdGxlLFxuICAgIGJlZ2luTWluaW1pemVkOiBvcHRpb25zLmlzTWluaW1pemVkXG4gIH0pO1xufTtcbk5ldFNpbUxvZ1BhbmVsLmluaGVyaXRzKE5ldFNpbVBhbmVsKTtcblxuTmV0U2ltTG9nUGFuZWwucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gQ3JlYXRlIGJvaWxlcnBsYXRlIHBhbmVsIG1hcmt1cFxuICBOZXRTaW1Mb2dQYW5lbC5zdXBlclByb3RvdHlwZS5yZW5kZXIuY2FsbCh0aGlzKTtcblxuICAvLyBBZGQgb3VyIG93biBjb250ZW50IG1hcmt1cFxuICB2YXIgbmV3TWFya3VwID0gJChtYXJrdXAoe30pKTtcbiAgdGhpcy5nZXRCb2R5KCkuaHRtbChuZXdNYXJrdXApO1xuXG4gIC8vIEFkZCBhIGNsZWFyIGJ1dHRvbiB0byB0aGUgcGFuZWwgaGVhZGVyXG4gIHRoaXMuYWRkQnV0dG9uKGkxOG4uY2xlYXIoKSwgdGhpcy5vbkNsZWFyQnV0dG9uUHJlc3NfLmJpbmQodGhpcykpO1xuXG4gIC8vIEJpbmQgcmVmZXJlbmNlIHRvIHNjcm9sbEFyZWEgZm9yIHVzZSB3aGVuIGxvZ2dpbmcuXG4gIHRoaXMuc2Nyb2xsQXJlYV8gPSB0aGlzLmdldEJvZHkoKS5maW5kKCcuc2Nyb2xsLWFyZWEnKTtcblxuICB0aGlzLnVwZGF0ZVVucmVhZENvdW50KCk7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbGwgcGFja2V0cyBmcm9tIHRoZSBsb2csIHJlc2V0dGluZyBpdHMgc3RhdGUuXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Mb2dQYW5lbC5wcm90b3R5cGUub25DbGVhckJ1dHRvblByZXNzXyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zY3JvbGxBcmVhXy5lbXB0eSgpO1xuICB0aGlzLnBhY2tldHNfLmxlbmd0aCA9IDA7XG5cbiAgdGhpcy51cGRhdGVVbnJlYWRDb3VudCgpO1xufTtcblxuLyoqXG4gKiBQdXQgYSBtZXNzYWdlIGludG8gdGhlIGxvZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYWNrZXRCaW5hcnlcbiAqIEBwYXJhbSB7bnVtYmVyfSBwYWNrZXRJRFxuICovXG5OZXRTaW1Mb2dQYW5lbC5wcm90b3R5cGUubG9nID0gZnVuY3Rpb24gKHBhY2tldEJpbmFyeSwgcGFja2V0SUQpIHtcblxuICB2YXIgcGFja2V0QWxyZWFkeUluTG9nID0gdGhpcy5wYWNrZXRzXy5zb21lKGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgICByZXR1cm4gcGFja2V0LnBhY2tldElEID09PSBwYWNrZXRJRDtcbiAgfSk7XG5cbiAgaWYgKHBhY2tldEFscmVhZHlJbkxvZykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFJlbW92ZSBhbGwgcGFja2V0cyB0aGF0IGFyZSBiZXlvbmQgb3VyIG1heGltdW0gc2l6ZVxuICB0aGlzLnBhY2tldHNfXG4gICAgICAuc3BsaWNlKHRoaXMubWF4aW11bUxvZ1BhY2tldHNfIC0gMSwgdGhpcy5wYWNrZXRzXy5sZW5ndGgpXG4gICAgICAuZm9yRWFjaChmdW5jdGlvbiAocGFja2V0KSB7XG4gICAgICAgIHBhY2tldC5nZXRSb290KCkucmVtb3ZlKCk7XG4gICAgICB9KTtcblxuICB2YXIgbmV3UGFja2V0ID0gbmV3IE5ldFNpbUxvZ1BhY2tldChwYWNrZXRCaW5hcnksIHBhY2tldElELCB7XG4gICAgcGFja2V0U3BlYzogdGhpcy5wYWNrZXRTcGVjXyxcbiAgICBlbmNvZGluZ3M6IHRoaXMuY3VycmVudEVuY29kaW5nc18sXG4gICAgY2h1bmtTaXplOiB0aGlzLmN1cnJlbnRDaHVua1NpemVfLFxuICAgIGlzVW5yZWFkOiB0aGlzLmhhc1VucmVhZE1lc3NhZ2VzXyxcbiAgICBtYXJrQXNSZWFkQ2FsbGJhY2s6IHRoaXMudXBkYXRlVW5yZWFkQ291bnQuYmluZCh0aGlzKVxuICB9KTtcblxuICBuZXdQYWNrZXQuZ2V0Um9vdCgpLnByZXBlbmRUbyh0aGlzLnNjcm9sbEFyZWFfKTtcblxuICB2YXIgc2Nyb2xsVG9wID0gdGhpcy5zY3JvbGxBcmVhXy5zY3JvbGxUb3AoKTtcblxuICBpZiAoc2Nyb2xsVG9wID09PSAwKSB7XG4gICAgLy8gSWYgc2Nyb2xsZWQgdG8gdGhlIHRvcCwgYW5pbWF0ZSBhIHByZXR0eSBzbGlkZWRvd25cbiAgICBuZXdQYWNrZXQuZ2V0Um9vdCgpLmhpZGUoKTtcbiAgICBuZXdQYWNrZXQuZ2V0Um9vdCgpLnNsaWRlRG93bihNRVNTQUdFX1NMSURFX0lOX0RVUkFUSU9OX01TKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBJZiB3ZSdyZSBzb21ld2hlcmUgaW4gdGhlIG1pZGRsZSBvZiB0aGUgbWVzc2FnZXMsIHNjcm9sbCBcImRvd25cIlxuICAgIC8vIHRvIG1haW50YWluIG91ciBwbGFjZSByZWxhdGl2ZSB0byB0aGUgbWVzc2FnZXMgd2UncmUgbG9va2luZyBhdFxuXG4gICAgLy8gU2Nyb2xsaW5nIG9ubHkgdGFrZXMgdGhlIGJvdHRvbSBtYXJnaW4gaW50byBhY2NvdW50LCBub3QgdG9wXG4gICAgdmFyIHBhY2tldEhlaWdodCA9IG5ld1BhY2tldC5nZXRSb290KCkub3V0ZXJIZWlnaHQoKSArXG4gICAgICAgIHBhcnNlSW50KG5ld1BhY2tldC5nZXRSb290KCkuY3NzKCdtYXJnaW5Cb3R0b20nKSk7XG5cbiAgICB0aGlzLnNjcm9sbEFyZWFfLnNjcm9sbFRvcChzY3JvbGxUb3AgKyBwYWNrZXRIZWlnaHQpO1xuICB9XG5cbiAgdGhpcy5wYWNrZXRzXy51bnNoaWZ0KG5ld1BhY2tldCk7XG5cbiAgdGhpcy51cGRhdGVVbnJlYWRDb3VudCgpO1xufTtcblxuTmV0U2ltTG9nUGFuZWwucHJvdG90eXBlLnVwZGF0ZVVucmVhZENvdW50ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdW5yZWFkQ291bnQgPSB0aGlzLnBhY2tldHNfLnJlZHVjZShmdW5jdGlvbiAocHJldiwgY3VyKSB7XG4gICAgcmV0dXJuIHByZXYgKyAoY3VyLmlzVW5yZWFkID8gMSA6IDApO1xuICB9LCAwKTtcblxuICBpZiAodW5yZWFkQ291bnQgPiAwKSB7XG4gICAgdGhpcy5zZXRQYW5lbFRpdGxlKGkxOG4uYXBwZW5kQ291bnRUb1RpdGxlKHtcbiAgICAgIHRpdGxlOiB0aGlzLmxvZ1RpdGxlXyxcbiAgICAgIGNvdW50OiB1bnJlYWRDb3VudFxuICAgIH0pKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnNldFBhbmVsVGl0bGUodGhpcy5sb2dUaXRsZV8pO1xuICB9XG59O1xuXG4vKipcbiAqIFNob3cgb3IgaGlkZSBwYXJ0cyBvZiB0aGUgc2VuZCBVSSBiYXNlZCBvbiB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGVuY29kaW5nXG4gKiBtb2RlLlxuICogQHBhcmFtIHtFbmNvZGluZ1R5cGVbXX0gbmV3RW5jb2RpbmdzXG4gKi9cbk5ldFNpbUxvZ1BhbmVsLnByb3RvdHlwZS5zZXRFbmNvZGluZ3MgPSBmdW5jdGlvbiAobmV3RW5jb2RpbmdzKSB7XG4gIHRoaXMuY3VycmVudEVuY29kaW5nc18gPSBuZXdFbmNvZGluZ3M7XG4gIHRoaXMucGFja2V0c18uZm9yRWFjaChmdW5jdGlvbiAocGFja2V0KSB7XG4gICAgcGFja2V0LnNldEVuY29kaW5ncyhuZXdFbmNvZGluZ3MpO1xuICB9KTtcbn07XG5cbi8qKlxuICogQ2hhbmdlIGhvdyBiaW5hcnkgaW5wdXQgaW4gaW50ZXJwcmV0ZWQgYW5kIGZvcm1hdHRlZCBpbiB0aGUgbG9nLlxuICogQHBhcmFtIHtudW1iZXJ9IG5ld0NodW5rU2l6ZVxuICovXG5OZXRTaW1Mb2dQYW5lbC5wcm90b3R5cGUuc2V0Q2h1bmtTaXplID0gZnVuY3Rpb24gKG5ld0NodW5rU2l6ZSkge1xuICB0aGlzLmN1cnJlbnRDaHVua1NpemVfID0gbmV3Q2h1bmtTaXplO1xuICB0aGlzLnBhY2tldHNfLmZvckVhY2goZnVuY3Rpb24gKHBhY2tldCkge1xuICAgIHBhY2tldC5zZXRDaHVua1NpemUobmV3Q2h1bmtTaXplKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEEgY29tcG9uZW50L2NvbnRyb2xsZXIgZm9yIGRpc3BsYXkgb2YgYW4gaW5kaXZpZHVhbCBwYWNrZXQgaW4gdGhlIGxvZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYWNrZXRCaW5hcnkgLSByYXcgcGFja2V0IGRhdGFcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge1BhY2tldC5IZWFkZXJUeXBlW119IG9wdGlvbnMucGFja2V0U3BlY1xuICogQHBhcmFtIHtFbmNvZGluZ1R5cGVbXX0gb3B0aW9ucy5lbmNvZGluZ3MgLSB3aGljaCBkaXNwbGF5IHN0eWxlIHRvIHVzZSBpbml0aWFsbHlcbiAqIEBwYXJhbSB7bnVtYmVyfSBvcHRpb25zLmNodW5rU2l6ZSAtIChvciBieXRlc2l6ZSkgdG8gdXNlIHdoZW4gaW50ZXJwcmV0aW5nIGFuZFxuICogICAgICAgIGZvcm1hdHRpbmcgdGhlIGRhdGEuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbnMuaXNVbnJlYWQgLSB3aGV0aGVyIHRoaXMgcGFja2V0IHNob3VsZCBiZSBzdHlsZWRcbiAqICAgICAgICBhcyBcInVucmVhZFwiIGFuZCBoYXZlIGEgXCJtYXJrIGFzIHJlYWRcIiBidXR0b25cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG9wdGlvbnMubWFya0FzUmVhZENhbGxiYWNrXG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIE5ldFNpbUxvZ1BhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXRCaW5hcnksIHBhY2tldElELCBvcHRpb25zKSB7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLnBhY2tldElEID0gcGFja2V0SUQ7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnBhY2tldEJpbmFyeV8gPSBwYWNrZXRCaW5hcnk7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtQYWNrZXQuSGVhZGVyVHlwZVtdfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5wYWNrZXRTcGVjXyA9IG9wdGlvbnMucGFja2V0U3BlYztcblxuICAvKipcbiAgICogQHR5cGUge0VuY29kaW5nVHlwZVtdfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5lbmNvZGluZ3NfID0gb3B0aW9ucy5lbmNvZGluZ3M7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmNodW5rU2l6ZV8gPSBvcHRpb25zLmNodW5rU2l6ZTtcblxuICAvKipcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLmlzVW5yZWFkID0gb3B0aW9ucy5pc1VucmVhZDtcblxuICAvKipcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLmlzTWluaW1pemVkID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubWFya0FzUmVhZENhbGxiYWNrXyA9IG9wdGlvbnMubWFya0FzUmVhZENhbGxiYWNrO1xuXG4gIC8qKlxuICAgKiBXcmFwcGVyIGRpdiB0aGF0IHdlIGNyZWF0ZSBvbmNlLCBhbmQgZmlsbCByZXBlYXRlZGx5IHdpdGggcmVuZGVyKClcbiAgICogQHR5cGUge2pRdWVyeX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucm9vdERpdl8gPSAkKCc8ZGl2PicpLmFkZENsYXNzKCdwYWNrZXQnKTtcbiAgdGhpcy5yb290RGl2Xy5jbGljayh0aGlzLm1hcmtBc1JlYWQuYmluZCh0aGlzKSk7XG5cbiAgLy8gSW5pdGlhbCBjb250ZW50IHBvcHVsYXRpb25cbiAgdGhpcy5yZW5kZXIoKTtcbn07XG5cbi8qKlxuICogUmUtcmVuZGVyIGRpdiBjb250ZW50cyB0byByZXByZXNlbnQgdGhlIHBhY2tldCBpbiBhIGRpZmZlcmVudCB3YXkuXG4gKi9cbk5ldFNpbUxvZ1BhY2tldC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZW5jb2RpbmdzSGFzaCA9IE5ldFNpbUVuY29kaW5nQ29udHJvbC5lbmNvZGluZ3NBc0hhc2godGhpcy5lbmNvZGluZ3NfKTtcbiAgdmFyIHJhd01hcmt1cCA9IHBhY2tldE1hcmt1cCh7XG4gICAgcGFja2V0QmluYXJ5OiB0aGlzLnBhY2tldEJpbmFyeV8sXG4gICAgcGFja2V0U3BlYzogdGhpcy5wYWNrZXRTcGVjXyxcbiAgICBlbmFibGVkRW5jb2RpbmdzSGFzaDogZW5jb2RpbmdzSGFzaCxcbiAgICBjaHVua1NpemU6IHRoaXMuY2h1bmtTaXplXyxcbiAgICBpc01pbmltaXplZDogdGhpcy5pc01pbmltaXplZFxuICB9KTtcbiAgdmFyIGpRdWVyeVdyYXAgPSAkKHJhd01hcmt1cCk7XG4gIE5ldFNpbUxvZ1BhbmVsLmFkanVzdEhlYWRlckNvbHVtbldpZHRocyhqUXVlcnlXcmFwKTtcbiAgTmV0U2ltRW5jb2RpbmdDb250cm9sLmhpZGVSb3dzQnlFbmNvZGluZyhqUXVlcnlXcmFwLCB0aGlzLmVuY29kaW5nc18pO1xuICB0aGlzLnJvb3REaXZfLmh0bWwoalF1ZXJ5V3JhcCk7XG4gIHRoaXMucm9vdERpdl8uZmluZCgnLmV4cGFuZGVyJykuY2xpY2sodGhpcy50b2dnbGVNaW5pbWl6ZWQuYmluZCh0aGlzKSk7XG4gIHRoaXMucm9vdERpdl8udG9nZ2xlQ2xhc3MoJ3VucmVhZCcsIHRoaXMuaXNVbnJlYWQpO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gcm9vdCBkaXYsIGZvciBob29raW5nIHVwIHRvIGEgcGFyZW50IGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7alF1ZXJ5fVxuICovXG5OZXRTaW1Mb2dQYWNrZXQucHJvdG90eXBlLmdldFJvb3QgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLnJvb3REaXZfO1xufTtcblxuLyoqXG4gKiBCZW5lYXRoIHRoZSBnaXZlbiByb290IGVsZW1lbnQsIGFkanVzdCB3aWR0aHMgb2YgcGFja2V0IGhlYWRlciBjb2x1bW5zXG4gKiBhbmQgZmllbGRzIHRvIG1hdGNoIHRoZSBsZXZlbCdzIGNvbmZpZ3VyZWQgcGFja2V0IGZvcm1hdC5cbiAqIEBwYXJhbSB7alF1ZXJ5fSByb290RWxlbWVudFxuICovXG5OZXRTaW1Mb2dQYW5lbC5hZGp1c3RIZWFkZXJDb2x1bW5XaWR0aHMgPSBmdW5jdGlvbiAocm9vdEVsZW1lbnQpIHtcbiAgdmFyIGxldmVsID0gTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpO1xuICB2YXIgZW5jb2RlciA9IG5ldyBQYWNrZXQuRW5jb2RlcihcbiAgICAgIGxldmVsLmFkZHJlc3NGb3JtYXQsXG4gICAgICBsZXZlbC5wYWNrZXRDb3VudEJpdFdpZHRoLFxuICAgICAgbGV2ZWwuY2xpZW50SW5pdGlhbFBhY2tldEhlYWRlcik7XG4gIHZhciBhZGRyZXNzQml0V2lkdGggPSBlbmNvZGVyLmdldEZpZWxkQml0V2lkdGgoXG4gICAgICBQYWNrZXQuSGVhZGVyVHlwZS5UT19BRERSRVNTKTtcbiAgdmFyIHBhY2tldEluZm9CaXRXaWR0aCA9IGVuY29kZXIuZ2V0RmllbGRCaXRXaWR0aChcbiAgICAgIFBhY2tldC5IZWFkZXJUeXBlLlBBQ0tFVF9DT1VOVCk7XG5cbiAgLy8gQWRqdXN0IHdpZHRoIG9mIGFkZHJlc3MgY29sdW1uc1xuICAvLyBGb3IgY29sdW1ucywgNTBweCBpcyBzdWZmaWNpZW50IGZvciA0IGJpdHNcbiAgdmFyIFBYX1BFUl9CSVQgPSA1MCAvIDQ7XG4gIHZhciBhZGRyZXNzQ29sdW1uV2lkdGhJblB4ID0gUFhfUEVSX0JJVCAqIGFkZHJlc3NCaXRXaWR0aDtcblxuICAvLyBBZGp1c3Qgd2lkdGggb2YgYWRkcmVzcyBjb2x1bW5zXG4gIHJvb3RFbGVtZW50LmZpbmQoJ3RkLnRvQWRkcmVzcywgdGgudG9BZGRyZXNzLCB0ZC5mcm9tQWRkcmVzcywgdGguZnJvbUFkZHJlc3MnKVxuICAgICAgLmNzcygnd2lkdGgnLCBhZGRyZXNzQ29sdW1uV2lkdGhJblB4ICsgJ3B4Jyk7XG5cblxuICAvLyBBZGp1c3Qgd2lkdGggb2YgYWRkcmVzcyBpbnB1dCBmaWVsZHNcbiAgLy8gRm9yIGlucHV0cywgM2VtIGlzIHN1ZmZpY2llbnQgZm9yIDQgYml0c1xuICB2YXIgRU1TX1BFUl9CSVQgPSAzIC8gNDtcbiAgdmFyIGFkZHJlc3NGaWVsZFdpZHRoSW5FbXMgPSBFTVNfUEVSX0JJVCAqIGFkZHJlc3NCaXRXaWR0aDtcbiAgcm9vdEVsZW1lbnQuZmluZCgndGQudG9BZGRyZXNzIGlucHV0LCB0ZC5mcm9tQWRkcmVzcyBpbnB1dCcpXG4gICAgICAuY3NzKCd3aWR0aCcsIGFkZHJlc3NGaWVsZFdpZHRoSW5FbXMgKyAnZW0nKTtcblxuXG4gIC8vIEFkanVzdCB3aWR0aCBvZiBwYWNrZXQgaW5mbyBjb2x1bW5cbiAgLy8gUGFja2V0IGluZm8gY29sdW1uIHVzZXMgdHdvIGZpZWxkcyBhbmQgYW4gZXh0cmEgMjFweCBmb3IgXCIgb2YgXCJcbiAgdmFyIHBhY2tldEluZm9Db2x1bW5XaWR0aEluUHggPSAoMiAqIFBYX1BFUl9CSVQgKiBwYWNrZXRJbmZvQml0V2lkdGgpICsgMjE7XG4gIHJvb3RFbGVtZW50LmZpbmQoJ3RkLnBhY2tldEluZm8sIHRoLnBhY2tldEluZm8nKVxuICAgICAgLmNzcygnd2lkdGgnLCBwYWNrZXRJbmZvQ29sdW1uV2lkdGhJblB4ICsgJ3B4Jyk7XG5cbiAgLy8gQWRqdXN0IHdpZHRoIG9mIHBhY2tldCBpbmZvIGZpZWxkc1xuICB2YXIgcGFja2V0SW5mb0ZpZWxkV2lkdGhJbkVtcyA9IEVNU19QRVJfQklUICogcGFja2V0SW5mb0JpdFdpZHRoO1xuICByb290RWxlbWVudC5maW5kKCd0ZC5wYWNrZXRJbmZvIGlucHV0JylcbiAgICAgIC5jc3MoJ3dpZHRoJywgcGFja2V0SW5mb0ZpZWxkV2lkdGhJbkVtcyArICdlbScpO1xufTtcblxuLyoqXG4gKiBDaGFuZ2UgZW5jb2RpbmctZGlzcGxheSBzZXR0aW5nIGFuZCByZS1yZW5kZXIgcGFja2V0IGNvbnRlbnRzIGFjY29yZGluZ2x5LlxuICogQHBhcmFtIHtFbmNvZGluZ1R5cGVbXX0gbmV3RW5jb2RpbmdzXG4gKi9cbk5ldFNpbUxvZ1BhY2tldC5wcm90b3R5cGUuc2V0RW5jb2RpbmdzID0gZnVuY3Rpb24gKG5ld0VuY29kaW5ncykge1xuICB0aGlzLmVuY29kaW5nc18gPSBuZXdFbmNvZGluZ3M7XG4gIHRoaXMucmVuZGVyKCk7XG59O1xuXG4vKipcbiAqIENoYW5nZSBjaHVuayBzaXplIGZvciBpbnRlcnByZXRpbmcgZGF0YSBhbmQgcmUtcmVuZGVyIHBhY2tldCBjb250ZW50c1xuICogYWNjb3JkaW5nbHkuXG4gKiBAcGFyYW0ge251bWJlcn0gbmV3Q2h1bmtTaXplXG4gKi9cbk5ldFNpbUxvZ1BhY2tldC5wcm90b3R5cGUuc2V0Q2h1bmtTaXplID0gZnVuY3Rpb24gKG5ld0NodW5rU2l6ZSkge1xuICB0aGlzLmNodW5rU2l6ZV8gPSBuZXdDaHVua1NpemU7XG4gIHRoaXMucmVuZGVyKCk7XG59O1xuXG4vKipcbiAqIE1hcmsgdGhlIHBhY2tldCBhcyByZWFkLCBjaGFuZ2luZyBpdHMgc3R5bGUgYW5kIHJlbW92aW5nIHRoZSBcIm1hcmsgYXMgcmVhZFwiXG4gKiBidXR0b24uXG4gKi9cbk5ldFNpbUxvZ1BhY2tldC5wcm90b3R5cGUubWFya0FzUmVhZCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuaXNVbnJlYWQpIHtcbiAgICB0aGlzLmlzVW5yZWFkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLm1hcmtBc1JlYWRDYWxsYmFja18oKTtcbiAgfVxufTtcblxuTmV0U2ltTG9nUGFja2V0LnByb3RvdHlwZS50b2dnbGVNaW5pbWl6ZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuaXNNaW5pbWl6ZWQgPSAhdGhpcy5pc01pbmltaXplZDtcbiAgdGhpcy5yZW5kZXIoKTtcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgdmVydGljYWwgc3BhY2UgdGhhdCB0aGlzIGxvZyBwYW5lbCBzaG91bGQgY29uc3VtZSAoaW5jbHVkaW5nIG1hcmdpbnMpXG4gKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0UGl4ZWxzXG4gKi9cbk5ldFNpbUxvZ1BhbmVsLnByb3RvdHlwZS5zZXRIZWlnaHQgPSBmdW5jdGlvbiAoaGVpZ2h0UGl4ZWxzKSB7XG4gIHZhciByb290ID0gdGhpcy5nZXRSb290KCkuZmluZCgnLm5ldHNpbS1wYW5lbCcpO1xuICB2YXIgcGFuZWxIZWFkZXIgPSByb290LmZpbmQoJ2gxJyk7XG4gIHZhciBwYW5lbEJvZHkgPSByb290LmZpbmQoJy5wYW5lbC1ib2R5Jyk7XG5cbiAgdmFyIHBhbmVsTWFyZ2lucyA9IHBhcnNlRmxvYXQocm9vdC5jc3MoJ21hcmdpbi10b3AnKSkgK1xuICAgICAgcGFyc2VGbG9hdChyb290LmNzcygnbWFyZ2luLWJvdHRvbScpKTtcbiAgdmFyIGhlYWRlckhlaWdodCA9IHBhbmVsSGVhZGVyLm91dGVySGVpZ2h0KHRydWUpO1xuICB2YXIgcGFuZWxCb3JkZXJzID0gcGFyc2VGbG9hdChwYW5lbEJvZHkuY3NzKCdib3JkZXItdG9wLXdpZHRoJykpICtcbiAgICAgIHBhcnNlRmxvYXQocGFuZWxCb2R5LmNzcygnYm9yZGVyLWJvdHRvbS13aWR0aCcpKTtcbiAgdmFyIHNjcm9sbE1hcmdpbnMgPSBwYXJzZUZsb2F0KHRoaXMuc2Nyb2xsQXJlYV8uY3NzKCdtYXJnaW4tdG9wJykpICtcbiAgICAgIHBhcnNlRmxvYXQodGhpcy5zY3JvbGxBcmVhXy5jc3MoJ21hcmdpbi1ib3R0b20nKSk7XG5cbiAgLy8gV2Ugc2V0IHRoZSBwYW5lbCBoZWlnaHQgYnkgZml4aW5nIHRoZSBzaXplIG9mIGl0cyBpbm5lciBzY3JvbGxhYmxlXG4gIC8vIGFyZWEuXG4gIHZhciBuZXdTY3JvbGxWaWV3cG9ydEhlaWdodCA9IGhlaWdodFBpeGVscyAtIChwYW5lbE1hcmdpbnMgKyBoZWFkZXJIZWlnaHQgK1xuICAgICAgcGFuZWxCb3JkZXJzICsgc2Nyb2xsTWFyZ2lucyk7XG4gIHRoaXMuc2Nyb2xsQXJlYV8uaGVpZ2h0KE1hdGguZmxvb3IobmV3U2Nyb2xsVmlld3BvcnRIZWlnaHQpKTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge251bWJlcn0gdmVydGljYWwgc3BhY2UgdGhhdCBwYW5lbCBjdXJyZW50bHkgY29uc3VtZXMgKGluY2x1ZGluZ1xuICogICAgICAgICAgbWFyZ2lucykgaW4gcGl4ZWxzLlxuICovXG5OZXRTaW1Mb2dQYW5lbC5wcm90b3R5cGUuZ2V0SGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5nZXRSb290KCkuZmluZCgnLm5ldHNpbS1wYW5lbCcpLm91dGVySGVpZ2h0KHRydWUpO1xufTtcblxuLyoqXG4gKiBBZnRlciB0b2dnbGluZyBwYW5lbCB2aXNpYmlsaXR5LCB0cmlnZ2VyIGEgbGF5b3V0IHVwZGF0ZSBzbyBzZW5kL2xvZyBwYW5lbFxuICogc3BhY2UgaXMgc2hhcmVkIGNvcnJlY3RseS5cbiAqIEBwcml2YXRlXG4gKiBAb3ZlcnJpZGVcbiAqL1xuTmV0U2ltTG9nUGFuZWwucHJvdG90eXBlLm9uTWluaW1pemVyQ2xpY2tfID0gZnVuY3Rpb24gKCkge1xuICBOZXRTaW1Mb2dQYW5lbC5zdXBlclByb3RvdHlwZS5vbk1pbmltaXplckNsaWNrXy5jYWxsKHRoaXMpO1xuICBOZXRTaW1HbG9iYWxzLnVwZGF0ZUxheW91dCgpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB0ID0gZnVuY3Rpb24gYW5vbnltb3VzKGxvY2FscywgZmlsdGVycywgZXNjYXBlXG4vKiovKSB7XG5lc2NhcGUgPSBlc2NhcGUgfHwgZnVuY3Rpb24gKGh0bWwpe1xuICByZXR1cm4gU3RyaW5nKGh0bWwpXG4gICAgLnJlcGxhY2UoLyYoPyFcXHcrOykvZywgJyZhbXA7JylcbiAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKVxuICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG59O1xudmFyIGJ1ZiA9IFtdO1xud2l0aCAobG9jYWxzIHx8IHt9KSB7IChmdW5jdGlvbigpeyBcbiBidWYucHVzaCgnPGRpdiBjbGFzcz1cInNjcm9sbC1hcmVhXCI+XFxuPC9kaXY+XFxuJyk7IH0pKCk7XG59IFxucmV0dXJuIGJ1Zi5qb2luKCcnKTtcbn07XG4gIHJldHVybiBmdW5jdGlvbihsb2NhbHMpIHtcbiAgICByZXR1cm4gdChsb2NhbHMsIHJlcXVpcmUoXCJlanNcIikuZmlsdGVycyk7XG4gIH1cbn0oKSk7IiwibW9kdWxlLmV4cG9ydHM9IChmdW5jdGlvbigpIHtcbiAgdmFyIHQgPSBmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzLCBmaWx0ZXJzLCBlc2NhcGVcbi8qKi8pIHtcbmVzY2FwZSA9IGVzY2FwZSB8fCBmdW5jdGlvbiAoaHRtbCl7XG4gIHJldHVybiBTdHJpbmcoaHRtbClcbiAgICAucmVwbGFjZSgvJig/IVxcdys7KS9nLCAnJmFtcDsnKVxuICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXG4gICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbn07XG52YXIgYnVmID0gW107XG53aXRoIChsb2NhbHMgfHwge30pIHsgKGZ1bmN0aW9uKCl7IFxuIGJ1Zi5wdXNoKCcnKTsxO1xuICB2YXIgTmV0U2ltQ29uc3RhbnRzID0gcmVxdWlyZSgnLi9OZXRTaW1Db25zdGFudHMnKTtcbiAgdmFyIE5ldFNpbUdsb2JhbHMgPSByZXF1aXJlKCcuL05ldFNpbUdsb2JhbHMnKTtcbiAgdmFyIERhdGFDb252ZXJ0ZXJzID0gcmVxdWlyZSgnLi9EYXRhQ29udmVydGVycycpO1xuICB2YXIgaTE4biA9IHJlcXVpcmUoJy4vbG9jYWxlJyk7XG4gIHZhciBnZXRFbmNvZGluZ0xhYmVsID0gcmVxdWlyZSgnLi9OZXRTaW1VdGlscycpLmdldEVuY29kaW5nTGFiZWw7XG4gIHZhciBQYWNrZXQgPSByZXF1aXJlKCcuL1BhY2tldCcpO1xuXG4gIHZhciBsZXZlbCA9IE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKTtcblxuICB2YXIgRW5jb2RpbmdUeXBlID0gTmV0U2ltQ29uc3RhbnRzLkVuY29kaW5nVHlwZTtcbiAgdmFyIFBhY2tldFVJQ29sdW1uVHlwZSA9IE5ldFNpbUNvbnN0YW50cy5QYWNrZXRVSUNvbHVtblR5cGU7XG5cbiAgdmFyIGZvcm1hdEFCID0gRGF0YUNvbnZlcnRlcnMuZm9ybWF0QUI7XG4gIHZhciBmb3JtYXRCaW5hcnkgPSBEYXRhQ29udmVydGVycy5mb3JtYXRCaW5hcnk7XG4gIHZhciBmb3JtYXRIZXggPSBEYXRhQ29udmVydGVycy5mb3JtYXRIZXg7XG4gIHZhciBhbGlnbkRlY2ltYWwgPSBEYXRhQ29udmVydGVycy5hbGlnbkRlY2ltYWw7XG4gIHZhciBiaW5hcnlUb0FCID0gRGF0YUNvbnZlcnRlcnMuYmluYXJ5VG9BQjtcbiAgdmFyIGJpbmFyeVRvSW50ID0gRGF0YUNvbnZlcnRlcnMuYmluYXJ5VG9JbnQ7XG4gIHZhciBiaW5hcnlUb0hleCA9IERhdGFDb252ZXJ0ZXJzLmJpbmFyeVRvSGV4O1xuICB2YXIgYmluYXJ5VG9EZWNpbWFsID0gRGF0YUNvbnZlcnRlcnMuYmluYXJ5VG9EZWNpbWFsO1xuICB2YXIgYmluYXJ5VG9Bc2NpaSA9IERhdGFDb252ZXJ0ZXJzLmJpbmFyeVRvQXNjaWk7XG4gIHZhciBiaW5hcnlUb0FkZHJlc3NTdHJpbmcgPSBmdW5jdGlvbiAoYmluYXJ5U3RyaW5nKSB7XG4gICAgcmV0dXJuIERhdGFDb252ZXJ0ZXJzLmJpbmFyeVRvQWRkcmVzc1N0cmluZyhiaW5hcnlTdHJpbmcsIGxldmVsLmFkZHJlc3NGb3JtYXQpO1xuICB9O1xuICB2YXIgZm9ybWF0QmluYXJ5Rm9yQWRkcmVzc0hlYWRlciA9IGZ1bmN0aW9uIChiaW5hcnlTdHJpbmcpIHtcbiAgICByZXR1cm4gRGF0YUNvbnZlcnRlcnMuZm9ybWF0QmluYXJ5Rm9yQWRkcmVzc0hlYWRlcihiaW5hcnlTdHJpbmcsIGxldmVsLmFkZHJlc3NGb3JtYXQpO1xuICB9O1xuXG4gIC8qKiBAdHlwZSB7UGFja2V0fSAqL1xuICB2YXIgcGFja2V0ID0gbmV3IFBhY2tldChwYWNrZXRTcGVjLCBwYWNrZXRCaW5hcnkpO1xuXG4gIC8qKiBAdHlwZSB7UGFja2V0LkhlYWRlclR5cGVbXX0gKi9cbiAgdmFyIGhlYWRlckZpZWxkcyA9IHBhY2tldFNwZWM7XG5cbiAgdmFyIHNob3dUb0FkZHJlc3MgPSBoZWFkZXJGaWVsZHMuaW5kZXhPZihQYWNrZXQuSGVhZGVyVHlwZS5UT19BRERSRVNTKSA+IC0xO1xuICB2YXIgc2hvd0Zyb21BZGRyZXNzID0gaGVhZGVyRmllbGRzLmluZGV4T2YoUGFja2V0LkhlYWRlclR5cGUuRlJPTV9BRERSRVNTKSA+IC0xO1xuICB2YXIgc2hvd1BhY2tldEluZm8gPSBoZWFkZXJGaWVsZHMuaW5kZXhPZihQYWNrZXQuSGVhZGVyVHlwZS5QQUNLRVRfSU5ERVgpID4gLTEgJiZcbiAgICAgIGhlYWRlckZpZWxkcy5pbmRleE9mKFBhY2tldC5IZWFkZXJUeXBlLlBBQ0tFVF9DT1VOVCkgPiAtMTtcblxuICAvKipcbiAgKiBAbmFtZSBlbmFibGVkRW5jb2RpbmdzSGFzaFxuICAqIEB0eXBlIHtPYmplY3R9XG4gICovXG5cbiAgZnVuY3Rpb24gaXNFbmNvZGluZ0VuYWJsZWQocXVlcnlFbmNvZGluZykge1xuICAgIHJldHVybiBlbmFibGVkRW5jb2RpbmdzSGFzaFtxdWVyeUVuY29kaW5nXSA9PT0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYWNrZXQgb25lLWxpbmUgc3VtbWFyeSBzaG91bGQgb25seSB1c2UgdGhlIGhpZ2hlc3QtbGV2ZWwgZW5hYmxlZCBlbmNvZGluZy5cbiAgICovXG4gIGZ1bmN0aW9uIGdldE9uZUxpbmVQYWNrZXRTdW1tYXJ5KCkge1xuICAgIHZhciBtZXNzYWdlQmluYXJ5ID0gcGFja2V0LmdldEJvZHlBc0JpbmFyeSgpO1xuICAgIGlmIChpc0VuY29kaW5nRW5hYmxlZChFbmNvZGluZ1R5cGUuQVNDSUkpKSB7XG4gICAgICByZXR1cm4gYmluYXJ5VG9Bc2NpaShtZXNzYWdlQmluYXJ5LCBjaHVua1NpemUpO1xuICAgIH0gZWxzZSBpZiAoaXNFbmNvZGluZ0VuYWJsZWQoRW5jb2RpbmdUeXBlLkRFQ0lNQUwpKSB7XG4gICAgICByZXR1cm4gYWxpZ25EZWNpbWFsKGJpbmFyeVRvRGVjaW1hbChtZXNzYWdlQmluYXJ5LCBjaHVua1NpemUpKTtcbiAgICB9IGVsc2UgaWYgKGlzRW5jb2RpbmdFbmFibGVkKEVuY29kaW5nVHlwZS5IRVhBREVDSU1BTCkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRIZXgoYmluYXJ5VG9IZXgobWVzc2FnZUJpbmFyeSksIGNodW5rU2l6ZSk7XG4gICAgfSBlbHNlIGlmIChpc0VuY29kaW5nRW5hYmxlZChFbmNvZGluZ1R5cGUuQklOQVJZKSkge1xuICAgICAgcmV0dXJuIGZvcm1hdEJpbmFyeShtZXNzYWdlQmluYXJ5LCBjaHVua1NpemUpO1xuICAgIH0gZWxzZSBpZiAoaXNFbmNvZGluZ0VuYWJsZWQoRW5jb2RpbmdUeXBlLkFfQU5EX0IpKSB7XG4gICAgICByZXR1cm4gZm9ybWF0QUIoYmluYXJ5VG9BQihtZXNzYWdlQmluYXJ5KSwgY2h1bmtTaXplKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2VCaW5hcnk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtFbmNvZGluZ1R5cGV9IGVuY29kaW5nVHlwZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9BZGRyZXNzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmcm9tQWRkcmVzc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFja2V0SW5mb1xuICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVxuICAgKi9cbiAgZnVuY3Rpb24gbG9nUm93SWZFbmNvZGluZ0VuYWJsZWQoZW5jb2RpbmdUeXBlLCB0b0FkZHJlc3MsIGZyb21BZGRyZXNzLCBwYWNrZXRJbmZvLCBtZXNzYWdlKSB7XG4gICAgaWYgKGlzRW5jb2RpbmdFbmFibGVkKGVuY29kaW5nVHlwZSkpIHtcbiAgICAgIDsgYnVmLnB1c2goJ1xcbiAgICAgICAgPHRyIGNsYXNzPVwiJywgZXNjYXBlKCg3OSwgIGVuY29kaW5nVHlwZSApKSwgJ1wiPlxcbiAgICAgICAgICA8dGggbm93cmFwIGNsYXNzPVwiJywgZXNjYXBlKCg4MCwgIFBhY2tldFVJQ29sdW1uVHlwZS5FTkNPRElOR19MQUJFTCApKSwgJ1wiPicsIGVzY2FwZSgoODAsICBnZXRFbmNvZGluZ0xhYmVsKGVuY29kaW5nVHlwZSkgKSksICc8L3RoPlxcbiAgICAgICAgICAnKTs4MTsgaWYgKHNob3dUb0FkZHJlc3MpIHsgOyBidWYucHVzaCgnXFxuICAgICAgICAgICAgPHRkIG5vd3JhcCBjbGFzcz1cIicsIGVzY2FwZSgoODIsICBQYWNrZXRVSUNvbHVtblR5cGUuVE9fQUREUkVTUyApKSwgJ1wiPicsIGVzY2FwZSgoODIsICB0b0FkZHJlc3MgKSksICc8L3RkPlxcbiAgICAgICAgICAnKTs4MzsgfSA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgICAgJyk7ODQ7IGlmIChzaG93RnJvbUFkZHJlc3MpIHsgOyBidWYucHVzaCgnXFxuICAgICAgICAgICAgPHRkIG5vd3JhcCBjbGFzcz1cIicsIGVzY2FwZSgoODUsICBQYWNrZXRVSUNvbHVtblR5cGUuRlJPTV9BRERSRVNTICkpLCAnXCI+JywgZXNjYXBlKCg4NSwgIGZyb21BZGRyZXNzICkpLCAnPC90ZD5cXG4gICAgICAgICAgJyk7ODY7IH0gOyBidWYucHVzaCgnXFxuICAgICAgICAgICcpOzg3OyBpZiAoc2hvd1BhY2tldEluZm8pIHsgOyBidWYucHVzaCgnXFxuICAgICAgICAgICAgPHRkIG5vd3JhcCBjbGFzcz1cIicsIGVzY2FwZSgoODgsICBQYWNrZXRVSUNvbHVtblR5cGUuUEFDS0VUX0lORk8gKSksICdcIj4nLCBlc2NhcGUoKDg4LCAgcGFja2V0SW5mbyApKSwgJzwvdGQ+XFxuICAgICAgICAgICcpOzg5OyB9IDsgYnVmLnB1c2goJ1xcbiAgICAgICAgICA8dGQgY2xhc3M9XCInLCBlc2NhcGUoKDkwLCAgUGFja2V0VUlDb2x1bW5UeXBlLk1FU1NBR0UgKSksICdcIj4nLCBlc2NhcGUoKDkwLCAgbWVzc2FnZSApKSwgJzwvdGQ+XFxuICAgICAgICA8L3RyPlxcbiAgICAnKTs5MjtcbiAgICB9XG4gIH1cbiA7IGJ1Zi5wdXNoKCdcXG4gICcpOzk2O1xuICAgIHZhciB0b0FkZHJlc3MgPSBzaG93VG9BZGRyZXNzID8gcGFja2V0LmdldEhlYWRlckFzQmluYXJ5KFBhY2tldC5IZWFkZXJUeXBlLlRPX0FERFJFU1MpIDogJyc7XG4gICAgdmFyIGZyb21BZGRyZXNzID0gc2hvd0Zyb21BZGRyZXNzID8gcGFja2V0LmdldEhlYWRlckFzQmluYXJ5KFBhY2tldC5IZWFkZXJUeXBlLkZST01fQUREUkVTUykgOiAnJztcbiAgICB2YXIgcGFja2V0SW5kZXggPSBzaG93UGFja2V0SW5mbyA/IHBhY2tldC5nZXRIZWFkZXJBc0JpbmFyeShQYWNrZXQuSGVhZGVyVHlwZS5QQUNLRVRfSU5ERVgpIDogJyc7XG4gICAgdmFyIHBhY2tldENvdW50ID0gc2hvd1BhY2tldEluZm8gPyBwYWNrZXQuZ2V0SGVhZGVyQXNCaW5hcnkoUGFja2V0LkhlYWRlclR5cGUuUEFDS0VUX0NPVU5UKSA6ICcnO1xuICAgIHZhciBtZXNzYWdlID0gcGFja2V0LmdldEJvZHlBc0JpbmFyeSgpO1xuICA7IGJ1Zi5wdXNoKCdcXG4gICcpOzEwMzsgaWYgKGlzTWluaW1pemVkKSB7IDsgYnVmLnB1c2goJ1xcbiAgICAgIDxkaXYgY2xhc3M9XCJtaW5pbWl6ZWQtcGFja2V0IHNpbmdsZS1saW5lLXdpdGgtZWxsaXBzaXMgdXNlci1kYXRhXCI+XFxuICAgICAgICA8aSBjbGFzcz1cImZhIGZhLXBsdXMtc3F1YXJlIGV4cGFuZGVyXCI+PC9pPlxcbiAgICAgICAgJywgZXNjYXBlKCgxMDYsICBnZXRPbmVMaW5lUGFja2V0U3VtbWFyeSgpICkpLCAnXFxuICAgICAgPC9kaXY+XFxuICAnKTsxMDg7IH0gZWxzZSB7IDsgYnVmLnB1c2goJ1xcbiAgICA8dGFibGUgY2xhc3M9XCJtYXhpbWl6ZWQtcGFja2V0XCI+XFxuICAgICAgPHRoZWFkPlxcbiAgICAgICAgPHRyPlxcbiAgICAgICAgICA8dGggbm93cmFwIGNsYXNzPVwiJywgZXNjYXBlKCgxMTIsICBQYWNrZXRVSUNvbHVtblR5cGUuRU5DT0RJTkdfTEFCRUwgKSksICdcIj5cXG4gICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLW1pbnVzLXNxdWFyZSBleHBhbmRlclwiPjwvaT5cXG4gICAgICAgICAgPC90aD5cXG4gICAgICAgICAgJyk7MTE1OyBpZiAoc2hvd1RvQWRkcmVzcykgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgICAgICA8dGggbm93cmFwIGNsYXNzPVwiJywgZXNjYXBlKCgxMTYsICBQYWNrZXRVSUNvbHVtblR5cGUuVE9fQUREUkVTUyApKSwgJ1wiPicsIGVzY2FwZSgoMTE2LCAgaTE4bi50bygpICkpLCAnPC90aD5cXG4gICAgICAgICAgJyk7MTE3OyB9IDsgYnVmLnB1c2goJ1xcbiAgICAgICAgICAnKTsxMTg7IGlmIChzaG93RnJvbUFkZHJlc3MpIHsgOyBidWYucHVzaCgnXFxuICAgICAgICAgICAgPHRoIG5vd3JhcCBjbGFzcz1cIicsIGVzY2FwZSgoMTE5LCAgUGFja2V0VUlDb2x1bW5UeXBlLkZST01fQUREUkVTUyApKSwgJ1wiPicsIGVzY2FwZSgoMTE5LCAgaTE4bi5mcm9tKCkgKSksICc8L3RoPlxcbiAgICAgICAgICAnKTsxMjA7IH0gOyBidWYucHVzaCgnXFxuICAgICAgICAgICcpOzEyMTsgaWYgKHNob3dQYWNrZXRJbmZvKSB7IDsgYnVmLnB1c2goJ1xcbiAgICAgICAgICAgIDx0aCBub3dyYXAgY2xhc3M9XCInLCBlc2NhcGUoKDEyMiwgIFBhY2tldFVJQ29sdW1uVHlwZS5QQUNLRVRfSU5GTyApKSwgJ1wiPicsIGVzY2FwZSgoMTIyLCAgaTE4bi5wYWNrZXQoKSApKSwgJzwvdGg+XFxuICAgICAgICAgICcpOzEyMzsgfSA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgICAgPHRoIGNsYXNzPVwiJywgZXNjYXBlKCgxMjQsICBQYWNrZXRVSUNvbHVtblR5cGUuTUVTU0FHRSApKSwgJ1wiPlxcbiAgICAgICAgICAgICcsIGVzY2FwZSgoMTI1LCAgaTE4bi5tZXNzYWdlKCkgKSksICdcXG4gICAgICAgICAgPC90aD5cXG4gICAgICAgIDwvdHI+XFxuICAgICAgPC90aGVhZD5cXG4gICAgICA8dGJvZHk+XFxuICAgICAgJyk7MTMwO1xuICAgICAgICBsb2dSb3dJZkVuY29kaW5nRW5hYmxlZChFbmNvZGluZ1R5cGUuQVNDSUksXG4gICAgICAgICAgICBiaW5hcnlUb0FkZHJlc3NTdHJpbmcodG9BZGRyZXNzKSxcbiAgICAgICAgICAgIGJpbmFyeVRvQWRkcmVzc1N0cmluZyhmcm9tQWRkcmVzcyksXG4gICAgICAgICAgICBpMThuLnhPZllQYWNrZXRzKHtcbiAgICAgICAgICAgICAgeDogYmluYXJ5VG9JbnQocGFja2V0SW5kZXgpLFxuICAgICAgICAgICAgICB5OiBiaW5hcnlUb0ludChwYWNrZXRDb3VudClcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgYmluYXJ5VG9Bc2NpaShtZXNzYWdlLCBjaHVua1NpemUpKTtcblxuICAgICAgICBsb2dSb3dJZkVuY29kaW5nRW5hYmxlZChFbmNvZGluZ1R5cGUuREVDSU1BTCxcbiAgICAgICAgICAgIGJpbmFyeVRvQWRkcmVzc1N0cmluZyh0b0FkZHJlc3MpLFxuICAgICAgICAgICAgYmluYXJ5VG9BZGRyZXNzU3RyaW5nKGZyb21BZGRyZXNzKSxcbiAgICAgICAgICAgIGkxOG4ueE9mWVBhY2tldHMoe1xuICAgICAgICAgICAgICB4OiBiaW5hcnlUb0ludChwYWNrZXRJbmRleCksXG4gICAgICAgICAgICAgIHk6IGJpbmFyeVRvSW50KHBhY2tldENvdW50KVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBhbGlnbkRlY2ltYWwoYmluYXJ5VG9EZWNpbWFsKG1lc3NhZ2UsIGNodW5rU2l6ZSkpKTtcblxuICAgICAgICBsb2dSb3dJZkVuY29kaW5nRW5hYmxlZChFbmNvZGluZ1R5cGUuSEVYQURFQ0lNQUwsXG4gICAgICAgICAgICBiaW5hcnlUb0hleCh0b0FkZHJlc3MpLFxuICAgICAgICAgICAgYmluYXJ5VG9IZXgoZnJvbUFkZHJlc3MpLFxuICAgICAgICAgICAgaTE4bi54T2ZZUGFja2V0cyh7XG4gICAgICAgICAgICAgIHg6IGJpbmFyeVRvSGV4KHBhY2tldEluZGV4KSxcbiAgICAgICAgICAgICAgeTogYmluYXJ5VG9IZXgocGFja2V0Q291bnQpXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGZvcm1hdEhleChiaW5hcnlUb0hleChtZXNzYWdlKSwgY2h1bmtTaXplKSk7XG5cbiAgICAgICAgbG9nUm93SWZFbmNvZGluZ0VuYWJsZWQoRW5jb2RpbmdUeXBlLkJJTkFSWSxcbiAgICAgICAgICAgIGZvcm1hdEJpbmFyeUZvckFkZHJlc3NIZWFkZXIodG9BZGRyZXNzLCA0KSxcbiAgICAgICAgICAgIGZvcm1hdEJpbmFyeUZvckFkZHJlc3NIZWFkZXIoZnJvbUFkZHJlc3MsIDQpLFxuICAgICAgICAgICAgZm9ybWF0QmluYXJ5KHBhY2tldEluZGV4ICsgcGFja2V0Q291bnQsIGxldmVsLnBhY2tldENvdW50Qml0V2lkdGgpLFxuICAgICAgICAgICAgZm9ybWF0QmluYXJ5KG1lc3NhZ2UsIGNodW5rU2l6ZSkpO1xuXG4gICAgICAgIGxvZ1Jvd0lmRW5jb2RpbmdFbmFibGVkKEVuY29kaW5nVHlwZS5BX0FORF9CLFxuICAgICAgICAgICAgYmluYXJ5VG9BQih0b0FkZHJlc3MpLFxuICAgICAgICAgICAgYmluYXJ5VG9BQihmcm9tQWRkcmVzcyksXG4gICAgICAgICAgICBmb3JtYXRBQihiaW5hcnlUb0FCKHBhY2tldEluZGV4ICsgcGFja2V0Q291bnQpLCBsZXZlbC5wYWNrZXRDb3VudEJpdFdpZHRoKSxcbiAgICAgICAgICAgIGZvcm1hdEFCKGJpbmFyeVRvQUIobWVzc2FnZSksIGNodW5rU2l6ZSkpO1xuICAgICAgIDsgYnVmLnB1c2goJ1xcbiAgICAgIDwvdGJvZHk+XFxuICAgIDwvdGFibGU+XFxuICAnKTsxNzI7IH0gOyBidWYucHVzaCgnXFxuJyk7IH0pKCk7XG59IFxucmV0dXJuIGJ1Zi5qb2luKCcnKTtcbn07XG4gIHJldHVybiBmdW5jdGlvbihsb2NhbHMpIHtcbiAgICByZXR1cm4gdChsb2NhbHMsIHJlcXVpcmUoXCJlanNcIikuZmlsdGVycyk7XG4gIH1cbn0oKSk7IiwiLyoqXG4gKiBAb3ZlcnZpZXcgU2ltdWxhdGlvbiBlbnRpdHkgY29udHJvbGxlciByZXNlcnZlZCBmb3IgdGhlIGxvY2FsIGNsaWVudCdzXG4gKiAgICAgICAgICAgc2ltdWxhdGlvbiBub2RlLlxuICogQHNlZSBOZXRTaW1DbGllbnROb2RlIGZvciB0aGUgY29udHJvbGxlciB1c2VkIGZvciBvdGhlciBjbGllbnQgbm9kZXNcbiAqICAgICAgaW4gdGhlIHNpbXVsYXRpb24uXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIF8gPSB1dGlscy5nZXRMb2Rhc2goKTtcbnZhciBpMThuID0gcmVxdWlyZSgnLi9sb2NhbGUnKTtcbnZhciBOZXRTaW1DbGllbnROb2RlID0gcmVxdWlyZSgnLi9OZXRTaW1DbGllbnROb2RlJyk7XG52YXIgTmV0U2ltRW50aXR5ID0gcmVxdWlyZSgnLi9OZXRTaW1FbnRpdHknKTtcbnZhciBOZXRTaW1BbGVydCA9IHJlcXVpcmUoJy4vTmV0U2ltQWxlcnQnKTtcbnZhciBOZXRTaW1NZXNzYWdlID0gcmVxdWlyZSgnLi9OZXRTaW1NZXNzYWdlJyk7XG52YXIgTmV0U2ltTG9nZ2VyID0gcmVxdWlyZSgnLi9OZXRTaW1Mb2dnZXInKTtcbnZhciBOZXRTaW1Sb3V0ZXJOb2RlID0gcmVxdWlyZSgnLi9OZXRTaW1Sb3V0ZXJOb2RlJyk7XG52YXIgT2JzZXJ2YWJsZUV2ZW50ID0gcmVxdWlyZSgnLi4vT2JzZXJ2YWJsZUV2ZW50Jyk7XG5cbnZhciBsb2dnZXIgPSBOZXRTaW1Mb2dnZXIuZ2V0U2luZ2xldG9uKCk7XG52YXIgTmV0U2ltQ29uc3RhbnRzID0gcmVxdWlyZSgnLi9OZXRTaW1Db25zdGFudHMnKTtcbnZhciBOZXRTaW1HbG9iYWxzID0gcmVxdWlyZSgnLi9OZXRTaW1HbG9iYWxzJyk7XG5cbnZhciBNZXNzYWdlR3JhbnVsYXJpdHkgPSBOZXRTaW1Db25zdGFudHMuTWVzc2FnZUdyYW51bGFyaXR5O1xuXG4vKipcbiAqIENsaWVudCBtb2RlbCBvZiBub2RlIGJlaW5nIHNpbXVsYXRlZCBvbiB0aGUgbG9jYWwgY2xpZW50LlxuICpcbiAqIFByb3ZpZGVzIHNwZWNpYWwgYWNjZXNzIGZvciBtYW5pcHVsYXRpbmcgdGhlIGxvY2FsbHktb3duZWQgY2xpZW50IG5vZGUgaW5cbiAqIHdheXMgdGhhdCB5b3UgYXJlbid0IGFsbG93ZWQgdG8gbWFuaXB1bGF0ZSBvdGhlciBjbGllbnQgbm9kZXMuXG4gKlxuICogQHBhcmFtIHshTmV0U2ltU2hhcmR9IHNoYXJkXG4gKiBAcGFyYW0ge09iamVjdH0gW2NsaWVudFJvd10gLSBMb2JieSByb3cgZm9yIHRoaXMgcm91dGVyLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXVnbWVudHMgTmV0U2ltQ2xpZW50Tm9kZVxuICovXG52YXIgTmV0U2ltTG9jYWxDbGllbnROb2RlID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc2hhcmQsIGNsaWVudFJvdykge1xuICBOZXRTaW1DbGllbnROb2RlLmNhbGwodGhpcywgc2hhcmQsIGNsaWVudFJvdyk7XG5cbiAgLy8gVE9ETyAoYmJ1Y2hhbmFuKTogQ29uc2lkZXI6XG4gIC8vICAgICAgRG8gd2UgYmVuZWZpdCBmcm9tIGluaGVyaXRhbmNlIGhlcmU/ICBXb3VsZCBpdCBiZSBjbGVhbmVyIHRvIG1ha2UgdGhpc1xuICAvLyAgICAgIG5vdC1hbi1lbnRpdHkgdGhhdCBtYW5pcHVsYXRlcyBhIHN0b2NrIE5ldFNpbUNsaWVudE5vZGU/ICBXaWxsIGFub3RoZXJcbiAgLy8gICAgICBkZXZlbG9wZXIgZmluZCBpdCBlYXN5IHRvIHVuZGVyc3RhbmQgaG93IHRoaXMgY2xhc3Mgd29ya3M/XG5cbiAgLyoqXG4gICAqIENsaWVudCBub2RlcyBjYW4gYmUgY29ubmVjdGVkIHRvIG90aGVyIGNsaWVudHMuXG4gICAqIEB0eXBlIHtOZXRTaW1DbGllbnROb2RlfVxuICAgKi9cbiAgdGhpcy5teVJlbW90ZUNsaWVudCA9IG51bGw7XG5cbiAgLyoqXG4gICAqIElEIG9mIHRoZSByb3V0ZXIgdGhpcyBjbGllbnQgbm9kZSBpcyBjb25uZWN0ZWQgdG8uICBVbmRlZmluZWQgaWZcbiAgICogbm90IGNvbm5lY3RlZCB0byBhIHJvdXRlci5cbiAgICogQHR5cGUge251bWJlcnx1bmRlZmluZWR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLm15Um91dGVySURfID0gdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBTZXQgb2Ygcm91dGVyIGNvbnRyb2xsZXJzIGVuYWJsZWQgZm9yIHNpbXVsYXRpb24gYnkgdGhpcyBub2RlLlxuICAgKiBAdHlwZSB7TmV0U2ltUm91dGVyTm9kZVtdfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5yb3V0ZXJzXyA9IFtdO1xuXG4gIC8qKlxuICAgKiBXaWRnZXQgd2hlcmUgd2Ugd2lsbCBwb3N0IHNlbnQgbWVzc2FnZXMuXG4gICAqIEB0eXBlIHtOZXRTaW1Mb2dQYW5lbH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuc2VudExvZ18gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBXaWRnZXQgd2hlcmUgd2Ugd2lsbCBwb3N0IHJlY2VpdmVkIG1lc3NhZ2VzXG4gICAqIEB0eXBlIHtOZXRTaW1Mb2dQYW5lbH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucmVjZWl2ZWRMb2dfID0gbnVsbDtcblxuICAvKipcbiAgICogQ2hhbmdlIGV2ZW50IG90aGVycyBjYW4gb2JzZXJ2ZSwgd2hpY2ggd2Ugd2lsbCBmaXJlIHdoZW4gd2VcbiAgICogY29ubmVjdCBvciBkaXNjb25uZWN0IGZyb20gYSByb3V0ZXIgb3IgcmVtb3RlIGNsaWVudFxuICAgKiBAdHlwZSB7T2JzZXJ2YWJsZUV2ZW50fVxuICAgKi9cbiAgdGhpcy5yZW1vdGVDaGFuZ2UgPSBuZXcgT2JzZXJ2YWJsZUV2ZW50KCk7XG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZvciB3aGVuIHNvbWV0aGluZyBpbmRpY2F0ZXMgdGhhdCB0aGlzIG5vZGUgaGFzIGJlZW5cbiAgICogZGlzY29ubmVjdGVkIGZyb20gdGhlIGluc3RhbmNlLlxuICAgKiBAdHlwZSB7ZnVuY3Rpb259XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLm9uTm9kZUxvc3RDb25uZWN0aW9uXyA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIC8qKlxuICAgKiBFdmVudCByZWdpc3RyYXRpb24gaW5mb3JtYXRpb25cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHRoaXMuZXZlbnRLZXlzID0ge307XG59O1xuTmV0U2ltTG9jYWxDbGllbnROb2RlLmluaGVyaXRzKE5ldFNpbUNsaWVudE5vZGUpO1xuXG4vKipcbiAqIFN0YXRpYyBhc3luYyBjcmVhdGlvbiBtZXRob2QuIFNlZSBOZXRTaW1FbnRpdHkuY3JlYXRlKCkuXG4gKiBAcGFyYW0geyFOZXRTaW1TaGFyZH0gc2hhcmRcbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwbGF5TmFtZVxuICogQHBhcmFtIHshTm9kZVN0eWxlQ2FsbGJhY2t9IG9uQ29tcGxldGUgLSBNZXRob2QgdGhhdCB3aWxsIGJlIGdpdmVuIHRoZVxuICogICAgICAgIGNyZWF0ZWQgZW50aXR5LCBvciBudWxsIGlmIGVudGl0eSBjcmVhdGlvbiBmYWlsZWQuXG4gKi9cbk5ldFNpbUxvY2FsQ2xpZW50Tm9kZS5jcmVhdGUgPSBmdW5jdGlvbiAoc2hhcmQsIGRpc3BsYXlOYW1lLCBvbkNvbXBsZXRlKSB7XG4gIC8vIFRPRE8gKGJidWNoYW5hbik6IE1vZGlmeSBhbmQgcmV0dXJuIHRoZSB0ZW1wbGF0ZSBub2RlIGluc3RlYWQgb2ZcbiAgLy8gbWFraW5nIHR3byBpbiB0aGlzIG1ldGhvZC5cbiAgdmFyIHRlbXBsYXRlTm9kZSA9IG5ldyBOZXRTaW1Mb2NhbENsaWVudE5vZGUoc2hhcmQpO1xuICB0ZW1wbGF0ZU5vZGUuZGlzcGxheU5hbWVfID0gZGlzcGxheU5hbWU7XG4gIHRlbXBsYXRlTm9kZS5nZXRUYWJsZSgpLmNyZWF0ZSh0ZW1wbGF0ZU5vZGUuYnVpbGRSb3coKSwgZnVuY3Rpb24gKGVyciwgcm93KSB7XG4gICAgaWYgKGVycikge1xuICAgICAgb25Db21wbGV0ZShlcnIsIG51bGwpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBuZXdOb2RlID0gbmV3IE5ldFNpbUxvY2FsQ2xpZW50Tm9kZShzaGFyZCwgcm93KTtcbiAgICBvbkNvbXBsZXRlKG51bGwsIG5ld05vZGUpO1xuICB9KTtcbn07XG5cbi8qKiBTZXQgbm9kZSdzIGRpc3BsYXkgbmFtZS4gIERvZXMgbm90IHRyaWdnZXIgYW4gdXBkYXRlISAqL1xuTmV0U2ltTG9jYWxDbGllbnROb2RlLnByb3RvdHlwZS5zZXREaXNwbGF5TmFtZSA9IGZ1bmN0aW9uIChkaXNwbGF5TmFtZSkge1xuICB0aGlzLmRpc3BsYXlOYW1lXyA9IGRpc3BsYXlOYW1lO1xufTtcblxuLyoqXG4gKiBDb25maWd1cmUgdGhpcyBub2RlIGNvbnRyb2xsZXIgdG8gYWN0aXZlbHkgc2ltdWxhdGUsIGFuZCB0byBwb3N0IHNlbnQgYW5kXG4gKiByZWNlaXZlZCBtZXNzYWdlcyB0byB0aGUgZ2l2ZW4gbG9nIHdpZGdldHMuXG4gKiBAcGFyYW0geyFOZXRTaW1Mb2dQYW5lbH0gc2VudExvZ1xuICogQHBhcmFtIHshTmV0U2ltTG9nUGFuZWx9IHJlY2VpdmVkTG9nXG4gKi9cbk5ldFNpbUxvY2FsQ2xpZW50Tm9kZS5wcm90b3R5cGUuaW5pdGlhbGl6ZVNpbXVsYXRpb24gPSBmdW5jdGlvbiAoc2VudExvZyxcbiAgICByZWNlaXZlZExvZykge1xuICB0aGlzLnNlbnRMb2dfID0gc2VudExvZztcbiAgdGhpcy5yZWNlaXZlZExvZ18gPSByZWNlaXZlZExvZztcblxuICAvLyBTdWJzY3JpYmUgdG8gdGFibGUgY2hhbmdlc1xuICB0aGlzLmV2ZW50S2V5cy5ub2RlVGFibGUgPSB0aGlzLnNoYXJkXy5ub2RlVGFibGUudGFibGVDaGFuZ2UucmVnaXN0ZXIoXG4gICAgICB0aGlzLm9uTm9kZVRhYmxlQ2hhbmdlXy5iaW5kKHRoaXMpKTtcbiAgdGhpcy5ldmVudEtleXMud2lyZVRhYmxlID0gdGhpcy5zaGFyZF8ud2lyZVRhYmxlLnRhYmxlQ2hhbmdlLnJlZ2lzdGVyKFxuICAgICAgdGhpcy5vbldpcmVUYWJsZUNoYW5nZV8uYmluZCh0aGlzKSk7XG4gIHRoaXMuZXZlbnRLZXlzLm1lc3NhZ2VUYWJsZSA9IHRoaXMuc2hhcmRfLm1lc3NhZ2VUYWJsZS50YWJsZUNoYW5nZS5yZWdpc3RlcihcbiAgICAgIHRoaXMub25NZXNzYWdlVGFibGVDaGFuZ2VfLmJpbmQodGhpcykpO1xuICB0aGlzLmV2ZW50S2V5cy5yZWdpc3RlcmVkT25TaGFyZCA9IHRoaXMuc2hhcmRfO1xuXG4gIC8vIFNldCB1cCBpbml0aWFsIHN0YXRlIGZyb20gY2FjaGVkIHJvd3NcbiAgdGhpcy5vbk5vZGVUYWJsZUNoYW5nZV8oKTtcbn07XG5cbi8qKlxuICogR2l2ZXMgdGhlIHNpbXVsYXRpbmcgbm9kZSBhIGNoYW5jZSB0byB1bnJlZ2lzdGVyIGZyb20gYW55dGhpbmcgaXQgd2FzXG4gKiBvYnNlcnZpbmcuXG4gKi9cbk5ldFNpbUxvY2FsQ2xpZW50Tm9kZS5wcm90b3R5cGUuc3RvcFNpbXVsYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmV2ZW50S2V5cy5yZWdpc3RlcmVkT25TaGFyZCkge1xuICAgIHRoaXMuZXZlbnRLZXlzLnJlZ2lzdGVyZWRPblNoYXJkLm5vZGVUYWJsZS50YWJsZUNoYW5nZS51bnJlZ2lzdGVyKFxuICAgICAgICB0aGlzLmV2ZW50S2V5cy5ub2RlVGFibGUpO1xuICAgIHRoaXMuZXZlbnRLZXlzLnJlZ2lzdGVyZWRPblNoYXJkLndpcmVUYWJsZS50YWJsZUNoYW5nZS51bnJlZ2lzdGVyKFxuICAgICAgICB0aGlzLmV2ZW50S2V5cy53aXJlVGFibGUpO1xuICAgIHRoaXMuZXZlbnRLZXlzLnJlZ2lzdGVyZWRPblNoYXJkLm1lc3NhZ2VUYWJsZS50YWJsZUNoYW5nZS51bnJlZ2lzdGVyKFxuICAgICAgICB0aGlzLmV2ZW50S2V5cy5tZXNzYWdlVGFibGUpO1xuICAgIHRoaXMuZXZlbnRLZXlzLnJlZ2lzdGVyZWRPblNoYXJkID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBUaWNrcyB0aGUgc2ltdWxhdGlvbiByb3V0ZXJzXG4gKiBAcGFyYW0geyFSdW5Mb29wLkNsb2NrfSBjbG9ja1xuICovXG5OZXRTaW1Mb2NhbENsaWVudE5vZGUucHJvdG90eXBlLnRpY2sgPSBmdW5jdGlvbiAoY2xvY2spIHtcbiAgLy8gVE9ETyAoYmJ1Y2hhbmFuKTogTW92ZSB0aGUgcm91dGVyIGNvbGxlY3Rpb24gYW5kIHRpY2tpbmcgdGhlXG4gIC8vIHJvdXRlcnMgdXAgdG8gbmV0c2ltLmpzIChvciBlbHNld2hlcmUpXG4gIHRoaXMucm91dGVyc18uZm9yRWFjaChmdW5jdGlvbiAocm91dGVyKSB7XG4gICAgcm91dGVyLnRpY2soY2xvY2spO1xuICB9KTtcbn07XG5cbi8qKlxuICogR2l2ZSB0aGlzIG5vZGUgYW4gYWN0aW9uIHRvIHRha2UgaWYgaXQgZGV0ZWN0cyB0aGF0IGl0IGlzIG5vIGxvbmdlciBwYXJ0XG4gKiBvZiB0aGUgc2hhcmQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBvbk5vZGVMb3N0Q29ubmVjdGlvblxuICovXG5OZXRTaW1Mb2NhbENsaWVudE5vZGUucHJvdG90eXBlLnNldExvc3RDb25uZWN0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiAoXG4gICAgb25Ob2RlTG9zdENvbm5lY3Rpb24pIHtcbiAgdGhpcy5vbk5vZGVMb3N0Q29ubmVjdGlvbl8gPSBvbk5vZGVMb3N0Q29ubmVjdGlvbjtcbn07XG5cbi8qKlxuICogSWYgYSBjbGllbnQgdXBkYXRlIGZhaWxzLCBzaG91bGQgYXR0ZW1wdCBhbiBhdXRvbWF0aWMgcmVjb25uZWN0LlxuICogQHBhcmFtIHtOb2RlU3R5bGVDYWxsYmFja30gW29uQ29tcGxldGVdXG4gKi9cbk5ldFNpbUxvY2FsQ2xpZW50Tm9kZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKG9uQ29tcGxldGUpIHtcbiAgb25Db21wbGV0ZSA9IG9uQ29tcGxldGUgfHwgZnVuY3Rpb24gKCkge307XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBOZXRTaW1Mb2NhbENsaWVudE5vZGUuc3VwZXJQcm90b3R5cGUudXBkYXRlLmNhbGwodGhpcywgZnVuY3Rpb24gKGVyciwgcmVzdWx0KSB7XG4gICAgaWYgKGVycikge1xuICAgICAgbG9nZ2VyLmVycm9yKFwiTG9jYWwgbm9kZSB1cGRhdGUgZmFpbGVkOiBcIiArIGVyci5tZXNzYWdlKTtcbiAgICAgIHNlbGYub25Ob2RlTG9zdENvbm5lY3Rpb25fKCk7XG4gICAgfVxuICAgIG9uQ29tcGxldGUoZXJyLCByZXN1bHQpO1xuICB9KTtcbn07XG5cbi8qKlxuICogQ29ubmVjdCB0byBhIHJlbW90ZSBjbGllbnQgbm9kZS5cbiAqIEBwYXJhbSB7TmV0U2ltQ2xpZW50Tm9kZX0gY2xpZW50XG4gKiBAcGFyYW0geyFOb2RlU3R5bGVDYWxsYmFja30gb25Db21wbGV0ZVxuICovXG5OZXRTaW1Mb2NhbENsaWVudE5vZGUucHJvdG90eXBlLmNvbm5lY3RUb0NsaWVudCA9IGZ1bmN0aW9uIChjbGllbnQsIG9uQ29tcGxldGUpIHtcbiAgdGhpcy5jb25uZWN0VG9Ob2RlKGNsaWVudCwgZnVuY3Rpb24gKGVyciwgd2lyZSkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIG9uQ29tcGxldGUoZXJyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBDaGVjayB3aGV0aGVyIFdFIGp1c3QgZXN0YWJsaXNoZWQgYSBtdXR1YWwgY29ubmVjdGlvbiB3aXRoIGEgcmVtb3RlIGNsaWVudC5cbiAgICB0aGlzLnNoYXJkXy53aXJlVGFibGUucmVmcmVzaCgpLmFsd2F5cyhmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLm9uV2lyZVRhYmxlQ2hhbmdlXyh0aGlzLnNoYXJkXy53aXJlVGFibGUucmVhZEFsbCgpKTtcbiAgICAgIG9uQ29tcGxldGUoZXJyLCB3aXJlKTtcbiAgICB9LmJpbmQodGhpcykpO1xuICB9LmJpbmQodGhpcykpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0geyFOZXRTaW1Sb3V0ZXJOb2RlfSByb3V0ZXJcbiAqIEBwYXJhbSB7Tm9kZVN0eWxlQ2FsbGJhY2t9IG9uQ29tcGxldGVcbiAqL1xuTmV0U2ltTG9jYWxDbGllbnROb2RlLnByb3RvdHlwZS5jb25uZWN0VG9Sb3V0ZXIgPSBmdW5jdGlvbiAocm91dGVyLCBvbkNvbXBsZXRlKSB7XG4gIG9uQ29tcGxldGUgPSBvbkNvbXBsZXRlIHx8IGZ1bmN0aW9uICgpIHt9O1xuXG4gIGxvZ2dlci5pbmZvKHRoaXMuZ2V0RGlzcGxheU5hbWUoKSArIFwiOiBDb25uZWN0aW5nIHRvIFwiICsgcm91dGVyLmdldERpc3BsYXlOYW1lKCkpO1xuICB0aGlzLmNvbm5lY3RUb05vZGUocm91dGVyLCBmdW5jdGlvbiAoZXJyLCB3aXJlKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgb25Db21wbGV0ZShlcnIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMubXlSb3V0ZXJJRF8gPSByb3V0ZXIuZW50aXR5SUQ7XG5cbiAgICB0aGlzLnJlbW90ZUNoYW5nZS5ub3RpZnlPYnNlcnZlcnModGhpcy5nZXRPdXRnb2luZ1dpcmUoKSwgdGhpcy5nZXRNeVJvdXRlcigpKTtcbiAgICBvbkNvbXBsZXRlKG51bGwsIHdpcmUpO1xuICB9LmJpbmQodGhpcykpO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gYXBwcm9wcmlhdGUgaW5pdGlhbCB3aXJlIHJvdyBmb3IgY29ubmVjdGluZyB0byB0aGUgZ2l2ZW4gbm9kZS5cbiAqIE92ZXJyaWRlcyBOZXRTaW1Ob2RlIHZlcnNpb24gdG8gYWRkIGltcHJvdmVkIGNvbm5lY3QtdG8tcm91dGVyIGZ1bmN0aW9uYWxpdHkuXG4gKiBAcGFyYW0geyFOZXRTaW1Ob2RlfSBvdGhlck5vZGVcbiAqIEByZXR1cm5zIHtXaXJlUm93fVxuICogQG92ZXJyaWRlXG4gKi9cbk5ldFNpbUxvY2FsQ2xpZW50Tm9kZS5wcm90b3R5cGUubWFrZVdpcmVSb3dGb3JDb25uZWN0aW5nVG8gPSBmdW5jdGlvbiAob3RoZXJOb2RlKSB7XG4gIGlmIChvdGhlck5vZGUgaW5zdGFuY2VvZiBOZXRTaW1Sb3V0ZXJOb2RlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxvY2FsTm9kZUlEOiB0aGlzLmVudGl0eUlELFxuICAgICAgcmVtb3RlTm9kZUlEOiBvdGhlck5vZGUuZW50aXR5SUQsXG4gICAgICBsb2NhbEFkZHJlc3M6IG90aGVyTm9kZS5nZXRSYW5kb21BdmFpbGFibGVDbGllbnRBZGRyZXNzKCksXG4gICAgICByZW1vdGVBZGRyZXNzOiBvdGhlck5vZGUuZ2V0QWRkcmVzcygpLFxuICAgICAgbG9jYWxIb3N0bmFtZTogdGhpcy5nZXRIb3N0bmFtZSgpLFxuICAgICAgcmVtb3RlSG9zdG5hbWU6IG90aGVyTm9kZS5nZXRIb3N0bmFtZSgpXG4gICAgfTtcbiAgfVxuICByZXR1cm4gTmV0U2ltTG9jYWxDbGllbnROb2RlLnN1cGVyUHJvdG90eXBlXG4gICAgICAubWFrZVdpcmVSb3dGb3JDb25uZWN0aW5nVG8uY2FsbCh0aGlzLCBvdGhlck5vZGUpO1xufTtcblxuLyoqXG4gKiBIZWxwZXIvYWNjZXNzb3IgZm9yIHJvdXRlciBjb250cm9sbGVyIGluc3RhbmNlIGZvciB0aGUgcm91dGVyIHRoYXQgdGhpc1xuICogY2xpZW50IGlzIGRpcmVjdGx5IGNvbm5lY3RlZCB0by5cbiAqIEByZXR1cm5zIHtOZXRTaW1Sb3V0ZXJOb2RlfG51bGx9IFJvdXRlciB3ZSBhcmUgY29ubmVjdGVkIHRvIG9yIG51bGwgaWYgbm90XG4gKiAgICAgICAgICBjb25uZWN0ZWQgdG8gYSByb3V0ZXIgYXQgYWxsLlxuICovXG5OZXRTaW1Mb2NhbENsaWVudE5vZGUucHJvdG90eXBlLmdldE15Um91dGVyID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5teVJvdXRlcklEXyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gXy5maW5kKHRoaXMucm91dGVyc18sIGZ1bmN0aW9uIChyb3V0ZXIpIHtcbiAgICByZXR1cm4gcm91dGVyLmVudGl0eUlEID09PSB0aGlzLm15Um91dGVySURfO1xuICB9LmJpbmQodGhpcykpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge05vZGVTdHlsZUNhbGxiYWNrfSBbb25Db21wbGV0ZV1cbiAqL1xuTmV0U2ltTG9jYWxDbGllbnROb2RlLnByb3RvdHlwZS5kaXNjb25uZWN0UmVtb3RlID0gZnVuY3Rpb24gKG9uQ29tcGxldGUpIHtcbiAgb25Db21wbGV0ZSA9IG9uQ29tcGxldGUgfHwgZnVuY3Rpb24gKCkge307XG5cbiAgLy8gc2F2ZSB0aGUgd2lyZSBzbyB3ZSBjYW4gZGVzdHJveSBpdFxuICB2YXIgd2lyZSA9IHRoaXMuZ2V0T3V0Z29pbmdXaXJlKCk7XG5cbiAgLy8gcmVtb3ZlIGFsbCBsb2NhbCByZWZlcmVuY2VzIHRvIGNvbm5lY3Rpb25zXG4gIHRoaXMuY2xlYW5VcEJlZm9yZURlc3Ryb3lpbmdXaXJlXygpO1xuXG4gIC8vIGRlc3Ryb3kgd2lyZSBvbiBBUElcbiAgd2lyZS5kZXN0cm95KGZ1bmN0aW9uIChlcnIpIHtcbiAgICAvLyBXZSdyZSBub3QgZ29pbmcgdG8gc3RvcCBpZiBhbiBlcnJvciBvY2N1cnJlZCBoZXJlOyB0aGUgZXJyb3IgbWlnaHRcbiAgICAvLyBqdXN0IGJlIHRoYXQgdGhlIHdpcmUgd2FzIGFscmVhZHkgY2xlYW5lZCB1cCBieSBhbm90aGVyIG5vZGUuXG4gICAgLy8gQXMgbG9uZyBhcyB3ZSBtYWtlIGEgZ29vZC1mYWl0aCBkaXNjb25uZWN0IGVmZm9ydCwgdGhlIGNsZWFudXAgc3lzdGVtXG4gICAgLy8gd2lsbCBjb3JyZWN0IGFueSBtaXN0YWtlcyBhbmQgd2Ugd29uJ3QgbG9jayB1cCBvdXIgY2xpZW50IHRyeWluZyB0b1xuICAgIC8vIHJlLWRpc2Nvbm5lY3QuXG4gICAgaWYgKGVycikge1xuICAgICAgbG9nZ2VyLmluZm8oXCJFcnJvciB3aGlsZSBkaXNjb25uZWN0aW5nOiBcIiArIGVyci5tZXNzYWdlKTtcbiAgICB9XG4gICAgb25Db21wbGV0ZShudWxsKTtcbiAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogQ29tbW9uIGNsZWFudXAgYmVoYXZpb3Igc2hhcmVkIGJldHdlZW4gdGhlIHN5bmNocm9ub3VzIGFuZCBhc3luY2hyb25vdXNcbiAqIGRpc2Nvbm5lY3QgcGF0aHMuXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Mb2NhbENsaWVudE5vZGUucHJvdG90eXBlLmNsZWFuVXBCZWZvcmVEZXN0cm95aW5nV2lyZV8gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMubXlSZW1vdGVDbGllbnQgPSBudWxsO1xuICB0aGlzLm15Um91dGVySURfID0gdW5kZWZpbmVkO1xuICB0aGlzLnJlbW90ZUNoYW5nZS5ub3RpZnlPYnNlcnZlcnMobnVsbCwgbnVsbCk7XG59O1xuXG4vKipcbiAqIFB1dCBhIG1lc3NhZ2Ugb24gb3VyIG91dGdvaW5nIHdpcmUsIHRvIHdoYXRldmVyIHdlIGFyZSBjb25uZWN0ZWQgdG9cbiAqIGF0IHRoZSBtb21lbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF5bG9hZFxuICogQHBhcmFtIHshTm9kZVN0eWxlQ2FsbGJhY2t9IG9uQ29tcGxldGVcbiAqL1xuTmV0U2ltTG9jYWxDbGllbnROb2RlLnByb3RvdHlwZS5zZW5kTWVzc2FnZSA9IGZ1bmN0aW9uIChwYXlsb2FkLCBvbkNvbXBsZXRlKSB7XG4gIHZhciBteVdpcmUgPSB0aGlzLmdldE91dGdvaW5nV2lyZSgpO1xuICBpZiAoIW15V2lyZSkge1xuICAgIG9uQ29tcGxldGUobmV3IEVycm9yKCdDYW5ub3Qgc2VuZCBtZXNzYWdlOyBub3QgY29ubmVjdGVkLicpKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgbG9jYWxOb2RlSUQgPSBteVdpcmUubG9jYWxOb2RlSUQ7XG4gIHZhciByZW1vdGVOb2RlSUQgPSBteVdpcmUucmVtb3RlTm9kZUlEO1xuXG4gIC8vIFdobyB3aWxsIGJlIHJlc3BvbnNpYmxlIGZvciBwaWNraW5nIHVwL2NsZWFuaW5nIHVwIHRoaXMgbWVzc2FnZT9cbiAgdmFyIHNpbXVsYXRpbmdOb2RlSUQgPSB0aGlzLnNlbGVjdFNpbXVsYXRpbmdOb2RlXyhsb2NhbE5vZGVJRCwgcmVtb3RlTm9kZUlEKTtcbiAgdmFyIGxldmVsQ29uZmlnID0gTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpO1xuICB2YXIgZXh0cmFIb3BzID0gbGV2ZWxDb25maWcubWluaW11bUV4dHJhSG9wcztcbiAgaWYgKGxldmVsQ29uZmlnLm1pbmltdW1FeHRyYUhvcHMgIT09IGxldmVsQ29uZmlnLm1heGltdW1FeHRyYUhvcHMpIHtcbiAgICBleHRyYUhvcHMgPSBOZXRTaW1HbG9iYWxzLnJhbmRvbUludEluUmFuZ2UoXG4gICAgICAgIGxldmVsQ29uZmlnLm1pbmltdW1FeHRyYUhvcHMsXG4gICAgICAgIGxldmVsQ29uZmlnLm1heGltdW1FeHRyYUhvcHMgKyAxKTtcbiAgfVxuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgTmV0U2ltTWVzc2FnZS5zZW5kKFxuICAgICAgdGhpcy5zaGFyZF8sXG4gICAgICB7XG4gICAgICAgIGZyb21Ob2RlSUQ6IGxvY2FsTm9kZUlELFxuICAgICAgICB0b05vZGVJRDogcmVtb3RlTm9kZUlELFxuICAgICAgICBzaW11bGF0ZWRCeTogc2ltdWxhdGluZ05vZGVJRCxcbiAgICAgICAgcGF5bG9hZDogcGF5bG9hZCxcbiAgICAgICAgZXh0cmFIb3BzUmVtYWluaW5nOiBleHRyYUhvcHNcbiAgICAgIH0sXG4gICAgICBmdW5jdGlvbiAoZXJyLCByb3cpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGxvZ2dlci5lcnJvcignRmFpbGVkIHRvIHNlbmQgbWVzc2FnZTogJyArIGVyci5tZXNzYWdlICsgXCJcXG5cIiArXG4gICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKTtcbiAgICAgICAgICBOZXRTaW1BbGVydC5lcnJvcihpMThuLnNlbmRNZXNzYWdlRXJyb3IoKSk7XG4gICAgICAgICAgb25Db21wbGV0ZShlcnIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxvZ2dlci5pbmZvKHRoaXMuZ2V0RGlzcGxheU5hbWUoKSArICc6IFNlbnQgbWVzc2FnZTonICtcbiAgICAgICAgICAgICdcXG5mcm9tOiAnICsgbG9jYWxOb2RlSUQgK1xuICAgICAgICAgICAgJ1xcbnRvICA6ICcgKyByZW1vdGVOb2RlSUQgK1xuICAgICAgICAgICAgJ1xcbnNpbSA6ICcgKyBzaW11bGF0aW5nTm9kZUlEICtcbiAgICAgICAgICAgICdcXG5ob3BzOiAnICsgZXh0cmFIb3BzKTtcblxuICAgICAgICBpZiAoc2VsZi5zZW50TG9nXykge1xuICAgICAgICAgIHNlbGYuc2VudExvZ18ubG9nKHBheWxvYWQsIHJvdy5pZCk7XG4gICAgICAgIH1cbiAgICAgICAgb25Db21wbGV0ZShudWxsKTtcbiAgICAgIH0uYmluZCh0aGlzKVxuICApO1xufTtcblxuLyoqXG4gKiBEZWNpZGUgd2hldGhlciB0aGUgbG9jYWwgbm9kZSBvciB0aGUgcmVtb3RlIG5vZGUgd2lsbCBiZSByZXNwb25zaWJsZVxuICogZm9yIHBpY2tpbmcgdXAgYW5kIGNsZWFuaW5nIHVwIHRoaXMgbWVzc2FnZSBmcm9tIHJlbW90ZSBzdG9yYWdlLlxuICogQHBhcmFtIHtudW1iZXJ9IGxvY2FsTm9kZUlEXG4gKiBAcGFyYW0ge251bWJlcn0gcmVtb3RlTm9kZUlEXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBvbmUgb2YgdGhlIHR3byBJRHMgcHJvdmlkZWRcbiAqL1xuTmV0U2ltTG9jYWxDbGllbnROb2RlLnByb3RvdHlwZS5zZWxlY3RTaW11bGF0aW5nTm9kZV8gPSBmdW5jdGlvbiAobG9jYWxOb2RlSUQsXG4gICAgcmVtb3RlTm9kZUlEKSB7XG4gIGlmIChOZXRTaW1HbG9iYWxzLmdldExldmVsQ29uZmlnKCkubWVzc2FnZUdyYW51bGFyaXR5ID09PSBNZXNzYWdlR3JhbnVsYXJpdHkuQklUUykge1xuICAgIC8vIEluIHNpbXBsZXggd2lyZSBtb2RlLCB0aGUgbG9jYWwgbm9kZSBjbGVhbnMgdXAgaXRzIG93biBtZXNzYWdlc1xuICAgIC8vIHdoZW4gaXQga25vd3MgdGhleSBhcmUgbm8gbG9uZ2VyIGN1cnJlbnQuXG4gICAgcmV0dXJuIGxvY2FsTm9kZUlEO1xuICB9IGVsc2UgaWYgKHRoaXMubXlSb3V0ZXJJRF8gIT09IHVuZGVmaW5lZCAmJiB0aGlzLm15Um91dGVySURfID09PSByZW1vdGVOb2RlSUQpIHtcbiAgICAvLyBJZiBzZW5kaW5nIHRvIGEgcm91dGVyLCB3ZSB3aWxsIGRvIG91ciBvd24gc2ltdWxhdGlvbiBvbiB0aGUgcm91dGVyJ3NcbiAgICAvLyBiZWhhbGZcbiAgICByZXR1cm4gbG9jYWxOb2RlSUQ7XG4gIH1cbiAgLy8gRGVmYXVsdCBjYXNlOiBUaGUgZGVzaWduYXRlZCByZWNpcGllbnQgbXVzdCBwaWNrIHVwIHRoZSBtZXNzYWdlLlxuICByZXR1cm4gcmVtb3RlTm9kZUlEO1xufTtcblxuLyoqXG4gKiBTZXF1ZW50aWFsbHkgcHV0cyBhIGxpc3Qgb2YgbWVzc2FnZXMgb250byB0aGUgb3V0Z29pbmcgd2lyZSwgdG8gd2hhdGV2ZXJcbiAqIHdlIGFyZSBjb25uZWN0ZWQgdG8gYXQgdGhlIG1vbWVudC5cbiAqIEBwYXJhbSB7c3RyaW5nW119IHBheWxvYWRzXG4gKiBAcGFyYW0geyFOb2RlU3R5bGVDYWxsYmFja30gb25Db21wbGV0ZVxuICovXG5OZXRTaW1Mb2NhbENsaWVudE5vZGUucHJvdG90eXBlLnNlbmRNZXNzYWdlcyA9IGZ1bmN0aW9uIChwYXlsb2Fkcywgb25Db21wbGV0ZSkge1xuICBpZiAocGF5bG9hZHMubGVuZ3RoID09PSAwKSB7XG4gICAgb25Db21wbGV0ZShudWxsKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLnNlbmRNZXNzYWdlKHBheWxvYWRzWzBdLCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBvbkNvbXBsZXRlKGVyciwgcmVzdWx0KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnNlbmRNZXNzYWdlcyhwYXlsb2Fkcy5zbGljZSgxKSwgb25Db21wbGV0ZSk7XG4gIH0uYmluZCh0aGlzKSk7XG59O1xuXG4vKipcbiAqIFdoZW5ldmVyIHRoZSBub2RlIHRhYmxlIGNoYW5nZXMsIG1ha2UgbmVlZGVkIGNoYW5nZXMgdG8gb3VyIGNvbGxlY3Rpb24gb2ZcbiAqIHJvdXRlcnMgY29uZmlndXJlZCB0byBzaW11bGF0ZSBmb3IgdGhlIGxvY2FsIG5vZGUuXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Mb2NhbENsaWVudE5vZGUucHJvdG90eXBlLm9uTm9kZVRhYmxlQ2hhbmdlXyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG5vZGVSb3dzID0gdGhpcy5zaGFyZF8ubm9kZVRhYmxlLnJlYWRBbGwoKTtcblxuICAvLyBJZiBvdXIgb3duIHJvdyBpcyBnb25lLCBkcm9wIGV2ZXJ5dGhpbmcgYW5kIGhhbmRsZSBkaXNjb25uZWN0LlxuICBpZiAoIXRoaXMuY2FuRmluZE93blJvd0luKG5vZGVSb3dzKSkge1xuICAgIHRoaXMub25Ob2RlTG9zdENvbm5lY3Rpb25fKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gUmVtb3ZlIHNpbXVsYXRpbmcgcm91dGVycyB0aGF0IGhhdmUgdmFuaXNoZWQgZnJvbSByZW1vdGUgc3RvcmFnZS5cbiAgdGhpcy5yb3V0ZXJzXyA9IHRoaXMucm91dGVyc18uZmlsdGVyKGZ1bmN0aW9uIChzaW11bGF0aW5nUm91dGVyKSB7XG4gICAgdmFyIHN0aWxsRXhpc3RzID0gbm9kZVJvd3Muc29tZShmdW5jdGlvbiAocm93KSB7XG4gICAgICByZXR1cm4gcm93LmlkID09PSBzaW11bGF0aW5nUm91dGVyLmVudGl0eUlEO1xuICAgIH0pO1xuICAgIGlmICghc3RpbGxFeGlzdHMpIHtcbiAgICAgIHNpbXVsYXRpbmdSb3V0ZXIuc3RvcFNpbXVsYXRpb24oKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0pO1xuXG4gIC8vIENyZWF0ZSBhbmQgc2ltdWxhdGUgbmV3IHJvdXRlcnNcbiAgbm9kZVJvd3MuZmlsdGVyKGZ1bmN0aW9uIChyb3cpIHtcbiAgICByZXR1cm4gcm93LnR5cGUgPT09IE5ldFNpbUNvbnN0YW50cy5Ob2RlVHlwZS5ST1VURVI7XG4gIH0pLmZvckVhY2goZnVuY3Rpb24gKHJvdykge1xuICAgIHZhciBhbHJlYWR5U2ltdWxhdGluZyA9IHRoaXMucm91dGVyc18uc29tZShmdW5jdGlvbiAoc2ltdWxhdGluZ1JvdXRlcikge1xuICAgICAgcmV0dXJuIHJvdy5pZCA9PT0gc2ltdWxhdGluZ1JvdXRlci5lbnRpdHlJRDtcbiAgICB9KTtcblxuICAgIGlmICghYWxyZWFkeVNpbXVsYXRpbmcpIHtcbiAgICAgIHZhciBuZXdSb3V0ZXIgPSBuZXcgTmV0U2ltUm91dGVyTm9kZSh0aGlzLnNoYXJkXywgcm93KTtcbiAgICAgIG5ld1JvdXRlci5pbml0aWFsaXplU2ltdWxhdGlvbih0aGlzLmVudGl0eUlEKTtcbiAgICAgIHRoaXMucm91dGVyc18ucHVzaChuZXdSb3V0ZXIpO1xuICAgIH1cbiAgfSwgdGhpcyk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0W119IG5vZGVSb3dzXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVFJVRSBpZiBvd24gcm93IGlzIGluIGdpdmVuIHJvdyBjb2xsZWN0aW9uXG4gKi9cbk5ldFNpbUxvY2FsQ2xpZW50Tm9kZS5wcm90b3R5cGUuY2FuRmluZE93blJvd0luID0gZnVuY3Rpb24gKG5vZGVSb3dzKSB7XG4gIHJldHVybiBub2RlUm93cy5zb21lKGZ1bmN0aW9uIChyb3cpIHtcbiAgICByZXR1cm4gcm93LmlkID09PSB0aGlzLmVudGl0eUlEICYmIHJvdy51dWlkID09PSB0aGlzLnV1aWQ7XG4gIH0sIHRoaXMpO1xufTtcblxuLyoqXG4gKiBIYW5kbGVyIGZvciBhbnkgd2lyZSB0YWJsZSBjaGFuZ2UuICBVc2VkIGhlcmUgdG8gZGV0ZWN0IG11dHVhbFxuICogY29ubmVjdGlvbnMgYmV0d2VlbiBjbGllbnQgbm9kZXMgdGhhdCBpbmRpY2F0ZSB3ZSBjYW4gbW92ZSB0byBhXG4gKiBcImNvbm5lY3RlZFwiIHN0YXRlIG9yIHN0b3AgdHJ5aW5nIHRvIGNvbm5lY3QuXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Mb2NhbENsaWVudE5vZGUucHJvdG90eXBlLm9uV2lyZVRhYmxlQ2hhbmdlXyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG15V2lyZSA9IHRoaXMuZ2V0T3V0Z29pbmdXaXJlKCk7XG4gIGlmICghbXlXaXJlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHdpcmVSb3dzID0gdGhpcy5zaGFyZF8ud2lyZVRhYmxlLnJlYWRBbGwoKTtcbiAgdmFyIG15Q29ubmVjdGlvblRhcmdldFdpcmVSb3csIGlzVGFyZ2V0Q29ubmVjdGVkVG9Tb21lb25lRWxzZTtcblxuICAvLyBMb29rIGZvciBtdXR1YWwgY29ubmVjdGlvblxuICB2YXIgbXV0dWFsQ29ubmVjdGlvblJvdyA9IF8uZmluZCh3aXJlUm93cywgZnVuY3Rpb24gKHJvdykge1xuICAgIHJldHVybiByb3cucmVtb3RlTm9kZUlEID09PSBteVdpcmUubG9jYWxOb2RlSUQgJiZcbiAgICAgICAgcm93LmxvY2FsTm9kZUlEID09PSBteVdpcmUucmVtb3RlTm9kZUlEO1xuICB9LmJpbmQodGhpcykpO1xuXG4gIGlmIChtdXR1YWxDb25uZWN0aW9uUm93ICYmICF0aGlzLm15UmVtb3RlQ2xpZW50KSB7XG4gICAgLy8gTmV3IG11dHVhbCBjb25uZWN0aW9uISBHZXQgdGhlIG5vZGUgZm9yIG91ciBvd24gdXNlLlxuICAgIE5ldFNpbUNsaWVudE5vZGUuZ2V0KG11dHVhbENvbm5lY3Rpb25Sb3cubG9jYWxOb2RlSUQsIHRoaXMuc2hhcmRfLFxuICAgICAgICBmdW5jdGlvbiAoZXJyLCByZW1vdGVDbGllbnQpIHtcbiAgICAgICAgICB0aGlzLm15UmVtb3RlQ2xpZW50ID0gcmVtb3RlQ2xpZW50O1xuICAgICAgICAgIHRoaXMucmVtb3RlQ2hhbmdlLm5vdGlmeU9ic2VydmVycyhteVdpcmUsIHRoaXMubXlSZW1vdGVDbGllbnQpO1xuICAgICAgICB9LmJpbmQodGhpcykpO1xuICB9IGVsc2UgaWYgKCFtdXR1YWxDb25uZWN0aW9uUm93ICYmIHRoaXMubXlSZW1vdGVDbGllbnQpIHtcbiAgICAvLyBSZW1vdGUgY2xpZW50IGRpc2Nvbm5lY3RlZCBvciB3ZSBkaXNjb25uZWN0ZWQ7IGVpdGhlciB3YXkgd2UgYXJlXG4gICAgLy8gbm8gbG9uZ2VyIGNvbm5lY3RlZC5cbiAgICBOZXRTaW1BbGVydC5pbmZvKGkxOG4uYWxlcnRQYXJ0bmVyRGlzY29ubmVjdGVkKCkpO1xuICAgIHRoaXMuZGlzY29ubmVjdFJlbW90ZSgpO1xuICB9IGVsc2UgaWYgKCFtdXR1YWxDb25uZWN0aW9uUm93ICYmICF0aGlzLm15UmVtb3RlQ2xpZW50KSB7XG4gICAgLy8gVGhlIGNsaWVudCB3ZSdyZSB0cnlpbmcgdG8gY29ubmVjdCB0byBtaWdodCBoYXZlIGNvbm5lY3RlZCB0b1xuICAgIC8vIHNvbWVvbmUgZWxzZTsgY2hlY2sgaWYgdGhleSBkaWQgYW5kIGlmIHNvLCBzdG9wIHRyeWluZyB0byBjb25uZWN0XG4gICAgbXlDb25uZWN0aW9uVGFyZ2V0V2lyZVJvdyA9IF8uZmluZCh3aXJlUm93cywgZnVuY3Rpb24ocm93KSB7XG4gICAgICByZXR1cm4gcm93LmxvY2FsTm9kZUlEID09PSBteVdpcmUucmVtb3RlTm9kZUlEICYmXG4gICAgICAgICAgcm93LnJlbW90ZU5vZGVJRCAhPT0gbXlXaXJlLmxvY2FsTm9kZUlEO1xuICAgIH0uYmluZCh0aGlzKSk7XG4gICAgaXNUYXJnZXRDb25uZWN0ZWRUb1NvbWVvbmVFbHNlID0gbXlDb25uZWN0aW9uVGFyZ2V0V2lyZVJvdyA/XG4gICAgICAgIHdpcmVSb3dzLnNvbWUoZnVuY3Rpb24gKHJvdykge1xuICAgICAgICAgIHJldHVybiByb3cucmVtb3RlTm9kZUlEID09PSBteUNvbm5lY3Rpb25UYXJnZXRXaXJlUm93LmxvY2FsTm9kZUlEICYmXG4gICAgICAgICAgICAgIHJvdy5sb2NhbE5vZGVJRCA9PT0gbXlDb25uZWN0aW9uVGFyZ2V0V2lyZVJvdy5yZW1vdGVOb2RlSUQ7XG4gICAgICAgIH0pIDogdW5kZWZpbmVkO1xuICAgIGlmIChteUNvbm5lY3Rpb25UYXJnZXRXaXJlUm93ICYmIGlzVGFyZ2V0Q29ubmVjdGVkVG9Tb21lb25lRWxzZSkge1xuICAgICAgTmV0U2ltQWxlcnQuaW5mbyhpMThuLmFsZXJ0Q29ubmVjdGlvblJlZnVzZWQoKSk7XG4gICAgICB0aGlzLmRpc2Nvbm5lY3RSZW1vdGUoKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogTGlzdGVucyBmb3IgY2hhbmdlcyB0byB0aGUgbWVzc2FnZSB0YWJsZS4gIERldGVjdHMgYW5kIGhhbmRsZXMgbWVzc2FnZXNcbiAqIHNlbnQgdG8gdGhpcyBub2RlLlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltTG9jYWxDbGllbnROb2RlLnByb3RvdHlwZS5vbk1lc3NhZ2VUYWJsZUNoYW5nZV8gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpLmF1dG9tYXRpY1JlY2VpdmUpIHtcbiAgICAvLyBJbiB0aGlzIGxldmVsLCB3ZSB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IHBpY2sgdXAgbWVzc2FnZXMgZGlyZWN0ZWRcbiAgICAvLyBhdCB1cy4gIFdlIG11c3QgbWFudWFsbHkgY2FsbCBhIHJlY2VpdmUgbWV0aG9kIGluc3RlYWQuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRoaXMuaXNQcm9jZXNzaW5nTWVzc2FnZXNfKSB7XG4gICAgLy8gV2UncmUgYWxyZWFkeSBpbiB0aGlzIG1ldGhvZCwgZ2V0dGluZyBjYWxsZWQgcmVjdXJzaXZlbHkgYmVjYXVzZVxuICAgIC8vIHdlIGFyZSBtYWtpbmcgY2hhbmdlcyB0byB0aGUgdGFibGUuICBJZ25vcmUgdGhpcyBjYWxsLlxuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBtZXNzYWdlcyA9IHRoaXMuc2hhcmRfLm1lc3NhZ2VUYWJsZS5yZWFkQWxsKClcbiAgICAgIC5tYXAoZnVuY3Rpb24gKHJvdykge1xuICAgICAgICByZXR1cm4gbmV3IE5ldFNpbU1lc3NhZ2UodGhpcy5zaGFyZF8sIHJvdyk7XG4gICAgICB9LmJpbmQodGhpcykpXG4gICAgICAuZmlsdGVyKGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBtZXNzYWdlLnRvTm9kZUlEID09PSB0aGlzLmVudGl0eUlEICYmXG4gICAgICAgICAgICBtZXNzYWdlLnNpbXVsYXRlZEJ5ID09PSB0aGlzLmVudGl0eUlEO1xuICAgICAgfS5iaW5kKHRoaXMpKTtcblxuICBpZiAobWVzc2FnZXMubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gTm8gbWVzc2FnZXMgZm9yIHVzLCBubyB3b3JrIHRvIGRvXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gU2V0dXAgKHN5bmMpOiBTZXQgcHJvY2Vzc2luZyBmbGFnXG4gIGxvZ2dlci5pbmZvKFwiTG9jYWwgbm9kZSByZWNlaXZlZCBcIiArIG1lc3NhZ2VzLmxlbmd0aCArIFwiIG1lc3NhZ2VzXCIpO1xuICB0aGlzLmlzUHJvY2Vzc2luZ01lc3NhZ2VzXyA9IHRydWU7XG5cbiAgLy8gU3RlcCAxIChhc3luYyk6IFB1bGwgYWxsIG91ciBtZXNzYWdlcyBvdXQgb2Ygc3RvcmFnZVxuICBOZXRTaW1FbnRpdHkuZGVzdHJveUVudGl0aWVzKG1lc3NhZ2VzLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgbG9nZ2VyLmVycm9yKCdFcnJvciBwdWxsaW5nIG1lc3NhZ2Ugb2ZmIHRoZSB3aXJlOiAnICsgZXJyLm1lc3NhZ2UpO1xuICAgICAgdGhpcy5pc1Byb2Nlc3NpbmdNZXNzYWdlc18gPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBTdGVwIDIgKHN5bmMpOiBIYW5kbGUgYWxsIG1lc3NhZ2VzXG4gICAgbWVzc2FnZXMuZm9yRWFjaChmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgdGhpcy5oYW5kbGVNZXNzYWdlXyhtZXNzYWdlKTtcbiAgICB9LCB0aGlzKTtcblxuICAgIC8vIENsZWFudXAgKHN5bmMpOiBDbGVhciBwcm9jZXNzaW5nIGZsYWdcbiAgICBsb2dnZXIuaW5mbyhcIkxvY2FsIG5vZGUgZmluaXNoZWQgcHJvY2Vzc2luZyBcIiArIG1lc3NhZ2VzLmxlbmd0aCArIFwiIG1lc3NhZ2VzXCIpO1xuICAgIHRoaXMuaXNQcm9jZXNzaW5nTWVzc2FnZXNfID0gZmFsc2U7XG4gIH0uYmluZCh0aGlzKSk7XG59O1xuXG4vKipcbiAqIFBvc3QgbWVzc2FnZSB0byAncmVjZWl2ZWQnIGxvZy5cbiAqIEBwYXJhbSB7IU5ldFNpbU1lc3NhZ2V9IG1lc3NhZ2VcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbUxvY2FsQ2xpZW50Tm9kZS5wcm90b3R5cGUuaGFuZGxlTWVzc2FnZV8gPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICBsb2dnZXIuaW5mbyh0aGlzLmdldERpc3BsYXlOYW1lKCkgKyAnOiBIYW5kbGluZyBpbmNvbWluZyBtZXNzYWdlJyk7XG4gIC8vIFRPRE86IEhvdyBtdWNoIHZhbGlkYXRpb24gc2hvdWxkIHdlIGRvIGhlcmU/XG4gIGlmICh0aGlzLnJlY2VpdmVkTG9nXykge1xuICAgIHRoaXMucmVjZWl2ZWRMb2dfLmxvZyhtZXNzYWdlLnBheWxvYWQsIG1lc3NhZ2UuZW50aXR5SUQpO1xuICB9XG59O1xuXG4vKipcbiAqIEFzeW5jaHJvbm91c2x5IHJlY2VpdmUgdGhlIGxhdGVzdCBtZXNzYWdlIHNoYXJlZCBiZXR3ZWVuIHRoaXMgbm9kZVxuICogYW5kIGl0cyBjb25uZWN0ZWQgcmVtb3RlIG5vZGUuXG4gKiBAcGFyYW0geyFOb2RlU3R5bGVDYWxsYmFja30gb25Db21wbGV0ZSAtIGdpdmVuIHRoZSBtZXNzYWdlIGFzIGEgcmVzdWx0LCBvclxuICogICAgICAgIE5VTEwgaWYgbm8gbWVzc2FnZXMgZXhpc3QuXG4gKi9cbk5ldFNpbUxvY2FsQ2xpZW50Tm9kZS5wcm90b3R5cGUuZ2V0TGF0ZXN0TWVzc2FnZU9uU2ltcGxleFdpcmUgPSBmdW5jdGlvbiAob25Db21wbGV0ZSkge1xuICB2YXIgbXlXaXJlID0gdGhpcy5nZXRPdXRnb2luZ1dpcmUoKTtcbiAgaWYgKCFteVdpcmUpIHtcbiAgICBvbkNvbXBsZXRlKG5ldyBFcnJvcihcIlVuYWJsZSB0byByZXRyaWV2ZSBtZXNzYWdlOyBub3QgY29ubmVjdGVkLlwiKSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRG9lcyBhbiBhc3luY2hyb25vdXMgcmVxdWVzdCB0byB0aGUgbWVzc2FnZSB0YWJsZSB0byBlbnN1cmUgd2UgaGF2ZVxuICAvLyB0aGUgbGF0ZXN0IGNvbnRlbnRzXG4gIHZhciBtZXNzYWdlVGFibGUgPSB0aGlzLnNoYXJkXy5tZXNzYWdlVGFibGU7XG4gIG1lc3NhZ2VUYWJsZS5yZWZyZXNoKClcbiAgICAuZmFpbChvbkNvbXBsZXRlKVxuICAgIC5kb25lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gV2Ugb25seSBjYXJlIGFib3V0IHJvd3Mgb24gb3VyIChzaW1wbGV4KSB3aXJlXG4gICAgICAgIHZhciByb3dzT25XaXJlID0gbWVzc2FnZVRhYmxlLnJlYWRBbGwoKS5maWx0ZXIoZnVuY3Rpb24gKHJvdykge1xuICAgICAgICAgIHJldHVybiBteVdpcmUuaXNNZXNzYWdlUm93T25TaW1wbGV4V2lyZShyb3cpO1xuICAgICAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgICAgIC8vIElmIHRoZXJlIGFyZSBubyByb3dzLCBjb21wbGV0ZSBzdWNjZXNzZnVsbHkgYnV0IHBhc3MgbnVsbCByZXN1bHQuXG4gICAgICAgIGlmIChyb3dzT25XaXJlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIG9uQ29tcGxldGUobnVsbCwgbnVsbCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxhc3RSb3cgPSByb3dzT25XaXJlW3Jvd3NPbldpcmUubGVuZ3RoIC0gMV07XG4gICAgICAgIG9uQ29tcGxldGUobnVsbCwgbmV3IE5ldFNpbU1lc3NhZ2UodGhpcy5zaGFyZF8sIGxhc3RSb3cpKTtcbiAgICAgIH0uYmluZCh0aGlzKSk7XG59O1xuXG4vKipcbiAqIEFzeW5jaHJvbm91c2x5IHNldCB0aGUgc3RhdGUgb2YgdGhlIHNoYXJlZCB3aXJlLlxuICogQHBhcmFtIHtzdHJpbmd9IG5ld1N0YXRlIC0gcHJvYmFibHkgb3VnaHQgdG8gYmUgXCIwXCIgb3IgXCIxXCJcbiAqIEBwYXJhbSB7IU5vZGVTdHlsZUNhbGxiYWNrfSBvbkNvbXBsZXRlXG4gKi9cbk5ldFNpbUxvY2FsQ2xpZW50Tm9kZS5wcm90b3R5cGUuc2V0U2ltcGxleFdpcmVTdGF0ZSA9IGZ1bmN0aW9uIChuZXdTdGF0ZSwgb25Db21wbGV0ZSkge1xuICB0aGlzLnNlbmRNZXNzYWdlKG5ld1N0YXRlLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgbG9nZ2VyLndhcm4oZXJyLm1lc3NhZ2UpO1xuICAgICAgb25Db21wbGV0ZShuZXcgRXJyb3IoXCJGYWlsZWQgdG8gc2V0IHdpcmUgc3RhdGUuXCIpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBXZSdyZSBub3QgZG9uZSEgIEFsc28gZG8gb3VyIHBhcnQgdG8ga2VlcCB0aGUgbWVzc2FnZSB0YWJsZSBjbGVhbi5cbiAgICB0aGlzLnJlbW92ZU15T2xkTWVzc2FnZXNGcm9tV2lyZV8ob25Db21wbGV0ZSk7XG4gIH0uYmluZCh0aGlzKSk7XG5cbn07XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwgbWVzc2FnZXMgb24gdGhlIGN1cnJlbnQgd2lyZSB0aGF0IGFyZSBzaW11bGF0ZWQgYnkgdGhlIGxvY2FsXG4gKiBub2RlIGFuZCBhcmUgbm90IHRoZSBsYXRlc3QgbWVzc2FnZSBvbiB0aGUgd2lyZS5cbiAqIFVzZWQgYnkgc2ltcGxleCBjb25maWd1cmF0aW9ucyB3aGVyZSB3ZSBvbmx5IGNhcmUgYWJvdXQgdGhlIHdpcmUncyBjdXJyZW50XG4gKiAobGF0ZXN0KSBzdGF0ZS5cbiAqIEBwYXJhbSB7IU5vZGVTdHlsZUNhbGxiYWNrfSBvbkNvbXBsZXRlXG4gKi9cbk5ldFNpbUxvY2FsQ2xpZW50Tm9kZS5wcm90b3R5cGUucmVtb3ZlTXlPbGRNZXNzYWdlc0Zyb21XaXJlXyA9IGZ1bmN0aW9uIChvbkNvbXBsZXRlKSB7XG4gIHZhciBteVdpcmUgPSB0aGlzLmdldE91dGdvaW5nV2lyZSgpO1xuICBpZiAoIW15V2lyZSkge1xuICAgIG9uQ29tcGxldGUobmV3IEVycm9yKFwiVW5hYmxlIHRvIHJldHJpZXZlIG1lc3NhZ2U7IG5vdCBjb25uZWN0ZWQuXCIpKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBEb2VzIGFuIGFzeW5jaHJvbm91cyByZXF1ZXN0IHRvIHRoZSBtZXNzYWdlIHRhYmxlIHRvIGVuc3VyZSB3ZSBoYXZlXG4gIC8vIHRoZSBsYXRlc3QgY29udGVudHNcbiAgdmFyIG1lc3NhZ2VUYWJsZSA9IHRoaXMuc2hhcmRfLm1lc3NhZ2VUYWJsZTtcbiAgbWVzc2FnZVRhYmxlLnJlZnJlc2goKVxuICAgIC5mYWlsKG9uQ29tcGxldGUpXG4gICAgLmRvbmUoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBXZSBvbmx5IGNhcmUgYWJvdXQgcm93cyBvbiBvdXIgKHNpbXBsZXgpIHdpcmVcbiAgICAgICAgdmFyIHJvd3NPbldpcmUgPSBtZXNzYWdlVGFibGUucmVhZEFsbCgpLmZpbHRlcihmdW5jdGlvbiAocm93KSB7XG4gICAgICAgICAgcmV0dXJuIG15V2lyZS5pc01lc3NhZ2VSb3dPblNpbXBsZXhXaXJlKHJvdyk7XG4gICAgICAgIH0sIHRoaXMpO1xuXG4gICAgICAgIC8vIFwiT2xkXCIgcm93cyBhcmUgYWxsIGJ1dCB0aGUgbGFzdCBlbGVtZW50ICh0aGUgbGF0ZXN0IG9uZSlcbiAgICAgICAgdmFyIG9sZFJvd3NPbldpcmUgPSByb3dzT25XaXJlLnNsaWNlKDAsIC0xKTtcblxuICAgICAgICAvLyBXZSBhcmUgb25seSBpbiBjaGFyZ2Ugb2YgZGVsZXRpbmcgbWVzc2FnZXMgdGhhdCB3ZSBhcmUgc2ltdWxhdGluZ1xuICAgICAgICB2YXIgbXlPbGRSb3dzT25XaXJlID0gb2xkUm93c09uV2lyZS5maWx0ZXIoZnVuY3Rpb24gKHJvdykge1xuICAgICAgICAgIHJldHVybiByb3cuc2ltdWxhdGVkQnkgPT09IHRoaXMuZW50aXR5SUQ7XG4gICAgICAgIH0sIHRoaXMpO1xuXG4gICAgICAgIC8vIENvbnZlcnQgdG8gbWVzc2FnZSBlbnRpdGllcyBzbyB3ZSBjYW4gZGVzdHJveSB0aGVtXG4gICAgICAgIHZhciBteU9sZE1lc3NhZ2VzT25XaXJlID0gbXlPbGRSb3dzT25XaXJlLm1hcChmdW5jdGlvbiAocm93KSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBOZXRTaW1NZXNzYWdlKHRoaXMuc2hhcmRfLCByb3cpO1xuICAgICAgICB9LCB0aGlzKTtcblxuICAgICAgICBOZXRTaW1FbnRpdHkuZGVzdHJveUVudGl0aWVzKG15T2xkTWVzc2FnZXNPbldpcmUsIG9uQ29tcGxldGUpO1xuICAgICAgfS5iaW5kKHRoaXMpKTtcbn07XG4iLCIvKipcbiAqIEBvdmVydmlldyBVSSBjb250cm9sbGVyIGZvciBsb2JieSAtIGhhbmRsZXMgZmxvdyBmb3IgbmFtZSBlbnRyeSwgc2VjdGlvblxuICogICAgICAgICAgIHNlbGVjdGlvbiwgYW5kIHJlbW90ZSBub2RlIHNlbGVjdGlvbi5cbiAqIEBzZWUgTmV0U2ltU2hhcmRTZWxlY3Rpb25QYW5lbCBmb3IgbmFtZSBlbnRyeSBhbmQgc2hhcmQgc2VsZWN0aW9uLlxuICogQHNlZSBOZXRTaW1SZW1vdGVOb2RlU2VsZWN0aW9uUGFuZWwgZm9yIGltcGxlbWVudGF0aW9uIG9mIHRoZSBhY3R1YWxcbiAqICAgICAgbG9iYnkgdGFibGUuXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIF8gPSB1dGlscy5nZXRMb2Rhc2goKTtcbnZhciBpMThuID0gcmVxdWlyZSgnLi9sb2NhbGUnKTtcbnZhciBOZXRTaW1Ob2RlRmFjdG9yeSA9IHJlcXVpcmUoJy4vTmV0U2ltTm9kZUZhY3RvcnknKTtcbnZhciBOZXRTaW1DbGllbnROb2RlID0gcmVxdWlyZSgnLi9OZXRTaW1DbGllbnROb2RlJyk7XG52YXIgTmV0U2ltQWxlcnQgPSByZXF1aXJlKCcuL05ldFNpbUFsZXJ0Jyk7XG52YXIgTmV0U2ltQXBpRXJyb3IgPSByZXF1aXJlKCcuL05ldFNpbUFwaUVycm9yJyk7XG52YXIgTmV0U2ltUm91dGVyTm9kZSA9IHJlcXVpcmUoJy4vTmV0U2ltUm91dGVyTm9kZScpO1xudmFyIE5ldFNpbVNoYXJkU2VsZWN0aW9uUGFuZWwgPSByZXF1aXJlKCcuL05ldFNpbVNoYXJkU2VsZWN0aW9uUGFuZWwnKTtcbnZhciBOZXRTaW1SZW1vdGVOb2RlU2VsZWN0aW9uUGFuZWwgPSByZXF1aXJlKCcuL05ldFNpbVJlbW90ZU5vZGVTZWxlY3Rpb25QYW5lbCcpO1xuXG52YXIgbG9nZ2VyID0gcmVxdWlyZSgnLi9OZXRTaW1Mb2dnZXInKS5nZXRTaW5nbGV0b24oKTtcbnZhciBOZXRTaW1HbG9iYWxzID0gcmVxdWlyZSgnLi9OZXRTaW1HbG9iYWxzJyk7XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gU2hhcmRDaG9pY2VcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzaGFyZFNlZWQgLSB1bmlxdWUga2V5IGZvciBzaGFyZCB3aXRoaW4gbGV2ZWwsIHVzZWQgaW5cbiAqICAgICAgICAgICBzaGFyZSBVUkxzXG4gKiBAcHJvcGVydHkge3N0cmluZ30gc2hhcmRJRCAtIHVuaXF1ZSBrZXkgZm9yIHNoYXJkIGluIHRhYmxlcyBBUEksIHVzZWQgYXNcbiAqICAgICAgICAgICBwcmVmaXggdG8gdGFibGUgbmFtZXMuICBNdXN0IGJlIDQ4IGNoYXJhY3RlcnMgb3IgbGVzcywgYW5kXG4gKiAgICAgICAgICAgY29uc2lzdGVudGx5IGdlbmVyYXRhYmxlIGZyb20gYSBsZXZlbCBJRCBhbmQgc2VlZC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkaXNwbGF5TmFtZSAtIGxvY2FsaXplZCBzaGFyZCBuYW1lXG4gKi9cblxuLyoqXG4gKiBHZW5lcmF0b3IgYW5kIGNvbnRyb2xsZXIgZm9yIGxvYmJ5L2Nvbm5lY3Rpb24gY29udHJvbHMuXG4gKlxuICogQHBhcmFtIHtqUXVlcnl9IHJvb3REaXZcbiAqIEBwYXJhbSB7TmV0U2ltfSBjb25uZWN0aW9uIC0gVGhlIHNoYXJkIGNvbm5lY3Rpb24gdGhhdCB0aGlzXG4gKiAgICAgICAgbG9iYnkgY29udHJvbCB3aWxsIG1hbmlwdWxhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtEYXNoYm9hcmRVc2VyfSBvcHRpb25zLnVzZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmxldmVsS2V5XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5zaGFyZWRTaGFyZFNlZWRcbiAqIEBjb25zdHJ1Y3RvclxuICogQGF1Z21lbnRzIE5ldFNpbVBhbmVsXG4gKi9cbnZhciBOZXRTaW1Mb2JieSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJvb3REaXYsIG5ldHNpbSwgb3B0aW9ucykge1xuICAvKipcbiAgICogQHR5cGUge2pRdWVyeX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucm9vdERpdl8gPSByb290RGl2O1xuXG4gIC8qKlxuICAgKiBTaGFyZCBjb25uZWN0aW9uIHRoYXQgdGhpcyBsb2JieSBjb250cm9sIHdpbGwgbWFuaXB1bGF0ZS5cbiAgICogQHR5cGUge05ldFNpbX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubmV0c2ltXyA9IG5ldHNpbTtcblxuICAvKipcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubGV2ZWxLZXlfID0gb3B0aW9ucy5sZXZlbEtleTtcblxuICAvKipcbiAgICogQHR5cGUge05ldFNpbVNoYXJkU2VsZWN0aW9uUGFuZWx9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnNoYXJkU2VsZWN0aW9uUGFuZWxfID0gbnVsbDtcblxuICAvKipcbiAgICogQHR5cGUge05ldFNpbVJlbW90ZU5vZGVTZWxlY3Rpb25QYW5lbH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubm9kZVNlbGVjdGlvblBhbmVsXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtOZXRTaW1TaGFyZH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuc2hhcmRfID0gbnVsbDtcblxuICAvKipcbiAgICogQHR5cGUge05ldFNpbUxvY2FsQ2xpZW50Tm9kZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubXlOb2RlXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFN0b3JhZ2UgZm9yIE9ic2VydmFibGVFdmVudCByZWdpc3RyYXRpb24ga2V5cywgdG8gbWFrZSBzdXJlIHdlXG4gICAqIGNhbiB1bnJlZ2lzdGVyIGFzIG5lZWRlZC5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHRoaXMuZXZlbnRLZXlzID0ge307XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtEYXNoYm9hcmRVc2VyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy51c2VyXyA9IG9wdGlvbnMudXNlcjtcblxuICAvKipcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuZGlzcGxheU5hbWVfID0gKG9wdGlvbnMudXNlci5pc1NpZ25lZEluKSA/IG9wdGlvbnMudXNlci5uYW1lIDogJyc7XG5cbiAgLyoqXG4gICAqIFNoYXJkIG9wdGlvbnMgZm9yIHRoZSBjdXJyZW50IHVzZXJcbiAgICogQHR5cGUge1NoYXJkQ2hvaWNlW119XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnNoYXJkQ2hvaWNlc18gPSBbXTtcblxuICAvKipcbiAgICogV2hpY2ggc2hhcmQgSUQgaXMgY3VycmVudGx5IHNlbGVjdGVkXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnNlbGVjdGVkU2hhcmRJRF8gPSB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtOZXRTaW1Ob2RlW119XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLm5vZGVzT25TaGFyZF8gPSBbXTtcblxuICAvKipcbiAgICogQHR5cGUge05ldFNpbU5vZGVbXX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuaW5jb21pbmdDb25uZWN0aW9uTm9kZXNfID0gW107XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtOZXRTaW1Ob2RlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5yZW1vdGVOb2RlXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIEFsbG93cyBtdWx0aXBsZSBtZXRob2RzIHRvIGhhdmUgYSAnZGlzYWJsZScgbG9jayBvbiB0aGUgbG9iYnkuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmRpc2FibGVFdmVyeXRoaW5nS2V5c18gPSB7fTtcblxuICAvLyBGaWd1cmUgb3V0IHRoZSBsaXN0IG9mIHVzZXIgc2VjdGlvbnMsIHdoaWNoIHJlcXVpcmVzIGFuIGFzeW5jIHJlcXVlc3RcbiAgLy8gYW5kIHJlLXJlbmRlciBpZiB0aGUgdXNlciBpcyBzaWduZWQgaW4uXG4gIGlmIChvcHRpb25zLnVzZXIuaXNTaWduZWRJbikge1xuICAgIHRoaXMuZ2V0VXNlclNlY3Rpb25zXyhmdW5jdGlvbiAoc2VjdGlvbkxpc3QpIHtcbiAgICAgIHRoaXMuYnVpbGRTaGFyZENob2ljZUxpc3RfKHNlY3Rpb25MaXN0LCBvcHRpb25zLnNoYXJlZFNoYXJkU2VlZCk7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH0uYmluZCh0aGlzKSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5idWlsZFNoYXJkQ2hvaWNlTGlzdF8oW10sIG9wdGlvbnMuc2hhcmVkU2hhcmRTZWVkKTtcbiAgfVxuXG4gIC8vIEluaXRpYWwgcmVuZGVyXG4gIHRoaXMucmVuZGVyKCk7XG5cbiAgLy8gUmVnaXN0ZXIgZm9yIGV2ZW50c1xuICB0aGlzLm5ldHNpbV8uc2hhcmRDaGFuZ2UucmVnaXN0ZXIodGhpcy5vblNoYXJkQ2hhbmdlXy5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogUmVjcmVhdGUgbWFya3VwIHdpdGhpbiBwYW5lbCBib2R5LlxuICovXG5OZXRTaW1Mb2JieS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaXNDb25uZWN0ZWRUb1NoYXJkID0gKHRoaXMuc2hhcmRfICE9PSBudWxsKTtcbiAgaWYgKCFpc0Nvbm5lY3RlZFRvU2hhcmQpIHtcblxuICAgIC8vIFNoYXJkIHNlbGVjdGlvbiBwYW5lbDogQ29udHJvbHMgZm9yIHNldHRpbmcgZGlzcGxheSBuYW1lIGFuZCBwaWNraW5nXG4gICAgLy8gYSBzZWN0aW9uLCBpZiB0aGV5IGFyZW4ndCBzZXQgYXV0b21hdGljYWxseS5cbiAgICB0aGlzLnNoYXJkU2VsZWN0aW9uUGFuZWxfID0gbmV3IE5ldFNpbVNoYXJkU2VsZWN0aW9uUGFuZWwoXG4gICAgICAgIHRoaXMucm9vdERpdl8sXG4gICAgICAgIHtcbiAgICAgICAgICBkaXNwbGF5TmFtZTogdGhpcy5kaXNwbGF5TmFtZV8sXG4gICAgICAgICAgc2hhcmRDaG9pY2VzOiB0aGlzLnNoYXJkQ2hvaWNlc18sXG4gICAgICAgICAgc2VsZWN0ZWRTaGFyZElEOiB0aGlzLnNlbGVjdGVkU2hhcmRJRF8sXG4gICAgICAgICAgZGlzYWJsZUNvbnRyb2xzOiB0aGlzLmlzRXZlcnl0aGluZ0Rpc2FibGVkKClcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHNldE5hbWVDYWxsYmFjazogdGhpcy5zZXREaXNwbGF5TmFtZS5iaW5kKHRoaXMpLFxuICAgICAgICAgIHNldFNoYXJkQ2FsbGJhY2s6IHRoaXMuc2V0U2hhcmRJRC5iaW5kKHRoaXMpXG4gICAgICAgIH0pO1xuXG4gIH0gZWxzZSB7XG5cbiAgICAvLyBOb2RlIHNlbGVjdGlvbiBwYW5lbDogVGhlIGxvYmJ5IGxpc3Qgb2Ygd2hvIHdlIGNhbiBjb25uZWN0IHRvLCBhbmRcbiAgICAvLyBjb250cm9scyBmb3IgcGlja2luZyBvbmUgYW5kIGNvbm5lY3RpbmcuXG4gICAgdGhpcy5ub2RlU2VsZWN0aW9uUGFuZWxfID0gbmV3IE5ldFNpbVJlbW90ZU5vZGVTZWxlY3Rpb25QYW5lbChcbiAgICAgICAgdGhpcy5yb290RGl2XyxcbiAgICAgICAge1xuICAgICAgICAgIHVzZXI6IHRoaXMudXNlcl8sXG4gICAgICAgICAgc2hhcmRJRDogdGhpcy5zaGFyZF8uaWQsXG4gICAgICAgICAgbm9kZXNPblNoYXJkOiB0aGlzLm5vZGVzT25TaGFyZF8sXG4gICAgICAgICAgaW5jb21pbmdDb25uZWN0aW9uTm9kZXM6IHRoaXMuaW5jb21pbmdDb25uZWN0aW9uTm9kZXNfLFxuICAgICAgICAgIHJlbW90ZU5vZGU6IHRoaXMucmVtb3RlTm9kZV8sXG4gICAgICAgICAgbXlOb2RlSUQ6IHRoaXMubXlOb2RlXy5lbnRpdHlJRCxcbiAgICAgICAgICBkaXNhYmxlQ29udHJvbHM6IHRoaXMuaXNFdmVyeXRoaW5nRGlzYWJsZWQoKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgYWRkUm91dGVyQ2FsbGJhY2s6IHRoaXMuYWRkUm91dGVyVG9Mb2JieS5iaW5kKHRoaXMpLFxuICAgICAgICAgIGNhbmNlbEJ1dHRvbkNhbGxiYWNrOiB0aGlzLm9uQ2FuY2VsQnV0dG9uQ2xpY2tfLmJpbmQodGhpcyksXG4gICAgICAgICAgam9pbkJ1dHRvbkNhbGxiYWNrOiB0aGlzLm9uSm9pbkJ1dHRvbkNsaWNrXy5iaW5kKHRoaXMpLFxuICAgICAgICAgIHJlc2V0U2hhcmRDYWxsYmFjazogdGhpcy5vblJlc2V0U2hhcmRCdXR0b25DbGlja18uYmluZCh0aGlzKVxuICAgICAgICB9KTtcblxuICB9XG5cbiAgdGhpcy5uZXRzaW1fLmRlYm91bmNlZFJlc2l6ZUZvb3RlcigpO1xufTtcblxuTmV0U2ltTG9iYnkucHJvdG90eXBlLnVwZGF0ZUxheW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMubm9kZVNlbGVjdGlvblBhbmVsXykge1xuICAgIHRoaXMubm9kZVNlbGVjdGlvblBhbmVsXy51cGRhdGVMYXlvdXQoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGxheU5hbWVcbiAqL1xuTmV0U2ltTG9iYnkucHJvdG90eXBlLnNldERpc3BsYXlOYW1lID0gZnVuY3Rpb24gKGRpc3BsYXlOYW1lKSB7XG4gIHRoaXMuZGlzcGxheU5hbWVfID0gZGlzcGxheU5hbWU7XG4gIHRoaXMucmVuZGVyKCk7XG5cbiAgaWYgKHRoaXMuc2VsZWN0ZWRTaGFyZElEXyAmJiB0aGlzLmRpc3BsYXlOYW1lXyAmJlxuICAgICAgIXRoaXMubmV0c2ltXy5pc0Nvbm5lY3RlZFRvU2hhcmRJRCh0aGlzLnNlbGVjdGVkU2hhcmRJRF8pKSB7XG4gICAgdGhpcy5uZXRzaW1fLmNvbm5lY3RUb1NoYXJkKHRoaXMuc2VsZWN0ZWRTaGFyZElEXywgdGhpcy5kaXNwbGF5TmFtZV8pO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzaGFyZElEXG4gKi9cbk5ldFNpbUxvYmJ5LnByb3RvdHlwZS5zZXRTaGFyZElEID0gZnVuY3Rpb24gKHNoYXJkSUQpIHtcbiAgdGhpcy5zZWxlY3RlZFNoYXJkSURfID0gc2hhcmRJRDtcbiAgdGhpcy5yZW5kZXIoKTtcblxuICBpZiAodGhpcy5zZWxlY3RlZFNoYXJkSURfICYmIHRoaXMuZGlzcGxheU5hbWVfICYmXG4gICAgICAhdGhpcy5uZXRzaW1fLmlzQ29ubmVjdGVkVG9TaGFyZElEKHRoaXMuc2VsZWN0ZWRTaGFyZElEXykpIHtcbiAgICB0aGlzLm5ldHNpbV8uY29ubmVjdFRvU2hhcmQodGhpcy5zZWxlY3RlZFNoYXJkSURfLCB0aGlzLmRpc3BsYXlOYW1lXyk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtOZXRTaW1TaGFyZH0gc2hhcmRcbiAqIEBwYXJhbSB7TmV0U2ltTG9jYWxDbGllbnROb2RlfSBteU5vZGVcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbUxvYmJ5LnByb3RvdHlwZS5vblNoYXJkQ2hhbmdlXyA9IGZ1bmN0aW9uIChzaGFyZCwgbXlOb2RlKSB7XG4gIC8vIFVucmVnaXN0ZXIgb2xkIGhhbmRsZXJzXG4gIGlmICh0aGlzLmV2ZW50S2V5cy5yZWdpc3RlcmVkU2hhcmQpIHtcbiAgICB0aGlzLmV2ZW50S2V5cy5yZWdpc3RlcmVkU2hhcmQubm9kZVRhYmxlLnRhYmxlQ2hhbmdlLnVucmVnaXN0ZXIoXG4gICAgICAgIHRoaXMuZXZlbnRLZXlzLm5vZGVUYWJsZSk7XG4gICAgdGhpcy5ldmVudEtleXMucmVnaXN0ZXJlZFNoYXJkLndpcmVUYWJsZS50YWJsZUNoYW5nZS51bnJlZ2lzdGVyKFxuICAgICAgICB0aGlzLmV2ZW50S2V5cy53aXJlVGFibGUpO1xuICAgIHRoaXMucmVnaXN0ZXJlZFNoYXJkID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgdGhpcy5zaGFyZF8gPSBzaGFyZDtcbiAgdGhpcy5teU5vZGVfID0gbXlOb2RlO1xuXG4gIGlmICh0aGlzLnNoYXJkXykge1xuICAgIC8vIFdlIGdvdCBjb25uZWN0ZWQgdG8gYSBzaGFyZCFcbiAgICAvLyBSZWdpc3RlciBmb3IgZXZlbnRzXG4gICAgdGhpcy5ldmVudEtleXMubm9kZVRhYmxlID0gdGhpcy5zaGFyZF8ubm9kZVRhYmxlLnRhYmxlQ2hhbmdlLnJlZ2lzdGVyKFxuICAgICAgICB0aGlzLm9uTm9kZVRhYmxlQ2hhbmdlXy5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmV2ZW50S2V5cy53aXJlVGFibGUgPSB0aGlzLnNoYXJkXy53aXJlVGFibGUudGFibGVDaGFuZ2UucmVnaXN0ZXIoXG4gICAgICAgIHRoaXMub25XaXJlVGFibGVDaGFuZ2VfLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZXZlbnRLZXlzLnJlZ2lzdGVyZWRTaGFyZCA9IHRoaXMuc2hhcmRfO1xuXG4gICAgLy8gVHJpZ2dlciBhIGZvcmNlZCByZWFkIG9mIHRoZSBub2RlIHRhYmxlXG4gICAgdGhpcy5mZXRjaEluaXRpYWxMb2JieURhdGFfKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gV2UndmUgYmVlbiBkaXNjb25uZWN0ZWQgZnJvbSBhIHNoYXJkXG4gICAgLy8gQ2xlYXIgb3VyIHNlbGVjdGVkIHNoYXJkIElEXG4gICAgdGhpcy5zZWxlY3RlZFNoYXJkSURfID0gdW5kZWZpbmVkO1xuXG4gICAgLy8gQ2xlYXIgY2FjaGVkIGxvYmJ5IGRhdGFcbiAgICB0aGlzLm5vZGVzT25TaGFyZF8ubGVuZ3RoID0gMDtcbiAgICB0aGlzLmluY29taW5nQ29ubmVjdGlvbk5vZGVzXy5sZW5ndGggPSAwO1xuXG4gICAgLy8gUmVkcmF3IHRoZSBsb2JieVxuICAgIHRoaXMucmVuZGVyKCk7XG5cbiAgICAvLyBJZiB0aGVyZSdzIG9ubHkgb25lIG9wdGlvbiwgdHJ5IHRvIGF1dG8tcmVjb25uZWN0XG4gICAgaWYgKHRoaXMuc2hhcmRDaG9pY2VzXy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHRoaXMuc2V0U2hhcmRJRCh0aGlzLnNoYXJkQ2hvaWNlc19bMF0uc2hhcmRJRCk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFVwb24gY29ubmVjdGluZyB0byBhIG5ldyBzaGFyZCwgd2UgbmVlZCB0byB0cmlnZ2VyIGEgbWFudWFsIHJlYWQgb2YgdGhlXG4gKiBub2RlIGFuZCB3aXJlIHRhYmxlcyB0byBlbnN1cmUgb3VyIGxvYmJ5IGxpc3RpbmcgaXMgY29ycmVjdC4gIE90aGVyd2lzZSB3ZSdkXG4gKiBoYXZlIHRvIHdhaXQgdW50aWwgYSBjaGFuZ2Ugd2FzIGRldGVjdGVkIGluIG9uZSBvZiB0aG9zZSB0YWJsZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Mb2JieS5wcm90b3R5cGUuZmV0Y2hJbml0aWFsTG9iYnlEYXRhXyA9IGZ1bmN0aW9uICgpIHtcbiAgJC53aGVuKHRoaXMuc2hhcmRfLm5vZGVUYWJsZS5yZWZyZXNoKCksIHRoaXMuc2hhcmRfLndpcmVUYWJsZS5yZWZyZXNoKCkpXG4gICAgICAuZmFpbChmdW5jdGlvbiAobm9kZUVyciwgd2lyZUVycikge1xuICAgICAgICBpZiAobm9kZUVycikge1xuICAgICAgICAgIGxvZ2dlci53YXJuKCdOb2RlIHRhYmxlIHJlZnJlc2ggZmFpbGVkOiAnICsgbm9kZUVycik7XG4gICAgICAgIH0gZWxzZSBpZiAod2lyZUVycikge1xuICAgICAgICAgIGxvZ2dlci53YXJuKCdXaXJlIHRhYmxlIHJlZnJlc2ggZmFpbGVkOiAnICsgd2lyZUVycik7XG4gICAgICAgIH1cbiAgICAgIH0uYmluZCh0aGlzKSlcbiAgICAgIC5kb25lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gQmVjYXVzZSB0aGUgbG9iYnkgbWF5IG5vdCBnZXQgdGFibGUtY2hhbmdlIGV2ZW50cyBmcm9tIHRoaXMgcmVmcmVzaCxcbiAgICAgICAgLy8gbWFudWFsbHkgcGFzcyB0aGUgY2FjaGVkIHRhYmxlIGNvbnRlbnRzIGluLlxuICAgICAgICB0aGlzLm9uTm9kZVRhYmxlQ2hhbmdlXygpO1xuICAgICAgICB0aGlzLm9uV2lyZVRhYmxlQ2hhbmdlXygpO1xuXG4gICAgICAgIC8vIElmIHdlIHVzZSByb3V0ZXJzIGFuZCB0aGVyZSdzIG5vIHJvdXRlciwgY3JlYXRlIGEgcm91dGVyLlxuICAgICAgICAvLyBUT0RPOiBNb3ZlIHRoaXMgbG9naWMgdG8gdGhlIHNlcnZlciwgc29tZWhvdy5cbiAgICAgICAgaWYgKE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKS5jYW5Db25uZWN0VG9Sb3V0ZXJzICYmXG4gICAgICAgICAgICAhdGhpcy5kb2VzU2hhcmRDb250YWluUm91dGVyKCkpIHtcbiAgICAgICAgICB0aGlzLmFkZFJvdXRlclRvTG9iYnkoKTtcbiAgICAgICAgfVxuICAgICAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge2Jvb2xlYW59IHdoZXRoZXIgdGhlIGN1cnJlbnRseSBjYWNoZWQgbm9kZSBkYXRhIGZvciB0aGUgc2hhcmRcbiAqICAgICAgICAgIGluY2x1ZGVzIGEgcm91dGVyIG5vZGUuXG4gKi9cbk5ldFNpbUxvYmJ5LnByb3RvdHlwZS5kb2VzU2hhcmRDb250YWluUm91dGVyID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdW5kZWZpbmVkICE9PSBfLmZpbmQodGhpcy5ub2Rlc09uU2hhcmRfLCBmdW5jdGlvbiAoc2hhcmROb2RlKSB7XG4gICAgICAgIHJldHVybiBzaGFyZE5vZGUgaW5zdGFuY2VvZiBOZXRTaW1Sb3V0ZXJOb2RlO1xuICAgICAgfSk7XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgbmV3IHJvdXRlciBub2RlLCBjb25maWd1cmVkIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBsZXZlbC5cbiAqIFRoZSBjaGFuZ2UgdG8gdGhlIG5vZGUgdGFibGUgc2hvdWxkIHRyaWdnZXIgYXBwcm9wcmlhdGUgdXBkYXRlcyB0byB2YXJpb3VzXG4gKiBVSSBlbGVtZW50cy5cbiAqL1xuTmV0U2ltTG9iYnkucHJvdG90eXBlLmFkZFJvdXRlclRvTG9iYnkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBlbmFibGVDYWxsYmFjayA9IHRoaXMuZGlzYWJsZUV2ZXJ5dGhpbmcoKTtcbiAgTmV0U2ltUm91dGVyTm9kZS5jcmVhdGUodGhpcy5zaGFyZF8sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBlbmFibGVDYWxsYmFjaygpO1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHZhciBWYWxpZGF0aW9uRXJyb3IgPSBOZXRTaW1BcGlFcnJvci5WYWxpZGF0aW9uRXJyb3I7XG4gICAgICBzd2l0Y2ggKGVyci5kZXRhaWxzKSB7XG4gICAgICAgIGNhc2UgVmFsaWRhdGlvbkVycm9yLkNPTkZMSUNUOlxuICAgICAgICAgIC8vIEFub3RoZXIgcm91dGVyIHdpdGggdGhlIHNhbWUgcm91dGVyTnVtYmVyIGFscmVhZHkgZXhpc3RzLlxuICAgICAgICAgIC8vIElnbm9yZSB0aGlzOyB0byB0aGUgdXNlciBpdCBsb29rcyBsaWtlIGl0IHdvcmtlZCFcbiAgICAgICAgICBsb2dnZXIud2FybignRGlkIG5vdCBjcmVhdGUgcm91dGVyOyAnICtcbiAgICAgICAgICAgICAgJ0Fub3RoZXIgdXNlciBjcmVhdGVkIGEgcm91dGVyIGF0IHRoZSBzYW1lIHRpbWUuJyk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBWYWxpZGF0aW9uRXJyb3IuTElNSVRfUkVBQ0hFRDpcbiAgICAgICAgICAvLyBUaGUgc2VydmVyJ3Mgcm91dGVyIGxpbWl0IGhhcyBiZWVuIHJlYWNoZWQuXG4gICAgICAgICAgLy8gVXN1YWxseSB0aGUgY2xpZW50IHdpbGwgcmVtb3ZlIHRoZSBcIkFkZCBSb3V0ZXJcIiBidXR0b24gZmlyc3QuXG4gICAgICAgICAgbG9nZ2VyLndhcm4oJ0RpZCBub3QgY3JlYXRlIHJvdXRlcjsgUm91dGVyIGxpbWl0IHJlYWNoZWQuJyk7XG4gICAgICAgICAgTmV0U2ltQWxlcnQud2FybihpMThuLnJvdXRlckxpbWl0UmVhY2hlZEVycm9yKCkpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgLy8gTWFsZm9ybWVkIHJvdyBvciBzb21lIG90aGVyIHVuZXhwZWN0ZWQgZXJyb3IuXG4gICAgICAgICAgbG9nZ2VyLmVycm9yKFwiVW5hYmxlIHRvIGNyZWF0ZSByb3V0ZXI6IFwiICsgZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgIE5ldFNpbUFsZXJ0LmVycm9yKGkxOG4uYWRkUm91dGVyVG9Mb2JieUVycm9yKCkpO1xuICAgICAgfVxuICAgIH1cbiAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRSVUUgaWYgYW55dGhpbmcgaGFzIHJlcXVlc3RlZCB0aGUgd2hvbGUgbG9iYnkgdG8gYmVcbiAqICAgICAgICAgIGRpc2FibGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbk5ldFNpbUxvYmJ5LnByb3RvdHlwZS5pc0V2ZXJ5dGhpbmdEaXNhYmxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuZGlzYWJsZUV2ZXJ5dGhpbmdLZXlzXykubGVuZ3RoID4gMDtcbn07XG5cbi8qKlxuICogRGlzYWJsZSBhbGwgb2YgdGhlIGxvYmJ5IGNvbnRyb2xzIHRvZ2V0aGVyLlxuICogQHJldHVybnMge2Z1bmN0aW9ufSBDYWxsYmFjayBmb3IgcmUtZW5hYmxpbmcgdGhlIGxvYmJ5LlxuICovXG5OZXRTaW1Mb2JieS5wcm90b3R5cGUuZGlzYWJsZUV2ZXJ5dGhpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciByZXF1ZXN0S2V5ID0gdXRpbHMuY3JlYXRlVXVpZCgpO1xuICB0aGlzLmRpc2FibGVFdmVyeXRoaW5nS2V5c19bcmVxdWVzdEtleV0gPSB0cnVlO1xuXG4gIGlmICh0aGlzLm5vZGVTZWxlY3Rpb25QYW5lbF8pIHtcbiAgICB0aGlzLm5vZGVTZWxlY3Rpb25QYW5lbF8uZGlzYWJsZUV2ZXJ5dGhpbmcoKTtcbiAgfVxuXG4gIC8vIFJldHVybiBhbiAnZW5hYmxlJyBjYWxsYmFja1xuICByZXR1cm4gdGhpcy5lbmFibGVFdmVyeXRoaW5nXy5iaW5kKHRoaXMsIHJlcXVlc3RLZXkpO1xufTtcblxuLyoqXG4gKiBSZWxlYXNlIGEgJ2Rpc2FibGUtaG9sZCcgb24gdGhlIGxvYmJ5IGFuZCByZS1lbmFibGUgdGhlIGxvYmJ5IGNvbnRyb2xzIGlmXG4gKiBpdCB3YXMgdGhlIGxhc3Qgc3VjaCBkaXNhYmxlLWhvbGQuXG4gKiBAcGFyYW0geyFzdHJpbmd9IGtleSAtIGEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoaXMgcGFydGljdWxhciBkaXNhYmxlIHJlcXVlc3QuXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Mb2JieS5wcm90b3R5cGUuZW5hYmxlRXZlcnl0aGluZ18gPSBmdW5jdGlvbiAoa2V5KSB7XG4gIGRlbGV0ZSB0aGlzLmRpc2FibGVFdmVyeXRoaW5nS2V5c19ba2V5XTtcbiAgaWYgKCF0aGlzLmlzRXZlcnl0aGluZ0Rpc2FibGVkKCkpIHtcbiAgICBpZiAodGhpcy5ub2RlU2VsZWN0aW9uUGFuZWxfKSB7XG4gICAgICB0aGlzLm5vZGVTZWxlY3Rpb25QYW5lbF8uZW5hYmxlRXZlcnl0aGluZygpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBIYW5kbGVyIGZvciBjbGlja2luZyB0aGUgXCJKb2luXCIgYnV0dG9uLlxuICogQHBhcmFtIHtOZXRTaW1DbGllbnROb2RlfE5ldFNpbVJvdXRlck5vZGV9IG5vZGVUb0pvaW5cbiAqL1xuTmV0U2ltTG9iYnkucHJvdG90eXBlLm9uSm9pbkJ1dHRvbkNsaWNrXyA9IGZ1bmN0aW9uIChub2RlVG9Kb2luKSB7XG4gIHZhciBlbmFibGVDYWxsYmFjayA9IHRoaXMuZGlzYWJsZUV2ZXJ5dGhpbmcoKTtcbiAgaWYgKG5vZGVUb0pvaW4gaW5zdGFuY2VvZiBOZXRTaW1Sb3V0ZXJOb2RlKSB7XG4gICAgdGhpcy5uZXRzaW1fLmNvbm5lY3RUb1JvdXRlcihub2RlVG9Kb2luLmVudGl0eUlELCBlbmFibGVDYWxsYmFjayk7XG4gIH0gZWxzZSBpZiAobm9kZVRvSm9pbiBpbnN0YW5jZW9mIE5ldFNpbUNsaWVudE5vZGUpIHtcbiAgICB0aGlzLm15Tm9kZV8uY29ubmVjdFRvQ2xpZW50KG5vZGVUb0pvaW4sIGVuYWJsZUNhbGxiYWNrKTtcbiAgfVxufTtcblxuLyoqXG4gKiBIYW5kbGVyIGZvciBjbGlja2luZyB0aGUgXCJDYW5jZWxcIiBidXR0b24gdG8gc3RvcCB0cnlpbmcgdG8gY29ubmVjdCB0b1xuICogYW5vdGhlciBjbGllbnQuXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Mb2JieS5wcm90b3R5cGUub25DYW5jZWxCdXR0b25DbGlja18gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBlbmFibGVDYWxsYmFjayA9IHRoaXMuZGlzYWJsZUV2ZXJ5dGhpbmcoKTtcbiAgdGhpcy5uZXRzaW1fLmRpc2Nvbm5lY3RGcm9tUmVtb3RlKGVuYWJsZUNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogSGFuZGxlIGZvciBjbGlja2luZyB0aGUgcmVzZXQgc2hhcmQgYnV0dG9uLlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltTG9iYnkucHJvdG90eXBlLm9uUmVzZXRTaGFyZEJ1dHRvbkNsaWNrXyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5uZXRzaW1fLnJlc2V0U2hhcmQoKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdoZW5ldmVyIGEgY2hhbmdlIGlzIGRldGVjdGVkIGluIHRoZSBub2RlcyB0YWJsZSAtIHdoaWNoIHNob3VsZFxuICogdHJpZ2dlciBhIHJlZnJlc2ggb2YgdGhlIGxvYmJ5IGxpc3RpbmdcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbUxvYmJ5LnByb3RvdHlwZS5vbk5vZGVUYWJsZUNoYW5nZV8gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMubm9kZXNPblNoYXJkXyA9IE5ldFNpbU5vZGVGYWN0b3J5Lm5vZGVzRnJvbVJvd3ModGhpcy5zaGFyZF8sXG4gICAgICB0aGlzLnNoYXJkXy5ub2RlVGFibGUucmVhZEFsbCgpKTtcbiAgdGhpcy5yZW5kZXIoKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdoZW5ldmVyIGEgY2hhbmdlIGlzIGRldGVjdGVkIGluIHRoZSB3aXJlcyB0YWJsZS5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbUxvYmJ5LnByb3RvdHlwZS5vbldpcmVUYWJsZUNoYW5nZV8gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciByb3dzID0gdGhpcy5zaGFyZF8ud2lyZVRhYmxlLnJlYWRBbGwoKTtcbiAgLy8gVXBkYXRlIHRoZSBjb2xsZWN0aW9uIG9mIG5vZGVzIHdpdGggY29ubmVjdGlvbnMgcG9pbnRpbmcgdG93YXJkIHVzLlxuICB0aGlzLmluY29taW5nQ29ubmVjdGlvbk5vZGVzXyA9IHJvd3MuZmlsdGVyKGZ1bmN0aW9uICh3aXJlUm93KSB7XG4gICAgcmV0dXJuIHdpcmVSb3cucmVtb3RlTm9kZUlEID09PSB0aGlzLm15Tm9kZV8uZW50aXR5SUQ7XG4gIH0sIHRoaXMpLm1hcChmdW5jdGlvbiAod2lyZVJvdykge1xuICAgIHJldHVybiBfLmZpbmQodGhpcy5ub2Rlc09uU2hhcmRfLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgcmV0dXJuIG5vZGUuZW50aXR5SUQgPT09IHdpcmVSb3cubG9jYWxOb2RlSUQ7XG4gICAgfSk7XG4gIH0sIHRoaXMpLmZpbHRlcihmdW5jdGlvbiAobm9kZSkge1xuICAgIC8vIEluIGNhc2UgdGhlIHdpcmUgdGFibGUgY2hhbmdlIGNvbWVzIGluIGJlZm9yZSB0aGUgbm9kZSB0YWJsZSBjaGFuZ2UuXG4gICAgcmV0dXJuIG5vZGUgIT09IHVuZGVmaW5lZDtcbiAgfSk7XG5cbiAgLy8gRmluZCBvdXRnb2luZyB3aXJlc1xuICB2YXIgb3V0Z29pbmdXaXJlUm93ID0gXy5maW5kKHJvd3MsIGZ1bmN0aW9uICh3aXJlUm93KSB7XG4gICAgcmV0dXJuIHdpcmVSb3cubG9jYWxOb2RlSUQgPT09IHRoaXMubXlOb2RlXy5lbnRpdHlJRDtcbiAgfS5iaW5kKHRoaXMpKTtcblxuICB0aGlzLnJlbW90ZU5vZGVfID0gb3V0Z29pbmdXaXJlUm93ID9cbiAgICAgIF8uZmluZCh0aGlzLm5vZGVzT25TaGFyZF8sIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlLmVudGl0eUlEID09PSBvdXRnb2luZ1dpcmVSb3cucmVtb3RlTm9kZUlEO1xuICAgICAgfSkgOiBudWxsO1xuXG4gIC8vIFJlLXJlbmRlciB3aXRoIG5ldyBpbmZvcm1hdGlvblxuICB0aGlzLnJlbmRlcigpO1xufTtcblxuXG4vKipcbiAqIFNlbmQgYSByZXF1ZXN0IHRvIGRhc2hib2FyZCBhbmQgcmV0cmlldmUgYSBKU09OIGFycmF5IGxpc3RpbmcgdGhlXG4gKiBzZWN0aW9ucyB0aGlzIHVzZXIgYmVsb25ncyB0by5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Mb2JieS5wcm90b3R5cGUuZ2V0VXNlclNlY3Rpb25zXyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICB2YXIgbWVtYmVyU2VjdGlvbnNSZXF1ZXN0ID0gJC5hamF4KHtcbiAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgIHVybDogJy92Mi9zZWN0aW9ucy9tZW1iZXJzaGlwJ1xuICB9KTtcblxuICB2YXIgb3duZWRTZWN0aW9uc1JlcXVlc3QgPSAkLmFqYXgoe1xuICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgdXJsOiAnL3YyL3NlY3Rpb25zJ1xuICB9KTtcblxuICAkLndoZW4obWVtYmVyU2VjdGlvbnNSZXF1ZXN0LCBvd25lZFNlY3Rpb25zUmVxdWVzdCkuZG9uZShmdW5jdGlvbiAocmVzdWx0MSwgcmVzdWx0Mikge1xuICAgIHZhciBtZW1iZXJTZWN0aW9uRGF0YSA9IHJlc3VsdDFbMF07XG4gICAgdmFyIG93bmVkU2VjdGlvbkRhdGEgPSByZXN1bHQyWzBdO1xuICAgIGNhbGxiYWNrKG1lbWJlclNlY3Rpb25EYXRhLmNvbmNhdChvd25lZFNlY3Rpb25EYXRhKSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBQb3B1bGF0ZSB0aGUgaW50ZXJuYWwgY2FjaGUgb2Ygc2hhcmQgb3B0aW9ucywgZ2l2ZW4gYSBzZXQgb2YgdGhlIGN1cnJlbnRcbiAqIHVzZXIncyBzZWN0aW9ucy5cbiAqIEBwYXJhbSB7QXJyYXl9IHNlY3Rpb25MaXN0IC0gbGlzdCBvZiBzZWN0aW9ucyB0aGlzIHVzZXIgaXMgYSBtZW1iZXIgb3JcbiAqICAgICAgICBhZG1pbmlzdHJhdG9yIG9mLiAgRWFjaCBzZWN0aW9uIGhhcyBhbiBpZCBhbmQgYSBuYW1lLiAgTWF5IGJlIGVtcHR5LlxuICogQHBhcmFtIHtzdHJpbmd9IHNoYXJlZFNoYXJkU2VlZCAtIGEgc2hhcmQgSUQgcHJlc2VudCBpZiB3ZSByZWFjaGVkIG5ldHNpbVxuICogICAgICAgIHZpYSBhIHNoYXJlIGxpbmsuICBXZSBzaG91bGQgbWFrZSBzdXJlIHRoaXMgc2hhcmQgaXMgYW4gb3B0aW9uLlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltTG9iYnkucHJvdG90eXBlLmJ1aWxkU2hhcmRDaG9pY2VMaXN0XyA9IGZ1bmN0aW9uIChcbiAgICBzZWN0aW9uTGlzdCwgc2hhcmVkU2hhcmRTZWVkKSB7XG4gIHRoaXMuc2hhcmRDaG9pY2VzXy5sZW5ndGggPSAwO1xuXG4gIC8vIElmIHdlIGhhdmUgYSBzaGFyZWQgc2hhcmQgc2VlZCwgcHV0IGl0IGZpcnN0IGluIHRoZSBsaXN0OlxuICBpZiAoc2hhcmVkU2hhcmRTZWVkKSB7XG4gICAgdmFyIHNoYXJlZFNoYXJkSUQgPSB0aGlzLm1ha2VTaGFyZElERnJvbVNlZWRfKHNoYXJlZFNoYXJkU2VlZCk7XG4gICAgdGhpcy5zaGFyZENob2ljZXNfLnB1c2goe1xuICAgICAgc2hhcmRTZWVkOiBzaGFyZWRTaGFyZFNlZWQsXG4gICAgICBzaGFyZElEOiBzaGFyZWRTaGFyZElELFxuICAgICAgZGlzcGxheU5hbWU6IHNoYXJlZFNoYXJkU2VlZFxuICAgIH0pO1xuICB9XG5cbiAgLy8gQWRkIHVzZXIncyBzZWN0aW9ucyB0byB0aGUgc2hhcmQgbGlzdFxuICB0aGlzLnNoYXJkQ2hvaWNlc18gPSB0aGlzLnNoYXJkQ2hvaWNlc18uY29uY2F0KFxuICAgICAgc2VjdGlvbkxpc3QubWFwKGZ1bmN0aW9uIChzZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2hhcmRTZWVkOiBzZWN0aW9uLmlkLFxuICAgICAgICAgIHNoYXJkSUQ6IHRoaXMubWFrZVNoYXJkSURGcm9tU2VlZF8oc2VjdGlvbi5pZCksXG4gICAgICAgICAgZGlzcGxheU5hbWU6IHNlY3Rpb24ubmFtZVxuICAgICAgICB9O1xuICAgICAgfS5iaW5kKHRoaXMpKSk7XG5cbiAgLy8gSWYgdGhlcmUgc3RpbGwgYXJlbid0IGFueSBvcHRpb25zLCBnZW5lcmF0ZSBhIHJhbmRvbSBzaGFyZFxuICBpZiAodGhpcy5zaGFyZENob2ljZXNfLmxlbmd0aCA9PT0gMCkge1xuICAgIHZhciBzZWVkID0gdXRpbHMuY3JlYXRlVXVpZCgpO1xuICAgIHZhciByYW5kb21TaGFyZElEID0gdGhpcy5tYWtlU2hhcmRJREZyb21TZWVkXyhzZWVkKTtcbiAgICB0aGlzLnNoYXJkQ2hvaWNlc18ucHVzaCh7XG4gICAgICBzaGFyZFNlZWQ6IHNlZWQsXG4gICAgICBzaGFyZElEOiByYW5kb21TaGFyZElELFxuICAgICAgZGlzcGxheU5hbWU6IGkxOG4ubXlQcml2YXRlTmV0d29yaygpXG4gICAgfSk7XG4gIH1cblxuICAvLyBJZiB0aGVyZSdzIG9ubHkgb25lIHBvc3NpYmxlIHNoYXJkLCBzZWxlY3QgaXQgYnkgZGVmYXVsdFxuICBpZiAodGhpcy5zaGFyZENob2ljZXNfLmxlbmd0aCA9PT0gMSAmJiAhdGhpcy5zZWxlY3RlZFNoYXJkSURfKSB7XG4gICAgdGhpcy5zZXRTaGFyZElEKHRoaXMuc2hhcmRDaG9pY2VzX1swXS5zaGFyZElEKTtcbiAgfVxufTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHVuaXF1ZSBzaGFyZCBrZXkgZnJvbSB0aGUgZ2l2ZW4gc2VlZFxuICogQHBhcmFtIHtzdHJpbmd9IHNlZWRcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbUxvYmJ5LnByb3RvdHlwZS5tYWtlU2hhcmRJREZyb21TZWVkXyA9IGZ1bmN0aW9uIChzZWVkKSB7XG4gIC8vIFRPRE8gKGJidWNoYW5hbikgOiBIYXNoIHNoYXJkIElELCBtb3JlIGxpa2VseSB0byBlbnN1cmUgaXQncyB1bmlxdWVcbiAgLy8gICAgICAgICAgICAgICAgICAgIGFuZCBmaXRzIHdpdGhpbiA0OCBjaGFyYWN0ZXJzLlxuICAvLyBNYXliZSBncmFiIHRoaXMgTUlULWxpY2Vuc2VkIGltcGxlbWVudGF0aW9uIHZpYSBub2RlP1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vYmx1ZWltcC9KYXZhU2NyaXB0LU1ENVxuICByZXR1cm4gKCduc18nICsgdGhpcy5sZXZlbEtleV8gKyAnXycgKyBzZWVkKS5zdWJzdHIoMCwgNDgpO1xufTtcblxuLyoqXG4gKiBHZXRzIGEgc2hhcmUgVVJMIGZvciB0aGUgY3VycmVudGx5LXNlbGVjdGVkIHNoYXJkIElELlxuICogQHJldHVybnMge3N0cmluZ30gb3IgZW1wdHkgc3RyaW5nIGlmIHRoZXJlIGlzIG5vIHNoYXJkIHNlbGVjdGVkLlxuICovXG5OZXRTaW1Mb2JieS5wcm90b3R5cGUuZ2V0U2hhcmVMaW5rID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuZGlzcGxheU5hbWVfKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgdmFyIHNlbGVjdGVkU2hhcmQgPSBfLmZpbmQodGhpcy5zaGFyZENob2ljZXNfLCBmdW5jdGlvbiAoc2hhcmQpIHtcbiAgICByZXR1cm4gc2hhcmQuc2hhcmRJRCA9PT0gdGhpcy5zZWxlY3RlZFNoYXJkSURfO1xuICB9LmJpbmQodGhpcykpO1xuXG4gIGlmIChzZWxlY3RlZFNoYXJkKSB7XG4gICAgdmFyIGJhc2VMb2NhdGlvbiA9IGRvY3VtZW50LmxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArXG4gICAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhvc3QgKyBkb2N1bWVudC5sb2NhdGlvbi5wYXRobmFtZTtcbiAgICByZXR1cm4gYmFzZUxvY2F0aW9uICsgJz9zPScgKyBzZWxlY3RlZFNoYXJkLnNoYXJkU2VlZDtcbiAgfVxuXG4gIHJldHVybiAnJztcbn07XG4iLCIvKipcbiAqIEBvdmVydmlldyBMb2JieSBVSSBjb21wb25lbnQgdXNlZCBmb3IgbmFtZSBlbnRyeSBhbmQgc2VsZWN0aW5nIGEgc2hhcmQvY2xhc3NcbiAqICAgICAgICAgICBzZWN0aW9uLlxuICogQHNlZSBOZXRTaW1Mb2JieSBmb3IgdXNhZ2UuXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGkxOG4gPSByZXF1aXJlKCcuL2xvY2FsZScpO1xudmFyIG1hcmt1cCA9IHJlcXVpcmUoJy4vTmV0U2ltU2hhcmRTZWxlY3Rpb25QYW5lbC5odG1sLmVqcycpO1xudmFyIE5ldFNpbVBhbmVsID0gcmVxdWlyZSgnLi9OZXRTaW1QYW5lbCcpO1xuXG52YXIgS2V5Q29kZXMgPSByZXF1aXJlKCcuLi9jb25zdGFudHMnKS5LZXlDb2RlcztcblxuLyoqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQGNvbnN0XG4gKi9cbnZhciBTRUxFQ1RPUl9OT05FX1ZBTFVFID0gJyc7XG5cbi8qKlxuICogR2VuZXJhdG9yIGFuZCBjb250cm9sbGVyIGZvciBtZXNzYWdlIGxvZy5cbiAqXG4gKiBAcGFyYW0ge2pRdWVyeX0gcm9vdERpdlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5kaXNwbGF5TmFtZVxuICogQHBhcmFtIHtBcnJheX0gb3B0aW9ucy5zaGFyZENob2ljZXNcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnNlbGVjdGVkU2hhcmRJRFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjYWxsYmFja3NcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrcy5zZXROYW1lQ2FsbGJhY2tcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrcy5zZXRTaGFyZENhbGxiYWNrXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXVnbWVudHMgTmV0U2ltUGFuZWxcbiAqL1xudmFyIE5ldFNpbVNoYXJkU2VsZWN0aW9uUGFuZWwgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyb290RGl2LCBvcHRpb25zLFxuICAgIGNhbGxiYWNrcykge1xuICAvKipcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuZGlzcGxheU5hbWVfID0gb3B0aW9ucy5kaXNwbGF5TmFtZTtcblxuICAvKipcbiAgICogU2hhcmQgb3B0aW9ucyBmb3IgdGhlIGN1cnJlbnQgdXNlclxuICAgKiBAdHlwZSB7U2hhcmRDaG9pY2VbXX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuc2hhcmRDaG9pY2VzXyA9IHV0aWxzLnZhbHVlT3Iob3B0aW9ucy5zaGFyZENob2ljZXMsIFtdKTtcblxuICAvKipcbiAgICogV2hpY2ggc2hhcmQgSUQgaXMgY3VycmVudGx5IHNlbGVjdGVkXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnNlbGVjdGVkU2hhcmRJRF8gPSB1dGlscy52YWx1ZU9yKG9wdGlvbnMuc2VsZWN0ZWRTaGFyZElELCBTRUxFQ1RPUl9OT05FX1ZBTFVFKTtcblxuICAvKipcbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5zZXROYW1lQ2FsbGJhY2tfID0gY2FsbGJhY2tzLnNldE5hbWVDYWxsYmFjaztcblxuICAvKipcbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5zZXRTaGFyZENhbGxiYWNrXyA9IGNhbGxiYWNrcy5zZXRTaGFyZENhbGxiYWNrO1xuXG4gIC8vIEluaXRpYWwgcmVuZGVyXG4gIE5ldFNpbVBhbmVsLmNhbGwodGhpcywgcm9vdERpdiwge1xuICAgIGNsYXNzTmFtZTogJ25ldHNpbS1zaGFyZC1zZWxlY3Rpb24tcGFuZWwnLFxuICAgIHBhbmVsVGl0bGU6IGkxOG4ucGlja0FTZWN0aW9uKCksXG4gICAgdXNlclRvZ2dsZWFibGU6IGZhbHNlXG4gIH0pO1xufTtcbk5ldFNpbVNoYXJkU2VsZWN0aW9uUGFuZWwuaW5oZXJpdHMoTmV0U2ltUGFuZWwpO1xuXG4vKipcbiAqIFJlY3JlYXRlIG1hcmt1cCB3aXRoaW4gcGFuZWwgYm9keS5cbiAqL1xuTmV0U2ltU2hhcmRTZWxlY3Rpb25QYW5lbC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAvLyBDcmVhdGUgYm9pbGVycGxhdGUgcGFuZWwgbWFya3VwXG4gIE5ldFNpbVNoYXJkU2VsZWN0aW9uUGFuZWwuc3VwZXJQcm90b3R5cGUucmVuZGVyLmNhbGwodGhpcyk7XG5cbiAgLy8gQWRkIG91ciBvd24gY29udGVudCBtYXJrdXBcbiAgdmFyIG5ld01hcmt1cCA9ICQobWFya3VwKHtcbiAgICBkaXNwbGF5TmFtZTogdGhpcy5kaXNwbGF5TmFtZV8sXG4gICAgc2VsZWN0ZWRTaGFyZElEOiB0aGlzLnNlbGVjdGVkU2hhcmRJRF8sXG4gICAgc2hhcmRDaG9pY2VzOiB0aGlzLnNoYXJkQ2hvaWNlc18sXG4gICAgU0VMRUNUT1JfTk9ORV9WQUxVRTogU0VMRUNUT1JfTk9ORV9WQUxVRVxuICB9KSk7XG4gIHRoaXMuZ2V0Qm9keSgpLmh0bWwobmV3TWFya3VwKTtcblxuICAvLyBCaW5kIGhhbmRsZXJzXG4gIHZhciBuYW1lRmllbGQgPSB0aGlzLmdldEJvZHkoKS5maW5kKCcjbmV0c2ltLWxvYmJ5LW5hbWUnKTtcbiAgbmFtZUZpZWxkLmtleXVwKHRoaXMub25OYW1lS2V5VXBfLmJpbmQodGhpcykpO1xuXG4gIHZhciBzZXROYW1lQnV0dG9uID0gdGhpcy5nZXRCb2R5KCkuZmluZCgnI25ldHNpbS1sb2JieS1zZXQtbmFtZS1idXR0b24nKTtcbiAgc2V0TmFtZUJ1dHRvbi5jbGljayh0aGlzLnNldE5hbWVCdXR0b25DbGlja18uYmluZCh0aGlzKSk7XG5cbiAgdmFyIHNoYXJkU2VsZWN0ID0gdGhpcy5nZXRCb2R5KCkuZmluZCgnI25ldHNpbS1zaGFyZC1zZWxlY3QnKTtcbiAgc2hhcmRTZWxlY3QuY2hhbmdlKHRoaXMub25TaGFyZFNlbGVjdENoYW5nZV8uYmluZCh0aGlzKSk7XG4gIHNoYXJkU2VsZWN0LmtleXVwKHRoaXMub25TaGFyZFNlbGVjdEtleVVwXy5iaW5kKHRoaXMpKTtcblxuICB2YXIgc2V0U2hhcmRCdXR0b24gPSB0aGlzLmdldEJvZHkoKS5maW5kKCcjbmV0c2ltLXNoYXJkLWNvbmZpcm0tYnV0dG9uJyk7XG4gIHNldFNoYXJkQnV0dG9uLmNsaWNrKHRoaXMuc2V0U2hhcmRCdXR0b25DbGlja18uYmluZCh0aGlzKSk7XG5cbiAgLy8gQXQgdGhlIGVuZCBvZiBhbnkgcmVuZGVyIHdlIHNob3VsZCBmb2N1cyBvbiB0aGUgZWFybGllc3QgdW5zYXRpc2ZpZWRcbiAgLy8gZmllbGQsIG9yIGlmIGFsbCBmaWVsZHMgYXJlIHNhdGlzZmllZCwgdHJ5IGNvbm5lY3RpbmcgdG8gdGhlIHNwZWNpZmllZFxuICAvLyBzaGFyZC5cbiAgaWYgKHRoaXMuZGlzcGxheU5hbWVfLmxlbmd0aCA9PT0gMCkge1xuICAgIG5hbWVGaWVsZC5mb2N1cygpO1xuICB9IGVsc2UgaWYgKHRoaXMuc2VsZWN0ZWRTaGFyZElEXyA9PT0gU0VMRUNUT1JfTk9ORV9WQUxVRSkge1xuICAgIHNoYXJkU2VsZWN0LmZvY3VzKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtFdmVudH0galF1ZXJ5RXZlbnRcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVNoYXJkU2VsZWN0aW9uUGFuZWwucHJvdG90eXBlLm9uTmFtZUtleVVwXyA9IGZ1bmN0aW9uIChqUXVlcnlFdmVudCkge1xuICB2YXIgbmFtZSA9IGpRdWVyeUV2ZW50LnRhcmdldC52YWx1ZTtcbiAgdmFyIHNldE5hbWVCdXR0b24gPSB0aGlzLmdldEJvZHkoKS5maW5kKCcjbmV0c2ltLWxvYmJ5LXNldC1uYW1lLWJ1dHRvbicpO1xuICBzZXROYW1lQnV0dG9uLmF0dHIoJ2Rpc2FibGVkJywgbmFtZS5sZW5ndGggPT09IDApO1xuXG4gIGlmIChuYW1lLmxlbmd0aCA+IDAgJiYgalF1ZXJ5RXZlbnQud2hpY2ggPT09IEtleUNvZGVzLkVOVEVSKSB7XG4gICAgdGhpcy5zZXROYW1lQnV0dG9uQ2xpY2tfKCk7XG4gIH1cbn07XG5cbi8qKiBAcHJpdmF0ZSAqL1xuTmV0U2ltU2hhcmRTZWxlY3Rpb25QYW5lbC5wcm90b3R5cGUuc2V0TmFtZUJ1dHRvbkNsaWNrXyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXROYW1lQ2FsbGJhY2tfKHRoaXMuZ2V0Qm9keSgpLmZpbmQoJyNuZXRzaW0tbG9iYnktbmFtZScpLnZhbCgpKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtFdmVudH0galF1ZXJ5RXZlbnRcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVNoYXJkU2VsZWN0aW9uUGFuZWwucHJvdG90eXBlLm9uU2hhcmRTZWxlY3RDaGFuZ2VfID0gZnVuY3Rpb24gKGpRdWVyeUV2ZW50KSB7XG4gIHZhciBzaGFyZElEID0galF1ZXJ5RXZlbnQudGFyZ2V0LnZhbHVlO1xuICB2YXIgc2V0U2hhcmRCdXR0b24gPSB0aGlzLmdldEJvZHkoKS5maW5kKCcjbmV0c2ltLXNoYXJkLWNvbmZpcm0tYnV0dG9uJyk7XG4gIHNldFNoYXJkQnV0dG9uLmF0dHIoJ2Rpc2FibGVkJywgIXNoYXJkSUQgfHwgc2hhcmRJRCA9PT0gU0VMRUNUT1JfTk9ORV9WQUxVRSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7RXZlbnR9IGpRdWVyeUV2ZW50XG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1TaGFyZFNlbGVjdGlvblBhbmVsLnByb3RvdHlwZS5vblNoYXJkU2VsZWN0S2V5VXBfID0gZnVuY3Rpb24gKGpRdWVyeUV2ZW50KSB7XG4gIHZhciBzaGFyZElEID0galF1ZXJ5RXZlbnQudGFyZ2V0LnZhbHVlO1xuICBpZiAoc2hhcmRJRCAmJiBzaGFyZElEICE9PSBTRUxFQ1RPUl9OT05FX1ZBTFVFICYmXG4gICAgICBqUXVlcnlFdmVudC53aGljaCA9PT0gS2V5Q29kZXMuRU5URVIpIHtcbiAgICB0aGlzLnNldFNoYXJkQnV0dG9uQ2xpY2tfKCk7XG4gIH1cbn07XG5cbi8qKiBAcHJpdmF0ZSAqL1xuTmV0U2ltU2hhcmRTZWxlY3Rpb25QYW5lbC5wcm90b3R5cGUuc2V0U2hhcmRCdXR0b25DbGlja18gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2V0U2hhcmRDYWxsYmFja18odGhpcy5nZXRCb2R5KCkuZmluZCgnI25ldHNpbS1zaGFyZC1zZWxlY3QnKS52YWwoKSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHM9IChmdW5jdGlvbigpIHtcbiAgdmFyIHQgPSBmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzLCBmaWx0ZXJzLCBlc2NhcGVcbi8qKi8pIHtcbmVzY2FwZSA9IGVzY2FwZSB8fCBmdW5jdGlvbiAoaHRtbCl7XG4gIHJldHVybiBTdHJpbmcoaHRtbClcbiAgICAucmVwbGFjZSgvJig/IVxcdys7KS9nLCAnJmFtcDsnKVxuICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXG4gICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbn07XG52YXIgYnVmID0gW107XG53aXRoIChsb2NhbHMgfHwge30pIHsgKGZ1bmN0aW9uKCl7IFxuIGJ1Zi5wdXNoKCcnKTsxO1xuICB2YXIgaTE4biA9IHJlcXVpcmUoJy4vbG9jYWxlJyk7XG47IGJ1Zi5wdXNoKCdcXG48ZGl2IGNsYXNzPVwiY29udGVudC13cmFwXCI+XFxuICA8ZGl2IGNsYXNzPVwiZmllbGQtYm94IGRpc3BsYXktbmFtZS1jb250cm9sXCI+XFxuICAgIDxsYWJlbCBmb3I9XCJuZXRzaW0tbG9iYnktbmFtZVwiPicsIGVzY2FwZSgoNiwgIGkxOG4ubXlOYW1lKCkgKSksICc8L2xhYmVsPlxcbiAgICA8aW5wdXQgaWQ9XCJuZXRzaW0tbG9iYnktbmFtZVwiIHR5cGU9XCJ0ZXh0XCIgdmFsdWU9XCInLCBlc2NhcGUoKDcsICBkaXNwbGF5TmFtZSApKSwgJ1wiICcpOzc7IGlmIChkaXNwbGF5TmFtZS5sZW5ndGggPiAwKSB7IDsgYnVmLnB1c2goJ2Rpc2FibGVkJyk7NzsgfSA7IGJ1Zi5wdXNoKCcgLz5cXG4gICAgJyk7ODsgaWYgKGRpc3BsYXlOYW1lLmxlbmd0aCA9PT0gMCkgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgICA8aW5wdXQgaWQ9XCJuZXRzaW0tbG9iYnktc2V0LW5hbWUtYnV0dG9uXCIgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwiJywgZXNjYXBlKCg5LCAgaTE4bi5zZXROYW1lKCkgKSksICdcIiBkaXNhYmxlZCAvPlxcbiAgICAnKTsxMDsgfSA7IGJ1Zi5wdXNoKCdcXG4gIDwvZGl2PlxcbiAgJyk7MTI7IGlmIChkaXNwbGF5TmFtZS5sZW5ndGggPiAwKSB7IDsgYnVmLnB1c2goJ1xcbiAgICA8ZGl2IGNsYXNzPVwiZmllbGQtYm94IHNoYXJkLWNvbnRyb2xcIj5cXG4gICAgICA8bGFiZWwgZm9yPVwibmV0c2ltLXNoYXJkLXNlbGVjdFwiPicsIGVzY2FwZSgoMTQsICBpMThuLm15U2VjdGlvbigpICkpLCAnPC9sYWJlbD5cXG4gICAgICA8c2VsZWN0IGlkPVwibmV0c2ltLXNoYXJkLXNlbGVjdFwiICcpOzE1OyBpZiAoc2VsZWN0ZWRTaGFyZElEKSB7IDsgYnVmLnB1c2goJ2Rpc2FibGVkJyk7MTU7IH0gOyBidWYucHVzaCgnPlxcbiAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIicsIGVzY2FwZSgoMTYsICBTRUxFQ1RPUl9OT05FX1ZBTFVFICkpLCAnXCI+JywgZXNjYXBlKCgxNiwgIGkxOG4uZHJvcGRvd25QaWNrT25lKCkgKSksICc8L29wdGlvbj5cXG4gICAgICAgICcpOzE3O1xuICAgICAgICAgIHZhciBzZWxlY3RlZEFueVNoYXJkID0gZmFsc2U7XG4gICAgICAgICAgc2hhcmRDaG9pY2VzLmZvckVhY2goZnVuY3Rpb24gKHNoYXJkQ2hvaWNlKSB7XG4gICAgICAgICAgICB2YXIgYXR0cmlidXRlcyA9ICcnO1xuICAgICAgICAgICAgaWYgKHNoYXJkQ2hvaWNlLnNoYXJkSUQgPT09IHNlbGVjdGVkU2hhcmRJRCkge1xuICAgICAgICAgICAgICBhdHRyaWJ1dGVzID0gJ3NlbGVjdGVkJztcbiAgICAgICAgICAgICAgc2VsZWN0ZWRBbnlTaGFyZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCInLCBlc2NhcGUoKDI2LCAgc2hhcmRDaG9pY2Uuc2hhcmRJRCApKSwgJ1wiICcsIGVzY2FwZSgoMjYsICBhdHRyaWJ1dGVzICkpLCAnPicsIGVzY2FwZSgoMjYsICBzaGFyZENob2ljZS5kaXNwbGF5TmFtZSApKSwgJzwvb3B0aW9uPlxcbiAgICAgICAgICAgICcpOzI3O1xuICAgICAgICAgIH0pO1xuICAgICAgICA7IGJ1Zi5wdXNoKCdcXG4gICAgICA8L3NlbGVjdD5cXG4gICAgICAnKTszMTsgaWYgKCFzZWxlY3RlZFNoYXJkSUQpIHsgOyBidWYucHVzaCgnXFxuICAgICAgICA8aW5wdXQgaWQ9XCJuZXRzaW0tc2hhcmQtY29uZmlybS1idXR0b25cIiB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCInLCBlc2NhcGUoKDMyLCAgaTE4bi5qb2luU2VjdGlvbigpICkpLCAnXCIgJyk7MzI7IGlmICghc2VsZWN0ZWRBbnlTaGFyZCkgeyA7IGJ1Zi5wdXNoKCdkaXNhYmxlZCcpOzMyOyB9IDsgYnVmLnB1c2goJyAvPlxcbiAgICAgICcpOzMzOyB9IDsgYnVmLnB1c2goJ1xcbiAgICA8L2Rpdj5cXG4gICcpOzM1OyB9IDsgYnVmLnB1c2goJ1xcbiAgPGRpdiBjbGFzcz1cImNsZWFyZml4XCI+PC9kaXY+XFxuPC9kaXY+XFxuJyk7IH0pKCk7XG59IFxucmV0dXJuIGJ1Zi5qb2luKCcnKTtcbn07XG4gIHJldHVybiBmdW5jdGlvbihsb2NhbHMpIHtcbiAgICByZXR1cm4gdChsb2NhbHMsIHJlcXVpcmUoXCJlanNcIikuZmlsdGVycyk7XG4gIH1cbn0oKSk7IiwiLyoqXG4gKiBAb3ZlcnZpZXcgTG9iYnkgdGFibGUgVUkgY29tcG9uZW50LlxuICogQHNlZSBOZXRTaW1Mb2JieSBmb3IgdXNhZ2UuXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIF8gPSB1dGlscy5nZXRMb2Rhc2goKTtcbnZhciBpMThuID0gcmVxdWlyZSgnLi9sb2NhbGUnKTtcbnZhciBOZXRTaW1QYW5lbCA9IHJlcXVpcmUoJy4vTmV0U2ltUGFuZWwnKTtcbnZhciBtYXJrdXAgPSByZXF1aXJlKCcuL05ldFNpbVJlbW90ZU5vZGVTZWxlY3Rpb25QYW5lbC5odG1sLmVqcycpO1xudmFyIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9OZXRTaW1Db25zdGFudHMnKS5Ob2RlVHlwZTtcbnZhciBOZXRTaW1HbG9iYWxzID0gcmVxdWlyZSgnLi9OZXRTaW1HbG9iYWxzJyk7XG52YXIgTmV0U2ltVXRpbHMgPSByZXF1aXJlKCcuL05ldFNpbVV0aWxzJyk7XG52YXIgTmV0U2ltUm91dGVyTm9kZSA9IHJlcXVpcmUoJy4vTmV0U2ltUm91dGVyTm9kZScpO1xuXG4vKipcbiAqIEFwcGx5IGEgdmVyeSBzbWFsbCBkZWJvdW5jZSB0byBsb2JieSBidXR0b25zIHRvIGF2b2lkIGRvaW5nIGV4dHJhIHdvcmtcbiAqIGFzIGEgcmVzdWx0IG9mIGRvdWJsZS1jbGlja3MgYW5kL29yIHNjcmlwdHMgdGhhdCB3YW50IHRvIGNsaWNrIGJ1dHRvbnMgYVxuICogZmV3IHRob3VzYW5kIHRpbWVzLlxuICogQGNvbnN0IHtudW1iZXJ9XG4gKi9cbnZhciBCVVRUT05fREVCT1VOQ0VfRFVSQVRJT05fTVMgPSAxMDA7XG5cbi8qKlxuICogR2VuZXJhdG9yIGFuZCBjb250cm9sbGVyIGZvciBsb2JieSBub2RlIGxpc3RpbmcsIHNlbGVjdGlvbiwgYW5kIGNvbm5lY3Rpb25cbiAqIGNvbnRyb2xzLlxuICpcbiAqIEBwYXJhbSB7alF1ZXJ5fSByb290RGl2XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7RGFzaGJvYXJkVXNlcn0gb3B0aW9ucy51c2VyXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5zaGFyZElEXG4gKiBAcGFyYW0ge05ldFNpbU5vZGVbXX0gb3B0aW9ucy5ub2Rlc09uU2hhcmRcbiAqIEBwYXJhbSB7TmV0U2ltTm9kZVtdfSBvcHRpb25zLmluY29taW5nQ29ubmVjdGlvbk5vZGVzXG4gKiBAcGFyYW0ge05ldFNpbU5vZGV9IG9wdGlvbnMucmVtb3RlTm9kZSAtIG51bGwgaWYgbm90IGF0dGVtcHRpbmcgdG8gY29ubmVjdFxuICogQHBhcmFtIHtudW1iZXJ9IG9wdGlvbnMubXlOb2RlSURcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0aW9ucy5kaXNhYmxlQ29udHJvbHNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY2FsbGJhY2tzXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja3MuYWRkUm91dGVyQ2FsbGJhY2tcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrcy5jYW5jZWxCdXR0b25DYWxsYmFja1xuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tzLmpvaW5CdXR0b25DYWxsYmFja1xuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tzLnJlc2V0U2hhcmRDYWxsYmFja1xuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQGF1Z21lbnRzIE5ldFNpbVBhbmVsXG4gKi9cbnZhciBOZXRTaW1SZW1vdGVOb2RlU2VsZWN0aW9uUGFuZWwgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyb290RGl2LFxuICAgIG9wdGlvbnMsIGNhbGxiYWNrcykge1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7RGFzaGJvYXJkVXNlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMudXNlcl8gPSBvcHRpb25zLnVzZXI7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnNoYXJkSURfID0gb3B0aW9ucy5zaGFyZElEO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7TmV0U2ltTm9kZVtdfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5ub2Rlc09uU2hhcmRfID0gb3B0aW9ucy5ub2Rlc09uU2hhcmQ7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtOZXRTaW1Ob2RlW119XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmluY29taW5nQ29ubmVjdGlvbk5vZGVzXyA9IG9wdGlvbnMuaW5jb21pbmdDb25uZWN0aW9uTm9kZXM7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtOZXRTaW1Ob2RlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5yZW1vdGVOb2RlXyA9IG9wdGlvbnMucmVtb3RlTm9kZTtcblxuICAvKipcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubXlOb2RlSURfID0gb3B0aW9ucy5teU5vZGVJRDtcblxuICBmdW5jdGlvbiBidXR0b25EZWJvdW5jZShjYWxsYmFjaykge1xuICAgIHJldHVybiBfLmRlYm91bmNlKGNhbGxiYWNrLCBCVVRUT05fREVCT1VOQ0VfRFVSQVRJT05fTVMsIHtcbiAgICAgIGxlYWRpbmc6IHRydWUsXG4gICAgICB0cmFpbGluZzogZmFsc2VcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVyIGZvciBcIkFkZCBSb3V0ZXJcIiBidXR0b25cbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5hZGRSb3V0ZXJDYWxsYmFja18gPSBidXR0b25EZWJvdW5jZShjYWxsYmFja3MuYWRkUm91dGVyQ2FsbGJhY2spO1xuXG4gIC8qKlxuICAgKiBIYW5kbGVyIGZvciBjYW5jZWwgYnV0dG9uIChiYWNrcyBvdXQgb2Ygbm9uLW11dHVhbCBjb25uZWN0aW9uKVxuICAgKiBAdHlwZSB7ZnVuY3Rpb259XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmNhbmNlbEJ1dHRvbkNhbGxiYWNrXyA9IGJ1dHRvbkRlYm91bmNlKGNhbGxiYWNrcy5jYW5jZWxCdXR0b25DYWxsYmFjayk7XG5cbiAgLyoqXG4gICAqIEhhbmRsZXIgZm9yIFwiam9pblwiIGJ1dHRvbiBuZXh0IHRvIGVhY2ggY29ubmVjdGFibGUgbm9kZS5cbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5qb2luQnV0dG9uQ2FsbGJhY2tfID0gYnV0dG9uRGVib3VuY2UoY2FsbGJhY2tzLmpvaW5CdXR0b25DYWxsYmFjayk7XG5cbiAgLyoqXG4gICAqIEhhbmRsZXIgZm9yIFwicmVzZXQgc2hhcmRcIiBidXR0b24gY2xpY2suXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucmVzZXRTaGFyZENhbGxiYWNrXyA9IGJ1dHRvbkRlYm91bmNlKGNhbGxiYWNrcy5yZXNldFNoYXJkQ2FsbGJhY2spO1xuXG4gIC8vIEluaXRpYWwgcmVuZGVyXG4gIE5ldFNpbVBhbmVsLmNhbGwodGhpcywgcm9vdERpdiwge1xuICAgIGNsYXNzTmFtZTogJ25ldHNpbS1sb2JieS1wYW5lbCcsXG4gICAgcGFuZWxUaXRsZTogdGhpcy5nZXRMb2NhbGl6ZWRQYW5lbFRpdGxlKCksXG4gICAgdXNlclRvZ2dsZWFibGU6IGZhbHNlXG4gIH0pO1xuXG4gIGlmIChvcHRpb25zLmRpc2FibGVDb250cm9scykge1xuICAgIHRoaXMuZGlzYWJsZUV2ZXJ5dGhpbmcoKTtcbiAgfVxufTtcbk5ldFNpbVJlbW90ZU5vZGVTZWxlY3Rpb25QYW5lbC5pbmhlcml0cyhOZXRTaW1QYW5lbCk7XG5cbi8qKlxuICogUmVjcmVhdGUgbWFya3VwIHdpdGhpbiBwYW5lbCBib2R5LlxuICovXG5OZXRTaW1SZW1vdGVOb2RlU2VsZWN0aW9uUGFuZWwucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gQ2xvbmUgdGhlIHJlZmVyZW5jZSBhcmVhICh3aXRoIGhhbmRsZXJzKSBiZWZvcmUgd2UgcmUtcmVuZGVyXG4gIHZhciByZWZlcmVuY2VBcmVhID0gJCgnI3JlZmVyZW5jZV9hcmVhJykuZmlyc3QoKS5jbG9uZSh0cnVlKTtcblxuICAvLyBDcmVhdGUgYm9pbGVycGxhdGUgcGFuZWwgbWFya3VwXG4gIE5ldFNpbVJlbW90ZU5vZGVTZWxlY3Rpb25QYW5lbC5zdXBlclByb3RvdHlwZS5yZW5kZXIuY2FsbCh0aGlzKTtcblxuICAvLyBBZGQgb3VyIG93biBjb250ZW50IG1hcmt1cFxuICB2YXIgbmV3TWFya3VwID0gJChtYXJrdXAoe1xuICAgIGNvbnRyb2xsZXI6IHRoaXMsXG4gICAgbm9kZXNPblNoYXJkOiB0aGlzLm5vZGVzT25TaGFyZF8sXG4gICAgaW5jb21pbmdDb25uZWN0aW9uTm9kZXM6IHRoaXMuaW5jb21pbmdDb25uZWN0aW9uTm9kZXNfLFxuICAgIHJlbW90ZU5vZGU6IHRoaXMucmVtb3RlTm9kZV9cbiAgfSkpO1xuICB0aGlzLmdldEJvZHkoKS5odG1sKG5ld01hcmt1cCk7XG5cbiAgdGhpcy51cGRhdGVMYXlvdXQoKTtcblxuICAvLyBNb3ZlIHRoZSByZWZlcmVuY2UgYXJlYSB0byBiZW5lYXRoIHRoZSBpbnN0cnVjdGlvbnNcbiAgdGhpcy5nZXRCb2R5KCkuZmluZCgnLnJlZmVyZW5jZS1hcmVhLXBsYWNlaG9sZGVyJykuYXBwZW5kKHJlZmVyZW5jZUFyZWEpO1xuXG4gIC8vIFRlYWNoZXJzIGFuZCBhZG1pbnMgZ2V0IGEgc3BlY2lhbCBcIlJlc2V0IFNpbXVsYXRpb25cIiBidXR0b25cbiAgaWYgKHRoaXMuY2FuQ3VycmVudFVzZXJSZXNldFNoYXJkKCkpIHtcbiAgICB0aGlzLmFkZEJ1dHRvbihpMThuLnNoYXJkUmVzZXRCdXR0b24oKSwgdGhpcy5yZXNldFNoYXJkQ2FsbGJhY2tfKTtcbiAgfVxuXG4gIC8vIEJ1dHRvbiB0aGF0IHRha2VzIHlvdSB0byB0aGUgbmV4dCBsZXZlbC5cbiAgTmV0U2ltVXRpbHMubWFrZUNvbnRpbnVlQnV0dG9uKHRoaXMpO1xuXG4gIHRoaXMuYWRkUm91dGVyQnV0dG9uXyA9IHRoaXMuZ2V0Qm9keSgpLmZpbmQoJyNuZXRzaW0tbG9iYnktYWRkLXJvdXRlcicpO1xuICB0aGlzLmFkZFJvdXRlckJ1dHRvbl8uY2xpY2sodW5sZXNzRGlzYWJsZWQodGhpcy5hZGRSb3V0ZXJDYWxsYmFja18pKTtcblxuICB0aGlzLmdldEJvZHkoKS5maW5kKCcuam9pbi1idXR0b24nKS5jbGljayhcbiAgICAgIHVubGVzc0Rpc2FibGVkKHRoaXMub25Kb2luQ2xpY2tfLmJpbmQodGhpcykpKTtcbiAgdGhpcy5nZXRCb2R5KCkuZmluZCgnLmFjY2VwdC1idXR0b24nKS5jbGljayhcbiAgICAgIHVubGVzc0Rpc2FibGVkKHRoaXMub25Kb2luQ2xpY2tfLmJpbmQodGhpcykpKTtcbiAgdGhpcy5nZXRCb2R5KCkuZmluZCgnLmNhbmNlbC1idXR0b24nKS5jbGljayhcbiAgICAgIHVubGVzc0Rpc2FibGVkKHRoaXMuY2FuY2VsQnV0dG9uQ2FsbGJhY2tfKSk7XG59O1xuXG4vKipcbiAqIFdyYXAgdGhlIHByb3ZpZGVkIGNhbGxiYWNrIGluIGEgY2hlY2sgdG8gbWFrZSBzdXJlIHRoZSB0YXJnZXQgaXMgbm90IGRpc2FibGVkLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gdW5sZXNzRGlzYWJsZWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChqUXVlcnlFdmVudCkge1xuICAgIGlmICghJChqUXVlcnlFdmVudC50YXJnZXQpLmlzKCdbZGlzYWJsZWRdJykpIHtcbiAgICAgIGNhbGxiYWNrKGpRdWVyeUV2ZW50KTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgbGF5b3V0IG9mIHRoZSBtYXJrdXAsIHVzdWFsbHkgaW4gcmVzcG9uc2UgdG8gYSB3aW5kb3dcbiAqIHJlc2l6ZS4gQ3VycmVudGx5IGp1c3QgYWRqdXN0cyB0aGUgaGVpZ2h0IG9mIHRoZSBsb2JieSB0YWJsZSB0byBrZWVwXG4gKiBldmVyeXRoaW5nIG9uc2NyZWVuLlxuICovXG5OZXRTaW1SZW1vdGVOb2RlU2VsZWN0aW9uUGFuZWwucHJvdG90eXBlLnVwZGF0ZUxheW91dCA9IGZ1bmN0aW9uICgpIHtcblxuICB2YXIgbG9iYnlUYWJsZSA9IHRoaXMuZ2V0Qm9keSgpLmZpbmQoJyNuZXRzaW0tc2Nyb2xsaW5nLWxvYmJ5Jyk7XG4gIHZhciBjb250YWluZXIgPSB0aGlzLmdldEJvZHkoKS5jbG9zZXN0KCcjbmV0c2ltLWRpc2Nvbm5lY3RlZCcpO1xuXG4gIGlmIChsb2JieVRhYmxlLmlzKCc6dmlzaWJsZScpKSB7XG4gICAgbG9iYnlUYWJsZS5oZWlnaHQoXCJub25lXCIpO1xuICAgIHZhciBvdmVyZmxvdyA9IGNvbnRhaW5lci5wcm9wKCdzY3JvbGxIZWlnaHQnKSAtIGNvbnRhaW5lci5wcm9wKCdjbGllbnRIZWlnaHQnKTtcblxuICAgIGlmIChvdmVyZmxvdyA+IDApIHtcbiAgICAgIHZhciBuZXdIZWlnaHQgPSBsb2JieVRhYmxlLmhlaWdodCgpIC0gb3ZlcmZsb3c7XG4gICAgICB2YXIgbWluSGVpZ2h0ID0gbG9iYnlUYWJsZS5maW5kKCd0cicpLmZpcnN0KCkub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICBsb2JieVRhYmxlLmhlaWdodChNYXRoLm1heChuZXdIZWlnaHQsIG1pbkhlaWdodCkpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBhIGxvY2FsaXplZCBwYW5lbCB0aXRsZSBhcHByb3ByaWF0ZSB0byB0aGUgY3VycmVudCBsZXZlbFxuICogICAgICAgICAgY29uZmlndXJhdGlvblxuICovXG5OZXRTaW1SZW1vdGVOb2RlU2VsZWN0aW9uUGFuZWwucHJvdG90eXBlLmdldExvY2FsaXplZFBhbmVsVGl0bGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsZXZlbENvbmZpZyA9IE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKTtcblxuICBpZiAobGV2ZWxDb25maWcuY2FuQ29ubmVjdFRvQ2xpZW50cyAmJlxuICAgICAgbGV2ZWxDb25maWcuY2FuQ29ubmVjdFRvUm91dGVycykge1xuICAgIHJldHVybiBpMThuLmNvbm5lY3RUb0FOb2RlKCk7XG4gIH0gZWxzZSBpZiAobGV2ZWxDb25maWcuY2FuQ29ubmVjdFRvQ2xpZW50cykge1xuICAgIHJldHVybiBpMThuLmNvbm5lY3RUb0FQZWVyKCk7XG4gIH0gZWxzZSBpZiAobGV2ZWxDb25maWcuY2FuQ29ubmVjdFRvUm91dGVycykge1xuICAgIGlmIChsZXZlbENvbmZpZy5icm9hZGNhc3RNb2RlKSB7XG4gICAgICByZXR1cm4gaTE4bi5jb25uZWN0VG9BUm9vbSgpO1xuICAgIH1cbiAgICByZXR1cm4gaTE4bi5jb25uZWN0VG9BUm91dGVyKCk7XG4gIH1cbiAgcmV0dXJuIGkxOG4uY29ubmVjdFRvQU5vZGUoKTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge3N0cmluZ30gbG9jYWxpemVkIGxvYmJ5IGluc3RydWN0aW9ucyBhcHByb3ByaWF0ZSB0byB0aGUgY3VycmVudFxuICogICAgICAgICAgbGV2ZWwgY29uZmlndXJhdGlvblxuICovXG5OZXRTaW1SZW1vdGVOb2RlU2VsZWN0aW9uUGFuZWwucHJvdG90eXBlLmdldExvY2FsaXplZExvYmJ5SW5zdHJ1Y3Rpb25zID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbGV2ZWxDb25maWcgPSBOZXRTaW1HbG9iYWxzLmdldExldmVsQ29uZmlnKCk7XG5cbiAgaWYgKGxldmVsQ29uZmlnLmNhbkNvbm5lY3RUb0NsaWVudHMgJiZcbiAgICAgIGxldmVsQ29uZmlnLmNhbkNvbm5lY3RUb1JvdXRlcnMpIHtcbiAgICByZXR1cm4gaTE4bi5sb2JieUluc3RydWN0aW9uc0dlbmVyYWwoKTtcbiAgfSBlbHNlIGlmIChsZXZlbENvbmZpZy5jYW5Db25uZWN0VG9DbGllbnRzKSB7XG4gICAgcmV0dXJuIGkxOG4ubG9iYnlJbnN0cnVjdGlvbnNGb3JQZWVycygpO1xuICB9IGVsc2UgaWYgKGxldmVsQ29uZmlnLmNhbkNvbm5lY3RUb1JvdXRlcnMpIHtcbiAgICBpZiAobGV2ZWxDb25maWcuYnJvYWRjYXN0TW9kZSkge1xuICAgICAgcmV0dXJuIGkxOG4ubG9iYnlJbnN0cnVjdGlvbnNGb3JSb29tcygpO1xuICAgIH1cbiAgICByZXR1cm4gaTE4bi5sb2JieUluc3RydWN0aW9uc0ZvclJvdXRlcnMoKTtcbiAgfVxuICByZXR1cm4gaTE4bi5sb2JieUluc3RydWN0aW9uc0dlbmVyYWwoKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtFdmVudH0galF1ZXJ5RXZlbnRcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVJlbW90ZU5vZGVTZWxlY3Rpb25QYW5lbC5wcm90b3R5cGUub25Kb2luQ2xpY2tfID0gZnVuY3Rpb24gKGpRdWVyeUV2ZW50KSB7XG4gIHZhciB0YXJnZXQgPSAkKGpRdWVyeUV2ZW50LnRhcmdldCk7XG4gIHZhciBub2RlSUQgPSB0YXJnZXQuZGF0YSgnbm9kZUlkJyk7XG4gIHZhciBjbGlja2VkTm9kZSA9IF8uZmluZCh0aGlzLm5vZGVzT25TaGFyZF8sIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUuZW50aXR5SUQgPT09IG5vZGVJRDtcbiAgfSk7XG5cbiAgdGhpcy5qb2luQnV0dG9uQ2FsbGJhY2tfKGNsaWNrZWROb2RlKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtOZXRTaW1Ob2RlfSBub2RlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuTmV0U2ltUmVtb3RlTm9kZVNlbGVjdGlvblBhbmVsLnByb3RvdHlwZS5pc015Tm9kZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gIHJldHVybiB0aGlzLm15Tm9kZUlEXyA9PT0gbm9kZS5lbnRpdHlJRDtcbn07XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgbGV2ZWwgY29uZmlndXJhdGlvbiBhbGxvd3MgY29ubmVjdGlvbnMgdG8gdGhlIHNwZWNpZmllZFxuICogbm9kZS5cbiAqIEBwYXJhbSB7TmV0U2ltTm9kZX0gY29ubmVjdGlvblRhcmdldFxuICogQHJldHVybnMge2Jvb2xlYW59IHdoZXRoZXIgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGlzIGFsbG93ZWRcbiAqL1xuTmV0U2ltUmVtb3RlTm9kZVNlbGVjdGlvblBhbmVsLnByb3RvdHlwZS5jYW5Db25uZWN0VG9Ob2RlID0gZnVuY3Rpb24gKGNvbm5lY3Rpb25UYXJnZXQpIHtcbiAgLy8gQ2FuJ3QgY29ubmVjdCB0byBvd24gbm9kZVxuICBpZiAodGhpcy5pc015Tm9kZShjb25uZWN0aW9uVGFyZ2V0KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBpc0NsaWVudCA9IChjb25uZWN0aW9uVGFyZ2V0LmdldE5vZGVUeXBlKCkgPT09IE5vZGVUeXBlLkNMSUVOVCk7XG4gIHZhciBpc1JvdXRlciA9IChjb25uZWN0aW9uVGFyZ2V0LmdldE5vZGVUeXBlKCkgPT09IE5vZGVUeXBlLlJPVVRFUik7XG5cbiAgLy8gQ2FuJ3QgY29ubmVjdCB0byBmdWxsIHJvdXRlcnNcbiAgaWYgKGNvbm5lY3Rpb25UYXJnZXQuaXNGdWxsKCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBQZXJtaXNzaWJsZSBjb25uZWN0aW9uIGxpbWl0ZWQgYnkgbGV2ZWwgY29uZmlndXJhdGlvblxuICB2YXIgbGV2ZWxDb25maWcgPSBOZXRTaW1HbG9iYWxzLmdldExldmVsQ29uZmlnKCk7XG4gIHZhciBhbGxvd0NsaWVudHMgPSBsZXZlbENvbmZpZy5jYW5Db25uZWN0VG9DbGllbnRzO1xuICB2YXIgYWxsb3dSb3V0ZXJzID0gbGV2ZWxDb25maWcuY2FuQ29ubmVjdFRvUm91dGVycztcbiAgcmV0dXJuIChpc0NsaWVudCAmJiBhbGxvd0NsaWVudHMpIHx8IChpc1JvdXRlciAmJiBhbGxvd1JvdXRlcnMpO1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVFJVRSBpZiB3ZSBoYXZlIGFuIG9wZW4gb3V0Z29pbmcgY29ubmVjdGlvbiByZXF1ZXN0LlxuICovXG5OZXRTaW1SZW1vdGVOb2RlU2VsZWN0aW9uUGFuZWwucHJvdG90eXBlLmhhc091dGdvaW5nUmVxdWVzdCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEhKHRoaXMucmVtb3RlTm9kZV8pO1xufTtcblxuLyoqXG4gKiBGb3IgdXNlIHdpdGggQXJyYXkucHJvdG90eXBlLmZpbHRlcigpXG4gKiBAcGFyYW0ge05ldFNpbU5vZGV9IG5vZGVcbiAqIEByZXR1cm5zIHtib29sZWFufSBUUlVFIGlmIHRoZSBnaXZlbiBub2RlIHNob3VsZCBzaG93IHVwIGluIHRoZSBsb2JieVxuICovXG5OZXRTaW1SZW1vdGVOb2RlU2VsZWN0aW9uUGFuZWwucHJvdG90eXBlLnNob3VsZFNob3dOb2RlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgdmFyIGxldmVsQ29uZmlnID0gTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpO1xuICB2YXIgaXNDbGllbnQgPSAobm9kZS5nZXROb2RlVHlwZSgpID09PSBOb2RlVHlwZS5DTElFTlQpO1xuICB2YXIgaXNSb3V0ZXIgPSAobm9kZS5nZXROb2RlVHlwZSgpID09PSBOb2RlVHlwZS5ST1VURVIpO1xuICB2YXIgc2hvd0NsaWVudHMgPSBsZXZlbENvbmZpZy5zaG93Q2xpZW50c0luTG9iYnk7XG4gIHZhciBzaG93Um91dGVycyA9IGxldmVsQ29uZmlnLnNob3dSb3V0ZXJzSW5Mb2JieTtcbiAgcmV0dXJuIChpc0NsaWVudCAmJiBzaG93Q2xpZW50cykgfHwgKGlzUm91dGVyICYmIHNob3dSb3V0ZXJzKTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRSVUUgaWYgd2UgZXhwZWN0IHRoZSBjdXJyZW50IHVzZXIgdG8gaGF2ZSBwZXJtaXNzaW9uIHRvXG4gKiAgICAgICAgICBwZXJmb3JtIGEgc2hhcmQgcmVzZXQuICBPbmx5IGdvdmVybnMgZGlzcGxheSBvZiBzaGFyZCByZXNldCBidXR0b24sXG4gKiAgICAgICAgICBhY3R1YWwgcmVzZXQgaXMgYXV0aGVudGljYXRlZCBvbiB0aGUgc2VydmVyLlxuICovXG5OZXRTaW1SZW1vdGVOb2RlU2VsZWN0aW9uUGFuZWwucHJvdG90eXBlLmNhbkN1cnJlbnRVc2VyUmVzZXRTaGFyZCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCF0aGlzLnVzZXJfKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKHRoaXMudXNlcl8uaXNBZG1pbikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gRmluZCBhIHNlY3Rpb24gSUQgaW4gdGhlIGN1cnJlbnQgc2hhcmQgSURcbiAgdmFyIG1hdGNoZXMgPSAvXyhcXGQrKSQvLmV4ZWModGhpcy5zaGFyZElEXyk7XG4gIGlmICghbWF0Y2hlcykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIG1hdGNoZXNbMV0gaXMgdGhlIGZpcnN0IGNhcHR1cmUgZ3JvdXAgKFxcZCspLCB0aGUgbnVtZXJpYyBzZWN0aW9uIElELlxuICB2YXIgc2VjdGlvbklEID0gcGFyc2VJbnQobWF0Y2hlc1sxXSwgMTApO1xuICByZXR1cm4gdGhpcy51c2VyXy5vd25zU2VjdGlvbihzZWN0aW9uSUQpO1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVFJVRSBpZiBpdCdzIGN1cnJlbnRseSBwb3NzaWJsZSB0byBhZGQgYSBuZXcgcm91dGVyLlxuICogICAgICAgICAgRHJpdmVzIHdoZXRoZXIgdGhlIFwiQWRkIFJvdXRlclwiIGJ1dHRvbiBzaG91bGQgYmUgZGlzcGxheWVkLlxuICovXG5OZXRTaW1SZW1vdGVOb2RlU2VsZWN0aW9uUGFuZWwucHJvdG90eXBlLmNhbkFkZFJvdXRlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGxldmVsQ29uZmlnID0gTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpO1xuICBpZiAodGhpcy5oYXNPdXRnb2luZ1JlcXVlc3QoKSB8fCAhbGV2ZWxDb25maWcuc2hvd0FkZFJvdXRlckJ1dHRvbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciByb3V0ZXJMaW1pdCA9IE5ldFNpbVJvdXRlck5vZGUuZ2V0TWF4aW11bVJvdXRlcnNQZXJTaGFyZCgpO1xuICB2YXIgcm91dGVyQ291bnQgPSB0aGlzLm5vZGVzT25TaGFyZF8uZmlsdGVyKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIE5vZGVUeXBlLlJPVVRFUiA9PT0gbm9kZS5nZXROb2RlVHlwZSgpO1xuICB9KS5sZW5ndGg7XG4gIHJldHVybiByb3V0ZXJDb3VudCA8IHJvdXRlckxpbWl0O1xufTtcblxuLyoqXG4gKiBEaXNhYmxlIGFsbCBvZiB0aGUgYnV0dG9ucyB3aXRoaW4gdGhlIHBhbmVsIChkb2VzIG5vdCBhcHBseSB0byBwYW5lbC1oZWFkZXJcbiAqIGJ1dHRvbnMhKVxuICovXG5OZXRTaW1SZW1vdGVOb2RlU2VsZWN0aW9uUGFuZWwucHJvdG90eXBlLmRpc2FibGVFdmVyeXRoaW5nID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmdldEJvZHkoKS5maW5kKCcubmV0c2ltLWJ1dHRvbicpLmF0dHIoJ2Rpc2FibGVkJywgdHJ1ZSk7XG59O1xuXG4vKipcbiAqIEVuYWJsZSBhbGwgb2YgdGhlIGJ1dHRvbnMgd2l0aGluIHRoZSBwYW5lbCAoZG9lcyBub3QgYXBwbHkgdG8gcGFuZWwtaGVhZGVyXG4gKiBidXR0b25zISlcbiAqL1xuTmV0U2ltUmVtb3RlTm9kZVNlbGVjdGlvblBhbmVsLnByb3RvdHlwZS5lbmFibGVFdmVyeXRoaW5nID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmdldEJvZHkoKS5maW5kKCcubmV0c2ltLWJ1dHRvbicpLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJyk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHM9IChmdW5jdGlvbigpIHtcbiAgdmFyIHQgPSBmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzLCBmaWx0ZXJzLCBlc2NhcGVcbi8qKi8pIHtcbmVzY2FwZSA9IGVzY2FwZSB8fCBmdW5jdGlvbiAoaHRtbCl7XG4gIHJldHVybiBTdHJpbmcoaHRtbClcbiAgICAucmVwbGFjZSgvJig/IVxcdys7KS9nLCAnJmFtcDsnKVxuICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXG4gICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbn07XG52YXIgYnVmID0gW107XG53aXRoIChsb2NhbHMgfHwge30pIHsgKGZ1bmN0aW9uKCl7IFxuIGJ1Zi5wdXNoKCcnKTsxO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBfID0gdXRpbHMuZ2V0TG9kYXNoKCk7XG52YXIgaTE4biA9IHJlcXVpcmUoJy4vbG9jYWxlJyk7XG52YXIgTmV0U2ltR2xvYmFscyA9IHJlcXVpcmUoJy4vTmV0U2ltR2xvYmFscycpO1xudmFyIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9OZXRTaW1Db25zdGFudHMnKS5Ob2RlVHlwZTtcblxuLyoqIEB0eXBlIHtmdW5jdGlvbn0gKi9cbnZhciBnZXRBc3NldFVybCA9IE5ldFNpbUdsb2JhbHMuZ2V0QXNzZXRVcmxGdW5jdGlvbigpO1xuXG4vKiogQHR5cGUge05ldFNpbUxldmVsQ29uZmlndXJhdGlvbn0gKi9cbnZhciBsZXZlbENvbmZpZyA9IE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBSb3dNZXRhZGF0YVxuICogQHByb3BlcnR5IHtudW1iZXJ9IG5vZGVJRFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGNsYXNzQXR0clxuICogQHByb3BlcnR5IHtzdHJpbmd9IGRpc3BsYXlOYW1lXG4gKiBAcHJvcGVydHkge3N0cmluZ30gc3RhdHVzXG4gKi9cblxuLyoqXG4gKiBGb3IgdXNlIHdpdGggQXJyYXkucHJvdG90eXBlLmZpbHRlcigpXG4gKiBAcGFyYW0ge05ldFNpbU5vZGV9IG5vZGVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG52YXIgb21pdEluY29taW5nQ29ubmVjdGlvbk5vZGVzID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgcmV0dXJuIHVuZGVmaW5lZCA9PT0gXy5maW5kKGluY29taW5nQ29ubmVjdGlvbk5vZGVzLCBmdW5jdGlvbiAoY29ubmVjdGlvblJlcXVlc3ROb2RlKSB7XG4gICAgICAgIHJldHVybiBjb25uZWN0aW9uUmVxdWVzdE5vZGUuZW50aXR5SUQgPT09IG5vZGUuZW50aXR5SUQ7XG4gICAgICB9KTtcbn07XG5cbi8qKlxuICogRm9yIHVzZSB3aXRoIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoKVxuICogQHBhcmFtIHtOZXRTaW1Ob2RlfSBub2RlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xudmFyIG9taXRPdXRnb2luZ1JlcXVlc3RUYXJnZXRzID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgcmV0dXJuICFyZW1vdGVOb2RlIHx8IChyZW1vdGVOb2RlLmVudGl0eUlEICE9PSBub2RlLmVudGl0eUlEKTtcbn07XG5cbi8qKlxuICogRm9yIHVzZSB3aXRoIEFycmF5LnByb3RvdHlwZS5tYXAoKVxuICogQHBhcmFtIHtOZXRTaW1Ob2RlfSBub2RlXG4gKiBAcmV0dXJucyB7Um93TWV0YWRhdGF9XG4gKi9cbnZhciBub2RlVG9Sb3dNZXRhZGF0YSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gIHZhciBkaXNwbGF5TmFtZSA9IG5vZGUuZ2V0RGlzcGxheU5hbWUoKTtcbiAgdmFyIHNvcnRLZXkgPSBkaXNwbGF5TmFtZTtcbiAgdmFyIGNsYXNzZXMgPSBbJ3VzZXItcm93J107XG5cbiAgaWYgKG5vZGUuZ2V0Tm9kZVR5cGUoKSA9PT0gTm9kZVR5cGUuUk9VVEVSKSB7XG4gICAgLy8gU29ydCByb3V0ZXJzIGJ5IGxlZnQtcGFkZGVkIHJvdXRlciBudW1iZXIgKGxvb2tzIGxpa2UgbmF0dXJhbCBzb3J0KVxuICAgIHNvcnRLZXkgPSAoJzAwMCcgKyBub2RlLnJvdXRlck51bWJlcikuc2xpY2UoLTMpO1xuICAgIGNsYXNzZXMgPSBbJ3JvdXRlci1yb3cnXTtcbiAgfVxuXG4gIGlmIChjb250cm9sbGVyLmlzTXlOb2RlKG5vZGUpKSB7XG4gICAgY2xhc3Nlcy5wdXNoKCdvd24tcm93Jyk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG5vZGVJRDogbm9kZS5lbnRpdHlJRCxcbiAgICBzb3J0S2V5OiBzb3J0S2V5LFxuICAgIGNsYXNzQXR0cjogY2xhc3Nlcy5qb2luKCcgJyksXG4gICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxuICAgIGhvc3RuYW1lOiBub2RlLmdldEhvc3RuYW1lKCksXG4gICAgc3RhdHVzOiBub2RlLmdldFN0YXR1cygpLFxuICAgIGlzRnVsbDogbm9kZS5pc0Z1bGwoKSxcbiAgICBjYW5Db25uZWN0VG9Ob2RlOiBjb250cm9sbGVyLmNhbkNvbm5lY3RUb05vZGUobm9kZSlcbiAgfTtcbn07XG5cbi8qKlxuICogRm9yIHVzZSB3aXRoIEFycmF5LnByb3RvdHlwZS5zb3J0KClcbiAqIEBwYXJhbSB7Um93TWV0YWRhdGF9IGFcbiAqIEBwYXJhbSB7Um93TWV0YWRhdGF9IGJcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbnZhciBsb2JieVNvcnQgPSBmdW5jdGlvbiAoYSwgYikge1xuICByZXR1cm4gKGEuc29ydEtleSA+IGIuc29ydEtleSkgPyAxIDogLTE7XG59O1xuXG52YXIgbG9iYnlSb3dzID0gbm9kZXNPblNoYXJkXG4gICAgLmZpbHRlcihjb250cm9sbGVyLnNob3VsZFNob3dOb2RlLmJpbmQoY29udHJvbGxlcikpXG4gICAgLmZpbHRlcihvbWl0SW5jb21pbmdDb25uZWN0aW9uTm9kZXMpXG4gICAgLmZpbHRlcihvbWl0T3V0Z29pbmdSZXF1ZXN0VGFyZ2V0cylcbiAgICAubWFwKG5vZGVUb1Jvd01ldGFkYXRhKVxuICAgIC5zb3J0KGxvYmJ5U29ydCk7XG5cbnZhciByZXF1ZXN0Um93cyA9IGluY29taW5nQ29ubmVjdGlvbk5vZGVzXG4gICAgLmZpbHRlcihjb250cm9sbGVyLnNob3VsZFNob3dOb2RlLmJpbmQoY29udHJvbGxlcikpXG4gICAgLmZpbHRlcihvbWl0T3V0Z29pbmdSZXF1ZXN0VGFyZ2V0cylcbiAgICAubWFwKG5vZGVUb1Jvd01ldGFkYXRhKVxuICAgIC5zb3J0KGxvYmJ5U29ydCk7XG5cbnZhciBvdXRnb2luZ1JlcXVlc3RSb3dzID0gKHJlbW90ZU5vZGUgPyBbIHJlbW90ZU5vZGUgXSA6IFtdKVxuICAgIC5maWx0ZXIoY29udHJvbGxlci5zaG91bGRTaG93Tm9kZS5iaW5kKGNvbnRyb2xsZXIpKVxuICAgIC5tYXAobm9kZVRvUm93TWV0YWRhdGEpO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBidXR0b25UZXh0XG4gKiBAcGFyYW0ge3N0cmluZ30gYnV0dG9uSURcbiAqIEBwYXJhbSB7c3RyaW5nW119IGV4dHJhQ2xhc3Nlc1xuICogQHBhcmFtIHtPYmplY3R9IGV4dHJhQXR0cmlidXRlc1xuICogQHJldHVybnMge3N0cmluZ30gbWFya3VwIGZvciBOZXRTaW0tc3R5bGUgYnV0dG9uXG4gKi9cbmZ1bmN0aW9uIGJ1dHRvbk1hcmt1cChidXR0b25UZXh0LCBidXR0b25JRCwgZXh0cmFDbGFzc2VzLCBleHRyYUF0dHJpYnV0ZXMpIHtcbiAgdmFyIGNsYXNzZXMgPSB1dGlscy52YWx1ZU9yKGV4dHJhQ2xhc3NlcywgW10pO1xuICBjbGFzc2VzLnB1c2goJ25ldHNpbS1idXR0b24nKTtcbiAgY2xhc3Nlcy5wdXNoKCdsYXJnZS1idXR0b24nKTtcblxuICBleHRyYUF0dHJpYnV0ZXMgPSB1dGlscy52YWx1ZU9yKGV4dHJhQXR0cmlidXRlcywge30pO1xuXG4gIHZhciBtYXJrdXAgPSAnPHNwYW4gY2xhc3M9XCInICsgY2xhc3Nlcy5qb2luKCcgJykgKyAnXCIgJztcblxuICAvLyBJRCBhdHRyaWJ1dGUgZm9yIHNwYW4gdGFnXG4gIGlmIChidXR0b25JRCkge1xuICAgIG1hcmt1cCArPSAnaWQ9XCInICsgYnV0dG9uSUQgKyAnXCIgJztcbiAgfVxuXG4gIC8vIEV4dHJhIGF0dHJpYnV0ZXMgZm9yIHNwYW4gdGFnXG4gIGZvciAodmFyIGtleSBpbiBleHRyYUF0dHJpYnV0ZXMpIHtcbiAgICBpZiAoZXh0cmFBdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIG1hcmt1cCArPSBrZXkgKyAnPVwiJyArIGV4dHJhQXR0cmlidXRlc1trZXldICsgJ1wiICc7XG4gICAgfVxuICB9XG5cbiAgbWFya3VwICs9ICc+JyArIGJ1dHRvblRleHQgKyAnPC9zcGFuPic7XG4gIHJldHVybiBtYXJrdXA7XG59XG5cbmZ1bmN0aW9uIHdyaXRlQmVnaW5UYWJsZShjbGFzc25hbWUpIHtcbiAgaWYgKGNsYXNzbmFtZSkge1xuICAgIDsgYnVmLnB1c2goJzx0YWJsZSBjbGFzcz1cIicsIGVzY2FwZSgoMTM1LCBjbGFzc25hbWUpKSwgJ1wiPicpOzEzNTtcbiAgfSBlbHNlIHtcbiAgICA7IGJ1Zi5wdXNoKCc8dGFibGU+Jyk7MTM3O1xuICB9XG59XG5cbmZ1bmN0aW9uIHdyaXRlRW5kVGFibGUoKSB7XG4gIDsgYnVmLnB1c2goJzwvdGFibGU+Jyk7MTQyO1xufVxuXG5mdW5jdGlvbiB3cml0ZUJlZ2luVGJvZHkoKSB7XG4gIDsgYnVmLnB1c2goJzx0Ym9keT4nKTsxNDY7XG59XG5cbmZ1bmN0aW9uIHdyaXRlRW5kVGJvZHkoKSB7XG4gIDsgYnVmLnB1c2goJzwvdGJvZHk+Jyk7MTUwO1xufVxuXG5mdW5jdGlvbiB3cml0ZUhlYWRlcihoZWFkZXJUZXh0KSB7XG4gIDsgYnVmLnB1c2goJ1xcbiAgICA8dGhlYWQ+XFxuICAgICAgPHRyPlxcbiAgICAgICAgPHRoIGNvbHNwYW49XCIzXCI+JywgZXNjYXBlKCgxNTcsICBoZWFkZXJUZXh0ICkpLCAnPC90aD5cXG4gICAgICA8L3RyPlxcbiAgICA8L3RoZWFkPlxcbiAgJyk7MTYwO1xufVxuXG5mdW5jdGlvbiB3cml0ZUVtcHR5Um93KGNvbnRlbnRzKSB7XG4gIGNvbnRlbnRzID0gdXRpbHMudmFsdWVPcihjb250ZW50cywgJycpO1xuICA7IGJ1Zi5wdXNoKCdcXG4gICAgPHRyPlxcbiAgICAgIDx0ZCBjb2xzcGFuPVwiM1wiIGNsYXNzPVwiZW1wdHktcm93XCI+JywgKDE2NywgIGNvbnRlbnRzICksICc8L3RkPlxcbiAgICA8L3RyPlxcbiAgJyk7MTY5O1xufVxuXG5mdW5jdGlvbiB3cml0ZU5vZGVSb3cocm93LCBub2RlU3RhdHVzLCBidXR0b25UeXBlLCBhZGRsQ2xhc3MpIHtcbiAgICB2YXIgYnV0dG9uO1xuICAgIGlmIChidXR0b25UeXBlID09PSAnam9pbi1idXR0b24nKSB7XG4gICAgICBidXR0b24gPSBidXR0b25NYXJrdXAoaTE4bi5idXR0b25Kb2luKCksIHVuZGVmaW5lZCwgW2J1dHRvblR5cGUsIGFkZGxDbGFzc10sIHsgJ2RhdGEtbm9kZS1pZCc6IHJvdy5ub2RlSUQgfSk7XG4gICAgfSBlbHNlIGlmIChidXR0b25UeXBlID09PSAnYWNjZXB0LWJ1dHRvbicpIHtcbiAgICAgIGJ1dHRvbiA9IGJ1dHRvbk1hcmt1cChpMThuLmJ1dHRvbkFjY2VwdCgpLCB1bmRlZmluZWQsIFtidXR0b25UeXBlLCBhZGRsQ2xhc3NdLCB7ICdkYXRhLW5vZGUtaWQnOiByb3cubm9kZUlEIH0pO1xuICAgIH0gZWxzZSBpZiAoYnV0dG9uVHlwZSA9PT0gJ2NhbmNlbC1idXR0b24nKSB7XG4gICAgICBidXR0b24gPSBidXR0b25NYXJrdXAoaTE4bi5idXR0b25DYW5jZWwoKSwgdW5kZWZpbmVkLCBbYnV0dG9uVHlwZSwgYWRkbENsYXNzLCAnc2Vjb25kYXJ5J10sIHsgJ2RhdGEtbm9kZS1pZCc6IHJvdy5ub2RlSUQgfSk7XG4gICAgfSBlbHNlIGlmIChidXR0b25UeXBlID09PSAnZnVsbC1idXR0b24nKSB7XG4gICAgICBidXR0b24gPSBidXR0b25NYXJrdXAoaTE4bi5idXR0b25GdWxsKCksIHVuZGVmaW5lZCwgW2J1dHRvblR5cGUsIGFkZGxDbGFzc10sIHsgJ2Rpc2FibGVkJzogJ2Rpc2FibGVkJyB9KTtcbiAgICB9XG4gIDsgYnVmLnB1c2goJ1xcbiAgICA8dHI+XFxuICAgICAgPHRkIG5vd3JhcD4nLCBlc2NhcGUoKDE4NSwgIHJvdy5kaXNwbGF5TmFtZSApKSwgJyA8c21hbGw+KCcsIGVzY2FwZSgoMTg1LCAgcm93Lmhvc3RuYW1lICkpLCAnKTwvc21hbGw+PC90ZD5cXG4gICAgICAnKTsxODY7IGlmIChidXR0b24pIHsgOyBidWYucHVzaCgnXFxuICAgICAgICA8dGQ+JywgKDE4NywgIG5vZGVTdGF0dXMgKSwgJzwvdGQ+XFxuICAgICAgICA8dGQgY2xhc3M9XCJidXR0b24tY29sdW1uXCI+XFxuICAgICAgICAgICcsICgxODksICBidXR0b24gKSwgJ1xcbiAgICAgICAgPC90ZD5cXG4gICAgICAnKTsxOTE7IH0gZWxzZSB7IDsgYnVmLnB1c2goJ1xcbiAgICAgICAgPHRkIGNvbHNwYW49XCIyXCI+JywgKDE5MiwgIG5vZGVTdGF0dXMgKSwgJzwvdGQ+XFxuICAgICAgJyk7MTkzOyB9IDsgYnVmLnB1c2goJ1xcbiAgICA8L3RyPlxcbiAgJyk7MTk1O1xufVxuXG47IGJ1Zi5wdXNoKCdcXG48ZGl2IGNsYXNzPVwiY29udGVudC13cmFwXCI+XFxuICA8ZGl2IGNsYXNzPVwiaW5zdHJ1Y3Rpb25zXCI+XFxuICAgICcsIGVzY2FwZSgoMjAxLCAgY29udHJvbGxlci5nZXRMb2NhbGl6ZWRMb2JieUluc3RydWN0aW9ucygpICkpLCAnXFxuICAgIDxkaXYgY2xhc3M9XCJyZWZlcmVuY2UtYXJlYS1wbGFjZWhvbGRlclwiPjwvZGl2PlxcbiAgPC9kaXY+XFxuICA8ZGl2IGNsYXNzPVwiY29udHJvbHNcIj5cXG5cXG4gICAgJyk7MjA2O1xuICAgICAgLy8gT3V0Z29pbmcgcmVxdWVzdCB0YWJsZSAoaGlkZGVuIGlmIGVtcHR5KVxuICAgICAgaWYgKG91dGdvaW5nUmVxdWVzdFJvd3MubGVuZ3RoID4gMCkge1xuICAgICAgICB3cml0ZUJlZ2luVGFibGUoKTtcbiAgICAgICAgd3JpdGVIZWFkZXIoaTE4bi5vdXRnb2luZ0Nvbm5lY3Rpb25SZXF1ZXN0cygpKTtcbiAgICAgICAgd3JpdGVCZWdpblRib2R5KCk7XG4gICAgICAgIG91dGdvaW5nUmVxdWVzdFJvd3MuZm9yRWFjaChmdW5jdGlvbiAocm93KSB7XG4gICAgICAgICAgdmFyIG91dGdvaW5nU3RhdHVzID0gaTE4bi5sb2JieVN0YXR1c1dhaXRpbmdGb3JPdGhlcih7XG4gICAgICAgICAgICBzcGlubmVyOiAnPGltZyBzcmM9XCInICsgZ2V0QXNzZXRVcmwoJ21lZGlhL25ldHNpbS9sb2FkaW5nLmdpZicpICsgJ1wiIC8+JyxcbiAgICAgICAgICAgIG90aGVyTmFtZTogcm93LmRpc3BsYXlOYW1lLFxuICAgICAgICAgICAgb3RoZXJTdGF0dXM6IHJvdy5zdGF0dXNcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB3cml0ZU5vZGVSb3cocm93LCBvdXRnb2luZ1N0YXR1cywgJ2NhbmNlbC1idXR0b24nLCByb3cuY2xhc3NBdHRyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHdyaXRlRW5kVGJvZHkoKTtcbiAgICAgICAgd3JpdGVFbmRUYWJsZSgpO1xuICAgICAgfVxuXG4gICAgICAvLyBJbmNvbWluZyByZXF1ZXN0cyB0YWJsZSAoaGlkZGVuIGlmIGVtcHR5KVxuICAgICAgaWYgKHJlcXVlc3RSb3dzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgd3JpdGVCZWdpblRhYmxlKCk7XG4gICAgICAgIHdyaXRlSGVhZGVyKGkxOG4uaW5jb21pbmdDb25uZWN0aW9uUmVxdWVzdHMoKSk7XG4gICAgICAgIHdyaXRlQmVnaW5UYm9keSgpO1xuICAgICAgICByZXF1ZXN0Um93cy5mb3JFYWNoKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICB2YXIgYnV0dG9uVHlwZTtcbiAgICAgICAgICBpZiAoIWNvbnRyb2xsZXIuaGFzT3V0Z29pbmdSZXF1ZXN0KCkgJiYgcm93LmNhbkNvbm5lY3RUb05vZGUpIHtcbiAgICAgICAgICAgIGJ1dHRvblR5cGUgPSAnYWNjZXB0LWJ1dHRvbic7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBpbmNvbWluZ1N0YXR1cyA9IGkxOG4ubG9iYnlTdGF0dXNXYWl0aW5nRm9yWW91KCk7XG4gICAgICAgICAgd3JpdGVOb2RlUm93KHJvdywgaW5jb21pbmdTdGF0dXMsIGJ1dHRvblR5cGUsIHJvdy5jbGFzc0F0dHIpO1xuICAgICAgICB9KTtcbiAgICAgICAgd3JpdGVFbmRUYm9keSgpO1xuICAgICAgICB3cml0ZUVuZFRhYmxlKCk7XG4gICAgICB9XG4gICAgOyBidWYucHVzaCgnXFxuXFxuICAgICcpOzI0MjtcbiAgICAgIC8vIFByaW1hcnkgbG9iYnkgbGlzdFxuICAgICAgd3JpdGVCZWdpblRhYmxlKFwibm9tYXJnaW5cIik7XG4gICAgICB3cml0ZUhlYWRlcihpMThuLmxvYmJ5KCkpO1xuICAgICAgd3JpdGVFbmRUYWJsZSgpO1xuICAgIDsgYnVmLnB1c2goJ1xcbiAgICA8ZGl2IGlkPVwibmV0c2ltLXNjcm9sbGluZy1sb2JieVwiPlxcbiAgICAnKTsyNDk7XG4gICAgICB3cml0ZUJlZ2luVGFibGUoKTtcbiAgICAgIHdyaXRlQmVnaW5UYm9keSgpO1xuICAgICAgbG9iYnlSb3dzLmZvckVhY2goZnVuY3Rpb24gKHJvdykge1xuICAgICAgICB2YXIgYnV0dG9uVHlwZTtcbiAgICAgICAgaWYgKCFjb250cm9sbGVyLmhhc091dGdvaW5nUmVxdWVzdCgpKSB7XG4gICAgICAgICAgaWYgKHJvdy5pc0Z1bGwpIHtcbiAgICAgICAgICAgIGJ1dHRvblR5cGUgPSAnZnVsbC1idXR0b24nO1xuICAgICAgICAgIH0gZWxzZSBpZiAocm93LmNhbkNvbm5lY3RUb05vZGUpIHtcbiAgICAgICAgICAgIGJ1dHRvblR5cGUgPSAnam9pbi1idXR0b24nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB3cml0ZU5vZGVSb3cocm93LCByb3cuc3RhdHVzLCBidXR0b25UeXBlLCByb3cuY2xhc3NBdHRyKTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgYnV0dG9ucyA9IFtdO1xuXG4gICAgICBpZiAoY29udHJvbGxlci5jYW5BZGRSb3V0ZXIoKSkge1xuICAgICAgICB2YXIgYnV0dG9uVGV4dCA9IGxldmVsQ29uZmlnLmJyb2FkY2FzdE1vZGUgPyBpMThuLmFkZFJvb20oKSA6IGkxOG4uYWRkUm91dGVyKCk7XG4gICAgICAgIGJ1dHRvbnMucHVzaChidXR0b25NYXJrdXAoXG4gICAgICAgICAgICBidXR0b25UZXh0LFxuICAgICAgICAgICAgJ25ldHNpbS1sb2JieS1hZGQtcm91dGVyJyxcbiAgICAgICAgICAgIFsnc2Vjb25kYXJ5J11cbiAgICAgICAgKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChsZXZlbENvbmZpZy5zaG93TG9nQnJvd3NlckJ1dHRvbikge1xuICAgICAgICBidXR0b25zLnB1c2goYnV0dG9uTWFya3VwKFxuICAgICAgICAgICAgaTE4bi5sb2dCcm93c2VyQnV0dG9uKCksXG4gICAgICAgICAgICAnc2hvdy1yb3V0ZXItbG9nLW1vZGFsJyxcbiAgICAgICAgICAgIFsnc2Vjb25kYXJ5J10sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICdkYXRhLXRvZ2dsZSc6J21vZGFsJyxcbiAgICAgICAgICAgICAgJ2RhdGEtdGFyZ2V0JzonI3JvdXRlci1sb2ctbW9kYWwnXG4gICAgICAgICAgICB9XG4gICAgICAgICkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYnV0dG9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHdyaXRlRW1wdHlSb3coYnV0dG9ucy5qb2luKCcgJykpO1xuICAgICAgfSBlbHNlIGlmIChsb2JieVJvd3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHdyaXRlRW1wdHlSb3coaTE4bi5sb2JieUlzRW1wdHkoKSk7XG4gICAgICB9XG5cbiAgICAgIHdyaXRlRW5kVGJvZHkoKTtcbiAgICAgIHdyaXRlRW5kVGFibGUoKTtcbiAgICA7IGJ1Zi5wdXNoKCdcXG4gICAgPC9kaXY+XFxuXFxuICA8L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XCJjbGVhclwiPjwvZGl2PlxcbjwvZGl2PlxcbicpOyB9KSgpO1xufSBcbnJldHVybiBidWYuam9pbignJyk7XG59O1xuICByZXR1cm4gZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgcmV0dXJuIHQobG9jYWxzLCByZXF1aXJlKFwiZWpzXCIpLmZpbHRlcnMpO1xuICB9XG59KCkpOyIsIi8qKlxuICogQG92ZXJ2aWV3IFV0aWxpdHkgbWV0aG9kcyBmb3IgZ2VuZXJhdGluZyB0aGUgcmlnaHQga2luZHMgb2Ygbm9kZSBjb250cm9sbGVyc1xuICogICAgICAgICAgIGZyb20gcmF3IG5vZGUgdGFibGUgcm93cy5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBOZXRTaW1Db25zdGFudHMgPSByZXF1aXJlKCcuL05ldFNpbUNvbnN0YW50cycpO1xuXG52YXIgTm9kZVR5cGUgPSBOZXRTaW1Db25zdGFudHMuTm9kZVR5cGU7XG5cbnZhciBOZXRTaW1Ob2RlRmFjdG9yeSA9IG1vZHVsZS5leHBvcnRzO1xuXG4vKipcbiAqIEdpdmVuIGEgc2V0IG9mIHJvd3MgZnJvbSB0aGUgbm9kZSB0YWJsZSBvbiBhIHNoYXJkLCBnaXZlcyBiYWNrIGEgc2V0IG9mIG5vZGVcbiAqIGNvbnRyb2xsZXJzIChvZiBhcHByb3ByaWF0ZSB0eXBlcykuXG4gKiBAcGFyYW0geyFOZXRTaW1TaGFyZH0gc2hhcmRcbiAqIEBwYXJhbSB7IUFycmF5LjxPYmplY3Q+fSBub2RlUm93c1xuICogQHRocm93cyB3aGVuIGEgcm93IGRvZXNuJ3QgaGF2ZSBhIG1hcHBhYmxlIG5vZGUgdHlwZS5cbiAqIEByZXR1cm4ge0FycmF5LjxOZXRTaW1Ob2RlPn0gbm9kZXMgZm9yIHRoZSByb3dzXG4gKi9cbk5ldFNpbU5vZGVGYWN0b3J5Lm5vZGVzRnJvbVJvd3MgPSBmdW5jdGlvbiAoc2hhcmQsIG5vZGVSb3dzKSB7XG4gIHJldHVybiBub2RlUm93cy5tYXAoTmV0U2ltTm9kZUZhY3Rvcnkubm9kZUZyb21Sb3cuYmluZCh0aGlzLCBzaGFyZCkpO1xufTtcblxuLyoqXG4gKiBHaXZlbiBhIHJvdyBmcm9tIHRoZSBub2RlIHRhYmxlIG9uIGEgc2hhcmQsIGdpdmVzIGJhY2sgYSBub2RlIGNvbnRyb2xsZXJzXG4gKiAob2YgYXBwcm9wcmlhdGUgdHlwZXMpLlxuICogQHBhcmFtIHshTmV0U2ltU2hhcmR9IHNoYXJkXG4gKiBAcGFyYW0geyFPYmplY3R9IG5vZGVSb3dcbiAqIEB0aHJvd3Mgd2hlbiB0aGUgcm93IGRvZXNuJ3QgaGF2ZSBhIG1hcHBhYmxlIG5vZGUgdHlwZS5cbiAqIEByZXR1cm4ge05ldFNpbU5vZGV9IG5vZGUgZm9yIHRoZSByb3dzXG4gKi9cbk5ldFNpbU5vZGVGYWN0b3J5Lm5vZGVGcm9tUm93ID0gZnVuY3Rpb24gKHNoYXJkLCBub2RlUm93KSB7XG4gIGlmIChub2RlUm93LnR5cGUgPT09IE5vZGVUeXBlLkNMSUVOVCkge1xuICAgIHZhciBOZXRTaW1DbGllbnROb2RlID0gcmVxdWlyZSgnLi9OZXRTaW1DbGllbnROb2RlJyk7XG4gICAgcmV0dXJuIG5ldyBOZXRTaW1DbGllbnROb2RlKHNoYXJkLCBub2RlUm93KTtcbiAgfSBlbHNlIGlmIChub2RlUm93LnR5cGUgPT09IE5vZGVUeXBlLlJPVVRFUikge1xuICAgIHZhciBOZXRTaW1Sb3V0ZXJOb2RlID0gcmVxdWlyZSgnLi9OZXRTaW1Sb3V0ZXJOb2RlJyk7XG4gICAgcmV0dXJuIG5ldyBOZXRTaW1Sb3V0ZXJOb2RlKHNoYXJkLCBub2RlUm93KTtcbiAgfVxuXG4gIC8vIE9vcHMhICBXZSBwcm9iYWJseSBzaG91bGRuJ3QgZXZlciBnZXQgaGVyZS5cbiAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIG1hcCByb3cgdG8gbm9kZS5cIik7XG59O1xuIiwiLyoqXG4gKiBAb3ZlcnZpZXcgUm91dGVyIG5vZGUgc2ltdWxhdGlvbiBlbnRpdHkuICBBbHNvIGNvbnRhaW5zIGxvZ2ljIGZvciB0aGVcbiAqICAgICAgICAgICBhdXRvLUROUyBzeXN0ZW0uXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGkxOG4gPSByZXF1aXJlKCcuL2xvY2FsZScpO1xudmFyIE5ldFNpbUNvbnN0YW50cyA9IHJlcXVpcmUoJy4vTmV0U2ltQ29uc3RhbnRzJyk7XG52YXIgTmV0U2ltVXRpbHMgPSByZXF1aXJlKCcuL05ldFNpbVV0aWxzJyk7XG52YXIgTmV0U2ltTm9kZSA9IHJlcXVpcmUoJy4vTmV0U2ltTm9kZScpO1xudmFyIE5ldFNpbUVudGl0eSA9IHJlcXVpcmUoJy4vTmV0U2ltRW50aXR5Jyk7XG52YXIgTmV0U2ltTG9nRW50cnkgPSByZXF1aXJlKCcuL05ldFNpbUxvZ0VudHJ5Jyk7XG52YXIgTmV0U2ltTG9nZ2VyID0gcmVxdWlyZSgnLi9OZXRTaW1Mb2dnZXInKTtcbnZhciBOZXRTaW1XaXJlID0gcmVxdWlyZSgnLi9OZXRTaW1XaXJlJyk7XG52YXIgTmV0U2ltTWVzc2FnZSA9IHJlcXVpcmUoJy4vTmV0U2ltTWVzc2FnZScpO1xudmFyIE9ic2VydmFibGVFdmVudCA9IHJlcXVpcmUoJy4uL09ic2VydmFibGVFdmVudCcpO1xudmFyIFBhY2tldCA9IHJlcXVpcmUoJy4vUGFja2V0Jyk7XG52YXIgRGF0YUNvbnZlcnRlcnMgPSByZXF1aXJlKCcuL0RhdGFDb252ZXJ0ZXJzJyk7XG52YXIgTmV0U2ltTm9kZUZhY3RvcnkgPSByZXF1aXJlKCcuL05ldFNpbU5vZGVGYWN0b3J5Jyk7XG5cbnZhciBfID0gdXRpbHMuZ2V0TG9kYXNoKCk7XG5cbnZhciBzZXJpYWxpemVOdW1iZXIgPSBOZXRTaW1VdGlscy5zZXJpYWxpemVOdW1iZXI7XG52YXIgZGVzZXJpYWxpemVOdW1iZXIgPSBOZXRTaW1VdGlscy5kZXNlcmlhbGl6ZU51bWJlcjtcblxudmFyIGFzY2lpVG9CaW5hcnkgPSBEYXRhQ29udmVydGVycy5hc2NpaVRvQmluYXJ5O1xuXG52YXIgRG5zTW9kZSA9IE5ldFNpbUNvbnN0YW50cy5EbnNNb2RlO1xudmFyIE5vZGVUeXBlID0gTmV0U2ltQ29uc3RhbnRzLk5vZGVUeXBlO1xudmFyIEJJVFNfUEVSX0JZVEUgPSBOZXRTaW1Db25zdGFudHMuQklUU19QRVJfQllURTtcblxudmFyIGxvZ2dlciA9IE5ldFNpbUxvZ2dlci5nZXRTaW5nbGV0b24oKTtcbnZhciBOZXRTaW1HbG9iYWxzID0gcmVxdWlyZSgnLi9OZXRTaW1HbG9iYWxzJyk7XG5cbi8qKlxuICogQHR5cGUge251bWJlcn1cbiAqIEByZWFkb25seVxuICovXG52YXIgTUFYX0NMSUVOVF9DT05ORUNUSU9OUyA9IDY7XG5cbi8qKlxuICogQ29udmVuaWVudGx5LCBhIHJvdXRlcidzIGFkZHJlc3MgaW4gaXRzIGxvY2FsIG5ldHdvcmsgaXMgYWx3YXlzIHplcm8uXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQHJlYWRvbmx5XG4gKi9cbnZhciBST1VURVJfTE9DQUxfQUREUkVTUyA9IDA7XG5cbi8qKlxuICogQWRkcmVzcyB0aGF0IGNhbiBvbmx5IGJlIHVzZWQgZm9yIHRoZSBhdXRvLWRucyBub2RlLlxuICogTWF5IGV2ZW50dWFsbHkgYmUgcmVwbGFjZWQgd2l0aCBhIGR5bmFtaWNhbGx5IGFzc2lnbmVkIGFkZHJlc3MuXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQHJlYWRvbmx5XG4gKi9cbnZhciBBVVRPX0ROU19SRVNFUlZFRF9BRERSRVNTID0gMTU7XG5cbi8qKlxuICogSG9zdG5hbWUgYXNzaWduZWQgdG8gdGhlIGF1dG9tYXRpYyBkbnMgJ25vZGUnIGluIHRoZSBsb2NhbCBuZXR3b3JrLlxuICogVGhlcmUgd2lsbCBvbmx5IGJlIG9uZSBvZiB0aGVzZSwgc28gaXQgY2FuIGJlIHNpbXBsZS5cbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAcmVhZG9ubHlcbiAqL1xudmFyIEFVVE9fRE5TX0hPU1ROQU1FID0gJ2Rucyc7XG5cbi8qKlxuICogVmFsdWUgdGhlIGF1dG8tRE5TIHdpbGwgcmV0dXJuIGluc3RlYWQgb2YgYW4gYWRkcmVzcyB3aGVuIGl0IGNhbid0XG4gKiBsb2NhdGUgYSBub2RlIHdpdGggdGhlIGdpdmVuIGhvc3RuYW1lIGluIHRoZSBsb2NhbCBuZXR3b3JrLlxuICogQHR5cGUge3N0cmluZ31cbiAqIEByZWFkb25seVxuICovXG52YXIgQVVUT19ETlNfTk9UX0ZPVU5EID0gJ05PVF9GT1VORCc7XG5cbi8qKlxuICogTWF4aW11bSBwYWNrZXQgbGlmZXRpbWUgaW4gdGhlIHJvdXRlciBxdWV1ZSwgc29ydCBvZiBhIHByaW1pdGl2ZSBUaW1lLVRvLUxpdmVcbiAqIHN5c3RlbSB0aGF0IGhlbHBzIHByZXZlbnQgYSBxdWV1ZSBmcm9tIGJlaW5nIGluZGVmaW5pdGVseSBibG9ja2VkIGJ5IGEgdmVyeVxuICogbGFyZ2UgcGFja2V0LiAgUGFja2V0cyB0aGF0IGV4Y2VlZCB0aGlzIHRpbWUgd2lsbCBzaWxlbnRseSBmYWlsIGRlbGl2ZXJ5LlxuICogQHR5cGUge251bWJlcn1cbiAqIEByZWFkb25seVxuICovXG52YXIgUEFDS0VUX01BWF9MSUZFVElNRV9NUyA9IDEwICogNjAgKiAxMDAwO1xuXG4vKipcbiAqIFRvIGF2b2lkIGNhbGN1bGF0aW5nIGEgdG90YWxseSB1bnJlYXNvbmFibGUgbnVtYmVyIG9mIGFkZHJlc3NlcywgdGhpcyBpc1xuICogdGhlIG1vc3QgYWRkcmVzc2VzIHdlIHdpbGwgY29uc2lkZXIgd2hlbiBwaWNraW5nIG9uZSBmb3IgYSBuZXcgaG9zdC5cbiAqIFRoaXMgbWVhbnMgZnVsbCBzdXBwb3J0IHVwIHRvIGEgMTItYml0IGFkZHJlc3MgcGFydCwgd2hpY2ggc2hvdWxkIGJlIG1vcmVcbiAqIHRoYW4gZW5vdWdoLlxuICogQHR5cGUge251bWJlcn1cbiAqL1xudmFyIEFERFJFU1NfT1BUSU9OX0xJTUlUID0gNDA5NjtcblxuLyoqXG4gKiBDbGllbnQgbW9kZWwgb2Ygc2ltdWxhdGVkIHJvdXRlclxuICpcbiAqIFJlcHJlc2VudHMgdGhlIGNsaWVudCdzIHZpZXcgb2YgYSBnaXZlbiByb3V0ZXIsIHByb3ZpZGVzIG1ldGhvZHMgZm9yXG4gKiAgIGxldHRpbmcgdGhlIGNsaWVudCBpbnRlcmFjdCB3aXRoIHRoZSByb3V0ZXIsIGFuZCB3cmFwcyB0aGUgY2xpZW50J3NcbiAqICAgd29yayBkb2luZyBwYXJ0IG9mIHRoZSByb3V0ZXIgc2ltdWxhdGlvbi5cbiAqXG4gKiBBIHJvdXRlciAtZXhpc3RzLSB3aGVuIGl0IGhhcyBhIHJvdyBpbiB0aGUgbG9iYnkgdGFibGUgb2YgdHlwZSAncm91dGVyJ1xuICogQSByb3V0ZXIgaXMgY29ubmVjdGVkIHRvIGEgdXNlciB3aGVuIGEgJ3VzZXInIHJvdyBleGlzdHMgaW4gdGhlIGxvYmJ5XG4gKiAgIHRhYmxlIHRoYXQgaGFzIGEgc3RhdHVzICdDb25uZWN0ZWQgdG8ge3JvdXRlciBJRH0gYnkgd2lyZXMge1gsIFl9Jy5cbiAqIEEgcm91dGVyIHdpbGwgYWxzbyBzaGFyZSBhIHdpcmUgKHNpbXBsZXgpIG9yIHdpcmVzIChkdXBsZXgpIHdpdGggZWFjaCB1c2VyLFxuICogICB3aGljaCBhcHBlYXIgaW4gdGhlIHdpcmUgdGFibGUuXG4gKlxuICogQHBhcmFtIHshTmV0U2ltU2hhcmR9IHNoYXJkXG4gKiBAcGFyYW0ge1JvdXRlclJvd30gW3JvdXRlclJvd10gLSBMb2JieSByb3cgZm9yIHRoaXMgcm91dGVyLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXVnbWVudHMgTmV0U2ltTm9kZVxuICovXG52YXIgTmV0U2ltUm91dGVyTm9kZSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHNoYXJkLCByb3cpIHtcbiAgcm93ID0gcm93ICE9PSB1bmRlZmluZWQgPyByb3cgOiB7fTtcbiAgTmV0U2ltTm9kZS5jYWxsKHRoaXMsIHNoYXJkLCByb3cpO1xuXG4gIHZhciBsZXZlbENvbmZpZyA9IE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKTtcblxuICAvKipcbiAgICogVGhpcyByb3V0ZXIncyBpZGVudGlmeWluZyBudW1iZXIsIHdoaWNoIGdldHMgdHJhbnNsYXRlZCBpbnRvIGl0cyBhZGRyZXNzLlxuICAgKiBTaG91bGQgYmUgdW5pcXVlIGFtb25nIHJvdXRlcnMgb24gdGhlIHNoYXJkLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5yb3V0ZXJOdW1iZXIgPSByb3cucm91dGVyTnVtYmVyO1xuXG4gIC8qKlxuICAgKiBVbml4IHRpbWVzdGFtcCAobG9jYWwpIG9mIHJvdXRlciBjcmVhdGlvbiB0aW1lLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5jcmVhdGlvblRpbWUgPSB1dGlscy52YWx1ZU9yKHJvdy5jcmVhdGlvblRpbWUsIERhdGUubm93KCkpO1xuXG4gIC8qKlxuICAgKiBTZXRzIGN1cnJlbnQgRE5TIG1vZGUgZm9yIHRoZSByb3V0ZXIncyBsb2NhbCBuZXR3b3JrLlxuICAgKiBUaGlzIHZhbHVlIGlzIG1hbmlwdWxhdGVkIGJ5IGFsbCBjbGllbnRzLlxuICAgKiBAdHlwZSB7RG5zTW9kZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuZG5zTW9kZSA9IHV0aWxzLnZhbHVlT3Iocm93LmRuc01vZGUsIGxldmVsQ29uZmlnLmRlZmF1bHREbnNNb2RlKTtcblxuICAvKipcbiAgICogU2V0cyBjdXJyZW50IEROUyBub2RlIElEIGZvciB0aGUgcm91dGVyJ3MgbG9jYWwgbmV0d29yay5cbiAgICogVGhpcyB2YWx1ZSBpcyBtYW5pcHVsYXRlZCBieSBhbGwgY2xpZW50cy5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuZG5zTm9kZUlEID0gcm93LmRuc05vZGVJRDtcblxuICAvKipcbiAgICogU3BlZWQgKGluIGJpdHMgcGVyIHNlY29uZCkgYXQgd2hpY2ggbWVzc2FnZXMgYXJlIHByb2Nlc3NlZC5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRoaXMuYmFuZHdpZHRoID0gdXRpbHMudmFsdWVPcihkZXNlcmlhbGl6ZU51bWJlcihyb3cuYmFuZHdpZHRoKSxcbiAgICAgIGxldmVsQ29uZmlnLmRlZmF1bHRSb3V0ZXJCYW5kd2lkdGgpO1xuXG4gIC8qKlxuICAgKiBBbW91bnQgb2YgZGF0YSAoaW4gYml0cykgdGhhdCB0aGUgcm91dGVyIHF1ZXVlIGNhbiBob2xkIGJlZm9yZSBpdCBzdGFydHNcbiAgICogZHJvcHBpbmcgcGFja2V0cy5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRoaXMubWVtb3J5ID0gdXRpbHMudmFsdWVPcihkZXNlcmlhbGl6ZU51bWJlcihyb3cubWVtb3J5KSxcbiAgICAgIGxldmVsQ29uZmlnLmRlZmF1bHRSb3V0ZXJNZW1vcnkpO1xuXG4gIC8qKlxuICAgKiBQZXJjZW50IGNoYW5jZSAoMC0xKSB0aGF0IGEgcGFja2V0IGJlaW5nIHJvdXRlZCB3aWxsIGJlIGRyb3BwZWQgZm9yIG5vXG4gICAqIHJlYXNvbi5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRoaXMucmFuZG9tRHJvcENoYW5jZSA9IHV0aWxzLnZhbHVlT3Iocm93LnJhbmRvbURyb3BDaGFuY2UsXG4gICAgICBsZXZlbENvbmZpZy5kZWZhdWx0UmFuZG9tRHJvcENoYW5jZSk7XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgYSBzdWJzZXQgb2YgY29ubmVjdGlvbiBhbmQgbWVzc2FnZSBldmVudHMgdGhhdCB0aGlzXG4gICAqIHJvdXRlciB3aWxsIHJlc3BvbmQgdG8sIG9ubHkgbWFuYWdpbmcgZXZlbnRzIGZyb20gdGhlIGdpdmVuIG5vZGUgSUQsXG4gICAqIHRvIGF2b2lkIGNvbmZsaWN0aW5nIHdpdGggb3RoZXIgY2xpZW50cyBhbHNvIHNpbXVsYXRpbmcgdGhpcyByb3V0ZXIuXG4gICAqXG4gICAqIE5vdCBwZXJzaXN0ZWQgb24gc2VydmVyLlxuICAgKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5zaW11bGF0ZUZvclNlbmRlcl8gPSB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIExvY2FsIGNhY2hlIG9mIHRoZSBsYXN0IHRpY2sgdGltZSBpbiB0aGUgbG9jYWwgc2ltdWxhdGlvbi5cbiAgICogQWxsb3dzIHVzIHRvIHNjaGVkdWxlL3RpbWVzdGFtcCBldmVudHMgdGhhdCBkb24ndCBoYXBwZW4gaW5zaWRlIHRoZVxuICAgKiB0aWNrIGV2ZW50LlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5zaW11bGF0aW9uVGltZV8gPSAwO1xuXG4gIC8qKlxuICAgKiBQYWNrZXQgZm9ybWF0IHNwZWNpZmljYXRpb24gdGhpcyByb3V0ZXIgd2lsbCB1c2UgdG8gcGFyc2UsIHJvdXRlLCBhbmQgbG9nXG4gICAqIHBhY2tldHMgdGhhdCBpdCByZWNlaXZlcy4gIFNldCBvbiByb3V0ZXIgdGhhdCBpcyBzaW11bGF0ZWQgYnkgY2xpZW50LlxuICAgKlxuICAgKiBOb3QgcGVyc2lzdGVkIG9uIHNlcnZlci5cbiAgICpcbiAgICogQHR5cGUge1BhY2tldC5IZWFkZXJUeXBlW119XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnBhY2tldFNwZWNfID0gW107XG5cbiAgLyoqXG4gICAqIExvY2FsIGNhY2hlIG9mIG91ciByZW1vdGUgcm93LCB1c2VkIHRvIGRlY2lkZSB3aGV0aGVyIG91ciBzdGF0ZSBoYXNcbiAgICogY2hhbmdlZC5cbiAgICogXG4gICAqIE5vdCBwZXJzaXN0ZWQgdG8gc2VydmVyLlxuICAgKiBcbiAgICogQHR5cGUge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuc3RhdGVDYWNoZV8gPSB7fTtcbiAgXG4gIC8qKlxuICAgKiBFdmVudCBvdGhlcnMgY2FuIG9ic2VydmUsIHdoaWNoIHdlIGZpcmUgd2hlbiBvdXIgb3duIHJlbW90ZSByb3cgY2hhbmdlcy5cbiAgICogXG4gICAqIEB0eXBlIHtPYnNlcnZhYmxlRXZlbnR9XG4gICAqL1xuICB0aGlzLnN0YXRlQ2hhbmdlID0gbmV3IE9ic2VydmFibGVFdmVudCgpO1xuXG4gIC8qKlxuICAgKiBFdmVudCBvdGhlcnMgY2FuIG9ic2VydmUsIHdoaWNoIHdlIGZpcmUgd2hlbiB0aGUgcm91dGVyIHN0YXRpc3RpY3NcbiAgICogY2hhbmdlICh3aGljaCBtYXkgYmUgdmVyeSBmcmVxdWVudC4uLilcbiAgICpcbiAgICogQHR5cGUge09ic2VydmFibGVFdmVudH1cbiAgICovXG4gIHRoaXMuc3RhdHNDaGFuZ2UgPSBuZXcgT2JzZXJ2YWJsZUV2ZW50KCk7XG5cbiAgLyoqXG4gICAqIExvY2FsIGNhY2hlIG9mIHdpcmVzIGF0dGFjaGVkIHRvIHRoaXMgcm91dGVyLCB1c2VkIGZvciBkZXRlY3RpbmcgYW5kXG4gICAqIGJyb2FkY2FzdGluZyByZWxldmFudCBjaGFuZ2VzLlxuICAgKlxuICAgKiBOb3QgcGVyc2lzdGVkIG9uIHNlcnZlci5cbiAgICpcbiAgICogQHR5cGUge0FycmF5fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5teVdpcmVSb3dDYWNoZV8gPSBbXTtcblxuICAvKipcbiAgICogRXZlbnQgb3RoZXJzIGNhbiBvYnNlcnZlLCB3aGljaCB3ZSBmaXJlIHdoZW4gdGhlIHJvdXRlcidzIHNldCBvZiB3aXJlc1xuICAgKiBjaGFuZ2VzIGluZGljYXRpbmcgYSBjaGFuZ2UgaW4gdGhlIGxvY2FsIG5ldHdvcmsuXG4gICAqXG4gICAqIEB0eXBlIHtPYnNlcnZhYmxlRXZlbnR9XG4gICAqL1xuICB0aGlzLndpcmVzQ2hhbmdlID0gbmV3IE9ic2VydmFibGVFdmVudCgpO1xuXG4gIC8qKlxuICAgKiBMb2NhbCBjYWNoZSBvZiBsb2cgcm93cyBhc3NvY2lhdGVkIHdpdGggdGhpcyByb3V0ZXIsIHVzZWQgZm9yIGRldGVjdGluZ1xuICAgKiBhbmQgYnJvYWRjYXN0aW5nIHJlbGV2YW50IGNoYW5nZXMuXG4gICAqIFxuICAgKiBAdHlwZSB7QXJyYXl9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLm15TG9nUm93Q2FjaGVfID0gW107XG4gIFxuICAvKipcbiAgICogRXZlbnQgb3RoZXJzIGNhbiBvYnNlcnZlLCB3aGljaCB3ZSBmaXJlIHdoZW4gdGhlIHJvdXRlcidzIGxvZyBjb250ZW50XG4gICAqIGNoYW5nZXMuXG4gICAqIFxuICAgKiBAdHlwZSB7T2JzZXJ2YWJsZUV2ZW50fVxuICAgKi9cbiAgdGhpcy5sb2dDaGFuZ2UgPSBuZXcgT2JzZXJ2YWJsZUV2ZW50KCk7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgcm91dGVyIGlzIGluIHRoZSBtaWRkbGUgb2Ygd29yay4gIEtlZXBzIHJvdXRlciBmcm9tIHBpY2tpbmcgdXBcbiAgICogaXRzIG93biBjaGFuZ2Ugbm90aWZpY2F0aW9ucyBvciBpbnRlcnJ1cHRpbmcgaXRzIG93biBwcm9jZXNzZXMuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5pc1JvdXRlclByb2Nlc3NpbmdfID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIExvY2FsIGNhY2hlIG9mIG1lc3NhZ2VzIHRoYXQgbmVlZCB0byBiZSBwcm9jZXNzZWQgYnkgKGFueSBzaW11bGF0aW9uXG4gICAqIG9mKSB0aGUgcm91dGVyLiAgVXNlZCBmb3IgdHJhY2tpbmcgcm91dGVyIG1lbW9yeSwgdGhyb3VnaHB1dCwgZXRjLlxuICAgKiBAdHlwZSB7TmV0U2ltTWVzc2FnZVtdfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5yb3V0ZXJRdWV1ZUNhY2hlXyA9IFtdO1xuXG4gIC8qKlxuICAgKiBTZXQgb2Ygc2NoZWR1bGVkICdyb3V0aW5nIGV2ZW50cydcbiAgICogQHR5cGUge09iamVjdFtdfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5sb2NhbFJvdXRpbmdTY2hlZHVsZV8gPSBbXTtcblxuICAvKipcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmlzQXV0b0Ruc1Byb2Nlc3NpbmdfID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIExvY2FsIGNhY2hlIG9mIG1lc3NhZ2VzIHRoYXQgbmVlZCB0byBiZSBwcm9jZXNzZWQgYnkgKGFueSBzaW11bGF0aW9uXG4gICAqIG9mKSB0aGUgYXV0by1ETlMuIFVzZWQgZm9yIHN0YXRzIGFuZCBsaW1pdGluZy5cbiAgICogQHR5cGUge05ldFNpbU1lc3NhZ2VbXX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuYXV0b0Ruc1F1ZXVlXyA9IFtdO1xuXG4gIC8qKlxuICAgKiBNb3N0IGNsaWVudHMgdGhhdCBjYW4gYmUgY29ubmVjdGVkIHRvIHRoaXMgcm91dGVyLlxuICAgKiBNb3ZlZCB0byBpbnN0YW5jZSB2YXJpYWJsZSBzbyB0aGF0IHRlc3RzIGNhbiBvdmVycmlkZSBpdCBpbiBjZXJ0YWluIGNhc2VzLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5tYXhDbGllbnRDb25uZWN0aW9uc18gPSBNQVhfQ0xJRU5UX0NPTk5FQ1RJT05TO1xufTtcbk5ldFNpbVJvdXRlck5vZGUuaW5oZXJpdHMoTmV0U2ltTm9kZSk7XG5cbi8qKlxuICogU3RhdGljIGFzeW5jIGNyZWF0aW9uIG1ldGhvZC4gU2VlIE5ldFNpbUVudGl0eS5jcmVhdGUoKS5cbiAqIEBwYXJhbSB7IU5ldFNpbVNoYXJkfSBzaGFyZFxuICogQHBhcmFtIHshTm9kZVN0eWxlQ2FsbGJhY2t9IG9uQ29tcGxldGUgLSBNZXRob2QgdGhhdCB3aWxsIGJlIGdpdmVuIHRoZVxuICogICAgICAgIGNyZWF0ZWQgZW50aXR5LCBvciBudWxsIGlmIGVudGl0eSBjcmVhdGlvbiBmYWlsZWQuXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUuY3JlYXRlID0gZnVuY3Rpb24gKHNoYXJkLCBvbkNvbXBsZXRlKSB7XG4gIHZhciBuZXh0Um91dGVyTnVtYmVyID0gMTtcbiAgc2hhcmQubm9kZVRhYmxlLnJlYWRBbGwoKS5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgaWYgKE5vZGVUeXBlLlJPVVRFUiA9PT0gbm9kZS50eXBlICYmIG5vZGUucm91dGVyTnVtYmVyID49IG5leHRSb3V0ZXJOdW1iZXIpIHtcbiAgICAgIG5leHRSb3V0ZXJOdW1iZXIgPSBub2RlLnJvdXRlck51bWJlciArIDE7XG4gICAgfVxuICB9KTtcblxuICB2YXIgZW50aXR5ID0gbmV3IE5ldFNpbVJvdXRlck5vZGUoc2hhcmQsIHsgcm91dGVyTnVtYmVyOiBuZXh0Um91dGVyTnVtYmVyIH0pO1xuICBlbnRpdHkuZ2V0VGFibGUoKS5jcmVhdGUoZW50aXR5LmJ1aWxkUm93KCksIGZ1bmN0aW9uIChlcnIsIHJvdykge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIG9uQ29tcGxldGUoZXJyLCBudWxsKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgb25Db21wbGV0ZShudWxsLCBuZXcgTmV0U2ltUm91dGVyTm9kZShzaGFyZCwgcm93KSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBTdGF0aWMgYXN5bmMgcmV0cmlldmFsIG1ldGhvZC4gIFNlZSBOZXRTaW1FbnRpdHkuZ2V0KCkuXG4gKiBAcGFyYW0geyFudW1iZXJ9IHJvdXRlcklEIC0gVGhlIHJvdyBJRCBmb3IgdGhlIGVudGl0eSB5b3UnZCBsaWtlIHRvIGZpbmQuXG4gKiBAcGFyYW0geyFOZXRTaW1TaGFyZH0gc2hhcmRcbiAqIEBwYXJhbSB7IU5vZGVTdHlsZUNhbGxiYWNrfSBvbkNvbXBsZXRlIC0gTWV0aG9kIHRoYXQgd2lsbCBiZSBnaXZlbiB0aGVcbiAqICAgICAgICBmb3VuZCBlbnRpdHksIG9yIG51bGwgaWYgZW50aXR5IHNlYXJjaCBmYWlsZWQuXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUuZ2V0ID0gZnVuY3Rpb24gKHJvdXRlcklELCBzaGFyZCwgb25Db21wbGV0ZSkge1xuICBOZXRTaW1FbnRpdHkuZ2V0KE5ldFNpbVJvdXRlck5vZGUsIHJvdXRlcklELCBzaGFyZCwgb25Db21wbGV0ZSk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFJvdXRlclJvd1xuICogQHByb3BlcnR5IHtudW1iZXJ9IGNyZWF0aW9uVGltZSAtIFVuaXggdGltZXN0YW1wIChsb2NhbClcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBiYW5kd2lkdGggLSBSb3V0ZXIgbWF4IHRyYW5zbWlzc2lvbi9wcm9jZXNzaW5nIHJhdGVcbiAqICAgICAgICAgICBpbiBiaXRzL3NlY29uZFxuICogQHByb3BlcnR5IHtudW1iZXJ9IG1lbW9yeSAtIFJvdXRlciBtYXggcXVldWUgY2FwYWNpdHkgaW4gYml0c1xuICogQHByb3BlcnR5IHtEbnNNb2RlfSBkbnNNb2RlIC0gQ3VycmVudCBETlMgbW9kZSBmb3IgdGhlIGxvY2FsIG5ldHdvcmtcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkbnNOb2RlSUQgLSBFbnRpdHkgSUQgb2YgdGhlIGN1cnJlbnQgRE5TIG5vZGUgaW4gdGhlXG4gKiAgICAgICAgICAgbG9jYWwgbmV0d29yay5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSByYW5kb21Ecm9wQ2hhbmNlIC0gT2RkcyAoMC0xKSB0aGF0IGEgcGFja2V0IGJlaW5nIHJvdXRlZFxuICogICAgICAgICAgIHdpbGwgYmUgZHJvcHBlZCBmb3Igbm8gcmVhc29uLlxuICovXG5cbi8qKlxuICogQnVpbGQgdGFibGUgcm93IGZvciB0aGlzIG5vZGUuXG4gKiBAcmV0dXJucyB7Um91dGVyUm93fVxuICogQHByaXZhdGVcbiAqIEBvdmVycmlkZVxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5idWlsZFJvdyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHV0aWxzLmV4dGVuZChcbiAgICAgIE5ldFNpbVJvdXRlck5vZGUuc3VwZXJQcm90b3R5cGUuYnVpbGRSb3cuY2FsbCh0aGlzKSxcbiAgICAgIHtcbiAgICAgICAgcm91dGVyTnVtYmVyOiB0aGlzLnJvdXRlck51bWJlcixcbiAgICAgICAgY3JlYXRpb25UaW1lOiB0aGlzLmNyZWF0aW9uVGltZSxcbiAgICAgICAgYmFuZHdpZHRoOiBzZXJpYWxpemVOdW1iZXIodGhpcy5iYW5kd2lkdGgpLFxuICAgICAgICBtZW1vcnk6IHNlcmlhbGl6ZU51bWJlcih0aGlzLm1lbW9yeSksXG4gICAgICAgIGRuc01vZGU6IHRoaXMuZG5zTW9kZSxcbiAgICAgICAgZG5zTm9kZUlEOiB0aGlzLmRuc05vZGVJRCxcbiAgICAgICAgcmFuZG9tRHJvcENoYW5jZTogdGhpcy5yYW5kb21Ecm9wQ2hhbmNlXG4gICAgICB9XG4gICk7XG59O1xuXG4vKipcbiAqIExvYWQgc3RhdGUgZnJvbSByZW1vdGVSb3cgaW50byBsb2NhbCBtb2RlbCwgdGhlbiBub3RpZnkgYW55dGhpbmcgb2JzZXJ2aW5nXG4gKiB1cyB0aGF0IHdlJ3ZlIGNoYW5nZWQuXG4gKiBAcGFyYW0ge1JvdXRlclJvd30gcmVtb3RlUm93XG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5vbk15U3RhdGVDaGFuZ2VfID0gZnVuY3Rpb24gKHJlbW90ZVJvdykge1xuICB0aGlzLnJvdXRlck51bWJlciA9IHJlbW90ZVJvdy5yb3V0ZXJOdW1iZXI7XG4gIHRoaXMuY3JlYXRpb25UaW1lID0gcmVtb3RlUm93LmNyZWF0aW9uVGltZTtcbiAgdGhpcy5iYW5kd2lkdGggPSBkZXNlcmlhbGl6ZU51bWJlcihyZW1vdGVSb3cuYmFuZHdpZHRoKTtcbiAgdGhpcy5tZW1vcnkgPSBkZXNlcmlhbGl6ZU51bWJlcihyZW1vdGVSb3cubWVtb3J5KTtcbiAgdGhpcy5kbnNNb2RlID0gcmVtb3RlUm93LmRuc01vZGU7XG4gIHRoaXMuZG5zTm9kZUlEID0gcmVtb3RlUm93LmRuc05vZGVJRDtcbiAgdGhpcy5yYW5kb21Ecm9wQ2hhbmNlID0gcmVtb3RlUm93LnJhbmRvbURyb3BDaGFuY2U7XG4gIHRoaXMuc3RhdGVDaGFuZ2Uubm90aWZ5T2JzZXJ2ZXJzKHRoaXMpO1xufTtcblxuLyoqXG4gKiBQZXJmb3JtcyBxdWV1ZWQgcm91dGluZyBhbmQgRE5TIG9wZXJhdGlvbnMuXG4gKiBAcGFyYW0ge1J1bkxvb3AuQ2xvY2t9IGNsb2NrXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLnRpY2sgPSBmdW5jdGlvbiAoY2xvY2spIHtcbiAgdGhpcy5zaW11bGF0aW9uVGltZV8gPSBjbG9jay50aW1lO1xuICB0aGlzLnJvdXRlT3ZlcmR1ZU1lc3NhZ2VzXyhjbG9jayk7XG4gIGlmICh0aGlzLmRuc01vZGUgPT09IERuc01vZGUuQVVUT01BVElDKSB7XG4gICAgdGhpcy50aWNrQXV0b0Ruc18oY2xvY2spO1xuICB9XG59O1xuXG4vKipcbiAqIFRoaXMgbmFtZSBpcyBhIGJpdCBvZiBhIG1pc25vbWVyLCBidXQgaXQncyBtZW1vcmFibGU7IHdlIGFjdHVhbGx5IHJvdXRlXG4gKiBhbGwgbWVzc2FnZXMgdGhhdCBhcmUgRFVFIG9yIE9WRVJEVUUuXG4gKiBAcGFyYW0ge1J1bkxvb3AuQ2xvY2t9IGNsb2NrXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5yb3V0ZU92ZXJkdWVNZXNzYWdlc18gPSBmdW5jdGlvbiAoY2xvY2spIHtcbiAgaWYgKHRoaXMuaXNSb3V0ZXJQcm9jZXNzaW5nXykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFNlcGFyYXRlIG91dCBtZXNzYWdlcyB3aG9zZSBzY2hlZHVsZWQgdGltZSBoYXMgYXJyaXZlZCBvciBpcyBwYXN0LlxuICAvLyBGbGFnIHRoZW0gc28gd2UgY2FuIHJlbW92ZSB0aGVtIGxhdGVyLlxuICB2YXIgcmVhZHlTY2hlZHVsZU1lc3NhZ2VzID0gW107XG4gIHZhciBleHBpcmVkU2NoZWR1bGVNZXNzYWdlcyA9IFtdO1xuICB0aGlzLmxvY2FsUm91dGluZ1NjaGVkdWxlXy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaWYgKGNsb2NrLnRpbWUgPj0gaXRlbS5jb21wbGV0aW9uVGltZSkge1xuICAgICAgaXRlbS5iZWluZ1JvdXRlZCA9IHRydWU7XG4gICAgICByZWFkeVNjaGVkdWxlTWVzc2FnZXMucHVzaChpdGVtLm1lc3NhZ2UpO1xuICAgIH0gZWxzZSBpZiAoY2xvY2sudGltZSA+PSBpdGVtLmV4cGlyYXRpb25UaW1lKSB7XG4gICAgICBpdGVtLmJlaW5nUm91dGVkID0gdHJ1ZTtcbiAgICAgIGV4cGlyZWRTY2hlZHVsZU1lc3NhZ2VzLnB1c2goaXRlbS5tZXNzYWdlKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIElmIG5vIG1lc3NhZ2VzIGFyZSByZWFkeSwgd2UncmUgZG9uZS5cbiAgaWYgKHJlYWR5U2NoZWR1bGVNZXNzYWdlcy5sZW5ndGggKyBleHBpcmVkU2NoZWR1bGVNZXNzYWdlcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGaXJzdCwgcmVtb3ZlIHRoZSBleHBpcmVkIGl0ZW1zLiAgVGhleSBqdXN0IHNpbGVudGx5IHZhbmlzaFxuICB0aGlzLmlzUm91dGVyUHJvY2Vzc2luZ18gPSB0cnVlO1xuICBOZXRTaW1FbnRpdHkuZGVzdHJveUVudGl0aWVzKGV4cGlyZWRTY2hlZHVsZU1lc3NhZ2VzLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAvLyBOZXh0LCBwcm9jZXNzIHRoZSBtZXNzYWdlcyB0aGF0IGFyZSByZWFkeSBmb3Igcm91dGluZ1xuICAgIHRoaXMucm91dGVNZXNzYWdlc18ocmVhZHlTY2hlZHVsZU1lc3NhZ2VzLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgIC8vIEZpbmFsbHksIHJlbW92ZSBhbGwgdGhlIHNjaGVkdWxlIGVudHJpZXMgdGhhdCB3ZSBmbGFnZ2VkIGVhcmxpZXJcbiAgICAgIHRoaXMubG9jYWxSb3V0aW5nU2NoZWR1bGVfID0gdGhpcy5sb2NhbFJvdXRpbmdTY2hlZHVsZV8uZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiAhaXRlbS5iZWluZ1JvdXRlZDtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5pc1JvdXRlclByb2Nlc3NpbmdfID0gZmFsc2U7XG5cbiAgICB9LmJpbmQodGhpcykpO1xuICB9LmJpbmQodGhpcykpO1xufTtcblxuLyoqXG4gKiBFeGFtaW5lIHRoZSBxdWV1ZSwgYW5kIGFkZC9hZGp1c3Qgc2NoZWR1bGUgZW50cmllcyBmb3IgcGFja2V0cyB0aGF0XG4gKiBzaG91bGQgYmUgaGFuZGxlZCBieSB0aGUgbG9jYWwgc2ltdWxhdGlvbi4gIElmIGEgcGFja2V0IGhhcyBubyBlbnRyeSxcbiAqIGl0IHNob3VsZCBiZSBhZGRlZCB0byB0aGUgc2NoZWR1bGUuICBJZiBpdCBkb2VzIGFuZCB3ZSBjYW4gc2VlIHRoYXQgaXRzXG4gKiBzY2hlZHVsZWQgY29tcGxldGlvbiB0aW1lIGlzIHRvbyBmYXIgaW4gdGhlIGZ1dHVyZSwgd2Ugc2hvdWxkIG1vdmUgaXQgdXAuXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLnJlY2FsY3VsYXRlU2NoZWR1bGUgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRvIGNhbGN1bGF0ZSBvdXIgc2NoZWR1bGUsIHdlIGtlZXAgYSByb2xsaW5nIFwiUGVzc2ltaXN0aWMgY29tcGxldGlvbiB0aW1lXCJcbiAgLy8gYXMgd2Ugd2FsayBkb3duIHRoZSBxdWV1ZS4gIFRoaXMgXCJwZXNzaW1pc3RpYyB0aW1lXCIgaXMgd2hlbiB0aGUgcGFja2V0XG4gIC8vIHdvdWxkIGZpbmlzaCBwcm9jZXNzaW5nLCBhc3N1bWluZyBhbGwgb2YgdGhlIHBhY2tldHMgYWhlYWQgb2YgaXQgaW4gdGhlXG4gIC8vIHF1ZXVlIG11c3QgYmUgcHJvY2Vzc2VkIGZpcnN0IGFuZCB0aGUgZmlyc3QgcGFja2V0IGluIHRoZSBxdWV1ZSBpcyBqdXN0XG4gIC8vIHN0YXJ0aW5nIHRvIHByb2Nlc3Mgbm93LiAgV2UgZG8gdGhpcyBiZWNhdXNlIHRoZSBmaXJzdCBwYWNrZXQgbWlnaHQgYmVcbiAgLy8gb3duZWQgYnkgYSByZW1vdGUgY2xpZW50LCBzbyB3ZSB3b24ndCBoYXZlIHBhcnRpYWwgcHJvZ3Jlc3MgaW5mb3JtYXRpb25cbiAgLy8gb24gaXQuXG4gIC8vXG4gIC8vIFRodXMsIHRoZSBwZXNzaW1pc3RpYyB0aW1lIGlzIHRoZSBfbGF0ZXN0XyB3ZSB3b3VsZCBleHBlY3QgdGhlIHJvdXRlclxuICAvLyB0byBiZSBkb25lIHByb2Nlc3NpbmcgdGhlIHBhY2tldCBnaXZlbiB0aGUgY3VycmVudCBiYW5kd2lkdGggc2V0dGluZyxcbiAgLy8gaWYgdGhlIHJvdXRlciB3YXMgYW4gYWN0dWFsIGhhcmR3YXJlIGRldmljZS5cbiAgLy9cbiAgLy8gVGhlIGVzdGltYXRlIGlzIGFjdHVhbGx5IF9vcHRpbWlzdGljXyBpbiB0aGUgc2Vuc2UgdGhhdCBpdCBkb2Vzbid0IHdhaXRcbiAgLy8gZm9yIG5vdGlmaWNhdGlvbiB0aGF0IGEgcmVtb3RlbHktc2ltdWxhdGVkIHBhY2tldCBpcyBkb25lIGJlZm9yZVxuICAvLyBwcm9jZXNzaW5nIGEgbG9jYWxseS1zaW11bGF0ZWQgb25lLiAgV2UncmUgbWFraW5nIG91ciBiZXN0IGd1ZXNzIGFib3V0XG4gIC8vIGhvdyB0aGUgcGFja2V0cyB3b3VsZCBiZSB0aW1lZCB3aXRoIG5vIGxhdGVuY3kgaW50cm9kdWNpbmcgZ2FwcyBiZXR3ZWVuXG4gIC8vIHBhY2tldHMuXG4gIC8vXG4gIC8vIElmIHRoZSBjbGllbnQgc2ltdWxhdGluZyB0aGUgcGFja2V0IGF0IHRoZSBoZWFkIG9mIHRoZSBxdWV1ZSBkaXNjb25uZWN0c1xuICAvLyBpdCB3b24ndCBibG9jayBvdGhlciBwYWNrZXRzIGZyb20gYmVpbmcgc2VudCwgYnV0IGl0IHdpbGwgaW5jcmVhc2UgdGhlaXJcbiAgLy8gXCJwZXNzaW1pc3RpYyBlc3RpbWF0ZXNcIiB1bnRpbCB0aGF0IG9ycGhhbmVkIHBhY2tldCBnZXRzIGNsZWFuZWQgdXAuXG5cbiAgdmFyIHF1ZXVlU2l6ZUluQml0cyA9IDA7XG4gIHZhciBwZXNzaW1pc3RpY0NvbXBsZXRpb25UaW1lID0gdGhpcy5zaW11bGF0aW9uVGltZV87XG4gIHZhciBxdWV1ZWRNZXNzYWdlO1xuICB2YXIgcHJvY2Vzc2luZ0R1cmF0aW9uO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucm91dGVyUXVldWVDYWNoZV8ubGVuZ3RoOyBpKyspIHtcbiAgICBxdWV1ZWRNZXNzYWdlID0gdGhpcy5yb3V0ZXJRdWV1ZUNhY2hlX1tpXTtcbiAgICBxdWV1ZVNpemVJbkJpdHMgKz0gcXVldWVkTWVzc2FnZS5wYXlsb2FkLmxlbmd0aDtcbiAgICBwcm9jZXNzaW5nRHVyYXRpb24gPSB0aGlzLmNhbGN1bGF0ZVByb2Nlc3NpbmdEdXJhdGlvbkZvck1lc3NhZ2VfKHF1ZXVlZE1lc3NhZ2UpO1xuICAgIHBlc3NpbWlzdGljQ29tcGxldGlvblRpbWUgKz0gcHJvY2Vzc2luZ0R1cmF0aW9uO1xuXG4gICAgLy8gRG9uJ3Qgc2NoZWR1bGUgYmV5b25kIG1lbW9yeSBjYXBhY2l0eTsgd2UncmUgZ29pbmcgdG8gZHJvcCB0aG9zZSBwYWNrZXRzXG4gICAgaWYgKHRoaXMubG9jYWxTaW11bGF0aW9uT3duc01lc3NhZ2VfKHF1ZXVlZE1lc3NhZ2UpICYmXG4gICAgICAgIHF1ZXVlU2l6ZUluQml0cyA8PSB0aGlzLm1lbW9yeSkge1xuICAgICAgdGhpcy5zY2hlZHVsZVJvdXRpbmdGb3JNZXNzYWdlKHF1ZXVlZE1lc3NhZ2UsIHBlc3NpbWlzdGljQ29tcGxldGlvblRpbWUpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDaGVja3MgdGhlIHNjaGVkdWxlIGZvciB0aGUgcXVldWVkIHJvdy4gIElmIG5vIHNjaGVkdWxlIGVudHJ5IGV4aXN0cywgYWRkc1xuICogYSBuZXcgb25lIHdpdGggdGhlIHByb3ZpZGVkIHBlc3NpbWlzdGljIGNvbXBsZXRpb24gdGltZS4gIElmIGl0J3MgYWxyZWFkeVxuICogc2NoZWR1bGVkIGFuZCB0aGUgcGVzc2ltaXN0aWMgdGltZSBnaXZlbiBpcyBCRVRURVIgdGhhbiB0aGUgcHJldmlvdXNseVxuICogc2NoZWR1bGVkIGNvbXBsZXRpb24gdGltZSwgd2lsbCB1cGRhdGUgdGhlIHNjaGVkdWxlIGVudHJ5IHdpdGggdGhlIGJldHRlclxuICogdGltZS5cbiAqIEBwYXJhbSB7TmV0U2ltTWVzc2FnZX0gcXVldWVkTWVzc2FnZVxuICogQHBhcmFtIHtudW1iZXJ9IHBlc3NpbWlzdGljQ29tcGxldGlvblRpbWUgLSBpbiBsb2NhbCBzaW11bGF0aW9uIHRpbWVcbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUuc2NoZWR1bGVSb3V0aW5nRm9yTWVzc2FnZSA9IGZ1bmN0aW9uIChxdWV1ZWRNZXNzYWdlLFxuICAgIHBlc3NpbWlzdGljQ29tcGxldGlvblRpbWUpIHtcbiAgdmFyIHNjaGVkdWxlSXRlbSA9IF8uZmluZCh0aGlzLmxvY2FsUm91dGluZ1NjaGVkdWxlXywgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbS5tZXNzYWdlLmVudGl0eUlEID09PSBxdWV1ZWRNZXNzYWdlLmVudGl0eUlEO1xuICB9KTtcblxuICBpZiAoc2NoZWR1bGVJdGVtKSB7XG4gICAgLy8gV2hlbiBvdXIgcGVzc2ltaXN0aWMgdGltZSBpcyBiZXR0ZXIgdGhhbiBvdXIgc2NoZWR1bGVkIHRpbWUgd2VcbiAgICAvLyBzaG91bGQgdXBkYXRlIHRoZSBzY2hlZHVsZWQgdGltZS4gIFRoaXMgY2FuIGhhcHBlbiB3aGVuIG1lc3NhZ2VzXG4gICAgLy8gZWFybGllciBpbiB0aGUgcXVldWUgZXhwaXJlLCBvciBhcmUgb3RoZXJ3aXNlIHJlbW92ZWQgZWFybGllciB0aGFuXG4gICAgLy8gdGhlaXIgc2l6ZSBsZWQgdXMgdG8gZXhwZWN0LlxuICAgIGlmIChwZXNzaW1pc3RpY0NvbXBsZXRpb25UaW1lIDwgc2NoZWR1bGVJdGVtLmNvbXBsZXRpb25UaW1lKSB7XG4gICAgICBzY2hlZHVsZUl0ZW0uY29tcGxldGlvblRpbWUgPSBwZXNzaW1pc3RpY0NvbXBsZXRpb25UaW1lO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJZiB0aGUgaXRlbSBkb2Vzbid0IGhhdmUgYSBzY2hlZHVsZSBlbnRyeSBhdCBhbGwsIGFkZCBpdFxuICAgIHRoaXMuYWRkTWVzc2FnZVRvU2NoZWR1bGVfKHF1ZXVlZE1lc3NhZ2UsIHBlc3NpbWlzdGljQ29tcGxldGlvblRpbWUpO1xuICB9XG59O1xuXG4vKipcbiAqIEFkZHMgYSBuZXcgZW50cnkgdG8gdGhlIHJvdXRpbmcgc2NoZWR1bGUsIHdpdGggYSBkZWZhdWx0IGV4cGlyYXRpb24gdGltZS5cbiAqIEBwYXJhbSB7TmV0U2ltTWVzc2FnZX0gcXVldWVkTWVzc2FnZSAtIG1lc3NhZ2UgdG8gcm91dGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb21wbGV0aW9uVGltZSAtIGluIHNpbXVsYXRpb24gdGltZVxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUuYWRkTWVzc2FnZVRvU2NoZWR1bGVfID0gZnVuY3Rpb24gKHF1ZXVlZE1lc3NhZ2UsXG4gICAgY29tcGxldGlvblRpbWUpIHtcbiAgdGhpcy5sb2NhbFJvdXRpbmdTY2hlZHVsZV8ucHVzaCh7XG4gICAgbWVzc2FnZTogcXVldWVkTWVzc2FnZSxcbiAgICBjb21wbGV0aW9uVGltZTogY29tcGxldGlvblRpbWUsXG4gICAgZXhwaXJhdGlvblRpbWU6IHRoaXMuc2ltdWxhdGlvblRpbWVfICsgUEFDS0VUX01BWF9MSUZFVElNRV9NUyxcbiAgICBiZWluZ1JvdXRlZDogZmFsc2VcbiAgfSk7XG59O1xuXG4vKipcbiAqIFRha2VzIGEgbWVzc2FnZSBvdXQgb2YgdGhlIHJvdXRpbmcgc2NoZWR1bGUuICBNb2RpZmllcyB0aGUgc2NoZWR1bGUsXG4gKiBzaG91bGQgbm90IGJlIGNhbGxlZCB3aGlsZSBpdGVyYXRpbmcgdGhyb3VnaCB0aGUgc2NoZWR1bGUhXG4gKiBEb2VzIG5vdGhpbmcgaWYgdGhlIG1lc3NhZ2UgaXNuJ3QgcHJlc2VudCBpbiB0aGUgc2NoZWR1bGUuXG4gKiBAcGFyYW0ge05ldFNpbU1lc3NhZ2V9IHF1ZXVlZE1lc3NhZ2VcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLnJlbW92ZU1lc3NhZ2VGcm9tU2NoZWR1bGVfID0gZnVuY3Rpb24gKHF1ZXVlZE1lc3NhZ2UpIHtcbiAgdmFyIHNjaGVkdWxlSWR4O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubG9jYWxSb3V0aW5nU2NoZWR1bGVfLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHRoaXMubG9jYWxSb3V0aW5nU2NoZWR1bGVfW2ldLm1lc3NhZ2UuZW50aXR5SUQgPT09IHF1ZXVlZE1lc3NhZ2UuZW50aXR5SUQpIHtcbiAgICAgIHNjaGVkdWxlSWR4ID0gaTtcbiAgICB9XG4gIH1cbiAgaWYgKHNjaGVkdWxlSWR4ICE9PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLmxvY2FsUm91dGluZ1NjaGVkdWxlXy5zcGxpY2Uoc2NoZWR1bGVJZHgsIDEpO1xuICB9XG59O1xuXG4vKipcbiAqIExldHMgdGhlIGF1dG8tRE5TIHBhcnQgb2YgdGhlIHJvdXRlciBzaW11bGF0aW9uIGhhbmRsZSBpdHMgcmVxdWVzdHMuXG4gKiBGb3Igbm93LCBhdXRvLUROUyBjYW4gZG8gXCJiYXRjaFwiIHByb2Nlc3NpbmcsIG5vIHRocm91Z2hwdXQgbGltaXRzLlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUudGlja0F1dG9EbnNfID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5pc0F1dG9EbnNQcm9jZXNzaW5nXykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZpbHRlciBETlMgcXVldWUgZG93biB0byByZXF1ZXN0cyB0aGUgbG9jYWwgc2ltdWxhdGlvbiBzaG91bGQgaGFuZGxlLlxuICB2YXIgbG9jYWxTaW1EbnNSZXF1ZXN0cyA9IHRoaXMuYXV0b0Ruc1F1ZXVlX1xuICAgICAgLmZpbHRlcih0aGlzLmxvY2FsU2ltdWxhdGlvbk93bnNNZXNzYWdlXy5iaW5kKHRoaXMpKTtcblxuICAvLyBJZiB0aGVyZSdzIG5vdGhpbmcgd2UgY2FuIHByb2Nlc3MsIHdlJ3JlIGRvbmUuXG4gIGlmIChsb2NhbFNpbURuc1JlcXVlc3RzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFByb2Nlc3MgRE5TIHJlcXVlc3RzXG4gIHRoaXMuaXNBdXRvRG5zUHJvY2Vzc2luZ18gPSB0cnVlO1xuICB0aGlzLnByb2Nlc3NBdXRvRG5zUmVxdWVzdHNfKGxvY2FsU2ltRG5zUmVxdWVzdHMsIGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmlzQXV0b0Ruc1Byb2Nlc3NpbmdfID0gZmFsc2U7XG4gIH0uYmluZCh0aGlzKSk7XG59O1xuXG4vKiogQGluaGVyaXRkb2MgKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLmdldERpc3BsYXlOYW1lID0gZnVuY3Rpb24gKCkge1xuICBpZiAoTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpLmJyb2FkY2FzdE1vZGUpIHtcbiAgICByZXR1cm4gaTE4bi5yb29tTnVtYmVyWCh7XG4gICAgICB4OiB0aGlzLmdldFJvdXRlck51bWJlcigpXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gaTE4bi5yb3V0ZXJOdW1iZXJYKHtcbiAgICB4OiB0aGlzLmdldFJvdXRlck51bWJlcigpXG4gIH0pO1xufTtcblxuLyoqXG4gKiBHaXZlbiB0aGUgbGV2ZWwgYWRkcmVzcyBmb3JtYXQgc3RyaW5nIChlLmcuIFwiNC40LjQuNFwiKSB3aGljaCBpdCBwdWxscyBmcm9tXG4gKiBnbG9iYWxzLCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZSBwYXJzZWQgbGVuZ3RocyBvZiBlYWNoIGZvcm1hdCBwYXJ0IGluIG9yZGVyXG4gKiAoZS5nLiBbNCwgNCwgNCwgNF0pLlxuICogQHJldHVybnMge251bWJlcltdfVxuICovXG5mdW5jdGlvbiBnZXRBZGRyZXNzRm9ybWF0UGFydHMoKSB7XG4gIHJldHVybiBOZXRTaW1HbG9iYWxzXG4gICAgICAuZ2V0TGV2ZWxDb25maWcoKVxuICAgICAgLmFkZHJlc3NGb3JtYXRcbiAgICAgIC5zcGxpdCgvXFxEKy8pXG4gICAgICAuZmlsdGVyKGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgICAgIHJldHVybiBwYXJ0Lmxlbmd0aCA+IDA7XG4gICAgICB9KVxuICAgICAgLm1hcChmdW5jdGlvbiAocGFydCkge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQocGFydCwgMTApO1xuICAgICAgfSk7XG59XG5cbi8qKlxuICogSGVscGVyIHRoYXQgcHJldmVudHMgdGhlIHJvdXRlcidzIGRpc3BsYXkgbnVtYmVyIG9yIGFkZHJlc3MgZnJvbSBiZWluZyBiZXlvbmRcbiAqIHRoZSByZXByZXNlbnRhYmxlIHNpemUgb2YgdGhlIHRoZSByb3V0ZXIgcGFydCBpbiB0aGUgYWRkcmVzcyBmb3JtYXQgKGlmXG4gKiB0d28tcGFydCBhZGRyZXNzZXMgYXJlIGJlaW5nIHVzZWQpLlxuICogRG9lcyBub3QgZG8gYW55dGhpbmcgc3BlY2lhbCB0byBwcmV2ZW50IGNvbGxpc2lvbnMsIGp1c3QgcmV0dXJucyBlbnRpdHlJRFxuICogbW9kdWxvIHRoZSBhc3NpZ25hYmxlIGFkZHJlc3Mgc3BhY2UgLSBidXQgdGhpcyB3aWxsIGJlIGJldHRlciB0aGFuIGhhdmluZ1xuICogbm9uLWNvbmZsaWN0aW5nIHJvdXRlcnMgeW91IGNhbiBuZXZlciBhZGRyZXNzIGF0IGFsbC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLmdldFJvdXRlck51bWJlciA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gSWYgdHdvIG9yIG1vcmUgcGFydHMsIGxpbWl0IG91ciByb3V0ZXIgbnVtYmVyIHRvIHRoZSBtYXhpbXVtIHZhbHVlIG9mXG4gIC8vIHRoZSBzZWNvbmQtdG8tbGFzdCBhZGRyZXNzIHBhcnQuXG4gIHZhciBhZGRyZXNzRm9ybWF0UGFydHMgPSBnZXRBZGRyZXNzRm9ybWF0UGFydHMoKTtcbiAgaWYgKGFkZHJlc3NGb3JtYXRQYXJ0cy5sZW5ndGggPj0gMikge1xuICAgIHZhciBhc3NpZ25hYmxlQWRkcmVzc1ZhbHVlcyA9IE1hdGgucG93KDIsIGFkZHJlc3NGb3JtYXRQYXJ0cy5yZXZlcnNlKClbMV0pO1xuICAgIHJldHVybiB0aGlzLnJvdXRlck51bWJlciAlIGFzc2lnbmFibGVBZGRyZXNzVmFsdWVzO1xuICB9XG4gIHJldHVybiB0aGlzLnJvdXRlck51bWJlcjtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBtYXhpbXVtIG51bWJlciBvZiByb3V0ZXJzIHRoYXQgd2lsbCBiZSBhbGxvd2VkIG9uIHRoZSBzaGFyZC5cbiAqIEluIG1vc3QgbGV2ZWxzIHRoaXMgaXMgYSBzdHJpY3QgZ2xvYmFsIHZhbHVlIChwcm9iYWJseSAyMCkuXG4gKiBJbiBsZXZlbHMgdXNpbmcgYW4gYWRkcmVzcyBmb3JtYXQgd2l0aCB0d28gb3IgbW9yZSBwYXJ0cyB0aGUgc2Vjb25kLXRvLWxhc3RcbiAqIHBhcnQgZGV0ZXJtaW5lcyB0aGUgYWRkcmVzc2FibGUgc3BhY2UgZm9yIHJvdXRlcnMsIGFuZCB0aGUgbWF4IHJvdXRlcnNcbiAqIHdpbGwgYmUgdGhlIG1pbmltdW0gb2YgdGhlIGdsb2JhbCBtYXggYW5kIHRoZSBhZGRyZXNzYWJsZSBzcGFjZS5cbiAqXG4gKiBAZXhhbXBsZSBJZiB0aGUgZ2xvYmFsIG1heCByb3V0ZXJzIGlzIDIwLCBidXQgdGhlIGFkZHJlc3MgZm9ybWF0IGlzIDQuNCxcbiAqICAgICAgICAgIHdlIGNhbiBvbmx5IGFkZHJlc3MgMTYgcm91dGVycyAobGVzcyB0aGFuIDIwKSBzbyAxNiBpcyBvdXIgbWF4XG4gKiAgICAgICAgICByb3V0ZXJzIHBlciBzaGFyZCB2YWx1ZS5cbiAqXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLmdldE1heGltdW1Sb3V0ZXJzUGVyU2hhcmQgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIElmIHR3byBvciBtb3JlIHBhcnRzLCBsaW1pdCBvdXIgcm91dGVycyB0byB0aGUgbWF4aW11bSB2YWx1ZSBvZlxuICAvLyB0aGUgc2Vjb25kLXRvLWxhc3QgYWRkcmVzcyBwYXJ0LlxuICB2YXIgYWRkcmVzc0Zvcm1hdFBhcnRzID0gZ2V0QWRkcmVzc0Zvcm1hdFBhcnRzKCk7XG4gIGlmIChhZGRyZXNzRm9ybWF0UGFydHMubGVuZ3RoID49IDIpIHtcbiAgICByZXR1cm4gTWF0aC5taW4oTmV0U2ltR2xvYmFscy5nZXRHbG9iYWxNYXhSb3V0ZXJzKCksXG4gICAgICAgIE1hdGgucG93KDIsIGFkZHJlc3NGb3JtYXRQYXJ0cy5yZXZlcnNlKClbMV0pKTtcbiAgfVxuICByZXR1cm4gTmV0U2ltR2xvYmFscy5nZXRHbG9iYWxNYXhSb3V0ZXJzKCk7XG59O1xuXG4vKipcbiAqIEdldCBub2RlJ3Mgb3duIGFkZHJlc3MsIHdoaWNoIGlzIGRlcGVuZGVudCBvbiB0aGUgYWRkcmVzcyBmb3JtYXRcbiAqIGNvbmZpZ3VyZWQgaW4gdGhlIGxldmVsIGJ1dCBmb3Igcm91dGVycyBhbHdheXMgZW5kcyBpbiB6ZXJvLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUuZ2V0QWRkcmVzcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMubWFrZUxvY2FsTmV0d29ya0FkZHJlc3NfKFJPVVRFUl9MT0NBTF9BRERSRVNTKTtcbn07XG5cbi8qKlxuICogR2V0IGxvY2FsIG5ldHdvcmsncyBhdXRvLWRucyBhZGRyZXNzLCB3aGljaCBpcyBkZXBlbmRlbnQgb24gdGhlIGFkZHJlc3NcbiAqIGZvcm1hdCBjb25maWd1cmVkIGZvciB0aGUgbGV2ZWwgYnV0IHRoZSBsYXN0IHBhcnQgc2hvdWxkIGFsd2F5cyBiZSAxNS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLmdldEF1dG9EbnNBZGRyZXNzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5tYWtlTG9jYWxOZXR3b3JrQWRkcmVzc18oQVVUT19ETlNfUkVTRVJWRURfQUREUkVTUyk7XG59O1xuXG4vKipcbiAqIEdldCBub2RlJ3MgaG9zdG5hbWUsIGEgbW9kaWZpZWQgdmVyc2lvbiBvZiBpdHMgZGlzcGxheSBuYW1lLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqIEBvdmVycmlkZVxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5nZXRIb3N0bmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVXNlIHJlZ2V4IHRvIHN0cmlwIGFueXRoaW5nIHRoYXQncyBub3QgYSB3b3JkLWNoYXJhY3RlciBvciBhIGRpZ2l0XG4gIC8vIGZyb20gdGhlIG5vZGUncyBkaXNwbGF5IG5hbWUuICBGb3Igcm91dGVycywgd2UgZG9uJ3QgYXBwZW5kIHRoZSBub2RlIElEXG4gIC8vIGJlY2F1c2UgaXQncyBhbHJlYWR5IHBhcnQgb2YgdGhlIGRpc3BsYXkgbmFtZS5cbiAgcmV0dXJuIHRoaXMuZ2V0RGlzcGxheU5hbWUoKS5yZXBsYWNlKC9bXlxcd1xcZF0vZywgJycpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG4vKiogQGluaGVyaXRkb2MgKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLmdldE5vZGVUeXBlID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gTm9kZVR5cGUuUk9VVEVSO1xufTtcblxuLyoqIEBpbmhlcml0ZG9jICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5nZXRTdGF0dXMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsZXZlbENvbmZpZyA9IE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKTtcbiAgdmFyIGNvbm5lY3Rpb25Db3VudCA9IHRoaXMuY291bnRDb25uZWN0aW9ucygpO1xuICBpZiAoY29ubmVjdGlvbkNvdW50ID09PSAwKSB7XG4gICAgaWYgKGxldmVsQ29uZmlnLmJyb2FkY2FzdE1vZGUpIHtcbiAgICAgIHJldHVybiBpMThuLnJvb21TdGF0dXNOb0Nvbm5lY3Rpb25zKHtcbiAgICAgICAgbWF4aW11bUNsaWVudHM6IHRoaXMubWF4Q2xpZW50Q29ubmVjdGlvbnNfXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaTE4bi5yb3V0ZXJTdGF0dXNOb0Nvbm5lY3Rpb25zKHtcbiAgICAgIG1heGltdW1DbGllbnRzOiB0aGlzLm1heENsaWVudENvbm5lY3Rpb25zX1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGNvbm5lY3RlZE5vZGVOYW1lcyA9IHRoaXMuZ2V0Q29ubmVjdGVkTm9kZU5hbWVzXygpLmpvaW4oJywgJyk7XG4gIGlmIChjb25uZWN0aW9uQ291bnQgPj0gdGhpcy5tYXhDbGllbnRDb25uZWN0aW9uc18pIHtcbiAgICBpZiAobGV2ZWxDb25maWcuYnJvYWRjYXN0TW9kZSkge1xuICAgICAgcmV0dXJuIGkxOG4ucm9vbVN0YXR1c0Z1bGwoe1xuICAgICAgICBjb25uZWN0ZWRDbGllbnRzOiBjb25uZWN0ZWROb2RlTmFtZXNcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBpMThuLnJvdXRlclN0YXR1c0Z1bGwoe1xuICAgICAgY29ubmVjdGVkQ2xpZW50czogY29ubmVjdGVkTm9kZU5hbWVzXG4gICAgfSk7XG4gIH1cblxuICBpZiAobGV2ZWxDb25maWcuYnJvYWRjYXN0TW9kZSkge1xuICAgIHJldHVybiBpMThuLnJvb21TdGF0dXMoe1xuICAgICAgY29ubmVjdGVkQ2xpZW50czogY29ubmVjdGVkTm9kZU5hbWVzLFxuICAgICAgcmVtYWluaW5nU3BhY2U6ICh0aGlzLm1heENsaWVudENvbm5lY3Rpb25zXyAtIGNvbm5lY3Rpb25Db3VudClcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBpMThuLnJvdXRlclN0YXR1cyh7XG4gICAgY29ubmVjdGVkQ2xpZW50czogY29ubmVjdGVkTm9kZU5hbWVzLFxuICAgIHJlbWFpbmluZ1NwYWNlOiAodGhpcy5tYXhDbGllbnRDb25uZWN0aW9uc18gLSBjb25uZWN0aW9uQ291bnQpXG4gIH0pO1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7c3RyaW5nW119IHRoZSBuYW1lcyBvZiBhbGwgdGhlIG5vZGVzIGNvbm5lY3RlZCB0byB0aGlzIHJvdXRlci5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLmdldENvbm5lY3RlZE5vZGVOYW1lc18gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjYWNoZWROb2RlUm93cyA9IHRoaXMuc2hhcmRfLm5vZGVUYWJsZS5yZWFkQWxsKCk7XG4gIHJldHVybiB0aGlzLmdldENvbm5lY3Rpb25zKCkubWFwKGZ1bmN0aW9uICh3aXJlKSB7XG4gICAgdmFyIG5vZGVSb3cgPSBfLmZpbmQoY2FjaGVkTm9kZVJvd3MsIGZ1bmN0aW9uIChub2RlUm93KSB7XG4gICAgICByZXR1cm4gbm9kZVJvdy5pZCA9PT0gd2lyZS5sb2NhbE5vZGVJRDtcbiAgICB9KTtcbiAgICBpZiAobm9kZVJvdykge1xuICAgICAgcmV0dXJuIG5vZGVSb3cubmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIGkxOG4udW5rbm93bk5vZGUoKTtcbiAgfSk7XG59O1xuXG4vKiogQGluaGVyaXRkb2MgKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLmlzRnVsbCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gRGV0ZXJtaW5lIHN0YXR1cyBiYXNlZCBvbiBjYWNoZWQgd2lyZSBkYXRhXG4gIHZhciBjYWNoZWRXaXJlUm93cyA9IHRoaXMuc2hhcmRfLndpcmVUYWJsZS5yZWFkQWxsKCk7XG4gIHZhciBpbmNvbWluZ1dpcmVSb3dzID0gY2FjaGVkV2lyZVJvd3MuZmlsdGVyKGZ1bmN0aW9uICh3aXJlUm93KSB7XG4gICAgcmV0dXJuIHdpcmVSb3cucmVtb3RlTm9kZUlEID09PSB0aGlzLmVudGl0eUlEO1xuICB9LCB0aGlzKTtcblxuICByZXR1cm4gaW5jb21pbmdXaXJlUm93cy5sZW5ndGggPj0gdGhpcy5tYXhDbGllbnRDb25uZWN0aW9uc187XG59O1xuXG4vKipcbiAqIE1ha2VzIHN1cmUgdGhhdCB0aGUgZ2l2ZW4gc3BlY2lmaWNhdGlvbiBjb250YWlucyB0aGUgZmllbGRzIHRoYXQgdGhpc1xuICogcm91dGVyIG5lZWRzIHRvIGRvIGl0cyBqb2IuXG4gKiBAcGFyYW0ge1BhY2tldC5IZWFkZXJUeXBlW119IHBhY2tldFNwZWNcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLnZhbGlkYXRlUGFja2V0U3BlY18gPSBmdW5jdGlvbiAocGFja2V0U3BlYykge1xuICAvLyBUaGVyZSBhcmUgbm8gcmVxdWlyZW1lbnRzIGluIGJyb2FkY2FzdCBtb2RlXG4gIGlmIChOZXRTaW1HbG9iYWxzLmdldExldmVsQ29uZmlnKCkuYnJvYWRjYXN0TW9kZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFJlcXVpcmUgVE9fQUREUkVTUyBmb3Igcm91dGluZ1xuICBpZiAoIXBhY2tldFNwZWMuc29tZShmdW5jdGlvbiAoaGVhZGVyRmllbGQpIHtcbiAgICAgICAgcmV0dXJuIGhlYWRlckZpZWxkID09PSBQYWNrZXQuSGVhZGVyVHlwZS5UT19BRERSRVNTO1xuICAgICAgfSkpIHtcbiAgICBsb2dnZXIud2FybihcIlBhY2tldCBzcGVjaWZpY2F0aW9uIGRvZXMgbm90IGhhdmUgYSB0b0FkZHJlc3MgZmllbGQuXCIpO1xuICB9XG5cbiAgLy8gUmVxdWlyZSBGUk9NX0FERFJFU1MgZm9yIGF1dG8tRE5TIHRhc2tzXG4gIGlmICghcGFja2V0U3BlYy5zb21lKGZ1bmN0aW9uIChoZWFkZXJGaWVsZCkge1xuICAgICAgICByZXR1cm4gaGVhZGVyRmllbGQgPT09IFBhY2tldC5IZWFkZXJUeXBlLkZST01fQUREUkVTUztcbiAgICAgIH0pKSB7XG4gICAgbG9nZ2VyLndhcm4oXCJQYWNrZXQgc3BlY2lmaWNhdGlvbiBkb2VzIG5vdCBoYXZlIGEgZnJvbUFkZHJlc3MgZmllbGQuXCIpO1xuICB9XG59O1xuXG4vKipcbiAqIFB1dHMgdGhpcyByb3V0ZXIgY29udHJvbGxlciBpbnRvIGEgbW9kZSB3aGVyZSBpdCB3aWxsIG9ubHlcbiAqIHNpbXVsYXRlIGZvciBjb25uZWN0aW9uIGFuZCBtZXNzYWdlcyAtZnJvbS0gdGhlIGdpdmVuIG5vZGUuXG4gKiBAcGFyYW0geyFudW1iZXJ9IG5vZGVJRFxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5pbml0aWFsaXplU2ltdWxhdGlvbiA9IGZ1bmN0aW9uIChub2RlSUQpIHtcbiAgdGhpcy5zaW11bGF0ZUZvclNlbmRlcl8gPSBub2RlSUQ7XG4gIHRoaXMucGFja2V0U3BlY18gPSBOZXRTaW1HbG9iYWxzLmdldExldmVsQ29uZmlnKCkucm91dGVyRXhwZWN0c1BhY2tldEhlYWRlcjtcbiAgdGhpcy52YWxpZGF0ZVBhY2tldFNwZWNfKHRoaXMucGFja2V0U3BlY18pO1xuXG4gIGlmIChub2RlSUQgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBub2RlQ2hhbmdlRXZlbnQgPSB0aGlzLnNoYXJkXy5ub2RlVGFibGUudGFibGVDaGFuZ2U7XG4gICAgdmFyIG5vZGVDaGFuZ2VIYW5kbGVyID0gdGhpcy5vbk5vZGVUYWJsZUNoYW5nZV8uYmluZCh0aGlzKTtcbiAgICB0aGlzLm5vZGVDaGFuZ2VLZXlfID0gbm9kZUNoYW5nZUV2ZW50LnJlZ2lzdGVyKG5vZGVDaGFuZ2VIYW5kbGVyKTtcbiAgICBcbiAgICB2YXIgd2lyZUNoYW5nZUV2ZW50ID0gdGhpcy5zaGFyZF8ud2lyZVRhYmxlLnRhYmxlQ2hhbmdlO1xuICAgIHZhciB3aXJlQ2hhbmdlSGFuZGxlciA9IHRoaXMub25XaXJlVGFibGVDaGFuZ2VfLmJpbmQodGhpcyk7XG4gICAgdGhpcy53aXJlQ2hhbmdlS2V5XyA9IHdpcmVDaGFuZ2VFdmVudC5yZWdpc3Rlcih3aXJlQ2hhbmdlSGFuZGxlcik7XG5cbiAgICB2YXIgbG9nQ2hhbmdlRXZlbnQgPSB0aGlzLnNoYXJkXy5sb2dUYWJsZS50YWJsZUNoYW5nZTtcbiAgICB2YXIgbG9nQ2hhbmdlSGFuZGxlciA9IHRoaXMub25Mb2dUYWJsZUNoYW5nZV8uYmluZCh0aGlzKTtcbiAgICB0aGlzLmxvZ0NoYW5nZUtleV8gPSBsb2dDaGFuZ2VFdmVudC5yZWdpc3Rlcihsb2dDaGFuZ2VIYW5kbGVyKTtcblxuICAgIHZhciBuZXdNZXNzYWdlRXZlbnQgPSB0aGlzLnNoYXJkXy5tZXNzYWdlVGFibGUudGFibGVDaGFuZ2U7XG4gICAgdmFyIG5ld01lc3NhZ2VIYW5kbGVyID0gdGhpcy5vbk1lc3NhZ2VUYWJsZUNoYW5nZV8uYmluZCh0aGlzKTtcbiAgICB0aGlzLm5ld01lc3NhZ2VFdmVudEtleV8gPSBuZXdNZXNzYWdlRXZlbnQucmVnaXN0ZXIobmV3TWVzc2FnZUhhbmRsZXIpO1xuXG4gICAgLy8gUG9wdWxhdGUgcm91dGVyIHdpcmUgY2FjaGUgd2l0aCBpbml0aWFsIGRhdGFcbiAgICB0aGlzLm9uV2lyZVRhYmxlQ2hhbmdlXygpO1xuXG4gICAgLy8gUG9wdWxhdGUgcm91dGVyIGxvZyBjYWNoZSB3aXRoIGluaXRpYWwgZGF0YVxuICAgIHRoaXMub25Mb2dUYWJsZUNoYW5nZV8oKTtcbiAgfVxufTtcblxuLyoqXG4gKiBHaXZlcyB0aGUgc2ltdWxhdGluZyBub2RlIGEgY2hhbmNlIHRvIHVucmVnaXN0ZXIgZnJvbSBhbnl0aGluZyBpdFxuICogd2FzIG9ic2VydmluZy5cbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUuc3RvcFNpbXVsYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLm5vZGVDaGFuZ2VLZXlfICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgbm9kZUNoYW5nZUV2ZW50ID0gdGhpcy5zaGFyZF8ubm9kZVRhYmxlLnRhYmxlQ2hhbmdlO1xuICAgIG5vZGVDaGFuZ2VFdmVudC51bnJlZ2lzdGVyKHRoaXMubm9kZUNoYW5nZUtleV8pO1xuICAgIHRoaXMubm9kZUNoYW5nZUtleV8gPSB1bmRlZmluZWQ7XG4gIH1cbiAgXG4gIGlmICh0aGlzLndpcmVDaGFuZ2VLZXlfICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgd2lyZUNoYW5nZUV2ZW50ID0gdGhpcy5zaGFyZF8ud2lyZVRhYmxlLnRhYmxlQ2hhbmdlO1xuICAgIHdpcmVDaGFuZ2VFdmVudC51bnJlZ2lzdGVyKHRoaXMud2lyZUNoYW5nZUtleV8pO1xuICAgIHRoaXMud2lyZUNoYW5nZUtleV8gPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodGhpcy5sb2dDaGFuZ2VLZXlfICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgbG9nQ2hhbmdlRXZlbnQgPSB0aGlzLnNoYXJkXy5sb2dUYWJsZS50YWJsZUNoYW5nZTtcbiAgICBsb2dDaGFuZ2VFdmVudC51bnJlZ2lzdGVyKHRoaXMubG9nQ2hhbmdlS2V5Xyk7XG4gICAgdGhpcy5sb2dDaGFuZ2VLZXlfID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHRoaXMubmV3TWVzc2FnZUV2ZW50S2V5XyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIG5ld01lc3NhZ2VFdmVudCA9IHRoaXMuc2hhcmRfLm1lc3NhZ2VUYWJsZS50YWJsZUNoYW5nZTtcbiAgICBuZXdNZXNzYWdlRXZlbnQudW5yZWdpc3Rlcih0aGlzLm5ld01lc3NhZ2VFdmVudEtleV8pO1xuICAgIHRoaXMubmV3TWVzc2FnZUV2ZW50S2V5XyA9IHVuZGVmaW5lZDtcbiAgfVxufTtcblxuLyoqXG4gKiBQdXRzIHRoZSByb3V0ZXIgaW50byB0aGUgZ2l2ZW4gRE5TIG1vZGUsIHRyaWdnZXJzIGEgcmVtb3RlIHVwZGF0ZSxcbiAqIGFuZCBjcmVhdGVzL2Rlc3Ryb3lzIHRoZSBuZXR3b3JrJ3MgYXV0b21hdGljIEROUyBub2RlLlxuICogQHBhcmFtIHtEbnNNb2RlfSBuZXdEbnNNb2RlXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLnNldERuc01vZGUgPSBmdW5jdGlvbiAobmV3RG5zTW9kZSkge1xuICBpZiAodGhpcy5kbnNNb2RlID09PSBuZXdEbnNNb2RlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRoaXMuZG5zTW9kZSA9PT0gRG5zTW9kZS5OT05FKSB7XG4gICAgdGhpcy5kbnNOb2RlSUQgPSB1bmRlZmluZWQ7XG4gIH0gZWxzZSBpZiAodGhpcy5kbnNNb2RlID09PSBEbnNNb2RlLkFVVE9NQVRJQykge1xuICAgIHRoaXMuZG5zTm9kZUlEID0gQVVUT19ETlNfUkVTRVJWRURfQUREUkVTUztcbiAgfVxuXG4gIHRoaXMuZG5zTW9kZSA9IG5ld0Ruc01vZGU7XG4gIHRoaXMudXBkYXRlKCk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBuZXdCYW5kd2lkdGggaW4gYml0cyBwZXIgc2Vjb25kXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLnNldEJhbmR3aWR0aCA9IGZ1bmN0aW9uIChuZXdCYW5kd2lkdGgpIHtcbiAgaWYgKHRoaXMuYmFuZHdpZHRoID09PSBuZXdCYW5kd2lkdGgpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLmJhbmR3aWR0aCA9IG5ld0JhbmR3aWR0aDtcbiAgdGhpcy5yZWNhbGN1bGF0ZVNjaGVkdWxlKCk7XG4gIHRoaXMudXBkYXRlKCk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBuZXdNZW1vcnkgaW4gYml0c1xuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5zZXRNZW1vcnkgPSBmdW5jdGlvbiAobmV3TWVtb3J5KSB7XG4gIGlmICh0aGlzLm1lbW9yeSA9PT0gbmV3TWVtb3J5KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5tZW1vcnkgPSBuZXdNZW1vcnk7XG4gIHRoaXMuZW5mb3JjZU1lbW9yeUxpbWl0XygpO1xuICB0aGlzLnVwZGF0ZSgpO1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7TmV0U2ltV2lyZVtdfSBhbGwgb2YgdGhlIHdpcmVzIHRoYXQgYXJlIGF0dGFjaGVkIHRvIHRoaXMgcm91dGVyLlxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5nZXRDb25uZWN0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNoYXJkID0gdGhpcy5zaGFyZF87XG4gIHZhciByb3V0ZXJJRCA9IHRoaXMuZW50aXR5SUQ7XG4gIHJldHVybiBzaGFyZC53aXJlVGFibGUucmVhZEFsbCgpLmZpbHRlcihmdW5jdGlvbiAod2lyZVJvdykge1xuICAgIHJldHVybiB3aXJlUm93LnJlbW90ZU5vZGVJRCA9PT0gcm91dGVySUQ7XG4gIH0pLm1hcChmdW5jdGlvbiAod2lyZVJvdykge1xuICAgIHJldHVybiBuZXcgTmV0U2ltV2lyZShzaGFyZCwgd2lyZVJvdyk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7bnVtYmVyfSB0b3RhbCBudW1iZXIgb2Ygd2lyZXMgY29ubmVjdGVkIHRvIHRoaXMgcm91dGVyLlxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5jb3VudENvbm5lY3Rpb25zID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5nZXRDb25uZWN0aW9ucygpLmxlbmd0aDtcbn07XG5cbi8qKlxuICogQWRkIGEgcm91dGVyIGxvZyBlbnRyeSAobm90IGRldmVsb3BtZW50IGxvZ2dpbmcsIHRoaXMgaXMgdXNlci1mYWNpbmchKVxuICogQHBhcmFtIHtzdHJpbmd9IHBhY2tldCAtIGJpbmFyeSBsb2cgcGF5bG9hZFxuICogQHBhcmFtIHtOZXRTaW1Mb2dFbnRyeS5Mb2dTdGF0dXN9IHN0YXR1c1xuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5sb2cgPSBmdW5jdGlvbiAocGFja2V0LCBzdGF0dXMpIHtcbiAgTmV0U2ltTG9nRW50cnkuY3JlYXRlKFxuICAgICAgdGhpcy5zaGFyZF8sXG4gICAgICB0aGlzLmVudGl0eUlELFxuICAgICAgcGFja2V0LFxuICAgICAgc3RhdHVzLFxuICAgICAgZnVuY3Rpb24gKCkge30pO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5fSBoYXlzdGFja1xuICogQHBhcmFtIHsqfSBuZWVkbGVcbiAqIEByZXR1cm5zIHtib29sZWFufSBUUlVFIGlmIG5lZWRsZSBmb3VuZCBpbiBoYXlzdGFja1xuICovXG52YXIgY29udGFpbnMgPSBmdW5jdGlvbiAoaGF5c3RhY2ssIG5lZWRsZSkge1xuICByZXR1cm4gaGF5c3RhY2suc29tZShmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50ID09PSBuZWVkbGU7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2hlbiBhbm90aGVyIG5vZGUgZXN0YWJsaXNoZXMgYSBjb25uZWN0aW9uIHRvIHRoaXMgb25lLCBnaXZpbmcgdGhpc1xuICogbm9kZSBhIGNoYW5jZSB0byByZWplY3QgdGhlIGNvbm5lY3Rpb24uXG4gKlxuICogVGhlIHJvdXRlciBjaGVja3MgYWdhaW5zdCBpdHMgY29ubmVjdGlvbiBsaW1pdCwgYW5kIHJlamVjdHMgdGhlIGNvbm5lY3Rpb25cbiAqIGlmIGl0cyBsaW1pdCBpcyBub3cgZXhjZWVkZWQuXG4gKlxuICogQHBhcmFtIHshTmV0U2ltTm9kZX0gb3RoZXJOb2RlIGF0dGVtcHRpbmcgdG8gY29ubmVjdCB0byB0aGlzIG9uZVxuICogQHBhcmFtIHshTm9kZVN0eWxlQ2FsbGJhY2t9IG9uQ29tcGxldGUgcmVzcG9uc2UgbWV0aG9kIC0gc2hvdWxkIGNhbGwgd2l0aCBUUlVFXG4gKiAgICAgICAgaWYgY29ubmVjdGlvbiBpcyBhbGxvd2VkLCBGQUxTRSBpZiBjb25uZWN0aW9uIGlzIHJlamVjdGVkLlxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5hY2NlcHRDb25uZWN0aW9uID0gZnVuY3Rpb24gKG90aGVyTm9kZSwgb25Db21wbGV0ZSkge1xuICB2YXIgcmVqZWN0aW9uUmVhc29uID0gbnVsbDtcblxuICAvLyBGb3JjZSBhIHJlZnJlc2ggdG8gdmVyaWZ5IHRoYXQgd2UgaGF2ZSBub3QgZXhjZWVkZWQgdGhlIGNvbm5lY3Rpb24gbGltaXQuXG4gIHRoaXMuc2hhcmRfLndpcmVUYWJsZS5yZWZyZXNoKClcbiAgICAgIC5kb25lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvbm5lY3Rpb25zID0gdGhpcy5nZXRDb25uZWN0aW9ucygpO1xuXG4gICAgICAgIC8vIENoZWNrIGZvciBjb25uZWN0aW9uIGxpbWl0IGV4Y2VlZGVkXG4gICAgICAgIGlmIChjb25uZWN0aW9ucy5sZW5ndGggPiB0aGlzLm1heENsaWVudENvbm5lY3Rpb25zXykge1xuICAgICAgICAgIHJlamVjdGlvblJlYXNvbiA9IG5ldyBFcnJvcihcIlRvbyBtYW55IGNvbm5lY3Rpb25zLlwiKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBmb3IgYWRkcmVzcyBjb2xsaXNpb25zXG4gICAgICAgIHZhciBhZGRyZXNzZXNTb0ZhciA9IHt9O1xuICAgICAgICBhZGRyZXNzZXNTb0Zhclt0aGlzLmdldEFkZHJlc3MoKV0gPSB0cnVlO1xuICAgICAgICBhZGRyZXNzZXNTb0Zhclt0aGlzLmdldEF1dG9EbnNBZGRyZXNzKCldID0gdHJ1ZTtcbiAgICAgICAgdmFyIGFkZHJlc3NDb2xsaXNpb24gPSBjb25uZWN0aW9ucy5zb21lKGZ1bmN0aW9uICh3aXJlKSB7XG4gICAgICAgICAgdmFyIGNvbGxpZGVzID0gYWRkcmVzc2VzU29GYXIuaGFzT3duUHJvcGVydHkod2lyZS5sb2NhbEFkZHJlc3MpO1xuICAgICAgICAgIGFkZHJlc3Nlc1NvRmFyW3dpcmUubG9jYWxBZGRyZXNzXSA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIGNvbGxpZGVzO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGFkZHJlc3NDb2xsaXNpb24pIHtcbiAgICAgICAgICByZWplY3Rpb25SZWFzb24gPSBuZXcgRXJyb3IoXCJBZGRyZXNzIGNvbGxpc2lvbiBkZXRlY3RlZC5cIik7XG4gICAgICAgIH1cblxuICAgICAgfS5iaW5kKHRoaXMpKVxuICAgICAgLmZhaWwoZnVuY3Rpb24gKGVycikge1xuICAgICAgICBsb2dnZXIuaW5mbyhcIlJlamVjdGVkIGNvbm5lY3Rpb24gZnJvbSBcIiArIG90aGVyTm9kZS5nZXREaXNwbGF5TmFtZSgpICtcbiAgICAgICAgICAgIFwiOiBcIiArIGVyci5tZXNzYWdlKTtcbiAgICAgICAgcmVqZWN0aW9uUmVhc29uID0gZXJyO1xuICAgICAgfSlcbiAgICAgIC5hbHdheXMoZnVuY3Rpb24gKCkge1xuICAgICAgICBvbkNvbXBsZXRlKHJlamVjdGlvblJlYXNvbiwgbnVsbCA9PT0gcmVqZWN0aW9uUmVhc29uKTtcbiAgICAgIH0pO1xufTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIGxpc3Qgb2YgYXZhaWxhYmxlIGFkZHJlc3NlcywgdGhlbiBwaWNrIG9uZSBhdCByYW5kb20gYW5kIHJldHVybiBpdC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IGEgbmV3IGF2YWlsYWJsZSBhZGRyZXNzLlxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5nZXRSYW5kb21BdmFpbGFibGVDbGllbnRBZGRyZXNzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYWRkcmVzc0xpc3QgPSB0aGlzLmdldENvbm5lY3Rpb25zKCkuZmlsdGVyKGZ1bmN0aW9uICh3aXJlKSB7XG4gICAgcmV0dXJuIHdpcmUubG9jYWxBZGRyZXNzICE9PSB1bmRlZmluZWQ7XG4gIH0pLm1hcChmdW5jdGlvbiAod2lyZSkge1xuICAgIHJldHVybiB3aXJlLmxvY2FsQWRkcmVzcztcbiAgfSk7XG5cbiAgLy8gR2VuZXJhdGUgYSBsaXN0IG9mIHVudXNlZCBhZGRyZXNzZXMgaW4gdGhlIGFkZHJlc3NhYmxlIHNwYWNlICh0byBhIGxpbWl0KVxuICB2YXIgYWRkcmVzc0Zvcm1hdCA9IE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKS5hZGRyZXNzRm9ybWF0O1xuICB2YXIgYWRkcmVzc1BhcnRTaXplcyA9IGFkZHJlc3NGb3JtYXQuc3BsaXQoL1xcRCsvKS5maWx0ZXIoZnVuY3Rpb24gKHBhcnQpIHtcbiAgICByZXR1cm4gcGFydC5sZW5ndGggPiAwO1xuICB9KS5tYXAoZnVuY3Rpb24gKHBhcnQpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQocGFydCwgMTApO1xuICB9KS5yZXZlcnNlKCk7XG4gIHZhciBtYXhMb2NhbEFkZHJlc3NlcyA9IE1hdGgubWluKE1hdGgucG93KDIsIGFkZHJlc3NQYXJ0U2l6ZXNbMF0pLFxuICAgICAgQUREUkVTU19PUFRJT05fTElNSVQpO1xuXG4gIHZhciBwb3NzaWJsZUFkZHJlc3NlcyA9IFtdO1xuICB2YXIgbmV4dEFkZHJlc3M7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWF4TG9jYWxBZGRyZXNzZXM7IGkrKykge1xuICAgIG5leHRBZGRyZXNzID0gdGhpcy5tYWtlTG9jYWxOZXR3b3JrQWRkcmVzc18oaSk7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGFkZHJlc3MgaW4gcXVlc3Rpb24gaXMgbm90IHRha2VuIGFscmVhZHkuXG4gICAgaWYgKCEobmV4dEFkZHJlc3MgPT09IHRoaXMuZ2V0QWRkcmVzcygpIHx8XG4gICAgICAgIG5leHRBZGRyZXNzID09PSB0aGlzLmdldEF1dG9EbnNBZGRyZXNzKCkgfHxcbiAgICAgICAgY29udGFpbnMoYWRkcmVzc0xpc3QsIG5leHRBZGRyZXNzKSkpIHtcbiAgICAgIHBvc3NpYmxlQWRkcmVzc2VzLnB1c2gobmV4dEFkZHJlc3MpO1xuICAgIH1cbiAgfVxuXG4gIHZhciByYW5kb21JbmRleCA9IE5ldFNpbUdsb2JhbHMucmFuZG9tSW50SW5SYW5nZSgwLCBwb3NzaWJsZUFkZHJlc3Nlcy5sZW5ndGgpO1xuICByZXR1cm4gcG9zc2libGVBZGRyZXNzZXNbcmFuZG9tSW5kZXhdO1xufTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhbiBhZGRyZXNzIG1hdGNoaW5nIHRoZSBsZXZlbCdzIGNvbmZpZ3VyZWQgYWRkcmVzcyBmb3JtYXQsIHRoYXRcbiAqIGZhbGxzIHdpdGhpbiB0aGlzIHJvdXRlcidzIGxvY2FsIG5ldHdvcmsgYW5kIGVuZHMgaW4gdGhlIGdpdmVuIHZhbHVlLlxuICogQHBhcmFtIHtudW1iZXJ9IGxhc3RQYXJ0XG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUubWFrZUxvY2FsTmV0d29ya0FkZHJlc3NfID0gZnVuY3Rpb24gKGxhc3RQYXJ0KSB7XG4gIHZhciBhZGRyZXNzRm9ybWF0ID0gTmV0U2ltR2xvYmFscy5nZXRMZXZlbENvbmZpZygpLmFkZHJlc3NGb3JtYXQ7XG4gIHZhciB1c2VkTGFzdFBhcnQgPSBmYWxzZTtcbiAgdmFyIHVzZWRSb3V0ZXJJRCA9IGZhbHNlO1xuXG4gIHJldHVybiBhZGRyZXNzRm9ybWF0LnNwbGl0KC8oXFxEKykvKS5yZXZlcnNlKCkubWFwKGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgdmFyIGJpdFdpZHRoID0gcGFyc2VJbnQocGFydCwgMTApO1xuICAgIGlmIChpc05hTihiaXRXaWR0aCkpIHtcbiAgICAgIC8vIFRoaXMgaXMgYSBub24tbnVtYmVyIHBhcnQsIHBhc3MgaXQgdGhyb3VnaCB0byB0aGUgcmVzdWx0XG4gICAgICByZXR1cm4gcGFydDtcbiAgICB9XG5cbiAgICBpZiAoIXVzZWRMYXN0UGFydCkge1xuICAgICAgdXNlZExhc3RQYXJ0ID0gdHJ1ZTtcbiAgICAgIHJldHVybiBsYXN0UGFydC50b1N0cmluZygpO1xuICAgIH1cblxuICAgIGlmICghdXNlZFJvdXRlcklEKSB7XG4gICAgICB1c2VkUm91dGVySUQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0Um91dGVyTnVtYmVyKCkudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gJzAnO1xuICB9LmJpbmQodGhpcykpLnJldmVyc2UoKS5qb2luKCcnKTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge0FycmF5fSBBIGxpc3Qgb2YgcmVtb3RlIG5vZGVzIGNvbm5lY3RlZCB0byB0aGlzIHJvdXRlciwgaW5jbHVkaW5nXG4gKiAgICAgICAgICB0aGVpciBob3N0bmFtZSwgYWRkcmVzcywgd2hldGhlciB0aGV5IGFyZSB0aGUgbG9jYWwgbm9kZSwgYW5kXG4gKiAgICAgICAgICB3aGV0aGVyIHRoZXkgYXJlIHRoZSBjdXJyZW50IEROUyBub2RlIGZvciB0aGUgbmV0d29yay5cbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUuZ2V0QWRkcmVzc1RhYmxlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYWRkcmVzc1RhYmxlID0gdGhpcy5teVdpcmVSb3dDYWNoZV8ubWFwKGZ1bmN0aW9uIChyb3cpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaG9zdG5hbWU6IHJvdy5sb2NhbEhvc3RuYW1lLFxuICAgICAgYWRkcmVzczogcm93LmxvY2FsQWRkcmVzcyxcbiAgICAgIGlzTG9jYWw6IChyb3cubG9jYWxOb2RlSUQgPT09IHRoaXMuc2ltdWxhdGVGb3JTZW5kZXJfKSxcbiAgICAgIGlzRG5zTm9kZTogKHJvdy5sb2NhbE5vZGVJRCA9PT0gdGhpcy5kbnNOb2RlSUQpXG4gICAgfTtcbiAgfS5iaW5kKHRoaXMpKTtcblxuICAvLyBTcGVjaWFsIGNhc2U6IEluIGF1dG8tZG5zIG1vZGUgd2UgYWRkIHRoZSBETlMgZW50cnkgdG8gdGhlIGFkZHJlc3MgdGFibGVcbiAgaWYgKHRoaXMuZG5zTW9kZSA9PT0gRG5zTW9kZS5BVVRPTUFUSUMpIHtcbiAgICBhZGRyZXNzVGFibGUucHVzaCh7XG4gICAgICBob3N0bmFtZTogQVVUT19ETlNfSE9TVE5BTUUsXG4gICAgICBhZGRyZXNzOiB0aGlzLmdldEF1dG9EbnNBZGRyZXNzKCksXG4gICAgICBpc0xvY2FsOiBmYWxzZSxcbiAgICAgIGlzRG5zTm9kZTogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGFkZHJlc3NUYWJsZTtcbn07XG5cbi8qKlxuICogR2l2ZW4gYSBub2RlIElELCBmaW5kcyB0aGUgbG9jYWwgbmV0d29yayBhZGRyZXNzIG9mIHRoYXQgbm9kZS4gIENhbm5vdFxuICogYmUgdXNlZCB0byBmaW5kIHRoZSBhZGRyZXNzIG9mIHRoZSByb3V0ZXIgb3IgYXV0by1kbnMgbm9kZSAoc2luY2UgdGhlaXJcbiAqIG5vZGUgSURzIGFyZSBub3QgdW5pcXVlKS4gIFdpbGwgcmV0dXJuIHVuZGVmaW5lZCBpZiB0aGUgbm9kZSBJRCBpcyBub3RcbiAqIGZvdW5kLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBub2RlSURcbiAqIEByZXR1cm5zIHtudW1iZXJ8dW5kZWZpbmVkfVxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUuZ2V0QWRkcmVzc0Zvck5vZGVJRF8gPSBmdW5jdGlvbiAobm9kZUlEKSB7XG4gIHZhciB3aXJlUm93ID0gXy5maW5kKHRoaXMubXlXaXJlUm93Q2FjaGVfLCBmdW5jdGlvbiAocm93KSB7XG4gICAgcmV0dXJuIHJvdy5sb2NhbE5vZGVJRCA9PT0gbm9kZUlEO1xuICB9KTtcblxuICBpZiAod2lyZVJvdyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHdpcmVSb3cubG9jYWxBZGRyZXNzO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG4vKipcbiAqIEdpdmVuIGEgaG9zdG5hbWUsIGZpbmRzIHRoZSBsb2NhbCBuZXR3b3JrIGFkZHJlc3Mgb2YgdGhlIG5vZGUgd2l0aCB0aGF0XG4gKiBob3N0bmFtZS4gIFdpbGwgcmV0dXJuIHVuZGVmaW5lZCBpZiBubyBub2RlIHdpdGggdGhhdCBob3N0bmFtZSBpcyBmb3VuZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaG9zdG5hbWVcbiAqIEByZXR1cm5zIHtudW1iZXJ8dW5kZWZpbmVkfVxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUuZ2V0QWRkcmVzc0Zvckhvc3RuYW1lXyA9IGZ1bmN0aW9uIChob3N0bmFtZSkge1xuICBpZiAoaG9zdG5hbWUgPT09IHRoaXMuZ2V0SG9zdG5hbWUoKSkge1xuICAgIHJldHVybiB0aGlzLmdldEFkZHJlc3MoKTtcbiAgfVxuXG4gIGlmICh0aGlzLmRuc01vZGUgPT09IERuc01vZGUuQVVUT01BVElDICYmIGhvc3RuYW1lID09PSBBVVRPX0ROU19IT1NUTkFNRSkge1xuICAgIHJldHVybiB0aGlzLmdldEF1dG9EbnNBZGRyZXNzKCk7XG4gIH1cblxuICB2YXIgd2lyZVJvdyA9IF8uZmluZCh0aGlzLm15V2lyZVJvd0NhY2hlXywgZnVuY3Rpb24gKHJvdykge1xuICAgIHJldHVybiByb3cubG9jYWxIb3N0bmFtZSA9PT0gaG9zdG5hbWU7XG4gIH0pO1xuXG4gIGlmICh3aXJlUm93ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gd2lyZVJvdy5sb2NhbEFkZHJlc3M7XG4gIH1cblxuICAvLyBJZiB3ZSBkb24ndCBoYXZlIGNvbm5lY3RlZCByb3V0ZXJzLCB0aGlzIGlzIGFzIGZhciBhcyB0aGUgYXV0by1ETlMgY2FuIHNlZS5cbiAgaWYgKCFOZXRTaW1HbG9iYWxzLmdldExldmVsQ29uZmlnKCkuY29ubmVjdGVkUm91dGVycykge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvLyBJcyBpdCBzb21lIG5vZGUgZWxzZXdoZXJlIG9uIHRoZSBzaGFyZD9cbiAgdmFyIG5vZGVzID0gTmV0U2ltTm9kZUZhY3Rvcnkubm9kZXNGcm9tUm93cyh0aGlzLnNoYXJkXyxcbiAgICAgIHRoaXMuc2hhcmRfLm5vZGVUYWJsZS5yZWFkQWxsKCkpO1xuICB2YXIgbm9kZSA9IF8uZmluZChub2RlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5nZXRIb3N0bmFtZSgpID09PSBob3N0bmFtZTtcbiAgfSk7XG4gIGlmIChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUuZ2V0QWRkcmVzcygpO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbi8qKlxuICogR2l2ZW4gYSBsb2NhbCBuZXR3b3JrIGFkZHJlc3MsIGZpbmRzIHRoZSBub2RlIElEIG9mIHRoZSBub2RlIGF0IHRoYXRcbiAqIGFkZHJlc3MuICBXaWxsIHJldHVybiB1bmRlZmluZWQgaWYgbm8gbm9kZSBpcyBmb3VuZCBhdCB0aGUgZ2l2ZW4gYWRkcmVzcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYWRkcmVzc1xuICogQHJldHVybnMge251bWJlcnx1bmRlZmluZWR9XG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5nZXROb2RlSURGb3JBZGRyZXNzXyA9IGZ1bmN0aW9uIChhZGRyZXNzKSB7XG4gIGlmIChhZGRyZXNzID09PSB0aGlzLmdldEFkZHJlc3MoKSkge1xuICAgIHJldHVybiB0aGlzLmVudGl0eUlEO1xuICB9XG5cbiAgaWYgKHRoaXMuZG5zTW9kZSA9PT0gRG5zTW9kZS5BVVRPTUFUSUMgJiZcbiAgICAgIGFkZHJlc3MgPT09IHRoaXMuZ2V0QXV0b0Ruc0FkZHJlc3MoKSkge1xuICAgIHJldHVybiB0aGlzLmVudGl0eUlEO1xuICB9XG5cbiAgdmFyIHdpcmVSb3cgPSBfLmZpbmQodGhpcy5teVdpcmVSb3dDYWNoZV8sIGZ1bmN0aW9uIChyb3cpIHtcbiAgICByZXR1cm4gcm93LmxvY2FsQWRkcmVzcyA9PT0gYWRkcmVzcztcbiAgfSk7XG5cbiAgaWYgKHdpcmVSb3cgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB3aXJlUm93LmxvY2FsTm9kZUlEO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG4vKipcbiAqIEdpdmVuIGEgbmV0d29yayBhZGRyZXNzLCBmaW5kcyB0aGUgbm9kZSB0aGF0IGlzIHRoZSBuZXh0IHN0ZXAgYWxvbmcgdGhlXG4gKiBjb3JyZWN0IHBhdGggZnJvbSB0aGlzIHJvdXRlciB0byB0aGF0IGFkZHJlc3MuICBXaWxsIHJldHVybiBudWxsIGlmIG5vXG4gKiBwYXRoIHRvIHRoZSBhZGRyZXNzIGlzIGZvdW5kLlxuICogQHBhcmFtIHtzdHJpbmd9IGFkZHJlc3NcbiAqIEBwYXJhbSB7bnVtYmVyfSBob3BzUmVtYWluaW5nXG4gKiBAcGFyYW0ge251bWJlcltdfSB2aXNpdGVkTm9kZUlEc1xuICogQHJldHVybnMge05ldFNpbU5vZGV8bnVsbH1cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLmdldE5leHROb2RlVG93YXJkQWRkcmVzc18gPSBmdW5jdGlvbiAoYWRkcmVzcyxcbiAgICBob3BzUmVtYWluaW5nLCB2aXNpdGVkTm9kZUlEcykge1xuICAvLyBJcyBpdCB1cz9cbiAgaWYgKGFkZHJlc3MgPT09IHRoaXMuZ2V0QWRkcmVzcygpKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBJcyBpdCBvdXIgQXV0by1ETlMgbm9kZT9cbiAgaWYgKHRoaXMuZG5zTW9kZSA9PT0gRG5zTW9kZS5BVVRPTUFUSUMgJiYgYWRkcmVzcyA9PT0gdGhpcy5nZXRBdXRvRG5zQWRkcmVzcygpKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBJcyBpdCBhIGxvY2FsIGNsaWVudD9cbiAgdmFyIG5vZGVzID0gTmV0U2ltTm9kZUZhY3Rvcnkubm9kZXNGcm9tUm93cyh0aGlzLnNoYXJkXyxcbiAgICAgIHRoaXMuc2hhcmRfLm5vZGVUYWJsZS5yZWFkQWxsKCkpO1xuICB2YXIgd2lyZVJvdyA9IF8uZmluZCh0aGlzLm15V2lyZVJvd0NhY2hlXywgZnVuY3Rpb24gKHJvdykge1xuICAgIHJldHVybiByb3cubG9jYWxBZGRyZXNzID09PSBhZGRyZXNzO1xuICB9KTtcbiAgaWYgKHdpcmVSb3cgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBsb2NhbENsaWVudCA9IF8uZmluZChub2RlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHJldHVybiBub2RlLmVudGl0eUlEID09PSB3aXJlUm93LmxvY2FsTm9kZUlEO1xuICAgIH0pO1xuICAgIGlmIChsb2NhbENsaWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbG9jYWxDbGllbnQ7XG4gICAgfVxuICB9XG5cbiAgLy8gRW5kIG9mIGxvY2FsIHN1Ym5ldCBjYXNlczpcbiAgLy8gSW4gbGV2ZWxzIHdoZXJlIHJvdXRlcnMgYXJlIG5vdCBjb25uZWN0ZWQsIHRoaXMgaXMgYXMgZmFyIGFzIHdlIGdvLlxuICB2YXIgbGV2ZWxDb25maWcgPSBOZXRTaW1HbG9iYWxzLmdldExldmVsQ29uZmlnKCk7XG4gIGlmICghbGV2ZWxDb25maWcuY29ubmVjdGVkUm91dGVycykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gSXMgaXQgYW5vdGhlciBub2RlP1xuICB2YXIgZGVzdGluYXRpb25Ob2RlID0gXy5maW5kKG5vZGVzLCBmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiBhZGRyZXNzID09PSBub2RlLmdldEFkZHJlc3MoKSB8fFxuICAgICAgICAobm9kZS5kbnNNb2RlID09PSBEbnNNb2RlLkFVVE9NQVRJQyAmJlxuICAgICAgICAgIG5vZGUuZ2V0Tm9kZVR5cGUoKSA9PT0gTm9kZVR5cGUuUk9VVEVSICYmXG4gICAgICAgICAgYWRkcmVzcyA9PT0gbm9kZS5nZXRBdXRvRG5zQWRkcmVzcygpKTtcbiAgfSk7XG5cbiAgLy8gSWYgdGhlIG5vZGUgd2UncmUgYWZ0ZXIgZG9lc24ndCBleGlzdCBhbnl3aGVyZSwgd2Ugc2hvdWxkIHN0b3Agbm93LlxuICBpZiAoIWRlc3RpbmF0aW9uTm9kZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gV2UgYXJlIHRyeWluZyB0byBnZXQgc29tZXdoZXJlIGVsc2UhICBGaWd1cmUgb3V0IHdoYXQgdGhlIHRhcmdldCByb3V0ZXJcbiAgLy8gZm9yIG91ciBkZXN0aW5hdGlvbiBpcy5cbiAgdmFyIGRlc3RpbmF0aW9uUm91dGVyID0gbnVsbDtcbiAgaWYgKGRlc3RpbmF0aW9uTm9kZS5nZXROb2RlVHlwZSgpID09PSBOb2RlVHlwZS5ST1VURVIpIHtcbiAgICBkZXN0aW5hdGlvblJvdXRlciA9IGRlc3RpbmF0aW9uTm9kZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZGVzdGluYXRpb25XaXJlID0gZGVzdGluYXRpb25Ob2RlLmdldE91dGdvaW5nV2lyZSgpO1xuICAgIGlmIChkZXN0aW5hdGlvbldpcmUpIHtcbiAgICAgIGRlc3RpbmF0aW9uUm91dGVyID0gdXRpbHMudmFsdWVPcihfLmZpbmQobm9kZXMsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlLmVudGl0eUlEID09PSBkZXN0aW5hdGlvbldpcmUucmVtb3RlTm9kZUlEO1xuICAgICAgfSksIG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghZGVzdGluYXRpb25Sb3V0ZXIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIElmIHdlIGhhdmUgZXh0cmEgaG9wcywgd2Ugc2hvdWxkIHRyeSBhbmQgZ28gdG8gYSByb3V0ZXIgdGhhdCBpcyBOT1RcbiAgLy8gdGhlIHRhcmdldCByb3V0ZXIuXG4gIGlmIChob3BzUmVtYWluaW5nID4gMCkge1xuICAgIC8vIEdlbmVyYXRlIHRoZSBzZXQgb2YgcG9zc2libGUgdGFyZ2V0IHJvdXRlcnNcbiAgICB2YXIgcG9zc2libGVEZXN0aW5hdGlvblJvdXRlcnMgPSBub2Rlcy5maWx0ZXIoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHJldHVybiBub2RlLmdldE5vZGVUeXBlKCkgPT09IE5vZGVUeXBlLlJPVVRFUiAmJlxuICAgICAgICAgIG5vZGUuZW50aXR5SUQgIT09IGRlc3RpbmF0aW9uUm91dGVyLmVudGl0eUlEICYmXG4gICAgICAgICAgbm9kZS5lbnRpdHlJRCAhPT0gdGhpcy5lbnRpdHlJRCAmJlxuICAgICAgICAgICF2aXNpdGVkTm9kZUlEcy5zb21lKGZ1bmN0aW9uICh2aXNpdGVkSUQpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlLmVudGl0eUlEID09PSB2aXNpdGVkSUQ7XG4gICAgICAgICAgfSk7XG4gICAgfSwgdGhpcyk7XG4gICAgaWYgKHBvc3NpYmxlRGVzdGluYXRpb25Sb3V0ZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBOZXRTaW1HbG9iYWxzLnJhbmRvbVBpY2tPbmUocG9zc2libGVEZXN0aW5hdGlvblJvdXRlcnMpO1xuICAgIH1cbiAgfVxuXG4gIC8vIElmIHRoZXJlJ3Mgbm93aGVyZSBlbHNlIHRvIGdvIG9yIHdlIGFyZSBvdXQgb2YgZXh0cmEgaG9wcywgZ28gdG8gdGhlXG4gIC8vIHRhcmdldCByb3V0ZXIuXG4gIHJldHVybiBkZXN0aW5hdGlvblJvdXRlcjtcbn07XG5cbi8qKlxuICogV2hlbiB0aGUgbm9kZSB0YWJsZSBjaGFuZ2VzLCB3ZSBjaGVjayB3aGV0aGVyIG91ciBvd24gcm93IGhhcyBjaGFuZ2VkXG4gKiBhbmQgcHJvcGFnYXRlIHRob3NlIGNoYW5nZXMgYXMgYXBwcm9wcmlhdGUuXG4gKiBAcHJpdmF0ZVxuICogQHRocm93c1xuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5vbk5vZGVUYWJsZUNoYW5nZV8gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBteVJvdyA9IF8uZmluZCh0aGlzLnNoYXJkXy5ub2RlVGFibGUucmVhZEFsbCgpLCBmdW5jdGlvbiAocm93KSB7XG4gICAgcmV0dXJuIHJvdy5pZCA9PT0gdGhpcy5lbnRpdHlJRDtcbiAgfS5iaW5kKHRoaXMpKTtcblxuICBpZiAobXlSb3cgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIFRoaXMgY2FuIGhhcHBlbiBub3csIHRvIG5vbi1wcmltYXJ5IHJvdXRlcnMsIGJlY2F1c2UgZGV0ZWN0aW9uXG4gICAgLy8gb2YgdGhlIHJvdXRlcidzIHJlbW92YWwgKHN0b3BwaW5nIGl0cyBzaW11bGF0aW9uKSBpbiBOZXRTaW1Mb2NhbENsaWVudE5vZGVcbiAgICAvLyBhbmQgdGhpcyBtZXRob2QgaGFwcGVuIGluIGFuIHVuY2VydGFpbiBvcmRlci5cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIV8uaXNFcXVhbCh0aGlzLnN0YXRlQ2FjaGVfLCBteVJvdykpIHtcbiAgICB0aGlzLnN0YXRlQ2FjaGVfID0gbXlSb3c7XG4gICAgdGhpcy5vbk15U3RhdGVDaGFuZ2VfKG15Um93KTtcbiAgfVxufTtcblxuLyoqXG4gKiBXaGVuIHRoZSB3aXJlcyB0YWJsZSBjaGFuZ2VzLCB3ZSBtYXkgaGF2ZSBhIG5ldyBjb25uZWN0aW9uIG9yIGhhdmUgbG9zdFxuICogYSBjb25uZWN0aW9uLiAgUHJvcGFnYXRlIHVwZGF0ZXMgYWJvdXQgb3VyIGNvbm5lY3Rpb25zXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5vbldpcmVUYWJsZUNoYW5nZV8gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBteVdpcmVSb3dzID0gdGhpcy5zaGFyZF8ud2lyZVRhYmxlLnJlYWRBbGwoKS5maWx0ZXIoZnVuY3Rpb24gKHJvdykge1xuICAgIHJldHVybiByb3cucmVtb3RlTm9kZUlEID09PSB0aGlzLmVudGl0eUlEO1xuICB9LmJpbmQodGhpcykpO1xuXG4gIGlmICghXy5pc0VxdWFsKHRoaXMubXlXaXJlUm93Q2FjaGVfLCBteVdpcmVSb3dzKSkge1xuICAgIHRoaXMubXlXaXJlUm93Q2FjaGVfID0gbXlXaXJlUm93cztcbiAgICB0aGlzLndpcmVzQ2hhbmdlLm5vdGlmeU9ic2VydmVycygpO1xuICB9XG59O1xuXG4vKipcbiAqIFdoZW4gdGhlIGxvZ3MgdGFibGUgY2hhbmdlcywgd2UgbWF5IGhhdmUgYSBuZXcgY29ubmVjdGlvbiBvciBoYXZlIGxvc3RcbiAqIGEgY29ubmVjdGlvbi4gIFByb3BhZ2F0ZSB1cGRhdGVzIGFib3V0IG91ciBjb25uZWN0aW9uc1xuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUub25Mb2dUYWJsZUNoYW5nZV8gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBteUxvZ1Jvd3MgPSB0aGlzLnNoYXJkXy5sb2dUYWJsZS5yZWFkQWxsKCkuZmlsdGVyKGZ1bmN0aW9uIChyb3cpIHtcbiAgICByZXR1cm4gcm93Lm5vZGVJRCA9PT0gdGhpcy5lbnRpdHlJRDtcbiAgfS5iaW5kKHRoaXMpKTtcblxuICBpZiAoIV8uaXNFcXVhbCh0aGlzLm15TG9nUm93Q2FjaGVfLCBteUxvZ1Jvd3MpKSB7XG4gICAgdGhpcy5teUxvZ1Jvd0NhY2hlXyA9IG15TG9nUm93cztcbiAgICB0aGlzLmxvZ0NoYW5nZS5ub3RpZnlPYnNlcnZlcnMoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBHZXQgbGlzdCBvZiBsb2cgZW50cmllcyBpbiB0aGlzIHJvdXRlcidzIG1lbW9yeS5cbiAqIEByZXR1cm5zIHtOZXRTaW1Mb2dFbnRyeVtdfVxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5nZXRMb2cgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLm15TG9nUm93Q2FjaGVfLm1hcChmdW5jdGlvbiAocm93KSB7XG4gICAgcmV0dXJuIG5ldyBOZXRTaW1Mb2dFbnRyeSh0aGlzLnNoYXJkXywgcm93LCB0aGlzLnBhY2tldFNwZWNfKTtcbiAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge251bWJlcn0gdGhlIG51bWJlciBvZiBwYWNrZXRzIGluIHRoZSByb3V0ZXIgcXVldWVcbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUuZ2V0UXVldWVkUGFja2V0Q291bnQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLnJvdXRlclF1ZXVlQ2FjaGVfLmxlbmd0aDtcbn07XG5cbi8qKlxuICogQHJldHVybnMge251bWJlcn0gcm91dGVyIG1lbW9yeSBjdXJyZW50bHkgaW4gdXNlLCBpbiBiaXRzXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLmdldE1lbW9yeUluVXNlID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5yb3V0ZXJRdWV1ZUNhY2hlXy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGN1cikge1xuICAgIHJldHVybiBwcmV2ICsgY3VyLnBheWxvYWQubGVuZ3RoO1xuICB9LCAwKTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge251bWJlcn0gZXhwZWN0ZWQgcm91dGVyIGRhdGEgcmF0ZSAoaW4gYml0cyBwZXIgc2Vjb25kKSBvdmVyIHRoZVxuICogICAgICAgICAgbmV4dCBzZWNvbmRcbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUuZ2V0Q3VycmVudERhdGFSYXRlID0gZnVuY3Rpb24gKCkge1xuICAvLyBGb3Igc2ltcGxpY2l0eSwgd2UncmUgZGVmaW5pbmcgdGhlICdjdXJlbnQgZGF0YSByYXRlJyBhcyBob3cgbWFueSBiaXRzXG4gIC8vIHdlIGV4cGVjdCB0byBnZXQgcHJvY2Vzc2VkIGluIHRoZSBuZXh0IHNlY29uZDsgd2hpY2ggaXMgb3VyIHF1ZXVlIHNpemUsXG4gIC8vIGNhcHBlZCBhdCBvdXIgYmFuZHdpZHRoLlxuICByZXR1cm4gTWF0aC5taW4odGhpcy5nZXRNZW1vcnlJblVzZSgpLCB0aGlzLmJhbmR3aWR0aCk7XG59O1xuXG4vKipcbiAqIFdoZW4gdGhlIG1lc3NhZ2UgdGFibGUgY2hhbmdlcywgd2UgbWlnaHQgaGF2ZSBhIG5ldyBtZXNzYWdlIHRvIGhhbmRsZS5cbiAqIENoZWNrIGZvciBhbmQgaGFuZGxlIHVuaGFuZGxlZCBtZXNzYWdlcy5cbiAqIEBwcml2YXRlXG4gKiBAdGhyb3dzIGlmIHRoaXMgbWV0aG9kIGlzIGNhbGxlZCBvbiBhIG5vbi1zaW11bGF0aW5nIHJvdXRlci5cbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUub25NZXNzYWdlVGFibGVDaGFuZ2VfID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuc2ltdWxhdGVGb3JTZW5kZXJfKSB7XG4gICAgLy8gV2hhdD8gIE9ubHkgc2ltdWxhdGluZyByb3V0ZXJzIHNob3VsZCBiZSBob29rZWQgdXAgdG8gbWVzc2FnZSBub3RpZmljYXRpb25zLlxuICAgIHRocm93IG5ldyBFcnJvcihcIk5vbi1zaW11bGF0aW5nIHJvdXRlciBnb3QgbWVzc2FnZSB0YWJsZSBjaGFuZ2Ugbm90aWZpY3Rpb25cIik7XG4gIH1cblxuICB2YXIgbWVzc2FnZXMgPSB0aGlzLnNoYXJkXy5tZXNzYWdlVGFibGUucmVhZEFsbCgpLm1hcChmdW5jdGlvbihyb3cpe1xuICAgIHJldHVybiBuZXcgTmV0U2ltTWVzc2FnZSh0aGlzLnNoYXJkXywgcm93KTtcbiAgfS5iaW5kKHRoaXMpKTtcblxuICB0aGlzLnVwZGF0ZVJvdXRlclF1ZXVlXyhtZXNzYWdlcyk7XG5cbiAgaWYgKHRoaXMuZG5zTW9kZSA9PT0gRG5zTW9kZS5BVVRPTUFUSUMpIHtcbiAgICB0aGlzLnVwZGF0ZUF1dG9EbnNRdWV1ZV8obWVzc2FnZXMpO1xuICB9XG59O1xuXG5cbi8qKlxuICogVXBkYXRlcyBvdXIgY2FjaGUgb2YgYWxsIG1lc3NhZ2VzIHRoYXQgYXJlIGdvaW5nIHRvIHRoZSByb3V0ZXIgKHJlZ2FyZGxlc3NcbiAqIG9mIHdoaWNoIHNpbXVsYXRpb24gd2lsbCBoYW5kbGUgdGhlbSksIHNvIHdlIGNhbiB1c2UgaXQgZm9yIHN0YXRzIGFuZCByYXRlXG4gKiBsaW1pdGluZy5cbiAqIEBwYXJhbSB7TmV0U2ltTWVzc2FnZVtdfSBtZXNzYWdlc1xuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS51cGRhdGVSb3V0ZXJRdWV1ZV8gPSBmdW5jdGlvbiAobWVzc2FnZXMpIHtcbiAgdmFyIG5ld1F1ZXVlID0gbWVzc2FnZXNcbiAgICAuZmlsdGVyKE5ldFNpbU1lc3NhZ2UuaXNWYWxpZClcbiAgICAuZmlsdGVyKHRoaXMuaXNNZXNzYWdlVG9Sb3V0ZXJfLmJpbmQodGhpcykpO1xuICBpZiAoXy5pc0VxdWFsKHRoaXMucm91dGVyUXVldWVDYWNoZV8sIG5ld1F1ZXVlKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxvZ2dlci5pbmZvKHRoaXMuZ2V0RGlzcGxheU5hbWUoKSArICc6IE1lc3NhZ2UgcXVldWUgdXBkYXRlZCAoc2l6ZSAnICtcbiAgICAgIG5ld1F1ZXVlLmxlbmd0aCArICcpJyk7XG5cbiAgdGhpcy5yb3V0ZXJRdWV1ZUNhY2hlXyA9IG5ld1F1ZXVlO1xuICB0aGlzLnJlY2FsY3VsYXRlU2NoZWR1bGUoKTtcbiAgdGhpcy5lbmZvcmNlTWVtb3J5TGltaXRfKCk7XG4gIHRoaXMuc3RhdHNDaGFuZ2Uubm90aWZ5T2JzZXJ2ZXJzKHRoaXMpO1xufTtcblxuLyoqXG4gKiBDaGVja3MgdGhlIHJvdXRlciBxdWV1ZSBmb3IgcGFja2V0cyBiZXlvbmQgdGhlIHJvdXRlcidzIG1lbW9yeSBsaW1pdCxcbiAqIGFuZCBkcm9wcyB0aGUgZmlyc3Qgb25lIHdlIHNpbXVsYXRlIGxvY2FsbHkuICBTaW5jZSB0aGlzIHdpbGwgdHJpZ2dlclxuICogYSB0YWJsZSBjaGFuZ2UsIHRoaXMgd2lsbCBvY2N1ciBhc3luYy1yZWN1cnNpdmVseSB1bnRpbCBhbGwgcGFja2V0c1xuICogb3ZlciB0aGUgbWVtb3J5IGxpbWl0IGFyZSBkcm9wcGVkLlxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUuZW5mb3JjZU1lbW9yeUxpbWl0XyA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gT25seSBwcm9jZWVkIGlmIGEgcGFja2V0IHdlIHNpbXVsYXRlIGV4aXN0cyBiZXlvbmQgdGhlIG1lbW9yeSBsaW1pdFxuICB2YXIgZHJvcHBhYmxlUGFja2V0ID0gdGhpcy5maW5kRmlyc3RMb2NhbGx5U2ltdWxhdGVkUGFja2V0T3Zlck1lbW9yeUxpbWl0KCk7XG4gIGlmICghZHJvcHBhYmxlUGFja2V0KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5yZW1vdmVNZXNzYWdlRnJvbVNjaGVkdWxlXyhkcm9wcGFibGVQYWNrZXQpO1xuICBkcm9wcGFibGVQYWNrZXQuZGVzdHJveShmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgLy8gUmFyZWx5LCB0aGlzIGNvdWxkIGZpcmUgdHdpY2UgZm9yIG9uZSBwYWNrZXQgYW5kIGhhdmUgb25lIGRyb3AgZmFpbC5cbiAgICAgIC8vIFRoYXQncyBmaW5lOyBqdXN0IGRvbid0IGxvZyBpZiB3ZSBkaWRuJ3Qgc3VjY2Vzc2Z1bGx5IGRyb3AuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5sb2coZHJvcHBhYmxlUGFja2V0LnBheWxvYWQsIE5ldFNpbUxvZ0VudHJ5LkxvZ1N0YXR1cy5EUk9QUEVEKTtcbiAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogV2FsayB0aGUgcm91dGVyIHF1ZXVlLCBhbmQgcmV0dXJuIHRoZSBmaXJzdCBwYWNrZXQgd2UgZmluZCBiZXlvbmQgdGhlIHJvdXRlcidzXG4gKiBtZW1vcnkgY2FwYWNpdHkgdGhhdCB0aGUgbG9jYWwgc2ltdWxhdGlvbiBjb250cm9scyBhbmQgaXMgYWJsZSB0byBkcm9wLlxuICogQHJldHVybnMge05ldFNpbU1lc3NhZ2V8bnVsbH0gbnVsbCBpZiBubyBzdWNoIG1lc3NhZ2UgaXMgZm91bmQuXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLmZpbmRGaXJzdExvY2FsbHlTaW11bGF0ZWRQYWNrZXRPdmVyTWVtb3J5TGltaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBwYWNrZXQ7XG4gIHZhciB1c2VkTWVtb3J5ID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJvdXRlclF1ZXVlQ2FjaGVfLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFja2V0ID0gdGhpcy5yb3V0ZXJRdWV1ZUNhY2hlX1tpXTtcbiAgICB1c2VkTWVtb3J5ICs9IHBhY2tldC5wYXlsb2FkLmxlbmd0aDtcbiAgICBpZiAodXNlZE1lbW9yeSA+IHRoaXMubWVtb3J5ICYmIHRoaXMubG9jYWxTaW11bGF0aW9uT3duc01lc3NhZ2VfKHBhY2tldCkpIHtcbiAgICAgIHJldHVybiBwYWNrZXQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge05ldFNpbU1lc3NhZ2V9IG1lc3NhZ2VcbiAqIEByZXR1cm5zIHtib29sZWFufSBUUlVFIGlmIHRoaXMgbWVzc2FnZSBpcyBkZXN0aW5lZCBmb3IgdGhlIHJvdXRlciAobm90IHRoZVxuICogICAgICAgICAgYXV0by1ETlMgcGFydCB0aG91Z2ghKSBhbmQgRkFMU0UgaWYgZGVzdGluZWQgYW55d2hlcmUgZWxzZS5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLmlzTWVzc2FnZVRvUm91dGVyXyA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gIGlmICh0aGlzLmRuc01vZGUgPT09IERuc01vZGUuQVVUT01BVElDICYmIHRoaXMuaXNNZXNzYWdlVG9BdXRvRG5zXyhtZXNzYWdlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBtZXNzYWdlLnRvTm9kZUlEID09PSB0aGlzLmVudGl0eUlEO1xufTtcblxuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUucm91dGVNZXNzYWdlc18gPSBmdW5jdGlvbiAobWVzc2FnZXMsIG9uQ29tcGxldGUpIHtcbiAgaWYgKG1lc3NhZ2VzLmxlbmd0aCA9PT0gMCkge1xuICAgIG9uQ29tcGxldGUobnVsbCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5yb3V0ZU1lc3NhZ2VfKG1lc3NhZ2VzWzBdLCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBvbkNvbXBsZXRlKGVyciwgcmVzdWx0KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnJvdXRlTWVzc2FnZXNfKG1lc3NhZ2VzLnNsaWNlKDEpLCBvbkNvbXBsZXRlKTtcbiAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7TmV0U2ltTWVzc2FnZX0gbWVzc2FnZVxuICogQHBhcmFtIHshTm9kZVN0eWxlQ2FsbGJhY2t9IG9uQ29tcGxldGVcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLnJvdXRlTWVzc2FnZV8gPSBmdW5jdGlvbiAobWVzc2FnZSwgb25Db21wbGV0ZSkge1xuICBtZXNzYWdlLmRlc3Ryb3koZnVuY3Rpb24gKGVyciwgcmVzdWx0KSB7XG4gICAgaWYgKGVycikge1xuICAgICAgb25Db21wbGV0ZShlcnIsIHJlc3VsdCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQXBwbHkgcmFuZG9tIGNoYW5jZSB0byBkcm9wIHBhY2tldCwgcmlnaHQgYXMgd2UgYXJlIGFib3V0IHRvIGZvcndhcmQgaXRcbiAgICBpZiAodGhpcy5yYW5kb21Ecm9wQ2hhbmNlID4gMCAmJiBOZXRTaW1HbG9iYWxzLnJhbmRvbSgpIDw9IHRoaXMucmFuZG9tRHJvcENoYW5jZSkge1xuICAgICAgdGhpcy5sb2cobWVzc2FnZS5wYXlsb2FkLCBOZXRTaW1Mb2dFbnRyeS5Mb2dTdGF0dXMuRFJPUFBFRCk7XG4gICAgICBvbkNvbXBsZXRlKG51bGwpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBsZXZlbENvbmZpZyA9IE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKTtcbiAgICBpZiAobGV2ZWxDb25maWcuYnJvYWRjYXN0TW9kZSkge1xuICAgICAgdGhpcy5mb3J3YXJkTWVzc2FnZVRvQWxsXyhtZXNzYWdlLCBvbkNvbXBsZXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5mb3J3YXJkTWVzc2FnZVRvUmVjaXBpZW50XyhtZXNzYWdlLCBvbkNvbXBsZXRlKTtcbiAgICB9XG4gIH0uYmluZCh0aGlzKSk7XG59O1xuXG4vKipcbiAqIEZvcndhcmQgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYWxsIG5vZGVzIHRoYXQgYXJlIGNvbm5lY3RlZCB0byB0aGlzIHJvdXRlci5cbiAqIFRoaXMgaXMgZWZmZWN0aXZlbHkgXCJodWJcIiBvcGVyYXRpb24uXG4gKiBAcGFyYW0ge05ldFNpbU1lc3NhZ2V9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7IU5vZGVTdHlsZUNhbGxiYWNrfSBvbkNvbXBsZXRlXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5mb3J3YXJkTWVzc2FnZVRvQWxsXyA9IGZ1bmN0aW9uIChtZXNzYWdlLCBvbkNvbXBsZXRlKSB7XG4gIC8vIEFzc3VtcHRpb25zIGZvciBicm9hZGNhc3QgbW9kZTpcbiAgLy8gMS4gV2UgY2FuIHRvdGFsbHkgaWdub3JlIHBhY2tldCBoZWFkZXJzLCBiZWNhdXNlIGFkZHJlc3NlcyBkb24ndCBtYXR0ZXJcbiAgLy8gMi4gV2Ugd29uJ3Qgc2VuZCB0byB0aGUgQXV0by1ETlMsIHNpbmNlIEROUyBtYWtlIG5vIHNlbnNlIHdpdGggbm8gYWRkcmVzc2VzXG5cbiAgLy8gR3JhYiB0aGUgbGlzdCBvZiBhbGwgY29ubmVjdGVkIG5vZGVzXG4gIHZhciBjb25uZWN0ZWROb2RlSURzID0gdGhpcy5teVdpcmVSb3dDYWNoZV8ubWFwKGZ1bmN0aW9uICh3aXJlUm93KSB7XG4gICAgcmV0dXJuIHdpcmVSb3cubG9jYWxOb2RlSUQ7XG4gIH0pO1xuXG4gIHRoaXMuZm9yd2FyZE1lc3NhZ2VUb05vZGVJRHNfKG1lc3NhZ2UsIGNvbm5lY3RlZE5vZGVJRHMsIGZ1bmN0aW9uIChlcnIsIHJlc3VsdCkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHRoaXMubG9nKG1lc3NhZ2UucGF5bG9hZCwgTmV0U2ltTG9nRW50cnkuTG9nU3RhdHVzLkRST1BQRUQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxvZyhtZXNzYWdlLnBheWxvYWQsIE5ldFNpbUxvZ0VudHJ5LkxvZ1N0YXR1cy5TVUNDRVNTKTtcbiAgICB9XG4gICAgb25Db21wbGV0ZShlcnIsIHJlc3VsdCk7XG4gIH0uYmluZCh0aGlzKSk7XG59O1xuXG4vKipcbiAqIEZvcndhcmQgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gdGhlIGxpc3Qgb2Ygbm9kZSBJRHMgcHJvdmlkZWQuXG4gKiBUaGlzIGZ1bmN0aW9uIHdvcmtzIGJ5IGNhbGxpbmcgaXRzZWxmIHJlY3Vyc2l2ZWx5IHdpdGggdGhlIHRhaWwgb2YgdGhlXG4gKiBub2RlIElEIGxpc3QgZWFjaCB0aW1lIGl0IGZpbmlzaGVzIHNlbmRpbmcgb25lIG9mIHRoZSBtZXNzYWdlcywgc29cbiAqIHRpbWluZyBvbiB0aGlzIFwiYnJvYWRjYXN0XCIgd29uJ3QgYmUgZXhhY3RseSBjb3JyZWN0IC0gdGhhdCdzIHByb2JhYmx5IG9rYXlcbiAqIHRob3VnaCwgZXNwZWNpYWxseSBhdCB0aGUgcG9pbnQgaW4gdGhlIGN1cnJpY3VsdW0gd2hlcmUgdGhpcyBpcyB1c2VkLlxuICogQHBhcmFtIHtOZXRTaW1NZXNzYWdlfSBtZXNzYWdlXG4gKiBAcGFyYW0ge251bWJlcltdfSBub2RlSURzXG4gKiBAcGFyYW0geyFOb2RlU3R5bGVDYWxsYmFja30gb25Db21wbGV0ZVxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUuZm9yd2FyZE1lc3NhZ2VUb05vZGVJRHNfID0gZnVuY3Rpb24gKG1lc3NhZ2UsXG4gICAgbm9kZUlEcywgb25Db21wbGV0ZSkge1xuXG4gIHZhciBtZXNzYWdlcyA9IG5vZGVJRHMubWFwKGZ1bmN0aW9uKG5vZGVJRCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGZyb21Ob2RlSUQ6IHRoaXMuZW50aXR5SUQsXG4gICAgICAgIHRvTm9kZUlEOiBub2RlSUQsXG4gICAgICAgIHNpbXVsYXRlZEJ5OiBub2RlSUQsXG4gICAgICAgIHBheWxvYWQ6IG1lc3NhZ2UucGF5bG9hZFxuICAgICAgfTtcbiAgfSwgdGhpcyk7XG5cbiAgTmV0U2ltTWVzc2FnZS5zZW5kTWFueSh0aGlzLnNoYXJkXywgbWVzc2FnZXMsIG9uQ29tcGxldGUpO1xufTtcblxuLyoqXG4gKiBSZWFkIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGZpbmQgaXRzIGRlc3RpbmF0aW9uIGFkZHJlc3MsIHRyeSBhbmQgbWFwIHRoYXRcbiAqIGFkZHJlc3MgdG8gb25lIG9mIG91ciBjb25uZWN0aW9ucywgYW5kIHNlbmQgdGhlIG1lc3NhZ2UgcGF5bG9hZCB0b1xuICogdGhlIG5ldyBhZGRyZXNzLlxuICpcbiAqIEBwYXJhbSB7TmV0U2ltTWVzc2FnZX0gbWVzc2FnZVxuICogQHBhcmFtIHshTm9kZVN0eWxlQ2FsbGJhY2t9IG9uQ29tcGxldGVcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLmZvcndhcmRNZXNzYWdlVG9SZWNpcGllbnRfID0gZnVuY3Rpb24gKG1lc3NhZ2UsIG9uQ29tcGxldGUpIHtcbiAgdmFyIHRvQWRkcmVzcztcbiAgdmFyIHJvdXRlck5vZGVJRCA9IHRoaXMuZW50aXR5SUQ7XG5cbiAgLy8gRmluZCBhIGNvbm5lY3Rpb24gdG8gcm91dGUgdGhpcyBtZXNzYWdlIHRvLlxuICB0cnkge1xuICAgIHZhciBwYWNrZXQgPSBuZXcgUGFja2V0KHRoaXMucGFja2V0U3BlY18sIG1lc3NhZ2UucGF5bG9hZCk7XG4gICAgdG9BZGRyZXNzID0gcGFja2V0LmdldEhlYWRlckFzQWRkcmVzc1N0cmluZyhQYWNrZXQuSGVhZGVyVHlwZS5UT19BRERSRVNTKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBsb2dnZXIud2FybihcIlBhY2tldCBub3QgcmVhZGFibGUgYnkgcm91dGVyXCIpO1xuICAgIHRoaXMubG9nKG1lc3NhZ2UucGF5bG9hZCwgTmV0U2ltTG9nRW50cnkuTG9nU3RhdHVzLkRST1BQRUQpO1xuICAgIG9uQ29tcGxldGUobnVsbCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGRlc3RpbmF0aW9uTm9kZSA9IHRoaXMuZ2V0TmV4dE5vZGVUb3dhcmRBZGRyZXNzXyh0b0FkZHJlc3MsXG4gICAgICBtZXNzYWdlLmV4dHJhSG9wc1JlbWFpbmluZywgbWVzc2FnZS52aXNpdGVkTm9kZUlEcyk7XG4gIGlmIChkZXN0aW5hdGlvbk5vZGUgPT09IG51bGwpIHtcbiAgICAvLyBDYW4ndCBmaW5kIG9yIHJlYWNoIHRoZSBhZGRyZXNzIHdpdGhpbiB0aGUgc2ltdWxhdGlvblxuICAgIGxvZ2dlci53YXJuKFwiRGVzdGluYXRpb24gYWRkcmVzcyBub3QgcmVhY2hhYmxlXCIpO1xuICAgIHRoaXMubG9nKG1lc3NhZ2UucGF5bG9hZCwgTmV0U2ltTG9nRW50cnkuTG9nU3RhdHVzLkRST1BQRUQpO1xuICAgIG9uQ29tcGxldGUobnVsbCk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2UgaWYgKGRlc3RpbmF0aW9uTm9kZSA9PT0gdGhpcyAmJiB0b0FkZHJlc3MgPT09IHRoaXMuZ2V0QWRkcmVzcygpKSB7XG4gICAgLy8gVGhpcyByb3V0ZXIgSVMgdGhlIHBhY2tldCdzIGRlc3RpbmF0aW9uLCBpdCdzIGRvbmUuXG4gICAgbG9nZ2VyLndhcm4oXCJQYWNrZXQgc3RvcHBlZCBhdCByb3V0ZXIuXCIpO1xuICAgIHRoaXMubG9nKG1lc3NhZ2UucGF5bG9hZCwgTmV0U2ltTG9nRW50cnkuTG9nU3RhdHVzLlNVQ0NFU1MpO1xuICAgIG9uQ29tcGxldGUobnVsbCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gVE9ETzogSGFuZGxlIGJhZCBzdGF0ZSB3aGVyZSBtb3JlIHRoYW4gb25lIHdpcmUgbWF0Y2hlcyBkZXN0IGFkZHJlc3M/XG5cbiAgLy8gVGhlIHNlbmRlciBzaW11bGF0ZXMgYSBtZXNzYWdlIHVudGlsIGl0IHJlYWNoZXMgdGhlIGZpbmFsIGxlZyBvZiBpdHMgdHJpcCxcbiAgLy8gd2hlbiBpdCdzIGdvaW5nIHRvIGEgY2xpZW50IG5vZGUuICBBdCB0aGF0IHBvaW50LCB0aGUgcmVjaXBpZW50IHRha2VzIG92ZXIuXG4gIHZhciBzaW11bGF0aW5nTm9kZUlEID0gbWVzc2FnZS5zaW11bGF0ZWRCeTtcbiAgaWYgKGRlc3RpbmF0aW9uTm9kZS5nZXROb2RlVHlwZSgpID09PSBOb2RlVHlwZS5DTElFTlQpIHtcbiAgICBzaW11bGF0aW5nTm9kZUlEID0gZGVzdGluYXRpb25Ob2RlLmVudGl0eUlEO1xuICB9XG5cbiAgLy8gQ3JlYXRlIGEgbmV3IG1lc3NhZ2Ugd2l0aCBhIG5ldyBwYXlsb2FkLlxuICBOZXRTaW1NZXNzYWdlLnNlbmQoXG4gICAgICB0aGlzLnNoYXJkXyxcbiAgICAgIHtcbiAgICAgICAgZnJvbU5vZGVJRDogcm91dGVyTm9kZUlELFxuICAgICAgICB0b05vZGVJRDogZGVzdGluYXRpb25Ob2RlLmVudGl0eUlELFxuICAgICAgICBzaW11bGF0ZWRCeTogc2ltdWxhdGluZ05vZGVJRCxcbiAgICAgICAgcGF5bG9hZDogbWVzc2FnZS5wYXlsb2FkLFxuICAgICAgICBleHRyYUhvcHNSZW1haW5pbmc6IE1hdGgubWF4KDAsIG1lc3NhZ2UuZXh0cmFIb3BzUmVtYWluaW5nIC0gMSksXG4gICAgICAgIHZpc2l0ZWROb2RlSURzOiBtZXNzYWdlLnZpc2l0ZWROb2RlSURzLmNvbmNhdCh0aGlzLmVudGl0eUlEKVxuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uIChlcnIsIHJlc3VsdCkge1xuICAgICAgICB0aGlzLmxvZyhtZXNzYWdlLnBheWxvYWQsIE5ldFNpbUxvZ0VudHJ5LkxvZ1N0YXR1cy5TVUNDRVNTKTtcbiAgICAgICAgb25Db21wbGV0ZShlcnIsIHJlc3VsdCk7XG4gICAgICB9LmJpbmQodGhpcylcbiAgKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtOZXRTaW1NZXNzYWdlfSBtZXNzYWdlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVFJVRSBpZiB0aGUgZ2l2ZW4gbWVzc2FnZSBzaG91bGQgYmUgb3BlcmF0ZWQgb24gYnkgdGhlIGxvY2FsXG4gKiAgICAgICAgICBzaW11bGF0aW9uLCBGQUxTRSBpZiBhbm90aGVyIHVzZXIncyBzaW11bGF0aW9uIHNob3VsZCBoYW5kbGUgaXQuXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5sb2NhbFNpbXVsYXRpb25Pd25zTWVzc2FnZV8gPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICByZXR1cm4gdGhpcy5zaW11bGF0ZUZvclNlbmRlcl8gJiZcbiAgICAgIG1lc3NhZ2Uuc2ltdWxhdGVkQnkgPT09IHRoaXMuc2ltdWxhdGVGb3JTZW5kZXJfO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge05ldFNpbU1lc3NhZ2V9IG1lc3NhZ2VcbiAqIEByZXR1cm5zIHtudW1iZXJ9IHRpbWUgcmVxdWlyZWQgdG8gcHJvY2VzcyB0aGlzIG1lc3NhZ2UsIGluIG1pbGxpc2Vjb25kcy5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLmNhbGN1bGF0ZVByb2Nlc3NpbmdEdXJhdGlvbkZvck1lc3NhZ2VfID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgaWYgKHRoaXMuYmFuZHdpZHRoID09PSBJbmZpbml0eSkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIHJldHVybiBtZXNzYWdlLnBheWxvYWQubGVuZ3RoICogMTAwMCAvIHRoaXMuYmFuZHdpZHRoO1xufTtcblxuLyoqXG4gKiBVcGRhdGUgcXVldWUgb2YgYWxsIGF1dG8tZG5zIG1lc3NhZ2VzLCB3aGljaCBjYW4gYmUgdXNlZCBmb3Igc3RhdHMgb3IgbGltaXRpbmcuXG4gKiBAcGFyYW0ge05ldFNpbU1lc3NhZ2VbXX0gbWVzc2FnZXNcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLnVwZGF0ZUF1dG9EbnNRdWV1ZV8gPSBmdW5jdGlvbiAobWVzc2FnZXMpIHtcbiAgdmFyIG5ld1F1ZXVlID0gbWVzc2FnZXMuZmlsdGVyKHRoaXMuaXNNZXNzYWdlVG9BdXRvRG5zXy5iaW5kKHRoaXMpKTtcbiAgaWYgKF8uaXNFcXVhbCh0aGlzLmF1dG9EbnNRdWV1ZV8sIG5ld1F1ZXVlKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuYXV0b0Ruc1F1ZXVlXyA9IG5ld1F1ZXVlO1xuICAvLyBQcm9wYWdhdGUgbm90aWZpY2F0aW9uIG9mIHF1ZXVlIGNoYW5nZT9cbiAgLy8gV29yayB3aWxsIHByb2NlZWQgb24gbmV4dCB0aWNrXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7TmV0U2ltTWVzc2FnZX0gbWVzc2FnZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuTmV0U2ltUm91dGVyTm9kZS5wcm90b3R5cGUuaXNNZXNzYWdlVG9BdXRvRG5zXyA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gIHZhciBwYWNrZXQsIHRvQWRkcmVzcztcbiAgdHJ5IHtcbiAgICBwYWNrZXQgPSBuZXcgUGFja2V0KHRoaXMucGFja2V0U3BlY18sIG1lc3NhZ2UucGF5bG9hZCk7XG4gICAgdG9BZGRyZXNzID0gcGFja2V0LmdldEhlYWRlckFzQWRkcmVzc1N0cmluZyhQYWNrZXQuSGVhZGVyVHlwZS5UT19BRERSRVNTKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBsb2dnZXIud2FybihcIlBhY2tldCBub3QgcmVhZGFibGUgYnkgYXV0by1ETlM6IFwiICsgZXJyb3IpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIE1lc3NhZ2VzIHRvIHRoZSBhdXRvLWRucyBhcmUgYm90aCB0byBhbmQgZnJvbSB0aGUgcm91dGVyIG5vZGUsIGFuZFxuICAvLyBhZGRyZXNzZWQgdG8gdGhlIEROUy5cbiAgcmV0dXJuIG1lc3NhZ2UudG9Ob2RlSUQgPT09IHRoaXMuZW50aXR5SUQgJiZcbiAgICAgIG1lc3NhZ2UuZnJvbU5vZGVJRCA9PT0gdGhpcy5lbnRpdHlJRCAmJlxuICAgICAgdG9BZGRyZXNzID09PSB0aGlzLmdldEF1dG9EbnNBZGRyZXNzKCk7XG59O1xuXG4vKipcbiAqIEJhdGNoLXByb2Nlc3MgRE5TIHJlcXVlc3RzLCBnZW5lcmF0aW5nIHJlc3BvbnNlcyB3aGVyZXZlciBwb3NzaWJsZS5cbiAqIEBwYXJhbSB7TmV0U2ltTWVzc2FnZVtdfSBtZXNzYWdlc1xuICogQHBhcmFtIHshTm9kZVN0eWxlQ2FsbGJhY2t9IG9uQ29tcGxldGVcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLnByb2Nlc3NBdXRvRG5zUmVxdWVzdHNfID0gZnVuY3Rpb24gKG1lc3NhZ2VzLCBvbkNvbXBsZXRlKSB7XG4gIC8vIDEuIFJlbW92ZSB0aGUgcmVxdWVzdHMgZnJvbSB0aGUgd2lyZVxuICBOZXRTaW1FbnRpdHkuZGVzdHJveUVudGl0aWVzKG1lc3NhZ2VzLCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBvbkNvbXBsZXRlKGVyciwgcmVzdWx0KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyAyLiBHZW5lcmF0ZSBhbGwgcmVzcG9uc2VzLCBhc3luY2hyb25vdXNseS5cbiAgICB0aGlzLmdlbmVyYXRlRG5zUmVzcG9uc2VzXyhtZXNzYWdlcywgb25Db21wbGV0ZSk7XG4gIH0uYmluZCh0aGlzKSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7TmV0U2ltTWVzc2FnZVtdfSBtZXNzYWdlc1xuICogQHBhcmFtIHshTm9kZVN0eWxlQ2FsbGJhY2t9IG9uQ29tcGxldGVcbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVJvdXRlck5vZGUucHJvdG90eXBlLmdlbmVyYXRlRG5zUmVzcG9uc2VzXyA9IGZ1bmN0aW9uIChtZXNzYWdlcywgb25Db21wbGV0ZSkge1xuICBpZiAobWVzc2FnZXMubGVuZ3RoID09PSAwKSB7XG4gICAgb25Db21wbGV0ZShudWxsKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBQcm9jZXNzIGhlYWRcbiAgdGhpcy5nZW5lcmF0ZURuc1Jlc3BvbnNlXyhtZXNzYWdlc1swXSwgZnVuY3Rpb24gKGVyciwgcmVzdWx0KSB7XG4gICAgaWYgKGVycikge1xuICAgICAgb25Db21wbGV0ZShlcnIsIHJlc3VsdCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gUHJvY2VzcyB0YWlsXG4gICAgdGhpcy5nZW5lcmF0ZURuc1Jlc3BvbnNlc18obWVzc2FnZXMuc2xpY2UoMSksIG9uQ29tcGxldGUpO1xuICB9LmJpbmQodGhpcykpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge05ldFNpbU1lc3NhZ2V9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7IU5vZGVTdHlsZUNhbGxiYWNrfSBvbkNvbXBsZXRlXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1Sb3V0ZXJOb2RlLnByb3RvdHlwZS5nZW5lcmF0ZURuc1Jlc3BvbnNlXyA9IGZ1bmN0aW9uIChtZXNzYWdlLCBvbkNvbXBsZXRlKSB7XG4gIHZhciBwYWNrZXQsIGZyb21BZGRyZXNzLCBxdWVyeSwgcmVzcG9uc2VIZWFkZXJzLCByZXNwb25zZUJvZHksIHJlc3BvbnNlQmluYXJ5O1xuICB2YXIgcm91dGVyTm9kZUlEID0gdGhpcy5lbnRpdHlJRDtcbiAgdmFyIGF1dG9EbnNOb2RlSUQgPSB0aGlzLmVudGl0eUlEO1xuXG4gIC8vIEV4dHJhY3QgbWVzc2FnZSBjb250ZW50c1xuICB0cnkge1xuICAgIHBhY2tldCA9IG5ldyBQYWNrZXQodGhpcy5wYWNrZXRTcGVjXywgbWVzc2FnZS5wYXlsb2FkKTtcbiAgICBmcm9tQWRkcmVzcyA9IHBhY2tldC5nZXRIZWFkZXJBc0FkZHJlc3NTdHJpbmcoUGFja2V0LkhlYWRlclR5cGUuRlJPTV9BRERSRVNTKTtcbiAgICBxdWVyeSA9IHBhY2tldC5nZXRCb2R5QXNBc2NpaShCSVRTX1BFUl9CWVRFKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAvLyBNYWxmb3JtZWQgcGFja2V0LCBpZ25vcmVcbiAgICBvbkNvbXBsZXRlKGVycm9yKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBDaGVjayB0aGF0IHRoZSBxdWVyeSBpcyB3ZWxsLWZvcm1lZFxuICAvLyBSZWdleCBtYXRjaCBcIkdFVCBbaG9zdG5hbWVzLi4uXVwiXG4gIC8vIFRoZW4gYmVsb3csIHdlJ2xsIHNwbGl0IHRoZSBob3N0bmFtZXMgb24gd2hpdGVzcGFjZSB0byBwcm9jZXNzIHRoZW0uXG4gIHZhciByZXF1ZXN0TWF0Y2ggPSBxdWVyeS5tYXRjaCgvR0VUXFxzKyhcXFMuKikvKTtcbiAgaWYgKHJlcXVlc3RNYXRjaCAhPT0gbnVsbCkge1xuICAgIC8vIEdvb2QgcmVxdWVzdCwgbG9vayB1cCBhbGwgYWRkcmVzc2VzIGFuZCBidWlsZCB1cCByZXNwb25zZVxuICAgIC8vIFNraXBwaW5nIGZpcnN0IG1hdGNoLCB3aGljaCBpcyB0aGUgZnVsbCByZWdleFxuICAgIHZhciByZXNwb25zZXMgPSByZXF1ZXN0TWF0Y2hbMV0uc3BsaXQoL1xccysvKS5tYXAoZnVuY3Rpb24gKHF1ZXJ5SG9zdG5hbWUpIHtcbiAgICAgIHZhciBhZGRyZXNzID0gdGhpcy5nZXRBZGRyZXNzRm9ySG9zdG5hbWVfKHF1ZXJ5SG9zdG5hbWUpO1xuICAgICAgcmV0dXJuIHF1ZXJ5SG9zdG5hbWUgKyAnOicgKyB1dGlscy52YWx1ZU9yKGFkZHJlc3MsIEFVVE9fRE5TX05PVF9GT1VORCk7XG4gICAgfS5iaW5kKHRoaXMpKTtcbiAgICByZXNwb25zZUJvZHkgPSByZXNwb25zZXMuam9pbignICcpO1xuICB9IGVsc2Uge1xuICAgIC8vIE1hbGZvcm1lZCByZXF1ZXN0LCBzZW5kIGJhY2sgaW5zdHJ1Y3Rpb25zXG4gICAgcmVzcG9uc2VCb2R5ID0gaTE4bi5hdXRvRG5zVXNhZ2VNZXNzYWdlKCk7XG4gIH1cblxuICByZXNwb25zZUhlYWRlcnMgPSB7XG4gICAgZnJvbUFkZHJlc3M6dGhpcy5nZXRBdXRvRG5zQWRkcmVzcygpLFxuICAgIHRvQWRkcmVzczogZnJvbUFkZHJlc3MsXG4gICAgcGFja2V0SW5kZXg6IDEsXG4gICAgcGFja2V0Q291bnQ6IDFcbiAgfTtcblxuICByZXNwb25zZUJpbmFyeSA9IHBhY2tldC5lbmNvZGVyLmNvbmNhdGVuYXRlQmluYXJ5KFxuICAgICAgcGFja2V0LmVuY29kZXIubWFrZUJpbmFyeUhlYWRlcnMocmVzcG9uc2VIZWFkZXJzKSxcbiAgICAgIGFzY2lpVG9CaW5hcnkocmVzcG9uc2VCb2R5LCBCSVRTX1BFUl9CWVRFKSk7XG5cbiAgTmV0U2ltTWVzc2FnZS5zZW5kKFxuICAgICAgdGhpcy5zaGFyZF8sXG4gICAgICB7XG4gICAgICAgIGZyb21Ob2RlSUQ6IGF1dG9EbnNOb2RlSUQsXG4gICAgICAgIHRvTm9kZUlEOiByb3V0ZXJOb2RlSUQsXG4gICAgICAgIHNpbXVsYXRlZEJ5OiBtZXNzYWdlLnNpbXVsYXRlZEJ5LFxuICAgICAgICBwYXlsb2FkOiByZXNwb25zZUJpbmFyeVxuICAgICAgfSxcbiAgICAgIG9uQ29tcGxldGUpO1xufTtcbiIsIi8qKlxuICogQG92ZXJ2aWV3IFNpbXVsYXRpb24gZW50aXR5IGZvciBhIG1lc3NhZ2UgYmV0d2VlbiB0d28gbm9kZXMuXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIE5ldFNpbUVudGl0eSA9IHJlcXVpcmUoJy4vTmV0U2ltRW50aXR5Jyk7XG52YXIgRGF0YUNvbnZlcnRlcnMgPSByZXF1aXJlKCcuL0RhdGFDb252ZXJ0ZXJzJyk7XG52YXIgYmFzZTY0VG9CaW5hcnkgPSBEYXRhQ29udmVydGVycy5iYXNlNjRUb0JpbmFyeTtcbnZhciBiaW5hcnlUb0Jhc2U2NCA9IERhdGFDb252ZXJ0ZXJzLmJpbmFyeVRvQmFzZTY0O1xudmFyIE5ldFNpbUxvZ2dlciA9IHJlcXVpcmUoJy4vTmV0U2ltTG9nZ2VyJyk7XG5cbnZhciBsb2dnZXIgPSBOZXRTaW1Mb2dnZXIuZ2V0U2luZ2xldG9uKCk7XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gTWVzc2FnZURhdGFcbiAqIEBwcm9wZXJ0eSB7IW51bWJlcn0gZnJvbU5vZGVJRCAtIHNlbmRlciBub2RlIElEXG4gKiBAcHJvcGVydHkgeyFudW1iZXJ9IHRvTm9kZUlEIC0gZGVzdGluYXRpb24gbm9kZSBJRFxuICogQHByb3BlcnR5IHshbnVtYmVyfSBzaW11bGF0ZWRCeSAtIG5vZGUgSUQgb2YgY2xpZW50IHNpbXVsYXRpbmcgbWVzc2FnZVxuICogQHByb3BlcnR5IHshc3RyaW5nfSBwYXlsb2FkIC0gbWVzc2FnZSBjb250ZW50IGluIGEgYmluYXJ5IHN0cmluZ1xuICogQHByb3BlcnR5IHtudW1iZXJ9IGV4dHJhSG9wc1JlbWFpbmluZ1xuICogQHByb3BlcnR5IHtudW1iZXJbXX0gdmlzaXRlZE5vZGVJRHNcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IE1lc3NhZ2VSb3dcbiAqIEBwcm9wZXJ0eSB7IW51bWJlcn0gZnJvbU5vZGVJRCAtIHRoaXMgbWVzc2FnZSBpbi1mbGlnaHQtZnJvbSBub2RlXG4gKiBAcHJvcGVydHkgeyFudW1iZXJ9IHRvTm9kZUlEIC0gdGhpcyBtZXNzYWdlIGluLWZsaWdodC10byBub2RlXG4gKiBAcHJvcGVydHkgeyFudW1iZXJ9IHNpbXVsYXRlZEJ5IC0gTm9kZSBJRCBvZiB0aGUgY2xpZW50IHJlc3BvbnNpYmxlIGZvclxuICogICAgICAgICAgIGFsbCBvcGVyYXRpb25zIGludm9sdmluZyB0aGlzIG1lc3NhZ2UuXG4gKiBAcHJvcGVydHkgeyFCYXNlNjRQYXlsb2FkfSBiYXNlNjRQYXlsb2FkIC0gYmFzZTY0LWVuY29kZWQgYmluYXJ5XG4gKiAgICAgICAgICAgbWVzc2FnZSBjb250ZW50LCBhbGwgb2Ygd2hpY2ggY2FuIGJlIGV4cG9zZWQgdG8gdGhlXG4gKiAgICAgICAgICAgc3R1ZGVudC4gIE1heSBjb250YWluIGhlYWRlcnMgb2YgaXRzIG93bi5cbiAqIEBwcm9wZXJ0eSB7IW51bWJlcn0gZXh0cmFIb3BzUmVtYWluaW5nXG4gKiBAcHJvcGVydHkgeyFudW1iZXJbXX0gdmlzaXRlZE5vZGVJRHNcbiAqL1xuXG4vKipcbiAqIExvY2FsIGNvbnRyb2xsZXIgZm9yIGEgbWVzc2FnZSB0aGF0IGlzICdvbiB0aGUgd2lyZSdcbiAqXG4gKiBEb2Vzbid0IGFjdHVhbGx5IGhhdmUgYW55IGFzc29jaWF0aW9uIHdpdGggdGhlIHdpcmUgLSBvbmUgY291bGQsXG4gKiB0aGVvcmV0aWNhbGx5LCBzZW5kIGEgbWVzc2FnZSBmcm9tIGFueSBub2RlIGluIHRoZSBzaW11bGF0aW9uIHRvIGFueSBvdGhlclxuICogbm9kZSBpbiB0aGUgc2ltdWxhdGlvbi5cbiAqXG4gKiBBbnkgbWVzc2FnZSB0aGF0IGV4aXN0cyBpbiB0aGUgdGFibGUgaXMgJ2luIHRyYW5zaXQnIHRvIGEgbm9kZS4gIE5vZGVzXG4gKiBzaG91bGQgcmVtb3ZlIG1lc3NhZ2VzIGFzIHNvb24gYXMgdGhleSByZWNlaXZlIHRoZW0uXG4gKlxuICogQHBhcmFtIHshTmV0U2ltU2hhcmR9IHNoYXJkIC0gVGhlIHNoYXJkIHdoZXJlIHRoaXMgd2lyZSBsaXZlcy5cbiAqIEBwYXJhbSB7TWVzc2FnZVJvd30gW21lc3NhZ2VSb3ddIC0gQSByb3cgb3V0IG9mIHRoZSBfbWVzc2FnZSB0YWJsZSBvbiB0aGVcbiAqICAgICAgICBzaGFyZC4gIElmIHByb3ZpZGVkLCB3aWxsIGluaXRpYWxpemUgdGhpcyBtZXNzYWdlIHdpdGggdGhlIGdpdmVuXG4gKiAgICAgICAgZGF0YS4gIElmIG5vdCwgdGhpcyBtZXNzYWdlIHdpbGwgaW5pdGlhbGl6ZSB0byBkZWZhdWx0IHZhbHVlcy5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGF1Z21lbnRzIE5ldFNpbUVudGl0eVxuICogQGltcGxlbWVudHMgTWVzc2FnZURhdGFcbiAqL1xudmFyIE5ldFNpbU1lc3NhZ2UgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzaGFyZCwgbWVzc2FnZVJvdykge1xuICBtZXNzYWdlUm93ID0gbWVzc2FnZVJvdyAhPT0gdW5kZWZpbmVkID8gbWVzc2FnZVJvdyA6IHt9O1xuICBOZXRTaW1FbnRpdHkuY2FsbCh0aGlzLCBzaGFyZCwgbWVzc2FnZVJvdyk7XG5cbiAgLyoqXG4gICAqIE5vZGUgSUQgdGhhdCB0aGlzIG1lc3NhZ2UgaXMgJ2luIHRyYW5zaXQnIGZyb20uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLmZyb21Ob2RlSUQgPSBtZXNzYWdlUm93LmZyb21Ob2RlSUQ7XG5cbiAgLyoqXG4gICAqIE5vZGUgSUQgdGhhdCB0aGlzIG1lc3NhZ2UgaXMgJ2luIHRyYW5zaXQnIHRvLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy50b05vZGVJRCA9IG1lc3NhZ2VSb3cudG9Ob2RlSUQ7XG5cbiAgLyoqXG4gICAqIElEIG9mIHRoZSBub2RlIHJlc3BvbnNpYmxlIGZvciBvcGVyYXRpb25zIG9uIHRoaXMgbWVzc2FnZS5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRoaXMuc2ltdWxhdGVkQnkgPSBtZXNzYWdlUm93LnNpbXVsYXRlZEJ5O1xuXG4gIC8qKlxuICAgKiBBbGwgb3RoZXIgbWVzc2FnZSBjb250ZW50LCBpbmNsdWRpbmcgdGhlICdwYWNrZXRzJyBzdHVkZW50cyB3aWxsIHNlbmQuXG4gICAqIEB0eXBlIHsqfVxuICAgKi9cbiAgdGhpcy5wYXlsb2FkID0gJyc7XG4gIGlmIChtZXNzYWdlUm93LmJhc2U2NFBheWxvYWQpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5wYXlsb2FkID0gYmFzZTY0VG9CaW5hcnkobWVzc2FnZVJvdy5iYXNlNjRQYXlsb2FkLnN0cmluZyxcbiAgICAgICAgICBtZXNzYWdlUm93LmJhc2U2NFBheWxvYWQubGVuKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoZS5tZXNzYWdlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSWYgdGhpcyBpcyBhbiBpbnRlci1yb3V0ZXIgbWVzc2FnZSwgdGhlIG51bWJlciBvZiByb3V0ZXJzIHRoaXNcbiAgICogbWVzc2FnZSBzaG91bGQgdHJ5IHRvIHZpc2l0IGJlZm9yZSBnb2luZyB0byB0aGUgcm91dGVyIHRoYXRcbiAgICogd2lsbCBhY3R1YWxseSBsZWFkIHRvIGl0cyBkZXN0aW5hdGlvbi5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRoaXMuZXh0cmFIb3BzUmVtYWluaW5nID0gdXRpbHMudmFsdWVPcihtZXNzYWdlUm93LmV4dHJhSG9wc1JlbWFpbmluZywgMCk7XG5cbiAgLyoqXG4gICAqIEEgaGlzdG9yeSBvZiByb3V0ZXIgbm9kZSBJRHMgdGhpcyBtZXNzYWdlIGhhcyB2aXNpdGVkLlxuICAgKiBAdHlwZSB7bnVtYmVyW119XG4gICAqL1xuICB0aGlzLnZpc2l0ZWROb2RlSURzID0gdXRpbHMudmFsdWVPcihtZXNzYWdlUm93LnZpc2l0ZWROb2RlSURzLCBbXSk7XG59O1xuTmV0U2ltTWVzc2FnZS5pbmhlcml0cyhOZXRTaW1FbnRpdHkpO1xuXG4vKipcbiAqIFN0YXRpYyByb3cgY29uc3RydWN0aW9uIG1ldGhvZC4gVXNlZCBieSBkeW5hbWljIGJ1aWxkUm93IG1ldGhvZCBhbmRcbiAqIGJ5IHN0YXRpYyBhc3luYyBBUEkgY3JlYXRpb24gbWV0aG9kcyB0byBjcmVhdGUgYSBwcm9wZXJseS1mb3JtYXR0ZWRcbiAqIHJvdyBmb3IgZGF0YWJhc2UgaW5zZXJ0aW9uXG4gKiBAcGFyYW0ge01lc3NhZ2VEYXRhfSBtZXNzYWdlRGF0YVxuICogQHJldHVybnMge01lc3NhZ2VSb3d9XG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IGlmIHBheWxvYWQgaXMgaW52YWxpZFxuICovXG5OZXRTaW1NZXNzYWdlLmJ1aWxkUm93RnJvbURhdGEgPSBmdW5jdGlvbiAobWVzc2FnZURhdGEpIHtcbiAgcmV0dXJuIHtcbiAgICBmcm9tTm9kZUlEOiBtZXNzYWdlRGF0YS5mcm9tTm9kZUlELFxuICAgIHRvTm9kZUlEOiBtZXNzYWdlRGF0YS50b05vZGVJRCxcbiAgICBzaW11bGF0ZWRCeTogbWVzc2FnZURhdGEuc2ltdWxhdGVkQnksXG4gICAgYmFzZTY0UGF5bG9hZDogYmluYXJ5VG9CYXNlNjQobWVzc2FnZURhdGEucGF5bG9hZCksXG4gICAgZXh0cmFIb3BzUmVtYWluaW5nOiB1dGlscy52YWx1ZU9yKG1lc3NhZ2VEYXRhLmV4dHJhSG9wc1JlbWFpbmluZywgMCksXG4gICAgdmlzaXRlZE5vZGVJRHM6IHV0aWxzLnZhbHVlT3IobWVzc2FnZURhdGEudmlzaXRlZE5vZGVJRHMsIFtdKVxuICB9O1xufTtcblxuLyoqXG4gKiBTdGF0aWMgYXN5bmMgY3JlYXRpb24gbWV0aG9kLiAgQ3JlYXRlcyBhIG5ldyBtZXNzYWdlIG9uIHRoZSBnaXZlbiBzaGFyZCxcbiAqIGFuZCB0aGVuIGNhbGxzIHRoZSBjYWxsYmFjayB3aXRoIGEgc3VjY2VzcyBib29sZWFuLlxuICogQHBhcmFtIHshTmV0U2ltU2hhcmR9IHNoYXJkXG4gKiBAcGFyYW0geyFNZXNzYWdlRGF0YX0gbWVzc2FnZURhdGFcbiAqIEBwYXJhbSB7IU5vZGVTdHlsZUNhbGxiYWNrfSBvbkNvbXBsZXRlIChzdWNjZXNzKVxuICovXG5OZXRTaW1NZXNzYWdlLnNlbmQgPSBmdW5jdGlvbiAoc2hhcmQsIG1lc3NhZ2VEYXRhLCBvbkNvbXBsZXRlKSB7XG4gIHRyeSB7XG4gICAgdmFyIHJvdyA9IE5ldFNpbU1lc3NhZ2UuYnVpbGRSb3dGcm9tRGF0YShtZXNzYWdlRGF0YSk7XG4gICAgc2hhcmQubWVzc2FnZVRhYmxlLmNyZWF0ZShyb3csIG9uQ29tcGxldGUpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBvbkNvbXBsZXRlKGVyciwgbnVsbCk7XG4gIH1cbn07XG5cbi8qKlxuICogU3RhdGljIGFzeW5jIG11bHRpLWNyZWF0ZSBtZXRob2QuIENyZWF0ZXMgbmV3IG1lc3NhZ2VzIG9uIHRoZSBnaXZlbiBzaGFyZCxcbiAqIGFuZCB0aGVuIGNhbGxzIHRoZSBjYWxsYmFjayB3aXRoIGEgc3VjY2VzcyBib29sZWFuLlxuICogQHBhcmFtIHshTmV0U2ltU2hhcmR9IHNoYXJkXG4gKiBAcGFyYW0ge01lc3NhZ2VEYXRhW119IG1lc3NhZ2VEYXRhc1xuICogQHBhcmFtIHshTm9kZVN0eWxlQ2FsbGJhY2t9IG9uQ29tcGxldGUgKHN1Y2Nlc3MpXG4gKi9cbk5ldFNpbU1lc3NhZ2Uuc2VuZE1hbnkgPSBmdW5jdGlvbiAoc2hhcmQsIG1lc3NhZ2VEYXRhcywgb25Db21wbGV0ZSkge1xuICB0cnkge1xuICAgIHZhciByb3dzID0gbWVzc2FnZURhdGFzLm1hcChOZXRTaW1NZXNzYWdlLmJ1aWxkUm93RnJvbURhdGEpO1xuICAgIHNoYXJkLm1lc3NhZ2VUYWJsZS5tdWx0aUNyZWF0ZShyb3dzLCBvbkNvbXBsZXRlKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgb25Db21wbGV0ZShlcnIsIG51bGwpO1xuICB9XG59O1xuXG4vKipcbiAqIFN0YXRpYyBoZWxwZXIuXG4gKiBAcGFyYW0ge05ldFNpbU1lc3NhZ2V9IG1lc3NhZ2VcbiAqIEByZXR1cm5zIHtib29sZWFufSBUUlVFIGlmZiB0aGUgZ2l2ZW4gbWVzc2FnZSBpcyB3ZWxsLWZvcm1lZC5cbiAqL1xuTmV0U2ltTWVzc2FnZS5pc1ZhbGlkID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgcmV0dXJuIC9eWzAxXSokLy50ZXN0KG1lc3NhZ2UucGF5bG9hZCk7XG59O1xuXG4vKipcbiAqIEhlbHBlciB0aGF0IGdldHMgdGhlIHdpcmVzIHRhYmxlIGZvciB0aGUgY29uZmlndXJlZCBpbnN0YW5jZS5cbiAqIEByZXR1cm5zIHtOZXRTaW1UYWJsZX1cbiAqL1xuTmV0U2ltTWVzc2FnZS5wcm90b3R5cGUuZ2V0VGFibGUgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLnNoYXJkXy5tZXNzYWdlVGFibGU7XG59O1xuXG4vKipcbiAqIEJ1aWxkIG93biByb3cgZm9yIHRoZSBtZXNzYWdlIHRhYmxlXG4gKiBAcmV0dXJucyB7TWVzc2FnZVJvd31cbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gaWYgcGF5bG9hZCBpcyBpbnZhbGlkXG4gKi9cbk5ldFNpbU1lc3NhZ2UucHJvdG90eXBlLmJ1aWxkUm93ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gTmV0U2ltTWVzc2FnZS5idWlsZFJvd0Zyb21EYXRhKHRoaXMpO1xufTtcbiIsIi8qKlxuICogQG92ZXJ2aWV3IFNpbXVsYXRpb24gZW50aXR5IGZvciByb3V0ZXIgbG9nIGVudHJpZXMuXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgbW9tZW50ID0gcmVxdWlyZSgnbW9tZW50Jyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIF8gPSB1dGlscy5nZXRMb2Rhc2goKTtcbnZhciBpMThuID0gcmVxdWlyZSgnLi9sb2NhbGUnKTtcbnZhciBOZXRTaW1FbnRpdHkgPSByZXF1aXJlKCcuL05ldFNpbUVudGl0eScpO1xudmFyIFBhY2tldCA9IHJlcXVpcmUoJy4vUGFja2V0Jyk7XG52YXIgTmV0U2ltTm9kZUZhY3RvcnkgPSByZXF1aXJlKCcuL05ldFNpbU5vZGVGYWN0b3J5Jyk7XG52YXIgRGF0YUNvbnZlcnRlcnMgPSByZXF1aXJlKCcuL0RhdGFDb252ZXJ0ZXJzJyk7XG52YXIgZm9ybWF0QmluYXJ5ID0gRGF0YUNvbnZlcnRlcnMuZm9ybWF0QmluYXJ5O1xudmFyIGJhc2U2NFRvQmluYXJ5ID0gRGF0YUNvbnZlcnRlcnMuYmFzZTY0VG9CaW5hcnk7XG52YXIgYmluYXJ5VG9CYXNlNjQgPSBEYXRhQ29udmVydGVycy5iaW5hcnlUb0Jhc2U2NDtcbnZhciBOZXRTaW1Mb2dnZXIgPSByZXF1aXJlKCcuL05ldFNpbUxvZ2dlcicpO1xuXG52YXIgQklUU19QRVJfQllURSA9IHJlcXVpcmUoJy4vTmV0U2ltQ29uc3RhbnRzJykuQklUU19QRVJfQllURTtcbnZhciBsb2dnZXIgPSBOZXRTaW1Mb2dnZXIuZ2V0U2luZ2xldG9uKCk7XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gTG9nRW50cnlSb3dcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBub2RlSURcbiAqIEBwcm9wZXJ0eSB7QmFzZTY0UGF5bG9hZH0gYmFzZTY0QmluYXJ5IC0gYmFzZTY0LWVuY29kZWQgYmluYXJ5XG4gKiAgICAgICAgICAgbWVzc2FnZSBjb250ZW50LCBhbGwgb2Ygd2hpY2ggY2FuIGJlIGV4cG9zZWQgdG8gdGhlXG4gKiAgICAgICAgICAgc3R1ZGVudC4gIE1heSBjb250YWluIGhlYWRlcnMgb2YgaXRzIG93bi5cbiAqIEBwcm9wZXJ0eSB7TmV0U2ltTG9nRW50cnkuTG9nU3RhdHVzfSBzdGF0dXNcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0aW1lc3RhbXBcbiAqL1xuXG4vKipcbiAqIEVudHJ5IGluIHNoYXJlZCBsb2cgZm9yIGEgbm9kZSBvbiB0aGUgbmV0d29yay5cbiAqXG4gKiBPbmNlIGNyZWF0ZWQsIHNob3VsZCBub3QgYmUgbW9kaWZpZWQgdW50aWwvdW5sZXNzIGEgY2xlYW51cCBwcm9jZXNzXG4gKiByZW1vdmVzIGl0LlxuICpcbiAqIEBwYXJhbSB7IU5ldFNpbVNoYXJkfSBzaGFyZCAtIFRoZSBzaGFyZCB3aGVyZSB0aGlzIGxvZyBlbnRyeSBsaXZlcy5cbiAqIEBwYXJhbSB7TG9nRW50cnlSb3d9IFtyb3ddIC0gQSByb3cgb3V0IG9mIHRoZSBsb2cgdGFibGUgb24gdGhlXG4gKiAgICAgICAgc2hhcmQuICBJZiBwcm92aWRlZCwgd2lsbCBpbml0aWFsaXplIHRoaXMgbG9nIHdpdGggdGhlIGdpdmVuXG4gKiAgICAgICAgZGF0YS4gIElmIG5vdCwgdGhpcyBsb2cgd2lsbCBpbml0aWFsaXplIHRvIGRlZmF1bHQgdmFsdWVzLlxuICogQHBhcmFtIHtQYWNrZXQuSGVhZGVyVHlwZVtdfSBbcGFja2V0U3BlY10gLSBQYWNrZXQgbGF5b3V0IHNwZWMgdXNlZCB0b1xuICogICAgICAgIGludGVycHJldCB0aGUgY29udGVudHMgb2YgdGhlIGxvZ2dlZCBwYWNrZXRcbiAqIEBjb25zdHJ1Y3RvclxuICogQGF1Z21lbnRzIE5ldFNpbUVudGl0eVxuICovXG52YXIgTmV0U2ltTG9nRW50cnkgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzaGFyZCwgcm93LCBwYWNrZXRTcGVjKSB7XG4gIHJvdyA9IHJvdyAhPT0gdW5kZWZpbmVkID8gcm93IDoge307XG4gIE5ldFNpbUVudGl0eS5jYWxsKHRoaXMsIHNoYXJkLCByb3cpO1xuXG4gIC8qKlxuICAgKiBOb2RlIElEIG9mIHRoZSBub2RlIHRoYXQgb3ducyB0aGlzIGxvZyBlbnRyeSAoZS5nLiBhIHJvdXRlciBub2RlKVxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5ub2RlSUQgPSByb3cubm9kZUlEO1xuXG4gIC8qKlxuICAgKiBCaW5hcnkgY29udGVudCBvZiB0aGUgbG9nIGVudHJ5LiAgRGVmYXVsdHMgdG8gZW1wdHkgc3RyaW5nLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgdGhpcy5iaW5hcnkgPSAnJztcbiAgaWYgKHJvdy5iYXNlNjRCaW5hcnkpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5iaW5hcnkgPSBiYXNlNjRUb0JpbmFyeShyb3cuYmFzZTY0QmluYXJ5LnN0cmluZywgcm93LmJhc2U2NEJpbmFyeS5sZW4pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGxvZ2dlci5lcnJvcihlLm1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTdGF0dXMgdmFsdWUgZm9yIGxvZyBlbnRyeTsgZm9yIHJvdXRlciBsb2csIHVzdWFsbHkgU1VDQ0VTUyBmb3IgY29tcGxldGlvblxuICAgKiBvZiByb3V0aW5nIG9yIERST1BQRUQgaWYgcm91dGluZyBmYWlsZWQuXG4gICAqIEB0eXBlIHtOZXRTaW1Mb2dFbnRyeS5Mb2dTdGF0dXN9XG4gICAqL1xuICB0aGlzLnN0YXR1cyA9IHV0aWxzLnZhbHVlT3Iocm93LnN0YXR1cywgTmV0U2ltTG9nRW50cnkuTG9nU3RhdHVzLlNVQ0NFU1MpO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7UGFja2V0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5wYWNrZXRfID0gbmV3IFBhY2tldCh1dGlscy52YWx1ZU9yKHBhY2tldFNwZWMsIFtdKSwgdGhpcy5iaW5hcnkpO1xuXG4gIC8qKlxuICAgKiBVbml4IHRpbWVzdGFtcCAobG9jYWwpIG9mIGxvZyBjcmVhdGlvbiB0aW1lLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy50aW1lc3RhbXAgPSAocm93LnRpbWVzdGFtcCAhPT0gdW5kZWZpbmVkKSA/IHJvdy50aW1lc3RhbXAgOiBEYXRlLm5vdygpO1xufTtcbk5ldFNpbUxvZ0VudHJ5LmluaGVyaXRzKE5ldFNpbUVudGl0eSk7XG5cbi8qKlxuICogQGVudW0ge3N0cmluZ31cbiAqIEBjb25zdFxuICovXG5OZXRTaW1Mb2dFbnRyeS5Mb2dTdGF0dXMgPSB7XG4gIFNVQ0NFU1M6ICdzdWNjZXNzJyxcbiAgRFJPUFBFRDogJ2Ryb3BwZWQnXG59O1xuXG4vKipcbiAqIEhlbHBlciB0aGF0IGdldHMgdGhlIGxvZyB0YWJsZSBmb3IgdGhlIGNvbmZpZ3VyZWQgaW5zdGFuY2UuXG4gKiBAcmV0dXJucyB7TmV0U2ltVGFibGV9XG4gKi9cbk5ldFNpbUxvZ0VudHJ5LnByb3RvdHlwZS5nZXRUYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuc2hhcmRfLmxvZ1RhYmxlO1xufTtcblxuLyoqXG4gKiBCdWlsZCBvd24gcm93IGZvciB0aGUgbG9nIHRhYmxlXG4gKiBAcmV0dXJucyB7TG9nRW50cnlSb3d9XG4gKi9cbk5ldFNpbUxvZ0VudHJ5LnByb3RvdHlwZS5idWlsZFJvdyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICBub2RlSUQ6IHRoaXMubm9kZUlELFxuICAgIGJhc2U2NEJpbmFyeTogYmluYXJ5VG9CYXNlNjQodGhpcy5iaW5hcnkpLFxuICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgdGltZXN0YW1wOiB0aGlzLnRpbWVzdGFtcFxuICB9O1xufTtcblxuLyoqXG4gKiBTdGF0aWMgYXN5bmMgY3JlYXRpb24gbWV0aG9kLiAgQ3JlYXRlcyBhIG5ldyBtZXNzYWdlIG9uIHRoZSBnaXZlbiBzaGFyZCxcbiAqIGFuZCB0aGVuIGNhbGxzIHRoZSBjYWxsYmFjayB3aXRoIGEgc3VjY2VzcyBib29sZWFuLlxuICogQHBhcmFtIHshTmV0U2ltU2hhcmR9IHNoYXJkXG4gKiBAcGFyYW0geyFudW1iZXJ9IG5vZGVJRCAtIGFzc29jaWF0ZWQgbm9kZSdzIHJvdyBJRFxuICogQHBhcmFtIHshc3RyaW5nfSBiaW5hcnkgLSBsb2cgY29udGVudHNcbiAqIEBwYXJhbSB7TmV0U2ltTG9nRW50cnkuTG9nU3RhdHVzfSBzdGF0dXNcbiAqIEBwYXJhbSB7IU5vZGVTdHlsZUNhbGxiYWNrfSBvbkNvbXBsZXRlIChzdWNjZXNzKVxuICovXG5OZXRTaW1Mb2dFbnRyeS5jcmVhdGUgPSBmdW5jdGlvbiAoc2hhcmQsIG5vZGVJRCwgYmluYXJ5LCBzdGF0dXMsIG9uQ29tcGxldGUpIHtcbiAgdmFyIGVudGl0eSA9IG5ldyBOZXRTaW1Mb2dFbnRyeShzaGFyZCk7XG4gIGVudGl0eS5ub2RlSUQgPSBub2RlSUQ7XG4gIGVudGl0eS5iaW5hcnkgPSBiaW5hcnk7XG4gIGVudGl0eS5zdGF0dXMgPSBzdGF0dXM7XG4gIGVudGl0eS50aW1lc3RhbXAgPSBEYXRlLm5vdygpO1xuICBlbnRpdHkuZ2V0VGFibGUoKS5jcmVhdGUoZW50aXR5LmJ1aWxkUm93KCksIGZ1bmN0aW9uIChlcnIsIHJlc3VsdCkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIG9uQ29tcGxldGUoZXJyLCBudWxsKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgb25Db21wbGV0ZShlcnIsIG5ldyBOZXRTaW1Mb2dFbnRyeShzaGFyZCwgcmVzdWx0KSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBHZXQgcmVxdWVzdGVkIHBhY2tldCBoZWFkZXIgZmllbGQgYXMgYSBzdHJpbmcuICBSZXR1cm5zIGVtcHR5IHN0cmluZ1xuICogaWYgdGhlIHJlcXVlc3RlZCBmaWVsZCBpcyBub3QgaW4gdGhlIGN1cnJlbnQgcGFja2V0IGZvcm1hdC5cbiAqIEBwYXJhbSB7UGFja2V0LkhlYWRlclR5cGV9IGZpZWxkXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5OZXRTaW1Mb2dFbnRyeS5wcm90b3R5cGUuZ2V0SGVhZGVyRmllbGQgPSBmdW5jdGlvbiAoZmllbGQpIHtcbiAgdHJ5IHtcbiAgICBpZiAoUGFja2V0LmlzQWRkcmVzc0ZpZWxkKGZpZWxkKSkge1xuICAgICAgcmV0dXJuIHRoaXMucGFja2V0Xy5nZXRIZWFkZXJBc0FkZHJlc3NTdHJpbmcoZmllbGQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5wYWNrZXRfLmdldEhlYWRlckFzSW50KGZpZWxkKS50b1N0cmluZygpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiAnJztcbiAgfVxufTtcblxuLyoqIEdldCBwYWNrZXQgbWVzc2FnZSBhcyBiaW5hcnkuICovXG5OZXRTaW1Mb2dFbnRyeS5wcm90b3R5cGUuZ2V0TWVzc2FnZUJpbmFyeSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZvcm1hdEJpbmFyeSh0aGlzLnBhY2tldF8uZ2V0Qm9keUFzQmluYXJ5KCksIEJJVFNfUEVSX0JZVEUpO1xufTtcblxuLyoqIEdldCBwYWNrZXQgbWVzc2FnZSBhcyBBU0NJSSAqL1xuTmV0U2ltTG9nRW50cnkucHJvdG90eXBlLmdldE1lc3NhZ2VBc2NpaSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMucGFja2V0Xy5nZXRCb2R5QXNBc2NpaShCSVRTX1BFUl9CWVRFKTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge3N0cmluZ30gTG9jYWxpemVkIHBhY2tldCBzdGF0dXMsIFwic3VjY2Vzc1wiIG9yIFwiZHJvcHBlZFwiXG4gKi9cbk5ldFNpbUxvZ0VudHJ5LnByb3RvdHlwZS5nZXRMb2NhbGl6ZWRTdGF0dXMgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnN0YXR1cyA9PT0gTmV0U2ltTG9nRW50cnkuTG9nU3RhdHVzLlNVQ0NFU1MpIHtcbiAgICByZXR1cm4gaTE4bi5sb2dTdGF0dXNfc3VjY2VzcygpO1xuICB9IGVsc2UgaWYgKHRoaXMuc3RhdHVzID09PSBOZXRTaW1Mb2dFbnRyeS5Mb2dTdGF0dXMuRFJPUFBFRCkge1xuICAgIHJldHVybiBpMThuLmxvZ1N0YXR1c19kcm9wcGVkKCk7XG4gIH1cbiAgcmV0dXJuICcnO1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBMb2NhbGl6ZWQgXCJYIG9mIFlcIiBwYWNrZXQgY291bnQgaW5mbyBmb3IgdGhpcyBlbnRyeS5cbiAqL1xuTmV0U2ltTG9nRW50cnkucHJvdG90eXBlLmdldExvY2FsaXplZFBhY2tldEluZm8gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpMThuLnhPZllQYWNrZXRzKHtcbiAgICB4OiB0aGlzLmdldEhlYWRlckZpZWxkKFBhY2tldC5IZWFkZXJUeXBlLlBBQ0tFVF9JTkRFWCksXG4gICAgeTogdGhpcy5nZXRIZWFkZXJGaWVsZChQYWNrZXQuSGVhZGVyVHlwZS5QQUNLRVRfQ09VTlQpXG4gIH0pO1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAxMi1ob3VyIHRpbWUgd2l0aCBtaWxsaXNlY29uZHNcbiAqL1xuTmV0U2ltTG9nRW50cnkucHJvdG90eXBlLmdldFRpbWVTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBtb21lbnQodGhpcy50aW1lc3RhbXApLmZvcm1hdCgnaDptbTpzcy5TU1MgQScpO1xufTtcblxuLyoqXG4gKiBHZXQgYSBjb250cm9sbGVyIGZvciB0aGUgbm9kZSB0aGF0IGdlbmVyYXRlZCB0aGlzIGxvZyBlbnRyeVxuICogQHJldHVybnMge05ldFNpbUNsaWVudE5vZGV8TmV0U2ltUm91dGVyTm9kZXxudWxsfVxuICovXG5OZXRTaW1Mb2dFbnRyeS5wcm90b3R5cGUuZ2V0T3JpZ2luTm9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG5vZGVSb3dzID0gdGhpcy5zaGFyZF8ubm9kZVRhYmxlLnJlYWRBbGwoKTtcbiAgdmFyIG9yaWdpbk5vZGVSb3cgPSBfLmZpbmQobm9kZVJvd3MsIGZ1bmN0aW9uIChyb3cpIHtcbiAgICByZXR1cm4gcm93LmlkID09PSB0aGlzLm5vZGVJRDtcbiAgfS5iaW5kKHRoaXMpKTtcblxuICBpZiAoIW9yaWdpbk5vZGVSb3cpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBOZXRTaW1Ob2RlRmFjdG9yeS5ub2RlRnJvbVJvdyh0aGlzLnNoYXJkXywgb3JpZ2luTm9kZVJvdyk7XG59O1xuIiwiLy8hIG1vbWVudC5qc1xuLy8hIHZlcnNpb24gOiAyLjEwLjZcbi8vISBhdXRob3JzIDogVGltIFdvb2QsIElza3JlbiBDaGVybmV2LCBNb21lbnQuanMgY29udHJpYnV0b3JzXG4vLyEgbGljZW5zZSA6IE1JVFxuLy8hIG1vbWVudGpzLmNvbVxuXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAgIGdsb2JhbC5tb21lbnQgPSBmYWN0b3J5KClcbn0odGhpcywgZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgaG9va0NhbGxiYWNrO1xuXG4gICAgZnVuY3Rpb24gdXRpbHNfaG9va3NfX2hvb2tzICgpIHtcbiAgICAgICAgcmV0dXJuIGhvb2tDYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIC8vIFRoaXMgaXMgZG9uZSB0byByZWdpc3RlciB0aGUgbWV0aG9kIGNhbGxlZCB3aXRoIG1vbWVudCgpXG4gICAgLy8gd2l0aG91dCBjcmVhdGluZyBjaXJjdWxhciBkZXBlbmRlbmNpZXMuXG4gICAgZnVuY3Rpb24gc2V0SG9va0NhbGxiYWNrIChjYWxsYmFjaykge1xuICAgICAgICBob29rQ2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0FycmF5KGlucHV0KSB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGF0ZShpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBEYXRlIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IERhdGVdJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXAoYXJyLCBmbikge1xuICAgICAgICB2YXIgcmVzID0gW10sIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHJlcy5wdXNoKGZuKGFycltpXSwgaSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFzT3duUHJvcChhLCBiKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSwgYik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXh0ZW5kKGEsIGIpIHtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBiKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChiLCBpKSkge1xuICAgICAgICAgICAgICAgIGFbaV0gPSBiW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc093blByb3AoYiwgJ3RvU3RyaW5nJykpIHtcbiAgICAgICAgICAgIGEudG9TdHJpbmcgPSBiLnRvU3RyaW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc093blByb3AoYiwgJ3ZhbHVlT2YnKSkge1xuICAgICAgICAgICAgYS52YWx1ZU9mID0gYi52YWx1ZU9mO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlX3V0Y19fY3JlYXRlVVRDIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgdHJ1ZSkudXRjKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVmYXVsdFBhcnNpbmdGbGFncygpIHtcbiAgICAgICAgLy8gV2UgbmVlZCB0byBkZWVwIGNsb25lIHRoaXMgb2JqZWN0LlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZW1wdHkgICAgICAgICAgIDogZmFsc2UsXG4gICAgICAgICAgICB1bnVzZWRUb2tlbnMgICAgOiBbXSxcbiAgICAgICAgICAgIHVudXNlZElucHV0ICAgICA6IFtdLFxuICAgICAgICAgICAgb3ZlcmZsb3cgICAgICAgIDogLTIsXG4gICAgICAgICAgICBjaGFyc0xlZnRPdmVyICAgOiAwLFxuICAgICAgICAgICAgbnVsbElucHV0ICAgICAgIDogZmFsc2UsXG4gICAgICAgICAgICBpbnZhbGlkTW9udGggICAgOiBudWxsLFxuICAgICAgICAgICAgaW52YWxpZEZvcm1hdCAgIDogZmFsc2UsXG4gICAgICAgICAgICB1c2VySW52YWxpZGF0ZWQgOiBmYWxzZSxcbiAgICAgICAgICAgIGlzbyAgICAgICAgICAgICA6IGZhbHNlXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UGFyc2luZ0ZsYWdzKG0pIHtcbiAgICAgICAgaWYgKG0uX3BmID09IG51bGwpIHtcbiAgICAgICAgICAgIG0uX3BmID0gZGVmYXVsdFBhcnNpbmdGbGFncygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtLl9wZjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2YWxpZF9faXNWYWxpZChtKSB7XG4gICAgICAgIGlmIChtLl9pc1ZhbGlkID09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBmbGFncyA9IGdldFBhcnNpbmdGbGFncyhtKTtcbiAgICAgICAgICAgIG0uX2lzVmFsaWQgPSAhaXNOYU4obS5fZC5nZXRUaW1lKCkpICYmXG4gICAgICAgICAgICAgICAgZmxhZ3Mub3ZlcmZsb3cgPCAwICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmVtcHR5ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRNb250aCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkV2Vla2RheSAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5udWxsSW5wdXQgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZEZvcm1hdCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy51c2VySW52YWxpZGF0ZWQ7XG5cbiAgICAgICAgICAgIGlmIChtLl9zdHJpY3QpIHtcbiAgICAgICAgICAgICAgICBtLl9pc1ZhbGlkID0gbS5faXNWYWxpZCAmJlxuICAgICAgICAgICAgICAgICAgICBmbGFncy5jaGFyc0xlZnRPdmVyID09PSAwICYmXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLnVudXNlZFRva2Vucy5sZW5ndGggPT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MuYmlnSG91ciA9PT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtLl9pc1ZhbGlkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbGlkX19jcmVhdGVJbnZhbGlkIChmbGFncykge1xuICAgICAgICB2YXIgbSA9IGNyZWF0ZV91dGNfX2NyZWF0ZVVUQyhOYU4pO1xuICAgICAgICBpZiAoZmxhZ3MgIT0gbnVsbCkge1xuICAgICAgICAgICAgZXh0ZW5kKGdldFBhcnNpbmdGbGFncyhtKSwgZmxhZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLnVzZXJJbnZhbGlkYXRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbTtcbiAgICB9XG5cbiAgICB2YXIgbW9tZW50UHJvcGVydGllcyA9IHV0aWxzX2hvb2tzX19ob29rcy5tb21lbnRQcm9wZXJ0aWVzID0gW107XG5cbiAgICBmdW5jdGlvbiBjb3B5Q29uZmlnKHRvLCBmcm9tKSB7XG4gICAgICAgIHZhciBpLCBwcm9wLCB2YWw7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBmcm9tLl9pc0FNb21lbnRPYmplY3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0by5faXNBTW9tZW50T2JqZWN0ID0gZnJvbS5faXNBTW9tZW50T2JqZWN0O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZnJvbS5faSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRvLl9pID0gZnJvbS5faTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGZyb20uX2YgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0by5fZiA9IGZyb20uX2Y7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBmcm9tLl9sICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdG8uX2wgPSBmcm9tLl9sO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZnJvbS5fc3RyaWN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdG8uX3N0cmljdCA9IGZyb20uX3N0cmljdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGZyb20uX3R6bSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRvLl90em0gPSBmcm9tLl90em07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBmcm9tLl9pc1VUQyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRvLl9pc1VUQyA9IGZyb20uX2lzVVRDO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZnJvbS5fb2Zmc2V0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdG8uX29mZnNldCA9IGZyb20uX29mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGZyb20uX3BmICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdG8uX3BmID0gZ2V0UGFyc2luZ0ZsYWdzKGZyb20pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZnJvbS5fbG9jYWxlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdG8uX2xvY2FsZSA9IGZyb20uX2xvY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtb21lbnRQcm9wZXJ0aWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGZvciAoaSBpbiBtb21lbnRQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgcHJvcCA9IG1vbWVudFByb3BlcnRpZXNbaV07XG4gICAgICAgICAgICAgICAgdmFsID0gZnJvbVtwcm9wXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9bcHJvcF0gPSB2YWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRvO1xuICAgIH1cblxuICAgIHZhciB1cGRhdGVJblByb2dyZXNzID0gZmFsc2U7XG5cbiAgICAvLyBNb21lbnQgcHJvdG90eXBlIG9iamVjdFxuICAgIGZ1bmN0aW9uIE1vbWVudChjb25maWcpIHtcbiAgICAgICAgY29weUNvbmZpZyh0aGlzLCBjb25maWcpO1xuICAgICAgICB0aGlzLl9kID0gbmV3IERhdGUoY29uZmlnLl9kICE9IG51bGwgPyBjb25maWcuX2QuZ2V0VGltZSgpIDogTmFOKTtcbiAgICAgICAgLy8gUHJldmVudCBpbmZpbml0ZSBsb29wIGluIGNhc2UgdXBkYXRlT2Zmc2V0IGNyZWF0ZXMgbmV3IG1vbWVudFxuICAgICAgICAvLyBvYmplY3RzLlxuICAgICAgICBpZiAodXBkYXRlSW5Qcm9ncmVzcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHVwZGF0ZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgdXRpbHNfaG9va3NfX2hvb2tzLnVwZGF0ZU9mZnNldCh0aGlzKTtcbiAgICAgICAgICAgIHVwZGF0ZUluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTW9tZW50IChvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIE1vbWVudCB8fCAob2JqICE9IG51bGwgJiYgb2JqLl9pc0FNb21lbnRPYmplY3QgIT0gbnVsbCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWJzRmxvb3IgKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguY2VpbChudW1iZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSW50KGFyZ3VtZW50Rm9yQ29lcmNpb24pIHtcbiAgICAgICAgdmFyIGNvZXJjZWROdW1iZXIgPSArYXJndW1lbnRGb3JDb2VyY2lvbixcbiAgICAgICAgICAgIHZhbHVlID0gMDtcblxuICAgICAgICBpZiAoY29lcmNlZE51bWJlciAhPT0gMCAmJiBpc0Zpbml0ZShjb2VyY2VkTnVtYmVyKSkge1xuICAgICAgICAgICAgdmFsdWUgPSBhYnNGbG9vcihjb2VyY2VkTnVtYmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wYXJlQXJyYXlzKGFycmF5MSwgYXJyYXkyLCBkb250Q29udmVydCkge1xuICAgICAgICB2YXIgbGVuID0gTWF0aC5taW4oYXJyYXkxLmxlbmd0aCwgYXJyYXkyLmxlbmd0aCksXG4gICAgICAgICAgICBsZW5ndGhEaWZmID0gTWF0aC5hYnMoYXJyYXkxLmxlbmd0aCAtIGFycmF5Mi5sZW5ndGgpLFxuICAgICAgICAgICAgZGlmZnMgPSAwLFxuICAgICAgICAgICAgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoKGRvbnRDb252ZXJ0ICYmIGFycmF5MVtpXSAhPT0gYXJyYXkyW2ldKSB8fFxuICAgICAgICAgICAgICAgICghZG9udENvbnZlcnQgJiYgdG9JbnQoYXJyYXkxW2ldKSAhPT0gdG9JbnQoYXJyYXkyW2ldKSkpIHtcbiAgICAgICAgICAgICAgICBkaWZmcysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaWZmcyArIGxlbmd0aERpZmY7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gTG9jYWxlKCkge1xuICAgIH1cblxuICAgIHZhciBsb2NhbGVzID0ge307XG4gICAgdmFyIGdsb2JhbExvY2FsZTtcblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZUxvY2FsZShrZXkpIHtcbiAgICAgICAgcmV0dXJuIGtleSA/IGtleS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoJ18nLCAnLScpIDoga2V5O1xuICAgIH1cblxuICAgIC8vIHBpY2sgdGhlIGxvY2FsZSBmcm9tIHRoZSBhcnJheVxuICAgIC8vIHRyeSBbJ2VuLWF1JywgJ2VuLWdiJ10gYXMgJ2VuLWF1JywgJ2VuLWdiJywgJ2VuJywgYXMgaW4gbW92ZSB0aHJvdWdoIHRoZSBsaXN0IHRyeWluZyBlYWNoXG4gICAgLy8gc3Vic3RyaW5nIGZyb20gbW9zdCBzcGVjaWZpYyB0byBsZWFzdCwgYnV0IG1vdmUgdG8gdGhlIG5leHQgYXJyYXkgaXRlbSBpZiBpdCdzIGEgbW9yZSBzcGVjaWZpYyB2YXJpYW50IHRoYW4gdGhlIGN1cnJlbnQgcm9vdFxuICAgIGZ1bmN0aW9uIGNob29zZUxvY2FsZShuYW1lcykge1xuICAgICAgICB2YXIgaSA9IDAsIGosIG5leHQsIGxvY2FsZSwgc3BsaXQ7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBuYW1lcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNwbGl0ID0gbm9ybWFsaXplTG9jYWxlKG5hbWVzW2ldKS5zcGxpdCgnLScpO1xuICAgICAgICAgICAgaiA9IHNwbGl0Lmxlbmd0aDtcbiAgICAgICAgICAgIG5leHQgPSBub3JtYWxpemVMb2NhbGUobmFtZXNbaSArIDFdKTtcbiAgICAgICAgICAgIG5leHQgPSBuZXh0ID8gbmV4dC5zcGxpdCgnLScpIDogbnVsbDtcbiAgICAgICAgICAgIHdoaWxlIChqID4gMCkge1xuICAgICAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoc3BsaXQuc2xpY2UoMCwgaikuam9pbignLScpKTtcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChuZXh0ICYmIG5leHQubGVuZ3RoID49IGogJiYgY29tcGFyZUFycmF5cyhzcGxpdCwgbmV4dCwgdHJ1ZSkgPj0gaiAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy90aGUgbmV4dCBhcnJheSBpdGVtIGlzIGJldHRlciB0aGFuIGEgc2hhbGxvd2VyIHN1YnN0cmluZyBvZiB0aGlzIG9uZVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgai0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWRMb2NhbGUobmFtZSkge1xuICAgICAgICB2YXIgb2xkTG9jYWxlID0gbnVsbDtcbiAgICAgICAgLy8gVE9ETzogRmluZCBhIGJldHRlciB3YXkgdG8gcmVnaXN0ZXIgYW5kIGxvYWQgYWxsIHRoZSBsb2NhbGVzIGluIE5vZGVcbiAgICAgICAgaWYgKCFsb2NhbGVzW25hbWVdICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgbW9kdWxlICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG9sZExvY2FsZSA9IGdsb2JhbExvY2FsZS5fYWJicjtcbiAgICAgICAgICAgICAgICByZXF1aXJlKCcuL2xvY2FsZS8nICsgbmFtZSk7XG4gICAgICAgICAgICAgICAgLy8gYmVjYXVzZSBkZWZpbmVMb2NhbGUgY3VycmVudGx5IGFsc28gc2V0cyB0aGUgZ2xvYmFsIGxvY2FsZSwgd2VcbiAgICAgICAgICAgICAgICAvLyB3YW50IHRvIHVuZG8gdGhhdCBmb3IgbGF6eSBsb2FkZWQgbG9jYWxlc1xuICAgICAgICAgICAgICAgIGxvY2FsZV9sb2NhbGVzX19nZXRTZXRHbG9iYWxMb2NhbGUob2xkTG9jYWxlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xuICAgIH1cblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBsb2FkIGxvY2FsZSBhbmQgdGhlbiBzZXQgdGhlIGdsb2JhbCBsb2NhbGUuICBJZlxuICAgIC8vIG5vIGFyZ3VtZW50cyBhcmUgcGFzc2VkIGluLCBpdCB3aWxsIHNpbXBseSByZXR1cm4gdGhlIGN1cnJlbnQgZ2xvYmFsXG4gICAgLy8gbG9jYWxlIGtleS5cbiAgICBmdW5jdGlvbiBsb2NhbGVfbG9jYWxlc19fZ2V0U2V0R2xvYmFsTG9jYWxlIChrZXksIHZhbHVlcykge1xuICAgICAgICB2YXIgZGF0YTtcbiAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IGxvY2FsZV9sb2NhbGVzX19nZXRMb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBkZWZpbmVMb2NhbGUoa2V5LCB2YWx1ZXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIC8vIG1vbWVudC5kdXJhdGlvbi5fbG9jYWxlID0gbW9tZW50Ll9sb2NhbGUgPSBkYXRhO1xuICAgICAgICAgICAgICAgIGdsb2JhbExvY2FsZSA9IGRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZ2xvYmFsTG9jYWxlLl9hYmJyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlZmluZUxvY2FsZSAobmFtZSwgdmFsdWVzKSB7XG4gICAgICAgIGlmICh2YWx1ZXMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhbHVlcy5hYmJyID0gbmFtZTtcbiAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBsb2NhbGVzW25hbWVdIHx8IG5ldyBMb2NhbGUoKTtcbiAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0uc2V0KHZhbHVlcyk7XG5cbiAgICAgICAgICAgIC8vIGJhY2t3YXJkcyBjb21wYXQgZm9yIG5vdzogYWxzbyBzZXQgdGhlIGxvY2FsZVxuICAgICAgICAgICAgbG9jYWxlX2xvY2FsZXNfX2dldFNldEdsb2JhbExvY2FsZShuYW1lKTtcblxuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB1c2VmdWwgZm9yIHRlc3RpbmdcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbGVzW25hbWVdO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyByZXR1cm5zIGxvY2FsZSBkYXRhXG4gICAgZnVuY3Rpb24gbG9jYWxlX2xvY2FsZXNfX2dldExvY2FsZSAoa2V5KSB7XG4gICAgICAgIHZhciBsb2NhbGU7XG5cbiAgICAgICAgaWYgKGtleSAmJiBrZXkuX2xvY2FsZSAmJiBrZXkuX2xvY2FsZS5fYWJicikge1xuICAgICAgICAgICAga2V5ID0ga2V5Ll9sb2NhbGUuX2FiYnI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWtleSkge1xuICAgICAgICAgICAgcmV0dXJuIGdsb2JhbExvY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNBcnJheShrZXkpKSB7XG4gICAgICAgICAgICAvL3Nob3J0LWNpcmN1aXQgZXZlcnl0aGluZyBlbHNlXG4gICAgICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKGtleSk7XG4gICAgICAgICAgICBpZiAobG9jYWxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGtleSA9IFtrZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNob29zZUxvY2FsZShrZXkpO1xuICAgIH1cblxuICAgIHZhciBhbGlhc2VzID0ge307XG5cbiAgICBmdW5jdGlvbiBhZGRVbml0QWxpYXMgKHVuaXQsIHNob3J0aGFuZCkge1xuICAgICAgICB2YXIgbG93ZXJDYXNlID0gdW5pdC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBhbGlhc2VzW2xvd2VyQ2FzZV0gPSBhbGlhc2VzW2xvd2VyQ2FzZSArICdzJ10gPSBhbGlhc2VzW3Nob3J0aGFuZF0gPSB1bml0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdW5pdHMgPT09ICdzdHJpbmcnID8gYWxpYXNlc1t1bml0c10gfHwgYWxpYXNlc1t1bml0cy50b0xvd2VyQ2FzZSgpXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemVPYmplY3RVbml0cyhpbnB1dE9iamVjdCkge1xuICAgICAgICB2YXIgbm9ybWFsaXplZElucHV0ID0ge30sXG4gICAgICAgICAgICBub3JtYWxpemVkUHJvcCxcbiAgICAgICAgICAgIHByb3A7XG5cbiAgICAgICAgZm9yIChwcm9wIGluIGlucHV0T2JqZWN0KSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChpbnB1dE9iamVjdCwgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkUHJvcCA9IG5vcm1hbGl6ZVVuaXRzKHByb3ApO1xuICAgICAgICAgICAgICAgIGlmIChub3JtYWxpemVkUHJvcCkge1xuICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVkSW5wdXRbbm9ybWFsaXplZFByb3BdID0gaW5wdXRPYmplY3RbcHJvcF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZWRJbnB1dDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlR2V0U2V0ICh1bml0LCBrZWVwVGltZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGdldF9zZXRfX3NldCh0aGlzLCB1bml0LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgdXRpbHNfaG9va3NfX2hvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCBrZWVwVGltZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRfc2V0X19nZXQodGhpcywgdW5pdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0X3NldF9fZ2V0IChtb20sIHVuaXQpIHtcbiAgICAgICAgcmV0dXJuIG1vbS5fZFsnZ2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyB1bml0XSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldF9zZXRfX3NldCAobW9tLCB1bml0LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gbW9tLl9kWydzZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArIHVuaXRdKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXQgKHVuaXRzLCB2YWx1ZSkge1xuICAgICAgICB2YXIgdW5pdDtcbiAgICAgICAgaWYgKHR5cGVvZiB1bml0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGZvciAodW5pdCBpbiB1bml0cykge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0KHVuaXQsIHVuaXRzW3VuaXRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzW3VuaXRzXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW3VuaXRzXSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gemVyb0ZpbGwobnVtYmVyLCB0YXJnZXRMZW5ndGgsIGZvcmNlU2lnbikge1xuICAgICAgICB2YXIgYWJzTnVtYmVyID0gJycgKyBNYXRoLmFicyhudW1iZXIpLFxuICAgICAgICAgICAgemVyb3NUb0ZpbGwgPSB0YXJnZXRMZW5ndGggLSBhYnNOdW1iZXIubGVuZ3RoLFxuICAgICAgICAgICAgc2lnbiA9IG51bWJlciA+PSAwO1xuICAgICAgICByZXR1cm4gKHNpZ24gPyAoZm9yY2VTaWduID8gJysnIDogJycpIDogJy0nKSArXG4gICAgICAgICAgICBNYXRoLnBvdygxMCwgTWF0aC5tYXgoMCwgemVyb3NUb0ZpbGwpKS50b1N0cmluZygpLnN1YnN0cigxKSArIGFic051bWJlcjtcbiAgICB9XG5cbiAgICB2YXIgZm9ybWF0dGluZ1Rva2VucyA9IC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhNb3xNTT9NP00/fERvfERERG98REQ/RD9EP3xkZGQ/ZD98ZG8/fHdbb3x3XT98V1tvfFddP3xRfFlZWVlZWXxZWVlZWXxZWVlZfFlZfGdnKGdnZz8pP3xHRyhHR0c/KT98ZXxFfGF8QXxoaD98SEg/fG1tP3xzcz98U3sxLDl9fHh8WHx6ej98Wlo/fC4pL2c7XG5cbiAgICB2YXIgbG9jYWxGb3JtYXR0aW5nVG9rZW5zID0gLyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KExUU3xMVHxMTD9MP0w/fGx7MSw0fSkvZztcblxuICAgIHZhciBmb3JtYXRGdW5jdGlvbnMgPSB7fTtcblxuICAgIHZhciBmb3JtYXRUb2tlbkZ1bmN0aW9ucyA9IHt9O1xuXG4gICAgLy8gdG9rZW46ICAgICdNJ1xuICAgIC8vIHBhZGRlZDogICBbJ01NJywgMl1cbiAgICAvLyBvcmRpbmFsOiAgJ01vJ1xuICAgIC8vIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7IHRoaXMubW9udGgoKSArIDEgfVxuICAgIGZ1bmN0aW9uIGFkZEZvcm1hdFRva2VuICh0b2tlbiwgcGFkZGVkLCBvcmRpbmFsLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgZnVuYyA9IGNhbGxiYWNrO1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1tjYWxsYmFja10oKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1t0b2tlbl0gPSBmdW5jO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYWRkZWQpIHtcbiAgICAgICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW3BhZGRlZFswXV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHplcm9GaWxsKGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgcGFkZGVkWzFdLCBwYWRkZWRbMl0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3JkaW5hbCkge1xuICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbb3JkaW5hbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm9yZGluYWwoZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCB0b2tlbik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyhpbnB1dCkge1xuICAgICAgICBpZiAoaW5wdXQubWF0Y2goL1xcW1tcXHNcXFNdLykpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9eXFxbfFxcXSQvZywgJycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9cXFxcL2csICcnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlRm9ybWF0RnVuY3Rpb24oZm9ybWF0KSB7XG4gICAgICAgIHZhciBhcnJheSA9IGZvcm1hdC5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKSwgaSwgbGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0VG9rZW5GdW5jdGlvbnNbYXJyYXlbaV1dKSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbaV0gPSBmb3JtYXRUb2tlbkZ1bmN0aW9uc1thcnJheVtpXV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFycmF5W2ldID0gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyhhcnJheVtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG1vbSkge1xuICAgICAgICAgICAgdmFyIG91dHB1dCA9ICcnO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ICs9IGFycmF5W2ldIGluc3RhbmNlb2YgRnVuY3Rpb24gPyBhcnJheVtpXS5jYWxsKG1vbSwgZm9ybWF0KSA6IGFycmF5W2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBmb3JtYXQgZGF0ZSB1c2luZyBuYXRpdmUgZGF0ZSBvYmplY3RcbiAgICBmdW5jdGlvbiBmb3JtYXRNb21lbnQobSwgZm9ybWF0KSB7XG4gICAgICAgIGlmICghbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBtLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybWF0ID0gZXhwYW5kRm9ybWF0KGZvcm1hdCwgbS5sb2NhbGVEYXRhKCkpO1xuICAgICAgICBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XSA9IGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdIHx8IG1ha2VGb3JtYXRGdW5jdGlvbihmb3JtYXQpO1xuXG4gICAgICAgIHJldHVybiBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XShtKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleHBhbmRGb3JtYXQoZm9ybWF0LCBsb2NhbGUpIHtcbiAgICAgICAgdmFyIGkgPSA1O1xuXG4gICAgICAgIGZ1bmN0aW9uIHJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2VucyhpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZS5sb25nRGF0ZUZvcm1hdChpbnB1dCkgfHwgaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPj0gMCAmJiBsb2NhbEZvcm1hdHRpbmdUb2tlbnMudGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZShsb2NhbEZvcm1hdHRpbmdUb2tlbnMsIHJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2Vucyk7XG4gICAgICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMDtcbiAgICAgICAgICAgIGkgLT0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoMSAgICAgICAgID0gL1xcZC87ICAgICAgICAgICAgLy8gICAgICAgMCAtIDlcbiAgICB2YXIgbWF0Y2gyICAgICAgICAgPSAvXFxkXFxkLzsgICAgICAgICAgLy8gICAgICAwMCAtIDk5XG4gICAgdmFyIG1hdGNoMyAgICAgICAgID0gL1xcZHszfS87ICAgICAgICAgLy8gICAgIDAwMCAtIDk5OVxuICAgIHZhciBtYXRjaDQgICAgICAgICA9IC9cXGR7NH0vOyAgICAgICAgIC8vICAgIDAwMDAgLSA5OTk5XG4gICAgdmFyIG1hdGNoNiAgICAgICAgID0gL1srLV0/XFxkezZ9LzsgICAgLy8gLTk5OTk5OSAtIDk5OTk5OVxuICAgIHZhciBtYXRjaDF0bzIgICAgICA9IC9cXGRcXGQ/LzsgICAgICAgICAvLyAgICAgICAwIC0gOTlcbiAgICB2YXIgbWF0Y2gxdG8zICAgICAgPSAvXFxkezEsM30vOyAgICAgICAvLyAgICAgICAwIC0gOTk5XG4gICAgdmFyIG1hdGNoMXRvNCAgICAgID0gL1xcZHsxLDR9LzsgICAgICAgLy8gICAgICAgMCAtIDk5OTlcbiAgICB2YXIgbWF0Y2gxdG82ICAgICAgPSAvWystXT9cXGR7MSw2fS87ICAvLyAtOTk5OTk5IC0gOTk5OTk5XG5cbiAgICB2YXIgbWF0Y2hVbnNpZ25lZCAgPSAvXFxkKy87ICAgICAgICAgICAvLyAgICAgICAwIC0gaW5mXG4gICAgdmFyIG1hdGNoU2lnbmVkICAgID0gL1srLV0/XFxkKy87ICAgICAgLy8gICAgLWluZiAtIGluZlxuXG4gICAgdmFyIG1hdGNoT2Zmc2V0ICAgID0gL1p8WystXVxcZFxcZDo/XFxkXFxkL2dpOyAvLyArMDA6MDAgLTAwOjAwICswMDAwIC0wMDAwIG9yIFpcblxuICAgIHZhciBtYXRjaFRpbWVzdGFtcCA9IC9bKy1dP1xcZCsoXFwuXFxkezEsM30pPy87IC8vIDEyMzQ1Njc4OSAxMjM0NTY3ODkuMTIzXG5cbiAgICAvLyBhbnkgd29yZCAob3IgdHdvKSBjaGFyYWN0ZXJzIG9yIG51bWJlcnMgaW5jbHVkaW5nIHR3by90aHJlZSB3b3JkIG1vbnRoIGluIGFyYWJpYy5cbiAgICB2YXIgbWF0Y2hXb3JkID0gL1swLTldKlsnYS16XFx1MDBBMC1cXHUwNUZGXFx1MDcwMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSt8W1xcdTA2MDAtXFx1MDZGRlxcL10rKFxccyo/W1xcdTA2MDAtXFx1MDZGRl0rKXsxLDJ9L2k7XG5cbiAgICB2YXIgcmVnZXhlcyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbiAoc3RoKSB7XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8yMzI1XG4gICAgICAgIHJldHVybiB0eXBlb2Ygc3RoID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3RoKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGFkZFJlZ2V4VG9rZW4gKHRva2VuLCByZWdleCwgc3RyaWN0UmVnZXgpIHtcbiAgICAgICAgcmVnZXhlc1t0b2tlbl0gPSBpc0Z1bmN0aW9uKHJlZ2V4KSA/IHJlZ2V4IDogZnVuY3Rpb24gKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gKGlzU3RyaWN0ICYmIHN0cmljdFJlZ2V4KSA/IHN0cmljdFJlZ2V4IDogcmVnZXg7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UGFyc2VSZWdleEZvclRva2VuICh0b2tlbiwgY29uZmlnKSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcChyZWdleGVzLCB0b2tlbikpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKHVuZXNjYXBlRm9ybWF0KHRva2VuKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVnZXhlc1t0b2tlbl0oY29uZmlnLl9zdHJpY3QsIGNvbmZpZy5fbG9jYWxlKTtcbiAgICB9XG5cbiAgICAvLyBDb2RlIGZyb20gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zNTYxNDkzL2lzLXRoZXJlLWEtcmVnZXhwLWVzY2FwZS1mdW5jdGlvbi1pbi1qYXZhc2NyaXB0XG4gICAgZnVuY3Rpb24gdW5lc2NhcGVGb3JtYXQocykge1xuICAgICAgICByZXR1cm4gcy5yZXBsYWNlKCdcXFxcJywgJycpLnJlcGxhY2UoL1xcXFwoXFxbKXxcXFxcKFxcXSl8XFxbKFteXFxdXFxbXSopXFxdfFxcXFwoLikvZywgZnVuY3Rpb24gKG1hdGNoZWQsIHAxLCBwMiwgcDMsIHA0KSB7XG4gICAgICAgICAgICByZXR1cm4gcDEgfHwgcDIgfHwgcDMgfHwgcDQ7XG4gICAgICAgIH0pLnJlcGxhY2UoL1stXFwvXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xuICAgIH1cblxuICAgIHZhciB0b2tlbnMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGFkZFBhcnNlVG9rZW4gKHRva2VuLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgaSwgZnVuYyA9IGNhbGxiYWNrO1xuICAgICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdG9rZW4gPSBbdG9rZW5dO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBmdW5jID0gZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICAgICAgICAgIGFycmF5W2NhbGxiYWNrXSA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRva2VuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0b2tlbnNbdG9rZW5baV1dID0gZnVuYztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFdlZWtQYXJzZVRva2VuICh0b2tlbiwgY2FsbGJhY2spIHtcbiAgICAgICAgYWRkUGFyc2VUb2tlbih0b2tlbiwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICAgICAgY29uZmlnLl93ID0gY29uZmlnLl93IHx8IHt9O1xuICAgICAgICAgICAgY2FsbGJhY2soaW5wdXQsIGNvbmZpZy5fdywgY29uZmlnLCB0b2tlbik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuLCBpbnB1dCwgY29uZmlnKSB7XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsICYmIGhhc093blByb3AodG9rZW5zLCB0b2tlbikpIHtcbiAgICAgICAgICAgIHRva2Vuc1t0b2tlbl0oaW5wdXQsIGNvbmZpZy5fYSwgY29uZmlnLCB0b2tlbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgWUVBUiA9IDA7XG4gICAgdmFyIE1PTlRIID0gMTtcbiAgICB2YXIgREFURSA9IDI7XG4gICAgdmFyIEhPVVIgPSAzO1xuICAgIHZhciBNSU5VVEUgPSA0O1xuICAgIHZhciBTRUNPTkQgPSA1O1xuICAgIHZhciBNSUxMSVNFQ09ORCA9IDY7XG5cbiAgICBmdW5jdGlvbiBkYXlzSW5Nb250aCh5ZWFyLCBtb250aCkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoeWVhciwgbW9udGggKyAxLCAwKSkuZ2V0VVRDRGF0ZSgpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdNJywgWydNTScsIDJdLCAnTW8nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vbnRoKCkgKyAxO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ01NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRoc1Nob3J0KHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignTU1NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRocyh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdtb250aCcsICdNJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdNJywgICAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdNTScsICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ01NTScsICBtYXRjaFdvcmQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ01NTU0nLCBtYXRjaFdvcmQpO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ00nLCAnTU0nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtNT05USF0gPSB0b0ludChpbnB1dCkgLSAxO1xuICAgIH0pO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ01NTScsICdNTU1NJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgdmFyIG1vbnRoID0gY29uZmlnLl9sb2NhbGUubW9udGhzUGFyc2UoaW5wdXQsIHRva2VuLCBjb25maWcuX3N0cmljdCk7XG4gICAgICAgIC8vIGlmIHdlIGRpZG4ndCBmaW5kIGEgbW9udGggbmFtZSwgbWFyayB0aGUgZGF0ZSBhcyBpbnZhbGlkLlxuICAgICAgICBpZiAobW9udGggIT0gbnVsbCkge1xuICAgICAgICAgICAgYXJyYXlbTU9OVEhdID0gbW9udGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkTW9udGggPSBpbnB1dDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gTE9DQUxFU1xuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVNb250aHMgPSAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBsb2NhbGVNb250aHMgKG0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1ttLm1vbnRoKCldO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQgPSAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyk7XG4gICAgZnVuY3Rpb24gbG9jYWxlTW9udGhzU2hvcnQgKG0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0W20ubW9udGgoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlTW9udGhzUGFyc2UgKG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksIG1vbSwgcmVnZXg7XG5cbiAgICAgICAgaWYgKCF0aGlzLl9tb250aHNQYXJzZSkge1xuICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICAgICAgbW9tID0gY3JlYXRlX3V0Y19fY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmICF0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMubW9udGhzKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnJykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy5tb250aHNTaG9ydChtb20sICcnKS5yZXBsYWNlKCcuJywgJycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzdHJpY3QgJiYgIXRoaXMuX21vbnRoc1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgcmVnZXggPSAnXicgKyB0aGlzLm1vbnRocyhtb20sICcnKSArICd8XicgKyB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cChyZWdleC5yZXBsYWNlKCcuJywgJycpLCAnaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGVzdCB0aGUgcmVnZXhcbiAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnTU1NTScgJiYgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnTU1NJyAmJiB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmIHRoaXMuX21vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gc2V0TW9udGggKG1vbSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIGRheU9mTW9udGg7XG5cbiAgICAgICAgLy8gVE9ETzogTW92ZSB0aGlzIG91dCBvZiBoZXJlIVxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFsdWUgPSBtb20ubG9jYWxlRGF0YSgpLm1vbnRoc1BhcnNlKHZhbHVlKTtcbiAgICAgICAgICAgIC8vIFRPRE86IEFub3RoZXIgc2lsZW50IGZhaWx1cmU/XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb207XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBkYXlPZk1vbnRoID0gTWF0aC5taW4obW9tLmRhdGUoKSwgZGF5c0luTW9udGgobW9tLnllYXIoKSwgdmFsdWUpKTtcbiAgICAgICAgbW9tLl9kWydzZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArICdNb250aCddKHZhbHVlLCBkYXlPZk1vbnRoKTtcbiAgICAgICAgcmV0dXJuIG1vbTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRNb250aCAodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHNldE1vbnRoKHRoaXMsIHZhbHVlKTtcbiAgICAgICAgICAgIHV0aWxzX2hvb2tzX19ob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRfc2V0X19nZXQodGhpcywgJ01vbnRoJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXREYXlzSW5Nb250aCAoKSB7XG4gICAgICAgIHJldHVybiBkYXlzSW5Nb250aCh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja092ZXJmbG93IChtKSB7XG4gICAgICAgIHZhciBvdmVyZmxvdztcbiAgICAgICAgdmFyIGEgPSBtLl9hO1xuXG4gICAgICAgIGlmIChhICYmIGdldFBhcnNpbmdGbGFncyhtKS5vdmVyZmxvdyA9PT0gLTIpIHtcbiAgICAgICAgICAgIG92ZXJmbG93ID1cbiAgICAgICAgICAgICAgICBhW01PTlRIXSAgICAgICA8IDAgfHwgYVtNT05USF0gICAgICAgPiAxMSAgPyBNT05USCA6XG4gICAgICAgICAgICAgICAgYVtEQVRFXSAgICAgICAgPCAxIHx8IGFbREFURV0gICAgICAgID4gZGF5c0luTW9udGgoYVtZRUFSXSwgYVtNT05USF0pID8gREFURSA6XG4gICAgICAgICAgICAgICAgYVtIT1VSXSAgICAgICAgPCAwIHx8IGFbSE9VUl0gICAgICAgID4gMjQgfHwgKGFbSE9VUl0gPT09IDI0ICYmIChhW01JTlVURV0gIT09IDAgfHwgYVtTRUNPTkRdICE9PSAwIHx8IGFbTUlMTElTRUNPTkRdICE9PSAwKSkgPyBIT1VSIDpcbiAgICAgICAgICAgICAgICBhW01JTlVURV0gICAgICA8IDAgfHwgYVtNSU5VVEVdICAgICAgPiA1OSAgPyBNSU5VVEUgOlxuICAgICAgICAgICAgICAgIGFbU0VDT05EXSAgICAgIDwgMCB8fCBhW1NFQ09ORF0gICAgICA+IDU5ICA/IFNFQ09ORCA6XG4gICAgICAgICAgICAgICAgYVtNSUxMSVNFQ09ORF0gPCAwIHx8IGFbTUlMTElTRUNPTkRdID4gOTk5ID8gTUlMTElTRUNPTkQgOlxuICAgICAgICAgICAgICAgIC0xO1xuXG4gICAgICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd0RheU9mWWVhciAmJiAob3ZlcmZsb3cgPCBZRUFSIHx8IG92ZXJmbG93ID4gREFURSkpIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IERBVEU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhtKS5vdmVyZmxvdyA9IG92ZXJmbG93O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Fybihtc2cpIHtcbiAgICAgICAgaWYgKHV0aWxzX2hvb2tzX19ob29rcy5zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MgPT09IGZhbHNlICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBjb25zb2xlLndhcm4pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignRGVwcmVjYXRpb24gd2FybmluZzogJyArIG1zZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZXByZWNhdGUobXNnLCBmbikge1xuICAgICAgICB2YXIgZmlyc3RUaW1lID0gdHJ1ZTtcblxuICAgICAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChmaXJzdFRpbWUpIHtcbiAgICAgICAgICAgICAgICB3YXJuKG1zZyArICdcXG4nICsgKG5ldyBFcnJvcigpKS5zdGFjayk7XG4gICAgICAgICAgICAgICAgZmlyc3RUaW1lID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfSwgZm4pO1xuICAgIH1cblxuICAgIHZhciBkZXByZWNhdGlvbnMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGRlcHJlY2F0ZVNpbXBsZShuYW1lLCBtc2cpIHtcbiAgICAgICAgaWYgKCFkZXByZWNhdGlvbnNbbmFtZV0pIHtcbiAgICAgICAgICAgIHdhcm4obXNnKTtcbiAgICAgICAgICAgIGRlcHJlY2F0aW9uc1tuYW1lXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1dGlsc19ob29rc19faG9va3Muc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzID0gZmFsc2U7XG5cbiAgICB2YXIgZnJvbV9zdHJpbmdfX2lzb1JlZ2V4ID0gL15cXHMqKD86WystXVxcZHs2fXxcXGR7NH0pLSg/OihcXGRcXGQtXFxkXFxkKXwoV1xcZFxcZCQpfChXXFxkXFxkLVxcZCl8KFxcZFxcZFxcZCkpKChUfCApKFxcZFxcZCg6XFxkXFxkKDpcXGRcXGQoXFwuXFxkKyk/KT8pPyk/KFtcXCtcXC1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8kLztcblxuICAgIHZhciBpc29EYXRlcyA9IFtcbiAgICAgICAgWydZWVlZWVktTU0tREQnLCAvWystXVxcZHs2fS1cXGR7Mn0tXFxkezJ9L10sXG4gICAgICAgIFsnWVlZWS1NTS1ERCcsIC9cXGR7NH0tXFxkezJ9LVxcZHsyfS9dLFxuICAgICAgICBbJ0dHR0ctW1ddV1ctRScsIC9cXGR7NH0tV1xcZHsyfS1cXGQvXSxcbiAgICAgICAgWydHR0dHLVtXXVdXJywgL1xcZHs0fS1XXFxkezJ9L10sXG4gICAgICAgIFsnWVlZWS1EREQnLCAvXFxkezR9LVxcZHszfS9dXG4gICAgXTtcblxuICAgIC8vIGlzbyB0aW1lIGZvcm1hdHMgYW5kIHJlZ2V4ZXNcbiAgICB2YXIgaXNvVGltZXMgPSBbXG4gICAgICAgIFsnSEg6bW06c3MuU1NTUycsIC8oVHwgKVxcZFxcZDpcXGRcXGQ6XFxkXFxkXFwuXFxkKy9dLFxuICAgICAgICBbJ0hIOm1tOnNzJywgLyhUfCApXFxkXFxkOlxcZFxcZDpcXGRcXGQvXSxcbiAgICAgICAgWydISDptbScsIC8oVHwgKVxcZFxcZDpcXGRcXGQvXSxcbiAgICAgICAgWydISCcsIC8oVHwgKVxcZFxcZC9dXG4gICAgXTtcblxuICAgIHZhciBhc3BOZXRKc29uUmVnZXggPSAvXlxcLz9EYXRlXFwoKFxcLT9cXGQrKS9pO1xuXG4gICAgLy8gZGF0ZSBmcm9tIGlzbyBmb3JtYXRcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tSVNPKGNvbmZpZykge1xuICAgICAgICB2YXIgaSwgbCxcbiAgICAgICAgICAgIHN0cmluZyA9IGNvbmZpZy5faSxcbiAgICAgICAgICAgIG1hdGNoID0gZnJvbV9zdHJpbmdfX2lzb1JlZ2V4LmV4ZWMoc3RyaW5nKTtcblxuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmlzbyA9IHRydWU7XG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gaXNvRGF0ZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzb0RhdGVzW2ldWzFdLmV4ZWMoc3RyaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2YgPSBpc29EYXRlc1tpXVswXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IGlzb1RpbWVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpc29UaW1lc1tpXVsxXS5leGVjKHN0cmluZykpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbWF0Y2hbNl0gc2hvdWxkIGJlICdUJyBvciBzcGFjZVxuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2YgKz0gKG1hdGNoWzZdIHx8ICcgJykgKyBpc29UaW1lc1tpXVswXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0cmluZy5tYXRjaChtYXRjaE9mZnNldCkpIHtcbiAgICAgICAgICAgICAgICBjb25maWcuX2YgKz0gJ1onO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkYXRlIGZyb20gaXNvIGZvcm1hdCBvciBmYWxsYmFja1xuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmcoY29uZmlnKSB7XG4gICAgICAgIHZhciBtYXRjaGVkID0gYXNwTmV0SnNvblJlZ2V4LmV4ZWMoY29uZmlnLl9pKTtcblxuICAgICAgICBpZiAobWF0Y2hlZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoK21hdGNoZWRbMV0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnRnJvbUlTTyhjb25maWcpO1xuICAgICAgICBpZiAoY29uZmlnLl9pc1ZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZGVsZXRlIGNvbmZpZy5faXNWYWxpZDtcbiAgICAgICAgICAgIHV0aWxzX2hvb2tzX19ob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayhjb25maWcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50IGNvbnN0cnVjdGlvbiBmYWxscyBiYWNrIHRvIGpzIERhdGUuIFRoaXMgaXMgJyArXG4gICAgICAgICdkaXNjb3VyYWdlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHVwY29taW5nIG1ham9yICcgK1xuICAgICAgICAncmVsZWFzZS4gUGxlYXNlIHJlZmVyIHRvICcgK1xuICAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzE0MDcgZm9yIG1vcmUgaW5mby4nLFxuICAgICAgICBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShjb25maWcuX2kgKyAoY29uZmlnLl91c2VVVEMgPyAnIFVUQycgOiAnJykpO1xuICAgICAgICB9XG4gICAgKTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZURhdGUgKHksIG0sIGQsIGgsIE0sIHMsIG1zKSB7XG4gICAgICAgIC8vY2FuJ3QganVzdCBhcHBseSgpIHRvIGNyZWF0ZSBhIGRhdGU6XG4gICAgICAgIC8vaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xODEzNDgvaW5zdGFudGlhdGluZy1hLWphdmFzY3JpcHQtb2JqZWN0LWJ5LWNhbGxpbmctcHJvdG90eXBlLWNvbnN0cnVjdG9yLWFwcGx5XG4gICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoeSwgbSwgZCwgaCwgTSwgcywgbXMpO1xuXG4gICAgICAgIC8vdGhlIGRhdGUgY29uc3RydWN0b3IgZG9lc24ndCBhY2NlcHQgeWVhcnMgPCAxOTcwXG4gICAgICAgIGlmICh5IDwgMTk3MCkge1xuICAgICAgICAgICAgZGF0ZS5zZXRGdWxsWWVhcih5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVVVENEYXRlICh5KSB7XG4gICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMuYXBwbHkobnVsbCwgYXJndW1lbnRzKSk7XG4gICAgICAgIGlmICh5IDwgMTk3MCkge1xuICAgICAgICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueWVhcigpICUgMTAwO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZJywgICA0XSwgICAgICAgMCwgJ3llYXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVlZJywgIDVdLCAgICAgICAwLCAneWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWVlZJywgNiwgdHJ1ZV0sIDAsICd5ZWFyJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3llYXInLCAneScpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignWScsICAgICAgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZJywgICAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdZWVlZJywgICBtYXRjaDF0bzQsIG1hdGNoNCk7XG4gICAgYWRkUmVnZXhUb2tlbignWVlZWVknLCAgbWF0Y2gxdG82LCBtYXRjaDYpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZWVlZWScsIG1hdGNoMXRvNiwgbWF0Y2g2KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydZWVlZWScsICdZWVlZWVknXSwgWUVBUik7XG4gICAgYWRkUGFyc2VUb2tlbignWVlZWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbWUVBUl0gPSBpbnB1dC5sZW5ndGggPT09IDIgPyB1dGlsc19ob29rc19faG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpIDogdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1lZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtZRUFSXSA9IHV0aWxzX2hvb2tzX19ob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICBmdW5jdGlvbiBkYXlzSW5ZZWFyKHllYXIpIHtcbiAgICAgICAgcmV0dXJuIGlzTGVhcFllYXIoeWVhcikgPyAzNjYgOiAzNjU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNMZWFwWWVhcih5ZWFyKSB7XG4gICAgICAgIHJldHVybiAoeWVhciAlIDQgPT09IDAgJiYgeWVhciAlIDEwMCAhPT0gMCkgfHwgeWVhciAlIDQwMCA9PT0gMDtcbiAgICB9XG5cbiAgICAvLyBIT09LU1xuXG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLnBhcnNlVHdvRGlnaXRZZWFyID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiB0b0ludChpbnB1dCkgKyAodG9JbnQoaW5wdXQpID4gNjggPyAxOTAwIDogMjAwMCk7XG4gICAgfTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRZZWFyID0gbWFrZUdldFNldCgnRnVsbFllYXInLCBmYWxzZSk7XG5cbiAgICBmdW5jdGlvbiBnZXRJc0xlYXBZZWFyICgpIHtcbiAgICAgICAgcmV0dXJuIGlzTGVhcFllYXIodGhpcy55ZWFyKCkpO1xuICAgIH1cblxuICAgIGFkZEZvcm1hdFRva2VuKCd3JywgWyd3dycsIDJdLCAnd28nLCAnd2VlaycpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdXJywgWydXVycsIDJdLCAnV28nLCAnaXNvV2VlaycpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCd3ZWVrJywgJ3cnKTtcbiAgICBhZGRVbml0QWxpYXMoJ2lzb1dlZWsnLCAnVycpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbigndycsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3d3JywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1cnLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdXVycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsndycsICd3dycsICdXJywgJ1dXJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB3ZWVrW3Rva2VuLnN1YnN0cigwLCAxKV0gPSB0b0ludChpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICAvLyBmaXJzdERheU9mV2VlayAgICAgICAwID0gc3VuLCA2ID0gc2F0XG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgdGhlIGRheSBvZiB0aGUgd2VlayB0aGF0IHN0YXJ0cyB0aGUgd2Vla1xuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICh1c3VhbGx5IHN1bmRheSBvciBtb25kYXkpXG4gICAgLy8gZmlyc3REYXlPZldlZWtPZlllYXIgMCA9IHN1biwgNiA9IHNhdFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgIHRoZSBmaXJzdCB3ZWVrIGlzIHRoZSB3ZWVrIHRoYXQgY29udGFpbnMgdGhlIGZpcnN0XG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgb2YgdGhpcyBkYXkgb2YgdGhlIHdlZWtcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAoZWcuIElTTyB3ZWVrcyB1c2UgdGh1cnNkYXkgKDQpKVxuICAgIGZ1bmN0aW9uIHdlZWtPZlllYXIobW9tLCBmaXJzdERheU9mV2VlaywgZmlyc3REYXlPZldlZWtPZlllYXIpIHtcbiAgICAgICAgdmFyIGVuZCA9IGZpcnN0RGF5T2ZXZWVrT2ZZZWFyIC0gZmlyc3REYXlPZldlZWssXG4gICAgICAgICAgICBkYXlzVG9EYXlPZldlZWsgPSBmaXJzdERheU9mV2Vla09mWWVhciAtIG1vbS5kYXkoKSxcbiAgICAgICAgICAgIGFkanVzdGVkTW9tZW50O1xuXG5cbiAgICAgICAgaWYgKGRheXNUb0RheU9mV2VlayA+IGVuZCkge1xuICAgICAgICAgICAgZGF5c1RvRGF5T2ZXZWVrIC09IDc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGF5c1RvRGF5T2ZXZWVrIDwgZW5kIC0gNykge1xuICAgICAgICAgICAgZGF5c1RvRGF5T2ZXZWVrICs9IDc7XG4gICAgICAgIH1cblxuICAgICAgICBhZGp1c3RlZE1vbWVudCA9IGxvY2FsX19jcmVhdGVMb2NhbChtb20pLmFkZChkYXlzVG9EYXlPZldlZWssICdkJyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB3ZWVrOiBNYXRoLmNlaWwoYWRqdXN0ZWRNb21lbnQuZGF5T2ZZZWFyKCkgLyA3KSxcbiAgICAgICAgICAgIHllYXI6IGFkanVzdGVkTW9tZW50LnllYXIoKVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIExPQ0FMRVNcblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWsgKG1vbSkge1xuICAgICAgICByZXR1cm4gd2Vla09mWWVhcihtb20sIHRoaXMuX3dlZWsuZG93LCB0aGlzLl93ZWVrLmRveSkud2VlaztcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZVdlZWsgPSB7XG4gICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA2ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZUZpcnN0RGF5T2ZXZWVrICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWsuZG93O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZUZpcnN0RGF5T2ZZZWFyICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWsuZG95O1xuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldFdlZWsgKGlucHV0KSB7XG4gICAgICAgIHZhciB3ZWVrID0gdGhpcy5sb2NhbGVEYXRhKCkud2Vlayh0aGlzKTtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrIDogdGhpcy5hZGQoKGlucHV0IC0gd2VlaykgKiA3LCAnZCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldElTT1dlZWsgKGlucHV0KSB7XG4gICAgICAgIHZhciB3ZWVrID0gd2Vla09mWWVhcih0aGlzLCAxLCA0KS53ZWVrO1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWsgOiB0aGlzLmFkZCgoaW5wdXQgLSB3ZWVrKSAqIDcsICdkJyk7XG4gICAgfVxuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0RERCcsIFsnRERERCcsIDNdLCAnREREbycsICdkYXlPZlllYXInKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnZGF5T2ZZZWFyJywgJ0RERCcpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignREREJywgIG1hdGNoMXRvMyk7XG4gICAgYWRkUmVnZXhUb2tlbignRERERCcsIG1hdGNoMyk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ0RERCcsICdEREREJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2RheU9mWWVhciA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIC8vaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlI0NhbGN1bGF0aW5nX2FfZGF0ZV9naXZlbl90aGVfeWVhci4yQ193ZWVrX251bWJlcl9hbmRfd2Vla2RheVxuICAgIGZ1bmN0aW9uIGRheU9mWWVhckZyb21XZWVrcyh5ZWFyLCB3ZWVrLCB3ZWVrZGF5LCBmaXJzdERheU9mV2Vla09mWWVhciwgZmlyc3REYXlPZldlZWspIHtcbiAgICAgICAgdmFyIHdlZWsxSmFuID0gNiArIGZpcnN0RGF5T2ZXZWVrIC0gZmlyc3REYXlPZldlZWtPZlllYXIsIGphblggPSBjcmVhdGVVVENEYXRlKHllYXIsIDAsIDEgKyB3ZWVrMUphbiksIGQgPSBqYW5YLmdldFVUQ0RheSgpLCBkYXlPZlllYXI7XG4gICAgICAgIGlmIChkIDwgZmlyc3REYXlPZldlZWspIHtcbiAgICAgICAgICAgIGQgKz0gNztcbiAgICAgICAgfVxuXG4gICAgICAgIHdlZWtkYXkgPSB3ZWVrZGF5ICE9IG51bGwgPyAxICogd2Vla2RheSA6IGZpcnN0RGF5T2ZXZWVrO1xuXG4gICAgICAgIGRheU9mWWVhciA9IDEgKyB3ZWVrMUphbiArIDcgKiAod2VlayAtIDEpIC0gZCArIHdlZWtkYXk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHllYXI6IGRheU9mWWVhciA+IDAgPyB5ZWFyIDogeWVhciAtIDEsXG4gICAgICAgICAgICBkYXlPZlllYXI6IGRheU9mWWVhciA+IDAgPyAgZGF5T2ZZZWFyIDogZGF5c0luWWVhcih5ZWFyIC0gMSkgKyBkYXlPZlllYXJcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXREYXlPZlllYXIgKGlucHV0KSB7XG4gICAgICAgIHZhciBkYXlPZlllYXIgPSBNYXRoLnJvdW5kKCh0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykgLSB0aGlzLmNsb25lKCkuc3RhcnRPZigneWVhcicpKSAvIDg2NGU1KSArIDE7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gZGF5T2ZZZWFyIDogdGhpcy5hZGQoKGlucHV0IC0gZGF5T2ZZZWFyKSwgJ2QnKTtcbiAgICB9XG5cbiAgICAvLyBQaWNrIHRoZSBmaXJzdCBkZWZpbmVkIG9mIHR3byBvciB0aHJlZSBhcmd1bWVudHMuXG4gICAgZnVuY3Rpb24gZGVmYXVsdHMoYSwgYiwgYykge1xuICAgICAgICBpZiAoYSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYiAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjdXJyZW50RGF0ZUFycmF5KGNvbmZpZykge1xuICAgICAgICB2YXIgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgICAgaWYgKGNvbmZpZy5fdXNlVVRDKSB7XG4gICAgICAgICAgICByZXR1cm4gW25vdy5nZXRVVENGdWxsWWVhcigpLCBub3cuZ2V0VVRDTW9udGgoKSwgbm93LmdldFVUQ0RhdGUoKV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtub3cuZ2V0RnVsbFllYXIoKSwgbm93LmdldE1vbnRoKCksIG5vdy5nZXREYXRlKCldO1xuICAgIH1cblxuICAgIC8vIGNvbnZlcnQgYW4gYXJyYXkgdG8gYSBkYXRlLlxuICAgIC8vIHRoZSBhcnJheSBzaG91bGQgbWlycm9yIHRoZSBwYXJhbWV0ZXJzIGJlbG93XG4gICAgLy8gbm90ZTogYWxsIHZhbHVlcyBwYXN0IHRoZSB5ZWFyIGFyZSBvcHRpb25hbCBhbmQgd2lsbCBkZWZhdWx0IHRvIHRoZSBsb3dlc3QgcG9zc2libGUgdmFsdWUuXG4gICAgLy8gW3llYXIsIG1vbnRoLCBkYXkgLCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmRdXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbUFycmF5IChjb25maWcpIHtcbiAgICAgICAgdmFyIGksIGRhdGUsIGlucHV0ID0gW10sIGN1cnJlbnREYXRlLCB5ZWFyVG9Vc2U7XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudERhdGUgPSBjdXJyZW50RGF0ZUFycmF5KGNvbmZpZyk7XG5cbiAgICAgICAgLy9jb21wdXRlIGRheSBvZiB0aGUgeWVhciBmcm9tIHdlZWtzIGFuZCB3ZWVrZGF5c1xuICAgICAgICBpZiAoY29uZmlnLl93ICYmIGNvbmZpZy5fYVtEQVRFXSA9PSBudWxsICYmIGNvbmZpZy5fYVtNT05USF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgZGF5T2ZZZWFyRnJvbVdlZWtJbmZvKGNvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2lmIHRoZSBkYXkgb2YgdGhlIHllYXIgaXMgc2V0LCBmaWd1cmUgb3V0IHdoYXQgaXQgaXNcbiAgICAgICAgaWYgKGNvbmZpZy5fZGF5T2ZZZWFyKSB7XG4gICAgICAgICAgICB5ZWFyVG9Vc2UgPSBkZWZhdWx0cyhjb25maWcuX2FbWUVBUl0sIGN1cnJlbnREYXRlW1lFQVJdKTtcblxuICAgICAgICAgICAgaWYgKGNvbmZpZy5fZGF5T2ZZZWFyID4gZGF5c0luWWVhcih5ZWFyVG9Vc2UpKSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93RGF5T2ZZZWFyID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGF0ZSA9IGNyZWF0ZVVUQ0RhdGUoeWVhclRvVXNlLCAwLCBjb25maWcuX2RheU9mWWVhcik7XG4gICAgICAgICAgICBjb25maWcuX2FbTU9OVEhdID0gZGF0ZS5nZXRVVENNb250aCgpO1xuICAgICAgICAgICAgY29uZmlnLl9hW0RBVEVdID0gZGF0ZS5nZXRVVENEYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZWZhdWx0IHRvIGN1cnJlbnQgZGF0ZS5cbiAgICAgICAgLy8gKiBpZiBubyB5ZWFyLCBtb250aCwgZGF5IG9mIG1vbnRoIGFyZSBnaXZlbiwgZGVmYXVsdCB0byB0b2RheVxuICAgICAgICAvLyAqIGlmIGRheSBvZiBtb250aCBpcyBnaXZlbiwgZGVmYXVsdCBtb250aCBhbmQgeWVhclxuICAgICAgICAvLyAqIGlmIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG9ubHkgeWVhclxuICAgICAgICAvLyAqIGlmIHllYXIgaXMgZ2l2ZW4sIGRvbid0IGRlZmF1bHQgYW55dGhpbmdcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDMgJiYgY29uZmlnLl9hW2ldID09IG51bGw7ICsraSkge1xuICAgICAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPSBjdXJyZW50RGF0ZVtpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFplcm8gb3V0IHdoYXRldmVyIHdhcyBub3QgZGVmYXVsdGVkLCBpbmNsdWRpbmcgdGltZVxuICAgICAgICBmb3IgKDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPSAoY29uZmlnLl9hW2ldID09IG51bGwpID8gKGkgPT09IDIgPyAxIDogMCkgOiBjb25maWcuX2FbaV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBmb3IgMjQ6MDA6MDAuMDAwXG4gICAgICAgIGlmIChjb25maWcuX2FbSE9VUl0gPT09IDI0ICYmXG4gICAgICAgICAgICAgICAgY29uZmlnLl9hW01JTlVURV0gPT09IDAgJiZcbiAgICAgICAgICAgICAgICBjb25maWcuX2FbU0VDT05EXSA9PT0gMCAmJlxuICAgICAgICAgICAgICAgIGNvbmZpZy5fYVtNSUxMSVNFQ09ORF0gPT09IDApIHtcbiAgICAgICAgICAgIGNvbmZpZy5fbmV4dERheSA9IHRydWU7XG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnLl9kID0gKGNvbmZpZy5fdXNlVVRDID8gY3JlYXRlVVRDRGF0ZSA6IGNyZWF0ZURhdGUpLmFwcGx5KG51bGwsIGlucHV0KTtcbiAgICAgICAgLy8gQXBwbHkgdGltZXpvbmUgb2Zmc2V0IGZyb20gaW5wdXQuIFRoZSBhY3R1YWwgdXRjT2Zmc2V0IGNhbiBiZSBjaGFuZ2VkXG4gICAgICAgIC8vIHdpdGggcGFyc2Vab25lLlxuICAgICAgICBpZiAoY29uZmlnLl90em0gIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uZmlnLl9kLnNldFVUQ01pbnV0ZXMoY29uZmlnLl9kLmdldFVUQ01pbnV0ZXMoKSAtIGNvbmZpZy5fdHptKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcuX25leHREYXkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDI0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGF5T2ZZZWFyRnJvbVdlZWtJbmZvKGNvbmZpZykge1xuICAgICAgICB2YXIgdywgd2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95LCB0ZW1wO1xuXG4gICAgICAgIHcgPSBjb25maWcuX3c7XG4gICAgICAgIGlmICh3LkdHICE9IG51bGwgfHwgdy5XICE9IG51bGwgfHwgdy5FICE9IG51bGwpIHtcbiAgICAgICAgICAgIGRvdyA9IDE7XG4gICAgICAgICAgICBkb3kgPSA0O1xuXG4gICAgICAgICAgICAvLyBUT0RPOiBXZSBuZWVkIHRvIHRha2UgdGhlIGN1cnJlbnQgaXNvV2Vla1llYXIsIGJ1dCB0aGF0IGRlcGVuZHMgb25cbiAgICAgICAgICAgIC8vIGhvdyB3ZSBpbnRlcnByZXQgbm93IChsb2NhbCwgdXRjLCBmaXhlZCBvZmZzZXQpLiBTbyBjcmVhdGVcbiAgICAgICAgICAgIC8vIGEgbm93IHZlcnNpb24gb2YgY3VycmVudCBjb25maWcgKHRha2UgbG9jYWwvdXRjL29mZnNldCBmbGFncywgYW5kXG4gICAgICAgICAgICAvLyBjcmVhdGUgbm93KS5cbiAgICAgICAgICAgIHdlZWtZZWFyID0gZGVmYXVsdHMody5HRywgY29uZmlnLl9hW1lFQVJdLCB3ZWVrT2ZZZWFyKGxvY2FsX19jcmVhdGVMb2NhbCgpLCAxLCA0KS55ZWFyKTtcbiAgICAgICAgICAgIHdlZWsgPSBkZWZhdWx0cyh3LlcsIDEpO1xuICAgICAgICAgICAgd2Vla2RheSA9IGRlZmF1bHRzKHcuRSwgMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkb3cgPSBjb25maWcuX2xvY2FsZS5fd2Vlay5kb3c7XG4gICAgICAgICAgICBkb3kgPSBjb25maWcuX2xvY2FsZS5fd2Vlay5kb3k7XG5cbiAgICAgICAgICAgIHdlZWtZZWFyID0gZGVmYXVsdHMody5nZywgY29uZmlnLl9hW1lFQVJdLCB3ZWVrT2ZZZWFyKGxvY2FsX19jcmVhdGVMb2NhbCgpLCBkb3csIGRveSkueWVhcik7XG4gICAgICAgICAgICB3ZWVrID0gZGVmYXVsdHMody53LCAxKTtcblxuICAgICAgICAgICAgaWYgKHcuZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gd2Vla2RheSAtLSBsb3cgZGF5IG51bWJlcnMgYXJlIGNvbnNpZGVyZWQgbmV4dCB3ZWVrXG4gICAgICAgICAgICAgICAgd2Vla2RheSA9IHcuZDtcbiAgICAgICAgICAgICAgICBpZiAod2Vla2RheSA8IGRvdykge1xuICAgICAgICAgICAgICAgICAgICArK3dlZWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh3LmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIGxvY2FsIHdlZWtkYXkgLS0gY291bnRpbmcgc3RhcnRzIGZyb20gYmVnaW5pbmcgb2Ygd2Vla1xuICAgICAgICAgICAgICAgIHdlZWtkYXkgPSB3LmUgKyBkb3c7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGRlZmF1bHQgdG8gYmVnaW5pbmcgb2Ygd2Vla1xuICAgICAgICAgICAgICAgIHdlZWtkYXkgPSBkb3c7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGVtcCA9IGRheU9mWWVhckZyb21XZWVrcyh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG95LCBkb3cpO1xuXG4gICAgICAgIGNvbmZpZy5fYVtZRUFSXSA9IHRlbXAueWVhcjtcbiAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPSB0ZW1wLmRheU9mWWVhcjtcbiAgICB9XG5cbiAgICB1dGlsc19ob29rc19faG9va3MuSVNPXzg2MDEgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8vIGRhdGUgZnJvbSBzdHJpbmcgYW5kIGZvcm1hdCBzdHJpbmdcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZykge1xuICAgICAgICAvLyBUT0RPOiBNb3ZlIHRoaXMgdG8gYW5vdGhlciBwYXJ0IG9mIHRoZSBjcmVhdGlvbiBmbG93IHRvIHByZXZlbnQgY2lyY3VsYXIgZGVwc1xuICAgICAgICBpZiAoY29uZmlnLl9mID09PSB1dGlsc19ob29rc19faG9va3MuSVNPXzg2MDEpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21JU08oY29uZmlnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZy5fYSA9IFtdO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lbXB0eSA9IHRydWU7XG5cbiAgICAgICAgLy8gVGhpcyBhcnJheSBpcyB1c2VkIHRvIG1ha2UgYSBEYXRlLCBlaXRoZXIgd2l0aCBgbmV3IERhdGVgIG9yIGBEYXRlLlVUQ2BcbiAgICAgICAgdmFyIHN0cmluZyA9ICcnICsgY29uZmlnLl9pLFxuICAgICAgICAgICAgaSwgcGFyc2VkSW5wdXQsIHRva2VucywgdG9rZW4sIHNraXBwZWQsXG4gICAgICAgICAgICBzdHJpbmdMZW5ndGggPSBzdHJpbmcubGVuZ3RoLFxuICAgICAgICAgICAgdG90YWxQYXJzZWRJbnB1dExlbmd0aCA9IDA7XG5cbiAgICAgICAgdG9rZW5zID0gZXhwYW5kRm9ybWF0KGNvbmZpZy5fZiwgY29uZmlnLl9sb2NhbGUpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpIHx8IFtdO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRva2VuID0gdG9rZW5zW2ldO1xuICAgICAgICAgICAgcGFyc2VkSW5wdXQgPSAoc3RyaW5nLm1hdGNoKGdldFBhcnNlUmVnZXhGb3JUb2tlbih0b2tlbiwgY29uZmlnKSkgfHwgW10pWzBdO1xuICAgICAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgc2tpcHBlZCA9IHN0cmluZy5zdWJzdHIoMCwgc3RyaW5nLmluZGV4T2YocGFyc2VkSW5wdXQpKTtcbiAgICAgICAgICAgICAgICBpZiAoc2tpcHBlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZElucHV0LnB1c2goc2tpcHBlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5zbGljZShzdHJpbmcuaW5kZXhPZihwYXJzZWRJbnB1dCkgKyBwYXJzZWRJbnB1dC5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGggKz0gcGFyc2VkSW5wdXQubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZG9uJ3QgcGFyc2UgaWYgaXQncyBub3QgYSBrbm93biB0b2tlblxuICAgICAgICAgICAgaWYgKGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuXSkge1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lbXB0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkVG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhZGRUaW1lVG9BcnJheUZyb21Ub2tlbih0b2tlbiwgcGFyc2VkSW5wdXQsIGNvbmZpZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjb25maWcuX3N0cmljdCAmJiAhcGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRUb2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhZGQgcmVtYWluaW5nIHVucGFyc2VkIGlucHV0IGxlbmd0aCB0byB0aGUgc3RyaW5nXG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmNoYXJzTGVmdE92ZXIgPSBzdHJpbmdMZW5ndGggLSB0b3RhbFBhcnNlZElucHV0TGVuZ3RoO1xuICAgICAgICBpZiAoc3RyaW5nLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZElucHV0LnB1c2goc3RyaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNsZWFyIF8xMmggZmxhZyBpZiBob3VyIGlzIDw9IDEyXG4gICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID09PSB0cnVlICYmXG4gICAgICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdIDw9IDEyICYmXG4gICAgICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID4gMCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBoYW5kbGUgbWVyaWRpZW1cbiAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gbWVyaWRpZW1GaXhXcmFwKGNvbmZpZy5fbG9jYWxlLCBjb25maWcuX2FbSE9VUl0sIGNvbmZpZy5fbWVyaWRpZW0pO1xuXG4gICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgICAgICBjaGVja092ZXJmbG93KGNvbmZpZyk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBtZXJpZGllbUZpeFdyYXAgKGxvY2FsZSwgaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgdmFyIGlzUG07XG5cbiAgICAgICAgaWYgKG1lcmlkaWVtID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIG5vdGhpbmcgdG8gZG9cbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb2NhbGUubWVyaWRpZW1Ib3VyICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGUubWVyaWRpZW1Ib3VyKGhvdXIsIG1lcmlkaWVtKTtcbiAgICAgICAgfSBlbHNlIGlmIChsb2NhbGUuaXNQTSAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBGYWxsYmFja1xuICAgICAgICAgICAgaXNQbSA9IGxvY2FsZS5pc1BNKG1lcmlkaWVtKTtcbiAgICAgICAgICAgIGlmIChpc1BtICYmIGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgKz0gMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzUG0gJiYgaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyBub3Qgc3VwcG9zZWQgdG8gaGFwcGVuXG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheShjb25maWcpIHtcbiAgICAgICAgdmFyIHRlbXBDb25maWcsXG4gICAgICAgICAgICBiZXN0TW9tZW50LFxuXG4gICAgICAgICAgICBzY29yZVRvQmVhdCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBjdXJyZW50U2NvcmU7XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fZi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRGb3JtYXQgPSB0cnVlO1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoTmFOKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb25maWcuX2YubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZSA9IDA7XG4gICAgICAgICAgICB0ZW1wQ29uZmlnID0gY29weUNvbmZpZyh7fSwgY29uZmlnKTtcbiAgICAgICAgICAgIGlmIChjb25maWcuX3VzZVVUQyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGVtcENvbmZpZy5fdXNlVVRDID0gY29uZmlnLl91c2VVVEM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZW1wQ29uZmlnLl9mID0gY29uZmlnLl9mW2ldO1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdCh0ZW1wQ29uZmlnKTtcblxuICAgICAgICAgICAgaWYgKCF2YWxpZF9faXNWYWxpZCh0ZW1wQ29uZmlnKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBhbnkgaW5wdXQgdGhhdCB3YXMgbm90IHBhcnNlZCBhZGQgYSBwZW5hbHR5IGZvciB0aGF0IGZvcm1hdFxuICAgICAgICAgICAgY3VycmVudFNjb3JlICs9IGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS5jaGFyc0xlZnRPdmVyO1xuXG4gICAgICAgICAgICAvL29yIHRva2Vuc1xuICAgICAgICAgICAgY3VycmVudFNjb3JlICs9IGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS51bnVzZWRUb2tlbnMubGVuZ3RoICogMTA7XG5cbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS5zY29yZSA9IGN1cnJlbnRTY29yZTtcblxuICAgICAgICAgICAgaWYgKHNjb3JlVG9CZWF0ID09IG51bGwgfHwgY3VycmVudFNjb3JlIDwgc2NvcmVUb0JlYXQpIHtcbiAgICAgICAgICAgICAgICBzY29yZVRvQmVhdCA9IGN1cnJlbnRTY29yZTtcbiAgICAgICAgICAgICAgICBiZXN0TW9tZW50ID0gdGVtcENvbmZpZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV4dGVuZChjb25maWcsIGJlc3RNb21lbnQgfHwgdGVtcENvbmZpZyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbU9iamVjdChjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZy5fZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGkgPSBub3JtYWxpemVPYmplY3RVbml0cyhjb25maWcuX2kpO1xuICAgICAgICBjb25maWcuX2EgPSBbaS55ZWFyLCBpLm1vbnRoLCBpLmRheSB8fCBpLmRhdGUsIGkuaG91ciwgaS5taW51dGUsIGkuc2Vjb25kLCBpLm1pbGxpc2Vjb25kXTtcblxuICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVGcm9tQ29uZmlnIChjb25maWcpIHtcbiAgICAgICAgdmFyIHJlcyA9IG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhwcmVwYXJlQ29uZmlnKGNvbmZpZykpKTtcbiAgICAgICAgaWYgKHJlcy5fbmV4dERheSkge1xuICAgICAgICAgICAgLy8gQWRkaW5nIGlzIHNtYXJ0IGVub3VnaCBhcm91bmQgRFNUXG4gICAgICAgICAgICByZXMuYWRkKDEsICdkJyk7XG4gICAgICAgICAgICByZXMuX25leHREYXkgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZXBhcmVDb25maWcgKGNvbmZpZykge1xuICAgICAgICB2YXIgaW5wdXQgPSBjb25maWcuX2ksXG4gICAgICAgICAgICBmb3JtYXQgPSBjb25maWcuX2Y7XG5cbiAgICAgICAgY29uZmlnLl9sb2NhbGUgPSBjb25maWcuX2xvY2FsZSB8fCBsb2NhbGVfbG9jYWxlc19fZ2V0TG9jYWxlKGNvbmZpZy5fbCk7XG5cbiAgICAgICAgaWYgKGlucHV0ID09PSBudWxsIHx8IChmb3JtYXQgPT09IHVuZGVmaW5lZCAmJiBpbnB1dCA9PT0gJycpKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsaWRfX2NyZWF0ZUludmFsaWQoe251bGxJbnB1dDogdHJ1ZX0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNvbmZpZy5faSA9IGlucHV0ID0gY29uZmlnLl9sb2NhbGUucHJlcGFyc2UoaW5wdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzTW9tZW50KGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhpbnB1dCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkoZm9ybWF0KSkge1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0KSB7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gaW5wdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25maWdGcm9tSW5wdXQoY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbUlucHV0KGNvbmZpZykge1xuICAgICAgICB2YXIgaW5wdXQgPSBjb25maWcuX2k7XG4gICAgICAgIGlmIChpbnB1dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGF0ZShpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKCtpbnB1dCk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZyhjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2EgPSBtYXAoaW5wdXQuc2xpY2UoMCksIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQob2JqLCAxMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZihpbnB1dCkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tT2JqZWN0KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mKGlucHV0KSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIC8vIGZyb20gbWlsbGlzZWNvbmRzXG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShpbnB1dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1dGlsc19ob29rc19faG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2soY29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUxvY2FsT3JVVEMgKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCBpc1VUQykge1xuICAgICAgICB2YXIgYyA9IHt9O1xuXG4gICAgICAgIGlmICh0eXBlb2YobG9jYWxlKSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBzdHJpY3QgPSBsb2NhbGU7XG4gICAgICAgICAgICBsb2NhbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gb2JqZWN0IGNvbnN0cnVjdGlvbiBtdXN0IGJlIGRvbmUgdGhpcyB3YXkuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8xNDIzXG4gICAgICAgIGMuX2lzQU1vbWVudE9iamVjdCA9IHRydWU7XG4gICAgICAgIGMuX3VzZVVUQyA9IGMuX2lzVVRDID0gaXNVVEM7XG4gICAgICAgIGMuX2wgPSBsb2NhbGU7XG4gICAgICAgIGMuX2kgPSBpbnB1dDtcbiAgICAgICAgYy5fZiA9IGZvcm1hdDtcbiAgICAgICAgYy5fc3RyaWN0ID0gc3RyaWN0O1xuXG4gICAgICAgIHJldHVybiBjcmVhdGVGcm9tQ29uZmlnKGMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsX19jcmVhdGVMb2NhbCAoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsT3JVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIGZhbHNlKTtcbiAgICB9XG5cbiAgICB2YXIgcHJvdG90eXBlTWluID0gZGVwcmVjYXRlKFxuICAgICAgICAgJ21vbWVudCgpLm1pbiBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50Lm1pbiBpbnN0ZWFkLiBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMTU0OCcsXG4gICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgdmFyIG90aGVyID0gbG9jYWxfX2NyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgcmV0dXJuIG90aGVyIDwgdGhpcyA/IHRoaXMgOiBvdGhlcjtcbiAgICAgICAgIH1cbiAgICAgKTtcblxuICAgIHZhciBwcm90b3R5cGVNYXggPSBkZXByZWNhdGUoXG4gICAgICAgICdtb21lbnQoKS5tYXggaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudC5tYXggaW5zdGVhZC4gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzE1NDgnLFxuICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb3RoZXIgPSBsb2NhbF9fY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIHJldHVybiBvdGhlciA+IHRoaXMgPyB0aGlzIDogb3RoZXI7XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgLy8gUGljayBhIG1vbWVudCBtIGZyb20gbW9tZW50cyBzbyB0aGF0IG1bZm5dKG90aGVyKSBpcyB0cnVlIGZvciBhbGxcbiAgICAvLyBvdGhlci4gVGhpcyByZWxpZXMgb24gdGhlIGZ1bmN0aW9uIGZuIHRvIGJlIHRyYW5zaXRpdmUuXG4gICAgLy9cbiAgICAvLyBtb21lbnRzIHNob3VsZCBlaXRoZXIgYmUgYW4gYXJyYXkgb2YgbW9tZW50IG9iamVjdHMgb3IgYW4gYXJyYXksIHdob3NlXG4gICAgLy8gZmlyc3QgZWxlbWVudCBpcyBhbiBhcnJheSBvZiBtb21lbnQgb2JqZWN0cy5cbiAgICBmdW5jdGlvbiBwaWNrQnkoZm4sIG1vbWVudHMpIHtcbiAgICAgICAgdmFyIHJlcywgaTtcbiAgICAgICAgaWYgKG1vbWVudHMubGVuZ3RoID09PSAxICYmIGlzQXJyYXkobW9tZW50c1swXSkpIHtcbiAgICAgICAgICAgIG1vbWVudHMgPSBtb21lbnRzWzBdO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbW9tZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbF9fY3JlYXRlTG9jYWwoKTtcbiAgICAgICAgfVxuICAgICAgICByZXMgPSBtb21lbnRzWzBdO1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbW9tZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKCFtb21lbnRzW2ldLmlzVmFsaWQoKSB8fCBtb21lbnRzW2ldW2ZuXShyZXMpKSB7XG4gICAgICAgICAgICAgICAgcmVzID0gbW9tZW50c1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIC8vIFRPRE86IFVzZSBbXS5zb3J0IGluc3RlYWQ/XG4gICAgZnVuY3Rpb24gbWluICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICAgICAgcmV0dXJuIHBpY2tCeSgnaXNCZWZvcmUnLCBhcmdzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXggKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgICAgICByZXR1cm4gcGlja0J5KCdpc0FmdGVyJywgYXJncyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gRHVyYXRpb24gKGR1cmF0aW9uKSB7XG4gICAgICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSBub3JtYWxpemVPYmplY3RVbml0cyhkdXJhdGlvbiksXG4gICAgICAgICAgICB5ZWFycyA9IG5vcm1hbGl6ZWRJbnB1dC55ZWFyIHx8IDAsXG4gICAgICAgICAgICBxdWFydGVycyA9IG5vcm1hbGl6ZWRJbnB1dC5xdWFydGVyIHx8IDAsXG4gICAgICAgICAgICBtb250aHMgPSBub3JtYWxpemVkSW5wdXQubW9udGggfHwgMCxcbiAgICAgICAgICAgIHdlZWtzID0gbm9ybWFsaXplZElucHV0LndlZWsgfHwgMCxcbiAgICAgICAgICAgIGRheXMgPSBub3JtYWxpemVkSW5wdXQuZGF5IHx8IDAsXG4gICAgICAgICAgICBob3VycyA9IG5vcm1hbGl6ZWRJbnB1dC5ob3VyIHx8IDAsXG4gICAgICAgICAgICBtaW51dGVzID0gbm9ybWFsaXplZElucHV0Lm1pbnV0ZSB8fCAwLFxuICAgICAgICAgICAgc2Vjb25kcyA9IG5vcm1hbGl6ZWRJbnB1dC5zZWNvbmQgfHwgMCxcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kcyA9IG5vcm1hbGl6ZWRJbnB1dC5taWxsaXNlY29uZCB8fCAwO1xuXG4gICAgICAgIC8vIHJlcHJlc2VudGF0aW9uIGZvciBkYXRlQWRkUmVtb3ZlXG4gICAgICAgIHRoaXMuX21pbGxpc2Vjb25kcyA9ICttaWxsaXNlY29uZHMgK1xuICAgICAgICAgICAgc2Vjb25kcyAqIDFlMyArIC8vIDEwMDBcbiAgICAgICAgICAgIG1pbnV0ZXMgKiA2ZTQgKyAvLyAxMDAwICogNjBcbiAgICAgICAgICAgIGhvdXJzICogMzZlNTsgLy8gMTAwMCAqIDYwICogNjBcbiAgICAgICAgLy8gQmVjYXVzZSBvZiBkYXRlQWRkUmVtb3ZlIHRyZWF0cyAyNCBob3VycyBhcyBkaWZmZXJlbnQgZnJvbSBhXG4gICAgICAgIC8vIGRheSB3aGVuIHdvcmtpbmcgYXJvdW5kIERTVCwgd2UgbmVlZCB0byBzdG9yZSB0aGVtIHNlcGFyYXRlbHlcbiAgICAgICAgdGhpcy5fZGF5cyA9ICtkYXlzICtcbiAgICAgICAgICAgIHdlZWtzICogNztcbiAgICAgICAgLy8gSXQgaXMgaW1wb3NzaWJsZSB0cmFuc2xhdGUgbW9udGhzIGludG8gZGF5cyB3aXRob3V0IGtub3dpbmdcbiAgICAgICAgLy8gd2hpY2ggbW9udGhzIHlvdSBhcmUgYXJlIHRhbGtpbmcgYWJvdXQsIHNvIHdlIGhhdmUgdG8gc3RvcmVcbiAgICAgICAgLy8gaXQgc2VwYXJhdGVseS5cbiAgICAgICAgdGhpcy5fbW9udGhzID0gK21vbnRocyArXG4gICAgICAgICAgICBxdWFydGVycyAqIDMgK1xuICAgICAgICAgICAgeWVhcnMgKiAxMjtcblxuICAgICAgICB0aGlzLl9kYXRhID0ge307XG5cbiAgICAgICAgdGhpcy5fbG9jYWxlID0gbG9jYWxlX2xvY2FsZXNfX2dldExvY2FsZSgpO1xuXG4gICAgICAgIHRoaXMuX2J1YmJsZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRHVyYXRpb24gKG9iaikge1xuICAgICAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgRHVyYXRpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb2Zmc2V0ICh0b2tlbiwgc2VwYXJhdG9yKSB7XG4gICAgICAgIGFkZEZvcm1hdFRva2VuKHRva2VuLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy51dGNPZmZzZXQoKTtcbiAgICAgICAgICAgIHZhciBzaWduID0gJysnO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDApIHtcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSAtb2Zmc2V0O1xuICAgICAgICAgICAgICAgIHNpZ24gPSAnLSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2lnbiArIHplcm9GaWxsKH5+KG9mZnNldCAvIDYwKSwgMikgKyBzZXBhcmF0b3IgKyB6ZXJvRmlsbCh+fihvZmZzZXQpICUgNjAsIDIpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvZmZzZXQoJ1onLCAnOicpO1xuICAgIG9mZnNldCgnWlonLCAnJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdaJywgIG1hdGNoT2Zmc2V0KTtcbiAgICBhZGRSZWdleFRva2VuKCdaWicsIG1hdGNoT2Zmc2V0KTtcbiAgICBhZGRQYXJzZVRva2VuKFsnWicsICdaWiddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl91c2VVVEMgPSB0cnVlO1xuICAgICAgICBjb25maWcuX3R6bSA9IG9mZnNldEZyb21TdHJpbmcoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgLy8gdGltZXpvbmUgY2h1bmtlclxuICAgIC8vICcrMTA6MDAnID4gWycxMCcsICAnMDAnXVxuICAgIC8vICctMTUzMCcgID4gWyctMTUnLCAnMzAnXVxuICAgIHZhciBjaHVua09mZnNldCA9IC8oW1xcK1xcLV18XFxkXFxkKS9naTtcblxuICAgIGZ1bmN0aW9uIG9mZnNldEZyb21TdHJpbmcoc3RyaW5nKSB7XG4gICAgICAgIHZhciBtYXRjaGVzID0gKChzdHJpbmcgfHwgJycpLm1hdGNoKG1hdGNoT2Zmc2V0KSB8fCBbXSk7XG4gICAgICAgIHZhciBjaHVuayAgID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdIHx8IFtdO1xuICAgICAgICB2YXIgcGFydHMgICA9IChjaHVuayArICcnKS5tYXRjaChjaHVua09mZnNldCkgfHwgWyctJywgMCwgMF07XG4gICAgICAgIHZhciBtaW51dGVzID0gKyhwYXJ0c1sxXSAqIDYwKSArIHRvSW50KHBhcnRzWzJdKTtcblxuICAgICAgICByZXR1cm4gcGFydHNbMF0gPT09ICcrJyA/IG1pbnV0ZXMgOiAtbWludXRlcztcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYSBtb21lbnQgZnJvbSBpbnB1dCwgdGhhdCBpcyBsb2NhbC91dGMvem9uZSBlcXVpdmFsZW50IHRvIG1vZGVsLlxuICAgIGZ1bmN0aW9uIGNsb25lV2l0aE9mZnNldChpbnB1dCwgbW9kZWwpIHtcbiAgICAgICAgdmFyIHJlcywgZGlmZjtcbiAgICAgICAgaWYgKG1vZGVsLl9pc1VUQykge1xuICAgICAgICAgICAgcmVzID0gbW9kZWwuY2xvbmUoKTtcbiAgICAgICAgICAgIGRpZmYgPSAoaXNNb21lbnQoaW5wdXQpIHx8IGlzRGF0ZShpbnB1dCkgPyAraW5wdXQgOiArbG9jYWxfX2NyZWF0ZUxvY2FsKGlucHV0KSkgLSAoK3Jlcyk7XG4gICAgICAgICAgICAvLyBVc2UgbG93LWxldmVsIGFwaSwgYmVjYXVzZSB0aGlzIGZuIGlzIGxvdy1sZXZlbCBhcGkuXG4gICAgICAgICAgICByZXMuX2Quc2V0VGltZSgrcmVzLl9kICsgZGlmZik7XG4gICAgICAgICAgICB1dGlsc19ob29rc19faG9va3MudXBkYXRlT2Zmc2V0KHJlcywgZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbF9fY3JlYXRlTG9jYWwoaW5wdXQpLmxvY2FsKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXREYXRlT2Zmc2V0IChtKSB7XG4gICAgICAgIC8vIE9uIEZpcmVmb3guMjQgRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIGEgZmxvYXRpbmcgcG9pbnQuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L3B1bGwvMTg3MVxuICAgICAgICByZXR1cm4gLU1hdGgucm91bmQobS5fZC5nZXRUaW1lem9uZU9mZnNldCgpIC8gMTUpICogMTU7XG4gICAgfVxuXG4gICAgLy8gSE9PS1NcblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgd2hlbmV2ZXIgYSBtb21lbnQgaXMgbXV0YXRlZC5cbiAgICAvLyBJdCBpcyBpbnRlbmRlZCB0byBrZWVwIHRoZSBvZmZzZXQgaW4gc3luYyB3aXRoIHRoZSB0aW1lem9uZS5cbiAgICB1dGlsc19ob29rc19faG9va3MudXBkYXRlT2Zmc2V0ID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICAvLyBrZWVwTG9jYWxUaW1lID0gdHJ1ZSBtZWFucyBvbmx5IGNoYW5nZSB0aGUgdGltZXpvbmUsIHdpdGhvdXRcbiAgICAvLyBhZmZlY3RpbmcgdGhlIGxvY2FsIGhvdXIuIFNvIDU6MzE6MjYgKzAzMDAgLS1bdXRjT2Zmc2V0KDIsIHRydWUpXS0tPlxuICAgIC8vIDU6MzE6MjYgKzAyMDAgSXQgaXMgcG9zc2libGUgdGhhdCA1OjMxOjI2IGRvZXNuJ3QgZXhpc3Qgd2l0aCBvZmZzZXRcbiAgICAvLyArMDIwMCwgc28gd2UgYWRqdXN0IHRoZSB0aW1lIGFzIG5lZWRlZCwgdG8gYmUgdmFsaWQuXG4gICAgLy9cbiAgICAvLyBLZWVwaW5nIHRoZSB0aW1lIGFjdHVhbGx5IGFkZHMvc3VidHJhY3RzIChvbmUgaG91cilcbiAgICAvLyBmcm9tIHRoZSBhY3R1YWwgcmVwcmVzZW50ZWQgdGltZS4gVGhhdCBpcyB3aHkgd2UgY2FsbCB1cGRhdGVPZmZzZXRcbiAgICAvLyBhIHNlY29uZCB0aW1lLiBJbiBjYXNlIGl0IHdhbnRzIHVzIHRvIGNoYW5nZSB0aGUgb2Zmc2V0IGFnYWluXG4gICAgLy8gX2NoYW5nZUluUHJvZ3Jlc3MgPT0gdHJ1ZSBjYXNlLCB0aGVuIHdlIGhhdmUgdG8gYWRqdXN0LCBiZWNhdXNlXG4gICAgLy8gdGhlcmUgaXMgbm8gc3VjaCB0aW1lIGluIHRoZSBnaXZlbiB0aW1lem9uZS5cbiAgICBmdW5jdGlvbiBnZXRTZXRPZmZzZXQgKGlucHV0LCBrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLl9vZmZzZXQgfHwgMCxcbiAgICAgICAgICAgIGxvY2FsQWRqdXN0O1xuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IG9mZnNldEZyb21TdHJpbmcoaW5wdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKE1hdGguYWJzKGlucHV0KSA8IDE2KSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSBpbnB1dCAqIDYwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLl9pc1VUQyAmJiBrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxBZGp1c3QgPSBnZXREYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fb2Zmc2V0ID0gaW5wdXQ7XG4gICAgICAgICAgICB0aGlzLl9pc1VUQyA9IHRydWU7XG4gICAgICAgICAgICBpZiAobG9jYWxBZGp1c3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkKGxvY2FsQWRqdXN0LCAnbScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9mZnNldCAhPT0gaW5wdXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWtlZXBMb2NhbFRpbWUgfHwgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICBhZGRfc3VidHJhY3RfX2FkZFN1YnRyYWN0KHRoaXMsIGNyZWF0ZV9fY3JlYXRlRHVyYXRpb24oaW5wdXQgLSBvZmZzZXQsICdtJyksIDEsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9jaGFuZ2VJblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB1dGlsc19ob29rc19faG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VJblByb2dyZXNzID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/IG9mZnNldCA6IGdldERhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRab25lIChpbnB1dCwga2VlcExvY2FsVGltZSkge1xuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IC1pbnB1dDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoaW5wdXQsIGtlZXBMb2NhbFRpbWUpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAtdGhpcy51dGNPZmZzZXQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE9mZnNldFRvVVRDIChrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnV0Y09mZnNldCgwLCBrZWVwTG9jYWxUaW1lKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRPZmZzZXRUb0xvY2FsIChrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1VUQykge1xuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG4gICAgICAgICAgICB0aGlzLl9pc1VUQyA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAoa2VlcExvY2FsVGltZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3VidHJhY3QoZ2V0RGF0ZU9mZnNldCh0aGlzKSwgJ20nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRPZmZzZXRUb1BhcnNlZE9mZnNldCAoKSB7XG4gICAgICAgIGlmICh0aGlzLl90em0pIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KHRoaXMuX3R6bSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuX2kgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldChvZmZzZXRGcm9tU3RyaW5nKHRoaXMuX2kpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYXNBbGlnbmVkSG91ck9mZnNldCAoaW5wdXQpIHtcbiAgICAgICAgaW5wdXQgPSBpbnB1dCA/IGxvY2FsX19jcmVhdGVMb2NhbChpbnB1dCkudXRjT2Zmc2V0KCkgOiAwO1xuXG4gICAgICAgIHJldHVybiAodGhpcy51dGNPZmZzZXQoKSAtIGlucHV0KSAlIDYwID09PSAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGF5bGlnaHRTYXZpbmdUaW1lICgpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KCkgPiB0aGlzLmNsb25lKCkubW9udGgoMCkudXRjT2Zmc2V0KCkgfHxcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KCkgPiB0aGlzLmNsb25lKCkubW9udGgoNSkudXRjT2Zmc2V0KClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQgKCkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX2lzRFNUU2hpZnRlZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc0RTVFNoaWZ0ZWQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYyA9IHt9O1xuXG4gICAgICAgIGNvcHlDb25maWcoYywgdGhpcyk7XG4gICAgICAgIGMgPSBwcmVwYXJlQ29uZmlnKGMpO1xuXG4gICAgICAgIGlmIChjLl9hKSB7XG4gICAgICAgICAgICB2YXIgb3RoZXIgPSBjLl9pc1VUQyA/IGNyZWF0ZV91dGNfX2NyZWF0ZVVUQyhjLl9hKSA6IGxvY2FsX19jcmVhdGVMb2NhbChjLl9hKTtcbiAgICAgICAgICAgIHRoaXMuX2lzRFNUU2hpZnRlZCA9IHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAgICAgY29tcGFyZUFycmF5cyhjLl9hLCBvdGhlci50b0FycmF5KCkpID4gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2lzRFNUU2hpZnRlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzRFNUU2hpZnRlZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0xvY2FsICgpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLl9pc1VUQztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1V0Y09mZnNldCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1VUQztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1V0YyAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyAmJiB0aGlzLl9vZmZzZXQgPT09IDA7XG4gICAgfVxuXG4gICAgdmFyIGFzcE5ldFJlZ2V4ID0gLyhcXC0pPyg/OihcXGQqKVxcLik/KFxcZCspXFw6KFxcZCspKD86XFw6KFxcZCspXFwuPyhcXGR7M30pPyk/LztcblxuICAgIC8vIGZyb20gaHR0cDovL2RvY3MuY2xvc3VyZS1saWJyYXJ5Lmdvb2dsZWNvZGUuY29tL2dpdC9jbG9zdXJlX2dvb2dfZGF0ZV9kYXRlLmpzLnNvdXJjZS5odG1sXG4gICAgLy8gc29tZXdoYXQgbW9yZSBpbiBsaW5lIHdpdGggNC40LjMuMiAyMDA0IHNwZWMsIGJ1dCBhbGxvd3MgZGVjaW1hbCBhbnl3aGVyZVxuICAgIHZhciBjcmVhdGVfX2lzb1JlZ2V4ID0gL14oLSk/UCg/Oig/OihbMC05LC5dKilZKT8oPzooWzAtOSwuXSopTSk/KD86KFswLTksLl0qKUQpPyg/OlQoPzooWzAtOSwuXSopSCk/KD86KFswLTksLl0qKU0pPyg/OihbMC05LC5dKilTKT8pP3woWzAtOSwuXSopVykkLztcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZV9fY3JlYXRlRHVyYXRpb24gKGlucHV0LCBrZXkpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gaW5wdXQsXG4gICAgICAgICAgICAvLyBtYXRjaGluZyBhZ2FpbnN0IHJlZ2V4cCBpcyBleHBlbnNpdmUsIGRvIGl0IG9uIGRlbWFuZFxuICAgICAgICAgICAgbWF0Y2ggPSBudWxsLFxuICAgICAgICAgICAgc2lnbixcbiAgICAgICAgICAgIHJldCxcbiAgICAgICAgICAgIGRpZmZSZXM7XG5cbiAgICAgICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpKSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICBtcyA6IGlucHV0Ll9taWxsaXNlY29uZHMsXG4gICAgICAgICAgICAgICAgZCAgOiBpbnB1dC5fZGF5cyxcbiAgICAgICAgICAgICAgICBNICA6IGlucHV0Ll9tb250aHNcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbltrZXldID0gaW5wdXQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uLm1pbGxpc2Vjb25kcyA9IGlucHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEhKG1hdGNoID0gYXNwTmV0UmVnZXguZXhlYyhpbnB1dCkpKSB7XG4gICAgICAgICAgICBzaWduID0gKG1hdGNoWzFdID09PSAnLScpID8gLTEgOiAxO1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgeSAgOiAwLFxuICAgICAgICAgICAgICAgIGQgIDogdG9JbnQobWF0Y2hbREFURV0pICAgICAgICAqIHNpZ24sXG4gICAgICAgICAgICAgICAgaCAgOiB0b0ludChtYXRjaFtIT1VSXSkgICAgICAgICogc2lnbixcbiAgICAgICAgICAgICAgICBtICA6IHRvSW50KG1hdGNoW01JTlVURV0pICAgICAgKiBzaWduLFxuICAgICAgICAgICAgICAgIHMgIDogdG9JbnQobWF0Y2hbU0VDT05EXSkgICAgICAqIHNpZ24sXG4gICAgICAgICAgICAgICAgbXMgOiB0b0ludChtYXRjaFtNSUxMSVNFQ09ORF0pICogc2lnblxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmICghIShtYXRjaCA9IGNyZWF0ZV9faXNvUmVnZXguZXhlYyhpbnB1dCkpKSB7XG4gICAgICAgICAgICBzaWduID0gKG1hdGNoWzFdID09PSAnLScpID8gLTEgOiAxO1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgeSA6IHBhcnNlSXNvKG1hdGNoWzJdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBNIDogcGFyc2VJc28obWF0Y2hbM10sIHNpZ24pLFxuICAgICAgICAgICAgICAgIGQgOiBwYXJzZUlzbyhtYXRjaFs0XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgaCA6IHBhcnNlSXNvKG1hdGNoWzVdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBtIDogcGFyc2VJc28obWF0Y2hbNl0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIHMgOiBwYXJzZUlzbyhtYXRjaFs3XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgdyA6IHBhcnNlSXNvKG1hdGNoWzhdLCBzaWduKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChkdXJhdGlvbiA9PSBudWxsKSB7Ly8gY2hlY2tzIGZvciBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZHVyYXRpb24gPT09ICdvYmplY3QnICYmICgnZnJvbScgaW4gZHVyYXRpb24gfHwgJ3RvJyBpbiBkdXJhdGlvbikpIHtcbiAgICAgICAgICAgIGRpZmZSZXMgPSBtb21lbnRzRGlmZmVyZW5jZShsb2NhbF9fY3JlYXRlTG9jYWwoZHVyYXRpb24uZnJvbSksIGxvY2FsX19jcmVhdGVMb2NhbChkdXJhdGlvbi50bykpO1xuXG4gICAgICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICAgICAgZHVyYXRpb24ubXMgPSBkaWZmUmVzLm1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgIGR1cmF0aW9uLk0gPSBkaWZmUmVzLm1vbnRocztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldCA9IG5ldyBEdXJhdGlvbihkdXJhdGlvbik7XG5cbiAgICAgICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpICYmIGhhc093blByb3AoaW5wdXQsICdfbG9jYWxlJykpIHtcbiAgICAgICAgICAgIHJldC5fbG9jYWxlID0gaW5wdXQuX2xvY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgY3JlYXRlX19jcmVhdGVEdXJhdGlvbi5mbiA9IER1cmF0aW9uLnByb3RvdHlwZTtcblxuICAgIGZ1bmN0aW9uIHBhcnNlSXNvIChpbnAsIHNpZ24pIHtcbiAgICAgICAgLy8gV2UnZCBub3JtYWxseSB1c2Ugfn5pbnAgZm9yIHRoaXMsIGJ1dCB1bmZvcnR1bmF0ZWx5IGl0IGFsc29cbiAgICAgICAgLy8gY29udmVydHMgZmxvYXRzIHRvIGludHMuXG4gICAgICAgIC8vIGlucCBtYXkgYmUgdW5kZWZpbmVkLCBzbyBjYXJlZnVsIGNhbGxpbmcgcmVwbGFjZSBvbiBpdC5cbiAgICAgICAgdmFyIHJlcyA9IGlucCAmJiBwYXJzZUZsb2F0KGlucC5yZXBsYWNlKCcsJywgJy4nKSk7XG4gICAgICAgIC8vIGFwcGx5IHNpZ24gd2hpbGUgd2UncmUgYXQgaXRcbiAgICAgICAgcmV0dXJuIChpc05hTihyZXMpID8gMCA6IHJlcykgKiBzaWduO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlcyA9IHttaWxsaXNlY29uZHM6IDAsIG1vbnRoczogMH07XG5cbiAgICAgICAgcmVzLm1vbnRocyA9IG90aGVyLm1vbnRoKCkgLSBiYXNlLm1vbnRoKCkgK1xuICAgICAgICAgICAgKG90aGVyLnllYXIoKSAtIGJhc2UueWVhcigpKSAqIDEyO1xuICAgICAgICBpZiAoYmFzZS5jbG9uZSgpLmFkZChyZXMubW9udGhzLCAnTScpLmlzQWZ0ZXIob3RoZXIpKSB7XG4gICAgICAgICAgICAtLXJlcy5tb250aHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXMubWlsbGlzZWNvbmRzID0gK290aGVyIC0gKyhiYXNlLmNsb25lKCkuYWRkKHJlcy5tb250aHMsICdNJykpO1xuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlcztcbiAgICAgICAgb3RoZXIgPSBjbG9uZVdpdGhPZmZzZXQob3RoZXIsIGJhc2UpO1xuICAgICAgICBpZiAoYmFzZS5pc0JlZm9yZShvdGhlcikpIHtcbiAgICAgICAgICAgIHJlcyA9IHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzID0gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShvdGhlciwgYmFzZSk7XG4gICAgICAgICAgICByZXMubWlsbGlzZWNvbmRzID0gLXJlcy5taWxsaXNlY29uZHM7XG4gICAgICAgICAgICByZXMubW9udGhzID0gLXJlcy5tb250aHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUFkZGVyKGRpcmVjdGlvbiwgbmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbCwgcGVyaW9kKSB7XG4gICAgICAgICAgICB2YXIgZHVyLCB0bXA7XG4gICAgICAgICAgICAvL2ludmVydCB0aGUgYXJndW1lbnRzLCBidXQgY29tcGxhaW4gYWJvdXQgaXRcbiAgICAgICAgICAgIGlmIChwZXJpb2QgIT09IG51bGwgJiYgIWlzTmFOKCtwZXJpb2QpKSB7XG4gICAgICAgICAgICAgICAgZGVwcmVjYXRlU2ltcGxlKG5hbWUsICdtb21lbnQoKS4nICsgbmFtZSAgKyAnKHBlcmlvZCwgbnVtYmVyKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIG1vbWVudCgpLicgKyBuYW1lICsgJyhudW1iZXIsIHBlcmlvZCkuJyk7XG4gICAgICAgICAgICAgICAgdG1wID0gdmFsOyB2YWwgPSBwZXJpb2Q7IHBlcmlvZCA9IHRtcDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFsID0gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgPyArdmFsIDogdmFsO1xuICAgICAgICAgICAgZHVyID0gY3JlYXRlX19jcmVhdGVEdXJhdGlvbih2YWwsIHBlcmlvZCk7XG4gICAgICAgICAgICBhZGRfc3VidHJhY3RfX2FkZFN1YnRyYWN0KHRoaXMsIGR1ciwgZGlyZWN0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZF9zdWJ0cmFjdF9fYWRkU3VidHJhY3QgKG1vbSwgZHVyYXRpb24sIGlzQWRkaW5nLCB1cGRhdGVPZmZzZXQpIHtcbiAgICAgICAgdmFyIG1pbGxpc2Vjb25kcyA9IGR1cmF0aW9uLl9taWxsaXNlY29uZHMsXG4gICAgICAgICAgICBkYXlzID0gZHVyYXRpb24uX2RheXMsXG4gICAgICAgICAgICBtb250aHMgPSBkdXJhdGlvbi5fbW9udGhzO1xuICAgICAgICB1cGRhdGVPZmZzZXQgPSB1cGRhdGVPZmZzZXQgPT0gbnVsbCA/IHRydWUgOiB1cGRhdGVPZmZzZXQ7XG5cbiAgICAgICAgaWYgKG1pbGxpc2Vjb25kcykge1xuICAgICAgICAgICAgbW9tLl9kLnNldFRpbWUoK21vbS5fZCArIG1pbGxpc2Vjb25kcyAqIGlzQWRkaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF5cykge1xuICAgICAgICAgICAgZ2V0X3NldF9fc2V0KG1vbSwgJ0RhdGUnLCBnZXRfc2V0X19nZXQobW9tLCAnRGF0ZScpICsgZGF5cyAqIGlzQWRkaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobW9udGhzKSB7XG4gICAgICAgICAgICBzZXRNb250aChtb20sIGdldF9zZXRfX2dldChtb20sICdNb250aCcpICsgbW9udGhzICogaXNBZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1cGRhdGVPZmZzZXQpIHtcbiAgICAgICAgICAgIHV0aWxzX2hvb2tzX19ob29rcy51cGRhdGVPZmZzZXQobW9tLCBkYXlzIHx8IG1vbnRocyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYWRkX3N1YnRyYWN0X19hZGQgICAgICA9IGNyZWF0ZUFkZGVyKDEsICdhZGQnKTtcbiAgICB2YXIgYWRkX3N1YnRyYWN0X19zdWJ0cmFjdCA9IGNyZWF0ZUFkZGVyKC0xLCAnc3VidHJhY3QnKTtcblxuICAgIGZ1bmN0aW9uIG1vbWVudF9jYWxlbmRhcl9fY2FsZW5kYXIgKHRpbWUsIGZvcm1hdHMpIHtcbiAgICAgICAgLy8gV2Ugd2FudCB0byBjb21wYXJlIHRoZSBzdGFydCBvZiB0b2RheSwgdnMgdGhpcy5cbiAgICAgICAgLy8gR2V0dGluZyBzdGFydC1vZi10b2RheSBkZXBlbmRzIG9uIHdoZXRoZXIgd2UncmUgbG9jYWwvdXRjL29mZnNldCBvciBub3QuXG4gICAgICAgIHZhciBub3cgPSB0aW1lIHx8IGxvY2FsX19jcmVhdGVMb2NhbCgpLFxuICAgICAgICAgICAgc29kID0gY2xvbmVXaXRoT2Zmc2V0KG5vdywgdGhpcykuc3RhcnRPZignZGF5JyksXG4gICAgICAgICAgICBkaWZmID0gdGhpcy5kaWZmKHNvZCwgJ2RheXMnLCB0cnVlKSxcbiAgICAgICAgICAgIGZvcm1hdCA9IGRpZmYgPCAtNiA/ICdzYW1lRWxzZScgOlxuICAgICAgICAgICAgICAgIGRpZmYgPCAtMSA/ICdsYXN0V2VlaycgOlxuICAgICAgICAgICAgICAgIGRpZmYgPCAwID8gJ2xhc3REYXknIDpcbiAgICAgICAgICAgICAgICBkaWZmIDwgMSA/ICdzYW1lRGF5JyA6XG4gICAgICAgICAgICAgICAgZGlmZiA8IDIgPyAnbmV4dERheScgOlxuICAgICAgICAgICAgICAgIGRpZmYgPCA3ID8gJ25leHRXZWVrJyA6ICdzYW1lRWxzZSc7XG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1hdChmb3JtYXRzICYmIGZvcm1hdHNbZm9ybWF0XSB8fCB0aGlzLmxvY2FsZURhdGEoKS5jYWxlbmRhcihmb3JtYXQsIHRoaXMsIGxvY2FsX19jcmVhdGVMb2NhbChub3cpKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvbmUgKCkge1xuICAgICAgICByZXR1cm4gbmV3IE1vbWVudCh0aGlzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0FmdGVyIChpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgdmFyIGlucHV0TXM7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModHlwZW9mIHVuaXRzICE9PSAndW5kZWZpbmVkJyA/IHVuaXRzIDogJ21pbGxpc2Vjb25kJyk7XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgaW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGxvY2FsX19jcmVhdGVMb2NhbChpbnB1dCk7XG4gICAgICAgICAgICByZXR1cm4gK3RoaXMgPiAraW5wdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnB1dE1zID0gaXNNb21lbnQoaW5wdXQpID8gK2lucHV0IDogK2xvY2FsX19jcmVhdGVMb2NhbChpbnB1dCk7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXRNcyA8ICt0aGlzLmNsb25lKCkuc3RhcnRPZih1bml0cyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0JlZm9yZSAoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHZhciBpbnB1dE1zO1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHR5cGVvZiB1bml0cyAhPT0gJ3VuZGVmaW5lZCcgPyB1bml0cyA6ICdtaWxsaXNlY29uZCcpO1xuICAgICAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgICAgIGlucHV0ID0gaXNNb21lbnQoaW5wdXQpID8gaW5wdXQgOiBsb2NhbF9fY3JlYXRlTG9jYWwoaW5wdXQpO1xuICAgICAgICAgICAgcmV0dXJuICt0aGlzIDwgK2lucHV0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5wdXRNcyA9IGlzTW9tZW50KGlucHV0KSA/ICtpbnB1dCA6ICtsb2NhbF9fY3JlYXRlTG9jYWwoaW5wdXQpO1xuICAgICAgICAgICAgcmV0dXJuICt0aGlzLmNsb25lKCkuZW5kT2YodW5pdHMpIDwgaW5wdXRNcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQmV0d2VlbiAoZnJvbSwgdG8sIHVuaXRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzQWZ0ZXIoZnJvbSwgdW5pdHMpICYmIHRoaXMuaXNCZWZvcmUodG8sIHVuaXRzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1NhbWUgKGlucHV0LCB1bml0cykge1xuICAgICAgICB2YXIgaW5wdXRNcztcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyB8fCAnbWlsbGlzZWNvbmQnKTtcbiAgICAgICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgICAgICBpbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogbG9jYWxfX2NyZWF0ZUxvY2FsKGlucHV0KTtcbiAgICAgICAgICAgIHJldHVybiArdGhpcyA9PT0gK2lucHV0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5wdXRNcyA9ICtsb2NhbF9fY3JlYXRlTG9jYWwoaW5wdXQpO1xuICAgICAgICAgICAgcmV0dXJuICsodGhpcy5jbG9uZSgpLnN0YXJ0T2YodW5pdHMpKSA8PSBpbnB1dE1zICYmIGlucHV0TXMgPD0gKyh0aGlzLmNsb25lKCkuZW5kT2YodW5pdHMpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpZmYgKGlucHV0LCB1bml0cywgYXNGbG9hdCkge1xuICAgICAgICB2YXIgdGhhdCA9IGNsb25lV2l0aE9mZnNldChpbnB1dCwgdGhpcyksXG4gICAgICAgICAgICB6b25lRGVsdGEgPSAodGhhdC51dGNPZmZzZXQoKSAtIHRoaXMudXRjT2Zmc2V0KCkpICogNmU0LFxuICAgICAgICAgICAgZGVsdGEsIG91dHB1dDtcblxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcblxuICAgICAgICBpZiAodW5pdHMgPT09ICd5ZWFyJyB8fCB1bml0cyA9PT0gJ21vbnRoJyB8fCB1bml0cyA9PT0gJ3F1YXJ0ZXInKSB7XG4gICAgICAgICAgICBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdCk7XG4gICAgICAgICAgICBpZiAodW5pdHMgPT09ICdxdWFydGVyJykge1xuICAgICAgICAgICAgICAgIG91dHB1dCA9IG91dHB1dCAvIDM7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHVuaXRzID09PSAneWVhcicpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQgLyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlbHRhID0gdGhpcyAtIHRoYXQ7XG4gICAgICAgICAgICBvdXRwdXQgPSB1bml0cyA9PT0gJ3NlY29uZCcgPyBkZWx0YSAvIDFlMyA6IC8vIDEwMDBcbiAgICAgICAgICAgICAgICB1bml0cyA9PT0gJ21pbnV0ZScgPyBkZWx0YSAvIDZlNCA6IC8vIDEwMDAgKiA2MFxuICAgICAgICAgICAgICAgIHVuaXRzID09PSAnaG91cicgPyBkZWx0YSAvIDM2ZTUgOiAvLyAxMDAwICogNjAgKiA2MFxuICAgICAgICAgICAgICAgIHVuaXRzID09PSAnZGF5JyA/IChkZWx0YSAtIHpvbmVEZWx0YSkgLyA4NjRlNSA6IC8vIDEwMDAgKiA2MCAqIDYwICogMjQsIG5lZ2F0ZSBkc3RcbiAgICAgICAgICAgICAgICB1bml0cyA9PT0gJ3dlZWsnID8gKGRlbHRhIC0gem9uZURlbHRhKSAvIDYwNDhlNSA6IC8vIDEwMDAgKiA2MCAqIDYwICogMjQgKiA3LCBuZWdhdGUgZHN0XG4gICAgICAgICAgICAgICAgZGVsdGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFzRmxvYXQgPyBvdXRwdXQgOiBhYnNGbG9vcihvdXRwdXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbnRoRGlmZiAoYSwgYikge1xuICAgICAgICAvLyBkaWZmZXJlbmNlIGluIG1vbnRoc1xuICAgICAgICB2YXIgd2hvbGVNb250aERpZmYgPSAoKGIueWVhcigpIC0gYS55ZWFyKCkpICogMTIpICsgKGIubW9udGgoKSAtIGEubW9udGgoKSksXG4gICAgICAgICAgICAvLyBiIGlzIGluIChhbmNob3IgLSAxIG1vbnRoLCBhbmNob3IgKyAxIG1vbnRoKVxuICAgICAgICAgICAgYW5jaG9yID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiwgJ21vbnRocycpLFxuICAgICAgICAgICAgYW5jaG9yMiwgYWRqdXN0O1xuXG4gICAgICAgIGlmIChiIC0gYW5jaG9yIDwgMCkge1xuICAgICAgICAgICAgYW5jaG9yMiA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYgLSAxLCAnbW9udGhzJyk7XG4gICAgICAgICAgICAvLyBsaW5lYXIgYWNyb3NzIHRoZSBtb250aFxuICAgICAgICAgICAgYWRqdXN0ID0gKGIgLSBhbmNob3IpIC8gKGFuY2hvciAtIGFuY2hvcjIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYW5jaG9yMiA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYgKyAxLCAnbW9udGhzJyk7XG4gICAgICAgICAgICAvLyBsaW5lYXIgYWNyb3NzIHRoZSBtb250aFxuICAgICAgICAgICAgYWRqdXN0ID0gKGIgLSBhbmNob3IpIC8gKGFuY2hvcjIgLSBhbmNob3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIC0od2hvbGVNb250aERpZmYgKyBhZGp1c3QpO1xuICAgIH1cblxuICAgIHV0aWxzX2hvb2tzX19ob29rcy5kZWZhdWx0Rm9ybWF0ID0gJ1lZWVktTU0tRERUSEg6bW06c3NaJztcblxuICAgIGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5sb2NhbGUoJ2VuJykuZm9ybWF0KCdkZGQgTU1NIEREIFlZWVkgSEg6bW06c3MgW0dNVF1aWicpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbWVudF9mb3JtYXRfX3RvSVNPU3RyaW5nICgpIHtcbiAgICAgICAgdmFyIG0gPSB0aGlzLmNsb25lKCkudXRjKCk7XG4gICAgICAgIGlmICgwIDwgbS55ZWFyKCkgJiYgbS55ZWFyKCkgPD0gOTk5OSkge1xuICAgICAgICAgICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZykge1xuICAgICAgICAgICAgICAgIC8vIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiBpcyB+NTB4IGZhc3RlciwgdXNlIGl0IHdoZW4gd2UgY2FuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9EYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdE1vbWVudChtLCAnWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1taXScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdE1vbWVudChtLCAnWVlZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXQgKGlucHV0U3RyaW5nKSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSBmb3JtYXRNb21lbnQodGhpcywgaW5wdXRTdHJpbmcgfHwgdXRpbHNfaG9va3NfX2hvb2tzLmRlZmF1bHRGb3JtYXQpO1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkucG9zdGZvcm1hdChvdXRwdXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZyb20gKHRpbWUsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNyZWF0ZV9fY3JlYXRlRHVyYXRpb24oe3RvOiB0aGlzLCBmcm9tOiB0aW1lfSkubG9jYWxlKHRoaXMubG9jYWxlKCkpLmh1bWFuaXplKCF3aXRob3V0U3VmZml4KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmcm9tTm93ICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb20obG9jYWxfX2NyZWF0ZUxvY2FsKCksIHdpdGhvdXRTdWZmaXgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvICh0aW1lLCB3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjcmVhdGVfX2NyZWF0ZUR1cmF0aW9uKHtmcm9tOiB0aGlzLCB0bzogdGltZX0pLmxvY2FsZSh0aGlzLmxvY2FsZSgpKS5odW1hbml6ZSghd2l0aG91dFN1ZmZpeCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9Ob3cgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG8obG9jYWxfX2NyZWF0ZUxvY2FsKCksIHdpdGhvdXRTdWZmaXgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZSAoa2V5KSB7XG4gICAgICAgIHZhciBuZXdMb2NhbGVEYXRhO1xuXG4gICAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2FsZS5fYWJicjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld0xvY2FsZURhdGEgPSBsb2NhbGVfbG9jYWxlc19fZ2V0TG9jYWxlKGtleSk7XG4gICAgICAgICAgICBpZiAobmV3TG9jYWxlRGF0YSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9jYWxlID0gbmV3TG9jYWxlRGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGxhbmcgPSBkZXByZWNhdGUoXG4gICAgICAgICdtb21lbnQoKS5sYW5nKCkgaXMgZGVwcmVjYXRlZC4gSW5zdGVhZCwgdXNlIG1vbWVudCgpLmxvY2FsZURhdGEoKSB0byBnZXQgdGhlIGxhbmd1YWdlIGNvbmZpZ3VyYXRpb24uIFVzZSBtb21lbnQoKS5sb2NhbGUoKSB0byBjaGFuZ2UgbGFuZ3VhZ2VzLicsXG4gICAgICAgIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlRGF0YSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sb2NhbGU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RhcnRPZiAodW5pdHMpIHtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIC8vIHRoZSBmb2xsb3dpbmcgc3dpdGNoIGludGVudGlvbmFsbHkgb21pdHMgYnJlYWsga2V5d29yZHNcbiAgICAgICAgLy8gdG8gdXRpbGl6ZSBmYWxsaW5nIHRocm91Z2ggdGhlIGNhc2VzLlxuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgdGhpcy5tb250aCgwKTtcbiAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSAncXVhcnRlcic6XG4gICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgIHRoaXMuZGF0ZSgxKTtcbiAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgIGNhc2UgJ2lzb1dlZWsnOlxuICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICAgICAgdGhpcy5ob3VycygwKTtcbiAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICB0aGlzLm1pbnV0ZXMoMCk7XG4gICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICB0aGlzLnNlY29uZHMoMCk7XG4gICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICB0aGlzLm1pbGxpc2Vjb25kcygwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHdlZWtzIGFyZSBhIHNwZWNpYWwgY2FzZVxuICAgICAgICBpZiAodW5pdHMgPT09ICd3ZWVrJykge1xuICAgICAgICAgICAgdGhpcy53ZWVrZGF5KDApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ2lzb1dlZWsnKSB7XG4gICAgICAgICAgICB0aGlzLmlzb1dlZWtkYXkoMSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBxdWFydGVycyBhcmUgYWxzbyBzcGVjaWFsXG4gICAgICAgIGlmICh1bml0cyA9PT0gJ3F1YXJ0ZXInKSB7XG4gICAgICAgICAgICB0aGlzLm1vbnRoKE1hdGguZmxvb3IodGhpcy5tb250aCgpIC8gMykgKiAzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuZE9mICh1bml0cykge1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgaWYgKHVuaXRzID09PSB1bmRlZmluZWQgfHwgdW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0T2YodW5pdHMpLmFkZCgxLCAodW5pdHMgPT09ICdpc29XZWVrJyA/ICd3ZWVrJyA6IHVuaXRzKSkuc3VidHJhY3QoMSwgJ21zJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9fdHlwZV9fdmFsdWVPZiAoKSB7XG4gICAgICAgIHJldHVybiArdGhpcy5fZCAtICgodGhpcy5fb2Zmc2V0IHx8IDApICogNjAwMDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVuaXggKCkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcigrdGhpcyAvIDEwMDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvRGF0ZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vZmZzZXQgPyBuZXcgRGF0ZSgrdGhpcykgOiB0aGlzLl9kO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvQXJyYXkgKCkge1xuICAgICAgICB2YXIgbSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBbbS55ZWFyKCksIG0ubW9udGgoKSwgbS5kYXRlKCksIG0uaG91cigpLCBtLm1pbnV0ZSgpLCBtLnNlY29uZCgpLCBtLm1pbGxpc2Vjb25kKCldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvT2JqZWN0ICgpIHtcbiAgICAgICAgdmFyIG0gPSB0aGlzO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeWVhcnM6IG0ueWVhcigpLFxuICAgICAgICAgICAgbW9udGhzOiBtLm1vbnRoKCksXG4gICAgICAgICAgICBkYXRlOiBtLmRhdGUoKSxcbiAgICAgICAgICAgIGhvdXJzOiBtLmhvdXJzKCksXG4gICAgICAgICAgICBtaW51dGVzOiBtLm1pbnV0ZXMoKSxcbiAgICAgICAgICAgIHNlY29uZHM6IG0uc2Vjb25kcygpLFxuICAgICAgICAgICAgbWlsbGlzZWNvbmRzOiBtLm1pbGxpc2Vjb25kcygpXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9tZW50X3ZhbGlkX19pc1ZhbGlkICgpIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkX19pc1ZhbGlkKHRoaXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNpbmdGbGFncyAoKSB7XG4gICAgICAgIHJldHVybiBleHRlbmQoe30sIGdldFBhcnNpbmdGbGFncyh0aGlzKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW52YWxpZEF0ICgpIHtcbiAgICAgICAgcmV0dXJuIGdldFBhcnNpbmdGbGFncyh0aGlzKS5vdmVyZmxvdztcbiAgICB9XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ2dnJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2Vla1llYXIoKSAlIDEwMDtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnR0cnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc29XZWVrWWVhcigpICUgMTAwO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gYWRkV2Vla1llYXJGb3JtYXRUb2tlbiAodG9rZW4sIGdldHRlcikge1xuICAgICAgICBhZGRGb3JtYXRUb2tlbigwLCBbdG9rZW4sIHRva2VuLmxlbmd0aF0sIDAsIGdldHRlcik7XG4gICAgfVxuXG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignZ2dnZycsICAgICAnd2Vla1llYXInKTtcbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdnZ2dnZycsICAgICd3ZWVrWWVhcicpO1xuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ0dHR0cnLCAgJ2lzb1dlZWtZZWFyJyk7XG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignR0dHR0cnLCAnaXNvV2Vla1llYXInKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnd2Vla1llYXInLCAnZ2cnKTtcbiAgICBhZGRVbml0QWxpYXMoJ2lzb1dlZWtZZWFyJywgJ0dHJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdHJywgICAgICBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignZycsICAgICAgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0dHJywgICAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdnZycsICAgICBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignR0dHRycsICAgbWF0Y2gxdG80LCBtYXRjaDQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2dnZ2cnLCAgIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbiAgICBhZGRSZWdleFRva2VuKCdHR0dHRycsICBtYXRjaDF0bzYsIG1hdGNoNik7XG4gICAgYWRkUmVnZXhUb2tlbignZ2dnZ2cnLCAgbWF0Y2gxdG82LCBtYXRjaDYpO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydnZ2dnJywgJ2dnZ2dnJywgJ0dHR0cnLCAnR0dHR0cnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW4uc3Vic3RyKDAsIDIpXSA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZ2cnLCAnR0cnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW5dID0gdXRpbHNfaG9va3NfX2hvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIGZ1bmN0aW9uIHdlZWtzSW5ZZWFyKHllYXIsIGRvdywgZG95KSB7XG4gICAgICAgIHJldHVybiB3ZWVrT2ZZZWFyKGxvY2FsX19jcmVhdGVMb2NhbChbeWVhciwgMTEsIDMxICsgZG93IC0gZG95XSksIGRvdywgZG95KS53ZWVrO1xuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldFdlZWtZZWFyIChpbnB1dCkge1xuICAgICAgICB2YXIgeWVhciA9IHdlZWtPZlllYXIodGhpcywgdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG93LCB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3kpLnllYXI7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8geWVhciA6IHRoaXMuYWRkKChpbnB1dCAtIHllYXIpLCAneScpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldElTT1dlZWtZZWFyIChpbnB1dCkge1xuICAgICAgICB2YXIgeWVhciA9IHdlZWtPZlllYXIodGhpcywgMSwgNCkueWVhcjtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB5ZWFyIDogdGhpcy5hZGQoKGlucHV0IC0geWVhciksICd5Jyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0SVNPV2Vla3NJblllYXIgKCkge1xuICAgICAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy55ZWFyKCksIDEsIDQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFdlZWtzSW5ZZWFyICgpIHtcbiAgICAgICAgdmFyIHdlZWtJbmZvID0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWs7XG4gICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgd2Vla0luZm8uZG93LCB3ZWVrSW5mby5kb3kpO1xuICAgIH1cblxuICAgIGFkZEZvcm1hdFRva2VuKCdRJywgMCwgMCwgJ3F1YXJ0ZXInKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygncXVhcnRlcicsICdRJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdRJywgbWF0Y2gxKTtcbiAgICBhZGRQYXJzZVRva2VuKCdRJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtNT05USF0gPSAodG9JbnQoaW5wdXQpIC0gMSkgKiAzO1xuICAgIH0pO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0UXVhcnRlciAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyBNYXRoLmNlaWwoKHRoaXMubW9udGgoKSArIDEpIC8gMykgOiB0aGlzLm1vbnRoKChpbnB1dCAtIDEpICogMyArIHRoaXMubW9udGgoKSAlIDMpO1xuICAgIH1cblxuICAgIGFkZEZvcm1hdFRva2VuKCdEJywgWydERCcsIDJdLCAnRG8nLCAnZGF0ZScpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdkYXRlJywgJ0QnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ0QnLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdERCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdEbycsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBpc1N0cmljdCA/IGxvY2FsZS5fb3JkaW5hbFBhcnNlIDogbG9jYWxlLl9vcmRpbmFsUGFyc2VMZW5pZW50O1xuICAgIH0pO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ0QnLCAnREQnXSwgREFURSk7XG4gICAgYWRkUGFyc2VUb2tlbignRG8nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W0RBVEVdID0gdG9JbnQoaW5wdXQubWF0Y2gobWF0Y2gxdG8yKVswXSwgMTApO1xuICAgIH0pO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldERheU9mTW9udGggPSBtYWtlR2V0U2V0KCdEYXRlJywgdHJ1ZSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZCcsIDAsICdkbycsICdkYXknKTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzTWluKHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZGRkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXNTaG9ydCh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2RkZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5cyh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2UnLCAwLCAwLCAnd2Vla2RheScpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdFJywgMCwgMCwgJ2lzb1dlZWtkYXknKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnZGF5JywgJ2QnKTtcbiAgICBhZGRVbml0QWxpYXMoJ3dlZWtkYXknLCAnZScpO1xuICAgIGFkZFVuaXRBbGlhcygnaXNvV2Vla2RheScsICdFJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdkJywgICAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdlJywgICAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdFJywgICAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdkZCcsICAgbWF0Y2hXb3JkKTtcbiAgICBhZGRSZWdleFRva2VuKCdkZGQnLCAgbWF0Y2hXb3JkKTtcbiAgICBhZGRSZWdleFRva2VuKCdkZGRkJywgbWF0Y2hXb3JkKTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZGQnLCAnZGRkJywgJ2RkZGQnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcpIHtcbiAgICAgICAgdmFyIHdlZWtkYXkgPSBjb25maWcuX2xvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0KTtcbiAgICAgICAgLy8gaWYgd2UgZGlkbid0IGdldCBhIHdlZWtkYXkgbmFtZSwgbWFyayB0aGUgZGF0ZSBhcyBpbnZhbGlkXG4gICAgICAgIGlmICh3ZWVrZGF5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHdlZWsuZCA9IHdlZWtkYXk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkV2Vla2RheSA9IGlucHV0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ2QnLCAnZScsICdFJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB3ZWVrW3Rva2VuXSA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIGZ1bmN0aW9uIHBhcnNlV2Vla2RheShpbnB1dCwgbG9jYWxlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzTmFOKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KGlucHV0LCAxMCk7XG4gICAgICAgIH1cblxuICAgICAgICBpbnB1dCA9IGxvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0KTtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIExPQ0FMRVNcblxuICAgIHZhciBkZWZhdWx0TG9jYWxlV2Vla2RheXMgPSAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KCdfJyk7XG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXMgKG0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzW20uZGF5KCldO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCA9ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyk7XG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNTaG9ydCAobSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFttLmRheSgpXTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZVdlZWtkYXlzTWluID0gJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzTWluIChtKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblttLmRheSgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5c1BhcnNlICh3ZWVrZGF5TmFtZSkge1xuICAgICAgICB2YXIgaSwgbW9tLCByZWdleDtcblxuICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlID0gdGhpcy5fd2Vla2RheXNQYXJzZSB8fCBbXTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIG1vbSA9IGxvY2FsX19jcmVhdGVMb2NhbChbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgICAgICAgICByZWdleCA9ICdeJyArIHRoaXMud2Vla2RheXMobW9tLCAnJykgKyAnfF4nICsgdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpICsgJ3xeJyArIHRoaXMud2Vla2RheXNNaW4obW9tLCAnJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAocmVnZXgucmVwbGFjZSgnLicsICcnKSwgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRlc3QgdGhlIHJlZ2V4XG4gICAgICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0RGF5T2ZXZWVrIChpbnB1dCkge1xuICAgICAgICB2YXIgZGF5ID0gdGhpcy5faXNVVEMgPyB0aGlzLl9kLmdldFVUQ0RheSgpIDogdGhpcy5fZC5nZXREYXkoKTtcbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlucHV0ID0gcGFyc2VXZWVrZGF5KGlucHV0LCB0aGlzLmxvY2FsZURhdGEoKSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hZGQoaW5wdXQgLSBkYXksICdkJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZGF5O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrIChpbnB1dCkge1xuICAgICAgICB2YXIgd2Vla2RheSA9ICh0aGlzLmRheSgpICsgNyAtIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRvdykgJSA3O1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWtkYXkgOiB0aGlzLmFkZChpbnB1dCAtIHdlZWtkYXksICdkJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0SVNPRGF5T2ZXZWVrIChpbnB1dCkge1xuICAgICAgICAvLyBiZWhhdmVzIHRoZSBzYW1lIGFzIG1vbWVudCNkYXkgZXhjZXB0XG4gICAgICAgIC8vIGFzIGEgZ2V0dGVyLCByZXR1cm5zIDcgaW5zdGVhZCBvZiAwICgxLTcgcmFuZ2UgaW5zdGVhZCBvZiAwLTYpXG4gICAgICAgIC8vIGFzIGEgc2V0dGVyLCBzdW5kYXkgc2hvdWxkIGJlbG9uZyB0byB0aGUgcHJldmlvdXMgd2Vlay5cbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB0aGlzLmRheSgpIHx8IDcgOiB0aGlzLmRheSh0aGlzLmRheSgpICUgNyA/IGlucHV0IDogaW5wdXQgLSA3KTtcbiAgICB9XG5cbiAgICBhZGRGb3JtYXRUb2tlbignSCcsIFsnSEgnLCAyXSwgMCwgJ2hvdXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbignaCcsIFsnaGgnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ob3VycygpICUgMTIgfHwgMTI7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBtZXJpZGllbSAodG9rZW4sIGxvd2VyY2FzZSkge1xuICAgICAgICBhZGRGb3JtYXRUb2tlbih0b2tlbiwgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1lcmlkaWVtKHRoaXMuaG91cnMoKSwgdGhpcy5taW51dGVzKCksIGxvd2VyY2FzZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG1lcmlkaWVtKCdhJywgdHJ1ZSk7XG4gICAgbWVyaWRpZW0oJ0EnLCBmYWxzZSk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ2hvdXInLCAnaCcpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgZnVuY3Rpb24gbWF0Y2hNZXJpZGllbSAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLl9tZXJpZGllbVBhcnNlO1xuICAgIH1cblxuICAgIGFkZFJlZ2V4VG9rZW4oJ2EnLCAgbWF0Y2hNZXJpZGllbSk7XG4gICAgYWRkUmVnZXhUb2tlbignQScsICBtYXRjaE1lcmlkaWVtKTtcbiAgICBhZGRSZWdleFRva2VuKCdIJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignaCcsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0hIJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2hoJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ0gnLCAnSEgnXSwgSE9VUik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ2EnLCAnQSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9pc1BtID0gY29uZmlnLl9sb2NhbGUuaXNQTShpbnB1dCk7XG4gICAgICAgIGNvbmZpZy5fbWVyaWRpZW0gPSBpbnB1dDtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKFsnaCcsICdoaCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dCk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgLy8gTE9DQUxFU1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlSXNQTSAoaW5wdXQpIHtcbiAgICAgICAgLy8gSUU4IFF1aXJrcyBNb2RlICYgSUU3IFN0YW5kYXJkcyBNb2RlIGRvIG5vdCBhbGxvdyBhY2Nlc3Npbmcgc3RyaW5ncyBsaWtlIGFycmF5c1xuICAgICAgICAvLyBVc2luZyBjaGFyQXQgc2hvdWxkIGJlIG1vcmUgY29tcGF0aWJsZS5cbiAgICAgICAgcmV0dXJuICgoaW5wdXQgKyAnJykudG9Mb3dlckNhc2UoKS5jaGFyQXQoMCkgPT09ICdwJyk7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlID0gL1thcF1cXC4/bT9cXC4/L2k7XG4gICAgZnVuY3Rpb24gbG9jYWxlTWVyaWRpZW0gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VycyA+IDExKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdwbScgOiAnUE0nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnYW0nIDogJ0FNJztcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgLy8gU2V0dGluZyB0aGUgaG91ciBzaG91bGQga2VlcCB0aGUgdGltZSwgYmVjYXVzZSB0aGUgdXNlciBleHBsaWNpdGx5XG4gICAgLy8gc3BlY2lmaWVkIHdoaWNoIGhvdXIgaGUgd2FudHMuIFNvIHRyeWluZyB0byBtYWludGFpbiB0aGUgc2FtZSBob3VyIChpblxuICAgIC8vIGEgbmV3IHRpbWV6b25lKSBtYWtlcyBzZW5zZS4gQWRkaW5nL3N1YnRyYWN0aW5nIGhvdXJzIGRvZXMgbm90IGZvbGxvd1xuICAgIC8vIHRoaXMgcnVsZS5cbiAgICB2YXIgZ2V0U2V0SG91ciA9IG1ha2VHZXRTZXQoJ0hvdXJzJywgdHJ1ZSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignbScsIFsnbW0nLCAyXSwgMCwgJ21pbnV0ZScpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdtaW51dGUnLCAnbScpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignbScsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ21tJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydtJywgJ21tJ10sIE1JTlVURSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0TWludXRlID0gbWFrZUdldFNldCgnTWludXRlcycsIGZhbHNlKTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdzJywgWydzcycsIDJdLCAwLCAnc2Vjb25kJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3NlY29uZCcsICdzJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdzJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignc3MnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ3MnLCAnc3MnXSwgU0VDT05EKTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRTZWNvbmQgPSBtYWtlR2V0U2V0KCdTZWNvbmRzJywgZmFsc2UpO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB+fih0aGlzLm1pbGxpc2Vjb25kKCkgLyAxMDApO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTUycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB+fih0aGlzLm1pbGxpc2Vjb25kKCkgLyAxMCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTUycsIDNdLCAwLCAnbWlsbGlzZWNvbmQnKTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1MnLCA0XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTUycsIDVdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1MnLCA2XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1MnLCA3XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTUycsIDhdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTU1MnLCA5XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDAwMDtcbiAgICB9KTtcblxuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdtaWxsaXNlY29uZCcsICdtcycpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignUycsICAgIG1hdGNoMXRvMywgbWF0Y2gxKTtcbiAgICBhZGRSZWdleFRva2VuKCdTUycsICAgbWF0Y2gxdG8zLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1NTUycsICBtYXRjaDF0bzMsIG1hdGNoMyk7XG5cbiAgICB2YXIgdG9rZW47XG4gICAgZm9yICh0b2tlbiA9ICdTU1NTJzsgdG9rZW4ubGVuZ3RoIDw9IDk7IHRva2VuICs9ICdTJykge1xuICAgICAgICBhZGRSZWdleFRva2VuKHRva2VuLCBtYXRjaFVuc2lnbmVkKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZU1zKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtNSUxMSVNFQ09ORF0gPSB0b0ludCgoJzAuJyArIGlucHV0KSAqIDEwMDApO1xuICAgIH1cblxuICAgIGZvciAodG9rZW4gPSAnUyc7IHRva2VuLmxlbmd0aCA8PSA5OyB0b2tlbiArPSAnUycpIHtcbiAgICAgICAgYWRkUGFyc2VUb2tlbih0b2tlbiwgcGFyc2VNcyk7XG4gICAgfVxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRNaWxsaXNlY29uZCA9IG1ha2VHZXRTZXQoJ01pbGxpc2Vjb25kcycsIGZhbHNlKTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCd6JywgIDAsIDAsICd6b25lQWJicicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd6eicsIDAsIDAsICd6b25lTmFtZScpO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0Wm9uZUFiYnIgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyAnVVRDJyA6ICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFpvbmVOYW1lICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gJ0Nvb3JkaW5hdGVkIFVuaXZlcnNhbCBUaW1lJyA6ICcnO1xuICAgIH1cblxuICAgIHZhciBtb21lbnRQcm90b3R5cGVfX3Byb3RvID0gTW9tZW50LnByb3RvdHlwZTtcblxuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uYWRkICAgICAgICAgID0gYWRkX3N1YnRyYWN0X19hZGQ7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5jYWxlbmRhciAgICAgPSBtb21lbnRfY2FsZW5kYXJfX2NhbGVuZGFyO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uY2xvbmUgICAgICAgID0gY2xvbmU7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5kaWZmICAgICAgICAgPSBkaWZmO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uZW5kT2YgICAgICAgID0gZW5kT2Y7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5mb3JtYXQgICAgICAgPSBmb3JtYXQ7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5mcm9tICAgICAgICAgPSBmcm9tO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uZnJvbU5vdyAgICAgID0gZnJvbU5vdztcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnRvICAgICAgICAgICA9IHRvO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8udG9Ob3cgICAgICAgID0gdG9Ob3c7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5nZXQgICAgICAgICAgPSBnZXRTZXQ7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5pbnZhbGlkQXQgICAgPSBpbnZhbGlkQXQ7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5pc0FmdGVyICAgICAgPSBpc0FmdGVyO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaXNCZWZvcmUgICAgID0gaXNCZWZvcmU7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5pc0JldHdlZW4gICAgPSBpc0JldHdlZW47XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5pc1NhbWUgICAgICAgPSBpc1NhbWU7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5pc1ZhbGlkICAgICAgPSBtb21lbnRfdmFsaWRfX2lzVmFsaWQ7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5sYW5nICAgICAgICAgPSBsYW5nO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8ubG9jYWxlICAgICAgID0gbG9jYWxlO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8ubG9jYWxlRGF0YSAgID0gbG9jYWxlRGF0YTtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLm1heCAgICAgICAgICA9IHByb3RvdHlwZU1heDtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLm1pbiAgICAgICAgICA9IHByb3RvdHlwZU1pbjtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnBhcnNpbmdGbGFncyA9IHBhcnNpbmdGbGFncztcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnNldCAgICAgICAgICA9IGdldFNldDtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnN0YXJ0T2YgICAgICA9IHN0YXJ0T2Y7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5zdWJ0cmFjdCAgICAgPSBhZGRfc3VidHJhY3RfX3N1YnRyYWN0O1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8udG9BcnJheSAgICAgID0gdG9BcnJheTtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnRvT2JqZWN0ICAgICA9IHRvT2JqZWN0O1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8udG9EYXRlICAgICAgID0gdG9EYXRlO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8udG9JU09TdHJpbmcgID0gbW9tZW50X2Zvcm1hdF9fdG9JU09TdHJpbmc7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by50b0pTT04gICAgICAgPSBtb21lbnRfZm9ybWF0X190b0lTT1N0cmluZztcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnRvU3RyaW5nICAgICA9IHRvU3RyaW5nO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8udW5peCAgICAgICAgID0gdW5peDtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnZhbHVlT2YgICAgICA9IHRvX3R5cGVfX3ZhbHVlT2Y7XG5cbiAgICAvLyBZZWFyXG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by55ZWFyICAgICAgID0gZ2V0U2V0WWVhcjtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmlzTGVhcFllYXIgPSBnZXRJc0xlYXBZZWFyO1xuXG4gICAgLy8gV2VlayBZZWFyXG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by53ZWVrWWVhciAgICA9IGdldFNldFdlZWtZZWFyO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaXNvV2Vla1llYXIgPSBnZXRTZXRJU09XZWVrWWVhcjtcblxuICAgIC8vIFF1YXJ0ZXJcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnF1YXJ0ZXIgPSBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnF1YXJ0ZXJzID0gZ2V0U2V0UXVhcnRlcjtcblxuICAgIC8vIE1vbnRoXG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5tb250aCAgICAgICA9IGdldFNldE1vbnRoO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uZGF5c0luTW9udGggPSBnZXREYXlzSW5Nb250aDtcblxuICAgIC8vIFdlZWtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLndlZWsgICAgICAgICAgID0gbW9tZW50UHJvdG90eXBlX19wcm90by53ZWVrcyAgICAgICAgPSBnZXRTZXRXZWVrO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaXNvV2VlayAgICAgICAgPSBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmlzb1dlZWtzICAgICA9IGdldFNldElTT1dlZWs7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by53ZWVrc0luWWVhciAgICA9IGdldFdlZWtzSW5ZZWFyO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaXNvV2Vla3NJblllYXIgPSBnZXRJU09XZWVrc0luWWVhcjtcblxuICAgIC8vIERheVxuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uZGF0ZSAgICAgICA9IGdldFNldERheU9mTW9udGg7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5kYXkgICAgICAgID0gbW9tZW50UHJvdG90eXBlX19wcm90by5kYXlzICAgICAgICAgICAgID0gZ2V0U2V0RGF5T2ZXZWVrO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8ud2Vla2RheSAgICA9IGdldFNldExvY2FsZURheU9mV2VlaztcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmlzb1dlZWtkYXkgPSBnZXRTZXRJU09EYXlPZldlZWs7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5kYXlPZlllYXIgID0gZ2V0U2V0RGF5T2ZZZWFyO1xuXG4gICAgLy8gSG91clxuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaG91ciA9IG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaG91cnMgPSBnZXRTZXRIb3VyO1xuXG4gICAgLy8gTWludXRlXG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5taW51dGUgPSBtb21lbnRQcm90b3R5cGVfX3Byb3RvLm1pbnV0ZXMgPSBnZXRTZXRNaW51dGU7XG5cbiAgICAvLyBTZWNvbmRcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnNlY29uZCA9IG1vbWVudFByb3RvdHlwZV9fcHJvdG8uc2Vjb25kcyA9IGdldFNldFNlY29uZDtcblxuICAgIC8vIE1pbGxpc2Vjb25kXG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5taWxsaXNlY29uZCA9IG1vbWVudFByb3RvdHlwZV9fcHJvdG8ubWlsbGlzZWNvbmRzID0gZ2V0U2V0TWlsbGlzZWNvbmQ7XG5cbiAgICAvLyBPZmZzZXRcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnV0Y09mZnNldCAgICAgICAgICAgID0gZ2V0U2V0T2Zmc2V0O1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8udXRjICAgICAgICAgICAgICAgICAgPSBzZXRPZmZzZXRUb1VUQztcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmxvY2FsICAgICAgICAgICAgICAgID0gc2V0T2Zmc2V0VG9Mb2NhbDtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnBhcnNlWm9uZSAgICAgICAgICAgID0gc2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQ7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5oYXNBbGlnbmVkSG91ck9mZnNldCA9IGhhc0FsaWduZWRIb3VyT2Zmc2V0O1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaXNEU1QgICAgICAgICAgICAgICAgPSBpc0RheWxpZ2h0U2F2aW5nVGltZTtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmlzRFNUU2hpZnRlZCAgICAgICAgID0gaXNEYXlsaWdodFNhdmluZ1RpbWVTaGlmdGVkO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaXNMb2NhbCAgICAgICAgICAgICAgPSBpc0xvY2FsO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaXNVdGNPZmZzZXQgICAgICAgICAgPSBpc1V0Y09mZnNldDtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmlzVXRjICAgICAgICAgICAgICAgID0gaXNVdGM7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5pc1VUQyAgICAgICAgICAgICAgICA9IGlzVXRjO1xuXG4gICAgLy8gVGltZXpvbmVcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnpvbmVBYmJyID0gZ2V0Wm9uZUFiYnI7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by56b25lTmFtZSA9IGdldFpvbmVOYW1lO1xuXG4gICAgLy8gRGVwcmVjYXRpb25zXG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5kYXRlcyAgPSBkZXByZWNhdGUoJ2RhdGVzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSBkYXRlIGluc3RlYWQuJywgZ2V0U2V0RGF5T2ZNb250aCk7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5tb250aHMgPSBkZXByZWNhdGUoJ21vbnRocyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgbW9udGggaW5zdGVhZCcsIGdldFNldE1vbnRoKTtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnllYXJzICA9IGRlcHJlY2F0ZSgneWVhcnMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIHllYXIgaW5zdGVhZCcsIGdldFNldFllYXIpO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uem9uZSAgID0gZGVwcmVjYXRlKCdtb21lbnQoKS56b25lIGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQoKS51dGNPZmZzZXQgaW5zdGVhZC4gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzE3NzknLCBnZXRTZXRab25lKTtcblxuICAgIHZhciBtb21lbnRQcm90b3R5cGUgPSBtb21lbnRQcm90b3R5cGVfX3Byb3RvO1xuXG4gICAgZnVuY3Rpb24gbW9tZW50X19jcmVhdGVVbml4IChpbnB1dCkge1xuICAgICAgICByZXR1cm4gbG9jYWxfX2NyZWF0ZUxvY2FsKGlucHV0ICogMTAwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9tZW50X19jcmVhdGVJblpvbmUgKCkge1xuICAgICAgICByZXR1cm4gbG9jYWxfX2NyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cykucGFyc2Vab25lKCk7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRDYWxlbmRhciA9IHtcbiAgICAgICAgc2FtZURheSA6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVfY2FsZW5kYXJfX2NhbGVuZGFyIChrZXksIG1vbSwgbm93KSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSB0aGlzLl9jYWxlbmRhcltrZXldO1xuICAgICAgICByZXR1cm4gdHlwZW9mIG91dHB1dCA9PT0gJ2Z1bmN0aW9uJyA/IG91dHB1dC5jYWxsKG1vbSwgbm93KSA6IG91dHB1dDtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvbmdEYXRlRm9ybWF0ID0ge1xuICAgICAgICBMVFMgIDogJ2g6bW06c3MgQScsXG4gICAgICAgIExUICAgOiAnaDptbSBBJyxcbiAgICAgICAgTCAgICA6ICdNTS9ERC9ZWVlZJyxcbiAgICAgICAgTEwgICA6ICdNTU1NIEQsIFlZWVknLFxuICAgICAgICBMTEwgIDogJ01NTU0gRCwgWVlZWSBoOm1tIEEnLFxuICAgICAgICBMTExMIDogJ2RkZGQsIE1NTU0gRCwgWVlZWSBoOm1tIEEnXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGxvbmdEYXRlRm9ybWF0IChrZXkpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV0sXG4gICAgICAgICAgICBmb3JtYXRVcHBlciA9IHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleS50b1VwcGVyQ2FzZSgpXTtcblxuICAgICAgICBpZiAoZm9ybWF0IHx8ICFmb3JtYXRVcHBlcikge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV0gPSBmb3JtYXRVcHBlci5yZXBsYWNlKC9NTU1NfE1NfEREfGRkZGQvZywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbC5zbGljZSgxKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV07XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRJbnZhbGlkRGF0ZSA9ICdJbnZhbGlkIGRhdGUnO1xuXG4gICAgZnVuY3Rpb24gaW52YWxpZERhdGUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52YWxpZERhdGU7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRPcmRpbmFsID0gJyVkJztcbiAgICB2YXIgZGVmYXVsdE9yZGluYWxQYXJzZSA9IC9cXGR7MSwyfS87XG5cbiAgICBmdW5jdGlvbiBvcmRpbmFsIChudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29yZGluYWwucmVwbGFjZSgnJWQnLCBudW1iZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZVBhcnNlUG9zdEZvcm1hdCAoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRSZWxhdGl2ZVRpbWUgPSB7XG4gICAgICAgIGZ1dHVyZSA6ICdpbiAlcycsXG4gICAgICAgIHBhc3QgICA6ICclcyBhZ28nLFxuICAgICAgICBzICA6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgbSAgOiAnYSBtaW51dGUnLFxuICAgICAgICBtbSA6ICclZCBtaW51dGVzJyxcbiAgICAgICAgaCAgOiAnYW4gaG91cicsXG4gICAgICAgIGhoIDogJyVkIGhvdXJzJyxcbiAgICAgICAgZCAgOiAnYSBkYXknLFxuICAgICAgICBkZCA6ICclZCBkYXlzJyxcbiAgICAgICAgTSAgOiAnYSBtb250aCcsXG4gICAgICAgIE1NIDogJyVkIG1vbnRocycsXG4gICAgICAgIHkgIDogJ2EgeWVhcicsXG4gICAgICAgIHl5IDogJyVkIHllYXJzJ1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiByZWxhdGl2ZV9fcmVsYXRpdmVUaW1lIChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IHRoaXMuX3JlbGF0aXZlVGltZVtzdHJpbmddO1xuICAgICAgICByZXR1cm4gKHR5cGVvZiBvdXRwdXQgPT09ICdmdW5jdGlvbicpID9cbiAgICAgICAgICAgIG91dHB1dChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIDpcbiAgICAgICAgICAgIG91dHB1dC5yZXBsYWNlKC8lZC9pLCBudW1iZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhc3RGdXR1cmUgKGRpZmYsIG91dHB1dCkge1xuICAgICAgICB2YXIgZm9ybWF0ID0gdGhpcy5fcmVsYXRpdmVUaW1lW2RpZmYgPiAwID8gJ2Z1dHVyZScgOiAncGFzdCddO1xuICAgICAgICByZXR1cm4gdHlwZW9mIGZvcm1hdCA9PT0gJ2Z1bmN0aW9uJyA/IGZvcm1hdChvdXRwdXQpIDogZm9ybWF0LnJlcGxhY2UoLyVzL2ksIG91dHB1dCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlX3NldF9fc2V0IChjb25maWcpIHtcbiAgICAgICAgdmFyIHByb3AsIGk7XG4gICAgICAgIGZvciAoaSBpbiBjb25maWcpIHtcbiAgICAgICAgICAgIHByb3AgPSBjb25maWdbaV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIHByb3AgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzW2ldID0gcHJvcDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpc1snXycgKyBpXSA9IHByb3A7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gTGVuaWVudCBvcmRpbmFsIHBhcnNpbmcgYWNjZXB0cyBqdXN0IGEgbnVtYmVyIGluIGFkZGl0aW9uIHRvXG4gICAgICAgIC8vIG51bWJlciArIChwb3NzaWJseSkgc3R1ZmYgY29taW5nIGZyb20gX29yZGluYWxQYXJzZUxlbmllbnQuXG4gICAgICAgIHRoaXMuX29yZGluYWxQYXJzZUxlbmllbnQgPSBuZXcgUmVnRXhwKHRoaXMuX29yZGluYWxQYXJzZS5zb3VyY2UgKyAnfCcgKyAoL1xcZHsxLDJ9Lykuc291cmNlKTtcbiAgICB9XG5cbiAgICB2YXIgcHJvdG90eXBlX19wcm90byA9IExvY2FsZS5wcm90b3R5cGU7XG5cbiAgICBwcm90b3R5cGVfX3Byb3RvLl9jYWxlbmRhciAgICAgICA9IGRlZmF1bHRDYWxlbmRhcjtcbiAgICBwcm90b3R5cGVfX3Byb3RvLmNhbGVuZGFyICAgICAgICA9IGxvY2FsZV9jYWxlbmRhcl9fY2FsZW5kYXI7XG4gICAgcHJvdG90eXBlX19wcm90by5fbG9uZ0RhdGVGb3JtYXQgPSBkZWZhdWx0TG9uZ0RhdGVGb3JtYXQ7XG4gICAgcHJvdG90eXBlX19wcm90by5sb25nRGF0ZUZvcm1hdCAgPSBsb25nRGF0ZUZvcm1hdDtcbiAgICBwcm90b3R5cGVfX3Byb3RvLl9pbnZhbGlkRGF0ZSAgICA9IGRlZmF1bHRJbnZhbGlkRGF0ZTtcbiAgICBwcm90b3R5cGVfX3Byb3RvLmludmFsaWREYXRlICAgICA9IGludmFsaWREYXRlO1xuICAgIHByb3RvdHlwZV9fcHJvdG8uX29yZGluYWwgICAgICAgID0gZGVmYXVsdE9yZGluYWw7XG4gICAgcHJvdG90eXBlX19wcm90by5vcmRpbmFsICAgICAgICAgPSBvcmRpbmFsO1xuICAgIHByb3RvdHlwZV9fcHJvdG8uX29yZGluYWxQYXJzZSAgID0gZGVmYXVsdE9yZGluYWxQYXJzZTtcbiAgICBwcm90b3R5cGVfX3Byb3RvLnByZXBhcnNlICAgICAgICA9IHByZVBhcnNlUG9zdEZvcm1hdDtcbiAgICBwcm90b3R5cGVfX3Byb3RvLnBvc3Rmb3JtYXQgICAgICA9IHByZVBhcnNlUG9zdEZvcm1hdDtcbiAgICBwcm90b3R5cGVfX3Byb3RvLl9yZWxhdGl2ZVRpbWUgICA9IGRlZmF1bHRSZWxhdGl2ZVRpbWU7XG4gICAgcHJvdG90eXBlX19wcm90by5yZWxhdGl2ZVRpbWUgICAgPSByZWxhdGl2ZV9fcmVsYXRpdmVUaW1lO1xuICAgIHByb3RvdHlwZV9fcHJvdG8ucGFzdEZ1dHVyZSAgICAgID0gcGFzdEZ1dHVyZTtcbiAgICBwcm90b3R5cGVfX3Byb3RvLnNldCAgICAgICAgICAgICA9IGxvY2FsZV9zZXRfX3NldDtcblxuICAgIC8vIE1vbnRoXG4gICAgcHJvdG90eXBlX19wcm90by5tb250aHMgICAgICAgPSAgICAgICAgbG9jYWxlTW9udGhzO1xuICAgIHByb3RvdHlwZV9fcHJvdG8uX21vbnRocyAgICAgID0gZGVmYXVsdExvY2FsZU1vbnRocztcbiAgICBwcm90b3R5cGVfX3Byb3RvLm1vbnRoc1Nob3J0ICA9ICAgICAgICBsb2NhbGVNb250aHNTaG9ydDtcbiAgICBwcm90b3R5cGVfX3Byb3RvLl9tb250aHNTaG9ydCA9IGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydDtcbiAgICBwcm90b3R5cGVfX3Byb3RvLm1vbnRoc1BhcnNlICA9ICAgICAgICBsb2NhbGVNb250aHNQYXJzZTtcblxuICAgIC8vIFdlZWtcbiAgICBwcm90b3R5cGVfX3Byb3RvLndlZWsgPSBsb2NhbGVXZWVrO1xuICAgIHByb3RvdHlwZV9fcHJvdG8uX3dlZWsgPSBkZWZhdWx0TG9jYWxlV2VlaztcbiAgICBwcm90b3R5cGVfX3Byb3RvLmZpcnN0RGF5T2ZZZWFyID0gbG9jYWxlRmlyc3REYXlPZlllYXI7XG4gICAgcHJvdG90eXBlX19wcm90by5maXJzdERheU9mV2VlayA9IGxvY2FsZUZpcnN0RGF5T2ZXZWVrO1xuXG4gICAgLy8gRGF5IG9mIFdlZWtcbiAgICBwcm90b3R5cGVfX3Byb3RvLndlZWtkYXlzICAgICAgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzO1xuICAgIHByb3RvdHlwZV9fcHJvdG8uX3dlZWtkYXlzICAgICAgPSBkZWZhdWx0TG9jYWxlV2Vla2RheXM7XG4gICAgcHJvdG90eXBlX19wcm90by53ZWVrZGF5c01pbiAgICA9ICAgICAgICBsb2NhbGVXZWVrZGF5c01pbjtcbiAgICBwcm90b3R5cGVfX3Byb3RvLl93ZWVrZGF5c01pbiAgID0gZGVmYXVsdExvY2FsZVdlZWtkYXlzTWluO1xuICAgIHByb3RvdHlwZV9fcHJvdG8ud2Vla2RheXNTaG9ydCAgPSAgICAgICAgbG9jYWxlV2Vla2RheXNTaG9ydDtcbiAgICBwcm90b3R5cGVfX3Byb3RvLl93ZWVrZGF5c1Nob3J0ID0gZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQ7XG4gICAgcHJvdG90eXBlX19wcm90by53ZWVrZGF5c1BhcnNlICA9ICAgICAgICBsb2NhbGVXZWVrZGF5c1BhcnNlO1xuXG4gICAgLy8gSG91cnNcbiAgICBwcm90b3R5cGVfX3Byb3RvLmlzUE0gPSBsb2NhbGVJc1BNO1xuICAgIHByb3RvdHlwZV9fcHJvdG8uX21lcmlkaWVtUGFyc2UgPSBkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZTtcbiAgICBwcm90b3R5cGVfX3Byb3RvLm1lcmlkaWVtID0gbG9jYWxlTWVyaWRpZW07XG5cbiAgICBmdW5jdGlvbiBsaXN0c19fZ2V0IChmb3JtYXQsIGluZGV4LCBmaWVsZCwgc2V0dGVyKSB7XG4gICAgICAgIHZhciBsb2NhbGUgPSBsb2NhbGVfbG9jYWxlc19fZ2V0TG9jYWxlKCk7XG4gICAgICAgIHZhciB1dGMgPSBjcmVhdGVfdXRjX19jcmVhdGVVVEMoKS5zZXQoc2V0dGVyLCBpbmRleCk7XG4gICAgICAgIHJldHVybiBsb2NhbGVbZmllbGRdKHV0YywgZm9ybWF0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0IChmb3JtYXQsIGluZGV4LCBmaWVsZCwgY291bnQsIHNldHRlcikge1xuICAgICAgICBpZiAodHlwZW9mIGZvcm1hdCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuXG4gICAgICAgIGlmIChpbmRleCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbGlzdHNfX2dldChmb3JtYXQsIGluZGV4LCBmaWVsZCwgc2V0dGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgb3V0ID0gW107XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBvdXRbaV0gPSBsaXN0c19fZ2V0KGZvcm1hdCwgaSwgZmllbGQsIHNldHRlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0c19fbGlzdE1vbnRocyAoZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdChmb3JtYXQsIGluZGV4LCAnbW9udGhzJywgMTIsICdtb250aCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RzX19saXN0TW9udGhzU2hvcnQgKGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3QoZm9ybWF0LCBpbmRleCwgJ21vbnRoc1Nob3J0JywgMTIsICdtb250aCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RzX19saXN0V2Vla2RheXMgKGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3QoZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzJywgNywgJ2RheScpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RzX19saXN0V2Vla2RheXNTaG9ydCAoZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdChmb3JtYXQsIGluZGV4LCAnd2Vla2RheXNTaG9ydCcsIDcsICdkYXknKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0c19fbGlzdFdlZWtkYXlzTWluIChmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0KGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5c01pbicsIDcsICdkYXknKTtcbiAgICB9XG5cbiAgICBsb2NhbGVfbG9jYWxlc19fZ2V0U2V0R2xvYmFsTG9jYWxlKCdlbicsIHtcbiAgICAgICAgb3JkaW5hbFBhcnNlOiAvXFxkezEsMn0odGh8c3R8bmR8cmQpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKHRvSW50KG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAndGgnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMSkgPyAnc3QnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMikgPyAnbmQnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMykgPyAncmQnIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFNpZGUgZWZmZWN0IGltcG9ydHNcbiAgICB1dGlsc19ob29rc19faG9va3MubGFuZyA9IGRlcHJlY2F0ZSgnbW9tZW50LmxhbmcgaXMgZGVwcmVjYXRlZC4gVXNlIG1vbWVudC5sb2NhbGUgaW5zdGVhZC4nLCBsb2NhbGVfbG9jYWxlc19fZ2V0U2V0R2xvYmFsTG9jYWxlKTtcbiAgICB1dGlsc19ob29rc19faG9va3MubGFuZ0RhdGEgPSBkZXByZWNhdGUoJ21vbWVudC5sYW5nRGF0YSBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZURhdGEgaW5zdGVhZC4nLCBsb2NhbGVfbG9jYWxlc19fZ2V0TG9jYWxlKTtcblxuICAgIHZhciBtYXRoQWJzID0gTWF0aC5hYnM7XG5cbiAgICBmdW5jdGlvbiBkdXJhdGlvbl9hYnNfX2FicyAoKSB7XG4gICAgICAgIHZhciBkYXRhICAgICAgICAgICA9IHRoaXMuX2RhdGE7XG5cbiAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzID0gbWF0aEFicyh0aGlzLl9taWxsaXNlY29uZHMpO1xuICAgICAgICB0aGlzLl9kYXlzICAgICAgICAgPSBtYXRoQWJzKHRoaXMuX2RheXMpO1xuICAgICAgICB0aGlzLl9tb250aHMgICAgICAgPSBtYXRoQWJzKHRoaXMuX21vbnRocyk7XG5cbiAgICAgICAgZGF0YS5taWxsaXNlY29uZHMgID0gbWF0aEFicyhkYXRhLm1pbGxpc2Vjb25kcyk7XG4gICAgICAgIGRhdGEuc2Vjb25kcyAgICAgICA9IG1hdGhBYnMoZGF0YS5zZWNvbmRzKTtcbiAgICAgICAgZGF0YS5taW51dGVzICAgICAgID0gbWF0aEFicyhkYXRhLm1pbnV0ZXMpO1xuICAgICAgICBkYXRhLmhvdXJzICAgICAgICAgPSBtYXRoQWJzKGRhdGEuaG91cnMpO1xuICAgICAgICBkYXRhLm1vbnRocyAgICAgICAgPSBtYXRoQWJzKGRhdGEubW9udGhzKTtcbiAgICAgICAgZGF0YS55ZWFycyAgICAgICAgID0gbWF0aEFicyhkYXRhLnllYXJzKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkdXJhdGlvbl9hZGRfc3VidHJhY3RfX2FkZFN1YnRyYWN0IChkdXJhdGlvbiwgaW5wdXQsIHZhbHVlLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlX19jcmVhdGVEdXJhdGlvbihpbnB1dCwgdmFsdWUpO1xuXG4gICAgICAgIGR1cmF0aW9uLl9taWxsaXNlY29uZHMgKz0gZGlyZWN0aW9uICogb3RoZXIuX21pbGxpc2Vjb25kcztcbiAgICAgICAgZHVyYXRpb24uX2RheXMgICAgICAgICArPSBkaXJlY3Rpb24gKiBvdGhlci5fZGF5cztcbiAgICAgICAgZHVyYXRpb24uX21vbnRocyAgICAgICArPSBkaXJlY3Rpb24gKiBvdGhlci5fbW9udGhzO1xuXG4gICAgICAgIHJldHVybiBkdXJhdGlvbi5fYnViYmxlKCk7XG4gICAgfVxuXG4gICAgLy8gc3VwcG9ydHMgb25seSAyLjAtc3R5bGUgYWRkKDEsICdzJykgb3IgYWRkKGR1cmF0aW9uKVxuICAgIGZ1bmN0aW9uIGR1cmF0aW9uX2FkZF9zdWJ0cmFjdF9fYWRkIChpbnB1dCwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGR1cmF0aW9uX2FkZF9zdWJ0cmFjdF9fYWRkU3VidHJhY3QodGhpcywgaW5wdXQsIHZhbHVlLCAxKTtcbiAgICB9XG5cbiAgICAvLyBzdXBwb3J0cyBvbmx5IDIuMC1zdHlsZSBzdWJ0cmFjdCgxLCAncycpIG9yIHN1YnRyYWN0KGR1cmF0aW9uKVxuICAgIGZ1bmN0aW9uIGR1cmF0aW9uX2FkZF9zdWJ0cmFjdF9fc3VidHJhY3QgKGlucHV0LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZHVyYXRpb25fYWRkX3N1YnRyYWN0X19hZGRTdWJ0cmFjdCh0aGlzLCBpbnB1dCwgdmFsdWUsIC0xKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhYnNDZWlsIChudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKG51bWJlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5jZWlsKG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBidWJibGUgKCkge1xuICAgICAgICB2YXIgbWlsbGlzZWNvbmRzID0gdGhpcy5fbWlsbGlzZWNvbmRzO1xuICAgICAgICB2YXIgZGF5cyAgICAgICAgID0gdGhpcy5fZGF5cztcbiAgICAgICAgdmFyIG1vbnRocyAgICAgICA9IHRoaXMuX21vbnRocztcbiAgICAgICAgdmFyIGRhdGEgICAgICAgICA9IHRoaXMuX2RhdGE7XG4gICAgICAgIHZhciBzZWNvbmRzLCBtaW51dGVzLCBob3VycywgeWVhcnMsIG1vbnRoc0Zyb21EYXlzO1xuXG4gICAgICAgIC8vIGlmIHdlIGhhdmUgYSBtaXggb2YgcG9zaXRpdmUgYW5kIG5lZ2F0aXZlIHZhbHVlcywgYnViYmxlIGRvd24gZmlyc3RcbiAgICAgICAgLy8gY2hlY2s6IGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8yMTY2XG4gICAgICAgIGlmICghKChtaWxsaXNlY29uZHMgPj0gMCAmJiBkYXlzID49IDAgJiYgbW9udGhzID49IDApIHx8XG4gICAgICAgICAgICAgICAgKG1pbGxpc2Vjb25kcyA8PSAwICYmIGRheXMgPD0gMCAmJiBtb250aHMgPD0gMCkpKSB7XG4gICAgICAgICAgICBtaWxsaXNlY29uZHMgKz0gYWJzQ2VpbChtb250aHNUb0RheXMobW9udGhzKSArIGRheXMpICogODY0ZTU7XG4gICAgICAgICAgICBkYXlzID0gMDtcbiAgICAgICAgICAgIG1vbnRocyA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGNvZGUgYnViYmxlcyB1cCB2YWx1ZXMsIHNlZSB0aGUgdGVzdHMgZm9yXG4gICAgICAgIC8vIGV4YW1wbGVzIG9mIHdoYXQgdGhhdCBtZWFucy5cbiAgICAgICAgZGF0YS5taWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZHMgJSAxMDAwO1xuXG4gICAgICAgIHNlY29uZHMgICAgICAgICAgID0gYWJzRmxvb3IobWlsbGlzZWNvbmRzIC8gMTAwMCk7XG4gICAgICAgIGRhdGEuc2Vjb25kcyAgICAgID0gc2Vjb25kcyAlIDYwO1xuXG4gICAgICAgIG1pbnV0ZXMgICAgICAgICAgID0gYWJzRmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICAgICAgZGF0YS5taW51dGVzICAgICAgPSBtaW51dGVzICUgNjA7XG5cbiAgICAgICAgaG91cnMgICAgICAgICAgICAgPSBhYnNGbG9vcihtaW51dGVzIC8gNjApO1xuICAgICAgICBkYXRhLmhvdXJzICAgICAgICA9IGhvdXJzICUgMjQ7XG5cbiAgICAgICAgZGF5cyArPSBhYnNGbG9vcihob3VycyAvIDI0KTtcblxuICAgICAgICAvLyBjb252ZXJ0IGRheXMgdG8gbW9udGhzXG4gICAgICAgIG1vbnRoc0Zyb21EYXlzID0gYWJzRmxvb3IoZGF5c1RvTW9udGhzKGRheXMpKTtcbiAgICAgICAgbW9udGhzICs9IG1vbnRoc0Zyb21EYXlzO1xuICAgICAgICBkYXlzIC09IGFic0NlaWwobW9udGhzVG9EYXlzKG1vbnRoc0Zyb21EYXlzKSk7XG5cbiAgICAgICAgLy8gMTIgbW9udGhzIC0+IDEgeWVhclxuICAgICAgICB5ZWFycyA9IGFic0Zsb29yKG1vbnRocyAvIDEyKTtcbiAgICAgICAgbW9udGhzICU9IDEyO1xuXG4gICAgICAgIGRhdGEuZGF5cyAgID0gZGF5cztcbiAgICAgICAgZGF0YS5tb250aHMgPSBtb250aHM7XG4gICAgICAgIGRhdGEueWVhcnMgID0geWVhcnM7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGF5c1RvTW9udGhzIChkYXlzKSB7XG4gICAgICAgIC8vIDQwMCB5ZWFycyBoYXZlIDE0NjA5NyBkYXlzICh0YWtpbmcgaW50byBhY2NvdW50IGxlYXAgeWVhciBydWxlcylcbiAgICAgICAgLy8gNDAwIHllYXJzIGhhdmUgMTIgbW9udGhzID09PSA0ODAwXG4gICAgICAgIHJldHVybiBkYXlzICogNDgwMCAvIDE0NjA5NztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb250aHNUb0RheXMgKG1vbnRocykge1xuICAgICAgICAvLyB0aGUgcmV2ZXJzZSBvZiBkYXlzVG9Nb250aHNcbiAgICAgICAgcmV0dXJuIG1vbnRocyAqIDE0NjA5NyAvIDQ4MDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXMgKHVuaXRzKSB7XG4gICAgICAgIHZhciBkYXlzO1xuICAgICAgICB2YXIgbW9udGhzO1xuICAgICAgICB2YXIgbWlsbGlzZWNvbmRzID0gdGhpcy5fbWlsbGlzZWNvbmRzO1xuXG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuXG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21vbnRoJyB8fCB1bml0cyA9PT0gJ3llYXInKSB7XG4gICAgICAgICAgICBkYXlzICAgPSB0aGlzLl9kYXlzICAgKyBtaWxsaXNlY29uZHMgLyA4NjRlNTtcbiAgICAgICAgICAgIG1vbnRocyA9IHRoaXMuX21vbnRocyArIGRheXNUb01vbnRocyhkYXlzKTtcbiAgICAgICAgICAgIHJldHVybiB1bml0cyA9PT0gJ21vbnRoJyA/IG1vbnRocyA6IG1vbnRocyAvIDEyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaGFuZGxlIG1pbGxpc2Vjb25kcyBzZXBhcmF0ZWx5IGJlY2F1c2Ugb2YgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgKGlzc3VlICMxODY3KVxuICAgICAgICAgICAgZGF5cyA9IHRoaXMuX2RheXMgKyBNYXRoLnJvdW5kKG1vbnRoc1RvRGF5cyh0aGlzLl9tb250aHMpKTtcbiAgICAgICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgICAgICBjYXNlICd3ZWVrJyAgIDogcmV0dXJuIGRheXMgLyA3ICAgICArIG1pbGxpc2Vjb25kcyAvIDYwNDhlNTtcbiAgICAgICAgICAgICAgICBjYXNlICdkYXknICAgIDogcmV0dXJuIGRheXMgICAgICAgICArIG1pbGxpc2Vjb25kcyAvIDg2NGU1O1xuICAgICAgICAgICAgICAgIGNhc2UgJ2hvdXInICAgOiByZXR1cm4gZGF5cyAqIDI0ICAgICsgbWlsbGlzZWNvbmRzIC8gMzZlNTtcbiAgICAgICAgICAgICAgICBjYXNlICdtaW51dGUnIDogcmV0dXJuIGRheXMgKiAxNDQwICArIG1pbGxpc2Vjb25kcyAvIDZlNDtcbiAgICAgICAgICAgICAgICBjYXNlICdzZWNvbmQnIDogcmV0dXJuIGRheXMgKiA4NjQwMCArIG1pbGxpc2Vjb25kcyAvIDEwMDA7XG4gICAgICAgICAgICAgICAgLy8gTWF0aC5mbG9vciBwcmV2ZW50cyBmbG9hdGluZyBwb2ludCBtYXRoIGVycm9ycyBoZXJlXG4gICAgICAgICAgICAgICAgY2FzZSAnbWlsbGlzZWNvbmQnOiByZXR1cm4gTWF0aC5mbG9vcihkYXlzICogODY0ZTUpICsgbWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcignVW5rbm93biB1bml0ICcgKyB1bml0cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUT0RPOiBVc2UgdGhpcy5hcygnbXMnKT9cbiAgICBmdW5jdGlvbiBkdXJhdGlvbl9hc19fdmFsdWVPZiAoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0aGlzLl9taWxsaXNlY29uZHMgK1xuICAgICAgICAgICAgdGhpcy5fZGF5cyAqIDg2NGU1ICtcbiAgICAgICAgICAgICh0aGlzLl9tb250aHMgJSAxMikgKiAyNTkyZTYgK1xuICAgICAgICAgICAgdG9JbnQodGhpcy5fbW9udGhzIC8gMTIpICogMzE1MzZlNlxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VBcyAoYWxpYXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFzKGFsaWFzKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgYXNNaWxsaXNlY29uZHMgPSBtYWtlQXMoJ21zJyk7XG4gICAgdmFyIGFzU2Vjb25kcyAgICAgID0gbWFrZUFzKCdzJyk7XG4gICAgdmFyIGFzTWludXRlcyAgICAgID0gbWFrZUFzKCdtJyk7XG4gICAgdmFyIGFzSG91cnMgICAgICAgID0gbWFrZUFzKCdoJyk7XG4gICAgdmFyIGFzRGF5cyAgICAgICAgID0gbWFrZUFzKCdkJyk7XG4gICAgdmFyIGFzV2Vla3MgICAgICAgID0gbWFrZUFzKCd3Jyk7XG4gICAgdmFyIGFzTW9udGhzICAgICAgID0gbWFrZUFzKCdNJyk7XG4gICAgdmFyIGFzWWVhcnMgICAgICAgID0gbWFrZUFzKCd5Jyk7XG5cbiAgICBmdW5jdGlvbiBkdXJhdGlvbl9nZXRfX2dldCAodW5pdHMpIHtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIHJldHVybiB0aGlzW3VuaXRzICsgJ3MnXSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VHZXR0ZXIobmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGFbbmFtZV07XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IG1ha2VHZXR0ZXIoJ21pbGxpc2Vjb25kcycpO1xuICAgIHZhciBzZWNvbmRzICAgICAgPSBtYWtlR2V0dGVyKCdzZWNvbmRzJyk7XG4gICAgdmFyIG1pbnV0ZXMgICAgICA9IG1ha2VHZXR0ZXIoJ21pbnV0ZXMnKTtcbiAgICB2YXIgaG91cnMgICAgICAgID0gbWFrZUdldHRlcignaG91cnMnKTtcbiAgICB2YXIgZGF5cyAgICAgICAgID0gbWFrZUdldHRlcignZGF5cycpO1xuICAgIHZhciBtb250aHMgICAgICAgPSBtYWtlR2V0dGVyKCdtb250aHMnKTtcbiAgICB2YXIgeWVhcnMgICAgICAgID0gbWFrZUdldHRlcigneWVhcnMnKTtcblxuICAgIGZ1bmN0aW9uIHdlZWtzICgpIHtcbiAgICAgICAgcmV0dXJuIGFic0Zsb29yKHRoaXMuZGF5cygpIC8gNyk7XG4gICAgfVxuXG4gICAgdmFyIHJvdW5kID0gTWF0aC5yb3VuZDtcbiAgICB2YXIgdGhyZXNob2xkcyA9IHtcbiAgICAgICAgczogNDUsICAvLyBzZWNvbmRzIHRvIG1pbnV0ZVxuICAgICAgICBtOiA0NSwgIC8vIG1pbnV0ZXMgdG8gaG91clxuICAgICAgICBoOiAyMiwgIC8vIGhvdXJzIHRvIGRheVxuICAgICAgICBkOiAyNiwgIC8vIGRheXMgdG8gbW9udGhcbiAgICAgICAgTTogMTEgICAvLyBtb250aHMgdG8geWVhclxuICAgIH07XG5cbiAgICAvLyBoZWxwZXIgZnVuY3Rpb24gZm9yIG1vbWVudC5mbi5mcm9tLCBtb21lbnQuZm4uZnJvbU5vdywgYW5kIG1vbWVudC5kdXJhdGlvbi5mbi5odW1hbml6ZVxuICAgIGZ1bmN0aW9uIHN1YnN0aXR1dGVUaW1lQWdvKHN0cmluZywgbnVtYmVyLCB3aXRob3V0U3VmZml4LCBpc0Z1dHVyZSwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUucmVsYXRpdmVUaW1lKG51bWJlciB8fCAxLCAhIXdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGR1cmF0aW9uX2h1bWFuaXplX19yZWxhdGl2ZVRpbWUgKHBvc05lZ0R1cmF0aW9uLCB3aXRob3V0U3VmZml4LCBsb2NhbGUpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gY3JlYXRlX19jcmVhdGVEdXJhdGlvbihwb3NOZWdEdXJhdGlvbikuYWJzKCk7XG4gICAgICAgIHZhciBzZWNvbmRzICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdzJykpO1xuICAgICAgICB2YXIgbWludXRlcyAgPSByb3VuZChkdXJhdGlvbi5hcygnbScpKTtcbiAgICAgICAgdmFyIGhvdXJzICAgID0gcm91bmQoZHVyYXRpb24uYXMoJ2gnKSk7XG4gICAgICAgIHZhciBkYXlzICAgICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdkJykpO1xuICAgICAgICB2YXIgbW9udGhzICAgPSByb3VuZChkdXJhdGlvbi5hcygnTScpKTtcbiAgICAgICAgdmFyIHllYXJzICAgID0gcm91bmQoZHVyYXRpb24uYXMoJ3knKSk7XG5cbiAgICAgICAgdmFyIGEgPSBzZWNvbmRzIDwgdGhyZXNob2xkcy5zICYmIFsncycsIHNlY29uZHNdICB8fFxuICAgICAgICAgICAgICAgIG1pbnV0ZXMgPT09IDEgICAgICAgICAgJiYgWydtJ10gICAgICAgICAgIHx8XG4gICAgICAgICAgICAgICAgbWludXRlcyA8IHRocmVzaG9sZHMubSAmJiBbJ21tJywgbWludXRlc10gfHxcbiAgICAgICAgICAgICAgICBob3VycyAgID09PSAxICAgICAgICAgICYmIFsnaCddICAgICAgICAgICB8fFxuICAgICAgICAgICAgICAgIGhvdXJzICAgPCB0aHJlc2hvbGRzLmggJiYgWydoaCcsIGhvdXJzXSAgIHx8XG4gICAgICAgICAgICAgICAgZGF5cyAgICA9PT0gMSAgICAgICAgICAmJiBbJ2QnXSAgICAgICAgICAgfHxcbiAgICAgICAgICAgICAgICBkYXlzICAgIDwgdGhyZXNob2xkcy5kICYmIFsnZGQnLCBkYXlzXSAgICB8fFxuICAgICAgICAgICAgICAgIG1vbnRocyAgPT09IDEgICAgICAgICAgJiYgWydNJ10gICAgICAgICAgIHx8XG4gICAgICAgICAgICAgICAgbW9udGhzICA8IHRocmVzaG9sZHMuTSAmJiBbJ01NJywgbW9udGhzXSAgfHxcbiAgICAgICAgICAgICAgICB5ZWFycyAgID09PSAxICAgICAgICAgICYmIFsneSddICAgICAgICAgICB8fCBbJ3l5JywgeWVhcnNdO1xuXG4gICAgICAgIGFbMl0gPSB3aXRob3V0U3VmZml4O1xuICAgICAgICBhWzNdID0gK3Bvc05lZ0R1cmF0aW9uID4gMDtcbiAgICAgICAgYVs0XSA9IGxvY2FsZTtcbiAgICAgICAgcmV0dXJuIHN1YnN0aXR1dGVUaW1lQWdvLmFwcGx5KG51bGwsIGEpO1xuICAgIH1cblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHlvdSB0byBzZXQgYSB0aHJlc2hvbGQgZm9yIHJlbGF0aXZlIHRpbWUgc3RyaW5nc1xuICAgIGZ1bmN0aW9uIGR1cmF0aW9uX2h1bWFuaXplX19nZXRTZXRSZWxhdGl2ZVRpbWVUaHJlc2hvbGQgKHRocmVzaG9sZCwgbGltaXQpIHtcbiAgICAgICAgaWYgKHRocmVzaG9sZHNbdGhyZXNob2xkXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxpbWl0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aHJlc2hvbGRzW3RocmVzaG9sZF07XG4gICAgICAgIH1cbiAgICAgICAgdGhyZXNob2xkc1t0aHJlc2hvbGRdID0gbGltaXQ7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGh1bWFuaXplICh3aXRoU3VmZml4KSB7XG4gICAgICAgIHZhciBsb2NhbGUgPSB0aGlzLmxvY2FsZURhdGEoKTtcbiAgICAgICAgdmFyIG91dHB1dCA9IGR1cmF0aW9uX2h1bWFuaXplX19yZWxhdGl2ZVRpbWUodGhpcywgIXdpdGhTdWZmaXgsIGxvY2FsZSk7XG5cbiAgICAgICAgaWYgKHdpdGhTdWZmaXgpIHtcbiAgICAgICAgICAgIG91dHB1dCA9IGxvY2FsZS5wYXN0RnV0dXJlKCt0aGlzLCBvdXRwdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxvY2FsZS5wb3N0Zm9ybWF0KG91dHB1dCk7XG4gICAgfVxuXG4gICAgdmFyIGlzb19zdHJpbmdfX2FicyA9IE1hdGguYWJzO1xuXG4gICAgZnVuY3Rpb24gaXNvX3N0cmluZ19fdG9JU09TdHJpbmcoKSB7XG4gICAgICAgIC8vIGZvciBJU08gc3RyaW5ncyB3ZSBkbyBub3QgdXNlIHRoZSBub3JtYWwgYnViYmxpbmcgcnVsZXM6XG4gICAgICAgIC8vICAqIG1pbGxpc2Vjb25kcyBidWJibGUgdXAgdW50aWwgdGhleSBiZWNvbWUgaG91cnNcbiAgICAgICAgLy8gICogZGF5cyBkbyBub3QgYnViYmxlIGF0IGFsbFxuICAgICAgICAvLyAgKiBtb250aHMgYnViYmxlIHVwIHVudGlsIHRoZXkgYmVjb21lIHllYXJzXG4gICAgICAgIC8vIFRoaXMgaXMgYmVjYXVzZSB0aGVyZSBpcyBubyBjb250ZXh0LWZyZWUgY29udmVyc2lvbiBiZXR3ZWVuIGhvdXJzIGFuZCBkYXlzXG4gICAgICAgIC8vICh0aGluayBvZiBjbG9jayBjaGFuZ2VzKVxuICAgICAgICAvLyBhbmQgYWxzbyBub3QgYmV0d2VlbiBkYXlzIGFuZCBtb250aHMgKDI4LTMxIGRheXMgcGVyIG1vbnRoKVxuICAgICAgICB2YXIgc2Vjb25kcyA9IGlzb19zdHJpbmdfX2Ficyh0aGlzLl9taWxsaXNlY29uZHMpIC8gMTAwMDtcbiAgICAgICAgdmFyIGRheXMgICAgICAgICA9IGlzb19zdHJpbmdfX2Ficyh0aGlzLl9kYXlzKTtcbiAgICAgICAgdmFyIG1vbnRocyAgICAgICA9IGlzb19zdHJpbmdfX2Ficyh0aGlzLl9tb250aHMpO1xuICAgICAgICB2YXIgbWludXRlcywgaG91cnMsIHllYXJzO1xuXG4gICAgICAgIC8vIDM2MDAgc2Vjb25kcyAtPiA2MCBtaW51dGVzIC0+IDEgaG91clxuICAgICAgICBtaW51dGVzICAgICAgICAgICA9IGFic0Zsb29yKHNlY29uZHMgLyA2MCk7XG4gICAgICAgIGhvdXJzICAgICAgICAgICAgID0gYWJzRmxvb3IobWludXRlcyAvIDYwKTtcbiAgICAgICAgc2Vjb25kcyAlPSA2MDtcbiAgICAgICAgbWludXRlcyAlPSA2MDtcblxuICAgICAgICAvLyAxMiBtb250aHMgLT4gMSB5ZWFyXG4gICAgICAgIHllYXJzICA9IGFic0Zsb29yKG1vbnRocyAvIDEyKTtcbiAgICAgICAgbW9udGhzICU9IDEyO1xuXG5cbiAgICAgICAgLy8gaW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2RvcmRpbGxlL21vbWVudC1pc29kdXJhdGlvbi9ibG9iL21hc3Rlci9tb21lbnQuaXNvZHVyYXRpb24uanNcbiAgICAgICAgdmFyIFkgPSB5ZWFycztcbiAgICAgICAgdmFyIE0gPSBtb250aHM7XG4gICAgICAgIHZhciBEID0gZGF5cztcbiAgICAgICAgdmFyIGggPSBob3VycztcbiAgICAgICAgdmFyIG0gPSBtaW51dGVzO1xuICAgICAgICB2YXIgcyA9IHNlY29uZHM7XG4gICAgICAgIHZhciB0b3RhbCA9IHRoaXMuYXNTZWNvbmRzKCk7XG5cbiAgICAgICAgaWYgKCF0b3RhbCkge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyB0aGUgc2FtZSBhcyBDIydzIChOb2RhKSBhbmQgcHl0aG9uIChpc29kYXRlKS4uLlxuICAgICAgICAgICAgLy8gYnV0IG5vdCBvdGhlciBKUyAoZ29vZy5kYXRlKVxuICAgICAgICAgICAgcmV0dXJuICdQMEQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICh0b3RhbCA8IDAgPyAnLScgOiAnJykgK1xuICAgICAgICAgICAgJ1AnICtcbiAgICAgICAgICAgIChZID8gWSArICdZJyA6ICcnKSArXG4gICAgICAgICAgICAoTSA/IE0gKyAnTScgOiAnJykgK1xuICAgICAgICAgICAgKEQgPyBEICsgJ0QnIDogJycpICtcbiAgICAgICAgICAgICgoaCB8fCBtIHx8IHMpID8gJ1QnIDogJycpICtcbiAgICAgICAgICAgIChoID8gaCArICdIJyA6ICcnKSArXG4gICAgICAgICAgICAobSA/IG0gKyAnTScgOiAnJykgK1xuICAgICAgICAgICAgKHMgPyBzICsgJ1MnIDogJycpO1xuICAgIH1cblxuICAgIHZhciBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvID0gRHVyYXRpb24ucHJvdG90eXBlO1xuXG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5hYnMgICAgICAgICAgICA9IGR1cmF0aW9uX2Fic19fYWJzO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8uYWRkICAgICAgICAgICAgPSBkdXJhdGlvbl9hZGRfc3VidHJhY3RfX2FkZDtcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLnN1YnRyYWN0ICAgICAgID0gZHVyYXRpb25fYWRkX3N1YnRyYWN0X19zdWJ0cmFjdDtcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLmFzICAgICAgICAgICAgID0gYXM7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5hc01pbGxpc2Vjb25kcyA9IGFzTWlsbGlzZWNvbmRzO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8uYXNTZWNvbmRzICAgICAgPSBhc1NlY29uZHM7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5hc01pbnV0ZXMgICAgICA9IGFzTWludXRlcztcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLmFzSG91cnMgICAgICAgID0gYXNIb3VycztcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLmFzRGF5cyAgICAgICAgID0gYXNEYXlzO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8uYXNXZWVrcyAgICAgICAgPSBhc1dlZWtzO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8uYXNNb250aHMgICAgICAgPSBhc01vbnRocztcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLmFzWWVhcnMgICAgICAgID0gYXNZZWFycztcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLnZhbHVlT2YgICAgICAgID0gZHVyYXRpb25fYXNfX3ZhbHVlT2Y7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5fYnViYmxlICAgICAgICA9IGJ1YmJsZTtcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLmdldCAgICAgICAgICAgID0gZHVyYXRpb25fZ2V0X19nZXQ7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5taWxsaXNlY29uZHMgICA9IG1pbGxpc2Vjb25kcztcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLnNlY29uZHMgICAgICAgID0gc2Vjb25kcztcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLm1pbnV0ZXMgICAgICAgID0gbWludXRlcztcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLmhvdXJzICAgICAgICAgID0gaG91cnM7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5kYXlzICAgICAgICAgICA9IGRheXM7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by53ZWVrcyAgICAgICAgICA9IHdlZWtzO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8ubW9udGhzICAgICAgICAgPSBtb250aHM7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by55ZWFycyAgICAgICAgICA9IHllYXJzO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8uaHVtYW5pemUgICAgICAgPSBodW1hbml6ZTtcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLnRvSVNPU3RyaW5nICAgID0gaXNvX3N0cmluZ19fdG9JU09TdHJpbmc7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by50b1N0cmluZyAgICAgICA9IGlzb19zdHJpbmdfX3RvSVNPU3RyaW5nO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8udG9KU09OICAgICAgICAgPSBpc29fc3RyaW5nX190b0lTT1N0cmluZztcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLmxvY2FsZSAgICAgICAgID0gbG9jYWxlO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8ubG9jYWxlRGF0YSAgICAgPSBsb2NhbGVEYXRhO1xuXG4gICAgLy8gRGVwcmVjYXRpb25zXG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by50b0lzb1N0cmluZyA9IGRlcHJlY2F0ZSgndG9Jc29TdHJpbmcoKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIHRvSVNPU3RyaW5nKCkgaW5zdGVhZCAobm90aWNlIHRoZSBjYXBpdGFscyknLCBpc29fc3RyaW5nX190b0lTT1N0cmluZyk7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5sYW5nID0gbGFuZztcblxuICAgIC8vIFNpZGUgZWZmZWN0IGltcG9ydHNcblxuICAgIGFkZEZvcm1hdFRva2VuKCdYJywgMCwgMCwgJ3VuaXgnKTtcbiAgICBhZGRGb3JtYXRUb2tlbigneCcsIDAsIDAsICd2YWx1ZU9mJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCd4JywgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1gnLCBtYXRjaFRpbWVzdGFtcCk7XG4gICAgYWRkUGFyc2VUb2tlbignWCcsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShwYXJzZUZsb2F0KGlucHV0LCAxMCkgKiAxMDAwKTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCd4JywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKHRvSW50KGlucHV0KSk7XG4gICAgfSk7XG5cbiAgICAvLyBTaWRlIGVmZmVjdCBpbXBvcnRzXG5cblxuICAgIHV0aWxzX2hvb2tzX19ob29rcy52ZXJzaW9uID0gJzIuMTAuNic7XG5cbiAgICBzZXRIb29rQ2FsbGJhY2sobG9jYWxfX2NyZWF0ZUxvY2FsKTtcblxuICAgIHV0aWxzX2hvb2tzX19ob29rcy5mbiAgICAgICAgICAgICAgICAgICAgPSBtb21lbnRQcm90b3R5cGU7XG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLm1pbiAgICAgICAgICAgICAgICAgICA9IG1pbjtcbiAgICB1dGlsc19ob29rc19faG9va3MubWF4ICAgICAgICAgICAgICAgICAgID0gbWF4O1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy51dGMgICAgICAgICAgICAgICAgICAgPSBjcmVhdGVfdXRjX19jcmVhdGVVVEM7XG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLnVuaXggICAgICAgICAgICAgICAgICA9IG1vbWVudF9fY3JlYXRlVW5peDtcbiAgICB1dGlsc19ob29rc19faG9va3MubW9udGhzICAgICAgICAgICAgICAgID0gbGlzdHNfX2xpc3RNb250aHM7XG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLmlzRGF0ZSAgICAgICAgICAgICAgICA9IGlzRGF0ZTtcbiAgICB1dGlsc19ob29rc19faG9va3MubG9jYWxlICAgICAgICAgICAgICAgID0gbG9jYWxlX2xvY2FsZXNfX2dldFNldEdsb2JhbExvY2FsZTtcbiAgICB1dGlsc19ob29rc19faG9va3MuaW52YWxpZCAgICAgICAgICAgICAgID0gdmFsaWRfX2NyZWF0ZUludmFsaWQ7XG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLmR1cmF0aW9uICAgICAgICAgICAgICA9IGNyZWF0ZV9fY3JlYXRlRHVyYXRpb247XG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLmlzTW9tZW50ICAgICAgICAgICAgICA9IGlzTW9tZW50O1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy53ZWVrZGF5cyAgICAgICAgICAgICAgPSBsaXN0c19fbGlzdFdlZWtkYXlzO1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy5wYXJzZVpvbmUgICAgICAgICAgICAgPSBtb21lbnRfX2NyZWF0ZUluWm9uZTtcbiAgICB1dGlsc19ob29rc19faG9va3MubG9jYWxlRGF0YSAgICAgICAgICAgID0gbG9jYWxlX2xvY2FsZXNfX2dldExvY2FsZTtcbiAgICB1dGlsc19ob29rc19faG9va3MuaXNEdXJhdGlvbiAgICAgICAgICAgID0gaXNEdXJhdGlvbjtcbiAgICB1dGlsc19ob29rc19faG9va3MubW9udGhzU2hvcnQgICAgICAgICAgID0gbGlzdHNfX2xpc3RNb250aHNTaG9ydDtcbiAgICB1dGlsc19ob29rc19faG9va3Mud2Vla2RheXNNaW4gICAgICAgICAgID0gbGlzdHNfX2xpc3RXZWVrZGF5c01pbjtcbiAgICB1dGlsc19ob29rc19faG9va3MuZGVmaW5lTG9jYWxlICAgICAgICAgID0gZGVmaW5lTG9jYWxlO1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy53ZWVrZGF5c1Nob3J0ICAgICAgICAgPSBsaXN0c19fbGlzdFdlZWtkYXlzU2hvcnQ7XG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLm5vcm1hbGl6ZVVuaXRzICAgICAgICA9IG5vcm1hbGl6ZVVuaXRzO1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy5yZWxhdGl2ZVRpbWVUaHJlc2hvbGQgPSBkdXJhdGlvbl9odW1hbml6ZV9fZ2V0U2V0UmVsYXRpdmVUaW1lVGhyZXNob2xkO1xuXG4gICAgdmFyIF9tb21lbnQgPSB1dGlsc19ob29rc19faG9va3M7XG5cbiAgICByZXR1cm4gX21vbWVudDtcblxufSkpOyIsIi8qKlxuICogQG92ZXJ2aWV3IFV0aWxpdHkgY2xhc3MgZm9yIGVuY29kaW5nIGFuZCBkZWNvZGluZyBzaW11bGF0ZWQgcGFja2V0cy5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBOZXRTaW1VdGlscyA9IHJlcXVpcmUoJy4vTmV0U2ltVXRpbHMnKTtcbnZhciBEYXRhQ29udmVydGVycyA9IHJlcXVpcmUoJy4vRGF0YUNvbnZlcnRlcnMnKTtcbnZhciBOZXRTaW1HbG9iYWxzID0gcmVxdWlyZSgnLi9OZXRTaW1HbG9iYWxzJyk7XG5cbi8qKlxuICogV3JhcHMgYmluYXJ5IHBhY2tldCBjb250ZW50IHdpdGggdGhlIGZvcm1hdCBpbmZvcm1hdGlvbiByZXF1aXJlZCB0b1xuICogaW50ZXJwcmV0IGl0LlxuICogQHBhcmFtIHtQYWNrZXQuSGVhZGVyVHlwZVtdfSBmb3JtYXRTcGVjXG4gKiBAcGFyYW0ge3N0cmluZ30gYmluYXJ5XG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIFBhY2tldCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZvcm1hdFNwZWMsIGJpbmFyeSkge1xuICB2YXIgbGV2ZWwgPSBOZXRTaW1HbG9iYWxzLmdldExldmVsQ29uZmlnKCk7XG5cbiAgLyoqIEB0eXBlIHtQYWNrZXQuRW5jb2Rlcn0gKi9cbiAgdGhpcy5lbmNvZGVyID0gbmV3IFBhY2tldC5FbmNvZGVyKGxldmVsLmFkZHJlc3NGb3JtYXQsXG4gICAgICBsZXZlbC5wYWNrZXRDb3VudEJpdFdpZHRoLCBmb3JtYXRTcGVjKTtcblxuICAvKiogQHR5cGUge3N0cmluZ30gb2YgYmluYXJ5IGNvbnRlbnQgKi9cbiAgdGhpcy5iaW5hcnkgPSBiaW5hcnk7XG59O1xuXG4vKipcbiAqIFBvc3NpYmxlIHBhY2tldCBoZWFkZXIgZmllbGRzLiAgVmFsdWVzIHRvIHRoaXMgZW51bSBiZWNvbWUga2V5c1xuICogdGhhdCBjYW4gYmUgdXNlZCB3aGVuIGRlZmluaW5nIGEgbGV2ZWwgY29uZmlndXJhdGlvbi4gIFRoZXkgYWxzbyBjb3JyZXNwb25kXG4gKiB0byBjbGFzcyBuYW1lcyB0aGF0IGdldCBhcHBsaWVkIHRvIGZpZWxkcyByZXByZXNlbnRpbmcgZGF0YSBpbiB0aGF0IGNvbHVtbi5cbiAqIEBlbnVtIHtzdHJpbmd9XG4gKiBAcmVhZG9ubHlcbiAqL1xuUGFja2V0LkhlYWRlclR5cGUgPSB7XG4gIFRPX0FERFJFU1M6ICd0b0FkZHJlc3MnLFxuICBGUk9NX0FERFJFU1M6ICdmcm9tQWRkcmVzcycsXG4gIFBBQ0tFVF9JTkRFWDogJ3BhY2tldEluZGV4JyxcbiAgUEFDS0VUX0NPVU5UOiAncGFja2V0Q291bnQnXG59O1xuXG4vKipcbiAqIFdoZXRoZXIgdGhlIGdpdmVuIGhlYWRlciBmaWVsZCB0eXBlIHdpbGwgdXNlIHRoZSBhZGRyZXNzIGZvcm1hdC5cbiAqIEBwYXJhbSB7UGFja2V0LkhlYWRlclR5cGV9IGhlYWRlclR5cGVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5QYWNrZXQuaXNBZGRyZXNzRmllbGQgPSBmdW5jdGlvbiAoaGVhZGVyVHlwZSkge1xuICByZXR1cm4gaGVhZGVyVHlwZSA9PT0gUGFja2V0LkhlYWRlclR5cGUuVE9fQUREUkVTUyB8fFxuICAgICAgaGVhZGVyVHlwZSA9PT0gUGFja2V0LkhlYWRlclR5cGUuRlJPTV9BRERSRVNTO1xufTtcblxuLyoqXG4gKiBXaGV0aGVyIHRoZSBnaXZlbiBoZWFkZXIgZmllbGQgd2lsbCB1c2UgdGhlIHBhY2tldENvdW50IGJpdCB3aWR0aC5cbiAqIEBwYXJhbSB7UGFja2V0LkhlYWRlclR5cGV9IGhlYWRlclR5cGVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5QYWNrZXQuaXNQYWNrZXRGaWVsZCA9IGZ1bmN0aW9uIChoZWFkZXJUeXBlKSB7XG4gIHJldHVybiBoZWFkZXJUeXBlID09PSBQYWNrZXQuSGVhZGVyVHlwZS5QQUNLRVRfSU5ERVggfHxcbiAgICAgIGhlYWRlclR5cGUgPT09IFBhY2tldC5IZWFkZXJUeXBlLlBBQ0tFVF9DT1VOVDtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtQYWNrZXQuSGVhZGVyVHlwZX0gaGVhZGVyVHlwZVxuICogQHJldHVybnMge3N0cmluZ30gb2YgYmluYXJ5IGNvbnRlbnRcbiAqL1xuUGFja2V0LnByb3RvdHlwZS5nZXRIZWFkZXJBc0JpbmFyeSA9IGZ1bmN0aW9uIChoZWFkZXJUeXBlKSB7XG4gIHJldHVybiB0aGlzLmVuY29kZXIuZ2V0SGVhZGVyKGhlYWRlclR5cGUsIHRoaXMuYmluYXJ5KTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtQYWNrZXQuSGVhZGVyVHlwZX0gaGVhZGVyVHlwZVxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuUGFja2V0LnByb3RvdHlwZS5nZXRIZWFkZXJBc0ludCA9IGZ1bmN0aW9uIChoZWFkZXJUeXBlKSB7XG4gIHJldHVybiB0aGlzLmVuY29kZXIuZ2V0SGVhZGVyQXNJbnQoaGVhZGVyVHlwZSwgdGhpcy5iaW5hcnkpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1BhY2tldC5IZWFkZXJUeXBlfSBoZWFkZXJUeXBlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5QYWNrZXQucHJvdG90eXBlLmdldEhlYWRlckFzQWRkcmVzc1N0cmluZyA9IGZ1bmN0aW9uIChoZWFkZXJUeXBlKSB7XG4gIHJldHVybiB0aGlzLmVuY29kZXIuZ2V0SGVhZGVyQXNBZGRyZXNzU3RyaW5nKGhlYWRlclR5cGUsIHRoaXMuYmluYXJ5KTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge3N0cmluZ30gYmluYXJ5IGNvbnRlbnRcbiAqL1xuUGFja2V0LnByb3RvdHlwZS5nZXRCb2R5QXNCaW5hcnkgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmVuY29kZXIuZ2V0Qm9keSh0aGlzLmJpbmFyeSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRzUGVyQ2hhclxuICogQHJldHVybnMge3N0cmluZ30gYXNjaWkgY29udGVudFxuICovXG5QYWNrZXQucHJvdG90eXBlLmdldEJvZHlBc0FzY2lpID0gZnVuY3Rpb24gKGJpdHNQZXJDaGFyKSB7XG4gIHJldHVybiB0aGlzLmVuY29kZXIuZ2V0Qm9keUFzQXNjaWkodGhpcy5iaW5hcnksIGJpdHNQZXJDaGFyKTtcbn07XG5cbi8qKlxuICogR2l2ZW4gYSBwYXJ0aWN1bGFyIHBhY2tldCBmb3JtYXQsIGNhbiBjb252ZXJ0IGEgc2V0IG9mIGZpZWxkcyBkb3duXG4gKiBpbnRvIGEgYmluYXJ5IHN0cmluZyBtYXRjaGluZyB0aGUgc3BlY2lmaWNhdGlvbiwgb3IgZXh0cmFjdCBmaWVsZHNcbiAqIG9uIGRlbWFuZCBmcm9tIGEgYmluYXJ5IHN0cmluZy5cbiAqIEBwYXJhbSB7QWRkcmVzc0hlYWRlckZvcm1hdH0gYWRkcmVzc0Zvcm1hdFxuICogQHBhcmFtIHtudW1iZXJ9IHBhY2tldENvdW50Qml0V2lkdGhcbiAqIEBwYXJhbSB7UGFja2V0LkhlYWRlclR5cGVbXX0gaGVhZGVyU3BlYyAtIFNwZWNpZmljYXRpb24gb2YgcGFja2V0IGZvcm1hdCwgYW5cbiAqICAgICAgICBvcmRlcmVkIHNldCBvZiBvYmplY3RzIGluIHRoZSBmb3JtIHtrZXk6c3RyaW5nLCBiaXRzOm51bWJlcn0gd2hlcmVcbiAqICAgICAgICBrZXkgaXMgdGhlIGZpZWxkIG5hbWUgeW91J2xsIHVzZSB0byByZXRyaWV2ZSB0aGUgaW5mb3JtYXRpb24sIGFuZFxuICogICAgICAgIGJpdHMgaXMgdGhlIGxlbmd0aCBvZiB0aGUgZmllbGQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuUGFja2V0LkVuY29kZXIgPSBmdW5jdGlvbiAoYWRkcmVzc0Zvcm1hdCwgcGFja2V0Q291bnRCaXRXaWR0aCwgaGVhZGVyU3BlYykge1xuICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgdGhpcy5hZGRyZXNzRm9ybWF0XyA9IGFkZHJlc3NGb3JtYXQ7XG5cbiAgdGhpcy5hZGRyZXNzQml0V2lkdGhfID0gdGhpcy5jYWxjdWxhdGVCaXRXaWR0aCh0aGlzLmFkZHJlc3NGb3JtYXRfKTtcblxuICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgdGhpcy5wYWNrZXRDb3VudEJpdFdpZHRoXyA9IHBhY2tldENvdW50Qml0V2lkdGg7XG5cbiAgLyoqIEB0eXBlIHtQYWNrZXQuSGVhZGVyVHlwZVtdfSAqL1xuICB0aGlzLmhlYWRlclNwZWNfID0gaGVhZGVyU3BlYztcblxuICB0aGlzLnZhbGlkYXRlU3BlYygpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0FkZHJlc3NIZWFkZXJGb3JtYXR9IGFkZHJlc3NGb3JtYXRcbiAqIEBwcml2YXRlXG4gKi9cblBhY2tldC5FbmNvZGVyLnByb3RvdHlwZS5jYWxjdWxhdGVCaXRXaWR0aCA9IGZ1bmN0aW9uIChhZGRyZXNzRm9ybWF0KSB7XG4gIHJldHVybiBhZGRyZXNzRm9ybWF0LnNwbGl0KC9cXEQrLykucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBjdXIpIHtcbiAgICByZXR1cm4gcHJldiArIChwYXJzZUludChjdXIsIDEwKSB8fCAwKTtcbiAgfSwgMCk7XG59O1xuXG4vKipcbiAqIFZlcmlmeSB0aGF0IHRoZSBjb25maWd1cmVkIGZvcm1hdCBzcGVjaWZpY2F0aW9uIGRlc2NyaWJlcyBhIHZhbGlkIGZvcm1hdCB0aGF0XG4gKiBjYW4gYmUgdXNlZCBieSB0aGUgUGFja2V0LkVuY29kZXIgb2JqZWN0LlxuICovXG5QYWNrZXQuRW5jb2Rlci5wcm90b3R5cGUudmFsaWRhdGVTcGVjID0gZnVuY3Rpb24gKCkge1xuICB2YXIga2V5Q2FjaGUgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaGVhZGVyU3BlY18ubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXNBZGRyZXNzRmllbGQgPSBQYWNrZXQuaXNBZGRyZXNzRmllbGQodGhpcy5oZWFkZXJTcGVjX1tpXSk7XG4gICAgdmFyIGlzUGFja2V0RmllbGQgPSBQYWNrZXQuaXNQYWNrZXRGaWVsZCh0aGlzLmhlYWRlclNwZWNfW2ldKTtcblxuICAgIGlmIChpc0FkZHJlc3NGaWVsZCAmJiB0aGlzLmFkZHJlc3NCaXRXaWR0aF8gPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcGFja2V0IGZvcm1hdDogSW5jbHVkZXMgYW4gYWRkcmVzcyBmaWVsZCBidXQgXCIgK1xuICAgICAgICBcIiBhZGRyZXNzIGZvcm1hdCBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICBpZiAoaXNQYWNrZXRGaWVsZCAmJiB0aGlzLnBhY2tldENvdW50Qml0V2lkdGhfID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHBhY2tldCBmb3JtYXQ6IEluY2x1ZGVzIGEgcGFja2V0IGNvdW50IGZpZWxkIFwiICtcbiAgICAgICAgICBcIiBidXQgcGFja2V0IGZpZWxkIGJpdCB3aWR0aCBpcyB6ZXJvXCIpO1xuICAgIH1cblxuICAgIGlmICghaXNBZGRyZXNzRmllbGQgJiYgIWlzUGFja2V0RmllbGQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcGFja2V0IGZvcm1hdDogVW5yZWNvZ25pemVkIHBhY2tldCBoZWFkZXIgZmllbGQgXCIgK1xuICAgICAgICAgIHRoaXMuaGVhZGVyU3BlY19baV0pO1xuICAgIH1cblxuICAgIGlmIChrZXlDYWNoZS5oYXNPd25Qcm9wZXJ0eSh0aGlzLmhlYWRlclNwZWNfW2ldKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBwYWNrZXQgZm9ybWF0OiBGaWVsZCBrZXlzIG11c3QgYmUgdW5pcXVlLlwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAga2V5Q2FjaGVbdGhpcy5oZWFkZXJTcGVjX1tpXV0gPSAndXNlZCc7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFJldHJpZXZlIHJlcXVlc3RlZCBoZWFkZXIgZmllbGQgYnkga2V5IGZyb20gdGhlIHByb3ZpZGVkIGJpbmFyeSBibG9iLlxuICpcbiAqIEBwYXJhbSB7UGFja2V0LkhlYWRlclR5cGV9IGtleSAtIHdoaWNoIGhlYWRlciB0byByZXRyaWV2ZVxuICogQHBhcmFtIHtzdHJpbmd9IGJpbmFyeSBmb3IgZW50aXJlIHBhY2tldFxuICogQHJldHVybnMge3N0cmluZ30gYmluYXJ5IHN0cmluZyB2YWx1ZSBmb3IgaGVhZGVyIGZpZWxkXG4gKiBAdGhyb3dzIHdoZW4gcmVxdWVzdGVkIGtleSBpcyBub3QgaW4gdGhlIGNvbmZpZ3VyZWQgcGFja2V0IHNwZWNcbiAqL1xuUGFja2V0LkVuY29kZXIucHJvdG90eXBlLmdldEhlYWRlciA9IGZ1bmN0aW9uIChrZXksIGJpbmFyeSkge1xuICB2YXIgcnVsZUluZGV4ID0gMCwgYmluYXJ5SW5kZXggPSAwO1xuXG4gIC8vIFN0cmlwIHdoaXRlc3BhY2Ugc28gd2UgZG9uJ3Qgd29ycnkgYWJvdXQgYmVpbmcgcGFzc2VkIGZvcm1hdHRlZCBiaW5hcnlcbiAgYmluYXJ5ID0gRGF0YUNvbnZlcnRlcnMubWluaWZ5QmluYXJ5KGJpbmFyeSk7XG5cbiAgd2hpbGUgKHRoaXMuaGVhZGVyU3BlY19bcnVsZUluZGV4XSAhPT0ga2V5KSB7XG4gICAgYmluYXJ5SW5kZXggKz0gdGhpcy5nZXRGaWVsZEJpdFdpZHRoKHRoaXMuaGVhZGVyU3BlY19bcnVsZUluZGV4XSk7XG4gICAgcnVsZUluZGV4Kys7XG5cbiAgICBpZiAocnVsZUluZGV4ID49IHRoaXMuaGVhZGVyU3BlY18ubGVuZ3RoKSB7XG4gICAgICAvLyBEaWRuJ3QgZmluZCBrZXlcbiAgICAgIHRocm93IG5ldyBFcnJvcignS2V5IFwiJyArIGtleSArICdcIiBub3QgZm91bmQgaW4gcGFja2V0IHNwZWMuJyk7XG4gICAgfVxuICB9XG5cbiAgLy8gUmVhZCB2YWx1ZVxuICB2YXIgYml0V2lkdGggPSB0aGlzLmdldEZpZWxkQml0V2lkdGgodGhpcy5oZWFkZXJTcGVjX1tydWxlSW5kZXhdKTtcbiAgdmFyIGJpdHMgPSBiaW5hcnkuc2xpY2UoYmluYXJ5SW5kZXgsIGJpbmFyeUluZGV4ICsgYml0V2lkdGgpO1xuXG4gIC8vIFJpZ2h0LXBhZCB3aXRoIHplcm9lcyB0byBkZXNpcmVkIHNpemVcbiAgaWYgKGJpdFdpZHRoICE9PSBJbmZpbml0eSkge1xuICAgIHdoaWxlIChiaXRzLmxlbmd0aCA8IGJpdFdpZHRoKSB7XG4gICAgICBiaXRzICs9ICcwJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYml0cztcbn07XG5cbi8qKlxuICogQHBhcmFtIHtQYWNrZXQuSGVhZGVyVHlwZX0ga2V5IC0gZmllbGQgbmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IGJpbmFyeSAtIGVudGlyZSBwYWNrZXQgYXMgYSBiaW5hcnkgc3RyaW5nXG4gKiBAcmV0dXJucyB7bnVtYmVyfSAtIHJlcXVlc3RlZCBmaWVsZCwgaW50ZXJwcmV0ZWQgYXMgYW4gaW50LlxuICovXG5QYWNrZXQuRW5jb2Rlci5wcm90b3R5cGUuZ2V0SGVhZGVyQXNJbnQgPSBmdW5jdGlvbiAoa2V5LCBiaW5hcnkpIHtcbiAgcmV0dXJuIERhdGFDb252ZXJ0ZXJzLmJpbmFyeVRvSW50KHRoaXMuZ2V0SGVhZGVyKGtleSwgYmluYXJ5KSk7XG59O1xuXG4vKipcbiAqIFJldHJpZXZlIGFuIGFkZHJlc3MgaGVhZGVyIGFzIGEgc3RyaW5nLCBzbyB3ZSBjYW4gZ2l2ZSB0aGUgbXVsdGktcGFydFxuICogcmVwcmVzZW50YXRpb24uXG4gKiBAcGFyYW0ge1BhY2tldC5IZWFkZXJUeXBlfSBrZXlcbiAqIEBwYXJhbSB7c3RyaW5nfSBiaW5hcnkgZm9yIHdob2xlIHBhY2tldFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuUGFja2V0LkVuY29kZXIucHJvdG90eXBlLmdldEhlYWRlckFzQWRkcmVzc1N0cmluZyA9IGZ1bmN0aW9uIChrZXksIGJpbmFyeSkge1xuICByZXR1cm4gRGF0YUNvbnZlcnRlcnMuYmluYXJ5VG9BZGRyZXNzU3RyaW5nKFxuICAgICAgdGhpcy5nZXRIZWFkZXIoa2V5LCBiaW5hcnkpLCB0aGlzLmFkZHJlc3NGb3JtYXRfKTtcbn07XG5cbi8qKlxuICogU2tpcCBvdmVyIGhlYWRlcnMgZ2l2ZW4gaW4gc3BlYyBhbmQgcmV0dXJuIHJlbWFpbmRlciBvZiBiaW5hcnkgd2hpY2hcbiAqIG11c3QgYmUgdGhlIG1lc3NhZ2UgYm9keS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBiaW5hcnkgLSBlbnRpcmUgcGFja2V0IGFzIGEgYmluYXJ5IHN0cmluZ1xuICogQHJldHVybnMge3N0cmluZ30gcGFja2V0IGJvZHkgYmluYXJ5IHN0cmluZ1xuICovXG5QYWNrZXQuRW5jb2Rlci5wcm90b3R5cGUuZ2V0Qm9keSA9IGZ1bmN0aW9uIChiaW5hcnkpIHtcbiAgcmV0dXJuIERhdGFDb252ZXJ0ZXJzLm1pbmlmeUJpbmFyeShiaW5hcnkpXG4gICAgICAuc2xpY2UodGhpcy5nZXRIZWFkZXJMZW5ndGgoKSk7XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEhvdyBtYW55IGJpdHMgdGhlIGhlYWRlciB0YWtlcyB1cFxuICovXG5QYWNrZXQuRW5jb2Rlci5wcm90b3R5cGUuZ2V0SGVhZGVyTGVuZ3RoID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5oZWFkZXJTcGVjXy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGN1cikge1xuICAgIHJldHVybiBwcmV2ICsgdGhpcy5nZXRGaWVsZEJpdFdpZHRoKGN1cik7XG4gIH0uYmluZCh0aGlzKSwgMCk7XG59O1xuXG4vKipcbiAqIFNraXAgb3ZlciBoZWFkZXJzIGdpdmVuIGluIHNwZWMsIGFuZCByZXR1cm4gcmVtYWluZGVyIG9mIHBhY2tldCBpbnRlcnByZXRlZFxuICogdG8gYXNjaWkgd2l0aCB0aGUgZ2l2ZW4gY2hhcmFjdGVyIHdpZHRoLlxuICogQHBhcmFtIHtzdHJpbmd9IGJpbmFyeSAtIGVudGlyZSBwYWNrZXQgYXMgYSBiaW5hcnkgc3RyaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gYml0c1BlckNoYXIgLSBiaXRzIHRvIHJlcHJlc2VudCBhcyBhIHNpbmdsZSBjaGFyYWN0ZXIsXG4gKiAgICAgICAgcmVjb21tZW5kZWQgdG8gdXNlIDggZm9yIG5vcm1hbCBBU0NJSS5cbiAqL1xuUGFja2V0LkVuY29kZXIucHJvdG90eXBlLmdldEJvZHlBc0FzY2lpID0gZnVuY3Rpb24gKGJpbmFyeSwgYml0c1BlckNoYXIpIHtcbiAgcmV0dXJuIERhdGFDb252ZXJ0ZXJzLmJpbmFyeVRvQXNjaWkodGhpcy5nZXRCb2R5KGJpbmFyeSksIGJpdHNQZXJDaGFyKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtQYWNrZXQuSGVhZGVyVHlwZX0gaGVhZGVyVHlwZVxuICogQHJldHVybnMge251bWJlcn0gaG93IG1hbnkgYml0cyB0aGF0IGZpZWxkIHNob3VsZCB0YWtlIGluIHRoZSBwYWNrZXQgaGVhZGVyXG4gKi9cblBhY2tldC5FbmNvZGVyLnByb3RvdHlwZS5nZXRGaWVsZEJpdFdpZHRoID0gZnVuY3Rpb24gKGhlYWRlclR5cGUpIHtcbiAgaWYgKFBhY2tldC5pc0FkZHJlc3NGaWVsZChoZWFkZXJUeXBlKSkge1xuICAgIHJldHVybiB0aGlzLmFkZHJlc3NCaXRXaWR0aF87XG4gIH1cblxuICBpZiAoUGFja2V0LmlzUGFja2V0RmllbGQoaGVhZGVyVHlwZSkpIHtcbiAgICByZXR1cm4gdGhpcy5wYWNrZXRDb3VudEJpdFdpZHRoXztcbiAgfVxuXG4gIC8vIFNob3VsZCBuZXZlciBnZXQgaGVyZS5cbiAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIHNlbGVjdCBhIGJpdC13aWR0aCBmb3IgZmllbGQgXCIgKyBoZWFkZXJUeXBlKTtcbn07XG5cbi8qKlxuICogR2l2ZW4gYSBcImhlYWRlcnNcIiBvYmplY3Qgd2hlcmUgdGhlIHZhbHVlcyBhcmUgbnVtYmVycywgcmV0dXJucyBhIGNvcnJlc3BvbmRpbmdcbiAqIFwiaGVhZGVyc1wiIG9iamVjdCB3aGVyZSB0aGUgdmFsdWVzIGhhdmUgYWxsIGJlZW4gY29udmVydGVkIHRvIGJpbmFyeVxuICogcmVwcmVzZW50YXRpb25zIGF0IHRoZSBhcHByb3ByaWF0ZSB3aWR0aC4gIE9ubHkgaGVhZGVyIGZpZWxkcyB0aGF0IGFwcGVhciBpblxuICogdGhlIGNvbmZpZ3VyZWQgcGFja2V0IGhlYWRlciBmb3JtYXQgd2lsbCBiZSBjb252ZXJ0ZWQgYW5kIHBhc3NlZCB0aHJvdWdoIHRvXG4gKiBvdXRwdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gaGVhZGVycyAtIHdpdGggbnVtYmVyIHZhbHVlc1xuICovXG5QYWNrZXQuRW5jb2Rlci5wcm90b3R5cGUubWFrZUJpbmFyeUhlYWRlcnMgPSBmdW5jdGlvbiAoaGVhZGVycykge1xuICB2YXIgYmluYXJ5SGVhZGVycyA9IHt9O1xuICB0aGlzLmhlYWRlclNwZWNfLmZvckVhY2goZnVuY3Rpb24gKGhlYWRlckZpZWxkKXtcbiAgICBpZiAoaGVhZGVycy5oYXNPd25Qcm9wZXJ0eShoZWFkZXJGaWVsZCkpIHtcbiAgICAgIC8vIENvbnZlcnQgZGlmZmVyZW50bHkgZm9yIGFkZHJlc3MgYW5kIHBhY2tldCBmaWVsZHM/XG4gICAgICBpZiAoUGFja2V0LmlzQWRkcmVzc0ZpZWxkKGhlYWRlckZpZWxkKSkge1xuICAgICAgICBiaW5hcnlIZWFkZXJzW2hlYWRlckZpZWxkXSA9IHRoaXMuYWRkcmVzc1N0cmluZ1RvQmluYXJ5KGhlYWRlcnNbaGVhZGVyRmllbGRdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJpbmFyeUhlYWRlcnNbaGVhZGVyRmllbGRdID0gRGF0YUNvbnZlcnRlcnMuaW50VG9CaW5hcnkoXG4gICAgICAgICAgICBoZWFkZXJzW2hlYWRlckZpZWxkXSwgdGhpcy5nZXRGaWVsZEJpdFdpZHRoKGhlYWRlckZpZWxkKSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB0aGlzKTtcbiAgcmV0dXJuIGJpbmFyeUhlYWRlcnM7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgYW4gYWRkcmVzcyBzdHJpbmcgKHBvc3NpYmx5IG11bHRpLXBhcnQpIGludG8gYmluYXJ5IGJhc2VkIG9uIHRoZVxuICogY29uZmlndXJlZCBhZGRyZXNzIGZvcm1hdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBhZGRyZXNzXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBiaW5hcnkgcmVwcmVzZW50YXRpb25cbiAqL1xuUGFja2V0LkVuY29kZXIucHJvdG90eXBlLmFkZHJlc3NTdHJpbmdUb0JpbmFyeSA9IGZ1bmN0aW9uIChhZGRyZXNzKSB7XG4gIHJldHVybiBEYXRhQ29udmVydGVycy5hZGRyZXNzU3RyaW5nVG9CaW5hcnkoYWRkcmVzcywgdGhpcy5hZGRyZXNzRm9ybWF0Xyk7XG59O1xuXG4vKipcbiAqIFRha2VzIGEgc2V0IG9mIGJpbmFyeSBoZWFkZXJzIGFuZCBhIGJpbmFyeSBib2R5LCBhbmQgZ2VuZXJhdGVzIGEgY29tcGxldGVcbiAqIHBhY2tldCBiaW5hcnkgbWF0Y2hpbmcgdGhlIGNvbmZpZ3VyZWQgcGFja2V0IHNwZWMgaW4gdGVybXMgb2YgaGVhZGVyIHdpZHRoXG4gKiBhbmQgb3JkZXJpbmcuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGJpbmFyeUhlYWRlcnMgLSBoYXNoIGNvbnRhaW5pbmcgcGFja2V0IGhlYWRlcnMgaW4gYmluYXJ5LCB3aGVyZVxuICogICAgICAgIHRoZSBoYXNoIGtleXMgY29ycmVzcG9uZCB0byB0aGUgXCJrZXlcIiB2YWx1ZXMgaW4gdGhlIHBhY2tldCBzcGVjLCBhbmRcbiAqICAgICAgICB0aGUgaGFzaCB2YWx1ZXMgYXJlIGJpbmFyeSBzdHJpbmdzLlxuICogQHBhcmFtIHtzdHJpbmd9IGJvZHkgLSBiaW5hcnkgc3RyaW5nIG9mIHRoZSB1bmxpbWl0ZWQtbGVuZ3RoIGJvZHkgb2YgdGhlXG4gKiAgICAgICAgcGFja2V0LCB3aGljaCB3aWxsIGJlIHBsYWNlZCBhZnRlciB0aGUgcGFja2V0IGhlYWRlcnMuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gYmluYXJ5IHN0cmluZyBvZiBwcm92aWRlZCBkYXRhLCBjb25mb3JtaW5nIHRvIGNvbmZpZ3VyZWRcbiAqICAgICAgICAgIHBhY2tldCBmb3JtYXQuXG4gKi9cblBhY2tldC5FbmNvZGVyLnByb3RvdHlwZS5jb25jYXRlbmF0ZUJpbmFyeSA9IGZ1bmN0aW9uIChiaW5hcnlIZWFkZXJzLCBib2R5KSB7XG4gIHZhciBwYXJ0cyA9IFtdO1xuXG4gIHRoaXMuaGVhZGVyU3BlY18uZm9yRWFjaChmdW5jdGlvbiAoZmllbGRTcGVjKSB7XG4gICAgdmFyIGZpZWxkV2lkdGggPSB0aGlzLmdldEZpZWxkQml0V2lkdGgoZmllbGRTcGVjKTtcblxuICAgIC8vIEdldCBoZWFkZXIgdmFsdWUgZnJvbSBwcm92aWRlZCBoZWFkZXJzLCBpZiBpdCBleGlzdHMuXG4gICAgLy8gSWYgbm90LCB3ZSdsbCBzdGFydCB3aXRoIGFuIGVtcHR5IHN0cmluZyBhbmQgcGFkIGl0IHRvIHRoZSBjb3JyZWN0XG4gICAgLy8gbGVuZ3RoLCBiZWxvdy5cbiAgICB2YXIgZmllbGRCaXRzID0gYmluYXJ5SGVhZGVycy5oYXNPd25Qcm9wZXJ0eShmaWVsZFNwZWMpID9cbiAgICAgICAgYmluYXJ5SGVhZGVyc1tmaWVsZFNwZWNdIDogJyc7XG5cbiAgICAvLyBSaWdodC10cnVuY2F0ZSB0byB0aGUgZGVzaXJlZCBzaXplXG4gICAgZmllbGRCaXRzID0gZmllbGRCaXRzLnNsaWNlKDAsIGZpZWxkV2lkdGgpO1xuXG4gICAgLy8gTGVmdC1wYWQgdG8gZGVzaXJlZCBzaXplXG4gICAgZmllbGRCaXRzID0gTmV0U2ltVXRpbHMuemVyb1BhZExlZnQoZmllbGRCaXRzLCBmaWVsZFdpZHRoKTtcblxuICAgIHBhcnRzLnB1c2goZmllbGRCaXRzKTtcbiAgfSwgdGhpcyk7XG5cbiAgcGFydHMucHVzaChib2R5KTtcblxuICByZXR1cm4gcGFydHMuam9pbignJyk7XG59O1xuIiwiLyoqXG4gKiBAb3ZlcnZpZXcgVUkgY29udHJvbGxlciBmb3IgdGhlIEROUyB0YWIgaW4gdGhlIGxlZnQgY29sdW1uLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIG1hcmt1cCA9IHJlcXVpcmUoJy4vTmV0U2ltRG5zVGFiLmh0bWwuZWpzJyk7XG52YXIgRG5zTW9kZSA9IHJlcXVpcmUoJy4vTmV0U2ltQ29uc3RhbnRzJykuRG5zTW9kZTtcbnZhciBOZXRTaW1EbnNNb2RlQ29udHJvbCA9IHJlcXVpcmUoJy4vTmV0U2ltRG5zTW9kZUNvbnRyb2wnKTtcbnZhciBOZXRTaW1EbnNNYW51YWxDb250cm9sID0gcmVxdWlyZSgnLi9OZXRTaW1EbnNNYW51YWxDb250cm9sJyk7XG52YXIgTmV0U2ltRG5zVGFibGUgPSByZXF1aXJlKCcuL05ldFNpbURuc1RhYmxlJyk7XG52YXIgTmV0U2ltR2xvYmFscyA9IHJlcXVpcmUoJy4vTmV0U2ltR2xvYmFscycpO1xuXG4vKipcbiAqIEdlbmVyYXRvciBhbmQgY29udHJvbGxlciBmb3IgXCJETlNcIiB0YWIuXG4gKiBAcGFyYW0ge2pRdWVyeX0gcm9vdERpdlxuICogQHBhcmFtIHtmdW5jdGlvbn0gZG5zTW9kZUNoYW5nZUNhbGxiYWNrXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBiZWNvbWVEbnNDYWxsYmFja1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBOZXRTaW1EbnNUYWIgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyb290RGl2LCBkbnNNb2RlQ2hhbmdlQ2FsbGJhY2ssXG4gICAgYmVjb21lRG5zQ2FsbGJhY2spIHtcbiAgLyoqXG4gICAqIENvbXBvbmVudCByb290LCB3aGljaCB3ZSBmaWxsIHdoZW5ldmVyIHdlIGNhbGwgcmVuZGVyKClcbiAgICogQHR5cGUge2pRdWVyeX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucm9vdERpdl8gPSByb290RGl2O1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7ZnVuY3Rpb259XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmRuc01vZGVDaGFuZ2VDYWxsYmFja18gPSBkbnNNb2RlQ2hhbmdlQ2FsbGJhY2s7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuYmVjb21lRG5zQ2FsbGJhY2tfID0gYmVjb21lRG5zQ2FsbGJhY2s7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtOZXRTaW1EbnNNb2RlQ29udHJvbH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuZG5zTW9kZUNvbnRyb2xfID0gbnVsbDtcblxuICAvKipcbiAgICogQHR5cGUge05ldFNpbURuc01hbnVhbENvbnRyb2x9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmRuc01hbnVhbENvbnRyb2xfID0gbnVsbDtcblxuICAvKipcbiAgICogQHR5cGUge05ldFNpbURuc1RhYmxlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5kbnNUYWJsZV8gPSBudWxsO1xuXG4gIHRoaXMucmVuZGVyKCk7XG59O1xuXG4vKipcbiAqIEZpbGwgdGhlIHJvb3QgZGl2IHdpdGggbmV3IGVsZW1lbnRzIHJlZmxlY3RpbmcgdGhlIGN1cnJlbnQgc3RhdGVcbiAqL1xuTmV0U2ltRG5zVGFiLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsZXZlbENvbmZpZyA9IE5ldFNpbUdsb2JhbHMuZ2V0TGV2ZWxDb25maWcoKTtcblxuICB2YXIgcmVuZGVyZWRNYXJrdXAgPSAkKG1hcmt1cCh7XG4gICAgbGV2ZWw6IGxldmVsQ29uZmlnXG4gIH0pKTtcbiAgdGhpcy5yb290RGl2Xy5odG1sKHJlbmRlcmVkTWFya3VwKTtcblxuICBpZiAobGV2ZWxDb25maWcuc2hvd0Ruc01vZGVDb250cm9sKSB7XG4gICAgdGhpcy5kbnNNb2RlQ29udHJvbF8gPSBuZXcgTmV0U2ltRG5zTW9kZUNvbnRyb2woXG4gICAgICAgIHRoaXMucm9vdERpdl8uZmluZCgnLmRuc19tb2RlJyksXG4gICAgICAgIHRoaXMuZG5zTW9kZUNoYW5nZUNhbGxiYWNrXyk7XG4gIH1cblxuICB0aGlzLmRuc01hbnVhbENvbnRyb2xfID0gbmV3IE5ldFNpbURuc01hbnVhbENvbnRyb2woXG4gICAgICB0aGlzLnJvb3REaXZfLmZpbmQoJy5kbnNfbWFudWFsX2NvbnRyb2wnKSxcbiAgICAgIHRoaXMuYmVjb21lRG5zQ2FsbGJhY2tfKTtcblxuICB0aGlzLmRuc1RhYmxlXyA9IG5ldyBOZXRTaW1EbnNUYWJsZShcbiAgICAgIHRoaXMucm9vdERpdl8uZmluZCgnLmRuc190YWJsZScpKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtEbnNNb2RlfSBuZXdEbnNNb2RlXG4gKi9cbk5ldFNpbURuc1RhYi5wcm90b3R5cGUuc2V0RG5zTW9kZSA9IGZ1bmN0aW9uIChuZXdEbnNNb2RlKSB7XG4gIGlmICh0aGlzLmRuc01vZGVDb250cm9sXykge1xuICAgIHRoaXMuZG5zTW9kZUNvbnRyb2xfLnNldERuc01vZGUobmV3RG5zTW9kZSk7XG4gIH1cblxuICB0aGlzLmRuc1RhYmxlXy5zZXREbnNNb2RlKG5ld0Ruc01vZGUpO1xuICB0aGlzLnJvb3REaXZfLmZpbmQoJy5kbnNfbWFudWFsX2NvbnRyb2wnKS50b2dnbGUobmV3RG5zTW9kZSA9PT0gRG5zTW9kZS5NQU5VQUwpO1xuICB0aGlzLnJvb3REaXZfLmZpbmQoJy5kbnMtbm90ZXMnKS50b2dnbGUobmV3RG5zTW9kZSAhPT0gRG5zTW9kZS5OT05FKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtib29sZWFufSBpc0Ruc05vZGVcbiAqL1xuTmV0U2ltRG5zVGFiLnByb3RvdHlwZS5zZXRJc0Ruc05vZGUgPSBmdW5jdGlvbiAoaXNEbnNOb2RlKSB7XG4gIHRoaXMuZG5zTWFudWFsQ29udHJvbF8uc2V0SXNEbnNOb2RlKGlzRG5zTm9kZSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXl9IHRhYmxlQ29udGVudHNcbiAqL1xuTmV0U2ltRG5zVGFiLnByb3RvdHlwZS5zZXREbnNUYWJsZUNvbnRlbnRzID0gZnVuY3Rpb24gKHRhYmxlQ29udGVudHMpIHtcbiAgdGhpcy5kbnNUYWJsZV8uc2V0RG5zVGFibGVDb250ZW50cyh0YWJsZUNvbnRlbnRzKTtcbn07XG4iLCIvKipcbiAqIEBvdmVydmlldyBVSSB0YWJsZSBvZiBsb2NhbCBzdWJuZXQsIGRpc3BsYXlpbmcgaG9zdG5hbWUgPT4gYWRkcmVzcyBtYXAuXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgbWFya3VwID0gcmVxdWlyZSgnLi9OZXRTaW1EbnNUYWJsZS5odG1sLmVqcycpO1xudmFyIERuc01vZGUgPSByZXF1aXJlKCcuL05ldFNpbUNvbnN0YW50cycpLkRuc01vZGU7XG5cbi8qKlxuICogR2VuZXJhdG9yIGFuZCBjb250cm9sbGVyIGZvciBETlMgbmV0d29yayBsb29rdXAgdGFibGUgY29tcG9uZW50LlxuICogU2hvd3MgZGlmZmVyZW50IGFtb3VudHMgb2YgaW5mb3JtYXRpb24gZGVwZW5kaW5nIG9uIHRoZSBETlMgbW9kZS5cbiAqXG4gKiBAcGFyYW0ge2pRdWVyeX0gcm9vdERpdlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBOZXRTaW1EbnNUYWJsZSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJvb3REaXYpIHtcbiAgLyoqXG4gICAqIENvbXBvbmVudCByb290LCB3aGljaCB3ZSBmaWxsIHdoZW5ldmVyIHdlIGNhbGwgcmVuZGVyKClcbiAgICogQHR5cGUge2pRdWVyeX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucm9vdERpdl8gPSByb290RGl2O1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7RG5zTW9kZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuZG5zTW9kZV8gPSBEbnNNb2RlLk5PTkU7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtBcnJheX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuYWRkcmVzc1RhYmxlRGF0YV8gPSBbXTtcblxuICB0aGlzLnJlbmRlcigpO1xufTtcblxuLyoqXG4gKiBGaWxsIHRoZSByb290IGRpdiB3aXRoIG5ldyBlbGVtZW50cyByZWZsZWN0aW5nIHRoZSBjdXJyZW50IHN0YXRlXG4gKi9cbk5ldFNpbURuc1RhYmxlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciByZW5kZXJlZE1hcmt1cCA9ICQobWFya3VwKHtcbiAgICBkbnNNb2RlOiB0aGlzLmRuc01vZGVfLFxuICAgIHRhYmxlRGF0YTogdGhpcy5hZGRyZXNzVGFibGVEYXRhX1xuICB9KSk7XG4gIHRoaXMucm9vdERpdl8uaHRtbChyZW5kZXJlZE1hcmt1cCk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7RG5zTW9kZX0gbmV3RG5zTW9kZVxuICovXG5OZXRTaW1EbnNUYWJsZS5wcm90b3R5cGUuc2V0RG5zTW9kZSA9IGZ1bmN0aW9uIChuZXdEbnNNb2RlKSB7XG4gIHRoaXMuZG5zTW9kZV8gPSBuZXdEbnNNb2RlO1xuICB0aGlzLnJlbmRlcigpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5fSB0YWJsZUNvbnRlbnRzXG4gKi9cbk5ldFNpbURuc1RhYmxlLnByb3RvdHlwZS5zZXREbnNUYWJsZUNvbnRlbnRzID0gZnVuY3Rpb24gKHRhYmxlQ29udGVudHMpIHtcbiAgdGhpcy5hZGRyZXNzVGFibGVEYXRhXyA9IHRhYmxlQ29udGVudHM7XG4gIHRoaXMucmVuZGVyKCk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHM9IChmdW5jdGlvbigpIHtcbiAgdmFyIHQgPSBmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzLCBmaWx0ZXJzLCBlc2NhcGVcbi8qKi8pIHtcbmVzY2FwZSA9IGVzY2FwZSB8fCBmdW5jdGlvbiAoaHRtbCl7XG4gIHJldHVybiBTdHJpbmcoaHRtbClcbiAgICAucmVwbGFjZSgvJig/IVxcdys7KS9nLCAnJmFtcDsnKVxuICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXG4gICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbn07XG52YXIgYnVmID0gW107XG53aXRoIChsb2NhbHMgfHwge30pIHsgKGZ1bmN0aW9uKCl7IFxuIGJ1Zi5wdXNoKCcnKTsxO1xudmFyIERuc01vZGUgPSByZXF1aXJlKCcuL05ldFNpbUNvbnN0YW50cycpLkRuc01vZGU7XG47IGJ1Zi5wdXNoKCdcXG48ZGl2IGNsYXNzPVwibmV0c2ltLWRucy10YWJsZVwiPlxcbiAgPGgxPk15IE5ldHdvcms8L2gxPlxcbiAgPHRhYmxlPlxcbiAgICA8dGhlYWQ+XFxuICAgIDx0cj5cXG4gICAgICA8dGg+SG9zdG5hbWU8L3RoPlxcbiAgICAgIDx0aD5BZGRyZXNzPC90aD5cXG4gICAgPC90cj5cXG4gICAgPC90aGVhZD5cXG4gICAgPHRib2R5PlxcbiAgICAnKTsxNDtcbiAgICB0YWJsZURhdGEuZm9yRWFjaChmdW5jdGlvbiAocm93KSB7XG4gICAgICB2YXIgZGlzcGxheUhvc3RuYW1lID0gcm93Lmhvc3RuYW1lO1xuICAgICAgdmFyIGRpc3BsYXlBZGRyZXNzID0gJyc7XG4gICAgICB2YXIgcm93Q2xhc3NlcyA9IFtdO1xuXG4gICAgICBpZiAoZG5zTW9kZSA9PT0gRG5zTW9kZS5OT05FIHx8IHJvdy5pc0Ruc05vZGUgfHwgcm93LmlzTG9jYWwpIHtcbiAgICAgICAgZGlzcGxheUFkZHJlc3MgPSByb3cuYWRkcmVzcztcbiAgICAgIH1cblxuICAgICAgaWYgKHJvdy5pc0xvY2FsKSB7XG4gICAgICAgIGRpc3BsYXlIb3N0bmFtZSArPSBcIiAoTWUpXCI7XG4gICAgICAgIHJvd0NsYXNzZXMucHVzaCgnbG9jYWwtbm9kZScpO1xuICAgICAgfVxuXG4gICAgICBpZiAocm93LmlzRG5zTm9kZSAmJiBkbnNNb2RlICE9PSBEbnNNb2RlLk5PTkUpIHtcbiAgICAgICAgZGlzcGxheUhvc3RuYW1lICs9IFwiIChETlMpXCI7XG4gICAgICAgIHJvd0NsYXNzZXMucHVzaCgnZG5zLW5vZGUnKTtcbiAgICAgIH1cbiAgICAgIDsgYnVmLnB1c2goJ1xcbiAgICAgICAgPHRyIGNsYXNzPVwiJywgZXNjYXBlKCgzNCwgIHJvd0NsYXNzZXMuam9pbignICcpICkpLCAnXCI+XFxuICAgICAgICAgIDx0ZD4nLCBlc2NhcGUoKDM1LCAgZGlzcGxheUhvc3RuYW1lICkpLCAnPC90ZD5cXG4gICAgICAgICAgPHRkPicsIGVzY2FwZSgoMzYsICBkaXNwbGF5QWRkcmVzcyApKSwgJzwvdGQ+XFxuICAgICAgICA8L3RyPlxcbiAgICAgICcpOzM4O1xuICAgIH0pO1xuICAgIDsgYnVmLnB1c2goJ1xcbiAgICA8L3Rib2R5PlxcbiAgPC90YWJsZT5cXG48L2Rpdj4nKTsgfSkoKTtcbn0gXG5yZXR1cm4gYnVmLmpvaW4oJycpO1xufTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGxvY2Fscykge1xuICAgIHJldHVybiB0KGxvY2FscywgcmVxdWlyZShcImVqc1wiKS5maWx0ZXJzKTtcbiAgfVxufSgpKTsiLCJtb2R1bGUuZXhwb3J0cz0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdCA9IGZ1bmN0aW9uIGFub255bW91cyhsb2NhbHMsIGZpbHRlcnMsIGVzY2FwZVxuLyoqLykge1xuZXNjYXBlID0gZXNjYXBlIHx8IGZ1bmN0aW9uIChodG1sKXtcbiAgcmV0dXJuIFN0cmluZyhodG1sKVxuICAgIC5yZXBsYWNlKC8mKD8hXFx3KzspL2csICcmYW1wOycpXG4gICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xufTtcbnZhciBidWYgPSBbXTtcbndpdGggKGxvY2FscyB8fCB7fSkgeyAoZnVuY3Rpb24oKXsgXG4gYnVmLnB1c2goJzxkaXYgY2xhc3M9XCJuZXRzaW0tZG5zLXRhYlwiPlxcbiAgJyk7MjsgaWYgKGxldmVsLnNob3dEbnNNb2RlQ29udHJvbCkgeyA7IGJ1Zi5wdXNoKCdcXG4gIDxkaXYgY2xhc3M9XCJkbnNfbW9kZVwiPjwvZGl2PlxcbiAgJyk7NDsgfSA7IGJ1Zi5wdXNoKCdcXG4gIDxkaXYgY2xhc3M9XCJkbnNfbWFudWFsX2NvbnRyb2xcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XCJkbnNfdGFibGVcIj48L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XCJkbnMtbm90ZXNcIj5cXG4gICAgPGgxPk5vdGVzPC9oMT5cXG4gICAgPGRpdj5cXG4gICAgICA8dGV4dGFyZWE+PC90ZXh0YXJlYT5cXG4gICAgPC9kaXY+XFxuICA8L2Rpdj5cXG48L2Rpdj5cXG4nKTsgfSkoKTtcbn0gXG5yZXR1cm4gYnVmLmpvaW4oJycpO1xufTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGxvY2Fscykge1xuICAgIHJldHVybiB0KGxvY2FscywgcmVxdWlyZShcImVqc1wiKS5maWx0ZXJzKTtcbiAgfVxufSgpKTsiLCIvKipcbiAqIEBvdmVydmlldyBVSSBjb21wb25lbnQgdXNlZCB0byBzZWxlY3QgYSBETlMgbW9kZSBhdCBydW50aW1lLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIG1hcmt1cCA9IHJlcXVpcmUoJy4vTmV0U2ltRG5zTW9kZUNvbnRyb2wuaHRtbC5lanMnKTtcbnZhciBEbnNNb2RlID0gcmVxdWlyZSgnLi9OZXRTaW1Db25zdGFudHMnKS5EbnNNb2RlO1xuXG4vKipcbiAqIEdlbmVyYXRvciBhbmQgY29udHJvbGxlciBmb3IgRE5TIG1vZGUgc2VsZWN0b3JcbiAqIEBwYXJhbSB7alF1ZXJ5fSByb290RGl2XG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBkbnNNb2RlQ2hhbmdlQ2FsbGJhY2tcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgTmV0U2ltRG5zTW9kZUNvbnRyb2wgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyb290RGl2LFxuICAgIGRuc01vZGVDaGFuZ2VDYWxsYmFjaykge1xuICAvKipcbiAgICogQ29tcG9uZW50IHJvb3QsIHdoaWNoIHdlIGZpbGwgd2hlbmV2ZXIgd2UgY2FsbCByZW5kZXIoKVxuICAgKiBAdHlwZSB7alF1ZXJ5fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5yb290RGl2XyA9IHJvb3REaXY7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuZG5zTW9kZUNoYW5nZUNhbGxiYWNrXyA9IGRuc01vZGVDaGFuZ2VDYWxsYmFjaztcblxuICAvKipcbiAgICogU2V0IG9mIGFsbCBETlMgbW9kZSByYWRpbyBidXR0b25zXG4gICAqIEB0eXBlIHtqUXVlcnl9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmRuc01vZGVSYWRpb3NfID0gbnVsbDtcblxuICAvKipcbiAgICogSW50ZXJuYWwgc3RhdGU6IEN1cnJlbnQgRE5TIG1vZGUuXG4gICAqIEB0eXBlIHtEbnNNb2RlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5jdXJyZW50RG5zTW9kZV8gPSBEbnNNb2RlLk5PTkU7XG5cbiAgdGhpcy5yZW5kZXIoKTtcbn07XG5cbi8qKlxuICogRmlsbCB0aGUgcm9vdCBkaXYgd2l0aCBuZXcgZWxlbWVudHMgcmVmbGVjdGluZyB0aGUgY3VycmVudCBzdGF0ZVxuICovXG5OZXRTaW1EbnNNb2RlQ29udHJvbC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcmVuZGVyZWRNYXJrdXAgPSAkKG1hcmt1cCh7fSkpO1xuICB0aGlzLnJvb3REaXZfLmh0bWwocmVuZGVyZWRNYXJrdXApO1xuXG4gIHRoaXMuZG5zTW9kZVJhZGlvc18gPSB0aGlzLnJvb3REaXZfLmZpbmQoJ2lucHV0W3R5cGU9XCJyYWRpb1wiXVtuYW1lPVwiZG5zX21vZGVcIl0nKTtcbiAgdGhpcy5kbnNNb2RlUmFkaW9zXy5jaGFuZ2UodGhpcy5vbkRuc01vZGVDaGFuZ2VfLmJpbmQodGhpcykpO1xuICB0aGlzLnNldERuc01vZGUodGhpcy5jdXJyZW50RG5zTW9kZV8pO1xufTtcblxuLyoqXG4gKiBIYW5kbGVyIGZvciBhIG5ldyByYWRpbyBidXR0b24gYmVpbmcgc2VsZWN0ZWQuXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1EbnNNb2RlQ29udHJvbC5wcm90b3R5cGUub25EbnNNb2RlQ2hhbmdlXyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG5ld0Ruc01vZGUgPSB0aGlzLmRuc01vZGVSYWRpb3NfLmZpbHRlcignOmNoZWNrZWQnKS52YWwoKTtcbiAgdGhpcy5kbnNNb2RlQ2hhbmdlQ2FsbGJhY2tfKG5ld0Ruc01vZGUpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0Ruc01vZGV9IG5ld0Ruc01vZGVcbiAqL1xuTmV0U2ltRG5zTW9kZUNvbnRyb2wucHJvdG90eXBlLnNldERuc01vZGUgPSBmdW5jdGlvbiAobmV3RG5zTW9kZSkge1xuICB0aGlzLmN1cnJlbnREbnNNb2RlXyA9IG5ld0Ruc01vZGU7XG4gIHRoaXMuZG5zTW9kZVJhZGlvc19cbiAgICAgIC5maWx0ZXIoJ1t2YWx1ZT1cIicgKyBuZXdEbnNNb2RlICsgJ1wiXScpXG4gICAgICAucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB0ID0gZnVuY3Rpb24gYW5vbnltb3VzKGxvY2FscywgZmlsdGVycywgZXNjYXBlXG4vKiovKSB7XG5lc2NhcGUgPSBlc2NhcGUgfHwgZnVuY3Rpb24gKGh0bWwpe1xuICByZXR1cm4gU3RyaW5nKGh0bWwpXG4gICAgLnJlcGxhY2UoLyYoPyFcXHcrOykvZywgJyZhbXA7JylcbiAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKVxuICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG59O1xudmFyIGJ1ZiA9IFtdO1xud2l0aCAobG9jYWxzIHx8IHt9KSB7IChmdW5jdGlvbigpeyBcbiBidWYucHVzaCgnJyk7MTtcbiAgdmFyIERuc01vZGUgPSByZXF1aXJlKCcuL05ldFNpbUNvbnN0YW50cycpLkRuc01vZGU7XG4gIHZhciBpMThuID0gcmVxdWlyZSgnLi9sb2NhbGUnKTtcblxuICAvKipcbiAgICogQHBhcmFtIHtleHBvcnRzLkRuc01vZGV9IG1vZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxhYmVsXG4gICAqL1xuICBmdW5jdGlvbiBtYWtlUmFkaW8obW9kZSwgbGFiZWwpIHtcbiAgICA7IGJ1Zi5wdXNoKCdcXG4gICAgPGRpdiBjbGFzcz1cImRuc19tb2RlXycsIGVzY2FwZSgoMTEsICBtb2RlICkpLCAnXCI+XFxuICAgICAgPGlucHV0IGlkPVwiZG5zX21vZGVfJywgZXNjYXBlKCgxMiwgIG1vZGUgKSksICdcIlxcbiAgICAgICAgICAgICAgICAgICB0eXBlPVwicmFkaW9cIlxcbiAgICAgICAgICAgICAgICAgICBuYW1lPVwiZG5zX21vZGVcIlxcbiAgICAgICAgICAgICAgICAgICB2YWx1ZT1cIicsIGVzY2FwZSgoMTUsICBtb2RlICkpLCAnXCIgLz5cXG4gICAgICA8bGFiZWwgZm9yPVwiZG5zX21vZGVfJywgZXNjYXBlKCgxNiwgIG1vZGUgKSksICdcIj4nLCBlc2NhcGUoKDE2LCAgbGFiZWwgKSksICc8L2xhYmVsPlxcbiAgICA8L2Rpdj5cXG4gICAgJyk7MTg7XG4gIH1cbjsgYnVmLnB1c2goJ1xcbjxkaXYgY2xhc3M9XCJkbnMtbW9kZS1jb250cm9sXCI+XFxuICA8aDE+JywgZXNjYXBlKCgyMiwgIGkxOG4uZG5zTW9kZSgpICkpLCAnPC9oMT5cXG4gICcpOzIzOyBtYWtlUmFkaW8oRG5zTW9kZS5OT05FLCBpMThuLmRuc01vZGVfTk9ORSgpKTsgOyBidWYucHVzaCgnXFxuICAnKTsyNDsgbWFrZVJhZGlvKERuc01vZGUuTUFOVUFMLCBpMThuLmRuc01vZGVfTUFOVUFMKCkpOyA7IGJ1Zi5wdXNoKCdcXG4gICcpOzI1OyBtYWtlUmFkaW8oRG5zTW9kZS5BVVRPTUFUSUMsIGkxOG4uZG5zTW9kZV9BVVRPTUFUSUMoKSk7IDsgYnVmLnB1c2goJ1xcbjwvZGl2PlxcbicpOyB9KSgpO1xufSBcbnJldHVybiBidWYuam9pbignJyk7XG59O1xuICByZXR1cm4gZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgcmV0dXJuIHQobG9jYWxzLCByZXF1aXJlKFwiZWpzXCIpLmZpbHRlcnMpO1xuICB9XG59KCkpOyIsIi8qKlxuICogQG92ZXJ2aWV3IFVJIGJ1dHRvbiB1c2VkIGJlY29tZSB0aGUgY3VycmVudCBETlMgbm9kZSBpbiBtYW51YWwgRE5TIG1vZGUuXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgbWFya3VwID0gcmVxdWlyZSgnLi9OZXRTaW1EbnNNYW51YWxDb250cm9sLmh0bWwuZWpzJyk7XG5cbi8qKlxuICogR2VuZXJhdG9yIGFuZCBjb250cm9sbGVyIGZvciBETlMgbW9kZSBzZWxlY3RvclxuICogQHBhcmFtIHtqUXVlcnl9IHJvb3REaXZcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGJlY29tZURuc0NhbGxiYWNrXG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIE5ldFNpbURuc01hbnVhbENvbnRyb2wgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyb290RGl2LFxuICAgIGJlY29tZURuc0NhbGxiYWNrKSB7XG4gIC8qKlxuICAgKiBDb21wb25lbnQgcm9vdCwgd2hpY2ggd2UgZmlsbCB3aGVuZXZlciB3ZSBjYWxsIHJlbmRlcigpXG4gICAqIEB0eXBlIHtqUXVlcnl9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnJvb3REaXZfID0gcm9vdERpdjtcblxuICAvKipcbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5iZWNvbWVEbnNDYWxsYmFja18gPSBiZWNvbWVEbnNDYWxsYmFjaztcblxuICB0aGlzLnJlbmRlcigpO1xufTtcblxuLyoqXG4gKiBGaWxsIHRoZSByb290IGRpdiB3aXRoIG5ldyBlbGVtZW50cyByZWZsZWN0aW5nIHRoZSBjdXJyZW50IHN0YXRlXG4gKi9cbk5ldFNpbURuc01hbnVhbENvbnRyb2wucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlbmRlcmVkTWFya3VwID0gJChtYXJrdXAoe30pKTtcbiAgdGhpcy5yb290RGl2Xy5odG1sKHJlbmRlcmVkTWFya3VwKTtcbiAgdGhpcy5yb290RGl2Xy5maW5kKCdpbnB1dFt0eXBlPVwiYnV0dG9uXCJdJykuY2xpY2soXG4gICAgICB0aGlzLm9uQmVjb21lRG5zQnV0dG9uQ2xpY2tfLmJpbmQodGhpcykpO1xufTtcblxuLyoqXG4gKiBIYW5kbGVyIGZvciBidXR0b24gY2xpY2suXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1EbnNNYW51YWxDb250cm9sLnByb3RvdHlwZS5vbkJlY29tZURuc0J1dHRvbkNsaWNrXyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5iZWNvbWVEbnNDYWxsYmFja18oKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtib29sZWFufSBpc0Ruc05vZGVcbiAqL1xuTmV0U2ltRG5zTWFudWFsQ29udHJvbC5wcm90b3R5cGUuc2V0SXNEbnNOb2RlID0gZnVuY3Rpb24gKGlzRG5zTm9kZSkge1xuICB0aGlzLnJvb3REaXZfLmZpbmQoJ2lucHV0W3R5cGU9XCJidXR0b25cIl0nKS5hdHRyKCdkaXNhYmxlZCcsIGlzRG5zTm9kZSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHM9IChmdW5jdGlvbigpIHtcbiAgdmFyIHQgPSBmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzLCBmaWx0ZXJzLCBlc2NhcGVcbi8qKi8pIHtcbmVzY2FwZSA9IGVzY2FwZSB8fCBmdW5jdGlvbiAoaHRtbCl7XG4gIHJldHVybiBTdHJpbmcoaHRtbClcbiAgICAucmVwbGFjZSgvJig/IVxcdys7KS9nLCAnJmFtcDsnKVxuICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXG4gICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbn07XG52YXIgYnVmID0gW107XG53aXRoIChsb2NhbHMgfHwge30pIHsgKGZ1bmN0aW9uKCl7IFxuIGJ1Zi5wdXNoKCc8ZGl2IGNsYXNzPVwibmV0c2ltX2Ruc19tYW51YWxfY29udHJvbFwiPlxcbiAgPGgxPk1hbnVhbCBDb250cm9sPC9oMT5cXG4gIDxpbnB1dCBpZD1cImJlY29tZV9kbnNfYnV0dG9uXCIgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwiVGFrZSBvdmVyIGFzIEROU1wiIC8+XFxuPC9kaXY+Jyk7IH0pKCk7XG59IFxucmV0dXJuIGJ1Zi5qb2luKCcnKTtcbn07XG4gIHJldHVybiBmdW5jdGlvbihsb2NhbHMpIHtcbiAgICByZXR1cm4gdChsb2NhbHMsIHJlcXVpcmUoXCJlanNcIikuZmlsdGVycyk7XG4gIH1cbn0oKSk7IiwiLyoqXG4gKiBAb3ZlcnZpZXcgU2ltdWxhdGVkIGNsaWVudCBub2RlLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBfID0gdXRpbHMuZ2V0TG9kYXNoKCk7XG52YXIgaTE4biA9IHJlcXVpcmUoJy4vbG9jYWxlJyk7XG52YXIgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05ldFNpbUNvbnN0YW50cycpLk5vZGVUeXBlO1xudmFyIE5ldFNpbUVudGl0eSA9IHJlcXVpcmUoJy4vTmV0U2ltRW50aXR5Jyk7XG52YXIgTmV0U2ltTm9kZSA9IHJlcXVpcmUoJy4vTmV0U2ltTm9kZScpO1xudmFyIE5ldFNpbVdpcmUgPSByZXF1aXJlKCcuL05ldFNpbVdpcmUnKTtcblxuLyoqXG4gKiBDbGllbnQgbW9kZWwgb2Ygc2ltdWxhdGVkIG5vZGVcbiAqXG4gKiBSZXByZXNlbnRzIHRoZSBjbGllbnQncyB2aWV3IG9mIGEgbm9kZSB0aGF0IGlzIGNvbnRyb2xsZWQgYnkgYSB1c2VyIGNsaWVudCxcbiAqIGVpdGhlciBieSBvdXIgb3duIGNsaWVudCBvciBzb21lYm9keSBlbHNlJ3MuICBJcyBhIE5ldFNpbUVudGl0eSwgbWVhbmluZ1xuICogaXQgd3JhcHMgYSByb3cgaW4gdGhlIG5vZGUgdGFibGUgYW5kIHByb3ZpZGVzIGZ1bmN0aW9uYWxpdHkgYXJvdW5kIGl0LlxuICpcbiAqIFlvdSBtYXkgYmUgbG9va2luZyBmb3IgTmV0U2ltTG9jYWxDbGllbnROb2RlIGlmIHlvdSdyZSB0cnlpbmcgdG8gbWFuaXB1bGF0ZVxuICogeW91ciBsb2NhbCBjbGllbnQgbm9kZS5cbiAqXG4gKiBAcGFyYW0geyFOZXRTaW1TaGFyZH0gc2hhcmRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbY2xpZW50Um93XSAtIExvYmJ5IHJvdyBmb3IgdGhpcyByb3V0ZXIuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhdWdtZW50cyBOZXRTaW1Ob2RlXG4gKi9cbnZhciBOZXRTaW1DbGllbnROb2RlID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc2hhcmQsIGNsaWVudFJvdykge1xuICBOZXRTaW1Ob2RlLmNhbGwodGhpcywgc2hhcmQsIGNsaWVudFJvdyk7XG59O1xuTmV0U2ltQ2xpZW50Tm9kZS5pbmhlcml0cyhOZXRTaW1Ob2RlKTtcblxuLyoqIEBpbmhlcml0ZG9jICovXG5OZXRTaW1DbGllbnROb2RlLnByb3RvdHlwZS5nZXROb2RlVHlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE5vZGVUeXBlLkNMSUVOVDtcbn07XG5cbi8qKiBAaW5oZXJpdGRvYyAqL1xuTmV0U2ltQ2xpZW50Tm9kZS5wcm90b3R5cGUuZ2V0U3RhdHVzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgb3V0Z29pbmdXaXJlID0gdGhpcy5nZXRPdXRnb2luZ1dpcmUoKTtcbiAgaWYgKCFvdXRnb2luZ1dpcmUpIHtcbiAgICByZXR1cm4gaTE4bi5ub3RDb25uZWN0ZWQoKTtcbiAgfVxuXG4gIC8vIEdldCByZW1vdGUgbm9kZSBmb3IgZGlzcGxheSBuYW1lIC8gaG9zdG5hbWVcbiAgdmFyIGNhY2hlZE5vZGVSb3dzID0gdGhpcy5zaGFyZF8ubm9kZVRhYmxlLnJlYWRBbGwoKTtcbiAgdmFyIHJlbW90ZU5vZGVSb3cgPSBfLmZpbmQoY2FjaGVkTm9kZVJvd3MsIGZ1bmN0aW9uIChub2RlUm93KSB7XG4gICAgcmV0dXJuIG5vZGVSb3cuaWQgPT09IG91dGdvaW5nV2lyZS5yZW1vdGVOb2RlSUQ7XG4gIH0pO1xuXG4gIHZhciByZW1vdGVOb2RlTmFtZSA9IGkxOG4udW5rbm93bk5vZGUoKTtcbiAgaWYgKHJlbW90ZU5vZGVSb3cpIHtcbiAgICByZW1vdGVOb2RlTmFtZSA9IHJlbW90ZU5vZGVSb3cubmFtZTtcbiAgfVxuXG4gIC8vIENoZWNrIGZvciBjb25uZWN0aW9uIHN0YXRlXG4gIHZhciBtdXR1YWxDb25uZWN0aW9uO1xuICBpZiAocmVtb3RlTm9kZVJvdyAmJiByZW1vdGVOb2RlUm93LnR5cGUgPT09IE5vZGVUeXBlLlJPVVRFUikge1xuICAgIG11dHVhbENvbm5lY3Rpb24gPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBjYWNoZWRXaXJlUm93cyA9IHRoaXMuc2hhcmRfLndpcmVUYWJsZS5yZWFkQWxsKCk7XG4gICAgbXV0dWFsQ29ubmVjdGlvbiA9IGNhY2hlZFdpcmVSb3dzLnNvbWUoZnVuY3Rpb24gKHdpcmVSb3cpIHtcbiAgICAgIHJldHVybiB3aXJlUm93LmxvY2FsTm9kZUlEID09PSBvdXRnb2luZ1dpcmUucmVtb3RlTm9kZUlEICYmXG4gICAgICAgICAgd2lyZVJvdy5yZW1vdGVOb2RlSUQgPT09IG91dGdvaW5nV2lyZS5sb2NhbE5vZGVJRDtcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChtdXR1YWxDb25uZWN0aW9uKSB7XG4gICAgcmV0dXJuIGkxOG4uY29ubmVjdGVkVG9Ob2RlTmFtZSh7bm9kZU5hbWU6cmVtb3RlTm9kZU5hbWV9KTtcbiAgfVxuICByZXR1cm4gaTE4bi5jb25uZWN0aW5nVG9Ob2RlTmFtZSh7bm9kZU5hbWU6cmVtb3RlTm9kZU5hbWV9KTtcbn07XG5cbi8qKiBAaW5oZXJpdGRvYyAqL1xuTmV0U2ltQ2xpZW50Tm9kZS5wcm90b3R5cGUuaXNGdWxsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgb3V0Z29pbmdXaXJlID0gdGhpcy5nZXRPdXRnb2luZ1dpcmUoKTtcbiAgaWYgKCFvdXRnb2luZ1dpcmUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGNhY2hlZFdpcmVSb3dzID0gdGhpcy5zaGFyZF8ud2lyZVRhYmxlLnJlYWRBbGwoKTtcbiAgcmV0dXJuIGNhY2hlZFdpcmVSb3dzLnNvbWUoZnVuY3Rpb24gKHdpcmVSb3cpIHtcbiAgICByZXR1cm4gd2lyZVJvdy5sb2NhbE5vZGVJRCA9PT0gb3V0Z29pbmdXaXJlLnJlbW90ZU5vZGVJRCAmJlxuICAgICAgICB3aXJlUm93LnJlbW90ZU5vZGVJRCA9PT0gb3V0Z29pbmdXaXJlLmxvY2FsTm9kZUlEO1xuICB9KTtcbn07XG5cbi8qKlxuICogRGV0ZXJtaW5lIHdoYXQgYWRkcmVzcyBoYXMgYmVlbiBhc3NpZ25lZCB0byB0aGlzIGNsaWVudCBvbiBpdHMgb3V0Z29pbmdcbiAqIHdpcmUuXG4gKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH1cbiAqL1xuTmV0U2ltQ2xpZW50Tm9kZS5wcm90b3R5cGUuZ2V0QWRkcmVzcyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHdpcmUgPSB0aGlzLmdldE91dGdvaW5nV2lyZSgpO1xuICBpZiAoIXdpcmUpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiB3aXJlLmxvY2FsQWRkcmVzcztcbn07XG5cbi8qKlxuICogQmFzZWQgb24gY2FjaGVkIHdpcmUgZGF0YSwgcmV0cmlldmUgdGhpcyBub2RlJ3Mgb3V0Z29pbmcgd2lyZS5cbiAqIEByZXR1cm5zIHtOZXRTaW1XaXJlfG51bGx9IG51bGwgaWYgd2lyZSBkb2VzIG5vdCBleGlzdC5cbiAqL1xuTmV0U2ltQ2xpZW50Tm9kZS5wcm90b3R5cGUuZ2V0T3V0Z29pbmdXaXJlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgY2FjaGVkV2lyZVJvd3MgPSB0aGlzLnNoYXJkXy53aXJlVGFibGUucmVhZEFsbCgpO1xuICB2YXIgb3V0Z29pbmdXaXJlUm93ID0gXy5maW5kKGNhY2hlZFdpcmVSb3dzLCBmdW5jdGlvbiAod2lyZVJvdykge1xuICAgIHJldHVybiB3aXJlUm93LmxvY2FsTm9kZUlEID09PSB0aGlzLmVudGl0eUlEO1xuICB9LCB0aGlzKTtcbiAgaWYgKG91dGdvaW5nV2lyZVJvdykge1xuICAgIHJldHVybiBuZXcgTmV0U2ltV2lyZSh0aGlzLnNoYXJkXywgb3V0Z29pbmdXaXJlUm93KTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cbi8qKlxuICogU3RhdGljIGFzeW5jIHJldHJpZXZhbCBtZXRob2QuICBTZWUgTmV0U2ltRW50aXR5LmdldCgpLlxuICogQHBhcmFtIHshbnVtYmVyfSBub2RlSUQgLSBUaGUgcm93IElEIGZvciB0aGUgZW50aXR5IHlvdSdkIGxpa2UgdG8gZmluZC5cbiAqIEBwYXJhbSB7IU5ldFNpbVNoYXJkfSBzaGFyZFxuICogQHBhcmFtIHshTm9kZVN0eWxlQ2FsbGJhY2t9IG9uQ29tcGxldGUgLSBNZXRob2QgdGhhdCB3aWxsIGJlIGdpdmVuIHRoZVxuICogICAgICAgIGZvdW5kIGVudGl0eSwgb3IgbnVsbCBpZiBlbnRpdHkgc2VhcmNoIGZhaWxlZC5cbiAqL1xuTmV0U2ltQ2xpZW50Tm9kZS5nZXQgPSBmdW5jdGlvbiAobm9kZUlELCBzaGFyZCwgb25Db21wbGV0ZSkge1xuICBOZXRTaW1FbnRpdHkuZ2V0KE5ldFNpbUNsaWVudE5vZGUsIG5vZGVJRCwgc2hhcmQsIG9uQ29tcGxldGUpO1xufTtcbiIsIi8qKlxuICogQG92ZXJ2aWV3IEEgYmFzZSBjbGFzcyBmb3IgYWxsIHNpbXVsYXRpb24gbm9kZSBlbnRpdGllcy5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgaTE4biA9IHJlcXVpcmUoJy4vbG9jYWxlJyk7XG52YXIgTmV0U2ltRW50aXR5ID0gcmVxdWlyZSgnLi9OZXRTaW1FbnRpdHknKTtcbnZhciBOZXRTaW1XaXJlID0gcmVxdWlyZSgnLi9OZXRTaW1XaXJlJyk7XG5cbi8qKlxuICogQ2xpZW50IG1vZGVsIG9mIHNpbXVsYXRlZCBuZXR3b3JrIGVudGl0eSwgd2hpY2ggbGl2ZXNcbiAqIGluIGEgc2hhcmQgdGFibGUuXG4gKlxuICogV3JhcHMgdGhlIGVudGl0eSByb3cgd2l0aCBoZWxwZXIgbWV0aG9kcyBmb3IgZXhhbWluaW5nIGFuZCBtYWludGFpbmluZ1xuICogdGhlIGVudGl0eSBzdGF0ZSBpbiBzaGFyZWQgc3RvcmFnZS5cbiAqXG4gKiBAcGFyYW0geyFOZXRTaW1TaGFyZH0gc2hhcmRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbbm9kZVJvd10gSlNPTiByb3cgZnJvbSB0YWJsZS5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGF1Z21lbnRzIE5ldFNpbUVudGl0eVxuICovXG52YXIgTmV0U2ltTm9kZSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHNoYXJkLCBub2RlUm93KSB7XG4gIG5vZGVSb3cgPSBub2RlUm93ICE9PSB1bmRlZmluZWQgPyBub2RlUm93IDoge307XG4gIE5ldFNpbUVudGl0eS5jYWxsKHRoaXMsIHNoYXJkLCBub2RlUm93KTtcblxuICAvKipcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuZGlzcGxheU5hbWVfID0gbm9kZVJvdy5uYW1lO1xufTtcbk5ldFNpbU5vZGUuaW5oZXJpdHMoTmV0U2ltRW50aXR5KTtcblxuLyoqXG4gKiBHZXQgc2hhcmVkIHRhYmxlIGZvciBub2Rlc1xuICogQHJldHVybnMge1NoYXJlZFRhYmxlfVxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltTm9kZS5wcm90b3R5cGUuZ2V0VGFibGU9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuc2hhcmRfLm5vZGVUYWJsZTtcbn07XG5cbi8qKiBCdWlsZCB0YWJsZSByb3cgZm9yIHRoaXMgbm9kZSAqL1xuTmV0U2ltTm9kZS5wcm90b3R5cGUuYnVpbGRSb3cgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogdGhpcy5nZXROb2RlVHlwZSgpLFxuICAgIG5hbWU6IHRoaXMuZ2V0RGlzcGxheU5hbWUoKVxuICB9O1xufTtcblxuLyoqXG4gKiBHZXQgbm9kZSdzIGRpc3BsYXkgbmFtZSwgd2hpY2ggaXMgc3RvcmVkIGluIHRhYmxlLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuTmV0U2ltTm9kZS5wcm90b3R5cGUuZ2V0RGlzcGxheU5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmRpc3BsYXlOYW1lXyA/IHRoaXMuZGlzcGxheU5hbWVfIDogaTE4bi5kZWZhdWx0Tm9kZU5hbWUoKTtcbn07XG5cbi8qKlxuICogR2V0IG5vZGUncyBzaG9ydCBkaXNwbGF5IG5hbWUsIHdoaWNoIGlzIHRoZSBzYW1lIGFzIHRoZSBkaXNwbGF5IG5hbWVcbiAqIGJ1dCB0cnVuY2F0ZWQgdG8gdGhlIGZpcnN0IHdvcmQgaWYgaXQncyBvdmVyIGEgY2VydGFpbiBsZW5ndGguXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5OZXRTaW1Ob2RlLnByb3RvdHlwZS5nZXRTaG9ydERpc3BsYXlOYW1lID0gZnVuY3Rpb24gKCkge1xuICAvLyBJZiB0aGUgbmFtZSBpcyBsb25nZXIgdGhhbiB0ZW4gY2hhcmFjdGVycyAobG9uZ2VyIHRoYW4gXCJSb3V0ZXIgOTk5XCIpXG4gIC8vIHRoZW4gb25seSBzaG93IHVwIHRvIHRoZSBmaXJzdCB3aGl0ZXNwYWNlLlxuICB2YXIgc2hvcnROYW1lID0gdGhpcy5nZXREaXNwbGF5TmFtZSgpO1xuICBpZiAoc2hvcnROYW1lLmxlbmd0aCA+IDEwKSB7XG4gICAgc2hvcnROYW1lID0gc2hvcnROYW1lLnNwbGl0KC9cXHMvKVswXTtcbiAgfVxuICByZXR1cm4gc2hvcnROYW1lO1xufTtcblxuLyoqXG4gKiBHZXQgbm9kZSdzIGhvc3RuYW1lLCBhIG1vZGlmaWVkIHZlcnNpb24gb2YgaXRzIGRpc3BsYXkgbmFtZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbk5ldFNpbU5vZGUucHJvdG90eXBlLmdldEhvc3RuYW1lID0gZnVuY3Rpb24gKCkge1xuICAvLyBTdHJpcCBldmVyeXRoaW5nIHRoYXQncyBub3QgYSB3b3JkLWNoYXJhY3RlciBvciBhIGRpZ2l0IGZyb20gdGhlIGRpc3BsYXlcbiAgLy8gbmFtZSwgdGhlbiBhcHBlbmQgdGhlIG5vZGUgSUQgc28gdGhhdCBob3N0bmFtZXMgYXJlIG1vcmUgbGlrZWx5IHRvXG4gIC8vIGJlIHVuaXF1ZS5cbiAgcmV0dXJuIHRoaXMuZ2V0U2hvcnREaXNwbGF5TmFtZSgpLnJlcGxhY2UoL1teXFx3XFxkXS9nLCAnJykudG9Mb3dlckNhc2UoKSArXG4gICAgICB0aGlzLmVudGl0eUlEO1xufTtcblxuLyoqXG4gKiBHZXQgbm9kZSdzIHR5cGUuXG4gKiBAcmV0dXJucyB7Tm9kZVR5cGV9XG4gKi9cbk5ldFNpbU5vZGUucHJvdG90eXBlLmdldE5vZGVUeXBlID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ2dldE5vZGVUeXBlIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cbi8qKlxuICogR2V0IGxvY2FsaXplZCBkZXNjcmlwdGlvbiBvZiBub2RlIHN0YXR1cy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbk5ldFNpbU5vZGUucHJvdG90eXBlLmdldFN0YXR1cyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdnZXRTdGF0dXMgbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZCcpO1xufTtcblxuLyoqXG4gKiBXaGV0aGVyIG9yIG5vdCB0aGlzIG5vZGUgY2FuIGFjY2VwdCBhbnkgbW9yZSBjb25uZWN0aW9uc1xuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbk5ldFNpbU5vZGUucHJvdG90eXBlLmlzRnVsbCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdpc0Z1bGwgbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZCcpO1xufTtcblxuLyoqXG4gKiBFc3RhYmxpc2ggYSBjb25uZWN0aW9uIGJldHdlZW4gdGhpcyBub2RlIGFuZCBhbm90aGVyIG5vZGUsXG4gKiBieSBjcmVhdGluZyBhIHdpcmUgYmV0d2VlbiB0aGVtLCBhbmQgdmVyaWZ5aW5nIHRoYXQgdGhlIHJlbW90ZSBub2RlXG4gKiBjYW4gYWNjZXB0IHRoZSBjb25uZWN0aW9uLlxuICogV2hlbiBmaW5pc2hlZCwgY2FsbHMgb25Db21wbGV0ZSh7dGhlIG5ldyB3aXJlfSlcbiAqIE9uIGZhaWx1cmUsIGNhbGxzIG9uQ29tcGxldGUobnVsbClcbiAqIEBwYXJhbSB7IU5ldFNpbU5vZGV9IG90aGVyTm9kZVxuICogQHBhcmFtIHtOb2RlU3R5bGVDYWxsYmFja30gW29uQ29tcGxldGVdXG4gKi9cbk5ldFNpbU5vZGUucHJvdG90eXBlLmNvbm5lY3RUb05vZGUgPSBmdW5jdGlvbiAob3RoZXJOb2RlLCBvbkNvbXBsZXRlKSB7XG4gIG9uQ29tcGxldGUgPSBvbkNvbXBsZXRlIHx8IGZ1bmN0aW9uICgpIHt9O1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgTmV0U2ltV2lyZS5jcmVhdGUodGhpcy5zaGFyZF8sXG4gICAgICB0aGlzLm1ha2VXaXJlUm93Rm9yQ29ubmVjdGluZ1RvKG90aGVyTm9kZSksXG4gICAgICBmdW5jdGlvbiAoZXJyLCB3aXJlKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBvbkNvbXBsZXRlKGVyciwgbnVsbCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgb3RoZXJOb2RlLmFjY2VwdENvbm5lY3Rpb24oc2VsZiwgZnVuY3Rpb24gKGVyciwgaXNBY2NlcHRlZCkge1xuICAgICAgICAgIGlmIChlcnIgfHwgIWlzQWNjZXB0ZWQpIHtcbiAgICAgICAgICAgIHdpcmUuZGVzdHJveShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIG9uQ29tcGxldGUobmV3IEVycm9yKCdDb25uZWN0aW9uIHJlamVjdGVkOiAnICsgZXJyLm1lc3NhZ2UpLCBudWxsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG9uQ29tcGxldGUobnVsbCwgd2lyZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhbiBhcHByb3ByaWF0ZSBpbml0aWFsIHdpcmUgcm93IGZvciBjb25uZWN0aW5nIHRvIHRoZSBnaXZlbiBub2RlLlxuICogQHBhcmFtIHshTmV0U2ltTm9kZX0gb3RoZXJOb2RlXG4gKiBAcmV0dXJucyB7V2lyZVJvd31cbiAqL1xuTmV0U2ltTm9kZS5wcm90b3R5cGUubWFrZVdpcmVSb3dGb3JDb25uZWN0aW5nVG8gPSBmdW5jdGlvbiAob3RoZXJOb2RlKSB7XG4gIHJldHVybiB7XG4gICAgbG9jYWxOb2RlSUQ6IHRoaXMuZW50aXR5SUQsXG4gICAgcmVtb3RlTm9kZUlEOiBvdGhlck5vZGUuZW50aXR5SURcbiAgfTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdoZW4gYW5vdGhlciBub2RlIGVzdGFibGlzaGVzIGEgY29ubmVjdGlvbiB0byB0aGlzIG9uZSwgZ2l2aW5nIHRoaXNcbiAqIG5vZGUgYSBjaGFuY2UgdG8gcmVqZWN0IHRoZSBjb25uZWN0aW9uLlxuICogQHBhcmFtIHshTmV0U2ltTm9kZX0gb3RoZXJOb2RlIGF0dGVtcHRpbmcgdG8gY29ubmVjdCB0byB0aGlzIG9uZVxuICogQHBhcmFtIHshTm9kZVN0eWxlQ2FsbGJhY2t9IG9uQ29tcGxldGUgcmVzcG9uc2UgbWV0aG9kIC0gc2hvdWxkIGNhbGwgd2l0aCBUUlVFXG4gKiAgICAgICAgaWYgY29ubmVjdGlvbiBpcyBhbGxvd2VkLCBGQUxTRSBpZiBjb25uZWN0aW9uIGlzIHJlamVjdGVkLlxuICovXG5OZXRTaW1Ob2RlLnByb3RvdHlwZS5hY2NlcHRDb25uZWN0aW9uID0gZnVuY3Rpb24gKG90aGVyTm9kZSwgb25Db21wbGV0ZSkge1xuICBvbkNvbXBsZXRlKG51bGwsIHRydWUpO1xufTtcbiIsIi8qKlxuICogQG92ZXJ2aWV3IFNpbXVsYXRpb24gRW50aXR5OiBBIGNvbm5lY3Rpb24gYmV0d2VlbiB0d28gbm9kZXMgYW5kIHJlbGF0ZWRcbiAqICAgICAgICAgICBtZXRhZGF0YS5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgTmV0U2ltRW50aXR5ID0gcmVxdWlyZSgnLi9OZXRTaW1FbnRpdHknKTtcbnZhciBBcmd1bWVudFV0aWxzID0gcmVxdWlyZSgnLi9Bcmd1bWVudFV0aWxzJyk7XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gV2lyZVJvd1xuICogQHByb3BlcnR5IHshbnVtYmVyfSBsb2NhbE5vZGVJRFxuICogQHByb3BlcnR5IHshbnVtYmVyfSByZW1vdGVOb2RlSURcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBsb2NhbEFkZHJlc3NcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSByZW1vdGVBZGRyZXNzXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbG9jYWxIb3N0bmFtZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IHJlbW90ZUhvc3RuYW1lXG4gKi9cblxuLyoqXG4gKiBMb2NhbCBjb250cm9sbGVyIGZvciBhIHNpbXVsYXRlZCBjb25uZWN0aW9uIGJldHdlZW4gbm9kZXMsXG4gKiB3aGljaCBpcyBzdG9yZWQgaW4gdGhlIHdpcmUgdGFibGUgb24gdGhlIHNoYXJkLiAgVGhlIGNvbnRyb2xsZXIgY2FuXG4gKiBiZSBpbml0aWFsaXplZCB3aXRoIHRoZSBKU09OIHJvdyBmcm9tIHRoZSB0YWJsZSwgZWZmZWN0aXZlbHkgd3JhcHBpbmcgdGhhdFxuICogZGF0YSBpbiBoZWxwZnVsIG1ldGhvZHMuXG4gKlxuICogQHBhcmFtIHshTmV0U2ltU2hhcmR9IHNoYXJkIC0gVGhlIHNoYXJkIHdoZXJlIHRoaXMgd2lyZSBsaXZlcy5cbiAqIEBwYXJhbSB7V2lyZVJvd30gW3dpcmVSb3ddIC0gQSByb3cgb3V0IG9mIHRoZSBfd2lyZSB0YWJsZSBvbiB0aGUgc2hhcmQuXG4gKiAgICAgICAgSWYgcHJvdmlkZWQsIHdpbGwgaW5pdGlhbGl6ZSB0aGlzIHdpcmUgd2l0aCB0aGUgZ2l2ZW4gZGF0YS4gIElmIG5vdCxcbiAqICAgICAgICB0aGlzIHdpcmUgd2lsbCBpbml0aWFsaXplIHRvIGRlZmF1bHQgdmFsdWVzLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXVnbWVudHMgTmV0U2ltRW50aXR5XG4gKi9cbnZhciBOZXRTaW1XaXJlID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc2hhcmQsIHdpcmVSb3cpIHtcbiAgd2lyZVJvdyA9IHdpcmVSb3cgIT09IHVuZGVmaW5lZCA/IHdpcmVSb3cgOiB7fTtcbiAgTmV0U2ltRW50aXR5LmNhbGwodGhpcywgc2hhcmQsIHdpcmVSb3cpO1xuXG4gIC8qKlxuICAgKiBDb25uZWN0ZWQgbm9kZSByb3cgSURzIHdpdGhpbiB0aGUgX2xvYmJ5IHRhYmxlXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLmxvY2FsTm9kZUlEID0gd2lyZVJvdy5sb2NhbE5vZGVJRDtcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gIHRoaXMucmVtb3RlTm9kZUlEID0gd2lyZVJvdy5yZW1vdGVOb2RlSUQ7XG5cbiAgLyoqXG4gICAqIEFzc2lnbmVkIGxvY2FsIGFkZHJlc3NlcyBmb3IgdGhlIGVuZHMgb2YgdGhpcyB3aXJlLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgdGhpcy5sb2NhbEFkZHJlc3MgPSB3aXJlUm93LmxvY2FsQWRkcmVzcztcbiAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gIHRoaXMucmVtb3RlQWRkcmVzcyA9IHdpcmVSb3cucmVtb3RlQWRkcmVzcztcblxuICAvKipcbiAgICogRGlzcGxheSBob3N0bmFtZXMgZm9yIHRoZSBlbmRzIG9mIHRoaXMgd2lyZS5cbiAgICogR2VuZXJhbGx5LCBlYWNoIGVuZHBvaW50IHNob3VsZCBzZXQgaXRzIG93biBob3N0bmFtZS5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHRoaXMubG9jYWxIb3N0bmFtZSA9IHdpcmVSb3cubG9jYWxIb3N0bmFtZTtcbiAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gIHRoaXMucmVtb3RlSG9zdG5hbWUgPSB3aXJlUm93LnJlbW90ZUhvc3RuYW1lO1xufTtcbk5ldFNpbVdpcmUuaW5oZXJpdHMoTmV0U2ltRW50aXR5KTtcblxuLyoqXG4gKiBTdGF0aWMgYXN5bmMgY3JlYXRpb24gbWV0aG9kLiAgU2VlIE5ldFNpbUVudGl0eS5jcmVhdGUoKS5cbiAqIEBwYXJhbSB7IU5ldFNpbVNoYXJkfSBzaGFyZFxuICogQHBhcmFtIHshV2lyZVJvd30gaW5pdGlhbFJvd1xuICogQHBhcmFtIHshTm9kZVN0eWxlQ2FsbGJhY2t9IG9uQ29tcGxldGUgLSBNZXRob2QgdGhhdCB3aWxsIGJlIGdpdmVuIHRoZVxuICogICAgICAgIGNyZWF0ZWQgZW50aXR5LCBvciBudWxsIGlmIGVudGl0eSBjcmVhdGlvbiBmYWlsZWQuXG4gKi9cbk5ldFNpbVdpcmUuY3JlYXRlID0gZnVuY3Rpb24gKHNoYXJkLCBpbml0aWFsUm93LCBvbkNvbXBsZXRlKSB7XG4gIEFyZ3VtZW50VXRpbHMudmFsaWRhdGVSZXF1aXJlZChpbml0aWFsUm93LCBcImluaXRpYWxSb3dcIik7XG4gIEFyZ3VtZW50VXRpbHMudmFsaWRhdGVSZXF1aXJlZChpbml0aWFsUm93LmxvY2FsTm9kZUlELCBcImxvY2FsTm9kZUlEXCIsXG4gICAgICBBcmd1bWVudFV0aWxzLmlzUG9zaXRpdmVOb25pbmZpbml0ZU51bWJlcik7XG4gIEFyZ3VtZW50VXRpbHMudmFsaWRhdGVSZXF1aXJlZChpbml0aWFsUm93LnJlbW90ZU5vZGVJRCwgXCJyZW1vdGVOb2RlSURcIixcbiAgICAgIEFyZ3VtZW50VXRpbHMuaXNQb3NpdGl2ZU5vbmluZmluaXRlTnVtYmVyKTtcbiAgdmFyIGVudGl0eSA9IG5ldyBOZXRTaW1XaXJlKHNoYXJkLCBpbml0aWFsUm93KTtcbiAgZW50aXR5LmdldFRhYmxlKCkuY3JlYXRlKGVudGl0eS5idWlsZFJvdygpLCBmdW5jdGlvbiAoZXJyLCByb3cpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBvbkNvbXBsZXRlKGVyciwgbnVsbCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG9uQ29tcGxldGUobnVsbCwgbmV3IE5ldFNpbVdpcmUoc2hhcmQsIHJvdykpO1xuICB9KTtcbn07XG5cbi8qKlxuICogSGVscGVyIHRoYXQgZ2V0cyB0aGUgd2lyZXMgdGFibGUgZm9yIHRoZSBjb25maWd1cmVkIHNoYXJkLlxuICogQHJldHVybnMge05ldFNpbVRhYmxlfVxuICovXG5OZXRTaW1XaXJlLnByb3RvdHlwZS5nZXRUYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuc2hhcmRfLndpcmVUYWJsZTtcbn07XG5cbi8qKlxuICogQnVpbGQgb3duIHJvdyBmb3IgdGhlIHdpcmUgdGFibGVcbiAqIEByZXR1cm5zIHtXaXJlUm93fVxuICovXG5OZXRTaW1XaXJlLnByb3RvdHlwZS5idWlsZFJvdyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICBsb2NhbE5vZGVJRDogdGhpcy5sb2NhbE5vZGVJRCxcbiAgICByZW1vdGVOb2RlSUQ6IHRoaXMucmVtb3RlTm9kZUlELFxuICAgIGxvY2FsQWRkcmVzczogdGhpcy5sb2NhbEFkZHJlc3MsXG4gICAgcmVtb3RlQWRkcmVzczogdGhpcy5yZW1vdGVBZGRyZXNzLFxuICAgIGxvY2FsSG9zdG5hbWU6IHRoaXMubG9jYWxIb3N0bmFtZSxcbiAgICByZW1vdGVIb3N0bmFtZTogdGhpcy5yZW1vdGVIb3N0bmFtZVxuICB9O1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge01lc3NhZ2VSb3d9IG1lc3NhZ2VSb3dcbiAqIEByZXR1cm5zIHtib29sZWFufSBUUlVFIGlmIHRoZSBnaXZlbiBtZXNzYWdlIGlzIHRyYXZlbGxpbmcgYmV0d2VlbiB0aGUgbm9kZXNcbiAqICAgICAgICAgIHRoYXQgdGhpcyB3aXJlIGNvbm5lY3RzLCBpbiB0aGUgd2lyZSdzIGRpcmVjdGlvbi5cbiAqL1xuTmV0U2ltV2lyZS5wcm90b3R5cGUuaXNNZXNzYWdlUm93T25EdXBsZXhXaXJlID0gZnVuY3Rpb24gKG1lc3NhZ2VSb3cpIHtcbiAgcmV0dXJuIHRoaXMubG9jYWxOb2RlSUQgPT09IG1lc3NhZ2VSb3cuZnJvbU5vZGVJRCAmJlxuICAgICAgdGhpcy5yZW1vdGVOb2RlSUQgPT09IG1lc3NhZ2VSb3cudG9Ob2RlSUQ7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7TWVzc2FnZVJvd30gbWVzc2FnZVJvd1xuICogQHJldHVybnMge2Jvb2xlYW59IFRSVUUgaWYgdGhlIGdpdmVuIG1lc3NhZ2UgaXMgdHJhdmVsbGluZyBiZXR3ZWVuIHRoZSBub2Rlc1xuICogICAgICAgICAgdGhhdCB0aGlzIHdpcmUgY29ubmVjdHMsIGluIGVpdGhlciBkaXJlY3Rpb24uXG4gKi9cbk5ldFNpbVdpcmUucHJvdG90eXBlLmlzTWVzc2FnZVJvd09uU2ltcGxleFdpcmUgPSBmdW5jdGlvbiAobWVzc2FnZVJvdykge1xuICB2YXIgb25XaXJlID0gdGhpcy5pc01lc3NhZ2VSb3dPbkR1cGxleFdpcmUobWVzc2FnZVJvdyk7XG4gIHZhciBvblJldmVyc2VXaXJlID0gdGhpcy5sb2NhbE5vZGVJRCA9PT0gbWVzc2FnZVJvdy50b05vZGVJRCAmJlxuICAgICAgdGhpcy5yZW1vdGVOb2RlSUQgPT09IG1lc3NhZ2VSb3cuZnJvbU5vZGVJRDtcbiAgcmV0dXJuIG9uV2lyZSB8fCBvblJldmVyc2VXaXJlO1xufTtcbiIsIi8qKlxuICogQG92ZXJ2aWV3IGJhc2UgY2xhc3MgZm9yIGFsbCBzaW11bGF0aW9uIGVudGl0aWVzLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDbGllbnQgbW9kZWwgb2Ygc2ltdWxhdGVkIG5ldHdvcmsgZW50aXR5LCB3aGljaCBsaXZlcyBpbiBhIHNoYXJkIHRhYmxlLlxuICpcbiAqIFdyYXBzIHRoZSBlbnRpdHkgcm93IHdpdGggaGVscGVyIG1ldGhvZHMgZm9yIGV4YW1pbmluZyBhbmQgbWFpbnRhaW5pbmdcbiAqIHRoZSBlbnRpdHkgc3RhdGUgaW4gc2hhcmVkIHN0b3JhZ2UuXG4gKlxuICogQHBhcmFtIHshTmV0U2ltU2hhcmR9IHNoYXJkXG4gKiBAcGFyYW0ge09iamVjdH0gW2VudGl0eVJvd10gSlNPTiByb3cgZnJvbSB0YWJsZS5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgTmV0U2ltRW50aXR5ID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc2hhcmQsIGVudGl0eVJvdykge1xuICBpZiAoZW50aXR5Um93ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbnRpdHlSb3cgPSB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7TmV0U2ltU2hhcmR9XG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHRoaXMuc2hhcmRfID0gc2hhcmQ7XG5cbiAgLyoqXG4gICAqIE5vZGUncyByb3cgSUQgd2l0aGluIHRoZSBfbG9iYnkgdGFibGUuICBVbmlxdWUgd2l0aGluIGluc3RhbmNlLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5lbnRpdHlJRCA9IGVudGl0eVJvdy5pZDtcblxuICAvKipcbiAgICogTm9kZSdzIFVVSUQgYXNzaWduZWQgd2hlbiBpdCB3YXMgaW5pdGlhbGx5IGluc2VydGVkIGludG8gdGhlIHRhYmxlLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgdGhpcy51dWlkID0gZW50aXR5Um93LnV1aWQ7XG59O1xuXG4vKipcbiAqIFN0YXRpYyBhc3luYyBjcmVhdGlvbiBtZXRob2QuICBDcmVhdGVzIGEgbmV3IGVudGl0eSBvbiB0aGUgZ2l2ZW4gc2hhcmQsXG4gKiBhbmQgdGhlbiBjYWxscyB0aGUgY2FsbGJhY2sgd2l0aCBhIGxvY2FsIGNvbnRyb2xsZXIgZm9yIHRoZSBuZXcgZW50aXR5LlxuICogQHBhcmFtIHshZnVuY3Rpb259IEVudGl0eVR5cGUgLSBUaGUgY29uc3RydWN0b3IgZm9yIHRoZSBlbnRpdHkgdHlwZSB5b3Ugd2FudFxuICogICAgICAgIHRvIGNyZWF0ZS5cbiAqIEBwYXJhbSB7IU5ldFNpbVNoYXJkfSBzaGFyZFxuICogQHBhcmFtIHshTm9kZVN0eWxlQ2FsbGJhY2t9IG9uQ29tcGxldGUgLSBNZXRob2QgdGhhdCB3aWxsIGJlIGdpdmVuIHRoZVxuICogICAgICAgIGNyZWF0ZWQgZW50aXR5LCBvciBudWxsIGlmIGVudGl0eSBjcmVhdGlvbiBmYWlsZWQuXG4gKi9cbk5ldFNpbUVudGl0eS5jcmVhdGUgPSBmdW5jdGlvbiAoRW50aXR5VHlwZSwgc2hhcmQsIG9uQ29tcGxldGUpIHtcbiAgdmFyIGVudGl0eSA9IG5ldyBFbnRpdHlUeXBlKHNoYXJkKTtcbiAgZW50aXR5LmdldFRhYmxlKCkuY3JlYXRlKGVudGl0eS5idWlsZFJvdygpLCBmdW5jdGlvbiAoZXJyLCByb3cpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBvbkNvbXBsZXRlKGVyciwgbnVsbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uQ29tcGxldGUobnVsbCwgbmV3IEVudGl0eVR5cGUoc2hhcmQsIHJvdykpO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIFN0YXRpYyBhc3luYyByZXRyaWV2YWwgbWV0aG9kLiAgU2VhcmNoZXMgZm9yIGEgbmV3IGVudGl0eSBvbiB0aGUgZ2l2ZW5cbiAqIHNoYXJkLCBhbmQgdGhlbiBjYWxscyB0aGUgY2FsbGJhY2sgd2l0aCBhIGxvY2FsIGNvbnRyb2xsZXIgZm9yIHRoZVxuICogZm91bmQgZW50aXR5LlxuICogQHBhcmFtIHshZnVuY3Rpb259IEVudGl0eVR5cGUgLSBUaGUgY29uc3RydWN0b3IgZm9yIHRoZSBlbnRpdHkgdHlwZSB5b3Ugd2FudFxuICogICAgICAgIHRvIGZpbmQuXG4gKiBAcGFyYW0geyFudW1iZXJ9IGVudGl0eUlEIC0gVGhlIHJvdyBJRCBmb3IgdGhlIGVudGl0eSB5b3UnZCBsaWtlIHRvIGZpbmQuXG4gKiBAcGFyYW0geyFOZXRTaW1TaGFyZH0gc2hhcmRcbiAqIEBwYXJhbSB7IU5vZGVTdHlsZUNhbGxiYWNrfSBvbkNvbXBsZXRlIC0gTWV0aG9kIHRoYXQgd2lsbCBiZSBnaXZlbiB0aGVcbiAqICAgICAgICBmb3VuZCBlbnRpdHksIG9yIG51bGwgaWYgZW50aXR5IHNlYXJjaCBmYWlsZWQuXG4gKi9cbk5ldFNpbUVudGl0eS5nZXQgPSBmdW5jdGlvbiAoRW50aXR5VHlwZSwgZW50aXR5SUQsIHNoYXJkLCBvbkNvbXBsZXRlKSB7XG4gIHZhciBlbnRpdHkgPSBuZXcgRW50aXR5VHlwZShzaGFyZCk7XG4gIGVudGl0eS5nZXRUYWJsZSgpLnJlYWQoZW50aXR5SUQsIGZ1bmN0aW9uIChlcnIsIHJvdykge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIG9uQ29tcGxldGUoZXJyLCBudWxsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb25Db21wbGV0ZShlcnIsIG5ldyBFbnRpdHlUeXBlKHNoYXJkLCByb3cpKTtcbiAgICB9XG4gIH0pO1xufTtcblxuLyoqXG4gKiBQdXNoIGVudGl0eSBzdGF0ZSBpbnRvIHJlbW90ZSBzdG9yYWdlLlxuICogQHBhcmFtIHtOb2RlU3R5bGVDYWxsYmFja30gW29uQ29tcGxldGVdIC0gT3B0aW9uYWwgY29tcGxldGlvbiBjYWxsYmFjay5cbiAqL1xuTmV0U2ltRW50aXR5LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAob25Db21wbGV0ZSkge1xuICBvbkNvbXBsZXRlID0gb25Db21wbGV0ZSB8fCBmdW5jdGlvbiAoKSB7fTtcblxuICB0aGlzLmdldFRhYmxlKCkudXBkYXRlKHRoaXMuZW50aXR5SUQsIHRoaXMuYnVpbGRSb3coKSwgb25Db21wbGV0ZSk7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBlbnRpdHkgZnJvbSByZW1vdGUgc3RvcmFnZS5cbiAqIEBwYXJhbSB7Tm9kZVN0eWxlQ2FsbGJhY2t9IFtvbkNvbXBsZXRlXSAtIE9wdGlvbmFsIGNvbXBsZXRpb24gY2FsbGJhY2tcbiAqL1xuTmV0U2ltRW50aXR5LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKG9uQ29tcGxldGUpIHtcbiAgb25Db21wbGV0ZSA9IG9uQ29tcGxldGUgfHwgZnVuY3Rpb24gKCkge307XG5cbiAgdGhpcy5nZXRUYWJsZSgpLmRlbGV0ZSh0aGlzLmVudGl0eUlELCBvbkNvbXBsZXRlKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGVudGl0eSBmcm9tIHJlbW90ZSBzdG9yYWdlLCB1c2luZyBhIHN5bmNocm9ub3VzIGNhbGwuXG4gKiBGb3IgdXNlIHdoZW4gbmF2aWdhdGluZyBhd2F5IGZyb20gdGhlIHBhZ2U7IG90aGVyd2lzZSwgYXN5bmMgdmVyc2lvblxuICogaXMgcHJlZmVycmVkLlxuICogQHJldHVybnMge0Vycm9yfG51bGx9IGVycm9yIGlmIGVudGl0eSBkZWxldGUgZmFpbHNcbiAqL1xuTmV0U2ltRW50aXR5LnByb3RvdHlwZS5zeW5jaHJvbm91c0Rlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmdldFRhYmxlKCkuc3luY2hyb25vdXNEZWxldGUodGhpcy5lbnRpdHlJRCk7XG59O1xuXG4vKiogR2V0IHN0b3JhZ2UgdGFibGUgZm9yIHRoaXMgZW50aXR5IHR5cGUuICovXG5OZXRTaW1FbnRpdHkucHJvdG90eXBlLmdldFRhYmxlID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaGlzIG1ldGhvZCBzaG91bGQgYmUgaW1wbGVtZW50ZWQgYnkgYSBjaGlsZCBjbGFzcy5cbiAgdGhyb3cgbmV3IEVycm9yKCdNZXRob2QgZ2V0VGFibGUgaXMgbm90IGltcGxlbWVudGVkLicpO1xufTtcblxuLyoqIENvbnN0cnVjdCB0YWJsZSByb3cgZm9yIHRoaXMgZW50aXR5LiAqL1xuTmV0U2ltRW50aXR5LnByb3RvdHlwZS5idWlsZFJvdyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHt9O1xufTtcblxuLyoqXG4gKiBEZXN0cm95cyBhbGwgcHJvdmlkZWQgZW50aXRpZXMgKGZyb20gcmVtb3RlIHN0b3JhZ2UpIGFzeW5jaHJvbm91c2x5LCBhbmRcbiAqIGNhbGxzIG9uQ29tcGxldGUgd2hlbiBhbGwgZW50aXRpZXMgaGF2ZSBiZWVuIGRlc3Ryb3llZCBhbmQvb3IgYW4gZXJyb3Igb2NjdXJzLlxuICogQHBhcmFtIHtOZXRTaW1FbnRpdHlbXX0gZW50aXRpZXNcbiAqIEBwYXJhbSB7IU5vZGVTdHlsZUNhbGxiYWNrfSBvbkNvbXBsZXRlXG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgYWxsIHBhc3NlZCBlbnRpdGllcyBkbyBub3QgYmVsb25nIHRvIHRoZSBzYW1lIHRhYmxlLlxuICovXG5OZXRTaW1FbnRpdHkuZGVzdHJveUVudGl0aWVzID0gZnVuY3Rpb24gKGVudGl0aWVzLCBvbkNvbXBsZXRlKSB7XG4gIGlmIChlbnRpdGllcy5sZW5ndGggPT09IDApIHtcbiAgICBvbkNvbXBsZXRlKG51bGwsIHRydWUpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB0YWJsZSA9IGVudGl0aWVzWzBdLmdldFRhYmxlKCk7XG4gIHZhciBlbnRpdHlJRHMgPSBlbnRpdGllcy5tYXAoZnVuY3Rpb24gKGVudGl0eSkge1xuICAgIGlmIChlbnRpdHkuZ2V0VGFibGUoKSAhPT0gdGFibGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImRlc3Ryb3lFbnRpdGllcyByZXF1aXJlcyBhbGwgZW50aXRpZXMgdG8gYmUgaW4gdGhlIHNhbWUgdGFibGVcIik7XG4gICAgfVxuICAgIHJldHVybiBlbnRpdHkuZW50aXR5SUQ7XG4gIH0pO1xuXG4gIHRhYmxlLmRlbGV0ZU1hbnkoZW50aXR5SURzLCBvbkNvbXBsZXRlKTtcbn07XG4iLCIvKipcbiAqIEBvdmVydmlldyBVSSBzbGlkZXIgdXNlZCB0byBjaGFuZ2UgdGhlIGxvY2FsIGRldmljZSdzIGNodW5rIHNpemUsIHdoaWNoXG4gKiAgICAgICAgICAgaXMgdXNlZCB3aGVuIGludGVycHJldGluZyBiaW5hcnkgdG8gb3RoZXIgZm9ybWF0cy5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpMThuID0gcmVxdWlyZSgnLi9sb2NhbGUnKTtcbnZhciBOZXRTaW1TbGlkZXIgPSByZXF1aXJlKCcuL05ldFNpbVNsaWRlcicpO1xuXG4vKipcbiAqIEdlbmVyYXRvciBhbmQgY29udHJvbGxlciBmb3IgY2h1bmsgc2l6ZSBzbGlkZXIvc2VsZWN0b3JcbiAqIEBwYXJhbSB7alF1ZXJ5fSByb290RGl2XG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjaHVua1NpemVDaGFuZ2VDYWxsYmFja1xuICogQGNvbnN0cnVjdG9yXG4gKiBAYXVnbWVudHMgTmV0U2ltU2xpZGVyXG4gKi9cbnZhciBOZXRTaW1DaHVua1NpemVDb250cm9sID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocm9vdERpdixcbiAgICBjaHVua1NpemVDaGFuZ2VDYWxsYmFjaykge1xuICBOZXRTaW1TbGlkZXIuY2FsbCh0aGlzLCByb290RGl2LCB7XG4gICAgb25DaGFuZ2U6IGNodW5rU2l6ZUNoYW5nZUNhbGxiYWNrLFxuICAgIG1pbjogMSxcbiAgICBtYXg6IDMyXG4gIH0pO1xuXG4gIC8vIEF1dG8tcmVuZGVyLCB1bmxpa2Ugb3VyIHBhcmVudCBjbGFzc1xuICB0aGlzLnJlbmRlcigpO1xufTtcbk5ldFNpbUNodW5rU2l6ZUNvbnRyb2wuaW5oZXJpdHMoTmV0U2ltU2xpZGVyKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBleHRlcm5hbC1mYWNpbmcgbnVtZXJpYyB2YWx1ZSBpbnRvIGEgbG9jYWxpemVkIHN0cmluZ1xuICogcmVwcmVzZW50YXRpb24gb2YgdGhhdCB2YWx1ZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBudW1lcmljIHZhbHVlIG9mIHRoZSBjb250cm9sXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAtIGxvY2FsaXplZCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdmFsdWVcbiAqIEBvdmVycmlkZVxuICovXG5OZXRTaW1DaHVua1NpemVDb250cm9sLnByb3RvdHlwZS52YWx1ZVRvTGFiZWwgPSBmdW5jdGlvbiAodmFsKSB7XG4gIHJldHVybiBpMThuLm51bUJpdHNQZXJDaHVuayh7XG4gICAgbnVtQml0czogdmFsXG4gIH0pO1xufTtcblxuLyoqXG4gKiBBbHRlcm5hdGUgbGFiZWwgY29udmVydGVyLCB1c2VkIGZvciBzbGlkZXIgZW5kIGxhYmVscy5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBudW1lcmljIHZhbHVlIG9mIHRoZSBjb250cm9sXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAtIGxvY2FsaXplZCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdmFsdWVcbiAqIEBvdmVycmlkZVxuICovXG5OZXRTaW1DaHVua1NpemVDb250cm9sLnByb3RvdHlwZS52YWx1ZVRvU2hvcnRMYWJlbCA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuIHZhbC50b1N0cmluZygpO1xufTtcbiIsIi8qKlxuICogQG92ZXJ2aWV3IFVJIHNsaWRlciB1c2VkIHRvIGNoYW5nZSB0aGUgbG9jYWwgZGV2aWNlJ3MgYml0cmF0ZS5cbiAqICAgICAgICAgICBEaWZmZXJzIGZyb20gdGhlIHB1bHNlIHJhdGUgc2xpZGVyIGluIHNjYWxlIGFuZCB1bml0cy5cbiAqIEBzZWUgTmV0U2ltUHVsc2VSYXRlQ29udHJvbFxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuLy8gVXRpbHMgcmVxdWlyZWQgb25seSBmb3IgRnVuY3Rpb24ucHJvdG90eXBlLmluaGVyaXRzKClcbnJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgTmV0U2ltVXRpbHMgPSByZXF1aXJlKCcuL05ldFNpbVV0aWxzJyk7XG52YXIgTmV0U2ltU2xpZGVyID0gcmVxdWlyZSgnLi9OZXRTaW1TbGlkZXInKTtcblxuLyoqXG4gKiBHZW5lcmF0b3IgYW5kIGNvbnRyb2xsZXIgZm9yIHBhY2tldCBzaXplIHNsaWRlci9zZWxlY3RvclxuICogQHBhcmFtIHtqUXVlcnl9IHJvb3REaXZcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbml0aWFsVmFsdWUgLSBpbiBiaXRzIHBlciBzZWNvbmRcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHNsaWRlckNoYW5nZUNhbGxiYWNrXG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIE5ldFNpbUJpdFJhdGVDb250cm9sID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocm9vdERpdiwgaW5pdGlhbFZhbHVlLFxuICAgIHNsaWRlckNoYW5nZUNhbGxiYWNrKSB7XG4gIE5ldFNpbVNsaWRlci5jYWxsKHRoaXMsIHJvb3REaXYsIHtcbiAgICBvbkNoYW5nZTogc2xpZGVyQ2hhbmdlQ2FsbGJhY2ssXG4gICAgdmFsdWU6IGluaXRpYWxWYWx1ZSxcbiAgICBtaW46IDEsXG4gICAgbWF4OiAyMCxcbiAgICB1cHBlckJvdW5kSW5maW5pdGU6IHRydWVcbiAgfSk7XG5cbiAgLy8gQXV0by1yZW5kZXIsIHVubGlrZSBvdXIgYmFzZSBjbGFzc1xuICB0aGlzLnJlbmRlcigpO1xufTtcbk5ldFNpbUJpdFJhdGVDb250cm9sLmluaGVyaXRzKE5ldFNpbVNsaWRlcik7XG5cbi8qKlxuICogQ29udmVydHMgYSBudW1lcmljIHJhdGUgdmFsdWUgKGluIGJpdHMgcGVycyBzZWNvbmQpIGludG8gYVxuICogbG9jYWxpemVkIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGF0IHZhbHVlLlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbCAtIG51bWVyaWMgdmFsdWUgb2YgdGhlIGNvbnRyb2xcbiAqIEByZXR1cm5zIHtzdHJpbmd9IC0gbG9jYWxpemVkIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB2YWx1ZVxuICogQG92ZXJyaWRlXG4gKi9cbk5ldFNpbUJpdFJhdGVDb250cm9sLnByb3RvdHlwZS52YWx1ZVRvTGFiZWwgPSBmdW5jdGlvbiAodmFsKSB7XG4gIHJldHVybiBOZXRTaW1VdGlscy5iaXRyYXRlVG9Mb2NhbGl6ZWRSb3VuZGVkQml0cmF0ZSh2YWwpO1xufTtcbiIsIi8qKlxuICogQG92ZXJ2aWV3IFVJIGNvbXBvbmVudCwgYSBsb2cgcGFuZWwgKHVzZWQgYXMgXCJTZW50IEJpdHNcIiBhbmQgXCJSZWNlaXZlZCBCaXRzXCIpXG4gKiAgICAgICAgICAgdGhhdCBpcyB1c2VkIGluIHRoZSBzaW5nbGUtYml0LXNlbmRpbmcgY29uZmlndXJhdGlvbnMgb2YgdGhlIHNpbXVsYXRvci5cbiAqXG4gKiBAc2VlIElOZXRTaW1Mb2dQYW5lbCBmb3IgdGhlIGludGVyZmFjZSBpbXBsZW1lbnRlZCBoZXJlLlxuICogQHNlZSBOZXRTaW1Mb2dQYW5lbCBmb3IgdGhlIGNvbXBvbmVudCB1c2VkIGluIHBhY2tldC1zZW5kaW5nIG1vZGUuXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCcuLi91dGlscycpOyAvLyBGb3IgRnVuY3Rpb24ucHJvdG90eXBlLmluaGVyaXRzKClcbnZhciBpMThuID0gcmVxdWlyZSgnLi9sb2NhbGUnKTtcbnZhciBtYXJrdXAgPSByZXF1aXJlKCcuL05ldFNpbUJpdExvZ1BhbmVsLmh0bWwuZWpzJyk7XG52YXIgTmV0U2ltUGFuZWwgPSByZXF1aXJlKCcuL05ldFNpbVBhbmVsJyk7XG52YXIgTmV0U2ltRW5jb2RpbmdDb250cm9sID0gcmVxdWlyZSgnLi9OZXRTaW1FbmNvZGluZ0NvbnRyb2wnKTtcbnZhciBOZXRTaW1HbG9iYWxzID0gcmVxdWlyZSgnLi9OZXRTaW1HbG9iYWxzJyk7XG5cbnZhciBsb2dnZXIgPSByZXF1aXJlKCcuL05ldFNpbUxvZ2dlcicpLmdldFNpbmdsZXRvbigpO1xuXG4vKipcbiAqIEdlbmVyYXRvciBhbmQgY29udHJvbGxlciBmb3IgYml0LWxvZywgd2hpY2ggcmVjZWl2ZXMgYml0cyBvbmUgYXQgYSB0aW1lLlxuICogQHBhcmFtIHtqUXVlcnl9IHJvb3REaXZcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5sb2dUaXRsZVxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5pc01pbmltaXplZF0gZGVmYXVsdHMgdG8gRkFMU0VcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuc2hvd1JlYWRXaXJlQnV0dG9uXSBkZWZhdWx0cyB0byBGQUxTRVxuICogQHBhcmFtIHtOZXRTaW19IG9wdGlvbnMubmV0c2ltXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhdWdtZW50cyBOZXRTaW1QYW5lbFxuICogQGltcGxlbWVudHMgSU5ldFNpbUxvZ1BhbmVsXG4gKi9cbnZhciBOZXRTaW1CaXRMb2dQYW5lbCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJvb3REaXYsIG9wdGlvbnMpIHtcbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IGJpbmFyeSBjb250ZW50cyBvZiB0aGUgbG9nIHBhbmVsXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmJpbmFyeV8gPSAnJztcblxuICAvKipcbiAgICogQSBtZXNzYWdlIGVuY29kaW5nIChkaXNwbGF5KSBzZXR0aW5nLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5lbmNvZGluZ3NfID0gW107XG5cbiAgLyoqXG4gICAqIEN1cnJlbnQgY2h1bmsgc2l6ZSAoYnl0ZXNpemUpIGZvciBpbnRlcnByZXRpbmcgYmluYXJ5IGluIHRoZSBsb2cuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmNodW5rU2l6ZV8gPSA4O1xuXG4gIC8qKlxuICAgKiBMb2NhbGl6ZWQgcGFuZWwgdGl0bGVcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubG9nVGl0bGVfID0gb3B0aW9ucy5sb2dUaXRsZTtcblxuICAvKipcbiAgICogUmVmZXJlbmNlIHRvIHRoZSB0b3AtbGV2ZWwgTmV0U2ltIGNvbnRyb2xsZXIgZm9yIHJlYWRpbmcgYml0cyBhbmRcbiAgICogdHJpZ2dlcmluZyBhbmltYXRpb25zLlxuICAgKiBAdHlwZSB7TmV0U2ltfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5uZXRzaW1fID0gb3B0aW9ucy5uZXRzaW07XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhpcyBsb2cgc2hvdWxkIGhhdmUgYSBcIlJlYWQgV2lyZVwiIGJ1dHRvbi5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnNob3dSZWFkV2lyZUJ1dHRvbl8gPSBvcHRpb25zLnNob3dSZWFkV2lyZUJ1dHRvbjtcblxuICAvKipcbiAgICogSG93IHRhbGwgdGhlIG92ZXJhbGwgcGFuZWwgc2hvdWxkIGJlIHdoZW4gaXQncyBvcGVuIChpbiBwaXhlbHMpLlxuICAgKiBTZXQgYnkgYSBkeW5hbWljIHJlc2l6ZSBzeXN0ZW0uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLm9wZW5IZWlnaHRfID0gMDtcblxuICAvLyBJbml0aWFsIHJlbmRlclxuICBOZXRTaW1QYW5lbC5jYWxsKHRoaXMsIHJvb3REaXYsIHtcbiAgICBjbGFzc05hbWU6ICduZXRzaW0tbG9nLXBhbmVsJyxcbiAgICBwYW5lbFRpdGxlOiBvcHRpb25zLmxvZ1RpdGxlLFxuICAgIGJlZ2luTWluaW1pemVkOiBvcHRpb25zLmlzTWluaW1pemVkXG4gIH0pO1xufTtcbk5ldFNpbUJpdExvZ1BhbmVsLmluaGVyaXRzKE5ldFNpbVBhbmVsKTtcblxuTmV0U2ltQml0TG9nUGFuZWwucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gQ3JlYXRlIGJvaWxlcnBsYXRlIHBhbmVsIG1hcmt1cFxuICBOZXRTaW1CaXRMb2dQYW5lbC5zdXBlclByb3RvdHlwZS5yZW5kZXIuY2FsbCh0aGlzKTtcblxuICAvLyBBZGQgb3VyIG93biBjb250ZW50IG1hcmt1cFxuICB2YXIgbmV3TWFya3VwID0gJChtYXJrdXAoe1xuICAgIGJpbmFyeTogdGhpcy5iaW5hcnlfLFxuICAgIGVuYWJsZWRFbmNvZGluZ3M6IHRoaXMuZW5jb2RpbmdzXyxcbiAgICBjaHVua1NpemU6IHRoaXMuY2h1bmtTaXplXyxcbiAgICBzaG93UmVhZFdpcmVCdXR0b246IHRoaXMuc2hvd1JlYWRXaXJlQnV0dG9uX1xuICB9KSk7XG4gIHRoaXMuZ2V0Qm9keSgpLmh0bWwobmV3TWFya3VwKTtcbiAgTmV0U2ltRW5jb2RpbmdDb250cm9sLmhpZGVSb3dzQnlFbmNvZGluZyh0aGlzLmdldEJvZHkoKSwgdGhpcy5lbmNvZGluZ3NfKTtcblxuXG4gIHRoaXMuZ2V0Qm9keSgpLmZpbmQoJyNyZWFkLXdpcmUtYnV0dG9uJylcbiAgICAgIC5jbGljayh0aGlzLm9uUmVjZWl2ZUJ1dHRvblByZXNzXy5iaW5kKHRoaXMpKTtcblxuICAvLyBBZGQgYSBjbGVhciBidXR0b24gdG8gdGhlIHBhbmVsIGhlYWRlclxuICB0aGlzLmFkZEJ1dHRvbihpMThuLmNsZWFyKCksIHRoaXMub25DbGVhckJ1dHRvblByZXNzXy5iaW5kKHRoaXMpKTtcblxuICAvLyBTbmFwIGJhY2sgdG8gdGhlIGR5bmFtaWMgc2l6ZSB3ZSd2ZSBiZWVuIGdpdmVuLlxuICB0aGlzLnNpemVUb09wZW5IZWlnaHRfKCk7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbGwgcGFja2V0cyBmcm9tIHRoZSBsb2csIHJlc2V0dGluZyBpdHMgc3RhdGUuXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1CaXRMb2dQYW5lbC5wcm90b3R5cGUub25DbGVhckJ1dHRvblByZXNzXyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5iaW5hcnlfID0gJyc7XG4gIHRoaXMucmVuZGVyKCk7XG59O1xuXG4vKipcbiAqIEFzeW5jaHJvbm91c2x5IGZldGNoIHRoZSB3aXJlIHN0YXRlIGZyb20gcmVtb3RlIHN0b3JhZ2UsIGFuZCBsb2cgaXQuXG4gKiBAcGFyYW0ge0V2ZW50fSBqUXVlcnlFdmVudFxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltQml0TG9nUGFuZWwucHJvdG90eXBlLm9uUmVjZWl2ZUJ1dHRvblByZXNzXyA9IGZ1bmN0aW9uIChqUXVlcnlFdmVudCkge1xuICB2YXIgdGhpc0J1dHRvbiA9ICQoalF1ZXJ5RXZlbnQudGFyZ2V0KTtcbiAgaWYgKHRoaXNCdXR0b24uaXMoJ1tkaXNhYmxlZF0nKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXNCdXR0b24uYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgdGhpcy5uZXRzaW1fLnJlY2VpdmVCaXQoZnVuY3Rpb24gKGVyciwgbWVzc2FnZSkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGxvZ2dlci53YXJuKFwiRXJyb3IgcmVhZGluZyB3aXJlIHN0YXRlOiBcIiArIGVyci5tZXNzYWdlKTtcbiAgICAgIHRoaXNCdXR0b24ucmVtb3ZlQXR0cignZGlzYWJsZWQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBBIHN1Y2Nlc3NmdWwgZmV0Y2ggd2l0aCBhIG51bGwgbWVzc2FnZSBtZWFucyB0aGVyZSdzIG5vdGhpbmdcbiAgICAvLyBvbiB0aGUgd2lyZS4gIFdlIHNob3VsZCBsb2cgaXRzIGRlZmF1bHQgc3RhdGU6IG9mZi96ZXJvXG4gICAgdmFyIHJlY2VpdmVkQml0ID0gJzAnO1xuICAgIGlmIChtZXNzYWdlKSB7XG4gICAgICByZWNlaXZlZEJpdCA9IG1lc3NhZ2UucGF5bG9hZDtcbiAgICB9XG5cbiAgICB0aGlzLmxvZyhyZWNlaXZlZEJpdCk7XG4gICAgdGhpcy5uZXRzaW1fLmFuaW1hdGVSZWFkV2lyZVN0YXRlKHJlY2VpdmVkQml0KTtcbiAgICB0aGlzQnV0dG9uLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJyk7XG4gIH0uYmluZCh0aGlzKSk7XG59O1xuXG4vKipcbiAqIFB1dCBhIG1lc3NhZ2UgaW50byB0aGUgbG9nLlxuICogQHBhcmFtIHtzdHJpbmd9IGJpbmFyeUJpdFxuICovXG5OZXRTaW1CaXRMb2dQYW5lbC5wcm90b3R5cGUubG9nID0gZnVuY3Rpb24gKGJpbmFyeUJpdCkge1xuICB0aGlzLmJpbmFyeV8gKz0gYmluYXJ5Qml0LnRvU3RyaW5nKCk7XG4gIHRoaXMucmVuZGVyKCk7XG59O1xuXG4vKipcbiAqIFNob3cgb3IgaGlkZSBwYXJ0cyBvZiB0aGUgc2VuZCBVSSBiYXNlZCBvbiB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGVuY29kaW5nXG4gKiBtb2RlLlxuICogQHBhcmFtIHtFbmNvZGluZ1R5cGVbXX0gbmV3RW5jb2RpbmdzXG4gKi9cbk5ldFNpbUJpdExvZ1BhbmVsLnByb3RvdHlwZS5zZXRFbmNvZGluZ3MgPSBmdW5jdGlvbiAobmV3RW5jb2RpbmdzKSB7XG4gIHRoaXMuZW5jb2RpbmdzXyA9IG5ld0VuY29kaW5ncztcbiAgdGhpcy5yZW5kZXIoKTtcbn07XG5cbi8qKlxuICogQ2hhbmdlIGhvdyBiaW5hcnkgaW5wdXQgaW4gaW50ZXJwcmV0ZWQgYW5kIGZvcm1hdHRlZCBpbiB0aGUgbG9nLlxuICogQHBhcmFtIHtudW1iZXJ9IG5ld0NodW5rU2l6ZVxuICovXG5OZXRTaW1CaXRMb2dQYW5lbC5wcm90b3R5cGUuc2V0Q2h1bmtTaXplID0gZnVuY3Rpb24gKG5ld0NodW5rU2l6ZSkge1xuICB0aGlzLmNodW5rU2l6ZV8gPSBuZXdDaHVua1NpemU7XG4gIHRoaXMucmVuZGVyKCk7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIHZlcnRpY2FsIHNwYWNlIHRoYXQgdGhpcyBsb2cgcGFuZWwgc2hvdWxkIGNvbnN1bWUgKGluY2x1ZGluZyBtYXJnaW5zKVxuICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFBpeGVsc1xuICovXG5OZXRTaW1CaXRMb2dQYW5lbC5wcm90b3R5cGUuc2V0SGVpZ2h0ID0gZnVuY3Rpb24gKGhlaWdodFBpeGVscykge1xuICB0aGlzLm9wZW5IZWlnaHRfID0gaGVpZ2h0UGl4ZWxzO1xuICB0aGlzLnNpemVUb09wZW5IZWlnaHRfKCk7XG59O1xuXG4vKipcbiAqIFNjYWxlIHRoZSBzY3JvbGwgYXJlYSBpbnNpZGUgdGhlIHBhbmVsIHNvIHRoYXQgdGhlIHdob2xlIHBhbmVsXG4gKiBpcyB0aGUgZGVzaXJlZCBoZWlnaHQuXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1CaXRMb2dQYW5lbC5wcm90b3R5cGUuc2l6ZVRvT3BlbkhlaWdodF8gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciByb290ID0gdGhpcy5nZXRSb290KCkuZmluZCgnLm5ldHNpbS1wYW5lbCcpO1xuICB2YXIgcGFuZWxIZWFkZXIgPSByb290LmZpbmQoJ2gxJyk7XG4gIHZhciBwYW5lbEJvZHkgPSByb290LmZpbmQoJy5wYW5lbC1ib2R5Jyk7XG4gIHZhciBzY3JvbGxBcmVhID0gcm9vdC5maW5kKCcuc2Nyb2xsLWFyZWEnKTtcblxuICB2YXIgcGFuZWxNYXJnaW5zID0gcGFyc2VGbG9hdChyb290LmNzcygnbWFyZ2luLXRvcCcpKSArXG4gICAgICBwYXJzZUZsb2F0KHJvb3QuY3NzKCdtYXJnaW4tYm90dG9tJykpO1xuICB2YXIgaGVhZGVySGVpZ2h0ID0gcGFuZWxIZWFkZXIub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gIHZhciBwYW5lbEJvcmRlcnMgPSBwYXJzZUZsb2F0KHBhbmVsQm9keS5jc3MoJ2JvcmRlci10b3Atd2lkdGgnKSkgK1xuICAgICAgcGFyc2VGbG9hdChwYW5lbEJvZHkuY3NzKCdib3JkZXItYm90dG9tLXdpZHRoJykpO1xuICB2YXIgc2Nyb2xsTWFyZ2lucyA9IHBhcnNlRmxvYXQoc2Nyb2xsQXJlYS5jc3MoJ21hcmdpbi10b3AnKSkgK1xuICAgICAgcGFyc2VGbG9hdChzY3JvbGxBcmVhLmNzcygnbWFyZ2luLWJvdHRvbScpKTtcblxuICAvLyBXZSBzZXQgdGhlIHBhbmVsIGhlaWdodCBieSBmaXhpbmcgdGhlIHNpemUgb2YgaXRzIGlubmVyIHNjcm9sbGFibGVcbiAgLy8gYXJlYS5cbiAgdmFyIG5ld1Njcm9sbFZpZXdwb3J0SGVpZ2h0ID0gdGhpcy5vcGVuSGVpZ2h0XyAtIChwYW5lbE1hcmdpbnMgKyBoZWFkZXJIZWlnaHQgK1xuICAgICAgcGFuZWxCb3JkZXJzICsgc2Nyb2xsTWFyZ2lucyk7XG4gIHNjcm9sbEFyZWEuaGVpZ2h0KE1hdGguZmxvb3IobmV3U2Nyb2xsVmlld3BvcnRIZWlnaHQpKTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge251bWJlcn0gdmVydGljYWwgc3BhY2UgdGhhdCBwYW5lbCBjdXJyZW50bHkgY29uc3VtZXMgKGluY2x1ZGluZ1xuICogbWFyZ2lucykgaW4gcGl4ZWxzLlxuICovXG5OZXRTaW1CaXRMb2dQYW5lbC5wcm90b3R5cGUuZ2V0SGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5nZXRSb290KCkuZmluZCgnLm5ldHNpbS1wYW5lbCcpLm91dGVySGVpZ2h0KHRydWUpO1xufTtcblxuLyoqXG4gKiBBZnRlciB0b2dnbGluZyBwYW5lbCB2aXNpYmlsaXR5LCB0cmlnZ2VyIGEgbGF5b3V0IHVwZGF0ZSBzbyBzZW5kL2xvZyBwYW5lbFxuICogc3BhY2UgaXMgc2hhcmVkIGNvcnJlY3RseS5cbiAqIEBwcml2YXRlXG4gKiBAb3ZlcnJpZGVcbiAqL1xuTmV0U2ltQml0TG9nUGFuZWwucHJvdG90eXBlLm9uTWluaW1pemVyQ2xpY2tfID0gZnVuY3Rpb24gKCkge1xuICBOZXRTaW1CaXRMb2dQYW5lbC5zdXBlclByb3RvdHlwZS5vbk1pbmltaXplckNsaWNrXy5jYWxsKHRoaXMpO1xuICBOZXRTaW1HbG9iYWxzLnVwZGF0ZUxheW91dCgpO1xufTtcbiIsIi8qKlxuICogQG92ZXJ2aWV3IGJhc2UgY2xhc3MgZm9yIGFsbCBcInBhbmVsc1wiICh2aXN1YWwgYm94ZXMpIGluIHRoZSBOZXRTaW1cbiAqICAgICAgICAgICBpbnRlcmZhY2UsIHByb3ZpZGVzIHNvbWUgY29tbW9uIGV4cGFuZC9jb2xsYXBzZSBmdW5jdGlvbmFsaXR5LlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBtYXJrdXAgPSByZXF1aXJlKCcuL05ldFNpbVBhbmVsLmh0bWwuZWpzJyk7XG52YXIgQXJndW1lbnRVdGlscyA9IHJlcXVpcmUoJy4vQXJndW1lbnRVdGlscycpO1xuXG4vKipcbiAqIEdlbmVyYXRvciBhbmQgY29udHJvbGxlciBmb3IgYSBOZXRTaW0gUGFuZWwsIGEgc2luZ2xlIHNlY3Rpb24gb24gdGhlXG4gKiBwYWdlIHdoaWNoIG1heSBiZSBjb2xsYXBzaWJsZS5cbiAqIEBwYXJhbSB7alF1ZXJ5fSByb290RGl2IC0gRWxlbWVudCB3aXRoaW4gd2hpY2ggdGhlIHBhbmVsIGlzIHJlY3JlYXRlZFxuICogICAgICAgIGV2ZXJ5IHRpbWUgcmVuZGVyKCkgaXMgY2FsbGVkLiAgV2lsbCB3aXBlIG91dCBjb250ZW50cyBvZiB0aGlzXG4gKiAgICAgICAgZWxlbWVudCwgYnV0IG5vdCB0aGUgZWxlbWVudCBpdHNlbGYuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuY2xhc3NOYW1lXSAtIGFuIGFkZGl0aW9uYWwgY2xhc3MgdG8gYmUgYXBwZW5kZWQgdG9cbiAqICAgICAgICB0aGUgcGFuZWwncyByb290IChvbmUgbGF5ZXIgaW5zaWRlIHJvb3REaXYpIGZvciBzdHlsZSBydWxlcy5cbiAqICAgICAgICBEZWZhdWx0cyB0byBubyBjbGFzcywgc28gb25seSB0aGUgJ25ldHNpbS1wYW5lbCcgY2xhc3Mgd2lsbCBiZSB1c2VkLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnBhbmVsVGl0bGVdIC0gTG9jYWxpemVkIGluaXRpYWwgcGFuZWwgdGl0bGUuXG4gKiAgICAgICAgRGVmYXVsdHMgdG8gZW1wdHkgc3RyaW5nLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy51c2VyVG9nZ2xlYWJsZV0gLSBXaGV0aGVyIHRoaXMgcGFuZWwgY2FuIGJlIG1pbmltaXplZFxuICogICAgICAgIChjbG9zZWQpIGJ5IGNsaWNraW5nIG9uIHRoZSB0aXRsZS4gRGVmYXVsdHMgdG8gVFJVRS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuYmVnaW5NaW5pbWl6ZWRdIC0gV2hldGhlciB0aGlzIHBhbmVsIHNob3VsZCBiZVxuICogICAgICAgIG1pbmltaXplZCAoY2xvc2VkKSB3aGVuIGl0IGlzIGluaXRpYWxseSBjcmVhdGVkLiAgRGVmYXVsdHMgdG8gRkFMU0UuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIE5ldFNpbVBhbmVsID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocm9vdERpdiwgb3B0aW9ucykge1xuICAvKipcbiAgICogVW5pcXVlIGluc3RhbmNlIElEIGZvciB0aGlzIHBhbmVsLCBpbiBjYXNlIHdlIGhhdmUgc2V2ZXJhbFxuICAgKiBvZiB0aGVtIG9uIGEgcGFnZS5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuaW5zdGFuY2VJRF8gPSBOZXRTaW1QYW5lbC51bmlxdWVJRENvdW50ZXI7XG4gIE5ldFNpbVBhbmVsLnVuaXF1ZUlEQ291bnRlcisrO1xuXG4gIC8qKlxuICAgKiBDb21wb25lbnQgcm9vdCwgd2hpY2ggd2UgZmlsbCB3aGVuZXZlciB3ZSBjYWxsIHJlbmRlcigpXG4gICAqIEB0eXBlIHtqUXVlcnl9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnJvb3REaXZfID0gcm9vdERpdjtcblxuICAvKipcbiAgICogQW4gYWRkaXRpb25hbCBjbGFzc05hbWUgdG8gYmUgYXBwZW5kZWQgdG8gdGhlIHBhbmVsJ3Mgcm9vdCAob25lIGxheWVyXG4gICAqIGluc2lkZSByb290RGl2KSwgZm9yIHN0eWxlIHJ1bGVzLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5jbGFzc05hbWVfID0gdXRpbHMudmFsdWVPcihvcHRpb25zLmNsYXNzTmFtZSwgJycpO1xuXG4gIC8qKlxuICAgKiBQYW5lbCB0aXRsZSwgZGlzcGxheWVkIGluIGhlYWRlci5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucGFuZWxUaXRsZV8gPSB1dGlscy52YWx1ZU9yKG9wdGlvbnMucGFuZWxUaXRsZSwgJycpO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoaXMgcGFuZWwgY2FuIGJlIG1pbmltaXplZCAoY2xvc2VkKSBieSBjbGlja2luZyBvbiB0aGUgdGl0bGUuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy51c2VyVG9nZ2xlYWJsZV8gPSB1dGlscy52YWx1ZU9yKG9wdGlvbnMudXNlclRvZ2dsZWFibGUsIHRydWUpO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBjb21wb25lbnQgaXMgbWluaW1pemVkLCBmb3IgY29uc2lzdGVudFxuICAgKiBzdGF0ZSBhY3Jvc3MgcmUtcmVuZGVycy5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmlzTWluaW1pemVkXyA9IHV0aWxzLnZhbHVlT3Iob3B0aW9ucy5iZWdpbk1pbmltaXplZCwgZmFsc2UpO1xuXG4gIC8vIEluaXRpYWwgcmVuZGVyXG4gIHRoaXMucmVuZGVyKCk7XG59O1xuXG4vKipcbiAqIFN0YXRpYyBjb3VudGVyIHVzZWQgdG8gZ2VuZXJhdGUvdW5pcXVlbHkgaWRlbnRpZnkgZGlmZmVyZW50IGluc3RhbmNlc1xuICogb2YgdGhpcyBsb2cgd2lkZ2V0IG9uIHRoZSBwYWdlLlxuICogQHR5cGUge251bWJlcn1cbiAqL1xuTmV0U2ltUGFuZWwudW5pcXVlSURDb3VudGVyID0gMDtcblxuLyoqXG4gKiBSZWJ1aWxkIHRoZSBwYW5lbCBjb250ZW50cyBpbnNpZGUgb2YgdGhlIHJvb3REaXZcbiAqL1xuTmV0U2ltUGFuZWwucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG5ld01hcmt1cCA9ICQobWFya3VwKHtcbiAgICBpbnN0YW5jZUlEOiB0aGlzLmluc3RhbmNlSURfLFxuICAgIGNsYXNzTmFtZTogdGhpcy5jbGFzc05hbWVfLFxuICAgIHBhbmVsVGl0bGU6IHRoaXMucGFuZWxUaXRsZV8sXG4gICAgdXNlclRvZ2dsZWFibGU6IHRoaXMudXNlclRvZ2dsZWFibGVfXG4gIH0pKTtcbiAgdGhpcy5yb290RGl2Xy5odG1sKG5ld01hcmt1cCk7XG5cbiAgaWYgKHRoaXMudXNlclRvZ2dsZWFibGVfKSB7XG4gICAgdGhpcy5yb290RGl2Xy5maW5kKCcubWluaW1pemVyJykuY2xpY2sodGhpcy5vbk1pbmltaXplckNsaWNrXy5iaW5kKHRoaXMpKTtcbiAgfVxuICB0aGlzLnNldE1pbmltaXplZCh0aGlzLmlzTWluaW1pemVkXyk7XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHtqUXVlcnl9IGEgaGFuZGxlIG9uIHRoZSByb290IGVsZW1lbnQgZm9yIHRoaXMgcGFuZWxcbiAqL1xuTmV0U2ltUGFuZWwucHJvdG90eXBlLmdldFJvb3QgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLnJvb3REaXZfO1xufTtcblxuLyoqXG4gKiBTZXQgcGFuZWwgdGl0bGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmV3VGl0bGUgLSBMb2NhbGl6ZWQgcGFuZWwgdGl0bGUuXG4gKi9cbk5ldFNpbVBhbmVsLnByb3RvdHlwZS5zZXRQYW5lbFRpdGxlID0gZnVuY3Rpb24gKG5ld1RpdGxlKSB7XG4gIHRoaXMucGFuZWxUaXRsZV8gPSBuZXdUaXRsZTtcbiAgdGhpcy5yb290RGl2Xy5maW5kKCcudGl0bGUtdGV4dCcpLnRleHQobmV3VGl0bGUpO1xufTtcblxuLyoqXG4gKiBUb2dnbGUgd2hldGhlciB0aGlzIHBhbmVsIGlzIG1pbmltaXplZC5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbVBhbmVsLnByb3RvdHlwZS5vbk1pbmltaXplckNsaWNrXyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXRNaW5pbWl6ZWQoIXRoaXMuaXNNaW5pbWl6ZWRfKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtib29sZWFufSBiZWNvbWVNaW5pbWl6ZWRcbiAqL1xuTmV0U2ltUGFuZWwucHJvdG90eXBlLnNldE1pbmltaXplZCA9IGZ1bmN0aW9uIChiZWNvbWVNaW5pbWl6ZWQpIHtcbiAgdmFyIHBhbmVsRGl2ID0gdGhpcy5yb290RGl2Xy5maW5kKCcubmV0c2ltLXBhbmVsJyk7XG4gIHZhciBtaW5pbWl6ZXIgPSBwYW5lbERpdi5maW5kKCcubWluaW1pemVyJyk7XG4gIGlmIChiZWNvbWVNaW5pbWl6ZWQpIHtcbiAgICBwYW5lbERpdi5hZGRDbGFzcygnbWluaW1pemVkJyk7XG4gICAgbWluaW1pemVyLmZpbmQoJy5mYScpXG4gICAgICAgIC5hZGRDbGFzcygnZmEtcGx1cy1zcXVhcmUnKVxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ2ZhLW1pbnVzLXNxdWFyZScpO1xuICB9IGVsc2Uge1xuICAgIHBhbmVsRGl2LnJlbW92ZUNsYXNzKCdtaW5pbWl6ZWQnKTtcbiAgICBtaW5pbWl6ZXIuZmluZCgnLmZhJylcbiAgICAgICAgLmFkZENsYXNzKCdmYS1taW51cy1zcXVhcmUnKVxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ2ZhLXBsdXMtc3F1YXJlJyk7XG4gIH1cbiAgdGhpcy5pc01pbmltaXplZF8gPSBiZWNvbWVNaW5pbWl6ZWQ7XG59O1xuXG4vKipcbiAqIFdoZXRoZXIgdGhpcyBwYW5lbCBpcyBjdXJyZW50bHkgbWluaW1pemVkIChzaG93aW5nIG9ubHkgaXRzIGhlYWRlcikgb3Igbm90LlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbk5ldFNpbVBhbmVsLnByb3RvdHlwZS5pc01pbmltaXplZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuaXNNaW5pbWl6ZWRfO1xufTtcblxuLyoqXG4gKiBBZGQgYSBidXR0b24gdG8gdGhlIHJpZ2h0IGVuZCBvZiB0aGUgcGFuZWwgaGVhZGVyLlxuICogQHBhcmFtIHtzdHJpbmd9IGJ1dHRvblRleHRcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHByZXNzQ2FsbGJhY2tcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuc2Vjb25kYXJ5XSAtIGRlZmF1bHQgVFJVRSwgc2Vjb25kYXJ5IGJ1dHRvbiBzdHlsZVxuICogQHBhcmFtIHtzdHJpbmdbXX0gW29wdGlvbnMuY2xhc3Nlc10gLSBkZWZhdWx0IFtdLCBhZGRpdGlvbmFsIGNsYXNzZXMgb24gdGhlXG4gKiAgICAgICAgYnV0dG9uIGVsZW1lbnQuXG4gKi9cbk5ldFNpbVBhbmVsLnByb3RvdHlwZS5hZGRCdXR0b24gPSBmdW5jdGlvbihidXR0b25UZXh0LCBwcmVzc0NhbGxiYWNrLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBBcmd1bWVudFV0aWxzLmV4dGVuZE9wdGlvbnNPYmplY3Qob3B0aW9ucyB8fCB7fSk7XG5cbiAgdmFyIGJ1dHRvbiA9ICQoJzxzcGFuPicpXG4gICAgICAuYWRkQ2xhc3MoJ25ldHNpbS1idXR0b24nKVxuICAgICAgLmh0bWwoYnV0dG9uVGV4dClcbiAgICAgIC5jbGljayhwcmVzc0NhbGxiYWNrKTtcblxuICBpZiAob3B0aW9ucy5nZXQoJ3NlY29uZGFyeScsIEFyZ3VtZW50VXRpbHMuaXNCb29sZWFuLCB0cnVlKSkge1xuICAgIGJ1dHRvbi5hZGRDbGFzcygnc2Vjb25kYXJ5Jyk7XG4gIH1cblxuICBvcHRpb25zLmdldCgnY2xhc3NlcycsIEFyZ3VtZW50VXRpbHMuaXNBcnJheU9mU3RyaW5ncygpLCBbXSlcbiAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgICAgYnV0dG9uLmFkZENsYXNzKGNsYXNzTmFtZSk7XG4gICAgICB9KTtcblxuICBidXR0b24uYXBwZW5kVG8odGhpcy5yb290RGl2Xy5maW5kKCcucGFuZWwtY29udHJvbHMnKSk7XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHtqUXVlcnl9IHRoZSBib2R5IERpdiBvZiB0aGUgcGFuZWwsIGZvciBwYW5lbCBjb250ZW50LlxuICovXG5OZXRTaW1QYW5lbC5wcm90b3R5cGUuZ2V0Qm9keSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMucm9vdERpdl8uZmluZCgnLnBhbmVsLWJvZHknKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cz0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdCA9IGZ1bmN0aW9uIGFub255bW91cyhsb2NhbHMsIGZpbHRlcnMsIGVzY2FwZVxuLyoqLykge1xuZXNjYXBlID0gZXNjYXBlIHx8IGZ1bmN0aW9uIChodG1sKXtcbiAgcmV0dXJuIFN0cmluZyhodG1sKVxuICAgIC5yZXBsYWNlKC8mKD8hXFx3KzspL2csICcmYW1wOycpXG4gICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xufTtcbnZhciBidWYgPSBbXTtcbndpdGggKGxvY2FscyB8fCB7fSkgeyAoZnVuY3Rpb24oKXsgXG4gYnVmLnB1c2goJzxkaXYgaWQ9XCJuZXRzaW0tcGFuZWwtJywgZXNjYXBlKCgxLCAgaW5zdGFuY2VJRCApKSwgJ1wiXFxuICAgICBjbGFzcz1cIm5ldHNpbS1wYW5lbCAnLCBlc2NhcGUoKDIsICBjbGFzc05hbWUgKSksICdcIj5cXG4gIDxoMT5cXG4gICAgPGRpdiBjbGFzcz1cInBhbmVsLWNvbnRyb2xzXCI+PC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XCJzaW5nbGUtbGluZS13aXRoLWVsbGlwc2lzIHBhZC1sZWZ0Jyk7NTsgaWYgKHVzZXJUb2dnbGVhYmxlKSB7IDsgYnVmLnB1c2goJyBtaW5pbWl6ZXInKTs1OyB9IDsgYnVmLnB1c2goJ1wiPlxcbiAgICAgICcpOzY7IGlmICh1c2VyVG9nZ2xlYWJsZSkgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtbWludXMtc3F1YXJlXCI+PC9pPlxcbiAgICAgICcpOzg7IH0gOyBidWYucHVzaCgnXFxuICAgICAgPHNwYW4gY2xhc3M9XCJ0aXRsZS10ZXh0XCI+JywgZXNjYXBlKCg5LCAgcGFuZWxUaXRsZSApKSwgJzwvc3Bhbj5cXG4gICAgPC9kaXY+XFxuICA8L2gxPlxcbiAgPGRpdiBjbGFzcz1cInBhbmVsLWJvZHlcIj5cXG4gIDwvZGl2PlxcbjwvZGl2PlxcbicpOyB9KSgpO1xufSBcbnJldHVybiBidWYuam9pbignJyk7XG59O1xuICByZXR1cm4gZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgcmV0dXJuIHQobG9jYWxzLCByZXF1aXJlKFwiZWpzXCIpLmZpbHRlcnMpO1xuICB9XG59KCkpOyIsIi8qKlxuICogQG92ZXJ2aWV3IFVJIGNvbnRyb2xsZXIgZm9yIHNldCBvZiByYWRpbyBidXR0b25zIHVzZWQgdG8gc2VsZWN0IGRpc3BsYXkgZW5jb2RpbmdzLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIG1hcmt1cCA9IHJlcXVpcmUoJy4vTmV0U2ltRW5jb2RpbmdDb250cm9sLmh0bWwuZWpzJyk7XG52YXIgRW5jb2RpbmdUeXBlID0gcmVxdWlyZSgnLi9OZXRTaW1Db25zdGFudHMnKS5FbmNvZGluZ1R5cGU7XG5cbi8qKlxuICogR2VuZXJhdG9yIGFuZCBjb250cm9sbGVyIGZvciBtZXNzYWdlIGVuY29kaW5nIHNlbGVjdG9yOiBBIGRyb3Bkb3duIHRoYXRcbiAqIGNvbnRyb2xzIHdoZXRoZXIgbWVzc2FnZXMgYXJlIGRpc3BsYXllZCBpbiBzb21lIGNvbWJpbmF0aW9uIG9mIGJpbmFyeSwgaGV4LFxuICogZGVjaW1hbCwgYXNjaWksIGV0Yy5cbiAqIEBwYXJhbSB7alF1ZXJ5fSByb290RGl2XG4gKiBAcGFyYW0ge05ldFNpbUxldmVsQ29uZmlndXJhdGlvbn0gbGV2ZWxDb25maWdcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNoYW5nZUVuY29kaW5nQ2FsbGJhY2tcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgTmV0U2ltRW5jb2RpbmdDb250cm9sID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocm9vdERpdiwgbGV2ZWxDb25maWcsXG4gICAgY2hhbmdlRW5jb2RpbmdDYWxsYmFjaykge1xuICAvKipcbiAgICogQ29tcG9uZW50IHJvb3QsIHdoaWNoIHdlIGZpbGwgd2hlbmV2ZXIgd2UgY2FsbCByZW5kZXIoKVxuICAgKiBAdHlwZSB7alF1ZXJ5fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5yb290RGl2XyA9IHJvb3REaXY7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtOZXRTaW1MZXZlbENvbmZpZ3VyYXRpb259XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmxldmVsQ29uZmlnXyA9IGxldmVsQ29uZmlnO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7ZnVuY3Rpb259XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmNoYW5nZUVuY29kaW5nQ2FsbGJhY2tfID0gY2hhbmdlRW5jb2RpbmdDYWxsYmFjaztcblxuICAvKipcbiAgICogQHR5cGUge2pRdWVyeX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuY2hlY2tib3hlc18gPSBudWxsO1xuXG4gIC8vIEluaXRpYWwgcmVuZGVyXG4gIHRoaXMucmVuZGVyKCk7XG59O1xuXG4vKipcbiAqIEZpbGwgdGhlIHJvb3QgZGl2IHdpdGggbmV3IGVsZW1lbnRzIHJlZmxlY3RpbmcgdGhlIGN1cnJlbnQgc3RhdGVcbiAqL1xuTmV0U2ltRW5jb2RpbmdDb250cm9sLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciByZW5kZXJlZE1hcmt1cCA9ICQobWFya3VwKHtcbiAgICBsZXZlbDogdGhpcy5sZXZlbENvbmZpZ19cbiAgfSkpO1xuICB0aGlzLnJvb3REaXZfLmh0bWwocmVuZGVyZWRNYXJrdXApO1xuICB0aGlzLmNoZWNrYm94ZXNfID0gdGhpcy5yb290RGl2Xy5maW5kKFxuICAgICAgJ2lucHV0W3R5cGU9XCJjaGVja2JveFwiXVtuYW1lPVwiZW5jb2RpbmdfY2hlY2tib3hlc1wiXScpO1xuICB0aGlzLmNoZWNrYm94ZXNfLmNoYW5nZSh0aGlzLm9uQ2hlY2tib3hlc0NoYW5nZV8uYmluZCh0aGlzKSk7XG59O1xuXG4vKipcbiAqIFNlbmQgbmV3IHNlbGVjdGVkIGVuY29kaW5ncyB0byByZWdpc3RlcmVkIGNhbGxiYWNrIG9uIGNoYW5nZS5cbiAqIEBwcml2YXRlXG4gKi9cbk5ldFNpbUVuY29kaW5nQ29udHJvbC5wcm90b3R5cGUub25DaGVja2JveGVzQ2hhbmdlXyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGVjdGVkRW5jb2RpbmdzID0gW107XG4gIHRoaXMuY2hlY2tib3hlc18uZmlsdGVyKCc6Y2hlY2tlZCcpLmVhY2goZnVuY3Rpb24gKGksIGVsZW1lbnQpIHtcbiAgICBzZWxlY3RlZEVuY29kaW5ncy5wdXNoKGVsZW1lbnQudmFsdWUpO1xuICB9KTtcbiAgdGhpcy5jaGFuZ2VFbmNvZGluZ0NhbGxiYWNrXyhzZWxlY3RlZEVuY29kaW5ncyk7XG59O1xuXG4vKipcbiAqIENoYW5nZSBzZWxlY3RvciB2YWx1ZSB0byB0aGUgbmV3IHByb3ZpZGVkIHZhbHVlLlxuICogQHBhcmFtIHtFbmNvZGluZ1R5cGVbXX0gbmV3RW5jb2RpbmdzXG4gKi9cbk5ldFNpbUVuY29kaW5nQ29udHJvbC5wcm90b3R5cGUuc2V0RW5jb2RpbmdzID0gZnVuY3Rpb24gKG5ld0VuY29kaW5ncykge1xuICB0aGlzLmNoZWNrYm94ZXNfLmVhY2goZnVuY3Rpb24gKGksIGVsZW1lbnQpIHtcbiAgICAkKGVsZW1lbnQpLmF0dHIoJ2NoZWNrZWQnLCAobmV3RW5jb2RpbmdzLmluZGV4T2YoZWxlbWVudC52YWx1ZSkgPiAtMSkpO1xuICB9KTtcbn07XG5cbi8qKlxuICogR2VuZXJhdGUgYSBqUXVlcnkgc2VsZWN0b3Igc3RyaW5nIHRoYXQgd2lsbCBnZXQgYWxsIHJvd3MgdGhhdFxuICogaGF2ZSBBTlkgb2YgdGhlIHByb3ZpZGVkIGNsYXNzZXMuXG4gKiBAcGFyYW0ge0VuY29kaW5nVHlwZVtdfSBlbmNvZGluZ3NcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbnZhciBtYWtlRW5jb2RpbmdSb3dTZWxlY3RvciA9IGZ1bmN0aW9uIChlbmNvZGluZ3MpIHtcbiAgcmV0dXJuIGVuY29kaW5ncy5tYXAoZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgIHJldHVybiAndHIuJyArIGNsYXNzTmFtZTtcbiAgfSkuam9pbignLCAnKTtcbn07XG5cbi8qKlxuICogU3RhdGljIGhlbHBlciwgc2hvd3MvaGlkZXMgcm93cyB1bmRlciBwcm92aWRlZCBlbGVtZW50IGFjY29yZGluZyB0byB0aGUgZ2l2ZW5cbiAqIGVuY29kaW5nIHNldHRpbmcuXG4gKiBAcGFyYW0ge2pRdWVyeX0gcm9vdEVsZW1lbnQgLSByb290IG9mIGVsZW1lbnRzIHRvIHNob3cvaGlkZVxuICogQHBhcmFtIHtFbmNvZGluZ1R5cGVbXX0gZW5jb2RpbmdzIC0gYSBtZXNzYWdlIGVuY29kaW5nIHNldHRpbmdcbiAqL1xuTmV0U2ltRW5jb2RpbmdDb250cm9sLmhpZGVSb3dzQnlFbmNvZGluZyA9IGZ1bmN0aW9uIChyb290RWxlbWVudCwgZW5jb2RpbmdzKSB7XG4gIHZhciBoaWRkZW5FbmNvZGluZ3MgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIEVuY29kaW5nVHlwZSkge1xuICAgIGlmIChFbmNvZGluZ1R5cGUuaGFzT3duUHJvcGVydHkoa2V5KSAmJlxuICAgICAgICBlbmNvZGluZ3MuaW5kZXhPZihFbmNvZGluZ1R5cGVba2V5XSkgPT09IC0xKSB7XG4gICAgICBoaWRkZW5FbmNvZGluZ3MucHVzaChFbmNvZGluZ1R5cGVba2V5XSk7XG4gICAgfVxuICB9XG4gIHJvb3RFbGVtZW50LmZpbmQobWFrZUVuY29kaW5nUm93U2VsZWN0b3IoZW5jb2RpbmdzKSkuc2hvdygpO1xuICByb290RWxlbWVudC5maW5kKG1ha2VFbmNvZGluZ1Jvd1NlbGVjdG9yKGhpZGRlbkVuY29kaW5ncykpLmhpZGUoKTtcbn07XG5cbi8qKlxuICogU3RhdGljIGhlbHBlciB0aGF0IGNvbnZlcnRzIGEgZ2l2ZW4gYXJyYXkgb2YgZW5jb2RpbmdzIHRvIGFuIG9iamVjdFxuICogbWFwcGluZyBlYWNoIGVuY29kaW5nIHRvIGB0cnVlYC4gVXNlZCBmb3IgbW9yZSBlZmZpY2llbnRcbiAqIGlzRW5jb2RpbmdFbmFibGVkIGNoZWNrc1xuICogQHBhcmFtIHtFbmNvZGluZ1R5cGVbXX0gZW5jb2RpbmdzXG4gKiBAcmV0dXJucyB7T2JqZWN0LjxFbmNvZGluZ1R5cGUsIGJvb2xlYW4+fVxuICovXG5OZXRTaW1FbmNvZGluZ0NvbnRyb2wuZW5jb2RpbmdzQXNIYXNoID0gZnVuY3Rpb24gKGVuY29kaW5ncykge1xuICByZXR1cm4gZW5jb2RpbmdzLnJlZHVjZShmdW5jdGlvbiAoaGFzaCwgZW5jb2RpbmcpIHtcbiAgICBoYXNoW2VuY29kaW5nXSA9IHRydWU7XG4gICAgcmV0dXJuIGhhc2g7XG4gIH0sIHt9KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cz0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdCA9IGZ1bmN0aW9uIGFub255bW91cyhsb2NhbHMsIGZpbHRlcnMsIGVzY2FwZVxuLyoqLykge1xuZXNjYXBlID0gZXNjYXBlIHx8IGZ1bmN0aW9uIChodG1sKXtcbiAgcmV0dXJuIFN0cmluZyhodG1sKVxuICAgIC5yZXBsYWNlKC8mKD8hXFx3KzspL2csICcmYW1wOycpXG4gICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xufTtcbnZhciBidWYgPSBbXTtcbndpdGggKGxvY2FscyB8fCB7fSkgeyAoZnVuY3Rpb24oKXsgXG4gYnVmLnB1c2goJycpOzE7XG4gIHZhciBFbmNvZGluZ1R5cGUgPSByZXF1aXJlKCcuL05ldFNpbUNvbnN0YW50cycpLkVuY29kaW5nVHlwZTtcbiAgdmFyIGkxOG4gPSByZXF1aXJlKCcuL2xvY2FsZScpO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0VuY29kaW5nVHlwZX0gZW5jb2RpbmdUeXBlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBlbmNvZGluZ0xhYmVsXG4gICAqL1xuICBmdW5jdGlvbiBtYWtlQ2hlY2tib3goZW5jb2RpbmdUeXBlLCBlbmNvZGluZ0xhYmVsKSB7XG4gICAgdmFyIGRpdkNsYXNzZXMgPSBbJ2VuY29kaW5nX2NoZWNrYm94ZXNfJyArIGVuY29kaW5nVHlwZV07XG4gICAgaWYgKGxldmVsLnNob3dFbmNvZGluZ0NvbnRyb2xzLmluZGV4T2YoZW5jb2RpbmdUeXBlKSA9PT0gLTEpIHtcbiAgICAgIGRpdkNsYXNzZXMucHVzaCgnaGlkZGVuLWNvbnRyb2wnKTtcbiAgICB9XG4gICAgOyBidWYucHVzaCgnXFxuICAgIDxkaXYgY2xhc3M9XCInLCBlc2NhcGUoKDE1LCAgZGl2Q2xhc3Nlcy5qb2luKCcgJykgKSksICdcIj5cXG4gICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCJcXG4gICAgICAgICAgICAgbmFtZT1cImVuY29kaW5nX2NoZWNrYm94ZXNcIlxcbiAgICAgICAgICAgICBpZD1cImVuY29kaW5nX2NoZWNrYm94ZXNfJywgZXNjYXBlKCgxOCwgIGVuY29kaW5nVHlwZSApKSwgJ1wiXFxuICAgICAgICAgICAgIHZhbHVlPVwiJywgZXNjYXBlKCgxOSwgIGVuY29kaW5nVHlwZSApKSwgJ1wiXFxuICAgICAgICAgIC8+XFxuICAgICAgPGxhYmVsIGZvcj1cImVuY29kaW5nX2NoZWNrYm94ZXNfJywgZXNjYXBlKCgyMSwgIGVuY29kaW5nVHlwZSApKSwgJ1wiPicsIGVzY2FwZSgoMjEsICBlbmNvZGluZ0xhYmVsICkpLCAnPC9sYWJlbD5cXG4gICAgPC9kaXY+XFxuICAgICcpOzIzO1xuICB9XG47IGJ1Zi5wdXNoKCdcXG48ZGl2IGNsYXNzPVwibmV0c2ltLWVuY29kaW5nLXNlbGVjdG9yXCI+XFxuICA8aDE+JywgZXNjYXBlKCgyNywgIGkxOG4uZW5jb2RpbmcoKSApKSwgJzwvaDE+XFxuICAnKTsyODsgbWFrZUNoZWNrYm94KEVuY29kaW5nVHlwZS5BU0NJSSwgaTE4bi5hc2NpaSgpKTsgOyBidWYucHVzaCgnXFxuICAnKTsyOTsgbWFrZUNoZWNrYm94KEVuY29kaW5nVHlwZS5ERUNJTUFMLCBpMThuLmRlY2ltYWwoKSk7IDsgYnVmLnB1c2goJ1xcbiAgJyk7MzA7IG1ha2VDaGVja2JveChFbmNvZGluZ1R5cGUuSEVYQURFQ0lNQUwsIGkxOG4uaGV4YWRlY2ltYWwoKSk7IDsgYnVmLnB1c2goJ1xcbiAgJyk7MzE7IG1ha2VDaGVja2JveChFbmNvZGluZ1R5cGUuQklOQVJZLCBpMThuLmJpbmFyeSgpKTsgOyBidWYucHVzaCgnXFxuICAnKTszMjsgbWFrZUNoZWNrYm94KEVuY29kaW5nVHlwZS5BX0FORF9CLCBpMThuLmFfYW5kX2IoKSk7IDsgYnVmLnB1c2goJ1xcbjwvZGl2PicpOyB9KSgpO1xufSBcbnJldHVybiBidWYuam9pbignJyk7XG59O1xuICByZXR1cm4gZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgcmV0dXJuIHQobG9jYWxzLCByZXF1aXJlKFwiZWpzXCIpLmZpbHRlcnMpO1xuICB9XG59KCkpOyIsIm1vZHVsZS5leHBvcnRzPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB0ID0gZnVuY3Rpb24gYW5vbnltb3VzKGxvY2FscywgZmlsdGVycywgZXNjYXBlXG4vKiovKSB7XG5lc2NhcGUgPSBlc2NhcGUgfHwgZnVuY3Rpb24gKGh0bWwpe1xuICByZXR1cm4gU3RyaW5nKGh0bWwpXG4gICAgLnJlcGxhY2UoLyYoPyFcXHcrOykvZywgJyZhbXA7JylcbiAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKVxuICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG59O1xudmFyIGJ1ZiA9IFtdO1xud2l0aCAobG9jYWxzIHx8IHt9KSB7IChmdW5jdGlvbigpeyBcbiBidWYucHVzaCgnJyk7MTtcbiAgdmFyIGkxOG4gPSByZXF1aXJlKCcuL2xvY2FsZScpO1xuICB2YXIgTmV0U2ltQ29uc3RhbnRzID0gcmVxdWlyZSgnLi9OZXRTaW1Db25zdGFudHMnKTtcbiAgdmFyIERhdGFDb252ZXJ0ZXJzID0gcmVxdWlyZSgnLi9EYXRhQ29udmVydGVycycpO1xuXG4gIHZhciBnZXRFbmNvZGluZ0xhYmVsID0gcmVxdWlyZSgnLi9OZXRTaW1VdGlscycpLmdldEVuY29kaW5nTGFiZWw7XG5cbiAgdmFyIEVuY29kaW5nVHlwZSA9IE5ldFNpbUNvbnN0YW50cy5FbmNvZGluZ1R5cGU7XG4gIHZhciBQYWNrZXRVSUNvbHVtblR5cGUgPSBOZXRTaW1Db25zdGFudHMuUGFja2V0VUlDb2x1bW5UeXBlO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0VuY29kaW5nVHlwZX0gZW5jb2RpbmdUeXBlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBlbmNvZGVkQ29udGVudFxuICAgKi9cbiAgZnVuY3Rpb24gbG9nUm93KGVuY29kaW5nVHlwZSwgZW5jb2RlZENvbnRlbnQpIHtcbiAgICA7IGJ1Zi5wdXNoKCdcXG4gICAgPHRyIGNsYXNzPVwiJywgZXNjYXBlKCgxNywgIGVuY29kaW5nVHlwZSApKSwgJ1wiPlxcbiAgICAgIDx0aCBub3dyYXAgY2xhc3M9XCInLCBlc2NhcGUoKDE4LCAgUGFja2V0VUlDb2x1bW5UeXBlLkVOQ09ESU5HX0xBQkVMICkpLCAnXCI+JywgZXNjYXBlKCgxOCwgIGdldEVuY29kaW5nTGFiZWwoZW5jb2RpbmdUeXBlKSApKSwgJzwvdGg+XFxuICAgICAgPHRkIGNsYXNzPVwiJywgZXNjYXBlKCgxOSwgIFBhY2tldFVJQ29sdW1uVHlwZS5NRVNTQUdFICkpLCAnXCI+JywgZXNjYXBlKCgxOSwgIGVuY29kZWRDb250ZW50ICkpLCAnPC90ZD5cXG4gICAgPC90cj5cXG4gICAgJyk7MjE7XG4gIH1cbjsgYnVmLnB1c2goJ1xcbjxkaXYgY2xhc3M9XCJzY3JvbGwtYXJlYSBiaXQtbG9nLXNjcm9sbC1hcmVhXCI+XFxuICA8ZGl2IGNsYXNzPVwicGFja2V0XCI+XFxuICAgIDx0YWJsZT5cXG4gICAgICA8dGJvZHk+XFxuICAgICAgICAnKTsyODtcbiAgICAgICAgICBsb2dSb3coRW5jb2RpbmdUeXBlLkFTQ0lJLCBEYXRhQ29udmVydGVycy5iaW5hcnlUb0FzY2lpKGJpbmFyeSwgY2h1bmtTaXplKSk7XG5cbiAgICAgICAgICBsb2dSb3coRW5jb2RpbmdUeXBlLkRFQ0lNQUwsIERhdGFDb252ZXJ0ZXJzLmFsaWduRGVjaW1hbChEYXRhQ29udmVydGVycy5iaW5hcnlUb0RlY2ltYWwoYmluYXJ5LCBjaHVua1NpemUpKSk7XG5cbiAgICAgICAgICBsb2dSb3coRW5jb2RpbmdUeXBlLkhFWEFERUNJTUFMLCBEYXRhQ29udmVydGVycy5mb3JtYXRIZXgoRGF0YUNvbnZlcnRlcnMuYmluYXJ5VG9IZXgoYmluYXJ5KSwgY2h1bmtTaXplKSk7XG5cbiAgICAgICAgICBsb2dSb3coRW5jb2RpbmdUeXBlLkJJTkFSWSwgRGF0YUNvbnZlcnRlcnMuZm9ybWF0QmluYXJ5KGJpbmFyeSwgY2h1bmtTaXplKSk7XG5cbiAgICAgICAgICBsb2dSb3coRW5jb2RpbmdUeXBlLkFfQU5EX0IsIERhdGFDb252ZXJ0ZXJzLmZvcm1hdEFCKERhdGFDb252ZXJ0ZXJzLmJpbmFyeVRvQUIoYmluYXJ5KSwgY2h1bmtTaXplKSk7XG4gICAgICAgIDsgYnVmLnB1c2goJ1xcbiAgICAgIDwvdGJvZHk+XFxuICAgIDwvdGFibGU+XFxuICA8L2Rpdj5cXG4gICcpOzQyOyBpZiAoc2hvd1JlYWRXaXJlQnV0dG9uKSB7IDsgYnVmLnB1c2goJ1xcbiAgICA8ZGl2IGNsYXNzPVwicGFuZWwtZm9vdGVyIGJpdC1sb2ctcGFuZWwtZm9vdGVyXCI+XFxuICAgICAgPGRpdiBjbGFzcz1cInJpZ2h0LXNpZGUtY29udHJvbHNcIj5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVwibmV0c2ltLWJ1dHRvbiBsYXJnZS1idXR0b25cIiBpZD1cInJlYWQtd2lyZS1idXR0b25cIj4nLCBlc2NhcGUoKDQ1LCAgaTE4bi5yZWFkV2lyZSgpICkpLCAnPC9zcGFuPlxcbiAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gICcpOzQ4OyB9IDsgYnVmLnB1c2goJ1xcbjwvZGl2PlxcbicpOyB9KSgpO1xufSBcbnJldHVybiBidWYuam9pbignJyk7XG59O1xuICByZXR1cm4gZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgcmV0dXJuIHQobG9jYWxzLCByZXF1aXJlKFwiZWpzXCIpLmZpbHRlcnMpO1xuICB9XG59KCkpOyIsIi8qKlxuICogQG92ZXJ2aWV3IFVJIFNsaWRlciBjb250cm9sIHVzZWQgZm9yIGNoYW5naW5nIHNpbXVsYXRlZCByb3V0ZXIgYmFuZHdpZHRoLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuLy8gVXRpbHMgcmVxdWlyZWQgb25seSBmb3IgRnVuY3Rpb24ucHJvdG90eXBlLmluaGVyaXRzKClcbnJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgTmV0U2ltQ29uc3RhbnRzID0gcmVxdWlyZSgnLi9OZXRTaW1Db25zdGFudHMnKTtcbnZhciBOZXRTaW1VdGlscyA9IHJlcXVpcmUoJy4vTmV0U2ltVXRpbHMnKTtcbnZhciBOZXRTaW1TbGlkZXIgPSByZXF1aXJlKCcuL05ldFNpbVNsaWRlcicpO1xuXG4vKipcbiAqIEdlbmVyYXRvciBhbmQgY29udHJvbGxlciBmb3IgcGFja2V0IHNpemUgc2xpZGVyL3NlbGVjdG9yXG4gKiBAcGFyYW0ge2pRdWVyeX0gcm9vdERpdlxuICogQHBhcmFtIHtmdW5jdGlvbn0gc2xpZGVyQ2hhbmdlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHNsaWRlclN0b3BDYWxsYmFja1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBOZXRTaW1CYW5kd2lkdGhDb250cm9sID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocm9vdERpdixcbiAgICBzbGlkZXJDaGFuZ2VDYWxsYmFjaywgc2xpZGVyU3RvcENhbGxiYWNrKSB7XG4gIE5ldFNpbVNsaWRlci5Mb2dhcml0aG1pY1NsaWRlci5jYWxsKHRoaXMsIHJvb3REaXYsIHtcbiAgICBvbkNoYW5nZTogc2xpZGVyQ2hhbmdlQ2FsbGJhY2ssXG4gICAgb25TdG9wOiBzbGlkZXJTdG9wQ2FsbGJhY2ssXG4gICAgdmFsdWU6IEluZmluaXR5LFxuICAgIG1pbjogNCxcbiAgICBtYXg6IDEyOCAqIE5ldFNpbUNvbnN0YW50cy5CSVRTX1BFUl9LSUxPQklULFxuICAgIHVwcGVyQm91bmRJbmZpbml0ZTogdHJ1ZVxuICB9KTtcblxuICAvLyBBdXRvLXJlbmRlciwgdW5saWtlIG91ciBiYXNlIGNsYXNzXG4gIHRoaXMucmVuZGVyKCk7XG59O1xuTmV0U2ltQmFuZHdpZHRoQ29udHJvbC5pbmhlcml0cyhOZXRTaW1TbGlkZXIuTG9nYXJpdGhtaWNTbGlkZXIpO1xuXG4vKipcbiAqIENvbnZlcnRzIGEgbnVtZXJpYyBiYW5kd2lkdGggdmFsdWUgKGluIGJpdHMpIGludG8gYSBjb21wYWN0IGxvY2FsaXplZCBzdHJpbmdcbiAqIHJlcHJlc2VudGF0aW9uIG9mIHRoYXQgdmFsdWUuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsIC0gbnVtZXJpYyB2YWx1ZSBvZiB0aGUgY29udHJvbFxuICogQHJldHVybnMge3N0cmluZ30gLSBsb2NhbGl6ZWQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHZhbHVlXG4gKiBAb3ZlcnJpZGVcbiAqL1xuTmV0U2ltQmFuZHdpZHRoQ29udHJvbC5wcm90b3R5cGUudmFsdWVUb0xhYmVsID0gZnVuY3Rpb24gKHZhbCkge1xuICByZXR1cm4gTmV0U2ltVXRpbHMuYml0cmF0ZVRvTG9jYWxpemVkUm91bmRlZEJpdHJhdGUodmFsKTtcbn07XG4iLCIvKipcbiAqIEBvdmVydmlldyBCYXNlIGltcGxlbWVudGF0aW9uIG9mIE5ldFNpbSBVSSBzbGlkZXJzLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBtYXJrdXAgPSByZXF1aXJlKCcuL05ldFNpbVNsaWRlci5odG1sLmVqcycpO1xudmFyIGkxOG4gPSByZXF1aXJlKCcuL2xvY2FsZScpO1xuXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqL1xudmFyIFNMSURFUl9ERUZBVUxUX01JTl9WQUxVRSA9IDA7XG5cbi8qKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdFxuICovXG52YXIgU0xJREVSX0RFRkFVTFRfTUFYX1ZBTFVFID0gMTAwO1xuXG4vKipcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7alF1ZXJ5fSByb290RGl2IC0gZWxlbWVudCB3aG9zZSBjb250ZW50IHdlIHJlcGxhY2Ugd2l0aCB0aGUgc2xpZGVyXG4gKiAgICAgICAgb24gcmVuZGVyKClcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbb3B0aW9ucy5vbkNoYW5nZV0gLSBhIGZ1bmN0aW9uIGludm9rZWQgd2hlbmV2ZXIgdGhlXG4gKiAgICAgICAgc2xpZGVyLXZhbHVlIGlzIGNoYW5nZWQgYnkgdGhlIHN0dWRlbnQuICBQYXNzZWQgdGhlIG5ldyB2YWx1ZSBhcyBhblxuICogICAgICAgIGFyZ3VtZW50LlxuICogQHBhcmFtIHtmdW5jdGlvbn0gW29wdGlvbnMub25TdG9wXSAtIGEgZnVuY3Rpb24gaW52b2tlZCBvbmx5IHdoZW4gdGhlXG4gKiAgICAgICAgc2xpZGVyLWhhbmRsZSBpcyByZWxlYXNlZCBieSB0aGUgc3R1ZGVudC4gIFBhc3NlZCB0aGUgbmV3IHZhbHVlIGFzIGFuXG4gKiAgICAgICAgYXJndW1lbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMudmFsdWVdIC0gSW5pdGlhbCB2YWx1ZSBvZiB0aGUgc2xpZGVyLiAgRGVmYXVsdHMgdG9cbiAqICAgICAgICBzbGlkZXIgbWluaW11bSB2YWx1ZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5taW5dIC0gTG93ZXN0IHBvc3NpYmxlIHZhbHVlIG9mIHRoZSBzbGlkZXI7XG4gKiAgICAgICAgbmV4dC10by1sb3dlc3QgaWYgbG93ZXJCb3VuZEluZmluaXRlIGlzIHRydWUuICBEZWZhdWx0cyB0byB6ZXJvLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heF0gLSBIaWdoZXN0IHBvc3NpYmxlIHZhbHVlIG9mIHRoZSBzbGlkZXI7XG4gKiAgICAgICAgbmV4dC10by1oaWdoZXN0IGlmIHVwcGVyQm91bmRJbmZpbml0ZSBpcyB0cnVlLiAgRGVmYXVsdHMgdG8gMTAwLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnN0ZXBdIC0gU3RlcC12YWx1ZSBvZiBqUXVlcnlVSSBzbGlkZXIgLSBub3RcbiAqICAgICAgICBuZWNlc3NhcmlseSByZWxhdGVkIHRvIG1pbiBhbmQgbWF4IHZhbHVlcyBpZiB5b3UgcHJvdmlkZSBjdXN0b20gdmFsdWVcbiAqICAgICAgICBjb252ZXJ0ZXJzLiBEZWZhdWx0cyB0byAxLiAgSWYgbmVnYXRpdmUsIHRoZSBzbGlkZXIgaXMgcmV2ZXJzZWQgYW5kXG4gKiAgICAgICAgcHV0cyB0aGUgbWluIHZhbHVlIG9uIHRoZSByaWdodC4gIENhbm5vdCBiZSB6ZXJvIG9yIG5vbmludGVnZXIuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnVwcGVyQm91bmRJbmZpbml0ZV0gLSBpZiBUUlVFLCB0aGUgaGlnaGVzdCB2YWx1ZVxuICogICAgICAgIG9uIHRoZSBzbGlkZXIgd2lsbCBiZSBJbmZpbml0eS9VbmxpbWl0ZWQuICBEZWZhdWx0IEZBTFNFLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sb3dlckJvdW5kSW5maW5pdGVdIC0gaWYgVFJVRSwgdGhlIGxvd2VzdCB2YWx1ZVxuICogICAgICAgIG9uIHRoZSBzbGlkZXIgd2lsbCBiZSAtSW5maW5pdHkvVW5saW1pdGVkLiAgRGVmYXVsdCBGQUxTRS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuaXNEaXNhYmxlZF0gLSBpZiBUUlVFIHRoZSBzbGlkZXIgdmFsdWUgaXMgbG9ja2VkXG4gKiAgICAgICAgYW5kIGNhbm5vdCBiZSBjaGFuZ2VkLlxuICovXG52YXIgTmV0U2ltU2xpZGVyID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocm9vdERpdiwgb3B0aW9ucykge1xuICAvKipcbiAgICogVW5pcXVlIGluc3RhbmNlIElEIGZvciB0aGlzIHBhbmVsLCBpbiBjYXNlIHdlIGhhdmUgc2V2ZXJhbFxuICAgKiBvZiB0aGVtIG9uIGEgcGFnZS5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuaW5zdGFuY2VJRF8gPSBOZXRTaW1TbGlkZXIudW5pcXVlSURDb3VudGVyO1xuICBOZXRTaW1TbGlkZXIudW5pcXVlSURDb3VudGVyKys7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtqUXVlcnl9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnJvb3REaXZfID0gcm9vdERpdjtcblxuICAvKipcbiAgICogQSBmdW5jdGlvbiBpbnZva2VkIHdoZW5ldmVyIHRoZSBzbGlkZXItdmFsdWUgaXMgY2hhbmdlZCBieSB0aGUgc3R1ZGVudC5cbiAgICogUGFzc2VkIHRoZSBuZXcgdmFsdWUgKG5vdCBzbGlkZXIgcG9zaXRpb24pIGFzIGFuIGFyZ3VtZW50LlxuICAgKiBAdHlwZSB7ZnVuY3Rpb259XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmNoYW5nZUNhbGxiYWNrXyA9IHV0aWxzLnZhbHVlT3Iob3B0aW9ucy5vbkNoYW5nZSwgZnVuY3Rpb24gKCkge30pO1xuXG4gIC8qKlxuICAgKiBBIGZ1bmN0aW9uIGludm9rZWQgb25seSB3aGVuIHRoZSBzbGlkZXItaGFuZGxlIGlzIHJlbGVhc2VkIGJ5IHRoZSBzdHVkZW50LlxuICAgKiBQYXNzZWQgdGhlIG5ldyB2YWx1ZSAobm90IHNsaWRlciBwb3NpdGlvbikgYXMgYW4gYXJndW1lbnRcbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5zdG9wQ2FsbGJhY2tfID0gdXRpbHMudmFsdWVPcihvcHRpb25zLm9uU3RvcCwgZnVuY3Rpb24gKCkge30pO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5taW5WYWx1ZV8gPSB1dGlscy52YWx1ZU9yKG9wdGlvbnMubWluLCBTTElERVJfREVGQVVMVF9NSU5fVkFMVUUpO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5tYXhWYWx1ZV8gPSB1dGlscy52YWx1ZU9yKG9wdGlvbnMubWF4LCBTTElERVJfREVGQVVMVF9NQVhfVkFMVUUpO1xuXG4gIC8qKlxuICAgKiBUaGUgY3VycmVudCAob3V0d2FyZC1mYWNpbmcpIHZhbHVlIG9mIHRoZSBzbGlkZXIuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnZhbHVlXyA9IHV0aWxzLnZhbHVlT3Iob3B0aW9ucy52YWx1ZSwgdGhpcy5taW5WYWx1ZV8pO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBzbGlkZXIgbWF4aW11bSB2YWx1ZSBzaG91bGQgYmUgSW5maW5pdHkuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5pc1VwcGVyQm91bmRJbmZpbml0ZV8gPSB1dGlscy52YWx1ZU9yKG9wdGlvbnMudXBwZXJCb3VuZEluZmluaXRlLCBmYWxzZSk7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHNsaWRlciBtaW5pbWltdW0gdmFsdWUgc2hvdWxkIGJlIC1JbmZpbml0eS5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmlzTG93ZXJCb3VuZEluZmluaXRlXyA9IHV0aWxzLnZhbHVlT3Iob3B0aW9ucy5sb3dlckJvdW5kSW5maW5pdGUsIGZhbHNlKTtcblxuICAvKipcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuc3RlcF8gPSB1dGlscy52YWx1ZU9yKG9wdGlvbnMuc3RlcCwgMSk7XG4gIGlmICh0aGlzLnN0ZXBfID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTmV0U2ltU2xpZGVyIGRvZXMgbm90IHN1cHBvcnQgemVybyBzdGVwIHZhbHVlcy5cIik7XG4gIH0gZWxzZSBpZiAodGhpcy5zdGVwXyAlIDEgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJOZXRTaW1TbGlkZXIgZG9lcyBub3Qgc3VwcG9ydCBub24taW50ZWdlciBzdGVwIHZhbHVlcy4gXCIgK1xuICAgICAgICBcIiBVc2UgRGVjaW1hbFByZWNpc2lvblNsaWRlciBpbnN0ZWFkLlwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBzbGlkZXIgaXMgZGlzYWJsZWQgYW5kIG5vbmludGVyYWN0YWJsZS5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmlzRGlzYWJsZWRfID0gdXRpbHMudmFsdWVPcihvcHRpb25zLmlzRGlzYWJsZWQsIGZhbHNlKTtcbn07XG5cbi8qKlxuICogU3RhdGljIGNvdW50ZXIgdXNlZCB0byBnZW5lcmF0ZS91bmlxdWVseSBpZGVudGlmeSBkaWZmZXJlbnQgaW5zdGFuY2VzXG4gKiBvZiB0aGlzIGNvbXBvbmVudCBvbiB0aGUgcGFnZVxuICogQHR5cGUge251bWJlcn1cbiAqL1xuTmV0U2ltU2xpZGVyLnVuaXF1ZUlEQ291bnRlciA9IDA7XG5cbi8qKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRSVUUgaWYgdGhlIHN0ZXAgdmFsdWUgaXMgbGVzcyB0aGFuIHplcm8uXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1TbGlkZXIucHJvdG90eXBlLmlzU3RlcE5lZ2F0aXZlXyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuc3RlcF8gPCAwO1xufTtcblxuLyoqXG4gKiBGaWxsIHRoZSByb290IGRpdiB3aXRoIG5ldyBlbGVtZW50cyByZWZsZWN0aW5nIHRoZSBjdXJyZW50IHN0YXRlXG4gKi9cbk5ldFNpbVNsaWRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbWluVmFsdWUgPSB0aGlzLmlzTG93ZXJCb3VuZEluZmluaXRlXyA/IC1JbmZpbml0eSA6IHRoaXMubWluVmFsdWVfO1xuICB2YXIgbWF4VmFsdWUgPSB0aGlzLmlzVXBwZXJCb3VuZEluZmluaXRlXyA/IEluZmluaXR5IDogdGhpcy5tYXhWYWx1ZV87XG4gIHZhciBtaW5Qb3NpdGlvbiA9IHRoaXMudmFsdWVUb1NsaWRlclBvc2l0aW9uKFxuICAgICAgdGhpcy5pc1N0ZXBOZWdhdGl2ZV8oKSA/IG1heFZhbHVlIDogbWluVmFsdWUpO1xuICB2YXIgbWF4UG9zaXRpb24gPSB0aGlzLnZhbHVlVG9TbGlkZXJQb3NpdGlvbihcbiAgICAgIHRoaXMuaXNTdGVwTmVnYXRpdmVfKCkgPyBtaW5WYWx1ZSA6IG1heFZhbHVlKTtcblxuICB2YXIgcmVuZGVyZWRNYXJrdXAgPSAkKG1hcmt1cCh7XG4gICAgaW5zdGFuY2VJRDogdGhpcy5pbnN0YW5jZUlEXyxcbiAgICBtaW5WYWx1ZTogdGhpcy52YWx1ZVRvU2hvcnRMYWJlbCh0aGlzLmlzU3RlcE5lZ2F0aXZlXygpID8gbWF4VmFsdWUgOiBtaW5WYWx1ZSksXG4gICAgbWF4VmFsdWU6IHRoaXMudmFsdWVUb1Nob3J0TGFiZWwodGhpcy5pc1N0ZXBOZWdhdGl2ZV8oKSA/IG1pblZhbHVlIDogbWF4VmFsdWUpXG4gIH0pKTtcbiAgdGhpcy5yb290RGl2Xy5odG1sKHJlbmRlcmVkTWFya3VwKTtcblxuICB0aGlzLnJvb3REaXZfLmZpbmQoJy5zbGlkZXInKVxuICAgICAgLnNsaWRlcih7XG4gICAgICAgIHZhbHVlOiB0aGlzLnZhbHVlVG9TbGlkZXJQb3NpdGlvbih0aGlzLnZhbHVlXyksXG4gICAgICAgIG1pbjogbWluUG9zaXRpb24sXG4gICAgICAgIG1heDogbWF4UG9zaXRpb24sXG4gICAgICAgIHN0ZXA6IE1hdGguYWJzKHRoaXMuc3RlcF8pLFxuICAgICAgICBzbGlkZTogdGhpcy5vblNsaWRlclZhbHVlQ2hhbmdlXy5iaW5kKHRoaXMpLFxuICAgICAgICBzdG9wOiB0aGlzLm9uU2xpZGVyU3RvcF8uYmluZCh0aGlzKSxcbiAgICAgICAgZGlzYWJsZWQ6IHRoaXMuaXNEaXNhYmxlZF9cbiAgICAgIH0pO1xuXG4gIC8vIFVzZSB3aWRlciBsYWJlbHMgaWYgd2UgaGF2ZSBhbiBpbmZpbml0ZSBib3VuZFxuICBpZiAodGhpcy5pc0xvd2VyQm91bmRJbmZpbml0ZV8gfHwgdGhpcy5pc1VwcGVyQm91bmRJbmZpbml0ZV8pIHtcbiAgICB0aGlzLnJvb3REaXZfLmZpbmQoJy5zbGlkZXItbGFiZWxzJykuYWRkQ2xhc3MoJ3dpZGUtbGFiZWxzJyk7XG4gIH1cblxuICB0aGlzLnNldExhYmVsRnJvbVZhbHVlXyh0aGlzLnZhbHVlXyk7XG59O1xuXG4vKipcbiAqIERpc2FibGUgdGhpcyBzbGlkZXIsIHNvIHRoZSB1c2VyIGNhbid0IGNoYW5nZSBpdHMgdmFsdWVcbiAqL1xuTmV0U2ltU2xpZGVyLnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmlzRGlzYWJsZWRfID0gdHJ1ZTtcbiAgdGhpcy5yb290RGl2Xy5maW5kKCcuc2xpZGVyJykuc2xpZGVyKCdvcHRpb24nLCAnZGlzYWJsZWQnLCB0cnVlKTtcbn07XG5cbi8qKlxuICogRW5hYmxlIHRoaXMgc2xpZGVyLCBzbyB0aGUgdXNlciBjYW4gY2hhbmdlIGl0cyB2YWx1ZVxuICovXG5OZXRTaW1TbGlkZXIucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5pc0Rpc2FibGVkXyA9IGZhbHNlO1xuICB0aGlzLnJvb3REaXZfLmZpbmQoJy5zbGlkZXInKS5zbGlkZXIoJ29wdGlvbicsICdkaXNhYmxlZCcsIGZhbHNlKTtcbn07XG5cbi8qKlxuICogRXh0ZXJuYWwgYWNjZXNzIHRvIHNldCB0aGUgdmFsdWUgb2YgdGhlIHNsaWRlci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBuZXdWYWx1ZVxuICovXG5OZXRTaW1TbGlkZXIucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG4gIGlmICh0aGlzLnZhbHVlXyA9PT0gbmV3VmFsdWUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLnZhbHVlXyA9IG5ld1ZhbHVlO1xuICB0aGlzLnJvb3REaXZfLmZpbmQoJy5zbGlkZXInKS5zbGlkZXIoJ29wdGlvbicsICd2YWx1ZScsXG4gICAgICB0aGlzLnZhbHVlVG9TbGlkZXJQb3NpdGlvbihuZXdWYWx1ZSkpO1xuICB0aGlzLnNldExhYmVsRnJvbVZhbHVlXyhuZXdWYWx1ZSk7XG59O1xuXG4vKiogQHByaXZhdGUgKi9cbk5ldFNpbVNsaWRlci5wcm90b3R5cGUub25TbGlkZXJWYWx1ZUNoYW5nZV8gPSBmdW5jdGlvbiAoZXZlbnQsIHVpKSB7XG4gIHZhciBuZXdWYWx1ZSA9IHRoaXMuc2xpZGVyUG9zaXRpb25Ub1ZhbHVlKHVpLnZhbHVlKTtcbiAgdGhpcy52YWx1ZV8gPSBuZXdWYWx1ZTtcbiAgdGhpcy5zZXRMYWJlbEZyb21WYWx1ZV8obmV3VmFsdWUpO1xuICB0aGlzLmNoYW5nZUNhbGxiYWNrXyhuZXdWYWx1ZSk7XG59O1xuXG4vKiogQHByaXZhdGUgKi9cbk5ldFNpbVNsaWRlci5wcm90b3R5cGUub25TbGlkZXJTdG9wXyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zdG9wQ2FsbGJhY2tfKHRoaXMudmFsdWVfKTtcbn07XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgc2xpZGVyIGxhYmVsIHRvIGxvY2FsaXplIGFuZCBkaXNwbGF5IHRoZSBnaXZlbiB2YWx1ZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBzbGlkZXIgdmFsdWUgdG8gZGlzcGxheVxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltU2xpZGVyLnByb3RvdHlwZS5zZXRMYWJlbEZyb21WYWx1ZV8gPSBmdW5jdGlvbiAodmFsKSB7XG4gIHRoaXMucm9vdERpdl8uZmluZCgnLnNsaWRlci12YWx1ZScpLnRleHQodGhpcy52YWx1ZVRvTGFiZWwodmFsKSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiB2YWx1ZSBpbnRvIGFuIGludGVybmFsIHZhbHVlIHdlIGNhbiBwYXNzIHRvIHRoZVxuICogalF1ZXJ5VUkgc2xpZGVyIGNvbnRyb2wuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsIC0gZXh0ZXJuYWwtZmFjaW5nIHZhbHVlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSAtIGludGVybmFsIHNsaWRlciB2YWx1ZVxuICovXG5OZXRTaW1TbGlkZXIucHJvdG90eXBlLnZhbHVlVG9TbGlkZXJQb3NpdGlvbiA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgaWYgKHRoaXMuaXNVcHBlckJvdW5kSW5maW5pdGVfICYmIHZhbCA+IHRoaXMubWF4VmFsdWVfKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVUb1NsaWRlclBvc2l0aW9uKHRoaXMubWF4VmFsdWVfKSArIHRoaXMuc3RlcF87XG4gIH0gZWxzZSBpZiAodGhpcy5pc0xvd2VyQm91bmRJbmZpbml0ZV8gJiYgdmFsIDwgdGhpcy5taW5WYWx1ZV8pIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZVRvU2xpZGVyUG9zaXRpb24odGhpcy5taW5WYWx1ZV8pIC0gdGhpcy5zdGVwXztcbiAgfVxuICByZXR1cm4gTWF0aC5tYXgodGhpcy5taW5WYWx1ZV8sIE1hdGgubWluKHRoaXMubWF4VmFsdWVfLCB2YWwpKSAqXG4gICAgICAodGhpcy5pc1N0ZXBOZWdhdGl2ZV8oKSA/IC0xIDogMSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBpbnRlcm5hbCBqUXVlcnlVSSBzbGlkZXIgdmFsdWUgaW50byBhbiBleHRlcm5hbC1mYWNpbmdcbiAqIHZhbHVlIGZvciB0aGlzIGNvbnRyb2wuXG4gKiBTaG91bGQgYmUgYW4gaW52ZXJzZSBvZiB2YWx1ZVRvU2xpZGVyUG9zaXRpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgLSBpbnRlcm5hbCBzbGlkZXIgdmFsdWVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IC0gZXh0ZXJuYWwtZmFjaW5nIHZhbHVlXG4gKi9cbk5ldFNpbVNsaWRlci5wcm90b3R5cGUuc2xpZGVyUG9zaXRpb25Ub1ZhbHVlID0gZnVuY3Rpb24gKHBvcykge1xuICBpZiAodGhpcy5pc1N0ZXBOZWdhdGl2ZV8oKSkge1xuICAgIGlmIChwb3MgPCB0aGlzLnZhbHVlVG9TbGlkZXJQb3NpdGlvbih0aGlzLm1heFZhbHVlXykpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzVXBwZXJCb3VuZEluZmluaXRlXyA/IEluZmluaXR5IDogdGhpcy5tYXhWYWx1ZV87XG4gICAgfSBlbHNlIGlmIChwb3MgPiB0aGlzLnZhbHVlVG9TbGlkZXJQb3NpdGlvbih0aGlzLm1pblZhbHVlXykpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzTG93ZXJCb3VuZEluZmluaXRlXyA/IC1JbmZpbml0eSA6IHRoaXMubWluVmFsdWVfO1xuICAgIH1cbiAgICByZXR1cm4gLXBvcztcbiAgfSBlbHNlIHtcbiAgICBpZiAocG9zID4gdGhpcy52YWx1ZVRvU2xpZGVyUG9zaXRpb24odGhpcy5tYXhWYWx1ZV8pKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1VwcGVyQm91bmRJbmZpbml0ZV8gPyBJbmZpbml0eSA6IHRoaXMubWF4VmFsdWVfO1xuICAgIH0gZWxzZSBpZiAocG9zIDwgdGhpcy52YWx1ZVRvU2xpZGVyUG9zaXRpb24odGhpcy5taW5WYWx1ZV8pKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc0xvd2VyQm91bmRJbmZpbml0ZV8gPyAtSW5maW5pdHkgOiB0aGlzLm1pblZhbHVlXztcbiAgICB9XG4gICAgcmV0dXJuIHBvcztcbiAgfVxufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBleHRlcm5hbC1mYWNpbmcgbnVtZXJpYyB2YWx1ZSBpbnRvIGEgbG9jYWxpemVkIHN0cmluZ1xuICogcmVwcmVzZW50YXRpb24gb2YgdGhhdCB2YWx1ZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBudW1lcmljIHZhbHVlIG9mIHRoZSBjb250cm9sXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAtIGxvY2FsaXplZCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdmFsdWVcbiAqL1xuTmV0U2ltU2xpZGVyLnByb3RvdHlwZS52YWx1ZVRvTGFiZWwgPSBmdW5jdGlvbiAodmFsKSB7XG4gIGlmICh2YWwgPT09IEluZmluaXR5IHx8IHZhbCA9PT0gLUluZmluaXR5KSB7XG4gICAgcmV0dXJuIGkxOG4udW5saW1pdGVkKCk7XG4gIH1cbiAgcmV0dXJuIHZhbDtcbn07XG5cbi8qKlxuICogQWx0ZXJuYXRlIGxhYmVsIGNvbnZlcnRlciwgdXNlZCBmb3Igc2xpZGVyIGVuZCBsYWJlbHMuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsIC0gbnVtZXJpYyB2YWx1ZSBvZiB0aGUgY29udHJvbFxuICogQHJldHVybnMge3N0cmluZ30gLSBsb2NhbGl6ZWQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHZhbHVlXG4gKi9cbk5ldFNpbVNsaWRlci5wcm90b3R5cGUudmFsdWVUb1Nob3J0TGFiZWwgPSBmdW5jdGlvbiAodmFsKSB7XG4gIHJldHVybiB0aGlzLnZhbHVlVG9MYWJlbCh2YWwpO1xufTtcblxuLyoqXG4gKiBTaW5jZSBqUXVlcnlVSSBzbGlkZXJzIGRvbid0IHN1cHBvcnQgbm9uaW50ZWdlciBzdGVwIHZhbHVlcywgdGhpcyBpc1xuICogYSBzaW1wbGUgaGVscGVyIHdyYXBwZWQgYXJvdW5kIE5ldFNpbVNsaWRlciB0aGF0IGFkZHMgc3VwcG9ydCBmb3JcbiAqIGZyYWN0aW9uYWwgc3RlcCB2YWx1ZXMgZG93biB0byBhIGdpdmVuIHByZWNpc2lvbi5cbiAqIEBwYXJhbSB7alF1ZXJ5fSByb290RGl2XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIHRha2VzIE5ldFNpbVNsaWRlciBvcHRpb25zLCBleGNlcHQ6XG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuc3RlcF0gLSB2YWx1ZXMgYmV0d2VlbiAwIGFuZCAxIGFyZSBhbGxvd2VkLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnByZWNpc2lvbl0gLSBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgb2YgcHJlY2lzaW9uXG4gKiAgICAgICAgdGhpcyBzbGlkZXIgbmVlZHMgKGNhbiBtYXRjaCB0aGUgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIGluIHlvdXJcbiAqICAgICAgICBzdGVwIHZhbHVlKS4gIERlZmF1bHQgMi5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5OZXRTaW1TbGlkZXIuRGVjaW1hbFByZWNpc2lvblNsaWRlciA9IGZ1bmN0aW9uIChyb290RGl2LCBvcHRpb25zKSB7XG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgb2YgcHJlY2lzaW9uIGFkZGVkIHRvIHRoZSBkZWZhdWx0IHNsaWRlclxuICAgKiBmdW5jdGlvbmFsaXR5LlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5wcmVjaXNpb25fID0gdXRpbHMudmFsdWVPcihvcHRpb25zLnByZWNpc2lvbiwgMik7XG5cbiAgLy8gV2UgY29udmVydCB0aGUgZ2l2ZW4gc3RlcCB2YWx1ZSBieSB0aGUgcmVxdWVzdGVkIHByZWNpc2lvbiBiZWZvcmUgcGFzc2luZ1xuICAvLyBpdCBvbiB0byBOZXRTaW1TbGlkZXIsIHNvIHRoYXQgd2UgZ2l2ZSBOZXRTaW1TbGlkZXIgYW4gaW50ZWdlciBzdGVwIHZhbHVlLlxuICBvcHRpb25zLnN0ZXAgPSBvcHRpb25zLnN0ZXAgKiBNYXRoLnBvdygxMCwgdGhpcy5wcmVjaXNpb25fKTtcblxuICBOZXRTaW1TbGlkZXIuY2FsbCh0aGlzLCByb290RGl2LCBvcHRpb25zKTtcbn07XG5OZXRTaW1TbGlkZXIuRGVjaW1hbFByZWNpc2lvblNsaWRlci5pbmhlcml0cyhOZXRTaW1TbGlkZXIpO1xuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBleHRlcm5hbC1mYWNpbmcgdmFsdWVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IC0gaW50ZXJuYWwgc2xpZGVyIHZhbHVlXG4gKiBAb3ZlcnJpZGVcbiAqL1xuTmV0U2ltU2xpZGVyLkRlY2ltYWxQcmVjaXNpb25TbGlkZXIucHJvdG90eXBlLnZhbHVlVG9TbGlkZXJQb3NpdGlvbiA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgLy8gVXNlIGNsYW1waW5nIGZyb20gcGFyZW50IGNsYXNzLCB3aGljaCBzaG91bGQgYmUgYXBwbGllZCBiZWZvcmUgb3VyIHRyYW5zZm9ybS5cbiAgcmV0dXJuIE5ldFNpbVNsaWRlci5wcm90b3R5cGUudmFsdWVUb1NsaWRlclBvc2l0aW9uLmNhbGwodGhpcywgdmFsKSAqXG4gICAgICBNYXRoLnBvdygxMCwgdGhpcy5wcmVjaXNpb25fKTtcbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIGFuIGludmVyc2Ugb2YgdmFsdWVUb1NsaWRlclBvc2l0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gcG9zIC0gaW50ZXJuYWwgc2xpZGVyIHZhbHVlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSAtIGV4dGVybmFsLWZhY2luZyB2YWx1ZVxuICogQG92ZXJyaWRlXG4gKi9cbk5ldFNpbVNsaWRlci5EZWNpbWFsUHJlY2lzaW9uU2xpZGVyLnByb3RvdHlwZS5zbGlkZXJQb3NpdGlvblRvVmFsdWUgPSBmdW5jdGlvbiAocG9zKSB7XG4gIC8vIFVzZSBjbGFtcGluZyBmcm9tIHBhcmVudCBjbGFzcywgd2hpY2ggc2hvdWxkIGJlIGFwcGxpZWQgYmVmb3JlIG91ciB0cmFuc2Zvcm0uXG4gIHJldHVybiBOZXRTaW1TbGlkZXIucHJvdG90eXBlLnNsaWRlclBvc2l0aW9uVG9WYWx1ZS5jYWxsKHRoaXMsIHBvcykgL1xuICAgICAgTWF0aC5wb3coMTAsIHRoaXMucHJlY2lzaW9uXyk7XG59O1xuXG4vKipcbiAqIERlZmF1bHQgbWluaW11bSBvZiB6ZXJvIGlzIHVzZWxlc3MgdG8gYSBsb2dhcml0aG1pYyBzY2FsZVxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdFxuICovXG52YXIgTE9HQVJJVEhNSUNfREVGQVVMVF9NSU5fVkFMVUUgPSAxO1xuXG4vKipcbiAqIEJ5IGRlZmF1bHQsIGEgbG9nYXJpdGhtaWMgc2NhbGUgc2xpZGVyIGluY3JlYXNlcyBieSBhIGZhY3RvciBvZiAyXG4gKiBldmVyeSBzdGVwLlxuICogQHR5cGUge251bWJlcn1cbiAqL1xudmFyIExPR0FSSVRITUlDX0RFRkFVTFRfQkFTRSA9IDI7XG5cbi8qKlxuICogQHBhcmFtIHtqUXVlcnl9IHJvb3REaXZcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gdGFrZXMgTmV0U2ltU2xpZGVyIG9wdGlvbnMsIGV4Y2VwdDpcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5taW5dIC0gc2FtZSBhcyBiYXNlIHNsaWRlciwgYnV0IGRlZmF1bHRzIHRvIDEuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubG9nQmFzZV0gLSBmYWN0b3IgYnkgd2hpY2ggdGhlIHZhbHVlIGluY3JlYXNlc1xuICogICAgICAgIHdpdGggZXZlcnkgc2xpZGVyIHN0ZXAuICBEZWZhdWx0IGJhc2UgMi5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGF1Z21lbnRzIE5ldFNpbVNsaWRlclxuICovXG5OZXRTaW1TbGlkZXIuTG9nYXJpdGhtaWNTbGlkZXIgPSBmdW5jdGlvbiAocm9vdERpdiwgb3B0aW9ucykge1xuICBvcHRpb25zLm1pbiA9IHV0aWxzLnZhbHVlT3Iob3B0aW9ucy5taW4sIExPR0FSSVRITUlDX0RFRkFVTFRfTUlOX1ZBTFVFKTtcbiAgTmV0U2ltU2xpZGVyLmNhbGwodGhpcywgcm9vdERpdiwgb3B0aW9ucyk7XG5cbiAgLyoqXG4gICAqIEZhY3RvciBieSB3aGljaCB0aGUgdmFsdWUgaW5jcmVhc2VzIHdpdGggZXZlcnkgc2xpZGVyIHN0ZXAuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmxvZ0Jhc2VfID0gdXRpbHMudmFsdWVPcihvcHRpb25zLmxvZ0Jhc2UsIExPR0FSSVRITUlDX0RFRkFVTFRfQkFTRSk7XG5cbiAgLyoqXG4gICAqIFByZWNhbGN1bGF0ZSBuYXR1cmFsIGxvZyBvZiBvdXIgYmFzZSB2YWx1ZSwgYmVjYXVzZSB3ZSdsbCB1c2UgaXQgYSBsb3QuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmxuTG9nQmFzZV8gPSBNYXRoLmxvZyh0aGlzLmxvZ0Jhc2VfKTtcblxuICB0aGlzLmNhbGN1bGF0ZVNsaWRlckJvdW5kc18oKTtcbn07XG5OZXRTaW1TbGlkZXIuTG9nYXJpdGhtaWNTbGlkZXIuaW5oZXJpdHMoTmV0U2ltU2xpZGVyKTtcblxuLyoqXG4gKiBGb3IgdGhlIGxvZ2FyaXRobWljIHNsaWRlciwgaXQncyBlYXNpZXN0IHRvIGNhbGN1bGF0ZSB0aGUgc2xpZGVyXG4gKiBib3VuZGFyeSB2YWx1ZXMgb25jZSBhbmQgdXNlIHRoZW0gbGF0ZXIuXG4gKiBAcHJpdmF0ZVxuICovXG5OZXRTaW1TbGlkZXIuTG9nYXJpdGhtaWNTbGlkZXIucHJvdG90eXBlLmNhbGN1bGF0ZVNsaWRlckJvdW5kc18gPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFBpY2sgYm91bmRhcnkgc2xpZGVyIHZhbHVlc1xuICB0aGlzLm1heFNsaWRlclBvc2l0aW9uID0gdGhpcy5sb2dGbG9vcl8odGhpcy5tYXhWYWx1ZV8pO1xuICAvLyBBZGQgYSBzdGVwIGlmIHdlIGRvbid0IGFscmVhZHkgbGFuZCBleGFjdGx5IG9uIGEgc3RlcCwgdG9cbiAgLy8gY29tcGVuc2F0ZSBmb3IgdGhlIGZsb29yKCkgb3BlcmF0aW9uXG4gIGlmIChNYXRoLnBvdyh0aGlzLmxvZ0Jhc2VfLCB0aGlzLm1heFNsaWRlclBvc2l0aW9uKSAhPT0gdGhpcy5tYXhWYWx1ZV8pIHtcbiAgICB0aGlzLm1heFNsaWRlclBvc2l0aW9uICs9IHRoaXMuc3RlcF87XG4gIH1cbiAgdGhpcy5taW5TbGlkZXJQb3NpdGlvbiA9IHRoaXMubG9nRmxvb3JfKHRoaXMubWluVmFsdWVfKTtcblxuICAvLyBQaWNrIGluZmluaXR5IHNsaWRlciB2YWx1ZXNcbiAgdGhpcy5pbmZpbml0eVNsaWRlclBvc2l0aW9uID0gdGhpcy5tYXhTbGlkZXJQb3NpdGlvbiArIHRoaXMuc3RlcF87XG4gIHRoaXMubmVnSW5maW5pdHlTbGlkZXJQb3NpdGlvbiA9IHRoaXMubWluU2xpZGVyUG9zaXRpb24gLSB0aGlzLnN0ZXBfO1xufTtcblxuLyoqXG4gKiBDaGVhdGVyIFwiZmxvb3IobG9nX2Jhc2Vfbih4KSlcIiBtZXRob2Qgd2l0aCBhIGhhY2t5IHdvcmthcm91bmQgZm9yXG4gKiBmbG9hdGluZy1wb2ludCBlcnJvcnMuICBVc2VzIHRoZSBsb2dhcml0aG1pYyBiYXNlIGZhY3RvciB0aGF0IHRoZSBzbGlkZXJcbiAqIGlzIGNvbmZpZ3VyZWQgZm9yICh0aGlzLmxvZ0Jhc2VfKS4gR29vZCBlbm91Z2ggZm9yIHRoZSBzbGlkZXIuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICogQHByaXZhdGVcbiAqL1xuTmV0U2ltU2xpZGVyLkxvZ2FyaXRobWljU2xpZGVyLnByb3RvdHlwZS5sb2dGbG9vcl8gPSBmdW5jdGlvbiAodmFsKSB7XG4gIC8vIEphdmFTY3JpcHQgZmxvYXRpbmctcG9pbnQgbWF0aCBjYXVzZXMgdGhpcyBsb2dhcml0aG0gY2FsY3VsYXRpb24gdG9cbiAgLy8gc29tZXRpbWVzIHJldHVybiBzbGlnaHRseSBpbXByZWNpc2UgdmFsdWVzLiBGb3IgZXhhbXBsZTpcbiAgLy8gbG9nKDEwMDApIC8gbG9nKDEwKSA9PT0gMi45OTk5OTk5OTk5OTk5OTk2XG4gIC8vIEFsdGhvdWdoIHdlIHVzdWFsbHkgd2FudCB0byBmbG9vciBub25pbnRlZ2VyIHZhbHVlcywgdGhlIGFib3ZlIGNhbGN1bGF0aW9uXG4gIC8vIGlzIHN1cHBvc2VkIHRvIGNvbWUgb3V0IGFzIGV4YWN0bHkgMy5cbiAgLy8gVGhlIGZ1ZGdlIGZhY3RvciBiZWxvdyBnaXZlcyBhIHRocmVzaG9sZCBhdCB3aGljaCB3ZSB3aWxsIGNlaWwoKSBhIHJlc3VsdFxuICAvLyByYXRoZXIgdGhhbiBmbG9vcigpIGl0LCB0byBhY2NvdW50IGZvciB0aGlzIGltcHJlY2lzaW9uLlxuICAvLyBUaGUgX3JpZ2h0XyB3YXkgdG8gZml4IHRoaXMgaXMgdG8gdXNlIGEgYmV0dGVyIG51bWJlciB0eXBlIGxpa2UgQmlnRGVjaW1hbCxcbiAgLy8gYnV0IGl0J3Mgbm90IHJlYWxseSB3b3J0aCBpdCBmb3IgdGhpcyB1c2UgY2FzZS4gIFNpeCBkaWdpdHMgaXMgbW9yZSB0aGFuXG4gIC8vIGVub3VnaCBwcmVjaXNpb24gZm9yIHRoZSBzbGlkZXIgd2hlbiB3ZSdyZSB0cnlpbmcgdG8gd29yayB3aXRoIHdob2xlXG4gIC8vIG51bWJlcnMgYW55d2F5LlxuICB2YXIgY2VpbFRocmVzaG9sZCA9IDAuMDAwMDAwMTtcbiAgcmV0dXJuIE1hdGguZmxvb3IoY2VpbFRocmVzaG9sZCArIChNYXRoLmxvZyh2YWwpIC8gdGhpcy5sbkxvZ0Jhc2VfKSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiB2YWx1ZSBpbnRvIGFuIGludGVybmFsIHZhbHVlIHdlIGNhbiBwYXNzIHRvIHRoZVxuICogalF1ZXJ5VUkgc2xpZGVyIGNvbnRyb2wuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsIC0gZXh0ZXJuYWwtZmFjaW5nIHZhbHVlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSAtIGludGVybmFsIHNsaWRlciB2YWx1ZVxuICogQG92ZXJyaWRlXG4gKi9cbk5ldFNpbVNsaWRlci5Mb2dhcml0aG1pY1NsaWRlci5wcm90b3R5cGUudmFsdWVUb1NsaWRlclBvc2l0aW9uID0gZnVuY3Rpb24gKHZhbCkge1xuICBpZiAodmFsID4gdGhpcy5tYXhWYWx1ZV8pIHtcbiAgICByZXR1cm4gdGhpcy5pc1VwcGVyQm91bmRJbmZpbml0ZV8gP1xuICAgICAgICB0aGlzLmluZmluaXR5U2xpZGVyUG9zaXRpb24gOiB0aGlzLm1heFNsaWRlclBvc2l0aW9uO1xuICB9IGVsc2UgaWYgKHZhbCA9PT0gdGhpcy5tYXhWYWx1ZV8pIHtcbiAgICByZXR1cm4gIHRoaXMubWF4U2xpZGVyUG9zaXRpb247XG4gIH0gZWxzZSBpZiAodmFsIDwgdGhpcy5taW5WYWx1ZV8pIHtcbiAgICByZXR1cm4gdGhpcy5pc0xvd2VyQm91bmRJbmZpbml0ZV8gP1xuICAgICAgICB0aGlzLm5lZ0luZmluaXR5U2xpZGVyUG9zaXRpb24gOiB0aGlzLm1pblNsaWRlclBvc2l0aW9uO1xuICB9IGVsc2UgaWYgKHZhbCA9PT0gdGhpcy5taW5WYWx1ZV8pIHtcbiAgICByZXR1cm4gdGhpcy5taW5TbGlkZXJQb3NpdGlvbjtcbiAgfVxuICByZXR1cm4gTWF0aC5tYXgodGhpcy5taW5TbGlkZXJQb3NpdGlvbiwgdGhpcy5sb2dGbG9vcl8odmFsKSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBpbnRlcm5hbCBqUXVlcnlVSSBzbGlkZXIgdmFsdWUgaW50byBhbiBleHRlcm5hbC1mYWNpbmdcbiAqIHZhbHVlIGZvciB0aGlzIGNvbnRyb2wuXG4gKiBTaG91bGQgYmUgYW4gaW52ZXJzZSBvZiB2YWx1ZVRvU2xpZGVyUG9zaXRpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgLSBpbnRlcm5hbCBzbGlkZXIgdmFsdWVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IC0gZXh0ZXJuYWwtZmFjaW5nIHZhbHVlXG4gKiBAb3ZlcnJpZGVcbiAqL1xuTmV0U2ltU2xpZGVyLkxvZ2FyaXRobWljU2xpZGVyLnByb3RvdHlwZS5zbGlkZXJQb3NpdGlvblRvVmFsdWUgPSBmdW5jdGlvbiAocG9zKSB7XG4gIGlmIChwb3MgPiB0aGlzLm1heFNsaWRlclBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNVcHBlckJvdW5kSW5maW5pdGVfID8gSW5maW5pdHkgOiB0aGlzLm1heFZhbHVlXztcbiAgfSBlbHNlIGlmIChwb3MgPT09IHRoaXMubWF4U2xpZGVyUG9zaXRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5tYXhWYWx1ZV87XG4gIH0gZWxzZSBpZiAocG9zIDwgdGhpcy5taW5TbGlkZXJQb3NpdGlvbikge1xuICAgIHJldHVybiB0aGlzLmlzTG93ZXJCb3VuZEluZmluaXRlXyA/IC1JbmZpbml0eSA6IHRoaXMubWluVmFsdWVfO1xuICB9IGVsc2UgaWYgKHBvcyA9PT0gdGhpcy5taW5TbGlkZXJQb3NpdGlvbikge1xuICAgIHJldHVybiB0aGlzLm1pblZhbHVlXztcbiAgfVxuICByZXR1cm4gTWF0aC5wb3codGhpcy5sb2dCYXNlXywgcG9zKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cz0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdCA9IGZ1bmN0aW9uIGFub255bW91cyhsb2NhbHMsIGZpbHRlcnMsIGVzY2FwZVxuLyoqLykge1xuZXNjYXBlID0gZXNjYXBlIHx8IGZ1bmN0aW9uIChodG1sKXtcbiAgcmV0dXJuIFN0cmluZyhodG1sKVxuICAgIC5yZXBsYWNlKC8mKD8hXFx3KzspL2csICcmYW1wOycpXG4gICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xufTtcbnZhciBidWYgPSBbXTtcbndpdGggKGxvY2FscyB8fCB7fSkgeyAoZnVuY3Rpb24oKXsgXG4gYnVmLnB1c2goJzxkaXYgaWQ9XCJuZXRzaW1fc2xpZGVyXycsIGVzY2FwZSgoMSwgIGluc3RhbmNlSUQgKSksICdcIiBjbGFzcz1cIm5ldHNpbS1zbGlkZXJcIj5cXG4gIDxkaXYgY2xhc3M9XCJzbGlkZXItaW5saW5lLXdyYXBcIj5cXG4gICAgPGRpdiBjbGFzcz1cInNsaWRlclwiPjwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVwic2xpZGVyLWxhYmVsc1wiPlxcbiAgICAgIDxkaXYgY2xhc3M9XCJtYXgtdmFsdWVcIj4nLCBlc2NhcGUoKDUsICBtYXhWYWx1ZSApKSwgJzwvZGl2PlxcbiAgICAgIDxkaXYgY2xhc3M9XCJtaW4tdmFsdWVcIj4nLCBlc2NhcGUoKDYsICBtaW5WYWx1ZSApKSwgJzwvZGl2PlxcbiAgICAgIDxkaXYgY2xhc3M9XCJjdXJyZW50LXZhbHVlXCI+XFxuICAgICAgICA8bGFiZWw+PHNwYW4gY2xhc3M9XCJzbGlkZXItdmFsdWVcIj48L3NwYW4+PC9sYWJlbD5cXG4gICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuICA8L2Rpdj5cXG48L2Rpdj5cXG4nKTsgfSkoKTtcbn0gXG5yZXR1cm4gYnVmLmpvaW4oJycpO1xufTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGxvY2Fscykge1xuICAgIHJldHVybiB0KGxvY2FscywgcmVxdWlyZShcImVqc1wiKS5maWx0ZXJzKTtcbiAgfVxufSgpKTsiLCIvKipcbiAqIEBvdmVydmlldyBXcmFwcyBOZXRTaW0gUkVTVCBBUElzIGZvciBvcGVyYXRpb25zIG9mIFwidGFibGVzXCIgYW5kIFwic2hhcmRzLlwiXG4gKiBAc2VlIG5ldF9zaW1fYXBpLnJiXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBOZXRTaW1BcGlFcnJvciA9IHJlcXVpcmUoJy4vTmV0U2ltQXBpRXJyb3InKTtcblxuLyoqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQGNvbnN0XG4gKi9cbnZhciBORVRTSU1fQVBJX0JBU0VfVVJMID0gJy92My9uZXRzaW0nO1xuXG4vKipcbiAqIEBuYW1lIE5ldFNpbVNoYXJkQXBpXG4gKi9cbnZhciBzaGFyZEFwaSA9IHtcblxuICAvKipcbiAgICogQ3JlYXRlIGFuIGluaXRpYWxpemVkIE5ldFNpbSBTaGFyZCBBUEkgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzaGFyZElEXG4gICAqIEByZXR1cm5zIHtOZXRTaW1TaGFyZEFwaX1cbiAgICovXG4gIGNyZWF0ZTogZnVuY3Rpb24gKHNoYXJkSUQpIHtcbiAgICByZXR1cm4gJC5leHRlbmQoe30sIHNoYXJkQXBpLCB7XG5cbiAgICAgIC8qKlxuICAgICAgICogU2hhcmQgaWRlbnRpZmllci5cbiAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgKi9cbiAgICAgIHNoYXJkSUQ6IHNoYXJkSUQsXG5cbiAgICAgIC8qKlxuICAgICAgICogQmVnaW5uaW5nIHBhcnQgb2YgVVJMIGZvciBhbGwgY2FsbHMgdGhhdCBpbnRlcmFjdCB3aXRoIHRoZSBzaGFyZC5cbiAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgKi9cbiAgICAgIGJhc2VVcmw6IE5FVFNJTV9BUElfQkFTRV9VUkwgKyAnLycgKyBzaGFyZElEXG4gICAgfSk7XG4gIH0sXG5cbiAgbWFrZVRhYmxlQXBpOiBmdW5jdGlvbiAodGFibGVOYW1lKSB7XG4gICAgcmV0dXJuIHRhYmxlQXBpLmNyZWF0ZSh0aGlzLnNoYXJkSUQsIHRhYmxlTmFtZSk7XG4gIH1cbn07XG5cbi8qKlxuICogQG5hbWUgTmV0U2ltVGFibGVBcGlcbiAqL1xudmFyIHRhYmxlQXBpID0ge1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gaW5pdGlhbGl6ZWQgTmV0U2ltIFRhYmxlIEFQSSBpbnN0YW5jZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHNoYXJkSURcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlTmFtZVxuICAgKiBAcmV0dXJucyB7TmV0U2ltVGFibGVBcGl9XG4gICAqL1xuICBjcmVhdGU6IGZ1bmN0aW9uIChzaGFyZElELCB0YWJsZU5hbWUpIHtcbiAgICByZXR1cm4gJC5leHRlbmQoe30sIHRhYmxlQXBpLCB7XG5cbiAgICAgIC8qKlxuICAgICAgICogU2hhcmQgaWRlbnRpZmllci5cbiAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgKi9cbiAgICAgIHNoYXJkSUQ6IHNoYXJkSUQsXG5cbiAgICAgIC8qKlxuICAgICAgICogVGFibGUgbmFtZS5cbiAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgKi9cbiAgICAgIHRhYmxlTmFtZTogdGFibGVOYW1lLFxuXG4gICAgICAvKipcbiAgICAgICAqIEJlZ2lubmluZyBwYXJ0IG9mIFVSTCBmb3IgYWxsIGNhbGxzIHRoYXQgaW50ZXJhY3Qgb25seSB3aXRoXG4gICAgICAgKiB0aGlzIHRhYmxlLlxuICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAqL1xuICAgICAgYmFzZVVybDogTkVUU0lNX0FQSV9CQVNFX1VSTCArICcvJyArIHNoYXJkSUQgKyAnLycgKyB0YWJsZU5hbWVcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogUmVxdWVzdCBhbGwgcm93cyBmcm9tIHRoZSBnaXZlbiB0YWJsZS5cbiAgICogQHBhcmFtIHtOb2RlU3R5bGVDYWxsYmFja30gY2FsbGJhY2sgLSBFeHBlY3RlZCByZXN1bHQgaXMgYW4gYXJyYXkgb2ZcbiAgICogICAgICAgIHJvdyBvYmplY3RzLlxuICAgKi9cbiAgYWxsUm93czogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAkLmFqYXgoe1xuICAgICAgdXJsOiB0aGlzLmJhc2VVcmwsXG4gICAgICB0eXBlOiBcImdldFwiLFxuICAgICAgZGF0YVR5cGU6IFwianNvblwiXG4gICAgfSkuZG9uZShmdW5jdGlvbihkYXRhLCB0ZXh0KSB7XG4gICAgICBjYWxsYmFjayhudWxsLCBkYXRhKTtcbiAgICB9KS5mYWlsKGZ1bmN0aW9uKHJlcXVlc3QsIHN0YXR1cywgZXJyb3IpIHtcbiAgICAgIGNhbGxiYWNrKG5ldyBOZXRTaW1BcGlFcnJvcihyZXF1ZXN0KSwgbnVsbCk7XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgYWxsIHJvd3MgaW5jbHVkaW5nIGFuZCBmb2xsb3dpbmcgdGhlIGdpdmVuIHJvdyBJRCBmcm9tIHRoZSB0YWJsZS5cbiAgICogQHBhcmFtIHtpbnR9IHJvd0lEIC0gbG93ZXIgYm91bmQgb24gcm93IElEcyB0byBmZXRjaFxuICAgKiBAcGFyYW0ge05vZGVTdHlsZUNhbGxiYWNrfSBjYWxsYmFjayAtIEV4cGVjdGVkIHJlc3VsdCBpcyBhbiBhcnJheSBvZlxuICAgKiAgICAgICAgdGFibGUgcm93cy5cbiAgICovXG4gIGFsbFJvd3NGcm9tSUQ6IGZ1bmN0aW9uKHJvd0lELCBjYWxsYmFjaykge1xuICAgICQuYWpheCh7XG4gICAgICB1cmw6IHRoaXMuYmFzZVVybCArICdAJyArIHJvd0lELFxuICAgICAgdHlwZTogXCJnZXRcIixcbiAgICAgIGRhdGFUeXBlOiBcImpzb25cIlxuICAgIH0pLmRvbmUoZnVuY3Rpb24oZGF0YSwgdGV4dCkge1xuICAgICAgY2FsbGJhY2sobnVsbCwgZGF0YSk7XG4gICAgfSkuZmFpbChmdW5jdGlvbihyZXF1ZXN0LCBzdGF0dXMsIGVycm9yKSB7XG4gICAgICBjYWxsYmFjayhuZXcgTmV0U2ltQXBpRXJyb3IocmVxdWVzdCksIG51bGwpO1xuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbnNlcnQgYSByb3cgb3Igcm93cyBpbnRvIHRoZSB0YWJsZS5cbiAgICogQHBhcmFtIHtPYmplY3R8T2JqZWN0W119IHZhbHVlIC0gZGVzaXJlZCByb3cgY29udGVudHMsIGFzIGVpdGhlciBhblxuICAgKiAgICAgICAgT2JqZWN0IGZvciBhIHNpbmdsZSByb3cgb3IgYW4gQXJyYXkgb2YgT2JqZWN0cyBmb3IgbXVsdGlwbGUuXG4gICAqICAgICAgICBNdXN0IGJlIEpTT04uc3RyaW5naWZ5LWFibGUuXG4gICAqIEBwYXJhbSB7Tm9kZVN0eWxlQ2FsbGJhY2t9IGNhbGxiYWNrIC0gRXhwZWN0ZWQgcmVzdWx0IGlzIHRoZSBjcmVhdGVkXG4gICAqICAgICAgICByb3cgb2JqZWN0IG9yIG9iamVjdHMgKHdoaWNoIHdpbGwgaW5jbHVkZSBhbiBhc3NpZ25lZCAnaWQnXG4gICAqICAgICAgICBrZXkpLlxuICAgKi9cbiAgY3JlYXRlUm93OiBmdW5jdGlvbih2YWx1ZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgZGF0YTtcblxuICAgIHRyeSB7XG4gICAgICBkYXRhID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNhbGxiYWNrKGUsIHVuZGVmaW5lZCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgJC5hamF4KHtcbiAgICAgIHVybDogdGhpcy5iYXNlVXJsLFxuICAgICAgdHlwZTogXCJwb3N0XCIsXG4gICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04XCIsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkuZG9uZShmdW5jdGlvbihib2R5LCB0ZXh0KSB7XG4gICAgICBjYWxsYmFjayhudWxsLCBib2R5KTtcbiAgICB9KS5mYWlsKGZ1bmN0aW9uKHJlcXVlc3QsIHN0YXR1cywgZXJyb3IpIHtcbiAgICAgIGNhbGxiYWNrKG5ldyBOZXRTaW1BcGlFcnJvcihyZXF1ZXN0KSwgdW5kZWZpbmVkKTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogUmVtb3ZlIG11bHRpcGxlIHJvd3MgYXQgb25jZS5cbiAgICogQHBhcmFtIHtudW1iZXJbXX0gaWRzIC0gVGhlIHJvdyBJRHMgdG8gcmVtb3ZlLlxuICAgKiBAcGFyYW0ge05vZGVTdHlsZUNhbGxiYWNrfSBjYWxsYmFjayAtIEV4cGVjdGVkIHJlc3VsdCBpcyBUUlVFLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFthc3luY10gZGVmYXVsdCBUUlVFLlxuICAgKi9cbiAgZGVsZXRlUm93czogZnVuY3Rpb24oaWRzLCBjYWxsYmFjaywgYXN5bmMpIHtcbiAgICBhc3luYyA9IGFzeW5jICE9PSBmYWxzZTsgLy8gYHVuZGVmaW5lZGAgbWFwcyB0byB0cnVlXG5cbiAgICAvLyBHZW5lcmF0ZSBxdWVyeSBzdHJpbmcgaW4gdGhlIGZvcm0gXCJpZFtdPTEmaWRbXT0yJi4uLlwiXG4gICAgdmFyIHF1ZXJ5U3RyaW5nID0gaWRzLm1hcChmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHJldHVybiAnaWRbXT0nICsgaWQ7XG4gICAgfSkuam9pbignJicpO1xuXG4gICAgJC5hamF4KHtcbiAgICAgIHVybDogdGhpcy5iYXNlVXJsICsgJz8nICsgcXVlcnlTdHJpbmcsXG4gICAgICB0eXBlOiAnZGVsZXRlJyxcbiAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICBhc3luYzogYXN5bmNcbiAgICB9KS5kb25lKGZ1bmN0aW9uKGRhdGEsIHRleHQpIHtcbiAgICAgIGNhbGxiYWNrKG51bGwsIHRydWUpO1xuICAgIH0pLmZhaWwoZnVuY3Rpb24ocmVxdWVzdCwgc3RhdHVzLCBlcnJvcikge1xuICAgICAgY2FsbGJhY2sobmV3IE5ldFNpbUFwaUVycm9yKHJlcXVlc3QpLCBmYWxzZSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIGEgcm93LlxuICAgKiBAcGFyYW0ge251bWJlcn0gaWQgLSBUaGUgcm93IGlkZW50aWZpZXIuXG4gICAqIEBwYXJhbSB7Tm9kZVN0eWxlQ2FsbGJhY2t9IGNhbGxiYWNrIC0gRXhwZWN0ZWQgcmVzdWx0IGlzIHRoZSByZXF1ZXN0ZWRcbiAgICogICAgICAgIHJvdyBvYmplY3QuXG4gICAqL1xuICBmZXRjaFJvdzogZnVuY3Rpb24oaWQsIGNhbGxiYWNrKSB7XG4gICAgJC5hamF4KHtcbiAgICAgIHVybDogdGhpcy5iYXNlVXJsICsgXCIvXCIgKyBpZCxcbiAgICAgIHR5cGU6IFwiZ2V0XCIsXG4gICAgICBkYXRhVHlwZTogXCJqc29uXCJcbiAgICB9KS5kb25lKGZ1bmN0aW9uKGRhdGEsIHRleHQpIHtcbiAgICAgIGNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICAgIH0pLmZhaWwoZnVuY3Rpb24ocmVxdWVzdCwgc3RhdHVzLCBlcnJvcikge1xuICAgICAgY2FsbGJhY2sobmV3IE5ldFNpbUFwaUVycm9yKHJlcXVlc3QpLCB1bmRlZmluZWQpO1xuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGFuZ2UgdGhlIGNvbnRlbnRzIG9mIGEgcm93LlxuICAgKiBAcGFyYW0ge251bWJlcn0gaWQgLSBUaGUgcm93IGlkZW50aWZpZXIuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZSAtIFRoZSBuZXcgcm93IGNvbnRlbnRzLlxuICAgKiBAcGFyYW0ge05vZGVTdHlsZUNhbGxiYWNrfSBjYWxsYmFjayAtIEV4cGVjdGVkIHJlc3VsdCBpcyB0aGUgbmV3IHJvdyBvYmplY3QuXG4gICAqL1xuICB1cGRhdGVSb3c6IGZ1bmN0aW9uKGlkLCB2YWx1ZSwgY2FsbGJhY2spIHtcbiAgICAkLmFqYXgoe1xuICAgICAgdXJsOiB0aGlzLmJhc2VVcmwgKyBcIi9cIiArIGlkLFxuICAgICAgdHlwZTogXCJwb3N0XCIsXG4gICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04XCIsXG4gICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh2YWx1ZSlcbiAgICB9KS5kb25lKGZ1bmN0aW9uKGRhdGEsIHRleHQpIHtcbiAgICAgIGNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICAgIH0pLmZhaWwoZnVuY3Rpb24ocmVxdWVzdCwgc3RhdHVzLCBlcnJvcikge1xuICAgICAgY2FsbGJhY2sobmV3IE5ldFNpbUFwaUVycm9yKHJlcXVlc3QpLCBmYWxzZSk7XG4gICAgfSk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvKipcbiAgICogQ3JlYXRlIGEgTmV0U2ltIFNoYXJkIEFQSSBpbnN0YW5jZSBmb3IgdGhlIGdpdmVuIHNoYXJkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2hhcmRJRFxuICAgKiBAcmV0dXJucyB7TmV0U2ltU2hhcmRBcGl9XG4gICAqL1xuICBtYWtlU2hhcmRBcGk6IGZ1bmN0aW9uIChzaGFyZElEKSB7XG4gICAgcmV0dXJuIHNoYXJkQXBpLmNyZWF0ZShzaGFyZElEKTtcbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlIGEgTmV0U2ltIFRhYmxlIEFQSSBpbnN0YW5jZSBmb3IgdGhlIGdpdmVuIHNoYXJkIGFuZCB0YWJsZSBuYW1lLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2hhcmRJRFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVOYW1lXG4gICAqIEByZXR1cm5zIHtOZXRTaW1UYWJsZUFwaX1cbiAgICovXG4gIG1ha2VUYWJsZUFwaTogZnVuY3Rpb24gKHNoYXJkSUQsIHRhYmxlTmFtZSkge1xuICAgIHJldHVybiB0YWJsZUFwaS5jcmVhdGUoc2hhcmRJRCwgdGFibGVOYW1lKTtcbiAgfVxufTtcbiIsIi8qKlxuICogQG92ZXJ2aWV3IEV4dGVuZGVkIGVycm9yIHR5cGUgcmV0dXJuZWQgZm9yIGZhaWxlZCBpbnRlcmFjdGlvbnMgd2l0aCBOZXRTaW1cbiAqIHNlcnZlciBBUEkgKG5ldF9zaW1fYXBpLnJiKSB0aGF0IGV4dHJhY3RzIGFuZCBleHBvc2VzIGFkZGl0aW9uYWwgZXJyb3IgaW5mby5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJy4uL3V0aWxzJyk7IC8vIHByb3ZpZGUgRnVuY3Rpb24ucHJvdG90eXBlLmluaGVyaXRzXG5cbi8qKlxuICogU3BlY2lhbCBlcnJvciB0eXBlIGZvciBmYWlsZWQgc2VydmVyIHJlcXVlc3RzLCB3aGljaCB0cmllcyB0byBleHRyYWN0XG4gKiBhZGRpdGlvbmFsIGVycm9yIGluZm9ybWF0aW9uIGZyb20gdGhlIHNlcnZlcidzIHJlc3BvbnNlLlxuICogQHBhcmFtIHtqcVhIUn0gcmVxdWVzdFxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBFcnJvclxuICovXG52YXIgTmV0U2ltQXBpRXJyb3IgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyZXF1ZXN0KSB7XG4gIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICB0aGlzLm5hbWUgPSAnTmV0U2ltQXBpRXJyb3InO1xuXG4gIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICB0aGlzLm1lc3NhZ2UgPSAnUmVxdWVzdCBmYWlsZWQnO1xuXG4gIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICB0aGlzLnN0YWNrID0gKG5ldyBFcnJvcigpKS5zdGFjaztcblxuICAvKipcbiAgICogQWRkaXRpb25hbCBlcnJvciBpbmZvcm1hdGlvbiByZXR1cm5lZCBieSB0aGUgc2VydmVyLCB3aGljaCBjYW4gZHJpdmVcbiAgICogc3BlY2lmaWMgcmVzcG9uc2VzIGJ5IHRoZSBjbGllbnQuXG4gICAqIEB0eXBlIHtzdHJpbmd8QXJyYXl9XG4gICAqL1xuICB0aGlzLmRldGFpbHMgPSB1bmRlZmluZWQ7XG5cbiAgLy8gQXR0ZW1wdCB0byBleHRyYWN0IGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gZnJvbSB0aGUgcmVxdWVzdCBvYmplY3RcbiAgaWYgKHJlcXVlc3QpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSAnc3RhdHVzOiAnICsgcmVxdWVzdC5zdGF0dXMgKyAnOyBlcnJvcjogJyArIHJlcXVlc3Quc3RhdHVzVGV4dDtcbiAgICB0cnkge1xuICAgICAgdmFyIHJlc3BvbnNlID0gSlNPTi5wYXJzZShyZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG4gICAgICBpZiAocmVzcG9uc2UuZGV0YWlscykge1xuICAgICAgICB0aGlzLmRldGFpbHMgPSByZXNwb25zZS5kZXRhaWxzO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgKz0gJzsgZGV0YWlsczogJyArIEpTT04uc3RyaW5naWZ5KHRoaXMuZGV0YWlscyk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhpcy5kZXRhaWxzID0gbnVsbDtcbiAgICB9XG4gIH1cbn07XG5OZXRTaW1BcGlFcnJvci5pbmhlcml0cyhFcnJvcik7XG5cbi8qKlxuICogV2F5cyB0aGF0IGEgcm93IGluc2VydCBvcGVyYXRpb24gY2FuIGZhaWwgdmlhIE5ldFNpbUFwaS5cbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbk5ldFNpbUFwaUVycm9yLlZhbGlkYXRpb25FcnJvciA9IHtcbiAgTUFMRk9STUVEOiAnbWFsZm9ybWVkJyxcbiAgQ09ORkxJQ1Q6ICdjb25mbGljdCcsXG4gIExJTUlUX1JFQUNIRUQ6ICdsaW1pdF9yZWFjaGVkJ1xufTtcbiIsIi8qKlxuICogQG92ZXJ2aWV3IENvbnRyb2xsZXIgZm9yIGNyZWF0aW5nIGdyb3dsLXN0eWxlIEJvb3RzdHJhcCBhbGVydHNcbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4vKiBnbG9iYWwgc2V0VGltZW91dCAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgbWFya3VwID0gcmVxdWlyZSgnLi9OZXRTaW1BbGVydC5odG1sLmVqcycpO1xudmFyIEFyZ3VtZW50VXRpbHMgPSByZXF1aXJlKCcuL0FyZ3VtZW50VXRpbHMnKTtcbnZhciBOZXRTaW1Mb2dnZXIgPSByZXF1aXJlKCcuL05ldFNpbUxvZ2dlcicpO1xuXG52YXIgbG9nZ2VyID0gTmV0U2ltTG9nZ2VyLmdldFNpbmdsZXRvbigpO1xuXG52YXIgTmV0U2ltQWxlcnQgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGFsZXJ0IGNvbnRhaW5lciwgb3IgY3JlYXRlcyBhbmQgaW5zZXJ0cyBvbmUgaWYgaXQgZG9lc1xuICogbm90IGV4aXN0LiBBbHNvIGF0dGFjaGVzIGEgY2xvc2UgaGFuZGxlciBzbyB0aGUgY29udGFpbmVyIHdpbGxcbiAqIHJlbW92ZSBpdHNlbGYgd2hlbiBpdCBlbXB0aWVzXG4gKiBAcHJpdmF0ZVxuICogQHJldHVybiB7alF1ZXJ5fVxuICovXG5OZXRTaW1BbGVydC5nZXRPckNyZWF0ZUFsZXJ0Q29udGFpbmVyXyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFsZXJ0Q29udGFpbmVyID0gJCgnLm5ldHNpbS1hbGVydC1jb250YWluZXInKTtcblxuICBpZiAoYWxlcnRDb250YWluZXIubGVuZ3RoID09PSAwKSB7XG4gICAgYWxlcnRDb250YWluZXIgPSAkKCc8ZGl2PicpLmFkZENsYXNzKFwibmV0c2ltLWFsZXJ0LWNvbnRhaW5lclwiKTtcbiAgICAkKCcjbmV0c2ltJykuYXBwZW5kKGFsZXJ0Q29udGFpbmVyKTtcblxuICAgIGFsZXJ0Q29udGFpbmVyLm9uKCdjbG9zZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgkKHRoaXMpLmNoaWxkcmVuKCkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICQodGhpcykucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gYWxlcnRDb250YWluZXI7XG59O1xuXG4vKipcbiAqIFNpbXBsZSBjaGVjayB0byBzZWUgaWYgQm9vdHN0cmFwJ3MgQWxlcnQgZnVuY3Rpb24gaXMgYXR0YWNoZWQgdG8gdGhlXG4gKiBnbG9iYWwgalF1ZXJ5IG9iamVjdC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IHdoZXRoZXIgb3Igbm90IGJvb3RzdHJhcCdzIGBhbGVydGAgZnVuY3Rpb24gaXNcbiAqICAgICAgICAgICAgICAgICAgIGxvYWRlZCBhbmQgYXZhaWxhYmxlXG4gKi9cbk5ldFNpbUFsZXJ0LmlzQm9vdHN0cmFwQWxlcnRMb2FkZWRfID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gKHR5cGVvZiAkKCkuYWxlcnQgPT09ICdmdW5jdGlvbicpO1xufTtcblxuLyoqXG4gKiBQcmltYXJ5IGFsZXJ0IGNyZWF0aW9uIG1ldGhvZC4gRXhwZWN0cyBhIGJvZHkgb2YgY29udGVudCBmb3IgdGhlXG4gKiBhbGVydCBhbmQgYSBmbGF2b3IgZm9yIHRoZSBhbGVydCB0eXBlLiBDYW4gb3B0aW9uYWxseSBpbmNsdWRlIGEgdGl0bGVcbiAqIGFuZCBhIHRpbWVvdXQgdGltZS5cbiAqXG4gKiBAcGFyYW0ge2JvZHl9IHN0cmluZ1xuICogQHBhcmFtIHtmbGF2b3J9IHN0cmluZ1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnRpdGxlXG4gKiBAcGFyYW0ge251bWJlcn0gb3B0aW9ucy50aW1lb3V0IFRpbWVvdXQgaW4gbXMuIGRlZmF1bHRzIHRvIDUwMDAuXG4gKiBAcmV0dXJuIHtqUXVlcnl9IHRoZSBjcmVhdGVkIGFsZXJ0IGVsZW1lbnRcbiAqL1xuTmV0U2ltQWxlcnQuY3JlYXRlXyA9IGZ1bmN0aW9uIChib2R5LCBmbGF2b3IsIG9wdGlvbnMpIHtcblxuICBpZiAoIU5ldFNpbUFsZXJ0LmlzQm9vdHN0cmFwQWxlcnRMb2FkZWRfKCkpIHtcbiAgICBsb2dnZXIud2FybihcIkJvb3RzdHJhcCBBbGVydCBub3QgbG9hZGVkOyBOZXRTaW1BbGVydCByZWZ1c2luZyB0byBjcmVhdGUgYWxlcnRcIik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgQXJndW1lbnRVdGlscy52YWxpZGF0ZVJlcXVpcmVkKGJvZHksICdib2R5JywgQXJndW1lbnRVdGlscy5pc1N0cmluZyk7XG4gIEFyZ3VtZW50VXRpbHMudmFsaWRhdGVSZXF1aXJlZChmbGF2b3IsICdmbGF2b3InLCBBcmd1bWVudFV0aWxzLmlzU3RyaW5nKTtcbiAgb3B0aW9ucyA9IEFyZ3VtZW50VXRpbHMuZXh0ZW5kT3B0aW9uc09iamVjdChvcHRpb25zKTtcblxuICB2YXIgJGNvbnRhaW5lciA9IE5ldFNpbUFsZXJ0LmdldE9yQ3JlYXRlQWxlcnRDb250YWluZXJfKCk7XG5cbiAgdmFyIGJvb3RzdHJhcEFsZXJ0ID0gJChtYXJrdXAoe1xuICAgIGZsYXZvcjogZmxhdm9yLFxuICAgIGJvZHk6IGJvZHksXG4gICAgdGl0bGU6IG9wdGlvbnMuZ2V0KCd0aXRsZScsIEFyZ3VtZW50VXRpbHMuaXNTdHJpbmcpXG4gIH0pKTtcblxuICAkY29udGFpbmVyLmFwcGVuZChib290c3RyYXBBbGVydCk7XG4gIGJvb3RzdHJhcEFsZXJ0LmFsZXJ0KCk7XG5cbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgYm9vdHN0cmFwQWxlcnQuYWxlcnQoJ2Nsb3NlJyk7XG4gIH0sIG9wdGlvbnMuZ2V0KCd0aW1lb3V0JywgQXJndW1lbnRVdGlscy5pc1Bvc2l0aXZlTm9uaW5maW5pdGVOdW1iZXIsIDUwMDApKTtcblxuICByZXR1cm4gYm9vdHN0cmFwQWxlcnQ7XG59O1xuXG4vKiogV3JhcHBlciBtZXRob2QgdG8gY2FsbCBjcmVhdGUgd2l0aCBhbiBcImFsZXJ0LXdhcm5cIiBmbGF2b3IgKi9cbk5ldFNpbUFsZXJ0Lndhcm4gPSBmdW5jdGlvbiAoYm9keSwgb3B0aW9ucykge1xuICByZXR1cm4gTmV0U2ltQWxlcnQuY3JlYXRlXyhib2R5LCBcImFsZXJ0LXdhcm5cIiwgb3B0aW9ucyk7XG59O1xuXG4vKiogV3JhcHBlciBtZXRob2QgdG8gY2FsbCBjcmVhdGUgd2l0aCBhbiBcImFsZXJ0LWluZm9cIiBmbGF2b3IgKi9cbk5ldFNpbUFsZXJ0LmluZm8gPSBmdW5jdGlvbiAoYm9keSwgb3B0aW9ucykge1xuICByZXR1cm4gTmV0U2ltQWxlcnQuY3JlYXRlXyhib2R5LCBcImFsZXJ0LWluZm9cIiwgb3B0aW9ucyk7XG59O1xuXG4vKiogV3JhcHBlciBtZXRob2QgdG8gY2FsbCBjcmVhdGUgd2l0aCBhbiBcImFsZXJ0LWVycm9yXCIgZmxhdm9yICovXG5OZXRTaW1BbGVydC5lcnJvciA9IGZ1bmN0aW9uIChib2R5LCBvcHRpb25zKSB7XG4gIHJldHVybiBOZXRTaW1BbGVydC5jcmVhdGVfKGJvZHksIFwiYWxlcnQtZXJyb3JcIiwgb3B0aW9ucyk7XG59O1xuXG4vKiogV3JhcHBlciBtZXRob2QgdG8gY2FsbCBjcmVhdGUgd2l0aCBhbiBcImFsZXJ0LXN1Y2Nlc3NcIiBmbGF2b3IgKi9cbk5ldFNpbUFsZXJ0LnN1Y2Nlc3MgPSBmdW5jdGlvbiAoYm9keSwgb3B0aW9ucykge1xuICByZXR1cm4gTmV0U2ltQWxlcnQuY3JlYXRlXyhib2R5LCBcImFsZXJ0LXN1Y2Nlc3NcIiwgb3B0aW9ucyk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHM9IChmdW5jdGlvbigpIHtcbiAgdmFyIHQgPSBmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzLCBmaWx0ZXJzLCBlc2NhcGVcbi8qKi8pIHtcbmVzY2FwZSA9IGVzY2FwZSB8fCBmdW5jdGlvbiAoaHRtbCl7XG4gIHJldHVybiBTdHJpbmcoaHRtbClcbiAgICAucmVwbGFjZSgvJig/IVxcdys7KS9nLCAnJmFtcDsnKVxuICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXG4gICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbn07XG52YXIgYnVmID0gW107XG53aXRoIChsb2NhbHMgfHwge30pIHsgKGZ1bmN0aW9uKCl7IFxuIGJ1Zi5wdXNoKCcnKTsxO1xuICAvKipcbiAgICogQG5hbWUgYm9keVxuICAgKiBAdHlwZSB7IXN0cmluZ31cbiAgICovXG5cbiAgLyoqXG4gICAqIEBuYW1lIGZsYXZvclxuICAgKiBAdHlwZSB7IXN0cmluZ31cbiAgICovXG5cbiAgLyoqXG4gICAqIEBuYW1lIHRpdGxlXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuOyBidWYucHVzaCgnXFxuPGRpdiBjbGFzcz1cImFsZXJ0IG5ldHNpbS1hbGVydCAnLCBlc2NhcGUoKDE3LCAgZmxhdm9yICkpLCAnIGZhZGUgaW5cIj5cXG4gIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwibmV0c2ltLWFsZXJ0LWJ1dHRvbiBjbG9zZVwiIGRhdGEtZGlzbWlzcz1cImFsZXJ0XCIgYXJpYS1sYWJlbD1cIkNsb3NlXCI+PHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCI+JnRpbWVzOzwvc3Bhbj48L2J1dHRvbj5cXG4gICcpOzE5OyBpZiAodGl0bGUpIHsgOyBidWYucHVzaCgnPHN0cm9uZz4nLCBlc2NhcGUoKDE5LCAgdGl0bGUgKSksICc8L3N0cm9uZz4nKTsxOTsgfSA7IGJ1Zi5wdXNoKCdcXG4gICcsIGVzY2FwZSgoMjAsICBib2R5ICkpLCAnXFxuPC9kaXY+XFxuJyk7IH0pKCk7XG59IFxucmV0dXJuIGJ1Zi5qb2luKCcnKTtcbn07XG4gIHJldHVybiBmdW5jdGlvbihsb2NhbHMpIHtcbiAgICByZXR1cm4gdChsb2NhbHMsIHJlcXVpcmUoXCJlanNcIikuZmlsdGVycyk7XG4gIH1cbn0oKSk7IiwiLyoqXG4gKiBAb3ZlcnZpZXcgUHJvdmlkZXMgdXRpbGl0eSBtZXRob2RzIGZvciBjb252ZXJ0aW5nIHVzZXIgZGF0YSBiZXR3ZWVuXG4gKiAgICAgICAgICAgZGlmZmVyZW50IGVuY29kaW5ncywgYW5kIGZvcm1hdHRpbmcgdGhvc2UgZW5jb2RpbmdzOiBiaW5hcnksXG4gKiAgICAgICAgICAgaGV4LCBkZWNpbWFsLCBBU0NJSS4gIFwiQSBhbmQgQlwiIGlzIGEgc3BlY2lhbCBlbmNvZGluZyB0aGF0IGlzXG4gKiAgICAgICAgICAganVzdCBiaW5hcnkgd2l0aCBcIkFcIiBzdWInZCBmb3IgMCBhbmQgXCJCXCIgc3ViJ2QgZm9yIDEuXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuLyogZ2xvYmFsIHdpbmRvdywgcmVxdWlyZSwgZXhwb3J0cyAqL1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpOyAvLyBGb3IgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXQgcG9seWZpbGxcbnZhciBOZXRTaW1VdGlscyA9IHJlcXVpcmUoJy4vTmV0U2ltVXRpbHMnKTtcblxuLy8gd2luZG93LntidG9hLCBhdG9ifSBwb2x5ZmlsbHNcbmlmICghKHdpbmRvdy5hdG9iICYmIHdpbmRvdy5idG9hKSkge1xuICB2YXIgYmFzZTY0ID0gcmVxdWlyZSgnQmFzZTY0Jyk7XG4gIHdpbmRvdy5idG9hID0gd2luZG93LmJ0b2EgfHwgYmFzZTY0LmJ0b2E7XG4gIHdpbmRvdy5hdG9iID0gd2luZG93LmF0b2IgfHwgYmFzZTY0LmF0b2I7XG59XG5cbi8qKlxuICogQHR5cGVkZWYge3N0cmluZ30gQWRkcmVzc0hlYWRlckZvcm1hdFxuICogQSBzdHJpbmcgaW5kaWNhdGluZyB0aGUgcGFydHMgb2YgYW4gYWRkcmVzcyBmaWVsZCBpbiB0aGUgcGFja2V0IGhlYWRlcixcbiAqIHRoZWlyIHJlc3BlY3RpdmUgYnl0ZS13aWR0aHMsIGFuZCB0aGUgc2VwYXJhdG9ycyB0byBiZSB1c2VkIHdoZW4gY29udmVydGluZ1xuICogYmluYXJ5IHRvIGEgcmVhZGFibGUgZm9ybWF0LlxuICogRXhhbXBsZXM6XG4gKiBcIjRcIiBpbmRpY2F0ZXMgYSBzaW5nbGUgNC1ieXRlIG51bWJlciwgZS5nLiA1IC8gMDEwMVxuICogXCI4LjRcIiBpbmRpY2F0ZXMgYW4gOC1ieXRlIG51bWJlciBmb2xsb3dlZCBieSBhIDQtYnl0ZSBudW1iZXIsIHNlcGFyYXRlZFxuICogICBieSBhIHBlcmlvZCwgZS5nLiAxLjEgLyAwMDAwMDAwMTAwMDEgb3IgMTguOSAvIDAwMDEwMDEwIDEwMDFcbiAqIFwiOC44LjguOFwiIHdvdWxkIGJlIGFuIElQdjQgYWRkcmVzcywgZS5nLlxuICogICAxMjcuMC4wLjEgLyAwMTExMTExMSAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMVxuICovXG5cbi8qKlxuICogQ29udmVydHMgYW4gQXMgYW5kIEJzIHN0cmluZyBpbnRvIGl0cyBtb3N0IGNvbXBhY3QgcmVwcmVzZW50YXRpb24sIGZvcmNlZFxuICogdG8gdXBwZXJjYXNlLlxuICogQHBhcmFtIHtzdHJpbmd9IGFiU3RyaW5nXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnRzLm1pbmlmeUFCID0gZnVuY3Rpb24gKGFiU3RyaW5nKSB7XG4gIHJldHVybiBhYlN0cmluZy5yZXBsYWNlKC9bXkFCXS9naSwgJycpLnRvVXBwZXJDYXNlKCk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGFuIEFCLWJpbmFyeSBzdHJpbmcgdG8gYSBmb3JtYXR0ZWQgcmVwcmVzZW50YXRpb24sIHdpdGggY2h1bmtzXG4gKiBvZiBhIHNldCBzaXplIHNlcGFyYXRlZCBieSBhIHNwYWNlLlxuICogQHBhcmFtIHtzdHJpbmd9IGFiU3RyaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gY2h1bmtTaXplXG4gKiBAcGFyYW0ge251bWJlcn0gW29mZnNldF0gYml0LW9mZnNldCBmb3IgZm9ybWF0dGluZyBlZmZlY3Q7IGRlZmF1bHQgMC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IGZvcm1hdHRlZCB2ZXJzaW9uXG4gKi9cbmV4cG9ydHMuZm9ybWF0QUIgPSBmdW5jdGlvbiAoYWJTdHJpbmcsIGNodW5rU2l6ZSwgb2Zmc2V0KSB7XG4gIHJldHVybiBleHBvcnRzLmZvcm1hdEJpbmFyeShleHBvcnRzLmFiVG9CaW5hcnkoYWJTdHJpbmcpLCBjaHVua1NpemUsIG9mZnNldClcbiAgICAgIC5yZXBsYWNlKC8wL2csICdBJylcbiAgICAgIC5yZXBsYWNlKC8xL2csICdCJyk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgYmluYXJ5IHN0cmluZyBpbnRvIGl0cyBtb3N0IGNvbXBhY3Qgc3RyaW5nIHJlcHJlc2VudGF0aW9uLlxuICogQHBhcmFtIHtzdHJpbmd9IGJpbmFyeVN0cmluZyB0aGF0IG1heSBjb250YWluIHdoaXRlc3BhY2VcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGJpbmFyeSBzdHJpbmcgd2l0aCBubyB3aGl0ZXNwYWNlXG4gKi9cbmV4cG9ydHMubWluaWZ5QmluYXJ5ID0gZnVuY3Rpb24gKGJpbmFyeVN0cmluZykge1xuICByZXR1cm4gYmluYXJ5U3RyaW5nLnJlcGxhY2UoL1teMDFdL2csICcnKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBiaW5hcnkgc3RyaW5nIHRvIGEgZm9ybWF0dGVkIHJlcHJlc2VudGF0aW9uLCB3aXRoIGNodW5rcyBvZlxuICogYSBzZXQgc2l6ZSBzZXBhcmF0ZWQgYnkgYSBzcGFjZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBiaW5hcnlTdHJpbmcgLSBtYXkgYmUgdW5mb3JtYXR0ZWQgYWxyZWFkeVxuICogQHBhcmFtIHtudW1iZXJ9IGNodW5rU2l6ZSAtIGhvdyBtYW55IGJpdHMgcGVyIGZvcm1hdCBjaHVua1xuICogQHBhcmFtIHtudW1iZXJ9IFtvZmZzZXRdIGJpdC1vZmZzZXQgZm9yIGZvcm1hdHRpbmcgZWZmZWN0OyBkZWZhdWx0IDAuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBwcmV0dHkgZm9ybWF0dGVkIGJpbmFyeSBzdHJpbmdcbiAqL1xuZXhwb3J0cy5mb3JtYXRCaW5hcnkgPSBmdW5jdGlvbiAoYmluYXJ5U3RyaW5nLCBjaHVua1NpemUsIG9mZnNldCkge1xuICBvZmZzZXQgPSB1dGlscy52YWx1ZU9yKG9mZnNldCwgMCk7XG4gIGlmIChjaHVua1NpemUgPD0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiUGFyYW1ldGVyIGNodW5rU2l6ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB6ZXJvXCIpO1xuICB9XG5cbiAgdmFyIGJpbmFyeSA9IGV4cG9ydHMubWluaWZ5QmluYXJ5KGJpbmFyeVN0cmluZyk7XG5cbiAgdmFyIGNodW5rcyA9IFtdO1xuICB2YXIgZmlyc3RDaHVua0xlbmd0aCA9IHV0aWxzLm1vZChvZmZzZXQsIGNodW5rU2l6ZSk7XG4gIGlmIChmaXJzdENodW5rTGVuZ3RoID4gMCkge1xuICAgIGNodW5rcy5wdXNoKGJpbmFyeS5zdWJzdHIoMCwgZmlyc3RDaHVua0xlbmd0aCkpO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IGZpcnN0Q2h1bmtMZW5ndGg7IGkgPCBiaW5hcnkubGVuZ3RoOyBpICs9IGNodW5rU2l6ZSkge1xuICAgIGNodW5rcy5wdXNoKGJpbmFyeS5zdWJzdHIoaSwgY2h1bmtTaXplKSk7XG4gIH1cblxuICByZXR1cm4gY2h1bmtzLmpvaW4oJyAnKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBoZXhhZGVjaW1hbCBzdHJpbmcgaW50byBpdHMgbW9zdCBjb21wYWN0IHN0cmluZyByZXByZXNlbnRhdGlvbi5cbiAqIFN0cmlwcyB3aGl0ZXNwYWNlIGFuZCBub24taGV4IGNoYXJhY3RlcnMsIGFuZCBjb2VyY2VzIGxldHRlcnMgdG8gdXBwZXJjYXNlLlxuICogQHBhcmFtIHtzdHJpbmd9IGhleFN0cmluZ1xuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0cy5taW5pZnlIZXggPSBmdW5jdGlvbiAoaGV4U3RyaW5nKSB7XG4gIHJldHVybiBoZXhTdHJpbmcucmVwbGFjZSgvW14wLTlBLUZdL2dpLCAnJykudG9VcHBlckNhc2UoKTtcbn07XG5cbi8qKlxuICogUmVkdWNlcyBhbGwgd2hpdGVzcGFjZSB0byBzaW5nbGUgY2hhcmFjdGVycyBhbmQgc3RyaXBzIG5vbi1kaWdpdHMuXG4gKiBAcGFyYW0gZGVjaW1hbFN0cmluZ1xuICovXG5leHBvcnRzLm1pbmlmeURlY2ltYWwgPSBmdW5jdGlvbiAoZGVjaW1hbFN0cmluZykge1xuICByZXR1cm4gZGVjaW1hbFN0cmluZy5yZXBsYWNlKC8oXlxccyt8XFxzKyR8W14wLTlcXHNdKS9nLCAnJykucmVwbGFjZSgvXFxzKy9nLCAnICcpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGhleCBzdHJpbmcgdG8gYSBmb3JtYXR0ZWQgcmVwcmVzZW50YXRpb24sIHdpdGggY2h1bmtzIG9mXG4gKiBhIHNldCBzaXplIHNlcGFyYXRlZCBieSBhIHNwYWNlLlxuICogQHBhcmFtIHtzdHJpbmd9IGhleFN0cmluZ1xuICogQHBhcmFtIHtudW1iZXJ9IGNodW5rU2l6ZSAtIGluIGJpdHMhXG4gKiBAcGFyYW0ge251bWJlcn0gW29mZnNldF0gaGV4LWRpZ2l0LW9mZnNldCBmb3IgZm9ybWF0dGluZyBlZmZlY3Q7IGRlZmF1bHQgMC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IGZvcm1hdHRlZCBoZXhcbiAqL1xuZXhwb3J0cy5mb3JtYXRIZXggPSBmdW5jdGlvbiAoaGV4U3RyaW5nLCBjaHVua1NpemUsIG9mZnNldCkge1xuICBvZmZzZXQgPSB1dGlscy52YWx1ZU9yKG9mZnNldCwgMCk7XG4gIGlmIChjaHVua1NpemUgPD0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiUGFyYW1ldGVyIGNodW5rU2l6ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB6ZXJvXCIpO1xuICB9XG5cbiAgLy8gRG9uJ3QgZm9ybWF0IGhleCB3aGVuIHRoZSBjaHVua1NpemUgZG9lc24ndCBhbGlnbiB3aXRoIGhleCBjaGFyYWN0ZXJzLlxuICBpZiAoY2h1bmtTaXplICUgNCAhPT0gMCkge1xuICAgIHJldHVybiBoZXhTdHJpbmc7XG4gIH1cblxuICB2YXIgaGV4Q2h1bmtTaXplID0gY2h1bmtTaXplIC8gNDtcbiAgdmFyIGhleCA9IGV4cG9ydHMubWluaWZ5SGV4KGhleFN0cmluZyk7XG5cbiAgdmFyIGNodW5rcyA9IFtdO1xuICB2YXIgZmlyc3RDaHVua0xlbmd0aCA9IHV0aWxzLm1vZChvZmZzZXQsIGhleENodW5rU2l6ZSk7XG4gIGlmIChmaXJzdENodW5rTGVuZ3RoID4gMCkge1xuICAgIGNodW5rcy5wdXNoKGhleC5zdWJzdHIoMCwgZmlyc3RDaHVua0xlbmd0aCkpO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IGZpcnN0Q2h1bmtMZW5ndGg7IGkgPCBoZXgubGVuZ3RoOyBpICs9IGhleENodW5rU2l6ZSkge1xuICAgIGNodW5rcy5wdXNoKGhleC5zdWJzdHIoaSwgaGV4Q2h1bmtTaXplKSk7XG4gIH1cblxuICByZXR1cm4gY2h1bmtzLmpvaW4oJyAnKTtcbn07XG5cbi8qKlxuICogVGFrZXMgYSBzZXQgb2Ygd2hpdGVzcGFjZS1zZXBhcmF0ZWQgbnVtYmVycyBhbmQgcGFkcyB0aGUgc3BhY2luZyBiZXR3ZWVuXG4gKiB0aGVtIHRvIHRoZSB3aWR0aCBvZiB0aGUgd2lkZXN0IG51bWJlciwgc28gdGhhdCB0aGV5IGxpbmUgdXAgd2hlbiB0aGV5XG4gKiB3cmFwLlxuICogQHBhcmFtIHtzdHJpbmd9IGRlY2ltYWxTdHJpbmdcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGFsaWduZWQgZGVjaW1hbCBzdHJpbmdcbiAqL1xuZXhwb3J0cy5hbGlnbkRlY2ltYWwgPSBmdW5jdGlvbiAoZGVjaW1hbFN0cmluZykge1xuICBpZiAoZGVjaW1hbFN0cmluZy5yZXBsYWNlKC9cXEQvZywgJycpID09PSAnJykge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHZhciBudW1iZXJzID0gZXhwb3J0cy5taW5pZnlEZWNpbWFsKGRlY2ltYWxTdHJpbmcpLnNwbGl0KC9cXHMrLyk7XG5cbiAgLy8gRmluZCB0aGUgbGVuZ3RoIG9mIHRoZSBsb25nZXN0IG51bWJlclxuICB2YXIgbW9zdERpZ2l0cyA9IG51bWJlcnMucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cikge1xuICAgIGlmIChjdXIubGVuZ3RoID4gcHJldikge1xuICAgICAgcmV0dXJuIGN1ci5sZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiBwcmV2O1xuICB9LCAwKTtcblxuICB2YXIgemVyb1BhZGRpbmcgPSAnMCcucmVwZWF0KG1vc3REaWdpdHMpO1xuXG4gIHJldHVybiBudW1iZXJzLm1hcChmdW5jdGlvbiAobnVtU3RyaW5nKSB7XG4gICAgLy8gTGVmdC1wYWQgZWFjaCBudW1iZXIgd2l0aCBub24tYnJlYWtpbmcgc3BhY2VzIHVwIHRvIG1heCB3aWR0aC5cbiAgICByZXR1cm4gKHplcm9QYWRkaW5nICsgbnVtU3RyaW5nKS5zbGljZSgtbW9zdERpZ2l0cyk7XG4gIH0pLmpvaW4oJyAnKTtcbn07XG5cbi8qKlxuICogSW50ZXJwcmV0cyBhIHN0cmluZyBvZiBBcyBhbmQgQnMgYXMgYmluYXJ5IHdoZXJlIEEgaXMgMCBhbmQgQiBpcyAxLCB0aGVuXG4gKiBpbnRlcnByZXRzIHRoYXQgYmluYXJ5IGFzIGEgc2luZ2xlIG51bWJlciwgYW5kIHJldHVybnMgdGhhdCBudW1iZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gYWJTdHJpbmdcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmV4cG9ydHMuYWJUb0ludCA9IGZ1bmN0aW9uIChhYlN0cmluZykge1xuICByZXR1cm4gZXhwb3J0cy5iaW5hcnlUb0ludChleHBvcnRzLmFiVG9CaW5hcnkoYWJTdHJpbmcpKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBudW1iZXIgdG8gYW4gQUIgYmluYXJ5IHJlcHJlc2VudGF0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtXG4gKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydHMuaW50VG9BQiA9IGZ1bmN0aW9uIChudW0sIHdpZHRoKSB7XG4gIHJldHVybiBleHBvcnRzLmJpbmFyeVRvQUIoZXhwb3J0cy5pbnRUb0JpbmFyeShudW0sIHdpZHRoKSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIEFzIGFuZCBCcyB0byBhIGJpbmFyeSBzdHJpbmcsIHdoZXJlIEEgaXMgMCBhbmQgQiBpcyAxLlxuICogQHBhcmFtIHtzdHJpbmd9IGFiU3RyaW5nXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnRzLmFiVG9CaW5hcnkgPSBmdW5jdGlvbiAoYWJTdHJpbmcpIHtcbiAgcmV0dXJuIGV4cG9ydHMubWluaWZ5QUIoYWJTdHJpbmcpLnJlcGxhY2UoL0EvZywgJzAnKS5yZXBsYWNlKC9CL2csICcxJyk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGJpbmFyeSBpbnRvIEFzIGFuZCBCcywgd2hlcmUgMCBpcyBBIGFuZCAxIGlzIEIuXG4gKiBAcGFyYW0ge3N0cmluZ30gYmluYXJ5U3RyaW5nXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnRzLmJpbmFyeVRvQUIgPSBmdW5jdGlvbiAoYmluYXJ5U3RyaW5nKSB7XG4gIHJldHVybiBleHBvcnRzLm1pbmlmeUJpbmFyeShiaW5hcnlTdHJpbmcpLnJlcGxhY2UoLzAvZywgJ0EnKS5yZXBsYWNlKC8xL2csICdCJyk7XG59O1xuXG4vKipcbiAqIEludGVycHJldHMgYSBiaW5hcnkgc3RyaW5nIGFzIGEgc2luZ2xlIG51bWJlciwgYW5kIHJldHVybnMgdGhhdCBudW1iZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gYmluYXJ5U3RyaW5nXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnRzLmJpbmFyeVRvSW50ID0gZnVuY3Rpb24gKGJpbmFyeVN0cmluZykge1xuICByZXR1cm4gcGFyc2VJbnQoZXhwb3J0cy5taW5pZnlCaW5hcnkoYmluYXJ5U3RyaW5nKSwgMik7XG59O1xuXG52YXIgaW50VG9TdHJpbmcgPSBmdW5jdGlvbiAoaW50LCBiYXNlLCB3aWR0aCkge1xuICBpZiAod2lkdGggPD0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiT3V0cHV0IHdpZHRoIG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm9cIik7XG4gIH1cbiAgcmV0dXJuIE5ldFNpbVV0aWxzLnplcm9QYWRMZWZ0KGludC50b1N0cmluZyhiYXNlKSwgd2lkdGgpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIG51bWJlciB0byBhIGJpbmFyeSBzdHJpbmcgcmVwcmVzZW50YXRpb24gd2l0aCB0aGUgZ2l2ZW4gd2lkdGguXG4gKiBAcGFyYW0ge251bWJlcn0gaW50IC0gbnVtYmVyIHRvIGNvbnZlcnRcbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIG51bWJlciBvZiBiaXRzIHRvIHVzZVxuICogQHJldHVybnMge3N0cmluZ30gLSBiaW5hcnkgcmVwcmVzZW50YXRpb24gd2l0aCBsZW5ndGggb2YgXCJ3aWR0aFwiXG4gKi9cbmV4cG9ydHMuaW50VG9CaW5hcnkgPSBmdW5jdGlvbiAoaW50LCB3aWR0aCkge1xuICByZXR1cm4gaW50VG9TdHJpbmcoaW50LCAyLCB3aWR0aCk7XG59O1xuXG4vKipcbiAqIEludGVycHJldHMgYSBoZXggc3RyaW5nIGFzIGEgc2luZ2xlIG51bWJlciwgYW5kIHJldHVybnMgdGhhdCBudW1iZXIuXG4gKiBAcGFyYW0gaGV4YWRlY2ltYWxTdHJpbmdcbiAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gKi9cbmV4cG9ydHMuaGV4VG9JbnQgPSBmdW5jdGlvbiAoaGV4YWRlY2ltYWxTdHJpbmcpIHtcbiAgcmV0dXJuIHBhcnNlSW50KGV4cG9ydHMubWluaWZ5SGV4KGhleGFkZWNpbWFsU3RyaW5nKSwgMTYpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIG51bWJlciB0byBhIGhleGFkZWNpbWFsIHN0cmluZyByZXByZXNlbnRhdGlvbiB3aXRoIHRoZSBnaXZlblxuICogd2lkdGguXG4gKiBAcGFyYW0ge251bWJlcn0gaW50IC0gbnVtYmVyIHRvIGNvbnZlcnRcbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIG51bWJlciBvZiBjaGFyYWN0ZXJzIHRvIHVzZVxuICogQHJldHVybnMge3N0cmluZ30gLSBoZXggcmVwcmVzZW50YXRpb24gd2l0aCBsZW5ndGggb2YgXCJ3aWR0aFwiXG4gKi9cbmV4cG9ydHMuaW50VG9IZXggPSBmdW5jdGlvbiAoaW50LCB3aWR0aCkge1xuICByZXR1cm4gaW50VG9TdHJpbmcoaW50LCAxNiwgd2lkdGgpLnRvVXBwZXJDYXNlKCk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgaGV4IHN0cmluZyB0byBhIGJpbmFyeSBzdHJpbmcsIGJ5IG1hcHBpbmcgZWFjaCBoZXggY2hhcmFjdGVyXG4gKiB0byBmb3VyIGJpdHMgb2YgYmluYXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGhleGFkZWNpbWFsU3RyaW5nXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBiaW5hcnkgcmVwcmVzZW50YXRpb24uXG4gKi9cbmV4cG9ydHMuaGV4VG9CaW5hcnkgPSBmdW5jdGlvbiAoaGV4YWRlY2ltYWxTdHJpbmcpIHtcbiAgdmFyIHVnbHlIZXggPSBleHBvcnRzLm1pbmlmeUhleChoZXhhZGVjaW1hbFN0cmluZyk7XG4gIHZhciBiaW5hcnkgPSAnJztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHVnbHlIZXgubGVuZ3RoOyBpKyspIHtcbiAgICBiaW5hcnkgKz0gZXhwb3J0cy5pbnRUb0JpbmFyeShleHBvcnRzLmhleFRvSW50KHVnbHlIZXguc3Vic3RyKGksIDEpKSwgNCk7XG4gIH1cblxuICByZXR1cm4gYmluYXJ5O1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGJpbmFyeSBzdHJpbmcgdG8gYSBoZXggc3RyaW5nLCBtYXBwaW5nIGVhY2ggZm91ciBiaXRzIGludG9cbiAqIGEgaGV4IGNoYXJhY3RlciBhbmQgcmlnaHQtcGFkZGluZyB3aXRoIHplcm9lcyB0byByb3VuZCBvdXQgdGhlIGJpbmFyeSBsZW5ndGguXG4gKiBAcGFyYW0ge3N0cmluZ30gYmluYXJ5U3RyaW5nXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnRzLmJpbmFyeVRvSGV4ID0gZnVuY3Rpb24gKGJpbmFyeVN0cmluZykge1xuICB2YXIgY3VycmVudE5pYmJsZTtcbiAgdmFyIG5pYmJsZVdpZHRoID0gNDtcbiAgdmFyIGNoYXJzID0gW107XG4gIHZhciB1Z2x5QmluYXJ5ID0gZXhwb3J0cy5taW5pZnlCaW5hcnkoYmluYXJ5U3RyaW5nKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB1Z2x5QmluYXJ5Lmxlbmd0aDsgaSArPSBuaWJibGVXaWR0aCkge1xuICAgIGN1cnJlbnROaWJibGUgPSBOZXRTaW1VdGlscy56ZXJvUGFkUmlnaHQoXG4gICAgICAgIHVnbHlCaW5hcnkuc3Vic3RyKGksIG5pYmJsZVdpZHRoKSwgbmliYmxlV2lkdGgpO1xuICAgIGNoYXJzLnB1c2goZXhwb3J0cy5pbnRUb0hleChleHBvcnRzLmJpbmFyeVRvSW50KGN1cnJlbnROaWJibGUpLCAxKSk7XG4gIH1cbiAgcmV0dXJuIGNoYXJzLmpvaW4oJycpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBzZXQgb2YgbnVtYmVycyB0byBhIGJpbmFyeSByZXByZXNlbnRhdGlvbiBvZiB0aG9zZSBudW1iZXJzXG4gKiB1c2luZyB0aGUgZ2l2ZW4gYnl0ZS1zaXplLlxuICogQHBhcmFtIHtzdHJpbmd9IGRlY2ltYWxTdHJpbmcgLSBBIHNldCBvZiBudW1iZXJzIHNlcGFyYXRlZCBieSB3aGl0ZXNwYWNlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJ5dGVTaXplIC0gSG93IG1hbnkgYml0cyB0byB1c2UgdG8gcmVwcmVzZW50IGVhY2ggbnVtYmVyLlxuICogQHJldHVybnMge3N0cmluZ30gQmluYXJ5IHJlcHJlc2VudGF0aW9uLlxuICovXG5leHBvcnRzLmRlY2ltYWxUb0JpbmFyeSA9IGZ1bmN0aW9uIChkZWNpbWFsU3RyaW5nLCBieXRlU2l6ZSkge1xuICAvLyBTcGVjaWFsIGNhc2U6IE5vIG51bWJlcnNcbiAgaWYgKGRlY2ltYWxTdHJpbmcucmVwbGFjZSgvXFxEL2csICcnKSA9PT0gJycpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICByZXR1cm4gZXhwb3J0cy5taW5pZnlEZWNpbWFsKGRlY2ltYWxTdHJpbmcpXG4gICAgICAuc3BsaXQoL1xccysvKVxuICAgICAgLm1hcChmdW5jdGlvbiAobnVtU3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzLmludFRvQmluYXJ5KHBhcnNlSW50KG51bVN0cmluZywgMTApLCBieXRlU2l6ZSk7XG4gICAgICB9KVxuICAgICAgLmpvaW4oJycpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBiaW5hcnkgdG8gYSBzdHJpbmcgb2YgZGVjaW1hbCBudW1iZXJzIHNlcGFyYXRlZCBieSB3aGl0ZXNwYWNlLlxuICogQHBhcmFtIHtzdHJpbmd9IGJpbmFyeVN0cmluZ1xuICogQHBhcmFtIHtudW1iZXJ9IGJ5dGVTaXplIC0gSG93IG1hbnkgYml0cyB0byByZWFkIGZvciBlYWNoIG51bWJlclxuICogQHJldHVybnMge3N0cmluZ30gZGVjaW1hbCBudW1iZXJzXG4gKi9cbmV4cG9ydHMuYmluYXJ5VG9EZWNpbWFsID0gZnVuY3Rpb24gKGJpbmFyeVN0cmluZywgYnl0ZVNpemUpIHtcbiAgdmFyIGN1cnJlbnRCeXRlO1xuICB2YXIgbnVtYmVycyA9IFtdO1xuICB2YXIgYmluYXJ5ID0gZXhwb3J0cy5taW5pZnlCaW5hcnkoYmluYXJ5U3RyaW5nKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBiaW5hcnkubGVuZ3RoOyBpICs9IGJ5dGVTaXplKSB7XG4gICAgY3VycmVudEJ5dGUgPSBOZXRTaW1VdGlscy56ZXJvUGFkUmlnaHQoYmluYXJ5LnN1YnN0cihpLCBieXRlU2l6ZSksIGJ5dGVTaXplKTtcbiAgICBudW1iZXJzLnB1c2goZXhwb3J0cy5iaW5hcnlUb0ludChjdXJyZW50Qnl0ZSkpO1xuICB9XG4gIHJldHVybiBudW1iZXJzLmpvaW4oJyAnKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYXNjaWkgdG8gYmluYXJ5LCB1c2luZyB0aGUgZ2l2ZW4gYnl0ZXNpemUgZm9yIGVhY2ggY2hhcmFjdGVyLlxuICogT3ZlcmZsb3cgaXMgaWdub3JlZCAobGVmdC10cmltbWVkKTsgcmVjb21tZW5kIHVzaW5nIGEgYnl0ZXNpemUgb2YgOCBpblxuICogbW9zdCBjaXJjdW1zdGFuY2VzLlxuICogQHBhcmFtIHtzdHJpbmd9IGFzY2lpU3RyaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gYnl0ZVNpemVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydHMuYXNjaWlUb0JpbmFyeSA9IGZ1bmN0aW9uIChhc2NpaVN0cmluZywgYnl0ZVNpemUpIHtcbiAgdmFyIGJ5dGVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXNjaWlTdHJpbmcubGVuZ3RoOyBpKyspIHtcbiAgICBieXRlcy5wdXNoKGV4cG9ydHMuaW50VG9CaW5hcnkoYXNjaWlTdHJpbmcuY2hhckNvZGVBdChpKSwgYnl0ZVNpemUpKTtcbiAgfVxuICByZXR1cm4gYnl0ZXMuam9pbignJyk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGJpbmFyeSB0byBhbiBhc2NpaSBzdHJpbmcsIHVzaW5nIHRoZSBnaXZlbiBieXRlc2l6ZSBmb3IgZWFjaFxuICogY2hhcmFjdGVyLiAgSWYgdGhlIGJpbmFyeSBpcyBub3QgZGl2aXNpYmxlIGJ5IGJ5dGVzaXplLCB0aGUgZmluYWwgY2hhcmFjdGVyXG4gKiBpcyByaWdodC1wYWRkZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gYmluYXJ5U3RyaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gYnl0ZVNpemVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEFTQ0lJIHN0cmluZ1xuICovXG5leHBvcnRzLmJpbmFyeVRvQXNjaWkgPSBmdW5jdGlvbiAoYmluYXJ5U3RyaW5nLCBieXRlU2l6ZSkge1xuICBpZiAoYnl0ZVNpemUgPD0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiUGFyYW1ldGVyIGJ5dGVTaXplIG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm9cIik7XG4gIH1cblxuICB2YXIgY3VycmVudEJ5dGU7XG4gIHZhciBjaGFycyA9IFtdO1xuICB2YXIgYmluYXJ5ID0gZXhwb3J0cy5taW5pZnlCaW5hcnkoYmluYXJ5U3RyaW5nKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBiaW5hcnkubGVuZ3RoOyBpICs9IGJ5dGVTaXplKSB7XG4gICAgY3VycmVudEJ5dGUgPSBOZXRTaW1VdGlscy56ZXJvUGFkUmlnaHQoYmluYXJ5LnN1YnN0cihpLCBieXRlU2l6ZSksIGJ5dGVTaXplKTtcbiAgICBjaGFycy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoZXhwb3J0cy5iaW5hcnlUb0ludChjdXJyZW50Qnl0ZSkpKTtcbiAgfVxuICByZXR1cm4gY2hhcnMuam9pbignJyk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEJhc2U2NFBheWxvYWRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzdHJpbmcgLSB0aGUgYmFzZTY0LWVuY29kZWQgcGF5bG9hZFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGxlbiAtIHRoZSBsZW5ndGggb2YgdGhlIG9yaWdpbmFsIGJpbmFyeSBwYXlsb2FkXG4gKi9cblxuLyoqXG4gKiBDb252ZXJ0cyBiaW5hcnkgdG8gYSBiYXNlNjQgc3RyaW5nIGZvciBtb3JlIGVmZmljaWVudCBuZXR3b3JrXG4gKiB0cmFuc2Zlci4gQmVjYXVzZSBiYXNlNjQgZXhwZWN0cyBldmVuIGJ5dGVzLCB3ZSBwYWQgdGhlIGJpbmFyeSBzdHJpbmdcbiAqIHRvIHRoZSBuZWFyZXN0IGJ5dGUgYW5kIHJldHVybiB0aGUgb3JpZ2luYWwgbGVuZ3RoLiBUaGUgcmV2ZXJzZVxuICogY29udmVyc2lvbiBleHBlY3RzIHRvIGJlIGdpdmVuIHRoYXQgb3JpZ2luYWwgbGVuZ3RoLlxuICogQHBhcmFtIHtzdHJpbmd9IGJpbmFyeVN0cmluZ1xuICogQHJldHVybnMge0Jhc2U2NFBheWxvYWR9IE9iamVjdCBjb250YWluaW5nIHRoZSBiYXNlNjQgc3RyaW5nIGFuZCB0aGVcbiAqICAgICAgICAgIGxlbmd0aCBvZiBvZiB0aGUgb3JpZ2luYWwgYmluYXJ5U3RyaW5nXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IGlmIGJpbmFyeVN0cmluZyBhcmd1bWVudCBpcyBub3QgYVxuICogICAgICAgICBwcm9wZXJseS1mb3JtYXR0ZWQgc3RyaW5nIG9mIHplcm9lcyBhbmQgb25lcy5cbiAqIEBleGFtcGxlXG4gKiAvLyByZXR1cm5zIHsgc3RyaW5nOiBcImtnPT1cIiwgbGVuOiA3IH1cbiAqIERhdGFDb252ZXJ0ZXJzLmJpbmFyeVRvQmFzZTY0KFwiMTAwMTAwMVwiKTtcbiAqL1xuZXhwb3J0cy5iaW5hcnlUb0Jhc2U2NCA9IGZ1bmN0aW9uIChiaW5hcnlTdHJpbmcpIHtcblxuICBpZiAoL15bMDFdKiQvLnRlc3QoYmluYXJ5U3RyaW5nKSA9PT0gZmFsc2UpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXJndW1lbnQgYmluYXJ5U3RyaW5nIHRvIG1ldGhvZCBiaW5hcnlUb0Jhc2U2NFwiICtcbiAgICAgIFwibXVzdCBiZSBhIGJpbmFyeSBzdHJpbmc7IHJlY2VpdmVkIFxcXCJcIiArIGJpbmFyeVN0cmluZyArIFwiXFxcIiBpbnN0ZWFkXCIpO1xuICB9XG5cbiAgdmFyIGJ5dGVMZW4gPSBNYXRoLmNlaWwoYmluYXJ5U3RyaW5nLmxlbmd0aC84LjApICogODtcbiAgdmFyIHBhZGRlZEJpbmFyeVN0cmluZyA9IE5ldFNpbVV0aWxzLnplcm9QYWRSaWdodChiaW5hcnlTdHJpbmcsIGJ5dGVMZW4pO1xuICB2YXIgcGF5bG9hZCA9IHdpbmRvdy5idG9hKGV4cG9ydHMuYmluYXJ5VG9Bc2NpaShwYWRkZWRCaW5hcnlTdHJpbmcsIDgpKTtcblxuICByZXR1cm4geyBzdHJpbmc6IHBheWxvYWQsIGxlbjogYmluYXJ5U3RyaW5nLmxlbmd0aCB9O1xuXG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgYmFzZTY0IHN0cmluZyBiYWNrIGludG8gYSBiaW5hcnkgc3RyaW5nIG9mIHRoZSBzcGVjaWZpZWRcbiAqIGxlbmd0aC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlNjRzdHJpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IGJpbmFyeVN0cmluZ1xuICogQHRocm93cyB7VHlwZUVycm9yfSBpZiBiYXNlNjRzdHJpbmcgYXJndW1lbnQgaXMgbm90IGFcbiAqICAgICAgICAgcHJvcGVybHkgYmFzZTY0LWVuY29kZWQgc3RyaW5nXG4gKiBAZXhhbXBsZVxuICogLy8gcmV0dXJucyBcIjEwMDEwMDFcIlxuICogRGF0YUNvbnZlcnRlcnMuYmFzZTY0VG9CaW5hcnkoXCJrZz09XCIsIDcpO1xuICovXG5leHBvcnRzLmJhc2U2NFRvQmluYXJ5ID0gZnVuY3Rpb24gKGJhc2U2NHN0cmluZywgbGVuKSB7XG4gIHZhciBkZWNvZGVkRGF0YTtcbiAgdHJ5IHtcbiAgICBkZWNvZGVkRGF0YSA9IHdpbmRvdy5hdG9iKGJhc2U2NHN0cmluZyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXJndW1lbnQgYmFzZTY0c3RyaW5nIHRvIG1ldGhvZCBiYXNlNjRUb0JpbmFyeVwiICtcbiAgICAgICAgXCJtdXN0IGJlIGEgYmFzZTY0LWVuY29kZWQgc3RyaW5nXCIpO1xuICB9XG4gIHJldHVybiBleHBvcnRzLmFzY2lpVG9CaW5hcnkoZGVjb2RlZERhdGEsIDgpLnN1YnN0cigwLCBsZW4pO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBiaW5hcnkgdG8gYW4gYWRkcmVzcyBzdHJpbmcgdXNpbmcgdGhlIHByb3ZpZGVkIGFkZHJlc3MgZm9ybWF0LlxuICogQHBhcmFtIHtzdHJpbmd9IGJpbmFyeVN0cmluZ1xuICogQHBhcmFtIHtBZGRyZXNzSGVhZGVyRm9ybWF0fSBhZGRyZXNzRm9ybWF0XG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnRzLmJpbmFyeVRvQWRkcmVzc1N0cmluZyA9IGZ1bmN0aW9uIChiaW5hcnlTdHJpbmcsIGFkZHJlc3NGb3JtYXQpIHtcbiAgdmFyIGJpbmFyeSA9IGV4cG9ydHMubWluaWZ5QmluYXJ5KGJpbmFyeVN0cmluZyk7XG4gIGlmIChiaW5hcnkubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgdmFyIGluZGV4SW50b0JpbmFyeSA9IDA7XG5cbiAgLy8gUGFyZW50aGVzZXMgaW4gdGhlIHNwbGl0KCkgcmVnZXggY2F1c2UgdGhlIGRpdmlkaW5nIGVsZW1lbnRzIHRvIGJlIGNhcHR1cmVkXG4gIC8vIGFuZCBhbHNvIGluY2x1ZGVkIGluIHRoZSByZXR1cm4gdmFsdWUuXG4gIHJldHVybiBhZGRyZXNzRm9ybWF0LnNwbGl0KC8oXFxEKykvKS5tYXAoZnVuY3Rpb24gKGZvcm1hdFBhcnQpIHtcbiAgICB2YXIgYml0V2lkdGggPSBwYXJzZUludChmb3JtYXRQYXJ0LCAxMCk7XG4gICAgaWYgKGlzTmFOKGJpdFdpZHRoKSkge1xuICAgICAgLy8gUGFzcyBub24tbnVtYmVyIHBhcnRzIG9mIHRoZSBmb3JtYXQgdGhyb3VnaCwgc28gd2UgdXNlIHRoZSBvcmlnaW5hbFxuICAgICAgLy8gZW50ZXJlZCBjaGFyYWN0ZXJzL2xheW91dCBmb3IgZm9ybWF0dGluZy5cbiAgICAgIHJldHVybiBmb3JtYXRQYXJ0O1xuICAgIH1cblxuICAgIHZhciBiaW5hcnlTbGljZSA9IGJpbmFyeS5zdWJzdHIoaW5kZXhJbnRvQmluYXJ5LCBiaXRXaWR0aCk7XG4gICAgdmFyIGludFZhbCA9IGJpbmFyeVNsaWNlLmxlbmd0aCA+IDAgP1xuICAgICAgICBleHBvcnRzLmJpbmFyeVRvSW50KGJpbmFyeVNsaWNlKSA6IDA7XG4gICAgaW5kZXhJbnRvQmluYXJ5ICs9IGJpdFdpZHRoO1xuICAgIHJldHVybiBpbnRWYWwudG9TdHJpbmcoKTtcbiAgfSkuam9pbignJyk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgZm9ybWF0dGVkIGFkZHJlc3Mgc3RyaW5nIChkZWNpbWFsIG51bWJlcnMgd2l0aCBzZXBhcmF0b3JzKSBpbnRvXG4gKiBiaW5hcnkgd2l0aCBiaXQtd2lkdGhzIGZvciBlYWNoIHBhcnQgbWF0Y2hpbmcgdGhlIGdpdmVuIGZvcm1hdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBhZGRyZXNzU3RyaW5nXG4gKiBAcGFyYW0ge0FkZHJlc3NIZWFkZXJGb3JtYXR9IGFkZHJlc3NGb3JtYXRcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydHMuYWRkcmVzc1N0cmluZ1RvQmluYXJ5ID0gZnVuY3Rpb24gKGFkZHJlc3NTdHJpbmcsIGFkZHJlc3NGb3JtYXQpIHtcbiAgaWYgKGFkZHJlc3NTdHJpbmcubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgLy8gQWN0dWFsIHVzZXIgaW5wdXQsIGNvbnZlcnRlZCB0byBhIG51bWJlcltdXG4gIHZhciBhZGRyZXNzUGFydHMgPSBhZGRyZXNzU3RyaW5nLnRvU3RyaW5nKCkuc3BsaXQoL1xcRCsvKS5tYXAoZnVuY3Rpb24gKHN0cmluZ1BhcnQpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQoc3RyaW5nUGFydCwgMTApO1xuICB9KS5maWx0ZXIoZnVuY3Rpb24gKG51bWJlclBhcnQpIHtcbiAgICByZXR1cm4gIWlzTmFOKG51bWJlclBhcnQpO1xuICB9KTtcblxuICAvLyBGb3JtYXQsIGNvbnZlcnRlZCB0byBhIG51bWJlcltdIHdoZXJlIHRoZSBudW1iZXJzIGFyZSBiaXQtd2lkdGhzXG4gIHZhciBwYXJ0V2lkdGhzID0gYWRkcmVzc0Zvcm1hdC5zcGxpdCgvXFxEKy8pLm1hcChmdW5jdGlvbihzdHJpbmdQYXJ0KSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHN0cmluZ1BhcnQsIDEwKTtcbiAgfSkuZmlsdGVyKGZ1bmN0aW9uIChudW1iZXJQYXJ0KSB7XG4gICAgcmV0dXJuICFpc05hTihudW1iZXJQYXJ0KTtcbiAgfSk7XG5cbiAgdmFyIHBhcnRWYWx1ZTtcbiAgdmFyIGJpbmFyeSA9ICcnO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRXaWR0aHMubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0VmFsdWUgPSBpIDwgYWRkcmVzc1BhcnRzLmxlbmd0aCA/IGFkZHJlc3NQYXJ0c1tpXSA6IDA7XG4gICAgYmluYXJ5ID0gYmluYXJ5ICsgZXhwb3J0cy5pbnRUb0JpbmFyeShwYXJ0VmFsdWUsIHBhcnRXaWR0aHNbaV0pO1xuICB9XG4gIHJldHVybiBiaW5hcnk7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgYSBiaW5hcnkgc3RyaW5nIHRvIGEgZm9ybWF0dGVkIHJlcHJlc2VudGF0aW9uLCB3aXRoIGNodW5rcyB0aGF0XG4gKiBjb3JyZXNwb25kIHRvIHRoZSBwYXJ0cyBvZiB0aGUgYWRkcmVzcyBoZWFkZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gYmluYXJ5U3RyaW5nXG4gKiBAcGFyYW0ge0FkZHJlc3NIZWFkZXJGb3JtYXR9IGFkZHJlc3NGb3JtYXRcbiAqL1xuZXhwb3J0cy5mb3JtYXRCaW5hcnlGb3JBZGRyZXNzSGVhZGVyID0gZnVuY3Rpb24gKGJpbmFyeVN0cmluZywgYWRkcmVzc0Zvcm1hdCkge1xuICB2YXIgYmluYXJ5ID0gZXhwb3J0cy5taW5pZnlCaW5hcnkoYmluYXJ5U3RyaW5nKTtcblxuICB2YXIgcGFydFdpZHRocyA9IGFkZHJlc3NGb3JtYXQuc3BsaXQoL1xcRCsvKS5tYXAoZnVuY3Rpb24oc3RyaW5nUGFydCkge1xuICAgIHJldHVybiBwYXJzZUludChzdHJpbmdQYXJ0LCAxMCk7XG4gIH0pLmZpbHRlcihmdW5jdGlvbiAobnVtYmVyUGFydCkge1xuICAgIHJldHVybiAhaXNOYU4obnVtYmVyUGFydCk7XG4gIH0pO1xuXG4gIHZhciBjaHVua3MgPSBbXTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgcGFydFdpZHRocy5mb3JFYWNoKGZ1bmN0aW9uIChiaXRXaWR0aCkge1xuICAgIHZhciBuZXh0ID0gYmluYXJ5LnN1YnN0cihpbmRleCwgYml0V2lkdGgpO1xuICAgIGlmIChuZXh0Lmxlbmd0aCA+IDApIHtcbiAgICAgIGNodW5rcy5wdXNoKG5leHQpO1xuICAgIH1cbiAgICBpbmRleCArPSBiaXRXaWR0aDtcbiAgfSk7XG5cbiAgdmFyIG5leHQgPSBiaW5hcnkuc3Vic3RyKGluZGV4KTtcbiAgaWYgKG5leHQubGVuZ3RoID4gMCkge1xuICAgIGNodW5rcy5wdXNoKG5leHQpO1xuICB9XG5cbiAgcmV0dXJuIGNodW5rcy5qb2luKCcgJyk7XG59O1xuIiwiOyhmdW5jdGlvbiAoKSB7XG5cbiAgdmFyIG9iamVjdCA9IHR5cGVvZiBleHBvcnRzICE9ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXM7IC8vICM4OiB3ZWIgd29ya2Vyc1xuICB2YXIgY2hhcnMgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0nO1xuXG4gIGZ1bmN0aW9uIEludmFsaWRDaGFyYWN0ZXJFcnJvcihtZXNzYWdlKSB7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgfVxuICBJbnZhbGlkQ2hhcmFjdGVyRXJyb3IucHJvdG90eXBlID0gbmV3IEVycm9yO1xuICBJbnZhbGlkQ2hhcmFjdGVyRXJyb3IucHJvdG90eXBlLm5hbWUgPSAnSW52YWxpZENoYXJhY3RlckVycm9yJztcblxuICAvLyBlbmNvZGVyXG4gIC8vIFtodHRwczovL2dpc3QuZ2l0aHViLmNvbS85OTkxNjZdIGJ5IFtodHRwczovL2dpdGh1Yi5jb20vbmlnbmFnXVxuICBvYmplY3QuYnRvYSB8fCAoXG4gIG9iamVjdC5idG9hID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgdmFyIHN0ciA9IFN0cmluZyhpbnB1dCk7XG4gICAgZm9yIChcbiAgICAgIC8vIGluaXRpYWxpemUgcmVzdWx0IGFuZCBjb3VudGVyXG4gICAgICB2YXIgYmxvY2ssIGNoYXJDb2RlLCBpZHggPSAwLCBtYXAgPSBjaGFycywgb3V0cHV0ID0gJyc7XG4gICAgICAvLyBpZiB0aGUgbmV4dCBzdHIgaW5kZXggZG9lcyBub3QgZXhpc3Q6XG4gICAgICAvLyAgIGNoYW5nZSB0aGUgbWFwcGluZyB0YWJsZSB0byBcIj1cIlxuICAgICAgLy8gICBjaGVjayBpZiBkIGhhcyBubyBmcmFjdGlvbmFsIGRpZ2l0c1xuICAgICAgc3RyLmNoYXJBdChpZHggfCAwKSB8fCAobWFwID0gJz0nLCBpZHggJSAxKTtcbiAgICAgIC8vIFwiOCAtIGlkeCAlIDEgKiA4XCIgZ2VuZXJhdGVzIHRoZSBzZXF1ZW5jZSAyLCA0LCA2LCA4XG4gICAgICBvdXRwdXQgKz0gbWFwLmNoYXJBdCg2MyAmIGJsb2NrID4+IDggLSBpZHggJSAxICogOClcbiAgICApIHtcbiAgICAgIGNoYXJDb2RlID0gc3RyLmNoYXJDb2RlQXQoaWR4ICs9IDMvNCk7XG4gICAgICBpZiAoY2hhckNvZGUgPiAweEZGKSB7XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ2hhcmFjdGVyRXJyb3IoXCInYnRvYScgZmFpbGVkOiBUaGUgc3RyaW5nIHRvIGJlIGVuY29kZWQgY29udGFpbnMgY2hhcmFjdGVycyBvdXRzaWRlIG9mIHRoZSBMYXRpbjEgcmFuZ2UuXCIpO1xuICAgICAgfVxuICAgICAgYmxvY2sgPSBibG9jayA8PCA4IHwgY2hhckNvZGU7XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH0pO1xuXG4gIC8vIGRlY29kZXJcbiAgLy8gW2h0dHBzOi8vZ2lzdC5naXRodWIuY29tLzEwMjAzOTZdIGJ5IFtodHRwczovL2dpdGh1Yi5jb20vYXRrXVxuICBvYmplY3QuYXRvYiB8fCAoXG4gIG9iamVjdC5hdG9iID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgdmFyIHN0ciA9IFN0cmluZyhpbnB1dCkucmVwbGFjZSgvPSskLywgJycpO1xuICAgIGlmIChzdHIubGVuZ3RoICUgNCA9PSAxKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZENoYXJhY3RlckVycm9yKFwiJ2F0b2InIGZhaWxlZDogVGhlIHN0cmluZyB0byBiZSBkZWNvZGVkIGlzIG5vdCBjb3JyZWN0bHkgZW5jb2RlZC5cIik7XG4gICAgfVxuICAgIGZvciAoXG4gICAgICAvLyBpbml0aWFsaXplIHJlc3VsdCBhbmQgY291bnRlcnNcbiAgICAgIHZhciBiYyA9IDAsIGJzLCBidWZmZXIsIGlkeCA9IDAsIG91dHB1dCA9ICcnO1xuICAgICAgLy8gZ2V0IG5leHQgY2hhcmFjdGVyXG4gICAgICBidWZmZXIgPSBzdHIuY2hhckF0KGlkeCsrKTtcbiAgICAgIC8vIGNoYXJhY3RlciBmb3VuZCBpbiB0YWJsZT8gaW5pdGlhbGl6ZSBiaXQgc3RvcmFnZSBhbmQgYWRkIGl0cyBhc2NpaSB2YWx1ZTtcbiAgICAgIH5idWZmZXIgJiYgKGJzID0gYmMgJSA0ID8gYnMgKiA2NCArIGJ1ZmZlciA6IGJ1ZmZlcixcbiAgICAgICAgLy8gYW5kIGlmIG5vdCBmaXJzdCBvZiBlYWNoIDQgY2hhcmFjdGVycyxcbiAgICAgICAgLy8gY29udmVydCB0aGUgZmlyc3QgOCBiaXRzIHRvIG9uZSBhc2NpaSBjaGFyYWN0ZXJcbiAgICAgICAgYmMrKyAlIDQpID8gb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMjU1ICYgYnMgPj4gKC0yICogYmMgJiA2KSkgOiAwXG4gICAgKSB7XG4gICAgICAvLyB0cnkgdG8gZmluZCBjaGFyYWN0ZXIgaW4gdGFibGUgKDAtNjMsIG5vdCBmb3VuZCA9PiAtMSlcbiAgICAgIGJ1ZmZlciA9IGNoYXJzLmluZGV4T2YoYnVmZmVyKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfSk7XG5cbn0oKSk7XG4iLCIvKipcbiAqIEBvdmVydmlldyBTdGF0aWMgaGVscGVyIG1ldGhvZHMgZm9yIE5ldFNpbS5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgXyA9IHV0aWxzLmdldExvZGFzaCgpO1xudmFyIGkxOG4gPSByZXF1aXJlKCcuL2xvY2FsZScpO1xudmFyIE5ldFNpbUNvbnN0YW50cyA9IHJlcXVpcmUoJy4vTmV0U2ltQ29uc3RhbnRzJyk7XG52YXIgTmV0U2ltR2xvYmFscyA9IHJlcXVpcmUoJy4vTmV0U2ltR2xvYmFscycpO1xuXG52YXIgbG9nZ2VyID0gcmVxdWlyZSgnLi9OZXRTaW1Mb2dnZXInKS5nZXRTaW5nbGV0b24oKTtcblxudmFyIEVuY29kaW5nVHlwZSA9IE5ldFNpbUNvbnN0YW50cy5FbmNvZGluZ1R5cGU7XG5cbi8qKlxuICogTWFrZSBhIG5ldyBTVkcgZWxlbWVudCwgYXBwcm9wcmlhdGVseSBuYW1lc3BhY2VkLCB3cmFwcGVkIGluIGEgalF1ZXJ5XG4gKiBvYmplY3QgZm9yIChzZW1pLSllYXN5IG1hbmlwdWxhdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gdGhlIHRhZ25hbWUgZm9yIHRoZSBzdmcgZWxlbWVudC5cbiAqIEByZXR1cm5zIHtqUXVlcnl9IGZvciBjaGFpbmluZ1xuICovXG5leHBvcnRzLmpRdWVyeVN2Z0VsZW1lbnQgPSBmdW5jdGlvbiAodHlwZSkge1xuICB2YXIgbmV3RWxlbWVudCA9ICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsIHR5cGUpKTtcblxuICAvKipcbiAgICogT3ZlcnJpZGUgYWRkQ2xhc3Mgc2luY2UgalF1ZXJ5IGFkZENsYXNzIGRvZXNuJ3Qgd29yayBvbiBzdmcuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWVcbiAgICovXG4gIG5ld0VsZW1lbnQuYWRkQ2xhc3MgPSBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgdmFyIG9sZENsYXNzZXMgPSBuZXdFbGVtZW50LmF0dHIoJ2NsYXNzJyk7XG4gICAgaWYgKCFvbGRDbGFzc2VzKSB7XG4gICAgICBuZXdFbGVtZW50LmF0dHIoJ2NsYXNzJywgY2xhc3NOYW1lKTtcbiAgICB9IGVsc2UgaWYgKCFuZXdFbGVtZW50Lmhhc0NsYXNzKGNsYXNzTmFtZSkpIHtcbiAgICAgIG5ld0VsZW1lbnQuYXR0cignY2xhc3MnLCBvbGRDbGFzc2VzICsgJyAnICsgY2xhc3NOYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0VsZW1lbnQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIHJlbW92ZUNsYXNzIHNpbmNlIGpRdWVyeSByZW1vdmVDbGFzcyBkb2Vzbid0IHdvcmsgb24gc3ZnLlxuICAgKiBSZW1vdmVzIHRoZSBnaXZlbiBjbGFzc25hbWUgaWYgaXQgZXhpc3RzIG9uIHRoZSBlbGVtZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lXG4gICAqIEByZXR1cm5zIHtqUXVlcnl9IGZvciBjaGFpbmluZ1xuICAgKi9cbiAgbmV3RWxlbWVudC5yZW1vdmVDbGFzcyA9IGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICB2YXIgb2xkQ2xhc3NlcyA9IG5ld0VsZW1lbnQuYXR0cignY2xhc3MnKTtcbiAgICBpZiAob2xkQ2xhc3Nlcykge1xuICAgICAgdmFyIG5ld0NsYXNzZXMgPSBvbGRDbGFzc2VzXG4gICAgICAgICAgLnNwbGl0KC9cXHMrL2cpXG4gICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAod29yZCkge1xuICAgICAgICAgICAgcmV0dXJuIHdvcmQgIT09IGNsYXNzTmFtZTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5qb2luKCcgJyk7XG4gICAgICBuZXdFbGVtZW50LmF0dHIoJ2NsYXNzJywgbmV3Q2xhc3Nlcyk7XG4gICAgfVxuICAgIHJldHVybiBuZXdFbGVtZW50O1xuICB9O1xuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBoYXNDbGFzcyBzaW5jZSBqUXVlcnkgaGFzQ2xhc3MgZG9lc24ndCB3b3JrIG9uIHN2Zy5cbiAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGVsZW1lbnQgaGFzIHRoZSBnaXZlbiBjbGFzcy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIG5ld0VsZW1lbnQuaGFzQ2xhc3MgPSBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgdmFyIG9sZENsYXNzZXMgPSBuZXdFbGVtZW50LmF0dHIoJ2NsYXNzJyk7XG4gICAgcmV0dXJuIG9sZENsYXNzZXMgJiYgb2xkQ2xhc3Nlcy5zcGxpdCgvXFxzKy9nKVxuICAgICAgICAuc29tZShmdW5jdGlvbiAoZXhpc3RpbmdDbGFzcykge1xuICAgICAgICAgIHJldHVybiBleGlzdGluZ0NsYXNzID09PSBjbGFzc05hbWU7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0b2dnbGVDbGFzcyBzaW5jZSBqUXVlcnkgdG9nZ2xlQ2xhc3MgZG9lc24ndCB3b3JrIG9uIHN2Zy5cbiAgICpcbiAgICogVHdvIHZlcnNpb25zOlxuICAgKlxuICAgKiB0b2dnbGVDbGFzcyhjbGFzc05hbWUpIHJldmVyc2VzIHRoZSBzdGF0ZSBvZiB0aGUgY2xhc3Mgb24gdGhlIGVsZW1lbnQ7XG4gICAqICAgaWYgaXQgaGFzIHRoZSBjbGFzcyBpdCBnZXRzIHJlbW92ZWQsIGlmIGl0IGRvZXNuJ3QgaGF2ZSB0aGUgY2xhc3MgaXRcbiAgICogICBnZXRzIGFkZGVkLlxuICAgKlxuICAgKiB0b2dnbGVDbGFzcyhjbGFzc05hbWUsIHNob3VsZEhhdmVDbGFzcykgYWRkcyBvciByZW1vdmVzIHRoZSBjbGFzcyBvbiB0aGVcbiAgICogICBlbGVtZW50IGRlcGVuZGluZyBvbiB0aGUgdmFsdWUgb2YgdGhlIHNlY29uZCBhcmd1bWVudC5cbiAgICpcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtzaG91bGRIYXZlQ2xhc3NdXG4gICAqIEByZXR1cm5zIHtqUXVlcnl9IGZvciBjaGFpbmluZ1xuICAgKi9cbiAgbmV3RWxlbWVudC50b2dnbGVDbGFzcyA9IGZ1bmN0aW9uIChjbGFzc05hbWUsIHNob3VsZEhhdmVDbGFzcykge1xuICAgIC8vIERlZmF1bHQgc2Vjb25kIGFyZ3VtZW50IC0gaWYgbm90IHByb3ZpZGVkLCB3ZSBmbGlwIHRoZSBjdXJyZW50IHN0YXRlXG4gICAgc2hvdWxkSGF2ZUNsYXNzID0gdXRpbHMudmFsdWVPcihzaG91bGRIYXZlQ2xhc3MsICFuZXdFbGVtZW50Lmhhc0NsYXNzKGNsYXNzTmFtZSkpO1xuXG4gICAgaWYgKHNob3VsZEhhdmVDbGFzcykge1xuICAgICAgbmV3RWxlbWVudC5hZGRDbGFzcyhjbGFzc05hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdFbGVtZW50LnJlbW92ZUNsYXNzKGNsYXNzTmFtZSk7XG4gICAgfVxuICAgIHJldHVybiBuZXdFbGVtZW50O1xuICB9O1xuXG4gIHJldHVybiBuZXdFbGVtZW50O1xufTtcblxuLyoqXG4gKiBDaGVja3MgY29uZmlndXJhdGlvbiBhZ2FpbnN0IHRhYiB0eXBlIHRvIGRlY2lkZSB3aGV0aGVyIHRhYlxuICogb2YgdHlwZSBzaG91bGQgYmUgc2hvd24uXG4gKiBAcGFyYW0ge05ldFNpbUxldmVsQ29uZmlndXJhdGlvbn0gbGV2ZWxDb25maWdcbiAqIEBwYXJhbSB7TmV0U2ltVGFiVHlwZX0gdGFiVHlwZVxuICovXG5leHBvcnRzLnNob3VsZFNob3dUYWIgPSBmdW5jdGlvbiAobGV2ZWxDb25maWcsIHRhYlR5cGUpIHtcbiAgcmV0dXJuIGxldmVsQ29uZmlnLnNob3dUYWJzLmluZGV4T2YodGFiVHlwZSkgPiAtMTtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBsb2NhbGl6ZWQgc3RyaW5nIGZvciB0aGUgZ2l2ZW4gZW5jb2RpbmcgdHlwZS5cbiAqIEBwYXJhbSB7RW5jb2RpbmdUeXBlfSBlbmNvZGluZ1R5cGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGxvY2FsaXplZCBlbmNvZGluZyBuYW1lXG4gKi9cbmV4cG9ydHMuZ2V0RW5jb2RpbmdMYWJlbCA9IGZ1bmN0aW9uIChlbmNvZGluZ1R5cGUpIHtcbiAgaWYgKGVuY29kaW5nVHlwZSA9PT0gRW5jb2RpbmdUeXBlLkFTQ0lJKSB7XG4gICAgcmV0dXJuIGkxOG4uYXNjaWkoKTtcbiAgfSBlbHNlIGlmIChlbmNvZGluZ1R5cGUgPT09IEVuY29kaW5nVHlwZS5ERUNJTUFMKSB7XG4gICAgcmV0dXJuIGkxOG4uZGVjaW1hbCgpO1xuICB9IGVsc2UgaWYgKGVuY29kaW5nVHlwZSA9PT0gRW5jb2RpbmdUeXBlLkhFWEFERUNJTUFMKSB7XG4gICAgcmV0dXJuIGkxOG4uaGV4KCk7XG4gIH0gZWxzZSBpZiAoZW5jb2RpbmdUeXBlID09PSBFbmNvZGluZ1R5cGUuQklOQVJZKSB7XG4gICAgcmV0dXJuIGkxOG4uYmluYXJ5KCk7XG4gIH0gZWxzZSBpZiAoZW5jb2RpbmdUeXBlID09PSBFbmNvZGluZ1R5cGUuQV9BTkRfQikge1xuICAgIHJldHVybiBpMThuLmFfYW5kX2IoKTtcbiAgfVxuICByZXR1cm4gJyc7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBlbnVtT2JqIC0gVGVjaG5pY2FsbHkgYW55IG9iamVjdCwgYnV0IHNob3VsZCBiZSB1c2VkIHdpdGhcbiAqICAgICAgICBhbiBlbnVtIGxpa2UgdGhvc2UgZm91bmQgaW4gTmV0U2ltQ29uc3RhbnRzXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jIC0gQSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIHZhbHVlIGluIHRoZSBlbnVtLFxuICogICAgICAgIHdoaWNoIGdldHMgcGFzc2VkIHRoZSBlbnVtIHZhbHVlLlxuICovXG5leHBvcnRzLmZvckVhY2hFbnVtVmFsdWUgPSBmdW5jdGlvbiAoZW51bU9iaiwgZnVuYykge1xuICBmb3IgKHZhciBlbnVtS2V5IGluIGVudW1PYmopIHtcbiAgICBpZiAoZW51bU9iai5oYXNPd25Qcm9wZXJ0eShlbnVtS2V5KSkge1xuICAgICAgZnVuYyhlbnVtT2JqW2VudW1LZXldKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogUnVsZXMgdXNlZCBieSBzZXJpYWxpemVOdW1iZXIgYW5kIGRlc2VyaWFsaXplTnVtYmVyIHRvIG1hcCB1bnN1cHBvcnRlZFxuICogSmF2YVNjcmlwdCB2YWx1ZXMgaW50byBKU09OIGFuZCBiYWNrLlxuICogQHR5cGUge3tqc1ZhbDogbnVtYmVyLCBqc29uVmFsOiBzdHJpbmd9W119XG4gKiBAcmVhZG9ubHlcbiAqL1xudmFyIE5VTUJFUl9TRVJJQUxJWkFUSU9OX1JVTEVTID0gW1xuICB7IGpzVmFsOiBJbmZpbml0eSwganNvblZhbDogJ0luZmluaXR5JyB9LFxuICB7IGpzVmFsOiAtSW5maW5pdHksIGpzb25WYWw6ICctSW5maW5pdHknIH0sXG4gIHsganNWYWw6IE5hTiwganNvblZhbDogJ05hTicgfSxcbiAgeyBqc1ZhbDogdW5kZWZpbmVkLCBqc29uVmFsOiAndW5kZWZpbmVkJyB9XG5dO1xuXG4vKipcbiAqIENoZWNrcyB0aGF0IHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBhY3R1YWxseSB0aGUgc3BlY2lhbCB2YWx1ZSBOYU4sIHVubGlrZVxuICogc3RhbmRhcmQgaXNOYU4gd2hpY2ggcmV0dXJucyB0cnVlIGZvciBhbnl0aGluZyB0aGF0J3Mgbm90IGEgbnVtYmVyLlxuICogQHBhcmFtIHsqfSB2YWwgLSBhbnkgdmFsdWVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG52YXIgaXNFeGFjdGx5TmFOID0gZnVuY3Rpb24gKHZhbCkge1xuICAvLyBOYU4gaXMgdGhlIG9ubHkgdmFsdWUgaW4gSmF2YVNjcmlwdCB0aGF0IGlzIG5vdCBleGFjdGx5IGVxdWFsIHRvIGl0c2VsZi5cbiAgLy8gVGhlcmVmb3JlLCBpZiB2YWwgIT09IHZhbCwgdGhlbiB2YWwgbXVzdCBiZSBOYU4uXG4gIHJldHVybiB2YWwgIT09IHZhbDtcbn07XG5cbi8qKlxuICogQmVjYXVzZSBKU09OIGRvZXNuJ3Qgc3VwcG9ydCB0aGUgdmFsdWVzIEluZmluaXR5LCBOYU4sIG9yIHVuZGVmaW5lZCwgeW91IGNhblxuICogdXNlIHRoaXMgbWV0aG9kIHRvIHN0b3JlIHRob3NlIHZhbHVlcyBpbiBKU09OIGFzIHN0cmluZ3MuXG4gKiBAcGFyYW0ge251bWJlcnxOYU59IG51bVxuICogQHJldHVybnMge251bWJlcnxzdHJpbmd9XG4gKi9cbmV4cG9ydHMuc2VyaWFsaXplTnVtYmVyID0gZnVuY3Rpb24gKG51bSkge1xuICB2YXIgYXBwbGljYWJsZVJ1bGUgPSBfLmZpbmQoTlVNQkVSX1NFUklBTElaQVRJT05fUlVMRVMsIGZ1bmN0aW9uIChydWxlKSB7XG4gICAgcmV0dXJuIHJ1bGUuanNWYWwgPT09IG51bSB8fCAoaXNFeGFjdGx5TmFOKHJ1bGUuanNWYWwpICYmIGlzRXhhY3RseU5hTihudW0pKTtcbiAgfSk7XG4gIHJldHVybiBhcHBsaWNhYmxlUnVsZSA/IGFwcGxpY2FibGVSdWxlLmpzb25WYWwgOiBudW07XG59O1xuXG4vKipcbiAqIEJlY2F1c2UgSlNPTiBkb2Vzbid0IHN1cHBvcnQgdGhlIHZhbHVlcyBJbmZpbml0eSwgTmFOLCBvciB1bmRlZmluZWQsIHlvdSBjYW5cbiAqIHVzZSB0aGlzIG1ldGhvZCB0byByZXRyaWV2ZSBhIHZhbHVlIGZyb20gSlNPTiB0aGF0IGlzIGVpdGhlciBhIG51bWJlciBvciBvbmVcbiAqIG9mIHRob3NlIHZhbHVlcy5cbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gc3RvcmVkTnVtXG4gKiBAcmV0dXJucyB7bnVtYmVyfE5hTn1cbiAqL1xuZXhwb3J0cy5kZXNlcmlhbGl6ZU51bWJlciA9IGZ1bmN0aW9uIChzdG9yZWROdW0pIHtcbiAgdmFyIGFwcGxpY2FibGVSdWxlID0gXy5maW5kKE5VTUJFUl9TRVJJQUxJWkFUSU9OX1JVTEVTLCBmdW5jdGlvbiAocnVsZSkge1xuICAgIHJldHVybiBydWxlLmpzb25WYWwgPT09IHN0b3JlZE51bTtcbiAgfSk7XG4gIHJldHVybiBhcHBsaWNhYmxlUnVsZSA/IGFwcGxpY2FibGVSdWxlLmpzVmFsIDogc3RvcmVkTnVtO1xufTtcblxuLyoqXG4gKiBIZWxwZXIgZm9yIGNvbnZlcnRpbmcgZnJvbSBhbiBvbGRlciBoZWFkZXItc3BlYyBmb3JtYXQgdG8gYSBuZXcsIHNpbXBsZXIgb25lLlxuICogT2xkIGZvcm1hdDoge2tleTp7c3RyaW5nfSwgYml0czp7bnVtYmVyfX1bXVxuICogTmV3IGZvcm1hdDogc3RyaW5nW11cbiAqIElmIHdlIGRldGVjdCB0aGUgb2xkIGZvcm1hdCwgd2UgcmV0dXJuIGEgc3BlYyBpbiB0aGUgbmV3IGZvcm1hdC5cbiAqIEBwYXJhbSB7QXJyYXl9IHNwZWNcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuZXhwb3J0cy5zY3J1YkhlYWRlclNwZWNGb3JCYWNrd2FyZHNDb21wYXRpYmlsaXR5ID0gZnVuY3Rpb24gKHNwZWMpIHtcbiAgdmFyIGZvdW5kT2xkRm9ybWF0ID0gZmFsc2U7XG4gIHZhciBzY3J1YmJlZFNwZWMgPSBbXTtcbiAgc3BlYy5mb3JFYWNoKGZ1bmN0aW9uIChzcGVjRW50cnkpIHtcbiAgICBpZiAodHlwZW9mIHNwZWNFbnRyeSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIFRoaXMgaXMgbmV3IG5ldyBmb3JtYXQsIHdlIGNhbiBqdXN0IGNvcHkgaXQgb3Zlci5cbiAgICAgIHNjcnViYmVkU3BlYy5wdXNoKHNwZWNFbnRyeSk7XG4gICAgfSBlbHNlIGlmIChzcGVjRW50cnkgIT09IG51bGwgJiYgdHlwZW9mIHNwZWNFbnRyeSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIC8vIFRoaXMgaXMgdGhlIG9sZCB7a2V5OicnLCBiaXRzOjB9IGZvcm1hdC4gIFdlIGp1c3Qgd2FudCB0aGUga2V5LlxuICAgICAgc2NydWJiZWRTcGVjLnB1c2goc3BlY0VudHJ5LmtleSk7XG4gICAgICBmb3VuZE9sZEZvcm1hdCA9IHRydWU7XG4gICAgfVxuICB9KTtcblxuICAvLyBJc3N1ZSBhIHdhcm5pbmcgaWYgYW4gb2xkIGZvcm1hdCBnb3QgY29udmVydGVkLCBzbyB3ZSBrbm93IHRvIHVwZGF0ZVxuICAvLyB0aGUgbGV2ZWwuXG4gIGlmIChmb3VuZE9sZEZvcm1hdCkge1xuICAgIGxvZ2dlci53YXJuKFwiQ29udmVydGluZyBvbGQgaGVhZGVyIHNwZWNpZmljYXRpb24gZm9ybWF0IHRvIG5ldyBmb3JtYXQuXCIgK1xuICAgICAgICBcIiBUaGlzIGxldmVsIHNob3VsZCBiZSB1cGRhdGVkIHRvIHVzZSB0aGUgbmV3IGZvcm1hdC5cIik7XG4gIH1cblxuICByZXR1cm4gc2NydWJiZWRTcGVjO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge05ldFNpbUxldmVsQ29uZmlndXJhdGlvbn0gbGV2ZWxDb25maWdcbiAqIEByZXR1cm5zIHtOZXRTaW1MZXZlbENvbmZpZ3VyYXRpb259IHNhbWUgdGhpbmcsIGJ1dCB3aXRoIGNlcnRhaW4gdmFsdWVzXG4gKiAgICAgICAgICBjb252ZXJ0ZWQgb3IgY2xlYW5lZC5cbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydHMuc2NydWJMZXZlbENvbmZpZ3VyYXRpb25fID0gZnVuY3Rpb24gKGxldmVsQ29uZmlnKSB7XG4gIHZhciBzY3J1YmJlZExldmVsID0gXy5jbG9uZShsZXZlbENvbmZpZywgdHJ1ZSk7XG5cbiAgLy8gQ29udmVydCBvbGQgaGVhZGVyIHNwZWMgZm9ybWF0IHRvIG5ldyBoZWFkZXIgc3BlYyBmb3JtYXRcbiAgc2NydWJiZWRMZXZlbC5yb3V0ZXJFeHBlY3RzUGFja2V0SGVhZGVyID1cbiAgICAgIGV4cG9ydHMuc2NydWJIZWFkZXJTcGVjRm9yQmFja3dhcmRzQ29tcGF0aWJpbGl0eShcbiAgICAgICAgICBzY3J1YmJlZExldmVsLnJvdXRlckV4cGVjdHNQYWNrZXRIZWFkZXIpO1xuICBzY3J1YmJlZExldmVsLmNsaWVudEluaXRpYWxQYWNrZXRIZWFkZXIgPVxuICAgICAgZXhwb3J0cy5zY3J1YkhlYWRlclNwZWNGb3JCYWNrd2FyZHNDb21wYXRpYmlsaXR5KFxuICAgICAgICAgIHNjcnViYmVkTGV2ZWwuY2xpZW50SW5pdGlhbFBhY2tldEhlYWRlcik7XG5cbiAgLy8gQ29lcmNlIGNlcnRhaW4gdmFsdWVzIHRvIHN0cmluZyB0aGF0IG1pZ2h0IGhhdmUgYmVlbiBtaXN0YWtlbiBmb3IgbnVtYmVyc1xuICBzY3J1YmJlZExldmVsLmFkZHJlc3NGb3JtYXQgPSBzY3J1YmJlZExldmVsLmFkZHJlc3NGb3JtYXQudG9TdHJpbmcoKTtcblxuICAvLyBFeHBsaWNpdGx5IGxpc3QgZmllbGRzIHRoYXQgd2Ugc3VzcGVjdCBtYXkgaGF2ZSBhIHN0cmluZyB2YWx1ZSB0aGF0XG4gIC8vIG5lZWRzIHRvIGJlIGNvbnZlcnRlZCB0byBhIG51bWJlciwgbGlrZSBcIkluZmluaXR5XCJcbiAgc2NydWJiZWRMZXZlbC5kZWZhdWx0UGFja2V0U2l6ZUxpbWl0ID0gZXhwb3J0cy5kZXNlcmlhbGl6ZU51bWJlcihcbiAgICAgIHNjcnViYmVkTGV2ZWwuZGVmYXVsdFBhY2tldFNpemVMaW1pdCk7XG5cbiAgLy8gUGFja2V0IFNpemUgY2Fubm90IGJlIGluZmluaXR5OyBkZWZhdWx0cyB0byA4a2JcbiAgaWYgKHNjcnViYmVkTGV2ZWwuZGVmYXVsdFBhY2tldFNpemVMaW1pdCA9PT0gSW5maW5pdHkpIHtcbiAgICBzY3J1YmJlZExldmVsLmRlZmF1bHRQYWNrZXRTaXplTGltaXQgPSA4MTkyO1xuICB9XG5cbiAgc2NydWJiZWRMZXZlbC5kZWZhdWx0Qml0UmF0ZUJpdHNQZXJTZWNvbmQgPSBleHBvcnRzLmRlc2VyaWFsaXplTnVtYmVyKFxuICAgICAgc2NydWJiZWRMZXZlbC5kZWZhdWx0Qml0UmF0ZUJpdHNQZXJTZWNvbmQpO1xuICBzY3J1YmJlZExldmVsLmRlZmF1bHRDaHVua1NpemVCaXRzID0gZXhwb3J0cy5kZXNlcmlhbGl6ZU51bWJlcihcbiAgICAgIHNjcnViYmVkTGV2ZWwuZGVmYXVsdENodW5rU2l6ZUJpdHMpO1xuICBzY3J1YmJlZExldmVsLmRlZmF1bHRSb3V0ZXJCYW5kd2lkdGggPSBleHBvcnRzLmRlc2VyaWFsaXplTnVtYmVyKFxuICAgICAgc2NydWJiZWRMZXZlbC5kZWZhdWx0Um91dGVyQmFuZHdpZHRoKTtcbiAgc2NydWJiZWRMZXZlbC5kZWZhdWx0Um91dGVyTWVtb3J5ID0gZXhwb3J0cy5kZXNlcmlhbGl6ZU51bWJlcihcbiAgICAgIHNjcnViYmVkTGV2ZWwuZGVmYXVsdFJvdXRlck1lbW9yeSk7XG5cbiAgLy8gR2VuZXJhdGUgYSB3YXJuaW5nIGlmIHdlIHNlZSBhIHBvc3NpYmxlIG1pc3NlZCBzdHJpbmctdG8tbnVtYmVyIGNvbnZlcnNpb25cbiAgT2JqZWN0LmtleXMoc2NydWJiZWRMZXZlbCkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAvLyBJZ25vcmUgbGV2ZWwgcGFyYW1zIHdpdGggdW5kZXJzY29yZXMsIHRoZXkgYXJlIHRoZSBkYXNoYm9hcmQgdmVyc2lvbnNcbiAgICAvLyBvZiB0aGUgY2FtZWxDYXNlIHBhcmFtZXRlcnMgdGhhdCB0aGUgYXBwIGFjdHVhbGx5IHVzZXMuXG4gICAgcmV0dXJuICEvXy8udGVzdChrZXkpO1xuICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgdW5jb252ZXJ0ZWRWYWx1ZSA9IE5VTUJFUl9TRVJJQUxJWkFUSU9OX1JVTEVTLnNvbWUoZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgIHJldHVybiBzY3J1YmJlZExldmVsW2tleV0gPT09IHJ1bGUuanNvblZhbDtcbiAgICB9KTtcbiAgICBpZiAodW5jb252ZXJ0ZWRWYWx1ZSkge1xuICAgICAgbG9nZ2VyLndhcm4oXCJMZXZlbCBvcHRpb24gJ1wiICsga2V5ICtcbiAgICAgIFwiJyBoYXMgdW5jb252ZXJ0ZWQgc3RyaW5nIHZhbHVlICdcIiArIHNjcnViYmVkTGV2ZWxba2V5XSArIFwiJ1wiKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBzY3J1YmJlZExldmVsO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIG51bWJlciBvZiBiaXRzIGludG8gYSBsb2NhbGl6ZWQgcmVwcmVzZW50YXRpb24gb2YgdGhhdCBkYXRhXG4gKiBzaXplIGluIGJ5dGVzLCBraWxvYnl0ZXMsIG1lZ2FieXRlcywgZ2lnYWJ5dGVzLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdHNcbiAqIEByZXR1cm5zIHtzdHJpbmd9IC0gbG9jYWxpemVkIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBzaXplIGluIGJ5dGVzXG4gKi9cbmV4cG9ydHMuYml0c1RvTG9jYWxpemVkUm91bmRlZEJ5dGVzaXplID0gZnVuY3Rpb24gKGJpdHMpIHtcbiAgaWYgKGJpdHMgPT09IEluZmluaXR5KSB7XG4gICAgcmV0dXJuIGkxOG4udW5saW1pdGVkKCk7XG4gIH1cblxuICB2YXIgZ2J5dGVzID0gTWF0aC5mbG9vcihiaXRzIC8gTmV0U2ltQ29uc3RhbnRzLkJJVFNfUEVSX0dJR0FCWVRFKTtcbiAgaWYgKGdieXRlcyA+IDApIHtcbiAgICByZXR1cm4gaTE4bi54X0dCeXRlcyh7IHg6IGdieXRlcyB9KTtcbiAgfVxuXG4gIHZhciBtYnl0ZXMgPSBNYXRoLmZsb29yKGJpdHMgLyBOZXRTaW1Db25zdGFudHMuQklUU19QRVJfTUVHQUJZVEUpO1xuICBpZiAobWJ5dGVzID4gMCkge1xuICAgIHJldHVybiBpMThuLnhfTUJ5dGVzKHsgeDogbWJ5dGVzIH0pO1xuICB9XG5cbiAgdmFyIGtieXRlcyA9IE1hdGguZmxvb3IoYml0cyAvIE5ldFNpbUNvbnN0YW50cy5CSVRTX1BFUl9LSUxPQllURSk7XG4gIGlmIChrYnl0ZXMgPiAwKSB7XG4gICAgcmV0dXJuIGkxOG4ueF9LQnl0ZXMoeyB4OiBrYnl0ZXMgfSk7XG4gIH1cblxuICB2YXIgYnl0ZXMgPSBNYXRoLmZsb29yKGJpdHMgLyBOZXRTaW1Db25zdGFudHMuQklUU19QRVJfQllURSk7XG4gIGlmIChieXRlcyA+IDApIHtcbiAgICByZXR1cm4gaTE4bi54X0J5dGVzKHsgeDogYnl0ZXMgfSk7XG4gIH1cblxuICByZXR1cm4gaTE4bi54X2JpdHMoeyB4OiBiaXRzIH0pO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGJpdHJhdGUgaW50byBhIGxvY2FsaXplZCByZXByZXNlbnRhdGlvbiBvZiB0aGF0IGRhdGFcbiAqIHNpemUgaW4gYml0cy9zZWMsIGtpbG9iaXRzLCBtZWdhYml0cywgZ2lnYWJpdHMuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0c1BlclNlY29uZFxuICogQHJldHVybnMge3N0cmluZ30gLSBsb2NhbGl6ZWQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHNwZWVkIGluIGJpdHNcbiAqL1xuZXhwb3J0cy5iaXRyYXRlVG9Mb2NhbGl6ZWRSb3VuZGVkQml0cmF0ZSA9IGZ1bmN0aW9uIChiaXRzUGVyU2Vjb25kKSB7XG4gIGlmIChiaXRzUGVyU2Vjb25kID09PSBJbmZpbml0eSkge1xuICAgIHJldHVybiBpMThuLnVubGltaXRlZCgpO1xuICB9XG5cbiAgdmFyIGdicHMgPSBNYXRoLmZsb29yKGJpdHNQZXJTZWNvbmQgLyBOZXRTaW1Db25zdGFudHMuQklUU19QRVJfR0lHQUJJVCk7XG4gIGlmIChnYnBzID4gMCkge1xuICAgIHJldHVybiBpMThuLnhfR2Jwcyh7IHg6IGdicHMgfSk7XG4gIH1cblxuICB2YXIgbWJwcyA9IE1hdGguZmxvb3IoYml0c1BlclNlY29uZCAvIE5ldFNpbUNvbnN0YW50cy5CSVRTX1BFUl9NRUdBQklUKTtcbiAgaWYgKG1icHMgPiAwKSB7XG4gICAgcmV0dXJuIGkxOG4ueF9NYnBzKHsgeDogbWJwcyB9KTtcbiAgfVxuXG4gIHZhciBrYnBzID0gTWF0aC5mbG9vcihiaXRzUGVyU2Vjb25kIC8gTmV0U2ltQ29uc3RhbnRzLkJJVFNfUEVSX0tJTE9CSVQpO1xuICBpZiAoa2JwcyA+IDApIHtcbiAgICByZXR1cm4gaTE4bi54X0ticHMoeyB4OiBrYnBzIH0pO1xuICB9XG5cbiAgdmFyIGJwcyA9IE1hdGguZmxvb3IoYml0c1BlclNlY29uZCAqIDEwMCkgLyAxMDA7XG4gIHJldHVybiBpMThuLnhfYnBzKHsgeDogYnBzIH0pO1xufTtcblxuZXhwb3J0cy56ZXJvUGFkTGVmdCA9IGZ1bmN0aW9uIChzdHJpbmcsIGRlc2lyZWRXaWR0aCkge1xuICB2YXIgcGFkZGluZyA9ICcwJy5yZXBlYXQoZGVzaXJlZFdpZHRoKTtcbiAgcmV0dXJuIChwYWRkaW5nICsgc3RyaW5nKS5zbGljZSgtZGVzaXJlZFdpZHRoKTtcbn07XG5cbmV4cG9ydHMuemVyb1BhZFJpZ2h0ID0gZnVuY3Rpb24gKHN0cmluZywgZGVzaXJlZFdpZHRoKSB7XG4gIHZhciBwYWRkaW5nID0gJzAnLnJlcGVhdChkZXNpcmVkV2lkdGgpO1xuICByZXR1cm4gKHN0cmluZyArIHBhZGRpbmcpLnN1YnN0cigwLCBkZXNpcmVkV2lkdGgpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgQ29udGludWUvRmluaXNoIGJ1dHRvbiBvbiB0aGUgZ2l2ZW4gTmV0U2ltUGFuZWwgKGluIGl0cyBoZWFkZXIpLlxuICogQHBhcmFtIHtOZXRTaW1QYW5lbH0gb25QYW5lbFxuICogQHN0YXRpY1xuICovXG5leHBvcnRzLm1ha2VDb250aW51ZUJ1dHRvbiA9IGZ1bmN0aW9uIChvblBhbmVsKSB7XG4gIG9uUGFuZWwuYWRkQnV0dG9uKFxuICAgICAgaTE4bi5jb250aW51ZUJ1dHRvbih7IGNhcmV0OiAnPGkgY2xhc3M9XCJmYSBmYS1jYXJldC1yaWdodFwiPjwvaT4nIH0pLFxuICAgICAgZnVuY3Rpb24gKGpRdWVyeUV2ZW50KSB7XG4gICAgICAgIGlmICghJChqUXVlcnlFdmVudC50YXJnZXQpLmlzKCc6ZGlzYWJsZWQnKSkge1xuICAgICAgICAgIE5ldFNpbUdsb2JhbHMuY29tcGxldGVMZXZlbEFuZENvbnRpbnVlKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHNlY29uZGFyeTogZmFsc2UsXG4gICAgICAgIGNsYXNzZXM6IFsgJ3N1Ym1pdEJ1dHRvbicgXVxuICAgICAgfSk7XG59O1xuIiwiLy8gbG9jYWxlIGZvciBuZXRzaW1cblxubW9kdWxlLmV4cG9ydHMgPSB3aW5kb3cuYmxvY2tseS5uZXRzaW1fbG9jYWxlO1xuIiwiLyoqXG4gKiBAb3ZlcnZpZXcgVXRpbGl0eSBjbGFzcyB3cmFwcGluZyBtb3JlIGdyYW51bGFyIGxvZyBiZWhhdmlvciB0aGF0IGlzbid0XG4gKiBhdmFpbGFibGUgaW4gYWxsIGJyb3dzZXJzLiAgQWxzbyBtYWtlcyBpdCBlYXN5IHRvIHR1cm4gbG9nZ2luZyBvbiBhbmQgb2ZmXG4gKiBpbiB0ZXN0cy5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcblxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBMb2dnaW5nIEFQSSB0byBjb250cm9sIGxvZyBsZXZlbHMgYW5kIHN1cHBvcnQgZGlmZmVyZW50IGJyb3dzZXJzXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7Q29uc29sZX0gd2luZG93IGNvbnNvbGUgQVBJXG4gKiBAcGFyYW0ge0xvZ0xldmVsfSB2ZXJib3NpdHlcbiAqL1xudmFyIE5ldFNpbUxvZ2dlciA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG91dHB1dENvbnNvbGUsIHZlcmJvc2l0eSAvKj1WRVJCT1NFKi8pIHtcbiAgLyoqXG4gICAqIEB0eXBlIHtDb25zb2xlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5vdXRwdXRDb25zb2xlXyA9IG91dHB1dENvbnNvbGU7XG5cbiAgLyoqXG4gICAqIEFsd2F5cyBtYXBwZWQgdG8gY29uc29sZS5sb2csIG9yIG5vLW9wIGlmIG5vdCBhdmFpbGFibGUuXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMubG9nXyA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIC8qKlxuICAgKiBJZiBjb25maWd1cmVkIGZvciBpbmZvIGxvZ2dpbmcsIGdldHMgbWFwcGVkIHRvIGNvbnNvbGUuaW5mbyxcbiAgICogZmFsbHMgYmFjayB0byBjb25zb2xlLmxvZywgb3Igbm8tb3AuXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICovXG4gIHRoaXMuaW5mbyA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIC8qKlxuICAgKiBJZiBjb25maWd1cmVkIGZvciB3YXJuaW5nIGxvZ2dpbmcsIGdldHMgbWFwcGVkIHRvIGNvbnNvbGUud2FybixcbiAgICogZmFsbHMgYmFjayB0byBjb25zb2xlLmxvZywgb3Igbm8tb3AuXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICovXG4gIHRoaXMud2FybiA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIC8qKlxuICAgKiBJZiBjb25maWd1cmVkIGZvciBlcnJvciBsb2dnaW5nLCBnZXRzIG1hcHBlZCB0byBjb25zb2xlLmVycm9yLFxuICAgKiBmYWxscyBiYWNrIHRvIGNvbnNvbGUubG9nLCBvciBuby1vcC5cbiAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgKi9cbiAgdGhpcy5lcnJvciA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIHRoaXMuc2V0VmVyYm9zaXR5KCh1bmRlZmluZWQgPT09IHZlcmJvc2l0eSkgP1xuICAgICAgTG9nTGV2ZWwuVkVSQk9TRSA6IHZlcmJvc2l0eSk7XG59O1xuXG4vKipcbiAqIExvZyB2ZXJib3NpdHkgbGV2ZWxzIGVudW0uXG4gKiBAcmVhZG9ubHlcbiAqIEBlbnVtIHtudW1iZXJ9XG4gKi9cbnZhciBMb2dMZXZlbCA9IHtcbiAgTk9ORTogMCxcbiAgRVJST1I6IDEsXG4gIFdBUk46IDIsXG4gIElORk86IDMsXG4gIFZFUkJPU0U6IDRcbn07XG5OZXRTaW1Mb2dnZXIuTG9nTGV2ZWwgPSBMb2dMZXZlbDtcblxuLyoqXG4gKiBHbG9iYWwgc2luZ2xldG9uXG4gKiBAdHlwZSB7TmV0U2ltTG9nZ2VyfVxuICovXG52YXIgc2luZ2xldG9uSW5zdGFuY2U7XG5cbi8qKlxuICogU3RhdGljIGdldHRlci9sYXp5LWNyZWF0b3IgZm9yIHRoZSBnbG9iYWwgc2luZ2xldG9uIGluc3RhbmNlLlxuICogQHJldHVybnMge05ldFNpbUxvZ2dlcn1cbiAqL1xuTmV0U2ltTG9nZ2VyLmdldFNpbmdsZXRvbiA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHNpbmdsZXRvbkluc3RhbmNlID09PSB1bmRlZmluZWQpIHtcbiAgICBzaW5nbGV0b25JbnN0YW5jZSA9IG5ldyBOZXRTaW1Mb2dnZXIoY29uc29sZSwgTG9nTGV2ZWwuV0FSTik7XG4gIH1cbiAgcmV0dXJuIHNpbmdsZXRvbkluc3RhbmNlO1xufTtcblxuLyoqXG4gKiBCaW5kcyBpbnRlcm5hbCBmdW5jdGlvbiBjYWxscyBhY2NvcmRpbmcgdG8gZ2l2ZW4gdmVyYm9zaXR5IGxldmVsLlxuICogQHBhcmFtIHZlcmJvc2l0eVxuICovXG5OZXRTaW1Mb2dnZXIucHJvdG90eXBlLnNldFZlcmJvc2l0eSA9IGZ1bmN0aW9uICh2ZXJib3NpdHkpIHtcbiAgLy8gTm90ZTogV2UgZG9uJ3QgY2FsbCB0aGlzLm91dHB1dENvbnNvbGVfLmxvZy5iaW5kIGhlcmUsIGJlY2F1c2UgaW4gSUU5IHRoZVxuICAvLyBjb25zb2xlJ3MgbG9nZ2luZyBtZXRob2RzIGRvIG5vdCBpbmhlcml0IGZyb20gRnVuY3Rpb24uXG5cbiAgdGhpcy5sb2dfID0gKHRoaXMub3V0cHV0Q29uc29sZV8gJiYgdGhpcy5vdXRwdXRDb25zb2xlXy5sb2cpID9cbiAgICAgIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmNhbGwodGhpcy5vdXRwdXRDb25zb2xlXy5sb2csIHRoaXMub3V0cHV0Q29uc29sZV8pIDpcbiAgICAgIGZ1bmN0aW9uICgpIHt9O1xuXG4gIGlmICh2ZXJib3NpdHkgPj0gTG9nTGV2ZWwuSU5GTykge1xuICAgIHRoaXMuaW5mbyA9ICh0aGlzLm91dHB1dENvbnNvbGVfICYmIHRoaXMub3V0cHV0Q29uc29sZV8uaW5mbykgP1xuICAgICAgICBGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5jYWxsKHRoaXMub3V0cHV0Q29uc29sZV8uaW5mbywgdGhpcy5vdXRwdXRDb25zb2xlXykgOlxuICAgICAgICB0aGlzLmxvZ187XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5pbmZvID0gZnVuY3Rpb24gKCkge307XG4gIH1cblxuICBpZiAodmVyYm9zaXR5ID49IExvZ0xldmVsLldBUk4pIHtcbiAgICB0aGlzLndhcm4gPSAodGhpcy5vdXRwdXRDb25zb2xlXyAmJiB0aGlzLm91dHB1dENvbnNvbGVfLndhcm4pID9cbiAgICAgICAgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuY2FsbCh0aGlzLm91dHB1dENvbnNvbGVfLndhcm4sIHRoaXMub3V0cHV0Q29uc29sZV8pIDpcbiAgICAgICAgdGhpcy5sb2dfO1xuICB9IGVsc2Uge1xuICAgIHRoaXMud2FybiA9IGZ1bmN0aW9uICgpIHt9O1xuICB9XG5cbiAgaWYgKHZlcmJvc2l0eSA+PSBMb2dMZXZlbC5FUlJPUikge1xuICAgIHRoaXMuZXJyb3IgPSAodGhpcy5vdXRwdXRDb25zb2xlXyAmJiB0aGlzLm91dHB1dENvbnNvbGVfLmVycm9yKSA/XG4gICAgICAgIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmNhbGwodGhpcy5vdXRwdXRDb25zb2xlXy5lcnJvciwgdGhpcy5vdXRwdXRDb25zb2xlXykgOlxuICAgICAgICB0aGlzLmxvZ187XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5lcnJvciA9IGZ1bmN0aW9uICgpIHt9O1xuICB9XG59O1xuXG4vKipcbiAqIFdyaXRlcyB0byBvdXRwdXQsIGRlcGVuZGluZyBvbiBsb2cgbGV2ZWxcbiAqIEBwYXJhbSB7Kn0gbWVzc2FnZVxuICogQHBhcmFtIHtMb2dMZXZlbH0gbG9nTGV2ZWxcbiAqL1xuTmV0U2ltTG9nZ2VyLnByb3RvdHlwZS5sb2cgPSBmdW5jdGlvbiAobWVzc2FnZSwgbG9nTGV2ZWwgLyo9SU5GTyovKSB7XG4gIGlmICh1bmRlZmluZWQgPT09IGxvZ0xldmVsKSB7XG4gICAgbG9nTGV2ZWwgPSBMb2dMZXZlbC5JTkZPO1xuICB9XG5cbiAgc3dpdGNoIChsb2dMZXZlbCkge1xuICAgIGNhc2UgTG9nTGV2ZWwuRVJST1I6XG4gICAgICB0aGlzLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBMb2dMZXZlbC5XQVJOOlxuICAgICAgdGhpcy53YXJuKG1lc3NhZ2UpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBMb2dMZXZlbC5JTkZPOlxuICAgICAgdGhpcy5pbmZvKG1lc3NhZ2UpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRoaXMubG9nXyhtZXNzYWdlKTtcbiAgfVxufTtcbiIsIi8qKlxuICogQG92ZXJ2aWV3IEdsb2JhbCBzaW5nbGV0b24gdXNlZCB0byBzaW1wbGlmeSBjZXJ0YWluIGNyb3NzLWN1dHRpbmcgY29uY2VybnMsXG4gKiAgICAgICAgICAgaW5jbHVkaW5nOlxuICpcbiAqICAgICAgICAgICBBY2Nlc3MgdG8gbGV2ZWwgY29uZmlndXJhdGlvbi5cbiAqICAgICAgICAgICBBY2Nlc3MgdG8gZW52aXJvbm1lbnQtc3BlY2lmaWMgYXNzZXQgVVJMcy5cbiAqICAgICAgICAgICBSZXByb2R1Y2libGUgcmFuZG9tIG51bWJlciBmdW5jdGlvbnMgZm9yIGVhc3kgdGVzdGluZy5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBzZWVkcmFuZG9tID0gcmVxdWlyZSgnc2VlZHJhbmRvbScpO1xuXG4vKipcbiAqIFJlZmVyZW5jZSB0byByb290IFN0dWRpb0FwcCBjb250cm9sbGVyXG4gKiBAdHlwZSB7U3R1ZGlvQXBwfVxuICogQHByaXZhdGVcbiAqL1xudmFyIHN0dWRpb0FwcF8gPSBudWxsO1xuXG4vKipcbiAqIFJlZmVyZW5jZSB0byByb290IE5ldFNpbSBjb250cm9sbGVyXG4gKiBAdHlwZSB7TmV0U2ltfVxuICogQHByaXZhdGVcbiAqL1xudmFyIG5ldHNpbV8gPSBudWxsO1xuXG4vKipcbiAqIFJlcGxhY2FibGUgcHNldWRvLXJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yIGZ1bmN0aW9uIHRoYXQgbGV0cyB1cyBzZXQgYSBnbG9iYWxcbiAqIHJhbmRvbSBzZWVkIGlmIHdlIHdpc2guXG4gKiBAdHlwZSB7ZnVuY3Rpb259XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgcHNldWRvUmFuZG9tTnVtYmVyRnVuY3Rpb25fID0gTWF0aC5yYW5kb207XG5cbi8qKlxuICogR2V0IGEgcmFuZG9tIGludGVnZXIgaW4gdGhlIGdpdmVuIHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IGxvdyBpbmNsdXNpdmUgbG93ZXIgZW5kIG9mIHJhbmdlXG4gKiBAcGFyYW0ge251bWJlcn0gaGlnaCBleGNsdXNpdmUgdXBwZXIgZW5kIG9mIHJhbmdlXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG52YXIgcmFuZG9tSW50SW5SYW5nZSA9IGZ1bmN0aW9uIChsb3csIGhpZ2gpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IocHNldWRvUmFuZG9tTnVtYmVyRnVuY3Rpb25fKCkgKiAoaGlnaCAtIGxvdykpICsgbG93O1xufTtcblxuLyoqXG4gKiBQcm92aWRlIHNpbmdsZXRvbiBhY2Nlc3MgdG8gZ2xvYmFsIHNpbXVsYXRpb24gc2V0dGluZ3NcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgcm9vdCBjb250cm9sbGVycyB0aGF0IGNhbiBiZSB1c2VkIGZvciBnbG9iYWwgb3BlcmF0aW9ucy5cbiAgICogQHBhcmFtIHtTdHVkaW9BcHB9IHN0dWRpb0FwcFxuICAgKiBAcGFyYW0ge05ldFNpbX0gbmV0c2ltXG4gICAqL1xuICBzZXRSb290Q29udHJvbGxlcnM6IGZ1bmN0aW9uIChzdHVkaW9BcHAsIG5ldHNpbSkge1xuICAgIHN0dWRpb0FwcF8gPSBzdHVkaW9BcHA7XG4gICAgbmV0c2ltXyA9IG5ldHNpbTtcbiAgfSxcblxuICAvKipcbiAgICogQHJldHVybnMge05ldFNpbUxldmVsQ29uZmlndXJhdGlvbn1cbiAgICovXG4gIGdldExldmVsQ29uZmlnOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldHNpbV8ubGV2ZWw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtQdWJTdWJDb25maWd9XG4gICAqL1xuICBnZXRQdWJTdWJDb25maWc6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXNlUHVzaGVyOiBuZXRzaW1fLnVzZVB1c2hlcixcbiAgICAgIHB1c2hlckFwcGxpY2F0aW9uS2V5OiBuZXRzaW1fLnB1c2hlckFwcGxpY2F0aW9uS2V5XG4gICAgfTtcbiAgfSxcblxuICAvKipcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIGdldEdsb2JhbE1heFJvdXRlcnM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmV0c2ltXy5nbG9iYWxNYXhSb3V0ZXJzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7ZnVuY3Rpb259XG4gICAqL1xuICBnZXRBc3NldFVybEZ1bmN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHN0dWRpb0FwcF8uYXNzZXRVcmw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRyaWdnZXIgYSBsYXlvdXQgdXBkYXRlIG9mIHRoZSByaWdodCBjb2x1bW4sIHJlY2VpdmVkL3NlbnQvc2VuZCBwYW5lbHMuXG4gICAqL1xuICB1cGRhdGVMYXlvdXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBuZXRzaW1fLnVwZGF0ZUxheW91dCgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUcmlnZ2VyIGFuIGF0dGVtcHQgdG8gY29tcGxldGUgdGhlIGN1cnJlbnQgbGV2ZWwgYW5kIGNvbnRpbnVlIHRvIHRoZSBuZXh0LlxuICAgKi9cbiAgY29tcGxldGVMZXZlbEFuZENvbnRpbnVlOiBmdW5jdGlvbiAoKSB7XG4gICAgbmV0c2ltXy5jb21wbGV0ZUxldmVsQW5kQ29udGludWUoKTtcbiAgfSxcblxuICAvKipcbiAgICogUmVzZWVkIHRoZSByYW5kb20gbnVtYmVyIGdlbmVyYXRvci4gIElmIHRoaXMgaXMgbmV2ZXIgY2FsbGVkLCB0aGUgZGVmYXVsdFxuICAgKiBNYXRoLnJhbmRvbSBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBnZW5lcmF0b3IuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdTZWVkXG4gICAqL1xuICBzZXRSYW5kb21TZWVkOiBmdW5jdGlvbiAobmV3U2VlZCkge1xuICAgIHBzZXVkb1JhbmRvbU51bWJlckZ1bmN0aW9uXyA9IHNlZWRyYW5kb20obmV3U2VlZCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IGEgcmFuZG9tIHZhbHVlIGJldHdlZW4gMCBhbmQgMVxuICAgKi9cbiAgcmFuZG9tOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHBzZXVkb1JhbmRvbU51bWJlckZ1bmN0aW9uXygpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgYSByYW5kb20gaW50ZWdlciBpbiB0aGUgZ2l2ZW4gcmFuZ2UuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsb3cgaW5jbHVzaXZlIGxvd2VyIGVuZCBvZiByYW5nZVxuICAgKiBAcGFyYW0ge251bWJlcn0gaGlnaCBleGNsdXNpdmUgdXBwZXIgZW5kIG9mIHJhbmdlXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICByYW5kb21JbnRJblJhbmdlOiByYW5kb21JbnRJblJhbmdlLFxuXG4gIC8qKlxuICAgKiBHZXQgYSByYW5kb20gaXRlbSBvdXQgb2YgYSBjb2xsZWN0aW9uXG4gICAqIEBwYXJhbSB7QXJyYXl9IGNvbGxlY3Rpb25cbiAgICogQHJldHVybnMgeyp9IHVuZGVmaW5lZCBpZiBjb2xsZWN0aW9uIGlzIGVtcHR5XG4gICAqL1xuICByYW5kb21QaWNrT25lOiBmdW5jdGlvbiAoY29sbGVjdGlvbikge1xuICAgIHZhciBzaXplID0gY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgaWYgKHNpemUgPT09IDApIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbGxlY3Rpb25bcmFuZG9tSW50SW5SYW5nZSgwLCBzaXplKV07XG4gIH1cblxufTtcbiIsIi8vIEEgbGlicmFyeSBvZiBzZWVkYWJsZSBSTkdzIGltcGxlbWVudGVkIGluIEphdmFzY3JpcHQuXG4vL1xuLy8gVXNhZ2U6XG4vL1xuLy8gdmFyIHNlZWRyYW5kb20gPSByZXF1aXJlKCdzZWVkcmFuZG9tJyk7XG4vLyB2YXIgcmFuZG9tID0gc2VlZHJhbmRvbSgxKTsgLy8gb3IgYW55IHNlZWQuXG4vLyB2YXIgeCA9IHJhbmRvbSgpOyAgICAgICAvLyAwIDw9IHggPCAxLiAgRXZlcnkgYml0IGlzIHJhbmRvbS5cbi8vIHZhciB4ID0gcmFuZG9tLnF1aWNrKCk7IC8vIDAgPD0geCA8IDEuICAzMiBiaXRzIG9mIHJhbmRvbW5lc3MuXG5cbi8vIGFsZWEsIGEgNTMtYml0IG11bHRpcGx5LXdpdGgtY2FycnkgZ2VuZXJhdG9yIGJ5IEpvaGFubmVzIEJhYWfDuGUuXG4vLyBQZXJpb2Q6IH4yXjExNlxuLy8gUmVwb3J0ZWQgdG8gcGFzcyBhbGwgQmlnQ3J1c2ggdGVzdHMuXG52YXIgYWxlYSA9IHJlcXVpcmUoJy4vbGliL2FsZWEnKTtcblxuLy8geG9yMTI4LCBhIHB1cmUgeG9yLXNoaWZ0IGdlbmVyYXRvciBieSBHZW9yZ2UgTWFyc2FnbGlhLlxuLy8gUGVyaW9kOiAyXjEyOC0xLlxuLy8gUmVwb3J0ZWQgdG8gZmFpbDogTWF0cml4UmFuayBhbmQgTGluZWFyQ29tcC5cbnZhciB4b3IxMjggPSByZXF1aXJlKCcuL2xpYi94b3IxMjgnKTtcblxuLy8geG9yd293LCBHZW9yZ2UgTWFyc2FnbGlhJ3MgMTYwLWJpdCB4b3Itc2hpZnQgY29tYmluZWQgcGx1cyB3ZXlsLlxuLy8gUGVyaW9kOiAyXjE5Mi0yXjMyXG4vLyBSZXBvcnRlZCB0byBmYWlsOiBDb2xsaXNpb25PdmVyLCBTaW1wUG9rZXIsIGFuZCBMaW5lYXJDb21wLlxudmFyIHhvcndvdyA9IHJlcXVpcmUoJy4vbGliL3hvcndvdycpO1xuXG4vLyB4b3JzaGlmdDcsIGJ5IEZyYW7Dp29pcyBQYW5uZXRvbiBhbmQgUGllcnJlIEwnZWN1eWVyLCB0YWtlc1xuLy8gYSBkaWZmZXJlbnQgYXBwcm9hY2g6IGl0IGFkZHMgcm9idXN0bmVzcyBieSBhbGxvd2luZyBtb3JlIHNoaWZ0c1xuLy8gdGhhbiBNYXJzYWdsaWEncyBvcmlnaW5hbCB0aHJlZS4gIEl0IGlzIGEgNy1zaGlmdCBnZW5lcmF0b3Jcbi8vIHdpdGggMjU2IGJpdHMsIHRoYXQgcGFzc2VzIEJpZ0NydXNoIHdpdGggbm8gc3lzdG1hdGljIGZhaWx1cmVzLlxuLy8gUGVyaW9kIDJeMjU2LTEuXG4vLyBObyBzeXN0ZW1hdGljIEJpZ0NydXNoIGZhaWx1cmVzIHJlcG9ydGVkLlxudmFyIHhvcnNoaWZ0NyA9IHJlcXVpcmUoJy4vbGliL3hvcnNoaWZ0NycpO1xuXG4vLyB4b3I0MDk2LCBieSBSaWNoYXJkIEJyZW50LCBpcyBhIDQwOTYtYml0IHhvci1zaGlmdCB3aXRoIGFcbi8vIHZlcnkgbG9uZyBwZXJpb2QgdGhhdCBhbHNvIGFkZHMgYSBXZXlsIGdlbmVyYXRvci4gSXQgYWxzbyBwYXNzZXNcbi8vIEJpZ0NydXNoIHdpdGggbm8gc3lzdGVtYXRpYyBmYWlsdXJlcy4gIEl0cyBsb25nIHBlcmlvZCBtYXlcbi8vIGJlIHVzZWZ1bCBpZiB5b3UgaGF2ZSBtYW55IGdlbmVyYXRvcnMgYW5kIG5lZWQgdG8gYXZvaWRcbi8vIGNvbGxpc2lvbnMuXG4vLyBQZXJpb2Q6IDJeNDEyOC0yXjMyLlxuLy8gTm8gc3lzdGVtYXRpYyBCaWdDcnVzaCBmYWlsdXJlcyByZXBvcnRlZC5cbnZhciB4b3I0MDk2ID0gcmVxdWlyZSgnLi9saWIveG9yNDA5NicpO1xuXG4vLyBUeWNoZS1pLCBieSBTYW11ZWwgTmV2ZXMgYW5kIEZpbGlwZSBBcmF1am8sIGlzIGEgYml0LXNoaWZ0aW5nIHJhbmRvbVxuLy8gbnVtYmVyIGdlbmVyYXRvciBkZXJpdmVkIGZyb20gQ2hhQ2hhLCBhIG1vZGVybiBzdHJlYW0gY2lwaGVyLlxuLy8gaHR0cHM6Ly9lZGVuLmRlaS51Yy5wdC9+c25ldmVzL3B1YnMvMjAxMS1zbmZhMi5wZGZcbi8vIFBlcmlvZDogfjJeMTI3XG4vLyBObyBzeXN0ZW1hdGljIEJpZ0NydXNoIGZhaWx1cmVzIHJlcG9ydGVkLlxudmFyIHR5Y2hlaSA9IHJlcXVpcmUoJy4vbGliL3R5Y2hlaScpO1xuXG4vLyBUaGUgb3JpZ2luYWwgQVJDNC1iYXNlZCBwcm5nIGluY2x1ZGVkIGluIHRoaXMgbGlicmFyeS5cbi8vIFBlcmlvZDogfjJeMTYwMFxudmFyIHNyID0gcmVxdWlyZSgnLi9zZWVkcmFuZG9tJyk7XG5cbnNyLmFsZWEgPSBhbGVhO1xuc3IueG9yMTI4ID0geG9yMTI4O1xuc3IueG9yd293ID0geG9yd293O1xuc3IueG9yc2hpZnQ3ID0geG9yc2hpZnQ3O1xuc3IueG9yNDA5NiA9IHhvcjQwOTY7XG5zci50eWNoZWkgPSB0eWNoZWk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3I7XG4iLCIvKlxuQ29weXJpZ2h0IDIwMTQgRGF2aWQgQmF1LlxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmdcbmEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG53aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG5kaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG9cbnBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0b1xudGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG5FWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbk1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC5cbklOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZXG5DTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULFxuVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEVcblNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4qL1xuXG4oZnVuY3Rpb24gKHBvb2wsIG1hdGgpIHtcbi8vXG4vLyBUaGUgZm9sbG93aW5nIGNvbnN0YW50cyBhcmUgcmVsYXRlZCB0byBJRUVFIDc1NCBsaW1pdHMuXG4vL1xudmFyIGdsb2JhbCA9IHRoaXMsXG4gICAgd2lkdGggPSAyNTYsICAgICAgICAvLyBlYWNoIFJDNCBvdXRwdXQgaXMgMCA8PSB4IDwgMjU2XG4gICAgY2h1bmtzID0gNiwgICAgICAgICAvLyBhdCBsZWFzdCBzaXggUkM0IG91dHB1dHMgZm9yIGVhY2ggZG91YmxlXG4gICAgZGlnaXRzID0gNTIsICAgICAgICAvLyB0aGVyZSBhcmUgNTIgc2lnbmlmaWNhbnQgZGlnaXRzIGluIGEgZG91YmxlXG4gICAgcm5nbmFtZSA9ICdyYW5kb20nLCAvLyBybmduYW1lOiBuYW1lIGZvciBNYXRoLnJhbmRvbSBhbmQgTWF0aC5zZWVkcmFuZG9tXG4gICAgc3RhcnRkZW5vbSA9IG1hdGgucG93KHdpZHRoLCBjaHVua3MpLFxuICAgIHNpZ25pZmljYW5jZSA9IG1hdGgucG93KDIsIGRpZ2l0cyksXG4gICAgb3ZlcmZsb3cgPSBzaWduaWZpY2FuY2UgKiAyLFxuICAgIG1hc2sgPSB3aWR0aCAtIDEsXG4gICAgbm9kZWNyeXB0bzsgICAgICAgICAvLyBub2RlLmpzIGNyeXB0byBtb2R1bGUsIGluaXRpYWxpemVkIGF0IHRoZSBib3R0b20uXG5cbi8vXG4vLyBzZWVkcmFuZG9tKClcbi8vIFRoaXMgaXMgdGhlIHNlZWRyYW5kb20gZnVuY3Rpb24gZGVzY3JpYmVkIGFib3ZlLlxuLy9cbmZ1bmN0aW9uIHNlZWRyYW5kb20oc2VlZCwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgdmFyIGtleSA9IFtdO1xuICBvcHRpb25zID0gKG9wdGlvbnMgPT0gdHJ1ZSkgPyB7IGVudHJvcHk6IHRydWUgfSA6IChvcHRpb25zIHx8IHt9KTtcblxuICAvLyBGbGF0dGVuIHRoZSBzZWVkIHN0cmluZyBvciBidWlsZCBvbmUgZnJvbSBsb2NhbCBlbnRyb3B5IGlmIG5lZWRlZC5cbiAgdmFyIHNob3J0c2VlZCA9IG1peGtleShmbGF0dGVuKFxuICAgIG9wdGlvbnMuZW50cm9weSA/IFtzZWVkLCB0b3N0cmluZyhwb29sKV0gOlxuICAgIChzZWVkID09IG51bGwpID8gYXV0b3NlZWQoKSA6IHNlZWQsIDMpLCBrZXkpO1xuXG4gIC8vIFVzZSB0aGUgc2VlZCB0byBpbml0aWFsaXplIGFuIEFSQzQgZ2VuZXJhdG9yLlxuICB2YXIgYXJjNCA9IG5ldyBBUkM0KGtleSk7XG5cbiAgLy8gVGhpcyBmdW5jdGlvbiByZXR1cm5zIGEgcmFuZG9tIGRvdWJsZSBpbiBbMCwgMSkgdGhhdCBjb250YWluc1xuICAvLyByYW5kb21uZXNzIGluIGV2ZXJ5IGJpdCBvZiB0aGUgbWFudGlzc2Egb2YgdGhlIElFRUUgNzU0IHZhbHVlLlxuICB2YXIgcHJuZyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBuID0gYXJjNC5nKGNodW5rcyksICAgICAgICAgICAgIC8vIFN0YXJ0IHdpdGggYSBudW1lcmF0b3IgbiA8IDIgXiA0OFxuICAgICAgICBkID0gc3RhcnRkZW5vbSwgICAgICAgICAgICAgICAgIC8vICAgYW5kIGRlbm9taW5hdG9yIGQgPSAyIF4gNDguXG4gICAgICAgIHggPSAwOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBhbmQgbm8gJ2V4dHJhIGxhc3QgYnl0ZScuXG4gICAgd2hpbGUgKG4gPCBzaWduaWZpY2FuY2UpIHsgICAgICAgICAgLy8gRmlsbCB1cCBhbGwgc2lnbmlmaWNhbnQgZGlnaXRzIGJ5XG4gICAgICBuID0gKG4gKyB4KSAqIHdpZHRoOyAgICAgICAgICAgICAgLy8gICBzaGlmdGluZyBudW1lcmF0b3IgYW5kXG4gICAgICBkICo9IHdpZHRoOyAgICAgICAgICAgICAgICAgICAgICAgLy8gICBkZW5vbWluYXRvciBhbmQgZ2VuZXJhdGluZyBhXG4gICAgICB4ID0gYXJjNC5nKDEpOyAgICAgICAgICAgICAgICAgICAgLy8gICBuZXcgbGVhc3Qtc2lnbmlmaWNhbnQtYnl0ZS5cbiAgICB9XG4gICAgd2hpbGUgKG4gPj0gb3ZlcmZsb3cpIHsgICAgICAgICAgICAgLy8gVG8gYXZvaWQgcm91bmRpbmcgdXAsIGJlZm9yZSBhZGRpbmdcbiAgICAgIG4gLz0gMjsgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGxhc3QgYnl0ZSwgc2hpZnQgZXZlcnl0aGluZ1xuICAgICAgZCAvPSAyOyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgcmlnaHQgdXNpbmcgaW50ZWdlciBtYXRoIHVudGlsXG4gICAgICB4ID4+Pj0gMTsgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICB3ZSBoYXZlIGV4YWN0bHkgdGhlIGRlc2lyZWQgYml0cy5cbiAgICB9XG4gICAgcmV0dXJuIChuICsgeCkgLyBkOyAgICAgICAgICAgICAgICAgLy8gRm9ybSB0aGUgbnVtYmVyIHdpdGhpbiBbMCwgMSkuXG4gIH07XG5cbiAgcHJuZy5pbnQzMiA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJjNC5nKDQpIHwgMDsgfVxuICBwcm5nLnF1aWNrID0gZnVuY3Rpb24oKSB7IHJldHVybiBhcmM0LmcoNCkgLyAweDEwMDAwMDAwMDsgfVxuICBwcm5nLmRvdWJsZSA9IHBybmc7XG5cbiAgLy8gTWl4IHRoZSByYW5kb21uZXNzIGludG8gYWNjdW11bGF0ZWQgZW50cm9weS5cbiAgbWl4a2V5KHRvc3RyaW5nKGFyYzQuUyksIHBvb2wpO1xuXG4gIC8vIENhbGxpbmcgY29udmVudGlvbjogd2hhdCB0byByZXR1cm4gYXMgYSBmdW5jdGlvbiBvZiBwcm5nLCBzZWVkLCBpc19tYXRoLlxuICByZXR1cm4gKG9wdGlvbnMucGFzcyB8fCBjYWxsYmFjayB8fFxuICAgICAgZnVuY3Rpb24ocHJuZywgc2VlZCwgaXNfbWF0aF9jYWxsLCBzdGF0ZSkge1xuICAgICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgICAvLyBMb2FkIHRoZSBhcmM0IHN0YXRlIGZyb20gdGhlIGdpdmVuIHN0YXRlIGlmIGl0IGhhcyBhbiBTIGFycmF5LlxuICAgICAgICAgIGlmIChzdGF0ZS5TKSB7IGNvcHkoc3RhdGUsIGFyYzQpOyB9XG4gICAgICAgICAgLy8gT25seSBwcm92aWRlIHRoZSAuc3RhdGUgbWV0aG9kIGlmIHJlcXVlc3RlZCB2aWEgb3B0aW9ucy5zdGF0ZS5cbiAgICAgICAgICBwcm5nLnN0YXRlID0gZnVuY3Rpb24oKSB7IHJldHVybiBjb3B5KGFyYzQsIHt9KTsgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgY2FsbGVkIGFzIGEgbWV0aG9kIG9mIE1hdGggKE1hdGguc2VlZHJhbmRvbSgpKSwgbXV0YXRlXG4gICAgICAgIC8vIE1hdGgucmFuZG9tIGJlY2F1c2UgdGhhdCBpcyBob3cgc2VlZHJhbmRvbS5qcyBoYXMgd29ya2VkIHNpbmNlIHYxLjAuXG4gICAgICAgIGlmIChpc19tYXRoX2NhbGwpIHsgbWF0aFtybmduYW1lXSA9IHBybmc7IHJldHVybiBzZWVkOyB9XG5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBpdCBpcyBhIG5ld2VyIGNhbGxpbmcgY29udmVudGlvbiwgc28gcmV0dXJuIHRoZVxuICAgICAgICAvLyBwcm5nIGRpcmVjdGx5LlxuICAgICAgICBlbHNlIHJldHVybiBwcm5nO1xuICAgICAgfSkoXG4gIHBybmcsXG4gIHNob3J0c2VlZCxcbiAgJ2dsb2JhbCcgaW4gb3B0aW9ucyA/IG9wdGlvbnMuZ2xvYmFsIDogKHRoaXMgPT0gbWF0aCksXG4gIG9wdGlvbnMuc3RhdGUpO1xufVxubWF0aFsnc2VlZCcgKyBybmduYW1lXSA9IHNlZWRyYW5kb207XG5cbi8vXG4vLyBBUkM0XG4vL1xuLy8gQW4gQVJDNCBpbXBsZW1lbnRhdGlvbi4gIFRoZSBjb25zdHJ1Y3RvciB0YWtlcyBhIGtleSBpbiB0aGUgZm9ybSBvZlxuLy8gYW4gYXJyYXkgb2YgYXQgbW9zdCAod2lkdGgpIGludGVnZXJzIHRoYXQgc2hvdWxkIGJlIDAgPD0geCA8ICh3aWR0aCkuXG4vL1xuLy8gVGhlIGcoY291bnQpIG1ldGhvZCByZXR1cm5zIGEgcHNldWRvcmFuZG9tIGludGVnZXIgdGhhdCBjb25jYXRlbmF0ZXNcbi8vIHRoZSBuZXh0IChjb3VudCkgb3V0cHV0cyBmcm9tIEFSQzQuICBJdHMgcmV0dXJuIHZhbHVlIGlzIGEgbnVtYmVyIHhcbi8vIHRoYXQgaXMgaW4gdGhlIHJhbmdlIDAgPD0geCA8ICh3aWR0aCBeIGNvdW50KS5cbi8vXG5mdW5jdGlvbiBBUkM0KGtleSkge1xuICB2YXIgdCwga2V5bGVuID0ga2V5Lmxlbmd0aCxcbiAgICAgIG1lID0gdGhpcywgaSA9IDAsIGogPSBtZS5pID0gbWUuaiA9IDAsIHMgPSBtZS5TID0gW107XG5cbiAgLy8gVGhlIGVtcHR5IGtleSBbXSBpcyB0cmVhdGVkIGFzIFswXS5cbiAgaWYgKCFrZXlsZW4pIHsga2V5ID0gW2tleWxlbisrXTsgfVxuXG4gIC8vIFNldCB1cCBTIHVzaW5nIHRoZSBzdGFuZGFyZCBrZXkgc2NoZWR1bGluZyBhbGdvcml0aG0uXG4gIHdoaWxlIChpIDwgd2lkdGgpIHtcbiAgICBzW2ldID0gaSsrO1xuICB9XG4gIGZvciAoaSA9IDA7IGkgPCB3aWR0aDsgaSsrKSB7XG4gICAgc1tpXSA9IHNbaiA9IG1hc2sgJiAoaiArIGtleVtpICUga2V5bGVuXSArICh0ID0gc1tpXSkpXTtcbiAgICBzW2pdID0gdDtcbiAgfVxuXG4gIC8vIFRoZSBcImdcIiBtZXRob2QgcmV0dXJucyB0aGUgbmV4dCAoY291bnQpIG91dHB1dHMgYXMgb25lIG51bWJlci5cbiAgKG1lLmcgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIC8vIFVzaW5nIGluc3RhbmNlIG1lbWJlcnMgaW5zdGVhZCBvZiBjbG9zdXJlIHN0YXRlIG5lYXJseSBkb3VibGVzIHNwZWVkLlxuICAgIHZhciB0LCByID0gMCxcbiAgICAgICAgaSA9IG1lLmksIGogPSBtZS5qLCBzID0gbWUuUztcbiAgICB3aGlsZSAoY291bnQtLSkge1xuICAgICAgdCA9IHNbaSA9IG1hc2sgJiAoaSArIDEpXTtcbiAgICAgIHIgPSByICogd2lkdGggKyBzW21hc2sgJiAoKHNbaV0gPSBzW2ogPSBtYXNrICYgKGogKyB0KV0pICsgKHNbal0gPSB0KSldO1xuICAgIH1cbiAgICBtZS5pID0gaTsgbWUuaiA9IGo7XG4gICAgcmV0dXJuIHI7XG4gICAgLy8gRm9yIHJvYnVzdCB1bnByZWRpY3RhYmlsaXR5LCB0aGUgZnVuY3Rpb24gY2FsbCBiZWxvdyBhdXRvbWF0aWNhbGx5XG4gICAgLy8gZGlzY2FyZHMgYW4gaW5pdGlhbCBiYXRjaCBvZiB2YWx1ZXMuICBUaGlzIGlzIGNhbGxlZCBSQzQtZHJvcFsyNTZdLlxuICAgIC8vIFNlZSBodHRwOi8vZ29vZ2xlLmNvbS9zZWFyY2g/cT1yc2ErZmx1aHJlcityZXNwb25zZSZidG5JXG4gIH0pKHdpZHRoKTtcbn1cblxuLy9cbi8vIGNvcHkoKVxuLy8gQ29waWVzIGludGVybmFsIHN0YXRlIG9mIEFSQzQgdG8gb3IgZnJvbSBhIHBsYWluIG9iamVjdC5cbi8vXG5mdW5jdGlvbiBjb3B5KGYsIHQpIHtcbiAgdC5pID0gZi5pO1xuICB0LmogPSBmLmo7XG4gIHQuUyA9IGYuUy5zbGljZSgpO1xuICByZXR1cm4gdDtcbn07XG5cbi8vXG4vLyBmbGF0dGVuKClcbi8vIENvbnZlcnRzIGFuIG9iamVjdCB0cmVlIHRvIG5lc3RlZCBhcnJheXMgb2Ygc3RyaW5ncy5cbi8vXG5mdW5jdGlvbiBmbGF0dGVuKG9iaiwgZGVwdGgpIHtcbiAgdmFyIHJlc3VsdCA9IFtdLCB0eXAgPSAodHlwZW9mIG9iaiksIHByb3A7XG4gIGlmIChkZXB0aCAmJiB0eXAgPT0gJ29iamVjdCcpIHtcbiAgICBmb3IgKHByb3AgaW4gb2JqKSB7XG4gICAgICB0cnkgeyByZXN1bHQucHVzaChmbGF0dGVuKG9ialtwcm9wXSwgZGVwdGggLSAxKSk7IH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuICB9XG4gIHJldHVybiAocmVzdWx0Lmxlbmd0aCA/IHJlc3VsdCA6IHR5cCA9PSAnc3RyaW5nJyA/IG9iaiA6IG9iaiArICdcXDAnKTtcbn1cblxuLy9cbi8vIG1peGtleSgpXG4vLyBNaXhlcyBhIHN0cmluZyBzZWVkIGludG8gYSBrZXkgdGhhdCBpcyBhbiBhcnJheSBvZiBpbnRlZ2VycywgYW5kXG4vLyByZXR1cm5zIGEgc2hvcnRlbmVkIHN0cmluZyBzZWVkIHRoYXQgaXMgZXF1aXZhbGVudCB0byB0aGUgcmVzdWx0IGtleS5cbi8vXG5mdW5jdGlvbiBtaXhrZXkoc2VlZCwga2V5KSB7XG4gIHZhciBzdHJpbmdzZWVkID0gc2VlZCArICcnLCBzbWVhciwgaiA9IDA7XG4gIHdoaWxlIChqIDwgc3RyaW5nc2VlZC5sZW5ndGgpIHtcbiAgICBrZXlbbWFzayAmIGpdID1cbiAgICAgIG1hc2sgJiAoKHNtZWFyIF49IGtleVttYXNrICYgal0gKiAxOSkgKyBzdHJpbmdzZWVkLmNoYXJDb2RlQXQoaisrKSk7XG4gIH1cbiAgcmV0dXJuIHRvc3RyaW5nKGtleSk7XG59XG5cbi8vXG4vLyBhdXRvc2VlZCgpXG4vLyBSZXR1cm5zIGFuIG9iamVjdCBmb3IgYXV0b3NlZWRpbmcsIHVzaW5nIHdpbmRvdy5jcnlwdG8gYW5kIE5vZGUgY3J5cHRvXG4vLyBtb2R1bGUgaWYgYXZhaWxhYmxlLlxuLy9cbmZ1bmN0aW9uIGF1dG9zZWVkKCkge1xuICB0cnkge1xuICAgIGlmIChub2RlY3J5cHRvKSB7IHJldHVybiB0b3N0cmluZyhub2RlY3J5cHRvLnJhbmRvbUJ5dGVzKHdpZHRoKSk7IH1cbiAgICB2YXIgb3V0ID0gbmV3IFVpbnQ4QXJyYXkod2lkdGgpO1xuICAgIChnbG9iYWwuY3J5cHRvIHx8IGdsb2JhbC5tc0NyeXB0bykuZ2V0UmFuZG9tVmFsdWVzKG91dCk7XG4gICAgcmV0dXJuIHRvc3RyaW5nKG91dCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIgYnJvd3NlciA9IGdsb2JhbC5uYXZpZ2F0b3IsXG4gICAgICAgIHBsdWdpbnMgPSBicm93c2VyICYmIGJyb3dzZXIucGx1Z2lucztcbiAgICByZXR1cm4gWytuZXcgRGF0ZSwgZ2xvYmFsLCBwbHVnaW5zLCBnbG9iYWwuc2NyZWVuLCB0b3N0cmluZyhwb29sKV07XG4gIH1cbn1cblxuLy9cbi8vIHRvc3RyaW5nKClcbi8vIENvbnZlcnRzIGFuIGFycmF5IG9mIGNoYXJjb2RlcyB0byBhIHN0cmluZ1xuLy9cbmZ1bmN0aW9uIHRvc3RyaW5nKGEpIHtcbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoMCwgYSk7XG59XG5cbi8vXG4vLyBXaGVuIHNlZWRyYW5kb20uanMgaXMgbG9hZGVkLCB3ZSBpbW1lZGlhdGVseSBtaXggYSBmZXcgYml0c1xuLy8gZnJvbSB0aGUgYnVpbHQtaW4gUk5HIGludG8gdGhlIGVudHJvcHkgcG9vbC4gIEJlY2F1c2Ugd2UgZG9cbi8vIG5vdCB3YW50IHRvIGludGVyZmVyZSB3aXRoIGRldGVybWluaXN0aWMgUFJORyBzdGF0ZSBsYXRlcixcbi8vIHNlZWRyYW5kb20gd2lsbCBub3QgY2FsbCBtYXRoLnJhbmRvbSBvbiBpdHMgb3duIGFnYWluIGFmdGVyXG4vLyBpbml0aWFsaXphdGlvbi5cbi8vXG5taXhrZXkobWF0aC5yYW5kb20oKSwgcG9vbCk7XG5cbi8vXG4vLyBOb2RlanMgYW5kIEFNRCBzdXBwb3J0OiBleHBvcnQgdGhlIGltcGxlbWVudGF0aW9uIGFzIGEgbW9kdWxlIHVzaW5nXG4vLyBlaXRoZXIgY29udmVudGlvbi5cbi8vXG5pZiAoKHR5cGVvZiBtb2R1bGUpID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gc2VlZHJhbmRvbTtcbiAgLy8gV2hlbiBpbiBub2RlLmpzLCB0cnkgdXNpbmcgY3J5cHRvIHBhY2thZ2UgZm9yIGF1dG9zZWVkaW5nLlxuICB0cnkge1xuICAgIG5vZGVjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbiAgfSBjYXRjaCAoZXgpIHt9XG59IGVsc2UgaWYgKCh0eXBlb2YgZGVmaW5lKSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gc2VlZHJhbmRvbTsgfSk7XG59XG5cbi8vIEVuZCBhbm9ueW1vdXMgc2NvcGUsIGFuZCBwYXNzIGluaXRpYWwgdmFsdWVzLlxufSkoXG4gIFtdLCAgICAgLy8gcG9vbDogZW50cm9weSBwb29sIHN0YXJ0cyBlbXB0eVxuICBNYXRoICAgIC8vIG1hdGg6IHBhY2thZ2UgY29udGFpbmluZyByYW5kb20sIHBvdywgYW5kIHNlZWRyYW5kb21cbik7XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5yYW5kb21CeXRlcyA9IGV4cG9ydHMucm5nID0gZXhwb3J0cy5wc2V1ZG9SYW5kb21CeXRlcyA9IGV4cG9ydHMucHJuZyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJylcbmV4cG9ydHMuY3JlYXRlSGFzaCA9IGV4cG9ydHMuSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJylcbmV4cG9ydHMuY3JlYXRlSG1hYyA9IGV4cG9ydHMuSG1hYyA9IHJlcXVpcmUoJ2NyZWF0ZS1obWFjJylcblxudmFyIGhhc2hlcyA9IFsnc2hhMScsICdzaGEyMjQnLCAnc2hhMjU2JywgJ3NoYTM4NCcsICdzaGE1MTInLCAnbWQ1JywgJ3JtZDE2MCddLmNvbmNhdChPYmplY3Qua2V5cyhyZXF1aXJlKCdicm93c2VyaWZ5LXNpZ24vYWxnb3MnKSkpXG5leHBvcnRzLmdldEhhc2hlcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGhhc2hlc1xufVxuXG52YXIgcCA9IHJlcXVpcmUoJ3Bia2RmMicpXG5leHBvcnRzLnBia2RmMiA9IHAucGJrZGYyXG5leHBvcnRzLnBia2RmMlN5bmMgPSBwLnBia2RmMlN5bmNcblxudmFyIGFlcyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktY2lwaGVyJylcbjtbXG4gICdDaXBoZXInLFxuICAnY3JlYXRlQ2lwaGVyJyxcbiAgJ0NpcGhlcml2JyxcbiAgJ2NyZWF0ZUNpcGhlcml2JyxcbiAgJ0RlY2lwaGVyJyxcbiAgJ2NyZWF0ZURlY2lwaGVyJyxcbiAgJ0RlY2lwaGVyaXYnLFxuICAnY3JlYXRlRGVjaXBoZXJpdicsXG4gICdnZXRDaXBoZXJzJyxcbiAgJ2xpc3RDaXBoZXJzJ1xuXS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgZXhwb3J0c1trZXldID0gYWVzW2tleV1cbn0pXG5cbnZhciBkaCA9IHJlcXVpcmUoJ2RpZmZpZS1oZWxsbWFuJylcbjtbXG4gICdEaWZmaWVIZWxsbWFuR3JvdXAnLFxuICAnY3JlYXRlRGlmZmllSGVsbG1hbkdyb3VwJyxcbiAgJ2dldERpZmZpZUhlbGxtYW4nLFxuICAnY3JlYXRlRGlmZmllSGVsbG1hbicsXG4gICdEaWZmaWVIZWxsbWFuJ1xuXS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgZXhwb3J0c1trZXldID0gZGhba2V5XVxufSlcblxudmFyIHNpZ24gPSByZXF1aXJlKCdicm93c2VyaWZ5LXNpZ24nKVxuO1tcbiAgJ2NyZWF0ZVNpZ24nLFxuICAnU2lnbicsXG4gICdjcmVhdGVWZXJpZnknLFxuICAnVmVyaWZ5J1xuXS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgZXhwb3J0c1trZXldID0gc2lnbltrZXldXG59KVxuXG5leHBvcnRzLmNyZWF0ZUVDREggPSByZXF1aXJlKCdjcmVhdGUtZWNkaCcpXG5cbnZhciBwdWJsaWNFbmNyeXB0ID0gcmVxdWlyZSgncHVibGljLWVuY3J5cHQnKVxuXG47W1xuICAncHVibGljRW5jcnlwdCcsXG4gICdwcml2YXRlRW5jcnlwdCcsXG4gICdwdWJsaWNEZWNyeXB0JyxcbiAgJ3ByaXZhdGVEZWNyeXB0J1xuXS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgZXhwb3J0c1trZXldID0gcHVibGljRW5jcnlwdFtrZXldXG59KVxuXG4vLyB0aGUgbGVhc3QgSSBjYW4gZG8gaXMgbWFrZSBlcnJvciBtZXNzYWdlcyBmb3IgdGhlIHJlc3Qgb2YgdGhlIG5vZGUuanMvY3J5cHRvIGFwaS5cbjtbXG4gICdjcmVhdGVDcmVkZW50aWFscydcbl0uZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICBleHBvcnRzW25hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgIHRocm93IG5ldyBFcnJvcihbXG4gICAgICAnc29ycnksICcgKyBuYW1lICsgJyBpcyBub3QgaW1wbGVtZW50ZWQgeWV0JyxcbiAgICAgICd3ZSBhY2NlcHQgcHVsbCByZXF1ZXN0cycsXG4gICAgICAnaHR0cHM6Ly9naXRodWIuY29tL2NyeXB0by1icm93c2VyaWZ5L2NyeXB0by1icm93c2VyaWZ5J1xuICAgIF0uam9pbignXFxuJykpXG4gIH1cbn0pXG4iLCJleHBvcnRzLnB1YmxpY0VuY3J5cHQgPSByZXF1aXJlKCcuL3B1YmxpY0VuY3J5cHQnKTtcbmV4cG9ydHMucHJpdmF0ZURlY3J5cHQgPSByZXF1aXJlKCcuL3ByaXZhdGVEZWNyeXB0Jyk7XG5cbmV4cG9ydHMucHJpdmF0ZUVuY3J5cHQgPSBmdW5jdGlvbiBwcml2YXRlRW5jcnlwdChrZXksIGJ1Zikge1xuICByZXR1cm4gZXhwb3J0cy5wdWJsaWNFbmNyeXB0KGtleSwgYnVmLCB0cnVlKTtcbn07XG5cbmV4cG9ydHMucHVibGljRGVjcnlwdCA9IGZ1bmN0aW9uIHB1YmxpY0RlY3J5cHQoa2V5LCBidWYpIHtcbiAgcmV0dXJuIGV4cG9ydHMucHJpdmF0ZURlY3J5cHQoa2V5LCBidWYsIHRydWUpO1xufTsiLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG52YXIgcGFyc2VLZXlzID0gcmVxdWlyZSgncGFyc2UtYXNuMScpO1xudmFyIHJhbmRvbUJ5dGVzID0gcmVxdWlyZSgncmFuZG9tYnl0ZXMnKTtcbnZhciBjcmVhdGVIYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKTtcbnZhciBtZ2YgPSByZXF1aXJlKCcuL21nZicpO1xudmFyIHhvciA9IHJlcXVpcmUoJy4veG9yJyk7XG52YXIgYm4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIHdpdGhQdWJsaWMgPSByZXF1aXJlKCcuL3dpdGhQdWJsaWMnKTtcbnZhciBjcnQgPSByZXF1aXJlKCdicm93c2VyaWZ5LXJzYScpO1xuXG52YXIgY29uc3RhbnRzID0ge1xuICBSU0FfUEtDUzFfT0FFUF9QQURESU5HOiA0LFxuICBSU0FfUEtDUzFfUEFERElOOiAxLFxuICBSU0FfTk9fUEFERElORzogM1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwdWJsaWNFbmNyeXB0KHB1YmxpY19rZXksIG1zZywgcmV2ZXJzZSkge1xuICB2YXIgcGFkZGluZztcbiAgaWYgKHB1YmxpY19rZXkucGFkZGluZykge1xuICAgIHBhZGRpbmcgPSBwdWJsaWNfa2V5LnBhZGRpbmc7XG4gIH0gZWxzZSBpZiAocmV2ZXJzZSkge1xuICAgIHBhZGRpbmcgPSAxO1xuICB9IGVsc2Uge1xuICAgIHBhZGRpbmcgPSA0O1xuICB9XG4gIHZhciBrZXkgPSBwYXJzZUtleXMocHVibGljX2tleSk7XG4gIHZhciBwYWRkZWRNc2c7XG4gIGlmIChwYWRkaW5nID09PSA0KSB7XG4gICAgcGFkZGVkTXNnID0gb2FlcChrZXksIG1zZyk7XG4gIH0gZWxzZSBpZiAocGFkZGluZyA9PT0gMSkge1xuICAgIHBhZGRlZE1zZyA9IHBrY3MxKGtleSwgbXNnLCByZXZlcnNlKTtcbiAgfSBlbHNlIGlmIChwYWRkaW5nID09PSAzKSB7XG4gICAgcGFkZGVkTXNnID0gbmV3IGJuKG1zZyk7XG4gICAgaWYgKHBhZGRlZE1zZy5jbXAoa2V5Lm1vZHVsdXMpID49IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZGF0YSB0b28gbG9uZyBmb3IgbW9kdWx1cycpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gcGFkZGluZycpO1xuICB9XG4gIGlmIChyZXZlcnNlKSB7XG4gICAgcmV0dXJuIGNydChwYWRkZWRNc2csIGtleSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHdpdGhQdWJsaWMocGFkZGVkTXNnLCBrZXkpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBvYWVwKGtleSwgbXNnKXtcbiAgdmFyIGsgPSBrZXkubW9kdWx1cy5ieXRlTGVuZ3RoKCk7XG4gIHZhciBtTGVuID0gbXNnLmxlbmd0aDtcbiAgdmFyIGlIYXNoID0gY3JlYXRlSGFzaCgnc2hhMScpLnVwZGF0ZShuZXcgQnVmZmVyKCcnKSkuZGlnZXN0KCk7XG4gIHZhciBoTGVuID0gaUhhc2gubGVuZ3RoO1xuICB2YXIgaExlbjIgPSAyICogaExlbjtcbiAgaWYgKG1MZW4gPiBrIC0gaExlbjIgLSAyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdtZXNzYWdlIHRvbyBsb25nJyk7XG4gIH1cbiAgdmFyIHBzID0gbmV3IEJ1ZmZlcihrIC0gbUxlbiAtIGhMZW4yIC0gMik7XG4gIHBzLmZpbGwoMCk7XG4gIHZhciBkYmxlbiA9IGsgLSBoTGVuIC0gMTtcbiAgdmFyIHNlZWQgPSByYW5kb21CeXRlcyhoTGVuKTtcbiAgdmFyIG1hc2tlZERiID0geG9yKEJ1ZmZlci5jb25jYXQoW2lIYXNoLCBwcywgbmV3IEJ1ZmZlcihbMV0pLCBtc2ddLCBkYmxlbiksIG1nZihzZWVkLCBkYmxlbikpO1xuICB2YXIgbWFza2VkU2VlZCA9IHhvcihzZWVkLCBtZ2YobWFza2VkRGIsIGhMZW4pKTtcbiAgcmV0dXJuIG5ldyBibihCdWZmZXIuY29uY2F0KFtuZXcgQnVmZmVyKFswXSksIG1hc2tlZFNlZWQsIG1hc2tlZERiXSwgaykpO1xufVxuZnVuY3Rpb24gcGtjczEoa2V5LCBtc2csIHJldmVyc2Upe1xuICB2YXIgbUxlbiA9IG1zZy5sZW5ndGg7XG4gIHZhciBrID0ga2V5Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICBpZiAobUxlbiA+IGsgLSAxMSkge1xuICAgIHRocm93IG5ldyBFcnJvcignbWVzc2FnZSB0b28gbG9uZycpO1xuICB9XG4gIHZhciBwcztcbiAgaWYgKHJldmVyc2UpIHtcbiAgICBwcyA9IG5ldyBCdWZmZXIoayAtIG1MZW4gLSAzKTtcbiAgICBwcy5maWxsKDB4ZmYpO1xuICB9IGVsc2Uge1xuICAgIHBzID0gbm9uWmVybyhrIC0gbUxlbiAtIDMpO1xuICB9XG4gIHJldHVybiBuZXcgYm4oQnVmZmVyLmNvbmNhdChbbmV3IEJ1ZmZlcihbMCwgcmV2ZXJzZT8xOjJdKSwgcHMsIG5ldyBCdWZmZXIoWzBdKSwgbXNnXSwgaykpO1xufVxuZnVuY3Rpb24gbm9uWmVybyhsZW4sIGNyeXB0bykge1xuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcihsZW4pO1xuICB2YXIgaSA9IDA7XG4gIHZhciBjYWNoZSA9IHJhbmRvbUJ5dGVzKGxlbioyKTtcbiAgdmFyIGN1ciA9IDA7XG4gIHZhciBudW07XG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgaWYgKGN1ciA9PT0gY2FjaGUubGVuZ3RoKSB7XG4gICAgICBjYWNoZSA9IHJhbmRvbUJ5dGVzKGxlbioyKTtcbiAgICAgIGN1ciA9IDA7XG4gICAgfVxuICAgIG51bSA9IGNhY2hlW2N1cisrXTtcbiAgICBpZiAobnVtKSB7XG4gICAgICBvdXRbaSsrXSA9IG51bTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12Y0hWaWJHbGpMV1Z1WTNKNWNIUXZjSFZpYkdsalJXNWpjbmx3ZEM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUhCaGNuTmxTMlY1Y3lBOUlISmxjWFZwY21Vb0ozQmhjbk5sTFdGemJqRW5LVHRjYm5aaGNpQnlZVzVrYjIxQ2VYUmxjeUE5SUhKbGNYVnBjbVVvSjNKaGJtUnZiV0o1ZEdWekp5azdYRzUyWVhJZ1kzSmxZWFJsU0dGemFDQTlJSEpsY1hWcGNtVW9KMk55WldGMFpTMW9ZWE5vSnlrN1hHNTJZWElnYldkbUlEMGdjbVZ4ZFdseVpTZ25MaTl0WjJZbktUdGNiblpoY2lCNGIzSWdQU0J5WlhGMWFYSmxLQ2N1TDNodmNpY3BPMXh1ZG1GeUlHSnVJRDBnY21WeGRXbHlaU2duWW00dWFuTW5LVHRjYm5aaGNpQjNhWFJvVUhWaWJHbGpJRDBnY21WeGRXbHlaU2duTGk5M2FYUm9VSFZpYkdsakp5azdYRzUyWVhJZ1kzSjBJRDBnY21WeGRXbHlaU2duWW5KdmQzTmxjbWxtZVMxeWMyRW5LVHRjYmx4dWRtRnlJR052Ym5OMFlXNTBjeUE5SUh0Y2JpQWdVbE5CWDFCTFExTXhYMDlCUlZCZlVFRkVSRWxPUnpvZ05DeGNiaUFnVWxOQlgxQkxRMU14WDFCQlJFUkpUam9nTVN4Y2JpQWdVbE5CWDA1UFgxQkJSRVJKVGtjNklETmNibjA3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0Z2NIVmliR2xqUlc1amNubHdkQ2h3ZFdKc2FXTmZhMlY1TENCdGMyY3NJSEpsZG1WeWMyVXBJSHRjYmlBZ2RtRnlJSEJoWkdScGJtYzdYRzRnSUdsbUlDaHdkV0pzYVdOZmEyVjVMbkJoWkdScGJtY3BJSHRjYmlBZ0lDQndZV1JrYVc1bklEMGdjSFZpYkdsalgydGxlUzV3WVdSa2FXNW5PMXh1SUNCOUlHVnNjMlVnYVdZZ0tISmxkbVZ5YzJVcElIdGNiaUFnSUNCd1lXUmthVzVuSUQwZ01UdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQndZV1JrYVc1bklEMGdORHRjYmlBZ2ZWeHVJQ0IyWVhJZ2EyVjVJRDBnY0dGeWMyVkxaWGx6S0hCMVlteHBZMTlyWlhrcE8xeHVJQ0IyWVhJZ2NHRmtaR1ZrVFhObk8xeHVJQ0JwWmlBb2NHRmtaR2x1WnlBOVBUMGdOQ2tnZTF4dUlDQWdJSEJoWkdSbFpFMXpaeUE5SUc5aFpYQW9hMlY1TENCdGMyY3BPMXh1SUNCOUlHVnNjMlVnYVdZZ0tIQmhaR1JwYm1jZ1BUMDlJREVwSUh0Y2JpQWdJQ0J3WVdSa1pXUk5jMmNnUFNCd2EyTnpNU2hyWlhrc0lHMXpaeXdnY21WMlpYSnpaU2s3WEc0Z0lIMGdaV3h6WlNCcFppQW9jR0ZrWkdsdVp5QTlQVDBnTXlrZ2UxeHVJQ0FnSUhCaFpHUmxaRTF6WnlBOUlHNWxkeUJpYmlodGMyY3BPMXh1SUNBZ0lHbG1JQ2h3WVdSa1pXUk5jMmN1WTIxd0tHdGxlUzV0YjJSMWJIVnpLU0ErUFNBd0tTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oyUmhkR0VnZEc5dklHeHZibWNnWm05eUlHMXZaSFZzZFhNbktUdGNiaUFnSUNCOVhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkMWJtdHViM2R1SUhCaFpHUnBibWNuS1R0Y2JpQWdmVnh1SUNCcFppQW9jbVYyWlhKelpTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCamNuUW9jR0ZrWkdWa1RYTm5MQ0JyWlhrcE8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lISmxkSFZ5YmlCM2FYUm9VSFZpYkdsaktIQmhaR1JsWkUxelp5d2dhMlY1S1R0Y2JpQWdmVnh1ZlR0Y2JseHVablZ1WTNScGIyNGdiMkZsY0NoclpYa3NJRzF6WnlsN1hHNGdJSFpoY2lCcklEMGdhMlY1TG0xdlpIVnNkWE11WW5sMFpVeGxibWQwYUNncE8xeHVJQ0IyWVhJZ2JVeGxiaUE5SUcxelp5NXNaVzVuZEdnN1hHNGdJSFpoY2lCcFNHRnphQ0E5SUdOeVpXRjBaVWhoYzJnb0ozTm9ZVEVuS1M1MWNHUmhkR1VvYm1WM0lFSjFabVpsY2lnbkp5a3BMbVJwWjJWemRDZ3BPMXh1SUNCMllYSWdhRXhsYmlBOUlHbElZWE5vTG14bGJtZDBhRHRjYmlBZ2RtRnlJR2hNWlc0eUlEMGdNaUFxSUdoTVpXNDdYRzRnSUdsbUlDaHRUR1Z1SUQ0Z2F5QXRJR2hNWlc0eUlDMGdNaWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25iV1Z6YzJGblpTQjBiMjhnYkc5dVp5Y3BPMXh1SUNCOVhHNGdJSFpoY2lCd2N5QTlJRzVsZHlCQ2RXWm1aWElvYXlBdElHMU1aVzRnTFNCb1RHVnVNaUF0SURJcE8xeHVJQ0J3Y3k1bWFXeHNLREFwTzF4dUlDQjJZWElnWkdKc1pXNGdQU0JySUMwZ2FFeGxiaUF0SURFN1hHNGdJSFpoY2lCelpXVmtJRDBnY21GdVpHOXRRbmwwWlhNb2FFeGxiaWs3WEc0Z0lIWmhjaUJ0WVhOclpXUkVZaUE5SUhodmNpaENkV1ptWlhJdVkyOXVZMkYwS0Z0cFNHRnphQ3dnY0hNc0lHNWxkeUJDZFdabVpYSW9XekZkS1N3Z2JYTm5YU3dnWkdKc1pXNHBMQ0J0WjJZb2MyVmxaQ3dnWkdKc1pXNHBLVHRjYmlBZ2RtRnlJRzFoYzJ0bFpGTmxaV1FnUFNCNGIzSW9jMlZsWkN3Z2JXZG1LRzFoYzJ0bFpFUmlMQ0JvVEdWdUtTazdYRzRnSUhKbGRIVnliaUJ1WlhjZ1ltNG9RblZtWm1WeUxtTnZibU5oZENoYmJtVjNJRUoxWm1abGNpaGJNRjBwTENCdFlYTnJaV1JUWldWa0xDQnRZWE5yWldSRVlsMHNJR3NwS1R0Y2JuMWNibVoxYm1OMGFXOXVJSEJyWTNNeEtHdGxlU3dnYlhObkxDQnlaWFpsY25ObEtYdGNiaUFnZG1GeUlHMU1aVzRnUFNCdGMyY3ViR1Z1WjNSb08xeHVJQ0IyWVhJZ2F5QTlJR3RsZVM1dGIyUjFiSFZ6TG1KNWRHVk1aVzVuZEdnb0tUdGNiaUFnYVdZZ0tHMU1aVzRnUGlCcklDMGdNVEVwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMjFsYzNOaFoyVWdkRzl2SUd4dmJtY25LVHRjYmlBZ2ZWeHVJQ0IyWVhJZ2NITTdYRzRnSUdsbUlDaHlaWFpsY25ObEtTQjdYRzRnSUNBZ2NITWdQU0J1WlhjZ1FuVm1abVZ5S0dzZ0xTQnRUR1Z1SUMwZ015azdYRzRnSUNBZ2NITXVabWxzYkNnd2VHWm1LVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0J3Y3lBOUlHNXZibHBsY204b2F5QXRJRzFNWlc0Z0xTQXpLVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdibVYzSUdKdUtFSjFabVpsY2k1amIyNWpZWFFvVzI1bGR5QkNkV1ptWlhJb1d6QXNJSEpsZG1WeWMyVS9NVG95WFNrc0lIQnpMQ0J1WlhjZ1FuVm1abVZ5S0Zzd1hTa3NJRzF6WjEwc0lHc3BLVHRjYm4xY2JtWjFibU4wYVc5dUlHNXZibHBsY204b2JHVnVMQ0JqY25sd2RHOHBJSHRjYmlBZ2RtRnlJRzkxZENBOUlHNWxkeUJDZFdabVpYSW9iR1Z1S1R0Y2JpQWdkbUZ5SUdrZ1BTQXdPMXh1SUNCMllYSWdZMkZqYUdVZ1BTQnlZVzVrYjIxQ2VYUmxjeWhzWlc0cU1pazdYRzRnSUhaaGNpQmpkWElnUFNBd08xeHVJQ0IyWVhJZ2JuVnRPMXh1SUNCM2FHbHNaU0FvYVNBOElHeGxiaWtnZTF4dUlDQWdJR2xtSUNoamRYSWdQVDA5SUdOaFkyaGxMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdZMkZqYUdVZ1BTQnlZVzVrYjIxQ2VYUmxjeWhzWlc0cU1pazdYRzRnSUNBZ0lDQmpkWElnUFNBd08xeHVJQ0FnSUgxY2JpQWdJQ0J1ZFcwZ1BTQmpZV05vWlZ0amRYSXJLMTA3WEc0Z0lDQWdhV1lnS0c1MWJTa2dlMXh1SUNBZ0lDQWdiM1YwVzJrcksxMGdQU0J1ZFcwN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhKbGRIVnliaUJ2ZFhRN1hHNTlJbDE5IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xudmFyIHBhcnNlS2V5cyA9IHJlcXVpcmUoJ3BhcnNlLWFzbjEnKTtcbnZhciBtZ2YgPSByZXF1aXJlKCcuL21nZicpO1xudmFyIHhvciA9IHJlcXVpcmUoJy4veG9yJyk7XG52YXIgYm4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIGNydCA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktcnNhJyk7XG52YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJyk7XG52YXIgd2l0aFB1YmxpYyA9IHJlcXVpcmUoJy4vd2l0aFB1YmxpYycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwcml2YXRlRGVjcnlwdChwcml2YXRlX2tleSwgZW5jLCByZXZlcnNlKSB7XG4gIHZhciBwYWRkaW5nO1xuICBpZiAocHJpdmF0ZV9rZXkucGFkZGluZykge1xuICAgIHBhZGRpbmcgPSBwcml2YXRlX2tleS5wYWRkaW5nO1xuICB9IGVsc2UgaWYgKHJldmVyc2UpIHtcbiAgICBwYWRkaW5nID0gMTtcbiAgfSBlbHNlIHtcbiAgICBwYWRkaW5nID0gNDtcbiAgfVxuICBcbiAgdmFyIGtleSA9IHBhcnNlS2V5cyhwcml2YXRlX2tleSk7XG4gIHZhciBrID0ga2V5Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICBpZiAoZW5jLmxlbmd0aCA+IGsgfHwgbmV3IGJuKGVuYykuY21wKGtleS5tb2R1bHVzKSA+PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdkZWNyeXB0aW9uIGVycm9yJyk7XG4gIH1cbiAgdmFyIG1zZztcbiAgaWYgKHJldmVyc2UpIHtcbiAgICBtc2cgPSB3aXRoUHVibGljKG5ldyBibihlbmMpLCBrZXkpO1xuICB9IGVsc2Uge1xuICAgIG1zZyA9IGNydChlbmMsIGtleSk7XG4gIH1cbiAgdmFyIHpCdWZmZXIgPSBuZXcgQnVmZmVyKGsgLSBtc2cubGVuZ3RoKTtcbiAgekJ1ZmZlci5maWxsKDApO1xuICBtc2cgPSBCdWZmZXIuY29uY2F0KFt6QnVmZmVyLCBtc2ddLCBrKTtcbiAgaWYgKHBhZGRpbmcgPT09IDQpIHtcbiAgICByZXR1cm4gb2FlcChrZXksIG1zZyk7XG4gIH0gZWxzZSBpZiAocGFkZGluZyA9PT0gMSkge1xuICAgIHJldHVybiBwa2NzMShrZXksIG1zZywgcmV2ZXJzZSk7XG4gIH0gZWxzZSBpZiAocGFkZGluZyA9PT0gMykge1xuICAgIHJldHVybiBtc2c7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIHBhZGRpbmcnKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gb2FlcChrZXksIG1zZyl7XG4gIHZhciBuID0ga2V5Lm1vZHVsdXM7XG4gIHZhciBrID0ga2V5Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICB2YXIgbUxlbiA9IG1zZy5sZW5ndGg7XG4gIHZhciBpSGFzaCA9IGNyZWF0ZUhhc2goJ3NoYTEnKS51cGRhdGUobmV3IEJ1ZmZlcignJykpLmRpZ2VzdCgpO1xuICB2YXIgaExlbiA9IGlIYXNoLmxlbmd0aDtcbiAgdmFyIGhMZW4yID0gMiAqIGhMZW47XG4gIGlmIChtc2dbMF0gIT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlY3J5cHRpb24gZXJyb3InKTtcbiAgfVxuICB2YXIgbWFza2VkU2VlZCA9IG1zZy5zbGljZSgxLCBoTGVuICsgMSk7XG4gIHZhciBtYXNrZWREYiA9ICBtc2cuc2xpY2UoaExlbiArIDEpO1xuICB2YXIgc2VlZCA9IHhvcihtYXNrZWRTZWVkLCBtZ2YobWFza2VkRGIsIGhMZW4pKTtcbiAgdmFyIGRiID0geG9yKG1hc2tlZERiLCBtZ2Yoc2VlZCwgayAtIGhMZW4gLSAxKSk7XG4gIGlmIChjb21wYXJlKGlIYXNoLCBkYi5zbGljZSgwLCBoTGVuKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlY3J5cHRpb24gZXJyb3InKTtcbiAgfVxuICB2YXIgaSA9IGhMZW47XG4gIHdoaWxlIChkYltpXSA9PT0gMCkge1xuICAgIGkrKztcbiAgfVxuICBpZiAoZGJbaSsrXSAhPT0gMSkge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVjcnlwdGlvbiBlcnJvcicpO1xuICB9XG4gIHJldHVybiBkYi5zbGljZShpKTtcbn1cblxuZnVuY3Rpb24gcGtjczEoa2V5LCBtc2csIHJldmVyc2Upe1xuICB2YXIgcDEgPSBtc2cuc2xpY2UoMCwgMik7XG4gIHZhciBpID0gMjtcbiAgdmFyIHN0YXR1cyA9IDA7XG4gIHdoaWxlIChtc2dbaSsrXSAhPT0gMCkge1xuICAgIGlmIChpID49IG1zZy5sZW5ndGgpIHtcbiAgICAgIHN0YXR1cysrO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHZhciBwcyA9IG1zZy5zbGljZSgyLCBpIC0gMSk7XG4gIHZhciBwMiA9IG1zZy5zbGljZShpIC0gMSwgaSk7XG5cbiAgaWYgKChwMS50b1N0cmluZygnaGV4JykgIT09ICcwMDAyJyAmJiAhcmV2ZXJzZSkgfHwgKHAxLnRvU3RyaW5nKCdoZXgnKSAhPT0gJzAwMDEnICYmIHJldmVyc2UpKXtcbiAgICBzdGF0dXMrKztcbiAgfVxuICBpZiAocHMubGVuZ3RoIDwgOCkge1xuICAgIHN0YXR1cysrO1xuICB9XG4gIGlmIChzdGF0dXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlY3J5cHRpb24gZXJyb3InKTtcbiAgfVxuICByZXR1cm4gIG1zZy5zbGljZShpKTtcbn1cbmZ1bmN0aW9uIGNvbXBhcmUoYSwgYil7XG4gIGEgPSBuZXcgQnVmZmVyKGEpO1xuICBiID0gbmV3IEJ1ZmZlcihiKTtcbiAgdmFyIGRpZiA9IDA7XG4gIHZhciBsZW4gPSBhLmxlbmd0aDtcbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgIGRpZisrO1xuICAgIGxlbiA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aCk7XG4gIH1cbiAgdmFyIGkgPSAtMTtcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIGRpZiArPSAoYVtpXSBeIGJbaV0pO1xuICB9XG4gIHJldHVybiBkaWY7XG59XG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdmNIVmliR2xqTFdWdVkzSjVjSFF2Y0hKcGRtRjBaVVJsWTNKNWNIUXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWRtRnlJSEJoY25ObFMyVjVjeUE5SUhKbGNYVnBjbVVvSjNCaGNuTmxMV0Z6YmpFbktUdGNiblpoY2lCdFoyWWdQU0J5WlhGMWFYSmxLQ2N1TDIxblppY3BPMXh1ZG1GeUlIaHZjaUE5SUhKbGNYVnBjbVVvSnk0dmVHOXlKeWs3WEc1MllYSWdZbTRnUFNCeVpYRjFhWEpsS0NkaWJpNXFjeWNwTzF4dWRtRnlJR055ZENBOUlISmxjWFZwY21Vb0oySnliM2R6WlhKcFpua3Rjbk5oSnlrN1hHNTJZWElnWTNKbFlYUmxTR0Z6YUNBOUlISmxjWFZwY21Vb0oyTnlaV0YwWlMxb1lYTm9KeWs3WEc1MllYSWdkMmwwYUZCMVlteHBZeUE5SUhKbGNYVnBjbVVvSnk0dmQybDBhRkIxWW14cFl5Y3BPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaUJ3Y21sMllYUmxSR1ZqY25sd2RDaHdjbWwyWVhSbFgydGxlU3dnWlc1akxDQnlaWFpsY25ObEtTQjdYRzRnSUhaaGNpQndZV1JrYVc1bk8xeHVJQ0JwWmlBb2NISnBkbUYwWlY5clpYa3VjR0ZrWkdsdVp5a2dlMXh1SUNBZ0lIQmhaR1JwYm1jZ1BTQndjbWwyWVhSbFgydGxlUzV3WVdSa2FXNW5PMXh1SUNCOUlHVnNjMlVnYVdZZ0tISmxkbVZ5YzJVcElIdGNiaUFnSUNCd1lXUmthVzVuSUQwZ01UdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQndZV1JrYVc1bklEMGdORHRjYmlBZ2ZWeHVJQ0JjYmlBZ2RtRnlJR3RsZVNBOUlIQmhjbk5sUzJWNWN5aHdjbWwyWVhSbFgydGxlU2s3WEc0Z0lIWmhjaUJySUQwZ2EyVjVMbTF2WkhWc2RYTXVZbmwwWlV4bGJtZDBhQ2dwTzF4dUlDQnBaaUFvWlc1akxteGxibWQwYUNBK0lHc2dmSHdnYm1WM0lHSnVLR1Z1WXlrdVkyMXdLR3RsZVM1dGIyUjFiSFZ6S1NBK1BTQXdLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZGtaV055ZVhCMGFXOXVJR1Z5Y205eUp5azdYRzRnSUgxY2JpQWdkbUZ5SUcxelp6dGNiaUFnYVdZZ0tISmxkbVZ5YzJVcElIdGNiaUFnSUNCdGMyY2dQU0IzYVhSb1VIVmliR2xqS0c1bGR5QmliaWhsYm1NcExDQnJaWGtwTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUcxelp5QTlJR055ZENobGJtTXNJR3RsZVNrN1hHNGdJSDFjYmlBZ2RtRnlJSHBDZFdabVpYSWdQU0J1WlhjZ1FuVm1abVZ5S0dzZ0xTQnRjMmN1YkdWdVozUm9LVHRjYmlBZ2VrSjFabVpsY2k1bWFXeHNLREFwTzF4dUlDQnRjMmNnUFNCQ2RXWm1aWEl1WTI5dVkyRjBLRnQ2UW5WbVptVnlMQ0J0YzJkZExDQnJLVHRjYmlBZ2FXWWdLSEJoWkdScGJtY2dQVDA5SURRcElIdGNiaUFnSUNCeVpYUjFjbTRnYjJGbGNDaHJaWGtzSUcxelp5azdYRzRnSUgwZ1pXeHpaU0JwWmlBb2NHRmtaR2x1WnlBOVBUMGdNU2tnZTF4dUlDQWdJSEpsZEhWeWJpQndhMk56TVNoclpYa3NJRzF6Wnl3Z2NtVjJaWEp6WlNrN1hHNGdJSDBnWld4elpTQnBaaUFvY0dGa1pHbHVaeUE5UFQwZ015a2dlMXh1SUNBZ0lISmxkSFZ5YmlCdGMyYzdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZDFibXR1YjNkdUlIQmhaR1JwYm1jbktUdGNiaUFnZlZ4dWZUdGNibHh1Wm5WdVkzUnBiMjRnYjJGbGNDaHJaWGtzSUcxelp5bDdYRzRnSUhaaGNpQnVJRDBnYTJWNUxtMXZaSFZzZFhNN1hHNGdJSFpoY2lCcklEMGdhMlY1TG0xdlpIVnNkWE11WW5sMFpVeGxibWQwYUNncE8xeHVJQ0IyWVhJZ2JVeGxiaUE5SUcxelp5NXNaVzVuZEdnN1hHNGdJSFpoY2lCcFNHRnphQ0E5SUdOeVpXRjBaVWhoYzJnb0ozTm9ZVEVuS1M1MWNHUmhkR1VvYm1WM0lFSjFabVpsY2lnbkp5a3BMbVJwWjJWemRDZ3BPMXh1SUNCMllYSWdhRXhsYmlBOUlHbElZWE5vTG14bGJtZDBhRHRjYmlBZ2RtRnlJR2hNWlc0eUlEMGdNaUFxSUdoTVpXNDdYRzRnSUdsbUlDaHRjMmRiTUYwZ0lUMDlJREFwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMlJsWTNKNWNIUnBiMjRnWlhKeWIzSW5LVHRjYmlBZ2ZWeHVJQ0IyWVhJZ2JXRnphMlZrVTJWbFpDQTlJRzF6Wnk1emJHbGpaU2d4TENCb1RHVnVJQ3NnTVNrN1hHNGdJSFpoY2lCdFlYTnJaV1JFWWlBOUlDQnRjMmN1YzJ4cFkyVW9hRXhsYmlBcklERXBPMXh1SUNCMllYSWdjMlZsWkNBOUlIaHZjaWh0WVhOclpXUlRaV1ZrTENCdFoyWW9iV0Z6YTJWa1JHSXNJR2hNWlc0cEtUdGNiaUFnZG1GeUlHUmlJRDBnZUc5eUtHMWhjMnRsWkVSaUxDQnRaMllvYzJWbFpDd2dheUF0SUdoTVpXNGdMU0F4S1NrN1hHNGdJR2xtSUNoamIyMXdZWEpsS0dsSVlYTm9MQ0JrWWk1emJHbGpaU2d3TENCb1RHVnVLU2twSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMlJsWTNKNWNIUnBiMjRnWlhKeWIzSW5LVHRjYmlBZ2ZWeHVJQ0IyWVhJZ2FTQTlJR2hNWlc0N1hHNGdJSGRvYVd4bElDaGtZbHRwWFNBOVBUMGdNQ2tnZTF4dUlDQWdJR2tyS3p0Y2JpQWdmVnh1SUNCcFppQW9aR0piYVNzclhTQWhQVDBnTVNrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduWkdWamNubHdkR2x2YmlCbGNuSnZjaWNwTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJrWWk1emJHbGpaU2hwS1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnY0d0amN6RW9hMlY1TENCdGMyY3NJSEpsZG1WeWMyVXBlMXh1SUNCMllYSWdjREVnUFNCdGMyY3VjMnhwWTJVb01Dd2dNaWs3WEc0Z0lIWmhjaUJwSUQwZ01qdGNiaUFnZG1GeUlITjBZWFIxY3lBOUlEQTdYRzRnSUhkb2FXeGxJQ2h0YzJkYmFTc3JYU0FoUFQwZ01Da2dlMXh1SUNBZ0lHbG1JQ2hwSUQ0OUlHMXpaeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJSE4wWVhSMWN5c3JPMXh1SUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhaaGNpQndjeUE5SUcxelp5NXpiR2xqWlNneUxDQnBJQzBnTVNrN1hHNGdJSFpoY2lCd01pQTlJRzF6Wnk1emJHbGpaU2hwSUMwZ01Td2dhU2s3WEc1Y2JpQWdhV1lnS0Nod01TNTBiMU4wY21sdVp5Z25hR1Y0SnlrZ0lUMDlJQ2N3TURBeUp5QW1KaUFoY21WMlpYSnpaU2tnZkh3Z0tIQXhMblJ2VTNSeWFXNW5LQ2RvWlhnbktTQWhQVDBnSnpBd01ERW5JQ1ltSUhKbGRtVnljMlVwS1h0Y2JpQWdJQ0J6ZEdGMGRYTXJLenRjYmlBZ2ZWeHVJQ0JwWmlBb2NITXViR1Z1WjNSb0lEd2dPQ2tnZTF4dUlDQWdJSE4wWVhSMWN5c3JPMXh1SUNCOVhHNGdJR2xtSUNoemRHRjBkWE1wSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMlJsWTNKNWNIUnBiMjRnWlhKeWIzSW5LVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdJRzF6Wnk1emJHbGpaU2hwS1R0Y2JuMWNibVoxYm1OMGFXOXVJR052YlhCaGNtVW9ZU3dnWWlsN1hHNGdJR0VnUFNCdVpYY2dRblZtWm1WeUtHRXBPMXh1SUNCaUlEMGdibVYzSUVKMVptWmxjaWhpS1R0Y2JpQWdkbUZ5SUdScFppQTlJREE3WEc0Z0lIWmhjaUJzWlc0Z1BTQmhMbXhsYm1kMGFEdGNiaUFnYVdZZ0tHRXViR1Z1WjNSb0lDRTlQU0JpTG14bGJtZDBhQ2tnZTF4dUlDQWdJR1JwWmlzck8xeHVJQ0FnSUd4bGJpQTlJRTFoZEdndWJXbHVLR0V1YkdWdVozUm9MQ0JpTG14bGJtZDBhQ2s3WEc0Z0lIMWNiaUFnZG1GeUlHa2dQU0F0TVR0Y2JpQWdkMmhwYkdVZ0tDc3JhU0E4SUd4bGJpa2dlMXh1SUNBZ0lHUnBaaUFyUFNBb1lWdHBYU0JlSUdKYmFWMHBPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQmthV1k3WEc1OUlsMTkiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhvcihhLCBiKSB7XG4gIHZhciBsZW4gPSBhLmxlbmd0aDtcbiAgdmFyIGkgPSAtMTtcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIGFbaV0gXj0gYltpXTtcbiAgfVxuICByZXR1cm4gYVxufTsiLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG52YXIgYm4gPSByZXF1aXJlKCdibi5qcycpO1xuZnVuY3Rpb24gd2l0aFB1YmxpYyhwYWRkZWRNc2csIGtleSkge1xuICByZXR1cm4gbmV3IEJ1ZmZlcihwYWRkZWRNc2dcbiAgICAudG9SZWQoYm4ubW9udChrZXkubW9kdWx1cykpXG4gICAgLnJlZFBvdyhuZXcgYm4oa2V5LnB1YmxpY0V4cG9uZW50KSlcbiAgICAuZnJvbVJlZCgpXG4gICAgLnRvQXJyYXkoKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2l0aFB1YmxpYztcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12Y0hWaWJHbGpMV1Z1WTNKNWNIUXZkMmwwYUZCMVlteHBZeTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW5aaGNpQmliaUE5SUhKbGNYVnBjbVVvSjJKdUxtcHpKeWs3WEc1bWRXNWpkR2x2YmlCM2FYUm9VSFZpYkdsaktIQmhaR1JsWkUxelp5d2dhMlY1S1NCN1hHNGdJSEpsZEhWeWJpQnVaWGNnUW5WbVptVnlLSEJoWkdSbFpFMXpaMXh1SUNBZ0lDNTBiMUpsWkNoaWJpNXRiMjUwS0d0bGVTNXRiMlIxYkhWektTbGNiaUFnSUNBdWNtVmtVRzkzS0c1bGR5QmliaWhyWlhrdWNIVmliR2xqUlhod2IyNWxiblFwS1Z4dUlDQWdJQzVtY205dFVtVmtLQ2xjYmlBZ0lDQXVkRzlCY25KaGVTZ3BLVHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjNhWFJvVUhWaWJHbGpPeUpkZlE9PSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBhc24xID0gcmVxdWlyZSgnLi9hc24xJylcbnZhciBhZXNpZCA9IHJlcXVpcmUoJy4vYWVzaWQuanNvbicpXG52YXIgZml4UHJvYyA9IHJlcXVpcmUoJy4vZml4UHJvYycpXG52YXIgY2lwaGVycyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzJylcbnZhciBjb21wYXQgPSByZXF1aXJlKCdwYmtkZjInKVxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZUtleXNcblxuZnVuY3Rpb24gcGFyc2VLZXlzIChidWZmZXIpIHtcbiAgdmFyIHBhc3N3b3JkXG4gIGlmICh0eXBlb2YgYnVmZmVyID09PSAnb2JqZWN0JyAmJiAhQnVmZmVyLmlzQnVmZmVyKGJ1ZmZlcikpIHtcbiAgICBwYXNzd29yZCA9IGJ1ZmZlci5wYXNzcGhyYXNlXG4gICAgYnVmZmVyID0gYnVmZmVyLmtleVxuICB9XG4gIGlmICh0eXBlb2YgYnVmZmVyID09PSAnc3RyaW5nJykge1xuICAgIGJ1ZmZlciA9IG5ldyBCdWZmZXIoYnVmZmVyKVxuICB9XG5cbiAgdmFyIHN0cmlwcGVkID0gZml4UHJvYyhidWZmZXIsIHBhc3N3b3JkKVxuXG4gIHZhciB0eXBlID0gc3RyaXBwZWQudGFnXG4gIHZhciBkYXRhID0gc3RyaXBwZWQuZGF0YVxuICB2YXIgc3VidHlwZSwgbmRhdGFcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnUFVCTElDIEtFWSc6XG4gICAgICBuZGF0YSA9IGFzbjEuUHVibGljS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICAgIHN1YnR5cGUgPSBuZGF0YS5hbGdvcml0aG0uYWxnb3JpdGhtLmpvaW4oJy4nKVxuICAgICAgc3dpdGNoIChzdWJ0eXBlKSB7XG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTEzNTQ5LjEuMS4xJzpcbiAgICAgICAgICByZXR1cm4gYXNuMS5SU0FQdWJsaWNLZXkuZGVjb2RlKG5kYXRhLnN1YmplY3RQdWJsaWNLZXkuZGF0YSwgJ2RlcicpXG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTAwNDUuMi4xJzpcbiAgICAgICAgICBuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleSA9IG5kYXRhLnN1YmplY3RQdWJsaWNLZXlcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ2VjJyxcbiAgICAgICAgICAgIGRhdGE6IG5kYXRhXG4gICAgICAgICAgfVxuICAgICAgICBjYXNlICcxLjIuODQwLjEwMDQwLjQuMSc6XG4gICAgICAgICAgbmRhdGEuYWxnb3JpdGhtLnBhcmFtcy5wdWJfa2V5ID0gYXNuMS5EU0FwYXJhbS5kZWNvZGUobmRhdGEuc3ViamVjdFB1YmxpY0tleS5kYXRhLCAnZGVyJylcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ2RzYScsXG4gICAgICAgICAgICBkYXRhOiBuZGF0YS5hbGdvcml0aG0ucGFyYW1zXG4gICAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IGlkICcgKyBzdWJ0eXBlKVxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSB0eXBlICcgKyB0eXBlKVxuICAgIGNhc2UgJ0VOQ1JZUFRFRCBQUklWQVRFIEtFWSc6XG4gICAgICBkYXRhID0gYXNuMS5FbmNyeXB0ZWRQcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICAgIGRhdGEgPSBkZWNyeXB0KGRhdGEsIHBhc3N3b3JkKVxuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgIGNhc2UgJ1BSSVZBVEUgS0VZJzpcbiAgICAgIG5kYXRhID0gYXNuMS5Qcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICAgIHN1YnR5cGUgPSBuZGF0YS5hbGdvcml0aG0uYWxnb3JpdGhtLmpvaW4oJy4nKVxuICAgICAgc3dpdGNoIChzdWJ0eXBlKSB7XG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTEzNTQ5LjEuMS4xJzpcbiAgICAgICAgICByZXR1cm4gYXNuMS5SU0FQcml2YXRlS2V5LmRlY29kZShuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleSwgJ2RlcicpXG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTAwNDUuMi4xJzpcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY3VydmU6IG5kYXRhLmFsZ29yaXRobS5jdXJ2ZSxcbiAgICAgICAgICAgIHByaXZhdGVLZXk6IGFzbjEuRUNQcml2YXRlS2V5LmRlY29kZShuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleSwgJ2RlcicpLnByaXZhdGVLZXlcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTAwNDAuNC4xJzpcbiAgICAgICAgICBuZGF0YS5hbGdvcml0aG0ucGFyYW1zLnByaXZfa2V5ID0gYXNuMS5EU0FwYXJhbS5kZWNvZGUobmRhdGEuc3ViamVjdFByaXZhdGVLZXksICdkZXInKVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnZHNhJyxcbiAgICAgICAgICAgIHBhcmFtczogbmRhdGEuYWxnb3JpdGhtLnBhcmFtc1xuICAgICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSBpZCAnICsgc3VidHlwZSlcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgdHlwZSAnICsgdHlwZSlcbiAgICBjYXNlICdSU0EgUFVCTElDIEtFWSc6XG4gICAgICByZXR1cm4gYXNuMS5SU0FQdWJsaWNLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgIGNhc2UgJ1JTQSBQUklWQVRFIEtFWSc6XG4gICAgICByZXR1cm4gYXNuMS5SU0FQcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICBjYXNlICdEU0EgUFJJVkFURSBLRVknOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ2RzYScsXG4gICAgICAgIHBhcmFtczogYXNuMS5EU0FQcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICAgIH1cbiAgICBjYXNlICdFQyBQUklWQVRFIEtFWSc6XG4gICAgICBkYXRhID0gYXNuMS5FQ1ByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY3VydmU6IGRhdGEucGFyYW1ldGVycy52YWx1ZSxcbiAgICAgICAgcHJpdmF0ZUtleTogZGF0YS5wcml2YXRlS2V5XG4gICAgICB9XG4gICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSB0eXBlICcgKyB0eXBlKVxuICB9XG59XG5wYXJzZUtleXMuc2lnbmF0dXJlID0gYXNuMS5zaWduYXR1cmVcbmZ1bmN0aW9uIGRlY3J5cHQgKGRhdGEsIHBhc3N3b3JkKSB7XG4gIHZhciBzYWx0ID0gZGF0YS5hbGdvcml0aG0uZGVjcnlwdC5rZGUua2RlcGFyYW1zLnNhbHRcbiAgdmFyIGl0ZXJzID0gcGFyc2VJbnQoZGF0YS5hbGdvcml0aG0uZGVjcnlwdC5rZGUua2RlcGFyYW1zLml0ZXJzLnRvU3RyaW5nKCksIDEwKVxuICB2YXIgYWxnbyA9IGFlc2lkW2RhdGEuYWxnb3JpdGhtLmRlY3J5cHQuY2lwaGVyLmFsZ28uam9pbignLicpXVxuICB2YXIgaXYgPSBkYXRhLmFsZ29yaXRobS5kZWNyeXB0LmNpcGhlci5pdlxuICB2YXIgY2lwaGVyVGV4dCA9IGRhdGEuc3ViamVjdFByaXZhdGVLZXlcbiAgdmFyIGtleWxlbiA9IHBhcnNlSW50KGFsZ28uc3BsaXQoJy0nKVsxXSwgMTApIC8gOFxuICB2YXIga2V5ID0gY29tcGF0LnBia2RmMlN5bmMocGFzc3dvcmQsIHNhbHQsIGl0ZXJzLCBrZXlsZW4pXG4gIHZhciBjaXBoZXIgPSBjaXBoZXJzLmNyZWF0ZURlY2lwaGVyaXYoYWxnbywga2V5LCBpdilcbiAgdmFyIG91dCA9IFtdXG4gIG91dC5wdXNoKGNpcGhlci51cGRhdGUoY2lwaGVyVGV4dCkpXG4gIG91dC5wdXNoKGNpcGhlci5maW5hbCgpKVxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChvdXQpXG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12Y0hWaWJHbGpMV1Z1WTNKNWNIUXZibTlrWlY5dGIyUjFiR1Z6TDNCaGNuTmxMV0Z6YmpFdmFXNWtaWGd1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWRtRnlJR0Z6YmpFZ1BTQnlaWEYxYVhKbEtDY3VMMkZ6YmpFbktWeHVkbUZ5SUdGbGMybGtJRDBnY21WeGRXbHlaU2duTGk5aFpYTnBaQzVxYzI5dUp5bGNiblpoY2lCbWFYaFFjbTlqSUQwZ2NtVnhkV2x5WlNnbkxpOW1hWGhRY205akp5bGNiblpoY2lCamFYQm9aWEp6SUQwZ2NtVnhkV2x5WlNnblluSnZkM05sY21sbWVTMWhaWE1uS1Z4dWRtRnlJR052YlhCaGRDQTlJSEpsY1hWcGNtVW9KM0JpYTJSbU1pY3BYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSEJoY25ObFMyVjVjMXh1WEc1bWRXNWpkR2x2YmlCd1lYSnpaVXRsZVhNZ0tHSjFabVpsY2lrZ2UxeHVJQ0IyWVhJZ2NHRnpjM2R2Y21SY2JpQWdhV1lnS0hSNWNHVnZaaUJpZFdabVpYSWdQVDA5SUNkdlltcGxZM1FuSUNZbUlDRkNkV1ptWlhJdWFYTkNkV1ptWlhJb1luVm1abVZ5S1NrZ2UxeHVJQ0FnSUhCaGMzTjNiM0prSUQwZ1luVm1abVZ5TG5CaGMzTndhSEpoYzJWY2JpQWdJQ0JpZFdabVpYSWdQU0JpZFdabVpYSXVhMlY1WEc0Z0lIMWNiaUFnYVdZZ0tIUjVjR1Z2WmlCaWRXWm1aWElnUFQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ1luVm1abVZ5SUQwZ2JtVjNJRUoxWm1abGNpaGlkV1ptWlhJcFhHNGdJSDFjYmx4dUlDQjJZWElnYzNSeWFYQndaV1FnUFNCbWFYaFFjbTlqS0dKMVptWmxjaXdnY0dGemMzZHZjbVFwWEc1Y2JpQWdkbUZ5SUhSNWNHVWdQU0J6ZEhKcGNIQmxaQzUwWVdkY2JpQWdkbUZ5SUdSaGRHRWdQU0J6ZEhKcGNIQmxaQzVrWVhSaFhHNGdJSFpoY2lCemRXSjBlWEJsTENCdVpHRjBZVnh1SUNCemQybDBZMmdnS0hSNWNHVXBJSHRjYmlBZ0lDQmpZWE5sSUNkUVZVSk1TVU1nUzBWWkp6cGNiaUFnSUNBZ0lHNWtZWFJoSUQwZ1lYTnVNUzVRZFdKc2FXTkxaWGt1WkdWamIyUmxLR1JoZEdFc0lDZGtaWEluS1Z4dUlDQWdJQ0FnYzNWaWRIbHdaU0E5SUc1a1lYUmhMbUZzWjI5eWFYUm9iUzVoYkdkdmNtbDBhRzB1YW05cGJpZ25MaWNwWEc0Z0lDQWdJQ0J6ZDJsMFkyZ2dLSE4xWW5SNWNHVXBJSHRjYmlBZ0lDQWdJQ0FnWTJGelpTQW5NUzR5TGpnME1DNHhNVE0xTkRrdU1TNHhMakVuT2x4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCaGMyNHhMbEpUUVZCMVlteHBZMHRsZVM1a1pXTnZaR1VvYm1SaGRHRXVjM1ZpYW1WamRGQjFZbXhwWTB0bGVTNWtZWFJoTENBblpHVnlKeWxjYmlBZ0lDQWdJQ0FnWTJGelpTQW5NUzR5TGpnME1DNHhNREEwTlM0eUxqRW5PbHh1SUNBZ0lDQWdJQ0FnSUc1a1lYUmhMbk4xWW1wbFkzUlFjbWwyWVhSbFMyVjVJRDBnYm1SaGRHRXVjM1ZpYW1WamRGQjFZbXhwWTB0bGVWeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFuWldNbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlUb2dibVJoZEdGY2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR05oYzJVZ0p6RXVNaTQ0TkRBdU1UQXdOREF1TkM0eEp6cGNiaUFnSUNBZ0lDQWdJQ0J1WkdGMFlTNWhiR2R2Y21sMGFHMHVjR0Z5WVcxekxuQjFZbDlyWlhrZ1BTQmhjMjR4TGtSVFFYQmhjbUZ0TG1SbFkyOWtaU2h1WkdGMFlTNXpkV0pxWldOMFVIVmliR2xqUzJWNUxtUmhkR0VzSUNka1pYSW5LVnh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBblpITmhKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0U2SUc1a1lYUmhMbUZzWjI5eWFYUm9iUzV3WVhKaGJYTmNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdSbFptRjFiSFE2SUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduZFc1cmJtOTNiaUJyWlhrZ2FXUWdKeUFySUhOMVluUjVjR1VwWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KM1Z1YTI1dmQyNGdhMlY1SUhSNWNHVWdKeUFySUhSNWNHVXBYRzRnSUNBZ1kyRnpaU0FuUlU1RFVsbFFWRVZFSUZCU1NWWkJWRVVnUzBWWkp6cGNiaUFnSUNBZ0lHUmhkR0VnUFNCaGMyNHhMa1Z1WTNKNWNIUmxaRkJ5YVhaaGRHVkxaWGt1WkdWamIyUmxLR1JoZEdFc0lDZGtaWEluS1Z4dUlDQWdJQ0FnWkdGMFlTQTlJR1JsWTNKNWNIUW9aR0YwWVN3Z2NHRnpjM2R2Y21RcFhHNGdJQ0FnSUNBdkx5Qm1ZV3hzY3lCMGFISnZkV2RvWEc0Z0lDQWdZMkZ6WlNBblVGSkpWa0ZVUlNCTFJWa25PbHh1SUNBZ0lDQWdibVJoZEdFZ1BTQmhjMjR4TGxCeWFYWmhkR1ZMWlhrdVpHVmpiMlJsS0dSaGRHRXNJQ2RrWlhJbktWeHVJQ0FnSUNBZ2MzVmlkSGx3WlNBOUlHNWtZWFJoTG1Gc1oyOXlhWFJvYlM1aGJHZHZjbWwwYUcwdWFtOXBiaWduTGljcFhHNGdJQ0FnSUNCemQybDBZMmdnS0hOMVluUjVjR1VwSUh0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0FuTVM0eUxqZzBNQzR4TVRNMU5Ea3VNUzR4TGpFbk9seHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmhjMjR4TGxKVFFWQnlhWFpoZEdWTFpYa3VaR1ZqYjJSbEtHNWtZWFJoTG5OMVltcGxZM1JRY21sMllYUmxTMlY1TENBblpHVnlKeWxjYmlBZ0lDQWdJQ0FnWTJGelpTQW5NUzR5TGpnME1DNHhNREEwTlM0eUxqRW5PbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpkWEoyWlRvZ2JtUmhkR0V1WVd4bmIzSnBkR2h0TG1OMWNuWmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NISnBkbUYwWlV0bGVUb2dZWE51TVM1RlExQnlhWFpoZEdWTFpYa3VaR1ZqYjJSbEtHNWtZWFJoTG5OMVltcGxZM1JRY21sMllYUmxTMlY1TENBblpHVnlKeWt1Y0hKcGRtRjBaVXRsZVZ4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdZMkZ6WlNBbk1TNHlMamcwTUM0eE1EQTBNQzQwTGpFbk9seHVJQ0FnSUNBZ0lDQWdJRzVrWVhSaExtRnNaMjl5YVhSb2JTNXdZWEpoYlhNdWNISnBkbDlyWlhrZ1BTQmhjMjR4TGtSVFFYQmhjbUZ0TG1SbFkyOWtaU2h1WkdGMFlTNXpkV0pxWldOMFVISnBkbUYwWlV0bGVTd2dKMlJsY2ljcFhHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ2RrYzJFbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGeVlXMXpPaUJ1WkdGMFlTNWhiR2R2Y21sMGFHMHVjR0Z5WVcxelhHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JrWldaaGRXeDBPaUIwYUhKdmR5QnVaWGNnUlhKeWIzSW9KM1Z1YTI1dmQyNGdhMlY1SUdsa0lDY2dLeUJ6ZFdKMGVYQmxLVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZDFibXR1YjNkdUlHdGxlU0IwZVhCbElDY2dLeUIwZVhCbEtWeHVJQ0FnSUdOaGMyVWdKMUpUUVNCUVZVSk1TVU1nUzBWWkp6cGNiaUFnSUNBZ0lISmxkSFZ5YmlCaGMyNHhMbEpUUVZCMVlteHBZMHRsZVM1a1pXTnZaR1VvWkdGMFlTd2dKMlJsY2ljcFhHNGdJQ0FnWTJGelpTQW5VbE5CSUZCU1NWWkJWRVVnUzBWWkp6cGNiaUFnSUNBZ0lISmxkSFZ5YmlCaGMyNHhMbEpUUVZCeWFYWmhkR1ZMWlhrdVpHVmpiMlJsS0dSaGRHRXNJQ2RrWlhJbktWeHVJQ0FnSUdOaGMyVWdKMFJUUVNCUVVrbFdRVlJGSUV0RldTYzZYRzRnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQjBlWEJsT2lBblpITmhKeXhjYmlBZ0lDQWdJQ0FnY0dGeVlXMXpPaUJoYzI0eExrUlRRVkJ5YVhaaGRHVkxaWGt1WkdWamIyUmxLR1JoZEdFc0lDZGtaWEluS1Z4dUlDQWdJQ0FnZlZ4dUlDQWdJR05oYzJVZ0owVkRJRkJTU1ZaQlZFVWdTMFZaSnpwY2JpQWdJQ0FnSUdSaGRHRWdQU0JoYzI0eExrVkRVSEpwZG1GMFpVdGxlUzVrWldOdlpHVW9aR0YwWVN3Z0oyUmxjaWNwWEc0Z0lDQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdJQ0JqZFhKMlpUb2daR0YwWVM1d1lYSmhiV1YwWlhKekxuWmhiSFZsTEZ4dUlDQWdJQ0FnSUNCd2NtbDJZWFJsUzJWNU9pQmtZWFJoTG5CeWFYWmhkR1ZMWlhsY2JpQWdJQ0FnSUgxY2JpQWdJQ0JrWldaaGRXeDBPaUIwYUhKdmR5QnVaWGNnUlhKeWIzSW9KM1Z1YTI1dmQyNGdhMlY1SUhSNWNHVWdKeUFySUhSNWNHVXBYRzRnSUgxY2JuMWNibkJoY25ObFMyVjVjeTV6YVdkdVlYUjFjbVVnUFNCaGMyNHhMbk5wWjI1aGRIVnlaVnh1Wm5WdVkzUnBiMjRnWkdWamNubHdkQ0FvWkdGMFlTd2djR0Z6YzNkdmNtUXBJSHRjYmlBZ2RtRnlJSE5oYkhRZ1BTQmtZWFJoTG1Gc1oyOXlhWFJvYlM1a1pXTnllWEIwTG10a1pTNXJaR1Z3WVhKaGJYTXVjMkZzZEZ4dUlDQjJZWElnYVhSbGNuTWdQU0J3WVhKelpVbHVkQ2hrWVhSaExtRnNaMjl5YVhSb2JTNWtaV055ZVhCMExtdGtaUzVyWkdWd1lYSmhiWE11YVhSbGNuTXVkRzlUZEhKcGJtY29LU3dnTVRBcFhHNGdJSFpoY2lCaGJHZHZJRDBnWVdWemFXUmJaR0YwWVM1aGJHZHZjbWwwYUcwdVpHVmpjbmx3ZEM1amFYQm9aWEl1WVd4bmJ5NXFiMmx1S0NjdUp5bGRYRzRnSUhaaGNpQnBkaUE5SUdSaGRHRXVZV3huYjNKcGRHaHRMbVJsWTNKNWNIUXVZMmx3YUdWeUxtbDJYRzRnSUhaaGNpQmphWEJvWlhKVVpYaDBJRDBnWkdGMFlTNXpkV0pxWldOMFVISnBkbUYwWlV0bGVWeHVJQ0IyWVhJZ2EyVjViR1Z1SUQwZ2NHRnljMlZKYm5Rb1lXeG5ieTV6Y0d4cGRDZ25MU2NwV3pGZExDQXhNQ2tnTHlBNFhHNGdJSFpoY2lCclpYa2dQU0JqYjIxd1lYUXVjR0pyWkdZeVUzbHVZeWh3WVhOemQyOXlaQ3dnYzJGc2RDd2dhWFJsY25Nc0lHdGxlV3hsYmlsY2JpQWdkbUZ5SUdOcGNHaGxjaUE5SUdOcGNHaGxjbk11WTNKbFlYUmxSR1ZqYVhCb1pYSnBkaWhoYkdkdkxDQnJaWGtzSUdsMktWeHVJQ0IyWVhJZ2IzVjBJRDBnVzExY2JpQWdiM1YwTG5CMWMyZ29ZMmx3YUdWeUxuVndaR0YwWlNoamFYQm9aWEpVWlhoMEtTbGNiaUFnYjNWMExuQjFjMmdvWTJsd2FHVnlMbVpwYm1Gc0tDa3BYRzRnSUhKbGRIVnliaUJDZFdabVpYSXVZMjl1WTJGMEtHOTFkQ2xjYm4xY2JpSmRmUT09IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xuLy8gYWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9hcGF0aWwvcGVtc3RyaXBcbnZhciBmaW5kUHJvYyA9IC9Qcm9jLVR5cGU6IDQsRU5DUllQVEVEXFxyP1xcbkRFSy1JbmZvOiBBRVMtKCg/OjEyOCl8KD86MTkyKXwoPzoyNTYpKS1DQkMsKFswLTlBLUhdKylcXHI/XFxuXFxyP1xcbihbMC05QS16XFxuXFxyXFwrXFwvXFw9XSspXFxyP1xcbi9tXG52YXIgc3RhcnRSZWdleCA9IC9eLS0tLS1CRUdJTiAoLiopIEtFWS0tLS0tXFxyP1xcbi9tXG52YXIgZnVsbFJlZ2V4ID0gL14tLS0tLUJFR0lOICguKikgS0VZLS0tLS1cXHI/XFxuKFswLTlBLXpcXG5cXHJcXCtcXC9cXD1dKylcXHI/XFxuLS0tLS1FTkQgXFwxIEtFWS0tLS0tJC9tXG52YXIgZXZwID0gcmVxdWlyZSgnZXZwX2J5dGVzdG9rZXknKVxudmFyIGNpcGhlcnMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWFlcycpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChva2V5LCBwYXNzd29yZCkge1xuICB2YXIga2V5ID0gb2tleS50b1N0cmluZygpXG4gIHZhciBtYXRjaCA9IGtleS5tYXRjaChmaW5kUHJvYylcbiAgdmFyIGRlY3J5cHRlZFxuICBpZiAoIW1hdGNoKSB7XG4gICAgdmFyIG1hdGNoMiA9IGtleS5tYXRjaChmdWxsUmVnZXgpXG4gICAgZGVjcnlwdGVkID0gbmV3IEJ1ZmZlcihtYXRjaDJbMl0ucmVwbGFjZSgvXFxyP1xcbi9nLCAnJyksICdiYXNlNjQnKVxuICB9IGVsc2Uge1xuICAgIHZhciBzdWl0ZSA9ICdhZXMnICsgbWF0Y2hbMV1cbiAgICB2YXIgaXYgPSBuZXcgQnVmZmVyKG1hdGNoWzJdLCAnaGV4JylcbiAgICB2YXIgY2lwaGVyVGV4dCA9IG5ldyBCdWZmZXIobWF0Y2hbM10ucmVwbGFjZSgvXFxyP1xcbi9nLCAnJyksICdiYXNlNjQnKVxuICAgIHZhciBjaXBoZXJLZXkgPSBldnAocGFzc3dvcmQsIGl2LnNsaWNlKDAsIDgpLCBwYXJzZUludChtYXRjaFsxXSwgMTApKS5rZXlcbiAgICB2YXIgb3V0ID0gW11cbiAgICB2YXIgY2lwaGVyID0gY2lwaGVycy5jcmVhdGVEZWNpcGhlcml2KHN1aXRlLCBjaXBoZXJLZXksIGl2KVxuICAgIG91dC5wdXNoKGNpcGhlci51cGRhdGUoY2lwaGVyVGV4dCkpXG4gICAgb3V0LnB1c2goY2lwaGVyLmZpbmFsKCkpXG4gICAgZGVjcnlwdGVkID0gQnVmZmVyLmNvbmNhdChvdXQpXG4gIH1cbiAgdmFyIHRhZyA9IGtleS5tYXRjaChzdGFydFJlZ2V4KVsxXSArICcgS0VZJ1xuICByZXR1cm4ge1xuICAgIHRhZzogdGFnLFxuICAgIGRhdGE6IGRlY3J5cHRlZFxuICB9XG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12Y0hWaWJHbGpMV1Z1WTNKNWNIUXZibTlrWlY5dGIyUjFiR1Z6TDNCaGNuTmxMV0Z6YmpFdlptbDRVSEp2WXk1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4dklHRmtZWEIwWldRZ1puSnZiU0JvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2WVhCaGRHbHNMM0JsYlhOMGNtbHdYRzUyWVhJZ1ptbHVaRkJ5YjJNZ1BTQXZVSEp2WXkxVWVYQmxPaUEwTEVWT1ExSlpVRlJGUkZ4Y2NqOWNYRzVFUlVzdFNXNW1iem9nUVVWVExTZ29Qem94TWpncGZDZy9PakU1TWlsOEtEODZNalUyS1NrdFEwSkRMQ2hiTUMwNVFTMUlYU3NwWEZ4eVAxeGNibHhjY2o5Y1hHNG9XekF0T1VFdGVseGNibHhjY2x4Y0sxeGNMMXhjUFYwcktWeGNjajljWEc0dmJWeHVkbUZ5SUhOMFlYSjBVbVZuWlhnZ1BTQXZYaTB0TFMwdFFrVkhTVTRnS0M0cUtTQkxSVmt0TFMwdExWeGNjajljWEc0dmJWeHVkbUZ5SUdaMWJHeFNaV2RsZUNBOUlDOWVMUzB0TFMxQ1JVZEpUaUFvTGlvcElFdEZXUzB0TFMwdFhGeHlQMXhjYmloYk1DMDVRUzE2WEZ4dVhGeHlYRndyWEZ3dlhGdzlYU3NwWEZ4eVAxeGNiaTB0TFMwdFJVNUVJRnhjTVNCTFJWa3RMUzB0TFNRdmJWeHVkbUZ5SUdWMmNDQTlJSEpsY1hWcGNtVW9KMlYyY0Y5aWVYUmxjM1J2YTJWNUp5bGNiblpoY2lCamFYQm9aWEp6SUQwZ2NtVnhkV2x5WlNnblluSnZkM05sY21sbWVTMWhaWE1uS1Z4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlBb2IydGxlU3dnY0dGemMzZHZjbVFwSUh0Y2JpQWdkbUZ5SUd0bGVTQTlJRzlyWlhrdWRHOVRkSEpwYm1jb0tWeHVJQ0IyWVhJZ2JXRjBZMmdnUFNCclpYa3ViV0YwWTJnb1ptbHVaRkJ5YjJNcFhHNGdJSFpoY2lCa1pXTnllWEIwWldSY2JpQWdhV1lnS0NGdFlYUmphQ2tnZTF4dUlDQWdJSFpoY2lCdFlYUmphRElnUFNCclpYa3ViV0YwWTJnb1puVnNiRkpsWjJWNEtWeHVJQ0FnSUdSbFkzSjVjSFJsWkNBOUlHNWxkeUJDZFdabVpYSW9iV0YwWTJneVd6SmRMbkpsY0d4aFkyVW9MMXhjY2o5Y1hHNHZaeXdnSnljcExDQW5ZbUZ6WlRZMEp5bGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQjJZWElnYzNWcGRHVWdQU0FuWVdWekp5QXJJRzFoZEdOb1d6RmRYRzRnSUNBZ2RtRnlJR2wySUQwZ2JtVjNJRUoxWm1abGNpaHRZWFJqYUZzeVhTd2dKMmhsZUNjcFhHNGdJQ0FnZG1GeUlHTnBjR2hsY2xSbGVIUWdQU0J1WlhjZ1FuVm1abVZ5S0cxaGRHTm9Xek5kTG5KbGNHeGhZMlVvTDF4Y2NqOWNYRzR2Wnl3Z0p5Y3BMQ0FuWW1GelpUWTBKeWxjYmlBZ0lDQjJZWElnWTJsd2FHVnlTMlY1SUQwZ1pYWndLSEJoYzNOM2IzSmtMQ0JwZGk1emJHbGpaU2d3TENBNEtTd2djR0Z5YzJWSmJuUW9iV0YwWTJoYk1WMHNJREV3S1NrdWEyVjVYRzRnSUNBZ2RtRnlJRzkxZENBOUlGdGRYRzRnSUNBZ2RtRnlJR05wY0dobGNpQTlJR05wY0dobGNuTXVZM0psWVhSbFJHVmphWEJvWlhKcGRpaHpkV2wwWlN3Z1kybHdhR1Z5UzJWNUxDQnBkaWxjYmlBZ0lDQnZkWFF1Y0hWemFDaGphWEJvWlhJdWRYQmtZWFJsS0dOcGNHaGxjbFJsZUhRcEtWeHVJQ0FnSUc5MWRDNXdkWE5vS0dOcGNHaGxjaTVtYVc1aGJDZ3BLVnh1SUNBZ0lHUmxZM0o1Y0hSbFpDQTlJRUoxWm1abGNpNWpiMjVqWVhRb2IzVjBLVnh1SUNCOVhHNGdJSFpoY2lCMFlXY2dQU0JyWlhrdWJXRjBZMmdvYzNSaGNuUlNaV2RsZUNsYk1WMGdLeUFuSUV0RldTZGNiaUFnY21WMGRYSnVJSHRjYmlBZ0lDQjBZV2M2SUhSaFp5eGNiaUFnSUNCa1lYUmhPaUJrWldOeWVYQjBaV1JjYmlBZ2ZWeHVmVnh1SWwxOSIsImFyZ3VtZW50c1s0XVtcIi9ob21lL3VidW50dS9zdGFnaW5nL2FwcHMvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2Jyb3dzZXIuanNcIl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpIiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xudmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgbW9kZXMgPSByZXF1aXJlKCcuL21vZGVzJylcbnZhciBlYnRrID0gcmVxdWlyZSgnZXZwX2J5dGVzdG9rZXknKVxudmFyIFN0cmVhbUNpcGhlciA9IHJlcXVpcmUoJy4vc3RyZWFtQ2lwaGVyJylcbnZhciBBdXRoQ2lwaGVyID0gcmVxdWlyZSgnLi9hdXRoQ2lwaGVyJylcbmluaGVyaXRzKENpcGhlciwgVHJhbnNmb3JtKVxuZnVuY3Rpb24gQ2lwaGVyIChtb2RlLCBrZXksIGl2KSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBDaXBoZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBDaXBoZXIobW9kZSwga2V5LCBpdilcbiAgfVxuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuICB0aGlzLl9jYWNoZSA9IG5ldyBTcGxpdHRlcigpXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IG5ldyBCdWZmZXIoaXYubGVuZ3RoKVxuICBpdi5jb3B5KHRoaXMuX3ByZXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gdHJ1ZVxufVxuQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG4gIHdoaWxlICgoY2h1bmsgPSB0aGlzLl9jYWNoZS5nZXQoKSkpIHtcbiAgICB0aGluZyA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgICBvdXQucHVzaCh0aGluZylcbiAgfVxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChvdXQpXG59XG5DaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNodW5rID0gdGhpcy5fY2FjaGUuZmx1c2goKVxuICBpZiAodGhpcy5fYXV0b3BhZGRpbmcpIHtcbiAgICBjaHVuayA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgICB0aGlzLl9jaXBoZXIuc2NydWIoKVxuICAgIHJldHVybiBjaHVua1xuICB9IGVsc2UgaWYgKGNodW5rLnRvU3RyaW5nKCdoZXgnKSAhPT0gJzEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwJykge1xuICAgIHRoaXMuX2NpcGhlci5zY3J1YigpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdkYXRhIG5vdCBtdWx0aXBsZSBvZiBibG9jayBsZW5ndGgnKVxuICB9XG59XG5DaXBoZXIucHJvdG90eXBlLnNldEF1dG9QYWRkaW5nID0gZnVuY3Rpb24gKHNldFRvKSB7XG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gISFzZXRUb1xufVxuXG5mdW5jdGlvbiBTcGxpdHRlciAoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTcGxpdHRlcikpIHtcbiAgICByZXR1cm4gbmV3IFNwbGl0dGVyKClcbiAgfVxuICB0aGlzLmNhY2hlID0gbmV3IEJ1ZmZlcignJylcbn1cblNwbGl0dGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgZGF0YV0pXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+IDE1KSB7XG4gICAgdmFyIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgcmV0dXJuIG91dFxuICB9XG4gIHJldHVybiBudWxsXG59XG5TcGxpdHRlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsZW4gPSAxNiAtIHRoaXMuY2FjaGUubGVuZ3RoXG4gIHZhciBwYWRCdWZmID0gbmV3IEJ1ZmZlcihsZW4pXG5cbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgcGFkQnVmZi53cml0ZVVJbnQ4KGxlbiwgaSlcbiAgfVxuICB2YXIgb3V0ID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgcGFkQnVmZl0pXG4gIHJldHVybiBvdXRcbn1cbnZhciBtb2RlbGlzdCA9IHtcbiAgRUNCOiByZXF1aXJlKCcuL21vZGVzL2VjYicpLFxuICBDQkM6IHJlcXVpcmUoJy4vbW9kZXMvY2JjJyksXG4gIENGQjogcmVxdWlyZSgnLi9tb2Rlcy9jZmInKSxcbiAgQ0ZCODogcmVxdWlyZSgnLi9tb2Rlcy9jZmI4JyksXG4gIENGQjE6IHJlcXVpcmUoJy4vbW9kZXMvY2ZiMScpLFxuICBPRkI6IHJlcXVpcmUoJy4vbW9kZXMvb2ZiJyksXG4gIENUUjogcmVxdWlyZSgnLi9tb2Rlcy9jdHInKSxcbiAgR0NNOiByZXF1aXJlKCcuL21vZGVzL2N0cicpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlcml2IChzdWl0ZSwgcGFzc3dvcmQsIGl2KSB7XG4gIHZhciBjb25maWcgPSBtb2Rlc1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbiAgaWYgKHR5cGVvZiBpdiA9PT0gJ3N0cmluZycpIHtcbiAgICBpdiA9IG5ldyBCdWZmZXIoaXYpXG4gIH1cbiAgaWYgKHR5cGVvZiBwYXNzd29yZCA9PT0gJ3N0cmluZycpIHtcbiAgICBwYXNzd29yZCA9IG5ldyBCdWZmZXIocGFzc3dvcmQpXG4gIH1cbiAgaWYgKHBhc3N3b3JkLmxlbmd0aCAhPT0gY29uZmlnLmtleSAvIDgpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGtleSBsZW5ndGggJyArIHBhc3N3b3JkLmxlbmd0aClcbiAgfVxuICBpZiAoaXYubGVuZ3RoICE9PSBjb25maWcuaXYpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGl2IGxlbmd0aCAnICsgaXYubGVuZ3RoKVxuICB9XG4gIGlmIChjb25maWcudHlwZSA9PT0gJ3N0cmVhbScpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihtb2RlbGlzdFtjb25maWcubW9kZV0sIHBhc3N3b3JkLCBpdilcbiAgfSBlbHNlIGlmIChjb25maWcudHlwZSA9PT0gJ2F1dGgnKSB7XG4gICAgcmV0dXJuIG5ldyBBdXRoQ2lwaGVyKG1vZGVsaXN0W2NvbmZpZy5tb2RlXSwgcGFzc3dvcmQsIGl2KVxuICB9XG4gIHJldHVybiBuZXcgQ2lwaGVyKG1vZGVsaXN0W2NvbmZpZy5tb2RlXSwgcGFzc3dvcmQsIGl2KVxufVxuZnVuY3Rpb24gY3JlYXRlQ2lwaGVyIChzdWl0ZSwgcGFzc3dvcmQpIHtcbiAgdmFyIGNvbmZpZyA9IG1vZGVzW3N1aXRlLnRvTG93ZXJDYXNlKCldXG4gIGlmICghY29uZmlnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcbiAgfVxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBjb25maWcua2V5LCBjb25maWcuaXYpXG4gIHJldHVybiBjcmVhdGVDaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5cbmV4cG9ydHMuY3JlYXRlQ2lwaGVyaXYgPSBjcmVhdGVDaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVDaXBoZXIgPSBjcmVhdGVDaXBoZXJcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZjSFZpYkdsakxXVnVZM0o1Y0hRdmJtOWtaVjl0YjJSMWJHVnpMM0JoY25ObExXRnpiakV2Ym05a1pWOXRiMlIxYkdWekwySnliM2R6WlhKcFpua3RZV1Z6TDJWdVkzSjVjSFJsY2k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUdGbGN5QTlJSEpsY1hWcGNtVW9KeTR2WVdWekp5bGNiblpoY2lCVWNtRnVjMlp2Y20wZ1BTQnlaWEYxYVhKbEtDZGphWEJvWlhJdFltRnpaU2NwWEc1MllYSWdhVzVvWlhKcGRITWdQU0J5WlhGMWFYSmxLQ2RwYm1obGNtbDBjeWNwWEc1MllYSWdiVzlrWlhNZ1BTQnlaWEYxYVhKbEtDY3VMMjF2WkdWekp5bGNiblpoY2lCbFluUnJJRDBnY21WeGRXbHlaU2duWlhad1gySjVkR1Z6ZEc5clpYa25LVnh1ZG1GeUlGTjBjbVZoYlVOcGNHaGxjaUE5SUhKbGNYVnBjbVVvSnk0dmMzUnlaV0Z0UTJsd2FHVnlKeWxjYm5aaGNpQkJkWFJvUTJsd2FHVnlJRDBnY21WeGRXbHlaU2duTGk5aGRYUm9RMmx3YUdWeUp5bGNibWx1YUdWeWFYUnpLRU5wY0dobGNpd2dWSEpoYm5ObWIzSnRLVnh1Wm5WdVkzUnBiMjRnUTJsd2FHVnlJQ2h0YjJSbExDQnJaWGtzSUdsMktTQjdYRzRnSUdsbUlDZ2hLSFJvYVhNZ2FXNXpkR0Z1WTJWdlppQkRhWEJvWlhJcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QkRhWEJvWlhJb2JXOWtaU3dnYTJWNUxDQnBkaWxjYmlBZ2ZWeHVJQ0JVY21GdWMyWnZjbTB1WTJGc2JDaDBhR2x6S1Z4dUlDQjBhR2x6TGw5allXTm9aU0E5SUc1bGR5QlRjR3hwZEhSbGNpZ3BYRzRnSUhSb2FYTXVYMk5wY0dobGNpQTlJRzVsZHlCaFpYTXVRVVZUS0d0bGVTbGNiaUFnZEdocGN5NWZjSEpsZGlBOUlHNWxkeUJDZFdabVpYSW9hWFl1YkdWdVozUm9LVnh1SUNCcGRpNWpiM0I1S0hSb2FYTXVYM0J5WlhZcFhHNGdJSFJvYVhNdVgyMXZaR1VnUFNCdGIyUmxYRzRnSUhSb2FYTXVYMkYxZEc5d1lXUmthVzVuSUQwZ2RISjFaVnh1ZlZ4dVEybHdhR1Z5TG5CeWIzUnZkSGx3WlM1ZmRYQmtZWFJsSUQwZ1puVnVZM1JwYjI0Z0tHUmhkR0VwSUh0Y2JpQWdkR2hwY3k1ZlkyRmphR1V1WVdSa0tHUmhkR0VwWEc0Z0lIWmhjaUJqYUhWdWExeHVJQ0IyWVhJZ2RHaHBibWRjYmlBZ2RtRnlJRzkxZENBOUlGdGRYRzRnSUhkb2FXeGxJQ2dvWTJoMWJtc2dQU0IwYUdsekxsOWpZV05vWlM1blpYUW9LU2twSUh0Y2JpQWdJQ0IwYUdsdVp5QTlJSFJvYVhNdVgyMXZaR1V1Wlc1amNubHdkQ2gwYUdsekxDQmphSFZ1YXlsY2JpQWdJQ0J2ZFhRdWNIVnphQ2gwYUdsdVp5bGNiaUFnZlZ4dUlDQnlaWFIxY200Z1FuVm1abVZ5TG1OdmJtTmhkQ2h2ZFhRcFhHNTlYRzVEYVhCb1pYSXVjSEp2ZEc5MGVYQmxMbDltYVc1aGJDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdkbUZ5SUdOb2RXNXJJRDBnZEdocGN5NWZZMkZqYUdVdVpteDFjMmdvS1Z4dUlDQnBaaUFvZEdocGN5NWZZWFYwYjNCaFpHUnBibWNwSUh0Y2JpQWdJQ0JqYUhWdWF5QTlJSFJvYVhNdVgyMXZaR1V1Wlc1amNubHdkQ2gwYUdsekxDQmphSFZ1YXlsY2JpQWdJQ0IwYUdsekxsOWphWEJvWlhJdWMyTnlkV0lvS1Z4dUlDQWdJSEpsZEhWeWJpQmphSFZ1YTF4dUlDQjlJR1ZzYzJVZ2FXWWdLR05vZFc1ckxuUnZVM1J5YVc1bktDZG9aWGduS1NBaFBUMGdKekV3TVRBeE1ERXdNVEF4TURFd01UQXhNREV3TVRBeE1ERXdNVEF4TURFd0p5a2dlMXh1SUNBZ0lIUm9hWE11WDJOcGNHaGxjaTV6WTNKMVlpZ3BYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Nka1lYUmhJRzV2ZENCdGRXeDBhWEJzWlNCdlppQmliRzlqYXlCc1pXNW5kR2duS1Z4dUlDQjlYRzU5WEc1RGFYQm9aWEl1Y0hKdmRHOTBlWEJsTG5ObGRFRjFkRzlRWVdSa2FXNW5JRDBnWm5WdVkzUnBiMjRnS0hObGRGUnZLU0I3WEc0Z0lIUm9hWE11WDJGMWRHOXdZV1JrYVc1bklEMGdJU0Z6WlhSVWIxeHVmVnh1WEc1bWRXNWpkR2x2YmlCVGNHeHBkSFJsY2lBb0tTQjdYRzRnSUdsbUlDZ2hLSFJvYVhNZ2FXNXpkR0Z1WTJWdlppQlRjR3hwZEhSbGNpa3BJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRk53YkdsMGRHVnlLQ2xjYmlBZ2ZWeHVJQ0IwYUdsekxtTmhZMmhsSUQwZ2JtVjNJRUoxWm1abGNpZ25KeWxjYm4xY2JsTndiR2wwZEdWeUxuQnliM1J2ZEhsd1pTNWhaR1FnUFNCbWRXNWpkR2x2YmlBb1pHRjBZU2tnZTF4dUlDQjBhR2x6TG1OaFkyaGxJRDBnUW5WbVptVnlMbU52Ym1OaGRDaGJkR2hwY3k1allXTm9aU3dnWkdGMFlWMHBYRzU5WEc1Y2JsTndiR2wwZEdWeUxuQnliM1J2ZEhsd1pTNW5aWFFnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUdsbUlDaDBhR2x6TG1OaFkyaGxMbXhsYm1kMGFDQStJREUxS1NCN1hHNGdJQ0FnZG1GeUlHOTFkQ0E5SUhSb2FYTXVZMkZqYUdVdWMyeHBZMlVvTUN3Z01UWXBYRzRnSUNBZ2RHaHBjeTVqWVdOb1pTQTlJSFJvYVhNdVkyRmphR1V1YzJ4cFkyVW9NVFlwWEc0Z0lDQWdjbVYwZFhKdUlHOTFkRnh1SUNCOVhHNGdJSEpsZEhWeWJpQnVkV3hzWEc1OVhHNVRjR3hwZEhSbGNpNXdjbTkwYjNSNWNHVXVabXgxYzJnZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lIWmhjaUJzWlc0Z1BTQXhOaUF0SUhSb2FYTXVZMkZqYUdVdWJHVnVaM1JvWEc0Z0lIWmhjaUJ3WVdSQ2RXWm1JRDBnYm1WM0lFSjFabVpsY2loc1pXNHBYRzVjYmlBZ2RtRnlJR2tnUFNBdE1WeHVJQ0IzYUdsc1pTQW9LeXRwSUR3Z2JHVnVLU0I3WEc0Z0lDQWdjR0ZrUW5WbVppNTNjbWwwWlZWSmJuUTRLR3hsYml3Z2FTbGNiaUFnZlZ4dUlDQjJZWElnYjNWMElEMGdRblZtWm1WeUxtTnZibU5oZENoYmRHaHBjeTVqWVdOb1pTd2djR0ZrUW5WbVpsMHBYRzRnSUhKbGRIVnliaUJ2ZFhSY2JuMWNiblpoY2lCdGIyUmxiR2x6ZENBOUlIdGNiaUFnUlVOQ09pQnlaWEYxYVhKbEtDY3VMMjF2WkdWekwyVmpZaWNwTEZ4dUlDQkRRa002SUhKbGNYVnBjbVVvSnk0dmJXOWtaWE12WTJKakp5a3NYRzRnSUVOR1Fqb2djbVZ4ZFdseVpTZ25MaTl0YjJSbGN5OWpabUluS1N4Y2JpQWdRMFpDT0RvZ2NtVnhkV2x5WlNnbkxpOXRiMlJsY3k5alptSTRKeWtzWEc0Z0lFTkdRakU2SUhKbGNYVnBjbVVvSnk0dmJXOWtaWE12WTJaaU1TY3BMRnh1SUNCUFJrSTZJSEpsY1hWcGNtVW9KeTR2Ylc5a1pYTXZiMlppSnlrc1hHNGdJRU5VVWpvZ2NtVnhkV2x5WlNnbkxpOXRiMlJsY3k5amRISW5LU3hjYmlBZ1IwTk5PaUJ5WlhGMWFYSmxLQ2N1TDIxdlpHVnpMMk4wY2ljcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdOeVpXRjBaVU5wY0dobGNtbDJJQ2h6ZFdsMFpTd2djR0Z6YzNkdmNtUXNJR2wyS1NCN1hHNGdJSFpoY2lCamIyNW1hV2NnUFNCdGIyUmxjMXR6ZFdsMFpTNTBiMHh2ZDJWeVEyRnpaU2dwWFZ4dUlDQnBaaUFvSVdOdmJtWnBaeWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjJsdWRtRnNhV1FnYzNWcGRHVWdkSGx3WlNjcFhHNGdJSDFjYmlBZ2FXWWdLSFI1Y0dWdlppQnBkaUE5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNCcGRpQTlJRzVsZHlCQ2RXWm1aWElvYVhZcFhHNGdJSDFjYmlBZ2FXWWdLSFI1Y0dWdlppQndZWE56ZDI5eVpDQTlQVDBnSjNOMGNtbHVaeWNwSUh0Y2JpQWdJQ0J3WVhOemQyOXlaQ0E5SUc1bGR5QkNkV1ptWlhJb2NHRnpjM2R2Y21RcFhHNGdJSDFjYmlBZ2FXWWdLSEJoYzNOM2IzSmtMbXhsYm1kMGFDQWhQVDBnWTI5dVptbG5MbXRsZVNBdklEZ3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLQ2RwYm5aaGJHbGtJR3RsZVNCc1pXNW5kR2dnSnlBcklIQmhjM04zYjNKa0xteGxibWQwYUNsY2JpQWdmVnh1SUNCcFppQW9hWFl1YkdWdVozUm9JQ0U5UFNCamIyNW1hV2N1YVhZcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZHBiblpoYkdsa0lHbDJJR3hsYm1kMGFDQW5JQ3NnYVhZdWJHVnVaM1JvS1Z4dUlDQjlYRzRnSUdsbUlDaGpiMjVtYVdjdWRIbHdaU0E5UFQwZ0ozTjBjbVZoYlNjcElIdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGTjBjbVZoYlVOcGNHaGxjaWh0YjJSbGJHbHpkRnRqYjI1bWFXY3ViVzlrWlYwc0lIQmhjM04zYjNKa0xDQnBkaWxjYmlBZ2ZTQmxiSE5sSUdsbUlDaGpiMjVtYVdjdWRIbHdaU0E5UFQwZ0oyRjFkR2duS1NCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCQmRYUm9RMmx3YUdWeUtHMXZaR1ZzYVhOMFcyTnZibVpwWnk1dGIyUmxYU3dnY0dGemMzZHZjbVFzSUdsMktWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCdVpYY2dRMmx3YUdWeUtHMXZaR1ZzYVhOMFcyTnZibVpwWnk1dGIyUmxYU3dnY0dGemMzZHZjbVFzSUdsMktWeHVmVnh1Wm5WdVkzUnBiMjRnWTNKbFlYUmxRMmx3YUdWeUlDaHpkV2wwWlN3Z2NHRnpjM2R2Y21RcElIdGNiaUFnZG1GeUlHTnZibVpwWnlBOUlHMXZaR1Z6VzNOMWFYUmxMblJ2VEc5M1pYSkRZWE5sS0NsZFhHNGdJR2xtSUNnaFkyOXVabWxuS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnbmFXNTJZV3hwWkNCemRXbDBaU0IwZVhCbEp5bGNiaUFnZlZ4dUlDQjJZWElnYTJWNWN5QTlJR1ZpZEdzb2NHRnpjM2R2Y21Rc0lHWmhiSE5sTENCamIyNW1hV2N1YTJWNUxDQmpiMjVtYVdjdWFYWXBYRzRnSUhKbGRIVnliaUJqY21WaGRHVkRhWEJvWlhKcGRpaHpkV2wwWlN3Z2EyVjVjeTVyWlhrc0lHdGxlWE11YVhZcFhHNTlYRzVjYm1WNGNHOXlkSE11WTNKbFlYUmxRMmx3YUdWeWFYWWdQU0JqY21WaGRHVkRhWEJvWlhKcGRseHVaWGh3YjNKMGN5NWpjbVZoZEdWRGFYQm9aWElnUFNCamNtVmhkR1ZEYVhCb1pYSmNiaUpkZlE9PSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIG1vZGVzID0gcmVxdWlyZSgnLi9tb2RlcycpXG52YXIgU3RyZWFtQ2lwaGVyID0gcmVxdWlyZSgnLi9zdHJlYW1DaXBoZXInKVxudmFyIEF1dGhDaXBoZXIgPSByZXF1aXJlKCcuL2F1dGhDaXBoZXInKVxudmFyIGVidGsgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpXG5cbmluaGVyaXRzKERlY2lwaGVyLCBUcmFuc2Zvcm0pXG5mdW5jdGlvbiBEZWNpcGhlciAobW9kZSwga2V5LCBpdikge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRGVjaXBoZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBEZWNpcGhlcihtb2RlLCBrZXksIGl2KVxuICB9XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuX2NhY2hlID0gbmV3IFNwbGl0dGVyKClcbiAgdGhpcy5fbGFzdCA9IHZvaWQgMFxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBuZXcgQnVmZmVyKGl2Lmxlbmd0aClcbiAgaXYuY29weSh0aGlzLl9wcmV2KVxuICB0aGlzLl9tb2RlID0gbW9kZVxuICB0aGlzLl9hdXRvcGFkZGluZyA9IHRydWVcbn1cbkRlY2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG4gIHdoaWxlICgoY2h1bmsgPSB0aGlzLl9jYWNoZS5nZXQodGhpcy5fYXV0b3BhZGRpbmcpKSkge1xuICAgIHRoaW5nID0gdGhpcy5fbW9kZS5kZWNyeXB0KHRoaXMsIGNodW5rKVxuICAgIG91dC5wdXNoKHRoaW5nKVxuICB9XG4gIHJldHVybiBCdWZmZXIuY29uY2F0KG91dClcbn1cbkRlY2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjaHVuayA9IHRoaXMuX2NhY2hlLmZsdXNoKClcbiAgaWYgKHRoaXMuX2F1dG9wYWRkaW5nKSB7XG4gICAgcmV0dXJuIHVucGFkKHRoaXMuX21vZGUuZGVjcnlwdCh0aGlzLCBjaHVuaykpXG4gIH0gZWxzZSBpZiAoY2h1bmspIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgbm90IG11bHRpcGxlIG9mIGJsb2NrIGxlbmd0aCcpXG4gIH1cbn1cbkRlY2lwaGVyLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uIChzZXRUbykge1xuICB0aGlzLl9hdXRvcGFkZGluZyA9ICEhc2V0VG9cbn1cbmZ1bmN0aW9uIFNwbGl0dGVyICgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNwbGl0dGVyKSkge1xuICAgIHJldHVybiBuZXcgU3BsaXR0ZXIoKVxuICB9XG4gIHRoaXMuY2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxufVxuU3BsaXR0ZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuY2FjaGUgPSBCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBkYXRhXSlcbn1cblxuU3BsaXR0ZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChhdXRvUGFkZGluZykge1xuICB2YXIgb3V0XG4gIGlmIChhdXRvUGFkZGluZykge1xuICAgIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+IDE2KSB7XG4gICAgICBvdXQgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgICByZXR1cm4gb3V0XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+PSAxNikge1xuICAgICAgb3V0ID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNilcbiAgICAgIHRoaXMuY2FjaGUgPSB0aGlzLmNhY2hlLnNsaWNlKDE2KVxuICAgICAgcmV0dXJuIG91dFxuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbFxufVxuU3BsaXR0ZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy5jYWNoZVxuICB9XG59XG5mdW5jdGlvbiB1bnBhZCAobGFzdCkge1xuICB2YXIgcGFkZGVkID0gbGFzdFsxNV1cbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgcGFkZGVkKSB7XG4gICAgaWYgKGxhc3RbKGkgKyAoMTYgLSBwYWRkZWQpKV0gIT09IHBhZGRlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gZGVjcnlwdCBkYXRhJylcbiAgICB9XG4gIH1cbiAgaWYgKHBhZGRlZCA9PT0gMTYpIHtcbiAgICByZXR1cm5cbiAgfVxuICByZXR1cm4gbGFzdC5zbGljZSgwLCAxNiAtIHBhZGRlZClcbn1cblxudmFyIG1vZGVsaXN0ID0ge1xuICBFQ0I6IHJlcXVpcmUoJy4vbW9kZXMvZWNiJyksXG4gIENCQzogcmVxdWlyZSgnLi9tb2Rlcy9jYmMnKSxcbiAgQ0ZCOiByZXF1aXJlKCcuL21vZGVzL2NmYicpLFxuICBDRkI4OiByZXF1aXJlKCcuL21vZGVzL2NmYjgnKSxcbiAgQ0ZCMTogcmVxdWlyZSgnLi9tb2Rlcy9jZmIxJyksXG4gIE9GQjogcmVxdWlyZSgnLi9tb2Rlcy9vZmInKSxcbiAgQ1RSOiByZXF1aXJlKCcuL21vZGVzL2N0cicpLFxuICBHQ006IHJlcXVpcmUoJy4vbW9kZXMvY3RyJylcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVjaXBoZXJpdiAoc3VpdGUsIHBhc3N3b3JkLCBpdikge1xuICB2YXIgY29uZmlnID0gbW9kZXNbc3VpdGUudG9Mb3dlckNhc2UoKV1cbiAgaWYgKCFjb25maWcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuICB9XG4gIGlmICh0eXBlb2YgaXYgPT09ICdzdHJpbmcnKSB7XG4gICAgaXYgPSBuZXcgQnVmZmVyKGl2KVxuICB9XG4gIGlmICh0eXBlb2YgcGFzc3dvcmQgPT09ICdzdHJpbmcnKSB7XG4gICAgcGFzc3dvcmQgPSBuZXcgQnVmZmVyKHBhc3N3b3JkKVxuICB9XG4gIGlmIChwYXNzd29yZC5sZW5ndGggIT09IGNvbmZpZy5rZXkgLyA4KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBrZXkgbGVuZ3RoICcgKyBwYXNzd29yZC5sZW5ndGgpXG4gIH1cbiAgaWYgKGl2Lmxlbmd0aCAhPT0gY29uZmlnLml2KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBpdiBsZW5ndGggJyArIGl2Lmxlbmd0aClcbiAgfVxuICBpZiAoY29uZmlnLnR5cGUgPT09ICdzdHJlYW0nKSB7XG4gICAgcmV0dXJuIG5ldyBTdHJlYW1DaXBoZXIobW9kZWxpc3RbY29uZmlnLm1vZGVdLCBwYXNzd29yZCwgaXYsIHRydWUpXG4gIH0gZWxzZSBpZiAoY29uZmlnLnR5cGUgPT09ICdhdXRoJykge1xuICAgIHJldHVybiBuZXcgQXV0aENpcGhlcihtb2RlbGlzdFtjb25maWcubW9kZV0sIHBhc3N3b3JkLCBpdiwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gbmV3IERlY2lwaGVyKG1vZGVsaXN0W2NvbmZpZy5tb2RlXSwgcGFzc3dvcmQsIGl2KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHZhciBjb25maWcgPSBtb2Rlc1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwgY29uZmlnLmtleSwgY29uZmlnLml2KVxuICByZXR1cm4gY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyID0gY3JlYXRlRGVjaXBoZXJcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXJpdiA9IGNyZWF0ZURlY2lwaGVyaXZcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZjSFZpYkdsakxXVnVZM0o1Y0hRdmJtOWtaVjl0YjJSMWJHVnpMM0JoY25ObExXRnpiakV2Ym05a1pWOXRiMlIxYkdWekwySnliM2R6WlhKcFpua3RZV1Z6TDJSbFkzSjVjSFJsY2k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlHRmxjeUE5SUhKbGNYVnBjbVVvSnk0dllXVnpKeWxjYm5aaGNpQlVjbUZ1YzJadmNtMGdQU0J5WlhGMWFYSmxLQ2RqYVhCb1pYSXRZbUZ6WlNjcFhHNTJZWElnYVc1b1pYSnBkSE1nUFNCeVpYRjFhWEpsS0NkcGJtaGxjbWwwY3ljcFhHNTJZWElnYlc5a1pYTWdQU0J5WlhGMWFYSmxLQ2N1TDIxdlpHVnpKeWxjYm5aaGNpQlRkSEpsWVcxRGFYQm9aWElnUFNCeVpYRjFhWEpsS0NjdUwzTjBjbVZoYlVOcGNHaGxjaWNwWEc1MllYSWdRWFYwYUVOcGNHaGxjaUE5SUhKbGNYVnBjbVVvSnk0dllYVjBhRU5wY0dobGNpY3BYRzUyWVhJZ1pXSjBheUE5SUhKbGNYVnBjbVVvSjJWMmNGOWllWFJsYzNSdmEyVjVKeWxjYmx4dWFXNW9aWEpwZEhNb1JHVmphWEJvWlhJc0lGUnlZVzV6Wm05eWJTbGNibVoxYm1OMGFXOXVJRVJsWTJsd2FHVnlJQ2h0YjJSbExDQnJaWGtzSUdsMktTQjdYRzRnSUdsbUlDZ2hLSFJvYVhNZ2FXNXpkR0Z1WTJWdlppQkVaV05wY0dobGNpa3BJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRVJsWTJsd2FHVnlLRzF2WkdVc0lHdGxlU3dnYVhZcFhHNGdJSDFjYmlBZ1ZISmhibk5tYjNKdExtTmhiR3dvZEdocGN5bGNiaUFnZEdocGN5NWZZMkZqYUdVZ1BTQnVaWGNnVTNCc2FYUjBaWElvS1Z4dUlDQjBhR2x6TGw5c1lYTjBJRDBnZG05cFpDQXdYRzRnSUhSb2FYTXVYMk5wY0dobGNpQTlJRzVsZHlCaFpYTXVRVVZUS0d0bGVTbGNiaUFnZEdocGN5NWZjSEpsZGlBOUlHNWxkeUJDZFdabVpYSW9hWFl1YkdWdVozUm9LVnh1SUNCcGRpNWpiM0I1S0hSb2FYTXVYM0J5WlhZcFhHNGdJSFJvYVhNdVgyMXZaR1VnUFNCdGIyUmxYRzRnSUhSb2FYTXVYMkYxZEc5d1lXUmthVzVuSUQwZ2RISjFaVnh1ZlZ4dVJHVmphWEJvWlhJdWNISnZkRzkwZVhCbExsOTFjR1JoZEdVZ1BTQm1kVzVqZEdsdmJpQW9aR0YwWVNrZ2UxeHVJQ0IwYUdsekxsOWpZV05vWlM1aFpHUW9aR0YwWVNsY2JpQWdkbUZ5SUdOb2RXNXJYRzRnSUhaaGNpQjBhR2x1WjF4dUlDQjJZWElnYjNWMElEMGdXMTFjYmlBZ2QyaHBiR1VnS0NoamFIVnVheUE5SUhSb2FYTXVYMk5oWTJobExtZGxkQ2gwYUdsekxsOWhkWFJ2Y0dGa1pHbHVaeWtwS1NCN1hHNGdJQ0FnZEdocGJtY2dQU0IwYUdsekxsOXRiMlJsTG1SbFkzSjVjSFFvZEdocGN5d2dZMmgxYm1zcFhHNGdJQ0FnYjNWMExuQjFjMmdvZEdocGJtY3BYRzRnSUgxY2JpQWdjbVYwZFhKdUlFSjFabVpsY2k1amIyNWpZWFFvYjNWMEtWeHVmVnh1UkdWamFYQm9aWEl1Y0hKdmRHOTBlWEJsTGw5bWFXNWhiQ0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnZG1GeUlHTm9kVzVySUQwZ2RHaHBjeTVmWTJGamFHVXVabXgxYzJnb0tWeHVJQ0JwWmlBb2RHaHBjeTVmWVhWMGIzQmhaR1JwYm1jcElIdGNiaUFnSUNCeVpYUjFjbTRnZFc1d1lXUW9kR2hwY3k1ZmJXOWtaUzVrWldOeWVYQjBLSFJvYVhNc0lHTm9kVzVyS1NsY2JpQWdmU0JsYkhObElHbG1JQ2hqYUhWdWF5a2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblpHRjBZU0J1YjNRZ2JYVnNkR2x3YkdVZ2IyWWdZbXh2WTJzZ2JHVnVaM1JvSnlsY2JpQWdmVnh1ZlZ4dVJHVmphWEJvWlhJdWNISnZkRzkwZVhCbExuTmxkRUYxZEc5UVlXUmthVzVuSUQwZ1puVnVZM1JwYjI0Z0tITmxkRlJ2S1NCN1hHNGdJSFJvYVhNdVgyRjFkRzl3WVdSa2FXNW5JRDBnSVNGelpYUlViMXh1ZlZ4dVpuVnVZM1JwYjI0Z1UzQnNhWFIwWlhJZ0tDa2dlMXh1SUNCcFppQW9JU2gwYUdseklHbHVjM1JoYm1ObGIyWWdVM0JzYVhSMFpYSXBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJUY0d4cGRIUmxjaWdwWEc0Z0lIMWNiaUFnZEdocGN5NWpZV05vWlNBOUlHNWxkeUJDZFdabVpYSW9KeWNwWEc1OVhHNVRjR3hwZEhSbGNpNXdjbTkwYjNSNWNHVXVZV1JrSUQwZ1puVnVZM1JwYjI0Z0tHUmhkR0VwSUh0Y2JpQWdkR2hwY3k1allXTm9aU0E5SUVKMVptWmxjaTVqYjI1allYUW9XM1JvYVhNdVkyRmphR1VzSUdSaGRHRmRLVnh1ZlZ4dVhHNVRjR3hwZEhSbGNpNXdjbTkwYjNSNWNHVXVaMlYwSUQwZ1puVnVZM1JwYjI0Z0tHRjFkRzlRWVdSa2FXNW5LU0I3WEc0Z0lIWmhjaUJ2ZFhSY2JpQWdhV1lnS0dGMWRHOVFZV1JrYVc1bktTQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdVkyRmphR1V1YkdWdVozUm9JRDRnTVRZcElIdGNiaUFnSUNBZ0lHOTFkQ0E5SUhSb2FYTXVZMkZqYUdVdWMyeHBZMlVvTUN3Z01UWXBYRzRnSUNBZ0lDQjBhR2x6TG1OaFkyaGxJRDBnZEdocGN5NWpZV05vWlM1emJHbGpaU2d4TmlsY2JpQWdJQ0FnSUhKbGRIVnliaUJ2ZFhSY2JpQWdJQ0I5WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11WTJGamFHVXViR1Z1WjNSb0lENDlJREUyS1NCN1hHNGdJQ0FnSUNCdmRYUWdQU0IwYUdsekxtTmhZMmhsTG5Oc2FXTmxLREFzSURFMktWeHVJQ0FnSUNBZ2RHaHBjeTVqWVdOb1pTQTlJSFJvYVhNdVkyRmphR1V1YzJ4cFkyVW9NVFlwWEc0Z0lDQWdJQ0J5WlhSMWNtNGdiM1YwWEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnVkV3hzWEc1OVhHNVRjR3hwZEhSbGNpNXdjbTkwYjNSNWNHVXVabXgxYzJnZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lHbG1JQ2gwYUdsekxtTmhZMmhsTG14bGJtZDBhQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG1OaFkyaGxYRzRnSUgxY2JuMWNibVoxYm1OMGFXOXVJSFZ1Y0dGa0lDaHNZWE4wS1NCN1hHNGdJSFpoY2lCd1lXUmtaV1FnUFNCc1lYTjBXekUxWFZ4dUlDQjJZWElnYVNBOUlDMHhYRzRnSUhkb2FXeGxJQ2dySzJrZ1BDQndZV1JrWldRcElIdGNiaUFnSUNCcFppQW9iR0Z6ZEZzb2FTQXJJQ2d4TmlBdElIQmhaR1JsWkNrcFhTQWhQVDBnY0dGa1pHVmtLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KM1Z1WVdKc1pTQjBieUJrWldOeWVYQjBJR1JoZEdFbktWeHVJQ0FnSUgxY2JpQWdmVnh1SUNCcFppQW9jR0ZrWkdWa0lEMDlQU0F4TmlrZ2UxeHVJQ0FnSUhKbGRIVnlibHh1SUNCOVhHNGdJSEpsZEhWeWJpQnNZWE4wTG5Oc2FXTmxLREFzSURFMklDMGdjR0ZrWkdWa0tWeHVmVnh1WEc1MllYSWdiVzlrWld4cGMzUWdQU0I3WEc0Z0lFVkRRam9nY21WeGRXbHlaU2duTGk5dGIyUmxjeTlsWTJJbktTeGNiaUFnUTBKRE9pQnlaWEYxYVhKbEtDY3VMMjF2WkdWekwyTmlZeWNwTEZ4dUlDQkRSa0k2SUhKbGNYVnBjbVVvSnk0dmJXOWtaWE12WTJaaUp5a3NYRzRnSUVOR1FqZzZJSEpsY1hWcGNtVW9KeTR2Ylc5a1pYTXZZMlppT0NjcExGeHVJQ0JEUmtJeE9pQnlaWEYxYVhKbEtDY3VMMjF2WkdWekwyTm1ZakVuS1N4Y2JpQWdUMFpDT2lCeVpYRjFhWEpsS0NjdUwyMXZaR1Z6TDI5bVlpY3BMRnh1SUNCRFZGSTZJSEpsY1hWcGNtVW9KeTR2Ylc5a1pYTXZZM1J5Snlrc1hHNGdJRWREVFRvZ2NtVnhkV2x5WlNnbkxpOXRiMlJsY3k5amRISW5LVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmpjbVZoZEdWRVpXTnBjR2hsY21sMklDaHpkV2wwWlN3Z2NHRnpjM2R2Y21Rc0lHbDJLU0I3WEc0Z0lIWmhjaUJqYjI1bWFXY2dQU0J0YjJSbGMxdHpkV2wwWlM1MGIweHZkMlZ5UTJGelpTZ3BYVnh1SUNCcFppQW9JV052Ym1acFp5a2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9KMmx1ZG1Gc2FXUWdjM1ZwZEdVZ2RIbHdaU2NwWEc0Z0lIMWNiaUFnYVdZZ0tIUjVjR1Z2WmlCcGRpQTlQVDBnSjNOMGNtbHVaeWNwSUh0Y2JpQWdJQ0JwZGlBOUlHNWxkeUJDZFdabVpYSW9hWFlwWEc0Z0lIMWNiaUFnYVdZZ0tIUjVjR1Z2WmlCd1lYTnpkMjl5WkNBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQndZWE56ZDI5eVpDQTlJRzVsZHlCQ2RXWm1aWElvY0dGemMzZHZjbVFwWEc0Z0lIMWNiaUFnYVdZZ0tIQmhjM04zYjNKa0xteGxibWQwYUNBaFBUMGdZMjl1Wm1sbkxtdGxlU0F2SURncElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZHBiblpoYkdsa0lHdGxlU0JzWlc1bmRHZ2dKeUFySUhCaGMzTjNiM0prTG14bGJtZDBhQ2xjYmlBZ2ZWeHVJQ0JwWmlBb2FYWXViR1Z1WjNSb0lDRTlQU0JqYjI1bWFXY3VhWFlwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkcGJuWmhiR2xrSUdsMklHeGxibWQwYUNBbklDc2dhWFl1YkdWdVozUm9LVnh1SUNCOVhHNGdJR2xtSUNoamIyNW1hV2N1ZEhsd1pTQTlQVDBnSjNOMGNtVmhiU2NwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZOMGNtVmhiVU5wY0dobGNpaHRiMlJsYkdsemRGdGpiMjVtYVdjdWJXOWtaVjBzSUhCaGMzTjNiM0prTENCcGRpd2dkSEoxWlNsY2JpQWdmU0JsYkhObElHbG1JQ2hqYjI1bWFXY3VkSGx3WlNBOVBUMGdKMkYxZEdnbktTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QkJkWFJvUTJsd2FHVnlLRzF2WkdWc2FYTjBXMk52Ym1acFp5NXRiMlJsWFN3Z2NHRnpjM2R2Y21Rc0lHbDJMQ0IwY25WbEtWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCdVpYY2dSR1ZqYVhCb1pYSW9iVzlrWld4cGMzUmJZMjl1Wm1sbkxtMXZaR1ZkTENCd1lYTnpkMjl5WkN3Z2FYWXBYRzU5WEc1Y2JtWjFibU4wYVc5dUlHTnlaV0YwWlVSbFkybHdhR1Z5SUNoemRXbDBaU3dnY0dGemMzZHZjbVFwSUh0Y2JpQWdkbUZ5SUdOdmJtWnBaeUE5SUcxdlpHVnpXM04xYVhSbExuUnZURzkzWlhKRFlYTmxLQ2xkWEc0Z0lHbG1JQ2doWTI5dVptbG5LU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWduYVc1MllXeHBaQ0J6ZFdsMFpTQjBlWEJsSnlsY2JpQWdmVnh1SUNCMllYSWdhMlY1Y3lBOUlHVmlkR3NvY0dGemMzZHZjbVFzSUdaaGJITmxMQ0JqYjI1bWFXY3VhMlY1TENCamIyNW1hV2N1YVhZcFhHNGdJSEpsZEhWeWJpQmpjbVZoZEdWRVpXTnBjR2hsY21sMktITjFhWFJsTENCclpYbHpMbXRsZVN3Z2EyVjVjeTVwZGlsY2JuMWNibVY0Y0c5eWRITXVZM0psWVhSbFJHVmphWEJvWlhJZ1BTQmpjbVZoZEdWRVpXTnBjR2hsY2x4dVpYaHdiM0owY3k1amNtVmhkR1ZFWldOcGNHaGxjbWwySUQwZ1kzSmxZWFJsUkdWamFYQm9aWEpwZGx4dUlsMTkiLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG52YXIgbWQ1ID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gvbWQ1Jylcbm1vZHVsZS5leHBvcnRzID0gRVZQX0J5dGVzVG9LZXlcbmZ1bmN0aW9uIEVWUF9CeXRlc1RvS2V5IChwYXNzd29yZCwgc2FsdCwga2V5TGVuLCBpdkxlbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwYXNzd29yZCkpIHtcbiAgICBwYXNzd29yZCA9IG5ldyBCdWZmZXIocGFzc3dvcmQsICdiaW5hcnknKVxuICB9XG4gIGlmIChzYWx0ICYmICFCdWZmZXIuaXNCdWZmZXIoc2FsdCkpIHtcbiAgICBzYWx0ID0gbmV3IEJ1ZmZlcihzYWx0LCAnYmluYXJ5JylcbiAgfVxuICBrZXlMZW4gPSBrZXlMZW4gLyA4XG4gIGl2TGVuID0gaXZMZW4gfHwgMFxuICB2YXIga2kgPSAwXG4gIHZhciBpaSA9IDBcbiAgdmFyIGtleSA9IG5ldyBCdWZmZXIoa2V5TGVuKVxuICB2YXIgaXYgPSBuZXcgQnVmZmVyKGl2TGVuKVxuICB2YXIgYWRkbWQgPSAwXG4gIHZhciBtZF9idWZcbiAgdmFyIGlcbiAgdmFyIGJ1ZnMgPSBbXVxuICB3aGlsZSAodHJ1ZSkge1xuICAgIGlmIChhZGRtZCsrID4gMCkge1xuICAgICAgYnVmcy5wdXNoKG1kX2J1ZilcbiAgICB9XG4gICAgYnVmcy5wdXNoKHBhc3N3b3JkKVxuICAgIGlmIChzYWx0KSB7XG4gICAgICBidWZzLnB1c2goc2FsdClcbiAgICB9XG4gICAgbWRfYnVmID0gbWQ1KEJ1ZmZlci5jb25jYXQoYnVmcykpXG4gICAgYnVmcyA9IFtdXG4gICAgaSA9IDBcbiAgICBpZiAoa2V5TGVuID4gMCkge1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgaWYgKGtleUxlbiA9PT0gMCkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPT09IG1kX2J1Zi5sZW5ndGgpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGtleVtraSsrXSA9IG1kX2J1ZltpXVxuICAgICAgICBrZXlMZW4tLVxuICAgICAgICBpKytcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGl2TGVuID4gMCAmJiBpICE9PSBtZF9idWYubGVuZ3RoKSB7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBpZiAoaXZMZW4gPT09IDApIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGlmIChpID09PSBtZF9idWYubGVuZ3RoKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBpdltpaSsrXSA9IG1kX2J1ZltpXVxuICAgICAgICBpdkxlbi0tXG4gICAgICAgIGkrK1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoa2V5TGVuID09PSAwICYmIGl2TGVuID09PSAwKSB7XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuICBmb3IgKGkgPSAwOyBpIDwgbWRfYnVmLmxlbmd0aDsgaSsrKSB7XG4gICAgbWRfYnVmW2ldID0gMFxuICB9XG4gIHJldHVybiB7XG4gICAga2V5OiBrZXksXG4gICAgaXY6IGl2XG4gIH1cbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZjSFZpYkdsakxXVnVZM0o1Y0hRdmJtOWtaVjl0YjJSMWJHVnpMM0JoY25ObExXRnpiakV2Ym05a1pWOXRiMlIxYkdWekwyVjJjRjlpZVhSbGMzUnZhMlY1TDJsdVpHVjRMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCdFpEVWdQU0J5WlhGMWFYSmxLQ2RqY21WaGRHVXRhR0Z6YUM5dFpEVW5LVnh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JGVmxCZlFubDBaWE5VYjB0bGVWeHVablZ1WTNScGIyNGdSVlpRWDBKNWRHVnpWRzlMWlhrZ0tIQmhjM04zYjNKa0xDQnpZV3gwTENCclpYbE1aVzRzSUdsMlRHVnVLU0I3WEc0Z0lHbG1JQ2doUW5WbVptVnlMbWx6UW5WbVptVnlLSEJoYzNOM2IzSmtLU2tnZTF4dUlDQWdJSEJoYzNOM2IzSmtJRDBnYm1WM0lFSjFabVpsY2lod1lYTnpkMjl5WkN3Z0oySnBibUZ5ZVNjcFhHNGdJSDFjYmlBZ2FXWWdLSE5oYkhRZ0ppWWdJVUoxWm1abGNpNXBjMEoxWm1abGNpaHpZV3gwS1NrZ2UxeHVJQ0FnSUhOaGJIUWdQU0J1WlhjZ1FuVm1abVZ5S0hOaGJIUXNJQ2RpYVc1aGNua25LVnh1SUNCOVhHNGdJR3RsZVV4bGJpQTlJR3RsZVV4bGJpQXZJRGhjYmlBZ2FYWk1aVzRnUFNCcGRreGxiaUI4ZkNBd1hHNGdJSFpoY2lCcmFTQTlJREJjYmlBZ2RtRnlJR2xwSUQwZ01GeHVJQ0IyWVhJZ2EyVjVJRDBnYm1WM0lFSjFabVpsY2loclpYbE1aVzRwWEc0Z0lIWmhjaUJwZGlBOUlHNWxkeUJDZFdabVpYSW9hWFpNWlc0cFhHNGdJSFpoY2lCaFpHUnRaQ0E5SURCY2JpQWdkbUZ5SUcxa1gySjFabHh1SUNCMllYSWdhVnh1SUNCMllYSWdZblZtY3lBOUlGdGRYRzRnSUhkb2FXeGxJQ2gwY25WbEtTQjdYRzRnSUNBZ2FXWWdLR0ZrWkcxa0t5c2dQaUF3S1NCN1hHNGdJQ0FnSUNCaWRXWnpMbkIxYzJnb2JXUmZZblZtS1Z4dUlDQWdJSDFjYmlBZ0lDQmlkV1p6TG5CMWMyZ29jR0Z6YzNkdmNtUXBYRzRnSUNBZ2FXWWdLSE5oYkhRcElIdGNiaUFnSUNBZ0lHSjFabk11Y0hWemFDaHpZV3gwS1Z4dUlDQWdJSDFjYmlBZ0lDQnRaRjlpZFdZZ1BTQnRaRFVvUW5WbVptVnlMbU52Ym1OaGRDaGlkV1p6S1NsY2JpQWdJQ0JpZFdaeklEMGdXMTFjYmlBZ0lDQnBJRDBnTUZ4dUlDQWdJR2xtSUNoclpYbE1aVzRnUGlBd0tTQjdYRzRnSUNBZ0lDQjNhR2xzWlNBb2RISjFaU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9hMlY1VEdWdUlEMDlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdZbkpsWVd0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvYVNBOVBUMGdiV1JmWW5WbUxteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhMlY1VzJ0cEt5dGRJRDBnYldSZlluVm1XMmxkWEc0Z0lDQWdJQ0FnSUd0bGVVeGxiaTB0WEc0Z0lDQWdJQ0FnSUdrcksxeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2FYWk1aVzRnUGlBd0lDWW1JR2tnSVQwOUlHMWtYMkoxWmk1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUhkb2FXeGxJQ2gwY25WbEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNocGRreGxiaUE5UFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tHa2dQVDA5SUcxa1gySjFaaTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsMlcybHBLeXRkSUQwZ2JXUmZZblZtVzJsZFhHNGdJQ0FnSUNBZ0lHbDJUR1Z1TFMxY2JpQWdJQ0FnSUNBZ2FTc3JYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHJaWGxNWlc0Z1BUMDlJREFnSmlZZ2FYWk1aVzRnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJR0p5WldGclhHNGdJQ0FnZlZ4dUlDQjlYRzRnSUdadmNpQW9hU0E5SURBN0lHa2dQQ0J0WkY5aWRXWXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0J0WkY5aWRXWmJhVjBnUFNBd1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0JyWlhrNklHdGxlU3hjYmlBZ0lDQnBkam9nYVhaY2JpQWdmVnh1ZlZ4dUlsMTkiLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG52YXIgYWVzID0gcmVxdWlyZSgnLi9hZXMnKVxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxuaW5oZXJpdHMoU3RyZWFtQ2lwaGVyLCBUcmFuc2Zvcm0pXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmVhbUNpcGhlclxuZnVuY3Rpb24gU3RyZWFtQ2lwaGVyIChtb2RlLCBrZXksIGl2LCBkZWNyeXB0KSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTdHJlYW1DaXBoZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBTdHJlYW1DaXBoZXIobW9kZSwga2V5LCBpdilcbiAgfVxuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBuZXcgQnVmZmVyKGl2Lmxlbmd0aClcbiAgdGhpcy5fY2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxuICB0aGlzLl9zZWNDYWNoZSA9IG5ldyBCdWZmZXIoJycpXG4gIHRoaXMuX2RlY3J5cHQgPSBkZWNyeXB0XG4gIGl2LmNvcHkodGhpcy5fcHJldilcbiAgdGhpcy5fbW9kZSA9IG1vZGVcbn1cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChjaHVuaykge1xuICByZXR1cm4gdGhpcy5fbW9kZS5lbmNyeXB0KHRoaXMsIGNodW5rLCB0aGlzLl9kZWNyeXB0KVxufVxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2NpcGhlci5zY3J1YigpXG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12Y0hWaWJHbGpMV1Z1WTNKNWNIUXZibTlrWlY5dGIyUjFiR1Z6TDNCaGNuTmxMV0Z6YmpFdmJtOWtaVjl0YjJSMWJHVnpMMkp5YjNkelpYSnBabmt0WVdWekwzTjBjbVZoYlVOcGNHaGxjaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlHRmxjeUE5SUhKbGNYVnBjbVVvSnk0dllXVnpKeWxjYm5aaGNpQlVjbUZ1YzJadmNtMGdQU0J5WlhGMWFYSmxLQ2RqYVhCb1pYSXRZbUZ6WlNjcFhHNTJZWElnYVc1b1pYSnBkSE1nUFNCeVpYRjFhWEpsS0NkcGJtaGxjbWwwY3ljcFhHNWNibWx1YUdWeWFYUnpLRk4wY21WaGJVTnBjR2hsY2l3Z1ZISmhibk5tYjNKdEtWeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlRkSEpsWVcxRGFYQm9aWEpjYm1aMWJtTjBhVzl1SUZOMGNtVmhiVU5wY0dobGNpQW9iVzlrWlN3Z2EyVjVMQ0JwZGl3Z1pHVmpjbmx3ZENrZ2UxeHVJQ0JwWmlBb0lTaDBhR2x6SUdsdWMzUmhibU5sYjJZZ1UzUnlaV0Z0UTJsd2FHVnlLU2tnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVTNSeVpXRnRRMmx3YUdWeUtHMXZaR1VzSUd0bGVTd2dhWFlwWEc0Z0lIMWNiaUFnVkhKaGJuTm1iM0p0TG1OaGJHd29kR2hwY3lsY2JpQWdkR2hwY3k1ZlkybHdhR1Z5SUQwZ2JtVjNJR0ZsY3k1QlJWTW9hMlY1S1Z4dUlDQjBhR2x6TGw5d2NtVjJJRDBnYm1WM0lFSjFabVpsY2locGRpNXNaVzVuZEdncFhHNGdJSFJvYVhNdVgyTmhZMmhsSUQwZ2JtVjNJRUoxWm1abGNpZ25KeWxjYmlBZ2RHaHBjeTVmYzJWalEyRmphR1VnUFNCdVpYY2dRblZtWm1WeUtDY25LVnh1SUNCMGFHbHpMbDlrWldOeWVYQjBJRDBnWkdWamNubHdkRnh1SUNCcGRpNWpiM0I1S0hSb2FYTXVYM0J5WlhZcFhHNGdJSFJvYVhNdVgyMXZaR1VnUFNCdGIyUmxYRzU5WEc1VGRISmxZVzFEYVhCb1pYSXVjSEp2ZEc5MGVYQmxMbDkxY0dSaGRHVWdQU0JtZFc1amRHbHZiaUFvWTJoMWJtc3BJSHRjYmlBZ2NtVjBkWEp1SUhSb2FYTXVYMjF2WkdVdVpXNWpjbmx3ZENoMGFHbHpMQ0JqYUhWdWF5d2dkR2hwY3k1ZlpHVmpjbmx3ZENsY2JuMWNibE4wY21WaGJVTnBjR2hsY2k1d2NtOTBiM1I1Y0dVdVgyWnBibUZzSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNCMGFHbHpMbDlqYVhCb1pYSXVjMk55ZFdJb0tWeHVmVnh1SWwxOSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZnVuY3Rpb24gZ2V0QmxvY2sgKHNlbGYpIHtcbiAgc2VsZi5fcHJldiA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgcmV0dXJuIHNlbGYuX3ByZXZcbn1cblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rKSB7XG4gIHdoaWxlIChzZWxmLl9jYWNoZS5sZW5ndGggPCBjaHVuay5sZW5ndGgpIHtcbiAgICBzZWxmLl9jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3NlbGYuX2NhY2hlLCBnZXRCbG9jayhzZWxmKV0pXG4gIH1cblxuICB2YXIgcGFkID0gc2VsZi5fY2FjaGUuc2xpY2UoMCwgY2h1bmsubGVuZ3RoKVxuICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGNodW5rLmxlbmd0aClcbiAgcmV0dXJuIHhvcihjaHVuaywgcGFkKVxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdmNIVmliR2xqTFdWdVkzSjVjSFF2Ym05a1pWOXRiMlIxYkdWekwzQmhjbk5sTFdGemJqRXZibTlrWlY5dGIyUjFiR1Z6TDJKeWIzZHpaWEpwWm5rdFlXVnpMMjF2WkdWekwyOW1ZaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlIaHZjaUE5SUhKbGNYVnBjbVVvSjJKMVptWmxjaTE0YjNJbktWeHVYRzVtZFc1amRHbHZiaUJuWlhSQ2JHOWpheUFvYzJWc1ppa2dlMXh1SUNCelpXeG1MbDl3Y21WMklEMGdjMlZzWmk1ZlkybHdhR1Z5TG1WdVkzSjVjSFJDYkc5amF5aHpaV3htTGw5d2NtVjJLVnh1SUNCeVpYUjFjbTRnYzJWc1ppNWZjSEpsZGx4dWZWeHVYRzVsZUhCdmNuUnpMbVZ1WTNKNWNIUWdQU0JtZFc1amRHbHZiaUFvYzJWc1ppd2dZMmgxYm1zcElIdGNiaUFnZDJocGJHVWdLSE5sYkdZdVgyTmhZMmhsTG14bGJtZDBhQ0E4SUdOb2RXNXJMbXhsYm1kMGFDa2dlMXh1SUNBZ0lITmxiR1l1WDJOaFkyaGxJRDBnUW5WbVptVnlMbU52Ym1OaGRDaGJjMlZzWmk1ZlkyRmphR1VzSUdkbGRFSnNiMk5yS0hObGJHWXBYU2xjYmlBZ2ZWeHVYRzRnSUhaaGNpQndZV1FnUFNCelpXeG1MbDlqWVdOb1pTNXpiR2xqWlNnd0xDQmphSFZ1YXk1c1pXNW5kR2dwWEc0Z0lITmxiR1l1WDJOaFkyaGxJRDBnYzJWc1ppNWZZMkZqYUdVdWMyeHBZMlVvWTJoMWJtc3ViR1Z1WjNSb0tWeHVJQ0J5WlhSMWNtNGdlRzl5S0dOb2RXNXJMQ0J3WVdRcFhHNTlYRzRpWFgwPSIsImFyZ3VtZW50c1s0XVtcIi9ob21lL3VidW50dS9zdGFnaW5nL2FwcHMvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2VjYi5qc1wiXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykiLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG52YXIgeG9yID0gcmVxdWlyZSgnYnVmZmVyLXhvcicpXG5cbmZ1bmN0aW9uIGluY3IzMiAoaXYpIHtcbiAgdmFyIGxlbiA9IGl2Lmxlbmd0aFxuICB2YXIgaXRlbVxuICB3aGlsZSAobGVuLS0pIHtcbiAgICBpdGVtID0gaXYucmVhZFVJbnQ4KGxlbilcbiAgICBpZiAoaXRlbSA9PT0gMjU1KSB7XG4gICAgICBpdi53cml0ZVVJbnQ4KDAsIGxlbilcbiAgICB9IGVsc2Uge1xuICAgICAgaXRlbSsrXG4gICAgICBpdi53cml0ZVVJbnQ4KGl0ZW0sIGxlbilcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldEJsb2NrIChzZWxmKSB7XG4gIHZhciBvdXQgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gIGluY3IzMihzZWxmLl9wcmV2KVxuICByZXR1cm4gb3V0XG59XG5cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaykge1xuICB3aGlsZSAoc2VsZi5fY2FjaGUubGVuZ3RoIDwgY2h1bmsubGVuZ3RoKSB7XG4gICAgc2VsZi5fY2FjaGUgPSBCdWZmZXIuY29uY2F0KFtzZWxmLl9jYWNoZSwgZ2V0QmxvY2soc2VsZildKVxuICB9XG4gIHZhciBwYWQgPSBzZWxmLl9jYWNoZS5zbGljZSgwLCBjaHVuay5sZW5ndGgpXG4gIHNlbGYuX2NhY2hlID0gc2VsZi5fY2FjaGUuc2xpY2UoY2h1bmsubGVuZ3RoKVxuICByZXR1cm4geG9yKGNodW5rLCBwYWQpXG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12Y0hWaWJHbGpMV1Z1WTNKNWNIUXZibTlrWlY5dGIyUjFiR1Z6TDNCaGNuTmxMV0Z6YmpFdmJtOWtaVjl0YjJSMWJHVnpMMkp5YjNkelpYSnBabmt0WVdWekwyMXZaR1Z6TDJOMGNpNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlIaHZjaUE5SUhKbGNYVnBjbVVvSjJKMVptWmxjaTE0YjNJbktWeHVYRzVtZFc1amRHbHZiaUJwYm1OeU16SWdLR2wyS1NCN1hHNGdJSFpoY2lCc1pXNGdQU0JwZGk1c1pXNW5kR2hjYmlBZ2RtRnlJR2wwWlcxY2JpQWdkMmhwYkdVZ0tHeGxiaTB0S1NCN1hHNGdJQ0FnYVhSbGJTQTlJR2wyTG5KbFlXUlZTVzUwT0Noc1pXNHBYRzRnSUNBZ2FXWWdLR2wwWlcwZ1BUMDlJREkxTlNrZ2UxeHVJQ0FnSUNBZ2FYWXVkM0pwZEdWVlNXNTBPQ2d3TENCc1pXNHBYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdsMFpXMHJLMXh1SUNBZ0lDQWdhWFl1ZDNKcGRHVlZTVzUwT0NocGRHVnRMQ0JzWlc0cFhHNGdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lIMWNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJuWlhSQ2JHOWpheUFvYzJWc1ppa2dlMXh1SUNCMllYSWdiM1YwSUQwZ2MyVnNaaTVmWTJsd2FHVnlMbVZ1WTNKNWNIUkNiRzlqYXloelpXeG1MbDl3Y21WMktWeHVJQ0JwYm1OeU16SW9jMlZzWmk1ZmNISmxkaWxjYmlBZ2NtVjBkWEp1SUc5MWRGeHVmVnh1WEc1bGVIQnZjblJ6TG1WdVkzSjVjSFFnUFNCbWRXNWpkR2x2YmlBb2MyVnNaaXdnWTJoMWJtc3BJSHRjYmlBZ2QyaHBiR1VnS0hObGJHWXVYMk5oWTJobExteGxibWQwYUNBOElHTm9kVzVyTG14bGJtZDBhQ2tnZTF4dUlDQWdJSE5sYkdZdVgyTmhZMmhsSUQwZ1FuVm1abVZ5TG1OdmJtTmhkQ2hiYzJWc1ppNWZZMkZqYUdVc0lHZGxkRUpzYjJOcktITmxiR1lwWFNsY2JpQWdmVnh1SUNCMllYSWdjR0ZrSUQwZ2MyVnNaaTVmWTJGamFHVXVjMnhwWTJVb01Dd2dZMmgxYm1zdWJHVnVaM1JvS1Z4dUlDQnpaV3htTGw5allXTm9aU0E5SUhObGJHWXVYMk5oWTJobExuTnNhV05sS0dOb2RXNXJMbXhsYm1kMGFDbGNiaUFnY21WMGRYSnVJSGh2Y2loamFIVnVheXdnY0dGa0tWeHVmVnh1SWwxOSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbmZ1bmN0aW9uIGVuY3J5cHRCeXRlIChzZWxmLCBieXRlUGFyYW0sIGRlY3J5cHQpIHtcbiAgdmFyIHBhZCA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgdmFyIG91dCA9IHBhZFswXSBeIGJ5dGVQYXJhbVxuICBzZWxmLl9wcmV2ID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fcHJldi5zbGljZSgxKSwgbmV3IEJ1ZmZlcihbZGVjcnlwdCA/IGJ5dGVQYXJhbSA6IG91dF0pXSlcbiAgcmV0dXJuIG91dFxufVxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rLCBkZWNyeXB0KSB7XG4gIHZhciBsZW4gPSBjaHVuay5sZW5ndGhcbiAgdmFyIG91dCA9IG5ldyBCdWZmZXIobGVuKVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBlbmNyeXB0Qnl0ZShzZWxmLCBjaHVua1tpXSwgZGVjcnlwdClcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12Y0hWaWJHbGpMV1Z1WTNKNWNIUXZibTlrWlY5dGIyUjFiR1Z6TDNCaGNuTmxMV0Z6YmpFdmJtOWtaVjl0YjJSMWJHVnpMMkp5YjNkelpYSnBabmt0WVdWekwyMXZaR1Z6TDJObVlqZ3Vhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKbWRXNWpkR2x2YmlCbGJtTnllWEIwUW5sMFpTQW9jMlZzWml3Z1lubDBaVkJoY21GdExDQmtaV055ZVhCMEtTQjdYRzRnSUhaaGNpQndZV1FnUFNCelpXeG1MbDlqYVhCb1pYSXVaVzVqY25sd2RFSnNiMk5yS0hObGJHWXVYM0J5WlhZcFhHNGdJSFpoY2lCdmRYUWdQU0J3WVdSYk1GMGdYaUJpZVhSbFVHRnlZVzFjYmlBZ2MyVnNaaTVmY0hKbGRpQTlJRUoxWm1abGNpNWpiMjVqWVhRb1czTmxiR1l1WDNCeVpYWXVjMnhwWTJVb01Ta3NJRzVsZHlCQ2RXWm1aWElvVzJSbFkzSjVjSFFnUHlCaWVYUmxVR0Z5WVcwZ09pQnZkWFJkS1YwcFhHNGdJSEpsZEhWeWJpQnZkWFJjYm4xY2JtVjRjRzl5ZEhNdVpXNWpjbmx3ZENBOUlHWjFibU4wYVc5dUlDaHpaV3htTENCamFIVnVheXdnWkdWamNubHdkQ2tnZTF4dUlDQjJZWElnYkdWdUlEMGdZMmgxYm1zdWJHVnVaM1JvWEc0Z0lIWmhjaUJ2ZFhRZ1BTQnVaWGNnUW5WbVptVnlLR3hsYmlsY2JpQWdkbUZ5SUdrZ1BTQXRNVnh1SUNCM2FHbHNaU0FvS3l0cElEd2diR1Z1S1NCN1hHNGdJQ0FnYjNWMFcybGRJRDBnWlc1amNubHdkRUo1ZEdVb2MyVnNaaXdnWTJoMWJtdGJhVjBzSUdSbFkzSjVjSFFwWEc0Z0lIMWNiaUFnY21WMGRYSnVJRzkxZEZ4dWZWeHVJbDE5IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xuZnVuY3Rpb24gZW5jcnlwdEJ5dGUgKHNlbGYsIGJ5dGVQYXJhbSwgZGVjcnlwdCkge1xuICB2YXIgcGFkXG4gIHZhciBpID0gLTFcbiAgdmFyIGxlbiA9IDhcbiAgdmFyIG91dCA9IDBcbiAgdmFyIGJpdCwgdmFsdWVcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIHBhZCA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgICBiaXQgPSAoYnl0ZVBhcmFtICYgKDEgPDwgKDcgLSBpKSkpID8gMHg4MCA6IDBcbiAgICB2YWx1ZSA9IHBhZFswXSBeIGJpdFxuICAgIG91dCArPSAoKHZhbHVlICYgMHg4MCkgPj4gKGkgJSA4KSlcbiAgICBzZWxmLl9wcmV2ID0gc2hpZnRJbihzZWxmLl9wcmV2LCBkZWNyeXB0ID8gYml0IDogdmFsdWUpXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rLCBkZWNyeXB0KSB7XG4gIHZhciBsZW4gPSBjaHVuay5sZW5ndGhcbiAgdmFyIG91dCA9IG5ldyBCdWZmZXIobGVuKVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBlbmNyeXB0Qnl0ZShzZWxmLCBjaHVua1tpXSwgZGVjcnlwdClcbiAgfVxuICByZXR1cm4gb3V0XG59XG5mdW5jdGlvbiBzaGlmdEluIChidWZmZXIsIHZhbHVlKSB7XG4gIHZhciBsZW4gPSBidWZmZXIubGVuZ3RoXG4gIHZhciBpID0gLTFcbiAgdmFyIG91dCA9IG5ldyBCdWZmZXIoYnVmZmVyLmxlbmd0aClcbiAgYnVmZmVyID0gQnVmZmVyLmNvbmNhdChbYnVmZmVyLCBuZXcgQnVmZmVyKFt2YWx1ZV0pXSlcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIG91dFtpXSA9IGJ1ZmZlcltpXSA8PCAxIHwgYnVmZmVyW2kgKyAxXSA+PiAoNylcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12Y0hWaWJHbGpMV1Z1WTNKNWNIUXZibTlrWlY5dGIyUjFiR1Z6TDNCaGNuTmxMV0Z6YmpFdmJtOWtaVjl0YjJSMWJHVnpMMkp5YjNkelpYSnBabmt0WVdWekwyMXZaR1Z6TDJObVlqRXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbVoxYm1OMGFXOXVJR1Z1WTNKNWNIUkNlWFJsSUNoelpXeG1MQ0JpZVhSbFVHRnlZVzBzSUdSbFkzSjVjSFFwSUh0Y2JpQWdkbUZ5SUhCaFpGeHVJQ0IyWVhJZ2FTQTlJQzB4WEc0Z0lIWmhjaUJzWlc0Z1BTQTRYRzRnSUhaaGNpQnZkWFFnUFNBd1hHNGdJSFpoY2lCaWFYUXNJSFpoYkhWbFhHNGdJSGRvYVd4bElDZ3JLMmtnUENCc1pXNHBJSHRjYmlBZ0lDQndZV1FnUFNCelpXeG1MbDlqYVhCb1pYSXVaVzVqY25sd2RFSnNiMk5yS0hObGJHWXVYM0J5WlhZcFhHNGdJQ0FnWW1sMElEMGdLR0o1ZEdWUVlYSmhiU0FtSUNneElEdzhJQ2czSUMwZ2FTa3BLU0EvSURCNE9EQWdPaUF3WEc0Z0lDQWdkbUZzZFdVZ1BTQndZV1JiTUYwZ1hpQmlhWFJjYmlBZ0lDQnZkWFFnS3owZ0tDaDJZV3gxWlNBbUlEQjRPREFwSUQ0K0lDaHBJQ1VnT0NrcFhHNGdJQ0FnYzJWc1ppNWZjSEpsZGlBOUlITm9hV1owU1c0b2MyVnNaaTVmY0hKbGRpd2daR1ZqY25sd2RDQS9JR0pwZENBNklIWmhiSFZsS1Z4dUlDQjlYRzRnSUhKbGRIVnliaUJ2ZFhSY2JuMWNibVY0Y0c5eWRITXVaVzVqY25sd2RDQTlJR1oxYm1OMGFXOXVJQ2h6Wld4bUxDQmphSFZ1YXl3Z1pHVmpjbmx3ZENrZ2UxeHVJQ0IyWVhJZ2JHVnVJRDBnWTJoMWJtc3ViR1Z1WjNSb1hHNGdJSFpoY2lCdmRYUWdQU0J1WlhjZ1FuVm1abVZ5S0d4bGJpbGNiaUFnZG1GeUlHa2dQU0F0TVZ4dUlDQjNhR2xzWlNBb0t5dHBJRHdnYkdWdUtTQjdYRzRnSUNBZ2IzVjBXMmxkSUQwZ1pXNWpjbmx3ZEVKNWRHVW9jMlZzWml3Z1kyaDFibXRiYVYwc0lHUmxZM0o1Y0hRcFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUc5MWRGeHVmVnh1Wm5WdVkzUnBiMjRnYzJocFpuUkpiaUFvWW5WbVptVnlMQ0IyWVd4MVpTa2dlMXh1SUNCMllYSWdiR1Z1SUQwZ1luVm1abVZ5TG14bGJtZDBhRnh1SUNCMllYSWdhU0E5SUMweFhHNGdJSFpoY2lCdmRYUWdQU0J1WlhjZ1FuVm1abVZ5S0dKMVptWmxjaTVzWlc1bmRHZ3BYRzRnSUdKMVptWmxjaUE5SUVKMVptWmxjaTVqYjI1allYUW9XMkoxWm1abGNpd2dibVYzSUVKMVptWmxjaWhiZG1Gc2RXVmRLVjBwWEc0Z0lIZG9hV3hsSUNncksya2dQQ0JzWlc0cElIdGNiaUFnSUNCdmRYUmJhVjBnUFNCaWRXWm1aWEpiYVYwZ1BEd2dNU0I4SUdKMVptWmxjbHRwSUNzZ01WMGdQajRnS0RjcFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUc5MWRGeHVmVnh1SWwxOSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGRhdGEsIGRlY3J5cHQpIHtcbiAgdmFyIG91dCA9IG5ldyBCdWZmZXIoJycpXG4gIHZhciBsZW5cblxuICB3aGlsZSAoZGF0YS5sZW5ndGgpIHtcbiAgICBpZiAoc2VsZi5fY2FjaGUubGVuZ3RoID09PSAwKSB7XG4gICAgICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgICAgIHNlbGYuX3ByZXYgPSBuZXcgQnVmZmVyKCcnKVxuICAgIH1cblxuICAgIGlmIChzZWxmLl9jYWNoZS5sZW5ndGggPD0gZGF0YS5sZW5ndGgpIHtcbiAgICAgIGxlbiA9IHNlbGYuX2NhY2hlLmxlbmd0aFxuICAgICAgb3V0ID0gQnVmZmVyLmNvbmNhdChbb3V0LCBlbmNyeXB0U3RhcnQoc2VsZiwgZGF0YS5zbGljZSgwLCBsZW4pLCBkZWNyeXB0KV0pXG4gICAgICBkYXRhID0gZGF0YS5zbGljZShsZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoW291dCwgZW5jcnlwdFN0YXJ0KHNlbGYsIGRhdGEsIGRlY3J5cHQpXSlcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuZnVuY3Rpb24gZW5jcnlwdFN0YXJ0IChzZWxmLCBkYXRhLCBkZWNyeXB0KSB7XG4gIHZhciBsZW4gPSBkYXRhLmxlbmd0aFxuICB2YXIgb3V0ID0geG9yKGRhdGEsIHNlbGYuX2NhY2hlKVxuICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGxlbilcbiAgc2VsZi5fcHJldiA9IEJ1ZmZlci5jb25jYXQoW3NlbGYuX3ByZXYsIGRlY3J5cHQgPyBkYXRhIDogb3V0XSlcbiAgcmV0dXJuIG91dFxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdmNIVmliR2xqTFdWdVkzSjVjSFF2Ym05a1pWOXRiMlIxYkdWekwzQmhjbk5sTFdGemJqRXZibTlrWlY5dGIyUjFiR1Z6TDJKeWIzZHpaWEpwWm5rdFlXVnpMMjF2WkdWekwyTm1ZaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWRtRnlJSGh2Y2lBOUlISmxjWFZwY21Vb0oySjFabVpsY2kxNGIzSW5LVnh1WEc1bGVIQnZjblJ6TG1WdVkzSjVjSFFnUFNCbWRXNWpkR2x2YmlBb2MyVnNaaXdnWkdGMFlTd2daR1ZqY25sd2RDa2dlMXh1SUNCMllYSWdiM1YwSUQwZ2JtVjNJRUoxWm1abGNpZ25KeWxjYmlBZ2RtRnlJR3hsYmx4dVhHNGdJSGRvYVd4bElDaGtZWFJoTG14bGJtZDBhQ2tnZTF4dUlDQWdJR2xtSUNoelpXeG1MbDlqWVdOb1pTNXNaVzVuZEdnZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUhObGJHWXVYMk5oWTJobElEMGdjMlZzWmk1ZlkybHdhR1Z5TG1WdVkzSjVjSFJDYkc5amF5aHpaV3htTGw5d2NtVjJLVnh1SUNBZ0lDQWdjMlZzWmk1ZmNISmxkaUE5SUc1bGR5QkNkV1ptWlhJb0p5Y3BYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSE5sYkdZdVgyTmhZMmhsTG14bGJtZDBhQ0E4UFNCa1lYUmhMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdiR1Z1SUQwZ2MyVnNaaTVmWTJGamFHVXViR1Z1WjNSb1hHNGdJQ0FnSUNCdmRYUWdQU0JDZFdabVpYSXVZMjl1WTJGMEtGdHZkWFFzSUdWdVkzSjVjSFJUZEdGeWRDaHpaV3htTENCa1lYUmhMbk5zYVdObEtEQXNJR3hsYmlrc0lHUmxZM0o1Y0hRcFhTbGNiaUFnSUNBZ0lHUmhkR0VnUFNCa1lYUmhMbk5zYVdObEtHeGxiaWxjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2IzVjBJRDBnUW5WbVptVnlMbU52Ym1OaGRDaGJiM1YwTENCbGJtTnllWEIwVTNSaGNuUW9jMlZzWml3Z1pHRjBZU3dnWkdWamNubHdkQ2xkS1Z4dUlDQWdJQ0FnWW5KbFlXdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2IzVjBYRzU5WEc1bWRXNWpkR2x2YmlCbGJtTnllWEIwVTNSaGNuUWdLSE5sYkdZc0lHUmhkR0VzSUdSbFkzSjVjSFFwSUh0Y2JpQWdkbUZ5SUd4bGJpQTlJR1JoZEdFdWJHVnVaM1JvWEc0Z0lIWmhjaUJ2ZFhRZ1BTQjRiM0lvWkdGMFlTd2djMlZzWmk1ZlkyRmphR1VwWEc0Z0lITmxiR1l1WDJOaFkyaGxJRDBnYzJWc1ppNWZZMkZqYUdVdWMyeHBZMlVvYkdWdUtWeHVJQ0J6Wld4bUxsOXdjbVYySUQwZ1FuVm1abVZ5TG1OdmJtTmhkQ2hiYzJWc1ppNWZjSEpsZGl3Z1pHVmpjbmx3ZENBL0lHUmhkR0VnT2lCdmRYUmRLVnh1SUNCeVpYUjFjbTRnYjNWMFhHNTlYRzRpWFgwPSIsImFyZ3VtZW50c1s0XVtcIi9ob21lL3VidW50dS9zdGFnaW5nL2FwcHMvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NiYy5qc1wiXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykiLCJhcmd1bWVudHNbNF1bXCIvaG9tZS91YnVudHUvc3RhZ2luZy9hcHBzL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy5qc1wiXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykiLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG52YXIgYWVzID0gcmVxdWlyZSgnLi9hZXMnKVxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBHSEFTSCA9IHJlcXVpcmUoJy4vZ2hhc2gnKVxudmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuaW5oZXJpdHMoU3RyZWFtQ2lwaGVyLCBUcmFuc2Zvcm0pXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmVhbUNpcGhlclxuXG5mdW5jdGlvbiBTdHJlYW1DaXBoZXIgKG1vZGUsIGtleSwgaXYsIGRlY3J5cHQpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFN0cmVhbUNpcGhlcikpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihtb2RlLCBrZXksIGl2KVxuICB9XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuX2ZpbklEID0gQnVmZmVyLmNvbmNhdChbaXYsIG5ldyBCdWZmZXIoWzAsIDAsIDAsIDFdKV0pXG4gIGl2ID0gQnVmZmVyLmNvbmNhdChbaXYsIG5ldyBCdWZmZXIoWzAsIDAsIDAsIDJdKV0pXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IG5ldyBCdWZmZXIoaXYubGVuZ3RoKVxuICB0aGlzLl9jYWNoZSA9IG5ldyBCdWZmZXIoJycpXG4gIHRoaXMuX3NlY0NhY2hlID0gbmV3IEJ1ZmZlcignJylcbiAgdGhpcy5fZGVjcnlwdCA9IGRlY3J5cHRcbiAgdGhpcy5fYWxlbiA9IDBcbiAgdGhpcy5fbGVuID0gMFxuICBpdi5jb3B5KHRoaXMuX3ByZXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG4gIHZhciBoID0gbmV3IEJ1ZmZlcig0KVxuICBoLmZpbGwoMClcbiAgdGhpcy5fZ2hhc2ggPSBuZXcgR0hBU0godGhpcy5fY2lwaGVyLmVuY3J5cHRCbG9jayhoKSlcbiAgdGhpcy5fYXV0aFRhZyA9IG51bGxcbiAgdGhpcy5fY2FsbGVkID0gZmFsc2Vcbn1cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChjaHVuaykge1xuICBpZiAoIXRoaXMuX2NhbGxlZCAmJiB0aGlzLl9hbGVuKSB7XG4gICAgdmFyIHJ1bXAgPSAxNiAtICh0aGlzLl9hbGVuICUgMTYpXG4gICAgaWYgKHJ1bXAgPCAxNikge1xuICAgICAgcnVtcCA9IG5ldyBCdWZmZXIocnVtcClcbiAgICAgIHJ1bXAuZmlsbCgwKVxuICAgICAgdGhpcy5fZ2hhc2gudXBkYXRlKHJ1bXApXG4gICAgfVxuICB9XG4gIHRoaXMuX2NhbGxlZCA9IHRydWVcbiAgdmFyIG91dCA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgaWYgKHRoaXMuX2RlY3J5cHQpIHtcbiAgICB0aGlzLl9naGFzaC51cGRhdGUoY2h1bmspXG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fZ2hhc2gudXBkYXRlKG91dClcbiAgfVxuICB0aGlzLl9sZW4gKz0gY2h1bmsubGVuZ3RoXG4gIHJldHVybiBvdXRcbn1cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5fZGVjcnlwdCAmJiAhdGhpcy5fYXV0aFRhZykge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgc3RhdGUgb3IgdW5hYmxlIHRvIGF1dGhlbnRpY2F0ZSBkYXRhJylcbiAgfVxuICB2YXIgdGFnID0geG9yKHRoaXMuX2doYXNoLmZpbmFsKHRoaXMuX2FsZW4gKiA4LCB0aGlzLl9sZW4gKiA4KSwgdGhpcy5fY2lwaGVyLmVuY3J5cHRCbG9jayh0aGlzLl9maW5JRCkpXG4gIGlmICh0aGlzLl9kZWNyeXB0KSB7XG4gICAgaWYgKHhvclRlc3QodGFnLCB0aGlzLl9hdXRoVGFnKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBzdGF0ZSBvciB1bmFibGUgdG8gYXV0aGVudGljYXRlIGRhdGEnKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9hdXRoVGFnID0gdGFnXG4gIH1cbiAgdGhpcy5fY2lwaGVyLnNjcnViKClcbn1cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuZ2V0QXV0aFRhZyA9IGZ1bmN0aW9uIGdldEF1dGhUYWcgKCkge1xuICBpZiAoIXRoaXMuX2RlY3J5cHQgJiYgQnVmZmVyLmlzQnVmZmVyKHRoaXMuX2F1dGhUYWcpKSB7XG4gICAgcmV0dXJuIHRoaXMuX2F1dGhUYWdcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRpbmcgdG8gZ2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbiAgfVxufVxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5zZXRBdXRoVGFnID0gZnVuY3Rpb24gc2V0QXV0aFRhZyAodGFnKSB7XG4gIGlmICh0aGlzLl9kZWNyeXB0KSB7XG4gICAgdGhpcy5fYXV0aFRhZyA9IHRhZ1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGluZyB0byBzZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxuICB9XG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLnNldEFBRCA9IGZ1bmN0aW9uIHNldEFBRCAoYnVmKSB7XG4gIGlmICghdGhpcy5fY2FsbGVkKSB7XG4gICAgdGhpcy5fZ2hhc2gudXBkYXRlKGJ1ZilcbiAgICB0aGlzLl9hbGVuICs9IGJ1Zi5sZW5ndGhcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRpbmcgdG8gc2V0IEFBRCBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG4gIH1cbn1cbmZ1bmN0aW9uIHhvclRlc3QgKGEsIGIpIHtcbiAgdmFyIG91dCA9IDBcbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgIG91dCsrXG4gIH1cbiAgdmFyIGxlbiA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aClcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0ICs9IChhW2ldIF4gYltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12Y0hWaWJHbGpMV1Z1WTNKNWNIUXZibTlrWlY5dGIyUjFiR1Z6TDNCaGNuTmxMV0Z6YmpFdmJtOWtaVjl0YjJSMWJHVnpMMkp5YjNkelpYSnBabmt0WVdWekwyRjFkR2hEYVhCb1pYSXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCaFpYTWdQU0J5WlhGMWFYSmxLQ2N1TDJGbGN5Y3BYRzUyWVhJZ1ZISmhibk5tYjNKdElEMGdjbVZ4ZFdseVpTZ25ZMmx3YUdWeUxXSmhjMlVuS1Z4dWRtRnlJR2x1YUdWeWFYUnpJRDBnY21WeGRXbHlaU2duYVc1b1pYSnBkSE1uS1Z4dWRtRnlJRWRJUVZOSUlEMGdjbVZ4ZFdseVpTZ25MaTluYUdGemFDY3BYRzUyWVhJZ2VHOXlJRDBnY21WeGRXbHlaU2duWW5WbVptVnlMWGh2Y2ljcFhHNXBibWhsY21sMGN5aFRkSEpsWVcxRGFYQm9aWElzSUZSeVlXNXpabTl5YlNsY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1UzUnlaV0Z0UTJsd2FHVnlYRzVjYm1aMWJtTjBhVzl1SUZOMGNtVmhiVU5wY0dobGNpQW9iVzlrWlN3Z2EyVjVMQ0JwZGl3Z1pHVmpjbmx3ZENrZ2UxeHVJQ0JwWmlBb0lTaDBhR2x6SUdsdWMzUmhibU5sYjJZZ1UzUnlaV0Z0UTJsd2FHVnlLU2tnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVTNSeVpXRnRRMmx3YUdWeUtHMXZaR1VzSUd0bGVTd2dhWFlwWEc0Z0lIMWNiaUFnVkhKaGJuTm1iM0p0TG1OaGJHd29kR2hwY3lsY2JpQWdkR2hwY3k1ZlptbHVTVVFnUFNCQ2RXWm1aWEl1WTI5dVkyRjBLRnRwZGl3Z2JtVjNJRUoxWm1abGNpaGJNQ3dnTUN3Z01Dd2dNVjBwWFNsY2JpQWdhWFlnUFNCQ2RXWm1aWEl1WTI5dVkyRjBLRnRwZGl3Z2JtVjNJRUoxWm1abGNpaGJNQ3dnTUN3Z01Dd2dNbDBwWFNsY2JpQWdkR2hwY3k1ZlkybHdhR1Z5SUQwZ2JtVjNJR0ZsY3k1QlJWTW9hMlY1S1Z4dUlDQjBhR2x6TGw5d2NtVjJJRDBnYm1WM0lFSjFabVpsY2locGRpNXNaVzVuZEdncFhHNGdJSFJvYVhNdVgyTmhZMmhsSUQwZ2JtVjNJRUoxWm1abGNpZ25KeWxjYmlBZ2RHaHBjeTVmYzJWalEyRmphR1VnUFNCdVpYY2dRblZtWm1WeUtDY25LVnh1SUNCMGFHbHpMbDlrWldOeWVYQjBJRDBnWkdWamNubHdkRnh1SUNCMGFHbHpMbDloYkdWdUlEMGdNRnh1SUNCMGFHbHpMbDlzWlc0Z1BTQXdYRzRnSUdsMkxtTnZjSGtvZEdocGN5NWZjSEpsZGlsY2JpQWdkR2hwY3k1ZmJXOWtaU0E5SUcxdlpHVmNiaUFnZG1GeUlHZ2dQU0J1WlhjZ1FuVm1abVZ5S0RRcFhHNGdJR2d1Wm1sc2JDZ3dLVnh1SUNCMGFHbHpMbDluYUdGemFDQTlJRzVsZHlCSFNFRlRTQ2gwYUdsekxsOWphWEJvWlhJdVpXNWpjbmx3ZEVKc2IyTnJLR2dwS1Z4dUlDQjBhR2x6TGw5aGRYUm9WR0ZuSUQwZ2JuVnNiRnh1SUNCMGFHbHpMbDlqWVd4c1pXUWdQU0JtWVd4elpWeHVmVnh1VTNSeVpXRnRRMmx3YUdWeUxuQnliM1J2ZEhsd1pTNWZkWEJrWVhSbElEMGdablZ1WTNScGIyNGdLR05vZFc1cktTQjdYRzRnSUdsbUlDZ2hkR2hwY3k1ZlkyRnNiR1ZrSUNZbUlIUm9hWE11WDJGc1pXNHBJSHRjYmlBZ0lDQjJZWElnY25WdGNDQTlJREUySUMwZ0tIUm9hWE11WDJGc1pXNGdKU0F4TmlsY2JpQWdJQ0JwWmlBb2NuVnRjQ0E4SURFMktTQjdYRzRnSUNBZ0lDQnlkVzF3SUQwZ2JtVjNJRUoxWm1abGNpaHlkVzF3S1Z4dUlDQWdJQ0FnY25WdGNDNW1hV3hzS0RBcFhHNGdJQ0FnSUNCMGFHbHpMbDluYUdGemFDNTFjR1JoZEdVb2NuVnRjQ2xjYmlBZ0lDQjlYRzRnSUgxY2JpQWdkR2hwY3k1ZlkyRnNiR1ZrSUQwZ2RISjFaVnh1SUNCMllYSWdiM1YwSUQwZ2RHaHBjeTVmYlc5a1pTNWxibU55ZVhCMEtIUm9hWE1zSUdOb2RXNXJLVnh1SUNCcFppQW9kR2hwY3k1ZlpHVmpjbmx3ZENrZ2UxeHVJQ0FnSUhSb2FYTXVYMmRvWVhOb0xuVndaR0YwWlNoamFIVnVheWxjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0IwYUdsekxsOW5hR0Z6YUM1MWNHUmhkR1VvYjNWMEtWeHVJQ0I5WEc0Z0lIUm9hWE11WDJ4bGJpQXJQU0JqYUhWdWF5NXNaVzVuZEdoY2JpQWdjbVYwZFhKdUlHOTFkRnh1ZlZ4dVUzUnlaV0Z0UTJsd2FHVnlMbkJ5YjNSdmRIbHdaUzVmWm1sdVlXd2dQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJR2xtSUNoMGFHbHpMbDlrWldOeWVYQjBJQ1ltSUNGMGFHbHpMbDloZFhSb1ZHRm5LU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZFZibk4xY0hCdmNuUmxaQ0J6ZEdGMFpTQnZjaUIxYm1GaWJHVWdkRzhnWVhWMGFHVnVkR2xqWVhSbElHUmhkR0VuS1Z4dUlDQjlYRzRnSUhaaGNpQjBZV2NnUFNCNGIzSW9kR2hwY3k1ZloyaGhjMmd1Wm1sdVlXd29kR2hwY3k1ZllXeGxiaUFxSURnc0lIUm9hWE11WDJ4bGJpQXFJRGdwTENCMGFHbHpMbDlqYVhCb1pYSXVaVzVqY25sd2RFSnNiMk5yS0hSb2FYTXVYMlpwYmtsRUtTbGNiaUFnYVdZZ0tIUm9hWE11WDJSbFkzSjVjSFFwSUh0Y2JpQWdJQ0JwWmlBb2VHOXlWR1Z6ZENoMFlXY3NJSFJvYVhNdVgyRjFkR2hVWVdjcEtTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oxVnVjM1Z3Y0c5eWRHVmtJSE4wWVhSbElHOXlJSFZ1WVdKc1pTQjBieUJoZFhSb1pXNTBhV05oZEdVZ1pHRjBZU2NwWEc0Z0lDQWdmVnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSFJvYVhNdVgyRjFkR2hVWVdjZ1BTQjBZV2RjYmlBZ2ZWeHVJQ0IwYUdsekxsOWphWEJvWlhJdWMyTnlkV0lvS1Z4dWZWeHVVM1J5WldGdFEybHdhR1Z5TG5CeWIzUnZkSGx3WlM1blpYUkJkWFJvVkdGbklEMGdablZ1WTNScGIyNGdaMlYwUVhWMGFGUmhaeUFvS1NCN1hHNGdJR2xtSUNnaGRHaHBjeTVmWkdWamNubHdkQ0FtSmlCQ2RXWm1aWEl1YVhOQ2RXWm1aWElvZEdocGN5NWZZWFYwYUZSaFp5a3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWVhWMGFGUmhaMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25RWFIwWlcxd2RHbHVaeUIwYnlCblpYUWdZWFYwYUNCMFlXY2dhVzRnZFc1emRYQndiM0owWldRZ2MzUmhkR1VuS1Z4dUlDQjlYRzU5WEc1VGRISmxZVzFEYVhCb1pYSXVjSEp2ZEc5MGVYQmxMbk5sZEVGMWRHaFVZV2NnUFNCbWRXNWpkR2x2YmlCelpYUkJkWFJvVkdGbklDaDBZV2NwSUh0Y2JpQWdhV1lnS0hSb2FYTXVYMlJsWTNKNWNIUXBJSHRjYmlBZ0lDQjBhR2x6TGw5aGRYUm9WR0ZuSUQwZ2RHRm5YRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZEJkSFJsYlhCMGFXNW5JSFJ2SUhObGRDQmhkWFJvSUhSaFp5QnBiaUIxYm5OMWNIQnZjblJsWkNCemRHRjBaU2NwWEc0Z0lIMWNibjFjYmxOMGNtVmhiVU5wY0dobGNpNXdjbTkwYjNSNWNHVXVjMlYwUVVGRUlEMGdablZ1WTNScGIyNGdjMlYwUVVGRUlDaGlkV1lwSUh0Y2JpQWdhV1lnS0NGMGFHbHpMbDlqWVd4c1pXUXBJSHRjYmlBZ0lDQjBhR2x6TGw5bmFHRnphQzUxY0dSaGRHVW9ZblZtS1Z4dUlDQWdJSFJvYVhNdVgyRnNaVzRnS3owZ1luVm1MbXhsYm1kMGFGeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblFYUjBaVzF3ZEdsdVp5QjBieUJ6WlhRZ1FVRkVJR2x1SUhWdWMzVndjRzl5ZEdWa0lITjBZWFJsSnlsY2JpQWdmVnh1ZlZ4dVpuVnVZM1JwYjI0Z2VHOXlWR1Z6ZENBb1lTd2dZaWtnZTF4dUlDQjJZWElnYjNWMElEMGdNRnh1SUNCcFppQW9ZUzVzWlc1bmRHZ2dJVDA5SUdJdWJHVnVaM1JvS1NCN1hHNGdJQ0FnYjNWMEt5dGNiaUFnZlZ4dUlDQjJZWElnYkdWdUlEMGdUV0YwYUM1dGFXNG9ZUzVzWlc1bmRHZ3NJR0l1YkdWdVozUm9LVnh1SUNCMllYSWdhU0E5SUMweFhHNGdJSGRvYVd4bElDZ3JLMmtnUENCc1pXNHBJSHRjYmlBZ0lDQnZkWFFnS3owZ0tHRmJhVjBnWGlCaVcybGRLVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnZkWFJjYm4xY2JpSmRmUT09IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3N0cmVhbScpLlRyYW5zZm9ybVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2RlcicpLlN0cmluZ0RlY29kZXJcbm1vZHVsZS5leHBvcnRzID0gQ2lwaGVyQmFzZVxuaW5oZXJpdHMoQ2lwaGVyQmFzZSwgVHJhbnNmb3JtKVxuZnVuY3Rpb24gQ2lwaGVyQmFzZSAoaGFzaE1vZGUpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5oYXNoTW9kZSA9IHR5cGVvZiBoYXNoTW9kZSA9PT0gJ3N0cmluZydcbiAgaWYgKHRoaXMuaGFzaE1vZGUpIHtcbiAgICB0aGlzW2hhc2hNb2RlXSA9IHRoaXMuX2ZpbmFsT3JEaWdlc3RcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmZpbmFsID0gdGhpcy5fZmluYWxPckRpZ2VzdFxuICB9XG4gIHRoaXMuX2RlY29kZXIgPSBudWxsXG4gIHRoaXMuX2VuY29kaW5nID0gbnVsbFxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEsIGlucHV0RW5jLCBvdXRwdXRFbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGRhdGEgPSBuZXcgQnVmZmVyKGRhdGEsIGlucHV0RW5jKVxuICB9XG4gIHZhciBvdXREYXRhID0gdGhpcy5fdXBkYXRlKGRhdGEpXG4gIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuICBpZiAob3V0cHV0RW5jKSB7XG4gICAgb3V0RGF0YSA9IHRoaXMuX3RvU3RyaW5nKG91dERhdGEsIG91dHB1dEVuYylcbiAgfVxuICByZXR1cm4gb3V0RGF0YVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uICgpIHt9XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLmdldEF1dGhUYWcgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIGdldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEF1dGhUYWcgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEFBRCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gc2V0IGFhZCBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoZGF0YSwgXywgbmV4dCkge1xuICB2YXIgZXJyXG4gIHRyeSB7XG4gICAgaWYgKHRoaXMuaGFzaE1vZGUpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZShkYXRhKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1c2godGhpcy5fdXBkYXRlKGRhdGEpKVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfSBmaW5hbGx5IHtcbiAgICBuZXh0KGVycilcbiAgfVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZsdXNoID0gZnVuY3Rpb24gKGRvbmUpIHtcbiAgdmFyIGVyclxuICB0cnkge1xuICAgIHRoaXMucHVzaCh0aGlzLl9maW5hbCgpKVxuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyID0gZVxuICB9IGZpbmFsbHkge1xuICAgIGRvbmUoZXJyKVxuICB9XG59XG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fZmluYWxPckRpZ2VzdCA9IGZ1bmN0aW9uIChvdXRwdXRFbmMpIHtcbiAgdmFyIG91dERhdGEgPSB0aGlzLl9maW5hbCgpIHx8IG5ldyBCdWZmZXIoJycpXG4gIGlmIChvdXRwdXRFbmMpIHtcbiAgICBvdXREYXRhID0gdGhpcy5fdG9TdHJpbmcob3V0RGF0YSwgb3V0cHV0RW5jLCB0cnVlKVxuICB9XG4gIHJldHVybiBvdXREYXRhXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLl90b1N0cmluZyA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jLCBmaW5hbCkge1xuICBpZiAoIXRoaXMuX2RlY29kZXIpIHtcbiAgICB0aGlzLl9kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKVxuICAgIHRoaXMuX2VuY29kaW5nID0gZW5jXG4gIH1cbiAgaWYgKHRoaXMuX2VuY29kaW5nICE9PSBlbmMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NhblxcJ3Qgc3dpdGNoIGVuY29kaW5ncycpXG4gIH1cbiAgdmFyIG91dCA9IHRoaXMuX2RlY29kZXIud3JpdGUodmFsdWUpXG4gIGlmIChmaW5hbCkge1xuICAgIG91dCArPSB0aGlzLl9kZWNvZGVyLmVuZCgpXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdmNIVmliR2xqTFdWdVkzSjVjSFF2Ym05a1pWOXRiMlIxYkdWekwzQmhjbk5sTFdGemJqRXZibTlrWlY5dGIyUjFiR1Z6TDJKeWIzZHpaWEpwWm5rdFlXVnpMMjV2WkdWZmJXOWtkV3hsY3k5amFYQm9aWEl0WW1GelpTOXBibVJsZUM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkluWmhjaUJVY21GdWMyWnZjbTBnUFNCeVpYRjFhWEpsS0NkemRISmxZVzBuS1M1VWNtRnVjMlp2Y20xY2JuWmhjaUJwYm1obGNtbDBjeUE5SUhKbGNYVnBjbVVvSjJsdWFHVnlhWFJ6SnlsY2JuWmhjaUJUZEhKcGJtZEVaV052WkdWeUlEMGdjbVZ4ZFdseVpTZ25jM1J5YVc1blgyUmxZMjlrWlhJbktTNVRkSEpwYm1kRVpXTnZaR1Z5WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUVOcGNHaGxja0poYzJWY2JtbHVhR1Z5YVhSektFTnBjR2hsY2tKaGMyVXNJRlJ5WVc1elptOXliU2xjYm1aMWJtTjBhVzl1SUVOcGNHaGxja0poYzJVZ0tHaGhjMmhOYjJSbEtTQjdYRzRnSUZSeVlXNXpabTl5YlM1allXeHNLSFJvYVhNcFhHNGdJSFJvYVhNdWFHRnphRTF2WkdVZ1BTQjBlWEJsYjJZZ2FHRnphRTF2WkdVZ1BUMDlJQ2R6ZEhKcGJtY25YRzRnSUdsbUlDaDBhR2x6TG1oaGMyaE5iMlJsS1NCN1hHNGdJQ0FnZEdocGMxdG9ZWE5vVFc5a1pWMGdQU0IwYUdsekxsOW1hVzVoYkU5eVJHbG5aWE4wWEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnZEdocGN5NW1hVzVoYkNBOUlIUm9hWE11WDJacGJtRnNUM0pFYVdkbGMzUmNiaUFnZlZ4dUlDQjBhR2x6TGw5a1pXTnZaR1Z5SUQwZ2JuVnNiRnh1SUNCMGFHbHpMbDlsYm1OdlpHbHVaeUE5SUc1MWJHeGNibjFjYmtOcGNHaGxja0poYzJVdWNISnZkRzkwZVhCbExuVndaR0YwWlNBOUlHWjFibU4wYVc5dUlDaGtZWFJoTENCcGJuQjFkRVZ1WXl3Z2IzVjBjSFYwUlc1aktTQjdYRzRnSUdsbUlDaDBlWEJsYjJZZ1pHRjBZU0E5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNCa1lYUmhJRDBnYm1WM0lFSjFabVpsY2loa1lYUmhMQ0JwYm5CMWRFVnVZeWxjYmlBZ2ZWeHVJQ0IyWVhJZ2IzVjBSR0YwWVNBOUlIUm9hWE11WDNWd1pHRjBaU2hrWVhSaEtWeHVJQ0JwWmlBb2RHaHBjeTVvWVhOb1RXOWtaU2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6WEc0Z0lIMWNiaUFnYVdZZ0tHOTFkSEIxZEVWdVl5a2dlMXh1SUNBZ0lHOTFkRVJoZEdFZ1BTQjBhR2x6TGw5MGIxTjBjbWx1WnlodmRYUkVZWFJoTENCdmRYUndkWFJGYm1NcFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUc5MWRFUmhkR0ZjYm4xY2JseHVRMmx3YUdWeVFtRnpaUzV3Y205MGIzUjVjR1V1YzJWMFFYVjBiMUJoWkdScGJtY2dQU0JtZFc1amRHbHZiaUFvS1NCN2ZWeHVYRzVEYVhCb1pYSkNZWE5sTG5CeWIzUnZkSGx3WlM1blpYUkJkWFJvVkdGbklEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0ozUnllV2x1WnlCMGJ5Qm5aWFFnWVhWMGFDQjBZV2NnYVc0Z2RXNXpkWEJ3YjNKMFpXUWdjM1JoZEdVbktWeHVmVnh1WEc1RGFYQm9aWEpDWVhObExuQnliM1J2ZEhsd1pTNXpaWFJCZFhSb1ZHRm5JRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KM1J5ZVdsdVp5QjBieUJ6WlhRZ1lYVjBhQ0IwWVdjZ2FXNGdkVzV6ZFhCd2IzSjBaV1FnYzNSaGRHVW5LVnh1ZlZ4dVhHNURhWEJvWlhKQ1lYTmxMbkJ5YjNSdmRIbHdaUzV6WlhSQlFVUWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25kSEo1YVc1bklIUnZJSE5sZENCaFlXUWdhVzRnZFc1emRYQndiM0owWldRZ2MzUmhkR1VuS1Z4dWZWeHVYRzVEYVhCb1pYSkNZWE5sTG5CeWIzUnZkSGx3WlM1ZmRISmhibk5tYjNKdElEMGdablZ1WTNScGIyNGdLR1JoZEdFc0lGOHNJRzVsZUhRcElIdGNiaUFnZG1GeUlHVnljbHh1SUNCMGNua2dlMXh1SUNBZ0lHbG1JQ2gwYUdsekxtaGhjMmhOYjJSbEtTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5MWNHUmhkR1VvWkdGMFlTbGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnZEdocGN5NXdkWE5vS0hSb2FYTXVYM1Z3WkdGMFpTaGtZWFJoS1NsY2JpQWdJQ0I5WEc0Z0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQmxjbklnUFNCbFhHNGdJSDBnWm1sdVlXeHNlU0I3WEc0Z0lDQWdibVY0ZENobGNuSXBYRzRnSUgxY2JuMWNia05wY0dobGNrSmhjMlV1Y0hKdmRHOTBlWEJsTGw5bWJIVnphQ0E5SUdaMWJtTjBhVzl1SUNoa2IyNWxLU0I3WEc0Z0lIWmhjaUJsY25KY2JpQWdkSEo1SUh0Y2JpQWdJQ0IwYUdsekxuQjFjMmdvZEdocGN5NWZabWx1WVd3b0tTbGNiaUFnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUdWeWNpQTlJR1ZjYmlBZ2ZTQm1hVzVoYkd4NUlIdGNiaUFnSUNCa2IyNWxLR1Z5Y2lsY2JpQWdmVnh1ZlZ4dVEybHdhR1Z5UW1GelpTNXdjbTkwYjNSNWNHVXVYMlpwYm1Gc1QzSkVhV2RsYzNRZ1BTQm1kVzVqZEdsdmJpQW9iM1YwY0hWMFJXNWpLU0I3WEc0Z0lIWmhjaUJ2ZFhSRVlYUmhJRDBnZEdocGN5NWZabWx1WVd3b0tTQjhmQ0J1WlhjZ1FuVm1abVZ5S0NjbktWeHVJQ0JwWmlBb2IzVjBjSFYwUlc1aktTQjdYRzRnSUNBZ2IzVjBSR0YwWVNBOUlIUm9hWE11WDNSdlUzUnlhVzVuS0c5MWRFUmhkR0VzSUc5MWRIQjFkRVZ1WXl3Z2RISjFaU2xjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdiM1YwUkdGMFlWeHVmVnh1WEc1RGFYQm9aWEpDWVhObExuQnliM1J2ZEhsd1pTNWZkRzlUZEhKcGJtY2dQU0JtZFc1amRHbHZiaUFvZG1Gc2RXVXNJR1Z1WXl3Z1ptbHVZV3dwSUh0Y2JpQWdhV1lnS0NGMGFHbHpMbDlrWldOdlpHVnlLU0I3WEc0Z0lDQWdkR2hwY3k1ZlpHVmpiMlJsY2lBOUlHNWxkeUJUZEhKcGJtZEVaV052WkdWeUtHVnVZeWxjYmlBZ0lDQjBhR2x6TGw5bGJtTnZaR2x1WnlBOUlHVnVZMXh1SUNCOVhHNGdJR2xtSUNoMGFHbHpMbDlsYm1OdlpHbHVaeUFoUFQwZ1pXNWpLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZGpZVzVjWENkMElITjNhWFJqYUNCbGJtTnZaR2x1WjNNbktWeHVJQ0I5WEc0Z0lIWmhjaUJ2ZFhRZ1BTQjBhR2x6TGw5a1pXTnZaR1Z5TG5keWFYUmxLSFpoYkhWbEtWeHVJQ0JwWmlBb1ptbHVZV3dwSUh0Y2JpQWdJQ0J2ZFhRZ0t6MGdkR2hwY3k1ZlpHVmpiMlJsY2k1bGJtUW9LVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnZkWFJjYm4xY2JpSmRmUT09IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4b3IgKGEsIGIpIHtcbiAgdmFyIGxlbmd0aCA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aClcbiAgdmFyIGJ1ZmZlciA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBidWZmZXJbaV0gPSBhW2ldIF4gYltpXVxuICB9XG5cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdmNIVmliR2xqTFdWdVkzSjVjSFF2Ym05a1pWOXRiMlIxYkdWekwzQmhjbk5sTFdGemJqRXZibTlrWlY5dGIyUjFiR1Z6TDJKeWIzZHpaWEpwWm5rdFlXVnpMMjV2WkdWZmJXOWtkV3hsY3k5aWRXWm1aWEl0ZUc5eUwybHVaR1Y0TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2labWxzWlNJNkltZGxibVZ5WVhSbFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUp0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVJSGh2Y2lBb1lTd2dZaWtnZTF4dUlDQjJZWElnYkdWdVozUm9JRDBnVFdGMGFDNXRhVzRvWVM1c1pXNW5kR2dzSUdJdWJHVnVaM1JvS1Z4dUlDQjJZWElnWW5WbVptVnlJRDBnYm1WM0lFSjFabVpsY2loc1pXNW5kR2dwWEc1Y2JpQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JzWlc1bmRHZzdJQ3NyYVNrZ2UxeHVJQ0FnSUdKMVptWmxjbHRwWFNBOUlHRmJhVjBnWGlCaVcybGRYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdZblZtWm1WeVhHNTlYRzRpWFgwPSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciB6ZXJvcyA9IG5ldyBCdWZmZXIoMTYpXG56ZXJvcy5maWxsKDApXG5tb2R1bGUuZXhwb3J0cyA9IEdIQVNIXG5mdW5jdGlvbiBHSEFTSCAoa2V5KSB7XG4gIHRoaXMuaCA9IGtleVxuICB0aGlzLnN0YXRlID0gbmV3IEJ1ZmZlcigxNilcbiAgdGhpcy5zdGF0ZS5maWxsKDApXG4gIHRoaXMuY2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxufVxuLy8gZnJvbSBodHRwOi8vYml0d2lzZXNoaWZ0bGVmdC5naXRodWIuaW8vc2pjbC9kb2Mvc3ltYm9scy9zcmMvY29yZV9nY20uanMuaHRtbFxuLy8gYnkgSnVobyBWw6Row6QtSGVydHR1YVxuR0hBU0gucHJvdG90eXBlLmdoYXNoID0gZnVuY3Rpb24gKGJsb2NrKSB7XG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGJsb2NrLmxlbmd0aCkge1xuICAgIHRoaXMuc3RhdGVbaV0gXj0gYmxvY2tbaV1cbiAgfVxuICB0aGlzLl9tdWx0aXBseSgpXG59XG5cbkdIQVNILnByb3RvdHlwZS5fbXVsdGlwbHkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBWaSA9IHRvQXJyYXkodGhpcy5oKVxuICB2YXIgWmkgPSBbMCwgMCwgMCwgMF1cbiAgdmFyIGosIHhpLCBsc2JfVmlcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgMTI4KSB7XG4gICAgeGkgPSAodGhpcy5zdGF0ZVt+fihpIC8gOCldICYgKDEgPDwgKDcgLSBpICUgOCkpKSAhPT0gMFxuICAgIGlmICh4aSkge1xuICAgICAgLy8gWl9pKzEgPSBaX2kgXiBWX2lcbiAgICAgIFppID0geG9yKFppLCBWaSlcbiAgICB9XG5cbiAgICAvLyBTdG9yZSB0aGUgdmFsdWUgb2YgTFNCKFZfaSlcbiAgICBsc2JfVmkgPSAoVmlbM10gJiAxKSAhPT0gMFxuXG4gICAgLy8gVl9pKzEgPSBWX2kgPj4gMVxuICAgIGZvciAoaiA9IDM7IGogPiAwOyBqLS0pIHtcbiAgICAgIFZpW2pdID0gKFZpW2pdID4+PiAxKSB8ICgoVmlbaiAtIDFdICYgMSkgPDwgMzEpXG4gICAgfVxuICAgIFZpWzBdID0gVmlbMF0gPj4+IDFcblxuICAgIC8vIElmIExTQihWX2kpIGlzIDEsIFZfaSsxID0gKFZfaSA+PiAxKSBeIFJcbiAgICBpZiAobHNiX1ZpKSB7XG4gICAgICBWaVswXSA9IFZpWzBdIF4gKDB4ZTEgPDwgMjQpXG4gICAgfVxuICB9XG4gIHRoaXMuc3RhdGUgPSBmcm9tQXJyYXkoWmkpXG59XG5HSEFTSC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGJ1Zikge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgYnVmXSlcbiAgdmFyIGNodW5rXG4gIHdoaWxlICh0aGlzLmNhY2hlLmxlbmd0aCA+PSAxNikge1xuICAgIGNodW5rID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNilcbiAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICB0aGlzLmdoYXNoKGNodW5rKVxuICB9XG59XG5HSEFTSC5wcm90b3R5cGUuZmluYWwgPSBmdW5jdGlvbiAoYWJsLCBibCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGgpIHtcbiAgICB0aGlzLmdoYXNoKEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIHplcm9zXSwgMTYpKVxuICB9XG4gIHRoaXMuZ2hhc2goZnJvbUFycmF5KFtcbiAgICAwLCBhYmwsXG4gICAgMCwgYmxcbiAgXSkpXG4gIHJldHVybiB0aGlzLnN0YXRlXG59XG5cbmZ1bmN0aW9uIHRvQXJyYXkgKGJ1Zikge1xuICByZXR1cm4gW1xuICAgIGJ1Zi5yZWFkVUludDMyQkUoMCksXG4gICAgYnVmLnJlYWRVSW50MzJCRSg0KSxcbiAgICBidWYucmVhZFVJbnQzMkJFKDgpLFxuICAgIGJ1Zi5yZWFkVUludDMyQkUoMTIpXG4gIF1cbn1cbmZ1bmN0aW9uIGZyb21BcnJheSAob3V0KSB7XG4gIG91dCA9IG91dC5tYXAoZml4dXBfdWludDMyKVxuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcigxNilcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzBdLCAwKVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMV0sIDQpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsyXSwgOClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzNdLCAxMilcbiAgcmV0dXJuIGJ1ZlxufVxudmFyIHVpbnRfbWF4ID0gTWF0aC5wb3coMiwgMzIpXG5mdW5jdGlvbiBmaXh1cF91aW50MzIgKHgpIHtcbiAgdmFyIHJldCwgeF9wb3NcbiAgcmV0ID0geCA+IHVpbnRfbWF4IHx8IHggPCAwID8gKHhfcG9zID0gTWF0aC5hYnMoeCkgJSB1aW50X21heCwgeCA8IDAgPyB1aW50X21heCAtIHhfcG9zIDogeF9wb3MpIDogeFxuICByZXR1cm4gcmV0XG59XG5mdW5jdGlvbiB4b3IgKGEsIGIpIHtcbiAgcmV0dXJuIFtcbiAgICBhWzBdIF4gYlswXSxcbiAgICBhWzFdIF4gYlsxXSxcbiAgICBhWzJdIF4gYlsyXSxcbiAgICBhWzNdIF4gYlszXVxuICBdXG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12Y0hWaWJHbGpMV1Z1WTNKNWNIUXZibTlrWlY5dGIyUjFiR1Z6TDNCaGNuTmxMV0Z6YmpFdmJtOWtaVjl0YjJSMWJHVnpMMkp5YjNkelpYSnBabmt0WVdWekwyZG9ZWE5vTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCNlpYSnZjeUE5SUc1bGR5QkNkV1ptWlhJb01UWXBYRzU2WlhKdmN5NW1hV3hzS0RBcFhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlFZElRVk5JWEc1bWRXNWpkR2x2YmlCSFNFRlRTQ0FvYTJWNUtTQjdYRzRnSUhSb2FYTXVhQ0E5SUd0bGVWeHVJQ0IwYUdsekxuTjBZWFJsSUQwZ2JtVjNJRUoxWm1abGNpZ3hOaWxjYmlBZ2RHaHBjeTV6ZEdGMFpTNW1hV3hzS0RBcFhHNGdJSFJvYVhNdVkyRmphR1VnUFNCdVpYY2dRblZtWm1WeUtDY25LVnh1ZlZ4dUx5OGdabkp2YlNCb2RIUndPaTh2WW1sMGQybHpaWE5vYVdaMGJHVm1kQzVuYVhSb2RXSXVhVzh2YzJwamJDOWtiMk12YzNsdFltOXNjeTl6Y21NdlkyOXlaVjluWTIwdWFuTXVhSFJ0YkZ4dUx5OGdZbmtnU25Wb2J5Qld3NlJvdzZRdFNHVnlkSFIxWVZ4dVIwaEJVMGd1Y0hKdmRHOTBlWEJsTG1kb1lYTm9JRDBnWm5WdVkzUnBiMjRnS0dKc2IyTnJLU0I3WEc0Z0lIWmhjaUJwSUQwZ0xURmNiaUFnZDJocGJHVWdLQ3NyYVNBOElHSnNiMk5yTG14bGJtZDBhQ2tnZTF4dUlDQWdJSFJvYVhNdWMzUmhkR1ZiYVYwZ1hqMGdZbXh2WTJ0YmFWMWNiaUFnZlZ4dUlDQjBhR2x6TGw5dGRXeDBhWEJzZVNncFhHNTlYRzVjYmtkSVFWTklMbkJ5YjNSdmRIbHdaUzVmYlhWc2RHbHdiSGtnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUhaaGNpQldhU0E5SUhSdlFYSnlZWGtvZEdocGN5NW9LVnh1SUNCMllYSWdXbWtnUFNCYk1Dd2dNQ3dnTUN3Z01GMWNiaUFnZG1GeUlHb3NJSGhwTENCc2MySmZWbWxjYmlBZ2RtRnlJR2tnUFNBdE1WeHVJQ0IzYUdsc1pTQW9LeXRwSUR3Z01USTRLU0I3WEc0Z0lDQWdlR2tnUFNBb2RHaHBjeTV6ZEdGMFpWdCtmaWhwSUM4Z09DbGRJQ1lnS0RFZ1BEd2dLRGNnTFNCcElDVWdPQ2twS1NBaFBUMGdNRnh1SUNBZ0lHbG1JQ2g0YVNrZ2UxeHVJQ0FnSUNBZ0x5OGdXbDlwS3pFZ1BTQmFYMmtnWGlCV1gybGNiaUFnSUNBZ0lGcHBJRDBnZUc5eUtGcHBMQ0JXYVNsY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCVGRHOXlaU0IwYUdVZ2RtRnNkV1VnYjJZZ1RGTkNLRlpmYVNsY2JpQWdJQ0JzYzJKZlZta2dQU0FvVm1sYk0xMGdKaUF4S1NBaFBUMGdNRnh1WEc0Z0lDQWdMeThnVmw5cEt6RWdQU0JXWDJrZ1BqNGdNVnh1SUNBZ0lHWnZjaUFvYWlBOUlETTdJR29nUGlBd095QnFMUzBwSUh0Y2JpQWdJQ0FnSUZacFcycGRJRDBnS0ZacFcycGRJRDQrUGlBeEtTQjhJQ2dvVm1sYmFpQXRJREZkSUNZZ01Ta2dQRHdnTXpFcFhHNGdJQ0FnZlZ4dUlDQWdJRlpwV3pCZElEMGdWbWxiTUYwZ1BqNCtJREZjYmx4dUlDQWdJQzh2SUVsbUlFeFRRaWhXWDJrcElHbHpJREVzSUZaZmFTc3hJRDBnS0ZaZmFTQStQaUF4S1NCZUlGSmNiaUFnSUNCcFppQW9iSE5pWDFacEtTQjdYRzRnSUNBZ0lDQldhVnN3WFNBOUlGWnBXekJkSUY0Z0tEQjRaVEVnUER3Z01qUXBYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lIUm9hWE11YzNSaGRHVWdQU0JtY205dFFYSnlZWGtvV21rcFhHNTlYRzVIU0VGVFNDNXdjbTkwYjNSNWNHVXVkWEJrWVhSbElEMGdablZ1WTNScGIyNGdLR0oxWmlrZ2UxeHVJQ0IwYUdsekxtTmhZMmhsSUQwZ1FuVm1abVZ5TG1OdmJtTmhkQ2hiZEdocGN5NWpZV05vWlN3Z1luVm1YU2xjYmlBZ2RtRnlJR05vZFc1clhHNGdJSGRvYVd4bElDaDBhR2x6TG1OaFkyaGxMbXhsYm1kMGFDQStQU0F4TmlrZ2UxeHVJQ0FnSUdOb2RXNXJJRDBnZEdocGN5NWpZV05vWlM1emJHbGpaU2d3TENBeE5pbGNiaUFnSUNCMGFHbHpMbU5oWTJobElEMGdkR2hwY3k1allXTm9aUzV6YkdsalpTZ3hOaWxjYmlBZ0lDQjBhR2x6TG1kb1lYTm9LR05vZFc1cktWeHVJQ0I5WEc1OVhHNUhTRUZUU0M1d2NtOTBiM1I1Y0dVdVptbHVZV3dnUFNCbWRXNWpkR2x2YmlBb1lXSnNMQ0JpYkNrZ2UxeHVJQ0JwWmlBb2RHaHBjeTVqWVdOb1pTNXNaVzVuZEdncElIdGNiaUFnSUNCMGFHbHpMbWRvWVhOb0tFSjFabVpsY2k1amIyNWpZWFFvVzNSb2FYTXVZMkZqYUdVc0lIcGxjbTl6WFN3Z01UWXBLVnh1SUNCOVhHNGdJSFJvYVhNdVoyaGhjMmdvWm5KdmJVRnljbUY1S0Z0Y2JpQWdJQ0F3TENCaFltd3NYRzRnSUNBZ01Dd2dZbXhjYmlBZ1hTa3BYRzRnSUhKbGRIVnliaUIwYUdsekxuTjBZWFJsWEc1OVhHNWNibVoxYm1OMGFXOXVJSFJ2UVhKeVlYa2dLR0oxWmlrZ2UxeHVJQ0J5WlhSMWNtNGdXMXh1SUNBZ0lHSjFaaTV5WldGa1ZVbHVkRE15UWtVb01Da3NYRzRnSUNBZ1luVm1MbkpsWVdSVlNXNTBNekpDUlNnMEtTeGNiaUFnSUNCaWRXWXVjbVZoWkZWSmJuUXpNa0pGS0RncExGeHVJQ0FnSUdKMVppNXlaV0ZrVlVsdWRETXlRa1VvTVRJcFhHNGdJRjFjYm4xY2JtWjFibU4wYVc5dUlHWnliMjFCY25KaGVTQW9iM1YwS1NCN1hHNGdJRzkxZENBOUlHOTFkQzV0WVhBb1ptbDRkWEJmZFdsdWRETXlLVnh1SUNCMllYSWdZblZtSUQwZ2JtVjNJRUoxWm1abGNpZ3hOaWxjYmlBZ1luVm1MbmR5YVhSbFZVbHVkRE15UWtVb2IzVjBXekJkTENBd0tWeHVJQ0JpZFdZdWQzSnBkR1ZWU1c1ME16SkNSU2h2ZFhSYk1WMHNJRFFwWEc0Z0lHSjFaaTUzY21sMFpWVkpiblF6TWtKRktHOTFkRnN5WFN3Z09DbGNiaUFnWW5WbUxuZHlhWFJsVlVsdWRETXlRa1VvYjNWMFd6TmRMQ0F4TWlsY2JpQWdjbVYwZFhKdUlHSjFabHh1ZlZ4dWRtRnlJSFZwYm5SZmJXRjRJRDBnVFdGMGFDNXdiM2NvTWl3Z016SXBYRzVtZFc1amRHbHZiaUJtYVhoMWNGOTFhVzUwTXpJZ0tIZ3BJSHRjYmlBZ2RtRnlJSEpsZEN3Z2VGOXdiM05jYmlBZ2NtVjBJRDBnZUNBK0lIVnBiblJmYldGNElIeDhJSGdnUENBd0lEOGdLSGhmY0c5eklEMGdUV0YwYUM1aFluTW9lQ2tnSlNCMWFXNTBYMjFoZUN3Z2VDQThJREFnUHlCMWFXNTBYMjFoZUNBdElIaGZjRzl6SURvZ2VGOXdiM01wSURvZ2VGeHVJQ0J5WlhSMWNtNGdjbVYwWEc1OVhHNW1kVzVqZEdsdmJpQjRiM0lnS0dFc0lHSXBJSHRjYmlBZ2NtVjBkWEp1SUZ0Y2JpQWdJQ0JoV3pCZElGNGdZbHN3WFN4Y2JpQWdJQ0JoV3pGZElGNGdZbHN4WFN4Y2JpQWdJQ0JoV3pKZElGNGdZbHN5WFN4Y2JpQWdJQ0JoV3pOZElGNGdZbHN6WFZ4dUlDQmRYRzU5WEc0aVhYMD0iLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG4vLyBiYXNlZCBvbiB0aGUgYWVzIGltcGxpbWVudGF0aW9uIGluIHRyaXBsZSBzZWNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9rZXliYXNlL3RyaXBsZXNlY1xuXG4vLyB3aGljaCBpcyBpbiB0dXJuIGJhc2VkIG9uIHRoZSBvbmUgZnJvbSBjcnlwdG8tanNcbi8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL1xuXG52YXIgdWludF9tYXggPSBNYXRoLnBvdygyLCAzMilcbmZ1bmN0aW9uIGZpeHVwX3VpbnQzMiAoeCkge1xuICB2YXIgcmV0LCB4X3Bvc1xuICByZXQgPSB4ID4gdWludF9tYXggfHwgeCA8IDAgPyAoeF9wb3MgPSBNYXRoLmFicyh4KSAlIHVpbnRfbWF4LCB4IDwgMCA/IHVpbnRfbWF4IC0geF9wb3MgOiB4X3BvcykgOiB4XG4gIHJldHVybiByZXRcbn1cbmZ1bmN0aW9uIHNjcnViX3ZlYyAodikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHYubGVuZ3RoOyB2KyspIHtcbiAgICB2W2ldID0gMFxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBHbG9iYWwgKCkge1xuICB0aGlzLlNCT1ggPSBbXVxuICB0aGlzLklOVl9TQk9YID0gW11cbiAgdGhpcy5TVUJfTUlYID0gW1tdLCBbXSwgW10sIFtdXVxuICB0aGlzLklOVl9TVUJfTUlYID0gW1tdLCBbXSwgW10sIFtdXVxuICB0aGlzLmluaXQoKVxuICB0aGlzLlJDT04gPSBbMHgwMCwgMHgwMSwgMHgwMiwgMHgwNCwgMHgwOCwgMHgxMCwgMHgyMCwgMHg0MCwgMHg4MCwgMHgxYiwgMHgzNl1cbn1cblxuR2xvYmFsLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZCwgaSwgc3gsIHQsIHgsIHgyLCB4NCwgeDgsIHhpLCBfaVxuICBkID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX2ksIF9yZXN1bHRzXG4gICAgX3Jlc3VsdHMgPSBbXVxuICAgIGZvciAoaSA9IF9pID0gMDsgX2kgPCAyNTY7IGkgPSArK19pKSB7XG4gICAgICBpZiAoaSA8IDEyOCkge1xuICAgICAgICBfcmVzdWx0cy5wdXNoKGkgPDwgMSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9yZXN1bHRzLnB1c2goKGkgPDwgMSkgXiAweDExYilcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIF9yZXN1bHRzXG4gIH0pKClcbiAgeCA9IDBcbiAgeGkgPSAwXG4gIGZvciAoaSA9IF9pID0gMDsgX2kgPCAyNTY7IGkgPSArK19pKSB7XG4gICAgc3ggPSB4aSBeICh4aSA8PCAxKSBeICh4aSA8PCAyKSBeICh4aSA8PCAzKSBeICh4aSA8PCA0KVxuICAgIHN4ID0gKHN4ID4+PiA4KSBeIChzeCAmIDB4ZmYpIF4gMHg2M1xuICAgIHRoaXMuU0JPWFt4XSA9IHN4XG4gICAgdGhpcy5JTlZfU0JPWFtzeF0gPSB4XG4gICAgeDIgPSBkW3hdXG4gICAgeDQgPSBkW3gyXVxuICAgIHg4ID0gZFt4NF1cbiAgICB0ID0gKGRbc3hdICogMHgxMDEpIF4gKHN4ICogMHgxMDEwMTAwKVxuICAgIHRoaXMuU1VCX01JWFswXVt4XSA9ICh0IDw8IDI0KSB8ICh0ID4+PiA4KVxuICAgIHRoaXMuU1VCX01JWFsxXVt4XSA9ICh0IDw8IDE2KSB8ICh0ID4+PiAxNilcbiAgICB0aGlzLlNVQl9NSVhbMl1beF0gPSAodCA8PCA4KSB8ICh0ID4+PiAyNClcbiAgICB0aGlzLlNVQl9NSVhbM11beF0gPSB0XG4gICAgdCA9ICh4OCAqIDB4MTAxMDEwMSkgXiAoeDQgKiAweDEwMDAxKSBeICh4MiAqIDB4MTAxKSBeICh4ICogMHgxMDEwMTAwKVxuICAgIHRoaXMuSU5WX1NVQl9NSVhbMF1bc3hdID0gKHQgPDwgMjQpIHwgKHQgPj4+IDgpXG4gICAgdGhpcy5JTlZfU1VCX01JWFsxXVtzeF0gPSAodCA8PCAxNikgfCAodCA+Pj4gMTYpXG4gICAgdGhpcy5JTlZfU1VCX01JWFsyXVtzeF0gPSAodCA8PCA4KSB8ICh0ID4+PiAyNClcbiAgICB0aGlzLklOVl9TVUJfTUlYWzNdW3N4XSA9IHRcbiAgICBpZiAoeCA9PT0gMCkge1xuICAgICAgeCA9IHhpID0gMVxuICAgIH0gZWxzZSB7XG4gICAgICB4ID0geDIgXiBkW2RbZFt4OCBeIHgyXV1dXG4gICAgICB4aSBePSBkW2RbeGldXVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG52YXIgRyA9IG5ldyBHbG9iYWwoKVxuXG5BRVMuYmxvY2tTaXplID0gNCAqIDRcblxuQUVTLnByb3RvdHlwZS5ibG9ja1NpemUgPSBBRVMuYmxvY2tTaXplXG5cbkFFUy5rZXlTaXplID0gMjU2IC8gOFxuXG5BRVMucHJvdG90eXBlLmtleVNpemUgPSBBRVMua2V5U2l6ZVxuXG5mdW5jdGlvbiBidWZmZXJUb0FycmF5IChidWYpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGggLyA0XG4gIHZhciBvdXQgPSBuZXcgQXJyYXkobGVuKVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBidWYucmVhZFVJbnQzMkJFKGkgKiA0KVxuICB9XG4gIHJldHVybiBvdXRcbn1cbmZ1bmN0aW9uIEFFUyAoa2V5KSB7XG4gIHRoaXMuX2tleSA9IGJ1ZmZlclRvQXJyYXkoa2V5KVxuICB0aGlzLl9kb1Jlc2V0KClcbn1cblxuQUVTLnByb3RvdHlwZS5fZG9SZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGludktzUm93LCBrZXlTaXplLCBrZXlXb3Jkcywga3NSb3csIGtzUm93cywgdFxuICBrZXlXb3JkcyA9IHRoaXMuX2tleVxuICBrZXlTaXplID0ga2V5V29yZHMubGVuZ3RoXG4gIHRoaXMuX25Sb3VuZHMgPSBrZXlTaXplICsgNlxuICBrc1Jvd3MgPSAodGhpcy5fblJvdW5kcyArIDEpICogNFxuICB0aGlzLl9rZXlTY2hlZHVsZSA9IFtdXG4gIGZvciAoa3NSb3cgPSAwOyBrc1JvdyA8IGtzUm93czsga3NSb3crKykge1xuICAgIHRoaXMuX2tleVNjaGVkdWxlW2tzUm93XSA9IGtzUm93IDwga2V5U2l6ZSA/IGtleVdvcmRzW2tzUm93XSA6ICh0ID0gdGhpcy5fa2V5U2NoZWR1bGVba3NSb3cgLSAxXSwgKGtzUm93ICUga2V5U2l6ZSkgPT09IDAgPyAodCA9ICh0IDw8IDgpIHwgKHQgPj4+IDI0KSwgdCA9IChHLlNCT1hbdCA+Pj4gMjRdIDw8IDI0KSB8IChHLlNCT1hbKHQgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChHLlNCT1hbKHQgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBHLlNCT1hbdCAmIDB4ZmZdLCB0IF49IEcuUkNPTlsoa3NSb3cgLyBrZXlTaXplKSB8IDBdIDw8IDI0KSA6IGtleVNpemUgPiA2ICYmIGtzUm93ICUga2V5U2l6ZSA9PT0gNCA/IHQgPSAoRy5TQk9YW3QgPj4+IDI0XSA8PCAyNCkgfCAoRy5TQk9YWyh0ID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoRy5TQk9YWyh0ID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgRy5TQk9YW3QgJiAweGZmXSA6IHZvaWQgMCwgdGhpcy5fa2V5U2NoZWR1bGVba3NSb3cgLSBrZXlTaXplXSBeIHQpXG4gIH1cbiAgdGhpcy5faW52S2V5U2NoZWR1bGUgPSBbXVxuICBmb3IgKGludktzUm93ID0gMDsgaW52S3NSb3cgPCBrc1Jvd3M7IGludktzUm93KyspIHtcbiAgICBrc1JvdyA9IGtzUm93cyAtIGludktzUm93XG4gICAgdCA9IHRoaXMuX2tleVNjaGVkdWxlW2tzUm93IC0gKGludktzUm93ICUgNCA/IDAgOiA0KV1cbiAgICB0aGlzLl9pbnZLZXlTY2hlZHVsZVtpbnZLc1Jvd10gPSBpbnZLc1JvdyA8IDQgfHwga3NSb3cgPD0gNCA/IHQgOiBHLklOVl9TVUJfTUlYWzBdW0cuU0JPWFt0ID4+PiAyNF1dIF4gRy5JTlZfU1VCX01JWFsxXVtHLlNCT1hbKHQgPj4+IDE2KSAmIDB4ZmZdXSBeIEcuSU5WX1NVQl9NSVhbMl1bRy5TQk9YWyh0ID4+PiA4KSAmIDB4ZmZdXSBeIEcuSU5WX1NVQl9NSVhbM11bRy5TQk9YW3QgJiAweGZmXV1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5BRVMucHJvdG90eXBlLmVuY3J5cHRCbG9jayA9IGZ1bmN0aW9uIChNKSB7XG4gIE0gPSBidWZmZXJUb0FycmF5KG5ldyBCdWZmZXIoTSkpXG4gIHZhciBvdXQgPSB0aGlzLl9kb0NyeXB0QmxvY2soTSwgdGhpcy5fa2V5U2NoZWR1bGUsIEcuU1VCX01JWCwgRy5TQk9YKVxuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcigxNilcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzBdLCAwKVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMV0sIDQpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsyXSwgOClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzNdLCAxMilcbiAgcmV0dXJuIGJ1ZlxufVxuXG5BRVMucHJvdG90eXBlLmRlY3J5cHRCbG9jayA9IGZ1bmN0aW9uIChNKSB7XG4gIE0gPSBidWZmZXJUb0FycmF5KG5ldyBCdWZmZXIoTSkpXG4gIHZhciB0ZW1wID0gW01bM10sIE1bMV1dXG4gIE1bMV0gPSB0ZW1wWzBdXG4gIE1bM10gPSB0ZW1wWzFdXG4gIHZhciBvdXQgPSB0aGlzLl9kb0NyeXB0QmxvY2soTSwgdGhpcy5faW52S2V5U2NoZWR1bGUsIEcuSU5WX1NVQl9NSVgsIEcuSU5WX1NCT1gpXG4gIHZhciBidWYgPSBuZXcgQnVmZmVyKDE2KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMF0sIDApXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFszXSwgNClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzJdLCA4KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMV0sIDEyKVxuICByZXR1cm4gYnVmXG59XG5cbkFFUy5wcm90b3R5cGUuc2NydWIgPSBmdW5jdGlvbiAoKSB7XG4gIHNjcnViX3ZlYyh0aGlzLl9rZXlTY2hlZHVsZSlcbiAgc2NydWJfdmVjKHRoaXMuX2ludktleVNjaGVkdWxlKVxuICBzY3J1Yl92ZWModGhpcy5fa2V5KVxufVxuXG5BRVMucHJvdG90eXBlLl9kb0NyeXB0QmxvY2sgPSBmdW5jdGlvbiAoTSwga2V5U2NoZWR1bGUsIFNVQl9NSVgsIFNCT1gpIHtcbiAgdmFyIGtzUm93LCBzMCwgczEsIHMyLCBzMywgdDAsIHQxLCB0MiwgdDNcblxuICBzMCA9IE1bMF0gXiBrZXlTY2hlZHVsZVswXVxuICBzMSA9IE1bMV0gXiBrZXlTY2hlZHVsZVsxXVxuICBzMiA9IE1bMl0gXiBrZXlTY2hlZHVsZVsyXVxuICBzMyA9IE1bM10gXiBrZXlTY2hlZHVsZVszXVxuICBrc1JvdyA9IDRcbiAgZm9yICh2YXIgcm91bmQgPSAxOyByb3VuZCA8IHRoaXMuX25Sb3VuZHM7IHJvdW5kKyspIHtcbiAgICB0MCA9IFNVQl9NSVhbMF1bczAgPj4+IDI0XSBeIFNVQl9NSVhbMV1bKHMxID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhbMl1bKHMyID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWFszXVtzMyAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICB0MSA9IFNVQl9NSVhbMF1bczEgPj4+IDI0XSBeIFNVQl9NSVhbMV1bKHMyID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhbMl1bKHMzID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWFszXVtzMCAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICB0MiA9IFNVQl9NSVhbMF1bczIgPj4+IDI0XSBeIFNVQl9NSVhbMV1bKHMzID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhbMl1bKHMwID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWFszXVtzMSAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICB0MyA9IFNVQl9NSVhbMF1bczMgPj4+IDI0XSBeIFNVQl9NSVhbMV1bKHMwID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhbMl1bKHMxID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWFszXVtzMiAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICBzMCA9IHQwXG4gICAgczEgPSB0MVxuICAgIHMyID0gdDJcbiAgICBzMyA9IHQzXG4gIH1cbiAgdDAgPSAoKFNCT1hbczAgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczEgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMiA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczMgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICB0MSA9ICgoU0JPWFtzMSA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMiA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMzID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMCAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gIHQyID0gKChTQk9YW3MyID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMzID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczAgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MxICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgdDMgPSAoKFNCT1hbczMgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczAgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMSA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczIgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICByZXR1cm4gW1xuICAgIGZpeHVwX3VpbnQzMih0MCksXG4gICAgZml4dXBfdWludDMyKHQxKSxcbiAgICBmaXh1cF91aW50MzIodDIpLFxuICAgIGZpeHVwX3VpbnQzMih0MylcbiAgXVxufVxuXG5leHBvcnRzLkFFUyA9IEFFU1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdmNIVmliR2xqTFdWdVkzSjVjSFF2Ym05a1pWOXRiMlIxYkdWekwzQmhjbk5sTFdGemJqRXZibTlrWlY5dGIyUjFiR1Z6TDJKeWIzZHpaWEpwWm5rdFlXVnpMMkZsY3k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaTh2SUdKaGMyVmtJRzl1SUhSb1pTQmhaWE1nYVcxd2JHbHRaVzUwWVhScGIyNGdhVzRnZEhKcGNHeGxJSE5sWTF4dUx5OGdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMMnRsZVdKaGMyVXZkSEpwY0d4bGMyVmpYRzVjYmk4dklIZG9hV05vSUdseklHbHVJSFIxY200Z1ltRnpaV1FnYjI0Z2RHaGxJRzl1WlNCbWNtOXRJR055ZVhCMGJ5MXFjMXh1THk4Z2FIUjBjSE02THk5amIyUmxMbWR2YjJkc1pTNWpiMjB2Y0M5amNubHdkRzh0YW5NdlhHNWNiblpoY2lCMWFXNTBYMjFoZUNBOUlFMWhkR2d1Y0c5M0tESXNJRE15S1Z4dVpuVnVZM1JwYjI0Z1ptbDRkWEJmZFdsdWRETXlJQ2g0S1NCN1hHNGdJSFpoY2lCeVpYUXNJSGhmY0c5elhHNGdJSEpsZENBOUlIZ2dQaUIxYVc1MFgyMWhlQ0I4ZkNCNElEd2dNQ0EvSUNoNFgzQnZjeUE5SUUxaGRHZ3VZV0p6S0hncElDVWdkV2x1ZEY5dFlYZ3NJSGdnUENBd0lEOGdkV2x1ZEY5dFlYZ2dMU0I0WDNCdmN5QTZJSGhmY0c5ektTQTZJSGhjYmlBZ2NtVjBkWEp1SUhKbGRGeHVmVnh1Wm5WdVkzUnBiMjRnYzJOeWRXSmZkbVZqSUNoMktTQjdYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2RpNXNaVzVuZEdnN0lIWXJLeWtnZTF4dUlDQWdJSFpiYVYwZ1BTQXdYRzRnSUgxY2JpQWdjbVYwZFhKdUlHWmhiSE5sWEc1OVhHNWNibVoxYm1OMGFXOXVJRWRzYjJKaGJDQW9LU0I3WEc0Z0lIUm9hWE11VTBKUFdDQTlJRnRkWEc0Z0lIUm9hWE11U1U1V1gxTkNUMWdnUFNCYlhWeHVJQ0IwYUdsekxsTlZRbDlOU1ZnZ1BTQmJXMTBzSUZ0ZExDQmJYU3dnVzExZFhHNGdJSFJvYVhNdVNVNVdYMU5WUWw5TlNWZ2dQU0JiVzEwc0lGdGRMQ0JiWFN3Z1cxMWRYRzRnSUhSb2FYTXVhVzVwZENncFhHNGdJSFJvYVhNdVVrTlBUaUE5SUZzd2VEQXdMQ0F3ZURBeExDQXdlREF5TENBd2VEQTBMQ0F3ZURBNExDQXdlREV3TENBd2VESXdMQ0F3ZURRd0xDQXdlRGd3TENBd2VERmlMQ0F3ZURNMlhWeHVmVnh1WEc1SGJHOWlZV3d1Y0hKdmRHOTBlWEJsTG1sdWFYUWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJSFpoY2lCa0xDQnBMQ0J6ZUN3Z2RDd2dlQ3dnZURJc0lIZzBMQ0I0T0N3Z2VHa3NJRjlwWEc0Z0lHUWdQU0FvWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUhaaGNpQmZhU3dnWDNKbGMzVnNkSE5jYmlBZ0lDQmZjbVZ6ZFd4MGN5QTlJRnRkWEc0Z0lDQWdabTl5SUNocElEMGdYMmtnUFNBd095QmZhU0E4SURJMU5qc2dhU0E5SUNzclgya3BJSHRjYmlBZ0lDQWdJR2xtSUNocElEd2dNVEk0S1NCN1hHNGdJQ0FnSUNBZ0lGOXlaWE4xYkhSekxuQjFjMmdvYVNBOFBDQXhLVnh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdYM0psYzNWc2RITXVjSFZ6YUNnb2FTQThQQ0F4S1NCZUlEQjRNVEZpS1Z4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1gzSmxjM1ZzZEhOY2JpQWdmU2tvS1Z4dUlDQjRJRDBnTUZ4dUlDQjRhU0E5SURCY2JpQWdabTl5SUNocElEMGdYMmtnUFNBd095QmZhU0E4SURJMU5qc2dhU0E5SUNzclgya3BJSHRjYmlBZ0lDQnplQ0E5SUhocElGNGdLSGhwSUR3OElERXBJRjRnS0hocElEdzhJRElwSUY0Z0tIaHBJRHc4SURNcElGNGdLSGhwSUR3OElEUXBYRzRnSUNBZ2MzZ2dQU0FvYzNnZ1BqNCtJRGdwSUY0Z0tITjRJQ1lnTUhobVppa2dYaUF3ZURZelhHNGdJQ0FnZEdocGN5NVRRazlZVzNoZElEMGdjM2hjYmlBZ0lDQjBhR2x6TGtsT1ZsOVRRazlZVzNONFhTQTlJSGhjYmlBZ0lDQjRNaUE5SUdSYmVGMWNiaUFnSUNCNE5DQTlJR1JiZURKZFhHNGdJQ0FnZURnZ1BTQmtXM2cwWFZ4dUlDQWdJSFFnUFNBb1pGdHplRjBnS2lBd2VERXdNU2tnWGlBb2MzZ2dLaUF3ZURFd01UQXhNREFwWEc0Z0lDQWdkR2hwY3k1VFZVSmZUVWxZV3pCZFczaGRJRDBnS0hRZ1BEd2dNalFwSUh3Z0tIUWdQajQrSURncFhHNGdJQ0FnZEdocGN5NVRWVUpmVFVsWVd6RmRXM2hkSUQwZ0tIUWdQRHdnTVRZcElId2dLSFFnUGo0K0lERTJLVnh1SUNBZ0lIUm9hWE11VTFWQ1gwMUpXRnN5WFZ0NFhTQTlJQ2gwSUR3OElEZ3BJSHdnS0hRZ1BqNCtJREkwS1Z4dUlDQWdJSFJvYVhNdVUxVkNYMDFKV0ZzelhWdDRYU0E5SUhSY2JpQWdJQ0IwSUQwZ0tIZzRJQ29nTUhneE1ERXdNVEF4S1NCZUlDaDROQ0FxSURCNE1UQXdNREVwSUY0Z0tIZ3lJQ29nTUhneE1ERXBJRjRnS0hnZ0tpQXdlREV3TVRBeE1EQXBYRzRnSUNBZ2RHaHBjeTVKVGxaZlUxVkNYMDFKV0Zzd1hWdHplRjBnUFNBb2RDQThQQ0F5TkNrZ2ZDQW9kQ0ErUGo0Z09DbGNiaUFnSUNCMGFHbHpMa2xPVmw5VFZVSmZUVWxZV3pGZFczTjRYU0E5SUNoMElEdzhJREUyS1NCOElDaDBJRDQrUGlBeE5pbGNiaUFnSUNCMGFHbHpMa2xPVmw5VFZVSmZUVWxZV3pKZFczTjRYU0E5SUNoMElEdzhJRGdwSUh3Z0tIUWdQajQrSURJMEtWeHVJQ0FnSUhSb2FYTXVTVTVXWDFOVlFsOU5TVmhiTTExYmMzaGRJRDBnZEZ4dUlDQWdJR2xtSUNoNElEMDlQU0F3S1NCN1hHNGdJQ0FnSUNCNElEMGdlR2tnUFNBeFhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSGdnUFNCNE1pQmVJR1JiWkZ0a1czZzRJRjRnZURKZFhWMWNiaUFnSUNBZ0lIaHBJRjQ5SUdSYlpGdDRhVjFkWEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQjBjblZsWEc1OVhHNWNiblpoY2lCSElEMGdibVYzSUVkc2IySmhiQ2dwWEc1Y2JrRkZVeTVpYkc5amExTnBlbVVnUFNBMElDb2dORnh1WEc1QlJWTXVjSEp2ZEc5MGVYQmxMbUpzYjJOclUybDZaU0E5SUVGRlV5NWliRzlqYTFOcGVtVmNibHh1UVVWVExtdGxlVk5wZW1VZ1BTQXlOVFlnTHlBNFhHNWNia0ZGVXk1d2NtOTBiM1I1Y0dVdWEyVjVVMmw2WlNBOUlFRkZVeTVyWlhsVGFYcGxYRzVjYm1aMWJtTjBhVzl1SUdKMVptWmxjbFJ2UVhKeVlYa2dLR0oxWmlrZ2UxeHVJQ0IyWVhJZ2JHVnVJRDBnWW5WbUxteGxibWQwYUNBdklEUmNiaUFnZG1GeUlHOTFkQ0E5SUc1bGR5QkJjbkpoZVNoc1pXNHBYRzRnSUhaaGNpQnBJRDBnTFRGY2JpQWdkMmhwYkdVZ0tDc3JhU0E4SUd4bGJpa2dlMXh1SUNBZ0lHOTFkRnRwWFNBOUlHSjFaaTV5WldGa1ZVbHVkRE15UWtVb2FTQXFJRFFwWEc0Z0lIMWNiaUFnY21WMGRYSnVJRzkxZEZ4dWZWeHVablZ1WTNScGIyNGdRVVZUSUNoclpYa3BJSHRjYmlBZ2RHaHBjeTVmYTJWNUlEMGdZblZtWm1WeVZHOUJjbkpoZVNoclpYa3BYRzRnSUhSb2FYTXVYMlJ2VW1WelpYUW9LVnh1ZlZ4dVhHNUJSVk11Y0hKdmRHOTBlWEJsTGw5a2IxSmxjMlYwSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNCMllYSWdhVzUyUzNOU2IzY3NJR3RsZVZOcGVtVXNJR3RsZVZkdmNtUnpMQ0JyYzFKdmR5d2dhM05TYjNkekxDQjBYRzRnSUd0bGVWZHZjbVJ6SUQwZ2RHaHBjeTVmYTJWNVhHNGdJR3RsZVZOcGVtVWdQU0JyWlhsWGIzSmtjeTVzWlc1bmRHaGNiaUFnZEdocGN5NWZibEp2ZFc1a2N5QTlJR3RsZVZOcGVtVWdLeUEyWEc0Z0lHdHpVbTkzY3lBOUlDaDBhR2x6TGw5dVVtOTFibVJ6SUNzZ01Ta2dLaUEwWEc0Z0lIUm9hWE11WDJ0bGVWTmphR1ZrZFd4bElEMGdXMTFjYmlBZ1ptOXlJQ2hyYzFKdmR5QTlJREE3SUd0elVtOTNJRHdnYTNOU2IzZHpPeUJyYzFKdmR5c3JLU0I3WEc0Z0lDQWdkR2hwY3k1ZmEyVjVVMk5vWldSMWJHVmJhM05TYjNkZElEMGdhM05TYjNjZ1BDQnJaWGxUYVhwbElEOGdhMlY1VjI5eVpITmJhM05TYjNkZElEb2dLSFFnUFNCMGFHbHpMbDlyWlhsVFkyaGxaSFZzWlZ0cmMxSnZkeUF0SURGZExDQW9hM05TYjNjZ0pTQnJaWGxUYVhwbEtTQTlQVDBnTUNBL0lDaDBJRDBnS0hRZ1BEd2dPQ2tnZkNBb2RDQStQajRnTWpRcExDQjBJRDBnS0VjdVUwSlBXRnQwSUQ0K1BpQXlORjBnUER3Z01qUXBJSHdnS0VjdVUwSlBXRnNvZENBK1BqNGdNVFlwSUNZZ01IaG1abDBnUER3Z01UWXBJSHdnS0VjdVUwSlBXRnNvZENBK1BqNGdPQ2tnSmlBd2VHWm1YU0E4UENBNEtTQjhJRWN1VTBKUFdGdDBJQ1lnTUhobVpsMHNJSFFnWGowZ1J5NVNRMDlPV3locmMxSnZkeUF2SUd0bGVWTnBlbVVwSUh3Z01GMGdQRHdnTWpRcElEb2dhMlY1VTJsNlpTQStJRFlnSmlZZ2EzTlNiM2NnSlNCclpYbFRhWHBsSUQwOVBTQTBJRDhnZENBOUlDaEhMbE5DVDFoYmRDQStQajRnTWpSZElEdzhJREkwS1NCOElDaEhMbE5DVDFoYktIUWdQajQrSURFMktTQW1JREI0Wm1aZElEdzhJREUyS1NCOElDaEhMbE5DVDFoYktIUWdQajQrSURncElDWWdNSGhtWmwwZ1BEd2dPQ2tnZkNCSExsTkNUMWhiZENBbUlEQjRabVpkSURvZ2RtOXBaQ0F3TENCMGFHbHpMbDlyWlhsVFkyaGxaSFZzWlZ0cmMxSnZkeUF0SUd0bGVWTnBlbVZkSUY0Z2RDbGNiaUFnZlZ4dUlDQjBhR2x6TGw5cGJuWkxaWGxUWTJobFpIVnNaU0E5SUZ0ZFhHNGdJR1p2Y2lBb2FXNTJTM05TYjNjZ1BTQXdPeUJwYm5aTGMxSnZkeUE4SUd0elVtOTNjenNnYVc1MlMzTlNiM2NyS3lrZ2UxeHVJQ0FnSUd0elVtOTNJRDBnYTNOU2IzZHpJQzBnYVc1MlMzTlNiM2RjYmlBZ0lDQjBJRDBnZEdocGN5NWZhMlY1VTJOb1pXUjFiR1ZiYTNOU2IzY2dMU0FvYVc1MlMzTlNiM2NnSlNBMElEOGdNQ0E2SURRcFhWeHVJQ0FnSUhSb2FYTXVYMmx1ZGt0bGVWTmphR1ZrZFd4bFcybHVka3R6VW05M1hTQTlJR2x1ZGt0elVtOTNJRHdnTkNCOGZDQnJjMUp2ZHlBOFBTQTBJRDhnZENBNklFY3VTVTVXWDFOVlFsOU5TVmhiTUYxYlJ5NVRRazlZVzNRZ1BqNCtJREkwWFYwZ1hpQkhMa2xPVmw5VFZVSmZUVWxZV3pGZFcwY3VVMEpQV0Zzb2RDQStQajRnTVRZcElDWWdNSGhtWmwxZElGNGdSeTVKVGxaZlUxVkNYMDFKV0ZzeVhWdEhMbE5DVDFoYktIUWdQajQrSURncElDWWdNSGhtWmwxZElGNGdSeTVKVGxaZlUxVkNYMDFKV0ZzelhWdEhMbE5DVDFoYmRDQW1JREI0Wm1aZFhWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCMGNuVmxYRzU5WEc1Y2JrRkZVeTV3Y205MGIzUjVjR1V1Wlc1amNubHdkRUpzYjJOcklEMGdablZ1WTNScGIyNGdLRTBwSUh0Y2JpQWdUU0E5SUdKMVptWmxjbFJ2UVhKeVlYa29ibVYzSUVKMVptWmxjaWhOS1NsY2JpQWdkbUZ5SUc5MWRDQTlJSFJvYVhNdVgyUnZRM0o1Y0hSQ2JHOWpheWhOTENCMGFHbHpMbDlyWlhsVFkyaGxaSFZzWlN3Z1J5NVRWVUpmVFVsWUxDQkhMbE5DVDFncFhHNGdJSFpoY2lCaWRXWWdQU0J1WlhjZ1FuVm1abVZ5S0RFMktWeHVJQ0JpZFdZdWQzSnBkR1ZWU1c1ME16SkNSU2h2ZFhSYk1GMHNJREFwWEc0Z0lHSjFaaTUzY21sMFpWVkpiblF6TWtKRktHOTFkRnN4WFN3Z05DbGNiaUFnWW5WbUxuZHlhWFJsVlVsdWRETXlRa1VvYjNWMFd6SmRMQ0E0S1Z4dUlDQmlkV1l1ZDNKcGRHVlZTVzUwTXpKQ1JTaHZkWFJiTTEwc0lERXlLVnh1SUNCeVpYUjFjbTRnWW5WbVhHNTlYRzVjYmtGRlV5NXdjbTkwYjNSNWNHVXVaR1ZqY25sd2RFSnNiMk5ySUQwZ1puVnVZM1JwYjI0Z0tFMHBJSHRjYmlBZ1RTQTlJR0oxWm1abGNsUnZRWEp5WVhrb2JtVjNJRUoxWm1abGNpaE5LU2xjYmlBZ2RtRnlJSFJsYlhBZ1BTQmJUVnN6WFN3Z1RWc3hYVjFjYmlBZ1RWc3hYU0E5SUhSbGJYQmJNRjFjYmlBZ1RWc3pYU0E5SUhSbGJYQmJNVjFjYmlBZ2RtRnlJRzkxZENBOUlIUm9hWE11WDJSdlEzSjVjSFJDYkc5amF5aE5MQ0IwYUdsekxsOXBiblpMWlhsVFkyaGxaSFZzWlN3Z1J5NUpUbFpmVTFWQ1gwMUpXQ3dnUnk1SlRsWmZVMEpQV0NsY2JpQWdkbUZ5SUdKMVppQTlJRzVsZHlCQ2RXWm1aWElvTVRZcFhHNGdJR0oxWmk1M2NtbDBaVlZKYm5Rek1rSkZLRzkxZEZzd1hTd2dNQ2xjYmlBZ1luVm1MbmR5YVhSbFZVbHVkRE15UWtVb2IzVjBXek5kTENBMEtWeHVJQ0JpZFdZdWQzSnBkR1ZWU1c1ME16SkNSU2h2ZFhSYk1sMHNJRGdwWEc0Z0lHSjFaaTUzY21sMFpWVkpiblF6TWtKRktHOTFkRnN4WFN3Z01USXBYRzRnSUhKbGRIVnliaUJpZFdaY2JuMWNibHh1UVVWVExuQnliM1J2ZEhsd1pTNXpZM0oxWWlBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ2MyTnlkV0pmZG1WaktIUm9hWE11WDJ0bGVWTmphR1ZrZFd4bEtWeHVJQ0J6WTNKMVlsOTJaV01vZEdocGN5NWZhVzUyUzJWNVUyTm9aV1IxYkdVcFhHNGdJSE5qY25WaVgzWmxZeWgwYUdsekxsOXJaWGtwWEc1OVhHNWNia0ZGVXk1d2NtOTBiM1I1Y0dVdVgyUnZRM0o1Y0hSQ2JHOWpheUE5SUdaMWJtTjBhVzl1SUNoTkxDQnJaWGxUWTJobFpIVnNaU3dnVTFWQ1gwMUpXQ3dnVTBKUFdDa2dlMXh1SUNCMllYSWdhM05TYjNjc0lITXdMQ0J6TVN3Z2N6SXNJSE16TENCME1Dd2dkREVzSUhReUxDQjBNMXh1WEc0Z0lITXdJRDBnVFZzd1hTQmVJR3RsZVZOamFHVmtkV3hsV3pCZFhHNGdJSE14SUQwZ1RWc3hYU0JlSUd0bGVWTmphR1ZrZFd4bFd6RmRYRzRnSUhNeUlEMGdUVnN5WFNCZUlHdGxlVk5qYUdWa2RXeGxXekpkWEc0Z0lITXpJRDBnVFZzelhTQmVJR3RsZVZOamFHVmtkV3hsV3pOZFhHNGdJR3R6VW05M0lEMGdORnh1SUNCbWIzSWdLSFpoY2lCeWIzVnVaQ0E5SURFN0lISnZkVzVrSUR3Z2RHaHBjeTVmYmxKdmRXNWtjenNnY205MWJtUXJLeWtnZTF4dUlDQWdJSFF3SUQwZ1UxVkNYMDFKV0Zzd1hWdHpNQ0ErUGo0Z01qUmRJRjRnVTFWQ1gwMUpXRnN4WFZzb2N6RWdQajQrSURFMktTQW1JREI0Wm1aZElGNGdVMVZDWDAxSldGc3lYVnNvY3pJZ1BqNCtJRGdwSUNZZ01IaG1abDBnWGlCVFZVSmZUVWxZV3pOZFczTXpJQ1lnTUhobVpsMGdYaUJyWlhsVFkyaGxaSFZzWlZ0cmMxSnZkeXNyWFZ4dUlDQWdJSFF4SUQwZ1UxVkNYMDFKV0Zzd1hWdHpNU0ErUGo0Z01qUmRJRjRnVTFWQ1gwMUpXRnN4WFZzb2N6SWdQajQrSURFMktTQW1JREI0Wm1aZElGNGdVMVZDWDAxSldGc3lYVnNvY3pNZ1BqNCtJRGdwSUNZZ01IaG1abDBnWGlCVFZVSmZUVWxZV3pOZFczTXdJQ1lnTUhobVpsMGdYaUJyWlhsVFkyaGxaSFZzWlZ0cmMxSnZkeXNyWFZ4dUlDQWdJSFF5SUQwZ1UxVkNYMDFKV0Zzd1hWdHpNaUErUGo0Z01qUmRJRjRnVTFWQ1gwMUpXRnN4WFZzb2N6TWdQajQrSURFMktTQW1JREI0Wm1aZElGNGdVMVZDWDAxSldGc3lYVnNvY3pBZ1BqNCtJRGdwSUNZZ01IaG1abDBnWGlCVFZVSmZUVWxZV3pOZFczTXhJQ1lnTUhobVpsMGdYaUJyWlhsVFkyaGxaSFZzWlZ0cmMxSnZkeXNyWFZ4dUlDQWdJSFF6SUQwZ1UxVkNYMDFKV0Zzd1hWdHpNeUErUGo0Z01qUmRJRjRnVTFWQ1gwMUpXRnN4WFZzb2N6QWdQajQrSURFMktTQW1JREI0Wm1aZElGNGdVMVZDWDAxSldGc3lYVnNvY3pFZ1BqNCtJRGdwSUNZZ01IaG1abDBnWGlCVFZVSmZUVWxZV3pOZFczTXlJQ1lnTUhobVpsMGdYaUJyWlhsVFkyaGxaSFZzWlZ0cmMxSnZkeXNyWFZ4dUlDQWdJSE13SUQwZ2REQmNiaUFnSUNCek1TQTlJSFF4WEc0Z0lDQWdjeklnUFNCME1seHVJQ0FnSUhNeklEMGdkRE5jYmlBZ2ZWeHVJQ0IwTUNBOUlDZ29VMEpQV0Z0ek1DQStQajRnTWpSZElEdzhJREkwS1NCOElDaFRRazlZV3loek1TQStQajRnTVRZcElDWWdNSGhtWmwwZ1BEd2dNVFlwSUh3Z0tGTkNUMWhiS0hNeUlENCtQaUE0S1NBbUlEQjRabVpkSUR3OElEZ3BJSHdnVTBKUFdGdHpNeUFtSURCNFptWmRLU0JlSUd0bGVWTmphR1ZrZFd4bFcydHpVbTkzS3l0ZFhHNGdJSFF4SUQwZ0tDaFRRazlZVzNNeElENCtQaUF5TkYwZ1BEd2dNalFwSUh3Z0tGTkNUMWhiS0hNeUlENCtQaUF4TmlrZ0ppQXdlR1ptWFNBOFBDQXhOaWtnZkNBb1UwSlBXRnNvY3pNZ1BqNCtJRGdwSUNZZ01IaG1abDBnUER3Z09Da2dmQ0JUUWs5WVczTXdJQ1lnTUhobVpsMHBJRjRnYTJWNVUyTm9aV1IxYkdWYmEzTlNiM2NySzExY2JpQWdkRElnUFNBb0tGTkNUMWhiY3pJZ1BqNCtJREkwWFNBOFBDQXlOQ2tnZkNBb1UwSlBXRnNvY3pNZ1BqNCtJREUyS1NBbUlEQjRabVpkSUR3OElERTJLU0I4SUNoVFFrOVlXeWh6TUNBK1BqNGdPQ2tnSmlBd2VHWm1YU0E4UENBNEtTQjhJRk5DVDFoYmN6RWdKaUF3ZUdabVhTa2dYaUJyWlhsVFkyaGxaSFZzWlZ0cmMxSnZkeXNyWFZ4dUlDQjBNeUE5SUNnb1UwSlBXRnR6TXlBK1BqNGdNalJkSUR3OElESTBLU0I4SUNoVFFrOVlXeWh6TUNBK1BqNGdNVFlwSUNZZ01IaG1abDBnUER3Z01UWXBJSHdnS0ZOQ1QxaGJLSE14SUQ0K1BpQTRLU0FtSURCNFptWmRJRHc4SURncElId2dVMEpQV0Z0ek1pQW1JREI0Wm1aZEtTQmVJR3RsZVZOamFHVmtkV3hsVzJ0elVtOTNLeXRkWEc0Z0lISmxkSFZ5YmlCYlhHNGdJQ0FnWm1sNGRYQmZkV2x1ZERNeUtIUXdLU3hjYmlBZ0lDQm1hWGgxY0Y5MWFXNTBNeklvZERFcExGeHVJQ0FnSUdacGVIVndYM1ZwYm5Rek1paDBNaWtzWEc0Z0lDQWdabWw0ZFhCZmRXbHVkRE15S0hRektWeHVJQ0JkWEc1OVhHNWNibVY0Y0c5eWRITXVRVVZUSUQwZ1FVVlRYRzRpWFgwPSIsImFyZ3VtZW50c1s0XVtcIi9ob21lL3VidW50dS9zdGFnaW5nL2FwcHMvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvYXNuMS5qc1wiXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykiLCJhcmd1bWVudHNbNF1bXCIvaG9tZS91YnVudHUvc3RhZ2luZy9hcHBzL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xLmpzXCJdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKSIsImFyZ3VtZW50c1s0XVtcIi9ob21lL3VidW50dS9zdGFnaW5nL2FwcHMvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZW5jb2RlcnMvaW5kZXguanNcIl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpIiwiYXJndW1lbnRzWzRdW1wiL2hvbWUvdWJ1bnR1L3N0YWdpbmcvYXBwcy9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9lbmNvZGVycy9wZW0uanNcIl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpIiwiYXJndW1lbnRzWzRdW1wiL2hvbWUvdWJ1bnR1L3N0YWdpbmcvYXBwcy9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9lbmNvZGVycy9kZXIuanNcIl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpIiwiYXJndW1lbnRzWzRdW1wiL2hvbWUvdWJ1bnR1L3N0YWdpbmcvYXBwcy9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9kZWNvZGVycy9pbmRleC5qc1wiXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykiLCJhcmd1bWVudHNbNF1bXCIvaG9tZS91YnVudHUvc3RhZ2luZy9hcHBzL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2RlY29kZXJzL3BlbS5qc1wiXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykiLCJhcmd1bWVudHNbNF1bXCIvaG9tZS91YnVudHUvc3RhZ2luZy9hcHBzL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2RlY29kZXJzL2Rlci5qc1wiXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykiLCJhcmd1bWVudHNbNF1bXCIvaG9tZS91YnVudHUvc3RhZ2luZy9hcHBzL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2NvbnN0YW50cy9pbmRleC5qc1wiXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykiLCJhcmd1bWVudHNbNF1bXCIvaG9tZS91YnVudHUvc3RhZ2luZy9hcHBzL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2NvbnN0YW50cy9kZXIuanNcIl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpIiwiYXJndW1lbnRzWzRdW1wiL2hvbWUvdWJ1bnR1L3N0YWdpbmcvYXBwcy9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9iYXNlL2luZGV4LmpzXCJdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKSIsImFyZ3VtZW50c1s0XVtcIi9ob21lL3VidW50dS9zdGFnaW5nL2FwcHMvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYmFzZS9yZXBvcnRlci5qc1wiXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykiLCJhcmd1bWVudHNbNF1bXCIvaG9tZS91YnVudHUvc3RhZ2luZy9hcHBzL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2Jhc2Uvbm9kZS5qc1wiXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykiLCJhcmd1bWVudHNbNF1bXCIvaG9tZS91YnVudHUvc3RhZ2luZy9hcHBzL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL25vZGVfbW9kdWxlcy9hc24xLmpzL25vZGVfbW9kdWxlcy9taW5pbWFsaXN0aWMtYXNzZXJ0L2luZGV4LmpzXCJdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKSIsImFyZ3VtZW50c1s0XVtcIi9ob21lL3VidW50dS9zdGFnaW5nL2FwcHMvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYmFzZS9idWZmZXIuanNcIl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpIiwiYXJndW1lbnRzWzRdW1wiL2hvbWUvdWJ1bnR1L3N0YWdpbmcvYXBwcy9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9hcGkuanNcIl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpIiwibW9kdWxlLmV4cG9ydHM9bW9kdWxlLmV4cG9ydHM9bW9kdWxlLmV4cG9ydHM9bW9kdWxlLmV4cG9ydHM9bW9kdWxlLmV4cG9ydHM9bW9kdWxlLmV4cG9ydHM9bW9kdWxlLmV4cG9ydHM9bW9kdWxlLmV4cG9ydHM9bW9kdWxlLmV4cG9ydHM9bW9kdWxlLmV4cG9ydHM9bW9kdWxlLmV4cG9ydHM9bW9kdWxlLmV4cG9ydHM9bW9kdWxlLmV4cG9ydHM9bW9kdWxlLmV4cG9ydHM9bW9kdWxlLmV4cG9ydHM9bW9kdWxlLmV4cG9ydHM9bW9kdWxlLmV4cG9ydHM9bW9kdWxlLmV4cG9ydHM9bW9kdWxlLmV4cG9ydHM9YXJndW1lbnRzWzRdW1wiL2hvbWUvdWJ1bnR1L3N0YWdpbmcvYXBwcy9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9hZXNpZC5qc29uXCJdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBibiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgcmFuZG9tQnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpO1xubW9kdWxlLmV4cG9ydHMgPSBjcnQ7XG5mdW5jdGlvbiBibGluZChwcml2KSB7XG4gIHZhciByID0gZ2V0cihwcml2KTtcbiAgdmFyIGJsaW5kZXIgPSByLnRvUmVkKGJuLm1vbnQocHJpdi5tb2R1bHVzKSlcbiAgLnJlZFBvdyhuZXcgYm4ocHJpdi5wdWJsaWNFeHBvbmVudCkpLmZyb21SZWQoKTtcbiAgcmV0dXJuIHtcbiAgICBibGluZGVyOiBibGluZGVyLFxuICAgIHVuYmxpbmRlcjpyLmludm0ocHJpdi5tb2R1bHVzKVxuICB9O1xufVxuZnVuY3Rpb24gY3J0KG1zZywgcHJpdikge1xuICB2YXIgYmxpbmRzID0gYmxpbmQocHJpdik7XG4gIHZhciBsZW4gPSBwcml2Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICB2YXIgbW9kID0gYm4ubW9udChwcml2Lm1vZHVsdXMpO1xuICB2YXIgYmxpbmRlZCA9IG5ldyBibihtc2cpLm11bChibGluZHMuYmxpbmRlcikubW9kKHByaXYubW9kdWx1cyk7XG4gIHZhciBjMSA9IGJsaW5kZWQudG9SZWQoYm4ubW9udChwcml2LnByaW1lMSkpO1xuICB2YXIgYzIgPSBibGluZGVkLnRvUmVkKGJuLm1vbnQocHJpdi5wcmltZTIpKTtcbiAgdmFyIHFpbnYgPSBwcml2LmNvZWZmaWNpZW50O1xuICB2YXIgcCA9IHByaXYucHJpbWUxO1xuICB2YXIgcSA9IHByaXYucHJpbWUyO1xuICB2YXIgbTEgPSBjMS5yZWRQb3cocHJpdi5leHBvbmVudDEpO1xuICB2YXIgbTIgPSBjMi5yZWRQb3cocHJpdi5leHBvbmVudDIpO1xuICBtMSA9IG0xLmZyb21SZWQoKTtcbiAgbTIgPSBtMi5mcm9tUmVkKCk7XG4gIHZhciBoID0gbTEuaXN1YihtMikuaW11bChxaW52KS5tb2QocCk7XG4gIGguaW11bChxKTtcbiAgbTIuaWFkZChoKTtcbiAgdmFyIG91dCA9IG5ldyBCdWZmZXIobTIuaW11bChibGluZHMudW5ibGluZGVyKS5tb2QocHJpdi5tb2R1bHVzKS50b0FycmF5KCkpO1xuICBpZiAob3V0Lmxlbmd0aCA8IGxlbikge1xuICAgIHZhciBwcmVmaXggPSBuZXcgQnVmZmVyKGxlbiAtIG91dC5sZW5ndGgpO1xuICAgIHByZWZpeC5maWxsKDApO1xuICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoW3ByZWZpeCwgb3V0XSwgbGVuKTtcbiAgfVxuICByZXR1cm4gb3V0O1xufVxuY3J0LmdldHIgPSBnZXRyO1xuZnVuY3Rpb24gZ2V0cihwcml2KSB7XG4gIHZhciBsZW4gPSBwcml2Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICB2YXIgciA9IG5ldyBibihyYW5kb21CeXRlcyhsZW4pKTtcbiAgd2hpbGUgKHIuY21wKHByaXYubW9kdWx1cykgPj0gIDAgfHwgIXIubW9kKHByaXYucHJpbWUxKSB8fCAhci5tb2QocHJpdi5wcmltZTIpKSB7XG4gICAgciA9IG5ldyBibihyYW5kb21CeXRlcyhsZW4pKTtcbiAgfVxuICByZXR1cm4gcjtcbn1cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12Y0hWaWJHbGpMV1Z1WTNKNWNIUXZibTlrWlY5dGIyUjFiR1Z6TDJKeWIzZHpaWEpwWm5rdGNuTmhMMmx1WkdWNExtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUdKdUlEMGdjbVZ4ZFdseVpTZ25ZbTR1YW5NbktUdGNiblpoY2lCeVlXNWtiMjFDZVhSbGN5QTlJSEpsY1hWcGNtVW9KM0poYm1SdmJXSjVkR1Z6SnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHTnlkRHRjYm1aMWJtTjBhVzl1SUdKc2FXNWtLSEJ5YVhZcElIdGNiaUFnZG1GeUlISWdQU0JuWlhSeUtIQnlhWFlwTzF4dUlDQjJZWElnWW14cGJtUmxjaUE5SUhJdWRHOVNaV1FvWW00dWJXOXVkQ2h3Y21sMkxtMXZaSFZzZFhNcEtWeHVJQ0F1Y21Wa1VHOTNLRzVsZHlCaWJpaHdjbWwyTG5CMVlteHBZMFY0Y0c5dVpXNTBLU2t1Wm5KdmJWSmxaQ2dwTzF4dUlDQnlaWFIxY200Z2UxeHVJQ0FnSUdKc2FXNWtaWEk2SUdKc2FXNWtaWElzWEc0Z0lDQWdkVzVpYkdsdVpHVnlPbkl1YVc1MmJTaHdjbWwyTG0xdlpIVnNkWE1wWEc0Z0lIMDdYRzU5WEc1bWRXNWpkR2x2YmlCamNuUW9iWE5uTENCd2NtbDJLU0I3WEc0Z0lIWmhjaUJpYkdsdVpITWdQU0JpYkdsdVpDaHdjbWwyS1R0Y2JpQWdkbUZ5SUd4bGJpQTlJSEJ5YVhZdWJXOWtkV3gxY3k1aWVYUmxUR1Z1WjNSb0tDazdYRzRnSUhaaGNpQnRiMlFnUFNCaWJpNXRiMjUwS0hCeWFYWXViVzlrZFd4MWN5azdYRzRnSUhaaGNpQmliR2x1WkdWa0lEMGdibVYzSUdKdUtHMXpaeWt1YlhWc0tHSnNhVzVrY3k1aWJHbHVaR1Z5S1M1dGIyUW9jSEpwZGk1dGIyUjFiSFZ6S1R0Y2JpQWdkbUZ5SUdNeElEMGdZbXhwYm1SbFpDNTBiMUpsWkNoaWJpNXRiMjUwS0hCeWFYWXVjSEpwYldVeEtTazdYRzRnSUhaaGNpQmpNaUE5SUdKc2FXNWtaV1F1ZEc5U1pXUW9ZbTR1Ylc5dWRDaHdjbWwyTG5CeWFXMWxNaWtwTzF4dUlDQjJZWElnY1dsdWRpQTlJSEJ5YVhZdVkyOWxabVpwWTJsbGJuUTdYRzRnSUhaaGNpQndJRDBnY0hKcGRpNXdjbWx0WlRFN1hHNGdJSFpoY2lCeElEMGdjSEpwZGk1d2NtbHRaVEk3WEc0Z0lIWmhjaUJ0TVNBOUlHTXhMbkpsWkZCdmR5aHdjbWwyTG1WNGNHOXVaVzUwTVNrN1hHNGdJSFpoY2lCdE1pQTlJR015TG5KbFpGQnZkeWh3Y21sMkxtVjRjRzl1Wlc1ME1pazdYRzRnSUcweElEMGdiVEV1Wm5KdmJWSmxaQ2dwTzF4dUlDQnRNaUE5SUcweUxtWnliMjFTWldRb0tUdGNiaUFnZG1GeUlHZ2dQU0J0TVM1cGMzVmlLRzB5S1M1cGJYVnNLSEZwYm5ZcExtMXZaQ2h3S1R0Y2JpQWdhQzVwYlhWc0tIRXBPMXh1SUNCdE1pNXBZV1JrS0dncE8xeHVJQ0IyWVhJZ2IzVjBJRDBnYm1WM0lFSjFabVpsY2lodE1pNXBiWFZzS0dKc2FXNWtjeTUxYm1Kc2FXNWtaWElwTG0xdlpDaHdjbWwyTG0xdlpIVnNkWE1wTG5SdlFYSnlZWGtvS1NrN1hHNGdJR2xtSUNodmRYUXViR1Z1WjNSb0lEd2diR1Z1S1NCN1hHNGdJQ0FnZG1GeUlIQnlaV1pwZUNBOUlHNWxkeUJDZFdabVpYSW9iR1Z1SUMwZ2IzVjBMbXhsYm1kMGFDazdYRzRnSUNBZ2NISmxabWw0TG1acGJHd29NQ2s3WEc0Z0lDQWdiM1YwSUQwZ1FuVm1abVZ5TG1OdmJtTmhkQ2hiY0hKbFptbDRMQ0J2ZFhSZExDQnNaVzRwTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJ2ZFhRN1hHNTlYRzVqY25RdVoyVjBjaUE5SUdkbGRISTdYRzVtZFc1amRHbHZiaUJuWlhSeUtIQnlhWFlwSUh0Y2JpQWdkbUZ5SUd4bGJpQTlJSEJ5YVhZdWJXOWtkV3gxY3k1aWVYUmxUR1Z1WjNSb0tDazdYRzRnSUhaaGNpQnlJRDBnYm1WM0lHSnVLSEpoYm1SdmJVSjVkR1Z6S0d4bGJpa3BPMXh1SUNCM2FHbHNaU0FvY2k1amJYQW9jSEpwZGk1dGIyUjFiSFZ6S1NBK1BTQWdNQ0I4ZkNBaGNpNXRiMlFvY0hKcGRpNXdjbWx0WlRFcElIeDhJQ0Z5TG0xdlpDaHdjbWwyTG5CeWFXMWxNaWtwSUh0Y2JpQWdJQ0J5SUQwZ2JtVjNJR0p1S0hKaGJtUnZiVUo1ZEdWektHeGxiaWtwTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJ5TzF4dWZTSmRmUT09IiwiYXJndW1lbnRzWzRdW1wiL2hvbWUvdWJ1bnR1L3N0YWdpbmcvYXBwcy9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2RpZmZpZS1oZWxsbWFuL25vZGVfbW9kdWxlcy9ibi5qcy9saWIvYm4uanNcIl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpIiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xudmFyIGNyZWF0ZUhhc2ggPSByZXF1aXJlKCdjcmVhdGUtaGFzaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc2VlZCwgbGVuKSB7XG4gIHZhciB0ID0gbmV3IEJ1ZmZlcignJyk7XG4gIHZhciAgaSA9IDAsIGM7XG4gIHdoaWxlICh0Lmxlbmd0aCA8IGxlbikge1xuICAgIGMgPSBpMm9wcyhpKyspO1xuICAgIHQgPSBCdWZmZXIuY29uY2F0KFt0LCBjcmVhdGVIYXNoKCdzaGExJykudXBkYXRlKHNlZWQpLnVwZGF0ZShjKS5kaWdlc3QoKV0pO1xuICB9XG4gIHJldHVybiB0LnNsaWNlKDAsIGxlbik7XG59O1xuXG5mdW5jdGlvbiBpMm9wcyhjKSB7XG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKDQpO1xuICBvdXQud3JpdGVVSW50MzJCRShjLDApO1xuICByZXR1cm4gb3V0O1xufVxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZjSFZpYkdsakxXVnVZM0o1Y0hRdmJXZG1MbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWRtRnlJR055WldGMFpVaGhjMmdnUFNCeVpYRjFhWEpsS0NkamNtVmhkR1V0YUdGemFDY3BPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaUFvYzJWbFpDd2diR1Z1S1NCN1hHNGdJSFpoY2lCMElEMGdibVYzSUVKMVptWmxjaWduSnlrN1hHNGdJSFpoY2lBZ2FTQTlJREFzSUdNN1hHNGdJSGRvYVd4bElDaDBMbXhsYm1kMGFDQThJR3hsYmlrZ2UxeHVJQ0FnSUdNZ1BTQnBNbTl3Y3locEt5c3BPMXh1SUNBZ0lIUWdQU0JDZFdabVpYSXVZMjl1WTJGMEtGdDBMQ0JqY21WaGRHVklZWE5vS0NkemFHRXhKeWt1ZFhCa1lYUmxLSE5sWldRcExuVndaR0YwWlNoaktTNWthV2RsYzNRb0tWMHBPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQjBMbk5zYVdObEtEQXNJR3hsYmlrN1hHNTlPMXh1WEc1bWRXNWpkR2x2YmlCcE1tOXdjeWhqS1NCN1hHNGdJSFpoY2lCdmRYUWdQU0J1WlhjZ1FuVm1abVZ5S0RRcE8xeHVJQ0J2ZFhRdWQzSnBkR1ZWU1c1ME16SkNSU2hqTERBcE8xeHVJQ0J5WlhSMWNtNGdiM1YwTzF4dWZTSmRmUT09IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xudmFyIGdlbmVyYXRlUHJpbWUgPSByZXF1aXJlKCcuL2xpYi9nZW5lcmF0ZVByaW1lJyk7XG52YXIgcHJpbWVzID0gcmVxdWlyZSgnLi9saWIvcHJpbWVzJyk7XG5cbnZhciBESCA9IHJlcXVpcmUoJy4vbGliL2RoJyk7XG5cbmZ1bmN0aW9uIGdldERpZmZpZUhlbGxtYW4obW9kKSB7XG4gIHZhciBwcmltZSA9IG5ldyBCdWZmZXIocHJpbWVzW21vZF0ucHJpbWUsICdoZXgnKTtcbiAgdmFyIGdlbiA9IG5ldyBCdWZmZXIocHJpbWVzW21vZF0uZ2VuLCAnaGV4Jyk7XG5cbiAgcmV0dXJuIG5ldyBESChwcmltZSwgZ2VuKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGlmZmllSGVsbG1hbihwcmltZSwgZW5jLCBnZW5lcmF0b3IsIGdlbmMpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihlbmMpIHx8ICh0eXBlb2YgZW5jID09PSAnc3RyaW5nJyAmJiBbJ2hleCcsICdiaW5hcnknLCAnYmFzZTY0J10uaW5kZXhPZihlbmMpID09PSAtMSkpIHtcbiAgICBnZW5jID0gZ2VuZXJhdG9yO1xuICAgIGdlbmVyYXRvciA9IGVuYztcbiAgICBlbmMgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBlbmMgPSBlbmMgfHwgJ2JpbmFyeSc7XG4gIGdlbmMgPSBnZW5jIHx8ICdiaW5hcnknO1xuICBnZW5lcmF0b3IgPSBnZW5lcmF0b3IgfHwgbmV3IEJ1ZmZlcihbMl0pO1xuXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGdlbmVyYXRvcikpIHtcbiAgICBnZW5lcmF0b3IgPSBuZXcgQnVmZmVyKGdlbmVyYXRvciwgZ2VuYyk7XG4gIH1cblxuICBpZiAodHlwZW9mIHByaW1lID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBuZXcgREgoZ2VuZXJhdGVQcmltZShwcmltZSwgZ2VuZXJhdG9yKSwgZ2VuZXJhdG9yLCB0cnVlKTtcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHByaW1lKSkge1xuICAgIHByaW1lID0gbmV3IEJ1ZmZlcihwcmltZSwgZW5jKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgREgocHJpbWUsIGdlbmVyYXRvciwgdHJ1ZSk7XG59XG5cbmV4cG9ydHMuRGlmZmllSGVsbG1hbkdyb3VwID0gZXhwb3J0cy5jcmVhdGVEaWZmaWVIZWxsbWFuR3JvdXAgPSBleHBvcnRzLmdldERpZmZpZUhlbGxtYW4gPSBnZXREaWZmaWVIZWxsbWFuO1xuZXhwb3J0cy5jcmVhdGVEaWZmaWVIZWxsbWFuID0gZXhwb3J0cy5EaWZmaWVIZWxsbWFuID0gY3JlYXRlRGlmZmllSGVsbG1hbjtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZaR2xtWm1sbExXaGxiR3h0WVc0dlluSnZkM05sY2k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUdkbGJtVnlZWFJsVUhKcGJXVWdQU0J5WlhGMWFYSmxLQ2N1TDJ4cFlpOW5aVzVsY21GMFpWQnlhVzFsSnlrN1hHNTJZWElnY0hKcGJXVnpJRDBnY21WeGRXbHlaU2duTGk5c2FXSXZjSEpwYldWekp5azdYRzVjYm5aaGNpQkVTQ0E5SUhKbGNYVnBjbVVvSnk0dmJHbGlMMlJvSnlrN1hHNWNibVoxYm1OMGFXOXVJR2RsZEVScFptWnBaVWhsYkd4dFlXNG9iVzlrS1NCN1hHNGdJSFpoY2lCd2NtbHRaU0E5SUc1bGR5QkNkV1ptWlhJb2NISnBiV1Z6VzIxdlpGMHVjSEpwYldVc0lDZG9aWGduS1R0Y2JpQWdkbUZ5SUdkbGJpQTlJRzVsZHlCQ2RXWm1aWElvY0hKcGJXVnpXMjF2WkYwdVoyVnVMQ0FuYUdWNEp5azdYRzVjYmlBZ2NtVjBkWEp1SUc1bGR5QkVTQ2h3Y21sdFpTd2daMlZ1S1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWTNKbFlYUmxSR2xtWm1sbFNHVnNiRzFoYmlod2NtbHRaU3dnWlc1akxDQm5aVzVsY21GMGIzSXNJR2RsYm1NcElIdGNiaUFnYVdZZ0tFSjFabVpsY2k1cGMwSjFabVpsY2lobGJtTXBJSHg4SUNoMGVYQmxiMllnWlc1aklEMDlQU0FuYzNSeWFXNW5KeUFtSmlCYkoyaGxlQ2NzSUNkaWFXNWhjbmtuTENBblltRnpaVFkwSjEwdWFXNWtaWGhQWmlobGJtTXBJRDA5UFNBdE1Ta3BJSHRjYmlBZ0lDQm5aVzVqSUQwZ1oyVnVaWEpoZEc5eU8xeHVJQ0FnSUdkbGJtVnlZWFJ2Y2lBOUlHVnVZenRjYmlBZ0lDQmxibU1nUFNCMWJtUmxabWx1WldRN1hHNGdJSDFjYmx4dUlDQmxibU1nUFNCbGJtTWdmSHdnSjJKcGJtRnllU2M3WEc0Z0lHZGxibU1nUFNCblpXNWpJSHg4SUNkaWFXNWhjbmtuTzF4dUlDQm5aVzVsY21GMGIzSWdQU0JuWlc1bGNtRjBiM0lnZkh3Z2JtVjNJRUoxWm1abGNpaGJNbDBwTzF4dVhHNGdJR2xtSUNnaFFuVm1abVZ5TG1selFuVm1abVZ5S0dkbGJtVnlZWFJ2Y2lrcElIdGNiaUFnSUNCblpXNWxjbUYwYjNJZ1BTQnVaWGNnUW5WbVptVnlLR2RsYm1WeVlYUnZjaXdnWjJWdVl5azdYRzRnSUgxY2JseHVJQ0JwWmlBb2RIbHdaVzltSUhCeWFXMWxJRDA5UFNBbmJuVnRZbVZ5SnlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1JFZ29aMlZ1WlhKaGRHVlFjbWx0WlNod2NtbHRaU3dnWjJWdVpYSmhkRzl5S1N3Z1oyVnVaWEpoZEc5eUxDQjBjblZsS1R0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2doUW5WbVptVnlMbWx6UW5WbVptVnlLSEJ5YVcxbEtTa2dlMXh1SUNBZ0lIQnlhVzFsSUQwZ2JtVjNJRUoxWm1abGNpaHdjbWx0WlN3Z1pXNWpLVHRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJ1WlhjZ1JFZ29jSEpwYldVc0lHZGxibVZ5WVhSdmNpd2dkSEoxWlNrN1hHNTlYRzVjYm1WNGNHOXlkSE11UkdsbVptbGxTR1ZzYkcxaGJrZHliM1Z3SUQwZ1pYaHdiM0owY3k1amNtVmhkR1ZFYVdabWFXVklaV3hzYldGdVIzSnZkWEFnUFNCbGVIQnZjblJ6TG1kbGRFUnBabVpwWlVobGJHeHRZVzRnUFNCblpYUkVhV1ptYVdWSVpXeHNiV0Z1TzF4dVpYaHdiM0owY3k1amNtVmhkR1ZFYVdabWFXVklaV3hzYldGdUlEMGdaWGh3YjNKMGN5NUVhV1ptYVdWSVpXeHNiV0Z1SUQwZ1kzSmxZWFJsUkdsbVptbGxTR1ZzYkcxaGJqdGNiaUpkZlE9PSIsIm1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPXtcbiAgICBcIm1vZHAxXCI6IHtcbiAgICAgICAgXCJnZW5cIjogXCIwMlwiLFxuICAgICAgICBcInByaW1lXCI6IFwiZmZmZmZmZmZmZmZmZmZmZmM5MGZkYWEyMjE2OGMyMzRjNGM2NjI4YjgwZGMxY2QxMjkwMjRlMDg4YTY3Y2M3NDAyMGJiZWE2M2IxMzliMjI1MTRhMDg3OThlMzQwNGRkZWY5NTE5YjNjZDNhNDMxYjMwMmIwYTZkZjI1ZjE0Mzc0ZmUxMzU2ZDZkNTFjMjQ1ZTQ4NWI1NzY2MjVlN2VjNmY0NGM0MmU5YTYzYTM2MjBmZmZmZmZmZmZmZmZmZmZmXCJcbiAgICB9LFxuICAgIFwibW9kcDJcIjoge1xuICAgICAgICBcImdlblwiOiBcIjAyXCIsXG4gICAgICAgIFwicHJpbWVcIjogXCJmZmZmZmZmZmZmZmZmZmZmYzkwZmRhYTIyMTY4YzIzNGM0YzY2MjhiODBkYzFjZDEyOTAyNGUwODhhNjdjYzc0MDIwYmJlYTYzYjEzOWIyMjUxNGEwODc5OGUzNDA0ZGRlZjk1MTliM2NkM2E0MzFiMzAyYjBhNmRmMjVmMTQzNzRmZTEzNTZkNmQ1MWMyNDVlNDg1YjU3NjYyNWU3ZWM2ZjQ0YzQyZTlhNjM3ZWQ2YjBiZmY1Y2I2ZjQwNmI3ZWRlZTM4NmJmYjVhODk5ZmE1YWU5ZjI0MTE3YzRiMWZlNjQ5Mjg2NjUxZWNlNjUzODFmZmZmZmZmZmZmZmZmZmZmXCJcbiAgICB9LFxuICAgIFwibW9kcDVcIjoge1xuICAgICAgICBcImdlblwiOiBcIjAyXCIsXG4gICAgICAgIFwicHJpbWVcIjogXCJmZmZmZmZmZmZmZmZmZmZmYzkwZmRhYTIyMTY4YzIzNGM0YzY2MjhiODBkYzFjZDEyOTAyNGUwODhhNjdjYzc0MDIwYmJlYTYzYjEzOWIyMjUxNGEwODc5OGUzNDA0ZGRlZjk1MTliM2NkM2E0MzFiMzAyYjBhNmRmMjVmMTQzNzRmZTEzNTZkNmQ1MWMyNDVlNDg1YjU3NjYyNWU3ZWM2ZjQ0YzQyZTlhNjM3ZWQ2YjBiZmY1Y2I2ZjQwNmI3ZWRlZTM4NmJmYjVhODk5ZmE1YWU5ZjI0MTE3YzRiMWZlNjQ5Mjg2NjUxZWNlNDViM2RjMjAwN2NiOGExNjNiZjA1OThkYTQ4MzYxYzU1ZDM5YTY5MTYzZmE4ZmQyNGNmNWY4MzY1NWQyM2RjYTNhZDk2MWM2MmYzNTYyMDg1NTJiYjllZDUyOTA3NzA5Njk2NmQ2NzBjMzU0ZTRhYmM5ODA0ZjE3NDZjMDhjYTIzNzMyN2ZmZmZmZmZmZmZmZmZmZmZcIlxuICAgIH0sXG4gICAgXCJtb2RwMTRcIjoge1xuICAgICAgICBcImdlblwiOiBcIjAyXCIsXG4gICAgICAgIFwicHJpbWVcIjogXCJmZmZmZmZmZmZmZmZmZmZmYzkwZmRhYTIyMTY4YzIzNGM0YzY2MjhiODBkYzFjZDEyOTAyNGUwODhhNjdjYzc0MDIwYmJlYTYzYjEzOWIyMjUxNGEwODc5OGUzNDA0ZGRlZjk1MTliM2NkM2E0MzFiMzAyYjBhNmRmMjVmMTQzNzRmZTEzNTZkNmQ1MWMyNDVlNDg1YjU3NjYyNWU3ZWM2ZjQ0YzQyZTlhNjM3ZWQ2YjBiZmY1Y2I2ZjQwNmI3ZWRlZTM4NmJmYjVhODk5ZmE1YWU5ZjI0MTE3YzRiMWZlNjQ5Mjg2NjUxZWNlNDViM2RjMjAwN2NiOGExNjNiZjA1OThkYTQ4MzYxYzU1ZDM5YTY5MTYzZmE4ZmQyNGNmNWY4MzY1NWQyM2RjYTNhZDk2MWM2MmYzNTYyMDg1NTJiYjllZDUyOTA3NzA5Njk2NmQ2NzBjMzU0ZTRhYmM5ODA0ZjE3NDZjMDhjYTE4MjE3YzMyOTA1ZTQ2MmUzNmNlM2JlMzllNzcyYzE4MGU4NjAzOWIyNzgzYTJlYzA3YTI4ZmI1YzU1ZGYwNmY0YzUyYzlkZTJiY2JmNjk1NTgxNzE4Mzk5NTQ5N2NlYTk1NmFlNTE1ZDIyNjE4OThmYTA1MTAxNTcyOGU1YThhYWNhYTY4ZmZmZmZmZmZmZmZmZmZmZlwiXG4gICAgfSxcbiAgICBcIm1vZHAxNVwiOiB7XG4gICAgICAgIFwiZ2VuXCI6IFwiMDJcIixcbiAgICAgICAgXCJwcmltZVwiOiBcImZmZmZmZmZmZmZmZmZmZmZjOTBmZGFhMjIxNjhjMjM0YzRjNjYyOGI4MGRjMWNkMTI5MDI0ZTA4OGE2N2NjNzQwMjBiYmVhNjNiMTM5YjIyNTE0YTA4Nzk4ZTM0MDRkZGVmOTUxOWIzY2QzYTQzMWIzMDJiMGE2ZGYyNWYxNDM3NGZlMTM1NmQ2ZDUxYzI0NWU0ODViNTc2NjI1ZTdlYzZmNDRjNDJlOWE2MzdlZDZiMGJmZjVjYjZmNDA2YjdlZGVlMzg2YmZiNWE4OTlmYTVhZTlmMjQxMTdjNGIxZmU2NDkyODY2NTFlY2U0NWIzZGMyMDA3Y2I4YTE2M2JmMDU5OGRhNDgzNjFjNTVkMzlhNjkxNjNmYThmZDI0Y2Y1ZjgzNjU1ZDIzZGNhM2FkOTYxYzYyZjM1NjIwODU1MmJiOWVkNTI5MDc3MDk2OTY2ZDY3MGMzNTRlNGFiYzk4MDRmMTc0NmMwOGNhMTgyMTdjMzI5MDVlNDYyZTM2Y2UzYmUzOWU3NzJjMTgwZTg2MDM5YjI3ODNhMmVjMDdhMjhmYjVjNTVkZjA2ZjRjNTJjOWRlMmJjYmY2OTU1ODE3MTgzOTk1NDk3Y2VhOTU2YWU1MTVkMjI2MTg5OGZhMDUxMDE1NzI4ZTVhOGFhYWM0MmRhZDMzMTcwZDA0NTA3YTMzYTg1NTIxYWJkZjFjYmE2NGVjZmI4NTA0NThkYmVmMGE4YWVhNzE1NzVkMDYwYzdkYjM5NzBmODVhNmUxZTRjN2FiZjVhZThjZGIwOTMzZDcxZThjOTRlMDRhMjU2MTlkY2VlM2QyMjYxYWQyZWU2YmYxMmZmYTA2ZDk4YTA4NjRkODc2MDI3MzNlYzg2YTY0NTIxZjJiMTgxNzdiMjAwY2JiZTExNzU3N2E2MTVkNmM3NzA5ODhjMGJhZDk0NmUyMDhlMjRmYTA3NGU1YWIzMTQzZGI1YmZjZTBmZDEwOGU0YjgyZDEyMGE5M2FkMmNhZmZmZmZmZmZmZmZmZmZmZlwiXG4gICAgfSxcbiAgICBcIm1vZHAxNlwiOiB7XG4gICAgICAgIFwiZ2VuXCI6IFwiMDJcIixcbiAgICAgICAgXCJwcmltZVwiOiBcImZmZmZmZmZmZmZmZmZmZmZjOTBmZGFhMjIxNjhjMjM0YzRjNjYyOGI4MGRjMWNkMTI5MDI0ZTA4OGE2N2NjNzQwMjBiYmVhNjNiMTM5YjIyNTE0YTA4Nzk4ZTM0MDRkZGVmOTUxOWIzY2QzYTQzMWIzMDJiMGE2ZGYyNWYxNDM3NGZlMTM1NmQ2ZDUxYzI0NWU0ODViNTc2NjI1ZTdlYzZmNDRjNDJlOWE2MzdlZDZiMGJmZjVjYjZmNDA2YjdlZGVlMzg2YmZiNWE4OTlmYTVhZTlmMjQxMTdjNGIxZmU2NDkyODY2NTFlY2U0NWIzZGMyMDA3Y2I4YTE2M2JmMDU5OGRhNDgzNjFjNTVkMzlhNjkxNjNmYThmZDI0Y2Y1ZjgzNjU1ZDIzZGNhM2FkOTYxYzYyZjM1NjIwODU1MmJiOWVkNTI5MDc3MDk2OTY2ZDY3MGMzNTRlNGFiYzk4MDRmMTc0NmMwOGNhMTgyMTdjMzI5MDVlNDYyZTM2Y2UzYmUzOWU3NzJjMTgwZTg2MDM5YjI3ODNhMmVjMDdhMjhmYjVjNTVkZjA2ZjRjNTJjOWRlMmJjYmY2OTU1ODE3MTgzOTk1NDk3Y2VhOTU2YWU1MTVkMjI2MTg5OGZhMDUxMDE1NzI4ZTVhOGFhYWM0MmRhZDMzMTcwZDA0NTA3YTMzYTg1NTIxYWJkZjFjYmE2NGVjZmI4NTA0NThkYmVmMGE4YWVhNzE1NzVkMDYwYzdkYjM5NzBmODVhNmUxZTRjN2FiZjVhZThjZGIwOTMzZDcxZThjOTRlMDRhMjU2MTlkY2VlM2QyMjYxYWQyZWU2YmYxMmZmYTA2ZDk4YTA4NjRkODc2MDI3MzNlYzg2YTY0NTIxZjJiMTgxNzdiMjAwY2JiZTExNzU3N2E2MTVkNmM3NzA5ODhjMGJhZDk0NmUyMDhlMjRmYTA3NGU1YWIzMTQzZGI1YmZjZTBmZDEwOGU0YjgyZDEyMGE5MjEwODAxMWE3MjNjMTJhNzg3ZTZkNzg4NzE5YTEwYmRiYTViMjY5OWMzMjcxODZhZjRlMjNjMWE5NDY4MzRiNjE1MGJkYTI1ODNlOWNhMmFkNDRjZThkYmJiYzJkYjA0ZGU4ZWY5MmU4ZWZjMTQxZmJlY2FhNjI4N2M1OTQ3NGU2YmMwNWQ5OWIyOTY0ZmEwOTBjM2EyMjMzYmExODY1MTViZTdlZDFmNjEyOTcwY2VlMmQ3YWZiODFiZGQ3NjIxNzA0ODFjZDAwNjkxMjdkNWIwNWFhOTkzYjRlYTk4OGQ4ZmRkYzE4NmZmYjdkYzkwYTZjMDhmNGRmNDM1YzkzNDA2MzE5OWZmZmZmZmZmZmZmZmZmZmZcIlxuICAgIH0sXG4gICAgXCJtb2RwMTdcIjoge1xuICAgICAgICBcImdlblwiOiBcIjAyXCIsXG4gICAgICAgIFwicHJpbWVcIjogXCJmZmZmZmZmZmZmZmZmZmZmYzkwZmRhYTIyMTY4YzIzNGM0YzY2MjhiODBkYzFjZDEyOTAyNGUwODhhNjdjYzc0MDIwYmJlYTYzYjEzOWIyMjUxNGEwODc5OGUzNDA0ZGRlZjk1MTliM2NkM2E0MzFiMzAyYjBhNmRmMjVmMTQzNzRmZTEzNTZkNmQ1MWMyNDVlNDg1YjU3NjYyNWU3ZWM2ZjQ0YzQyZTlhNjM3ZWQ2YjBiZmY1Y2I2ZjQwNmI3ZWRlZTM4NmJmYjVhODk5ZmE1YWU5ZjI0MTE3YzRiMWZlNjQ5Mjg2NjUxZWNlNDViM2RjMjAwN2NiOGExNjNiZjA1OThkYTQ4MzYxYzU1ZDM5YTY5MTYzZmE4ZmQyNGNmNWY4MzY1NWQyM2RjYTNhZDk2MWM2MmYzNTYyMDg1NTJiYjllZDUyOTA3NzA5Njk2NmQ2NzBjMzU0ZTRhYmM5ODA0ZjE3NDZjMDhjYTE4MjE3YzMyOTA1ZTQ2MmUzNmNlM2JlMzllNzcyYzE4MGU4NjAzOWIyNzgzYTJlYzA3YTI4ZmI1YzU1ZGYwNmY0YzUyYzlkZTJiY2JmNjk1NTgxNzE4Mzk5NTQ5N2NlYTk1NmFlNTE1ZDIyNjE4OThmYTA1MTAxNTcyOGU1YThhYWFjNDJkYWQzMzE3MGQwNDUwN2EzM2E4NTUyMWFiZGYxY2JhNjRlY2ZiODUwNDU4ZGJlZjBhOGFlYTcxNTc1ZDA2MGM3ZGIzOTcwZjg1YTZlMWU0YzdhYmY1YWU4Y2RiMDkzM2Q3MWU4Yzk0ZTA0YTI1NjE5ZGNlZTNkMjI2MWFkMmVlNmJmMTJmZmEwNmQ5OGEwODY0ZDg3NjAyNzMzZWM4NmE2NDUyMWYyYjE4MTc3YjIwMGNiYmUxMTc1NzdhNjE1ZDZjNzcwOTg4YzBiYWQ5NDZlMjA4ZTI0ZmEwNzRlNWFiMzE0M2RiNWJmY2UwZmQxMDhlNGI4MmQxMjBhOTIxMDgwMTFhNzIzYzEyYTc4N2U2ZDc4ODcxOWExMGJkYmE1YjI2OTljMzI3MTg2YWY0ZTIzYzFhOTQ2ODM0YjYxNTBiZGEyNTgzZTljYTJhZDQ0Y2U4ZGJiYmMyZGIwNGRlOGVmOTJlOGVmYzE0MWZiZWNhYTYyODdjNTk0NzRlNmJjMDVkOTliMjk2NGZhMDkwYzNhMjIzM2JhMTg2NTE1YmU3ZWQxZjYxMjk3MGNlZTJkN2FmYjgxYmRkNzYyMTcwNDgxY2QwMDY5MTI3ZDViMDVhYTk5M2I0ZWE5ODhkOGZkZGMxODZmZmI3ZGM5MGE2YzA4ZjRkZjQzNWM5MzQwMjg0OTIzNmMzZmFiNGQyN2M3MDI2YzFkNGRjYjI2MDI2NDZkZWM5NzUxZTc2M2RiYTM3YmRmOGZmOTQwNmFkOWU1MzBlZTVkYjM4MmY0MTMwMDFhZWIwNmE1M2VkOTAyN2Q4MzExNzk3MjdiMDg2NWE4OTE4ZGEzZWRiZWJjZjliMTRlZDQ0Y2U2Y2JhY2VkNGJiMWJkYjdmMTQ0N2U2Y2MyNTRiMzMyMDUxNTEyYmQ3YWY0MjZmYjhmNDAxMzc4Y2QyYmY1OTgzY2EwMWM2NGI5MmVjZjAzMmVhMTVkMTcyMWQwM2Y0ODJkN2NlNmU3NGZlZjZkNTVlNzAyZjQ2OTgwYzgyYjVhODQwMzE5MDBiMWM5ZTU5ZTdjOTdmYmVjN2U4ZjMyM2E5N2E3ZTM2Y2M4OGJlMGYxZDQ1YjdmZjU4NWFjNTRiZDQwN2IyMmI0MTU0YWFjYzhmNmQ3ZWJmNDhlMWQ4MTRjYzVlZDIwZjgwMzdlMGE3OTcxNWVlZjI5YmUzMjgwNmExZDU4YmI3YzVkYTc2ZjU1MGFhM2Q4YTFmYmZmMGViMTljY2IxYTMxM2Q1NWNkYTU2YzllYzJlZjI5NjMyMzg3ZmU4ZDc2ZTNjMDQ2ODA0M2U4ZjY2M2Y0ODYwZWUxMmJmMmQ1YjBiNzQ3NGQ2ZTY5NGY5MWU2ZGNjNDAyNGZmZmZmZmZmZmZmZmZmZmZcIlxuICAgIH0sXG4gICAgXCJtb2RwMThcIjoge1xuICAgICAgICBcImdlblwiOiBcIjAyXCIsXG4gICAgICAgIFwicHJpbWVcIjogXCJmZmZmZmZmZmZmZmZmZmZmYzkwZmRhYTIyMTY4YzIzNGM0YzY2MjhiODBkYzFjZDEyOTAyNGUwODhhNjdjYzc0MDIwYmJlYTYzYjEzOWIyMjUxNGEwODc5OGUzNDA0ZGRlZjk1MTliM2NkM2E0MzFiMzAyYjBhNmRmMjVmMTQzNzRmZTEzNTZkNmQ1MWMyNDVlNDg1YjU3NjYyNWU3ZWM2ZjQ0YzQyZTlhNjM3ZWQ2YjBiZmY1Y2I2ZjQwNmI3ZWRlZTM4NmJmYjVhODk5ZmE1YWU5ZjI0MTE3YzRiMWZlNjQ5Mjg2NjUxZWNlNDViM2RjMjAwN2NiOGExNjNiZjA1OThkYTQ4MzYxYzU1ZDM5YTY5MTYzZmE4ZmQyNGNmNWY4MzY1NWQyM2RjYTNhZDk2MWM2MmYzNTYyMDg1NTJiYjllZDUyOTA3NzA5Njk2NmQ2NzBjMzU0ZTRhYmM5ODA0ZjE3NDZjMDhjYTE4MjE3YzMyOTA1ZTQ2MmUzNmNlM2JlMzllNzcyYzE4MGU4NjAzOWIyNzgzYTJlYzA3YTI4ZmI1YzU1ZGYwNmY0YzUyYzlkZTJiY2JmNjk1NTgxNzE4Mzk5NTQ5N2NlYTk1NmFlNTE1ZDIyNjE4OThmYTA1MTAxNTcyOGU1YThhYWFjNDJkYWQzMzE3MGQwNDUwN2EzM2E4NTUyMWFiZGYxY2JhNjRlY2ZiODUwNDU4ZGJlZjBhOGFlYTcxNTc1ZDA2MGM3ZGIzOTcwZjg1YTZlMWU0YzdhYmY1YWU4Y2RiMDkzM2Q3MWU4Yzk0ZTA0YTI1NjE5ZGNlZTNkMjI2MWFkMmVlNmJmMTJmZmEwNmQ5OGEwODY0ZDg3NjAyNzMzZWM4NmE2NDUyMWYyYjE4MTc3YjIwMGNiYmUxMTc1NzdhNjE1ZDZjNzcwOTg4YzBiYWQ5NDZlMjA4ZTI0ZmEwNzRlNWFiMzE0M2RiNWJmY2UwZmQxMDhlNGI4MmQxMjBhOTIxMDgwMTFhNzIzYzEyYTc4N2U2ZDc4ODcxOWExMGJkYmE1YjI2OTljMzI3MTg2YWY0ZTIzYzFhOTQ2ODM0YjYxNTBiZGEyNTgzZTljYTJhZDQ0Y2U4ZGJiYmMyZGIwNGRlOGVmOTJlOGVmYzE0MWZiZWNhYTYyODdjNTk0NzRlNmJjMDVkOTliMjk2NGZhMDkwYzNhMjIzM2JhMTg2NTE1YmU3ZWQxZjYxMjk3MGNlZTJkN2FmYjgxYmRkNzYyMTcwNDgxY2QwMDY5MTI3ZDViMDVhYTk5M2I0ZWE5ODhkOGZkZGMxODZmZmI3ZGM5MGE2YzA4ZjRkZjQzNWM5MzQwMjg0OTIzNmMzZmFiNGQyN2M3MDI2YzFkNGRjYjI2MDI2NDZkZWM5NzUxZTc2M2RiYTM3YmRmOGZmOTQwNmFkOWU1MzBlZTVkYjM4MmY0MTMwMDFhZWIwNmE1M2VkOTAyN2Q4MzExNzk3MjdiMDg2NWE4OTE4ZGEzZWRiZWJjZjliMTRlZDQ0Y2U2Y2JhY2VkNGJiMWJkYjdmMTQ0N2U2Y2MyNTRiMzMyMDUxNTEyYmQ3YWY0MjZmYjhmNDAxMzc4Y2QyYmY1OTgzY2EwMWM2NGI5MmVjZjAzMmVhMTVkMTcyMWQwM2Y0ODJkN2NlNmU3NGZlZjZkNTVlNzAyZjQ2OTgwYzgyYjVhODQwMzE5MDBiMWM5ZTU5ZTdjOTdmYmVjN2U4ZjMyM2E5N2E3ZTM2Y2M4OGJlMGYxZDQ1YjdmZjU4NWFjNTRiZDQwN2IyMmI0MTU0YWFjYzhmNmQ3ZWJmNDhlMWQ4MTRjYzVlZDIwZjgwMzdlMGE3OTcxNWVlZjI5YmUzMjgwNmExZDU4YmI3YzVkYTc2ZjU1MGFhM2Q4YTFmYmZmMGViMTljY2IxYTMxM2Q1NWNkYTU2YzllYzJlZjI5NjMyMzg3ZmU4ZDc2ZTNjMDQ2ODA0M2U4ZjY2M2Y0ODYwZWUxMmJmMmQ1YjBiNzQ3NGQ2ZTY5NGY5MWU2ZGJlMTE1OTc0YTM5MjZmMTJmZWU1ZTQzODc3N2NiNmE5MzJkZjhjZDhiZWM0ZDA3M2I5MzFiYTNiYzgzMmI2OGQ5ZGQzMDA3NDFmYTdiZjhhZmM0N2VkMjU3NmY2OTM2YmE0MjQ2NjNhYWI2MzljNWFlNGY1NjgzNDIzYjQ3NDJiZjFjOTc4MjM4ZjE2Y2JlMzlkNjUyZGUzZmRiOGJlZmM4NDhhZDkyMjIyMmUwNGE0MDM3YzA3MTNlYjU3YTgxYTIzZjBjNzM0NzNmYzY0NmNlYTMwNmI0YmNiYzg4NjJmODM4NWRkZmE5ZDRiN2ZhMmMwODdlODc5NjgzMzAzZWQ1YmRkM2EwNjJiM2NmNWIzYTI3OGE2NmQyYTEzZjgzZjQ0ZjgyZGRmMzEwZWUwNzRhYjZhMzY0NTk3ZTg5OWEwMjU1ZGMxNjRmMzFjYzUwODQ2ODUxZGY5YWI0ODE5NWRlZDdlYTFiMWQ1MTBiZDdlZTc0ZDczZmFmMzZiYzMxZWNmYTI2ODM1OTA0NmY0ZWI4NzlmOTI0MDA5NDM4YjQ4MWM2Y2Q3ODg5YTAwMmVkNWVlMzgyYmM5MTkwZGE2ZmMwMjZlNDc5NTU4ZTQ0NzU2NzdlOWFhOWUzMDUwZTI3NjU2OTRkZmM4MWY1NmU4ODBiOTZlNzE2MGM5ODBkZDk4ZWRkM2RmZmZmZmZmZmZmZmZmZmZmZlwiXG4gICAgfVxufSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgTWlsbGVyUmFiaW4gPSByZXF1aXJlKCdtaWxsZXItcmFiaW4nKTtcbnZhciBtaWxsZXJSYWJpbiA9IG5ldyBNaWxsZXJSYWJpbigpO1xudmFyIFRXRU5UWUZPVVIgPSBuZXcgQk4oMjQpO1xudmFyIEVMRVZFTiA9IG5ldyBCTigxMSk7XG52YXIgVEVOID0gbmV3IEJOKDEwKTtcbnZhciBUSFJFRSA9IG5ldyBCTigzKTtcbnZhciBTRVZFTiA9IG5ldyBCTig3KTtcbnZhciBwcmltZXMgPSByZXF1aXJlKCcuL2dlbmVyYXRlUHJpbWUnKTtcbnZhciByYW5kb21CeXRlcyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IERIO1xuXG5mdW5jdGlvbiBzZXRQdWJsaWNLZXkocHViLCBlbmMpIHtcbiAgZW5jID0gZW5jIHx8ICd1dGY4JztcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocHViKSkge1xuICAgIHB1YiA9IG5ldyBCdWZmZXIocHViLCBlbmMpO1xuICB9XG4gIHRoaXMuX3B1YiA9IG5ldyBCTihwdWIpO1xuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gc2V0UHJpdmF0ZUtleShwcml2LCBlbmMpIHtcbiAgZW5jID0gZW5jIHx8ICd1dGY4JztcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocHJpdikpIHtcbiAgICBwcml2ID0gbmV3IEJ1ZmZlcihwcml2LCBlbmMpO1xuICB9XG4gIHRoaXMuX3ByaXYgPSBuZXcgQk4ocHJpdik7XG4gIHJldHVybiB0aGlzO1xufVxuXG52YXIgcHJpbWVDYWNoZSA9IHt9O1xuZnVuY3Rpb24gY2hlY2tQcmltZShwcmltZSwgZ2VuZXJhdG9yKSB7XG4gIHZhciBnZW4gPSBnZW5lcmF0b3IudG9TdHJpbmcoJ2hleCcpO1xuICB2YXIgaGV4ID0gW2dlbiwgcHJpbWUudG9TdHJpbmcoMTYpXS5qb2luKCdfJyk7XG4gIGlmIChoZXggaW4gcHJpbWVDYWNoZSkge1xuICAgIHJldHVybiBwcmltZUNhY2hlW2hleF07XG4gIH1cbiAgdmFyIGVycm9yID0gMDtcbiAgXG4gIGlmIChwcmltZS5pc0V2ZW4oKSB8fFxuICAgICFwcmltZXMuc2ltcGxlU2lldmUgfHxcbiAgICAhcHJpbWVzLmZlcm1hdFRlc3QocHJpbWUpIHx8XG4gICAgIW1pbGxlclJhYmluLnRlc3QocHJpbWUpKSB7XG4gICAgLy9ub3QgYSBwcmltZSBzbyArMVxuICAgIGVycm9yICs9IDE7XG4gICAgXG4gICAgaWYgKGdlbiA9PT0gJzAyJyB8fCBnZW4gPT09ICcwNScpIHtcbiAgICAgIC8vIHdlJ2QgYmUgYWJsZSB0byBjaGVjayB0aGUgZ2VuZXJhdG9yXG4gICAgICAvLyBpdCB3b3VsZCBmYWlsIHNvICs4XG4gICAgICBlcnJvciArPSA4O1xuICAgIH0gZWxzZSB7XG4gICAgICAvL3dlIHdvdWxkbid0IGJlIGFibGUgdG8gdGVzdCB0aGUgZ2VuZXJhdG9yXG4gICAgICAvLyBzbyArNFxuICAgICAgZXJyb3IgKz0gNDtcbiAgICB9XG4gICAgcHJpbWVDYWNoZVtoZXhdID0gZXJyb3I7XG4gICAgcmV0dXJuIGVycm9yO1xuICB9XG4gIGlmICghbWlsbGVyUmFiaW4udGVzdChwcmltZS5zaHJuKDEpKSkge1xuICAgIC8vbm90IGEgc2FmZSBwcmltZVxuICAgIGVycm9yICs9IDI7XG4gIH1cbiAgdmFyIHJlbTtcbiAgc3dpdGNoIChnZW4pIHtcbiAgICBjYXNlICcwMic6XG4gICAgICBpZiAocHJpbWUubW9kKFRXRU5UWUZPVVIpLmNtcChFTEVWRU4pKSB7XG4gICAgICAgIC8vIHVuc3VpZGFibGUgZ2VuZXJhdG9yXG4gICAgICAgIGVycm9yICs9IDg7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICcwNSc6XG4gICAgICByZW0gPSBwcmltZS5tb2QoVEVOKTtcbiAgICAgIGlmIChyZW0uY21wKFRIUkVFKSAmJiByZW0uY21wKFNFVkVOKSkge1xuICAgICAgICAvLyBwcmltZSBtb2QgMTAgbmVlZHMgdG8gZXF1YWwgMyBvciA3XG4gICAgICAgIGVycm9yICs9IDg7XG4gICAgICB9IFxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDogXG4gICAgICBlcnJvciArPSA0O1xuICB9XG4gIHByaW1lQ2FjaGVbaGV4XSA9IGVycm9yO1xuICByZXR1cm4gZXJyb3I7XG59XG5cbmZ1bmN0aW9uIGRlZmluZUVycm9yIChzZWxmLCBlcnJvcikge1xuICB0cnkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLCAndmVyaWZ5RXJyb3InLCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IGVycm9yLFxuICAgICAgd3JpdGFibGU6IGZhbHNlXG4gICAgfSk7XG4gIH0gY2F0Y2goZSkge1xuICAgIHNlbGYudmVyaWZ5RXJyb3IgPSBlcnJvcjtcbiAgfVxufVxuZnVuY3Rpb24gREgocHJpbWUsIGdlbmVyYXRvciwgbWFsbGVhYmxlKSB7XG4gIHRoaXMuc2V0R2VuZXJhdG9yKGdlbmVyYXRvcik7XG4gIHRoaXMuX19wcmltZSA9IG5ldyBCTihwcmltZSk7XG4gIHRoaXMuX3ByaW1lID0gQk4ubW9udCh0aGlzLl9fcHJpbWUpO1xuICB0aGlzLl9wcmltZUxlbiA9IHByaW1lLmxlbmd0aDtcbiAgdGhpcy5fcHViID0gdm9pZCAwO1xuICB0aGlzLl9wcml2ID0gdm9pZCAwO1xuICBcbiAgaWYgKG1hbGxlYWJsZSkge1xuICAgIHRoaXMuc2V0UHVibGljS2V5ID0gc2V0UHVibGljS2V5O1xuICAgIHRoaXMuc2V0UHJpdmF0ZUtleSA9IHNldFByaXZhdGVLZXk7XG4gICAgZGVmaW5lRXJyb3IodGhpcywgY2hlY2tQcmltZSh0aGlzLl9fcHJpbWUsIGdlbmVyYXRvcikpO1xuICB9IGVsc2Uge1xuICAgIGRlZmluZUVycm9yKHRoaXMsIDgpO1xuICB9XG59XG5cbkRILnByb3RvdHlwZS5nZW5lcmF0ZUtleXMgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy5fcHJpdikge1xuICAgIHRoaXMuX3ByaXYgPSBuZXcgQk4ocmFuZG9tQnl0ZXModGhpcy5fcHJpbWVMZW4pKTtcbiAgfVxuICB0aGlzLl9wdWIgPSB0aGlzLl9nZW4udG9SZWQodGhpcy5fcHJpbWUpLnJlZFBvdyh0aGlzLl9wcml2KS5mcm9tUmVkKCk7XG4gIHJldHVybiB0aGlzLmdldFB1YmxpY0tleSgpO1xufTtcblxuREgucHJvdG90eXBlLmNvbXB1dGVTZWNyZXQgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgb3RoZXIgPSBuZXcgQk4ob3RoZXIpO1xuICBvdGhlciA9IG90aGVyLnRvUmVkKHRoaXMuX3ByaW1lKTtcbiAgdmFyIHNlY3JldCA9IG90aGVyLnJlZFBvdyh0aGlzLl9wcml2KS5mcm9tUmVkKCk7XG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKHNlY3JldC50b0FycmF5KCkpO1xuICB2YXIgcHJpbWUgPSB0aGlzLmdldFByaW1lKCk7XG4gIGlmIChvdXQubGVuZ3RoIDwgcHJpbWUubGVuZ3RoKSB7XG4gICAgdmFyIGZyb250ID0gbmV3IEJ1ZmZlcihwcmltZS5sZW5ndGggLSBvdXQubGVuZ3RoKTtcbiAgICBmcm9udC5maWxsKDApO1xuICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoW2Zyb250LCBvdXRdKTtcbiAgfVxuICByZXR1cm4gb3V0O1xufTtcblxuREgucHJvdG90eXBlLmdldFB1YmxpY0tleSA9IGZ1bmN0aW9uIGdldFB1YmxpY0tleShlbmMpIHtcbiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKHRoaXMuX3B1YiwgZW5jKTtcbn07XG5cbkRILnByb3RvdHlwZS5nZXRQcml2YXRlS2V5ID0gZnVuY3Rpb24gZ2V0UHJpdmF0ZUtleShlbmMpIHtcbiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKHRoaXMuX3ByaXYsIGVuYyk7XG59O1xuXG5ESC5wcm90b3R5cGUuZ2V0UHJpbWUgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZSh0aGlzLl9fcHJpbWUsIGVuYyk7XG59O1xuXG5ESC5wcm90b3R5cGUuZ2V0R2VuZXJhdG9yID0gZnVuY3Rpb24gKGVuYykge1xuICByZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUodGhpcy5fZ2VuLCBlbmMpO1xufTtcblxuREgucHJvdG90eXBlLnNldEdlbmVyYXRvciA9IGZ1bmN0aW9uIChnZW4sIGVuYykge1xuICBlbmMgPSBlbmMgfHwgJ3V0ZjgnO1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihnZW4pKSB7XG4gICAgZ2VuID0gbmV3IEJ1ZmZlcihnZW4sIGVuYyk7XG4gIH1cbiAgdGhpcy5fZ2VuID0gbmV3IEJOKGdlbik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZm9ybWF0UmV0dXJuVmFsdWUoYm4sIGVuYykge1xuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcihibi50b0FycmF5KCkpO1xuICBpZiAoIWVuYykge1xuICAgIHJldHVybiBidWY7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJ1Zi50b1N0cmluZyhlbmMpO1xuICB9XG59XG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlpHbG1abWxsTFdobGJHeHRZVzR2YkdsaUwyUm9MbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKMllYSWdRazRnUFNCeVpYRjFhWEpsS0NkaWJpNXFjeWNwTzF4dWRtRnlJRTFwYkd4bGNsSmhZbWx1SUQwZ2NtVnhkV2x5WlNnbmJXbHNiR1Z5TFhKaFltbHVKeWs3WEc1MllYSWdiV2xzYkdWeVVtRmlhVzRnUFNCdVpYY2dUV2xzYkdWeVVtRmlhVzRvS1R0Y2JuWmhjaUJVVjBWT1ZGbEdUMVZTSUQwZ2JtVjNJRUpPS0RJMEtUdGNiblpoY2lCRlRFVldSVTRnUFNCdVpYY2dRazRvTVRFcE8xeHVkbUZ5SUZSRlRpQTlJRzVsZHlCQ1RpZ3hNQ2s3WEc1MllYSWdWRWhTUlVVZ1BTQnVaWGNnUWs0b015azdYRzUyWVhJZ1UwVldSVTRnUFNCdVpYY2dRazRvTnlrN1hHNTJZWElnY0hKcGJXVnpJRDBnY21WeGRXbHlaU2duTGk5blpXNWxjbUYwWlZCeWFXMWxKeWs3WEc1MllYSWdjbUZ1Wkc5dFFubDBaWE1nUFNCeVpYRjFhWEpsS0NkeVlXNWtiMjFpZVhSbGN5Y3BPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JFU0R0Y2JseHVablZ1WTNScGIyNGdjMlYwVUhWaWJHbGpTMlY1S0hCMVlpd2daVzVqS1NCN1hHNGdJR1Z1WXlBOUlHVnVZeUI4ZkNBbmRYUm1PQ2M3WEc0Z0lHbG1JQ2doUW5WbVptVnlMbWx6UW5WbVptVnlLSEIxWWlrcElIdGNiaUFnSUNCd2RXSWdQU0J1WlhjZ1FuVm1abVZ5S0hCMVlpd2daVzVqS1R0Y2JpQWdmVnh1SUNCMGFHbHpMbDl3ZFdJZ1BTQnVaWGNnUWs0b2NIVmlLVHRjYmlBZ2NtVjBkWEp1SUhSb2FYTTdYRzU5WEc1Y2JtWjFibU4wYVc5dUlITmxkRkJ5YVhaaGRHVkxaWGtvY0hKcGRpd2daVzVqS1NCN1hHNGdJR1Z1WXlBOUlHVnVZeUI4ZkNBbmRYUm1PQ2M3WEc0Z0lHbG1JQ2doUW5WbVptVnlMbWx6UW5WbVptVnlLSEJ5YVhZcEtTQjdYRzRnSUNBZ2NISnBkaUE5SUc1bGR5QkNkV1ptWlhJb2NISnBkaXdnWlc1aktUdGNiaUFnZlZ4dUlDQjBhR2x6TGw5d2NtbDJJRDBnYm1WM0lFSk9LSEJ5YVhZcE8xeHVJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JuMWNibHh1ZG1GeUlIQnlhVzFsUTJGamFHVWdQU0I3ZlR0Y2JtWjFibU4wYVc5dUlHTm9aV05yVUhKcGJXVW9jSEpwYldVc0lHZGxibVZ5WVhSdmNpa2dlMXh1SUNCMllYSWdaMlZ1SUQwZ1oyVnVaWEpoZEc5eUxuUnZVM1J5YVc1bktDZG9aWGduS1R0Y2JpQWdkbUZ5SUdobGVDQTlJRnRuWlc0c0lIQnlhVzFsTG5SdlUzUnlhVzVuS0RFMktWMHVhbTlwYmlnblh5Y3BPMXh1SUNCcFppQW9hR1Y0SUdsdUlIQnlhVzFsUTJGamFHVXBJSHRjYmlBZ0lDQnlaWFIxY200Z2NISnBiV1ZEWVdOb1pWdG9aWGhkTzF4dUlDQjlYRzRnSUhaaGNpQmxjbkp2Y2lBOUlEQTdYRzRnSUZ4dUlDQnBaaUFvY0hKcGJXVXVhWE5GZG1WdUtDa2dmSHhjYmlBZ0lDQWhjSEpwYldWekxuTnBiWEJzWlZOcFpYWmxJSHg4WEc0Z0lDQWdJWEJ5YVcxbGN5NW1aWEp0WVhSVVpYTjBLSEJ5YVcxbEtTQjhmRnh1SUNBZ0lDRnRhV3hzWlhKU1lXSnBiaTUwWlhOMEtIQnlhVzFsS1NrZ2UxeHVJQ0FnSUM4dmJtOTBJR0VnY0hKcGJXVWdjMjhnS3pGY2JpQWdJQ0JsY25KdmNpQXJQU0F4TzF4dUlDQWdJRnh1SUNBZ0lHbG1JQ2huWlc0Z1BUMDlJQ2N3TWljZ2ZId2daMlZ1SUQwOVBTQW5NRFVuS1NCN1hHNGdJQ0FnSUNBdkx5QjNaU2RrSUdKbElHRmliR1VnZEc4Z1kyaGxZMnNnZEdobElHZGxibVZ5WVhSdmNseHVJQ0FnSUNBZ0x5OGdhWFFnZDI5MWJHUWdabUZwYkNCemJ5QXJPRnh1SUNBZ0lDQWdaWEp5YjNJZ0t6MGdPRHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0x5OTNaU0IzYjNWc1pHNG5kQ0JpWlNCaFlteGxJSFJ2SUhSbGMzUWdkR2hsSUdkbGJtVnlZWFJ2Y2x4dUlDQWdJQ0FnTHk4Z2MyOGdLelJjYmlBZ0lDQWdJR1Z5Y205eUlDczlJRFE3WEc0Z0lDQWdmVnh1SUNBZ0lIQnlhVzFsUTJGamFHVmJhR1Y0WFNBOUlHVnljbTl5TzF4dUlDQWdJSEpsZEhWeWJpQmxjbkp2Y2p0Y2JpQWdmVnh1SUNCcFppQW9JVzFwYkd4bGNsSmhZbWx1TG5SbGMzUW9jSEpwYldVdWMyaHliaWd4S1NrcElIdGNiaUFnSUNBdkwyNXZkQ0JoSUhOaFptVWdjSEpwYldWY2JpQWdJQ0JsY25KdmNpQXJQU0F5TzF4dUlDQjlYRzRnSUhaaGNpQnlaVzA3WEc0Z0lITjNhWFJqYUNBb1oyVnVLU0I3WEc0Z0lDQWdZMkZ6WlNBbk1ESW5PbHh1SUNBZ0lDQWdhV1lnS0hCeWFXMWxMbTF2WkNoVVYwVk9WRmxHVDFWU0tTNWpiWEFvUlV4RlZrVk9LU2tnZTF4dUlDQWdJQ0FnSUNBdkx5QjFibk4xYVdSaFlteGxJR2RsYm1WeVlYUnZjbHh1SUNBZ0lDQWdJQ0JsY25KdmNpQXJQU0E0TzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ1kyRnpaU0FuTURVbk9seHVJQ0FnSUNBZ2NtVnRJRDBnY0hKcGJXVXViVzlrS0ZSRlRpazdYRzRnSUNBZ0lDQnBaaUFvY21WdExtTnRjQ2hVU0ZKRlJTa2dKaVlnY21WdExtTnRjQ2hUUlZaRlRpa3BJSHRjYmlBZ0lDQWdJQ0FnTHk4Z2NISnBiV1VnYlc5a0lERXdJRzVsWldSeklIUnZJR1Z4ZFdGc0lETWdiM0lnTjF4dUlDQWdJQ0FnSUNCbGNuSnZjaUFyUFNBNE8xeHVJQ0FnSUNBZ2ZTQmNiaUFnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJR1JsWm1GMWJIUTZJRnh1SUNBZ0lDQWdaWEp5YjNJZ0t6MGdORHRjYmlBZ2ZWeHVJQ0J3Y21sdFpVTmhZMmhsVzJobGVGMGdQU0JsY25KdmNqdGNiaUFnY21WMGRYSnVJR1Z5Y205eU8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCa1pXWnBibVZGY25KdmNpQW9jMlZzWml3Z1pYSnliM0lwSUh0Y2JpQWdkSEo1SUh0Y2JpQWdJQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2MyVnNaaXdnSjNabGNtbG1lVVZ5Y205eUp5d2dlMXh1SUNBZ0lDQWdaVzUxYldWeVlXSnNaVG9nZEhKMVpTeGNiaUFnSUNBZ0lIWmhiSFZsT2lCbGNuSnZjaXhjYmlBZ0lDQWdJSGR5YVhSaFlteGxPaUJtWVd4elpWeHVJQ0FnSUgwcE8xeHVJQ0I5SUdOaGRHTm9LR1VwSUh0Y2JpQWdJQ0J6Wld4bUxuWmxjbWxtZVVWeWNtOXlJRDBnWlhKeWIzSTdYRzRnSUgxY2JuMWNibVoxYm1OMGFXOXVJRVJJS0hCeWFXMWxMQ0JuWlc1bGNtRjBiM0lzSUcxaGJHeGxZV0pzWlNrZ2UxeHVJQ0IwYUdsekxuTmxkRWRsYm1WeVlYUnZjaWhuWlc1bGNtRjBiM0lwTzF4dUlDQjBhR2x6TGw5ZmNISnBiV1VnUFNCdVpYY2dRazRvY0hKcGJXVXBPMXh1SUNCMGFHbHpMbDl3Y21sdFpTQTlJRUpPTG0xdmJuUW9kR2hwY3k1ZlgzQnlhVzFsS1R0Y2JpQWdkR2hwY3k1ZmNISnBiV1ZNWlc0Z1BTQndjbWx0WlM1c1pXNW5kR2c3WEc0Z0lIUm9hWE11WDNCMVlpQTlJSFp2YVdRZ01EdGNiaUFnZEdocGN5NWZjSEpwZGlBOUlIWnZhV1FnTUR0Y2JpQWdYRzRnSUdsbUlDaHRZV3hzWldGaWJHVXBJSHRjYmlBZ0lDQjBhR2x6TG5ObGRGQjFZbXhwWTB0bGVTQTlJSE5sZEZCMVlteHBZMHRsZVR0Y2JpQWdJQ0IwYUdsekxuTmxkRkJ5YVhaaGRHVkxaWGtnUFNCelpYUlFjbWwyWVhSbFMyVjVPMXh1SUNBZ0lHUmxabWx1WlVWeWNtOXlLSFJvYVhNc0lHTm9aV05yVUhKcGJXVW9kR2hwY3k1ZlgzQnlhVzFsTENCblpXNWxjbUYwYjNJcEtUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQmtaV1pwYm1WRmNuSnZjaWgwYUdsekxDQTRLVHRjYmlBZ2ZWeHVmVnh1WEc1RVNDNXdjbTkwYjNSNWNHVXVaMlZ1WlhKaGRHVkxaWGx6SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNCcFppQW9JWFJvYVhNdVgzQnlhWFlwSUh0Y2JpQWdJQ0IwYUdsekxsOXdjbWwySUQwZ2JtVjNJRUpPS0hKaGJtUnZiVUo1ZEdWektIUm9hWE11WDNCeWFXMWxUR1Z1S1NrN1hHNGdJSDFjYmlBZ2RHaHBjeTVmY0hWaUlEMGdkR2hwY3k1ZloyVnVMblJ2VW1Wa0tIUm9hWE11WDNCeWFXMWxLUzV5WldSUWIzY29kR2hwY3k1ZmNISnBkaWt1Wm5KdmJWSmxaQ2dwTzF4dUlDQnlaWFIxY200Z2RHaHBjeTVuWlhSUWRXSnNhV05MWlhrb0tUdGNibjA3WEc1Y2JrUklMbkJ5YjNSdmRIbHdaUzVqYjIxd2RYUmxVMlZqY21WMElEMGdablZ1WTNScGIyNGdLRzkwYUdWeUtTQjdYRzRnSUc5MGFHVnlJRDBnYm1WM0lFSk9LRzkwYUdWeUtUdGNiaUFnYjNSb1pYSWdQU0J2ZEdobGNpNTBiMUpsWkNoMGFHbHpMbDl3Y21sdFpTazdYRzRnSUhaaGNpQnpaV055WlhRZ1BTQnZkR2hsY2k1eVpXUlFiM2NvZEdocGN5NWZjSEpwZGlrdVpuSnZiVkpsWkNncE8xeHVJQ0IyWVhJZ2IzVjBJRDBnYm1WM0lFSjFabVpsY2loelpXTnlaWFF1ZEc5QmNuSmhlU2dwS1R0Y2JpQWdkbUZ5SUhCeWFXMWxJRDBnZEdocGN5NW5aWFJRY21sdFpTZ3BPMXh1SUNCcFppQW9iM1YwTG14bGJtZDBhQ0E4SUhCeWFXMWxMbXhsYm1kMGFDa2dlMXh1SUNBZ0lIWmhjaUJtY205dWRDQTlJRzVsZHlCQ2RXWm1aWElvY0hKcGJXVXViR1Z1WjNSb0lDMGdiM1YwTG14bGJtZDBhQ2s3WEc0Z0lDQWdabkp2Ym5RdVptbHNiQ2d3S1R0Y2JpQWdJQ0J2ZFhRZ1BTQkNkV1ptWlhJdVkyOXVZMkYwS0Z0bWNtOXVkQ3dnYjNWMFhTazdYRzRnSUgxY2JpQWdjbVYwZFhKdUlHOTFkRHRjYm4wN1hHNWNia1JJTG5CeWIzUnZkSGx3WlM1blpYUlFkV0pzYVdOTFpYa2dQU0JtZFc1amRHbHZiaUJuWlhSUWRXSnNhV05MWlhrb1pXNWpLU0I3WEc0Z0lISmxkSFZ5YmlCbWIzSnRZWFJTWlhSMWNtNVdZV3gxWlNoMGFHbHpMbDl3ZFdJc0lHVnVZeWs3WEc1OU8xeHVYRzVFU0M1d2NtOTBiM1I1Y0dVdVoyVjBVSEpwZG1GMFpVdGxlU0E5SUdaMWJtTjBhVzl1SUdkbGRGQnlhWFpoZEdWTFpYa29aVzVqS1NCN1hHNGdJSEpsZEhWeWJpQm1iM0p0WVhSU1pYUjFjbTVXWVd4MVpTaDBhR2x6TGw5d2NtbDJMQ0JsYm1NcE8xeHVmVHRjYmx4dVJFZ3VjSEp2ZEc5MGVYQmxMbWRsZEZCeWFXMWxJRDBnWm5WdVkzUnBiMjRnS0dWdVl5a2dlMXh1SUNCeVpYUjFjbTRnWm05eWJXRjBVbVYwZFhKdVZtRnNkV1VvZEdocGN5NWZYM0J5YVcxbExDQmxibU1wTzF4dWZUdGNibHh1UkVndWNISnZkRzkwZVhCbExtZGxkRWRsYm1WeVlYUnZjaUE5SUdaMWJtTjBhVzl1SUNobGJtTXBJSHRjYmlBZ2NtVjBkWEp1SUdadmNtMWhkRkpsZEhWeWJsWmhiSFZsS0hSb2FYTXVYMmRsYml3Z1pXNWpLVHRjYm4wN1hHNWNia1JJTG5CeWIzUnZkSGx3WlM1elpYUkhaVzVsY21GMGIzSWdQU0JtZFc1amRHbHZiaUFvWjJWdUxDQmxibU1wSUh0Y2JpQWdaVzVqSUQwZ1pXNWpJSHg4SUNkMWRHWTRKenRjYmlBZ2FXWWdLQ0ZDZFdabVpYSXVhWE5DZFdabVpYSW9aMlZ1S1NrZ2UxeHVJQ0FnSUdkbGJpQTlJRzVsZHlCQ2RXWm1aWElvWjJWdUxDQmxibU1wTzF4dUlDQjlYRzRnSUhSb2FYTXVYMmRsYmlBOUlHNWxkeUJDVGloblpXNHBPMXh1SUNCeVpYUjFjbTRnZEdocGN6dGNibjA3WEc1Y2JtWjFibU4wYVc5dUlHWnZjbTFoZEZKbGRIVnlibFpoYkhWbEtHSnVMQ0JsYm1NcElIdGNiaUFnZG1GeUlHSjFaaUE5SUc1bGR5QkNkV1ptWlhJb1ltNHVkRzlCY25KaGVTZ3BLVHRjYmlBZ2FXWWdLQ0ZsYm1NcElIdGNiaUFnSUNCeVpYUjFjbTRnWW5WbU8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lISmxkSFZ5YmlCaWRXWXVkRzlUZEhKcGJtY29aVzVqS1R0Y2JpQWdmVnh1ZlNKZGZRPT0iLCJ2YXIgcmFuZG9tQnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpO1xubW9kdWxlLmV4cG9ydHMgPSBmaW5kUHJpbWU7XG5maW5kUHJpbWUuc2ltcGxlU2lldmUgPSBzaW1wbGVTaWV2ZTtcbmZpbmRQcmltZS5mZXJtYXRUZXN0ID0gZmVybWF0VGVzdDtcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgVFdFTlRZRk9VUiA9IG5ldyBCTigyNCk7XG52YXIgTWlsbGVyUmFiaW4gPSByZXF1aXJlKCdtaWxsZXItcmFiaW4nKTtcbnZhciBtaWxsZXJSYWJpbiA9IG5ldyBNaWxsZXJSYWJpbigpO1xudmFyIE9ORSA9IG5ldyBCTigxKTtcbnZhciBUV08gPSBuZXcgQk4oMik7XG52YXIgRklWRSA9IG5ldyBCTig1KTtcbnZhciBTSVhURUVOID0gbmV3IEJOKDE2KTtcbnZhciBFSUdIVCA9IG5ldyBCTig4KTtcbnZhciBURU4gPSBuZXcgQk4oMTApO1xudmFyIFRIUkVFID0gbmV3IEJOKDMpO1xudmFyIFNFVkVOID0gbmV3IEJOKDcpO1xudmFyIEVMRVZFTiA9IG5ldyBCTigxMSk7XG52YXIgRk9VUiA9IG5ldyBCTig0KTtcbnZhciBUV0VMVkUgPSBuZXcgQk4oMTIpO1xudmFyIHByaW1lcyA9IG51bGw7XG5cbmZ1bmN0aW9uIF9nZXRQcmltZXMoKSB7XG4gIGlmIChwcmltZXMgIT09IG51bGwpXG4gICAgcmV0dXJuIHByaW1lcztcblxuICB2YXIgbGltaXQgPSAweDEwMDAwMDtcbiAgdmFyIHJlcyA9IFtdO1xuICByZXNbMF0gPSAyO1xuICBmb3IgKHZhciBpID0gMSwgayA9IDM7IGsgPCBsaW1pdDsgayArPSAyKSB7XG4gICAgdmFyIHNxcnQgPSBNYXRoLmNlaWwoTWF0aC5zcXJ0KGspKTtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGkgJiYgcmVzW2pdIDw9IHNxcnQ7IGorKylcbiAgICAgIGlmIChrICUgcmVzW2pdID09PSAwKVxuICAgICAgICBicmVhaztcblxuICAgIGlmIChpICE9PSBqICYmIHJlc1tqXSA8PSBzcXJ0KVxuICAgICAgY29udGludWU7XG5cbiAgICByZXNbaSsrXSA9IGs7XG4gIH1cbiAgcHJpbWVzID0gcmVzO1xuICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBzaW1wbGVTaWV2ZShwKSB7XG4gIHZhciBwcmltZXMgPSBfZ2V0UHJpbWVzKCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmltZXMubGVuZ3RoOyBpKyspXG4gICAgaWYgKHAubW9kbihwcmltZXNbaV0pID09PSAwKSB7XG4gICAgICBpZiAocC5jbXBuKHByaW1lc1tpXSkgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBmZXJtYXRUZXN0KHApIHtcbiAgdmFyIHJlZCA9IEJOLm1vbnQocCk7XG4gIHJldHVybiBUV08udG9SZWQocmVkKS5yZWRQb3cocC5zdWJuKDEpKS5mcm9tUmVkKCkuY21wbigxKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gZmluZFByaW1lKGJpdHMsIGdlbikge1xuICBpZiAoYml0cyA8IDE2KSB7XG4gICAgLy8gdGhpcyBpcyB3aGF0IG9wZW5zc2wgZG9lc1xuICAgIGlmIChnZW4gPT09IDIgfHwgZ2VuID09PSA1KSB7XG4gICAgICByZXR1cm4gbmV3IEJOKFsweDhjLCAweDdiXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgQk4oWzB4OGMsIDB4MjddKTtcbiAgICB9XG4gIH1cbiAgZ2VuID0gbmV3IEJOKGdlbik7XG4gIHZhciBydW5zLCBjb21wO1xuICBmdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbShiaXRzKSB7XG4gICAgcnVucyA9IC0xO1xuICAgIHZhciBvdXQgPSBuZXcgQk4ocmFuZG9tQnl0ZXMoTWF0aC5jZWlsKGJpdHMgLyA4KSkpO1xuICAgIHdoaWxlIChvdXQuYml0TGVuZ3RoKCkgPiBiaXRzKSB7XG4gICAgICBvdXQuaXNocm4oMSk7XG4gICAgfVxuICAgIGlmIChvdXQuaXNFdmVuKCkpIHtcbiAgICAgIG91dC5pYWRkKE9ORSk7XG4gICAgfVxuICAgIGlmICghb3V0LnRlc3RuKDEpKSB7XG4gICAgICBvdXQuaWFkZChUV08pO1xuICAgIH1cbiAgICBpZiAoIWdlbi5jbXAoVFdPKSkge1xuICAgICAgd2hpbGUgKG91dC5tb2QoVFdFTlRZRk9VUikuY21wKEVMRVZFTikpIHtcbiAgICAgICAgb3V0LmlhZGQoRk9VUik7XG4gICAgICB9XG4gICAgICBjb21wID0ge1xuICAgICAgICBtYWpvcjogW1RXRU5UWUZPVVJdLFxuICAgICAgICBtaW5vcjogW1RXRUxWRV1cbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICghZ2VuLmNtcChGSVZFKSkge1xuICAgICAgcmVtID0gb3V0Lm1vZChURU4pO1xuICAgICAgd2hpbGUgKHJlbS5jbXAoVEhSRUUpKSB7XG4gICAgICAgIG91dC5pYWRkKEZPVVIpO1xuICAgICAgICByZW0gPSBvdXQubW9kKFRFTik7XG4gICAgICB9XG4gICAgICBjb21wID0ge1xuICAgICAgICBtYWpvcjogW0ZPVVIsIFNJWFRFRU5dLFxuICAgICAgICBtaW5vcjogW1RXTywgRUlHSFRdXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21wID0ge1xuICAgICAgICBtYWpvcjogW0ZPVVJdLFxuICAgICAgICBtaW5vcjogW1RXT11cbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH1cbiAgdmFyIG51bSA9IGdlbmVyYXRlUmFuZG9tKGJpdHMpO1xuXG4gIHZhciBuMiA9IG51bS5zaHJuKDEpO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgd2hpbGUgKG51bS5iaXRMZW5ndGgoKSA+IGJpdHMpIHtcbiAgICAgIG51bSA9IGdlbmVyYXRlUmFuZG9tKGJpdHMpO1xuICAgICAgbjIgPSBudW0uc2hybigxKTtcbiAgICB9XG4gICAgcnVucysrO1xuICAgIGlmIChzaW1wbGVTaWV2ZShuMikgJiYgIHNpbXBsZVNpZXZlKG51bSkgJiZcbiAgICAgIGZlcm1hdFRlc3QobjIpICYmICBmZXJtYXRUZXN0KG51bSkgJiZcbiAgICAgIG1pbGxlclJhYmluLnRlc3QobjIpICYmIG1pbGxlclJhYmluLnRlc3QobnVtKSkge1xuICAgICAgcmV0dXJuIG51bTtcbiAgICB9XG4gICAgbnVtLmlhZGQoY29tcC5tYWpvcltydW5zJWNvbXAubWFqb3IubGVuZ3RoXSk7XG4gICAgbjIuaWFkZChjb21wLm1pbm9yW3J1bnMlY29tcC5taW5vci5sZW5ndGhdKTtcbiAgfVxuXG59IiwidmFyIGJuID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBicm9yYW5kID0gcmVxdWlyZSgnYnJvcmFuZCcpO1xuXG5mdW5jdGlvbiBNaWxsZXJSYWJpbihyYW5kKSB7XG4gIHRoaXMucmFuZCA9IHJhbmQgfHwgbmV3IGJyb3JhbmQuUmFuZCgpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBNaWxsZXJSYWJpbjtcblxuTWlsbGVyUmFiaW4uY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKHJhbmQpIHtcbiAgcmV0dXJuIG5ldyBNaWxsZXJSYWJpbihyYW5kKTtcbn07XG5cbk1pbGxlclJhYmluLnByb3RvdHlwZS5fcmFuZCA9IGZ1bmN0aW9uIF9yYW5kKG4pIHtcbiAgdmFyIGxlbiA9IG4uYml0TGVuZ3RoKCk7XG4gIHZhciBidWYgPSB0aGlzLnJhbmQuZ2VuZXJhdGUoTWF0aC5jZWlsKGxlbiAvIDgpKTtcblxuICAvLyBTZXQgbG93IGJpdHNcbiAgYnVmWzBdIHw9IDM7XG5cbiAgLy8gTWFzayBoaWdoIGJpdHNcbiAgdmFyIG1hc2sgPSBsZW4gJiAweDc7XG4gIGlmIChtYXNrICE9PSAwKVxuICAgIGJ1ZltidWYubGVuZ3RoIC0gMV0gPj49IDcgLSBtYXNrO1xuXG4gIHJldHVybiBuZXcgYm4oYnVmKTtcbn1cblxuTWlsbGVyUmFiaW4ucHJvdG90eXBlLnRlc3QgPSBmdW5jdGlvbiB0ZXN0KG4sIGssIGNiKSB7XG4gIHZhciBsZW4gPSBuLmJpdExlbmd0aCgpO1xuICB2YXIgcmVkID0gYm4ubW9udChuKTtcbiAgdmFyIHJvbmUgPSBuZXcgYm4oMSkudG9SZWQocmVkKTtcblxuICBpZiAoIWspXG4gICAgayA9IE1hdGgubWF4KDEsIChsZW4gLyA0OCkgfCAwKTtcblxuICAvLyBGaW5kIGQgYW5kIHMsIChuIC0gMSkgPSAoMiBeIHMpICogZDtcbiAgdmFyIG4xID0gbi5zdWJuKDEpO1xuICB2YXIgbjIgPSBuMS5zdWJuKDEpO1xuICBmb3IgKHZhciBzID0gMDsgIW4xLnRlc3RuKHMpOyBzKyspIHt9XG4gIHZhciBkID0gbi5zaHJuKHMpO1xuXG4gIHZhciBybjEgPSBuMS50b1JlZChyZWQpO1xuXG4gIHZhciBwcmltZSA9IHRydWU7XG4gIGZvciAoOyBrID4gMDsgay0tKSB7XG4gICAgdmFyIGEgPSB0aGlzLl9yYW5kKG4yKTtcbiAgICBpZiAoY2IpXG4gICAgICBjYihhKTtcblxuICAgIHZhciB4ID0gYS50b1JlZChyZWQpLnJlZFBvdyhkKTtcbiAgICBpZiAoeC5jbXAocm9uZSkgPT09IDAgfHwgeC5jbXAocm4xKSA9PT0gMClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBzOyBpKyspIHtcbiAgICAgIHggPSB4LnJlZFNxcigpO1xuXG4gICAgICBpZiAoeC5jbXAocm9uZSkgPT09IDApXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIGlmICh4LmNtcChybjEpID09PSAwKVxuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoaSA9PT0gcylcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBwcmltZTtcbn07XG5cbk1pbGxlclJhYmluLnByb3RvdHlwZS5nZXREaXZpc29yID0gZnVuY3Rpb24gZ2V0RGl2aXNvcihuLCBrKSB7XG4gIHZhciBsZW4gPSBuLmJpdExlbmd0aCgpO1xuICB2YXIgcmVkID0gYm4ubW9udChuKTtcbiAgdmFyIHJvbmUgPSBuZXcgYm4oMSkudG9SZWQocmVkKTtcblxuICBpZiAoIWspXG4gICAgayA9IE1hdGgubWF4KDEsIChsZW4gLyA0OCkgfCAwKTtcblxuICAvLyBGaW5kIGQgYW5kIHMsIChuIC0gMSkgPSAoMiBeIHMpICogZDtcbiAgdmFyIG4xID0gbi5zdWJuKDEpO1xuICB2YXIgbjIgPSBuMS5zdWJuKDEpO1xuICBmb3IgKHZhciBzID0gMDsgIW4xLnRlc3RuKHMpOyBzKyspIHt9XG4gIHZhciBkID0gbi5zaHJuKHMpO1xuXG4gIHZhciBybjEgPSBuMS50b1JlZChyZWQpO1xuXG4gIGZvciAoOyBrID4gMDsgay0tKSB7XG4gICAgdmFyIGEgPSB0aGlzLl9yYW5kKG4yKTtcblxuICAgIHZhciBnID0gbi5nY2QoYSk7XG4gICAgaWYgKGcuY21wbigxKSAhPT0gMClcbiAgICAgIHJldHVybiBnO1xuXG4gICAgdmFyIHggPSBhLnRvUmVkKHJlZCkucmVkUG93KGQpO1xuICAgIGlmICh4LmNtcChyb25lKSA9PT0gMCB8fCB4LmNtcChybjEpID09PSAwKVxuICAgICAgY29udGludWU7XG5cbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IHM7IGkrKykge1xuICAgICAgeCA9IHgucmVkU3FyKCk7XG5cbiAgICAgIGlmICh4LmNtcChyb25lKSA9PT0gMClcbiAgICAgICAgcmV0dXJuIHguZnJvbVJlZCgpLnN1Ym4oMSkuZ2NkKG4pO1xuICAgICAgaWYgKHguY21wKHJuMSkgPT09IDApXG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChpID09PSBzKSB7XG4gICAgICB4ID0geC5yZWRTcXIoKTtcbiAgICAgIHJldHVybiB4LmZyb21SZWQoKS5zdWJuKDEpLmdjZChuKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuIiwiYXJndW1lbnRzWzRdW1wiL2hvbWUvdWJ1bnR1L3N0YWdpbmcvYXBwcy9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyZWF0ZS1lY2RoL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9ub2RlX21vZHVsZXMvYnJvcmFuZC9pbmRleC5qc1wiXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykiLCJhcmd1bWVudHNbNF1bXCIvaG9tZS91YnVudHUvc3RhZ2luZy9hcHBzL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3JlYXRlLWVjZGgvbm9kZV9tb2R1bGVzL2JuLmpzL2xpYi9ibi5qc1wiXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykiLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCdlbGxpcHRpYycpO1xudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFQ0RIKGN1cnZlKSB7XG5cdHJldHVybiBuZXcgRUNESChjdXJ2ZSk7XG59O1xuXG52YXIgYWxpYXNlcyA9IHtcblx0c2VjcDI1NmsxOiB7XG5cdFx0bmFtZTogJ3NlY3AyNTZrMScsXG5cdFx0Ynl0ZUxlbmd0aDogMzJcblx0fSxcblx0c2VjcDIyNHIxOiB7XG5cdFx0bmFtZTogJ3AyMjQnLFxuXHRcdGJ5dGVMZW5ndGg6IDI4XG5cdH0sXG5cdHByaW1lMjU2djE6IHtcblx0XHRuYW1lOiAncDI1NicsXG5cdFx0Ynl0ZUxlbmd0aDogMzJcblx0fSxcblx0cHJpbWUxOTJ2MToge1xuXHRcdG5hbWU6ICdwMTkyJyxcblx0XHRieXRlTGVuZ3RoOiAyNFxuXHR9LFxuXHRlZDI1NTE5OiB7XG5cdFx0bmFtZTogJ2VkMjU1MTknLFxuXHRcdGJ5dGVMZW5ndGg6IDMyXG5cdH1cbn07XG5cbmFsaWFzZXMucDIyNCA9IGFsaWFzZXMuc2VjcDIyNHIxO1xuYWxpYXNlcy5wMjU2ID0gYWxpYXNlcy5zZWNwMjU2cjEgPSBhbGlhc2VzLnByaW1lMjU2djE7XG5hbGlhc2VzLnAxOTIgPSBhbGlhc2VzLnNlY3AxOTJyMSA9IGFsaWFzZXMucHJpbWUxOTJ2MTtcblxuZnVuY3Rpb24gRUNESChjdXJ2ZSkge1xuXHR0aGlzLmN1cnZlVHlwZSA9IGFsaWFzZXNbY3VydmVdO1xuXHRpZiAoIXRoaXMuY3VydmVUeXBlICkge1xuXHRcdHRoaXMuY3VydmVUeXBlID0ge1xuXHRcdFx0bmFtZTogY3VydmVcblx0XHR9O1xuXHR9XG5cdHRoaXMuY3VydmUgPSBuZXcgZWxsaXB0aWMuZWModGhpcy5jdXJ2ZVR5cGUubmFtZSk7XG5cdHRoaXMua2V5cyA9IHZvaWQgMDtcbn1cblxuRUNESC5wcm90b3R5cGUuZ2VuZXJhdGVLZXlzID0gZnVuY3Rpb24gKGVuYywgZm9ybWF0KSB7XG5cdHRoaXMua2V5cyA9IHRoaXMuY3VydmUuZ2VuS2V5UGFpcigpO1xuXHRyZXR1cm4gdGhpcy5nZXRQdWJsaWNLZXkoZW5jLCBmb3JtYXQpO1xufTtcblxuRUNESC5wcm90b3R5cGUuY29tcHV0ZVNlY3JldCA9IGZ1bmN0aW9uIChvdGhlciwgaW5lbmMsIGVuYykge1xuXHRpbmVuYyA9IGluZW5jIHx8ICd1dGY4Jztcblx0aWYgKCFCdWZmZXIuaXNCdWZmZXIob3RoZXIpKSB7XG5cdFx0b3RoZXIgPSBuZXcgQnVmZmVyKG90aGVyLCBpbmVuYyk7XG5cdH1cblx0dmFyIG90aGVyUHViID0gdGhpcy5jdXJ2ZS5rZXlGcm9tUHVibGljKG90aGVyKS5nZXRQdWJsaWMoKTtcblx0dmFyIG91dCA9IG90aGVyUHViLm11bCh0aGlzLmtleXMuZ2V0UHJpdmF0ZSgpKS5nZXRYKCk7XG5cdHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZShvdXQsIGVuYywgdGhpcy5jdXJ2ZVR5cGUuYnl0ZUxlbmd0aCk7XG59O1xuXG5FQ0RILnByb3RvdHlwZS5nZXRQdWJsaWNLZXkgPSBmdW5jdGlvbiAoZW5jLCBmb3JtYXQpIHtcblx0dmFyIGtleSA9IHRoaXMua2V5cy5nZXRQdWJsaWMoZm9ybWF0ID09PSAnY29tcHJlc3NlZCcsIHRydWUpO1xuXHRpZiAoZm9ybWF0ID09PSAnaHlicmlkJykge1xuXHRcdGlmIChrZXlba2V5Lmxlbmd0aCAtIDFdICUgMikge1xuXHRcdFx0a2V5WzBdID0gNztcblx0XHR9IGVsc2Uge1xuXHRcdFx0a2V5IFswXSA9IDY7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZShrZXksIGVuYyk7XG59O1xuXG5FQ0RILnByb3RvdHlwZS5nZXRQcml2YXRlS2V5ID0gZnVuY3Rpb24gKGVuYykge1xuXHRyZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUodGhpcy5rZXlzLmdldFByaXZhdGUoKSwgZW5jKTtcbn07XG5cbkVDREgucHJvdG90eXBlLnNldFB1YmxpY0tleSA9IGZ1bmN0aW9uIChwdWIsIGVuYykge1xuXHRlbmMgPSBlbmMgfHwgJ3V0ZjgnO1xuXHRpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwdWIpKSB7XG5cdFx0cHViID0gbmV3IEJ1ZmZlcihwdWIsIGVuYyk7XG5cdH1cblx0dGhpcy5rZXlzLl9pbXBvcnRQdWJsaWMocHViKTtcblx0cmV0dXJuIHRoaXM7XG59O1xuXG5FQ0RILnByb3RvdHlwZS5zZXRQcml2YXRlS2V5ID0gZnVuY3Rpb24gKHByaXYsIGVuYykge1xuXHRlbmMgPSBlbmMgfHwgJ3V0ZjgnO1xuXHRpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwcml2KSkge1xuXHRcdHByaXYgPSBuZXcgQnVmZmVyKHByaXYsIGVuYyk7XG5cdH1cblx0dmFyIF9wcml2ID0gbmV3IEJOKHByaXYpO1xuXHRfcHJpdiA9IF9wcml2LnRvU3RyaW5nKDE2KTtcblx0dGhpcy5rZXlzLl9pbXBvcnRQcml2YXRlKF9wcml2KTtcblx0cmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBmb3JtYXRSZXR1cm5WYWx1ZShibiwgZW5jLCBsZW4pIHtcblx0aWYgKCFBcnJheS5pc0FycmF5KGJuKSkge1xuXHRcdGJuID0gYm4udG9BcnJheSgpO1xuXHR9XG5cdHZhciBidWYgPSBuZXcgQnVmZmVyKGJuKTtcblx0aWYgKGxlbiAmJiBidWYubGVuZ3RoIDwgbGVuKSB7XG5cdFx0dmFyIHplcm9zID0gbmV3IEJ1ZmZlcihsZW4gLSBidWYubGVuZ3RoKTtcblx0XHR6ZXJvcy5maWxsKDApO1xuXHRcdGJ1ZiA9IEJ1ZmZlci5jb25jYXQoW3plcm9zLCBidWZdKTtcblx0fVxuXHRpZiAoIWVuYykge1xuXHRcdHJldHVybiBidWY7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIGJ1Zi50b1N0cmluZyhlbmMpO1xuXHR9XG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WTNKbFlYUmxMV1ZqWkdndlluSnZkM05sY2k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUdWc2JHbHdkR2xqSUQwZ2NtVnhkV2x5WlNnblpXeHNhWEIwYVdNbktUdGNiblpoY2lCQ1RpQTlJSEpsY1hWcGNtVW9KMkp1TG1wekp5azdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnWTNKbFlYUmxSVU5FU0NoamRYSjJaU2tnZTF4dVhIUnlaWFIxY200Z2JtVjNJRVZEUkVnb1kzVnlkbVVwTzF4dWZUdGNibHh1ZG1GeUlHRnNhV0Z6WlhNZ1BTQjdYRzVjZEhObFkzQXlOVFpyTVRvZ2UxeHVYSFJjZEc1aGJXVTZJQ2R6WldOd01qVTJhekVuTEZ4dVhIUmNkR0o1ZEdWTVpXNW5kR2c2SURNeVhHNWNkSDBzWEc1Y2RITmxZM0F5TWpSeU1Ub2dlMXh1WEhSY2RHNWhiV1U2SUNkd01qSTBKeXhjYmx4MFhIUmllWFJsVEdWdVozUm9PaUF5T0Z4dVhIUjlMRnh1WEhSd2NtbHRaVEkxTm5ZeE9pQjdYRzVjZEZ4MGJtRnRaVG9nSjNBeU5UWW5MRnh1WEhSY2RHSjVkR1ZNWlc1bmRHZzZJRE15WEc1Y2RIMHNYRzVjZEhCeWFXMWxNVGt5ZGpFNklIdGNibHgwWEhSdVlXMWxPaUFuY0RFNU1pY3NYRzVjZEZ4MFlubDBaVXhsYm1kMGFEb2dNalJjYmx4MGZTeGNibHgwWldReU5UVXhPVG9nZTF4dVhIUmNkRzVoYldVNklDZGxaREkxTlRFNUp5eGNibHgwWEhSaWVYUmxUR1Z1WjNSb09pQXpNbHh1WEhSOVhHNTlPMXh1WEc1aGJHbGhjMlZ6TG5BeU1qUWdQU0JoYkdsaGMyVnpMbk5sWTNBeU1qUnlNVHRjYm1Gc2FXRnpaWE11Y0RJMU5pQTlJR0ZzYVdGelpYTXVjMlZqY0RJMU5uSXhJRDBnWVd4cFlYTmxjeTV3Y21sdFpUSTFObll4TzF4dVlXeHBZWE5sY3k1d01Ua3lJRDBnWVd4cFlYTmxjeTV6WldOd01Ua3ljakVnUFNCaGJHbGhjMlZ6TG5CeWFXMWxNVGt5ZGpFN1hHNWNibVoxYm1OMGFXOXVJRVZEUkVnb1kzVnlkbVVwSUh0Y2JseDBkR2hwY3k1amRYSjJaVlI1Y0dVZ1BTQmhiR2xoYzJWelcyTjFjblpsWFR0Y2JseDBhV1lnS0NGMGFHbHpMbU4xY25abFZIbHdaU0FwSUh0Y2JseDBYSFIwYUdsekxtTjFjblpsVkhsd1pTQTlJSHRjYmx4MFhIUmNkRzVoYldVNklHTjFjblpsWEc1Y2RGeDBmVHRjYmx4MGZWeHVYSFIwYUdsekxtTjFjblpsSUQwZ2JtVjNJR1ZzYkdsd2RHbGpMbVZqS0hSb2FYTXVZM1Z5ZG1WVWVYQmxMbTVoYldVcE8xeHVYSFIwYUdsekxtdGxlWE1nUFNCMmIybGtJREE3WEc1OVhHNWNia1ZEUkVndWNISnZkRzkwZVhCbExtZGxibVZ5WVhSbFMyVjVjeUE5SUdaMWJtTjBhVzl1SUNobGJtTXNJR1p2Y20xaGRDa2dlMXh1WEhSMGFHbHpMbXRsZVhNZ1BTQjBhR2x6TG1OMWNuWmxMbWRsYmt0bGVWQmhhWElvS1R0Y2JseDBjbVYwZFhKdUlIUm9hWE11WjJWMFVIVmliR2xqUzJWNUtHVnVZeXdnWm05eWJXRjBLVHRjYm4wN1hHNWNia1ZEUkVndWNISnZkRzkwZVhCbExtTnZiWEIxZEdWVFpXTnlaWFFnUFNCbWRXNWpkR2x2YmlBb2IzUm9aWElzSUdsdVpXNWpMQ0JsYm1NcElIdGNibHgwYVc1bGJtTWdQU0JwYm1WdVl5QjhmQ0FuZFhSbU9DYzdYRzVjZEdsbUlDZ2hRblZtWm1WeUxtbHpRblZtWm1WeUtHOTBhR1Z5S1NrZ2UxeHVYSFJjZEc5MGFHVnlJRDBnYm1WM0lFSjFabVpsY2lodmRHaGxjaXdnYVc1bGJtTXBPMXh1WEhSOVhHNWNkSFpoY2lCdmRHaGxjbEIxWWlBOUlIUm9hWE11WTNWeWRtVXVhMlY1Um5KdmJWQjFZbXhwWXlodmRHaGxjaWt1WjJWMFVIVmliR2xqS0NrN1hHNWNkSFpoY2lCdmRYUWdQU0J2ZEdobGNsQjFZaTV0ZFd3b2RHaHBjeTVyWlhsekxtZGxkRkJ5YVhaaGRHVW9LU2t1WjJWMFdDZ3BPMXh1WEhSeVpYUjFjbTRnWm05eWJXRjBVbVYwZFhKdVZtRnNkV1VvYjNWMExDQmxibU1zSUhSb2FYTXVZM1Z5ZG1WVWVYQmxMbUo1ZEdWTVpXNW5kR2dwTzF4dWZUdGNibHh1UlVORVNDNXdjbTkwYjNSNWNHVXVaMlYwVUhWaWJHbGpTMlY1SUQwZ1puVnVZM1JwYjI0Z0tHVnVZeXdnWm05eWJXRjBLU0I3WEc1Y2RIWmhjaUJyWlhrZ1BTQjBhR2x6TG10bGVYTXVaMlYwVUhWaWJHbGpLR1p2Y20xaGRDQTlQVDBnSjJOdmJYQnlaWE56WldRbkxDQjBjblZsS1R0Y2JseDBhV1lnS0dadmNtMWhkQ0E5UFQwZ0oyaDVZbkpwWkNjcElIdGNibHgwWEhScFppQW9hMlY1VzJ0bGVTNXNaVzVuZEdnZ0xTQXhYU0FsSURJcElIdGNibHgwWEhSY2RHdGxlVnN3WFNBOUlEYzdYRzVjZEZ4MGZTQmxiSE5sSUh0Y2JseDBYSFJjZEd0bGVTQmJNRjBnUFNBMk8xeHVYSFJjZEgxY2JseDBmVnh1WEhSeVpYUjFjbTRnWm05eWJXRjBVbVYwZFhKdVZtRnNkV1VvYTJWNUxDQmxibU1wTzF4dWZUdGNibHh1UlVORVNDNXdjbTkwYjNSNWNHVXVaMlYwVUhKcGRtRjBaVXRsZVNBOUlHWjFibU4wYVc5dUlDaGxibU1wSUh0Y2JseDBjbVYwZFhKdUlHWnZjbTFoZEZKbGRIVnlibFpoYkhWbEtIUm9hWE11YTJWNWN5NW5aWFJRY21sMllYUmxLQ2tzSUdWdVl5azdYRzU5TzF4dVhHNUZRMFJJTG5CeWIzUnZkSGx3WlM1elpYUlFkV0pzYVdOTFpYa2dQU0JtZFc1amRHbHZiaUFvY0hWaUxDQmxibU1wSUh0Y2JseDBaVzVqSUQwZ1pXNWpJSHg4SUNkMWRHWTRKenRjYmx4MGFXWWdLQ0ZDZFdabVpYSXVhWE5DZFdabVpYSW9jSFZpS1NrZ2UxeHVYSFJjZEhCMVlpQTlJRzVsZHlCQ2RXWm1aWElvY0hWaUxDQmxibU1wTzF4dVhIUjlYRzVjZEhSb2FYTXVhMlY1Y3k1ZmFXMXdiM0owVUhWaWJHbGpLSEIxWWlrN1hHNWNkSEpsZEhWeWJpQjBhR2x6TzF4dWZUdGNibHh1UlVORVNDNXdjbTkwYjNSNWNHVXVjMlYwVUhKcGRtRjBaVXRsZVNBOUlHWjFibU4wYVc5dUlDaHdjbWwyTENCbGJtTXBJSHRjYmx4MFpXNWpJRDBnWlc1aklIeDhJQ2QxZEdZNEp6dGNibHgwYVdZZ0tDRkNkV1ptWlhJdWFYTkNkV1ptWlhJb2NISnBkaWtwSUh0Y2JseDBYSFJ3Y21sMklEMGdibVYzSUVKMVptWmxjaWh3Y21sMkxDQmxibU1wTzF4dVhIUjlYRzVjZEhaaGNpQmZjSEpwZGlBOUlHNWxkeUJDVGlod2NtbDJLVHRjYmx4MFgzQnlhWFlnUFNCZmNISnBkaTUwYjFOMGNtbHVaeWd4TmlrN1hHNWNkSFJvYVhNdWEyVjVjeTVmYVcxd2IzSjBVSEpwZG1GMFpTaGZjSEpwZGlrN1hHNWNkSEpsZEhWeWJpQjBhR2x6TzF4dWZUdGNibHh1Wm5WdVkzUnBiMjRnWm05eWJXRjBVbVYwZFhKdVZtRnNkV1VvWW00c0lHVnVZeXdnYkdWdUtTQjdYRzVjZEdsbUlDZ2hRWEp5WVhrdWFYTkJjbkpoZVNoaWJpa3BJSHRjYmx4MFhIUmliaUE5SUdKdUxuUnZRWEp5WVhrb0tUdGNibHgwZlZ4dVhIUjJZWElnWW5WbUlEMGdibVYzSUVKMVptWmxjaWhpYmlrN1hHNWNkR2xtSUNoc1pXNGdKaVlnWW5WbUxteGxibWQwYUNBOElHeGxiaWtnZTF4dVhIUmNkSFpoY2lCNlpYSnZjeUE5SUc1bGR5QkNkV1ptWlhJb2JHVnVJQzBnWW5WbUxteGxibWQwYUNrN1hHNWNkRngwZW1WeWIzTXVabWxzYkNnd0tUdGNibHgwWEhSaWRXWWdQU0JDZFdabVpYSXVZMjl1WTJGMEtGdDZaWEp2Y3l3Z1luVm1YU2s3WEc1Y2RIMWNibHgwYVdZZ0tDRmxibU1wSUh0Y2JseDBYSFJ5WlhSMWNtNGdZblZtTzF4dVhIUjlJR1ZzYzJVZ2UxeHVYSFJjZEhKbGRIVnliaUJpZFdZdWRHOVRkSEpwYm1jb1pXNWpLVHRjYmx4MGZWeHVmVnh1SWwxOSIsImFyZ3VtZW50c1s0XVtcIi9ob21lL3VidW50dS9zdGFnaW5nL2FwcHMvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy5qc1wiXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykiLCJtb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1hcmd1bWVudHNbNF1bXCIvaG9tZS91YnVudHUvc3RhZ2luZy9hcHBzL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9wYWNrYWdlLmpzb25cIl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpIiwiYXJndW1lbnRzWzRdW1wiL2hvbWUvdWJ1bnR1L3N0YWdpbmcvYXBwcy9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbm9kZV9tb2R1bGVzL2Jyb3JhbmQvaW5kZXguanNcIl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpIiwiYXJndW1lbnRzWzRdW1wiL2hvbWUvdWJ1bnR1L3N0YWdpbmcvYXBwcy9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL3V0aWxzLmpzXCJdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKSIsImFyZ3VtZW50c1s0XVtcIi9ob21lL3VidW50dS9zdGFnaW5nL2FwcHMvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9obWFjLWRyYmcuanNcIl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpIiwiYXJndW1lbnRzWzRdW1wiL2hvbWUvdWJ1bnR1L3N0YWdpbmcvYXBwcy9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VjL2luZGV4LmpzXCJdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKSIsImFyZ3VtZW50c1s0XVtcIi9ob21lL3VidW50dS9zdGFnaW5nL2FwcHMvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lYy9zaWduYXR1cmUuanNcIl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpIiwiYXJndW1lbnRzWzRdW1wiL2hvbWUvdWJ1bnR1L3N0YWdpbmcvYXBwcy9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VjL2tleS5qc1wiXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykiLCJhcmd1bWVudHNbNF1bXCIvaG9tZS91YnVudHUvc3RhZ2luZy9hcHBzL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmVzLmpzXCJdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKSIsImFyZ3VtZW50c1s0XVtcIi9ob21lL3VidW50dS9zdGFnaW5nL2FwcHMvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL2VsbGlwdGljL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoLmpzXCJdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKSIsImFyZ3VtZW50c1s0XVtcIi9ob21lL3VidW50dS9zdGFnaW5nL2FwcHMvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL2VsbGlwdGljL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3V0aWxzLmpzXCJdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKSIsImFyZ3VtZW50c1s0XVtcIi9ob21lL3VidW50dS9zdGFnaW5nL2FwcHMvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL2VsbGlwdGljL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS5qc1wiXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykiLCJhcmd1bWVudHNbNF1bXCIvaG9tZS91YnVudHUvc3RhZ2luZy9hcHBzL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9yaXBlbWQuanNcIl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpIiwiYXJndW1lbnRzWzRdW1wiL2hvbWUvdWJ1bnR1L3N0YWdpbmcvYXBwcy9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvaG1hYy5qc1wiXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykiLCJhcmd1bWVudHNbNF1bXCIvaG9tZS91YnVudHUvc3RhZ2luZy9hcHBzL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9jb21tb24uanNcIl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpIiwiYXJndW1lbnRzWzRdW1wiL2hvbWUvdWJ1bnR1L3N0YWdpbmcvYXBwcy9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL3ByZWNvbXB1dGVkL3NlY3AyNTZrMS5qc1wiXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykiLCJhcmd1bWVudHNbNF1bXCIvaG9tZS91YnVudHUvc3RhZ2luZy9hcHBzL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmUvaW5kZXguanNcIl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpIiwiYXJndW1lbnRzWzRdW1wiL2hvbWUvdWJ1bnR1L3N0YWdpbmcvYXBwcy9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlL3Nob3J0LmpzXCJdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKSIsImFyZ3VtZW50c1s0XVtcIi9ob21lL3VidW50dS9zdGFnaW5nL2FwcHMvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9tb250LmpzXCJdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKSIsImFyZ3VtZW50c1s0XVtcIi9ob21lL3VidW50dS9zdGFnaW5nL2FwcHMvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9lZHdhcmRzLmpzXCJdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKSIsImFyZ3VtZW50c1s0XVtcIi9ob21lL3VidW50dS9zdGFnaW5nL2FwcHMvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9iYXNlLmpzXCJdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKSIsImFyZ3VtZW50c1s0XVtcIi9ob21lL3VidW50dS9zdGFnaW5nL2FwcHMvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vbm9kZV9tb2R1bGVzL2JuLmpzL2xpYi9ibi5qc1wiXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykiLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG52YXIgX2FsZ29zID0gcmVxdWlyZSgnLi9hbGdvcycpXG52YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBzaWduID0gcmVxdWlyZSgnLi9zaWduJylcbnZhciBzdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKVxudmFyIHZlcmlmeSA9IHJlcXVpcmUoJy4vdmVyaWZ5JylcblxudmFyIGFsZ29zID0ge31cbk9iamVjdC5rZXlzKF9hbGdvcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGFsZ29zW2tleV0gPSBhbGdvc1trZXkudG9Mb3dlckNhc2UoKV0gPSBfYWxnb3Nba2V5XVxufSlcblxuZnVuY3Rpb24gU2lnbiAoYWxnb3JpdGhtKSB7XG4gIHN0cmVhbS5Xcml0YWJsZS5jYWxsKHRoaXMpXG5cbiAgdmFyIGRhdGEgPSBhbGdvc1thbGdvcml0aG1dXG4gIGlmICghZGF0YSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBtZXNzYWdlIGRpZ2VzdCcpXG4gIH1cblxuICB0aGlzLl9oYXNoVHlwZSA9IGRhdGEuaGFzaFxuICB0aGlzLl9oYXNoID0gY3JlYXRlSGFzaChkYXRhLmhhc2gpXG4gIHRoaXMuX3RhZyA9IGRhdGEuaWRcbiAgdGhpcy5fc2lnblR5cGUgPSBkYXRhLnNpZ25cbn1cbmluaGVyaXRzKFNpZ24sIHN0cmVhbS5Xcml0YWJsZSlcblxuU2lnbi5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gX3dyaXRlIChkYXRhLCBfLCBkb25lKSB7XG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG4gIGRvbmUoKVxufVxuXG5TaWduLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKGRhdGEsIGVuYykge1xuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgZGF0YSA9IG5ldyBCdWZmZXIoZGF0YSwgZW5jKVxuICB9XG5cbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbiAgcmV0dXJuIHRoaXNcbn1cblxuU2lnbi5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ25NZXRob2QgKGtleSwgZW5jKSB7XG4gIHRoaXMuZW5kKClcbiAgdmFyIGhhc2ggPSB0aGlzLl9oYXNoLmRpZ2VzdCgpXG4gIHZhciBzaWcgPSBzaWduKEJ1ZmZlci5jb25jYXQoW3RoaXMuX3RhZywgaGFzaF0pLCBrZXksIHRoaXMuX2hhc2hUeXBlLCB0aGlzLl9zaWduVHlwZSlcblxuICByZXR1cm4gZW5jID8gc2lnLnRvU3RyaW5nKGVuYykgOiBzaWdcbn1cblxuZnVuY3Rpb24gVmVyaWZ5IChhbGdvcml0aG0pIHtcbiAgc3RyZWFtLldyaXRhYmxlLmNhbGwodGhpcylcblxuICB2YXIgZGF0YSA9IGFsZ29zW2FsZ29yaXRobV1cbiAgaWYgKCFkYXRhKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIG1lc3NhZ2UgZGlnZXN0JylcbiAgfVxuXG4gIHRoaXMuX2hhc2ggPSBjcmVhdGVIYXNoKGRhdGEuaGFzaClcbiAgdGhpcy5fdGFnID0gZGF0YS5pZFxuICB0aGlzLl9zaWduVHlwZSA9IGRhdGEuc2lnblxufVxuaW5oZXJpdHMoVmVyaWZ5LCBzdHJlYW0uV3JpdGFibGUpXG5cblZlcmlmeS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gX3dyaXRlIChkYXRhLCBfLCBkb25lKSB7XG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG5cbiAgZG9uZSgpXG59XG5cblZlcmlmeS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlIChkYXRhLCBlbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGRhdGEgPSBuZXcgQnVmZmVyKGRhdGEsIGVuYylcbiAgfVxuXG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG4gIHJldHVybiB0aGlzXG59XG5cblZlcmlmeS5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5TWV0aG9kIChrZXksIHNpZywgZW5jKSB7XG4gIGlmICh0eXBlb2Ygc2lnID09PSAnc3RyaW5nJykge1xuICAgIHNpZyA9IG5ldyBCdWZmZXIoc2lnLCBlbmMpXG4gIH1cblxuICB0aGlzLmVuZCgpXG4gIHZhciBoYXNoID0gdGhpcy5faGFzaC5kaWdlc3QoKVxuXG4gIHJldHVybiB2ZXJpZnkoc2lnLCBCdWZmZXIuY29uY2F0KFt0aGlzLl90YWcsIGhhc2hdKSwga2V5LCB0aGlzLl9zaWduVHlwZSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlU2lnbiAoYWxnb3JpdGhtKSB7XG4gIHJldHVybiBuZXcgU2lnbihhbGdvcml0aG0pXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVZlcmlmeSAoYWxnb3JpdGhtKSB7XG4gIHJldHVybiBuZXcgVmVyaWZ5KGFsZ29yaXRobSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFNpZ246IGNyZWF0ZVNpZ24sXG4gIFZlcmlmeTogY3JlYXRlVmVyaWZ5LFxuICBjcmVhdGVTaWduOiBjcmVhdGVTaWduLFxuICBjcmVhdGVWZXJpZnk6IGNyZWF0ZVZlcmlmeVxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMXphV2R1TDJKeWIzZHpaWEl1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkluWmhjaUJmWVd4bmIzTWdQU0J5WlhGMWFYSmxLQ2N1TDJGc1oyOXpKeWxjYm5aaGNpQmpjbVZoZEdWSVlYTm9JRDBnY21WeGRXbHlaU2duWTNKbFlYUmxMV2hoYzJnbktWeHVkbUZ5SUdsdWFHVnlhWFJ6SUQwZ2NtVnhkV2x5WlNnbmFXNW9aWEpwZEhNbktWeHVkbUZ5SUhOcFoyNGdQU0J5WlhGMWFYSmxLQ2N1TDNOcFoyNG5LVnh1ZG1GeUlITjBjbVZoYlNBOUlISmxjWFZwY21Vb0ozTjBjbVZoYlNjcFhHNTJZWElnZG1WeWFXWjVJRDBnY21WeGRXbHlaU2duTGk5MlpYSnBabmtuS1Z4dVhHNTJZWElnWVd4bmIzTWdQU0I3ZlZ4dVQySnFaV04wTG10bGVYTW9YMkZzWjI5ektTNW1iM0pGWVdOb0tHWjFibU4wYVc5dUlDaHJaWGtwSUh0Y2JpQWdZV3huYjNOYmEyVjVYU0E5SUdGc1oyOXpXMnRsZVM1MGIweHZkMlZ5UTJGelpTZ3BYU0E5SUY5aGJHZHZjMXRyWlhsZFhHNTlLVnh1WEc1bWRXNWpkR2x2YmlCVGFXZHVJQ2hoYkdkdmNtbDBhRzBwSUh0Y2JpQWdjM1J5WldGdExsZHlhWFJoWW14bExtTmhiR3dvZEdocGN5bGNibHh1SUNCMllYSWdaR0YwWVNBOUlHRnNaMjl6VzJGc1oyOXlhWFJvYlYxY2JpQWdhV1lnS0NGa1lYUmhLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZFZibXR1YjNkdUlHMWxjM05oWjJVZ1pHbG5aWE4wSnlsY2JpQWdmVnh1WEc0Z0lIUm9hWE11WDJoaGMyaFVlWEJsSUQwZ1pHRjBZUzVvWVhOb1hHNGdJSFJvYVhNdVgyaGhjMmdnUFNCamNtVmhkR1ZJWVhOb0tHUmhkR0V1YUdGemFDbGNiaUFnZEdocGN5NWZkR0ZuSUQwZ1pHRjBZUzVwWkZ4dUlDQjBhR2x6TGw5emFXZHVWSGx3WlNBOUlHUmhkR0V1YzJsbmJseHVmVnh1YVc1b1pYSnBkSE1vVTJsbmJpd2djM1J5WldGdExsZHlhWFJoWW14bEtWeHVYRzVUYVdkdUxuQnliM1J2ZEhsd1pTNWZkM0pwZEdVZ1BTQm1kVzVqZEdsdmJpQmZkM0pwZEdVZ0tHUmhkR0VzSUY4c0lHUnZibVVwSUh0Y2JpQWdkR2hwY3k1ZmFHRnphQzUxY0dSaGRHVW9aR0YwWVNsY2JpQWdaRzl1WlNncFhHNTlYRzVjYmxOcFoyNHVjSEp2ZEc5MGVYQmxMblZ3WkdGMFpTQTlJR1oxYm1OMGFXOXVJSFZ3WkdGMFpTQW9aR0YwWVN3Z1pXNWpLU0I3WEc0Z0lHbG1JQ2gwZVhCbGIyWWdaR0YwWVNBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQmtZWFJoSUQwZ2JtVjNJRUoxWm1abGNpaGtZWFJoTENCbGJtTXBYRzRnSUgxY2JseHVJQ0IwYUdsekxsOW9ZWE5vTG5Wd1pHRjBaU2hrWVhSaEtWeHVJQ0J5WlhSMWNtNGdkR2hwYzF4dWZWeHVYRzVUYVdkdUxuQnliM1J2ZEhsd1pTNXphV2R1SUQwZ1puVnVZM1JwYjI0Z2MybG5iazFsZEdodlpDQW9hMlY1TENCbGJtTXBJSHRjYmlBZ2RHaHBjeTVsYm1Rb0tWeHVJQ0IyWVhJZ2FHRnphQ0E5SUhSb2FYTXVYMmhoYzJndVpHbG5aWE4wS0NsY2JpQWdkbUZ5SUhOcFp5QTlJSE5wWjI0b1FuVm1abVZ5TG1OdmJtTmhkQ2hiZEdocGN5NWZkR0ZuTENCb1lYTm9YU2tzSUd0bGVTd2dkR2hwY3k1ZmFHRnphRlI1Y0dVc0lIUm9hWE11WDNOcFoyNVVlWEJsS1Z4dVhHNGdJSEpsZEhWeWJpQmxibU1nUHlCemFXY3VkRzlUZEhKcGJtY29aVzVqS1NBNklITnBaMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQldaWEpwWm5rZ0tHRnNaMjl5YVhSb2JTa2dlMXh1SUNCemRISmxZVzB1VjNKcGRHRmliR1V1WTJGc2JDaDBhR2x6S1Z4dVhHNGdJSFpoY2lCa1lYUmhJRDBnWVd4bmIzTmJZV3huYjNKcGRHaHRYVnh1SUNCcFppQW9JV1JoZEdFcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjFWdWEyNXZkMjRnYldWemMyRm5aU0JrYVdkbGMzUW5LVnh1SUNCOVhHNWNiaUFnZEdocGN5NWZhR0Z6YUNBOUlHTnlaV0YwWlVoaGMyZ29aR0YwWVM1b1lYTm9LVnh1SUNCMGFHbHpMbDkwWVdjZ1BTQmtZWFJoTG1sa1hHNGdJSFJvYVhNdVgzTnBaMjVVZVhCbElEMGdaR0YwWVM1emFXZHVYRzU5WEc1cGJtaGxjbWwwY3loV1pYSnBabmtzSUhOMGNtVmhiUzVYY21sMFlXSnNaU2xjYmx4dVZtVnlhV1o1TG5CeWIzUnZkSGx3WlM1ZmQzSnBkR1VnUFNCbWRXNWpkR2x2YmlCZmQzSnBkR1VnS0dSaGRHRXNJRjhzSUdSdmJtVXBJSHRjYmlBZ2RHaHBjeTVmYUdGemFDNTFjR1JoZEdVb1pHRjBZU2xjYmx4dUlDQmtiMjVsS0NsY2JuMWNibHh1Vm1WeWFXWjVMbkJ5YjNSdmRIbHdaUzUxY0dSaGRHVWdQU0JtZFc1amRHbHZiaUIxY0dSaGRHVWdLR1JoZEdFc0lHVnVZeWtnZTF4dUlDQnBaaUFvZEhsd1pXOW1JR1JoZEdFZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdaR0YwWVNBOUlHNWxkeUJDZFdabVpYSW9aR0YwWVN3Z1pXNWpLVnh1SUNCOVhHNWNiaUFnZEdocGN5NWZhR0Z6YUM1MWNHUmhkR1VvWkdGMFlTbGNiaUFnY21WMGRYSnVJSFJvYVhOY2JuMWNibHh1Vm1WeWFXWjVMbkJ5YjNSdmRIbHdaUzUyWlhKcFpua2dQU0JtZFc1amRHbHZiaUIyWlhKcFpubE5aWFJvYjJRZ0tHdGxlU3dnYzJsbkxDQmxibU1wSUh0Y2JpQWdhV1lnS0hSNWNHVnZaaUJ6YVdjZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdjMmxuSUQwZ2JtVjNJRUoxWm1abGNpaHphV2NzSUdWdVl5bGNiaUFnZlZ4dVhHNGdJSFJvYVhNdVpXNWtLQ2xjYmlBZ2RtRnlJR2hoYzJnZ1BTQjBhR2x6TGw5b1lYTm9MbVJwWjJWemRDZ3BYRzVjYmlBZ2NtVjBkWEp1SUhabGNtbG1lU2h6YVdjc0lFSjFabVpsY2k1amIyNWpZWFFvVzNSb2FYTXVYM1JoWnl3Z2FHRnphRjBwTENCclpYa3NJSFJvYVhNdVgzTnBaMjVVZVhCbEtWeHVmVnh1WEc1bWRXNWpkR2x2YmlCamNtVmhkR1ZUYVdkdUlDaGhiR2R2Y21sMGFHMHBJSHRjYmlBZ2NtVjBkWEp1SUc1bGR5QlRhV2R1S0dGc1oyOXlhWFJvYlNsY2JuMWNibHh1Wm5WdVkzUnBiMjRnWTNKbFlYUmxWbVZ5YVdaNUlDaGhiR2R2Y21sMGFHMHBJSHRjYmlBZ2NtVjBkWEp1SUc1bGR5QldaWEpwWm5rb1lXeG5iM0pwZEdodEtWeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUh0Y2JpQWdVMmxuYmpvZ1kzSmxZWFJsVTJsbmJpeGNiaUFnVm1WeWFXWjVPaUJqY21WaGRHVldaWEpwWm5rc1hHNGdJR055WldGMFpWTnBaMjQ2SUdOeVpXRjBaVk5wWjI0c1hHNGdJR055WldGMFpWWmxjbWxtZVRvZ1kzSmxZWFJsVm1WeWFXWjVYRzU5WEc0aVhYMD0iLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG4vLyBtdWNoIG9mIHRoaXMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvc2VsZi1zaWduZWQvYmxvYi9naC1wYWdlcy9saWIvcnNhLmpzXG52YXIgY3VydmVzID0gcmVxdWlyZSgnLi9jdXJ2ZXMnKVxudmFyIGVsbGlwdGljID0gcmVxdWlyZSgnZWxsaXB0aWMnKVxudmFyIHBhcnNlS2V5cyA9IHJlcXVpcmUoJ3BhcnNlLWFzbjEnKVxuXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpXG52YXIgRUMgPSBlbGxpcHRpYy5lY1xuXG5mdW5jdGlvbiB2ZXJpZnkgKHNpZywgaGFzaCwga2V5LCBzaWduVHlwZSkge1xuICB2YXIgcHViID0gcGFyc2VLZXlzKGtleSlcbiAgaWYgKHB1Yi50eXBlID09PSAnZWMnKSB7XG4gICAgaWYgKHNpZ25UeXBlICE9PSAnZWNkc2EnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHB1YmxpYyBrZXkgdHlwZScpXG4gICAgfVxuICAgIHJldHVybiBlY1ZlcmlmeShzaWcsIGhhc2gsIHB1YilcbiAgfSBlbHNlIGlmIChwdWIudHlwZSA9PT0gJ2RzYScpIHtcbiAgICBpZiAoc2lnblR5cGUgIT09ICdkc2EnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHB1YmxpYyBrZXkgdHlwZScpXG4gICAgfVxuICAgIHJldHVybiBkc2FWZXJpZnkoc2lnLCBoYXNoLCBwdWIpXG4gIH0gZWxzZSB7XG4gICAgaWYgKHNpZ25UeXBlICE9PSAncnNhJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwdWJsaWMga2V5IHR5cGUnKVxuICAgIH1cbiAgfVxuICB2YXIgbGVuID0gcHViLm1vZHVsdXMuYnl0ZUxlbmd0aCgpXG4gIHZhciBwYWQgPSBbIDEgXVxuICB2YXIgcGFkTnVtID0gMFxuICB3aGlsZSAoaGFzaC5sZW5ndGggKyBwYWQubGVuZ3RoICsgMiA8IGxlbikge1xuICAgIHBhZC5wdXNoKDB4ZmYpXG4gICAgcGFkTnVtKytcbiAgfVxuICBwYWQucHVzaCgweDAwKVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBoYXNoLmxlbmd0aCkge1xuICAgIHBhZC5wdXNoKGhhc2hbaV0pXG4gIH1cbiAgcGFkID0gbmV3IEJ1ZmZlcihwYWQpXG4gIHZhciByZWQgPSBCTi5tb250KHB1Yi5tb2R1bHVzKVxuICBzaWcgPSBuZXcgQk4oc2lnKS50b1JlZChyZWQpXG5cbiAgc2lnID0gc2lnLnJlZFBvdyhuZXcgQk4ocHViLnB1YmxpY0V4cG9uZW50KSlcblxuICBzaWcgPSBuZXcgQnVmZmVyKHNpZy5mcm9tUmVkKCkudG9BcnJheSgpKVxuICB2YXIgb3V0ID0gMFxuICBpZiAocGFkTnVtIDwgOCkge1xuICAgIG91dCA9IDFcbiAgfVxuICBsZW4gPSBNYXRoLm1pbihzaWcubGVuZ3RoLCBwYWQubGVuZ3RoKVxuICBpZiAoc2lnLmxlbmd0aCAhPT0gcGFkLmxlbmd0aCkge1xuICAgIG91dCA9IDFcbiAgfVxuXG4gIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0IHw9IChzaWdbaV0gXiBwYWRbaV0pXG4gIH1cbiAgcmV0dXJuIG91dCA9PT0gMFxufVxuXG5mdW5jdGlvbiBlY1ZlcmlmeSAoc2lnLCBoYXNoLCBwdWIpIHtcbiAgdmFyIGN1cnZlSWQgPSBjdXJ2ZXNbcHViLmRhdGEuYWxnb3JpdGhtLmN1cnZlLmpvaW4oJy4nKV1cbiAgaWYgKCFjdXJ2ZUlkKSB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gY3VydmUgJyArIHB1Yi5kYXRhLmFsZ29yaXRobS5jdXJ2ZS5qb2luKCcuJykpXG5cbiAgdmFyIGN1cnZlID0gbmV3IEVDKGN1cnZlSWQpXG4gIHZhciBwdWJrZXkgPSBwdWIuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleS5kYXRhXG5cbiAgcmV0dXJuIGN1cnZlLnZlcmlmeShoYXNoLCBzaWcsIHB1YmtleSlcbn1cblxuZnVuY3Rpb24gZHNhVmVyaWZ5IChzaWcsIGhhc2gsIHB1Yikge1xuICB2YXIgcCA9IHB1Yi5kYXRhLnBcbiAgdmFyIHEgPSBwdWIuZGF0YS5xXG4gIHZhciBnID0gcHViLmRhdGEuZ1xuICB2YXIgeSA9IHB1Yi5kYXRhLnB1Yl9rZXlcbiAgdmFyIHVucGFja2VkID0gcGFyc2VLZXlzLnNpZ25hdHVyZS5kZWNvZGUoc2lnLCAnZGVyJylcbiAgdmFyIHMgPSB1bnBhY2tlZC5zXG4gIHZhciByID0gdW5wYWNrZWQuclxuICBjaGVja1ZhbHVlKHMsIHEpXG4gIGNoZWNrVmFsdWUociwgcSlcbiAgdmFyIG1vbnRwID0gQk4ubW9udChwKVxuICB2YXIgdyA9IHMuaW52bShxKVxuICB2YXIgdiA9IGcudG9SZWQobW9udHApXG4gICAgLnJlZFBvdyhuZXcgQk4oaGFzaCkubXVsKHcpLm1vZChxKSlcbiAgICAuZnJvbVJlZCgpXG4gICAgLm11bChcbiAgICAgIHkudG9SZWQobW9udHApXG4gICAgICAgIC5yZWRQb3coci5tdWwodykubW9kKHEpKVxuICAgICAgICAuZnJvbVJlZCgpXG4gICkubW9kKHApLm1vZChxKVxuICByZXR1cm4gIXYuY21wKHIpXG59XG5cbmZ1bmN0aW9uIGNoZWNrVmFsdWUgKGIsIHEpIHtcbiAgaWYgKGIuY21wbigwKSA8PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHNpZycpXG4gIH1cbiAgaWYgKGIuY21wKHEpID49IHEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgc2lnJylcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZlcmlmeVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMXphV2R1TDNabGNtbG1lUzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5OGdiWFZqYUNCdlppQjBhR2x6SUdKaGMyVmtJRzl1SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5cGJtUjFkRzU1TDNObGJHWXRjMmxuYm1Wa0wySnNiMkl2WjJndGNHRm5aWE12YkdsaUwzSnpZUzVxYzF4dWRtRnlJR04xY25abGN5QTlJSEpsY1hWcGNtVW9KeTR2WTNWeWRtVnpKeWxjYm5aaGNpQmxiR3hwY0hScFl5QTlJSEpsY1hWcGNtVW9KMlZzYkdsd2RHbGpKeWxjYm5aaGNpQndZWEp6WlV0bGVYTWdQU0J5WlhGMWFYSmxLQ2R3WVhKelpTMWhjMjR4SnlsY2JseHVkbUZ5SUVKT0lEMGdjbVZ4ZFdseVpTZ25ZbTR1YW5NbktWeHVkbUZ5SUVWRElEMGdaV3hzYVhCMGFXTXVaV05jYmx4dVpuVnVZM1JwYjI0Z2RtVnlhV1o1SUNoemFXY3NJR2hoYzJnc0lHdGxlU3dnYzJsbmJsUjVjR1VwSUh0Y2JpQWdkbUZ5SUhCMVlpQTlJSEJoY25ObFMyVjVjeWhyWlhrcFhHNGdJR2xtSUNod2RXSXVkSGx3WlNBOVBUMGdKMlZqSnlrZ2UxeHVJQ0FnSUdsbUlDaHphV2R1Vkhsd1pTQWhQVDBnSjJWalpITmhKeWtnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2QzY205dVp5QndkV0pzYVdNZ2EyVjVJSFI1Y0dVbktWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdaV05XWlhKcFpua29jMmxuTENCb1lYTm9MQ0J3ZFdJcFhHNGdJSDBnWld4elpTQnBaaUFvY0hWaUxuUjVjR1VnUFQwOUlDZGtjMkVuS1NCN1hHNGdJQ0FnYVdZZ0tITnBaMjVVZVhCbElDRTlQU0FuWkhOaEp5a2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZDNjbTl1WnlCd2RXSnNhV01nYTJWNUlIUjVjR1VuS1Z4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1pITmhWbVZ5YVdaNUtITnBaeXdnYUdGemFDd2djSFZpS1Z4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUdsbUlDaHphV2R1Vkhsd1pTQWhQVDBnSjNKellTY3BJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25kM0p2Ym1jZ2NIVmliR2xqSUd0bGVTQjBlWEJsSnlsY2JpQWdJQ0I5WEc0Z0lIMWNiaUFnZG1GeUlHeGxiaUE5SUhCMVlpNXRiMlIxYkhWekxtSjVkR1ZNWlc1bmRHZ29LVnh1SUNCMllYSWdjR0ZrSUQwZ1d5QXhJRjFjYmlBZ2RtRnlJSEJoWkU1MWJTQTlJREJjYmlBZ2QyaHBiR1VnS0doaGMyZ3ViR1Z1WjNSb0lDc2djR0ZrTG14bGJtZDBhQ0FySURJZ1BDQnNaVzRwSUh0Y2JpQWdJQ0J3WVdRdWNIVnphQ2d3ZUdabUtWeHVJQ0FnSUhCaFpFNTFiU3NyWEc0Z0lIMWNiaUFnY0dGa0xuQjFjMmdvTUhnd01DbGNiaUFnZG1GeUlHa2dQU0F0TVZ4dUlDQjNhR2xzWlNBb0t5dHBJRHdnYUdGemFDNXNaVzVuZEdncElIdGNiaUFnSUNCd1lXUXVjSFZ6YUNob1lYTm9XMmxkS1Z4dUlDQjlYRzRnSUhCaFpDQTlJRzVsZHlCQ2RXWm1aWElvY0dGa0tWeHVJQ0IyWVhJZ2NtVmtJRDBnUWs0dWJXOXVkQ2h3ZFdJdWJXOWtkV3gxY3lsY2JpQWdjMmxuSUQwZ2JtVjNJRUpPS0hOcFp5a3VkRzlTWldRb2NtVmtLVnh1WEc0Z0lITnBaeUE5SUhOcFp5NXlaV1JRYjNjb2JtVjNJRUpPS0hCMVlpNXdkV0pzYVdORmVIQnZibVZ1ZENrcFhHNWNiaUFnYzJsbklEMGdibVYzSUVKMVptWmxjaWh6YVdjdVpuSnZiVkpsWkNncExuUnZRWEp5WVhrb0tTbGNiaUFnZG1GeUlHOTFkQ0E5SURCY2JpQWdhV1lnS0hCaFpFNTFiU0E4SURncElIdGNiaUFnSUNCdmRYUWdQU0F4WEc0Z0lIMWNiaUFnYkdWdUlEMGdUV0YwYUM1dGFXNG9jMmxuTG14bGJtZDBhQ3dnY0dGa0xteGxibWQwYUNsY2JpQWdhV1lnS0hOcFp5NXNaVzVuZEdnZ0lUMDlJSEJoWkM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0J2ZFhRZ1BTQXhYRzRnSUgxY2JseHVJQ0JwSUQwZ0xURmNiaUFnZDJocGJHVWdLQ3NyYVNBOElHeGxiaWtnZTF4dUlDQWdJRzkxZENCOFBTQW9jMmxuVzJsZElGNGdjR0ZrVzJsZEtWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCdmRYUWdQVDA5SURCY2JuMWNibHh1Wm5WdVkzUnBiMjRnWldOV1pYSnBabmtnS0hOcFp5d2dhR0Z6YUN3Z2NIVmlLU0I3WEc0Z0lIWmhjaUJqZFhKMlpVbGtJRDBnWTNWeWRtVnpXM0IxWWk1a1lYUmhMbUZzWjI5eWFYUm9iUzVqZFhKMlpTNXFiMmx1S0NjdUp5bGRYRzRnSUdsbUlDZ2hZM1Z5ZG1WSlpDa2dkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZDFibXR1YjNkdUlHTjFjblpsSUNjZ0t5QndkV0l1WkdGMFlTNWhiR2R2Y21sMGFHMHVZM1Z5ZG1VdWFtOXBiaWduTGljcEtWeHVYRzRnSUhaaGNpQmpkWEoyWlNBOUlHNWxkeUJGUXloamRYSjJaVWxrS1Z4dUlDQjJZWElnY0hWaWEyVjVJRDBnY0hWaUxtUmhkR0V1YzNWaWFtVmpkRkJ5YVhaaGRHVkxaWGt1WkdGMFlWeHVYRzRnSUhKbGRIVnliaUJqZFhKMlpTNTJaWEpwWm5rb2FHRnphQ3dnYzJsbkxDQndkV0pyWlhrcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdSellWWmxjbWxtZVNBb2MybG5MQ0JvWVhOb0xDQndkV0lwSUh0Y2JpQWdkbUZ5SUhBZ1BTQndkV0l1WkdGMFlTNXdYRzRnSUhaaGNpQnhJRDBnY0hWaUxtUmhkR0V1Y1Z4dUlDQjJZWElnWnlBOUlIQjFZaTVrWVhSaExtZGNiaUFnZG1GeUlIa2dQU0J3ZFdJdVpHRjBZUzV3ZFdKZmEyVjVYRzRnSUhaaGNpQjFibkJoWTJ0bFpDQTlJSEJoY25ObFMyVjVjeTV6YVdkdVlYUjFjbVV1WkdWamIyUmxLSE5wWnl3Z0oyUmxjaWNwWEc0Z0lIWmhjaUJ6SUQwZ2RXNXdZV05yWldRdWMxeHVJQ0IyWVhJZ2NpQTlJSFZ1Y0dGamEyVmtMbkpjYmlBZ1kyaGxZMnRXWVd4MVpTaHpMQ0J4S1Z4dUlDQmphR1ZqYTFaaGJIVmxLSElzSUhFcFhHNGdJSFpoY2lCdGIyNTBjQ0E5SUVKT0xtMXZiblFvY0NsY2JpQWdkbUZ5SUhjZ1BTQnpMbWx1ZG0wb2NTbGNiaUFnZG1GeUlIWWdQU0JuTG5SdlVtVmtLRzF2Ym5Sd0tWeHVJQ0FnSUM1eVpXUlFiM2NvYm1WM0lFSk9LR2hoYzJncExtMTFiQ2gzS1M1dGIyUW9jU2twWEc0Z0lDQWdMbVp5YjIxU1pXUW9LVnh1SUNBZ0lDNXRkV3dvWEc0Z0lDQWdJQ0I1TG5SdlVtVmtLRzF2Ym5Sd0tWeHVJQ0FnSUNBZ0lDQXVjbVZrVUc5M0tISXViWFZzS0hjcExtMXZaQ2h4S1NsY2JpQWdJQ0FnSUNBZ0xtWnliMjFTWldRb0tWeHVJQ0FwTG0xdlpDaHdLUzV0YjJRb2NTbGNiaUFnY21WMGRYSnVJQ0YyTG1OdGNDaHlLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmphR1ZqYTFaaGJIVmxJQ2hpTENCeEtTQjdYRzRnSUdsbUlDaGlMbU50Y0c0b01Da2dQRDBnTUNrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduYVc1MllXeHBaQ0J6YVdjbktWeHVJQ0I5WEc0Z0lHbG1JQ2hpTG1OdGNDaHhLU0ErUFNCeEtTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkcGJuWmhiR2xrSUhOcFp5Y3BYRzRnSUgxY2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0IyWlhKcFpubGNiaUpkZlE9PSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbi8vIG11Y2ggb2YgdGhpcyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9zZWxmLXNpZ25lZC9ibG9iL2doLXBhZ2VzL2xpYi9yc2EuanNcbnZhciBjcmVhdGVIbWFjID0gcmVxdWlyZSgnY3JlYXRlLWhtYWMnKVxudmFyIGNydCA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktcnNhJylcbnZhciBjdXJ2ZXMgPSByZXF1aXJlKCcuL2N1cnZlcycpXG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCdlbGxpcHRpYycpXG52YXIgcGFyc2VLZXlzID0gcmVxdWlyZSgncGFyc2UtYXNuMScpXG5cbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJylcbnZhciBFQyA9IGVsbGlwdGljLmVjXG5cbmZ1bmN0aW9uIHNpZ24gKGhhc2gsIGtleSwgaGFzaFR5cGUsIHNpZ25UeXBlKSB7XG4gIHZhciBwcml2ID0gcGFyc2VLZXlzKGtleSlcbiAgaWYgKHByaXYuY3VydmUpIHtcbiAgICBpZiAoc2lnblR5cGUgIT09ICdlY2RzYScpIHRocm93IG5ldyBFcnJvcignd3JvbmcgcHJpdmF0ZSBrZXkgdHlwZScpXG5cbiAgICByZXR1cm4gZWNTaWduKGhhc2gsIHByaXYpXG4gIH0gZWxzZSBpZiAocHJpdi50eXBlID09PSAnZHNhJykge1xuICAgIGlmIChzaWduVHlwZSAhPT0gJ2RzYScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignd3JvbmcgcHJpdmF0ZSBrZXkgdHlwZScpXG4gICAgfVxuICAgIHJldHVybiBkc2FTaWduKGhhc2gsIHByaXYsIGhhc2hUeXBlKVxuICB9IGVsc2Uge1xuICAgIGlmIChzaWduVHlwZSAhPT0gJ3JzYScpIHRocm93IG5ldyBFcnJvcignd3JvbmcgcHJpdmF0ZSBrZXkgdHlwZScpXG4gIH1cblxuICB2YXIgbGVuID0gcHJpdi5tb2R1bHVzLmJ5dGVMZW5ndGgoKVxuICB2YXIgcGFkID0gWyAwLCAxIF1cbiAgd2hpbGUgKGhhc2gubGVuZ3RoICsgcGFkLmxlbmd0aCArIDEgPCBsZW4pIHtcbiAgICBwYWQucHVzaCgweGZmKVxuICB9XG4gIHBhZC5wdXNoKDB4MDApXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGhhc2gubGVuZ3RoKSB7XG4gICAgcGFkLnB1c2goaGFzaFtpXSlcbiAgfVxuXG4gIHZhciBvdXQgPSBjcnQocGFkLCBwcml2KVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIGVjU2lnbiAoaGFzaCwgcHJpdikge1xuICB2YXIgY3VydmVJZCA9IGN1cnZlc1twcml2LmN1cnZlLmpvaW4oJy4nKV1cbiAgaWYgKCFjdXJ2ZUlkKSB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gY3VydmUgJyArIHByaXYuY3VydmUuam9pbignLicpKVxuXG4gIHZhciBjdXJ2ZSA9IG5ldyBFQyhjdXJ2ZUlkKVxuICB2YXIga2V5ID0gY3VydmUuZ2VuS2V5UGFpcigpXG5cbiAga2V5Ll9pbXBvcnRQcml2YXRlKHByaXYucHJpdmF0ZUtleSlcbiAgdmFyIG91dCA9IGtleS5zaWduKGhhc2gpXG5cbiAgcmV0dXJuIG5ldyBCdWZmZXIob3V0LnRvREVSKCkpXG59XG5cbmZ1bmN0aW9uIGRzYVNpZ24gKGhhc2gsIHByaXYsIGFsZ28pIHtcbiAgdmFyIHggPSBwcml2LnBhcmFtcy5wcml2X2tleVxuICB2YXIgcCA9IHByaXYucGFyYW1zLnBcbiAgdmFyIHEgPSBwcml2LnBhcmFtcy5xXG4gIHZhciBnID0gcHJpdi5wYXJhbXMuZ1xuICB2YXIgciA9IG5ldyBCTigwKVxuICB2YXIga1xuICB2YXIgSCA9IGJpdHMyaW50KGhhc2gsIHEpLm1vZChxKVxuICB2YXIgcyA9IGZhbHNlXG4gIHZhciBrdiA9IGdldEtleSh4LCBxLCBoYXNoLCBhbGdvKVxuICB3aGlsZSAocyA9PT0gZmFsc2UpIHtcbiAgICBrID0gbWFrZUtleShxLCBrdiwgYWxnbylcbiAgICByID0gbWFrZVIoZywgaywgcCwgcSlcbiAgICBzID0gay5pbnZtKHEpLmltdWwoSC5hZGQoeC5tdWwocikpKS5tb2QocSlcbiAgICBpZiAoIXMuY21wbigwKSkge1xuICAgICAgcyA9IGZhbHNlXG4gICAgICByID0gbmV3IEJOKDApXG4gICAgfVxuICB9XG4gIHJldHVybiB0b0RFUihyLCBzKVxufVxuXG5mdW5jdGlvbiB0b0RFUiAociwgcykge1xuICByID0gci50b0FycmF5KClcbiAgcyA9IHMudG9BcnJheSgpXG5cbiAgLy8gUGFkIHZhbHVlc1xuICBpZiAoclswXSAmIDB4ODApIHtcbiAgICByID0gWyAwIF0uY29uY2F0KHIpXG4gIH1cbiAgLy8gUGFkIHZhbHVlc1xuICBpZiAoc1swXSAmIDB4ODApIHtcbiAgICBzID0gWzBdLmNvbmNhdChzKVxuICB9XG5cbiAgdmFyIHRvdGFsID0gci5sZW5ndGggKyBzLmxlbmd0aCArIDRcbiAgdmFyIHJlcyA9IFsgMHgzMCwgdG90YWwsIDB4MDIsIHIubGVuZ3RoIF1cbiAgcmVzID0gcmVzLmNvbmNhdChyLCBbIDB4MDIsIHMubGVuZ3RoIF0sIHMpXG4gIHJldHVybiBuZXcgQnVmZmVyKHJlcylcbn1cblxuZnVuY3Rpb24gZ2V0S2V5ICh4LCBxLCBoYXNoLCBhbGdvKSB7XG4gIHggPSBuZXcgQnVmZmVyKHgudG9BcnJheSgpKVxuICBpZiAoeC5sZW5ndGggPCBxLmJ5dGVMZW5ndGgoKSkge1xuICAgIHZhciB6ZXJvcyA9IG5ldyBCdWZmZXIocS5ieXRlTGVuZ3RoKCkgLSB4Lmxlbmd0aClcbiAgICB6ZXJvcy5maWxsKDApXG4gICAgeCA9IEJ1ZmZlci5jb25jYXQoW3plcm9zLCB4XSlcbiAgfVxuICB2YXIgaGxlbiA9IGhhc2gubGVuZ3RoXG4gIHZhciBoYml0cyA9IGJpdHMyb2N0ZXRzKGhhc2gsIHEpXG4gIHZhciB2ID0gbmV3IEJ1ZmZlcihobGVuKVxuICB2LmZpbGwoMSlcbiAgdmFyIGsgPSBuZXcgQnVmZmVyKGhsZW4pXG4gIGsuZmlsbCgwKVxuICBrID0gY3JlYXRlSG1hYyhhbGdvLCBrKVxuICAgIC51cGRhdGUodilcbiAgICAudXBkYXRlKG5ldyBCdWZmZXIoWzBdKSlcbiAgICAudXBkYXRlKHgpXG4gICAgLnVwZGF0ZShoYml0cylcbiAgICAuZGlnZXN0KClcbiAgdiA9IGNyZWF0ZUhtYWMoYWxnbywgaylcbiAgICAudXBkYXRlKHYpXG4gICAgLmRpZ2VzdCgpXG4gIGsgPSBjcmVhdGVIbWFjKGFsZ28sIGspXG4gICAgLnVwZGF0ZSh2KVxuICAgIC51cGRhdGUobmV3IEJ1ZmZlcihbMV0pKVxuICAgIC51cGRhdGUoeClcbiAgICAudXBkYXRlKGhiaXRzKVxuICAgIC5kaWdlc3QoKVxuICB2ID0gY3JlYXRlSG1hYyhhbGdvLCBrKVxuICAgIC51cGRhdGUodilcbiAgICAuZGlnZXN0KClcbiAgcmV0dXJuIHtcbiAgICBrOiBrLFxuICAgIHY6IHZcbiAgfVxufVxuXG5mdW5jdGlvbiBiaXRzMmludCAob2JpdHMsIHEpIHtcbiAgdmFyIGJpdHMgPSBuZXcgQk4ob2JpdHMpXG4gIHZhciBzaGlmdCA9IChvYml0cy5sZW5ndGggPDwgMykgLSBxLmJpdExlbmd0aCgpXG4gIGlmIChzaGlmdCA+IDApIHtcbiAgICBiaXRzLmlzaHJuKHNoaWZ0KVxuICB9XG4gIHJldHVybiBiaXRzXG59XG5cbmZ1bmN0aW9uIGJpdHMyb2N0ZXRzIChiaXRzLCBxKSB7XG4gIGJpdHMgPSBiaXRzMmludChiaXRzLCBxKVxuICBiaXRzID0gYml0cy5tb2QocSlcbiAgdmFyIG91dCA9IG5ldyBCdWZmZXIoYml0cy50b0FycmF5KCkpXG4gIGlmIChvdXQubGVuZ3RoIDwgcS5ieXRlTGVuZ3RoKCkpIHtcbiAgICB2YXIgemVyb3MgPSBuZXcgQnVmZmVyKHEuYnl0ZUxlbmd0aCgpIC0gb3V0Lmxlbmd0aClcbiAgICB6ZXJvcy5maWxsKDApXG4gICAgb3V0ID0gQnVmZmVyLmNvbmNhdChbemVyb3MsIG91dF0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiBtYWtlS2V5IChxLCBrdiwgYWxnbykge1xuICB2YXIgdCwga1xuXG4gIGRvIHtcbiAgICB0ID0gbmV3IEJ1ZmZlcignJylcblxuICAgIHdoaWxlICh0Lmxlbmd0aCAqIDggPCBxLmJpdExlbmd0aCgpKSB7XG4gICAgICBrdi52ID0gY3JlYXRlSG1hYyhhbGdvLCBrdi5rKVxuICAgICAgICAudXBkYXRlKGt2LnYpXG4gICAgICAgIC5kaWdlc3QoKVxuICAgICAgdCA9IEJ1ZmZlci5jb25jYXQoW3QsIGt2LnZdKVxuICAgIH1cblxuICAgIGsgPSBiaXRzMmludCh0LCBxKVxuICAgIGt2LmsgPSBjcmVhdGVIbWFjKGFsZ28sIGt2LmspXG4gICAgICAudXBkYXRlKGt2LnYpXG4gICAgICAudXBkYXRlKG5ldyBCdWZmZXIoWzBdKSlcbiAgICAgIC5kaWdlc3QoKVxuICAgIGt2LnYgPSBjcmVhdGVIbWFjKGFsZ28sIGt2LmspXG4gICAgICAudXBkYXRlKGt2LnYpXG4gICAgICAuZGlnZXN0KClcbiAgfSB3aGlsZSAoay5jbXAocSkgIT09IC0xKVxuXG4gIHJldHVybiBrXG59XG5cbmZ1bmN0aW9uIG1ha2VSIChnLCBrLCBwLCBxKSB7XG4gIHJldHVybiBnLnRvUmVkKEJOLm1vbnQocCkpLnJlZFBvdyhrKS5mcm9tUmVkKCkubW9kKHEpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2lnblxubW9kdWxlLmV4cG9ydHMuZ2V0S2V5ID0gZ2V0S2V5XG5tb2R1bGUuZXhwb3J0cy5tYWtlS2V5ID0gbWFrZUtleVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMXphV2R1TDNOcFoyNHVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeThnYlhWamFDQnZaaUIwYUdseklHSmhjMlZrSUc5dUlHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOXBibVIxZEc1NUwzTmxiR1l0YzJsbmJtVmtMMkpzYjJJdloyZ3RjR0ZuWlhNdmJHbGlMM0p6WVM1cWMxeHVkbUZ5SUdOeVpXRjBaVWh0WVdNZ1BTQnlaWEYxYVhKbEtDZGpjbVZoZEdVdGFHMWhZeWNwWEc1MllYSWdZM0owSUQwZ2NtVnhkV2x5WlNnblluSnZkM05sY21sbWVTMXljMkVuS1Z4dWRtRnlJR04xY25abGN5QTlJSEpsY1hWcGNtVW9KeTR2WTNWeWRtVnpKeWxjYm5aaGNpQmxiR3hwY0hScFl5QTlJSEpsY1hWcGNtVW9KMlZzYkdsd2RHbGpKeWxjYm5aaGNpQndZWEp6WlV0bGVYTWdQU0J5WlhGMWFYSmxLQ2R3WVhKelpTMWhjMjR4SnlsY2JseHVkbUZ5SUVKT0lEMGdjbVZ4ZFdseVpTZ25ZbTR1YW5NbktWeHVkbUZ5SUVWRElEMGdaV3hzYVhCMGFXTXVaV05jYmx4dVpuVnVZM1JwYjI0Z2MybG5iaUFvYUdGemFDd2dhMlY1TENCb1lYTm9WSGx3WlN3Z2MybG5ibFI1Y0dVcElIdGNiaUFnZG1GeUlIQnlhWFlnUFNCd1lYSnpaVXRsZVhNb2EyVjVLVnh1SUNCcFppQW9jSEpwZGk1amRYSjJaU2tnZTF4dUlDQWdJR2xtSUNoemFXZHVWSGx3WlNBaFBUMGdKMlZqWkhOaEp5a2dkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZDNjbTl1WnlCd2NtbDJZWFJsSUd0bGVTQjBlWEJsSnlsY2JseHVJQ0FnSUhKbGRIVnliaUJsWTFOcFoyNG9hR0Z6YUN3Z2NISnBkaWxjYmlBZ2ZTQmxiSE5sSUdsbUlDaHdjbWwyTG5SNWNHVWdQVDA5SUNka2MyRW5LU0I3WEc0Z0lDQWdhV1lnS0hOcFoyNVVlWEJsSUNFOVBTQW5aSE5oSnlrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkM2NtOXVaeUJ3Y21sMllYUmxJR3RsZVNCMGVYQmxKeWxjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUdSellWTnBaMjRvYUdGemFDd2djSEpwZGl3Z2FHRnphRlI1Y0dVcFhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2FXWWdLSE5wWjI1VWVYQmxJQ0U5UFNBbmNuTmhKeWtnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2QzY205dVp5QndjbWwyWVhSbElHdGxlU0IwZVhCbEp5bGNiaUFnZlZ4dVhHNGdJSFpoY2lCc1pXNGdQU0J3Y21sMkxtMXZaSFZzZFhNdVlubDBaVXhsYm1kMGFDZ3BYRzRnSUhaaGNpQndZV1FnUFNCYklEQXNJREVnWFZ4dUlDQjNhR2xzWlNBb2FHRnphQzVzWlc1bmRHZ2dLeUJ3WVdRdWJHVnVaM1JvSUNzZ01TQThJR3hsYmlrZ2UxeHVJQ0FnSUhCaFpDNXdkWE5vS0RCNFptWXBYRzRnSUgxY2JpQWdjR0ZrTG5CMWMyZ29NSGd3TUNsY2JpQWdkbUZ5SUdrZ1BTQXRNVnh1SUNCM2FHbHNaU0FvS3l0cElEd2dhR0Z6YUM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0J3WVdRdWNIVnphQ2hvWVhOb1cybGRLVnh1SUNCOVhHNWNiaUFnZG1GeUlHOTFkQ0E5SUdOeWRDaHdZV1FzSUhCeWFYWXBYRzRnSUhKbGRIVnliaUJ2ZFhSY2JuMWNibHh1Wm5WdVkzUnBiMjRnWldOVGFXZHVJQ2hvWVhOb0xDQndjbWwyS1NCN1hHNGdJSFpoY2lCamRYSjJaVWxrSUQwZ1kzVnlkbVZ6VzNCeWFYWXVZM1Z5ZG1VdWFtOXBiaWduTGljcFhWeHVJQ0JwWmlBb0lXTjFjblpsU1dRcElIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnbmRXNXJibTkzYmlCamRYSjJaU0FuSUNzZ2NISnBkaTVqZFhKMlpTNXFiMmx1S0NjdUp5a3BYRzVjYmlBZ2RtRnlJR04xY25abElEMGdibVYzSUVWREtHTjFjblpsU1dRcFhHNGdJSFpoY2lCclpYa2dQU0JqZFhKMlpTNW5aVzVMWlhsUVlXbHlLQ2xjYmx4dUlDQnJaWGt1WDJsdGNHOXlkRkJ5YVhaaGRHVW9jSEpwZGk1d2NtbDJZWFJsUzJWNUtWeHVJQ0IyWVhJZ2IzVjBJRDBnYTJWNUxuTnBaMjRvYUdGemFDbGNibHh1SUNCeVpYUjFjbTRnYm1WM0lFSjFabVpsY2lodmRYUXVkRzlFUlZJb0tTbGNibjFjYmx4dVpuVnVZM1JwYjI0Z1pITmhVMmxuYmlBb2FHRnphQ3dnY0hKcGRpd2dZV3huYnlrZ2UxeHVJQ0IyWVhJZ2VDQTlJSEJ5YVhZdWNHRnlZVzF6TG5CeWFYWmZhMlY1WEc0Z0lIWmhjaUJ3SUQwZ2NISnBkaTV3WVhKaGJYTXVjRnh1SUNCMllYSWdjU0E5SUhCeWFYWXVjR0Z5WVcxekxuRmNiaUFnZG1GeUlHY2dQU0J3Y21sMkxuQmhjbUZ0Y3k1blhHNGdJSFpoY2lCeUlEMGdibVYzSUVKT0tEQXBYRzRnSUhaaGNpQnJYRzRnSUhaaGNpQklJRDBnWW1sMGN6SnBiblFvYUdGemFDd2djU2t1Ylc5a0tIRXBYRzRnSUhaaGNpQnpJRDBnWm1Gc2MyVmNiaUFnZG1GeUlHdDJJRDBnWjJWMFMyVjVLSGdzSUhFc0lHaGhjMmdzSUdGc1oyOHBYRzRnSUhkb2FXeGxJQ2h6SUQwOVBTQm1ZV3h6WlNrZ2UxeHVJQ0FnSUdzZ1BTQnRZV3RsUzJWNUtIRXNJR3QyTENCaGJHZHZLVnh1SUNBZ0lISWdQU0J0WVd0bFVpaG5MQ0JyTENCd0xDQnhLVnh1SUNBZ0lITWdQU0JyTG1sdWRtMG9jU2t1YVcxMWJDaElMbUZrWkNoNExtMTFiQ2h5S1NrcExtMXZaQ2h4S1Z4dUlDQWdJR2xtSUNnaGN5NWpiWEJ1S0RBcEtTQjdYRzRnSUNBZ0lDQnpJRDBnWm1Gc2MyVmNiaUFnSUNBZ0lISWdQU0J1WlhjZ1FrNG9NQ2xjYmlBZ0lDQjlYRzRnSUgxY2JpQWdjbVYwZFhKdUlIUnZSRVZTS0hJc0lITXBYRzU5WEc1Y2JtWjFibU4wYVc5dUlIUnZSRVZTSUNoeUxDQnpLU0I3WEc0Z0lISWdQU0J5TG5SdlFYSnlZWGtvS1Z4dUlDQnpJRDBnY3k1MGIwRnljbUY1S0NsY2JseHVJQ0F2THlCUVlXUWdkbUZzZFdWelhHNGdJR2xtSUNoeVd6QmRJQ1lnTUhnNE1Da2dlMXh1SUNBZ0lISWdQU0JiSURBZ1hTNWpiMjVqWVhRb2NpbGNiaUFnZlZ4dUlDQXZMeUJRWVdRZ2RtRnNkV1Z6WEc0Z0lHbG1JQ2h6V3pCZElDWWdNSGc0TUNrZ2UxeHVJQ0FnSUhNZ1BTQmJNRjB1WTI5dVkyRjBLSE1wWEc0Z0lIMWNibHh1SUNCMllYSWdkRzkwWVd3Z1BTQnlMbXhsYm1kMGFDQXJJSE11YkdWdVozUm9JQ3NnTkZ4dUlDQjJZWElnY21WeklEMGdXeUF3ZURNd0xDQjBiM1JoYkN3Z01IZ3dNaXdnY2k1c1pXNW5kR2dnWFZ4dUlDQnlaWE1nUFNCeVpYTXVZMjl1WTJGMEtISXNJRnNnTUhnd01pd2djeTVzWlc1bmRHZ2dYU3dnY3lsY2JpQWdjbVYwZFhKdUlHNWxkeUJDZFdabVpYSW9jbVZ6S1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJuWlhSTFpYa2dLSGdzSUhFc0lHaGhjMmdzSUdGc1oyOHBJSHRjYmlBZ2VDQTlJRzVsZHlCQ2RXWm1aWElvZUM1MGIwRnljbUY1S0NrcFhHNGdJR2xtSUNoNExteGxibWQwYUNBOElIRXVZbmwwWlV4bGJtZDBhQ2dwS1NCN1hHNGdJQ0FnZG1GeUlIcGxjbTl6SUQwZ2JtVjNJRUoxWm1abGNpaHhMbUo1ZEdWTVpXNW5kR2dvS1NBdElIZ3ViR1Z1WjNSb0tWeHVJQ0FnSUhwbGNtOXpMbVpwYkd3b01DbGNiaUFnSUNCNElEMGdRblZtWm1WeUxtTnZibU5oZENoYmVtVnliM01zSUhoZEtWeHVJQ0I5WEc0Z0lIWmhjaUJvYkdWdUlEMGdhR0Z6YUM1c1pXNW5kR2hjYmlBZ2RtRnlJR2hpYVhSeklEMGdZbWwwY3pKdlkzUmxkSE1vYUdGemFDd2djU2xjYmlBZ2RtRnlJSFlnUFNCdVpYY2dRblZtWm1WeUtHaHNaVzRwWEc0Z0lIWXVabWxzYkNneEtWeHVJQ0IyWVhJZ2F5QTlJRzVsZHlCQ2RXWm1aWElvYUd4bGJpbGNiaUFnYXk1bWFXeHNLREFwWEc0Z0lHc2dQU0JqY21WaGRHVkliV0ZqS0dGc1oyOHNJR3NwWEc0Z0lDQWdMblZ3WkdGMFpTaDJLVnh1SUNBZ0lDNTFjR1JoZEdVb2JtVjNJRUoxWm1abGNpaGJNRjBwS1Z4dUlDQWdJQzUxY0dSaGRHVW9lQ2xjYmlBZ0lDQXVkWEJrWVhSbEtHaGlhWFJ6S1Z4dUlDQWdJQzVrYVdkbGMzUW9LVnh1SUNCMklEMGdZM0psWVhSbFNHMWhZeWhoYkdkdkxDQnJLVnh1SUNBZ0lDNTFjR1JoZEdVb2RpbGNiaUFnSUNBdVpHbG5aWE4wS0NsY2JpQWdheUE5SUdOeVpXRjBaVWh0WVdNb1lXeG5ieXdnYXlsY2JpQWdJQ0F1ZFhCa1lYUmxLSFlwWEc0Z0lDQWdMblZ3WkdGMFpTaHVaWGNnUW5WbVptVnlLRnN4WFNrcFhHNGdJQ0FnTG5Wd1pHRjBaU2g0S1Z4dUlDQWdJQzUxY0dSaGRHVW9hR0pwZEhNcFhHNGdJQ0FnTG1ScFoyVnpkQ2dwWEc0Z0lIWWdQU0JqY21WaGRHVkliV0ZqS0dGc1oyOHNJR3NwWEc0Z0lDQWdMblZ3WkdGMFpTaDJLVnh1SUNBZ0lDNWthV2RsYzNRb0tWeHVJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lHczZJR3NzWEc0Z0lDQWdkam9nZGx4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHSnBkSE15YVc1MElDaHZZbWwwY3l3Z2NTa2dlMXh1SUNCMllYSWdZbWwwY3lBOUlHNWxkeUJDVGlodlltbDBjeWxjYmlBZ2RtRnlJSE5vYVdaMElEMGdLRzlpYVhSekxteGxibWQwYUNBOFBDQXpLU0F0SUhFdVltbDBUR1Z1WjNSb0tDbGNiaUFnYVdZZ0tITm9hV1owSUQ0Z01Da2dlMXh1SUNBZ0lHSnBkSE11YVhOb2NtNG9jMmhwWm5RcFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUdKcGRITmNibjFjYmx4dVpuVnVZM1JwYjI0Z1ltbDBjekp2WTNSbGRITWdLR0pwZEhNc0lIRXBJSHRjYmlBZ1ltbDBjeUE5SUdKcGRITXlhVzUwS0dKcGRITXNJSEVwWEc0Z0lHSnBkSE1nUFNCaWFYUnpMbTF2WkNoeEtWeHVJQ0IyWVhJZ2IzVjBJRDBnYm1WM0lFSjFabVpsY2loaWFYUnpMblJ2UVhKeVlYa29LU2xjYmlBZ2FXWWdLRzkxZEM1c1pXNW5kR2dnUENCeExtSjVkR1ZNWlc1bmRHZ29LU2tnZTF4dUlDQWdJSFpoY2lCNlpYSnZjeUE5SUc1bGR5QkNkV1ptWlhJb2NTNWllWFJsVEdWdVozUm9LQ2tnTFNCdmRYUXViR1Z1WjNSb0tWeHVJQ0FnSUhwbGNtOXpMbVpwYkd3b01DbGNiaUFnSUNCdmRYUWdQU0JDZFdabVpYSXVZMjl1WTJGMEtGdDZaWEp2Y3l3Z2IzVjBYU2xjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdiM1YwWEc1OVhHNWNibVoxYm1OMGFXOXVJRzFoYTJWTFpYa2dLSEVzSUd0MkxDQmhiR2R2S1NCN1hHNGdJSFpoY2lCMExDQnJYRzVjYmlBZ1pHOGdlMXh1SUNBZ0lIUWdQU0J1WlhjZ1FuVm1abVZ5S0NjbktWeHVYRzRnSUNBZ2QyaHBiR1VnS0hRdWJHVnVaM1JvSUNvZ09DQThJSEV1WW1sMFRHVnVaM1JvS0NrcElIdGNiaUFnSUNBZ0lHdDJMbllnUFNCamNtVmhkR1ZJYldGaktHRnNaMjhzSUd0Mkxtc3BYRzRnSUNBZ0lDQWdJQzUxY0dSaGRHVW9hM1l1ZGlsY2JpQWdJQ0FnSUNBZ0xtUnBaMlZ6ZENncFhHNGdJQ0FnSUNCMElEMGdRblZtWm1WeUxtTnZibU5oZENoYmRDd2dhM1l1ZGwwcFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYXlBOUlHSnBkSE15YVc1MEtIUXNJSEVwWEc0Z0lDQWdhM1l1YXlBOUlHTnlaV0YwWlVodFlXTW9ZV3huYnl3Z2EzWXVheWxjYmlBZ0lDQWdJQzUxY0dSaGRHVW9hM1l1ZGlsY2JpQWdJQ0FnSUM1MWNHUmhkR1VvYm1WM0lFSjFabVpsY2loYk1GMHBLVnh1SUNBZ0lDQWdMbVJwWjJWemRDZ3BYRzRnSUNBZ2EzWXVkaUE5SUdOeVpXRjBaVWh0WVdNb1lXeG5ieXdnYTNZdWF5bGNiaUFnSUNBZ0lDNTFjR1JoZEdVb2EzWXVkaWxjYmlBZ0lDQWdJQzVrYVdkbGMzUW9LVnh1SUNCOUlIZG9hV3hsSUNockxtTnRjQ2h4S1NBaFBUMGdMVEVwWEc1Y2JpQWdjbVYwZFhKdUlHdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2JXRnJaVklnS0djc0lHc3NJSEFzSUhFcElIdGNiaUFnY21WMGRYSnVJR2N1ZEc5U1pXUW9RazR1Ylc5dWRDaHdLU2t1Y21Wa1VHOTNLR3NwTG1aeWIyMVNaV1FvS1M1dGIyUW9jU2xjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnphV2R1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeTVuWlhSTFpYa2dQU0JuWlhSTFpYbGNibTF2WkhWc1pTNWxlSEJ2Y25SekxtMWhhMlZMWlhrZ1BTQnRZV3RsUzJWNVhHNGlYWDA9IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xudmFyIGFzbjEgPSByZXF1aXJlKCcuL2FzbjEnKVxudmFyIGFlc2lkID0gcmVxdWlyZSgnLi9hZXNpZC5qc29uJylcbnZhciBmaXhQcm9jID0gcmVxdWlyZSgnLi9maXhQcm9jJylcbnZhciBjaXBoZXJzID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1hZXMnKVxudmFyIGNvbXBhdCA9IHJlcXVpcmUoJ3Bia2RmMicpXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlS2V5c1xuXG5mdW5jdGlvbiBwYXJzZUtleXMgKGJ1ZmZlcikge1xuICB2YXIgcGFzc3dvcmRcbiAgaWYgKHR5cGVvZiBidWZmZXIgPT09ICdvYmplY3QnICYmICFCdWZmZXIuaXNCdWZmZXIoYnVmZmVyKSkge1xuICAgIHBhc3N3b3JkID0gYnVmZmVyLnBhc3NwaHJhc2VcbiAgICBidWZmZXIgPSBidWZmZXIua2V5XG4gIH1cbiAgaWYgKHR5cGVvZiBidWZmZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgYnVmZmVyID0gbmV3IEJ1ZmZlcihidWZmZXIpXG4gIH1cblxuICB2YXIgc3RyaXBwZWQgPSBmaXhQcm9jKGJ1ZmZlciwgcGFzc3dvcmQpXG5cbiAgdmFyIHR5cGUgPSBzdHJpcHBlZC50YWdcbiAgdmFyIGRhdGEgPSBzdHJpcHBlZC5kYXRhXG4gIHZhciBzdWJ0eXBlLCBuZGF0YVxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdQVUJMSUMgS0VZJzpcbiAgICAgIG5kYXRhID0gYXNuMS5QdWJsaWNLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgc3VidHlwZSA9IG5kYXRhLmFsZ29yaXRobS5hbGdvcml0aG0uam9pbignLicpXG4gICAgICBzd2l0Y2ggKHN1YnR5cGUpIHtcbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMTM1NDkuMS4xLjEnOlxuICAgICAgICAgIHJldHVybiBhc24xLlJTQVB1YmxpY0tleS5kZWNvZGUobmRhdGEuc3ViamVjdFB1YmxpY0tleS5kYXRhLCAnZGVyJylcbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMDA0NS4yLjEnOlxuICAgICAgICAgIG5kYXRhLnN1YmplY3RQcml2YXRlS2V5ID0gbmRhdGEuc3ViamVjdFB1YmxpY0tleVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnZWMnLFxuICAgICAgICAgICAgZGF0YTogbmRhdGFcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTAwNDAuNC4xJzpcbiAgICAgICAgICBuZGF0YS5hbGdvcml0aG0ucGFyYW1zLnB1Yl9rZXkgPSBhc24xLkRTQXBhcmFtLmRlY29kZShuZGF0YS5zdWJqZWN0UHVibGljS2V5LmRhdGEsICdkZXInKVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnZHNhJyxcbiAgICAgICAgICAgIGRhdGE6IG5kYXRhLmFsZ29yaXRobS5wYXJhbXNcbiAgICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgaWQgJyArIHN1YnR5cGUpXG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IHR5cGUgJyArIHR5cGUpXG4gICAgY2FzZSAnRU5DUllQVEVEIFBSSVZBVEUgS0VZJzpcbiAgICAgIGRhdGEgPSBhc24xLkVuY3J5cHRlZFByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgZGF0YSA9IGRlY3J5cHQoZGF0YSwgcGFzc3dvcmQpXG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgY2FzZSAnUFJJVkFURSBLRVknOlxuICAgICAgbmRhdGEgPSBhc24xLlByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgc3VidHlwZSA9IG5kYXRhLmFsZ29yaXRobS5hbGdvcml0aG0uam9pbignLicpXG4gICAgICBzd2l0Y2ggKHN1YnR5cGUpIHtcbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMTM1NDkuMS4xLjEnOlxuICAgICAgICAgIHJldHVybiBhc24xLlJTQVByaXZhdGVLZXkuZGVjb2RlKG5kYXRhLnN1YmplY3RQcml2YXRlS2V5LCAnZGVyJylcbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMDA0NS4yLjEnOlxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjdXJ2ZTogbmRhdGEuYWxnb3JpdGhtLmN1cnZlLFxuICAgICAgICAgICAgcHJpdmF0ZUtleTogYXNuMS5FQ1ByaXZhdGVLZXkuZGVjb2RlKG5kYXRhLnN1YmplY3RQcml2YXRlS2V5LCAnZGVyJykucHJpdmF0ZUtleVxuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMDA0MC40LjEnOlxuICAgICAgICAgIG5kYXRhLmFsZ29yaXRobS5wYXJhbXMucHJpdl9rZXkgPSBhc24xLkRTQXBhcmFtLmRlY29kZShuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleSwgJ2RlcicpXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdkc2EnLFxuICAgICAgICAgICAgcGFyYW1zOiBuZGF0YS5hbGdvcml0aG0ucGFyYW1zXG4gICAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IGlkICcgKyBzdWJ0eXBlKVxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSB0eXBlICcgKyB0eXBlKVxuICAgIGNhc2UgJ1JTQSBQVUJMSUMgS0VZJzpcbiAgICAgIHJldHVybiBhc24xLlJTQVB1YmxpY0tleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgY2FzZSAnUlNBIFBSSVZBVEUgS0VZJzpcbiAgICAgIHJldHVybiBhc24xLlJTQVByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgIGNhc2UgJ0RTQSBQUklWQVRFIEtFWSc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnZHNhJyxcbiAgICAgICAgcGFyYW1zOiBhc24xLkRTQVByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgfVxuICAgIGNhc2UgJ0VDIFBSSVZBVEUgS0VZJzpcbiAgICAgIGRhdGEgPSBhc24xLkVDUHJpdmF0ZUtleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjdXJ2ZTogZGF0YS5wYXJhbWV0ZXJzLnZhbHVlLFxuICAgICAgICBwcml2YXRlS2V5OiBkYXRhLnByaXZhdGVLZXlcbiAgICAgIH1cbiAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IHR5cGUgJyArIHR5cGUpXG4gIH1cbn1cbnBhcnNlS2V5cy5zaWduYXR1cmUgPSBhc24xLnNpZ25hdHVyZVxuZnVuY3Rpb24gZGVjcnlwdCAoZGF0YSwgcGFzc3dvcmQpIHtcbiAgdmFyIHNhbHQgPSBkYXRhLmFsZ29yaXRobS5kZWNyeXB0LmtkZS5rZGVwYXJhbXMuc2FsdFxuICB2YXIgaXRlcnMgPSBwYXJzZUludChkYXRhLmFsZ29yaXRobS5kZWNyeXB0LmtkZS5rZGVwYXJhbXMuaXRlcnMudG9TdHJpbmcoKSwgMTApXG4gIHZhciBhbGdvID0gYWVzaWRbZGF0YS5hbGdvcml0aG0uZGVjcnlwdC5jaXBoZXIuYWxnby5qb2luKCcuJyldXG4gIHZhciBpdiA9IGRhdGEuYWxnb3JpdGhtLmRlY3J5cHQuY2lwaGVyLml2XG4gIHZhciBjaXBoZXJUZXh0ID0gZGF0YS5zdWJqZWN0UHJpdmF0ZUtleVxuICB2YXIga2V5bGVuID0gcGFyc2VJbnQoYWxnby5zcGxpdCgnLScpWzFdLCAxMCkgLyA4XG4gIHZhciBrZXkgPSBjb21wYXQucGJrZGYyU3luYyhwYXNzd29yZCwgc2FsdCwgaXRlcnMsIGtleWxlbilcbiAgdmFyIGNpcGhlciA9IGNpcGhlcnMuY3JlYXRlRGVjaXBoZXJpdihhbGdvLCBrZXksIGl2KVxuICB2YXIgb3V0ID0gW11cbiAgb3V0LnB1c2goY2lwaGVyLnVwZGF0ZShjaXBoZXJUZXh0KSlcbiAgb3V0LnB1c2goY2lwaGVyLmZpbmFsKCkpXG4gIHJldHVybiBCdWZmZXIuY29uY2F0KG91dClcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZbkp2ZDNObGNtbG1lUzF6YVdkdUwyNXZaR1ZmYlc5a2RXeGxjeTl3WVhKelpTMWhjMjR4TDJsdVpHVjRMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW5aaGNpQmhjMjR4SUQwZ2NtVnhkV2x5WlNnbkxpOWhjMjR4SnlsY2JuWmhjaUJoWlhOcFpDQTlJSEpsY1hWcGNtVW9KeTR2WVdWemFXUXVhbk52YmljcFhHNTJZWElnWm1sNFVISnZZeUE5SUhKbGNYVnBjbVVvSnk0dlptbDRVSEp2WXljcFhHNTJZWElnWTJsd2FHVnljeUE5SUhKbGNYVnBjbVVvSjJKeWIzZHpaWEpwWm5rdFlXVnpKeWxjYm5aaGNpQmpiMjF3WVhRZ1BTQnlaWEYxYVhKbEtDZHdZbXRrWmpJbktWeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQndZWEp6WlV0bGVYTmNibHh1Wm5WdVkzUnBiMjRnY0dGeWMyVkxaWGx6SUNoaWRXWm1aWElwSUh0Y2JpQWdkbUZ5SUhCaGMzTjNiM0prWEc0Z0lHbG1JQ2gwZVhCbGIyWWdZblZtWm1WeUlEMDlQU0FuYjJKcVpXTjBKeUFtSmlBaFFuVm1abVZ5TG1selFuVm1abVZ5S0dKMVptWmxjaWtwSUh0Y2JpQWdJQ0J3WVhOemQyOXlaQ0E5SUdKMVptWmxjaTV3WVhOemNHaHlZWE5sWEc0Z0lDQWdZblZtWm1WeUlEMGdZblZtWm1WeUxtdGxlVnh1SUNCOVhHNGdJR2xtSUNoMGVYQmxiMllnWW5WbVptVnlJRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUdKMVptWmxjaUE5SUc1bGR5QkNkV1ptWlhJb1luVm1abVZ5S1Z4dUlDQjlYRzVjYmlBZ2RtRnlJSE4wY21sd2NHVmtJRDBnWm1sNFVISnZZeWhpZFdabVpYSXNJSEJoYzNOM2IzSmtLVnh1WEc0Z0lIWmhjaUIwZVhCbElEMGdjM1J5YVhCd1pXUXVkR0ZuWEc0Z0lIWmhjaUJrWVhSaElEMGdjM1J5YVhCd1pXUXVaR0YwWVZ4dUlDQjJZWElnYzNWaWRIbHdaU3dnYm1SaGRHRmNiaUFnYzNkcGRHTm9JQ2gwZVhCbEtTQjdYRzRnSUNBZ1kyRnpaU0FuVUZWQ1RFbERJRXRGV1NjNlhHNGdJQ0FnSUNCdVpHRjBZU0E5SUdGemJqRXVVSFZpYkdsalMyVjVMbVJsWTI5a1pTaGtZWFJoTENBblpHVnlKeWxjYmlBZ0lDQWdJSE4xWW5SNWNHVWdQU0J1WkdGMFlTNWhiR2R2Y21sMGFHMHVZV3huYjNKcGRHaHRMbXB2YVc0b0p5NG5LVnh1SUNBZ0lDQWdjM2RwZEdOb0lDaHpkV0owZVhCbEtTQjdYRzRnSUNBZ0lDQWdJR05oYzJVZ0p6RXVNaTQ0TkRBdU1URXpOVFE1TGpFdU1TNHhKenBjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWVhOdU1TNVNVMEZRZFdKc2FXTkxaWGt1WkdWamIyUmxLRzVrWVhSaExuTjFZbXBsWTNSUWRXSnNhV05MWlhrdVpHRjBZU3dnSjJSbGNpY3BYRzRnSUNBZ0lDQWdJR05oYzJVZ0p6RXVNaTQ0TkRBdU1UQXdORFV1TWk0eEp6cGNiaUFnSUNBZ0lDQWdJQ0J1WkdGMFlTNXpkV0pxWldOMFVISnBkbUYwWlV0bGVTQTlJRzVrWVhSaExuTjFZbXBsWTNSUWRXSnNhV05MWlhsY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dKMlZqSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JoZEdFNklHNWtZWFJoWEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmpZWE5sSUNjeExqSXVPRFF3TGpFd01EUXdMalF1TVNjNlhHNGdJQ0FnSUNBZ0lDQWdibVJoZEdFdVlXeG5iM0pwZEdodExuQmhjbUZ0Y3k1d2RXSmZhMlY1SUQwZ1lYTnVNUzVFVTBGd1lYSmhiUzVrWldOdlpHVW9ibVJoZEdFdWMzVmlhbVZqZEZCMVlteHBZMHRsZVM1a1lYUmhMQ0FuWkdWeUp5bGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSjJSellTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhPaUJ1WkdGMFlTNWhiR2R2Y21sMGFHMHVjR0Z5WVcxelhHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JrWldaaGRXeDBPaUIwYUhKdmR5QnVaWGNnUlhKeWIzSW9KM1Z1YTI1dmQyNGdhMlY1SUdsa0lDY2dLeUJ6ZFdKMGVYQmxLVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZDFibXR1YjNkdUlHdGxlU0IwZVhCbElDY2dLeUIwZVhCbEtWeHVJQ0FnSUdOaGMyVWdKMFZPUTFKWlVGUkZSQ0JRVWtsV1FWUkZJRXRGV1NjNlhHNGdJQ0FnSUNCa1lYUmhJRDBnWVhOdU1TNUZibU55ZVhCMFpXUlFjbWwyWVhSbFMyVjVMbVJsWTI5a1pTaGtZWFJoTENBblpHVnlKeWxjYmlBZ0lDQWdJR1JoZEdFZ1BTQmtaV055ZVhCMEtHUmhkR0VzSUhCaGMzTjNiM0prS1Z4dUlDQWdJQ0FnTHk4Z1ptRnNiSE1nZEdoeWIzVm5hRnh1SUNBZ0lHTmhjMlVnSjFCU1NWWkJWRVVnUzBWWkp6cGNiaUFnSUNBZ0lHNWtZWFJoSUQwZ1lYTnVNUzVRY21sMllYUmxTMlY1TG1SbFkyOWtaU2hrWVhSaExDQW5aR1Z5SnlsY2JpQWdJQ0FnSUhOMVluUjVjR1VnUFNCdVpHRjBZUzVoYkdkdmNtbDBhRzB1WVd4bmIzSnBkR2h0TG1wdmFXNG9KeTRuS1Z4dUlDQWdJQ0FnYzNkcGRHTm9JQ2h6ZFdKMGVYQmxLU0I3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdKekV1TWk0NE5EQXVNVEV6TlRRNUxqRXVNUzR4SnpwY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1lYTnVNUzVTVTBGUWNtbDJZWFJsUzJWNUxtUmxZMjlrWlNodVpHRjBZUzV6ZFdKcVpXTjBVSEpwZG1GMFpVdGxlU3dnSjJSbGNpY3BYRzRnSUNBZ0lDQWdJR05oYzJVZ0p6RXVNaTQ0TkRBdU1UQXdORFV1TWk0eEp6cGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kzVnlkbVU2SUc1a1lYUmhMbUZzWjI5eWFYUm9iUzVqZFhKMlpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhCeWFYWmhkR1ZMWlhrNklHRnpiakV1UlVOUWNtbDJZWFJsUzJWNUxtUmxZMjlrWlNodVpHRjBZUzV6ZFdKcVpXTjBVSEpwZG1GMFpVdGxlU3dnSjJSbGNpY3BMbkJ5YVhaaGRHVkxaWGxjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHTmhjMlVnSnpFdU1pNDROREF1TVRBd05EQXVOQzR4SnpwY2JpQWdJQ0FnSUNBZ0lDQnVaR0YwWVM1aGJHZHZjbWwwYUcwdWNHRnlZVzF6TG5CeWFYWmZhMlY1SUQwZ1lYTnVNUzVFVTBGd1lYSmhiUzVrWldOdlpHVW9ibVJoZEdFdWMzVmlhbVZqZEZCeWFYWmhkR1ZMWlhrc0lDZGtaWEluS1Z4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQW5aSE5oSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJoY21GdGN6b2dibVJoZEdFdVlXeG5iM0pwZEdodExuQmhjbUZ0YzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaR1ZtWVhWc2REb2dkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZDFibXR1YjNkdUlHdGxlU0JwWkNBbklDc2djM1ZpZEhsd1pTbGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnbmRXNXJibTkzYmlCclpYa2dkSGx3WlNBbklDc2dkSGx3WlNsY2JpQWdJQ0JqWVhObElDZFNVMEVnVUZWQ1RFbERJRXRGV1NjNlhHNGdJQ0FnSUNCeVpYUjFjbTRnWVhOdU1TNVNVMEZRZFdKc2FXTkxaWGt1WkdWamIyUmxLR1JoZEdFc0lDZGtaWEluS1Z4dUlDQWdJR05oYzJVZ0oxSlRRU0JRVWtsV1FWUkZJRXRGV1NjNlhHNGdJQ0FnSUNCeVpYUjFjbTRnWVhOdU1TNVNVMEZRY21sMllYUmxTMlY1TG1SbFkyOWtaU2hrWVhSaExDQW5aR1Z5SnlsY2JpQWdJQ0JqWVhObElDZEVVMEVnVUZKSlZrRlVSU0JMUlZrbk9seHVJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ2RIbHdaVG9nSjJSellTY3NYRzRnSUNBZ0lDQWdJSEJoY21GdGN6b2dZWE51TVM1RVUwRlFjbWwyWVhSbFMyVjVMbVJsWTI5a1pTaGtZWFJoTENBblpHVnlKeWxjYmlBZ0lDQWdJSDFjYmlBZ0lDQmpZWE5sSUNkRlF5QlFVa2xXUVZSRklFdEZXU2M2WEc0Z0lDQWdJQ0JrWVhSaElEMGdZWE51TVM1RlExQnlhWFpoZEdWTFpYa3VaR1ZqYjJSbEtHUmhkR0VzSUNka1pYSW5LVnh1SUNBZ0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lDQWdZM1Z5ZG1VNklHUmhkR0V1Y0dGeVlXMWxkR1Z5Y3k1MllXeDFaU3hjYmlBZ0lDQWdJQ0FnY0hKcGRtRjBaVXRsZVRvZ1pHRjBZUzV3Y21sMllYUmxTMlY1WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdaR1ZtWVhWc2REb2dkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZDFibXR1YjNkdUlHdGxlU0IwZVhCbElDY2dLeUIwZVhCbEtWeHVJQ0I5WEc1OVhHNXdZWEp6WlV0bGVYTXVjMmxuYm1GMGRYSmxJRDBnWVhOdU1TNXphV2R1WVhSMWNtVmNibVoxYm1OMGFXOXVJR1JsWTNKNWNIUWdLR1JoZEdFc0lIQmhjM04zYjNKa0tTQjdYRzRnSUhaaGNpQnpZV3gwSUQwZ1pHRjBZUzVoYkdkdmNtbDBhRzB1WkdWamNubHdkQzVyWkdVdWEyUmxjR0Z5WVcxekxuTmhiSFJjYmlBZ2RtRnlJR2wwWlhKeklEMGdjR0Z5YzJWSmJuUW9aR0YwWVM1aGJHZHZjbWwwYUcwdVpHVmpjbmx3ZEM1clpHVXVhMlJsY0dGeVlXMXpMbWwwWlhKekxuUnZVM1J5YVc1bktDa3NJREV3S1Z4dUlDQjJZWElnWVd4bmJ5QTlJR0ZsYzJsa1cyUmhkR0V1WVd4bmIzSnBkR2h0TG1SbFkzSjVjSFF1WTJsd2FHVnlMbUZzWjI4dWFtOXBiaWduTGljcFhWeHVJQ0IyWVhJZ2FYWWdQU0JrWVhSaExtRnNaMjl5YVhSb2JTNWtaV055ZVhCMExtTnBjR2hsY2k1cGRseHVJQ0IyWVhJZ1kybHdhR1Z5VkdWNGRDQTlJR1JoZEdFdWMzVmlhbVZqZEZCeWFYWmhkR1ZMWlhsY2JpQWdkbUZ5SUd0bGVXeGxiaUE5SUhCaGNuTmxTVzUwS0dGc1oyOHVjM0JzYVhRb0p5MG5LVnN4WFN3Z01UQXBJQzhnT0Z4dUlDQjJZWElnYTJWNUlEMGdZMjl0Y0dGMExuQmlhMlJtTWxONWJtTW9jR0Z6YzNkdmNtUXNJSE5oYkhRc0lHbDBaWEp6TENCclpYbHNaVzRwWEc0Z0lIWmhjaUJqYVhCb1pYSWdQU0JqYVhCb1pYSnpMbU55WldGMFpVUmxZMmx3YUdWeWFYWW9ZV3huYnl3Z2EyVjVMQ0JwZGlsY2JpQWdkbUZ5SUc5MWRDQTlJRnRkWEc0Z0lHOTFkQzV3ZFhOb0tHTnBjR2hsY2k1MWNHUmhkR1VvWTJsd2FHVnlWR1Y0ZENrcFhHNGdJRzkxZEM1d2RYTm9LR05wY0dobGNpNW1hVzVoYkNncEtWeHVJQ0J5WlhSMWNtNGdRblZtWm1WeUxtTnZibU5oZENodmRYUXBYRzU5WEc0aVhYMD0iLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG52YXIgY3JlYXRlSG1hYyA9IHJlcXVpcmUoJ2NyZWF0ZS1obWFjJylcbnZhciBNQVhfQUxMT0MgPSBNYXRoLnBvdygyLCAzMCkgLSAxIC8vIGRlZmF1bHQgaW4gaW9qc1xuXG5leHBvcnRzLnBia2RmMiA9IHBia2RmMlxuZnVuY3Rpb24gcGJrZGYyIChwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuLCBkaWdlc3QsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2YgZGlnZXN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBkaWdlc3RcbiAgICBkaWdlc3QgPSB1bmRlZmluZWRcbiAgfVxuXG4gIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGNhbGxiYWNrIHByb3ZpZGVkIHRvIHBia2RmMicpXG4gIH1cblxuICB2YXIgcmVzdWx0ID0gcGJrZGYyU3luYyhwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuLCBkaWdlc3QpXG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgcmVzdWx0KVxuICB9KVxufVxuXG5leHBvcnRzLnBia2RmMlN5bmMgPSBwYmtkZjJTeW5jXG5mdW5jdGlvbiBwYmtkZjJTeW5jIChwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuLCBkaWdlc3QpIHtcbiAgaWYgKHR5cGVvZiBpdGVyYXRpb25zICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0l0ZXJhdGlvbnMgbm90IGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmIChpdGVyYXRpb25zIDwgMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBpdGVyYXRpb25zJylcbiAgfVxuXG4gIGlmICh0eXBlb2Yga2V5bGVuICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0tleSBsZW5ndGggbm90IGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmIChrZXlsZW4gPCAwIHx8IGtleWxlbiA+IE1BWF9BTExPQykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBrZXkgbGVuZ3RoJylcbiAgfVxuXG4gIGRpZ2VzdCA9IGRpZ2VzdCB8fCAnc2hhMSdcblxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwYXNzd29yZCkpIHBhc3N3b3JkID0gbmV3IEJ1ZmZlcihwYXNzd29yZCwgJ2JpbmFyeScpXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHNhbHQpKSBzYWx0ID0gbmV3IEJ1ZmZlcihzYWx0LCAnYmluYXJ5JylcblxuICB2YXIgaExlblxuICB2YXIgbCA9IDFcbiAgdmFyIERLID0gbmV3IEJ1ZmZlcihrZXlsZW4pXG4gIHZhciBibG9jazEgPSBuZXcgQnVmZmVyKHNhbHQubGVuZ3RoICsgNClcbiAgc2FsdC5jb3B5KGJsb2NrMSwgMCwgMCwgc2FsdC5sZW5ndGgpXG5cbiAgdmFyIHJcbiAgdmFyIFRcblxuICBmb3IgKHZhciBpID0gMTsgaSA8PSBsOyBpKyspIHtcbiAgICBibG9jazEud3JpdGVVSW50MzJCRShpLCBzYWx0Lmxlbmd0aClcbiAgICB2YXIgVSA9IGNyZWF0ZUhtYWMoZGlnZXN0LCBwYXNzd29yZCkudXBkYXRlKGJsb2NrMSkuZGlnZXN0KClcblxuICAgIGlmICghaExlbikge1xuICAgICAgaExlbiA9IFUubGVuZ3RoXG4gICAgICBUID0gbmV3IEJ1ZmZlcihoTGVuKVxuICAgICAgbCA9IE1hdGguY2VpbChrZXlsZW4gLyBoTGVuKVxuICAgICAgciA9IGtleWxlbiAtIChsIC0gMSkgKiBoTGVuXG4gICAgfVxuXG4gICAgVS5jb3B5KFQsIDAsIDAsIGhMZW4pXG5cbiAgICBmb3IgKHZhciBqID0gMTsgaiA8IGl0ZXJhdGlvbnM7IGorKykge1xuICAgICAgVSA9IGNyZWF0ZUhtYWMoZGlnZXN0LCBwYXNzd29yZCkudXBkYXRlKFUpLmRpZ2VzdCgpXG5cbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgaExlbjsgaysrKSB7XG4gICAgICAgIFRba10gXj0gVVtrXVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkZXN0UG9zID0gKGkgLSAxKSAqIGhMZW5cbiAgICB2YXIgbGVuID0gKGkgPT09IGwgPyByIDogaExlbilcbiAgICBULmNvcHkoREssIGRlc3RQb3MsIDAsIGxlbilcbiAgfVxuXG4gIHJldHVybiBES1xufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdmNHSnJaR1l5TDJKeWIzZHpaWEl1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUdOeVpXRjBaVWh0WVdNZ1BTQnlaWEYxYVhKbEtDZGpjbVZoZEdVdGFHMWhZeWNwWEc1MllYSWdUVUZZWDBGTVRFOURJRDBnVFdGMGFDNXdiM2NvTWl3Z016QXBJQzBnTVNBdkx5QmtaV1poZFd4MElHbHVJR2x2YW5OY2JseHVaWGh3YjNKMGN5NXdZbXRrWmpJZ1BTQndZbXRrWmpKY2JtWjFibU4wYVc5dUlIQmlhMlJtTWlBb2NHRnpjM2R2Y21Rc0lITmhiSFFzSUdsMFpYSmhkR2x2Ym5Nc0lHdGxlV3hsYml3Z1pHbG5aWE4wTENCallXeHNZbUZqYXlrZ2UxeHVJQ0JwWmlBb2RIbHdaVzltSUdScFoyVnpkQ0E5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lHTmhiR3hpWVdOcklEMGdaR2xuWlhOMFhHNGdJQ0FnWkdsblpYTjBJRDBnZFc1a1pXWnBibVZrWEc0Z0lIMWNibHh1SUNCcFppQW9kSGx3Wlc5bUlHTmhiR3hpWVdOcklDRTlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RPYnlCallXeHNZbUZqYXlCd2NtOTJhV1JsWkNCMGJ5QndZbXRrWmpJbktWeHVJQ0I5WEc1Y2JpQWdkbUZ5SUhKbGMzVnNkQ0E5SUhCaWEyUm1NbE41Ym1Nb2NHRnpjM2R2Y21Rc0lITmhiSFFzSUdsMFpYSmhkR2x2Ym5Nc0lHdGxlV3hsYml3Z1pHbG5aWE4wS1Z4dUlDQnpaWFJVYVcxbGIzVjBLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0JqWVd4c1ltRmpheWgxYm1SbFptbHVaV1FzSUhKbGMzVnNkQ2xjYmlBZ2ZTbGNibjFjYmx4dVpYaHdiM0owY3k1d1ltdGtaakpUZVc1aklEMGdjR0pyWkdZeVUzbHVZMXh1Wm5WdVkzUnBiMjRnY0dKclpHWXlVM2x1WXlBb2NHRnpjM2R2Y21Rc0lITmhiSFFzSUdsMFpYSmhkR2x2Ym5Nc0lHdGxlV3hsYml3Z1pHbG5aWE4wS1NCN1hHNGdJR2xtSUNoMGVYQmxiMllnYVhSbGNtRjBhVzl1Y3lBaFBUMGdKMjUxYldKbGNpY3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLQ2RKZEdWeVlYUnBiMjV6SUc1dmRDQmhJRzUxYldKbGNpY3BYRzRnSUgxY2JseHVJQ0JwWmlBb2FYUmxjbUYwYVc5dWN5QThJREFwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkQ1lXUWdhWFJsY21GMGFXOXVjeWNwWEc0Z0lIMWNibHh1SUNCcFppQW9kSGx3Wlc5bUlHdGxlV3hsYmlBaFBUMGdKMjUxYldKbGNpY3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLQ2RMWlhrZ2JHVnVaM1JvSUc1dmRDQmhJRzUxYldKbGNpY3BYRzRnSUgxY2JseHVJQ0JwWmlBb2EyVjViR1Z1SUR3Z01DQjhmQ0JyWlhsc1pXNGdQaUJOUVZoZlFVeE1UME1wSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkQ1lXUWdhMlY1SUd4bGJtZDBhQ2NwWEc0Z0lIMWNibHh1SUNCa2FXZGxjM1FnUFNCa2FXZGxjM1FnZkh3Z0ozTm9ZVEVuWEc1Y2JpQWdhV1lnS0NGQ2RXWm1aWEl1YVhOQ2RXWm1aWElvY0dGemMzZHZjbVFwS1NCd1lYTnpkMjl5WkNBOUlHNWxkeUJDZFdabVpYSW9jR0Z6YzNkdmNtUXNJQ2RpYVc1aGNua25LVnh1SUNCcFppQW9JVUoxWm1abGNpNXBjMEoxWm1abGNpaHpZV3gwS1NrZ2MyRnNkQ0E5SUc1bGR5QkNkV1ptWlhJb2MyRnNkQ3dnSjJKcGJtRnllU2NwWEc1Y2JpQWdkbUZ5SUdoTVpXNWNiaUFnZG1GeUlHd2dQU0F4WEc0Z0lIWmhjaUJFU3lBOUlHNWxkeUJDZFdabVpYSW9hMlY1YkdWdUtWeHVJQ0IyWVhJZ1lteHZZMnN4SUQwZ2JtVjNJRUoxWm1abGNpaHpZV3gwTG14bGJtZDBhQ0FySURRcFhHNGdJSE5oYkhRdVkyOXdlU2hpYkc5amF6RXNJREFzSURBc0lITmhiSFF1YkdWdVozUm9LVnh1WEc0Z0lIWmhjaUJ5WEc0Z0lIWmhjaUJVWEc1Y2JpQWdabTl5SUNoMllYSWdhU0E5SURFN0lHa2dQRDBnYkRzZ2FTc3JLU0I3WEc0Z0lDQWdZbXh2WTJzeExuZHlhWFJsVlVsdWRETXlRa1VvYVN3Z2MyRnNkQzVzWlc1bmRHZ3BYRzRnSUNBZ2RtRnlJRlVnUFNCamNtVmhkR1ZJYldGaktHUnBaMlZ6ZEN3Z2NHRnpjM2R2Y21RcExuVndaR0YwWlNoaWJHOWphekVwTG1ScFoyVnpkQ2dwWEc1Y2JpQWdJQ0JwWmlBb0lXaE1aVzRwSUh0Y2JpQWdJQ0FnSUdoTVpXNGdQU0JWTG14bGJtZDBhRnh1SUNBZ0lDQWdWQ0E5SUc1bGR5QkNkV1ptWlhJb2FFeGxiaWxjYmlBZ0lDQWdJR3dnUFNCTllYUm9MbU5sYVd3b2EyVjViR1Z1SUM4Z2FFeGxiaWxjYmlBZ0lDQWdJSElnUFNCclpYbHNaVzRnTFNBb2JDQXRJREVwSUNvZ2FFeGxibHh1SUNBZ0lIMWNibHh1SUNBZ0lGVXVZMjl3ZVNoVUxDQXdMQ0F3TENCb1RHVnVLVnh1WEc0Z0lDQWdabTl5SUNoMllYSWdhaUE5SURFN0lHb2dQQ0JwZEdWeVlYUnBiMjV6T3lCcUt5c3BJSHRjYmlBZ0lDQWdJRlVnUFNCamNtVmhkR1ZJYldGaktHUnBaMlZ6ZEN3Z2NHRnpjM2R2Y21RcExuVndaR0YwWlNoVktTNWthV2RsYzNRb0tWeHVYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnJJRDBnTURzZ2F5QThJR2hNWlc0N0lHc3JLeWtnZTF4dUlDQWdJQ0FnSUNCVVcydGRJRjQ5SUZWYmExMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCMllYSWdaR1Z6ZEZCdmN5QTlJQ2hwSUMwZ01Ta2dLaUJvVEdWdVhHNGdJQ0FnZG1GeUlHeGxiaUE5SUNocElEMDlQU0JzSUQ4Z2NpQTZJR2hNWlc0cFhHNGdJQ0FnVkM1amIzQjVLRVJMTENCa1pYTjBVRzl6TENBd0xDQnNaVzRwWEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnUkV0Y2JuMWNiaUpkZlE9PSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGVIYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gvYnJvd3NlcicpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnc3RyZWFtJykuVHJhbnNmb3JtXG5cbnZhciBaRVJPUyA9IG5ldyBCdWZmZXIoMTI4KVxuWkVST1MuZmlsbCgwKVxuXG5mdW5jdGlvbiBIbWFjKGFsZywga2V5KSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIGFsZyA9IGFsZy50b0xvd2VyQ2FzZSgpXG4gIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xuICAgIGtleSA9IG5ldyBCdWZmZXIoa2V5KVxuICB9XG5cbiAgdmFyIGJsb2Nrc2l6ZSA9IChhbGcgPT09ICdzaGE1MTInIHx8IGFsZyA9PT0gJ3NoYTM4NCcpID8gMTI4IDogNjRcblxuICB0aGlzLl9hbGcgPSBhbGdcbiAgdGhpcy5fa2V5ID0ga2V5XG5cbiAgaWYgKGtleS5sZW5ndGggPiBibG9ja3NpemUpIHtcbiAgICBrZXkgPSBjcmVhdGVIYXNoKGFsZykudXBkYXRlKGtleSkuZGlnZXN0KClcblxuICB9IGVsc2UgaWYgKGtleS5sZW5ndGggPCBibG9ja3NpemUpIHtcbiAgICBrZXkgPSBCdWZmZXIuY29uY2F0KFtrZXksIFpFUk9TXSwgYmxvY2tzaXplKVxuICB9XG5cbiAgdmFyIGlwYWQgPSB0aGlzLl9pcGFkID0gbmV3IEJ1ZmZlcihibG9ja3NpemUpXG4gIHZhciBvcGFkID0gdGhpcy5fb3BhZCA9IG5ldyBCdWZmZXIoYmxvY2tzaXplKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tzaXplOyBpKyspIHtcbiAgICBpcGFkW2ldID0ga2V5W2ldIF4gMHgzNlxuICAgIG9wYWRbaV0gPSBrZXlbaV0gXiAweDVDXG4gIH1cblxuICB0aGlzLl9oYXNoID0gY3JlYXRlSGFzaChhbGcpLnVwZGF0ZShpcGFkKVxufVxuXG5pbmhlcml0cyhIbWFjLCBUcmFuc2Zvcm0pXG5cbkhtYWMucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBlbmMpIHtcbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSwgZW5jKVxuXG4gIHJldHVybiB0aGlzXG59XG5cbkhtYWMucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoZGF0YSwgXywgbmV4dCkge1xuICB0aGlzLl9oYXNoLnVwZGF0ZShkYXRhKVxuXG4gIG5leHQoKVxufVxuXG5IbWFjLnByb3RvdHlwZS5fZmx1c2ggPSBmdW5jdGlvbiAobmV4dCkge1xuICB0aGlzLnB1c2godGhpcy5kaWdlc3QoKSlcblxuICBuZXh0KClcbn1cblxuSG1hYy5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gKGVuYykge1xuICB2YXIgaCA9IHRoaXMuX2hhc2guZGlnZXN0KClcblxuICByZXR1cm4gY3JlYXRlSGFzaCh0aGlzLl9hbGcpLnVwZGF0ZSh0aGlzLl9vcGFkKS51cGRhdGUoaCkuZGlnZXN0KGVuYylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVIbWFjKGFsZywga2V5KSB7XG4gIHJldHVybiBuZXcgSG1hYyhhbGcsIGtleSlcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZM0psWVhSbExXaHRZV012WW5KdmQzTmxjaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2labWxzWlNJNkltZGxibVZ5WVhSbFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUluZFhObElITjBjbWxqZENjN1hHNTJZWElnWTNKbFlYUmxTR0Z6YUNBOUlISmxjWFZwY21Vb0oyTnlaV0YwWlMxb1lYTm9MMkp5YjNkelpYSW5LVHRjYm5aaGNpQnBibWhsY21sMGN5QTlJSEpsY1hWcGNtVW9KMmx1YUdWeWFYUnpKeWxjYmx4dWRtRnlJRlJ5WVc1elptOXliU0E5SUhKbGNYVnBjbVVvSjNOMGNtVmhiU2NwTGxSeVlXNXpabTl5YlZ4dVhHNTJZWElnV2tWU1QxTWdQU0J1WlhjZ1FuVm1abVZ5S0RFeU9DbGNibHBGVWs5VExtWnBiR3dvTUNsY2JseHVablZ1WTNScGIyNGdTRzFoWXloaGJHY3NJR3RsZVNrZ2UxeHVJQ0JVY21GdWMyWnZjbTB1WTJGc2JDaDBhR2x6S1Z4dUlDQmhiR2NnUFNCaGJHY3VkRzlNYjNkbGNrTmhjMlVvS1Z4dUlDQnBaaUFvZEhsd1pXOW1JR3RsZVNBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQnJaWGtnUFNCdVpYY2dRblZtWm1WeUtHdGxlU2xjYmlBZ2ZWeHVYRzRnSUhaaGNpQmliRzlqYTNOcGVtVWdQU0FvWVd4bklEMDlQU0FuYzJoaE5URXlKeUI4ZkNCaGJHY2dQVDA5SUNkemFHRXpPRFFuS1NBL0lERXlPQ0E2SURZMFhHNWNiaUFnZEdocGN5NWZZV3huSUQwZ1lXeG5YRzRnSUhSb2FYTXVYMnRsZVNBOUlHdGxlVnh1WEc0Z0lHbG1JQ2hyWlhrdWJHVnVaM1JvSUQ0Z1lteHZZMnR6YVhwbEtTQjdYRzRnSUNBZ2EyVjVJRDBnWTNKbFlYUmxTR0Z6YUNoaGJHY3BMblZ3WkdGMFpTaHJaWGtwTG1ScFoyVnpkQ2dwWEc1Y2JpQWdmU0JsYkhObElHbG1JQ2hyWlhrdWJHVnVaM1JvSUR3Z1lteHZZMnR6YVhwbEtTQjdYRzRnSUNBZ2EyVjVJRDBnUW5WbVptVnlMbU52Ym1OaGRDaGJhMlY1TENCYVJWSlBVMTBzSUdKc2IyTnJjMmw2WlNsY2JpQWdmVnh1WEc0Z0lIWmhjaUJwY0dGa0lEMGdkR2hwY3k1ZmFYQmhaQ0E5SUc1bGR5QkNkV1ptWlhJb1lteHZZMnR6YVhwbEtWeHVJQ0IyWVhJZ2IzQmhaQ0E5SUhSb2FYTXVYMjl3WVdRZ1BTQnVaWGNnUW5WbVptVnlLR0pzYjJOcmMybDZaU2xjYmx4dUlDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR0pzYjJOcmMybDZaVHNnYVNzcktTQjdYRzRnSUNBZ2FYQmhaRnRwWFNBOUlHdGxlVnRwWFNCZUlEQjRNelpjYmlBZ0lDQnZjR0ZrVzJsZElEMGdhMlY1VzJsZElGNGdNSGcxUTF4dUlDQjlYRzVjYmlBZ2RHaHBjeTVmYUdGemFDQTlJR055WldGMFpVaGhjMmdvWVd4bktTNTFjR1JoZEdVb2FYQmhaQ2xjYm4xY2JseHVhVzVvWlhKcGRITW9TRzFoWXl3Z1ZISmhibk5tYjNKdEtWeHVYRzVJYldGakxuQnliM1J2ZEhsd1pTNTFjR1JoZEdVZ1BTQm1kVzVqZEdsdmJpQW9aR0YwWVN3Z1pXNWpLU0I3WEc0Z0lIUm9hWE11WDJoaGMyZ3VkWEJrWVhSbEtHUmhkR0VzSUdWdVl5bGNibHh1SUNCeVpYUjFjbTRnZEdocGMxeHVmVnh1WEc1SWJXRmpMbkJ5YjNSdmRIbHdaUzVmZEhKaGJuTm1iM0p0SUQwZ1puVnVZM1JwYjI0Z0tHUmhkR0VzSUY4c0lHNWxlSFFwSUh0Y2JpQWdkR2hwY3k1ZmFHRnphQzUxY0dSaGRHVW9aR0YwWVNsY2JseHVJQ0J1WlhoMEtDbGNibjFjYmx4dVNHMWhZeTV3Y205MGIzUjVjR1V1WDJac2RYTm9JRDBnWm5WdVkzUnBiMjRnS0c1bGVIUXBJSHRjYmlBZ2RHaHBjeTV3ZFhOb0tIUm9hWE11WkdsblpYTjBLQ2twWEc1Y2JpQWdibVY0ZENncFhHNTlYRzVjYmtodFlXTXVjSEp2ZEc5MGVYQmxMbVJwWjJWemRDQTlJR1oxYm1OMGFXOXVJQ2hsYm1NcElIdGNiaUFnZG1GeUlHZ2dQU0IwYUdsekxsOW9ZWE5vTG1ScFoyVnpkQ2dwWEc1Y2JpQWdjbVYwZFhKdUlHTnlaV0YwWlVoaGMyZ29kR2hwY3k1ZllXeG5LUzUxY0dSaGRHVW9kR2hwY3k1ZmIzQmhaQ2t1ZFhCa1lYUmxLR2dwTG1ScFoyVnpkQ2hsYm1NcFhHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnWTNKbFlYUmxTRzFoWXloaGJHY3NJR3RsZVNrZ2UxeHVJQ0J5WlhSMWNtNGdibVYzSUVodFlXTW9ZV3huTENCclpYa3BYRzU5WEc0aVhYMD0iLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG4ndXNlIHN0cmljdCc7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgbWQ1ID0gcmVxdWlyZSgnLi9tZDUnKVxudmFyIHJtZDE2MCA9IHJlcXVpcmUoJ3JpcGVtZDE2MCcpXG52YXIgc2hhID0gcmVxdWlyZSgnc2hhLmpzJylcblxudmFyIEJhc2UgPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG5cbmZ1bmN0aW9uIEhhc2hOb0NvbnN0cnVjdG9yKGhhc2gpIHtcbiAgQmFzZS5jYWxsKHRoaXMsICdkaWdlc3QnKVxuXG4gIHRoaXMuX2hhc2ggPSBoYXNoXG4gIHRoaXMuYnVmZmVycyA9IFtdXG59XG5cbmluaGVyaXRzKEhhc2hOb0NvbnN0cnVjdG9yLCBCYXNlKVxuXG5IYXNoTm9Db25zdHJ1Y3Rvci5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuYnVmZmVycy5wdXNoKGRhdGEpXG59XG5cbkhhc2hOb0NvbnN0cnVjdG9yLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBidWYgPSBCdWZmZXIuY29uY2F0KHRoaXMuYnVmZmVycylcbiAgdmFyIHIgPSB0aGlzLl9oYXNoKGJ1ZilcbiAgdGhpcy5idWZmZXJzID0gbnVsbFxuXG4gIHJldHVybiByXG59XG5cbmZ1bmN0aW9uIEhhc2goaGFzaCkge1xuICBCYXNlLmNhbGwodGhpcywgJ2RpZ2VzdCcpXG5cbiAgdGhpcy5faGFzaCA9IGhhc2hcbn1cblxuaW5oZXJpdHMoSGFzaCwgQmFzZSlcblxuSGFzaC5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG59XG5cbkhhc2gucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX2hhc2guZGlnZXN0KClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVIYXNoIChhbGcpIHtcbiAgYWxnID0gYWxnLnRvTG93ZXJDYXNlKClcbiAgaWYgKCdtZDUnID09PSBhbGcpIHJldHVybiBuZXcgSGFzaE5vQ29uc3RydWN0b3IobWQ1KVxuICBpZiAoJ3JtZDE2MCcgPT09IGFsZyB8fCAncmlwZW1kMTYwJyA9PT0gYWxnKSByZXR1cm4gbmV3IEhhc2hOb0NvbnN0cnVjdG9yKHJtZDE2MClcblxuICByZXR1cm4gbmV3IEhhc2goc2hhKGFsZykpXG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WTNKbFlYUmxMV2hoYzJndlluSnZkM05sY2k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUozVnpaU0J6ZEhKcFkzUW5PMXh1ZG1GeUlHbHVhR1Z5YVhSeklEMGdjbVZ4ZFdseVpTZ25hVzVvWlhKcGRITW5LVnh1ZG1GeUlHMWtOU0E5SUhKbGNYVnBjbVVvSnk0dmJXUTFKeWxjYm5aaGNpQnliV1F4TmpBZ1BTQnlaWEYxYVhKbEtDZHlhWEJsYldReE5qQW5LVnh1ZG1GeUlITm9ZU0E5SUhKbGNYVnBjbVVvSjNOb1lTNXFjeWNwWEc1Y2JuWmhjaUJDWVhObElEMGdjbVZ4ZFdseVpTZ25ZMmx3YUdWeUxXSmhjMlVuS1Z4dVhHNW1kVzVqZEdsdmJpQklZWE5vVG05RGIyNXpkSEoxWTNSdmNpaG9ZWE5vS1NCN1hHNGdJRUpoYzJVdVkyRnNiQ2gwYUdsekxDQW5aR2xuWlhOMEp5bGNibHh1SUNCMGFHbHpMbDlvWVhOb0lEMGdhR0Z6YUZ4dUlDQjBhR2x6TG1KMVptWmxjbk1nUFNCYlhWeHVmVnh1WEc1cGJtaGxjbWwwY3loSVlYTm9UbTlEYjI1emRISjFZM1J2Y2l3Z1FtRnpaU2xjYmx4dVNHRnphRTV2UTI5dWMzUnlkV04wYjNJdWNISnZkRzkwZVhCbExsOTFjR1JoZEdVZ1BTQm1kVzVqZEdsdmJpQW9aR0YwWVNrZ2UxeHVJQ0IwYUdsekxtSjFabVpsY25NdWNIVnphQ2hrWVhSaEtWeHVmVnh1WEc1SVlYTm9UbTlEYjI1emRISjFZM1J2Y2k1d2NtOTBiM1I1Y0dVdVgyWnBibUZzSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNCMllYSWdZblZtSUQwZ1FuVm1abVZ5TG1OdmJtTmhkQ2gwYUdsekxtSjFabVpsY25NcFhHNGdJSFpoY2lCeUlEMGdkR2hwY3k1ZmFHRnphQ2hpZFdZcFhHNGdJSFJvYVhNdVluVm1abVZ5Y3lBOUlHNTFiR3hjYmx4dUlDQnlaWFIxY200Z2NseHVmVnh1WEc1bWRXNWpkR2x2YmlCSVlYTm9LR2hoYzJncElIdGNiaUFnUW1GelpTNWpZV3hzS0hSb2FYTXNJQ2RrYVdkbGMzUW5LVnh1WEc0Z0lIUm9hWE11WDJoaGMyZ2dQU0JvWVhOb1hHNTlYRzVjYm1sdWFHVnlhWFJ6S0VoaGMyZ3NJRUpoYzJVcFhHNWNia2hoYzJndWNISnZkRzkwZVhCbExsOTFjR1JoZEdVZ1BTQm1kVzVqZEdsdmJpQW9aR0YwWVNrZ2UxeHVJQ0IwYUdsekxsOW9ZWE5vTG5Wd1pHRjBaU2hrWVhSaEtWeHVmVnh1WEc1SVlYTm9MbkJ5YjNSdmRIbHdaUzVmWm1sdVlXd2dQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJSEpsZEhWeWJpQjBhR2x6TGw5b1lYTm9MbVJwWjJWemRDZ3BYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0Z1kzSmxZWFJsU0dGemFDQW9ZV3huS1NCN1hHNGdJR0ZzWnlBOUlHRnNaeTUwYjB4dmQyVnlRMkZ6WlNncFhHNGdJR2xtSUNnbmJXUTFKeUE5UFQwZ1lXeG5LU0J5WlhSMWNtNGdibVYzSUVoaGMyaE9iME52Ym5OMGNuVmpkRzl5S0cxa05TbGNiaUFnYVdZZ0tDZHliV1F4TmpBbklEMDlQU0JoYkdjZ2ZId2dKM0pwY0dWdFpERTJNQ2NnUFQwOUlHRnNaeWtnY21WMGRYSnVJRzVsZHlCSVlYTm9UbTlEYjI1emRISjFZM1J2Y2loeWJXUXhOakFwWEc1Y2JpQWdjbVYwZFhKdUlHNWxkeUJJWVhOb0tITm9ZU2hoYkdjcEtWeHVmVnh1SWwxOSIsInZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBTSEEgKGFsZ29yaXRobSkge1xuICBhbGdvcml0aG0gPSBhbGdvcml0aG0udG9Mb3dlckNhc2UoKVxuXG4gIHZhciBBbGdvcml0aG0gPSBleHBvcnRzW2FsZ29yaXRobV1cbiAgaWYgKCFBbGdvcml0aG0pIHRocm93IG5ldyBFcnJvcihhbGdvcml0aG0gKyAnIGlzIG5vdCBzdXBwb3J0ZWQgKHdlIGFjY2VwdCBwdWxsIHJlcXVlc3RzKScpXG5cbiAgcmV0dXJuIG5ldyBBbGdvcml0aG0oKVxufVxuXG5leHBvcnRzLnNoYSA9IHJlcXVpcmUoJy4vc2hhJylcbmV4cG9ydHMuc2hhMSA9IHJlcXVpcmUoJy4vc2hhMScpXG5leHBvcnRzLnNoYTIyNCA9IHJlcXVpcmUoJy4vc2hhMjI0JylcbmV4cG9ydHMuc2hhMjU2ID0gcmVxdWlyZSgnLi9zaGEyNTYnKVxuZXhwb3J0cy5zaGEzODQgPSByZXF1aXJlKCcuL3NoYTM4NCcpXG5leHBvcnRzLnNoYTUxMiA9IHJlcXVpcmUoJy4vc2hhNTEyJylcbiIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBTSEE1MTIgPSByZXF1aXJlKCcuL3NoYTUxMicpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG5cbnZhciBXID0gbmV3IEFycmF5KDE2MClcblxuZnVuY3Rpb24gU2hhMzg0ICgpIHtcbiAgdGhpcy5pbml0KClcbiAgdGhpcy5fdyA9IFdcblxuICBIYXNoLmNhbGwodGhpcywgMTI4LCAxMTIpXG59XG5cbmluaGVyaXRzKFNoYTM4NCwgU0hBNTEyKVxuXG5TaGEzODQucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweGNiYmI5ZDVkIHwgMFxuICB0aGlzLl9iID0gMHg2MjlhMjkyYSB8IDBcbiAgdGhpcy5fYyA9IDB4OTE1OTAxNWEgfCAwXG4gIHRoaXMuX2QgPSAweDE1MmZlY2Q4IHwgMFxuICB0aGlzLl9lID0gMHg2NzMzMjY2NyB8IDBcbiAgdGhpcy5fZiA9IDB4OGViNDRhODcgfCAwXG4gIHRoaXMuX2cgPSAweGRiMGMyZTBkIHwgMFxuICB0aGlzLl9oID0gMHg0N2I1NDgxZCB8IDBcblxuICB0aGlzLl9hbCA9IDB4YzEwNTllZDggfCAwXG4gIHRoaXMuX2JsID0gMHgzNjdjZDUwNyB8IDBcbiAgdGhpcy5fY2wgPSAweDMwNzBkZDE3IHwgMFxuICB0aGlzLl9kbCA9IDB4ZjcwZTU5MzkgfCAwXG4gIHRoaXMuX2VsID0gMHhmZmMwMGIzMSB8IDBcbiAgdGhpcy5fZmwgPSAweDY4NTgxNTExIHwgMFxuICB0aGlzLl9nbCA9IDB4NjRmOThmYTcgfCAwXG4gIHRoaXMuX2hsID0gMHhiZWZhNGZhNCB8IDBcblxuICByZXR1cm4gdGhpc1xufVxuXG5TaGEzODQucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IG5ldyBCdWZmZXIoNDgpXG5cbiAgZnVuY3Rpb24gd3JpdGVJbnQ2NEJFIChoLCBsLCBvZmZzZXQpIHtcbiAgICBILndyaXRlSW50MzJCRShoLCBvZmZzZXQpXG4gICAgSC53cml0ZUludDMyQkUobCwgb2Zmc2V0ICsgNClcbiAgfVxuXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9hLCB0aGlzLl9hbCwgMClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2IsIHRoaXMuX2JsLCA4KVxuICB3cml0ZUludDY0QkUodGhpcy5fYywgdGhpcy5fY2wsIDE2KVxuICB3cml0ZUludDY0QkUodGhpcy5fZCwgdGhpcy5fZGwsIDI0KVxuICB3cml0ZUludDY0QkUodGhpcy5fZSwgdGhpcy5fZWwsIDMyKVxuICB3cml0ZUludDY0QkUodGhpcy5fZiwgdGhpcy5fZmwsIDQwKVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhMzg0XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WTNKbFlYUmxMV2hoYzJndmJtOWtaVjl0YjJSMWJHVnpMM05vWVM1cWN5OXphR0V6T0RRdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUdsdWFHVnlhWFJ6SUQwZ2NtVnhkV2x5WlNnbmFXNW9aWEpwZEhNbktWeHVkbUZ5SUZOSVFUVXhNaUE5SUhKbGNYVnBjbVVvSnk0dmMyaGhOVEV5SnlsY2JuWmhjaUJJWVhOb0lEMGdjbVZ4ZFdseVpTZ25MaTlvWVhOb0p5bGNibHh1ZG1GeUlGY2dQU0J1WlhjZ1FYSnlZWGtvTVRZd0tWeHVYRzVtZFc1amRHbHZiaUJUYUdFek9EUWdLQ2tnZTF4dUlDQjBhR2x6TG1sdWFYUW9LVnh1SUNCMGFHbHpMbDkzSUQwZ1YxeHVYRzRnSUVoaGMyZ3VZMkZzYkNoMGFHbHpMQ0F4TWpnc0lERXhNaWxjYm4xY2JseHVhVzVvWlhKcGRITW9VMmhoTXpnMExDQlRTRUUxTVRJcFhHNWNibE5vWVRNNE5DNXdjbTkwYjNSNWNHVXVhVzVwZENBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ2RHaHBjeTVmWVNBOUlEQjRZMkppWWpsa05XUWdmQ0F3WEc0Z0lIUm9hWE11WDJJZ1BTQXdlRFl5T1dFeU9USmhJSHdnTUZ4dUlDQjBhR2x6TGw5aklEMGdNSGc1TVRVNU1ERTFZU0I4SURCY2JpQWdkR2hwY3k1ZlpDQTlJREI0TVRVeVptVmpaRGdnZkNBd1hHNGdJSFJvYVhNdVgyVWdQU0F3ZURZM016TXlOalkzSUh3Z01GeHVJQ0IwYUdsekxsOW1JRDBnTUhnNFpXSTBOR0U0TnlCOElEQmNiaUFnZEdocGN5NWZaeUE5SURCNFpHSXdZekpsTUdRZ2ZDQXdYRzRnSUhSb2FYTXVYMmdnUFNBd2VEUTNZalUwT0RGa0lId2dNRnh1WEc0Z0lIUm9hWE11WDJGc0lEMGdNSGhqTVRBMU9XVmtPQ0I4SURCY2JpQWdkR2hwY3k1Zlltd2dQU0F3ZURNMk4yTmtOVEEzSUh3Z01GeHVJQ0IwYUdsekxsOWpiQ0E5SURCNE16QTNNR1JrTVRjZ2ZDQXdYRzRnSUhSb2FYTXVYMlJzSUQwZ01IaG1OekJsTlRrek9TQjhJREJjYmlBZ2RHaHBjeTVmWld3Z1BTQXdlR1ptWXpBd1lqTXhJSHdnTUZ4dUlDQjBhR2x6TGw5bWJDQTlJREI0TmpnMU9ERTFNVEVnZkNBd1hHNGdJSFJvYVhNdVgyZHNJRDBnTUhnMk5HWTVPR1poTnlCOElEQmNiaUFnZEdocGN5NWZhR3dnUFNBd2VHSmxabUUwWm1FMElId2dNRnh1WEc0Z0lISmxkSFZ5YmlCMGFHbHpYRzU5WEc1Y2JsTm9ZVE00TkM1d2NtOTBiM1I1Y0dVdVgyaGhjMmdnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUhaaGNpQklJRDBnYm1WM0lFSjFabVpsY2lnME9DbGNibHh1SUNCbWRXNWpkR2x2YmlCM2NtbDBaVWx1ZERZMFFrVWdLR2dzSUd3c0lHOW1abk5sZENrZ2UxeHVJQ0FnSUVndWQzSnBkR1ZKYm5Rek1rSkZLR2dzSUc5bVpuTmxkQ2xjYmlBZ0lDQklMbmR5YVhSbFNXNTBNekpDUlNoc0xDQnZabVp6WlhRZ0t5QTBLVnh1SUNCOVhHNWNiaUFnZDNKcGRHVkpiblEyTkVKRktIUm9hWE11WDJFc0lIUm9hWE11WDJGc0xDQXdLVnh1SUNCM2NtbDBaVWx1ZERZMFFrVW9kR2hwY3k1Zllpd2dkR2hwY3k1Zlltd3NJRGdwWEc0Z0lIZHlhWFJsU1c1ME5qUkNSU2gwYUdsekxsOWpMQ0IwYUdsekxsOWpiQ3dnTVRZcFhHNGdJSGR5YVhSbFNXNTBOalJDUlNoMGFHbHpMbDlrTENCMGFHbHpMbDlrYkN3Z01qUXBYRzRnSUhkeWFYUmxTVzUwTmpSQ1JTaDBhR2x6TGw5bExDQjBhR2x6TGw5bGJDd2dNeklwWEc0Z0lIZHlhWFJsU1c1ME5qUkNSU2gwYUdsekxsOW1MQ0IwYUdsekxsOW1iQ3dnTkRBcFhHNWNiaUFnY21WMGRYSnVJRWhjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlRhR0V6T0RSY2JpSmRmUT09IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxuXG52YXIgSyA9IFtcbiAgMHg0MjhhMmY5OCwgMHhkNzI4YWUyMiwgMHg3MTM3NDQ5MSwgMHgyM2VmNjVjZCxcbiAgMHhiNWMwZmJjZiwgMHhlYzRkM2IyZiwgMHhlOWI1ZGJhNSwgMHg4MTg5ZGJiYyxcbiAgMHgzOTU2YzI1YiwgMHhmMzQ4YjUzOCwgMHg1OWYxMTFmMSwgMHhiNjA1ZDAxOSxcbiAgMHg5MjNmODJhNCwgMHhhZjE5NGY5YiwgMHhhYjFjNWVkNSwgMHhkYTZkODExOCxcbiAgMHhkODA3YWE5OCwgMHhhMzAzMDI0MiwgMHgxMjgzNWIwMSwgMHg0NTcwNmZiZSxcbiAgMHgyNDMxODViZSwgMHg0ZWU0YjI4YywgMHg1NTBjN2RjMywgMHhkNWZmYjRlMixcbiAgMHg3MmJlNWQ3NCwgMHhmMjdiODk2ZiwgMHg4MGRlYjFmZSwgMHgzYjE2OTZiMSxcbiAgMHg5YmRjMDZhNywgMHgyNWM3MTIzNSwgMHhjMTliZjE3NCwgMHhjZjY5MjY5NCxcbiAgMHhlNDliNjljMSwgMHg5ZWYxNGFkMiwgMHhlZmJlNDc4NiwgMHgzODRmMjVlMyxcbiAgMHgwZmMxOWRjNiwgMHg4YjhjZDViNSwgMHgyNDBjYTFjYywgMHg3N2FjOWM2NSxcbiAgMHgyZGU5MmM2ZiwgMHg1OTJiMDI3NSwgMHg0YTc0ODRhYSwgMHg2ZWE2ZTQ4MyxcbiAgMHg1Y2IwYTlkYywgMHhiZDQxZmJkNCwgMHg3NmY5ODhkYSwgMHg4MzExNTNiNSxcbiAgMHg5ODNlNTE1MiwgMHhlZTY2ZGZhYiwgMHhhODMxYzY2ZCwgMHgyZGI0MzIxMCxcbiAgMHhiMDAzMjdjOCwgMHg5OGZiMjEzZiwgMHhiZjU5N2ZjNywgMHhiZWVmMGVlNCxcbiAgMHhjNmUwMGJmMywgMHgzZGE4OGZjMiwgMHhkNWE3OTE0NywgMHg5MzBhYTcyNSxcbiAgMHgwNmNhNjM1MSwgMHhlMDAzODI2ZiwgMHgxNDI5Mjk2NywgMHgwYTBlNmU3MCxcbiAgMHgyN2I3MGE4NSwgMHg0NmQyMmZmYywgMHgyZTFiMjEzOCwgMHg1YzI2YzkyNixcbiAgMHg0ZDJjNmRmYywgMHg1YWM0MmFlZCwgMHg1MzM4MGQxMywgMHg5ZDk1YjNkZixcbiAgMHg2NTBhNzM1NCwgMHg4YmFmNjNkZSwgMHg3NjZhMGFiYiwgMHgzYzc3YjJhOCxcbiAgMHg4MWMyYzkyZSwgMHg0N2VkYWVlNiwgMHg5MjcyMmM4NSwgMHgxNDgyMzUzYixcbiAgMHhhMmJmZThhMSwgMHg0Y2YxMDM2NCwgMHhhODFhNjY0YiwgMHhiYzQyMzAwMSxcbiAgMHhjMjRiOGI3MCwgMHhkMGY4OTc5MSwgMHhjNzZjNTFhMywgMHgwNjU0YmUzMCxcbiAgMHhkMTkyZTgxOSwgMHhkNmVmNTIxOCwgMHhkNjk5MDYyNCwgMHg1NTY1YTkxMCxcbiAgMHhmNDBlMzU4NSwgMHg1NzcxMjAyYSwgMHgxMDZhYTA3MCwgMHgzMmJiZDFiOCxcbiAgMHgxOWE0YzExNiwgMHhiOGQyZDBjOCwgMHgxZTM3NmMwOCwgMHg1MTQxYWI1MyxcbiAgMHgyNzQ4Nzc0YywgMHhkZjhlZWI5OSwgMHgzNGIwYmNiNSwgMHhlMTliNDhhOCxcbiAgMHgzOTFjMGNiMywgMHhjNWM5NWE2MywgMHg0ZWQ4YWE0YSwgMHhlMzQxOGFjYixcbiAgMHg1YjljY2E0ZiwgMHg3NzYzZTM3MywgMHg2ODJlNmZmMywgMHhkNmIyYjhhMyxcbiAgMHg3NDhmODJlZSwgMHg1ZGVmYjJmYywgMHg3OGE1NjM2ZiwgMHg0MzE3MmY2MCxcbiAgMHg4NGM4NzgxNCwgMHhhMWYwYWI3MiwgMHg4Y2M3MDIwOCwgMHgxYTY0MzllYyxcbiAgMHg5MGJlZmZmYSwgMHgyMzYzMWUyOCwgMHhhNDUwNmNlYiwgMHhkZTgyYmRlOSxcbiAgMHhiZWY5YTNmNywgMHhiMmM2NzkxNSwgMHhjNjcxNzhmMiwgMHhlMzcyNTMyYixcbiAgMHhjYTI3M2VjZSwgMHhlYTI2NjE5YywgMHhkMTg2YjhjNywgMHgyMWMwYzIwNyxcbiAgMHhlYWRhN2RkNiwgMHhjZGUwZWIxZSwgMHhmNTdkNGY3ZiwgMHhlZTZlZDE3OCxcbiAgMHgwNmYwNjdhYSwgMHg3MjE3NmZiYSwgMHgwYTYzN2RjNSwgMHhhMmM4OThhNixcbiAgMHgxMTNmOTgwNCwgMHhiZWY5MGRhZSwgMHgxYjcxMGIzNSwgMHgxMzFjNDcxYixcbiAgMHgyOGRiNzdmNSwgMHgyMzA0N2Q4NCwgMHgzMmNhYWI3YiwgMHg0MGM3MjQ5MyxcbiAgMHgzYzllYmUwYSwgMHgxNWM5YmViYywgMHg0MzFkNjdjNCwgMHg5YzEwMGQ0YyxcbiAgMHg0Y2M1ZDRiZSwgMHhjYjNlNDJiNiwgMHg1OTdmMjk5YywgMHhmYzY1N2UyYSxcbiAgMHg1ZmNiNmZhYiwgMHgzYWQ2ZmFlYywgMHg2YzQ0MTk4YywgMHg0YTQ3NTgxN1xuXVxuXG52YXIgVyA9IG5ldyBBcnJheSgxNjApXG5cbmZ1bmN0aW9uIFNoYTUxMiAoKSB7XG4gIHRoaXMuaW5pdCgpXG4gIHRoaXMuX3cgPSBXXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDEyOCwgMTEyKVxufVxuXG5pbmhlcml0cyhTaGE1MTIsIEhhc2gpXG5cblNoYTUxMi5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4NmEwOWU2NjcgfCAwXG4gIHRoaXMuX2IgPSAweGJiNjdhZTg1IHwgMFxuICB0aGlzLl9jID0gMHgzYzZlZjM3MiB8IDBcbiAgdGhpcy5fZCA9IDB4YTU0ZmY1M2EgfCAwXG4gIHRoaXMuX2UgPSAweDUxMGU1MjdmIHwgMFxuICB0aGlzLl9mID0gMHg5YjA1Njg4YyB8IDBcbiAgdGhpcy5fZyA9IDB4MWY4M2Q5YWIgfCAwXG4gIHRoaXMuX2ggPSAweDViZTBjZDE5IHwgMFxuXG4gIHRoaXMuX2FsID0gMHhmM2JjYzkwOCB8IDBcbiAgdGhpcy5fYmwgPSAweDg0Y2FhNzNiIHwgMFxuICB0aGlzLl9jbCA9IDB4ZmU5NGY4MmIgfCAwXG4gIHRoaXMuX2RsID0gMHg1ZjFkMzZmMSB8IDBcbiAgdGhpcy5fZWwgPSAweGFkZTY4MmQxIHwgMFxuICB0aGlzLl9mbCA9IDB4MmIzZTZjMWYgfCAwXG4gIHRoaXMuX2dsID0gMHhmYjQxYmQ2YiB8IDBcbiAgdGhpcy5faGwgPSAweDEzN2UyMTc5IHwgMFxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIENoICh4LCB5LCB6KSB7XG4gIHJldHVybiB6IF4gKHggJiAoeSBeIHopKVxufVxuXG5mdW5jdGlvbiBNYWogKHgsIHksIHopIHtcbiAgcmV0dXJuICh4ICYgeSkgfCAoeiAmICh4IHwgeSkpXG59XG5cbmZ1bmN0aW9uIFNpZ21hMCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAyOCB8IHhsIDw8IDQpIF4gKHhsID4+PiAyIHwgeCA8PCAzMCkgXiAoeGwgPj4+IDcgfCB4IDw8IDI1KVxufVxuXG5mdW5jdGlvbiBTaWdtYTEgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMTQgfCB4bCA8PCAxOCkgXiAoeCA+Pj4gMTggfCB4bCA8PCAxNCkgXiAoeGwgPj4+IDkgfCB4IDw8IDIzKVxufVxuXG5mdW5jdGlvbiBHYW1tYTAgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMSB8IHhsIDw8IDMxKSBeICh4ID4+PiA4IHwgeGwgPDwgMjQpIF4gKHggPj4+IDcpXG59XG5cbmZ1bmN0aW9uIEdhbW1hMGwgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMSB8IHhsIDw8IDMxKSBeICh4ID4+PiA4IHwgeGwgPDwgMjQpIF4gKHggPj4+IDcgfCB4bCA8PCAyNSlcbn1cblxuZnVuY3Rpb24gR2FtbWExICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDE5IHwgeGwgPDwgMTMpIF4gKHhsID4+PiAyOSB8IHggPDwgMykgXiAoeCA+Pj4gNilcbn1cblxuZnVuY3Rpb24gR2FtbWExbCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxOSB8IHhsIDw8IDEzKSBeICh4bCA+Pj4gMjkgfCB4IDw8IDMpIF4gKHggPj4+IDYgfCB4bCA8PCAyNilcbn1cblxuU2hhNTEyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGEgPSB0aGlzLl9hIHwgMFxuICB2YXIgYiA9IHRoaXMuX2IgfCAwXG4gIHZhciBjID0gdGhpcy5fYyB8IDBcbiAgdmFyIGQgPSB0aGlzLl9kIHwgMFxuICB2YXIgZSA9IHRoaXMuX2UgfCAwXG4gIHZhciBmID0gdGhpcy5fZiB8IDBcbiAgdmFyIGcgPSB0aGlzLl9nIHwgMFxuICB2YXIgaCA9IHRoaXMuX2ggfCAwXG5cbiAgdmFyIGFsID0gdGhpcy5fYWwgfCAwXG4gIHZhciBibCA9IHRoaXMuX2JsIHwgMFxuICB2YXIgY2wgPSB0aGlzLl9jbCB8IDBcbiAgdmFyIGRsID0gdGhpcy5fZGwgfCAwXG4gIHZhciBlbCA9IHRoaXMuX2VsIHwgMFxuICB2YXIgZmwgPSB0aGlzLl9mbCB8IDBcbiAgdmFyIGdsID0gdGhpcy5fZ2wgfCAwXG4gIHZhciBobCA9IHRoaXMuX2hsIHwgMFxuXG4gIHZhciBpID0gMFxuICB2YXIgaiA9IDBcbiAgdmFyIFdpLCBXaWxcbiAgZnVuY3Rpb24gY2FsY1cgKCkge1xuICAgIHZhciB4ID0gV1tqIC0gMTUgKiAyXVxuICAgIHZhciB4bCA9IFdbaiAtIDE1ICogMiArIDFdXG4gICAgdmFyIGdhbW1hMCA9IEdhbW1hMCh4LCB4bClcbiAgICB2YXIgZ2FtbWEwbCA9IEdhbW1hMGwoeGwsIHgpXG5cbiAgICB4ID0gV1tqIC0gMiAqIDJdXG4gICAgeGwgPSBXW2ogLSAyICogMiArIDFdXG4gICAgdmFyIGdhbW1hMSA9IEdhbW1hMSh4LCB4bClcbiAgICB2YXIgZ2FtbWExbCA9IEdhbW1hMWwoeGwsIHgpXG5cbiAgICAvLyBXW2ldID0gZ2FtbWEwICsgV1tpIC0gN10gKyBnYW1tYTEgKyBXW2kgLSAxNl1cbiAgICB2YXIgV2k3ID0gV1tqIC0gNyAqIDJdXG4gICAgdmFyIFdpN2wgPSBXW2ogLSA3ICogMiArIDFdXG5cbiAgICB2YXIgV2kxNiA9IFdbaiAtIDE2ICogMl1cbiAgICB2YXIgV2kxNmwgPSBXW2ogLSAxNiAqIDIgKyAxXVxuXG4gICAgV2lsID0gZ2FtbWEwbCArIFdpN2xcbiAgICBXaSA9IGdhbW1hMCArIFdpNyArICgoV2lsID4+PiAwKSA8IChnYW1tYTBsID4+PiAwKSA/IDEgOiAwKVxuICAgIFdpbCA9IFdpbCArIGdhbW1hMWxcbiAgICBXaSA9IFdpICsgZ2FtbWExICsgKChXaWwgPj4+IDApIDwgKGdhbW1hMWwgPj4+IDApID8gMSA6IDApXG4gICAgV2lsID0gV2lsICsgV2kxNmxcbiAgICBXaSA9IFdpICsgV2kxNiArICgoV2lsID4+PiAwKSA8IChXaTE2bCA+Pj4gMCkgPyAxIDogMClcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvb3AgKCkge1xuICAgIFdbal0gPSBXaVxuICAgIFdbaiArIDFdID0gV2lsXG5cbiAgICB2YXIgbWFqID0gTWFqKGEsIGIsIGMpXG4gICAgdmFyIG1hamwgPSBNYWooYWwsIGJsLCBjbClcblxuICAgIHZhciBzaWdtYTBoID0gU2lnbWEwKGEsIGFsKVxuICAgIHZhciBzaWdtYTBsID0gU2lnbWEwKGFsLCBhKVxuICAgIHZhciBzaWdtYTFoID0gU2lnbWExKGUsIGVsKVxuICAgIHZhciBzaWdtYTFsID0gU2lnbWExKGVsLCBlKVxuXG4gICAgLy8gdDEgPSBoICsgc2lnbWExICsgY2ggKyBLW2ldICsgV1tpXVxuICAgIHZhciBLaSA9IEtbal1cbiAgICB2YXIgS2lsID0gS1tqICsgMV1cblxuICAgIHZhciBjaCA9IENoKGUsIGYsIGcpXG4gICAgdmFyIGNobCA9IENoKGVsLCBmbCwgZ2wpXG5cbiAgICB2YXIgdDFsID0gaGwgKyBzaWdtYTFsXG4gICAgdmFyIHQxID0gaCArIHNpZ21hMWggKyAoKHQxbCA+Pj4gMCkgPCAoaGwgPj4+IDApID8gMSA6IDApXG4gICAgdDFsID0gdDFsICsgY2hsXG4gICAgdDEgPSB0MSArIGNoICsgKCh0MWwgPj4+IDApIDwgKGNobCA+Pj4gMCkgPyAxIDogMClcbiAgICB0MWwgPSB0MWwgKyBLaWxcbiAgICB0MSA9IHQxICsgS2kgKyAoKHQxbCA+Pj4gMCkgPCAoS2lsID4+PiAwKSA/IDEgOiAwKVxuICAgIHQxbCA9IHQxbCArIFdpbFxuICAgIHQxID0gdDEgKyBXaSArICgodDFsID4+PiAwKSA8IChXaWwgPj4+IDApID8gMSA6IDApXG5cbiAgICAvLyB0MiA9IHNpZ21hMCArIG1halxuICAgIHZhciB0MmwgPSBzaWdtYTBsICsgbWFqbFxuICAgIHZhciB0MiA9IHNpZ21hMGggKyBtYWogKyAoKHQybCA+Pj4gMCkgPCAoc2lnbWEwbCA+Pj4gMCkgPyAxIDogMClcblxuICAgIGggPSBnXG4gICAgaGwgPSBnbFxuICAgIGcgPSBmXG4gICAgZ2wgPSBmbFxuICAgIGYgPSBlXG4gICAgZmwgPSBlbFxuICAgIGVsID0gKGRsICsgdDFsKSB8IDBcbiAgICBlID0gKGQgKyB0MSArICgoZWwgPj4+IDApIDwgKGRsID4+PiAwKSA/IDEgOiAwKSkgfCAwXG4gICAgZCA9IGNcbiAgICBkbCA9IGNsXG4gICAgYyA9IGJcbiAgICBjbCA9IGJsXG4gICAgYiA9IGFcbiAgICBibCA9IGFsXG4gICAgYWwgPSAodDFsICsgdDJsKSB8IDBcbiAgICBhID0gKHQxICsgdDIgKyAoKGFsID4+PiAwKSA8ICh0MWwgPj4+IDApID8gMSA6IDApKSB8IDBcblxuICAgIGkrK1xuICAgIGogKz0gMlxuICB9XG5cbiAgd2hpbGUgKGkgPCAxNikge1xuICAgIFdpID0gTS5yZWFkSW50MzJCRShqICogNClcbiAgICBXaWwgPSBNLnJlYWRJbnQzMkJFKGogKiA0ICsgNClcblxuICAgIGxvb3AoKVxuICB9XG5cbiAgd2hpbGUgKGkgPCA4MCkge1xuICAgIGNhbGNXKClcbiAgICBsb29wKClcbiAgfVxuXG4gIHRoaXMuX2FsID0gKHRoaXMuX2FsICsgYWwpIHwgMFxuICB0aGlzLl9ibCA9ICh0aGlzLl9ibCArIGJsKSB8IDBcbiAgdGhpcy5fY2wgPSAodGhpcy5fY2wgKyBjbCkgfCAwXG4gIHRoaXMuX2RsID0gKHRoaXMuX2RsICsgZGwpIHwgMFxuICB0aGlzLl9lbCA9ICh0aGlzLl9lbCArIGVsKSB8IDBcbiAgdGhpcy5fZmwgPSAodGhpcy5fZmwgKyBmbCkgfCAwXG4gIHRoaXMuX2dsID0gKHRoaXMuX2dsICsgZ2wpIHwgMFxuICB0aGlzLl9obCA9ICh0aGlzLl9obCArIGhsKSB8IDBcblxuICB0aGlzLl9hID0gKHRoaXMuX2EgKyBhICsgKCh0aGlzLl9hbCA+Pj4gMCkgPCAoYWwgPj4+IDApID8gMSA6IDApKSB8IDBcbiAgdGhpcy5fYiA9ICh0aGlzLl9iICsgYiArICgodGhpcy5fYmwgPj4+IDApIDwgKGJsID4+PiAwKSA/IDEgOiAwKSkgfCAwXG4gIHRoaXMuX2MgPSAodGhpcy5fYyArIGMgKyAoKHRoaXMuX2NsID4+PiAwKSA8IChjbCA+Pj4gMCkgPyAxIDogMCkpIHwgMFxuICB0aGlzLl9kID0gKHRoaXMuX2QgKyBkICsgKCh0aGlzLl9kbCA+Pj4gMCkgPCAoZGwgPj4+IDApID8gMSA6IDApKSB8IDBcbiAgdGhpcy5fZSA9ICh0aGlzLl9lICsgZSArICgodGhpcy5fZWwgPj4+IDApIDwgKGVsID4+PiAwKSA/IDEgOiAwKSkgfCAwXG4gIHRoaXMuX2YgPSAodGhpcy5fZiArIGYgKyAoKHRoaXMuX2ZsID4+PiAwKSA8IChmbCA+Pj4gMCkgPyAxIDogMCkpIHwgMFxuICB0aGlzLl9nID0gKHRoaXMuX2cgKyBnICsgKCh0aGlzLl9nbCA+Pj4gMCkgPCAoZ2wgPj4+IDApID8gMSA6IDApKSB8IDBcbiAgdGhpcy5faCA9ICh0aGlzLl9oICsgaCArICgodGhpcy5faGwgPj4+IDApIDwgKGhsID4+PiAwKSA/IDEgOiAwKSkgfCAwXG59XG5cblNoYTUxMi5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gbmV3IEJ1ZmZlcig2NClcblxuICBmdW5jdGlvbiB3cml0ZUludDY0QkUgKGgsIGwsIG9mZnNldCkge1xuICAgIEgud3JpdGVJbnQzMkJFKGgsIG9mZnNldClcbiAgICBILndyaXRlSW50MzJCRShsLCBvZmZzZXQgKyA0KVxuICB9XG5cbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2EsIHRoaXMuX2FsLCAwKVxuICB3cml0ZUludDY0QkUodGhpcy5fYiwgdGhpcy5fYmwsIDgpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9jLCB0aGlzLl9jbCwgMTYpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9kLCB0aGlzLl9kbCwgMjQpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9lLCB0aGlzLl9lbCwgMzIpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9mLCB0aGlzLl9mbCwgNDApXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9nLCB0aGlzLl9nbCwgNDgpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9oLCB0aGlzLl9obCwgNTYpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGE1MTJcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZM0psWVhSbExXaGhjMmd2Ym05a1pWOXRiMlIxYkdWekwzTm9ZUzVxY3k5emFHRTFNVEl1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlHbHVhR1Z5YVhSeklEMGdjbVZ4ZFdseVpTZ25hVzVvWlhKcGRITW5LVnh1ZG1GeUlFaGhjMmdnUFNCeVpYRjFhWEpsS0NjdUwyaGhjMmduS1Z4dVhHNTJZWElnU3lBOUlGdGNiaUFnTUhnME1qaGhNbVk1T0N3Z01IaGtOekk0WVdVeU1pd2dNSGczTVRNM05EUTVNU3dnTUhneU0yVm1OalZqWkN4Y2JpQWdNSGhpTldNd1ptSmpaaXdnTUhobFl6UmtNMkl5Wml3Z01IaGxPV0kxWkdKaE5Td2dNSGc0TVRnNVpHSmlZeXhjYmlBZ01IZ3pPVFUyWXpJMVlpd2dNSGhtTXpRNFlqVXpPQ3dnTUhnMU9XWXhNVEZtTVN3Z01IaGlOakExWkRBeE9TeGNiaUFnTUhnNU1qTm1PREpoTkN3Z01IaGhaakU1TkdZNVlpd2dNSGhoWWpGak5XVmtOU3dnTUhoa1lUWmtPREV4T0N4Y2JpQWdNSGhrT0RBM1lXRTVPQ3dnTUhoaE16QXpNREkwTWl3Z01IZ3hNamd6TldJd01Td2dNSGcwTlRjd05tWmlaU3hjYmlBZ01IZ3lORE14T0RWaVpTd2dNSGcwWldVMFlqSTRZeXdnTUhnMU5UQmpOMlJqTXl3Z01IaGtOV1ptWWpSbE1peGNiaUFnTUhnM01tSmxOV1EzTkN3Z01IaG1NamRpT0RrMlppd2dNSGc0TUdSbFlqRm1aU3dnTUhnellqRTJPVFppTVN4Y2JpQWdNSGc1WW1Sak1EWmhOeXdnTUhneU5XTTNNVEl6TlN3Z01IaGpNVGxpWmpFM05Dd2dNSGhqWmpZNU1qWTVOQ3hjYmlBZ01IaGxORGxpTmpsak1Td2dNSGc1WldZeE5HRmtNaXdnTUhobFptSmxORGM0Tml3Z01IZ3pPRFJtTWpWbE15eGNiaUFnTUhnd1ptTXhPV1JqTml3Z01IZzRZamhqWkRWaU5Td2dNSGd5TkRCallURmpZeXdnTUhnM04yRmpPV00yTlN4Y2JpQWdNSGd5WkdVNU1tTTJaaXdnTUhnMU9USmlNREkzTlN3Z01IZzBZVGMwT0RSaFlTd2dNSGcyWldFMlpUUTRNeXhjYmlBZ01IZzFZMkl3WVRsa1l5d2dNSGhpWkRReFptSmtOQ3dnTUhnM05tWTVPRGhrWVN3Z01IZzRNekV4TlROaU5TeGNiaUFnTUhnNU9ETmxOVEUxTWl3Z01IaGxaVFkyWkdaaFlpd2dNSGhoT0RNeFl6WTJaQ3dnTUhneVpHSTBNekl4TUN4Y2JpQWdNSGhpTURBek1qZGpPQ3dnTUhnNU9HWmlNakV6Wml3Z01IaGlaalU1TjJaak55d2dNSGhpWldWbU1HVmxOQ3hjYmlBZ01IaGpObVV3TUdKbU15d2dNSGd6WkdFNE9HWmpNaXdnTUhoa05XRTNPVEUwTnl3Z01IZzVNekJoWVRjeU5TeGNiaUFnTUhnd05tTmhOak0xTVN3Z01IaGxNREF6T0RJMlppd2dNSGd4TkRJNU1qazJOeXdnTUhnd1lUQmxObVUzTUN4Y2JpQWdNSGd5TjJJM01HRTROU3dnTUhnME5tUXlNbVptWXl3Z01IZ3laVEZpTWpFek9Dd2dNSGcxWXpJMll6a3lOaXhjYmlBZ01IZzBaREpqTm1SbVl5d2dNSGcxWVdNME1tRmxaQ3dnTUhnMU16TTRNR1F4TXl3Z01IZzVaRGsxWWpOa1ppeGNiaUFnTUhnMk5UQmhOek0xTkN3Z01IZzRZbUZtTmpOa1pTd2dNSGczTmpaaE1HRmlZaXdnTUhnell6YzNZakpoT0N4Y2JpQWdNSGc0TVdNeVl6a3laU3dnTUhnME4yVmtZV1ZsTml3Z01IZzVNamN5TW1NNE5Td2dNSGd4TkRneU16VXpZaXhjYmlBZ01IaGhNbUptWlRoaE1Td2dNSGcwWTJZeE1ETTJOQ3dnTUhoaE9ERmhOalkwWWl3Z01IaGlZelF5TXpBd01TeGNiaUFnTUhoak1qUmlPR0kzTUN3Z01IaGtNR1k0T1RjNU1Td2dNSGhqTnpaak5URmhNeXdnTUhnd05qVTBZbVV6TUN4Y2JpQWdNSGhrTVRreVpUZ3hPU3dnTUhoa05tVm1OVEl4T0N3Z01IaGtOams1TURZeU5Dd2dNSGcxTlRZMVlUa3hNQ3hjYmlBZ01IaG1OREJsTXpVNE5Td2dNSGcxTnpjeE1qQXlZU3dnTUhneE1EWmhZVEEzTUN3Z01IZ3pNbUppWkRGaU9DeGNiaUFnTUhneE9XRTBZekV4Tml3Z01IaGlPR1F5WkRCak9Dd2dNSGd4WlRNM05tTXdPQ3dnTUhnMU1UUXhZV0kxTXl4Y2JpQWdNSGd5TnpRNE56YzBZeXdnTUhoa1pqaGxaV0k1T1N3Z01IZ3pOR0l3WW1OaU5Td2dNSGhsTVRsaU5EaGhPQ3hjYmlBZ01IZ3pPVEZqTUdOaU15d2dNSGhqTldNNU5XRTJNeXdnTUhnMFpXUTRZV0UwWVN3Z01IaGxNelF4T0dGallpeGNiaUFnTUhnMVlqbGpZMkUwWml3Z01IZzNOell6WlRNM015d2dNSGcyT0RKbE5tWm1NeXdnTUhoa05tSXlZamhoTXl4Y2JpQWdNSGczTkRobU9ESmxaU3dnTUhnMVpHVm1ZakptWXl3Z01IZzNPR0UxTmpNMlppd2dNSGcwTXpFM01tWTJNQ3hjYmlBZ01IZzROR000TnpneE5Dd2dNSGhoTVdZd1lXSTNNaXdnTUhnNFkyTTNNREl3T0N3Z01IZ3hZVFkwTXpsbFl5eGNiaUFnTUhnNU1HSmxabVptWVN3Z01IZ3lNell6TVdVeU9Dd2dNSGhoTkRVd05tTmxZaXdnTUhoa1pUZ3lZbVJsT1N4Y2JpQWdNSGhpWldZNVlUTm1OeXdnTUhoaU1tTTJOemt4TlN3Z01IaGpOamN4TnpobU1pd2dNSGhsTXpjeU5UTXlZaXhjYmlBZ01IaGpZVEkzTTJWalpTd2dNSGhsWVRJMk5qRTVZeXdnTUhoa01UZzJZamhqTnl3Z01IZ3lNV013WXpJd055eGNiaUFnTUhobFlXUmhOMlJrTml3Z01IaGpaR1V3WldJeFpTd2dNSGhtTlRka05HWTNaaXdnTUhobFpUWmxaREUzT0N4Y2JpQWdNSGd3Tm1Zd05qZGhZU3dnTUhnM01qRTNObVppWVN3Z01IZ3dZVFl6TjJSak5Td2dNSGhoTW1NNE9UaGhOaXhjYmlBZ01IZ3hNVE5tT1Rnd05Dd2dNSGhpWldZNU1HUmhaU3dnTUhneFlqY3hNR0l6TlN3Z01IZ3hNekZqTkRjeFlpeGNiaUFnTUhneU9HUmlOemRtTlN3Z01IZ3lNekEwTjJRNE5Dd2dNSGd6TW1OaFlXSTNZaXdnTUhnME1HTTNNalE1TXl4Y2JpQWdNSGd6WXpsbFltVXdZU3dnTUhneE5XTTVZbVZpWXl3Z01IZzBNekZrTmpkak5Dd2dNSGc1WXpFd01HUTBZeXhjYmlBZ01IZzBZMk0xWkRSaVpTd2dNSGhqWWpObE5ESmlOaXdnTUhnMU9UZG1Nams1WXl3Z01IaG1ZelkxTjJVeVlTeGNiaUFnTUhnMVptTmlObVpoWWl3Z01IZ3pZV1EyWm1GbFl5d2dNSGcyWXpRME1UazRZeXdnTUhnMFlUUTNOVGd4TjF4dVhWeHVYRzUyWVhJZ1Z5QTlJRzVsZHlCQmNuSmhlU2d4TmpBcFhHNWNibVoxYm1OMGFXOXVJRk5vWVRVeE1pQW9LU0I3WEc0Z0lIUm9hWE11YVc1cGRDZ3BYRzRnSUhSb2FYTXVYM2NnUFNCWFhHNWNiaUFnU0dGemFDNWpZV3hzS0hSb2FYTXNJREV5T0N3Z01URXlLVnh1ZlZ4dVhHNXBibWhsY21sMGN5aFRhR0UxTVRJc0lFaGhjMmdwWEc1Y2JsTm9ZVFV4TWk1d2NtOTBiM1I1Y0dVdWFXNXBkQ0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnZEdocGN5NWZZU0E5SURCNE5tRXdPV1UyTmpjZ2ZDQXdYRzRnSUhSb2FYTXVYMklnUFNBd2VHSmlOamRoWlRnMUlId2dNRnh1SUNCMGFHbHpMbDlqSUQwZ01IZ3pZelpsWmpNM01pQjhJREJjYmlBZ2RHaHBjeTVmWkNBOUlEQjRZVFUwWm1ZMU0yRWdmQ0F3WEc0Z0lIUm9hWE11WDJVZ1BTQXdlRFV4TUdVMU1qZG1JSHdnTUZ4dUlDQjBhR2x6TGw5bUlEMGdNSGc1WWpBMU5qZzRZeUI4SURCY2JpQWdkR2hwY3k1Zlp5QTlJREI0TVdZNE0yUTVZV0lnZkNBd1hHNGdJSFJvYVhNdVgyZ2dQU0F3ZURWaVpUQmpaREU1SUh3Z01GeHVYRzRnSUhSb2FYTXVYMkZzSUQwZ01IaG1NMkpqWXprd09DQjhJREJjYmlBZ2RHaHBjeTVmWW13Z1BTQXdlRGcwWTJGaE56TmlJSHdnTUZ4dUlDQjBhR2x6TGw5amJDQTlJREI0Wm1VNU5HWTRNbUlnZkNBd1hHNGdJSFJvYVhNdVgyUnNJRDBnTUhnMVpqRmtNelptTVNCOElEQmNiaUFnZEdocGN5NWZaV3dnUFNBd2VHRmtaVFk0TW1ReElId2dNRnh1SUNCMGFHbHpMbDltYkNBOUlEQjRNbUl6WlRaak1XWWdmQ0F3WEc0Z0lIUm9hWE11WDJkc0lEMGdNSGhtWWpReFltUTJZaUI4SURCY2JpQWdkR2hwY3k1ZmFHd2dQU0F3ZURFek4yVXlNVGM1SUh3Z01GeHVYRzRnSUhKbGRIVnliaUIwYUdselhHNTlYRzVjYm1aMWJtTjBhVzl1SUVOb0lDaDRMQ0I1TENCNktTQjdYRzRnSUhKbGRIVnliaUI2SUY0Z0tIZ2dKaUFvZVNCZUlIb3BLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQk5ZV29nS0hnc0lIa3NJSG9wSUh0Y2JpQWdjbVYwZFhKdUlDaDRJQ1lnZVNrZ2ZDQW9laUFtSUNoNElId2dlU2twWEc1OVhHNWNibVoxYm1OMGFXOXVJRk5wWjIxaE1DQW9lQ3dnZUd3cElIdGNiaUFnY21WMGRYSnVJQ2g0SUQ0K1BpQXlPQ0I4SUhoc0lEdzhJRFFwSUY0Z0tIaHNJRDQrUGlBeUlId2dlQ0E4UENBek1Da2dYaUFvZUd3Z1BqNCtJRGNnZkNCNElEdzhJREkxS1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJUYVdkdFlURWdLSGdzSUhoc0tTQjdYRzRnSUhKbGRIVnliaUFvZUNBK1BqNGdNVFFnZkNCNGJDQThQQ0F4T0NrZ1hpQW9lQ0ErUGo0Z01UZ2dmQ0I0YkNBOFBDQXhOQ2tnWGlBb2VHd2dQajQrSURrZ2ZDQjRJRHc4SURJektWeHVmVnh1WEc1bWRXNWpkR2x2YmlCSFlXMXRZVEFnS0hnc0lIaHNLU0I3WEc0Z0lISmxkSFZ5YmlBb2VDQStQajRnTVNCOElIaHNJRHc4SURNeEtTQmVJQ2g0SUQ0K1BpQTRJSHdnZUd3Z1BEd2dNalFwSUY0Z0tIZ2dQajQrSURjcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUVkaGJXMWhNR3dnS0hnc0lIaHNLU0I3WEc0Z0lISmxkSFZ5YmlBb2VDQStQajRnTVNCOElIaHNJRHc4SURNeEtTQmVJQ2g0SUQ0K1BpQTRJSHdnZUd3Z1BEd2dNalFwSUY0Z0tIZ2dQajQrSURjZ2ZDQjRiQ0E4UENBeU5TbGNibjFjYmx4dVpuVnVZM1JwYjI0Z1IyRnRiV0V4SUNoNExDQjRiQ2tnZTF4dUlDQnlaWFIxY200Z0tIZ2dQajQrSURFNUlId2dlR3dnUER3Z01UTXBJRjRnS0hoc0lENCtQaUF5T1NCOElIZ2dQRHdnTXlrZ1hpQW9lQ0ErUGo0Z05pbGNibjFjYmx4dVpuVnVZM1JwYjI0Z1IyRnRiV0V4YkNBb2VDd2dlR3dwSUh0Y2JpQWdjbVYwZFhKdUlDaDRJRDQrUGlBeE9TQjhJSGhzSUR3OElERXpLU0JlSUNoNGJDQStQajRnTWprZ2ZDQjRJRHc4SURNcElGNGdLSGdnUGo0K0lEWWdmQ0I0YkNBOFBDQXlOaWxjYm4xY2JseHVVMmhoTlRFeUxuQnliM1J2ZEhsd1pTNWZkWEJrWVhSbElEMGdablZ1WTNScGIyNGdLRTBwSUh0Y2JpQWdkbUZ5SUZjZ1BTQjBhR2x6TGw5M1hHNWNiaUFnZG1GeUlHRWdQU0IwYUdsekxsOWhJSHdnTUZ4dUlDQjJZWElnWWlBOUlIUm9hWE11WDJJZ2ZDQXdYRzRnSUhaaGNpQmpJRDBnZEdocGN5NWZZeUI4SURCY2JpQWdkbUZ5SUdRZ1BTQjBhR2x6TGw5a0lId2dNRnh1SUNCMllYSWdaU0E5SUhSb2FYTXVYMlVnZkNBd1hHNGdJSFpoY2lCbUlEMGdkR2hwY3k1ZlppQjhJREJjYmlBZ2RtRnlJR2NnUFNCMGFHbHpMbDluSUh3Z01GeHVJQ0IyWVhJZ2FDQTlJSFJvYVhNdVgyZ2dmQ0F3WEc1Y2JpQWdkbUZ5SUdGc0lEMGdkR2hwY3k1ZllXd2dmQ0F3WEc0Z0lIWmhjaUJpYkNBOUlIUm9hWE11WDJKc0lId2dNRnh1SUNCMllYSWdZMndnUFNCMGFHbHpMbDlqYkNCOElEQmNiaUFnZG1GeUlHUnNJRDBnZEdocGN5NWZaR3dnZkNBd1hHNGdJSFpoY2lCbGJDQTlJSFJvYVhNdVgyVnNJSHdnTUZ4dUlDQjJZWElnWm13Z1BTQjBhR2x6TGw5bWJDQjhJREJjYmlBZ2RtRnlJR2RzSUQwZ2RHaHBjeTVmWjJ3Z2ZDQXdYRzRnSUhaaGNpQm9iQ0E5SUhSb2FYTXVYMmhzSUh3Z01GeHVYRzRnSUhaaGNpQnBJRDBnTUZ4dUlDQjJZWElnYWlBOUlEQmNiaUFnZG1GeUlGZHBMQ0JYYVd4Y2JpQWdablZ1WTNScGIyNGdZMkZzWTFjZ0tDa2dlMXh1SUNBZ0lIWmhjaUI0SUQwZ1YxdHFJQzBnTVRVZ0tpQXlYVnh1SUNBZ0lIWmhjaUI0YkNBOUlGZGJhaUF0SURFMUlDb2dNaUFySURGZFhHNGdJQ0FnZG1GeUlHZGhiVzFoTUNBOUlFZGhiVzFoTUNoNExDQjRiQ2xjYmlBZ0lDQjJZWElnWjJGdGJXRXdiQ0E5SUVkaGJXMWhNR3dvZUd3c0lIZ3BYRzVjYmlBZ0lDQjRJRDBnVjF0cUlDMGdNaUFxSURKZFhHNGdJQ0FnZUd3Z1BTQlhXMm9nTFNBeUlDb2dNaUFySURGZFhHNGdJQ0FnZG1GeUlHZGhiVzFoTVNBOUlFZGhiVzFoTVNoNExDQjRiQ2xjYmlBZ0lDQjJZWElnWjJGdGJXRXhiQ0E5SUVkaGJXMWhNV3dvZUd3c0lIZ3BYRzVjYmlBZ0lDQXZMeUJYVzJsZElEMGdaMkZ0YldFd0lDc2dWMXRwSUMwZ04xMGdLeUJuWVcxdFlURWdLeUJYVzJrZ0xTQXhObDFjYmlBZ0lDQjJZWElnVjJrM0lEMGdWMXRxSUMwZ055QXFJREpkWEc0Z0lDQWdkbUZ5SUZkcE4yd2dQU0JYVzJvZ0xTQTNJQ29nTWlBcklERmRYRzVjYmlBZ0lDQjJZWElnVjJreE5pQTlJRmRiYWlBdElERTJJQ29nTWwxY2JpQWdJQ0IyWVhJZ1Yya3hObXdnUFNCWFcyb2dMU0F4TmlBcUlESWdLeUF4WFZ4dVhHNGdJQ0FnVjJsc0lEMGdaMkZ0YldFd2JDQXJJRmRwTjJ4Y2JpQWdJQ0JYYVNBOUlHZGhiVzFoTUNBcklGZHBOeUFySUNnb1YybHNJRDQrUGlBd0tTQThJQ2huWVcxdFlUQnNJRDQrUGlBd0tTQS9JREVnT2lBd0tWeHVJQ0FnSUZkcGJDQTlJRmRwYkNBcklHZGhiVzFoTVd4Y2JpQWdJQ0JYYVNBOUlGZHBJQ3NnWjJGdGJXRXhJQ3NnS0NoWGFXd2dQajQrSURBcElEd2dLR2RoYlcxaE1Xd2dQajQrSURBcElEOGdNU0E2SURBcFhHNGdJQ0FnVjJsc0lEMGdWMmxzSUNzZ1Yya3hObXhjYmlBZ0lDQlhhU0E5SUZkcElDc2dWMmt4TmlBcklDZ29WMmxzSUQ0K1BpQXdLU0E4SUNoWGFURTJiQ0ErUGo0Z01Da2dQeUF4SURvZ01DbGNiaUFnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJR3h2YjNBZ0tDa2dlMXh1SUNBZ0lGZGJhbDBnUFNCWGFWeHVJQ0FnSUZkYmFpQXJJREZkSUQwZ1YybHNYRzVjYmlBZ0lDQjJZWElnYldGcUlEMGdUV0ZxS0dFc0lHSXNJR01wWEc0Z0lDQWdkbUZ5SUcxaGFtd2dQU0JOWVdvb1lXd3NJR0pzTENCamJDbGNibHh1SUNBZ0lIWmhjaUJ6YVdkdFlUQm9JRDBnVTJsbmJXRXdLR0VzSUdGc0tWeHVJQ0FnSUhaaGNpQnphV2R0WVRCc0lEMGdVMmxuYldFd0tHRnNMQ0JoS1Z4dUlDQWdJSFpoY2lCemFXZHRZVEZvSUQwZ1UybG5iV0V4S0dVc0lHVnNLVnh1SUNBZ0lIWmhjaUJ6YVdkdFlURnNJRDBnVTJsbmJXRXhLR1ZzTENCbEtWeHVYRzRnSUNBZ0x5OGdkREVnUFNCb0lDc2djMmxuYldFeElDc2dZMmdnS3lCTFcybGRJQ3NnVjF0cFhWeHVJQ0FnSUhaaGNpQkxhU0E5SUV0YmFsMWNiaUFnSUNCMllYSWdTMmxzSUQwZ1MxdHFJQ3NnTVYxY2JseHVJQ0FnSUhaaGNpQmphQ0E5SUVOb0tHVXNJR1lzSUdjcFhHNGdJQ0FnZG1GeUlHTm9iQ0E5SUVOb0tHVnNMQ0JtYkN3Z1oyd3BYRzVjYmlBZ0lDQjJZWElnZERGc0lEMGdhR3dnS3lCemFXZHRZVEZzWEc0Z0lDQWdkbUZ5SUhReElEMGdhQ0FySUhOcFoyMWhNV2dnS3lBb0tIUXhiQ0ErUGo0Z01Da2dQQ0FvYUd3Z1BqNCtJREFwSUQ4Z01TQTZJREFwWEc0Z0lDQWdkREZzSUQwZ2RERnNJQ3NnWTJoc1hHNGdJQ0FnZERFZ1BTQjBNU0FySUdOb0lDc2dLQ2gwTVd3Z1BqNCtJREFwSUR3Z0tHTm9iQ0ErUGo0Z01Da2dQeUF4SURvZ01DbGNiaUFnSUNCME1Xd2dQU0IwTVd3Z0t5QkxhV3hjYmlBZ0lDQjBNU0E5SUhReElDc2dTMmtnS3lBb0tIUXhiQ0ErUGo0Z01Da2dQQ0FvUzJsc0lENCtQaUF3S1NBL0lERWdPaUF3S1Z4dUlDQWdJSFF4YkNBOUlIUXhiQ0FySUZkcGJGeHVJQ0FnSUhReElEMGdkREVnS3lCWGFTQXJJQ2dvZERGc0lENCtQaUF3S1NBOElDaFhhV3dnUGo0K0lEQXBJRDhnTVNBNklEQXBYRzVjYmlBZ0lDQXZMeUIwTWlBOUlITnBaMjFoTUNBcklHMWhhbHh1SUNBZ0lIWmhjaUIwTW13Z1BTQnphV2R0WVRCc0lDc2diV0ZxYkZ4dUlDQWdJSFpoY2lCME1pQTlJSE5wWjIxaE1HZ2dLeUJ0WVdvZ0t5QW9LSFF5YkNBK1BqNGdNQ2tnUENBb2MybG5iV0V3YkNBK1BqNGdNQ2tnUHlBeElEb2dNQ2xjYmx4dUlDQWdJR2dnUFNCblhHNGdJQ0FnYUd3Z1BTQm5iRnh1SUNBZ0lHY2dQU0JtWEc0Z0lDQWdaMndnUFNCbWJGeHVJQ0FnSUdZZ1BTQmxYRzRnSUNBZ1ptd2dQU0JsYkZ4dUlDQWdJR1ZzSUQwZ0tHUnNJQ3NnZERGc0tTQjhJREJjYmlBZ0lDQmxJRDBnS0dRZ0t5QjBNU0FySUNnb1pXd2dQajQrSURBcElEd2dLR1JzSUQ0K1BpQXdLU0EvSURFZ09pQXdLU2tnZkNBd1hHNGdJQ0FnWkNBOUlHTmNiaUFnSUNCa2JDQTlJR05zWEc0Z0lDQWdZeUE5SUdKY2JpQWdJQ0JqYkNBOUlHSnNYRzRnSUNBZ1lpQTlJR0ZjYmlBZ0lDQmliQ0E5SUdGc1hHNGdJQ0FnWVd3Z1BTQW9kREZzSUNzZ2RESnNLU0I4SURCY2JpQWdJQ0JoSUQwZ0tIUXhJQ3NnZERJZ0t5QW9LR0ZzSUQ0K1BpQXdLU0E4SUNoME1Xd2dQajQrSURBcElEOGdNU0E2SURBcEtTQjhJREJjYmx4dUlDQWdJR2tySzF4dUlDQWdJR29nS3owZ01seHVJQ0I5WEc1Y2JpQWdkMmhwYkdVZ0tHa2dQQ0F4TmlrZ2UxeHVJQ0FnSUZkcElEMGdUUzV5WldGa1NXNTBNekpDUlNocUlDb2dOQ2xjYmlBZ0lDQlhhV3dnUFNCTkxuSmxZV1JKYm5Rek1rSkZLR29nS2lBMElDc2dOQ2xjYmx4dUlDQWdJR3h2YjNBb0tWeHVJQ0I5WEc1Y2JpQWdkMmhwYkdVZ0tHa2dQQ0E0TUNrZ2UxeHVJQ0FnSUdOaGJHTlhLQ2xjYmlBZ0lDQnNiMjl3S0NsY2JpQWdmVnh1WEc0Z0lIUm9hWE11WDJGc0lEMGdLSFJvYVhNdVgyRnNJQ3NnWVd3cElId2dNRnh1SUNCMGFHbHpMbDlpYkNBOUlDaDBhR2x6TGw5aWJDQXJJR0pzS1NCOElEQmNiaUFnZEdocGN5NWZZMndnUFNBb2RHaHBjeTVmWTJ3Z0t5QmpiQ2tnZkNBd1hHNGdJSFJvYVhNdVgyUnNJRDBnS0hSb2FYTXVYMlJzSUNzZ1pHd3BJSHdnTUZ4dUlDQjBhR2x6TGw5bGJDQTlJQ2gwYUdsekxsOWxiQ0FySUdWc0tTQjhJREJjYmlBZ2RHaHBjeTVmWm13Z1BTQW9kR2hwY3k1Zlptd2dLeUJtYkNrZ2ZDQXdYRzRnSUhSb2FYTXVYMmRzSUQwZ0tIUm9hWE11WDJkc0lDc2daMndwSUh3Z01GeHVJQ0IwYUdsekxsOW9iQ0E5SUNoMGFHbHpMbDlvYkNBcklHaHNLU0I4SURCY2JseHVJQ0IwYUdsekxsOWhJRDBnS0hSb2FYTXVYMkVnS3lCaElDc2dLQ2gwYUdsekxsOWhiQ0ErUGo0Z01Da2dQQ0FvWVd3Z1BqNCtJREFwSUQ4Z01TQTZJREFwS1NCOElEQmNiaUFnZEdocGN5NWZZaUE5SUNoMGFHbHpMbDlpSUNzZ1lpQXJJQ2dvZEdocGN5NWZZbXdnUGo0K0lEQXBJRHdnS0dKc0lENCtQaUF3S1NBL0lERWdPaUF3S1NrZ2ZDQXdYRzRnSUhSb2FYTXVYMk1nUFNBb2RHaHBjeTVmWXlBcklHTWdLeUFvS0hSb2FYTXVYMk5zSUQ0K1BpQXdLU0E4SUNoamJDQStQajRnTUNrZ1B5QXhJRG9nTUNrcElId2dNRnh1SUNCMGFHbHpMbDlrSUQwZ0tIUm9hWE11WDJRZ0t5QmtJQ3NnS0NoMGFHbHpMbDlrYkNBK1BqNGdNQ2tnUENBb1pHd2dQajQrSURBcElEOGdNU0E2SURBcEtTQjhJREJjYmlBZ2RHaHBjeTVmWlNBOUlDaDBhR2x6TGw5bElDc2daU0FySUNnb2RHaHBjeTVmWld3Z1BqNCtJREFwSUR3Z0tHVnNJRDQrUGlBd0tTQS9JREVnT2lBd0tTa2dmQ0F3WEc0Z0lIUm9hWE11WDJZZ1BTQW9kR2hwY3k1ZlppQXJJR1lnS3lBb0tIUm9hWE11WDJac0lENCtQaUF3S1NBOElDaG1iQ0ErUGo0Z01Da2dQeUF4SURvZ01Da3BJSHdnTUZ4dUlDQjBhR2x6TGw5bklEMGdLSFJvYVhNdVgyY2dLeUJuSUNzZ0tDaDBhR2x6TGw5bmJDQStQajRnTUNrZ1BDQW9aMndnUGo0K0lEQXBJRDhnTVNBNklEQXBLU0I4SURCY2JpQWdkR2hwY3k1ZmFDQTlJQ2gwYUdsekxsOW9JQ3NnYUNBcklDZ29kR2hwY3k1ZmFHd2dQajQrSURBcElEd2dLR2hzSUQ0K1BpQXdLU0EvSURFZ09pQXdLU2tnZkNBd1hHNTlYRzVjYmxOb1lUVXhNaTV3Y205MGIzUjVjR1V1WDJoaGMyZ2dQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJSFpoY2lCSUlEMGdibVYzSUVKMVptWmxjaWcyTkNsY2JseHVJQ0JtZFc1amRHbHZiaUIzY21sMFpVbHVkRFkwUWtVZ0tHZ3NJR3dzSUc5bVpuTmxkQ2tnZTF4dUlDQWdJRWd1ZDNKcGRHVkpiblF6TWtKRktHZ3NJRzltWm5ObGRDbGNiaUFnSUNCSUxuZHlhWFJsU1c1ME16SkNSU2hzTENCdlptWnpaWFFnS3lBMEtWeHVJQ0I5WEc1Y2JpQWdkM0pwZEdWSmJuUTJORUpGS0hSb2FYTXVYMkVzSUhSb2FYTXVYMkZzTENBd0tWeHVJQ0IzY21sMFpVbHVkRFkwUWtVb2RHaHBjeTVmWWl3Z2RHaHBjeTVmWW13c0lEZ3BYRzRnSUhkeWFYUmxTVzUwTmpSQ1JTaDBhR2x6TGw5akxDQjBhR2x6TGw5amJDd2dNVFlwWEc0Z0lIZHlhWFJsU1c1ME5qUkNSU2gwYUdsekxsOWtMQ0IwYUdsekxsOWtiQ3dnTWpRcFhHNGdJSGR5YVhSbFNXNTBOalJDUlNoMGFHbHpMbDlsTENCMGFHbHpMbDlsYkN3Z016SXBYRzRnSUhkeWFYUmxTVzUwTmpSQ1JTaDBhR2x6TGw5bUxDQjBhR2x6TGw5bWJDd2dOREFwWEc0Z0lIZHlhWFJsU1c1ME5qUkNSU2gwYUdsekxsOW5MQ0IwYUdsekxsOW5iQ3dnTkRncFhHNGdJSGR5YVhSbFNXNTBOalJDUlNoMGFHbHpMbDlvTENCMGFHbHpMbDlvYkN3Z05UWXBYRzVjYmlBZ2NtVjBkWEp1SUVoY2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JUYUdFMU1USmNiaUpkZlE9PSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbi8qKlxuICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBTZWN1cmUgSGFzaCBBbGdvcml0aG0sIFNIQS0yNTYsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgMTgwLTJcbiAqIFZlcnNpb24gMi4yLWJldGEgQ29weXJpZ2h0IEFuZ2VsIE1hcmluLCBQYXVsIEpvaG5zdG9uIDIwMDAgLSAyMDA5LlxuICogT3RoZXIgY29udHJpYnV0b3JzOiBHcmVnIEhvbHQsIEFuZHJldyBLZXBlcnQsIFlkbmFyLCBMb3N0aW5ldFxuICpcbiAqL1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgU2hhMjU2ID0gcmVxdWlyZSgnLi9zaGEyNTYnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxuXG52YXIgVyA9IG5ldyBBcnJheSg2NClcblxuZnVuY3Rpb24gU2hhMjI0ICgpIHtcbiAgdGhpcy5pbml0KClcblxuICB0aGlzLl93ID0gVyAvLyBuZXcgQXJyYXkoNjQpXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDY0LCA1Nilcbn1cblxuaW5oZXJpdHMoU2hhMjI0LCBTaGEyNTYpXG5cblNoYTIyNC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4YzEwNTllZDggfCAwXG4gIHRoaXMuX2IgPSAweDM2N2NkNTA3IHwgMFxuICB0aGlzLl9jID0gMHgzMDcwZGQxNyB8IDBcbiAgdGhpcy5fZCA9IDB4ZjcwZTU5MzkgfCAwXG4gIHRoaXMuX2UgPSAweGZmYzAwYjMxIHwgMFxuICB0aGlzLl9mID0gMHg2ODU4MTUxMSB8IDBcbiAgdGhpcy5fZyA9IDB4NjRmOThmYTcgfCAwXG4gIHRoaXMuX2ggPSAweGJlZmE0ZmE0IHwgMFxuXG4gIHJldHVybiB0aGlzXG59XG5cblNoYTIyNC5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gbmV3IEJ1ZmZlcigyOClcblxuICBILndyaXRlSW50MzJCRSh0aGlzLl9hLCAwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9iLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jLCA4KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9kLCAxMilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZSwgMTYpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2YsIDIwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9nLCAyNClcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTIyNFxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlkzSmxZWFJsTFdoaGMyZ3ZibTlrWlY5dGIyUjFiR1Z6TDNOb1lTNXFjeTl6YUdFeU1qUXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dRU0JLWVhaaFUyTnlhWEIwSUdsdGNHeGxiV1Z1ZEdGMGFXOXVJRzltSUhSb1pTQlRaV04xY21VZ1NHRnphQ0JCYkdkdmNtbDBhRzBzSUZOSVFTMHlOVFlzSUdGeklHUmxabWx1WldSY2JpQXFJR2x1SUVaSlVGTWdNVGd3TFRKY2JpQXFJRlpsY25OcGIyNGdNaTR5TFdKbGRHRWdRMjl3ZVhKcFoyaDBJRUZ1WjJWc0lFMWhjbWx1TENCUVlYVnNJRXB2YUc1emRHOXVJREl3TURBZ0xTQXlNREE1TGx4dUlDb2dUM1JvWlhJZ1kyOXVkSEpwWW5WMGIzSnpPaUJIY21WbklFaHZiSFFzSUVGdVpISmxkeUJMWlhCbGNuUXNJRmxrYm1GeUxDQk1iM04wYVc1bGRGeHVJQ3BjYmlBcUwxeHVYRzUyWVhJZ2FXNW9aWEpwZEhNZ1BTQnlaWEYxYVhKbEtDZHBibWhsY21sMGN5Y3BYRzUyWVhJZ1UyaGhNalUySUQwZ2NtVnhkV2x5WlNnbkxpOXphR0V5TlRZbktWeHVkbUZ5SUVoaGMyZ2dQU0J5WlhGMWFYSmxLQ2N1TDJoaGMyZ25LVnh1WEc1MllYSWdWeUE5SUc1bGR5QkJjbkpoZVNnMk5DbGNibHh1Wm5WdVkzUnBiMjRnVTJoaE1qSTBJQ2dwSUh0Y2JpQWdkR2hwY3k1cGJtbDBLQ2xjYmx4dUlDQjBhR2x6TGw5M0lEMGdWeUF2THlCdVpYY2dRWEp5WVhrb05qUXBYRzVjYmlBZ1NHRnphQzVqWVd4c0tIUm9hWE1zSURZMExDQTFOaWxjYm4xY2JseHVhVzVvWlhKcGRITW9VMmhoTWpJMExDQlRhR0V5TlRZcFhHNWNibE5vWVRJeU5DNXdjbTkwYjNSNWNHVXVhVzVwZENBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ2RHaHBjeTVmWVNBOUlEQjRZekV3TlRsbFpEZ2dmQ0F3WEc0Z0lIUm9hWE11WDJJZ1BTQXdlRE0yTjJOa05UQTNJSHdnTUZ4dUlDQjBhR2x6TGw5aklEMGdNSGd6TURjd1pHUXhOeUI4SURCY2JpQWdkR2hwY3k1ZlpDQTlJREI0Wmpjd1pUVTVNemtnZkNBd1hHNGdJSFJvYVhNdVgyVWdQU0F3ZUdabVl6QXdZak14SUh3Z01GeHVJQ0IwYUdsekxsOW1JRDBnTUhnMk9EVTRNVFV4TVNCOElEQmNiaUFnZEdocGN5NWZaeUE5SURCNE5qUm1PVGhtWVRjZ2ZDQXdYRzRnSUhSb2FYTXVYMmdnUFNBd2VHSmxabUUwWm1FMElId2dNRnh1WEc0Z0lISmxkSFZ5YmlCMGFHbHpYRzU5WEc1Y2JsTm9ZVEl5TkM1d2NtOTBiM1I1Y0dVdVgyaGhjMmdnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUhaaGNpQklJRDBnYm1WM0lFSjFabVpsY2lneU9DbGNibHh1SUNCSUxuZHlhWFJsU1c1ME16SkNSU2gwYUdsekxsOWhMQ0F3S1Z4dUlDQklMbmR5YVhSbFNXNTBNekpDUlNoMGFHbHpMbDlpTENBMEtWeHVJQ0JJTG5keWFYUmxTVzUwTXpKQ1JTaDBhR2x6TGw5akxDQTRLVnh1SUNCSUxuZHlhWFJsU1c1ME16SkNSU2gwYUdsekxsOWtMQ0F4TWlsY2JpQWdTQzUzY21sMFpVbHVkRE15UWtVb2RHaHBjeTVmWlN3Z01UWXBYRzRnSUVndWQzSnBkR1ZKYm5Rek1rSkZLSFJvYVhNdVgyWXNJREl3S1Z4dUlDQklMbmR5YVhSbFNXNTBNekpDUlNoMGFHbHpMbDluTENBeU5DbGNibHh1SUNCeVpYUjFjbTRnU0Z4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRk5vWVRJeU5GeHVJbDE5IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xuLyoqXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTI1NiwgYXMgZGVmaW5lZFxuICogaW4gRklQUyAxODAtMlxuICogVmVyc2lvbiAyLjItYmV0YSBDb3B5cmlnaHQgQW5nZWwgTWFyaW4sIFBhdWwgSm9obnN0b24gMjAwMCAtIDIwMDkuXG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcblxudmFyIEsgPSBbXG4gIDB4NDI4QTJGOTgsIDB4NzEzNzQ0OTEsIDB4QjVDMEZCQ0YsIDB4RTlCNURCQTUsXG4gIDB4Mzk1NkMyNUIsIDB4NTlGMTExRjEsIDB4OTIzRjgyQTQsIDB4QUIxQzVFRDUsXG4gIDB4RDgwN0FBOTgsIDB4MTI4MzVCMDEsIDB4MjQzMTg1QkUsIDB4NTUwQzdEQzMsXG4gIDB4NzJCRTVENzQsIDB4ODBERUIxRkUsIDB4OUJEQzA2QTcsIDB4QzE5QkYxNzQsXG4gIDB4RTQ5QjY5QzEsIDB4RUZCRTQ3ODYsIDB4MEZDMTlEQzYsIDB4MjQwQ0ExQ0MsXG4gIDB4MkRFOTJDNkYsIDB4NEE3NDg0QUEsIDB4NUNCMEE5REMsIDB4NzZGOTg4REEsXG4gIDB4OTgzRTUxNTIsIDB4QTgzMUM2NkQsIDB4QjAwMzI3QzgsIDB4QkY1OTdGQzcsXG4gIDB4QzZFMDBCRjMsIDB4RDVBNzkxNDcsIDB4MDZDQTYzNTEsIDB4MTQyOTI5NjcsXG4gIDB4MjdCNzBBODUsIDB4MkUxQjIxMzgsIDB4NEQyQzZERkMsIDB4NTMzODBEMTMsXG4gIDB4NjUwQTczNTQsIDB4NzY2QTBBQkIsIDB4ODFDMkM5MkUsIDB4OTI3MjJDODUsXG4gIDB4QTJCRkU4QTEsIDB4QTgxQTY2NEIsIDB4QzI0QjhCNzAsIDB4Qzc2QzUxQTMsXG4gIDB4RDE5MkU4MTksIDB4RDY5OTA2MjQsIDB4RjQwRTM1ODUsIDB4MTA2QUEwNzAsXG4gIDB4MTlBNEMxMTYsIDB4MUUzNzZDMDgsIDB4Mjc0ODc3NEMsIDB4MzRCMEJDQjUsXG4gIDB4MzkxQzBDQjMsIDB4NEVEOEFBNEEsIDB4NUI5Q0NBNEYsIDB4NjgyRTZGRjMsXG4gIDB4NzQ4RjgyRUUsIDB4NzhBNTYzNkYsIDB4ODRDODc4MTQsIDB4OENDNzAyMDgsXG4gIDB4OTBCRUZGRkEsIDB4QTQ1MDZDRUIsIDB4QkVGOUEzRjcsIDB4QzY3MTc4RjJcbl1cblxudmFyIFcgPSBuZXcgQXJyYXkoNjQpXG5cbmZ1bmN0aW9uIFNoYTI1NiAoKSB7XG4gIHRoaXMuaW5pdCgpXG5cbiAgdGhpcy5fdyA9IFcgLy8gbmV3IEFycmF5KDY0KVxuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYTI1NiwgSGFzaClcblxuU2hhMjU2LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hID0gMHg2YTA5ZTY2NyB8IDBcbiAgdGhpcy5fYiA9IDB4YmI2N2FlODUgfCAwXG4gIHRoaXMuX2MgPSAweDNjNmVmMzcyIHwgMFxuICB0aGlzLl9kID0gMHhhNTRmZjUzYSB8IDBcbiAgdGhpcy5fZSA9IDB4NTEwZTUyN2YgfCAwXG4gIHRoaXMuX2YgPSAweDliMDU2ODhjIHwgMFxuICB0aGlzLl9nID0gMHgxZjgzZDlhYiB8IDBcbiAgdGhpcy5faCA9IDB4NWJlMGNkMTkgfCAwXG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gQ2ggKHgsIHksIHopIHtcbiAgcmV0dXJuIHogXiAoeCAmICh5IF4geikpXG59XG5cbmZ1bmN0aW9uIE1haiAoeCwgeSwgeikge1xuICByZXR1cm4gKHggJiB5KSB8ICh6ICYgKHggfCB5KSlcbn1cblxuZnVuY3Rpb24gU2lnbWEwICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gMiB8IHggPDwgMzApIF4gKHggPj4+IDEzIHwgeCA8PCAxOSkgXiAoeCA+Pj4gMjIgfCB4IDw8IDEwKVxufVxuXG5mdW5jdGlvbiBTaWdtYTEgKHgpIHtcbiAgcmV0dXJuICh4ID4+PiA2IHwgeCA8PCAyNikgXiAoeCA+Pj4gMTEgfCB4IDw8IDIxKSBeICh4ID4+PiAyNSB8IHggPDwgNylcbn1cblxuZnVuY3Rpb24gR2FtbWEwICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gNyB8IHggPDwgMjUpIF4gKHggPj4+IDE4IHwgeCA8PCAxNCkgXiAoeCA+Pj4gMylcbn1cblxuZnVuY3Rpb24gR2FtbWExICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gMTcgfCB4IDw8IDE1KSBeICh4ID4+PiAxOSB8IHggPDwgMTMpIF4gKHggPj4+IDEwKVxufVxuXG5TaGEyNTYucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoTSkge1xuICB2YXIgVyA9IHRoaXMuX3dcblxuICB2YXIgYSA9IHRoaXMuX2EgfCAwXG4gIHZhciBiID0gdGhpcy5fYiB8IDBcbiAgdmFyIGMgPSB0aGlzLl9jIHwgMFxuICB2YXIgZCA9IHRoaXMuX2QgfCAwXG4gIHZhciBlID0gdGhpcy5fZSB8IDBcbiAgdmFyIGYgPSB0aGlzLl9mIHwgMFxuICB2YXIgZyA9IHRoaXMuX2cgfCAwXG4gIHZhciBoID0gdGhpcy5faCB8IDBcblxuICB2YXIgaiA9IDBcblxuICBmdW5jdGlvbiBjYWxjVyAoKSB7IHJldHVybiBHYW1tYTEoV1tqIC0gMl0pICsgV1tqIC0gN10gKyBHYW1tYTAoV1tqIC0gMTVdKSArIFdbaiAtIDE2XSB9XG4gIGZ1bmN0aW9uIGxvb3AgKHcpIHtcbiAgICBXW2pdID0gd1xuXG4gICAgdmFyIFQxID0gaCArIFNpZ21hMShlKSArIENoKGUsIGYsIGcpICsgS1tqXSArIHdcbiAgICB2YXIgVDIgPSBTaWdtYTAoYSkgKyBNYWooYSwgYiwgYylcblxuICAgIGggPSBnXG4gICAgZyA9IGZcbiAgICBmID0gZVxuICAgIGUgPSBkICsgVDFcbiAgICBkID0gY1xuICAgIGMgPSBiXG4gICAgYiA9IGFcbiAgICBhID0gVDEgKyBUMlxuXG4gICAgaisrXG4gIH1cblxuICB3aGlsZSAoaiA8IDE2KSBsb29wKE0ucmVhZEludDMyQkUoaiAqIDQpKVxuICB3aGlsZSAoaiA8IDY0KSBsb29wKGNhbGNXKCkpXG5cbiAgdGhpcy5fYSA9IChhICsgdGhpcy5fYSkgfCAwXG4gIHRoaXMuX2IgPSAoYiArIHRoaXMuX2IpIHwgMFxuICB0aGlzLl9jID0gKGMgKyB0aGlzLl9jKSB8IDBcbiAgdGhpcy5fZCA9IChkICsgdGhpcy5fZCkgfCAwXG4gIHRoaXMuX2UgPSAoZSArIHRoaXMuX2UpIHwgMFxuICB0aGlzLl9mID0gKGYgKyB0aGlzLl9mKSB8IDBcbiAgdGhpcy5fZyA9IChnICsgdGhpcy5fZykgfCAwXG4gIHRoaXMuX2ggPSAoaCArIHRoaXMuX2gpIHwgMFxufVxuXG5TaGEyNTYucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IG5ldyBCdWZmZXIoMzIpXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSwgMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYiwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYywgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCwgMTIpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2UsIDE2KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9mLCAyMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZywgMjQpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2gsIDI4KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhMjU2XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WTNKbFlYUmxMV2hoYzJndmJtOWtaVjl0YjJSMWJHVnpMM05vWVM1cWN5OXphR0V5TlRZdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2labWxzWlNJNkltZGxibVZ5WVhSbFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lwY2JpQXFJRUVnU21GMllWTmpjbWx3ZENCcGJYQnNaVzFsYm5SaGRHbHZiaUJ2WmlCMGFHVWdVMlZqZFhKbElFaGhjMmdnUVd4bmIzSnBkR2h0TENCVFNFRXRNalUyTENCaGN5QmtaV1pwYm1Wa1hHNGdLaUJwYmlCR1NWQlRJREU0TUMweVhHNGdLaUJXWlhKemFXOXVJREl1TWkxaVpYUmhJRU52Y0hseWFXZG9kQ0JCYm1kbGJDQk5ZWEpwYml3Z1VHRjFiQ0JLYjJodWMzUnZiaUF5TURBd0lDMGdNakF3T1M1Y2JpQXFJRTkwYUdWeUlHTnZiblJ5YVdKMWRHOXljem9nUjNKbFp5QkliMngwTENCQmJtUnlaWGNnUzJWd1pYSjBMQ0JaWkc1aGNpd2dURzl6ZEdsdVpYUmNiaUFxWEc0Z0tpOWNibHh1ZG1GeUlHbHVhR1Z5YVhSeklEMGdjbVZ4ZFdseVpTZ25hVzVvWlhKcGRITW5LVnh1ZG1GeUlFaGhjMmdnUFNCeVpYRjFhWEpsS0NjdUwyaGhjMmduS1Z4dVhHNTJZWElnU3lBOUlGdGNiaUFnTUhnME1qaEJNa1k1T0N3Z01IZzNNVE0zTkRRNU1Td2dNSGhDTlVNd1JrSkRSaXdnTUhoRk9VSTFSRUpCTlN4Y2JpQWdNSGd6T1RVMlF6STFRaXdnTUhnMU9VWXhNVEZHTVN3Z01IZzVNak5HT0RKQk5Dd2dNSGhCUWpGRE5VVkVOU3hjYmlBZ01IaEVPREEzUVVFNU9Dd2dNSGd4TWpnek5VSXdNU3dnTUhneU5ETXhPRFZDUlN3Z01IZzFOVEJETjBSRE15eGNiaUFnTUhnM01rSkZOVVEzTkN3Z01IZzRNRVJGUWpGR1JTd2dNSGc1UWtSRE1EWkJOeXdnTUhoRE1UbENSakUzTkN4Y2JpQWdNSGhGTkRsQ05qbERNU3dnTUhoRlJrSkZORGM0Tml3Z01IZ3dSa014T1VSRE5pd2dNSGd5TkRCRFFURkRReXhjYmlBZ01IZ3lSRVU1TWtNMlJpd2dNSGcwUVRjME9EUkJRU3dnTUhnMVEwSXdRVGxFUXl3Z01IZzNOa1k1T0RoRVFTeGNiaUFnTUhnNU9ETkZOVEUxTWl3Z01IaEJPRE14UXpZMlJDd2dNSGhDTURBek1qZERPQ3dnTUhoQ1JqVTVOMFpETnl4Y2JpQWdNSGhETmtVd01FSkdNeXdnTUhoRU5VRTNPVEUwTnl3Z01IZ3dOa05CTmpNMU1Td2dNSGd4TkRJNU1qazJOeXhjYmlBZ01IZ3lOMEkzTUVFNE5Td2dNSGd5UlRGQ01qRXpPQ3dnTUhnMFJESkROa1JHUXl3Z01IZzFNek00TUVReE15eGNiaUFnTUhnMk5UQkJOek0xTkN3Z01IZzNOalpCTUVGQ1Fpd2dNSGc0TVVNeVF6a3lSU3dnTUhnNU1qY3lNa000TlN4Y2JpQWdNSGhCTWtKR1JUaEJNU3dnTUhoQk9ERkJOalkwUWl3Z01IaERNalJDT0VJM01Dd2dNSGhETnpaRE5URkJNeXhjYmlBZ01IaEVNVGt5UlRneE9Td2dNSGhFTmprNU1EWXlOQ3dnTUhoR05EQkZNelU0TlN3Z01IZ3hNRFpCUVRBM01DeGNiaUFnTUhneE9VRTBRekV4Tml3Z01IZ3hSVE0zTmtNd09Dd2dNSGd5TnpRNE56YzBReXdnTUhnek5FSXdRa05DTlN4Y2JpQWdNSGd6T1RGRE1FTkNNeXdnTUhnMFJVUTRRVUUwUVN3Z01IZzFRamxEUTBFMFJpd2dNSGcyT0RKRk5rWkdNeXhjYmlBZ01IZzNORGhHT0RKRlJTd2dNSGczT0VFMU5qTTJSaXdnTUhnNE5FTTROemd4TkN3Z01IZzRRME0zTURJd09DeGNiaUFnTUhnNU1FSkZSa1pHUVN3Z01IaEJORFV3TmtORlFpd2dNSGhDUlVZNVFUTkdOeXdnTUhoRE5qY3hOemhHTWx4dVhWeHVYRzUyWVhJZ1Z5QTlJRzVsZHlCQmNuSmhlU2cyTkNsY2JseHVablZ1WTNScGIyNGdVMmhoTWpVMklDZ3BJSHRjYmlBZ2RHaHBjeTVwYm1sMEtDbGNibHh1SUNCMGFHbHpMbDkzSUQwZ1Z5QXZMeUJ1WlhjZ1FYSnlZWGtvTmpRcFhHNWNiaUFnU0dGemFDNWpZV3hzS0hSb2FYTXNJRFkwTENBMU5pbGNibjFjYmx4dWFXNW9aWEpwZEhNb1UyaGhNalUyTENCSVlYTm9LVnh1WEc1VGFHRXlOVFl1Y0hKdmRHOTBlWEJsTG1sdWFYUWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJSFJvYVhNdVgyRWdQU0F3ZURaaE1EbGxOalkzSUh3Z01GeHVJQ0IwYUdsekxsOWlJRDBnTUhoaVlqWTNZV1U0TlNCOElEQmNiaUFnZEdocGN5NWZZeUE5SURCNE0yTTJaV1l6TnpJZ2ZDQXdYRzRnSUhSb2FYTXVYMlFnUFNBd2VHRTFOR1ptTlROaElId2dNRnh1SUNCMGFHbHpMbDlsSUQwZ01IZzFNVEJsTlRJM1ppQjhJREJjYmlBZ2RHaHBjeTVmWmlBOUlEQjRPV0l3TlRZNE9HTWdmQ0F3WEc0Z0lIUm9hWE11WDJjZ1BTQXdlREZtT0ROa09XRmlJSHdnTUZ4dUlDQjBhR2x6TGw5b0lEMGdNSGcxWW1Vd1kyUXhPU0I4SURCY2JseHVJQ0J5WlhSMWNtNGdkR2hwYzF4dWZWeHVYRzVtZFc1amRHbHZiaUJEYUNBb2VDd2dlU3dnZWlrZ2UxeHVJQ0J5WlhSMWNtNGdlaUJlSUNoNElDWWdLSGtnWGlCNktTbGNibjFjYmx4dVpuVnVZM1JwYjI0Z1RXRnFJQ2g0TENCNUxDQjZLU0I3WEc0Z0lISmxkSFZ5YmlBb2VDQW1JSGtwSUh3Z0tIb2dKaUFvZUNCOElIa3BLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQlRhV2R0WVRBZ0tIZ3BJSHRjYmlBZ2NtVjBkWEp1SUNoNElENCtQaUF5SUh3Z2VDQThQQ0F6TUNrZ1hpQW9lQ0ErUGo0Z01UTWdmQ0I0SUR3OElERTVLU0JlSUNoNElENCtQaUF5TWlCOElIZ2dQRHdnTVRBcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUZOcFoyMWhNU0FvZUNrZ2UxeHVJQ0J5WlhSMWNtNGdLSGdnUGo0K0lEWWdmQ0I0SUR3OElESTJLU0JlSUNoNElENCtQaUF4TVNCOElIZ2dQRHdnTWpFcElGNGdLSGdnUGo0K0lESTFJSHdnZUNBOFBDQTNLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQkhZVzF0WVRBZ0tIZ3BJSHRjYmlBZ2NtVjBkWEp1SUNoNElENCtQaUEzSUh3Z2VDQThQQ0F5TlNrZ1hpQW9lQ0ErUGo0Z01UZ2dmQ0I0SUR3OElERTBLU0JlSUNoNElENCtQaUF6S1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJIWVcxdFlURWdLSGdwSUh0Y2JpQWdjbVYwZFhKdUlDaDRJRDQrUGlBeE55QjhJSGdnUER3Z01UVXBJRjRnS0hnZ1BqNCtJREU1SUh3Z2VDQThQQ0F4TXlrZ1hpQW9lQ0ErUGo0Z01UQXBYRzU5WEc1Y2JsTm9ZVEkxTmk1d2NtOTBiM1I1Y0dVdVgzVndaR0YwWlNBOUlHWjFibU4wYVc5dUlDaE5LU0I3WEc0Z0lIWmhjaUJYSUQwZ2RHaHBjeTVmZDF4dVhHNGdJSFpoY2lCaElEMGdkR2hwY3k1ZllTQjhJREJjYmlBZ2RtRnlJR0lnUFNCMGFHbHpMbDlpSUh3Z01GeHVJQ0IyWVhJZ1l5QTlJSFJvYVhNdVgyTWdmQ0F3WEc0Z0lIWmhjaUJrSUQwZ2RHaHBjeTVmWkNCOElEQmNiaUFnZG1GeUlHVWdQU0IwYUdsekxsOWxJSHdnTUZ4dUlDQjJZWElnWmlBOUlIUm9hWE11WDJZZ2ZDQXdYRzRnSUhaaGNpQm5JRDBnZEdocGN5NWZaeUI4SURCY2JpQWdkbUZ5SUdnZ1BTQjBhR2x6TGw5b0lId2dNRnh1WEc0Z0lIWmhjaUJxSUQwZ01GeHVYRzRnSUdaMWJtTjBhVzl1SUdOaGJHTlhJQ2dwSUhzZ2NtVjBkWEp1SUVkaGJXMWhNU2hYVzJvZ0xTQXlYU2tnS3lCWFcyb2dMU0EzWFNBcklFZGhiVzFoTUNoWFcyb2dMU0F4TlYwcElDc2dWMXRxSUMwZ01UWmRJSDFjYmlBZ1puVnVZM1JwYjI0Z2JHOXZjQ0FvZHlrZ2UxeHVJQ0FnSUZkYmFsMGdQU0IzWEc1Y2JpQWdJQ0IyWVhJZ1ZERWdQU0JvSUNzZ1UybG5iV0V4S0dVcElDc2dRMmdvWlN3Z1ppd2daeWtnS3lCTFcycGRJQ3NnZDF4dUlDQWdJSFpoY2lCVU1pQTlJRk5wWjIxaE1DaGhLU0FySUUxaGFpaGhMQ0JpTENCaktWeHVYRzRnSUNBZ2FDQTlJR2RjYmlBZ0lDQm5JRDBnWmx4dUlDQWdJR1lnUFNCbFhHNGdJQ0FnWlNBOUlHUWdLeUJVTVZ4dUlDQWdJR1FnUFNCalhHNGdJQ0FnWXlBOUlHSmNiaUFnSUNCaUlEMGdZVnh1SUNBZ0lHRWdQU0JVTVNBcklGUXlYRzVjYmlBZ0lDQnFLeXRjYmlBZ2ZWeHVYRzRnSUhkb2FXeGxJQ2hxSUR3Z01UWXBJR3h2YjNBb1RTNXlaV0ZrU1c1ME16SkNSU2hxSUNvZ05Da3BYRzRnSUhkb2FXeGxJQ2hxSUR3Z05qUXBJR3h2YjNBb1kyRnNZMWNvS1NsY2JseHVJQ0IwYUdsekxsOWhJRDBnS0dFZ0t5QjBhR2x6TGw5aEtTQjhJREJjYmlBZ2RHaHBjeTVmWWlBOUlDaGlJQ3NnZEdocGN5NWZZaWtnZkNBd1hHNGdJSFJvYVhNdVgyTWdQU0FvWXlBcklIUm9hWE11WDJNcElId2dNRnh1SUNCMGFHbHpMbDlrSUQwZ0tHUWdLeUIwYUdsekxsOWtLU0I4SURCY2JpQWdkR2hwY3k1ZlpTQTlJQ2hsSUNzZ2RHaHBjeTVmWlNrZ2ZDQXdYRzRnSUhSb2FYTXVYMllnUFNBb1ppQXJJSFJvYVhNdVgyWXBJSHdnTUZ4dUlDQjBhR2x6TGw5bklEMGdLR2NnS3lCMGFHbHpMbDluS1NCOElEQmNiaUFnZEdocGN5NWZhQ0E5SUNob0lDc2dkR2hwY3k1ZmFDa2dmQ0F3WEc1OVhHNWNibE5vWVRJMU5pNXdjbTkwYjNSNWNHVXVYMmhoYzJnZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lIWmhjaUJJSUQwZ2JtVjNJRUoxWm1abGNpZ3pNaWxjYmx4dUlDQklMbmR5YVhSbFNXNTBNekpDUlNoMGFHbHpMbDloTENBd0tWeHVJQ0JJTG5keWFYUmxTVzUwTXpKQ1JTaDBhR2x6TGw5aUxDQTBLVnh1SUNCSUxuZHlhWFJsU1c1ME16SkNSU2gwYUdsekxsOWpMQ0E0S1Z4dUlDQklMbmR5YVhSbFNXNTBNekpDUlNoMGFHbHpMbDlrTENBeE1pbGNiaUFnU0M1M2NtbDBaVWx1ZERNeVFrVW9kR2hwY3k1ZlpTd2dNVFlwWEc0Z0lFZ3VkM0pwZEdWSmJuUXpNa0pGS0hSb2FYTXVYMllzSURJd0tWeHVJQ0JJTG5keWFYUmxTVzUwTXpKQ1JTaDBhR2x6TGw5bkxDQXlOQ2xjYmlBZ1NDNTNjbWwwWlVsdWRETXlRa1VvZEdocGN5NWZhQ3dnTWpncFhHNWNiaUFnY21WMGRYSnVJRWhjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlRhR0V5TlRaY2JpSmRmUT09IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xuLypcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMSwgYXMgZGVmaW5lZFxuICogaW4gRklQUyBQVUIgMTgwLTFcbiAqIFZlcnNpb24gMi4xYSBDb3B5cmlnaHQgUGF1bCBKb2huc3RvbiAyMDAwIC0gMjAwMi5cbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCU0QgTGljZW5zZVxuICogU2VlIGh0dHA6Ly9wYWpob21lLm9yZy51ay9jcnlwdC9tZDUgZm9yIGRldGFpbHMuXG4gKi9cblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxuXG52YXIgVyA9IG5ldyBBcnJheSg4MClcblxuZnVuY3Rpb24gU2hhMSAoKSB7XG4gIHRoaXMuaW5pdCgpXG4gIHRoaXMuX3cgPSBXXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDY0LCA1Nilcbn1cblxuaW5oZXJpdHMoU2hhMSwgSGFzaClcblxuU2hhMS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4Njc0NTIzMDEgfCAwXG4gIHRoaXMuX2IgPSAweGVmY2RhYjg5IHwgMFxuICB0aGlzLl9jID0gMHg5OGJhZGNmZSB8IDBcbiAgdGhpcy5fZCA9IDB4MTAzMjU0NzYgfCAwXG4gIHRoaXMuX2UgPSAweGMzZDJlMWYwIHwgMFxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8qXG4gKiBCaXR3aXNlIHJvdGF0ZSBhIDMyLWJpdCBudW1iZXIgdG8gdGhlIGxlZnQuXG4gKi9cbmZ1bmN0aW9uIHJvbCAobnVtLCBjbnQpIHtcbiAgcmV0dXJuIChudW0gPDwgY250KSB8IChudW0gPj4+ICgzMiAtIGNudCkpXG59XG5cblNoYTEucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoTSkge1xuICB2YXIgVyA9IHRoaXMuX3dcblxuICB2YXIgYSA9IHRoaXMuX2FcbiAgdmFyIGIgPSB0aGlzLl9iXG4gIHZhciBjID0gdGhpcy5fY1xuICB2YXIgZCA9IHRoaXMuX2RcbiAgdmFyIGUgPSB0aGlzLl9lXG5cbiAgdmFyIGogPSAwXG4gIHZhciBrXG5cbiAgZnVuY3Rpb24gY2FsY1cgKCkgeyByZXR1cm4gcm9sKFdbaiAtIDNdIF4gV1tqIC0gOF0gXiBXW2ogLSAxNF0gXiBXW2ogLSAxNl0sIDEpIH1cbiAgZnVuY3Rpb24gbG9vcCAodywgZikge1xuICAgIFdbal0gPSB3XG5cbiAgICB2YXIgdCA9IHJvbChhLCA1KSArIGYgKyBlICsgdyArIGtcblxuICAgIGUgPSBkXG4gICAgZCA9IGNcbiAgICBjID0gcm9sKGIsIDMwKVxuICAgIGIgPSBhXG4gICAgYSA9IHRcbiAgICBqKytcbiAgfVxuXG4gIGsgPSAxNTE4NTAwMjQ5XG4gIHdoaWxlIChqIDwgMTYpIGxvb3AoTS5yZWFkSW50MzJCRShqICogNCksIChiICYgYykgfCAoKH5iKSAmIGQpKVxuICB3aGlsZSAoaiA8IDIwKSBsb29wKGNhbGNXKCksIChiICYgYykgfCAoKH5iKSAmIGQpKVxuICBrID0gMTg1OTc3NTM5M1xuICB3aGlsZSAoaiA8IDQwKSBsb29wKGNhbGNXKCksIGIgXiBjIF4gZClcbiAgayA9IC0xODk0MDA3NTg4XG4gIHdoaWxlIChqIDwgNjApIGxvb3AoY2FsY1coKSwgKGIgJiBjKSB8IChiICYgZCkgfCAoYyAmIGQpKVxuICBrID0gLTg5OTQ5NzUxNFxuICB3aGlsZSAoaiA8IDgwKSBsb29wKGNhbGNXKCksIGIgXiBjIF4gZClcblxuICB0aGlzLl9hID0gKGEgKyB0aGlzLl9hKSB8IDBcbiAgdGhpcy5fYiA9IChiICsgdGhpcy5fYikgfCAwXG4gIHRoaXMuX2MgPSAoYyArIHRoaXMuX2MpIHwgMFxuICB0aGlzLl9kID0gKGQgKyB0aGlzLl9kKSB8IDBcbiAgdGhpcy5fZSA9IChlICsgdGhpcy5fZSkgfCAwXG59XG5cblNoYTEucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IG5ldyBCdWZmZXIoMjApXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSB8IDAsIDApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2IgfCAwLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jIHwgMCwgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCB8IDAsIDEyKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9lIHwgMCwgMTYpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGExXG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WTNKbFlYUmxMV2hoYzJndmJtOWtaVjl0YjJSMWJHVnpMM05vWVM1cWN5OXphR0V4TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeXBjYmlBcUlFRWdTbUYyWVZOamNtbHdkQ0JwYlhCc1pXMWxiblJoZEdsdmJpQnZaaUIwYUdVZ1UyVmpkWEpsSUVoaGMyZ2dRV3huYjNKcGRHaHRMQ0JUU0VFdE1Td2dZWE1nWkdWbWFXNWxaRnh1SUNvZ2FXNGdSa2xRVXlCUVZVSWdNVGd3TFRGY2JpQXFJRlpsY25OcGIyNGdNaTR4WVNCRGIzQjVjbWxuYUhRZ1VHRjFiQ0JLYjJodWMzUnZiaUF5TURBd0lDMGdNakF3TWk1Y2JpQXFJRTkwYUdWeUlHTnZiblJ5YVdKMWRHOXljem9nUjNKbFp5QkliMngwTENCQmJtUnlaWGNnUzJWd1pYSjBMQ0JaWkc1aGNpd2dURzl6ZEdsdVpYUmNiaUFxSUVScGMzUnlhV0oxZEdWa0lIVnVaR1Z5SUhSb1pTQkNVMFFnVEdsalpXNXpaVnh1SUNvZ1UyVmxJR2gwZEhBNkx5OXdZV3BvYjIxbExtOXlaeTUxYXk5amNubHdkQzl0WkRVZ1ptOXlJR1JsZEdGcGJITXVYRzRnS2k5Y2JseHVkbUZ5SUdsdWFHVnlhWFJ6SUQwZ2NtVnhkV2x5WlNnbmFXNW9aWEpwZEhNbktWeHVkbUZ5SUVoaGMyZ2dQU0J5WlhGMWFYSmxLQ2N1TDJoaGMyZ25LVnh1WEc1MllYSWdWeUE5SUc1bGR5QkJjbkpoZVNnNE1DbGNibHh1Wm5WdVkzUnBiMjRnVTJoaE1TQW9LU0I3WEc0Z0lIUm9hWE11YVc1cGRDZ3BYRzRnSUhSb2FYTXVYM2NnUFNCWFhHNWNiaUFnU0dGemFDNWpZV3hzS0hSb2FYTXNJRFkwTENBMU5pbGNibjFjYmx4dWFXNW9aWEpwZEhNb1UyaGhNU3dnU0dGemFDbGNibHh1VTJoaE1TNXdjbTkwYjNSNWNHVXVhVzVwZENBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ2RHaHBjeTVmWVNBOUlEQjROamMwTlRJek1ERWdmQ0F3WEc0Z0lIUm9hWE11WDJJZ1BTQXdlR1ZtWTJSaFlqZzVJSHdnTUZ4dUlDQjBhR2x6TGw5aklEMGdNSGc1T0dKaFpHTm1aU0I4SURCY2JpQWdkR2hwY3k1ZlpDQTlJREI0TVRBek1qVTBOellnZkNBd1hHNGdJSFJvYVhNdVgyVWdQU0F3ZUdNelpESmxNV1l3SUh3Z01GeHVYRzRnSUhKbGRIVnliaUIwYUdselhHNTlYRzVjYmk4cVhHNGdLaUJDYVhSM2FYTmxJSEp2ZEdGMFpTQmhJRE15TFdKcGRDQnVkVzFpWlhJZ2RHOGdkR2hsSUd4bFpuUXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlISnZiQ0FvYm5WdExDQmpiblFwSUh0Y2JpQWdjbVYwZFhKdUlDaHVkVzBnUER3Z1kyNTBLU0I4SUNodWRXMGdQajQrSUNnek1pQXRJR051ZENrcFhHNTlYRzVjYmxOb1lURXVjSEp2ZEc5MGVYQmxMbDkxY0dSaGRHVWdQU0JtZFc1amRHbHZiaUFvVFNrZ2UxeHVJQ0IyWVhJZ1Z5QTlJSFJvYVhNdVgzZGNibHh1SUNCMllYSWdZU0E5SUhSb2FYTXVYMkZjYmlBZ2RtRnlJR0lnUFNCMGFHbHpMbDlpWEc0Z0lIWmhjaUJqSUQwZ2RHaHBjeTVmWTF4dUlDQjJZWElnWkNBOUlIUm9hWE11WDJSY2JpQWdkbUZ5SUdVZ1BTQjBhR2x6TGw5bFhHNWNiaUFnZG1GeUlHb2dQU0F3WEc0Z0lIWmhjaUJyWEc1Y2JpQWdablZ1WTNScGIyNGdZMkZzWTFjZ0tDa2dleUJ5WlhSMWNtNGdjbTlzS0ZkYmFpQXRJRE5kSUY0Z1YxdHFJQzBnT0YwZ1hpQlhXMm9nTFNBeE5GMGdYaUJYVzJvZ0xTQXhObDBzSURFcElIMWNiaUFnWm5WdVkzUnBiMjRnYkc5dmNDQW9keXdnWmlrZ2UxeHVJQ0FnSUZkYmFsMGdQU0IzWEc1Y2JpQWdJQ0IyWVhJZ2RDQTlJSEp2YkNoaExDQTFLU0FySUdZZ0t5QmxJQ3NnZHlBcklHdGNibHh1SUNBZ0lHVWdQU0JrWEc0Z0lDQWdaQ0E5SUdOY2JpQWdJQ0JqSUQwZ2NtOXNLR0lzSURNd0tWeHVJQ0FnSUdJZ1BTQmhYRzRnSUNBZ1lTQTlJSFJjYmlBZ0lDQnFLeXRjYmlBZ2ZWeHVYRzRnSUdzZ1BTQXhOVEU0TlRBd01qUTVYRzRnSUhkb2FXeGxJQ2hxSUR3Z01UWXBJR3h2YjNBb1RTNXlaV0ZrU1c1ME16SkNSU2hxSUNvZ05Da3NJQ2hpSUNZZ1l5a2dmQ0FvS0g1aUtTQW1JR1FwS1Z4dUlDQjNhR2xzWlNBb2FpQThJREl3S1NCc2IyOXdLR05oYkdOWEtDa3NJQ2hpSUNZZ1l5a2dmQ0FvS0g1aUtTQW1JR1FwS1Z4dUlDQnJJRDBnTVRnMU9UYzNOVE01TTF4dUlDQjNhR2xzWlNBb2FpQThJRFF3S1NCc2IyOXdLR05oYkdOWEtDa3NJR0lnWGlCaklGNGdaQ2xjYmlBZ2F5QTlJQzB4T0RrME1EQTNOVGc0WEc0Z0lIZG9hV3hsSUNocUlEd2dOakFwSUd4dmIzQW9ZMkZzWTFjb0tTd2dLR0lnSmlCaktTQjhJQ2hpSUNZZ1pDa2dmQ0FvWXlBbUlHUXBLVnh1SUNCcklEMGdMVGc1T1RRNU56VXhORnh1SUNCM2FHbHNaU0FvYWlBOElEZ3dLU0JzYjI5d0tHTmhiR05YS0Nrc0lHSWdYaUJqSUY0Z1pDbGNibHh1SUNCMGFHbHpMbDloSUQwZ0tHRWdLeUIwYUdsekxsOWhLU0I4SURCY2JpQWdkR2hwY3k1ZllpQTlJQ2hpSUNzZ2RHaHBjeTVmWWlrZ2ZDQXdYRzRnSUhSb2FYTXVYMk1nUFNBb1l5QXJJSFJvYVhNdVgyTXBJSHdnTUZ4dUlDQjBhR2x6TGw5a0lEMGdLR1FnS3lCMGFHbHpMbDlrS1NCOElEQmNiaUFnZEdocGN5NWZaU0E5SUNobElDc2dkR2hwY3k1ZlpTa2dmQ0F3WEc1OVhHNWNibE5vWVRFdWNISnZkRzkwZVhCbExsOW9ZWE5vSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNCMllYSWdTQ0E5SUc1bGR5QkNkV1ptWlhJb01qQXBYRzVjYmlBZ1NDNTNjbWwwWlVsdWRETXlRa1VvZEdocGN5NWZZU0I4SURBc0lEQXBYRzRnSUVndWQzSnBkR1ZKYm5Rek1rSkZLSFJvYVhNdVgySWdmQ0F3TENBMEtWeHVJQ0JJTG5keWFYUmxTVzUwTXpKQ1JTaDBhR2x6TGw5aklId2dNQ3dnT0NsY2JpQWdTQzUzY21sMFpVbHVkRE15UWtVb2RHaHBjeTVmWkNCOElEQXNJREV5S1Z4dUlDQklMbmR5YVhSbFNXNTBNekpDUlNoMGFHbHpMbDlsSUh3Z01Dd2dNVFlwWEc1Y2JpQWdjbVYwZFhKdUlFaGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCVGFHRXhYRzRpWFgwPSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbi8qXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTAsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgUFVCIDE4MC0xXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGRlcml2ZWQgZnJvbSBzaGExLmpzIG9mIHRoZSBzYW1lIHJlcG9zaXRvcnkuXG4gKiBUaGUgZGlmZmVyZW5jZSBiZXR3ZWVuIFNIQS0wIGFuZCBTSEEtMSBpcyBqdXN0IGEgYml0d2lzZSByb3RhdGUgbGVmdFxuICogb3BlcmF0aW9uIHdhcyBhZGRlZC5cbiAqL1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG5cbnZhciBXID0gbmV3IEFycmF5KDgwKVxuXG5mdW5jdGlvbiBTaGEgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYSwgSGFzaClcblxuU2hhLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hID0gMHg2NzQ1MjMwMSB8IDBcbiAgdGhpcy5fYiA9IDB4ZWZjZGFiODkgfCAwXG4gIHRoaXMuX2MgPSAweDk4YmFkY2ZlIHwgMFxuICB0aGlzLl9kID0gMHgxMDMyNTQ3NiB8IDBcbiAgdGhpcy5fZSA9IDB4YzNkMmUxZjAgfCAwXG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLypcbiAqIEJpdHdpc2Ugcm90YXRlIGEgMzItYml0IG51bWJlciB0byB0aGUgbGVmdC5cbiAqL1xuZnVuY3Rpb24gcm9sIChudW0sIGNudCkge1xuICByZXR1cm4gKG51bSA8PCBjbnQpIHwgKG51bSA+Pj4gKDMyIC0gY250KSlcbn1cblxuU2hhLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGEgPSB0aGlzLl9hXG4gIHZhciBiID0gdGhpcy5fYlxuICB2YXIgYyA9IHRoaXMuX2NcbiAgdmFyIGQgPSB0aGlzLl9kXG4gIHZhciBlID0gdGhpcy5fZVxuXG4gIHZhciBqID0gMFxuICB2YXIga1xuXG4gIC8qXG4gICAqIFNIQS0xIGhhcyBhIGJpdHdpc2Ugcm90YXRlIGxlZnQgb3BlcmF0aW9uLiBCdXQsIFNIQSBpcyBub3RcbiAgICogZnVuY3Rpb24gY2FsY1coKSB7IHJldHVybiByb2woV1tqIC0gM10gXiBXW2ogLSAgOF0gXiBXW2ogLSAxNF0gXiBXW2ogLSAxNl0sIDEpIH1cbiAgICovXG4gIGZ1bmN0aW9uIGNhbGNXICgpIHsgcmV0dXJuIFdbaiAtIDNdIF4gV1tqIC0gOF0gXiBXW2ogLSAxNF0gXiBXW2ogLSAxNl0gfVxuICBmdW5jdGlvbiBsb29wICh3LCBmKSB7XG4gICAgV1tqXSA9IHdcblxuICAgIHZhciB0ID0gcm9sKGEsIDUpICsgZiArIGUgKyB3ICsga1xuXG4gICAgZSA9IGRcbiAgICBkID0gY1xuICAgIGMgPSByb2woYiwgMzApXG4gICAgYiA9IGFcbiAgICBhID0gdFxuICAgIGorK1xuICB9XG5cbiAgayA9IDE1MTg1MDAyNDlcbiAgd2hpbGUgKGogPCAxNikgbG9vcChNLnJlYWRJbnQzMkJFKGogKiA0KSwgKGIgJiBjKSB8ICgofmIpICYgZCkpXG4gIHdoaWxlIChqIDwgMjApIGxvb3AoY2FsY1coKSwgKGIgJiBjKSB8ICgofmIpICYgZCkpXG4gIGsgPSAxODU5Nzc1MzkzXG4gIHdoaWxlIChqIDwgNDApIGxvb3AoY2FsY1coKSwgYiBeIGMgXiBkKVxuICBrID0gLTE4OTQwMDc1ODhcbiAgd2hpbGUgKGogPCA2MCkgbG9vcChjYWxjVygpLCAoYiAmIGMpIHwgKGIgJiBkKSB8IChjICYgZCkpXG4gIGsgPSAtODk5NDk3NTE0XG4gIHdoaWxlIChqIDwgODApIGxvb3AoY2FsY1coKSwgYiBeIGMgXiBkKVxuXG4gIHRoaXMuX2EgPSAoYSArIHRoaXMuX2EpIHwgMFxuICB0aGlzLl9iID0gKGIgKyB0aGlzLl9iKSB8IDBcbiAgdGhpcy5fYyA9IChjICsgdGhpcy5fYykgfCAwXG4gIHRoaXMuX2QgPSAoZCArIHRoaXMuX2QpIHwgMFxuICB0aGlzLl9lID0gKGUgKyB0aGlzLl9lKSB8IDBcbn1cblxuU2hhLnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBuZXcgQnVmZmVyKDIwKVxuXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2EgfCAwLCAwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9iIHwgMCwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYyB8IDAsIDgpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2QgfCAwLCAxMilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZSB8IDAsIDE2KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhXG5cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZM0psWVhSbExXaGhjMmd2Ym05a1pWOXRiMlIxYkdWekwzTm9ZUzVxY3k5emFHRXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFYRzRnS2lCQklFcGhkbUZUWTNKcGNIUWdhVzF3YkdWdFpXNTBZWFJwYjI0Z2IyWWdkR2hsSUZObFkzVnlaU0JJWVhOb0lFRnNaMjl5YVhSb2JTd2dVMGhCTFRBc0lHRnpJR1JsWm1sdVpXUmNiaUFxSUdsdUlFWkpVRk1nVUZWQ0lERTRNQzB4WEc0Z0tpQlVhR2x6SUhOdmRYSmpaU0JqYjJSbElHbHpJR1JsY21sMlpXUWdabkp2YlNCemFHRXhMbXB6SUc5bUlIUm9aU0J6WVcxbElISmxjRzl6YVhSdmNua3VYRzRnS2lCVWFHVWdaR2xtWm1WeVpXNWpaU0JpWlhSM1pXVnVJRk5JUVMwd0lHRnVaQ0JUU0VFdE1TQnBjeUJxZFhOMElHRWdZbWwwZDJselpTQnliM1JoZEdVZ2JHVm1kRnh1SUNvZ2IzQmxjbUYwYVc5dUlIZGhjeUJoWkdSbFpDNWNiaUFxTDF4dVhHNTJZWElnYVc1b1pYSnBkSE1nUFNCeVpYRjFhWEpsS0NkcGJtaGxjbWwwY3ljcFhHNTJZWElnU0dGemFDQTlJSEpsY1hWcGNtVW9KeTR2YUdGemFDY3BYRzVjYm5aaGNpQlhJRDBnYm1WM0lFRnljbUY1S0Rnd0tWeHVYRzVtZFc1amRHbHZiaUJUYUdFZ0tDa2dlMXh1SUNCMGFHbHpMbWx1YVhRb0tWeHVJQ0IwYUdsekxsOTNJRDBnVjF4dVhHNGdJRWhoYzJndVkyRnNiQ2gwYUdsekxDQTJOQ3dnTlRZcFhHNTlYRzVjYm1sdWFHVnlhWFJ6S0ZOb1lTd2dTR0Z6YUNsY2JseHVVMmhoTG5CeWIzUnZkSGx3WlM1cGJtbDBJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0IwYUdsekxsOWhJRDBnTUhnMk56UTFNak13TVNCOElEQmNiaUFnZEdocGN5NWZZaUE5SURCNFpXWmpaR0ZpT0RrZ2ZDQXdYRzRnSUhSb2FYTXVYMk1nUFNBd2VEazRZbUZrWTJabElId2dNRnh1SUNCMGFHbHpMbDlrSUQwZ01IZ3hNRE15TlRRM05pQjhJREJjYmlBZ2RHaHBjeTVmWlNBOUlEQjRZek5rTW1VeFpqQWdmQ0F3WEc1Y2JpQWdjbVYwZFhKdUlIUm9hWE5jYm4xY2JseHVMeXBjYmlBcUlFSnBkSGRwYzJVZ2NtOTBZWFJsSUdFZ016SXRZbWwwSUc1MWJXSmxjaUIwYnlCMGFHVWdiR1ZtZEM1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnY205c0lDaHVkVzBzSUdOdWRDa2dlMXh1SUNCeVpYUjFjbTRnS0c1MWJTQThQQ0JqYm5RcElId2dLRzUxYlNBK1BqNGdLRE15SUMwZ1kyNTBLU2xjYm4xY2JseHVVMmhoTG5CeWIzUnZkSGx3WlM1ZmRYQmtZWFJsSUQwZ1puVnVZM1JwYjI0Z0tFMHBJSHRjYmlBZ2RtRnlJRmNnUFNCMGFHbHpMbDkzWEc1Y2JpQWdkbUZ5SUdFZ1BTQjBhR2x6TGw5aFhHNGdJSFpoY2lCaUlEMGdkR2hwY3k1ZllseHVJQ0IyWVhJZ1l5QTlJSFJvYVhNdVgyTmNiaUFnZG1GeUlHUWdQU0IwYUdsekxsOWtYRzRnSUhaaGNpQmxJRDBnZEdocGN5NWZaVnh1WEc0Z0lIWmhjaUJxSUQwZ01GeHVJQ0IyWVhJZ2ExeHVYRzRnSUM4cVhHNGdJQ0FxSUZOSVFTMHhJR2hoY3lCaElHSnBkSGRwYzJVZ2NtOTBZWFJsSUd4bFpuUWdiM0JsY21GMGFXOXVMaUJDZFhRc0lGTklRU0JwY3lCdWIzUmNiaUFnSUNvZ1puVnVZM1JwYjI0Z1kyRnNZMWNvS1NCN0lISmxkSFZ5YmlCeWIyd29WMXRxSUMwZ00xMGdYaUJYVzJvZ0xTQWdPRjBnWGlCWFcyb2dMU0F4TkYwZ1hpQlhXMm9nTFNBeE5sMHNJREVwSUgxY2JpQWdJQ292WEc0Z0lHWjFibU4wYVc5dUlHTmhiR05YSUNncElIc2djbVYwZFhKdUlGZGJhaUF0SUROZElGNGdWMXRxSUMwZ09GMGdYaUJYVzJvZ0xTQXhORjBnWGlCWFcyb2dMU0F4TmwwZ2ZWeHVJQ0JtZFc1amRHbHZiaUJzYjI5d0lDaDNMQ0JtS1NCN1hHNGdJQ0FnVjF0cVhTQTlJSGRjYmx4dUlDQWdJSFpoY2lCMElEMGdjbTlzS0dFc0lEVXBJQ3NnWmlBcklHVWdLeUIzSUNzZ2ExeHVYRzRnSUNBZ1pTQTlJR1JjYmlBZ0lDQmtJRDBnWTF4dUlDQWdJR01nUFNCeWIyd29ZaXdnTXpBcFhHNGdJQ0FnWWlBOUlHRmNiaUFnSUNCaElEMGdkRnh1SUNBZ0lHb3JLMXh1SUNCOVhHNWNiaUFnYXlBOUlERTFNVGcxTURBeU5EbGNiaUFnZDJocGJHVWdLR29nUENBeE5pa2diRzl2Y0NoTkxuSmxZV1JKYm5Rek1rSkZLR29nS2lBMEtTd2dLR0lnSmlCaktTQjhJQ2dvZm1JcElDWWdaQ2twWEc0Z0lIZG9hV3hsSUNocUlEd2dNakFwSUd4dmIzQW9ZMkZzWTFjb0tTd2dLR0lnSmlCaktTQjhJQ2dvZm1JcElDWWdaQ2twWEc0Z0lHc2dQU0F4T0RVNU56YzFNemt6WEc0Z0lIZG9hV3hsSUNocUlEd2dOREFwSUd4dmIzQW9ZMkZzWTFjb0tTd2dZaUJlSUdNZ1hpQmtLVnh1SUNCcklEMGdMVEU0T1RRd01EYzFPRGhjYmlBZ2QyaHBiR1VnS0dvZ1BDQTJNQ2tnYkc5dmNDaGpZV3hqVnlncExDQW9ZaUFtSUdNcElId2dLR0lnSmlCa0tTQjhJQ2hqSUNZZ1pDa3BYRzRnSUdzZ1BTQXRPRGs1TkRrM05URTBYRzRnSUhkb2FXeGxJQ2hxSUR3Z09EQXBJR3h2YjNBb1kyRnNZMWNvS1N3Z1lpQmVJR01nWGlCa0tWeHVYRzRnSUhSb2FYTXVYMkVnUFNBb1lTQXJJSFJvYVhNdVgyRXBJSHdnTUZ4dUlDQjBhR2x6TGw5aUlEMGdLR0lnS3lCMGFHbHpMbDlpS1NCOElEQmNiaUFnZEdocGN5NWZZeUE5SUNoaklDc2dkR2hwY3k1Zll5a2dmQ0F3WEc0Z0lIUm9hWE11WDJRZ1BTQW9aQ0FySUhSb2FYTXVYMlFwSUh3Z01GeHVJQ0IwYUdsekxsOWxJRDBnS0dVZ0t5QjBhR2x6TGw5bEtTQjhJREJjYm4xY2JseHVVMmhoTG5CeWIzUnZkSGx3WlM1ZmFHRnphQ0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnZG1GeUlFZ2dQU0J1WlhjZ1FuVm1abVZ5S0RJd0tWeHVYRzRnSUVndWQzSnBkR1ZKYm5Rek1rSkZLSFJvYVhNdVgyRWdmQ0F3TENBd0tWeHVJQ0JJTG5keWFYUmxTVzUwTXpKQ1JTaDBhR2x6TGw5aUlId2dNQ3dnTkNsY2JpQWdTQzUzY21sMFpVbHVkRE15UWtVb2RHaHBjeTVmWXlCOElEQXNJRGdwWEc0Z0lFZ3VkM0pwZEdWSmJuUXpNa0pGS0hSb2FYTXVYMlFnZkNBd0xDQXhNaWxjYmlBZ1NDNTNjbWwwWlVsdWRETXlRa1VvZEdocGN5NWZaU0I4SURBc0lERTJLVnh1WEc0Z0lISmxkSFZ5YmlCSVhHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnVTJoaFhHNWNiaUpkZlE9PSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbi8vIHByb3RvdHlwZSBjbGFzcyBmb3IgaGFzaCBmdW5jdGlvbnNcbmZ1bmN0aW9uIEhhc2ggKGJsb2NrU2l6ZSwgZmluYWxTaXplKSB7XG4gIHRoaXMuX2Jsb2NrID0gbmV3IEJ1ZmZlcihibG9ja1NpemUpXG4gIHRoaXMuX2ZpbmFsU2l6ZSA9IGZpbmFsU2l6ZVxuICB0aGlzLl9ibG9ja1NpemUgPSBibG9ja1NpemVcbiAgdGhpcy5fbGVuID0gMFxuICB0aGlzLl9zID0gMFxufVxuXG5IYXNoLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSwgZW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmMgPSBlbmMgfHwgJ3V0ZjgnXG4gICAgZGF0YSA9IG5ldyBCdWZmZXIoZGF0YSwgZW5jKVxuICB9XG5cbiAgdmFyIGwgPSB0aGlzLl9sZW4gKz0gZGF0YS5sZW5ndGhcbiAgdmFyIHMgPSB0aGlzLl9zIHx8IDBcbiAgdmFyIGYgPSAwXG4gIHZhciBidWZmZXIgPSB0aGlzLl9ibG9ja1xuXG4gIHdoaWxlIChzIDwgbCkge1xuICAgIHZhciB0ID0gTWF0aC5taW4oZGF0YS5sZW5ndGgsIGYgKyB0aGlzLl9ibG9ja1NpemUgLSAocyAlIHRoaXMuX2Jsb2NrU2l6ZSkpXG4gICAgdmFyIGNoID0gKHQgLSBmKVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaDsgaSsrKSB7XG4gICAgICBidWZmZXJbKHMgJSB0aGlzLl9ibG9ja1NpemUpICsgaV0gPSBkYXRhW2kgKyBmXVxuICAgIH1cblxuICAgIHMgKz0gY2hcbiAgICBmICs9IGNoXG5cbiAgICBpZiAoKHMgJSB0aGlzLl9ibG9ja1NpemUpID09PSAwKSB7XG4gICAgICB0aGlzLl91cGRhdGUoYnVmZmVyKVxuICAgIH1cbiAgfVxuICB0aGlzLl9zID0gc1xuXG4gIHJldHVybiB0aGlzXG59XG5cbkhhc2gucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgLy8gU3VwcG9zZSB0aGUgbGVuZ3RoIG9mIHRoZSBtZXNzYWdlIE0sIGluIGJpdHMsIGlzIGxcbiAgdmFyIGwgPSB0aGlzLl9sZW4gKiA4XG5cbiAgLy8gQXBwZW5kIHRoZSBiaXQgMSB0byB0aGUgZW5kIG9mIHRoZSBtZXNzYWdlXG4gIHRoaXMuX2Jsb2NrW3RoaXMuX2xlbiAlIHRoaXMuX2Jsb2NrU2l6ZV0gPSAweDgwXG5cbiAgLy8gYW5kIHRoZW4gayB6ZXJvIGJpdHMsIHdoZXJlIGsgaXMgdGhlIHNtYWxsZXN0IG5vbi1uZWdhdGl2ZSBzb2x1dGlvbiB0byB0aGUgZXF1YXRpb24gKGwgKyAxICsgaykgPT09IGZpbmFsU2l6ZSBtb2QgYmxvY2tTaXplXG4gIHRoaXMuX2Jsb2NrLmZpbGwoMCwgdGhpcy5fbGVuICUgdGhpcy5fYmxvY2tTaXplICsgMSlcblxuICBpZiAobCAlICh0aGlzLl9ibG9ja1NpemUgKiA4KSA+PSB0aGlzLl9maW5hbFNpemUgKiA4KSB7XG4gICAgdGhpcy5fdXBkYXRlKHRoaXMuX2Jsb2NrKVxuICAgIHRoaXMuX2Jsb2NrLmZpbGwoMClcbiAgfVxuXG4gIC8vIHRvIHRoaXMgYXBwZW5kIHRoZSBibG9jayB3aGljaCBpcyBlcXVhbCB0byB0aGUgbnVtYmVyIGwgd3JpdHRlbiBpbiBiaW5hcnlcbiAgLy8gVE9ETzogaGFuZGxlIGNhc2Ugd2hlcmUgbCBpcyA+IE1hdGgucG93KDIsIDI5KVxuICB0aGlzLl9ibG9jay53cml0ZUludDMyQkUobCwgdGhpcy5fYmxvY2tTaXplIC0gNClcblxuICB2YXIgaGFzaCA9IHRoaXMuX3VwZGF0ZSh0aGlzLl9ibG9jaykgfHwgdGhpcy5faGFzaCgpXG5cbiAgcmV0dXJuIGVuYyA/IGhhc2gudG9TdHJpbmcoZW5jKSA6IGhhc2hcbn1cblxuSGFzaC5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdfdXBkYXRlIG11c3QgYmUgaW1wbGVtZW50ZWQgYnkgc3ViY2xhc3MnKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEhhc2hcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZM0psWVhSbExXaGhjMmd2Ym05a1pWOXRiMlIxYkdWekwzTm9ZUzVxY3k5b1lYTm9MbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5OGdjSEp2ZEc5MGVYQmxJR05zWVhOeklHWnZjaUJvWVhOb0lHWjFibU4wYVc5dWMxeHVablZ1WTNScGIyNGdTR0Z6YUNBb1lteHZZMnRUYVhwbExDQm1hVzVoYkZOcGVtVXBJSHRjYmlBZ2RHaHBjeTVmWW14dlkyc2dQU0J1WlhjZ1FuVm1abVZ5S0dKc2IyTnJVMmw2WlNsY2JpQWdkR2hwY3k1ZlptbHVZV3hUYVhwbElEMGdabWx1WVd4VGFYcGxYRzRnSUhSb2FYTXVYMkpzYjJOclUybDZaU0E5SUdKc2IyTnJVMmw2WlZ4dUlDQjBhR2x6TGw5c1pXNGdQU0F3WEc0Z0lIUm9hWE11WDNNZ1BTQXdYRzU5WEc1Y2JraGhjMmd1Y0hKdmRHOTBlWEJsTG5Wd1pHRjBaU0E5SUdaMWJtTjBhVzl1SUNoa1lYUmhMQ0JsYm1NcElIdGNiaUFnYVdZZ0tIUjVjR1Z2WmlCa1lYUmhJRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUdWdVl5QTlJR1Z1WXlCOGZDQW5kWFJtT0NkY2JpQWdJQ0JrWVhSaElEMGdibVYzSUVKMVptWmxjaWhrWVhSaExDQmxibU1wWEc0Z0lIMWNibHh1SUNCMllYSWdiQ0E5SUhSb2FYTXVYMnhsYmlBclBTQmtZWFJoTG14bGJtZDBhRnh1SUNCMllYSWdjeUE5SUhSb2FYTXVYM01nZkh3Z01GeHVJQ0IyWVhJZ1ppQTlJREJjYmlBZ2RtRnlJR0oxWm1abGNpQTlJSFJvYVhNdVgySnNiMk5yWEc1Y2JpQWdkMmhwYkdVZ0tITWdQQ0JzS1NCN1hHNGdJQ0FnZG1GeUlIUWdQU0JOWVhSb0xtMXBiaWhrWVhSaExteGxibWQwYUN3Z1ppQXJJSFJvYVhNdVgySnNiMk5yVTJsNlpTQXRJQ2h6SUNVZ2RHaHBjeTVmWW14dlkydFRhWHBsS1NsY2JpQWdJQ0IyWVhJZ1kyZ2dQU0FvZENBdElHWXBYRzVjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR05vT3lCcEt5c3BJSHRjYmlBZ0lDQWdJR0oxWm1abGNsc29jeUFsSUhSb2FYTXVYMkpzYjJOclUybDZaU2tnS3lCcFhTQTlJR1JoZEdGYmFTQXJJR1pkWEc0Z0lDQWdmVnh1WEc0Z0lDQWdjeUFyUFNCamFGeHVJQ0FnSUdZZ0t6MGdZMmhjYmx4dUlDQWdJR2xtSUNnb2N5QWxJSFJvYVhNdVgySnNiMk5yVTJsNlpTa2dQVDA5SURBcElIdGNiaUFnSUNBZ0lIUm9hWE11WDNWd1pHRjBaU2hpZFdabVpYSXBYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lIUm9hWE11WDNNZ1BTQnpYRzVjYmlBZ2NtVjBkWEp1SUhSb2FYTmNibjFjYmx4dVNHRnphQzV3Y205MGIzUjVjR1V1WkdsblpYTjBJRDBnWm5WdVkzUnBiMjRnS0dWdVl5a2dlMXh1SUNBdkx5QlRkWEJ3YjNObElIUm9aU0JzWlc1bmRHZ2diMllnZEdobElHMWxjM05oWjJVZ1RTd2dhVzRnWW1sMGN5d2dhWE1nYkZ4dUlDQjJZWElnYkNBOUlIUm9hWE11WDJ4bGJpQXFJRGhjYmx4dUlDQXZMeUJCY0hCbGJtUWdkR2hsSUdKcGRDQXhJSFJ2SUhSb1pTQmxibVFnYjJZZ2RHaGxJRzFsYzNOaFoyVmNiaUFnZEdocGN5NWZZbXh2WTJ0YmRHaHBjeTVmYkdWdUlDVWdkR2hwY3k1ZllteHZZMnRUYVhwbFhTQTlJREI0T0RCY2JseHVJQ0F2THlCaGJtUWdkR2hsYmlCcklIcGxjbThnWW1sMGN5d2dkMmhsY21VZ2F5QnBjeUIwYUdVZ2MyMWhiR3hsYzNRZ2JtOXVMVzVsWjJGMGFYWmxJSE52YkhWMGFXOXVJSFJ2SUhSb1pTQmxjWFZoZEdsdmJpQW9iQ0FySURFZ0t5QnJLU0E5UFQwZ1ptbHVZV3hUYVhwbElHMXZaQ0JpYkc5amExTnBlbVZjYmlBZ2RHaHBjeTVmWW14dlkyc3VabWxzYkNnd0xDQjBhR2x6TGw5c1pXNGdKU0IwYUdsekxsOWliRzlqYTFOcGVtVWdLeUF4S1Z4dVhHNGdJR2xtSUNoc0lDVWdLSFJvYVhNdVgySnNiMk5yVTJsNlpTQXFJRGdwSUQ0OUlIUm9hWE11WDJacGJtRnNVMmw2WlNBcUlEZ3BJSHRjYmlBZ0lDQjBhR2x6TGw5MWNHUmhkR1VvZEdocGN5NWZZbXh2WTJzcFhHNGdJQ0FnZEdocGN5NWZZbXh2WTJzdVptbHNiQ2d3S1Z4dUlDQjlYRzVjYmlBZ0x5OGdkRzhnZEdocGN5QmhjSEJsYm1RZ2RHaGxJR0pzYjJOcklIZG9hV05vSUdseklHVnhkV0ZzSUhSdklIUm9aU0J1ZFcxaVpYSWdiQ0IzY21sMGRHVnVJR2x1SUdKcGJtRnllVnh1SUNBdkx5QlVUMFJQT2lCb1lXNWtiR1VnWTJGelpTQjNhR1Z5WlNCc0lHbHpJRDRnVFdGMGFDNXdiM2NvTWl3Z01qa3BYRzRnSUhSb2FYTXVYMkpzYjJOckxuZHlhWFJsU1c1ME16SkNSU2hzTENCMGFHbHpMbDlpYkc5amExTnBlbVVnTFNBMEtWeHVYRzRnSUhaaGNpQm9ZWE5vSUQwZ2RHaHBjeTVmZFhCa1lYUmxLSFJvYVhNdVgySnNiMk5yS1NCOGZDQjBhR2x6TGw5b1lYTm9LQ2xjYmx4dUlDQnlaWFIxY200Z1pXNWpJRDhnYUdGemFDNTBiMU4wY21sdVp5aGxibU1wSURvZ2FHRnphRnh1ZlZ4dVhHNUlZWE5vTG5CeWIzUnZkSGx3WlM1ZmRYQmtZWFJsSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjE5MWNHUmhkR1VnYlhWemRDQmlaU0JwYlhCc1pXMWxiblJsWkNCaWVTQnpkV0pqYkdGemN5Y3BYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1NHRnphRnh1SWwxOSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbi8qXG5DcnlwdG9KUyB2My4xLjJcbmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qc1xuKGMpIDIwMDktMjAxMyBieSBKZWZmIE1vdHQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMvd2lraS9MaWNlbnNlXG4qL1xuLyoqIEBwcmVzZXJ2ZVxuKGMpIDIwMTIgYnkgQ8OpZHJpYyBNZXNuaWwuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cblJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcblxuICAgIC0gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICAgIC0gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuXG5USElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG4vLyBjb25zdGFudHMgdGFibGVcbnZhciB6bCA9IFtcbiAgMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSxcbiAgNywgNCwgMTMsIDEsIDEwLCA2LCAxNSwgMywgMTIsIDAsIDksIDUsIDIsIDE0LCAxMSwgOCxcbiAgMywgMTAsIDE0LCA0LCA5LCAxNSwgOCwgMSwgMiwgNywgMCwgNiwgMTMsIDExLCA1LCAxMixcbiAgMSwgOSwgMTEsIDEwLCAwLCA4LCAxMiwgNCwgMTMsIDMsIDcsIDE1LCAxNCwgNSwgNiwgMixcbiAgNCwgMCwgNSwgOSwgNywgMTIsIDIsIDEwLCAxNCwgMSwgMywgOCwgMTEsIDYsIDE1LCAxM1xuXVxuXG52YXIgenIgPSBbXG4gIDUsIDE0LCA3LCAwLCA5LCAyLCAxMSwgNCwgMTMsIDYsIDE1LCA4LCAxLCAxMCwgMywgMTIsXG4gIDYsIDExLCAzLCA3LCAwLCAxMywgNSwgMTAsIDE0LCAxNSwgOCwgMTIsIDQsIDksIDEsIDIsXG4gIDE1LCA1LCAxLCAzLCA3LCAxNCwgNiwgOSwgMTEsIDgsIDEyLCAyLCAxMCwgMCwgNCwgMTMsXG4gIDgsIDYsIDQsIDEsIDMsIDExLCAxNSwgMCwgNSwgMTIsIDIsIDEzLCA5LCA3LCAxMCwgMTQsXG4gIDEyLCAxNSwgMTAsIDQsIDEsIDUsIDgsIDcsIDYsIDIsIDEzLCAxNCwgMCwgMywgOSwgMTFcbl1cblxudmFyIHNsID0gW1xuICAxMSwgMTQsIDE1LCAxMiwgNSwgOCwgNywgOSwgMTEsIDEzLCAxNCwgMTUsIDYsIDcsIDksIDgsXG4gIDcsIDYsIDgsIDEzLCAxMSwgOSwgNywgMTUsIDcsIDEyLCAxNSwgOSwgMTEsIDcsIDEzLCAxMixcbiAgMTEsIDEzLCA2LCA3LCAxNCwgOSwgMTMsIDE1LCAxNCwgOCwgMTMsIDYsIDUsIDEyLCA3LCA1LFxuICAxMSwgMTIsIDE0LCAxNSwgMTQsIDE1LCA5LCA4LCA5LCAxNCwgNSwgNiwgOCwgNiwgNSwgMTIsXG4gIDksIDE1LCA1LCAxMSwgNiwgOCwgMTMsIDEyLCA1LCAxMiwgMTMsIDE0LCAxMSwgOCwgNSwgNlxuXVxuXG52YXIgc3IgPSBbXG4gIDgsIDksIDksIDExLCAxMywgMTUsIDE1LCA1LCA3LCA3LCA4LCAxMSwgMTQsIDE0LCAxMiwgNixcbiAgOSwgMTMsIDE1LCA3LCAxMiwgOCwgOSwgMTEsIDcsIDcsIDEyLCA3LCA2LCAxNSwgMTMsIDExLFxuICA5LCA3LCAxNSwgMTEsIDgsIDYsIDYsIDE0LCAxMiwgMTMsIDUsIDE0LCAxMywgMTMsIDcsIDUsXG4gIDE1LCA1LCA4LCAxMSwgMTQsIDE0LCA2LCAxNCwgNiwgOSwgMTIsIDksIDEyLCA1LCAxNSwgOCxcbiAgOCwgNSwgMTIsIDksIDEyLCA1LCAxNCwgNiwgOCwgMTMsIDYsIDUsIDE1LCAxMywgMTEsIDExXG5dXG5cbnZhciBobCA9IFsweDAwMDAwMDAwLCAweDVBODI3OTk5LCAweDZFRDlFQkExLCAweDhGMUJCQ0RDLCAweEE5NTNGRDRFXVxudmFyIGhyID0gWzB4NTBBMjhCRTYsIDB4NUM0REQxMjQsIDB4NkQ3MDNFRjMsIDB4N0E2RDc2RTksIDB4MDAwMDAwMDBdXG5cbmZ1bmN0aW9uIGJ5dGVzVG9Xb3JkcyAoYnl0ZXMpIHtcbiAgdmFyIHdvcmRzID0gW11cbiAgZm9yICh2YXIgaSA9IDAsIGIgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyssIGIgKz0gOCkge1xuICAgIHdvcmRzW2IgPj4+IDVdIHw9IGJ5dGVzW2ldIDw8ICgyNCAtIGIgJSAzMilcbiAgfVxuICByZXR1cm4gd29yZHNcbn1cblxuZnVuY3Rpb24gd29yZHNUb0J5dGVzICh3b3Jkcykge1xuICB2YXIgYnl0ZXMgPSBbXVxuICBmb3IgKHZhciBiID0gMDsgYiA8IHdvcmRzLmxlbmd0aCAqIDMyOyBiICs9IDgpIHtcbiAgICBieXRlcy5wdXNoKCh3b3Jkc1tiID4+PiA1XSA+Pj4gKDI0IC0gYiAlIDMyKSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzQmxvY2sgKEgsIE0sIG9mZnNldCkge1xuICAvLyBzd2FwIGVuZGlhblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICB2YXIgb2Zmc2V0X2kgPSBvZmZzZXQgKyBpXG4gICAgdmFyIE1fb2Zmc2V0X2kgPSBNW29mZnNldF9pXVxuXG4gICAgLy8gU3dhcFxuICAgIE1bb2Zmc2V0X2ldID0gKFxuICAgICAgKCgoTV9vZmZzZXRfaSA8PCA4KSB8IChNX29mZnNldF9pID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuICAgICAgKCgoTV9vZmZzZXRfaSA8PCAyNCkgfCAoTV9vZmZzZXRfaSA+Pj4gOCkpICYgMHhmZjAwZmYwMClcbiAgICApXG4gIH1cblxuICAvLyBXb3JraW5nIHZhcmlhYmxlc1xuICB2YXIgYWwsIGJsLCBjbCwgZGwsIGVsXG4gIHZhciBhciwgYnIsIGNyLCBkciwgZXJcblxuICBhciA9IGFsID0gSFswXVxuICBiciA9IGJsID0gSFsxXVxuICBjciA9IGNsID0gSFsyXVxuICBkciA9IGRsID0gSFszXVxuICBlciA9IGVsID0gSFs0XVxuXG4gIC8vIGNvbXB1dGF0aW9uXG4gIHZhciB0XG4gIGZvciAoaSA9IDA7IGkgPCA4MDsgaSArPSAxKSB7XG4gICAgdCA9IChhbCArIE1bb2Zmc2V0ICsgemxbaV1dKSB8IDBcbiAgICBpZiAoaSA8IDE2KSB7XG4gICAgICB0ICs9IGYxKGJsLCBjbCwgZGwpICsgaGxbMF1cbiAgICB9IGVsc2UgaWYgKGkgPCAzMikge1xuICAgICAgdCArPSBmMihibCwgY2wsIGRsKSArIGhsWzFdXG4gICAgfSBlbHNlIGlmIChpIDwgNDgpIHtcbiAgICAgIHQgKz0gZjMoYmwsIGNsLCBkbCkgKyBobFsyXVxuICAgIH0gZWxzZSBpZiAoaSA8IDY0KSB7XG4gICAgICB0ICs9IGY0KGJsLCBjbCwgZGwpICsgaGxbM11cbiAgICB9IGVsc2Ugey8vIGlmIChpPDgwKSB7XG4gICAgICB0ICs9IGY1KGJsLCBjbCwgZGwpICsgaGxbNF1cbiAgICB9XG4gICAgdCA9IHQgfCAwXG4gICAgdCA9IHJvdGwodCwgc2xbaV0pXG4gICAgdCA9ICh0ICsgZWwpIHwgMFxuICAgIGFsID0gZWxcbiAgICBlbCA9IGRsXG4gICAgZGwgPSByb3RsKGNsLCAxMClcbiAgICBjbCA9IGJsXG4gICAgYmwgPSB0XG5cbiAgICB0ID0gKGFyICsgTVtvZmZzZXQgKyB6cltpXV0pIHwgMFxuICAgIGlmIChpIDwgMTYpIHtcbiAgICAgIHQgKz0gZjUoYnIsIGNyLCBkcikgKyBoclswXVxuICAgIH0gZWxzZSBpZiAoaSA8IDMyKSB7XG4gICAgICB0ICs9IGY0KGJyLCBjciwgZHIpICsgaHJbMV1cbiAgICB9IGVsc2UgaWYgKGkgPCA0OCkge1xuICAgICAgdCArPSBmMyhiciwgY3IsIGRyKSArIGhyWzJdXG4gICAgfSBlbHNlIGlmIChpIDwgNjQpIHtcbiAgICAgIHQgKz0gZjIoYnIsIGNyLCBkcikgKyBoclszXVxuICAgIH0gZWxzZSB7Ly8gaWYgKGk8ODApIHtcbiAgICAgIHQgKz0gZjEoYnIsIGNyLCBkcikgKyBocls0XVxuICAgIH1cblxuICAgIHQgPSB0IHwgMFxuICAgIHQgPSByb3RsKHQsIHNyW2ldKVxuICAgIHQgPSAodCArIGVyKSB8IDBcbiAgICBhciA9IGVyXG4gICAgZXIgPSBkclxuICAgIGRyID0gcm90bChjciwgMTApXG4gICAgY3IgPSBiclxuICAgIGJyID0gdFxuICB9XG5cbiAgLy8gaW50ZXJtZWRpYXRlIGhhc2ggdmFsdWVcbiAgdCA9IChIWzFdICsgY2wgKyBkcikgfCAwXG4gIEhbMV0gPSAoSFsyXSArIGRsICsgZXIpIHwgMFxuICBIWzJdID0gKEhbM10gKyBlbCArIGFyKSB8IDBcbiAgSFszXSA9IChIWzRdICsgYWwgKyBicikgfCAwXG4gIEhbNF0gPSAoSFswXSArIGJsICsgY3IpIHwgMFxuICBIWzBdID0gdFxufVxuXG5mdW5jdGlvbiBmMSAoeCwgeSwgeikge1xuICByZXR1cm4gKCh4KSBeICh5KSBeICh6KSlcbn1cblxuZnVuY3Rpb24gZjIgKHgsIHksIHopIHtcbiAgcmV0dXJuICgoKHgpICYgKHkpKSB8ICgofngpICYgKHopKSlcbn1cblxuZnVuY3Rpb24gZjMgKHgsIHksIHopIHtcbiAgcmV0dXJuICgoKHgpIHwgKH4oeSkpKSBeICh6KSlcbn1cblxuZnVuY3Rpb24gZjQgKHgsIHksIHopIHtcbiAgcmV0dXJuICgoKHgpICYgKHopKSB8ICgoeSkgJiAofih6KSkpKVxufVxuXG5mdW5jdGlvbiBmNSAoeCwgeSwgeikge1xuICByZXR1cm4gKCh4KSBeICgoeSkgfCAofih6KSkpKVxufVxuXG5mdW5jdGlvbiByb3RsICh4LCBuKSB7XG4gIHJldHVybiAoeCA8PCBuKSB8ICh4ID4+PiAoMzIgLSBuKSlcbn1cblxuZnVuY3Rpb24gcmlwZW1kMTYwIChtZXNzYWdlKSB7XG4gIHZhciBIID0gWzB4Njc0NTIzMDEsIDB4RUZDREFCODksIDB4OThCQURDRkUsIDB4MTAzMjU0NzYsIDB4QzNEMkUxRjBdXG5cbiAgaWYgKHR5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJykge1xuICAgIG1lc3NhZ2UgPSBuZXcgQnVmZmVyKG1lc3NhZ2UsICd1dGY4JylcbiAgfVxuXG4gIHZhciBtID0gYnl0ZXNUb1dvcmRzKG1lc3NhZ2UpXG5cbiAgdmFyIG5CaXRzTGVmdCA9IG1lc3NhZ2UubGVuZ3RoICogOFxuICB2YXIgbkJpdHNUb3RhbCA9IG1lc3NhZ2UubGVuZ3RoICogOFxuXG4gIC8vIEFkZCBwYWRkaW5nXG4gIG1bbkJpdHNMZWZ0ID4+PiA1XSB8PSAweDgwIDw8ICgyNCAtIG5CaXRzTGVmdCAlIDMyKVxuICBtWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNF0gPSAoXG4gICAgKCgobkJpdHNUb3RhbCA8PCA4KSB8IChuQml0c1RvdGFsID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuICAgICgoKG5CaXRzVG90YWwgPDwgMjQpIHwgKG5CaXRzVG90YWwgPj4+IDgpKSAmIDB4ZmYwMGZmMDApXG4gIClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG0ubGVuZ3RoOyBpICs9IDE2KSB7XG4gICAgcHJvY2Vzc0Jsb2NrKEgsIG0sIGkpXG4gIH1cblxuICAvLyBzd2FwIGVuZGlhblxuICBmb3IgKGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgLy8gc2hvcnRjdXRcbiAgICB2YXIgSF9pID0gSFtpXVxuXG4gICAgLy8gU3dhcFxuICAgIEhbaV0gPSAoKChIX2kgPDwgOCkgfCAoSF9pID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuICAgICAgKCgoSF9pIDw8IDI0KSB8IChIX2kgPj4+IDgpKSAmIDB4ZmYwMGZmMDApXG4gIH1cblxuICB2YXIgZGlnZXN0Ynl0ZXMgPSB3b3Jkc1RvQnl0ZXMoSClcbiAgcmV0dXJuIG5ldyBCdWZmZXIoZGlnZXN0Ynl0ZXMpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmlwZW1kMTYwXG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WTNKbFlYUmxMV2hoYzJndmJtOWtaVjl0YjJSMWJHVnpMM0pwY0dWdFpERTJNQzlzYVdJdmNtbHdaVzFrTVRZd0xtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5cGNia055ZVhCMGIwcFRJSFl6TGpFdU1seHVZMjlrWlM1bmIyOW5iR1V1WTI5dEwzQXZZM0o1Y0hSdkxXcHpYRzRvWXlrZ01qQXdPUzB5TURFeklHSjVJRXBsWm1ZZ1RXOTBkQzRnUVd4c0lISnBaMmgwY3lCeVpYTmxjblpsWkM1Y2JtTnZaR1V1WjI5dloyeGxMbU52YlM5d0wyTnllWEIwYnkxcWN5OTNhV3RwTDB4cFkyVnVjMlZjYmlvdlhHNHZLaW9nUUhCeVpYTmxjblpsWEc0b1l5a2dNakF4TWlCaWVTQkR3NmxrY21saklFMWxjMjVwYkM0Z1FXeHNJSEpwWjJoMGN5QnlaWE5sY25abFpDNWNibHh1VW1Wa2FYTjBjbWxpZFhScGIyNGdZVzVrSUhWelpTQnBiaUJ6YjNWeVkyVWdZVzVrSUdKcGJtRnllU0JtYjNKdGN5d2dkMmwwYUNCdmNpQjNhWFJvYjNWMElHMXZaR2xtYVdOaGRHbHZiaXdnWVhKbElIQmxjbTFwZEhSbFpDQndjbTkyYVdSbFpDQjBhR0YwSUhSb1pTQm1iMnhzYjNkcGJtY2dZMjl1WkdsMGFXOXVjeUJoY21VZ2JXVjBPbHh1WEc0Z0lDQWdMU0JTWldScGMzUnlhV0oxZEdsdmJuTWdiMllnYzI5MWNtTmxJR052WkdVZ2JYVnpkQ0J5WlhSaGFXNGdkR2hsSUdGaWIzWmxJR052Y0hseWFXZG9kQ0J1YjNScFkyVXNJSFJvYVhNZ2JHbHpkQ0J2WmlCamIyNWthWFJwYjI1eklHRnVaQ0IwYUdVZ1ptOXNiRzkzYVc1bklHUnBjMk5zWVdsdFpYSXVYRzRnSUNBZ0xTQlNaV1JwYzNSeWFXSjFkR2x2Ym5NZ2FXNGdZbWx1WVhKNUlHWnZjbTBnYlhWemRDQnlaWEJ5YjJSMVkyVWdkR2hsSUdGaWIzWmxJR052Y0hseWFXZG9kQ0J1YjNScFkyVXNJSFJvYVhNZ2JHbHpkQ0J2WmlCamIyNWthWFJwYjI1eklHRnVaQ0IwYUdVZ1ptOXNiRzkzYVc1bklHUnBjMk5zWVdsdFpYSWdhVzRnZEdobElHUnZZM1Z0Wlc1MFlYUnBiMjRnWVc1a0wyOXlJRzkwYUdWeUlHMWhkR1Z5YVdGc2N5QndjbTkyYVdSbFpDQjNhWFJvSUhSb1pTQmthWE4wY21saWRYUnBiMjR1WEc1Y2JsUklTVk1nVTA5R1ZGZEJVa1VnU1ZNZ1VGSlBWa2xFUlVRZ1Fsa2dWRWhGSUVOUFVGbFNTVWRJVkNCSVQweEVSVkpUSUVGT1JDQkRUMDVVVWtsQ1ZWUlBVbE1nWENKQlV5QkpVMXdpSUVGT1JDQkJUbGtnUlZoUVVrVlRVeUJQVWlCSlRWQk1TVVZFSUZkQlVsSkJUbFJKUlZNc0lFbE9RMHhWUkVsT1J5d2dRbFZVSUU1UFZDQk1TVTFKVkVWRUlGUlBMQ0JVU0VVZ1NVMVFURWxGUkNCWFFWSlNRVTVVU1VWVElFOUdJRTFGVWtOSVFVNVVRVUpKVEVsVVdTQkJUa1FnUmtsVVRrVlRVeUJHVDFJZ1FTQlFRVkpVU1VOVlRFRlNJRkJWVWxCUFUwVWdRVkpGSUVSSlUwTk1RVWxOUlVRdUlFbE9JRTVQSUVWV1JVNVVJRk5JUVV4TUlGUklSU0JEVDFCWlVrbEhTRlFnU0U5TVJFVlNJRTlTSUVOUFRsUlNTVUpWVkU5U1V5QkNSU0JNU1VGQ1RFVWdSazlTSUVGT1dTQkVTVkpGUTFRc0lFbE9SRWxTUlVOVUxDQkpUa05KUkVWT1ZFRk1MQ0JUVUVWRFNVRk1MQ0JGV0VWTlVFeEJVbGtzSUU5U0lFTlBUbE5GVVZWRlRsUkpRVXdnUkVGTlFVZEZVeUFvU1U1RFRGVkVTVTVITENCQ1ZWUWdUazlVSUV4SlRVbFVSVVFnVkU4c0lGQlNUME5WVWtWTlJVNVVJRTlHSUZOVlFsTlVTVlJWVkVVZ1IwOVBSRk1nVDFJZ1UwVlNWa2xEUlZNN0lFeFBVMU1nVDBZZ1ZWTkZMQ0JFUVZSQkxDQlBVaUJRVWs5R1NWUlRPeUJQVWlCQ1ZWTkpUa1ZUVXlCSlRsUkZVbEpWVUZSSlQwNHBJRWhQVjBWV1JWSWdRMEZWVTBWRUlFRk9SQ0JQVGlCQlRsa2dWRWhGVDFKWklFOUdJRXhKUVVKSlRFbFVXU3dnVjBoRlZFaEZVaUJKVGlCRFQwNVVVa0ZEVkN3Z1UxUlNTVU5VSUV4SlFVSkpURWxVV1N3Z1QxSWdWRTlTVkNBb1NVNURURlZFU1U1SElFNUZSMHhKUjBWT1EwVWdUMUlnVDFSSVJWSlhTVk5GS1NCQlVrbFRTVTVISUVsT0lFRk9XU0JYUVZrZ1QxVlVJRTlHSUZSSVJTQlZVMFVnVDBZZ1ZFaEpVeUJUVDBaVVYwRlNSU3dnUlZaRlRpQkpSaUJCUkZaSlUwVkVJRTlHSUZSSVJTQlFUMU5UU1VKSlRFbFVXU0JQUmlCVFZVTklJRVJCVFVGSFJTNWNiaW92WEc1Y2JpOHZJR052Ym5OMFlXNTBjeUIwWVdKc1pWeHVkbUZ5SUhwc0lEMGdXMXh1SUNBd0xDQXhMQ0F5TENBekxDQTBMQ0ExTENBMkxDQTNMQ0E0TENBNUxDQXhNQ3dnTVRFc0lERXlMQ0F4TXl3Z01UUXNJREUxTEZ4dUlDQTNMQ0EwTENBeE15d2dNU3dnTVRBc0lEWXNJREUxTENBekxDQXhNaXdnTUN3Z09Td2dOU3dnTWl3Z01UUXNJREV4TENBNExGeHVJQ0F6TENBeE1Dd2dNVFFzSURRc0lEa3NJREUxTENBNExDQXhMQ0F5TENBM0xDQXdMQ0EyTENBeE15d2dNVEVzSURVc0lERXlMRnh1SUNBeExDQTVMQ0F4TVN3Z01UQXNJREFzSURnc0lERXlMQ0EwTENBeE15d2dNeXdnTnl3Z01UVXNJREUwTENBMUxDQTJMQ0F5TEZ4dUlDQTBMQ0F3TENBMUxDQTVMQ0EzTENBeE1pd2dNaXdnTVRBc0lERTBMQ0F4TENBekxDQTRMQ0F4TVN3Z05pd2dNVFVzSURFelhHNWRYRzVjYm5aaGNpQjZjaUE5SUZ0Y2JpQWdOU3dnTVRRc0lEY3NJREFzSURrc0lESXNJREV4TENBMExDQXhNeXdnTml3Z01UVXNJRGdzSURFc0lERXdMQ0F6TENBeE1peGNiaUFnTml3Z01URXNJRE1zSURjc0lEQXNJREV6TENBMUxDQXhNQ3dnTVRRc0lERTFMQ0E0TENBeE1pd2dOQ3dnT1N3Z01Td2dNaXhjYmlBZ01UVXNJRFVzSURFc0lETXNJRGNzSURFMExDQTJMQ0E1TENBeE1Td2dPQ3dnTVRJc0lESXNJREV3TENBd0xDQTBMQ0F4TXl4Y2JpQWdPQ3dnTml3Z05Dd2dNU3dnTXl3Z01URXNJREUxTENBd0xDQTFMQ0F4TWl3Z01pd2dNVE1zSURrc0lEY3NJREV3TENBeE5DeGNiaUFnTVRJc0lERTFMQ0F4TUN3Z05Dd2dNU3dnTlN3Z09Dd2dOeXdnTml3Z01pd2dNVE1zSURFMExDQXdMQ0F6TENBNUxDQXhNVnh1WFZ4dVhHNTJZWElnYzJ3Z1BTQmJYRzRnSURFeExDQXhOQ3dnTVRVc0lERXlMQ0ExTENBNExDQTNMQ0E1TENBeE1Td2dNVE1zSURFMExDQXhOU3dnTml3Z055d2dPU3dnT0N4Y2JpQWdOeXdnTml3Z09Dd2dNVE1zSURFeExDQTVMQ0EzTENBeE5Td2dOeXdnTVRJc0lERTFMQ0E1TENBeE1Td2dOeXdnTVRNc0lERXlMRnh1SUNBeE1Td2dNVE1zSURZc0lEY3NJREUwTENBNUxDQXhNeXdnTVRVc0lERTBMQ0E0TENBeE15d2dOaXdnTlN3Z01USXNJRGNzSURVc1hHNGdJREV4TENBeE1pd2dNVFFzSURFMUxDQXhOQ3dnTVRVc0lEa3NJRGdzSURrc0lERTBMQ0ExTENBMkxDQTRMQ0EyTENBMUxDQXhNaXhjYmlBZ09Td2dNVFVzSURVc0lERXhMQ0EyTENBNExDQXhNeXdnTVRJc0lEVXNJREV5TENBeE15d2dNVFFzSURFeExDQTRMQ0ExTENBMlhHNWRYRzVjYm5aaGNpQnpjaUE5SUZ0Y2JpQWdPQ3dnT1N3Z09Td2dNVEVzSURFekxDQXhOU3dnTVRVc0lEVXNJRGNzSURjc0lEZ3NJREV4TENBeE5Dd2dNVFFzSURFeUxDQTJMRnh1SUNBNUxDQXhNeXdnTVRVc0lEY3NJREV5TENBNExDQTVMQ0F4TVN3Z055d2dOeXdnTVRJc0lEY3NJRFlzSURFMUxDQXhNeXdnTVRFc1hHNGdJRGtzSURjc0lERTFMQ0F4TVN3Z09Dd2dOaXdnTml3Z01UUXNJREV5TENBeE15d2dOU3dnTVRRc0lERXpMQ0F4TXl3Z055d2dOU3hjYmlBZ01UVXNJRFVzSURnc0lERXhMQ0F4TkN3Z01UUXNJRFlzSURFMExDQTJMQ0E1TENBeE1pd2dPU3dnTVRJc0lEVXNJREUxTENBNExGeHVJQ0E0TENBMUxDQXhNaXdnT1N3Z01USXNJRFVzSURFMExDQTJMQ0E0TENBeE15d2dOaXdnTlN3Z01UVXNJREV6TENBeE1Td2dNVEZjYmwxY2JseHVkbUZ5SUdoc0lEMGdXekI0TURBd01EQXdNREFzSURCNE5VRTRNamM1T1Rrc0lEQjROa1ZFT1VWQ1FURXNJREI0T0VZeFFrSkRSRU1zSURCNFFUazFNMFpFTkVWZFhHNTJZWElnYUhJZ1BTQmJNSGcxTUVFeU9FSkZOaXdnTUhnMVF6UkVSREV5TkN3Z01IZzJSRGN3TTBWR015d2dNSGczUVRaRU56WkZPU3dnTUhnd01EQXdNREF3TUYxY2JseHVablZ1WTNScGIyNGdZbmwwWlhOVWIxZHZjbVJ6SUNoaWVYUmxjeWtnZTF4dUlDQjJZWElnZDI5eVpITWdQU0JiWFZ4dUlDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z1lpQTlJREE3SUdrZ1BDQmllWFJsY3k1c1pXNW5kR2c3SUdrckt5d2dZaUFyUFNBNEtTQjdYRzRnSUNBZ2QyOXlaSE5iWWlBK1BqNGdOVjBnZkQwZ1lubDBaWE5iYVYwZ1BEd2dLREkwSUMwZ1lpQWxJRE15S1Z4dUlDQjlYRzRnSUhKbGRIVnliaUIzYjNKa2MxeHVmVnh1WEc1bWRXNWpkR2x2YmlCM2IzSmtjMVJ2UW5sMFpYTWdLSGR2Y21SektTQjdYRzRnSUhaaGNpQmllWFJsY3lBOUlGdGRYRzRnSUdadmNpQW9kbUZ5SUdJZ1BTQXdPeUJpSUR3Z2QyOXlaSE11YkdWdVozUm9JQ29nTXpJN0lHSWdLejBnT0NrZ2UxeHVJQ0FnSUdKNWRHVnpMbkIxYzJnb0tIZHZjbVJ6VzJJZ1BqNCtJRFZkSUQ0K1BpQW9NalFnTFNCaUlDVWdNeklwS1NBbUlEQjRSa1lwWEc0Z0lIMWNiaUFnY21WMGRYSnVJR0o1ZEdWelhHNTlYRzVjYm1aMWJtTjBhVzl1SUhCeWIyTmxjM05DYkc5amF5QW9TQ3dnVFN3Z2IyWm1jMlYwS1NCN1hHNGdJQzh2SUhOM1lYQWdaVzVrYVdGdVhHNGdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnTVRZN0lHa3JLeWtnZTF4dUlDQWdJSFpoY2lCdlptWnpaWFJmYVNBOUlHOW1abk5sZENBcklHbGNiaUFnSUNCMllYSWdUVjl2Wm1aelpYUmZhU0E5SUUxYmIyWm1jMlYwWDJsZFhHNWNiaUFnSUNBdkx5QlRkMkZ3WEc0Z0lDQWdUVnR2Wm1aelpYUmZhVjBnUFNBb1hHNGdJQ0FnSUNBb0tDaE5YMjltWm5ObGRGOXBJRHc4SURncElId2dLRTFmYjJabWMyVjBYMmtnUGo0K0lESTBLU2tnSmlBd2VEQXdabVl3TUdabUtTQjhYRzRnSUNBZ0lDQW9LQ2hOWDI5bVpuTmxkRjlwSUR3OElESTBLU0I4SUNoTlgyOW1abk5sZEY5cElENCtQaUE0S1NrZ0ppQXdlR1ptTURCbVpqQXdLVnh1SUNBZ0lDbGNiaUFnZlZ4dVhHNGdJQzh2SUZkdmNtdHBibWNnZG1GeWFXRmliR1Z6WEc0Z0lIWmhjaUJoYkN3Z1ltd3NJR05zTENCa2JDd2daV3hjYmlBZ2RtRnlJR0Z5TENCaWNpd2dZM0lzSUdSeUxDQmxjbHh1WEc0Z0lHRnlJRDBnWVd3Z1BTQklXekJkWEc0Z0lHSnlJRDBnWW13Z1BTQklXekZkWEc0Z0lHTnlJRDBnWTJ3Z1BTQklXekpkWEc0Z0lHUnlJRDBnWkd3Z1BTQklXek5kWEc0Z0lHVnlJRDBnWld3Z1BTQklXelJkWEc1Y2JpQWdMeThnWTI5dGNIVjBZWFJwYjI1Y2JpQWdkbUZ5SUhSY2JpQWdabTl5SUNocElEMGdNRHNnYVNBOElEZ3dPeUJwSUNzOUlERXBJSHRjYmlBZ0lDQjBJRDBnS0dGc0lDc2dUVnR2Wm1aelpYUWdLeUI2YkZ0cFhWMHBJSHdnTUZ4dUlDQWdJR2xtSUNocElEd2dNVFlwSUh0Y2JpQWdJQ0FnSUhRZ0t6MGdaakVvWW13c0lHTnNMQ0JrYkNrZ0t5Qm9iRnN3WFZ4dUlDQWdJSDBnWld4elpTQnBaaUFvYVNBOElETXlLU0I3WEc0Z0lDQWdJQ0IwSUNzOUlHWXlLR0pzTENCamJDd2daR3dwSUNzZ2FHeGJNVjFjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLR2tnUENBME9Da2dlMXh1SUNBZ0lDQWdkQ0FyUFNCbU15aGliQ3dnWTJ3c0lHUnNLU0FySUdoc1d6SmRYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaHBJRHdnTmpRcElIdGNiaUFnSUNBZ0lIUWdLejBnWmpRb1ltd3NJR05zTENCa2JDa2dLeUJvYkZzelhWeHVJQ0FnSUgwZ1pXeHpaU0I3THk4Z2FXWWdLR2s4T0RBcElIdGNiaUFnSUNBZ0lIUWdLejBnWmpVb1ltd3NJR05zTENCa2JDa2dLeUJvYkZzMFhWeHVJQ0FnSUgxY2JpQWdJQ0IwSUQwZ2RDQjhJREJjYmlBZ0lDQjBJRDBnY205MGJDaDBMQ0J6YkZ0cFhTbGNiaUFnSUNCMElEMGdLSFFnS3lCbGJDa2dmQ0F3WEc0Z0lDQWdZV3dnUFNCbGJGeHVJQ0FnSUdWc0lEMGdaR3hjYmlBZ0lDQmtiQ0E5SUhKdmRHd29ZMndzSURFd0tWeHVJQ0FnSUdOc0lEMGdZbXhjYmlBZ0lDQmliQ0E5SUhSY2JseHVJQ0FnSUhRZ1BTQW9ZWElnS3lCTlcyOW1abk5sZENBcklIcHlXMmxkWFNrZ2ZDQXdYRzRnSUNBZ2FXWWdLR2tnUENBeE5pa2dlMXh1SUNBZ0lDQWdkQ0FyUFNCbU5TaGljaXdnWTNJc0lHUnlLU0FySUdoeVd6QmRYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaHBJRHdnTXpJcElIdGNiaUFnSUNBZ0lIUWdLejBnWmpRb1luSXNJR055TENCa2Npa2dLeUJvY2xzeFhWeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FTQThJRFE0S1NCN1hHNGdJQ0FnSUNCMElDczlJR1l6S0dKeUxDQmpjaXdnWkhJcElDc2dhSEpiTWwxY2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0drZ1BDQTJOQ2tnZTF4dUlDQWdJQ0FnZENBclBTQm1NaWhpY2l3Z1kzSXNJR1J5S1NBcklHaHlXek5kWEc0Z0lDQWdmU0JsYkhObElIc3ZMeUJwWmlBb2FUdzRNQ2tnZTF4dUlDQWdJQ0FnZENBclBTQm1NU2hpY2l3Z1kzSXNJR1J5S1NBcklHaHlXelJkWEc0Z0lDQWdmVnh1WEc0Z0lDQWdkQ0E5SUhRZ2ZDQXdYRzRnSUNBZ2RDQTlJSEp2ZEd3b2RDd2djM0piYVYwcFhHNGdJQ0FnZENBOUlDaDBJQ3NnWlhJcElId2dNRnh1SUNBZ0lHRnlJRDBnWlhKY2JpQWdJQ0JsY2lBOUlHUnlYRzRnSUNBZ1pISWdQU0J5YjNSc0tHTnlMQ0F4TUNsY2JpQWdJQ0JqY2lBOUlHSnlYRzRnSUNBZ1luSWdQU0IwWEc0Z0lIMWNibHh1SUNBdkx5QnBiblJsY20xbFpHbGhkR1VnYUdGemFDQjJZV3gxWlZ4dUlDQjBJRDBnS0VoYk1WMGdLeUJqYkNBcklHUnlLU0I4SURCY2JpQWdTRnN4WFNBOUlDaElXekpkSUNzZ1pHd2dLeUJsY2lrZ2ZDQXdYRzRnSUVoYk1sMGdQU0FvU0ZzelhTQXJJR1ZzSUNzZ1lYSXBJSHdnTUZ4dUlDQklXek5kSUQwZ0tFaGJORjBnS3lCaGJDQXJJR0p5S1NCOElEQmNiaUFnU0ZzMFhTQTlJQ2hJV3pCZElDc2dZbXdnS3lCamNpa2dmQ0F3WEc0Z0lFaGJNRjBnUFNCMFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdZeElDaDRMQ0I1TENCNktTQjdYRzRnSUhKbGRIVnliaUFvS0hncElGNGdLSGtwSUY0Z0tIb3BLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm1NaUFvZUN3Z2VTd2dlaWtnZTF4dUlDQnlaWFIxY200Z0tDZ29lQ2tnSmlBb2VTa3BJSHdnS0NoK2VDa2dKaUFvZWlrcEtWeHVmVnh1WEc1bWRXNWpkR2x2YmlCbU15QW9lQ3dnZVN3Z2Vpa2dlMXh1SUNCeVpYUjFjbTRnS0Nnb2VDa2dmQ0FvZmloNUtTa3BJRjRnS0hvcEtWeHVmVnh1WEc1bWRXNWpkR2x2YmlCbU5DQW9lQ3dnZVN3Z2Vpa2dlMXh1SUNCeVpYUjFjbTRnS0Nnb2VDa2dKaUFvZWlrcElId2dLQ2g1S1NBbUlDaCtLSG9wS1NrcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdZMUlDaDRMQ0I1TENCNktTQjdYRzRnSUhKbGRIVnliaUFvS0hncElGNGdLQ2g1S1NCOElDaCtLSG9wS1NrcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUhKdmRHd2dLSGdzSUc0cElIdGNiaUFnY21WMGRYSnVJQ2g0SUR3OElHNHBJSHdnS0hnZ1BqNCtJQ2d6TWlBdElHNHBLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnlhWEJsYldReE5qQWdLRzFsYzNOaFoyVXBJSHRjYmlBZ2RtRnlJRWdnUFNCYk1IZzJOelExTWpNd01Td2dNSGhGUmtORVFVSTRPU3dnTUhnNU9FSkJSRU5HUlN3Z01IZ3hNRE15TlRRM05pd2dNSGhETTBReVJURkdNRjFjYmx4dUlDQnBaaUFvZEhsd1pXOW1JRzFsYzNOaFoyVWdQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnYldWemMyRm5aU0E5SUc1bGR5QkNkV1ptWlhJb2JXVnpjMkZuWlN3Z0ozVjBaamduS1Z4dUlDQjlYRzVjYmlBZ2RtRnlJRzBnUFNCaWVYUmxjMVJ2VjI5eVpITW9iV1Z6YzJGblpTbGNibHh1SUNCMllYSWdia0pwZEhOTVpXWjBJRDBnYldWemMyRm5aUzVzWlc1bmRHZ2dLaUE0WEc0Z0lIWmhjaUJ1UW1sMGMxUnZkR0ZzSUQwZ2JXVnpjMkZuWlM1c1pXNW5kR2dnS2lBNFhHNWNiaUFnTHk4Z1FXUmtJSEJoWkdScGJtZGNiaUFnYlZ0dVFtbDBjMHhsWm5RZ1BqNCtJRFZkSUh3OUlEQjRPREFnUER3Z0tESTBJQzBnYmtKcGRITk1aV1owSUNVZ016SXBYRzRnSUcxYktDZ29ia0pwZEhOTVpXWjBJQ3NnTmpRcElENCtQaUE1S1NBOFBDQTBLU0FySURFMFhTQTlJQ2hjYmlBZ0lDQW9LQ2h1UW1sMGMxUnZkR0ZzSUR3OElEZ3BJSHdnS0c1Q2FYUnpWRzkwWVd3Z1BqNCtJREkwS1NrZ0ppQXdlREF3Wm1Zd01HWm1LU0I4WEc0Z0lDQWdLQ2dvYmtKcGRITlViM1JoYkNBOFBDQXlOQ2tnZkNBb2JrSnBkSE5VYjNSaGJDQStQajRnT0NrcElDWWdNSGhtWmpBd1ptWXdNQ2xjYmlBZ0tWeHVYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2JTNXNaVzVuZEdnN0lHa2dLejBnTVRZcElIdGNiaUFnSUNCd2NtOWpaWE56UW14dlkyc29TQ3dnYlN3Z2FTbGNiaUFnZlZ4dVhHNGdJQzh2SUhOM1lYQWdaVzVrYVdGdVhHNGdJR1p2Y2lBb2FTQTlJREE3SUdrZ1BDQTFPeUJwS3lzcElIdGNiaUFnSUNBdkx5QnphRzl5ZEdOMWRGeHVJQ0FnSUhaaGNpQklYMmtnUFNCSVcybGRYRzVjYmlBZ0lDQXZMeUJUZDJGd1hHNGdJQ0FnU0Z0cFhTQTlJQ2dvS0VoZmFTQThQQ0E0S1NCOElDaElYMmtnUGo0K0lESTBLU2tnSmlBd2VEQXdabVl3TUdabUtTQjhYRzRnSUNBZ0lDQW9LQ2hJWDJrZ1BEd2dNalFwSUh3Z0tFaGZhU0ErUGo0Z09Da3BJQ1lnTUhobVpqQXdabVl3TUNsY2JpQWdmVnh1WEc0Z0lIWmhjaUJrYVdkbGMzUmllWFJsY3lBOUlIZHZjbVJ6Vkc5Q2VYUmxjeWhJS1Z4dUlDQnlaWFIxY200Z2JtVjNJRUoxWm1abGNpaGthV2RsYzNSaWVYUmxjeWxjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnlhWEJsYldReE5qQmNiaUpkZlE9PSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdzdHJlYW0nKS5UcmFuc2Zvcm1cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXInKS5TdHJpbmdEZWNvZGVyXG5tb2R1bGUuZXhwb3J0cyA9IENpcGhlckJhc2VcbmluaGVyaXRzKENpcGhlckJhc2UsIFRyYW5zZm9ybSlcbmZ1bmN0aW9uIENpcGhlckJhc2UgKGhhc2hNb2RlKSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuaGFzaE1vZGUgPSB0eXBlb2YgaGFzaE1vZGUgPT09ICdzdHJpbmcnXG4gIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgdGhpc1toYXNoTW9kZV0gPSB0aGlzLl9maW5hbE9yRGlnZXN0XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5maW5hbCA9IHRoaXMuX2ZpbmFsT3JEaWdlc3RcbiAgfVxuICB0aGlzLl9kZWNvZGVyID0gbnVsbFxuICB0aGlzLl9lbmNvZGluZyA9IG51bGxcbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBpbnB1dEVuYywgb3V0cHV0RW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBkYXRhID0gbmV3IEJ1ZmZlcihkYXRhLCBpbnB1dEVuYylcbiAgfVxuICB2YXIgb3V0RGF0YSA9IHRoaXMuX3VwZGF0ZShkYXRhKVxuICBpZiAodGhpcy5oYXNoTW9kZSkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cbiAgaWYgKG91dHB1dEVuYykge1xuICAgIG91dERhdGEgPSB0aGlzLl90b1N0cmluZyhvdXREYXRhLCBvdXRwdXRFbmMpXG4gIH1cbiAgcmV0dXJuIG91dERhdGFcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QXV0b1BhZGRpbmcgPSBmdW5jdGlvbiAoKSB7fVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5nZXRBdXRoVGFnID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBnZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBdXRoVGFnID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBzZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBQUQgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhYWQgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGRhdGEsIF8sIG5leHQpIHtcbiAgdmFyIGVyclxuICB0cnkge1xuICAgIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgICB0aGlzLl91cGRhdGUoZGF0YSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXNoKHRoaXMuX3VwZGF0ZShkYXRhKSlcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnIgPSBlXG4gIH0gZmluYWxseSB7XG4gICAgbmV4dChlcnIpXG4gIH1cbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLl9mbHVzaCA9IGZ1bmN0aW9uIChkb25lKSB7XG4gIHZhciBlcnJcbiAgdHJ5IHtcbiAgICB0aGlzLnB1c2godGhpcy5fZmluYWwoKSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfSBmaW5hbGx5IHtcbiAgICBkb25lKGVycilcbiAgfVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZpbmFsT3JEaWdlc3QgPSBmdW5jdGlvbiAob3V0cHV0RW5jKSB7XG4gIHZhciBvdXREYXRhID0gdGhpcy5fZmluYWwoKSB8fCBuZXcgQnVmZmVyKCcnKVxuICBpZiAob3V0cHV0RW5jKSB7XG4gICAgb3V0RGF0YSA9IHRoaXMuX3RvU3RyaW5nKG91dERhdGEsIG91dHB1dEVuYywgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb3V0RGF0YVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fdG9TdHJpbmcgPSBmdW5jdGlvbiAodmFsdWUsIGVuYywgZmluYWwpIHtcbiAgaWYgKCF0aGlzLl9kZWNvZGVyKSB7XG4gICAgdGhpcy5fZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYylcbiAgICB0aGlzLl9lbmNvZGluZyA9IGVuY1xuICB9XG4gIGlmICh0aGlzLl9lbmNvZGluZyAhPT0gZW5jKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYW5cXCd0IHN3aXRjaCBlbmNvZGluZ3MnKVxuICB9XG4gIHZhciBvdXQgPSB0aGlzLl9kZWNvZGVyLndyaXRlKHZhbHVlKVxuICBpZiAoZmluYWwpIHtcbiAgICBvdXQgKz0gdGhpcy5fZGVjb2Rlci5lbmQoKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZM0psWVhSbExXaGhjMmd2Ym05a1pWOXRiMlIxYkdWekwyTnBjR2hsY2kxaVlYTmxMMmx1WkdWNExtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUZSeVlXNXpabTl5YlNBOUlISmxjWFZwY21Vb0ozTjBjbVZoYlNjcExsUnlZVzV6Wm05eWJWeHVkbUZ5SUdsdWFHVnlhWFJ6SUQwZ2NtVnhkV2x5WlNnbmFXNW9aWEpwZEhNbktWeHVkbUZ5SUZOMGNtbHVaMFJsWTI5a1pYSWdQU0J5WlhGMWFYSmxLQ2R6ZEhKcGJtZGZaR1ZqYjJSbGNpY3BMbE4wY21sdVowUmxZMjlrWlhKY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1EybHdhR1Z5UW1GelpWeHVhVzVvWlhKcGRITW9RMmx3YUdWeVFtRnpaU3dnVkhKaGJuTm1iM0p0S1Z4dVpuVnVZM1JwYjI0Z1EybHdhR1Z5UW1GelpTQW9hR0Z6YUUxdlpHVXBJSHRjYmlBZ1ZISmhibk5tYjNKdExtTmhiR3dvZEdocGN5bGNiaUFnZEdocGN5NW9ZWE5vVFc5a1pTQTlJSFI1Y0dWdlppQm9ZWE5vVFc5a1pTQTlQVDBnSjNOMGNtbHVaeWRjYmlBZ2FXWWdLSFJvYVhNdWFHRnphRTF2WkdVcElIdGNiaUFnSUNCMGFHbHpXMmhoYzJoTmIyUmxYU0E5SUhSb2FYTXVYMlpwYm1Gc1QzSkVhV2RsYzNSY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCMGFHbHpMbVpwYm1Gc0lEMGdkR2hwY3k1ZlptbHVZV3hQY2tScFoyVnpkRnh1SUNCOVhHNGdJSFJvYVhNdVgyUmxZMjlrWlhJZ1BTQnVkV3hzWEc0Z0lIUm9hWE11WDJWdVkyOWthVzVuSUQwZ2JuVnNiRnh1ZlZ4dVEybHdhR1Z5UW1GelpTNXdjbTkwYjNSNWNHVXVkWEJrWVhSbElEMGdablZ1WTNScGIyNGdLR1JoZEdFc0lHbHVjSFYwUlc1akxDQnZkWFJ3ZFhSRmJtTXBJSHRjYmlBZ2FXWWdLSFI1Y0dWdlppQmtZWFJoSUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lHUmhkR0VnUFNCdVpYY2dRblZtWm1WeUtHUmhkR0VzSUdsdWNIVjBSVzVqS1Z4dUlDQjlYRzRnSUhaaGNpQnZkWFJFWVhSaElEMGdkR2hwY3k1ZmRYQmtZWFJsS0dSaGRHRXBYRzRnSUdsbUlDaDBhR2x6TG1oaGMyaE5iMlJsS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhOY2JpQWdmVnh1SUNCcFppQW9iM1YwY0hWMFJXNWpLU0I3WEc0Z0lDQWdiM1YwUkdGMFlTQTlJSFJvYVhNdVgzUnZVM1J5YVc1bktHOTFkRVJoZEdFc0lHOTFkSEIxZEVWdVl5bGNiaUFnZlZ4dUlDQnlaWFIxY200Z2IzVjBSR0YwWVZ4dWZWeHVYRzVEYVhCb1pYSkNZWE5sTG5CeWIzUnZkSGx3WlM1elpYUkJkWFJ2VUdGa1pHbHVaeUE5SUdaMWJtTjBhVzl1SUNncElIdDlYRzVjYmtOcGNHaGxja0poYzJVdWNISnZkRzkwZVhCbExtZGxkRUYxZEdoVVlXY2dQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25kSEo1YVc1bklIUnZJR2RsZENCaGRYUm9JSFJoWnlCcGJpQjFibk4xY0hCdmNuUmxaQ0J6ZEdGMFpTY3BYRzU5WEc1Y2JrTnBjR2hsY2tKaGMyVXVjSEp2ZEc5MGVYQmxMbk5sZEVGMWRHaFVZV2NnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduZEhKNWFXNW5JSFJ2SUhObGRDQmhkWFJvSUhSaFp5QnBiaUIxYm5OMWNIQnZjblJsWkNCemRHRjBaU2NwWEc1OVhHNWNia05wY0dobGNrSmhjMlV1Y0hKdmRHOTBlWEJsTG5ObGRFRkJSQ0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2QwY25scGJtY2dkRzhnYzJWMElHRmhaQ0JwYmlCMWJuTjFjSEJ2Y25SbFpDQnpkR0YwWlNjcFhHNTlYRzVjYmtOcGNHaGxja0poYzJVdWNISnZkRzkwZVhCbExsOTBjbUZ1YzJadmNtMGdQU0JtZFc1amRHbHZiaUFvWkdGMFlTd2dYeXdnYm1WNGRDa2dlMXh1SUNCMllYSWdaWEp5WEc0Z0lIUnllU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTXVhR0Z6YUUxdlpHVXBJSHRjYmlBZ0lDQWdJSFJvYVhNdVgzVndaR0YwWlNoa1lYUmhLVnh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMGFHbHpMbkIxYzJnb2RHaHBjeTVmZFhCa1lYUmxLR1JoZEdFcEtWeHVJQ0FnSUgxY2JpQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJR1Z5Y2lBOUlHVmNiaUFnZlNCbWFXNWhiR3g1SUh0Y2JpQWdJQ0J1WlhoMEtHVnljaWxjYmlBZ2ZWeHVmVnh1UTJsd2FHVnlRbUZ6WlM1d2NtOTBiM1I1Y0dVdVgyWnNkWE5vSUQwZ1puVnVZM1JwYjI0Z0tHUnZibVVwSUh0Y2JpQWdkbUZ5SUdWeWNseHVJQ0IwY25rZ2UxeHVJQ0FnSUhSb2FYTXVjSFZ6YUNoMGFHbHpMbDltYVc1aGJDZ3BLVnh1SUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ1pYSnlJRDBnWlZ4dUlDQjlJR1pwYm1Gc2JIa2dlMXh1SUNBZ0lHUnZibVVvWlhKeUtWeHVJQ0I5WEc1OVhHNURhWEJvWlhKQ1lYTmxMbkJ5YjNSdmRIbHdaUzVmWm1sdVlXeFBja1JwWjJWemRDQTlJR1oxYm1OMGFXOXVJQ2h2ZFhSd2RYUkZibU1wSUh0Y2JpQWdkbUZ5SUc5MWRFUmhkR0VnUFNCMGFHbHpMbDltYVc1aGJDZ3BJSHg4SUc1bGR5QkNkV1ptWlhJb0p5Y3BYRzRnSUdsbUlDaHZkWFJ3ZFhSRmJtTXBJSHRjYmlBZ0lDQnZkWFJFWVhSaElEMGdkR2hwY3k1ZmRHOVRkSEpwYm1jb2IzVjBSR0YwWVN3Z2IzVjBjSFYwUlc1akxDQjBjblZsS1Z4dUlDQjlYRzRnSUhKbGRIVnliaUJ2ZFhSRVlYUmhYRzU5WEc1Y2JrTnBjR2hsY2tKaGMyVXVjSEp2ZEc5MGVYQmxMbDkwYjFOMGNtbHVaeUE5SUdaMWJtTjBhVzl1SUNoMllXeDFaU3dnWlc1akxDQm1hVzVoYkNrZ2UxeHVJQ0JwWmlBb0lYUm9hWE11WDJSbFkyOWtaWElwSUh0Y2JpQWdJQ0IwYUdsekxsOWtaV052WkdWeUlEMGdibVYzSUZOMGNtbHVaMFJsWTI5a1pYSW9aVzVqS1Z4dUlDQWdJSFJvYVhNdVgyVnVZMjlrYVc1bklEMGdaVzVqWEc0Z0lIMWNiaUFnYVdZZ0tIUm9hWE11WDJWdVkyOWthVzVuSUNFOVBTQmxibU1wSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMk5oYmx4Y0ozUWdjM2RwZEdOb0lHVnVZMjlrYVc1bmN5Y3BYRzRnSUgxY2JpQWdkbUZ5SUc5MWRDQTlJSFJvYVhNdVgyUmxZMjlrWlhJdWQzSnBkR1VvZG1Gc2RXVXBYRzRnSUdsbUlDaG1hVzVoYkNrZ2UxeHVJQ0FnSUc5MWRDQXJQU0IwYUdsekxsOWtaV052WkdWeUxtVnVaQ2dwWEc0Z0lIMWNiaUFnY21WMGRYSnVJRzkxZEZ4dWZWeHVJbDE5IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xuLy8gYWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9hcGF0aWwvcGVtc3RyaXBcbnZhciBmaW5kUHJvYyA9IC9Qcm9jLVR5cGU6IDQsRU5DUllQVEVEXFxyP1xcbkRFSy1JbmZvOiBBRVMtKCg/OjEyOCl8KD86MTkyKXwoPzoyNTYpKS1DQkMsKFswLTlBLUhdKylcXHI/XFxuXFxyP1xcbihbMC05QS16XFxuXFxyXFwrXFwvXFw9XSspXFxyP1xcbi9tXG52YXIgc3RhcnRSZWdleCA9IC9eLS0tLS1CRUdJTiAoLiopIEtFWS0tLS0tXFxyP1xcbi9tXG52YXIgZnVsbFJlZ2V4ID0gL14tLS0tLUJFR0lOICguKikgS0VZLS0tLS1cXHI/XFxuKFswLTlBLXpcXG5cXHJcXCtcXC9cXD1dKylcXHI/XFxuLS0tLS1FTkQgXFwxIEtFWS0tLS0tJC9tXG52YXIgZXZwID0gcmVxdWlyZSgnZXZwX2J5dGVzdG9rZXknKVxudmFyIGNpcGhlcnMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWFlcycpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChva2V5LCBwYXNzd29yZCkge1xuICB2YXIga2V5ID0gb2tleS50b1N0cmluZygpXG4gIHZhciBtYXRjaCA9IGtleS5tYXRjaChmaW5kUHJvYylcbiAgdmFyIGRlY3J5cHRlZFxuICBpZiAoIW1hdGNoKSB7XG4gICAgdmFyIG1hdGNoMiA9IGtleS5tYXRjaChmdWxsUmVnZXgpXG4gICAgZGVjcnlwdGVkID0gbmV3IEJ1ZmZlcihtYXRjaDJbMl0ucmVwbGFjZSgvXFxyP1xcbi9nLCAnJyksICdiYXNlNjQnKVxuICB9IGVsc2Uge1xuICAgIHZhciBzdWl0ZSA9ICdhZXMnICsgbWF0Y2hbMV1cbiAgICB2YXIgaXYgPSBuZXcgQnVmZmVyKG1hdGNoWzJdLCAnaGV4JylcbiAgICB2YXIgY2lwaGVyVGV4dCA9IG5ldyBCdWZmZXIobWF0Y2hbM10ucmVwbGFjZSgvXFxyP1xcbi9nLCAnJyksICdiYXNlNjQnKVxuICAgIHZhciBjaXBoZXJLZXkgPSBldnAocGFzc3dvcmQsIGl2LnNsaWNlKDAsIDgpLCBwYXJzZUludChtYXRjaFsxXSwgMTApKS5rZXlcbiAgICB2YXIgb3V0ID0gW11cbiAgICB2YXIgY2lwaGVyID0gY2lwaGVycy5jcmVhdGVEZWNpcGhlcml2KHN1aXRlLCBjaXBoZXJLZXksIGl2KVxuICAgIG91dC5wdXNoKGNpcGhlci51cGRhdGUoY2lwaGVyVGV4dCkpXG4gICAgb3V0LnB1c2goY2lwaGVyLmZpbmFsKCkpXG4gICAgZGVjcnlwdGVkID0gQnVmZmVyLmNvbmNhdChvdXQpXG4gIH1cbiAgdmFyIHRhZyA9IGtleS5tYXRjaChzdGFydFJlZ2V4KVsxXSArICcgS0VZJ1xuICByZXR1cm4ge1xuICAgIHRhZzogdGFnLFxuICAgIGRhdGE6IGRlY3J5cHRlZFxuICB9XG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WW5KdmQzTmxjbWxtZVMxemFXZHVMMjV2WkdWZmJXOWtkV3hsY3k5d1lYSnpaUzFoYzI0eEwyWnBlRkJ5YjJNdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdkx5QmhaR0Z3ZEdWa0lHWnliMjBnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDJGd1lYUnBiQzl3WlcxemRISnBjRnh1ZG1GeUlHWnBibVJRY205aklEMGdMMUJ5YjJNdFZIbHdaVG9nTkN4RlRrTlNXVkJVUlVSY1hISS9YRnh1UkVWTExVbHVabTg2SUVGRlV5MG9LRDg2TVRJNEtYd29Qem94T1RJcGZDZy9PakkxTmlrcExVTkNReXdvV3pBdE9VRXRTRjByS1Z4Y2NqOWNYRzVjWEhJL1hGeHVLRnN3TFRsQkxYcGNYRzVjWEhKY1hDdGNYQzljWEQxZEt5bGNYSEkvWEZ4dUwyMWNiblpoY2lCemRHRnlkRkpsWjJWNElEMGdMMTR0TFMwdExVSkZSMGxPSUNndUtpa2dTMFZaTFMwdExTMWNYSEkvWEZ4dUwyMWNiblpoY2lCbWRXeHNVbVZuWlhnZ1BTQXZYaTB0TFMwdFFrVkhTVTRnS0M0cUtTQkxSVmt0TFMwdExWeGNjajljWEc0b1d6QXRPVUV0ZWx4Y2JseGNjbHhjSzF4Y0wxeGNQVjByS1Z4Y2NqOWNYRzR0TFMwdExVVk9SQ0JjWERFZ1MwVlpMUzB0TFMwa0wyMWNiblpoY2lCbGRuQWdQU0J5WlhGMWFYSmxLQ2RsZG5CZllubDBaWE4wYjJ0bGVTY3BYRzUyWVhJZ1kybHdhR1Z5Y3lBOUlISmxjWFZwY21Vb0oySnliM2R6WlhKcFpua3RZV1Z6SnlsY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0Z0tHOXJaWGtzSUhCaGMzTjNiM0prS1NCN1hHNGdJSFpoY2lCclpYa2dQU0J2YTJWNUxuUnZVM1J5YVc1bktDbGNiaUFnZG1GeUlHMWhkR05vSUQwZ2EyVjVMbTFoZEdOb0tHWnBibVJRY205aktWeHVJQ0IyWVhJZ1pHVmpjbmx3ZEdWa1hHNGdJR2xtSUNnaGJXRjBZMmdwSUh0Y2JpQWdJQ0IyWVhJZ2JXRjBZMmd5SUQwZ2EyVjVMbTFoZEdOb0tHWjFiR3hTWldkbGVDbGNiaUFnSUNCa1pXTnllWEIwWldRZ1BTQnVaWGNnUW5WbVptVnlLRzFoZEdOb01sc3lYUzV5WlhCc1lXTmxLQzljWEhJL1hGeHVMMmNzSUNjbktTd2dKMkpoYzJVMk5DY3BYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdkbUZ5SUhOMWFYUmxJRDBnSjJGbGN5Y2dLeUJ0WVhSamFGc3hYVnh1SUNBZ0lIWmhjaUJwZGlBOUlHNWxkeUJDZFdabVpYSW9iV0YwWTJoYk1sMHNJQ2RvWlhnbktWeHVJQ0FnSUhaaGNpQmphWEJvWlhKVVpYaDBJRDBnYm1WM0lFSjFabVpsY2lodFlYUmphRnN6WFM1eVpYQnNZV05sS0M5Y1hISS9YRnh1TDJjc0lDY25LU3dnSjJKaGMyVTJOQ2NwWEc0Z0lDQWdkbUZ5SUdOcGNHaGxja3RsZVNBOUlHVjJjQ2h3WVhOemQyOXlaQ3dnYVhZdWMyeHBZMlVvTUN3Z09Da3NJSEJoY25ObFNXNTBLRzFoZEdOb1d6RmRMQ0F4TUNrcExtdGxlVnh1SUNBZ0lIWmhjaUJ2ZFhRZ1BTQmJYVnh1SUNBZ0lIWmhjaUJqYVhCb1pYSWdQU0JqYVhCb1pYSnpMbU55WldGMFpVUmxZMmx3YUdWeWFYWW9jM1ZwZEdVc0lHTnBjR2hsY2t0bGVTd2dhWFlwWEc0Z0lDQWdiM1YwTG5CMWMyZ29ZMmx3YUdWeUxuVndaR0YwWlNoamFYQm9aWEpVWlhoMEtTbGNiaUFnSUNCdmRYUXVjSFZ6YUNoamFYQm9aWEl1Wm1sdVlXd29LU2xjYmlBZ0lDQmtaV055ZVhCMFpXUWdQU0JDZFdabVpYSXVZMjl1WTJGMEtHOTFkQ2xjYmlBZ2ZWeHVJQ0IyWVhJZ2RHRm5JRDBnYTJWNUxtMWhkR05vS0hOMFlYSjBVbVZuWlhncFd6RmRJQ3NnSnlCTFJWa25YRzRnSUhKbGRIVnliaUI3WEc0Z0lDQWdkR0ZuT2lCMFlXY3NYRzRnSUNBZ1pHRjBZVG9nWkdWamNubHdkR1ZrWEc0Z0lIMWNibjFjYmlKZGZRPT0iLCJhcmd1bWVudHNbNF1bXCIvaG9tZS91YnVudHUvc3RhZ2luZy9hcHBzL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2Jyb3dzZXIuanNcIl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpIiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xudmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgbW9kZXMgPSByZXF1aXJlKCcuL21vZGVzJylcbnZhciBlYnRrID0gcmVxdWlyZSgnZXZwX2J5dGVzdG9rZXknKVxudmFyIFN0cmVhbUNpcGhlciA9IHJlcXVpcmUoJy4vc3RyZWFtQ2lwaGVyJylcbnZhciBBdXRoQ2lwaGVyID0gcmVxdWlyZSgnLi9hdXRoQ2lwaGVyJylcbmluaGVyaXRzKENpcGhlciwgVHJhbnNmb3JtKVxuZnVuY3Rpb24gQ2lwaGVyIChtb2RlLCBrZXksIGl2KSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBDaXBoZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBDaXBoZXIobW9kZSwga2V5LCBpdilcbiAgfVxuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuICB0aGlzLl9jYWNoZSA9IG5ldyBTcGxpdHRlcigpXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IG5ldyBCdWZmZXIoaXYubGVuZ3RoKVxuICBpdi5jb3B5KHRoaXMuX3ByZXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gdHJ1ZVxufVxuQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG4gIHdoaWxlICgoY2h1bmsgPSB0aGlzLl9jYWNoZS5nZXQoKSkpIHtcbiAgICB0aGluZyA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgICBvdXQucHVzaCh0aGluZylcbiAgfVxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChvdXQpXG59XG5DaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNodW5rID0gdGhpcy5fY2FjaGUuZmx1c2goKVxuICBpZiAodGhpcy5fYXV0b3BhZGRpbmcpIHtcbiAgICBjaHVuayA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgICB0aGlzLl9jaXBoZXIuc2NydWIoKVxuICAgIHJldHVybiBjaHVua1xuICB9IGVsc2UgaWYgKGNodW5rLnRvU3RyaW5nKCdoZXgnKSAhPT0gJzEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwJykge1xuICAgIHRoaXMuX2NpcGhlci5zY3J1YigpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdkYXRhIG5vdCBtdWx0aXBsZSBvZiBibG9jayBsZW5ndGgnKVxuICB9XG59XG5DaXBoZXIucHJvdG90eXBlLnNldEF1dG9QYWRkaW5nID0gZnVuY3Rpb24gKHNldFRvKSB7XG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gISFzZXRUb1xufVxuXG5mdW5jdGlvbiBTcGxpdHRlciAoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTcGxpdHRlcikpIHtcbiAgICByZXR1cm4gbmV3IFNwbGl0dGVyKClcbiAgfVxuICB0aGlzLmNhY2hlID0gbmV3IEJ1ZmZlcignJylcbn1cblNwbGl0dGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgZGF0YV0pXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+IDE1KSB7XG4gICAgdmFyIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgcmV0dXJuIG91dFxuICB9XG4gIHJldHVybiBudWxsXG59XG5TcGxpdHRlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsZW4gPSAxNiAtIHRoaXMuY2FjaGUubGVuZ3RoXG4gIHZhciBwYWRCdWZmID0gbmV3IEJ1ZmZlcihsZW4pXG5cbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgcGFkQnVmZi53cml0ZVVJbnQ4KGxlbiwgaSlcbiAgfVxuICB2YXIgb3V0ID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgcGFkQnVmZl0pXG4gIHJldHVybiBvdXRcbn1cbnZhciBtb2RlbGlzdCA9IHtcbiAgRUNCOiByZXF1aXJlKCcuL21vZGVzL2VjYicpLFxuICBDQkM6IHJlcXVpcmUoJy4vbW9kZXMvY2JjJyksXG4gIENGQjogcmVxdWlyZSgnLi9tb2Rlcy9jZmInKSxcbiAgQ0ZCODogcmVxdWlyZSgnLi9tb2Rlcy9jZmI4JyksXG4gIENGQjE6IHJlcXVpcmUoJy4vbW9kZXMvY2ZiMScpLFxuICBPRkI6IHJlcXVpcmUoJy4vbW9kZXMvb2ZiJyksXG4gIENUUjogcmVxdWlyZSgnLi9tb2Rlcy9jdHInKSxcbiAgR0NNOiByZXF1aXJlKCcuL21vZGVzL2N0cicpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlcml2IChzdWl0ZSwgcGFzc3dvcmQsIGl2KSB7XG4gIHZhciBjb25maWcgPSBtb2Rlc1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbiAgaWYgKHR5cGVvZiBpdiA9PT0gJ3N0cmluZycpIHtcbiAgICBpdiA9IG5ldyBCdWZmZXIoaXYpXG4gIH1cbiAgaWYgKHR5cGVvZiBwYXNzd29yZCA9PT0gJ3N0cmluZycpIHtcbiAgICBwYXNzd29yZCA9IG5ldyBCdWZmZXIocGFzc3dvcmQpXG4gIH1cbiAgaWYgKHBhc3N3b3JkLmxlbmd0aCAhPT0gY29uZmlnLmtleSAvIDgpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGtleSBsZW5ndGggJyArIHBhc3N3b3JkLmxlbmd0aClcbiAgfVxuICBpZiAoaXYubGVuZ3RoICE9PSBjb25maWcuaXYpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGl2IGxlbmd0aCAnICsgaXYubGVuZ3RoKVxuICB9XG4gIGlmIChjb25maWcudHlwZSA9PT0gJ3N0cmVhbScpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihtb2RlbGlzdFtjb25maWcubW9kZV0sIHBhc3N3b3JkLCBpdilcbiAgfSBlbHNlIGlmIChjb25maWcudHlwZSA9PT0gJ2F1dGgnKSB7XG4gICAgcmV0dXJuIG5ldyBBdXRoQ2lwaGVyKG1vZGVsaXN0W2NvbmZpZy5tb2RlXSwgcGFzc3dvcmQsIGl2KVxuICB9XG4gIHJldHVybiBuZXcgQ2lwaGVyKG1vZGVsaXN0W2NvbmZpZy5tb2RlXSwgcGFzc3dvcmQsIGl2KVxufVxuZnVuY3Rpb24gY3JlYXRlQ2lwaGVyIChzdWl0ZSwgcGFzc3dvcmQpIHtcbiAgdmFyIGNvbmZpZyA9IG1vZGVzW3N1aXRlLnRvTG93ZXJDYXNlKCldXG4gIGlmICghY29uZmlnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcbiAgfVxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBjb25maWcua2V5LCBjb25maWcuaXYpXG4gIHJldHVybiBjcmVhdGVDaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5cbmV4cG9ydHMuY3JlYXRlQ2lwaGVyaXYgPSBjcmVhdGVDaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVDaXBoZXIgPSBjcmVhdGVDaXBoZXJcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZbkp2ZDNObGNtbG1lUzF6YVdkdUwyNXZaR1ZmYlc5a2RXeGxjeTl3WVhKelpTMWhjMjR4TDI1dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMV0ZsY3k5bGJtTnllWEIwWlhJdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCaFpYTWdQU0J5WlhGMWFYSmxLQ2N1TDJGbGN5Y3BYRzUyWVhJZ1ZISmhibk5tYjNKdElEMGdjbVZ4ZFdseVpTZ25ZMmx3YUdWeUxXSmhjMlVuS1Z4dWRtRnlJR2x1YUdWeWFYUnpJRDBnY21WeGRXbHlaU2duYVc1b1pYSnBkSE1uS1Z4dWRtRnlJRzF2WkdWeklEMGdjbVZ4ZFdseVpTZ25MaTl0YjJSbGN5Y3BYRzUyWVhJZ1pXSjBheUE5SUhKbGNYVnBjbVVvSjJWMmNGOWllWFJsYzNSdmEyVjVKeWxjYm5aaGNpQlRkSEpsWVcxRGFYQm9aWElnUFNCeVpYRjFhWEpsS0NjdUwzTjBjbVZoYlVOcGNHaGxjaWNwWEc1MllYSWdRWFYwYUVOcGNHaGxjaUE5SUhKbGNYVnBjbVVvSnk0dllYVjBhRU5wY0dobGNpY3BYRzVwYm1obGNtbDBjeWhEYVhCb1pYSXNJRlJ5WVc1elptOXliU2xjYm1aMWJtTjBhVzl1SUVOcGNHaGxjaUFvYlc5a1pTd2dhMlY1TENCcGRpa2dlMXh1SUNCcFppQW9JU2gwYUdseklHbHVjM1JoYm1ObGIyWWdRMmx3YUdWeUtTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dRMmx3YUdWeUtHMXZaR1VzSUd0bGVTd2dhWFlwWEc0Z0lIMWNiaUFnVkhKaGJuTm1iM0p0TG1OaGJHd29kR2hwY3lsY2JpQWdkR2hwY3k1ZlkyRmphR1VnUFNCdVpYY2dVM0JzYVhSMFpYSW9LVnh1SUNCMGFHbHpMbDlqYVhCb1pYSWdQU0J1WlhjZ1lXVnpMa0ZGVXloclpYa3BYRzRnSUhSb2FYTXVYM0J5WlhZZ1BTQnVaWGNnUW5WbVptVnlLR2wyTG14bGJtZDBhQ2xjYmlBZ2FYWXVZMjl3ZVNoMGFHbHpMbDl3Y21WMktWeHVJQ0IwYUdsekxsOXRiMlJsSUQwZ2JXOWtaVnh1SUNCMGFHbHpMbDloZFhSdmNHRmtaR2x1WnlBOUlIUnlkV1ZjYm4xY2JrTnBjR2hsY2k1d2NtOTBiM1I1Y0dVdVgzVndaR0YwWlNBOUlHWjFibU4wYVc5dUlDaGtZWFJoS1NCN1hHNGdJSFJvYVhNdVgyTmhZMmhsTG1Ga1pDaGtZWFJoS1Z4dUlDQjJZWElnWTJoMWJtdGNiaUFnZG1GeUlIUm9hVzVuWEc0Z0lIWmhjaUJ2ZFhRZ1BTQmJYVnh1SUNCM2FHbHNaU0FvS0dOb2RXNXJJRDBnZEdocGN5NWZZMkZqYUdVdVoyVjBLQ2twS1NCN1hHNGdJQ0FnZEdocGJtY2dQU0IwYUdsekxsOXRiMlJsTG1WdVkzSjVjSFFvZEdocGN5d2dZMmgxYm1zcFhHNGdJQ0FnYjNWMExuQjFjMmdvZEdocGJtY3BYRzRnSUgxY2JpQWdjbVYwZFhKdUlFSjFabVpsY2k1amIyNWpZWFFvYjNWMEtWeHVmVnh1UTJsd2FHVnlMbkJ5YjNSdmRIbHdaUzVmWm1sdVlXd2dQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJSFpoY2lCamFIVnVheUE5SUhSb2FYTXVYMk5oWTJobExtWnNkWE5vS0NsY2JpQWdhV1lnS0hSb2FYTXVYMkYxZEc5d1lXUmthVzVuS1NCN1hHNGdJQ0FnWTJoMWJtc2dQU0IwYUdsekxsOXRiMlJsTG1WdVkzSjVjSFFvZEdocGN5d2dZMmgxYm1zcFhHNGdJQ0FnZEdocGN5NWZZMmx3YUdWeUxuTmpjblZpS0NsY2JpQWdJQ0J5WlhSMWNtNGdZMmgxYm10Y2JpQWdmU0JsYkhObElHbG1JQ2hqYUhWdWF5NTBiMU4wY21sdVp5Z25hR1Y0SnlrZ0lUMDlJQ2N4TURFd01UQXhNREV3TVRBeE1ERXdNVEF4TURFd01UQXhNREV3TVRBeE1DY3BJSHRjYmlBZ0lDQjBhR2x6TGw5amFYQm9aWEl1YzJOeWRXSW9LVnh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblpHRjBZU0J1YjNRZ2JYVnNkR2x3YkdVZ2IyWWdZbXh2WTJzZ2JHVnVaM1JvSnlsY2JpQWdmVnh1ZlZ4dVEybHdhR1Z5TG5CeWIzUnZkSGx3WlM1elpYUkJkWFJ2VUdGa1pHbHVaeUE5SUdaMWJtTjBhVzl1SUNoelpYUlVieWtnZTF4dUlDQjBhR2x6TGw5aGRYUnZjR0ZrWkdsdVp5QTlJQ0VoYzJWMFZHOWNibjFjYmx4dVpuVnVZM1JwYjI0Z1UzQnNhWFIwWlhJZ0tDa2dlMXh1SUNCcFppQW9JU2gwYUdseklHbHVjM1JoYm1ObGIyWWdVM0JzYVhSMFpYSXBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJUY0d4cGRIUmxjaWdwWEc0Z0lIMWNiaUFnZEdocGN5NWpZV05vWlNBOUlHNWxkeUJDZFdabVpYSW9KeWNwWEc1OVhHNVRjR3hwZEhSbGNpNXdjbTkwYjNSNWNHVXVZV1JrSUQwZ1puVnVZM1JwYjI0Z0tHUmhkR0VwSUh0Y2JpQWdkR2hwY3k1allXTm9aU0E5SUVKMVptWmxjaTVqYjI1allYUW9XM1JvYVhNdVkyRmphR1VzSUdSaGRHRmRLVnh1ZlZ4dVhHNVRjR3hwZEhSbGNpNXdjbTkwYjNSNWNHVXVaMlYwSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNCcFppQW9kR2hwY3k1allXTm9aUzVzWlc1bmRHZ2dQaUF4TlNrZ2UxeHVJQ0FnSUhaaGNpQnZkWFFnUFNCMGFHbHpMbU5oWTJobExuTnNhV05sS0RBc0lERTJLVnh1SUNBZ0lIUm9hWE11WTJGamFHVWdQU0IwYUdsekxtTmhZMmhsTG5Oc2FXTmxLREUyS1Z4dUlDQWdJSEpsZEhWeWJpQnZkWFJjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdiblZzYkZ4dWZWeHVVM0JzYVhSMFpYSXVjSEp2ZEc5MGVYQmxMbVpzZFhOb0lEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQjJZWElnYkdWdUlEMGdNVFlnTFNCMGFHbHpMbU5oWTJobExteGxibWQwYUZ4dUlDQjJZWElnY0dGa1FuVm1aaUE5SUc1bGR5QkNkV1ptWlhJb2JHVnVLVnh1WEc0Z0lIWmhjaUJwSUQwZ0xURmNiaUFnZDJocGJHVWdLQ3NyYVNBOElHeGxiaWtnZTF4dUlDQWdJSEJoWkVKMVptWXVkM0pwZEdWVlNXNTBPQ2hzWlc0c0lHa3BYRzRnSUgxY2JpQWdkbUZ5SUc5MWRDQTlJRUoxWm1abGNpNWpiMjVqWVhRb1czUm9hWE11WTJGamFHVXNJSEJoWkVKMVptWmRLVnh1SUNCeVpYUjFjbTRnYjNWMFhHNTlYRzUyWVhJZ2JXOWtaV3hwYzNRZ1BTQjdYRzRnSUVWRFFqb2djbVZ4ZFdseVpTZ25MaTl0YjJSbGN5OWxZMkluS1N4Y2JpQWdRMEpET2lCeVpYRjFhWEpsS0NjdUwyMXZaR1Z6TDJOaVl5Y3BMRnh1SUNCRFJrSTZJSEpsY1hWcGNtVW9KeTR2Ylc5a1pYTXZZMlppSnlrc1hHNGdJRU5HUWpnNklISmxjWFZwY21Vb0p5NHZiVzlrWlhNdlkyWmlPQ2NwTEZ4dUlDQkRSa0l4T2lCeVpYRjFhWEpsS0NjdUwyMXZaR1Z6TDJObVlqRW5LU3hjYmlBZ1QwWkNPaUJ5WlhGMWFYSmxLQ2N1TDIxdlpHVnpMMjltWWljcExGeHVJQ0JEVkZJNklISmxjWFZwY21Vb0p5NHZiVzlrWlhNdlkzUnlKeWtzWEc0Z0lFZERUVG9nY21WeGRXbHlaU2duTGk5dGIyUmxjeTlqZEhJbktWeHVmVnh1WEc1bWRXNWpkR2x2YmlCamNtVmhkR1ZEYVhCb1pYSnBkaUFvYzNWcGRHVXNJSEJoYzNOM2IzSmtMQ0JwZGlrZ2UxeHVJQ0IyWVhJZ1kyOXVabWxuSUQwZ2JXOWtaWE5iYzNWcGRHVXVkRzlNYjNkbGNrTmhjMlVvS1YxY2JpQWdhV1lnS0NGamIyNW1hV2NwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkcGJuWmhiR2xrSUhOMWFYUmxJSFI1Y0dVbktWeHVJQ0I5WEc0Z0lHbG1JQ2gwZVhCbGIyWWdhWFlnUFQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ2FYWWdQU0J1WlhjZ1FuVm1abVZ5S0dsMktWeHVJQ0I5WEc0Z0lHbG1JQ2gwZVhCbGIyWWdjR0Z6YzNkdmNtUWdQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnY0dGemMzZHZjbVFnUFNCdVpYY2dRblZtWm1WeUtIQmhjM04zYjNKa0tWeHVJQ0I5WEc0Z0lHbG1JQ2h3WVhOemQyOXlaQzVzWlc1bmRHZ2dJVDA5SUdOdmJtWnBaeTVyWlhrZ0x5QTRLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWduYVc1MllXeHBaQ0JyWlhrZ2JHVnVaM1JvSUNjZ0t5QndZWE56ZDI5eVpDNXNaVzVuZEdncFhHNGdJSDFjYmlBZ2FXWWdLR2wyTG14bGJtZDBhQ0FoUFQwZ1kyOXVabWxuTG1sMktTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25hVzUyWVd4cFpDQnBkaUJzWlc1bmRHZ2dKeUFySUdsMkxteGxibWQwYUNsY2JpQWdmVnh1SUNCcFppQW9ZMjl1Wm1sbkxuUjVjR1VnUFQwOUlDZHpkSEpsWVcwbktTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlRkSEpsWVcxRGFYQm9aWElvYlc5a1pXeHBjM1JiWTI5dVptbG5MbTF2WkdWZExDQndZWE56ZDI5eVpDd2dhWFlwWEc0Z0lIMGdaV3h6WlNCcFppQW9ZMjl1Wm1sbkxuUjVjR1VnUFQwOUlDZGhkWFJvSnlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1FYVjBhRU5wY0dobGNpaHRiMlJsYkdsemRGdGpiMjVtYVdjdWJXOWtaVjBzSUhCaGMzTjNiM0prTENCcGRpbGNiaUFnZlZ4dUlDQnlaWFIxY200Z2JtVjNJRU5wY0dobGNpaHRiMlJsYkdsemRGdGpiMjVtYVdjdWJXOWtaVjBzSUhCaGMzTjNiM0prTENCcGRpbGNibjFjYm1aMWJtTjBhVzl1SUdOeVpXRjBaVU5wY0dobGNpQW9jM1ZwZEdVc0lIQmhjM04zYjNKa0tTQjdYRzRnSUhaaGNpQmpiMjVtYVdjZ1BTQnRiMlJsYzF0emRXbDBaUzUwYjB4dmQyVnlRMkZ6WlNncFhWeHVJQ0JwWmlBb0lXTnZibVpwWnlrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0oybHVkbUZzYVdRZ2MzVnBkR1VnZEhsd1pTY3BYRzRnSUgxY2JpQWdkbUZ5SUd0bGVYTWdQU0JsWW5ScktIQmhjM04zYjNKa0xDQm1ZV3h6WlN3Z1kyOXVabWxuTG10bGVTd2dZMjl1Wm1sbkxtbDJLVnh1SUNCeVpYUjFjbTRnWTNKbFlYUmxRMmx3YUdWeWFYWW9jM1ZwZEdVc0lHdGxlWE11YTJWNUxDQnJaWGx6TG1sMktWeHVmVnh1WEc1bGVIQnZjblJ6TG1OeVpXRjBaVU5wY0dobGNtbDJJRDBnWTNKbFlYUmxRMmx3YUdWeWFYWmNibVY0Y0c5eWRITXVZM0psWVhSbFEybHdhR1Z5SUQwZ1kzSmxZWFJsUTJsd2FHVnlYRzRpWFgwPSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIG1vZGVzID0gcmVxdWlyZSgnLi9tb2RlcycpXG52YXIgU3RyZWFtQ2lwaGVyID0gcmVxdWlyZSgnLi9zdHJlYW1DaXBoZXInKVxudmFyIEF1dGhDaXBoZXIgPSByZXF1aXJlKCcuL2F1dGhDaXBoZXInKVxudmFyIGVidGsgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpXG5cbmluaGVyaXRzKERlY2lwaGVyLCBUcmFuc2Zvcm0pXG5mdW5jdGlvbiBEZWNpcGhlciAobW9kZSwga2V5LCBpdikge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRGVjaXBoZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBEZWNpcGhlcihtb2RlLCBrZXksIGl2KVxuICB9XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuX2NhY2hlID0gbmV3IFNwbGl0dGVyKClcbiAgdGhpcy5fbGFzdCA9IHZvaWQgMFxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBuZXcgQnVmZmVyKGl2Lmxlbmd0aClcbiAgaXYuY29weSh0aGlzLl9wcmV2KVxuICB0aGlzLl9tb2RlID0gbW9kZVxuICB0aGlzLl9hdXRvcGFkZGluZyA9IHRydWVcbn1cbkRlY2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG4gIHdoaWxlICgoY2h1bmsgPSB0aGlzLl9jYWNoZS5nZXQodGhpcy5fYXV0b3BhZGRpbmcpKSkge1xuICAgIHRoaW5nID0gdGhpcy5fbW9kZS5kZWNyeXB0KHRoaXMsIGNodW5rKVxuICAgIG91dC5wdXNoKHRoaW5nKVxuICB9XG4gIHJldHVybiBCdWZmZXIuY29uY2F0KG91dClcbn1cbkRlY2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjaHVuayA9IHRoaXMuX2NhY2hlLmZsdXNoKClcbiAgaWYgKHRoaXMuX2F1dG9wYWRkaW5nKSB7XG4gICAgcmV0dXJuIHVucGFkKHRoaXMuX21vZGUuZGVjcnlwdCh0aGlzLCBjaHVuaykpXG4gIH0gZWxzZSBpZiAoY2h1bmspIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgbm90IG11bHRpcGxlIG9mIGJsb2NrIGxlbmd0aCcpXG4gIH1cbn1cbkRlY2lwaGVyLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uIChzZXRUbykge1xuICB0aGlzLl9hdXRvcGFkZGluZyA9ICEhc2V0VG9cbn1cbmZ1bmN0aW9uIFNwbGl0dGVyICgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNwbGl0dGVyKSkge1xuICAgIHJldHVybiBuZXcgU3BsaXR0ZXIoKVxuICB9XG4gIHRoaXMuY2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxufVxuU3BsaXR0ZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuY2FjaGUgPSBCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBkYXRhXSlcbn1cblxuU3BsaXR0ZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChhdXRvUGFkZGluZykge1xuICB2YXIgb3V0XG4gIGlmIChhdXRvUGFkZGluZykge1xuICAgIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+IDE2KSB7XG4gICAgICBvdXQgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgICByZXR1cm4gb3V0XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+PSAxNikge1xuICAgICAgb3V0ID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNilcbiAgICAgIHRoaXMuY2FjaGUgPSB0aGlzLmNhY2hlLnNsaWNlKDE2KVxuICAgICAgcmV0dXJuIG91dFxuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbFxufVxuU3BsaXR0ZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy5jYWNoZVxuICB9XG59XG5mdW5jdGlvbiB1bnBhZCAobGFzdCkge1xuICB2YXIgcGFkZGVkID0gbGFzdFsxNV1cbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgcGFkZGVkKSB7XG4gICAgaWYgKGxhc3RbKGkgKyAoMTYgLSBwYWRkZWQpKV0gIT09IHBhZGRlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gZGVjcnlwdCBkYXRhJylcbiAgICB9XG4gIH1cbiAgaWYgKHBhZGRlZCA9PT0gMTYpIHtcbiAgICByZXR1cm5cbiAgfVxuICByZXR1cm4gbGFzdC5zbGljZSgwLCAxNiAtIHBhZGRlZClcbn1cblxudmFyIG1vZGVsaXN0ID0ge1xuICBFQ0I6IHJlcXVpcmUoJy4vbW9kZXMvZWNiJyksXG4gIENCQzogcmVxdWlyZSgnLi9tb2Rlcy9jYmMnKSxcbiAgQ0ZCOiByZXF1aXJlKCcuL21vZGVzL2NmYicpLFxuICBDRkI4OiByZXF1aXJlKCcuL21vZGVzL2NmYjgnKSxcbiAgQ0ZCMTogcmVxdWlyZSgnLi9tb2Rlcy9jZmIxJyksXG4gIE9GQjogcmVxdWlyZSgnLi9tb2Rlcy9vZmInKSxcbiAgQ1RSOiByZXF1aXJlKCcuL21vZGVzL2N0cicpLFxuICBHQ006IHJlcXVpcmUoJy4vbW9kZXMvY3RyJylcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVjaXBoZXJpdiAoc3VpdGUsIHBhc3N3b3JkLCBpdikge1xuICB2YXIgY29uZmlnID0gbW9kZXNbc3VpdGUudG9Mb3dlckNhc2UoKV1cbiAgaWYgKCFjb25maWcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuICB9XG4gIGlmICh0eXBlb2YgaXYgPT09ICdzdHJpbmcnKSB7XG4gICAgaXYgPSBuZXcgQnVmZmVyKGl2KVxuICB9XG4gIGlmICh0eXBlb2YgcGFzc3dvcmQgPT09ICdzdHJpbmcnKSB7XG4gICAgcGFzc3dvcmQgPSBuZXcgQnVmZmVyKHBhc3N3b3JkKVxuICB9XG4gIGlmIChwYXNzd29yZC5sZW5ndGggIT09IGNvbmZpZy5rZXkgLyA4KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBrZXkgbGVuZ3RoICcgKyBwYXNzd29yZC5sZW5ndGgpXG4gIH1cbiAgaWYgKGl2Lmxlbmd0aCAhPT0gY29uZmlnLml2KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBpdiBsZW5ndGggJyArIGl2Lmxlbmd0aClcbiAgfVxuICBpZiAoY29uZmlnLnR5cGUgPT09ICdzdHJlYW0nKSB7XG4gICAgcmV0dXJuIG5ldyBTdHJlYW1DaXBoZXIobW9kZWxpc3RbY29uZmlnLm1vZGVdLCBwYXNzd29yZCwgaXYsIHRydWUpXG4gIH0gZWxzZSBpZiAoY29uZmlnLnR5cGUgPT09ICdhdXRoJykge1xuICAgIHJldHVybiBuZXcgQXV0aENpcGhlcihtb2RlbGlzdFtjb25maWcubW9kZV0sIHBhc3N3b3JkLCBpdiwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gbmV3IERlY2lwaGVyKG1vZGVsaXN0W2NvbmZpZy5tb2RlXSwgcGFzc3dvcmQsIGl2KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHZhciBjb25maWcgPSBtb2Rlc1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwgY29uZmlnLmtleSwgY29uZmlnLml2KVxuICByZXR1cm4gY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyID0gY3JlYXRlRGVjaXBoZXJcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXJpdiA9IGNyZWF0ZURlY2lwaGVyaXZcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZbkp2ZDNObGNtbG1lUzF6YVdkdUwyNXZaR1ZmYlc5a2RXeGxjeTl3WVhKelpTMWhjMjR4TDI1dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMV0ZsY3k5a1pXTnllWEIwWlhJdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW5aaGNpQmhaWE1nUFNCeVpYRjFhWEpsS0NjdUwyRmxjeWNwWEc1MllYSWdWSEpoYm5ObWIzSnRJRDBnY21WeGRXbHlaU2duWTJsd2FHVnlMV0poYzJVbktWeHVkbUZ5SUdsdWFHVnlhWFJ6SUQwZ2NtVnhkV2x5WlNnbmFXNW9aWEpwZEhNbktWeHVkbUZ5SUcxdlpHVnpJRDBnY21WeGRXbHlaU2duTGk5dGIyUmxjeWNwWEc1MllYSWdVM1J5WldGdFEybHdhR1Z5SUQwZ2NtVnhkV2x5WlNnbkxpOXpkSEpsWVcxRGFYQm9aWEluS1Z4dWRtRnlJRUYxZEdoRGFYQm9aWElnUFNCeVpYRjFhWEpsS0NjdUwyRjFkR2hEYVhCb1pYSW5LVnh1ZG1GeUlHVmlkR3NnUFNCeVpYRjFhWEpsS0NkbGRuQmZZbmwwWlhOMGIydGxlU2NwWEc1Y2JtbHVhR1Z5YVhSektFUmxZMmx3YUdWeUxDQlVjbUZ1YzJadmNtMHBYRzVtZFc1amRHbHZiaUJFWldOcGNHaGxjaUFvYlc5a1pTd2dhMlY1TENCcGRpa2dlMXh1SUNCcFppQW9JU2gwYUdseklHbHVjM1JoYm1ObGIyWWdSR1ZqYVhCb1pYSXBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJFWldOcGNHaGxjaWh0YjJSbExDQnJaWGtzSUdsMktWeHVJQ0I5WEc0Z0lGUnlZVzV6Wm05eWJTNWpZV3hzS0hSb2FYTXBYRzRnSUhSb2FYTXVYMk5oWTJobElEMGdibVYzSUZOd2JHbDBkR1Z5S0NsY2JpQWdkR2hwY3k1ZmJHRnpkQ0E5SUhadmFXUWdNRnh1SUNCMGFHbHpMbDlqYVhCb1pYSWdQU0J1WlhjZ1lXVnpMa0ZGVXloclpYa3BYRzRnSUhSb2FYTXVYM0J5WlhZZ1BTQnVaWGNnUW5WbVptVnlLR2wyTG14bGJtZDBhQ2xjYmlBZ2FYWXVZMjl3ZVNoMGFHbHpMbDl3Y21WMktWeHVJQ0IwYUdsekxsOXRiMlJsSUQwZ2JXOWtaVnh1SUNCMGFHbHpMbDloZFhSdmNHRmtaR2x1WnlBOUlIUnlkV1ZjYm4xY2JrUmxZMmx3YUdWeUxuQnliM1J2ZEhsd1pTNWZkWEJrWVhSbElEMGdablZ1WTNScGIyNGdLR1JoZEdFcElIdGNiaUFnZEdocGN5NWZZMkZqYUdVdVlXUmtLR1JoZEdFcFhHNGdJSFpoY2lCamFIVnVhMXh1SUNCMllYSWdkR2hwYm1kY2JpQWdkbUZ5SUc5MWRDQTlJRnRkWEc0Z0lIZG9hV3hsSUNnb1kyaDFibXNnUFNCMGFHbHpMbDlqWVdOb1pTNW5aWFFvZEdocGN5NWZZWFYwYjNCaFpHUnBibWNwS1NrZ2UxeHVJQ0FnSUhSb2FXNW5JRDBnZEdocGN5NWZiVzlrWlM1a1pXTnllWEIwS0hSb2FYTXNJR05vZFc1cktWeHVJQ0FnSUc5MWRDNXdkWE5vS0hSb2FXNW5LVnh1SUNCOVhHNGdJSEpsZEhWeWJpQkNkV1ptWlhJdVkyOXVZMkYwS0c5MWRDbGNibjFjYmtSbFkybHdhR1Z5TG5CeWIzUnZkSGx3WlM1ZlptbHVZV3dnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUhaaGNpQmphSFZ1YXlBOUlIUm9hWE11WDJOaFkyaGxMbVpzZFhOb0tDbGNiaUFnYVdZZ0tIUm9hWE11WDJGMWRHOXdZV1JrYVc1bktTQjdYRzRnSUNBZ2NtVjBkWEp1SUhWdWNHRmtLSFJvYVhNdVgyMXZaR1V1WkdWamNubHdkQ2gwYUdsekxDQmphSFZ1YXlrcFhHNGdJSDBnWld4elpTQnBaaUFvWTJoMWJtc3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oyUmhkR0VnYm05MElHMTFiSFJwY0d4bElHOW1JR0pzYjJOcklHeGxibWQwYUNjcFhHNGdJSDFjYm4xY2JrUmxZMmx3YUdWeUxuQnliM1J2ZEhsd1pTNXpaWFJCZFhSdlVHRmtaR2x1WnlBOUlHWjFibU4wYVc5dUlDaHpaWFJVYnlrZ2UxeHVJQ0IwYUdsekxsOWhkWFJ2Y0dGa1pHbHVaeUE5SUNFaGMyVjBWRzljYm4xY2JtWjFibU4wYVc5dUlGTndiR2wwZEdWeUlDZ3BJSHRjYmlBZ2FXWWdLQ0VvZEdocGN5QnBibk4wWVc1alpXOW1JRk53YkdsMGRHVnlLU2tnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVTNCc2FYUjBaWElvS1Z4dUlDQjlYRzRnSUhSb2FYTXVZMkZqYUdVZ1BTQnVaWGNnUW5WbVptVnlLQ2NuS1Z4dWZWeHVVM0JzYVhSMFpYSXVjSEp2ZEc5MGVYQmxMbUZrWkNBOUlHWjFibU4wYVc5dUlDaGtZWFJoS1NCN1hHNGdJSFJvYVhNdVkyRmphR1VnUFNCQ2RXWm1aWEl1WTI5dVkyRjBLRnQwYUdsekxtTmhZMmhsTENCa1lYUmhYU2xjYm4xY2JseHVVM0JzYVhSMFpYSXVjSEp2ZEc5MGVYQmxMbWRsZENBOUlHWjFibU4wYVc5dUlDaGhkWFJ2VUdGa1pHbHVaeWtnZTF4dUlDQjJZWElnYjNWMFhHNGdJR2xtSUNoaGRYUnZVR0ZrWkdsdVp5a2dlMXh1SUNBZ0lHbG1JQ2gwYUdsekxtTmhZMmhsTG14bGJtZDBhQ0ErSURFMktTQjdYRzRnSUNBZ0lDQnZkWFFnUFNCMGFHbHpMbU5oWTJobExuTnNhV05sS0RBc0lERTJLVnh1SUNBZ0lDQWdkR2hwY3k1allXTm9aU0E5SUhSb2FYTXVZMkZqYUdVdWMyeHBZMlVvTVRZcFhHNGdJQ0FnSUNCeVpYUjFjbTRnYjNWMFhHNGdJQ0FnZlZ4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6TG1OaFkyaGxMbXhsYm1kMGFDQStQU0F4TmlrZ2UxeHVJQ0FnSUNBZ2IzVjBJRDBnZEdocGN5NWpZV05vWlM1emJHbGpaU2d3TENBeE5pbGNiaUFnSUNBZ0lIUm9hWE11WTJGamFHVWdQU0IwYUdsekxtTmhZMmhsTG5Oc2FXTmxLREUyS1Z4dUlDQWdJQ0FnY21WMGRYSnVJRzkxZEZ4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdiblZzYkZ4dWZWeHVVM0JzYVhSMFpYSXVjSEp2ZEc5MGVYQmxMbVpzZFhOb0lEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQnBaaUFvZEdocGN5NWpZV05vWlM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1allXTm9aVnh1SUNCOVhHNTlYRzVtZFc1amRHbHZiaUIxYm5CaFpDQW9iR0Z6ZENrZ2UxeHVJQ0IyWVhJZ2NHRmtaR1ZrSUQwZ2JHRnpkRnN4TlYxY2JpQWdkbUZ5SUdrZ1BTQXRNVnh1SUNCM2FHbHNaU0FvS3l0cElEd2djR0ZrWkdWa0tTQjdYRzRnSUNBZ2FXWWdLR3hoYzNSYktHa2dLeUFvTVRZZ0xTQndZV1JrWldRcEtWMGdJVDA5SUhCaFpHUmxaQ2tnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2QxYm1GaWJHVWdkRzhnWkdWamNubHdkQ0JrWVhSaEp5bGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2FXWWdLSEJoWkdSbFpDQTlQVDBnTVRZcElIdGNiaUFnSUNCeVpYUjFjbTVjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdiR0Z6ZEM1emJHbGpaU2d3TENBeE5pQXRJSEJoWkdSbFpDbGNibjFjYmx4dWRtRnlJRzF2WkdWc2FYTjBJRDBnZTF4dUlDQkZRMEk2SUhKbGNYVnBjbVVvSnk0dmJXOWtaWE12WldOaUp5a3NYRzRnSUVOQ1F6b2djbVZ4ZFdseVpTZ25MaTl0YjJSbGN5OWpZbU1uS1N4Y2JpQWdRMFpDT2lCeVpYRjFhWEpsS0NjdUwyMXZaR1Z6TDJObVlpY3BMRnh1SUNCRFJrSTRPaUJ5WlhGMWFYSmxLQ2N1TDIxdlpHVnpMMk5tWWpnbktTeGNiaUFnUTBaQ01Ub2djbVZ4ZFdseVpTZ25MaTl0YjJSbGN5OWpabUl4Snlrc1hHNGdJRTlHUWpvZ2NtVnhkV2x5WlNnbkxpOXRiMlJsY3k5dlptSW5LU3hjYmlBZ1ExUlNPaUJ5WlhGMWFYSmxLQ2N1TDIxdlpHVnpMMk4wY2ljcExGeHVJQ0JIUTAwNklISmxjWFZwY21Vb0p5NHZiVzlrWlhNdlkzUnlKeWxjYm4xY2JseHVablZ1WTNScGIyNGdZM0psWVhSbFJHVmphWEJvWlhKcGRpQW9jM1ZwZEdVc0lIQmhjM04zYjNKa0xDQnBkaWtnZTF4dUlDQjJZWElnWTI5dVptbG5JRDBnYlc5a1pYTmJjM1ZwZEdVdWRHOU1iM2RsY2tOaGMyVW9LVjFjYmlBZ2FXWWdLQ0ZqYjI1bWFXY3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLQ2RwYm5aaGJHbGtJSE4xYVhSbElIUjVjR1VuS1Z4dUlDQjlYRzRnSUdsbUlDaDBlWEJsYjJZZ2FYWWdQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnYVhZZ1BTQnVaWGNnUW5WbVptVnlLR2wyS1Z4dUlDQjlYRzRnSUdsbUlDaDBlWEJsYjJZZ2NHRnpjM2R2Y21RZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdjR0Z6YzNkdmNtUWdQU0J1WlhjZ1FuVm1abVZ5S0hCaGMzTjNiM0prS1Z4dUlDQjlYRzRnSUdsbUlDaHdZWE56ZDI5eVpDNXNaVzVuZEdnZ0lUMDlJR052Ym1acFp5NXJaWGtnTHlBNEtTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25hVzUyWVd4cFpDQnJaWGtnYkdWdVozUm9JQ2NnS3lCd1lYTnpkMjl5WkM1c1pXNW5kR2dwWEc0Z0lIMWNiaUFnYVdZZ0tHbDJMbXhsYm1kMGFDQWhQVDBnWTI5dVptbG5MbWwyS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnbmFXNTJZV3hwWkNCcGRpQnNaVzVuZEdnZ0p5QXJJR2wyTG14bGJtZDBhQ2xjYmlBZ2ZWeHVJQ0JwWmlBb1kyOXVabWxuTG5SNWNHVWdQVDA5SUNkemRISmxZVzBuS1NCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCVGRISmxZVzFEYVhCb1pYSW9iVzlrWld4cGMzUmJZMjl1Wm1sbkxtMXZaR1ZkTENCd1lYTnpkMjl5WkN3Z2FYWXNJSFJ5ZFdVcFhHNGdJSDBnWld4elpTQnBaaUFvWTI5dVptbG5MblI1Y0dVZ1BUMDlJQ2RoZFhSb0p5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dRWFYwYUVOcGNHaGxjaWh0YjJSbGJHbHpkRnRqYjI1bWFXY3ViVzlrWlYwc0lIQmhjM04zYjNKa0xDQnBkaXdnZEhKMVpTbGNiaUFnZlZ4dUlDQnlaWFIxY200Z2JtVjNJRVJsWTJsd2FHVnlLRzF2WkdWc2FYTjBXMk52Ym1acFp5NXRiMlJsWFN3Z2NHRnpjM2R2Y21Rc0lHbDJLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmpjbVZoZEdWRVpXTnBjR2hsY2lBb2MzVnBkR1VzSUhCaGMzTjNiM0prS1NCN1hHNGdJSFpoY2lCamIyNW1hV2NnUFNCdGIyUmxjMXR6ZFdsMFpTNTBiMHh2ZDJWeVEyRnpaU2dwWFZ4dUlDQnBaaUFvSVdOdmJtWnBaeWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjJsdWRtRnNhV1FnYzNWcGRHVWdkSGx3WlNjcFhHNGdJSDFjYmlBZ2RtRnlJR3RsZVhNZ1BTQmxZblJyS0hCaGMzTjNiM0prTENCbVlXeHpaU3dnWTI5dVptbG5MbXRsZVN3Z1kyOXVabWxuTG1sMktWeHVJQ0J5WlhSMWNtNGdZM0psWVhSbFJHVmphWEJvWlhKcGRpaHpkV2wwWlN3Z2EyVjVjeTVyWlhrc0lHdGxlWE11YVhZcFhHNTlYRzVsZUhCdmNuUnpMbU55WldGMFpVUmxZMmx3YUdWeUlEMGdZM0psWVhSbFJHVmphWEJvWlhKY2JtVjRjRzl5ZEhNdVkzSmxZWFJsUkdWamFYQm9aWEpwZGlBOUlHTnlaV0YwWlVSbFkybHdhR1Z5YVhaY2JpSmRmUT09IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xudmFyIG1kNSA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoL21kNScpXG5tb2R1bGUuZXhwb3J0cyA9IEVWUF9CeXRlc1RvS2V5XG5mdW5jdGlvbiBFVlBfQnl0ZXNUb0tleSAocGFzc3dvcmQsIHNhbHQsIGtleUxlbiwgaXZMZW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocGFzc3dvcmQpKSB7XG4gICAgcGFzc3dvcmQgPSBuZXcgQnVmZmVyKHBhc3N3b3JkLCAnYmluYXJ5JylcbiAgfVxuICBpZiAoc2FsdCAmJiAhQnVmZmVyLmlzQnVmZmVyKHNhbHQpKSB7XG4gICAgc2FsdCA9IG5ldyBCdWZmZXIoc2FsdCwgJ2JpbmFyeScpXG4gIH1cbiAga2V5TGVuID0ga2V5TGVuIC8gOFxuICBpdkxlbiA9IGl2TGVuIHx8IDBcbiAgdmFyIGtpID0gMFxuICB2YXIgaWkgPSAwXG4gIHZhciBrZXkgPSBuZXcgQnVmZmVyKGtleUxlbilcbiAgdmFyIGl2ID0gbmV3IEJ1ZmZlcihpdkxlbilcbiAgdmFyIGFkZG1kID0gMFxuICB2YXIgbWRfYnVmXG4gIHZhciBpXG4gIHZhciBidWZzID0gW11cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBpZiAoYWRkbWQrKyA+IDApIHtcbiAgICAgIGJ1ZnMucHVzaChtZF9idWYpXG4gICAgfVxuICAgIGJ1ZnMucHVzaChwYXNzd29yZClcbiAgICBpZiAoc2FsdCkge1xuICAgICAgYnVmcy5wdXNoKHNhbHQpXG4gICAgfVxuICAgIG1kX2J1ZiA9IG1kNShCdWZmZXIuY29uY2F0KGJ1ZnMpKVxuICAgIGJ1ZnMgPSBbXVxuICAgIGkgPSAwXG4gICAgaWYgKGtleUxlbiA+IDApIHtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGlmIChrZXlMZW4gPT09IDApIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGlmIChpID09PSBtZF9idWYubGVuZ3RoKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBrZXlba2krK10gPSBtZF9idWZbaV1cbiAgICAgICAga2V5TGVuLS1cbiAgICAgICAgaSsrXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpdkxlbiA+IDAgJiYgaSAhPT0gbWRfYnVmLmxlbmd0aCkge1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgaWYgKGl2TGVuID09PSAwKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaSA9PT0gbWRfYnVmLmxlbmd0aCkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgaXZbaWkrK10gPSBtZF9idWZbaV1cbiAgICAgICAgaXZMZW4tLVxuICAgICAgICBpKytcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGtleUxlbiA9PT0gMCAmJiBpdkxlbiA9PT0gMCkge1xuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbiAgZm9yIChpID0gMDsgaSA8IG1kX2J1Zi5sZW5ndGg7IGkrKykge1xuICAgIG1kX2J1ZltpXSA9IDBcbiAgfVxuICByZXR1cm4ge1xuICAgIGtleToga2V5LFxuICAgIGl2OiBpdlxuICB9XG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WW5KdmQzTmxjbWxtZVMxemFXZHVMMjV2WkdWZmJXOWtkV3hsY3k5d1lYSnpaUzFoYzI0eEwyNXZaR1ZmYlc5a2RXeGxjeTlsZG5CZllubDBaWE4wYjJ0bGVTOXBibVJsZUM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKMllYSWdiV1ExSUQwZ2NtVnhkV2x5WlNnblkzSmxZWFJsTFdoaGMyZ3ZiV1ExSnlsY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1JWWlFYMEo1ZEdWelZHOUxaWGxjYm1aMWJtTjBhVzl1SUVWV1VGOUNlWFJsYzFSdlMyVjVJQ2h3WVhOemQyOXlaQ3dnYzJGc2RDd2dhMlY1VEdWdUxDQnBka3hsYmlrZ2UxeHVJQ0JwWmlBb0lVSjFabVpsY2k1cGMwSjFabVpsY2lod1lYTnpkMjl5WkNrcElIdGNiaUFnSUNCd1lYTnpkMjl5WkNBOUlHNWxkeUJDZFdabVpYSW9jR0Z6YzNkdmNtUXNJQ2RpYVc1aGNua25LVnh1SUNCOVhHNGdJR2xtSUNoellXeDBJQ1ltSUNGQ2RXWm1aWEl1YVhOQ2RXWm1aWElvYzJGc2RDa3BJSHRjYmlBZ0lDQnpZV3gwSUQwZ2JtVjNJRUoxWm1abGNpaHpZV3gwTENBblltbHVZWEo1SnlsY2JpQWdmVnh1SUNCclpYbE1aVzRnUFNCclpYbE1aVzRnTHlBNFhHNGdJR2wyVEdWdUlEMGdhWFpNWlc0Z2ZId2dNRnh1SUNCMllYSWdhMmtnUFNBd1hHNGdJSFpoY2lCcGFTQTlJREJjYmlBZ2RtRnlJR3RsZVNBOUlHNWxkeUJDZFdabVpYSW9hMlY1VEdWdUtWeHVJQ0IyWVhJZ2FYWWdQU0J1WlhjZ1FuVm1abVZ5S0dsMlRHVnVLVnh1SUNCMllYSWdZV1JrYldRZ1BTQXdYRzRnSUhaaGNpQnRaRjlpZFdaY2JpQWdkbUZ5SUdsY2JpQWdkbUZ5SUdKMVpuTWdQU0JiWFZ4dUlDQjNhR2xzWlNBb2RISjFaU2tnZTF4dUlDQWdJR2xtSUNoaFpHUnRaQ3NySUQ0Z01Da2dlMXh1SUNBZ0lDQWdZblZtY3k1d2RYTm9LRzFrWDJKMVppbGNiaUFnSUNCOVhHNGdJQ0FnWW5WbWN5NXdkWE5vS0hCaGMzTjNiM0prS1Z4dUlDQWdJR2xtSUNoellXeDBLU0I3WEc0Z0lDQWdJQ0JpZFdaekxuQjFjMmdvYzJGc2RDbGNiaUFnSUNCOVhHNGdJQ0FnYldSZlluVm1JRDBnYldRMUtFSjFabVpsY2k1amIyNWpZWFFvWW5WbWN5a3BYRzRnSUNBZ1luVm1jeUE5SUZ0ZFhHNGdJQ0FnYVNBOUlEQmNiaUFnSUNCcFppQW9hMlY1VEdWdUlENGdNQ2tnZTF4dUlDQWdJQ0FnZDJocGJHVWdLSFJ5ZFdVcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0d0bGVVeGxiaUE5UFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tHa2dQVDA5SUcxa1gySjFaaTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUd0bGVWdHJhU3NyWFNBOUlHMWtYMkoxWmx0cFhWeHVJQ0FnSUNBZ0lDQnJaWGxNWlc0dExWeHVJQ0FnSUNBZ0lDQnBLeXRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLR2wyVEdWdUlENGdNQ0FtSmlCcElDRTlQU0J0WkY5aWRXWXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQjNhR2xzWlNBb2RISjFaU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9hWFpNWlc0Z1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmljbVZoYTF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2hwSUQwOVBTQnRaRjlpZFdZdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdZbkpsWVd0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBkbHRwYVNzclhTQTlJRzFrWDJKMVpsdHBYVnh1SUNBZ0lDQWdJQ0JwZGt4bGJpMHRYRzRnSUNBZ0lDQWdJR2tySzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvYTJWNVRHVnVJRDA5UFNBd0lDWW1JR2wyVEdWdUlEMDlQU0F3S1NCN1hHNGdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQm1iM0lnS0drZ1BTQXdPeUJwSUR3Z2JXUmZZblZtTG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ2JXUmZZblZtVzJsZElEMGdNRnh1SUNCOVhHNGdJSEpsZEhWeWJpQjdYRzRnSUNBZ2EyVjVPaUJyWlhrc1hHNGdJQ0FnYVhZNklHbDJYRzRnSUgxY2JuMWNiaUpkZlE9PSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG5pbmhlcml0cyhTdHJlYW1DaXBoZXIsIFRyYW5zZm9ybSlcbm1vZHVsZS5leHBvcnRzID0gU3RyZWFtQ2lwaGVyXG5mdW5jdGlvbiBTdHJlYW1DaXBoZXIgKG1vZGUsIGtleSwgaXYsIGRlY3J5cHQpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFN0cmVhbUNpcGhlcikpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihtb2RlLCBrZXksIGl2KVxuICB9XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IG5ldyBCdWZmZXIoaXYubGVuZ3RoKVxuICB0aGlzLl9jYWNoZSA9IG5ldyBCdWZmZXIoJycpXG4gIHRoaXMuX3NlY0NhY2hlID0gbmV3IEJ1ZmZlcignJylcbiAgdGhpcy5fZGVjcnlwdCA9IGRlY3J5cHRcbiAgaXYuY29weSh0aGlzLl9wcmV2KVxuICB0aGlzLl9tb2RlID0gbW9kZVxufVxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIHJldHVybiB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmssIHRoaXMuX2RlY3J5cHQpXG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fY2lwaGVyLnNjcnViKClcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZbkp2ZDNObGNtbG1lUzF6YVdkdUwyNXZaR1ZmYlc5a2RXeGxjeTl3WVhKelpTMWhjMjR4TDI1dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMV0ZsY3k5emRISmxZVzFEYVhCb1pYSXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCaFpYTWdQU0J5WlhGMWFYSmxLQ2N1TDJGbGN5Y3BYRzUyWVhJZ1ZISmhibk5tYjNKdElEMGdjbVZ4ZFdseVpTZ25ZMmx3YUdWeUxXSmhjMlVuS1Z4dWRtRnlJR2x1YUdWeWFYUnpJRDBnY21WeGRXbHlaU2duYVc1b1pYSnBkSE1uS1Z4dVhHNXBibWhsY21sMGN5aFRkSEpsWVcxRGFYQm9aWElzSUZSeVlXNXpabTl5YlNsY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1UzUnlaV0Z0UTJsd2FHVnlYRzVtZFc1amRHbHZiaUJUZEhKbFlXMURhWEJvWlhJZ0tHMXZaR1VzSUd0bGVTd2dhWFlzSUdSbFkzSjVjSFFwSUh0Y2JpQWdhV1lnS0NFb2RHaHBjeUJwYm5OMFlXNWpaVzltSUZOMGNtVmhiVU5wY0dobGNpa3BJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRk4wY21WaGJVTnBjR2hsY2lodGIyUmxMQ0JyWlhrc0lHbDJLVnh1SUNCOVhHNGdJRlJ5WVc1elptOXliUzVqWVd4c0tIUm9hWE1wWEc0Z0lIUm9hWE11WDJOcGNHaGxjaUE5SUc1bGR5QmhaWE11UVVWVEtHdGxlU2xjYmlBZ2RHaHBjeTVmY0hKbGRpQTlJRzVsZHlCQ2RXWm1aWElvYVhZdWJHVnVaM1JvS1Z4dUlDQjBhR2x6TGw5allXTm9aU0E5SUc1bGR5QkNkV1ptWlhJb0p5Y3BYRzRnSUhSb2FYTXVYM05sWTBOaFkyaGxJRDBnYm1WM0lFSjFabVpsY2lnbkp5bGNiaUFnZEdocGN5NWZaR1ZqY25sd2RDQTlJR1JsWTNKNWNIUmNiaUFnYVhZdVkyOXdlU2gwYUdsekxsOXdjbVYyS1Z4dUlDQjBhR2x6TGw5dGIyUmxJRDBnYlc5a1pWeHVmVnh1VTNSeVpXRnRRMmx3YUdWeUxuQnliM1J2ZEhsd1pTNWZkWEJrWVhSbElEMGdablZ1WTNScGIyNGdLR05vZFc1cktTQjdYRzRnSUhKbGRIVnliaUIwYUdsekxsOXRiMlJsTG1WdVkzSjVjSFFvZEdocGN5d2dZMmgxYm1zc0lIUm9hWE11WDJSbFkzSjVjSFFwWEc1OVhHNVRkSEpsWVcxRGFYQm9aWEl1Y0hKdmRHOTBlWEJsTGw5bWFXNWhiQ0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnZEdocGN5NWZZMmx3YUdWeUxuTmpjblZpS0NsY2JuMWNiaUpkZlE9PSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZnVuY3Rpb24gZ2V0QmxvY2sgKHNlbGYpIHtcbiAgc2VsZi5fcHJldiA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgcmV0dXJuIHNlbGYuX3ByZXZcbn1cblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rKSB7XG4gIHdoaWxlIChzZWxmLl9jYWNoZS5sZW5ndGggPCBjaHVuay5sZW5ndGgpIHtcbiAgICBzZWxmLl9jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3NlbGYuX2NhY2hlLCBnZXRCbG9jayhzZWxmKV0pXG4gIH1cblxuICB2YXIgcGFkID0gc2VsZi5fY2FjaGUuc2xpY2UoMCwgY2h1bmsubGVuZ3RoKVxuICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGNodW5rLmxlbmd0aClcbiAgcmV0dXJuIHhvcihjaHVuaywgcGFkKVxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMXphV2R1TDI1dlpHVmZiVzlrZFd4bGN5OXdZWEp6WlMxaGMyNHhMMjV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUxXRmxjeTl0YjJSbGN5OXZabUl1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW5aaGNpQjRiM0lnUFNCeVpYRjFhWEpsS0NkaWRXWm1aWEl0ZUc5eUp5bGNibHh1Wm5WdVkzUnBiMjRnWjJWMFFteHZZMnNnS0hObGJHWXBJSHRjYmlBZ2MyVnNaaTVmY0hKbGRpQTlJSE5sYkdZdVgyTnBjR2hsY2k1bGJtTnllWEIwUW14dlkyc29jMlZzWmk1ZmNISmxkaWxjYmlBZ2NtVjBkWEp1SUhObGJHWXVYM0J5WlhaY2JuMWNibHh1Wlhod2IzSjBjeTVsYm1OeWVYQjBJRDBnWm5WdVkzUnBiMjRnS0hObGJHWXNJR05vZFc1cktTQjdYRzRnSUhkb2FXeGxJQ2h6Wld4bUxsOWpZV05vWlM1c1pXNW5kR2dnUENCamFIVnVheTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQnpaV3htTGw5allXTm9aU0E5SUVKMVptWmxjaTVqYjI1allYUW9XM05sYkdZdVgyTmhZMmhsTENCblpYUkNiRzlqYXloelpXeG1LVjBwWEc0Z0lIMWNibHh1SUNCMllYSWdjR0ZrSUQwZ2MyVnNaaTVmWTJGamFHVXVjMnhwWTJVb01Dd2dZMmgxYm1zdWJHVnVaM1JvS1Z4dUlDQnpaV3htTGw5allXTm9aU0E5SUhObGJHWXVYMk5oWTJobExuTnNhV05sS0dOb2RXNXJMbXhsYm1kMGFDbGNiaUFnY21WMGRYSnVJSGh2Y2loamFIVnVheXdnY0dGa0tWeHVmVnh1SWwxOSIsImFyZ3VtZW50c1s0XVtcIi9ob21lL3VidW50dS9zdGFnaW5nL2FwcHMvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWNpcGhlci9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvZWNiLmpzXCJdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZnVuY3Rpb24gaW5jcjMyIChpdikge1xuICB2YXIgbGVuID0gaXYubGVuZ3RoXG4gIHZhciBpdGVtXG4gIHdoaWxlIChsZW4tLSkge1xuICAgIGl0ZW0gPSBpdi5yZWFkVUludDgobGVuKVxuICAgIGlmIChpdGVtID09PSAyNTUpIHtcbiAgICAgIGl2LndyaXRlVUludDgoMCwgbGVuKVxuICAgIH0gZWxzZSB7XG4gICAgICBpdGVtKytcbiAgICAgIGl2LndyaXRlVUludDgoaXRlbSwgbGVuKVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QmxvY2sgKHNlbGYpIHtcbiAgdmFyIG91dCA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgaW5jcjMyKHNlbGYuX3ByZXYpXG4gIHJldHVybiBvdXRcbn1cblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rKSB7XG4gIHdoaWxlIChzZWxmLl9jYWNoZS5sZW5ndGggPCBjaHVuay5sZW5ndGgpIHtcbiAgICBzZWxmLl9jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3NlbGYuX2NhY2hlLCBnZXRCbG9jayhzZWxmKV0pXG4gIH1cbiAgdmFyIHBhZCA9IHNlbGYuX2NhY2hlLnNsaWNlKDAsIGNodW5rLmxlbmd0aClcbiAgc2VsZi5fY2FjaGUgPSBzZWxmLl9jYWNoZS5zbGljZShjaHVuay5sZW5ndGgpXG4gIHJldHVybiB4b3IoY2h1bmssIHBhZClcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZbkp2ZDNObGNtbG1lUzF6YVdkdUwyNXZaR1ZmYlc5a2RXeGxjeTl3WVhKelpTMWhjMjR4TDI1dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMV0ZsY3k5dGIyUmxjeTlqZEhJdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCNGIzSWdQU0J5WlhGMWFYSmxLQ2RpZFdabVpYSXRlRzl5SnlsY2JseHVablZ1WTNScGIyNGdhVzVqY2pNeUlDaHBkaWtnZTF4dUlDQjJZWElnYkdWdUlEMGdhWFl1YkdWdVozUm9YRzRnSUhaaGNpQnBkR1Z0WEc0Z0lIZG9hV3hsSUNoc1pXNHRMU2tnZTF4dUlDQWdJR2wwWlcwZ1BTQnBkaTV5WldGa1ZVbHVkRGdvYkdWdUtWeHVJQ0FnSUdsbUlDaHBkR1Z0SUQwOVBTQXlOVFVwSUh0Y2JpQWdJQ0FnSUdsMkxuZHlhWFJsVlVsdWREZ29NQ3dnYkdWdUtWeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JwZEdWdEt5dGNiaUFnSUNBZ0lHbDJMbmR5YVhSbFZVbHVkRGdvYVhSbGJTd2diR1Z1S1Z4dUlDQWdJQ0FnWW5KbFlXdGNiaUFnSUNCOVhHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdaMlYwUW14dlkyc2dLSE5sYkdZcElIdGNiaUFnZG1GeUlHOTFkQ0E5SUhObGJHWXVYMk5wY0dobGNpNWxibU55ZVhCMFFteHZZMnNvYzJWc1ppNWZjSEpsZGlsY2JpQWdhVzVqY2pNeUtITmxiR1l1WDNCeVpYWXBYRzRnSUhKbGRIVnliaUJ2ZFhSY2JuMWNibHh1Wlhod2IzSjBjeTVsYm1OeWVYQjBJRDBnWm5WdVkzUnBiMjRnS0hObGJHWXNJR05vZFc1cktTQjdYRzRnSUhkb2FXeGxJQ2h6Wld4bUxsOWpZV05vWlM1c1pXNW5kR2dnUENCamFIVnVheTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQnpaV3htTGw5allXTm9aU0E5SUVKMVptWmxjaTVqYjI1allYUW9XM05sYkdZdVgyTmhZMmhsTENCblpYUkNiRzlqYXloelpXeG1LVjBwWEc0Z0lIMWNiaUFnZG1GeUlIQmhaQ0E5SUhObGJHWXVYMk5oWTJobExuTnNhV05sS0RBc0lHTm9kVzVyTG14bGJtZDBhQ2xjYmlBZ2MyVnNaaTVmWTJGamFHVWdQU0J6Wld4bUxsOWpZV05vWlM1emJHbGpaU2hqYUhWdWF5NXNaVzVuZEdncFhHNGdJSEpsZEhWeWJpQjRiM0lvWTJoMWJtc3NJSEJoWkNsY2JuMWNiaUpkZlE9PSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbmZ1bmN0aW9uIGVuY3J5cHRCeXRlIChzZWxmLCBieXRlUGFyYW0sIGRlY3J5cHQpIHtcbiAgdmFyIHBhZCA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgdmFyIG91dCA9IHBhZFswXSBeIGJ5dGVQYXJhbVxuICBzZWxmLl9wcmV2ID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fcHJldi5zbGljZSgxKSwgbmV3IEJ1ZmZlcihbZGVjcnlwdCA/IGJ5dGVQYXJhbSA6IG91dF0pXSlcbiAgcmV0dXJuIG91dFxufVxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rLCBkZWNyeXB0KSB7XG4gIHZhciBsZW4gPSBjaHVuay5sZW5ndGhcbiAgdmFyIG91dCA9IG5ldyBCdWZmZXIobGVuKVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBlbmNyeXB0Qnl0ZShzZWxmLCBjaHVua1tpXSwgZGVjcnlwdClcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WW5KdmQzTmxjbWxtZVMxemFXZHVMMjV2WkdWZmJXOWtkV3hsY3k5d1lYSnpaUzFoYzI0eEwyNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TFdGbGN5OXRiMlJsY3k5alptSTRMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVpuVnVZM1JwYjI0Z1pXNWpjbmx3ZEVKNWRHVWdLSE5sYkdZc0lHSjVkR1ZRWVhKaGJTd2daR1ZqY25sd2RDa2dlMXh1SUNCMllYSWdjR0ZrSUQwZ2MyVnNaaTVmWTJsd2FHVnlMbVZ1WTNKNWNIUkNiRzlqYXloelpXeG1MbDl3Y21WMktWeHVJQ0IyWVhJZ2IzVjBJRDBnY0dGa1d6QmRJRjRnWW5sMFpWQmhjbUZ0WEc0Z0lITmxiR1l1WDNCeVpYWWdQU0JDZFdabVpYSXVZMjl1WTJGMEtGdHpaV3htTGw5d2NtVjJMbk5zYVdObEtERXBMQ0J1WlhjZ1FuVm1abVZ5S0Z0a1pXTnllWEIwSUQ4Z1lubDBaVkJoY21GdElEb2diM1YwWFNsZEtWeHVJQ0J5WlhSMWNtNGdiM1YwWEc1OVhHNWxlSEJ2Y25SekxtVnVZM0o1Y0hRZ1BTQm1kVzVqZEdsdmJpQW9jMlZzWml3Z1kyaDFibXNzSUdSbFkzSjVjSFFwSUh0Y2JpQWdkbUZ5SUd4bGJpQTlJR05vZFc1ckxteGxibWQwYUZ4dUlDQjJZWElnYjNWMElEMGdibVYzSUVKMVptWmxjaWhzWlc0cFhHNGdJSFpoY2lCcElEMGdMVEZjYmlBZ2QyaHBiR1VnS0NzcmFTQThJR3hsYmlrZ2UxeHVJQ0FnSUc5MWRGdHBYU0E5SUdWdVkzSjVjSFJDZVhSbEtITmxiR1lzSUdOb2RXNXJXMmxkTENCa1pXTnllWEIwS1Z4dUlDQjlYRzRnSUhKbGRIVnliaUJ2ZFhSY2JuMWNiaUpkZlE9PSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbmZ1bmN0aW9uIGVuY3J5cHRCeXRlIChzZWxmLCBieXRlUGFyYW0sIGRlY3J5cHQpIHtcbiAgdmFyIHBhZFxuICB2YXIgaSA9IC0xXG4gIHZhciBsZW4gPSA4XG4gIHZhciBvdXQgPSAwXG4gIHZhciBiaXQsIHZhbHVlXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBwYWQgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gICAgYml0ID0gKGJ5dGVQYXJhbSAmICgxIDw8ICg3IC0gaSkpKSA/IDB4ODAgOiAwXG4gICAgdmFsdWUgPSBwYWRbMF0gXiBiaXRcbiAgICBvdXQgKz0gKCh2YWx1ZSAmIDB4ODApID4+IChpICUgOCkpXG4gICAgc2VsZi5fcHJldiA9IHNoaWZ0SW4oc2VsZi5fcHJldiwgZGVjcnlwdCA/IGJpdCA6IHZhbHVlKVxuICB9XG4gIHJldHVybiBvdXRcbn1cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaywgZGVjcnlwdCkge1xuICB2YXIgbGVuID0gY2h1bmsubGVuZ3RoXG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKGxlbilcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0W2ldID0gZW5jcnlwdEJ5dGUoc2VsZiwgY2h1bmtbaV0sIGRlY3J5cHQpXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuZnVuY3Rpb24gc2hpZnRJbiAoYnVmZmVyLCB2YWx1ZSkge1xuICB2YXIgbGVuID0gYnVmZmVyLmxlbmd0aFxuICB2YXIgaSA9IC0xXG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKGJ1ZmZlci5sZW5ndGgpXG4gIGJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoW2J1ZmZlciwgbmV3IEJ1ZmZlcihbdmFsdWVdKV0pXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBidWZmZXJbaV0gPDwgMSB8IGJ1ZmZlcltpICsgMV0gPj4gKDcpXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMXphV2R1TDI1dlpHVmZiVzlrZFd4bGN5OXdZWEp6WlMxaGMyNHhMMjV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUxXRmxjeTl0YjJSbGN5OWpabUl4TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKbWRXNWpkR2x2YmlCbGJtTnllWEIwUW5sMFpTQW9jMlZzWml3Z1lubDBaVkJoY21GdExDQmtaV055ZVhCMEtTQjdYRzRnSUhaaGNpQndZV1JjYmlBZ2RtRnlJR2tnUFNBdE1WeHVJQ0IyWVhJZ2JHVnVJRDBnT0Z4dUlDQjJZWElnYjNWMElEMGdNRnh1SUNCMllYSWdZbWwwTENCMllXeDFaVnh1SUNCM2FHbHNaU0FvS3l0cElEd2diR1Z1S1NCN1hHNGdJQ0FnY0dGa0lEMGdjMlZzWmk1ZlkybHdhR1Z5TG1WdVkzSjVjSFJDYkc5amF5aHpaV3htTGw5d2NtVjJLVnh1SUNBZ0lHSnBkQ0E5SUNoaWVYUmxVR0Z5WVcwZ0ppQW9NU0E4UENBb055QXRJR2twS1NrZ1B5QXdlRGd3SURvZ01GeHVJQ0FnSUhaaGJIVmxJRDBnY0dGa1d6QmRJRjRnWW1sMFhHNGdJQ0FnYjNWMElDczlJQ2dvZG1Gc2RXVWdKaUF3ZURnd0tTQStQaUFvYVNBbElEZ3BLVnh1SUNBZ0lITmxiR1l1WDNCeVpYWWdQU0J6YUdsbWRFbHVLSE5sYkdZdVgzQnlaWFlzSUdSbFkzSjVjSFFnUHlCaWFYUWdPaUIyWVd4MVpTbGNiaUFnZlZ4dUlDQnlaWFIxY200Z2IzVjBYRzU5WEc1bGVIQnZjblJ6TG1WdVkzSjVjSFFnUFNCbWRXNWpkR2x2YmlBb2MyVnNaaXdnWTJoMWJtc3NJR1JsWTNKNWNIUXBJSHRjYmlBZ2RtRnlJR3hsYmlBOUlHTm9kVzVyTG14bGJtZDBhRnh1SUNCMllYSWdiM1YwSUQwZ2JtVjNJRUoxWm1abGNpaHNaVzRwWEc0Z0lIWmhjaUJwSUQwZ0xURmNiaUFnZDJocGJHVWdLQ3NyYVNBOElHeGxiaWtnZTF4dUlDQWdJRzkxZEZ0cFhTQTlJR1Z1WTNKNWNIUkNlWFJsS0hObGJHWXNJR05vZFc1clcybGRMQ0JrWldOeWVYQjBLVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnZkWFJjYm4xY2JtWjFibU4wYVc5dUlITm9hV1owU1c0Z0tHSjFabVpsY2l3Z2RtRnNkV1VwSUh0Y2JpQWdkbUZ5SUd4bGJpQTlJR0oxWm1abGNpNXNaVzVuZEdoY2JpQWdkbUZ5SUdrZ1BTQXRNVnh1SUNCMllYSWdiM1YwSUQwZ2JtVjNJRUoxWm1abGNpaGlkV1ptWlhJdWJHVnVaM1JvS1Z4dUlDQmlkV1ptWlhJZ1BTQkNkV1ptWlhJdVkyOXVZMkYwS0Z0aWRXWm1aWElzSUc1bGR5QkNkV1ptWlhJb1czWmhiSFZsWFNsZEtWeHVJQ0IzYUdsc1pTQW9LeXRwSUR3Z2JHVnVLU0I3WEc0Z0lDQWdiM1YwVzJsZElEMGdZblZtWm1WeVcybGRJRHc4SURFZ2ZDQmlkV1ptWlhKYmFTQXJJREZkSUQ0K0lDZzNLVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnZkWFJjYm4xY2JpSmRmUT09IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xudmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgZGF0YSwgZGVjcnlwdCkge1xuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcignJylcbiAgdmFyIGxlblxuXG4gIHdoaWxlIChkYXRhLmxlbmd0aCkge1xuICAgIGlmIChzZWxmLl9jYWNoZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHNlbGYuX2NhY2hlID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICAgICAgc2VsZi5fcHJldiA9IG5ldyBCdWZmZXIoJycpXG4gICAgfVxuXG4gICAgaWYgKHNlbGYuX2NhY2hlLmxlbmd0aCA8PSBkYXRhLmxlbmd0aCkge1xuICAgICAgbGVuID0gc2VsZi5fY2FjaGUubGVuZ3RoXG4gICAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFtvdXQsIGVuY3J5cHRTdGFydChzZWxmLCBkYXRhLnNsaWNlKDAsIGxlbiksIGRlY3J5cHQpXSlcbiAgICAgIGRhdGEgPSBkYXRhLnNsaWNlKGxlbilcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ID0gQnVmZmVyLmNvbmNhdChbb3V0LCBlbmNyeXB0U3RhcnQoc2VsZiwgZGF0YSwgZGVjcnlwdCldKVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3V0XG59XG5mdW5jdGlvbiBlbmNyeXB0U3RhcnQgKHNlbGYsIGRhdGEsIGRlY3J5cHQpIHtcbiAgdmFyIGxlbiA9IGRhdGEubGVuZ3RoXG4gIHZhciBvdXQgPSB4b3IoZGF0YSwgc2VsZi5fY2FjaGUpXG4gIHNlbGYuX2NhY2hlID0gc2VsZi5fY2FjaGUuc2xpY2UobGVuKVxuICBzZWxmLl9wcmV2ID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fcHJldiwgZGVjcnlwdCA/IGRhdGEgOiBvdXRdKVxuICByZXR1cm4gb3V0XG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WW5KdmQzTmxjbWxtZVMxemFXZHVMMjV2WkdWZmJXOWtkV3hsY3k5d1lYSnpaUzFoYzI0eEwyNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TFdGbGN5OXRiMlJsY3k5alptSXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW5aaGNpQjRiM0lnUFNCeVpYRjFhWEpsS0NkaWRXWm1aWEl0ZUc5eUp5bGNibHh1Wlhod2IzSjBjeTVsYm1OeWVYQjBJRDBnWm5WdVkzUnBiMjRnS0hObGJHWXNJR1JoZEdFc0lHUmxZM0o1Y0hRcElIdGNiaUFnZG1GeUlHOTFkQ0E5SUc1bGR5QkNkV1ptWlhJb0p5Y3BYRzRnSUhaaGNpQnNaVzVjYmx4dUlDQjNhR2xzWlNBb1pHRjBZUzVzWlc1bmRHZ3BJSHRjYmlBZ0lDQnBaaUFvYzJWc1ppNWZZMkZqYUdVdWJHVnVaM1JvSUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0J6Wld4bUxsOWpZV05vWlNBOUlITmxiR1l1WDJOcGNHaGxjaTVsYm1OeWVYQjBRbXh2WTJzb2MyVnNaaTVmY0hKbGRpbGNiaUFnSUNBZ0lITmxiR1l1WDNCeVpYWWdQU0J1WlhjZ1FuVm1abVZ5S0NjbktWeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaHpaV3htTGw5allXTm9aUzVzWlc1bmRHZ2dQRDBnWkdGMFlTNXNaVzVuZEdncElIdGNiaUFnSUNBZ0lHeGxiaUE5SUhObGJHWXVYMk5oWTJobExteGxibWQwYUZ4dUlDQWdJQ0FnYjNWMElEMGdRblZtWm1WeUxtTnZibU5oZENoYmIzVjBMQ0JsYm1OeWVYQjBVM1JoY25Rb2MyVnNaaXdnWkdGMFlTNXpiR2xqWlNnd0xDQnNaVzRwTENCa1pXTnllWEIwS1YwcFhHNGdJQ0FnSUNCa1lYUmhJRDBnWkdGMFlTNXpiR2xqWlNoc1pXNHBYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUc5MWRDQTlJRUoxWm1abGNpNWpiMjVqWVhRb1cyOTFkQ3dnWlc1amNubHdkRk4wWVhKMEtITmxiR1lzSUdSaGRHRXNJR1JsWTNKNWNIUXBYU2xjYmlBZ0lDQWdJR0p5WldGclhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUc5MWRGeHVmVnh1Wm5WdVkzUnBiMjRnWlc1amNubHdkRk4wWVhKMElDaHpaV3htTENCa1lYUmhMQ0JrWldOeWVYQjBLU0I3WEc0Z0lIWmhjaUJzWlc0Z1BTQmtZWFJoTG14bGJtZDBhRnh1SUNCMllYSWdiM1YwSUQwZ2VHOXlLR1JoZEdFc0lITmxiR1l1WDJOaFkyaGxLVnh1SUNCelpXeG1MbDlqWVdOb1pTQTlJSE5sYkdZdVgyTmhZMmhsTG5Oc2FXTmxLR3hsYmlsY2JpQWdjMlZzWmk1ZmNISmxkaUE5SUVKMVptWmxjaTVqYjI1allYUW9XM05sYkdZdVgzQnlaWFlzSUdSbFkzSjVjSFFnUHlCa1lYUmhJRG9nYjNWMFhTbGNiaUFnY21WMGRYSnVJRzkxZEZ4dWZWeHVJbDE5IiwiYXJndW1lbnRzWzRdW1wiL2hvbWUvdWJ1bnR1L3N0YWdpbmcvYXBwcy9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktY2lwaGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jYmMuanNcIl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpIiwiYXJndW1lbnRzWzRdW1wiL2hvbWUvdWJ1bnR1L3N0YWdpbmcvYXBwcy9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktY2lwaGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy5qc1wiXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykiLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG52YXIgYWVzID0gcmVxdWlyZSgnLi9hZXMnKVxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBHSEFTSCA9IHJlcXVpcmUoJy4vZ2hhc2gnKVxudmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuaW5oZXJpdHMoU3RyZWFtQ2lwaGVyLCBUcmFuc2Zvcm0pXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmVhbUNpcGhlclxuXG5mdW5jdGlvbiBTdHJlYW1DaXBoZXIgKG1vZGUsIGtleSwgaXYsIGRlY3J5cHQpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFN0cmVhbUNpcGhlcikpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihtb2RlLCBrZXksIGl2KVxuICB9XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuX2ZpbklEID0gQnVmZmVyLmNvbmNhdChbaXYsIG5ldyBCdWZmZXIoWzAsIDAsIDAsIDFdKV0pXG4gIGl2ID0gQnVmZmVyLmNvbmNhdChbaXYsIG5ldyBCdWZmZXIoWzAsIDAsIDAsIDJdKV0pXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IG5ldyBCdWZmZXIoaXYubGVuZ3RoKVxuICB0aGlzLl9jYWNoZSA9IG5ldyBCdWZmZXIoJycpXG4gIHRoaXMuX3NlY0NhY2hlID0gbmV3IEJ1ZmZlcignJylcbiAgdGhpcy5fZGVjcnlwdCA9IGRlY3J5cHRcbiAgdGhpcy5fYWxlbiA9IDBcbiAgdGhpcy5fbGVuID0gMFxuICBpdi5jb3B5KHRoaXMuX3ByZXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG4gIHZhciBoID0gbmV3IEJ1ZmZlcig0KVxuICBoLmZpbGwoMClcbiAgdGhpcy5fZ2hhc2ggPSBuZXcgR0hBU0godGhpcy5fY2lwaGVyLmVuY3J5cHRCbG9jayhoKSlcbiAgdGhpcy5fYXV0aFRhZyA9IG51bGxcbiAgdGhpcy5fY2FsbGVkID0gZmFsc2Vcbn1cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChjaHVuaykge1xuICBpZiAoIXRoaXMuX2NhbGxlZCAmJiB0aGlzLl9hbGVuKSB7XG4gICAgdmFyIHJ1bXAgPSAxNiAtICh0aGlzLl9hbGVuICUgMTYpXG4gICAgaWYgKHJ1bXAgPCAxNikge1xuICAgICAgcnVtcCA9IG5ldyBCdWZmZXIocnVtcClcbiAgICAgIHJ1bXAuZmlsbCgwKVxuICAgICAgdGhpcy5fZ2hhc2gudXBkYXRlKHJ1bXApXG4gICAgfVxuICB9XG4gIHRoaXMuX2NhbGxlZCA9IHRydWVcbiAgdmFyIG91dCA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgaWYgKHRoaXMuX2RlY3J5cHQpIHtcbiAgICB0aGlzLl9naGFzaC51cGRhdGUoY2h1bmspXG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fZ2hhc2gudXBkYXRlKG91dClcbiAgfVxuICB0aGlzLl9sZW4gKz0gY2h1bmsubGVuZ3RoXG4gIHJldHVybiBvdXRcbn1cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5fZGVjcnlwdCAmJiAhdGhpcy5fYXV0aFRhZykge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgc3RhdGUgb3IgdW5hYmxlIHRvIGF1dGhlbnRpY2F0ZSBkYXRhJylcbiAgfVxuICB2YXIgdGFnID0geG9yKHRoaXMuX2doYXNoLmZpbmFsKHRoaXMuX2FsZW4gKiA4LCB0aGlzLl9sZW4gKiA4KSwgdGhpcy5fY2lwaGVyLmVuY3J5cHRCbG9jayh0aGlzLl9maW5JRCkpXG4gIGlmICh0aGlzLl9kZWNyeXB0KSB7XG4gICAgaWYgKHhvclRlc3QodGFnLCB0aGlzLl9hdXRoVGFnKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBzdGF0ZSBvciB1bmFibGUgdG8gYXV0aGVudGljYXRlIGRhdGEnKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9hdXRoVGFnID0gdGFnXG4gIH1cbiAgdGhpcy5fY2lwaGVyLnNjcnViKClcbn1cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuZ2V0QXV0aFRhZyA9IGZ1bmN0aW9uIGdldEF1dGhUYWcgKCkge1xuICBpZiAoIXRoaXMuX2RlY3J5cHQgJiYgQnVmZmVyLmlzQnVmZmVyKHRoaXMuX2F1dGhUYWcpKSB7XG4gICAgcmV0dXJuIHRoaXMuX2F1dGhUYWdcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRpbmcgdG8gZ2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbiAgfVxufVxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5zZXRBdXRoVGFnID0gZnVuY3Rpb24gc2V0QXV0aFRhZyAodGFnKSB7XG4gIGlmICh0aGlzLl9kZWNyeXB0KSB7XG4gICAgdGhpcy5fYXV0aFRhZyA9IHRhZ1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGluZyB0byBzZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxuICB9XG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLnNldEFBRCA9IGZ1bmN0aW9uIHNldEFBRCAoYnVmKSB7XG4gIGlmICghdGhpcy5fY2FsbGVkKSB7XG4gICAgdGhpcy5fZ2hhc2gudXBkYXRlKGJ1ZilcbiAgICB0aGlzLl9hbGVuICs9IGJ1Zi5sZW5ndGhcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRpbmcgdG8gc2V0IEFBRCBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG4gIH1cbn1cbmZ1bmN0aW9uIHhvclRlc3QgKGEsIGIpIHtcbiAgdmFyIG91dCA9IDBcbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgIG91dCsrXG4gIH1cbiAgdmFyIGxlbiA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aClcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0ICs9IChhW2ldIF4gYltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WW5KdmQzTmxjbWxtZVMxemFXZHVMMjV2WkdWZmJXOWtkV3hsY3k5d1lYSnpaUzFoYzI0eEwyNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TFdGbGN5OWhkWFJvUTJsd2FHVnlMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2labWxzWlNJNkltZGxibVZ5WVhSbFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUoyWVhJZ1lXVnpJRDBnY21WeGRXbHlaU2duTGk5aFpYTW5LVnh1ZG1GeUlGUnlZVzV6Wm05eWJTQTlJSEpsY1hWcGNtVW9KMk5wY0dobGNpMWlZWE5sSnlsY2JuWmhjaUJwYm1obGNtbDBjeUE5SUhKbGNYVnBjbVVvSjJsdWFHVnlhWFJ6SnlsY2JuWmhjaUJIU0VGVFNDQTlJSEpsY1hWcGNtVW9KeTR2WjJoaGMyZ25LVnh1ZG1GeUlIaHZjaUE5SUhKbGNYVnBjbVVvSjJKMVptWmxjaTE0YjNJbktWeHVhVzVvWlhKcGRITW9VM1J5WldGdFEybHdhR1Z5TENCVWNtRnVjMlp2Y20wcFhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlGTjBjbVZoYlVOcGNHaGxjbHh1WEc1bWRXNWpkR2x2YmlCVGRISmxZVzFEYVhCb1pYSWdLRzF2WkdVc0lHdGxlU3dnYVhZc0lHUmxZM0o1Y0hRcElIdGNiaUFnYVdZZ0tDRW9kR2hwY3lCcGJuTjBZVzVqWlc5bUlGTjBjbVZoYlVOcGNHaGxjaWtwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZOMGNtVmhiVU5wY0dobGNpaHRiMlJsTENCclpYa3NJR2wyS1Z4dUlDQjlYRzRnSUZSeVlXNXpabTl5YlM1allXeHNLSFJvYVhNcFhHNGdJSFJvYVhNdVgyWnBia2xFSUQwZ1FuVm1abVZ5TG1OdmJtTmhkQ2hiYVhZc0lHNWxkeUJDZFdabVpYSW9XekFzSURBc0lEQXNJREZkS1YwcFhHNGdJR2wySUQwZ1FuVm1abVZ5TG1OdmJtTmhkQ2hiYVhZc0lHNWxkeUJDZFdabVpYSW9XekFzSURBc0lEQXNJREpkS1YwcFhHNGdJSFJvYVhNdVgyTnBjR2hsY2lBOUlHNWxkeUJoWlhNdVFVVlRLR3RsZVNsY2JpQWdkR2hwY3k1ZmNISmxkaUE5SUc1bGR5QkNkV1ptWlhJb2FYWXViR1Z1WjNSb0tWeHVJQ0IwYUdsekxsOWpZV05vWlNBOUlHNWxkeUJDZFdabVpYSW9KeWNwWEc0Z0lIUm9hWE11WDNObFkwTmhZMmhsSUQwZ2JtVjNJRUoxWm1abGNpZ25KeWxjYmlBZ2RHaHBjeTVmWkdWamNubHdkQ0E5SUdSbFkzSjVjSFJjYmlBZ2RHaHBjeTVmWVd4bGJpQTlJREJjYmlBZ2RHaHBjeTVmYkdWdUlEMGdNRnh1SUNCcGRpNWpiM0I1S0hSb2FYTXVYM0J5WlhZcFhHNGdJSFJvYVhNdVgyMXZaR1VnUFNCdGIyUmxYRzRnSUhaaGNpQm9JRDBnYm1WM0lFSjFabVpsY2lnMEtWeHVJQ0JvTG1acGJHd29NQ2xjYmlBZ2RHaHBjeTVmWjJoaGMyZ2dQU0J1WlhjZ1IwaEJVMGdvZEdocGN5NWZZMmx3YUdWeUxtVnVZM0o1Y0hSQ2JHOWpheWhvS1NsY2JpQWdkR2hwY3k1ZllYVjBhRlJoWnlBOUlHNTFiR3hjYmlBZ2RHaHBjeTVmWTJGc2JHVmtJRDBnWm1Gc2MyVmNibjFjYmxOMGNtVmhiVU5wY0dobGNpNXdjbTkwYjNSNWNHVXVYM1Z3WkdGMFpTQTlJR1oxYm1OMGFXOXVJQ2hqYUhWdWF5a2dlMXh1SUNCcFppQW9JWFJvYVhNdVgyTmhiR3hsWkNBbUppQjBhR2x6TGw5aGJHVnVLU0I3WEc0Z0lDQWdkbUZ5SUhKMWJYQWdQU0F4TmlBdElDaDBhR2x6TGw5aGJHVnVJQ1VnTVRZcFhHNGdJQ0FnYVdZZ0tISjFiWEFnUENBeE5pa2dlMXh1SUNBZ0lDQWdjblZ0Y0NBOUlHNWxkeUJDZFdabVpYSW9jblZ0Y0NsY2JpQWdJQ0FnSUhKMWJYQXVabWxzYkNnd0tWeHVJQ0FnSUNBZ2RHaHBjeTVmWjJoaGMyZ3VkWEJrWVhSbEtISjFiWEFwWEc0Z0lDQWdmVnh1SUNCOVhHNGdJSFJvYVhNdVgyTmhiR3hsWkNBOUlIUnlkV1ZjYmlBZ2RtRnlJRzkxZENBOUlIUm9hWE11WDIxdlpHVXVaVzVqY25sd2RDaDBhR2x6TENCamFIVnVheWxjYmlBZ2FXWWdLSFJvYVhNdVgyUmxZM0o1Y0hRcElIdGNiaUFnSUNCMGFHbHpMbDluYUdGemFDNTFjR1JoZEdVb1kyaDFibXNwWEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnZEdocGN5NWZaMmhoYzJndWRYQmtZWFJsS0c5MWRDbGNiaUFnZlZ4dUlDQjBhR2x6TGw5c1pXNGdLejBnWTJoMWJtc3ViR1Z1WjNSb1hHNGdJSEpsZEhWeWJpQnZkWFJjYm4xY2JsTjBjbVZoYlVOcGNHaGxjaTV3Y205MGIzUjVjR1V1WDJacGJtRnNJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0JwWmlBb2RHaHBjeTVmWkdWamNubHdkQ0FtSmlBaGRHaHBjeTVmWVhWMGFGUmhaeWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25WVzV6ZFhCd2IzSjBaV1FnYzNSaGRHVWdiM0lnZFc1aFlteGxJSFJ2SUdGMWRHaGxiblJwWTJGMFpTQmtZWFJoSnlsY2JpQWdmVnh1SUNCMllYSWdkR0ZuSUQwZ2VHOXlLSFJvYVhNdVgyZG9ZWE5vTG1acGJtRnNLSFJvYVhNdVgyRnNaVzRnS2lBNExDQjBhR2x6TGw5c1pXNGdLaUE0S1N3Z2RHaHBjeTVmWTJsd2FHVnlMbVZ1WTNKNWNIUkNiRzlqYXloMGFHbHpMbDltYVc1SlJDa3BYRzRnSUdsbUlDaDBhR2x6TGw5a1pXTnllWEIwS1NCN1hHNGdJQ0FnYVdZZ0tIaHZjbFJsYzNRb2RHRm5MQ0IwYUdsekxsOWhkWFJvVkdGbktTa2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZFZibk4xY0hCdmNuUmxaQ0J6ZEdGMFpTQnZjaUIxYm1GaWJHVWdkRzhnWVhWMGFHVnVkR2xqWVhSbElHUmhkR0VuS1Z4dUlDQWdJSDFjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0IwYUdsekxsOWhkWFJvVkdGbklEMGdkR0ZuWEc0Z0lIMWNiaUFnZEdocGN5NWZZMmx3YUdWeUxuTmpjblZpS0NsY2JuMWNibE4wY21WaGJVTnBjR2hsY2k1d2NtOTBiM1I1Y0dVdVoyVjBRWFYwYUZSaFp5QTlJR1oxYm1OMGFXOXVJR2RsZEVGMWRHaFVZV2NnS0NrZ2UxeHVJQ0JwWmlBb0lYUm9hWE11WDJSbFkzSjVjSFFnSmlZZ1FuVm1abVZ5TG1selFuVm1abVZ5S0hSb2FYTXVYMkYxZEdoVVlXY3BLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WDJGMWRHaFVZV2RjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMEYwZEdWdGNIUnBibWNnZEc4Z1oyVjBJR0YxZEdnZ2RHRm5JR2x1SUhWdWMzVndjRzl5ZEdWa0lITjBZWFJsSnlsY2JpQWdmVnh1ZlZ4dVUzUnlaV0Z0UTJsd2FHVnlMbkJ5YjNSdmRIbHdaUzV6WlhSQmRYUm9WR0ZuSUQwZ1puVnVZM1JwYjI0Z2MyVjBRWFYwYUZSaFp5QW9kR0ZuS1NCN1hHNGdJR2xtSUNoMGFHbHpMbDlrWldOeWVYQjBLU0I3WEc0Z0lDQWdkR2hwY3k1ZllYVjBhRlJoWnlBOUlIUmhaMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25RWFIwWlcxd2RHbHVaeUIwYnlCelpYUWdZWFYwYUNCMFlXY2dhVzRnZFc1emRYQndiM0owWldRZ2MzUmhkR1VuS1Z4dUlDQjlYRzU5WEc1VGRISmxZVzFEYVhCb1pYSXVjSEp2ZEc5MGVYQmxMbk5sZEVGQlJDQTlJR1oxYm1OMGFXOXVJSE5sZEVGQlJDQW9ZblZtS1NCN1hHNGdJR2xtSUNnaGRHaHBjeTVmWTJGc2JHVmtLU0I3WEc0Z0lDQWdkR2hwY3k1ZloyaGhjMmd1ZFhCa1lYUmxLR0oxWmlsY2JpQWdJQ0IwYUdsekxsOWhiR1Z1SUNzOUlHSjFaaTVzWlc1bmRHaGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0owRjBkR1Z0Y0hScGJtY2dkRzhnYzJWMElFRkJSQ0JwYmlCMWJuTjFjSEJ2Y25SbFpDQnpkR0YwWlNjcFhHNGdJSDFjYm4xY2JtWjFibU4wYVc5dUlIaHZjbFJsYzNRZ0tHRXNJR0lwSUh0Y2JpQWdkbUZ5SUc5MWRDQTlJREJjYmlBZ2FXWWdLR0V1YkdWdVozUm9JQ0U5UFNCaUxteGxibWQwYUNrZ2UxeHVJQ0FnSUc5MWRDc3JYRzRnSUgxY2JpQWdkbUZ5SUd4bGJpQTlJRTFoZEdndWJXbHVLR0V1YkdWdVozUm9MQ0JpTG14bGJtZDBhQ2xjYmlBZ2RtRnlJR2tnUFNBdE1WeHVJQ0IzYUdsc1pTQW9LeXRwSUR3Z2JHVnVLU0I3WEc0Z0lDQWdiM1YwSUNzOUlDaGhXMmxkSUY0Z1lsdHBYU2xjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdiM1YwWEc1OVhHNGlYWDA9IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3N0cmVhbScpLlRyYW5zZm9ybVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2RlcicpLlN0cmluZ0RlY29kZXJcbm1vZHVsZS5leHBvcnRzID0gQ2lwaGVyQmFzZVxuaW5oZXJpdHMoQ2lwaGVyQmFzZSwgVHJhbnNmb3JtKVxuZnVuY3Rpb24gQ2lwaGVyQmFzZSAoaGFzaE1vZGUpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5oYXNoTW9kZSA9IHR5cGVvZiBoYXNoTW9kZSA9PT0gJ3N0cmluZydcbiAgaWYgKHRoaXMuaGFzaE1vZGUpIHtcbiAgICB0aGlzW2hhc2hNb2RlXSA9IHRoaXMuX2ZpbmFsT3JEaWdlc3RcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmZpbmFsID0gdGhpcy5fZmluYWxPckRpZ2VzdFxuICB9XG4gIHRoaXMuX2RlY29kZXIgPSBudWxsXG4gIHRoaXMuX2VuY29kaW5nID0gbnVsbFxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEsIGlucHV0RW5jLCBvdXRwdXRFbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGRhdGEgPSBuZXcgQnVmZmVyKGRhdGEsIGlucHV0RW5jKVxuICB9XG4gIHZhciBvdXREYXRhID0gdGhpcy5fdXBkYXRlKGRhdGEpXG4gIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuICBpZiAob3V0cHV0RW5jKSB7XG4gICAgb3V0RGF0YSA9IHRoaXMuX3RvU3RyaW5nKG91dERhdGEsIG91dHB1dEVuYylcbiAgfVxuICByZXR1cm4gb3V0RGF0YVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uICgpIHt9XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLmdldEF1dGhUYWcgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIGdldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEF1dGhUYWcgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEFBRCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gc2V0IGFhZCBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoZGF0YSwgXywgbmV4dCkge1xuICB2YXIgZXJyXG4gIHRyeSB7XG4gICAgaWYgKHRoaXMuaGFzaE1vZGUpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZShkYXRhKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1c2godGhpcy5fdXBkYXRlKGRhdGEpKVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfSBmaW5hbGx5IHtcbiAgICBuZXh0KGVycilcbiAgfVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZsdXNoID0gZnVuY3Rpb24gKGRvbmUpIHtcbiAgdmFyIGVyclxuICB0cnkge1xuICAgIHRoaXMucHVzaCh0aGlzLl9maW5hbCgpKVxuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyID0gZVxuICB9IGZpbmFsbHkge1xuICAgIGRvbmUoZXJyKVxuICB9XG59XG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fZmluYWxPckRpZ2VzdCA9IGZ1bmN0aW9uIChvdXRwdXRFbmMpIHtcbiAgdmFyIG91dERhdGEgPSB0aGlzLl9maW5hbCgpIHx8IG5ldyBCdWZmZXIoJycpXG4gIGlmIChvdXRwdXRFbmMpIHtcbiAgICBvdXREYXRhID0gdGhpcy5fdG9TdHJpbmcob3V0RGF0YSwgb3V0cHV0RW5jLCB0cnVlKVxuICB9XG4gIHJldHVybiBvdXREYXRhXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLl90b1N0cmluZyA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jLCBmaW5hbCkge1xuICBpZiAoIXRoaXMuX2RlY29kZXIpIHtcbiAgICB0aGlzLl9kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKVxuICAgIHRoaXMuX2VuY29kaW5nID0gZW5jXG4gIH1cbiAgaWYgKHRoaXMuX2VuY29kaW5nICE9PSBlbmMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NhblxcJ3Qgc3dpdGNoIGVuY29kaW5ncycpXG4gIH1cbiAgdmFyIG91dCA9IHRoaXMuX2RlY29kZXIud3JpdGUodmFsdWUpXG4gIGlmIChmaW5hbCkge1xuICAgIG91dCArPSB0aGlzLl9kZWNvZGVyLmVuZCgpXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMXphV2R1TDI1dlpHVmZiVzlrZFd4bGN5OXdZWEp6WlMxaGMyNHhMMjV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUxXRmxjeTl1YjJSbFgyMXZaSFZzWlhNdlkybHdhR1Z5TFdKaGMyVXZhVzVrWlhndWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CSWl3aVptbHNaU0k2SW1kbGJtVnlZWFJsWkM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SjJZWElnVkhKaGJuTm1iM0p0SUQwZ2NtVnhkV2x5WlNnbmMzUnlaV0Z0SnlrdVZISmhibk5tYjNKdFhHNTJZWElnYVc1b1pYSnBkSE1nUFNCeVpYRjFhWEpsS0NkcGJtaGxjbWwwY3ljcFhHNTJZWElnVTNSeWFXNW5SR1ZqYjJSbGNpQTlJSEpsY1hWcGNtVW9KM04wY21sdVoxOWtaV052WkdWeUp5a3VVM1J5YVc1blJHVmpiMlJsY2x4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCRGFYQm9aWEpDWVhObFhHNXBibWhsY21sMGN5aERhWEJvWlhKQ1lYTmxMQ0JVY21GdWMyWnZjbTBwWEc1bWRXNWpkR2x2YmlCRGFYQm9aWEpDWVhObElDaG9ZWE5vVFc5a1pTa2dlMXh1SUNCVWNtRnVjMlp2Y20wdVkyRnNiQ2gwYUdsektWeHVJQ0IwYUdsekxtaGhjMmhOYjJSbElEMGdkSGx3Wlc5bUlHaGhjMmhOYjJSbElEMDlQU0FuYzNSeWFXNW5KMXh1SUNCcFppQW9kR2hwY3k1b1lYTm9UVzlrWlNrZ2UxeHVJQ0FnSUhSb2FYTmJhR0Z6YUUxdlpHVmRJRDBnZEdocGN5NWZabWx1WVd4UGNrUnBaMlZ6ZEZ4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhSb2FYTXVabWx1WVd3Z1BTQjBhR2x6TGw5bWFXNWhiRTl5UkdsblpYTjBYRzRnSUgxY2JpQWdkR2hwY3k1ZlpHVmpiMlJsY2lBOUlHNTFiR3hjYmlBZ2RHaHBjeTVmWlc1amIyUnBibWNnUFNCdWRXeHNYRzU5WEc1RGFYQm9aWEpDWVhObExuQnliM1J2ZEhsd1pTNTFjR1JoZEdVZ1BTQm1kVzVqZEdsdmJpQW9aR0YwWVN3Z2FXNXdkWFJGYm1Nc0lHOTFkSEIxZEVWdVl5a2dlMXh1SUNCcFppQW9kSGx3Wlc5bUlHUmhkR0VnUFQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ1pHRjBZU0E5SUc1bGR5QkNkV1ptWlhJb1pHRjBZU3dnYVc1d2RYUkZibU1wWEc0Z0lIMWNiaUFnZG1GeUlHOTFkRVJoZEdFZ1BTQjBhR2x6TGw5MWNHUmhkR1VvWkdGMFlTbGNiaUFnYVdZZ0tIUm9hWE11YUdGemFFMXZaR1VwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwYzF4dUlDQjlYRzRnSUdsbUlDaHZkWFJ3ZFhSRmJtTXBJSHRjYmlBZ0lDQnZkWFJFWVhSaElEMGdkR2hwY3k1ZmRHOVRkSEpwYm1jb2IzVjBSR0YwWVN3Z2IzVjBjSFYwUlc1aktWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCdmRYUkVZWFJoWEc1OVhHNWNia05wY0dobGNrSmhjMlV1Y0hKdmRHOTBlWEJsTG5ObGRFRjFkRzlRWVdSa2FXNW5JRDBnWm5WdVkzUnBiMjRnS0NrZ2UzMWNibHh1UTJsd2FHVnlRbUZ6WlM1d2NtOTBiM1I1Y0dVdVoyVjBRWFYwYUZSaFp5QTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZDBjbmxwYm1jZ2RHOGdaMlYwSUdGMWRHZ2dkR0ZuSUdsdUlIVnVjM1Z3Y0c5eWRHVmtJSE4wWVhSbEp5bGNibjFjYmx4dVEybHdhR1Z5UW1GelpTNXdjbTkwYjNSNWNHVXVjMlYwUVhWMGFGUmhaeUE5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2QwY25scGJtY2dkRzhnYzJWMElHRjFkR2dnZEdGbklHbHVJSFZ1YzNWd2NHOXlkR1ZrSUhOMFlYUmxKeWxjYm4xY2JseHVRMmx3YUdWeVFtRnpaUzV3Y205MGIzUjVjR1V1YzJWMFFVRkVJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KM1J5ZVdsdVp5QjBieUJ6WlhRZ1lXRmtJR2x1SUhWdWMzVndjRzl5ZEdWa0lITjBZWFJsSnlsY2JuMWNibHh1UTJsd2FHVnlRbUZ6WlM1d2NtOTBiM1I1Y0dVdVgzUnlZVzV6Wm05eWJTQTlJR1oxYm1OMGFXOXVJQ2hrWVhSaExDQmZMQ0J1WlhoMEtTQjdYRzRnSUhaaGNpQmxjbkpjYmlBZ2RISjVJSHRjYmlBZ0lDQnBaaUFvZEdocGN5NW9ZWE5vVFc5a1pTa2dlMXh1SUNBZ0lDQWdkR2hwY3k1ZmRYQmtZWFJsS0dSaGRHRXBYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhSb2FYTXVjSFZ6YUNoMGFHbHpMbDkxY0dSaGRHVW9aR0YwWVNrcFhHNGdJQ0FnZlZ4dUlDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdaWEp5SUQwZ1pWeHVJQ0I5SUdacGJtRnNiSGtnZTF4dUlDQWdJRzVsZUhRb1pYSnlLVnh1SUNCOVhHNTlYRzVEYVhCb1pYSkNZWE5sTG5CeWIzUnZkSGx3WlM1ZlpteDFjMmdnUFNCbWRXNWpkR2x2YmlBb1pHOXVaU2tnZTF4dUlDQjJZWElnWlhKeVhHNGdJSFJ5ZVNCN1hHNGdJQ0FnZEdocGN5NXdkWE5vS0hSb2FYTXVYMlpwYm1Gc0tDa3BYRzRnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNCbGNuSWdQU0JsWEc0Z0lIMGdabWx1WVd4c2VTQjdYRzRnSUNBZ1pHOXVaU2hsY25JcFhHNGdJSDFjYm4xY2JrTnBjR2hsY2tKaGMyVXVjSEp2ZEc5MGVYQmxMbDltYVc1aGJFOXlSR2xuWlhOMElEMGdablZ1WTNScGIyNGdLRzkxZEhCMWRFVnVZeWtnZTF4dUlDQjJZWElnYjNWMFJHRjBZU0E5SUhSb2FYTXVYMlpwYm1Gc0tDa2dmSHdnYm1WM0lFSjFabVpsY2lnbkp5bGNiaUFnYVdZZ0tHOTFkSEIxZEVWdVl5a2dlMXh1SUNBZ0lHOTFkRVJoZEdFZ1BTQjBhR2x6TGw5MGIxTjBjbWx1WnlodmRYUkVZWFJoTENCdmRYUndkWFJGYm1Nc0lIUnlkV1VwWEc0Z0lIMWNiaUFnY21WMGRYSnVJRzkxZEVSaGRHRmNibjFjYmx4dVEybHdhR1Z5UW1GelpTNXdjbTkwYjNSNWNHVXVYM1J2VTNSeWFXNW5JRDBnWm5WdVkzUnBiMjRnS0haaGJIVmxMQ0JsYm1Nc0lHWnBibUZzS1NCN1hHNGdJR2xtSUNnaGRHaHBjeTVmWkdWamIyUmxjaWtnZTF4dUlDQWdJSFJvYVhNdVgyUmxZMjlrWlhJZ1BTQnVaWGNnVTNSeWFXNW5SR1ZqYjJSbGNpaGxibU1wWEc0Z0lDQWdkR2hwY3k1ZlpXNWpiMlJwYm1jZ1BTQmxibU5jYmlBZ2ZWeHVJQ0JwWmlBb2RHaHBjeTVmWlc1amIyUnBibWNnSVQwOUlHVnVZeWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25ZMkZ1WEZ3bmRDQnpkMmwwWTJnZ1pXNWpiMlJwYm1kekp5bGNiaUFnZlZ4dUlDQjJZWElnYjNWMElEMGdkR2hwY3k1ZlpHVmpiMlJsY2k1M2NtbDBaU2gyWVd4MVpTbGNiaUFnYVdZZ0tHWnBibUZzS1NCN1hHNGdJQ0FnYjNWMElDczlJSFJvYVhNdVgyUmxZMjlrWlhJdVpXNWtLQ2xjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdiM1YwWEc1OVhHNGlYWDA9IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4b3IgKGEsIGIpIHtcbiAgdmFyIGxlbmd0aCA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aClcbiAgdmFyIGJ1ZmZlciA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBidWZmZXJbaV0gPSBhW2ldIF4gYltpXVxuICB9XG5cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMXphV2R1TDI1dlpHVmZiVzlrZFd4bGN5OXdZWEp6WlMxaGMyNHhMMjV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUxXRmxjeTl1YjJSbFgyMXZaSFZzWlhNdlluVm1abVZ5TFhodmNpOXBibVJsZUM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaUI0YjNJZ0tHRXNJR0lwSUh0Y2JpQWdkbUZ5SUd4bGJtZDBhQ0E5SUUxaGRHZ3ViV2x1S0dFdWJHVnVaM1JvTENCaUxteGxibWQwYUNsY2JpQWdkbUZ5SUdKMVptWmxjaUE5SUc1bGR5QkNkV1ptWlhJb2JHVnVaM1JvS1Z4dVhHNGdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYkdWdVozUm9PeUFySzJrcElIdGNiaUFnSUNCaWRXWm1aWEpiYVYwZ1BTQmhXMmxkSUY0Z1lsdHBYVnh1SUNCOVhHNWNiaUFnY21WMGRYSnVJR0oxWm1abGNseHVmVnh1SWwxOSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciB6ZXJvcyA9IG5ldyBCdWZmZXIoMTYpXG56ZXJvcy5maWxsKDApXG5tb2R1bGUuZXhwb3J0cyA9IEdIQVNIXG5mdW5jdGlvbiBHSEFTSCAoa2V5KSB7XG4gIHRoaXMuaCA9IGtleVxuICB0aGlzLnN0YXRlID0gbmV3IEJ1ZmZlcigxNilcbiAgdGhpcy5zdGF0ZS5maWxsKDApXG4gIHRoaXMuY2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxufVxuLy8gZnJvbSBodHRwOi8vYml0d2lzZXNoaWZ0bGVmdC5naXRodWIuaW8vc2pjbC9kb2Mvc3ltYm9scy9zcmMvY29yZV9nY20uanMuaHRtbFxuLy8gYnkgSnVobyBWw6Row6QtSGVydHR1YVxuR0hBU0gucHJvdG90eXBlLmdoYXNoID0gZnVuY3Rpb24gKGJsb2NrKSB7XG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGJsb2NrLmxlbmd0aCkge1xuICAgIHRoaXMuc3RhdGVbaV0gXj0gYmxvY2tbaV1cbiAgfVxuICB0aGlzLl9tdWx0aXBseSgpXG59XG5cbkdIQVNILnByb3RvdHlwZS5fbXVsdGlwbHkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBWaSA9IHRvQXJyYXkodGhpcy5oKVxuICB2YXIgWmkgPSBbMCwgMCwgMCwgMF1cbiAgdmFyIGosIHhpLCBsc2JfVmlcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgMTI4KSB7XG4gICAgeGkgPSAodGhpcy5zdGF0ZVt+fihpIC8gOCldICYgKDEgPDwgKDcgLSBpICUgOCkpKSAhPT0gMFxuICAgIGlmICh4aSkge1xuICAgICAgLy8gWl9pKzEgPSBaX2kgXiBWX2lcbiAgICAgIFppID0geG9yKFppLCBWaSlcbiAgICB9XG5cbiAgICAvLyBTdG9yZSB0aGUgdmFsdWUgb2YgTFNCKFZfaSlcbiAgICBsc2JfVmkgPSAoVmlbM10gJiAxKSAhPT0gMFxuXG4gICAgLy8gVl9pKzEgPSBWX2kgPj4gMVxuICAgIGZvciAoaiA9IDM7IGogPiAwOyBqLS0pIHtcbiAgICAgIFZpW2pdID0gKFZpW2pdID4+PiAxKSB8ICgoVmlbaiAtIDFdICYgMSkgPDwgMzEpXG4gICAgfVxuICAgIFZpWzBdID0gVmlbMF0gPj4+IDFcblxuICAgIC8vIElmIExTQihWX2kpIGlzIDEsIFZfaSsxID0gKFZfaSA+PiAxKSBeIFJcbiAgICBpZiAobHNiX1ZpKSB7XG4gICAgICBWaVswXSA9IFZpWzBdIF4gKDB4ZTEgPDwgMjQpXG4gICAgfVxuICB9XG4gIHRoaXMuc3RhdGUgPSBmcm9tQXJyYXkoWmkpXG59XG5HSEFTSC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGJ1Zikge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgYnVmXSlcbiAgdmFyIGNodW5rXG4gIHdoaWxlICh0aGlzLmNhY2hlLmxlbmd0aCA+PSAxNikge1xuICAgIGNodW5rID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNilcbiAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICB0aGlzLmdoYXNoKGNodW5rKVxuICB9XG59XG5HSEFTSC5wcm90b3R5cGUuZmluYWwgPSBmdW5jdGlvbiAoYWJsLCBibCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGgpIHtcbiAgICB0aGlzLmdoYXNoKEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIHplcm9zXSwgMTYpKVxuICB9XG4gIHRoaXMuZ2hhc2goZnJvbUFycmF5KFtcbiAgICAwLCBhYmwsXG4gICAgMCwgYmxcbiAgXSkpXG4gIHJldHVybiB0aGlzLnN0YXRlXG59XG5cbmZ1bmN0aW9uIHRvQXJyYXkgKGJ1Zikge1xuICByZXR1cm4gW1xuICAgIGJ1Zi5yZWFkVUludDMyQkUoMCksXG4gICAgYnVmLnJlYWRVSW50MzJCRSg0KSxcbiAgICBidWYucmVhZFVJbnQzMkJFKDgpLFxuICAgIGJ1Zi5yZWFkVUludDMyQkUoMTIpXG4gIF1cbn1cbmZ1bmN0aW9uIGZyb21BcnJheSAob3V0KSB7XG4gIG91dCA9IG91dC5tYXAoZml4dXBfdWludDMyKVxuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcigxNilcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzBdLCAwKVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMV0sIDQpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsyXSwgOClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzNdLCAxMilcbiAgcmV0dXJuIGJ1ZlxufVxudmFyIHVpbnRfbWF4ID0gTWF0aC5wb3coMiwgMzIpXG5mdW5jdGlvbiBmaXh1cF91aW50MzIgKHgpIHtcbiAgdmFyIHJldCwgeF9wb3NcbiAgcmV0ID0geCA+IHVpbnRfbWF4IHx8IHggPCAwID8gKHhfcG9zID0gTWF0aC5hYnMoeCkgJSB1aW50X21heCwgeCA8IDAgPyB1aW50X21heCAtIHhfcG9zIDogeF9wb3MpIDogeFxuICByZXR1cm4gcmV0XG59XG5mdW5jdGlvbiB4b3IgKGEsIGIpIHtcbiAgcmV0dXJuIFtcbiAgICBhWzBdIF4gYlswXSxcbiAgICBhWzFdIF4gYlsxXSxcbiAgICBhWzJdIF4gYlsyXSxcbiAgICBhWzNdIF4gYlszXVxuICBdXG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WW5KdmQzTmxjbWxtZVMxemFXZHVMMjV2WkdWZmJXOWtkV3hsY3k5d1lYSnpaUzFoYzI0eEwyNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TFdGbGN5OW5hR0Z6YUM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2labWxzWlNJNkltZGxibVZ5WVhSbFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUoyWVhJZ2VtVnliM01nUFNCdVpYY2dRblZtWm1WeUtERTJLVnh1ZW1WeWIzTXVabWxzYkNnd0tWeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQkhTRUZUU0Z4dVpuVnVZM1JwYjI0Z1IwaEJVMGdnS0d0bGVTa2dlMXh1SUNCMGFHbHpMbWdnUFNCclpYbGNiaUFnZEdocGN5NXpkR0YwWlNBOUlHNWxkeUJDZFdabVpYSW9NVFlwWEc0Z0lIUm9hWE11YzNSaGRHVXVabWxzYkNnd0tWeHVJQ0IwYUdsekxtTmhZMmhsSUQwZ2JtVjNJRUoxWm1abGNpZ25KeWxjYm4xY2JpOHZJR1p5YjIwZ2FIUjBjRG92TDJKcGRIZHBjMlZ6YUdsbWRHeGxablF1WjJsMGFIVmlMbWx2TDNOcVkyd3ZaRzlqTDNONWJXSnZiSE12YzNKakwyTnZjbVZmWjJOdExtcHpMbWgwYld4Y2JpOHZJR0o1SUVwMWFHOGdWc09rYU1Pa0xVaGxjblIwZFdGY2JrZElRVk5JTG5CeWIzUnZkSGx3WlM1bmFHRnphQ0E5SUdaMWJtTjBhVzl1SUNoaWJHOWpheWtnZTF4dUlDQjJZWElnYVNBOUlDMHhYRzRnSUhkb2FXeGxJQ2dySzJrZ1BDQmliRzlqYXk1c1pXNW5kR2dwSUh0Y2JpQWdJQ0IwYUdsekxuTjBZWFJsVzJsZElGNDlJR0pzYjJOclcybGRYRzRnSUgxY2JpQWdkR2hwY3k1ZmJYVnNkR2x3Ykhrb0tWeHVmVnh1WEc1SFNFRlRTQzV3Y205MGIzUjVjR1V1WDIxMWJIUnBjR3g1SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNCMllYSWdWbWtnUFNCMGIwRnljbUY1S0hSb2FYTXVhQ2xjYmlBZ2RtRnlJRnBwSUQwZ1d6QXNJREFzSURBc0lEQmRYRzRnSUhaaGNpQnFMQ0I0YVN3Z2JITmlYMVpwWEc0Z0lIWmhjaUJwSUQwZ0xURmNiaUFnZDJocGJHVWdLQ3NyYVNBOElERXlPQ2tnZTF4dUlDQWdJSGhwSUQwZ0tIUm9hWE11YzNSaGRHVmJmbjRvYVNBdklEZ3BYU0FtSUNneElEdzhJQ2czSUMwZ2FTQWxJRGdwS1NrZ0lUMDlJREJjYmlBZ0lDQnBaaUFvZUdrcElIdGNiaUFnSUNBZ0lDOHZJRnBmYVNzeElEMGdXbDlwSUY0Z1ZsOXBYRzRnSUNBZ0lDQmFhU0E5SUhodmNpaGFhU3dnVm1rcFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1UzUnZjbVVnZEdobElIWmhiSFZsSUc5bUlFeFRRaWhXWDJrcFhHNGdJQ0FnYkhOaVgxWnBJRDBnS0ZacFd6TmRJQ1lnTVNrZ0lUMDlJREJjYmx4dUlDQWdJQzh2SUZaZmFTc3hJRDBnVmw5cElENCtJREZjYmlBZ0lDQm1iM0lnS0dvZ1BTQXpPeUJxSUQ0Z01Ec2dhaTB0S1NCN1hHNGdJQ0FnSUNCV2FWdHFYU0E5SUNoV2FWdHFYU0ErUGo0Z01Ta2dmQ0FvS0ZacFcyb2dMU0F4WFNBbUlERXBJRHc4SURNeEtWeHVJQ0FnSUgxY2JpQWdJQ0JXYVZzd1hTQTlJRlpwV3pCZElENCtQaUF4WEc1Y2JpQWdJQ0F2THlCSlppQk1VMElvVmw5cEtTQnBjeUF4TENCV1gya3JNU0E5SUNoV1gya2dQajRnTVNrZ1hpQlNYRzRnSUNBZ2FXWWdLR3h6WWw5V2FTa2dlMXh1SUNBZ0lDQWdWbWxiTUYwZ1BTQldhVnN3WFNCZUlDZ3dlR1V4SUR3OElESTBLVnh1SUNBZ0lIMWNiaUFnZlZ4dUlDQjBhR2x6TG5OMFlYUmxJRDBnWm5KdmJVRnljbUY1S0ZwcEtWeHVmVnh1UjBoQlUwZ3VjSEp2ZEc5MGVYQmxMblZ3WkdGMFpTQTlJR1oxYm1OMGFXOXVJQ2hpZFdZcElIdGNiaUFnZEdocGN5NWpZV05vWlNBOUlFSjFabVpsY2k1amIyNWpZWFFvVzNSb2FYTXVZMkZqYUdVc0lHSjFabDBwWEc0Z0lIWmhjaUJqYUhWdWExeHVJQ0IzYUdsc1pTQW9kR2hwY3k1allXTm9aUzVzWlc1bmRHZ2dQajBnTVRZcElIdGNiaUFnSUNCamFIVnVheUE5SUhSb2FYTXVZMkZqYUdVdWMyeHBZMlVvTUN3Z01UWXBYRzRnSUNBZ2RHaHBjeTVqWVdOb1pTQTlJSFJvYVhNdVkyRmphR1V1YzJ4cFkyVW9NVFlwWEc0Z0lDQWdkR2hwY3k1bmFHRnphQ2hqYUhWdWF5bGNiaUFnZlZ4dWZWeHVSMGhCVTBndWNISnZkRzkwZVhCbExtWnBibUZzSUQwZ1puVnVZM1JwYjI0Z0tHRmliQ3dnWW13cElIdGNiaUFnYVdZZ0tIUm9hWE11WTJGamFHVXViR1Z1WjNSb0tTQjdYRzRnSUNBZ2RHaHBjeTVuYUdGemFDaENkV1ptWlhJdVkyOXVZMkYwS0Z0MGFHbHpMbU5oWTJobExDQjZaWEp2YzEwc0lERTJLU2xjYmlBZ2ZWeHVJQ0IwYUdsekxtZG9ZWE5vS0daeWIyMUJjbkpoZVNoYlhHNGdJQ0FnTUN3Z1lXSnNMRnh1SUNBZ0lEQXNJR0pzWEc0Z0lGMHBLVnh1SUNCeVpYUjFjbTRnZEdocGN5NXpkR0YwWlZ4dWZWeHVYRzVtZFc1amRHbHZiaUIwYjBGeWNtRjVJQ2hpZFdZcElIdGNiaUFnY21WMGRYSnVJRnRjYmlBZ0lDQmlkV1l1Y21WaFpGVkpiblF6TWtKRktEQXBMRnh1SUNBZ0lHSjFaaTV5WldGa1ZVbHVkRE15UWtVb05Da3NYRzRnSUNBZ1luVm1MbkpsWVdSVlNXNTBNekpDUlNnNEtTeGNiaUFnSUNCaWRXWXVjbVZoWkZWSmJuUXpNa0pGS0RFeUtWeHVJQ0JkWEc1OVhHNW1kVzVqZEdsdmJpQm1jbTl0UVhKeVlYa2dLRzkxZENrZ2UxeHVJQ0J2ZFhRZ1BTQnZkWFF1YldGd0tHWnBlSFZ3WDNWcGJuUXpNaWxjYmlBZ2RtRnlJR0oxWmlBOUlHNWxkeUJDZFdabVpYSW9NVFlwWEc0Z0lHSjFaaTUzY21sMFpWVkpiblF6TWtKRktHOTFkRnN3WFN3Z01DbGNiaUFnWW5WbUxuZHlhWFJsVlVsdWRETXlRa1VvYjNWMFd6RmRMQ0EwS1Z4dUlDQmlkV1l1ZDNKcGRHVlZTVzUwTXpKQ1JTaHZkWFJiTWwwc0lEZ3BYRzRnSUdKMVppNTNjbWwwWlZWSmJuUXpNa0pGS0c5MWRGc3pYU3dnTVRJcFhHNGdJSEpsZEhWeWJpQmlkV1pjYm4xY2JuWmhjaUIxYVc1MFgyMWhlQ0E5SUUxaGRHZ3VjRzkzS0RJc0lETXlLVnh1Wm5WdVkzUnBiMjRnWm1sNGRYQmZkV2x1ZERNeUlDaDRLU0I3WEc0Z0lIWmhjaUJ5WlhRc0lIaGZjRzl6WEc0Z0lISmxkQ0E5SUhnZ1BpQjFhVzUwWDIxaGVDQjhmQ0I0SUR3Z01DQS9JQ2g0WDNCdmN5QTlJRTFoZEdndVlXSnpLSGdwSUNVZ2RXbHVkRjl0WVhnc0lIZ2dQQ0F3SUQ4Z2RXbHVkRjl0WVhnZ0xTQjRYM0J2Y3lBNklIaGZjRzl6S1NBNklIaGNiaUFnY21WMGRYSnVJSEpsZEZ4dWZWeHVablZ1WTNScGIyNGdlRzl5SUNoaExDQmlLU0I3WEc0Z0lISmxkSFZ5YmlCYlhHNGdJQ0FnWVZzd1hTQmVJR0piTUYwc1hHNGdJQ0FnWVZzeFhTQmVJR0piTVYwc1hHNGdJQ0FnWVZzeVhTQmVJR0piTWwwc1hHNGdJQ0FnWVZzelhTQmVJR0piTTExY2JpQWdYVnh1ZlZ4dUlsMTkiLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG4vLyBiYXNlZCBvbiB0aGUgYWVzIGltcGxpbWVudGF0aW9uIGluIHRyaXBsZSBzZWNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9rZXliYXNlL3RyaXBsZXNlY1xuXG4vLyB3aGljaCBpcyBpbiB0dXJuIGJhc2VkIG9uIHRoZSBvbmUgZnJvbSBjcnlwdG8tanNcbi8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL1xuXG52YXIgdWludF9tYXggPSBNYXRoLnBvdygyLCAzMilcbmZ1bmN0aW9uIGZpeHVwX3VpbnQzMiAoeCkge1xuICB2YXIgcmV0LCB4X3Bvc1xuICByZXQgPSB4ID4gdWludF9tYXggfHwgeCA8IDAgPyAoeF9wb3MgPSBNYXRoLmFicyh4KSAlIHVpbnRfbWF4LCB4IDwgMCA/IHVpbnRfbWF4IC0geF9wb3MgOiB4X3BvcykgOiB4XG4gIHJldHVybiByZXRcbn1cbmZ1bmN0aW9uIHNjcnViX3ZlYyAodikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHYubGVuZ3RoOyB2KyspIHtcbiAgICB2W2ldID0gMFxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBHbG9iYWwgKCkge1xuICB0aGlzLlNCT1ggPSBbXVxuICB0aGlzLklOVl9TQk9YID0gW11cbiAgdGhpcy5TVUJfTUlYID0gW1tdLCBbXSwgW10sIFtdXVxuICB0aGlzLklOVl9TVUJfTUlYID0gW1tdLCBbXSwgW10sIFtdXVxuICB0aGlzLmluaXQoKVxuICB0aGlzLlJDT04gPSBbMHgwMCwgMHgwMSwgMHgwMiwgMHgwNCwgMHgwOCwgMHgxMCwgMHgyMCwgMHg0MCwgMHg4MCwgMHgxYiwgMHgzNl1cbn1cblxuR2xvYmFsLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZCwgaSwgc3gsIHQsIHgsIHgyLCB4NCwgeDgsIHhpLCBfaVxuICBkID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX2ksIF9yZXN1bHRzXG4gICAgX3Jlc3VsdHMgPSBbXVxuICAgIGZvciAoaSA9IF9pID0gMDsgX2kgPCAyNTY7IGkgPSArK19pKSB7XG4gICAgICBpZiAoaSA8IDEyOCkge1xuICAgICAgICBfcmVzdWx0cy5wdXNoKGkgPDwgMSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9yZXN1bHRzLnB1c2goKGkgPDwgMSkgXiAweDExYilcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIF9yZXN1bHRzXG4gIH0pKClcbiAgeCA9IDBcbiAgeGkgPSAwXG4gIGZvciAoaSA9IF9pID0gMDsgX2kgPCAyNTY7IGkgPSArK19pKSB7XG4gICAgc3ggPSB4aSBeICh4aSA8PCAxKSBeICh4aSA8PCAyKSBeICh4aSA8PCAzKSBeICh4aSA8PCA0KVxuICAgIHN4ID0gKHN4ID4+PiA4KSBeIChzeCAmIDB4ZmYpIF4gMHg2M1xuICAgIHRoaXMuU0JPWFt4XSA9IHN4XG4gICAgdGhpcy5JTlZfU0JPWFtzeF0gPSB4XG4gICAgeDIgPSBkW3hdXG4gICAgeDQgPSBkW3gyXVxuICAgIHg4ID0gZFt4NF1cbiAgICB0ID0gKGRbc3hdICogMHgxMDEpIF4gKHN4ICogMHgxMDEwMTAwKVxuICAgIHRoaXMuU1VCX01JWFswXVt4XSA9ICh0IDw8IDI0KSB8ICh0ID4+PiA4KVxuICAgIHRoaXMuU1VCX01JWFsxXVt4XSA9ICh0IDw8IDE2KSB8ICh0ID4+PiAxNilcbiAgICB0aGlzLlNVQl9NSVhbMl1beF0gPSAodCA8PCA4KSB8ICh0ID4+PiAyNClcbiAgICB0aGlzLlNVQl9NSVhbM11beF0gPSB0XG4gICAgdCA9ICh4OCAqIDB4MTAxMDEwMSkgXiAoeDQgKiAweDEwMDAxKSBeICh4MiAqIDB4MTAxKSBeICh4ICogMHgxMDEwMTAwKVxuICAgIHRoaXMuSU5WX1NVQl9NSVhbMF1bc3hdID0gKHQgPDwgMjQpIHwgKHQgPj4+IDgpXG4gICAgdGhpcy5JTlZfU1VCX01JWFsxXVtzeF0gPSAodCA8PCAxNikgfCAodCA+Pj4gMTYpXG4gICAgdGhpcy5JTlZfU1VCX01JWFsyXVtzeF0gPSAodCA8PCA4KSB8ICh0ID4+PiAyNClcbiAgICB0aGlzLklOVl9TVUJfTUlYWzNdW3N4XSA9IHRcbiAgICBpZiAoeCA9PT0gMCkge1xuICAgICAgeCA9IHhpID0gMVxuICAgIH0gZWxzZSB7XG4gICAgICB4ID0geDIgXiBkW2RbZFt4OCBeIHgyXV1dXG4gICAgICB4aSBePSBkW2RbeGldXVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG52YXIgRyA9IG5ldyBHbG9iYWwoKVxuXG5BRVMuYmxvY2tTaXplID0gNCAqIDRcblxuQUVTLnByb3RvdHlwZS5ibG9ja1NpemUgPSBBRVMuYmxvY2tTaXplXG5cbkFFUy5rZXlTaXplID0gMjU2IC8gOFxuXG5BRVMucHJvdG90eXBlLmtleVNpemUgPSBBRVMua2V5U2l6ZVxuXG5mdW5jdGlvbiBidWZmZXJUb0FycmF5IChidWYpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGggLyA0XG4gIHZhciBvdXQgPSBuZXcgQXJyYXkobGVuKVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBidWYucmVhZFVJbnQzMkJFKGkgKiA0KVxuICB9XG4gIHJldHVybiBvdXRcbn1cbmZ1bmN0aW9uIEFFUyAoa2V5KSB7XG4gIHRoaXMuX2tleSA9IGJ1ZmZlclRvQXJyYXkoa2V5KVxuICB0aGlzLl9kb1Jlc2V0KClcbn1cblxuQUVTLnByb3RvdHlwZS5fZG9SZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGludktzUm93LCBrZXlTaXplLCBrZXlXb3Jkcywga3NSb3csIGtzUm93cywgdFxuICBrZXlXb3JkcyA9IHRoaXMuX2tleVxuICBrZXlTaXplID0ga2V5V29yZHMubGVuZ3RoXG4gIHRoaXMuX25Sb3VuZHMgPSBrZXlTaXplICsgNlxuICBrc1Jvd3MgPSAodGhpcy5fblJvdW5kcyArIDEpICogNFxuICB0aGlzLl9rZXlTY2hlZHVsZSA9IFtdXG4gIGZvciAoa3NSb3cgPSAwOyBrc1JvdyA8IGtzUm93czsga3NSb3crKykge1xuICAgIHRoaXMuX2tleVNjaGVkdWxlW2tzUm93XSA9IGtzUm93IDwga2V5U2l6ZSA/IGtleVdvcmRzW2tzUm93XSA6ICh0ID0gdGhpcy5fa2V5U2NoZWR1bGVba3NSb3cgLSAxXSwgKGtzUm93ICUga2V5U2l6ZSkgPT09IDAgPyAodCA9ICh0IDw8IDgpIHwgKHQgPj4+IDI0KSwgdCA9IChHLlNCT1hbdCA+Pj4gMjRdIDw8IDI0KSB8IChHLlNCT1hbKHQgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChHLlNCT1hbKHQgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBHLlNCT1hbdCAmIDB4ZmZdLCB0IF49IEcuUkNPTlsoa3NSb3cgLyBrZXlTaXplKSB8IDBdIDw8IDI0KSA6IGtleVNpemUgPiA2ICYmIGtzUm93ICUga2V5U2l6ZSA9PT0gNCA/IHQgPSAoRy5TQk9YW3QgPj4+IDI0XSA8PCAyNCkgfCAoRy5TQk9YWyh0ID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoRy5TQk9YWyh0ID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgRy5TQk9YW3QgJiAweGZmXSA6IHZvaWQgMCwgdGhpcy5fa2V5U2NoZWR1bGVba3NSb3cgLSBrZXlTaXplXSBeIHQpXG4gIH1cbiAgdGhpcy5faW52S2V5U2NoZWR1bGUgPSBbXVxuICBmb3IgKGludktzUm93ID0gMDsgaW52S3NSb3cgPCBrc1Jvd3M7IGludktzUm93KyspIHtcbiAgICBrc1JvdyA9IGtzUm93cyAtIGludktzUm93XG4gICAgdCA9IHRoaXMuX2tleVNjaGVkdWxlW2tzUm93IC0gKGludktzUm93ICUgNCA/IDAgOiA0KV1cbiAgICB0aGlzLl9pbnZLZXlTY2hlZHVsZVtpbnZLc1Jvd10gPSBpbnZLc1JvdyA8IDQgfHwga3NSb3cgPD0gNCA/IHQgOiBHLklOVl9TVUJfTUlYWzBdW0cuU0JPWFt0ID4+PiAyNF1dIF4gRy5JTlZfU1VCX01JWFsxXVtHLlNCT1hbKHQgPj4+IDE2KSAmIDB4ZmZdXSBeIEcuSU5WX1NVQl9NSVhbMl1bRy5TQk9YWyh0ID4+PiA4KSAmIDB4ZmZdXSBeIEcuSU5WX1NVQl9NSVhbM11bRy5TQk9YW3QgJiAweGZmXV1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5BRVMucHJvdG90eXBlLmVuY3J5cHRCbG9jayA9IGZ1bmN0aW9uIChNKSB7XG4gIE0gPSBidWZmZXJUb0FycmF5KG5ldyBCdWZmZXIoTSkpXG4gIHZhciBvdXQgPSB0aGlzLl9kb0NyeXB0QmxvY2soTSwgdGhpcy5fa2V5U2NoZWR1bGUsIEcuU1VCX01JWCwgRy5TQk9YKVxuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcigxNilcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzBdLCAwKVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMV0sIDQpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsyXSwgOClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzNdLCAxMilcbiAgcmV0dXJuIGJ1ZlxufVxuXG5BRVMucHJvdG90eXBlLmRlY3J5cHRCbG9jayA9IGZ1bmN0aW9uIChNKSB7XG4gIE0gPSBidWZmZXJUb0FycmF5KG5ldyBCdWZmZXIoTSkpXG4gIHZhciB0ZW1wID0gW01bM10sIE1bMV1dXG4gIE1bMV0gPSB0ZW1wWzBdXG4gIE1bM10gPSB0ZW1wWzFdXG4gIHZhciBvdXQgPSB0aGlzLl9kb0NyeXB0QmxvY2soTSwgdGhpcy5faW52S2V5U2NoZWR1bGUsIEcuSU5WX1NVQl9NSVgsIEcuSU5WX1NCT1gpXG4gIHZhciBidWYgPSBuZXcgQnVmZmVyKDE2KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMF0sIDApXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFszXSwgNClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzJdLCA4KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMV0sIDEyKVxuICByZXR1cm4gYnVmXG59XG5cbkFFUy5wcm90b3R5cGUuc2NydWIgPSBmdW5jdGlvbiAoKSB7XG4gIHNjcnViX3ZlYyh0aGlzLl9rZXlTY2hlZHVsZSlcbiAgc2NydWJfdmVjKHRoaXMuX2ludktleVNjaGVkdWxlKVxuICBzY3J1Yl92ZWModGhpcy5fa2V5KVxufVxuXG5BRVMucHJvdG90eXBlLl9kb0NyeXB0QmxvY2sgPSBmdW5jdGlvbiAoTSwga2V5U2NoZWR1bGUsIFNVQl9NSVgsIFNCT1gpIHtcbiAgdmFyIGtzUm93LCBzMCwgczEsIHMyLCBzMywgdDAsIHQxLCB0MiwgdDNcblxuICBzMCA9IE1bMF0gXiBrZXlTY2hlZHVsZVswXVxuICBzMSA9IE1bMV0gXiBrZXlTY2hlZHVsZVsxXVxuICBzMiA9IE1bMl0gXiBrZXlTY2hlZHVsZVsyXVxuICBzMyA9IE1bM10gXiBrZXlTY2hlZHVsZVszXVxuICBrc1JvdyA9IDRcbiAgZm9yICh2YXIgcm91bmQgPSAxOyByb3VuZCA8IHRoaXMuX25Sb3VuZHM7IHJvdW5kKyspIHtcbiAgICB0MCA9IFNVQl9NSVhbMF1bczAgPj4+IDI0XSBeIFNVQl9NSVhbMV1bKHMxID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhbMl1bKHMyID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWFszXVtzMyAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICB0MSA9IFNVQl9NSVhbMF1bczEgPj4+IDI0XSBeIFNVQl9NSVhbMV1bKHMyID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhbMl1bKHMzID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWFszXVtzMCAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICB0MiA9IFNVQl9NSVhbMF1bczIgPj4+IDI0XSBeIFNVQl9NSVhbMV1bKHMzID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhbMl1bKHMwID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWFszXVtzMSAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICB0MyA9IFNVQl9NSVhbMF1bczMgPj4+IDI0XSBeIFNVQl9NSVhbMV1bKHMwID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhbMl1bKHMxID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWFszXVtzMiAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICBzMCA9IHQwXG4gICAgczEgPSB0MVxuICAgIHMyID0gdDJcbiAgICBzMyA9IHQzXG4gIH1cbiAgdDAgPSAoKFNCT1hbczAgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczEgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMiA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczMgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICB0MSA9ICgoU0JPWFtzMSA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMiA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMzID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMCAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gIHQyID0gKChTQk9YW3MyID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMzID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczAgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MxICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgdDMgPSAoKFNCT1hbczMgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczAgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMSA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczIgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICByZXR1cm4gW1xuICAgIGZpeHVwX3VpbnQzMih0MCksXG4gICAgZml4dXBfdWludDMyKHQxKSxcbiAgICBmaXh1cF91aW50MzIodDIpLFxuICAgIGZpeHVwX3VpbnQzMih0MylcbiAgXVxufVxuXG5leHBvcnRzLkFFUyA9IEFFU1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMXphV2R1TDI1dlpHVmZiVzlrZFd4bGN5OXdZWEp6WlMxaGMyNHhMMjV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUxXRmxjeTloWlhNdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2labWxzWlNJNkltZGxibVZ5WVhSbFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2THlCaVlYTmxaQ0J2YmlCMGFHVWdZV1Z6SUdsdGNHeHBiV1Z1ZEdGMGFXOXVJR2x1SUhSeWFYQnNaU0J6WldOY2JpOHZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzlyWlhsaVlYTmxMM1J5YVhCc1pYTmxZMXh1WEc0dkx5QjNhR2xqYUNCcGN5QnBiaUIwZFhKdUlHSmhjMlZrSUc5dUlIUm9aU0J2Ym1VZ1puSnZiU0JqY25sd2RHOHRhbk5jYmk4dklHaDBkSEJ6T2k4dlkyOWtaUzVuYjI5bmJHVXVZMjl0TDNBdlkzSjVjSFJ2TFdwekwxeHVYRzUyWVhJZ2RXbHVkRjl0WVhnZ1BTQk5ZWFJvTG5CdmR5Z3lMQ0F6TWlsY2JtWjFibU4wYVc5dUlHWnBlSFZ3WDNWcGJuUXpNaUFvZUNrZ2UxeHVJQ0IyWVhJZ2NtVjBMQ0I0WDNCdmMxeHVJQ0J5WlhRZ1BTQjRJRDRnZFdsdWRGOXRZWGdnZkh3Z2VDQThJREFnUHlBb2VGOXdiM01nUFNCTllYUm9MbUZpY3loNEtTQWxJSFZwYm5SZmJXRjRMQ0I0SUR3Z01DQS9JSFZwYm5SZmJXRjRJQzBnZUY5d2IzTWdPaUI0WDNCdmN5a2dPaUI0WEc0Z0lISmxkSFZ5YmlCeVpYUmNibjFjYm1aMWJtTjBhVzl1SUhOamNuVmlYM1psWXlBb2Rpa2dlMXh1SUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElIWXViR1Z1WjNSb095QjJLeXNwSUh0Y2JpQWdJQ0IyVzJsZElEMGdNRnh1SUNCOVhHNGdJSEpsZEhWeWJpQm1ZV3h6WlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJIYkc5aVlXd2dLQ2tnZTF4dUlDQjBhR2x6TGxOQ1QxZ2dQU0JiWFZ4dUlDQjBhR2x6TGtsT1ZsOVRRazlZSUQwZ1cxMWNiaUFnZEdocGN5NVRWVUpmVFVsWUlEMGdXMXRkTENCYlhTd2dXMTBzSUZ0ZFhWeHVJQ0IwYUdsekxrbE9WbDlUVlVKZlRVbFlJRDBnVzF0ZExDQmJYU3dnVzEwc0lGdGRYVnh1SUNCMGFHbHpMbWx1YVhRb0tWeHVJQ0IwYUdsekxsSkRUMDRnUFNCYk1IZ3dNQ3dnTUhnd01Td2dNSGd3TWl3Z01IZ3dOQ3dnTUhnd09Dd2dNSGd4TUN3Z01IZ3lNQ3dnTUhnME1Dd2dNSGc0TUN3Z01IZ3hZaXdnTUhnek5sMWNibjFjYmx4dVIyeHZZbUZzTG5CeWIzUnZkSGx3WlM1cGJtbDBJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0IyWVhJZ1pDd2dhU3dnYzNnc0lIUXNJSGdzSUhneUxDQjROQ3dnZURnc0lIaHBMQ0JmYVZ4dUlDQmtJRDBnS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCMllYSWdYMmtzSUY5eVpYTjFiSFJ6WEc0Z0lDQWdYM0psYzNWc2RITWdQU0JiWFZ4dUlDQWdJR1p2Y2lBb2FTQTlJRjlwSUQwZ01Ec2dYMmtnUENBeU5UWTdJR2tnUFNBcksxOXBLU0I3WEc0Z0lDQWdJQ0JwWmlBb2FTQThJREV5T0NrZ2UxeHVJQ0FnSUNBZ0lDQmZjbVZ6ZFd4MGN5NXdkWE5vS0drZ1BEd2dNU2xjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJRjl5WlhOMWJIUnpMbkIxYzJnb0tHa2dQRHdnTVNrZ1hpQXdlREV4WWlsY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlGOXlaWE4xYkhSelhHNGdJSDBwS0NsY2JpQWdlQ0E5SURCY2JpQWdlR2tnUFNBd1hHNGdJR1p2Y2lBb2FTQTlJRjlwSUQwZ01Ec2dYMmtnUENBeU5UWTdJR2tnUFNBcksxOXBLU0I3WEc0Z0lDQWdjM2dnUFNCNGFTQmVJQ2g0YVNBOFBDQXhLU0JlSUNoNGFTQThQQ0F5S1NCZUlDaDRhU0E4UENBektTQmVJQ2g0YVNBOFBDQTBLVnh1SUNBZ0lITjRJRDBnS0hONElENCtQaUE0S1NCZUlDaHplQ0FtSURCNFptWXBJRjRnTUhnMk0xeHVJQ0FnSUhSb2FYTXVVMEpQV0Z0NFhTQTlJSE40WEc0Z0lDQWdkR2hwY3k1SlRsWmZVMEpQV0Z0emVGMGdQU0I0WEc0Z0lDQWdlRElnUFNCa1czaGRYRzRnSUNBZ2VEUWdQU0JrVzNneVhWeHVJQ0FnSUhnNElEMGdaRnQ0TkYxY2JpQWdJQ0IwSUQwZ0tHUmJjM2hkSUNvZ01IZ3hNREVwSUY0Z0tITjRJQ29nTUhneE1ERXdNVEF3S1Z4dUlDQWdJSFJvYVhNdVUxVkNYMDFKV0Zzd1hWdDRYU0E5SUNoMElEdzhJREkwS1NCOElDaDBJRDQrUGlBNEtWeHVJQ0FnSUhSb2FYTXVVMVZDWDAxSldGc3hYVnQ0WFNBOUlDaDBJRHc4SURFMktTQjhJQ2gwSUQ0K1BpQXhOaWxjYmlBZ0lDQjBhR2x6TGxOVlFsOU5TVmhiTWwxYmVGMGdQU0FvZENBOFBDQTRLU0I4SUNoMElENCtQaUF5TkNsY2JpQWdJQ0IwYUdsekxsTlZRbDlOU1ZoYk0xMWJlRjBnUFNCMFhHNGdJQ0FnZENBOUlDaDRPQ0FxSURCNE1UQXhNREV3TVNrZ1hpQW9lRFFnS2lBd2VERXdNREF4S1NCZUlDaDRNaUFxSURCNE1UQXhLU0JlSUNoNElDb2dNSGd4TURFd01UQXdLVnh1SUNBZ0lIUm9hWE11U1U1V1gxTlZRbDlOU1ZoYk1GMWJjM2hkSUQwZ0tIUWdQRHdnTWpRcElId2dLSFFnUGo0K0lEZ3BYRzRnSUNBZ2RHaHBjeTVKVGxaZlUxVkNYMDFKV0ZzeFhWdHplRjBnUFNBb2RDQThQQ0F4TmlrZ2ZDQW9kQ0ErUGo0Z01UWXBYRzRnSUNBZ2RHaHBjeTVKVGxaZlUxVkNYMDFKV0ZzeVhWdHplRjBnUFNBb2RDQThQQ0E0S1NCOElDaDBJRDQrUGlBeU5DbGNiaUFnSUNCMGFHbHpMa2xPVmw5VFZVSmZUVWxZV3pOZFczTjRYU0E5SUhSY2JpQWdJQ0JwWmlBb2VDQTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ2VDQTlJSGhwSUQwZ01WeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0I0SUQwZ2VESWdYaUJrVzJSYlpGdDRPQ0JlSUhneVhWMWRYRzRnSUNBZ0lDQjRhU0JlUFNCa1cyUmJlR2xkWFZ4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdkSEoxWlZ4dWZWeHVYRzUyWVhJZ1J5QTlJRzVsZHlCSGJHOWlZV3dvS1Z4dVhHNUJSVk11WW14dlkydFRhWHBsSUQwZ05DQXFJRFJjYmx4dVFVVlRMbkJ5YjNSdmRIbHdaUzVpYkc5amExTnBlbVVnUFNCQlJWTXVZbXh2WTJ0VGFYcGxYRzVjYmtGRlV5NXJaWGxUYVhwbElEMGdNalUySUM4Z09GeHVYRzVCUlZNdWNISnZkRzkwZVhCbExtdGxlVk5wZW1VZ1BTQkJSVk11YTJWNVUybDZaVnh1WEc1bWRXNWpkR2x2YmlCaWRXWm1aWEpVYjBGeWNtRjVJQ2hpZFdZcElIdGNiaUFnZG1GeUlHeGxiaUE5SUdKMVppNXNaVzVuZEdnZ0x5QTBYRzRnSUhaaGNpQnZkWFFnUFNCdVpYY2dRWEp5WVhrb2JHVnVLVnh1SUNCMllYSWdhU0E5SUMweFhHNGdJSGRvYVd4bElDZ3JLMmtnUENCc1pXNHBJSHRjYmlBZ0lDQnZkWFJiYVYwZ1BTQmlkV1l1Y21WaFpGVkpiblF6TWtKRktHa2dLaUEwS1Z4dUlDQjlYRzRnSUhKbGRIVnliaUJ2ZFhSY2JuMWNibVoxYm1OMGFXOXVJRUZGVXlBb2EyVjVLU0I3WEc0Z0lIUm9hWE11WDJ0bGVTQTlJR0oxWm1abGNsUnZRWEp5WVhrb2EyVjVLVnh1SUNCMGFHbHpMbDlrYjFKbGMyVjBLQ2xjYm4xY2JseHVRVVZUTG5CeWIzUnZkSGx3WlM1ZlpHOVNaWE5sZENBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ2RtRnlJR2x1ZGt0elVtOTNMQ0JyWlhsVGFYcGxMQ0JyWlhsWGIzSmtjeXdnYTNOU2IzY3NJR3R6VW05M2N5d2dkRnh1SUNCclpYbFhiM0prY3lBOUlIUm9hWE11WDJ0bGVWeHVJQ0JyWlhsVGFYcGxJRDBnYTJWNVYyOXlaSE11YkdWdVozUm9YRzRnSUhSb2FYTXVYMjVTYjNWdVpITWdQU0JyWlhsVGFYcGxJQ3NnTmx4dUlDQnJjMUp2ZDNNZ1BTQW9kR2hwY3k1ZmJsSnZkVzVrY3lBcklERXBJQ29nTkZ4dUlDQjBhR2x6TGw5clpYbFRZMmhsWkhWc1pTQTlJRnRkWEc0Z0lHWnZjaUFvYTNOU2IzY2dQU0F3T3lCcmMxSnZkeUE4SUd0elVtOTNjenNnYTNOU2IzY3JLeWtnZTF4dUlDQWdJSFJvYVhNdVgydGxlVk5qYUdWa2RXeGxXMnR6VW05M1hTQTlJR3R6VW05M0lEd2dhMlY1VTJsNlpTQS9JR3RsZVZkdmNtUnpXMnR6VW05M1hTQTZJQ2gwSUQwZ2RHaHBjeTVmYTJWNVUyTm9aV1IxYkdWYmEzTlNiM2NnTFNBeFhTd2dLR3R6VW05M0lDVWdhMlY1VTJsNlpTa2dQVDA5SURBZ1B5QW9kQ0E5SUNoMElEdzhJRGdwSUh3Z0tIUWdQajQrSURJMEtTd2dkQ0E5SUNoSExsTkNUMWhiZENBK1BqNGdNalJkSUR3OElESTBLU0I4SUNoSExsTkNUMWhiS0hRZ1BqNCtJREUyS1NBbUlEQjRabVpkSUR3OElERTJLU0I4SUNoSExsTkNUMWhiS0hRZ1BqNCtJRGdwSUNZZ01IaG1abDBnUER3Z09Da2dmQ0JITGxOQ1QxaGJkQ0FtSURCNFptWmRMQ0IwSUY0OUlFY3VVa05QVGxzb2EzTlNiM2NnTHlCclpYbFRhWHBsS1NCOElEQmRJRHc4SURJMEtTQTZJR3RsZVZOcGVtVWdQaUEySUNZbUlHdHpVbTkzSUNVZ2EyVjVVMmw2WlNBOVBUMGdOQ0EvSUhRZ1BTQW9SeTVUUWs5WVczUWdQajQrSURJMFhTQThQQ0F5TkNrZ2ZDQW9SeTVUUWs5WVd5aDBJRDQrUGlBeE5pa2dKaUF3ZUdabVhTQThQQ0F4TmlrZ2ZDQW9SeTVUUWs5WVd5aDBJRDQrUGlBNEtTQW1JREI0Wm1aZElEdzhJRGdwSUh3Z1J5NVRRazlZVzNRZ0ppQXdlR1ptWFNBNklIWnZhV1FnTUN3Z2RHaHBjeTVmYTJWNVUyTm9aV1IxYkdWYmEzTlNiM2NnTFNCclpYbFRhWHBsWFNCZUlIUXBYRzRnSUgxY2JpQWdkR2hwY3k1ZmFXNTJTMlY1VTJOb1pXUjFiR1VnUFNCYlhWeHVJQ0JtYjNJZ0tHbHVka3R6VW05M0lEMGdNRHNnYVc1MlMzTlNiM2NnUENCcmMxSnZkM003SUdsdWRrdHpVbTkzS3lzcElIdGNiaUFnSUNCcmMxSnZkeUE5SUd0elVtOTNjeUF0SUdsdWRrdHpVbTkzWEc0Z0lDQWdkQ0E5SUhSb2FYTXVYMnRsZVZOamFHVmtkV3hsVzJ0elVtOTNJQzBnS0dsdWRrdHpVbTkzSUNVZ05DQS9JREFnT2lBMEtWMWNiaUFnSUNCMGFHbHpMbDlwYm5aTFpYbFRZMmhsWkhWc1pWdHBiblpMYzFKdmQxMGdQU0JwYm5aTGMxSnZkeUE4SURRZ2ZId2dhM05TYjNjZ1BEMGdOQ0EvSUhRZ09pQkhMa2xPVmw5VFZVSmZUVWxZV3pCZFcwY3VVMEpQV0Z0MElENCtQaUF5TkYxZElGNGdSeTVKVGxaZlUxVkNYMDFKV0ZzeFhWdEhMbE5DVDFoYktIUWdQajQrSURFMktTQW1JREI0Wm1aZFhTQmVJRWN1U1U1V1gxTlZRbDlOU1ZoYk1sMWJSeTVUUWs5WVd5aDBJRDQrUGlBNEtTQW1JREI0Wm1aZFhTQmVJRWN1U1U1V1gxTlZRbDlOU1ZoYk0xMWJSeTVUUWs5WVczUWdKaUF3ZUdabVhWMWNiaUFnZlZ4dUlDQnlaWFIxY200Z2RISjFaVnh1ZlZ4dVhHNUJSVk11Y0hKdmRHOTBlWEJsTG1WdVkzSjVjSFJDYkc5amF5QTlJR1oxYm1OMGFXOXVJQ2hOS1NCN1hHNGdJRTBnUFNCaWRXWm1aWEpVYjBGeWNtRjVLRzVsZHlCQ2RXWm1aWElvVFNrcFhHNGdJSFpoY2lCdmRYUWdQU0IwYUdsekxsOWtiME55ZVhCMFFteHZZMnNvVFN3Z2RHaHBjeTVmYTJWNVUyTm9aV1IxYkdVc0lFY3VVMVZDWDAxSldDd2dSeTVUUWs5WUtWeHVJQ0IyWVhJZ1luVm1JRDBnYm1WM0lFSjFabVpsY2lneE5pbGNiaUFnWW5WbUxuZHlhWFJsVlVsdWRETXlRa1VvYjNWMFd6QmRMQ0F3S1Z4dUlDQmlkV1l1ZDNKcGRHVlZTVzUwTXpKQ1JTaHZkWFJiTVYwc0lEUXBYRzRnSUdKMVppNTNjbWwwWlZWSmJuUXpNa0pGS0c5MWRGc3lYU3dnT0NsY2JpQWdZblZtTG5keWFYUmxWVWx1ZERNeVFrVW9iM1YwV3pOZExDQXhNaWxjYmlBZ2NtVjBkWEp1SUdKMVpseHVmVnh1WEc1QlJWTXVjSEp2ZEc5MGVYQmxMbVJsWTNKNWNIUkNiRzlqYXlBOUlHWjFibU4wYVc5dUlDaE5LU0I3WEc0Z0lFMGdQU0JpZFdabVpYSlViMEZ5Y21GNUtHNWxkeUJDZFdabVpYSW9UU2twWEc0Z0lIWmhjaUIwWlcxd0lEMGdXMDFiTTEwc0lFMWJNVjFkWEc0Z0lFMWJNVjBnUFNCMFpXMXdXekJkWEc0Z0lFMWJNMTBnUFNCMFpXMXdXekZkWEc0Z0lIWmhjaUJ2ZFhRZ1BTQjBhR2x6TGw5a2IwTnllWEIwUW14dlkyc29UU3dnZEdocGN5NWZhVzUyUzJWNVUyTm9aV1IxYkdVc0lFY3VTVTVXWDFOVlFsOU5TVmdzSUVjdVNVNVdYMU5DVDFncFhHNGdJSFpoY2lCaWRXWWdQU0J1WlhjZ1FuVm1abVZ5S0RFMktWeHVJQ0JpZFdZdWQzSnBkR1ZWU1c1ME16SkNSU2h2ZFhSYk1GMHNJREFwWEc0Z0lHSjFaaTUzY21sMFpWVkpiblF6TWtKRktHOTFkRnN6WFN3Z05DbGNiaUFnWW5WbUxuZHlhWFJsVlVsdWRETXlRa1VvYjNWMFd6SmRMQ0E0S1Z4dUlDQmlkV1l1ZDNKcGRHVlZTVzUwTXpKQ1JTaHZkWFJiTVYwc0lERXlLVnh1SUNCeVpYUjFjbTRnWW5WbVhHNTlYRzVjYmtGRlV5NXdjbTkwYjNSNWNHVXVjMk55ZFdJZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lITmpjblZpWDNabFl5aDBhR2x6TGw5clpYbFRZMmhsWkhWc1pTbGNiaUFnYzJOeWRXSmZkbVZqS0hSb2FYTXVYMmx1ZGt0bGVWTmphR1ZrZFd4bEtWeHVJQ0J6WTNKMVlsOTJaV01vZEdocGN5NWZhMlY1S1Z4dWZWeHVYRzVCUlZNdWNISnZkRzkwZVhCbExsOWtiME55ZVhCMFFteHZZMnNnUFNCbWRXNWpkR2x2YmlBb1RTd2dhMlY1VTJOb1pXUjFiR1VzSUZOVlFsOU5TVmdzSUZOQ1QxZ3BJSHRjYmlBZ2RtRnlJR3R6VW05M0xDQnpNQ3dnY3pFc0lITXlMQ0J6TXl3Z2REQXNJSFF4TENCME1pd2dkRE5jYmx4dUlDQnpNQ0E5SUUxYk1GMGdYaUJyWlhsVFkyaGxaSFZzWlZzd1hWeHVJQ0J6TVNBOUlFMWJNVjBnWGlCclpYbFRZMmhsWkhWc1pWc3hYVnh1SUNCek1pQTlJRTFiTWwwZ1hpQnJaWGxUWTJobFpIVnNaVnN5WFZ4dUlDQnpNeUE5SUUxYk0xMGdYaUJyWlhsVFkyaGxaSFZzWlZzelhWeHVJQ0JyYzFKdmR5QTlJRFJjYmlBZ1ptOXlJQ2gyWVhJZ2NtOTFibVFnUFNBeE95QnliM1Z1WkNBOElIUm9hWE11WDI1U2IzVnVaSE03SUhKdmRXNWtLeXNwSUh0Y2JpQWdJQ0IwTUNBOUlGTlZRbDlOU1ZoYk1GMWJjekFnUGo0K0lESTBYU0JlSUZOVlFsOU5TVmhiTVYxYktITXhJRDQrUGlBeE5pa2dKaUF3ZUdabVhTQmVJRk5WUWw5TlNWaGJNbDFiS0hNeUlENCtQaUE0S1NBbUlEQjRabVpkSUY0Z1UxVkNYMDFKV0ZzelhWdHpNeUFtSURCNFptWmRJRjRnYTJWNVUyTm9aV1IxYkdWYmEzTlNiM2NySzExY2JpQWdJQ0IwTVNBOUlGTlZRbDlOU1ZoYk1GMWJjekVnUGo0K0lESTBYU0JlSUZOVlFsOU5TVmhiTVYxYktITXlJRDQrUGlBeE5pa2dKaUF3ZUdabVhTQmVJRk5WUWw5TlNWaGJNbDFiS0hNeklENCtQaUE0S1NBbUlEQjRabVpkSUY0Z1UxVkNYMDFKV0ZzelhWdHpNQ0FtSURCNFptWmRJRjRnYTJWNVUyTm9aV1IxYkdWYmEzTlNiM2NySzExY2JpQWdJQ0IwTWlBOUlGTlZRbDlOU1ZoYk1GMWJjeklnUGo0K0lESTBYU0JlSUZOVlFsOU5TVmhiTVYxYktITXpJRDQrUGlBeE5pa2dKaUF3ZUdabVhTQmVJRk5WUWw5TlNWaGJNbDFiS0hNd0lENCtQaUE0S1NBbUlEQjRabVpkSUY0Z1UxVkNYMDFKV0ZzelhWdHpNU0FtSURCNFptWmRJRjRnYTJWNVUyTm9aV1IxYkdWYmEzTlNiM2NySzExY2JpQWdJQ0IwTXlBOUlGTlZRbDlOU1ZoYk1GMWJjek1nUGo0K0lESTBYU0JlSUZOVlFsOU5TVmhiTVYxYktITXdJRDQrUGlBeE5pa2dKaUF3ZUdabVhTQmVJRk5WUWw5TlNWaGJNbDFiS0hNeElENCtQaUE0S1NBbUlEQjRabVpkSUY0Z1UxVkNYMDFKV0ZzelhWdHpNaUFtSURCNFptWmRJRjRnYTJWNVUyTm9aV1IxYkdWYmEzTlNiM2NySzExY2JpQWdJQ0J6TUNBOUlIUXdYRzRnSUNBZ2N6RWdQU0IwTVZ4dUlDQWdJSE15SUQwZ2RESmNiaUFnSUNCek15QTlJSFF6WEc0Z0lIMWNiaUFnZERBZ1BTQW9LRk5DVDFoYmN6QWdQajQrSURJMFhTQThQQ0F5TkNrZ2ZDQW9VMEpQV0Zzb2N6RWdQajQrSURFMktTQW1JREI0Wm1aZElEdzhJREUyS1NCOElDaFRRazlZV3loek1pQStQajRnT0NrZ0ppQXdlR1ptWFNBOFBDQTRLU0I4SUZOQ1QxaGJjek1nSmlBd2VHWm1YU2tnWGlCclpYbFRZMmhsWkhWc1pWdHJjMUp2ZHlzclhWeHVJQ0IwTVNBOUlDZ29VMEpQV0Z0ek1TQStQajRnTWpSZElEdzhJREkwS1NCOElDaFRRazlZV3loek1pQStQajRnTVRZcElDWWdNSGhtWmwwZ1BEd2dNVFlwSUh3Z0tGTkNUMWhiS0hNeklENCtQaUE0S1NBbUlEQjRabVpkSUR3OElEZ3BJSHdnVTBKUFdGdHpNQ0FtSURCNFptWmRLU0JlSUd0bGVWTmphR1ZrZFd4bFcydHpVbTkzS3l0ZFhHNGdJSFF5SUQwZ0tDaFRRazlZVzNNeUlENCtQaUF5TkYwZ1BEd2dNalFwSUh3Z0tGTkNUMWhiS0hNeklENCtQaUF4TmlrZ0ppQXdlR1ptWFNBOFBDQXhOaWtnZkNBb1UwSlBXRnNvY3pBZ1BqNCtJRGdwSUNZZ01IaG1abDBnUER3Z09Da2dmQ0JUUWs5WVczTXhJQ1lnTUhobVpsMHBJRjRnYTJWNVUyTm9aV1IxYkdWYmEzTlNiM2NySzExY2JpQWdkRE1nUFNBb0tGTkNUMWhiY3pNZ1BqNCtJREkwWFNBOFBDQXlOQ2tnZkNBb1UwSlBXRnNvY3pBZ1BqNCtJREUyS1NBbUlEQjRabVpkSUR3OElERTJLU0I4SUNoVFFrOVlXeWh6TVNBK1BqNGdPQ2tnSmlBd2VHWm1YU0E4UENBNEtTQjhJRk5DVDFoYmN6SWdKaUF3ZUdabVhTa2dYaUJyWlhsVFkyaGxaSFZzWlZ0cmMxSnZkeXNyWFZ4dUlDQnlaWFIxY200Z1cxeHVJQ0FnSUdacGVIVndYM1ZwYm5Rek1paDBNQ2tzWEc0Z0lDQWdabWw0ZFhCZmRXbHVkRE15S0hReEtTeGNiaUFnSUNCbWFYaDFjRjkxYVc1ME16SW9kRElwTEZ4dUlDQWdJR1pwZUhWd1gzVnBiblF6TWloME15bGNiaUFnWFZ4dWZWeHVYRzVsZUhCdmNuUnpMa0ZGVXlBOUlFRkZVMXh1SWwxOSIsIi8vIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvc2VsZi1zaWduZWQvYmxvYi9naC1wYWdlcy9saWIvYXNuMS5qc1xuLy8gRmVkb3IsIHlvdSBhcmUgYW1hemluZy5cblxudmFyIGFzbjEgPSByZXF1aXJlKCdhc24xLmpzJylcblxudmFyIFJTQVByaXZhdGVLZXkgPSBhc24xLmRlZmluZSgnUlNBUHJpdmF0ZUtleScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3ZlcnNpb24nKS5pbnQoKSxcbiAgICB0aGlzLmtleSgnbW9kdWx1cycpLmludCgpLFxuICAgIHRoaXMua2V5KCdwdWJsaWNFeHBvbmVudCcpLmludCgpLFxuICAgIHRoaXMua2V5KCdwcml2YXRlRXhwb25lbnQnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHJpbWUxJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3ByaW1lMicpLmludCgpLFxuICAgIHRoaXMua2V5KCdleHBvbmVudDEnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgnZXhwb25lbnQyJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ2NvZWZmaWNpZW50JykuaW50KClcbiAgKVxufSlcbmV4cG9ydHMuUlNBUHJpdmF0ZUtleSA9IFJTQVByaXZhdGVLZXlcblxudmFyIFJTQVB1YmxpY0tleSA9IGFzbjEuZGVmaW5lKCdSU0FQdWJsaWNLZXknLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdtb2R1bHVzJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3B1YmxpY0V4cG9uZW50JykuaW50KClcbiAgKVxufSlcbmV4cG9ydHMuUlNBUHVibGljS2V5ID0gUlNBUHVibGljS2V5XG5cbnZhciBQdWJsaWNLZXkgPSBhc24xLmRlZmluZSgnU3ViamVjdFB1YmxpY0tleUluZm8nLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdhbGdvcml0aG0nKS51c2UoQWxnb3JpdGhtSWRlbnRpZmllciksXG4gICAgdGhpcy5rZXkoJ3N1YmplY3RQdWJsaWNLZXknKS5iaXRzdHIoKVxuICApXG59KVxuZXhwb3J0cy5QdWJsaWNLZXkgPSBQdWJsaWNLZXlcblxudmFyIEFsZ29yaXRobUlkZW50aWZpZXIgPSBhc24xLmRlZmluZSgnQWxnb3JpdGhtSWRlbnRpZmllcicsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ2FsZ29yaXRobScpLm9iamlkKCksXG4gICAgdGhpcy5rZXkoJ25vbmUnKS5udWxsXygpLm9wdGlvbmFsKCksXG4gICAgdGhpcy5rZXkoJ2N1cnZlJykub2JqaWQoKS5vcHRpb25hbCgpLFxuICAgIHRoaXMua2V5KCdwYXJhbXMnKS5zZXEoKS5vYmooXG4gICAgICB0aGlzLmtleSgncCcpLmludCgpLFxuICAgICAgdGhpcy5rZXkoJ3EnKS5pbnQoKSxcbiAgICAgIHRoaXMua2V5KCdnJykuaW50KClcbiAgICApLm9wdGlvbmFsKClcbiAgKVxufSlcblxudmFyIFByaXZhdGVLZXlJbmZvID0gYXNuMS5kZWZpbmUoJ1ByaXZhdGVLZXlJbmZvJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgndmVyc2lvbicpLmludCgpLFxuICAgIHRoaXMua2V5KCdhbGdvcml0aG0nKS51c2UoQWxnb3JpdGhtSWRlbnRpZmllciksXG4gICAgdGhpcy5rZXkoJ3N1YmplY3RQcml2YXRlS2V5Jykub2N0c3RyKClcbiAgKVxufSlcbmV4cG9ydHMuUHJpdmF0ZUtleSA9IFByaXZhdGVLZXlJbmZvXG52YXIgRW5jcnlwdGVkUHJpdmF0ZUtleUluZm8gPSBhc24xLmRlZmluZSgnRW5jcnlwdGVkUHJpdmF0ZUtleUluZm8nLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdhbGdvcml0aG0nKS5zZXEoKS5vYmooXG4gICAgICB0aGlzLmtleSgnaWQnKS5vYmppZCgpLFxuICAgICAgdGhpcy5rZXkoJ2RlY3J5cHQnKS5zZXEoKS5vYmooXG4gICAgICAgIHRoaXMua2V5KCdrZGUnKS5zZXEoKS5vYmooXG4gICAgICAgICAgdGhpcy5rZXkoJ2lkJykub2JqaWQoKSxcbiAgICAgICAgICB0aGlzLmtleSgna2RlcGFyYW1zJykuc2VxKCkub2JqKFxuICAgICAgICAgICAgdGhpcy5rZXkoJ3NhbHQnKS5vY3RzdHIoKSxcbiAgICAgICAgICAgIHRoaXMua2V5KCdpdGVycycpLmludCgpXG4gICAgICAgICAgKVxuICAgICAgICApLFxuICAgICAgICB0aGlzLmtleSgnY2lwaGVyJykuc2VxKCkub2JqKFxuICAgICAgICAgIHRoaXMua2V5KCdhbGdvJykub2JqaWQoKSxcbiAgICAgICAgICB0aGlzLmtleSgnaXYnKS5vY3RzdHIoKVxuICAgICAgICApXG4gICAgICApXG4gICAgKSxcbiAgICB0aGlzLmtleSgnc3ViamVjdFByaXZhdGVLZXknKS5vY3RzdHIoKVxuICApXG59KVxuXG5leHBvcnRzLkVuY3J5cHRlZFByaXZhdGVLZXkgPSBFbmNyeXB0ZWRQcml2YXRlS2V5SW5mb1xuXG52YXIgRFNBUHJpdmF0ZUtleSA9IGFzbjEuZGVmaW5lKCdEU0FQcml2YXRlS2V5JywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgndmVyc2lvbicpLmludCgpLFxuICAgIHRoaXMua2V5KCdwJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3EnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgnZycpLmludCgpLFxuICAgIHRoaXMua2V5KCdwdWJfa2V5JykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3ByaXZfa2V5JykuaW50KClcbiAgKVxufSlcbmV4cG9ydHMuRFNBUHJpdmF0ZUtleSA9IERTQVByaXZhdGVLZXlcblxuZXhwb3J0cy5EU0FwYXJhbSA9IGFzbjEuZGVmaW5lKCdEU0FwYXJhbScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5pbnQoKVxufSlcbnZhciBFQ1ByaXZhdGVLZXkgPSBhc24xLmRlZmluZSgnRUNQcml2YXRlS2V5JywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgndmVyc2lvbicpLmludCgpLFxuICAgIHRoaXMua2V5KCdwcml2YXRlS2V5Jykub2N0c3RyKCksXG4gICAgdGhpcy5rZXkoJ3BhcmFtZXRlcnMnKS5vcHRpb25hbCgpLmV4cGxpY2l0KDApLnVzZShFQ1BhcmFtZXRlcnMpLFxuICAgIHRoaXMua2V5KCdwdWJsaWNLZXknKS5vcHRpb25hbCgpLmV4cGxpY2l0KDEpLmJpdHN0cigpXG4gIClcbn0pXG5leHBvcnRzLkVDUHJpdmF0ZUtleSA9IEVDUHJpdmF0ZUtleVxudmFyIEVDUGFyYW1ldGVycyA9IGFzbjEuZGVmaW5lKCdFQ1BhcmFtZXRlcnMnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuY2hvaWNlKHtcbiAgICBuYW1lZEN1cnZlOiB0aGlzLm9iamlkKClcbiAgfSlcbn0pXG5cbmV4cG9ydHMuc2lnbmF0dXJlID0gYXNuMS5kZWZpbmUoJ3NpZ25hdHVyZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3InKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncycpLmludCgpXG4gIClcbn0pXG4iLCJ2YXIgYXNuMSA9IGV4cG9ydHM7XG5cbmFzbjEuYmlnbnVtID0gcmVxdWlyZSgnYm4uanMnKTtcblxuYXNuMS5kZWZpbmUgPSByZXF1aXJlKCcuL2FzbjEvYXBpJykuZGVmaW5lO1xuYXNuMS5iYXNlID0gcmVxdWlyZSgnLi9hc24xL2Jhc2UnKTtcbmFzbjEuY29uc3RhbnRzID0gcmVxdWlyZSgnLi9hc24xL2NvbnN0YW50cycpO1xuYXNuMS5kZWNvZGVycyA9IHJlcXVpcmUoJy4vYXNuMS9kZWNvZGVycycpO1xuYXNuMS5lbmNvZGVycyA9IHJlcXVpcmUoJy4vYXNuMS9lbmNvZGVycycpO1xuIiwidmFyIGVuY29kZXJzID0gZXhwb3J0cztcblxuZW5jb2RlcnMuZGVyID0gcmVxdWlyZSgnLi9kZXInKTtcbmVuY29kZXJzLnBlbSA9IHJlcXVpcmUoJy4vcGVtJyk7XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcblxudmFyIGFzbjEgPSByZXF1aXJlKCcuLi8uLi9hc24xJyk7XG52YXIgREVSRW5jb2RlciA9IHJlcXVpcmUoJy4vZGVyJyk7XG5cbmZ1bmN0aW9uIFBFTUVuY29kZXIoZW50aXR5KSB7XG4gIERFUkVuY29kZXIuY2FsbCh0aGlzLCBlbnRpdHkpO1xuICB0aGlzLmVuYyA9ICdwZW0nO1xufTtcbmluaGVyaXRzKFBFTUVuY29kZXIsIERFUkVuY29kZXIpO1xubW9kdWxlLmV4cG9ydHMgPSBQRU1FbmNvZGVyO1xuXG5QRU1FbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgb3B0aW9ucykge1xuICB2YXIgYnVmID0gREVSRW5jb2Rlci5wcm90b3R5cGUuZW5jb2RlLmNhbGwodGhpcywgZGF0YSk7XG5cbiAgdmFyIHAgPSBidWYudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICB2YXIgb3V0ID0gWyAnLS0tLS1CRUdJTiAnICsgb3B0aW9ucy5sYWJlbCArICctLS0tLScgXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwLmxlbmd0aDsgaSArPSA2NClcbiAgICBvdXQucHVzaChwLnNsaWNlKGksIGkgKyA2NCkpO1xuICBvdXQucHVzaCgnLS0tLS1FTkQgJyArIG9wdGlvbnMubGFiZWwgKyAnLS0tLS0nKTtcbiAgcmV0dXJuIG91dC5qb2luKCdcXG4nKTtcbn07XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcblxudmFyIGFzbjEgPSByZXF1aXJlKCcuLi8uLi9hc24xJyk7XG52YXIgYmFzZSA9IGFzbjEuYmFzZTtcbnZhciBiaWdudW0gPSBhc24xLmJpZ251bTtcblxuLy8gSW1wb3J0IERFUiBjb25zdGFudHNcbnZhciBkZXIgPSBhc24xLmNvbnN0YW50cy5kZXI7XG5cbmZ1bmN0aW9uIERFUkVuY29kZXIoZW50aXR5KSB7XG4gIHRoaXMuZW5jID0gJ2Rlcic7XG4gIHRoaXMubmFtZSA9IGVudGl0eS5uYW1lO1xuICB0aGlzLmVudGl0eSA9IGVudGl0eTtcblxuICAvLyBDb25zdHJ1Y3QgYmFzZSB0cmVlXG4gIHRoaXMudHJlZSA9IG5ldyBERVJOb2RlKCk7XG4gIHRoaXMudHJlZS5faW5pdChlbnRpdHkuYm9keSk7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBERVJFbmNvZGVyO1xuXG5ERVJFbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgcmVwb3J0ZXIpIHtcbiAgcmV0dXJuIHRoaXMudHJlZS5fZW5jb2RlKGRhdGEsIHJlcG9ydGVyKS5qb2luKCk7XG59O1xuXG4vLyBUcmVlIG1ldGhvZHNcblxuZnVuY3Rpb24gREVSTm9kZShwYXJlbnQpIHtcbiAgYmFzZS5Ob2RlLmNhbGwodGhpcywgJ2RlcicsIHBhcmVudCk7XG59XG5pbmhlcml0cyhERVJOb2RlLCBiYXNlLk5vZGUpO1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlQ29tcG9zaXRlID0gZnVuY3Rpb24gZW5jb2RlQ29tcG9zaXRlKHRhZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbWl0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQpIHtcbiAgdmFyIGVuY29kZWRUYWcgPSBlbmNvZGVUYWcodGFnLCBwcmltaXRpdmUsIGNscywgdGhpcy5yZXBvcnRlcik7XG5cbiAgLy8gU2hvcnQgZm9ybVxuICBpZiAoY29udGVudC5sZW5ndGggPCAweDgwKSB7XG4gICAgdmFyIGhlYWRlciA9IG5ldyBCdWZmZXIoMik7XG4gICAgaGVhZGVyWzBdID0gZW5jb2RlZFRhZztcbiAgICBoZWFkZXJbMV0gPSBjb250ZW50Lmxlbmd0aDtcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihbIGhlYWRlciwgY29udGVudCBdKTtcbiAgfVxuXG4gIC8vIExvbmcgZm9ybVxuICAvLyBDb3VudCBvY3RldHMgcmVxdWlyZWQgdG8gc3RvcmUgbGVuZ3RoXG4gIHZhciBsZW5PY3RldHMgPSAxO1xuICBmb3IgKHZhciBpID0gY29udGVudC5sZW5ndGg7IGkgPj0gMHgxMDA7IGkgPj49IDgpXG4gICAgbGVuT2N0ZXRzKys7XG5cbiAgdmFyIGhlYWRlciA9IG5ldyBCdWZmZXIoMSArIDEgKyBsZW5PY3RldHMpO1xuICBoZWFkZXJbMF0gPSBlbmNvZGVkVGFnO1xuICBoZWFkZXJbMV0gPSAweDgwIHwgbGVuT2N0ZXRzO1xuXG4gIGZvciAodmFyIGkgPSAxICsgbGVuT2N0ZXRzLCBqID0gY29udGVudC5sZW5ndGg7IGogPiAwOyBpLS0sIGogPj49IDgpXG4gICAgaGVhZGVyW2ldID0gaiAmIDB4ZmY7XG5cbiAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoWyBoZWFkZXIsIGNvbnRlbnQgXSk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlU3RyID0gZnVuY3Rpb24gZW5jb2RlU3RyKHN0ciwgdGFnKSB7XG4gIGlmICh0YWcgPT09ICdvY3RzdHInKVxuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKHN0cik7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ2JpdHN0cicpXG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoWyBzdHIudW51c2VkIHwgMCwgc3RyLmRhdGEgXSk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ2lhNXN0cicgfHwgdGFnID09PSAndXRmOHN0cicpXG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoc3RyKTtcbiAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ0VuY29kaW5nIG9mIHN0cmluZyB0eXBlOiAnICsgdGFnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyB1bnN1cHBvcnRlZCcpO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2VuY29kZU9iamlkID0gZnVuY3Rpb24gZW5jb2RlT2JqaWQoaWQsIHZhbHVlcywgcmVsYXRpdmUpIHtcbiAgaWYgKHR5cGVvZiBpZCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoIXZhbHVlcylcbiAgICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdzdHJpbmcgb2JqaWQgZ2l2ZW4sIGJ1dCBubyB2YWx1ZXMgbWFwIGZvdW5kJyk7XG4gICAgaWYgKCF2YWx1ZXMuaGFzT3duUHJvcGVydHkoaWQpKVxuICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ29iamlkIG5vdCBmb3VuZCBpbiB2YWx1ZXMgbWFwJyk7XG4gICAgaWQgPSB2YWx1ZXNbaWRdLnNwbGl0KC9bXFxzXFwuXSsvZyk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpZC5sZW5ndGg7IGkrKylcbiAgICAgIGlkW2ldIHw9IDA7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShpZCkpIHtcbiAgICBpZCA9IGlkLnNsaWNlKCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpZC5sZW5ndGg7IGkrKylcbiAgICAgIGlkW2ldIHw9IDA7XG4gIH1cblxuICBpZiAoIUFycmF5LmlzQXJyYXkoaWQpKSB7XG4gICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ29iamlkKCkgc2hvdWxkIGJlIGVpdGhlciBhcnJheSBvciBzdHJpbmcsICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdnb3Q6ICcgKyBKU09OLnN0cmluZ2lmeShpZCkpO1xuICB9XG5cbiAgaWYgKCFyZWxhdGl2ZSkge1xuICAgIGlmIChpZFsxXSA+PSA0MClcbiAgICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdTZWNvbmQgb2JqaWQgaWRlbnRpZmllciBPT0InKTtcbiAgICBpZC5zcGxpY2UoMCwgMiwgaWRbMF0gKiA0MCArIGlkWzFdKTtcbiAgfVxuXG4gIC8vIENvdW50IG51bWJlciBvZiBvY3RldHNcbiAgdmFyIHNpemUgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGlkLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGlkZW50ID0gaWRbaV07XG4gICAgZm9yIChzaXplKys7IGlkZW50ID49IDB4ODA7IGlkZW50ID4+PSA3KVxuICAgICAgc2l6ZSsrO1xuICB9XG5cbiAgdmFyIG9iamlkID0gbmV3IEJ1ZmZlcihzaXplKTtcbiAgdmFyIG9mZnNldCA9IG9iamlkLmxlbmd0aCAtIDE7XG4gIGZvciAodmFyIGkgPSBpZC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciBpZGVudCA9IGlkW2ldO1xuICAgIG9iamlkW29mZnNldC0tXSA9IGlkZW50ICYgMHg3ZjtcbiAgICB3aGlsZSAoKGlkZW50ID4+PSA3KSA+IDApXG4gICAgICBvYmppZFtvZmZzZXQtLV0gPSAweDgwIHwgKGlkZW50ICYgMHg3Zik7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihvYmppZCk7XG59O1xuXG5mdW5jdGlvbiB0d28obnVtKSB7XG4gIGlmIChudW0gPCAxMClcbiAgICByZXR1cm4gJzAnICsgbnVtO1xuICBlbHNlXG4gICAgcmV0dXJuIG51bTtcbn1cblxuREVSTm9kZS5wcm90b3R5cGUuX2VuY29kZVRpbWUgPSBmdW5jdGlvbiBlbmNvZGVUaW1lKHRpbWUsIHRhZykge1xuICB2YXIgc3RyO1xuICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHRpbWUpO1xuXG4gIGlmICh0YWcgPT09ICdnZW50aW1lJykge1xuICAgIHN0ciA9IFtcbiAgICAgIHR3byhkYXRlLmdldEZ1bGxZZWFyKCkpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDRGF0ZSgpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ0hvdXJzKCkpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDTWludXRlcygpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ1NlY29uZHMoKSksXG4gICAgICAnWidcbiAgICBdLmpvaW4oJycpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ3V0Y3RpbWUnKSB7XG4gICAgc3RyID0gW1xuICAgICAgdHdvKGRhdGUuZ2V0RnVsbFllYXIoKSAlIDEwMCksXG4gICAgICB0d28oZGF0ZS5nZXRVVENNb250aCgpICsgMSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENEYXRlKCkpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDSG91cnMoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENNaW51dGVzKCkpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDU2Vjb25kcygpKSxcbiAgICAgICdaJ1xuICAgIF0uam9pbignJyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5yZXBvcnRlci5lcnJvcignRW5jb2RpbmcgJyArIHRhZyArICcgdGltZSBpcyBub3Qgc3VwcG9ydGVkIHlldCcpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX2VuY29kZVN0cihzdHIsICdvY3RzdHInKTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVOdWxsID0gZnVuY3Rpb24gZW5jb2RlTnVsbCgpIHtcbiAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoJycpO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2VuY29kZUludCA9IGZ1bmN0aW9uIGVuY29kZUludChudW0sIHZhbHVlcykge1xuICBpZiAodHlwZW9mIG51bSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoIXZhbHVlcylcbiAgICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdTdHJpbmcgaW50IG9yIGVudW0gZ2l2ZW4sIGJ1dCBubyB2YWx1ZXMgbWFwJyk7XG4gICAgaWYgKCF2YWx1ZXMuaGFzT3duUHJvcGVydHkobnVtKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ1ZhbHVlcyBtYXAgZG9lc25cXCd0IGNvbnRhaW46ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkobnVtKSk7XG4gICAgfVxuICAgIG51bSA9IHZhbHVlc1tudW1dO1xuICB9XG5cbiAgLy8gQmlnbnVtLCBhc3N1bWUgYmlnIGVuZGlhblxuICBpZiAodHlwZW9mIG51bSAhPT0gJ251bWJlcicgJiYgIUJ1ZmZlci5pc0J1ZmZlcihudW0pKSB7XG4gICAgdmFyIG51bUFycmF5ID0gbnVtLnRvQXJyYXkoKTtcbiAgICBpZiAobnVtLnNpZ24gPT09IGZhbHNlICYmIG51bUFycmF5WzBdICYgMHg4MCkge1xuICAgICAgbnVtQXJyYXkudW5zaGlmdCgwKTtcbiAgICB9XG4gICAgbnVtID0gbmV3IEJ1ZmZlcihudW1BcnJheSk7XG4gIH1cblxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG51bSkpIHtcbiAgICB2YXIgc2l6ZSA9IG51bS5sZW5ndGg7XG4gICAgaWYgKG51bS5sZW5ndGggPT09IDApXG4gICAgICBzaXplKys7XG5cbiAgICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcihzaXplKTtcbiAgICBudW0uY29weShvdXQpO1xuICAgIGlmIChudW0ubGVuZ3RoID09PSAwKVxuICAgICAgb3V0WzBdID0gMFxuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKG91dCk7XG4gIH1cblxuICBpZiAobnVtIDwgMHg4MClcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihudW0pO1xuXG4gIGlmIChudW0gPCAweDEwMClcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihbMCwgbnVtXSk7XG5cbiAgdmFyIHNpemUgPSAxO1xuICBmb3IgKHZhciBpID0gbnVtOyBpID49IDB4MTAwOyBpID4+PSA4KVxuICAgIHNpemUrKztcblxuICB2YXIgb3V0ID0gbmV3IEFycmF5KHNpemUpO1xuICBmb3IgKHZhciBpID0gb3V0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgb3V0W2ldID0gbnVtICYgMHhmZjtcbiAgICBudW0gPj49IDg7XG4gIH1cbiAgaWYob3V0WzBdICYgMHg4MCkge1xuICAgIG91dC51bnNoaWZ0KDApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIobmV3IEJ1ZmZlcihvdXQpKTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVCb29sID0gZnVuY3Rpb24gZW5jb2RlQm9vbCh2YWx1ZSkge1xuICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcih2YWx1ZSA/IDB4ZmYgOiAwKTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl91c2UgPSBmdW5jdGlvbiB1c2UoZW50aXR5LCBvYmopIHtcbiAgaWYgKHR5cGVvZiBlbnRpdHkgPT09ICdmdW5jdGlvbicpXG4gICAgZW50aXR5ID0gZW50aXR5KG9iaik7XG4gIHJldHVybiBlbnRpdHkuX2dldEVuY29kZXIoJ2RlcicpLnRyZWU7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fc2tpcERlZmF1bHQgPSBmdW5jdGlvbiBza2lwRGVmYXVsdChkYXRhQnVmZmVyLCByZXBvcnRlciwgcGFyZW50KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgdmFyIGk7XG4gIGlmIChzdGF0ZVsnZGVmYXVsdCddID09PSBudWxsKVxuICAgIHJldHVybiBmYWxzZTtcblxuICB2YXIgZGF0YSA9IGRhdGFCdWZmZXIuam9pbigpO1xuICBpZiAoc3RhdGUuZGVmYXVsdEJ1ZmZlciA9PT0gdW5kZWZpbmVkKVxuICAgIHN0YXRlLmRlZmF1bHRCdWZmZXIgPSB0aGlzLl9lbmNvZGVWYWx1ZShzdGF0ZVsnZGVmYXVsdCddLCByZXBvcnRlciwgcGFyZW50KS5qb2luKCk7XG5cbiAgaWYgKGRhdGEubGVuZ3RoICE9PSBzdGF0ZS5kZWZhdWx0QnVmZmVyLmxlbmd0aClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgZm9yIChpPTA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKVxuICAgIGlmIChkYXRhW2ldICE9PSBzdGF0ZS5kZWZhdWx0QnVmZmVyW2ldKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiB0cnVlO1xufTtcblxuLy8gVXRpbGl0eSBtZXRob2RzXG5cbmZ1bmN0aW9uIGVuY29kZVRhZyh0YWcsIHByaW1pdGl2ZSwgY2xzLCByZXBvcnRlcikge1xuICB2YXIgcmVzO1xuXG4gIGlmICh0YWcgPT09ICdzZXFvZicpXG4gICAgdGFnID0gJ3NlcSc7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ3NldG9mJylcbiAgICB0YWcgPSAnc2V0JztcblxuICBpZiAoZGVyLnRhZ0J5TmFtZS5oYXNPd25Qcm9wZXJ0eSh0YWcpKVxuICAgIHJlcyA9IGRlci50YWdCeU5hbWVbdGFnXTtcbiAgZWxzZSBpZiAodHlwZW9mIHRhZyA9PT0gJ251bWJlcicgJiYgKHRhZyB8IDApID09PSB0YWcpXG4gICAgcmVzID0gdGFnO1xuICBlbHNlXG4gICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdVbmtub3duIHRhZzogJyArIHRhZyk7XG5cbiAgaWYgKHJlcyA+PSAweDFmKVxuICAgIHJldHVybiByZXBvcnRlci5lcnJvcignTXVsdGktb2N0ZXQgdGFnIGVuY29kaW5nIHVuc3VwcG9ydGVkJyk7XG5cbiAgaWYgKCFwcmltaXRpdmUpXG4gICAgcmVzIHw9IDB4MjA7XG5cbiAgcmVzIHw9IChkZXIudGFnQ2xhc3NCeU5hbWVbY2xzIHx8ICd1bml2ZXJzYWwnXSA8PCA2KTtcblxuICByZXR1cm4gcmVzO1xufVxuIiwidmFyIGRlY29kZXJzID0gZXhwb3J0cztcblxuZGVjb2RlcnMuZGVyID0gcmVxdWlyZSgnLi9kZXInKTtcbmRlY29kZXJzLnBlbSA9IHJlcXVpcmUoJy4vcGVtJyk7XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcblxudmFyIGFzbjEgPSByZXF1aXJlKCcuLi8uLi9hc24xJyk7XG52YXIgREVSRGVjb2RlciA9IHJlcXVpcmUoJy4vZGVyJyk7XG5cbmZ1bmN0aW9uIFBFTURlY29kZXIoZW50aXR5KSB7XG4gIERFUkRlY29kZXIuY2FsbCh0aGlzLCBlbnRpdHkpO1xuICB0aGlzLmVuYyA9ICdwZW0nO1xufTtcbmluaGVyaXRzKFBFTURlY29kZXIsIERFUkRlY29kZXIpO1xubW9kdWxlLmV4cG9ydHMgPSBQRU1EZWNvZGVyO1xuXG5QRU1EZWNvZGVyLnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUoZGF0YSwgb3B0aW9ucykge1xuICB2YXIgbGluZXMgPSBkYXRhLnRvU3RyaW5nKCkuc3BsaXQoL1tcXHJcXG5dKy9nKTtcblxuICB2YXIgbGFiZWwgPSBvcHRpb25zLmxhYmVsLnRvVXBwZXJDYXNlKCk7XG5cbiAgdmFyIHJlID0gL14tLS0tLShCRUdJTnxFTkQpIChbXi1dKyktLS0tLSQvO1xuICB2YXIgc3RhcnQgPSAtMTtcbiAgdmFyIGVuZCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG1hdGNoID0gbGluZXNbaV0ubWF0Y2gocmUpO1xuICAgIGlmIChtYXRjaCA9PT0gbnVsbClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgaWYgKG1hdGNoWzJdICE9PSBsYWJlbClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgaWYgKHN0YXJ0ID09PSAtMSkge1xuICAgICAgaWYgKG1hdGNoWzFdICE9PSAnQkVHSU4nKVxuICAgICAgICBicmVhaztcbiAgICAgIHN0YXJ0ID0gaTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG1hdGNoWzFdICE9PSAnRU5EJylcbiAgICAgICAgYnJlYWs7XG4gICAgICBlbmQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChzdGFydCA9PT0gLTEgfHwgZW5kID09PSAtMSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1BFTSBzZWN0aW9uIG5vdCBmb3VuZCBmb3I6ICcgKyBsYWJlbCk7XG5cbiAgdmFyIGJhc2U2NCA9IGxpbmVzLnNsaWNlKHN0YXJ0ICsgMSwgZW5kKS5qb2luKCcnKTtcbiAgLy8gUmVtb3ZlIGV4Y2Vzc2l2ZSBzeW1ib2xzXG4gIGJhc2U2NC5yZXBsYWNlKC9bXmEtejAtOVxcK1xcLz1dKy9naSwgJycpO1xuXG4gIHZhciBpbnB1dCA9IG5ldyBCdWZmZXIoYmFzZTY0LCAnYmFzZTY0Jyk7XG4gIHJldHVybiBERVJEZWNvZGVyLnByb3RvdHlwZS5kZWNvZGUuY2FsbCh0aGlzLCBpbnB1dCwgb3B0aW9ucyk7XG59O1xuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxudmFyIGFzbjEgPSByZXF1aXJlKCcuLi8uLi9hc24xJyk7XG52YXIgYmFzZSA9IGFzbjEuYmFzZTtcbnZhciBiaWdudW0gPSBhc24xLmJpZ251bTtcblxuLy8gSW1wb3J0IERFUiBjb25zdGFudHNcbnZhciBkZXIgPSBhc24xLmNvbnN0YW50cy5kZXI7XG5cbmZ1bmN0aW9uIERFUkRlY29kZXIoZW50aXR5KSB7XG4gIHRoaXMuZW5jID0gJ2Rlcic7XG4gIHRoaXMubmFtZSA9IGVudGl0eS5uYW1lO1xuICB0aGlzLmVudGl0eSA9IGVudGl0eTtcblxuICAvLyBDb25zdHJ1Y3QgYmFzZSB0cmVlXG4gIHRoaXMudHJlZSA9IG5ldyBERVJOb2RlKCk7XG4gIHRoaXMudHJlZS5faW5pdChlbnRpdHkuYm9keSk7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBERVJEZWNvZGVyO1xuXG5ERVJEZWNvZGVyLnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUoZGF0YSwgb3B0aW9ucykge1xuICBpZiAoIShkYXRhIGluc3RhbmNlb2YgYmFzZS5EZWNvZGVyQnVmZmVyKSlcbiAgICBkYXRhID0gbmV3IGJhc2UuRGVjb2RlckJ1ZmZlcihkYXRhLCBvcHRpb25zKTtcblxuICByZXR1cm4gdGhpcy50cmVlLl9kZWNvZGUoZGF0YSwgb3B0aW9ucyk7XG59O1xuXG4vLyBUcmVlIG1ldGhvZHNcblxuZnVuY3Rpb24gREVSTm9kZShwYXJlbnQpIHtcbiAgYmFzZS5Ob2RlLmNhbGwodGhpcywgJ2RlcicsIHBhcmVudCk7XG59XG5pbmhlcml0cyhERVJOb2RlLCBiYXNlLk5vZGUpO1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fcGVla1RhZyA9IGZ1bmN0aW9uIHBlZWtUYWcoYnVmZmVyLCB0YWcsIGFueSkge1xuICBpZiAoYnVmZmVyLmlzRW1wdHkoKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIHN0YXRlID0gYnVmZmVyLnNhdmUoKTtcbiAgdmFyIGRlY29kZWRUYWcgPSBkZXJEZWNvZGVUYWcoYnVmZmVyLCAnRmFpbGVkIHRvIHBlZWsgdGFnOiBcIicgKyB0YWcgKyAnXCInKTtcbiAgaWYgKGJ1ZmZlci5pc0Vycm9yKGRlY29kZWRUYWcpKVxuICAgIHJldHVybiBkZWNvZGVkVGFnO1xuXG4gIGJ1ZmZlci5yZXN0b3JlKHN0YXRlKTtcblxuICByZXR1cm4gZGVjb2RlZFRhZy50YWcgPT09IHRhZyB8fCBkZWNvZGVkVGFnLnRhZ1N0ciA9PT0gdGFnIHx8IGFueTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9kZWNvZGVUYWcgPSBmdW5jdGlvbiBkZWNvZGVUYWcoYnVmZmVyLCB0YWcsIGFueSkge1xuICB2YXIgZGVjb2RlZFRhZyA9IGRlckRlY29kZVRhZyhidWZmZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdGYWlsZWQgdG8gZGVjb2RlIHRhZyBvZiBcIicgKyB0YWcgKyAnXCInKTtcbiAgaWYgKGJ1ZmZlci5pc0Vycm9yKGRlY29kZWRUYWcpKVxuICAgIHJldHVybiBkZWNvZGVkVGFnO1xuXG4gIHZhciBsZW4gPSBkZXJEZWNvZGVMZW4oYnVmZmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgIGRlY29kZWRUYWcucHJpbWl0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICdGYWlsZWQgdG8gZ2V0IGxlbmd0aCBvZiBcIicgKyB0YWcgKyAnXCInKTtcblxuICAvLyBGYWlsdXJlXG4gIGlmIChidWZmZXIuaXNFcnJvcihsZW4pKVxuICAgIHJldHVybiBsZW47XG5cbiAgaWYgKCFhbnkgJiZcbiAgICAgIGRlY29kZWRUYWcudGFnICE9PSB0YWcgJiZcbiAgICAgIGRlY29kZWRUYWcudGFnU3RyICE9PSB0YWcgJiZcbiAgICAgIGRlY29kZWRUYWcudGFnU3RyICsgJ29mJyAhPT0gdGFnKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5lcnJvcignRmFpbGVkIHRvIG1hdGNoIHRhZzogXCInICsgdGFnICsgJ1wiJyk7XG4gIH1cblxuICBpZiAoZGVjb2RlZFRhZy5wcmltaXRpdmUgfHwgbGVuICE9PSBudWxsKVxuICAgIHJldHVybiBidWZmZXIuc2tpcChsZW4sICdGYWlsZWQgdG8gbWF0Y2ggYm9keSBvZjogXCInICsgdGFnICsgJ1wiJyk7XG5cbiAgLy8gSW5kZWZpbml0ZSBsZW5ndGguLi4gZmluZCBFTkQgdGFnXG4gIHZhciBzdGF0ZSA9IGJ1ZmZlci5zYXZlKCk7XG4gIHZhciByZXMgPSB0aGlzLl9za2lwVW50aWxFbmQoXG4gICAgICBidWZmZXIsXG4gICAgICAnRmFpbGVkIHRvIHNraXAgaW5kZWZpbml0ZSBsZW5ndGggYm9keTogXCInICsgdGhpcy50YWcgKyAnXCInKTtcbiAgaWYgKGJ1ZmZlci5pc0Vycm9yKHJlcykpXG4gICAgcmV0dXJuIHJlcztcblxuICBsZW4gPSBidWZmZXIub2Zmc2V0IC0gc3RhdGUub2Zmc2V0O1xuICBidWZmZXIucmVzdG9yZShzdGF0ZSk7XG4gIHJldHVybiBidWZmZXIuc2tpcChsZW4sICdGYWlsZWQgdG8gbWF0Y2ggYm9keSBvZjogXCInICsgdGFnICsgJ1wiJyk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fc2tpcFVudGlsRW5kID0gZnVuY3Rpb24gc2tpcFVudGlsRW5kKGJ1ZmZlciwgZmFpbCkge1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIHZhciB0YWcgPSBkZXJEZWNvZGVUYWcoYnVmZmVyLCBmYWlsKTtcbiAgICBpZiAoYnVmZmVyLmlzRXJyb3IodGFnKSlcbiAgICAgIHJldHVybiB0YWc7XG4gICAgdmFyIGxlbiA9IGRlckRlY29kZUxlbihidWZmZXIsIHRhZy5wcmltaXRpdmUsIGZhaWwpO1xuICAgIGlmIChidWZmZXIuaXNFcnJvcihsZW4pKVxuICAgICAgcmV0dXJuIGxlbjtcblxuICAgIHZhciByZXM7XG4gICAgaWYgKHRhZy5wcmltaXRpdmUgfHwgbGVuICE9PSBudWxsKVxuICAgICAgcmVzID0gYnVmZmVyLnNraXAobGVuKVxuICAgIGVsc2VcbiAgICAgIHJlcyA9IHRoaXMuX3NraXBVbnRpbEVuZChidWZmZXIsIGZhaWwpO1xuXG4gICAgLy8gRmFpbHVyZVxuICAgIGlmIChidWZmZXIuaXNFcnJvcihyZXMpKVxuICAgICAgcmV0dXJuIHJlcztcblxuICAgIGlmICh0YWcudGFnU3RyID09PSAnZW5kJylcbiAgICAgIGJyZWFrO1xuICB9XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlTGlzdCA9IGZ1bmN0aW9uIGRlY29kZUxpc3QoYnVmZmVyLCB0YWcsIGRlY29kZXIpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB3aGlsZSAoIWJ1ZmZlci5pc0VtcHR5KCkpIHtcbiAgICB2YXIgcG9zc2libGVFbmQgPSB0aGlzLl9wZWVrVGFnKGJ1ZmZlciwgJ2VuZCcpO1xuICAgIGlmIChidWZmZXIuaXNFcnJvcihwb3NzaWJsZUVuZCkpXG4gICAgICByZXR1cm4gcG9zc2libGVFbmQ7XG5cbiAgICB2YXIgcmVzID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLCAnZGVyJyk7XG4gICAgaWYgKGJ1ZmZlci5pc0Vycm9yKHJlcykgJiYgcG9zc2libGVFbmQpXG4gICAgICBicmVhaztcbiAgICByZXN1bHQucHVzaChyZXMpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlU3RyID0gZnVuY3Rpb24gZGVjb2RlU3RyKGJ1ZmZlciwgdGFnKSB7XG4gIGlmICh0YWcgPT09ICdvY3RzdHInKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5yYXcoKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdiaXRzdHInKSB7XG4gICAgdmFyIHVudXNlZCA9IGJ1ZmZlci5yZWFkVUludDgoKTtcbiAgICBpZiAoYnVmZmVyLmlzRXJyb3IodW51c2VkKSlcbiAgICAgIHJldHVybiB1bnVzZWQ7XG5cbiAgICByZXR1cm4geyB1bnVzZWQ6IHVudXNlZCwgZGF0YTogYnVmZmVyLnJhdygpIH07XG4gIH0gZWxzZSBpZiAodGFnID09PSAnaWE1c3RyJyB8fCB0YWcgPT09ICd1dGY4c3RyJykge1xuICAgIHJldHVybiBidWZmZXIucmF3KCkudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdGhpcy5lcnJvcignRGVjb2Rpbmcgb2Ygc3RyaW5nIHR5cGU6ICcgKyB0YWcgKyAnIHVuc3VwcG9ydGVkJyk7XG4gIH1cbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9kZWNvZGVPYmppZCA9IGZ1bmN0aW9uIGRlY29kZU9iamlkKGJ1ZmZlciwgdmFsdWVzLCByZWxhdGl2ZSkge1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgdmFyIGlkZW50ID0gMDtcbiAgd2hpbGUgKCFidWZmZXIuaXNFbXB0eSgpKSB7XG4gICAgdmFyIHN1YmlkZW50ID0gYnVmZmVyLnJlYWRVSW50OCgpO1xuICAgIGlkZW50IDw8PSA3O1xuICAgIGlkZW50IHw9IHN1YmlkZW50ICYgMHg3ZjtcbiAgICBpZiAoKHN1YmlkZW50ICYgMHg4MCkgPT09IDApIHtcbiAgICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnQpO1xuICAgICAgaWRlbnQgPSAwO1xuICAgIH1cbiAgfVxuICBpZiAoc3ViaWRlbnQgJiAweDgwKVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnQpO1xuXG4gIHZhciBmaXJzdCA9IChpZGVudGlmaWVyc1swXSAvIDQwKSB8IDA7XG4gIHZhciBzZWNvbmQgPSBpZGVudGlmaWVyc1swXSAlIDQwO1xuXG4gIGlmIChyZWxhdGl2ZSlcbiAgICByZXN1bHQgPSBpZGVudGlmaWVycztcbiAgZWxzZVxuICAgIHJlc3VsdCA9IFtmaXJzdCwgc2Vjb25kXS5jb25jYXQoaWRlbnRpZmllcnMuc2xpY2UoMSkpO1xuXG4gIGlmICh2YWx1ZXMpXG4gICAgcmVzdWx0ID0gdmFsdWVzW3Jlc3VsdC5qb2luKCcgJyldO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlVGltZSA9IGZ1bmN0aW9uIGRlY29kZVRpbWUoYnVmZmVyLCB0YWcpIHtcbiAgdmFyIHN0ciA9IGJ1ZmZlci5yYXcoKS50b1N0cmluZygpO1xuICBpZiAodGFnID09PSAnZ2VudGltZScpIHtcbiAgICB2YXIgeWVhciA9IHN0ci5zbGljZSgwLCA0KSB8IDA7XG4gICAgdmFyIG1vbiA9IHN0ci5zbGljZSg0LCA2KSB8IDA7XG4gICAgdmFyIGRheSA9IHN0ci5zbGljZSg2LCA4KSB8IDA7XG4gICAgdmFyIGhvdXIgPSBzdHIuc2xpY2UoOCwgMTApIHwgMDtcbiAgICB2YXIgbWluID0gc3RyLnNsaWNlKDEwLCAxMikgfCAwO1xuICAgIHZhciBzZWMgPSBzdHIuc2xpY2UoMTIsIDE0KSB8IDA7XG4gIH0gZWxzZSBpZiAodGFnID09PSAndXRjdGltZScpIHtcbiAgICB2YXIgeWVhciA9IHN0ci5zbGljZSgwLCAyKSB8IDA7XG4gICAgdmFyIG1vbiA9IHN0ci5zbGljZSgyLCA0KSB8IDA7XG4gICAgdmFyIGRheSA9IHN0ci5zbGljZSg0LCA2KSB8IDA7XG4gICAgdmFyIGhvdXIgPSBzdHIuc2xpY2UoNiwgOCkgfCAwO1xuICAgIHZhciBtaW4gPSBzdHIuc2xpY2UoOCwgMTApIHwgMDtcbiAgICB2YXIgc2VjID0gc3RyLnNsaWNlKDEwLCAxMikgfCAwO1xuICAgIGlmICh5ZWFyIDwgNzApXG4gICAgICB5ZWFyID0gMjAwMCArIHllYXI7XG4gICAgZWxzZVxuICAgICAgeWVhciA9IDE5MDAgKyB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0aGlzLmVycm9yKCdEZWNvZGluZyAnICsgdGFnICsgJyB0aW1lIGlzIG5vdCBzdXBwb3J0ZWQgeWV0Jyk7XG4gIH1cblxuICByZXR1cm4gRGF0ZS5VVEMoeWVhciwgbW9uIC0gMSwgZGF5LCBob3VyLCBtaW4sIHNlYywgMCk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlTnVsbCA9IGZ1bmN0aW9uIGRlY29kZU51bGwoYnVmZmVyKSB7XG4gIHJldHVybiBudWxsO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZUJvb2wgPSBmdW5jdGlvbiBkZWNvZGVCb29sKGJ1ZmZlcikge1xuICB2YXIgcmVzID0gYnVmZmVyLnJlYWRVSW50OCgpO1xuICBpZiAoYnVmZmVyLmlzRXJyb3IocmVzKSlcbiAgICByZXR1cm4gcmVzO1xuICBlbHNlXG4gICAgcmV0dXJuIHJlcyAhPT0gMDtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9kZWNvZGVJbnQgPSBmdW5jdGlvbiBkZWNvZGVJbnQoYnVmZmVyLCB2YWx1ZXMpIHtcbiAgLy8gQmlnaW50LCByZXR1cm4gYXMgaXQgaXMgKGFzc3VtZSBiaWcgZW5kaWFuKVxuICB2YXIgcmF3ID0gYnVmZmVyLnJhdygpO1xuICB2YXIgcmVzID0gbmV3IGJpZ251bShyYXcpO1xuXG4gIGlmICh2YWx1ZXMpXG4gICAgcmVzID0gdmFsdWVzW3Jlcy50b1N0cmluZygxMCldIHx8IHJlcztcblxuICByZXR1cm4gcmVzO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX3VzZSA9IGZ1bmN0aW9uIHVzZShlbnRpdHksIG9iaikge1xuICBpZiAodHlwZW9mIGVudGl0eSA9PT0gJ2Z1bmN0aW9uJylcbiAgICBlbnRpdHkgPSBlbnRpdHkob2JqKTtcbiAgcmV0dXJuIGVudGl0eS5fZ2V0RGVjb2RlcignZGVyJykudHJlZTtcbn07XG5cbi8vIFV0aWxpdHkgbWV0aG9kc1xuXG5mdW5jdGlvbiBkZXJEZWNvZGVUYWcoYnVmLCBmYWlsKSB7XG4gIHZhciB0YWcgPSBidWYucmVhZFVJbnQ4KGZhaWwpO1xuICBpZiAoYnVmLmlzRXJyb3IodGFnKSlcbiAgICByZXR1cm4gdGFnO1xuXG4gIHZhciBjbHMgPSBkZXIudGFnQ2xhc3NbdGFnID4+IDZdO1xuICB2YXIgcHJpbWl0aXZlID0gKHRhZyAmIDB4MjApID09PSAwO1xuXG4gIC8vIE11bHRpLW9jdGV0IHRhZyAtIGxvYWRcbiAgaWYgKCh0YWcgJiAweDFmKSA9PT0gMHgxZikge1xuICAgIHZhciBvY3QgPSB0YWc7XG4gICAgdGFnID0gMDtcbiAgICB3aGlsZSAoKG9jdCAmIDB4ODApID09PSAweDgwKSB7XG4gICAgICBvY3QgPSBidWYucmVhZFVJbnQ4KGZhaWwpO1xuICAgICAgaWYgKGJ1Zi5pc0Vycm9yKG9jdCkpXG4gICAgICAgIHJldHVybiBvY3Q7XG5cbiAgICAgIHRhZyA8PD0gNztcbiAgICAgIHRhZyB8PSBvY3QgJiAweDdmO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0YWcgJj0gMHgxZjtcbiAgfVxuICB2YXIgdGFnU3RyID0gZGVyLnRhZ1t0YWddO1xuXG4gIHJldHVybiB7XG4gICAgY2xzOiBjbHMsXG4gICAgcHJpbWl0aXZlOiBwcmltaXRpdmUsXG4gICAgdGFnOiB0YWcsXG4gICAgdGFnU3RyOiB0YWdTdHJcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGVyRGVjb2RlTGVuKGJ1ZiwgcHJpbWl0aXZlLCBmYWlsKSB7XG4gIHZhciBsZW4gPSBidWYucmVhZFVJbnQ4KGZhaWwpO1xuICBpZiAoYnVmLmlzRXJyb3IobGVuKSlcbiAgICByZXR1cm4gbGVuO1xuXG4gIC8vIEluZGVmaW5pdGUgZm9ybVxuICBpZiAoIXByaW1pdGl2ZSAmJiBsZW4gPT09IDB4ODApXG4gICAgcmV0dXJuIG51bGw7XG5cbiAgLy8gRGVmaW5pdGUgZm9ybVxuICBpZiAoKGxlbiAmIDB4ODApID09PSAwKSB7XG4gICAgLy8gU2hvcnQgZm9ybVxuICAgIHJldHVybiBsZW47XG4gIH1cblxuICAvLyBMb25nIGZvcm1cbiAgdmFyIG51bSA9IGxlbiAmIDB4N2Y7XG4gIGlmIChudW0gPj0gNClcbiAgICByZXR1cm4gYnVmLmVycm9yKCdsZW5ndGggb2N0ZWN0IGlzIHRvbyBsb25nJyk7XG5cbiAgbGVuID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW07IGkrKykge1xuICAgIGxlbiA8PD0gODtcbiAgICB2YXIgaiA9IGJ1Zi5yZWFkVUludDgoZmFpbCk7XG4gICAgaWYgKGJ1Zi5pc0Vycm9yKGopKVxuICAgICAgcmV0dXJuIGo7XG4gICAgbGVuIHw9IGo7XG4gIH1cblxuICByZXR1cm4gbGVuO1xufVxuIiwidmFyIGNvbnN0YW50cyA9IGV4cG9ydHM7XG5cbi8vIEhlbHBlclxuY29uc3RhbnRzLl9yZXZlcnNlID0gZnVuY3Rpb24gcmV2ZXJzZShtYXApIHtcbiAgdmFyIHJlcyA9IHt9O1xuXG4gIE9iamVjdC5rZXlzKG1hcCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAvLyBDb252ZXJ0IGtleSB0byBpbnRlZ2VyIGlmIGl0IGlzIHN0cmluZ2lmaWVkXG4gICAgaWYgKChrZXkgfCAwKSA9PSBrZXkpXG4gICAgICBrZXkgPSBrZXkgfCAwO1xuXG4gICAgdmFyIHZhbHVlID0gbWFwW2tleV07XG4gICAgcmVzW3ZhbHVlXSA9IGtleTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJlcztcbn07XG5cbmNvbnN0YW50cy5kZXIgPSByZXF1aXJlKCcuL2RlcicpO1xuIiwidmFyIGNvbnN0YW50cyA9IHJlcXVpcmUoJy4uL2NvbnN0YW50cycpO1xuXG5leHBvcnRzLnRhZ0NsYXNzID0ge1xuICAwOiAndW5pdmVyc2FsJyxcbiAgMTogJ2FwcGxpY2F0aW9uJyxcbiAgMjogJ2NvbnRleHQnLFxuICAzOiAncHJpdmF0ZSdcbn07XG5leHBvcnRzLnRhZ0NsYXNzQnlOYW1lID0gY29uc3RhbnRzLl9yZXZlcnNlKGV4cG9ydHMudGFnQ2xhc3MpO1xuXG5leHBvcnRzLnRhZyA9IHtcbiAgMHgwMDogJ2VuZCcsXG4gIDB4MDE6ICdib29sJyxcbiAgMHgwMjogJ2ludCcsXG4gIDB4MDM6ICdiaXRzdHInLFxuICAweDA0OiAnb2N0c3RyJyxcbiAgMHgwNTogJ251bGxfJyxcbiAgMHgwNjogJ29iamlkJyxcbiAgMHgwNzogJ29iakRlc2MnLFxuICAweDA4OiAnZXh0ZXJuYWwnLFxuICAweDA5OiAncmVhbCcsXG4gIDB4MGE6ICdlbnVtJyxcbiAgMHgwYjogJ2VtYmVkJyxcbiAgMHgwYzogJ3V0ZjhzdHInLFxuICAweDBkOiAncmVsYXRpdmVPaWQnLFxuICAweDEwOiAnc2VxJyxcbiAgMHgxMTogJ3NldCcsXG4gIDB4MTI6ICdudW1zdHInLFxuICAweDEzOiAncHJpbnRzdHInLFxuICAweDE0OiAndDYxc3RyJyxcbiAgMHgxNTogJ3ZpZGVvc3RyJyxcbiAgMHgxNjogJ2lhNXN0cicsXG4gIDB4MTc6ICd1dGN0aW1lJyxcbiAgMHgxODogJ2dlbnRpbWUnLFxuICAweDE5OiAnZ3JhcGhzdHInLFxuICAweDFhOiAnaXNvNjQ2c3RyJyxcbiAgMHgxYjogJ2dlbnN0cicsXG4gIDB4MWM6ICd1bmlzdHInLFxuICAweDFkOiAnY2hhcnN0cicsXG4gIDB4MWU6ICdibXBzdHInXG59O1xuZXhwb3J0cy50YWdCeU5hbWUgPSBjb25zdGFudHMuX3JldmVyc2UoZXhwb3J0cy50YWcpO1xuIiwidmFyIGJhc2UgPSBleHBvcnRzO1xuXG5iYXNlLlJlcG9ydGVyID0gcmVxdWlyZSgnLi9yZXBvcnRlcicpLlJlcG9ydGVyO1xuYmFzZS5EZWNvZGVyQnVmZmVyID0gcmVxdWlyZSgnLi9idWZmZXInKS5EZWNvZGVyQnVmZmVyO1xuYmFzZS5FbmNvZGVyQnVmZmVyID0gcmVxdWlyZSgnLi9idWZmZXInKS5FbmNvZGVyQnVmZmVyO1xuYmFzZS5Ob2RlID0gcmVxdWlyZSgnLi9ub2RlJyk7XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5mdW5jdGlvbiBSZXBvcnRlcihvcHRpb25zKSB7XG4gIHRoaXMuX3JlcG9ydGVyU3RhdGUgPSB7XG4gICAgb2JqOiBudWxsLFxuICAgIHBhdGg6IFtdLFxuICAgIG9wdGlvbnM6IG9wdGlvbnMgfHwge30sXG4gICAgZXJyb3JzOiBbXVxuICB9O1xufVxuZXhwb3J0cy5SZXBvcnRlciA9IFJlcG9ydGVyO1xuXG5SZXBvcnRlci5wcm90b3R5cGUuaXNFcnJvciA9IGZ1bmN0aW9uIGlzRXJyb3Iob2JqKSB7XG4gIHJldHVybiBvYmogaW5zdGFuY2VvZiBSZXBvcnRlckVycm9yO1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbiBzYXZlKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuXG4gIHJldHVybiB7IG9iajogc3RhdGUub2JqLCBwYXRoTGVuOiBzdGF0ZS5wYXRoLmxlbmd0aCB9O1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLnJlc3RvcmUgPSBmdW5jdGlvbiByZXN0b3JlKGRhdGEpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICBzdGF0ZS5vYmogPSBkYXRhLm9iajtcbiAgc3RhdGUucGF0aCA9IHN0YXRlLnBhdGguc2xpY2UoMCwgZGF0YS5wYXRoTGVuKTtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5lbnRlcktleSA9IGZ1bmN0aW9uIGVudGVyS2V5KGtleSkge1xuICByZXR1cm4gdGhpcy5fcmVwb3J0ZXJTdGF0ZS5wYXRoLnB1c2goa2V5KTtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5sZWF2ZUtleSA9IGZ1bmN0aW9uIGxlYXZlS2V5KGluZGV4LCBrZXksIHZhbHVlKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgc3RhdGUucGF0aCA9IHN0YXRlLnBhdGguc2xpY2UoMCwgaW5kZXggLSAxKTtcbiAgaWYgKHN0YXRlLm9iaiAhPT0gbnVsbClcbiAgICBzdGF0ZS5vYmpba2V5XSA9IHZhbHVlO1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLmVudGVyT2JqZWN0ID0gZnVuY3Rpb24gZW50ZXJPYmplY3QoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgdmFyIHByZXYgPSBzdGF0ZS5vYmo7XG4gIHN0YXRlLm9iaiA9IHt9O1xuICByZXR1cm4gcHJldjtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5sZWF2ZU9iamVjdCA9IGZ1bmN0aW9uIGxlYXZlT2JqZWN0KHByZXYpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICB2YXIgbm93ID0gc3RhdGUub2JqO1xuICBzdGF0ZS5vYmogPSBwcmV2O1xuICByZXR1cm4gbm93O1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gZXJyb3IobXNnKSB7XG4gIHZhciBlcnI7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgdmFyIGluaGVyaXRlZCA9IG1zZyBpbnN0YW5jZW9mIFJlcG9ydGVyRXJyb3I7XG4gIGlmIChpbmhlcml0ZWQpIHtcbiAgICBlcnIgPSBtc2c7XG4gIH0gZWxzZSB7XG4gICAgZXJyID0gbmV3IFJlcG9ydGVyRXJyb3Ioc3RhdGUucGF0aC5tYXAoZnVuY3Rpb24oZWxlbSkge1xuICAgICAgcmV0dXJuICdbJyArIEpTT04uc3RyaW5naWZ5KGVsZW0pICsgJ10nO1xuICAgIH0pLmpvaW4oJycpLCBtc2cubWVzc2FnZSB8fCBtc2csIG1zZy5zdGFjayk7XG4gIH1cblxuICBpZiAoIXN0YXRlLm9wdGlvbnMucGFydGlhbClcbiAgICB0aHJvdyBlcnI7XG5cbiAgaWYgKCFpbmhlcml0ZWQpXG4gICAgc3RhdGUuZXJyb3JzLnB1c2goZXJyKTtcblxuICByZXR1cm4gZXJyO1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLndyYXBSZXN1bHQgPSBmdW5jdGlvbiB3cmFwUmVzdWx0KHJlc3VsdCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuICBpZiAoIXN0YXRlLm9wdGlvbnMucGFydGlhbClcbiAgICByZXR1cm4gcmVzdWx0O1xuXG4gIHJldHVybiB7XG4gICAgcmVzdWx0OiB0aGlzLmlzRXJyb3IocmVzdWx0KSA/IG51bGwgOiByZXN1bHQsXG4gICAgZXJyb3JzOiBzdGF0ZS5lcnJvcnNcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIFJlcG9ydGVyRXJyb3IocGF0aCwgbXNnKSB7XG4gIHRoaXMucGF0aCA9IHBhdGg7XG4gIHRoaXMucmV0aHJvdyhtc2cpO1xufTtcbmluaGVyaXRzKFJlcG9ydGVyRXJyb3IsIEVycm9yKTtcblxuUmVwb3J0ZXJFcnJvci5wcm90b3R5cGUucmV0aHJvdyA9IGZ1bmN0aW9uIHJldGhyb3cobXNnKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1zZyArICcgYXQ6ICcgKyAodGhpcy5wYXRoIHx8ICcoc2hhbGxvdyknKTtcbiAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgUmVwb3J0ZXJFcnJvcik7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuIiwidmFyIFJlcG9ydGVyID0gcmVxdWlyZSgnLi4vYmFzZScpLlJlcG9ydGVyO1xudmFyIEVuY29kZXJCdWZmZXIgPSByZXF1aXJlKCcuLi9iYXNlJykuRW5jb2RlckJ1ZmZlcjtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG5cbi8vIFN1cHBvcnRlZCB0YWdzXG52YXIgdGFncyA9IFtcbiAgJ3NlcScsICdzZXFvZicsICdzZXQnLCAnc2V0b2YnLCAnb2N0c3RyJywgJ2JpdHN0cicsICdvYmppZCcsICdib29sJyxcbiAgJ2dlbnRpbWUnLCAndXRjdGltZScsICdudWxsXycsICdlbnVtJywgJ2ludCcsICdpYTVzdHInLCAndXRmOHN0cidcbl07XG5cbi8vIFB1YmxpYyBtZXRob2RzIGxpc3RcbnZhciBtZXRob2RzID0gW1xuICAna2V5JywgJ29iaicsICd1c2UnLCAnb3B0aW9uYWwnLCAnZXhwbGljaXQnLCAnaW1wbGljaXQnLCAnZGVmJywgJ2Nob2ljZScsXG4gICdhbnknXG5dLmNvbmNhdCh0YWdzKTtcblxuLy8gT3ZlcnJpZGVkIG1ldGhvZHMgbGlzdFxudmFyIG92ZXJyaWRlZCA9IFtcbiAgJ19wZWVrVGFnJywgJ19kZWNvZGVUYWcnLCAnX3VzZScsXG4gICdfZGVjb2RlU3RyJywgJ19kZWNvZGVPYmppZCcsICdfZGVjb2RlVGltZScsXG4gICdfZGVjb2RlTnVsbCcsICdfZGVjb2RlSW50JywgJ19kZWNvZGVCb29sJywgJ19kZWNvZGVMaXN0JyxcblxuICAnX2VuY29kZUNvbXBvc2l0ZScsICdfZW5jb2RlU3RyJywgJ19lbmNvZGVPYmppZCcsICdfZW5jb2RlVGltZScsXG4gICdfZW5jb2RlTnVsbCcsICdfZW5jb2RlSW50JywgJ19lbmNvZGVCb29sJ1xuXTtcblxuZnVuY3Rpb24gTm9kZShlbmMsIHBhcmVudCkge1xuICB2YXIgc3RhdGUgPSB7fTtcbiAgdGhpcy5fYmFzZVN0YXRlID0gc3RhdGU7XG5cbiAgc3RhdGUuZW5jID0gZW5jO1xuXG4gIHN0YXRlLnBhcmVudCA9IHBhcmVudCB8fCBudWxsO1xuICBzdGF0ZS5jaGlsZHJlbiA9IG51bGw7XG5cbiAgLy8gU3RhdGVcbiAgc3RhdGUudGFnID0gbnVsbDtcbiAgc3RhdGUuYXJncyA9IG51bGw7XG4gIHN0YXRlLnJldmVyc2VBcmdzID0gbnVsbDtcbiAgc3RhdGUuY2hvaWNlID0gbnVsbDtcbiAgc3RhdGUub3B0aW9uYWwgPSBmYWxzZTtcbiAgc3RhdGUuYW55ID0gZmFsc2U7XG4gIHN0YXRlLm9iaiA9IGZhbHNlO1xuICBzdGF0ZS51c2UgPSBudWxsO1xuICBzdGF0ZS51c2VEZWNvZGVyID0gbnVsbDtcbiAgc3RhdGUua2V5ID0gbnVsbDtcbiAgc3RhdGVbJ2RlZmF1bHQnXSA9IG51bGw7XG4gIHN0YXRlLmV4cGxpY2l0ID0gbnVsbDtcbiAgc3RhdGUuaW1wbGljaXQgPSBudWxsO1xuXG4gIC8vIFNob3VsZCBjcmVhdGUgbmV3IGluc3RhbmNlIG9uIGVhY2ggbWV0aG9kXG4gIGlmICghc3RhdGUucGFyZW50KSB7XG4gICAgc3RhdGUuY2hpbGRyZW4gPSBbXTtcbiAgICB0aGlzLl93cmFwKCk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gTm9kZTtcblxudmFyIHN0YXRlUHJvcHMgPSBbXG4gICdlbmMnLCAncGFyZW50JywgJ2NoaWxkcmVuJywgJ3RhZycsICdhcmdzJywgJ3JldmVyc2VBcmdzJywgJ2Nob2ljZScsXG4gICdvcHRpb25hbCcsICdhbnknLCAnb2JqJywgJ3VzZScsICdhbHRlcmVkVXNlJywgJ2tleScsICdkZWZhdWx0JywgJ2V4cGxpY2l0JyxcbiAgJ2ltcGxpY2l0J1xuXTtcblxuTm9kZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICB2YXIgY3N0YXRlID0ge307XG4gIHN0YXRlUHJvcHMuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgY3N0YXRlW3Byb3BdID0gc3RhdGVbcHJvcF07XG4gIH0pO1xuICB2YXIgcmVzID0gbmV3IHRoaXMuY29uc3RydWN0b3IoY3N0YXRlLnBhcmVudCk7XG4gIHJlcy5fYmFzZVN0YXRlID0gY3N0YXRlO1xuICByZXR1cm4gcmVzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX3dyYXAgPSBmdW5jdGlvbiB3cmFwKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gIG1ldGhvZHMuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICB0aGlzW21ldGhvZF0gPSBmdW5jdGlvbiBfd3JhcHBlZE1ldGhvZCgpIHtcbiAgICAgIHZhciBjbG9uZSA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMpO1xuICAgICAgc3RhdGUuY2hpbGRyZW4ucHVzaChjbG9uZSk7XG4gICAgICByZXR1cm4gY2xvbmVbbWV0aG9kXS5hcHBseShjbG9uZSwgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9LCB0aGlzKTtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdChib2R5KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBhc3NlcnQoc3RhdGUucGFyZW50ID09PSBudWxsKTtcbiAgYm9keS5jYWxsKHRoaXMpO1xuXG4gIC8vIEZpbHRlciBjaGlsZHJlblxuICBzdGF0ZS5jaGlsZHJlbiA9IHN0YXRlLmNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbihjaGlsZCkge1xuICAgIHJldHVybiBjaGlsZC5fYmFzZVN0YXRlLnBhcmVudCA9PT0gdGhpcztcbiAgfSwgdGhpcyk7XG4gIGFzc2VydC5lcXVhbChzdGF0ZS5jaGlsZHJlbi5sZW5ndGgsIDEsICdSb290IG5vZGUgY2FuIGhhdmUgb25seSBvbmUgY2hpbGQnKTtcbn07XG5cbk5vZGUucHJvdG90eXBlLl91c2VBcmdzID0gZnVuY3Rpb24gdXNlQXJncyhhcmdzKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICAvLyBGaWx0ZXIgY2hpbGRyZW4gYW5kIGFyZ3NcbiAgdmFyIGNoaWxkcmVuID0gYXJncy5maWx0ZXIoZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGFyZyBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3I7XG4gIH0sIHRoaXMpO1xuICBhcmdzID0gYXJncy5maWx0ZXIoZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuICEoYXJnIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH0sIHRoaXMpO1xuXG4gIGlmIChjaGlsZHJlbi5sZW5ndGggIT09IDApIHtcbiAgICBhc3NlcnQoc3RhdGUuY2hpbGRyZW4gPT09IG51bGwpO1xuICAgIHN0YXRlLmNoaWxkcmVuID0gY2hpbGRyZW47XG5cbiAgICAvLyBSZXBsYWNlIHBhcmVudCB0byBtYWludGFpbiBiYWNrd2FyZCBsaW5rXG4gICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgY2hpbGQuX2Jhc2VTdGF0ZS5wYXJlbnQgPSB0aGlzO1xuICAgIH0sIHRoaXMpO1xuICB9XG4gIGlmIChhcmdzLmxlbmd0aCAhPT0gMCkge1xuICAgIGFzc2VydChzdGF0ZS5hcmdzID09PSBudWxsKTtcbiAgICBzdGF0ZS5hcmdzID0gYXJncztcbiAgICBzdGF0ZS5yZXZlcnNlQXJncyA9IGFyZ3MubWFwKGZ1bmN0aW9uKGFyZykge1xuICAgICAgaWYgKHR5cGVvZiBhcmcgIT09ICdvYmplY3QnIHx8IGFyZy5jb25zdHJ1Y3RvciAhPT0gT2JqZWN0KVxuICAgICAgICByZXR1cm4gYXJnO1xuXG4gICAgICB2YXIgcmVzID0ge307XG4gICAgICBPYmplY3Qua2V5cyhhcmcpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGlmIChrZXkgPT0gKGtleSB8IDApKVxuICAgICAgICAgIGtleSB8PSAwO1xuICAgICAgICB2YXIgdmFsdWUgPSBhcmdba2V5XTtcbiAgICAgICAgcmVzW3ZhbHVlXSA9IGtleTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9KTtcbiAgfVxufTtcblxuLy9cbi8vIE92ZXJyaWRlZCBtZXRob2RzXG4vL1xuXG5vdmVycmlkZWQuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgTm9kZS5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uIF9vdmVycmlkZWQoKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICAgIHRocm93IG5ldyBFcnJvcihtZXRob2QgKyAnIG5vdCBpbXBsZW1lbnRlZCBmb3IgZW5jb2Rpbmc6ICcgKyBzdGF0ZS5lbmMpO1xuICB9O1xufSk7XG5cbi8vXG4vLyBQdWJsaWMgbWV0aG9kc1xuLy9cblxudGFncy5mb3JFYWNoKGZ1bmN0aW9uKHRhZykge1xuICBOb2RlLnByb3RvdHlwZVt0YWddID0gZnVuY3Rpb24gX3RhZ01ldGhvZCgpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gICAgYXNzZXJ0KHN0YXRlLnRhZyA9PT0gbnVsbCk7XG4gICAgc3RhdGUudGFnID0gdGFnO1xuXG4gICAgdGhpcy5fdXNlQXJncyhhcmdzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xufSk7XG5cbk5vZGUucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShpdGVtKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBhc3NlcnQoc3RhdGUudXNlID09PSBudWxsKTtcbiAgc3RhdGUudXNlID0gaXRlbTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk5vZGUucHJvdG90eXBlLm9wdGlvbmFsID0gZnVuY3Rpb24gb3B0aW9uYWwoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBzdGF0ZS5vcHRpb25hbCA9IHRydWU7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5kZWYgPSBmdW5jdGlvbiBkZWYodmFsKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBhc3NlcnQoc3RhdGVbJ2RlZmF1bHQnXSA9PT0gbnVsbCk7XG4gIHN0YXRlWydkZWZhdWx0J10gPSB2YWw7XG4gIHN0YXRlLm9wdGlvbmFsID0gdHJ1ZTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk5vZGUucHJvdG90eXBlLmV4cGxpY2l0ID0gZnVuY3Rpb24gZXhwbGljaXQobnVtKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBhc3NlcnQoc3RhdGUuZXhwbGljaXQgPT09IG51bGwgJiYgc3RhdGUuaW1wbGljaXQgPT09IG51bGwpO1xuICBzdGF0ZS5leHBsaWNpdCA9IG51bTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk5vZGUucHJvdG90eXBlLmltcGxpY2l0ID0gZnVuY3Rpb24gaW1wbGljaXQobnVtKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBhc3NlcnQoc3RhdGUuZXhwbGljaXQgPT09IG51bGwgJiYgc3RhdGUuaW1wbGljaXQgPT09IG51bGwpO1xuICBzdGF0ZS5pbXBsaWNpdCA9IG51bTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk5vZGUucHJvdG90eXBlLm9iaiA9IGZ1bmN0aW9uIG9iaigpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cbiAgc3RhdGUub2JqID0gdHJ1ZTtcblxuICBpZiAoYXJncy5sZW5ndGggIT09IDApXG4gICAgdGhpcy5fdXNlQXJncyhhcmdzKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk5vZGUucHJvdG90eXBlLmtleSA9IGZ1bmN0aW9uIGtleShuZXdLZXkpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZS5rZXkgPT09IG51bGwpO1xuICBzdGF0ZS5rZXkgPSBuZXdLZXk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5hbnkgPSBmdW5jdGlvbiBhbnkoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBzdGF0ZS5hbnkgPSB0cnVlO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuY2hvaWNlID0gZnVuY3Rpb24gY2hvaWNlKG9iaikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlLmNob2ljZSA9PT0gbnVsbCk7XG4gIHN0YXRlLmNob2ljZSA9IG9iajtcbiAgdGhpcy5fdXNlQXJncyhPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gb2JqW2tleV07XG4gIH0pKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vXG4vLyBEZWNvZGluZ1xuLy9cblxuTm9kZS5wcm90b3R5cGUuX2RlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShpbnB1dCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgLy8gRGVjb2RlIHJvb3Qgbm9kZVxuICBpZiAoc3RhdGUucGFyZW50ID09PSBudWxsKVxuICAgIHJldHVybiBpbnB1dC53cmFwUmVzdWx0KHN0YXRlLmNoaWxkcmVuWzBdLl9kZWNvZGUoaW5wdXQpKTtcblxuICB2YXIgcmVzdWx0ID0gc3RhdGVbJ2RlZmF1bHQnXTtcbiAgdmFyIHByZXNlbnQgPSB0cnVlO1xuXG4gIHZhciBwcmV2S2V5O1xuICBpZiAoc3RhdGUua2V5ICE9PSBudWxsKVxuICAgIHByZXZLZXkgPSBpbnB1dC5lbnRlcktleShzdGF0ZS5rZXkpO1xuXG4gIC8vIENoZWNrIGlmIHRhZyBpcyB0aGVyZVxuICBpZiAoc3RhdGUub3B0aW9uYWwpIHtcbiAgICB2YXIgdGFnID0gbnVsbDtcbiAgICBpZiAoc3RhdGUuZXhwbGljaXQgIT09IG51bGwpXG4gICAgICB0YWcgPSBzdGF0ZS5leHBsaWNpdDtcbiAgICBlbHNlIGlmIChzdGF0ZS5pbXBsaWNpdCAhPT0gbnVsbClcbiAgICAgIHRhZyA9IHN0YXRlLmltcGxpY2l0O1xuICAgIGVsc2UgaWYgKHN0YXRlLnRhZyAhPT0gbnVsbClcbiAgICAgIHRhZyA9IHN0YXRlLnRhZztcblxuICAgIGlmICh0YWcgPT09IG51bGwgJiYgIXN0YXRlLmFueSkge1xuICAgICAgLy8gVHJpYWwgYW5kIEVycm9yXG4gICAgICB2YXIgc2F2ZSA9IGlucHV0LnNhdmUoKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChzdGF0ZS5jaG9pY2UgPT09IG51bGwpXG4gICAgICAgICAgdGhpcy5fZGVjb2RlR2VuZXJpYyhzdGF0ZS50YWcsIGlucHV0KTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHRoaXMuX2RlY29kZUNob2ljZShpbnB1dCk7XG4gICAgICAgIHByZXNlbnQgPSB0cnVlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBwcmVzZW50ID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpbnB1dC5yZXN0b3JlKHNhdmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcmVzZW50ID0gdGhpcy5fcGVla1RhZyhpbnB1dCwgdGFnLCBzdGF0ZS5hbnkpO1xuXG4gICAgICBpZiAoaW5wdXQuaXNFcnJvcihwcmVzZW50KSlcbiAgICAgICAgcmV0dXJuIHByZXNlbnQ7XG4gICAgfVxuICB9XG5cbiAgLy8gUHVzaCBvYmplY3Qgb24gc3RhY2tcbiAgdmFyIHByZXZPYmo7XG4gIGlmIChzdGF0ZS5vYmogJiYgcHJlc2VudClcbiAgICBwcmV2T2JqID0gaW5wdXQuZW50ZXJPYmplY3QoKTtcblxuICBpZiAocHJlc2VudCkge1xuICAgIC8vIFVud3JhcCBleHBsaWNpdCB2YWx1ZXNcbiAgICBpZiAoc3RhdGUuZXhwbGljaXQgIT09IG51bGwpIHtcbiAgICAgIHZhciBleHBsaWNpdCA9IHRoaXMuX2RlY29kZVRhZyhpbnB1dCwgc3RhdGUuZXhwbGljaXQpO1xuICAgICAgaWYgKGlucHV0LmlzRXJyb3IoZXhwbGljaXQpKVxuICAgICAgICByZXR1cm4gZXhwbGljaXQ7XG4gICAgICBpbnB1dCA9IGV4cGxpY2l0O1xuICAgIH1cblxuICAgIC8vIFVud3JhcCBpbXBsaWNpdCBhbmQgbm9ybWFsIHZhbHVlc1xuICAgIGlmIChzdGF0ZS51c2UgPT09IG51bGwgJiYgc3RhdGUuY2hvaWNlID09PSBudWxsKSB7XG4gICAgICBpZiAoc3RhdGUuYW55KVxuICAgICAgICB2YXIgc2F2ZSA9IGlucHV0LnNhdmUoKTtcbiAgICAgIHZhciBib2R5ID0gdGhpcy5fZGVjb2RlVGFnKFxuICAgICAgICBpbnB1dCxcbiAgICAgICAgc3RhdGUuaW1wbGljaXQgIT09IG51bGwgPyBzdGF0ZS5pbXBsaWNpdCA6IHN0YXRlLnRhZyxcbiAgICAgICAgc3RhdGUuYW55XG4gICAgICApO1xuICAgICAgaWYgKGlucHV0LmlzRXJyb3IoYm9keSkpXG4gICAgICAgIHJldHVybiBib2R5O1xuXG4gICAgICBpZiAoc3RhdGUuYW55KVxuICAgICAgICByZXN1bHQgPSBpbnB1dC5yYXcoc2F2ZSk7XG4gICAgICBlbHNlXG4gICAgICAgIGlucHV0ID0gYm9keTtcbiAgICB9XG5cbiAgICAvLyBTZWxlY3QgcHJvcGVyIG1ldGhvZCBmb3IgdGFnXG4gICAgaWYgKHN0YXRlLmFueSlcbiAgICAgIHJlc3VsdCA9IHJlc3VsdDtcbiAgICBlbHNlIGlmIChzdGF0ZS5jaG9pY2UgPT09IG51bGwpXG4gICAgICByZXN1bHQgPSB0aGlzLl9kZWNvZGVHZW5lcmljKHN0YXRlLnRhZywgaW5wdXQpO1xuICAgIGVsc2VcbiAgICAgIHJlc3VsdCA9IHRoaXMuX2RlY29kZUNob2ljZShpbnB1dCk7XG5cbiAgICBpZiAoaW5wdXQuaXNFcnJvcihyZXN1bHQpKVxuICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIC8vIERlY29kZSBjaGlsZHJlblxuICAgIGlmICghc3RhdGUuYW55ICYmIHN0YXRlLmNob2ljZSA9PT0gbnVsbCAmJiBzdGF0ZS5jaGlsZHJlbiAhPT0gbnVsbCkge1xuICAgICAgdmFyIGZhaWwgPSBzdGF0ZS5jaGlsZHJlbi5zb21lKGZ1bmN0aW9uIGRlY29kZUNoaWxkcmVuKGNoaWxkKSB7XG4gICAgICAgIC8vIE5PVEU6IFdlIGFyZSBpZ25vcmluZyBlcnJvcnMgaGVyZSwgdG8gbGV0IHBhcnNlciBjb250aW51ZSB3aXRoIG90aGVyXG4gICAgICAgIC8vIHBhcnRzIG9mIGVuY29kZWQgZGF0YVxuICAgICAgICBjaGlsZC5fZGVjb2RlKGlucHV0KTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGZhaWwpXG4gICAgICAgIHJldHVybiBlcnI7XG4gICAgfVxuICB9XG5cbiAgLy8gUG9wIG9iamVjdFxuICBpZiAoc3RhdGUub2JqICYmIHByZXNlbnQpXG4gICAgcmVzdWx0ID0gaW5wdXQubGVhdmVPYmplY3QocHJldk9iaik7XG5cbiAgLy8gU2V0IGtleVxuICBpZiAoc3RhdGUua2V5ICE9PSBudWxsICYmIChyZXN1bHQgIT09IG51bGwgfHwgcHJlc2VudCA9PT0gdHJ1ZSkpXG4gICAgaW5wdXQubGVhdmVLZXkocHJldktleSwgc3RhdGUua2V5LCByZXN1bHQpO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZGVjb2RlR2VuZXJpYyA9IGZ1bmN0aW9uIGRlY29kZUdlbmVyaWModGFnLCBpbnB1dCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgaWYgKHRhZyA9PT0gJ3NlcScgfHwgdGFnID09PSAnc2V0JylcbiAgICByZXR1cm4gbnVsbDtcbiAgaWYgKHRhZyA9PT0gJ3NlcW9mJyB8fCB0YWcgPT09ICdzZXRvZicpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZUxpc3QoaW5wdXQsIHRhZywgc3RhdGUuYXJnc1swXSk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ29jdHN0cicgfHwgdGFnID09PSAnYml0c3RyJylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlU3RyKGlucHV0LCB0YWcpO1xuICBlbHNlIGlmICh0YWcgPT09ICdpYTVzdHInIHx8IHRhZyA9PT0gJ3V0ZjhzdHInKVxuICAgIHJldHVybiB0aGlzLl9kZWNvZGVTdHIoaW5wdXQsIHRhZyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ29iamlkJyAmJiBzdGF0ZS5hcmdzKVxuICAgIHJldHVybiB0aGlzLl9kZWNvZGVPYmppZChpbnB1dCwgc3RhdGUuYXJnc1swXSwgc3RhdGUuYXJnc1sxXSk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ29iamlkJylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlT2JqaWQoaW5wdXQsIG51bGwsIG51bGwpO1xuICBlbHNlIGlmICh0YWcgPT09ICdnZW50aW1lJyB8fCB0YWcgPT09ICd1dGN0aW1lJylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlVGltZShpbnB1dCwgdGFnKTtcbiAgZWxzZSBpZiAodGFnID09PSAnbnVsbF8nKVxuICAgIHJldHVybiB0aGlzLl9kZWNvZGVOdWxsKGlucHV0KTtcbiAgZWxzZSBpZiAodGFnID09PSAnYm9vbCcpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZUJvb2woaW5wdXQpO1xuICBlbHNlIGlmICh0YWcgPT09ICdpbnQnIHx8IHRhZyA9PT0gJ2VudW0nKVxuICAgIHJldHVybiB0aGlzLl9kZWNvZGVJbnQoaW5wdXQsIHN0YXRlLmFyZ3MgJiYgc3RhdGUuYXJnc1swXSk7XG4gIGVsc2UgaWYgKHN0YXRlLnVzZSAhPT0gbnVsbClcbiAgICByZXR1cm4gdGhpcy5fZ2V0VXNlKHN0YXRlLnVzZSwgaW5wdXQuX3JlcG9ydGVyU3RhdGUub2JqKS5fZGVjb2RlKGlucHV0KTtcbiAgZWxzZVxuICAgIHJldHVybiBpbnB1dC5lcnJvcigndW5rbm93biB0YWc6ICcgKyB0YWcpO1xuXG4gIHJldHVybiBudWxsO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2dldFVzZSA9IGZ1bmN0aW9uIF9nZXRVc2UoZW50aXR5LCBvYmopIHtcblxuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gIC8vIENyZWF0ZSBhbHRlcmVkIHVzZSBkZWNvZGVyIGlmIGltcGxpY2l0IGlzIHNldFxuICBzdGF0ZS51c2VEZWNvZGVyID0gdGhpcy5fdXNlKGVudGl0eSwgb2JqKTtcbiAgYXNzZXJ0KHN0YXRlLnVzZURlY29kZXIuX2Jhc2VTdGF0ZS5wYXJlbnQgPT09IG51bGwpO1xuICBzdGF0ZS51c2VEZWNvZGVyID0gc3RhdGUudXNlRGVjb2Rlci5fYmFzZVN0YXRlLmNoaWxkcmVuWzBdO1xuICBpZiAoc3RhdGUuaW1wbGljaXQgIT09IHN0YXRlLnVzZURlY29kZXIuX2Jhc2VTdGF0ZS5pbXBsaWNpdCkge1xuICAgIHN0YXRlLnVzZURlY29kZXIgPSBzdGF0ZS51c2VEZWNvZGVyLmNsb25lKCk7XG4gICAgc3RhdGUudXNlRGVjb2Rlci5fYmFzZVN0YXRlLmltcGxpY2l0ID0gc3RhdGUuaW1wbGljaXQ7XG4gIH1cbiAgcmV0dXJuIHN0YXRlLnVzZURlY29kZXI7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZGVjb2RlQ2hvaWNlID0gZnVuY3Rpb24gZGVjb2RlQ2hvaWNlKGlucHV0KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgdmFyIHJlc3VsdCA9IG51bGw7XG4gIHZhciBtYXRjaCA9IGZhbHNlO1xuXG4gIE9iamVjdC5rZXlzKHN0YXRlLmNob2ljZSkuc29tZShmdW5jdGlvbihrZXkpIHtcbiAgICB2YXIgc2F2ZSA9IGlucHV0LnNhdmUoKTtcbiAgICB2YXIgbm9kZSA9IHN0YXRlLmNob2ljZVtrZXldO1xuICAgIHRyeSB7XG4gICAgICB2YXIgdmFsdWUgPSBub2RlLl9kZWNvZGUoaW5wdXQpO1xuICAgICAgaWYgKGlucHV0LmlzRXJyb3IodmFsdWUpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgIHJlc3VsdCA9IHsgdHlwZToga2V5LCB2YWx1ZTogdmFsdWUgfTtcbiAgICAgIG1hdGNoID0gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpbnB1dC5yZXN0b3JlKHNhdmUpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSwgdGhpcyk7XG5cbiAgaWYgKCFtYXRjaClcbiAgICByZXR1cm4gaW5wdXQuZXJyb3IoJ0Nob2ljZSBub3QgbWF0Y2hlZCcpO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vL1xuLy8gRW5jb2Rpbmdcbi8vXG5cbk5vZGUucHJvdG90eXBlLl9jcmVhdGVFbmNvZGVyQnVmZmVyID0gZnVuY3Rpb24gY3JlYXRlRW5jb2RlckJ1ZmZlcihkYXRhKSB7XG4gIHJldHVybiBuZXcgRW5jb2RlckJ1ZmZlcihkYXRhLCB0aGlzLnJlcG9ydGVyKTtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgcmVwb3J0ZXIsIHBhcmVudCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gIGlmIChzdGF0ZVsnZGVmYXVsdCddICE9PSBudWxsICYmIHN0YXRlWydkZWZhdWx0J10gPT09IGRhdGEpXG4gICAgcmV0dXJuO1xuXG4gIHZhciByZXN1bHQgPSB0aGlzLl9lbmNvZGVWYWx1ZShkYXRhLCByZXBvcnRlciwgcGFyZW50KTtcbiAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybjtcblxuICBpZiAodGhpcy5fc2tpcERlZmF1bHQocmVzdWx0LCByZXBvcnRlciwgcGFyZW50KSlcbiAgICByZXR1cm47XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9lbmNvZGVWYWx1ZSA9IGZ1bmN0aW9uIGVuY29kZShkYXRhLCByZXBvcnRlciwgcGFyZW50KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICAvLyBEZWNvZGUgcm9vdCBub2RlXG4gIGlmIChzdGF0ZS5wYXJlbnQgPT09IG51bGwpXG4gICAgcmV0dXJuIHN0YXRlLmNoaWxkcmVuWzBdLl9lbmNvZGUoZGF0YSwgcmVwb3J0ZXIgfHwgbmV3IFJlcG9ydGVyKCkpO1xuXG4gIHZhciByZXN1bHQgPSBudWxsO1xuICB2YXIgcHJlc2VudCA9IHRydWU7XG5cbiAgLy8gU2V0IHJlcG9ydGVyIHRvIHNoYXJlIGl0IHdpdGggYSBjaGlsZCBjbGFzc1xuICB0aGlzLnJlcG9ydGVyID0gcmVwb3J0ZXI7XG5cbiAgLy8gQ2hlY2sgaWYgZGF0YSBpcyB0aGVyZVxuICBpZiAoc3RhdGUub3B0aW9uYWwgJiYgZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHN0YXRlWydkZWZhdWx0J10gIT09IG51bGwpXG4gICAgICBkYXRhID0gc3RhdGVbJ2RlZmF1bHQnXVxuICAgIGVsc2VcbiAgICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvciBlcnJvciByZXBvcnRpbmdcbiAgdmFyIHByZXZLZXk7XG5cbiAgLy8gRW5jb2RlIGNoaWxkcmVuIGZpcnN0XG4gIHZhciBjb250ZW50ID0gbnVsbDtcbiAgdmFyIHByaW1pdGl2ZSA9IGZhbHNlO1xuICBpZiAoc3RhdGUuYW55KSB7XG4gICAgLy8gQW55dGhpbmcgdGhhdCB3YXMgZ2l2ZW4gaXMgdHJhbnNsYXRlZCB0byBidWZmZXJcbiAgICByZXN1bHQgPSB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKGRhdGEpO1xuICB9IGVsc2UgaWYgKHN0YXRlLmNob2ljZSkge1xuICAgIHJlc3VsdCA9IHRoaXMuX2VuY29kZUNob2ljZShkYXRhLCByZXBvcnRlcik7XG4gIH0gZWxzZSBpZiAoc3RhdGUuY2hpbGRyZW4pIHtcbiAgICBjb250ZW50ID0gc3RhdGUuY2hpbGRyZW4ubWFwKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQuX2Jhc2VTdGF0ZS50YWcgPT09ICdudWxsXycpXG4gICAgICAgIHJldHVybiBjaGlsZC5fZW5jb2RlKG51bGwsIHJlcG9ydGVyLCBkYXRhKTtcblxuICAgICAgaWYgKGNoaWxkLl9iYXNlU3RhdGUua2V5ID09PSBudWxsKVxuICAgICAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ0NoaWxkIHNob3VsZCBoYXZlIGEga2V5Jyk7XG4gICAgICB2YXIgcHJldktleSA9IHJlcG9ydGVyLmVudGVyS2V5KGNoaWxkLl9iYXNlU3RhdGUua2V5KTtcblxuICAgICAgaWYgKHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0JylcbiAgICAgICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdDaGlsZCBleHBlY3RlZCwgYnV0IGlucHV0IGlzIG5vdCBvYmplY3QnKTtcblxuICAgICAgdmFyIHJlcyA9IGNoaWxkLl9lbmNvZGUoZGF0YVtjaGlsZC5fYmFzZVN0YXRlLmtleV0sIHJlcG9ydGVyLCBkYXRhKTtcbiAgICAgIHJlcG9ydGVyLmxlYXZlS2V5KHByZXZLZXkpO1xuXG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0sIHRoaXMpLmZpbHRlcihmdW5jdGlvbihjaGlsZCkge1xuICAgICAgcmV0dXJuIGNoaWxkO1xuICAgIH0pO1xuXG4gICAgY29udGVudCA9IHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoY29udGVudCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHN0YXRlLnRhZyA9PT0gJ3NlcW9mJyB8fCBzdGF0ZS50YWcgPT09ICdzZXRvZicpIHtcbiAgICAgIC8vIFRPRE8oaW5kdXRueSk6IHRoaXMgc2hvdWxkIGJlIHRocm93biBvbiBEU0wgbGV2ZWxcbiAgICAgIGlmICghKHN0YXRlLmFyZ3MgJiYgc3RhdGUuYXJncy5sZW5ndGggPT09IDEpKVxuICAgICAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ1RvbyBtYW55IGFyZ3MgZm9yIDogJyArIHN0YXRlLnRhZyk7XG5cbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShkYXRhKSlcbiAgICAgICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdzZXFvZi9zZXRvZiwgYnV0IGRhdGEgaXMgbm90IEFycmF5Jyk7XG5cbiAgICAgIHZhciBjaGlsZCA9IHRoaXMuY2xvbmUoKTtcbiAgICAgIGNoaWxkLl9iYXNlU3RhdGUuaW1wbGljaXQgPSBudWxsO1xuICAgICAgY29udGVudCA9IHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoZGF0YS5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFVzZShzdGF0ZS5hcmdzWzBdLCBkYXRhKS5fZW5jb2RlKGl0ZW0sIHJlcG9ydGVyKTtcbiAgICAgIH0sIGNoaWxkKSk7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS51c2UgIT09IG51bGwpIHtcbiAgICAgIHJlc3VsdCA9IHRoaXMuX2dldFVzZShzdGF0ZS51c2UsIHBhcmVudCkuX2VuY29kZShkYXRhLCByZXBvcnRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRlbnQgPSB0aGlzLl9lbmNvZGVQcmltaXRpdmUoc3RhdGUudGFnLCBkYXRhKTtcbiAgICAgIHByaW1pdGl2ZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgLy8gRW5jb2RlIGRhdGEgaXRzZWxmXG4gIHZhciByZXN1bHQ7XG4gIGlmICghc3RhdGUuYW55ICYmIHN0YXRlLmNob2ljZSA9PT0gbnVsbCkge1xuICAgIHZhciB0YWcgPSBzdGF0ZS5pbXBsaWNpdCAhPT0gbnVsbCA/IHN0YXRlLmltcGxpY2l0IDogc3RhdGUudGFnO1xuICAgIHZhciBjbHMgPSBzdGF0ZS5pbXBsaWNpdCA9PT0gbnVsbCA/ICd1bml2ZXJzYWwnIDogJ2NvbnRleHQnO1xuXG4gICAgaWYgKHRhZyA9PT0gbnVsbCkge1xuICAgICAgaWYgKHN0YXRlLnVzZSA9PT0gbnVsbClcbiAgICAgICAgcmVwb3J0ZXIuZXJyb3IoJ1RhZyBjb3VsZCBiZSBvbW1pdGVkIG9ubHkgZm9yIC51c2UoKScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc3RhdGUudXNlID09PSBudWxsKVxuICAgICAgICByZXN1bHQgPSB0aGlzLl9lbmNvZGVDb21wb3NpdGUodGFnLCBwcmltaXRpdmUsIGNscywgY29udGVudCk7XG4gICAgfVxuICB9XG5cbiAgLy8gV3JhcCBpbiBleHBsaWNpdFxuICBpZiAoc3RhdGUuZXhwbGljaXQgIT09IG51bGwpXG4gICAgcmVzdWx0ID0gdGhpcy5fZW5jb2RlQ29tcG9zaXRlKHN0YXRlLmV4cGxpY2l0LCBmYWxzZSwgJ2NvbnRleHQnLCByZXN1bHQpO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZW5jb2RlQ2hvaWNlID0gZnVuY3Rpb24gZW5jb2RlQ2hvaWNlKGRhdGEsIHJlcG9ydGVyKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICB2YXIgbm9kZSA9IHN0YXRlLmNob2ljZVtkYXRhLnR5cGVdO1xuICBpZiAoIW5vZGUpIHtcbiAgICBhc3NlcnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBkYXRhLnR5cGUgKyAnIG5vdCBmb3VuZCBpbiAnICtcbiAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KE9iamVjdC5rZXlzKHN0YXRlLmNob2ljZSkpKTtcbiAgfVxuICByZXR1cm4gbm9kZS5fZW5jb2RlKGRhdGEudmFsdWUsIHJlcG9ydGVyKTtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9lbmNvZGVQcmltaXRpdmUgPSBmdW5jdGlvbiBlbmNvZGVQcmltaXRpdmUodGFnLCBkYXRhKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBpZiAodGFnID09PSAnb2N0c3RyJyB8fCB0YWcgPT09ICdiaXRzdHInIHx8IHRhZyA9PT0gJ2lhNXN0cicpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZVN0cihkYXRhLCB0YWcpO1xuICBlbHNlIGlmICh0YWcgPT09ICd1dGY4c3RyJylcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlU3RyKGRhdGEsIHRhZyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ29iamlkJyAmJiBzdGF0ZS5hcmdzKVxuICAgIHJldHVybiB0aGlzLl9lbmNvZGVPYmppZChkYXRhLCBzdGF0ZS5yZXZlcnNlQXJnc1swXSwgc3RhdGUuYXJnc1sxXSk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ29iamlkJylcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlT2JqaWQoZGF0YSwgbnVsbCwgbnVsbCk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ2dlbnRpbWUnIHx8IHRhZyA9PT0gJ3V0Y3RpbWUnKVxuICAgIHJldHVybiB0aGlzLl9lbmNvZGVUaW1lKGRhdGEsIHRhZyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ251bGxfJylcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlTnVsbCgpO1xuICBlbHNlIGlmICh0YWcgPT09ICdpbnQnIHx8IHRhZyA9PT0gJ2VudW0nKVxuICAgIHJldHVybiB0aGlzLl9lbmNvZGVJbnQoZGF0YSwgc3RhdGUuYXJncyAmJiBzdGF0ZS5yZXZlcnNlQXJnc1swXSk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ2Jvb2wnKVxuICAgIHJldHVybiB0aGlzLl9lbmNvZGVCb29sKGRhdGEpO1xuICBlbHNlXG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCB0YWc6ICcgKyB0YWcpO1xufTtcbiIsImFyZ3VtZW50c1s0XVtcIi9ob21lL3VidW50dS9zdGFnaW5nL2FwcHMvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWNpcGhlci9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1kZXMvbm9kZV9tb2R1bGVzL2Rlcy5qcy9ub2RlX21vZHVsZXMvbWluaW1hbGlzdGljLWFzc2VydC9pbmRleC5qc1wiXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykiLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIFJlcG9ydGVyID0gcmVxdWlyZSgnLi4vYmFzZScpLlJlcG9ydGVyO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcblxuZnVuY3Rpb24gRGVjb2RlckJ1ZmZlcihiYXNlLCBvcHRpb25zKSB7XG4gIFJlcG9ydGVyLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJhc2UpKSB7XG4gICAgdGhpcy5lcnJvcignSW5wdXQgbm90IEJ1ZmZlcicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuYmFzZSA9IGJhc2U7XG4gIHRoaXMub2Zmc2V0ID0gMDtcbiAgdGhpcy5sZW5ndGggPSBiYXNlLmxlbmd0aDtcbn1cbmluaGVyaXRzKERlY29kZXJCdWZmZXIsIFJlcG9ydGVyKTtcbmV4cG9ydHMuRGVjb2RlckJ1ZmZlciA9IERlY29kZXJCdWZmZXI7XG5cbkRlY29kZXJCdWZmZXIucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbiBzYXZlKCkge1xuICByZXR1cm4geyBvZmZzZXQ6IHRoaXMub2Zmc2V0LCByZXBvcnRlcjogUmVwb3J0ZXIucHJvdG90eXBlLnNhdmUuY2FsbCh0aGlzKSB9O1xufTtcblxuRGVjb2RlckJ1ZmZlci5wcm90b3R5cGUucmVzdG9yZSA9IGZ1bmN0aW9uIHJlc3RvcmUoc2F2ZSkge1xuICAvLyBSZXR1cm4gc2tpcHBlZCBkYXRhXG4gIHZhciByZXMgPSBuZXcgRGVjb2RlckJ1ZmZlcih0aGlzLmJhc2UpO1xuICByZXMub2Zmc2V0ID0gc2F2ZS5vZmZzZXQ7XG4gIHJlcy5sZW5ndGggPSB0aGlzLm9mZnNldDtcblxuICB0aGlzLm9mZnNldCA9IHNhdmUub2Zmc2V0O1xuICBSZXBvcnRlci5wcm90b3R5cGUucmVzdG9yZS5jYWxsKHRoaXMsIHNhdmUucmVwb3J0ZXIpO1xuXG4gIHJldHVybiByZXM7XG59O1xuXG5EZWNvZGVyQnVmZmVyLnByb3RvdHlwZS5pc0VtcHR5ID0gZnVuY3Rpb24gaXNFbXB0eSgpIHtcbiAgcmV0dXJuIHRoaXMub2Zmc2V0ID09PSB0aGlzLmxlbmd0aDtcbn07XG5cbkRlY29kZXJCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OChmYWlsKSB7XG4gIGlmICh0aGlzLm9mZnNldCArIDEgPD0gdGhpcy5sZW5ndGgpXG4gICAgcmV0dXJuIHRoaXMuYmFzZS5yZWFkVUludDgodGhpcy5vZmZzZXQrKywgdHJ1ZSk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5lcnJvcihmYWlsIHx8ICdEZWNvZGVyQnVmZmVyIG92ZXJydW4nKTtcbn1cblxuRGVjb2RlckJ1ZmZlci5wcm90b3R5cGUuc2tpcCA9IGZ1bmN0aW9uIHNraXAoYnl0ZXMsIGZhaWwpIHtcbiAgaWYgKCEodGhpcy5vZmZzZXQgKyBieXRlcyA8PSB0aGlzLmxlbmd0aCkpXG4gICAgcmV0dXJuIHRoaXMuZXJyb3IoZmFpbCB8fCAnRGVjb2RlckJ1ZmZlciBvdmVycnVuJyk7XG5cbiAgdmFyIHJlcyA9IG5ldyBEZWNvZGVyQnVmZmVyKHRoaXMuYmFzZSk7XG5cbiAgLy8gU2hhcmUgcmVwb3J0ZXIgc3RhdGVcbiAgcmVzLl9yZXBvcnRlclN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICByZXMub2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gIHJlcy5sZW5ndGggPSB0aGlzLm9mZnNldCArIGJ5dGVzO1xuICB0aGlzLm9mZnNldCArPSBieXRlcztcbiAgcmV0dXJuIHJlcztcbn1cblxuRGVjb2RlckJ1ZmZlci5wcm90b3R5cGUucmF3ID0gZnVuY3Rpb24gcmF3KHNhdmUpIHtcbiAgcmV0dXJuIHRoaXMuYmFzZS5zbGljZShzYXZlID8gc2F2ZS5vZmZzZXQgOiB0aGlzLm9mZnNldCwgdGhpcy5sZW5ndGgpO1xufVxuXG5mdW5jdGlvbiBFbmNvZGVyQnVmZmVyKHZhbHVlLCByZXBvcnRlcikge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlLm1hcChmdW5jdGlvbihpdGVtKSB7XG4gICAgICBpZiAoIShpdGVtIGluc3RhbmNlb2YgRW5jb2RlckJ1ZmZlcikpXG4gICAgICAgIGl0ZW0gPSBuZXcgRW5jb2RlckJ1ZmZlcihpdGVtLCByZXBvcnRlcik7XG4gICAgICB0aGlzLmxlbmd0aCArPSBpdGVtLmxlbmd0aDtcbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH0sIHRoaXMpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAoISgwIDw9IHZhbHVlICYmIHZhbHVlIDw9IDB4ZmYpKVxuICAgICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdub24tYnl0ZSBFbmNvZGVyQnVmZmVyIHZhbHVlJyk7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMubGVuZ3RoID0gQnVmZmVyLmJ5dGVMZW5ndGgodmFsdWUpO1xuICB9IGVsc2UgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5sZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdVbnN1cHBvcnRlZCB0eXBlOiAnICsgdHlwZW9mIHZhbHVlKTtcbiAgfVxufVxuZXhwb3J0cy5FbmNvZGVyQnVmZmVyID0gRW5jb2RlckJ1ZmZlcjtcblxuRW5jb2RlckJ1ZmZlci5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uIGpvaW4ob3V0LCBvZmZzZXQpIHtcbiAgaWYgKCFvdXQpXG4gICAgb3V0ID0gbmV3IEJ1ZmZlcih0aGlzLmxlbmd0aCk7XG4gIGlmICghb2Zmc2V0KVxuICAgIG9mZnNldCA9IDA7XG5cbiAgaWYgKHRoaXMubGVuZ3RoID09PSAwKVxuICAgIHJldHVybiBvdXQ7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy52YWx1ZSkpIHtcbiAgICB0aGlzLnZhbHVlLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgICAgaXRlbS5qb2luKG91dCwgb2Zmc2V0KTtcbiAgICAgIG9mZnNldCArPSBpdGVtLmxlbmd0aDtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIHRoaXMudmFsdWUgPT09ICdudW1iZXInKVxuICAgICAgb3V0W29mZnNldF0gPSB0aGlzLnZhbHVlO1xuICAgIGVsc2UgaWYgKHR5cGVvZiB0aGlzLnZhbHVlID09PSAnc3RyaW5nJylcbiAgICAgIG91dC53cml0ZSh0aGlzLnZhbHVlLCBvZmZzZXQpO1xuICAgIGVsc2UgaWYgKEJ1ZmZlci5pc0J1ZmZlcih0aGlzLnZhbHVlKSlcbiAgICAgIHRoaXMudmFsdWUuY29weShvdXQsIG9mZnNldCk7XG4gICAgb2Zmc2V0ICs9IHRoaXMubGVuZ3RoO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn07XG4iLCJ2YXIgYXNuMSA9IHJlcXVpcmUoJy4uL2FzbjEnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciBhcGkgPSBleHBvcnRzO1xuXG5hcGkuZGVmaW5lID0gZnVuY3Rpb24gZGVmaW5lKG5hbWUsIGJvZHkpIHtcbiAgcmV0dXJuIG5ldyBFbnRpdHkobmFtZSwgYm9keSk7XG59O1xuXG5mdW5jdGlvbiBFbnRpdHkobmFtZSwgYm9keSkge1xuICB0aGlzLm5hbWUgPSBuYW1lO1xuICB0aGlzLmJvZHkgPSBib2R5O1xuXG4gIHRoaXMuZGVjb2RlcnMgPSB7fTtcbiAgdGhpcy5lbmNvZGVycyA9IHt9O1xufTtcblxuRW50aXR5LnByb3RvdHlwZS5fY3JlYXRlTmFtZWQgPSBmdW5jdGlvbiBjcmVhdGVOYW1lZChiYXNlKSB7XG4gIHZhciBuYW1lZDtcbiAgdHJ5IHtcbiAgICBuYW1lZCA9IHJlcXVpcmUoJ3ZtJykucnVuSW5UaGlzQ29udGV4dChcbiAgICAgICcoZnVuY3Rpb24gJyArIHRoaXMubmFtZSArICcoZW50aXR5KSB7XFxuJyArXG4gICAgICAnICB0aGlzLl9pbml0TmFtZWQoZW50aXR5KTtcXG4nICtcbiAgICAgICd9KSdcbiAgICApO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbmFtZWQgPSBmdW5jdGlvbiAoZW50aXR5KSB7XG4gICAgICB0aGlzLl9pbml0TmFtZWQoZW50aXR5KTtcbiAgICB9O1xuICB9XG4gIGluaGVyaXRzKG5hbWVkLCBiYXNlKTtcbiAgbmFtZWQucHJvdG90eXBlLl9pbml0TmFtZWQgPSBmdW5jdGlvbiBpbml0bmFtZWQoZW50aXR5KSB7XG4gICAgYmFzZS5jYWxsKHRoaXMsIGVudGl0eSk7XG4gIH07XG5cbiAgcmV0dXJuIG5ldyBuYW1lZCh0aGlzKTtcbn07XG5cbkVudGl0eS5wcm90b3R5cGUuX2dldERlY29kZXIgPSBmdW5jdGlvbiBfZ2V0RGVjb2RlcihlbmMpIHtcbiAgLy8gTGF6aWx5IGNyZWF0ZSBkZWNvZGVyXG4gIGlmICghdGhpcy5kZWNvZGVycy5oYXNPd25Qcm9wZXJ0eShlbmMpKVxuICAgIHRoaXMuZGVjb2RlcnNbZW5jXSA9IHRoaXMuX2NyZWF0ZU5hbWVkKGFzbjEuZGVjb2RlcnNbZW5jXSk7XG4gIHJldHVybiB0aGlzLmRlY29kZXJzW2VuY107XG59O1xuXG5FbnRpdHkucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShkYXRhLCBlbmMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRoaXMuX2dldERlY29kZXIoZW5jKS5kZWNvZGUoZGF0YSwgb3B0aW9ucyk7XG59O1xuXG5FbnRpdHkucHJvdG90eXBlLl9nZXRFbmNvZGVyID0gZnVuY3Rpb24gX2dldEVuY29kZXIoZW5jKSB7XG4gIC8vIExhemlseSBjcmVhdGUgZW5jb2RlclxuICBpZiAoIXRoaXMuZW5jb2RlcnMuaGFzT3duUHJvcGVydHkoZW5jKSlcbiAgICB0aGlzLmVuY29kZXJzW2VuY10gPSB0aGlzLl9jcmVhdGVOYW1lZChhc24xLmVuY29kZXJzW2VuY10pO1xuICByZXR1cm4gdGhpcy5lbmNvZGVyc1tlbmNdO1xufTtcblxuRW50aXR5LnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgZW5jLCAvKiBpbnRlcm5hbCAqLyByZXBvcnRlcikge1xuICByZXR1cm4gdGhpcy5fZ2V0RW5jb2RlcihlbmMpLmVuY29kZShkYXRhLCByZXBvcnRlcik7XG59O1xuIiwidmFyIGluZGV4T2YgPSByZXF1aXJlKCdpbmRleG9mJyk7XG5cbnZhciBPYmplY3Rfa2V5cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICBpZiAoT2JqZWN0LmtleXMpIHJldHVybiBPYmplY3Qua2V5cyhvYmopXG4gICAgZWxzZSB7XG4gICAgICAgIHZhciByZXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgcmVzLnB1c2goa2V5KVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbn07XG5cbnZhciBmb3JFYWNoID0gZnVuY3Rpb24gKHhzLCBmbikge1xuICAgIGlmICh4cy5mb3JFYWNoKSByZXR1cm4geHMuZm9yRWFjaChmbilcbiAgICBlbHNlIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZm4oeHNbaV0sIGksIHhzKTtcbiAgICB9XG59O1xuXG52YXIgZGVmaW5lUHJvcCA9IChmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdfJywge30pO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24ob2JqLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgbmFtZSwge1xuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihvYmosIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICBvYmpbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfTtcbiAgICB9XG59KCkpO1xuXG52YXIgZ2xvYmFscyA9IFsnQXJyYXknLCAnQm9vbGVhbicsICdEYXRlJywgJ0Vycm9yJywgJ0V2YWxFcnJvcicsICdGdW5jdGlvbicsXG4nSW5maW5pdHknLCAnSlNPTicsICdNYXRoJywgJ05hTicsICdOdW1iZXInLCAnT2JqZWN0JywgJ1JhbmdlRXJyb3InLFxuJ1JlZmVyZW5jZUVycm9yJywgJ1JlZ0V4cCcsICdTdHJpbmcnLCAnU3ludGF4RXJyb3InLCAnVHlwZUVycm9yJywgJ1VSSUVycm9yJyxcbidkZWNvZGVVUkknLCAnZGVjb2RlVVJJQ29tcG9uZW50JywgJ2VuY29kZVVSSScsICdlbmNvZGVVUklDb21wb25lbnQnLCAnZXNjYXBlJyxcbidldmFsJywgJ2lzRmluaXRlJywgJ2lzTmFOJywgJ3BhcnNlRmxvYXQnLCAncGFyc2VJbnQnLCAndW5kZWZpbmVkJywgJ3VuZXNjYXBlJ107XG5cbmZ1bmN0aW9uIENvbnRleHQoKSB7fVxuQ29udGV4dC5wcm90b3R5cGUgPSB7fTtcblxudmFyIFNjcmlwdCA9IGV4cG9ydHMuU2NyaXB0ID0gZnVuY3Rpb24gTm9kZVNjcmlwdCAoY29kZSkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTY3JpcHQpKSByZXR1cm4gbmV3IFNjcmlwdChjb2RlKTtcbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xufTtcblxuU2NyaXB0LnByb3RvdHlwZS5ydW5JbkNvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgIGlmICghKGNvbnRleHQgaW5zdGFuY2VvZiBDb250ZXh0KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwibmVlZHMgYSAnY29udGV4dCcgYXJndW1lbnQuXCIpO1xuICAgIH1cbiAgICBcbiAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgaWYgKCFpZnJhbWUuc3R5bGUpIGlmcmFtZS5zdHlsZSA9IHt9O1xuICAgIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIFxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICBcbiAgICB2YXIgd2luID0gaWZyYW1lLmNvbnRlbnRXaW5kb3c7XG4gICAgdmFyIHdFdmFsID0gd2luLmV2YWwsIHdFeGVjU2NyaXB0ID0gd2luLmV4ZWNTY3JpcHQ7XG5cbiAgICBpZiAoIXdFdmFsICYmIHdFeGVjU2NyaXB0KSB7XG4gICAgICAgIC8vIHdpbi5ldmFsKCkgbWFnaWNhbGx5IGFwcGVhcnMgd2hlbiB0aGlzIGlzIGNhbGxlZCBpbiBJRTpcbiAgICAgICAgd0V4ZWNTY3JpcHQuY2FsbCh3aW4sICdudWxsJyk7XG4gICAgICAgIHdFdmFsID0gd2luLmV2YWw7XG4gICAgfVxuICAgIFxuICAgIGZvckVhY2goT2JqZWN0X2tleXMoY29udGV4dCksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgd2luW2tleV0gPSBjb250ZXh0W2tleV07XG4gICAgfSk7XG4gICAgZm9yRWFjaChnbG9iYWxzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChjb250ZXh0W2tleV0pIHtcbiAgICAgICAgICAgIHdpbltrZXldID0gY29udGV4dFtrZXldO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgdmFyIHdpbktleXMgPSBPYmplY3Rfa2V5cyh3aW4pO1xuXG4gICAgdmFyIHJlcyA9IHdFdmFsLmNhbGwod2luLCB0aGlzLmNvZGUpO1xuICAgIFxuICAgIGZvckVhY2goT2JqZWN0X2tleXMod2luKSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAvLyBBdm9pZCBjb3B5aW5nIGNpcmN1bGFyIG9iamVjdHMgbGlrZSBgdG9wYCBhbmQgYHdpbmRvd2AgYnkgb25seVxuICAgICAgICAvLyB1cGRhdGluZyBleGlzdGluZyBjb250ZXh0IHByb3BlcnRpZXMgb3IgbmV3IHByb3BlcnRpZXMgaW4gdGhlIGB3aW5gXG4gICAgICAgIC8vIHRoYXQgd2FzIG9ubHkgaW50cm9kdWNlZCBhZnRlciB0aGUgZXZhbC5cbiAgICAgICAgaWYgKGtleSBpbiBjb250ZXh0IHx8IGluZGV4T2Yod2luS2V5cywga2V5KSA9PT0gLTEpIHtcbiAgICAgICAgICAgIGNvbnRleHRba2V5XSA9IHdpbltrZXldO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBmb3JFYWNoKGdsb2JhbHMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIGNvbnRleHQpKSB7XG4gICAgICAgICAgICBkZWZpbmVQcm9wKGNvbnRleHQsIGtleSwgd2luW2tleV0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICAgIFxuICAgIHJldHVybiByZXM7XG59O1xuXG5TY3JpcHQucHJvdG90eXBlLnJ1bkluVGhpc0NvbnRleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGV2YWwodGhpcy5jb2RlKTsgLy8gbWF5YmUuLi5cbn07XG5cblNjcmlwdC5wcm90b3R5cGUucnVuSW5OZXdDb250ZXh0ID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICB2YXIgY3R4ID0gU2NyaXB0LmNyZWF0ZUNvbnRleHQoY29udGV4dCk7XG4gICAgdmFyIHJlcyA9IHRoaXMucnVuSW5Db250ZXh0KGN0eCk7XG5cbiAgICBmb3JFYWNoKE9iamVjdF9rZXlzKGN0eCksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgY29udGV4dFtrZXldID0gY3R4W2tleV07XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzO1xufTtcblxuZm9yRWFjaChPYmplY3Rfa2V5cyhTY3JpcHQucHJvdG90eXBlKSwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBleHBvcnRzW25hbWVdID0gU2NyaXB0W25hbWVdID0gZnVuY3Rpb24gKGNvZGUpIHtcbiAgICAgICAgdmFyIHMgPSBTY3JpcHQoY29kZSk7XG4gICAgICAgIHJldHVybiBzW25hbWVdLmFwcGx5KHMsIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgfTtcbn0pO1xuXG5leHBvcnRzLmNyZWF0ZVNjcmlwdCA9IGZ1bmN0aW9uIChjb2RlKSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuU2NyaXB0KGNvZGUpO1xufTtcblxuZXhwb3J0cy5jcmVhdGVDb250ZXh0ID0gU2NyaXB0LmNyZWF0ZUNvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgIHZhciBjb3B5ID0gbmV3IENvbnRleHQoKTtcbiAgICBpZih0eXBlb2YgY29udGV4dCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yRWFjaChPYmplY3Rfa2V5cyhjb250ZXh0KSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgY29weVtrZXldID0gY29udGV4dFtrZXldO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvcHk7XG59O1xuIiwiXG52YXIgaW5kZXhPZiA9IFtdLmluZGV4T2Y7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXJyLCBvYmope1xuICBpZiAoaW5kZXhPZikgcmV0dXJuIGFyci5pbmRleE9mKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKGFycltpXSA9PT0gb2JqKSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59OyIsIm1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPW1vZHVsZS5leHBvcnRzPXtcIjIuMTYuODQwLjEuMTAxLjMuNC4xLjFcIjogXCJhZXMtMTI4LWVjYlwiLFxuXCIyLjE2Ljg0MC4xLjEwMS4zLjQuMS4yXCI6IFwiYWVzLTEyOC1jYmNcIixcblwiMi4xNi44NDAuMS4xMDEuMy40LjEuM1wiOiBcImFlcy0xMjgtb2ZiXCIsXG5cIjIuMTYuODQwLjEuMTAxLjMuNC4xLjRcIjogXCJhZXMtMTI4LWNmYlwiLFxuXCIyLjE2Ljg0MC4xLjEwMS4zLjQuMS4yMVwiOiBcImFlcy0xOTItZWNiXCIsXG5cIjIuMTYuODQwLjEuMTAxLjMuNC4xLjIyXCI6IFwiYWVzLTE5Mi1jYmNcIixcblwiMi4xNi44NDAuMS4xMDEuMy40LjEuMjNcIjogXCJhZXMtMTkyLW9mYlwiLFxuXCIyLjE2Ljg0MC4xLjEwMS4zLjQuMS4yNFwiOiBcImFlcy0xOTItY2ZiXCIsXG5cIjIuMTYuODQwLjEuMTAxLjMuNC4xLjQxXCI6IFwiYWVzLTI1Ni1lY2JcIixcblwiMi4xNi44NDAuMS4xMDEuMy40LjEuNDJcIjogXCJhZXMtMjU2LWNiY1wiLFxuXCIyLjE2Ljg0MC4xLjEwMS4zLjQuMS40M1wiOiBcImFlcy0yNTYtb2ZiXCIsXG5cIjIuMTYuODQwLjEuMTAxLjMuNC4xLjQ0XCI6IFwiYWVzLTI1Ni1jZmJcIlxufSIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVsbGlwdGljID0gZXhwb3J0cztcblxuZWxsaXB0aWMudmVyc2lvbiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb247XG5lbGxpcHRpYy51dGlscyA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvdXRpbHMnKTtcbmVsbGlwdGljLnJhbmQgPSByZXF1aXJlKCdicm9yYW5kJyk7XG5lbGxpcHRpYy5obWFjRFJCRyA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvaG1hYy1kcmJnJyk7XG5lbGxpcHRpYy5jdXJ2ZSA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvY3VydmUnKTtcbmVsbGlwdGljLmN1cnZlcyA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvY3VydmVzJyk7XG5cbi8vIFByb3RvY29sc1xuZWxsaXB0aWMuZWMgPSByZXF1aXJlKCcuL2VsbGlwdGljL2VjJyk7XG4iLCJtb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz17XG4gIFwibmFtZVwiOiBcImVsbGlwdGljXCIsXG4gIFwidmVyc2lvblwiOiBcIjMuMS4wXCIsXG4gIFwiZGVzY3JpcHRpb25cIjogXCJFQyBjcnlwdG9ncmFwaHlcIixcbiAgXCJtYWluXCI6IFwibGliL2VsbGlwdGljLmpzXCIsXG4gIFwic2NyaXB0c1wiOiB7XG4gICAgXCJ0ZXN0XCI6IFwibWFrZSBsaW50ICYmIG1vY2hhIC0tcmVwb3J0ZXI9c3BlYyB0ZXN0LyotdGVzdC5qc1wiXG4gIH0sXG4gIFwicmVwb3NpdG9yeVwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiZ2l0XCIsXG4gICAgXCJ1cmxcIjogXCJnaXQrc3NoOi8vZ2l0QGdpdGh1Yi5jb20vaW5kdXRueS9lbGxpcHRpYy5naXRcIlxuICB9LFxuICBcImtleXdvcmRzXCI6IFtcbiAgICBcIkVDXCIsXG4gICAgXCJFbGxpcHRpY1wiLFxuICAgIFwiY3VydmVcIixcbiAgICBcIkNyeXB0b2dyYXBoeVwiXG4gIF0sXG4gIFwiYXV0aG9yXCI6IHtcbiAgICBcIm5hbWVcIjogXCJGZWRvciBJbmR1dG55XCIsXG4gICAgXCJlbWFpbFwiOiBcImZlZG9yQGluZHV0bnkuY29tXCJcbiAgfSxcbiAgXCJsaWNlbnNlXCI6IFwiTUlUXCIsXG4gIFwiYnVnc1wiOiB7XG4gICAgXCJ1cmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9lbGxpcHRpYy9pc3N1ZXNcIlxuICB9LFxuICBcImhvbWVwYWdlXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvZWxsaXB0aWNcIixcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiYnJvd3NlcmlmeVwiOiBcIl4zLjQ0LjJcIixcbiAgICBcImpzY3NcIjogXCJeMS4xMS4zXCIsXG4gICAgXCJqc2hpbnRcIjogXCJeMi42LjBcIixcbiAgICBcIm1vY2hhXCI6IFwiXjIuMS4wXCIsXG4gICAgXCJ1Z2xpZnktanNcIjogXCJeMi40LjEzXCJcbiAgfSxcbiAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiYm4uanNcIjogXCJeMi4wLjNcIixcbiAgICBcImJyb3JhbmRcIjogXCJeMS4wLjFcIixcbiAgICBcImhhc2guanNcIjogXCJeMS4wLjBcIixcbiAgICBcImluaGVyaXRzXCI6IFwiXjIuMC4xXCJcbiAgfSxcbiAgXCJnaXRIZWFkXCI6IFwiZDg2Y2QyYTgxNzhmN2U3Y2VjYmQ2ZGQ5MmVlYTA4NGUyYWI0NGMxM1wiLFxuICBcIl9pZFwiOiBcImVsbGlwdGljQDMuMS4wXCIsXG4gIFwiX3NoYXN1bVwiOiBcImMyMTY4MmVmNzYyNzY5YjU2YTc0MjAxNjA5MTA1ZGExMWQ1ZjYwY2NcIixcbiAgXCJfZnJvbVwiOiBcImVsbGlwdGljQD49My4wLjAgPDQuMC4wXCIsXG4gIFwiX25wbVZlcnNpb25cIjogXCIyLjExLjBcIixcbiAgXCJfbm9kZVZlcnNpb25cIjogXCIyLjIuMVwiLFxuICBcIl9ucG1Vc2VyXCI6IHtcbiAgICBcIm5hbWVcIjogXCJpbmR1dG55XCIsXG4gICAgXCJlbWFpbFwiOiBcImZlZG9yQGluZHV0bnkuY29tXCJcbiAgfSxcbiAgXCJtYWludGFpbmVyc1wiOiBbXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiaW5kdXRueVwiLFxuICAgICAgXCJlbWFpbFwiOiBcImZlZG9yQGluZHV0bnkuY29tXCJcbiAgICB9XG4gIF0sXG4gIFwiZGlzdFwiOiB7XG4gICAgXCJzaGFzdW1cIjogXCJjMjE2ODJlZjc2Mjc2OWI1NmE3NDIwMTYwOTEwNWRhMTFkNWY2MGNjXCIsXG4gICAgXCJ0YXJiYWxsXCI6IFwiaHR0cDovL3JlZ2lzdHJ5Lm5wbWpzLm9yZy9lbGxpcHRpYy8tL2VsbGlwdGljLTMuMS4wLnRnelwiXG4gIH0sXG4gIFwiZGlyZWN0b3JpZXNcIjoge30sXG4gIFwiX3Jlc29sdmVkXCI6IFwiaHR0cHM6Ly9yZWdpc3RyeS5ucG1qcy5vcmcvZWxsaXB0aWMvLS9lbGxpcHRpYy0zLjEuMC50Z3pcIixcbiAgXCJyZWFkbWVcIjogXCJFUlJPUjogTm8gUkVBRE1FIGRhdGEgZm91bmQhXCJcbn1cbiIsInZhciByO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJhbmQobGVuKSB7XG4gIGlmICghcilcbiAgICByID0gbmV3IFJhbmQobnVsbCk7XG5cbiAgcmV0dXJuIHIuZ2VuZXJhdGUobGVuKTtcbn07XG5cbmZ1bmN0aW9uIFJhbmQocmFuZCkge1xuICB0aGlzLnJhbmQgPSByYW5kO1xufVxubW9kdWxlLmV4cG9ydHMuUmFuZCA9IFJhbmQ7XG5cblJhbmQucHJvdG90eXBlLmdlbmVyYXRlID0gZnVuY3Rpb24gZ2VuZXJhdGUobGVuKSB7XG4gIHJldHVybiB0aGlzLl9yYW5kKGxlbik7XG59O1xuXG5pZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHtcbiAgaWYgKHdpbmRvdy5jcnlwdG8gJiYgd2luZG93LmNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBNb2Rlcm4gYnJvd3NlcnNcbiAgICBSYW5kLnByb3RvdHlwZS5fcmFuZCA9IGZ1bmN0aW9uIF9yYW5kKG4pIHtcbiAgICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheShuKTtcbiAgICAgIHdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFycik7XG4gICAgICByZXR1cm4gYXJyO1xuICAgIH07XG4gIH0gZWxzZSBpZiAod2luZG93Lm1zQ3J5cHRvICYmIHdpbmRvdy5tc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBJRVxuICAgIFJhbmQucHJvdG90eXBlLl9yYW5kID0gZnVuY3Rpb24gX3JhbmQobikge1xuICAgICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KG4pO1xuICAgICAgd2luZG93Lm1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnIpO1xuICAgICAgcmV0dXJuIGFycjtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIC8vIE9sZCBqdW5rXG4gICAgUmFuZC5wcm90b3R5cGUuX3JhbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkIHlldCcpO1xuICAgIH07XG4gIH1cbn0gZWxzZSB7XG4gIC8vIE5vZGUuanMgb3IgV2ViIHdvcmtlclxuICB0cnkge1xuICAgIHZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnknICsgJ3B0bycpO1xuXG4gICAgUmFuZC5wcm90b3R5cGUuX3JhbmQgPSBmdW5jdGlvbiBfcmFuZChuKSB7XG4gICAgICByZXR1cm4gY3J5cHRvLnJhbmRvbUJ5dGVzKG4pO1xuICAgIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBFbXVsYXRlIGNyeXB0byBBUEkgdXNpbmcgcmFuZHlcbiAgICBSYW5kLnByb3RvdHlwZS5fcmFuZCA9IGZ1bmN0aW9uIF9yYW5kKG4pIHtcbiAgICAgIHZhciByZXMgPSBuZXcgVWludDhBcnJheShuKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzLmxlbmd0aDsgaSsrKVxuICAgICAgICByZXNbaV0gPSB0aGlzLnJhbmQuZ2V0Qnl0ZSgpO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9O1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IGV4cG9ydHM7XG5cbnV0aWxzLmFzc2VydCA9IGZ1bmN0aW9uIGFzc2VydCh2YWwsIG1zZykge1xuICBpZiAoIXZhbClcbiAgICB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG59O1xuXG5mdW5jdGlvbiB0b0FycmF5KG1zZywgZW5jKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KG1zZykpXG4gICAgcmV0dXJuIG1zZy5zbGljZSgpO1xuICBpZiAoIW1zZylcbiAgICByZXR1cm4gW107XG4gIHZhciByZXMgPSBbXTtcbiAgaWYgKHR5cGVvZiBtc2cgIT09ICdzdHJpbmcnKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspXG4gICAgICByZXNbaV0gPSBtc2dbaV0gfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH1cbiAgaWYgKCFlbmMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSBtc2cuY2hhckNvZGVBdChpKTtcbiAgICAgIHZhciBoaSA9IGMgPj4gODtcbiAgICAgIHZhciBsbyA9IGMgJiAweGZmO1xuICAgICAgaWYgKGhpKVxuICAgICAgICByZXMucHVzaChoaSwgbG8pO1xuICAgICAgZWxzZVxuICAgICAgICByZXMucHVzaChsbyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGVuYyA9PT0gJ2hleCcpIHtcbiAgICBtc2cgPSBtc2cucmVwbGFjZSgvW15hLXowLTldKy9pZywgJycpO1xuICAgIGlmIChtc2cubGVuZ3RoICUgMiAhPT0gMClcbiAgICAgIG1zZyA9ICcwJyArIG1zZztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkgKz0gMilcbiAgICAgIHJlcy5wdXNoKHBhcnNlSW50KG1zZ1tpXSArIG1zZ1tpICsgMV0sIDE2KSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbnV0aWxzLnRvQXJyYXkgPSB0b0FycmF5O1xuXG5mdW5jdGlvbiB6ZXJvMih3b3JkKSB7XG4gIGlmICh3b3JkLmxlbmd0aCA9PT0gMSlcbiAgICByZXR1cm4gJzAnICsgd29yZDtcbiAgZWxzZVxuICAgIHJldHVybiB3b3JkO1xufVxudXRpbHMuemVybzIgPSB6ZXJvMjtcblxuZnVuY3Rpb24gdG9IZXgobXNnKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspXG4gICAgcmVzICs9IHplcm8yKG1zZ1tpXS50b1N0cmluZygxNikpO1xuICByZXR1cm4gcmVzO1xufVxudXRpbHMudG9IZXggPSB0b0hleDtcblxudXRpbHMuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKGFyciwgZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB0b0hleChhcnIpO1xuICBlbHNlXG4gICAgcmV0dXJuIGFycjtcbn07XG5cbi8vIFJlcHJlc2VudCBudW0gaW4gYSB3LU5BRiBmb3JtXG5mdW5jdGlvbiBnZXROQUYobnVtLCB3KSB7XG4gIHZhciBuYWYgPSBbXTtcbiAgdmFyIHdzID0gMSA8PCAodyArIDEpO1xuICB2YXIgayA9IG51bS5jbG9uZSgpO1xuICB3aGlsZSAoay5jbXBuKDEpID49IDApIHtcbiAgICB2YXIgejtcbiAgICBpZiAoay5pc09kZCgpKSB7XG4gICAgICB2YXIgbW9kID0gay5hbmRsbih3cyAtIDEpO1xuICAgICAgaWYgKG1vZCA+ICh3cyA+PiAxKSAtIDEpXG4gICAgICAgIHogPSAod3MgPj4gMSkgLSBtb2Q7XG4gICAgICBlbHNlXG4gICAgICAgIHogPSBtb2Q7XG4gICAgICBrLmlzdWJuKHopO1xuICAgIH0gZWxzZSB7XG4gICAgICB6ID0gMDtcbiAgICB9XG4gICAgbmFmLnB1c2goeik7XG5cbiAgICAvLyBPcHRpbWl6YXRpb24sIHNoaWZ0IGJ5IHdvcmQgaWYgcG9zc2libGVcbiAgICB2YXIgc2hpZnQgPSAoay5jbXBuKDApICE9PSAwICYmIGsuYW5kbG4od3MgLSAxKSA9PT0gMCkgPyAodyArIDEpIDogMTtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IHNoaWZ0OyBpKyspXG4gICAgICBuYWYucHVzaCgwKTtcbiAgICBrLmlzaHJuKHNoaWZ0KTtcbiAgfVxuXG4gIHJldHVybiBuYWY7XG59XG51dGlscy5nZXROQUYgPSBnZXROQUY7XG5cbi8vIFJlcHJlc2VudCBrMSwgazIgaW4gYSBKb2ludCBTcGFyc2UgRm9ybVxuZnVuY3Rpb24gZ2V0SlNGKGsxLCBrMikge1xuICB2YXIganNmID0gW1xuICAgIFtdLFxuICAgIFtdXG4gIF07XG5cbiAgazEgPSBrMS5jbG9uZSgpO1xuICBrMiA9IGsyLmNsb25lKCk7XG4gIHZhciBkMSA9IDA7XG4gIHZhciBkMiA9IDA7XG4gIHdoaWxlIChrMS5jbXBuKC1kMSkgPiAwIHx8IGsyLmNtcG4oLWQyKSA+IDApIHtcblxuICAgIC8vIEZpcnN0IHBoYXNlXG4gICAgdmFyIG0xNCA9IChrMS5hbmRsbigzKSArIGQxKSAmIDM7XG4gICAgdmFyIG0yNCA9IChrMi5hbmRsbigzKSArIGQyKSAmIDM7XG4gICAgaWYgKG0xNCA9PT0gMylcbiAgICAgIG0xNCA9IC0xO1xuICAgIGlmIChtMjQgPT09IDMpXG4gICAgICBtMjQgPSAtMTtcbiAgICB2YXIgdTE7XG4gICAgaWYgKChtMTQgJiAxKSA9PT0gMCkge1xuICAgICAgdTEgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbTggPSAoazEuYW5kbG4oNykgKyBkMSkgJiA3O1xuICAgICAgaWYgKChtOCA9PT0gMyB8fCBtOCA9PT0gNSkgJiYgbTI0ID09PSAyKVxuICAgICAgICB1MSA9IC1tMTQ7XG4gICAgICBlbHNlXG4gICAgICAgIHUxID0gbTE0O1xuICAgIH1cbiAgICBqc2ZbMF0ucHVzaCh1MSk7XG5cbiAgICB2YXIgdTI7XG4gICAgaWYgKChtMjQgJiAxKSA9PT0gMCkge1xuICAgICAgdTIgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbTggPSAoazIuYW5kbG4oNykgKyBkMikgJiA3O1xuICAgICAgaWYgKChtOCA9PT0gMyB8fCBtOCA9PT0gNSkgJiYgbTE0ID09PSAyKVxuICAgICAgICB1MiA9IC1tMjQ7XG4gICAgICBlbHNlXG4gICAgICAgIHUyID0gbTI0O1xuICAgIH1cbiAgICBqc2ZbMV0ucHVzaCh1Mik7XG5cbiAgICAvLyBTZWNvbmQgcGhhc2VcbiAgICBpZiAoMiAqIGQxID09PSB1MSArIDEpXG4gICAgICBkMSA9IDEgLSBkMTtcbiAgICBpZiAoMiAqIGQyID09PSB1MiArIDEpXG4gICAgICBkMiA9IDEgLSBkMjtcbiAgICBrMS5pc2hybigxKTtcbiAgICBrMi5pc2hybigxKTtcbiAgfVxuXG4gIHJldHVybiBqc2Y7XG59XG51dGlscy5nZXRKU0YgPSBnZXRKU0Y7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXNoID0gcmVxdWlyZSgnaGFzaC5qcycpO1xudmFyIGVsbGlwdGljID0gcmVxdWlyZSgnLi4vZWxsaXB0aWMnKTtcbnZhciB1dGlscyA9IGVsbGlwdGljLnV0aWxzO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gSG1hY0RSQkcob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSG1hY0RSQkcpKVxuICAgIHJldHVybiBuZXcgSG1hY0RSQkcob3B0aW9ucyk7XG4gIHRoaXMuaGFzaCA9IG9wdGlvbnMuaGFzaDtcbiAgdGhpcy5wcmVkUmVzaXN0ID0gISFvcHRpb25zLnByZWRSZXNpc3Q7XG5cbiAgdGhpcy5vdXRMZW4gPSB0aGlzLmhhc2gub3V0U2l6ZTtcbiAgdGhpcy5taW5FbnRyb3B5ID0gb3B0aW9ucy5taW5FbnRyb3B5IHx8IHRoaXMuaGFzaC5obWFjU3RyZW5ndGg7XG5cbiAgdGhpcy5yZXNlZWQgPSBudWxsO1xuICB0aGlzLnJlc2VlZEludGVydmFsID0gbnVsbDtcbiAgdGhpcy5LID0gbnVsbDtcbiAgdGhpcy5WID0gbnVsbDtcblxuICB2YXIgZW50cm9weSA9IHV0aWxzLnRvQXJyYXkob3B0aW9ucy5lbnRyb3B5LCBvcHRpb25zLmVudHJvcHlFbmMpO1xuICB2YXIgbm9uY2UgPSB1dGlscy50b0FycmF5KG9wdGlvbnMubm9uY2UsIG9wdGlvbnMubm9uY2VFbmMpO1xuICB2YXIgcGVycyA9IHV0aWxzLnRvQXJyYXkob3B0aW9ucy5wZXJzLCBvcHRpb25zLnBlcnNFbmMpO1xuICBhc3NlcnQoZW50cm9weS5sZW5ndGggPj0gKHRoaXMubWluRW50cm9weSAvIDgpLFxuICAgICAgICAgJ05vdCBlbm91Z2ggZW50cm9weS4gTWluaW11bSBpczogJyArIHRoaXMubWluRW50cm9weSArICcgYml0cycpO1xuICB0aGlzLl9pbml0KGVudHJvcHksIG5vbmNlLCBwZXJzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gSG1hY0RSQkc7XG5cbkhtYWNEUkJHLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQoZW50cm9weSwgbm9uY2UsIHBlcnMpIHtcbiAgdmFyIHNlZWQgPSBlbnRyb3B5LmNvbmNhdChub25jZSkuY29uY2F0KHBlcnMpO1xuXG4gIHRoaXMuSyA9IG5ldyBBcnJheSh0aGlzLm91dExlbiAvIDgpO1xuICB0aGlzLlYgPSBuZXcgQXJyYXkodGhpcy5vdXRMZW4gLyA4KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLlYubGVuZ3RoOyBpKyspIHtcbiAgICB0aGlzLktbaV0gPSAweDAwO1xuICAgIHRoaXMuVltpXSA9IDB4MDE7XG4gIH1cblxuICB0aGlzLl91cGRhdGUoc2VlZCk7XG4gIHRoaXMucmVzZWVkID0gMTtcbiAgdGhpcy5yZXNlZWRJbnRlcnZhbCA9IDB4MTAwMDAwMDAwMDAwMDsgIC8vIDJeNDhcbn07XG5cbkhtYWNEUkJHLnByb3RvdHlwZS5faG1hYyA9IGZ1bmN0aW9uIGhtYWMoKSB7XG4gIHJldHVybiBuZXcgaGFzaC5obWFjKHRoaXMuaGFzaCwgdGhpcy5LKTtcbn07XG5cbkhtYWNEUkJHLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKHNlZWQpIHtcbiAgdmFyIGttYWMgPSB0aGlzLl9obWFjKClcbiAgICAgICAgICAgICAgICAgLnVwZGF0ZSh0aGlzLlYpXG4gICAgICAgICAgICAgICAgIC51cGRhdGUoWyAweDAwIF0pO1xuICBpZiAoc2VlZClcbiAgICBrbWFjID0ga21hYy51cGRhdGUoc2VlZCk7XG4gIHRoaXMuSyA9IGttYWMuZGlnZXN0KCk7XG4gIHRoaXMuViA9IHRoaXMuX2htYWMoKS51cGRhdGUodGhpcy5WKS5kaWdlc3QoKTtcbiAgaWYgKCFzZWVkKVxuICAgIHJldHVybjtcblxuICB0aGlzLksgPSB0aGlzLl9obWFjKClcbiAgICAgICAgICAgICAgIC51cGRhdGUodGhpcy5WKVxuICAgICAgICAgICAgICAgLnVwZGF0ZShbIDB4MDEgXSlcbiAgICAgICAgICAgICAgIC51cGRhdGUoc2VlZClcbiAgICAgICAgICAgICAgIC5kaWdlc3QoKTtcbiAgdGhpcy5WID0gdGhpcy5faG1hYygpLnVwZGF0ZSh0aGlzLlYpLmRpZ2VzdCgpO1xufTtcblxuSG1hY0RSQkcucHJvdG90eXBlLnJlc2VlZCA9IGZ1bmN0aW9uIHJlc2VlZChlbnRyb3B5LCBlbnRyb3B5RW5jLCBhZGQsIGFkZEVuYykge1xuICAvLyBPcHRpb25hbCBlbnRyb3B5IGVuY1xuICBpZiAodHlwZW9mIGVudHJvcHlFbmMgIT09ICdzdHJpbmcnKSB7XG4gICAgYWRkRW5jID0gYWRkO1xuICAgIGFkZCA9IGVudHJvcHlFbmM7XG4gICAgZW50cm9weUVuYyA9IG51bGw7XG4gIH1cblxuICBlbnRyb3B5ID0gdXRpbHMudG9CdWZmZXIoZW50cm9weSwgZW50cm9weUVuYyk7XG4gIGFkZCA9IHV0aWxzLnRvQnVmZmVyKGFkZCwgYWRkRW5jKTtcblxuICBhc3NlcnQoZW50cm9weS5sZW5ndGggPj0gKHRoaXMubWluRW50cm9weSAvIDgpLFxuICAgICAgICAgJ05vdCBlbm91Z2ggZW50cm9weS4gTWluaW11bSBpczogJyArIHRoaXMubWluRW50cm9weSArICcgYml0cycpO1xuXG4gIHRoaXMuX3VwZGF0ZShlbnRyb3B5LmNvbmNhdChhZGQgfHwgW10pKTtcbiAgdGhpcy5yZXNlZWQgPSAxO1xufTtcblxuSG1hY0RSQkcucHJvdG90eXBlLmdlbmVyYXRlID0gZnVuY3Rpb24gZ2VuZXJhdGUobGVuLCBlbmMsIGFkZCwgYWRkRW5jKSB7XG4gIGlmICh0aGlzLnJlc2VlZCA+IHRoaXMucmVzZWVkSW50ZXJ2YWwpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdSZXNlZWQgaXMgcmVxdWlyZWQnKTtcblxuICAvLyBPcHRpb25hbCBlbmNvZGluZ1xuICBpZiAodHlwZW9mIGVuYyAhPT0gJ3N0cmluZycpIHtcbiAgICBhZGRFbmMgPSBhZGQ7XG4gICAgYWRkID0gZW5jO1xuICAgIGVuYyA9IG51bGw7XG4gIH1cblxuICAvLyBPcHRpb25hbCBhZGRpdGlvbmFsIGRhdGFcbiAgaWYgKGFkZCkge1xuICAgIGFkZCA9IHV0aWxzLnRvQXJyYXkoYWRkLCBhZGRFbmMpO1xuICAgIHRoaXMuX3VwZGF0ZShhZGQpO1xuICB9XG5cbiAgdmFyIHRlbXAgPSBbXTtcbiAgd2hpbGUgKHRlbXAubGVuZ3RoIDwgbGVuKSB7XG4gICAgdGhpcy5WID0gdGhpcy5faG1hYygpLnVwZGF0ZSh0aGlzLlYpLmRpZ2VzdCgpO1xuICAgIHRlbXAgPSB0ZW1wLmNvbmNhdCh0aGlzLlYpO1xuICB9XG5cbiAgdmFyIHJlcyA9IHRlbXAuc2xpY2UoMCwgbGVuKTtcbiAgdGhpcy5fdXBkYXRlKGFkZCk7XG4gIHRoaXMucmVzZWVkKys7XG4gIHJldHVybiB1dGlscy5lbmNvZGUocmVzLCBlbmMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJuID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBlbGxpcHRpYyA9IHJlcXVpcmUoJy4uLy4uL2VsbGlwdGljJyk7XG52YXIgdXRpbHMgPSBlbGxpcHRpYy51dGlscztcbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG5cbnZhciBLZXlQYWlyID0gcmVxdWlyZSgnLi9rZXknKTtcbnZhciBTaWduYXR1cmUgPSByZXF1aXJlKCcuL3NpZ25hdHVyZScpO1xuXG5mdW5jdGlvbiBFQyhvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBFQykpXG4gICAgcmV0dXJuIG5ldyBFQyhvcHRpb25zKTtcblxuICAvLyBTaG9ydGN1dCBgZWxsaXB0aWMuZWMoY3VydmUtbmFtZSlgXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICBhc3NlcnQoZWxsaXB0aWMuY3VydmVzLmhhc093blByb3BlcnR5KG9wdGlvbnMpLCAnVW5rbm93biBjdXJ2ZSAnICsgb3B0aW9ucyk7XG5cbiAgICBvcHRpb25zID0gZWxsaXB0aWMuY3VydmVzW29wdGlvbnNdO1xuICB9XG5cbiAgLy8gU2hvcnRjdXQgZm9yIGBlbGxpcHRpYy5lYyhlbGxpcHRpYy5jdXJ2ZXMuY3VydmVOYW1lKWBcbiAgaWYgKG9wdGlvbnMgaW5zdGFuY2VvZiBlbGxpcHRpYy5jdXJ2ZXMuUHJlc2V0Q3VydmUpXG4gICAgb3B0aW9ucyA9IHsgY3VydmU6IG9wdGlvbnMgfTtcblxuICB0aGlzLmN1cnZlID0gb3B0aW9ucy5jdXJ2ZS5jdXJ2ZTtcbiAgdGhpcy5uID0gdGhpcy5jdXJ2ZS5uO1xuICB0aGlzLm5oID0gdGhpcy5uLnNocm4oMSk7XG4gIHRoaXMuZyA9IHRoaXMuY3VydmUuZztcblxuICAvLyBQb2ludCBvbiBjdXJ2ZVxuICB0aGlzLmcgPSBvcHRpb25zLmN1cnZlLmc7XG4gIHRoaXMuZy5wcmVjb21wdXRlKG9wdGlvbnMuY3VydmUubi5iaXRMZW5ndGgoKSArIDEpO1xuXG4gIC8vIEhhc2ggZm9yIGZ1bmN0aW9uIGZvciBEUkJHXG4gIHRoaXMuaGFzaCA9IG9wdGlvbnMuaGFzaCB8fCBvcHRpb25zLmN1cnZlLmhhc2g7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEVDO1xuXG5FQy5wcm90b3R5cGUua2V5UGFpciA9IGZ1bmN0aW9uIGtleVBhaXIob3B0aW9ucykge1xuICByZXR1cm4gbmV3IEtleVBhaXIodGhpcywgb3B0aW9ucyk7XG59O1xuXG5FQy5wcm90b3R5cGUua2V5RnJvbVByaXZhdGUgPSBmdW5jdGlvbiBrZXlGcm9tUHJpdmF0ZShwcml2LCBlbmMpIHtcbiAgcmV0dXJuIEtleVBhaXIuZnJvbVByaXZhdGUodGhpcywgcHJpdiwgZW5jKTtcbn07XG5cbkVDLnByb3RvdHlwZS5rZXlGcm9tUHVibGljID0gZnVuY3Rpb24ga2V5RnJvbVB1YmxpYyhwdWIsIGVuYykge1xuICByZXR1cm4gS2V5UGFpci5mcm9tUHVibGljKHRoaXMsIHB1YiwgZW5jKTtcbn07XG5cbkVDLnByb3RvdHlwZS5nZW5LZXlQYWlyID0gZnVuY3Rpb24gZ2VuS2V5UGFpcihvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucylcbiAgICBvcHRpb25zID0ge307XG5cbiAgLy8gSW5zdGFudGlhdGUgSG1hY19EUkJHXG4gIHZhciBkcmJnID0gbmV3IGVsbGlwdGljLmhtYWNEUkJHKHtcbiAgICBoYXNoOiB0aGlzLmhhc2gsXG4gICAgcGVyczogb3B0aW9ucy5wZXJzLFxuICAgIGVudHJvcHk6IG9wdGlvbnMuZW50cm9weSB8fCBlbGxpcHRpYy5yYW5kKHRoaXMuaGFzaC5obWFjU3RyZW5ndGgpLFxuICAgIG5vbmNlOiB0aGlzLm4udG9BcnJheSgpXG4gIH0pO1xuXG4gIHZhciBieXRlcyA9IHRoaXMubi5ieXRlTGVuZ3RoKCk7XG4gIHZhciBuczIgPSB0aGlzLm4uc3ViKG5ldyBibigyKSk7XG4gIGRvIHtcbiAgICB2YXIgcHJpdiA9IG5ldyBibihkcmJnLmdlbmVyYXRlKGJ5dGVzKSk7XG4gICAgaWYgKHByaXYuY21wKG5zMikgPiAwKVxuICAgICAgY29udGludWU7XG5cbiAgICBwcml2LmlhZGRuKDEpO1xuICAgIHJldHVybiB0aGlzLmtleUZyb21Qcml2YXRlKHByaXYpO1xuICB9IHdoaWxlICh0cnVlKTtcbn07XG5cbkVDLnByb3RvdHlwZS5fdHJ1bmNhdGVUb04gPSBmdW5jdGlvbiB0cnVuY2F0ZVRvTihtc2csIHRydW5jT25seSkge1xuICB2YXIgZGVsdGEgPSBtc2cuYnl0ZUxlbmd0aCgpICogOCAtIHRoaXMubi5iaXRMZW5ndGgoKTtcbiAgaWYgKGRlbHRhID4gMClcbiAgICBtc2cgPSBtc2cuc2hybihkZWx0YSk7XG4gIGlmICghdHJ1bmNPbmx5ICYmIG1zZy5jbXAodGhpcy5uKSA+PSAwKVxuICAgIHJldHVybiBtc2cuc3ViKHRoaXMubik7XG4gIGVsc2VcbiAgICByZXR1cm4gbXNnO1xufTtcblxuRUMucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiBzaWduKG1zZywga2V5LCBlbmMsIG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBlbmMgPT09ICdvYmplY3QnKSB7XG4gICAgb3B0aW9ucyA9IGVuYztcbiAgICBlbmMgPSBudWxsO1xuICB9XG4gIGlmICghb3B0aW9ucylcbiAgICBvcHRpb25zID0ge307XG5cbiAga2V5ID0gdGhpcy5rZXlGcm9tUHJpdmF0ZShrZXksIGVuYyk7XG4gIG1zZyA9IHRoaXMuX3RydW5jYXRlVG9OKG5ldyBibihtc2csIDE2KSk7XG5cbiAgLy8gWmVyby1leHRlbmQga2V5IHRvIHByb3ZpZGUgZW5vdWdoIGVudHJvcHlcbiAgdmFyIGJ5dGVzID0gdGhpcy5uLmJ5dGVMZW5ndGgoKTtcbiAgdmFyIGJrZXkgPSBrZXkuZ2V0UHJpdmF0ZSgpLnRvQXJyYXkoKTtcbiAgZm9yICh2YXIgaSA9IGJrZXkubGVuZ3RoOyBpIDwgMjE7IGkrKylcbiAgICBia2V5LnVuc2hpZnQoMCk7XG5cbiAgLy8gWmVyby1leHRlbmQgbm9uY2UgdG8gaGF2ZSB0aGUgc2FtZSBieXRlIHNpemUgYXMgTlxuICB2YXIgbm9uY2UgPSBtc2cudG9BcnJheSgpO1xuICBmb3IgKHZhciBpID0gbm9uY2UubGVuZ3RoOyBpIDwgYnl0ZXM7IGkrKylcbiAgICBub25jZS51bnNoaWZ0KDApO1xuXG4gIC8vIEluc3RhbnRpYXRlIEhtYWNfRFJCR1xuICB2YXIgZHJiZyA9IG5ldyBlbGxpcHRpYy5obWFjRFJCRyh7XG4gICAgaGFzaDogdGhpcy5oYXNoLFxuICAgIGVudHJvcHk6IGJrZXksXG4gICAgbm9uY2U6IG5vbmNlXG4gIH0pO1xuXG4gIC8vIE51bWJlciBvZiBieXRlcyB0byBnZW5lcmF0ZVxuICB2YXIgbnMxID0gdGhpcy5uLnN1YihuZXcgYm4oMSkpO1xuICBkbyB7XG4gICAgdmFyIGsgPSBuZXcgYm4oZHJiZy5nZW5lcmF0ZSh0aGlzLm4uYnl0ZUxlbmd0aCgpKSk7XG4gICAgayA9IHRoaXMuX3RydW5jYXRlVG9OKGssIHRydWUpO1xuICAgIGlmIChrLmNtcG4oMSkgPD0gMCB8fCBrLmNtcChuczEpID49IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIHZhciBrcCA9IHRoaXMuZy5tdWwoayk7XG4gICAgaWYgKGtwLmlzSW5maW5pdHkoKSlcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgdmFyIGtwWCA9IGtwLmdldFgoKTtcbiAgICB2YXIgciA9IGtwWC5tb2QodGhpcy5uKTtcbiAgICBpZiAoci5jbXBuKDApID09PSAwKVxuICAgICAgY29udGludWU7XG5cbiAgICB2YXIgcyA9IGsuaW52bSh0aGlzLm4pLm11bChyLm11bChrZXkuZ2V0UHJpdmF0ZSgpKS5pYWRkKG1zZykpLm1vZCh0aGlzLm4pO1xuICAgIGlmIChzLmNtcG4oMCkgPT09IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIC8vIFVzZSBjb21wbGVtZW50IG9mIGBzYCwgaWYgaXQgaXMgPiBgbiAvIDJgXG4gICAgaWYgKG9wdGlvbnMuY2Fub25pY2FsICYmIHMuY21wKHRoaXMubmgpID4gMClcbiAgICAgIHMgPSB0aGlzLm4uc3ViKHMpO1xuXG4gICAgdmFyIHJlY292ZXJ5UGFyYW0gPSAoa3AuZ2V0WSgpLmlzT2RkKCkgPyAxIDogMCkgfFxuICAgICAgICAgICAgICAgICAgICAgICAgKGtwWC5jbXAocikgIT09IDAgPyAyIDogMCk7XG5cbiAgICByZXR1cm4gbmV3IFNpZ25hdHVyZSh7IHI6IHIsIHM6IHMsIHJlY292ZXJ5UGFyYW06IHJlY292ZXJ5UGFyYW0gfSk7XG4gIH0gd2hpbGUgKHRydWUpO1xufTtcblxuRUMucHJvdG90eXBlLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtc2csIHNpZ25hdHVyZSwga2V5LCBlbmMpIHtcbiAgbXNnID0gdGhpcy5fdHJ1bmNhdGVUb04obmV3IGJuKG1zZywgMTYpKTtcbiAga2V5ID0gdGhpcy5rZXlGcm9tUHVibGljKGtleSwgZW5jKTtcbiAgc2lnbmF0dXJlID0gbmV3IFNpZ25hdHVyZShzaWduYXR1cmUsICdoZXgnKTtcblxuICAvLyBQZXJmb3JtIHByaW1pdGl2ZSB2YWx1ZXMgdmFsaWRhdGlvblxuICB2YXIgciA9IHNpZ25hdHVyZS5yO1xuICB2YXIgcyA9IHNpZ25hdHVyZS5zO1xuICBpZiAoci5jbXBuKDEpIDwgMCB8fCByLmNtcCh0aGlzLm4pID49IDApXG4gICAgcmV0dXJuIGZhbHNlO1xuICBpZiAocy5jbXBuKDEpIDwgMCB8fCBzLmNtcCh0aGlzLm4pID49IDApXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIFZhbGlkYXRlIHNpZ25hdHVyZVxuICB2YXIgc2ludiA9IHMuaW52bSh0aGlzLm4pO1xuICB2YXIgdTEgPSBzaW52Lm11bChtc2cpLm1vZCh0aGlzLm4pO1xuICB2YXIgdTIgPSBzaW52Lm11bChyKS5tb2QodGhpcy5uKTtcblxuICB2YXIgcCA9IHRoaXMuZy5tdWxBZGQodTEsIGtleS5nZXRQdWJsaWMoKSwgdTIpO1xuICBpZiAocC5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiBwLmdldFgoKS5tb2QodGhpcy5uKS5jbXAocikgPT09IDA7XG59O1xuXG5FQy5wcm90b3R5cGUucmVjb3ZlclB1YktleSA9IGZ1bmN0aW9uKG1zZywgc2lnbmF0dXJlLCBqLCBlbmMpIHtcbiAgYXNzZXJ0KCgzICYgaikgPT09IGosICdUaGUgcmVjb3ZlcnkgcGFyYW0gaXMgbW9yZSB0aGFuIHR3byBiaXRzJyk7XG4gIHNpZ25hdHVyZSA9IG5ldyBTaWduYXR1cmUoc2lnbmF0dXJlLCBlbmMpO1xuXG4gIHZhciBuID0gdGhpcy5uO1xuICB2YXIgZSA9IG5ldyBibihtc2cpO1xuICB2YXIgciA9IHNpZ25hdHVyZS5yO1xuICB2YXIgcyA9IHNpZ25hdHVyZS5zO1xuXG4gIC8vIEEgc2V0IExTQiBzaWduaWZpZXMgdGhhdCB0aGUgeS1jb29yZGluYXRlIGlzIG9kZFxuICB2YXIgaXNZT2RkID0gaiAmIDE7XG4gIHZhciBpc1NlY29uZEtleSA9IGogPj4gMTtcbiAgaWYgKHIuY21wKHRoaXMuY3VydmUucC5tb2QodGhpcy5jdXJ2ZS5uKSkgPj0gMCAmJiBpc1NlY29uZEtleSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBmaW5kIHNlbmNvbmQga2V5IGNhbmRpbmF0ZScpO1xuXG4gIC8vIDEuMS4gTGV0IHggPSByICsgam4uXG4gIHIgPSB0aGlzLmN1cnZlLnBvaW50RnJvbVgoaXNZT2RkLCByKTtcbiAgdmFyIGVOZWcgPSBlLm5lZygpLm1vZChuKTtcblxuICAvLyAxLjYuMSBDb21wdXRlIFEgPSByXi0xIChzUiAtICBlRylcbiAgLy8gICAgICAgICAgICAgICBRID0gcl4tMSAoc1IgKyAtZUcpXG4gIHZhciBySW52ID0gc2lnbmF0dXJlLnIuaW52bShuKTtcbiAgcmV0dXJuIHIubXVsKHMpLmFkZCh0aGlzLmcubXVsKGVOZWcpKS5tdWwockludik7XG59O1xuXG5FQy5wcm90b3R5cGUuZ2V0S2V5UmVjb3ZlcnlQYXJhbSA9IGZ1bmN0aW9uKGUsIHNpZ25hdHVyZSwgUSwgZW5jKSB7XG4gIHNpZ25hdHVyZSA9IG5ldyBTaWduYXR1cmUoc2lnbmF0dXJlLCBlbmMpO1xuICBpZiAoc2lnbmF0dXJlLnJlY292ZXJ5UGFyYW0gIT09IG51bGwpXG4gICAgcmV0dXJuIHNpZ25hdHVyZS5yZWNvdmVyeVBhcmFtO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgdmFyIFFwcmltZSA9IHRoaXMucmVjb3ZlclB1YktleShlLCBzaWduYXR1cmUsIGkpO1xuXG4gICAgaWYgKFFwcmltZS5lcShRKSlcbiAgICAgIHJldHVybiBpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGZpbmQgdmFsaWQgcmVjb3ZlcnkgZmFjdG9yJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYm4gPSByZXF1aXJlKCdibi5qcycpO1xuXG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCcuLi8uLi9lbGxpcHRpYycpO1xudmFyIHV0aWxzID0gZWxsaXB0aWMudXRpbHM7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBTaWduYXR1cmUob3B0aW9ucywgZW5jKSB7XG4gIGlmIChvcHRpb25zIGluc3RhbmNlb2YgU2lnbmF0dXJlKVxuICAgIHJldHVybiBvcHRpb25zO1xuXG4gIGlmICh0aGlzLl9pbXBvcnRERVIob3B0aW9ucywgZW5jKSlcbiAgICByZXR1cm47XG5cbiAgYXNzZXJ0KG9wdGlvbnMuciAmJiBvcHRpb25zLnMsICdTaWduYXR1cmUgd2l0aG91dCByIG9yIHMnKTtcbiAgdGhpcy5yID0gbmV3IGJuKG9wdGlvbnMuciwgMTYpO1xuICB0aGlzLnMgPSBuZXcgYm4ob3B0aW9ucy5zLCAxNik7XG4gIGlmIChvcHRpb25zLnJlY292ZXJ5UGFyYW0gIT09IG51bGwpXG4gICAgdGhpcy5yZWNvdmVyeVBhcmFtID0gb3B0aW9ucy5yZWNvdmVyeVBhcmFtO1xuICBlbHNlXG4gICAgdGhpcy5yZWNvdmVyeVBhcmFtID0gbnVsbDtcbn1cbm1vZHVsZS5leHBvcnRzID0gU2lnbmF0dXJlO1xuXG5TaWduYXR1cmUucHJvdG90eXBlLl9pbXBvcnRERVIgPSBmdW5jdGlvbiBfaW1wb3J0REVSKGRhdGEsIGVuYykge1xuICBkYXRhID0gdXRpbHMudG9BcnJheShkYXRhLCBlbmMpO1xuICBpZiAoZGF0YS5sZW5ndGggPCA2IHx8IGRhdGFbMF0gIT09IDB4MzAgfHwgZGF0YVsyXSAhPT0gMHgwMilcbiAgICByZXR1cm4gZmFsc2U7XG4gIHZhciB0b3RhbCA9IGRhdGFbMV07XG4gIGlmICgxICsgdG90YWwgPiBkYXRhLmxlbmd0aClcbiAgICByZXR1cm4gZmFsc2U7XG4gIHZhciBybGVuID0gZGF0YVszXTtcbiAgLy8gU2hvcnQgbGVuZ3RoIG5vdGF0aW9uXG4gIGlmIChybGVuID49IDB4ODApXG4gICAgcmV0dXJuIGZhbHNlO1xuICBpZiAoNCArIHJsZW4gKyAyID49IGRhdGEubGVuZ3RoKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaWYgKGRhdGFbNCArIHJsZW5dICE9PSAweDAyKVxuICAgIHJldHVybiBmYWxzZTtcbiAgdmFyIHNsZW4gPSBkYXRhWzUgKyBybGVuXTtcbiAgLy8gU2hvcnQgbGVuZ3RoIG5vdGF0aW9uXG4gIGlmIChzbGVuID49IDB4ODApXG4gICAgcmV0dXJuIGZhbHNlO1xuICBpZiAoNCArIHJsZW4gKyAyICsgc2xlbiA+IGRhdGEubGVuZ3RoKVxuICAgIHJldHVybiBmYWxzZTtcblxuICB0aGlzLnIgPSBuZXcgYm4oZGF0YS5zbGljZSg0LCA0ICsgcmxlbikpO1xuICB0aGlzLnMgPSBuZXcgYm4oZGF0YS5zbGljZSg0ICsgcmxlbiArIDIsIDQgKyBybGVuICsgMiArIHNsZW4pKTtcbiAgdGhpcy5yZWNvdmVyeVBhcmFtID0gbnVsbDtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cblNpZ25hdHVyZS5wcm90b3R5cGUudG9ERVIgPSBmdW5jdGlvbiB0b0RFUihlbmMpIHtcbiAgdmFyIHIgPSB0aGlzLnIudG9BcnJheSgpO1xuICB2YXIgcyA9IHRoaXMucy50b0FycmF5KCk7XG5cbiAgLy8gUGFkIHZhbHVlc1xuICBpZiAoclswXSAmIDB4ODApXG4gICAgciA9IFsgMCBdLmNvbmNhdChyKTtcbiAgLy8gUGFkIHZhbHVlc1xuICBpZiAoc1swXSAmIDB4ODApXG4gICAgcyA9IFsgMCBdLmNvbmNhdChzKTtcblxuICB2YXIgdG90YWwgPSByLmxlbmd0aCArIHMubGVuZ3RoICsgNDtcbiAgdmFyIHJlcyA9IFsgMHgzMCwgdG90YWwsIDB4MDIsIHIubGVuZ3RoIF07XG4gIHJlcyA9IHJlcy5jb25jYXQociwgWyAweDAyLCBzLmxlbmd0aCBdLCBzKTtcbiAgcmV0dXJuIHV0aWxzLmVuY29kZShyZXMsIGVuYyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYm4gPSByZXF1aXJlKCdibi5qcycpO1xuXG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCcuLi8uLi9lbGxpcHRpYycpO1xudmFyIHV0aWxzID0gZWxsaXB0aWMudXRpbHM7XG5cbmZ1bmN0aW9uIEtleVBhaXIoZWMsIG9wdGlvbnMpIHtcbiAgdGhpcy5lYyA9IGVjO1xuICB0aGlzLnByaXYgPSBudWxsO1xuICB0aGlzLnB1YiA9IG51bGw7XG5cbiAgLy8gS2V5UGFpcihlYywgeyBwcml2OiAuLi4sIHB1YjogLi4uIH0pXG4gIGlmIChvcHRpb25zLnByaXYpXG4gICAgdGhpcy5faW1wb3J0UHJpdmF0ZShvcHRpb25zLnByaXYsIG9wdGlvbnMucHJpdkVuYyk7XG4gIGlmIChvcHRpb25zLnB1YilcbiAgICB0aGlzLl9pbXBvcnRQdWJsaWMob3B0aW9ucy5wdWIsIG9wdGlvbnMucHViRW5jKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gS2V5UGFpcjtcblxuS2V5UGFpci5mcm9tUHVibGljID0gZnVuY3Rpb24gZnJvbVB1YmxpYyhlYywgcHViLCBlbmMpIHtcbiAgaWYgKHB1YiBpbnN0YW5jZW9mIEtleVBhaXIpXG4gICAgcmV0dXJuIHB1YjtcblxuICByZXR1cm4gbmV3IEtleVBhaXIoZWMsIHtcbiAgICBwdWI6IHB1YixcbiAgICBwdWJFbmM6IGVuY1xuICB9KTtcbn07XG5cbktleVBhaXIuZnJvbVByaXZhdGUgPSBmdW5jdGlvbiBmcm9tUHJpdmF0ZShlYywgcHJpdiwgZW5jKSB7XG4gIGlmIChwcml2IGluc3RhbmNlb2YgS2V5UGFpcilcbiAgICByZXR1cm4gcHJpdjtcblxuICByZXR1cm4gbmV3IEtleVBhaXIoZWMsIHtcbiAgICBwcml2OiBwcml2LFxuICAgIHByaXZFbmM6IGVuY1xuICB9KTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUoKSB7XG4gIHZhciBwdWIgPSB0aGlzLmdldFB1YmxpYygpO1xuXG4gIGlmIChwdWIuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB7IHJlc3VsdDogZmFsc2UsIHJlYXNvbjogJ0ludmFsaWQgcHVibGljIGtleScgfTtcbiAgaWYgKCFwdWIudmFsaWRhdGUoKSlcbiAgICByZXR1cm4geyByZXN1bHQ6IGZhbHNlLCByZWFzb246ICdQdWJsaWMga2V5IGlzIG5vdCBhIHBvaW50JyB9O1xuICBpZiAoIXB1Yi5tdWwodGhpcy5lYy5jdXJ2ZS5uKS5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHsgcmVzdWx0OiBmYWxzZSwgcmVhc29uOiAnUHVibGljIGtleSAqIE4gIT0gTycgfTtcblxuICByZXR1cm4geyByZXN1bHQ6IHRydWUsIHJlYXNvbjogbnVsbCB9O1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuZ2V0UHVibGljID0gZnVuY3Rpb24gZ2V0UHVibGljKGNvbXBhY3QsIGVuYykge1xuICBpZiAoIXRoaXMucHViKVxuICAgIHRoaXMucHViID0gdGhpcy5lYy5nLm11bCh0aGlzLnByaXYpO1xuXG4gIC8vIGNvbXBhY3QgaXMgb3B0aW9uYWwgYXJndW1lbnRcbiAgaWYgKHR5cGVvZiBjb21wYWN0ID09PSAnc3RyaW5nJykge1xuICAgIGVuYyA9IGNvbXBhY3Q7XG4gICAgY29tcGFjdCA9IG51bGw7XG4gIH1cblxuICBpZiAoIWVuYylcbiAgICByZXR1cm4gdGhpcy5wdWI7XG5cbiAgdmFyIGxlbiA9IHRoaXMuZWMuY3VydmUucC5ieXRlTGVuZ3RoKCk7XG4gIHZhciB4ID0gdGhpcy5wdWIuZ2V0WCgpLnRvQXJyYXkoKTtcblxuICBmb3IgKHZhciBpID0geC5sZW5ndGg7IGkgPCBsZW47IGkrKylcbiAgICB4LnVuc2hpZnQoMCk7XG5cbiAgdmFyIHJlcztcbiAgaWYgKHRoaXMuZWMuY3VydmUudHlwZSAhPT0gJ21vbnQnKSB7XG4gICAgaWYgKGNvbXBhY3QpIHtcbiAgICAgIHJlcyA9IFsgdGhpcy5wdWIuZ2V0WSgpLmlzRXZlbigpID8gMHgwMiA6IDB4MDMgXS5jb25jYXQoeCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB5ID0gdGhpcy5wdWIuZ2V0WSgpLnRvQXJyYXkoKTtcbiAgICAgIGZvciAodmFyIGkgPSB5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKVxuICAgICAgICB5LnVuc2hpZnQoMCk7XG4gICAgICB2YXIgcmVzID0gWyAweDA0IF0uY29uY2F0KHgsIHkpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXMgPSB4O1xuICB9XG5cbiAgcmV0dXJuIHV0aWxzLmVuY29kZShyZXMsIGVuYyk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5nZXRQcml2YXRlID0gZnVuY3Rpb24gZ2V0UHJpdmF0ZShlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHRoaXMucHJpdi50b1N0cmluZygxNiwgMik7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5wcml2O1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuX2ltcG9ydFByaXZhdGUgPSBmdW5jdGlvbiBfaW1wb3J0UHJpdmF0ZShrZXksIGVuYykge1xuICB0aGlzLnByaXYgPSBuZXcgYm4oa2V5LCBlbmMgfHwgMTYpO1xuXG4gIC8vIEVuc3VyZSB0aGF0IHRoZSBwcml2IHdvbid0IGJlIGJpZ2dlciB0aGFuIG4sIG90aGVyd2lzZSB3ZSBtYXkgZmFpbFxuICAvLyBpbiBmaXhlZCBtdWx0aXBsaWNhdGlvbiBtZXRob2RcbiAgdGhpcy5wcml2ID0gdGhpcy5wcml2Lm1vZCh0aGlzLmVjLmN1cnZlLm4pO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuX2ltcG9ydFB1YmxpYyA9IGZ1bmN0aW9uIF9pbXBvcnRQdWJsaWMoa2V5LCBlbmMpIHtcbiAgaWYgKGtleS54IHx8IGtleS55KSB7XG4gICAgdGhpcy5wdWIgPSB0aGlzLmVjLmN1cnZlLnBvaW50KGtleS54LCBrZXkueSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAga2V5ID0gdXRpbHMudG9BcnJheShrZXksIGVuYyk7XG4gIGlmICh0aGlzLmVjLmN1cnZlLnR5cGUgIT09ICdtb250JylcbiAgICByZXR1cm4gdGhpcy5faW1wb3J0UHVibGljU2hvcnQoa2V5KTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLl9pbXBvcnRQdWJsaWNNb250KGtleSk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5faW1wb3J0UHVibGljU2hvcnQgPSBmdW5jdGlvbiBfaW1wb3J0UHVibGljU2hvcnQoa2V5KSB7XG4gIHZhciBsZW4gPSB0aGlzLmVjLmN1cnZlLnAuYnl0ZUxlbmd0aCgpO1xuICBpZiAoa2V5WzBdID09PSAweDA0ICYmIGtleS5sZW5ndGggLSAxID09PSAyICogbGVuKSB7XG4gICAgdGhpcy5wdWIgPSB0aGlzLmVjLmN1cnZlLnBvaW50KFxuICAgICAga2V5LnNsaWNlKDEsIDEgKyBsZW4pLFxuICAgICAga2V5LnNsaWNlKDEgKyBsZW4sIDEgKyAyICogbGVuKSk7XG4gIH0gZWxzZSBpZiAoKGtleVswXSA9PT0gMHgwMiB8fCBrZXlbMF0gPT09IDB4MDMpICYmIGtleS5sZW5ndGggLSAxID09PSBsZW4pIHtcbiAgICB0aGlzLnB1YiA9IHRoaXMuZWMuY3VydmUucG9pbnRGcm9tWChrZXlbMF0gPT09IDB4MDMsIGtleS5zbGljZSgxLCAxICsgbGVuKSk7XG4gIH1cbn07XG5cbktleVBhaXIucHJvdG90eXBlLl9pbXBvcnRQdWJsaWNNb250ID0gZnVuY3Rpb24gX2ltcG9ydFB1YmxpY01vbnQoa2V5KSB7XG4gIHRoaXMucHViID0gdGhpcy5lYy5jdXJ2ZS5wb2ludChrZXksIDEpO1xufTtcblxuLy8gRUNESFxuS2V5UGFpci5wcm90b3R5cGUuZGVyaXZlID0gZnVuY3Rpb24gZGVyaXZlKHB1Yikge1xuICByZXR1cm4gcHViLm11bCh0aGlzLnByaXYpLmdldFgoKTtcbn07XG5cbi8vIEVDRFNBXG5LZXlQYWlyLnByb3RvdHlwZS5zaWduID0gZnVuY3Rpb24gc2lnbihtc2cpIHtcbiAgcmV0dXJuIHRoaXMuZWMuc2lnbihtc2csIHRoaXMpO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5KG1zZywgc2lnbmF0dXJlKSB7XG4gIHJldHVybiB0aGlzLmVjLnZlcmlmeShtc2csIHNpZ25hdHVyZSwgdGhpcyk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgcmV0dXJuICc8S2V5IHByaXY6ICcgKyAodGhpcy5wcml2ICYmIHRoaXMucHJpdi50b1N0cmluZygxNiwgMikpICtcbiAgICAgICAgICcgcHViOiAnICsgKHRoaXMucHViICYmIHRoaXMucHViLmluc3BlY3QoKSkgKyAnID4nO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGN1cnZlcyA9IGV4cG9ydHM7XG5cbnZhciBoYXNoID0gcmVxdWlyZSgnaGFzaC5qcycpO1xudmFyIGVsbGlwdGljID0gcmVxdWlyZSgnLi4vZWxsaXB0aWMnKTtcblxudmFyIGFzc2VydCA9IGVsbGlwdGljLnV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gUHJlc2V0Q3VydmUob3B0aW9ucykge1xuICBpZiAob3B0aW9ucy50eXBlID09PSAnc2hvcnQnKVxuICAgIHRoaXMuY3VydmUgPSBuZXcgZWxsaXB0aWMuY3VydmUuc2hvcnQob3B0aW9ucyk7XG4gIGVsc2UgaWYgKG9wdGlvbnMudHlwZSA9PT0gJ2Vkd2FyZHMnKVxuICAgIHRoaXMuY3VydmUgPSBuZXcgZWxsaXB0aWMuY3VydmUuZWR3YXJkcyhvcHRpb25zKTtcbiAgZWxzZVxuICAgIHRoaXMuY3VydmUgPSBuZXcgZWxsaXB0aWMuY3VydmUubW9udChvcHRpb25zKTtcbiAgdGhpcy5nID0gdGhpcy5jdXJ2ZS5nO1xuICB0aGlzLm4gPSB0aGlzLmN1cnZlLm47XG4gIHRoaXMuaGFzaCA9IG9wdGlvbnMuaGFzaDtcblxuICBhc3NlcnQodGhpcy5nLnZhbGlkYXRlKCksICdJbnZhbGlkIGN1cnZlJyk7XG4gIGFzc2VydCh0aGlzLmcubXVsKHRoaXMubikuaXNJbmZpbml0eSgpLCAnSW52YWxpZCBjdXJ2ZSwgRypOICE9IE8nKTtcbn1cbmN1cnZlcy5QcmVzZXRDdXJ2ZSA9IFByZXNldEN1cnZlO1xuXG5mdW5jdGlvbiBkZWZpbmVDdXJ2ZShuYW1lLCBvcHRpb25zKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdXJ2ZXMsIG5hbWUsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGN1cnZlID0gbmV3IFByZXNldEN1cnZlKG9wdGlvbnMpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN1cnZlcywgbmFtZSwge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiBjdXJ2ZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gY3VydmU7XG4gICAgfVxuICB9KTtcbn1cblxuZGVmaW5lQ3VydmUoJ3AxOTInLCB7XG4gIHR5cGU6ICdzaG9ydCcsXG4gIHByaW1lOiAncDE5MicsXG4gIHA6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmZicsXG4gIGE6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmYycsXG4gIGI6ICc2NDIxMDUxOSBlNTljODBlNyAwZmE3ZTlhYiA3MjI0MzA0OSBmZWI4ZGVlYyBjMTQ2YjliMScsXG4gIG46ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiA5OWRlZjgzNiAxNDZiYzliMSBiNGQyMjgzMScsXG4gIGhhc2g6IGhhc2guc2hhMjU2LFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICcxODhkYTgwZSBiMDMwOTBmNiA3Y2JmMjBlYiA0M2ExODgwMCBmNGZmMGFmZCA4MmZmMTAxMicsXG4gICAgJzA3MTkyYjk1IGZmYzhkYTc4IDYzMTAxMWVkIDZiMjRjZGQ1IDczZjk3N2ExIDFlNzk0ODExJ1xuICBdXG59KTtcblxuZGVmaW5lQ3VydmUoJ3AyMjQnLCB7XG4gIHR5cGU6ICdzaG9ydCcsXG4gIHByaW1lOiAncDIyNCcsXG4gIHA6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMScsXG4gIGE6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZScsXG4gIGI6ICdiNDA1MGE4NSAwYzA0YjNhYiBmNTQxMzI1NiA1MDQ0YjBiNyBkN2JmZDhiYSAyNzBiMzk0MyAyMzU1ZmZiNCcsXG4gIG46ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmMTZhMiBlMGI4ZjAzZSAxM2RkMjk0NSA1YzVjMmEzZCcsXG4gIGhhc2g6IGhhc2guc2hhMjU2LFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICdiNzBlMGNiZCA2YmI0YmY3ZiAzMjEzOTBiOSA0YTAzYzFkMyA1NmMyMTEyMiAzNDMyODBkNiAxMTVjMWQyMScsXG4gICAgJ2JkMzc2Mzg4IGI1ZjcyM2ZiIDRjMjJkZmU2IGNkNDM3NWEwIDVhMDc0NzY0IDQ0ZDU4MTk5IDg1MDA3ZTM0J1xuICBdXG59KTtcblxuZGVmaW5lQ3VydmUoJ3AyNTYnLCB7XG4gIHR5cGU6ICdzaG9ydCcsXG4gIHByaW1lOiBudWxsLFxuICBwOiAnZmZmZmZmZmYgMDAwMDAwMDEgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDAgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYnLFxuICBhOiAnZmZmZmZmZmYgMDAwMDAwMDEgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDAgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmMnLFxuICBiOiAnNWFjNjM1ZDggYWEzYTkzZTcgYjNlYmJkNTUgNzY5ODg2YmMgNjUxZDA2YjAgY2M1M2IwZjYgM2JjZTNjM2UgMjdkMjYwNGInLFxuICBuOiAnZmZmZmZmZmYgMDAwMDAwMDAgZmZmZmZmZmYgZmZmZmZmZmYgYmNlNmZhYWQgYTcxNzllODQgZjNiOWNhYzIgZmM2MzI1NTEnLFxuICBoYXNoOiBoYXNoLnNoYTI1NixcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnNmIxN2QxZjIgZTEyYzQyNDcgZjhiY2U2ZTUgNjNhNDQwZjIgNzcwMzdkODEgMmRlYjMzYTAgZjRhMTM5NDUgZDg5OGMyOTYnLFxuICAgICc0ZmUzNDJlMiBmZTFhN2Y5YiA4ZWU3ZWI0YSA3YzBmOWUxNiAyYmNlMzM1NyA2YjMxNWVjZSBjYmI2NDA2OCAzN2JmNTFmNSdcbiAgXVxufSk7XG5cbmRlZmluZUN1cnZlKCdjdXJ2ZTI1NTE5Jywge1xuICB0eXBlOiAnbW9udCcsXG4gIHByaW1lOiAncDI1NTE5JyxcbiAgcDogJzdmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZWQnLFxuICBhOiAnNzZkMDYnLFxuICBiOiAnMCcsXG4gIG46ICcxMDAwMDAwMDAwMDAwMDAwIDAwMDAwMDAwMDAwMDAwMDAgMTRkZWY5ZGVhMmY3OWNkNiA1ODEyNjMxYTVjZjVkM2VkJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzknXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgnZWQyNTUxOScsIHtcbiAgdHlwZTogJ2Vkd2FyZHMnLFxuICBwcmltZTogJ3AyNTUxOScsXG4gIHA6ICc3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkJyxcbiAgYTogJy0xJyxcbiAgYzogJzEnLFxuICAvLyAtMTIxNjY1ICogKDEyMTY2Nl4oLTEpKSAobW9kIFApXG4gIGQ6ICc1MjAzNmNlZTJiNmZmZTczIDhjYzc0MDc5Nzc3OWU4OTggMDA3MDBhNGQ0MTQxZDhhYiA3NWViNGRjYTEzNTk3OGEzJyxcbiAgbjogJzEwMDAwMDAwMDAwMDAwMDAgMDAwMDAwMDAwMDAwMDAwMCAxNGRlZjlkZWEyZjc5Y2Q2IDU4MTI2MzFhNWNmNWQzZWQnLFxuICBoYXNoOiBoYXNoLnNoYTI1NixcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnMjE2OTM2ZDNjZDZlNTNmZWMwYTRlMjMxZmRkNmRjNWM2OTJjYzc2MDk1MjVhN2IyYzk1NjJkNjA4ZjI1ZDUxYScsXG5cbiAgICAvLyA0LzVcbiAgICAnNjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY1OCdcbiAgXVxufSk7XG5cbnZhciBwcmU7XG50cnkge1xuICBwcmUgPSByZXF1aXJlKCcuL3ByZWNvbXB1dGVkL3NlY3AyNTZrMScpO1xufSBjYXRjaCAoZSkge1xuICBwcmUgPSB1bmRlZmluZWQ7XG59XG5cbmRlZmluZUN1cnZlKCdzZWNwMjU2azEnLCB7XG4gIHR5cGU6ICdzaG9ydCcsXG4gIHByaW1lOiAnazI1NicsXG4gIHA6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmMyZicsXG4gIGE6ICcwJyxcbiAgYjogJzcnLFxuICBuOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgYmFhZWRjZTYgYWY0OGEwM2IgYmZkMjVlOGMgZDAzNjQxNDEnLFxuICBoOiAnMScsXG4gIGhhc2g6IGhhc2guc2hhMjU2LFxuXG4gIC8vIFByZWNvbXB1dGVkIGVuZG9tb3JwaGlzbVxuICBiZXRhOiAnN2FlOTZhMmI2NTdjMDcxMDZlNjQ0NzllYWMzNDM0ZTk5Y2YwNDk3NTEyZjU4OTk1YzEzOTZjMjg3MTk1MDFlZScsXG4gIGxhbWJkYTogJzUzNjNhZDRjYzA1YzMwZTBhNTI2MWMwMjg4MTI2NDVhMTIyZTIyZWEyMDgxNjY3OGRmMDI5NjdjMWIyM2JkNzInLFxuICBiYXNpczogW1xuICAgIHtcbiAgICAgIGE6ICczMDg2ZDIyMWE3ZDQ2YmNkZTg2YzkwZTQ5Mjg0ZWIxNScsXG4gICAgICBiOiAnLWU0NDM3ZWQ2MDEwZTg4Mjg2ZjU0N2ZhOTBhYmZlNGMzJ1xuICAgIH0sXG4gICAge1xuICAgICAgYTogJzExNGNhNTBmN2E4ZTJmM2Y2NTdjMTEwOGQ5ZDQ0Y2ZkOCcsXG4gICAgICBiOiAnMzA4NmQyMjFhN2Q0NmJjZGU4NmM5MGU0OTI4NGViMTUnXG4gICAgfVxuICBdLFxuXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzc5YmU2NjdlZjlkY2JiYWM1NWEwNjI5NWNlODcwYjA3MDI5YmZjZGIyZGNlMjhkOTU5ZjI4MTViMTZmODE3OTgnLFxuICAgICc0ODNhZGE3NzI2YTNjNDY1NWRhNGZiZmMwZTExMDhhOGZkMTdiNDQ4YTY4NTU0MTk5YzQ3ZDA4ZmZiMTBkNGI4JyxcbiAgICBwcmVcbiAgXVxufSk7XG4iLCJ2YXIgaGFzaCA9IGV4cG9ydHM7XG5cbmhhc2gudXRpbHMgPSByZXF1aXJlKCcuL2hhc2gvdXRpbHMnKTtcbmhhc2guY29tbW9uID0gcmVxdWlyZSgnLi9oYXNoL2NvbW1vbicpO1xuaGFzaC5zaGEgPSByZXF1aXJlKCcuL2hhc2gvc2hhJyk7XG5oYXNoLnJpcGVtZCA9IHJlcXVpcmUoJy4vaGFzaC9yaXBlbWQnKTtcbmhhc2guaG1hYyA9IHJlcXVpcmUoJy4vaGFzaC9obWFjJyk7XG5cbi8vIFByb3h5IGhhc2ggZnVuY3Rpb25zIHRvIHRoZSBtYWluIG9iamVjdFxuaGFzaC5zaGExID0gaGFzaC5zaGEuc2hhMTtcbmhhc2guc2hhMjU2ID0gaGFzaC5zaGEuc2hhMjU2O1xuaGFzaC5zaGEyMjQgPSBoYXNoLnNoYS5zaGEyMjQ7XG5oYXNoLnNoYTM4NCA9IGhhc2guc2hhLnNoYTM4NDtcbmhhc2guc2hhNTEyID0gaGFzaC5zaGEuc2hhNTEyO1xuaGFzaC5yaXBlbWQxNjAgPSBoYXNoLnJpcGVtZC5yaXBlbWQxNjA7XG4iLCJ2YXIgdXRpbHMgPSBleHBvcnRzO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxuZnVuY3Rpb24gdG9BcnJheShtc2csIGVuYykge1xuICBpZiAoQXJyYXkuaXNBcnJheShtc2cpKVxuICAgIHJldHVybiBtc2cuc2xpY2UoKTtcbiAgaWYgKCFtc2cpXG4gICAgcmV0dXJuIFtdO1xuICB2YXIgcmVzID0gW107XG4gIGlmICh0eXBlb2YgbXNnID09PSAnc3RyaW5nJykge1xuICAgIGlmICghZW5jKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgYyA9IG1zZy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB2YXIgaGkgPSBjID4+IDg7XG4gICAgICAgIHZhciBsbyA9IGMgJiAweGZmO1xuICAgICAgICBpZiAoaGkpXG4gICAgICAgICAgcmVzLnB1c2goaGksIGxvKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHJlcy5wdXNoKGxvKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVuYyA9PT0gJ2hleCcpIHtcbiAgICAgIG1zZyA9IG1zZy5yZXBsYWNlKC9bXmEtejAtOV0rL2lnLCAnJyk7XG4gICAgICBpZiAobXNnLmxlbmd0aCAlIDIgIT09IDApXG4gICAgICAgIG1zZyA9ICcwJyArIG1zZztcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSArPSAyKVxuICAgICAgICByZXMucHVzaChwYXJzZUludChtc2dbaV0gKyBtc2dbaSArIDFdLCAxNikpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKylcbiAgICAgIHJlc1tpXSA9IG1zZ1tpXSB8IDA7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbnV0aWxzLnRvQXJyYXkgPSB0b0FycmF5O1xuXG5mdW5jdGlvbiB0b0hleChtc2cpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKylcbiAgICByZXMgKz0gemVybzIobXNnW2ldLnRvU3RyaW5nKDE2KSk7XG4gIHJldHVybiByZXM7XG59XG51dGlscy50b0hleCA9IHRvSGV4O1xuXG5mdW5jdGlvbiBodG9ubCh3KSB7XG4gIHZhciByZXMgPSAodyA+Pj4gMjQpIHxcbiAgICAgICAgICAgICgodyA+Pj4gOCkgJiAweGZmMDApIHxcbiAgICAgICAgICAgICgodyA8PCA4KSAmIDB4ZmYwMDAwKSB8XG4gICAgICAgICAgICAoKHcgJiAweGZmKSA8PCAyNCk7XG4gIHJldHVybiByZXMgPj4+IDA7XG59XG51dGlscy5odG9ubCA9IGh0b25sO1xuXG5mdW5jdGlvbiB0b0hleDMyKG1zZywgZW5kaWFuKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdyA9IG1zZ1tpXTtcbiAgICBpZiAoZW5kaWFuID09PSAnbGl0dGxlJylcbiAgICAgIHcgPSBodG9ubCh3KTtcbiAgICByZXMgKz0gemVybzgody50b1N0cmluZygxNikpO1xuICB9XG4gIHJldHVybiByZXM7XG59XG51dGlscy50b0hleDMyID0gdG9IZXgzMjtcblxuZnVuY3Rpb24gemVybzIod29yZCkge1xuICBpZiAod29yZC5sZW5ndGggPT09IDEpXG4gICAgcmV0dXJuICcwJyArIHdvcmQ7XG4gIGVsc2VcbiAgICByZXR1cm4gd29yZDtcbn1cbnV0aWxzLnplcm8yID0gemVybzI7XG5cbmZ1bmN0aW9uIHplcm84KHdvcmQpIHtcbiAgaWYgKHdvcmQubGVuZ3RoID09PSA3KVxuICAgIHJldHVybiAnMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gNilcbiAgICByZXR1cm4gJzAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSA1KVxuICAgIHJldHVybiAnMDAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSA0KVxuICAgIHJldHVybiAnMDAwMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gMylcbiAgICByZXR1cm4gJzAwMDAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSAyKVxuICAgIHJldHVybiAnMDAwMDAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSAxKVxuICAgIHJldHVybiAnMDAwMDAwMCcgKyB3b3JkO1xuICBlbHNlXG4gICAgcmV0dXJuIHdvcmQ7XG59XG51dGlscy56ZXJvOCA9IHplcm84O1xuXG5mdW5jdGlvbiBqb2luMzIobXNnLCBzdGFydCwgZW5kLCBlbmRpYW4pIHtcbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0O1xuICBhc3NlcnQobGVuICUgNCA9PT0gMCk7XG4gIHZhciByZXMgPSBuZXcgQXJyYXkobGVuIC8gNCk7XG4gIGZvciAodmFyIGkgPSAwLCBrID0gc3RhcnQ7IGkgPCByZXMubGVuZ3RoOyBpKyssIGsgKz0gNCkge1xuICAgIHZhciB3O1xuICAgIGlmIChlbmRpYW4gPT09ICdiaWcnKVxuICAgICAgdyA9IChtc2dba10gPDwgMjQpIHwgKG1zZ1trICsgMV0gPDwgMTYpIHwgKG1zZ1trICsgMl0gPDwgOCkgfCBtc2dbayArIDNdO1xuICAgIGVsc2VcbiAgICAgIHcgPSAobXNnW2sgKyAzXSA8PCAyNCkgfCAobXNnW2sgKyAyXSA8PCAxNikgfCAobXNnW2sgKyAxXSA8PCA4KSB8IG1zZ1trXTtcbiAgICByZXNbaV0gPSB3ID4+PiAwO1xuICB9XG4gIHJldHVybiByZXM7XG59XG51dGlscy5qb2luMzIgPSBqb2luMzI7XG5cbmZ1bmN0aW9uIHNwbGl0MzIobXNnLCBlbmRpYW4pIHtcbiAgdmFyIHJlcyA9IG5ldyBBcnJheShtc2cubGVuZ3RoICogNCk7XG4gIGZvciAodmFyIGkgPSAwLCBrID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKywgayArPSA0KSB7XG4gICAgdmFyIG0gPSBtc2dbaV07XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2JpZycpIHtcbiAgICAgIHJlc1trXSA9IG0gPj4+IDI0O1xuICAgICAgcmVzW2sgKyAxXSA9IChtID4+PiAxNikgJiAweGZmO1xuICAgICAgcmVzW2sgKyAyXSA9IChtID4+PiA4KSAmIDB4ZmY7XG4gICAgICByZXNbayArIDNdID0gbSAmIDB4ZmY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc1trICsgM10gPSBtID4+PiAyNDtcbiAgICAgIHJlc1trICsgMl0gPSAobSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgIHJlc1trICsgMV0gPSAobSA+Pj4gOCkgJiAweGZmO1xuICAgICAgcmVzW2tdID0gbSAmIDB4ZmY7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59XG51dGlscy5zcGxpdDMyID0gc3BsaXQzMjtcblxuZnVuY3Rpb24gcm90cjMyKHcsIGIpIHtcbiAgcmV0dXJuICh3ID4+PiBiKSB8ICh3IDw8ICgzMiAtIGIpKTtcbn1cbnV0aWxzLnJvdHIzMiA9IHJvdHIzMjtcblxuZnVuY3Rpb24gcm90bDMyKHcsIGIpIHtcbiAgcmV0dXJuICh3IDw8IGIpIHwgKHcgPj4+ICgzMiAtIGIpKTtcbn1cbnV0aWxzLnJvdGwzMiA9IHJvdGwzMjtcblxuZnVuY3Rpb24gc3VtMzIoYSwgYikge1xuICByZXR1cm4gKGEgKyBiKSA+Pj4gMDtcbn1cbnV0aWxzLnN1bTMyID0gc3VtMzI7XG5cbmZ1bmN0aW9uIHN1bTMyXzMoYSwgYiwgYykge1xuICByZXR1cm4gKGEgKyBiICsgYykgPj4+IDA7XG59XG51dGlscy5zdW0zMl8zID0gc3VtMzJfMztcblxuZnVuY3Rpb24gc3VtMzJfNChhLCBiLCBjLCBkKSB7XG4gIHJldHVybiAoYSArIGIgKyBjICsgZCkgPj4+IDA7XG59XG51dGlscy5zdW0zMl80ID0gc3VtMzJfNDtcblxuZnVuY3Rpb24gc3VtMzJfNShhLCBiLCBjLCBkLCBlKSB7XG4gIHJldHVybiAoYSArIGIgKyBjICsgZCArIGUpID4+PiAwO1xufVxudXRpbHMuc3VtMzJfNSA9IHN1bTMyXzU7XG5cbmZ1bmN0aW9uIGFzc2VydChjb25kLCBtc2cpIHtcbiAgaWYgKCFjb25kKVxuICAgIHRocm93IG5ldyBFcnJvcihtc2cgfHwgJ0Fzc2VydGlvbiBmYWlsZWQnKTtcbn1cbnV0aWxzLmFzc2VydCA9IGFzc2VydDtcblxudXRpbHMuaW5oZXJpdHMgPSBpbmhlcml0cztcblxuZnVuY3Rpb24gc3VtNjQoYnVmLCBwb3MsIGFoLCBhbCkge1xuICB2YXIgYmggPSBidWZbcG9zXTtcbiAgdmFyIGJsID0gYnVmW3BvcyArIDFdO1xuXG4gIHZhciBsbyA9IChhbCArIGJsKSA+Pj4gMDtcbiAgdmFyIGhpID0gKGxvIDwgYWwgPyAxIDogMCkgKyBhaCArIGJoO1xuICBidWZbcG9zXSA9IGhpID4+PiAwO1xuICBidWZbcG9zICsgMV0gPSBsbztcbn1cbmV4cG9ydHMuc3VtNjQgPSBzdW02NDtcblxuZnVuY3Rpb24gc3VtNjRfaGkoYWgsIGFsLCBiaCwgYmwpIHtcbiAgdmFyIGxvID0gKGFsICsgYmwpID4+PiAwO1xuICB2YXIgaGkgPSAobG8gPCBhbCA/IDEgOiAwKSArIGFoICsgYmg7XG4gIHJldHVybiBoaSA+Pj4gMDtcbn07XG5leHBvcnRzLnN1bTY0X2hpID0gc3VtNjRfaGk7XG5cbmZ1bmN0aW9uIHN1bTY0X2xvKGFoLCBhbCwgYmgsIGJsKSB7XG4gIHZhciBsbyA9IGFsICsgYmw7XG4gIHJldHVybiBsbyA+Pj4gMDtcbn07XG5leHBvcnRzLnN1bTY0X2xvID0gc3VtNjRfbG87XG5cbmZ1bmN0aW9uIHN1bTY0XzRfaGkoYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCwgZGgsIGRsKSB7XG4gIHZhciBjYXJyeSA9IDA7XG4gIHZhciBsbyA9IGFsO1xuICBsbyA9IChsbyArIGJsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBhbCA/IDEgOiAwO1xuICBsbyA9IChsbyArIGNsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBjbCA/IDEgOiAwO1xuICBsbyA9IChsbyArIGRsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBkbCA/IDEgOiAwO1xuXG4gIHZhciBoaSA9IGFoICsgYmggKyBjaCArIGRoICsgY2Fycnk7XG4gIHJldHVybiBoaSA+Pj4gMDtcbn07XG5leHBvcnRzLnN1bTY0XzRfaGkgPSBzdW02NF80X2hpO1xuXG5mdW5jdGlvbiBzdW02NF80X2xvKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wsIGRoLCBkbCkge1xuICB2YXIgbG8gPSBhbCArIGJsICsgY2wgKyBkbDtcbiAgcmV0dXJuIGxvID4+PiAwO1xufTtcbmV4cG9ydHMuc3VtNjRfNF9sbyA9IHN1bTY0XzRfbG87XG5cbmZ1bmN0aW9uIHN1bTY0XzVfaGkoYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCwgZGgsIGRsLCBlaCwgZWwpIHtcbiAgdmFyIGNhcnJ5ID0gMDtcbiAgdmFyIGxvID0gYWw7XG4gIGxvID0gKGxvICsgYmwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGFsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgY2wpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGNsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgZGwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGRsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgZWwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGVsID8gMSA6IDA7XG5cbiAgdmFyIGhpID0gYWggKyBiaCArIGNoICsgZGggKyBlaCArIGNhcnJ5O1xuICByZXR1cm4gaGkgPj4+IDA7XG59O1xuZXhwb3J0cy5zdW02NF81X2hpID0gc3VtNjRfNV9oaTtcblxuZnVuY3Rpb24gc3VtNjRfNV9sbyhhaCwgYWwsIGJoLCBibCwgY2gsIGNsLCBkaCwgZGwsIGVoLCBlbCkge1xuICB2YXIgbG8gPSBhbCArIGJsICsgY2wgKyBkbCArIGVsO1xuXG4gIHJldHVybiBsbyA+Pj4gMDtcbn07XG5leHBvcnRzLnN1bTY0XzVfbG8gPSBzdW02NF81X2xvO1xuXG5mdW5jdGlvbiByb3RyNjRfaGkoYWgsIGFsLCBudW0pIHtcbiAgdmFyIHIgPSAoYWwgPDwgKDMyIC0gbnVtKSkgfCAoYWggPj4+IG51bSk7XG4gIHJldHVybiByID4+PiAwO1xufTtcbmV4cG9ydHMucm90cjY0X2hpID0gcm90cjY0X2hpO1xuXG5mdW5jdGlvbiByb3RyNjRfbG8oYWgsIGFsLCBudW0pIHtcbiAgdmFyIHIgPSAoYWggPDwgKDMyIC0gbnVtKSkgfCAoYWwgPj4+IG51bSk7XG4gIHJldHVybiByID4+PiAwO1xufTtcbmV4cG9ydHMucm90cjY0X2xvID0gcm90cjY0X2xvO1xuXG5mdW5jdGlvbiBzaHI2NF9oaShhaCwgYWwsIG51bSkge1xuICByZXR1cm4gYWggPj4+IG51bTtcbn07XG5leHBvcnRzLnNocjY0X2hpID0gc2hyNjRfaGk7XG5cbmZ1bmN0aW9uIHNocjY0X2xvKGFoLCBhbCwgbnVtKSB7XG4gIHZhciByID0gKGFoIDw8ICgzMiAtIG51bSkpIHwgKGFsID4+PiBudW0pO1xuICByZXR1cm4gciA+Pj4gMDtcbn07XG5leHBvcnRzLnNocjY0X2xvID0gc2hyNjRfbG87XG4iLCJ2YXIgaGFzaCA9IHJlcXVpcmUoJy4uL2hhc2gnKTtcbnZhciB1dGlscyA9IGhhc2gudXRpbHM7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG52YXIgcm90cjMyID0gdXRpbHMucm90cjMyO1xudmFyIHJvdGwzMiA9IHV0aWxzLnJvdGwzMjtcbnZhciBzdW0zMiA9IHV0aWxzLnN1bTMyO1xudmFyIHN1bTMyXzQgPSB1dGlscy5zdW0zMl80O1xudmFyIHN1bTMyXzUgPSB1dGlscy5zdW0zMl81O1xudmFyIHJvdHI2NF9oaSA9IHV0aWxzLnJvdHI2NF9oaTtcbnZhciByb3RyNjRfbG8gPSB1dGlscy5yb3RyNjRfbG87XG52YXIgc2hyNjRfaGkgPSB1dGlscy5zaHI2NF9oaTtcbnZhciBzaHI2NF9sbyA9IHV0aWxzLnNocjY0X2xvO1xudmFyIHN1bTY0ID0gdXRpbHMuc3VtNjQ7XG52YXIgc3VtNjRfaGkgPSB1dGlscy5zdW02NF9oaTtcbnZhciBzdW02NF9sbyA9IHV0aWxzLnN1bTY0X2xvO1xudmFyIHN1bTY0XzRfaGkgPSB1dGlscy5zdW02NF80X2hpO1xudmFyIHN1bTY0XzRfbG8gPSB1dGlscy5zdW02NF80X2xvO1xudmFyIHN1bTY0XzVfaGkgPSB1dGlscy5zdW02NF81X2hpO1xudmFyIHN1bTY0XzVfbG8gPSB1dGlscy5zdW02NF81X2xvO1xudmFyIEJsb2NrSGFzaCA9IGhhc2guY29tbW9uLkJsb2NrSGFzaDtcblxudmFyIHNoYTI1Nl9LID0gW1xuICAweDQyOGEyZjk4LCAweDcxMzc0NDkxLCAweGI1YzBmYmNmLCAweGU5YjVkYmE1LFxuICAweDM5NTZjMjViLCAweDU5ZjExMWYxLCAweDkyM2Y4MmE0LCAweGFiMWM1ZWQ1LFxuICAweGQ4MDdhYTk4LCAweDEyODM1YjAxLCAweDI0MzE4NWJlLCAweDU1MGM3ZGMzLFxuICAweDcyYmU1ZDc0LCAweDgwZGViMWZlLCAweDliZGMwNmE3LCAweGMxOWJmMTc0LFxuICAweGU0OWI2OWMxLCAweGVmYmU0Nzg2LCAweDBmYzE5ZGM2LCAweDI0MGNhMWNjLFxuICAweDJkZTkyYzZmLCAweDRhNzQ4NGFhLCAweDVjYjBhOWRjLCAweDc2Zjk4OGRhLFxuICAweDk4M2U1MTUyLCAweGE4MzFjNjZkLCAweGIwMDMyN2M4LCAweGJmNTk3ZmM3LFxuICAweGM2ZTAwYmYzLCAweGQ1YTc5MTQ3LCAweDA2Y2E2MzUxLCAweDE0MjkyOTY3LFxuICAweDI3YjcwYTg1LCAweDJlMWIyMTM4LCAweDRkMmM2ZGZjLCAweDUzMzgwZDEzLFxuICAweDY1MGE3MzU0LCAweDc2NmEwYWJiLCAweDgxYzJjOTJlLCAweDkyNzIyYzg1LFxuICAweGEyYmZlOGExLCAweGE4MWE2NjRiLCAweGMyNGI4YjcwLCAweGM3NmM1MWEzLFxuICAweGQxOTJlODE5LCAweGQ2OTkwNjI0LCAweGY0MGUzNTg1LCAweDEwNmFhMDcwLFxuICAweDE5YTRjMTE2LCAweDFlMzc2YzA4LCAweDI3NDg3NzRjLCAweDM0YjBiY2I1LFxuICAweDM5MWMwY2IzLCAweDRlZDhhYTRhLCAweDViOWNjYTRmLCAweDY4MmU2ZmYzLFxuICAweDc0OGY4MmVlLCAweDc4YTU2MzZmLCAweDg0Yzg3ODE0LCAweDhjYzcwMjA4LFxuICAweDkwYmVmZmZhLCAweGE0NTA2Y2ViLCAweGJlZjlhM2Y3LCAweGM2NzE3OGYyXG5dO1xuXG52YXIgc2hhNTEyX0sgPSBbXG4gIDB4NDI4YTJmOTgsIDB4ZDcyOGFlMjIsIDB4NzEzNzQ0OTEsIDB4MjNlZjY1Y2QsXG4gIDB4YjVjMGZiY2YsIDB4ZWM0ZDNiMmYsIDB4ZTliNWRiYTUsIDB4ODE4OWRiYmMsXG4gIDB4Mzk1NmMyNWIsIDB4ZjM0OGI1MzgsIDB4NTlmMTExZjEsIDB4YjYwNWQwMTksXG4gIDB4OTIzZjgyYTQsIDB4YWYxOTRmOWIsIDB4YWIxYzVlZDUsIDB4ZGE2ZDgxMTgsXG4gIDB4ZDgwN2FhOTgsIDB4YTMwMzAyNDIsIDB4MTI4MzViMDEsIDB4NDU3MDZmYmUsXG4gIDB4MjQzMTg1YmUsIDB4NGVlNGIyOGMsIDB4NTUwYzdkYzMsIDB4ZDVmZmI0ZTIsXG4gIDB4NzJiZTVkNzQsIDB4ZjI3Yjg5NmYsIDB4ODBkZWIxZmUsIDB4M2IxNjk2YjEsXG4gIDB4OWJkYzA2YTcsIDB4MjVjNzEyMzUsIDB4YzE5YmYxNzQsIDB4Y2Y2OTI2OTQsXG4gIDB4ZTQ5YjY5YzEsIDB4OWVmMTRhZDIsIDB4ZWZiZTQ3ODYsIDB4Mzg0ZjI1ZTMsXG4gIDB4MGZjMTlkYzYsIDB4OGI4Y2Q1YjUsIDB4MjQwY2ExY2MsIDB4NzdhYzljNjUsXG4gIDB4MmRlOTJjNmYsIDB4NTkyYjAyNzUsIDB4NGE3NDg0YWEsIDB4NmVhNmU0ODMsXG4gIDB4NWNiMGE5ZGMsIDB4YmQ0MWZiZDQsIDB4NzZmOTg4ZGEsIDB4ODMxMTUzYjUsXG4gIDB4OTgzZTUxNTIsIDB4ZWU2NmRmYWIsIDB4YTgzMWM2NmQsIDB4MmRiNDMyMTAsXG4gIDB4YjAwMzI3YzgsIDB4OThmYjIxM2YsIDB4YmY1OTdmYzcsIDB4YmVlZjBlZTQsXG4gIDB4YzZlMDBiZjMsIDB4M2RhODhmYzIsIDB4ZDVhNzkxNDcsIDB4OTMwYWE3MjUsXG4gIDB4MDZjYTYzNTEsIDB4ZTAwMzgyNmYsIDB4MTQyOTI5NjcsIDB4MGEwZTZlNzAsXG4gIDB4MjdiNzBhODUsIDB4NDZkMjJmZmMsIDB4MmUxYjIxMzgsIDB4NWMyNmM5MjYsXG4gIDB4NGQyYzZkZmMsIDB4NWFjNDJhZWQsIDB4NTMzODBkMTMsIDB4OWQ5NWIzZGYsXG4gIDB4NjUwYTczNTQsIDB4OGJhZjYzZGUsIDB4NzY2YTBhYmIsIDB4M2M3N2IyYTgsXG4gIDB4ODFjMmM5MmUsIDB4NDdlZGFlZTYsIDB4OTI3MjJjODUsIDB4MTQ4MjM1M2IsXG4gIDB4YTJiZmU4YTEsIDB4NGNmMTAzNjQsIDB4YTgxYTY2NGIsIDB4YmM0MjMwMDEsXG4gIDB4YzI0YjhiNzAsIDB4ZDBmODk3OTEsIDB4Yzc2YzUxYTMsIDB4MDY1NGJlMzAsXG4gIDB4ZDE5MmU4MTksIDB4ZDZlZjUyMTgsIDB4ZDY5OTA2MjQsIDB4NTU2NWE5MTAsXG4gIDB4ZjQwZTM1ODUsIDB4NTc3MTIwMmEsIDB4MTA2YWEwNzAsIDB4MzJiYmQxYjgsXG4gIDB4MTlhNGMxMTYsIDB4YjhkMmQwYzgsIDB4MWUzNzZjMDgsIDB4NTE0MWFiNTMsXG4gIDB4Mjc0ODc3NGMsIDB4ZGY4ZWViOTksIDB4MzRiMGJjYjUsIDB4ZTE5YjQ4YTgsXG4gIDB4MzkxYzBjYjMsIDB4YzVjOTVhNjMsIDB4NGVkOGFhNGEsIDB4ZTM0MThhY2IsXG4gIDB4NWI5Y2NhNGYsIDB4Nzc2M2UzNzMsIDB4NjgyZTZmZjMsIDB4ZDZiMmI4YTMsXG4gIDB4NzQ4ZjgyZWUsIDB4NWRlZmIyZmMsIDB4NzhhNTYzNmYsIDB4NDMxNzJmNjAsXG4gIDB4ODRjODc4MTQsIDB4YTFmMGFiNzIsIDB4OGNjNzAyMDgsIDB4MWE2NDM5ZWMsXG4gIDB4OTBiZWZmZmEsIDB4MjM2MzFlMjgsIDB4YTQ1MDZjZWIsIDB4ZGU4MmJkZTksXG4gIDB4YmVmOWEzZjcsIDB4YjJjNjc5MTUsIDB4YzY3MTc4ZjIsIDB4ZTM3MjUzMmIsXG4gIDB4Y2EyNzNlY2UsIDB4ZWEyNjYxOWMsIDB4ZDE4NmI4YzcsIDB4MjFjMGMyMDcsXG4gIDB4ZWFkYTdkZDYsIDB4Y2RlMGViMWUsIDB4ZjU3ZDRmN2YsIDB4ZWU2ZWQxNzgsXG4gIDB4MDZmMDY3YWEsIDB4NzIxNzZmYmEsIDB4MGE2MzdkYzUsIDB4YTJjODk4YTYsXG4gIDB4MTEzZjk4MDQsIDB4YmVmOTBkYWUsIDB4MWI3MTBiMzUsIDB4MTMxYzQ3MWIsXG4gIDB4MjhkYjc3ZjUsIDB4MjMwNDdkODQsIDB4MzJjYWFiN2IsIDB4NDBjNzI0OTMsXG4gIDB4M2M5ZWJlMGEsIDB4MTVjOWJlYmMsIDB4NDMxZDY3YzQsIDB4OWMxMDBkNGMsXG4gIDB4NGNjNWQ0YmUsIDB4Y2IzZTQyYjYsIDB4NTk3ZjI5OWMsIDB4ZmM2NTdlMmEsXG4gIDB4NWZjYjZmYWIsIDB4M2FkNmZhZWMsIDB4NmM0NDE5OGMsIDB4NGE0NzU4MTdcbl07XG5cbnZhciBzaGExX0sgPSBbXG4gIDB4NUE4Mjc5OTksIDB4NkVEOUVCQTEsXG4gIDB4OEYxQkJDREMsIDB4Q0E2MkMxRDZcbl07XG5cbmZ1bmN0aW9uIFNIQTI1NigpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTI1NikpXG4gICAgcmV0dXJuIG5ldyBTSEEyNTYoKTtcblxuICBCbG9ja0hhc2guY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gWyAweDZhMDllNjY3LCAweGJiNjdhZTg1LCAweDNjNmVmMzcyLCAweGE1NGZmNTNhLFxuICAgICAgICAgICAgIDB4NTEwZTUyN2YsIDB4OWIwNTY4OGMsIDB4MWY4M2Q5YWIsIDB4NWJlMGNkMTkgXTtcbiAgdGhpcy5rID0gc2hhMjU2X0s7XG4gIHRoaXMuVyA9IG5ldyBBcnJheSg2NCk7XG59XG51dGlscy5pbmhlcml0cyhTSEEyNTYsIEJsb2NrSGFzaCk7XG5leHBvcnRzLnNoYTI1NiA9IFNIQTI1NjtcblxuU0hBMjU2LmJsb2NrU2l6ZSA9IDUxMjtcblNIQTI1Ni5vdXRTaXplID0gMjU2O1xuU0hBMjU2LmhtYWNTdHJlbmd0aCA9IDE5MjtcblNIQTI1Ni5wYWRMZW5ndGggPSA2NDtcblxuU0hBMjU2LnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShtc2csIHN0YXJ0KSB7XG4gIHZhciBXID0gdGhpcy5XO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKylcbiAgICBXW2ldID0gbXNnW3N0YXJ0ICsgaV07XG4gIGZvciAoOyBpIDwgVy5sZW5ndGg7IGkrKylcbiAgICBXW2ldID0gc3VtMzJfNChnMV8yNTYoV1tpIC0gMl0pLCBXW2kgLSA3XSwgZzBfMjU2KFdbaSAtIDE1XSksIFdbaSAtIDE2XSk7XG5cbiAgdmFyIGEgPSB0aGlzLmhbMF07XG4gIHZhciBiID0gdGhpcy5oWzFdO1xuICB2YXIgYyA9IHRoaXMuaFsyXTtcbiAgdmFyIGQgPSB0aGlzLmhbM107XG4gIHZhciBlID0gdGhpcy5oWzRdO1xuICB2YXIgZiA9IHRoaXMuaFs1XTtcbiAgdmFyIGcgPSB0aGlzLmhbNl07XG4gIHZhciBoID0gdGhpcy5oWzddO1xuXG4gIGFzc2VydCh0aGlzLmsubGVuZ3RoID09PSBXLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgVy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBUMSA9IHN1bTMyXzUoaCwgczFfMjU2KGUpLCBjaDMyKGUsIGYsIGcpLCB0aGlzLmtbaV0sIFdbaV0pO1xuICAgIHZhciBUMiA9IHN1bTMyKHMwXzI1NihhKSwgbWFqMzIoYSwgYiwgYykpO1xuICAgIGggPSBnO1xuICAgIGcgPSBmO1xuICAgIGYgPSBlO1xuICAgIGUgPSBzdW0zMihkLCBUMSk7XG4gICAgZCA9IGM7XG4gICAgYyA9IGI7XG4gICAgYiA9IGE7XG4gICAgYSA9IHN1bTMyKFQxLCBUMik7XG4gIH1cblxuICB0aGlzLmhbMF0gPSBzdW0zMih0aGlzLmhbMF0sIGEpO1xuICB0aGlzLmhbMV0gPSBzdW0zMih0aGlzLmhbMV0sIGIpO1xuICB0aGlzLmhbMl0gPSBzdW0zMih0aGlzLmhbMl0sIGMpO1xuICB0aGlzLmhbM10gPSBzdW0zMih0aGlzLmhbM10sIGQpO1xuICB0aGlzLmhbNF0gPSBzdW0zMih0aGlzLmhbNF0sIGUpO1xuICB0aGlzLmhbNV0gPSBzdW0zMih0aGlzLmhbNV0sIGYpO1xuICB0aGlzLmhbNl0gPSBzdW0zMih0aGlzLmhbNl0sIGcpO1xuICB0aGlzLmhbN10gPSBzdW0zMih0aGlzLmhbN10sIGgpO1xufTtcblxuU0hBMjU2LnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmgsICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCwgJ2JpZycpO1xufTtcblxuZnVuY3Rpb24gU0hBMjI0KCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0hBMjI0KSlcbiAgICByZXR1cm4gbmV3IFNIQTIyNCgpO1xuXG4gIFNIQTI1Ni5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbIDB4YzEwNTllZDgsIDB4MzY3Y2Q1MDcsIDB4MzA3MGRkMTcsIDB4ZjcwZTU5MzksXG4gICAgICAgICAgICAgMHhmZmMwMGIzMSwgMHg2ODU4MTUxMSwgMHg2NGY5OGZhNywgMHhiZWZhNGZhNCBdO1xufVxudXRpbHMuaW5oZXJpdHMoU0hBMjI0LCBTSEEyNTYpO1xuZXhwb3J0cy5zaGEyMjQgPSBTSEEyMjQ7XG5cblNIQTIyNC5ibG9ja1NpemUgPSA1MTI7XG5TSEEyMjQub3V0U2l6ZSA9IDIyNDtcblNIQTIyNC5obWFjU3RyZW5ndGggPSAxOTI7XG5TSEEyMjQucGFkTGVuZ3RoID0gNjQ7XG5cblNIQTIyNC5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgLy8gSnVzdCB0cnVuY2F0ZSBvdXRwdXRcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLnNsaWNlKDAsIDcpLCAnYmlnJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmguc2xpY2UoMCwgNyksICdiaWcnKTtcbn07XG5cbmZ1bmN0aW9uIFNIQTUxMigpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTUxMikpXG4gICAgcmV0dXJuIG5ldyBTSEE1MTIoKTtcblxuICBCbG9ja0hhc2guY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gWyAweDZhMDllNjY3LCAweGYzYmNjOTA4LFxuICAgICAgICAgICAgIDB4YmI2N2FlODUsIDB4ODRjYWE3M2IsXG4gICAgICAgICAgICAgMHgzYzZlZjM3MiwgMHhmZTk0ZjgyYixcbiAgICAgICAgICAgICAweGE1NGZmNTNhLCAweDVmMWQzNmYxLFxuICAgICAgICAgICAgIDB4NTEwZTUyN2YsIDB4YWRlNjgyZDEsXG4gICAgICAgICAgICAgMHg5YjA1Njg4YywgMHgyYjNlNmMxZixcbiAgICAgICAgICAgICAweDFmODNkOWFiLCAweGZiNDFiZDZiLFxuICAgICAgICAgICAgIDB4NWJlMGNkMTksIDB4MTM3ZTIxNzkgXTtcbiAgdGhpcy5rID0gc2hhNTEyX0s7XG4gIHRoaXMuVyA9IG5ldyBBcnJheSgxNjApO1xufVxudXRpbHMuaW5oZXJpdHMoU0hBNTEyLCBCbG9ja0hhc2gpO1xuZXhwb3J0cy5zaGE1MTIgPSBTSEE1MTI7XG5cblNIQTUxMi5ibG9ja1NpemUgPSAxMDI0O1xuU0hBNTEyLm91dFNpemUgPSA1MTI7XG5TSEE1MTIuaG1hY1N0cmVuZ3RoID0gMTkyO1xuU0hBNTEyLnBhZExlbmd0aCA9IDEyODtcblxuU0hBNTEyLnByb3RvdHlwZS5fcHJlcGFyZUJsb2NrID0gZnVuY3Rpb24gX3ByZXBhcmVCbG9jayhtc2csIHN0YXJ0KSB7XG4gIHZhciBXID0gdGhpcy5XO1xuXG4gIC8vIDMyIHggMzJiaXQgd29yZHNcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAzMjsgaSsrKVxuICAgIFdbaV0gPSBtc2dbc3RhcnQgKyBpXTtcbiAgZm9yICg7IGkgPCBXLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIGMwX2hpID0gZzFfNTEyX2hpKFdbaSAtIDRdLCBXW2kgLSAzXSk7ICAvLyBpIC0gMlxuICAgIHZhciBjMF9sbyA9IGcxXzUxMl9sbyhXW2kgLSA0XSwgV1tpIC0gM10pO1xuICAgIHZhciBjMV9oaSA9IFdbaSAtIDE0XTsgIC8vIGkgLSA3XG4gICAgdmFyIGMxX2xvID0gV1tpIC0gMTNdO1xuICAgIHZhciBjMl9oaSA9IGcwXzUxMl9oaShXW2kgLSAzMF0sIFdbaSAtIDI5XSk7ICAvLyBpIC0gMTVcbiAgICB2YXIgYzJfbG8gPSBnMF81MTJfbG8oV1tpIC0gMzBdLCBXW2kgLSAyOV0pO1xuICAgIHZhciBjM19oaSA9IFdbaSAtIDMyXTsgIC8vIGkgLSAxNlxuICAgIHZhciBjM19sbyA9IFdbaSAtIDMxXTtcblxuICAgIFdbaV0gPSBzdW02NF80X2hpKGMwX2hpLCBjMF9sbyxcbiAgICAgICAgICAgICAgICAgICAgICBjMV9oaSwgYzFfbG8sXG4gICAgICAgICAgICAgICAgICAgICAgYzJfaGksIGMyX2xvLFxuICAgICAgICAgICAgICAgICAgICAgIGMzX2hpLCBjM19sbyk7XG4gICAgV1tpICsgMV0gPSBzdW02NF80X2xvKGMwX2hpLCBjMF9sbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYzFfaGksIGMxX2xvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjMl9oaSwgYzJfbG8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGMzX2hpLCBjM19sbyk7XG4gIH1cbn07XG5cblNIQTUxMi5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUobXNnLCBzdGFydCkge1xuICB0aGlzLl9wcmVwYXJlQmxvY2sobXNnLCBzdGFydCk7XG5cbiAgdmFyIFcgPSB0aGlzLlc7XG5cbiAgdmFyIGFoID0gdGhpcy5oWzBdO1xuICB2YXIgYWwgPSB0aGlzLmhbMV07XG4gIHZhciBiaCA9IHRoaXMuaFsyXTtcbiAgdmFyIGJsID0gdGhpcy5oWzNdO1xuICB2YXIgY2ggPSB0aGlzLmhbNF07XG4gIHZhciBjbCA9IHRoaXMuaFs1XTtcbiAgdmFyIGRoID0gdGhpcy5oWzZdO1xuICB2YXIgZGwgPSB0aGlzLmhbN107XG4gIHZhciBlaCA9IHRoaXMuaFs4XTtcbiAgdmFyIGVsID0gdGhpcy5oWzldO1xuICB2YXIgZmggPSB0aGlzLmhbMTBdO1xuICB2YXIgZmwgPSB0aGlzLmhbMTFdO1xuICB2YXIgZ2ggPSB0aGlzLmhbMTJdO1xuICB2YXIgZ2wgPSB0aGlzLmhbMTNdO1xuICB2YXIgaGggPSB0aGlzLmhbMTRdO1xuICB2YXIgaGwgPSB0aGlzLmhbMTVdO1xuXG4gIGFzc2VydCh0aGlzLmsubGVuZ3RoID09PSBXLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgVy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciBjMF9oaSA9IGhoO1xuICAgIHZhciBjMF9sbyA9IGhsO1xuICAgIHZhciBjMV9oaSA9IHMxXzUxMl9oaShlaCwgZWwpO1xuICAgIHZhciBjMV9sbyA9IHMxXzUxMl9sbyhlaCwgZWwpO1xuICAgIHZhciBjMl9oaSA9IGNoNjRfaGkoZWgsIGVsLCBmaCwgZmwsIGdoLCBnbCk7XG4gICAgdmFyIGMyX2xvID0gY2g2NF9sbyhlaCwgZWwsIGZoLCBmbCwgZ2gsIGdsKTtcbiAgICB2YXIgYzNfaGkgPSB0aGlzLmtbaV07XG4gICAgdmFyIGMzX2xvID0gdGhpcy5rW2kgKyAxXTtcbiAgICB2YXIgYzRfaGkgPSBXW2ldO1xuICAgIHZhciBjNF9sbyA9IFdbaSArIDFdO1xuXG4gICAgdmFyIFQxX2hpID0gc3VtNjRfNV9oaShjMF9oaSwgYzBfbG8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjMV9oaSwgYzFfbG8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjMl9oaSwgYzJfbG8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjM19oaSwgYzNfbG8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjNF9oaSwgYzRfbG8pO1xuICAgIHZhciBUMV9sbyA9IHN1bTY0XzVfbG8oYzBfaGksIGMwX2xvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgYzFfaGksIGMxX2xvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgYzJfaGksIGMyX2xvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgYzNfaGksIGMzX2xvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgYzRfaGksIGM0X2xvKTtcblxuICAgIHZhciBjMF9oaSA9IHMwXzUxMl9oaShhaCwgYWwpO1xuICAgIHZhciBjMF9sbyA9IHMwXzUxMl9sbyhhaCwgYWwpO1xuICAgIHZhciBjMV9oaSA9IG1hajY0X2hpKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wpO1xuICAgIHZhciBjMV9sbyA9IG1hajY0X2xvKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wpO1xuXG4gICAgdmFyIFQyX2hpID0gc3VtNjRfaGkoYzBfaGksIGMwX2xvLCBjMV9oaSwgYzFfbG8pO1xuICAgIHZhciBUMl9sbyA9IHN1bTY0X2xvKGMwX2hpLCBjMF9sbywgYzFfaGksIGMxX2xvKTtcblxuICAgIGhoID0gZ2g7XG4gICAgaGwgPSBnbDtcblxuICAgIGdoID0gZmg7XG4gICAgZ2wgPSBmbDtcblxuICAgIGZoID0gZWg7XG4gICAgZmwgPSBlbDtcblxuICAgIGVoID0gc3VtNjRfaGkoZGgsIGRsLCBUMV9oaSwgVDFfbG8pO1xuICAgIGVsID0gc3VtNjRfbG8oZGwsIGRsLCBUMV9oaSwgVDFfbG8pO1xuXG4gICAgZGggPSBjaDtcbiAgICBkbCA9IGNsO1xuXG4gICAgY2ggPSBiaDtcbiAgICBjbCA9IGJsO1xuXG4gICAgYmggPSBhaDtcbiAgICBibCA9IGFsO1xuXG4gICAgYWggPSBzdW02NF9oaShUMV9oaSwgVDFfbG8sIFQyX2hpLCBUMl9sbyk7XG4gICAgYWwgPSBzdW02NF9sbyhUMV9oaSwgVDFfbG8sIFQyX2hpLCBUMl9sbyk7XG4gIH1cblxuICBzdW02NCh0aGlzLmgsIDAsIGFoLCBhbCk7XG4gIHN1bTY0KHRoaXMuaCwgMiwgYmgsIGJsKTtcbiAgc3VtNjQodGhpcy5oLCA0LCBjaCwgY2wpO1xuICBzdW02NCh0aGlzLmgsIDYsIGRoLCBkbCk7XG4gIHN1bTY0KHRoaXMuaCwgOCwgZWgsIGVsKTtcbiAgc3VtNjQodGhpcy5oLCAxMCwgZmgsIGZsKTtcbiAgc3VtNjQodGhpcy5oLCAxMiwgZ2gsIGdsKTtcbiAgc3VtNjQodGhpcy5oLCAxNCwgaGgsIGhsKTtcbn07XG5cblNIQTUxMi5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLCAnYmlnJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmgsICdiaWcnKTtcbn07XG5cbmZ1bmN0aW9uIFNIQTM4NCgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTM4NCkpXG4gICAgcmV0dXJuIG5ldyBTSEEzODQoKTtcblxuICBTSEE1MTIuY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gWyAweGNiYmI5ZDVkLCAweGMxMDU5ZWQ4LFxuICAgICAgICAgICAgIDB4NjI5YTI5MmEsIDB4MzY3Y2Q1MDcsXG4gICAgICAgICAgICAgMHg5MTU5MDE1YSwgMHgzMDcwZGQxNyxcbiAgICAgICAgICAgICAweDE1MmZlY2Q4LCAweGY3MGU1OTM5LFxuICAgICAgICAgICAgIDB4NjczMzI2NjcsIDB4ZmZjMDBiMzEsXG4gICAgICAgICAgICAgMHg4ZWI0NGE4NywgMHg2ODU4MTUxMSxcbiAgICAgICAgICAgICAweGRiMGMyZTBkLCAweDY0Zjk4ZmE3LFxuICAgICAgICAgICAgIDB4NDdiNTQ4MWQsIDB4YmVmYTRmYTQgXTtcbn1cbnV0aWxzLmluaGVyaXRzKFNIQTM4NCwgU0hBNTEyKTtcbmV4cG9ydHMuc2hhMzg0ID0gU0hBMzg0O1xuXG5TSEEzODQuYmxvY2tTaXplID0gMTAyNDtcblNIQTM4NC5vdXRTaXplID0gMzg0O1xuU0hBMzg0LmhtYWNTdHJlbmd0aCA9IDE5MjtcblNIQTM4NC5wYWRMZW5ndGggPSAxMjg7XG5cblNIQTM4NC5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLnNsaWNlKDAsIDEyKSwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLnNsaWNlKDAsIDEyKSwgJ2JpZycpO1xufTtcblxuZnVuY3Rpb24gU0hBMSgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTEpKVxuICAgIHJldHVybiBuZXcgU0hBMSgpO1xuXG4gIEJsb2NrSGFzaC5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbIDB4Njc0NTIzMDEsIDB4ZWZjZGFiODksIDB4OThiYWRjZmUsXG4gICAgICAgICAgICAgMHgxMDMyNTQ3NiwgMHhjM2QyZTFmMCBdO1xuICB0aGlzLlcgPSBuZXcgQXJyYXkoODApO1xufVxuXG51dGlscy5pbmhlcml0cyhTSEExLCBCbG9ja0hhc2gpO1xuZXhwb3J0cy5zaGExID0gU0hBMTtcblxuU0hBMS5ibG9ja1NpemUgPSA1MTI7XG5TSEExLm91dFNpemUgPSAxNjA7XG5TSEExLmhtYWNTdHJlbmd0aCA9IDgwO1xuU0hBMS5wYWRMZW5ndGggPSA2NDtcblxuU0hBMS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUobXNnLCBzdGFydCkge1xuICB2YXIgVyA9IHRoaXMuVztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspXG4gICAgV1tpXSA9IG1zZ1tzdGFydCArIGldO1xuXG4gIGZvcig7IGkgPCBXLmxlbmd0aDsgaSsrKVxuICAgIFdbaV0gPSByb3RsMzIoV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XSwgMSk7XG5cbiAgdmFyIGEgPSB0aGlzLmhbMF07XG4gIHZhciBiID0gdGhpcy5oWzFdO1xuICB2YXIgYyA9IHRoaXMuaFsyXTtcbiAgdmFyIGQgPSB0aGlzLmhbM107XG4gIHZhciBlID0gdGhpcy5oWzRdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgVy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzID0gfn4oaSAvIDIwKTtcbiAgICB2YXIgdCA9IHN1bTMyXzUocm90bDMyKGEsIDUpLCBmdF8xKHMsIGIsIGMsIGQpLCBlLCBXW2ldLCBzaGExX0tbc10pO1xuICAgIGUgPSBkO1xuICAgIGQgPSBjO1xuICAgIGMgPSByb3RsMzIoYiwgMzApO1xuICAgIGIgPSBhO1xuICAgIGEgPSB0O1xuICB9XG5cbiAgdGhpcy5oWzBdID0gc3VtMzIodGhpcy5oWzBdLCBhKTtcbiAgdGhpcy5oWzFdID0gc3VtMzIodGhpcy5oWzFdLCBiKTtcbiAgdGhpcy5oWzJdID0gc3VtMzIodGhpcy5oWzJdLCBjKTtcbiAgdGhpcy5oWzNdID0gc3VtMzIodGhpcy5oWzNdLCBkKTtcbiAgdGhpcy5oWzRdID0gc3VtMzIodGhpcy5oWzRdLCBlKTtcbn07XG5cblNIQTEucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaCwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLCAnYmlnJyk7XG59O1xuXG5mdW5jdGlvbiBjaDMyKHgsIHksIHopIHtcbiAgcmV0dXJuICh4ICYgeSkgXiAoKH54KSAmIHopO1xufVxuXG5mdW5jdGlvbiBtYWozMih4LCB5LCB6KSB7XG4gIHJldHVybiAoeCAmIHkpIF4gKHggJiB6KSBeICh5ICYgeik7XG59XG5cbmZ1bmN0aW9uIHAzMih4LCB5LCB6KSB7XG4gIHJldHVybiB4IF4geSBeIHo7XG59XG5cbmZ1bmN0aW9uIHMwXzI1Nih4KSB7XG4gIHJldHVybiByb3RyMzIoeCwgMikgXiByb3RyMzIoeCwgMTMpIF4gcm90cjMyKHgsIDIyKTtcbn1cblxuZnVuY3Rpb24gczFfMjU2KHgpIHtcbiAgcmV0dXJuIHJvdHIzMih4LCA2KSBeIHJvdHIzMih4LCAxMSkgXiByb3RyMzIoeCwgMjUpO1xufVxuXG5mdW5jdGlvbiBnMF8yNTYoeCkge1xuICByZXR1cm4gcm90cjMyKHgsIDcpIF4gcm90cjMyKHgsIDE4KSBeICh4ID4+PiAzKTtcbn1cblxuZnVuY3Rpb24gZzFfMjU2KHgpIHtcbiAgcmV0dXJuIHJvdHIzMih4LCAxNykgXiByb3RyMzIoeCwgMTkpIF4gKHggPj4+IDEwKTtcbn1cblxuZnVuY3Rpb24gZnRfMShzLCB4LCB5LCB6KSB7XG4gIGlmIChzID09PSAwKVxuICAgIHJldHVybiBjaDMyKHgsIHksIHopO1xuICBpZiAocyA9PT0gMSB8fCBzID09PSAzKVxuICAgIHJldHVybiBwMzIoeCwgeSwgeik7XG4gIGlmIChzID09PSAyKVxuICAgIHJldHVybiBtYWozMih4LCB5LCB6KTtcbn1cblxuZnVuY3Rpb24gY2g2NF9oaSh4aCwgeGwsIHloLCB5bCwgemgsIHpsKSB7XG4gIHZhciByID0gKHhoICYgeWgpIF4gKCh+eGgpICYgemgpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGNoNjRfbG8oeGgsIHhsLCB5aCwgeWwsIHpoLCB6bCkge1xuICB2YXIgciA9ICh4bCAmIHlsKSBeICgofnhsKSAmIHpsKTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBtYWo2NF9oaSh4aCwgeGwsIHloLCB5bCwgemgsIHpsKSB7XG4gIHZhciByID0gKHhoICYgeWgpIF4gKHhoICYgemgpIF4gKHloICYgemgpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIG1hajY0X2xvKHhoLCB4bCwgeWgsIHlsLCB6aCwgemwpIHtcbiAgdmFyIHIgPSAoeGwgJiB5bCkgXiAoeGwgJiB6bCkgXiAoeWwgJiB6bCk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gczBfNTEyX2hpKHhoLCB4bCkge1xuICB2YXIgYzBfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCAyOCk7XG4gIHZhciBjMV9oaSA9IHJvdHI2NF9oaSh4bCwgeGgsIDIpOyAgLy8gMzRcbiAgdmFyIGMyX2hpID0gcm90cjY0X2hpKHhsLCB4aCwgNyk7ICAvLyAzOVxuXG4gIHZhciByID0gYzBfaGkgXiBjMV9oaSBeIGMyX2hpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHMwXzUxMl9sbyh4aCwgeGwpIHtcbiAgdmFyIGMwX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMjgpO1xuICB2YXIgYzFfbG8gPSByb3RyNjRfbG8oeGwsIHhoLCAyKTsgIC8vIDM0XG4gIHZhciBjMl9sbyA9IHJvdHI2NF9sbyh4bCwgeGgsIDcpOyAgLy8gMzlcblxuICB2YXIgciA9IGMwX2xvIF4gYzFfbG8gXiBjMl9sbztcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBzMV81MTJfaGkoeGgsIHhsKSB7XG4gIHZhciBjMF9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDE0KTtcbiAgdmFyIGMxX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgMTgpO1xuICB2YXIgYzJfaGkgPSByb3RyNjRfaGkoeGwsIHhoLCA5KTsgIC8vIDQxXG5cbiAgdmFyIHIgPSBjMF9oaSBeIGMxX2hpIF4gYzJfaGk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gczFfNTEyX2xvKHhoLCB4bCkge1xuICB2YXIgYzBfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCAxNCk7XG4gIHZhciBjMV9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDE4KTtcbiAgdmFyIGMyX2xvID0gcm90cjY0X2xvKHhsLCB4aCwgOSk7ICAvLyA0MVxuXG4gIHZhciByID0gYzBfbG8gXiBjMV9sbyBeIGMyX2xvO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGcwXzUxMl9oaSh4aCwgeGwpIHtcbiAgdmFyIGMwX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgMSk7XG4gIHZhciBjMV9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDgpO1xuICB2YXIgYzJfaGkgPSBzaHI2NF9oaSh4aCwgeGwsIDcpO1xuXG4gIHZhciByID0gYzBfaGkgXiBjMV9oaSBeIGMyX2hpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGcwXzUxMl9sbyh4aCwgeGwpIHtcbiAgdmFyIGMwX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMSk7XG4gIHZhciBjMV9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDgpO1xuICB2YXIgYzJfbG8gPSBzaHI2NF9sbyh4aCwgeGwsIDcpO1xuXG4gIHZhciByID0gYzBfbG8gXiBjMV9sbyBeIGMyX2xvO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGcxXzUxMl9oaSh4aCwgeGwpIHtcbiAgdmFyIGMwX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgMTkpO1xuICB2YXIgYzFfaGkgPSByb3RyNjRfaGkoeGwsIHhoLCAyOSk7ICAvLyA2MVxuICB2YXIgYzJfaGkgPSBzaHI2NF9oaSh4aCwgeGwsIDYpO1xuXG4gIHZhciByID0gYzBfaGkgXiBjMV9oaSBeIGMyX2hpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGcxXzUxMl9sbyh4aCwgeGwpIHtcbiAgdmFyIGMwX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMTkpO1xuICB2YXIgYzFfbG8gPSByb3RyNjRfbG8oeGwsIHhoLCAyOSk7ICAvLyA2MVxuICB2YXIgYzJfbG8gPSBzaHI2NF9sbyh4aCwgeGwsIDYpO1xuXG4gIHZhciByID0gYzBfbG8gXiBjMV9sbyBeIGMyX2xvO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG4iLCJ2YXIgaGFzaCA9IHJlcXVpcmUoJy4uL2hhc2gnKTtcbnZhciB1dGlscyA9IGhhc2gudXRpbHM7XG5cbnZhciByb3RsMzIgPSB1dGlscy5yb3RsMzI7XG52YXIgc3VtMzIgPSB1dGlscy5zdW0zMjtcbnZhciBzdW0zMl8zID0gdXRpbHMuc3VtMzJfMztcbnZhciBzdW0zMl80ID0gdXRpbHMuc3VtMzJfNDtcbnZhciBCbG9ja0hhc2ggPSBoYXNoLmNvbW1vbi5CbG9ja0hhc2g7XG5cbmZ1bmN0aW9uIFJJUEVNRDE2MCgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJJUEVNRDE2MCkpXG4gICAgcmV0dXJuIG5ldyBSSVBFTUQxNjAoKTtcblxuICBCbG9ja0hhc2guY2FsbCh0aGlzKTtcblxuICB0aGlzLmggPSBbIDB4Njc0NTIzMDEsIDB4ZWZjZGFiODksIDB4OThiYWRjZmUsIDB4MTAzMjU0NzYsIDB4YzNkMmUxZjAgXTtcbiAgdGhpcy5lbmRpYW4gPSAnbGl0dGxlJztcbn1cbnV0aWxzLmluaGVyaXRzKFJJUEVNRDE2MCwgQmxvY2tIYXNoKTtcbmV4cG9ydHMucmlwZW1kMTYwID0gUklQRU1EMTYwO1xuXG5SSVBFTUQxNjAuYmxvY2tTaXplID0gNTEyO1xuUklQRU1EMTYwLm91dFNpemUgPSAxNjA7XG5SSVBFTUQxNjAuaG1hY1N0cmVuZ3RoID0gMTkyO1xuUklQRU1EMTYwLnBhZExlbmd0aCA9IDY0O1xuXG5SSVBFTUQxNjAucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUobXNnLCBzdGFydCkge1xuICB2YXIgQSA9IHRoaXMuaFswXTtcbiAgdmFyIEIgPSB0aGlzLmhbMV07XG4gIHZhciBDID0gdGhpcy5oWzJdO1xuICB2YXIgRCA9IHRoaXMuaFszXTtcbiAgdmFyIEUgPSB0aGlzLmhbNF07XG4gIHZhciBBaCA9IEE7XG4gIHZhciBCaCA9IEI7XG4gIHZhciBDaCA9IEM7XG4gIHZhciBEaCA9IEQ7XG4gIHZhciBFaCA9IEU7XG4gIGZvciAodmFyIGogPSAwOyBqIDwgODA7IGorKykge1xuICAgIHZhciBUID0gc3VtMzIoXG4gICAgICByb3RsMzIoXG4gICAgICAgIHN1bTMyXzQoQSwgZihqLCBCLCBDLCBEKSwgbXNnW3Jbal0gKyBzdGFydF0sIEsoaikpLFxuICAgICAgICBzW2pdKSxcbiAgICAgIEUpO1xuICAgIEEgPSBFO1xuICAgIEUgPSBEO1xuICAgIEQgPSByb3RsMzIoQywgMTApO1xuICAgIEMgPSBCO1xuICAgIEIgPSBUO1xuICAgIFQgPSBzdW0zMihcbiAgICAgIHJvdGwzMihcbiAgICAgICAgc3VtMzJfNChBaCwgZig3OSAtIGosIEJoLCBDaCwgRGgpLCBtc2dbcmhbal0gKyBzdGFydF0sIEtoKGopKSxcbiAgICAgICAgc2hbal0pLFxuICAgICAgRWgpO1xuICAgIEFoID0gRWg7XG4gICAgRWggPSBEaDtcbiAgICBEaCA9IHJvdGwzMihDaCwgMTApO1xuICAgIENoID0gQmg7XG4gICAgQmggPSBUO1xuICB9XG4gIFQgPSBzdW0zMl8zKHRoaXMuaFsxXSwgQywgRGgpO1xuICB0aGlzLmhbMV0gPSBzdW0zMl8zKHRoaXMuaFsyXSwgRCwgRWgpO1xuICB0aGlzLmhbMl0gPSBzdW0zMl8zKHRoaXMuaFszXSwgRSwgQWgpO1xuICB0aGlzLmhbM10gPSBzdW0zMl8zKHRoaXMuaFs0XSwgQSwgQmgpO1xuICB0aGlzLmhbNF0gPSBzdW0zMl8zKHRoaXMuaFswXSwgQiwgQ2gpO1xuICB0aGlzLmhbMF0gPSBUO1xufTtcblxuUklQRU1EMTYwLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmgsICdsaXR0bGUnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCwgJ2xpdHRsZScpO1xufTtcblxuZnVuY3Rpb24gZihqLCB4LCB5LCB6KSB7XG4gIGlmIChqIDw9IDE1KVxuICAgIHJldHVybiB4IF4geSBeIHo7XG4gIGVsc2UgaWYgKGogPD0gMzEpXG4gICAgcmV0dXJuICh4ICYgeSkgfCAoKH54KSAmIHopO1xuICBlbHNlIGlmIChqIDw9IDQ3KVxuICAgIHJldHVybiAoeCB8ICh+eSkpIF4gejtcbiAgZWxzZSBpZiAoaiA8PSA2MylcbiAgICByZXR1cm4gKHggJiB6KSB8ICh5ICYgKH56KSk7XG4gIGVsc2VcbiAgICByZXR1cm4geCBeICh5IHwgKH56KSk7XG59XG5cbmZ1bmN0aW9uIEsoaikge1xuICBpZiAoaiA8PSAxNSlcbiAgICByZXR1cm4gMHgwMDAwMDAwMDtcbiAgZWxzZSBpZiAoaiA8PSAzMSlcbiAgICByZXR1cm4gMHg1YTgyNzk5OTtcbiAgZWxzZSBpZiAoaiA8PSA0NylcbiAgICByZXR1cm4gMHg2ZWQ5ZWJhMTtcbiAgZWxzZSBpZiAoaiA8PSA2MylcbiAgICByZXR1cm4gMHg4ZjFiYmNkYztcbiAgZWxzZVxuICAgIHJldHVybiAweGE5NTNmZDRlO1xufVxuXG5mdW5jdGlvbiBLaChqKSB7XG4gIGlmIChqIDw9IDE1KVxuICAgIHJldHVybiAweDUwYTI4YmU2O1xuICBlbHNlIGlmIChqIDw9IDMxKVxuICAgIHJldHVybiAweDVjNGRkMTI0O1xuICBlbHNlIGlmIChqIDw9IDQ3KVxuICAgIHJldHVybiAweDZkNzAzZWYzO1xuICBlbHNlIGlmIChqIDw9IDYzKVxuICAgIHJldHVybiAweDdhNmQ3NmU5O1xuICBlbHNlXG4gICAgcmV0dXJuIDB4MDAwMDAwMDA7XG59XG5cbnZhciByID0gW1xuICAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyLCAxMywgMTQsIDE1LFxuICA3LCA0LCAxMywgMSwgMTAsIDYsIDE1LCAzLCAxMiwgMCwgOSwgNSwgMiwgMTQsIDExLCA4LFxuICAzLCAxMCwgMTQsIDQsIDksIDE1LCA4LCAxLCAyLCA3LCAwLCA2LCAxMywgMTEsIDUsIDEyLFxuICAxLCA5LCAxMSwgMTAsIDAsIDgsIDEyLCA0LCAxMywgMywgNywgMTUsIDE0LCA1LCA2LCAyLFxuICA0LCAwLCA1LCA5LCA3LCAxMiwgMiwgMTAsIDE0LCAxLCAzLCA4LCAxMSwgNiwgMTUsIDEzXG5dO1xuXG52YXIgcmggPSBbXG4gIDUsIDE0LCA3LCAwLCA5LCAyLCAxMSwgNCwgMTMsIDYsIDE1LCA4LCAxLCAxMCwgMywgMTIsXG4gIDYsIDExLCAzLCA3LCAwLCAxMywgNSwgMTAsIDE0LCAxNSwgOCwgMTIsIDQsIDksIDEsIDIsXG4gIDE1LCA1LCAxLCAzLCA3LCAxNCwgNiwgOSwgMTEsIDgsIDEyLCAyLCAxMCwgMCwgNCwgMTMsXG4gIDgsIDYsIDQsIDEsIDMsIDExLCAxNSwgMCwgNSwgMTIsIDIsIDEzLCA5LCA3LCAxMCwgMTQsXG4gIDEyLCAxNSwgMTAsIDQsIDEsIDUsIDgsIDcsIDYsIDIsIDEzLCAxNCwgMCwgMywgOSwgMTFcbl07XG5cbnZhciBzID0gW1xuICAxMSwgMTQsIDE1LCAxMiwgNSwgOCwgNywgOSwgMTEsIDEzLCAxNCwgMTUsIDYsIDcsIDksIDgsXG4gIDcsIDYsIDgsIDEzLCAxMSwgOSwgNywgMTUsIDcsIDEyLCAxNSwgOSwgMTEsIDcsIDEzLCAxMixcbiAgMTEsIDEzLCA2LCA3LCAxNCwgOSwgMTMsIDE1LCAxNCwgOCwgMTMsIDYsIDUsIDEyLCA3LCA1LFxuICAxMSwgMTIsIDE0LCAxNSwgMTQsIDE1LCA5LCA4LCA5LCAxNCwgNSwgNiwgOCwgNiwgNSwgMTIsXG4gIDksIDE1LCA1LCAxMSwgNiwgOCwgMTMsIDEyLCA1LCAxMiwgMTMsIDE0LCAxMSwgOCwgNSwgNlxuXTtcblxudmFyIHNoID0gW1xuICA4LCA5LCA5LCAxMSwgMTMsIDE1LCAxNSwgNSwgNywgNywgOCwgMTEsIDE0LCAxNCwgMTIsIDYsXG4gIDksIDEzLCAxNSwgNywgMTIsIDgsIDksIDExLCA3LCA3LCAxMiwgNywgNiwgMTUsIDEzLCAxMSxcbiAgOSwgNywgMTUsIDExLCA4LCA2LCA2LCAxNCwgMTIsIDEzLCA1LCAxNCwgMTMsIDEzLCA3LCA1LFxuICAxNSwgNSwgOCwgMTEsIDE0LCAxNCwgNiwgMTQsIDYsIDksIDEyLCA5LCAxMiwgNSwgMTUsIDgsXG4gIDgsIDUsIDEyLCA5LCAxMiwgNSwgMTQsIDYsIDgsIDEzLCA2LCA1LCAxNSwgMTMsIDExLCAxMVxuXTtcbiIsInZhciBobWFjID0gZXhwb3J0cztcblxudmFyIGhhc2ggPSByZXF1aXJlKCcuLi9oYXNoJyk7XG52YXIgdXRpbHMgPSBoYXNoLnV0aWxzO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gSG1hYyhoYXNoLCBrZXksIGVuYykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSG1hYykpXG4gICAgcmV0dXJuIG5ldyBIbWFjKGhhc2gsIGtleSwgZW5jKTtcbiAgdGhpcy5IYXNoID0gaGFzaDtcbiAgdGhpcy5ibG9ja1NpemUgPSBoYXNoLmJsb2NrU2l6ZSAvIDg7XG4gIHRoaXMub3V0U2l6ZSA9IGhhc2gub3V0U2l6ZSAvIDg7XG4gIHRoaXMuaW5uZXIgPSBudWxsO1xuICB0aGlzLm91dGVyID0gbnVsbDtcblxuICB0aGlzLl9pbml0KHV0aWxzLnRvQXJyYXkoa2V5LCBlbmMpKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gSG1hYztcblxuSG1hYy5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0KGtleSkge1xuICAvLyBTaG9ydGVuIGtleSwgaWYgbmVlZGVkXG4gIGlmIChrZXkubGVuZ3RoID4gdGhpcy5ibG9ja1NpemUpXG4gICAga2V5ID0gbmV3IHRoaXMuSGFzaCgpLnVwZGF0ZShrZXkpLmRpZ2VzdCgpO1xuICBhc3NlcnQoa2V5Lmxlbmd0aCA8PSB0aGlzLmJsb2NrU2l6ZSk7XG5cbiAgLy8gQWRkIHBhZGRpbmcgdG8ga2V5XG4gIGZvciAodmFyIGkgPSBrZXkubGVuZ3RoOyBpIDwgdGhpcy5ibG9ja1NpemU7IGkrKylcbiAgICBrZXkucHVzaCgwKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleS5sZW5ndGg7IGkrKylcbiAgICBrZXlbaV0gXj0gMHgzNjtcbiAgdGhpcy5pbm5lciA9IG5ldyB0aGlzLkhhc2goKS51cGRhdGUoa2V5KTtcblxuICAvLyAweDM2IF4gMHg1YyA9IDB4NmFcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXkubGVuZ3RoOyBpKyspXG4gICAga2V5W2ldIF49IDB4NmE7XG4gIHRoaXMub3V0ZXIgPSBuZXcgdGhpcy5IYXNoKCkudXBkYXRlKGtleSk7XG59O1xuXG5IbWFjLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUobXNnLCBlbmMpIHtcbiAgdGhpcy5pbm5lci51cGRhdGUobXNnLCBlbmMpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkhtYWMucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgdGhpcy5vdXRlci51cGRhdGUodGhpcy5pbm5lci5kaWdlc3QoKSk7XG4gIHJldHVybiB0aGlzLm91dGVyLmRpZ2VzdChlbmMpO1xufTtcbiIsInZhciBoYXNoID0gcmVxdWlyZSgnLi4vaGFzaCcpO1xudmFyIHV0aWxzID0gaGFzaC51dGlscztcbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG5cbmZ1bmN0aW9uIEJsb2NrSGFzaCgpIHtcbiAgdGhpcy5wZW5kaW5nID0gbnVsbDtcbiAgdGhpcy5wZW5kaW5nVG90YWwgPSAwO1xuICB0aGlzLmJsb2NrU2l6ZSA9IHRoaXMuY29uc3RydWN0b3IuYmxvY2tTaXplO1xuICB0aGlzLm91dFNpemUgPSB0aGlzLmNvbnN0cnVjdG9yLm91dFNpemU7XG4gIHRoaXMuaG1hY1N0cmVuZ3RoID0gdGhpcy5jb25zdHJ1Y3Rvci5obWFjU3RyZW5ndGg7XG4gIHRoaXMucGFkTGVuZ3RoID0gdGhpcy5jb25zdHJ1Y3Rvci5wYWRMZW5ndGggLyA4O1xuICB0aGlzLmVuZGlhbiA9ICdiaWcnO1xuXG4gIHRoaXMuX2RlbHRhOCA9IHRoaXMuYmxvY2tTaXplIC8gODtcbiAgdGhpcy5fZGVsdGEzMiA9IHRoaXMuYmxvY2tTaXplIC8gMzI7XG59XG5leHBvcnRzLkJsb2NrSGFzaCA9IEJsb2NrSGFzaDtcblxuQmxvY2tIYXNoLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUobXNnLCBlbmMpIHtcbiAgLy8gQ29udmVydCBtZXNzYWdlIHRvIGFycmF5LCBwYWQgaXQsIGFuZCBqb2luIGludG8gMzJiaXQgYmxvY2tzXG4gIG1zZyA9IHV0aWxzLnRvQXJyYXkobXNnLCBlbmMpO1xuICBpZiAoIXRoaXMucGVuZGluZylcbiAgICB0aGlzLnBlbmRpbmcgPSBtc2c7XG4gIGVsc2VcbiAgICB0aGlzLnBlbmRpbmcgPSB0aGlzLnBlbmRpbmcuY29uY2F0KG1zZyk7XG4gIHRoaXMucGVuZGluZ1RvdGFsICs9IG1zZy5sZW5ndGg7XG5cbiAgLy8gRW5vdWdoIGRhdGEsIHRyeSB1cGRhdGluZ1xuICBpZiAodGhpcy5wZW5kaW5nLmxlbmd0aCA+PSB0aGlzLl9kZWx0YTgpIHtcbiAgICBtc2cgPSB0aGlzLnBlbmRpbmc7XG5cbiAgICAvLyBQcm9jZXNzIHBlbmRpbmcgZGF0YSBpbiBibG9ja3NcbiAgICB2YXIgciA9IG1zZy5sZW5ndGggJSB0aGlzLl9kZWx0YTg7XG4gICAgdGhpcy5wZW5kaW5nID0gbXNnLnNsaWNlKG1zZy5sZW5ndGggLSByLCBtc2cubGVuZ3RoKTtcbiAgICBpZiAodGhpcy5wZW5kaW5nLmxlbmd0aCA9PT0gMClcbiAgICAgIHRoaXMucGVuZGluZyA9IG51bGw7XG5cbiAgICBtc2cgPSB1dGlscy5qb2luMzIobXNnLCAwLCBtc2cubGVuZ3RoIC0gciwgdGhpcy5lbmRpYW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSArPSB0aGlzLl9kZWx0YTMyKVxuICAgICAgdGhpcy5fdXBkYXRlKG1zZywgaSwgaSArIHRoaXMuX2RlbHRhMzIpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CbG9ja0hhc2gucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgdGhpcy51cGRhdGUodGhpcy5fcGFkKCkpO1xuICBhc3NlcnQodGhpcy5wZW5kaW5nID09PSBudWxsKTtcblxuICByZXR1cm4gdGhpcy5fZGlnZXN0KGVuYyk7XG59O1xuXG5CbG9ja0hhc2gucHJvdG90eXBlLl9wYWQgPSBmdW5jdGlvbiBwYWQoKSB7XG4gIHZhciBsZW4gPSB0aGlzLnBlbmRpbmdUb3RhbDtcbiAgdmFyIGJ5dGVzID0gdGhpcy5fZGVsdGE4O1xuICB2YXIgayA9IGJ5dGVzIC0gKChsZW4gKyB0aGlzLnBhZExlbmd0aCkgJSBieXRlcyk7XG4gIHZhciByZXMgPSBuZXcgQXJyYXkoayArIHRoaXMucGFkTGVuZ3RoKTtcbiAgcmVzWzBdID0gMHg4MDtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBrOyBpKyspXG4gICAgcmVzW2ldID0gMDtcblxuICAvLyBBcHBlbmQgbGVuZ3RoXG4gIGxlbiA8PD0gMztcbiAgaWYgKHRoaXMuZW5kaWFuID09PSAnYmlnJykge1xuICAgIGZvciAodmFyIHQgPSA4OyB0IDwgdGhpcy5wYWRMZW5ndGg7IHQrKylcbiAgICAgIHJlc1tpKytdID0gMDtcblxuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDI0KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiAxNikgJiAweGZmO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gOCkgJiAweGZmO1xuICAgIHJlc1tpKytdID0gbGVuICYgMHhmZjtcbiAgfSBlbHNlIHtcbiAgICByZXNbaSsrXSA9IGxlbiAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiA4KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiAxNikgJiAweGZmO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gMjQpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG5cbiAgICBmb3IgKHZhciB0ID0gODsgdCA8IHRoaXMucGFkTGVuZ3RoOyB0KyspXG4gICAgICByZXNbaSsrXSA9IDA7XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBkb3VibGVzOiB7XG4gICAgc3RlcDogNCxcbiAgICBwb2ludHM6IFtcbiAgICAgIFtcbiAgICAgICAgJ2U2MGZjZTkzYjU5ZTllYzUzMDExYWFiYzIxYzIzZTk3YjJhMzEzNjliODdhNWFlOWM0NGVlODllMmE2ZGVjMGEnLFxuICAgICAgICAnZjdlMzUwNzM5OWU1OTU5MjlkYjk5ZjM0ZjU3OTM3MTAxMjk2ODkxZTQ0ZDIzZjBiZTFmMzJjY2U2OTYxNjgyMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4MjgyMjYzMjEyYzYwOWQ5ZWEyYTZlM2UxNzJkZTIzOGQ4YzM5Y2FiZDVhYzFjYTEwNjQ2ZTIzZmQ1ZjUxNTA4JyxcbiAgICAgICAgJzExZjhhODA5ODU1N2RmZTQ1ZTgyNTZlODMwYjYwYWNlNjJkNjEzYWMyZjdiMTdiZWQzMWI2ZWFmZjZlMjZjYWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTc1ZTE1OWY3MjhiODY1YTcyZjk5Y2M2YzZmYzg0NmRlMGI5MzgzM2ZkMjIyMmVkNzNmY2U1YjU1MWU1YjczOScsXG4gICAgICAgICdkMzUwNmUwZDllM2M3OWViYTRlZjk3YTUxZmY3MWY1ZWFjYjU5NTVhZGQyNDM0NWM2ZWZhNmZmZWU5ZmVkNjk1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM2M2Q5MGQ0NDdiMDBjOWM5OWNlYWMwNWI2MjYyZWUwNTM0NDFjN2U1NTU1MmZmZTUyNmJhZDhmODNmZjQ2NDAnLFxuICAgICAgICAnNGUyNzNhZGZjNzMyMjIxOTUzYjQ0NTM5N2YzMzYzMTQ1YjlhODkwMDgxOTllY2I2MjAwM2M3ZjNiZWU5ZGU5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhiNGI1ZjE2NWRmM2MyYmU4YzYyNDRiNWI3NDU2Mzg4NDNlNGE3ODFhMTViY2QxYjY5Zjc5YTU1ZGZmZGY4MGMnLFxuICAgICAgICAnNGFhZDBhNmY2OGQzMDhiNGIzZmJkNzgxM2FiMGRhMDRmOWUzMzY1NDYxNjJlZTU2YjNlZmYwYzY1ZmQ0ZmQzNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3MjNjYmFhNmU1ZGI5OTZkNmJmNzcxYzAwYmQ1NDhjN2I3MDBkYmZmYTZjMGU3N2JjYjYxMTU5MjUyMzJmY2RhJyxcbiAgICAgICAgJzk2ZTg2N2I1NTk1Y2M0OThhOTIxMTM3NDg4ODI0ZDZlMjY2MGEwNjUzNzc5NDk0ODAxZGMwNjlkOWViMzlmNWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZWViZmE0ZDQ5M2JlYmY5OGJhNWZlZWM4MTJjMmQzYjUwOTQ3OTYxMjM3YTkxOTgzOWE1MzNlY2EwZTdkZDdmYScsXG4gICAgICAgICc1ZDlhOGNhMzk3MGVmMGYyNjllZTdlZGFmMTc4MDg5ZDlhZTRjZGMzYTcxMWY3MTJkZGZkNGZkYWUxZGU4OTk5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzEwMGY0NGRhNjk2ZTcxNjcyNzkxZDBhMDliN2JkZTQ1OWYxMjE1YTI5YjNjMDNiZmVmZDc4MzViMzlhNDhkYjAnLFxuICAgICAgICAnY2RkOWUxMzE5MmEwMGI3NzJlYzhmMzMwMGMwOTA2NjZiN2ZmNGExOGZmNTE5NWFjMGZiZDVjZDYyYmM2NWEwOSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlMTAzMWJlMjYyYzdlZDFiMWRjOTIyN2E0YTA0YzAxN2E3N2Y4ZDQ0NjRmM2IzODUyYzhhY2RlNmU1MzRmZDJkJyxcbiAgICAgICAgJzlkNzA2MTkyODk0MDQwNWU2YmI2YTQxNzY1OTc1MzVhZjI5MmRkNDE5ZTFjZWQ3OWE0NGYxOGYyOTQ1NmEwMGQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZmVlYTZjYWU0NmQ1NWI1MzBhYzI4MzlmMTQzYmQ3ZWM1Y2Y4YjI2NmE0MWQ2YWY1MmQ1ZTY4OGQ5MDk0Njk2ZCcsXG4gICAgICAgICdlNTdjNmI2Yzk3ZGNlMWJhYjA2ZTRlMTJiZjNlY2Q1Yzk4MWM4OTU3Y2M0MTQ0MmQzMTU1ZGViZjE4MDkwMDg4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RhNjdhOTFkOTEwNDljZGNiMzY3YmU0YmU2ZmZjYTNjZmVlZDY1N2Q4MDg1ODNkZTMzZmE5NzhiYzFlYzZjYjEnLFxuICAgICAgICAnOWJhY2FhMzU0ODE2NDJiYzQxZjQ2M2Y3ZWM5NzgwZTVkZWM3YWRjNTA4Zjc0MGExN2U5ZWE4ZTI3YTY4YmUxZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1MzkwNGZhYTBiMzM0Y2RkYTZlMDAwOTM1ZWYyMjE1MWVjMDhkMGY3YmIxMTA2OWY1NzU0NWNjYzFhMzdiN2MwJyxcbiAgICAgICAgJzViYzA4N2QwYmM4MDEwNmQ4OGM5ZWNjYWMyMGQzYzFjMTM5OTk5ODFlMTQ0MzQ2OTlkY2IwOTZiMDIyNzcxYzgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGU3YmNkMGJkMzU5ODNhNzcxOWNjYTc3NjRjYTkwNjc3OWI1M2EwNDNhOWI4YmNhZWZmOTU5ZjQzYWQ4NjA0NycsXG4gICAgICAgICcxMGI3NzcwYjJhM2RhNGIzOTQwMzEwNDIwY2E5NTE0NTc5ZTg4ZTJlNDdmZDY4YjNlYTEwMDQ3ZTg0NjAzNzJhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM4NWVlZDM0YzFjZGZmMjFlNmQwODE4Njg5YjgxYmRlNzFhN2Y0ZjE4Mzk3ZTY2OTBhODQxZTE1OTljNDM4NjInLFxuICAgICAgICAnMjgzYmViYzNlOGVhMjNmNTY3MDFkZTE5ZTllYmY0NTc2YjMwNGVlYzIwODZkYzhjYzA0NThmZTU1NDJlNTQ1MydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2ZjlkOWI4MDNlY2YxOTE2MzdjNzNhNDQxM2RmYTE4MGZkZGY4NGE1OTQ3ZmJjOWM2MDZlZDg2YzNmYWMzYTcnLFxuICAgICAgICAnN2M4MGM2OGU2MDMwNTliYTY5YjhlMmEzMGU0NWM0ZDQ3ZWE0ZGQyZjVjMjgxMDAyZDg2ODkwNjAzYTg0MjE2MCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczMzIyZDQwMTI0M2M0ZTI1ODJhMjE0N2MxMDRkNmVjYmY3NzRkMTYzZGIwZjVlNTMxM2I3ZTBlNzQyZDBlNmJkJyxcbiAgICAgICAgJzU2ZTcwNzk3ZTk2NjRlZjViZmIwMTliYzRkZGFmOWI3MjgwNWY2M2VhMjg3M2FmNjI0ZjNhMmU5NmMyOGIyYTAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODU2NzJjN2QyZGUwYjdkYTJiZDE3NzBkODk2NjU4Njg3NDFiM2Y5YWY3NjQzMzk3NzIxZDc0ZDI4MTM0YWI4MycsXG4gICAgICAgICc3YzQ4MWI5YjViNDNiMmViNjM3NDA0OWJmYTYyYzJlNWU3N2YxN2ZjYzUyOThmNDRjOGUzMDk0Zjc5MDMxM2E2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzk0OGJmODA5YjE5ODhhNDZiMDZjOWYxOTE5NDEzYjEwZjkyMjZjNjBmNjY4ODMyZmZkOTU5YWY2MGM4MmEwYScsXG4gICAgICAgICc1M2E1NjI4NTZkY2I2NjQ2ZGM2Yjc0YzVkMWMzNDE4YzZkNGRmZjA4Yzk3Y2QyYmVkNGNiN2Y4OGQ4YzhlNTg5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzYyNjBjZTdmNDYxODAxYzM0ZjA2N2NlMGYwMjg3M2E4ZjFiMGU0NGRmYzY5NzUyYWNjZWNkODE5ZjM4ZmQ4ZTgnLFxuICAgICAgICAnYmMyZGE4MmI2ZmE1YjU3MWE3ZjA5MDQ5Nzc2YTFlZjdlY2QyOTIyMzgwNTFjMTk4YzFhODRlOTViMmI0YWUxNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlNTAzN2RlMGFmYzFkOGQ0M2Q4MzQ4NDE0YmJmNDEwMzA0M2VjOGY1NzViZmRjNDMyOTUzY2M4ZDIwMzdmYTJkJyxcbiAgICAgICAgJzQ1NzE1MzRiYWE5NGQzYjVmOWY5OGQwOWZiOTkwYmRkYmQ1ZjViMDNlYzQ4MWYxMGUwZTVkYzg0MWQ3NTViZGEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTA2MzcyYjBmNGEyMDdhZGY1ZWE5MDVlOGYxNzcxYjRlN2U4ZGJkMWM2YTZjNWI3MjU4NjZhMGFlNGZjZTcyNScsXG4gICAgICAgICc3YTkwODk3NGJjZTE4Y2ZlMTJhMjdiYjJhZDVhNDg4Y2Q3NDg0YTc3ODcxMDQ4NzBiMjcwMzRmOTRlZWUzMWRkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzIxM2M3YTcxNWNkNWQ0NTM1OGQwYmJmOWRjMGNlMDIyMDRiMTBiZGRlMmEzZjU4NTQwYWQ2OTA4ZDA1NTk3NTQnLFxuICAgICAgICAnNGI2ZGFkMGI1YWU0NjI1MDcwMTNhZDA2MjQ1YmExOTBiYjQ4NTBmNWYzNmE3ZWVkZGZmMmMyNzUzNGI0NThmMidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0ZTdjMjcyYTdhZjRiMzRlOGRiYjkzNTJhNTQxOWE4N2UyODM4YzcwYWRjNjJjZGRmMGNjM2EzYjA4ZmJkNTNjJyxcbiAgICAgICAgJzE3NzQ5Yzc2NmM5ZDBiMThlMTZmZDA5ZjZkZWY2ODFiNTMwYjk2MTRiZmY3ZGQzM2UwYjM5NDE4MTdkY2FhZTYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZmVhNzRlM2RiZTc3OGIxYjEwZjIzOGFkNjE2ODZhYTVjNzZlM2RiMmJlNDMwNTc2MzI0MjdlMjg0MGZiMjdiNicsXG4gICAgICAgICc2ZTA1NjhkYjliMGIxMzI5N2NmNjc0ZGVjY2I2YWY5MzEyNmI1OTZiOTczZjdiNzc3MDFkM2RiN2YyM2NiOTZmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc2ZTY0MTEzZjY3N2NmMGUxMGEyNTcwZDU5OTk2OGQzMTU0NGUxNzliNzYwNDMyOTUyYzAyYTQ0MTdiZGRlMzknLFxuICAgICAgICAnYzkwZGRmOGRlZTRlOTVjZjU3NzA2NmQ3MDY4MWYwZDM1ZTJhMzNkMmI1NmQyMDMyYjRiMTc1MmQxOTAxYWMwMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjNzM4YzU2YjAzYjJhYmUxZTgyODFiYWE3NDNmOGY5YThmN2NjNjQzZGYyNmNiZWUzYWIxNTAyNDJiY2JiODkxJyxcbiAgICAgICAgJzg5M2ZiNTc4OTUxYWQyNTM3ZjcxOGYyZWFjYmZiYmJiODIzMTRlZWY3ODgwY2ZlOTE3ZTczNWQ5Njk5YTg0YzMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDg5NTYyNjU0OGI2NWI4MWUyNjRjNzYzN2M5NzI4NzdkMWQ3MmU1ZjNhOTI1MDE0MzcyZTlmNjU4OGY2YzE0YicsXG4gICAgICAgICdmZWJmYWEzOGYyYmM3ZWFlNzI4ZWM2MDgxOGMzNDBlYjAzNDI4ZDYzMmJiMDY3ZTE3OTM2M2VkNzVkN2Q5OTFmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2I4ZGE5NDAzMmE5NTc1MThlYjBmNjQzMzU3MWU4NzYxY2VmZmM3MzY5M2U4NGVkZDQ5MTUwYTU2NGY2NzZlMDMnLFxuICAgICAgICAnMjgwNGRmYTQ0ODA1YTFlNGQ3Yzk5Y2M5NzYyODA4YjA5MmNjNTg0ZDk1ZmYzYjUxMTQ4OGU0ZTc0ZWZkZjZlNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlODBmZWExNDQ0MWZiMzNhN2Q4YWRhYjk0NzVkN2ZhYjIwMTllZmZiNTE1NmE3OTJmMWExMTc3OGUzYzBkZjVkJyxcbiAgICAgICAgJ2VlZDFkZTdmNjM4ZTAwNzcxZTg5NzY4Y2EzY2E5NDQ3MmQxNTVlODBhZjMyMmVhOWZjYjQyOTFiNmFjOWVjNzgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYTMwMTY5N2JkZmNkNzA0MzEzYmE0OGU1MWQ1Njc1NDNmMmExODIwMzFlZmQ2OTE1ZGRjMDdiYmNjNGUxNjA3MCcsXG4gICAgICAgICc3MzcwZjkxY2ZiNjdlNGY1MDgxODA5ZmEyNWQ0MGY5YjE3MzVkYmY3YzBhMTFhMTMwYzBkMWEwNDFlMTc3ZWExJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzkwYWQ4NWIzODlkNmI5MzY0NjNmOWQwNTEyNjc4ZGUyMDhjYzMzMGIxMTMwN2ZmZmFiN2FjNjNlM2ZiMDRlZDQnLFxuICAgICAgICAnZTUwN2EzNjIwYTM4MjYxYWZmZGNiZDk0MjcyMjJiODM5YWVmYWJlMTU4Mjg5NGQ5OTFkNGQ0OGNiNmVmMTUwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhmNjhiOWQyZjYzYjVmMzM5MjM5YzFhZDk4MWYxNjJlZTg4YzU2Nzg3MjNlYTMzNTFiN2I0NDRjOWVjNGMwZGEnLFxuICAgICAgICAnNjYyYTlmMmRiYTA2Mzk4NmRlMWQ5MGMyYjZiZTIxNWRiYmVhMmNmZTk1NTEwYmZkZjIzY2JmNzk1MDFmZmY4MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlNGYzZmIwMTc2YWY4NWQ2NWZmOTlmZjkxOThjMzYwOTFmNDhlODY1MDM2ODFlM2U2Njg2ZmQ1MDUzMjMxZTExJyxcbiAgICAgICAgJzFlNjM2MzNhZDBlZjRmMWMxNjYxYTZkMGVhMDJiNzI4NmNjN2U3NGVjOTUxZDFjOTgyMmMzODU3NmZlYjczYmMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGMwMGZhOWIxOGViZjMzMWViOTYxNTM3YTQ1YTQyNjZjNzAzNGYyZjBkNGUxZDA3MTZmYjZlYWUyMGVhZTI5ZScsXG4gICAgICAgICdlZmE0NzI2N2ZlYTUyMWExYTlkYzM0M2EzNzM2Yzk3NGMyZmFkYWZhODFlMzZjNTRlN2QyYTRjNjY3MDI0MTRiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2U3YTI2Y2U2OWRkNDgyOWYzZTEwY2VjMGE5ZTk4ZWQzMTQzZDA4NGYzMDhiOTJjMDk5N2ZkZGZjNjBjYjNlNDEnLFxuICAgICAgICAnMmE3NThlMzAwZmE3OTg0YjQ3MWIwMDZhMWFhZmJiMThkMGE2YjJjMDQyMGU4M2UyMGU4YTk0MjFjZjJjZmQ1MSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiNjQ1OWUwZWUzNjYyZWM4ZDIzNTQwYzIyM2JjYmRjNTcxY2JjYjk2N2Q3OTQyNGYzY2YyOWViM2RlNmI4MGVmJyxcbiAgICAgICAgJzY3Yzg3NmQwNmYzZTA2ZGUxZGFkZjE2ZTU2NjFkYjNjNGIzYWU2ZDQ4ZTM1YjJmZjMwYmYwYjYxYTcxYmE0NSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkNjhhODBjODI4MGJiODQwNzkzMjM0YWExMThmMDYyMzFkNmYxZmM2N2U3M2M1YTVkZWRhMGY1YjQ5Njk0M2U4JyxcbiAgICAgICAgJ2RiOGJhOWZmZjRiNTg2ZDAwYzRiMWY5MTc3YjBlMjhiNWIwZTdiOGY3ODQ1Mjk1YTI5NGM4NDI2NmIxMzMxMjAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzI0YWVkN2RmNjVjODA0MjUyZGMwMjcwOTA3YTMwYjA5NjEyYWViOTczNDQ5Y2VhNDA5NTk4MGZjMjhkM2Q1ZCcsXG4gICAgICAgICc2NDhhMzY1Nzc0YjYxZjJmZjEzMGMwYzM1YWVjMWY0ZjE5MjEzYjBjN2UzMzI4NDM5NjcyMjRhZjk2YWI3Yzg0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzRkZjljMTQ5MTljZGU2MWY2ZDUxZGZkYmU1ZmVlNWRjZWVjNDE0M2JhOGQxY2E4ODhlOGJkMzczZmQwNTRjOTYnLFxuICAgICAgICAnMzVlYzUxMDkyZDg3MjgwNTA5NzRjMjNhMWQ4NWQ0YjVkNTA2Y2RjMjg4NDkwMTkyZWJhYzA2Y2FkMTBkNWQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOWMzOTE5YTg0YTQ3NDg3MGZhZWQ4YTljMWNjNjYwMjE1MjM0ODkwNTRkN2YwMzA4Y2JmYzk5YzhhYzFmOThjZCcsXG4gICAgICAgICdkZGI4NGYwZjRhNGRkZDU3NTg0ZjA0NGJmMjYwZTY0MTkwNTMyNmY3NmM2NGM4ZTZiZTdlNWUwM2Q0ZmM1OTlkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzYwNTcxNzBiMWRkMTJmZGY4ZGUwNWYyODFkOGUwNmJiOTFlMTQ5M2E4YjkxZDRjYzVhMjEzODIxMjBhOTU5ZTUnLFxuICAgICAgICAnOWExYWYwYjI2YTZhNDgwN2FkZDlhMmRhZjcxZGYyNjI0NjUxNTJiYzNlZTI0YzY1ZTg5OWJlOTMyMzg1YTJhOCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhNTc2ZGY4ZTIzYTA4NDExNDIxNDM5YTQ1MThkYTMxODgwY2VmMGZiYTdkNGRmMTJiMWE2OTczZWVjYjk0MjY2JyxcbiAgICAgICAgJzQwYTZiZjIwZTc2NjQwYjJjOTJiOTdhZmU1OGNkODJjNDMyZTEwYTdmNTE0ZDlmM2VlOGJlMTFhZTFiMjhlYzgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzc3OGE3OGMyOGRlYzNlMzBhMDVmZTk2MjlkZThjMzhiYjMwZDFmNWNmOWEzYTIwOGY3NjM4ODliZTU4YWQ3MScsXG4gICAgICAgICczNDYyNmQ5YWI1YTViMjJmZjcwOThlMTJmMmZmNTgwMDg3YjM4NDExZmYyNGFjNTYzYjUxM2ZjMWZkOWY0M2FjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzkyODk1NWVlNjM3YTg0NDYzNzI5ZmQzMGU3YWZkMmVkNWY5NjI3NGU1YWQ3ZTVjYjA5ZWRhOWMwNmQ5MDNhYycsXG4gICAgICAgICdjMjU2MjEwMDNkM2Y0MmE4MjdiNzhhMTMwOTNhOTVlZWFjM2QyNmVmYThhOGQ4M2ZjNTE4MGU5MzViY2QwOTFmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzg1ZDBmZWYzZWM2ZGIxMDkzOTkwNjRmM2EwZTNiMjg1NTY0NWI0YTkwN2FkMzU0NTI3YWFlNzUxNjNkODI3NTEnLFxuICAgICAgICAnMWYwMzY0ODQxM2EzOGMwYmUyOWQ0OTZlNTgyY2Y1NjYzZTg3NTFlOTY4NzczMzE1ODJjMjM3YTI0ZWIxZjk2MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmZjJiMGRjZTk3ZWVjZTk3YzFjOWI2MDQxNzk4Yjg1ZGZkZmI2ZDg4ODJkYTIwMzA4ZjU0MDQ4MjQ1MjYwODdlJyxcbiAgICAgICAgJzQ5M2QxM2ZlZjUyNGJhMTg4YWY0YzRkYzU0ZDA3OTM2YzdiN2VkNmZiOTBlMmNlYjJjOTUxZTAxZjBjMjk5MDcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODI3ZmJiZTRiMWU4ODBlYTllZDJiMmU2MzAxYjIxMmI1N2YxZWUxNDhjZDZkZDI4NzgwZTVlMmNmODU2ZTI0MScsXG4gICAgICAgICdjNjBmOWM5MjNjNzI3YjBiNzFiZWYyYzY3ZDFkMTI2ODdmZjdhNjMxODY5MDMxNjZkNjA1YjY4YmFlYzI5M2VjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2VhYTY0OWYyMWY1MWJkYmFlN2JlNGFlMzRjZTZlNTIxN2E1OGZkY2U3ZjQ3ZjlhYTdmM2I1OGZhMjEyMGUyYjMnLFxuICAgICAgICAnYmUzMjc5ZWQ1YmJiYjAzYWM2OWE4MGY4OTg3OWFhNWEwMWE2Yjk2NWYxM2Y3ZTU5ZDQ3YTUzMDViYTVhZDkzZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlNGE0MmQ0M2M1Y2YxNjlkOTM5MWRmNmRlY2Y0MmVlNTQxYjZkOGYwYzlhMTM3NDAxZTIzNjMyZGRhMzRkMjRmJyxcbiAgICAgICAgJzRkOWY5MmU3MTZkMWM3MzUyNmZjOTljY2ZiOGFkMzRjZTg4NmVlZGZhOGQ4ZTRmMTNhN2Y3MTMxZGViYTk0MTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMWVjODBmZWYzNjBjYmRkOTU0MTYwZmFkYWIzNTJiNmI5MmI1MzU3NmE4OGZlYTQ5NDcxNzNiOWQ0MzAwYmYxOScsXG4gICAgICAgICdhZWVmZTkzNzU2YjUzNDBkMmYzYTQ5NThhN2FiYmY1ZTAxNDZlNzdmNjI5NWEwN2I2NzFjZGMxY2MxMDdjZWZkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE0NmE3NzhjMDQ2NzBjMmY5MWIwMGFmNDY4MGRmYThiY2UzNDkwNzE3ZDU4YmE4ODlkZGI1OTI4MzY2NjQyYmUnLFxuICAgICAgICAnYjMxOGUwZWMzMzU0MDI4YWRkNjY5ODI3ZjlkNGIyODcwYWFhOTcxZDJmN2U1ZWQxZDBiMjk3NDgzZDgzZWZkMCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmYTUwYzBmNjFkMjJlNWYwN2UzYWNlYmIxYWEwN2IxMjhkMDAxMjIwOWEyOGI5Nzc2ZDc2YTg3OTMxODBlZWY5JyxcbiAgICAgICAgJzZiODRjNjkyMjM5N2ViYTliNzJjZDI4NzIyODFhNjhhNWU2ODMyOTNhNTdhMjEzYjM4Y2Q4ZDdkM2Y0ZjI4MTEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGExZDYxZDBjYTcyMWExMWIxYTViZjZiN2Q4OGU4NDIxYTI4OGFiNWQ1YmJhNTIyMGU1M2QzMmI1ZjA2N2VjMicsXG4gICAgICAgICc4MTU3ZjU1YTdjOTkzMDZjNzljMDc2NjE2MWM5MWUyOTY2YTczODk5ZDI3OWI0OGE2NTVmYmEwZjFhZDgzNmYxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2E4ZTI4MmZmMGM5NzA2OTA3MjE1ZmY5OGU4ZmQ0MTY2MTUzMTFkZTA0NDZmMWUwNjJhNzNiMDYxMGQwNjRlMTMnLFxuICAgICAgICAnN2Y5NzM1NWI4ZGI4MWMwOWFiZmI3ZjNjNWIyNTE1ODg4YjY3OWEzZTUwZGQ2YmQ2Y2VmN2M3MzExMWY0Y2MwYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNzRhNTNiOWM5YTI4NTg3MmQzOWU1NmU2OTEzY2FiMTVkNTliMWZhNTEyNTA4YzAyMmYzODJkZTgzMTk0OTdjJyxcbiAgICAgICAgJ2NjYzlkYzM3YWJmYzljMTY1N2I0MTU1ZjJjNDdmOWU2NjQ2YjNhMWQ4Y2I5ODU0MzgzZGExM2FjMDc5YWZhNzMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOTU5Mzk2OTgxOTQzNzg1YzNkM2U1N2VkZjUwMThjZGJlMDM5ZTczMGU0OTE4YjNkODg0ZmRmZjA5NDc1YjdiYScsXG4gICAgICAgICcyZTdlNTUyODg4YzMzMWRkOGJhMDM4NmE0YjljZDY4NDljNjUzZjY0Yzg3MDkzODVlOWI4YWJmODc1MjRmMmZkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2QyYTYzYTUwYWU0MDFlNTZkNjQ1YTExNTNiMTA5YThmY2NhMGE0M2Q1NjFmYmEyZGJiNTEzNDBjOWQ4MmIxNTEnLFxuICAgICAgICAnZTgyZDg2ZmI2NDQzZmNiNzU2NWFlZTU4YjI5NDgyMjBhNzBmNzUwYWY0ODRjYTUyZDQxNDIxNzRkY2Y4OTQwNSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2NDU4N2UyMzM1NDcxZWI4OTBlZTc4OTZkN2NmZGM4NjZiYWNiZGJkMzgzOTMxN2IzNDM2ZjliNDU2MTdlMDczJyxcbiAgICAgICAgJ2Q5OWZjZGQ1YmY2OTAyZTJhZTk2ZGQ2NDQ3YzI5OWExODViOTBhMzkxMzNhZWFiMzU4Mjk5ZTVlOWZhZjY1ODknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODQ4MWJkZTBlNGU0ZDg4NWIzYTU0NmQzZTU0OWRlMDQyZjBhYTZjZWEyNTBlN2ZkMzU4ZDZjODZkZDQ1ZTQ1OCcsXG4gICAgICAgICczOGVlN2I4Y2JhNTQwNGRkODRhMjViZjM5Y2VjYjJjYTkwMGE3OWM0MmIyNjJlNTU2ZDY0YjFiNTk3NzkwNTdlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzEzNDY0YTU3YTc4MTAyYWE2MmI2OTc5YWU4MTdmNDYzN2ZmY2ZlZDNjNGIxY2UzMGJjZDYzMDNmNmNhZjY2NmInLFxuICAgICAgICAnNjliZTE1OTAwNDYxNDU4MGVmN2U0MzM0NTNjY2IwY2E0OGYzMDBhODFkMDk0MmUxM2Y0OTVhOTA3ZjZlY2MyNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiYzRhOWRmNWI3MTNmZTJlOWFlZjQzMGJjYzFkYzk3YTBjZDljY2VkZTJmMjg1ODhjYWRhM2EwZDJkODNmMzY2JyxcbiAgICAgICAgJ2QzYTgxY2E2ZTc4NWMwNjM4MzkzN2FkZjRiNzk4Y2FhNmU4YTlmYmZhNTQ3YjE2ZDc1OGQ2NjY1ODFmMzNjMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4YzI4YTk3YmY4Mjk4YmMwZDIzZDhjNzQ5NDUyYTMyZTY5NGI2NWUzMGE5NDcyYTM5NTRhYjMwZmU1MzI0Y2FhJyxcbiAgICAgICAgJzQwYTMwNDYzYTMzMDUxOTMzNzhmZWRmMzFmN2NjMGViN2FlNzg0ZjA0NTFjYjk0NTllNzFkYzczY2JlZjk0ODInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGVhOTY2NjEzOTUyN2E4YzFkZDk0Y2U0ZjA3MWZkMjNjOGIzNTBjNWE0YmIzMzc0OGM0YmExMTFmYWNjYWUwJyxcbiAgICAgICAgJzYyMGVmYWJiYzhlZTI3ODJlMjRlN2MwY2ZiOTVjNWQ3MzViNzgzYmU5Y2YwZjhlOTU1YWYzNGEzMGU2MmI5NDUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGQzNjI1ZmFlZjViYTA2MDc0NjY5NzE2YmJkMzc4OGQ4OWJkZGU4MTU5NTk5NjgwOTJmNzZjYzRlYjlhOTc4NycsXG4gICAgICAgICc3YTE4OGZhMzUyMGUzMGQ0NjFkYTI1MDEwNDU3MzFjYTk0MTQ2MTk4Mjg4MzM5NTkzN2Y2OGQwMGM2NDRhNTczJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Y3MTBkNzlkOWViOTYyMjk3ZTRmNjIzMmI0MGU4ZjdmZWIyYmM2MzgxNDYxNGQ2OTJjMTJkZTc1MjQwODIyMWUnLFxuICAgICAgICAnZWE5OGU2NzIzMmQzYjMyOTVkM2I1MzU1MzIxMTVjY2FjODYxMmM3MjE4NTE2MTc1MjZhZTQ3YTljNzdiZmM4MidcbiAgICAgIF1cbiAgICBdXG4gIH0sXG4gIG5hZjoge1xuICAgIHduZDogNyxcbiAgICBwb2ludHM6IFtcbiAgICAgIFtcbiAgICAgICAgJ2Y5MzA4YTAxOTI1OGMzMTA0OTM0NGY4NWY4OWQ1MjI5YjUzMWM4NDU4MzZmOTliMDg2MDFmMTEzYmNlMDM2ZjknLFxuICAgICAgICAnMzg4ZjdiMGY2MzJkZTgxNDBmZTMzN2U2MmEzN2YzNTY2NTAwYTk5OTM0YzIyMzFiNmNiOWZkNzU4NGI4ZTY3MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyZjhiZGU0ZDFhMDcyMDkzNTViNGE3MjUwYTVjNTEyOGU4OGI4NGJkZGM2MTlhYjdjYmE4ZDU2OWIyNDBlZmU0JyxcbiAgICAgICAgJ2Q4YWMyMjI2MzZlNWUzZDZkNGRiYTlkZGE2YzljNDI2Zjc4ODI3MWJhYjBkNjg0MGRjYTg3ZDNhYTZhYzYyZDYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNWNiZGYwNjQ2ZTVkYjRlYWEzOThmMzY1ZjJlYTdhMGUzZDQxOWI3ZTAzMzBlMzljZTkyYmRkZWRjYWM0ZjliYycsXG4gICAgICAgICc2YWViY2E0MGJhMjU1OTYwYTMxNzhkNmQ4NjFhNTRkYmE4MTNkMGI4MTNmZGU3YjVhNTA4MjYyODA4NzI2NGRhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2FjZDQ4NGUyZjBjN2Y2NTMwOWFkMTc4YTlmNTU5YWJkZTA5Nzk2OTc0YzU3ZTcxNGMzNWYxMTBkZmMyN2NjYmUnLFxuICAgICAgICAnY2MzMzg5MjFiMGE3ZDlmZDY0MzgwOTcxNzYzYjYxZTlhZGQ4ODhhNDM3NWY4ZTBmMDVjYzI2MmFjNjRmOWMzNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NzRhZTdmODU4YTk0MTFlNWVmNDI0NmI3MGM2NWFhYzU2NDk5ODBiZTVjMTc4OTFiYmVjMTc4OTVkYTAwOGNiJyxcbiAgICAgICAgJ2Q5ODRhMDMyZWI2YjVlMTkwMjQzZGQ1NmQ3YjdiMzY1MzcyZGIxZTJkZmY5ZDZhODMwMWQ3NGM5Yzk1M2M2MWInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZjI4NzczYzJkOTc1Mjg4YmM3ZDFkMjA1YzM3NDg2NTFiMDc1ZmJjNjYxMGU1OGNkZGVlZGRmOGYxOTQwNWFhOCcsXG4gICAgICAgICdhYjA5MDJlOGQ4ODBhODk3NTgyMTJlYjY1Y2RhZjQ3M2ExYTA2ZGE1MjFmYTkxZjI5YjVjYjUyZGIwM2VkODEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDc5MjRkNGY3ZDQzZWE5NjVhNDY1YWUzMDk1ZmY0MTEzMWU1OTQ2ZjNjODVmNzllNDRhZGJjZjhlMjdlMDgwZScsXG4gICAgICAgICc1ODFlMjg3MmE4NmM3MmE2ODM4NDJlYzIyOGNjNmRlZmVhNDBhZjJiZDg5NmQzYTVjNTA0ZGM5ZmY2YTI2YjU4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RlZmRlYTRjZGI2Nzc3NTBhNDIwZmVlODA3ZWFjZjIxZWI5ODk4YWU3OWI5NzY4NzY2ZTRmYWEwNGEyZDRhMzQnLFxuICAgICAgICAnNDIxMWFiMDY5NDYzNTE2OGU5OTdiMGVhZDJhOTNkYWVjZWQxZjRhMDRhOTVjMGY2Y2ZiMTk5ZjY5ZTU2ZWI3NydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyYjRlYTBhNzk3YTQ0M2QyOTNlZjVjZmY0NDRmNDk3OWYwNmFjZmViZDdlODZkMjc3NDc1NjU2MTM4Mzg1YjZjJyxcbiAgICAgICAgJzg1ZTg5YmMwMzc5NDVkOTNiMzQzMDgzYjVhMWM4NjEzMWEwMWY2MGM1MDI2OTc2M2I1NzBjODU0ZTVjMDliN2EnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzUyYmJmNGE0Y2RkMTI1NjRmOTNmYTMzMmNlMzMzMzAxZDlhZDQwMjcxZjgxMDcxODEzNDBhZWYyNWJlNTlkNScsXG4gICAgICAgICczMjFlYjQwNzUzNDhmNTM0ZDU5YzE4MjU5ZGRhM2UxZjRhMWIzYjJlNzFiMTAzOWM2N2JkM2Q4YmNmODE5OThjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzJmYTIxMDRkNmIzOGQxMWIwMjMwMDEwNTU5ODc5MTI0ZTQyYWI4ZGZlZmY1ZmYyOWRjOWNkYWRkNGVjYWNjM2YnLFxuICAgICAgICAnMmRlMTA2ODI5NWRkODY1YjY0NTY5MzM1YmQ1ZGQ4MDE4MWQ3MGVjZmM4ODI2NDg0MjNiYTc2YjUzMmI3ZDY3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzkyNDgyNzliMDliNGQ2OGRhYjIxYTliMDY2ZWRkYTgzMjYzYzNkODRlMDk1NzJlMjY5Y2EwY2Q3ZjU0NTM3MTQnLFxuICAgICAgICAnNzMwMTZmN2JmMjM0YWFkZTVkMWFhNzFiZGVhMmIxZmYzZmMwZGUyYTg4NzkxMmZmZTU0YTMyY2U5N2NiMzQwMidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkYWVkNGYyYmUzYThiZjI3OGU3MDEzMmZiMGJlYjc1MjJmNTcwZTE0NGJmNjE1YzA3ZTk5NmQ0NDNkZWU4NzI5JyxcbiAgICAgICAgJ2E2OWRjZTRhN2Q2Yzk4ZThkNGExYWNhODdlZjhkNzAwM2Y4M2MyMzBmM2FmYTcyNmFiNDBlNTIyOTBiZTFjNTUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYzQ0ZDEyYzcwNjVkODEyZThhY2YyOGQ3Y2JiMTlmOTAxMWVjZDllOWZkZjI4MWIwZTZhM2I1ZTg3ZDIyZTdkYicsXG4gICAgICAgICcyMTE5YTQ2MGNlMzI2Y2RjNzZjNDU5MjZjOTgyZmRhYzBlMTA2ZTg2MWVkZjYxYzVhMDM5MDYzZjBlMGU2NDgyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzZhMjQ1YmY2ZGM2OTg1MDRjODlhMjBjZmRlZDYwODUzMTUyYjY5NTMzNmMyODA2M2I2MWM2NWNiZDI2OWU2YjQnLFxuICAgICAgICAnZTAyMmNmNDJjMmJkNGE3MDhiM2Y1MTI2ZjE2YTI0YWQ4YjMzYmE0OGQwNDIzYjZlZmQ1ZTYzNDgxMDBkOGE4MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNjk3ZmZhNmZkOWRlNjI3YzA3N2UzZDJmZTU0MTA4NGNlMTMzMDBiMGJlYzExNDZmOTVhZTU3ZjBkMGJkNmE1JyxcbiAgICAgICAgJ2I5YzM5OGYxODY4MDZmNWQyNzU2MTUwNmU0NTU3NDMzYTJjZjE1MDA5ZTQ5OGFlN2FkZWU5ZDYzZDAxYjIzOTYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNjA1YmRiMDE5OTgxNzE4Yjk4NmQwZjA3ZTgzNGNiMGQ5ZGViODM2MGZmYjdmNjFkZjk4MjM0NWVmMjdhNzQ3OScsXG4gICAgICAgICcyOTcyZDJkZTRmOGQyMDY4MWE3OGQ5M2VjOTZmZTIzYzI2YmZhZTg0ZmIxNGRiNDNiMDFlMWU5MDU2YjhjNDknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNjJkMTRkYWI0MTUwYmY0OTc0MDJmZGM0NWEyMTVlMTBkY2IwMWMzNTQ5NTliMTBjZmUzMWM3ZTlkODdmZjMzZCcsXG4gICAgICAgICc4MGZjMDZiZDhjYzViMDEwOTgwODhhMTk1MGVlZDBkYjAxYWExMzI5NjdhYjQ3MjIzNWY1NjQyNDgzYjI1ZWFmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzgwYzYwYWQwMDQwZjI3ZGFkZTViNGIwNmM0MDhlNTZiMmM1MGU5ZjU2YjliOGI0MjVlNTU1YzJmODYzMDhiNmYnLFxuICAgICAgICAnMWMzODMwM2YxY2M1YzMwZjI2ZTY2YmFkN2ZlNzJmNzBhNjVlZWQ0Y2JlNzAyNGViMWFhMDFmNTY0MzBiZDU3YSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3YTkzNzVhZDYxNjdhZDU0YWE3NGM2MzQ4Y2M1NGQzNDRjYzVkYzk0ODdkODQ3MDQ5ZDVlYWJiMGZhMDNjOGZiJyxcbiAgICAgICAgJ2QwZTNmYTllY2E4NzI2OTA5NTU5ZTBkNzkyNjkwNDZiZGM1OWVhMTBjNzBjZTJiMDJkNDk5ZWMyMjRkYzdmNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkNTI4ZWNkOWI2OTZiNTRjOTA3YTllZDA0NTQ0N2E3OWJiNDA4ZWMzOWI2OGRmNTA0YmI1MWY0NTliYzNmZmM5JyxcbiAgICAgICAgJ2VlY2Y0MTI1MzEzNmU1Zjk5OTY2ZjIxODgxZmQ2NTZlYmM0MzQ1NDA1YzUyMGRiYzA2MzQ2NWI1MjE0MDk5MzMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDkzNzBhNGI1ZjQzNDEyZWEyNWY1MTRlOGVjZGFkMDUyNjYxMTVlNGE3ZWNiMTM4NzIzMTgwOGY4YjQ1OTYzJyxcbiAgICAgICAgJzc1OGYzZjQxYWZkNmVkNDI4YjMwODFiMDUxMmZkNjJhNTRjM2YzYWZiYjViNjc2NGI2NTMwNTJhMTI5NDljOWEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzdmMjMwOTM2ZWU4OGNiYmQ3M2RmOTMwZDY0NzAyZWY4ODFkODExZTBlMTQ5OGUyZjFjMTNlYjFmYzM0NWQ3NCcsXG4gICAgICAgICc5NThlZjQyYTc4ODZiNjQwMGEwODI2NmU5YmExYjM3ODk2Yzk1MzMwZDk3MDc3Y2JiZThlYjNjNzY3MWM2MGQ2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2YyZGFjOTkxY2M0Y2U0YjllYTQ0ODg3ZTVjN2MwYmNlNThjODAwNzRhYjlkNGRiYWViMjg1MzFiNzczOWY1MzAnLFxuICAgICAgICAnZTBkZWRjOWIzYjJmOGRhZDRkYTFmMzJkZWMyNTMxZGY5ZWI1ZmJlYjA1OThlNGZkMWExMTdkYmE3MDNhM2MzNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0NjNiM2Q5ZjY2MjYyMWZiMWI0YmU4ZmJiZTI1MjAxMjVhMjE2Y2RmYzlkYWUzZGViY2JhNDg1MGM2OTBkNDViJyxcbiAgICAgICAgJzVlZDQzMGQ3OGMyOTZjMzU0MzExNDMwNmRkODYyMmQ3YzYyMmUyN2M5NzBhMWRlMzFjYjM3N2IwMWFmNzMwN2UnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZjE2ZjgwNDI0NGU0NmUyYTA5MjMyZDRhZmYzYjU5OTc2Yjk4ZmFjMTQzMjhhMmQxYTMyNDk2YjQ5OTk4ZjI0NycsXG4gICAgICAgICdjZWRhYmQ5YjgyMjAzZjdlMTNkMjA2ZmNkZjRlMzNkOTJhNmM1M2MyNmU1Y2NlMjZkNjU3OTk2MmM0ZTMxZGY2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2NhZjc1NDI3MmRjODQ1NjNiMDM1MmI3YTE0MzExYWY1NWQyNDUzMTVhY2UyN2M2NTM2OWUxNWY3MTUxZDQxZDEnLFxuICAgICAgICAnY2I0NzQ2NjBlZjM1ZjVmMmE0MWI2NDNmYTVlNDYwNTc1ZjRmYTliNzk2MjIzMmE1YzMyZjkwODMxOGEwNDQ3NidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyNjAwY2E0YjI4MmNiOTg2Zjg1ZDBmMTcwOTk3OWQ4YjQ0YTA5YzA3Y2I4NmQ3YzEyNDQ5N2JjODZmMDgyMTIwJyxcbiAgICAgICAgJzQxMTliODg3NTNjMTViZDZhNjkzYjAzZmNkZGJiNDVkNWFjNmJlNzRhYjVmMGVmNDRiMGJlOTQ3NWE3ZTRiNDAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzYzNWNhNzJkN2U4NDMyYzMzOGVjNTNjZDEyMjIwYmMwMWM0ODY4NWUyNGY3ZGM4YzYwMmE3NzQ2OTk4ZTQzNScsXG4gICAgICAgICc5MWI2NDk2MDk0ODlkNjEzZDFkNWU1OTBmNzhlNmQ3NGVjZmMwNjFkNTcwNDhiYWQ5ZTc2ZjMwMmM1YjljNjEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzU0ZTMyMzlmMzI1NTcwY2RiYmY0YTg3ZGVlZThhNjZiN2YyYjMzNDc5ZDQ2OGZiYzFhNTA3NDNiZjU2Y2MxOCcsXG4gICAgICAgICc2NzNmYjg2ZTViZGEzMGZiM2NkMGVkMzA0ZWE0OWEwMjNlZTMzZDAxOTdhNjk1ZDBjNWQ5ODA5M2M1MzY2ODMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTNlNmJkMTA3MWExZTk2YWZmNTc4NTljODJkNTcwZjAzMzA4MDA2NjFkMWM5NTJmOWZlMjY5NDY5MWQ5YjllOCcsXG4gICAgICAgICc1OWM5ZTBiYmEzOTRlNzZmNDBjMGFhNTgzNzlhM2NiNmE1YTIyODM5OTNlOTBjNDE2NzAwMmFmNDkyMGUzN2Y1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE4NmI0ODNkMDU2YTAzMzgyNmFlNzNkODhmNzMyOTg1YzRjY2IxZjMyYmEzNWY0YjRjYzQ3ZmRjZjA0YWE2ZWInLFxuICAgICAgICAnM2I5NTJkMzJjNjdjZjc3ZTJlMTc0NDZlMjA0MTgwYWIyMWZiODA5MDg5NTEzOGI0YTRhNzk3Zjg2ZTgwODg4YidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkZjlkNzBhNmI5ODc2Y2U1NDRjOTg1NjFmNGJlNGY3MjU0NDJlNmQyYjczN2Q5YzkxYTgzMjE3MjRjZTA5NjNmJyxcbiAgICAgICAgJzU1ZWIyZGFmZDg0ZDZjY2Q1Zjg2MmI3ODVkYzM5ZDRhYjE1NzIyMjcyMGVmOWRhMjE3YjhjNDVjZjJiYTI0MTcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNWVkZDVjYzIzYzUxZTg3YTQ5N2NhODE1ZDVkY2UwZjhhYjUyNTU0Zjg0OWVkODk5NWRlNjRjNWYzNGNlNzE0MycsXG4gICAgICAgICdlZmFlOWM4ZGJjMTQxMzA2NjFlOGNlYzAzMGM4OWFkMGMxM2M2NmMwZDE3YTI5MDVjZGM3MDZhYjczOTlhODY4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzI5MDc5OGMyYjY0NzY4MzBkYTEyZmUwMjI4N2U5ZTc3N2FhM2ZiYTFjMzU1YjE3YTcyMmQzNjJmODQ2MTRmYmEnLFxuICAgICAgICAnZTM4ZGE3NmRjZDQ0MDYyMTk4OGQwMGJjZjc5YWYyNWQ1YjI5YzA5NGRiMmEyMzE0NmQwMDNhZmQ0MTk0M2U3YSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhZjNjNDIzYTk1ZDlmNWIzMDU0NzU0ZWZhMTUwYWMzOWNkMjk1NTJmZTM2MDI1NzM2MmRmZGVjZWY0MDUzYjQ1JyxcbiAgICAgICAgJ2Y5OGEzZmQ4MzFlYjJiNzQ5YTkzYjBlNmYzNWNmYjQwYzhjZDVhYTY2N2ExNTU4MWJjMmZlZGVkNDk4ZmQ5YzYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzY2ZGJiMjRkMTM0ZTc0NWNjY2FhMjhjOTliZjI3NDkwNmJiNjZiMjZkY2Y5OGRmOGQyZmVkNTBkODg0MjQ5YScsXG4gICAgICAgICc3NDRiMTE1MmVhY2JlNWUzOGRjYzg4Nzk4MGRhMzhiODk3NTg0YTY1ZmEwNmNlZGQyYzkyNGY5N2NiYWM1OTk2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzU5ZGJmNDZmOGM5NDc1OWJhMjEyNzdjMzM3ODRmNDE2NDVmN2I0NGY2YzU5NmE1OGNlOTJlNjY2MTkxYWJlM2UnLFxuICAgICAgICAnYzUzNGFkNDQxNzVmYmMzMDBmNGVhNmNlNjQ4MzA5YTA0MmNlNzM5YTc5MTk3OThjZDg1ZTIxNmM0YTMwN2Y2ZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmMTNhZGE5NTEwM2M0NTM3MzA1ZTY5MWU3NGU5YTRhOGRkNjQ3ZTcxMWE5NWU3M2NiNjJkYzYwMThjZmQ4N2I4JyxcbiAgICAgICAgJ2UxMzgxN2I0NGVlMTRkZTY2M2JmNGJjODA4MzQxZjMyNjk0OWUyMWE2YTc1YzI1NzA3Nzg0MTliZGFmNTczM2QnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzc1NGI0ZmEwZThhY2VkMDZkNDE2N2EyYzU5Y2NhNGNkYTE4NjljMDZlYmFkZmI2NDg4NTUwMDE1YTg4NTIyYycsXG4gICAgICAgICczMGU5M2U4NjRlNjY5ZDgyMjI0Yjk2N2MzMDIwYjhmYThkMWU0ZTM1MGI2Y2JjYzUzN2E0OGI1Nzg0MTE2M2EyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzk0OGRjYWRmNTk5MGUwNDhhYTM4NzRkNDZhYmVmOWQ3MDE4NThmOTVkZTgwNDFkMmE2ODI4Yzk5ZTIyNjI1MTknLFxuICAgICAgICAnZTQ5MWE0MjUzN2Y2ZTU5N2Q1ZDI4YTMyMjRiMWJjMjVkZjkxNTRlZmJkMmVmMWQyY2JiYTJjYWU1MzQ3ZDU3ZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3OTYyNDE0NDUwYzc2YzE2ODljN2I0OGY4MjAyZWMzN2ZiMjI0Y2Y1YWMwYmZhMTU3MDMyOGE4YTNkN2M3N2FiJyxcbiAgICAgICAgJzEwMGI2MTBlYzRmZmI0NzYwZDVjMWZjMTMzZWY2ZjZiMTI1MDdhMDUxZjA0YWM1NzYwYWZhNWIyOWRiODM0MzcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzUxNDA4NzgzNDk2NGI1NGIxNWIxNjA2NDRkOTE1NDg1YTE2OTc3MjI1Yjg4NDdiYjBkZDA4NTEzN2VjNDdjYScsXG4gICAgICAgICdlZjBhZmJiMjA1NjIwNTQ0OGUxNjUyYzQ4ZTgxMjdmYzYwMzllNzdjMTVjMjM3OGI3ZTdkMTVhMGRlMjkzMzExJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2QzY2MzMGFkNmI0ODNlNGJjNzljZTJjOWRkOGJjNTQ5OTNlOTQ3ZWI4ZGY3ODdiNDQyOTQzZDNmN2I1MjdlYWYnLFxuICAgICAgICAnOGIzNzhhMjJkODI3Mjc4ZDg5YzVlOWJlOGY5NTA4YWUzYzJhZDQ2MjkwMzU4NjMwYWZiMzRkYjA0ZWVkZTBhNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNjI0ZDg0NzgwNzMyODYwY2UxYzc4ZmNiZmVmZTA4YjJiMjk4MjNkYjkxM2Y2NDkzOTc1YmEwZmY0ODQ3NjEwJyxcbiAgICAgICAgJzY4NjUxY2Y5YjZkYTkwM2UwOTE0NDQ4YzZjZDlkNGNhODk2ODc4ZjUyODJiZTRjOGNjMDZlMmE0MDQwNzg1NzUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzMzY2U4MGRhOTU1YThhMjY5MDJjOTU2MzNlNjJhOTg1MTkyNDc0YjVhZjIwN2RhNmRmN2I0ZmQ1ZmM2MWNkNCcsXG4gICAgICAgICdmNTQzNWEyYmQyYmFkZjdkNDg1YTRkOGI4ZGI5ZmNjZTNlMWVmOGUwMjAxZTQ1NzhjNTQ2NzNiYzFkYzVlYTFkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE1ZDk0NDEyNTQ5NDUwNjRjZjFhMWMzM2JiZDNiNDlmODk2NmM1MDkyMTcxZTY5OWVmMjU4ZGZhYjgxYzA0NWMnLFxuICAgICAgICAnZDU2ZWIzMGI2OTQ2M2U3MjM0ZjUxMzdiNzNiODQxNzc0MzQ4MDBiYWNlYmZjNjg1ZmMzN2JiZTllZmU0MDcwZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhMWQwZmNmMmVjOWRlNjc1YjYxMjEzNmU1Y2U3MGQyNzFjMjE0MTdjOWQyYjhhYWFhYzEzODU5OWQwNzE3OTQwJyxcbiAgICAgICAgJ2VkZDc3ZjUwYmNiNWEzY2FiMmU5MDczNzMwOTY2N2YyNjQxNDYyYTU0MDcwZjNkNTE5MjEyZDM5YzE5N2E2MjknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTIyZmJlMTVjMGFmOGNjYzU3ODBjMDczNWY4NGRiZTlhNzkwYmFkZWU4MjQ1YzA2YzdjYTM3MzMxY2IzNjk4MCcsXG4gICAgICAgICdhODU1YmFiYWQ1Y2Q2MGM4OGI0MzBhNjlmNTNhMWE3YTM4Mjg5MTU0OTY0Nzk5YmU0M2QwNmQ3N2QzMWRhMDYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzExMDkxZGQ5ODYwZThlMjBlZTEzNDczYzExNTVmNWY2OTYzNWUzOTQ3MDRlYWE3NDAwOTQ1MjI0NmNmYTliMycsXG4gICAgICAgICc2NmRiNjU2Zjg3ZDFmMDRmZmZkMWYwNDc4OGMwNjgzMDg3MWVjNWE2NGZlZWU2ODViZDgwZjBiMTI4NmQ4Mzc0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM0YzFmZDA0ZDMwMWJlODliMzFjMDQ0MmQzZTZhYzI0ODgzOTI4YjQ1YTkzNDA3ODE4NjdkNDIzMmVjMmRiZGYnLFxuICAgICAgICAnOTQxNDY4NWU5N2IxYjU5NTRiZDQ2ZjczMDE3NDEzNmQ1N2YxY2VlYjQ4NzQ0M2RjNTMyMTg1N2JhNzNhYmVlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2YyMTllYTVkNmI1NDcwMWMxYzE0ZGU1YjU1N2ViNDJhOGQxM2YzYWJiY2QwOGFmZmNjMmE1ZTZiMDQ5YjhkNjMnLFxuICAgICAgICAnNGNiOTU5NTdlODNkNDBiMGY3M2FmNDU0NGNjY2Y2YjFmNGIwOGQzYzA3YjI3ZmI4ZDhjMjk2MmE0MDA3NjZkMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkN2I4NzQwZjc0YThmYmFhYjFmNjgzZGI4ZjQ1ZGUyNjU0M2E1NDkwYmNhNjI3MDg3MjM2OTEyNDY5YTBiNDQ4JyxcbiAgICAgICAgJ2ZhNzc5NjgxMjhkOWM5MmVlMTAxMGYzMzdhZDQ3MTdlZmYxNWRiNWVkM2MwNDliMzQxMWUwMzE1ZWFhNDU5M2InXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzJkMzFjMjIyZjhmNmYwZWY4NmY3Yzk4ZDNhMzMzNWVhZDViY2QzMmFiZGQ5NDI4OWZlNGQzMDkxYWE4MjRiZicsXG4gICAgICAgICc1ZjMwMzJmNTg5MjE1NmUzOWNjZDNkNzkxNWI5ZTFkYTJlNmRhYzllNmYyNmU5NjExMThkMTRiODQ2MmUxNjYxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc0NjFmMzcxOTE0YWIzMjY3MTA0NWExNTVkOTgzMWVhODc5M2Q3N2NkNTk1OTJjNDM0MGY4NmNiYzE4MzQ3YjUnLFxuICAgICAgICAnOGVjMGJhMjM4Yjk2YmVjMGNiZGRkY2FlMGFhNDQyNTQyZWVlMWZmNTBjOTg2ZWE2YjM5ODQ3YjNjYzA5MmZmNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlZTA3OWFkYjFkZjE4NjAwNzQzNTZhMjVhYTM4MjA2YTZkNzE2YjJjM2U2NzQ1M2QyODc2OThiYWQ3YjJiMmQ2JyxcbiAgICAgICAgJzhkYzI0MTJhYWZlM2JlNWM0YzVmMzdlMGVjYzVmOWY2YTQ0Njk4OWFmMDRjNGUyNWViYWFjNDc5ZWMxYzhjMWUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTZlYzkzZTQ0N2VjODNmMDQ2N2IxODMwMmVlNjIwZjdlNjVkZTMzMTg3NGM5ZGM3MmJmZDg2MTZiYTlkYTZiNScsXG4gICAgICAgICc1ZTQ2MzExNTBlNjJmYjQwZDBlOGMyYTdjYTU4MDRhMzlkNTgxODZhNTBlNDk3MTM5NjI2Nzc4ZTI1YjA2NzRkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2VhYTVmOTgwYzI0NWY2ZjAzODk3ODI5MGFmYTcwYjZiZDg4NTU4OTdmOThiNmFhNDg1Yjk2MDY1ZDUzN2JkOTknLFxuICAgICAgICAnZjY1ZjVkM2UyOTJjMmUwODE5YTUyODM5MWM5OTQ2MjRkNzg0ODY5ZDdlNmVhNjdmYjE4MDQxMDI0ZWRjMDdkYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3OGM5NDA3NTQ0YWMxMzI2OTJlZTE5MTBhMDI0Mzk5NThhZTA0ODc3MTUxMzQyZWE5NmM0YjZiMzVhNDlmNTEnLFxuICAgICAgICAnZjNlMDMxOTE2OWViOWI4NWQ1NDA0Nzk1NTM5YTVlNjhmYTFmYmQ1ODNjMDY0ZDI0NjJiNjc1ZjE5NGEzZGRiNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0OTRmNGJlMjE5YTFhNzcwMTZkY2Q4Mzg0MzFhZWEwMDAxY2RjOGFlN2E2ZmM2ODg3MjY1NzhkOTcwMjg1N2E1JyxcbiAgICAgICAgJzQyMjQyYTk2OTI4M2E1ZjMzOWJhN2YwNzVlMzZiYTJhZjkyNWNlMzBkNzY3ZWQ2ZTU1ZjRiMDMxODgwZDU2MmMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYTU5OGE4MDMwZGE2ZDg2YzZiYzdmMmY1MTQ0ZWE1NDlkMjgyMTFlYTU4ZmFhNzBlYmY0YzFlNjY1YzFmZTliNScsXG4gICAgICAgICcyMDRiNWQ2Zjg0ODIyYzMwN2U0YjRhNzE0MDczN2FlYzIzZmM2M2I2NWIzNWY4NmExMDAyNmRiZDJkODY0ZTZiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2M0MTkxNjM2NWFiYjJiNWQwOTE5MmY1ZjJkYmVhZmVjMjA4ZjAyMGYxMjU3MGExODRkYmFkYzNlNTg1OTU5OTcnLFxuICAgICAgICAnNGYxNDM1MWQwMDg3ZWZhNDlkMjQ1YjMyODk4NDk4OWQ1Y2FmOTQ1MGYzNGJmYzBlZDE2ZTk2YjU4ZmE5OTEzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzg0MWQ2MDYzYTU4NmZhNDc1YTcyNDYwNGRhMDNiYzViOTJhMmUwZDJlMGEzNmFjZmU0YzczYTU1MTQ3NDI4ODEnLFxuICAgICAgICAnNzM4NjdmNTljMDY1OWU4MTkwNGY5YTFjNzU0MzY5OGU2MjU2MmQ2NzQ0YzE2OWNlN2EzNmRlMDFhOGQ2MTU0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzVlOTViYjM5OWE2OTcxZDM3NjAyNjk0N2Y4OWJkZTJmMjgyYjMzODEwOTI4YmU0ZGVkMTEyYWM0ZDcwZTIwZDUnLFxuICAgICAgICAnMzlmMjNmMzY2ODA5MDg1YmVlYmZjNzExODEzMTM3NzVhOTljOWFlZDdkOGJhMzhiMTYxMzg0Yzc0NjAxMjg2NSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNmU0NjQxYTUzOTQ4ZmQ0NzZjMzlmOGE5OWZkOTc0ZTVlYzA3NTY0YjUzMTVkOGJmOTk0NzFiY2EwZWYyZjY2JyxcbiAgICAgICAgJ2QyNDI0YjFiMWFiZTRlYjgxNjQyMjdiMDg1YzlhYTk0NTZlYTEzNDkzZmQ1NjNlMDZmZDUxY2Y1Njk0Yzc4ZmMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzM2NTgxZWE3YmZiYmIyOTBjMTkxYTJmNTA3YTQxY2Y1NjQzODQyMTcwZTkxNGZhZWFiMjdjMmM1NzlmNzI2JyxcbiAgICAgICAgJ2VhZDEyMTY4NTk1ZmUxYmU5OTI1MjEyOWI2ZTU2YjMzOTFmN2FiMTQxMGNkMWUwZWYzZGNkY2FiZDJmZGEyMjQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGFiODk4MTZkYWRmZDZiNmExZjI2MzRmY2YwMGVjODQwMzc4MTAyNWVkNjg5MGM0ODQ5NzQyNzA2YmQ0M2VkZScsXG4gICAgICAgICc2ZmRjZWYwOWYyZjZkMGEwNDRlNjU0YWVmNjI0MTM2ZjUwM2Q0NTljM2U4OTg0NTg1OGE0N2E5MTI5Y2RkMjRlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzFlMzNmMWE3NDZjOWM1Nzc4MTMzMzQ0ZDkyOTlmY2FhMjBiMDkzOGU4YWNmZjI1NDRiYjQwMjg0YjhjNWZiOTQnLFxuICAgICAgICAnNjA2NjAyNTdkZDExYjNhYTljOGVkNjE4ZDI0ZWRmZjIzMDZkMzIwZjFkMDMwMTBlMzNhN2QyMDU3ZjNiM2I2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzg1YjdjMWRjYjNjZWMxYjdlZTdmMzBkZWQ3OWRkMjBhMGVkMWY0Y2MxOGNiY2ZjZmE0MTAzNjFmZDhmMDhmMzEnLFxuICAgICAgICAnM2Q5OGE5Y2RkMDI2ZGQ0M2YzOTA0OGYyNWE4ODQ3ZjRmY2FmYWQxODk1ZDdhNjMzYzZmZWQzYzM1ZTk5OTUxMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyOWRmOWZiZDhkOWU0NjUwOTI3NWY0YjEyNWQ2ZDQ1ZDdmYmU5YTNiODc4YTdhZjg3MmEyODAwNjYxYWM1ZjUxJyxcbiAgICAgICAgJ2I0YzRmZTk5Yzc3NWE2MDZlMmQ4ODYyMTc5MTM5ZmZkYTYxZGM4NjFjMDE5ZTU1Y2QyODc2ZWIyYTI3ZDg0YidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhMGIxY2FlMDZiMGE4NDdhM2ZlYTZlNjcxYWFmOGFkZmRmZTU4Y2EyZjc2ODEwNWM4MDgyYjJlNDQ5ZmNlMjUyJyxcbiAgICAgICAgJ2FlNDM0MTAyZWRkZTA5NThlYzRiMTlkOTE3YTZhMjhlNmI3MmRhMTgzNGFmZjBlNjUwZjA0OTUwM2EyOTZjZjInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNGU4Y2VhZmI5YjNlOWExMzZkYzdmZjY3ZTg0MDI5NWI0OTlkZmIzYjIxMzNlNGJhMTEzZjJlNGMwZTEyMWU1JyxcbiAgICAgICAgJ2NmMjE3NDExOGM4YjZkN2E0YjQ4ZjZkNTM0Y2U1Yzc5NDIyYzA4NmE2MzQ2MDUwMmI4MjdjZTYyYTMyNjY4M2MnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDI0YTQ0ZTA0N2UxOWI2ZjVhZmI4MWM3Y2EyZjY5MDgwYTUwNzY2ODlhMDEwOTE5ZjQyNzI1YzJiNzg5YTMzYicsXG4gICAgICAgICc2ZmI4ZDU1OTFiNDY2ZjhmYzYzZGI1MGYxYzBmMWM2OTAxM2Y5OTY4ODdiODI0NGQyY2RlYzQxN2FmZWE4ZmEzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2VhMDE2MDZhN2E2YzljZGQyNDlmZGZjZmFjYjk5NTg0MDAxZWRkMjhhYmJhYjc3YjUxMDRlOThlOGUzYjM1ZDQnLFxuICAgICAgICAnMzIyYWY0OTA4YzczMTJiMGNmYmZlMzY5ZjdhN2IzY2RiN2Q0NDk0YmMyODIzNzAwY2ZkNjUyMTg4YTNlYTk4ZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhZjhhZGRiZjJiNjYxYzhhNmM2MzI4NjU1ZWI5NjY1MTI1MjAwN2Q4YzVlYTMxYmU0YWQxOTZkZThjZTIxMzFmJyxcbiAgICAgICAgJzY3NDllNjdjMDI5Yjg1ZjUyYTAzNGVhZmQwOTY4MzZiMjUyMDgxODY4MGUyNmFjOGYzZGZiY2RiNzE3NDk3MDAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTNhZTE5NzQ1NjZjYTA2Y2M1MTZkNDdlMGZiMTY1YTY3NGEzZGFiY2ZjYTE1ZTcyMmYwZTM0NTBmNDU4ODknLFxuICAgICAgICAnMmFlYWJlN2U0NTMxNTEwMTE2MjE3ZjA3YmY0ZDA3MzAwZGU5N2U0ODc0ZjgxZjUzMzQyMGE3MmVlYjBiZDZhNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1OTFlZTM1NTMxM2Q5OTcyMWNmNjk5M2ZmZWQxZTNlMzAxOTkzZmYzZWQyNTg4MDIwNzVlYThjZWQzOTdlMjQ2JyxcbiAgICAgICAgJ2IwZWE1NThhMTEzYzMwYmVhNjBmYzQ3NzU0NjBjNzkwMWZmMGIwNTNkMjVjYTJiZGVlZTk4ZjFhNGJlNWQxOTYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTEzOTZkNTVmZGE1NGM0OWYxOWFhOTczMThkOGRhNjFmYTg1ODRlNDdiMDg0OTQ1MDc3Y2YwMzI1NWI1Mjk4NCcsXG4gICAgICAgICc5OThjNzRhOGNkNDVhYzAxMjg5ZDU4MzNhN2JlYjQ3NDRmZjUzNmIwMWIyNTdiZTRjNTc2N2JlYTkzZWE1N2E0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzNjNWQyYTFiYTM5YzVhMTc5MDAwMDczOGM5ZTBjNDBiOGRjZGZkNTQ2ODc1NGI2NDA1NTQwMTU3ZTAxN2FhN2EnLFxuICAgICAgICAnYjIyODQyNzk5OTVhMzRlMmY5ZDRkZTczOTZmYzE4YjgwZjliOGI5ZmRkMjcwZjY2NjFmNzljYTRjODFiZDI1NydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjYzg3MDRiOGE2MGEwZGVmYTNhOTlhNzI5OWYyZTljM2ZiYzM5NWFmYjA0YWMwNzg0MjVlZjhhMTc5M2NjMDMwJyxcbiAgICAgICAgJ2JkZDQ2MDM5ZmVlZDE3ODgxZDFlMDg2MmRiMzQ3ZjhjZjM5NWI3NGZjNGJjZGM0ZTk0MGI3NGUzYWMxZjFiMTMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYzUzM2U0ZjdlYTg1NTVhYWNkOTc3N2FjNWNhZDI5Yjk3ZGQ0ZGVmY2NjNTNlZTdlYTIwNDExOWIyODg5YjE5NycsXG4gICAgICAgICc2ZjBhMjU2YmM1ZWZkZjQyOWEyZmI2MjQyZjFhNDNhMmQ5YjkyNWJiNGE0YjNhMjZiYjhlMGY0NWViNTk2MDk2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2MxNGY4ZjJjY2IyN2Q2ZjEwOWY2ZDA4ZDAzY2M5NmE2OWJhOGMzNGVlYzA3YmJjZjU2NmQ0OGUzM2RhNjU5MycsXG4gICAgICAgICdjMzU5ZDY5MjNiYjM5OGY3ZmQ0NDczZTE2ZmUxYzI4NDc1Yjc0MGRkMDk4MDc1ZTZjMGU4NjQ5MTEzZGMzYTM4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2E2Y2JjMzA0NmJjNmE0NTBiYWMyNDc4OWZhMTcxMTVhNGM5NzM5ZWQ3NWY4ZjIxY2U0NDFmNzJlMGI5MGU2ZWYnLFxuICAgICAgICAnMjFhZTdmNDY4MGU4ODliYjEzMDYxOWUyYzBmOTVhMzYwY2ViNTczYzcwNjAzMTM5ODYyYWZkNjE3ZmE5YjlmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM0N2Q2ZDlhMDJjNDg5MjdlYmZiODZjMTM1OWIxY2FmMTMwYTNjMDI2N2QxMWNlNjM0NGIzOWY5OWQ0M2NjMzgnLFxuICAgICAgICAnNjBlYTdmNjFhMzUzNTI0ZDFjOTg3ZjZlY2VjOTJmMDg2ZDU2NWFiNjg3ODcwY2IxMjY4OWZmMWUzMWM3NDQ0OCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkYTY1NDVkMjE4MWRiOGQ5ODNmN2RjYjM3NWVmNTg2NmQ0N2M2N2IxYmYzMWM4Y2Y4NTVlZjc0MzdiNzI2NTZhJyxcbiAgICAgICAgJzQ5Yjk2NzE1YWI2ODc4YTc5ZTc4ZjA3Y2U1NjgwYzVkNjY3MzA1MWI0OTM1YmQ4OTdmZWE4MjRiNzdkYzIwOGEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYzQwNzQ3Y2M5ZDAxMmNiMWExM2I4MTQ4MzA5YzZkZTdlYzI1ZDY5NDVkNjU3MTQ2YjlkNTk5NGI4ZmViMTExMScsXG4gICAgICAgICc1Y2E1NjA3NTNiZTJhMTJmYzZkZTZjYWYyY2I0ODk1NjVkYjkzNjE1NmI5NTE0ZTFiYjVlODMwMzdlMGZhMmQ0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzRlNDJjOGVjODJjOTk3OThjY2YzYTYxMGJlODcwZTc4MzM4YzdmNzEzMzQ4YmQzNGM4MjAzZWY0MDM3ZjM1MDInLFxuICAgICAgICAnNzU3MWQ3NGVlNWUwZmI5MmE3YThiMzNhMDc3ODMzNDFhNTQ5MjE0NGNjNTRiY2M0MGE5NDQ3MzY5MzYwNjQzNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNzc1YWI3MDg5YmM2YWY4MjNhYmEyZTFhZjcwYjIzNmQyNTFjYWRiMGM4Njc0MzI4NzUyMmExYjNiMGRlZGVhJyxcbiAgICAgICAgJ2JlNTJkMTA3YmNmYTA5ZDhiY2I5NzM2YTgyOGNmYTdmYWM4ZGIxN2JmN2E3NmEyYzQyYWQ5NjE0MDkwMThjZjcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnY2VlMzFjYmY3ZTM0ZWMzNzlkOTRmYjgxNGQzZDc3NWFkOTU0NTk1ZDEzMTRiYTg4NDY5NTllM2U4MmY3NGUyNicsXG4gICAgICAgICc4ZmQ2NGExNGMwNmI1ODljMjZiOTQ3YWUyYmNmNmJmYTAxNDllZjBiZTE0ZWQ0ZDgwZjQ0OGEwMWM0M2IxYzZkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2I0ZjllYWVhMDliNjkxNzYxOWY2ZWE2YTRlYjU0NjRlZmRkYjU4ZmQ0NWIxZWJlZmNkYzFhMDFkMDhiNDc5ODYnLFxuICAgICAgICAnMzllNWM5OTI1YjVhNTRiMDc0MzNhNGYxOGM2MTcyNmY4YmIxMzFjMDEyY2E1NDJlYjI0YThhYzA3MjAwNjgyYSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkNDI2M2RmYzNkMmRmOTIzYTAxNzlhNDg5NjZkMzBjZTg0ZTI1MTVhZmMzZGNjYzFiNzc5MDc3OTJlYmNjNjBlJyxcbiAgICAgICAgJzYyZGZhZjA3YTBmNzhmZWIzMGUzMGQ2Mjk1ODUzY2UxODllMTI3NzYwYWQ2Y2Y3ZmFlMTY0ZTEyMmEyMDhkNTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDg0NTc1MjQ4MjBmYTY1YTRmOGQzNWViNjkzMDg1N2MwMDMyYWNjMGE0YTJkZTQyMjIzM2VlZGE4OTc2MTJjNCcsXG4gICAgICAgICcyNWE3NDhhYjM2Nzk3OWQ5ODczM2MzOGExZmExYzJlN2RjNmNjMDdkYjJkNjBhOWFlN2E3NmFhYTQ5YmQwZjc3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RmZWVlZjE4ODExMDFmMmNiMTE2NDRmM2EyYWZkZmMyMDQ1ZTE5OTE5MTUyOTIzZjM2N2ExNzY3YzExY2NlZGEnLFxuICAgICAgICAnZWNmYjcwNTZjZjFkZTA0MmY5NDIwYmFiMzk2NzkzYzBjMzkwYmRlNzRiNGJiZGZmMTZhODNhZTA5YTlhNzUxNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2ZDdlZjZiMTc1NDNmODM3M2M1NzNmNDRlMWYzODk4MzVkODliY2JjNjA2MmNlZDM2YzgyZGY4M2I4ZmFlODU5JyxcbiAgICAgICAgJ2NkNDUwZWMzMzU0Mzg5ODZkZmVmYTEwYzU3ZmVhOWJjYzUyMWEwOTU5YjJkODBiYmY3NGIxOTBkY2E3MTJkMTAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTc1NjA1ZDU5MTAyYTVhMjY4NDUwMGQzYjk5MWYyZTNmM2M4OGI5MzIyNTU0NzAzNWFmMjVhZjY2ZTA0NTQxZicsXG4gICAgICAgICdmNWM1NDc1NGE4ZjcxZWU1NDBiOWI0ODcyODQ3M2UzMTRmNzI5YWM1MzA4YjA2OTM4MzYwOTkwZTJiZmFkMTI1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2ViOTg2NjBmNGM0ZGZhYTA2YTJiZTQ1M2Q1MDIwYmM5OWEwYzJlNjBhYmUzODg0NTdkZDQzZmVmYjFlZDYyMGMnLFxuICAgICAgICAnNmNiOWE4ODc2ZDljYjg1MjA2MDlhZjNhZGQyNmNkMjBhMGE3Y2Q4YTk0MTExMzFjZTg1ZjQ0MTAwMDk5MjIzZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxM2U4N2IwMjdkODUxNGQzNTkzOWYyZTY4OTJiMTk5MjIxNTQ1OTY5NDE4ODgzMzZkYzM1NjNlM2I4ZGJhOTQyJyxcbiAgICAgICAgJ2ZlZjVhM2M2ODA1OWE2ZGVjNWQ2MjQxMTRiZjFlOTFhYWMyYjlkYTU2OGQ2YWJlYjI1NzBkNTU2NDZiOGFkZjEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZWUxNjMwMjZlOWZkNmZlMDE3YzM4ZjA2YTViZTZmYzEyNTQyNGIzNzFjZTI3MDhlN2JmNDQ5MTY5MWU1NzY0YScsXG4gICAgICAgICcxYWNiMjUwZjI1NWRkNjFjNDNkOTRjY2M2NzBkMGY1OGY0OWFlM2ZhMTViOTY2MjNlNTQzMGRhMGFkNmM2MmIyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2IyNjhmNWVmOWFkNTFlNGQ3OGRlM2E3NTBjMmRjODliMWU2MjZkNDM1MDU4Njc5OTk5MzJlNWRiMzNhZjNkODAnLFxuICAgICAgICAnNWYzMTBkNGIzYzk5YjllYmIxOWY3N2Q0MWMxZGVlMDE4Y2YwZDM0ZmQ0MTkxNjE0MDAzZTk0NWExMjE2ZTQyMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmZjA3ZjMxMThhOWRmMDM1ZTlmYWQ4NWViNmM3YmZlNDJiMDJmMDFjYTk5Y2VlYTNiZjdmZmRiYTkzYzQ3NTBkJyxcbiAgICAgICAgJzQzODEzNmQ2MDNlODU4YTNhNWM0NDBjMzhlY2NiYWRkYzFkMjk0MjExNGUyZWRkZDQ3NDBkMDk4Y2VkMWYwZDgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGQ4Yjk4NTVjN2MwNTJhMzQxNDZmZDIwZmZiNjU4YmVhNGI5ZjY5ZTBkODI1ZWJlYzE2ZThjM2NlMmI1MjZhMScsXG4gICAgICAgICdjZGI1NTllZWRjMmQ3OWY5MjZiYWY0NGZiODRlYTRkNDRiY2Y1MGZlZTUxZDdjZWIzMGUyZTdmNDYzMDM2NzU4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzUyZGIwYjUzODRkZmJmMDViZmE5ZDQ3MmQ3YWUyNmRmZTRiODUxY2VjYTkxYjFlYmE1NDI2MzE4MGRhMzJiNjMnLFxuICAgICAgICAnYzNiOTk3ZDA1MGVlNWQ0MjNlYmFmNjZhNmRiOWY1N2IzMTgwYzkwMjg3NTY3OWRlOTI0YjY5ZDg0YTdiMzc1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2U2MmY5NDkwZDNkNTFkYTYzOTVlZmQyNGU4MDkxOWNjN2QwZjI5YzNmM2ZhNDhjNmZmZjU0M2JlY2JkNDMzNTInLFxuICAgICAgICAnNmQ4OWFkN2JhNDg3NmIwYjIyYzJjYTI4MGM2ODI4NjJmMzQyYzg1OTFmMWRhZjUxNzBlMDdiZmQ5Y2NhZmE3ZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3ZjMwZWEyNDc2YjM5OWI0OTU3NTA5Yzg4Zjc3ZDAxOTFhZmEyZmY1Y2I3YjE0ZmQ2ZDhlN2Q2NWFhYWIxMTkzJyxcbiAgICAgICAgJ2NhNWVmN2Q0YjIzMWM5NGMzYjE1Mzg5YTVmNjMxMWU5ZGFmZjdiYjY3YjEwM2U5ODgwZWY0YmZmNjM3YWNhZWMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNTA5OGZmMWUxZDlmMTRmYjQ2YTIxMGZhZGE2YzkwM2ZlZjBmYjdiNGExZGQxZDlhYzYwYTAzNjE4MDBiN2EwMCcsXG4gICAgICAgICc5NzMxMTQxZDgxZmM4ZjgwODRkMzdjNmU3NTQyMDA2YjNlZTFiNDBkNjBkZmU1MzYyYTViMTMyZmQxN2RkYzAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzJiNzhjN2RlOWVlNTEyYTcyODk1YmU2YjljYmVmYTZlMmYzYzRjY2NlNDQ1Yzk2YjlmMmM4MWUyNzc4YWQ1OCcsXG4gICAgICAgICdlZTE4NDlmNTEzZGY3MWUzMmVmYzM4OTZlZTI4MjYwYzczYmI4MDU0N2FlMjI3NWJhNDk3MjM3Nzk0Yzg3NTNjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2UyY2I3NGZkZGM4ZTlmYmNkMDc2ZWVmMmE3YzcyYjBjZTM3ZDUwZjA4MjY5ZGZjMDc0YjU4MTU1MDU0N2E0ZjcnLFxuICAgICAgICAnZDNhYTJlZDcxYzlkZDIyNDdhNjJkZjA2MjczNmViMGJhZGRlYTllMzYxMjJkMmJlODY0MWFiY2IwMDVjYzRhNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4NDM4NDQ3NTY2ZDRkN2JlZGFkYzI5OTQ5NmFiMzU3NDI2MDA5YTM1ZjIzNWNiMTQxYmUwZDk5Y2QxMGFlM2E4JyxcbiAgICAgICAgJ2M0ZTEwMjA5MTY5ODBhNGRhNWQwMWFjNWU2YWQzMzA3MzRlZjBkNzkwNjYzMWM0ZjIzOTA0MjZiMmVkZDc5MWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDE2MmQ0ODhiODk0MDIwMzliNTg0YzZmYzZjMzA4ODcwNTg3ZDljNDZmNjYwYjg3OGFiNjVjODJjNzExZDY3ZScsXG4gICAgICAgICc2NzE2M2U5MDMyMzYyODlmNzc2ZjIyYzI1ZmI4YTNhZmMxNzMyZjJiODRiNGU5NWRiZGE0N2FlNWEwODUyNjQ5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzNmYWQzZmE4NGNhZjBmMzRmMGY4OWJmZDJkY2Y1NGZjMTc1ZDc2N2FlYzNlNTA2ODRmM2JhNGE0YmY1ZjY4M2QnLFxuICAgICAgICAnY2QxYmM3Y2I2Y2M0MDdiYjJmMGNhNjQ3YzcxOGE3MzBjZjcxODcyZTdkMGQyYTUzZmEyMGVmY2RmZTYxODI2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzY3NGYyNjAwYTMwMDdhMDA1NjhjMWE3Y2UwNWQwODE2YzFmYjg0YmYxMzcwNzk4ZjFjNjk1MzJmYWViMWE4NmInLFxuICAgICAgICAnMjk5ZDIxZjk0MTNmMzNiM2VkZjQzYjI1NzAwNDU4MGI3MGRiNTdkYTBiMTgyMjU5ZTA5ZWVjYzY5ZTBkMzhhNSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkMzJmNGRhNTRhZGU3NGFiYjgxYjgxNWFkMWZiM2IyNjNkODJkNmM2OTI3MTRiY2ZmODdkMjliZDVlZTlmMDhmJyxcbiAgICAgICAgJ2Y5NDI5ZTczOGI4ZTUzYjk2OGU5OTAxNmMwNTk3MDc3ODJlMTRmNDUzNTM1OWQ1ODJmYzQxNjkxMGIzZWVhODcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzBlNGU2NzA0MzUzODU1NTZlNTkzNjU3MTM1ODQ1ZDM2ZmJiNjkzMWY3MmIwOGNiMWVkOTU0ZjFlM2NlM2ZmNicsXG4gICAgICAgICc0NjJmOWJjZTYxOTg5ODYzODQ5OTM1MDExM2JiYzliMTBhODc4ZDM1ZGE3MDc0MGRjNjk1YTU1OWViODhkYjdiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2JlMjA2MjAwM2M1MWNjMzAwNDY4MjkwNDMzMGU0ZGVlN2YzZGNkMTBiMDFlNTgwYmYxOTcxYjA0ZDRjYWQyOTcnLFxuICAgICAgICAnNjIxODhiYzQ5ZDYxZTU0Mjg1NzNkNDhhNzRlMWM2NTViMWM2MTA5MDkwNTY4MmEwZDU1NThlZDcyZGNjYjliYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5MzE0NDQyM2FjZTM0NTFlZDI5ZTBmYjlhYzJhZjIxMWNiNmU4NGE2MDFkZjU5OTNjNDE5ODU5ZmZmNWRmMDRhJyxcbiAgICAgICAgJzdjMTBkZmIxNjRjMzQyNWY1YzcxYTNmOWQ3OTkyMDM4ZjEwNjUyMjRmNzJiYjlkMWQ5MDJhNmQxMzAzN2I0N2MnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYjAxNWY4MDQ0ZjVmY2JkY2YyMWNhMjZkNmMzNGZiODE5NzgyOTIwNWM3YjdkMmE3Y2I2NjQxOGMxNTdiMTEyYycsXG4gICAgICAgICdhYjhjMWUwODZkMDRlODEzNzQ0YTY1NWIyZGY4ZDVmODNiM2NkYzZmYWEzMDg4YzFkM2FlYTE0NTRlM2ExZDVmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Q1ZTllMWRhNjQ5ZDk3ZDg5ZTQ4NjgxMTdhNDY1YTNhNGY4YTE4ZGU1N2ExNDBkMzZiM2YyYWYzNDFhMjFiNTInLFxuICAgICAgICAnNGNiMDQ0MzdmMzkxZWQ3MzExMWExM2NjMWQ0ZGQwZGIxNjkzNDY1YzIyNDA0ODBkODk1NWU4NTkyZjI3NDQ3YSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkM2FlNDEwNDdkZDdjYTA2NWRiZjhlZDc3Yjk5MjQzOTk4MzAwNWNkNzJlMTZkNmY5OTZhNTMxNmQzNjk2NmJiJyxcbiAgICAgICAgJ2JkMWFlYjIxYWQyMmViYjIyYTEwZjAzMDM0MTdjNmQ5NjRmOGNkZDdkZjBhY2E2MTRiMTBkYzE0ZDEyNWFjNDYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDYzZTI3NjNkODg1Zjk1OGZjNjZjZGQyMjgwMGYwYTQ4NzE5N2QwYTgyZTM3N2I0OWY4MGFmODdjODk3YjA2NScsXG4gICAgICAgICdiZmVmYWNkYjBlNWQwZmQ3ZGYzYTMxMWE5NGRlMDYyYjI2YjgwYzYxZmJjOTc1MDhiNzk5OTI2NzFlZjdjYTdmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc5ODVmZGZkMTI3YzA1NjdjNmY1M2VjMWJiNjNlYzMxNThlNTk3YzQwYmZlNzQ3YzgzY2RkZmM5MTA2NDE5MTcnLFxuICAgICAgICAnNjAzYzEyZGFmM2Q5ODYyZWYyYjI1ZmUxZGUyODlhZWQyNGVkMjkxZTBlYzY3MDg3MDNhNWJkNTY3ZjMyZWQwMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NGExYWQ2YjVmNzZlMzlkYjJkZDI0OTQxMGVhYzdmOTllNzRjNTljYjgzZDJkMGVkNWZmMTU0M2RhNzcwM2U5JyxcbiAgICAgICAgJ2NjNjE1N2VmMThjOWM2M2NkNjE5M2Q4MzYzMWJiZWEwMDkzZTA5Njg5NDJlOGMzM2Q1NzM3ZmQ3OTBlMGRiMDgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzA2ODJhNTA3MDMzNzVmNjAyZDQxNjY2NGJhMTliN2ZjOWJhYjQyYzcyNzQ3NDYzYTcxZDA4OTZiMjJmNmRhMycsXG4gICAgICAgICc1NTNlMDRmNmIwMThiNGZhNmM4ZjM5ZTdmMzExZDMxNzYyOTBkMGUwZjE5Y2E3M2YxNzcxNGQ5OTc3YTIyZmY4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzllMjE1OGYwZDdjMGQ1ZjI2YzM3OTFlZmVmYTc5NTk3NjU0ZTdhMmIyNDY0ZjUyYjFlZTZjMTM0Nzc2OWVmNTcnLFxuICAgICAgICAnNzEyZmNkZDFiOTA1M2YwOTAwM2EzNDgxZmE3NzYyZTlmZmQ3YzhlZjM1YTM4NTA5ZTJmYmYyNjI5MDA4MzczJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE3NmUyNjk4OWE0M2M5Y2ZlYmE0MDI5YzIwMjUzOGMyODE3MmU1NjZlM2M0ZmNlNzMyMjg1N2YzYmUzMjdkNjYnLFxuICAgICAgICAnZWQ4Y2M5ZDA0YjI5ZWI4NzdkMjcwYjQ4NzhkYzQzYzE5YWVmZDMxZjRlZWUwOWVlN2I0NzgzNGMxZmE0YjFjMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NWQ0NmVmZWEzNzcxZTZlNjhhYmI4OWExM2FkNzQ3ZWNmMTg5MjM5M2RmYzRmMWI3MDA0Nzg4YzUwMzc0ZGE4JyxcbiAgICAgICAgJzk4NTIzOTBhOTk1MDc2NzlmZDBiODZmZDJiMzlhODY4ZDdlZmMyMjE1MTM0NmUxYTNjYTQ3MjY1ODZhNmJlZDgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODA5YTIwYzY3ZDY0OTAwZmZiNjk4YzRjODI1ZjZkNWYyMzEwZmIwNDUxYzg2OTM0NWI3MzE5ZjY0NTYwNTcyMScsXG4gICAgICAgICc5ZTk5NDk4MGQ5OTE3ZTIyYjc2YjA2MTkyN2ZhMDQxNDNkMDk2Y2NjNTQ5NjNlNmE1ZWJmYTVmM2Y4ZTI4NmMxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzFiMzg5MDNhNDNmN2YxMTRlZDQ1MDBiNGVhYzcwODNmZGVmZWNlMWNmMjljNjM1MjhkNTYzNDQ2Zjk3MmMxODAnLFxuICAgICAgICAnNDAzNmVkYzkzMWE2MGFlODg5MzUzZjc3ZmQ1M2RlNGEyNzA4YjI2YjZmNWRhNzJhZDMzOTQxMTlkYWY0MDhmOSdcbiAgICAgIF1cbiAgICBdXG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjdXJ2ZSA9IGV4cG9ydHM7XG5cbmN1cnZlLmJhc2UgPSByZXF1aXJlKCcuL2Jhc2UnKTtcbmN1cnZlLnNob3J0ID0gcmVxdWlyZSgnLi9zaG9ydCcpO1xuY3VydmUubW9udCA9IHJlcXVpcmUoJy4vbW9udCcpO1xuY3VydmUuZWR3YXJkcyA9IHJlcXVpcmUoJy4vZWR3YXJkcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3VydmUgPSByZXF1aXJlKCcuLi9jdXJ2ZScpO1xudmFyIGVsbGlwdGljID0gcmVxdWlyZSgnLi4vLi4vZWxsaXB0aWMnKTtcbnZhciBibiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIEJhc2UgPSBjdXJ2ZS5iYXNlO1xuXG52YXIgYXNzZXJ0ID0gZWxsaXB0aWMudXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBTaG9ydEN1cnZlKGNvbmYpIHtcbiAgQmFzZS5jYWxsKHRoaXMsICdzaG9ydCcsIGNvbmYpO1xuXG4gIHRoaXMuYSA9IG5ldyBibihjb25mLmEsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuYiA9IG5ldyBibihjb25mLmIsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMudGludiA9IHRoaXMudHdvLnJlZEludm0oKTtcblxuICB0aGlzLnplcm9BID0gdGhpcy5hLmZyb21SZWQoKS5jbXBuKDApID09PSAwO1xuICB0aGlzLnRocmVlQSA9IHRoaXMuYS5mcm9tUmVkKCkuc3ViKHRoaXMucCkuY21wbigtMykgPT09IDA7XG5cbiAgLy8gSWYgdGhlIGN1cnZlIGlzIGVuZG9tb3JwaGljLCBwcmVjYWxjdWxhdGUgYmV0YSBhbmQgbGFtYmRhXG4gIHRoaXMuZW5kbyA9IHRoaXMuX2dldEVuZG9tb3JwaGlzbShjb25mKTtcbiAgdGhpcy5fZW5kb1duYWZUMSA9IG5ldyBBcnJheSg0KTtcbiAgdGhpcy5fZW5kb1duYWZUMiA9IG5ldyBBcnJheSg0KTtcbn1cbmluaGVyaXRzKFNob3J0Q3VydmUsIEJhc2UpO1xubW9kdWxlLmV4cG9ydHMgPSBTaG9ydEN1cnZlO1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5fZ2V0RW5kb21vcnBoaXNtID0gZnVuY3Rpb24gX2dldEVuZG9tb3JwaGlzbShjb25mKSB7XG4gIC8vIE5vIGVmZmljaWVudCBlbmRvbW9ycGhpc21cbiAgaWYgKCF0aGlzLnplcm9BIHx8ICF0aGlzLmcgfHwgIXRoaXMubiB8fCB0aGlzLnAubW9kbigzKSAhPT0gMSlcbiAgICByZXR1cm47XG5cbiAgLy8gQ29tcHV0ZSBiZXRhIGFuZCBsYW1iZGEsIHRoYXQgbGFtYmRhICogUCA9IChiZXRhICogUHg7IFB5KVxuICB2YXIgYmV0YTtcbiAgdmFyIGxhbWJkYTtcbiAgaWYgKGNvbmYuYmV0YSkge1xuICAgIGJldGEgPSBuZXcgYm4oY29uZi5iZXRhLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB9IGVsc2Uge1xuICAgIHZhciBiZXRhcyA9IHRoaXMuX2dldEVuZG9Sb290cyh0aGlzLnApO1xuICAgIC8vIENob29zZSB0aGUgc21hbGxlc3QgYmV0YVxuICAgIGJldGEgPSBiZXRhc1swXS5jbXAoYmV0YXNbMV0pIDwgMCA/IGJldGFzWzBdIDogYmV0YXNbMV07XG4gICAgYmV0YSA9IGJldGEudG9SZWQodGhpcy5yZWQpO1xuICB9XG4gIGlmIChjb25mLmxhbWJkYSkge1xuICAgIGxhbWJkYSA9IG5ldyBibihjb25mLmxhbWJkYSwgMTYpO1xuICB9IGVsc2Uge1xuICAgIC8vIENob29zZSB0aGUgbGFtYmRhIHRoYXQgaXMgbWF0Y2hpbmcgc2VsZWN0ZWQgYmV0YVxuICAgIHZhciBsYW1iZGFzID0gdGhpcy5fZ2V0RW5kb1Jvb3RzKHRoaXMubik7XG4gICAgaWYgKHRoaXMuZy5tdWwobGFtYmRhc1swXSkueC5jbXAodGhpcy5nLngucmVkTXVsKGJldGEpKSA9PT0gMCkge1xuICAgICAgbGFtYmRhID0gbGFtYmRhc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFtYmRhID0gbGFtYmRhc1sxXTtcbiAgICAgIGFzc2VydCh0aGlzLmcubXVsKGxhbWJkYSkueC5jbXAodGhpcy5nLngucmVkTXVsKGJldGEpKSA9PT0gMCk7XG4gICAgfVxuICB9XG5cbiAgLy8gR2V0IGJhc2lzIHZlY3RvcnMsIHVzZWQgZm9yIGJhbGFuY2VkIGxlbmd0aC10d28gcmVwcmVzZW50YXRpb25cbiAgdmFyIGJhc2lzO1xuICBpZiAoY29uZi5iYXNpcykge1xuICAgIGJhc2lzID0gY29uZi5iYXNpcy5tYXAoZnVuY3Rpb24odmVjKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhOiBuZXcgYm4odmVjLmEsIDE2KSxcbiAgICAgICAgYjogbmV3IGJuKHZlYy5iLCAxNilcbiAgICAgIH07XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgYmFzaXMgPSB0aGlzLl9nZXRFbmRvQmFzaXMobGFtYmRhKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgYmV0YTogYmV0YSxcbiAgICBsYW1iZGE6IGxhbWJkYSxcbiAgICBiYXNpczogYmFzaXNcbiAgfTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLl9nZXRFbmRvUm9vdHMgPSBmdW5jdGlvbiBfZ2V0RW5kb1Jvb3RzKG51bSkge1xuICAvLyBGaW5kIHJvb3RzIG9mIGZvciB4XjIgKyB4ICsgMSBpbiBGXG4gIC8vIFJvb3QgPSAoLTEgKy0gU3FydCgtMykpIC8gMlxuICAvL1xuICB2YXIgcmVkID0gbnVtID09PSB0aGlzLnAgPyB0aGlzLnJlZCA6IGJuLm1vbnQobnVtKTtcbiAgdmFyIHRpbnYgPSBuZXcgYm4oMikudG9SZWQocmVkKS5yZWRJbnZtKCk7XG4gIHZhciBudGludiA9IHRpbnYucmVkTmVnKCk7XG5cbiAgdmFyIHMgPSBuZXcgYm4oMykudG9SZWQocmVkKS5yZWROZWcoKS5yZWRTcXJ0KCkucmVkTXVsKHRpbnYpO1xuXG4gIHZhciBsMSA9IG50aW52LnJlZEFkZChzKS5mcm9tUmVkKCk7XG4gIHZhciBsMiA9IG50aW52LnJlZFN1YihzKS5mcm9tUmVkKCk7XG4gIHJldHVybiBbIGwxLCBsMiBdO1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUuX2dldEVuZG9CYXNpcyA9IGZ1bmN0aW9uIF9nZXRFbmRvQmFzaXMobGFtYmRhKSB7XG4gIC8vIGFwcnhTcXJ0ID49IHNxcnQodGhpcy5uKVxuICB2YXIgYXByeFNxcnQgPSB0aGlzLm4uc2hybihNYXRoLmZsb29yKHRoaXMubi5iaXRMZW5ndGgoKSAvIDIpKTtcblxuICAvLyAzLjc0XG4gIC8vIFJ1biBFR0NELCB1bnRpbCByKEwgKyAxKSA8IGFwcnhTcXJ0XG4gIHZhciB1ID0gbGFtYmRhO1xuICB2YXIgdiA9IHRoaXMubi5jbG9uZSgpO1xuICB2YXIgeDEgPSBuZXcgYm4oMSk7XG4gIHZhciB5MSA9IG5ldyBibigwKTtcbiAgdmFyIHgyID0gbmV3IGJuKDApO1xuICB2YXIgeTIgPSBuZXcgYm4oMSk7XG5cbiAgLy8gTk9URTogYWxsIHZlY3RvcnMgYXJlIHJvb3RzIG9mOiBhICsgYiAqIGxhbWJkYSA9IDAgKG1vZCBuKVxuICB2YXIgYTA7XG4gIHZhciBiMDtcbiAgLy8gRmlyc3QgdmVjdG9yXG4gIHZhciBhMTtcbiAgdmFyIGIxO1xuICAvLyBTZWNvbmQgdmVjdG9yXG4gIHZhciBhMjtcbiAgdmFyIGIyO1xuXG4gIHZhciBwcmV2UjtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcjtcbiAgdmFyIHg7XG4gIHdoaWxlICh1LmNtcG4oMCkgIT09IDApIHtcbiAgICB2YXIgcSA9IHYuZGl2KHUpO1xuICAgIHIgPSB2LnN1YihxLm11bCh1KSk7XG4gICAgeCA9IHgyLnN1YihxLm11bCh4MSkpO1xuICAgIHZhciB5ID0geTIuc3ViKHEubXVsKHkxKSk7XG5cbiAgICBpZiAoIWExICYmIHIuY21wKGFwcnhTcXJ0KSA8IDApIHtcbiAgICAgIGEwID0gcHJldlIubmVnKCk7XG4gICAgICBiMCA9IHgxO1xuICAgICAgYTEgPSByLm5lZygpO1xuICAgICAgYjEgPSB4O1xuICAgIH0gZWxzZSBpZiAoYTEgJiYgKytpID09PSAyKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcHJldlIgPSByO1xuXG4gICAgdiA9IHU7XG4gICAgdSA9IHI7XG4gICAgeDIgPSB4MTtcbiAgICB4MSA9IHg7XG4gICAgeTIgPSB5MTtcbiAgICB5MSA9IHk7XG4gIH1cbiAgYTIgPSByLm5lZygpO1xuICBiMiA9IHg7XG5cbiAgdmFyIGxlbjEgPSBhMS5zcXIoKS5hZGQoYjEuc3FyKCkpO1xuICB2YXIgbGVuMiA9IGEyLnNxcigpLmFkZChiMi5zcXIoKSk7XG4gIGlmIChsZW4yLmNtcChsZW4xKSA+PSAwKSB7XG4gICAgYTIgPSBhMDtcbiAgICBiMiA9IGIwO1xuICB9XG5cbiAgLy8gTm9ybWFsaXplIHNpZ25zXG4gIGlmIChhMS5zaWduKSB7XG4gICAgYTEgPSBhMS5uZWcoKTtcbiAgICBiMSA9IGIxLm5lZygpO1xuICB9XG4gIGlmIChhMi5zaWduKSB7XG4gICAgYTIgPSBhMi5uZWcoKTtcbiAgICBiMiA9IGIyLm5lZygpO1xuICB9XG5cbiAgcmV0dXJuIFtcbiAgICB7IGE6IGExLCBiOiBiMSB9LFxuICAgIHsgYTogYTIsIGI6IGIyIH1cbiAgXTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLl9lbmRvU3BsaXQgPSBmdW5jdGlvbiBfZW5kb1NwbGl0KGspIHtcbiAgdmFyIGJhc2lzID0gdGhpcy5lbmRvLmJhc2lzO1xuICB2YXIgdjEgPSBiYXNpc1swXTtcbiAgdmFyIHYyID0gYmFzaXNbMV07XG5cbiAgdmFyIGMxID0gdjIuYi5tdWwoaykuZGl2Um91bmQodGhpcy5uKTtcbiAgdmFyIGMyID0gdjEuYi5uZWcoKS5tdWwoaykuZGl2Um91bmQodGhpcy5uKTtcblxuICB2YXIgcDEgPSBjMS5tdWwodjEuYSk7XG4gIHZhciBwMiA9IGMyLm11bCh2Mi5hKTtcbiAgdmFyIHExID0gYzEubXVsKHYxLmIpO1xuICB2YXIgcTIgPSBjMi5tdWwodjIuYik7XG5cbiAgLy8gQ2FsY3VsYXRlIGFuc3dlclxuICB2YXIgazEgPSBrLnN1YihwMSkuc3ViKHAyKTtcbiAgdmFyIGsyID0gcTEuYWRkKHEyKS5uZWcoKTtcbiAgcmV0dXJuIHsgazE6IGsxLCBrMjogazIgfTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLnBvaW50RnJvbVggPSBmdW5jdGlvbiBwb2ludEZyb21YKG9kZCwgeCkge1xuICB4ID0gbmV3IGJuKHgsIDE2KTtcbiAgaWYgKCF4LnJlZClcbiAgICB4ID0geC50b1JlZCh0aGlzLnJlZCk7XG5cbiAgdmFyIHkyID0geC5yZWRTcXIoKS5yZWRNdWwoeCkucmVkSUFkZCh4LnJlZE11bCh0aGlzLmEpKS5yZWRJQWRkKHRoaXMuYik7XG4gIHZhciB5ID0geTIucmVkU3FydCgpO1xuXG4gIC8vIFhYWCBJcyB0aGVyZSBhbnkgd2F5IHRvIHRlbGwgaWYgdGhlIG51bWJlciBpcyBvZGQgd2l0aG91dCBjb252ZXJ0aW5nIGl0XG4gIC8vIHRvIG5vbi1yZWQgZm9ybT9cbiAgdmFyIGlzT2RkID0geS5mcm9tUmVkKCkuaXNPZGQoKTtcbiAgaWYgKG9kZCAmJiAhaXNPZGQgfHwgIW9kZCAmJiBpc09kZClcbiAgICB5ID0geS5yZWROZWcoKTtcblxuICByZXR1cm4gdGhpcy5wb2ludCh4LCB5KTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUocG9pbnQpIHtcbiAgaWYgKHBvaW50LmluZilcbiAgICByZXR1cm4gdHJ1ZTtcblxuICB2YXIgeCA9IHBvaW50Lng7XG4gIHZhciB5ID0gcG9pbnQueTtcblxuICB2YXIgYXggPSB0aGlzLmEucmVkTXVsKHgpO1xuICB2YXIgcmhzID0geC5yZWRTcXIoKS5yZWRNdWwoeCkucmVkSUFkZChheCkucmVkSUFkZCh0aGlzLmIpO1xuICByZXR1cm4geS5yZWRTcXIoKS5yZWRJU3ViKHJocykuY21wbigwKSA9PT0gMDtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLl9lbmRvV25hZk11bEFkZCA9XG4gICAgZnVuY3Rpb24gX2VuZG9XbmFmTXVsQWRkKHBvaW50cywgY29lZmZzKSB7XG4gIHZhciBucG9pbnRzID0gdGhpcy5fZW5kb1duYWZUMTtcbiAgdmFyIG5jb2VmZnMgPSB0aGlzLl9lbmRvV25hZlQyO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzcGxpdCA9IHRoaXMuX2VuZG9TcGxpdChjb2VmZnNbaV0pO1xuICAgIHZhciBwID0gcG9pbnRzW2ldO1xuICAgIHZhciBiZXRhID0gcC5fZ2V0QmV0YSgpO1xuXG4gICAgaWYgKHNwbGl0LmsxLnNpZ24pIHtcbiAgICAgIHNwbGl0LmsxLnNpZ24gPSAhc3BsaXQuazEuc2lnbjtcbiAgICAgIHAgPSBwLm5lZyh0cnVlKTtcbiAgICB9XG4gICAgaWYgKHNwbGl0LmsyLnNpZ24pIHtcbiAgICAgIHNwbGl0LmsyLnNpZ24gPSAhc3BsaXQuazIuc2lnbjtcbiAgICAgIGJldGEgPSBiZXRhLm5lZyh0cnVlKTtcbiAgICB9XG5cbiAgICBucG9pbnRzW2kgKiAyXSA9IHA7XG4gICAgbnBvaW50c1tpICogMiArIDFdID0gYmV0YTtcbiAgICBuY29lZmZzW2kgKiAyXSA9IHNwbGl0LmsxO1xuICAgIG5jb2VmZnNbaSAqIDIgKyAxXSA9IHNwbGl0LmsyO1xuICB9XG4gIHZhciByZXMgPSB0aGlzLl93bmFmTXVsQWRkKDEsIG5wb2ludHMsIG5jb2VmZnMsIGkgKiAyKTtcblxuICAvLyBDbGVhbi11cCByZWZlcmVuY2VzIHRvIHBvaW50cyBhbmQgY29lZmZpY2llbnRzXG4gIGZvciAodmFyIGogPSAwOyBqIDwgaSAqIDI7IGorKykge1xuICAgIG5wb2ludHNbal0gPSBudWxsO1xuICAgIG5jb2VmZnNbal0gPSBudWxsO1xuICB9XG4gIHJldHVybiByZXM7XG59O1xuXG5mdW5jdGlvbiBQb2ludChjdXJ2ZSwgeCwgeSwgaXNSZWQpIHtcbiAgQmFzZS5CYXNlUG9pbnQuY2FsbCh0aGlzLCBjdXJ2ZSwgJ2FmZmluZScpO1xuICBpZiAoeCA9PT0gbnVsbCAmJiB5ID09PSBudWxsKSB7XG4gICAgdGhpcy54ID0gbnVsbDtcbiAgICB0aGlzLnkgPSBudWxsO1xuICAgIHRoaXMuaW5mID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnggPSBuZXcgYm4oeCwgMTYpO1xuICAgIHRoaXMueSA9IG5ldyBibih5LCAxNik7XG4gICAgLy8gRm9yY2UgcmVkZ29tZXJ5IHJlcHJlc2VudGF0aW9uIHdoZW4gbG9hZGluZyBmcm9tIEpTT05cbiAgICBpZiAoaXNSZWQpIHtcbiAgICAgIHRoaXMueC5mb3JjZVJlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgICB0aGlzLnkuZm9yY2VSZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMueC5yZWQpXG4gICAgICB0aGlzLnggPSB0aGlzLngudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIGlmICghdGhpcy55LnJlZClcbiAgICAgIHRoaXMueSA9IHRoaXMueS50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgdGhpcy5pbmYgPSBmYWxzZTtcbiAgfVxufVxuaW5oZXJpdHMoUG9pbnQsIEJhc2UuQmFzZVBvaW50KTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUucG9pbnQgPSBmdW5jdGlvbiBwb2ludCh4LCB5LCBpc1JlZCkge1xuICByZXR1cm4gbmV3IFBvaW50KHRoaXMsIHgsIHksIGlzUmVkKTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLnBvaW50RnJvbUpTT04gPSBmdW5jdGlvbiBwb2ludEZyb21KU09OKG9iaiwgcmVkKSB7XG4gIHJldHVybiBQb2ludC5mcm9tSlNPTih0aGlzLCBvYmosIHJlZCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuX2dldEJldGEgPSBmdW5jdGlvbiBfZ2V0QmV0YSgpIHtcbiAgaWYgKCF0aGlzLmN1cnZlLmVuZG8pXG4gICAgcmV0dXJuO1xuXG4gIHZhciBwcmUgPSB0aGlzLnByZWNvbXB1dGVkO1xuICBpZiAocHJlICYmIHByZS5iZXRhKVxuICAgIHJldHVybiBwcmUuYmV0YTtcblxuICB2YXIgYmV0YSA9IHRoaXMuY3VydmUucG9pbnQodGhpcy54LnJlZE11bCh0aGlzLmN1cnZlLmVuZG8uYmV0YSksIHRoaXMueSk7XG4gIGlmIChwcmUpIHtcbiAgICB2YXIgY3VydmUgPSB0aGlzLmN1cnZlO1xuICAgIHZhciBlbmRvTXVsID0gZnVuY3Rpb24ocCkge1xuICAgICAgcmV0dXJuIGN1cnZlLnBvaW50KHAueC5yZWRNdWwoY3VydmUuZW5kby5iZXRhKSwgcC55KTtcbiAgICB9O1xuICAgIHByZS5iZXRhID0gYmV0YTtcbiAgICBiZXRhLnByZWNvbXB1dGVkID0ge1xuICAgICAgYmV0YTogbnVsbCxcbiAgICAgIG5hZjogcHJlLm5hZiAmJiB7XG4gICAgICAgIHduZDogcHJlLm5hZi53bmQsXG4gICAgICAgIHBvaW50czogcHJlLm5hZi5wb2ludHMubWFwKGVuZG9NdWwpXG4gICAgICB9LFxuICAgICAgZG91YmxlczogcHJlLmRvdWJsZXMgJiYge1xuICAgICAgICBzdGVwOiBwcmUuZG91Ymxlcy5zdGVwLFxuICAgICAgICBwb2ludHM6IHByZS5kb3VibGVzLnBvaW50cy5tYXAoZW5kb011bClcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHJldHVybiBiZXRhO1xufTtcblxuUG9pbnQucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgaWYgKCF0aGlzLnByZWNvbXB1dGVkKVxuICAgIHJldHVybiBbIHRoaXMueCwgdGhpcy55IF07XG5cbiAgcmV0dXJuIFsgdGhpcy54LCB0aGlzLnksIHRoaXMucHJlY29tcHV0ZWQgJiYge1xuICAgIGRvdWJsZXM6IHRoaXMucHJlY29tcHV0ZWQuZG91YmxlcyAmJiB7XG4gICAgICBzdGVwOiB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXMuc3RlcCxcbiAgICAgIHBvaW50czogdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzLnBvaW50cy5zbGljZSgxKVxuICAgIH0sXG4gICAgbmFmOiB0aGlzLnByZWNvbXB1dGVkLm5hZiAmJiB7XG4gICAgICB3bmQ6IHRoaXMucHJlY29tcHV0ZWQubmFmLnduZCxcbiAgICAgIHBvaW50czogdGhpcy5wcmVjb21wdXRlZC5uYWYucG9pbnRzLnNsaWNlKDEpXG4gICAgfVxuICB9IF07XG59O1xuXG5Qb2ludC5mcm9tSlNPTiA9IGZ1bmN0aW9uIGZyb21KU09OKGN1cnZlLCBvYmosIHJlZCkge1xuICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpXG4gICAgb2JqID0gSlNPTi5wYXJzZShvYmopO1xuICB2YXIgcmVzID0gY3VydmUucG9pbnQob2JqWzBdLCBvYmpbMV0sIHJlZCk7XG4gIGlmICghb2JqWzJdKVxuICAgIHJldHVybiByZXM7XG5cbiAgZnVuY3Rpb24gb2JqMnBvaW50KG9iaikge1xuICAgIHJldHVybiBjdXJ2ZS5wb2ludChvYmpbMF0sIG9ialsxXSwgcmVkKTtcbiAgfVxuXG4gIHZhciBwcmUgPSBvYmpbMl07XG4gIHJlcy5wcmVjb21wdXRlZCA9IHtcbiAgICBiZXRhOiBudWxsLFxuICAgIGRvdWJsZXM6IHByZS5kb3VibGVzICYmIHtcbiAgICAgIHN0ZXA6IHByZS5kb3VibGVzLnN0ZXAsXG4gICAgICBwb2ludHM6IFsgcmVzIF0uY29uY2F0KHByZS5kb3VibGVzLnBvaW50cy5tYXAob2JqMnBvaW50KSlcbiAgICB9LFxuICAgIG5hZjogcHJlLm5hZiAmJiB7XG4gICAgICB3bmQ6IHByZS5uYWYud25kLFxuICAgICAgcG9pbnRzOiBbIHJlcyBdLmNvbmNhdChwcmUubmFmLnBvaW50cy5tYXAob2JqMnBvaW50KSlcbiAgICB9XG4gIH07XG4gIHJldHVybiByZXM7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gJzxFQyBQb2ludCBJbmZpbml0eT4nO1xuICByZXR1cm4gJzxFQyBQb2ludCB4OiAnICsgdGhpcy54LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgK1xuICAgICAgJyB5OiAnICsgdGhpcy55LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgKyAnPic7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaXNJbmZpbml0eSA9IGZ1bmN0aW9uIGlzSW5maW5pdHkoKSB7XG4gIHJldHVybiB0aGlzLmluZjtcbn07XG5cblBvaW50LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQocCkge1xuICAvLyBPICsgUCA9IFBcbiAgaWYgKHRoaXMuaW5mKVxuICAgIHJldHVybiBwO1xuXG4gIC8vIFAgKyBPID0gUFxuICBpZiAocC5pbmYpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gUCArIFAgPSAyUFxuICBpZiAodGhpcy5lcShwKSlcbiAgICByZXR1cm4gdGhpcy5kYmwoKTtcblxuICAvLyBQICsgKC1QKSA9IE9cbiAgaWYgKHRoaXMubmVnKCkuZXEocCkpXG4gICAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCwgbnVsbCk7XG5cbiAgLy8gUCArIFEgPSBPXG4gIGlmICh0aGlzLnguY21wKHAueCkgPT09IDApXG4gICAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCwgbnVsbCk7XG5cbiAgdmFyIGMgPSB0aGlzLnkucmVkU3ViKHAueSk7XG4gIGlmIChjLmNtcG4oMCkgIT09IDApXG4gICAgYyA9IGMucmVkTXVsKHRoaXMueC5yZWRTdWIocC54KS5yZWRJbnZtKCkpO1xuICB2YXIgbnggPSBjLnJlZFNxcigpLnJlZElTdWIodGhpcy54KS5yZWRJU3ViKHAueCk7XG4gIHZhciBueSA9IGMucmVkTXVsKHRoaXMueC5yZWRTdWIobngpKS5yZWRJU3ViKHRoaXMueSk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZGJsID0gZnVuY3Rpb24gZGJsKCkge1xuICBpZiAodGhpcy5pbmYpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gMlAgPSBPXG4gIHZhciB5czEgPSB0aGlzLnkucmVkQWRkKHRoaXMueSk7XG4gIGlmICh5czEuY21wbigwKSA9PT0gMClcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChudWxsLCBudWxsKTtcblxuICB2YXIgYSA9IHRoaXMuY3VydmUuYTtcblxuICB2YXIgeDIgPSB0aGlzLngucmVkU3FyKCk7XG4gIHZhciBkeWludiA9IHlzMS5yZWRJbnZtKCk7XG4gIHZhciBjID0geDIucmVkQWRkKHgyKS5yZWRJQWRkKHgyKS5yZWRJQWRkKGEpLnJlZE11bChkeWludik7XG5cbiAgdmFyIG54ID0gYy5yZWRTcXIoKS5yZWRJU3ViKHRoaXMueC5yZWRBZGQodGhpcy54KSk7XG4gIHZhciBueSA9IGMucmVkTXVsKHRoaXMueC5yZWRTdWIobngpKS5yZWRJU3ViKHRoaXMueSk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZ2V0WCA9IGZ1bmN0aW9uIGdldFgoKSB7XG4gIHJldHVybiB0aGlzLnguZnJvbVJlZCgpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmdldFkgPSBmdW5jdGlvbiBnZXRZKCkge1xuICByZXR1cm4gdGhpcy55LmZyb21SZWQoKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwoaykge1xuICBrID0gbmV3IGJuKGssIDE2KTtcblxuICBpZiAodGhpcy5faGFzRG91YmxlcyhrKSlcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fZml4ZWROYWZNdWwodGhpcywgayk7XG4gIGVsc2UgaWYgKHRoaXMuY3VydmUuZW5kbylcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fZW5kb1duYWZNdWxBZGQoWyB0aGlzIF0sIFsgayBdKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsKHRoaXMsIGspO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bEFkZCA9IGZ1bmN0aW9uIG11bEFkZChrMSwgcDIsIGsyKSB7XG4gIHZhciBwb2ludHMgPSBbIHRoaXMsIHAyIF07XG4gIHZhciBjb2VmZnMgPSBbIGsxLCBrMiBdO1xuICBpZiAodGhpcy5jdXJ2ZS5lbmRvKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl9lbmRvV25hZk11bEFkZChwb2ludHMsIGNvZWZmcyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bEFkZCgxLCBwb2ludHMsIGNvZWZmcywgMik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcShwKSB7XG4gIHJldHVybiB0aGlzID09PSBwIHx8XG4gICAgICAgICB0aGlzLmluZiA9PT0gcC5pbmYgJiZcbiAgICAgICAgICAgICAodGhpcy5pbmYgfHwgdGhpcy54LmNtcChwLngpID09PSAwICYmIHRoaXMueS5jbXAocC55KSA9PT0gMCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnKF9wcmVjb21wdXRlKSB7XG4gIGlmICh0aGlzLmluZilcbiAgICByZXR1cm4gdGhpcztcblxuICB2YXIgcmVzID0gdGhpcy5jdXJ2ZS5wb2ludCh0aGlzLngsIHRoaXMueS5yZWROZWcoKSk7XG4gIGlmIChfcHJlY29tcHV0ZSAmJiB0aGlzLnByZWNvbXB1dGVkKSB7XG4gICAgdmFyIHByZSA9IHRoaXMucHJlY29tcHV0ZWQ7XG4gICAgdmFyIG5lZ2F0ZSA9IGZ1bmN0aW9uKHApIHtcbiAgICAgIHJldHVybiBwLm5lZygpO1xuICAgIH07XG4gICAgcmVzLnByZWNvbXB1dGVkID0ge1xuICAgICAgbmFmOiBwcmUubmFmICYmIHtcbiAgICAgICAgd25kOiBwcmUubmFmLnduZCxcbiAgICAgICAgcG9pbnRzOiBwcmUubmFmLnBvaW50cy5tYXAobmVnYXRlKVxuICAgICAgfSxcbiAgICAgIGRvdWJsZXM6IHByZS5kb3VibGVzICYmIHtcbiAgICAgICAgc3RlcDogcHJlLmRvdWJsZXMuc3RlcCxcbiAgICAgICAgcG9pbnRzOiBwcmUuZG91Ymxlcy5wb2ludHMubWFwKG5lZ2F0ZSlcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHJldHVybiByZXM7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUudG9KID0gZnVuY3Rpb24gdG9KKCkge1xuICBpZiAodGhpcy5pbmYpXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuXG4gIHZhciByZXMgPSB0aGlzLmN1cnZlLmpwb2ludCh0aGlzLngsIHRoaXMueSwgdGhpcy5jdXJ2ZS5vbmUpO1xuICByZXR1cm4gcmVzO1xufTtcblxuZnVuY3Rpb24gSlBvaW50KGN1cnZlLCB4LCB5LCB6KSB7XG4gIEJhc2UuQmFzZVBvaW50LmNhbGwodGhpcywgY3VydmUsICdqYWNvYmlhbicpO1xuICBpZiAoeCA9PT0gbnVsbCAmJiB5ID09PSBudWxsICYmIHogPT09IG51bGwpIHtcbiAgICB0aGlzLnggPSB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnkgPSB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnogPSBuZXcgYm4oMCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54ID0gbmV3IGJuKHgsIDE2KTtcbiAgICB0aGlzLnkgPSBuZXcgYm4oeSwgMTYpO1xuICAgIHRoaXMueiA9IG5ldyBibih6LCAxNik7XG4gIH1cbiAgaWYgKCF0aGlzLngucmVkKVxuICAgIHRoaXMueCA9IHRoaXMueC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gIGlmICghdGhpcy55LnJlZClcbiAgICB0aGlzLnkgPSB0aGlzLnkudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICBpZiAoIXRoaXMuei5yZWQpXG4gICAgdGhpcy56ID0gdGhpcy56LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcblxuICB0aGlzLnpPbmUgPSB0aGlzLnogPT09IHRoaXMuY3VydmUub25lO1xufVxuaW5oZXJpdHMoSlBvaW50LCBCYXNlLkJhc2VQb2ludCk7XG5cblNob3J0Q3VydmUucHJvdG90eXBlLmpwb2ludCA9IGZ1bmN0aW9uIGpwb2ludCh4LCB5LCB6KSB7XG4gIHJldHVybiBuZXcgSlBvaW50KHRoaXMsIHgsIHksIHopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS50b1AgPSBmdW5jdGlvbiB0b1AoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChudWxsLCBudWxsKTtcblxuICB2YXIgemludiA9IHRoaXMuei5yZWRJbnZtKCk7XG4gIHZhciB6aW52MiA9IHppbnYucmVkU3FyKCk7XG4gIHZhciBheCA9IHRoaXMueC5yZWRNdWwoemludjIpO1xuICB2YXIgYXkgPSB0aGlzLnkucmVkTXVsKHppbnYyKS5yZWRNdWwoemludik7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQoYXgsIGF5KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnKCkge1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQodGhpcy54LCB0aGlzLnkucmVkTmVnKCksIHRoaXMueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZChwKSB7XG4gIC8vIE8gKyBQID0gUFxuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHA7XG5cbiAgLy8gUCArIE8gPSBQXG4gIGlmIChwLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyAxMk0gKyA0UyArIDdBXG4gIHZhciBwejIgPSBwLnoucmVkU3FyKCk7XG4gIHZhciB6MiA9IHRoaXMuei5yZWRTcXIoKTtcbiAgdmFyIHUxID0gdGhpcy54LnJlZE11bChwejIpO1xuICB2YXIgdTIgPSBwLngucmVkTXVsKHoyKTtcbiAgdmFyIHMxID0gdGhpcy55LnJlZE11bChwejIucmVkTXVsKHAueikpO1xuICB2YXIgczIgPSBwLnkucmVkTXVsKHoyLnJlZE11bCh0aGlzLnopKTtcblxuICB2YXIgaCA9IHUxLnJlZFN1Yih1Mik7XG4gIHZhciByID0gczEucmVkU3ViKHMyKTtcbiAgaWYgKGguY21wbigwKSA9PT0gMCkge1xuICAgIGlmIChyLmNtcG4oMCkgIT09IDApXG4gICAgICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIHRoaXMuZGJsKCk7XG4gIH1cblxuICB2YXIgaDIgPSBoLnJlZFNxcigpO1xuICB2YXIgaDMgPSBoMi5yZWRNdWwoaCk7XG4gIHZhciB2ID0gdTEucmVkTXVsKGgyKTtcblxuICB2YXIgbnggPSByLnJlZFNxcigpLnJlZElBZGQoaDMpLnJlZElTdWIodikucmVkSVN1Yih2KTtcbiAgdmFyIG55ID0gci5yZWRNdWwodi5yZWRJU3ViKG54KSkucmVkSVN1YihzMS5yZWRNdWwoaDMpKTtcbiAgdmFyIG56ID0gdGhpcy56LnJlZE11bChwLnopLnJlZE11bChoKTtcblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLm1peGVkQWRkID0gZnVuY3Rpb24gbWl4ZWRBZGQocCkge1xuICAvLyBPICsgUCA9IFBcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiBwLnRvSigpO1xuXG4gIC8vIFAgKyBPID0gUFxuICBpZiAocC5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gOE0gKyAzUyArIDdBXG4gIHZhciB6MiA9IHRoaXMuei5yZWRTcXIoKTtcbiAgdmFyIHUxID0gdGhpcy54O1xuICB2YXIgdTIgPSBwLngucmVkTXVsKHoyKTtcbiAgdmFyIHMxID0gdGhpcy55O1xuICB2YXIgczIgPSBwLnkucmVkTXVsKHoyKS5yZWRNdWwodGhpcy56KTtcblxuICB2YXIgaCA9IHUxLnJlZFN1Yih1Mik7XG4gIHZhciByID0gczEucmVkU3ViKHMyKTtcbiAgaWYgKGguY21wbigwKSA9PT0gMCkge1xuICAgIGlmIChyLmNtcG4oMCkgIT09IDApXG4gICAgICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIHRoaXMuZGJsKCk7XG4gIH1cblxuICB2YXIgaDIgPSBoLnJlZFNxcigpO1xuICB2YXIgaDMgPSBoMi5yZWRNdWwoaCk7XG4gIHZhciB2ID0gdTEucmVkTXVsKGgyKTtcblxuICB2YXIgbnggPSByLnJlZFNxcigpLnJlZElBZGQoaDMpLnJlZElTdWIodikucmVkSVN1Yih2KTtcbiAgdmFyIG55ID0gci5yZWRNdWwodi5yZWRJU3ViKG54KSkucmVkSVN1YihzMS5yZWRNdWwoaDMpKTtcbiAgdmFyIG56ID0gdGhpcy56LnJlZE11bChoKTtcblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmRibHAgPSBmdW5jdGlvbiBkYmxwKHBvdykge1xuICBpZiAocG93ID09PSAwKVxuICAgIHJldHVybiB0aGlzO1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG4gIGlmICghcG93KVxuICAgIHJldHVybiB0aGlzLmRibCgpO1xuXG4gIGlmICh0aGlzLmN1cnZlLnplcm9BIHx8IHRoaXMuY3VydmUudGhyZWVBKSB7XG4gICAgdmFyIHIgPSB0aGlzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG93OyBpKyspXG4gICAgICByID0gci5kYmwoKTtcbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIC8vIDFNICsgMlMgKyAxQSArIE4gKiAoNFMgKyA1TSArIDhBKVxuICAvLyBOID0gMSA9PiA2TSArIDZTICsgOUFcbiAgdmFyIGEgPSB0aGlzLmN1cnZlLmE7XG4gIHZhciB0aW52ID0gdGhpcy5jdXJ2ZS50aW52O1xuXG4gIHZhciBqeCA9IHRoaXMueDtcbiAgdmFyIGp5ID0gdGhpcy55O1xuICB2YXIganogPSB0aGlzLno7XG4gIHZhciBqejQgPSBqei5yZWRTcXIoKS5yZWRTcXIoKTtcblxuICAvLyBSZXVzZSByZXN1bHRzXG4gIHZhciBqeWQgPSBqeS5yZWRBZGQoankpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvdzsgaSsrKSB7XG4gICAgdmFyIGp4MiA9IGp4LnJlZFNxcigpO1xuICAgIHZhciBqeWQyID0ganlkLnJlZFNxcigpO1xuICAgIHZhciBqeWQ0ID0ganlkMi5yZWRTcXIoKTtcbiAgICB2YXIgYyA9IGp4Mi5yZWRBZGQoangyKS5yZWRJQWRkKGp4MikucmVkSUFkZChhLnJlZE11bChqejQpKTtcblxuICAgIHZhciB0MSA9IGp4LnJlZE11bChqeWQyKTtcbiAgICB2YXIgbnggPSBjLnJlZFNxcigpLnJlZElTdWIodDEucmVkQWRkKHQxKSk7XG4gICAgdmFyIHQyID0gdDEucmVkSVN1YihueCk7XG4gICAgdmFyIGRueSA9IGMucmVkTXVsKHQyKTtcbiAgICBkbnkgPSBkbnkucmVkSUFkZChkbnkpLnJlZElTdWIoanlkNCk7XG4gICAgdmFyIG56ID0ganlkLnJlZE11bChqeik7XG4gICAgaWYgKGkgKyAxIDwgcG93KVxuICAgICAgano0ID0gano0LnJlZE11bChqeWQ0KTtcblxuICAgIGp4ID0gbng7XG4gICAganogPSBuejtcbiAgICBqeWQgPSBkbnk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQoangsIGp5ZC5yZWRNdWwodGludiksIGp6KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuZGJsID0gZnVuY3Rpb24gZGJsKCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgaWYgKHRoaXMuY3VydmUuemVyb0EpXG4gICAgcmV0dXJuIHRoaXMuX3plcm9EYmwoKTtcbiAgZWxzZSBpZiAodGhpcy5jdXJ2ZS50aHJlZUEpXG4gICAgcmV0dXJuIHRoaXMuX3RocmVlRGJsKCk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5fZGJsKCk7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLl96ZXJvRGJsID0gZnVuY3Rpb24gX3plcm9EYmwoKSB7XG4gIHZhciBueDtcbiAgdmFyIG55O1xuICB2YXIgbno7XG4gIC8vIFogPSAxXG4gIGlmICh0aGlzLnpPbmUpIHtcbiAgICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tc2hvcnR3LWphY29iaWFuLTAuaHRtbFxuICAgIC8vICAgICAjZG91YmxpbmctbWRibC0yMDA3LWJsXG4gICAgLy8gMU0gKyA1UyArIDE0QVxuXG4gICAgLy8gWFggPSBYMV4yXG4gICAgdmFyIHh4ID0gdGhpcy54LnJlZFNxcigpO1xuICAgIC8vIFlZID0gWTFeMlxuICAgIHZhciB5eSA9IHRoaXMueS5yZWRTcXIoKTtcbiAgICAvLyBZWVlZID0gWVleMlxuICAgIHZhciB5eXl5ID0geXkucmVkU3FyKCk7XG4gICAgLy8gUyA9IDIgKiAoKFgxICsgWVkpXjIgLSBYWCAtIFlZWVkpXG4gICAgdmFyIHMgPSB0aGlzLngucmVkQWRkKHl5KS5yZWRTcXIoKS5yZWRJU3ViKHh4KS5yZWRJU3ViKHl5eXkpO1xuICAgIHMgPSBzLnJlZElBZGQocyk7XG4gICAgLy8gTSA9IDMgKiBYWCArIGE7IGEgPSAwXG4gICAgdmFyIG0gPSB4eC5yZWRBZGQoeHgpLnJlZElBZGQoeHgpO1xuICAgIC8vIFQgPSBNIF4gMiAtIDIqU1xuICAgIHZhciB0ID0gbS5yZWRTcXIoKS5yZWRJU3ViKHMpLnJlZElTdWIocyk7XG5cbiAgICAvLyA4ICogWVlZWVxuICAgIHZhciB5eXl5OCA9IHl5eXkucmVkSUFkZCh5eXl5KTtcbiAgICB5eXl5OCA9IHl5eXk4LnJlZElBZGQoeXl5eTgpO1xuICAgIHl5eXk4ID0geXl5eTgucmVkSUFkZCh5eXl5OCk7XG5cbiAgICAvLyBYMyA9IFRcbiAgICBueCA9IHQ7XG4gICAgLy8gWTMgPSBNICogKFMgLSBUKSAtIDggKiBZWVlZXG4gICAgbnkgPSBtLnJlZE11bChzLnJlZElTdWIodCkpLnJlZElTdWIoeXl5eTgpO1xuICAgIC8vIFozID0gMipZMVxuICAgIG56ID0gdGhpcy55LnJlZEFkZCh0aGlzLnkpO1xuICB9IGVsc2Uge1xuICAgIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1zaG9ydHctamFjb2JpYW4tMC5odG1sXG4gICAgLy8gICAgICNkb3VibGluZy1kYmwtMjAwOS1sXG4gICAgLy8gMk0gKyA1UyArIDEzQVxuXG4gICAgLy8gQSA9IFgxXjJcbiAgICB2YXIgYSA9IHRoaXMueC5yZWRTcXIoKTtcbiAgICAvLyBCID0gWTFeMlxuICAgIHZhciBiID0gdGhpcy55LnJlZFNxcigpO1xuICAgIC8vIEMgPSBCXjJcbiAgICB2YXIgYyA9IGIucmVkU3FyKCk7XG4gICAgLy8gRCA9IDIgKiAoKFgxICsgQileMiAtIEEgLSBDKVxuICAgIHZhciBkID0gdGhpcy54LnJlZEFkZChiKS5yZWRTcXIoKS5yZWRJU3ViKGEpLnJlZElTdWIoYyk7XG4gICAgZCA9IGQucmVkSUFkZChkKTtcbiAgICAvLyBFID0gMyAqIEFcbiAgICB2YXIgZSA9IGEucmVkQWRkKGEpLnJlZElBZGQoYSk7XG4gICAgLy8gRiA9IEVeMlxuICAgIHZhciBmID0gZS5yZWRTcXIoKTtcblxuICAgIC8vIDggKiBDXG4gICAgdmFyIGM4ID0gYy5yZWRJQWRkKGMpO1xuICAgIGM4ID0gYzgucmVkSUFkZChjOCk7XG4gICAgYzggPSBjOC5yZWRJQWRkKGM4KTtcblxuICAgIC8vIFgzID0gRiAtIDIgKiBEXG4gICAgbnggPSBmLnJlZElTdWIoZCkucmVkSVN1YihkKTtcbiAgICAvLyBZMyA9IEUgKiAoRCAtIFgzKSAtIDggKiBDXG4gICAgbnkgPSBlLnJlZE11bChkLnJlZElTdWIobngpKS5yZWRJU3ViKGM4KTtcbiAgICAvLyBaMyA9IDIgKiBZMSAqIFoxXG4gICAgbnogPSB0aGlzLnkucmVkTXVsKHRoaXMueik7XG4gICAgbnogPSBuei5yZWRJQWRkKG56KTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuX3RocmVlRGJsID0gZnVuY3Rpb24gX3RocmVlRGJsKCkge1xuICB2YXIgbng7XG4gIHZhciBueTtcbiAgdmFyIG56O1xuICAvLyBaID0gMVxuICBpZiAodGhpcy56T25lKSB7XG4gICAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXNob3J0dy1qYWNvYmlhbi0zLmh0bWxcbiAgICAvLyAgICAgI2RvdWJsaW5nLW1kYmwtMjAwNy1ibFxuICAgIC8vIDFNICsgNVMgKyAxNUFcblxuICAgIC8vIFhYID0gWDFeMlxuICAgIHZhciB4eCA9IHRoaXMueC5yZWRTcXIoKTtcbiAgICAvLyBZWSA9IFkxXjJcbiAgICB2YXIgeXkgPSB0aGlzLnkucmVkU3FyKCk7XG4gICAgLy8gWVlZWSA9IFlZXjJcbiAgICB2YXIgeXl5eSA9IHl5LnJlZFNxcigpO1xuICAgIC8vIFMgPSAyICogKChYMSArIFlZKV4yIC0gWFggLSBZWVlZKVxuICAgIHZhciBzID0gdGhpcy54LnJlZEFkZCh5eSkucmVkU3FyKCkucmVkSVN1Yih4eCkucmVkSVN1Yih5eXl5KTtcbiAgICBzID0gcy5yZWRJQWRkKHMpO1xuICAgIC8vIE0gPSAzICogWFggKyBhXG4gICAgdmFyIG0gPSB4eC5yZWRBZGQoeHgpLnJlZElBZGQoeHgpLnJlZElBZGQodGhpcy5jdXJ2ZS5hKTtcbiAgICAvLyBUID0gTV4yIC0gMiAqIFNcbiAgICB2YXIgdCA9IG0ucmVkU3FyKCkucmVkSVN1YihzKS5yZWRJU3ViKHMpO1xuICAgIC8vIFgzID0gVFxuICAgIG54ID0gdDtcbiAgICAvLyBZMyA9IE0gKiAoUyAtIFQpIC0gOCAqIFlZWVlcbiAgICB2YXIgeXl5eTggPSB5eXl5LnJlZElBZGQoeXl5eSk7XG4gICAgeXl5eTggPSB5eXl5OC5yZWRJQWRkKHl5eXk4KTtcbiAgICB5eXl5OCA9IHl5eXk4LnJlZElBZGQoeXl5eTgpO1xuICAgIG55ID0gbS5yZWRNdWwocy5yZWRJU3ViKHQpKS5yZWRJU3ViKHl5eXk4KTtcbiAgICAvLyBaMyA9IDIgKiBZMVxuICAgIG56ID0gdGhpcy55LnJlZEFkZCh0aGlzLnkpO1xuICB9IGVsc2Uge1xuICAgIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1zaG9ydHctamFjb2JpYW4tMy5odG1sI2RvdWJsaW5nLWRibC0yMDAxLWJcbiAgICAvLyAzTSArIDVTXG5cbiAgICAvLyBkZWx0YSA9IFoxXjJcbiAgICB2YXIgZGVsdGEgPSB0aGlzLnoucmVkU3FyKCk7XG4gICAgLy8gZ2FtbWEgPSBZMV4yXG4gICAgdmFyIGdhbW1hID0gdGhpcy55LnJlZFNxcigpO1xuICAgIC8vIGJldGEgPSBYMSAqIGdhbW1hXG4gICAgdmFyIGJldGEgPSB0aGlzLngucmVkTXVsKGdhbW1hKTtcbiAgICAvLyBhbHBoYSA9IDMgKiAoWDEgLSBkZWx0YSkgKiAoWDEgKyBkZWx0YSlcbiAgICB2YXIgYWxwaGEgPSB0aGlzLngucmVkU3ViKGRlbHRhKS5yZWRNdWwodGhpcy54LnJlZEFkZChkZWx0YSkpO1xuICAgIGFscGhhID0gYWxwaGEucmVkQWRkKGFscGhhKS5yZWRJQWRkKGFscGhhKTtcbiAgICAvLyBYMyA9IGFscGhhXjIgLSA4ICogYmV0YVxuICAgIHZhciBiZXRhNCA9IGJldGEucmVkSUFkZChiZXRhKTtcbiAgICBiZXRhNCA9IGJldGE0LnJlZElBZGQoYmV0YTQpO1xuICAgIHZhciBiZXRhOCA9IGJldGE0LnJlZEFkZChiZXRhNCk7XG4gICAgbnggPSBhbHBoYS5yZWRTcXIoKS5yZWRJU3ViKGJldGE4KTtcbiAgICAvLyBaMyA9IChZMSArIFoxKV4yIC0gZ2FtbWEgLSBkZWx0YVxuICAgIG56ID0gdGhpcy55LnJlZEFkZCh0aGlzLnopLnJlZFNxcigpLnJlZElTdWIoZ2FtbWEpLnJlZElTdWIoZGVsdGEpO1xuICAgIC8vIFkzID0gYWxwaGEgKiAoNCAqIGJldGEgLSBYMykgLSA4ICogZ2FtbWFeMlxuICAgIHZhciBnZ2FtbWE4ID0gZ2FtbWEucmVkU3FyKCk7XG4gICAgZ2dhbW1hOCA9IGdnYW1tYTgucmVkSUFkZChnZ2FtbWE4KTtcbiAgICBnZ2FtbWE4ID0gZ2dhbW1hOC5yZWRJQWRkKGdnYW1tYTgpO1xuICAgIGdnYW1tYTggPSBnZ2FtbWE4LnJlZElBZGQoZ2dhbW1hOCk7XG4gICAgbnkgPSBhbHBoYS5yZWRNdWwoYmV0YTQucmVkSVN1YihueCkpLnJlZElTdWIoZ2dhbW1hOCk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLl9kYmwgPSBmdW5jdGlvbiBfZGJsKCkge1xuICB2YXIgYSA9IHRoaXMuY3VydmUuYTtcblxuICAvLyA0TSArIDZTICsgMTBBXG4gIHZhciBqeCA9IHRoaXMueDtcbiAgdmFyIGp5ID0gdGhpcy55O1xuICB2YXIganogPSB0aGlzLno7XG4gIHZhciBqejQgPSBqei5yZWRTcXIoKS5yZWRTcXIoKTtcblxuICB2YXIgangyID0gangucmVkU3FyKCk7XG4gIHZhciBqeTIgPSBqeS5yZWRTcXIoKTtcblxuICB2YXIgYyA9IGp4Mi5yZWRBZGQoangyKS5yZWRJQWRkKGp4MikucmVkSUFkZChhLnJlZE11bChqejQpKTtcblxuICB2YXIganhkNCA9IGp4LnJlZEFkZChqeCk7XG4gIGp4ZDQgPSBqeGQ0LnJlZElBZGQoanhkNCk7XG4gIHZhciB0MSA9IGp4ZDQucmVkTXVsKGp5Mik7XG4gIHZhciBueCA9IGMucmVkU3FyKCkucmVkSVN1Yih0MS5yZWRBZGQodDEpKTtcbiAgdmFyIHQyID0gdDEucmVkSVN1YihueCk7XG5cbiAgdmFyIGp5ZDggPSBqeTIucmVkU3FyKCk7XG4gIGp5ZDggPSBqeWQ4LnJlZElBZGQoanlkOCk7XG4gIGp5ZDggPSBqeWQ4LnJlZElBZGQoanlkOCk7XG4gIGp5ZDggPSBqeWQ4LnJlZElBZGQoanlkOCk7XG4gIHZhciBueSA9IGMucmVkTXVsKHQyKS5yZWRJU3ViKGp5ZDgpO1xuICB2YXIgbnogPSBqeS5yZWRBZGQoankpLnJlZE11bChqeik7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LCBueSwgbnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS50cnBsID0gZnVuY3Rpb24gdHJwbCgpIHtcbiAgaWYgKCF0aGlzLmN1cnZlLnplcm9BKVxuICAgIHJldHVybiB0aGlzLmRibCgpLmFkZCh0aGlzKTtcblxuICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tc2hvcnR3LWphY29iaWFuLTAuaHRtbCN0cmlwbGluZy10cGwtMjAwNy1ibFxuICAvLyA1TSArIDEwUyArIC4uLlxuXG4gIC8vIFhYID0gWDFeMlxuICB2YXIgeHggPSB0aGlzLngucmVkU3FyKCk7XG4gIC8vIFlZID0gWTFeMlxuICB2YXIgeXkgPSB0aGlzLnkucmVkU3FyKCk7XG4gIC8vIFpaID0gWjFeMlxuICB2YXIgenogPSB0aGlzLnoucmVkU3FyKCk7XG4gIC8vIFlZWVkgPSBZWV4yXG4gIHZhciB5eXl5ID0geXkucmVkU3FyKCk7XG4gIC8vIE0gPSAzICogWFggKyBhICogWloyOyBhID0gMFxuICB2YXIgbSA9IHh4LnJlZEFkZCh4eCkucmVkSUFkZCh4eCk7XG4gIC8vIE1NID0gTV4yXG4gIHZhciBtbSA9IG0ucmVkU3FyKCk7XG4gIC8vIEUgPSA2ICogKChYMSArIFlZKV4yIC0gWFggLSBZWVlZKSAtIE1NXG4gIHZhciBlID0gdGhpcy54LnJlZEFkZCh5eSkucmVkU3FyKCkucmVkSVN1Yih4eCkucmVkSVN1Yih5eXl5KTtcbiAgZSA9IGUucmVkSUFkZChlKTtcbiAgZSA9IGUucmVkQWRkKGUpLnJlZElBZGQoZSk7XG4gIGUgPSBlLnJlZElTdWIobW0pO1xuICAvLyBFRSA9IEVeMlxuICB2YXIgZWUgPSBlLnJlZFNxcigpO1xuICAvLyBUID0gMTYqWVlZWVxuICB2YXIgdCA9IHl5eXkucmVkSUFkZCh5eXl5KTtcbiAgdCA9IHQucmVkSUFkZCh0KTtcbiAgdCA9IHQucmVkSUFkZCh0KTtcbiAgdCA9IHQucmVkSUFkZCh0KTtcbiAgLy8gVSA9IChNICsgRSleMiAtIE1NIC0gRUUgLSBUXG4gIHZhciB1ID0gbS5yZWRJQWRkKGUpLnJlZFNxcigpLnJlZElTdWIobW0pLnJlZElTdWIoZWUpLnJlZElTdWIodCk7XG4gIC8vIFgzID0gNCAqIChYMSAqIEVFIC0gNCAqIFlZICogVSlcbiAgdmFyIHl5dTQgPSB5eS5yZWRNdWwodSk7XG4gIHl5dTQgPSB5eXU0LnJlZElBZGQoeXl1NCk7XG4gIHl5dTQgPSB5eXU0LnJlZElBZGQoeXl1NCk7XG4gIHZhciBueCA9IHRoaXMueC5yZWRNdWwoZWUpLnJlZElTdWIoeXl1NCk7XG4gIG54ID0gbngucmVkSUFkZChueCk7XG4gIG54ID0gbngucmVkSUFkZChueCk7XG4gIC8vIFkzID0gOCAqIFkxICogKFUgKiAoVCAtIFUpIC0gRSAqIEVFKVxuICB2YXIgbnkgPSB0aGlzLnkucmVkTXVsKHUucmVkTXVsKHQucmVkSVN1Yih1KSkucmVkSVN1YihlLnJlZE11bChlZSkpKTtcbiAgbnkgPSBueS5yZWRJQWRkKG55KTtcbiAgbnkgPSBueS5yZWRJQWRkKG55KTtcbiAgbnkgPSBueS5yZWRJQWRkKG55KTtcbiAgLy8gWjMgPSAoWjEgKyBFKV4yIC0gWlogLSBFRVxuICB2YXIgbnogPSB0aGlzLnoucmVkQWRkKGUpLnJlZFNxcigpLnJlZElTdWIoenopLnJlZElTdWIoZWUpO1xuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKGssIGtiYXNlKSB7XG4gIGsgPSBuZXcgYm4oaywga2Jhc2UpO1xuXG4gIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsKHRoaXMsIGspO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxKHApIHtcbiAgaWYgKHAudHlwZSA9PT0gJ2FmZmluZScpXG4gICAgcmV0dXJuIHRoaXMuZXEocC50b0ooKSk7XG5cbiAgaWYgKHRoaXMgPT09IHApXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgLy8geDEgKiB6Ml4yID09IHgyICogejFeMlxuICB2YXIgejIgPSB0aGlzLnoucmVkU3FyKCk7XG4gIHZhciBwejIgPSBwLnoucmVkU3FyKCk7XG4gIGlmICh0aGlzLngucmVkTXVsKHB6MikucmVkSVN1YihwLngucmVkTXVsKHoyKSkuY21wbigwKSAhPT0gMClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8geTEgKiB6Ml4zID09IHkyICogejFeM1xuICB2YXIgejMgPSB6Mi5yZWRNdWwodGhpcy56KTtcbiAgdmFyIHB6MyA9IHB6Mi5yZWRNdWwocC56KTtcbiAgcmV0dXJuIHRoaXMueS5yZWRNdWwocHozKS5yZWRJU3ViKHAueS5yZWRNdWwoejMpKS5jbXBuKDApID09PSAwO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiAnPEVDIEpQb2ludCBJbmZpbml0eT4nO1xuICByZXR1cm4gJzxFQyBKUG9pbnQgeDogJyArIHRoaXMueC50b1N0cmluZygxNiwgMikgK1xuICAgICAgJyB5OiAnICsgdGhpcy55LnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHo6ICcgKyB0aGlzLnoudG9TdHJpbmcoMTYsIDIpICsgJz4nO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5pc0luZmluaXR5ID0gZnVuY3Rpb24gaXNJbmZpbml0eSgpIHtcbiAgLy8gWFhYIFRoaXMgY29kZSBhc3N1bWVzIHRoYXQgemVybyBpcyBhbHdheXMgemVybyBpbiByZWRcbiAgcmV0dXJuIHRoaXMuei5jbXBuKDApID09PSAwO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGN1cnZlID0gcmVxdWlyZSgnLi4vY3VydmUnKTtcbnZhciBibiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIEJhc2UgPSBjdXJ2ZS5iYXNlO1xuXG5mdW5jdGlvbiBNb250Q3VydmUoY29uZikge1xuICBCYXNlLmNhbGwodGhpcywgJ21vbnQnLCBjb25mKTtcblxuICB0aGlzLmEgPSBuZXcgYm4oY29uZi5hLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLmIgPSBuZXcgYm4oY29uZi5iLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLmk0ID0gbmV3IGJuKDQpLnRvUmVkKHRoaXMucmVkKS5yZWRJbnZtKCk7XG4gIHRoaXMudHdvID0gbmV3IGJuKDIpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5hMjQgPSB0aGlzLmk0LnJlZE11bCh0aGlzLmEucmVkQWRkKHRoaXMudHdvKSk7XG59XG5pbmhlcml0cyhNb250Q3VydmUsIEJhc2UpO1xubW9kdWxlLmV4cG9ydHMgPSBNb250Q3VydmU7XG5cbk1vbnRDdXJ2ZS5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZShwb2ludCkge1xuICB2YXIgeCA9IHBvaW50Lm5vcm1hbGl6ZSgpLng7XG4gIHZhciB4MiA9IHgucmVkU3FyKCk7XG4gIHZhciByaHMgPSB4Mi5yZWRNdWwoeCkucmVkQWRkKHgyLnJlZE11bCh0aGlzLmEpKS5yZWRBZGQoeCk7XG4gIHZhciB5ID0gcmhzLnJlZFNxcnQoKTtcblxuICByZXR1cm4geS5yZWRTcXIoKS5jbXAocmhzKSA9PT0gMDtcbn07XG5cbmZ1bmN0aW9uIFBvaW50KGN1cnZlLCB4LCB6KSB7XG4gIEJhc2UuQmFzZVBvaW50LmNhbGwodGhpcywgY3VydmUsICdwcm9qZWN0aXZlJyk7XG4gIGlmICh4ID09PSBudWxsICYmIHogPT09IG51bGwpIHtcbiAgICB0aGlzLnggPSB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnogPSB0aGlzLmN1cnZlLnplcm87XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54ID0gbmV3IGJuKHgsIDE2KTtcbiAgICB0aGlzLnogPSBuZXcgYm4oeiwgMTYpO1xuICAgIGlmICghdGhpcy54LnJlZClcbiAgICAgIHRoaXMueCA9IHRoaXMueC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgaWYgKCF0aGlzLnoucmVkKVxuICAgICAgdGhpcy56ID0gdGhpcy56LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgfVxufVxuaW5oZXJpdHMoUG9pbnQsIEJhc2UuQmFzZVBvaW50KTtcblxuTW9udEN1cnZlLnByb3RvdHlwZS5wb2ludCA9IGZ1bmN0aW9uIHBvaW50KHgsIHopIHtcbiAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLCB4LCB6KTtcbn07XG5cbk1vbnRDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tSlNPTiA9IGZ1bmN0aW9uIHBvaW50RnJvbUpTT04ob2JqKSB7XG4gIHJldHVybiBQb2ludC5mcm9tSlNPTih0aGlzLCBvYmopO1xufTtcblxuUG9pbnQucHJvdG90eXBlLnByZWNvbXB1dGUgPSBmdW5jdGlvbiBwcmVjb21wdXRlKCkge1xuICAvLyBOby1vcFxufTtcblxuUG9pbnQuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihjdXJ2ZSwgb2JqKSB7XG4gIHJldHVybiBuZXcgUG9pbnQoY3VydmUsIG9ialswXSwgb2JqWzFdIHx8IGN1cnZlLm9uZSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gJzxFQyBQb2ludCBJbmZpbml0eT4nO1xuICByZXR1cm4gJzxFQyBQb2ludCB4OiAnICsgdGhpcy54LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgK1xuICAgICAgJyB6OiAnICsgdGhpcy56LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgKyAnPic7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaXNJbmZpbml0eSA9IGZ1bmN0aW9uIGlzSW5maW5pdHkoKSB7XG4gIC8vIFhYWCBUaGlzIGNvZGUgYXNzdW1lcyB0aGF0IHplcm8gaXMgYWx3YXlzIHplcm8gaW4gcmVkXG4gIHJldHVybiB0aGlzLnouY21wbigwKSA9PT0gMDtcbn07XG5cblBvaW50LnByb3RvdHlwZS5kYmwgPSBmdW5jdGlvbiBkYmwoKSB7XG4gIC8vIGh0dHA6Ly9oeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tbW9udGdvbS14ei5odG1sI2RvdWJsaW5nLWRibC0xOTg3LW0tM1xuICAvLyAyTSArIDJTICsgNEFcblxuICAvLyBBID0gWDEgKyBaMVxuICB2YXIgYSA9IHRoaXMueC5yZWRBZGQodGhpcy56KTtcbiAgLy8gQUEgPSBBXjJcbiAgdmFyIGFhID0gYS5yZWRTcXIoKTtcbiAgLy8gQiA9IFgxIC0gWjFcbiAgdmFyIGIgPSB0aGlzLngucmVkU3ViKHRoaXMueik7XG4gIC8vIEJCID0gQl4yXG4gIHZhciBiYiA9IGIucmVkU3FyKCk7XG4gIC8vIEMgPSBBQSAtIEJCXG4gIHZhciBjID0gYWEucmVkU3ViKGJiKTtcbiAgLy8gWDMgPSBBQSAqIEJCXG4gIHZhciBueCA9IGFhLnJlZE11bChiYik7XG4gIC8vIFozID0gQyAqIChCQiArIEEyNCAqIEMpXG4gIHZhciBueiA9IGMucmVkTXVsKGJiLnJlZEFkZCh0aGlzLmN1cnZlLmEyNC5yZWRNdWwoYykpKTtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG56KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQoKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IHN1cHBvcnRlZCBvbiBNb250Z29tZXJ5IGN1cnZlJyk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZGlmZkFkZCA9IGZ1bmN0aW9uIGRpZmZBZGQocCwgZGlmZikge1xuICAvLyBodHRwOi8vaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLW1vbnRnb20teHouaHRtbCNkaWZmYWRkLWRhZGQtMTk4Ny1tLTNcbiAgLy8gNE0gKyAyUyArIDZBXG5cbiAgLy8gQSA9IFgyICsgWjJcbiAgdmFyIGEgPSB0aGlzLngucmVkQWRkKHRoaXMueik7XG4gIC8vIEIgPSBYMiAtIFoyXG4gIHZhciBiID0gdGhpcy54LnJlZFN1Yih0aGlzLnopO1xuICAvLyBDID0gWDMgKyBaM1xuICB2YXIgYyA9IHAueC5yZWRBZGQocC56KTtcbiAgLy8gRCA9IFgzIC0gWjNcbiAgdmFyIGQgPSBwLngucmVkU3ViKHAueik7XG4gIC8vIERBID0gRCAqIEFcbiAgdmFyIGRhID0gZC5yZWRNdWwoYSk7XG4gIC8vIENCID0gQyAqIEJcbiAgdmFyIGNiID0gYy5yZWRNdWwoYik7XG4gIC8vIFg1ID0gWjEgKiAoREEgKyBDQileMlxuICB2YXIgbnggPSBkaWZmLnoucmVkTXVsKGRhLnJlZEFkZChjYikucmVkU3FyKCkpO1xuICAvLyBaNSA9IFgxICogKERBIC0gQ0IpXjJcbiAgdmFyIG56ID0gZGlmZi54LnJlZE11bChkYS5yZWRJU3ViKGNiKS5yZWRTcXIoKSk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKGspIHtcbiAgdmFyIHQgPSBrLmNsb25lKCk7XG4gIHZhciBhID0gdGhpczsgLy8gKE4gLyAyKSAqIFEgKyBRXG4gIHZhciBiID0gdGhpcy5jdXJ2ZS5wb2ludChudWxsLCBudWxsKTsgLy8gKE4gLyAyKSAqIFFcbiAgdmFyIGMgPSB0aGlzOyAvLyBRXG5cbiAgZm9yICh2YXIgYml0cyA9IFtdOyB0LmNtcG4oMCkgIT09IDA7IHQuaXNocm4oMSkpXG4gICAgYml0cy5wdXNoKHQuYW5kbG4oMSkpO1xuXG4gIGZvciAodmFyIGkgPSBiaXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKGJpdHNbaV0gPT09IDApIHtcbiAgICAgIC8vIE4gKiBRICsgUSA9ICgoTiAvIDIpICogUSArIFEpKSArIChOIC8gMikgKiBRXG4gICAgICBhID0gYS5kaWZmQWRkKGIsIGMpO1xuICAgICAgLy8gTiAqIFEgPSAyICogKChOIC8gMikgKiBRICsgUSkpXG4gICAgICBiID0gYi5kYmwoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTiAqIFEgPSAoKE4gLyAyKSAqIFEgKyBRKSArICgoTiAvIDIpICogUSlcbiAgICAgIGIgPSBhLmRpZmZBZGQoYiwgYyk7XG4gICAgICAvLyBOICogUSArIFEgPSAyICogKChOIC8gMikgKiBRICsgUSlcbiAgICAgIGEgPSBhLmRibCgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYjtcbn07XG5cblBvaW50LnByb3RvdHlwZS5tdWxBZGQgPSBmdW5jdGlvbiBtdWxBZGQoKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IHN1cHBvcnRlZCBvbiBNb250Z29tZXJ5IGN1cnZlJyk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubm9ybWFsaXplID0gZnVuY3Rpb24gbm9ybWFsaXplKCkge1xuICB0aGlzLnggPSB0aGlzLngucmVkTXVsKHRoaXMuei5yZWRJbnZtKCkpO1xuICB0aGlzLnogPSB0aGlzLmN1cnZlLm9uZTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZ2V0WCA9IGZ1bmN0aW9uIGdldFgoKSB7XG4gIC8vIE5vcm1hbGl6ZSBjb29yZGluYXRlc1xuICB0aGlzLm5vcm1hbGl6ZSgpO1xuXG4gIHJldHVybiB0aGlzLnguZnJvbVJlZCgpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGN1cnZlID0gcmVxdWlyZSgnLi4vY3VydmUnKTtcbnZhciBlbGxpcHRpYyA9IHJlcXVpcmUoJy4uLy4uL2VsbGlwdGljJyk7XG52YXIgYm4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBCYXNlID0gY3VydmUuYmFzZTtcblxudmFyIGFzc2VydCA9IGVsbGlwdGljLnV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gRWR3YXJkc0N1cnZlKGNvbmYpIHtcbiAgLy8gTk9URTogSW1wb3J0YW50IGFzIHdlIGFyZSBjcmVhdGluZyBwb2ludCBpbiBCYXNlLmNhbGwoKVxuICB0aGlzLnR3aXN0ZWQgPSAoY29uZi5hIHwgMCkgIT09IDE7XG4gIHRoaXMubU9uZUEgPSB0aGlzLnR3aXN0ZWQgJiYgKGNvbmYuYSB8IDApID09PSAtMTtcbiAgdGhpcy5leHRlbmRlZCA9IHRoaXMubU9uZUE7XG5cbiAgQmFzZS5jYWxsKHRoaXMsICdlZHdhcmRzJywgY29uZik7XG5cbiAgdGhpcy5hID0gbmV3IGJuKGNvbmYuYSwgMTYpLm1vZCh0aGlzLnJlZC5tKS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuYyA9IG5ldyBibihjb25mLmMsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuYzIgPSB0aGlzLmMucmVkU3FyKCk7XG4gIHRoaXMuZCA9IG5ldyBibihjb25mLmQsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuZGQgPSB0aGlzLmQucmVkQWRkKHRoaXMuZCk7XG5cbiAgYXNzZXJ0KCF0aGlzLnR3aXN0ZWQgfHwgdGhpcy5jLmZyb21SZWQoKS5jbXBuKDEpID09PSAwKTtcbiAgdGhpcy5vbmVDID0gKGNvbmYuYyB8IDApID09PSAxO1xufVxuaW5oZXJpdHMoRWR3YXJkc0N1cnZlLCBCYXNlKTtcbm1vZHVsZS5leHBvcnRzID0gRWR3YXJkc0N1cnZlO1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLl9tdWxBID0gZnVuY3Rpb24gX211bEEobnVtKSB7XG4gIGlmICh0aGlzLm1PbmVBKVxuICAgIHJldHVybiBudW0ucmVkTmVnKCk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5hLnJlZE11bChudW0pO1xufTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5fbXVsQyA9IGZ1bmN0aW9uIF9tdWxDKG51bSkge1xuICBpZiAodGhpcy5vbmVDKVxuICAgIHJldHVybiBudW07XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5jLnJlZE11bChudW0pO1xufTtcblxuLy8gSnVzdCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIFNob3J0IGN1cnZlXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLmpwb2ludCA9IGZ1bmN0aW9uIGpwb2ludCh4LCB5LCB6LCB0KSB7XG4gIHJldHVybiB0aGlzLnBvaW50KHgsIHksIHosIHQpO1xufTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5wb2ludEZyb21YID0gZnVuY3Rpb24gcG9pbnRGcm9tWChvZGQsIHgpIHtcbiAgeCA9IG5ldyBibih4LCAxNik7XG4gIGlmICgheC5yZWQpXG4gICAgeCA9IHgudG9SZWQodGhpcy5yZWQpO1xuXG4gIHZhciB4MiA9IHgucmVkU3FyKCk7XG4gIHZhciByaHMgPSB0aGlzLmMyLnJlZFN1Yih0aGlzLmEucmVkTXVsKHgyKSk7XG4gIHZhciBsaHMgPSB0aGlzLm9uZS5yZWRTdWIodGhpcy5jMi5yZWRNdWwodGhpcy5kKS5yZWRNdWwoeDIpKTtcblxuICB2YXIgeSA9IHJocy5yZWRNdWwobGhzLnJlZEludm0oKSkucmVkU3FydCgpO1xuICB2YXIgaXNPZGQgPSB5LmZyb21SZWQoKS5pc09kZCgpO1xuICBpZiAob2RkICYmICFpc09kZCB8fCAhb2RkICYmIGlzT2RkKVxuICAgIHkgPSB5LnJlZE5lZygpO1xuXG4gIHJldHVybiB0aGlzLnBvaW50KHgsIHksIGN1cnZlLm9uZSk7XG59O1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUocG9pbnQpIHtcbiAgaWYgKHBvaW50LmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdHJ1ZTtcblxuICAvLyBDdXJ2ZTogQSAqIFheMiArIFleMiA9IENeMiAqICgxICsgRCAqIFheMiAqIFleMilcbiAgcG9pbnQubm9ybWFsaXplKCk7XG5cbiAgdmFyIHgyID0gcG9pbnQueC5yZWRTcXIoKTtcbiAgdmFyIHkyID0gcG9pbnQueS5yZWRTcXIoKTtcbiAgdmFyIGxocyA9IHgyLnJlZE11bCh0aGlzLmEpLnJlZEFkZCh5Mik7XG4gIHZhciByaHMgPSB0aGlzLmMyLnJlZE11bCh0aGlzLm9uZS5yZWRBZGQodGhpcy5kLnJlZE11bCh4MikucmVkTXVsKHkyKSkpO1xuXG4gIHJldHVybiBsaHMuY21wKHJocykgPT09IDA7XG59O1xuXG5mdW5jdGlvbiBQb2ludChjdXJ2ZSwgeCwgeSwgeiwgdCkge1xuICBCYXNlLkJhc2VQb2ludC5jYWxsKHRoaXMsIGN1cnZlLCAncHJvamVjdGl2ZScpO1xuICBpZiAoeCA9PT0gbnVsbCAmJiB5ID09PSBudWxsICYmIHogPT09IG51bGwpIHtcbiAgICB0aGlzLnggPSB0aGlzLmN1cnZlLnplcm87XG4gICAgdGhpcy55ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy56ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy50ID0gdGhpcy5jdXJ2ZS56ZXJvO1xuICAgIHRoaXMuek9uZSA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54ID0gbmV3IGJuKHgsIDE2KTtcbiAgICB0aGlzLnkgPSBuZXcgYm4oeSwgMTYpO1xuICAgIHRoaXMueiA9IHogPyBuZXcgYm4oeiwgMTYpIDogdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy50ID0gdCAmJiBuZXcgYm4odCwgMTYpO1xuICAgIGlmICghdGhpcy54LnJlZClcbiAgICAgIHRoaXMueCA9IHRoaXMueC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgaWYgKCF0aGlzLnkucmVkKVxuICAgICAgdGhpcy55ID0gdGhpcy55LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICBpZiAoIXRoaXMuei5yZWQpXG4gICAgICB0aGlzLnogPSB0aGlzLnoudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIGlmICh0aGlzLnQgJiYgIXRoaXMudC5yZWQpXG4gICAgICB0aGlzLnQgPSB0aGlzLnQudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIHRoaXMuek9uZSA9IHRoaXMueiA9PT0gdGhpcy5jdXJ2ZS5vbmU7XG5cbiAgICAvLyBVc2UgZXh0ZW5kZWQgY29vcmRpbmF0ZXNcbiAgICBpZiAodGhpcy5jdXJ2ZS5leHRlbmRlZCAmJiAhdGhpcy50KSB7XG4gICAgICB0aGlzLnQgPSB0aGlzLngucmVkTXVsKHRoaXMueSk7XG4gICAgICBpZiAoIXRoaXMuek9uZSlcbiAgICAgICAgdGhpcy50ID0gdGhpcy50LnJlZE11bCh0aGlzLnoucmVkSW52bSgpKTtcbiAgICB9XG4gIH1cbn1cbmluaGVyaXRzKFBvaW50LCBCYXNlLkJhc2VQb2ludCk7XG5cbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tSlNPTiA9IGZ1bmN0aW9uIHBvaW50RnJvbUpTT04ob2JqKSB7XG4gIHJldHVybiBQb2ludC5mcm9tSlNPTih0aGlzLCBvYmopO1xufTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5wb2ludCA9IGZ1bmN0aW9uIHBvaW50KHgsIHksIHosIHQpIHtcbiAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLCB4LCB5LCB6LCB0KTtcbn07XG5cblBvaW50LmZyb21KU09OID0gZnVuY3Rpb24gZnJvbUpTT04oY3VydmUsIG9iaikge1xuICByZXR1cm4gbmV3IFBvaW50KGN1cnZlLCBvYmpbMF0sIG9ialsxXSwgb2JqWzJdKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiAnPEVDIFBvaW50IEluZmluaXR5Pic7XG4gIHJldHVybiAnPEVDIFBvaW50IHg6ICcgKyB0aGlzLnguZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHk6ICcgKyB0aGlzLnkuZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHo6ICcgKyB0aGlzLnouZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArICc+Jztcbn07XG5cblBvaW50LnByb3RvdHlwZS5pc0luZmluaXR5ID0gZnVuY3Rpb24gaXNJbmZpbml0eSgpIHtcbiAgLy8gWFhYIFRoaXMgY29kZSBhc3N1bWVzIHRoYXQgemVybyBpcyBhbHdheXMgemVybyBpbiByZWRcbiAgcmV0dXJuIHRoaXMueC5jbXBuKDApID09PSAwICYmXG4gICAgICAgICB0aGlzLnkuY21wKHRoaXMueikgPT09IDA7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuX2V4dERibCA9IGZ1bmN0aW9uIF9leHREYmwoKSB7XG4gIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by10d2lzdGVkLWV4dGVuZGVkLTEuaHRtbFxuICAvLyAgICAgI2RvdWJsaW5nLWRibC0yMDA4LWh3Y2RcbiAgLy8gNE0gKyA0U1xuXG4gIC8vIEEgPSBYMV4yXG4gIHZhciBhID0gdGhpcy54LnJlZFNxcigpO1xuICAvLyBCID0gWTFeMlxuICB2YXIgYiA9IHRoaXMueS5yZWRTcXIoKTtcbiAgLy8gQyA9IDIgKiBaMV4yXG4gIHZhciBjID0gdGhpcy56LnJlZFNxcigpO1xuICBjID0gYy5yZWRJQWRkKGMpO1xuICAvLyBEID0gYSAqIEFcbiAgdmFyIGQgPSB0aGlzLmN1cnZlLl9tdWxBKGEpO1xuICAvLyBFID0gKFgxICsgWTEpXjIgLSBBIC0gQlxuICB2YXIgZSA9IHRoaXMueC5yZWRBZGQodGhpcy55KS5yZWRTcXIoKS5yZWRJU3ViKGEpLnJlZElTdWIoYik7XG4gIC8vIEcgPSBEICsgQlxuICB2YXIgZyA9IGQucmVkQWRkKGIpO1xuICAvLyBGID0gRyAtIENcbiAgdmFyIGYgPSBnLnJlZFN1YihjKTtcbiAgLy8gSCA9IEQgLSBCXG4gIHZhciBoID0gZC5yZWRTdWIoYik7XG4gIC8vIFgzID0gRSAqIEZcbiAgdmFyIG54ID0gZS5yZWRNdWwoZik7XG4gIC8vIFkzID0gRyAqIEhcbiAgdmFyIG55ID0gZy5yZWRNdWwoaCk7XG4gIC8vIFQzID0gRSAqIEhcbiAgdmFyIG50ID0gZS5yZWRNdWwoaCk7XG4gIC8vIFozID0gRiAqIEdcbiAgdmFyIG56ID0gZi5yZWRNdWwoZyk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSwgbnosIG50KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fcHJvakRibCA9IGZ1bmN0aW9uIF9wcm9qRGJsKCkge1xuICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tdHdpc3RlZC1wcm9qZWN0aXZlLmh0bWxcbiAgLy8gICAgICNkb3VibGluZy1kYmwtMjAwOC1iYmpscFxuICAvLyAgICAgI2RvdWJsaW5nLWRibC0yMDA3LWJsXG4gIC8vIGFuZCBvdGhlcnNcbiAgLy8gR2VuZXJhbGx5IDNNICsgNFMgb3IgMk0gKyA0U1xuXG4gIC8vIEIgPSAoWDEgKyBZMSleMlxuICB2YXIgYiA9IHRoaXMueC5yZWRBZGQodGhpcy55KS5yZWRTcXIoKTtcbiAgLy8gQyA9IFgxXjJcbiAgdmFyIGMgPSB0aGlzLngucmVkU3FyKCk7XG4gIC8vIEQgPSBZMV4yXG4gIHZhciBkID0gdGhpcy55LnJlZFNxcigpO1xuXG4gIHZhciBueDtcbiAgdmFyIG55O1xuICB2YXIgbno7XG4gIGlmICh0aGlzLmN1cnZlLnR3aXN0ZWQpIHtcbiAgICAvLyBFID0gYSAqIENcbiAgICB2YXIgZSA9IHRoaXMuY3VydmUuX211bEEoYyk7XG4gICAgLy8gRiA9IEUgKyBEXG4gICAgdmFyIGYgPSBlLnJlZEFkZChkKTtcbiAgICBpZiAodGhpcy56T25lKSB7XG4gICAgICAvLyBYMyA9IChCIC0gQyAtIEQpICogKEYgLSAyKVxuICAgICAgbnggPSBiLnJlZFN1YihjKS5yZWRTdWIoZCkucmVkTXVsKGYucmVkU3ViKHRoaXMuY3VydmUudHdvKSk7XG4gICAgICAvLyBZMyA9IEYgKiAoRSAtIEQpXG4gICAgICBueSA9IGYucmVkTXVsKGUucmVkU3ViKGQpKTtcbiAgICAgIC8vIFozID0gRl4yIC0gMiAqIEZcbiAgICAgIG56ID0gZi5yZWRTcXIoKS5yZWRTdWIoZikucmVkU3ViKGYpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBIID0gWjFeMlxuICAgICAgdmFyIGggPSB0aGlzLnoucmVkU3FyKCk7XG4gICAgICAvLyBKID0gRiAtIDIgKiBIXG4gICAgICB2YXIgaiA9IGYucmVkU3ViKGgpLnJlZElTdWIoaCk7XG4gICAgICAvLyBYMyA9IChCLUMtRCkqSlxuICAgICAgbnggPSBiLnJlZFN1YihjKS5yZWRJU3ViKGQpLnJlZE11bChqKTtcbiAgICAgIC8vIFkzID0gRiAqIChFIC0gRClcbiAgICAgIG55ID0gZi5yZWRNdWwoZS5yZWRTdWIoZCkpO1xuICAgICAgLy8gWjMgPSBGICogSlxuICAgICAgbnogPSBmLnJlZE11bChqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gRSA9IEMgKyBEXG4gICAgdmFyIGUgPSBjLnJlZEFkZChkKTtcbiAgICAvLyBIID0gKGMgKiBaMSleMlxuICAgIHZhciBoID0gdGhpcy5jdXJ2ZS5fbXVsQyh0aGlzLmMucmVkTXVsKHRoaXMueikpLnJlZFNxcigpO1xuICAgIC8vIEogPSBFIC0gMiAqIEhcbiAgICB2YXIgaiA9IGUucmVkU3ViKGgpLnJlZFN1YihoKTtcbiAgICAvLyBYMyA9IGMgKiAoQiAtIEUpICogSlxuICAgIG54ID0gdGhpcy5jdXJ2ZS5fbXVsQyhiLnJlZElTdWIoZSkpLnJlZE11bChqKTtcbiAgICAvLyBZMyA9IGMgKiBFICogKEMgLSBEKVxuICAgIG55ID0gdGhpcy5jdXJ2ZS5fbXVsQyhlKS5yZWRNdWwoYy5yZWRJU3ViKGQpKTtcbiAgICAvLyBaMyA9IEUgKiBKXG4gICAgbnogPSBlLnJlZE11bChqKTtcbiAgfVxuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnksIG56KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5kYmwgPSBmdW5jdGlvbiBkYmwoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBEb3VibGUgaW4gZXh0ZW5kZWQgY29vcmRpbmF0ZXNcbiAgaWYgKHRoaXMuY3VydmUuZXh0ZW5kZWQpXG4gICAgcmV0dXJuIHRoaXMuX2V4dERibCgpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuX3Byb2pEYmwoKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fZXh0QWRkID0gZnVuY3Rpb24gX2V4dEFkZChwKSB7XG4gIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by10d2lzdGVkLWV4dGVuZGVkLTEuaHRtbFxuICAvLyAgICAgI2FkZGl0aW9uLWFkZC0yMDA4LWh3Y2QtM1xuICAvLyA4TVxuXG4gIC8vIEEgPSAoWTEgLSBYMSkgKiAoWTIgLSBYMilcbiAgdmFyIGEgPSB0aGlzLnkucmVkU3ViKHRoaXMueCkucmVkTXVsKHAueS5yZWRTdWIocC54KSk7XG4gIC8vIEIgPSAoWTEgKyBYMSkgKiAoWTIgKyBYMilcbiAgdmFyIGIgPSB0aGlzLnkucmVkQWRkKHRoaXMueCkucmVkTXVsKHAueS5yZWRBZGQocC54KSk7XG4gIC8vIEMgPSBUMSAqIGsgKiBUMlxuICB2YXIgYyA9IHRoaXMudC5yZWRNdWwodGhpcy5jdXJ2ZS5kZCkucmVkTXVsKHAudCk7XG4gIC8vIEQgPSBaMSAqIDIgKiBaMlxuICB2YXIgZCA9IHRoaXMuei5yZWRNdWwocC56LnJlZEFkZChwLnopKTtcbiAgLy8gRSA9IEIgLSBBXG4gIHZhciBlID0gYi5yZWRTdWIoYSk7XG4gIC8vIEYgPSBEIC0gQ1xuICB2YXIgZiA9IGQucmVkU3ViKGMpO1xuICAvLyBHID0gRCArIENcbiAgdmFyIGcgPSBkLnJlZEFkZChjKTtcbiAgLy8gSCA9IEIgKyBBXG4gIHZhciBoID0gYi5yZWRBZGQoYSk7XG4gIC8vIFgzID0gRSAqIEZcbiAgdmFyIG54ID0gZS5yZWRNdWwoZik7XG4gIC8vIFkzID0gRyAqIEhcbiAgdmFyIG55ID0gZy5yZWRNdWwoaCk7XG4gIC8vIFQzID0gRSAqIEhcbiAgdmFyIG50ID0gZS5yZWRNdWwoaCk7XG4gIC8vIFozID0gRiAqIEdcbiAgdmFyIG56ID0gZi5yZWRNdWwoZyk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSwgbnosIG50KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fcHJvakFkZCA9IGZ1bmN0aW9uIF9wcm9qQWRkKHApIHtcbiAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXR3aXN0ZWQtcHJvamVjdGl2ZS5odG1sXG4gIC8vICAgICAjYWRkaXRpb24tYWRkLTIwMDgtYmJqbHBcbiAgLy8gICAgICNhZGRpdGlvbi1hZGQtMjAwNy1ibFxuICAvLyAxME0gKyAxU1xuXG4gIC8vIEEgPSBaMSAqIFoyXG4gIHZhciBhID0gdGhpcy56LnJlZE11bChwLnopO1xuICAvLyBCID0gQV4yXG4gIHZhciBiID0gYS5yZWRTcXIoKTtcbiAgLy8gQyA9IFgxICogWDJcbiAgdmFyIGMgPSB0aGlzLngucmVkTXVsKHAueCk7XG4gIC8vIEQgPSBZMSAqIFkyXG4gIHZhciBkID0gdGhpcy55LnJlZE11bChwLnkpO1xuICAvLyBFID0gZCAqIEMgKiBEXG4gIHZhciBlID0gdGhpcy5jdXJ2ZS5kLnJlZE11bChjKS5yZWRNdWwoZCk7XG4gIC8vIEYgPSBCIC0gRVxuICB2YXIgZiA9IGIucmVkU3ViKGUpO1xuICAvLyBHID0gQiArIEVcbiAgdmFyIGcgPSBiLnJlZEFkZChlKTtcbiAgLy8gWDMgPSBBICogRiAqICgoWDEgKyBZMSkgKiAoWDIgKyBZMikgLSBDIC0gRClcbiAgdmFyIHRtcCA9IHRoaXMueC5yZWRBZGQodGhpcy55KS5yZWRNdWwocC54LnJlZEFkZChwLnkpKS5yZWRJU3ViKGMpLnJlZElTdWIoZCk7XG4gIHZhciBueCA9IGEucmVkTXVsKGYpLnJlZE11bCh0bXApO1xuICB2YXIgbnk7XG4gIHZhciBuejtcbiAgaWYgKHRoaXMuY3VydmUudHdpc3RlZCkge1xuICAgIC8vIFkzID0gQSAqIEcgKiAoRCAtIGEgKiBDKVxuICAgIG55ID0gYS5yZWRNdWwoZykucmVkTXVsKGQucmVkU3ViKHRoaXMuY3VydmUuX211bEEoYykpKTtcbiAgICAvLyBaMyA9IEYgKiBHXG4gICAgbnogPSBmLnJlZE11bChnKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBZMyA9IEEgKiBHICogKEQgLSBDKVxuICAgIG55ID0gYS5yZWRNdWwoZykucmVkTXVsKGQucmVkU3ViKGMpKTtcbiAgICAvLyBaMyA9IGMgKiBGICogR1xuICAgIG56ID0gdGhpcy5jdXJ2ZS5fbXVsQyhmKS5yZWRNdWwoZyk7XG4gIH1cbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG55LCBueik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKHApIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiBwO1xuICBpZiAocC5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgaWYgKHRoaXMuY3VydmUuZXh0ZW5kZWQpXG4gICAgcmV0dXJuIHRoaXMuX2V4dEFkZChwKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLl9wcm9qQWRkKHApO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bChrKSB7XG4gIGlmICh0aGlzLl9oYXNEb3VibGVzKGspKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl9maXhlZE5hZk11bCh0aGlzLCBrKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsKHRoaXMsIGspO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bEFkZCA9IGZ1bmN0aW9uIG11bEFkZChrMSwgcCwgazIpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWxBZGQoMSwgWyB0aGlzLCBwIF0sIFsgazEsIGsyIF0sIDIpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIG5vcm1hbGl6ZSgpIHtcbiAgaWYgKHRoaXMuek9uZSlcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBOb3JtYWxpemUgY29vcmRpbmF0ZXNcbiAgdmFyIHppID0gdGhpcy56LnJlZEludm0oKTtcbiAgdGhpcy54ID0gdGhpcy54LnJlZE11bCh6aSk7XG4gIHRoaXMueSA9IHRoaXMueS5yZWRNdWwoemkpO1xuICBpZiAodGhpcy50KVxuICAgIHRoaXMudCA9IHRoaXMudC5yZWRNdWwoemkpO1xuICB0aGlzLnogPSB0aGlzLmN1cnZlLm9uZTtcbiAgdGhpcy56T25lID0gdHJ1ZTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnKCkge1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludCh0aGlzLngucmVkTmVnKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy56LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnQgJiYgdGhpcy50LnJlZE5lZygpKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5nZXRYID0gZnVuY3Rpb24gZ2V0WCgpIHtcbiAgdGhpcy5ub3JtYWxpemUoKTtcbiAgcmV0dXJuIHRoaXMueC5mcm9tUmVkKCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZ2V0WSA9IGZ1bmN0aW9uIGdldFkoKSB7XG4gIHRoaXMubm9ybWFsaXplKCk7XG4gIHJldHVybiB0aGlzLnkuZnJvbVJlZCgpO1xufTtcblxuLy8gQ29tcGF0aWJpbGl0eSB3aXRoIEJhc2VDdXJ2ZVxuUG9pbnQucHJvdG90eXBlLnRvUCA9IFBvaW50LnByb3RvdHlwZS5ub3JtYWxpemU7XG5Qb2ludC5wcm90b3R5cGUubWl4ZWRBZGQgPSBQb2ludC5wcm90b3R5cGUuYWRkO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYm4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIGVsbGlwdGljID0gcmVxdWlyZSgnLi4vLi4vZWxsaXB0aWMnKTtcblxudmFyIGdldE5BRiA9IGVsbGlwdGljLnV0aWxzLmdldE5BRjtcbnZhciBnZXRKU0YgPSBlbGxpcHRpYy51dGlscy5nZXRKU0Y7XG52YXIgYXNzZXJ0ID0gZWxsaXB0aWMudXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBCYXNlQ3VydmUodHlwZSwgY29uZikge1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnAgPSBuZXcgYm4oY29uZi5wLCAxNik7XG5cbiAgLy8gVXNlIE1vbnRnb21lcnksIHdoZW4gdGhlcmUgaXMgbm8gZmFzdCByZWR1Y3Rpb24gZm9yIHRoZSBwcmltZVxuICB0aGlzLnJlZCA9IGNvbmYucHJpbWUgPyBibi5yZWQoY29uZi5wcmltZSkgOiBibi5tb250KHRoaXMucCk7XG5cbiAgLy8gVXNlZnVsIGZvciBtYW55IGN1cnZlc1xuICB0aGlzLnplcm8gPSBuZXcgYm4oMCkudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLm9uZSA9IG5ldyBibigxKS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMudHdvID0gbmV3IGJuKDIpLnRvUmVkKHRoaXMucmVkKTtcblxuICAvLyBDdXJ2ZSBjb25maWd1cmF0aW9uLCBvcHRpb25hbFxuICB0aGlzLm4gPSBjb25mLm4gJiYgbmV3IGJuKGNvbmYubiwgMTYpO1xuICB0aGlzLmcgPSBjb25mLmcgJiYgdGhpcy5wb2ludEZyb21KU09OKGNvbmYuZywgY29uZi5nUmVkKTtcblxuICAvLyBUZW1wb3JhcnkgYXJyYXlzXG4gIHRoaXMuX3duYWZUMSA9IG5ldyBBcnJheSg0KTtcbiAgdGhpcy5fd25hZlQyID0gbmV3IEFycmF5KDQpO1xuICB0aGlzLl93bmFmVDMgPSBuZXcgQXJyYXkoNCk7XG4gIHRoaXMuX3duYWZUNCA9IG5ldyBBcnJheSg0KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gQmFzZUN1cnZlO1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLnBvaW50ID0gZnVuY3Rpb24gcG9pbnQoKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUoKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLl9maXhlZE5hZk11bCA9IGZ1bmN0aW9uIF9maXhlZE5hZk11bChwLCBrKSB7XG4gIGFzc2VydChwLnByZWNvbXB1dGVkKTtcbiAgdmFyIGRvdWJsZXMgPSBwLl9nZXREb3VibGVzKCk7XG5cbiAgdmFyIG5hZiA9IGdldE5BRihrLCAxKTtcbiAgdmFyIEkgPSAoMSA8PCAoZG91Ymxlcy5zdGVwICsgMSkpIC0gKGRvdWJsZXMuc3RlcCAlIDIgPT09IDAgPyAyIDogMSk7XG4gIEkgLz0gMztcblxuICAvLyBUcmFuc2xhdGUgaW50byBtb3JlIHdpbmRvd2VkIGZvcm1cbiAgdmFyIHJlcHIgPSBbXTtcbiAgZm9yICh2YXIgaiA9IDA7IGogPCBuYWYubGVuZ3RoOyBqICs9IGRvdWJsZXMuc3RlcCkge1xuICAgIHZhciBuYWZXID0gMDtcbiAgICBmb3IgKHZhciBrID0gaiArIGRvdWJsZXMuc3RlcCAtIDE7IGsgPj0gajsgay0tKVxuICAgICAgbmFmVyA9IChuYWZXIDw8IDEpICsgbmFmW2tdO1xuICAgIHJlcHIucHVzaChuYWZXKTtcbiAgfVxuXG4gIHZhciBhID0gdGhpcy5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gIHZhciBiID0gdGhpcy5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gIGZvciAodmFyIGkgPSBJOyBpID4gMDsgaS0tKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCByZXByLmxlbmd0aDsgaisrKSB7XG4gICAgICB2YXIgbmFmVyA9IHJlcHJbal07XG4gICAgICBpZiAobmFmVyA9PT0gaSlcbiAgICAgICAgYiA9IGIubWl4ZWRBZGQoZG91Ymxlcy5wb2ludHNbal0pO1xuICAgICAgZWxzZSBpZiAobmFmVyA9PT0gLWkpXG4gICAgICAgIGIgPSBiLm1peGVkQWRkKGRvdWJsZXMucG9pbnRzW2pdLm5lZygpKTtcbiAgICB9XG4gICAgYSA9IGEuYWRkKGIpO1xuICB9XG4gIHJldHVybiBhLnRvUCgpO1xufTtcblxuQmFzZUN1cnZlLnByb3RvdHlwZS5fd25hZk11bCA9IGZ1bmN0aW9uIF93bmFmTXVsKHAsIGspIHtcbiAgdmFyIHcgPSA0O1xuXG4gIC8vIFByZWNvbXB1dGUgd2luZG93XG4gIHZhciBuYWZQb2ludHMgPSBwLl9nZXROQUZQb2ludHModyk7XG4gIHcgPSBuYWZQb2ludHMud25kO1xuICB2YXIgd25kID0gbmFmUG9pbnRzLnBvaW50cztcblxuICAvLyBHZXQgTkFGIGZvcm1cbiAgdmFyIG5hZiA9IGdldE5BRihrLCB3KTtcblxuICAvLyBBZGQgYHRoaXNgKihOKzEpIGZvciBldmVyeSB3LU5BRiBpbmRleFxuICB2YXIgYWNjID0gdGhpcy5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gIGZvciAodmFyIGkgPSBuYWYubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAvLyBDb3VudCB6ZXJvZXNcbiAgICBmb3IgKHZhciBrID0gMDsgaSA+PSAwICYmIG5hZltpXSA9PT0gMDsgaS0tKVxuICAgICAgaysrO1xuICAgIGlmIChpID49IDApXG4gICAgICBrKys7XG4gICAgYWNjID0gYWNjLmRibHAoayk7XG5cbiAgICBpZiAoaSA8IDApXG4gICAgICBicmVhaztcbiAgICB2YXIgeiA9IG5hZltpXTtcbiAgICBhc3NlcnQoeiAhPT0gMCk7XG4gICAgaWYgKHAudHlwZSA9PT0gJ2FmZmluZScpIHtcbiAgICAgIC8vIEogKy0gUFxuICAgICAgaWYgKHogPiAwKVxuICAgICAgICBhY2MgPSBhY2MubWl4ZWRBZGQod25kWyh6IC0gMSkgPj4gMV0pO1xuICAgICAgZWxzZVxuICAgICAgICBhY2MgPSBhY2MubWl4ZWRBZGQod25kWygteiAtIDEpID4+IDFdLm5lZygpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSiArLSBKXG4gICAgICBpZiAoeiA+IDApXG4gICAgICAgIGFjYyA9IGFjYy5hZGQod25kWyh6IC0gMSkgPj4gMV0pO1xuICAgICAgZWxzZVxuICAgICAgICBhY2MgPSBhY2MuYWRkKHduZFsoLXogLSAxKSA+PiAxXS5uZWcoKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBwLnR5cGUgPT09ICdhZmZpbmUnID8gYWNjLnRvUCgpIDogYWNjO1xufTtcblxuQmFzZUN1cnZlLnByb3RvdHlwZS5fd25hZk11bEFkZCA9IGZ1bmN0aW9uIF93bmFmTXVsQWRkKGRlZlcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZWZmcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZW4pIHtcbiAgdmFyIHduZFdpZHRoID0gdGhpcy5fd25hZlQxO1xuICB2YXIgd25kID0gdGhpcy5fd25hZlQyO1xuICB2YXIgbmFmID0gdGhpcy5fd25hZlQzO1xuXG4gIC8vIEZpbGwgYWxsIGFycmF5c1xuICB2YXIgbWF4ID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBwID0gcG9pbnRzW2ldO1xuICAgIHZhciBuYWZQb2ludHMgPSBwLl9nZXROQUZQb2ludHMoZGVmVyk7XG4gICAgd25kV2lkdGhbaV0gPSBuYWZQb2ludHMud25kO1xuICAgIHduZFtpXSA9IG5hZlBvaW50cy5wb2ludHM7XG4gIH1cblxuICAvLyBDb21iIHNtYWxsIHdpbmRvdyBOQUZzXG4gIGZvciAodmFyIGkgPSBsZW4gLSAxOyBpID49IDE7IGkgLT0gMikge1xuICAgIHZhciBhID0gaSAtIDE7XG4gICAgdmFyIGIgPSBpO1xuICAgIGlmICh3bmRXaWR0aFthXSAhPT0gMSB8fCB3bmRXaWR0aFtiXSAhPT0gMSkge1xuICAgICAgbmFmW2FdID0gZ2V0TkFGKGNvZWZmc1thXSwgd25kV2lkdGhbYV0pO1xuICAgICAgbmFmW2JdID0gZ2V0TkFGKGNvZWZmc1tiXSwgd25kV2lkdGhbYl0pO1xuICAgICAgbWF4ID0gTWF0aC5tYXgobmFmW2FdLmxlbmd0aCwgbWF4KTtcbiAgICAgIG1heCA9IE1hdGgubWF4KG5hZltiXS5sZW5ndGgsIG1heCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgY29tYiA9IFtcbiAgICAgIHBvaW50c1thXSwgLyogMSAqL1xuICAgICAgbnVsbCwgLyogMyAqL1xuICAgICAgbnVsbCwgLyogNSAqL1xuICAgICAgcG9pbnRzW2JdIC8qIDcgKi9cbiAgICBdO1xuXG4gICAgLy8gVHJ5IHRvIGF2b2lkIFByb2plY3RpdmUgcG9pbnRzLCBpZiBwb3NzaWJsZVxuICAgIGlmIChwb2ludHNbYV0ueS5jbXAocG9pbnRzW2JdLnkpID09PSAwKSB7XG4gICAgICBjb21iWzFdID0gcG9pbnRzW2FdLmFkZChwb2ludHNbYl0pO1xuICAgICAgY29tYlsyXSA9IHBvaW50c1thXS50b0ooKS5taXhlZEFkZChwb2ludHNbYl0ubmVnKCkpO1xuICAgIH0gZWxzZSBpZiAocG9pbnRzW2FdLnkuY21wKHBvaW50c1tiXS55LnJlZE5lZygpKSA9PT0gMCkge1xuICAgICAgY29tYlsxXSA9IHBvaW50c1thXS50b0ooKS5taXhlZEFkZChwb2ludHNbYl0pO1xuICAgICAgY29tYlsyXSA9IHBvaW50c1thXS5hZGQocG9pbnRzW2JdLm5lZygpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29tYlsxXSA9IHBvaW50c1thXS50b0ooKS5taXhlZEFkZChwb2ludHNbYl0pO1xuICAgICAgY29tYlsyXSA9IHBvaW50c1thXS50b0ooKS5taXhlZEFkZChwb2ludHNbYl0ubmVnKCkpO1xuICAgIH1cblxuICAgIHZhciBpbmRleCA9IFtcbiAgICAgIC0zLCAvKiAtMSAtMSAqL1xuICAgICAgLTEsIC8qIC0xIDAgKi9cbiAgICAgIC01LCAvKiAtMSAxICovXG4gICAgICAtNywgLyogMCAtMSAqL1xuICAgICAgMCwgLyogMCAwICovXG4gICAgICA3LCAvKiAwIDEgKi9cbiAgICAgIDUsIC8qIDEgLTEgKi9cbiAgICAgIDEsIC8qIDEgMCAqL1xuICAgICAgMyAgLyogMSAxICovXG4gICAgXTtcblxuICAgIHZhciBqc2YgPSBnZXRKU0YoY29lZmZzW2FdLCBjb2VmZnNbYl0pO1xuICAgIG1heCA9IE1hdGgubWF4KGpzZlswXS5sZW5ndGgsIG1heCk7XG4gICAgbmFmW2FdID0gbmV3IEFycmF5KG1heCk7XG4gICAgbmFmW2JdID0gbmV3IEFycmF5KG1heCk7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBtYXg7IGorKykge1xuICAgICAgdmFyIGphID0ganNmWzBdW2pdIHwgMDtcbiAgICAgIHZhciBqYiA9IGpzZlsxXVtqXSB8IDA7XG5cbiAgICAgIG5hZlthXVtqXSA9IGluZGV4WyhqYSArIDEpICogMyArIChqYiArIDEpXTtcbiAgICAgIG5hZltiXVtqXSA9IDA7XG4gICAgICB3bmRbYV0gPSBjb21iO1xuICAgIH1cbiAgfVxuXG4gIHZhciBhY2MgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgdmFyIHRtcCA9IHRoaXMuX3duYWZUNDtcbiAgZm9yICh2YXIgaSA9IG1heDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgayA9IDA7XG5cbiAgICB3aGlsZSAoaSA+PSAwKSB7XG4gICAgICB2YXIgemVybyA9IHRydWU7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgIHRtcFtqXSA9IG5hZltqXVtpXSB8IDA7XG4gICAgICAgIGlmICh0bXBbal0gIT09IDApXG4gICAgICAgICAgemVybyA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKCF6ZXJvKVxuICAgICAgICBicmVhaztcbiAgICAgIGsrKztcbiAgICAgIGktLTtcbiAgICB9XG4gICAgaWYgKGkgPj0gMClcbiAgICAgIGsrKztcbiAgICBhY2MgPSBhY2MuZGJscChrKTtcbiAgICBpZiAoaSA8IDApXG4gICAgICBicmVhaztcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgIHZhciB6ID0gdG1wW2pdO1xuICAgICAgdmFyIHA7XG4gICAgICBpZiAoeiA9PT0gMClcbiAgICAgICAgY29udGludWU7XG4gICAgICBlbHNlIGlmICh6ID4gMClcbiAgICAgICAgcCA9IHduZFtqXVsoeiAtIDEpID4+IDFdO1xuICAgICAgZWxzZSBpZiAoeiA8IDApXG4gICAgICAgIHAgPSB3bmRbal1bKC16IC0gMSkgPj4gMV0ubmVnKCk7XG5cbiAgICAgIGlmIChwLnR5cGUgPT09ICdhZmZpbmUnKVxuICAgICAgICBhY2MgPSBhY2MubWl4ZWRBZGQocCk7XG4gICAgICBlbHNlXG4gICAgICAgIGFjYyA9IGFjYy5hZGQocCk7XG4gICAgfVxuICB9XG4gIC8vIFplcm9pZnkgcmVmZXJlbmNlc1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKVxuICAgIHduZFtpXSA9IG51bGw7XG4gIHJldHVybiBhY2MudG9QKCk7XG59O1xuXG5mdW5jdGlvbiBCYXNlUG9pbnQoY3VydmUsIHR5cGUpIHtcbiAgdGhpcy5jdXJ2ZSA9IGN1cnZlO1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnByZWNvbXB1dGVkID0gbnVsbDtcbn1cbkJhc2VDdXJ2ZS5CYXNlUG9pbnQgPSBCYXNlUG9pbnQ7XG5cbkJhc2VQb2ludC5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZSgpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUudmFsaWRhdGUodGhpcyk7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLnByZWNvbXB1dGUgPSBmdW5jdGlvbiBwcmVjb21wdXRlKHBvd2VyKSB7XG4gIGlmICh0aGlzLnByZWNvbXB1dGVkKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIHZhciBwcmVjb21wdXRlZCA9IHtcbiAgICBkb3VibGVzOiBudWxsLFxuICAgIG5hZjogbnVsbCxcbiAgICBiZXRhOiBudWxsXG4gIH07XG4gIHByZWNvbXB1dGVkLm5hZiA9IHRoaXMuX2dldE5BRlBvaW50cyg4KTtcbiAgcHJlY29tcHV0ZWQuZG91YmxlcyA9IHRoaXMuX2dldERvdWJsZXMoNCwgcG93ZXIpO1xuICBwcmVjb21wdXRlZC5iZXRhID0gdGhpcy5fZ2V0QmV0YSgpO1xuICB0aGlzLnByZWNvbXB1dGVkID0gcHJlY29tcHV0ZWQ7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9oYXNEb3VibGVzID0gZnVuY3Rpb24gX2hhc0RvdWJsZXMoaykge1xuICBpZiAoIXRoaXMucHJlY29tcHV0ZWQpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBkb3VibGVzID0gdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzO1xuICBpZiAoIWRvdWJsZXMpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiBkb3VibGVzLnBvaW50cy5sZW5ndGggPj0gTWF0aC5jZWlsKChrLmJpdExlbmd0aCgpICsgMSkgLyBkb3VibGVzLnN0ZXApO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5fZ2V0RG91YmxlcyA9IGZ1bmN0aW9uIF9nZXREb3VibGVzKHN0ZXAsIHBvd2VyKSB7XG4gIGlmICh0aGlzLnByZWNvbXB1dGVkICYmIHRoaXMucHJlY29tcHV0ZWQuZG91YmxlcylcbiAgICByZXR1cm4gdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzO1xuXG4gIHZhciBkb3VibGVzID0gWyB0aGlzIF07XG4gIHZhciBhY2MgPSB0aGlzO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvd2VyOyBpICs9IHN0ZXApIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHN0ZXA7IGorKylcbiAgICAgIGFjYyA9IGFjYy5kYmwoKTtcbiAgICBkb3VibGVzLnB1c2goYWNjKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHN0ZXA6IHN0ZXAsXG4gICAgcG9pbnRzOiBkb3VibGVzXG4gIH07XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9nZXROQUZQb2ludHMgPSBmdW5jdGlvbiBfZ2V0TkFGUG9pbnRzKHduZCkge1xuICBpZiAodGhpcy5wcmVjb21wdXRlZCAmJiB0aGlzLnByZWNvbXB1dGVkLm5hZilcbiAgICByZXR1cm4gdGhpcy5wcmVjb21wdXRlZC5uYWY7XG5cbiAgdmFyIHJlcyA9IFsgdGhpcyBdO1xuICB2YXIgbWF4ID0gKDEgPDwgd25kKSAtIDE7XG4gIHZhciBkYmwgPSBtYXggPT09IDEgPyBudWxsIDogdGhpcy5kYmwoKTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBtYXg7IGkrKylcbiAgICByZXNbaV0gPSByZXNbaSAtIDFdLmFkZChkYmwpO1xuICByZXR1cm4ge1xuICAgIHduZDogd25kLFxuICAgIHBvaW50czogcmVzXG4gIH07XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9nZXRCZXRhID0gZnVuY3Rpb24gX2dldEJldGEoKSB7XG4gIHJldHVybiBudWxsO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5kYmxwID0gZnVuY3Rpb24gZGJscChrKSB7XG4gIHZhciByID0gdGhpcztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrOyBpKyspXG4gICAgciA9IHIuZGJsKCk7XG4gIHJldHVybiByO1xufTtcbiIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBibiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgcmFuZG9tQnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpO1xubW9kdWxlLmV4cG9ydHMgPSBjcnQ7XG5mdW5jdGlvbiBibGluZChwcml2KSB7XG4gIHZhciByID0gZ2V0cihwcml2KTtcbiAgdmFyIGJsaW5kZXIgPSByLnRvUmVkKGJuLm1vbnQocHJpdi5tb2R1bHVzKSlcbiAgLnJlZFBvdyhuZXcgYm4ocHJpdi5wdWJsaWNFeHBvbmVudCkpLmZyb21SZWQoKTtcbiAgcmV0dXJuIHtcbiAgICBibGluZGVyOiBibGluZGVyLFxuICAgIHVuYmxpbmRlcjpyLmludm0ocHJpdi5tb2R1bHVzKVxuICB9O1xufVxuZnVuY3Rpb24gY3J0KG1zZywgcHJpdikge1xuICB2YXIgYmxpbmRzID0gYmxpbmQocHJpdik7XG4gIHZhciBsZW4gPSBwcml2Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICB2YXIgbW9kID0gYm4ubW9udChwcml2Lm1vZHVsdXMpO1xuICB2YXIgYmxpbmRlZCA9IG5ldyBibihtc2cpLm11bChibGluZHMuYmxpbmRlcikubW9kKHByaXYubW9kdWx1cyk7XG4gIHZhciBjMSA9IGJsaW5kZWQudG9SZWQoYm4ubW9udChwcml2LnByaW1lMSkpO1xuICB2YXIgYzIgPSBibGluZGVkLnRvUmVkKGJuLm1vbnQocHJpdi5wcmltZTIpKTtcbiAgdmFyIHFpbnYgPSBwcml2LmNvZWZmaWNpZW50O1xuICB2YXIgcCA9IHByaXYucHJpbWUxO1xuICB2YXIgcSA9IHByaXYucHJpbWUyO1xuICB2YXIgbTEgPSBjMS5yZWRQb3cocHJpdi5leHBvbmVudDEpO1xuICB2YXIgbTIgPSBjMi5yZWRQb3cocHJpdi5leHBvbmVudDIpO1xuICBtMSA9IG0xLmZyb21SZWQoKTtcbiAgbTIgPSBtMi5mcm9tUmVkKCk7XG4gIHZhciBoID0gbTEuaXN1YihtMikuaW11bChxaW52KS5tb2QocCk7XG4gIGguaW11bChxKTtcbiAgbTIuaWFkZChoKTtcbiAgdmFyIG91dCA9IG5ldyBCdWZmZXIobTIuaW11bChibGluZHMudW5ibGluZGVyKS5tb2QocHJpdi5tb2R1bHVzKS50b0FycmF5KCkpO1xuICBpZiAob3V0Lmxlbmd0aCA8IGxlbikge1xuICAgIHZhciBwcmVmaXggPSBuZXcgQnVmZmVyKGxlbiAtIG91dC5sZW5ndGgpO1xuICAgIHByZWZpeC5maWxsKDApO1xuICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoW3ByZWZpeCwgb3V0XSwgbGVuKTtcbiAgfVxuICByZXR1cm4gb3V0O1xufVxuY3J0LmdldHIgPSBnZXRyO1xuZnVuY3Rpb24gZ2V0cihwcml2KSB7XG4gIHZhciBsZW4gPSBwcml2Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICB2YXIgciA9IG5ldyBibihyYW5kb21CeXRlcyhsZW4pKTtcbiAgd2hpbGUgKHIuY21wKHByaXYubW9kdWx1cykgPj0gIDAgfHwgIXIubW9kKHByaXYucHJpbWUxKSB8fCAhci5tb2QocHJpdi5wcmltZTIpKSB7XG4gICAgciA9IG5ldyBibihyYW5kb21CeXRlcyhsZW4pKTtcbiAgfVxuICByZXR1cm4gcjtcbn1cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WW5KdmQzTmxjbWxtZVMxemFXZHVMMjV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUxYSnpZUzlwYm1SbGVDNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCaWJpQTlJSEpsY1hWcGNtVW9KMkp1TG1wekp5azdYRzUyWVhJZ2NtRnVaRzl0UW5sMFpYTWdQU0J5WlhGMWFYSmxLQ2R5WVc1a2IyMWllWFJsY3ljcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmpjblE3WEc1bWRXNWpkR2x2YmlCaWJHbHVaQ2h3Y21sMktTQjdYRzRnSUhaaGNpQnlJRDBnWjJWMGNpaHdjbWwyS1R0Y2JpQWdkbUZ5SUdKc2FXNWtaWElnUFNCeUxuUnZVbVZrS0dKdUxtMXZiblFvY0hKcGRpNXRiMlIxYkhWektTbGNiaUFnTG5KbFpGQnZkeWh1WlhjZ1ltNG9jSEpwZGk1d2RXSnNhV05GZUhCdmJtVnVkQ2twTG1aeWIyMVNaV1FvS1R0Y2JpQWdjbVYwZFhKdUlIdGNiaUFnSUNCaWJHbHVaR1Z5T2lCaWJHbHVaR1Z5TEZ4dUlDQWdJSFZ1WW14cGJtUmxjanB5TG1sdWRtMG9jSEpwZGk1dGIyUjFiSFZ6S1Z4dUlDQjlPMXh1ZlZ4dVpuVnVZM1JwYjI0Z1kzSjBLRzF6Wnl3Z2NISnBkaWtnZTF4dUlDQjJZWElnWW14cGJtUnpJRDBnWW14cGJtUW9jSEpwZGlrN1hHNGdJSFpoY2lCc1pXNGdQU0J3Y21sMkxtMXZaSFZzZFhNdVlubDBaVXhsYm1kMGFDZ3BPMXh1SUNCMllYSWdiVzlrSUQwZ1ltNHViVzl1ZENod2NtbDJMbTF2WkhWc2RYTXBPMXh1SUNCMllYSWdZbXhwYm1SbFpDQTlJRzVsZHlCaWJpaHRjMmNwTG0xMWJDaGliR2x1WkhNdVlteHBibVJsY2lrdWJXOWtLSEJ5YVhZdWJXOWtkV3gxY3lrN1hHNGdJSFpoY2lCak1TQTlJR0pzYVc1a1pXUXVkRzlTWldRb1ltNHViVzl1ZENod2NtbDJMbkJ5YVcxbE1Ta3BPMXh1SUNCMllYSWdZeklnUFNCaWJHbHVaR1ZrTG5SdlVtVmtLR0p1TG0xdmJuUW9jSEpwZGk1d2NtbHRaVElwS1R0Y2JpQWdkbUZ5SUhGcGJuWWdQU0J3Y21sMkxtTnZaV1ptYVdOcFpXNTBPMXh1SUNCMllYSWdjQ0E5SUhCeWFYWXVjSEpwYldVeE8xeHVJQ0IyWVhJZ2NTQTlJSEJ5YVhZdWNISnBiV1V5TzF4dUlDQjJZWElnYlRFZ1BTQmpNUzV5WldSUWIzY29jSEpwZGk1bGVIQnZibVZ1ZERFcE8xeHVJQ0IyWVhJZ2JUSWdQU0JqTWk1eVpXUlFiM2NvY0hKcGRpNWxlSEJ2Ym1WdWRESXBPMXh1SUNCdE1TQTlJRzB4TG1aeWIyMVNaV1FvS1R0Y2JpQWdiVElnUFNCdE1pNW1jbTl0VW1Wa0tDazdYRzRnSUhaaGNpQm9JRDBnYlRFdWFYTjFZaWh0TWlrdWFXMTFiQ2h4YVc1MktTNXRiMlFvY0NrN1hHNGdJR2d1YVcxMWJDaHhLVHRjYmlBZ2JUSXVhV0ZrWkNob0tUdGNiaUFnZG1GeUlHOTFkQ0E5SUc1bGR5QkNkV1ptWlhJb2JUSXVhVzExYkNoaWJHbHVaSE11ZFc1aWJHbHVaR1Z5S1M1dGIyUW9jSEpwZGk1dGIyUjFiSFZ6S1M1MGIwRnljbUY1S0NrcE8xeHVJQ0JwWmlBb2IzVjBMbXhsYm1kMGFDQThJR3hsYmlrZ2UxeHVJQ0FnSUhaaGNpQndjbVZtYVhnZ1BTQnVaWGNnUW5WbVptVnlLR3hsYmlBdElHOTFkQzVzWlc1bmRHZ3BPMXh1SUNBZ0lIQnlaV1pwZUM1bWFXeHNLREFwTzF4dUlDQWdJRzkxZENBOUlFSjFabVpsY2k1amIyNWpZWFFvVzNCeVpXWnBlQ3dnYjNWMFhTd2diR1Z1S1R0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnYjNWME8xeHVmVnh1WTNKMExtZGxkSElnUFNCblpYUnlPMXh1Wm5WdVkzUnBiMjRnWjJWMGNpaHdjbWwyS1NCN1hHNGdJSFpoY2lCc1pXNGdQU0J3Y21sMkxtMXZaSFZzZFhNdVlubDBaVXhsYm1kMGFDZ3BPMXh1SUNCMllYSWdjaUE5SUc1bGR5QmliaWh5WVc1a2IyMUNlWFJsY3loc1pXNHBLVHRjYmlBZ2QyaHBiR1VnS0hJdVkyMXdLSEJ5YVhZdWJXOWtkV3gxY3lrZ1BqMGdJREFnZkh3Z0lYSXViVzlrS0hCeWFYWXVjSEpwYldVeEtTQjhmQ0FoY2k1dGIyUW9jSEpwZGk1d2NtbHRaVElwS1NCN1hHNGdJQ0FnY2lBOUlHNWxkeUJpYmloeVlXNWtiMjFDZVhSbGN5aHNaVzRwS1R0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnY2p0Y2JuMGlYWDA9IiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3J5cHRvID0gZ2xvYmFsLmNyeXB0byB8fCBnbG9iYWwubXNDcnlwdG9cbmlmKGNyeXB0byAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmFuZG9tQnl0ZXM7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IG9sZEJyb3dzZXI7XG59XG5mdW5jdGlvbiByYW5kb21CeXRlcyhzaXplLCBjYikge1xuICB2YXIgYnl0ZXMgPSBuZXcgQnVmZmVyKHNpemUpOyAvL2luIGJyb3dzZXJpZnksIHRoaXMgaXMgYW4gZXh0ZW5kZWQgVWludDhBcnJheVxuICAgIC8qIFRoaXMgd2lsbCBub3Qgd29yayBpbiBvbGRlciBicm93c2Vycy5cbiAgICAgKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL3dpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzXG4gICAgICovXG5cbiAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhieXRlcyk7XG4gIGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICBjYihudWxsLCBieXRlcyk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGJ5dGVzO1xufVxuZnVuY3Rpb24gb2xkQnJvd3NlcigpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ3NlY3VyZSByYW5kb20gbnVtYmVyIGdlbmVyYXRpb24gbm90IHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXJcXG4nK1xuICAgICAgJ3VzZSBjaHJvbWUsIEZpcmVGb3ggb3IgSW50ZXJuZXQgRXhwbG9yZXIgMTEnXG4gICAgKVxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZjbUZ1Wkc5dFlubDBaWE12WW5KdmQzTmxjaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNTJZWElnWTNKNWNIUnZJRDBnWjJ4dlltRnNMbU55ZVhCMGJ5QjhmQ0JuYkc5aVlXd3ViWE5EY25sd2RHOWNibWxtS0dOeWVYQjBieUFtSmlCamNubHdkRzh1WjJWMFVtRnVaRzl0Vm1Gc2RXVnpLU0I3WEc0Z0lHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtRnVaRzl0UW5sMFpYTTdYRzU5SUdWc2MyVWdlMXh1SUNCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUc5c1pFSnliM2R6WlhJN1hHNTlYRzVtZFc1amRHbHZiaUJ5WVc1a2IyMUNlWFJsY3loemFYcGxMQ0JqWWlrZ2UxeHVJQ0IyWVhJZ1lubDBaWE1nUFNCdVpYY2dRblZtWm1WeUtITnBlbVVwT3lBdkwybHVJR0p5YjNkelpYSnBabmtzSUhSb2FYTWdhWE1nWVc0Z1pYaDBaVzVrWldRZ1ZXbHVkRGhCY25KaGVWeHVJQ0FnSUM4cUlGUm9hWE1nZDJsc2JDQnViM1FnZDI5eWF5QnBiaUJ2YkdSbGNpQmljbTkzYzJWeWN5NWNiaUFnSUNBZ0tpQlRaV1VnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1Ylc5NmFXeHNZUzV2Y21jdlpXNHRWVk12Wkc5amN5OVhaV0l2UVZCSkwzZHBibVJ2ZHk1amNubHdkRzh1WjJWMFVtRnVaRzl0Vm1Gc2RXVnpYRzRnSUNBZ0lDb3ZYRzVjYmlBZ1kzSjVjSFJ2TG1kbGRGSmhibVJ2YlZaaGJIVmxjeWhpZVhSbGN5azdYRzRnSUdsbUlDaDBlWEJsYjJZZ1kySWdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNCeVpYUjFjbTRnY0hKdlkyVnpjeTV1WlhoMFZHbGpheWhtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNCallpaHVkV3hzTENCaWVYUmxjeWs3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNiaUFnY21WMGRYSnVJR0o1ZEdWek8xeHVmVnh1Wm5WdVkzUnBiMjRnYjJ4a1FuSnZkM05sY2lncElIdGNiaUFnZEdoeWIzY2dibVYzSUVWeWNtOXlLRnh1SUNBZ0lDQWdKM05sWTNWeVpTQnlZVzVrYjIwZ2JuVnRZbVZ5SUdkbGJtVnlZWFJwYjI0Z2JtOTBJSE4xY0hCdmNuUmxaQ0JpZVNCMGFHbHpJR0p5YjNkelpYSmNYRzRuSzF4dUlDQWdJQ0FnSjNWelpTQmphSEp2YldVc0lFWnBjbVZHYjNnZ2IzSWdTVzUwWlhKdVpYUWdSWGh3Ykc5eVpYSWdNVEVuWEc0Z0lDQWdLVnh1ZlZ4dUlsMTkiLCIoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuXG4ndXNlIHN0cmljdCc7XG5cbi8vIFV0aWxzXG5cbmZ1bmN0aW9uIGFzc2VydCh2YWwsIG1zZykge1xuICBpZiAoIXZhbClcbiAgICB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG59XG5cbi8vIENvdWxkIHVzZSBgaW5oZXJpdHNgIG1vZHVsZSwgYnV0IGRvbid0IHdhbnQgdG8gbW92ZSBmcm9tIHNpbmdsZSBmaWxlXG4vLyBhcmNoaXRlY3R1cmUgeWV0LlxuZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yO1xuICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fTtcbiAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZTtcbiAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKTtcbiAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yO1xufVxuXG4vLyBCTlxuXG5mdW5jdGlvbiBCTihudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAvLyBNYXkgYmUgYG5ldyBCTihibilgID9cbiAgaWYgKG51bWJlciAhPT0gbnVsbCAmJlxuICAgICAgdHlwZW9mIG51bWJlciA9PT0gJ29iamVjdCcgJiZcbiAgICAgIEFycmF5LmlzQXJyYXkobnVtYmVyLndvcmRzKSkge1xuICAgIHJldHVybiBudW1iZXI7XG4gIH1cblxuICB0aGlzLnNpZ24gPSBmYWxzZTtcbiAgdGhpcy53b3JkcyA9IG51bGw7XG4gIHRoaXMubGVuZ3RoID0gMDtcblxuICAvLyBSZWR1Y3Rpb24gY29udGV4dFxuICB0aGlzLnJlZCA9IG51bGw7XG5cbiAgaWYgKGJhc2UgPT09ICdsZScgfHwgYmFzZSA9PT0gJ2JlJykge1xuICAgIGVuZGlhbiA9IGJhc2U7XG4gICAgYmFzZSA9IDEwO1xuICB9XG5cbiAgaWYgKG51bWJlciAhPT0gbnVsbClcbiAgICB0aGlzLl9pbml0KG51bWJlciB8fCAwLCBiYXNlIHx8IDEwLCBlbmRpYW4gfHwgJ2JlJyk7XG59XG5pZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG4gIG1vZHVsZS5leHBvcnRzID0gQk47XG5lbHNlXG4gIGV4cG9ydHMuQk4gPSBCTjtcblxuQk4uQk4gPSBCTjtcbkJOLndvcmRTaXplID0gMjY7XG5cbkJOLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHRoaXMuX2luaXROdW1iZXIobnVtYmVyLCBiYXNlLCBlbmRpYW4pO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHRoaXMuX2luaXRBcnJheShudW1iZXIsIGJhc2UsIGVuZGlhbik7XG4gIH1cbiAgaWYgKGJhc2UgPT09ICdoZXgnKVxuICAgIGJhc2UgPSAxNjtcbiAgYXNzZXJ0KGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpO1xuXG4gIG51bWJlciA9IG51bWJlci50b1N0cmluZygpLnJlcGxhY2UoL1xccysvZywgJycpO1xuICB2YXIgc3RhcnQgPSAwO1xuICBpZiAobnVtYmVyWzBdID09PSAnLScpXG4gICAgc3RhcnQrKztcblxuICBpZiAoYmFzZSA9PT0gMTYpXG4gICAgdGhpcy5fcGFyc2VIZXgobnVtYmVyLCBzdGFydCk7XG4gIGVsc2VcbiAgICB0aGlzLl9wYXJzZUJhc2UobnVtYmVyLCBiYXNlLCBzdGFydCk7XG5cbiAgaWYgKG51bWJlclswXSA9PT0gJy0nKVxuICAgIHRoaXMuc2lnbiA9IHRydWU7XG5cbiAgdGhpcy5zdHJpcCgpO1xuXG4gIGlmIChlbmRpYW4gIT09ICdsZScpXG4gICAgcmV0dXJuO1xuXG4gIHRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSwgYmFzZSwgZW5kaWFuKTtcbn07XG5cbkJOLnByb3RvdHlwZS5faW5pdE51bWJlciA9IGZ1bmN0aW9uIF9pbml0TnVtYmVyKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gIGlmIChudW1iZXIgPCAwKSB7XG4gICAgdGhpcy5zaWduID0gdHJ1ZTtcbiAgICBudW1iZXIgPSAtbnVtYmVyO1xuICB9XG4gIGlmIChudW1iZXIgPCAweDQwMDAwMDApIHtcbiAgICB0aGlzLndvcmRzID0gWyBudW1iZXIgJiAweDNmZmZmZmYgXTtcbiAgICB0aGlzLmxlbmd0aCA9IDE7XG4gIH0gZWxzZSBpZiAobnVtYmVyIDwgMHgxMDAwMDAwMDAwMDAwMCkge1xuICAgIHRoaXMud29yZHMgPSBbXG4gICAgICBudW1iZXIgJiAweDNmZmZmZmYsXG4gICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZlxuICAgIF07XG4gICAgdGhpcy5sZW5ndGggPSAyO1xuICB9IGVsc2Uge1xuICAgIGFzc2VydChudW1iZXIgPCAweDIwMDAwMDAwMDAwMDAwKTsgLy8gMiBeIDUzICh1bnNhZmUpXG4gICAgdGhpcy53b3JkcyA9IFtcbiAgICAgIG51bWJlciAmIDB4M2ZmZmZmZixcbiAgICAgIChudW1iZXIgLyAweDQwMDAwMDApICYgMHgzZmZmZmZmLFxuICAgICAgMVxuICAgIF07XG4gICAgdGhpcy5sZW5ndGggPSAzO1xuICB9XG5cbiAgaWYgKGVuZGlhbiAhPT0gJ2xlJylcbiAgICByZXR1cm47XG5cbiAgLy8gUmV2ZXJzZSB0aGUgYnl0ZXNcbiAgdGhpcy5faW5pdEFycmF5KHRoaXMudG9BcnJheSgpLCBiYXNlLCBlbmRpYW4pO1xufTtcblxuQk4ucHJvdG90eXBlLl9pbml0QXJyYXkgPSBmdW5jdGlvbiBfaW5pdEFycmF5KG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gIC8vIFBlcmhhcHMgYSBVaW50OEFycmF5XG4gIGFzc2VydCh0eXBlb2YgbnVtYmVyLmxlbmd0aCA9PT0gJ251bWJlcicpO1xuICBpZiAobnVtYmVyLmxlbmd0aCA8PSAwKSB7XG4gICAgdGhpcy53b3JkcyA9IFsgMCBdO1xuICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHRoaXMubGVuZ3RoID0gTWF0aC5jZWlsKG51bWJlci5sZW5ndGggLyAzKTtcbiAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKylcbiAgICB0aGlzLndvcmRzW2ldID0gMDtcblxuICB2YXIgb2ZmID0gMDtcbiAgaWYgKGVuZGlhbiA9PT0gJ2JlJykge1xuICAgIGZvciAodmFyIGkgPSBudW1iZXIubGVuZ3RoIC0gMSwgaiA9IDA7IGkgPj0gMDsgaSAtPSAzKSB7XG4gICAgICB2YXIgdyA9IG51bWJlcltpXSB8IChudW1iZXJbaSAtIDFdIDw8IDgpIHwgKG51bWJlcltpIC0gMl0gPDwgMTYpO1xuICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICBvZmYgKz0gMjQ7XG4gICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgaisrO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChlbmRpYW4gPT09ICdsZScpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IDA7IGkgPCBudW1iZXIubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgIHZhciB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpICsgMV0gPDwgOCkgfCAobnVtYmVyW2kgKyAyXSA8PCAxNik7XG4gICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ogKyAxXSA9ICh3ID4+PiAoMjYgLSBvZmYpKSAmIDB4M2ZmZmZmZjtcbiAgICAgIG9mZiArPSAyNDtcbiAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICBqKys7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzLnN0cmlwKCk7XG59O1xuXG5mdW5jdGlvbiBwYXJzZUhleChzdHIsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHIgPSAwO1xuICB2YXIgbGVuID0gTWF0aC5taW4oc3RyLmxlbmd0aCwgZW5kKTtcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICByIDw8PSA0O1xuXG4gICAgLy8gJ2EnIC0gJ2YnXG4gICAgaWYgKGMgPj0gNDkgJiYgYyA8PSA1NClcbiAgICAgIHIgfD0gYyAtIDQ5ICsgMHhhO1xuXG4gICAgLy8gJ0EnIC0gJ0YnXG4gICAgZWxzZSBpZiAoYyA+PSAxNyAmJiBjIDw9IDIyKVxuICAgICAgciB8PSBjIC0gMTcgKyAweGE7XG5cbiAgICAvLyAnMCcgLSAnOSdcbiAgICBlbHNlXG4gICAgICByIHw9IGMgJiAweGY7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbkJOLnByb3RvdHlwZS5fcGFyc2VIZXggPSBmdW5jdGlvbiBfcGFyc2VIZXgobnVtYmVyLCBzdGFydCkge1xuICAvLyBDcmVhdGUgcG9zc2libHkgYmlnZ2VyIGFycmF5IHRvIGVuc3VyZSB0aGF0IGl0IGZpdHMgdGhlIG51bWJlclxuICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbCgobnVtYmVyLmxlbmd0aCAtIHN0YXJ0KSAvIDYpO1xuICB0aGlzLndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKVxuICAgIHRoaXMud29yZHNbaV0gPSAwO1xuXG4gIC8vIFNjYW4gMjQtYml0IGNodW5rcyBhbmQgYWRkIHRoZW0gdG8gdGhlIG51bWJlclxuICB2YXIgb2ZmID0gMDtcbiAgZm9yICh2YXIgaSA9IG51bWJlci5sZW5ndGggLSA2LCBqID0gMDsgaSA+PSBzdGFydDsgaSAtPSA2KSB7XG4gICAgdmFyIHcgPSBwYXJzZUhleChudW1iZXIsIGksIGkgKyA2KTtcbiAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgdGhpcy53b3Jkc1tqICsgMV0gfD0gdyA+Pj4gKDI2IC0gb2ZmKSAmIDB4M2ZmZmZmO1xuICAgIG9mZiArPSAyNDtcbiAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICBvZmYgLT0gMjY7XG4gICAgICBqKys7XG4gICAgfVxuICB9XG4gIGlmIChpICsgNiAhPT0gc3RhcnQpIHtcbiAgICB2YXIgdyA9IHBhcnNlSGV4KG51bWJlciwgc3RhcnQsIGkgKyA2KTtcbiAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgdGhpcy53b3Jkc1tqICsgMV0gfD0gdyA+Pj4gKDI2IC0gb2ZmKSAmIDB4M2ZmZmZmO1xuICB9XG4gIHRoaXMuc3RyaXAoKTtcbn07XG5cbmZ1bmN0aW9uIHBhcnNlQmFzZShzdHIsIHN0YXJ0LCBlbmQsIG11bCkge1xuICB2YXIgciA9IDA7XG4gIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSkgLSA0ODtcblxuICAgIHIgKj0gbXVsO1xuXG4gICAgLy8gJ2EnXG4gICAgaWYgKGMgPj0gNDkpXG4gICAgICByICs9IGMgLSA0OSArIDB4YTtcblxuICAgIC8vICdBJ1xuICAgIGVsc2UgaWYgKGMgPj0gMTcpXG4gICAgICByICs9IGMgLSAxNyArIDB4YTtcblxuICAgIC8vICcwJyAtICc5J1xuICAgIGVsc2VcbiAgICAgIHIgKz0gYztcbiAgfVxuICByZXR1cm4gcjtcbn1cblxuQk4ucHJvdG90eXBlLl9wYXJzZUJhc2UgPSBmdW5jdGlvbiBfcGFyc2VCYXNlKG51bWJlciwgYmFzZSwgc3RhcnQpIHtcbiAgLy8gSW5pdGlhbGl6ZSBhcyB6ZXJvXG4gIHRoaXMud29yZHMgPSBbIDAgXTtcbiAgdGhpcy5sZW5ndGggPSAxO1xuXG4gIC8vIEZpbmQgbGVuZ3RoIG9mIGxpbWIgaW4gYmFzZVxuICBmb3IgKHZhciBsaW1iTGVuID0gMCwgbGltYlBvdyA9IDE7IGxpbWJQb3cgPD0gMHgzZmZmZmZmOyBsaW1iUG93ICo9IGJhc2UpXG4gICAgbGltYkxlbisrO1xuICBsaW1iTGVuLS07XG4gIGxpbWJQb3cgPSAobGltYlBvdyAvIGJhc2UpIHwgMDtcblxuICB2YXIgdG90YWwgPSBudW1iZXIubGVuZ3RoIC0gc3RhcnQ7XG4gIHZhciBtb2QgPSB0b3RhbCAlIGxpbWJMZW47XG4gIHZhciBlbmQgPSBNYXRoLm1pbih0b3RhbCwgdG90YWwgLSBtb2QpICsgc3RhcnQ7XG5cbiAgdmFyIHdvcmQgPSAwO1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gbGltYkxlbikge1xuICAgIHdvcmQgPSBwYXJzZUJhc2UobnVtYmVyLCBpLCBpICsgbGltYkxlbiwgYmFzZSk7XG5cbiAgICB0aGlzLmltdWxuKGxpbWJQb3cpO1xuICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMClcbiAgICAgIHRoaXMud29yZHNbMF0gKz0gd29yZDtcbiAgICBlbHNlXG4gICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgfVxuXG4gIGlmIChtb2QgIT09IDApIHtcbiAgICB2YXIgcG93ID0gMTtcbiAgICB2YXIgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIG51bWJlci5sZW5ndGgsIGJhc2UpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtb2Q7IGkrKylcbiAgICAgIHBvdyAqPSBiYXNlO1xuICAgIHRoaXMuaW11bG4ocG93KTtcbiAgICBpZiAodGhpcy53b3Jkc1swXSArIHdvcmQgPCAweDQwMDAwMDApXG4gICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgZWxzZVxuICAgICAgdGhpcy5faWFkZG4od29yZCk7XG4gIH1cbn07XG5cbkJOLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weShkZXN0KSB7XG4gIGRlc3Qud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspXG4gICAgZGVzdC53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV07XG4gIGRlc3QubGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gIGRlc3Quc2lnbiA9IHRoaXMuc2lnbjtcbiAgZGVzdC5yZWQgPSB0aGlzLnJlZDtcbn07XG5cbkJOLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lKCkge1xuICB2YXIgciA9IG5ldyBCTihudWxsKTtcbiAgdGhpcy5jb3B5KHIpO1xuICByZXR1cm4gcjtcbn07XG5cbi8vIFJlbW92ZSBsZWFkaW5nIGAwYCBmcm9tIGB0aGlzYFxuQk4ucHJvdG90eXBlLnN0cmlwID0gZnVuY3Rpb24gc3RyaXAoKSB7XG4gIHdoaWxlICh0aGlzLmxlbmd0aCA+IDEgJiYgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdID09PSAwKVxuICAgIHRoaXMubGVuZ3RoLS07XG4gIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xufTtcblxuQk4ucHJvdG90eXBlLl9ub3JtU2lnbiA9IGZ1bmN0aW9uIF9ub3JtU2lnbigpIHtcbiAgLy8gLTAgPSAwXG4gIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwKVxuICAgIHRoaXMuc2lnbiA9IGZhbHNlO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkJOLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgcmV0dXJuICh0aGlzLnJlZCA/ICc8Qk4tUjogJyA6ICc8Qk46ICcpICsgdGhpcy50b1N0cmluZygxNikgKyAnPic7XG59O1xuXG4vKlxuXG52YXIgemVyb3MgPSBbXTtcbnZhciBncm91cFNpemVzID0gW107XG52YXIgZ3JvdXBCYXNlcyA9IFtdO1xuXG52YXIgcyA9ICcnO1xudmFyIGkgPSAtMTtcbndoaWxlICgrK2kgPCBCTi53b3JkU2l6ZSkge1xuICB6ZXJvc1tpXSA9IHM7XG4gIHMgKz0gJzAnO1xufVxuZ3JvdXBTaXplc1swXSA9IDA7XG5ncm91cFNpemVzWzFdID0gMDtcbmdyb3VwQmFzZXNbMF0gPSAwO1xuZ3JvdXBCYXNlc1sxXSA9IDA7XG52YXIgYmFzZSA9IDIgLSAxO1xud2hpbGUgKCsrYmFzZSA8IDM2ICsgMSkge1xuICB2YXIgZ3JvdXBTaXplID0gMDtcbiAgdmFyIGdyb3VwQmFzZSA9IDE7XG4gIHdoaWxlIChncm91cEJhc2UgPCAoMSA8PCBCTi53b3JkU2l6ZSkgLyBiYXNlKSB7XG4gICAgZ3JvdXBCYXNlICo9IGJhc2U7XG4gICAgZ3JvdXBTaXplICs9IDE7XG4gIH1cbiAgZ3JvdXBTaXplc1tiYXNlXSA9IGdyb3VwU2l6ZTtcbiAgZ3JvdXBCYXNlc1tiYXNlXSA9IGdyb3VwQmFzZTtcbn1cblxuKi9cblxudmFyIHplcm9zID0gW1xuICAnJyxcbiAgJzAnLFxuICAnMDAnLFxuICAnMDAwJyxcbiAgJzAwMDAnLFxuICAnMDAwMDAnLFxuICAnMDAwMDAwJyxcbiAgJzAwMDAwMDAnLFxuICAnMDAwMDAwMDAnLFxuICAnMDAwMDAwMDAwJyxcbiAgJzAwMDAwMDAwMDAnLFxuICAnMDAwMDAwMDAwMDAnLFxuICAnMDAwMDAwMDAwMDAwJyxcbiAgJzAwMDAwMDAwMDAwMDAnLFxuICAnMDAwMDAwMDAwMDAwMDAnLFxuICAnMDAwMDAwMDAwMDAwMDAwJyxcbiAgJzAwMDAwMDAwMDAwMDAwMDAnLFxuICAnMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAnMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgJzAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnXG5dO1xuXG52YXIgZ3JvdXBTaXplcyA9IFtcbiAgMCwgMCxcbiAgMjUsIDE2LCAxMiwgMTEsIDEwLCA5LCA4LFxuICA4LCA3LCA3LCA3LCA3LCA2LCA2LFxuICA2LCA2LCA2LCA2LCA2LCA1LCA1LFxuICA1LCA1LCA1LCA1LCA1LCA1LCA1LFxuICA1LCA1LCA1LCA1LCA1LCA1LCA1XG5dO1xuXG52YXIgZ3JvdXBCYXNlcyA9IFtcbiAgMCwgMCxcbiAgMzM1NTQ0MzIsIDQzMDQ2NzIxLCAxNjc3NzIxNiwgNDg4MjgxMjUsIDYwNDY2MTc2LCA0MDM1MzYwNywgMTY3NzcyMTYsXG4gIDQzMDQ2NzIxLCAxMDAwMDAwMCwgMTk0ODcxNzEsIDM1ODMxODA4LCA2Mjc0ODUxNywgNzUyOTUzNiwgMTEzOTA2MjUsXG4gIDE2Nzc3MjE2LCAyNDEzNzU2OSwgMzQwMTIyMjQsIDQ3MDQ1ODgxLCA2NDAwMDAwMCwgNDA4NDEwMSwgNTE1MzYzMixcbiAgNjQzNjM0MywgNzk2MjYyNCwgOTc2NTYyNSwgMTE4ODEzNzYsIDE0MzQ4OTA3LCAxNzIxMDM2OCwgMjA1MTExNDksXG4gIDI0MzAwMDAwLCAyODYyOTE1MSwgMzM1NTQ0MzIsIDM5MTM1MzkzLCA0NTQzNTQyNCwgNTI1MjE4NzUsIDYwNDY2MTc2XG5dO1xuXG5CTi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhiYXNlLCBwYWRkaW5nKSB7XG4gIGJhc2UgPSBiYXNlIHx8IDEwO1xuICBpZiAoYmFzZSA9PT0gMTYgfHwgYmFzZSA9PT0gJ2hleCcpIHtcbiAgICB2YXIgb3V0ID0gJyc7XG4gICAgdmFyIG9mZiA9IDA7XG4gICAgdmFyIHBhZGRpbmcgPSBwYWRkaW5nIHwgMCB8fCAxO1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IHRoaXMud29yZHNbaV07XG4gICAgICB2YXIgd29yZCA9ICgoKHcgPDwgb2ZmKSB8IGNhcnJ5KSAmIDB4ZmZmZmZmKS50b1N0cmluZygxNik7XG4gICAgICBjYXJyeSA9ICh3ID4+PiAoMjQgLSBvZmYpKSAmIDB4ZmZmZmZmO1xuICAgICAgaWYgKGNhcnJ5ICE9PSAwIHx8IGkgIT09IHRoaXMubGVuZ3RoIC0gMSlcbiAgICAgICAgb3V0ID0gemVyb3NbNiAtIHdvcmQubGVuZ3RoXSArIHdvcmQgKyBvdXQ7XG4gICAgICBlbHNlXG4gICAgICAgIG91dCA9IHdvcmQgKyBvdXQ7XG4gICAgICBvZmYgKz0gMjtcbiAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICBpLS07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMClcbiAgICAgIG91dCA9IGNhcnJ5LnRvU3RyaW5nKDE2KSArIG91dDtcbiAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApXG4gICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgaWYgKHRoaXMuc2lnbilcbiAgICAgIG91dCA9ICctJyArIG91dDtcbiAgICByZXR1cm4gb3V0O1xuICB9IGVsc2UgaWYgKGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpIHtcbiAgICAvLyB2YXIgZ3JvdXBTaXplID0gTWF0aC5mbG9vcihCTi53b3JkU2l6ZSAqIE1hdGguTE4yIC8gTWF0aC5sb2coYmFzZSkpO1xuICAgIHZhciBncm91cFNpemUgPSBncm91cFNpemVzW2Jhc2VdO1xuICAgIC8vIHZhciBncm91cEJhc2UgPSBNYXRoLnBvdyhiYXNlLCBncm91cFNpemUpO1xuICAgIHZhciBncm91cEJhc2UgPSBncm91cEJhc2VzW2Jhc2VdO1xuICAgIHZhciBvdXQgPSAnJztcbiAgICB2YXIgYyA9IHRoaXMuY2xvbmUoKTtcbiAgICBjLnNpZ24gPSBmYWxzZTtcbiAgICB3aGlsZSAoYy5jbXBuKDApICE9PSAwKSB7XG4gICAgICB2YXIgciA9IGMubW9kbihncm91cEJhc2UpLnRvU3RyaW5nKGJhc2UpO1xuICAgICAgYyA9IGMuaWRpdm4oZ3JvdXBCYXNlKTtcblxuICAgICAgaWYgKGMuY21wbigwKSAhPT0gMClcbiAgICAgICAgb3V0ID0gemVyb3NbZ3JvdXBTaXplIC0gci5sZW5ndGhdICsgciArIG91dDtcbiAgICAgIGVsc2VcbiAgICAgICAgb3V0ID0gciArIG91dDtcbiAgICB9XG4gICAgaWYgKHRoaXMuY21wbigwKSA9PT0gMClcbiAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICBpZiAodGhpcy5zaWduKVxuICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgIHJldHVybiBvdXQ7XG4gIH0gZWxzZSB7XG4gICAgYXNzZXJ0KGZhbHNlLCAnQmFzZSBzaG91bGQgYmUgYmV0d2VlbiAyIGFuZCAzNicpO1xuICB9XG59O1xuXG5CTi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICByZXR1cm4gdGhpcy50b1N0cmluZygxNik7XG59O1xuXG5CTi5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkoZW5kaWFuKSB7XG4gIHRoaXMuc3RyaXAoKTtcbiAgdmFyIHJlcyA9IG5ldyBBcnJheSh0aGlzLmJ5dGVMZW5ndGgoKSk7XG4gIHJlc1swXSA9IDA7XG5cbiAgdmFyIHEgPSB0aGlzLmNsb25lKCk7XG4gIGlmIChlbmRpYW4gIT09ICdsZScpIHtcbiAgICAvLyBBc3N1bWUgYmlnLWVuZGlhblxuICAgIGZvciAodmFyIGkgPSAwOyBxLmNtcG4oMCkgIT09IDA7IGkrKykge1xuICAgICAgdmFyIGIgPSBxLmFuZGxuKDB4ZmYpO1xuICAgICAgcS5pc2hybig4KTtcblxuICAgICAgcmVzW3Jlcy5sZW5ndGggLSBpIC0gMV0gPSBiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBBc3N1bWUgbGl0dGxlLWVuZGlhblxuICAgIGZvciAodmFyIGkgPSAwOyBxLmNtcG4oMCkgIT09IDA7IGkrKykge1xuICAgICAgdmFyIGIgPSBxLmFuZGxuKDB4ZmYpO1xuICAgICAgcS5pc2hybig4KTtcblxuICAgICAgcmVzW2ldID0gYjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcblxuaWYgKE1hdGguY2x6MzIpIHtcbiAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzKHcpIHtcbiAgICByZXR1cm4gMzIgLSBNYXRoLmNsejMyKHcpO1xuICB9O1xufSBlbHNlIHtcbiAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzKHcpIHtcbiAgICB2YXIgdCA9IHc7XG4gICAgdmFyIHIgPSAwO1xuICAgIGlmICh0ID49IDB4MTAwMCkge1xuICAgICAgciArPSAxMztcbiAgICAgIHQgPj4+PSAxMztcbiAgICB9XG4gICAgaWYgKHQgPj0gMHg0MCkge1xuICAgICAgciArPSA3O1xuICAgICAgdCA+Pj49IDc7XG4gICAgfVxuICAgIGlmICh0ID49IDB4OCkge1xuICAgICAgciArPSA0O1xuICAgICAgdCA+Pj49IDQ7XG4gICAgfVxuICAgIGlmICh0ID49IDB4MDIpIHtcbiAgICAgIHIgKz0gMjtcbiAgICAgIHQgPj4+PSAyO1xuICAgIH1cbiAgICByZXR1cm4gciArIHQ7XG4gIH07XG59XG5cbkJOLnByb3RvdHlwZS5femVyb0JpdHMgPSBmdW5jdGlvbiBfemVyb0JpdHModykge1xuICAvLyBTaG9ydC1jdXRcbiAgaWYgKHcgPT09IDApXG4gICAgcmV0dXJuIDI2O1xuXG4gIHZhciB0ID0gdztcbiAgdmFyIHIgPSAwO1xuICBpZiAoKHQgJiAweDFmZmYpID09PSAwKSB7XG4gICAgciArPSAxMztcbiAgICB0ID4+Pj0gMTM7XG4gIH1cbiAgaWYgKCh0ICYgMHg3ZikgPT09IDApIHtcbiAgICByICs9IDc7XG4gICAgdCA+Pj49IDc7XG4gIH1cbiAgaWYgKCh0ICYgMHhmKSA9PT0gMCkge1xuICAgIHIgKz0gNDtcbiAgICB0ID4+Pj0gNDtcbiAgfVxuICBpZiAoKHQgJiAweDMpID09PSAwKSB7XG4gICAgciArPSAyO1xuICAgIHQgPj4+PSAyO1xuICB9XG4gIGlmICgodCAmIDB4MSkgPT09IDApXG4gICAgcisrO1xuICByZXR1cm4gcjtcbn07XG5cbi8vIFJldHVybiBudW1iZXIgb2YgdXNlZCBiaXRzIGluIGEgQk5cbkJOLnByb3RvdHlwZS5iaXRMZW5ndGggPSBmdW5jdGlvbiBiaXRMZW5ndGgoKSB7XG4gIHZhciBoaSA9IDA7XG4gIHZhciB3ID0gdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdO1xuICB2YXIgaGkgPSB0aGlzLl9jb3VudEJpdHModyk7XG4gIHJldHVybiAodGhpcy5sZW5ndGggLSAxKSAqIDI2ICsgaGk7XG59O1xuXG4vLyBOdW1iZXIgb2YgdHJhaWxpbmcgemVybyBiaXRzXG5CTi5wcm90b3R5cGUuemVyb0JpdHMgPSBmdW5jdGlvbiB6ZXJvQml0cygpIHtcbiAgaWYgKHRoaXMuY21wbigwKSA9PT0gMClcbiAgICByZXR1cm4gMDtcblxuICB2YXIgciA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBiID0gdGhpcy5femVyb0JpdHModGhpcy53b3Jkc1tpXSk7XG4gICAgciArPSBiO1xuICAgIGlmIChiICE9PSAyNilcbiAgICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiByO1xufTtcblxuQk4ucHJvdG90eXBlLmJ5dGVMZW5ndGggPSBmdW5jdGlvbiBieXRlTGVuZ3RoKCkge1xuICByZXR1cm4gTWF0aC5jZWlsKHRoaXMuYml0TGVuZ3RoKCkgLyA4KTtcbn07XG5cbi8vIFJldHVybiBuZWdhdGl2ZSBjbG9uZSBvZiBgdGhpc2BcbkJOLnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcoKSB7XG4gIGlmICh0aGlzLmNtcG4oMCkgPT09IDApXG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcblxuICB2YXIgciA9IHRoaXMuY2xvbmUoKTtcbiAgci5zaWduID0gIXRoaXMuc2lnbjtcbiAgcmV0dXJuIHI7XG59O1xuXG5cbi8vIE9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG5CTi5wcm90b3R5cGUuaW9yID0gZnVuY3Rpb24gaW9yKG51bSkge1xuICB0aGlzLnNpZ24gPSB0aGlzLnNpZ24gfHwgbnVtLnNpZ247XG5cbiAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aClcbiAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoKytdID0gMDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKylcbiAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSB8IG51bS53b3Jkc1tpXTtcblxuICByZXR1cm4gdGhpcy5zdHJpcCgpO1xufTtcblxuXG4vLyBPciBgbnVtYCB3aXRoIGB0aGlzYFxuQk4ucHJvdG90eXBlLm9yID0gZnVuY3Rpb24gb3IobnVtKSB7XG4gIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpXG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pb3IobnVtKTtcbiAgZWxzZVxuICAgIHJldHVybiBudW0uY2xvbmUoKS5pb3IodGhpcyk7XG59O1xuXG5cbi8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuQk4ucHJvdG90eXBlLmlhbmQgPSBmdW5jdGlvbiBpYW5kKG51bSkge1xuICB0aGlzLnNpZ24gPSB0aGlzLnNpZ24gJiYgbnVtLnNpZ247XG5cbiAgLy8gYiA9IG1pbi1sZW5ndGgobnVtLCB0aGlzKVxuICB2YXIgYjtcbiAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aClcbiAgICBiID0gbnVtO1xuICBlbHNlXG4gICAgYiA9IHRoaXM7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKVxuICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldICYgbnVtLndvcmRzW2ldO1xuXG4gIHRoaXMubGVuZ3RoID0gYi5sZW5ndGg7XG5cbiAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbn07XG5cblxuLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgXG5CTi5wcm90b3R5cGUuYW5kID0gZnVuY3Rpb24gYW5kKG51bSkge1xuICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKVxuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWFuZChudW0pO1xuICBlbHNlXG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLmlhbmQodGhpcyk7XG59O1xuXG5cbi8vIFhvciBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuQk4ucHJvdG90eXBlLml4b3IgPSBmdW5jdGlvbiBpeG9yKG51bSkge1xuICB0aGlzLnNpZ24gPSB0aGlzLnNpZ24gfHwgbnVtLnNpZ247XG5cbiAgLy8gYS5sZW5ndGggPiBiLmxlbmd0aFxuICB2YXIgYTtcbiAgdmFyIGI7XG4gIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICBhID0gdGhpcztcbiAgICBiID0gbnVtO1xuICB9IGVsc2Uge1xuICAgIGEgPSBudW07XG4gICAgYiA9IHRoaXM7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspXG4gICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV0gXiBiLndvcmRzW2ldO1xuXG4gIGlmICh0aGlzICE9PSBhKVxuICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKylcbiAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuXG4gIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG5cbiAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbn07XG5cblxuLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgXG5CTi5wcm90b3R5cGUueG9yID0gZnVuY3Rpb24geG9yKG51bSkge1xuICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKVxuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXhvcihudW0pO1xuICBlbHNlXG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml4b3IodGhpcyk7XG59O1xuXG5cbi8vIFNldCBgYml0YCBvZiBgdGhpc2BcbkJOLnByb3RvdHlwZS5zZXRuID0gZnVuY3Rpb24gc2V0bihiaXQsIHZhbCkge1xuICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicgJiYgYml0ID49IDApO1xuXG4gIHZhciBvZmYgPSAoYml0IC8gMjYpIHwgMDtcbiAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICB3aGlsZSAodGhpcy5sZW5ndGggPD0gb2ZmKVxuICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuXG4gIGlmICh2YWwpXG4gICAgdGhpcy53b3Jkc1tvZmZdID0gdGhpcy53b3Jkc1tvZmZdIHwgKDEgPDwgd2JpdCk7XG4gIGVsc2VcbiAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gJiB+KDEgPDwgd2JpdCk7XG5cbiAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbn07XG5cblxuLy8gQWRkIGBudW1gIHRvIGB0aGlzYCBpbi1wbGFjZVxuQk4ucHJvdG90eXBlLmlhZGQgPSBmdW5jdGlvbiBpYWRkKG51bSkge1xuICAvLyBuZWdhdGl2ZSArIHBvc2l0aXZlXG4gIGlmICh0aGlzLnNpZ24gJiYgIW51bS5zaWduKSB7XG4gICAgdGhpcy5zaWduID0gZmFsc2U7XG4gICAgdmFyIHIgPSB0aGlzLmlzdWIobnVtKTtcbiAgICB0aGlzLnNpZ24gPSAhdGhpcy5zaWduO1xuICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuXG4gIC8vIHBvc2l0aXZlICsgbmVnYXRpdmVcbiAgfSBlbHNlIGlmICghdGhpcy5zaWduICYmIG51bS5zaWduKSB7XG4gICAgbnVtLnNpZ24gPSBmYWxzZTtcbiAgICB2YXIgciA9IHRoaXMuaXN1YihudW0pO1xuICAgIG51bS5zaWduID0gdHJ1ZTtcbiAgICByZXR1cm4gci5fbm9ybVNpZ24oKTtcbiAgfVxuXG4gIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgdmFyIGE7XG4gIHZhciBiO1xuICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgYSA9IHRoaXM7XG4gICAgYiA9IG51bTtcbiAgfSBlbHNlIHtcbiAgICBhID0gbnVtO1xuICAgIGIgPSB0aGlzO1xuICB9XG5cbiAgdmFyIGNhcnJ5ID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHIgPSBhLndvcmRzW2ldICsgYi53b3Jkc1tpXSArIGNhcnJ5O1xuICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgIGNhcnJ5ID0gciA+Pj4gMjY7XG4gIH1cbiAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHIgPSBhLndvcmRzW2ldICsgY2Fycnk7XG4gICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgY2FycnkgPSByID4+PiAyNjtcbiAgfVxuXG4gIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG4gIGlmIChjYXJyeSAhPT0gMCkge1xuICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGhdID0gY2Fycnk7XG4gICAgdGhpcy5sZW5ndGgrKztcbiAgLy8gQ29weSB0aGUgcmVzdCBvZiB0aGUgd29yZHNcbiAgfSBlbHNlIGlmIChhICE9PSB0aGlzKSB7XG4gICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKVxuICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIEFkZCBgbnVtYCB0byBgdGhpc2BcbkJOLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQobnVtKSB7XG4gIGlmIChudW0uc2lnbiAmJiAhdGhpcy5zaWduKSB7XG4gICAgbnVtLnNpZ24gPSBmYWxzZTtcbiAgICB2YXIgcmVzID0gdGhpcy5zdWIobnVtKTtcbiAgICBudW0uc2lnbiA9IHRydWU7XG4gICAgcmV0dXJuIHJlcztcbiAgfSBlbHNlIGlmICghbnVtLnNpZ24gJiYgdGhpcy5zaWduKSB7XG4gICAgdGhpcy5zaWduID0gZmFsc2U7XG4gICAgdmFyIHJlcyA9IG51bS5zdWIodGhpcyk7XG4gICAgdGhpcy5zaWduID0gdHJ1ZTtcbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aClcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGQobnVtKTtcbiAgZWxzZVxuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYWRkKHRoaXMpO1xufTtcblxuLy8gU3VidHJhY3QgYG51bWAgZnJvbSBgdGhpc2AgaW4tcGxhY2VcbkJOLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YihudW0pIHtcbiAgLy8gdGhpcyAtICgtbnVtKSA9IHRoaXMgKyBudW1cbiAgaWYgKG51bS5zaWduKSB7XG4gICAgbnVtLnNpZ24gPSBmYWxzZTtcbiAgICB2YXIgciA9IHRoaXMuaWFkZChudW0pO1xuICAgIG51bS5zaWduID0gdHJ1ZTtcbiAgICByZXR1cm4gci5fbm9ybVNpZ24oKTtcblxuICAvLyAtdGhpcyAtIG51bSA9IC0odGhpcyArIG51bSlcbiAgfSBlbHNlIGlmICh0aGlzLnNpZ24pIHtcbiAgICB0aGlzLnNpZ24gPSBmYWxzZTtcbiAgICB0aGlzLmlhZGQobnVtKTtcbiAgICB0aGlzLnNpZ24gPSB0cnVlO1xuICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICB9XG5cbiAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlXG4gIHZhciBjbXAgPSB0aGlzLmNtcChudW0pO1xuXG4gIC8vIE9wdGltaXphdGlvbiAtIHplcm9pZnlcbiAgaWYgKGNtcCA9PT0gMCkge1xuICAgIHRoaXMuc2lnbiA9IGZhbHNlO1xuICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIGEgPiBiXG4gIHZhciBhO1xuICB2YXIgYjtcbiAgaWYgKGNtcCA+IDApIHtcbiAgICBhID0gdGhpcztcbiAgICBiID0gbnVtO1xuICB9IGVsc2Uge1xuICAgIGEgPSBudW07XG4gICAgYiA9IHRoaXM7XG4gIH1cblxuICB2YXIgY2FycnkgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgciA9IGEud29yZHNbaV0gLSBiLndvcmRzW2ldICsgY2Fycnk7XG4gICAgY2FycnkgPSByID4+IDI2O1xuICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICB9XG4gIGZvciAoOyBjYXJyeSAhPT0gMCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgIHZhciByID0gYS53b3Jkc1tpXSArIGNhcnJ5O1xuICAgIGNhcnJ5ID0gciA+PiAyNjtcbiAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgfVxuXG4gIC8vIENvcHkgcmVzdCBvZiB0aGUgd29yZHNcbiAgaWYgKGNhcnJ5ID09PSAwICYmIGkgPCBhLmxlbmd0aCAmJiBhICE9PSB0aGlzKVxuICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKylcbiAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICB0aGlzLmxlbmd0aCA9IE1hdGgubWF4KHRoaXMubGVuZ3RoLCBpKTtcblxuICBpZiAoYSAhPT0gdGhpcylcbiAgICB0aGlzLnNpZ24gPSB0cnVlO1xuXG4gIHJldHVybiB0aGlzLnN0cmlwKCk7XG59O1xuXG4vLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYFxuQk4ucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YihudW0pIHtcbiAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3ViKG51bSk7XG59O1xuXG4vKlxuLy8gTk9URTogVGhpcyBjb3VsZCBiZSBwb3RlbnRpb25hbGx5IHVzZWQgdG8gZ2VuZXJhdGUgbG9vcC1sZXNzIG11bHRpcGxpY2F0aW9uc1xuZnVuY3Rpb24gX2dlbkNvbWJNdWxUbyhhbGVuLCBibGVuKSB7XG4gIHZhciBsZW4gPSBhbGVuICsgYmxlbiAtIDE7XG4gIHZhciBzcmMgPSBbXG4gICAgJ3ZhciBhID0gdGhpcy53b3JkcywgYiA9IG51bS53b3JkcywgbyA9IG91dC53b3JkcywgYyA9IDAsIHcsICcgK1xuICAgICAgICAnbWFzayA9IDB4M2ZmZmZmZiwgc2hpZnQgPSAweDQwMDAwMDA7JyxcbiAgICAnb3V0Lmxlbmd0aCA9ICcgKyBsZW4gKyAnOydcbiAgXTtcbiAgZm9yICh2YXIgayA9IDA7IGsgPCBsZW47IGsrKykge1xuICAgIHZhciBtaW5KID0gTWF0aC5tYXgoMCwgayAtIGFsZW4gKyAxKTtcbiAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIGJsZW4gLSAxKTtcblxuICAgIGZvciAodmFyIGogPSBtaW5KOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgdmFyIGkgPSBrIC0gajtcbiAgICAgIHZhciBtdWwgPSAnYVsnICsgaSArICddICogYlsnICsgaiArICddJztcblxuICAgICAgaWYgKGogPT09IG1pbkopIHtcbiAgICAgICAgc3JjLnB1c2goJ3cgPSAnICsgbXVsICsgJyArIGM7Jyk7XG4gICAgICAgIHNyYy5wdXNoKCdjID0gKHcgLyBzaGlmdCkgfCAwOycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3JjLnB1c2goJ3cgKz0gJyArIG11bCArICc7Jyk7XG4gICAgICAgIHNyYy5wdXNoKCdjICs9ICh3IC8gc2hpZnQpIHwgMDsnKTtcbiAgICAgIH1cbiAgICAgIHNyYy5wdXNoKCd3ICY9IG1hc2s7Jyk7XG4gICAgfVxuICAgIHNyYy5wdXNoKCdvWycgKyBrICsgJ10gPSB3OycpO1xuICB9XG4gIHNyYy5wdXNoKCdpZiAoYyAhPT0gMCkgeycsXG4gICAgICAgICAgICcgIG9bJyArIGsgKyAnXSA9IGM7JyxcbiAgICAgICAgICAgJyAgb3V0Lmxlbmd0aCsrOycsXG4gICAgICAgICAgICd9JyxcbiAgICAgICAgICAgJ3JldHVybiBvdXQ7Jyk7XG5cbiAgcmV0dXJuIHNyYy5qb2luKCdcXG4nKTtcbn1cbiovXG5cbkJOLnByb3RvdHlwZS5fc21hbGxNdWxUbyA9IGZ1bmN0aW9uIF9zbWFsbE11bFRvKG51bSwgb3V0KSB7XG4gIG91dC5zaWduID0gbnVtLnNpZ24gIT09IHRoaXMuc2lnbjtcbiAgb3V0Lmxlbmd0aCA9IHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aDtcblxuICB2YXIgY2FycnkgPSAwO1xuICBmb3IgKHZhciBrID0gMDsgayA8IG91dC5sZW5ndGggLSAxOyBrKyspIHtcbiAgICAvLyBTdW0gYWxsIHdvcmRzIHdpdGggdGhlIHNhbWUgYGkgKyBqID0ga2AgYW5kIGFjY3VtdWxhdGUgYG5jYXJyeWAsXG4gICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICB2YXIgbmNhcnJ5ID0gY2FycnkgPj4+IDI2O1xuICAgIHZhciByd29yZCA9IGNhcnJ5ICYgMHgzZmZmZmZmO1xuICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gdGhpcy5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgIHZhciBpID0gayAtIGo7XG4gICAgICB2YXIgYSA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdmFyIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgdmFyIHIgPSBhICogYjtcblxuICAgICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAoKHIgLyAweDQwMDAwMDApIHwgMCkpIHwgMDtcbiAgICAgIGxvID0gKGxvICsgcndvcmQpIHwgMDtcbiAgICAgIHJ3b3JkID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICBuY2FycnkgPSAobmNhcnJ5ICsgKGxvID4+PiAyNikpIHwgMDtcbiAgICB9XG4gICAgb3V0LndvcmRzW2tdID0gcndvcmQ7XG4gICAgY2FycnkgPSBuY2Fycnk7XG4gIH1cbiAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgb3V0LndvcmRzW2tdID0gY2Fycnk7XG4gIH0gZWxzZSB7XG4gICAgb3V0Lmxlbmd0aC0tO1xuICB9XG5cbiAgcmV0dXJuIG91dC5zdHJpcCgpO1xufTtcblxuQk4ucHJvdG90eXBlLl9iaWdNdWxUbyA9IGZ1bmN0aW9uIF9iaWdNdWxUbyhudW0sIG91dCkge1xuICBvdXQuc2lnbiA9IG51bS5zaWduICE9PSB0aGlzLnNpZ247XG4gIG91dC5sZW5ndGggPSB0aGlzLmxlbmd0aCArIG51bS5sZW5ndGg7XG5cbiAgdmFyIGNhcnJ5ID0gMDtcbiAgdmFyIGhuY2FycnkgPSAwO1xuICBmb3IgKHZhciBrID0gMDsgayA8IG91dC5sZW5ndGggLSAxOyBrKyspIHtcbiAgICAvLyBTdW0gYWxsIHdvcmRzIHdpdGggdGhlIHNhbWUgYGkgKyBqID0ga2AgYW5kIGFjY3VtdWxhdGUgYG5jYXJyeWAsXG4gICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICB2YXIgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICBobmNhcnJ5ID0gMDtcbiAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICBmb3IgKHZhciBqID0gTWF0aC5tYXgoMCwgayAtIHRoaXMubGVuZ3RoICsgMSk7IGogPD0gbWF4SjsgaisrKSB7XG4gICAgICB2YXIgaSA9IGsgLSBqO1xuICAgICAgdmFyIGEgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHZhciBiID0gbnVtLndvcmRzW2pdIHwgMDtcbiAgICAgIHZhciByID0gYSAqIGI7XG5cbiAgICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgICBuY2FycnkgPSAobmNhcnJ5ICsgKChyIC8gMHg0MDAwMDAwKSB8IDApKSB8IDA7XG4gICAgICBsbyA9IChsbyArIHJ3b3JkKSB8IDA7XG4gICAgICByd29yZCA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgbmNhcnJ5ID0gKG5jYXJyeSArIChsbyA+Pj4gMjYpKSB8IDA7XG5cbiAgICAgIGhuY2FycnkgKz0gbmNhcnJ5ID4+PiAyNjtcbiAgICAgIG5jYXJyeSAmPSAweDNmZmZmZmY7XG4gICAgfVxuICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkO1xuICAgIGNhcnJ5ID0gbmNhcnJ5O1xuICAgIG5jYXJyeSA9IGhuY2Fycnk7XG4gIH1cbiAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgb3V0LndvcmRzW2tdID0gY2Fycnk7XG4gIH0gZWxzZSB7XG4gICAgb3V0Lmxlbmd0aC0tO1xuICB9XG5cbiAgcmV0dXJuIG91dC5zdHJpcCgpO1xufTtcblxuQk4ucHJvdG90eXBlLm11bFRvID0gZnVuY3Rpb24gbXVsVG8obnVtLCBvdXQpIHtcbiAgdmFyIHJlcztcbiAgaWYgKHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aCA8IDYzKVxuICAgIHJlcyA9IHRoaXMuX3NtYWxsTXVsVG8obnVtLCBvdXQpO1xuICBlbHNlXG4gICAgcmVzID0gdGhpcy5fYmlnTXVsVG8obnVtLCBvdXQpO1xuICByZXR1cm4gcmVzO1xufTtcblxuLy8gTXVsdGlwbHkgYHRoaXNgIGJ5IGBudW1gXG5CTi5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKG51bSkge1xuICB2YXIgb3V0ID0gbmV3IEJOKG51bGwpO1xuICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgcmV0dXJuIHRoaXMubXVsVG8obnVtLCBvdXQpO1xufTtcblxuLy8gSW4tcGxhY2UgTXVsdGlwbGljYXRpb25cbkJOLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bChudW0pIHtcbiAgaWYgKHRoaXMuY21wbigwKSA9PT0gMCB8fCBudW0uY21wbigwKSA9PT0gMCkge1xuICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHZhciB0bGVuID0gdGhpcy5sZW5ndGg7XG4gIHZhciBubGVuID0gbnVtLmxlbmd0aDtcblxuICB0aGlzLnNpZ24gPSBudW0uc2lnbiAhPT0gdGhpcy5zaWduO1xuICB0aGlzLmxlbmd0aCA9IHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aDtcbiAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdID0gMDtcblxuICBmb3IgKHZhciBrID0gdGhpcy5sZW5ndGggLSAyOyBrID49IDA7IGstLSkge1xuICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgY2FycnlgLFxuICAgIC8vIG5vdGUgdGhhdCBjYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIHZhciByd29yZCA9IDA7XG4gICAgdmFyIG1heEogPSBNYXRoLm1pbihrLCBubGVuIC0gMSk7XG4gICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSB0bGVuICsgMSk7IGogPD0gbWF4SjsgaisrKSB7XG4gICAgICB2YXIgaSA9IGsgLSBqO1xuICAgICAgdmFyIGEgPSB0aGlzLndvcmRzW2ldO1xuICAgICAgdmFyIGIgPSBudW0ud29yZHNbal07XG4gICAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgICB2YXIgbG8gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgKz0gKHIgLyAweDQwMDAwMDApIHwgMDtcbiAgICAgIGxvICs9IHJ3b3JkO1xuICAgICAgcndvcmQgPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ICs9IGxvID4+PiAyNjtcbiAgICB9XG4gICAgdGhpcy53b3Jkc1trXSA9IHJ3b3JkO1xuICAgIHRoaXMud29yZHNbayArIDFdICs9IGNhcnJ5O1xuICAgIGNhcnJ5ID0gMDtcbiAgfVxuXG4gIC8vIFByb3BhZ2F0ZSBvdmVyZmxvd3NcbiAgdmFyIGNhcnJ5ID0gMDtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldICsgY2Fycnk7XG4gICAgdGhpcy53b3Jkc1tpXSA9IHcgJiAweDNmZmZmZmY7XG4gICAgY2FycnkgPSB3ID4+PiAyNjtcbiAgfVxuXG4gIHJldHVybiB0aGlzLnN0cmlwKCk7XG59O1xuXG5CTi5wcm90b3R5cGUuaW11bG4gPSBmdW5jdGlvbiBpbXVsbihudW0pIHtcbiAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcblxuICAvLyBDYXJyeVxuICB2YXIgY2FycnkgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdyA9IHRoaXMud29yZHNbaV0gKiBudW07XG4gICAgdmFyIGxvID0gKHcgJiAweDNmZmZmZmYpICsgKGNhcnJ5ICYgMHgzZmZmZmZmKTtcbiAgICBjYXJyeSA+Pj0gMjY7XG4gICAgY2FycnkgKz0gKHcgLyAweDQwMDAwMDApIHwgMDtcbiAgICAvLyBOT1RFOiBsbyBpcyAyN2JpdCBtYXhpbXVtXG4gICAgY2FycnkgKz0gbG8gPj4+IDI2O1xuICAgIHRoaXMud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgfVxuXG4gIGlmIChjYXJyeSAhPT0gMCkge1xuICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICB0aGlzLmxlbmd0aCsrO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CTi5wcm90b3R5cGUubXVsbiA9IGZ1bmN0aW9uIG11bG4obnVtKSB7XG4gIHJldHVybiB0aGlzLmNsb25lKCkuaW11bG4obnVtKTtcbn07XG5cbi8vIGB0aGlzYCAqIGB0aGlzYFxuQk4ucHJvdG90eXBlLnNxciA9IGZ1bmN0aW9uIHNxcigpIHtcbiAgcmV0dXJuIHRoaXMubXVsKHRoaXMpO1xufTtcblxuLy8gYHRoaXNgICogYHRoaXNgIGluLXBsYWNlXG5CTi5wcm90b3R5cGUuaXNxciA9IGZ1bmN0aW9uIGlzcXIoKSB7XG4gIHJldHVybiB0aGlzLm11bCh0aGlzKTtcbn07XG5cbi8vIFNoaWZ0LWxlZnQgaW4tcGxhY2VcbkJOLnByb3RvdHlwZS5pc2hsbiA9IGZ1bmN0aW9uIGlzaGxuKGJpdHMpIHtcbiAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG4gIHZhciBjYXJyeU1hc2sgPSAoMHgzZmZmZmZmID4+PiAoMjYgLSByKSkgPDwgKDI2IC0gcik7XG5cbiAgaWYgKHIgIT09IDApIHtcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIG5ld0NhcnJ5ID0gdGhpcy53b3Jkc1tpXSAmIGNhcnJ5TWFzaztcbiAgICAgIHZhciBjID0gKHRoaXMud29yZHNbaV0gLSBuZXdDYXJyeSkgPDwgcjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjIHwgY2Fycnk7XG4gICAgICBjYXJyeSA9IG5ld0NhcnJ5ID4+PiAoMjYgLSByKTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5KSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzICE9PSAwKSB7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pXG4gICAgICB0aGlzLndvcmRzW2kgKyBzXSA9IHRoaXMud29yZHNbaV07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzOyBpKyspXG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB0aGlzLmxlbmd0aCArPSBzO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbn07XG5cbi8vIFNoaWZ0LXJpZ2h0IGluLXBsYWNlXG4vLyBOT1RFOiBgaGludGAgaXMgYSBsb3dlc3QgYml0IGJlZm9yZSB0cmFpbGluZyB6ZXJvZXNcbi8vIE5PVEU6IGlmIGBleHRlbmRlZGAgaXMgcHJlc2VudCAtIGl0IHdpbGwgYmUgZmlsbGVkIHdpdGggZGVzdHJveWVkIGJpdHNcbkJOLnByb3RvdHlwZS5pc2hybiA9IGZ1bmN0aW9uIGlzaHJuKGJpdHMsIGhpbnQsIGV4dGVuZGVkKSB7XG4gIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgdmFyIGg7XG4gIGlmIChoaW50KVxuICAgIGggPSAoaGludCAtIChoaW50ICUgMjYpKSAvIDI2O1xuICBlbHNlXG4gICAgaCA9IDA7XG5cbiAgdmFyIHIgPSBiaXRzICUgMjY7XG4gIHZhciBzID0gTWF0aC5taW4oKGJpdHMgLSByKSAvIDI2LCB0aGlzLmxlbmd0aCk7XG4gIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICB2YXIgbWFza2VkV29yZHMgPSBleHRlbmRlZDtcblxuICBoIC09IHM7XG4gIGggPSBNYXRoLm1heCgwLCBoKTtcblxuICAvLyBFeHRlbmRlZCBtb2RlLCBjb3B5IG1hc2tlZCBwYXJ0XG4gIGlmIChtYXNrZWRXb3Jkcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgczsgaSsrKVxuICAgICAgbWFza2VkV29yZHMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldO1xuICAgIG1hc2tlZFdvcmRzLmxlbmd0aCA9IHM7XG4gIH1cblxuICBpZiAocyA9PT0gMCkge1xuICAgIC8vIE5vLW9wLCB3ZSBzaG91bGQgbm90IG1vdmUgYW55dGhpbmcgYXQgYWxsXG4gIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPiBzKSB7XG4gICAgdGhpcy5sZW5ndGggLT0gcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspXG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpICsgc107XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgdGhpcy5sZW5ndGggPSAxO1xuICB9XG5cbiAgdmFyIGNhcnJ5ID0gMDtcbiAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwICYmIChjYXJyeSAhPT0gMCB8fCBpID49IGgpOyBpLS0pIHtcbiAgICB2YXIgd29yZCA9IHRoaXMud29yZHNbaV07XG4gICAgdGhpcy53b3Jkc1tpXSA9IChjYXJyeSA8PCAoMjYgLSByKSkgfCAod29yZCA+Pj4gcik7XG4gICAgY2FycnkgPSB3b3JkICYgbWFzaztcbiAgfVxuXG4gIC8vIFB1c2ggY2FycmllZCBiaXRzIGFzIGEgbWFza1xuICBpZiAobWFza2VkV29yZHMgJiYgY2FycnkgIT09IDApXG4gICAgbWFza2VkV29yZHMud29yZHNbbWFza2VkV29yZHMubGVuZ3RoKytdID0gY2Fycnk7XG5cbiAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgdGhpcy5sZW5ndGggPSAxO1xuICB9XG5cbiAgdGhpcy5zdHJpcCgpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gU2hpZnQtbGVmdFxuQk4ucHJvdG90eXBlLnNobG4gPSBmdW5jdGlvbiBzaGxuKGJpdHMpIHtcbiAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc2hsbihiaXRzKTtcbn07XG5cbi8vIFNoaWZ0LXJpZ2h0XG5CTi5wcm90b3R5cGUuc2hybiA9IGZ1bmN0aW9uIHNocm4oYml0cykge1xuICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzaHJuKGJpdHMpO1xufTtcblxuLy8gVGVzdCBpZiBuIGJpdCBpcyBzZXRcbkJOLnByb3RvdHlwZS50ZXN0biA9IGZ1bmN0aW9uIHRlc3RuKGJpdCkge1xuICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicgJiYgYml0ID49IDApO1xuICB2YXIgciA9IGJpdCAlIDI2O1xuICB2YXIgcyA9IChiaXQgLSByKSAvIDI2O1xuICB2YXIgcSA9IDEgPDwgcjtcblxuICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICBpZiAodGhpcy5sZW5ndGggPD0gcykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIENoZWNrIGJpdCBhbmQgcmV0dXJuXG4gIHZhciB3ID0gdGhpcy53b3Jkc1tzXTtcblxuICByZXR1cm4gISEodyAmIHEpO1xufTtcblxuLy8gUmV0dXJuIG9ubHkgbG93ZXJzIGJpdHMgb2YgbnVtYmVyIChpbi1wbGFjZSlcbkJOLnByb3RvdHlwZS5pbWFza24gPSBmdW5jdGlvbiBpbWFza24oYml0cykge1xuICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gIHZhciByID0gYml0cyAlIDI2O1xuICB2YXIgcyA9IChiaXRzIC0gcikgLyAyNjtcblxuICBhc3NlcnQoIXRoaXMuc2lnbiwgJ2ltYXNrbiB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmUgbnVtYmVycycpO1xuXG4gIGlmIChyICE9PSAwKVxuICAgIHMrKztcbiAgdGhpcy5sZW5ndGggPSBNYXRoLm1pbihzLCB0aGlzLmxlbmd0aCk7XG5cbiAgaWYgKHIgIT09IDApIHtcbiAgICB2YXIgbWFzayA9IDB4M2ZmZmZmZiBeICgoMHgzZmZmZmZmID4+PiByKSA8PCByKTtcbiAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gJj0gbWFzaztcbiAgfVxuXG4gIHJldHVybiB0aGlzLnN0cmlwKCk7XG59O1xuXG4vLyBSZXR1cm4gb25seSBsb3dlcnMgYml0cyBvZiBudW1iZXJcbkJOLnByb3RvdHlwZS5tYXNrbiA9IGZ1bmN0aW9uIG1hc2tuKGJpdHMpIHtcbiAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbWFza24oYml0cyk7XG59O1xuXG4vLyBBZGQgcGxhaW4gbnVtYmVyIGBudW1gIHRvIGB0aGlzYFxuQk4ucHJvdG90eXBlLmlhZGRuID0gZnVuY3Rpb24gaWFkZG4obnVtKSB7XG4gIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gIGlmIChudW0gPCAwKVxuICAgIHJldHVybiB0aGlzLmlzdWJuKC1udW0pO1xuXG4gIC8vIFBvc3NpYmxlIHNpZ24gY2hhbmdlXG4gIGlmICh0aGlzLnNpZ24pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA8IG51bSkge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IG51bSAtIHRoaXMud29yZHNbMF07XG4gICAgICB0aGlzLnNpZ24gPSBmYWxzZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMuc2lnbiA9IGZhbHNlO1xuICAgIHRoaXMuaXN1Ym4obnVtKTtcbiAgICB0aGlzLnNpZ24gPSB0cnVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gQWRkIHdpdGhvdXQgY2hlY2tzXG4gIHJldHVybiB0aGlzLl9pYWRkbihudW0pO1xufTtcblxuQk4ucHJvdG90eXBlLl9pYWRkbiA9IGZ1bmN0aW9uIF9pYWRkbihudW0pIHtcbiAgdGhpcy53b3Jkc1swXSArPSBudW07XG5cbiAgLy8gQ2FycnlcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldID49IDB4NDAwMDAwMDsgaSsrKSB7XG4gICAgdGhpcy53b3Jkc1tpXSAtPSAweDQwMDAwMDA7XG4gICAgaWYgKGkgPT09IHRoaXMubGVuZ3RoIC0gMSlcbiAgICAgIHRoaXMud29yZHNbaSArIDFdID0gMTtcbiAgICBlbHNlXG4gICAgICB0aGlzLndvcmRzW2kgKyAxXSsrO1xuICB9XG4gIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkgKyAxKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIFN1YnRyYWN0IHBsYWluIG51bWJlciBgbnVtYCBmcm9tIGB0aGlzYFxuQk4ucHJvdG90eXBlLmlzdWJuID0gZnVuY3Rpb24gaXN1Ym4obnVtKSB7XG4gIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gIGlmIChudW0gPCAwKVxuICAgIHJldHVybiB0aGlzLmlhZGRuKC1udW0pO1xuXG4gIGlmICh0aGlzLnNpZ24pIHtcbiAgICB0aGlzLnNpZ24gPSBmYWxzZTtcbiAgICB0aGlzLmlhZGRuKG51bSk7XG4gICAgdGhpcy5zaWduID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHRoaXMud29yZHNbMF0gLT0gbnVtO1xuXG4gIC8vIENhcnJ5XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA8IDA7IGkrKykge1xuICAgIHRoaXMud29yZHNbaV0gKz0gMHg0MDAwMDAwO1xuICAgIHRoaXMud29yZHNbaSArIDFdIC09IDE7XG4gIH1cblxuICByZXR1cm4gdGhpcy5zdHJpcCgpO1xufTtcblxuQk4ucHJvdG90eXBlLmFkZG4gPSBmdW5jdGlvbiBhZGRuKG51bSkge1xuICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGRuKG51bSk7XG59O1xuXG5CTi5wcm90b3R5cGUuc3VibiA9IGZ1bmN0aW9uIHN1Ym4obnVtKSB7XG4gIHJldHVybiB0aGlzLmNsb25lKCkuaXN1Ym4obnVtKTtcbn07XG5cbkJOLnByb3RvdHlwZS5pYWJzID0gZnVuY3Rpb24gaWFicygpIHtcbiAgdGhpcy5zaWduID0gZmFsc2U7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CTi5wcm90b3R5cGUuYWJzID0gZnVuY3Rpb24gYWJzKCkge1xuICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhYnMoKTtcbn07XG5cbkJOLnByb3RvdHlwZS5faXNobG5zdWJtdWwgPSBmdW5jdGlvbiBfaXNobG5zdWJtdWwobnVtLCBtdWwsIHNoaWZ0KSB7XG4gIC8vIEJpZ2dlciBzdG9yYWdlIGlzIG5lZWRlZFxuICB2YXIgbGVuID0gbnVtLmxlbmd0aCArIHNoaWZ0O1xuICB2YXIgaTtcbiAgaWYgKHRoaXMud29yZHMubGVuZ3RoIDwgbGVuKSB7XG4gICAgdmFyIHQgPSBuZXcgQXJyYXkobGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspXG4gICAgICB0W2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICB0aGlzLndvcmRzID0gdDtcbiAgfSBlbHNlIHtcbiAgICBpID0gdGhpcy5sZW5ndGg7XG4gIH1cblxuICAvLyBaZXJvaWZ5IHJlc3RcbiAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgbGVuKTtcbiAgZm9yICg7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKVxuICAgIHRoaXMud29yZHNbaV0gPSAwO1xuXG4gIHZhciBjYXJyeSA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHcgPSB0aGlzLndvcmRzW2kgKyBzaGlmdF0gKyBjYXJyeTtcbiAgICB2YXIgcmlnaHQgPSBudW0ud29yZHNbaV0gKiBtdWw7XG4gICAgdyAtPSByaWdodCAmIDB4M2ZmZmZmZjtcbiAgICBjYXJyeSA9ICh3ID4+IDI2KSAtICgocmlnaHQgLyAweDQwMDAwMDApIHwgMCk7XG4gICAgdGhpcy53b3Jkc1tpICsgc2hpZnRdID0gdyAmIDB4M2ZmZmZmZjtcbiAgfVxuICBmb3IgKDsgaSA8IHRoaXMubGVuZ3RoIC0gc2hpZnQ7IGkrKykge1xuICAgIHZhciB3ID0gdGhpcy53b3Jkc1tpICsgc2hpZnRdICsgY2Fycnk7XG4gICAgY2FycnkgPSB3ID4+IDI2O1xuICAgIHRoaXMud29yZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7XG4gIH1cblxuICBpZiAoY2FycnkgPT09IDApXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcblxuICAvLyBTdWJ0cmFjdGlvbiBvdmVyZmxvd1xuICBhc3NlcnQoY2FycnkgPT09IC0xKTtcbiAgY2FycnkgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdyA9IC10aGlzLndvcmRzW2ldICsgY2Fycnk7XG4gICAgY2FycnkgPSB3ID4+IDI2O1xuICAgIHRoaXMud29yZHNbaV0gPSB3ICYgMHgzZmZmZmZmO1xuICB9XG4gIHRoaXMuc2lnbiA9IHRydWU7XG5cbiAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbn07XG5cbkJOLnByb3RvdHlwZS5fd29yZERpdiA9IGZ1bmN0aW9uIF93b3JkRGl2KG51bSwgbW9kZSkge1xuICB2YXIgc2hpZnQgPSB0aGlzLmxlbmd0aCAtIG51bS5sZW5ndGg7XG5cbiAgdmFyIGEgPSB0aGlzLmNsb25lKCk7XG4gIHZhciBiID0gbnVtO1xuXG4gIC8vIE5vcm1hbGl6ZVxuICB2YXIgYmhpID0gYi53b3Jkc1tiLmxlbmd0aCAtIDFdO1xuICB2YXIgYmhpQml0cyA9IHRoaXMuX2NvdW50Qml0cyhiaGkpO1xuICBzaGlmdCA9IDI2IC0gYmhpQml0cztcbiAgaWYgKHNoaWZ0ICE9PSAwKSB7XG4gICAgYiA9IGIuc2hsbihzaGlmdCk7XG4gICAgYS5pc2hsbihzaGlmdCk7XG4gICAgYmhpID0gYi53b3Jkc1tiLmxlbmd0aCAtIDFdO1xuICB9XG5cbiAgLy8gSW5pdGlhbGl6ZSBxdW90aWVudFxuICB2YXIgbSA9IGEubGVuZ3RoIC0gYi5sZW5ndGg7XG4gIHZhciBxO1xuXG4gIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgIHEgPSBuZXcgQk4obnVsbCk7XG4gICAgcS5sZW5ndGggPSBtICsgMTtcbiAgICBxLndvcmRzID0gbmV3IEFycmF5KHEubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHEubGVuZ3RoOyBpKyspXG4gICAgICBxLndvcmRzW2ldID0gMDtcbiAgfVxuXG4gIHZhciBkaWZmID0gYS5jbG9uZSgpLl9pc2hsbnN1Ym11bChiLCAxLCBtKTtcbiAgaWYgKCFkaWZmLnNpZ24pIHtcbiAgICBhID0gZGlmZjtcbiAgICBpZiAocSlcbiAgICAgIHEud29yZHNbbV0gPSAxO1xuICB9XG5cbiAgZm9yICh2YXIgaiA9IG0gLSAxOyBqID49IDA7IGotLSkge1xuICAgIHZhciBxaiA9IGEud29yZHNbYi5sZW5ndGggKyBqXSAqIDB4NDAwMDAwMCArIGEud29yZHNbYi5sZW5ndGggKyBqIC0gMV07XG5cbiAgICAvLyBOT1RFOiAocWogLyBiaGkpIGlzICgweDNmZmZmZmYgKiAweDQwMDAwMDAgKyAweDNmZmZmZmYpIC8gMHgyMDAwMDAwIG1heFxuICAgIC8vICgweDdmZmZmZmYpXG4gICAgcWogPSBNYXRoLm1pbigocWogLyBiaGkpIHwgMCwgMHgzZmZmZmZmKTtcblxuICAgIGEuX2lzaGxuc3VibXVsKGIsIHFqLCBqKTtcbiAgICB3aGlsZSAoYS5zaWduKSB7XG4gICAgICBxai0tO1xuICAgICAgYS5zaWduID0gZmFsc2U7XG4gICAgICBhLl9pc2hsbnN1Ym11bChiLCAxLCBqKTtcbiAgICAgIGlmIChhLmNtcG4oMCkgIT09IDApXG4gICAgICAgIGEuc2lnbiA9ICFhLnNpZ247XG4gICAgfVxuICAgIGlmIChxKVxuICAgICAgcS53b3Jkc1tqXSA9IHFqO1xuICB9XG4gIGlmIChxKVxuICAgIHEuc3RyaXAoKTtcbiAgYS5zdHJpcCgpO1xuXG4gIC8vIERlbm9ybWFsaXplXG4gIGlmIChtb2RlICE9PSAnZGl2JyAmJiBzaGlmdCAhPT0gMClcbiAgICBhLmlzaHJuKHNoaWZ0KTtcbiAgcmV0dXJuIHsgZGl2OiBxID8gcSA6IG51bGwsIG1vZDogYSB9O1xufTtcblxuQk4ucHJvdG90eXBlLmRpdm1vZCA9IGZ1bmN0aW9uIGRpdm1vZChudW0sIG1vZGUpIHtcbiAgYXNzZXJ0KG51bS5jbXBuKDApICE9PSAwKTtcblxuICBpZiAodGhpcy5zaWduICYmICFudW0uc2lnbikge1xuICAgIHZhciByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0sIG1vZGUpO1xuICAgIHZhciBkaXY7XG4gICAgdmFyIG1vZDtcbiAgICBpZiAobW9kZSAhPT0gJ21vZCcpXG4gICAgICBkaXYgPSByZXMuZGl2Lm5lZygpO1xuICAgIGlmIChtb2RlICE9PSAnZGl2JylcbiAgICAgIG1vZCA9IHJlcy5tb2QuY21wbigwKSA9PT0gMCA/IHJlcy5tb2QgOiBudW0uc3ViKHJlcy5tb2QpO1xuICAgIHJldHVybiB7XG4gICAgICBkaXY6IGRpdixcbiAgICAgIG1vZDogbW9kXG4gICAgfTtcbiAgfSBlbHNlIGlmICghdGhpcy5zaWduICYmIG51bS5zaWduKSB7XG4gICAgdmFyIHJlcyA9IHRoaXMuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG4gICAgdmFyIGRpdjtcbiAgICBpZiAobW9kZSAhPT0gJ21vZCcpXG4gICAgICBkaXYgPSByZXMuZGl2Lm5lZygpO1xuICAgIHJldHVybiB7IGRpdjogZGl2LCBtb2Q6IHJlcy5tb2QgfTtcbiAgfSBlbHNlIGlmICh0aGlzLnNpZ24gJiYgbnVtLnNpZ24pIHtcbiAgICByZXR1cm4gdGhpcy5uZWcoKS5kaXZtb2QobnVtLm5lZygpLCBtb2RlKTtcbiAgfVxuXG4gIC8vIEJvdGggbnVtYmVycyBhcmUgcG9zaXRpdmUgYXQgdGhpcyBwb2ludFxuXG4gIC8vIFN0cmlwIGJvdGggbnVtYmVycyB0byBhcHByb3hpbWF0ZSBzaGlmdCB2YWx1ZVxuICBpZiAobnVtLmxlbmd0aCA+IHRoaXMubGVuZ3RoIHx8IHRoaXMuY21wKG51bSkgPCAwKVxuICAgIHJldHVybiB7IGRpdjogbmV3IEJOKDApLCBtb2Q6IHRoaXMgfTtcblxuICAvLyBWZXJ5IHNob3J0IHJlZHVjdGlvblxuICBpZiAobnVtLmxlbmd0aCA9PT0gMSkge1xuICAgIGlmIChtb2RlID09PSAnZGl2JylcbiAgICAgIHJldHVybiB7IGRpdjogdGhpcy5kaXZuKG51bS53b3Jkc1swXSksIG1vZDogbnVsbCB9O1xuICAgIGVsc2UgaWYgKG1vZGUgPT09ICdtb2QnKVxuICAgICAgcmV0dXJuIHsgZGl2OiBudWxsLCBtb2Q6IG5ldyBCTih0aGlzLm1vZG4obnVtLndvcmRzWzBdKSkgfTtcbiAgICByZXR1cm4ge1xuICAgICAgZGl2OiB0aGlzLmRpdm4obnVtLndvcmRzWzBdKSxcbiAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gdGhpcy5fd29yZERpdihudW0sIG1vZGUpO1xufTtcblxuLy8gRmluZCBgdGhpc2AgLyBgbnVtYFxuQk4ucHJvdG90eXBlLmRpdiA9IGZ1bmN0aW9uIGRpdihudW0pIHtcbiAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ2RpdicpLmRpdjtcbn07XG5cbi8vIEZpbmQgYHRoaXNgICUgYG51bWBcbkJOLnByb3RvdHlwZS5tb2QgPSBmdW5jdGlvbiBtb2QobnVtKSB7XG4gIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdtb2QnKS5tb2Q7XG59O1xuXG4vLyBGaW5kIFJvdW5kKGB0aGlzYCAvIGBudW1gKVxuQk4ucHJvdG90eXBlLmRpdlJvdW5kID0gZnVuY3Rpb24gZGl2Um91bmQobnVtKSB7XG4gIHZhciBkbSA9IHRoaXMuZGl2bW9kKG51bSk7XG5cbiAgLy8gRmFzdCBjYXNlIC0gZXhhY3QgZGl2aXNpb25cbiAgaWYgKGRtLm1vZC5jbXBuKDApID09PSAwKVxuICAgIHJldHVybiBkbS5kaXY7XG5cbiAgdmFyIG1vZCA9IGRtLmRpdi5zaWduID8gZG0ubW9kLmlzdWIobnVtKSA6IGRtLm1vZDtcblxuICB2YXIgaGFsZiA9IG51bS5zaHJuKDEpO1xuICB2YXIgcjIgPSBudW0uYW5kbG4oMSk7XG4gIHZhciBjbXAgPSBtb2QuY21wKGhhbGYpO1xuXG4gIC8vIFJvdW5kIGRvd25cbiAgaWYgKGNtcCA8IDAgfHwgcjIgPT09IDEgJiYgY21wID09PSAwKVxuICAgIHJldHVybiBkbS5kaXY7XG5cbiAgLy8gUm91bmQgdXBcbiAgcmV0dXJuIGRtLmRpdi5zaWduID8gZG0uZGl2LmlzdWJuKDEpIDogZG0uZGl2LmlhZGRuKDEpO1xufTtcblxuQk4ucHJvdG90eXBlLm1vZG4gPSBmdW5jdGlvbiBtb2RuKG51bSkge1xuICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG4gIHZhciBwID0gKDEgPDwgMjYpICUgbnVtO1xuXG4gIHZhciBhY2MgPSAwO1xuICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSlcbiAgICBhY2MgPSAocCAqIGFjYyArIHRoaXMud29yZHNbaV0pICUgbnVtO1xuXG4gIHJldHVybiBhY2M7XG59O1xuXG4vLyBJbi1wbGFjZSBkaXZpc2lvbiBieSBudW1iZXJcbkJOLnByb3RvdHlwZS5pZGl2biA9IGZ1bmN0aW9uIGlkaXZuKG51bSkge1xuICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG5cbiAgdmFyIGNhcnJ5ID0gMDtcbiAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgdyA9IHRoaXMud29yZHNbaV0gKyBjYXJyeSAqIDB4NDAwMDAwMDtcbiAgICB0aGlzLndvcmRzW2ldID0gKHcgLyBudW0pIHwgMDtcbiAgICBjYXJyeSA9IHcgJSBudW07XG4gIH1cblxuICByZXR1cm4gdGhpcy5zdHJpcCgpO1xufTtcblxuQk4ucHJvdG90eXBlLmRpdm4gPSBmdW5jdGlvbiBkaXZuKG51bSkge1xuICByZXR1cm4gdGhpcy5jbG9uZSgpLmlkaXZuKG51bSk7XG59O1xuXG5CTi5wcm90b3R5cGUuZWdjZCA9IGZ1bmN0aW9uIGVnY2QocCkge1xuICBhc3NlcnQoIXAuc2lnbik7XG4gIGFzc2VydChwLmNtcG4oMCkgIT09IDApO1xuXG4gIHZhciB4ID0gdGhpcztcbiAgdmFyIHkgPSBwLmNsb25lKCk7XG5cbiAgaWYgKHguc2lnbilcbiAgICB4ID0geC5tb2QocCk7XG4gIGVsc2VcbiAgICB4ID0geC5jbG9uZSgpO1xuXG4gIC8vIEEgKiB4ICsgQiAqIHkgPSB4XG4gIHZhciBBID0gbmV3IEJOKDEpO1xuICB2YXIgQiA9IG5ldyBCTigwKTtcblxuICAvLyBDICogeCArIEQgKiB5ID0geVxuICB2YXIgQyA9IG5ldyBCTigwKTtcbiAgdmFyIEQgPSBuZXcgQk4oMSk7XG5cbiAgdmFyIGcgPSAwO1xuXG4gIHdoaWxlICh4LmlzRXZlbigpICYmIHkuaXNFdmVuKCkpIHtcbiAgICB4LmlzaHJuKDEpO1xuICAgIHkuaXNocm4oMSk7XG4gICAgKytnO1xuICB9XG5cbiAgdmFyIHlwID0geS5jbG9uZSgpO1xuICB2YXIgeHAgPSB4LmNsb25lKCk7XG5cbiAgd2hpbGUgKHguY21wbigwKSAhPT0gMCkge1xuICAgIHdoaWxlICh4LmlzRXZlbigpKSB7XG4gICAgICB4LmlzaHJuKDEpO1xuICAgICAgaWYgKEEuaXNFdmVuKCkgJiYgQi5pc0V2ZW4oKSkge1xuICAgICAgICBBLmlzaHJuKDEpO1xuICAgICAgICBCLmlzaHJuKDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgQS5pYWRkKHlwKS5pc2hybigxKTtcbiAgICAgICAgQi5pc3ViKHhwKS5pc2hybigxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB3aGlsZSAoeS5pc0V2ZW4oKSkge1xuICAgICAgeS5pc2hybigxKTtcbiAgICAgIGlmIChDLmlzRXZlbigpICYmIEQuaXNFdmVuKCkpIHtcbiAgICAgICAgQy5pc2hybigxKTtcbiAgICAgICAgRC5pc2hybigxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIEMuaWFkZCh5cCkuaXNocm4oMSk7XG4gICAgICAgIEQuaXN1Yih4cCkuaXNocm4oMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHguY21wKHkpID49IDApIHtcbiAgICAgIHguaXN1Yih5KTtcbiAgICAgIEEuaXN1YihDKTtcbiAgICAgIEIuaXN1YihEKTtcbiAgICB9IGVsc2Uge1xuICAgICAgeS5pc3ViKHgpO1xuICAgICAgQy5pc3ViKEEpO1xuICAgICAgRC5pc3ViKEIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgYTogQyxcbiAgICBiOiBELFxuICAgIGdjZDogeS5pc2hsbihnKVxuICB9O1xufTtcblxuLy8gVGhpcyBpcyByZWR1Y2VkIGluY2FybmF0aW9uIG9mIHRoZSBiaW5hcnkgRUVBXG4vLyBhYm92ZSwgZGVzaWduYXRlZCB0byBpbnZlcnQgbWVtYmVycyBvZiB0aGVcbi8vIF9wcmltZV8gZmllbGRzIEYocCkgYXQgYSBtYXhpbWFsIHNwZWVkXG5CTi5wcm90b3R5cGUuX2ludm1wID0gZnVuY3Rpb24gX2ludm1wKHApIHtcbiAgYXNzZXJ0KCFwLnNpZ24pO1xuICBhc3NlcnQocC5jbXBuKDApICE9PSAwKTtcblxuICB2YXIgYSA9IHRoaXM7XG4gIHZhciBiID0gcC5jbG9uZSgpO1xuXG4gIGlmIChhLnNpZ24pXG4gICAgYSA9IGEubW9kKHApO1xuICBlbHNlXG4gICAgYSA9IGEuY2xvbmUoKTtcblxuICB2YXIgeDEgPSBuZXcgQk4oMSk7XG4gIHZhciB4MiA9IG5ldyBCTigwKTtcblxuICB2YXIgZGVsdGEgPSBiLmNsb25lKCk7XG5cbiAgd2hpbGUgKGEuY21wbigxKSA+IDAgJiYgYi5jbXBuKDEpID4gMCkge1xuICAgIHdoaWxlIChhLmlzRXZlbigpKSB7XG4gICAgICBhLmlzaHJuKDEpO1xuICAgICAgaWYgKHgxLmlzRXZlbigpKVxuICAgICAgICB4MS5pc2hybigxKTtcbiAgICAgIGVsc2VcbiAgICAgICAgeDEuaWFkZChkZWx0YSkuaXNocm4oMSk7XG4gICAgfVxuICAgIHdoaWxlIChiLmlzRXZlbigpKSB7XG4gICAgICBiLmlzaHJuKDEpO1xuICAgICAgaWYgKHgyLmlzRXZlbigpKVxuICAgICAgICB4Mi5pc2hybigxKTtcbiAgICAgIGVsc2VcbiAgICAgICAgeDIuaWFkZChkZWx0YSkuaXNocm4oMSk7XG4gICAgfVxuICAgIGlmIChhLmNtcChiKSA+PSAwKSB7XG4gICAgICBhLmlzdWIoYik7XG4gICAgICB4MS5pc3ViKHgyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYi5pc3ViKGEpO1xuICAgICAgeDIuaXN1Yih4MSk7XG4gICAgfVxuICB9XG4gIGlmIChhLmNtcG4oMSkgPT09IDApXG4gICAgcmV0dXJuIHgxO1xuICBlbHNlXG4gICAgcmV0dXJuIHgyO1xufTtcblxuQk4ucHJvdG90eXBlLmdjZCA9IGZ1bmN0aW9uIGdjZChudW0pIHtcbiAgaWYgKHRoaXMuY21wbigwKSA9PT0gMClcbiAgICByZXR1cm4gbnVtLmNsb25lKCk7XG4gIGlmIChudW0uY21wbigwKSA9PT0gMClcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xuXG4gIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICB2YXIgYiA9IG51bS5jbG9uZSgpO1xuICBhLnNpZ24gPSBmYWxzZTtcbiAgYi5zaWduID0gZmFsc2U7XG5cbiAgLy8gUmVtb3ZlIGNvbW1vbiBmYWN0b3Igb2YgdHdvXG4gIGZvciAodmFyIHNoaWZ0ID0gMDsgYS5pc0V2ZW4oKSAmJiBiLmlzRXZlbigpOyBzaGlmdCsrKSB7XG4gICAgYS5pc2hybigxKTtcbiAgICBiLmlzaHJuKDEpO1xuICB9XG5cbiAgZG8ge1xuICAgIHdoaWxlIChhLmlzRXZlbigpKVxuICAgICAgYS5pc2hybigxKTtcbiAgICB3aGlsZSAoYi5pc0V2ZW4oKSlcbiAgICAgIGIuaXNocm4oMSk7XG5cbiAgICB2YXIgciA9IGEuY21wKGIpO1xuICAgIGlmIChyIDwgMCkge1xuICAgICAgLy8gU3dhcCBgYWAgYW5kIGBiYCB0byBtYWtlIGBhYCBhbHdheXMgYmlnZ2VyIHRoYW4gYGJgXG4gICAgICB2YXIgdCA9IGE7XG4gICAgICBhID0gYjtcbiAgICAgIGIgPSB0O1xuICAgIH0gZWxzZSBpZiAociA9PT0gMCB8fCBiLmNtcG4oMSkgPT09IDApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGEuaXN1YihiKTtcbiAgfSB3aGlsZSAodHJ1ZSk7XG5cbiAgcmV0dXJuIGIuaXNobG4oc2hpZnQpO1xufTtcblxuLy8gSW52ZXJ0IG51bWJlciBpbiB0aGUgZmllbGQgRihudW0pXG5CTi5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0obnVtKSB7XG4gIHJldHVybiB0aGlzLmVnY2QobnVtKS5hLm1vZChudW0pO1xufTtcblxuQk4ucHJvdG90eXBlLmlzRXZlbiA9IGZ1bmN0aW9uIGlzRXZlbigpIHtcbiAgcmV0dXJuICh0aGlzLndvcmRzWzBdICYgMSkgPT09IDA7XG59O1xuXG5CTi5wcm90b3R5cGUuaXNPZGQgPSBmdW5jdGlvbiBpc09kZCgpIHtcbiAgcmV0dXJuICh0aGlzLndvcmRzWzBdICYgMSkgPT09IDE7XG59O1xuXG4vLyBBbmQgZmlyc3Qgd29yZCBhbmQgbnVtXG5CTi5wcm90b3R5cGUuYW5kbG4gPSBmdW5jdGlvbiBhbmRsbihudW0pIHtcbiAgcmV0dXJuIHRoaXMud29yZHNbMF0gJiBudW07XG59O1xuXG4vLyBJbmNyZW1lbnQgYXQgdGhlIGJpdCBwb3NpdGlvbiBpbi1saW5lXG5CTi5wcm90b3R5cGUuYmluY24gPSBmdW5jdGlvbiBiaW5jbihiaXQpIHtcbiAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInKTtcbiAgdmFyIHIgPSBiaXQgJSAyNjtcbiAgdmFyIHMgPSAoYml0IC0gcikgLyAyNjtcbiAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgLy8gRmFzdCBjYXNlOiBiaXQgaXMgbXVjaCBoaWdoZXIgdGhhbiBhbGwgZXhpc3Rpbmcgd29yZHNcbiAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGg7IGkgPCBzICsgMTsgaSsrKVxuICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgdGhpcy53b3Jkc1tzXSB8PSBxO1xuICAgIHRoaXMubGVuZ3RoID0gcyArIDE7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBBZGQgYml0IGFuZCBwcm9wYWdhdGUsIGlmIG5lZWRlZFxuICB2YXIgY2FycnkgPSBxO1xuICBmb3IgKHZhciBpID0gczsgY2FycnkgIT09IDAgJiYgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdyA9IHRoaXMud29yZHNbaV07XG4gICAgdyArPSBjYXJyeTtcbiAgICBjYXJyeSA9IHcgPj4+IDI2O1xuICAgIHcgJj0gMHgzZmZmZmZmO1xuICAgIHRoaXMud29yZHNbaV0gPSB3O1xuICB9XG4gIGlmIChjYXJyeSAhPT0gMCkge1xuICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICB0aGlzLmxlbmd0aCsrO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuQk4ucHJvdG90eXBlLmNtcG4gPSBmdW5jdGlvbiBjbXBuKG51bSkge1xuICB2YXIgc2lnbiA9IG51bSA8IDA7XG4gIGlmIChzaWduKVxuICAgIG51bSA9IC1udW07XG5cbiAgaWYgKHRoaXMuc2lnbiAmJiAhc2lnbilcbiAgICByZXR1cm4gLTE7XG4gIGVsc2UgaWYgKCF0aGlzLnNpZ24gJiYgc2lnbilcbiAgICByZXR1cm4gMTtcblxuICBudW0gJj0gMHgzZmZmZmZmO1xuICB0aGlzLnN0cmlwKCk7XG5cbiAgdmFyIHJlcztcbiAgaWYgKHRoaXMubGVuZ3RoID4gMSkge1xuICAgIHJlcyA9IDE7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHcgPSB0aGlzLndvcmRzWzBdO1xuICAgIHJlcyA9IHcgPT09IG51bSA/IDAgOiB3IDwgbnVtID8gLTEgOiAxO1xuICB9XG4gIGlmICh0aGlzLnNpZ24pXG4gICAgcmVzID0gLXJlcztcbiAgcmV0dXJuIHJlcztcbn07XG5cbi8vIENvbXBhcmUgdHdvIG51bWJlcnMgYW5kIHJldHVybjpcbi8vIDEgLSBpZiBgdGhpc2AgPiBgbnVtYFxuLy8gMCAtIGlmIGB0aGlzYCA9PSBgbnVtYFxuLy8gLTEgLSBpZiBgdGhpc2AgPCBgbnVtYFxuQk4ucHJvdG90eXBlLmNtcCA9IGZ1bmN0aW9uIGNtcChudW0pIHtcbiAgaWYgKHRoaXMuc2lnbiAmJiAhbnVtLnNpZ24pXG4gICAgcmV0dXJuIC0xO1xuICBlbHNlIGlmICghdGhpcy5zaWduICYmIG51bS5zaWduKVxuICAgIHJldHVybiAxO1xuXG4gIHZhciByZXMgPSB0aGlzLnVjbXAobnVtKTtcbiAgaWYgKHRoaXMuc2lnbilcbiAgICByZXR1cm4gLXJlcztcbiAgZWxzZVxuICAgIHJldHVybiByZXM7XG59O1xuXG4vLyBVbnNpZ25lZCBjb21wYXJpc29uXG5CTi5wcm90b3R5cGUudWNtcCA9IGZ1bmN0aW9uIHVjbXAobnVtKSB7XG4gIC8vIEF0IHRoaXMgcG9pbnQgYm90aCBudW1iZXJzIGhhdmUgdGhlIHNhbWUgc2lnblxuICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKVxuICAgIHJldHVybiAxO1xuICBlbHNlIGlmICh0aGlzLmxlbmd0aCA8IG51bS5sZW5ndGgpXG4gICAgcmV0dXJuIC0xO1xuXG4gIHZhciByZXMgPSAwO1xuICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciBhID0gdGhpcy53b3Jkc1tpXTtcbiAgICB2YXIgYiA9IG51bS53b3Jkc1tpXTtcblxuICAgIGlmIChhID09PSBiKVxuICAgICAgY29udGludWU7XG4gICAgaWYgKGEgPCBiKVxuICAgICAgcmVzID0gLTE7XG4gICAgZWxzZSBpZiAoYSA+IGIpXG4gICAgICByZXMgPSAxO1xuICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiByZXM7XG59O1xuXG4vL1xuLy8gQSByZWR1Y2UgY29udGV4dCwgY291bGQgYmUgdXNpbmcgbW9udGdvbWVyeSBvciBzb21ldGhpbmcgYmV0dGVyLCBkZXBlbmRpbmdcbi8vIG9uIHRoZSBgbWAgaXRzZWxmLlxuLy9cbkJOLnJlZCA9IGZ1bmN0aW9uIHJlZChudW0pIHtcbiAgcmV0dXJuIG5ldyBSZWQobnVtKTtcbn07XG5cbkJOLnByb3RvdHlwZS50b1JlZCA9IGZ1bmN0aW9uIHRvUmVkKGN0eCkge1xuICBhc3NlcnQoIXRoaXMucmVkLCAnQWxyZWFkeSBhIG51bWJlciBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICBhc3NlcnQoIXRoaXMuc2lnbiwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gIHJldHVybiBjdHguY29udmVydFRvKHRoaXMpLl9mb3JjZVJlZChjdHgpO1xufTtcblxuQk4ucHJvdG90eXBlLmZyb21SZWQgPSBmdW5jdGlvbiBmcm9tUmVkKCkge1xuICBhc3NlcnQodGhpcy5yZWQsICdmcm9tUmVkIHdvcmtzIG9ubHkgd2l0aCBudW1iZXJzIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gIHJldHVybiB0aGlzLnJlZC5jb252ZXJ0RnJvbSh0aGlzKTtcbn07XG5cbkJOLnByb3RvdHlwZS5fZm9yY2VSZWQgPSBmdW5jdGlvbiBfZm9yY2VSZWQoY3R4KSB7XG4gIHRoaXMucmVkID0gY3R4O1xuICByZXR1cm4gdGhpcztcbn07XG5cbkJOLnByb3RvdHlwZS5mb3JjZVJlZCA9IGZ1bmN0aW9uIGZvcmNlUmVkKGN0eCkge1xuICBhc3NlcnQoIXRoaXMucmVkLCAnQWxyZWFkeSBhIG51bWJlciBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICByZXR1cm4gdGhpcy5fZm9yY2VSZWQoY3R4KTtcbn07XG5cbkJOLnByb3RvdHlwZS5yZWRBZGQgPSBmdW5jdGlvbiByZWRBZGQobnVtKSB7XG4gIGFzc2VydCh0aGlzLnJlZCwgJ3JlZEFkZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgcmV0dXJuIHRoaXMucmVkLmFkZCh0aGlzLCBudW0pO1xufTtcblxuQk4ucHJvdG90eXBlLnJlZElBZGQgPSBmdW5jdGlvbiByZWRJQWRkKG51bSkge1xuICBhc3NlcnQodGhpcy5yZWQsICdyZWRJQWRkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICByZXR1cm4gdGhpcy5yZWQuaWFkZCh0aGlzLCBudW0pO1xufTtcblxuQk4ucHJvdG90eXBlLnJlZFN1YiA9IGZ1bmN0aW9uIHJlZFN1YihudW0pIHtcbiAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3ViIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICByZXR1cm4gdGhpcy5yZWQuc3ViKHRoaXMsIG51bSk7XG59O1xuXG5CTi5wcm90b3R5cGUucmVkSVN1YiA9IGZ1bmN0aW9uIHJlZElTdWIobnVtKSB7XG4gIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIHJldHVybiB0aGlzLnJlZC5pc3ViKHRoaXMsIG51bSk7XG59O1xuXG5CTi5wcm90b3R5cGUucmVkU2hsID0gZnVuY3Rpb24gcmVkU2hsKG51bSkge1xuICBhc3NlcnQodGhpcy5yZWQsICdyZWRTaGwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIHJldHVybiB0aGlzLnJlZC5zaGwodGhpcywgbnVtKTtcbn07XG5cbkJOLnByb3RvdHlwZS5yZWRNdWwgPSBmdW5jdGlvbiByZWRNdWwobnVtKSB7XG4gIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE11bCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgcmV0dXJuIHRoaXMucmVkLm11bCh0aGlzLCBudW0pO1xufTtcblxuQk4ucHJvdG90eXBlLnJlZElNdWwgPSBmdW5jdGlvbiByZWRJTXVsKG51bSkge1xuICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gIHJldHVybiB0aGlzLnJlZC5pbXVsKHRoaXMsIG51bSk7XG59O1xuXG5CTi5wcm90b3R5cGUucmVkU3FyID0gZnVuY3Rpb24gcmVkU3FyKCkge1xuICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICByZXR1cm4gdGhpcy5yZWQuc3FyKHRoaXMpO1xufTtcblxuQk4ucHJvdG90eXBlLnJlZElTcXIgPSBmdW5jdGlvbiByZWRJU3FyKCkge1xuICBhc3NlcnQodGhpcy5yZWQsICdyZWRJU3FyIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgcmV0dXJuIHRoaXMucmVkLmlzcXIodGhpcyk7XG59O1xuXG4vLyBTcXVhcmUgcm9vdCBvdmVyIHBcbkJOLnByb3RvdHlwZS5yZWRTcXJ0ID0gZnVuY3Rpb24gcmVkU3FydCgpIHtcbiAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3FydCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gIHJldHVybiB0aGlzLnJlZC5zcXJ0KHRoaXMpO1xufTtcblxuQk4ucHJvdG90eXBlLnJlZEludm0gPSBmdW5jdGlvbiByZWRJbnZtKCkge1xuICBhc3NlcnQodGhpcy5yZWQsICdyZWRJbnZtIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgcmV0dXJuIHRoaXMucmVkLmludm0odGhpcyk7XG59O1xuXG4vLyBSZXR1cm4gbmVnYXRpdmUgY2xvbmUgb2YgYHRoaXNgICUgYHJlZCBtb2R1bG9gXG5CTi5wcm90b3R5cGUucmVkTmVnID0gZnVuY3Rpb24gcmVkTmVnKCkge1xuICBhc3NlcnQodGhpcy5yZWQsICdyZWROZWcgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICByZXR1cm4gdGhpcy5yZWQubmVnKHRoaXMpO1xufTtcblxuQk4ucHJvdG90eXBlLnJlZFBvdyA9IGZ1bmN0aW9uIHJlZFBvdyhudW0pIHtcbiAgYXNzZXJ0KHRoaXMucmVkICYmICFudW0ucmVkLCAncmVkUG93KG5vcm1hbE51bSknKTtcbiAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gIHJldHVybiB0aGlzLnJlZC5wb3codGhpcywgbnVtKTtcbn07XG5cbi8vIFByaW1lIG51bWJlcnMgd2l0aCBlZmZpY2llbnQgcmVkdWN0aW9uXG52YXIgcHJpbWVzID0ge1xuICBrMjU2OiBudWxsLFxuICBwMjI0OiBudWxsLFxuICBwMTkyOiBudWxsLFxuICBwMjU1MTk6IG51bGxcbn07XG5cbi8vIFBzZXVkby1NZXJzZW5uZSBwcmltZVxuZnVuY3Rpb24gTVByaW1lKG5hbWUsIHApIHtcbiAgLy8gUCA9IDIgXiBOIC0gS1xuICB0aGlzLm5hbWUgPSBuYW1lO1xuICB0aGlzLnAgPSBuZXcgQk4ocCwgMTYpO1xuICB0aGlzLm4gPSB0aGlzLnAuYml0TGVuZ3RoKCk7XG4gIHRoaXMuayA9IG5ldyBCTigxKS5pc2hsbih0aGlzLm4pLmlzdWIodGhpcy5wKTtcblxuICB0aGlzLnRtcCA9IHRoaXMuX3RtcCgpO1xufVxuXG5NUHJpbWUucHJvdG90eXBlLl90bXAgPSBmdW5jdGlvbiBfdG1wKCkge1xuICB2YXIgdG1wID0gbmV3IEJOKG51bGwpO1xuICB0bXAud29yZHMgPSBuZXcgQXJyYXkoTWF0aC5jZWlsKHRoaXMubiAvIDEzKSk7XG4gIHJldHVybiB0bXA7XG59O1xuXG5NUHJpbWUucHJvdG90eXBlLmlyZWR1Y2UgPSBmdW5jdGlvbiBpcmVkdWNlKG51bSkge1xuICAvLyBBc3N1bWVzIHRoYXQgYG51bWAgaXMgbGVzcyB0aGFuIGBQXjJgXG4gIC8vIG51bSA9IEhJICogKDIgXiBOIC0gSykgKyBISSAqIEsgKyBMTyA9IEhJICogSyArIExPIChtb2QgUClcbiAgdmFyIHIgPSBudW07XG4gIHZhciBybGVuO1xuXG4gIGRvIHtcbiAgICB0aGlzLnNwbGl0KHIsIHRoaXMudG1wKTtcbiAgICByID0gdGhpcy5pbXVsSyhyKTtcbiAgICByID0gci5pYWRkKHRoaXMudG1wKTtcbiAgICBybGVuID0gci5iaXRMZW5ndGgoKTtcbiAgfSB3aGlsZSAocmxlbiA+IHRoaXMubik7XG5cbiAgdmFyIGNtcCA9IHJsZW4gPCB0aGlzLm4gPyAtMSA6IHIudWNtcCh0aGlzLnApO1xuICBpZiAoY21wID09PSAwKSB7XG4gICAgci53b3Jkc1swXSA9IDA7XG4gICAgci5sZW5ndGggPSAxO1xuICB9IGVsc2UgaWYgKGNtcCA+IDApIHtcbiAgICByLmlzdWIodGhpcy5wKTtcbiAgfSBlbHNlIHtcbiAgICByLnN0cmlwKCk7XG4gIH1cblxuICByZXR1cm4gcjtcbn07XG5cbk1QcmltZS5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdChpbnB1dCwgb3V0KSB7XG4gIGlucHV0LmlzaHJuKHRoaXMubiwgMCwgb3V0KTtcbn07XG5cbk1QcmltZS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyhudW0pIHtcbiAgcmV0dXJuIG51bS5pbXVsKHRoaXMuayk7XG59O1xuXG5mdW5jdGlvbiBLMjU2KCkge1xuICBNUHJpbWUuY2FsbChcbiAgICB0aGlzLFxuICAgICdrMjU2JyxcbiAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZjMmYnKTtcbn1cbmluaGVyaXRzKEsyNTYsIE1QcmltZSk7XG5cbksyNTYucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQoaW5wdXQsIG91dHB1dCkge1xuICAvLyAyNTYgPSA5ICogMjYgKyAyMlxuICB2YXIgbWFzayA9IDB4M2ZmZmZmO1xuXG4gIHZhciBvdXRMZW4gPSBNYXRoLm1pbihpbnB1dC5sZW5ndGgsIDkpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG91dExlbjsgaSsrKVxuICAgIG91dHB1dC53b3Jkc1tpXSA9IGlucHV0LndvcmRzW2ldO1xuICBvdXRwdXQubGVuZ3RoID0gb3V0TGVuO1xuXG4gIGlmIChpbnB1dC5sZW5ndGggPD0gOSkge1xuICAgIGlucHV0LndvcmRzWzBdID0gMDtcbiAgICBpbnB1dC5sZW5ndGggPSAxO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFNoaWZ0IGJ5IDkgbGltYnNcbiAgdmFyIHByZXYgPSBpbnB1dC53b3Jkc1s5XTtcbiAgb3V0cHV0LndvcmRzW291dHB1dC5sZW5ndGgrK10gPSBwcmV2ICYgbWFzaztcblxuICBmb3IgKHZhciBpID0gMTA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBuZXh0ID0gaW5wdXQud29yZHNbaV07XG4gICAgaW5wdXQud29yZHNbaSAtIDEwXSA9ICgobmV4dCAmIG1hc2spIDw8IDQpIHwgKHByZXYgPj4+IDIyKTtcbiAgICBwcmV2ID0gbmV4dDtcbiAgfVxuICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gcHJldiA+Pj4gMjI7XG4gIGlucHV0Lmxlbmd0aCAtPSA5O1xufTtcblxuSzI1Ni5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyhudW0pIHtcbiAgLy8gSyA9IDB4MTAwMDAwM2QxID0gWyAweDQwLCAweDNkMSBdXG4gIG51bS53b3Jkc1tudW0ubGVuZ3RoXSA9IDA7XG4gIG51bS53b3Jkc1tudW0ubGVuZ3RoICsgMV0gPSAwO1xuICBudW0ubGVuZ3RoICs9IDI7XG5cbiAgLy8gYm91bmRlZCBhdDogMHg0MCAqIDB4M2ZmZmZmZiArIDB4M2QwID0gMHgxMDAwMDAzOTBcbiAgdmFyIGhpO1xuICB2YXIgbG8gPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgIHZhciB3ID0gbnVtLndvcmRzW2ldO1xuICAgIGhpID0gdyAqIDB4NDA7XG4gICAgbG8gKz0gdyAqIDB4M2QxO1xuICAgIGhpICs9IChsbyAvIDB4NDAwMDAwMCkgfCAwO1xuICAgIGxvICY9IDB4M2ZmZmZmZjtcblxuICAgIG51bS53b3Jkc1tpXSA9IGxvO1xuXG4gICAgbG8gPSBoaTtcbiAgfVxuXG4gIC8vIEZhc3QgbGVuZ3RoIHJlZHVjdGlvblxuICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgIG51bS5sZW5ndGgtLTtcbiAgICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMClcbiAgICAgIG51bS5sZW5ndGgtLTtcbiAgfVxuICByZXR1cm4gbnVtO1xufTtcblxuZnVuY3Rpb24gUDIyNCgpIHtcbiAgTVByaW1lLmNhbGwoXG4gICAgdGhpcyxcbiAgICAncDIyNCcsXG4gICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAxJyk7XG59XG5pbmhlcml0cyhQMjI0LCBNUHJpbWUpO1xuXG5mdW5jdGlvbiBQMTkyKCkge1xuICBNUHJpbWUuY2FsbChcbiAgICB0aGlzLFxuICAgICdwMTkyJyxcbiAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYnKTtcbn1cbmluaGVyaXRzKFAxOTIsIE1QcmltZSk7XG5cbmZ1bmN0aW9uIFAyNTUxOSgpIHtcbiAgLy8gMiBeIDI1NSAtIDE5XG4gIE1QcmltZS5jYWxsKFxuICAgIHRoaXMsXG4gICAgJzI1NTE5JyxcbiAgICAnN2ZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZlZCcpO1xufVxuaW5oZXJpdHMoUDI1NTE5LCBNUHJpbWUpO1xuXG5QMjU1MTkucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsobnVtKSB7XG4gIC8vIEsgPSAweDEzXG4gIHZhciBjYXJyeSA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGhpID0gbnVtLndvcmRzW2ldICogMHgxMyArIGNhcnJ5O1xuICAgIHZhciBsbyA9IGhpICYgMHgzZmZmZmZmO1xuICAgIGhpID4+Pj0gMjY7XG5cbiAgICBudW0ud29yZHNbaV0gPSBsbztcbiAgICBjYXJyeSA9IGhpO1xuICB9XG4gIGlmIChjYXJyeSAhPT0gMClcbiAgICBudW0ud29yZHNbbnVtLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICByZXR1cm4gbnVtO1xufTtcblxuLy8gRXhwb3J0ZWQgbW9zdGx5IGZvciB0ZXN0aW5nIHB1cnBvc2VzLCB1c2UgcGxhaW4gbmFtZSBpbnN0ZWFkXG5CTi5fcHJpbWUgPSBmdW5jdGlvbiBwcmltZShuYW1lKSB7XG4gIC8vIENhY2hlZCB2ZXJzaW9uIG9mIHByaW1lXG4gIGlmIChwcmltZXNbbmFtZV0pXG4gICAgcmV0dXJuIHByaW1lc1tuYW1lXTtcblxuICB2YXIgcHJpbWU7XG4gIGlmIChuYW1lID09PSAnazI1NicpXG4gICAgcHJpbWUgPSBuZXcgSzI1NigpO1xuICBlbHNlIGlmIChuYW1lID09PSAncDIyNCcpXG4gICAgcHJpbWUgPSBuZXcgUDIyNCgpO1xuICBlbHNlIGlmIChuYW1lID09PSAncDE5MicpXG4gICAgcHJpbWUgPSBuZXcgUDE5MigpO1xuICBlbHNlIGlmIChuYW1lID09PSAncDI1NTE5JylcbiAgICBwcmltZSA9IG5ldyBQMjU1MTkoKTtcbiAgZWxzZVxuICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwcmltZSAnICsgbmFtZSk7XG4gIHByaW1lc1tuYW1lXSA9IHByaW1lO1xuXG4gIHJldHVybiBwcmltZTtcbn07XG5cbi8vXG4vLyBCYXNlIHJlZHVjdGlvbiBlbmdpbmVcbi8vXG5mdW5jdGlvbiBSZWQobSkge1xuICBpZiAodHlwZW9mIG0gPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHByaW1lID0gQk4uX3ByaW1lKG0pO1xuICAgIHRoaXMubSA9IHByaW1lLnA7XG4gICAgdGhpcy5wcmltZSA9IHByaW1lO1xuICB9IGVsc2Uge1xuICAgIHRoaXMubSA9IG07XG4gICAgdGhpcy5wcmltZSA9IG51bGw7XG4gIH1cbn1cblxuUmVkLnByb3RvdHlwZS5fdmVyaWZ5MSA9IGZ1bmN0aW9uIF92ZXJpZnkxKGEpIHtcbiAgYXNzZXJ0KCFhLnNpZ24sICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICBhc3NlcnQoYS5yZWQsICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG59O1xuXG5SZWQucHJvdG90eXBlLl92ZXJpZnkyID0gZnVuY3Rpb24gX3ZlcmlmeTIoYSwgYikge1xuICBhc3NlcnQoIWEuc2lnbiAmJiAhYi5zaWduLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgYXNzZXJ0KGEucmVkICYmIGEucmVkID09PSBiLnJlZCxcbiAgICAgICAgICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG59O1xuXG5SZWQucHJvdG90eXBlLmltb2QgPSBmdW5jdGlvbiBpbW9kKGEpIHtcbiAgaWYgKHRoaXMucHJpbWUpXG4gICAgcmV0dXJuIHRoaXMucHJpbWUuaXJlZHVjZShhKS5fZm9yY2VSZWQodGhpcyk7XG4gIHJldHVybiBhLm1vZCh0aGlzLm0pLl9mb3JjZVJlZCh0aGlzKTtcbn07XG5cblJlZC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnKGEpIHtcbiAgdmFyIHIgPSBhLmNsb25lKCk7XG4gIHIuc2lnbiA9ICFyLnNpZ247XG4gIHJldHVybiByLmlhZGQodGhpcy5tKS5fZm9yY2VSZWQodGhpcyk7XG59O1xuXG5SZWQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZChhLCBiKSB7XG4gIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgdmFyIHJlcyA9IGEuYWRkKGIpO1xuICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApXG4gICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG59O1xuXG5SZWQucHJvdG90eXBlLmlhZGQgPSBmdW5jdGlvbiBpYWRkKGEsIGIpIHtcbiAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICB2YXIgcmVzID0gYS5pYWRkKGIpO1xuICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApXG4gICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgcmV0dXJuIHJlcztcbn07XG5cblJlZC5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViKGEsIGIpIHtcbiAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICB2YXIgcmVzID0gYS5zdWIoYik7XG4gIGlmIChyZXMuY21wbigwKSA8IDApXG4gICAgcmVzLmlhZGQodGhpcy5tKTtcbiAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG59O1xuXG5SZWQucHJvdG90eXBlLmlzdWIgPSBmdW5jdGlvbiBpc3ViKGEsIGIpIHtcbiAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICB2YXIgcmVzID0gYS5pc3ViKGIpO1xuICBpZiAocmVzLmNtcG4oMCkgPCAwKVxuICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gIHJldHVybiByZXM7XG59O1xuXG5SZWQucHJvdG90eXBlLnNobCA9IGZ1bmN0aW9uIHNobChhLCBudW0pIHtcbiAgdGhpcy5fdmVyaWZ5MShhKTtcbiAgcmV0dXJuIHRoaXMuaW1vZChhLnNobG4obnVtKSk7XG59O1xuXG5SZWQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsKGEsIGIpIHtcbiAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcbiAgcmV0dXJuIHRoaXMuaW1vZChhLmltdWwoYikpO1xufTtcblxuUmVkLnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwoYSwgYikge1xuICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICByZXR1cm4gdGhpcy5pbW9kKGEubXVsKGIpKTtcbn07XG5cblJlZC5wcm90b3R5cGUuaXNxciA9IGZ1bmN0aW9uIGlzcXIoYSkge1xuICByZXR1cm4gdGhpcy5pbXVsKGEsIGEpO1xufTtcblxuUmVkLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIoYSkge1xuICByZXR1cm4gdGhpcy5tdWwoYSwgYSk7XG59O1xuXG5SZWQucHJvdG90eXBlLnNxcnQgPSBmdW5jdGlvbiBzcXJ0KGEpIHtcbiAgaWYgKGEuY21wbigwKSA9PT0gMClcbiAgICByZXR1cm4gYS5jbG9uZSgpO1xuXG4gIHZhciBtb2QzID0gdGhpcy5tLmFuZGxuKDMpO1xuICBhc3NlcnQobW9kMyAlIDIgPT09IDEpO1xuXG4gIC8vIEZhc3QgY2FzZVxuICBpZiAobW9kMyA9PT0gMykge1xuICAgIHZhciBwb3cgPSB0aGlzLm0uYWRkKG5ldyBCTigxKSkuaXNocm4oMik7XG4gICAgdmFyIHIgPSB0aGlzLnBvdyhhLCBwb3cpO1xuICAgIHJldHVybiByO1xuICB9XG5cbiAgLy8gVG9uZWxsaS1TaGFua3MgYWxnb3JpdGhtIChUb3RhbGx5IHVub3B0aW1pemVkIGFuZCBzbG93KVxuICAvL1xuICAvLyBGaW5kIFEgYW5kIFMsIHRoYXQgUSAqIDIgXiBTID0gKFAgLSAxKVxuICB2YXIgcSA9IHRoaXMubS5zdWJuKDEpO1xuICB2YXIgcyA9IDA7XG4gIHdoaWxlIChxLmNtcG4oMCkgIT09IDAgJiYgcS5hbmRsbigxKSA9PT0gMCkge1xuICAgIHMrKztcbiAgICBxLmlzaHJuKDEpO1xuICB9XG4gIGFzc2VydChxLmNtcG4oMCkgIT09IDApO1xuXG4gIHZhciBvbmUgPSBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gIHZhciBuT25lID0gb25lLnJlZE5lZygpO1xuXG4gIC8vIEZpbmQgcXVhZHJhdGljIG5vbi1yZXNpZHVlXG4gIC8vIE5PVEU6IE1heCBpcyBzdWNoIGJlY2F1c2Ugb2YgZ2VuZXJhbGl6ZWQgUmllbWFubiBoeXBvdGhlc2lzLlxuICB2YXIgbHBvdyA9IHRoaXMubS5zdWJuKDEpLmlzaHJuKDEpO1xuICB2YXIgeiA9IHRoaXMubS5iaXRMZW5ndGgoKTtcbiAgeiA9IG5ldyBCTigyICogeiAqIHopLnRvUmVkKHRoaXMpO1xuICB3aGlsZSAodGhpcy5wb3coeiwgbHBvdykuY21wKG5PbmUpICE9PSAwKVxuICAgIHoucmVkSUFkZChuT25lKTtcblxuICB2YXIgYyA9IHRoaXMucG93KHosIHEpO1xuICB2YXIgciA9IHRoaXMucG93KGEsIHEuYWRkbigxKS5pc2hybigxKSk7XG4gIHZhciB0ID0gdGhpcy5wb3coYSwgcSk7XG4gIHZhciBtID0gcztcbiAgd2hpbGUgKHQuY21wKG9uZSkgIT09IDApIHtcbiAgICB2YXIgdG1wID0gdDtcbiAgICBmb3IgKHZhciBpID0gMDsgdG1wLmNtcChvbmUpICE9PSAwOyBpKyspXG4gICAgICB0bXAgPSB0bXAucmVkU3FyKCk7XG4gICAgYXNzZXJ0KGkgPCBtKTtcbiAgICB2YXIgYiA9IHRoaXMucG93KGMsIG5ldyBCTigxKS5pc2hsbihtIC0gaSAtIDEpKTtcblxuICAgIHIgPSByLnJlZE11bChiKTtcbiAgICBjID0gYi5yZWRTcXIoKTtcbiAgICB0ID0gdC5yZWRNdWwoYyk7XG4gICAgbSA9IGk7XG4gIH1cblxuICByZXR1cm4gcjtcbn07XG5cblJlZC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0oYSkge1xuICB2YXIgaW52ID0gYS5faW52bXAodGhpcy5tKTtcbiAgaWYgKGludi5zaWduKSB7XG4gICAgaW52LnNpZ24gPSBmYWxzZTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGludikucmVkTmVnKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpO1xuICB9XG59O1xuXG5SZWQucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyhhLCBudW0pIHtcbiAgdmFyIHcgPSBbXTtcblxuICBpZiAobnVtLmNtcG4oMCkgPT09IDApXG4gICAgcmV0dXJuIG5ldyBCTigxKTtcblxuICB2YXIgcSA9IG51bS5jbG9uZSgpO1xuXG4gIHdoaWxlIChxLmNtcG4oMCkgIT09IDApIHtcbiAgICB3LnB1c2gocS5hbmRsbigxKSk7XG4gICAgcS5pc2hybigxKTtcbiAgfVxuXG4gIC8vIFNraXAgbGVhZGluZyB6ZXJvZXNcbiAgdmFyIHJlcyA9IGE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdy5sZW5ndGg7IGkrKywgcmVzID0gdGhpcy5zcXIocmVzKSlcbiAgICBpZiAod1tpXSAhPT0gMClcbiAgICAgIGJyZWFrO1xuXG4gIGlmICgrK2kgPCB3Lmxlbmd0aCkge1xuICAgIGZvciAodmFyIHEgPSB0aGlzLnNxcihyZXMpOyBpIDwgdy5sZW5ndGg7IGkrKywgcSA9IHRoaXMuc3FyKHEpKSB7XG4gICAgICBpZiAod1tpXSA9PT0gMClcbiAgICAgICAgY29udGludWU7XG4gICAgICByZXMgPSB0aGlzLm11bChyZXMsIHEpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXM7XG59O1xuXG5SZWQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyhudW0pIHtcbiAgdmFyIHIgPSBudW0ubW9kKHRoaXMubSk7XG4gIGlmIChyID09PSBudW0pXG4gICAgcmV0dXJuIHIuY2xvbmUoKTtcbiAgZWxzZVxuICAgIHJldHVybiByO1xufTtcblxuUmVkLnByb3RvdHlwZS5jb252ZXJ0RnJvbSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tKG51bSkge1xuICB2YXIgcmVzID0gbnVtLmNsb25lKCk7XG4gIHJlcy5yZWQgPSBudWxsO1xuICByZXR1cm4gcmVzO1xufTtcblxuLy9cbi8vIE1vbnRnb21lcnkgbWV0aG9kIGVuZ2luZVxuLy9cblxuQk4ubW9udCA9IGZ1bmN0aW9uIG1vbnQobnVtKSB7XG4gIHJldHVybiBuZXcgTW9udChudW0pO1xufTtcblxuZnVuY3Rpb24gTW9udChtKSB7XG4gIFJlZC5jYWxsKHRoaXMsIG0pO1xuXG4gIHRoaXMuc2hpZnQgPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gIGlmICh0aGlzLnNoaWZ0ICUgMjYgIT09IDApXG4gICAgdGhpcy5zaGlmdCArPSAyNiAtICh0aGlzLnNoaWZ0ICUgMjYpO1xuICB0aGlzLnIgPSBuZXcgQk4oMSkuaXNobG4odGhpcy5zaGlmdCk7XG4gIHRoaXMucjIgPSB0aGlzLmltb2QodGhpcy5yLnNxcigpKTtcbiAgdGhpcy5yaW52ID0gdGhpcy5yLl9pbnZtcCh0aGlzLm0pO1xuXG4gIHRoaXMubWludiA9IHRoaXMucmludi5tdWwodGhpcy5yKS5pc3VibigxKS5kaXYodGhpcy5tKTtcbiAgdGhpcy5taW52LnNpZ24gPSB0cnVlO1xuICB0aGlzLm1pbnYgPSB0aGlzLm1pbnYubW9kKHRoaXMucik7XG59XG5pbmhlcml0cyhNb250LCBSZWQpO1xuXG5Nb250LnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8obnVtKSB7XG4gIHJldHVybiB0aGlzLmltb2QobnVtLnNobG4odGhpcy5zaGlmdCkpO1xufTtcblxuTW9udC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbShudW0pIHtcbiAgdmFyIHIgPSB0aGlzLmltb2QobnVtLm11bCh0aGlzLnJpbnYpKTtcbiAgci5yZWQgPSBudWxsO1xuICByZXR1cm4gcjtcbn07XG5cbk1vbnQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsKGEsIGIpIHtcbiAgaWYgKGEuY21wbigwKSA9PT0gMCB8fCBiLmNtcG4oMCkgPT09IDApIHtcbiAgICBhLndvcmRzWzBdID0gMDtcbiAgICBhLmxlbmd0aCA9IDE7XG4gICAgcmV0dXJuIGE7XG4gIH1cblxuICB2YXIgdCA9IGEuaW11bChiKTtcbiAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTtcbiAgdmFyIHUgPSB0LmlzdWIoYykuaXNocm4odGhpcy5zaGlmdCk7XG4gIHZhciByZXMgPSB1O1xuICBpZiAodS5jbXAodGhpcy5tKSA+PSAwKVxuICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKVxuICAgIHJlcyA9IHUuaWFkZCh0aGlzLm0pO1xuXG4gIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xufTtcblxuTW9udC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKGEsIGIpIHtcbiAgaWYgKGEuY21wbigwKSA9PT0gMCB8fCBiLmNtcG4oMCkgPT09IDApXG4gICAgcmV0dXJuIG5ldyBCTigwKS5fZm9yY2VSZWQodGhpcyk7XG5cbiAgdmFyIHQgPSBhLm11bChiKTtcbiAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTtcbiAgdmFyIHUgPSB0LmlzdWIoYykuaXNocm4odGhpcy5zaGlmdCk7XG4gIHZhciByZXMgPSB1O1xuICBpZiAodS5jbXAodGhpcy5tKSA+PSAwKVxuICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKVxuICAgIHJlcyA9IHUuaWFkZCh0aGlzLm0pO1xuXG4gIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xufTtcblxuTW9udC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0oYSkge1xuICAvLyAoQVIpXi0xICogUl4yID0gKEFeLTEgKiBSXi0xKSAqIFJeMiA9IEFeLTEgKiBSXG4gIHZhciByZXMgPSB0aGlzLmltb2QoYS5faW52bXAodGhpcy5tKS5tdWwodGhpcy5yMikpO1xuICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbn07XG5cbn0pKHR5cGVvZiBtb2R1bGUgPT09ICd1bmRlZmluZWQnIHx8IG1vZHVsZSwgdGhpcyk7XG4iLCIndXNlIHN0cmljdCdcbmV4cG9ydHNbJzEuMy4xMzIuMC4xMCddID0gJ3NlY3AyNTZrMSdcblxuZXhwb3J0c1snMS4zLjEzMi4wLjMzJ10gPSAncDIyNCdcblxuZXhwb3J0c1snMS4yLjg0MC4xMDA0NS4zLjEuMSddID0gJ3AxOTInXG5cbmV4cG9ydHNbJzEuMi44NDAuMTAwNDUuMy4xLjcnXSA9ICdwMjU2J1xuIiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xuJ3VzZSBzdHJpY3QnXG5leHBvcnRzWydSU0EtU0hBMjI0J10gPSBleHBvcnRzLnNoYTIyNFdpdGhSU0FFbmNyeXB0aW9uID0ge1xuICBzaWduOiAncnNhJyxcbiAgaGFzaDogJ3NoYTIyNCcsXG4gIGlkOiBuZXcgQnVmZmVyKCczMDJkMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDQwNTAwMDQxYycsICdoZXgnKVxufVxuZXhwb3J0c1snUlNBLVNIQTI1NiddID0gZXhwb3J0cy5zaGEyNTZXaXRoUlNBRW5jcnlwdGlvbiA9IHtcbiAgc2lnbjogJ3JzYScsXG4gIGhhc2g6ICdzaGEyNTYnLFxuICBpZDogbmV3IEJ1ZmZlcignMzAzMTMwMGQwNjA5NjA4NjQ4MDE2NTAzMDQwMjAxMDUwMDA0MjAnLCAnaGV4Jylcbn1cbmV4cG9ydHNbJ1JTQS1TSEEzODQnXSA9IGV4cG9ydHMuc2hhMzg0V2l0aFJTQUVuY3J5cHRpb24gPSB7XG4gIHNpZ246ICdyc2EnLFxuICBoYXNoOiAnc2hhMzg0JyxcbiAgaWQ6IG5ldyBCdWZmZXIoJzMwNDEzMDBkMDYwOTYwODY0ODAxNjUwMzA0MDIwMjA1MDAwNDMwJywgJ2hleCcpXG59XG5leHBvcnRzWydSU0EtU0hBNTEyJ10gPSBleHBvcnRzLnNoYTUxMldpdGhSU0FFbmNyeXB0aW9uID0ge1xuICBzaWduOiAncnNhJyxcbiAgaGFzaDogJ3NoYTUxMicsXG4gIGlkOiBuZXcgQnVmZmVyKCczMDUxMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDMwNTAwMDQ0MCcsICdoZXgnKVxufVxuZXhwb3J0c1snUlNBLVNIQTEnXSA9IHtcbiAgc2lnbjogJ3JzYScsXG4gIGhhc2g6ICdzaGExJyxcbiAgaWQ6IG5ldyBCdWZmZXIoJzMwMjEzMDA5MDYwNTJiMGUwMzAyMWEwNTAwMDQxNCcsICdoZXgnKVxufVxuZXhwb3J0c1snZWNkc2Etd2l0aC1TSEExJ10gPSB7XG4gIHNpZ246ICdlY2RzYScsXG4gIGhhc2g6ICdzaGExJyxcbiAgaWQ6IG5ldyBCdWZmZXIoJycsICdoZXgnKVxufVxuZXhwb3J0cy5EU0EgPSBleHBvcnRzWydEU0EtU0hBMSddID0gZXhwb3J0c1snRFNBLVNIQSddID0ge1xuICBzaWduOiAnZHNhJyxcbiAgaGFzaDogJ3NoYTEnLFxuICBpZDogbmV3IEJ1ZmZlcignJywgJ2hleCcpXG59XG5leHBvcnRzWydEU0EtU0hBMjI0J10gPSBleHBvcnRzWydEU0EtV0lUSC1TSEEyMjQnXSA9IHtcbiAgc2lnbjogJ2RzYScsXG4gIGhhc2g6ICdzaGEyMjQnLFxuICBpZDogbmV3IEJ1ZmZlcignJywgJ2hleCcpXG59XG5leHBvcnRzWydEU0EtU0hBMjU2J10gPSBleHBvcnRzWydEU0EtV0lUSC1TSEEyNTYnXSA9IHtcbiAgc2lnbjogJ2RzYScsXG4gIGhhc2g6ICdzaGEyNTYnLFxuICBpZDogbmV3IEJ1ZmZlcignJywgJ2hleCcpXG59XG5leHBvcnRzWydEU0EtU0hBMzg0J10gPSBleHBvcnRzWydEU0EtV0lUSC1TSEEzODQnXSA9IHtcbiAgc2lnbjogJ2RzYScsXG4gIGhhc2g6ICdzaGEzODQnLFxuICBpZDogbmV3IEJ1ZmZlcignJywgJ2hleCcpXG59XG5leHBvcnRzWydEU0EtU0hBNTEyJ10gPSBleHBvcnRzWydEU0EtV0lUSC1TSEE1MTInXSA9IHtcbiAgc2lnbjogJ2RzYScsXG4gIGhhc2g6ICdzaGE1MTInLFxuICBpZDogbmV3IEJ1ZmZlcignJywgJ2hleCcpXG59XG5leHBvcnRzWydEU0EtUklQRU1EMTYwJ10gPSB7XG4gIHNpZ246ICdkc2EnLFxuICBoYXNoOiAncm1kMTYwJyxcbiAgaWQ6IG5ldyBCdWZmZXIoJycsICdoZXgnKVxufVxuZXhwb3J0c1snUlNBLVJJUEVNRDE2MCddID0gZXhwb3J0cy5yaXBlbWQxNjBXaXRoUlNBID0ge1xuICBzaWduOiAncnNhJyxcbiAgaGFzaDogJ3JtZDE2MCcsXG4gIGlkOiBuZXcgQnVmZmVyKCczMDIxMzAwOTA2MDUyYjI0MDMwMjAxMDUwMDA0MTQnLCAnaGV4Jylcbn1cbmV4cG9ydHNbJ1JTQS1NRDUnXSA9IGV4cG9ydHMubWQ1V2l0aFJTQUVuY3J5cHRpb24gPSB7XG4gIHNpZ246ICdyc2EnLFxuICBoYXNoOiAnbWQ1JyxcbiAgaWQ6IG5ldyBCdWZmZXIoJzMwMjAzMDBjMDYwODJhODY0ODg2ZjcwZDAyMDUwNTAwMDQxMCcsICdoZXgnKVxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMXphV2R1TDJGc1oyOXpMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpZDFjMlVnYzNSeWFXTjBKMXh1Wlhod2IzSjBjMXNuVWxOQkxWTklRVEl5TkNkZElEMGdaWGh3YjNKMGN5NXphR0V5TWpSWGFYUm9VbE5CUlc1amNubHdkR2x2YmlBOUlIdGNiaUFnYzJsbmJqb2dKM0p6WVNjc1hHNGdJR2hoYzJnNklDZHphR0V5TWpRbkxGeHVJQ0JwWkRvZ2JtVjNJRUoxWm1abGNpZ25NekF5WkRNd01HUXdOakE1TmpBNE5qUTRNREUyTlRBek1EUXdNakEwTURVd01EQTBNV01uTENBbmFHVjRKeWxjYm4xY2JtVjRjRzl5ZEhOYkoxSlRRUzFUU0VFeU5UWW5YU0E5SUdWNGNHOXlkSE11YzJoaE1qVTJWMmwwYUZKVFFVVnVZM0o1Y0hScGIyNGdQU0I3WEc0Z0lITnBaMjQ2SUNkeWMyRW5MRnh1SUNCb1lYTm9PaUFuYzJoaE1qVTJKeXhjYmlBZ2FXUTZJRzVsZHlCQ2RXWm1aWElvSnpNd016RXpNREJrTURZd09UWXdPRFkwT0RBeE5qVXdNekEwTURJd01UQTFNREF3TkRJd0p5d2dKMmhsZUNjcFhHNTlYRzVsZUhCdmNuUnpXeWRTVTBFdFUwaEJNemcwSjEwZ1BTQmxlSEJ2Y25SekxuTm9ZVE00TkZkcGRHaFNVMEZGYm1OeWVYQjBhVzl1SUQwZ2UxeHVJQ0J6YVdkdU9pQW5jbk5oSnl4Y2JpQWdhR0Z6YURvZ0ozTm9ZVE00TkNjc1hHNGdJR2xrT2lCdVpYY2dRblZtWm1WeUtDY3pNRFF4TXpBd1pEQTJNRGsyTURnMk5EZ3dNVFkxTURNd05EQXlNREl3TlRBd01EUXpNQ2NzSUNkb1pYZ25LVnh1ZlZ4dVpYaHdiM0owYzFzblVsTkJMVk5JUVRVeE1pZGRJRDBnWlhod2IzSjBjeTV6YUdFMU1USlhhWFJvVWxOQlJXNWpjbmx3ZEdsdmJpQTlJSHRjYmlBZ2MybG5iam9nSjNKellTY3NYRzRnSUdoaGMyZzZJQ2R6YUdFMU1USW5MRnh1SUNCcFpEb2dibVYzSUVKMVptWmxjaWduTXpBMU1UTXdNR1F3TmpBNU5qQTROalE0TURFMk5UQXpNRFF3TWpBek1EVXdNREEwTkRBbkxDQW5hR1Y0SnlsY2JuMWNibVY0Y0c5eWRITmJKMUpUUVMxVFNFRXhKMTBnUFNCN1hHNGdJSE5wWjI0NklDZHljMkVuTEZ4dUlDQm9ZWE5vT2lBbmMyaGhNU2NzWEc0Z0lHbGtPaUJ1WlhjZ1FuVm1abVZ5S0Njek1ESXhNekF3T1RBMk1EVXlZakJsTURNd01qRmhNRFV3TURBME1UUW5MQ0FuYUdWNEp5bGNibjFjYm1WNGNHOXlkSE5iSjJWalpITmhMWGRwZEdndFUwaEJNU2RkSUQwZ2UxeHVJQ0J6YVdkdU9pQW5aV05rYzJFbkxGeHVJQ0JvWVhOb09pQW5jMmhoTVNjc1hHNGdJR2xrT2lCdVpYY2dRblZtWm1WeUtDY25MQ0FuYUdWNEp5bGNibjFjYm1WNGNHOXlkSE11UkZOQklEMGdaWGh3YjNKMGMxc25SRk5CTFZOSVFURW5YU0E5SUdWNGNHOXlkSE5iSjBSVFFTMVRTRUVuWFNBOUlIdGNiaUFnYzJsbmJqb2dKMlJ6WVNjc1hHNGdJR2hoYzJnNklDZHphR0V4Snl4Y2JpQWdhV1E2SUc1bGR5QkNkV1ptWlhJb0p5Y3NJQ2RvWlhnbktWeHVmVnh1Wlhod2IzSjBjMXNuUkZOQkxWTklRVEl5TkNkZElEMGdaWGh3YjNKMGMxc25SRk5CTFZkSlZFZ3RVMGhCTWpJMEoxMGdQU0I3WEc0Z0lITnBaMjQ2SUNka2MyRW5MRnh1SUNCb1lYTm9PaUFuYzJoaE1qSTBKeXhjYmlBZ2FXUTZJRzVsZHlCQ2RXWm1aWElvSnljc0lDZG9aWGduS1Z4dWZWeHVaWGh3YjNKMGMxc25SRk5CTFZOSVFUSTFOaWRkSUQwZ1pYaHdiM0owYzFzblJGTkJMVmRKVkVndFUwaEJNalUySjEwZ1BTQjdYRzRnSUhOcFoyNDZJQ2RrYzJFbkxGeHVJQ0JvWVhOb09pQW5jMmhoTWpVMkp5eGNiaUFnYVdRNklHNWxkeUJDZFdabVpYSW9KeWNzSUNkb1pYZ25LVnh1ZlZ4dVpYaHdiM0owYzFzblJGTkJMVk5JUVRNNE5DZGRJRDBnWlhod2IzSjBjMXNuUkZOQkxWZEpWRWd0VTBoQk16ZzBKMTBnUFNCN1hHNGdJSE5wWjI0NklDZGtjMkVuTEZ4dUlDQm9ZWE5vT2lBbmMyaGhNemcwSnl4Y2JpQWdhV1E2SUc1bGR5QkNkV1ptWlhJb0p5Y3NJQ2RvWlhnbktWeHVmVnh1Wlhod2IzSjBjMXNuUkZOQkxWTklRVFV4TWlkZElEMGdaWGh3YjNKMGMxc25SRk5CTFZkSlZFZ3RVMGhCTlRFeUoxMGdQU0I3WEc0Z0lITnBaMjQ2SUNka2MyRW5MRnh1SUNCb1lYTm9PaUFuYzJoaE5URXlKeXhjYmlBZ2FXUTZJRzVsZHlCQ2RXWm1aWElvSnljc0lDZG9aWGduS1Z4dWZWeHVaWGh3YjNKMGMxc25SRk5CTFZKSlVFVk5SREUyTUNkZElEMGdlMXh1SUNCemFXZHVPaUFuWkhOaEp5eGNiaUFnYUdGemFEb2dKM0p0WkRFMk1DY3NYRzRnSUdsa09pQnVaWGNnUW5WbVptVnlLQ2NuTENBbmFHVjRKeWxjYm4xY2JtVjRjRzl5ZEhOYkoxSlRRUzFTU1ZCRlRVUXhOakFuWFNBOUlHVjRjRzl5ZEhNdWNtbHdaVzFrTVRZd1YybDBhRkpUUVNBOUlIdGNiaUFnYzJsbmJqb2dKM0p6WVNjc1hHNGdJR2hoYzJnNklDZHliV1F4TmpBbkxGeHVJQ0JwWkRvZ2JtVjNJRUoxWm1abGNpZ25NekF5TVRNd01Ea3dOakExTW1JeU5EQXpNREl3TVRBMU1EQXdOREUwSnl3Z0oyaGxlQ2NwWEc1OVhHNWxlSEJ2Y25Seld5ZFNVMEV0VFVRMUoxMGdQU0JsZUhCdmNuUnpMbTFrTlZkcGRHaFNVMEZGYm1OeWVYQjBhVzl1SUQwZ2UxeHVJQ0J6YVdkdU9pQW5jbk5oSnl4Y2JpQWdhR0Z6YURvZ0oyMWtOU2NzWEc0Z0lHbGtPaUJ1WlhjZ1FuVm1abVZ5S0Njek1ESXdNekF3WXpBMk1EZ3lZVGcyTkRnNE5tWTNNR1F3TWpBMU1EVXdNREEwTVRBbkxDQW5hR1Y0SnlsY2JuMWNiaUpkZlE9PSIsInZhciBlYnRrID0gcmVxdWlyZSgnZXZwX2J5dGVzdG9rZXknKVxudmFyIGFlcyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzL2Jyb3dzZXInKVxudmFyIERFUyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktZGVzJylcbnZhciBkZXNNb2RlcyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktZGVzL21vZGVzJylcbnZhciBhZXNNb2RlcyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzL21vZGVzJylcbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHZhciBrZXlMZW4sIGl2TGVuXG4gIHN1aXRlID0gc3VpdGUudG9Mb3dlckNhc2UoKVxuICBpZiAoYWVzTW9kZXNbc3VpdGVdKSB7XG4gICAga2V5TGVuID0gYWVzTW9kZXNbc3VpdGVdLmtleVxuICAgIGl2TGVuID0gYWVzTW9kZXNbc3VpdGVdLml2XG4gIH0gZWxzZSBpZiAoZGVzTW9kZXNbc3VpdGVdKSB7XG4gICAga2V5TGVuID0gZGVzTW9kZXNbc3VpdGVdLmtleSAqIDhcbiAgICBpdkxlbiA9IGRlc01vZGVzW3N1aXRlXS5pdlxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwga2V5TGVuLCBpdkxlbilcbiAgcmV0dXJuIGNyZWF0ZUNpcGhlcml2KHN1aXRlLCBrZXlzLmtleSwga2V5cy5pdilcbn1cbmZ1bmN0aW9uIGNyZWF0ZURlY2lwaGVyIChzdWl0ZSwgcGFzc3dvcmQpIHtcbiAgdmFyIGtleUxlbiwgaXZMZW5cbiAgc3VpdGUgPSBzdWl0ZS50b0xvd2VyQ2FzZSgpXG4gIGlmIChhZXNNb2Rlc1tzdWl0ZV0pIHtcbiAgICBrZXlMZW4gPSBhZXNNb2Rlc1tzdWl0ZV0ua2V5XG4gICAgaXZMZW4gPSBhZXNNb2Rlc1tzdWl0ZV0uaXZcbiAgfSBlbHNlIGlmIChkZXNNb2Rlc1tzdWl0ZV0pIHtcbiAgICBrZXlMZW4gPSBkZXNNb2Rlc1tzdWl0ZV0ua2V5ICogOFxuICAgIGl2TGVuID0gZGVzTW9kZXNbc3VpdGVdLml2XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcbiAgfVxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBrZXlMZW4sIGl2TGVuKVxuICByZXR1cm4gY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlcml2IChzdWl0ZSwga2V5LCBpdikge1xuICBzdWl0ZSA9IHN1aXRlLnRvTG93ZXJDYXNlKClcbiAgaWYgKGFlc01vZGVzW3N1aXRlXSkge1xuICAgIHJldHVybiBhZXMuY3JlYXRlQ2lwaGVyaXYoc3VpdGUsIGtleSwgaXYpXG4gIH0gZWxzZSBpZiAoZGVzTW9kZXNbc3VpdGVdKSB7XG4gICAgcmV0dXJuIG5ldyBERVMoe1xuICAgICAga2V5OiBrZXksXG4gICAgICBpdjogaXYsXG4gICAgICBtb2RlOiBzdWl0ZVxuICAgIH0pXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcbiAgfVxufVxuZnVuY3Rpb24gY3JlYXRlRGVjaXBoZXJpdiAoc3VpdGUsIGtleSwgaXYpIHtcbiAgc3VpdGUgPSBzdWl0ZS50b0xvd2VyQ2FzZSgpXG4gIGlmIChhZXNNb2Rlc1tzdWl0ZV0pIHtcbiAgICByZXR1cm4gYWVzLmNyZWF0ZURlY2lwaGVyaXYoc3VpdGUsIGtleSwgaXYpXG4gIH0gZWxzZSBpZiAoZGVzTW9kZXNbc3VpdGVdKSB7XG4gICAgcmV0dXJuIG5ldyBERVMoe1xuICAgICAga2V5OiBrZXksXG4gICAgICBpdjogaXYsXG4gICAgICBtb2RlOiBzdWl0ZSxcbiAgICAgIGRlY3J5cHQ6IHRydWVcbiAgICB9KVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbn1cbmV4cG9ydHMuY3JlYXRlQ2lwaGVyID0gZXhwb3J0cy5DaXBoZXIgPSBjcmVhdGVDaXBoZXJcbmV4cG9ydHMuY3JlYXRlQ2lwaGVyaXYgPSBleHBvcnRzLkNpcGhlcml2ID0gY3JlYXRlQ2lwaGVyaXZcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXIgPSBleHBvcnRzLkRlY2lwaGVyID0gY3JlYXRlRGVjaXBoZXJcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXJpdiA9IGV4cG9ydHMuRGVjaXBoZXJpdiA9IGNyZWF0ZURlY2lwaGVyaXZcbmZ1bmN0aW9uIGdldENpcGhlcnMgKCkge1xuICByZXR1cm4gT2JqZWN0LmtleXMoZGVzTW9kZXMpLmNvbmNhdChhZXMuZ2V0Q2lwaGVycygpKVxufVxuZXhwb3J0cy5saXN0Q2lwaGVycyA9IGV4cG9ydHMuZ2V0Q2lwaGVycyA9IGdldENpcGhlcnNcbiIsImV4cG9ydHNbJ2Rlcy1lY2InXSA9IHtcbiAga2V5OiA4LFxuICBpdjogMFxufVxuZXhwb3J0c1snZGVzLWNiYyddID0gZXhwb3J0cy5kZXMgPSB7XG4gIGtleTogOCxcbiAgaXY6IDhcbn1cbmV4cG9ydHNbJ2Rlcy1lZGUzLWNiYyddID0gZXhwb3J0cy5kZXMzID0ge1xuICBrZXk6IDI0LFxuICBpdjogOFxufVxuZXhwb3J0c1snZGVzLWVkZTMnXSA9IHtcbiAga2V5OiAyNCxcbiAgaXY6IDBcbn1cbmV4cG9ydHNbJ2Rlcy1lZGUtY2JjJ10gPSB7XG4gIGtleTogMTYsXG4gIGl2OiA4XG59XG5leHBvcnRzWydkZXMtZWRlJ10gPSB7XG4gIGtleTogMTYsXG4gIGl2OiAwXG59XG4iLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG52YXIgQ2lwaGVyQmFzZSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBkZXMgPSByZXF1aXJlKCdkZXMuanMnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG52YXIgbW9kZXMgPSB7XG4gICdkZXMtZWRlMy1jYmMnOiBkZXMuQ0JDLmluc3RhbnRpYXRlKGRlcy5FREUpLFxuICAnZGVzLWVkZTMnOiBkZXMuRURFLFxuICAnZGVzLWVkZS1jYmMnOiBkZXMuQ0JDLmluc3RhbnRpYXRlKGRlcy5FREUpLFxuICAnZGVzLWVkZSc6IGRlcy5FREUsXG4gICdkZXMtY2JjJzogZGVzLkNCQy5pbnN0YW50aWF0ZShkZXMuREVTKSxcbiAgJ2Rlcy1lY2InOiBkZXMuREVTXG59XG5tb2Rlcy5kZXMgPSBtb2Rlc1snZGVzLWNiYyddXG5tb2Rlcy5kZXMzID0gbW9kZXNbJ2Rlcy1lZGUzLWNiYyddXG5tb2R1bGUuZXhwb3J0cyA9IERFU1xuaW5oZXJpdHMoREVTLCBDaXBoZXJCYXNlKVxuZnVuY3Rpb24gREVTIChvcHRzKSB7XG4gIENpcGhlckJhc2UuY2FsbCh0aGlzKVxuICB2YXIgbW9kZU5hbWUgPSBvcHRzLm1vZGUudG9Mb3dlckNhc2UoKVxuICB2YXIgbW9kZSA9IG1vZGVzW21vZGVOYW1lXVxuICB2YXIgdHlwZVxuICBpZiAob3B0cy5kZWNyeXB0KSB7XG4gICAgdHlwZSA9ICdkZWNyeXB0J1xuICB9IGVsc2Uge1xuICAgIHR5cGUgPSAnZW5jcnlwdCdcbiAgfVxuICB2YXIga2V5ID0gb3B0cy5rZXlcbiAgaWYgKG1vZGVOYW1lID09PSAnZGVzLWVkZScgfHwgbW9kZU5hbWUgPT09ICdkZXMtZWRlLWNiYycpIHtcbiAgICBrZXkgPSBCdWZmZXIuY29uY2F0KFtrZXksIGtleS5zbGljZSgwLCA4KV0pXG4gIH1cbiAgdmFyIGl2ID0gb3B0cy5pdlxuICB0aGlzLl9kZXMgPSBtb2RlLmNyZWF0ZSh7XG4gICAga2V5OiBrZXksXG4gICAgaXY6IGl2LFxuICAgIHR5cGU6IHR5cGVcbiAgfSlcbn1cbkRFUy5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHJldHVybiBuZXcgQnVmZmVyKHRoaXMuX2Rlcy51cGRhdGUoZGF0YSkpXG59XG5ERVMucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBCdWZmZXIodGhpcy5fZGVzLmZpbmFsKCkpXG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WW5KdmQzTmxjbWxtZVMxamFYQm9aWEl2Ym05a1pWOXRiMlIxYkdWekwySnliM2R6WlhKcFpua3RaR1Z6TDJsdVpHVjRMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2labWxzWlNJNkltZGxibVZ5WVhSbFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUoyWVhJZ1EybHdhR1Z5UW1GelpTQTlJSEpsY1hWcGNtVW9KMk5wY0dobGNpMWlZWE5sSnlsY2JuWmhjaUJrWlhNZ1BTQnlaWEYxYVhKbEtDZGtaWE11YW5NbktWeHVkbUZ5SUdsdWFHVnlhWFJ6SUQwZ2NtVnhkV2x5WlNnbmFXNW9aWEpwZEhNbktWeHVYRzUyWVhJZ2JXOWtaWE1nUFNCN1hHNGdJQ2RrWlhNdFpXUmxNeTFqWW1Nbk9pQmtaWE11UTBKRExtbHVjM1JoYm5ScFlYUmxLR1JsY3k1RlJFVXBMRnh1SUNBblpHVnpMV1ZrWlRNbk9pQmtaWE11UlVSRkxGeHVJQ0FuWkdWekxXVmtaUzFqWW1Nbk9pQmtaWE11UTBKRExtbHVjM1JoYm5ScFlYUmxLR1JsY3k1RlJFVXBMRnh1SUNBblpHVnpMV1ZrWlNjNklHUmxjeTVGUkVVc1hHNGdJQ2RrWlhNdFkySmpKem9nWkdWekxrTkNReTVwYm5OMFlXNTBhV0YwWlNoa1pYTXVSRVZUS1N4Y2JpQWdKMlJsY3kxbFkySW5PaUJrWlhNdVJFVlRYRzU5WEc1dGIyUmxjeTVrWlhNZ1BTQnRiMlJsYzFzblpHVnpMV05pWXlkZFhHNXRiMlJsY3k1a1pYTXpJRDBnYlc5a1pYTmJKMlJsY3kxbFpHVXpMV05pWXlkZFhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlFUkZVMXh1YVc1b1pYSnBkSE1vUkVWVExDQkRhWEJvWlhKQ1lYTmxLVnh1Wm5WdVkzUnBiMjRnUkVWVElDaHZjSFJ6S1NCN1hHNGdJRU5wY0dobGNrSmhjMlV1WTJGc2JDaDBhR2x6S1Z4dUlDQjJZWElnYlc5a1pVNWhiV1VnUFNCdmNIUnpMbTF2WkdVdWRHOU1iM2RsY2tOaGMyVW9LVnh1SUNCMllYSWdiVzlrWlNBOUlHMXZaR1Z6VzIxdlpHVk9ZVzFsWFZ4dUlDQjJZWElnZEhsd1pWeHVJQ0JwWmlBb2IzQjBjeTVrWldOeWVYQjBLU0I3WEc0Z0lDQWdkSGx3WlNBOUlDZGtaV055ZVhCMEoxeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lIUjVjR1VnUFNBblpXNWpjbmx3ZENkY2JpQWdmVnh1SUNCMllYSWdhMlY1SUQwZ2IzQjBjeTVyWlhsY2JpQWdhV1lnS0cxdlpHVk9ZVzFsSUQwOVBTQW5aR1Z6TFdWa1pTY2dmSHdnYlc5a1pVNWhiV1VnUFQwOUlDZGtaWE10WldSbExXTmlZeWNwSUh0Y2JpQWdJQ0JyWlhrZ1BTQkNkV1ptWlhJdVkyOXVZMkYwS0Z0clpYa3NJR3RsZVM1emJHbGpaU2d3TENBNEtWMHBYRzRnSUgxY2JpQWdkbUZ5SUdsMklEMGdiM0IwY3k1cGRseHVJQ0IwYUdsekxsOWtaWE1nUFNCdGIyUmxMbU55WldGMFpTaDdYRzRnSUNBZ2EyVjVPaUJyWlhrc1hHNGdJQ0FnYVhZNklHbDJMRnh1SUNBZ0lIUjVjR1U2SUhSNWNHVmNiaUFnZlNsY2JuMWNia1JGVXk1d2NtOTBiM1I1Y0dVdVgzVndaR0YwWlNBOUlHWjFibU4wYVc5dUlDaGtZWFJoS1NCN1hHNGdJSEpsZEhWeWJpQnVaWGNnUW5WbVptVnlLSFJvYVhNdVgyUmxjeTUxY0dSaGRHVW9aR0YwWVNrcFhHNTlYRzVFUlZNdWNISnZkRzkwZVhCbExsOW1hVzVoYkNBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ2NtVjBkWEp1SUc1bGR5QkNkV1ptWlhJb2RHaHBjeTVmWkdWekxtWnBibUZzS0NrcFhHNTlYRzRpWFgwPSIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy51dGlscyA9IHJlcXVpcmUoJy4vZGVzL3V0aWxzJyk7XG5leHBvcnRzLkNpcGhlciA9IHJlcXVpcmUoJy4vZGVzL2NpcGhlcicpO1xuZXhwb3J0cy5ERVMgPSByZXF1aXJlKCcuL2Rlcy9kZXMnKTtcbmV4cG9ydHMuQ0JDID0gcmVxdWlyZSgnLi9kZXMvY2JjJyk7XG5leHBvcnRzLkVERSA9IHJlcXVpcmUoJy4vZGVzL2VkZScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRShieXRlcywgb2ZmKSB7XG4gIHZhciByZXMgPSAgKGJ5dGVzWzAgKyBvZmZdIDw8IDI0KSB8XG4gICAgICAgICAgICAgKGJ5dGVzWzEgKyBvZmZdIDw8IDE2KSB8XG4gICAgICAgICAgICAgKGJ5dGVzWzIgKyBvZmZdIDw8IDgpIHxcbiAgICAgICAgICAgICBieXRlc1szICsgb2ZmXTtcbiAgcmV0dXJuIHJlcyA+Pj4gMDtcbn07XG5cbmV4cG9ydHMud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUoYnl0ZXMsIHZhbHVlLCBvZmYpIHtcbiAgYnl0ZXNbMCArIG9mZl0gPSB2YWx1ZSA+Pj4gMjQ7XG4gIGJ5dGVzWzEgKyBvZmZdID0gKHZhbHVlID4+PiAxNikgJiAweGZmO1xuICBieXRlc1syICsgb2ZmXSA9ICh2YWx1ZSA+Pj4gOCkgJiAweGZmO1xuICBieXRlc1szICsgb2ZmXSA9IHZhbHVlICYgMHhmZjtcbn07XG5cbmV4cG9ydHMuaXAgPSBmdW5jdGlvbiBpcChpbkwsIGluUiwgb3V0LCBvZmYpIHtcbiAgdmFyIG91dEwgPSAwO1xuICB2YXIgb3V0UiA9IDA7XG5cbiAgZm9yICh2YXIgaSA9IDY7IGkgPj0gMDsgaSAtPSAyKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgICAgb3V0TCA8PD0gMTtcbiAgICAgIG91dEwgfD0gKGluUiA+Pj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgICBvdXRMIDw8PSAxO1xuICAgICAgb3V0TCB8PSAoaW5MID4+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDY7IGkgPj0gMDsgaSAtPSAyKSB7XG4gICAgZm9yICh2YXIgaiA9IDE7IGogPD0gMjU7IGogKz0gOCkge1xuICAgICAgb3V0UiA8PD0gMTtcbiAgICAgIG91dFIgfD0gKGluUiA+Pj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgICBmb3IgKHZhciBqID0gMTsgaiA8PSAyNTsgaiArPSA4KSB7XG4gICAgICBvdXRSIDw8PSAxO1xuICAgICAgb3V0UiB8PSAoaW5MID4+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICB9XG5cbiAgb3V0W29mZiArIDBdID0gb3V0TCA+Pj4gMDtcbiAgb3V0W29mZiArIDFdID0gb3V0UiA+Pj4gMDtcbn07XG5cbmV4cG9ydHMucmlwID0gZnVuY3Rpb24gcmlwKGluTCwgaW5SLCBvdXQsIG9mZikge1xuICB2YXIgb3V0TCA9IDA7XG4gIHZhciBvdXRSID0gMDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIGZvciAodmFyIGogPSAyNDsgaiA+PSAwOyBqIC09IDgpIHtcbiAgICAgIG91dEwgPDw9IDE7XG4gICAgICBvdXRMIHw9IChpblIgPj4+IChqICsgaSkpICYgMTtcbiAgICAgIG91dEwgPDw9IDE7XG4gICAgICBvdXRMIHw9IChpbkwgPj4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gIH1cbiAgZm9yICh2YXIgaSA9IDQ7IGkgPCA4OyBpKyspIHtcbiAgICBmb3IgKHZhciBqID0gMjQ7IGogPj0gMDsgaiAtPSA4KSB7XG4gICAgICBvdXRSIDw8PSAxO1xuICAgICAgb3V0UiB8PSAoaW5SID4+PiAoaiArIGkpKSAmIDE7XG4gICAgICBvdXRSIDw8PSAxO1xuICAgICAgb3V0UiB8PSAoaW5MID4+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICB9XG5cbiAgb3V0W29mZiArIDBdID0gb3V0TCA+Pj4gMDtcbiAgb3V0W29mZiArIDFdID0gb3V0UiA+Pj4gMDtcbn07XG5cbmV4cG9ydHMucGMxID0gZnVuY3Rpb24gcGMxKGluTCwgaW5SLCBvdXQsIG9mZikge1xuICB2YXIgb3V0TCA9IDA7XG4gIHZhciBvdXRSID0gMDtcblxuICAvLyA3LCAxNSwgMjMsIDMxLCAzOSwgNDcsIDU1LCA2M1xuICAvLyA2LCAxNCwgMjIsIDMwLCAzOSwgNDcsIDU1LCA2M1xuICAvLyA1LCAxMywgMjEsIDI5LCAzOSwgNDcsIDU1LCA2M1xuICAvLyA0LCAxMiwgMjAsIDI4XG4gIGZvciAodmFyIGkgPSA3OyBpID49IDU7IGktLSkge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICAgIG91dEwgPDw9IDE7XG4gICAgICBvdXRMIHw9IChpblIgPj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgICBvdXRMIDw8PSAxO1xuICAgICAgb3V0TCB8PSAoaW5MID4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gIH1cbiAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgIG91dEwgPDw9IDE7XG4gICAgb3V0TCB8PSAoaW5SID4+IChqICsgaSkpICYgMTtcbiAgfVxuXG4gIC8vIDEsIDksIDE3LCAyNSwgMzMsIDQxLCA0OSwgNTdcbiAgLy8gMiwgMTAsIDE4LCAyNiwgMzQsIDQyLCA1MCwgNThcbiAgLy8gMywgMTEsIDE5LCAyNywgMzUsIDQzLCA1MSwgNTlcbiAgLy8gMzYsIDQ0LCA1MiwgNjBcbiAgZm9yICh2YXIgaSA9IDE7IGkgPD0gMzsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgICAgb3V0UiA8PD0gMTtcbiAgICAgIG91dFIgfD0gKGluUiA+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICAgIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICAgIG91dFIgPDw9IDE7XG4gICAgICBvdXRSIHw9IChpbkwgPj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgfVxuICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgb3V0UiA8PD0gMTtcbiAgICBvdXRSIHw9IChpbkwgPj4gKGogKyBpKSkgJiAxO1xuICB9XG5cbiAgb3V0W29mZiArIDBdID0gb3V0TCA+Pj4gMDtcbiAgb3V0W29mZiArIDFdID0gb3V0UiA+Pj4gMDtcbn07XG5cbmV4cG9ydHMucjI4c2hsID0gZnVuY3Rpb24gcjI4c2hsKG51bSwgc2hpZnQpIHtcbiAgcmV0dXJuICgobnVtIDw8IHNoaWZ0KSAmIDB4ZmZmZmZmZikgfCAobnVtID4+PiAoMjggLSBzaGlmdCkpO1xufTtcblxudmFyIHBjMnRhYmxlID0gW1xuICAvLyBpbkwgPT4gb3V0TFxuICAxNCwgMTEsIDE3LCA0LCAyNywgMjMsIDI1LCAwLFxuICAxMywgMjIsIDcsIDE4LCA1LCA5LCAxNiwgMjQsXG4gIDIsIDIwLCAxMiwgMjEsIDEsIDgsIDE1LCAyNixcblxuICAvLyBpblIgPT4gb3V0UlxuICAxNSwgNCwgMjUsIDE5LCA5LCAxLCAyNiwgMTYsXG4gIDUsIDExLCAyMywgOCwgMTIsIDcsIDE3LCAwLFxuICAyMiwgMywgMTAsIDE0LCA2LCAyMCwgMjcsIDI0XG5dO1xuXG5leHBvcnRzLnBjMiA9IGZ1bmN0aW9uIHBjMihpbkwsIGluUiwgb3V0LCBvZmYpIHtcbiAgdmFyIG91dEwgPSAwO1xuICB2YXIgb3V0UiA9IDA7XG5cbiAgdmFyIGxlbiA9IHBjMnRhYmxlLmxlbmd0aCA+Pj4gMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIG91dEwgPDw9IDE7XG4gICAgb3V0TCB8PSAoaW5MID4+PiBwYzJ0YWJsZVtpXSkgJiAweDE7XG4gIH1cbiAgZm9yICh2YXIgaSA9IGxlbjsgaSA8IHBjMnRhYmxlLmxlbmd0aDsgaSsrKSB7XG4gICAgb3V0UiA8PD0gMTtcbiAgICBvdXRSIHw9IChpblIgPj4+IHBjMnRhYmxlW2ldKSAmIDB4MTtcbiAgfVxuXG4gIG91dFtvZmYgKyAwXSA9IG91dEwgPj4+IDA7XG4gIG91dFtvZmYgKyAxXSA9IG91dFIgPj4+IDA7XG59O1xuXG5leHBvcnRzLmV4cGFuZCA9IGZ1bmN0aW9uIGV4cGFuZChyLCBvdXQsIG9mZikge1xuICB2YXIgb3V0TCA9IDA7XG4gIHZhciBvdXRSID0gMDtcblxuICBvdXRMID0gKChyICYgMSkgPDwgNSkgfCAociA+Pj4gMjcpO1xuICBmb3IgKHZhciBpID0gMjM7IGkgPj0gMTU7IGkgLT0gNCkge1xuICAgIG91dEwgPDw9IDY7XG4gICAgb3V0TCB8PSAociA+Pj4gaSkgJiAweDNmO1xuICB9XG4gIGZvciAodmFyIGkgPSAxMTsgaSA+PSAzOyBpIC09IDQpIHtcbiAgICBvdXRSIHw9IChyID4+PiBpKSAmIDB4M2Y7XG4gICAgb3V0UiA8PD0gNjtcbiAgfVxuICBvdXRSIHw9ICgociAmIDB4MWYpIDw8IDEpIHwgKHIgPj4+IDMxKTtcblxuICBvdXRbb2ZmICsgMF0gPSBvdXRMID4+PiAwO1xuICBvdXRbb2ZmICsgMV0gPSBvdXRSID4+PiAwO1xufTtcblxudmFyIHNUYWJsZSA9IFtcbiAgMTQsIDAsIDQsIDE1LCAxMywgNywgMSwgNCwgMiwgMTQsIDE1LCAyLCAxMSwgMTMsIDgsIDEsXG4gIDMsIDEwLCAxMCwgNiwgNiwgMTIsIDEyLCAxMSwgNSwgOSwgOSwgNSwgMCwgMywgNywgOCxcbiAgNCwgMTUsIDEsIDEyLCAxNCwgOCwgOCwgMiwgMTMsIDQsIDYsIDksIDIsIDEsIDExLCA3LFxuICAxNSwgNSwgMTIsIDExLCA5LCAzLCA3LCAxNCwgMywgMTAsIDEwLCAwLCA1LCA2LCAwLCAxMyxcblxuICAxNSwgMywgMSwgMTMsIDgsIDQsIDE0LCA3LCA2LCAxNSwgMTEsIDIsIDMsIDgsIDQsIDE0LFxuICA5LCAxMiwgNywgMCwgMiwgMSwgMTMsIDEwLCAxMiwgNiwgMCwgOSwgNSwgMTEsIDEwLCA1LFxuICAwLCAxMywgMTQsIDgsIDcsIDEwLCAxMSwgMSwgMTAsIDMsIDQsIDE1LCAxMywgNCwgMSwgMixcbiAgNSwgMTEsIDgsIDYsIDEyLCA3LCA2LCAxMiwgOSwgMCwgMywgNSwgMiwgMTQsIDE1LCA5LFxuXG4gIDEwLCAxMywgMCwgNywgOSwgMCwgMTQsIDksIDYsIDMsIDMsIDQsIDE1LCA2LCA1LCAxMCxcbiAgMSwgMiwgMTMsIDgsIDEyLCA1LCA3LCAxNCwgMTEsIDEyLCA0LCAxMSwgMiwgMTUsIDgsIDEsXG4gIDEzLCAxLCA2LCAxMCwgNCwgMTMsIDksIDAsIDgsIDYsIDE1LCA5LCAzLCA4LCAwLCA3LFxuICAxMSwgNCwgMSwgMTUsIDIsIDE0LCAxMiwgMywgNSwgMTEsIDEwLCA1LCAxNCwgMiwgNywgMTIsXG5cbiAgNywgMTMsIDEzLCA4LCAxNCwgMTEsIDMsIDUsIDAsIDYsIDYsIDE1LCA5LCAwLCAxMCwgMyxcbiAgMSwgNCwgMiwgNywgOCwgMiwgNSwgMTIsIDExLCAxLCAxMiwgMTAsIDQsIDE0LCAxNSwgOSxcbiAgMTAsIDMsIDYsIDE1LCA5LCAwLCAwLCA2LCAxMiwgMTAsIDExLCAxLCA3LCAxMywgMTMsIDgsXG4gIDE1LCA5LCAxLCA0LCAzLCA1LCAxNCwgMTEsIDUsIDEyLCAyLCA3LCA4LCAyLCA0LCAxNCxcblxuICAyLCAxNCwgMTIsIDExLCA0LCAyLCAxLCAxMiwgNywgNCwgMTAsIDcsIDExLCAxMywgNiwgMSxcbiAgOCwgNSwgNSwgMCwgMywgMTUsIDE1LCAxMCwgMTMsIDMsIDAsIDksIDE0LCA4LCA5LCA2LFxuICA0LCAxMSwgMiwgOCwgMSwgMTIsIDExLCA3LCAxMCwgMSwgMTMsIDE0LCA3LCAyLCA4LCAxMyxcbiAgMTUsIDYsIDksIDE1LCAxMiwgMCwgNSwgOSwgNiwgMTAsIDMsIDQsIDAsIDUsIDE0LCAzLFxuXG4gIDEyLCAxMCwgMSwgMTUsIDEwLCA0LCAxNSwgMiwgOSwgNywgMiwgMTIsIDYsIDksIDgsIDUsXG4gIDAsIDYsIDEzLCAxLCAzLCAxMywgNCwgMTQsIDE0LCAwLCA3LCAxMSwgNSwgMywgMTEsIDgsXG4gIDksIDQsIDE0LCAzLCAxNSwgMiwgNSwgMTIsIDIsIDksIDgsIDUsIDEyLCAxNSwgMywgMTAsXG4gIDcsIDExLCAwLCAxNCwgNCwgMSwgMTAsIDcsIDEsIDYsIDEzLCAwLCAxMSwgOCwgNiwgMTMsXG5cbiAgNCwgMTMsIDExLCAwLCAyLCAxMSwgMTQsIDcsIDE1LCA0LCAwLCA5LCA4LCAxLCAxMywgMTAsXG4gIDMsIDE0LCAxMiwgMywgOSwgNSwgNywgMTIsIDUsIDIsIDEwLCAxNSwgNiwgOCwgMSwgNixcbiAgMSwgNiwgNCwgMTEsIDExLCAxMywgMTMsIDgsIDEyLCAxLCAzLCA0LCA3LCAxMCwgMTQsIDcsXG4gIDEwLCA5LCAxNSwgNSwgNiwgMCwgOCwgMTUsIDAsIDE0LCA1LCAyLCA5LCAzLCAyLCAxMixcblxuICAxMywgMSwgMiwgMTUsIDgsIDEzLCA0LCA4LCA2LCAxMCwgMTUsIDMsIDExLCA3LCAxLCA0LFxuICAxMCwgMTIsIDksIDUsIDMsIDYsIDE0LCAxMSwgNSwgMCwgMCwgMTQsIDEyLCA5LCA3LCAyLFxuICA3LCAyLCAxMSwgMSwgNCwgMTQsIDEsIDcsIDksIDQsIDEyLCAxMCwgMTQsIDgsIDIsIDEzLFxuICAwLCAxNSwgNiwgMTIsIDEwLCA5LCAxMywgMCwgMTUsIDMsIDMsIDUsIDUsIDYsIDgsIDExXG5dO1xuXG5leHBvcnRzLnN1YnN0aXR1dGUgPSBmdW5jdGlvbiBzdWJzdGl0dXRlKGluTCwgaW5SKSB7XG4gIHZhciBvdXQgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIHZhciBiID0gKGluTCA+Pj4gKDE4IC0gaSAqIDYpKSAmIDB4M2Y7XG4gICAgdmFyIHNiID0gc1RhYmxlW2kgKiAweDQwICsgYl07XG5cbiAgICBvdXQgPDw9IDQ7XG4gICAgb3V0IHw9IHNiO1xuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgdmFyIGIgPSAoaW5SID4+PiAoMTggLSBpICogNikpICYgMHgzZjtcbiAgICB2YXIgc2IgPSBzVGFibGVbNCAqIDB4NDAgKyBpICogMHg0MCArIGJdO1xuXG4gICAgb3V0IDw8PSA0O1xuICAgIG91dCB8PSBzYjtcbiAgfVxuICByZXR1cm4gb3V0ID4+PiAwO1xufTtcblxudmFyIHBlcm11dGVUYWJsZSA9IFtcbiAgMTYsIDI1LCAxMiwgMTEsIDMsIDIwLCA0LCAxNSwgMzEsIDE3LCA5LCA2LCAyNywgMTQsIDEsIDIyLFxuICAzMCwgMjQsIDgsIDE4LCAwLCA1LCAyOSwgMjMsIDEzLCAxOSwgMiwgMjYsIDEwLCAyMSwgMjgsIDdcbl07XG5cbmV4cG9ydHMucGVybXV0ZSA9IGZ1bmN0aW9uIHBlcm11dGUobnVtKSB7XG4gIHZhciBvdXQgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBlcm11dGVUYWJsZS5sZW5ndGg7IGkrKykge1xuICAgIG91dCA8PD0gMTtcbiAgICBvdXQgfD0gKG51bSA+Pj4gcGVybXV0ZVRhYmxlW2ldKSAmIDB4MTtcbiAgfVxuICByZXR1cm4gb3V0ID4+PiAwO1xufTtcblxuZXhwb3J0cy5wYWRTcGxpdCA9IGZ1bmN0aW9uIHBhZFNwbGl0KG51bSwgc2l6ZSwgZ3JvdXApIHtcbiAgdmFyIHN0ciA9IG51bS50b1N0cmluZygyKTtcbiAgd2hpbGUgKHN0ci5sZW5ndGggPCBzaXplKVxuICAgIHN0ciA9ICcwJyArIHN0cjtcblxuICB2YXIgb3V0ID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSArPSBncm91cClcbiAgICBvdXQucHVzaChzdHIuc2xpY2UoaSwgaSArIGdyb3VwKSk7XG4gIHJldHVybiBvdXQuam9pbignICcpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciBkZXMgPSByZXF1aXJlKCcuLi9kZXMnKTtcbnZhciBDaXBoZXIgPSBkZXMuQ2lwaGVyO1xudmFyIERFUyA9IGRlcy5ERVM7XG5cbmZ1bmN0aW9uIEVERVN0YXRlKHR5cGUsIGtleSkge1xuICBhc3NlcnQuZXF1YWwoa2V5Lmxlbmd0aCwgMjQsICdJbnZhbGlkIGtleSBsZW5ndGgnKTtcblxuICB2YXIgazEgPSBrZXkuc2xpY2UoMCwgOCk7XG4gIHZhciBrMiA9IGtleS5zbGljZSg4LCAxNik7XG4gIHZhciBrMyA9IGtleS5zbGljZSgxNiwgMjQpO1xuXG4gIGlmICh0eXBlID09PSAnZW5jcnlwdCcpIHtcbiAgICB0aGlzLmNpcGhlcnMgPSBbXG4gICAgICBERVMuY3JlYXRlKHsgdHlwZTogJ2VuY3J5cHQnLCBrZXk6IGsxIH0pLFxuICAgICAgREVTLmNyZWF0ZSh7IHR5cGU6ICdkZWNyeXB0Jywga2V5OiBrMiB9KSxcbiAgICAgIERFUy5jcmVhdGUoeyB0eXBlOiAnZW5jcnlwdCcsIGtleTogazMgfSlcbiAgICBdO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuY2lwaGVycyA9IFtcbiAgICAgIERFUy5jcmVhdGUoeyB0eXBlOiAnZGVjcnlwdCcsIGtleTogazMgfSksXG4gICAgICBERVMuY3JlYXRlKHsgdHlwZTogJ2VuY3J5cHQnLCBrZXk6IGsyIH0pLFxuICAgICAgREVTLmNyZWF0ZSh7IHR5cGU6ICdkZWNyeXB0Jywga2V5OiBrMSB9KVxuICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gRURFKG9wdGlvbnMpIHtcbiAgQ2lwaGVyLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdmFyIHN0YXRlID0gbmV3IEVERVN0YXRlKHRoaXMudHlwZSwgdGhpcy5vcHRpb25zLmtleSk7XG4gIHRoaXMuX2VkZVN0YXRlID0gc3RhdGU7XG59XG5pbmhlcml0cyhFREUsIENpcGhlcik7XG5cbm1vZHVsZS5leHBvcnRzID0gRURFO1xuXG5FREUuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBFREUob3B0aW9ucyk7XG59O1xuXG5FREUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKGlucCwgaW5PZmYsIG91dCwgb3V0T2ZmKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2VkZVN0YXRlO1xuXG4gIHN0YXRlLmNpcGhlcnNbMF0uX3VwZGF0ZShpbnAsIGluT2ZmLCBvdXQsIG91dE9mZik7XG4gIHN0YXRlLmNpcGhlcnNbMV0uX3VwZGF0ZShvdXQsIG91dE9mZiwgb3V0LCBvdXRPZmYpO1xuICBzdGF0ZS5jaXBoZXJzWzJdLl91cGRhdGUob3V0LCBvdXRPZmYsIG91dCwgb3V0T2ZmKTtcbn07XG5cbkVERS5wcm90b3R5cGUuX3BhZCA9IERFUy5wcm90b3R5cGUuX3BhZDtcbkVERS5wcm90b3R5cGUuX3VucGFkID0gREVTLnByb3RvdHlwZS5fdW5wYWQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG52YXIgZGVzID0gcmVxdWlyZSgnLi4vZGVzJyk7XG52YXIgdXRpbHMgPSBkZXMudXRpbHM7XG52YXIgQ2lwaGVyID0gZGVzLkNpcGhlcjtcblxuZnVuY3Rpb24gREVTU3RhdGUoKSB7XG4gIHRoaXMudG1wID0gbmV3IEFycmF5KDIpO1xuICB0aGlzLmtleXMgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBERVMob3B0aW9ucykge1xuICBDaXBoZXIuY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICB2YXIgc3RhdGUgPSBuZXcgREVTU3RhdGUoKTtcbiAgdGhpcy5fZGVzU3RhdGUgPSBzdGF0ZTtcblxuICB0aGlzLmRlcml2ZUtleXMoc3RhdGUsIG9wdGlvbnMua2V5KTtcbn1cbmluaGVyaXRzKERFUywgQ2lwaGVyKTtcbm1vZHVsZS5leHBvcnRzID0gREVTO1xuXG5ERVMuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBERVMob3B0aW9ucyk7XG59O1xuXG52YXIgc2hpZnRUYWJsZSA9IFtcbiAgMSwgMSwgMiwgMiwgMiwgMiwgMiwgMixcbiAgMSwgMiwgMiwgMiwgMiwgMiwgMiwgMVxuXTtcblxuREVTLnByb3RvdHlwZS5kZXJpdmVLZXlzID0gZnVuY3Rpb24gZGVyaXZlS2V5cyhzdGF0ZSwga2V5KSB7XG4gIHN0YXRlLmtleXMgPSBuZXcgQXJyYXkoMTYgKiAyKTtcblxuICBhc3NlcnQuZXF1YWwoa2V5Lmxlbmd0aCwgdGhpcy5ibG9ja1NpemUsICdJbnZhbGlkIGtleSBsZW5ndGgnKTtcblxuICB2YXIga0wgPSB1dGlscy5yZWFkVUludDMyQkUoa2V5LCAwKTtcbiAgdmFyIGtSID0gdXRpbHMucmVhZFVJbnQzMkJFKGtleSwgNCk7XG5cbiAgdXRpbHMucGMxKGtMLCBrUiwgc3RhdGUudG1wLCAwKTtcbiAga0wgPSBzdGF0ZS50bXBbMF07XG4gIGtSID0gc3RhdGUudG1wWzFdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXRlLmtleXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIgc2hpZnQgPSBzaGlmdFRhYmxlW2kgPj4+IDFdO1xuICAgIGtMID0gdXRpbHMucjI4c2hsKGtMLCBzaGlmdCk7XG4gICAga1IgPSB1dGlscy5yMjhzaGwoa1IsIHNoaWZ0KTtcbiAgICB1dGlscy5wYzIoa0wsIGtSLCBzdGF0ZS5rZXlzLCBpKTtcbiAgfVxufTtcblxuREVTLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShpbnAsIGluT2ZmLCBvdXQsIG91dE9mZikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9kZXNTdGF0ZTtcblxuICB2YXIgbCA9IHV0aWxzLnJlYWRVSW50MzJCRShpbnAsIGluT2ZmKTtcbiAgdmFyIHIgPSB1dGlscy5yZWFkVUludDMyQkUoaW5wLCBpbk9mZiArIDQpO1xuXG4gIC8vIEluaXRpYWwgUGVybXV0YXRpb25cbiAgdXRpbHMuaXAobCwgciwgc3RhdGUudG1wLCAwKTtcbiAgbCA9IHN0YXRlLnRtcFswXTtcbiAgciA9IHN0YXRlLnRtcFsxXTtcblxuICBpZiAodGhpcy50eXBlID09PSAnZW5jcnlwdCcpXG4gICAgdGhpcy5fZW5jcnlwdChzdGF0ZSwgbCwgciwgc3RhdGUudG1wLCAwKTtcbiAgZWxzZVxuICAgIHRoaXMuX2RlY3J5cHQoc3RhdGUsIGwsIHIsIHN0YXRlLnRtcCwgMCk7XG5cbiAgbCA9IHN0YXRlLnRtcFswXTtcbiAgciA9IHN0YXRlLnRtcFsxXTtcblxuICB1dGlscy53cml0ZVVJbnQzMkJFKG91dCwgbCwgb3V0T2ZmKTtcbiAgdXRpbHMud3JpdGVVSW50MzJCRShvdXQsIHIsIG91dE9mZiArIDQpO1xufTtcblxuREVTLnByb3RvdHlwZS5fcGFkID0gZnVuY3Rpb24gX3BhZChidWZmZXIsIG9mZikge1xuICB2YXIgdmFsdWUgPSBidWZmZXIubGVuZ3RoIC0gb2ZmO1xuICBmb3IgKHZhciBpID0gb2ZmOyBpIDwgYnVmZmVyLmxlbmd0aDsgaSsrKVxuICAgIGJ1ZmZlcltpXSA9IHZhbHVlO1xuXG4gIHJldHVybiB0cnVlO1xufTtcblxuREVTLnByb3RvdHlwZS5fdW5wYWQgPSBmdW5jdGlvbiBfdW5wYWQoYnVmZmVyKSB7XG4gIHZhciBwYWQgPSBidWZmZXJbYnVmZmVyLmxlbmd0aCAtIDFdO1xuICBmb3IgKHZhciBpID0gYnVmZmVyLmxlbmd0aCAtIHBhZDsgaSA8IGJ1ZmZlci5sZW5ndGg7IGkrKylcbiAgICBhc3NlcnQuZXF1YWwoYnVmZmVyW2ldLCBwYWQpO1xuXG4gIHJldHVybiBidWZmZXIuc2xpY2UoMCwgYnVmZmVyLmxlbmd0aCAtIHBhZCk7XG59O1xuXG5ERVMucHJvdG90eXBlLl9lbmNyeXB0ID0gZnVuY3Rpb24gX2VuY3J5cHQoc3RhdGUsIGxTdGFydCwgclN0YXJ0LCBvdXQsIG9mZikge1xuICB2YXIgbCA9IGxTdGFydDtcbiAgdmFyIHIgPSByU3RhcnQ7XG5cbiAgLy8gQXBwbHkgZigpIHgxNiB0aW1lc1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXRlLmtleXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIga2V5TCA9IHN0YXRlLmtleXNbaV07XG4gICAgdmFyIGtleVIgPSBzdGF0ZS5rZXlzW2kgKyAxXTtcblxuICAgIC8vIGYociwgaylcbiAgICB1dGlscy5leHBhbmQociwgc3RhdGUudG1wLCAwKTtcblxuICAgIGtleUwgXj0gc3RhdGUudG1wWzBdO1xuICAgIGtleVIgXj0gc3RhdGUudG1wWzFdO1xuICAgIHZhciBzID0gdXRpbHMuc3Vic3RpdHV0ZShrZXlMLCBrZXlSKTtcbiAgICB2YXIgZiA9IHV0aWxzLnBlcm11dGUocyk7XG5cbiAgICB2YXIgdCA9IHI7XG4gICAgciA9IChsIF4gZikgPj4+IDA7XG4gICAgbCA9IHQ7XG4gIH1cblxuICAvLyBSZXZlcnNlIEluaXRpYWwgUGVybXV0YXRpb25cbiAgdXRpbHMucmlwKHIsIGwsIG91dCwgb2ZmKTtcbn07XG5cbkRFUy5wcm90b3R5cGUuX2RlY3J5cHQgPSBmdW5jdGlvbiBfZGVjcnlwdChzdGF0ZSwgbFN0YXJ0LCByU3RhcnQsIG91dCwgb2ZmKSB7XG4gIHZhciBsID0gclN0YXJ0O1xuICB2YXIgciA9IGxTdGFydDtcblxuICAvLyBBcHBseSBmKCkgeDE2IHRpbWVzXG4gIGZvciAodmFyIGkgPSBzdGF0ZS5rZXlzLmxlbmd0aCAtIDI7IGkgPj0gMDsgaSAtPSAyKSB7XG4gICAgdmFyIGtleUwgPSBzdGF0ZS5rZXlzW2ldO1xuICAgIHZhciBrZXlSID0gc3RhdGUua2V5c1tpICsgMV07XG5cbiAgICAvLyBmKHIsIGspXG4gICAgdXRpbHMuZXhwYW5kKGwsIHN0YXRlLnRtcCwgMCk7XG5cbiAgICBrZXlMIF49IHN0YXRlLnRtcFswXTtcbiAgICBrZXlSIF49IHN0YXRlLnRtcFsxXTtcbiAgICB2YXIgcyA9IHV0aWxzLnN1YnN0aXR1dGUoa2V5TCwga2V5Uik7XG4gICAgdmFyIGYgPSB1dGlscy5wZXJtdXRlKHMpO1xuXG4gICAgdmFyIHQgPSBsO1xuICAgIGwgPSAociBeIGYpID4+PiAwO1xuICAgIHIgPSB0O1xuICB9XG5cbiAgLy8gUmV2ZXJzZSBJbml0aWFsIFBlcm11dGF0aW9uXG4gIHV0aWxzLnJpcChsLCByLCBvdXQsIG9mZik7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG5mdW5jdGlvbiBDaXBoZXIob3B0aW9ucykge1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gIHRoaXMudHlwZSA9IHRoaXMub3B0aW9ucy50eXBlO1xuICB0aGlzLmJsb2NrU2l6ZSA9IDg7XG4gIHRoaXMuX2luaXQoKTtcblxuICB0aGlzLmJ1ZmZlciA9IG5ldyBBcnJheSh0aGlzLmJsb2NrU2l6ZSk7XG4gIHRoaXMuYnVmZmVyT2ZmID0gMDtcbn1cbm1vZHVsZS5leHBvcnRzID0gQ2lwaGVyO1xuXG5DaXBoZXIucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gX2luaXQoKSB7XG4gIC8vIE1pZ2h0IGJlIG92ZXJyaWRlZFxufTtcblxuQ2lwaGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoZGF0YSkge1xuICBpZiAoZGF0YS5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0aGlzLnR5cGUgPT09ICdkZWNyeXB0JylcbiAgICByZXR1cm4gdGhpcy5fdXBkYXRlRGVjcnlwdChkYXRhKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLl91cGRhdGVFbmNyeXB0KGRhdGEpO1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fYnVmZmVyID0gZnVuY3Rpb24gX2J1ZmZlcihkYXRhLCBvZmYpIHtcbiAgLy8gQXBwZW5kIGRhdGEgdG8gYnVmZmVyXG4gIHZhciBtaW4gPSBNYXRoLm1pbih0aGlzLmJ1ZmZlci5sZW5ndGggLSB0aGlzLmJ1ZmZlck9mZiwgZGF0YS5sZW5ndGggLSBvZmYpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1pbjsgaSsrKVxuICAgIHRoaXMuYnVmZmVyW3RoaXMuYnVmZmVyT2ZmICsgaV0gPSBkYXRhW29mZiArIGldO1xuICB0aGlzLmJ1ZmZlck9mZiArPSBtaW47XG5cbiAgLy8gU2hpZnQgbmV4dFxuICByZXR1cm4gbWluO1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fZmx1c2hCdWZmZXIgPSBmdW5jdGlvbiBfZmx1c2hCdWZmZXIob3V0LCBvZmYpIHtcbiAgdGhpcy5fdXBkYXRlKHRoaXMuYnVmZmVyLCAwLCBvdXQsIG9mZik7XG4gIHRoaXMuYnVmZmVyT2ZmID0gMDtcbiAgcmV0dXJuIHRoaXMuYmxvY2tTaXplO1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlRW5jcnlwdCA9IGZ1bmN0aW9uIF91cGRhdGVFbmNyeXB0KGRhdGEpIHtcbiAgdmFyIGlucHV0T2ZmID0gMDtcbiAgdmFyIG91dHB1dE9mZiA9IDA7XG5cbiAgdmFyIGNvdW50ID0gKCh0aGlzLmJ1ZmZlck9mZiArIGRhdGEubGVuZ3RoKSAvIHRoaXMuYmxvY2tTaXplKSB8IDA7XG4gIHZhciBvdXQgPSBuZXcgQXJyYXkoY291bnQgKiB0aGlzLmJsb2NrU2l6ZSk7XG5cbiAgaWYgKHRoaXMuYnVmZmVyT2ZmICE9PSAwKSB7XG4gICAgaW5wdXRPZmYgKz0gdGhpcy5fYnVmZmVyKGRhdGEsIGlucHV0T2ZmKTtcblxuICAgIGlmICh0aGlzLmJ1ZmZlck9mZiA9PT0gdGhpcy5idWZmZXIubGVuZ3RoKVxuICAgICAgb3V0cHV0T2ZmICs9IHRoaXMuX2ZsdXNoQnVmZmVyKG91dCwgb3V0cHV0T2ZmKTtcbiAgfVxuXG4gIC8vIFdyaXRlIGJsb2Nrc1xuICB2YXIgbWF4ID0gZGF0YS5sZW5ndGggLSAoKGRhdGEubGVuZ3RoIC0gaW5wdXRPZmYpICUgdGhpcy5ibG9ja1NpemUpO1xuICBmb3IgKDsgaW5wdXRPZmYgPCBtYXg7IGlucHV0T2ZmICs9IHRoaXMuYmxvY2tTaXplKSB7XG4gICAgdGhpcy5fdXBkYXRlKGRhdGEsIGlucHV0T2ZmLCBvdXQsIG91dHB1dE9mZik7XG4gICAgb3V0cHV0T2ZmICs9IHRoaXMuYmxvY2tTaXplO1xuICB9XG5cbiAgLy8gUXVldWUgcmVzdFxuICBmb3IgKDsgaW5wdXRPZmYgPCBkYXRhLmxlbmd0aDsgaW5wdXRPZmYrKywgdGhpcy5idWZmZXJPZmYrKylcbiAgICB0aGlzLmJ1ZmZlclt0aGlzLmJ1ZmZlck9mZl0gPSBkYXRhW2lucHV0T2ZmXTtcblxuICByZXR1cm4gb3V0O1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlRGVjcnlwdCA9IGZ1bmN0aW9uIF91cGRhdGVEZWNyeXB0KGRhdGEpIHtcbiAgdmFyIGlucHV0T2ZmID0gMDtcbiAgdmFyIG91dHB1dE9mZiA9IDA7XG5cbiAgdmFyIGNvdW50ID0gTWF0aC5jZWlsKCh0aGlzLmJ1ZmZlck9mZiArIGRhdGEubGVuZ3RoKSAvIHRoaXMuYmxvY2tTaXplKSAtIDE7XG4gIHZhciBvdXQgPSBuZXcgQXJyYXkoY291bnQgKiB0aGlzLmJsb2NrU2l6ZSk7XG5cbiAgLy8gVE9ETyhpbmR1dG55KTogb3B0aW1pemUgaXQsIHRoaXMgaXMgZmFyIGZyb20gb3B0aW1hbFxuICBmb3IgKDsgY291bnQgPiAwOyBjb3VudC0tKSB7XG4gICAgaW5wdXRPZmYgKz0gdGhpcy5fYnVmZmVyKGRhdGEsIGlucHV0T2ZmKTtcbiAgICBvdXRwdXRPZmYgKz0gdGhpcy5fZmx1c2hCdWZmZXIob3V0LCBvdXRwdXRPZmYpO1xuICB9XG5cbiAgLy8gQnVmZmVyIHJlc3Qgb2YgdGhlIGlucHV0XG4gIGlucHV0T2ZmICs9IHRoaXMuX2J1ZmZlcihkYXRhLCBpbnB1dE9mZik7XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuZmluYWwgPSBmdW5jdGlvbiBmaW5hbChidWZmZXIpIHtcbiAgdmFyIGZpcnN0O1xuICBpZiAoYnVmZmVyKVxuICAgIGZpcnN0ID0gdGhpcy51cGRhdGUoYnVmZmVyKTtcblxuICB2YXIgbGFzdDtcbiAgaWYgKHRoaXMudHlwZSA9PT0gJ2VuY3J5cHQnKVxuICAgIGxhc3QgPSB0aGlzLl9maW5hbEVuY3J5cHQoKTtcbiAgZWxzZVxuICAgIGxhc3QgPSB0aGlzLl9maW5hbERlY3J5cHQoKTtcblxuICBpZiAoZmlyc3QpXG4gICAgcmV0dXJuIGZpcnN0LmNvbmNhdChsYXN0KTtcbiAgZWxzZVxuICAgIHJldHVybiBsYXN0O1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fcGFkID0gZnVuY3Rpb24gX3BhZChidWZmZXIsIG9mZikge1xuICBpZiAob2ZmID09PSAwKVxuICAgIHJldHVybiBmYWxzZTtcblxuICB3aGlsZSAob2ZmIDwgYnVmZmVyLmxlbmd0aClcbiAgICBidWZmZXJbb2ZmKytdID0gMDtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX2ZpbmFsRW5jcnlwdCA9IGZ1bmN0aW9uIF9maW5hbEVuY3J5cHQoKSB7XG4gIGlmICghdGhpcy5fcGFkKHRoaXMuYnVmZmVyLCB0aGlzLmJ1ZmZlck9mZikpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBvdXQgPSBuZXcgQXJyYXkodGhpcy5ibG9ja1NpemUpO1xuICB0aGlzLl91cGRhdGUodGhpcy5idWZmZXIsIDAsIG91dCwgMCk7XG4gIHJldHVybiBvdXQ7XG59O1xuXG5DaXBoZXIucHJvdG90eXBlLl91bnBhZCA9IGZ1bmN0aW9uIF91bnBhZChidWZmZXIpIHtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX2ZpbmFsRGVjcnlwdCA9IGZ1bmN0aW9uIF9maW5hbERlY3J5cHQoKSB7XG4gIGFzc2VydC5lcXVhbCh0aGlzLmJ1ZmZlck9mZiwgdGhpcy5ibG9ja1NpemUsICdOb3QgZW5vdWdoIGRhdGEgdG8gZGVjcnlwdCcpO1xuICB2YXIgb3V0ID0gbmV3IEFycmF5KHRoaXMuYmxvY2tTaXplKTtcbiAgdGhpcy5fZmx1c2hCdWZmZXIob3V0LCAwKTtcblxuICByZXR1cm4gdGhpcy5fdW5wYWQob3V0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG52YXIgcHJvdG8gPSB7fTtcblxuZnVuY3Rpb24gQ0JDU3RhdGUoaXYpIHtcbiAgYXNzZXJ0LmVxdWFsKGl2Lmxlbmd0aCwgOCwgJ0ludmFsaWQgSVYgbGVuZ3RoJyk7XG5cbiAgdGhpcy5pdiA9IG5ldyBBcnJheSg4KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLml2Lmxlbmd0aDsgaSsrKVxuICAgIHRoaXMuaXZbaV0gPSBpdltpXTtcbn1cblxuZnVuY3Rpb24gaW5zdGFudGlhdGUoQmFzZSkge1xuICBmdW5jdGlvbiBDQkMob3B0aW9ucykge1xuICAgIEJhc2UuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgICB0aGlzLl9jYmNJbml0KCk7XG4gIH1cbiAgaW5oZXJpdHMoQ0JDLCBCYXNlKTtcblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHByb3RvKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgQ0JDLnByb3RvdHlwZVtrZXldID0gcHJvdG9ba2V5XTtcbiAgfVxuXG4gIENCQy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUob3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgQ0JDKG9wdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiBDQkM7XG59XG5cbmV4cG9ydHMuaW5zdGFudGlhdGUgPSBpbnN0YW50aWF0ZTtcblxucHJvdG8uX2NiY0luaXQgPSBmdW5jdGlvbiBfY2JjSW5pdCgpIHtcbiAgdmFyIHN0YXRlID0gbmV3IENCQ1N0YXRlKHRoaXMub3B0aW9ucy5pdik7XG4gIHRoaXMuX2NiY1N0YXRlID0gc3RhdGU7XG59O1xuXG5wcm90by5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShpbnAsIGluT2ZmLCBvdXQsIG91dE9mZikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9jYmNTdGF0ZTtcbiAgdmFyIHN1cGVyUHJvdG8gPSB0aGlzLmNvbnN0cnVjdG9yLnN1cGVyXy5wcm90b3R5cGU7XG5cbiAgdmFyIGl2ID0gc3RhdGUuaXY7XG4gIGlmICh0aGlzLnR5cGUgPT09ICdlbmNyeXB0Jykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ibG9ja1NpemU7IGkrKylcbiAgICAgIGl2W2ldIF49IGlucFtpbk9mZiArIGldO1xuXG4gICAgc3VwZXJQcm90by5fdXBkYXRlLmNhbGwodGhpcywgaXYsIDAsIG91dCwgb3V0T2ZmKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ibG9ja1NpemU7IGkrKylcbiAgICAgIGl2W2ldID0gb3V0W291dE9mZiArIGldO1xuICB9IGVsc2Uge1xuICAgIHN1cGVyUHJvdG8uX3VwZGF0ZS5jYWxsKHRoaXMsIGlucCwgaW5PZmYsIG91dCwgb3V0T2ZmKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ibG9ja1NpemU7IGkrKylcbiAgICAgIG91dFtvdXRPZmYgKyBpXSBePSBpdltpXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ibG9ja1NpemU7IGkrKylcbiAgICAgIGl2W2ldID0gaW5wW2luT2ZmICsgaV07XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGFzc2VydDtcblxuZnVuY3Rpb24gYXNzZXJ0KHZhbCwgbXNnKSB7XG4gIGlmICghdmFsKVxuICAgIHRocm93IG5ldyBFcnJvcihtc2cgfHwgJ0Fzc2VydGlvbiBmYWlsZWQnKTtcbn1cblxuYXNzZXJ0LmVxdWFsID0gZnVuY3Rpb24gYXNzZXJ0RXF1YWwobCwgciwgbXNnKSB7XG4gIGlmIChsICE9IHIpXG4gICAgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCAoJ0Fzc2VydGlvbiBmYWlsZWQ6ICcgKyBsICsgJyAhPSAnICsgcikpO1xufTtcbiIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdzdHJlYW0nKS5UcmFuc2Zvcm1cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXInKS5TdHJpbmdEZWNvZGVyXG5tb2R1bGUuZXhwb3J0cyA9IENpcGhlckJhc2VcbmluaGVyaXRzKENpcGhlckJhc2UsIFRyYW5zZm9ybSlcbmZ1bmN0aW9uIENpcGhlckJhc2UgKGhhc2hNb2RlKSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuaGFzaE1vZGUgPSB0eXBlb2YgaGFzaE1vZGUgPT09ICdzdHJpbmcnXG4gIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgdGhpc1toYXNoTW9kZV0gPSB0aGlzLl9maW5hbE9yRGlnZXN0XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5maW5hbCA9IHRoaXMuX2ZpbmFsT3JEaWdlc3RcbiAgfVxuICB0aGlzLl9kZWNvZGVyID0gbnVsbFxuICB0aGlzLl9lbmNvZGluZyA9IG51bGxcbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBpbnB1dEVuYywgb3V0cHV0RW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBkYXRhID0gbmV3IEJ1ZmZlcihkYXRhLCBpbnB1dEVuYylcbiAgfVxuICB2YXIgb3V0RGF0YSA9IHRoaXMuX3VwZGF0ZShkYXRhKVxuICBpZiAodGhpcy5oYXNoTW9kZSkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cbiAgaWYgKG91dHB1dEVuYykge1xuICAgIG91dERhdGEgPSB0aGlzLl90b1N0cmluZyhvdXREYXRhLCBvdXRwdXRFbmMpXG4gIH1cbiAgcmV0dXJuIG91dERhdGFcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QXV0b1BhZGRpbmcgPSBmdW5jdGlvbiAoKSB7fVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5nZXRBdXRoVGFnID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBnZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBdXRoVGFnID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBzZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBQUQgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhYWQgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGRhdGEsIF8sIG5leHQpIHtcbiAgdmFyIGVyclxuICB0cnkge1xuICAgIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgICB0aGlzLl91cGRhdGUoZGF0YSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXNoKHRoaXMuX3VwZGF0ZShkYXRhKSlcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnIgPSBlXG4gIH0gZmluYWxseSB7XG4gICAgbmV4dChlcnIpXG4gIH1cbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLl9mbHVzaCA9IGZ1bmN0aW9uIChkb25lKSB7XG4gIHZhciBlcnJcbiAgdHJ5IHtcbiAgICB0aGlzLnB1c2godGhpcy5fZmluYWwoKSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfSBmaW5hbGx5IHtcbiAgICBkb25lKGVycilcbiAgfVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZpbmFsT3JEaWdlc3QgPSBmdW5jdGlvbiAob3V0cHV0RW5jKSB7XG4gIHZhciBvdXREYXRhID0gdGhpcy5fZmluYWwoKSB8fCBuZXcgQnVmZmVyKCcnKVxuICBpZiAob3V0cHV0RW5jKSB7XG4gICAgb3V0RGF0YSA9IHRoaXMuX3RvU3RyaW5nKG91dERhdGEsIG91dHB1dEVuYywgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb3V0RGF0YVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fdG9TdHJpbmcgPSBmdW5jdGlvbiAodmFsdWUsIGVuYywgZmluYWwpIHtcbiAgaWYgKCF0aGlzLl9kZWNvZGVyKSB7XG4gICAgdGhpcy5fZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYylcbiAgICB0aGlzLl9lbmNvZGluZyA9IGVuY1xuICB9XG4gIGlmICh0aGlzLl9lbmNvZGluZyAhPT0gZW5jKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYW5cXCd0IHN3aXRjaCBlbmNvZGluZ3MnKVxuICB9XG4gIHZhciBvdXQgPSB0aGlzLl9kZWNvZGVyLndyaXRlKHZhbHVlKVxuICBpZiAoZmluYWwpIHtcbiAgICBvdXQgKz0gdGhpcy5fZGVjb2Rlci5lbmQoKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZbkp2ZDNObGNtbG1lUzFqYVhCb1pYSXZibTlrWlY5dGIyUjFiR1Z6TDJKeWIzZHpaWEpwWm5rdFpHVnpMMjV2WkdWZmJXOWtkV3hsY3k5amFYQm9aWEl0WW1GelpTOXBibVJsZUM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkluWmhjaUJVY21GdWMyWnZjbTBnUFNCeVpYRjFhWEpsS0NkemRISmxZVzBuS1M1VWNtRnVjMlp2Y20xY2JuWmhjaUJwYm1obGNtbDBjeUE5SUhKbGNYVnBjbVVvSjJsdWFHVnlhWFJ6SnlsY2JuWmhjaUJUZEhKcGJtZEVaV052WkdWeUlEMGdjbVZ4ZFdseVpTZ25jM1J5YVc1blgyUmxZMjlrWlhJbktTNVRkSEpwYm1kRVpXTnZaR1Z5WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUVOcGNHaGxja0poYzJWY2JtbHVhR1Z5YVhSektFTnBjR2hsY2tKaGMyVXNJRlJ5WVc1elptOXliU2xjYm1aMWJtTjBhVzl1SUVOcGNHaGxja0poYzJVZ0tHaGhjMmhOYjJSbEtTQjdYRzRnSUZSeVlXNXpabTl5YlM1allXeHNLSFJvYVhNcFhHNGdJSFJvYVhNdWFHRnphRTF2WkdVZ1BTQjBlWEJsYjJZZ2FHRnphRTF2WkdVZ1BUMDlJQ2R6ZEhKcGJtY25YRzRnSUdsbUlDaDBhR2x6TG1oaGMyaE5iMlJsS1NCN1hHNGdJQ0FnZEdocGMxdG9ZWE5vVFc5a1pWMGdQU0IwYUdsekxsOW1hVzVoYkU5eVJHbG5aWE4wWEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnZEdocGN5NW1hVzVoYkNBOUlIUm9hWE11WDJacGJtRnNUM0pFYVdkbGMzUmNiaUFnZlZ4dUlDQjBhR2x6TGw5a1pXTnZaR1Z5SUQwZ2JuVnNiRnh1SUNCMGFHbHpMbDlsYm1OdlpHbHVaeUE5SUc1MWJHeGNibjFjYmtOcGNHaGxja0poYzJVdWNISnZkRzkwZVhCbExuVndaR0YwWlNBOUlHWjFibU4wYVc5dUlDaGtZWFJoTENCcGJuQjFkRVZ1WXl3Z2IzVjBjSFYwUlc1aktTQjdYRzRnSUdsbUlDaDBlWEJsYjJZZ1pHRjBZU0E5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNCa1lYUmhJRDBnYm1WM0lFSjFabVpsY2loa1lYUmhMQ0JwYm5CMWRFVnVZeWxjYmlBZ2ZWeHVJQ0IyWVhJZ2IzVjBSR0YwWVNBOUlIUm9hWE11WDNWd1pHRjBaU2hrWVhSaEtWeHVJQ0JwWmlBb2RHaHBjeTVvWVhOb1RXOWtaU2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6WEc0Z0lIMWNiaUFnYVdZZ0tHOTFkSEIxZEVWdVl5a2dlMXh1SUNBZ0lHOTFkRVJoZEdFZ1BTQjBhR2x6TGw5MGIxTjBjbWx1WnlodmRYUkVZWFJoTENCdmRYUndkWFJGYm1NcFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUc5MWRFUmhkR0ZjYm4xY2JseHVRMmx3YUdWeVFtRnpaUzV3Y205MGIzUjVjR1V1YzJWMFFYVjBiMUJoWkdScGJtY2dQU0JtZFc1amRHbHZiaUFvS1NCN2ZWeHVYRzVEYVhCb1pYSkNZWE5sTG5CeWIzUnZkSGx3WlM1blpYUkJkWFJvVkdGbklEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0ozUnllV2x1WnlCMGJ5Qm5aWFFnWVhWMGFDQjBZV2NnYVc0Z2RXNXpkWEJ3YjNKMFpXUWdjM1JoZEdVbktWeHVmVnh1WEc1RGFYQm9aWEpDWVhObExuQnliM1J2ZEhsd1pTNXpaWFJCZFhSb1ZHRm5JRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KM1J5ZVdsdVp5QjBieUJ6WlhRZ1lYVjBhQ0IwWVdjZ2FXNGdkVzV6ZFhCd2IzSjBaV1FnYzNSaGRHVW5LVnh1ZlZ4dVhHNURhWEJvWlhKQ1lYTmxMbkJ5YjNSdmRIbHdaUzV6WlhSQlFVUWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25kSEo1YVc1bklIUnZJSE5sZENCaFlXUWdhVzRnZFc1emRYQndiM0owWldRZ2MzUmhkR1VuS1Z4dWZWeHVYRzVEYVhCb1pYSkNZWE5sTG5CeWIzUnZkSGx3WlM1ZmRISmhibk5tYjNKdElEMGdablZ1WTNScGIyNGdLR1JoZEdFc0lGOHNJRzVsZUhRcElIdGNiaUFnZG1GeUlHVnljbHh1SUNCMGNua2dlMXh1SUNBZ0lHbG1JQ2gwYUdsekxtaGhjMmhOYjJSbEtTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5MWNHUmhkR1VvWkdGMFlTbGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnZEdocGN5NXdkWE5vS0hSb2FYTXVYM1Z3WkdGMFpTaGtZWFJoS1NsY2JpQWdJQ0I5WEc0Z0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQmxjbklnUFNCbFhHNGdJSDBnWm1sdVlXeHNlU0I3WEc0Z0lDQWdibVY0ZENobGNuSXBYRzRnSUgxY2JuMWNia05wY0dobGNrSmhjMlV1Y0hKdmRHOTBlWEJsTGw5bWJIVnphQ0E5SUdaMWJtTjBhVzl1SUNoa2IyNWxLU0I3WEc0Z0lIWmhjaUJsY25KY2JpQWdkSEo1SUh0Y2JpQWdJQ0IwYUdsekxuQjFjMmdvZEdocGN5NWZabWx1WVd3b0tTbGNiaUFnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUdWeWNpQTlJR1ZjYmlBZ2ZTQm1hVzVoYkd4NUlIdGNiaUFnSUNCa2IyNWxLR1Z5Y2lsY2JpQWdmVnh1ZlZ4dVEybHdhR1Z5UW1GelpTNXdjbTkwYjNSNWNHVXVYMlpwYm1Gc1QzSkVhV2RsYzNRZ1BTQm1kVzVqZEdsdmJpQW9iM1YwY0hWMFJXNWpLU0I3WEc0Z0lIWmhjaUJ2ZFhSRVlYUmhJRDBnZEdocGN5NWZabWx1WVd3b0tTQjhmQ0J1WlhjZ1FuVm1abVZ5S0NjbktWeHVJQ0JwWmlBb2IzVjBjSFYwUlc1aktTQjdYRzRnSUNBZ2IzVjBSR0YwWVNBOUlIUm9hWE11WDNSdlUzUnlhVzVuS0c5MWRFUmhkR0VzSUc5MWRIQjFkRVZ1WXl3Z2RISjFaU2xjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdiM1YwUkdGMFlWeHVmVnh1WEc1RGFYQm9aWEpDWVhObExuQnliM1J2ZEhsd1pTNWZkRzlUZEhKcGJtY2dQU0JtZFc1amRHbHZiaUFvZG1Gc2RXVXNJR1Z1WXl3Z1ptbHVZV3dwSUh0Y2JpQWdhV1lnS0NGMGFHbHpMbDlrWldOdlpHVnlLU0I3WEc0Z0lDQWdkR2hwY3k1ZlpHVmpiMlJsY2lBOUlHNWxkeUJUZEhKcGJtZEVaV052WkdWeUtHVnVZeWxjYmlBZ0lDQjBhR2x6TGw5bGJtTnZaR2x1WnlBOUlHVnVZMXh1SUNCOVhHNGdJR2xtSUNoMGFHbHpMbDlsYm1OdlpHbHVaeUFoUFQwZ1pXNWpLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZGpZVzVjWENkMElITjNhWFJqYUNCbGJtTnZaR2x1WjNNbktWeHVJQ0I5WEc0Z0lIWmhjaUJ2ZFhRZ1BTQjBhR2x6TGw5a1pXTnZaR1Z5TG5keWFYUmxLSFpoYkhWbEtWeHVJQ0JwWmlBb1ptbHVZV3dwSUh0Y2JpQWdJQ0J2ZFhRZ0t6MGdkR2hwY3k1ZlpHVmpiMlJsY2k1bGJtUW9LVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnZkWFJjYm4xY2JpSmRmUT09IiwidmFyIGNpcGhlcnMgPSByZXF1aXJlKCcuL2VuY3J5cHRlcicpXG5leHBvcnRzLmNyZWF0ZUNpcGhlciA9IGV4cG9ydHMuQ2lwaGVyID0gY2lwaGVycy5jcmVhdGVDaXBoZXJcbmV4cG9ydHMuY3JlYXRlQ2lwaGVyaXYgPSBleHBvcnRzLkNpcGhlcml2ID0gY2lwaGVycy5jcmVhdGVDaXBoZXJpdlxudmFyIGRlY2lwaGVycyA9IHJlcXVpcmUoJy4vZGVjcnlwdGVyJylcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXIgPSBleHBvcnRzLkRlY2lwaGVyID0gZGVjaXBoZXJzLmNyZWF0ZURlY2lwaGVyXG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyaXYgPSBleHBvcnRzLkRlY2lwaGVyaXYgPSBkZWNpcGhlcnMuY3JlYXRlRGVjaXBoZXJpdlxudmFyIG1vZGVzID0gcmVxdWlyZSgnLi9tb2RlcycpXG5mdW5jdGlvbiBnZXRDaXBoZXJzICgpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG1vZGVzKVxufVxuZXhwb3J0cy5saXN0Q2lwaGVycyA9IGV4cG9ydHMuZ2V0Q2lwaGVycyA9IGdldENpcGhlcnNcbiIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIG1vZGVzID0gcmVxdWlyZSgnLi9tb2RlcycpXG52YXIgZWJ0ayA9IHJlcXVpcmUoJ2V2cF9ieXRlc3Rva2V5JylcbnZhciBTdHJlYW1DaXBoZXIgPSByZXF1aXJlKCcuL3N0cmVhbUNpcGhlcicpXG52YXIgQXV0aENpcGhlciA9IHJlcXVpcmUoJy4vYXV0aENpcGhlcicpXG5pbmhlcml0cyhDaXBoZXIsIFRyYW5zZm9ybSlcbmZ1bmN0aW9uIENpcGhlciAobW9kZSwga2V5LCBpdikge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQ2lwaGVyKSkge1xuICAgIHJldHVybiBuZXcgQ2lwaGVyKG1vZGUsIGtleSwgaXYpXG4gIH1cbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5fY2FjaGUgPSBuZXcgU3BsaXR0ZXIoKVxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBuZXcgQnVmZmVyKGl2Lmxlbmd0aClcbiAgaXYuY29weSh0aGlzLl9wcmV2KVxuICB0aGlzLl9tb2RlID0gbW9kZVxuICB0aGlzLl9hdXRvcGFkZGluZyA9IHRydWVcbn1cbkNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX2NhY2hlLmFkZChkYXRhKVxuICB2YXIgY2h1bmtcbiAgdmFyIHRoaW5nXG4gIHZhciBvdXQgPSBbXVxuICB3aGlsZSAoKGNodW5rID0gdGhpcy5fY2FjaGUuZ2V0KCkpKSB7XG4gICAgdGhpbmcgPSB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmspXG4gICAgb3V0LnB1c2godGhpbmcpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQob3V0KVxufVxuQ2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjaHVuayA9IHRoaXMuX2NhY2hlLmZsdXNoKClcbiAgaWYgKHRoaXMuX2F1dG9wYWRkaW5nKSB7XG4gICAgY2h1bmsgPSB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmspXG4gICAgdGhpcy5fY2lwaGVyLnNjcnViKClcbiAgICByZXR1cm4gY2h1bmtcbiAgfSBlbHNlIGlmIChjaHVuay50b1N0cmluZygnaGV4JykgIT09ICcxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMCcpIHtcbiAgICB0aGlzLl9jaXBoZXIuc2NydWIoKVxuICAgIHRocm93IG5ldyBFcnJvcignZGF0YSBub3QgbXVsdGlwbGUgb2YgYmxvY2sgbGVuZ3RoJylcbiAgfVxufVxuQ2lwaGVyLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uIChzZXRUbykge1xuICB0aGlzLl9hdXRvcGFkZGluZyA9ICEhc2V0VG9cbn1cblxuZnVuY3Rpb24gU3BsaXR0ZXIgKCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU3BsaXR0ZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBTcGxpdHRlcigpXG4gIH1cbiAgdGhpcy5jYWNoZSA9IG5ldyBCdWZmZXIoJycpXG59XG5TcGxpdHRlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIGRhdGFdKVxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGggPiAxNSkge1xuICAgIHZhciBvdXQgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgIHRoaXMuY2FjaGUgPSB0aGlzLmNhY2hlLnNsaWNlKDE2KVxuICAgIHJldHVybiBvdXRcbiAgfVxuICByZXR1cm4gbnVsbFxufVxuU3BsaXR0ZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbGVuID0gMTYgLSB0aGlzLmNhY2hlLmxlbmd0aFxuICB2YXIgcGFkQnVmZiA9IG5ldyBCdWZmZXIobGVuKVxuXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIHBhZEJ1ZmYud3JpdGVVSW50OChsZW4sIGkpXG4gIH1cbiAgdmFyIG91dCA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIHBhZEJ1ZmZdKVxuICByZXR1cm4gb3V0XG59XG52YXIgbW9kZWxpc3QgPSB7XG4gIEVDQjogcmVxdWlyZSgnLi9tb2Rlcy9lY2InKSxcbiAgQ0JDOiByZXF1aXJlKCcuL21vZGVzL2NiYycpLFxuICBDRkI6IHJlcXVpcmUoJy4vbW9kZXMvY2ZiJyksXG4gIENGQjg6IHJlcXVpcmUoJy4vbW9kZXMvY2ZiOCcpLFxuICBDRkIxOiByZXF1aXJlKCcuL21vZGVzL2NmYjEnKSxcbiAgT0ZCOiByZXF1aXJlKCcuL21vZGVzL29mYicpLFxuICBDVFI6IHJlcXVpcmUoJy4vbW9kZXMvY3RyJyksXG4gIEdDTTogcmVxdWlyZSgnLi9tb2Rlcy9jdHInKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDaXBoZXJpdiAoc3VpdGUsIHBhc3N3b3JkLCBpdikge1xuICB2YXIgY29uZmlnID0gbW9kZXNbc3VpdGUudG9Mb3dlckNhc2UoKV1cbiAgaWYgKCFjb25maWcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuICB9XG4gIGlmICh0eXBlb2YgaXYgPT09ICdzdHJpbmcnKSB7XG4gICAgaXYgPSBuZXcgQnVmZmVyKGl2KVxuICB9XG4gIGlmICh0eXBlb2YgcGFzc3dvcmQgPT09ICdzdHJpbmcnKSB7XG4gICAgcGFzc3dvcmQgPSBuZXcgQnVmZmVyKHBhc3N3b3JkKVxuICB9XG4gIGlmIChwYXNzd29yZC5sZW5ndGggIT09IGNvbmZpZy5rZXkgLyA4KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBrZXkgbGVuZ3RoICcgKyBwYXNzd29yZC5sZW5ndGgpXG4gIH1cbiAgaWYgKGl2Lmxlbmd0aCAhPT0gY29uZmlnLml2KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBpdiBsZW5ndGggJyArIGl2Lmxlbmd0aClcbiAgfVxuICBpZiAoY29uZmlnLnR5cGUgPT09ICdzdHJlYW0nKSB7XG4gICAgcmV0dXJuIG5ldyBTdHJlYW1DaXBoZXIobW9kZWxpc3RbY29uZmlnLm1vZGVdLCBwYXNzd29yZCwgaXYpXG4gIH0gZWxzZSBpZiAoY29uZmlnLnR5cGUgPT09ICdhdXRoJykge1xuICAgIHJldHVybiBuZXcgQXV0aENpcGhlcihtb2RlbGlzdFtjb25maWcubW9kZV0sIHBhc3N3b3JkLCBpdilcbiAgfVxuICByZXR1cm4gbmV3IENpcGhlcihtb2RlbGlzdFtjb25maWcubW9kZV0sIHBhc3N3b3JkLCBpdilcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHZhciBjb25maWcgPSBtb2Rlc1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwgY29uZmlnLmtleSwgY29uZmlnLml2KVxuICByZXR1cm4gY3JlYXRlQ2lwaGVyaXYoc3VpdGUsIGtleXMua2V5LCBrZXlzLml2KVxufVxuXG5leHBvcnRzLmNyZWF0ZUNpcGhlcml2ID0gY3JlYXRlQ2lwaGVyaXZcbmV4cG9ydHMuY3JlYXRlQ2lwaGVyID0gY3JlYXRlQ2lwaGVyXG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WW5KdmQzTmxjbWxtZVMxamFYQm9aWEl2Ym05a1pWOXRiMlIxYkdWekwySnliM2R6WlhKcFpua3RZV1Z6TDJWdVkzSjVjSFJsY2k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUdGbGN5QTlJSEpsY1hWcGNtVW9KeTR2WVdWekp5bGNiblpoY2lCVWNtRnVjMlp2Y20wZ1BTQnlaWEYxYVhKbEtDZGphWEJvWlhJdFltRnpaU2NwWEc1MllYSWdhVzVvWlhKcGRITWdQU0J5WlhGMWFYSmxLQ2RwYm1obGNtbDBjeWNwWEc1MllYSWdiVzlrWlhNZ1BTQnlaWEYxYVhKbEtDY3VMMjF2WkdWekp5bGNiblpoY2lCbFluUnJJRDBnY21WeGRXbHlaU2duWlhad1gySjVkR1Z6ZEc5clpYa25LVnh1ZG1GeUlGTjBjbVZoYlVOcGNHaGxjaUE5SUhKbGNYVnBjbVVvSnk0dmMzUnlaV0Z0UTJsd2FHVnlKeWxjYm5aaGNpQkJkWFJvUTJsd2FHVnlJRDBnY21WeGRXbHlaU2duTGk5aGRYUm9RMmx3YUdWeUp5bGNibWx1YUdWeWFYUnpLRU5wY0dobGNpd2dWSEpoYm5ObWIzSnRLVnh1Wm5WdVkzUnBiMjRnUTJsd2FHVnlJQ2h0YjJSbExDQnJaWGtzSUdsMktTQjdYRzRnSUdsbUlDZ2hLSFJvYVhNZ2FXNXpkR0Z1WTJWdlppQkRhWEJvWlhJcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QkRhWEJvWlhJb2JXOWtaU3dnYTJWNUxDQnBkaWxjYmlBZ2ZWeHVJQ0JVY21GdWMyWnZjbTB1WTJGc2JDaDBhR2x6S1Z4dUlDQjBhR2x6TGw5allXTm9aU0E5SUc1bGR5QlRjR3hwZEhSbGNpZ3BYRzRnSUhSb2FYTXVYMk5wY0dobGNpQTlJRzVsZHlCaFpYTXVRVVZUS0d0bGVTbGNiaUFnZEdocGN5NWZjSEpsZGlBOUlHNWxkeUJDZFdabVpYSW9hWFl1YkdWdVozUm9LVnh1SUNCcGRpNWpiM0I1S0hSb2FYTXVYM0J5WlhZcFhHNGdJSFJvYVhNdVgyMXZaR1VnUFNCdGIyUmxYRzRnSUhSb2FYTXVYMkYxZEc5d1lXUmthVzVuSUQwZ2RISjFaVnh1ZlZ4dVEybHdhR1Z5TG5CeWIzUnZkSGx3WlM1ZmRYQmtZWFJsSUQwZ1puVnVZM1JwYjI0Z0tHUmhkR0VwSUh0Y2JpQWdkR2hwY3k1ZlkyRmphR1V1WVdSa0tHUmhkR0VwWEc0Z0lIWmhjaUJqYUhWdWExeHVJQ0IyWVhJZ2RHaHBibWRjYmlBZ2RtRnlJRzkxZENBOUlGdGRYRzRnSUhkb2FXeGxJQ2dvWTJoMWJtc2dQU0IwYUdsekxsOWpZV05vWlM1blpYUW9LU2twSUh0Y2JpQWdJQ0IwYUdsdVp5QTlJSFJvYVhNdVgyMXZaR1V1Wlc1amNubHdkQ2gwYUdsekxDQmphSFZ1YXlsY2JpQWdJQ0J2ZFhRdWNIVnphQ2gwYUdsdVp5bGNiaUFnZlZ4dUlDQnlaWFIxY200Z1FuVm1abVZ5TG1OdmJtTmhkQ2h2ZFhRcFhHNTlYRzVEYVhCb1pYSXVjSEp2ZEc5MGVYQmxMbDltYVc1aGJDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdkbUZ5SUdOb2RXNXJJRDBnZEdocGN5NWZZMkZqYUdVdVpteDFjMmdvS1Z4dUlDQnBaaUFvZEdocGN5NWZZWFYwYjNCaFpHUnBibWNwSUh0Y2JpQWdJQ0JqYUhWdWF5QTlJSFJvYVhNdVgyMXZaR1V1Wlc1amNubHdkQ2gwYUdsekxDQmphSFZ1YXlsY2JpQWdJQ0IwYUdsekxsOWphWEJvWlhJdWMyTnlkV0lvS1Z4dUlDQWdJSEpsZEhWeWJpQmphSFZ1YTF4dUlDQjlJR1ZzYzJVZ2FXWWdLR05vZFc1ckxuUnZVM1J5YVc1bktDZG9aWGduS1NBaFBUMGdKekV3TVRBeE1ERXdNVEF4TURFd01UQXhNREV3TVRBeE1ERXdNVEF4TURFd0p5a2dlMXh1SUNBZ0lIUm9hWE11WDJOcGNHaGxjaTV6WTNKMVlpZ3BYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Nka1lYUmhJRzV2ZENCdGRXeDBhWEJzWlNCdlppQmliRzlqYXlCc1pXNW5kR2duS1Z4dUlDQjlYRzU5WEc1RGFYQm9aWEl1Y0hKdmRHOTBlWEJsTG5ObGRFRjFkRzlRWVdSa2FXNW5JRDBnWm5WdVkzUnBiMjRnS0hObGRGUnZLU0I3WEc0Z0lIUm9hWE11WDJGMWRHOXdZV1JrYVc1bklEMGdJU0Z6WlhSVWIxeHVmVnh1WEc1bWRXNWpkR2x2YmlCVGNHeHBkSFJsY2lBb0tTQjdYRzRnSUdsbUlDZ2hLSFJvYVhNZ2FXNXpkR0Z1WTJWdlppQlRjR3hwZEhSbGNpa3BJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRk53YkdsMGRHVnlLQ2xjYmlBZ2ZWeHVJQ0IwYUdsekxtTmhZMmhsSUQwZ2JtVjNJRUoxWm1abGNpZ25KeWxjYm4xY2JsTndiR2wwZEdWeUxuQnliM1J2ZEhsd1pTNWhaR1FnUFNCbWRXNWpkR2x2YmlBb1pHRjBZU2tnZTF4dUlDQjBhR2x6TG1OaFkyaGxJRDBnUW5WbVptVnlMbU52Ym1OaGRDaGJkR2hwY3k1allXTm9aU3dnWkdGMFlWMHBYRzU5WEc1Y2JsTndiR2wwZEdWeUxuQnliM1J2ZEhsd1pTNW5aWFFnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUdsbUlDaDBhR2x6TG1OaFkyaGxMbXhsYm1kMGFDQStJREUxS1NCN1hHNGdJQ0FnZG1GeUlHOTFkQ0E5SUhSb2FYTXVZMkZqYUdVdWMyeHBZMlVvTUN3Z01UWXBYRzRnSUNBZ2RHaHBjeTVqWVdOb1pTQTlJSFJvYVhNdVkyRmphR1V1YzJ4cFkyVW9NVFlwWEc0Z0lDQWdjbVYwZFhKdUlHOTFkRnh1SUNCOVhHNGdJSEpsZEhWeWJpQnVkV3hzWEc1OVhHNVRjR3hwZEhSbGNpNXdjbTkwYjNSNWNHVXVabXgxYzJnZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lIWmhjaUJzWlc0Z1BTQXhOaUF0SUhSb2FYTXVZMkZqYUdVdWJHVnVaM1JvWEc0Z0lIWmhjaUJ3WVdSQ2RXWm1JRDBnYm1WM0lFSjFabVpsY2loc1pXNHBYRzVjYmlBZ2RtRnlJR2tnUFNBdE1WeHVJQ0IzYUdsc1pTQW9LeXRwSUR3Z2JHVnVLU0I3WEc0Z0lDQWdjR0ZrUW5WbVppNTNjbWwwWlZWSmJuUTRLR3hsYml3Z2FTbGNiaUFnZlZ4dUlDQjJZWElnYjNWMElEMGdRblZtWm1WeUxtTnZibU5oZENoYmRHaHBjeTVqWVdOb1pTd2djR0ZrUW5WbVpsMHBYRzRnSUhKbGRIVnliaUJ2ZFhSY2JuMWNiblpoY2lCdGIyUmxiR2x6ZENBOUlIdGNiaUFnUlVOQ09pQnlaWEYxYVhKbEtDY3VMMjF2WkdWekwyVmpZaWNwTEZ4dUlDQkRRa002SUhKbGNYVnBjbVVvSnk0dmJXOWtaWE12WTJKakp5a3NYRzRnSUVOR1Fqb2djbVZ4ZFdseVpTZ25MaTl0YjJSbGN5OWpabUluS1N4Y2JpQWdRMFpDT0RvZ2NtVnhkV2x5WlNnbkxpOXRiMlJsY3k5alptSTRKeWtzWEc0Z0lFTkdRakU2SUhKbGNYVnBjbVVvSnk0dmJXOWtaWE12WTJaaU1TY3BMRnh1SUNCUFJrSTZJSEpsY1hWcGNtVW9KeTR2Ylc5a1pYTXZiMlppSnlrc1hHNGdJRU5VVWpvZ2NtVnhkV2x5WlNnbkxpOXRiMlJsY3k5amRISW5LU3hjYmlBZ1IwTk5PaUJ5WlhGMWFYSmxLQ2N1TDIxdlpHVnpMMk4wY2ljcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdOeVpXRjBaVU5wY0dobGNtbDJJQ2h6ZFdsMFpTd2djR0Z6YzNkdmNtUXNJR2wyS1NCN1hHNGdJSFpoY2lCamIyNW1hV2NnUFNCdGIyUmxjMXR6ZFdsMFpTNTBiMHh2ZDJWeVEyRnpaU2dwWFZ4dUlDQnBaaUFvSVdOdmJtWnBaeWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjJsdWRtRnNhV1FnYzNWcGRHVWdkSGx3WlNjcFhHNGdJSDFjYmlBZ2FXWWdLSFI1Y0dWdlppQnBkaUE5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNCcGRpQTlJRzVsZHlCQ2RXWm1aWElvYVhZcFhHNGdJSDFjYmlBZ2FXWWdLSFI1Y0dWdlppQndZWE56ZDI5eVpDQTlQVDBnSjNOMGNtbHVaeWNwSUh0Y2JpQWdJQ0J3WVhOemQyOXlaQ0E5SUc1bGR5QkNkV1ptWlhJb2NHRnpjM2R2Y21RcFhHNGdJSDFjYmlBZ2FXWWdLSEJoYzNOM2IzSmtMbXhsYm1kMGFDQWhQVDBnWTI5dVptbG5MbXRsZVNBdklEZ3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLQ2RwYm5aaGJHbGtJR3RsZVNCc1pXNW5kR2dnSnlBcklIQmhjM04zYjNKa0xteGxibWQwYUNsY2JpQWdmVnh1SUNCcFppQW9hWFl1YkdWdVozUm9JQ0U5UFNCamIyNW1hV2N1YVhZcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZHBiblpoYkdsa0lHbDJJR3hsYm1kMGFDQW5JQ3NnYVhZdWJHVnVaM1JvS1Z4dUlDQjlYRzRnSUdsbUlDaGpiMjVtYVdjdWRIbHdaU0E5UFQwZ0ozTjBjbVZoYlNjcElIdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGTjBjbVZoYlVOcGNHaGxjaWh0YjJSbGJHbHpkRnRqYjI1bWFXY3ViVzlrWlYwc0lIQmhjM04zYjNKa0xDQnBkaWxjYmlBZ2ZTQmxiSE5sSUdsbUlDaGpiMjVtYVdjdWRIbHdaU0E5UFQwZ0oyRjFkR2duS1NCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCQmRYUm9RMmx3YUdWeUtHMXZaR1ZzYVhOMFcyTnZibVpwWnk1dGIyUmxYU3dnY0dGemMzZHZjbVFzSUdsMktWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCdVpYY2dRMmx3YUdWeUtHMXZaR1ZzYVhOMFcyTnZibVpwWnk1dGIyUmxYU3dnY0dGemMzZHZjbVFzSUdsMktWeHVmVnh1Wm5WdVkzUnBiMjRnWTNKbFlYUmxRMmx3YUdWeUlDaHpkV2wwWlN3Z2NHRnpjM2R2Y21RcElIdGNiaUFnZG1GeUlHTnZibVpwWnlBOUlHMXZaR1Z6VzNOMWFYUmxMblJ2VEc5M1pYSkRZWE5sS0NsZFhHNGdJR2xtSUNnaFkyOXVabWxuS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnbmFXNTJZV3hwWkNCemRXbDBaU0IwZVhCbEp5bGNiaUFnZlZ4dUlDQjJZWElnYTJWNWN5QTlJR1ZpZEdzb2NHRnpjM2R2Y21Rc0lHWmhiSE5sTENCamIyNW1hV2N1YTJWNUxDQmpiMjVtYVdjdWFYWXBYRzRnSUhKbGRIVnliaUJqY21WaGRHVkRhWEJvWlhKcGRpaHpkV2wwWlN3Z2EyVjVjeTVyWlhrc0lHdGxlWE11YVhZcFhHNTlYRzVjYm1WNGNHOXlkSE11WTNKbFlYUmxRMmx3YUdWeWFYWWdQU0JqY21WaGRHVkRhWEJvWlhKcGRseHVaWGh3YjNKMGN5NWpjbVZoZEdWRGFYQm9aWElnUFNCamNtVmhkR1ZEYVhCb1pYSmNiaUpkZlE9PSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIG1vZGVzID0gcmVxdWlyZSgnLi9tb2RlcycpXG52YXIgU3RyZWFtQ2lwaGVyID0gcmVxdWlyZSgnLi9zdHJlYW1DaXBoZXInKVxudmFyIEF1dGhDaXBoZXIgPSByZXF1aXJlKCcuL2F1dGhDaXBoZXInKVxudmFyIGVidGsgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpXG5cbmluaGVyaXRzKERlY2lwaGVyLCBUcmFuc2Zvcm0pXG5mdW5jdGlvbiBEZWNpcGhlciAobW9kZSwga2V5LCBpdikge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRGVjaXBoZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBEZWNpcGhlcihtb2RlLCBrZXksIGl2KVxuICB9XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuX2NhY2hlID0gbmV3IFNwbGl0dGVyKClcbiAgdGhpcy5fbGFzdCA9IHZvaWQgMFxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBuZXcgQnVmZmVyKGl2Lmxlbmd0aClcbiAgaXYuY29weSh0aGlzLl9wcmV2KVxuICB0aGlzLl9tb2RlID0gbW9kZVxuICB0aGlzLl9hdXRvcGFkZGluZyA9IHRydWVcbn1cbkRlY2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG4gIHdoaWxlICgoY2h1bmsgPSB0aGlzLl9jYWNoZS5nZXQodGhpcy5fYXV0b3BhZGRpbmcpKSkge1xuICAgIHRoaW5nID0gdGhpcy5fbW9kZS5kZWNyeXB0KHRoaXMsIGNodW5rKVxuICAgIG91dC5wdXNoKHRoaW5nKVxuICB9XG4gIHJldHVybiBCdWZmZXIuY29uY2F0KG91dClcbn1cbkRlY2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjaHVuayA9IHRoaXMuX2NhY2hlLmZsdXNoKClcbiAgaWYgKHRoaXMuX2F1dG9wYWRkaW5nKSB7XG4gICAgcmV0dXJuIHVucGFkKHRoaXMuX21vZGUuZGVjcnlwdCh0aGlzLCBjaHVuaykpXG4gIH0gZWxzZSBpZiAoY2h1bmspIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgbm90IG11bHRpcGxlIG9mIGJsb2NrIGxlbmd0aCcpXG4gIH1cbn1cbkRlY2lwaGVyLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uIChzZXRUbykge1xuICB0aGlzLl9hdXRvcGFkZGluZyA9ICEhc2V0VG9cbn1cbmZ1bmN0aW9uIFNwbGl0dGVyICgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNwbGl0dGVyKSkge1xuICAgIHJldHVybiBuZXcgU3BsaXR0ZXIoKVxuICB9XG4gIHRoaXMuY2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxufVxuU3BsaXR0ZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuY2FjaGUgPSBCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBkYXRhXSlcbn1cblxuU3BsaXR0ZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChhdXRvUGFkZGluZykge1xuICB2YXIgb3V0XG4gIGlmIChhdXRvUGFkZGluZykge1xuICAgIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+IDE2KSB7XG4gICAgICBvdXQgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgICByZXR1cm4gb3V0XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+PSAxNikge1xuICAgICAgb3V0ID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNilcbiAgICAgIHRoaXMuY2FjaGUgPSB0aGlzLmNhY2hlLnNsaWNlKDE2KVxuICAgICAgcmV0dXJuIG91dFxuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbFxufVxuU3BsaXR0ZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy5jYWNoZVxuICB9XG59XG5mdW5jdGlvbiB1bnBhZCAobGFzdCkge1xuICB2YXIgcGFkZGVkID0gbGFzdFsxNV1cbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgcGFkZGVkKSB7XG4gICAgaWYgKGxhc3RbKGkgKyAoMTYgLSBwYWRkZWQpKV0gIT09IHBhZGRlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gZGVjcnlwdCBkYXRhJylcbiAgICB9XG4gIH1cbiAgaWYgKHBhZGRlZCA9PT0gMTYpIHtcbiAgICByZXR1cm5cbiAgfVxuICByZXR1cm4gbGFzdC5zbGljZSgwLCAxNiAtIHBhZGRlZClcbn1cblxudmFyIG1vZGVsaXN0ID0ge1xuICBFQ0I6IHJlcXVpcmUoJy4vbW9kZXMvZWNiJyksXG4gIENCQzogcmVxdWlyZSgnLi9tb2Rlcy9jYmMnKSxcbiAgQ0ZCOiByZXF1aXJlKCcuL21vZGVzL2NmYicpLFxuICBDRkI4OiByZXF1aXJlKCcuL21vZGVzL2NmYjgnKSxcbiAgQ0ZCMTogcmVxdWlyZSgnLi9tb2Rlcy9jZmIxJyksXG4gIE9GQjogcmVxdWlyZSgnLi9tb2Rlcy9vZmInKSxcbiAgQ1RSOiByZXF1aXJlKCcuL21vZGVzL2N0cicpLFxuICBHQ006IHJlcXVpcmUoJy4vbW9kZXMvY3RyJylcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVjaXBoZXJpdiAoc3VpdGUsIHBhc3N3b3JkLCBpdikge1xuICB2YXIgY29uZmlnID0gbW9kZXNbc3VpdGUudG9Mb3dlckNhc2UoKV1cbiAgaWYgKCFjb25maWcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuICB9XG4gIGlmICh0eXBlb2YgaXYgPT09ICdzdHJpbmcnKSB7XG4gICAgaXYgPSBuZXcgQnVmZmVyKGl2KVxuICB9XG4gIGlmICh0eXBlb2YgcGFzc3dvcmQgPT09ICdzdHJpbmcnKSB7XG4gICAgcGFzc3dvcmQgPSBuZXcgQnVmZmVyKHBhc3N3b3JkKVxuICB9XG4gIGlmIChwYXNzd29yZC5sZW5ndGggIT09IGNvbmZpZy5rZXkgLyA4KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBrZXkgbGVuZ3RoICcgKyBwYXNzd29yZC5sZW5ndGgpXG4gIH1cbiAgaWYgKGl2Lmxlbmd0aCAhPT0gY29uZmlnLml2KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBpdiBsZW5ndGggJyArIGl2Lmxlbmd0aClcbiAgfVxuICBpZiAoY29uZmlnLnR5cGUgPT09ICdzdHJlYW0nKSB7XG4gICAgcmV0dXJuIG5ldyBTdHJlYW1DaXBoZXIobW9kZWxpc3RbY29uZmlnLm1vZGVdLCBwYXNzd29yZCwgaXYsIHRydWUpXG4gIH0gZWxzZSBpZiAoY29uZmlnLnR5cGUgPT09ICdhdXRoJykge1xuICAgIHJldHVybiBuZXcgQXV0aENpcGhlcihtb2RlbGlzdFtjb25maWcubW9kZV0sIHBhc3N3b3JkLCBpdiwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gbmV3IERlY2lwaGVyKG1vZGVsaXN0W2NvbmZpZy5tb2RlXSwgcGFzc3dvcmQsIGl2KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHZhciBjb25maWcgPSBtb2Rlc1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwgY29uZmlnLmtleSwgY29uZmlnLml2KVxuICByZXR1cm4gY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyID0gY3JlYXRlRGVjaXBoZXJcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXJpdiA9IGNyZWF0ZURlY2lwaGVyaXZcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZbkp2ZDNObGNtbG1lUzFqYVhCb1pYSXZibTlrWlY5dGIyUjFiR1Z6TDJKeWIzZHpaWEpwWm5rdFlXVnpMMlJsWTNKNWNIUmxjaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUdGbGN5QTlJSEpsY1hWcGNtVW9KeTR2WVdWekp5bGNiblpoY2lCVWNtRnVjMlp2Y20wZ1BTQnlaWEYxYVhKbEtDZGphWEJvWlhJdFltRnpaU2NwWEc1MllYSWdhVzVvWlhKcGRITWdQU0J5WlhGMWFYSmxLQ2RwYm1obGNtbDBjeWNwWEc1MllYSWdiVzlrWlhNZ1BTQnlaWEYxYVhKbEtDY3VMMjF2WkdWekp5bGNiblpoY2lCVGRISmxZVzFEYVhCb1pYSWdQU0J5WlhGMWFYSmxLQ2N1TDNOMGNtVmhiVU5wY0dobGNpY3BYRzUyWVhJZ1FYVjBhRU5wY0dobGNpQTlJSEpsY1hWcGNtVW9KeTR2WVhWMGFFTnBjR2hsY2ljcFhHNTJZWElnWldKMGF5QTlJSEpsY1hWcGNtVW9KMlYyY0Y5aWVYUmxjM1J2YTJWNUp5bGNibHh1YVc1b1pYSnBkSE1vUkdWamFYQm9aWElzSUZSeVlXNXpabTl5YlNsY2JtWjFibU4wYVc5dUlFUmxZMmx3YUdWeUlDaHRiMlJsTENCclpYa3NJR2wyS1NCN1hHNGdJR2xtSUNnaEtIUm9hWE1nYVc1emRHRnVZMlZ2WmlCRVpXTnBjR2hsY2lrcElIdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lFUmxZMmx3YUdWeUtHMXZaR1VzSUd0bGVTd2dhWFlwWEc0Z0lIMWNiaUFnVkhKaGJuTm1iM0p0TG1OaGJHd29kR2hwY3lsY2JpQWdkR2hwY3k1ZlkyRmphR1VnUFNCdVpYY2dVM0JzYVhSMFpYSW9LVnh1SUNCMGFHbHpMbDlzWVhOMElEMGdkbTlwWkNBd1hHNGdJSFJvYVhNdVgyTnBjR2hsY2lBOUlHNWxkeUJoWlhNdVFVVlRLR3RsZVNsY2JpQWdkR2hwY3k1ZmNISmxkaUE5SUc1bGR5QkNkV1ptWlhJb2FYWXViR1Z1WjNSb0tWeHVJQ0JwZGk1amIzQjVLSFJvYVhNdVgzQnlaWFlwWEc0Z0lIUm9hWE11WDIxdlpHVWdQU0J0YjJSbFhHNGdJSFJvYVhNdVgyRjFkRzl3WVdSa2FXNW5JRDBnZEhKMVpWeHVmVnh1UkdWamFYQm9aWEl1Y0hKdmRHOTBlWEJsTGw5MWNHUmhkR1VnUFNCbWRXNWpkR2x2YmlBb1pHRjBZU2tnZTF4dUlDQjBhR2x6TGw5allXTm9aUzVoWkdRb1pHRjBZU2xjYmlBZ2RtRnlJR05vZFc1clhHNGdJSFpoY2lCMGFHbHVaMXh1SUNCMllYSWdiM1YwSUQwZ1cxMWNiaUFnZDJocGJHVWdLQ2hqYUhWdWF5QTlJSFJvYVhNdVgyTmhZMmhsTG1kbGRDaDBhR2x6TGw5aGRYUnZjR0ZrWkdsdVp5a3BLU0I3WEc0Z0lDQWdkR2hwYm1jZ1BTQjBhR2x6TGw5dGIyUmxMbVJsWTNKNWNIUW9kR2hwY3l3Z1kyaDFibXNwWEc0Z0lDQWdiM1YwTG5CMWMyZ29kR2hwYm1jcFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUVKMVptWmxjaTVqYjI1allYUW9iM1YwS1Z4dWZWeHVSR1ZqYVhCb1pYSXVjSEp2ZEc5MGVYQmxMbDltYVc1aGJDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdkbUZ5SUdOb2RXNXJJRDBnZEdocGN5NWZZMkZqYUdVdVpteDFjMmdvS1Z4dUlDQnBaaUFvZEdocGN5NWZZWFYwYjNCaFpHUnBibWNwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkVzV3WVdRb2RHaHBjeTVmYlc5a1pTNWtaV055ZVhCMEtIUm9hWE1zSUdOb2RXNXJLU2xjYmlBZ2ZTQmxiSE5sSUdsbUlDaGphSFZ1YXlrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduWkdGMFlTQnViM1FnYlhWc2RHbHdiR1VnYjJZZ1lteHZZMnNnYkdWdVozUm9KeWxjYmlBZ2ZWeHVmVnh1UkdWamFYQm9aWEl1Y0hKdmRHOTBlWEJsTG5ObGRFRjFkRzlRWVdSa2FXNW5JRDBnWm5WdVkzUnBiMjRnS0hObGRGUnZLU0I3WEc0Z0lIUm9hWE11WDJGMWRHOXdZV1JrYVc1bklEMGdJU0Z6WlhSVWIxeHVmVnh1Wm5WdVkzUnBiMjRnVTNCc2FYUjBaWElnS0NrZ2UxeHVJQ0JwWmlBb0lTaDBhR2x6SUdsdWMzUmhibU5sYjJZZ1UzQnNhWFIwWlhJcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlRjR3hwZEhSbGNpZ3BYRzRnSUgxY2JpQWdkR2hwY3k1allXTm9aU0E5SUc1bGR5QkNkV1ptWlhJb0p5Y3BYRzU5WEc1VGNHeHBkSFJsY2k1d2NtOTBiM1I1Y0dVdVlXUmtJRDBnWm5WdVkzUnBiMjRnS0dSaGRHRXBJSHRjYmlBZ2RHaHBjeTVqWVdOb1pTQTlJRUoxWm1abGNpNWpiMjVqWVhRb1czUm9hWE11WTJGamFHVXNJR1JoZEdGZEtWeHVmVnh1WEc1VGNHeHBkSFJsY2k1d2NtOTBiM1I1Y0dVdVoyVjBJRDBnWm5WdVkzUnBiMjRnS0dGMWRHOVFZV1JrYVc1bktTQjdYRzRnSUhaaGNpQnZkWFJjYmlBZ2FXWWdLR0YxZEc5UVlXUmthVzVuS1NCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11WTJGamFHVXViR1Z1WjNSb0lENGdNVFlwSUh0Y2JpQWdJQ0FnSUc5MWRDQTlJSFJvYVhNdVkyRmphR1V1YzJ4cFkyVW9NQ3dnTVRZcFhHNGdJQ0FnSUNCMGFHbHpMbU5oWTJobElEMGdkR2hwY3k1allXTm9aUzV6YkdsalpTZ3hOaWxjYmlBZ0lDQWdJSEpsZEhWeWJpQnZkWFJjYmlBZ0lDQjlYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTXVZMkZqYUdVdWJHVnVaM1JvSUQ0OUlERTJLU0I3WEc0Z0lDQWdJQ0J2ZFhRZ1BTQjBhR2x6TG1OaFkyaGxMbk5zYVdObEtEQXNJREUyS1Z4dUlDQWdJQ0FnZEdocGN5NWpZV05vWlNBOUlIUm9hWE11WTJGamFHVXVjMnhwWTJVb01UWXBYRzRnSUNBZ0lDQnlaWFIxY200Z2IzVjBYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCdWRXeHNYRzU5WEc1VGNHeHBkSFJsY2k1d2NtOTBiM1I1Y0dVdVpteDFjMmdnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUdsbUlDaDBhR2x6TG1OaFkyaGxMbXhsYm1kMGFDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU5oWTJobFhHNGdJSDFjYm4xY2JtWjFibU4wYVc5dUlIVnVjR0ZrSUNoc1lYTjBLU0I3WEc0Z0lIWmhjaUJ3WVdSa1pXUWdQU0JzWVhOMFd6RTFYVnh1SUNCMllYSWdhU0E5SUMweFhHNGdJSGRvYVd4bElDZ3JLMmtnUENCd1lXUmtaV1FwSUh0Y2JpQWdJQ0JwWmlBb2JHRnpkRnNvYVNBcklDZ3hOaUF0SUhCaFpHUmxaQ2twWFNBaFBUMGdjR0ZrWkdWa0tTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0ozVnVZV0pzWlNCMGJ5QmtaV055ZVhCMElHUmhkR0VuS1Z4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0JwWmlBb2NHRmtaR1ZrSUQwOVBTQXhOaWtnZTF4dUlDQWdJSEpsZEhWeWJseHVJQ0I5WEc0Z0lISmxkSFZ5YmlCc1lYTjBMbk5zYVdObEtEQXNJREUySUMwZ2NHRmtaR1ZrS1Z4dWZWeHVYRzUyWVhJZ2JXOWtaV3hwYzNRZ1BTQjdYRzRnSUVWRFFqb2djbVZ4ZFdseVpTZ25MaTl0YjJSbGN5OWxZMkluS1N4Y2JpQWdRMEpET2lCeVpYRjFhWEpsS0NjdUwyMXZaR1Z6TDJOaVl5Y3BMRnh1SUNCRFJrSTZJSEpsY1hWcGNtVW9KeTR2Ylc5a1pYTXZZMlppSnlrc1hHNGdJRU5HUWpnNklISmxjWFZwY21Vb0p5NHZiVzlrWlhNdlkyWmlPQ2NwTEZ4dUlDQkRSa0l4T2lCeVpYRjFhWEpsS0NjdUwyMXZaR1Z6TDJObVlqRW5LU3hjYmlBZ1QwWkNPaUJ5WlhGMWFYSmxLQ2N1TDIxdlpHVnpMMjltWWljcExGeHVJQ0JEVkZJNklISmxjWFZwY21Vb0p5NHZiVzlrWlhNdlkzUnlKeWtzWEc0Z0lFZERUVG9nY21WeGRXbHlaU2duTGk5dGIyUmxjeTlqZEhJbktWeHVmVnh1WEc1bWRXNWpkR2x2YmlCamNtVmhkR1ZFWldOcGNHaGxjbWwySUNoemRXbDBaU3dnY0dGemMzZHZjbVFzSUdsMktTQjdYRzRnSUhaaGNpQmpiMjVtYVdjZ1BTQnRiMlJsYzF0emRXbDBaUzUwYjB4dmQyVnlRMkZ6WlNncFhWeHVJQ0JwWmlBb0lXTnZibVpwWnlrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0oybHVkbUZzYVdRZ2MzVnBkR1VnZEhsd1pTY3BYRzRnSUgxY2JpQWdhV1lnS0hSNWNHVnZaaUJwZGlBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQnBkaUE5SUc1bGR5QkNkV1ptWlhJb2FYWXBYRzRnSUgxY2JpQWdhV1lnS0hSNWNHVnZaaUJ3WVhOemQyOXlaQ0E5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNCd1lYTnpkMjl5WkNBOUlHNWxkeUJDZFdabVpYSW9jR0Z6YzNkdmNtUXBYRzRnSUgxY2JpQWdhV1lnS0hCaGMzTjNiM0prTG14bGJtZDBhQ0FoUFQwZ1kyOXVabWxuTG10bGVTQXZJRGdwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkcGJuWmhiR2xrSUd0bGVTQnNaVzVuZEdnZ0p5QXJJSEJoYzNOM2IzSmtMbXhsYm1kMGFDbGNiaUFnZlZ4dUlDQnBaaUFvYVhZdWJHVnVaM1JvSUNFOVBTQmpiMjVtYVdjdWFYWXBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLQ2RwYm5aaGJHbGtJR2wySUd4bGJtZDBhQ0FuSUNzZ2FYWXViR1Z1WjNSb0tWeHVJQ0I5WEc0Z0lHbG1JQ2hqYjI1bWFXY3VkSGx3WlNBOVBUMGdKM04wY21WaGJTY3BJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRk4wY21WaGJVTnBjR2hsY2lodGIyUmxiR2x6ZEZ0amIyNW1hV2N1Ylc5a1pWMHNJSEJoYzNOM2IzSmtMQ0JwZGl3Z2RISjFaU2xjYmlBZ2ZTQmxiSE5sSUdsbUlDaGpiMjVtYVdjdWRIbHdaU0E5UFQwZ0oyRjFkR2duS1NCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCQmRYUm9RMmx3YUdWeUtHMXZaR1ZzYVhOMFcyTnZibVpwWnk1dGIyUmxYU3dnY0dGemMzZHZjbVFzSUdsMkxDQjBjblZsS1Z4dUlDQjlYRzRnSUhKbGRIVnliaUJ1WlhjZ1JHVmphWEJvWlhJb2JXOWtaV3hwYzNSYlkyOXVabWxuTG0xdlpHVmRMQ0J3WVhOemQyOXlaQ3dnYVhZcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdOeVpXRjBaVVJsWTJsd2FHVnlJQ2h6ZFdsMFpTd2djR0Z6YzNkdmNtUXBJSHRjYmlBZ2RtRnlJR052Ym1acFp5QTlJRzF2WkdWelczTjFhWFJsTG5SdlRHOTNaWEpEWVhObEtDbGRYRzRnSUdsbUlDZ2hZMjl1Wm1sbktTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25hVzUyWVd4cFpDQnpkV2wwWlNCMGVYQmxKeWxjYmlBZ2ZWeHVJQ0IyWVhJZ2EyVjVjeUE5SUdWaWRHc29jR0Z6YzNkdmNtUXNJR1poYkhObExDQmpiMjVtYVdjdWEyVjVMQ0JqYjI1bWFXY3VhWFlwWEc0Z0lISmxkSFZ5YmlCamNtVmhkR1ZFWldOcGNHaGxjbWwyS0hOMWFYUmxMQ0JyWlhsekxtdGxlU3dnYTJWNWN5NXBkaWxjYm4xY2JtVjRjRzl5ZEhNdVkzSmxZWFJsUkdWamFYQm9aWElnUFNCamNtVmhkR1ZFWldOcGNHaGxjbHh1Wlhod2IzSjBjeTVqY21WaGRHVkVaV05wY0dobGNtbDJJRDBnWTNKbFlYUmxSR1ZqYVhCb1pYSnBkbHh1SWwxOSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciBtZDUgPSByZXF1aXJlKCdjcmVhdGUtaGFzaC9tZDUnKVxubW9kdWxlLmV4cG9ydHMgPSBFVlBfQnl0ZXNUb0tleVxuZnVuY3Rpb24gRVZQX0J5dGVzVG9LZXkgKHBhc3N3b3JkLCBzYWx0LCBrZXlMZW4sIGl2TGVuKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHBhc3N3b3JkKSkge1xuICAgIHBhc3N3b3JkID0gbmV3IEJ1ZmZlcihwYXNzd29yZCwgJ2JpbmFyeScpXG4gIH1cbiAgaWYgKHNhbHQgJiYgIUJ1ZmZlci5pc0J1ZmZlcihzYWx0KSkge1xuICAgIHNhbHQgPSBuZXcgQnVmZmVyKHNhbHQsICdiaW5hcnknKVxuICB9XG4gIGtleUxlbiA9IGtleUxlbiAvIDhcbiAgaXZMZW4gPSBpdkxlbiB8fCAwXG4gIHZhciBraSA9IDBcbiAgdmFyIGlpID0gMFxuICB2YXIga2V5ID0gbmV3IEJ1ZmZlcihrZXlMZW4pXG4gIHZhciBpdiA9IG5ldyBCdWZmZXIoaXZMZW4pXG4gIHZhciBhZGRtZCA9IDBcbiAgdmFyIG1kX2J1ZlxuICB2YXIgaVxuICB2YXIgYnVmcyA9IFtdXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgaWYgKGFkZG1kKysgPiAwKSB7XG4gICAgICBidWZzLnB1c2gobWRfYnVmKVxuICAgIH1cbiAgICBidWZzLnB1c2gocGFzc3dvcmQpXG4gICAgaWYgKHNhbHQpIHtcbiAgICAgIGJ1ZnMucHVzaChzYWx0KVxuICAgIH1cbiAgICBtZF9idWYgPSBtZDUoQnVmZmVyLmNvbmNhdChidWZzKSlcbiAgICBidWZzID0gW11cbiAgICBpID0gMFxuICAgIGlmIChrZXlMZW4gPiAwKSB7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBpZiAoa2V5TGVuID09PSAwKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaSA9PT0gbWRfYnVmLmxlbmd0aCkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAga2V5W2tpKytdID0gbWRfYnVmW2ldXG4gICAgICAgIGtleUxlbi0tXG4gICAgICAgIGkrK1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXZMZW4gPiAwICYmIGkgIT09IG1kX2J1Zi5sZW5ndGgpIHtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGlmIChpdkxlbiA9PT0gMCkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPT09IG1kX2J1Zi5sZW5ndGgpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGl2W2lpKytdID0gbWRfYnVmW2ldXG4gICAgICAgIGl2TGVuLS1cbiAgICAgICAgaSsrXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChrZXlMZW4gPT09IDAgJiYgaXZMZW4gPT09IDApIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIGZvciAoaSA9IDA7IGkgPCBtZF9idWYubGVuZ3RoOyBpKyspIHtcbiAgICBtZF9idWZbaV0gPSAwXG4gIH1cbiAgcmV0dXJuIHtcbiAgICBrZXk6IGtleSxcbiAgICBpdjogaXZcbiAgfVxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMWphWEJvWlhJdmJtOWtaVjl0YjJSMWJHVnpMMlYyY0Y5aWVYUmxjM1J2YTJWNUwybHVaR1Y0TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW5aaGNpQnRaRFVnUFNCeVpYRjFhWEpsS0NkamNtVmhkR1V0YUdGemFDOXRaRFVuS1Z4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCRlZsQmZRbmwwWlhOVWIwdGxlVnh1Wm5WdVkzUnBiMjRnUlZaUVgwSjVkR1Z6Vkc5TFpYa2dLSEJoYzNOM2IzSmtMQ0J6WVd4MExDQnJaWGxNWlc0c0lHbDJUR1Z1S1NCN1hHNGdJR2xtSUNnaFFuVm1abVZ5TG1selFuVm1abVZ5S0hCaGMzTjNiM0prS1NrZ2UxeHVJQ0FnSUhCaGMzTjNiM0prSUQwZ2JtVjNJRUoxWm1abGNpaHdZWE56ZDI5eVpDd2dKMkpwYm1GeWVTY3BYRzRnSUgxY2JpQWdhV1lnS0hOaGJIUWdKaVlnSVVKMVptWmxjaTVwYzBKMVptWmxjaWh6WVd4MEtTa2dlMXh1SUNBZ0lITmhiSFFnUFNCdVpYY2dRblZtWm1WeUtITmhiSFFzSUNkaWFXNWhjbmtuS1Z4dUlDQjlYRzRnSUd0bGVVeGxiaUE5SUd0bGVVeGxiaUF2SURoY2JpQWdhWFpNWlc0Z1BTQnBka3hsYmlCOGZDQXdYRzRnSUhaaGNpQnJhU0E5SURCY2JpQWdkbUZ5SUdscElEMGdNRnh1SUNCMllYSWdhMlY1SUQwZ2JtVjNJRUoxWm1abGNpaHJaWGxNWlc0cFhHNGdJSFpoY2lCcGRpQTlJRzVsZHlCQ2RXWm1aWElvYVhaTVpXNHBYRzRnSUhaaGNpQmhaR1J0WkNBOUlEQmNiaUFnZG1GeUlHMWtYMkoxWmx4dUlDQjJZWElnYVZ4dUlDQjJZWElnWW5WbWN5QTlJRnRkWEc0Z0lIZG9hV3hsSUNoMGNuVmxLU0I3WEc0Z0lDQWdhV1lnS0dGa1pHMWtLeXNnUGlBd0tTQjdYRzRnSUNBZ0lDQmlkV1p6TG5CMWMyZ29iV1JmWW5WbUtWeHVJQ0FnSUgxY2JpQWdJQ0JpZFdaekxuQjFjMmdvY0dGemMzZHZjbVFwWEc0Z0lDQWdhV1lnS0hOaGJIUXBJSHRjYmlBZ0lDQWdJR0oxWm5NdWNIVnphQ2h6WVd4MEtWeHVJQ0FnSUgxY2JpQWdJQ0J0WkY5aWRXWWdQU0J0WkRVb1FuVm1abVZ5TG1OdmJtTmhkQ2hpZFdaektTbGNiaUFnSUNCaWRXWnpJRDBnVzExY2JpQWdJQ0JwSUQwZ01GeHVJQ0FnSUdsbUlDaHJaWGxNWlc0Z1BpQXdLU0I3WEc0Z0lDQWdJQ0IzYUdsc1pTQW9kSEoxWlNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYTJWNVRHVnVJRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnWW5KbFlXdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb2FTQTlQVDBnYldSZlluVm1MbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYTJWNVcydHBLeXRkSUQwZ2JXUmZZblZtVzJsZFhHNGdJQ0FnSUNBZ0lHdGxlVXhsYmkwdFhHNGdJQ0FnSUNBZ0lHa3JLMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCcFppQW9hWFpNWlc0Z1BpQXdJQ1ltSUdrZ0lUMDlJRzFrWDJKMVppNXNaVzVuZEdncElIdGNiaUFnSUNBZ0lIZG9hV3hsSUNoMGNuVmxLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHBka3hsYmlBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLR2tnUFQwOUlHMWtYMkoxWmk1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmljbVZoYTF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbDJXMmxwS3l0ZElEMGdiV1JmWW5WbVcybGRYRzRnSUNBZ0lDQWdJR2wyVEdWdUxTMWNiaUFnSUNBZ0lDQWdhU3NyWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2hyWlhsTVpXNGdQVDA5SURBZ0ppWWdhWFpNWlc0Z1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lHWnZjaUFvYVNBOUlEQTdJR2tnUENCdFpGOWlkV1l1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNCdFpGOWlkV1piYVYwZ1BTQXdYRzRnSUgxY2JpQWdjbVYwZFhKdUlIdGNiaUFnSUNCclpYazZJR3RsZVN4Y2JpQWdJQ0JwZGpvZ2FYWmNiaUFnZlZ4dWZWeHVJbDE5IiwiJ3VzZSBzdHJpY3QnO1xuLypcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgUlNBIERhdGEgU2VjdXJpdHksIEluYy4gTUQ1IE1lc3NhZ2VcbiAqIERpZ2VzdCBBbGdvcml0aG0sIGFzIGRlZmluZWQgaW4gUkZDIDEzMjEuXG4gKiBWZXJzaW9uIDIuMSBDb3B5cmlnaHQgKEMpIFBhdWwgSm9obnN0b24gMTk5OSAtIDIwMDIuXG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2VcbiAqIFNlZSBodHRwOi8vcGFqaG9tZS5vcmcudWsvY3J5cHQvbWQ1IGZvciBtb3JlIGluZm8uXG4gKi9cblxudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuL2hlbHBlcnMnKTtcblxuLypcbiAqIENhbGN1bGF0ZSB0aGUgTUQ1IG9mIGFuIGFycmF5IG9mIGxpdHRsZS1lbmRpYW4gd29yZHMsIGFuZCBhIGJpdCBsZW5ndGhcbiAqL1xuZnVuY3Rpb24gY29yZV9tZDUoeCwgbGVuKVxue1xuICAvKiBhcHBlbmQgcGFkZGluZyAqL1xuICB4W2xlbiA+PiA1XSB8PSAweDgwIDw8ICgobGVuKSAlIDMyKTtcbiAgeFsoKChsZW4gKyA2NCkgPj4+IDkpIDw8IDQpICsgMTRdID0gbGVuO1xuXG4gIHZhciBhID0gIDE3MzI1ODQxOTM7XG4gIHZhciBiID0gLTI3MTczMzg3OTtcbiAgdmFyIGMgPSAtMTczMjU4NDE5NDtcbiAgdmFyIGQgPSAgMjcxNzMzODc4O1xuXG4gIGZvcih2YXIgaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSArPSAxNilcbiAge1xuICAgIHZhciBvbGRhID0gYTtcbiAgICB2YXIgb2xkYiA9IGI7XG4gICAgdmFyIG9sZGMgPSBjO1xuICAgIHZhciBvbGRkID0gZDtcblxuICAgIGEgPSBtZDVfZmYoYSwgYiwgYywgZCwgeFtpKyAwXSwgNyAsIC02ODA4NzY5MzYpO1xuICAgIGQgPSBtZDVfZmYoZCwgYSwgYiwgYywgeFtpKyAxXSwgMTIsIC0zODk1NjQ1ODYpO1xuICAgIGMgPSBtZDVfZmYoYywgZCwgYSwgYiwgeFtpKyAyXSwgMTcsICA2MDYxMDU4MTkpO1xuICAgIGIgPSBtZDVfZmYoYiwgYywgZCwgYSwgeFtpKyAzXSwgMjIsIC0xMDQ0NTI1MzMwKTtcbiAgICBhID0gbWQ1X2ZmKGEsIGIsIGMsIGQsIHhbaSsgNF0sIDcgLCAtMTc2NDE4ODk3KTtcbiAgICBkID0gbWQ1X2ZmKGQsIGEsIGIsIGMsIHhbaSsgNV0sIDEyLCAgMTIwMDA4MDQyNik7XG4gICAgYyA9IG1kNV9mZihjLCBkLCBhLCBiLCB4W2krIDZdLCAxNywgLTE0NzMyMzEzNDEpO1xuICAgIGIgPSBtZDVfZmYoYiwgYywgZCwgYSwgeFtpKyA3XSwgMjIsIC00NTcwNTk4Myk7XG4gICAgYSA9IG1kNV9mZihhLCBiLCBjLCBkLCB4W2krIDhdLCA3ICwgIDE3NzAwMzU0MTYpO1xuICAgIGQgPSBtZDVfZmYoZCwgYSwgYiwgYywgeFtpKyA5XSwgMTIsIC0xOTU4NDE0NDE3KTtcbiAgICBjID0gbWQ1X2ZmKGMsIGQsIGEsIGIsIHhbaSsxMF0sIDE3LCAtNDIwNjMpO1xuICAgIGIgPSBtZDVfZmYoYiwgYywgZCwgYSwgeFtpKzExXSwgMjIsIC0xOTkwNDA0MTYyKTtcbiAgICBhID0gbWQ1X2ZmKGEsIGIsIGMsIGQsIHhbaSsxMl0sIDcgLCAgMTgwNDYwMzY4Mik7XG4gICAgZCA9IG1kNV9mZihkLCBhLCBiLCBjLCB4W2krMTNdLCAxMiwgLTQwMzQxMTAxKTtcbiAgICBjID0gbWQ1X2ZmKGMsIGQsIGEsIGIsIHhbaSsxNF0sIDE3LCAtMTUwMjAwMjI5MCk7XG4gICAgYiA9IG1kNV9mZihiLCBjLCBkLCBhLCB4W2krMTVdLCAyMiwgIDEyMzY1MzUzMjkpO1xuXG4gICAgYSA9IG1kNV9nZyhhLCBiLCBjLCBkLCB4W2krIDFdLCA1ICwgLTE2NTc5NjUxMCk7XG4gICAgZCA9IG1kNV9nZyhkLCBhLCBiLCBjLCB4W2krIDZdLCA5ICwgLTEwNjk1MDE2MzIpO1xuICAgIGMgPSBtZDVfZ2coYywgZCwgYSwgYiwgeFtpKzExXSwgMTQsICA2NDM3MTc3MTMpO1xuICAgIGIgPSBtZDVfZ2coYiwgYywgZCwgYSwgeFtpKyAwXSwgMjAsIC0zNzM4OTczMDIpO1xuICAgIGEgPSBtZDVfZ2coYSwgYiwgYywgZCwgeFtpKyA1XSwgNSAsIC03MDE1NTg2OTEpO1xuICAgIGQgPSBtZDVfZ2coZCwgYSwgYiwgYywgeFtpKzEwXSwgOSAsICAzODAxNjA4Myk7XG4gICAgYyA9IG1kNV9nZyhjLCBkLCBhLCBiLCB4W2krMTVdLCAxNCwgLTY2MDQ3ODMzNSk7XG4gICAgYiA9IG1kNV9nZyhiLCBjLCBkLCBhLCB4W2krIDRdLCAyMCwgLTQwNTUzNzg0OCk7XG4gICAgYSA9IG1kNV9nZyhhLCBiLCBjLCBkLCB4W2krIDldLCA1ICwgIDU2ODQ0NjQzOCk7XG4gICAgZCA9IG1kNV9nZyhkLCBhLCBiLCBjLCB4W2krMTRdLCA5ICwgLTEwMTk4MDM2OTApO1xuICAgIGMgPSBtZDVfZ2coYywgZCwgYSwgYiwgeFtpKyAzXSwgMTQsIC0xODczNjM5NjEpO1xuICAgIGIgPSBtZDVfZ2coYiwgYywgZCwgYSwgeFtpKyA4XSwgMjAsICAxMTYzNTMxNTAxKTtcbiAgICBhID0gbWQ1X2dnKGEsIGIsIGMsIGQsIHhbaSsxM10sIDUgLCAtMTQ0NDY4MTQ2Nyk7XG4gICAgZCA9IG1kNV9nZyhkLCBhLCBiLCBjLCB4W2krIDJdLCA5ICwgLTUxNDAzNzg0KTtcbiAgICBjID0gbWQ1X2dnKGMsIGQsIGEsIGIsIHhbaSsgN10sIDE0LCAgMTczNTMyODQ3Myk7XG4gICAgYiA9IG1kNV9nZyhiLCBjLCBkLCBhLCB4W2krMTJdLCAyMCwgLTE5MjY2MDc3MzQpO1xuXG4gICAgYSA9IG1kNV9oaChhLCBiLCBjLCBkLCB4W2krIDVdLCA0ICwgLTM3ODU1OCk7XG4gICAgZCA9IG1kNV9oaChkLCBhLCBiLCBjLCB4W2krIDhdLCAxMSwgLTIwMjI1NzQ0NjMpO1xuICAgIGMgPSBtZDVfaGgoYywgZCwgYSwgYiwgeFtpKzExXSwgMTYsICAxODM5MDMwNTYyKTtcbiAgICBiID0gbWQ1X2hoKGIsIGMsIGQsIGEsIHhbaSsxNF0sIDIzLCAtMzUzMDk1NTYpO1xuICAgIGEgPSBtZDVfaGgoYSwgYiwgYywgZCwgeFtpKyAxXSwgNCAsIC0xNTMwOTkyMDYwKTtcbiAgICBkID0gbWQ1X2hoKGQsIGEsIGIsIGMsIHhbaSsgNF0sIDExLCAgMTI3Mjg5MzM1Myk7XG4gICAgYyA9IG1kNV9oaChjLCBkLCBhLCBiLCB4W2krIDddLCAxNiwgLTE1NTQ5NzYzMik7XG4gICAgYiA9IG1kNV9oaChiLCBjLCBkLCBhLCB4W2krMTBdLCAyMywgLTEwOTQ3MzA2NDApO1xuICAgIGEgPSBtZDVfaGgoYSwgYiwgYywgZCwgeFtpKzEzXSwgNCAsICA2ODEyNzkxNzQpO1xuICAgIGQgPSBtZDVfaGgoZCwgYSwgYiwgYywgeFtpKyAwXSwgMTEsIC0zNTg1MzcyMjIpO1xuICAgIGMgPSBtZDVfaGgoYywgZCwgYSwgYiwgeFtpKyAzXSwgMTYsIC03MjI1MjE5NzkpO1xuICAgIGIgPSBtZDVfaGgoYiwgYywgZCwgYSwgeFtpKyA2XSwgMjMsICA3NjAyOTE4OSk7XG4gICAgYSA9IG1kNV9oaChhLCBiLCBjLCBkLCB4W2krIDldLCA0ICwgLTY0MDM2NDQ4Nyk7XG4gICAgZCA9IG1kNV9oaChkLCBhLCBiLCBjLCB4W2krMTJdLCAxMSwgLTQyMTgxNTgzNSk7XG4gICAgYyA9IG1kNV9oaChjLCBkLCBhLCBiLCB4W2krMTVdLCAxNiwgIDUzMDc0MjUyMCk7XG4gICAgYiA9IG1kNV9oaChiLCBjLCBkLCBhLCB4W2krIDJdLCAyMywgLTk5NTMzODY1MSk7XG5cbiAgICBhID0gbWQ1X2lpKGEsIGIsIGMsIGQsIHhbaSsgMF0sIDYgLCAtMTk4NjMwODQ0KTtcbiAgICBkID0gbWQ1X2lpKGQsIGEsIGIsIGMsIHhbaSsgN10sIDEwLCAgMTEyNjg5MTQxNSk7XG4gICAgYyA9IG1kNV9paShjLCBkLCBhLCBiLCB4W2krMTRdLCAxNSwgLTE0MTYzNTQ5MDUpO1xuICAgIGIgPSBtZDVfaWkoYiwgYywgZCwgYSwgeFtpKyA1XSwgMjEsIC01NzQzNDA1NSk7XG4gICAgYSA9IG1kNV9paShhLCBiLCBjLCBkLCB4W2krMTJdLCA2ICwgIDE3MDA0ODU1NzEpO1xuICAgIGQgPSBtZDVfaWkoZCwgYSwgYiwgYywgeFtpKyAzXSwgMTAsIC0xODk0OTg2NjA2KTtcbiAgICBjID0gbWQ1X2lpKGMsIGQsIGEsIGIsIHhbaSsxMF0sIDE1LCAtMTA1MTUyMyk7XG4gICAgYiA9IG1kNV9paShiLCBjLCBkLCBhLCB4W2krIDFdLCAyMSwgLTIwNTQ5MjI3OTkpO1xuICAgIGEgPSBtZDVfaWkoYSwgYiwgYywgZCwgeFtpKyA4XSwgNiAsICAxODczMzEzMzU5KTtcbiAgICBkID0gbWQ1X2lpKGQsIGEsIGIsIGMsIHhbaSsxNV0sIDEwLCAtMzA2MTE3NDQpO1xuICAgIGMgPSBtZDVfaWkoYywgZCwgYSwgYiwgeFtpKyA2XSwgMTUsIC0xNTYwMTk4MzgwKTtcbiAgICBiID0gbWQ1X2lpKGIsIGMsIGQsIGEsIHhbaSsxM10sIDIxLCAgMTMwOTE1MTY0OSk7XG4gICAgYSA9IG1kNV9paShhLCBiLCBjLCBkLCB4W2krIDRdLCA2ICwgLTE0NTUyMzA3MCk7XG4gICAgZCA9IG1kNV9paShkLCBhLCBiLCBjLCB4W2krMTFdLCAxMCwgLTExMjAyMTAzNzkpO1xuICAgIGMgPSBtZDVfaWkoYywgZCwgYSwgYiwgeFtpKyAyXSwgMTUsICA3MTg3ODcyNTkpO1xuICAgIGIgPSBtZDVfaWkoYiwgYywgZCwgYSwgeFtpKyA5XSwgMjEsIC0zNDM0ODU1NTEpO1xuXG4gICAgYSA9IHNhZmVfYWRkKGEsIG9sZGEpO1xuICAgIGIgPSBzYWZlX2FkZChiLCBvbGRiKTtcbiAgICBjID0gc2FmZV9hZGQoYywgb2xkYyk7XG4gICAgZCA9IHNhZmVfYWRkKGQsIG9sZGQpO1xuICB9XG4gIHJldHVybiBBcnJheShhLCBiLCBjLCBkKTtcblxufVxuXG4vKlxuICogVGhlc2UgZnVuY3Rpb25zIGltcGxlbWVudCB0aGUgZm91ciBiYXNpYyBvcGVyYXRpb25zIHRoZSBhbGdvcml0aG0gdXNlcy5cbiAqL1xuZnVuY3Rpb24gbWQ1X2NtbihxLCBhLCBiLCB4LCBzLCB0KVxue1xuICByZXR1cm4gc2FmZV9hZGQoYml0X3JvbChzYWZlX2FkZChzYWZlX2FkZChhLCBxKSwgc2FmZV9hZGQoeCwgdCkpLCBzKSxiKTtcbn1cbmZ1bmN0aW9uIG1kNV9mZihhLCBiLCBjLCBkLCB4LCBzLCB0KVxue1xuICByZXR1cm4gbWQ1X2NtbigoYiAmIGMpIHwgKCh+YikgJiBkKSwgYSwgYiwgeCwgcywgdCk7XG59XG5mdW5jdGlvbiBtZDVfZ2coYSwgYiwgYywgZCwgeCwgcywgdClcbntcbiAgcmV0dXJuIG1kNV9jbW4oKGIgJiBkKSB8IChjICYgKH5kKSksIGEsIGIsIHgsIHMsIHQpO1xufVxuZnVuY3Rpb24gbWQ1X2hoKGEsIGIsIGMsIGQsIHgsIHMsIHQpXG57XG4gIHJldHVybiBtZDVfY21uKGIgXiBjIF4gZCwgYSwgYiwgeCwgcywgdCk7XG59XG5mdW5jdGlvbiBtZDVfaWkoYSwgYiwgYywgZCwgeCwgcywgdClcbntcbiAgcmV0dXJuIG1kNV9jbW4oYyBeIChiIHwgKH5kKSksIGEsIGIsIHgsIHMsIHQpO1xufVxuXG4vKlxuICogQWRkIGludGVnZXJzLCB3cmFwcGluZyBhdCAyXjMyLiBUaGlzIHVzZXMgMTYtYml0IG9wZXJhdGlvbnMgaW50ZXJuYWxseVxuICogdG8gd29yayBhcm91bmQgYnVncyBpbiBzb21lIEpTIGludGVycHJldGVycy5cbiAqL1xuZnVuY3Rpb24gc2FmZV9hZGQoeCwgeSlcbntcbiAgdmFyIGxzdyA9ICh4ICYgMHhGRkZGKSArICh5ICYgMHhGRkZGKTtcbiAgdmFyIG1zdyA9ICh4ID4+IDE2KSArICh5ID4+IDE2KSArIChsc3cgPj4gMTYpO1xuICByZXR1cm4gKG1zdyA8PCAxNikgfCAobHN3ICYgMHhGRkZGKTtcbn1cblxuLypcbiAqIEJpdHdpc2Ugcm90YXRlIGEgMzItYml0IG51bWJlciB0byB0aGUgbGVmdC5cbiAqL1xuZnVuY3Rpb24gYml0X3JvbChudW0sIGNudClcbntcbiAgcmV0dXJuIChudW0gPDwgY250KSB8IChudW0gPj4+ICgzMiAtIGNudCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1kNShidWYpIHtcbiAgcmV0dXJuIGhlbHBlcnMuaGFzaChidWYsIGNvcmVfbWQ1LCAxNik7XG59OyIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbid1c2Ugc3RyaWN0JztcbnZhciBpbnRTaXplID0gNDtcbnZhciB6ZXJvQnVmZmVyID0gbmV3IEJ1ZmZlcihpbnRTaXplKTsgemVyb0J1ZmZlci5maWxsKDApO1xudmFyIGNocnN6ID0gODtcblxuZnVuY3Rpb24gdG9BcnJheShidWYsIGJpZ0VuZGlhbikge1xuICBpZiAoKGJ1Zi5sZW5ndGggJSBpbnRTaXplKSAhPT0gMCkge1xuICAgIHZhciBsZW4gPSBidWYubGVuZ3RoICsgKGludFNpemUgLSAoYnVmLmxlbmd0aCAlIGludFNpemUpKTtcbiAgICBidWYgPSBCdWZmZXIuY29uY2F0KFtidWYsIHplcm9CdWZmZXJdLCBsZW4pO1xuICB9XG5cbiAgdmFyIGFyciA9IFtdO1xuICB2YXIgZm4gPSBiaWdFbmRpYW4gPyBidWYucmVhZEludDMyQkUgOiBidWYucmVhZEludDMyTEU7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnVmLmxlbmd0aDsgaSArPSBpbnRTaXplKSB7XG4gICAgYXJyLnB1c2goZm4uY2FsbChidWYsIGkpKTtcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiB0b0J1ZmZlcihhcnIsIHNpemUsIGJpZ0VuZGlhbikge1xuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcihzaXplKTtcbiAgdmFyIGZuID0gYmlnRW5kaWFuID8gYnVmLndyaXRlSW50MzJCRSA6IGJ1Zi53cml0ZUludDMyTEU7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgZm4uY2FsbChidWYsIGFycltpXSwgaSAqIDQsIHRydWUpO1xuICB9XG4gIHJldHVybiBidWY7XG59XG5cbmZ1bmN0aW9uIGhhc2goYnVmLCBmbiwgaGFzaFNpemUsIGJpZ0VuZGlhbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSBidWYgPSBuZXcgQnVmZmVyKGJ1Zik7XG4gIHZhciBhcnIgPSBmbih0b0FycmF5KGJ1ZiwgYmlnRW5kaWFuKSwgYnVmLmxlbmd0aCAqIGNocnN6KTtcbiAgcmV0dXJuIHRvQnVmZmVyKGFyciwgaGFzaFNpemUsIGJpZ0VuZGlhbik7XG59XG5leHBvcnRzLmhhc2ggPSBoYXNoO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZM0psWVhSbExXaGhjMmd2YUdWc2NHVnljeTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpZDFjMlVnYzNSeWFXTjBKenRjYm5aaGNpQnBiblJUYVhwbElEMGdORHRjYm5aaGNpQjZaWEp2UW5WbVptVnlJRDBnYm1WM0lFSjFabVpsY2locGJuUlRhWHBsS1RzZ2VtVnliMEoxWm1abGNpNW1hV3hzS0RBcE8xeHVkbUZ5SUdOb2NuTjZJRDBnT0R0Y2JseHVablZ1WTNScGIyNGdkRzlCY25KaGVTaGlkV1lzSUdKcFowVnVaR2xoYmlrZ2UxeHVJQ0JwWmlBb0tHSjFaaTVzWlc1bmRHZ2dKU0JwYm5SVGFYcGxLU0FoUFQwZ01Da2dlMXh1SUNBZ0lIWmhjaUJzWlc0Z1BTQmlkV1l1YkdWdVozUm9JQ3NnS0dsdWRGTnBlbVVnTFNBb1luVm1MbXhsYm1kMGFDQWxJR2x1ZEZOcGVtVXBLVHRjYmlBZ0lDQmlkV1lnUFNCQ2RXWm1aWEl1WTI5dVkyRjBLRnRpZFdZc0lIcGxjbTlDZFdabVpYSmRMQ0JzWlc0cE8xeHVJQ0I5WEc1Y2JpQWdkbUZ5SUdGeWNpQTlJRnRkTzF4dUlDQjJZWElnWm00Z1BTQmlhV2RGYm1ScFlXNGdQeUJpZFdZdWNtVmhaRWx1ZERNeVFrVWdPaUJpZFdZdWNtVmhaRWx1ZERNeVRFVTdYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z1luVm1MbXhsYm1kMGFEc2dhU0FyUFNCcGJuUlRhWHBsS1NCN1hHNGdJQ0FnWVhKeUxuQjFjMmdvWm00dVkyRnNiQ2hpZFdZc0lHa3BLVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdZWEp5TzF4dWZWeHVYRzVtZFc1amRHbHZiaUIwYjBKMVptWmxjaWhoY25Jc0lITnBlbVVzSUdKcFowVnVaR2xoYmlrZ2UxeHVJQ0IyWVhJZ1luVm1JRDBnYm1WM0lFSjFabVpsY2loemFYcGxLVHRjYmlBZ2RtRnlJR1p1SUQwZ1ltbG5SVzVrYVdGdUlEOGdZblZtTG5keWFYUmxTVzUwTXpKQ1JTQTZJR0oxWmk1M2NtbDBaVWx1ZERNeVRFVTdYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z1lYSnlMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnWm00dVkyRnNiQ2hpZFdZc0lHRnljbHRwWFN3Z2FTQXFJRFFzSUhSeWRXVXBPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQmlkV1k3WEc1OVhHNWNibVoxYm1OMGFXOXVJR2hoYzJnb1luVm1MQ0JtYml3Z2FHRnphRk5wZW1Vc0lHSnBaMFZ1WkdsaGJpa2dlMXh1SUNCcFppQW9JVUoxWm1abGNpNXBjMEoxWm1abGNpaGlkV1lwS1NCaWRXWWdQU0J1WlhjZ1FuVm1abVZ5S0dKMVppazdYRzRnSUhaaGNpQmhjbklnUFNCbWJpaDBiMEZ5Y21GNUtHSjFaaXdnWW1sblJXNWthV0Z1S1N3Z1luVm1MbXhsYm1kMGFDQXFJR05vY25ONktUdGNiaUFnY21WMGRYSnVJSFJ2UW5WbVptVnlLR0Z5Y2l3Z2FHRnphRk5wZW1Vc0lHSnBaMFZ1WkdsaGJpazdYRzU5WEc1bGVIQnZjblJ6TG1oaGMyZ2dQU0JvWVhOb095SmRmUT09IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xudmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmluaGVyaXRzKFN0cmVhbUNpcGhlciwgVHJhbnNmb3JtKVxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW1DaXBoZXJcbmZ1bmN0aW9uIFN0cmVhbUNpcGhlciAobW9kZSwga2V5LCBpdiwgZGVjcnlwdCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU3RyZWFtQ2lwaGVyKSkge1xuICAgIHJldHVybiBuZXcgU3RyZWFtQ2lwaGVyKG1vZGUsIGtleSwgaXYpXG4gIH1cbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KVxuICB0aGlzLl9wcmV2ID0gbmV3IEJ1ZmZlcihpdi5sZW5ndGgpXG4gIHRoaXMuX2NhY2hlID0gbmV3IEJ1ZmZlcignJylcbiAgdGhpcy5fc2VjQ2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxuICB0aGlzLl9kZWNyeXB0ID0gZGVjcnlwdFxuICBpdi5jb3B5KHRoaXMuX3ByZXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgcmV0dXJuIHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaywgdGhpcy5fZGVjcnlwdClcbn1cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9jaXBoZXIuc2NydWIoKVxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMWphWEJvWlhJdmJtOWtaVjl0YjJSMWJHVnpMMkp5YjNkelpYSnBabmt0WVdWekwzTjBjbVZoYlVOcGNHaGxjaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlHRmxjeUE5SUhKbGNYVnBjbVVvSnk0dllXVnpKeWxjYm5aaGNpQlVjbUZ1YzJadmNtMGdQU0J5WlhGMWFYSmxLQ2RqYVhCb1pYSXRZbUZ6WlNjcFhHNTJZWElnYVc1b1pYSnBkSE1nUFNCeVpYRjFhWEpsS0NkcGJtaGxjbWwwY3ljcFhHNWNibWx1YUdWeWFYUnpLRk4wY21WaGJVTnBjR2hsY2l3Z1ZISmhibk5tYjNKdEtWeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlRkSEpsWVcxRGFYQm9aWEpjYm1aMWJtTjBhVzl1SUZOMGNtVmhiVU5wY0dobGNpQW9iVzlrWlN3Z2EyVjVMQ0JwZGl3Z1pHVmpjbmx3ZENrZ2UxeHVJQ0JwWmlBb0lTaDBhR2x6SUdsdWMzUmhibU5sYjJZZ1UzUnlaV0Z0UTJsd2FHVnlLU2tnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVTNSeVpXRnRRMmx3YUdWeUtHMXZaR1VzSUd0bGVTd2dhWFlwWEc0Z0lIMWNiaUFnVkhKaGJuTm1iM0p0TG1OaGJHd29kR2hwY3lsY2JpQWdkR2hwY3k1ZlkybHdhR1Z5SUQwZ2JtVjNJR0ZsY3k1QlJWTW9hMlY1S1Z4dUlDQjBhR2x6TGw5d2NtVjJJRDBnYm1WM0lFSjFabVpsY2locGRpNXNaVzVuZEdncFhHNGdJSFJvYVhNdVgyTmhZMmhsSUQwZ2JtVjNJRUoxWm1abGNpZ25KeWxjYmlBZ2RHaHBjeTVmYzJWalEyRmphR1VnUFNCdVpYY2dRblZtWm1WeUtDY25LVnh1SUNCMGFHbHpMbDlrWldOeWVYQjBJRDBnWkdWamNubHdkRnh1SUNCcGRpNWpiM0I1S0hSb2FYTXVYM0J5WlhZcFhHNGdJSFJvYVhNdVgyMXZaR1VnUFNCdGIyUmxYRzU5WEc1VGRISmxZVzFEYVhCb1pYSXVjSEp2ZEc5MGVYQmxMbDkxY0dSaGRHVWdQU0JtZFc1amRHbHZiaUFvWTJoMWJtc3BJSHRjYmlBZ2NtVjBkWEp1SUhSb2FYTXVYMjF2WkdVdVpXNWpjbmx3ZENoMGFHbHpMQ0JqYUhWdWF5d2dkR2hwY3k1ZlpHVmpjbmx3ZENsY2JuMWNibE4wY21WaGJVTnBjR2hsY2k1d2NtOTBiM1I1Y0dVdVgyWnBibUZzSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNCMGFHbHpMbDlqYVhCb1pYSXVjMk55ZFdJb0tWeHVmVnh1SWwxOSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbnZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZnVuY3Rpb24gZ2V0QmxvY2sgKHNlbGYpIHtcbiAgc2VsZi5fcHJldiA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgcmV0dXJuIHNlbGYuX3ByZXZcbn1cblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rKSB7XG4gIHdoaWxlIChzZWxmLl9jYWNoZS5sZW5ndGggPCBjaHVuay5sZW5ndGgpIHtcbiAgICBzZWxmLl9jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3NlbGYuX2NhY2hlLCBnZXRCbG9jayhzZWxmKV0pXG4gIH1cblxuICB2YXIgcGFkID0gc2VsZi5fY2FjaGUuc2xpY2UoMCwgY2h1bmsubGVuZ3RoKVxuICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGNodW5rLmxlbmd0aClcbiAgcmV0dXJuIHhvcihjaHVuaywgcGFkKVxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMWphWEJvWlhJdmJtOWtaVjl0YjJSMWJHVnpMMkp5YjNkelpYSnBabmt0WVdWekwyMXZaR1Z6TDI5bVlpNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUhodmNpQTlJSEpsY1hWcGNtVW9KMkoxWm1abGNpMTRiM0luS1Z4dVhHNW1kVzVqZEdsdmJpQm5aWFJDYkc5amF5QW9jMlZzWmlrZ2UxeHVJQ0J6Wld4bUxsOXdjbVYySUQwZ2MyVnNaaTVmWTJsd2FHVnlMbVZ1WTNKNWNIUkNiRzlqYXloelpXeG1MbDl3Y21WMktWeHVJQ0J5WlhSMWNtNGdjMlZzWmk1ZmNISmxkbHh1ZlZ4dVhHNWxlSEJ2Y25SekxtVnVZM0o1Y0hRZ1BTQm1kVzVqZEdsdmJpQW9jMlZzWml3Z1kyaDFibXNwSUh0Y2JpQWdkMmhwYkdVZ0tITmxiR1l1WDJOaFkyaGxMbXhsYm1kMGFDQThJR05vZFc1ckxteGxibWQwYUNrZ2UxeHVJQ0FnSUhObGJHWXVYMk5oWTJobElEMGdRblZtWm1WeUxtTnZibU5oZENoYmMyVnNaaTVmWTJGamFHVXNJR2RsZEVKc2IyTnJLSE5sYkdZcFhTbGNiaUFnZlZ4dVhHNGdJSFpoY2lCd1lXUWdQU0J6Wld4bUxsOWpZV05vWlM1emJHbGpaU2d3TENCamFIVnVheTVzWlc1bmRHZ3BYRzRnSUhObGJHWXVYMk5oWTJobElEMGdjMlZzWmk1ZlkyRmphR1V1YzJ4cFkyVW9ZMmgxYm1zdWJHVnVaM1JvS1Z4dUlDQnlaWFIxY200Z2VHOXlLR05vZFc1ckxDQndZV1FwWEc1OVhHNGlYWDA9IiwiZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGJsb2NrKSB7XG4gIHJldHVybiBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKGJsb2NrKVxufVxuZXhwb3J0cy5kZWNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGJsb2NrKSB7XG4gIHJldHVybiBzZWxmLl9jaXBoZXIuZGVjcnlwdEJsb2NrKGJsb2NrKVxufVxuIiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xudmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5mdW5jdGlvbiBpbmNyMzIgKGl2KSB7XG4gIHZhciBsZW4gPSBpdi5sZW5ndGhcbiAgdmFyIGl0ZW1cbiAgd2hpbGUgKGxlbi0tKSB7XG4gICAgaXRlbSA9IGl2LnJlYWRVSW50OChsZW4pXG4gICAgaWYgKGl0ZW0gPT09IDI1NSkge1xuICAgICAgaXYud3JpdGVVSW50OCgwLCBsZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZW0rK1xuICAgICAgaXYud3JpdGVVSW50OChpdGVtLCBsZW4pXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRCbG9jayAoc2VsZikge1xuICB2YXIgb3V0ID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICBpbmNyMzIoc2VsZi5fcHJldilcbiAgcmV0dXJuIG91dFxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmspIHtcbiAgd2hpbGUgKHNlbGYuX2NhY2hlLmxlbmd0aCA8IGNodW5rLmxlbmd0aCkge1xuICAgIHNlbGYuX2NhY2hlID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fY2FjaGUsIGdldEJsb2NrKHNlbGYpXSlcbiAgfVxuICB2YXIgcGFkID0gc2VsZi5fY2FjaGUuc2xpY2UoMCwgY2h1bmsubGVuZ3RoKVxuICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGNodW5rLmxlbmd0aClcbiAgcmV0dXJuIHhvcihjaHVuaywgcGFkKVxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMWphWEJvWlhJdmJtOWtaVjl0YjJSMWJHVnpMMkp5YjNkelpYSnBabmt0WVdWekwyMXZaR1Z6TDJOMGNpNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlIaHZjaUE5SUhKbGNYVnBjbVVvSjJKMVptWmxjaTE0YjNJbktWeHVYRzVtZFc1amRHbHZiaUJwYm1OeU16SWdLR2wyS1NCN1hHNGdJSFpoY2lCc1pXNGdQU0JwZGk1c1pXNW5kR2hjYmlBZ2RtRnlJR2wwWlcxY2JpQWdkMmhwYkdVZ0tHeGxiaTB0S1NCN1hHNGdJQ0FnYVhSbGJTQTlJR2wyTG5KbFlXUlZTVzUwT0Noc1pXNHBYRzRnSUNBZ2FXWWdLR2wwWlcwZ1BUMDlJREkxTlNrZ2UxeHVJQ0FnSUNBZ2FYWXVkM0pwZEdWVlNXNTBPQ2d3TENCc1pXNHBYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdsMFpXMHJLMXh1SUNBZ0lDQWdhWFl1ZDNKcGRHVlZTVzUwT0NocGRHVnRMQ0JzWlc0cFhHNGdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lIMWNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJuWlhSQ2JHOWpheUFvYzJWc1ppa2dlMXh1SUNCMllYSWdiM1YwSUQwZ2MyVnNaaTVmWTJsd2FHVnlMbVZ1WTNKNWNIUkNiRzlqYXloelpXeG1MbDl3Y21WMktWeHVJQ0JwYm1OeU16SW9jMlZzWmk1ZmNISmxkaWxjYmlBZ2NtVjBkWEp1SUc5MWRGeHVmVnh1WEc1bGVIQnZjblJ6TG1WdVkzSjVjSFFnUFNCbWRXNWpkR2x2YmlBb2MyVnNaaXdnWTJoMWJtc3BJSHRjYmlBZ2QyaHBiR1VnS0hObGJHWXVYMk5oWTJobExteGxibWQwYUNBOElHTm9kVzVyTG14bGJtZDBhQ2tnZTF4dUlDQWdJSE5sYkdZdVgyTmhZMmhsSUQwZ1FuVm1abVZ5TG1OdmJtTmhkQ2hiYzJWc1ppNWZZMkZqYUdVc0lHZGxkRUpzYjJOcktITmxiR1lwWFNsY2JpQWdmVnh1SUNCMllYSWdjR0ZrSUQwZ2MyVnNaaTVmWTJGamFHVXVjMnhwWTJVb01Dd2dZMmgxYm1zdWJHVnVaM1JvS1Z4dUlDQnpaV3htTGw5allXTm9aU0E5SUhObGJHWXVYMk5oWTJobExuTnNhV05sS0dOb2RXNXJMbXhsYm1kMGFDbGNiaUFnY21WMGRYSnVJSGh2Y2loamFIVnVheXdnY0dGa0tWeHVmVnh1SWwxOSIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbmZ1bmN0aW9uIGVuY3J5cHRCeXRlIChzZWxmLCBieXRlUGFyYW0sIGRlY3J5cHQpIHtcbiAgdmFyIHBhZCA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgdmFyIG91dCA9IHBhZFswXSBeIGJ5dGVQYXJhbVxuICBzZWxmLl9wcmV2ID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fcHJldi5zbGljZSgxKSwgbmV3IEJ1ZmZlcihbZGVjcnlwdCA/IGJ5dGVQYXJhbSA6IG91dF0pXSlcbiAgcmV0dXJuIG91dFxufVxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rLCBkZWNyeXB0KSB7XG4gIHZhciBsZW4gPSBjaHVuay5sZW5ndGhcbiAgdmFyIG91dCA9IG5ldyBCdWZmZXIobGVuKVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBlbmNyeXB0Qnl0ZShzZWxmLCBjaHVua1tpXSwgZGVjcnlwdClcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WW5KdmQzTmxjbWxtZVMxamFYQm9aWEl2Ym05a1pWOXRiMlIxYkdWekwySnliM2R6WlhKcFpua3RZV1Z6TDIxdlpHVnpMMk5tWWpndWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2labWxzWlNJNkltZGxibVZ5WVhSbFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUptZFc1amRHbHZiaUJsYm1OeWVYQjBRbmwwWlNBb2MyVnNaaXdnWW5sMFpWQmhjbUZ0TENCa1pXTnllWEIwS1NCN1hHNGdJSFpoY2lCd1lXUWdQU0J6Wld4bUxsOWphWEJvWlhJdVpXNWpjbmx3ZEVKc2IyTnJLSE5sYkdZdVgzQnlaWFlwWEc0Z0lIWmhjaUJ2ZFhRZ1BTQndZV1JiTUYwZ1hpQmllWFJsVUdGeVlXMWNiaUFnYzJWc1ppNWZjSEpsZGlBOUlFSjFabVpsY2k1amIyNWpZWFFvVzNObGJHWXVYM0J5WlhZdWMyeHBZMlVvTVNrc0lHNWxkeUJDZFdabVpYSW9XMlJsWTNKNWNIUWdQeUJpZVhSbFVHRnlZVzBnT2lCdmRYUmRLVjBwWEc0Z0lISmxkSFZ5YmlCdmRYUmNibjFjYm1WNGNHOXlkSE11Wlc1amNubHdkQ0E5SUdaMWJtTjBhVzl1SUNoelpXeG1MQ0JqYUhWdWF5d2daR1ZqY25sd2RDa2dlMXh1SUNCMllYSWdiR1Z1SUQwZ1kyaDFibXN1YkdWdVozUm9YRzRnSUhaaGNpQnZkWFFnUFNCdVpYY2dRblZtWm1WeUtHeGxiaWxjYmlBZ2RtRnlJR2tnUFNBdE1WeHVJQ0IzYUdsc1pTQW9LeXRwSUR3Z2JHVnVLU0I3WEc0Z0lDQWdiM1YwVzJsZElEMGdaVzVqY25sd2RFSjVkR1VvYzJWc1ppd2dZMmgxYm10YmFWMHNJR1JsWTNKNWNIUXBYRzRnSUgxY2JpQWdjbVYwZFhKdUlHOTFkRnh1ZlZ4dUlsMTkiLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG5mdW5jdGlvbiBlbmNyeXB0Qnl0ZSAoc2VsZiwgYnl0ZVBhcmFtLCBkZWNyeXB0KSB7XG4gIHZhciBwYWRcbiAgdmFyIGkgPSAtMVxuICB2YXIgbGVuID0gOFxuICB2YXIgb3V0ID0gMFxuICB2YXIgYml0LCB2YWx1ZVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgcGFkID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICAgIGJpdCA9IChieXRlUGFyYW0gJiAoMSA8PCAoNyAtIGkpKSkgPyAweDgwIDogMFxuICAgIHZhbHVlID0gcGFkWzBdIF4gYml0XG4gICAgb3V0ICs9ICgodmFsdWUgJiAweDgwKSA+PiAoaSAlIDgpKVxuICAgIHNlbGYuX3ByZXYgPSBzaGlmdEluKHNlbGYuX3ByZXYsIGRlY3J5cHQgPyBiaXQgOiB2YWx1ZSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmssIGRlY3J5cHQpIHtcbiAgdmFyIGxlbiA9IGNodW5rLmxlbmd0aFxuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcihsZW4pXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIG91dFtpXSA9IGVuY3J5cHRCeXRlKHNlbGYsIGNodW5rW2ldLCBkZWNyeXB0KVxuICB9XG4gIHJldHVybiBvdXRcbn1cbmZ1bmN0aW9uIHNoaWZ0SW4gKGJ1ZmZlciwgdmFsdWUpIHtcbiAgdmFyIGxlbiA9IGJ1ZmZlci5sZW5ndGhcbiAgdmFyIGkgPSAtMVxuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcihidWZmZXIubGVuZ3RoKVxuICBidWZmZXIgPSBCdWZmZXIuY29uY2F0KFtidWZmZXIsIG5ldyBCdWZmZXIoW3ZhbHVlXSldKVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0W2ldID0gYnVmZmVyW2ldIDw8IDEgfCBidWZmZXJbaSArIDFdID4+ICg3KVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZbkp2ZDNObGNtbG1lUzFqYVhCb1pYSXZibTlrWlY5dGIyUjFiR1Z6TDJKeWIzZHpaWEpwWm5rdFlXVnpMMjF2WkdWekwyTm1ZakV1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1aMWJtTjBhVzl1SUdWdVkzSjVjSFJDZVhSbElDaHpaV3htTENCaWVYUmxVR0Z5WVcwc0lHUmxZM0o1Y0hRcElIdGNiaUFnZG1GeUlIQmhaRnh1SUNCMllYSWdhU0E5SUMweFhHNGdJSFpoY2lCc1pXNGdQU0E0WEc0Z0lIWmhjaUJ2ZFhRZ1BTQXdYRzRnSUhaaGNpQmlhWFFzSUhaaGJIVmxYRzRnSUhkb2FXeGxJQ2dySzJrZ1BDQnNaVzRwSUh0Y2JpQWdJQ0J3WVdRZ1BTQnpaV3htTGw5amFYQm9aWEl1Wlc1amNubHdkRUpzYjJOcktITmxiR1l1WDNCeVpYWXBYRzRnSUNBZ1ltbDBJRDBnS0dKNWRHVlFZWEpoYlNBbUlDZ3hJRHc4SUNnM0lDMGdhU2twS1NBL0lEQjRPREFnT2lBd1hHNGdJQ0FnZG1Gc2RXVWdQU0J3WVdSYk1GMGdYaUJpYVhSY2JpQWdJQ0J2ZFhRZ0t6MGdLQ2gyWVd4MVpTQW1JREI0T0RBcElENCtJQ2hwSUNVZ09Da3BYRzRnSUNBZ2MyVnNaaTVmY0hKbGRpQTlJSE5vYVdaMFNXNG9jMlZzWmk1ZmNISmxkaXdnWkdWamNubHdkQ0EvSUdKcGRDQTZJSFpoYkhWbEtWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCdmRYUmNibjFjYm1WNGNHOXlkSE11Wlc1amNubHdkQ0E5SUdaMWJtTjBhVzl1SUNoelpXeG1MQ0JqYUhWdWF5d2daR1ZqY25sd2RDa2dlMXh1SUNCMllYSWdiR1Z1SUQwZ1kyaDFibXN1YkdWdVozUm9YRzRnSUhaaGNpQnZkWFFnUFNCdVpYY2dRblZtWm1WeUtHeGxiaWxjYmlBZ2RtRnlJR2tnUFNBdE1WeHVJQ0IzYUdsc1pTQW9LeXRwSUR3Z2JHVnVLU0I3WEc0Z0lDQWdiM1YwVzJsZElEMGdaVzVqY25sd2RFSjVkR1VvYzJWc1ppd2dZMmgxYm10YmFWMHNJR1JsWTNKNWNIUXBYRzRnSUgxY2JpQWdjbVYwZFhKdUlHOTFkRnh1ZlZ4dVpuVnVZM1JwYjI0Z2MyaHBablJKYmlBb1luVm1abVZ5TENCMllXeDFaU2tnZTF4dUlDQjJZWElnYkdWdUlEMGdZblZtWm1WeUxteGxibWQwYUZ4dUlDQjJZWElnYVNBOUlDMHhYRzRnSUhaaGNpQnZkWFFnUFNCdVpYY2dRblZtWm1WeUtHSjFabVpsY2k1c1pXNW5kR2dwWEc0Z0lHSjFabVpsY2lBOUlFSjFabVpsY2k1amIyNWpZWFFvVzJKMVptWmxjaXdnYm1WM0lFSjFabVpsY2loYmRtRnNkV1ZkS1YwcFhHNGdJSGRvYVd4bElDZ3JLMmtnUENCc1pXNHBJSHRjYmlBZ0lDQnZkWFJiYVYwZ1BTQmlkV1ptWlhKYmFWMGdQRHdnTVNCOElHSjFabVpsY2x0cElDc2dNVjBnUGo0Z0tEY3BYRzRnSUgxY2JpQWdjbVYwZFhKdUlHOTFkRnh1ZlZ4dUlsMTkiLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG52YXIgeG9yID0gcmVxdWlyZSgnYnVmZmVyLXhvcicpXG5cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBkYXRhLCBkZWNyeXB0KSB7XG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKCcnKVxuICB2YXIgbGVuXG5cbiAgd2hpbGUgKGRhdGEubGVuZ3RoKSB7XG4gICAgaWYgKHNlbGYuX2NhY2hlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgc2VsZi5fY2FjaGUgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gICAgICBzZWxmLl9wcmV2ID0gbmV3IEJ1ZmZlcignJylcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5fY2FjaGUubGVuZ3RoIDw9IGRhdGEubGVuZ3RoKSB7XG4gICAgICBsZW4gPSBzZWxmLl9jYWNoZS5sZW5ndGhcbiAgICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoW291dCwgZW5jcnlwdFN0YXJ0KHNlbGYsIGRhdGEuc2xpY2UoMCwgbGVuKSwgZGVjcnlwdCldKVxuICAgICAgZGF0YSA9IGRhdGEuc2xpY2UobGVuKVxuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFtvdXQsIGVuY3J5cHRTdGFydChzZWxmLCBkYXRhLCBkZWNyeXB0KV0pXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cbmZ1bmN0aW9uIGVuY3J5cHRTdGFydCAoc2VsZiwgZGF0YSwgZGVjcnlwdCkge1xuICB2YXIgbGVuID0gZGF0YS5sZW5ndGhcbiAgdmFyIG91dCA9IHhvcihkYXRhLCBzZWxmLl9jYWNoZSlcbiAgc2VsZi5fY2FjaGUgPSBzZWxmLl9jYWNoZS5zbGljZShsZW4pXG4gIHNlbGYuX3ByZXYgPSBCdWZmZXIuY29uY2F0KFtzZWxmLl9wcmV2LCBkZWNyeXB0ID8gZGF0YSA6IG91dF0pXG4gIHJldHVybiBvdXRcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5amNubHdkRzh0WW5KdmQzTmxjbWxtZVM5dWIyUmxYMjF2WkhWc1pYTXZZbkp2ZDNObGNtbG1lUzFqYVhCb1pYSXZibTlrWlY5dGIyUjFiR1Z6TDJKeWIzZHpaWEpwWm5rdFlXVnpMMjF2WkdWekwyTm1ZaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWRtRnlJSGh2Y2lBOUlISmxjWFZwY21Vb0oySjFabVpsY2kxNGIzSW5LVnh1WEc1bGVIQnZjblJ6TG1WdVkzSjVjSFFnUFNCbWRXNWpkR2x2YmlBb2MyVnNaaXdnWkdGMFlTd2daR1ZqY25sd2RDa2dlMXh1SUNCMllYSWdiM1YwSUQwZ2JtVjNJRUoxWm1abGNpZ25KeWxjYmlBZ2RtRnlJR3hsYmx4dVhHNGdJSGRvYVd4bElDaGtZWFJoTG14bGJtZDBhQ2tnZTF4dUlDQWdJR2xtSUNoelpXeG1MbDlqWVdOb1pTNXNaVzVuZEdnZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUhObGJHWXVYMk5oWTJobElEMGdjMlZzWmk1ZlkybHdhR1Z5TG1WdVkzSjVjSFJDYkc5amF5aHpaV3htTGw5d2NtVjJLVnh1SUNBZ0lDQWdjMlZzWmk1ZmNISmxkaUE5SUc1bGR5QkNkV1ptWlhJb0p5Y3BYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSE5sYkdZdVgyTmhZMmhsTG14bGJtZDBhQ0E4UFNCa1lYUmhMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdiR1Z1SUQwZ2MyVnNaaTVmWTJGamFHVXViR1Z1WjNSb1hHNGdJQ0FnSUNCdmRYUWdQU0JDZFdabVpYSXVZMjl1WTJGMEtGdHZkWFFzSUdWdVkzSjVjSFJUZEdGeWRDaHpaV3htTENCa1lYUmhMbk5zYVdObEtEQXNJR3hsYmlrc0lHUmxZM0o1Y0hRcFhTbGNiaUFnSUNBZ0lHUmhkR0VnUFNCa1lYUmhMbk5zYVdObEtHeGxiaWxjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2IzVjBJRDBnUW5WbVptVnlMbU52Ym1OaGRDaGJiM1YwTENCbGJtTnllWEIwVTNSaGNuUW9jMlZzWml3Z1pHRjBZU3dnWkdWamNubHdkQ2xkS1Z4dUlDQWdJQ0FnWW5KbFlXdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2IzVjBYRzU5WEc1bWRXNWpkR2x2YmlCbGJtTnllWEIwVTNSaGNuUWdLSE5sYkdZc0lHUmhkR0VzSUdSbFkzSjVjSFFwSUh0Y2JpQWdkbUZ5SUd4bGJpQTlJR1JoZEdFdWJHVnVaM1JvWEc0Z0lIWmhjaUJ2ZFhRZ1BTQjRiM0lvWkdGMFlTd2djMlZzWmk1ZlkyRmphR1VwWEc0Z0lITmxiR1l1WDJOaFkyaGxJRDBnYzJWc1ppNWZZMkZqYUdVdWMyeHBZMlVvYkdWdUtWeHVJQ0J6Wld4bUxsOXdjbVYySUQwZ1FuVm1abVZ5TG1OdmJtTmhkQ2hiYzJWc1ppNWZjSEpsZGl3Z1pHVmpjbmx3ZENBL0lHUmhkR0VnT2lCdmRYUmRLVnh1SUNCeVpYUjFjbTRnYjNWMFhHNTlYRzRpWFgwPSIsInZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGJsb2NrKSB7XG4gIHZhciBkYXRhID0geG9yKGJsb2NrLCBzZWxmLl9wcmV2KVxuXG4gIHNlbGYuX3ByZXYgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKGRhdGEpXG4gIHJldHVybiBzZWxmLl9wcmV2XG59XG5cbmV4cG9ydHMuZGVjcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBibG9jaykge1xuICB2YXIgcGFkID0gc2VsZi5fcHJldlxuXG4gIHNlbGYuX3ByZXYgPSBibG9ja1xuICB2YXIgb3V0ID0gc2VsZi5fY2lwaGVyLmRlY3J5cHRCbG9jayhibG9jaylcblxuICByZXR1cm4geG9yKG91dCwgcGFkKVxufVxuIiwiZXhwb3J0c1snYWVzLTEyOC1lY2InXSA9IHtcbiAgY2lwaGVyOiAnQUVTJyxcbiAga2V5OiAxMjgsXG4gIGl2OiAwLFxuICBtb2RlOiAnRUNCJyxcbiAgdHlwZTogJ2Jsb2NrJ1xufVxuZXhwb3J0c1snYWVzLTE5Mi1lY2InXSA9IHtcbiAgY2lwaGVyOiAnQUVTJyxcbiAga2V5OiAxOTIsXG4gIGl2OiAwLFxuICBtb2RlOiAnRUNCJyxcbiAgdHlwZTogJ2Jsb2NrJ1xufVxuZXhwb3J0c1snYWVzLTI1Ni1lY2InXSA9IHtcbiAgY2lwaGVyOiAnQUVTJyxcbiAga2V5OiAyNTYsXG4gIGl2OiAwLFxuICBtb2RlOiAnRUNCJyxcbiAgdHlwZTogJ2Jsb2NrJ1xufVxuZXhwb3J0c1snYWVzLTEyOC1jYmMnXSA9IHtcbiAgY2lwaGVyOiAnQUVTJyxcbiAga2V5OiAxMjgsXG4gIGl2OiAxNixcbiAgbW9kZTogJ0NCQycsXG4gIHR5cGU6ICdibG9jaydcbn1cbmV4cG9ydHNbJ2Flcy0xOTItY2JjJ10gPSB7XG4gIGNpcGhlcjogJ0FFUycsXG4gIGtleTogMTkyLFxuICBpdjogMTYsXG4gIG1vZGU6ICdDQkMnLFxuICB0eXBlOiAnYmxvY2snXG59XG5leHBvcnRzWydhZXMtMjU2LWNiYyddID0ge1xuICBjaXBoZXI6ICdBRVMnLFxuICBrZXk6IDI1NixcbiAgaXY6IDE2LFxuICBtb2RlOiAnQ0JDJyxcbiAgdHlwZTogJ2Jsb2NrJ1xufVxuZXhwb3J0c1snYWVzMTI4J10gPSBleHBvcnRzWydhZXMtMTI4LWNiYyddXG5leHBvcnRzWydhZXMxOTInXSA9IGV4cG9ydHNbJ2Flcy0xOTItY2JjJ11cbmV4cG9ydHNbJ2FlczI1NiddID0gZXhwb3J0c1snYWVzLTI1Ni1jYmMnXVxuZXhwb3J0c1snYWVzLTEyOC1jZmInXSA9IHtcbiAgY2lwaGVyOiAnQUVTJyxcbiAga2V5OiAxMjgsXG4gIGl2OiAxNixcbiAgbW9kZTogJ0NGQicsXG4gIHR5cGU6ICdzdHJlYW0nXG59XG5leHBvcnRzWydhZXMtMTkyLWNmYiddID0ge1xuICBjaXBoZXI6ICdBRVMnLFxuICBrZXk6IDE5MixcbiAgaXY6IDE2LFxuICBtb2RlOiAnQ0ZCJyxcbiAgdHlwZTogJ3N0cmVhbSdcbn1cbmV4cG9ydHNbJ2Flcy0yNTYtY2ZiJ10gPSB7XG4gIGNpcGhlcjogJ0FFUycsXG4gIGtleTogMjU2LFxuICBpdjogMTYsXG4gIG1vZGU6ICdDRkInLFxuICB0eXBlOiAnc3RyZWFtJ1xufVxuZXhwb3J0c1snYWVzLTEyOC1jZmI4J10gPSB7XG4gIGNpcGhlcjogJ0FFUycsXG4gIGtleTogMTI4LFxuICBpdjogMTYsXG4gIG1vZGU6ICdDRkI4JyxcbiAgdHlwZTogJ3N0cmVhbSdcbn1cbmV4cG9ydHNbJ2Flcy0xOTItY2ZiOCddID0ge1xuICBjaXBoZXI6ICdBRVMnLFxuICBrZXk6IDE5MixcbiAgaXY6IDE2LFxuICBtb2RlOiAnQ0ZCOCcsXG4gIHR5cGU6ICdzdHJlYW0nXG59XG5leHBvcnRzWydhZXMtMjU2LWNmYjgnXSA9IHtcbiAgY2lwaGVyOiAnQUVTJyxcbiAga2V5OiAyNTYsXG4gIGl2OiAxNixcbiAgbW9kZTogJ0NGQjgnLFxuICB0eXBlOiAnc3RyZWFtJ1xufVxuZXhwb3J0c1snYWVzLTEyOC1jZmIxJ10gPSB7XG4gIGNpcGhlcjogJ0FFUycsXG4gIGtleTogMTI4LFxuICBpdjogMTYsXG4gIG1vZGU6ICdDRkIxJyxcbiAgdHlwZTogJ3N0cmVhbSdcbn1cbmV4cG9ydHNbJ2Flcy0xOTItY2ZiMSddID0ge1xuICBjaXBoZXI6ICdBRVMnLFxuICBrZXk6IDE5MixcbiAgaXY6IDE2LFxuICBtb2RlOiAnQ0ZCMScsXG4gIHR5cGU6ICdzdHJlYW0nXG59XG5leHBvcnRzWydhZXMtMjU2LWNmYjEnXSA9IHtcbiAgY2lwaGVyOiAnQUVTJyxcbiAga2V5OiAyNTYsXG4gIGl2OiAxNixcbiAgbW9kZTogJ0NGQjEnLFxuICB0eXBlOiAnc3RyZWFtJ1xufVxuZXhwb3J0c1snYWVzLTEyOC1vZmInXSA9IHtcbiAgY2lwaGVyOiAnQUVTJyxcbiAga2V5OiAxMjgsXG4gIGl2OiAxNixcbiAgbW9kZTogJ09GQicsXG4gIHR5cGU6ICdzdHJlYW0nXG59XG5leHBvcnRzWydhZXMtMTkyLW9mYiddID0ge1xuICBjaXBoZXI6ICdBRVMnLFxuICBrZXk6IDE5MixcbiAgaXY6IDE2LFxuICBtb2RlOiAnT0ZCJyxcbiAgdHlwZTogJ3N0cmVhbSdcbn1cbmV4cG9ydHNbJ2Flcy0yNTYtb2ZiJ10gPSB7XG4gIGNpcGhlcjogJ0FFUycsXG4gIGtleTogMjU2LFxuICBpdjogMTYsXG4gIG1vZGU6ICdPRkInLFxuICB0eXBlOiAnc3RyZWFtJ1xufVxuZXhwb3J0c1snYWVzLTEyOC1jdHInXSA9IHtcbiAgY2lwaGVyOiAnQUVTJyxcbiAga2V5OiAxMjgsXG4gIGl2OiAxNixcbiAgbW9kZTogJ0NUUicsXG4gIHR5cGU6ICdzdHJlYW0nXG59XG5leHBvcnRzWydhZXMtMTkyLWN0ciddID0ge1xuICBjaXBoZXI6ICdBRVMnLFxuICBrZXk6IDE5MixcbiAgaXY6IDE2LFxuICBtb2RlOiAnQ1RSJyxcbiAgdHlwZTogJ3N0cmVhbSdcbn1cbmV4cG9ydHNbJ2Flcy0yNTYtY3RyJ10gPSB7XG4gIGNpcGhlcjogJ0FFUycsXG4gIGtleTogMjU2LFxuICBpdjogMTYsXG4gIG1vZGU6ICdDVFInLFxuICB0eXBlOiAnc3RyZWFtJ1xufVxuZXhwb3J0c1snYWVzLTEyOC1nY20nXSA9IHtcbiAgY2lwaGVyOiAnQUVTJyxcbiAga2V5OiAxMjgsXG4gIGl2OiAxMixcbiAgbW9kZTogJ0dDTScsXG4gIHR5cGU6ICdhdXRoJ1xufVxuZXhwb3J0c1snYWVzLTE5Mi1nY20nXSA9IHtcbiAgY2lwaGVyOiAnQUVTJyxcbiAga2V5OiAxOTIsXG4gIGl2OiAxMixcbiAgbW9kZTogJ0dDTScsXG4gIHR5cGU6ICdhdXRoJ1xufVxuZXhwb3J0c1snYWVzLTI1Ni1nY20nXSA9IHtcbiAgY2lwaGVyOiAnQUVTJyxcbiAga2V5OiAyNTYsXG4gIGl2OiAxMixcbiAgbW9kZTogJ0dDTScsXG4gIHR5cGU6ICdhdXRoJ1xufVxuIiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xudmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgR0hBU0ggPSByZXF1aXJlKCcuL2doYXNoJylcbnZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcbmluaGVyaXRzKFN0cmVhbUNpcGhlciwgVHJhbnNmb3JtKVxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW1DaXBoZXJcblxuZnVuY3Rpb24gU3RyZWFtQ2lwaGVyIChtb2RlLCBrZXksIGl2LCBkZWNyeXB0KSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTdHJlYW1DaXBoZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBTdHJlYW1DaXBoZXIobW9kZSwga2V5LCBpdilcbiAgfVxuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuICB0aGlzLl9maW5JRCA9IEJ1ZmZlci5jb25jYXQoW2l2LCBuZXcgQnVmZmVyKFswLCAwLCAwLCAxXSldKVxuICBpdiA9IEJ1ZmZlci5jb25jYXQoW2l2LCBuZXcgQnVmZmVyKFswLCAwLCAwLCAyXSldKVxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBuZXcgQnVmZmVyKGl2Lmxlbmd0aClcbiAgdGhpcy5fY2FjaGUgPSBuZXcgQnVmZmVyKCcnKVxuICB0aGlzLl9zZWNDYWNoZSA9IG5ldyBCdWZmZXIoJycpXG4gIHRoaXMuX2RlY3J5cHQgPSBkZWNyeXB0XG4gIHRoaXMuX2FsZW4gPSAwXG4gIHRoaXMuX2xlbiA9IDBcbiAgaXYuY29weSh0aGlzLl9wcmV2KVxuICB0aGlzLl9tb2RlID0gbW9kZVxuICB2YXIgaCA9IG5ldyBCdWZmZXIoNClcbiAgaC5maWxsKDApXG4gIHRoaXMuX2doYXNoID0gbmV3IEdIQVNIKHRoaXMuX2NpcGhlci5lbmNyeXB0QmxvY2soaCkpXG4gIHRoaXMuX2F1dGhUYWcgPSBudWxsXG4gIHRoaXMuX2NhbGxlZCA9IGZhbHNlXG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgaWYgKCF0aGlzLl9jYWxsZWQgJiYgdGhpcy5fYWxlbikge1xuICAgIHZhciBydW1wID0gMTYgLSAodGhpcy5fYWxlbiAlIDE2KVxuICAgIGlmIChydW1wIDwgMTYpIHtcbiAgICAgIHJ1bXAgPSBuZXcgQnVmZmVyKHJ1bXApXG4gICAgICBydW1wLmZpbGwoMClcbiAgICAgIHRoaXMuX2doYXNoLnVwZGF0ZShydW1wKVxuICAgIH1cbiAgfVxuICB0aGlzLl9jYWxsZWQgPSB0cnVlXG4gIHZhciBvdXQgPSB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmspXG4gIGlmICh0aGlzLl9kZWNyeXB0KSB7XG4gICAgdGhpcy5fZ2hhc2gudXBkYXRlKGNodW5rKVxuICB9IGVsc2Uge1xuICAgIHRoaXMuX2doYXNoLnVwZGF0ZShvdXQpXG4gIH1cbiAgdGhpcy5fbGVuICs9IGNodW5rLmxlbmd0aFxuICByZXR1cm4gb3V0XG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuX2RlY3J5cHQgJiYgIXRoaXMuX2F1dGhUYWcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHN0YXRlIG9yIHVuYWJsZSB0byBhdXRoZW50aWNhdGUgZGF0YScpXG4gIH1cbiAgdmFyIHRhZyA9IHhvcih0aGlzLl9naGFzaC5maW5hbCh0aGlzLl9hbGVuICogOCwgdGhpcy5fbGVuICogOCksIHRoaXMuX2NpcGhlci5lbmNyeXB0QmxvY2sodGhpcy5fZmluSUQpKVxuICBpZiAodGhpcy5fZGVjcnlwdCkge1xuICAgIGlmICh4b3JUZXN0KHRhZywgdGhpcy5fYXV0aFRhZykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgc3RhdGUgb3IgdW5hYmxlIHRvIGF1dGhlbnRpY2F0ZSBkYXRhJylcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fYXV0aFRhZyA9IHRhZ1xuICB9XG4gIHRoaXMuX2NpcGhlci5zY3J1YigpXG59XG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLmdldEF1dGhUYWcgPSBmdW5jdGlvbiBnZXRBdXRoVGFnICgpIHtcbiAgaWYgKCF0aGlzLl9kZWNyeXB0ICYmIEJ1ZmZlci5pc0J1ZmZlcih0aGlzLl9hdXRoVGFnKSkge1xuICAgIHJldHVybiB0aGlzLl9hdXRoVGFnXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0aW5nIHRvIGdldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG4gIH1cbn1cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuc2V0QXV0aFRhZyA9IGZ1bmN0aW9uIHNldEF1dGhUYWcgKHRhZykge1xuICBpZiAodGhpcy5fZGVjcnlwdCkge1xuICAgIHRoaXMuX2F1dGhUYWcgPSB0YWdcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRpbmcgdG8gc2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbiAgfVxufVxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5zZXRBQUQgPSBmdW5jdGlvbiBzZXRBQUQgKGJ1Zikge1xuICBpZiAoIXRoaXMuX2NhbGxlZCkge1xuICAgIHRoaXMuX2doYXNoLnVwZGF0ZShidWYpXG4gICAgdGhpcy5fYWxlbiArPSBidWYubGVuZ3RoXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0aW5nIHRvIHNldCBBQUQgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxuICB9XG59XG5mdW5jdGlvbiB4b3JUZXN0IChhLCBiKSB7XG4gIHZhciBvdXQgPSAwXG4gIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICBvdXQrK1xuICB9XG4gIHZhciBsZW4gPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIG91dCArPSAoYVtpXSBeIGJbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMWphWEJvWlhJdmJtOWtaVjl0YjJSMWJHVnpMMkp5YjNkelpYSnBabmt0WVdWekwyRjFkR2hEYVhCb1pYSXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCaFpYTWdQU0J5WlhGMWFYSmxLQ2N1TDJGbGN5Y3BYRzUyWVhJZ1ZISmhibk5tYjNKdElEMGdjbVZ4ZFdseVpTZ25ZMmx3YUdWeUxXSmhjMlVuS1Z4dWRtRnlJR2x1YUdWeWFYUnpJRDBnY21WeGRXbHlaU2duYVc1b1pYSnBkSE1uS1Z4dWRtRnlJRWRJUVZOSUlEMGdjbVZ4ZFdseVpTZ25MaTluYUdGemFDY3BYRzUyWVhJZ2VHOXlJRDBnY21WeGRXbHlaU2duWW5WbVptVnlMWGh2Y2ljcFhHNXBibWhsY21sMGN5aFRkSEpsWVcxRGFYQm9aWElzSUZSeVlXNXpabTl5YlNsY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1UzUnlaV0Z0UTJsd2FHVnlYRzVjYm1aMWJtTjBhVzl1SUZOMGNtVmhiVU5wY0dobGNpQW9iVzlrWlN3Z2EyVjVMQ0JwZGl3Z1pHVmpjbmx3ZENrZ2UxeHVJQ0JwWmlBb0lTaDBhR2x6SUdsdWMzUmhibU5sYjJZZ1UzUnlaV0Z0UTJsd2FHVnlLU2tnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVTNSeVpXRnRRMmx3YUdWeUtHMXZaR1VzSUd0bGVTd2dhWFlwWEc0Z0lIMWNiaUFnVkhKaGJuTm1iM0p0TG1OaGJHd29kR2hwY3lsY2JpQWdkR2hwY3k1ZlptbHVTVVFnUFNCQ2RXWm1aWEl1WTI5dVkyRjBLRnRwZGl3Z2JtVjNJRUoxWm1abGNpaGJNQ3dnTUN3Z01Dd2dNVjBwWFNsY2JpQWdhWFlnUFNCQ2RXWm1aWEl1WTI5dVkyRjBLRnRwZGl3Z2JtVjNJRUoxWm1abGNpaGJNQ3dnTUN3Z01Dd2dNbDBwWFNsY2JpQWdkR2hwY3k1ZlkybHdhR1Z5SUQwZ2JtVjNJR0ZsY3k1QlJWTW9hMlY1S1Z4dUlDQjBhR2x6TGw5d2NtVjJJRDBnYm1WM0lFSjFabVpsY2locGRpNXNaVzVuZEdncFhHNGdJSFJvYVhNdVgyTmhZMmhsSUQwZ2JtVjNJRUoxWm1abGNpZ25KeWxjYmlBZ2RHaHBjeTVmYzJWalEyRmphR1VnUFNCdVpYY2dRblZtWm1WeUtDY25LVnh1SUNCMGFHbHpMbDlrWldOeWVYQjBJRDBnWkdWamNubHdkRnh1SUNCMGFHbHpMbDloYkdWdUlEMGdNRnh1SUNCMGFHbHpMbDlzWlc0Z1BTQXdYRzRnSUdsMkxtTnZjSGtvZEdocGN5NWZjSEpsZGlsY2JpQWdkR2hwY3k1ZmJXOWtaU0E5SUcxdlpHVmNiaUFnZG1GeUlHZ2dQU0J1WlhjZ1FuVm1abVZ5S0RRcFhHNGdJR2d1Wm1sc2JDZ3dLVnh1SUNCMGFHbHpMbDluYUdGemFDQTlJRzVsZHlCSFNFRlRTQ2gwYUdsekxsOWphWEJvWlhJdVpXNWpjbmx3ZEVKc2IyTnJLR2dwS1Z4dUlDQjBhR2x6TGw5aGRYUm9WR0ZuSUQwZ2JuVnNiRnh1SUNCMGFHbHpMbDlqWVd4c1pXUWdQU0JtWVd4elpWeHVmVnh1VTNSeVpXRnRRMmx3YUdWeUxuQnliM1J2ZEhsd1pTNWZkWEJrWVhSbElEMGdablZ1WTNScGIyNGdLR05vZFc1cktTQjdYRzRnSUdsbUlDZ2hkR2hwY3k1ZlkyRnNiR1ZrSUNZbUlIUm9hWE11WDJGc1pXNHBJSHRjYmlBZ0lDQjJZWElnY25WdGNDQTlJREUySUMwZ0tIUm9hWE11WDJGc1pXNGdKU0F4TmlsY2JpQWdJQ0JwWmlBb2NuVnRjQ0E4SURFMktTQjdYRzRnSUNBZ0lDQnlkVzF3SUQwZ2JtVjNJRUoxWm1abGNpaHlkVzF3S1Z4dUlDQWdJQ0FnY25WdGNDNW1hV3hzS0RBcFhHNGdJQ0FnSUNCMGFHbHpMbDluYUdGemFDNTFjR1JoZEdVb2NuVnRjQ2xjYmlBZ0lDQjlYRzRnSUgxY2JpQWdkR2hwY3k1ZlkyRnNiR1ZrSUQwZ2RISjFaVnh1SUNCMllYSWdiM1YwSUQwZ2RHaHBjeTVmYlc5a1pTNWxibU55ZVhCMEtIUm9hWE1zSUdOb2RXNXJLVnh1SUNCcFppQW9kR2hwY3k1ZlpHVmpjbmx3ZENrZ2UxeHVJQ0FnSUhSb2FYTXVYMmRvWVhOb0xuVndaR0YwWlNoamFIVnVheWxjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0IwYUdsekxsOW5hR0Z6YUM1MWNHUmhkR1VvYjNWMEtWeHVJQ0I5WEc0Z0lIUm9hWE11WDJ4bGJpQXJQU0JqYUhWdWF5NXNaVzVuZEdoY2JpQWdjbVYwZFhKdUlHOTFkRnh1ZlZ4dVUzUnlaV0Z0UTJsd2FHVnlMbkJ5YjNSdmRIbHdaUzVmWm1sdVlXd2dQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJR2xtSUNoMGFHbHpMbDlrWldOeWVYQjBJQ1ltSUNGMGFHbHpMbDloZFhSb1ZHRm5LU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZFZibk4xY0hCdmNuUmxaQ0J6ZEdGMFpTQnZjaUIxYm1GaWJHVWdkRzhnWVhWMGFHVnVkR2xqWVhSbElHUmhkR0VuS1Z4dUlDQjlYRzRnSUhaaGNpQjBZV2NnUFNCNGIzSW9kR2hwY3k1ZloyaGhjMmd1Wm1sdVlXd29kR2hwY3k1ZllXeGxiaUFxSURnc0lIUm9hWE11WDJ4bGJpQXFJRGdwTENCMGFHbHpMbDlqYVhCb1pYSXVaVzVqY25sd2RFSnNiMk5yS0hSb2FYTXVYMlpwYmtsRUtTbGNiaUFnYVdZZ0tIUm9hWE11WDJSbFkzSjVjSFFwSUh0Y2JpQWdJQ0JwWmlBb2VHOXlWR1Z6ZENoMFlXY3NJSFJvYVhNdVgyRjFkR2hVWVdjcEtTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oxVnVjM1Z3Y0c5eWRHVmtJSE4wWVhSbElHOXlJSFZ1WVdKc1pTQjBieUJoZFhSb1pXNTBhV05oZEdVZ1pHRjBZU2NwWEc0Z0lDQWdmVnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSFJvYVhNdVgyRjFkR2hVWVdjZ1BTQjBZV2RjYmlBZ2ZWeHVJQ0IwYUdsekxsOWphWEJvWlhJdWMyTnlkV0lvS1Z4dWZWeHVVM1J5WldGdFEybHdhR1Z5TG5CeWIzUnZkSGx3WlM1blpYUkJkWFJvVkdGbklEMGdablZ1WTNScGIyNGdaMlYwUVhWMGFGUmhaeUFvS1NCN1hHNGdJR2xtSUNnaGRHaHBjeTVmWkdWamNubHdkQ0FtSmlCQ2RXWm1aWEl1YVhOQ2RXWm1aWElvZEdocGN5NWZZWFYwYUZSaFp5a3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWVhWMGFGUmhaMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25RWFIwWlcxd2RHbHVaeUIwYnlCblpYUWdZWFYwYUNCMFlXY2dhVzRnZFc1emRYQndiM0owWldRZ2MzUmhkR1VuS1Z4dUlDQjlYRzU5WEc1VGRISmxZVzFEYVhCb1pYSXVjSEp2ZEc5MGVYQmxMbk5sZEVGMWRHaFVZV2NnUFNCbWRXNWpkR2x2YmlCelpYUkJkWFJvVkdGbklDaDBZV2NwSUh0Y2JpQWdhV1lnS0hSb2FYTXVYMlJsWTNKNWNIUXBJSHRjYmlBZ0lDQjBhR2x6TGw5aGRYUm9WR0ZuSUQwZ2RHRm5YRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZEJkSFJsYlhCMGFXNW5JSFJ2SUhObGRDQmhkWFJvSUhSaFp5QnBiaUIxYm5OMWNIQnZjblJsWkNCemRHRjBaU2NwWEc0Z0lIMWNibjFjYmxOMGNtVmhiVU5wY0dobGNpNXdjbTkwYjNSNWNHVXVjMlYwUVVGRUlEMGdablZ1WTNScGIyNGdjMlYwUVVGRUlDaGlkV1lwSUh0Y2JpQWdhV1lnS0NGMGFHbHpMbDlqWVd4c1pXUXBJSHRjYmlBZ0lDQjBhR2x6TGw5bmFHRnphQzUxY0dSaGRHVW9ZblZtS1Z4dUlDQWdJSFJvYVhNdVgyRnNaVzRnS3owZ1luVm1MbXhsYm1kMGFGeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblFYUjBaVzF3ZEdsdVp5QjBieUJ6WlhRZ1FVRkVJR2x1SUhWdWMzVndjRzl5ZEdWa0lITjBZWFJsSnlsY2JpQWdmVnh1ZlZ4dVpuVnVZM1JwYjI0Z2VHOXlWR1Z6ZENBb1lTd2dZaWtnZTF4dUlDQjJZWElnYjNWMElEMGdNRnh1SUNCcFppQW9ZUzVzWlc1bmRHZ2dJVDA5SUdJdWJHVnVaM1JvS1NCN1hHNGdJQ0FnYjNWMEt5dGNiaUFnZlZ4dUlDQjJZWElnYkdWdUlEMGdUV0YwYUM1dGFXNG9ZUzVzWlc1bmRHZ3NJR0l1YkdWdVozUm9LVnh1SUNCMllYSWdhU0E5SUMweFhHNGdJSGRvYVd4bElDZ3JLMmtnUENCc1pXNHBJSHRjYmlBZ0lDQnZkWFFnS3owZ0tHRmJhVjBnWGlCaVcybGRLVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnZkWFJjYm4xY2JpSmRmUT09IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3N0cmVhbScpLlRyYW5zZm9ybVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2RlcicpLlN0cmluZ0RlY29kZXJcbm1vZHVsZS5leHBvcnRzID0gQ2lwaGVyQmFzZVxuaW5oZXJpdHMoQ2lwaGVyQmFzZSwgVHJhbnNmb3JtKVxuZnVuY3Rpb24gQ2lwaGVyQmFzZSAoaGFzaE1vZGUpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5oYXNoTW9kZSA9IHR5cGVvZiBoYXNoTW9kZSA9PT0gJ3N0cmluZydcbiAgaWYgKHRoaXMuaGFzaE1vZGUpIHtcbiAgICB0aGlzW2hhc2hNb2RlXSA9IHRoaXMuX2ZpbmFsT3JEaWdlc3RcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmZpbmFsID0gdGhpcy5fZmluYWxPckRpZ2VzdFxuICB9XG4gIHRoaXMuX2RlY29kZXIgPSBudWxsXG4gIHRoaXMuX2VuY29kaW5nID0gbnVsbFxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEsIGlucHV0RW5jLCBvdXRwdXRFbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGRhdGEgPSBuZXcgQnVmZmVyKGRhdGEsIGlucHV0RW5jKVxuICB9XG4gIHZhciBvdXREYXRhID0gdGhpcy5fdXBkYXRlKGRhdGEpXG4gIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuICBpZiAob3V0cHV0RW5jKSB7XG4gICAgb3V0RGF0YSA9IHRoaXMuX3RvU3RyaW5nKG91dERhdGEsIG91dHB1dEVuYylcbiAgfVxuICByZXR1cm4gb3V0RGF0YVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uICgpIHt9XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLmdldEF1dGhUYWcgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIGdldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEF1dGhUYWcgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEFBRCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gc2V0IGFhZCBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoZGF0YSwgXywgbmV4dCkge1xuICB2YXIgZXJyXG4gIHRyeSB7XG4gICAgaWYgKHRoaXMuaGFzaE1vZGUpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZShkYXRhKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1c2godGhpcy5fdXBkYXRlKGRhdGEpKVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfSBmaW5hbGx5IHtcbiAgICBuZXh0KGVycilcbiAgfVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZsdXNoID0gZnVuY3Rpb24gKGRvbmUpIHtcbiAgdmFyIGVyclxuICB0cnkge1xuICAgIHRoaXMucHVzaCh0aGlzLl9maW5hbCgpKVxuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyID0gZVxuICB9IGZpbmFsbHkge1xuICAgIGRvbmUoZXJyKVxuICB9XG59XG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fZmluYWxPckRpZ2VzdCA9IGZ1bmN0aW9uIChvdXRwdXRFbmMpIHtcbiAgdmFyIG91dERhdGEgPSB0aGlzLl9maW5hbCgpIHx8IG5ldyBCdWZmZXIoJycpXG4gIGlmIChvdXRwdXRFbmMpIHtcbiAgICBvdXREYXRhID0gdGhpcy5fdG9TdHJpbmcob3V0RGF0YSwgb3V0cHV0RW5jLCB0cnVlKVxuICB9XG4gIHJldHVybiBvdXREYXRhXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLl90b1N0cmluZyA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jLCBmaW5hbCkge1xuICBpZiAoIXRoaXMuX2RlY29kZXIpIHtcbiAgICB0aGlzLl9kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKVxuICAgIHRoaXMuX2VuY29kaW5nID0gZW5jXG4gIH1cbiAgaWYgKHRoaXMuX2VuY29kaW5nICE9PSBlbmMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NhblxcJ3Qgc3dpdGNoIGVuY29kaW5ncycpXG4gIH1cbiAgdmFyIG91dCA9IHRoaXMuX2RlY29kZXIud3JpdGUodmFsdWUpXG4gIGlmIChmaW5hbCkge1xuICAgIG91dCArPSB0aGlzLl9kZWNvZGVyLmVuZCgpXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMWphWEJvWlhJdmJtOWtaVjl0YjJSMWJHVnpMMkp5YjNkelpYSnBabmt0WVdWekwyNXZaR1ZmYlc5a2RXeGxjeTlqYVhCb1pYSXRZbUZ6WlM5cGJtUmxlQzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW5aaGNpQlVjbUZ1YzJadmNtMGdQU0J5WlhGMWFYSmxLQ2R6ZEhKbFlXMG5LUzVVY21GdWMyWnZjbTFjYm5aaGNpQnBibWhsY21sMGN5QTlJSEpsY1hWcGNtVW9KMmx1YUdWeWFYUnpKeWxjYm5aaGNpQlRkSEpwYm1kRVpXTnZaR1Z5SUQwZ2NtVnhkV2x5WlNnbmMzUnlhVzVuWDJSbFkyOWtaWEluS1M1VGRISnBibWRFWldOdlpHVnlYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRU5wY0dobGNrSmhjMlZjYm1sdWFHVnlhWFJ6S0VOcGNHaGxja0poYzJVc0lGUnlZVzV6Wm05eWJTbGNibVoxYm1OMGFXOXVJRU5wY0dobGNrSmhjMlVnS0doaGMyaE5iMlJsS1NCN1hHNGdJRlJ5WVc1elptOXliUzVqWVd4c0tIUm9hWE1wWEc0Z0lIUm9hWE11YUdGemFFMXZaR1VnUFNCMGVYQmxiMllnYUdGemFFMXZaR1VnUFQwOUlDZHpkSEpwYm1jblhHNGdJR2xtSUNoMGFHbHpMbWhoYzJoTmIyUmxLU0I3WEc0Z0lDQWdkR2hwYzF0b1lYTm9UVzlrWlYwZ1BTQjBhR2x6TGw5bWFXNWhiRTl5UkdsblpYTjBYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdkR2hwY3k1bWFXNWhiQ0E5SUhSb2FYTXVYMlpwYm1Gc1QzSkVhV2RsYzNSY2JpQWdmVnh1SUNCMGFHbHpMbDlrWldOdlpHVnlJRDBnYm5Wc2JGeHVJQ0IwYUdsekxsOWxibU52WkdsdVp5QTlJRzUxYkd4Y2JuMWNia05wY0dobGNrSmhjMlV1Y0hKdmRHOTBlWEJsTG5Wd1pHRjBaU0E5SUdaMWJtTjBhVzl1SUNoa1lYUmhMQ0JwYm5CMWRFVnVZeXdnYjNWMGNIVjBSVzVqS1NCN1hHNGdJR2xtSUNoMGVYQmxiMllnWkdGMFlTQTlQVDBnSjNOMGNtbHVaeWNwSUh0Y2JpQWdJQ0JrWVhSaElEMGdibVYzSUVKMVptWmxjaWhrWVhSaExDQnBibkIxZEVWdVl5bGNiaUFnZlZ4dUlDQjJZWElnYjNWMFJHRjBZU0E5SUhSb2FYTXVYM1Z3WkdGMFpTaGtZWFJoS1Z4dUlDQnBaaUFvZEdocGN5NW9ZWE5vVFc5a1pTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpYRzRnSUgxY2JpQWdhV1lnS0c5MWRIQjFkRVZ1WXlrZ2UxeHVJQ0FnSUc5MWRFUmhkR0VnUFNCMGFHbHpMbDkwYjFOMGNtbHVaeWh2ZFhSRVlYUmhMQ0J2ZFhSd2RYUkZibU1wWEc0Z0lIMWNiaUFnY21WMGRYSnVJRzkxZEVSaGRHRmNibjFjYmx4dVEybHdhR1Z5UW1GelpTNXdjbTkwYjNSNWNHVXVjMlYwUVhWMGIxQmhaR1JwYm1jZ1BTQm1kVzVqZEdsdmJpQW9LU0I3ZlZ4dVhHNURhWEJvWlhKQ1lYTmxMbkJ5YjNSdmRIbHdaUzVuWlhSQmRYUm9WR0ZuSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjNSeWVXbHVaeUIwYnlCblpYUWdZWFYwYUNCMFlXY2dhVzRnZFc1emRYQndiM0owWldRZ2MzUmhkR1VuS1Z4dWZWeHVYRzVEYVhCb1pYSkNZWE5sTG5CeWIzUnZkSGx3WlM1elpYUkJkWFJvVkdGbklEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0ozUnllV2x1WnlCMGJ5QnpaWFFnWVhWMGFDQjBZV2NnYVc0Z2RXNXpkWEJ3YjNKMFpXUWdjM1JoZEdVbktWeHVmVnh1WEc1RGFYQm9aWEpDWVhObExuQnliM1J2ZEhsd1pTNXpaWFJCUVVRZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnbmRISjVhVzVuSUhSdklITmxkQ0JoWVdRZ2FXNGdkVzV6ZFhCd2IzSjBaV1FnYzNSaGRHVW5LVnh1ZlZ4dVhHNURhWEJvWlhKQ1lYTmxMbkJ5YjNSdmRIbHdaUzVmZEhKaGJuTm1iM0p0SUQwZ1puVnVZM1JwYjI0Z0tHUmhkR0VzSUY4c0lHNWxlSFFwSUh0Y2JpQWdkbUZ5SUdWeWNseHVJQ0IwY25rZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6TG1oaGMyaE5iMlJsS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbDkxY0dSaGRHVW9aR0YwWVNsY2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdkR2hwY3k1d2RYTm9LSFJvYVhNdVgzVndaR0YwWlNoa1lYUmhLU2xjYmlBZ0lDQjlYRzRnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNCbGNuSWdQU0JsWEc0Z0lIMGdabWx1WVd4c2VTQjdYRzRnSUNBZ2JtVjRkQ2hsY25JcFhHNGdJSDFjYm4xY2JrTnBjR2hsY2tKaGMyVXVjSEp2ZEc5MGVYQmxMbDltYkhWemFDQTlJR1oxYm1OMGFXOXVJQ2hrYjI1bEtTQjdYRzRnSUhaaGNpQmxjbkpjYmlBZ2RISjVJSHRjYmlBZ0lDQjBhR2x6TG5CMWMyZ29kR2hwY3k1ZlptbHVZV3dvS1NsY2JpQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJR1Z5Y2lBOUlHVmNiaUFnZlNCbWFXNWhiR3g1SUh0Y2JpQWdJQ0JrYjI1bEtHVnljaWxjYmlBZ2ZWeHVmVnh1UTJsd2FHVnlRbUZ6WlM1d2NtOTBiM1I1Y0dVdVgyWnBibUZzVDNKRWFXZGxjM1FnUFNCbWRXNWpkR2x2YmlBb2IzVjBjSFYwUlc1aktTQjdYRzRnSUhaaGNpQnZkWFJFWVhSaElEMGdkR2hwY3k1ZlptbHVZV3dvS1NCOGZDQnVaWGNnUW5WbVptVnlLQ2NuS1Z4dUlDQnBaaUFvYjNWMGNIVjBSVzVqS1NCN1hHNGdJQ0FnYjNWMFJHRjBZU0E5SUhSb2FYTXVYM1J2VTNSeWFXNW5LRzkxZEVSaGRHRXNJRzkxZEhCMWRFVnVZeXdnZEhKMVpTbGNiaUFnZlZ4dUlDQnlaWFIxY200Z2IzVjBSR0YwWVZ4dWZWeHVYRzVEYVhCb1pYSkNZWE5sTG5CeWIzUnZkSGx3WlM1ZmRHOVRkSEpwYm1jZ1BTQm1kVzVqZEdsdmJpQW9kbUZzZFdVc0lHVnVZeXdnWm1sdVlXd3BJSHRjYmlBZ2FXWWdLQ0YwYUdsekxsOWtaV052WkdWeUtTQjdYRzRnSUNBZ2RHaHBjeTVmWkdWamIyUmxjaUE5SUc1bGR5QlRkSEpwYm1kRVpXTnZaR1Z5S0dWdVl5bGNiaUFnSUNCMGFHbHpMbDlsYm1OdlpHbHVaeUE5SUdWdVkxeHVJQ0I5WEc0Z0lHbG1JQ2gwYUdsekxsOWxibU52WkdsdVp5QWhQVDBnWlc1aktTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkallXNWNYQ2QwSUhOM2FYUmphQ0JsYm1OdlpHbHVaM01uS1Z4dUlDQjlYRzRnSUhaaGNpQnZkWFFnUFNCMGFHbHpMbDlrWldOdlpHVnlMbmR5YVhSbEtIWmhiSFZsS1Z4dUlDQnBaaUFvWm1sdVlXd3BJSHRjYmlBZ0lDQnZkWFFnS3owZ2RHaHBjeTVmWkdWamIyUmxjaTVsYm1Rb0tWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCdmRYUmNibjFjYmlKZGZRPT0iLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhvciAoYSwgYikge1xuICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oYS5sZW5ndGgsIGIubGVuZ3RoKVxuICB2YXIgYnVmZmVyID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGJ1ZmZlcltpXSA9IGFbaV0gXiBiW2ldXG4gIH1cblxuICByZXR1cm4gYnVmZmVyXG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OWpjbmx3ZEc4dFluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WW5KdmQzTmxjbWxtZVMxamFYQm9aWEl2Ym05a1pWOXRiMlIxYkdWekwySnliM2R6WlhKcFpua3RZV1Z6TDI1dlpHVmZiVzlrZFd4bGN5OWlkV1ptWlhJdGVHOXlMMmx1WkdWNExtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUhodmNpQW9ZU3dnWWlrZ2UxeHVJQ0IyWVhJZ2JHVnVaM1JvSUQwZ1RXRjBhQzV0YVc0b1lTNXNaVzVuZEdnc0lHSXViR1Z1WjNSb0tWeHVJQ0IyWVhJZ1luVm1abVZ5SUQwZ2JtVjNJRUoxWm1abGNpaHNaVzVuZEdncFhHNWNiaUFnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCc1pXNW5kR2c3SUNzcmFTa2dlMXh1SUNBZ0lHSjFabVpsY2x0cFhTQTlJR0ZiYVYwZ1hpQmlXMmxkWEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnWW5WbVptVnlYRzU5WEc0aVhYMD0iLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG52YXIgemVyb3MgPSBuZXcgQnVmZmVyKDE2KVxuemVyb3MuZmlsbCgwKVxubW9kdWxlLmV4cG9ydHMgPSBHSEFTSFxuZnVuY3Rpb24gR0hBU0ggKGtleSkge1xuICB0aGlzLmggPSBrZXlcbiAgdGhpcy5zdGF0ZSA9IG5ldyBCdWZmZXIoMTYpXG4gIHRoaXMuc3RhdGUuZmlsbCgwKVxuICB0aGlzLmNhY2hlID0gbmV3IEJ1ZmZlcignJylcbn1cbi8vIGZyb20gaHR0cDovL2JpdHdpc2VzaGlmdGxlZnQuZ2l0aHViLmlvL3NqY2wvZG9jL3N5bWJvbHMvc3JjL2NvcmVfZ2NtLmpzLmh0bWxcbi8vIGJ5IEp1aG8gVsOkaMOkLUhlcnR0dWFcbkdIQVNILnByb3RvdHlwZS5naGFzaCA9IGZ1bmN0aW9uIChibG9jaykge1xuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBibG9jay5sZW5ndGgpIHtcbiAgICB0aGlzLnN0YXRlW2ldIF49IGJsb2NrW2ldXG4gIH1cbiAgdGhpcy5fbXVsdGlwbHkoKVxufVxuXG5HSEFTSC5wcm90b3R5cGUuX211bHRpcGx5ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgVmkgPSB0b0FycmF5KHRoaXMuaClcbiAgdmFyIFppID0gWzAsIDAsIDAsIDBdXG4gIHZhciBqLCB4aSwgbHNiX1ZpXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IDEyOCkge1xuICAgIHhpID0gKHRoaXMuc3RhdGVbfn4oaSAvIDgpXSAmICgxIDw8ICg3IC0gaSAlIDgpKSkgIT09IDBcbiAgICBpZiAoeGkpIHtcbiAgICAgIC8vIFpfaSsxID0gWl9pIF4gVl9pXG4gICAgICBaaSA9IHhvcihaaSwgVmkpXG4gICAgfVxuXG4gICAgLy8gU3RvcmUgdGhlIHZhbHVlIG9mIExTQihWX2kpXG4gICAgbHNiX1ZpID0gKFZpWzNdICYgMSkgIT09IDBcblxuICAgIC8vIFZfaSsxID0gVl9pID4+IDFcbiAgICBmb3IgKGogPSAzOyBqID4gMDsgai0tKSB7XG4gICAgICBWaVtqXSA9IChWaVtqXSA+Pj4gMSkgfCAoKFZpW2ogLSAxXSAmIDEpIDw8IDMxKVxuICAgIH1cbiAgICBWaVswXSA9IFZpWzBdID4+PiAxXG5cbiAgICAvLyBJZiBMU0IoVl9pKSBpcyAxLCBWX2krMSA9IChWX2kgPj4gMSkgXiBSXG4gICAgaWYgKGxzYl9WaSkge1xuICAgICAgVmlbMF0gPSBWaVswXSBeICgweGUxIDw8IDI0KVxuICAgIH1cbiAgfVxuICB0aGlzLnN0YXRlID0gZnJvbUFycmF5KFppKVxufVxuR0hBU0gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChidWYpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIGJ1Zl0pXG4gIHZhciBjaHVua1xuICB3aGlsZSAodGhpcy5jYWNoZS5sZW5ndGggPj0gMTYpIHtcbiAgICBjaHVuayA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgdGhpcy5naGFzaChjaHVuaylcbiAgfVxufVxuR0hBU0gucHJvdG90eXBlLmZpbmFsID0gZnVuY3Rpb24gKGFibCwgYmwpIHtcbiAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoKSB7XG4gICAgdGhpcy5naGFzaChCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCB6ZXJvc10sIDE2KSlcbiAgfVxuICB0aGlzLmdoYXNoKGZyb21BcnJheShbXG4gICAgMCwgYWJsLFxuICAgIDAsIGJsXG4gIF0pKVxuICByZXR1cm4gdGhpcy5zdGF0ZVxufVxuXG5mdW5jdGlvbiB0b0FycmF5IChidWYpIHtcbiAgcmV0dXJuIFtcbiAgICBidWYucmVhZFVJbnQzMkJFKDApLFxuICAgIGJ1Zi5yZWFkVUludDMyQkUoNCksXG4gICAgYnVmLnJlYWRVSW50MzJCRSg4KSxcbiAgICBidWYucmVhZFVJbnQzMkJFKDEyKVxuICBdXG59XG5mdW5jdGlvbiBmcm9tQXJyYXkgKG91dCkge1xuICBvdXQgPSBvdXQubWFwKGZpeHVwX3VpbnQzMilcbiAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIoMTYpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFswXSwgMClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzFdLCA0KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMl0sIDgpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFszXSwgMTIpXG4gIHJldHVybiBidWZcbn1cbnZhciB1aW50X21heCA9IE1hdGgucG93KDIsIDMyKVxuZnVuY3Rpb24gZml4dXBfdWludDMyICh4KSB7XG4gIHZhciByZXQsIHhfcG9zXG4gIHJldCA9IHggPiB1aW50X21heCB8fCB4IDwgMCA/ICh4X3BvcyA9IE1hdGguYWJzKHgpICUgdWludF9tYXgsIHggPCAwID8gdWludF9tYXggLSB4X3BvcyA6IHhfcG9zKSA6IHhcbiAgcmV0dXJuIHJldFxufVxuZnVuY3Rpb24geG9yIChhLCBiKSB7XG4gIHJldHVybiBbXG4gICAgYVswXSBeIGJbMF0sXG4gICAgYVsxXSBeIGJbMV0sXG4gICAgYVsyXSBeIGJbMl0sXG4gICAgYVszXSBeIGJbM11cbiAgXVxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMWphWEJvWlhJdmJtOWtaVjl0YjJSMWJHVnpMMkp5YjNkelpYSnBabmt0WVdWekwyZG9ZWE5vTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCNlpYSnZjeUE5SUc1bGR5QkNkV1ptWlhJb01UWXBYRzU2WlhKdmN5NW1hV3hzS0RBcFhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlFZElRVk5JWEc1bWRXNWpkR2x2YmlCSFNFRlRTQ0FvYTJWNUtTQjdYRzRnSUhSb2FYTXVhQ0E5SUd0bGVWeHVJQ0IwYUdsekxuTjBZWFJsSUQwZ2JtVjNJRUoxWm1abGNpZ3hOaWxjYmlBZ2RHaHBjeTV6ZEdGMFpTNW1hV3hzS0RBcFhHNGdJSFJvYVhNdVkyRmphR1VnUFNCdVpYY2dRblZtWm1WeUtDY25LVnh1ZlZ4dUx5OGdabkp2YlNCb2RIUndPaTh2WW1sMGQybHpaWE5vYVdaMGJHVm1kQzVuYVhSb2RXSXVhVzh2YzJwamJDOWtiMk12YzNsdFltOXNjeTl6Y21NdlkyOXlaVjluWTIwdWFuTXVhSFJ0YkZ4dUx5OGdZbmtnU25Wb2J5Qld3NlJvdzZRdFNHVnlkSFIxWVZ4dVIwaEJVMGd1Y0hKdmRHOTBlWEJsTG1kb1lYTm9JRDBnWm5WdVkzUnBiMjRnS0dKc2IyTnJLU0I3WEc0Z0lIWmhjaUJwSUQwZ0xURmNiaUFnZDJocGJHVWdLQ3NyYVNBOElHSnNiMk5yTG14bGJtZDBhQ2tnZTF4dUlDQWdJSFJvYVhNdWMzUmhkR1ZiYVYwZ1hqMGdZbXh2WTJ0YmFWMWNiaUFnZlZ4dUlDQjBhR2x6TGw5dGRXeDBhWEJzZVNncFhHNTlYRzVjYmtkSVFWTklMbkJ5YjNSdmRIbHdaUzVmYlhWc2RHbHdiSGtnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUhaaGNpQldhU0E5SUhSdlFYSnlZWGtvZEdocGN5NW9LVnh1SUNCMllYSWdXbWtnUFNCYk1Dd2dNQ3dnTUN3Z01GMWNiaUFnZG1GeUlHb3NJSGhwTENCc2MySmZWbWxjYmlBZ2RtRnlJR2tnUFNBdE1WeHVJQ0IzYUdsc1pTQW9LeXRwSUR3Z01USTRLU0I3WEc0Z0lDQWdlR2tnUFNBb2RHaHBjeTV6ZEdGMFpWdCtmaWhwSUM4Z09DbGRJQ1lnS0RFZ1BEd2dLRGNnTFNCcElDVWdPQ2twS1NBaFBUMGdNRnh1SUNBZ0lHbG1JQ2g0YVNrZ2UxeHVJQ0FnSUNBZ0x5OGdXbDlwS3pFZ1BTQmFYMmtnWGlCV1gybGNiaUFnSUNBZ0lGcHBJRDBnZUc5eUtGcHBMQ0JXYVNsY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCVGRHOXlaU0IwYUdVZ2RtRnNkV1VnYjJZZ1RGTkNLRlpmYVNsY2JpQWdJQ0JzYzJKZlZta2dQU0FvVm1sYk0xMGdKaUF4S1NBaFBUMGdNRnh1WEc0Z0lDQWdMeThnVmw5cEt6RWdQU0JXWDJrZ1BqNGdNVnh1SUNBZ0lHWnZjaUFvYWlBOUlETTdJR29nUGlBd095QnFMUzBwSUh0Y2JpQWdJQ0FnSUZacFcycGRJRDBnS0ZacFcycGRJRDQrUGlBeEtTQjhJQ2dvVm1sYmFpQXRJREZkSUNZZ01Ta2dQRHdnTXpFcFhHNGdJQ0FnZlZ4dUlDQWdJRlpwV3pCZElEMGdWbWxiTUYwZ1BqNCtJREZjYmx4dUlDQWdJQzh2SUVsbUlFeFRRaWhXWDJrcElHbHpJREVzSUZaZmFTc3hJRDBnS0ZaZmFTQStQaUF4S1NCZUlGSmNiaUFnSUNCcFppQW9iSE5pWDFacEtTQjdYRzRnSUNBZ0lDQldhVnN3WFNBOUlGWnBXekJkSUY0Z0tEQjRaVEVnUER3Z01qUXBYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lIUm9hWE11YzNSaGRHVWdQU0JtY205dFFYSnlZWGtvV21rcFhHNTlYRzVIU0VGVFNDNXdjbTkwYjNSNWNHVXVkWEJrWVhSbElEMGdablZ1WTNScGIyNGdLR0oxWmlrZ2UxeHVJQ0IwYUdsekxtTmhZMmhsSUQwZ1FuVm1abVZ5TG1OdmJtTmhkQ2hiZEdocGN5NWpZV05vWlN3Z1luVm1YU2xjYmlBZ2RtRnlJR05vZFc1clhHNGdJSGRvYVd4bElDaDBhR2x6TG1OaFkyaGxMbXhsYm1kMGFDQStQU0F4TmlrZ2UxeHVJQ0FnSUdOb2RXNXJJRDBnZEdocGN5NWpZV05vWlM1emJHbGpaU2d3TENBeE5pbGNiaUFnSUNCMGFHbHpMbU5oWTJobElEMGdkR2hwY3k1allXTm9aUzV6YkdsalpTZ3hOaWxjYmlBZ0lDQjBhR2x6TG1kb1lYTm9LR05vZFc1cktWeHVJQ0I5WEc1OVhHNUhTRUZUU0M1d2NtOTBiM1I1Y0dVdVptbHVZV3dnUFNCbWRXNWpkR2x2YmlBb1lXSnNMQ0JpYkNrZ2UxeHVJQ0JwWmlBb2RHaHBjeTVqWVdOb1pTNXNaVzVuZEdncElIdGNiaUFnSUNCMGFHbHpMbWRvWVhOb0tFSjFabVpsY2k1amIyNWpZWFFvVzNSb2FYTXVZMkZqYUdVc0lIcGxjbTl6WFN3Z01UWXBLVnh1SUNCOVhHNGdJSFJvYVhNdVoyaGhjMmdvWm5KdmJVRnljbUY1S0Z0Y2JpQWdJQ0F3TENCaFltd3NYRzRnSUNBZ01Dd2dZbXhjYmlBZ1hTa3BYRzRnSUhKbGRIVnliaUIwYUdsekxuTjBZWFJsWEc1OVhHNWNibVoxYm1OMGFXOXVJSFJ2UVhKeVlYa2dLR0oxWmlrZ2UxeHVJQ0J5WlhSMWNtNGdXMXh1SUNBZ0lHSjFaaTV5WldGa1ZVbHVkRE15UWtVb01Da3NYRzRnSUNBZ1luVm1MbkpsWVdSVlNXNTBNekpDUlNnMEtTeGNiaUFnSUNCaWRXWXVjbVZoWkZWSmJuUXpNa0pGS0RncExGeHVJQ0FnSUdKMVppNXlaV0ZrVlVsdWRETXlRa1VvTVRJcFhHNGdJRjFjYm4xY2JtWjFibU4wYVc5dUlHWnliMjFCY25KaGVTQW9iM1YwS1NCN1hHNGdJRzkxZENBOUlHOTFkQzV0WVhBb1ptbDRkWEJmZFdsdWRETXlLVnh1SUNCMllYSWdZblZtSUQwZ2JtVjNJRUoxWm1abGNpZ3hOaWxjYmlBZ1luVm1MbmR5YVhSbFZVbHVkRE15UWtVb2IzVjBXekJkTENBd0tWeHVJQ0JpZFdZdWQzSnBkR1ZWU1c1ME16SkNSU2h2ZFhSYk1WMHNJRFFwWEc0Z0lHSjFaaTUzY21sMFpWVkpiblF6TWtKRktHOTFkRnN5WFN3Z09DbGNiaUFnWW5WbUxuZHlhWFJsVlVsdWRETXlRa1VvYjNWMFd6TmRMQ0F4TWlsY2JpQWdjbVYwZFhKdUlHSjFabHh1ZlZ4dWRtRnlJSFZwYm5SZmJXRjRJRDBnVFdGMGFDNXdiM2NvTWl3Z016SXBYRzVtZFc1amRHbHZiaUJtYVhoMWNGOTFhVzUwTXpJZ0tIZ3BJSHRjYmlBZ2RtRnlJSEpsZEN3Z2VGOXdiM05jYmlBZ2NtVjBJRDBnZUNBK0lIVnBiblJmYldGNElIeDhJSGdnUENBd0lEOGdLSGhmY0c5eklEMGdUV0YwYUM1aFluTW9lQ2tnSlNCMWFXNTBYMjFoZUN3Z2VDQThJREFnUHlCMWFXNTBYMjFoZUNBdElIaGZjRzl6SURvZ2VGOXdiM01wSURvZ2VGeHVJQ0J5WlhSMWNtNGdjbVYwWEc1OVhHNW1kVzVqZEdsdmJpQjRiM0lnS0dFc0lHSXBJSHRjYmlBZ2NtVjBkWEp1SUZ0Y2JpQWdJQ0JoV3pCZElGNGdZbHN3WFN4Y2JpQWdJQ0JoV3pGZElGNGdZbHN4WFN4Y2JpQWdJQ0JoV3pKZElGNGdZbHN5WFN4Y2JpQWdJQ0JoV3pOZElGNGdZbHN6WFZ4dUlDQmRYRzU5WEc0aVhYMD0iLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG4vLyBiYXNlZCBvbiB0aGUgYWVzIGltcGxpbWVudGF0aW9uIGluIHRyaXBsZSBzZWNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9rZXliYXNlL3RyaXBsZXNlY1xuXG4vLyB3aGljaCBpcyBpbiB0dXJuIGJhc2VkIG9uIHRoZSBvbmUgZnJvbSBjcnlwdG8tanNcbi8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL1xuXG52YXIgdWludF9tYXggPSBNYXRoLnBvdygyLCAzMilcbmZ1bmN0aW9uIGZpeHVwX3VpbnQzMiAoeCkge1xuICB2YXIgcmV0LCB4X3Bvc1xuICByZXQgPSB4ID4gdWludF9tYXggfHwgeCA8IDAgPyAoeF9wb3MgPSBNYXRoLmFicyh4KSAlIHVpbnRfbWF4LCB4IDwgMCA/IHVpbnRfbWF4IC0geF9wb3MgOiB4X3BvcykgOiB4XG4gIHJldHVybiByZXRcbn1cbmZ1bmN0aW9uIHNjcnViX3ZlYyAodikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHYubGVuZ3RoOyB2KyspIHtcbiAgICB2W2ldID0gMFxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBHbG9iYWwgKCkge1xuICB0aGlzLlNCT1ggPSBbXVxuICB0aGlzLklOVl9TQk9YID0gW11cbiAgdGhpcy5TVUJfTUlYID0gW1tdLCBbXSwgW10sIFtdXVxuICB0aGlzLklOVl9TVUJfTUlYID0gW1tdLCBbXSwgW10sIFtdXVxuICB0aGlzLmluaXQoKVxuICB0aGlzLlJDT04gPSBbMHgwMCwgMHgwMSwgMHgwMiwgMHgwNCwgMHgwOCwgMHgxMCwgMHgyMCwgMHg0MCwgMHg4MCwgMHgxYiwgMHgzNl1cbn1cblxuR2xvYmFsLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZCwgaSwgc3gsIHQsIHgsIHgyLCB4NCwgeDgsIHhpLCBfaVxuICBkID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX2ksIF9yZXN1bHRzXG4gICAgX3Jlc3VsdHMgPSBbXVxuICAgIGZvciAoaSA9IF9pID0gMDsgX2kgPCAyNTY7IGkgPSArK19pKSB7XG4gICAgICBpZiAoaSA8IDEyOCkge1xuICAgICAgICBfcmVzdWx0cy5wdXNoKGkgPDwgMSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9yZXN1bHRzLnB1c2goKGkgPDwgMSkgXiAweDExYilcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIF9yZXN1bHRzXG4gIH0pKClcbiAgeCA9IDBcbiAgeGkgPSAwXG4gIGZvciAoaSA9IF9pID0gMDsgX2kgPCAyNTY7IGkgPSArK19pKSB7XG4gICAgc3ggPSB4aSBeICh4aSA8PCAxKSBeICh4aSA8PCAyKSBeICh4aSA8PCAzKSBeICh4aSA8PCA0KVxuICAgIHN4ID0gKHN4ID4+PiA4KSBeIChzeCAmIDB4ZmYpIF4gMHg2M1xuICAgIHRoaXMuU0JPWFt4XSA9IHN4XG4gICAgdGhpcy5JTlZfU0JPWFtzeF0gPSB4XG4gICAgeDIgPSBkW3hdXG4gICAgeDQgPSBkW3gyXVxuICAgIHg4ID0gZFt4NF1cbiAgICB0ID0gKGRbc3hdICogMHgxMDEpIF4gKHN4ICogMHgxMDEwMTAwKVxuICAgIHRoaXMuU1VCX01JWFswXVt4XSA9ICh0IDw8IDI0KSB8ICh0ID4+PiA4KVxuICAgIHRoaXMuU1VCX01JWFsxXVt4XSA9ICh0IDw8IDE2KSB8ICh0ID4+PiAxNilcbiAgICB0aGlzLlNVQl9NSVhbMl1beF0gPSAodCA8PCA4KSB8ICh0ID4+PiAyNClcbiAgICB0aGlzLlNVQl9NSVhbM11beF0gPSB0XG4gICAgdCA9ICh4OCAqIDB4MTAxMDEwMSkgXiAoeDQgKiAweDEwMDAxKSBeICh4MiAqIDB4MTAxKSBeICh4ICogMHgxMDEwMTAwKVxuICAgIHRoaXMuSU5WX1NVQl9NSVhbMF1bc3hdID0gKHQgPDwgMjQpIHwgKHQgPj4+IDgpXG4gICAgdGhpcy5JTlZfU1VCX01JWFsxXVtzeF0gPSAodCA8PCAxNikgfCAodCA+Pj4gMTYpXG4gICAgdGhpcy5JTlZfU1VCX01JWFsyXVtzeF0gPSAodCA8PCA4KSB8ICh0ID4+PiAyNClcbiAgICB0aGlzLklOVl9TVUJfTUlYWzNdW3N4XSA9IHRcbiAgICBpZiAoeCA9PT0gMCkge1xuICAgICAgeCA9IHhpID0gMVxuICAgIH0gZWxzZSB7XG4gICAgICB4ID0geDIgXiBkW2RbZFt4OCBeIHgyXV1dXG4gICAgICB4aSBePSBkW2RbeGldXVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG52YXIgRyA9IG5ldyBHbG9iYWwoKVxuXG5BRVMuYmxvY2tTaXplID0gNCAqIDRcblxuQUVTLnByb3RvdHlwZS5ibG9ja1NpemUgPSBBRVMuYmxvY2tTaXplXG5cbkFFUy5rZXlTaXplID0gMjU2IC8gOFxuXG5BRVMucHJvdG90eXBlLmtleVNpemUgPSBBRVMua2V5U2l6ZVxuXG5mdW5jdGlvbiBidWZmZXJUb0FycmF5IChidWYpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGggLyA0XG4gIHZhciBvdXQgPSBuZXcgQXJyYXkobGVuKVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBidWYucmVhZFVJbnQzMkJFKGkgKiA0KVxuICB9XG4gIHJldHVybiBvdXRcbn1cbmZ1bmN0aW9uIEFFUyAoa2V5KSB7XG4gIHRoaXMuX2tleSA9IGJ1ZmZlclRvQXJyYXkoa2V5KVxuICB0aGlzLl9kb1Jlc2V0KClcbn1cblxuQUVTLnByb3RvdHlwZS5fZG9SZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGludktzUm93LCBrZXlTaXplLCBrZXlXb3Jkcywga3NSb3csIGtzUm93cywgdFxuICBrZXlXb3JkcyA9IHRoaXMuX2tleVxuICBrZXlTaXplID0ga2V5V29yZHMubGVuZ3RoXG4gIHRoaXMuX25Sb3VuZHMgPSBrZXlTaXplICsgNlxuICBrc1Jvd3MgPSAodGhpcy5fblJvdW5kcyArIDEpICogNFxuICB0aGlzLl9rZXlTY2hlZHVsZSA9IFtdXG4gIGZvciAoa3NSb3cgPSAwOyBrc1JvdyA8IGtzUm93czsga3NSb3crKykge1xuICAgIHRoaXMuX2tleVNjaGVkdWxlW2tzUm93XSA9IGtzUm93IDwga2V5U2l6ZSA/IGtleVdvcmRzW2tzUm93XSA6ICh0ID0gdGhpcy5fa2V5U2NoZWR1bGVba3NSb3cgLSAxXSwgKGtzUm93ICUga2V5U2l6ZSkgPT09IDAgPyAodCA9ICh0IDw8IDgpIHwgKHQgPj4+IDI0KSwgdCA9IChHLlNCT1hbdCA+Pj4gMjRdIDw8IDI0KSB8IChHLlNCT1hbKHQgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChHLlNCT1hbKHQgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBHLlNCT1hbdCAmIDB4ZmZdLCB0IF49IEcuUkNPTlsoa3NSb3cgLyBrZXlTaXplKSB8IDBdIDw8IDI0KSA6IGtleVNpemUgPiA2ICYmIGtzUm93ICUga2V5U2l6ZSA9PT0gNCA/IHQgPSAoRy5TQk9YW3QgPj4+IDI0XSA8PCAyNCkgfCAoRy5TQk9YWyh0ID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoRy5TQk9YWyh0ID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgRy5TQk9YW3QgJiAweGZmXSA6IHZvaWQgMCwgdGhpcy5fa2V5U2NoZWR1bGVba3NSb3cgLSBrZXlTaXplXSBeIHQpXG4gIH1cbiAgdGhpcy5faW52S2V5U2NoZWR1bGUgPSBbXVxuICBmb3IgKGludktzUm93ID0gMDsgaW52S3NSb3cgPCBrc1Jvd3M7IGludktzUm93KyspIHtcbiAgICBrc1JvdyA9IGtzUm93cyAtIGludktzUm93XG4gICAgdCA9IHRoaXMuX2tleVNjaGVkdWxlW2tzUm93IC0gKGludktzUm93ICUgNCA/IDAgOiA0KV1cbiAgICB0aGlzLl9pbnZLZXlTY2hlZHVsZVtpbnZLc1Jvd10gPSBpbnZLc1JvdyA8IDQgfHwga3NSb3cgPD0gNCA/IHQgOiBHLklOVl9TVUJfTUlYWzBdW0cuU0JPWFt0ID4+PiAyNF1dIF4gRy5JTlZfU1VCX01JWFsxXVtHLlNCT1hbKHQgPj4+IDE2KSAmIDB4ZmZdXSBeIEcuSU5WX1NVQl9NSVhbMl1bRy5TQk9YWyh0ID4+PiA4KSAmIDB4ZmZdXSBeIEcuSU5WX1NVQl9NSVhbM11bRy5TQk9YW3QgJiAweGZmXV1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5BRVMucHJvdG90eXBlLmVuY3J5cHRCbG9jayA9IGZ1bmN0aW9uIChNKSB7XG4gIE0gPSBidWZmZXJUb0FycmF5KG5ldyBCdWZmZXIoTSkpXG4gIHZhciBvdXQgPSB0aGlzLl9kb0NyeXB0QmxvY2soTSwgdGhpcy5fa2V5U2NoZWR1bGUsIEcuU1VCX01JWCwgRy5TQk9YKVxuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcigxNilcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzBdLCAwKVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMV0sIDQpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsyXSwgOClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzNdLCAxMilcbiAgcmV0dXJuIGJ1ZlxufVxuXG5BRVMucHJvdG90eXBlLmRlY3J5cHRCbG9jayA9IGZ1bmN0aW9uIChNKSB7XG4gIE0gPSBidWZmZXJUb0FycmF5KG5ldyBCdWZmZXIoTSkpXG4gIHZhciB0ZW1wID0gW01bM10sIE1bMV1dXG4gIE1bMV0gPSB0ZW1wWzBdXG4gIE1bM10gPSB0ZW1wWzFdXG4gIHZhciBvdXQgPSB0aGlzLl9kb0NyeXB0QmxvY2soTSwgdGhpcy5faW52S2V5U2NoZWR1bGUsIEcuSU5WX1NVQl9NSVgsIEcuSU5WX1NCT1gpXG4gIHZhciBidWYgPSBuZXcgQnVmZmVyKDE2KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMF0sIDApXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFszXSwgNClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzJdLCA4KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMV0sIDEyKVxuICByZXR1cm4gYnVmXG59XG5cbkFFUy5wcm90b3R5cGUuc2NydWIgPSBmdW5jdGlvbiAoKSB7XG4gIHNjcnViX3ZlYyh0aGlzLl9rZXlTY2hlZHVsZSlcbiAgc2NydWJfdmVjKHRoaXMuX2ludktleVNjaGVkdWxlKVxuICBzY3J1Yl92ZWModGhpcy5fa2V5KVxufVxuXG5BRVMucHJvdG90eXBlLl9kb0NyeXB0QmxvY2sgPSBmdW5jdGlvbiAoTSwga2V5U2NoZWR1bGUsIFNVQl9NSVgsIFNCT1gpIHtcbiAgdmFyIGtzUm93LCBzMCwgczEsIHMyLCBzMywgdDAsIHQxLCB0MiwgdDNcblxuICBzMCA9IE1bMF0gXiBrZXlTY2hlZHVsZVswXVxuICBzMSA9IE1bMV0gXiBrZXlTY2hlZHVsZVsxXVxuICBzMiA9IE1bMl0gXiBrZXlTY2hlZHVsZVsyXVxuICBzMyA9IE1bM10gXiBrZXlTY2hlZHVsZVszXVxuICBrc1JvdyA9IDRcbiAgZm9yICh2YXIgcm91bmQgPSAxOyByb3VuZCA8IHRoaXMuX25Sb3VuZHM7IHJvdW5kKyspIHtcbiAgICB0MCA9IFNVQl9NSVhbMF1bczAgPj4+IDI0XSBeIFNVQl9NSVhbMV1bKHMxID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhbMl1bKHMyID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWFszXVtzMyAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICB0MSA9IFNVQl9NSVhbMF1bczEgPj4+IDI0XSBeIFNVQl9NSVhbMV1bKHMyID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhbMl1bKHMzID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWFszXVtzMCAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICB0MiA9IFNVQl9NSVhbMF1bczIgPj4+IDI0XSBeIFNVQl9NSVhbMV1bKHMzID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhbMl1bKHMwID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWFszXVtzMSAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICB0MyA9IFNVQl9NSVhbMF1bczMgPj4+IDI0XSBeIFNVQl9NSVhbMV1bKHMwID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhbMl1bKHMxID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWFszXVtzMiAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICBzMCA9IHQwXG4gICAgczEgPSB0MVxuICAgIHMyID0gdDJcbiAgICBzMyA9IHQzXG4gIH1cbiAgdDAgPSAoKFNCT1hbczAgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczEgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMiA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczMgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICB0MSA9ICgoU0JPWFtzMSA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMiA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMzID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMCAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gIHQyID0gKChTQk9YW3MyID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMzID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczAgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MxICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgdDMgPSAoKFNCT1hbczMgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczAgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMSA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczIgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICByZXR1cm4gW1xuICAgIGZpeHVwX3VpbnQzMih0MCksXG4gICAgZml4dXBfdWludDMyKHQxKSxcbiAgICBmaXh1cF91aW50MzIodDIpLFxuICAgIGZpeHVwX3VpbnQzMih0MylcbiAgXVxufVxuXG5leHBvcnRzLkFFUyA9IEFFU1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTlqY25sd2RHOHRZbkp2ZDNObGNtbG1lUzl1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTMWphWEJvWlhJdmJtOWtaVjl0YjJSMWJHVnpMMkp5YjNkelpYSnBabmt0WVdWekwyRmxjeTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHZJR0poYzJWa0lHOXVJSFJvWlNCaFpYTWdhVzF3YkdsdFpXNTBZWFJwYjI0Z2FXNGdkSEpwY0d4bElITmxZMXh1THk4Z2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwydGxlV0poYzJVdmRISnBjR3hsYzJWalhHNWNiaTh2SUhkb2FXTm9JR2x6SUdsdUlIUjFjbTRnWW1GelpXUWdiMjRnZEdobElHOXVaU0JtY205dElHTnllWEIwYnkxcWMxeHVMeThnYUhSMGNITTZMeTlqYjJSbExtZHZiMmRzWlM1amIyMHZjQzlqY25sd2RHOHRhbk12WEc1Y2JuWmhjaUIxYVc1MFgyMWhlQ0E5SUUxaGRHZ3VjRzkzS0RJc0lETXlLVnh1Wm5WdVkzUnBiMjRnWm1sNGRYQmZkV2x1ZERNeUlDaDRLU0I3WEc0Z0lIWmhjaUJ5WlhRc0lIaGZjRzl6WEc0Z0lISmxkQ0E5SUhnZ1BpQjFhVzUwWDIxaGVDQjhmQ0I0SUR3Z01DQS9JQ2g0WDNCdmN5QTlJRTFoZEdndVlXSnpLSGdwSUNVZ2RXbHVkRjl0WVhnc0lIZ2dQQ0F3SUQ4Z2RXbHVkRjl0WVhnZ0xTQjRYM0J2Y3lBNklIaGZjRzl6S1NBNklIaGNiaUFnY21WMGRYSnVJSEpsZEZ4dWZWeHVablZ1WTNScGIyNGdjMk55ZFdKZmRtVmpJQ2gyS1NCN1hHNGdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnZGk1c1pXNW5kR2c3SUhZckt5a2dlMXh1SUNBZ0lIWmJhVjBnUFNBd1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUdaaGJITmxYRzU5WEc1Y2JtWjFibU4wYVc5dUlFZHNiMkpoYkNBb0tTQjdYRzRnSUhSb2FYTXVVMEpQV0NBOUlGdGRYRzRnSUhSb2FYTXVTVTVXWDFOQ1QxZ2dQU0JiWFZ4dUlDQjBhR2x6TGxOVlFsOU5TVmdnUFNCYlcxMHNJRnRkTENCYlhTd2dXMTFkWEc0Z0lIUm9hWE11U1U1V1gxTlZRbDlOU1ZnZ1BTQmJXMTBzSUZ0ZExDQmJYU3dnVzExZFhHNGdJSFJvYVhNdWFXNXBkQ2dwWEc0Z0lIUm9hWE11VWtOUFRpQTlJRnN3ZURBd0xDQXdlREF4TENBd2VEQXlMQ0F3ZURBMExDQXdlREE0TENBd2VERXdMQ0F3ZURJd0xDQXdlRFF3TENBd2VEZ3dMQ0F3ZURGaUxDQXdlRE0yWFZ4dWZWeHVYRzVIYkc5aVlXd3VjSEp2ZEc5MGVYQmxMbWx1YVhRZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lIWmhjaUJrTENCcExDQnplQ3dnZEN3Z2VDd2dlRElzSUhnMExDQjRPQ3dnZUdrc0lGOXBYRzRnSUdRZ1BTQW9ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJSFpoY2lCZmFTd2dYM0psYzNWc2RITmNiaUFnSUNCZmNtVnpkV3gwY3lBOUlGdGRYRzRnSUNBZ1ptOXlJQ2hwSUQwZ1gya2dQU0F3T3lCZmFTQThJREkxTmpzZ2FTQTlJQ3NyWDJrcElIdGNiaUFnSUNBZ0lHbG1JQ2hwSUR3Z01USTRLU0I3WEc0Z0lDQWdJQ0FnSUY5eVpYTjFiSFJ6TG5CMWMyZ29hU0E4UENBeEtWeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ1gzSmxjM1ZzZEhNdWNIVnphQ2dvYVNBOFBDQXhLU0JlSURCNE1URmlLVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnWDNKbGMzVnNkSE5jYmlBZ2ZTa29LVnh1SUNCNElEMGdNRnh1SUNCNGFTQTlJREJjYmlBZ1ptOXlJQ2hwSUQwZ1gya2dQU0F3T3lCZmFTQThJREkxTmpzZ2FTQTlJQ3NyWDJrcElIdGNiaUFnSUNCemVDQTlJSGhwSUY0Z0tIaHBJRHc4SURFcElGNGdLSGhwSUR3OElESXBJRjRnS0hocElEdzhJRE1wSUY0Z0tIaHBJRHc4SURRcFhHNGdJQ0FnYzNnZ1BTQW9jM2dnUGo0K0lEZ3BJRjRnS0hONElDWWdNSGhtWmlrZ1hpQXdlRFl6WEc0Z0lDQWdkR2hwY3k1VFFrOVlXM2hkSUQwZ2MzaGNiaUFnSUNCMGFHbHpMa2xPVmw5VFFrOVlXM040WFNBOUlIaGNiaUFnSUNCNE1pQTlJR1JiZUYxY2JpQWdJQ0I0TkNBOUlHUmJlREpkWEc0Z0lDQWdlRGdnUFNCa1czZzBYVnh1SUNBZ0lIUWdQU0FvWkZ0emVGMGdLaUF3ZURFd01Ta2dYaUFvYzNnZ0tpQXdlREV3TVRBeE1EQXBYRzRnSUNBZ2RHaHBjeTVUVlVKZlRVbFlXekJkVzNoZElEMGdLSFFnUER3Z01qUXBJSHdnS0hRZ1BqNCtJRGdwWEc0Z0lDQWdkR2hwY3k1VFZVSmZUVWxZV3pGZFczaGRJRDBnS0hRZ1BEd2dNVFlwSUh3Z0tIUWdQajQrSURFMktWeHVJQ0FnSUhSb2FYTXVVMVZDWDAxSldGc3lYVnQ0WFNBOUlDaDBJRHc4SURncElId2dLSFFnUGo0K0lESTBLVnh1SUNBZ0lIUm9hWE11VTFWQ1gwMUpXRnN6WFZ0NFhTQTlJSFJjYmlBZ0lDQjBJRDBnS0hnNElDb2dNSGd4TURFd01UQXhLU0JlSUNoNE5DQXFJREI0TVRBd01ERXBJRjRnS0hneUlDb2dNSGd4TURFcElGNGdLSGdnS2lBd2VERXdNVEF4TURBcFhHNGdJQ0FnZEdocGN5NUpUbFpmVTFWQ1gwMUpXRnN3WFZ0emVGMGdQU0FvZENBOFBDQXlOQ2tnZkNBb2RDQStQajRnT0NsY2JpQWdJQ0IwYUdsekxrbE9WbDlUVlVKZlRVbFlXekZkVzNONFhTQTlJQ2gwSUR3OElERTJLU0I4SUNoMElENCtQaUF4TmlsY2JpQWdJQ0IwYUdsekxrbE9WbDlUVlVKZlRVbFlXekpkVzNONFhTQTlJQ2gwSUR3OElEZ3BJSHdnS0hRZ1BqNCtJREkwS1Z4dUlDQWdJSFJvYVhNdVNVNVdYMU5WUWw5TlNWaGJNMTFiYzNoZElEMGdkRnh1SUNBZ0lHbG1JQ2g0SUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0I0SUQwZ2VHa2dQU0F4WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIZ2dQU0I0TWlCZUlHUmJaRnRrVzNnNElGNGdlREpkWFYxY2JpQWdJQ0FnSUhocElGNDlJR1JiWkZ0NGFWMWRYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCMGNuVmxYRzU5WEc1Y2JuWmhjaUJISUQwZ2JtVjNJRWRzYjJKaGJDZ3BYRzVjYmtGRlV5NWliRzlqYTFOcGVtVWdQU0EwSUNvZ05GeHVYRzVCUlZNdWNISnZkRzkwZVhCbExtSnNiMk5yVTJsNlpTQTlJRUZGVXk1aWJHOWphMU5wZW1WY2JseHVRVVZUTG10bGVWTnBlbVVnUFNBeU5UWWdMeUE0WEc1Y2JrRkZVeTV3Y205MGIzUjVjR1V1YTJWNVUybDZaU0E5SUVGRlV5NXJaWGxUYVhwbFhHNWNibVoxYm1OMGFXOXVJR0oxWm1abGNsUnZRWEp5WVhrZ0tHSjFaaWtnZTF4dUlDQjJZWElnYkdWdUlEMGdZblZtTG14bGJtZDBhQ0F2SURSY2JpQWdkbUZ5SUc5MWRDQTlJRzVsZHlCQmNuSmhlU2hzWlc0cFhHNGdJSFpoY2lCcElEMGdMVEZjYmlBZ2QyaHBiR1VnS0NzcmFTQThJR3hsYmlrZ2UxeHVJQ0FnSUc5MWRGdHBYU0E5SUdKMVppNXlaV0ZrVlVsdWRETXlRa1VvYVNBcUlEUXBYRzRnSUgxY2JpQWdjbVYwZFhKdUlHOTFkRnh1ZlZ4dVpuVnVZM1JwYjI0Z1FVVlRJQ2hyWlhrcElIdGNiaUFnZEdocGN5NWZhMlY1SUQwZ1luVm1abVZ5Vkc5QmNuSmhlU2hyWlhrcFhHNGdJSFJvYVhNdVgyUnZVbVZ6WlhRb0tWeHVmVnh1WEc1QlJWTXVjSEp2ZEc5MGVYQmxMbDlrYjFKbGMyVjBJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0IyWVhJZ2FXNTJTM05TYjNjc0lHdGxlVk5wZW1Vc0lHdGxlVmR2Y21SekxDQnJjMUp2ZHl3Z2EzTlNiM2R6TENCMFhHNGdJR3RsZVZkdmNtUnpJRDBnZEdocGN5NWZhMlY1WEc0Z0lHdGxlVk5wZW1VZ1BTQnJaWGxYYjNKa2N5NXNaVzVuZEdoY2JpQWdkR2hwY3k1ZmJsSnZkVzVrY3lBOUlHdGxlVk5wZW1VZ0t5QTJYRzRnSUd0elVtOTNjeUE5SUNoMGFHbHpMbDl1VW05MWJtUnpJQ3NnTVNrZ0tpQTBYRzRnSUhSb2FYTXVYMnRsZVZOamFHVmtkV3hsSUQwZ1cxMWNiaUFnWm05eUlDaHJjMUp2ZHlBOUlEQTdJR3R6VW05M0lEd2dhM05TYjNkek95QnJjMUp2ZHlzcktTQjdYRzRnSUNBZ2RHaHBjeTVmYTJWNVUyTm9aV1IxYkdWYmEzTlNiM2RkSUQwZ2EzTlNiM2NnUENCclpYbFRhWHBsSUQ4Z2EyVjVWMjl5WkhOYmEzTlNiM2RkSURvZ0tIUWdQU0IwYUdsekxsOXJaWGxUWTJobFpIVnNaVnRyYzFKdmR5QXRJREZkTENBb2EzTlNiM2NnSlNCclpYbFRhWHBsS1NBOVBUMGdNQ0EvSUNoMElEMGdLSFFnUER3Z09Da2dmQ0FvZENBK1BqNGdNalFwTENCMElEMGdLRWN1VTBKUFdGdDBJRDQrUGlBeU5GMGdQRHdnTWpRcElId2dLRWN1VTBKUFdGc29kQ0ErUGo0Z01UWXBJQ1lnTUhobVpsMGdQRHdnTVRZcElId2dLRWN1VTBKUFdGc29kQ0ErUGo0Z09Da2dKaUF3ZUdabVhTQThQQ0E0S1NCOElFY3VVMEpQV0Z0MElDWWdNSGhtWmwwc0lIUWdYajBnUnk1U1EwOU9XeWhyYzFKdmR5QXZJR3RsZVZOcGVtVXBJSHdnTUYwZ1BEd2dNalFwSURvZ2EyVjVVMmw2WlNBK0lEWWdKaVlnYTNOU2IzY2dKU0JyWlhsVGFYcGxJRDA5UFNBMElEOGdkQ0E5SUNoSExsTkNUMWhiZENBK1BqNGdNalJkSUR3OElESTBLU0I4SUNoSExsTkNUMWhiS0hRZ1BqNCtJREUyS1NBbUlEQjRabVpkSUR3OElERTJLU0I4SUNoSExsTkNUMWhiS0hRZ1BqNCtJRGdwSUNZZ01IaG1abDBnUER3Z09Da2dmQ0JITGxOQ1QxaGJkQ0FtSURCNFptWmRJRG9nZG05cFpDQXdMQ0IwYUdsekxsOXJaWGxUWTJobFpIVnNaVnRyYzFKdmR5QXRJR3RsZVZOcGVtVmRJRjRnZENsY2JpQWdmVnh1SUNCMGFHbHpMbDlwYm5aTFpYbFRZMmhsWkhWc1pTQTlJRnRkWEc0Z0lHWnZjaUFvYVc1MlMzTlNiM2NnUFNBd095QnBiblpMYzFKdmR5QThJR3R6VW05M2N6c2dhVzUyUzNOU2IzY3JLeWtnZTF4dUlDQWdJR3R6VW05M0lEMGdhM05TYjNkeklDMGdhVzUyUzNOU2IzZGNiaUFnSUNCMElEMGdkR2hwY3k1ZmEyVjVVMk5vWldSMWJHVmJhM05TYjNjZ0xTQW9hVzUyUzNOU2IzY2dKU0EwSUQ4Z01DQTZJRFFwWFZ4dUlDQWdJSFJvYVhNdVgybHVka3RsZVZOamFHVmtkV3hsVzJsdWRrdHpVbTkzWFNBOUlHbHVka3R6VW05M0lEd2dOQ0I4ZkNCcmMxSnZkeUE4UFNBMElEOGdkQ0E2SUVjdVNVNVdYMU5WUWw5TlNWaGJNRjFiUnk1VFFrOVlXM1FnUGo0K0lESTBYVjBnWGlCSExrbE9WbDlUVlVKZlRVbFlXekZkVzBjdVUwSlBXRnNvZENBK1BqNGdNVFlwSUNZZ01IaG1abDFkSUY0Z1J5NUpUbFpmVTFWQ1gwMUpXRnN5WFZ0SExsTkNUMWhiS0hRZ1BqNCtJRGdwSUNZZ01IaG1abDFkSUY0Z1J5NUpUbFpmVTFWQ1gwMUpXRnN6WFZ0SExsTkNUMWhiZENBbUlEQjRabVpkWFZ4dUlDQjlYRzRnSUhKbGRIVnliaUIwY25WbFhHNTlYRzVjYmtGRlV5NXdjbTkwYjNSNWNHVXVaVzVqY25sd2RFSnNiMk5ySUQwZ1puVnVZM1JwYjI0Z0tFMHBJSHRjYmlBZ1RTQTlJR0oxWm1abGNsUnZRWEp5WVhrb2JtVjNJRUoxWm1abGNpaE5LU2xjYmlBZ2RtRnlJRzkxZENBOUlIUm9hWE11WDJSdlEzSjVjSFJDYkc5amF5aE5MQ0IwYUdsekxsOXJaWGxUWTJobFpIVnNaU3dnUnk1VFZVSmZUVWxZTENCSExsTkNUMWdwWEc0Z0lIWmhjaUJpZFdZZ1BTQnVaWGNnUW5WbVptVnlLREUyS1Z4dUlDQmlkV1l1ZDNKcGRHVlZTVzUwTXpKQ1JTaHZkWFJiTUYwc0lEQXBYRzRnSUdKMVppNTNjbWwwWlZWSmJuUXpNa0pGS0c5MWRGc3hYU3dnTkNsY2JpQWdZblZtTG5keWFYUmxWVWx1ZERNeVFrVW9iM1YwV3pKZExDQTRLVnh1SUNCaWRXWXVkM0pwZEdWVlNXNTBNekpDUlNodmRYUmJNMTBzSURFeUtWeHVJQ0J5WlhSMWNtNGdZblZtWEc1OVhHNWNia0ZGVXk1d2NtOTBiM1I1Y0dVdVpHVmpjbmx3ZEVKc2IyTnJJRDBnWm5WdVkzUnBiMjRnS0UwcElIdGNiaUFnVFNBOUlHSjFabVpsY2xSdlFYSnlZWGtvYm1WM0lFSjFabVpsY2loTktTbGNiaUFnZG1GeUlIUmxiWEFnUFNCYlRWc3pYU3dnVFZzeFhWMWNiaUFnVFZzeFhTQTlJSFJsYlhCYk1GMWNiaUFnVFZzelhTQTlJSFJsYlhCYk1WMWNiaUFnZG1GeUlHOTFkQ0E5SUhSb2FYTXVYMlJ2UTNKNWNIUkNiRzlqYXloTkxDQjBhR2x6TGw5cGJuWkxaWGxUWTJobFpIVnNaU3dnUnk1SlRsWmZVMVZDWDAxSldDd2dSeTVKVGxaZlUwSlBXQ2xjYmlBZ2RtRnlJR0oxWmlBOUlHNWxkeUJDZFdabVpYSW9NVFlwWEc0Z0lHSjFaaTUzY21sMFpWVkpiblF6TWtKRktHOTFkRnN3WFN3Z01DbGNiaUFnWW5WbUxuZHlhWFJsVlVsdWRETXlRa1VvYjNWMFd6TmRMQ0EwS1Z4dUlDQmlkV1l1ZDNKcGRHVlZTVzUwTXpKQ1JTaHZkWFJiTWwwc0lEZ3BYRzRnSUdKMVppNTNjbWwwWlZWSmJuUXpNa0pGS0c5MWRGc3hYU3dnTVRJcFhHNGdJSEpsZEhWeWJpQmlkV1pjYm4xY2JseHVRVVZUTG5CeWIzUnZkSGx3WlM1elkzSjFZaUE5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnYzJOeWRXSmZkbVZqS0hSb2FYTXVYMnRsZVZOamFHVmtkV3hsS1Z4dUlDQnpZM0oxWWw5MlpXTW9kR2hwY3k1ZmFXNTJTMlY1VTJOb1pXUjFiR1VwWEc0Z0lITmpjblZpWDNabFl5aDBhR2x6TGw5clpYa3BYRzU5WEc1Y2JrRkZVeTV3Y205MGIzUjVjR1V1WDJSdlEzSjVjSFJDYkc5amF5QTlJR1oxYm1OMGFXOXVJQ2hOTENCclpYbFRZMmhsWkhWc1pTd2dVMVZDWDAxSldDd2dVMEpQV0NrZ2UxeHVJQ0IyWVhJZ2EzTlNiM2NzSUhNd0xDQnpNU3dnY3pJc0lITXpMQ0IwTUN3Z2RERXNJSFF5TENCME0xeHVYRzRnSUhNd0lEMGdUVnN3WFNCZUlHdGxlVk5qYUdWa2RXeGxXekJkWEc0Z0lITXhJRDBnVFZzeFhTQmVJR3RsZVZOamFHVmtkV3hsV3pGZFhHNGdJSE15SUQwZ1RWc3lYU0JlSUd0bGVWTmphR1ZrZFd4bFd6SmRYRzRnSUhNeklEMGdUVnN6WFNCZUlHdGxlVk5qYUdWa2RXeGxXek5kWEc0Z0lHdHpVbTkzSUQwZ05GeHVJQ0JtYjNJZ0tIWmhjaUJ5YjNWdVpDQTlJREU3SUhKdmRXNWtJRHdnZEdocGN5NWZibEp2ZFc1a2N6c2djbTkxYm1Rckt5a2dlMXh1SUNBZ0lIUXdJRDBnVTFWQ1gwMUpXRnN3WFZ0ek1DQStQajRnTWpSZElGNGdVMVZDWDAxSldGc3hYVnNvY3pFZ1BqNCtJREUyS1NBbUlEQjRabVpkSUY0Z1UxVkNYMDFKV0ZzeVhWc29jeklnUGo0K0lEZ3BJQ1lnTUhobVpsMGdYaUJUVlVKZlRVbFlXek5kVzNNeklDWWdNSGhtWmwwZ1hpQnJaWGxUWTJobFpIVnNaVnRyYzFKdmR5c3JYVnh1SUNBZ0lIUXhJRDBnVTFWQ1gwMUpXRnN3WFZ0ek1TQStQajRnTWpSZElGNGdVMVZDWDAxSldGc3hYVnNvY3pJZ1BqNCtJREUyS1NBbUlEQjRabVpkSUY0Z1UxVkNYMDFKV0ZzeVhWc29jek1nUGo0K0lEZ3BJQ1lnTUhobVpsMGdYaUJUVlVKZlRVbFlXek5kVzNNd0lDWWdNSGhtWmwwZ1hpQnJaWGxUWTJobFpIVnNaVnRyYzFKdmR5c3JYVnh1SUNBZ0lIUXlJRDBnVTFWQ1gwMUpXRnN3WFZ0ek1pQStQajRnTWpSZElGNGdVMVZDWDAxSldGc3hYVnNvY3pNZ1BqNCtJREUyS1NBbUlEQjRabVpkSUY0Z1UxVkNYMDFKV0ZzeVhWc29jekFnUGo0K0lEZ3BJQ1lnTUhobVpsMGdYaUJUVlVKZlRVbFlXek5kVzNNeElDWWdNSGhtWmwwZ1hpQnJaWGxUWTJobFpIVnNaVnRyYzFKdmR5c3JYVnh1SUNBZ0lIUXpJRDBnVTFWQ1gwMUpXRnN3WFZ0ek15QStQajRnTWpSZElGNGdVMVZDWDAxSldGc3hYVnNvY3pBZ1BqNCtJREUyS1NBbUlEQjRabVpkSUY0Z1UxVkNYMDFKV0ZzeVhWc29jekVnUGo0K0lEZ3BJQ1lnTUhobVpsMGdYaUJUVlVKZlRVbFlXek5kVzNNeUlDWWdNSGhtWmwwZ1hpQnJaWGxUWTJobFpIVnNaVnRyYzFKdmR5c3JYVnh1SUNBZ0lITXdJRDBnZERCY2JpQWdJQ0J6TVNBOUlIUXhYRzRnSUNBZ2N6SWdQU0IwTWx4dUlDQWdJSE16SUQwZ2RETmNiaUFnZlZ4dUlDQjBNQ0E5SUNnb1UwSlBXRnR6TUNBK1BqNGdNalJkSUR3OElESTBLU0I4SUNoVFFrOVlXeWh6TVNBK1BqNGdNVFlwSUNZZ01IaG1abDBnUER3Z01UWXBJSHdnS0ZOQ1QxaGJLSE15SUQ0K1BpQTRLU0FtSURCNFptWmRJRHc4SURncElId2dVMEpQV0Z0ek15QW1JREI0Wm1aZEtTQmVJR3RsZVZOamFHVmtkV3hsVzJ0elVtOTNLeXRkWEc0Z0lIUXhJRDBnS0NoVFFrOVlXM014SUQ0K1BpQXlORjBnUER3Z01qUXBJSHdnS0ZOQ1QxaGJLSE15SUQ0K1BpQXhOaWtnSmlBd2VHWm1YU0E4UENBeE5pa2dmQ0FvVTBKUFdGc29jek1nUGo0K0lEZ3BJQ1lnTUhobVpsMGdQRHdnT0NrZ2ZDQlRRazlZVzNNd0lDWWdNSGhtWmwwcElGNGdhMlY1VTJOb1pXUjFiR1ZiYTNOU2IzY3JLMTFjYmlBZ2RESWdQU0FvS0ZOQ1QxaGJjeklnUGo0K0lESTBYU0E4UENBeU5Da2dmQ0FvVTBKUFdGc29jek1nUGo0K0lERTJLU0FtSURCNFptWmRJRHc4SURFMktTQjhJQ2hUUWs5WVd5aHpNQ0ErUGo0Z09Da2dKaUF3ZUdabVhTQThQQ0E0S1NCOElGTkNUMWhiY3pFZ0ppQXdlR1ptWFNrZ1hpQnJaWGxUWTJobFpIVnNaVnRyYzFKdmR5c3JYVnh1SUNCME15QTlJQ2dvVTBKUFdGdHpNeUErUGo0Z01qUmRJRHc4SURJMEtTQjhJQ2hUUWs5WVd5aHpNQ0ErUGo0Z01UWXBJQ1lnTUhobVpsMGdQRHdnTVRZcElId2dLRk5DVDFoYktITXhJRDQrUGlBNEtTQW1JREI0Wm1aZElEdzhJRGdwSUh3Z1UwSlBXRnR6TWlBbUlEQjRabVpkS1NCZUlHdGxlVk5qYUdWa2RXeGxXMnR6VW05M0t5dGRYRzRnSUhKbGRIVnliaUJiWEc0Z0lDQWdabWw0ZFhCZmRXbHVkRE15S0hRd0tTeGNiaUFnSUNCbWFYaDFjRjkxYVc1ME16SW9kREVwTEZ4dUlDQWdJR1pwZUhWd1gzVnBiblF6TWloME1pa3NYRzRnSUNBZ1ptbDRkWEJmZFdsdWRETXlLSFF6S1Z4dUlDQmRYRzU5WEc1Y2JtVjRjRzl5ZEhNdVFVVlRJRDBnUVVWVFhHNGlYWDA9IiwiLy8gQSBKYXZhc2NyaXB0IGltcGxlbWVudGFpb24gb2YgdGhlIFwieG9yd293XCIgcHJuZyBhbGdvcml0aG0gYnlcbi8vIEdlb3JnZSBNYXJzYWdsaWEuICBTZWUgaHR0cDovL3d3dy5qc3RhdHNvZnQub3JnL3YwOC9pMTQvcGFwZXJcblxuKGZ1bmN0aW9uKGdsb2JhbCwgbW9kdWxlLCBkZWZpbmUpIHtcblxuZnVuY3Rpb24gWG9yR2VuKHNlZWQpIHtcbiAgdmFyIG1lID0gdGhpcywgc3Ryc2VlZCA9ICcnO1xuXG4gIC8vIFNldCB1cCBnZW5lcmF0b3IgZnVuY3Rpb24uXG4gIG1lLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdCA9IChtZS54IF4gKG1lLnggPj4+IDIpKTtcbiAgICBtZS54ID0gbWUueTsgbWUueSA9IG1lLno7IG1lLnogPSBtZS53OyBtZS53ID0gbWUudjtcbiAgICByZXR1cm4gKG1lLmQgPSAobWUuZCArIDM2MjQzNyB8IDApKSArXG4gICAgICAgKG1lLnYgPSAobWUudiBeIChtZS52IDw8IDQpKSBeICh0IF4gKHQgPDwgMSkpKSB8IDA7XG4gIH07XG5cbiAgbWUueCA9IDA7XG4gIG1lLnkgPSAwO1xuICBtZS56ID0gMDtcbiAgbWUudyA9IDA7XG4gIG1lLnYgPSAwO1xuXG4gIGlmIChzZWVkID09PSAoc2VlZCB8IDApKSB7XG4gICAgLy8gSW50ZWdlciBzZWVkLlxuICAgIG1lLnggPSBzZWVkO1xuICB9IGVsc2Uge1xuICAgIC8vIFN0cmluZyBzZWVkLlxuICAgIHN0cnNlZWQgKz0gc2VlZDtcbiAgfVxuXG4gIC8vIE1peCBpbiBzdHJpbmcgc2VlZCwgdGhlbiBkaXNjYXJkIGFuIGluaXRpYWwgYmF0Y2ggb2YgNjQgdmFsdWVzLlxuICBmb3IgKHZhciBrID0gMDsgayA8IHN0cnNlZWQubGVuZ3RoICsgNjQ7IGsrKykge1xuICAgIG1lLnggXj0gc3Ryc2VlZC5jaGFyQ29kZUF0KGspIHwgMDtcbiAgICBpZiAoayA9PSBzdHJzZWVkLmxlbmd0aCkge1xuICAgICAgbWUuZCA9IG1lLnggPDwgMTAgXiBtZS54ID4+PiA0O1xuICAgIH1cbiAgICBtZS5uZXh0KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29weShmLCB0KSB7XG4gIHQueCA9IGYueDtcbiAgdC55ID0gZi55O1xuICB0LnogPSBmLno7XG4gIHQudyA9IGYudztcbiAgdC52ID0gZi52O1xuICB0LmQgPSBmLmQ7XG4gIHJldHVybiB0O1xufVxuXG5mdW5jdGlvbiBpbXBsKHNlZWQsIG9wdHMpIHtcbiAgdmFyIHhnID0gbmV3IFhvckdlbihzZWVkKSxcbiAgICAgIHN0YXRlID0gb3B0cyAmJiBvcHRzLnN0YXRlLFxuICAgICAgcHJuZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMDsgfTtcbiAgcHJuZy5kb3VibGUgPSBmdW5jdGlvbigpIHtcbiAgICBkbyB7XG4gICAgICB2YXIgdG9wID0geGcubmV4dCgpID4+PiAxMSxcbiAgICAgICAgICBib3QgPSAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwLFxuICAgICAgICAgIHJlc3VsdCA9ICh0b3AgKyBib3QpIC8gKDEgPDwgMjEpO1xuICAgIH0gd2hpbGUgKHJlc3VsdCA9PT0gMCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcHJuZy5pbnQzMiA9IHhnLm5leHQ7XG4gIHBybmcucXVpY2sgPSBwcm5nO1xuICBpZiAoc3RhdGUpIHtcbiAgICBpZiAodHlwZW9mKHN0YXRlKSA9PSAnb2JqZWN0JykgY29weShzdGF0ZSwgeGcpO1xuICAgIHBybmcuc3RhdGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGNvcHkoeGcsIHt9KTsgfVxuICB9XG4gIHJldHVybiBwcm5nO1xufVxuXG5pZiAobW9kdWxlICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gaW1wbDtcbn0gZWxzZSBpZiAoZGVmaW5lICYmIGRlZmluZS5hbWQpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gaW1wbDsgfSk7XG59IGVsc2Uge1xuICB0aGlzLnhvcndvdyA9IGltcGw7XG59XG5cbn0pKFxuICB0aGlzLFxuICAodHlwZW9mIG1vZHVsZSkgPT0gJ29iamVjdCcgJiYgbW9kdWxlLCAgICAvLyBwcmVzZW50IGluIG5vZGUuanNcbiAgKHR5cGVvZiBkZWZpbmUpID09ICdmdW5jdGlvbicgJiYgZGVmaW5lICAgLy8gcHJlc2VudCB3aXRoIGFuIEFNRCBsb2FkZXJcbik7XG5cblxuIiwiLy8gQSBKYXZhc2NyaXB0IGltcGxlbWVudGFpb24gb2YgdGhlIFwieG9yc2hpZnQ3XCIgYWxnb3JpdGhtIGJ5XG4vLyBGcmFuw6dvaXMgUGFubmV0b24gYW5kIFBpZXJyZSBMJ2VjdXllcjpcbi8vIFwiT24gdGhlIFhvcmdzaGlmdCBSYW5kb20gTnVtYmVyIEdlbmVyYXRvcnNcIlxuLy8gaHR0cDovL3NhbHVjLmVuZ3IudWNvbm4uZWR1L3JlZnMvY3J5cHRvL3JuZy9wYW5uZXRvbjA1b250aGV4b3JzaGlmdC5wZGZcblxuKGZ1bmN0aW9uKGdsb2JhbCwgbW9kdWxlLCBkZWZpbmUpIHtcblxuZnVuY3Rpb24gWG9yR2VuKHNlZWQpIHtcbiAgdmFyIG1lID0gdGhpcztcblxuICAvLyBTZXQgdXAgZ2VuZXJhdG9yIGZ1bmN0aW9uLlxuICBtZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gVXBkYXRlIHhvciBnZW5lcmF0b3IuXG4gICAgdmFyIFggPSBtZS54LCBpID0gbWUuaSwgdCwgdiwgdztcbiAgICB0ID0gWFtpXTsgdCBePSAodCA+Pj4gNyk7IHYgPSB0IF4gKHQgPDwgMjQpO1xuICAgIHQgPSBYWyhpICsgMSkgJiA3XTsgdiBePSB0IF4gKHQgPj4+IDEwKTtcbiAgICB0ID0gWFsoaSArIDMpICYgN107IHYgXj0gdCBeICh0ID4+PiAzKTtcbiAgICB0ID0gWFsoaSArIDQpICYgN107IHYgXj0gdCBeICh0IDw8IDcpO1xuICAgIHQgPSBYWyhpICsgNykgJiA3XTsgdCA9IHQgXiAodCA8PCAxMyk7IHYgXj0gdCBeICh0IDw8IDkpO1xuICAgIFhbaV0gPSB2O1xuICAgIG1lLmkgPSAoaSArIDEpICYgNztcbiAgICByZXR1cm4gdjtcbiAgfTtcblxuICBmdW5jdGlvbiBpbml0KG1lLCBzZWVkKSB7XG4gICAgdmFyIGosIHcsIFggPSBbXTtcblxuICAgIGlmIChzZWVkID09PSAoc2VlZCB8IDApKSB7XG4gICAgICAvLyBTZWVkIHN0YXRlIGFycmF5IHVzaW5nIGEgMzItYml0IGludGVnZXIuXG4gICAgICB3ID0gWFswXSA9IHNlZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNlZWQgc3RhdGUgdXNpbmcgYSBzdHJpbmcuXG4gICAgICBzZWVkID0gJycgKyBzZWVkO1xuICAgICAgZm9yIChqID0gMDsgaiA8IHNlZWQubGVuZ3RoOyArK2opIHtcbiAgICAgICAgWFtqICYgN10gPSAoWFtqICYgN10gPDwgMTUpIF5cbiAgICAgICAgICAgIChzZWVkLmNoYXJDb2RlQXQoaikgKyBYWyhqICsgMSkgJiA3XSA8PCAxMyk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIEVuZm9yY2UgYW4gYXJyYXkgbGVuZ3RoIG9mIDgsIG5vdCBhbGwgemVyb2VzLlxuICAgIHdoaWxlIChYLmxlbmd0aCA8IDgpIFgucHVzaCgwKTtcbiAgICBmb3IgKGogPSAwOyBqIDwgOCAmJiBYW2pdID09PSAwOyArK2opO1xuICAgIGlmIChqID09IDgpIHcgPSBYWzddID0gLTE7IGVsc2UgdyA9IFhbal07XG5cbiAgICBtZS54ID0gWDtcbiAgICBtZS5pID0gMDtcblxuICAgIC8vIERpc2NhcmQgYW4gaW5pdGlhbCAyNTYgdmFsdWVzLlxuICAgIGZvciAoaiA9IDI1NjsgaiA+IDA7IC0taikge1xuICAgICAgbWUubmV4dCgpO1xuICAgIH1cbiAgfVxuXG4gIGluaXQobWUsIHNlZWQpO1xufVxuXG5mdW5jdGlvbiBjb3B5KGYsIHQpIHtcbiAgdC54ID0gZi54LnNsaWNlKCk7XG4gIHQuaSA9IGYuaTtcbiAgcmV0dXJuIHQ7XG59XG5cbmZ1bmN0aW9uIGltcGwoc2VlZCwgb3B0cykge1xuICBpZiAoc2VlZCA9PSBudWxsKSBzZWVkID0gKyhuZXcgRGF0ZSk7XG4gIHZhciB4ZyA9IG5ldyBYb3JHZW4oc2VlZCksXG4gICAgICBzdGF0ZSA9IG9wdHMgJiYgb3B0cy5zdGF0ZSxcbiAgICAgIHBybmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDA7IH07XG4gIHBybmcuZG91YmxlID0gZnVuY3Rpb24oKSB7XG4gICAgZG8ge1xuICAgICAgdmFyIHRvcCA9IHhnLm5leHQoKSA+Pj4gMTEsXG4gICAgICAgICAgYm90ID0gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMCxcbiAgICAgICAgICByZXN1bHQgPSAodG9wICsgYm90KSAvICgxIDw8IDIxKTtcbiAgICB9IHdoaWxlIChyZXN1bHQgPT09IDApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHBybmcuaW50MzIgPSB4Zy5uZXh0O1xuICBwcm5nLnF1aWNrID0gcHJuZztcbiAgaWYgKHN0YXRlKSB7XG4gICAgaWYgKHN0YXRlLngpIGNvcHkoc3RhdGUsIHhnKTtcbiAgICBwcm5nLnN0YXRlID0gZnVuY3Rpb24oKSB7IHJldHVybiBjb3B5KHhnLCB7fSk7IH1cbiAgfVxuICByZXR1cm4gcHJuZztcbn1cblxuaWYgKG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGltcGw7XG59IGVsc2UgaWYgKGRlZmluZSAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIGltcGw7IH0pO1xufSBlbHNlIHtcbiAgdGhpcy54b3JzaGlmdDcgPSBpbXBsO1xufVxuXG59KShcbiAgdGhpcyxcbiAgKHR5cGVvZiBtb2R1bGUpID09ICdvYmplY3QnICYmIG1vZHVsZSwgICAgLy8gcHJlc2VudCBpbiBub2RlLmpzXG4gICh0eXBlb2YgZGVmaW5lKSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZSAgIC8vIHByZXNlbnQgd2l0aCBhbiBBTUQgbG9hZGVyXG4pO1xuXG4iLCIvLyBBIEphdmFzY3JpcHQgaW1wbGVtZW50YWlvbiBvZiBSaWNoYXJkIEJyZW50J3MgWG9yZ2VucyB4b3I0MDk2IGFsZ29yaXRobS5cbi8vXG4vLyBUaGlzIGZhc3Qgbm9uLWNyeXB0b2dyYXBoaWMgcmFuZG9tIG51bWJlciBnZW5lcmF0b3IgaXMgZGVzaWduZWQgZm9yXG4vLyB1c2UgaW4gTW9udGUtQ2FybG8gYWxnb3JpdGhtcy4gSXQgY29tYmluZXMgYSBsb25nLXBlcmlvZCB4b3JzaGlmdFxuLy8gZ2VuZXJhdG9yIHdpdGggYSBXZXlsIGdlbmVyYXRvciwgYW5kIGl0IHBhc3NlcyBhbGwgY29tbW9uIGJhdHRlcmllc1xuLy8gb2Ygc3Rhc3RpY2lhbCB0ZXN0cyBmb3IgcmFuZG9tbmVzcyB3aGlsZSBjb25zdW1pbmcgb25seSBhIGZldyBuYW5vc2Vjb25kc1xuLy8gZm9yIGVhY2ggcHJuZyBnZW5lcmF0ZWQuICBGb3IgYmFja2dyb3VuZCBvbiB0aGUgZ2VuZXJhdG9yLCBzZWUgQnJlbnQnc1xuLy8gcGFwZXI6IFwiU29tZSBsb25nLXBlcmlvZCByYW5kb20gbnVtYmVyIGdlbmVyYXRvcnMgdXNpbmcgc2hpZnRzIGFuZCB4b3JzLlwiXG4vLyBodHRwOi8vYXJ4aXYub3JnL3BkZi8xMTA0LjMxMTUucGRmXG4vL1xuLy8gVXNhZ2U6XG4vL1xuLy8gdmFyIHhvcjQwOTYgPSByZXF1aXJlKCd4b3I0MDk2Jyk7XG4vLyByYW5kb20gPSB4b3I0MDk2KDEpOyAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNlZWQgd2l0aCBpbnQzMiBvciBzdHJpbmcuXG4vLyBhc3NlcnQuZXF1YWwocmFuZG9tKCksIDAuMTUyMDQzNjQ1MDUzODU0Nyk7IC8vICgwLCAxKSByYW5nZSwgNTMgYml0cy5cbi8vIGFzc2VydC5lcXVhbChyYW5kb20uaW50MzIoKSwgMTgwNjUzNDg5Nyk7ICAgLy8gc2lnbmVkIGludDMyLCAzMiBiaXRzLlxuLy9cbi8vIEZvciBub256ZXJvIG51bWVyaWMga2V5cywgdGhpcyBpbXBlbGVtZW50YXRpb24gcHJvdmlkZXMgYSBzZXF1ZW5jZVxuLy8gaWRlbnRpY2FsIHRvIHRoYXQgYnkgQnJlbnQncyB4b3JnZW5zIDMgaW1wbGVtZW50YWlvbiBpbiBDLiAgVGhpc1xuLy8gaW1wbGVtZW50YXRpb24gYWxzbyBwcm92aWRlcyBmb3IgaW5pdGFsaXppbmcgdGhlIGdlbmVyYXRvciB3aXRoXG4vLyBzdHJpbmcgc2VlZHMsIG9yIGZvciBzYXZpbmcgYW5kIHJlc3RvcmluZyB0aGUgc3RhdGUgb2YgdGhlIGdlbmVyYXRvci5cbi8vXG4vLyBPbiBDaHJvbWUsIHRoaXMgcHJuZyBiZW5jaG1hcmtzIGFib3V0IDIuMSB0aW1lcyBzbG93ZXIgdGhhblxuLy8gSmF2YXNjcmlwdCdzIGJ1aWx0LWluIE1hdGgucmFuZG9tKCkuXG5cbihmdW5jdGlvbihnbG9iYWwsIG1vZHVsZSwgZGVmaW5lKSB7XG5cbmZ1bmN0aW9uIFhvckdlbihzZWVkKSB7XG4gIHZhciBtZSA9IHRoaXM7XG5cbiAgLy8gU2V0IHVwIGdlbmVyYXRvciBmdW5jdGlvbi5cbiAgbWUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB3ID0gbWUudyxcbiAgICAgICAgWCA9IG1lLlgsIGkgPSBtZS5pLCB0LCB2O1xuICAgIC8vIFVwZGF0ZSBXZXlsIGdlbmVyYXRvci5cbiAgICBtZS53ID0gdyA9ICh3ICsgMHg2MWM4ODY0NykgfCAwO1xuICAgIC8vIFVwZGF0ZSB4b3IgZ2VuZXJhdG9yLlxuICAgIHYgPSBYWyhpICsgMzQpICYgMTI3XTtcbiAgICB0ID0gWFtpID0gKChpICsgMSkgJiAxMjcpXTtcbiAgICB2IF49IHYgPDwgMTM7XG4gICAgdCBePSB0IDw8IDE3O1xuICAgIHYgXj0gdiA+Pj4gMTU7XG4gICAgdCBePSB0ID4+PiAxMjtcbiAgICAvLyBVcGRhdGUgWG9yIGdlbmVyYXRvciBhcnJheSBzdGF0ZS5cbiAgICB2ID0gWFtpXSA9IHYgXiB0O1xuICAgIG1lLmkgPSBpO1xuICAgIC8vIFJlc3VsdCBpcyB0aGUgY29tYmluYXRpb24uXG4gICAgcmV0dXJuICh2ICsgKHcgXiAodyA+Pj4gMTYpKSkgfCAwO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGluaXQobWUsIHNlZWQpIHtcbiAgICB2YXIgdCwgdiwgaSwgaiwgdywgWCA9IFtdLCBsaW1pdCA9IDEyODtcbiAgICBpZiAoc2VlZCA9PT0gKHNlZWQgfCAwKSkge1xuICAgICAgLy8gTnVtZXJpYyBzZWVkcyBpbml0aWFsaXplIHYsIHdoaWNoIGlzIHVzZWQgdG8gZ2VuZXJhdGVzIFguXG4gICAgICB2ID0gc2VlZDtcbiAgICAgIHNlZWQgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTdHJpbmcgc2VlZHMgYXJlIG1peGVkIGludG8gdiBhbmQgWCBvbmUgY2hhcmFjdGVyIGF0IGEgdGltZS5cbiAgICAgIHNlZWQgPSBzZWVkICsgJ1xcMCc7XG4gICAgICB2ID0gMDtcbiAgICAgIGxpbWl0ID0gTWF0aC5tYXgobGltaXQsIHNlZWQubGVuZ3RoKTtcbiAgICB9XG4gICAgLy8gSW5pdGlhbGl6ZSBjaXJjdWxhciBhcnJheSBhbmQgd2V5bCB2YWx1ZS5cbiAgICBmb3IgKGkgPSAwLCBqID0gLTMyOyBqIDwgbGltaXQ7ICsraikge1xuICAgICAgLy8gUHV0IHRoZSB1bmljb2RlIGNoYXJhY3RlcnMgaW50byB0aGUgYXJyYXksIGFuZCBzaHVmZmxlIHRoZW0uXG4gICAgICBpZiAoc2VlZCkgdiBePSBzZWVkLmNoYXJDb2RlQXQoKGogKyAzMikgJSBzZWVkLmxlbmd0aCk7XG4gICAgICAvLyBBZnRlciAzMiBzaHVmZmxlcywgdGFrZSB2IGFzIHRoZSBzdGFydGluZyB3IHZhbHVlLlxuICAgICAgaWYgKGogPT09IDApIHcgPSB2O1xuICAgICAgdiBePSB2IDw8IDEwO1xuICAgICAgdiBePSB2ID4+PiAxNTtcbiAgICAgIHYgXj0gdiA8PCA0O1xuICAgICAgdiBePSB2ID4+PiAxMztcbiAgICAgIGlmIChqID49IDApIHtcbiAgICAgICAgdyA9ICh3ICsgMHg2MWM4ODY0NykgfCAwOyAgICAgLy8gV2V5bC5cbiAgICAgICAgdCA9IChYW2ogJiAxMjddIF49ICh2ICsgdykpOyAgLy8gQ29tYmluZSB4b3IgYW5kIHdleWwgdG8gaW5pdCBhcnJheS5cbiAgICAgICAgaSA9ICgwID09IHQpID8gaSArIDEgOiAwOyAgICAgLy8gQ291bnQgemVyb2VzLlxuICAgICAgfVxuICAgIH1cbiAgICAvLyBXZSBoYXZlIGRldGVjdGVkIGFsbCB6ZXJvZXM7IG1ha2UgdGhlIGtleSBub256ZXJvLlxuICAgIGlmIChpID49IDEyOCkge1xuICAgICAgWFsoc2VlZCAmJiBzZWVkLmxlbmd0aCB8fCAwKSAmIDEyN10gPSAtMTtcbiAgICB9XG4gICAgLy8gUnVuIHRoZSBnZW5lcmF0b3IgNTEyIHRpbWVzIHRvIGZ1cnRoZXIgbWl4IHRoZSBzdGF0ZSBiZWZvcmUgdXNpbmcgaXQuXG4gICAgLy8gRmFjdG9yaW5nIHRoaXMgYXMgYSBmdW5jdGlvbiBzbG93cyB0aGUgbWFpbiBnZW5lcmF0b3IsIHNvIGl0IGlzIGp1c3RcbiAgICAvLyB1bnJvbGxlZCBoZXJlLiAgVGhlIHdleWwgZ2VuZXJhdG9yIGlzIG5vdCBhZHZhbmNlZCB3aGlsZSB3YXJtaW5nIHVwLlxuICAgIGkgPSAxMjc7XG4gICAgZm9yIChqID0gNCAqIDEyODsgaiA+IDA7IC0taikge1xuICAgICAgdiA9IFhbKGkgKyAzNCkgJiAxMjddO1xuICAgICAgdCA9IFhbaSA9ICgoaSArIDEpICYgMTI3KV07XG4gICAgICB2IF49IHYgPDwgMTM7XG4gICAgICB0IF49IHQgPDwgMTc7XG4gICAgICB2IF49IHYgPj4+IDE1O1xuICAgICAgdCBePSB0ID4+PiAxMjtcbiAgICAgIFhbaV0gPSB2IF4gdDtcbiAgICB9XG4gICAgLy8gU3RvcmluZyBzdGF0ZSBhcyBvYmplY3QgbWVtYmVycyBpcyBmYXN0ZXIgdGhhbiB1c2luZyBjbG9zdXJlIHZhcmlhYmxlcy5cbiAgICBtZS53ID0gdztcbiAgICBtZS5YID0gWDtcbiAgICBtZS5pID0gaTtcbiAgfVxuXG4gIGluaXQobWUsIHNlZWQpO1xufVxuXG5mdW5jdGlvbiBjb3B5KGYsIHQpIHtcbiAgdC5pID0gZi5pO1xuICB0LncgPSBmLnc7XG4gIHQuWCA9IGYuWC5zbGljZSgpO1xuICByZXR1cm4gdDtcbn07XG5cbmZ1bmN0aW9uIGltcGwoc2VlZCwgb3B0cykge1xuICBpZiAoc2VlZCA9PSBudWxsKSBzZWVkID0gKyhuZXcgRGF0ZSk7XG4gIHZhciB4ZyA9IG5ldyBYb3JHZW4oc2VlZCksXG4gICAgICBzdGF0ZSA9IG9wdHMgJiYgb3B0cy5zdGF0ZSxcbiAgICAgIHBybmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDA7IH07XG4gIHBybmcuZG91YmxlID0gZnVuY3Rpb24oKSB7XG4gICAgZG8ge1xuICAgICAgdmFyIHRvcCA9IHhnLm5leHQoKSA+Pj4gMTEsXG4gICAgICAgICAgYm90ID0gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMCxcbiAgICAgICAgICByZXN1bHQgPSAodG9wICsgYm90KSAvICgxIDw8IDIxKTtcbiAgICB9IHdoaWxlIChyZXN1bHQgPT09IDApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHBybmcuaW50MzIgPSB4Zy5uZXh0O1xuICBwcm5nLnF1aWNrID0gcHJuZztcbiAgaWYgKHN0YXRlKSB7XG4gICAgaWYgKHN0YXRlLlgpIGNvcHkoc3RhdGUsIHhnKTtcbiAgICBwcm5nLnN0YXRlID0gZnVuY3Rpb24oKSB7IHJldHVybiBjb3B5KHhnLCB7fSk7IH1cbiAgfVxuICByZXR1cm4gcHJuZztcbn1cblxuaWYgKG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGltcGw7XG59IGVsc2UgaWYgKGRlZmluZSAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIGltcGw7IH0pO1xufSBlbHNlIHtcbiAgdGhpcy54b3I0MDk2ID0gaW1wbDtcbn1cblxufSkoXG4gIHRoaXMsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdpbmRvdyBvYmplY3Qgb3IgZ2xvYmFsXG4gICh0eXBlb2YgbW9kdWxlKSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUsICAgIC8vIHByZXNlbnQgaW4gbm9kZS5qc1xuICAodHlwZW9mIGRlZmluZSkgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUgICAvLyBwcmVzZW50IHdpdGggYW4gQU1EIGxvYWRlclxuKTtcbiIsIi8vIEEgSmF2YXNjcmlwdCBpbXBsZW1lbnRhaW9uIG9mIHRoZSBcInhvcjEyOFwiIHBybmcgYWxnb3JpdGhtIGJ5XG4vLyBHZW9yZ2UgTWFyc2FnbGlhLiAgU2VlIGh0dHA6Ly93d3cuanN0YXRzb2Z0Lm9yZy92MDgvaTE0L3BhcGVyXG5cbihmdW5jdGlvbihnbG9iYWwsIG1vZHVsZSwgZGVmaW5lKSB7XG5cbmZ1bmN0aW9uIFhvckdlbihzZWVkKSB7XG4gIHZhciBtZSA9IHRoaXMsIHN0cnNlZWQgPSAnJztcblxuICBtZS54ID0gMDtcbiAgbWUueSA9IDA7XG4gIG1lLnogPSAwO1xuICBtZS53ID0gMDtcblxuICAvLyBTZXQgdXAgZ2VuZXJhdG9yIGZ1bmN0aW9uLlxuICBtZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHQgPSBtZS54IF4gKG1lLnggPDwgMTEpO1xuICAgIG1lLnggPSBtZS55O1xuICAgIG1lLnkgPSBtZS56O1xuICAgIG1lLnogPSBtZS53O1xuICAgIHJldHVybiBtZS53IF49IChtZS53ID4+PiAxOSkgXiB0IF4gKHQgPj4+IDgpO1xuICB9O1xuXG4gIGlmIChzZWVkID09PSAoc2VlZCB8IDApKSB7XG4gICAgLy8gSW50ZWdlciBzZWVkLlxuICAgIG1lLnggPSBzZWVkO1xuICB9IGVsc2Uge1xuICAgIC8vIFN0cmluZyBzZWVkLlxuICAgIHN0cnNlZWQgKz0gc2VlZDtcbiAgfVxuXG4gIC8vIE1peCBpbiBzdHJpbmcgc2VlZCwgdGhlbiBkaXNjYXJkIGFuIGluaXRpYWwgYmF0Y2ggb2YgNjQgdmFsdWVzLlxuICBmb3IgKHZhciBrID0gMDsgayA8IHN0cnNlZWQubGVuZ3RoICsgNjQ7IGsrKykge1xuICAgIG1lLnggXj0gc3Ryc2VlZC5jaGFyQ29kZUF0KGspIHwgMDtcbiAgICBtZS5uZXh0KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29weShmLCB0KSB7XG4gIHQueCA9IGYueDtcbiAgdC55ID0gZi55O1xuICB0LnogPSBmLno7XG4gIHQudyA9IGYudztcbiAgcmV0dXJuIHQ7XG59XG5cbmZ1bmN0aW9uIGltcGwoc2VlZCwgb3B0cykge1xuICB2YXIgeGcgPSBuZXcgWG9yR2VuKHNlZWQpLFxuICAgICAgc3RhdGUgPSBvcHRzICYmIG9wdHMuc3RhdGUsXG4gICAgICBwcm5nID0gZnVuY3Rpb24oKSB7IHJldHVybiAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwOyB9O1xuICBwcm5nLmRvdWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIGRvIHtcbiAgICAgIHZhciB0b3AgPSB4Zy5uZXh0KCkgPj4+IDExLFxuICAgICAgICAgIGJvdCA9ICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDAsXG4gICAgICAgICAgcmVzdWx0ID0gKHRvcCArIGJvdCkgLyAoMSA8PCAyMSk7XG4gICAgfSB3aGlsZSAocmVzdWx0ID09PSAwKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBwcm5nLmludDMyID0geGcubmV4dDtcbiAgcHJuZy5xdWljayA9IHBybmc7XG4gIGlmIChzdGF0ZSkge1xuICAgIGlmICh0eXBlb2Yoc3RhdGUpID09ICdvYmplY3QnKSBjb3B5KHN0YXRlLCB4Zyk7XG4gICAgcHJuZy5zdGF0ZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29weSh4Zywge30pOyB9XG4gIH1cbiAgcmV0dXJuIHBybmc7XG59XG5cbmlmIChtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBpbXBsO1xufSBlbHNlIGlmIChkZWZpbmUgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBpbXBsOyB9KTtcbn0gZWxzZSB7XG4gIHRoaXMueG9yMTI4ID0gaW1wbDtcbn1cblxufSkoXG4gIHRoaXMsXG4gICh0eXBlb2YgbW9kdWxlKSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUsICAgIC8vIHByZXNlbnQgaW4gbm9kZS5qc1xuICAodHlwZW9mIGRlZmluZSkgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUgICAvLyBwcmVzZW50IHdpdGggYW4gQU1EIGxvYWRlclxuKTtcblxuXG4iLCIvLyBBIEphdmFzY3JpcHQgaW1wbGVtZW50YWlvbiBvZiB0aGUgXCJUeWNoZS1pXCIgcHJuZyBhbGdvcml0aG0gYnlcbi8vIFNhbXVlbCBOZXZlcyBhbmQgRmlsaXBlIEFyYXVqby5cbi8vIFNlZSBodHRwczovL2VkZW4uZGVpLnVjLnB0L35zbmV2ZXMvcHVicy8yMDExLXNuZmEyLnBkZlxuXG4oZnVuY3Rpb24oZ2xvYmFsLCBtb2R1bGUsIGRlZmluZSkge1xuXG5mdW5jdGlvbiBYb3JHZW4oc2VlZCkge1xuICB2YXIgbWUgPSB0aGlzLCBzdHJzZWVkID0gJyc7XG5cbiAgLy8gU2V0IHVwIGdlbmVyYXRvciBmdW5jdGlvbi5cbiAgbWUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBiID0gbWUuYiwgYyA9IG1lLmMsIGQgPSBtZS5kLCBhID0gbWUuYTtcbiAgICBiID0gKGIgPDwgMjUpIF4gKGIgPj4+IDcpIF4gYztcbiAgICBjID0gKGMgLSBkKSB8IDA7XG4gICAgZCA9IChkIDw8IDI0KSBeIChkID4+PiA4KSBeIGE7XG4gICAgYSA9IChhIC0gYikgfCAwO1xuICAgIG1lLmIgPSBiID0gKGIgPDwgMjApIF4gKGIgPj4+IDEyKSBeIGM7XG4gICAgbWUuYyA9IGMgPSAoYyAtIGQpIHwgMDtcbiAgICBtZS5kID0gKGQgPDwgMTYpIF4gKGMgPj4+IDE2KSBeIGE7XG4gICAgcmV0dXJuIG1lLmEgPSAoYSAtIGIpIHwgMDtcbiAgfTtcblxuICAvKiBUaGUgZm9sbG93aW5nIGlzIG5vbi1pbnZlcnRlZCB0eWNoZSwgd2hpY2ggaGFzIGJldHRlciBpbnRlcm5hbFxuICAgKiBiaXQgZGlmZnVzaW9uLCBidXQgd2hpY2ggaXMgYWJvdXQgMjUlIHNsb3dlciB0aGFuIHR5Y2hlLWkgaW4gSlMuXG4gIG1lLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSA9IG1lLmEsIGIgPSBtZS5iLCBjID0gbWUuYywgZCA9IG1lLmQ7XG4gICAgYSA9IChtZS5hICsgbWUuYiB8IDApID4+PiAwO1xuICAgIGQgPSBtZS5kIF4gYTsgZCA9IGQgPDwgMTYgXiBkID4+PiAxNjtcbiAgICBjID0gbWUuYyArIGQgfCAwO1xuICAgIGIgPSBtZS5iIF4gYzsgYiA9IGIgPDwgMTIgXiBkID4+PiAyMDtcbiAgICBtZS5hID0gYSA9IGEgKyBiIHwgMDtcbiAgICBkID0gZCBeIGE7IG1lLmQgPSBkID0gZCA8PCA4IF4gZCA+Pj4gMjQ7XG4gICAgbWUuYyA9IGMgPSBjICsgZCB8IDA7XG4gICAgYiA9IGIgXiBjO1xuICAgIHJldHVybiBtZS5iID0gKGIgPDwgNyBeIGIgPj4+IDI1KTtcbiAgfVxuICAqL1xuXG4gIG1lLmEgPSAwO1xuICBtZS5iID0gMDtcbiAgbWUuYyA9IDI2NTQ0MzU3NjkgfCAwO1xuICBtZS5kID0gMTM2NzEzMDU1MTtcblxuICBpZiAoc2VlZCA9PT0gTWF0aC5mbG9vcihzZWVkKSkge1xuICAgIC8vIEludGVnZXIgc2VlZC5cbiAgICBtZS5hID0gKHNlZWQgLyAweDEwMDAwMDAwMCkgfCAwO1xuICAgIG1lLmIgPSBzZWVkIHwgMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBTdHJpbmcgc2VlZC5cbiAgICBzdHJzZWVkICs9IHNlZWQ7XG4gIH1cblxuICAvLyBNaXggaW4gc3RyaW5nIHNlZWQsIHRoZW4gZGlzY2FyZCBhbiBpbml0aWFsIGJhdGNoIG9mIDY0IHZhbHVlcy5cbiAgZm9yICh2YXIgayA9IDA7IGsgPCBzdHJzZWVkLmxlbmd0aCArIDIwOyBrKyspIHtcbiAgICBtZS5iIF49IHN0cnNlZWQuY2hhckNvZGVBdChrKSB8IDA7XG4gICAgbWUubmV4dCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvcHkoZiwgdCkge1xuICB0LmEgPSBmLmE7XG4gIHQuYiA9IGYuYjtcbiAgdC5jID0gZi5jO1xuICB0LmQgPSBmLmQ7XG4gIHJldHVybiB0O1xufTtcblxuZnVuY3Rpb24gaW1wbChzZWVkLCBvcHRzKSB7XG4gIHZhciB4ZyA9IG5ldyBYb3JHZW4oc2VlZCksXG4gICAgICBzdGF0ZSA9IG9wdHMgJiYgb3B0cy5zdGF0ZSxcbiAgICAgIHBybmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDA7IH07XG4gIHBybmcuZG91YmxlID0gZnVuY3Rpb24oKSB7XG4gICAgZG8ge1xuICAgICAgdmFyIHRvcCA9IHhnLm5leHQoKSA+Pj4gMTEsXG4gICAgICAgICAgYm90ID0gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMCxcbiAgICAgICAgICByZXN1bHQgPSAodG9wICsgYm90KSAvICgxIDw8IDIxKTtcbiAgICB9IHdoaWxlIChyZXN1bHQgPT09IDApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHBybmcuaW50MzIgPSB4Zy5uZXh0O1xuICBwcm5nLnF1aWNrID0gcHJuZztcbiAgaWYgKHN0YXRlKSB7XG4gICAgaWYgKHR5cGVvZihzdGF0ZSkgPT0gJ29iamVjdCcpIGNvcHkoc3RhdGUsIHhnKTtcbiAgICBwcm5nLnN0YXRlID0gZnVuY3Rpb24oKSB7IHJldHVybiBjb3B5KHhnLCB7fSk7IH1cbiAgfVxuICByZXR1cm4gcHJuZztcbn1cblxuaWYgKG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGltcGw7XG59IGVsc2UgaWYgKGRlZmluZSAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIGltcGw7IH0pO1xufSBlbHNlIHtcbiAgdGhpcy50eWNoZWkgPSBpbXBsO1xufVxuXG59KShcbiAgdGhpcyxcbiAgKHR5cGVvZiBtb2R1bGUpID09ICdvYmplY3QnICYmIG1vZHVsZSwgICAgLy8gcHJlc2VudCBpbiBub2RlLmpzXG4gICh0eXBlb2YgZGVmaW5lKSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZSAgIC8vIHByZXNlbnQgd2l0aCBhbiBBTUQgbG9hZGVyXG4pO1xuXG5cbiIsIi8vIEEgcG9ydCBvZiBhbiBhbGdvcml0aG0gYnkgSm9oYW5uZXMgQmFhZ8O4ZSA8YmFhZ29lQGJhYWdvZS5jb20+LCAyMDEwXG4vLyBodHRwOi8vYmFhZ29lLmNvbS9lbi9SYW5kb21NdXNpbmdzL2phdmFzY3JpcHQvXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbnF1aW5sYW4vYmV0dGVyLXJhbmRvbS1udW1iZXJzLWZvci1qYXZhc2NyaXB0LW1pcnJvclxuLy8gT3JpZ2luYWwgd29yayBpcyB1bmRlciBNSVQgbGljZW5zZSAtXG5cbi8vIENvcHlyaWdodCAoQykgMjAxMCBieSBKb2hhbm5lcyBCYWFnw7hlIDxiYWFnb2VAYmFhZ29lLm9yZz5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vLyBcbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vIFxuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cblxuXG4oZnVuY3Rpb24oZ2xvYmFsLCBtb2R1bGUsIGRlZmluZSkge1xuXG5mdW5jdGlvbiBBbGVhKHNlZWQpIHtcbiAgdmFyIG1lID0gdGhpcywgbWFzaCA9IE1hc2goKTtcblxuICBtZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHQgPSAyMDkxNjM5ICogbWUuczAgKyBtZS5jICogMi4zMjgzMDY0MzY1Mzg2OTYzZS0xMDsgLy8gMl4tMzJcbiAgICBtZS5zMCA9IG1lLnMxO1xuICAgIG1lLnMxID0gbWUuczI7XG4gICAgcmV0dXJuIG1lLnMyID0gdCAtIChtZS5jID0gdCB8IDApO1xuICB9O1xuXG4gIC8vIEFwcGx5IHRoZSBzZWVkaW5nIGFsZ29yaXRobSBmcm9tIEJhYWdvZS5cbiAgbWUuYyA9IDE7XG4gIG1lLnMwID0gbWFzaCgnICcpO1xuICBtZS5zMSA9IG1hc2goJyAnKTtcbiAgbWUuczIgPSBtYXNoKCcgJyk7XG4gIG1lLnMwIC09IG1hc2goc2VlZCk7XG4gIGlmIChtZS5zMCA8IDApIHsgbWUuczAgKz0gMTsgfVxuICBtZS5zMSAtPSBtYXNoKHNlZWQpO1xuICBpZiAobWUuczEgPCAwKSB7IG1lLnMxICs9IDE7IH1cbiAgbWUuczIgLT0gbWFzaChzZWVkKTtcbiAgaWYgKG1lLnMyIDwgMCkgeyBtZS5zMiArPSAxOyB9XG4gIG1hc2ggPSBudWxsO1xufVxuXG5mdW5jdGlvbiBjb3B5KGYsIHQpIHtcbiAgdC5jID0gZi5jO1xuICB0LnMwID0gZi5zMDtcbiAgdC5zMSA9IGYuczE7XG4gIHQuczIgPSBmLnMyO1xuICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gaW1wbChzZWVkLCBvcHRzKSB7XG4gIHZhciB4ZyA9IG5ldyBBbGVhKHNlZWQpLFxuICAgICAgc3RhdGUgPSBvcHRzICYmIG9wdHMuc3RhdGUsXG4gICAgICBwcm5nID0geGcubmV4dDtcbiAgcHJuZy5pbnQzMiA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gKHhnLm5leHQoKSAqIDB4MTAwMDAwMDAwKSB8IDA7IH1cbiAgcHJuZy5kb3VibGUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcHJuZygpICsgKHBybmcoKSAqIDB4MjAwMDAwIHwgMCkgKiAxLjExMDIyMzAyNDYyNTE1NjVlLTE2OyAvLyAyXi01M1xuICB9O1xuICBwcm5nLnF1aWNrID0gcHJuZztcbiAgaWYgKHN0YXRlKSB7XG4gICAgaWYgKHR5cGVvZihzdGF0ZSkgPT0gJ29iamVjdCcpIGNvcHkoc3RhdGUsIHhnKTtcbiAgICBwcm5nLnN0YXRlID0gZnVuY3Rpb24oKSB7IHJldHVybiBjb3B5KHhnLCB7fSk7IH1cbiAgfVxuICByZXR1cm4gcHJuZztcbn1cblxuZnVuY3Rpb24gTWFzaCgpIHtcbiAgdmFyIG4gPSAweGVmYzgyNDlkO1xuXG4gIHZhciBtYXNoID0gZnVuY3Rpb24oZGF0YSkge1xuICAgIGRhdGEgPSBkYXRhLnRvU3RyaW5nKCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBuICs9IGRhdGEuY2hhckNvZGVBdChpKTtcbiAgICAgIHZhciBoID0gMC4wMjUxOTYwMzI4MjQxNjkzOCAqIG47XG4gICAgICBuID0gaCA+Pj4gMDtcbiAgICAgIGggLT0gbjtcbiAgICAgIGggKj0gbjtcbiAgICAgIG4gPSBoID4+PiAwO1xuICAgICAgaCAtPSBuO1xuICAgICAgbiArPSBoICogMHgxMDAwMDAwMDA7IC8vIDJeMzJcbiAgICB9XG4gICAgcmV0dXJuIChuID4+PiAwKSAqIDIuMzI4MzA2NDM2NTM4Njk2M2UtMTA7IC8vIDJeLTMyXG4gIH07XG5cbiAgcmV0dXJuIG1hc2g7XG59XG5cblxuaWYgKG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGltcGw7XG59IGVsc2UgaWYgKGRlZmluZSAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIGltcGw7IH0pO1xufSBlbHNlIHtcbiAgdGhpcy5hbGVhID0gaW1wbDtcbn1cblxufSkoXG4gIHRoaXMsXG4gICh0eXBlb2YgbW9kdWxlKSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUsICAgIC8vIHByZXNlbnQgaW4gbm9kZS5qc1xuICAodHlwZW9mIGRlZmluZSkgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUgICAvLyBwcmVzZW50IHdpdGggYW4gQU1EIGxvYWRlclxuKTtcblxuXG4iLCIvKipcbiAqIEBvdmVydmlldyBDb25zdGFudHMgYW5kIGVudW1zIHVzZWQgYWNyb3NzIEludGVybmV0IFNpbXVsYXRvci5cbiAqL1xuLy8gU3RyaWN0IGxpbnRpbmc6IEFic29yYiBpbnRvIGdsb2JhbCBjb25maWcgd2hlbiBwb3NzaWJsZVxuLyoganNoaW50XG4gdW51c2VkOiB0cnVlLFxuIGVxZXFlcTogdHJ1ZSxcbiBtYXhsZW46IDEyMFxuICovXG4vKiBnbG9iYWwgZXhwb3J0cyAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqL1xuZXhwb3J0cy5CSVRTX1BFUl9OSUJCTEUgPSA0O1xuXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqL1xuZXhwb3J0cy5CSVRTX1BFUl9CWVRFID0gODtcblxuLyoqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0XG4gKi9cbmV4cG9ydHMuQklUU19QRVJfS0lMT0JZVEUgPSAxMDI0ICogZXhwb3J0cy5CSVRTX1BFUl9CWVRFO1xuXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqL1xuZXhwb3J0cy5CSVRTX1BFUl9NRUdBQllURSA9IDEwMjQgKiBleHBvcnRzLkJJVFNfUEVSX0tJTE9CWVRFO1xuXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqL1xuZXhwb3J0cy5CSVRTX1BFUl9HSUdBQllURSA9IDEwMjQgKiBleHBvcnRzLkJJVFNfUEVSX01FR0FCWVRFO1xuXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqL1xuZXhwb3J0cy5CSVRTX1BFUl9LSUxPQklUID0gMTAyNDtcblxuLyoqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0XG4gKi9cbmV4cG9ydHMuQklUU19QRVJfTUVHQUJJVCA9IDEwMjQgKiBleHBvcnRzLkJJVFNfUEVSX0tJTE9CSVQ7XG5cbi8qKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdFxuICovXG5leHBvcnRzLkJJVFNfUEVSX0dJR0FCSVQgPSAxMDI0ICogZXhwb3J0cy5CSVRTX1BFUl9NRUdBQklUO1xuXG4vKipcbiAqIFR5cGVzIG9mIG5vZGVzIHRoYXQgY2FuIHNob3cgdXAgaW4gdGhlIHNpbXVsYXRpb24uXG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG5leHBvcnRzLk5vZGVUeXBlID0ge1xuICBDTElFTlQ6ICdjbGllbnQnLFxuICBST1VURVI6ICdyb3V0ZXInXG59O1xuXG4vKipcbiAqIFdoYXQgdHlwZSBvZiBtZXNzYWdlIG1ha2VzIHVwIHRoZSAnYXRvbScgb2YgY29tbXVuaWNhdGlvbiBmb3IgdGhpc1xuICogc2ltdWxhdG9yIG1vZGUgLSBzaW5nbGUtYml0IG1lc3NhZ2VzICh2YXJpYW50IDEpIG9yIHdob2xlIHBhY2tldHMgKHZhcmlhbnRzXG4gKiAyIGFuZCB1cClcbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmV4cG9ydHMuTWVzc2FnZUdyYW51bGFyaXR5ID0ge1xuICBQQUNLRVRTOiAncGFja2V0cycsXG4gIEJJVFM6ICdiaXRzJ1xufTtcblxuLyoqXG4gKiBETlMgbW9kZXMgZm9yIHRoZSBzaW11bGF0b3IuICBPbmx5IGFwcGxpZXMgaW4gdmFyaWFudCAzLCB3aGVuIGNvbm5lY3RpbmdcbiAqIHRvIGEgcm91dGVyLlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuZXhwb3J0cy5EbnNNb2RlID0ge1xuICAvKiogVGhlcmUgaXMgbm8gRE5TIG5vZGUuICBFdmVyeW9uZSBjYW4gc2VlIGV2ZXJ5IG90aGVyIG5vZGUncyBhZGRyZXNzLiAqL1xuICBOT05FOiAnbm9uZScsXG5cbiAgLyoqIE9uZSB1c2VyIGFjdHMgYXMgdGhlIEROUyBub2RlIGF0IGEgdGltZS4gIEV2ZXJ5b25lIGNhbiBzZWUgdGhlaXIgb3duXG4gICAqICBhZGRyZXNzIGFuZCB0aGUgRE5TIG5vZGUncyBhZGRyZXNzLCBidXQgbm90aGluZyBlbHNlLiAqL1xuICBNQU5VQUw6ICdtYW51YWwnLFxuXG4gIC8qKiBBbiBhdXRvbWF0aWMgRE5TIG5vZGUgaXMgYWRkZWQgdG8gdGhlIHNpbXVsYXRpb24uICBOb2RlcyBhcmUgYXV0b21hdGljYWxseVxuICAgKiAgcmVnaXN0ZXJlZCB3aXRoIHRoZSBETlMgb24gY29ubmVjdGlvbi4gKi9cbiAgQVVUT01BVElDOiAnYXV0b21hdGljJ1xufTtcblxuLyoqXG4gKiBFbmNvZGluZ3MgdGhhdCBjYW4gYmUgdXNlZCB0byBpbnRlcnByZXQgYW5kIGRpc3BsYXkgYmluYXJ5IG1lc3NhZ2VzIGluXG4gKiB0aGUgc2ltdWxhdG9yLlxuICogTWFwIHRvIGNsYXNzLW5hbWVzIHRoYXQgY2FuIGJlIGFwcGxpZWQgdG8gcmVsYXRlZCB0YWJsZSByb3dzLlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuZXhwb3J0cy5FbmNvZGluZ1R5cGUgPSB7XG4gIC8qKiBSZW5kZXJzIGVhY2ggY2h1bmsgb2YgYml0cyAodXNpbmcgdmFyaWFibGUgY2h1bmtzaXplKSBpbiBhc2NpaSAqL1xuICBBU0NJSTogJ2FzY2lpJyxcblxuICAvKiogUmVuZGVycyBlYWNoIGNodW5rIG9mIGJpdHMgKHVzaW5nIHZhcmlhYmxlIGNodW5rc2l6ZSkgaW4gZGVjaW1hbCAqL1xuICBERUNJTUFMOiAnZGVjaW1hbCcsXG5cbiAgLyoqIFJlbmRlcnMgZWFjaCBiaW5hcnkgbmliYmxlIGFzIGEgaGV4IGNoYXJhY3Rlci4gKi9cbiAgSEVYQURFQ0lNQUw6ICdoZXhhZGVjaW1hbCcsXG5cbiAgLyoqIEFsbCBwYWNrZXQgZGF0YSBpcyBhY3R1YWxseSBzdG9yZWQgYW5kIG1vdmVkIGFyb3VuZCBpbiBiaW5hcnksIHNvXG4gICAqICB0aGUgJ2JpbmFyeScgZW5jb2RpbmcganVzdCByZXByZXNlbnRzIGFjY2VzcyB0byB0aGF0IHJhdyBkYXRhLiAqL1xuICBCSU5BUlk6ICdiaW5hcnknLFxuXG4gIC8qKiBBbiBlbmNvZGluZyB1c2VkIGVhcmx5IGluIHRoZSBsZXNzb25zIHRvIHNob3cgdGhhdCBiaW5hcnkgaXNuJ3QgYWx3YXlzXG4gICAqICAxcyBhbmQgMHMuICBKdXN0IGxpa2UgYmluYXJ5LCBidXQgcmVwbGFjZXMgMS8wIHdpdGggQS9CLiAqL1xuICBBX0FORF9COiAnYV9hbmRfYidcbn07XG5cbi8qKlxuICogRW51bWVyYXRpb24gb2YgdGFicyBmb3IgbGV2ZWwgY29uZmlndXJhdGlvblxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuZXhwb3J0cy5OZXRTaW1UYWJUeXBlID0ge1xuICBJTlNUUlVDVElPTlM6ICdpbnN0cnVjdGlvbnMnLFxuICBNWV9ERVZJQ0U6ICdteV9kZXZpY2UnLFxuICBST1VURVI6ICdyb3V0ZXInLFxuICBETlM6ICdkbnMnXG59O1xuXG4vKipcbiAqIENvbHVtbiB0eXBlcyB0aGF0IGNhbiBiZSB1c2VkIGFueSB0aW1lIGEgcGFja2V0IGlzIGRpc3BsYXllZCBvbiB0aGUgcGFnZS5cbiAqIFJlbGF0ZWQgdG8gUGFja2V0LkhlYWRlclR5cGUsIGJ1dCBkaWZmZXJlbnQgYmVjYXVzZSB0aGlzIGluY2x1ZGVzIGNvbHVtbnNcbiAqIHRoYXQgYXJlbid0IHBhcnQgb2YgdGhlIGhlYWRlciwgYW5kIGdyb3VwcyB0aGUgcGFja2V0SW5mbyB0b2dldGhlci5cbiAqIE1hcCB0byBjbGFzcy1uYW1lcyB0aGF0IGNhbiBiZSBhcHBsaWVkIHRvIHJlbGF0ZWQgdGFibGUgY2VsbHMuXG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG5leHBvcnRzLlBhY2tldFVJQ29sdW1uVHlwZSA9IHtcbiAgRU5DT0RJTkdfTEFCRUw6ICdlbmNvZGluZ0xhYmVsJyxcbiAgVE9fQUREUkVTUzogJ3RvQWRkcmVzcycsXG4gIEZST01fQUREUkVTUzogJ2Zyb21BZGRyZXNzJyxcbiAgUEFDS0VUX0lORk86ICdwYWNrZXRJbmZvJyxcbiAgTUVTU0FHRTogJ21lc3NhZ2UnXG59O1xuIiwiLyoqXG4gKiBAb3ZlcnZpZXcgSW50ZXJmYWNlIHRvIGRhc2hib2FyZCB1c2VyIGRhdGEgQVBJLlxuICovXG4vLyBTdHJpY3QgbGludGluZzogQWJzb3JiIGludG8gZ2xvYmFsIGNvbmZpZyB3aGVuIHBvc3NpYmxlXG4vKiBqc2hpbnRcbiB1bnVzZWQ6IHRydWUsXG4gZXFlcWVxOiB0cnVlLFxuIG1heGxlbjogMTIwXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTZWN0aW9uXG4gKiBAcHJvcGVydHkge251bWJlcn0gaWQgLSBTZWN0aW9uJ3MgbnVtZXJpYyBpZGVudGlmaWVyIGluIERhc2hib2FyZC5cbiAqL1xuXG4vLyBUT0RPIChiYnVjaGFuYW4pOiBUaGlzIHdob2xlIGZpbGUgc2hvdWxkIGdvIGF3YXkgd2hlbiB3ZSBoYXZlIGEgc2hhcmVkXG4vLyAgICAgICAgICAgICAgICAgICBKYXZhc2NyaXB0IFVzZXIgb2JqZWN0IHRoYXQgY2FuIGJlIGF2YWlsYWJsZSBvbiBwYWdlIGxvYWQuXG5cbi8qKlxuICogUmVwcmVzZW50cyBhIERhc2hib2FyZCB1c2VyIGFjY291bnQgLSBjb3VsZCBiZSBhIHRlYWNoZXIsIGEgc3R1ZGVudCwgZXRjLlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBEYXNoYm9hcmRVc2VyID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgYXN5bmMgY2FsbCBoYXMgY29tcGxldGVkIHlldC5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLmlzUmVhZHkgPSBmYWxzZTtcblxuICAvKipcbiAgICogUXVldWUgb2YgY2FsbGJhY2tzIHRvIGhpdCB3aGVuIHRoaXMgb2JqZWN0IGdldHMgaW5pdGlhbGl6ZWQuXG4gICAqIEB0eXBlIHtmdW5jdGlvbltdfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy53aGVuUmVhZHlDYWxsYmFja3NfID0gW107XG5cbiAgLyoqXG4gICAqIFVzZXIgSURcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRoaXMuaWQgPSB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFVzZXIgZGlzcGxheSBuYW1lXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLm5hbWUgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSB1c2VyIGlzIGEgc2l0ZSBhZG1pbi5cbiAgICogTk9URTogVGhpcyBzaG91bGQgb25seSBiZSB1c2VkIGluIGEgY29udmVuaWVuY2UvZGlzcGxheSBzZW5zZTsgYW55dGhpbmdcbiAgICogICAgICAgcmVxdWlyaW5nIGFjdHVhbCBzZWN1cml0eSBzaG91bGQgYmUgYXV0aGVudGljYXRlZCB0aHJvdWdoIHRoZSBzZXJ2ZXIsXG4gICAqICAgICAgIGFuZCBub3QgZGVwZW5kIG9uIGNsaWVudCBjb2RlLlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuaXNBZG1pbiA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBMaXN0IG9mIHNlY3Rpb25zIG93bmVkIGJ5IHRoaXMgdXNlci5cbiAgICogQHR5cGUge1NlY3Rpb25bXX1cbiAgICovXG4gIHRoaXMub3duZWRTZWN0aW9ucyA9IFtdO1xufTtcblxuLyoqXG4gKiBAdHlwZSB7RGFzaGJvYXJkVXNlcn1cbiAqIEBwcml2YXRlXG4gKiBAc3RhdGljXG4gKi9cbkRhc2hib2FyZFVzZXIuY3VycmVudFVzZXJfID0gbnVsbDtcblxuLyoqXG4gKiBLaWNrIG9mIGFuIGFzeW5jaHJvbm91cyByZXF1ZXN0IGZvciB0aGUgY3VycmVudCB1c2VyJ3MgZGF0YSwgYW5kIGltbWVkaWF0ZWx5XG4gKiBwYXNzIGJhY2sgYSBwbGFjZWhvbGRlciBvYmplY3QgdGhhdCBoYXMgYSB3aGVuUmVhZHkgbWV0aG9kIG90aGVycyBjYW5cbiAqIHVzZSB0byBndWFyYW50ZWUgdGhlIGRhdGEgaXMgcHJlc2VudC5cbiAqXG4gKiBAcmV0dXJuIHtEYXNoYm9hcmRVc2VyfSB0aGF0IGRvZXNuJ3QgaGF2ZSBpdHMgZGF0YSB5ZXQsIGJ1dCB3aWxsIHNvb24uXG4gKi9cbkRhc2hib2FyZFVzZXIuZ2V0Q3VycmVudFVzZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghRGFzaGJvYXJkVXNlci5jdXJyZW50VXNlcl8pIHtcbiAgICBEYXNoYm9hcmRVc2VyLmN1cnJlbnRVc2VyXyA9IG5ldyBEYXNoYm9hcmRVc2VyKCk7XG4gICAgJC5hamF4KHtcbiAgICAgIHVybDogJy92Mi91c2VyJyxcbiAgICAgIHR5cGU6ICdnZXQnLFxuICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhIC8qLCB0ZXh0U3RhdHVzLCBqcVhIUiovKSB7XG4gICAgICAgIERhc2hib2FyZFVzZXIuY3VycmVudFVzZXJfLmluaXRpYWxpemUoZGF0YSk7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uICgvKmpxWEhSLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93biovKSB7XG4gICAgICAgIERhc2hib2FyZFVzZXIuY3VycmVudFVzZXJfLmluaXRpYWxpemUoe1xuICAgICAgICAgIGlzU2lnbmVkSW46IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBEYXNoYm9hcmRVc2VyLmN1cnJlbnRVc2VyXztcbn07XG5cbi8qKlxuICogTG9hZCBkYXRhIGludG8gdXNlciBmcm9tIGFzeW5jIHJlcXVlc3QsIHdoZW4gcmVhZHkuXG4gKiBAcGFyYW0gZGF0YVxuICovXG5EYXNoYm9hcmRVc2VyLnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5pZCA9IGRhdGEuaWQ7XG4gIHRoaXMubmFtZSA9IGRhdGEubmFtZTtcbiAgdGhpcy5pc0FkbWluID0gKGRhdGEuYWRtaW4gPT09IHRydWUpO1xuICB0aGlzLm93bmVkU2VjdGlvbnMgPSBkYXRhLm93bmVkX3NlY3Rpb25zO1xuICB0aGlzLmlzU2lnbmVkSW4gPSBkYXRhLmlzU2lnbmVkSW4gIT09IGZhbHNlO1xuICB0aGlzLmlzUmVhZHkgPSB0cnVlO1xuXG4gIC8vIENhbGwgYW55IHF1ZXVlZCBjYWxsYmFja3NcbiAgdGhpcy53aGVuUmVhZHlDYWxsYmFja3NfLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgY2FsbGJhY2sodGhpcyk7XG4gIH0uYmluZCh0aGlzKSk7XG4gIHRoaXMud2hlblJlYWR5Q2FsbGJhY2tzXy5sZW5ndGggPSAwO1xufTtcblxuLyoqXG4gKiBQcm92aWRlIGNvZGUgdG8gYmUgY2FsbGVkIHdoZW4gdGhpcyBvYmplY3QgaXMgcmVhZHkgdG8gdXNlXG4gKiBQb3NzaWJsZSBmb3IgaXQgdG8gYmUgY2FsbGVkIGltbWVkaWF0ZWx5LlxuICogQHBhcmFtIHshZnVuY3Rpb259IGNhbGxiYWNrXG4gKi9cbkRhc2hib2FyZFVzZXIucHJvdG90eXBlLndoZW5SZWFkeSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICBpZiAodGhpcy5pc1JlYWR5KSB7XG4gICAgY2FsbGJhY2sodGhpcyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53aGVuUmVhZHlDYWxsYmFja3NfLnB1c2goY2FsbGJhY2spO1xuICB9XG59O1xuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgdGhlIGN1cnJlbnQgdXNlciBvd25zIHRoZSBzZWN0aW9uIHdpdGggdGhlIGdpdmVuIHNlY3Rpb24gSUQuXG4gKiBAcGFyYW0ge251bWJlcn0gc2VjdGlvbklEXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuRGFzaGJvYXJkVXNlci5wcm90b3R5cGUub3duc1NlY3Rpb24gPSBmdW5jdGlvbiAoc2VjdGlvbklEKSB7XG4gIHJldHVybiB0aGlzLm93bmVkU2VjdGlvbnMuc29tZShmdW5jdGlvbiAoc2VjdGlvbikge1xuICAgIHJldHVybiBzZWN0aW9uLmlkID09PSBzZWN0aW9uSUQ7XG4gIH0pO1xufTtcbiIsIi8qKlxuICogQG92ZXJ2aWV3IFV0aWxpdGllcyBmb3IgdmFsaWRhdGluZyBhbmQgcmV0cmlldmluZyBhcmd1bWVudHMgdG8gYSBtZXRob2QuXG4gKi9cbi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1ha2VzIHN1cmUgdGhlIGdpdmVuIGFyZ3VtZW50IGlzIHByb3ZpZGVkIGFuZCBwYXNzZXMgdGhlIHZhbGlkYXRpb24gY2hlY2suXG4gKiBAcGFyYW0gez99IGFyZyAtIHRoZSBhcmd1bWVudCB0byB2YWxpZGF0ZVxuICogQHBhcmFtIHshc3RyaW5nfSBhcmdOYW1lIC0gQXJndW1lbnQgbmFtZSAoZm9yIHVzZWZ1bCBlcnJvciByZXBvcnRpbmcpXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKD8pfSBbdmFsaWRhdG9yXSAtIHZhbGlkYXRpb24gY2hlY2sgdG8gcnVuIG9uIHRoZSBhcmd1bWVudC5cbiAqICAgICAgICBEZWZhdWx0cyB0byBubyBjaGVjayAoYW55dGhpbmcgcGFzc2VzKS5cbiAqIEByZXR1cm5zIHs/fSB0aGUgb3JpZ2luYWwgYXJndW1lbnQuXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IGlmIHRoZSBhcmd1bWVudCBpcyBtaXNzaW5nIG9yIGludmFsaWQuXG4gKi9cbmV4cG9ydHMudmFsaWRhdGVSZXF1aXJlZCA9IGZ1bmN0aW9uIChhcmcsIGFyZ05hbWUsIHZhbGlkYXRvcikge1xuICBpZiAodW5kZWZpbmVkID09PSBhcmcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGFyZ05hbWUgKyAnIGlzIHJlcXVpcmVkLicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWxpZGF0b3IgPT09ICdmdW5jdGlvbicgJiYgIXZhbGlkYXRvcihhcmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IHNldCAnICsgYXJnTmFtZSArICcgdG8gJyArIGFyZyArICcuJyk7XG4gIH1cbiAgcmV0dXJuIGFyZztcbn07XG5cbi8qKlxuICogQWRkcyBhbiBvcHRpb24gZ2V0dGVyIHRvIHRoZSBwcm92aWRlZCBvcHRpb25zIE9iamVjdCB0aGF0IHZhbGlkYXRlc1xuICogdGhlIHBhc3NlZCBhcmd1bWVudHMgYW5kIGNhbiBwcm92aWRlIGRlZmF1bHQgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNPYmplY3QgLSB0aGUgcmF3IG9wdGlvbnMgb2JqZWN0LiAgTWF5IGJlIHBhc3NlZFxuICogICAgICAgIHVuZGVmaW5lZCAoYXMgaW4gYW4gb21pdHRlZCBvcHRpb25zIG9iamVjdCkgYnV0IG11c3Qgbm90IGJlIG51bGxcbiAqICAgICAgICBvciBhIG5vbi1vYmplY3QgdHlwZS4gIE5vdCBtb2RpZmllZC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IHRoYXQgaW5jbHVkZXMgYSBgZ2V0YCBtZXRob2QuICBXaWxsIGJlIGFuIG9iamVjdFxuICogICAgICAgICAgZXZlbiBpZiBvcmlnaW5hbCBvcHRpb25zT2JqZWN0IGFyZ3VtZW50IHdhcyB1bmRlZmluZWQuXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IGlmIGEgbm9uLW9iamVjdCBpcyBwYXNzZWQgdG8gdGhlIGNvbnN0cnVjdG9yLlxuICogQHRocm93cyB7RXJyb3J9IGlmIGV4dGVuZGluZyB0aGUgb2JqZWN0IHdvdWxkIG92ZXJ3cml0ZSBhbiBleGlzdGluZyBwcm9wZXJ0eS5cbiAqL1xuZXhwb3J0cy5leHRlbmRPcHRpb25zT2JqZWN0ID0gZnVuY3Rpb24gKG9wdGlvbnNPYmplY3QpIHtcbiAgLy8gQWxsb3cgYHVuZGVmaW5lZGAgYW5kIGFsbCBvYmplY3RzIGV4Y2VwdCBmb3IgYG51bGxgXG4gIHZhciBpc1VuZGVmaW5lZCA9IChvcHRpb25zT2JqZWN0ID09PSB1bmRlZmluZWQpO1xuICB2YXIgaXNSZWFsT2JqZWN0ID0gKHR5cGVvZiBvcHRpb25zT2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvcHRpb25zT2JqZWN0ICE9PSBudWxsKTtcbiAgaWYgKCEoaXNVbmRlZmluZWQgfHwgaXNSZWFsT2JqZWN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ09wdGlvbnMgb2JqZWN0IG11c3QgYmUgYW4gb2JqZWN0LicpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnNPYmplY3QgJiYgb3B0aW9uc09iamVjdC5oYXNPd25Qcm9wZXJ0eSgnZ2V0JykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBleHRlbmQgb3B0aW9uczsgcHJvcGVydHkgXCJnZXRcIiB3b3VsZCBiZSBvdmVyd3JpdHRlbi4nKTtcbiAgfVxuXG4gIHJldHVybiAkLmV4dGVuZCh7fSwgb3B0aW9uc09iamVjdCwge1xuICAgIC8qKlxuICAgICAqIFJldHJpZXZlIGFuIG9wdGlvbmFsIHZhbHVlIGZyb20gdGhlIG9wdGlvbnMgb2JqZWN0LCBwYXNzaW5nIGl0IHRocm91Z2ggdGhlXG4gICAgICogcHJvdmlkZWQgdmFsaWRhdGlvbiBmdW5jdGlvbiwgYW5kIHJldHVybmluZyB0aGUgZ2l2ZW4gZGVmYXVsdCB2YWx1ZSBpZlxuICAgICAqIHRoZSByZXF1ZXN0ZWQgb3B0aW9uIHdhcyBub3Qgc2V0LlxuICAgICAqIEBwYXJhbSB7IXN0cmluZ30gb3B0aW9uS2V5IC0gbmFtZSBvZiB0aGUgb3B0aW9uIGluIHRoZSByYXcgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbig/KX0gW3ZhbGlkYXRvcl0gLSB2YWxpZGF0aW9uIGNoZWNrIHRvIHJ1biBvbiB0aGUgdmFsdWUsXG4gICAgICogICAgICAgIGlmIGl0IGhhcyBiZWVuIHNldC4gIFNob3VsZCByZXR1cm4gVFJVRSBpZiB2YWxpZCBhbmQgRkFMU0Ugb3RoZXJ3aXNlLlxuICAgICAqICAgICAgICBEZWZhdWx0cyB0byBubyBjaGVjayAoYW55dGhpbmcgcGFzc2VzKS5cbiAgICAgKiBAcGFyYW0gez99IFtkZWZhdWx0VmFsdWVdIC0gV2hhdCB0byByZXR1cm4gaWYgdGhlIG9wdGlvbiB3YXMgbm90IHNldC5cbiAgICAgKiAgICAgICAgRGVmYXVsdHMgdG8gYHVuZGVmaW5lZGAuXG4gICAgICogQHJldHVybnMgez99IFRoZSB2YWx1ZSBvZiB0aGUgb3B0aW9uIGlmIGl0IHdhcyBzZXQsIGFuZCB0aGUgcHJvdmlkZWRcbiAgICAgKiAgICAgICAgICBkZWZhdWx0IHZhbHVlIGlmIGl0IHdhcyBub3Qgc2V0LlxuICAgICAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gaWYgdGhlIHZhbGlkYXRvciBmdW5jdGlvbiByZXR1cm5zIEZBTFNFIHdoZW4gY2FsbGVkXG4gICAgICogICAgICAgICBvbiB0aGUgb3B0aW9uIHZhbHVlLlxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gKG9wdGlvbktleSwgdmFsaWRhdG9yLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIGlmICghb3B0aW9uc09iamVjdCB8fCBvcHRpb25zT2JqZWN0W29wdGlvbktleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHZhbGlkYXRvciA9PT0gJ2Z1bmN0aW9uJyAmJiAhdmFsaWRhdG9yKG9wdGlvbnNPYmplY3Rbb3B0aW9uS2V5XSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IHNldCAnICsgb3B0aW9uS2V5ICsgJyB0byAnICtcbiAgICAgICAgICAgIG9wdGlvbnNPYmplY3Rbb3B0aW9uS2V5XSArICcuJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvcHRpb25zT2JqZWN0W29wdGlvbktleV07XG4gICAgfVxuICB9KTtcbn07XG5cblxuLyoqXG4gKiBWYWxpZGF0b3IgZnVuY3Rpb24gdGhhdCB2ZXJpZmllcyB0aGF0IHRoZSBhcmd1bWVudCBpcyBhIG51bWJlciwgaXNcbiAqIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB6ZXJvLCBhbmQgaXMgbm90IEluZmluaXR5LlxuICogQHBhcmFtIGFyZ1xuICogQHJldHVybnMge2Jvb2xlYW59IFRSVUUgaWYgcHJvdmlkZWQgYXJndW1lbnQgaXMgdmFsaWQuXG4gKiBAc3RhdGljXG4gKi9cbmV4cG9ydHMuaXNQb3NpdGl2ZU5vbmluZmluaXRlTnVtYmVyID0gZnVuY3Rpb24gKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgJiZcbiAgICAgICFpc05hTihhcmcpICYmXG4gICAgICBhcmcgPj0gMCAmJlxuICAgICAgYXJnICE9PSBJbmZpbml0eTtcbn07XG5cbi8qKlxuICogVmFsaWRhdG9yIGZ1bmN0aW9uIHRoYXQgdmVyaWZpZXMgdGhhdCB0aGUgYXJndW1lbnQgaXMgYSBudW1iZXIsIGlzXG4gKiBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gemVybywgYW5kIGlzIG5vdCBJbmZpbml0eS5cbiAqIEBwYXJhbSB7P30gYXJnXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVFJVRSBpZiBwcm92aWRlZCBhcmd1bWVudCBpcyB2YWxpZC5cbiAqIEBzdGF0aWNcbiAqL1xuZXhwb3J0cy5pc0Jvb2xlYW4gPSBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59O1xuXG4vKipcbiAqIFZhbGlkYXRvciBmdW5jdGlvbiB0aGF0IHZlcmlmaWVzIHRoYXQgdGhlIGFyZ3VtZW50IGlzIGEgc3RyaW5nLlxuICogQHBhcmFtIHs/fSBhcmdcbiAqIEByZXR1cm5zIHtib29sZWFufSBUUlVFIGlmIHByb3ZpZGVkIGFyZ3VtZW50IGlzIHZhbGlkLlxuICogQHN0YXRpY1xuICovXG5leHBvcnRzLmlzU3RyaW5nID0gZnVuY3Rpb24gKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59O1xuXG4vKipcbiAqIFZhbGlkYXRvciBmdW5jdGlvbiB0aGF0IHZlcmlmaWVzIHRoZSBhcmd1bWVudCBpcyBhbiBhcnJheS5cbiAqIFN1cmUgdGhpcyBzZWVtcyByZWR1bmRhbnQsIGJ1dCBpbmNsdWRlZCBoZXJlIGZvciBkaXNjb3ZlcmFiaWxpdHkuXG4gKiBAcGFyYW0gez99IGFyZ1xuICogQHJldHVybnMge2Jvb2xlYW59IFRSVUUgaWYgdGhlIHByb3ZpZGVkIGFyZ3VtZW50IGlzIGFuIGFycmF5LlxuICovXG5leHBvcnRzLmlzQXJyYXkgPSBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGFyZyk7XG59O1xuXG4vKipcbiAqIFZhbGlkYXRvciBmdW5jdGlvbiB0aGF0IHZlcmlmaWVzIHRoYXQgYXJndW1lbnQgaXMgYW4gYXJyYXkgb2Ygc3RyaW5ncy5cbiAqIEBwYXJhbSB7P30gYXJnXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVFJVRSBpZiBwcm92aWRlZCBhcmd1bWVudCBpcyBhbiBhcnJheSBhbmQgZXZlcnkgZWxlbWVudFxuICogICAgICAgICAgaW4gdGhlIGFycmF5IGlzIGEgc3RyaW5nLlxuICogQHN0YXRpY1xuICovXG5leHBvcnRzLmlzQXJyYXlPZlN0cmluZ3MgPSBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGFyZykgJiYgYXJnLmV2ZXJ5KGV4cG9ydHMuaXNTdHJpbmcpO1xufTtcbiIsIi8vIFN0cmljdCBsaW50aW5nOiBBYnNvcmIgaW50byBnbG9iYWwgY29uZmlnIHdoZW4gcG9zc2libGVcbi8qIGpzaGludFxuIHVudXNlZDogdHJ1ZSxcbiBlcWVxZXE6IHRydWUsXG4gbWF4bGVuOiAxMjBcbiAqL1xuLyogZ2xvYmFsIHdpbmRvdyAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgT2JzZXJ2YWJsZUV2ZW50ID0gcmVxdWlyZSgnLi9PYnNlcnZhYmxlRXZlbnQnKTtcblxuLy8gSXQgaXMgbW9yZSBhY2N1cmF0ZSB0byB1c2UgcGVyZm9ybWFuY2Uubm93KCksIGJ1dCB3ZSB1c2UgRGF0ZS5ub3coKVxuLy8gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBTYWZhcmkgYW5kIG9sZGVyIGJyb3dzZXJzLiBUaGlzIHNob3VsZCBvbmx5IGNhdXNlXG4vLyBhIHNtYWxsIGVycm9yIGluIHRoZSBkZWx0YVRpbWUgZm9yIHRoZSBpbml0aWFsIGZyYW1lIGFueXdheS5cbi8vIFNlZSBBbHNvOlxuLy8gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZVxuLy8gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvUGVyZm9ybWFuY2Uubm93XG52YXIgd2luZG93Tm93ID0gKHdpbmRvdy5wZXJmb3JtYW5jZSAmJiB3aW5kb3cucGVyZm9ybWFuY2Uubm93KSA/XG4gICAgd2luZG93LnBlcmZvcm1hbmNlLm5vdy5iaW5kKHdpbmRvdy5wZXJmb3JtYW5jZSkgOiBEYXRlLm5vdztcblxuLyoqXG4gKiBIb3cgbWFueSB0aWNrcyB3ZSB0cnkgdG8gZmlyZSBldmVyeSBzZWNvbmQuXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0XG4gKi9cbnZhciBQUkVGRVJSRURfVElDS1NfUEVSX1NFQ09ORCA9IDEwO1xuXG4vKipcbiAqIFByZWNhbGN1bGF0ZWQgbWlsbGlzZWNvbmRzIHBlciB0aWNrLlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdFxuICovXG52YXIgUFJFRkVSUkVEX01TX1BFUl9USUNLID0gKDEwMDAgLyBQUkVGRVJSRURfVElDS1NfUEVSX1NFQ09ORCk7XG5cbi8qKlxuICogUmVuZGVyZWQgZnJhbWVzIHBlciBzZWNvbmQgb24gb2xkZXIgYnJvd3NlcnMgd2hlcmUgd2UgY2FuJ3QgbG9jayB0byB0aGVcbiAqIHJlcGFpbnQgZXZlbnQuXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0XG4gKi9cbnZhciBGQUxMQkFDS19GUFMgPSAzMDtcblxuLyoqXG4gKiBQcmVjYWxjdWxhdGVkIG1pbGxpc2Vjb25kcyBwZXIgZnJhbWUgZm9yIGZhbGxiYWNrIGNhc2VcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqL1xudmFyIEZBTExCQUNLX01TX1BFUl9GUkFNRSA9ICgxMDAwIC8gRkFMTEJBQ0tfRlBTKTtcblxuXG5cbi8qKlxuICogU2ltcGxlIHJ1bi1sb29wIG1hbmFnZXJcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgUnVuTG9vcCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBydW4tbG9vcCB3aWxsIGNvbnRpbnVlIHJ1bm5pbmcuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5lbmFibGVkID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFRyYWNrcyBjdXJyZW50IHRpbWUgYW5kIGRlbHRhIHRpbWUgZm9yIHRoZSB0aWNrIGxvb3AuXG4gICAqIFBhc3NlZCB0byBvYnNlcnZlcnMgd2hlbiBldmVudHMgZmlyZS5cbiAgICogQHR5cGUge1J1bkxvb3AuQ2xvY2t9XG4gICAqL1xuICB0aGlzLnRpY2tDbG9jayA9IG5ldyBSdW5Mb29wLkNsb2NrKCk7XG5cbiAgLyoqXG4gICAqIFRyYWNrcyBjdXJyZW50IHRpbWUgYW5kIGRlbHRhIHRpbWUgZm9yIHRoZSByZW5kZXIgbG9vcC5cbiAgICogUGFzc2VkIHRvIG9ic2VydmVycyB3aGVuIGV2ZW50cyBmaXJlLlxuICAgKiBAdHlwZSB7UnVuTG9vcC5DbG9ja31cbiAgICovXG4gIHRoaXMucmVuZGVyQ2xvY2sgPSBuZXcgUnVuTG9vcC5DbG9jaygpO1xuXG4gIC8qKlxuICAgKiBNZXRob2QgdGhhdCBnZXRzIGNhbGxlZCBvdmVyIGFuZCBvdmVyLCByZWdhcmRsZXNzIG9mIHdoZXRoZXIgTmV0U2ltXG4gICAqIGlzIGluIGZvY3VzIG9yIG5vdC4gIENhbGxlZCBsZXNzIG9mdGVuIHRoYW4gcmVuZGVyKCkuICBDYW4gYmUgc2xvd2VkXG4gICAqIHRvIGFib3V0IG9uY2UgcGVyIHNlY29uZCB3aGVuIE5ldFNpbSBpcyBpbiB0aGUgYmFja2dyb3VuZC5cbiAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy50aWNrXyA9IHRoaXMuYnVpbGRUaWNrTWV0aG9kXygpO1xuXG4gIC8qKlxuICAgKiBNZXRob2QgdGhhdCBnZXRzIGNhbGxlZCBvdmVyIGFuZCBvdmVyIHdoZW4gTmV0U2ltIGlzIHZpc2libGUuICBHZXRzIGFzXG4gICAqIGNsb3NlIHRvIG1heGltdW0gZnJhbWVyYXRlIGFzIHBvc3NpYmxlLiAgQ2FsbGVkIG1vcmUgb2Z0ZW4gdGhhbiB0aWNrKCksIGJ1dFxuICAgKiBjYW4gYmUgcGF1c2VkIGVudGlyZWx5IHdoZW4gTmV0U2ltIGlzIGluIHRoZSBiYWNrZ3JvdW5kLlxuICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnJlbmRlcl8gPSB0aGlzLmJ1aWxkUmVuZGVyTWV0aG9kXygpO1xuXG4gIC8qKiAgQHR5cGUge09ic2VydmFibGVFdmVudH0gKi9cbiAgdGhpcy50aWNrID0gbmV3IE9ic2VydmFibGVFdmVudCgpO1xuXG4gIC8qKiBAdHlwZSB7T2JzZXJ2YWJsZUV2ZW50fSAqL1xuICB0aGlzLnJlbmRlciA9IG5ldyBPYnNlcnZhYmxlRXZlbnQoKTtcbn07XG5cbi8qKlxuICogU2ltcGxlIHRyYWNraW5nIGZvciB0aW1lIHZhbHVlc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cblJ1bkxvb3AuQ2xvY2sgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBUaW1lIHRoZSBjdXJyZW50L21vc3QgcmVjZW50IHRpY2sgc3RhcnRlZCwgaW4gbXMuXG4gICAqIERlcGVuZGluZyBvbiBicm93c2VyIHRoaXMgbWlnaHQgYmUgZXBvY2ggdGltZSBvciB0aW1lIHNpbmNlIGxvYWQgLVxuICAgKiAgdGhlcmVmb3JlLCBkb24ndCB1c2UgZm9yIGFic29sdXRlIHRpbWUhXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLnRpbWUgPSB3aW5kb3dOb3coKTtcblxuICAvKipcbiAgICogVGltZSBpbiBtcyBiZXR3ZWVuIHRoZSBsYXRlc3QvY3VycmVudCB0aWNrIGFuZCB0aGUgcHJldmlvdXMgdGljay5cbiAgICogUHJlY2lzaW9uIGRlcGVuZGVudCBvbiBicm93c2VyIGNhcGFiaWxpdGllcy5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRoaXMuZGVsdGFUaW1lID0gMDtcbn07XG5cblJ1bkxvb3AucHJvdG90eXBlLmJ1aWxkVGlja01ldGhvZF8gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aWNrTWV0aG9kO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRpY2tNZXRob2QgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHNlbGYuZW5hYmxlZCkge1xuICAgICAgdmFyIGN1clRpbWUgPSB3aW5kb3dOb3coKTtcbiAgICAgIHNlbGYudGlja0Nsb2NrLmRlbHRhVGltZSA9IGN1clRpbWUgLSBzZWxmLnRpY2tDbG9jay50aW1lO1xuICAgICAgc2VsZi50aWNrQ2xvY2sudGltZSA9IGN1clRpbWU7XG4gICAgICBzZWxmLnRpY2subm90aWZ5T2JzZXJ2ZXJzKHNlbGYudGlja0Nsb2NrKTtcbiAgICAgIHNldFRpbWVvdXQodGlja01ldGhvZCwgUFJFRkVSUkVEX01TX1BFUl9USUNLIC0gc2VsZi50aWNrQ2xvY2suZGVsdGFUaW1lKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB0aWNrTWV0aG9kO1xufTtcblxuUnVuTG9vcC5wcm90b3R5cGUuYnVpbGRSZW5kZXJNZXRob2RfID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcmVuZGVyTWV0aG9kO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGlmICh3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgcmVuZGVyTWV0aG9kID0gZnVuY3Rpb24gKGhpUmVzVGltZVN0YW1wKSB7XG4gICAgICBpZiAoc2VsZi5lbmFibGVkKSB7XG4gICAgICAgIHNlbGYucmVuZGVyQ2xvY2suZGVsdGFUaW1lID0gaGlSZXNUaW1lU3RhbXAgLSBzZWxmLnJlbmRlckNsb2NrLnRpbWU7XG4gICAgICAgIHNlbGYucmVuZGVyQ2xvY2sudGltZSA9IGhpUmVzVGltZVN0YW1wO1xuICAgICAgICBzZWxmLnJlbmRlci5ub3RpZnlPYnNlcnZlcnMoc2VsZi5yZW5kZXJDbG9jayk7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXJNZXRob2QpO1xuICAgICAgfVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmVuZGVyTWV0aG9kID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNlbGYuZW5hYmxlZCkge1xuICAgICAgICB2YXIgY3VyVGltZSA9IHdpbmRvd05vdygpO1xuICAgICAgICBzZWxmLnJlbmRlckNsb2NrLmRlbHRhVGltZSA9IGN1clRpbWUgLSBzZWxmLnJlbmRlckNsb2NrLnRpbWU7XG4gICAgICAgIHNlbGYucmVuZGVyQ2xvY2sudGltZSA9IGN1clRpbWU7XG4gICAgICAgIHNlbGYucmVuZGVyLm5vdGlmeU9ic2VydmVycyhzZWxmLnJlbmRlckNsb2NrKTtcbiAgICAgICAgc2V0VGltZW91dChyZW5kZXJNZXRob2QsIEZBTExCQUNLX01TX1BFUl9GUkFNRSAtIHNlbGYucmVuZGVyQ2xvY2suZGVsdGFUaW1lKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHJldHVybiByZW5kZXJNZXRob2Q7XG59O1xuXG4vKiogU3RhcnQgdGhlIHJ1biBsb29wIChydW5zIGltbWVkaWF0ZWx5KSAqL1xuUnVuTG9vcC5wcm90b3R5cGUuYmVnaW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW5hYmxlZCA9IHRydWU7XG4gIHRoaXMudGlja0Nsb2NrLnRpbWUgPSB3aW5kb3dOb3coKTtcbiAgdGhpcy5yZW5kZXJDbG9jay50aW1lID0gd2luZG93Tm93KCk7XG4gIHRoaXMudGlja18odGhpcy50aWNrQ2xvY2sudGltZSk7XG4gIHRoaXMucmVuZGVyXyh0aGlzLnJlbmRlckNsb2NrLnRpbWUpO1xufTtcblxuLyoqXG4gKiBTdG9wIHRoZSBydW4gbG9vcFxuICogSWYgaW4gdGhlIG1pZGRsZSBvZiBhIHRpY2ssIHdpbGwgZmluaXNoIHRoZSBjdXJyZW50IHRpY2suXG4gKiBJZiBjYWxsZWQgYnkgYW4gZXZlbnQgYmV0d2VlbiB0aWNrcywgd2lsbCBwcmV2ZW50IHRoZSBuZXh0IHRpY2sgZnJvbSBmaXJpbmcuXG4gKi9cblJ1bkxvb3AucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbmFibGVkID0gZmFsc2U7XG59O1xuIl19
