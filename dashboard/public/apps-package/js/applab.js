require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/home/ubuntu/staging/apps/build/js/applab/main.js":[function(require,module,exports){
(function (global){
'use strict';

var appMain = require('../appMain');
window.Applab = require('./applab');
if (typeof global !== 'undefined') {
  global.Applab = window.Applab;
}
var blocks = require('./blocks');
var levels = require('./levels');
var skins = require('./skins');

window.applabMain = function (options) {
  options.skinsModule = skins;
  options.blocksModule = blocks;
  appMain(window.Applab, levels, options);
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1aWxkL2pzL2FwcGxhYi9tYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNwQyxJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsRUFBRTtBQUNqQyxRQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7Q0FDL0I7QUFDRCxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDakMsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ2pDLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQzs7QUFFL0IsTUFBTSxDQUFDLFVBQVUsR0FBRyxVQUFTLE9BQU8sRUFBRTtBQUNwQyxTQUFPLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztBQUM1QixTQUFPLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQztBQUM5QixTQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDekMsQ0FBQyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcE1haW4gPSByZXF1aXJlKCcuLi9hcHBNYWluJyk7XG53aW5kb3cuQXBwbGFiID0gcmVxdWlyZSgnLi9hcHBsYWInKTtcbmlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICBnbG9iYWwuQXBwbGFiID0gd2luZG93LkFwcGxhYjtcbn1cbnZhciBibG9ja3MgPSByZXF1aXJlKCcuL2Jsb2NrcycpO1xudmFyIGxldmVscyA9IHJlcXVpcmUoJy4vbGV2ZWxzJyk7XG52YXIgc2tpbnMgPSByZXF1aXJlKCcuL3NraW5zJyk7XG5cbndpbmRvdy5hcHBsYWJNYWluID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICBvcHRpb25zLnNraW5zTW9kdWxlID0gc2tpbnM7XG4gIG9wdGlvbnMuYmxvY2tzTW9kdWxlID0gYmxvY2tzO1xuICBhcHBNYWluKHdpbmRvdy5BcHBsYWIsIGxldmVscywgb3B0aW9ucyk7XG59O1xuIl19
},{"../appMain":"/home/ubuntu/staging/apps/build/js/appMain.js","./applab":"/home/ubuntu/staging/apps/build/js/applab/applab.js","./blocks":"/home/ubuntu/staging/apps/build/js/applab/blocks.js","./levels":"/home/ubuntu/staging/apps/build/js/applab/levels.js","./skins":"/home/ubuntu/staging/apps/build/js/applab/skins.js"}],"/home/ubuntu/staging/apps/build/js/applab/skins.js":[function(require,module,exports){
/**
 * Load Skin for Applab.
 */

'use strict';

var skinsBase = require('../skins');

var CONFIGS = {
  applab: {}
};

exports.load = function (assetUrl, id) {
  var skin = skinsBase.load(assetUrl, id);
  var config = CONFIGS[skin.id];

  return skin;
};

},{"../skins":"/home/ubuntu/staging/apps/build/js/skins.js"}],"/home/ubuntu/staging/apps/build/js/applab/levels.js":[function(require,module,exports){
/*jshint multistr: true */

'use strict';

var msg = require('./locale');
var utils = require('../utils');
var blockUtils = require('../block_utils');
var tb = blockUtils.createToolbox;
var blockOfType = blockUtils.blockOfType;
var createCategory = blockUtils.createCategory;

/*
 * Configuration for all levels.
 */
var levels = module.exports = {};

levels.simple = {
  'requiredBlocks': [],
  'scale': {
    'snapRadius': 2
  },
  'freePlay': true,
  'toolbox': tb('<block type="applab_container" inline="true"> \
        <value name="ID"><block type="text"><title name="TEXT">id</title></block></value> \
        <value name="HTML"><block type="text"><title name="TEXT">html</title></block></value></block>'),
  'startBlocks': '<block type="when_run" deletable="false" x="20" y="20"></block>'
};

levels.custom = {
  'freePlay': true,
  'editCode': true,
  'sliderSpeed': 1,
  'appWidth': 320,
  'appHeight': 480,

  /**
   * This is the default set of functions available to us if the levelbuilder
   * leaves codeFunctions blank.
   * Applab.rb self.palette serves a similar function, intially providing
   * levelbuilders with the text for the default set of blocks.
   * These two places shouldbe kept in sync
   */
  'codeFunctions': {
    // UI Controls
    "onEvent": null,
    "button": null,
    "textInput": null,
    "textLabel": null,
    "dropdown": null,
    "getText": null,
    "setText": null,
    "getNumber": null,
    "setNumber": null,
    "checkbox": null,
    "radioButton": null,
    "getChecked": null,
    "setChecked": null,
    "image": null,
    "getImageURL": null,
    "setImageURL": null,
    "playSound": null,
    "showElement": null,
    "hideElement": null,
    "deleteElement": null,
    "setPosition": null,
    "setSize": null,
    "setProperty": null,
    "write": null,
    "getXPosition": null,
    "getYPosition": null,
    "setScreen": null,

    // Canvas
    "createCanvas": null,
    "setActiveCanvas": null,
    "line": null,
    "circle": null,
    "rect": null,
    "setStrokeWidth": null,
    "setStrokeColor": null,
    "setFillColor": null,
    "drawImageURL": null,
    "getImageData": null,
    "putImageData": null,
    "clearCanvas": null,
    "getRed": null,
    "getGreen": null,
    "getBlue": null,
    "getAlpha": null,
    "setRed": null,
    "setGreen": null,
    "setBlue": null,
    "setAlpha": null,
    "setRGB": null,

    // Data
    "startWebRequest": null,
    "setKeyValue": null,
    "getKeyValue": null,
    "createRecord": null,
    "readRecords": null,
    "updateRecord": null,
    "deleteRecord": null,
    "getUserId": null,
    "drawChart": null,
    "drawChartFromRecords": null,

    // Turtle
    "moveForward": null,
    "moveBackward": null,
    "move": null,
    "moveTo": null,
    "dot": null,
    "turnRight": null,
    "turnLeft": null,
    "turnTo": null,
    "arcRight": null,
    "arcLeft": null,
    "getX": null,
    "getY": null,
    "getDirection": null,
    "penUp": null,
    "penDown": null,
    "penWidth": null,
    "penColor": null,
    "penRGB": null,
    "show": null,
    "hide": null,
    "speed": null,

    // Control
    "forLoop_i_0_4": null,
    "ifBlock": null,
    "ifElseBlock": null,
    "whileBlock": null,
    "setTimeout": null,
    "clearTimeout": null,
    "setInterval": null,
    "clearInterval": null,
    "getTime": null,

    // Math
    "addOperator": null,
    "subtractOperator": null,
    "multiplyOperator": null,
    "divideOperator": null,
    "equalityOperator": null,
    "inequalityOperator": null,
    "greaterThanOperator": null,
    "greaterThanOrEqualOperator": null,
    "lessThanOperator": null,
    "lessThanOrEqualOperator": null,
    "andOperator": null,
    "orOperator": null,
    "notOperator": null,
    "randomNumber_min_max": null,
    "mathRound": null,
    "mathAbs": null,
    "mathMax": null,
    "mathMin": null,
    "mathRandom": null,

    // Variables
    "declareAssign_x": null,
    "declareNoAssign_x": null,
    "assign_x": null,
    "declareAssign_x_prompt": null,
    "declareAssign_x_promptNum": null,
    "console.log": null,
    "declareAssign_str_hello_world": null,
    "substring": null,
    "indexOf": null,
    "includes": null,
    "length": null,
    "toUpperCase": null,
    "toLowerCase": null,
    "declareAssign_list_abd": null,
    "listLength": null,
    "insertItem": null,
    "appendItem": null,
    "removeItem": null,

    // Functions
    "functionParams_none": null,
    "functionParams_n": null,
    "callMyFunction": null,
    "callMyFunction_n": null,
    "return": null,
    "comment": null
  }

};

// "randomNumber_max": null, // DEPRECATED
levels.ec_simple = utils.extend(levels.custom, {});

// Functions in Advanced category currently disabled in all levels:
/*
 "imageUploadButton": null,
 "container": null,
 "innerHTML": null,
 "setStyle": null,
 "getAttribute": null,
 "setAttribute": null,
 "setParent": null,
*/

levels.full_sandbox = {
  'scrollbars': true,
  'requiredBlocks': [],
  'scale': {
    'snapRadius': 2
  },
  'softButtons': ['leftButton', 'rightButton', 'downButton', 'upButton'],
  'minWorkspaceHeight': 1400,
  'freePlay': true,
  'toolbox': tb(createCategory(msg.catActions(), '<block type="applab_createHtmlBlock" inline="true"> \
          <value name="ID"><block type="text"><title name="TEXT">id</title></block></value> \
          <value name="HTML"><block type="text"><title name="TEXT">html</title></block></value></block>') + createCategory(msg.catControl(), blockOfType('controls_whileUntil') + '<block type="controls_for"> \
                          <value name="FROM"> \
                            <block type="math_number"> \
                              <title name="NUM">1</title> \
                            </block> \
                          </value> \
                          <value name="TO"> \
                            <block type="math_number"> \
                              <title name="NUM">10</title> \
                            </block> \
                          </value> \
                          <value name="BY"> \
                            <block type="math_number"> \
                              <title name="NUM">1</title> \
                            </block> \
                          </value> \
                        </block>' + blockOfType('controls_flow_statements')) + createCategory(msg.catLogic(), blockOfType('controls_if') + blockOfType('logic_compare') + blockOfType('logic_operation') + blockOfType('logic_negate') + blockOfType('logic_boolean')) + createCategory(msg.catMath(), blockOfType('math_number') + '<block type="math_change"> \
                          <value name="DELTA"> \
                            <block type="math_number"> \
                              <title name="NUM">1</title> \
                            </block> \
                          </value> \
                        </block>' + '<block type="math_random_int"> \
                          <value name="FROM"> \
                            <block type="math_number"> \
                              <title name="NUM">1</title> \
                            </block> \
                          </value> \
                          <value name="TO"> \
                            <block type="math_number"> \
                              <title name="NUM">100</title> \
                            </block> \
                          </value> \
                        </block>' + blockOfType('math_arithmetic')) + createCategory(msg.catText(), blockOfType('text') + blockOfType('text_join') + '<block type="text_append"> \
                          <value name="TEXT"> \
                            <block type="text"></block> \
                          </value> \
                        </block>') + createCategory(msg.catVariables(), '', 'VARIABLE') + createCategory(msg.catProcedures(), '', 'PROCEDURE')),
  'startBlocks': '<block type="when_run" deletable="false" x="20" y="20"></block>'
};

},{"../block_utils":"/home/ubuntu/staging/apps/build/js/block_utils.js","../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./locale":"/home/ubuntu/staging/apps/build/js/applab/locale.js"}],"/home/ubuntu/staging/apps/build/js/applab/applab.js":[function(require,module,exports){
/**
 * CodeOrgApp: Applab
 *
 * Copyright 2014-2015 Code.org
 *
 */
/* global Dialog */
/* global dashboard */

'use strict';
var studioApp = require('../StudioApp').singleton;
var commonMsg = require('../locale');
var applabMsg = require('./locale');
var skins = require('../skins');
var codegen = require('../codegen');
var api = require('./api');
var apiBlockly = require('./apiBlockly');
var dontMarshalApi = require('./dontMarshalApi');
var blocks = require('./blocks');
var AppLabView = require('./AppLabView.jsx');
var codeWorkspaceEjs = require('../templates/codeWorkspace.html.ejs');
var visualizationColumnEjs = require('../templates/visualizationColumn.html.ejs');
var dom = require('../dom');
var parseXmlElement = require('../xml').parseElement;
var utils = require('../utils');
var dropletUtils = require('../dropletUtils');
var dropletConfig = require('./dropletConfig');
var AppStorage = require('./appStorage');
var constants = require('../constants');
var KeyCodes = constants.KeyCodes;
var _ = utils.getLodash();
// var Hammer = utils.getHammer();
var apiTimeoutList = require('../timeoutList');
var annotationList = require('../acemode/annotationList');
var designMode = require('./designMode');
var applabTurtle = require('./applabTurtle');
var applabCommands = require('./commands');
var JSInterpreter = require('../JSInterpreter');
var JsInterpreterLogger = require('../JsInterpreterLogger');
var JsDebuggerUi = require('../JsDebuggerUi');
var elementLibrary = require('./designElements/library');
var elementUtils = require('./designElements/elementUtils');
var VisualizationOverlay = require('./VisualizationOverlay');
var ShareWarningsDialog = require('../templates/ShareWarningsDialog.jsx');
var logToCloud = require('../logToCloud');

var applabConstants = require('./constants');

var ResultType = studioApp.ResultType;
var TestResults = studioApp.TestResults;

/**
 * Create a namespace for the application.
 */
var Applab = module.exports;

/**
 * @type {JsInterpreterLogger} observes the interpreter and logs to console
 */
var jsInterpreterLogger = null;

/**
 * @type {JsDebuggerUi} Controller for JS debug buttons and console area
 */
var debuggerUi = null;

/**
 * Temporary: Some code depends on global access to logging, but only Applab
 * knows about the debugger UI where logging should occur.
 * Eventually, I'd like to replace this with window events that the debugger
 * UI listens to, so that the Applab global is not involved.
 * @param {*} object
 */
Applab.log = function (object) {
  if (jsInterpreterLogger) {
    jsInterpreterLogger.log(object);
  }

  if (debuggerUi) {
    debuggerUi.log(object);
  }
};

var errorHandler = require('./errorHandler');
var outputError = errorHandler.outputError;
var ErrorLevel = errorHandler.ErrorLevel;

var level;
var skin;
var copyrightStrings;

//TODO: Make configurable.
studioApp.setCheckForEmptyBlocks(true);

var MAX_INTERPRETER_STEPS_PER_TICK = 10000;

// For proxying non-https assets
var MEDIA_PROXY = '//' + location.host + '/media?u=';

// Default Scalings
Applab.scale = {
  'snapRadius': 1,
  'stepSpeed': 0
};

var twitterOptions = {
  text: applabMsg.shareApplabTwitter(),
  hashtag: "ApplabCode"
};

var FOOTER_HEIGHT = applabConstants.FOOTER_HEIGHT;

// The typical width of the visualization area (indepdendent of appWidth)
var vizAppWidth = 400;
// The default values for appWidth and appHeight (if not specified in the level)
var defaultAppWidth = 400;
var defaultAppHeight = 400;

function loadLevel() {
  Applab.hideDesignMode = level.hideDesignMode;
  Applab.timeoutFailureTick = level.timeoutFailureTick || Infinity;
  Applab.minWorkspaceHeight = level.minWorkspaceHeight;
  Applab.softButtons_ = level.softButtons || {};
  Applab.appWidth = level.appWidth || defaultAppWidth;
  Applab.appHeight = level.appHeight || defaultAppHeight;
  // In share mode we need to reserve some number of pixels for our in-app
  // footer. We do that by making the play space slightly smaller elsewhere.
  // Applab.appHeight represents the height of the entire app (footer + other)
  // Applab.footerlessAppHeight represents the height of only the "other"
  if (Applab.appHeight > 480) {
    throw new Error('Strange things may happen with appHeight > 480');
  }
  if (Applab.appHeight + FOOTER_HEIGHT >= 480) {
    // If footer will extend past 480, make room for it.
    Applab.footerlessAppHeight = Applab.appHeight - FOOTER_HEIGHT;
  } else {
    Applab.footerlessAppHeight = Applab.appHeight;
  }

  // Override scalars.
  for (var key in level.scale) {
    Applab.scale[key] = level.scale[key];
  }
}

//
// Adjust a media height rule (if needed). This is called by adjustAppSizeStyles
// for all media rules. We look for a specific set of rules that should be in
// the stylesheet and swap out the defaultHeightRules with the newHeightRules
//

function adjustMediaHeightRule(mediaList, defaultHeightRules, newHeightRules) {
  // The media rules we are looking for always have two components. The first
  // component is for screen width, which we ignore. The second is for screen
  // height, which we want to modify:
  if (mediaList.length === 2) {
    var lastHeightRuleIndex = defaultHeightRules.length - 1;
    for (var i = 0; i <= lastHeightRuleIndex; i++) {
      if (-1 !== mediaList.item(1).indexOf("(min-height: " + (defaultHeightRules[i] + 1) + "px)")) {
        if (i === 0) {
          // Matched the first rule (no max height)
          mediaList.mediaText = mediaList.item(0) + ", screen and (min-height: " + (newHeightRules[i] + 1) + "px)";
        } else {
          // Matched one of the middle rules with a min and a max height
          mediaList.mediaText = mediaList.item(0) + ", screen and (min-height: " + (newHeightRules[i] + 1) + "px)" + " and (max-height: " + newHeightRules[i - 1] + "px)";
        }
        break;
      } else if (mediaList.item(1) === "screen and (max-height: " + defaultHeightRules[lastHeightRuleIndex] + "px)") {
        // Matched the last rule (no min height)
        mediaList.mediaText = mediaList.item(0) + ", screen and (max-height: " + newHeightRules[lastHeightRuleIndex] + "px)";
        break;
      }
    }
  }
}

//
// The visualization area adjusts its size using a series of CSS rules that are
// tuned to make adjustments assuming a 400x400 visualization. Since applab
// allows its visualization size to be set on a per-level basis, the function
// below modifies the CSS rules to account for the per-level coordinates
//
// It also adjusts the height rules based on the adjusted visualization size
// and the offset where the app has been embedded in the page
//
// The visualization column will remain at 400 pixels wide in the max-width
// case and scale downward from there. The visualization height will be set
// to preserve the proper aspect ratio with respect to the current width.
//
// The visualization coordinate space will be Applab.appWidth by Applab.appHeight.
// The scale values are then adjusted such that the max-width case may result
// in a scaled-up version of the visualization area and the min-width case will
// typically result in a scaled-down version of the visualization area.
//
// @returns {Array.<number>} Array of scale factors which will be used
//     on the applab app area at the following screen widths, respectively:
//     1151px+; 1101-1150px; 1051-1100px; 1001-1050px; 0-1000px.
//

function adjustAppSizeStyles(container) {
  var vizScale = 1;
  // We assume these are listed in this order:
  var defaultScaleFactors = [1.0, 0.875, 0.75, 0.625, 0.5];
  var scaleFactors = defaultScaleFactors.slice(0);
  if (vizAppWidth !== Applab.appWidth) {
    vizScale = vizAppWidth / Applab.appWidth;
    for (var ind = 0; ind < scaleFactors.length; ind++) {
      scaleFactors[ind] *= vizScale;
    }
  }
  var vizAppHeight = Applab.footerlessAppHeight * vizScale;

  // Compute new height rules:
  // (1) defaults are scaleFactors * defaultAppHeight + 200 (belowViz estimate)
  // (2) we adjust the height rules to take into account where the codeApp
  // div is anchored on the page. If this changes after this function is called,
  // the media rules for height are no longer valid.
  // (3) we assume that there is nothing below codeApp on the page that also
  // needs to be included in the height rules
  // (4) there is no 5th height rule in the array because the 5th rule in the
  // stylesheet has no minimum specified. It just uses the max-height from the
  // 4th item in the array.
  var defaultHeightRules = [600, 550, 500, 450];
  var newHeightRules = defaultHeightRules.slice(0);
  for (var z = 0; z < newHeightRules.length; z++) {
    newHeightRules[z] += container.offsetTop + (vizAppHeight - defaultAppHeight) * defaultScaleFactors[z];
  }

  if (!utils.browserSupportsCssMedia()) {
    return;
  }

  var ss = document.styleSheets;
  // Match applab.css or (for production) applab-{hex-fingerprint}.css
  var applabStyleSheetRegex = /\/applab-?[0-9a-f]*\.css$/i;
  for (var i = 0; i < ss.length; i++) {
    if (ss[i].href && applabStyleSheetRegex.test(ss[i].href)) {
      // We found our applab specific stylesheet:
      var rules = ss[i].cssRules || ss[i].rules;
      var changedRules = 0;
      var curScaleIndex = 0;
      // Change the width/height plus a set of rules for each scale factor:
      var totalRules = 1 + scaleFactors.length;
      for (var j = 0; j < rules.length && changedRules < totalRules; j++) {
        var childRules = rules[j].cssRules || rules[j].rules;
        if (rules[j].selectorText === "div#visualization") {
          // set the 'normal' width/height for the visualization itself
          rules[j].style.cssText = "height: " + vizAppHeight + "px; width: " + vizAppWidth + "px;";
          changedRules++;
        } else if (rules[j].media && childRules) {
          adjustMediaHeightRule(rules[j].media, defaultHeightRules, newHeightRules);

          // NOTE: selectorText can appear in two different forms when styles and IDs
          // are both present. IE places the styles before the IDs, so we match both forms:
          var changedChildRules = 0;
          var maxChangedRules = 8;
          var scale = scaleFactors[curScaleIndex];
          for (var k = 0; k < childRules.length && changedChildRules < maxChangedRules; k++) {
            if (childRules[k].selectorText === "div#visualization.responsive" || childRules[k].selectorText === "div.responsive#visualization") {
              // For this scale factor...
              // set the max-height and max-width for the visualization
              childRules[k].style.cssText = "max-height: " + Applab.footerlessAppHeight * scale + "px; max-width: " + Applab.appWidth * scale + "px;";
              changedChildRules++;
            } else if (childRules[k].selectorText === "div#visualizationColumn.responsive" || childRules[k].selectorText === "div.responsive#visualizationColumn") {
              // set the max-width for the parent visualizationColumn
              childRules[k].style.cssText = "max-width: " + Applab.appWidth * scale + "px;";
              changedChildRules++;
            } else if (childRules[k].selectorText === "div#visualizationColumn.responsive.with_padding" || childRules[k].selectorText === "div.with_padding.responsive#visualizationColumn") {
              // set the max-width for the parent visualizationColumn (with_padding)
              childRules[k].style.cssText = "max-width: " + (Applab.appWidth * scale + 2) + "px;";
              changedChildRules++;
            } else if (childRules[k].selectorText === "div#codeWorkspace") {
              // set the left for the codeWorkspace
              childRules[k].style.cssText = "left: " + Applab.appWidth * scale + "px;";
              changedChildRules++;
            } else if (childRules[k].selectorText === "div#visualizationResizeBar") {
              // set the left for the visualizationResizeBar
              childRules[k].style.cssText = "left: " + Applab.appWidth * scale + "px; line-height: " + Applab.footerlessAppHeight * scale + "px;";
              changedChildRules++;
            } else if (childRules[k].selectorText === "html[dir='rtl'] div#codeWorkspace") {
              // set the right for the codeWorkspace (RTL mode)
              childRules[k].style.cssText = "right: " + Applab.appWidth * scale + "px;";
              changedChildRules++;
            } else if (childRules[k].selectorText === "html[dir='rtl'] div#visualizationResizeBar") {
              // set the right for the visualizationResizeBar (RTL mode)
              childRules[k].style.cssText = "right: " + Applab.appWidth * scale + "px;";
              changedChildRules++;
            } else if (childRules[k].selectorText === "div#visualization.responsive > *" || childRules[k].selectorText === "div.responsive#visualization > *") {
              // and set the scale factor for all children of the visualization
              // (importantly, the divApplab and designModeViz elements)
              childRules[k].style.cssText = "-webkit-transform: scale(" + scale + ");-ms-transform: scale(" + scale + ");transform: scale(" + scale + ");";
              changedChildRules++;
            }
          }
          if (changedChildRules) {
            curScaleIndex++;
            changedRules++;
          }
        }
      }
      // After processing the applab.css, stop looking for stylesheets:
      break;
    }
  }
}

var drawDiv = function drawDiv() {
  ['divApplab', 'visualizationOverlay', 'designModeViz'].forEach(function (divId) {
    var div = document.getElementById(divId);
    div.style.width = Applab.appWidth + "px";
    div.style.height = Applab.footerlessAppHeight + "px";
  });

  if (shouldRenderFooter()) {
    renderFooterInSharedGame();
  }
};

function shouldRenderFooter() {
  return studioApp.share;
}

function renderFooterInSharedGame() {
  var divApplab = document.getElementById('divApplab');
  var footerDiv = document.createElement('div');
  footerDiv.setAttribute('id', 'footerDiv');
  divApplab.parentNode.insertBefore(footerDiv, divApplab.nextSibling);

  var menuItems = [{
    text: applabMsg.reportAbuse(),
    link: '/report_abuse',
    newWindow: true
  }, {
    text: applabMsg.makeMyOwnApp(),
    link: '/projects/applab/new',
    hideOnMobile: true
  }, {
    text: commonMsg.openWorkspace(),
    link: location.href + '/view'
  }, {
    text: applabMsg.copyright(),
    link: '#',
    copyright: true
  }, {
    text: applabMsg.privacyPolicy(),
    link: 'https://code.org/privacy',
    newWindow: true
  }];
  if (dom.isMobile()) {
    menuItems = menuItems.filter(function (item) {
      return !item.hideOnMobile;
    });
  }

  React.render(React.createElement(window.dashboard.SmallFooter, {
    i18nDropdown: '',
    copyrightInBase: false,
    copyrightStrings: copyrightStrings,
    baseMoreMenuString: applabMsg.builtOnCodeStudio(),
    rowHeight: FOOTER_HEIGHT,
    style: {
      fontSize: 18
    },
    baseStyle: {
      width: $("#divApplab").width(),
      paddingLeft: 0
    },
    className: 'dark',
    menuItems: menuItems,
    phoneFooter: true
  }), footerDiv);
}

/**
 * @param {string} code The code to search for Data Storage APIs
 * @return {boolean} True if the code uses any data storage APIs
 */
Applab.hasDataStoreAPIs = function (code) {
  return (/createRecord/.test(code) || /updateRecord/.test(code) || /setKeyValue/.test(code)
  );
};

/**
 * Set the current interpreter step speed as a value from 0 (stopped)
 * to 1 (full speed).
 * @param {!number} speed - range 0..1
 */
Applab.setStepSpeed = function (speed) {
  if (debuggerUi) {
    debuggerUi.setStepSpeed(speed);
  }
  Applab.scale.stepSpeed = JsDebuggerUi.stepDelayFromStepSpeed(speed);
};

function getCurrentTickLength() {
  var debugStepDelay;
  if (debuggerUi) {
    // debugStepDelay will be undefined if no speed slider is present
    debugStepDelay = debuggerUi.getStepDelay();
  }
  return debugStepDelay !== undefined ? debugStepDelay : Applab.scale.stepSpeed;
}

function queueOnTick() {
  window.setTimeout(Applab.onTick, getCurrentTickLength());
}

function handleExecutionError(err, lineNumber) {
  outputError(String(err), ErrorLevel.ERROR, lineNumber);
  Applab.executionError = { err: err, lineNumber: lineNumber };

  // complete puzzle, which will prevent further execution
  Applab.onPuzzleComplete();
}

Applab.getCode = function () {
  return studioApp.getCode();
};

Applab.getHtml = function () {
  // This method is called on autosave. If we're about to autosave, let's update
  // levelHtml to include our current state.
  if ($('#designModeViz').is(':visible')) {
    designMode.serializeToLevelHtml();
  }
  return Applab.levelHtml;
};

/**
 * Sets Applab.levelHtml as well as #designModeViz contents.
 * designModeViz is the source of truth for the app's HTML.
 * levelHtml can be lazily updated from designModeViz via serializeToLevelHtml.
 * @param html
 */
Applab.setLevelHtml = function (html) {
  if (html === '') {
    Applab.levelHtml = '';
  } else {
    Applab.levelHtml = designMode.addScreenIfNecessary(html);
  }
  var designModeViz = document.getElementById('designModeViz');
  designMode.parseFromLevelHtml(designModeViz, true, applabConstants.DESIGN_ELEMENT_ID_PREFIX);

  // Make sure at least one screen exists, and that the first
  // screen is visible.
  designMode.loadDefaultScreen();
  designMode.serializeToLevelHtml();
};

Applab.onTick = function () {
  if (!Applab.running) {
    return;
  }

  Applab.tickCount++;
  queueOnTick();

  if (Applab.JSInterpreter) {
    Applab.JSInterpreter.executeInterpreter(Applab.tickCount === 1);
  } else {
    Applab.executeNativeJS();
  }

  if (checkFinished()) {
    Applab.onPuzzleFinish();
  }
};

Applab.executeNativeJS = function () {
  if (Applab.tickCount === 1) {
    try {
      Applab.whenRunFunc(studioApp, apiBlockly, Applab.Globals);
    } catch (e) {}
  }
};

/**
 * Initialize Blockly and Applab for read-only (blocks feedback).
 * Called on iframe load for read-only.
 */
Applab.initReadonly = function (config) {
  // Do some minimal level loading so that
  // we can ensure that the blocks are appropriately modified for this level
  skin = config.skin;
  level = config.level;
  copyrightStrings = config.copyrightStrings;
  config.appMsg = applabMsg;
  loadLevel();

  // Applab.initMinimal();

  studioApp.initReadonly(config);
};

function hasSeenDataAlert(channelId) {
  var dataAlerts = localStorage.getItem('dataAlerts');
  if (!dataAlerts) {
    return false;
  }
  var channelIds = JSON.parse(dataAlerts);
  return channelIds.indexOf(channelId) !== -1;
}

function markSeenDataAlert(channelId) {
  var dataAlerts = localStorage.getItem('dataAlerts');
  if (!dataAlerts) {
    dataAlerts = '[]';
  }
  var channelIds = JSON.parse(dataAlerts);
  channelIds.push(channelId);
  localStorage.setItem('dataAlerts', JSON.stringify(channelIds));
}

/**
 * Starts the app after (potentially) Showing a modal warning about data sharing
 * (if appropriate) and determining user is old enough
 */
Applab.startSharedAppAfterWarnings = function () {
  // dashboard will redirect young signed in users
  var is13Plus = Applab.user.isSignedIn || localStorage.getItem('is13Plus') === "true";
  var showStoreDataAlert = Applab.hasDataStoreAPIs(Applab.getCode()) && !hasSeenDataAlert(Applab.channelId);

  var modal = document.createElement('div');
  document.body.appendChild(modal);
  return React.render(React.createElement(ShareWarningsDialog, {
    showStoreDataAlert: showStoreDataAlert,
    is13Plus: is13Plus,
    handleClose: function handleClose() {
      // we closed the dialog without hitting too_young
      // Only want to ask about age once across apps
      if (!Applab.user.isSignedIn) {
        utils.trySetLocalStorage('is13Plus', 'true');
      }
      // Only want to ask about storing data once per app.
      if (showStoreDataAlert) {
        markSeenDataAlert(Applab.channelId);
      }
      window.setTimeout(Applab.runButtonClick.bind(studioApp), 0);
    },
    handleTooYoung: function handleTooYoung() {
      utils.trySetLocalStorage('is13Plus', 'false');
      window.location.href = '/too_young';
    }
  }), modal);
};

/**
 * Initialize Blockly and the Applab app.  Called on page load.
 */
Applab.init = function (config) {
  // Gross, but necessary for tests, until we can instantiate AppLab and make
  // this a member variable: Reset this thing until we're ready to create it!
  jsInterpreterLogger = null;
  debuggerUi = null;

  // replace studioApp methods with our own
  studioApp.reset = this.reset.bind(this);
  studioApp.runButtonClick = this.runButtonClick.bind(this);

  Applab.channelId = config.channel;
  // inlcude channel id in any new relic actions we generate
  logToCloud.setCustomAttribute('channelId', Applab.channelId);

  config.usesAssets = true;

  Applab.clearEventHandlersKillTickLoop();
  skin = config.skin;
  skin.smallStaticAvatar = null;
  skin.staticAvatar = null;
  skin.winAvatar = null;
  skin.failureAvatar = null;
  level = config.level;
  copyrightStrings = config.copyrightStrings;
  Applab.user = {
    applabUserId: config.applabUserId,
    isAdmin: config.isAdmin === true,
    isSignedIn: config.isSignedIn
  };

  loadLevel();

  if (studioApp.hideSource) {
    // always run at max speed if source is hidden
    config.level.sliderSpeed = 1.0;
  }

  // If we are in mobile sharing mode, allow the viewport to handle scaling
  // and override our default width target in vizAppWidth with the actual width
  if (dom.isMobile() && config.hideSource) {
    vizAppWidth = Applab.appWidth;
  }

  adjustAppSizeStyles(document.getElementById(config.containerId));

  var showSlider = !config.hideSource && config.level.editCode;
  var showDebugButtons = !config.hideSource && config.level.editCode && !config.level.debuggerDisabled;
  var breakpointsEnabled = !config.level.debuggerDisabled;
  var showDebugConsole = !config.hideSource && config.level.editCode;
  var firstControlsRow = require('./controls.html.ejs')({
    assetUrl: studioApp.assetUrl,
    showSlider: showSlider,
    finishButton: !level.isProjectLevel && !level.submittable,
    submitButton: level.submittable && !level.submitted,
    unsubmitButton: level.submittable && level.submitted
  });
  var extraControlRows = '';

  // Construct a logging observer for interpreter events
  if (!config.hideSource) {
    jsInterpreterLogger = new JsInterpreterLogger(window.console);
  }

  if (showDebugButtons || showDebugConsole) {
    debuggerUi = new JsDebuggerUi(Applab.runButtonClick);
    extraControlRows = debuggerUi.getMarkup(studioApp.assetUrl, {
      showButtons: showDebugButtons,
      showConsole: showDebugConsole
    });
  }

  config.loadAudio = function () {
    studioApp.loadAudio(skin.failureSound, 'failure');
  };

  config.afterInject = function () {
    if (studioApp.isUsingBlockly()) {
      /**
       * The richness of block colours, regardless of the hue.
       * MOOC blocks should be brighter (target audience is younger).
       * Must be in the range of 0 (inclusive) to 1 (exclusive).
       * Blockly's default is 0.45.
       */
      Blockly.HSV_SATURATION = 0.6;

      Blockly.SNAP_RADIUS *= Applab.scale.snapRadius;
    }
    drawDiv();

    // Ignore the user's levelHtml for levels without design mode. levelHtml
    // should never be present on such levels, however some levels do
    // have levelHtml stored due to a previous bug. HTML set by levelbuilder
    // is stored in startHtml, not levelHtml.
    if (config.level.hideDesignMode) {
      config.level.levelHtml = '';
    }

    // Set designModeViz contents after it is created in configureDom()
    // and sized in drawDiv().
    Applab.setLevelHtml(level.levelHtml || level.startHtml || "");

    studioApp.alertIfAbusiveProject('#codeWorkspace');

    // IE9 doesnt support the way we handle responsiveness. Instead, explicitly
    // resize our visualization (user can still resize with grippy)
    if (!utils.browserSupportsCssMedia()) {
      studioApp.resizeVisualization(300);
    }

    if (studioApp.share) {
      Applab.startSharedAppAfterWarnings();
    }
  };

  config.afterEditorReady = function () {
    if (breakpointsEnabled) {
      studioApp.enableBreakpoints();
    }
  };

  config.afterClearPuzzle = function () {
    designMode.resetIds();
    Applab.setLevelHtml(config.level.startHtml || '');
    AppStorage.populateTable(level.dataTables, true); // overwrite = true
    AppStorage.populateKeyValue(level.dataProperties, true); // overwrite = true
    studioApp.resetButtonClick();
    annotationList.clearRuntimeAnnotations();
  };

  // arrangeStartBlocks(config);

  config.twitter = twitterOptions;

  // hide makeYourOwn on the share page
  config.makeYourOwn = false;

  config.varsInGlobals = true;

  config.dropletConfig = dropletConfig;

  config.pinWorkspaceToBottom = true;

  config.vizAspectRatio = Applab.appWidth / Applab.footerlessAppHeight;
  config.nativeVizWidth = Applab.appWidth;

  config.appMsg = applabMsg;

  // Since the app width may not be 400, set this value in the config to
  // ensure that the viewport is set up properly for scaling it up/down
  config.mobileNoPaddingShareWidth = config.level.appWidth;

  config.enableShowLinesCount = false;

  // In Applab, we want our embedded levels to look the same as regular levels,
  // just without the editor
  config.centerEmbedded = false;
  config.wireframeShare = true;

  // Applab.initMinimal();

  AppStorage.populateTable(level.dataTables, false); // overwrite = false
  AppStorage.populateKeyValue(level.dataProperties, false); // overwrite = false

  var renderCodeWorkspace = (function () {
    return codeWorkspaceEjs({
      assetUrl: studioApp.assetUrl,
      data: {
        localeDirection: studioApp.localeDirection(),
        extraControlRows: extraControlRows,
        blockUsed: undefined,
        idealBlockNumber: undefined,
        editCode: level.editCode,
        blockCounterClass: 'block-counter-default',
        pinWorkspaceToBottom: true,
        // TODO (brent) - seems a little gross that we've made this part of a
        // template shared across all apps
        // disable designMode if we're readonly
        hasDesignMode: !config.readonlyWorkspace,
        readonlyWorkspace: config.readonlyWorkspace
      }
    });
  }).bind(this);

  var renderVisualizationColumn = (function () {
    return visualizationColumnEjs({
      assetUrl: studioApp.assetUrl,
      data: {
        visualization: require('./visualization.html.ejs')({
          appWidth: Applab.appWidth,
          appHeight: Applab.footerlessAppHeight
        }),
        controls: firstControlsRow
      }
    });
  }).bind(this);

  var onMount = (function () {
    studioApp.init(config);

    var viz = document.getElementById('visualization');
    var vizCol = document.getElementById('visualizationColumn');

    if (!config.noPadding) {
      viz.className += " with_padding";
      vizCol.className += " with_padding";
    }

    if (config.embed || config.hideSource) {
      // no responsive styles active in embed or hideSource mode, so set sizes:
      viz.style.width = Applab.appWidth + 'px';
      viz.style.height = (shouldRenderFooter() ? Applab.appHeight : Applab.footerlessAppHeight) + 'px';
      // Use offsetWidth of viz so we can include any possible border width:
      vizCol.style.maxWidth = viz.offsetWidth + 'px';
    }

    if (debuggerUi) {
      debuggerUi.initializeAfterDomCreated({
        defaultStepSpeed: config.level.sliderSpeed
      });
    }

    window.addEventListener('resize', Applab.renderVisualizationOverlay);

    var finishButton = document.getElementById('finishButton');
    if (finishButton) {
      dom.addClickTouchEvent(finishButton, Applab.onPuzzleFinish);
    }

    var submitButton = document.getElementById('submitButton');
    if (submitButton) {
      dom.addClickTouchEvent(submitButton, Applab.onPuzzleSubmit);
    }

    var unsubmitButton = document.getElementById('unsubmitButton');
    if (unsubmitButton) {
      dom.addClickTouchEvent(unsubmitButton, Applab.onPuzzleUnsubmit);
    }

    if (level.editCode) {
      // Prevent the backspace key from navigating back. Make sure it's still
      // allowed on other elements.
      // Based on http://stackoverflow.com/a/2768256/2506748
      $(document).on('keydown', function (event) {
        var doPrevent = false;
        if (event.keyCode !== KeyCodes.BACKSPACE) {
          return;
        }
        var d = event.srcElement || event.target;
        if (d.tagName.toUpperCase() === 'INPUT' && (d.type.toUpperCase() === 'TEXT' || d.type.toUpperCase() === 'PASSWORD' || d.type.toUpperCase() === 'FILE' || d.type.toUpperCase() === 'EMAIL' || d.type.toUpperCase() === 'SEARCH' || d.type.toUpperCase() === 'NUMBER' || d.type.toUpperCase() === 'DATE') || d.tagName.toUpperCase() === 'TEXTAREA') {
          doPrevent = d.readOnly || d.disabled;
        } else {
          doPrevent = !d.isContentEditable;
        }

        if (doPrevent) {
          event.preventDefault();
        }
      });

      designMode.addKeyboardHandlers();

      designMode.renderDesignWorkspace();

      designMode.loadDefaultScreen();

      designMode.toggleDesignMode(Applab.startInDesignMode());

      designMode.configureDragAndDrop();

      var designModeViz = document.getElementById('designModeViz');
      designModeViz.addEventListener('click', designMode.onDesignModeVizClick);
    }
  }).bind(this);

  Applab.reactInitialProps_ = {
    assetUrl: studioApp.assetUrl,
    isDesignModeHidden: !!config.level.hideDesignMode,
    isEmbedView: !!config.embed,
    isReadOnlyView: !!config.readonlyWorkspace,
    isShareView: !!config.share,
    isViewDataButtonHidden: !!config.level.hideViewDataButton,
    renderCodeWorkspace: renderCodeWorkspace,
    renderVisualizationColumn: renderVisualizationColumn,
    onMount: onMount
  };

  Applab.reactMountPoint_ = document.getElementById(config.containerId);

  Applab.render();
};

/**
 * Cache of props, established during init, to use when re-rendering top-level
 * view.  Eventually, it would be best to replace these with a Redux store.
 * @type {Object}
 */
Applab.reactInitialProps_ = {};

/**
 * Element on which to mount the top-level React view.
 * @type {Element}
 * @private
 */
Applab.reactMountPoint_ = null;

/**
 * Trigger a top-level React render
 */
Applab.render = function () {
  var nextProps = $.extend({}, Applab.reactInitialProps_, {
    isEditingProject: window.dashboard && window.dashboard.project.isEditing(),
    startInDesignMode: Applab.startInDesignMode(),
    activeScreenId: designMode.getCurrentScreenId(),
    screenIds: designMode.getAllScreenIds(),
    onDesignModeButton: Applab.onDesignModeButton,
    onCodeModeButton: Applab.onCodeModeButton,
    onViewDataButton: Applab.onViewData,
    onScreenChange: designMode.changeScreen,
    onScreenCreate: designMode.createScreen
  });
  React.render(React.createElement(AppLabView, nextProps), Applab.reactMountPoint_);
};

/**
 * @param {string} newCode Code to append to the end of the editor
 */
Applab.appendToEditor = function (newCode) {
  var code = studioApp.editor.addEmptyLine(studioApp.editor.getValue()) + newCode;
  studioApp.editor.setValue(code);
};

Applab.scrollToEnd = function () {
  studioApp.editor.scrollCursorToEndOfDocument();
};

/**
 * Clear the event handlers and stop the onTick timer.
 */
Applab.clearEventHandlersKillTickLoop = function () {
  Applab.whenRunFunc = null;
  Applab.running = false;
  $('#headers').removeClass('dimmed');
  $('#codeWorkspace').removeClass('dimmed');
  Applab.tickCount = 0;
};

/**
 * @returns {boolean}
 */
Applab.isRunning = function () {
  // We are _always_ running in share mode.
  // TODO: (bbuchanan) Needs a better condition. Tracked in bug:
  //      https://www.pivotaltracker.com/story/show/105022102
  return !!($('#resetButton').is(':visible') || studioApp.share);
};

/**
 * Toggle whether divApplab or designModeViz is visible.
 * @param isVisible whether divApplab should be visible.
 */
Applab.toggleDivApplab = function (isVisible) {
  if (isVisible) {
    $('#divApplab').show();
    $('#designModeViz').hide();
  } else {
    $('#divApplab').hide();
    $('#designModeViz').show();
  }
};

/**
 * Reset the app to the start position and kill any pending animation tasks.
 * @param {boolean} first True if an opening animation is to be played.
 */
Applab.reset = function (first) {
  var i;
  Applab.clearEventHandlersKillTickLoop();

  // Soft buttons
  var softButtonCount = 0;
  for (i = 0; i < Applab.softButtons_.length; i++) {
    document.getElementById(Applab.softButtons_[i]).style.display = 'inline';
    softButtonCount++;
  }
  if (softButtonCount) {
    var softButtonsCell = document.getElementById('soft-buttons');
    softButtonsCell.className = 'soft-buttons-' + softButtonCount;
  }

  // Reset configurable variables
  delete Applab.activeCanvas;
  Applab.turtle = {};
  Applab.turtle.heading = 0;
  Applab.turtle.x = Applab.appWidth / 2;
  Applab.turtle.y = Applab.appHeight / 2;
  apiTimeoutList.clearTimeouts();
  apiTimeoutList.clearIntervals();

  var divApplab = document.getElementById('divApplab');
  while (divApplab.firstChild) {
    divApplab.removeChild(divApplab.firstChild);
  }

  // Clone and replace divApplab (this removes all attached event listeners):
  var newDivApplab = divApplab.cloneNode(true);
  divApplab.parentNode.replaceChild(newDivApplab, divApplab);

  $('#divApplab').toggleClass('running', Applab.isRunning());
  $('#divApplab').toggleClass('notRunning', !Applab.isRunning());

  var isDesigning = Applab.isInDesignMode() && !Applab.isRunning();
  Applab.toggleDivApplab(!isDesigning);
  designMode.parseFromLevelHtml(newDivApplab, false);
  if (Applab.isInDesignMode()) {
    designMode.resetElementTray(isDesigning);
    designMode.resetPropertyTab();
  }

  if (level.showTurtleBeforeRun) {
    applabTurtle.turtleSetVisibility(true);
  }

  Applab.renderVisualizationOverlay();

  // Reset goal successState:
  if (level.goal) {
    level.goal.successState = {};
  }

  if (debuggerUi) {
    debuggerUi.detach();
  }

  if (jsInterpreterLogger) {
    jsInterpreterLogger.detach();
  }

  AppStorage.resetRecordListener();

  // Reset the Globals object used to contain program variables:
  Applab.Globals = {};
  Applab.executionError = null;
  if (Applab.JSInterpreter) {
    Applab.JSInterpreter.deinitialize();
    Applab.JSInterpreter = null;
  }
};

/**
 * Manually re-render visualization SVG overlay.
 * Should call whenever its state/props would change.
 */
Applab.renderVisualizationOverlay = function () {
  var divApplab = document.getElementById('divApplab');
  var designModeViz = document.getElementById('designModeViz');
  var visualizationOverlay = document.getElementById('visualizationOverlay');
  if (!divApplab || !designModeViz || !visualizationOverlay) {
    return;
  }

  // Enable crosshair cursor for divApplab and designModeViz
  $(divApplab).toggleClass('withCrosshair', !Applab.isRunning());
  $(designModeViz).toggleClass('withCrosshair', true);

  if (!Applab.visualizationOverlay_) {
    Applab.visualizationOverlay_ = new VisualizationOverlay();
  }

  // Calculate current visualization scale to pass to the overlay component.
  var unscaledWidth = parseInt(visualizationOverlay.getAttribute('width'));
  var scaledWidth = visualizationOverlay.getBoundingClientRect().width;

  Applab.visualizationOverlay_.render(visualizationOverlay, {
    isApplabRunning: Applab.isRunning(),
    scale: scaledWidth / unscaledWidth
  });
};

/**
 * Save the app state and trigger any callouts, then call the callback.
 * @param callback {Function}
 */
studioApp.runButtonClickWrapper = function (callback) {
  $(window).trigger('run_button_pressed');
  Applab.serializeAndSave(callback);
};

/**
 * We also want to serialize in save in some other cases (i.e. entering code
 * mode from design mode).
 */
Applab.serializeAndSave = function (callback) {
  designMode.serializeToLevelHtml();
  $(window).trigger('appModeChanged');
  if (callback) {
    callback();
  }
};

/**
 * Click the run button.  Start the program.
 */
// XXX This is the only method used by the templates!
Applab.runButtonClick = function () {
  var runButton = document.getElementById('runButton');
  var resetButton = document.getElementById('resetButton');
  // Ensure that Reset button is at least as wide as Run button.
  if (!resetButton.style.minWidth) {
    resetButton.style.minWidth = runButton.offsetWidth + 'px';
  }
  studioApp.toggleRunReset('reset');
  if (studioApp.isUsingBlockly()) {
    Blockly.mainBlockSpace.traceOn(true);
  }
  Applab.execute();

  // Re-render overlay to update cursor rules.
  Applab.renderVisualizationOverlay();

  // Enable the Finish button if is present:
  var shareCell = document.getElementById('share-cell');
  if (shareCell) {
    shareCell.className = 'share-cell-enabled';
  }
};

/**
 * App specific displayFeedback function that calls into
 * studioApp.displayFeedback when appropriate
 */
var displayFeedback = function displayFeedback() {
  if (!Applab.waitingForReport) {
    studioApp.displayFeedback({
      app: 'applab', //XXX
      skin: skin.id,
      feedbackType: Applab.testResults,
      executionError: Applab.executionError,
      response: Applab.response,
      level: level,
      showingSharing: level.freePlay,
      tryAgainText: applabMsg.tryAgainText(),
      feedbackImage: Applab.feedbackImage,
      twitter: twitterOptions,
      // allow users to save freeplay levels to their gallery (impressive non-freeplay levels are autosaved)
      saveToGalleryUrl: level.freePlay && Applab.response && Applab.response.save_to_gallery_url,
      appStrings: {
        reinfFeedbackMsg: applabMsg.reinfFeedbackMsg(),
        sharingText: applabMsg.shareGame()
      }
    });
  }
};

Applab.onSubmitComplete = function (response) {
  window.location.href = response.redirect;
};

/**
 * Function to be called when the service report call is complete
 * @param {object} JSON response (if available)
 */
Applab.onReportComplete = function (response) {
  Applab.response = response;
  Applab.waitingForReport = false;
  studioApp.onReportComplete(response);
  displayFeedback();
};

//
// Generates code with user-generated function definitions and evals that code
// so these can be called from event handlers. This should be called for each
// block type that defines functions.
//

var defineProcedures = function defineProcedures(blockType) {
  var code = Blockly.Generator.blockSpaceToCode('JavaScript', blockType);
  // TODO: handle editCode JS interpreter
  try {
    codegen.evalWith(code, {
      studioApp: studioApp,
      Applab: apiBlockly,
      Globals: Applab.Globals });
  } catch (e) {}
};

/**
 * Execute the app
 */
Applab.execute = function () {
  Applab.result = ResultType.UNSET;
  Applab.testResults = TestResults.NO_TESTS_RUN;
  Applab.waitingForReport = false;
  Applab.response = null;
  var i;

  studioApp.reset(false);
  studioApp.attempts++;

  // Set event handlers and start the onTick timer

  var codeWhenRun;
  if (level.editCode) {
    codeWhenRun = studioApp.getCode();
    if (!studioApp.hideSource) {
      // Our ace worker also calls attachToSession, but it won't run on IE9:
      var session = studioApp.editor.aceEditor.getSession();
      annotationList.attachToSession(session, studioApp.editor);
      annotationList.clearRuntimeAnnotations();
      studioApp.editor.aceEditor.session.on("change", function () {
        // clear any runtime annotations whenever a change is made
        annotationList.clearRuntimeAnnotations();
      });
    }
  } else {
    // Define any top-level procedures the user may have created
    // (must be after reset(), which resets the Applab.Globals namespace)
    defineProcedures('procedures_defreturn');
    defineProcedures('procedures_defnoreturn');

    var blocks = Blockly.mainBlockSpace.getTopBlocks();
    for (var x = 0; blocks[x]; x++) {
      var block = blocks[x];
      if (block.type === 'when_run') {
        codeWhenRun = Blockly.Generator.blocksToCode('JavaScript', [block]);
        break;
      }
    }
  }
  if (codeWhenRun) {
    if (level.editCode) {
      // Create a new interpreter for this run
      Applab.JSInterpreter = new JSInterpreter({
        studioApp: studioApp,
        shouldRunAtMaxSpeed: function shouldRunAtMaxSpeed() {
          return getCurrentTickLength() === 0;
        },
        maxInterpreterStepsPerTick: MAX_INTERPRETER_STEPS_PER_TICK
      });

      // Register to handle interpreter events
      Applab.JSInterpreter.onExecutionError.register(handleExecutionError);
      if (jsInterpreterLogger) {
        jsInterpreterLogger.attachTo(Applab.JSInterpreter);
      }
      if (debuggerUi) {
        debuggerUi.attachTo(Applab.JSInterpreter);
      }

      // Initialize the interpreter and parse the student code
      Applab.JSInterpreter.parse({
        code: codeWhenRun,
        blocks: dropletConfig.blocks,
        blockFilter: level.executePaletteApisOnly && level.codeFunctions,
        enableEvents: true
      });
      if (!Applab.JSInterpreter.initialized()) {
        return;
      }
    } else {
      Applab.whenRunFunc = codegen.functionFromCode(codeWhenRun, {
        StudioApp: studioApp,
        Applab: apiBlockly,
        Globals: Applab.Globals
      });
    }
  }

  // Set focus on the default screen so key events can be handled
  // right from the start without requiring the user to adjust focus.
  Applab.loadDefaultScreen();

  Applab.running = true;
  $('#headers').addClass('dimmed');
  $('#codeWorkspace').addClass('dimmed');
  designMode.renderDesignWorkspace();
  queueOnTick();
};

Applab.feedbackImage = '';
Applab.encodedFeedbackImage = '';

Applab.onViewData = function () {
  window.open('//' + utils.getPegasusHost() + '/v3/edit-csp-app/' + Applab.channelId, '_blank');
};

Applab.onDesignModeButton = function () {
  designMode.toggleDesignMode(true);
  studioApp.resetButtonClick();
};

Applab.onCodeModeButton = function () {
  designMode.toggleDesignMode(false);
  utils.fireResizeEvent();
  if (!Applab.isRunning()) {
    Applab.serializeAndSave();
    var divApplab = document.getElementById('divApplab');
    designMode.parseFromLevelHtml(divApplab, false);
    Applab.changeScreen(designMode.getCurrentScreenId());
  } else {
    Applab.activeScreen().focus();
  }
};

/**
 * Show a modal dialog with a title, text, and OK and Cancel buttons
 * @param {title}
 * @param {text}
 * @param {callback} [onConfirm] what to do when the user clicks OK
 * @param {string} [filterSelector] Optional selector to filter for.
 */

Applab.showConfirmationDialog = function (config) {
  config.text = config.text || "";
  config.title = config.title || "";

  var contentDiv = document.createElement('div');
  contentDiv.innerHTML = '<p class="dialog-title">' + config.title + '</p>' + '<p>' + config.text + '</p>';

  var buttons = document.createElement('div');
  buttons.innerHTML = require('../templates/buttons.html.ejs')({
    data: {
      confirmText: commonMsg.dialogOK(),
      cancelText: commonMsg.dialogCancel()
    }
  });
  contentDiv.appendChild(buttons);

  var dialog = studioApp.createModalDialog({
    Dialog: Dialog,
    contentDiv: contentDiv,
    defaultBtnSelector: '#confirm-button'
  });

  var cancelButton = buttons.querySelector('#again-button');
  if (cancelButton) {
    dom.addClickTouchEvent(cancelButton, function () {
      dialog.hide();
    });
  }

  var confirmButton = buttons.querySelector('#confirm-button');
  if (confirmButton) {
    dom.addClickTouchEvent(confirmButton, function () {
      if (config.onConfirm) {
        config.onConfirm();
      }
      dialog.hide();
    });
  }

  dialog.show();
};

Applab.onPuzzleSubmit = function () {
  Applab.showConfirmationDialog({
    title: commonMsg.submitYourProject(),
    text: commonMsg.submitYourProjectConfirm(),
    onConfirm: function onConfirm() {
      Applab.onPuzzleComplete(true);
    }
  });
};

Applab.unsubmit = function () {
  $.post(level.unsubmitUrl, { "_method": 'PUT', user_level: { submitted: false } }, function (data) {
    location.reload();
  });
};

Applab.onPuzzleUnsubmit = function () {
  Applab.showConfirmationDialog({
    title: commonMsg.unsubmitYourProject(),
    text: commonMsg.unsubmitYourProjectConfirm(),
    onConfirm: function onConfirm() {
      Applab.unsubmit();
    }
  });
};

Applab.onPuzzleFinish = function () {
  Applab.onPuzzleComplete(false); // complete without submitting
};

Applab.onPuzzleComplete = function (submit) {
  if (Applab.executionError) {
    Applab.result = ResultType.ERROR;
  } else {
    // In most cases, submit all results as success
    Applab.result = ResultType.SUCCESS;
  }

  // If we know they succeeded, mark levelComplete true
  var levelComplete = Applab.result === ResultType.SUCCESS;

  if (Applab.executionError) {
    Applab.testResults = studioApp.getTestResults(levelComplete, {
      executionError: Applab.executionError
    });
  } else if (!submit) {
    Applab.testResults = TestResults.FREE_PLAY;
  }

  // Stop everything on screen
  Applab.clearEventHandlersKillTickLoop();

  if (Applab.testResults >= TestResults.FREE_PLAY) {
    studioApp.playAudio('win');
  } else {
    studioApp.playAudio('failure');
  }

  var program;

  if (level.editCode) {
    // If we want to "normalize" the JavaScript to avoid proliferation of nearly
    // identical versions of the code on the service, we could do either of these:

    // do an acorn.parse and then use escodegen to generate back a "clean" version
    // or minify (uglifyjs) and that or js-beautify to restore a "clean" version

    program = studioApp.getCode();
  } else {
    var xml = Blockly.Xml.blockSpaceToDom(Blockly.mainBlockSpace);
    program = Blockly.Xml.domToText(xml);
  }

  Applab.waitingForReport = true;

  var sendReport = function sendReport() {
    studioApp.report({
      app: 'applab',
      level: level.id,
      result: levelComplete,
      testResult: Applab.testResults,
      submitted: submit,
      program: encodeURIComponent(program),
      image: Applab.encodedFeedbackImage,
      onComplete: submit ? Applab.onSubmitComplete : Applab.onReportComplete
    });
  };

  var divApplab = document.getElementById('divApplab');
  if (!divApplab || typeof divApplab.toDataURL === 'undefined') {
    // don't try it if function is not defined
    sendReport();
  } else {
    divApplab.toDataURL("image/png", {
      callback: function callback(pngDataUrl) {
        Applab.feedbackImage = pngDataUrl;
        Applab.encodedFeedbackImage = encodeURIComponent(Applab.feedbackImage.split(',')[1]);

        sendReport();
      }
    });
  }
};

Applab.executeCmd = function (id, name, opts) {
  var cmd = {
    'id': id,
    'name': name,
    'opts': opts
  };
  return Applab.callCmd(cmd);
};

//
// Execute an API command
//

Applab.callCmd = function (cmd) {
  var retVal = false;
  if (applabCommands[cmd.name] instanceof Function) {
    studioApp.highlight(cmd.id);
    retVal = applabCommands[cmd.name](cmd.opts);
  }
  return retVal;
};

/*
var onWaitComplete = function (opts) {
  if (!opts.complete) {
    if (opts.waitCallback) {
      opts.waitCallback();
    }
    opts.complete = true;
  }
};

Studio.wait = function (opts) {
  if (!opts.started) {
    opts.started = true;

    // opts.value is the number of milliseconds to wait - or 'click' which means
    // "wait for click"
    if ('click' === opts.value) {
      opts.waitForClick = true;
    } else {
      opts.waitTimeout = window.setTimeout(
        delegate(this, onWaitComplete, opts),
        opts.value);
    }
  }

  return opts.complete;
};
*/

Applab.timedOut = function () {
  return Applab.tickCount > Applab.timeoutFailureTick;
};

var checkFinished = function checkFinished() {
  // if we have a succcess condition and have accomplished it, we're done and successful
  if (level.goal && level.goal.successCondition && level.goal.successCondition()) {
    Applab.result = ResultType.SUCCESS;
    return true;
  }

  // if we have a failure condition, and it's been reached, we're done and failed
  if (level.goal && level.goal.failureCondition && level.goal.failureCondition()) {
    Applab.result = ResultType.FAILURE;
    return true;
  }

  /*
  if (Applab.allGoalsVisited()) {
    Applab.result = ResultType.SUCCESS;
    return true;
  }
  */

  if (Applab.timedOut()) {
    Applab.result = ResultType.FAILURE;
    return true;
  }

  return false;
};

Applab.startInDesignMode = function () {
  return !!level.designModeAtStart;
};

Applab.isInDesignMode = function () {
  return $('#designWorkspace').is(':visible');
};

function quote(str) {
  return '"' + str + '"';
}

/**
 * Return droplet dropdown options representing a list of ids currently present
 * in the DOM, optionally limiting the result to a certain HTML element tagName.
 * @param {string} [filterSelector] Optional selector to filter for.
 * @returns {Array}
 */
Applab.getIdDropdown = function (filterSelector) {
  return Applab.getIdDropdownFromDom_($(document), filterSelector);
};

/**
 * Internal helper for getIdDropdown, which takes a documentRoot
 * argument to remove its global dependency and make it testable.
 * @param {jQuery} documentRoot
 * @param {string} filterSelector
 * @returns {Array}
 * @private
 */
Applab.getIdDropdownFromDom_ = function (documentRoot, filterSelector) {
  var elements = documentRoot.find('#designModeViz [id^="' + applabConstants.DESIGN_ELEMENT_ID_PREFIX + '"]');

  // Return all elements when no filter is given
  if (filterSelector) {
    elements = elements.filter(filterSelector);
  }

  return elements.sort(byId).map(function (_, element) {
    var id = quote(elementUtils.getId(element));
    return { text: id, display: id };
  }).get();
};

function byId(a, b) {
  return a.id > b.id ? 1 : -1;
}

/**
 * Returns a list of IDs currently present in the DOM of the current screen,
 * including the screen, sorted by z-index.
 */
Applab.getIdDropdownForCurrentScreen = function () {
  return Applab.getIdDropdownForCurrentScreenFromDom_($('#designModeViz'));
};

/**
 * Internal helper for getIdDropdownForCurrentScreen.
 * @private
 */
Applab.getIdDropdownForCurrentScreenFromDom_ = function (documentRoot) {
  var screen = documentRoot.find('.screen').filter(function () {
    return this.style.display !== 'none';
  }).first();

  var elements = screen.find('[id^="' + applabConstants.DESIGN_ELEMENT_ID_PREFIX + '"]').add(screen);

  return elements.map(function (_, element) {
    return elementUtils.getId(element);
  }).get();
};

/**
 * @returns {HTMLElement} The first "screen" that isn't hidden.
 */
Applab.activeScreen = function () {
  return Applab.getScreens().filter(function () {
    return this.style.display !== 'none';
  }).first()[0];
};

/**
 * Changes the active screen by toggling all screens in divApplab to be non-visible,
 * unless they match the provided screenId. Also focuses the screen.
 */
Applab.changeScreen = function (screenId) {
  Applab.getScreens().each(function () {
    $(this).toggle(this.id === screenId);
    if (this.id === screenId) {
      // Allow the active screen to receive keyboard events.
      this.focus();
    }
  });
};

Applab.loadDefaultScreen = function () {
  var defaultScreenId = Applab.getScreens().first().attr('id');
  Applab.changeScreen(defaultScreenId);
};

Applab.getScreens = function () {
  return $('#divApplab > .screen');
};

// Wrap design mode function so that we can call from commands
Applab.updateProperty = function (element, property, value) {
  return designMode.updateProperty(element, property, value);
};

},{"../JSInterpreter":"/home/ubuntu/staging/apps/build/js/JSInterpreter.js","../JsDebuggerUi":"/home/ubuntu/staging/apps/build/js/JsDebuggerUi.js","../JsInterpreterLogger":"/home/ubuntu/staging/apps/build/js/JsInterpreterLogger.js","../StudioApp":"/home/ubuntu/staging/apps/build/js/StudioApp.js","../acemode/annotationList":"/home/ubuntu/staging/apps/build/js/acemode/annotationList.js","../codegen":"/home/ubuntu/staging/apps/build/js/codegen.js","../constants":"/home/ubuntu/staging/apps/build/js/constants.js","../dom":"/home/ubuntu/staging/apps/build/js/dom.js","../dropletUtils":"/home/ubuntu/staging/apps/build/js/dropletUtils.js","../locale":"/home/ubuntu/staging/apps/build/js/locale.js","../logToCloud":"/home/ubuntu/staging/apps/build/js/logToCloud.js","../skins":"/home/ubuntu/staging/apps/build/js/skins.js","../templates/ShareWarningsDialog.jsx":"/home/ubuntu/staging/apps/build/js/templates/ShareWarningsDialog.jsx","../templates/buttons.html.ejs":"/home/ubuntu/staging/apps/build/js/templates/buttons.html.ejs","../templates/codeWorkspace.html.ejs":"/home/ubuntu/staging/apps/build/js/templates/codeWorkspace.html.ejs","../templates/visualizationColumn.html.ejs":"/home/ubuntu/staging/apps/build/js/templates/visualizationColumn.html.ejs","../timeoutList":"/home/ubuntu/staging/apps/build/js/timeoutList.js","../utils":"/home/ubuntu/staging/apps/build/js/utils.js","../xml":"/home/ubuntu/staging/apps/build/js/xml.js","./AppLabView.jsx":"/home/ubuntu/staging/apps/build/js/applab/AppLabView.jsx","./VisualizationOverlay":"/home/ubuntu/staging/apps/build/js/applab/VisualizationOverlay.js","./api":"/home/ubuntu/staging/apps/build/js/applab/api.js","./apiBlockly":"/home/ubuntu/staging/apps/build/js/applab/apiBlockly.js","./appStorage":"/home/ubuntu/staging/apps/build/js/applab/appStorage.js","./applabTurtle":"/home/ubuntu/staging/apps/build/js/applab/applabTurtle.js","./blocks":"/home/ubuntu/staging/apps/build/js/applab/blocks.js","./commands":"/home/ubuntu/staging/apps/build/js/applab/commands.js","./constants":"/home/ubuntu/staging/apps/build/js/applab/constants.js","./controls.html.ejs":"/home/ubuntu/staging/apps/build/js/applab/controls.html.ejs","./designElements/elementUtils":"/home/ubuntu/staging/apps/build/js/applab/designElements/elementUtils.js","./designElements/library":"/home/ubuntu/staging/apps/build/js/applab/designElements/library.js","./designMode":"/home/ubuntu/staging/apps/build/js/applab/designMode.js","./dontMarshalApi":"/home/ubuntu/staging/apps/build/js/applab/dontMarshalApi.js","./dropletConfig":"/home/ubuntu/staging/apps/build/js/applab/dropletConfig.js","./errorHandler":"/home/ubuntu/staging/apps/build/js/applab/errorHandler.js","./locale":"/home/ubuntu/staging/apps/build/js/applab/locale.js","./visualization.html.ejs":"/home/ubuntu/staging/apps/build/js/applab/visualization.html.ejs"}],"/home/ubuntu/staging/apps/build/js/templates/ShareWarningsDialog.jsx":[function(require,module,exports){
'use strict';

var ShareWarnings = require('./ShareWarnings.jsx');

/**
 * Modal for our SharingWarnings.
 */
var SharingWarningsDialog = module.exports = React.createClass({
  displayName: 'exports',

  propTypes: {
    is13Plus: React.PropTypes.bool.isRequired,
    showStoreDataAlert: React.PropTypes.bool.isRequired,
    handleClose: React.PropTypes.func.isRequired,
    handleTooYoung: React.PropTypes.func.isRequired
  },

  getInitialState: function getInitialState() {
    return { modalIsOpen: !this.props.is13Plus || this.props.showStoreDataAlert };
  },

  componentDidMount: function componentDidMount() {
    // We didn't need to show our modal. Go through the close process so that
    // app becomes unblocked
    if (!this.state.modalIsOpen) {
      this.handleClose();
    }
  },

  handleClose: function handleClose() {
    this.setState({ modalIsOpen: false });
    this.props.handleClose();
  },

  render: function render() {
    if (!this.state.modalIsOpen) {
      return React.createElement('div', null);
    }

    var styles = {
      main: {
        position: 'absolute',
        top: 50,
        left: '50%',
        transform: 'translate(-50%, 0)',
        WebkitTransform: 'translate(-50%, 0)',
        border: '1px solid #ccc',
        background: '#fff',
        overflow: 'auto',
        WebkitOverflowScrolling: 'touch',
        borderRadius: '4px',
        outline: 'none',
        padding: '20px',
        zIndex: 1050, // based off of behavior in dashboard's dialog.js
        width: window.screen.width < 500 ? '80%' : undefined
      },
      overlay: {
        position: 'fixed',
        opacity: 0.8,
        backgroundColor: 'black',
        top: 0,
        left: 0,
        bottom: 0,
        right: 0,
        zIndex: 1040 // based off of behavior in dashboard's dialog.js
      }
    };

    return React.createElement(
      'div',
      null,
      React.createElement('div', { style: styles.overlay }),
      React.createElement(
        'div',
        { style: styles.main },
        React.createElement(ShareWarnings, {
          is13Plus: this.props.is13Plus,
          showStoreDataAlert: this.props.showStoreDataAlert,
          handleTooYoung: this.props.handleTooYoung,
          handleClose: this.handleClose })
      )
    );
  }
});

},{"./ShareWarnings.jsx":"/home/ubuntu/staging/apps/build/js/templates/ShareWarnings.jsx"}],"/home/ubuntu/staging/apps/build/js/templates/ShareWarnings.jsx":[function(require,module,exports){
'use strict';

var colors = require('../sharedJsxStyles').colors;
var AgeDropdown = require('./AgeDropdown.jsx');

var commonMsg = require('../locale');

/**
 * Dialog contents for when you visit a shared Applab page. If not signed in,
 * it will ask your age. If the app stores data, it will also alert you to
 * that.
 */
var SharingWarnings = module.exports = React.createClass({
  displayName: 'exports',

  propTypes: {
    is13Plus: React.PropTypes.bool.isRequired,
    showStoreDataAlert: React.PropTypes.bool.isRequired,
    handleClose: React.PropTypes.func.isRequired,
    handleTooYoung: React.PropTypes.func.isRequired
  },

  handleOk: function handleOk() {
    if (this.props.is13Plus) {
      this.props.handleClose();
      return;
    }

    var ageElement = React.findDOMNode(this.refs.age);
    if (ageElement.value === '') {
      // ignore close if we haven't selected a value from dropdown
      return;
    }

    var age = parseInt(ageElement.value, 10);
    if (age >= 13) {
      this.props.handleClose();
    } else {
      this.props.handleTooYoung();
    }
  },

  render: function render() {
    var styles = {
      dataMessage: {
        fontSize: 18,
        marginBottom: 30
      },
      ageMessage: {
        fontSize: 18,
        marginBottom: 10
      },
      ageDropdown: {},
      moreInfo: {
        marginLeft: 0
      },
      ok: {
        backgroundColor: colors.orange,
        border: '1px solid ' + colors.orange,
        color: colors.white,
        float: 'right'
      }
    };

    var i18n = {
      storeDataMsg: commonMsg.shareWarningsStoreData(),
      ageMsg: commonMsg.shareWarningsAge(),
      moreInfo: commonMsg.shareWarningsMoreInfo(),
      ok: commonMsg.dialogOK()
    };

    var dataPrompt, agePrompt;
    if (this.props.showStoreDataAlert) {
      dataPrompt = React.createElement(
        'div',
        { style: styles.dataMessage },
        i18n.storeDataMsg
      );
    }
    if (!this.props.is13Plus) {
      agePrompt = React.createElement(
        'div',
        null,
        React.createElement(
          'div',
          { style: styles.ageMessage },
          i18n.ageMsg
        ),
        React.createElement(AgeDropdown, { style: styles.ageDropdonw, ref: 'age' })
      );
    }

    return React.createElement(
      'div',
      null,
      dataPrompt,
      agePrompt,
      React.createElement(
        'div',
        null,
        React.createElement(
          'a',
          { style: styles.moreInfo, target: '_blank', href: 'https://code.org/privacy' },
          i18n.moreInfo
        ),
        React.createElement(
          'button',
          { style: styles.ok, onClick: this.handleOk },
          i18n.ok
        )
      )
    );
  }
});

},{"../locale":"/home/ubuntu/staging/apps/build/js/locale.js","../sharedJsxStyles":"/home/ubuntu/staging/apps/build/js/sharedJsxStyles.js","./AgeDropdown.jsx":"/home/ubuntu/staging/apps/build/js/templates/AgeDropdown.jsx"}],"/home/ubuntu/staging/apps/build/js/templates/AgeDropdown.jsx":[function(require,module,exports){
/**
 * A dropdown with the set of ages we use across our site (4-20, 21+)
 * NOTE: this is pretty similarly to a component in dashboard's
 * report_abuse_form.jsx. In an ideal world, we would have a better way of
 * sharing components between dashboard/apps and have any difference between
 * the two version controlled by props.
 */
'use strict';

module.exports = React.createClass({
  displayName: 'exports',

  propTypes: {
    style: React.PropTypes.object
  },

  render: function render() {
    var ages = ['', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21+'];

    return React.createElement(
      'select',
      { name: 'age', style: this.props.style },
      ages.map(function (age) {
        return React.createElement(
          'option',
          { key: age, value: age },
          age
        );
      })
    );
  }
});

},{}],"/home/ubuntu/staging/apps/build/js/applab/visualization.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('<div id="divApplab" class="appModern" tabindex="1">\n</div>\n<div id="designModeViz" class="appModern" style="display:none;">\n</div>\n<svg version="1.1"\n     baseProfile="full"\n     xmlns="http://www.w3.org/2000/svg"\n     id="visualizationOverlay"\n     width="', escape((9,  appWidth)), '"     height="', escape((9,  appHeight)), '"     viewBox="0 0 ', escape((9,  appWidth)), ' ', escape((9,  appHeight)), '"     pointer-events="none"></svg>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/applab/dropletConfig.js":[function(require,module,exports){
'use strict';

var api = require('./api');
var dontMarshalApi = require('./dontMarshalApi');
var consoleApi = require('./consoleApi');
var showAssetManager = require('../assetManagement/show.js');
var getAssetDropdown = require('../assetManagement/getAssetDropdown');
var ChartApi = require('./ChartApi');
var elementUtils = require('./designElements/elementUtils');
var setPropertyDropdown = require('./setPropertyDropdown').setPropertyDropdown;

var applabConstants = require('./constants');

var DEFAULT_WIDTH = "320";
var DEFAULT_HEIGHT = (480 - applabConstants.FOOTER_HEIGHT).toString();

// Flip the argument order so we can bind `typeFilter`.
function chooseAsset(typeFilter, callback) {
  showAssetManager(callback, typeFilter);
}

var COLOR_LIGHT_GREEN = '#D3E965';
var COLOR_BLUE = '#19C3E1';
var COLOR_RED = '#F78183';
var COLOR_CYAN = '#4DD0E1';
var COLOR_YELLOW = '#FFF176';

var stringMethodPrefix = '[string].';
var arrayMethodPrefix = '[list].';

var stringBlockPrefix = 'str.';

/**
 * Generate a list of screen ids for our setScreen dropdown
 */
function getScreenIds() {
  var ret = elementUtils.getScreens().map(function () {
    return '"' + elementUtils.getId(this) + '"';
  });

  // Convert from jQuery's array-like object to a true array
  return $.makeArray(ret);
}

/**
 * @param {string?} selector Filters to ids on elements that match selector, or
 *   all elements if undefined
 * @returns {function} Dropdown function that returns a list of ids for the selector
 */
function idDropdownWithSelector(selector) {
  return function () {
    return Applab.getIdDropdown(selector);
  };
}

// Basic dropdown that shows ids for all DOM elements in the applab app.
var ID_DROPDOWN_PARAM_0 = {
  0: idDropdownWithSelector()
};

// NOTE : format of blocks detailed at top of apps/src/dropletUtils.js

module.exports.blocks = [{ func: 'onEvent', parent: api, category: 'UI controls', paletteParams: ['id', 'type', 'callback'], params: ['"id"', '"click"', "function(event) {\n  \n}"], dropdown: { 0: idDropdownWithSelector(), 1: ['"click"', '"change"', '"keyup"', '"keydown"', '"keypress"', '"mousemove"', '"mousedown"', '"mouseup"', '"mouseover"', '"mouseout"', '"input"'] } }, { func: 'button', parent: api, category: 'UI controls', paletteParams: ['id', 'text'], params: ['"id"', '"text"'] }, { func: 'textInput', parent: api, category: 'UI controls', paletteParams: ['id', 'text'], params: ['"id"', '"text"'] }, { func: 'textLabel', parent: api, category: 'UI controls', paletteParams: ['id', 'text'], params: ['"id"', '"text"'] }, { func: 'dropdown', parent: api, category: 'UI controls', paletteParams: ['id', 'option1', 'etc'], params: ['"id"', '"option1"', '"etc"'] }, { func: 'getText', parent: api, category: 'UI controls', paletteParams: ['id'], params: ['"id"'], dropdown: ID_DROPDOWN_PARAM_0, type: 'value' }, { func: 'setText', parent: api, category: 'UI controls', paletteParams: ['id', 'text'], params: ['"id"', '"text"'], dropdown: ID_DROPDOWN_PARAM_0 }, { func: 'getNumber', parent: api, category: 'UI controls', paletteParams: ['id'], params: ['"id"'], dropdown: ID_DROPDOWN_PARAM_0, type: 'value' }, { func: 'setNumber', parent: api, category: 'UI controls', paletteParams: ['id', 'number'], params: ['"id"', '0'], dropdown: ID_DROPDOWN_PARAM_0 }, { func: 'checkbox', parent: api, category: 'UI controls', paletteParams: ['id', 'checked'], params: ['"id"', "false"], dropdown: { 1: ["true", "false"] } }, { func: 'radioButton', parent: api, category: 'UI controls', paletteParams: ['id', 'checked'], params: ['"id"', "false", '"group"'], dropdown: { 1: ["true", "false"] } }, { func: 'getChecked', parent: api, category: 'UI controls', paletteParams: ['id'], params: ['"id"'], type: 'value' }, { func: 'setChecked', parent: api, category: 'UI controls', paletteParams: ['id', 'checked'], params: ['"id"', "true"], dropdown: { 1: ["true", "false"] } }, { func: 'image', parent: api, category: 'UI controls', paletteParams: ['id', 'url'], params: ['"id"', '"https://code.org/images/logo.png"'], dropdown: { 1: function _() {
      return getAssetDropdown('image');
    } }, 'assetTooltip': { 1: chooseAsset.bind(null, 'image') } }, { func: 'getImageURL', parent: api, category: 'UI controls', paletteParams: ['id'], params: ['"id"'], dropdown: { 0: idDropdownWithSelector("img") }, type: 'value' }, { func: 'setImageURL', parent: api, category: 'UI controls', paletteParams: ['id', 'url'], params: ['"id"', '"https://code.org/images/logo.png"'], dropdown: { 0: idDropdownWithSelector("img"), 1: function _() {
      return getAssetDropdown('image');
    } }, 'assetTooltip': { 1: chooseAsset.bind(null, 'image') } }, { func: 'playSound', parent: api, category: 'UI controls', paletteParams: ['url'], params: ['"https://studio.code.org/blockly/media/example.mp3"'], dropdown: { 0: function _() {
      return getAssetDropdown('audio');
    } }, 'assetTooltip': { 0: chooseAsset.bind(null, 'audio') } }, { func: 'showElement', parent: api, category: 'UI controls', paletteParams: ['id'], params: ['"id"'], dropdown: ID_DROPDOWN_PARAM_0 }, { func: 'hideElement', parent: api, category: 'UI controls', paletteParams: ['id'], params: ['"id"'], dropdown: ID_DROPDOWN_PARAM_0 }, { func: 'deleteElement', parent: api, category: 'UI controls', paletteParams: ['id'], params: ['"id"'], dropdown: ID_DROPDOWN_PARAM_0 }, { func: 'setPosition', parent: api, category: 'UI controls', paletteParams: ['id', 'x', 'y', 'width', 'height'], params: ['"id"', "0", "0", "100", "100"], dropdown: ID_DROPDOWN_PARAM_0 }, { func: 'setSize', parent: api, category: 'UI controls', paletteParams: ['id', 'width', 'height'], params: ['"id"', "100", "100"], dropdown: ID_DROPDOWN_PARAM_0 }, { func: 'setProperty', parent: api, category: 'UI controls', paletteParams: ['id', 'property', 'value'], params: ['"id"', '"width"', "100"], dropdown: { 0: idDropdownWithSelector(), 1: setPropertyDropdown() } }, { func: 'write', parent: api, category: 'UI controls', paletteParams: ['text'], params: ['"text"'] }, { func: 'getXPosition', parent: api, category: 'UI controls', paletteParams: ['id'], params: ['"id"'], dropdown: ID_DROPDOWN_PARAM_0, type: 'value' }, { func: 'getYPosition', parent: api, category: 'UI controls', paletteParams: ['id'], params: ['"id"'], dropdown: ID_DROPDOWN_PARAM_0, type: 'value' }, { func: 'setScreen', parent: api, category: 'UI controls', paletteParams: ['screenId'], params: ['"screen1"'], dropdown: { 0: getScreenIds } }, { func: 'createCanvas', parent: api, category: 'Canvas', paletteParams: ['id', 'width', 'height'], params: ['"id"', DEFAULT_WIDTH, DEFAULT_HEIGHT] }, { func: 'setActiveCanvas', parent: api, category: 'Canvas', paletteParams: ['id'], params: ['"id"'], dropdown: { 0: idDropdownWithSelector("canvas") } }, { func: 'line', parent: api, category: 'Canvas', paletteParams: ['x1', 'y1', 'x2', 'y2'], params: ["0", "0", "160", "240"] }, { func: 'circle', parent: api, category: 'Canvas', paletteParams: ['x', 'y', 'radius'], params: ["160", "240", "100"] }, { func: 'rect', parent: api, category: 'Canvas', paletteParams: ['x', 'y', 'width', 'height'], params: ["80", "120", "160", "240"] }, { func: 'setStrokeWidth', parent: api, category: 'Canvas', paletteParams: ['width'], params: ["3"] }, { func: 'setStrokeColor', parent: api, category: 'Canvas', paletteParams: ['color'], params: ['"red"'], dropdown: { 0: ['"red"', '"rgb(255,0,0)"', '"rgba(255,0,0,0.5)"', '"#FF0000"'] } }, { func: 'setFillColor', parent: api, category: 'Canvas', paletteParams: ['color'], params: ['"yellow"'], dropdown: { 0: ['"yellow"', '"rgb(255,255,0)"', '"rgba(255,255,0,0.5)"', '"#FFFF00"'] } },
// drawImage has been deprecated in favor of drawImageURL
{ func: 'drawImage', parent: api, category: 'Canvas', paletteParams: ['id', 'x', 'y'], params: ['"id"', "0", "0"], dropdown: { 0: idDropdownWithSelector("img") }, noAutocomplete: true }, { func: 'drawImageURL', parent: api, category: 'Canvas', paletteParams: ['url'], params: ['"https://code.org/images/logo.png"'] }, { func: 'getImageData', parent: api, category: 'Canvas', paletteParams: ['x', 'y', 'width', 'height'], params: ["0", "0", DEFAULT_WIDTH, DEFAULT_HEIGHT], type: 'value' }, { func: 'putImageData', parent: api, category: 'Canvas', paletteParams: ['imgData', 'x', 'y'], params: ["imgData", "0", "0"] }, { func: 'clearCanvas', parent: api, category: 'Canvas' }, { func: 'getRed', parent: dontMarshalApi, category: 'Canvas', paletteParams: ['imgData', 'x', 'y'], params: ["imgData", "0", "0"], type: 'value', dontMarshal: true }, { func: 'getGreen', parent: dontMarshalApi, category: 'Canvas', paletteParams: ['imgData', 'x', 'y'], params: ["imgData", "0", "0"], type: 'value', dontMarshal: true }, { func: 'getBlue', parent: dontMarshalApi, category: 'Canvas', paletteParams: ['imgData', 'x', 'y'], params: ["imgData", "0", "0"], type: 'value', dontMarshal: true }, { func: 'getAlpha', parent: dontMarshalApi, category: 'Canvas', paletteParams: ['imgData', 'x', 'y'], params: ["imgData", "0", "0"], type: 'value', dontMarshal: true }, { func: 'setRed', parent: dontMarshalApi, category: 'Canvas', paletteParams: ['imgData', 'x', 'y', 'r'], params: ["imgData", "0", "0", "255"], dontMarshal: true }, { func: 'setGreen', parent: dontMarshalApi, category: 'Canvas', paletteParams: ['imgData', 'x', 'y', 'g'], params: ["imgData", "0", "0", "255"], dontMarshal: true }, { func: 'setBlue', parent: dontMarshalApi, category: 'Canvas', paletteParams: ['imgData', 'x', 'y', 'b'], params: ["imgData", "0", "0", "255"], dontMarshal: true }, { func: 'setAlpha', parent: dontMarshalApi, category: 'Canvas', paletteParams: ['imgData', 'x', 'y', 'a'], params: ["imgData", "0", "0", "255"], dontMarshal: true }, { func: 'setRGB', parent: dontMarshalApi, category: 'Canvas', paletteParams: ['imgData', 'x', 'y', 'r', 'g', 'b'], params: ["imgData", "0", "0", "255", "255", "255"], dontMarshal: true }, { func: 'startWebRequest', parent: api, category: 'Data', paletteParams: ['url', 'callback'], params: ['"http://api.openweathermap.org/data/2.5/weather?q=London,uk"', "function(status, type, content) {\n  \n}"] }, { func: 'setKeyValue', parent: api, category: 'Data', paletteParams: ['key', 'value', 'callback'], params: ['"key"', '"value"', "function () {\n  \n}"] }, { func: 'setKeyValueSync', parent: api, category: 'Data', paletteParams: ['key', 'value'], params: ['"key"', '"value"'], nativeIsAsync: true }, { func: 'getKeyValue', parent: api, category: 'Data', paletteParams: ['key', 'callback'], params: ['"key"', "function (value) {\n  \n}"] }, { func: 'getKeyValueSync', parent: api, category: 'Data', paletteParams: ['key'], params: ['"key"'], type: 'value', nativeIsAsync: true }, { func: 'createRecord', parent: api, category: 'Data', paletteParams: ['table', 'record', 'callback'], params: ['"mytable"', "{name:'Alice'}", "function(record) {\n  \n}"] }, { func: 'readRecords', parent: api, category: 'Data', paletteParams: ['table', 'terms', 'callback'], params: ['"mytable"', "{}", "function(records) {\n  for (var i =0; i < records.length; i++) {\n    textLabel('id', records[i].id + ': ' + records[i].name);\n  }\n}"] }, { func: 'updateRecord', parent: api, category: 'Data', paletteParams: ['table', 'record', 'callback'], params: ['"mytable"', "{id:1, name:'Bob'}", "function(record, success) {\n  \n}"] }, { func: 'deleteRecord', parent: api, category: 'Data', paletteParams: ['table', 'record', 'callback'], params: ['"mytable"', "{id:1}", "function(success) {\n  \n}"] }, { func: 'onRecordEvent', parent: api, category: 'Data', paletteParams: ['table', 'callback'], params: ['"mytable"', "function(record, eventType) {\n  if (eventType === 'create') {\n    textLabel('id', 'record with id ' + record.id + ' was created');\n  } \n}"] }, { func: 'getUserId', parent: api, category: 'Data', type: 'value' }, { func: 'drawChart', parent: api, category: 'Data', paletteParams: ['chartId', 'chartType', 'chartData'], params: ['"chartId"', '"bar"', '[\n\t{ label: "Row 1", value: 1 },\n\t{ label: "Row 2", value: 2 }\n]'], dropdown: { 0: idDropdownWithSelector(".chart"), 1: ChartApi.getChartTypeDropdown } }, { func: 'drawChartFromRecords', parent: api, category: 'Data', paletteParams: ['chartId', 'chartType', 'tableName', 'columns'], params: ['"chartId"', '"bar"', '"mytable"', '["columnOne", "columnTwo"]'], dropdown: { 0: idDropdownWithSelector(".chart"), 1: ChartApi.getChartTypeDropdown } }, { func: 'moveForward', parent: api, category: 'Turtle', paletteParams: ['pixels'], params: ["25"], dropdown: { 0: ["25", "50", "100", "200"] } }, { func: 'moveBackward', parent: api, category: 'Turtle', paletteParams: ['pixels'], params: ["25"], dropdown: { 0: ["25", "50", "100", "200"] } }, { func: 'move', parent: api, category: 'Turtle', paletteParams: ['x', 'y'], params: ["25", "25"], dropdown: { 0: ["25", "50", "100", "200"], 1: ["25", "50", "100", "200"] } }, { func: 'moveTo', parent: api, category: 'Turtle', paletteParams: ['x', 'y'], params: ["0", "0"] }, { func: 'dot', parent: api, category: 'Turtle', paletteParams: ['radius'], params: ["5"], dropdown: { 0: ["1", "5", "10"] } }, { func: 'turnRight', parent: api, category: 'Turtle', paletteParams: ['angle'], params: ["90"], dropdown: { 0: ["30", "45", "60", "90"] } }, { func: 'turnLeft', parent: api, category: 'Turtle', paletteParams: ['angle'], params: ["90"], dropdown: { 0: ["30", "45", "60", "90"] } }, { func: 'turnTo', parent: api, category: 'Turtle', paletteParams: ['angle'], params: ["0"], dropdown: { 0: ["0", "90", "180", "270"] } }, { func: 'arcRight', parent: api, category: 'Turtle', paletteParams: ['angle', 'radius'], params: ["90", "25"], dropdown: { 0: ["30", "45", "60", "90"], 1: ["25", "50", "100", "200"] } }, { func: 'arcLeft', parent: api, category: 'Turtle', paletteParams: ['angle', 'radius'], params: ["90", "25"], dropdown: { 0: ["30", "45", "60", "90"], 1: ["25", "50", "100", "200"] } }, { func: 'getX', parent: api, category: 'Turtle', type: 'value' }, { func: 'getY', parent: api, category: 'Turtle', type: 'value' }, { func: 'getDirection', parent: api, category: 'Turtle', type: 'value' }, { func: 'penUp', parent: api, category: 'Turtle' }, { func: 'penDown', parent: api, category: 'Turtle' }, { func: 'penWidth', parent: api, category: 'Turtle', paletteParams: ['width'], params: ["3"], dropdown: { 0: ["1", "3", "5"] } }, { func: 'penColor', parent: api, category: 'Turtle', paletteParams: ['color'], params: ['"red"'], dropdown: { 0: ['"red"', '"rgb(255,0,0)"', '"rgba(255,0,0,0.5)"', '"#FF0000"'] } }, { func: 'penRGB', parent: api, category: 'Turtle', paletteParams: ['r', 'g', 'b'], params: ["120", "180", "200"] }, { func: 'show', parent: api, category: 'Turtle' }, { func: 'hide', parent: api, category: 'Turtle' }, { func: 'speed', parent: api, category: 'Turtle', paletteParams: ['value'], params: ["50"], dropdown: { 0: ["25", "50", "75", "100"] } }, { func: 'setTimeout', parent: api, category: 'Control', type: 'either', paletteParams: ['callback', 'ms'], params: ["function() {\n  \n}", "1000"] }, { func: 'clearTimeout', parent: api, category: 'Control', paletteParams: ['__'], params: ["__"] }, { func: 'setInterval', parent: api, category: 'Control', type: 'either', paletteParams: ['callback', 'ms'], params: ["function() {\n  \n}", "1000"] }, { func: 'clearInterval', parent: api, category: 'Control', paletteParams: ['__'], params: ["__"] }, { func: 'console.log', parent: consoleApi, category: 'Variables', paletteParams: ['message'], params: ['"message"'] }, { func: 'declareAssign_str_hello_world', block: 'var str = "Hello World";', category: 'Variables', noAutocomplete: true }, { func: 'substring', blockPrefix: stringBlockPrefix, category: 'Variables', paletteParams: ['start', 'end'], params: ["6", "11"], modeOptionName: '*.substring', tipPrefix: stringMethodPrefix, type: 'value' }, { func: 'indexOf', blockPrefix: stringBlockPrefix, category: 'Variables', paletteParams: ['searchValue'], params: ['"World"'], modeOptionName: '*.indexOf', tipPrefix: stringMethodPrefix, type: 'value' }, { func: 'includes', blockPrefix: stringBlockPrefix, category: 'Variables', paletteParams: ['searchValue'], params: ['"World"'], modeOptionName: '*.includes', tipPrefix: stringMethodPrefix, type: 'value' }, { func: 'length', block: 'str.length', category: 'Variables', modeOptionName: '*.length', tipPrefix: stringMethodPrefix, type: 'property' }, { func: 'toUpperCase', blockPrefix: stringBlockPrefix, category: 'Variables', modeOptionName: '*.toUpperCase', tipPrefix: stringMethodPrefix, type: 'value' }, { func: 'toLowerCase', blockPrefix: stringBlockPrefix, category: 'Variables', modeOptionName: '*.toLowerCase', tipPrefix: stringMethodPrefix, type: 'value' }, { func: 'declareAssign_list_abd', block: 'var list = ["a", "b", "d"];', category: 'Variables', noAutocomplete: true }, { func: 'listLength', block: 'list.length', category: 'Variables', noAutocomplete: true, tipPrefix: arrayMethodPrefix, type: 'property' }, { func: 'insertItem', parent: dontMarshalApi, category: 'Variables', paletteParams: ['list', 'index', 'item'], params: ["list", "2", '"c"'], dontMarshal: true }, { func: 'appendItem', parent: dontMarshalApi, category: 'Variables', paletteParams: ['list', 'item'], params: ["list", '"f"'], dontMarshal: true }, { func: 'removeItem', parent: dontMarshalApi, category: 'Variables', paletteParams: ['list', 'index'], params: ["list", "0"], dontMarshal: true }, { func: 'imageUploadButton', parent: api, category: 'Advanced', params: ['"id"', '"text"'] }, { func: 'container', parent: api, category: 'Advanced', params: ['"id"', '"html"'] }, { func: 'innerHTML', parent: api, category: 'Advanced', params: ['"id"', '"html"'] }, { func: 'setParent', parent: api, category: 'Advanced', params: ['"id"', '"parentId"'] }, { func: 'setStyle', parent: api, category: 'Advanced', params: ['"id"', '"color:red;"'] }, { func: 'getAttribute', parent: api, category: 'Advanced', params: ['"id"', '"scrollHeight"'], type: 'value' }, { func: 'setAttribute', parent: api, category: 'Advanced', params: ['"id"', '"scrollHeight"', "200"] }];

module.exports.categories = {
  'UI controls': {
    color: 'yellow',
    rgb: COLOR_YELLOW,
    blocks: []
  },
  Canvas: {
    color: 'red',
    rgb: COLOR_RED,
    blocks: []
  },
  Data: {
    color: 'lightgreen',
    rgb: COLOR_LIGHT_GREEN,
    blocks: []
  },
  Turtle: {
    color: 'cyan',
    rgb: COLOR_CYAN,
    blocks: []
  },
  Advanced: {
    color: 'blue',
    rgb: COLOR_BLUE,
    blocks: []
  }
};

/*
 * Set the showExamplesLink config value so that the droplet tooltips will show
 * an 'Examples' link that opens documentation in a lightbox:
 */
module.exports.showExamplesLink = true;

/*
 * Set the showParamDropdowns config value so that ace autocomplete dropdowns
 * will appear for each parameter based on the dropdown properties above:
 */
module.exports.showParamDropdowns = true;

},{"../assetManagement/getAssetDropdown":"/home/ubuntu/staging/apps/build/js/assetManagement/getAssetDropdown.js","../assetManagement/show.js":"/home/ubuntu/staging/apps/build/js/assetManagement/show.js","./ChartApi":"/home/ubuntu/staging/apps/build/js/applab/ChartApi.js","./api":"/home/ubuntu/staging/apps/build/js/applab/api.js","./consoleApi":"/home/ubuntu/staging/apps/build/js/applab/consoleApi.js","./constants":"/home/ubuntu/staging/apps/build/js/applab/constants.js","./designElements/elementUtils":"/home/ubuntu/staging/apps/build/js/applab/designElements/elementUtils.js","./dontMarshalApi":"/home/ubuntu/staging/apps/build/js/applab/dontMarshalApi.js","./setPropertyDropdown":"/home/ubuntu/staging/apps/build/js/applab/setPropertyDropdown.js"}],"/home/ubuntu/staging/apps/build/js/applab/consoleApi.js":[function(require,module,exports){
'use strict';

var codegen = require('../codegen');
var vsprintf = require('sprintf-js').vsprintf;

var consoleApi = module.exports;

consoleApi.log = function () {
  var nativeArgs = arguments;
  var output = '';
  var firstArg = nativeArgs[0];
  if (nativeArgs.length === 1) {
    output = firstArg;
  } else if (typeof firstArg === 'string' || firstArg instanceof String) {
    output = vsprintf(firstArg, Array.prototype.slice.call(nativeArgs, 1));
  } else {
    for (var i = 0; i < nativeArgs.length; i++) {
      output += JSON.stringify(nativeArgs[i]);
      if (i < nativeArgs.length - 1) {
        output += '\n';
      }
    }
  }
  Applab.log(output);
};

},{"../codegen":"/home/ubuntu/staging/apps/build/js/codegen.js","sprintf-js":"/home/ubuntu/staging/apps/node_modules/sprintf-js/src/sprintf.js"}],"/home/ubuntu/staging/apps/node_modules/sprintf-js/src/sprintf.js":[function(require,module,exports){
(function(window) {
    var re = {
        not_string: /[^s]/,
        number: /[diefg]/,
        json: /[j]/,
        not_json: /[^j]/,
        text: /^[^\x25]+/,
        modulo: /^\x25{2}/,
        placeholder: /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijosuxX])/,
        key: /^([a-z_][a-z_\d]*)/i,
        key_access: /^\.([a-z_][a-z_\d]*)/i,
        index_access: /^\[(\d+)\]/,
        sign: /^[\+\-]/
    }

    function sprintf() {
        var key = arguments[0], cache = sprintf.cache
        if (!(cache[key] && cache.hasOwnProperty(key))) {
            cache[key] = sprintf.parse(key)
        }
        return sprintf.format.call(null, cache[key], arguments)
    }

    sprintf.format = function(parse_tree, argv) {
        var cursor = 1, tree_length = parse_tree.length, node_type = "", arg, output = [], i, k, match, pad, pad_character, pad_length, is_positive = true, sign = ""
        for (i = 0; i < tree_length; i++) {
            node_type = get_type(parse_tree[i])
            if (node_type === "string") {
                output[output.length] = parse_tree[i]
            }
            else if (node_type === "array") {
                match = parse_tree[i] // convenience purposes only
                if (match[2]) { // keyword argument
                    arg = argv[cursor]
                    for (k = 0; k < match[2].length; k++) {
                        if (!arg.hasOwnProperty(match[2][k])) {
                            throw new Error(sprintf("[sprintf] property '%s' does not exist", match[2][k]))
                        }
                        arg = arg[match[2][k]]
                    }
                }
                else if (match[1]) { // positional argument (explicit)
                    arg = argv[match[1]]
                }
                else { // positional argument (implicit)
                    arg = argv[cursor++]
                }

                if (get_type(arg) == "function") {
                    arg = arg()
                }

                if (re.not_string.test(match[8]) && re.not_json.test(match[8]) && (get_type(arg) != "number" && isNaN(arg))) {
                    throw new TypeError(sprintf("[sprintf] expecting number but found %s", get_type(arg)))
                }

                if (re.number.test(match[8])) {
                    is_positive = arg >= 0
                }

                switch (match[8]) {
                    case "b":
                        arg = arg.toString(2)
                    break
                    case "c":
                        arg = String.fromCharCode(arg)
                    break
                    case "d":
                    case "i":
                        arg = parseInt(arg, 10)
                    break
                    case "j":
                        arg = JSON.stringify(arg, null, match[6] ? parseInt(match[6]) : 0)
                    break
                    case "e":
                        arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential()
                    break
                    case "f":
                        arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg)
                    break
                    case "g":
                        arg = match[7] ? parseFloat(arg).toPrecision(match[7]) : parseFloat(arg)
                    break
                    case "o":
                        arg = arg.toString(8)
                    break
                    case "s":
                        arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg)
                    break
                    case "u":
                        arg = arg >>> 0
                    break
                    case "x":
                        arg = arg.toString(16)
                    break
                    case "X":
                        arg = arg.toString(16).toUpperCase()
                    break
                }
                if (re.json.test(match[8])) {
                    output[output.length] = arg
                }
                else {
                    if (re.number.test(match[8]) && (!is_positive || match[3])) {
                        sign = is_positive ? "+" : "-"
                        arg = arg.toString().replace(re.sign, "")
                    }
                    else {
                        sign = ""
                    }
                    pad_character = match[4] ? match[4] === "0" ? "0" : match[4].charAt(1) : " "
                    pad_length = match[6] - (sign + arg).length
                    pad = match[6] ? (pad_length > 0 ? str_repeat(pad_character, pad_length) : "") : ""
                    output[output.length] = match[5] ? sign + arg + pad : (pad_character === "0" ? sign + pad + arg : pad + sign + arg)
                }
            }
        }
        return output.join("")
    }

    sprintf.cache = {}

    sprintf.parse = function(fmt) {
        var _fmt = fmt, match = [], parse_tree = [], arg_names = 0
        while (_fmt) {
            if ((match = re.text.exec(_fmt)) !== null) {
                parse_tree[parse_tree.length] = match[0]
            }
            else if ((match = re.modulo.exec(_fmt)) !== null) {
                parse_tree[parse_tree.length] = "%"
            }
            else if ((match = re.placeholder.exec(_fmt)) !== null) {
                if (match[2]) {
                    arg_names |= 1
                    var field_list = [], replacement_field = match[2], field_match = []
                    if ((field_match = re.key.exec(replacement_field)) !== null) {
                        field_list[field_list.length] = field_match[1]
                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== "") {
                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {
                                field_list[field_list.length] = field_match[1]
                            }
                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {
                                field_list[field_list.length] = field_match[1]
                            }
                            else {
                                throw new SyntaxError("[sprintf] failed to parse named argument key")
                            }
                        }
                    }
                    else {
                        throw new SyntaxError("[sprintf] failed to parse named argument key")
                    }
                    match[2] = field_list
                }
                else {
                    arg_names |= 2
                }
                if (arg_names === 3) {
                    throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported")
                }
                parse_tree[parse_tree.length] = match
            }
            else {
                throw new SyntaxError("[sprintf] unexpected placeholder")
            }
            _fmt = _fmt.substring(match[0].length)
        }
        return parse_tree
    }

    var vsprintf = function(fmt, argv, _argv) {
        _argv = (argv || []).slice(0)
        _argv.splice(0, 0, fmt)
        return sprintf.apply(null, _argv)
    }

    /**
     * helpers
     */
    function get_type(variable) {
        return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase()
    }

    function str_repeat(input, multiplier) {
        return Array(multiplier + 1).join(input)
    }

    /**
     * export to either browser or node.js
     */
    if (typeof exports !== "undefined") {
        exports.sprintf = sprintf
        exports.vsprintf = vsprintf
    }
    else {
        window.sprintf = sprintf
        window.vsprintf = vsprintf

        if (typeof define === "function" && define.amd) {
            define(function() {
                return {
                    sprintf: sprintf,
                    vsprintf: vsprintf
                }
            })
        }
    }
})(typeof window === "undefined" ? this : window);

},{}],"/home/ubuntu/staging/apps/build/js/applab/dontMarshalApi.js":[function(require,module,exports){
'use strict';

var errorHandler = require('./errorHandler');
var outputError = errorHandler.outputError;
var ErrorLevel = errorHandler.ErrorLevel;

var OPTIONAL = true;

function outputWarning(errorString) {
  var line = 1 + window.Applab.JSInterpreter.getNearestUserCodeLine();
  outputError(errorString, ErrorLevel.WARNING, line);
}

// APIs designed specifically to run on interpreter data structures without marshalling
// (valuable for performance or to support in/out parameters)
//
// dropletConfig for each of these APIs should be marked with dontMarshal:true

function dmapiValidateType(funcName, varName, varValue, expectedType, opt) {
  var properType;
  if (typeof varValue !== 'undefined') {
    if (expectedType === 'number') {
      properType = typeof varValue.data === 'number' || typeof varValue.data === 'string' && !isNaN(varValue.data);
    } else if (expectedType === 'array') {
      properType = varValue.parent == window.Applab.JSInterpreter.interpreter.ARRAY;
    } else {
      properType = typeof varValue.data === expectedType;
    }
  }
  properType = properType || opt === OPTIONAL && (varValue === window.Applab.JSInterpreter.interpreter.UNDEFINED || typeof varValue === 'undefined');
  if (!properType) {
    outputWarning(funcName + "() " + varName + " parameter value (" + varValue + ") is not a " + expectedType + ".");
  }
}

// Array functions

var getInt = function getInt(obj, def) {
  // Return an integer, or the default.
  var n = obj ? Math.floor(obj.toNumber()) : def;
  if (isNaN(n)) {
    n = def;
  }
  return n;
};

exports.insertItem = function (array, index, item) {
  dmapiValidateType('insertItem', 'list', array, 'array');
  dmapiValidateType('insertItem', 'index', index, 'number');

  index = getInt(index, 0);
  if (index < 0) {
    index = Math.max(array.length + index, 0);
  } else {
    index = Math.min(index, array.length);
  }
  // Insert item.
  for (var i = array.length - 1; i >= index; i--) {
    array.properties[i + 1] = array.properties[i];
  }
  array.length += 1;
  array.properties[index] = item;
};

exports.removeItem = function (array, index) {
  dmapiValidateType('removeItem', 'list', array, 'array');
  dmapiValidateType('removeItem', 'index', index, 'number');

  index = getInt(index, 0);
  if (index < 0) {
    index = Math.max(array.length + index, 0);
  }
  // Remove by shifting items after index downward.
  for (var i = index; i < array.length - 1; i++) {
    array.properties[i] = array.properties[i + 1];
  }
  if (index < array.length) {
    delete array.properties[array.length - 1];
    array.length -= 1;
  } else {
    // index is out of bounds (too large):
    outputWarning("removeItem() index parameter value (" + index + ") is larger than the number of items in the list (" + array.length + ").");
  }
};

exports.appendItem = function (array, item) {
  dmapiValidateType('appendItem', 'list', array, 'array');

  array.properties[array.length] = item;
  array.length++;
  return window.Applab.JSInterpreter.createPrimitive(array.length);
};

// ImageData RGB helper functions

// TODO: more parameter validation (data array type, length), error output

exports.getRed = function (imageData, x, y) {
  if (imageData.properties.data && imageData.properties.width) {
    var pixelOffset = y * imageData.properties.width * 4 + x * 4;
    return imageData.properties.data.properties[pixelOffset].toNumber();
  }
};
exports.getGreen = function (imageData, x, y) {
  if (imageData.properties.data && imageData.properties.width) {
    var pixelOffset = y * imageData.properties.width * 4 + x * 4;
    return imageData.properties.data.properties[pixelOffset + 1].toNumber();
  }
};
exports.getBlue = function (imageData, x, y) {
  if (imageData.properties.data && imageData.properties.width) {
    var pixelOffset = y * imageData.properties.width * 4 + x * 4;
    return imageData.properties.data.properties[pixelOffset + 2].toNumber();
  }
};
exports.getAlpha = function (imageData, x, y) {
  if (imageData.properties.data && imageData.properties.width) {
    var pixelOffset = y * imageData.properties.width * 4 + x * 4;
    return imageData.properties.data.properties[pixelOffset + 3].toNumber();
  }
};

exports.setRed = function (imageData, x, y, value) {
  if (imageData.properties.data && imageData.properties.width) {
    var pixelOffset = y * imageData.properties.width * 4 + x * 4;
    imageData.properties.data.properties[pixelOffset] = value;
  }
};
exports.setGreen = function (imageData, x, y, value) {
  if (imageData.properties.data && imageData.properties.width) {
    var pixelOffset = y * imageData.properties.width * 4 + x * 4;
    imageData.properties.data.properties[pixelOffset + 1] = value;
  }
};
exports.setBlue = function (imageData, x, y, value) {
  if (imageData.properties.data && imageData.properties.width) {
    var pixelOffset = y * imageData.properties.width * 4 + x * 4;
    imageData.properties.data.properties[pixelOffset + 2] = value;
  }
};
exports.setAlpha = function (imageData, x, y, value) {
  if (imageData.properties.data && imageData.properties.width) {
    var pixelOffset = y * imageData.properties.width * 4 + x * 4;
    imageData.properties.data.properties[pixelOffset + 3] = value;
  }
};
exports.setRGB = function (imageData, x, y, r, g, b, a) {
  if (imageData.properties.data && imageData.properties.width) {
    var pixelOffset = y * imageData.properties.width * 4 + x * 4;
    imageData.properties.data.properties[pixelOffset] = r;
    imageData.properties.data.properties[pixelOffset + 1] = g;
    imageData.properties.data.properties[pixelOffset + 2] = b;
    imageData.properties.data.properties[pixelOffset + 3] = typeof a === 'undefined' ? window.Applab.JSInterpreter.createPrimitive(255) : a;
  }
};

},{"./errorHandler":"/home/ubuntu/staging/apps/build/js/applab/errorHandler.js"}],"/home/ubuntu/staging/apps/build/js/applab/designMode.js":[function(require,module,exports){
/* global Applab, dashboard */

// TODO (brent) - make it so that we dont need to specify .jsx. This currently
// works in our grunt build, but not in tests
'use strict';

var DesignWorkspace = require('./DesignWorkspace.jsx');
var showAssetManager = require('../assetManagement/show');
var assetPrefix = require('../assetManagement/assetPrefix');
var elementLibrary = require('./designElements/library');
var elementUtils = require('./designElements/elementUtils');
var studioApp = require('../StudioApp').singleton;
var KeyCodes = require('../constants').KeyCodes;
var constants = require('./constants');
var applabCommands = require('./commands');
var designMode = module.exports;
var sanitizeHtml = require('./sanitizeHtml');
var utils = require('../utils');
var gridUtils = require('./gridUtils');
var logToCloud = require('../logToCloud');

var currentlyEditedElement = null;
var currentScreenId = null;

/**
 * If in design mode and program is not running, display Properties
 * pane for editing the clicked element.
 * @param event
 */
designMode.onDesignModeVizClick = function (event) {
  if (!Applab.isInDesignMode() || $('#resetButton').is(':visible')) {
    return;
  }
  event.preventDefault();

  var element = event.target;
  if (element.id === 'designModeViz') {
    element = designMode.activeScreen();
  }

  if ($(element).is('.ui-resizable')) {
    element = getInnerElement(element);
  } else if ($(element).is('.ui-resizable-handle')) {
    element = getInnerElement(element.parentNode);
  } else if ($(element).attr('class') === undefined && $(element.parentNode).is('.textArea')) {
    // User may have clicked one of the divs of a multiline text area - in this case, the element is just a plain
    // div with no class, and we want to use the full text area element.
    element = getInnerElement(element.parentNode.parentNode);
  }
  // give the div focus so that we can listen for keyboard events
  $("#designModeViz").focus();
  designMode.editElementProperties(element);
};

/**
 * @returns {HTMLElement} The currently visible screen element.
 */
designMode.activeScreen = function () {
  return elementUtils.getScreens().filter(function () {
    return this.style.display !== 'none';
  }).first()[0];
};

/**
 * Create a new element of the specified type within the play space.
 * @param {ElementType} elementType Type of element to create
 * @param {number} left Position from left.
 * @param {number} top Position from top.
 * @returns {HTMLElement} The generated element
 */
designMode.createElement = function (elementType, left, top) {
  var element = elementLibrary.createElement(elementType, left, top);

  var parent;
  var isScreen = $(element).hasClass('screen');
  if (isScreen) {
    parent = document.getElementById('designModeViz');
  } else {
    parent = designMode.activeScreen();
  }
  parent.appendChild(element);

  if (!isScreen) {
    makeDraggable($(element));
  }
  designMode.editElementProperties(element);

  return element;
};

designMode.editElementProperties = function (element) {
  var designPropertiesElement = document.getElementById('design-properties');
  if (!designPropertiesElement) {
    // design-properties won't exist when !user.isAdmin
    return;
  }

  highlightElement(element);

  currentlyEditedElement = element;
  designMode.renderDesignWorkspace(element);
};

/**
 * Loads the current element or current screen into the property tab.
 * Also makes sure we re-render design mode to update properties such as isDimmed.
 */
designMode.resetPropertyTab = function () {
  var element = currentlyEditedElement || designMode.activeScreen();
  designMode.editElementProperties(element);
  Applab.render();
};

/**
 * Enable (or disable) dragging of new elements from the element tray
 * @param allowEditing {boolean}
 */
designMode.resetElementTray = function (allowEditing) {
  $('#design-toolbox .new-design-element').each(function () {
    $(this).draggable(allowEditing ? 'enable' : 'disable');
  });
};

/**
 * Given an input value produce a valid css value that is
 * either in pixels or empty.
 */
function appendPx(input) {
  // Don't append if we already have a px
  if (/px/.test(input)) {
    return input;
  }
  return input ? input + 'px' : '';
}

/**
 * While in design mode, elements get wrapped in a ui-draggable container.
 * @returns {true} If element is currently wrapped
 */
function isDraggableContainer(element) {
  return $(element).hasClass('ui-draggable');
}

/**
 * Handle a change from our properties table.
 * @param element {Element}
 * @param name {string}
 * @param value {string}
 */
designMode.onPropertyChange = function (element, name, value) {
  designMode.updateProperty(element, name, value);
  designMode.editElementProperties(element);
};

/**
 * After handling properties generically, give elementLibrary a chance
 * to do any element specific changes.
 * @param element
 * @param name
 * @param value
 */
designMode.updateProperty = function (element, name, value) {
  var handled = true;
  switch (name) {
    case 'id':
      value = value.trim();
      elementUtils.setId(element, value);
      if (elementLibrary.getElementType(element) === elementLibrary.ElementType.SCREEN) {
        // rerender design toggle, which has a dropdown of screen ids
        designMode.changeScreen(value);
      }
      break;
    case 'left':
      var newLeft = appendPx(value);
      element.style.left = newLeft;
      if (isDraggableContainer(element.parentNode)) {
        element.parentNode.style.left = newLeft;
      }
      break;
    case 'top':
      var newTop = appendPx(value);
      element.style.top = newTop;
      if (isDraggableContainer(element.parentNode)) {
        element.parentNode.style.top = newTop;
      }
      break;
    case 'width':
      element.setAttribute('width', appendPx(value));
      break;
    case 'height':
      element.setAttribute('height', appendPx(value));
      break;
    case 'style-width':
      var newWidth = appendPx(value);
      element.style.width = newWidth;
      if (isDraggableContainer(element.parentNode)) {
        element.parentNode.style.width = newWidth;
      }
      break;
    case 'style-height':
      var newHeight = appendPx(value);
      element.style.height = newHeight;
      if (isDraggableContainer(element.parentNode)) {
        element.parentNode.style.height = newHeight;
      }
      break;
    case 'text':
      element.innerHTML = utils.escapeText(value);
      break;
    case 'textColor':
      element.style.color = value;
      break;
    case 'backgroundColor':
      element.style.backgroundColor = value;
      break;
    case 'fontSize':
      element.style.fontSize = appendPx(value);
      break;

    case 'image':
      var backgroundImage = new Image();
      var originalValue = element.getAttribute('data-canonical-image-url');
      backgroundImage.src = assetPrefix.fixPath(value);
      element.style.backgroundImage = 'url(' + backgroundImage.src + ')';
      element.setAttribute('data-canonical-image-url', value);
      // do not resize if only the asset path has changed (e.g. on remix).
      if (value !== originalValue) {
        backgroundImage.onload = function () {
          // Fit the image into the button
          element.style.backgroundSize = 'contain';
          element.style.backgroundPosition = '50% 50%';
          element.style.backgroundRepeat = 'no-repeat';

          // Re-render properties
          if (currentlyEditedElement === element) {
            designMode.editElementProperties(element);
          }
        };
      }
      break;

    case 'screen-image':
      // We stretch the image to fit the element
      var width = parseInt(element.style.width, 10);
      var height = parseInt(element.style.height, 10);
      element.style.backgroundImage = 'url(' + assetPrefix.fixPath(value) + ')';
      element.setAttribute('data-canonical-image-url', value);
      element.style.backgroundSize = width + 'px ' + height + 'px';
      break;

    case 'picture':
      originalValue = element.getAttribute('data-canonical-image-url');
      element.src = assetPrefix.fixPath(value);
      element.setAttribute('data-canonical-image-url', value);
      // do not resize if only the asset path has changed (e.g. on remix).
      if (value !== originalValue) {
        var resizeElement = function resizeElement(width, height) {
          element.style.width = width + 'px';
          element.style.height = height + 'px';
          if (isDraggableContainer(element.parentNode)) {
            element.parentNode.style.width = width + 'px';
            element.parentNode.style.height = height + 'px';
          }
          // Re-render properties
          if (currentlyEditedElement === element) {
            designMode.editElementProperties(element);
          }
        };
        if (value === '') {
          element.src = '/blockly/media/1x1.gif';
          resizeElement(100, 100);
        } else {
          element.onload = function () {
            // naturalWidth/Height aren't populated until image has loaded.
            var left = parseFloat(element.style.left);
            var top = parseFloat(element.style.top);
            var dimensions = boundedResize(left, top, element.naturalWidth, element.naturalHeight, true);
            resizeElement(dimensions.width, dimensions.height);
            // only perform onload once
            element.onload = null;
          };
        }
      }
      break;
    case 'hidden':
      // Add a class that shows as 30% opacity in design mode, and invisible
      // in code mode.
      $(element).toggleClass('design-mode-hidden', value === true);
      break;
    case 'checked':
      // element.checked represents the current state, the attribute represents
      // the serialized state
      element.checked = value;

      if (value) {
        var groupName = element.getAttribute('name');
        if (groupName) {
          // Remove checked attribute from all other radio buttons in group
          var buttons = document.getElementsByName(groupName);
          Array.prototype.forEach.call(buttons, function (item) {
            if (item.type === 'radio') {
              item.removeAttribute('checked');
            }
          });
        }
        element.setAttribute('checked', 'checked');
      } else {
        element.removeAttribute('checked');
      }
      break;
    case 'options':
      // value should be an array of options in this case
      for (var i = 0; i < value.length; i++) {
        var optionElement = element.children[i];
        if (!optionElement) {
          optionElement = document.createElement('option');
          element.appendChild(optionElement);
        }
        optionElement.textContent = value[i];
      }
      // remove any extra options
      while (element.children[i]) {
        element.removeChild(element.children[i]);
      }
      break;
    case 'groupId':
      element.setAttribute('name', value);
      break;
    case 'placeholder':
      element.setAttribute('placeholder', value);
      break;
    case 'rows':
      element.setAttribute('rows', value);
      break;
    case 'cols':
      element.setAttribute('rows', value);
      break;
    case 'readonly':
      element.setAttribute('contenteditable', !value);
      break;
    case 'is-default':
      if (value === true) {
        // Make this one default
        $('#designModeViz').prepend(element);

        //Resort elements in the dropdown list
        var options = $('#screenSelector option');
        var newScreenText = constants.NEW_SCREEN;
        var defaultScreenId = elementUtils.getId(element);
        options.sort(function (a, b) {
          if (a.text === defaultScreenId) {
            return -1;
          } else if (b.text === defaultScreenId) {
            return 1;
          } else if (a.text === newScreenText) {
            return 1;
          } else if (b.text === newScreenText) {
            return -1;
          } else {
            return a.text.localeCompare(b.text);
          }
        });

        $('#screenSelector').html(options);
        $('#screenSelector')[0].selectedIndex = 0;
      }
      break;
    default:
      // Mark as unhandled, but give typeSpecificPropertyChange a chance to
      // handle it
      handled = false;
  }

  if (elementLibrary.typeSpecificPropertyChange(element, name, value)) {
    handled = true;
  }

  if (!handled) {
    throw "unknown property name " + name;
  }
};

designMode.onDeletePropertiesButton = function (element, event) {
  var isScreen = $(element).hasClass('screen');
  if ($(element.parentNode).is('.ui-resizable')) {
    element = element.parentNode;
  }
  $(element).remove();

  if (isScreen) {
    designMode.loadDefaultScreen();
  } else {
    designMode.editElementProperties(elementUtils.getPrefixedElementById(currentScreenId));
  }
};

designMode.onDepthChange = function (element, depthDirection) {
  // move to outer resizable div
  var outerElement = element.parentNode;
  var parent = outerElement.parentNode;
  var index = Array.prototype.indexOf.call(parent.children, outerElement);

  if (depthDirection === 'forward' && index + 2 >= parent.children.length) {
    // We're either the last or second to last element
    depthDirection = 'toFront';
  }

  var removed;

  // TODO (brent) - use an enum?
  switch (depthDirection) {
    case 'forward':
      var twoAhead = outerElement.nextSibling.nextSibling;
      removed = parent.removeChild(outerElement);
      parent.insertBefore(removed, twoAhead);
      break;

    case 'toFront':
      removed = parent.removeChild(outerElement);
      parent.appendChild(removed);
      break;

    case 'backward':
      var previous = outerElement.previousSibling;
      if (!previous) {
        return;
      }

      removed = parent.removeChild(outerElement);
      parent.insertBefore(removed, previous);
      break;

    case 'toBack':
      if (parent.children.length === 1) {
        return;
      }
      removed = parent.removeChild(outerElement);
      parent.insertBefore(removed, parent.children[0]);
      break;

    default:
      throw new Error('unknown depthDirection: ' + depthDirection);
  }

  element.focus();
  designMode.editElementProperties(element);
};

designMode.onInsertEvent = function (code) {
  Applab.appendToEditor(code);
  $('#codeModeButton').click(); // TODO(dave): reactify / extract toggle state
  Applab.scrollToEnd();
};

/**/
designMode.serializeToLevelHtml = function () {
  var designModeViz = $('#designModeViz');
  // Children are screens. Want to operate on grandchildren
  var madeUndraggable = makeUndraggable(designModeViz.children().children());

  // Make a copy so that we don't affect designModeViz contents as we
  // remove prefixes from the element ids.
  var designModeVizClone = designModeViz.clone();
  designModeVizClone.children().each(function () {
    elementUtils.removeIdPrefix(this);
  });
  designModeVizClone.children().children().each(function () {
    elementUtils.removeIdPrefix(this);
  });

  var serialization = designModeVizClone[0] ? designModeVizClone[0].outerHTML : '';
  if (madeUndraggable) {
    makeDraggable(designModeViz.children().children());
  }

  Applab.levelHtml = serialization;
};

/**
 * Replace the contents of rootEl with the children of the DOM node obtained by
 * parsing Applab.levelHtml (the root node in the levelHtml is ignored).
 * @param rootEl {Element} Element whose children should be replaced.
 * @param allowDragging {boolean} Whether to make elements resizable and draggable.
 * @param prefix {string} Optional prefix to attach to element ids of children and
 *     grandchildren after parsing. Defaults to ''.
 */
designMode.parseFromLevelHtml = function (rootEl, allowDragging, prefix) {
  if (!rootEl) {
    return;
  }
  while (rootEl.firstChild) {
    rootEl.removeChild(rootEl.firstChild);
  }

  if (!Applab.levelHtml) {
    return;
  }
  function reportUnsafeHtml(removed, unsafe, safe) {
    var msg = "The following lines of HTML were modified or removed:\n" + removed + "\noriginal html:\n" + unsafe + "\nmodified html:\n" + safe + "\ntarget: " + rootEl.id;
    console.log(msg);
    logToCloud.addPageAction(logToCloud.PageAction.SanitizedLevelHtml, {
      removedHtml: removed,
      unsafeHtml: unsafe,
      safeHtml: safe,
      sanitizationTarget: rootEl.id
    });
  }

  var levelDom = $.parseHTML(sanitizeHtml(Applab.levelHtml, reportUnsafeHtml));
  var children = $(levelDom).children();

  children.each(function () {
    elementUtils.addIdPrefix(this, prefix);
  });
  children.children().each(function () {
    elementUtils.addIdPrefix(this, prefix);
  });

  children.appendTo(rootEl);
  if (allowDragging) {
    // children are screens. make grandchildren draggable
    makeDraggable(children.children());
  }

  children.each(function () {
    elementLibrary.onDeserialize(this, designMode.updateProperty.bind(this));
  });
  children.children().each(function () {
    var element = $(this).hasClass('ui-draggable') ? this.firstChild : this;
    elementLibrary.onDeserialize(element, designMode.updateProperty.bind(element));
  });
};

designMode.toggleDesignMode = function (enable) {
  var designWorkspace = document.getElementById('designWorkspace');
  if (!designWorkspace) {
    // Currently we don't run design mode in some circumstances (i.e. user is
    // not an admin)
    return;
  }
  designWorkspace.style.display = enable ? 'block' : 'none';

  var codeWorkspaceWrapper = document.getElementById('codeWorkspaceWrapper');
  codeWorkspaceWrapper.style.display = enable ? 'none' : 'block';

  Applab.toggleDivApplab(!enable);
};

/**
 * When we make elements resizable, we wrap them in an outer div. Given an outer
 * div, this returns the inner element
 */
function getInnerElement(outerElement) {
  // currently assume inner element is first child.
  return outerElement.children[0];
}

/**
 * Returns a new width/height bounded to the visualization area.
 * @param {number} left
 * @param {number} top
 * @param {number} width Requested width.
 * @param {number} height Requested height.
 * @param {boolean} preserveAspectRatio Constrain the width/height to the
 *   initial aspect ratio.
 * @return {{width: number, height: number}}
 */
function boundedResize(left, top, width, height, preserveAspectRatio) {
  var container = $('#designModeViz');
  var maxWidth = container.outerWidth() - left;
  var maxHeight = container.outerHeight() - top;
  var newWidth = Math.min(width, maxWidth);
  newWidth = Math.max(newWidth, 20);
  var newHeight = Math.min(height, maxHeight);
  newHeight = Math.max(newHeight, 20);

  if (preserveAspectRatio) {
    var ratio = Math.min(newWidth / width, newHeight / height);
    newWidth = width * ratio;
    newHeight = height * ratio;
  }

  return { width: newWidth, height: newHeight };
}

/**
 *
 * @param {jQuery} jqueryElements jQuery object containing DOM elements to make
 *   draggable.
 */
function makeDraggable(jqueryElements) {
  // For a non-div to be draggable & resizable it needs to be wrapped in a div.
  jqueryElements.each(function () {
    var elm = $(this);
    var wrapper = elm.wrap('<div>').parent().resizable({
      create: function create() {
        // resizable sets z-index to 90, which we don't want
        $(this).children().css('z-index', '');
      },
      resize: function resize(event, ui) {
        // Wishing for a vector maths library...

        // Customize motion according to current visualization scale.
        var scale = getVisualizationScale();
        var deltaWidth = ui.size.width - ui.originalSize.width;
        var deltaHeight = ui.size.height - ui.originalSize.height;
        var newWidth = ui.originalSize.width + deltaWidth / scale;
        var newHeight = ui.originalSize.height + deltaHeight / scale;

        // snap width/height to nearest grid increment
        newWidth = gridUtils.snapToGridSize(newWidth);
        newHeight = gridUtils.snapToGridSize(newHeight);

        // Bound at app edges
        var dimensions = boundedResize(ui.position.left, ui.position.top, newWidth, newHeight, false);

        ui.size.width = newWidth;
        ui.size.height = newHeight;
        wrapper.css({
          width: dimensions.width,
          height: dimensions.height
        });

        elm.outerWidth(wrapper.width());
        elm.outerHeight(wrapper.height());
        var element = elm[0];
        // canvas uses width/height. other elements use style.width/style.height
        var widthProperty = 'style-width';
        var heightProperty = 'style-height';
        if (element.hasAttribute('width') || element.hasAttribute('height')) {
          widthProperty = 'width';
          heightProperty = 'height';
        }
        designMode.onPropertyChange(element, widthProperty, element.style.width);
        designMode.onPropertyChange(element, heightProperty, element.style.height);

        highlightElement(elm[0]);
      }
    }).draggable({
      cancel: false, // allow buttons and inputs to be dragged
      drag: function drag(event, ui) {
        // draggables are not compatible with CSS transform-scale,
        // so adjust the position in various ways here.

        // dragging
        var scale = getVisualizationScale();
        var newLeft = ui.position.left / scale;
        var newTop = ui.position.top / scale;

        // snap top-left corner to nearest location in the grid
        newLeft = gridUtils.snapToGridSize(newLeft);
        newTop = gridUtils.snapToGridSize(newTop);

        // containment
        var container = $('#designModeViz');
        var maxLeft = container.outerWidth() - ui.helper.outerWidth(true);
        var maxTop = container.outerHeight() - ui.helper.outerHeight(true);
        newLeft = Math.min(newLeft, maxLeft);
        newLeft = Math.max(newLeft, 0);
        newTop = Math.min(newTop, maxTop);
        newTop = Math.max(newTop, 0);

        ui.position.left = newLeft;
        ui.position.top = newTop;

        elm.css({
          top: newTop,
          left: newLeft
        });

        designMode.renderDesignWorkspace(elm[0]);
      },
      start: function start() {
        highlightElement(elm[0]);
      }
    }).css({
      position: 'absolute',
      lineHeight: '0px'
    });

    wrapper.css({
      top: elm.css('top'),
      left: elm.css('left')
    });

    // Chrome/Safari both have issues where they don't properly render the
    // wrapper if the inner element is a div. This is a hack that causes a
    // rerender to happen in chrome
    var currHeight = wrapper.parent().height();
    wrapper.parent().height(currHeight + 1);
    wrapper.parent().height(currHeight);

    // And a hack for Safari
    if (this.tagName === 'DIV') {
      setTimeout(function () {
        wrapper.hide().show(0);
      }, 0);
    }

    elm.css('position', 'static');
  });
}

/**
 * Calculate the current visualization scale factor, as screenWidth / domWidth.
 * @returns {number}
 */
function getVisualizationScale() {
  var div = document.getElementById('designModeViz');
  return div.getBoundingClientRect().width / div.offsetWidth;
}

/**
 * Inverse of `makeDraggable`.
 * @param {jQuery} jqueryElements jQuery object containing DOM elements to make
 *   undraggable.
 * @returns {boolean} True if we made something undraggable
 */
function makeUndraggable(jqueryElements) {
  var foundOne = false;
  jqueryElements.each(function () {
    var wrapper = $(this);
    var elm = $(getInnerElement(this));

    // Don't unwrap elements that aren't wrapped with a draggable div.
    if (!wrapper.hasClass('ui-draggable')) {
      return;
    }

    foundOne = true;

    wrapper.resizable('destroy').draggable('destroy');
    elm.css('position', 'absolute');
    elm.unwrap();
  });

  return foundOne;
}

/**
 * Highlights an element with a dashed border, removes border from all other elements
 * Must only be called on an element wrapped in a draggable div
 */
function highlightElement(element) {
  removeElementHighlights();

  if ($(element).is('#designModeViz img[src!=""], #designModeViz label')) {
    $(element).parent().css({
      outlineStyle: 'dashed',
      outlineWidth: '1px'
    });
  }
}

/**
 * Remove dashed borders from all elements
 */
function removeElementHighlights() {
  $('#designModeViz .ui-draggable').css({
    outlineStyle: '',
    outlineWidth: ''
  });
}

designMode.configureDragAndDrop = function () {
  // Allow elements to be dragged and dropped from the design mode
  // element tray to the play space.
  $('#visualization').droppable({
    accept: '.new-design-element',
    drop: function drop(event, ui) {
      var elementType = ui.draggable[0].getAttribute('data-element-type');

      var point = gridUtils.scaledDropPoint(ui.helper);

      var element = designMode.createElement(elementType, point.left, point.top);
      if (elementType === elementLibrary.ElementType.SCREEN) {
        designMode.changeScreen(elementUtils.getId(element));
      }
      if (elementType === elementLibrary.ElementType.IMAGE) {
        var parent = $(element).parent();
        // Safari has some weird bug where it doesn't end up rendering our dropped
        // image for some reason. We get around that by moving the image to the
        // wrong location, and then moving it back to the right location (which
        // forces a rerender at which point safari does the right thing)
        if (parent.width() === 0) {
          var origLeft = parent.css('left');
          parent.css('visibility', 'hidden');
          parent.css('left', '0px');
          setTimeout(function () {
            parent.css('left', origLeft);
            parent.css('visibility', '');
          }, 1);
        }
      }
    }
  });
};

/**
 * Create a new screen
 * @returns {string} The id of the newly created screen
 */
designMode.createScreen = function () {
  var newScreen = elementLibrary.createElement('SCREEN', 0, 0);
  $("#designModeViz").append(newScreen);

  return elementUtils.getId(newScreen);
};

/**
 * Changes the active screen by toggling all screens to be non-visible, unless
 * they match the provided screenId. Also updates our dropdown to reflect the
 * change, and opens the element property editor for the new screen.
 */
designMode.changeScreen = function (screenId) {
  currentScreenId = screenId;
  elementUtils.getScreens().each(function () {
    $(this).toggle(elementUtils.getId(this) === screenId);
  });

  Applab.render();

  designMode.editElementProperties(elementUtils.getPrefixedElementById(screenId));
};

/** @returns {string} Id of active/visible screen */
designMode.getCurrentScreenId = function () {
  return currentScreenId;
};

/** @returns {string[]} Array of all screen Ids in current app */
designMode.getAllScreenIds = function () {
  return elementUtils.getScreens().get().map(function (screen) {
    return elementUtils.getId(screen);
  });
};

/**
 * Load our default screen (ie. the first one in the DOM), creating a screen
 * if we have none.
 */
designMode.loadDefaultScreen = function () {
  var defaultScreen;

  if (elementUtils.getScreens().length === 0) {
    defaultScreen = designMode.createScreen();
  } else {
    defaultScreen = elementUtils.getId(elementUtils.getScreens()[0]);
  }
  designMode.changeScreen(defaultScreen);
};

designMode.renderDesignWorkspace = function (element) {
  var designWorkspace = document.getElementById('designWorkspace');
  if (!designWorkspace) {
    return;
  }

  var props = {
    handleDragStart: function handleDragStart() {
      if ($('#resetButton').is(':visible')) {
        studioApp.resetButtonClick();
      }
    },
    element: element || null,
    elementIdList: Applab.getIdDropdownForCurrentScreen(),
    handleChange: designMode.onPropertyChange.bind(this, element),
    onChangeElement: designMode.editElementProperties.bind(this),
    onDepthChange: designMode.onDepthChange,
    onDelete: designMode.onDeletePropertiesButton.bind(this, element),
    onInsertEvent: designMode.onInsertEvent.bind(this),
    handleManageAssets: showAssetManager,
    isDimmed: Applab.running
  };
  React.render(React.createElement(DesignWorkspace, props), designWorkspace);
};

/**
 * Early versions of applab didn't have screens, and instead all elements
 * existed under the root div. If we find one of those, convert it to be a single
 * screen app.
 */
designMode.addScreenIfNecessary = function (html) {
  var rootDiv = $(html);
  if (rootDiv.children().length === 0 || rootDiv.children().eq(0).hasClass('screen')) {
    // no children, or first child is a screen
    return html;
  }

  var screenElement = elementLibrary.createElement(elementLibrary.ElementType.SCREEN);
  rootDiv.children().appendTo(screenElement);
  rootDiv.append(screenElement);

  return rootDiv[0].outerHTML;
};

designMode.addKeyboardHandlers = function () {
  $('#designModeViz').keydown(function (event) {
    if (!Applab.isInDesignMode() || Applab.isRunning()) {
      return;
    }
    if (!currentlyEditedElement || $(currentlyEditedElement).hasClass('screen')) {
      return;
    }

    var current, property, newValue;

    switch (event.which) {
      case KeyCodes.LEFT:
        current = parseInt(currentlyEditedElement.style.left, 10);
        newValue = current - 1;
        property = 'left';
        break;
      case KeyCodes.RIGHT:
        current = parseInt(currentlyEditedElement.style.left, 10);
        newValue = current + 1;
        property = 'left';
        break;
      case KeyCodes.UP:
        current = parseInt(currentlyEditedElement.style.top, 10);
        newValue = current - 1;
        property = 'top';
        break;
      case KeyCodes.DOWN:
        current = parseInt(currentlyEditedElement.style.top, 10);
        newValue = current + 1;
        property = 'top';
        break;
      default:
        return;
    }
    designMode.onPropertyChange(currentlyEditedElement, property, newValue);
  });
};

designMode.resetIds = function () {
  elementLibrary.resetIds();
};

},{"../StudioApp":"/home/ubuntu/staging/apps/build/js/StudioApp.js","../assetManagement/assetPrefix":"/home/ubuntu/staging/apps/build/js/assetManagement/assetPrefix.js","../assetManagement/show":"/home/ubuntu/staging/apps/build/js/assetManagement/show.js","../constants":"/home/ubuntu/staging/apps/build/js/constants.js","../logToCloud":"/home/ubuntu/staging/apps/build/js/logToCloud.js","../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./DesignWorkspace.jsx":"/home/ubuntu/staging/apps/build/js/applab/DesignWorkspace.jsx","./commands":"/home/ubuntu/staging/apps/build/js/applab/commands.js","./constants":"/home/ubuntu/staging/apps/build/js/applab/constants.js","./designElements/elementUtils":"/home/ubuntu/staging/apps/build/js/applab/designElements/elementUtils.js","./designElements/library":"/home/ubuntu/staging/apps/build/js/applab/designElements/library.js","./gridUtils":"/home/ubuntu/staging/apps/build/js/applab/gridUtils.js","./sanitizeHtml":"/home/ubuntu/staging/apps/build/js/applab/sanitizeHtml.js"}],"/home/ubuntu/staging/apps/build/js/applab/controls.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
  var msg = require('../locale');
; buf.push('\n');4; // Comment so this file is not identical to studio/controls.html.ejs 
; buf.push('\n\n<div id="soft-buttons" class="soft-buttons-none">\n  <button id="leftButton" disabled=true class="arrow">\n    <img src="', escape((8,  assetUrl('media/1x1.gif') )), '" class="left-btn icon21">\n  </button>\n  <button id="rightButton" disabled=true class="arrow">\n    <img src="', escape((11,  assetUrl('media/1x1.gif') )), '" class="right-btn icon21">\n  </button>\n  <button id="upButton" disabled=true class="arrow">\n    <img src="', escape((14,  assetUrl('media/1x1.gif') )), '" class="up-btn icon21">\n  </button>\n  <button id="downButton" disabled=true class="arrow">\n    <img src="', escape((17,  assetUrl('media/1x1.gif') )), '" class="down-btn icon21">\n  </button>\n</div>\n\n');21; if (finishButton) { ; buf.push('\n  <div id="share-cell" class="share-cell-none">\n    <button id="finishButton" class="share">\n      <img src="', escape((24,  assetUrl('media/1x1.gif') )), '">', escape((24,  msg.finish() )), '\n    </button>\n  </div>\n');27; } ; buf.push('\n\n');29; if (submitButton) { ; buf.push('\n  <div id="share-cell" class="share-cell-none">\n    <button id="submitButton" class="share">\n      <img src="', escape((32,  assetUrl('media/1x1.gif') )), '">', escape((32,  msg.submit() )), '\n    </button>\n  </div>\n');35; } ; buf.push('\n\n');37; if (unsubmitButton) { ; buf.push('\n  <div id="share-cell" class="share-cell-enabled">\n    <button id="unsubmitButton" class="share">\n      <img src="', escape((40,  assetUrl('media/1x1.gif') )), '">', escape((40,  msg.unsubmit() )), '\n    </button>\n  </div>\n');43; } ; buf.push('\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"../locale":"/home/ubuntu/staging/apps/build/js/locale.js","ejs":"/home/ubuntu/staging/apps/node_modules/ejs/lib/ejs.js"}],"/home/ubuntu/staging/apps/build/js/applab/blocks.js":[function(require,module,exports){
/**
 * CodeOrgApp: Applab
 *
 * Copyright 2014-2015 Code.org
 *
 */
'use strict';

var msg = require('./locale');
var commonMsg = require('../locale');
var codegen = require('../codegen');
var utils = require('../utils');
var _ = utils.getLodash();

var RANDOM_VALUE = 'random';
var HIDDEN_VALUE = '"hidden"';
var CLICK_VALUE = '"click"';
var VISIBLE_VALUE = '"visible"';

var generateSetterCode = function generateSetterCode(opts) {
  var value = opts.ctx.getTitleValue('VALUE');
  if (value === RANDOM_VALUE) {
    var possibleValues = _(opts.ctx.VALUES).map(function (item) {
      return item[1];
    }).without(RANDOM_VALUE, HIDDEN_VALUE, CLICK_VALUE);
    value = 'Applab.randomFromArray([' + possibleValues + '])';
  }

  return 'Applab.' + opts.name + '(\'block_id_' + opts.ctx.id + '\', ' + (opts.extraParams ? opts.extraParams + ', ' : '') + value + ');\n';
};

// Install extensions to Blockly's language and JavaScript generator.
exports.install = function (blockly, blockInstallOptions) {
  var skin = blockInstallOptions.skin;
  var isK1 = blockInstallOptions.isK1;
  var generator = blockly.Generator.get('JavaScript');
  blockly.JavaScript = generator;

  generator.applab_eventHandlerPrologue = function () {
    return '\n';
  };

  installContainer(blockly, generator, blockInstallOptions);
};

function installContainer(blockly, generator, blockInstallOptions) {
  blockly.Blocks.applab_container = {
    helpUrl: '',
    init: function init() {
      this.setHSV(184, 1.00, 0.74);
      this.appendDummyInput().appendTitle(msg.container());
      this.appendValueInput('ID');
      this.appendValueInput('HTML');
      this.setPreviousStatement(true);
      this.setInputsInline(true);
      this.setNextStatement(true);
      this.setTooltip(msg.containerTooltip());
    }
  };

  generator.applab_container = function () {
    var idParam = Blockly.JavaScript.valueToCode(this, 'ID', Blockly.JavaScript.ORDER_NONE) || '';
    var htmlParam = Blockly.JavaScript.valueToCode(this, 'HTML', Blockly.JavaScript.ORDER_NONE) || '';
    return 'Applab.container(\'block_id_' + this.id + '\', ' + idParam + ', ' + htmlParam + ');\n';
  };
}

},{"../codegen":"/home/ubuntu/staging/apps/build/js/codegen.js","../locale":"/home/ubuntu/staging/apps/build/js/locale.js","../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./locale":"/home/ubuntu/staging/apps/build/js/applab/locale.js"}],"/home/ubuntu/staging/apps/build/js/applab/applabTurtle.js":[function(require,module,exports){
'use strict';

var studioApp = require('../StudioApp').singleton;
var applabCommands = require('./commands');

var applabTurtle = module.exports;

// These offset are used to ensure that the turtle image is centered over
// its x,y coordinates. The image is currently 48x48, rendered at 24x24.
var TURTLE_WIDTH = 24;
var TURTLE_HEIGHT = 24;
var TURTLE_ROTATION_OFFSET = -45;

applabTurtle.getTurtleContext = function () {
  var canvas = document.getElementById('turtleCanvas');

  if (!canvas) {
    // If there is not yet a turtleCanvas, create it:
    applabCommands.createCanvas({ 'elementId': 'turtleCanvas', 'turtleCanvas': true });
    canvas = document.getElementById('turtleCanvas');

    // And create the turtle (defaults to visible):
    Applab.turtle.visible = true;
    var divApplab = document.getElementById('divApplab');
    var turtleImage = document.createElement("img");
    turtleImage.src = studioApp.assetUrl('media/applab/723-location-arrow-toolbar-48px-centered.png');
    turtleImage.id = 'turtleImage';
    applabTurtle.updateTurtleImage(turtleImage);
    turtleImage.ondragstart = function () {
      return false;
    };
    Applab.activeScreen().appendChild(turtleImage);
  }

  return canvas.getContext("2d");
};

applabTurtle.updateTurtleImage = function (turtleImage) {
  if (!turtleImage) {
    turtleImage = document.getElementById('turtleImage');
  }
  turtleImage.style.left = Applab.turtle.x - TURTLE_WIDTH / 2 + 'px';
  turtleImage.style.top = Applab.turtle.y - TURTLE_HEIGHT / 2 + 'px';
  var heading = Applab.turtle.heading + TURTLE_ROTATION_OFFSET;
  var transform = 'rotate(' + heading + 'deg)';
  turtleImage.style.transform = transform;
  turtleImage.style.msTransform = transform;
  turtleImage.style.webkitTransform = transform;
};

applabTurtle.turtleSetVisibility = function (visible) {
  // call this first to ensure there is a turtle (in case this is the first API)
  applabTurtle.getTurtleContext();
  var turtleImage = document.getElementById('turtleImage');
  turtleImage.style.visibility = visible ? 'visible' : 'hidden';
};

},{"../StudioApp":"/home/ubuntu/staging/apps/build/js/StudioApp.js","./commands":"/home/ubuntu/staging/apps/build/js/applab/commands.js"}],"/home/ubuntu/staging/apps/build/js/applab/commands.js":[function(require,module,exports){
'use strict';

var studioApp = require('../StudioApp').singleton;
var AppStorage = require('./appStorage');
var apiTimeoutList = require('../timeoutList');
var ChartApi = require('./ChartApi');
var EventSandboxer = require('./EventSandboxer');
var RGBColor = require('./rgbcolor.js');
var codegen = require('../codegen');
var sanitizeHtml = require('./sanitizeHtml');
var utils = require('../utils');
var elementLibrary = require('./designElements/library');
var elementUtils = require('./designElements/elementUtils');
var setPropertyDropdown = require('./setPropertyDropdown');
var assetPrefix = require('../assetManagement/assetPrefix');

var errorHandler = require('./errorHandler');
var outputError = errorHandler.outputError;
var ErrorLevel = errorHandler.ErrorLevel;
var applabTurtle = require('./applabTurtle');
var ChangeEventHandler = require('./ChangeEventHandler');
var colors = require('../sharedJsxStyles').colors;

var OPTIONAL = true;

var applabCommands = module.exports;

/**
 * Lookup table of asset URLs. If an asset isn't listed here, initiate a
 * separate request to ensure it is downloaded without interruption. Otherwise
 * a quickly changing src could cancel the download before it can be cached by
 * the browser.
 */
var toBeCached = {};

/**
 * Utility for converting browser events into standardized, sandboxed event
 * objects for use in student code.
 * @type {EventSandboxer}
 */
var eventSandboxer = new EventSandboxer();

/**
 * @param value
 * @returns {boolean} true if value is a string, number, boolean, undefined or null.
 *     returns false for other values, including instances of Number or String.
 */
function isPrimitiveType(value) {
  switch (typeof value) {
    case 'string':
    case 'number':
    case 'boolean':
    case 'undefined':
      return true;
    case 'object':
      return value === null;
    default:
      return false;
  }
}

/**
 * Validates a user function paramer, and outputs error to the console if invalid
 * @returns {boolean} True if param passed validation.
 */
function apiValidateType(opts, funcName, varName, varValue, expectedType, opt) {
  var validatedTypeKey = 'validated_type_' + varName;
  if (typeof opts[validatedTypeKey] === 'undefined') {
    var properType;
    switch (expectedType) {
      case 'color':
        // Special handling for colors, must be a string and a valid RGBColor:
        properType = typeof varValue === 'string';
        if (properType) {
          var color = new RGBColor(varValue);
          properType = color.ok;
        }
        break;
      case 'uistring':
        properType = typeof varValue === 'string' || typeof varValue === 'number' || typeof varValue === 'boolean';
        break;
      case 'number':
        properType = typeof varValue === 'number' || typeof varValue === 'string' && !isNaN(varValue);
        break;
      case 'primitive':
        properType = isPrimitiveType(varValue);
        if (!properType) {
          // Ensure a descriptive error message is displayed.
          expectedType = 'string, number, boolean, undefined or null';
        }
        break;
      case 'array':
        properType = Array.isArray(varValue);
        break;
      default:
        properType = typeof varValue === expectedType;
        break;
    }
    properType = properType || opt === OPTIONAL && typeof varValue === 'undefined';
    if (!properType) {
      var line = 1 + Applab.JSInterpreter.getNearestUserCodeLine();
      var errorString = funcName + "() " + varName + " parameter value (" + varValue + ") is not a " + expectedType + ".";
      outputError(errorString, ErrorLevel.WARNING, line);
    }
    opts[validatedTypeKey] = properType;
  }
  return !!opts[validatedTypeKey];
}

function apiValidateTypeAndRange(opts, funcName, varName, varValue, expectedType, minValue, maxValue, opt) {
  var validatedTypeKey = 'validated_type_' + varName;
  var validatedRangeKey = 'validated_range_' + varName;
  apiValidateType(opts, funcName, varName, varValue, expectedType, opt);
  if (opts[validatedTypeKey] && typeof opts[validatedRangeKey] === 'undefined') {
    var inRange = typeof minValue === 'undefined' || varValue >= minValue;
    if (inRange) {
      inRange = typeof maxValue === 'undefined' || varValue <= maxValue;
    }
    inRange = inRange || opt === OPTIONAL && typeof varValue === 'undefined';
    if (!inRange) {
      var line = 1 + Applab.JSInterpreter.getNearestUserCodeLine();
      var errorString = funcName + "() " + varName + " parameter value (" + varValue + ") is not in the expected range.";
      outputError(errorString, ErrorLevel.WARNING, line);
    }
    opts[validatedRangeKey] = inRange;
  }
}

function apiValidateActiveCanvas(opts, funcName) {
  var validatedActiveCanvasKey = 'validated_active_canvas';
  if (!opts || typeof opts[validatedActiveCanvasKey] === 'undefined') {
    var activeCanvas = Boolean(Applab.activeCanvas);
    if (!activeCanvas) {
      var line = 1 + Applab.JSInterpreter.getNearestUserCodeLine();
      var errorString = funcName + "() called without an active canvas. Call " + "createCanvas() first.";
      outputError(errorString, ErrorLevel.WARNING, line);
    }
    if (opts) {
      opts[validatedActiveCanvasKey] = activeCanvas;
    }
  }
}

function apiValidateDomIdExistence(opts, funcName, varName, id, shouldExist) {
  var divApplab = document.getElementById('divApplab');
  var validatedTypeKey = 'validated_type_' + varName;
  var validatedDomKey = 'validated_id_' + varName;
  apiValidateType(opts, funcName, varName, id, 'string');
  if (opts[validatedTypeKey] && typeof opts[validatedDomKey] === 'undefined') {
    var element = document.getElementById(id);

    var existsInApplab = Boolean(element && divApplab.contains(element));
    var options = {
      allowCodeElements: true,
      allowDesignPrefix: true,
      allowDesignElements: true,
      allowTurtleCanvas: Boolean(opts.turtleCanvas)
    };
    var existsOutsideApplab = !elementUtils.isIdAvailable(id, options);

    var valid = !existsOutsideApplab && shouldExist == existsInApplab;

    if (!valid) {
      var line = 1 + Applab.JSInterpreter.getNearestUserCodeLine();
      var errorString = "";
      if (existsOutsideApplab) {
        errorString = funcName + "() " + varName + " parameter refers to an id (" + id + ") which is already in use outside of Applab. Choose a different id.";
        throw new Error(errorString);
      } else {
        errorString = funcName + "() " + varName + " parameter refers to an id (" + id + ") which " + (existsInApplab ? "already exists." : "does not exist.");
        outputError(errorString, ErrorLevel.WARNING, line);
      }
    }
    opts[validatedDomKey] = valid;
  }
}

// (brent) We may in the future also provide a second option that allows you to
// reset the state of the screen to it's original (design mode) state.
applabCommands.setScreen = function (opts) {
  apiValidateDomIdExistence(opts, 'setScreen', 'screenId', opts.screenId, true);
  var element = document.getElementById(opts.screenId);
  var divApplab = document.getElementById('divApplab');
  if (!element || element.parentNode != divApplab) {
    return;
  }

  Applab.changeScreen(opts.screenId);
};

function reportUnsafeHtml(removed, unsafe, safe, warnings) {
  var currentLineNumber = getCurrentLineNumber(Applab.JSInterpreter);
  var msg = "The following lines of HTML were modified or removed:\n" + removed + "\noriginal html:\n" + unsafe + "\nmodified html:\n" + safe;
  if (warnings.length > 0) {
    msg += '\nwarnings:\n' + warnings.join('\n');
  }
  outputError(msg, ErrorLevel.WARNING, currentLineNumber);
}

applabCommands.container = function (opts) {
  if (opts.elementId) {
    apiValidateDomIdExistence(opts, 'container', 'id', opts.elementId, false);
  }
  var newDiv = document.createElement("div");
  if (typeof opts.elementId !== "undefined") {
    newDiv.id = opts.elementId;
  }
  var sanitized = sanitizeHtml(opts.html, reportUnsafeHtml, true /* rejectExistingIds */);
  newDiv.innerHTML = sanitized;
  newDiv.style.position = 'relative';

  return Boolean(Applab.activeScreen().appendChild(newDiv));
};

applabCommands.write = function (opts) {
  apiValidateType(opts, 'write', 'text', opts.html, 'uistring');
  return applabCommands.container(opts);
};

applabCommands.button = function (opts) {
  // PARAMNAME: button: id vs. buttonId
  apiValidateDomIdExistence(opts, 'button', 'id', opts.elementId, false);
  apiValidateType(opts, 'button', 'text', opts.text, 'uistring');

  var newButton = document.createElement("button");
  var textNode = document.createTextNode(opts.text);
  newButton.id = opts.elementId;
  newButton.style.position = 'relative';
  newButton.style.color = colors.white;
  newButton.style.backgroundColor = colors.teal;

  return Boolean(newButton.appendChild(textNode) && Applab.activeScreen().appendChild(newButton));
};

applabCommands.image = function (opts) {
  apiValidateDomIdExistence(opts, 'image', 'id', opts.elementId, false);
  apiValidateType(opts, 'image', 'id', opts.elementId, 'string');
  apiValidateType(opts, 'image', 'url', opts.src, 'string');

  var newImage = document.createElement("img");
  newImage.src = assetPrefix.fixPath(opts.src);
  newImage.setAttribute('data-canonical-image-url', opts.src);
  newImage.id = opts.elementId;
  newImage.style.position = 'relative';

  return Boolean(Applab.activeScreen().appendChild(newImage));
};

applabCommands.imageUploadButton = function (opts) {
  apiValidateDomIdExistence(opts, 'imageUploadButton', 'id', opts.elementId, false);
  // To avoid showing the ugly fileupload input element, we create a label
  // element with an img-upload class that will ensure it looks like a button
  var newLabel = document.createElement("label");
  var textNode = document.createTextNode(opts.text);
  newLabel.id = opts.elementId;
  newLabel.className = 'img-upload';
  newLabel.style.position = 'relative';

  // We then create an offscreen input element and make it a child of the new
  // label element
  var newInput = document.createElement("input");
  newInput.type = "file";
  newInput.accept = "image/*";
  newInput.capture = "camera";
  newInput.style.position = "absolute";
  newInput.style.left = "-9999px";

  return Boolean(newLabel.appendChild(newInput) && newLabel.appendChild(textNode) && Applab.activeScreen().appendChild(newLabel));
};

applabCommands.show = function (opts) {
  applabTurtle.turtleSetVisibility(true);
};

applabCommands.hide = function (opts) {
  applabTurtle.turtleSetVisibility(false);
};

applabCommands.moveTo = function (opts) {
  apiValidateType(opts, 'moveTo', 'x', opts.x, 'number');
  apiValidateType(opts, 'moveTo', 'y', opts.y, 'number');
  var ctx = applabTurtle.getTurtleContext();
  if (ctx) {
    ctx.beginPath();
    ctx.moveTo(Applab.turtle.x, Applab.turtle.y);
    Applab.turtle.x = opts.x;
    Applab.turtle.y = opts.y;
    ctx.lineTo(Applab.turtle.x, Applab.turtle.y);
    ctx.stroke();
    applabTurtle.updateTurtleImage();
  }
};

applabCommands.move = function (opts) {
  apiValidateType(opts, 'move', 'x', opts.x, 'number');
  apiValidateType(opts, 'move', 'y', opts.y, 'number');
  opts.x += Applab.turtle.x;
  opts.y += Applab.turtle.y;
  applabCommands.moveTo(opts);
};

applabCommands.moveForward = function (opts) {
  apiValidateType(opts, 'moveForward', 'pixels', opts.distance, 'number', OPTIONAL);
  var newOpts = {};
  var distance = 25;
  if (typeof opts.distance !== 'undefined') {
    distance = opts.distance;
  }
  newOpts.x = Applab.turtle.x + distance * Math.sin(2 * Math.PI * Applab.turtle.heading / 360);
  newOpts.y = Applab.turtle.y - distance * Math.cos(2 * Math.PI * Applab.turtle.heading / 360);
  applabCommands.moveTo(newOpts);
};

applabCommands.moveBackward = function (opts) {
  apiValidateType(opts, 'moveBackward', 'pixels', opts.distance, 'number', OPTIONAL);
  var distance = -25;
  if (typeof opts.distance !== 'undefined') {
    distance = -opts.distance;
  }
  applabCommands.moveForward({ 'distance': distance });
};

applabCommands.turnRight = function (opts) {
  apiValidateType(opts, 'turnRight', 'angle', opts.degrees, 'number', OPTIONAL);
  // call this first to ensure there is a turtle (in case this is the first API)
  applabTurtle.getTurtleContext();

  var degrees = 90;
  if (typeof opts.degrees !== 'undefined') {
    degrees = opts.degrees;
  }

  Applab.turtle.heading += degrees;
  Applab.turtle.heading = (Applab.turtle.heading + 360) % 360;
  applabTurtle.updateTurtleImage();
};

applabCommands.turnLeft = function (opts) {
  apiValidateType(opts, 'turnLeft', 'angle', opts.degrees, 'number', OPTIONAL);
  var degrees = -90;
  if (typeof opts.degrees !== 'undefined') {
    degrees = -opts.degrees;
  }
  applabCommands.turnRight({ 'degrees': degrees });
};

applabCommands.turnTo = function (opts) {
  apiValidateType(opts, 'turnTo', 'angle', opts.direction, 'number');
  var degrees = opts.direction - Applab.turtle.heading;
  applabCommands.turnRight({ 'degrees': degrees });
};

// Turn along an arc with a specified radius (by default, turn clockwise, so
// the center of the arc is 90 degrees clockwise of the current heading)
// if opts.counterclockwise, the center point is 90 degrees counterclockwise

applabCommands.arcRight = function (opts) {
  apiValidateType(opts, 'arcRight', 'angle', opts.degrees, 'number');
  apiValidateType(opts, 'arcRight', 'radius', opts.radius, 'number');

  // call this first to ensure there is a turtle (in case this is the first API)
  var centerAngle = opts.counterclockwise ? -90 : 90;
  var clockwiseDegrees = opts.counterclockwise ? -opts.degrees : opts.degrees;
  var ctx = applabTurtle.getTurtleContext();
  if (ctx) {
    var centerX = Applab.turtle.x + opts.radius * Math.sin(2 * Math.PI * (Applab.turtle.heading + centerAngle) / 360);
    var centerY = Applab.turtle.y - opts.radius * Math.cos(2 * Math.PI * (Applab.turtle.heading + centerAngle) / 360);

    var startAngle = 2 * Math.PI * (Applab.turtle.heading + (opts.counterclockwise ? 0 : 180)) / 360;
    var endAngle = startAngle + 2 * Math.PI * clockwiseDegrees / 360;

    ctx.beginPath();
    ctx.arc(centerX, centerY, opts.radius, startAngle, endAngle, opts.counterclockwise);
    ctx.stroke();

    Applab.turtle.heading = (Applab.turtle.heading + clockwiseDegrees + 360) % 360;
    var xMovement = opts.radius * Math.cos(2 * Math.PI * Applab.turtle.heading / 360);
    var yMovement = opts.radius * Math.sin(2 * Math.PI * Applab.turtle.heading / 360);
    Applab.turtle.x = centerX + (opts.counterclockwise ? xMovement : -xMovement);
    Applab.turtle.y = centerY + (opts.counterclockwise ? yMovement : -yMovement);
    applabTurtle.updateTurtleImage();
  }
};

applabCommands.arcLeft = function (opts) {
  apiValidateType(opts, 'arcLeft', 'angle', opts.degrees, 'number');
  apiValidateType(opts, 'arcLeft', 'radius', opts.radius, 'number');

  opts.counterclockwise = true;
  applabCommands.arcRight(opts);
};

applabCommands.getX = function (opts) {
  var ctx = applabTurtle.getTurtleContext();
  return Applab.turtle.x;
};

applabCommands.getY = function (opts) {
  var ctx = applabTurtle.getTurtleContext();
  return Applab.turtle.y;
};

applabCommands.getDirection = function (opts) {
  var ctx = applabTurtle.getTurtleContext();
  return Applab.turtle.heading;
};

applabCommands.dot = function (opts) {
  apiValidateTypeAndRange(opts, 'dot', 'radius', opts.radius, 'number', 0.0001);
  var ctx = applabTurtle.getTurtleContext();
  if (ctx && opts.radius > 0) {
    ctx.beginPath();
    if (Applab.turtle.penUpColor) {
      // If the pen is up and the color has been changed, use that color:
      ctx.strokeStyle = Applab.turtle.penUpColor;
    }
    var savedLineWidth = ctx.lineWidth;
    ctx.lineWidth = 1;
    ctx.arc(Applab.turtle.x, Applab.turtle.y, opts.radius, 0, 2 * Math.PI);
    ctx.fill();
    ctx.stroke();
    if (Applab.turtle.penUpColor) {
      // If the pen is up, reset strokeStyle back to transparent:
      ctx.strokeStyle = "rgba(255, 255, 255, 0)";
    }
    ctx.lineWidth = savedLineWidth;
    return true;
  }
};

applabCommands.penUp = function (opts) {
  var ctx = applabTurtle.getTurtleContext();
  if (ctx) {
    if (ctx.strokeStyle !== "rgba(255, 255, 255, 0)") {
      Applab.turtle.penUpColor = ctx.strokeStyle;
      ctx.strokeStyle = "rgba(255, 255, 255, 0)";
    }
  }
};

applabCommands.penDown = function (opts) {
  var ctx = applabTurtle.getTurtleContext();
  if (ctx && Applab.turtle.penUpColor) {
    ctx.strokeStyle = Applab.turtle.penUpColor;
    delete Applab.turtle.penUpColor;
  }
};

applabCommands.penWidth = function (opts) {
  apiValidateTypeAndRange(opts, 'penWidth', 'width', opts.width, 'number', 0.0001);
  var ctx = applabTurtle.getTurtleContext();
  if (ctx) {
    ctx.lineWidth = opts.width;
  }
};

applabCommands.penColorInternal = function (rgbstring) {
  var ctx = applabTurtle.getTurtleContext();
  if (ctx) {
    if (Applab.turtle.penUpColor) {
      // pen is currently up, store this color for pen down
      Applab.turtle.penUpColor = rgbstring;
    } else {
      ctx.strokeStyle = rgbstring;
    }
    ctx.fillStyle = rgbstring;
  }
};

applabCommands.penColor = function (opts) {
  apiValidateType(opts, 'penColor', 'color', opts.color, 'color');
  applabCommands.penColorInternal(opts.color);
};

applabCommands.penRGB = function (opts) {
  // PARAMNAME: penRGB: red vs. r
  // PARAMNAME: penRGB: green vs. g
  // PARAMNAME: penRGB: blue vs. b
  apiValidateTypeAndRange(opts, 'penRGB', 'r', opts.r, 'number', 0, 255);
  apiValidateTypeAndRange(opts, 'penRGB', 'g', opts.g, 'number', 0, 255);
  apiValidateTypeAndRange(opts, 'penRGB', 'b', opts.b, 'number', 0, 255);
  apiValidateTypeAndRange(opts, 'penRGB', 'a', opts.a, 'number', 0, 1, OPTIONAL);
  var alpha = typeof opts.a === 'undefined' ? 1 : opts.a;
  var rgbstring = "rgba(" + opts.r + "," + opts.g + "," + opts.b + "," + alpha + ")";
  applabCommands.penColorInternal(rgbstring);
};

applabCommands.speed = function (opts) {
  // DOCBUG: range is 0-100, not 1-100
  apiValidateTypeAndRange(opts, 'speed', 'value', opts.percent, 'number', 0, 100);
  if (opts.percent >= 0 && opts.percent <= 100) {
    Applab.setStepSpeed(opts.percent / 100);
  }
};

applabCommands.createCanvas = function (opts) {
  // PARAMNAME: createCanvas: id vs. canvasId
  apiValidateDomIdExistence(opts, 'createCanvas', 'canvasId', opts.elementId, false);
  apiValidateType(opts, 'createCanvas', 'width', width, 'number', OPTIONAL);
  apiValidateType(opts, 'createCanvas', 'height', height, 'number', OPTIONAL);

  var newElement = document.createElement("canvas");
  var ctx = newElement.getContext("2d");
  if (newElement && ctx) {
    newElement.id = opts.elementId;
    // default width/height if params are missing
    var width = opts.width || Applab.appWidth;
    var height = opts.height || Applab.footerlessAppHeight;
    newElement.width = width;
    newElement.height = height;
    newElement.setAttribute('width', width + 'px');
    newElement.setAttribute('height', height + 'px');
    // Unlike other elements, we use absolute position, otherwise our z-index
    // doesn't work
    newElement.style.position = 'absolute';
    if (!opts.turtleCanvas) {
      // set transparent fill by default (unless it is the turtle canvas):
      ctx.fillStyle = "rgba(255, 255, 255, 0)";
    }
    ctx.lineCap = "round";

    if (!Applab.activeCanvas && !opts.turtleCanvas) {
      // If there is no active canvas and this isn't the turtleCanvas,
      // we'll make this the active canvas for subsequent API calls:
      Applab.activeCanvas = newElement;
    }

    return Boolean(Applab.activeScreen().appendChild(newElement));
  }
  return false;
};

applabCommands.setActiveCanvas = function (opts) {
  var divApplab = document.getElementById('divApplab');
  // PARAMNAME: setActiveCanvas: id vs. canvasId
  apiValidateDomIdExistence(opts, 'setActiveCanvas', 'canvasId', opts.elementId, true);
  var canvas = document.getElementById(opts.elementId);
  if (divApplab.contains(canvas)) {
    Applab.activeCanvas = canvas;
    return true;
  }
  return false;
};

applabCommands.line = function (opts) {
  apiValidateActiveCanvas(opts, 'line');
  apiValidateType(opts, 'line', 'x1', opts.x1, 'number');
  apiValidateType(opts, 'line', 'x2', opts.x2, 'number');
  apiValidateType(opts, 'line', 'y1', opts.y1, 'number');
  apiValidateType(opts, 'line', 'y2', opts.y2, 'number');
  var ctx = Applab.activeCanvas && Applab.activeCanvas.getContext("2d");
  if (ctx) {
    ctx.beginPath();
    ctx.moveTo(opts.x1, opts.y1);
    ctx.lineTo(opts.x2, opts.y2);
    ctx.stroke();
    return true;
  }
  return false;
};

applabCommands.circle = function (opts) {
  apiValidateActiveCanvas(opts, 'circle');
  // PARAMNAME: circle: centerX vs. x
  // PARAMNAME: circle: centerY vs. y
  apiValidateType(opts, 'circle', 'centerX', opts.x, 'number');
  apiValidateType(opts, 'circle', 'centerY', opts.y, 'number');
  apiValidateType(opts, 'circle', 'radius', opts.radius, 'number');
  var ctx = Applab.activeCanvas && Applab.activeCanvas.getContext("2d");
  if (ctx) {
    ctx.beginPath();
    ctx.arc(opts.x, opts.y, opts.radius, 0, 2 * Math.PI);
    ctx.fill();
    ctx.stroke();
    return true;
  }
  return false;
};

applabCommands.rect = function (opts) {
  apiValidateActiveCanvas(opts, 'rect');
  // PARAMNAME: rect: upperLeftX vs. x
  // PARAMNAME: rect: upperLeftY vs. y
  apiValidateType(opts, 'rect', 'upperLeftX', opts.x, 'number');
  apiValidateType(opts, 'rect', 'upperLeftY', opts.y, 'number');
  apiValidateType(opts, 'rect', 'width', opts.width, 'number');
  apiValidateType(opts, 'rect', 'height', opts.height, 'number');
  var ctx = Applab.activeCanvas && Applab.activeCanvas.getContext("2d");
  if (ctx) {
    ctx.beginPath();
    ctx.rect(opts.x, opts.y, opts.width, opts.height);
    ctx.fill();
    ctx.stroke();
    return true;
  }
  return false;
};

applabCommands.setStrokeWidth = function (opts) {
  apiValidateActiveCanvas(opts, 'setStrokeWidth');
  apiValidateTypeAndRange(opts, 'setStrokeWidth', 'width', opts.width, 'number', 0.0001);
  var ctx = Applab.activeCanvas && Applab.activeCanvas.getContext("2d");
  if (ctx) {
    ctx.lineWidth = opts.width;
    return true;
  }
  return false;
};

applabCommands.setStrokeColor = function (opts) {
  apiValidateActiveCanvas(opts, 'setStrokeColor');
  apiValidateType(opts, 'setStrokeColor', 'color', opts.color, 'color');
  var ctx = Applab.activeCanvas && Applab.activeCanvas.getContext("2d");
  if (ctx) {
    ctx.strokeStyle = String(opts.color);
    return true;
  }
  return false;
};

applabCommands.setFillColor = function (opts) {
  apiValidateActiveCanvas(opts, 'setFillColor');
  apiValidateType(opts, 'setFillColor', 'color', opts.color, 'color');
  var ctx = Applab.activeCanvas && Applab.activeCanvas.getContext("2d");
  if (ctx) {
    ctx.fillStyle = String(opts.color);
    return true;
  }
  return false;
};

applabCommands.clearCanvas = function (opts) {
  apiValidateActiveCanvas(opts, 'clearCanvas');
  var ctx = Applab.activeCanvas && Applab.activeCanvas.getContext("2d");
  if (ctx) {
    ctx.clearRect(0, 0, Applab.activeCanvas.width, Applab.activeCanvas.height);
    return true;
  }
  return false;
};

/**
 * Semi-deprecated. We still support this API, but no longer expose it in the
 * toolbox. Replaced by drawImageURL
 */
applabCommands.drawImage = function (opts) {
  var divApplab = document.getElementById('divApplab');
  // PARAMNAME: drawImage: imageId vs. id
  apiValidateActiveCanvas(opts, 'drawImage');
  apiValidateDomIdExistence(opts, 'drawImage', 'id', opts.imageId, true);
  apiValidateType(opts, 'drawImage', 'x', opts.x, 'number');
  apiValidateType(opts, 'drawImage', 'y', opts.y, 'number');
  var image = document.getElementById(opts.imageId);
  var ctx = Applab.activeCanvas && Applab.activeCanvas.getContext("2d");
  if (ctx && divApplab.contains(image)) {
    var xScale, yScale;
    xScale = yScale = 1;
    if (typeof opts.width !== 'undefined') {
      apiValidateType(opts, 'drawImage', 'width', opts.width, 'number');
      xScale = xScale * (opts.width / image.width);
    }
    if (typeof opts.height !== 'undefined') {
      apiValidateType(opts, 'drawImage', 'height', opts.height, 'number');
      yScale = yScale * (opts.height / image.height);
    }
    ctx.save();
    ctx.setTransform(xScale, 0, 0, yScale, opts.x, opts.y);
    ctx.drawImage(image, 0, 0);
    ctx.restore();
    return true;
  }
  return false;
};

/**
 * We support a couple different version of this API
 * drawImageURL(url, [callback])
 * drawImaegURL(url, x, y, width, height, [calback])
 */
applabCommands.drawImageURL = function (opts) {
  var divApplab = document.getElementById('divApplab');

  apiValidateActiveCanvas(opts, 'drawImageURL');
  apiValidateType(opts, 'drawImageURL', 'url', opts.url, 'string');
  apiValidateType(opts, 'drawImageURL', 'x', opts.x, 'number', OPTIONAL);
  apiValidateType(opts, 'drawImageURL', 'y', opts.y, 'number', OPTIONAL);
  apiValidateType(opts, 'drawImageURL', 'width', opts.width, 'number', OPTIONAL);
  apiValidateType(opts, 'drawImageURL', 'height', opts.height, 'number', OPTIONAL);
  apiValidateType(opts, 'drawImageURL', 'callback', opts.callback, 'function', OPTIONAL);

  var jsInterpreter = Applab.JSInterpreter;
  var callback = function callback(success) {
    if (opts.callback) {
      opts.callback.call(null, success);
    }
  };

  var image = new Image();
  image.src = assetPrefix.fixPath(opts.url);
  image.onload = function () {
    var ctx = Applab.activeCanvas && Applab.activeCanvas.getContext("2d");
    if (!ctx) {
      return;
    }
    var x = utils.valueOr(opts.x, 0);
    var y = utils.valueOr(opts.y, 0);

    // if given a width/height use that
    var renderWidth = utils.valueOr(opts.width, image.width);
    var renderHeight = utils.valueOr(opts.height, image.height);

    // if undefined, extra width/height from image and potentially resize to
    // fit
    if (opts.width === undefined || opts.height === undefined) {
      var aspectRatio = image.width / image.height;
      if (aspectRatio > 1) {
        renderWidth = Math.min(Applab.activeCanvas.width, image.width);
        renderHeight = renderWidth / aspectRatio;
      } else {
        renderHeight = Math.min(Applab.activeCanvas.height, image.height);
        renderWidth = renderHeight * aspectRatio;
      }
    }

    ctx.save();
    ctx.setTransform(renderWidth / image.width, 0, 0, renderHeight / image.height, x, y);
    ctx.drawImage(image, 0, 0);
    ctx.restore();

    callback(true);
  };
  image.onerror = function () {
    callback(false);
  };
};

applabCommands.getImageData = function (opts) {
  apiValidateActiveCanvas(opts, 'getImageData');
  // PARAMNAME: getImageData: all params + doc bugs
  apiValidateType(opts, 'getImageData', 'x', opts.x, 'number');
  apiValidateType(opts, 'getImageData', 'y', opts.y, 'number');
  apiValidateType(opts, 'getImageData', 'width', opts.width, 'number');
  apiValidateType(opts, 'getImageData', 'height', opts.height, 'number');
  var ctx = Applab.activeCanvas && Applab.activeCanvas.getContext("2d");
  if (ctx) {
    return ctx.getImageData(opts.x, opts.y, opts.width, opts.height);
  }
};

applabCommands.putImageData = function (opts) {
  apiValidateActiveCanvas(opts, 'putImageData');
  // PARAMNAME: putImageData: imageData vs. imgData
  // PARAMNAME: putImageData: startX vs. x
  // PARAMNAME: putImageData: startY vs. y
  apiValidateType(opts, 'putImageData', 'imgData', opts.imageData, 'object');
  apiValidateType(opts, 'putImageData', 'x', opts.x, 'number');
  apiValidateType(opts, 'putImageData', 'y', opts.y, 'number');
  var ctx = Applab.activeCanvas && Applab.activeCanvas.getContext("2d");
  if (ctx) {
    // Create tmpImageData and initialize it because opts.imageData is not
    // going to be a real ImageData object if it came from the interpreter
    var tmpImageData = ctx.createImageData(opts.imageData.width, opts.imageData.height);
    tmpImageData.data.set(opts.imageData.data);
    return ctx.putImageData(tmpImageData, opts.x, opts.y);
  }
};

applabCommands.textInput = function (opts) {
  // PARAMNAME: textInput: id vs. inputId
  apiValidateDomIdExistence(opts, 'textInput', 'id', opts.elementId, false);
  apiValidateType(opts, 'textInput', 'text', opts.text, 'uistring');

  var newInput = document.createElement("input");
  newInput.value = opts.text;
  newInput.id = opts.elementId;
  newInput.style.position = 'relative';
  newInput.style.height = '30px';
  newInput.style.width = '200px';

  return Boolean(Applab.activeScreen().appendChild(newInput));
};

applabCommands.textLabel = function (opts) {
  // PARAMNAME: textLabel: id vs. labelId
  apiValidateDomIdExistence(opts, 'textLabel', 'id', opts.elementId, false);
  apiValidateType(opts, 'textLabel', 'text', opts.text, 'uistring');
  if (typeof opts.forId !== 'undefined') {
    apiValidateDomIdExistence(opts, 'textLabel', 'forId', opts.forId, true);
  }

  var newLabel = document.createElement("label");
  var textNode = document.createTextNode(opts.text);
  newLabel.id = opts.elementId;
  newLabel.style.position = 'relative';
  var forElement = document.getElementById(opts.forId);
  if (forElement && Applab.activeScreen().contains(forElement)) {
    newLabel.setAttribute('for', opts.forId);
  }

  return Boolean(newLabel.appendChild(textNode) && Applab.activeScreen().appendChild(newLabel));
};

applabCommands.checkbox = function (opts) {
  // PARAMNAME: checkbox: id vs. checkboxId
  apiValidateDomIdExistence(opts, 'checkbox', 'id', opts.elementId, false);
  // apiValidateType(opts, 'checkbox', 'checked', opts.checked, 'boolean');

  var newCheckbox = document.createElement("input");
  newCheckbox.setAttribute("type", "checkbox");
  newCheckbox.checked = opts.checked;
  newCheckbox.id = opts.elementId;
  newCheckbox.style.position = 'relative';

  return Boolean(Applab.activeScreen().appendChild(newCheckbox));
};

applabCommands.radioButton = function (opts) {
  apiValidateDomIdExistence(opts, 'radioButton', 'id', opts.elementId, false);
  // apiValidateType(opts, 'radioButton', 'checked', opts.checked, 'boolean');
  apiValidateType(opts, 'radioButton', 'group', opts.name, 'string', OPTIONAL);

  var newRadio = document.createElement("input");
  newRadio.setAttribute("type", "radio");
  newRadio.name = opts.name;
  newRadio.checked = opts.checked;
  newRadio.id = opts.elementId;
  newRadio.style.position = 'relative';

  return Boolean(Applab.activeScreen().appendChild(newRadio));
};

applabCommands.dropdown = function (opts) {
  // PARAMNAME: dropdown: id vs. dropdownId
  apiValidateDomIdExistence(opts, 'dropdown', 'id', opts.elementId, false);

  var newSelect = document.createElement("select");

  if (opts.optionsArray) {
    for (var i = 0; i < opts.optionsArray.length; i++) {
      var option = document.createElement("option");
      apiValidateType(opts, 'dropdown', 'option_' + (i + 1), opts.optionsArray[i], 'uistring');
      option.text = opts.optionsArray[i];
      newSelect.add(option);
    }
  }
  newSelect.id = opts.elementId;
  newSelect.style.position = 'relative';
  newSelect.style.color = colors.white;
  newSelect.style.backgroundColor = colors.teal;

  return Boolean(Applab.activeScreen().appendChild(newSelect));
};

applabCommands.getAttribute = function (opts) {
  var divApplab = document.getElementById('divApplab');
  var element = document.getElementById(opts.elementId);
  var attribute = String(opts.attribute);
  return divApplab.contains(element) ? element[attribute] : false;
};

// Whitelist of HTML Element attributes which can be modified, to
// prevent DOM manipulation which would violate the sandbox.
var MUTABLE_ATTRIBUTES = ['scrollTop'];

applabCommands.setAttribute = function (opts) {
  var divApplab = document.getElementById('divApplab');
  var element = document.getElementById(opts.elementId);
  var attribute = String(opts.attribute);
  if (divApplab.contains(element) && MUTABLE_ATTRIBUTES.indexOf(attribute) !== -1) {
    element[attribute] = opts.value;
    return true;
  }
  return false;
};

applabCommands.getText = function (opts) {
  var divApplab = document.getElementById('divApplab');
  apiValidateDomIdExistence(opts, 'getText', 'id', opts.elementId, true);

  var element = document.getElementById(opts.elementId);
  if (divApplab.contains(element)) {
    if (element.tagName === 'INPUT' || element.tagName === 'SELECT') {
      return String(element.value);
    } else if (element.tagName === 'IMG') {
      return String(element.alt);
    } else {
      return applabCommands.getElementInnerText_(element);
    }
  }
  return false;
};

applabCommands.setText = function (opts) {
  var divApplab = document.getElementById('divApplab');
  apiValidateDomIdExistence(opts, 'setText', 'id', opts.elementId, true);
  apiValidateType(opts, 'setText', 'text', opts.text, 'uistring');

  var element = document.getElementById(opts.elementId);
  if (divApplab.contains(element)) {
    if (element.tagName === 'INPUT' || element.tagName === 'SELECT') {
      element.value = opts.text;
    } else if (element.tagName === 'IMG') {
      element.alt = opts.text;
    } else {
      applabCommands.setElementInnerText_(element, opts.text);
    }
    return true;
  }
  return false;
};

applabCommands.getNumber = function (opts) {
  apiValidateDomIdExistence(opts, 'getNumber', 'id', opts.elementId, true);
  return parseFloat(applabCommands.getText(opts), 10);
};

applabCommands.setNumber = function (opts) {
  apiValidateDomIdExistence(opts, 'setNumber', 'id', opts.elementId, true);
  apiValidateType(opts, 'setNumber', 'value', opts.number, 'number');
  opts.text = opts.number;
  return applabCommands.setText(opts);
};

/**
 * Attempts to emulate Chrome's version of innerText by way of innerHTML, only
 * for the simplified case of plain text content (in, for example, a
 * contentEditable div).
 * @param {Element} element
 * @private
 */
applabCommands.getElementInnerText_ = function (element) {
  return utils.unescapeText(element.innerHTML);
};

/**
 * Attempts to emulate Chrome's version of innerText by way of innerHTML, only
 * for the simplified case of plain text content (in, for example, a
 * contentEditable div).
 * @param {Element} element
 * @param {string} newText
 * @private
 */
applabCommands.setElementInnerText_ = function (element, newText) {
  element.innerHTML = utils.escapeText(newText.toString());
};

applabCommands.getChecked = function (opts) {
  var divApplab = document.getElementById('divApplab');
  apiValidateDomIdExistence(opts, 'getChecked', 'id', opts.elementId, true);

  var element = document.getElementById(opts.elementId);
  if (divApplab.contains(element) && element.tagName === 'INPUT') {
    return element.checked;
  }
  return false;
};

applabCommands.setChecked = function (opts) {
  var divApplab = document.getElementById('divApplab');
  apiValidateDomIdExistence(opts, 'setChecked', 'id', opts.elementId, true);
  // apiValidateType(opts, 'setChecked', 'checked', opts.checked, 'boolean');

  var element = document.getElementById(opts.elementId);
  if (divApplab.contains(element) && element.tagName === 'INPUT') {
    element.checked = opts.checked;
    return true;
  }
  return false;
};

applabCommands.getImageURL = function (opts) {
  var divApplab = document.getElementById('divApplab');
  // PARAMNAME: getImageURL: id vs. imageId
  apiValidateDomIdExistence(opts, 'getImageURL', 'id', opts.elementId, true);

  var element = document.getElementById(opts.elementId);
  if (divApplab.contains(element)) {
    // We return a URL if it is an IMG element or our special img-upload label
    if (element.tagName === 'IMG') {
      return element.getAttribute('data-canonical-image-url');
    } else if (element.tagName === 'LABEL' && element.className === 'img-upload') {
      var fileObj = element.children[0].files[0];
      if (fileObj) {
        return window.URL.createObjectURL(fileObj);
      }
    }
  }
};

applabCommands.setImageURL = function (opts) {
  var divApplab = document.getElementById('divApplab');
  apiValidateDomIdExistence(opts, 'setImageURL', 'id', opts.elementId, true);
  apiValidateType(opts, 'setImageURL', 'url', opts.src, 'string');

  var element = document.getElementById(opts.elementId);
  if (divApplab.contains(element) && element.tagName === 'IMG') {
    element.src = assetPrefix.fixPath(opts.src);
    element.setAttribute('data-canonical-image-url', opts.src);

    if (!toBeCached[element.src]) {
      var img = new Image();
      img.src = element.src;
      toBeCached[element.src] = true;
    }

    return true;
  }
  return false;
};

applabCommands.playSound = function (opts) {
  apiValidateType(opts, 'playSound', 'url', opts.url, 'string');

  if (studioApp.cdoSounds) {
    var url = assetPrefix.fixPath(opts.url);
    if (studioApp.cdoSounds.isPlayingURL(url)) {
      return;
    }

    studioApp.cdoSounds.playURL(url, {
      volume: 1.0,
      // TODO: Re-enable forceHTML5 after Varnish 4.1 upgrade.
      //       See Pivotal #108279582
      //
      //       HTML5 audio is not working for user-uploaded MP3s due to a bug in
      //       Varnish 4.0 with certain forms of the Range request header.
      //
      //       By commenting this line out, we re-enable Web Audio API in App
      //       Lab, which has the following effects:
      //       GOOD: Web Audio should not use the Range header so it won't hit
      //             the bug.
      //       BAD: This disables cross-domain audio loading (hotlinking from an
      //            App Lab app to an audio asset on another site) so it might
      //            break some existing apps.  This should be less problematic
      //            since we now allow students to upload and serve audio assets
      //            from our domain via the Assets API now.
      //
      // forceHTML5: true,
      allowHTML5Mobile: true
    });
  }
};

applabCommands.innerHTML = function (opts) {
  var divApplab = document.getElementById('divApplab');
  var div = document.getElementById(opts.elementId);
  if (divApplab.contains(div)) {
    div.innerHTML = sanitizeHtml(opts.html, reportUnsafeHtml, true /* rejectExistingIds */);
    return true;
  }
  return false;
};

applabCommands.deleteElement = function (opts) {
  var divApplab = document.getElementById('divApplab');
  apiValidateDomIdExistence(opts, 'deleteElement', 'id', opts.elementId, true);

  var div = document.getElementById(opts.elementId);
  if (divApplab.contains(div)) {
    // Special check to see if the active canvas is being deleted
    if (div == Applab.activeCanvas || div.contains(Applab.activeCanvas)) {
      delete Applab.activeCanvas;
    }
    return Boolean(div.parentElement.removeChild(div));
  }
  return false;
};

applabCommands.showElement = function (opts) {
  var divApplab = document.getElementById('divApplab');
  apiValidateDomIdExistence(opts, 'showElement', 'id', opts.elementId, true);

  var div = document.getElementById(opts.elementId);
  if (divApplab.contains(div)) {
    div.style.visibility = 'visible';
    return true;
  }
  return false;
};

applabCommands.hideElement = function (opts) {
  var divApplab = document.getElementById('divApplab');
  apiValidateDomIdExistence(opts, 'hideElement', 'id', opts.elementId, true);

  var div = document.getElementById(opts.elementId);
  if (divApplab.contains(div)) {
    div.style.visibility = 'hidden';
    return true;
  }
  return false;
};

applabCommands.setStyle = function (opts) {
  var divApplab = document.getElementById('divApplab');
  var div = document.getElementById(opts.elementId);
  if (divApplab.contains(div)) {
    div.style.cssText += opts.style;
    return true;
  }
  return false;
};

applabCommands.setParent = function (opts) {
  var divApplab = document.getElementById('divApplab');
  var div = document.getElementById(opts.elementId);
  var divNewParent = document.getElementById(opts.parentId);
  if (divApplab.contains(div) && divApplab.contains(divNewParent)) {
    return Boolean(div.parentElement.removeChild(div) && divNewParent.appendChild(div));
  }
  return false;
};

applabCommands.setPosition = function (opts) {
  var divApplab = document.getElementById('divApplab');
  apiValidateDomIdExistence(opts, 'setPosition', 'id', opts.elementId, true);
  apiValidateType(opts, 'setPosition', 'x', opts.left, 'number');
  apiValidateType(opts, 'setPosition', 'y', opts.top, 'number');

  var el = document.getElementById(opts.elementId);
  if (divApplab.contains(el)) {
    el.style.position = 'absolute';
    el.style.left = opts.left + 'px';
    el.style.top = opts.top + 'px';

    // if we have a width and/or height given, validate args and setSize
    if (opts.width !== undefined || opts.height !== undefined) {
      apiValidateType(opts, 'setPosition', 'width', opts.width, 'number', OPTIONAL);
      apiValidateType(opts, 'setPosition', 'height', opts.height, 'number', OPTIONAL);
      setSize_(opts.elementId, opts.width, opts.height);
    }
    return true;
  }
  return false;
};

applabCommands.setSize = function (opts) {
  apiValidateType(opts, 'setSize', 'width', opts.width, 'number');
  apiValidateType(opts, 'setSize', 'height', opts.height, 'number');
  setSize_(opts.elementId, opts.width, opts.height);

  return true;
};

/**
 * Logic shared between setPosition and setSize for setting the size
 */
function setSize_(elementId, width, height) {
  var element = document.getElementById(elementId);
  var divApplab = document.getElementById('divApplab');
  if (divApplab.contains(element)) {
    element.style.width = width + 'px';
    element.style.height = height + 'px';
  }
}

applabCommands.setProperty = function (opts) {
  apiValidateDomIdExistence(opts, 'setProperty', 'id', opts.elementId, true);
  apiValidateType(opts, 'setProperty', 'property', opts.property, 'string');

  var elementId = opts.elementId;
  var property = opts.property;
  var value = opts.value;

  var element = document.getElementById(elementId);
  if (!element) {
    return;
  }

  var info = setPropertyDropdown.getInternalPropertyInfo(element, property);
  if (!info) {
    var currentLineNumber = getCurrentLineNumber(Applab.JSInterpreter);
    outputError('Cannot set property "' + property + '" on element "' + elementId + '".', ErrorLevel.ERROR, currentLineNumber);
    return;
  }

  var valid = apiValidateType(opts, 'setProperty', 'value', opts.value, info.type);
  if (!valid) {
    return;
  }

  Applab.updateProperty(element, info.internalName, value);
};

applabCommands.getXPosition = function (opts) {
  var divApplab = document.getElementById('divApplab');
  apiValidateDomIdExistence(opts, 'getXPosition', 'id', opts.elementId, true);

  var div = document.getElementById(opts.elementId);
  if (divApplab.contains(div)) {
    var x = div.offsetLeft;
    while (div && div !== divApplab) {
      // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent
      // This property will return null on Webkit if the element is hidden
      // (the style.display of this element or any ancestor is "none") or if the
      // style.position of the element itself is set to "fixed".
      // This property will return null on Internet Explorer (9) if the
      // style.position of the element itself is set to "fixed".
      // (Having display:none does not affect this browser.)
      div = div.offsetParent;
      if (div) {
        x += div.offsetLeft;
      }
    }
    return x;
  }
  return 0;
};

applabCommands.getYPosition = function (opts) {
  var divApplab = document.getElementById('divApplab');
  apiValidateDomIdExistence(opts, 'getYPosition', 'id', opts.elementId, true);

  var div = document.getElementById(opts.elementId);
  if (divApplab.contains(div)) {
    var y = div.offsetTop;
    while (div && div !== divApplab) {
      div = div.offsetParent;
      if (div) {
        y += div.offsetTop;
      }
    }
    return y;
  }
  return 0;
};

applabCommands.onEventFired = function (opts, e) {
  var funcArgs = opts.extraArgs;
  if (typeof e != 'undefined') {
    eventSandboxer.setTransformFromElement(document.getElementById('divApplab'));
    var applabEvent = eventSandboxer.sandboxEvent(e);

    // Push a function call on the queue with an array of arguments consisting
    // of the applabEvent parameter (and any extraArgs originally supplied)
    funcArgs = [applabEvent].concat(opts.extraArgs);
  }
  // Call the callback function:
  return opts.func.apply(null, funcArgs);
};

applabCommands.onEvent = function (opts) {
  var divApplab = document.getElementById('divApplab');
  // Special case the id of 'body' to mean the app's container (divApplab)
  // TODO (cpirich): apply this logic more broadly (setStyle, etc.)
  if (opts.elementId === 'body') {
    opts.elementId = 'divApplab';
  } else {
    apiValidateDomIdExistence(opts, 'onEvent', 'id', opts.elementId, true);
  }
  apiValidateType(opts, 'onEvent', 'type', opts.eventName, 'string');
  // PARAMNAME: onEvent: callback vs. callbackFunction
  apiValidateType(opts, 'onEvent', 'callback', opts.func, 'function');
  var domElement = document.getElementById(opts.elementId);
  if (divApplab.contains(domElement)) {
    var elementType = elementLibrary.getElementType(domElement);
    if ((elementType === elementLibrary.ElementType.TEXT_INPUT || elementType === elementLibrary.ElementType.TEXT_AREA) && opts.eventName === 'change') {
      // contentEditable divs don't generate a change event, and change events
      // on text inputs behave differently across browsers, so synthesize a
      // change event here.
      var callback = applabCommands.onEventFired.bind(this, opts);
      ChangeEventHandler.addChangeEventHandler(domElement, callback);
      return true;
    }
    switch (opts.eventName) {
      /*
      Check for a specific set of Hammer v1 event names (full set below) and if
      we find a match, instantiate Hammer on that element
       TODO (cpirich): review the following:
      * whether using Hammer v1 events is the right choice
      * choose the specific list of events
      * consider instantiating Hammer just once per-element or on divApplab
      * review use of preventDefault
       case 'hold':
      case 'tap':
      case 'doubletap':
      case 'swipe':
      case 'swipeup':
      case 'swipedown':
      case 'swipeleft':
      case 'swiperight':
      case 'rotate':
      case 'release':
      case 'gesture':
      case 'pinch':
      case 'pinchin':
      case 'pinchout':
        var hammerElement = new Hammer(divApplab, { 'preventDefault': true });
        hammerElement.on(opts.eventName,
                         applabCommands.onEventFired.bind(this, opts));
        break;
      */
      case 'click':
      case 'change':
      case 'keyup':
      case 'dblclick':
      case 'mousedown':
      case 'mouseup':
      case 'mouseover':
      case 'mouseout':
      case 'keydown':
      case 'keypress':
      case 'input':
        // For now, we're not tracking how many of these we add and we don't allow
        // the user to detach the handler. We detach all listeners by cloning the
        // divApplab DOM node inside of reset()
        domElement.addEventListener(opts.eventName, applabCommands.onEventFired.bind(this, opts));
        // To allow INPUT type="range" (Slider) events to work on downlevel browsers, we need to
        // register a 'change' listener whenever an 'input' listner is requested.  Downlevel
        // browsers typically only sent 'change' events.
        if (opts.eventName === 'input' && domElement.tagName.toUpperCase() === 'INPUT' && domElement.type === 'range') {
          domElement.addEventListener('change', applabCommands.onEventFired.bind(this, opts));
        }
        break;
      case 'mousemove':
        domElement.addEventListener(opts.eventName, applabCommands.onEventFired.bind(this, opts));
        // Additional handler needed to ensure correct calculation of
        // movementX and movementY.
        domElement.addEventListener('mouseout', eventSandboxer.clearLastMouseMoveEvent.bind(eventSandboxer));
        break;
      default:
        return false;
    }
    return true;
  }
  return false;
};

applabCommands.onHttpRequestEvent = function (opts) {
  if (this.readyState === 4) {
    // Call the callback function:
    opts.func.call(null, Number(this.status), String(this.getResponseHeader('content-type')), String(this.responseText));
  }
};

applabCommands.startWebRequest = function (opts) {
  apiValidateType(opts, 'startWebRequest', 'url', opts.url, 'string');
  apiValidateType(opts, 'startWebRequest', 'callback', opts.func, 'function');
  var req = new XMLHttpRequest();
  req.onreadystatechange = applabCommands.onHttpRequestEvent.bind(req, opts);
  req.open('GET', opts.url, true);
  req.send();
};

applabCommands.onTimerFired = function (opts) {
  opts.func.call(null);
};

applabCommands.setTimeout = function (opts) {
  // PARAMNAME: setTimeout: callback vs. function
  // PARAMNAME: setTimeout: ms vs. milliseconds
  apiValidateType(opts, 'setTimeout', 'callback', opts.func, 'function');
  apiValidateType(opts, 'setTimeout', 'milliseconds', opts.milliseconds, 'number');

  return apiTimeoutList.setTimeout(applabCommands.onTimerFired.bind(this, opts), opts.milliseconds);
};

applabCommands.clearTimeout = function (opts) {
  apiValidateType(opts, 'clearTimeout', 'timeout', opts.timeoutId, 'number');
  // NOTE: we do not currently check to see if this is a timer created by
  // our applabCommands.setTimeout() function
  apiTimeoutList.clearTimeout(opts.timeoutId);
};

applabCommands.setInterval = function (opts) {
  // PARAMNAME: setInterval: callback vs. function
  // PARAMNAME: setInterval: ms vs. milliseconds
  apiValidateType(opts, 'setInterval', 'callback', opts.func, 'function');
  apiValidateType(opts, 'setInterval', 'milliseconds', opts.milliseconds, 'number');

  return apiTimeoutList.setInterval(applabCommands.onTimerFired.bind(this, opts), opts.milliseconds);
};

applabCommands.clearInterval = function (opts) {
  apiValidateType(opts, 'clearInterval', 'interval', opts.intervalId, 'number');
  // NOTE: we do not currently check to see if this is a timer created by
  // our applabCommands.setInterval() function
  apiTimeoutList.clearInterval(opts.intervalId);
};

applabCommands.createRecord = function (opts) {
  // PARAMNAME: createRecord: table vs. tableName
  // PARAMNAME: createRecord: callback vs. callbackFunction
  apiValidateType(opts, 'createRecord', 'table', opts.table, 'string');
  apiValidateType(opts, 'createRecord', 'record', opts.record, 'object');
  apiValidateType(opts, 'createRecord', 'record.id', opts.record.id, 'undefined');
  apiValidateType(opts, 'createRecord', 'callback', opts.onSuccess, 'function', OPTIONAL);
  apiValidateType(opts, 'createRecord', 'onError', opts.onError, 'function', OPTIONAL);
  var onSuccess = applabCommands.handleCreateRecord.bind(this, opts);
  var onError = errorHandler.handleError.bind(this, opts);
  AppStorage.createRecord(opts.table, opts.record, onSuccess, onError);
};

applabCommands.handleCreateRecord = function (opts, record) {
  if (opts.onSuccess) {
    opts.onSuccess.call(null, record);
  }
};

applabCommands.getKeyValue = function (opts) {
  // PARAMNAME: getKeyValue: callback vs. callbackFunction
  apiValidateType(opts, 'getKeyValue', 'key', opts.key, 'string');
  apiValidateType(opts, 'getKeyValue', 'callback', opts.onSuccess, 'function');
  apiValidateType(opts, 'getKeyValue', 'onError', opts.onError, 'function', OPTIONAL);
  var onSuccess = applabCommands.handleReadValue.bind(this, opts);
  var onError = errorHandler.handleError.bind(this, opts);
  AppStorage.getKeyValue(opts.key, onSuccess, onError);
};

applabCommands.handleReadValue = function (opts, value) {
  if (opts.onSuccess) {
    opts.onSuccess.call(null, value);
  }
};

applabCommands.getKeyValueSync = function (opts) {
  apiValidateType(opts, 'getKeyValueSync', 'key', opts.key, 'string');
  var onSuccess = handleGetKeyValueSync.bind(this, opts);
  var onError = handleGetKeyValueSyncError.bind(this, opts);
  AppStorage.getKeyValue(opts.key, onSuccess, onError);
};

var handleGetKeyValueSync = function handleGetKeyValueSync(opts, value) {
  opts.callback(value);
};

var handleGetKeyValueSyncError = function handleGetKeyValueSyncError(opts, message) {
  // Call callback with no value parameter (sync func will return undefined)
  opts.callback();
  Applab.log(message);
};

applabCommands.setKeyValue = function (opts) {
  // PARAMNAME: setKeyValue: callback vs. callbackFunction
  apiValidateType(opts, 'setKeyValue', 'key', opts.key, 'string');
  apiValidateType(opts, 'setKeyValue', 'value', opts.value, 'primitive');
  apiValidateType(opts, 'setKeyValue', 'callback', opts.onSuccess, 'function', OPTIONAL);
  apiValidateType(opts, 'setKeyValue', 'onError', opts.onError, 'function', OPTIONAL);
  var onSuccess = applabCommands.handleSetKeyValue.bind(this, opts);
  var onError = errorHandler.handleError.bind(this, opts);
  AppStorage.setKeyValue(opts.key, opts.value, onSuccess, onError);
};

applabCommands.handleSetKeyValue = function (opts) {
  if (opts.onSuccess) {
    opts.onSuccess.call(null);
  }
};

applabCommands.setKeyValueSync = function (opts) {
  apiValidateType(opts, 'setKeyValueSync', 'key', opts.key, 'string');
  apiValidateType(opts, 'setKeyValueSync', 'value', opts.value, 'primitive');
  var onSuccess = handleSetKeyValueSync.bind(this, opts);
  var onError = handleSetKeyValueSyncError.bind(this, opts);
  AppStorage.setKeyValue(opts.key, opts.value, onSuccess, onError);
};

var handleSetKeyValueSync = function handleSetKeyValueSync(opts) {
  // Return 'true' to indicate the setKeyValueSync succeeded
  opts.callback(true);
};

var handleSetKeyValueSyncError = function handleSetKeyValueSyncError(opts, message) {
  // Return 'false' to indicate the setKeyValueSync failed
  opts.callback(false);
  Applab.log(message);
};

applabCommands.readRecords = function (opts) {
  // PARAMNAME: readRecords: table vs. tableName
  // PARAMNAME: readRecords: callback vs. callbackFunction
  // PARAMNAME: readRecords: terms vs. searchTerms
  apiValidateType(opts, 'readRecords', 'table', opts.table, 'string');
  apiValidateType(opts, 'readRecords', 'searchTerms', opts.searchParams, 'object');
  apiValidateType(opts, 'readRecords', 'callback', opts.onSuccess, 'function');
  apiValidateType(opts, 'readRecords', 'onError', opts.onError, 'function', OPTIONAL);
  var onSuccess = applabCommands.handleReadRecords.bind(this, opts);
  var onError = errorHandler.handleError.bind(this, opts);
  AppStorage.readRecords(opts.table, opts.searchParams, onSuccess, onError);
};

applabCommands.handleReadRecords = function (opts, records) {
  if (opts.onSuccess) {
    opts.onSuccess.call(null, records);
  }
};

applabCommands.updateRecord = function (opts) {
  // PARAMNAME: updateRecord: table vs. tableName
  // PARAMNAME: updateRecord: callback vs. callbackFunction
  apiValidateType(opts, 'updateRecord', 'table', opts.table, 'string');
  apiValidateType(opts, 'updateRecord', 'record', opts.record, 'object');
  apiValidateTypeAndRange(opts, 'updateRecord', 'record.id', opts.record.id, 'number', 1, Infinity);
  apiValidateType(opts, 'updateRecord', 'callback', opts.onComplete, 'function', OPTIONAL);
  apiValidateType(opts, 'updateRecord', 'onError', opts.onError, 'function', OPTIONAL);
  var onComplete = applabCommands.handleUpdateRecord.bind(this, opts);
  var onError = errorHandler.handleError.bind(this, opts);
  AppStorage.updateRecord(opts.table, opts.record, onComplete, onError);
};

applabCommands.handleUpdateRecord = function (opts, record, success) {
  if (opts.onComplete) {
    opts.onComplete.call(null, record, success);
  }
};

applabCommands.deleteRecord = function (opts) {
  // PARAMNAME: deleteRecord: table vs. tableName
  // PARAMNAME: deleteRecord: callback vs. callbackFunction
  apiValidateType(opts, 'deleteRecord', 'table', opts.table, 'string');
  apiValidateType(opts, 'deleteRecord', 'record', opts.record, 'object');
  apiValidateTypeAndRange(opts, 'deleteRecord', 'record.id', opts.record.id, 'number', 1, Infinity);
  apiValidateType(opts, 'deleteRecord', 'callback', opts.onComplete, 'function', OPTIONAL);
  apiValidateType(opts, 'deleteRecord', 'onError', opts.onError, 'function', OPTIONAL);
  var onComplete = applabCommands.handleDeleteRecord.bind(this, opts);
  var onError = errorHandler.handleError.bind(this, opts);
  AppStorage.deleteRecord(opts.table, opts.record, onComplete, onError);
};

applabCommands.handleDeleteRecord = function (opts, success) {
  if (opts.onComplete) {
    opts.onComplete.call(null, success);
  }
};

applabCommands.onRecordEvent = function (opts) {
  apiValidateType(opts, 'onRecordEvent', 'table', opts.table, 'string');
  apiValidateType(opts, 'onRecordEvent', 'callback', opts.onRecord, 'function');
  var onError = errorHandler.handleError.bind(this, opts);
  AppStorage.onRecordEvent(opts.table, opts.onRecord, onError);
};

applabCommands.getUserId = function (opts) {
  if (!Applab.user.applabUserId) {
    throw new Error("User ID failed to load.");
  }
  return Applab.user.applabUserId;
};

/**
 * How to execute the 'drawChart' function.
 * Delegates most work to ChartApi.drawChart, but a few things are
 * handled directly at this layer:
 *   - Type validation (before execution)
 *   - Queueing callbacks (after execution)
 *   - Reporting errors and warnings (after execution)
 * @see {ChartApi}
 * @param {Object} opts
 * @param {string} opts.chartId
 * @param {ChartType} opts.chartType
 * @param {Object[]} opts.chartData
 * @param {Object} opts.options
 * @param {function} opts.callback
 */
applabCommands.drawChart = function (opts) {
  apiValidateType(opts, 'drawChart', 'chartId', opts.chartId, 'string');
  apiValidateType(opts, 'drawChart', 'chartType', opts.chartType, 'string');
  apiValidateType(opts, 'drawChart', 'chartData', opts.chartData, 'array');
  apiValidateType(opts, 'drawChart', 'options', opts.options, 'object', OPTIONAL);
  apiValidateType(opts, 'drawChart', 'callback', opts.callback, 'function', OPTIONAL);
  apiValidateDomIdExistence(opts, 'drawChart', 'chartId', opts.chartId, true);

  // Bind a reference to the current interpreter so we can later make sure we're
  // not doing anything asynchronous across re-runs.
  var jsInterpreter = Applab.JSInterpreter;

  var currentLineNumber = getCurrentLineNumber(jsInterpreter);

  var chartApi = new ChartApi();

  /**
   * What to do after drawing the chart succeeds/completes:
   *   1. Report any warnings, attributed to the current line.
   *   2. Queue the user-provided success callback.
   *
   * @param {Error[]} warnings - Any non-terminal errors generated by the
   *        drawChartFromRecords call, which we will report on after the fact
   *        without halting execution.
   */
  var onSuccess = function onSuccess() {
    stopLoadingSpinnerFor(opts.chartId);
    chartApi.warnings.forEach(function (warning) {
      outputError(warning.message, ErrorLevel.WARNING, currentLineNumber);
    });
    if (opts.callback) {
      opts.callback.call(null);
    }
  };

  /**
   * What to do if something goes wrong:
   *   1. Report the error.
   *
   * @param {Error} error - A rejected promise usually passes an error.
   */
  var onError = function onError(error) {
    stopLoadingSpinnerFor(opts.chartId);
    outputError(error.message, ErrorLevel.ERROR, currentLineNumber);
  };

  startLoadingSpinnerFor(opts.chartId);
  chartApi.drawChart(opts.chartId, opts.chartType, opts.chartData, opts.options).then(onSuccess, onError);
};

/**
 * How to execute the 'drawChartFromRecords' function.
 * Delegates most work to ChartApi.drawChartFromRecords, but a few things are
 * handled directly at this layer:
 *   - Type validation (before execution)
 *   - Queueing callbacks (after execution)
 *   - Reporting errors and warnings (after execution)
 * @see {ChartApi}
 * @param {Object} opts
 * @param {string} opts.chartId
 * @param {ChartType} opts.chartType
 * @param {string} opts.tableName
 * @param {string[]} opts.columns
 * @param {Object} opts.options
 * @param {function} opts.callback
 */
applabCommands.drawChartFromRecords = function (opts) {
  apiValidateType(opts, 'drawChartFromRecords', 'chartId', opts.chartId, 'string');
  apiValidateType(opts, 'drawChartFromRecords', 'chartType', opts.chartType, 'string');
  apiValidateType(opts, 'drawChartFromRecords', 'tableName', opts.tableName, 'string');
  apiValidateType(opts, 'drawChartFromRecords', 'columns', opts.columns, 'array');
  apiValidateType(opts, 'drawChartFromRecords', 'options', opts.options, 'object', OPTIONAL);
  apiValidateType(opts, 'drawChartFromRecords', 'callback', opts.callback, 'function', OPTIONAL);
  apiValidateDomIdExistence(opts, 'drawChartFromRecords', 'chartId', opts.chartId, true);

  // Bind a reference to the current interpreter so we can later make sure we're
  // not doing anything asynchronous across re-runs.
  var jsInterpreter = Applab.JSInterpreter;

  var currentLineNumber = getCurrentLineNumber(jsInterpreter);

  var chartApi = new ChartApi();

  /**
   * What to do after drawing the chart succeeds/completes:
   *   1. Report any warnings, attributed to the current line.
   *   2. Queue the user-provided success callback.
   *
   * @param {Error[]} warnings - Any non-terminal errors generated by the
   *        drawChartFromRecords call, which we will report on after the fact
   *        without halting execution.
   */
  var onSuccess = function onSuccess() {
    stopLoadingSpinnerFor(opts.chartId);
    chartApi.warnings.forEach(function (warning) {
      outputError(warning.message, ErrorLevel.WARNING, currentLineNumber);
    });
    if (opts.callback) {
      opts.callback.call(null);
    }
  };

  /**
   * What to do if something goes wrong:
   *   1. Report the error.
   *
   * @param {Error} error - A rejected promise usually passes an error.
   */
  var onError = function onError(error) {
    stopLoadingSpinnerFor(opts.chartId);
    outputError(error.message, ErrorLevel.ERROR, currentLineNumber);
  };

  startLoadingSpinnerFor(opts.chartId);
  chartApi.drawChartFromRecords(opts.chartId, opts.chartType, opts.tableName, opts.columns, opts.options).then(onSuccess, onError);
};

/**
 * If the element is found, add the 'loading' class to it so that it
 * displays the loading spinner.
 * @param {string} elementId
 */
function startLoadingSpinnerFor(elementId) {
  var element = document.getElementById(elementId);
  if (!element) {
    return;
  }

  // Add 'loading' class
  element.className += ' loading';
}

/**
 * If the element is found, make sure to remove the 'loading' class from it
 * so that it hides the loading spinner.
 * @param {string} elementId
 */
function stopLoadingSpinnerFor(elementId) {
  var element = document.getElementById(elementId);
  if (!element) {
    return;
  }

  // Remove 'loading' class
  element.className = element.className.split(/\s+/).filter(function (x) {
    return !/loading/i.test(x);
  }).join(' ');
}

/**
 * For the provided interpreter, get the nearest line number in user code
 * up the stack from the last executed command.
 * @param {JSInterpreter} jsInterpreter
 * @returns {number}
 */
var getCurrentLineNumber = function getCurrentLineNumber(jsInterpreter) {
  return 1 + jsInterpreter.getNearestUserCodeLine();
};

},{"../StudioApp":"/home/ubuntu/staging/apps/build/js/StudioApp.js","../assetManagement/assetPrefix":"/home/ubuntu/staging/apps/build/js/assetManagement/assetPrefix.js","../codegen":"/home/ubuntu/staging/apps/build/js/codegen.js","../sharedJsxStyles":"/home/ubuntu/staging/apps/build/js/sharedJsxStyles.js","../timeoutList":"/home/ubuntu/staging/apps/build/js/timeoutList.js","../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./ChangeEventHandler":"/home/ubuntu/staging/apps/build/js/applab/ChangeEventHandler.js","./ChartApi":"/home/ubuntu/staging/apps/build/js/applab/ChartApi.js","./EventSandboxer":"/home/ubuntu/staging/apps/build/js/applab/EventSandboxer.js","./appStorage":"/home/ubuntu/staging/apps/build/js/applab/appStorage.js","./applabTurtle":"/home/ubuntu/staging/apps/build/js/applab/applabTurtle.js","./designElements/elementUtils":"/home/ubuntu/staging/apps/build/js/applab/designElements/elementUtils.js","./designElements/library":"/home/ubuntu/staging/apps/build/js/applab/designElements/library.js","./errorHandler":"/home/ubuntu/staging/apps/build/js/applab/errorHandler.js","./rgbcolor.js":"/home/ubuntu/staging/apps/build/js/applab/rgbcolor.js","./sanitizeHtml":"/home/ubuntu/staging/apps/build/js/applab/sanitizeHtml.js","./setPropertyDropdown":"/home/ubuntu/staging/apps/build/js/applab/setPropertyDropdown.js"}],"/home/ubuntu/staging/apps/build/js/applab/setPropertyDropdown.js":[function(require,module,exports){
/**
 * This file manages logic for the dropdown used in our setProperty block
 */
'use strict';

var _ = require('lodash');
var library = require('./designElements/library');
var ElementType = library.ElementType;

/**
 * A set of all properties that can be set using setProperty. Elsewhere, we
 * filter these according to element type. Note: There are some properties
 * where friendlyName is shared (canvasWidth and width both use 'width') but
 * internalName is not.
 * Note: The order here affects the order of items in the dropdown for unknown
 * element types
 * friendlyName: Name used in the code editor to refer to this property
 * internalName: Name used in updateProperty to refer to this property
 * type: Type of this property, used for validation at run time.
 */
var PROP_INFO = {
  width: { friendlyName: 'width', internalName: 'style-width', type: 'number' },
  height: { friendlyName: 'height', internalName: 'style-height', type: 'number' },
  canvasWidth: { friendlyName: 'width', internalName: 'width', type: 'number' },
  canvasHeight: { friendlyName: 'height', internalName: 'height', type: 'number' },
  x: { friendlyName: 'x', internalName: 'left', type: 'number' },
  y: { friendlyName: 'y', internalName: 'top', type: 'number' },
  textColor: { friendlyName: 'text-color', internalName: 'textColor', type: 'string' },
  backgroundColor: { friendlyName: 'background-color', internalName: 'backgroundColor', type: 'string' },
  fontSize: { friendlyName: 'font-size', internalName: 'fontSize', type: 'number' },
  hidden: { friendlyName: 'hidden', internalName: 'hidden', type: 'boolean' },
  text: { friendlyName: 'text', internalName: 'text', type: 'string' },
  placeholder: { friendlyName: 'placeholder', internalName: 'placeholder', type: 'string' },
  image: { friendlyName: 'image', internalName: 'image', type: 'string' },
  screenImage: { friendlyName: 'image', internalName: 'screen-image', type: 'string' },
  picture: { friendlyName: 'picture', internalName: 'picture', type: 'string' },
  groupId: { friendlyName: 'group-id', internalName: 'groupId', type: 'string' },
  checked: { friendlyName: 'checked', internalName: 'checked', type: 'boolean' },
  readonly: { friendlyName: 'readonly', internalName: 'readonly', type: 'boolean' },
  options: { friendlyName: 'options', internalName: 'options', type: 'array' },
  value: { friendlyName: 'value', internalName: 'defaultValue', type: 'number' },
  min: { friendlyName: 'min', internalName: 'min', type: 'number' },
  max: { friendlyName: 'max', internalName: 'max', type: 'number' },
  step: { friendlyName: 'step', internalName: 'step', type: 'number' }
};

// When we don't know the element type, we display all possible friendly names
var fullDropdownOptions = _.uniq(Object.keys(PROP_INFO).map(function (key) {
  return '"' + PROP_INFO[key].friendlyName + '"';
}));

// Which of the items from PROP_INFO should each element type use
var PROP_NAMES = {};
PROP_NAMES[ElementType.BUTTON] = ['text', 'width', 'height', 'x', 'y', 'textColor', 'backgroundColor', 'fontSize', 'image', 'hidden'];
PROP_NAMES[ElementType.TEXT_INPUT] = ['placeholder', 'width', 'height', 'x', 'y', 'textColor', 'backgroundColor', 'fontSize', 'hidden'];
PROP_NAMES[ElementType.LABEL] = ['text', 'width', 'height', 'x', 'y', 'textColor', 'backgroundColor', 'fontSize', 'hidden'];
PROP_NAMES[ElementType.DROPDOWN] = ['options', 'width', 'height', 'x', 'y', 'textColor', 'backgroundColor', 'fontSize', 'hidden'];
PROP_NAMES[ElementType.RADIO_BUTTON] = ['groupId', 'width', 'height', 'x', 'y', 'hidden', 'checked'];
PROP_NAMES[ElementType.CHECKBOX] = ['width', 'height', 'x', 'y', 'hidden', 'checked'];
PROP_NAMES[ElementType.IMAGE] = ['width', 'height', 'x', 'y', 'picture', 'hidden'];
PROP_NAMES[ElementType.CANVAS] = ['canvasWidth', 'canvasHeight', 'x', 'y'];
PROP_NAMES[ElementType.SCREEN] = ['backgroundColor', 'screenImage'];
PROP_NAMES[ElementType.TEXT_AREA] = ['text', 'width', 'height', 'x', 'y', 'textColor', 'backgroundColor', 'fontSize', 'readonly', 'hidden'];
PROP_NAMES[ElementType.CHART] = ['width', 'height', 'x', 'y', 'hidden'];
PROP_NAMES[ElementType.SLIDER] = ['width', 'height', 'x', 'y', 'value', 'min', 'max', 'step', 'hidden'];

// Create a mapping of PROPS_PER_TYPE[elementType][friendlyName] => prop info
var PROPS_PER_TYPE = {};
Object.keys(PROP_NAMES).map(function (elementType) {
  PROPS_PER_TYPE[elementType] = {};
  PROP_NAMES[elementType].forEach(function (propName) {
    var friendlyName = PROP_INFO[propName].friendlyName;
    if (PROPS_PER_TYPE[elementType][friendlyName]) {
      throw new Error('Multiple props for friendlyName: ' + friendlyName + ' in elementType: ' + elementType);
    }
    PROPS_PER_TYPE[elementType][friendlyName] = PROP_INFO[propName];
  });
});

// May belong in droplet
function getValueOfNthParam(block, n) {
  var token = block.start;
  do {
    if (token.type === 'socketStart') {
      if (n === 0) {
        var textToken = token.next;
        if (textToken.type !== 'text') {
          throw new Error('unexpected');
        }
        return textToken.value;
      }
      n--;
    }
    token = token.next;
  } while (token);
  return null;
}

/**
 * Given a string like <"asdf"> strips quotes and returns <asdf>
 */
function stripQuotes(str) {
  var match = str.match(/^['|"](.*)['|"]$/);
  if (match) {
    return match[1];
  }
  return str;
}

/**
 * Given an element and a friendly name for that element, returns an object
 * containing the internal equivalent for that friendly name, or undefined
 * if we don't have info for this element/property.
 */
module.exports.getInternalPropertyInfo = function (element, friendlyPropName) {
  var elementType = library.getElementType(element, true);
  var info;
  if (elementType) {
    info = PROPS_PER_TYPE[elementType][friendlyPropName];
  }
  return info;
};

/**
 * @returns {function} Gets the value of the first param for this block, gets
 *   the element that it refers to, and then enumerates a list of possible
 *   properties that can be set on this element. If it can't determine element
 *   types, provides full list of properties across all types.
 */
module.exports.setPropertyDropdown = function () {
  return function () {
    // Note: We depend on "this" being the droplet socket.
    var param1 = getValueOfNthParam(this.parent, 0);

    var elementId = stripQuotes(param1);
    var element = document.querySelector("#divApplab #" + elementId);
    if (!element) {
      return fullDropdownOptions;
    }

    var elementType = library.getElementType(element);
    if (!elementType) {
      return fullDropdownOptions;
    }

    var keys = Object.keys(PROPS_PER_TYPE[elementType]);
    if (!keys) {
      return fullDropdownOptions;
    }

    return keys.map(function (key) {
      return '"' + key + '"';
    });
  };
};

},{"./designElements/library":"/home/ubuntu/staging/apps/build/js/applab/designElements/library.js","lodash":"/home/ubuntu/staging/apps/node_modules/lodash/dist/lodash.js"}],"/home/ubuntu/staging/apps/build/js/applab/sanitizeHtml.js":[function(require,module,exports){
'use strict';

var sanitize = require('sanitize-html');
var elementUtils = require('./designElements/elementUtils');

/**
 * Return any html which is present in 'before' and absent in 'after'.
 * @param {string} before
 * @param {string} after
 */
function removedHtml(before, after) {
  var beforeLines = before.replace(/</gi, '\n<').split('\n');
  var afterLines = after.replace(/</gi, '\n<').split('\n');

  var afterLinesMap = {};
  for (var i = 0; i < afterLines.length; i++) {
    afterLinesMap[afterLines[i]] = true;
  }

  var removedLines = beforeLines.filter(function (line) {
    return !afterLinesMap[line];
  });

  return removedLines.join('\n');
}

/**
 * Warn if any non-cosmetic changes were made to the html.
 * @param  {function(removed, unsafe, safe)} warn Function to call if
 *     any unsafe html was removed from the output.
 * @param {string} unsafe Unsafe html.
 * @param {string} safe Safe html.
 * @param {Array<string>} warnings Warnings to display.
 */
function warnAboutUnsafeHtml(warn, unsafe, safe, warnings) {
  // Sanitizing the html can cause some cosmetic changes, such as converting
  // <img src=''> or <img src> to <img src/>. Process the unsafe html
  // making as few changes as possible, to remove any cosmetic differences
  // from our comparison.
  //
  // HACK: there is no option to accept all url schemes via
  // `allowedSchemes` as there is with other options. Instead,
  // provide an Array which claims to contain any element. See
  // https://github.com/punkave/sanitize-html/blob/master/index.js
  // for why this works. This hack is necessary in order to warn when
  // attributes containing disallowed URL schemes are removed.
  var allSchemes = [];
  allSchemes.indexOf = function () {
    return 0;
  };

  var processed = sanitize(unsafe, {
    allowedTags: false,
    allowedAttributes: false,
    allowedSchemes: allSchemes
  });
  if (processed != safe) {
    warn(removedHtml(processed, safe), unsafe, safe, warnings);
  }
}

/**
 * Reject element ids that might collide with other elements.
 * @param {string} elementId
 * @returns {boolean} Whether the element id is valid.
 */
function isIdAvailable(elementId) {
  // We only care if an ID is blacklisted or already in use in this case.
  var options = {
    allowCodeElements: false,
    allowDesignElements: true,
    allowDesignPrefix: true
  };
  if (!elementUtils.isIdAvailable(elementId, options)) {
    return false;
  }
  return true;
}

/**
 * Sanitize html using a whitelist of tags and attributes.
 * see default options at https://www.npmjs.com/package/sanitize-html
 * @param {string} unsafe Unsafe html to sanitize.
 * @param {function(removed, unsafe, safe, warnings)} warn Optional function
 *     to call if any unsafe html was removed from the output.
 * @param {boolean} rejectExistingIds Optional if true, remove ids
 *     which already exist in the DOM and give a warning.
 */
module.exports = function sanitizeHtml(unsafe, warn, rejectExistingIds) {
  var warnings = [];
  var defaultAttributes = ['id', 'class', 'data-*', 'height', 'style', 'title', 'width'];

  var safe = sanitize(unsafe, {
    allowedTags: sanitize.defaults.allowedTags.concat(['button', 'canvas', 'img', 'input', 'option', 'label', 'select', 'span', 'font']),
    allowedAttributes: $.extend({}, sanitize.defaults.allowedAttributes, {
      button: defaultAttributes.concat(['data-canonical-image-url']),
      canvas: defaultAttributes,
      div: defaultAttributes.concat(['contenteditable', 'data-canonical-image-url', 'tabindex', 'xmlns']),
      font: defaultAttributes,
      img: defaultAttributes.concat(['data-canonical-image-url', 'src']),
      input: defaultAttributes.concat(['autocomplete', 'checked', 'max', 'min', 'name', 'placeholder', 'step', 'type', 'value']),
      label: defaultAttributes,
      select: defaultAttributes,
      span: defaultAttributes
    }),
    allowedSchemes: sanitize.defaults.allowedSchemes.concat(['data']),
    transformTags: {
      '*': function _(tagName, attribs) {
        if (rejectExistingIds && attribs.id && !isIdAvailable(attribs.id)) {
          warnings.push('element id is already in use: ' + attribs.id);
          delete attribs.id;
        }
        return {
          tagName: tagName,
          attribs: attribs
        };
      }
    }
  });

  if (typeof warn === 'function' && safe != unsafe) {
    warnAboutUnsafeHtml(warn, unsafe, safe, warnings);
  }

  return safe;
};

},{"./designElements/elementUtils":"/home/ubuntu/staging/apps/build/js/applab/designElements/elementUtils.js","sanitize-html":"/home/ubuntu/staging/apps/node_modules/sanitize-html/index.js"}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/index.js":[function(require,module,exports){
var htmlparser = require('htmlparser2');
var extend = require('xtend');
var quoteRegexp = require('regexp-quote');

function each(obj, cb) {
  if (obj) Object.keys(obj).forEach(function (key) {
    cb(obj[key], key);
  });
}

module.exports = sanitizeHtml;

// Ignore the _recursing flag; it's there for recursive
// invocation as a guard against this exploit:
// https://github.com/fb55/htmlparser2/issues/105

function sanitizeHtml(html, options, _recursing) {
  var result = '';

  function Frame(tag, attribs) {
    var that = this;
    this.tag = tag;
    this.attribs = attribs || {};
    this.tagPosition = result.length;
    this.text = ''; // Node inner text

    this.updateParentNodeText = function() {
      if (stack.length) {
          var parentFrame = stack[stack.length - 1];
          parentFrame.text += that.text;
      }
    };
  }

  if (!options) {
    options = sanitizeHtml.defaults;
    options.parser = htmlParserDefaults;
  } else {
    options = extend(sanitizeHtml.defaults, options);
    if (options.parser) {
      options.parser = extend(htmlParserDefaults, options.parser);
    } else {
      options.parser = htmlParserDefaults;
    }
  }

  // Tags that contain something other than HTML, or where discarding
  // the text when the tag is disallowed makes sense for other reasons.
  // If we are not allowing these tags, we should drop their content too.
  // For other tags you would drop the tag but keep its content.
  var nonTextTagsArray = options.nonTextTags || [ 'script', 'style', 'textarea' ];
  var allowedAttributesMap;
  var allowedAttributesGlobMap;
  if(options.allowedAttributes) {
    allowedAttributesMap = {};
    allowedAttributesGlobMap = {};
    each(options.allowedAttributes, function(attributes, tag) {
      allowedAttributesMap[tag] = [];
      var globRegex = [];
      attributes.forEach(function(name) {
        if(name.indexOf('*') >= 0) {
          globRegex.push(quoteRegexp(name).replace(/\\\*/g, '.*'));
        } else {
          allowedAttributesMap[tag].push(name);
        }
      });
      allowedAttributesGlobMap[tag] = new RegExp('^(' + globRegex.join('|') + ')$');
    });
  }
  var allowedClassesMap = {};
  each(options.allowedClasses, function(classes, tag) {
    // Implicitly allows the class attribute
    if(allowedAttributesMap) {
      if (!allowedAttributesMap[tag]) {
        allowedAttributesMap[tag] = [];
      }
      allowedAttributesMap[tag].push('class');
    }

    allowedClassesMap[tag] = classes;
  });

  var transformTagsMap = {};
  var transformTagsAll;
  each(options.transformTags, function(transform, tag) {
    var transFun;
    if (typeof transform === 'function') {
      transFun = transform;
    } else if (typeof transform === "string") {
      transFun = sanitizeHtml.simpleTransform(transform);
    }
    if (tag === '*') {
      transformTagsAll = transFun;
    } else {
      transformTagsMap[tag] = transFun;
    }
  });

  var depth = 0;
  var stack = [];
  var skipMap = {};
  var transformMap = {};
  var skipText = false;
  var skipTextDepth = 0;

  var parser = new htmlparser.Parser({
    onopentag: function(name, attribs) {
      if (skipText) {
        skipTextDepth++;
        return;
      }
      var frame = new Frame(name, attribs);
      stack.push(frame);

      var skip = false;
      var transformedTag;
      if (transformTagsMap[name]) {
        transformedTag = transformTagsMap[name](name, attribs);

        frame.attribs = attribs = transformedTag.attribs;

        if (transformedTag.text !== undefined) {
          frame.innerText = transformedTag.text;
        }

        if (name !== transformedTag.tagName) {
          frame.name = name = transformedTag.tagName;
          transformMap[depth] = transformedTag.tagName;
        }
      }
      if (transformTagsAll) {
        transformedTag = transformTagsAll(name, attribs);

        frame.attribs = attribs = transformedTag.attribs;
        if (name !== transformedTag.tagName) {
          frame.name = name = transformedTag.tagName;
          transformMap[depth] = transformedTag.tagName;
        }
      }

      if (options.allowedTags && options.allowedTags.indexOf(name) === -1) {
        skip = true;
        if (nonTextTagsArray.indexOf(name) !== -1) {
          skipText = true;
          skipTextDepth = 1;
        }
        skipMap[depth] = true;
      }
      depth++;
      if (skip) {
        // We want the contents but not this tag
        return;
      }
      result += '<' + name;
      if (!allowedAttributesMap || allowedAttributesMap[name] || allowedAttributesMap['*']) {
        each(attribs, function(value, a) {
          if (!allowedAttributesMap ||
              (allowedAttributesMap[name] && allowedAttributesMap[name].indexOf(a) !== -1 ) ||
              (allowedAttributesMap['*'] && allowedAttributesMap['*'].indexOf(a) !== -1 ) ||
              (allowedAttributesGlobMap[name] && allowedAttributesGlobMap[name].test(a)) ||
              (allowedAttributesGlobMap['*'] && allowedAttributesGlobMap['*'].test(a))) {
            if ((a === 'href') || (a === 'src')) {
              if (naughtyHref(name, value)) {
                delete frame.attribs[a];
                return;
              }
            }
            if (a === 'class') {
              value = filterClasses(value, allowedClassesMap[name]);
              if (!value.length) {
                delete frame.attribs[a];
                return;
              }
            }
            result += ' ' + a;
            if (value.length) {
              result += '="' + escapeHtml(value) + '"';
            }
          } else {
            delete frame.attribs[a];
          }
        });
      }
      if (options.selfClosing.indexOf(name) !== -1) {
        result += " />";
      } else {
        result += ">";
      }
    },
    ontext: function(text) {
      if (skipText) {
        return;
      }
      var lastFrame = stack[stack.length-1];
      var tag;

      if (lastFrame) {
        tag = lastFrame.tag;
        // If inner text was set by transform function then let's use it
        text = lastFrame.innerText !== undefined ? lastFrame.innerText : text;
      }

      if (nonTextTagsArray.indexOf(tag) !== -1) {
        result += text;
      } else {
        var escaped = escapeHtml(text);
        if (options.textFilter) {
          result += options.textFilter(escaped);
        } else {
          result += escaped;
        }
      }
      if (stack.length) {
           var frame = stack[stack.length - 1];
           frame.text += text;
      }
    },
    onclosetag: function(name) {

      if (skipText) {
        skipTextDepth--;
        if (!skipTextDepth) {
          skipText = false;
        } else {
          return;
        }
      }

      var frame = stack.pop();
      if (!frame) {
        // Do not crash on bad markup
        return;
      }
      skipText = false;
      depth--;
      if (skipMap[depth]) {
        delete skipMap[depth];
        frame.updateParentNodeText();
        return;
      }

      if (transformMap[depth]) {
        name = transformMap[depth];
        delete transformMap[depth];
      }

      if (options.exclusiveFilter && options.exclusiveFilter(frame)) {
         result = result.substr(0, frame.tagPosition);
         return;
      }

      frame.updateParentNodeText();

      if (options.selfClosing.indexOf(name) !== -1) {
         // Already output />
         return;
      }

      result += "</" + name + ">";
    }
  }, options.parser);
  parser.write(html);
  parser.end();

  return result;

  function escapeHtml(s) {
    if (typeof(s) !== 'string') {
      s = s + '';
    }
    return s.replace(/\&/g, '&amp;').replace(/</g, '&lt;').replace(/\>/g, '&gt;').replace(/\"/g, '&quot;');
  }

  function naughtyHref(name, href) {
    // Browsers ignore character codes of 32 (space) and below in a surprising
    // number of situations. Start reading here:
    // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet#Embedded_tab
    href = href.replace(/[\x00-\x20]+/g, '');
    // Clobber any comments in URLs, which the browser might
    // interpret inside an XML data island, allowing
    // a javascript: URL to be snuck through
    href = href.replace(/<\!\-\-.*?\-\-\>/g, '');
    // Case insensitive so we don't get faked out by JAVASCRIPT #1
    var matches = href.match(/^([a-zA-Z]+)\:/);
    if (!matches) {
      // No scheme = no way to inject js (right?)
      return false;
    }
    var scheme = matches[1].toLowerCase();

    if (options.allowedSchemesByTag[name]) {
      return options.allowedSchemesByTag[name].indexOf(scheme) === -1;
    }

    return !options.allowedSchemes || options.allowedSchemes.indexOf(scheme) === -1;
  }

  function filterClasses(classes, allowed) {
    if (!allowed) {
      // The class attribute is allowed without filtering on this tag
      return classes;
    }
    classes = classes.split(/\s+/);
    return classes.filter(function(clss) {
      return allowed.indexOf(clss) !== -1;
    }).join(' ');
  }
}

// Defaults are accessible to you so that you can use them as a starting point
// programmatically if you wish

var htmlParserDefaults = {
  decodeEntities: true
};
sanitizeHtml.defaults = {
  allowedTags: [ 'h3', 'h4', 'h5', 'h6', 'blockquote', 'p', 'a', 'ul', 'ol',
    'nl', 'li', 'b', 'i', 'strong', 'em', 'strike', 'code', 'hr', 'br', 'div',
    'table', 'thead', 'caption', 'tbody', 'tr', 'th', 'td', 'pre' ],
  allowedAttributes: {
    a: [ 'href', 'name', 'target' ],
    // We don't currently allow img itself by default, but this
    // would make sense if we did
    img: [ 'src' ]
  },
  // Lots of these won't come up by default because we don't allow them
  selfClosing: [ 'img', 'br', 'hr', 'area', 'base', 'basefont', 'input', 'link', 'meta' ],
  // URL schemes we permit
  allowedSchemes: [ 'http', 'https', 'ftp', 'mailto' ],
  allowedSchemesByTag: {}
};

sanitizeHtml.simpleTransform = function(newTagName, newAttribs, merge) {
  merge = (merge === undefined) ? true : merge;
  newAttribs = newAttribs || {};

  return function(tagName, attribs) {
    var attrib;
    if (merge) {
      for (attrib in newAttribs) {
        attribs[attrib] = newAttribs[attrib];
      }
    } else {
      attribs = newAttribs;
    }

    return {
      tagName: newTagName,
      attribs: attribs
    };
  };
};

},{"htmlparser2":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/lib/index.js","regexp-quote":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/regexp-quote/regexp-quote.js","xtend":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/xtend/immutable.js"}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/xtend/immutable.js":[function(require,module,exports){
module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}

},{}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/regexp-quote/regexp-quote.js":[function(require,module,exports){
module.exports = function (string) {
  return string.replace(/[-\\^$*+?.()|[\]{}]/g, "\\$&")
}

},{}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/lib/index.js":[function(require,module,exports){
var Parser = require("./Parser.js"),
    DomHandler = require("domhandler");

function defineProp(name, value){
	delete module.exports[name];
	module.exports[name] = value;
	return value;
}

module.exports = {
	Parser: Parser,
	Tokenizer: require("./Tokenizer.js"),
	ElementType: require("domelementtype"),
	DomHandler: DomHandler,
	get FeedHandler(){
		return defineProp("FeedHandler", require("./FeedHandler.js"));
	},
	get Stream(){
		return defineProp("Stream", require("./Stream.js"));
	},
	get WritableStream(){
		return defineProp("WritableStream", require("./WritableStream.js"));
	},
	get ProxyHandler(){
		return defineProp("ProxyHandler", require("./ProxyHandler.js"));
	},
	get DomUtils(){
		return defineProp("DomUtils", require("domutils"));
	},
	get CollectingHandler(){
		return defineProp("CollectingHandler", require("./CollectingHandler.js"));
	},
	// For legacy support
	DefaultHandler: DomHandler,
	get RssHandler(){
		return defineProp("RssHandler", this.FeedHandler);
	},
	//helper methods
	parseDOM: function(data, options){
		var handler = new DomHandler(options);
		new Parser(handler, options).end(data);
		return handler.dom;
	},
	parseFeed: function(feed, options){
		var handler = new module.exports.FeedHandler(options);
		new Parser(handler, options).end(feed);
		return handler.dom;
	},
	createDomStream: function(cb, options, elementCb){
		var handler = new DomHandler(cb, options, elementCb);
		return new Parser(handler, options);
	},
	// List of all events that the parser emits
	EVENTS: { /* Format: eventname: number of arguments */
		attribute: 2,
		cdatastart: 0,
		cdataend: 0,
		text: 1,
		processinginstruction: 2,
		comment: 1,
		commentend: 0,
		closetag: 1,
		opentag: 2,
		opentagname: 1,
		error: 1,
		end: 0
	}
};

},{"./CollectingHandler.js":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/lib/CollectingHandler.js","./FeedHandler.js":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/lib/FeedHandler.js","./Parser.js":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/lib/Parser.js","./ProxyHandler.js":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/lib/ProxyHandler.js","./Stream.js":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/lib/Stream.js","./Tokenizer.js":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/lib/Tokenizer.js","./WritableStream.js":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/lib/WritableStream.js","domelementtype":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domelementtype/index.js","domhandler":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domhandler/index.js","domutils":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domutils/index.js"}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domutils/index.js":[function(require,module,exports){
var DomUtils = module.exports;

[
	require("./lib/stringify"),
	require("./lib/traversal"),
	require("./lib/manipulation"),
	require("./lib/querying"),
	require("./lib/legacy"),
	require("./lib/helpers")
].forEach(function(ext){
	Object.keys(ext).forEach(function(key){
		DomUtils[key] = ext[key].bind(DomUtils);
	});
});

},{"./lib/helpers":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domutils/lib/helpers.js","./lib/legacy":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domutils/lib/legacy.js","./lib/manipulation":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domutils/lib/manipulation.js","./lib/querying":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domutils/lib/querying.js","./lib/stringify":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domutils/lib/stringify.js","./lib/traversal":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domutils/lib/traversal.js"}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domutils/lib/traversal.js":[function(require,module,exports){
var getChildren = exports.getChildren = function(elem){
	return elem.children;
};

var getParent = exports.getParent = function(elem){
	return elem.parent;
};

exports.getSiblings = function(elem){
	var parent = getParent(elem);
	return parent ? getChildren(parent) : [elem];
};

exports.getAttributeValue = function(elem, name){
	return elem.attribs && elem.attribs[name];
};

exports.hasAttrib = function(elem, name){
	return !!elem.attribs && hasOwnProperty.call(elem.attribs, name);
};

exports.getName = function(elem){
	return elem.name;
};

},{}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domutils/lib/stringify.js":[function(require,module,exports){
var ElementType = require("domelementtype"),
    getOuterHTML = require("dom-serializer"),
    isTag = ElementType.isTag;

module.exports = {
	getInnerHTML: getInnerHTML,
	getOuterHTML: getOuterHTML,
	getText: getText
};

function getInnerHTML(elem, opts){
	return elem.children ? elem.children.map(function(elem){
		return getOuterHTML(elem, opts);
	}).join("") : "";
}

function getText(elem){
	if(Array.isArray(elem)) return elem.map(getText).join("");
	if(isTag(elem) || elem.type === ElementType.CDATA) return getText(elem.children);
	if(elem.type === ElementType.Text) return elem.data;
	return "";
}

},{"dom-serializer":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domutils/node_modules/dom-serializer/index.js","domelementtype":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domelementtype/index.js"}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domutils/node_modules/dom-serializer/index.js":[function(require,module,exports){
/*
  Module dependencies
*/
var ElementType = require('domelementtype');
var entities = require('entities');

/*
  Boolean Attributes
*/
var booleanAttributes = {
  __proto__: null,
  allowfullscreen: true,
  async: true,
  autofocus: true,
  autoplay: true,
  checked: true,
  controls: true,
  default: true,
  defer: true,
  disabled: true,
  hidden: true,
  ismap: true,
  loop: true,
  multiple: true,
  muted: true,
  open: true,
  readonly: true,
  required: true,
  reversed: true,
  scoped: true,
  seamless: true,
  selected: true,
  typemustmatch: true
};

var unencodedElements = {
  __proto__: null,
  style: true,
  script: true,
  xmp: true,
  iframe: true,
  noembed: true,
  noframes: true,
  plaintext: true,
  noscript: true
};

/*
  Format attributes
*/
function formatAttrs(attributes, opts) {
  if (!attributes) return;

  var output = '',
      value;

  // Loop through the attributes
  for (var key in attributes) {
    value = attributes[key];
    if (output) {
      output += ' ';
    }

    if (!value && booleanAttributes[key]) {
      output += key;
    } else {
      output += key + '="' + (opts.decodeEntities ? entities.encodeXML(value) : value) + '"';
    }
  }

  return output;
}

/*
  Self-enclosing tags (stolen from node-htmlparser)
*/
var singleTag = {
  __proto__: null,
  area: true,
  base: true,
  basefont: true,
  br: true,
  col: true,
  command: true,
  embed: true,
  frame: true,
  hr: true,
  img: true,
  input: true,
  isindex: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true,
};


var render = module.exports = function(dom, opts) {
  if (!Array.isArray(dom) && !dom.cheerio) dom = [dom];
  opts = opts || {};

  var output = '';

  for(var i = 0; i < dom.length; i++){
    var elem = dom[i];

    if (elem.type === 'root')
      output += render(elem.children, opts);
    else if (ElementType.isTag(elem))
      output += renderTag(elem, opts);
    else if (elem.type === ElementType.Directive)
      output += renderDirective(elem);
    else if (elem.type === ElementType.Comment)
      output += renderComment(elem);
    else if (elem.type === ElementType.CDATA)
      output += renderCdata(elem);
    else
      output += renderText(elem, opts);
  }

  return output;
};

function renderTag(elem, opts) {
  // Handle SVG
  if (elem.name === "svg") opts = {decodeEntities: opts.decodeEntities, xmlMode: true};

  var tag = '<' + elem.name,
      attribs = formatAttrs(elem.attribs, opts);

  if (attribs) {
    tag += ' ' + attribs;
  }

  if (
    opts.xmlMode
    && (!elem.children || elem.children.length === 0)
  ) {
    tag += '/>';
  } else {
    tag += '>';
    if (elem.children) {
      tag += render(elem.children, opts);
    }

    if (!singleTag[elem.name] || opts.xmlMode) {
      tag += '</' + elem.name + '>';
    }
  }

  return tag;
}

function renderDirective(elem) {
  return '<' + elem.data + '>';
}

function renderText(elem, opts) {
  var data = elem.data || '';

  // if entities weren't decoded, no need to encode them back
  if (opts.decodeEntities && !(elem.parent && elem.parent.name in unencodedElements)) {
    data = entities.encodeXML(data);
  }

  return data;
}

function renderCdata(elem) {
  return '<![CDATA[' + elem.children[0].data + ']]>';
}

function renderComment(elem) {
  return '<!--' + elem.data + '-->';
}

},{"domelementtype":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domutils/node_modules/dom-serializer/node_modules/domelementtype/index.js","entities":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/entities/index.js"}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/entities/index.js":[function(require,module,exports){
var encode = require("./lib/encode.js"),
    decode = require("./lib/decode.js");

exports.decode = function(data, level){
	return (!level || level <= 0 ? decode.XML : decode.HTML)(data);
};

exports.decodeStrict = function(data, level){
	return (!level || level <= 0 ? decode.XML : decode.HTMLStrict)(data);
};

exports.encode = function(data, level){
	return (!level || level <= 0 ? encode.XML : encode.HTML)(data);
};

exports.encodeXML = encode.XML;

exports.encodeHTML4 =
exports.encodeHTML5 =
exports.encodeHTML  = encode.HTML;

exports.decodeXML =
exports.decodeXMLStrict = decode.XML;

exports.decodeHTML4 =
exports.decodeHTML5 =
exports.decodeHTML = decode.HTML;

exports.decodeHTML4Strict =
exports.decodeHTML5Strict =
exports.decodeHTMLStrict = decode.HTMLStrict;

exports.escape = encode.escape;

},{"./lib/decode.js":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/entities/lib/decode.js","./lib/encode.js":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/entities/lib/encode.js"}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/entities/lib/encode.js":[function(require,module,exports){
var inverseXML = getInverseObj(require("../maps/xml.json")),
    xmlReplacer = getInverseReplacer(inverseXML);

exports.XML = getInverse(inverseXML, xmlReplacer);

var inverseHTML = getInverseObj(require("../maps/entities.json")),
    htmlReplacer = getInverseReplacer(inverseHTML);

exports.HTML = getInverse(inverseHTML, htmlReplacer);

function getInverseObj(obj){
	return Object.keys(obj).sort().reduce(function(inverse, name){
		inverse[obj[name]] = "&" + name + ";";
		return inverse;
	}, {});
}

function getInverseReplacer(inverse){
	var single = [],
	    multiple = [];

	Object.keys(inverse).forEach(function(k){
		if(k.length === 1){
			single.push("\\" + k);
		} else {
			multiple.push(k);
		}
	});

	//TODO add ranges
	multiple.unshift("[" + single.join("") + "]");

	return new RegExp(multiple.join("|"), "g");
}

var re_nonASCII = /[^\0-\x7F]/g,
    re_astralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;

function singleCharReplacer(c){
	return "&#x" + c.charCodeAt(0).toString(16).toUpperCase() + ";";
}

function astralReplacer(c){
	// http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
	var high = c.charCodeAt(0);
	var low  = c.charCodeAt(1);
	var codePoint = (high - 0xD800) * 0x400 + low - 0xDC00 + 0x10000;
	return "&#x" + codePoint.toString(16).toUpperCase() + ";";
}

function getInverse(inverse, re){
	function func(name){
		return inverse[name];
	}

	return function(data){
		return data
				.replace(re, func)
				.replace(re_astralSymbols, astralReplacer)
				.replace(re_nonASCII, singleCharReplacer);
	};
}

var re_xmlChars = getInverseReplacer(inverseXML);

function escapeXML(data){
	return data
			.replace(re_xmlChars, singleCharReplacer)
			.replace(re_astralSymbols, astralReplacer)
			.replace(re_nonASCII, singleCharReplacer);
}

exports.escape = escapeXML;

},{"../maps/entities.json":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/entities/maps/entities.json","../maps/xml.json":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/entities/maps/xml.json"}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/entities/lib/decode.js":[function(require,module,exports){
var entityMap = require("../maps/entities.json"),
    legacyMap = require("../maps/legacy.json"),
    xmlMap    = require("../maps/xml.json"),
    decodeCodePoint = require("./decode_codepoint.js");

var decodeXMLStrict  = getStrictDecoder(xmlMap),
    decodeHTMLStrict = getStrictDecoder(entityMap);

function getStrictDecoder(map){
	var keys = Object.keys(map).join("|"),
	    replace = getReplacer(map);

	keys += "|#[xX][\\da-fA-F]+|#\\d+";

	var re = new RegExp("&(?:" + keys + ");", "g");

	return function(str){
		return String(str).replace(re, replace);
	};
}

var decodeHTML = (function(){
	var legacy = Object.keys(legacyMap)
		.sort(sorter);

	var keys = Object.keys(entityMap)
		.sort(sorter);

	for(var i = 0, j = 0; i < keys.length; i++){
		if(legacy[j] === keys[i]){
			keys[i] += ";?";
			j++;
		} else {
			keys[i] += ";";
		}
	}

	var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g"),
	    replace = getReplacer(entityMap);

	function replacer(str){
		if(str.substr(-1) !== ";") str += ";";
		return replace(str);
	}

	//TODO consider creating a merged map
	return function(str){
		return String(str).replace(re, replacer);
	};
}());

function sorter(a, b){
	return a < b ? 1 : -1;
}

function getReplacer(map){
	return function replace(str){
		if(str.charAt(1) === "#"){
			if(str.charAt(2) === "X" || str.charAt(2) === "x"){
				return decodeCodePoint(parseInt(str.substr(3), 16));
			}
			return decodeCodePoint(parseInt(str.substr(2), 10));
		}
		return map[str.slice(1, -1)];
	};
}

module.exports = {
	XML: decodeXMLStrict,
	HTML: decodeHTML,
	HTMLStrict: decodeHTMLStrict
};
},{"../maps/entities.json":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/entities/maps/entities.json","../maps/legacy.json":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/entities/maps/legacy.json","../maps/xml.json":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/entities/maps/xml.json","./decode_codepoint.js":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/entities/lib/decode_codepoint.js"}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domutils/node_modules/dom-serializer/node_modules/domelementtype/index.js":[function(require,module,exports){
//Types of elements found in the DOM
module.exports = {
	Text: "text", //Text
	Directive: "directive", //<? ... ?>
	Comment: "comment", //<!-- ... -->
	Script: "script", //<script> tags
	Style: "style", //<style> tags
	Tag: "tag", //Any tag
	CDATA: "cdata", //<![CDATA[ ... ]]>

	isTag: function(elem){
		return elem.type === "tag" || elem.type === "script" || elem.type === "style";
	}
};
},{}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domutils/lib/querying.js":[function(require,module,exports){
var isTag = require("domelementtype").isTag;

module.exports = {
	filter: filter,
	find: find,
	findOneChild: findOneChild,
	findOne: findOne,
	existsOne: existsOne,
	findAll: findAll
};

function filter(test, element, recurse, limit){
	if(!Array.isArray(element)) element = [element];

	if(typeof limit !== "number" || !isFinite(limit)){
		limit = Infinity;
	}
	return find(test, element, recurse !== false, limit);
}

function find(test, elems, recurse, limit){
	var result = [], childs;

	for(var i = 0, j = elems.length; i < j; i++){
		if(test(elems[i])){
			result.push(elems[i]);
			if(--limit <= 0) break;
		}

		childs = elems[i].children;
		if(recurse && childs && childs.length > 0){
			childs = find(test, childs, recurse, limit);
			result = result.concat(childs);
			limit -= childs.length;
			if(limit <= 0) break;
		}
	}

	return result;
}

function findOneChild(test, elems){
	for(var i = 0, l = elems.length; i < l; i++){
		if(test(elems[i])) return elems[i];
	}

	return null;
}

function findOne(test, elems){
	var elem = null;

	for(var i = 0, l = elems.length; i < l && !elem; i++){
		if(!isTag(elems[i])){
			continue;
		} else if(test(elems[i])){
			elem = elems[i];
		} else if(elems[i].children.length > 0){
			elem = findOne(test, elems[i].children);
		}
	}

	return elem;
}

function existsOne(test, elems){
	for(var i = 0, l = elems.length; i < l; i++){
		if(
			isTag(elems[i]) && (
				test(elems[i]) || (
					elems[i].children.length > 0 &&
					existsOne(test, elems[i].children)
				)
			)
		){
			return true;
		}
	}

	return false;
}

function findAll(test, elems){
	var result = [];
	for(var i = 0, j = elems.length; i < j; i++){
		if(!isTag(elems[i])) continue;
		if(test(elems[i])) result.push(elems[i]);

		if(elems[i].children.length > 0){
			result = result.concat(findAll(test, elems[i].children));
		}
	}
	return result;
}

},{"domelementtype":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domelementtype/index.js"}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domutils/lib/manipulation.js":[function(require,module,exports){
exports.removeElement = function(elem){
	if(elem.prev) elem.prev.next = elem.next;
	if(elem.next) elem.next.prev = elem.prev;

	if(elem.parent){
		var childs = elem.parent.children;
		childs.splice(childs.lastIndexOf(elem), 1);
	}
};

exports.replaceElement = function(elem, replacement){
	var prev = replacement.prev = elem.prev;
	if(prev){
		prev.next = replacement;
	}

	var next = replacement.next = elem.next;
	if(next){
		next.prev = replacement;
	}

	var parent = replacement.parent = elem.parent;
	if(parent){
		var childs = parent.children;
		childs[childs.lastIndexOf(elem)] = replacement;
	}
};

exports.appendChild = function(elem, child){
	child.parent = elem;

	if(elem.children.push(child) !== 1){
		var sibling = elem.children[elem.children.length - 2];
		sibling.next = child;
		child.prev = sibling;
		child.next = null;
	}
};

exports.append = function(elem, next){
	var parent = elem.parent,
		currNext = elem.next;

	next.next = currNext;
	next.prev = elem;
	elem.next = next;
	next.parent = parent;

	if(currNext){
		currNext.prev = next;
		if(parent){
			var childs = parent.children;
			childs.splice(childs.lastIndexOf(currNext), 0, next);
		}
	} else if(parent){
		parent.children.push(next);
	}
};

exports.prepend = function(elem, prev){
	var parent = elem.parent;
	if(parent){
		var childs = parent.children;
		childs.splice(childs.lastIndexOf(elem), 0, prev);
	}

	if(elem.prev){
		elem.prev.next = prev;
	}
	
	prev.parent = parent;
	prev.prev = elem.prev;
	prev.next = elem;
	elem.prev = prev;
};



},{}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domutils/lib/legacy.js":[function(require,module,exports){
var ElementType = require("domelementtype");
var isTag = exports.isTag = ElementType.isTag;

exports.testElement = function(options, element){
	for(var key in options){
		if(!options.hasOwnProperty(key));
		else if(key === "tag_name"){
			if(!isTag(element) || !options.tag_name(element.name)){
				return false;
			}
		} else if(key === "tag_type"){
			if(!options.tag_type(element.type)) return false;
		} else if(key === "tag_contains"){
			if(isTag(element) || !options.tag_contains(element.data)){
				return false;
			}
		} else if(!element.attribs || !options[key](element.attribs[key])){
			return false;
		}
	}
	return true;
};

var Checks = {
	tag_name: function(name){
		if(typeof name === "function"){
			return function(elem){ return isTag(elem) && name(elem.name); };
		} else if(name === "*"){
			return isTag;
		} else {
			return function(elem){ return isTag(elem) && elem.name === name; };
		}
	},
	tag_type: function(type){
		if(typeof type === "function"){
			return function(elem){ return type(elem.type); };
		} else {
			return function(elem){ return elem.type === type; };
		}
	},
	tag_contains: function(data){
		if(typeof data === "function"){
			return function(elem){ return !isTag(elem) && data(elem.data); };
		} else {
			return function(elem){ return !isTag(elem) && elem.data === data; };
		}
	}
};

function getAttribCheck(attrib, value){
	if(typeof value === "function"){
		return function(elem){ return elem.attribs && value(elem.attribs[attrib]); };
	} else {
		return function(elem){ return elem.attribs && elem.attribs[attrib] === value; };
	}
}

function combineFuncs(a, b){
	return function(elem){
		return a(elem) || b(elem);
	};
}

exports.getElements = function(options, element, recurse, limit){
	var funcs = Object.keys(options).map(function(key){
		var value = options[key];
		return key in Checks ? Checks[key](value) : getAttribCheck(key, value);
	});

	return funcs.length === 0 ? [] : this.filter(
		funcs.reduce(combineFuncs),
		element, recurse, limit
	);
};

exports.getElementById = function(id, element, recurse){
	if(!Array.isArray(element)) element = [element];
	return this.findOne(getAttribCheck("id", id), element, recurse !== false);
};

exports.getElementsByTagName = function(name, element, recurse, limit){
	return this.filter(Checks.tag_name(name), element, recurse, limit);
};

exports.getElementsByTagType = function(type, element, recurse, limit){
	return this.filter(Checks.tag_type(type), element, recurse, limit);
};

},{"domelementtype":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domelementtype/index.js"}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domutils/lib/helpers.js":[function(require,module,exports){
// removeSubsets
// Given an array of nodes, remove any member that is contained by another.
exports.removeSubsets = function(nodes) {
	var idx = nodes.length, node, ancestor, replace;

	// Check if each node (or one of its ancestors) is already contained in the
	// array.
	while (--idx > -1) {
		node = ancestor = nodes[idx];

		// Temporarily remove the node under consideration
		nodes[idx] = null;
		replace = true;

		while (ancestor) {
			if (nodes.indexOf(ancestor) > -1) {
				replace = false;
				nodes.splice(idx, 1);
				break;
			}
			ancestor = ancestor.parent;
		}

		// If the node has been found to be unique, re-insert it.
		if (replace) {
			nodes[idx] = node;
		}
	}

	return nodes;
};

// Source: http://dom.spec.whatwg.org/#dom-node-comparedocumentposition
var POSITION = {
	DISCONNECTED: 1,
	PRECEDING: 2,
	FOLLOWING: 4,
	CONTAINS: 8,
	CONTAINED_BY: 16
};

// Compare the position of one node against another node in any other document.
// The return value is a bitmask with the following values:
//
// document order:
// > There is an ordering, document order, defined on all the nodes in the
// > document corresponding to the order in which the first character of the
// > XML representation of each node occurs in the XML representation of the
// > document after expansion of general entities. Thus, the document element
// > node will be the first node. Element nodes occur before their children.
// > Thus, document order orders element nodes in order of the occurrence of
// > their start-tag in the XML (after expansion of entities). The attribute
// > nodes of an element occur after the element and before its children. The
// > relative order of attribute nodes is implementation-dependent./
// Source:
// http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order
//
// @argument {Node} nodaA The first node to use in the comparison
// @argument {Node} nodeB The second node to use in the comparison
//
// @return {Number} A bitmask describing the input nodes' relative position.
//         See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for
//         a description of these values.
var comparePos = exports.compareDocumentPosition = function(nodeA, nodeB) {
	var aParents = [];
	var bParents = [];
	var current, sharedParent, siblings, aSibling, bSibling, idx;

	if (nodeA === nodeB) {
		return 0;
	}

	current = nodeA;
	while (current) {
		aParents.unshift(current);
		current = current.parent;
	}
	current = nodeB;
	while (current) {
		bParents.unshift(current);
		current = current.parent;
	}

	idx = 0;
	while (aParents[idx] === bParents[idx]) {
		idx++;
	}

	if (idx === 0) {
		return POSITION.DISCONNECTED;
	}

	sharedParent = aParents[idx - 1];
	siblings = sharedParent.children;
	aSibling = aParents[idx];
	bSibling = bParents[idx];

	if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
		if (sharedParent === nodeB) {
			return POSITION.FOLLOWING | POSITION.CONTAINED_BY;
		}
		return POSITION.FOLLOWING;
	} else {
		if (sharedParent === nodeA) {
			return POSITION.PRECEDING | POSITION.CONTAINS;
		}
		return POSITION.PRECEDING;
	}
};

// Sort an array of nodes based on their relative position in the document and
// remove any duplicate nodes. If the array contains nodes that do not belong
// to the same document, sort order is unspecified.
//
// @argument {Array} nodes Array of DOM nodes
//
// @returns {Array} collection of unique nodes, sorted in document order
exports.uniqueSort = function(nodes) {
	var idx = nodes.length, node, position;

	nodes = nodes.slice();

	while (--idx > -1) {
		node = nodes[idx];
		position = nodes.indexOf(node);
		if (position > -1 && position < idx) {
			nodes.splice(idx, 1);
		}
	}
	nodes.sort(function(a, b) {
		var relative = comparePos(a, b);
		if (relative & POSITION.PRECEDING) {
			return -1;
		} else if (relative & POSITION.FOLLOWING) {
			return 1;
		}
		return 0;
	});

	return nodes;
};

},{}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domhandler/index.js":[function(require,module,exports){
var ElementType = require("domelementtype");

var re_whitespace = /\s+/g;
var NodePrototype = require("./lib/node");
var ElementPrototype = require("./lib/element");

function DomHandler(callback, options, elementCB){
	if(typeof callback === "object"){
		elementCB = options;
		options = callback;
		callback = null;
	} else if(typeof options === "function"){
		elementCB = options;
		options = defaultOpts;
	}
	this._callback = callback;
	this._options = options || defaultOpts;
	this._elementCB = elementCB;
	this.dom = [];
	this._done = false;
	this._tagStack = [];
	this._parser = this._parser || null;
}

//default options
var defaultOpts = {
	normalizeWhitespace: false, //Replace all whitespace with single spaces
	withStartIndices: false, //Add startIndex properties to nodes
};

DomHandler.prototype.onparserinit = function(parser){
	this._parser = parser;
};

//Resets the handler back to starting state
DomHandler.prototype.onreset = function(){
	DomHandler.call(this, this._callback, this._options, this._elementCB);
};

//Signals the handler that parsing is done
DomHandler.prototype.onend = function(){
	if(this._done) return;
	this._done = true;
	this._parser = null;
	this._handleCallback(null);
};

DomHandler.prototype._handleCallback =
DomHandler.prototype.onerror = function(error){
	if(typeof this._callback === "function"){
		this._callback(error, this.dom);
	} else {
		if(error) throw error;
	}
};

DomHandler.prototype.onclosetag = function(){
	//if(this._tagStack.pop().name !== name) this._handleCallback(Error("Tagname didn't match!"));
	var elem = this._tagStack.pop();
	if(this._elementCB) this._elementCB(elem);
};

DomHandler.prototype._addDomElement = function(element){
	var parent = this._tagStack[this._tagStack.length - 1];
	var siblings = parent ? parent.children : this.dom;
	var previousSibling = siblings[siblings.length - 1];

	element.next = null;

	if(this._options.withStartIndices){
		element.startIndex = this._parser.startIndex;
	}

	if (this._options.withDomLvl1) {
		element.__proto__ = element.type === "tag" ? ElementPrototype : NodePrototype;
	}

	if(previousSibling){
		element.prev = previousSibling;
		previousSibling.next = element;
	} else {
		element.prev = null;
	}

	siblings.push(element);
	element.parent = parent || null;
};

DomHandler.prototype.onopentag = function(name, attribs){
	var element = {
		type: name === "script" ? ElementType.Script : name === "style" ? ElementType.Style : ElementType.Tag,
		name: name,
		attribs: attribs,
		children: []
	};

	this._addDomElement(element);

	this._tagStack.push(element);
};

DomHandler.prototype.ontext = function(data){
	//the ignoreWhitespace is officially dropped, but for now,
	//it's an alias for normalizeWhitespace
	var normalize = this._options.normalizeWhitespace || this._options.ignoreWhitespace;

	var lastTag;

	if(!this._tagStack.length && this.dom.length && (lastTag = this.dom[this.dom.length-1]).type === ElementType.Text){
		if(normalize){
			lastTag.data = (lastTag.data + data).replace(re_whitespace, " ");
		} else {
			lastTag.data += data;
		}
	} else {
		if(
			this._tagStack.length &&
			(lastTag = this._tagStack[this._tagStack.length - 1]) &&
			(lastTag = lastTag.children[lastTag.children.length - 1]) &&
			lastTag.type === ElementType.Text
		){
			if(normalize){
				lastTag.data = (lastTag.data + data).replace(re_whitespace, " ");
			} else {
				lastTag.data += data;
			}
		} else {
			if(normalize){
				data = data.replace(re_whitespace, " ");
			}

			this._addDomElement({
				data: data,
				type: ElementType.Text
			});
		}
	}
};

DomHandler.prototype.oncomment = function(data){
	var lastTag = this._tagStack[this._tagStack.length - 1];

	if(lastTag && lastTag.type === ElementType.Comment){
		lastTag.data += data;
		return;
	}

	var element = {
		data: data,
		type: ElementType.Comment
	};

	this._addDomElement(element);
	this._tagStack.push(element);
};

DomHandler.prototype.oncdatastart = function(){
	var element = {
		children: [{
			data: "",
			type: ElementType.Text
		}],
		type: ElementType.CDATA
	};

	this._addDomElement(element);
	this._tagStack.push(element);
};

DomHandler.prototype.oncommentend = DomHandler.prototype.oncdataend = function(){
	this._tagStack.pop();
};

DomHandler.prototype.onprocessinginstruction = function(name, data){
	this._addDomElement({
		name: name,
		data: data,
		type: ElementType.Directive
	});
};

module.exports = DomHandler;

},{"./lib/element":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domhandler/lib/element.js","./lib/node":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domhandler/lib/node.js","domelementtype":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domelementtype/index.js"}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domhandler/lib/element.js":[function(require,module,exports){
// DOM-Level-1-compliant structure
var NodePrototype = require('./node');
var ElementPrototype = module.exports = Object.create(NodePrototype);

var domLvl1 = {
	tagName: "name"
};

Object.keys(domLvl1).forEach(function(key) {
	var shorthand = domLvl1[key];
	Object.defineProperty(ElementPrototype, key, {
		get: function() {
			return this[shorthand] || null;
		},
		set: function(val) {
			this[shorthand] = val;
			return val;
		}
	});
});

},{"./node":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domhandler/lib/node.js"}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domhandler/lib/node.js":[function(require,module,exports){
// This object will be used as the prototype for Nodes when creating a
// DOM-Level-1-compliant structure.
var NodePrototype = module.exports = {
	get firstChild() {
		var children = this.children;
		return children && children[0] || null;
	},
	get lastChild() {
		var children = this.children;
		return children && children[children.length - 1] || null;
	},
	get nodeType() {
		return nodeTypes[this.type] || nodeTypes.element;
	}
};

var domLvl1 = {
	tagName: "name",
	childNodes: "children",
	parentNode: "parent",
	previousSibling: "prev",
	nextSibling: "next",
	nodeValue: "data"
};

var nodeTypes = {
	element: 1,
	text: 3,
	cdata: 4,
	comment: 8
};

Object.keys(domLvl1).forEach(function(key) {
	var shorthand = domLvl1[key];
	Object.defineProperty(NodePrototype, key, {
		get: function() {
			return this[shorthand] || null;
		},
		set: function(val) {
			this[shorthand] = val;
			return val;
		}
	});
});

},{}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/domelementtype/index.js":[function(require,module,exports){
//Types of elements found in the DOM
module.exports = {
	Text: "text", //Text
	Directive: "directive", //<? ... ?>
	Comment: "comment", //<!-- ... -->
	Script: "script", //<script> tags
	Style: "style", //<style> tags
	Tag: "tag", //Any tag
	CDATA: "cdata", //<![CDATA[ ... ]]>
	Doctype: "doctype",

	isTag: function(elem){
		return elem.type === "tag" || elem.type === "script" || elem.type === "style";
	}
};

},{}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/lib/Stream.js":[function(require,module,exports){
module.exports = Stream;

var Parser = require("./WritableStream.js");

function Stream(options){
	Parser.call(this, new Cbs(this), options);
}

require("util").inherits(Stream, Parser);

Stream.prototype.readable = true;

function Cbs(scope){
	this.scope = scope;
}

var EVENTS = require("../").EVENTS;

Object.keys(EVENTS).forEach(function(name){
	if(EVENTS[name] === 0){
		Cbs.prototype["on" + name] = function(){
			this.scope.emit(name);
		};
	} else if(EVENTS[name] === 1){
		Cbs.prototype["on" + name] = function(a){
			this.scope.emit(name, a);
		};
	} else if(EVENTS[name] === 2){
		Cbs.prototype["on" + name] = function(a, b){
			this.scope.emit(name, a, b);
		};
	} else {
		throw Error("wrong number of arguments!");
	}
});
},{"../":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/lib/index.js","./WritableStream.js":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/lib/WritableStream.js","util":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/util/util.js"}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/lib/WritableStream.js":[function(require,module,exports){
module.exports = Stream;

var Parser = require("./Parser.js"),
    WritableStream = require("stream").Writable || require("readable-stream").Writable;

function Stream(cbs, options){
	var parser = this._parser = new Parser(cbs, options);

	WritableStream.call(this, {decodeStrings: false});

	this.once("finish", function(){
		parser.end();
	});
}

require("util").inherits(Stream, WritableStream);

WritableStream.prototype._write = function(chunk, encoding, cb){
	this._parser.write(chunk);
	cb();
};
},{"./Parser.js":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/lib/Parser.js","readable-stream":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/browser-resolve/empty.js","stream":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/stream-browserify/index.js","util":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/util/util.js"}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/lib/ProxyHandler.js":[function(require,module,exports){
module.exports = ProxyHandler;

function ProxyHandler(cbs){
	this._cbs = cbs || {};
}

var EVENTS = require("./").EVENTS;
Object.keys(EVENTS).forEach(function(name){
	if(EVENTS[name] === 0){
		name = "on" + name;
		ProxyHandler.prototype[name] = function(){
			if(this._cbs[name]) this._cbs[name]();
		};
	} else if(EVENTS[name] === 1){
		name = "on" + name;
		ProxyHandler.prototype[name] = function(a){
			if(this._cbs[name]) this._cbs[name](a);
		};
	} else if(EVENTS[name] === 2){
		name = "on" + name;
		ProxyHandler.prototype[name] = function(a, b){
			if(this._cbs[name]) this._cbs[name](a, b);
		};
	} else {
		throw Error("wrong number of arguments");
	}
});
},{"./":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/lib/index.js"}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/lib/Parser.js":[function(require,module,exports){
var Tokenizer = require("./Tokenizer.js");

/*
	Options:

	xmlMode: Disables the special behavior for script/style tags (false by default)
	lowerCaseAttributeNames: call .toLowerCase for each attribute name (true if xmlMode is `false`)
	lowerCaseTags: call .toLowerCase for each tag name (true if xmlMode is `false`)
*/

/*
	Callbacks:

	oncdataend,
	oncdatastart,
	onclosetag,
	oncomment,
	oncommentend,
	onerror,
	onopentag,
	onprocessinginstruction,
	onreset,
	ontext
*/

var formTags = {
	input: true,
	option: true,
	optgroup: true,
	select: true,
	button: true,
	datalist: true,
	textarea: true
};

var openImpliesClose = {
	tr      : { tr:true, th:true, td:true },
	th      : { th:true },
	td      : { thead:true, th:true, td:true },
	body    : { head:true, link:true, script:true },
	li      : { li:true },
	p       : { p:true },
	h1      : { p:true },
	h2      : { p:true },
	h3      : { p:true },
	h4      : { p:true },
	h5      : { p:true },
	h6      : { p:true },
	select  : formTags,
	input   : formTags,
	output  : formTags,
	button  : formTags,
	datalist: formTags,
	textarea: formTags,
	option  : { option:true },
	optgroup: { optgroup:true }
};

var voidElements = {
	__proto__: null,
	area: true,
	base: true,
	basefont: true,
	br: true,
	col: true,
	command: true,
	embed: true,
	frame: true,
	hr: true,
	img: true,
	input: true,
	isindex: true,
	keygen: true,
	link: true,
	meta: true,
	param: true,
	source: true,
	track: true,
	wbr: true,

	//common self closing svg elements
	path: true,
	circle: true,
	ellipse: true,
	line: true,
	rect: true,
	use: true,
	stop: true,
	polyline: true,
	polygon: true
};

var re_nameEnd = /\s|\//;

function Parser(cbs, options){
	this._options = options || {};
	this._cbs = cbs || {};

	this._tagname = "";
	this._attribname = "";
	this._attribvalue = "";
	this._attribs = null;
	this._stack = [];

	this.startIndex = 0;
	this.endIndex = null;

	this._lowerCaseTagNames = "lowerCaseTags" in this._options ?
									!!this._options.lowerCaseTags :
									!this._options.xmlMode;
	this._lowerCaseAttributeNames = "lowerCaseAttributeNames" in this._options ?
									!!this._options.lowerCaseAttributeNames :
									!this._options.xmlMode;
	if(!!this._options.Tokenizer) {
		Tokenizer = this._options.Tokenizer;
	}
	this._tokenizer = new Tokenizer(this._options, this);

	if(this._cbs.onparserinit) this._cbs.onparserinit(this);
}

require("util").inherits(Parser, require("events").EventEmitter);

Parser.prototype._updatePosition = function(initialOffset){
	if(this.endIndex === null){
		if(this._tokenizer._sectionStart <= initialOffset){
			this.startIndex = 0;
		} else {
			this.startIndex = this._tokenizer._sectionStart - initialOffset;
		}
	}
	else this.startIndex = this.endIndex + 1;
	this.endIndex = this._tokenizer.getAbsoluteIndex();
};

//Tokenizer event handlers
Parser.prototype.ontext = function(data){
	this._updatePosition(1);
	this.endIndex--;

	if(this._cbs.ontext) this._cbs.ontext(data);
};

Parser.prototype.onopentagname = function(name){
	if(this._lowerCaseTagNames){
		name = name.toLowerCase();
	}

	this._tagname = name;

	if(!this._options.xmlMode && name in openImpliesClose) {
		for(
			var el;
			(el = this._stack[this._stack.length - 1]) in openImpliesClose[name];
			this.onclosetag(el)
		);
	}

	if(this._options.xmlMode || !(name in voidElements)){
		this._stack.push(name);
	}

	if(this._cbs.onopentagname) this._cbs.onopentagname(name);
	if(this._cbs.onopentag) this._attribs = {};
};

Parser.prototype.onopentagend = function(){
	this._updatePosition(1);

	if(this._attribs){
		if(this._cbs.onopentag) this._cbs.onopentag(this._tagname, this._attribs);
		this._attribs = null;
	}

	if(!this._options.xmlMode && this._cbs.onclosetag && this._tagname in voidElements){
		this._cbs.onclosetag(this._tagname);
	}

	this._tagname = "";
};

Parser.prototype.onclosetag = function(name){
	this._updatePosition(1);

	if(this._lowerCaseTagNames){
		name = name.toLowerCase();
	}

	if(this._stack.length && (!(name in voidElements) || this._options.xmlMode)){
		var pos = this._stack.lastIndexOf(name);
		if(pos !== -1){
			if(this._cbs.onclosetag){
				pos = this._stack.length - pos;
				while(pos--) this._cbs.onclosetag(this._stack.pop());
			}
			else this._stack.length = pos;
		} else if(name === "p" && !this._options.xmlMode){
			this.onopentagname(name);
			this._closeCurrentTag();
		}
	} else if(!this._options.xmlMode && (name === "br" || name === "p")){
		this.onopentagname(name);
		this._closeCurrentTag();
	}
};

Parser.prototype.onselfclosingtag = function(){
	if(this._options.xmlMode || this._options.recognizeSelfClosing){
		this._closeCurrentTag();
	} else {
		this.onopentagend();
	}
};

Parser.prototype._closeCurrentTag = function(){
	var name = this._tagname;

	this.onopentagend();

	//self-closing tags will be on the top of the stack
	//(cheaper check than in onclosetag)
	if(this._stack[this._stack.length - 1] === name){
		if(this._cbs.onclosetag){
			this._cbs.onclosetag(name);
		}
		this._stack.pop();
	}
};

Parser.prototype.onattribname = function(name){
	if(this._lowerCaseAttributeNames){
		name = name.toLowerCase();
	}
	this._attribname = name;
};

Parser.prototype.onattribdata = function(value){
	this._attribvalue += value;
};

Parser.prototype.onattribend = function(){
	if(this._cbs.onattribute) this._cbs.onattribute(this._attribname, this._attribvalue);
	if(
		this._attribs &&
		!Object.prototype.hasOwnProperty.call(this._attribs, this._attribname)
	){
		this._attribs[this._attribname] = this._attribvalue;
	}
	this._attribname = "";
	this._attribvalue = "";
};

Parser.prototype._getInstructionName = function(value){
	var idx = value.search(re_nameEnd),
	    name = idx < 0 ? value : value.substr(0, idx);

	if(this._lowerCaseTagNames){
		name = name.toLowerCase();
	}

	return name;
};

Parser.prototype.ondeclaration = function(value){
	if(this._cbs.onprocessinginstruction){
		var name = this._getInstructionName(value);
		this._cbs.onprocessinginstruction("!" + name, "!" + value);
	}
};

Parser.prototype.onprocessinginstruction = function(value){
	if(this._cbs.onprocessinginstruction){
		var name = this._getInstructionName(value);
		this._cbs.onprocessinginstruction("?" + name, "?" + value);
	}
};

Parser.prototype.oncomment = function(value){
	this._updatePosition(4);

	if(this._cbs.oncomment) this._cbs.oncomment(value);
	if(this._cbs.oncommentend) this._cbs.oncommentend();
};

Parser.prototype.oncdata = function(value){
	this._updatePosition(1);

	if(this._options.xmlMode || this._options.recognizeCDATA){
		if(this._cbs.oncdatastart) this._cbs.oncdatastart();
		if(this._cbs.ontext) this._cbs.ontext(value);
		if(this._cbs.oncdataend) this._cbs.oncdataend();
	} else {
		this.oncomment("[CDATA[" + value + "]]");
	}
};

Parser.prototype.onerror = function(err){
	if(this._cbs.onerror) this._cbs.onerror(err);
};

Parser.prototype.onend = function(){
	if(this._cbs.onclosetag){
		for(
			var i = this._stack.length;
			i > 0;
			this._cbs.onclosetag(this._stack[--i])
		);
	}
	if(this._cbs.onend) this._cbs.onend();
};


//Resets the parser to a blank state, ready to parse a new HTML document
Parser.prototype.reset = function(){
	if(this._cbs.onreset) this._cbs.onreset();
	this._tokenizer.reset();

	this._tagname = "";
	this._attribname = "";
	this._attribs = null;
	this._stack = [];

	if(this._cbs.onparserinit) this._cbs.onparserinit(this);
};

//Parses a complete HTML document and pushes it to the handler
Parser.prototype.parseComplete = function(data){
	this.reset();
	this.end(data);
};

Parser.prototype.write = function(chunk){
	this._tokenizer.write(chunk);
};

Parser.prototype.end = function(chunk){
	this._tokenizer.end(chunk);
};

Parser.prototype.pause = function(){
	this._tokenizer.pause();
};

Parser.prototype.resume = function(){
	this._tokenizer.resume();
};

//alias for backwards compat
Parser.prototype.parseChunk = Parser.prototype.write;
Parser.prototype.done = Parser.prototype.end;

module.exports = Parser;

},{"./Tokenizer.js":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/lib/Tokenizer.js","events":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/events/events.js","util":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/util/util.js"}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/lib/Tokenizer.js":[function(require,module,exports){
module.exports = Tokenizer;

var decodeCodePoint = require("entities/lib/decode_codepoint.js"),
    entityMap = require("entities/maps/entities.json"),
    legacyMap = require("entities/maps/legacy.json"),
    xmlMap    = require("entities/maps/xml.json"),

    i = 0,

    TEXT                      = i++,
    BEFORE_TAG_NAME           = i++, //after <
    IN_TAG_NAME               = i++,
    IN_SELF_CLOSING_TAG       = i++,
    BEFORE_CLOSING_TAG_NAME   = i++,
    IN_CLOSING_TAG_NAME       = i++,
    AFTER_CLOSING_TAG_NAME    = i++,

    //attributes
    BEFORE_ATTRIBUTE_NAME     = i++,
    IN_ATTRIBUTE_NAME         = i++,
    AFTER_ATTRIBUTE_NAME      = i++,
    BEFORE_ATTRIBUTE_VALUE    = i++,
    IN_ATTRIBUTE_VALUE_DQ     = i++, // "
    IN_ATTRIBUTE_VALUE_SQ     = i++, // '
    IN_ATTRIBUTE_VALUE_NQ     = i++,

    //declarations
    BEFORE_DECLARATION        = i++, // !
    IN_DECLARATION            = i++,

    //processing instructions
    IN_PROCESSING_INSTRUCTION = i++, // ?

    //comments
    BEFORE_COMMENT            = i++,
    IN_COMMENT                = i++,
    AFTER_COMMENT_1           = i++,
    AFTER_COMMENT_2           = i++,

    //cdata
    BEFORE_CDATA_1            = i++, // [
    BEFORE_CDATA_2            = i++, // C
    BEFORE_CDATA_3            = i++, // D
    BEFORE_CDATA_4            = i++, // A
    BEFORE_CDATA_5            = i++, // T
    BEFORE_CDATA_6            = i++, // A
    IN_CDATA                  = i++, // [
    AFTER_CDATA_1             = i++, // ]
    AFTER_CDATA_2             = i++, // ]

    //special tags
    BEFORE_SPECIAL            = i++, //S
    BEFORE_SPECIAL_END        = i++,   //S

    BEFORE_SCRIPT_1           = i++, //C
    BEFORE_SCRIPT_2           = i++, //R
    BEFORE_SCRIPT_3           = i++, //I
    BEFORE_SCRIPT_4           = i++, //P
    BEFORE_SCRIPT_5           = i++, //T
    AFTER_SCRIPT_1            = i++, //C
    AFTER_SCRIPT_2            = i++, //R
    AFTER_SCRIPT_3            = i++, //I
    AFTER_SCRIPT_4            = i++, //P
    AFTER_SCRIPT_5            = i++, //T

    BEFORE_STYLE_1            = i++, //T
    BEFORE_STYLE_2            = i++, //Y
    BEFORE_STYLE_3            = i++, //L
    BEFORE_STYLE_4            = i++, //E
    AFTER_STYLE_1             = i++, //T
    AFTER_STYLE_2             = i++, //Y
    AFTER_STYLE_3             = i++, //L
    AFTER_STYLE_4             = i++, //E

    BEFORE_ENTITY             = i++, //&
    BEFORE_NUMERIC_ENTITY     = i++, //#
    IN_NAMED_ENTITY           = i++,
    IN_NUMERIC_ENTITY         = i++,
    IN_HEX_ENTITY             = i++, //X

    j = 0,

    SPECIAL_NONE              = j++,
    SPECIAL_SCRIPT            = j++,
    SPECIAL_STYLE             = j++;

function whitespace(c){
	return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
}

function characterState(char, SUCCESS){
	return function(c){
		if(c === char) this._state = SUCCESS;
	};
}

function ifElseState(upper, SUCCESS, FAILURE){
	var lower = upper.toLowerCase();

	if(upper === lower){
		return function(c){
			if(c === lower){
				this._state = SUCCESS;
			} else {
				this._state = FAILURE;
				this._index--;
			}
		};
	} else {
		return function(c){
			if(c === lower || c === upper){
				this._state = SUCCESS;
			} else {
				this._state = FAILURE;
				this._index--;
			}
		};
	}
}

function consumeSpecialNameChar(upper, NEXT_STATE){
	var lower = upper.toLowerCase();

	return function(c){
		if(c === lower || c === upper){
			this._state = NEXT_STATE;
		} else {
			this._state = IN_TAG_NAME;
			this._index--; //consume the token again
		}
	};
}

function Tokenizer(options, cbs){
	this._state = TEXT;
	this._buffer = "";
	this._sectionStart = 0;
	this._index = 0;
	this._bufferOffset = 0; //chars removed from _buffer
	this._baseState = TEXT;
	this._special = SPECIAL_NONE;
	this._cbs = cbs;
	this._running = true;
	this._ended = false;
	this._xmlMode = !!(options && options.xmlMode);
	this._decodeEntities = !!(options && options.decodeEntities);
}

Tokenizer.prototype._stateText = function(c){
	if(c === "<"){
		if(this._index > this._sectionStart){
			this._cbs.ontext(this._getSection());
		}
		this._state = BEFORE_TAG_NAME;
		this._sectionStart = this._index;
	} else if(this._decodeEntities && this._special === SPECIAL_NONE && c === "&"){
		if(this._index > this._sectionStart){
			this._cbs.ontext(this._getSection());
		}
		this._baseState = TEXT;
		this._state = BEFORE_ENTITY;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateBeforeTagName = function(c){
	if(c === "/"){
		this._state = BEFORE_CLOSING_TAG_NAME;
	} else if(c === ">" || this._special !== SPECIAL_NONE || whitespace(c)) {
		this._state = TEXT;
	} else if(c === "!"){
		this._state = BEFORE_DECLARATION;
		this._sectionStart = this._index + 1;
	} else if(c === "?"){
		this._state = IN_PROCESSING_INSTRUCTION;
		this._sectionStart = this._index + 1;
	} else if(c === "<"){
		this._cbs.ontext(this._getSection());
		this._sectionStart = this._index;
	} else {
		this._state = (!this._xmlMode && (c === "s" || c === "S")) ?
						BEFORE_SPECIAL : IN_TAG_NAME;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInTagName = function(c){
	if(c === "/" || c === ">" || whitespace(c)){
		this._emitToken("onopentagname");
		this._state = BEFORE_ATTRIBUTE_NAME;
		this._index--;
	}
};

Tokenizer.prototype._stateBeforeCloseingTagName = function(c){
	if(whitespace(c));
	else if(c === ">"){
		this._state = TEXT;
	} else if(this._special !== SPECIAL_NONE){
		if(c === "s" || c === "S"){
			this._state = BEFORE_SPECIAL_END;
		} else {
			this._state = TEXT;
			this._index--;
		}
	} else {
		this._state = IN_CLOSING_TAG_NAME;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInCloseingTagName = function(c){
	if(c === ">" || whitespace(c)){
		this._emitToken("onclosetag");
		this._state = AFTER_CLOSING_TAG_NAME;
		this._index--;
	}
};

Tokenizer.prototype._stateAfterCloseingTagName = function(c){
	//skip everything until ">"
	if(c === ">"){
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	}
};

Tokenizer.prototype._stateBeforeAttributeName = function(c){
	if(c === ">"){
		this._cbs.onopentagend();
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	} else if(c === "/"){
		this._state = IN_SELF_CLOSING_TAG;
	} else if(!whitespace(c)){
		this._state = IN_ATTRIBUTE_NAME;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInSelfClosingTag = function(c){
	if(c === ">"){
		this._cbs.onselfclosingtag();
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	} else if(!whitespace(c)){
		this._state = BEFORE_ATTRIBUTE_NAME;
		this._index--;
	}
};

Tokenizer.prototype._stateInAttributeName = function(c){
	if(c === "=" || c === "/" || c === ">" || whitespace(c)){
		this._cbs.onattribname(this._getSection());
		this._sectionStart = -1;
		this._state = AFTER_ATTRIBUTE_NAME;
		this._index--;
	}
};

Tokenizer.prototype._stateAfterAttributeName = function(c){
	if(c === "="){
		this._state = BEFORE_ATTRIBUTE_VALUE;
	} else if(c === "/" || c === ">"){
		this._cbs.onattribend();
		this._state = BEFORE_ATTRIBUTE_NAME;
		this._index--;
	} else if(!whitespace(c)){
		this._cbs.onattribend();
		this._state = IN_ATTRIBUTE_NAME;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateBeforeAttributeValue = function(c){
	if(c === "\""){
		this._state = IN_ATTRIBUTE_VALUE_DQ;
		this._sectionStart = this._index + 1;
	} else if(c === "'"){
		this._state = IN_ATTRIBUTE_VALUE_SQ;
		this._sectionStart = this._index + 1;
	} else if(!whitespace(c)){
		this._state = IN_ATTRIBUTE_VALUE_NQ;
		this._sectionStart = this._index;
		this._index--; //reconsume token
	}
};

Tokenizer.prototype._stateInAttributeValueDoubleQuotes = function(c){
	if(c === "\""){
		this._emitToken("onattribdata");
		this._cbs.onattribend();
		this._state = BEFORE_ATTRIBUTE_NAME;
	} else if(this._decodeEntities && c === "&"){
		this._emitToken("onattribdata");
		this._baseState = this._state;
		this._state = BEFORE_ENTITY;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInAttributeValueSingleQuotes = function(c){
	if(c === "'"){
		this._emitToken("onattribdata");
		this._cbs.onattribend();
		this._state = BEFORE_ATTRIBUTE_NAME;
	} else if(this._decodeEntities && c === "&"){
		this._emitToken("onattribdata");
		this._baseState = this._state;
		this._state = BEFORE_ENTITY;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInAttributeValueNoQuotes = function(c){
	if(whitespace(c) || c === ">"){
		this._emitToken("onattribdata");
		this._cbs.onattribend();
		this._state = BEFORE_ATTRIBUTE_NAME;
		this._index--;
	} else if(this._decodeEntities && c === "&"){
		this._emitToken("onattribdata");
		this._baseState = this._state;
		this._state = BEFORE_ENTITY;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateBeforeDeclaration = function(c){
	this._state = c === "[" ? BEFORE_CDATA_1 :
					c === "-" ? BEFORE_COMMENT :
						IN_DECLARATION;
};

Tokenizer.prototype._stateInDeclaration = function(c){
	if(c === ">"){
		this._cbs.ondeclaration(this._getSection());
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	}
};

Tokenizer.prototype._stateInProcessingInstruction = function(c){
	if(c === ">"){
		this._cbs.onprocessinginstruction(this._getSection());
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	}
};

Tokenizer.prototype._stateBeforeComment = function(c){
	if(c === "-"){
		this._state = IN_COMMENT;
		this._sectionStart = this._index + 1;
	} else {
		this._state = IN_DECLARATION;
	}
};

Tokenizer.prototype._stateInComment = function(c){
	if(c === "-") this._state = AFTER_COMMENT_1;
};

Tokenizer.prototype._stateAfterComment1 = function(c){
	if(c === "-"){
		this._state = AFTER_COMMENT_2;
	} else {
		this._state = IN_COMMENT;
	}
};

Tokenizer.prototype._stateAfterComment2 = function(c){
	if(c === ">"){
		//remove 2 trailing chars
		this._cbs.oncomment(this._buffer.substring(this._sectionStart, this._index - 2));
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	} else if(c !== "-"){
		this._state = IN_COMMENT;
	}
	// else: stay in AFTER_COMMENT_2 (`--->`)
};

Tokenizer.prototype._stateBeforeCdata1 = ifElseState("C", BEFORE_CDATA_2, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata2 = ifElseState("D", BEFORE_CDATA_3, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata3 = ifElseState("A", BEFORE_CDATA_4, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata4 = ifElseState("T", BEFORE_CDATA_5, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata5 = ifElseState("A", BEFORE_CDATA_6, IN_DECLARATION);

Tokenizer.prototype._stateBeforeCdata6 = function(c){
	if(c === "["){
		this._state = IN_CDATA;
		this._sectionStart = this._index + 1;
	} else {
		this._state = IN_DECLARATION;
		this._index--;
	}
};

Tokenizer.prototype._stateInCdata = function(c){
	if(c === "]") this._state = AFTER_CDATA_1;
};

Tokenizer.prototype._stateAfterCdata1 = characterState("]", AFTER_CDATA_2);

Tokenizer.prototype._stateAfterCdata2 = function(c){
	if(c === ">"){
		//remove 2 trailing chars
		this._cbs.oncdata(this._buffer.substring(this._sectionStart, this._index - 2));
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	} else if(c !== "]") {
		this._state = IN_CDATA;
	}
	//else: stay in AFTER_CDATA_2 (`]]]>`)
};

Tokenizer.prototype._stateBeforeSpecial = function(c){
	if(c === "c" || c === "C"){
		this._state = BEFORE_SCRIPT_1;
	} else if(c === "t" || c === "T"){
		this._state = BEFORE_STYLE_1;
	} else {
		this._state = IN_TAG_NAME;
		this._index--; //consume the token again
	}
};

Tokenizer.prototype._stateBeforeSpecialEnd = function(c){
	if(this._special === SPECIAL_SCRIPT && (c === "c" || c === "C")){
		this._state = AFTER_SCRIPT_1;
	} else if(this._special === SPECIAL_STYLE && (c === "t" || c === "T")){
		this._state = AFTER_STYLE_1;
	}
	else this._state = TEXT;
};

Tokenizer.prototype._stateBeforeScript1 = consumeSpecialNameChar("R", BEFORE_SCRIPT_2);
Tokenizer.prototype._stateBeforeScript2 = consumeSpecialNameChar("I", BEFORE_SCRIPT_3);
Tokenizer.prototype._stateBeforeScript3 = consumeSpecialNameChar("P", BEFORE_SCRIPT_4);
Tokenizer.prototype._stateBeforeScript4 = consumeSpecialNameChar("T", BEFORE_SCRIPT_5);

Tokenizer.prototype._stateBeforeScript5 = function(c){
	if(c === "/" || c === ">" || whitespace(c)){
		this._special = SPECIAL_SCRIPT;
	}
	this._state = IN_TAG_NAME;
	this._index--; //consume the token again
};

Tokenizer.prototype._stateAfterScript1 = ifElseState("R", AFTER_SCRIPT_2, TEXT);
Tokenizer.prototype._stateAfterScript2 = ifElseState("I", AFTER_SCRIPT_3, TEXT);
Tokenizer.prototype._stateAfterScript3 = ifElseState("P", AFTER_SCRIPT_4, TEXT);
Tokenizer.prototype._stateAfterScript4 = ifElseState("T", AFTER_SCRIPT_5, TEXT);

Tokenizer.prototype._stateAfterScript5 = function(c){
	if(c === ">" || whitespace(c)){
		this._special = SPECIAL_NONE;
		this._state = IN_CLOSING_TAG_NAME;
		this._sectionStart = this._index - 6;
		this._index--; //reconsume the token
	}
	else this._state = TEXT;
};

Tokenizer.prototype._stateBeforeStyle1 = consumeSpecialNameChar("Y", BEFORE_STYLE_2);
Tokenizer.prototype._stateBeforeStyle2 = consumeSpecialNameChar("L", BEFORE_STYLE_3);
Tokenizer.prototype._stateBeforeStyle3 = consumeSpecialNameChar("E", BEFORE_STYLE_4);

Tokenizer.prototype._stateBeforeStyle4 = function(c){
	if(c === "/" || c === ">" || whitespace(c)){
		this._special = SPECIAL_STYLE;
	}
	this._state = IN_TAG_NAME;
	this._index--; //consume the token again
};

Tokenizer.prototype._stateAfterStyle1 = ifElseState("Y", AFTER_STYLE_2, TEXT);
Tokenizer.prototype._stateAfterStyle2 = ifElseState("L", AFTER_STYLE_3, TEXT);
Tokenizer.prototype._stateAfterStyle3 = ifElseState("E", AFTER_STYLE_4, TEXT);

Tokenizer.prototype._stateAfterStyle4 = function(c){
	if(c === ">" || whitespace(c)){
		this._special = SPECIAL_NONE;
		this._state = IN_CLOSING_TAG_NAME;
		this._sectionStart = this._index - 5;
		this._index--; //reconsume the token
	}
	else this._state = TEXT;
};

Tokenizer.prototype._stateBeforeEntity = ifElseState("#", BEFORE_NUMERIC_ENTITY, IN_NAMED_ENTITY);
Tokenizer.prototype._stateBeforeNumericEntity = ifElseState("X", IN_HEX_ENTITY, IN_NUMERIC_ENTITY);

//for entities terminated with a semicolon
Tokenizer.prototype._parseNamedEntityStrict = function(){
	//offset = 1
	if(this._sectionStart + 1 < this._index){
		var entity = this._buffer.substring(this._sectionStart + 1, this._index),
		    map = this._xmlMode ? xmlMap : entityMap;

		if(map.hasOwnProperty(entity)){
			this._emitPartial(map[entity]);
			this._sectionStart = this._index + 1;
		}
	}
};


//parses legacy entities (without trailing semicolon)
Tokenizer.prototype._parseLegacyEntity = function(){
	var start = this._sectionStart + 1,
	    limit = this._index - start;

	if(limit > 6) limit = 6; //the max length of legacy entities is 6

	while(limit >= 2){ //the min length of legacy entities is 2
		var entity = this._buffer.substr(start, limit);

		if(legacyMap.hasOwnProperty(entity)){
			this._emitPartial(legacyMap[entity]);
			this._sectionStart += limit + 1;
			return;
		} else {
			limit--;
		}
	}
};

Tokenizer.prototype._stateInNamedEntity = function(c){
	if(c === ";"){
		this._parseNamedEntityStrict();
		if(this._sectionStart + 1 < this._index && !this._xmlMode){
			this._parseLegacyEntity();
		}
		this._state = this._baseState;
	} else if((c < "a" || c > "z") && (c < "A" || c > "Z") && (c < "0" || c > "9")){
		if(this._xmlMode);
		else if(this._sectionStart + 1 === this._index);
		else if(this._baseState !== TEXT){
			if(c !== "="){
				this._parseNamedEntityStrict();
			}
		} else {
			this._parseLegacyEntity();
		}

		this._state = this._baseState;
		this._index--;
	}
};

Tokenizer.prototype._decodeNumericEntity = function(offset, base){
	var sectionStart = this._sectionStart + offset;

	if(sectionStart !== this._index){
		//parse entity
		var entity = this._buffer.substring(sectionStart, this._index);
		var parsed = parseInt(entity, base);

		this._emitPartial(decodeCodePoint(parsed));
		this._sectionStart = this._index;
	} else {
		this._sectionStart--;
	}

	this._state = this._baseState;
};

Tokenizer.prototype._stateInNumericEntity = function(c){
	if(c === ";"){
		this._decodeNumericEntity(2, 10);
		this._sectionStart++;
	} else if(c < "0" || c > "9"){
		if(!this._xmlMode){
			this._decodeNumericEntity(2, 10);
		} else {
			this._state = this._baseState;
		}
		this._index--;
	}
};

Tokenizer.prototype._stateInHexEntity = function(c){
	if(c === ";"){
		this._decodeNumericEntity(3, 16);
		this._sectionStart++;
	} else if((c < "a" || c > "f") && (c < "A" || c > "F") && (c < "0" || c > "9")){
		if(!this._xmlMode){
			this._decodeNumericEntity(3, 16);
		} else {
			this._state = this._baseState;
		}
		this._index--;
	}
};

Tokenizer.prototype._cleanup = function (){
	if(this._sectionStart < 0){
		this._buffer = "";
		this._index = 0;
		this._bufferOffset += this._index;
	} else if(this._running){
		if(this._state === TEXT){
			if(this._sectionStart !== this._index){
				this._cbs.ontext(this._buffer.substr(this._sectionStart));
			}
			this._buffer = "";
			this._index = 0;
			this._bufferOffset += this._index;
		} else if(this._sectionStart === this._index){
			//the section just started
			this._buffer = "";
			this._index = 0;
			this._bufferOffset += this._index;
		} else {
			//remove everything unnecessary
			this._buffer = this._buffer.substr(this._sectionStart);
			this._index -= this._sectionStart;
			this._bufferOffset += this._sectionStart;
		}

		this._sectionStart = 0;
	}
};

//TODO make events conditional
Tokenizer.prototype.write = function(chunk){
	if(this._ended) this._cbs.onerror(Error(".write() after done!"));

	this._buffer += chunk;
	this._parse();
};

Tokenizer.prototype._parse = function(){
	while(this._index < this._buffer.length && this._running){
		var c = this._buffer.charAt(this._index);
		if(this._state === TEXT) {
			this._stateText(c);
		} else if(this._state === BEFORE_TAG_NAME){
			this._stateBeforeTagName(c);
		} else if(this._state === IN_TAG_NAME) {
			this._stateInTagName(c);
		} else if(this._state === BEFORE_CLOSING_TAG_NAME){
			this._stateBeforeCloseingTagName(c);
		} else if(this._state === IN_CLOSING_TAG_NAME){
			this._stateInCloseingTagName(c);
		} else if(this._state === AFTER_CLOSING_TAG_NAME){
			this._stateAfterCloseingTagName(c);
		} else if(this._state === IN_SELF_CLOSING_TAG){
			this._stateInSelfClosingTag(c);
		}

		/*
		*	attributes
		*/
		else if(this._state === BEFORE_ATTRIBUTE_NAME){
			this._stateBeforeAttributeName(c);
		} else if(this._state === IN_ATTRIBUTE_NAME){
			this._stateInAttributeName(c);
		} else if(this._state === AFTER_ATTRIBUTE_NAME){
			this._stateAfterAttributeName(c);
		} else if(this._state === BEFORE_ATTRIBUTE_VALUE){
			this._stateBeforeAttributeValue(c);
		} else if(this._state === IN_ATTRIBUTE_VALUE_DQ){
			this._stateInAttributeValueDoubleQuotes(c);
		} else if(this._state === IN_ATTRIBUTE_VALUE_SQ){
			this._stateInAttributeValueSingleQuotes(c);
		} else if(this._state === IN_ATTRIBUTE_VALUE_NQ){
			this._stateInAttributeValueNoQuotes(c);
		}

		/*
		*	declarations
		*/
		else if(this._state === BEFORE_DECLARATION){
			this._stateBeforeDeclaration(c);
		} else if(this._state === IN_DECLARATION){
			this._stateInDeclaration(c);
		}

		/*
		*	processing instructions
		*/
		else if(this._state === IN_PROCESSING_INSTRUCTION){
			this._stateInProcessingInstruction(c);
		}

		/*
		*	comments
		*/
		else if(this._state === BEFORE_COMMENT){
			this._stateBeforeComment(c);
		} else if(this._state === IN_COMMENT){
			this._stateInComment(c);
		} else if(this._state === AFTER_COMMENT_1){
			this._stateAfterComment1(c);
		} else if(this._state === AFTER_COMMENT_2){
			this._stateAfterComment2(c);
		}

		/*
		*	cdata
		*/
		else if(this._state === BEFORE_CDATA_1){
			this._stateBeforeCdata1(c);
		} else if(this._state === BEFORE_CDATA_2){
			this._stateBeforeCdata2(c);
		} else if(this._state === BEFORE_CDATA_3){
			this._stateBeforeCdata3(c);
		} else if(this._state === BEFORE_CDATA_4){
			this._stateBeforeCdata4(c);
		} else if(this._state === BEFORE_CDATA_5){
			this._stateBeforeCdata5(c);
		} else if(this._state === BEFORE_CDATA_6){
			this._stateBeforeCdata6(c);
		} else if(this._state === IN_CDATA){
			this._stateInCdata(c);
		} else if(this._state === AFTER_CDATA_1){
			this._stateAfterCdata1(c);
		} else if(this._state === AFTER_CDATA_2){
			this._stateAfterCdata2(c);
		}

		/*
		* special tags
		*/
		else if(this._state === BEFORE_SPECIAL){
			this._stateBeforeSpecial(c);
		} else if(this._state === BEFORE_SPECIAL_END){
			this._stateBeforeSpecialEnd(c);
		}

		/*
		* script
		*/
		else if(this._state === BEFORE_SCRIPT_1){
			this._stateBeforeScript1(c);
		} else if(this._state === BEFORE_SCRIPT_2){
			this._stateBeforeScript2(c);
		} else if(this._state === BEFORE_SCRIPT_3){
			this._stateBeforeScript3(c);
		} else if(this._state === BEFORE_SCRIPT_4){
			this._stateBeforeScript4(c);
		} else if(this._state === BEFORE_SCRIPT_5){
			this._stateBeforeScript5(c);
		}

		else if(this._state === AFTER_SCRIPT_1){
			this._stateAfterScript1(c);
		} else if(this._state === AFTER_SCRIPT_2){
			this._stateAfterScript2(c);
		} else if(this._state === AFTER_SCRIPT_3){
			this._stateAfterScript3(c);
		} else if(this._state === AFTER_SCRIPT_4){
			this._stateAfterScript4(c);
		} else if(this._state === AFTER_SCRIPT_5){
			this._stateAfterScript5(c);
		}

		/*
		* style
		*/
		else if(this._state === BEFORE_STYLE_1){
			this._stateBeforeStyle1(c);
		} else if(this._state === BEFORE_STYLE_2){
			this._stateBeforeStyle2(c);
		} else if(this._state === BEFORE_STYLE_3){
			this._stateBeforeStyle3(c);
		} else if(this._state === BEFORE_STYLE_4){
			this._stateBeforeStyle4(c);
		}

		else if(this._state === AFTER_STYLE_1){
			this._stateAfterStyle1(c);
		} else if(this._state === AFTER_STYLE_2){
			this._stateAfterStyle2(c);
		} else if(this._state === AFTER_STYLE_3){
			this._stateAfterStyle3(c);
		} else if(this._state === AFTER_STYLE_4){
			this._stateAfterStyle4(c);
		}

		/*
		* entities
		*/
		else if(this._state === BEFORE_ENTITY){
			this._stateBeforeEntity(c);
		} else if(this._state === BEFORE_NUMERIC_ENTITY){
			this._stateBeforeNumericEntity(c);
		} else if(this._state === IN_NAMED_ENTITY){
			this._stateInNamedEntity(c);
		} else if(this._state === IN_NUMERIC_ENTITY){
			this._stateInNumericEntity(c);
		} else if(this._state === IN_HEX_ENTITY){
			this._stateInHexEntity(c);
		}

		else {
			this._cbs.onerror(Error("unknown _state"), this._state);
		}

		this._index++;
	}

	this._cleanup();
};

Tokenizer.prototype.pause = function(){
	this._running = false;
};
Tokenizer.prototype.resume = function(){
	this._running = true;

	if(this._index < this._buffer.length){
		this._parse();
	}
	if(this._ended){
		this._finish();
	}
};

Tokenizer.prototype.end = function(chunk){
	if(this._ended) this._cbs.onerror(Error(".end() after done!"));
	if(chunk) this.write(chunk);

	this._ended = true;

	if(this._running) this._finish();
};

Tokenizer.prototype._finish = function(){
	//if there is remaining data, emit it in a reasonable way
	if(this._sectionStart < this._index){
		this._handleTrailingData();
	}

	this._cbs.onend();
};

Tokenizer.prototype._handleTrailingData = function(){
	var data = this._buffer.substr(this._sectionStart);

	if(this._state === IN_CDATA || this._state === AFTER_CDATA_1 || this._state === AFTER_CDATA_2){
		this._cbs.oncdata(data);
	} else if(this._state === IN_COMMENT || this._state === AFTER_COMMENT_1 || this._state === AFTER_COMMENT_2){
		this._cbs.oncomment(data);
	} else if(this._state === IN_NAMED_ENTITY && !this._xmlMode){
		this._parseLegacyEntity();
		if(this._sectionStart < this._index){
			this._state = this._baseState;
			this._handleTrailingData();
		}
	} else if(this._state === IN_NUMERIC_ENTITY && !this._xmlMode){
		this._decodeNumericEntity(2, 10);
		if(this._sectionStart < this._index){
			this._state = this._baseState;
			this._handleTrailingData();
		}
	} else if(this._state === IN_HEX_ENTITY && !this._xmlMode){
		this._decodeNumericEntity(3, 16);
		if(this._sectionStart < this._index){
			this._state = this._baseState;
			this._handleTrailingData();
		}
	} else if(
		this._state !== IN_TAG_NAME &&
		this._state !== BEFORE_ATTRIBUTE_NAME &&
		this._state !== BEFORE_ATTRIBUTE_VALUE &&
		this._state !== AFTER_ATTRIBUTE_NAME &&
		this._state !== IN_ATTRIBUTE_NAME &&
		this._state !== IN_ATTRIBUTE_VALUE_SQ &&
		this._state !== IN_ATTRIBUTE_VALUE_DQ &&
		this._state !== IN_ATTRIBUTE_VALUE_NQ &&
		this._state !== IN_CLOSING_TAG_NAME
	){
		this._cbs.ontext(data);
	}
	//else, ignore remaining data
	//TODO add a way to remove current tag
};

Tokenizer.prototype.reset = function(){
	Tokenizer.call(this, {xmlMode: this._xmlMode, decodeEntities: this._decodeEntities}, this._cbs);
};

Tokenizer.prototype.getAbsoluteIndex = function(){
	return this._bufferOffset + this._index;
};

Tokenizer.prototype._getSection = function(){
	return this._buffer.substring(this._sectionStart, this._index);
};

Tokenizer.prototype._emitToken = function(name){
	this._cbs[name](this._getSection());
	this._sectionStart = -1;
};

Tokenizer.prototype._emitPartial = function(value){
	if(this._baseState !== TEXT){
		this._cbs.onattribdata(value); //TODO implement the new event
	} else {
		this._cbs.ontext(value);
	}
};

},{"entities/lib/decode_codepoint.js":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/entities/lib/decode_codepoint.js","entities/maps/entities.json":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/entities/maps/entities.json","entities/maps/legacy.json":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/entities/maps/legacy.json","entities/maps/xml.json":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/entities/maps/xml.json"}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/entities/maps/xml.json":[function(require,module,exports){
module.exports={"amp":"&","apos":"'","gt":">","lt":"<","quot":"\""}

},{}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/entities/maps/legacy.json":[function(require,module,exports){
module.exports={"Aacute":"\u00C1","aacute":"\u00E1","Acirc":"\u00C2","acirc":"\u00E2","acute":"\u00B4","AElig":"\u00C6","aelig":"\u00E6","Agrave":"\u00C0","agrave":"\u00E0","amp":"&","AMP":"&","Aring":"\u00C5","aring":"\u00E5","Atilde":"\u00C3","atilde":"\u00E3","Auml":"\u00C4","auml":"\u00E4","brvbar":"\u00A6","Ccedil":"\u00C7","ccedil":"\u00E7","cedil":"\u00B8","cent":"\u00A2","copy":"\u00A9","COPY":"\u00A9","curren":"\u00A4","deg":"\u00B0","divide":"\u00F7","Eacute":"\u00C9","eacute":"\u00E9","Ecirc":"\u00CA","ecirc":"\u00EA","Egrave":"\u00C8","egrave":"\u00E8","ETH":"\u00D0","eth":"\u00F0","Euml":"\u00CB","euml":"\u00EB","frac12":"\u00BD","frac14":"\u00BC","frac34":"\u00BE","gt":">","GT":">","Iacute":"\u00CD","iacute":"\u00ED","Icirc":"\u00CE","icirc":"\u00EE","iexcl":"\u00A1","Igrave":"\u00CC","igrave":"\u00EC","iquest":"\u00BF","Iuml":"\u00CF","iuml":"\u00EF","laquo":"\u00AB","lt":"<","LT":"<","macr":"\u00AF","micro":"\u00B5","middot":"\u00B7","nbsp":"\u00A0","not":"\u00AC","Ntilde":"\u00D1","ntilde":"\u00F1","Oacute":"\u00D3","oacute":"\u00F3","Ocirc":"\u00D4","ocirc":"\u00F4","Ograve":"\u00D2","ograve":"\u00F2","ordf":"\u00AA","ordm":"\u00BA","Oslash":"\u00D8","oslash":"\u00F8","Otilde":"\u00D5","otilde":"\u00F5","Ouml":"\u00D6","ouml":"\u00F6","para":"\u00B6","plusmn":"\u00B1","pound":"\u00A3","quot":"\"","QUOT":"\"","raquo":"\u00BB","reg":"\u00AE","REG":"\u00AE","sect":"\u00A7","shy":"\u00AD","sup1":"\u00B9","sup2":"\u00B2","sup3":"\u00B3","szlig":"\u00DF","THORN":"\u00DE","thorn":"\u00FE","times":"\u00D7","Uacute":"\u00DA","uacute":"\u00FA","Ucirc":"\u00DB","ucirc":"\u00FB","Ugrave":"\u00D9","ugrave":"\u00F9","uml":"\u00A8","Uuml":"\u00DC","uuml":"\u00FC","Yacute":"\u00DD","yacute":"\u00FD","yen":"\u00A5","yuml":"\u00FF"}
},{}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/entities/maps/entities.json":[function(require,module,exports){
module.exports={"Aacute":"\u00C1","aacute":"\u00E1","Abreve":"\u0102","abreve":"\u0103","ac":"\u223E","acd":"\u223F","acE":"\u223E\u0333","Acirc":"\u00C2","acirc":"\u00E2","acute":"\u00B4","Acy":"\u0410","acy":"\u0430","AElig":"\u00C6","aelig":"\u00E6","af":"\u2061","Afr":"\uD835\uDD04","afr":"\uD835\uDD1E","Agrave":"\u00C0","agrave":"\u00E0","alefsym":"\u2135","aleph":"\u2135","Alpha":"\u0391","alpha":"\u03B1","Amacr":"\u0100","amacr":"\u0101","amalg":"\u2A3F","amp":"&","AMP":"&","andand":"\u2A55","And":"\u2A53","and":"\u2227","andd":"\u2A5C","andslope":"\u2A58","andv":"\u2A5A","ang":"\u2220","ange":"\u29A4","angle":"\u2220","angmsdaa":"\u29A8","angmsdab":"\u29A9","angmsdac":"\u29AA","angmsdad":"\u29AB","angmsdae":"\u29AC","angmsdaf":"\u29AD","angmsdag":"\u29AE","angmsdah":"\u29AF","angmsd":"\u2221","angrt":"\u221F","angrtvb":"\u22BE","angrtvbd":"\u299D","angsph":"\u2222","angst":"\u00C5","angzarr":"\u237C","Aogon":"\u0104","aogon":"\u0105","Aopf":"\uD835\uDD38","aopf":"\uD835\uDD52","apacir":"\u2A6F","ap":"\u2248","apE":"\u2A70","ape":"\u224A","apid":"\u224B","apos":"'","ApplyFunction":"\u2061","approx":"\u2248","approxeq":"\u224A","Aring":"\u00C5","aring":"\u00E5","Ascr":"\uD835\uDC9C","ascr":"\uD835\uDCB6","Assign":"\u2254","ast":"*","asymp":"\u2248","asympeq":"\u224D","Atilde":"\u00C3","atilde":"\u00E3","Auml":"\u00C4","auml":"\u00E4","awconint":"\u2233","awint":"\u2A11","backcong":"\u224C","backepsilon":"\u03F6","backprime":"\u2035","backsim":"\u223D","backsimeq":"\u22CD","Backslash":"\u2216","Barv":"\u2AE7","barvee":"\u22BD","barwed":"\u2305","Barwed":"\u2306","barwedge":"\u2305","bbrk":"\u23B5","bbrktbrk":"\u23B6","bcong":"\u224C","Bcy":"\u0411","bcy":"\u0431","bdquo":"\u201E","becaus":"\u2235","because":"\u2235","Because":"\u2235","bemptyv":"\u29B0","bepsi":"\u03F6","bernou":"\u212C","Bernoullis":"\u212C","Beta":"\u0392","beta":"\u03B2","beth":"\u2136","between":"\u226C","Bfr":"\uD835\uDD05","bfr":"\uD835\uDD1F","bigcap":"\u22C2","bigcirc":"\u25EF","bigcup":"\u22C3","bigodot":"\u2A00","bigoplus":"\u2A01","bigotimes":"\u2A02","bigsqcup":"\u2A06","bigstar":"\u2605","bigtriangledown":"\u25BD","bigtriangleup":"\u25B3","biguplus":"\u2A04","bigvee":"\u22C1","bigwedge":"\u22C0","bkarow":"\u290D","blacklozenge":"\u29EB","blacksquare":"\u25AA","blacktriangle":"\u25B4","blacktriangledown":"\u25BE","blacktriangleleft":"\u25C2","blacktriangleright":"\u25B8","blank":"\u2423","blk12":"\u2592","blk14":"\u2591","blk34":"\u2593","block":"\u2588","bne":"=\u20E5","bnequiv":"\u2261\u20E5","bNot":"\u2AED","bnot":"\u2310","Bopf":"\uD835\uDD39","bopf":"\uD835\uDD53","bot":"\u22A5","bottom":"\u22A5","bowtie":"\u22C8","boxbox":"\u29C9","boxdl":"\u2510","boxdL":"\u2555","boxDl":"\u2556","boxDL":"\u2557","boxdr":"\u250C","boxdR":"\u2552","boxDr":"\u2553","boxDR":"\u2554","boxh":"\u2500","boxH":"\u2550","boxhd":"\u252C","boxHd":"\u2564","boxhD":"\u2565","boxHD":"\u2566","boxhu":"\u2534","boxHu":"\u2567","boxhU":"\u2568","boxHU":"\u2569","boxminus":"\u229F","boxplus":"\u229E","boxtimes":"\u22A0","boxul":"\u2518","boxuL":"\u255B","boxUl":"\u255C","boxUL":"\u255D","boxur":"\u2514","boxuR":"\u2558","boxUr":"\u2559","boxUR":"\u255A","boxv":"\u2502","boxV":"\u2551","boxvh":"\u253C","boxvH":"\u256A","boxVh":"\u256B","boxVH":"\u256C","boxvl":"\u2524","boxvL":"\u2561","boxVl":"\u2562","boxVL":"\u2563","boxvr":"\u251C","boxvR":"\u255E","boxVr":"\u255F","boxVR":"\u2560","bprime":"\u2035","breve":"\u02D8","Breve":"\u02D8","brvbar":"\u00A6","bscr":"\uD835\uDCB7","Bscr":"\u212C","bsemi":"\u204F","bsim":"\u223D","bsime":"\u22CD","bsolb":"\u29C5","bsol":"\\","bsolhsub":"\u27C8","bull":"\u2022","bullet":"\u2022","bump":"\u224E","bumpE":"\u2AAE","bumpe":"\u224F","Bumpeq":"\u224E","bumpeq":"\u224F","Cacute":"\u0106","cacute":"\u0107","capand":"\u2A44","capbrcup":"\u2A49","capcap":"\u2A4B","cap":"\u2229","Cap":"\u22D2","capcup":"\u2A47","capdot":"\u2A40","CapitalDifferentialD":"\u2145","caps":"\u2229\uFE00","caret":"\u2041","caron":"\u02C7","Cayleys":"\u212D","ccaps":"\u2A4D","Ccaron":"\u010C","ccaron":"\u010D","Ccedil":"\u00C7","ccedil":"\u00E7","Ccirc":"\u0108","ccirc":"\u0109","Cconint":"\u2230","ccups":"\u2A4C","ccupssm":"\u2A50","Cdot":"\u010A","cdot":"\u010B","cedil":"\u00B8","Cedilla":"\u00B8","cemptyv":"\u29B2","cent":"\u00A2","centerdot":"\u00B7","CenterDot":"\u00B7","cfr":"\uD835\uDD20","Cfr":"\u212D","CHcy":"\u0427","chcy":"\u0447","check":"\u2713","checkmark":"\u2713","Chi":"\u03A7","chi":"\u03C7","circ":"\u02C6","circeq":"\u2257","circlearrowleft":"\u21BA","circlearrowright":"\u21BB","circledast":"\u229B","circledcirc":"\u229A","circleddash":"\u229D","CircleDot":"\u2299","circledR":"\u00AE","circledS":"\u24C8","CircleMinus":"\u2296","CirclePlus":"\u2295","CircleTimes":"\u2297","cir":"\u25CB","cirE":"\u29C3","cire":"\u2257","cirfnint":"\u2A10","cirmid":"\u2AEF","cirscir":"\u29C2","ClockwiseContourIntegral":"\u2232","CloseCurlyDoubleQuote":"\u201D","CloseCurlyQuote":"\u2019","clubs":"\u2663","clubsuit":"\u2663","colon":":","Colon":"\u2237","Colone":"\u2A74","colone":"\u2254","coloneq":"\u2254","comma":",","commat":"@","comp":"\u2201","compfn":"\u2218","complement":"\u2201","complexes":"\u2102","cong":"\u2245","congdot":"\u2A6D","Congruent":"\u2261","conint":"\u222E","Conint":"\u222F","ContourIntegral":"\u222E","copf":"\uD835\uDD54","Copf":"\u2102","coprod":"\u2210","Coproduct":"\u2210","copy":"\u00A9","COPY":"\u00A9","copysr":"\u2117","CounterClockwiseContourIntegral":"\u2233","crarr":"\u21B5","cross":"\u2717","Cross":"\u2A2F","Cscr":"\uD835\uDC9E","cscr":"\uD835\uDCB8","csub":"\u2ACF","csube":"\u2AD1","csup":"\u2AD0","csupe":"\u2AD2","ctdot":"\u22EF","cudarrl":"\u2938","cudarrr":"\u2935","cuepr":"\u22DE","cuesc":"\u22DF","cularr":"\u21B6","cularrp":"\u293D","cupbrcap":"\u2A48","cupcap":"\u2A46","CupCap":"\u224D","cup":"\u222A","Cup":"\u22D3","cupcup":"\u2A4A","cupdot":"\u228D","cupor":"\u2A45","cups":"\u222A\uFE00","curarr":"\u21B7","curarrm":"\u293C","curlyeqprec":"\u22DE","curlyeqsucc":"\u22DF","curlyvee":"\u22CE","curlywedge":"\u22CF","curren":"\u00A4","curvearrowleft":"\u21B6","curvearrowright":"\u21B7","cuvee":"\u22CE","cuwed":"\u22CF","cwconint":"\u2232","cwint":"\u2231","cylcty":"\u232D","dagger":"\u2020","Dagger":"\u2021","daleth":"\u2138","darr":"\u2193","Darr":"\u21A1","dArr":"\u21D3","dash":"\u2010","Dashv":"\u2AE4","dashv":"\u22A3","dbkarow":"\u290F","dblac":"\u02DD","Dcaron":"\u010E","dcaron":"\u010F","Dcy":"\u0414","dcy":"\u0434","ddagger":"\u2021","ddarr":"\u21CA","DD":"\u2145","dd":"\u2146","DDotrahd":"\u2911","ddotseq":"\u2A77","deg":"\u00B0","Del":"\u2207","Delta":"\u0394","delta":"\u03B4","demptyv":"\u29B1","dfisht":"\u297F","Dfr":"\uD835\uDD07","dfr":"\uD835\uDD21","dHar":"\u2965","dharl":"\u21C3","dharr":"\u21C2","DiacriticalAcute":"\u00B4","DiacriticalDot":"\u02D9","DiacriticalDoubleAcute":"\u02DD","DiacriticalGrave":"`","DiacriticalTilde":"\u02DC","diam":"\u22C4","diamond":"\u22C4","Diamond":"\u22C4","diamondsuit":"\u2666","diams":"\u2666","die":"\u00A8","DifferentialD":"\u2146","digamma":"\u03DD","disin":"\u22F2","div":"\u00F7","divide":"\u00F7","divideontimes":"\u22C7","divonx":"\u22C7","DJcy":"\u0402","djcy":"\u0452","dlcorn":"\u231E","dlcrop":"\u230D","dollar":"$","Dopf":"\uD835\uDD3B","dopf":"\uD835\uDD55","Dot":"\u00A8","dot":"\u02D9","DotDot":"\u20DC","doteq":"\u2250","doteqdot":"\u2251","DotEqual":"\u2250","dotminus":"\u2238","dotplus":"\u2214","dotsquare":"\u22A1","doublebarwedge":"\u2306","DoubleContourIntegral":"\u222F","DoubleDot":"\u00A8","DoubleDownArrow":"\u21D3","DoubleLeftArrow":"\u21D0","DoubleLeftRightArrow":"\u21D4","DoubleLeftTee":"\u2AE4","DoubleLongLeftArrow":"\u27F8","DoubleLongLeftRightArrow":"\u27FA","DoubleLongRightArrow":"\u27F9","DoubleRightArrow":"\u21D2","DoubleRightTee":"\u22A8","DoubleUpArrow":"\u21D1","DoubleUpDownArrow":"\u21D5","DoubleVerticalBar":"\u2225","DownArrowBar":"\u2913","downarrow":"\u2193","DownArrow":"\u2193","Downarrow":"\u21D3","DownArrowUpArrow":"\u21F5","DownBreve":"\u0311","downdownarrows":"\u21CA","downharpoonleft":"\u21C3","downharpoonright":"\u21C2","DownLeftRightVector":"\u2950","DownLeftTeeVector":"\u295E","DownLeftVectorBar":"\u2956","DownLeftVector":"\u21BD","DownRightTeeVector":"\u295F","DownRightVectorBar":"\u2957","DownRightVector":"\u21C1","DownTeeArrow":"\u21A7","DownTee":"\u22A4","drbkarow":"\u2910","drcorn":"\u231F","drcrop":"\u230C","Dscr":"\uD835\uDC9F","dscr":"\uD835\uDCB9","DScy":"\u0405","dscy":"\u0455","dsol":"\u29F6","Dstrok":"\u0110","dstrok":"\u0111","dtdot":"\u22F1","dtri":"\u25BF","dtrif":"\u25BE","duarr":"\u21F5","duhar":"\u296F","dwangle":"\u29A6","DZcy":"\u040F","dzcy":"\u045F","dzigrarr":"\u27FF","Eacute":"\u00C9","eacute":"\u00E9","easter":"\u2A6E","Ecaron":"\u011A","ecaron":"\u011B","Ecirc":"\u00CA","ecirc":"\u00EA","ecir":"\u2256","ecolon":"\u2255","Ecy":"\u042D","ecy":"\u044D","eDDot":"\u2A77","Edot":"\u0116","edot":"\u0117","eDot":"\u2251","ee":"\u2147","efDot":"\u2252","Efr":"\uD835\uDD08","efr":"\uD835\uDD22","eg":"\u2A9A","Egrave":"\u00C8","egrave":"\u00E8","egs":"\u2A96","egsdot":"\u2A98","el":"\u2A99","Element":"\u2208","elinters":"\u23E7","ell":"\u2113","els":"\u2A95","elsdot":"\u2A97","Emacr":"\u0112","emacr":"\u0113","empty":"\u2205","emptyset":"\u2205","EmptySmallSquare":"\u25FB","emptyv":"\u2205","EmptyVerySmallSquare":"\u25AB","emsp13":"\u2004","emsp14":"\u2005","emsp":"\u2003","ENG":"\u014A","eng":"\u014B","ensp":"\u2002","Eogon":"\u0118","eogon":"\u0119","Eopf":"\uD835\uDD3C","eopf":"\uD835\uDD56","epar":"\u22D5","eparsl":"\u29E3","eplus":"\u2A71","epsi":"\u03B5","Epsilon":"\u0395","epsilon":"\u03B5","epsiv":"\u03F5","eqcirc":"\u2256","eqcolon":"\u2255","eqsim":"\u2242","eqslantgtr":"\u2A96","eqslantless":"\u2A95","Equal":"\u2A75","equals":"=","EqualTilde":"\u2242","equest":"\u225F","Equilibrium":"\u21CC","equiv":"\u2261","equivDD":"\u2A78","eqvparsl":"\u29E5","erarr":"\u2971","erDot":"\u2253","escr":"\u212F","Escr":"\u2130","esdot":"\u2250","Esim":"\u2A73","esim":"\u2242","Eta":"\u0397","eta":"\u03B7","ETH":"\u00D0","eth":"\u00F0","Euml":"\u00CB","euml":"\u00EB","euro":"\u20AC","excl":"!","exist":"\u2203","Exists":"\u2203","expectation":"\u2130","exponentiale":"\u2147","ExponentialE":"\u2147","fallingdotseq":"\u2252","Fcy":"\u0424","fcy":"\u0444","female":"\u2640","ffilig":"\uFB03","fflig":"\uFB00","ffllig":"\uFB04","Ffr":"\uD835\uDD09","ffr":"\uD835\uDD23","filig":"\uFB01","FilledSmallSquare":"\u25FC","FilledVerySmallSquare":"\u25AA","fjlig":"fj","flat":"\u266D","fllig":"\uFB02","fltns":"\u25B1","fnof":"\u0192","Fopf":"\uD835\uDD3D","fopf":"\uD835\uDD57","forall":"\u2200","ForAll":"\u2200","fork":"\u22D4","forkv":"\u2AD9","Fouriertrf":"\u2131","fpartint":"\u2A0D","frac12":"\u00BD","frac13":"\u2153","frac14":"\u00BC","frac15":"\u2155","frac16":"\u2159","frac18":"\u215B","frac23":"\u2154","frac25":"\u2156","frac34":"\u00BE","frac35":"\u2157","frac38":"\u215C","frac45":"\u2158","frac56":"\u215A","frac58":"\u215D","frac78":"\u215E","frasl":"\u2044","frown":"\u2322","fscr":"\uD835\uDCBB","Fscr":"\u2131","gacute":"\u01F5","Gamma":"\u0393","gamma":"\u03B3","Gammad":"\u03DC","gammad":"\u03DD","gap":"\u2A86","Gbreve":"\u011E","gbreve":"\u011F","Gcedil":"\u0122","Gcirc":"\u011C","gcirc":"\u011D","Gcy":"\u0413","gcy":"\u0433","Gdot":"\u0120","gdot":"\u0121","ge":"\u2265","gE":"\u2267","gEl":"\u2A8C","gel":"\u22DB","geq":"\u2265","geqq":"\u2267","geqslant":"\u2A7E","gescc":"\u2AA9","ges":"\u2A7E","gesdot":"\u2A80","gesdoto":"\u2A82","gesdotol":"\u2A84","gesl":"\u22DB\uFE00","gesles":"\u2A94","Gfr":"\uD835\uDD0A","gfr":"\uD835\uDD24","gg":"\u226B","Gg":"\u22D9","ggg":"\u22D9","gimel":"\u2137","GJcy":"\u0403","gjcy":"\u0453","gla":"\u2AA5","gl":"\u2277","glE":"\u2A92","glj":"\u2AA4","gnap":"\u2A8A","gnapprox":"\u2A8A","gne":"\u2A88","gnE":"\u2269","gneq":"\u2A88","gneqq":"\u2269","gnsim":"\u22E7","Gopf":"\uD835\uDD3E","gopf":"\uD835\uDD58","grave":"`","GreaterEqual":"\u2265","GreaterEqualLess":"\u22DB","GreaterFullEqual":"\u2267","GreaterGreater":"\u2AA2","GreaterLess":"\u2277","GreaterSlantEqual":"\u2A7E","GreaterTilde":"\u2273","Gscr":"\uD835\uDCA2","gscr":"\u210A","gsim":"\u2273","gsime":"\u2A8E","gsiml":"\u2A90","gtcc":"\u2AA7","gtcir":"\u2A7A","gt":">","GT":">","Gt":"\u226B","gtdot":"\u22D7","gtlPar":"\u2995","gtquest":"\u2A7C","gtrapprox":"\u2A86","gtrarr":"\u2978","gtrdot":"\u22D7","gtreqless":"\u22DB","gtreqqless":"\u2A8C","gtrless":"\u2277","gtrsim":"\u2273","gvertneqq":"\u2269\uFE00","gvnE":"\u2269\uFE00","Hacek":"\u02C7","hairsp":"\u200A","half":"\u00BD","hamilt":"\u210B","HARDcy":"\u042A","hardcy":"\u044A","harrcir":"\u2948","harr":"\u2194","hArr":"\u21D4","harrw":"\u21AD","Hat":"^","hbar":"\u210F","Hcirc":"\u0124","hcirc":"\u0125","hearts":"\u2665","heartsuit":"\u2665","hellip":"\u2026","hercon":"\u22B9","hfr":"\uD835\uDD25","Hfr":"\u210C","HilbertSpace":"\u210B","hksearow":"\u2925","hkswarow":"\u2926","hoarr":"\u21FF","homtht":"\u223B","hookleftarrow":"\u21A9","hookrightarrow":"\u21AA","hopf":"\uD835\uDD59","Hopf":"\u210D","horbar":"\u2015","HorizontalLine":"\u2500","hscr":"\uD835\uDCBD","Hscr":"\u210B","hslash":"\u210F","Hstrok":"\u0126","hstrok":"\u0127","HumpDownHump":"\u224E","HumpEqual":"\u224F","hybull":"\u2043","hyphen":"\u2010","Iacute":"\u00CD","iacute":"\u00ED","ic":"\u2063","Icirc":"\u00CE","icirc":"\u00EE","Icy":"\u0418","icy":"\u0438","Idot":"\u0130","IEcy":"\u0415","iecy":"\u0435","iexcl":"\u00A1","iff":"\u21D4","ifr":"\uD835\uDD26","Ifr":"\u2111","Igrave":"\u00CC","igrave":"\u00EC","ii":"\u2148","iiiint":"\u2A0C","iiint":"\u222D","iinfin":"\u29DC","iiota":"\u2129","IJlig":"\u0132","ijlig":"\u0133","Imacr":"\u012A","imacr":"\u012B","image":"\u2111","ImaginaryI":"\u2148","imagline":"\u2110","imagpart":"\u2111","imath":"\u0131","Im":"\u2111","imof":"\u22B7","imped":"\u01B5","Implies":"\u21D2","incare":"\u2105","in":"\u2208","infin":"\u221E","infintie":"\u29DD","inodot":"\u0131","intcal":"\u22BA","int":"\u222B","Int":"\u222C","integers":"\u2124","Integral":"\u222B","intercal":"\u22BA","Intersection":"\u22C2","intlarhk":"\u2A17","intprod":"\u2A3C","InvisibleComma":"\u2063","InvisibleTimes":"\u2062","IOcy":"\u0401","iocy":"\u0451","Iogon":"\u012E","iogon":"\u012F","Iopf":"\uD835\uDD40","iopf":"\uD835\uDD5A","Iota":"\u0399","iota":"\u03B9","iprod":"\u2A3C","iquest":"\u00BF","iscr":"\uD835\uDCBE","Iscr":"\u2110","isin":"\u2208","isindot":"\u22F5","isinE":"\u22F9","isins":"\u22F4","isinsv":"\u22F3","isinv":"\u2208","it":"\u2062","Itilde":"\u0128","itilde":"\u0129","Iukcy":"\u0406","iukcy":"\u0456","Iuml":"\u00CF","iuml":"\u00EF","Jcirc":"\u0134","jcirc":"\u0135","Jcy":"\u0419","jcy":"\u0439","Jfr":"\uD835\uDD0D","jfr":"\uD835\uDD27","jmath":"\u0237","Jopf":"\uD835\uDD41","jopf":"\uD835\uDD5B","Jscr":"\uD835\uDCA5","jscr":"\uD835\uDCBF","Jsercy":"\u0408","jsercy":"\u0458","Jukcy":"\u0404","jukcy":"\u0454","Kappa":"\u039A","kappa":"\u03BA","kappav":"\u03F0","Kcedil":"\u0136","kcedil":"\u0137","Kcy":"\u041A","kcy":"\u043A","Kfr":"\uD835\uDD0E","kfr":"\uD835\uDD28","kgreen":"\u0138","KHcy":"\u0425","khcy":"\u0445","KJcy":"\u040C","kjcy":"\u045C","Kopf":"\uD835\uDD42","kopf":"\uD835\uDD5C","Kscr":"\uD835\uDCA6","kscr":"\uD835\uDCC0","lAarr":"\u21DA","Lacute":"\u0139","lacute":"\u013A","laemptyv":"\u29B4","lagran":"\u2112","Lambda":"\u039B","lambda":"\u03BB","lang":"\u27E8","Lang":"\u27EA","langd":"\u2991","langle":"\u27E8","lap":"\u2A85","Laplacetrf":"\u2112","laquo":"\u00AB","larrb":"\u21E4","larrbfs":"\u291F","larr":"\u2190","Larr":"\u219E","lArr":"\u21D0","larrfs":"\u291D","larrhk":"\u21A9","larrlp":"\u21AB","larrpl":"\u2939","larrsim":"\u2973","larrtl":"\u21A2","latail":"\u2919","lAtail":"\u291B","lat":"\u2AAB","late":"\u2AAD","lates":"\u2AAD\uFE00","lbarr":"\u290C","lBarr":"\u290E","lbbrk":"\u2772","lbrace":"{","lbrack":"[","lbrke":"\u298B","lbrksld":"\u298F","lbrkslu":"\u298D","Lcaron":"\u013D","lcaron":"\u013E","Lcedil":"\u013B","lcedil":"\u013C","lceil":"\u2308","lcub":"{","Lcy":"\u041B","lcy":"\u043B","ldca":"\u2936","ldquo":"\u201C","ldquor":"\u201E","ldrdhar":"\u2967","ldrushar":"\u294B","ldsh":"\u21B2","le":"\u2264","lE":"\u2266","LeftAngleBracket":"\u27E8","LeftArrowBar":"\u21E4","leftarrow":"\u2190","LeftArrow":"\u2190","Leftarrow":"\u21D0","LeftArrowRightArrow":"\u21C6","leftarrowtail":"\u21A2","LeftCeiling":"\u2308","LeftDoubleBracket":"\u27E6","LeftDownTeeVector":"\u2961","LeftDownVectorBar":"\u2959","LeftDownVector":"\u21C3","LeftFloor":"\u230A","leftharpoondown":"\u21BD","leftharpoonup":"\u21BC","leftleftarrows":"\u21C7","leftrightarrow":"\u2194","LeftRightArrow":"\u2194","Leftrightarrow":"\u21D4","leftrightarrows":"\u21C6","leftrightharpoons":"\u21CB","leftrightsquigarrow":"\u21AD","LeftRightVector":"\u294E","LeftTeeArrow":"\u21A4","LeftTee":"\u22A3","LeftTeeVector":"\u295A","leftthreetimes":"\u22CB","LeftTriangleBar":"\u29CF","LeftTriangle":"\u22B2","LeftTriangleEqual":"\u22B4","LeftUpDownVector":"\u2951","LeftUpTeeVector":"\u2960","LeftUpVectorBar":"\u2958","LeftUpVector":"\u21BF","LeftVectorBar":"\u2952","LeftVector":"\u21BC","lEg":"\u2A8B","leg":"\u22DA","leq":"\u2264","leqq":"\u2266","leqslant":"\u2A7D","lescc":"\u2AA8","les":"\u2A7D","lesdot":"\u2A7F","lesdoto":"\u2A81","lesdotor":"\u2A83","lesg":"\u22DA\uFE00","lesges":"\u2A93","lessapprox":"\u2A85","lessdot":"\u22D6","lesseqgtr":"\u22DA","lesseqqgtr":"\u2A8B","LessEqualGreater":"\u22DA","LessFullEqual":"\u2266","LessGreater":"\u2276","lessgtr":"\u2276","LessLess":"\u2AA1","lesssim":"\u2272","LessSlantEqual":"\u2A7D","LessTilde":"\u2272","lfisht":"\u297C","lfloor":"\u230A","Lfr":"\uD835\uDD0F","lfr":"\uD835\uDD29","lg":"\u2276","lgE":"\u2A91","lHar":"\u2962","lhard":"\u21BD","lharu":"\u21BC","lharul":"\u296A","lhblk":"\u2584","LJcy":"\u0409","ljcy":"\u0459","llarr":"\u21C7","ll":"\u226A","Ll":"\u22D8","llcorner":"\u231E","Lleftarrow":"\u21DA","llhard":"\u296B","lltri":"\u25FA","Lmidot":"\u013F","lmidot":"\u0140","lmoustache":"\u23B0","lmoust":"\u23B0","lnap":"\u2A89","lnapprox":"\u2A89","lne":"\u2A87","lnE":"\u2268","lneq":"\u2A87","lneqq":"\u2268","lnsim":"\u22E6","loang":"\u27EC","loarr":"\u21FD","lobrk":"\u27E6","longleftarrow":"\u27F5","LongLeftArrow":"\u27F5","Longleftarrow":"\u27F8","longleftrightarrow":"\u27F7","LongLeftRightArrow":"\u27F7","Longleftrightarrow":"\u27FA","longmapsto":"\u27FC","longrightarrow":"\u27F6","LongRightArrow":"\u27F6","Longrightarrow":"\u27F9","looparrowleft":"\u21AB","looparrowright":"\u21AC","lopar":"\u2985","Lopf":"\uD835\uDD43","lopf":"\uD835\uDD5D","loplus":"\u2A2D","lotimes":"\u2A34","lowast":"\u2217","lowbar":"_","LowerLeftArrow":"\u2199","LowerRightArrow":"\u2198","loz":"\u25CA","lozenge":"\u25CA","lozf":"\u29EB","lpar":"(","lparlt":"\u2993","lrarr":"\u21C6","lrcorner":"\u231F","lrhar":"\u21CB","lrhard":"\u296D","lrm":"\u200E","lrtri":"\u22BF","lsaquo":"\u2039","lscr":"\uD835\uDCC1","Lscr":"\u2112","lsh":"\u21B0","Lsh":"\u21B0","lsim":"\u2272","lsime":"\u2A8D","lsimg":"\u2A8F","lsqb":"[","lsquo":"\u2018","lsquor":"\u201A","Lstrok":"\u0141","lstrok":"\u0142","ltcc":"\u2AA6","ltcir":"\u2A79","lt":"<","LT":"<","Lt":"\u226A","ltdot":"\u22D6","lthree":"\u22CB","ltimes":"\u22C9","ltlarr":"\u2976","ltquest":"\u2A7B","ltri":"\u25C3","ltrie":"\u22B4","ltrif":"\u25C2","ltrPar":"\u2996","lurdshar":"\u294A","luruhar":"\u2966","lvertneqq":"\u2268\uFE00","lvnE":"\u2268\uFE00","macr":"\u00AF","male":"\u2642","malt":"\u2720","maltese":"\u2720","Map":"\u2905","map":"\u21A6","mapsto":"\u21A6","mapstodown":"\u21A7","mapstoleft":"\u21A4","mapstoup":"\u21A5","marker":"\u25AE","mcomma":"\u2A29","Mcy":"\u041C","mcy":"\u043C","mdash":"\u2014","mDDot":"\u223A","measuredangle":"\u2221","MediumSpace":"\u205F","Mellintrf":"\u2133","Mfr":"\uD835\uDD10","mfr":"\uD835\uDD2A","mho":"\u2127","micro":"\u00B5","midast":"*","midcir":"\u2AF0","mid":"\u2223","middot":"\u00B7","minusb":"\u229F","minus":"\u2212","minusd":"\u2238","minusdu":"\u2A2A","MinusPlus":"\u2213","mlcp":"\u2ADB","mldr":"\u2026","mnplus":"\u2213","models":"\u22A7","Mopf":"\uD835\uDD44","mopf":"\uD835\uDD5E","mp":"\u2213","mscr":"\uD835\uDCC2","Mscr":"\u2133","mstpos":"\u223E","Mu":"\u039C","mu":"\u03BC","multimap":"\u22B8","mumap":"\u22B8","nabla":"\u2207","Nacute":"\u0143","nacute":"\u0144","nang":"\u2220\u20D2","nap":"\u2249","napE":"\u2A70\u0338","napid":"\u224B\u0338","napos":"\u0149","napprox":"\u2249","natural":"\u266E","naturals":"\u2115","natur":"\u266E","nbsp":"\u00A0","nbump":"\u224E\u0338","nbumpe":"\u224F\u0338","ncap":"\u2A43","Ncaron":"\u0147","ncaron":"\u0148","Ncedil":"\u0145","ncedil":"\u0146","ncong":"\u2247","ncongdot":"\u2A6D\u0338","ncup":"\u2A42","Ncy":"\u041D","ncy":"\u043D","ndash":"\u2013","nearhk":"\u2924","nearr":"\u2197","neArr":"\u21D7","nearrow":"\u2197","ne":"\u2260","nedot":"\u2250\u0338","NegativeMediumSpace":"\u200B","NegativeThickSpace":"\u200B","NegativeThinSpace":"\u200B","NegativeVeryThinSpace":"\u200B","nequiv":"\u2262","nesear":"\u2928","nesim":"\u2242\u0338","NestedGreaterGreater":"\u226B","NestedLessLess":"\u226A","NewLine":"\n","nexist":"\u2204","nexists":"\u2204","Nfr":"\uD835\uDD11","nfr":"\uD835\uDD2B","ngE":"\u2267\u0338","nge":"\u2271","ngeq":"\u2271","ngeqq":"\u2267\u0338","ngeqslant":"\u2A7E\u0338","nges":"\u2A7E\u0338","nGg":"\u22D9\u0338","ngsim":"\u2275","nGt":"\u226B\u20D2","ngt":"\u226F","ngtr":"\u226F","nGtv":"\u226B\u0338","nharr":"\u21AE","nhArr":"\u21CE","nhpar":"\u2AF2","ni":"\u220B","nis":"\u22FC","nisd":"\u22FA","niv":"\u220B","NJcy":"\u040A","njcy":"\u045A","nlarr":"\u219A","nlArr":"\u21CD","nldr":"\u2025","nlE":"\u2266\u0338","nle":"\u2270","nleftarrow":"\u219A","nLeftarrow":"\u21CD","nleftrightarrow":"\u21AE","nLeftrightarrow":"\u21CE","nleq":"\u2270","nleqq":"\u2266\u0338","nleqslant":"\u2A7D\u0338","nles":"\u2A7D\u0338","nless":"\u226E","nLl":"\u22D8\u0338","nlsim":"\u2274","nLt":"\u226A\u20D2","nlt":"\u226E","nltri":"\u22EA","nltrie":"\u22EC","nLtv":"\u226A\u0338","nmid":"\u2224","NoBreak":"\u2060","NonBreakingSpace":"\u00A0","nopf":"\uD835\uDD5F","Nopf":"\u2115","Not":"\u2AEC","not":"\u00AC","NotCongruent":"\u2262","NotCupCap":"\u226D","NotDoubleVerticalBar":"\u2226","NotElement":"\u2209","NotEqual":"\u2260","NotEqualTilde":"\u2242\u0338","NotExists":"\u2204","NotGreater":"\u226F","NotGreaterEqual":"\u2271","NotGreaterFullEqual":"\u2267\u0338","NotGreaterGreater":"\u226B\u0338","NotGreaterLess":"\u2279","NotGreaterSlantEqual":"\u2A7E\u0338","NotGreaterTilde":"\u2275","NotHumpDownHump":"\u224E\u0338","NotHumpEqual":"\u224F\u0338","notin":"\u2209","notindot":"\u22F5\u0338","notinE":"\u22F9\u0338","notinva":"\u2209","notinvb":"\u22F7","notinvc":"\u22F6","NotLeftTriangleBar":"\u29CF\u0338","NotLeftTriangle":"\u22EA","NotLeftTriangleEqual":"\u22EC","NotLess":"\u226E","NotLessEqual":"\u2270","NotLessGreater":"\u2278","NotLessLess":"\u226A\u0338","NotLessSlantEqual":"\u2A7D\u0338","NotLessTilde":"\u2274","NotNestedGreaterGreater":"\u2AA2\u0338","NotNestedLessLess":"\u2AA1\u0338","notni":"\u220C","notniva":"\u220C","notnivb":"\u22FE","notnivc":"\u22FD","NotPrecedes":"\u2280","NotPrecedesEqual":"\u2AAF\u0338","NotPrecedesSlantEqual":"\u22E0","NotReverseElement":"\u220C","NotRightTriangleBar":"\u29D0\u0338","NotRightTriangle":"\u22EB","NotRightTriangleEqual":"\u22ED","NotSquareSubset":"\u228F\u0338","NotSquareSubsetEqual":"\u22E2","NotSquareSuperset":"\u2290\u0338","NotSquareSupersetEqual":"\u22E3","NotSubset":"\u2282\u20D2","NotSubsetEqual":"\u2288","NotSucceeds":"\u2281","NotSucceedsEqual":"\u2AB0\u0338","NotSucceedsSlantEqual":"\u22E1","NotSucceedsTilde":"\u227F\u0338","NotSuperset":"\u2283\u20D2","NotSupersetEqual":"\u2289","NotTilde":"\u2241","NotTildeEqual":"\u2244","NotTildeFullEqual":"\u2247","NotTildeTilde":"\u2249","NotVerticalBar":"\u2224","nparallel":"\u2226","npar":"\u2226","nparsl":"\u2AFD\u20E5","npart":"\u2202\u0338","npolint":"\u2A14","npr":"\u2280","nprcue":"\u22E0","nprec":"\u2280","npreceq":"\u2AAF\u0338","npre":"\u2AAF\u0338","nrarrc":"\u2933\u0338","nrarr":"\u219B","nrArr":"\u21CF","nrarrw":"\u219D\u0338","nrightarrow":"\u219B","nRightarrow":"\u21CF","nrtri":"\u22EB","nrtrie":"\u22ED","nsc":"\u2281","nsccue":"\u22E1","nsce":"\u2AB0\u0338","Nscr":"\uD835\uDCA9","nscr":"\uD835\uDCC3","nshortmid":"\u2224","nshortparallel":"\u2226","nsim":"\u2241","nsime":"\u2244","nsimeq":"\u2244","nsmid":"\u2224","nspar":"\u2226","nsqsube":"\u22E2","nsqsupe":"\u22E3","nsub":"\u2284","nsubE":"\u2AC5\u0338","nsube":"\u2288","nsubset":"\u2282\u20D2","nsubseteq":"\u2288","nsubseteqq":"\u2AC5\u0338","nsucc":"\u2281","nsucceq":"\u2AB0\u0338","nsup":"\u2285","nsupE":"\u2AC6\u0338","nsupe":"\u2289","nsupset":"\u2283\u20D2","nsupseteq":"\u2289","nsupseteqq":"\u2AC6\u0338","ntgl":"\u2279","Ntilde":"\u00D1","ntilde":"\u00F1","ntlg":"\u2278","ntriangleleft":"\u22EA","ntrianglelefteq":"\u22EC","ntriangleright":"\u22EB","ntrianglerighteq":"\u22ED","Nu":"\u039D","nu":"\u03BD","num":"#","numero":"\u2116","numsp":"\u2007","nvap":"\u224D\u20D2","nvdash":"\u22AC","nvDash":"\u22AD","nVdash":"\u22AE","nVDash":"\u22AF","nvge":"\u2265\u20D2","nvgt":">\u20D2","nvHarr":"\u2904","nvinfin":"\u29DE","nvlArr":"\u2902","nvle":"\u2264\u20D2","nvlt":"<\u20D2","nvltrie":"\u22B4\u20D2","nvrArr":"\u2903","nvrtrie":"\u22B5\u20D2","nvsim":"\u223C\u20D2","nwarhk":"\u2923","nwarr":"\u2196","nwArr":"\u21D6","nwarrow":"\u2196","nwnear":"\u2927","Oacute":"\u00D3","oacute":"\u00F3","oast":"\u229B","Ocirc":"\u00D4","ocirc":"\u00F4","ocir":"\u229A","Ocy":"\u041E","ocy":"\u043E","odash":"\u229D","Odblac":"\u0150","odblac":"\u0151","odiv":"\u2A38","odot":"\u2299","odsold":"\u29BC","OElig":"\u0152","oelig":"\u0153","ofcir":"\u29BF","Ofr":"\uD835\uDD12","ofr":"\uD835\uDD2C","ogon":"\u02DB","Ograve":"\u00D2","ograve":"\u00F2","ogt":"\u29C1","ohbar":"\u29B5","ohm":"\u03A9","oint":"\u222E","olarr":"\u21BA","olcir":"\u29BE","olcross":"\u29BB","oline":"\u203E","olt":"\u29C0","Omacr":"\u014C","omacr":"\u014D","Omega":"\u03A9","omega":"\u03C9","Omicron":"\u039F","omicron":"\u03BF","omid":"\u29B6","ominus":"\u2296","Oopf":"\uD835\uDD46","oopf":"\uD835\uDD60","opar":"\u29B7","OpenCurlyDoubleQuote":"\u201C","OpenCurlyQuote":"\u2018","operp":"\u29B9","oplus":"\u2295","orarr":"\u21BB","Or":"\u2A54","or":"\u2228","ord":"\u2A5D","order":"\u2134","orderof":"\u2134","ordf":"\u00AA","ordm":"\u00BA","origof":"\u22B6","oror":"\u2A56","orslope":"\u2A57","orv":"\u2A5B","oS":"\u24C8","Oscr":"\uD835\uDCAA","oscr":"\u2134","Oslash":"\u00D8","oslash":"\u00F8","osol":"\u2298","Otilde":"\u00D5","otilde":"\u00F5","otimesas":"\u2A36","Otimes":"\u2A37","otimes":"\u2297","Ouml":"\u00D6","ouml":"\u00F6","ovbar":"\u233D","OverBar":"\u203E","OverBrace":"\u23DE","OverBracket":"\u23B4","OverParenthesis":"\u23DC","para":"\u00B6","parallel":"\u2225","par":"\u2225","parsim":"\u2AF3","parsl":"\u2AFD","part":"\u2202","PartialD":"\u2202","Pcy":"\u041F","pcy":"\u043F","percnt":"%","period":".","permil":"\u2030","perp":"\u22A5","pertenk":"\u2031","Pfr":"\uD835\uDD13","pfr":"\uD835\uDD2D","Phi":"\u03A6","phi":"\u03C6","phiv":"\u03D5","phmmat":"\u2133","phone":"\u260E","Pi":"\u03A0","pi":"\u03C0","pitchfork":"\u22D4","piv":"\u03D6","planck":"\u210F","planckh":"\u210E","plankv":"\u210F","plusacir":"\u2A23","plusb":"\u229E","pluscir":"\u2A22","plus":"+","plusdo":"\u2214","plusdu":"\u2A25","pluse":"\u2A72","PlusMinus":"\u00B1","plusmn":"\u00B1","plussim":"\u2A26","plustwo":"\u2A27","pm":"\u00B1","Poincareplane":"\u210C","pointint":"\u2A15","popf":"\uD835\uDD61","Popf":"\u2119","pound":"\u00A3","prap":"\u2AB7","Pr":"\u2ABB","pr":"\u227A","prcue":"\u227C","precapprox":"\u2AB7","prec":"\u227A","preccurlyeq":"\u227C","Precedes":"\u227A","PrecedesEqual":"\u2AAF","PrecedesSlantEqual":"\u227C","PrecedesTilde":"\u227E","preceq":"\u2AAF","precnapprox":"\u2AB9","precneqq":"\u2AB5","precnsim":"\u22E8","pre":"\u2AAF","prE":"\u2AB3","precsim":"\u227E","prime":"\u2032","Prime":"\u2033","primes":"\u2119","prnap":"\u2AB9","prnE":"\u2AB5","prnsim":"\u22E8","prod":"\u220F","Product":"\u220F","profalar":"\u232E","profline":"\u2312","profsurf":"\u2313","prop":"\u221D","Proportional":"\u221D","Proportion":"\u2237","propto":"\u221D","prsim":"\u227E","prurel":"\u22B0","Pscr":"\uD835\uDCAB","pscr":"\uD835\uDCC5","Psi":"\u03A8","psi":"\u03C8","puncsp":"\u2008","Qfr":"\uD835\uDD14","qfr":"\uD835\uDD2E","qint":"\u2A0C","qopf":"\uD835\uDD62","Qopf":"\u211A","qprime":"\u2057","Qscr":"\uD835\uDCAC","qscr":"\uD835\uDCC6","quaternions":"\u210D","quatint":"\u2A16","quest":"?","questeq":"\u225F","quot":"\"","QUOT":"\"","rAarr":"\u21DB","race":"\u223D\u0331","Racute":"\u0154","racute":"\u0155","radic":"\u221A","raemptyv":"\u29B3","rang":"\u27E9","Rang":"\u27EB","rangd":"\u2992","range":"\u29A5","rangle":"\u27E9","raquo":"\u00BB","rarrap":"\u2975","rarrb":"\u21E5","rarrbfs":"\u2920","rarrc":"\u2933","rarr":"\u2192","Rarr":"\u21A0","rArr":"\u21D2","rarrfs":"\u291E","rarrhk":"\u21AA","rarrlp":"\u21AC","rarrpl":"\u2945","rarrsim":"\u2974","Rarrtl":"\u2916","rarrtl":"\u21A3","rarrw":"\u219D","ratail":"\u291A","rAtail":"\u291C","ratio":"\u2236","rationals":"\u211A","rbarr":"\u290D","rBarr":"\u290F","RBarr":"\u2910","rbbrk":"\u2773","rbrace":"}","rbrack":"]","rbrke":"\u298C","rbrksld":"\u298E","rbrkslu":"\u2990","Rcaron":"\u0158","rcaron":"\u0159","Rcedil":"\u0156","rcedil":"\u0157","rceil":"\u2309","rcub":"}","Rcy":"\u0420","rcy":"\u0440","rdca":"\u2937","rdldhar":"\u2969","rdquo":"\u201D","rdquor":"\u201D","rdsh":"\u21B3","real":"\u211C","realine":"\u211B","realpart":"\u211C","reals":"\u211D","Re":"\u211C","rect":"\u25AD","reg":"\u00AE","REG":"\u00AE","ReverseElement":"\u220B","ReverseEquilibrium":"\u21CB","ReverseUpEquilibrium":"\u296F","rfisht":"\u297D","rfloor":"\u230B","rfr":"\uD835\uDD2F","Rfr":"\u211C","rHar":"\u2964","rhard":"\u21C1","rharu":"\u21C0","rharul":"\u296C","Rho":"\u03A1","rho":"\u03C1","rhov":"\u03F1","RightAngleBracket":"\u27E9","RightArrowBar":"\u21E5","rightarrow":"\u2192","RightArrow":"\u2192","Rightarrow":"\u21D2","RightArrowLeftArrow":"\u21C4","rightarrowtail":"\u21A3","RightCeiling":"\u2309","RightDoubleBracket":"\u27E7","RightDownTeeVector":"\u295D","RightDownVectorBar":"\u2955","RightDownVector":"\u21C2","RightFloor":"\u230B","rightharpoondown":"\u21C1","rightharpoonup":"\u21C0","rightleftarrows":"\u21C4","rightleftharpoons":"\u21CC","rightrightarrows":"\u21C9","rightsquigarrow":"\u219D","RightTeeArrow":"\u21A6","RightTee":"\u22A2","RightTeeVector":"\u295B","rightthreetimes":"\u22CC","RightTriangleBar":"\u29D0","RightTriangle":"\u22B3","RightTriangleEqual":"\u22B5","RightUpDownVector":"\u294F","RightUpTeeVector":"\u295C","RightUpVectorBar":"\u2954","RightUpVector":"\u21BE","RightVectorBar":"\u2953","RightVector":"\u21C0","ring":"\u02DA","risingdotseq":"\u2253","rlarr":"\u21C4","rlhar":"\u21CC","rlm":"\u200F","rmoustache":"\u23B1","rmoust":"\u23B1","rnmid":"\u2AEE","roang":"\u27ED","roarr":"\u21FE","robrk":"\u27E7","ropar":"\u2986","ropf":"\uD835\uDD63","Ropf":"\u211D","roplus":"\u2A2E","rotimes":"\u2A35","RoundImplies":"\u2970","rpar":")","rpargt":"\u2994","rppolint":"\u2A12","rrarr":"\u21C9","Rrightarrow":"\u21DB","rsaquo":"\u203A","rscr":"\uD835\uDCC7","Rscr":"\u211B","rsh":"\u21B1","Rsh":"\u21B1","rsqb":"]","rsquo":"\u2019","rsquor":"\u2019","rthree":"\u22CC","rtimes":"\u22CA","rtri":"\u25B9","rtrie":"\u22B5","rtrif":"\u25B8","rtriltri":"\u29CE","RuleDelayed":"\u29F4","ruluhar":"\u2968","rx":"\u211E","Sacute":"\u015A","sacute":"\u015B","sbquo":"\u201A","scap":"\u2AB8","Scaron":"\u0160","scaron":"\u0161","Sc":"\u2ABC","sc":"\u227B","sccue":"\u227D","sce":"\u2AB0","scE":"\u2AB4","Scedil":"\u015E","scedil":"\u015F","Scirc":"\u015C","scirc":"\u015D","scnap":"\u2ABA","scnE":"\u2AB6","scnsim":"\u22E9","scpolint":"\u2A13","scsim":"\u227F","Scy":"\u0421","scy":"\u0441","sdotb":"\u22A1","sdot":"\u22C5","sdote":"\u2A66","searhk":"\u2925","searr":"\u2198","seArr":"\u21D8","searrow":"\u2198","sect":"\u00A7","semi":";","seswar":"\u2929","setminus":"\u2216","setmn":"\u2216","sext":"\u2736","Sfr":"\uD835\uDD16","sfr":"\uD835\uDD30","sfrown":"\u2322","sharp":"\u266F","SHCHcy":"\u0429","shchcy":"\u0449","SHcy":"\u0428","shcy":"\u0448","ShortDownArrow":"\u2193","ShortLeftArrow":"\u2190","shortmid":"\u2223","shortparallel":"\u2225","ShortRightArrow":"\u2192","ShortUpArrow":"\u2191","shy":"\u00AD","Sigma":"\u03A3","sigma":"\u03C3","sigmaf":"\u03C2","sigmav":"\u03C2","sim":"\u223C","simdot":"\u2A6A","sime":"\u2243","simeq":"\u2243","simg":"\u2A9E","simgE":"\u2AA0","siml":"\u2A9D","simlE":"\u2A9F","simne":"\u2246","simplus":"\u2A24","simrarr":"\u2972","slarr":"\u2190","SmallCircle":"\u2218","smallsetminus":"\u2216","smashp":"\u2A33","smeparsl":"\u29E4","smid":"\u2223","smile":"\u2323","smt":"\u2AAA","smte":"\u2AAC","smtes":"\u2AAC\uFE00","SOFTcy":"\u042C","softcy":"\u044C","solbar":"\u233F","solb":"\u29C4","sol":"/","Sopf":"\uD835\uDD4A","sopf":"\uD835\uDD64","spades":"\u2660","spadesuit":"\u2660","spar":"\u2225","sqcap":"\u2293","sqcaps":"\u2293\uFE00","sqcup":"\u2294","sqcups":"\u2294\uFE00","Sqrt":"\u221A","sqsub":"\u228F","sqsube":"\u2291","sqsubset":"\u228F","sqsubseteq":"\u2291","sqsup":"\u2290","sqsupe":"\u2292","sqsupset":"\u2290","sqsupseteq":"\u2292","square":"\u25A1","Square":"\u25A1","SquareIntersection":"\u2293","SquareSubset":"\u228F","SquareSubsetEqual":"\u2291","SquareSuperset":"\u2290","SquareSupersetEqual":"\u2292","SquareUnion":"\u2294","squarf":"\u25AA","squ":"\u25A1","squf":"\u25AA","srarr":"\u2192","Sscr":"\uD835\uDCAE","sscr":"\uD835\uDCC8","ssetmn":"\u2216","ssmile":"\u2323","sstarf":"\u22C6","Star":"\u22C6","star":"\u2606","starf":"\u2605","straightepsilon":"\u03F5","straightphi":"\u03D5","strns":"\u00AF","sub":"\u2282","Sub":"\u22D0","subdot":"\u2ABD","subE":"\u2AC5","sube":"\u2286","subedot":"\u2AC3","submult":"\u2AC1","subnE":"\u2ACB","subne":"\u228A","subplus":"\u2ABF","subrarr":"\u2979","subset":"\u2282","Subset":"\u22D0","subseteq":"\u2286","subseteqq":"\u2AC5","SubsetEqual":"\u2286","subsetneq":"\u228A","subsetneqq":"\u2ACB","subsim":"\u2AC7","subsub":"\u2AD5","subsup":"\u2AD3","succapprox":"\u2AB8","succ":"\u227B","succcurlyeq":"\u227D","Succeeds":"\u227B","SucceedsEqual":"\u2AB0","SucceedsSlantEqual":"\u227D","SucceedsTilde":"\u227F","succeq":"\u2AB0","succnapprox":"\u2ABA","succneqq":"\u2AB6","succnsim":"\u22E9","succsim":"\u227F","SuchThat":"\u220B","sum":"\u2211","Sum":"\u2211","sung":"\u266A","sup1":"\u00B9","sup2":"\u00B2","sup3":"\u00B3","sup":"\u2283","Sup":"\u22D1","supdot":"\u2ABE","supdsub":"\u2AD8","supE":"\u2AC6","supe":"\u2287","supedot":"\u2AC4","Superset":"\u2283","SupersetEqual":"\u2287","suphsol":"\u27C9","suphsub":"\u2AD7","suplarr":"\u297B","supmult":"\u2AC2","supnE":"\u2ACC","supne":"\u228B","supplus":"\u2AC0","supset":"\u2283","Supset":"\u22D1","supseteq":"\u2287","supseteqq":"\u2AC6","supsetneq":"\u228B","supsetneqq":"\u2ACC","supsim":"\u2AC8","supsub":"\u2AD4","supsup":"\u2AD6","swarhk":"\u2926","swarr":"\u2199","swArr":"\u21D9","swarrow":"\u2199","swnwar":"\u292A","szlig":"\u00DF","Tab":"\t","target":"\u2316","Tau":"\u03A4","tau":"\u03C4","tbrk":"\u23B4","Tcaron":"\u0164","tcaron":"\u0165","Tcedil":"\u0162","tcedil":"\u0163","Tcy":"\u0422","tcy":"\u0442","tdot":"\u20DB","telrec":"\u2315","Tfr":"\uD835\uDD17","tfr":"\uD835\uDD31","there4":"\u2234","therefore":"\u2234","Therefore":"\u2234","Theta":"\u0398","theta":"\u03B8","thetasym":"\u03D1","thetav":"\u03D1","thickapprox":"\u2248","thicksim":"\u223C","ThickSpace":"\u205F\u200A","ThinSpace":"\u2009","thinsp":"\u2009","thkap":"\u2248","thksim":"\u223C","THORN":"\u00DE","thorn":"\u00FE","tilde":"\u02DC","Tilde":"\u223C","TildeEqual":"\u2243","TildeFullEqual":"\u2245","TildeTilde":"\u2248","timesbar":"\u2A31","timesb":"\u22A0","times":"\u00D7","timesd":"\u2A30","tint":"\u222D","toea":"\u2928","topbot":"\u2336","topcir":"\u2AF1","top":"\u22A4","Topf":"\uD835\uDD4B","topf":"\uD835\uDD65","topfork":"\u2ADA","tosa":"\u2929","tprime":"\u2034","trade":"\u2122","TRADE":"\u2122","triangle":"\u25B5","triangledown":"\u25BF","triangleleft":"\u25C3","trianglelefteq":"\u22B4","triangleq":"\u225C","triangleright":"\u25B9","trianglerighteq":"\u22B5","tridot":"\u25EC","trie":"\u225C","triminus":"\u2A3A","TripleDot":"\u20DB","triplus":"\u2A39","trisb":"\u29CD","tritime":"\u2A3B","trpezium":"\u23E2","Tscr":"\uD835\uDCAF","tscr":"\uD835\uDCC9","TScy":"\u0426","tscy":"\u0446","TSHcy":"\u040B","tshcy":"\u045B","Tstrok":"\u0166","tstrok":"\u0167","twixt":"\u226C","twoheadleftarrow":"\u219E","twoheadrightarrow":"\u21A0","Uacute":"\u00DA","uacute":"\u00FA","uarr":"\u2191","Uarr":"\u219F","uArr":"\u21D1","Uarrocir":"\u2949","Ubrcy":"\u040E","ubrcy":"\u045E","Ubreve":"\u016C","ubreve":"\u016D","Ucirc":"\u00DB","ucirc":"\u00FB","Ucy":"\u0423","ucy":"\u0443","udarr":"\u21C5","Udblac":"\u0170","udblac":"\u0171","udhar":"\u296E","ufisht":"\u297E","Ufr":"\uD835\uDD18","ufr":"\uD835\uDD32","Ugrave":"\u00D9","ugrave":"\u00F9","uHar":"\u2963","uharl":"\u21BF","uharr":"\u21BE","uhblk":"\u2580","ulcorn":"\u231C","ulcorner":"\u231C","ulcrop":"\u230F","ultri":"\u25F8","Umacr":"\u016A","umacr":"\u016B","uml":"\u00A8","UnderBar":"_","UnderBrace":"\u23DF","UnderBracket":"\u23B5","UnderParenthesis":"\u23DD","Union":"\u22C3","UnionPlus":"\u228E","Uogon":"\u0172","uogon":"\u0173","Uopf":"\uD835\uDD4C","uopf":"\uD835\uDD66","UpArrowBar":"\u2912","uparrow":"\u2191","UpArrow":"\u2191","Uparrow":"\u21D1","UpArrowDownArrow":"\u21C5","updownarrow":"\u2195","UpDownArrow":"\u2195","Updownarrow":"\u21D5","UpEquilibrium":"\u296E","upharpoonleft":"\u21BF","upharpoonright":"\u21BE","uplus":"\u228E","UpperLeftArrow":"\u2196","UpperRightArrow":"\u2197","upsi":"\u03C5","Upsi":"\u03D2","upsih":"\u03D2","Upsilon":"\u03A5","upsilon":"\u03C5","UpTeeArrow":"\u21A5","UpTee":"\u22A5","upuparrows":"\u21C8","urcorn":"\u231D","urcorner":"\u231D","urcrop":"\u230E","Uring":"\u016E","uring":"\u016F","urtri":"\u25F9","Uscr":"\uD835\uDCB0","uscr":"\uD835\uDCCA","utdot":"\u22F0","Utilde":"\u0168","utilde":"\u0169","utri":"\u25B5","utrif":"\u25B4","uuarr":"\u21C8","Uuml":"\u00DC","uuml":"\u00FC","uwangle":"\u29A7","vangrt":"\u299C","varepsilon":"\u03F5","varkappa":"\u03F0","varnothing":"\u2205","varphi":"\u03D5","varpi":"\u03D6","varpropto":"\u221D","varr":"\u2195","vArr":"\u21D5","varrho":"\u03F1","varsigma":"\u03C2","varsubsetneq":"\u228A\uFE00","varsubsetneqq":"\u2ACB\uFE00","varsupsetneq":"\u228B\uFE00","varsupsetneqq":"\u2ACC\uFE00","vartheta":"\u03D1","vartriangleleft":"\u22B2","vartriangleright":"\u22B3","vBar":"\u2AE8","Vbar":"\u2AEB","vBarv":"\u2AE9","Vcy":"\u0412","vcy":"\u0432","vdash":"\u22A2","vDash":"\u22A8","Vdash":"\u22A9","VDash":"\u22AB","Vdashl":"\u2AE6","veebar":"\u22BB","vee":"\u2228","Vee":"\u22C1","veeeq":"\u225A","vellip":"\u22EE","verbar":"|","Verbar":"\u2016","vert":"|","Vert":"\u2016","VerticalBar":"\u2223","VerticalLine":"|","VerticalSeparator":"\u2758","VerticalTilde":"\u2240","VeryThinSpace":"\u200A","Vfr":"\uD835\uDD19","vfr":"\uD835\uDD33","vltri":"\u22B2","vnsub":"\u2282\u20D2","vnsup":"\u2283\u20D2","Vopf":"\uD835\uDD4D","vopf":"\uD835\uDD67","vprop":"\u221D","vrtri":"\u22B3","Vscr":"\uD835\uDCB1","vscr":"\uD835\uDCCB","vsubnE":"\u2ACB\uFE00","vsubne":"\u228A\uFE00","vsupnE":"\u2ACC\uFE00","vsupne":"\u228B\uFE00","Vvdash":"\u22AA","vzigzag":"\u299A","Wcirc":"\u0174","wcirc":"\u0175","wedbar":"\u2A5F","wedge":"\u2227","Wedge":"\u22C0","wedgeq":"\u2259","weierp":"\u2118","Wfr":"\uD835\uDD1A","wfr":"\uD835\uDD34","Wopf":"\uD835\uDD4E","wopf":"\uD835\uDD68","wp":"\u2118","wr":"\u2240","wreath":"\u2240","Wscr":"\uD835\uDCB2","wscr":"\uD835\uDCCC","xcap":"\u22C2","xcirc":"\u25EF","xcup":"\u22C3","xdtri":"\u25BD","Xfr":"\uD835\uDD1B","xfr":"\uD835\uDD35","xharr":"\u27F7","xhArr":"\u27FA","Xi":"\u039E","xi":"\u03BE","xlarr":"\u27F5","xlArr":"\u27F8","xmap":"\u27FC","xnis":"\u22FB","xodot":"\u2A00","Xopf":"\uD835\uDD4F","xopf":"\uD835\uDD69","xoplus":"\u2A01","xotime":"\u2A02","xrarr":"\u27F6","xrArr":"\u27F9","Xscr":"\uD835\uDCB3","xscr":"\uD835\uDCCD","xsqcup":"\u2A06","xuplus":"\u2A04","xutri":"\u25B3","xvee":"\u22C1","xwedge":"\u22C0","Yacute":"\u00DD","yacute":"\u00FD","YAcy":"\u042F","yacy":"\u044F","Ycirc":"\u0176","ycirc":"\u0177","Ycy":"\u042B","ycy":"\u044B","yen":"\u00A5","Yfr":"\uD835\uDD1C","yfr":"\uD835\uDD36","YIcy":"\u0407","yicy":"\u0457","Yopf":"\uD835\uDD50","yopf":"\uD835\uDD6A","Yscr":"\uD835\uDCB4","yscr":"\uD835\uDCCE","YUcy":"\u042E","yucy":"\u044E","yuml":"\u00FF","Yuml":"\u0178","Zacute":"\u0179","zacute":"\u017A","Zcaron":"\u017D","zcaron":"\u017E","Zcy":"\u0417","zcy":"\u0437","Zdot":"\u017B","zdot":"\u017C","zeetrf":"\u2128","ZeroWidthSpace":"\u200B","Zeta":"\u0396","zeta":"\u03B6","zfr":"\uD835\uDD37","Zfr":"\u2128","ZHcy":"\u0416","zhcy":"\u0436","zigrarr":"\u21DD","zopf":"\uD835\uDD6B","Zopf":"\u2124","Zscr":"\uD835\uDCB5","zscr":"\uD835\uDCCF","zwj":"\u200D","zwnj":"\u200C"}
},{}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/entities/lib/decode_codepoint.js":[function(require,module,exports){
var decodeMap = require("../maps/decode.json");

module.exports = decodeCodePoint;

// modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119
function decodeCodePoint(codePoint){

	if((codePoint >= 0xD800 && codePoint <= 0xDFFF) || codePoint > 0x10FFFF){
		return "\uFFFD";
	}

	if(codePoint in decodeMap){
		codePoint = decodeMap[codePoint];
	}

	var output = "";

	if(codePoint > 0xFFFF){
		codePoint -= 0x10000;
		output += String.fromCharCode(codePoint >>> 10 & 0x3FF | 0xD800);
		codePoint = 0xDC00 | codePoint & 0x3FF;
	}

	output += String.fromCharCode(codePoint);
	return output;
}

},{"../maps/decode.json":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/entities/maps/decode.json"}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/node_modules/entities/maps/decode.json":[function(require,module,exports){
module.exports={"0":65533,"128":8364,"130":8218,"131":402,"132":8222,"133":8230,"134":8224,"135":8225,"136":710,"137":8240,"138":352,"139":8249,"140":338,"142":381,"145":8216,"146":8217,"147":8220,"148":8221,"149":8226,"150":8211,"151":8212,"152":732,"153":8482,"154":353,"155":8250,"156":339,"158":382,"159":376}
},{}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/lib/FeedHandler.js":[function(require,module,exports){
var index = require("./index.js"),
    DomHandler = index.DomHandler,
	DomUtils = index.DomUtils;

//TODO: make this a streamable handler
function FeedHandler(callback, options){
	this.init(callback, options);
}

require("util").inherits(FeedHandler, DomHandler);

FeedHandler.prototype.init = DomHandler;

function getElements(what, where){
	return DomUtils.getElementsByTagName(what, where, true);
}
function getOneElement(what, where){
	return DomUtils.getElementsByTagName(what, where, true, 1)[0];
}
function fetch(what, where, recurse){
	return DomUtils.getText(
		DomUtils.getElementsByTagName(what, where, recurse, 1)
	).trim();
}

function addConditionally(obj, prop, what, where, recurse){
	var tmp = fetch(what, where, recurse);
	if(tmp) obj[prop] = tmp;
}

var isValidFeed = function(value){
	return value === "rss" || value === "feed" || value === "rdf:RDF";
};

FeedHandler.prototype.onend = function(){
	var feed = {},
		feedRoot = getOneElement(isValidFeed, this.dom),
		tmp, childs;

	if(feedRoot){
		if(feedRoot.name === "feed"){
			childs = feedRoot.children;

			feed.type = "atom";
			addConditionally(feed, "id", "id", childs);
			addConditionally(feed, "title", "title", childs);
			if((tmp = getOneElement("link", childs)) && (tmp = tmp.attribs) && (tmp = tmp.href)) feed.link = tmp;
			addConditionally(feed, "description", "subtitle", childs);
			if((tmp = fetch("updated", childs))) feed.updated = new Date(tmp);
			addConditionally(feed, "author", "email", childs, true);

			feed.items = getElements("entry", childs).map(function(item){
				var entry = {}, tmp;

				item = item.children;

				addConditionally(entry, "id", "id", item);
				addConditionally(entry, "title", "title", item);
				if((tmp = getOneElement("link", item)) && (tmp = tmp.attribs) && (tmp = tmp.href)) entry.link = tmp;
				if((tmp = fetch("summary", item) || fetch("content", item))) entry.description = tmp;
				if((tmp = fetch("updated", item))) entry.pubDate = new Date(tmp);
				return entry;
			});
		} else {
			childs = getOneElement("channel", feedRoot.children).children;

			feed.type = feedRoot.name.substr(0, 3);
			feed.id = "";
			addConditionally(feed, "title", "title", childs);
			addConditionally(feed, "link", "link", childs);
			addConditionally(feed, "description", "description", childs);
			if((tmp = fetch("lastBuildDate", childs))) feed.updated = new Date(tmp);
			addConditionally(feed, "author", "managingEditor", childs, true);

			feed.items = getElements("item", feedRoot.children).map(function(item){
				var entry = {}, tmp;

				item = item.children;

				addConditionally(entry, "id", "guid", item);
				addConditionally(entry, "title", "title", item);
				addConditionally(entry, "link", "link", item);
				addConditionally(entry, "description", "description", item);
				if((tmp = fetch("pubDate", item))) entry.pubDate = new Date(tmp);
				return entry;
			});
		}
	}
	this.dom = feed;
	DomHandler.prototype._handleCallback.call(
		this, feedRoot ? null : Error("couldn't find root of feed")
	);
};

module.exports = FeedHandler;

},{"./index.js":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/lib/index.js","util":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/util/util.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/util/util.js":[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./support/isBuffer":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/util/support/isBufferBrowser.js","_process":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/process/browser.js","inherits":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/util/support/isBufferBrowser.js":[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/lib/CollectingHandler.js":[function(require,module,exports){
module.exports = CollectingHandler;

function CollectingHandler(cbs){
	this._cbs = cbs || {};
	this.events = [];
}

var EVENTS = require("./").EVENTS;
Object.keys(EVENTS).forEach(function(name){
	if(EVENTS[name] === 0){
		name = "on" + name;
		CollectingHandler.prototype[name] = function(){
			this.events.push([name]);
			if(this._cbs[name]) this._cbs[name]();
		};
	} else if(EVENTS[name] === 1){
		name = "on" + name;
		CollectingHandler.prototype[name] = function(a){
			this.events.push([name, a]);
			if(this._cbs[name]) this._cbs[name](a);
		};
	} else if(EVENTS[name] === 2){
		name = "on" + name;
		CollectingHandler.prototype[name] = function(a, b){
			this.events.push([name, a, b]);
			if(this._cbs[name]) this._cbs[name](a, b);
		};
	} else {
		throw Error("wrong number of arguments");
	}
});

CollectingHandler.prototype.onreset = function(){
	this.events = [];
	if(this._cbs.onreset) this._cbs.onreset();
};

CollectingHandler.prototype.restart = function(){
	if(this._cbs.onreset) this._cbs.onreset();

	for(var i = 0, len = this.events.length; i < len; i++){
		if(this._cbs[this.events[i][0]]){

			var num = this.events[i].length;

			if(num === 1){
				this._cbs[this.events[i][0]]();
			} else if(num === 2){
				this._cbs[this.events[i][0]](this.events[i][1]);
			} else {
				this._cbs[this.events[i][0]](this.events[i][1], this.events[i][2]);
			}
		}
	}
};

},{"./":"/home/ubuntu/staging/apps/node_modules/sanitize-html/node_modules/htmlparser2/lib/index.js"}],"/home/ubuntu/staging/apps/build/js/applab/rgbcolor.js":[function(require,module,exports){
/**
 * A class to parse color values
 * @author Stoyan Stefanov <sstoo@gmail.com>
 * @link   http://www.phpied.com/rgb-color-parser-in-javascript/
 * @license Use it if you like it
 */

// hex regular expressions updated to require [0-9a-f] (cpirich)
// channels declared as local variable to avoid conflicts (cpirich)
// cleanup jshint errors (cpirich)
// add rgba support (davidsbailey)

'use strict';

module.exports = function (color_string) {
    this.ok = false;

    // strip any leading #
    if (color_string.charAt(0) == '#') {
        // remove # if any
        color_string = color_string.substr(1, 6);
    }

    color_string = color_string.replace(/ /g, '');
    color_string = color_string.toLowerCase();

    // before getting into regexps, try simple matches
    // and overwrite the input
    var simple_colors = {
        aliceblue: 'f0f8ff',
        antiquewhite: 'faebd7',
        aqua: '00ffff',
        aquamarine: '7fffd4',
        azure: 'f0ffff',
        beige: 'f5f5dc',
        bisque: 'ffe4c4',
        black: '000000',
        blanchedalmond: 'ffebcd',
        blue: '0000ff',
        blueviolet: '8a2be2',
        brown: 'a52a2a',
        burlywood: 'deb887',
        cadetblue: '5f9ea0',
        chartreuse: '7fff00',
        chocolate: 'd2691e',
        coral: 'ff7f50',
        cornflowerblue: '6495ed',
        cornsilk: 'fff8dc',
        crimson: 'dc143c',
        cyan: '00ffff',
        darkblue: '00008b',
        darkcyan: '008b8b',
        darkgoldenrod: 'b8860b',
        darkgray: 'a9a9a9',
        darkgreen: '006400',
        darkkhaki: 'bdb76b',
        darkmagenta: '8b008b',
        darkolivegreen: '556b2f',
        darkorange: 'ff8c00',
        darkorchid: '9932cc',
        darkred: '8b0000',
        darksalmon: 'e9967a',
        darkseagreen: '8fbc8f',
        darkslateblue: '483d8b',
        darkslategray: '2f4f4f',
        darkturquoise: '00ced1',
        darkviolet: '9400d3',
        deeppink: 'ff1493',
        deepskyblue: '00bfff',
        dimgray: '696969',
        dodgerblue: '1e90ff',
        feldspar: 'd19275',
        firebrick: 'b22222',
        floralwhite: 'fffaf0',
        forestgreen: '228b22',
        fuchsia: 'ff00ff',
        gainsboro: 'dcdcdc',
        ghostwhite: 'f8f8ff',
        gold: 'ffd700',
        goldenrod: 'daa520',
        gray: '808080',
        green: '008000',
        greenyellow: 'adff2f',
        honeydew: 'f0fff0',
        hotpink: 'ff69b4',
        indianred: 'cd5c5c',
        indigo: '4b0082',
        ivory: 'fffff0',
        khaki: 'f0e68c',
        lavender: 'e6e6fa',
        lavenderblush: 'fff0f5',
        lawngreen: '7cfc00',
        lemonchiffon: 'fffacd',
        lightblue: 'add8e6',
        lightcoral: 'f08080',
        lightcyan: 'e0ffff',
        lightgoldenrodyellow: 'fafad2',
        lightgrey: 'd3d3d3',
        lightgreen: '90ee90',
        lightpink: 'ffb6c1',
        lightsalmon: 'ffa07a',
        lightseagreen: '20b2aa',
        lightskyblue: '87cefa',
        lightslateblue: '8470ff',
        lightslategray: '778899',
        lightsteelblue: 'b0c4de',
        lightyellow: 'ffffe0',
        lime: '00ff00',
        limegreen: '32cd32',
        linen: 'faf0e6',
        magenta: 'ff00ff',
        maroon: '800000',
        mediumaquamarine: '66cdaa',
        mediumblue: '0000cd',
        mediumorchid: 'ba55d3',
        mediumpurple: '9370d8',
        mediumseagreen: '3cb371',
        mediumslateblue: '7b68ee',
        mediumspringgreen: '00fa9a',
        mediumturquoise: '48d1cc',
        mediumvioletred: 'c71585',
        midnightblue: '191970',
        mintcream: 'f5fffa',
        mistyrose: 'ffe4e1',
        moccasin: 'ffe4b5',
        navajowhite: 'ffdead',
        navy: '000080',
        oldlace: 'fdf5e6',
        olive: '808000',
        olivedrab: '6b8e23',
        orange: 'ffa500',
        orangered: 'ff4500',
        orchid: 'da70d6',
        palegoldenrod: 'eee8aa',
        palegreen: '98fb98',
        paleturquoise: 'afeeee',
        palevioletred: 'd87093',
        papayawhip: 'ffefd5',
        peachpuff: 'ffdab9',
        peru: 'cd853f',
        pink: 'ffc0cb',
        plum: 'dda0dd',
        powderblue: 'b0e0e6',
        purple: '800080',
        red: 'ff0000',
        rosybrown: 'bc8f8f',
        royalblue: '4169e1',
        saddlebrown: '8b4513',
        salmon: 'fa8072',
        sandybrown: 'f4a460',
        seagreen: '2e8b57',
        seashell: 'fff5ee',
        sienna: 'a0522d',
        silver: 'c0c0c0',
        skyblue: '87ceeb',
        slateblue: '6a5acd',
        slategray: '708090',
        snow: 'fffafa',
        springgreen: '00ff7f',
        steelblue: '4682b4',
        tan: 'd2b48c',
        teal: '008080',
        thistle: 'd8bfd8',
        tomato: 'ff6347',
        turquoise: '40e0d0',
        violet: 'ee82ee',
        violetred: 'd02090',
        wheat: 'f5deb3',
        white: 'ffffff',
        whitesmoke: 'f5f5f5',
        yellow: 'ffff00',
        yellowgreen: '9acd32'
    };
    for (var key in simple_colors) {
        if (color_string == key) {
            color_string = simple_colors[key];
        }
    }
    // emd of simple type-in colors

    // array of color definition objects
    var color_defs = [{
        re: /^rgb\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)$/,
        example: ['rgb(123, 234, 45)', 'rgb(255,234,245)'],
        process: function process(bits) {
            return [parseInt(bits[1]), parseInt(bits[2]), parseInt(bits[3])];
        }
    }, {
        re: /^rgba\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*((?:\d+(?:\.\d+)?)|(?:\.\d+))\s*\)$/,
        example: ['rgba(123, 234, 45, .33)', 'rgba(255,234,245,1)'],
        process: function process(bits) {
            return [parseInt(bits[1]), parseInt(bits[2]), parseInt(bits[3]), parseInt(bits[4])];
        }
    }, {
        re: /^([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/,
        example: ['#00ff00', '336699'],
        process: function process(bits) {
            return [parseInt(bits[1], 16), parseInt(bits[2], 16), parseInt(bits[3], 16)];
        }
    }, {
        re: /^([0-9a-f]{1})([0-9a-f]{1})([0-9a-f]{1})$/,
        example: ['#fb0', 'f0f'],
        process: function process(bits) {
            return [parseInt(bits[1] + bits[1], 16), parseInt(bits[2] + bits[2], 16), parseInt(bits[3] + bits[3], 16)];
        }
    }];

    // search through the definitions to find a match
    for (var i = 0; i < color_defs.length; i++) {
        var re = color_defs[i].re;
        var processor = color_defs[i].process;
        var bits = re.exec(color_string);
        if (bits) {
            var channels = processor(bits);
            this.r = channels[0];
            this.g = channels[1];
            this.b = channels[2];
            this.a = channels[3];
            this.ok = true;
        }
    }

    // validate/cleanup values
    this.r = this.r < 0 || isNaN(this.r) ? 0 : this.r > 255 ? 255 : this.r;
    this.g = this.g < 0 || isNaN(this.g) ? 0 : this.g > 255 ? 255 : this.g;
    this.b = this.b < 0 || isNaN(this.b) ? 0 : this.b > 255 ? 255 : this.b;
    this.a = this.a < 0 ? 0 : this.a > 1 || isNaN(this.a) ? 1 : this.a;

    // some getters
    this.toRGB = function () {
        return 'rgb(' + this.r + ', ' + this.g + ', ' + this.b + ')';
    };
    this.toRGBA = function () {
        return 'rgba(' + this.r + ', ' + this.g + ', ' + this.b + ', ' + this.a + ')';
    };
    this.toHex = function () {
        var r = this.r.toString(16);
        var g = this.g.toString(16);
        var b = this.b.toString(16);
        if (r.length == 1) {
            r = '0' + r;
        }
        if (g.length == 1) {
            g = '0' + g;
        }
        if (b.length == 1) {
            b = '0' + b;
        }
        return '#' + r + g + b;
    };
};

},{}],"/home/ubuntu/staging/apps/build/js/applab/errorHandler.js":[function(require,module,exports){
'use strict';

var annotationList = require('../acemode/annotationList');
var logToCloud = require('../logToCloud');

var ErrorLevel = {
  WARNING: 'WARNING',
  ERROR: 'ERROR'
};

// Rate at which we log errors to the cloud
var ERROR_LOG_RATE = 1 / 20;

/**
 * Output error to console and gutter as appropriate
 * @param {string} warning Text for warning
 * @param {ErrorLevel} level
 * @param {number} lineNum One indexed line number
 */
function outputError(warning, level, lineNum) {
  var text = level + ': ';
  if (lineNum !== undefined) {
    text += 'Line: ' + lineNum + ': ';
  }
  text += warning;
  Applab.log(text);
  if (lineNum !== undefined) {
    annotationList.addRuntimeAnnotation(level, lineNum, warning);
  }

  // Send up to New Relic if it meets our sampling rate
  if (level === ErrorLevel.ERROR && Math.random() < ERROR_LOG_RATE) {
    logToCloud.addPageAction(logToCloud.PageAction.UserJavaScriptError, {
      error: warning
    });
  }
}

function handleError(opts, message) {
  if (opts.onError) {
    opts.onError.call(null, message);
  } else {
    Applab.log(message);
  }
}

module.exports = {
  ErrorLevel: ErrorLevel,
  outputError: outputError,
  handleError: handleError
};

},{"../acemode/annotationList":"/home/ubuntu/staging/apps/build/js/acemode/annotationList.js","../logToCloud":"/home/ubuntu/staging/apps/build/js/logToCloud.js"}],"/home/ubuntu/staging/apps/build/js/applab/apiBlockly.js":[function(require,module,exports){
'use strict';

exports.randomFromArray = function (values) {
  var key = Math.floor(Math.random() * values.length);
  return values[key];
};

// APIs needed for blockly (must include blockId) (keep in sync with api.js):

exports.container = function (blockId, elementId, html) {
  return Applab.executeCmd(blockId, 'container', { 'elementId': elementId,
    'html': html });
};

exports.write = function (blockId, html) {
  return Applab.executeCmd(blockId, 'write', { 'html': html });
};

exports.innerHTML = function (blockId, elementId, html) {
  return Applab.executeCmd(blockId, 'innerHTML', { 'elementId': elementId,
    'html': html });
};

exports.deleteElement = function (blockId, elementId) {
  return Applab.executeCmd(blockId, 'deleteElement', { 'elementId': elementId });
};

exports.showElement = function (blockId, elementId) {
  return Applab.executeCmd(blockId, 'showElement', { 'elementId': elementId });
};

exports.hideElement = function (blockId, elementId) {
  return Applab.executeCmd(blockId, 'hideElement', { 'elementId': elementId });
};

exports.setScreen = function (blockId, screenId) {
  return Applab.executeCmd(blockId, 'setScreen', { 'screenId': screenId });
};

exports.button = function (blockId, elementId, text) {
  return Applab.executeCmd(blockId, 'button', { 'elementId': elementId,
    'text': text });
};

exports.image = function (blockId, elementId, src) {
  return Applab.executeCmd(blockId, 'image', { 'elementId': elementId,
    'src': src });
};

exports.setPosition = function (blockId, elementId, left, top, width, height) {
  return Applab.executeCmd(blockId, 'setPosition', { 'elementId': elementId,
    'left': left,
    'top': top,
    'width': width,
    'height': height });
};

exports.setSize = function (blockId, elementId, width, height) {
  return Applab.executeCmd(blockId, 'setSize', { 'elementId': elementId,
    'width': width,
    'height': height });
};

exports.getXPosition = function (blockId, elementId) {
  return Applab.executeCmd(blockId, 'getXPosition', { 'elementId': elementId });
};

exports.getYPosition = function (blockId, elementId) {
  return Applab.executeCmd(blockId, 'getYPosition', { 'elementId': elementId });
};

exports.createCanvas = function (blockId, elementId, width, height) {
  return Applab.executeCmd(blockId, 'createCanvas', { 'elementId': elementId,
    'width': width,
    'height': height });
};

exports.setActiveCanvas = function (blockId, elementId) {
  return Applab.executeCmd(blockId, 'setActiveCanvas', { 'elementId': elementId });
};

exports.line = function (blockId, x1, y1, x2, y2) {
  return Applab.executeCmd(blockId, 'line', { 'x1': x1,
    'y1': y1,
    'x2': x2,
    'y2': y2 });
};

exports.circle = function (blockId, x, y, radius) {
  return Applab.executeCmd(blockId, 'circle', { 'x': x,
    'y': y,
    'radius': radius });
};

exports.rect = function (blockId, x, y, width, height) {
  return Applab.executeCmd(blockId, 'rect', { 'x': x,
    'y': y,
    'width': width,
    'height': height });
};

exports.setStrokeWidth = function (blockId, width) {
  return Applab.executeCmd(blockId, 'setStrokeWidth', { 'width': width });
};

exports.setStrokeColor = function (blockId, color) {
  return Applab.executeCmd(blockId, 'setStrokeColor', { 'color': color });
};

exports.setFillColor = function (blockId, color) {
  return Applab.executeCmd(blockId, 'setFillColor', { 'color': color });
};

exports.clearCanvas = function (blockId) {
  return Applab.executeCmd(blockId, 'clearCanvas');
};

exports.drawImage = function (blockId, imageId, x, y, width, height) {
  return Applab.executeCmd(blockId, 'drawImage', { 'imageId': imageId,
    'x': x,
    'y': y,
    'width': width,
    'height': height });
};

exports.getImageData = function (blockId, x, y, width, height) {
  return Applab.executeCmd(blockId, 'getImageData', { 'x': x,
    'y': y,
    'width': width,
    'height': height });
};

exports.putImageData = function (blockId, imageData, x, y) {
  return Applab.executeCmd(blockId, 'putImageData', { 'imageData': imageData,
    'x': x,
    'y': y });
};

exports.textInput = function (blockId, elementId, text) {
  return Applab.executeCmd(blockId, 'textInput', { 'elementId': elementId,
    'text': text });
};

exports.textLabel = function (blockId, elementId, text, forId) {
  return Applab.executeCmd(blockId, 'textLabel', { 'elementId': elementId,
    'text': text,
    'forId': forId });
};

exports.checkbox = function (blockId, elementId, checked) {
  return Applab.executeCmd(blockId, 'checkbox', { 'elementId': elementId,
    'checked': checked });
};

exports.radioButton = function (blockId, elementId, checked, name) {
  return Applab.executeCmd(blockId, 'radioButton', { 'elementId': elementId,
    'checked': checked,
    'name': name });
};

exports.getChecked = function (blockId, elementId) {
  return Applab.executeCmd(blockId, 'getChecked', { 'elementId': elementId });
};

exports.setChecked = function (blockId, elementId, checked) {
  return Applab.executeCmd(blockId, 'setChecked', { 'elementId': elementId,
    'checked': checked });
};

exports.dropdown = function (blockId, elementId) {
  var optionsArray = Array.prototype.slice.call(arguments, 2);
  return Applab.executeCmd(blockId, 'dropdown', { 'elementId': elementId,
    'optionsArray': optionsArray });
};

exports.getAttribute = function (blockId, elementId, attribute) {
  return Applab.executeCmd(blockId, 'getAttribute', { elementId: elementId,
    attribute: attribute });
};

exports.setAttribute = function (blockId, elementId, attribute, value) {
  return Applab.executeCmd(blockId, 'setAttribute', { elementId: elementId,
    attribute: attribute,
    value: value });
};

exports.getText = function (blockId, elementId) {
  return Applab.executeCmd(blockId, 'getText', { 'elementId': elementId });
};

exports.setText = function (blockId, elementId, text) {
  return Applab.executeCmd(blockId, 'setText', { 'elementId': elementId,
    'text': text });
};

exports.getNumber = function (blockId, elementId) {
  return Applab.executeCmd(blockId, 'getNumber', { 'elementId': elementId });
};

exports.setNumber = function (blockId, elementId, number) {
  return Applab.executeCmd(blockId, 'setNumber', { 'elementId': elementId,
    'number': number });
};

exports.getImageURL = function (blockId, elementId) {
  return Applab.executeCmd(blockId, 'getImageURL', { 'elementId': elementId });
};

exports.setImageURL = function (blockId, elementId, src) {
  return Applab.executeCmd(blockId, 'setImageURL', { 'elementId': elementId,
    'src': src });
};

exports.imageUploadButton = function (blockId, elementId, text) {
  return Applab.executeCmd(blockId, 'imageUploadButton', { 'elementId': elementId,
    'text': text });
};

exports.setParent = function (blockId, elementId, parentId) {
  return Applab.executeCmd(blockId, 'setParent', { 'elementId': elementId,
    'parentId': parentId });
};

exports.setStyle = function (blockId, elementId, style) {
  return Applab.executeCmd(blockId, 'setStyle', { 'elementId': elementId,
    'style': style });
};

exports.onEvent = function (blockId, elementId, eventName, func) {
  var extraArgs = Array.prototype.slice.call(arguments).slice(4);
  return Applab.executeCmd(blockId, 'onEvent', { 'elementId': elementId,
    'eventName': eventName,
    'func': func,
    'extraArgs': extraArgs });
};

exports.startWebRequest = function (blockId, url, func) {
  return Applab.executeCmd(blockId, 'startWebRequest', { 'url': url,
    'func': func });
};

exports.setTimeout = function (blockId, func, milliseconds) {
  return Applab.executeCmd(blockId, 'setTimeout', { 'func': func,
    'milliseconds': milliseconds });
};

exports.clearTimeout = function (blockId, timeoutId) {
  return Applab.executeCmd(blockId, 'clearTimeout', { 'timeoutId': timeoutId });
};

exports.setInterval = function (blockId, func, milliseconds) {
  return Applab.executeCmd(blockId, 'setInterval', { 'func': func,
    'milliseconds': milliseconds });
};

exports.clearInterval = function (blockId, intervalId) {
  return Applab.executeCmd(blockId, 'clearInterval', { 'intervalId': intervalId });
};

exports.playSound = function (blockId, url) {
  return Applab.executeCmd(blockId, 'playSound', { 'url': url });
};

exports.getKeyValue = function (blockId, key, onSuccess, onError) {
  return Applab.executeCmd(blockId, 'getKeyValue', { 'key': key,
    'onSuccess': onSuccess,
    'onError': onError });
};

exports.setKeyValue = function (blockId, key, value, onSuccess, onError) {
  return Applab.executeCmd(blockId, 'setKeyValue', { 'key': key,
    'value': value,
    'onSuccess': onSuccess,
    'onError': onError });
};

exports.createRecord = function (blockId, table, record, onSuccess, onError) {
  return Applab.executeCmd(blockId, 'createRecord', { 'table': table,
    'record': record,
    'onSuccess': onSuccess,
    'onError': onError });
};

exports.readRecords = function (blockId, table, searchParams, onSuccess, onError) {
  return Applab.executeCmd(blockId, 'readRecords', { 'table': table,
    'searchParams': searchParams,
    'onSuccess': onSuccess,
    'onError': onError });
};

exports.updateRecord = function (blockId, table, record, onSuccess, onError) {
  return Applab.executeCmd(blockId, 'updateRecord', { 'table': table,
    'record': record,
    'onSuccess': onSuccess,
    'onError': onError });
};

exports.deleteRecord = function (blockId, table, record, onSuccess, onError) {
  return Applab.executeCmd(blockId, 'deleteRecord', { 'table': table,
    'record': record,
    'onSuccess': onSuccess,
    'onError': onError });
};

exports.onRecordEvent = function (blockId, table, onRecord) {
  return Applab.executeCmd(blockId, 'onRecordEvent', { 'table': table,
    'onRecord': onRecord });
};

exports.getUserId = function (blockId) {
  return Applab.executeCmd(blockId, 'getUserId', {});
};

exports.moveForward = function (blockId, distance) {
  return Applab.executeCmd(blockId, 'moveForward', { 'distance': distance });
};

exports.moveBackward = function (blockId, distance) {
  return Applab.executeCmd(blockId, 'moveBackward', { 'distance': distance });
};

exports.move = function (blockId, x, y) {
  return Applab.executeCmd(blockId, 'move', { 'x': x,
    'y': y });
};

exports.moveTo = function (blockId, x, y) {
  return Applab.executeCmd(blockId, 'moveTo', { 'x': x,
    'y': y });
};

exports.turnRight = function (blockId, degrees) {
  return Applab.executeCmd(blockId, 'turnRight', { 'degrees': degrees });
};

exports.turnLeft = function (blockId, degrees) {
  return Applab.executeCmd(blockId, 'turnLeft', { 'degrees': degrees });
};

exports.turnTo = function (blockId, direction) {
  return Applab.executeCmd(blockId, 'turnTo', { 'direction': direction });
};

exports.arcRight = function (blockId, degrees, radius) {
  return Applab.executeCmd(blockId, 'arcRight', { 'degrees': degrees,
    'radius': radius });
};

exports.arcLeft = function (blockId, degrees, radius) {
  return Applab.executeCmd(blockId, 'arcLeft', { 'degrees': degrees,
    'radius': radius });
};

exports.dot = function (blockId, radius) {
  return Applab.executeCmd(blockId, 'dot', { 'radius': radius });
};

exports.getX = function (blockId) {
  return Applab.executeCmd(blockId, 'getX');
};

exports.getY = function (blockId) {
  return Applab.executeCmd(blockId, 'getY');
};

exports.getDirection = function (blockId) {
  return Applab.executeCmd(blockId, 'getDirection');
};

exports.penUp = function (blockId) {
  return Applab.executeCmd(blockId, 'penUp');
};

exports.penDown = function (blockId) {
  return Applab.executeCmd(blockId, 'penDown');
};

exports.show = function (blockId) {
  return Applab.executeCmd(blockId, 'show');
};

exports.hide = function (blockId) {
  return Applab.executeCmd(blockId, 'hide');
};

exports.speed = function (blockId, percent) {
  return Applab.executeCmd(blockId, 'speed', { 'percent': percent });
};

exports.penWidth = function (blockId, width) {
  return Applab.executeCmd(blockId, 'penWidth', { 'width': width });
};

exports.penColor = function (blockId, color) {
  return Applab.executeCmd(blockId, 'penColor', { 'color': color });
};

exports.penRGB = function (blockId, r, g, b, a) {
  return Applab.executeCmd(blockId, 'penRGB', { 'r': r,
    'g': g,
    'b': b,
    'a': a });
};

exports.insertItem = function (blockId, array, index, item) {
  return Applab.executeCmd(blockId, 'insertItem', { 'array': array,
    'index': index,
    'item': item });
};

exports.appendItem = function (blockId, array, item) {
  return Applab.executeCmd(blockId, 'appendItem', { 'array': array,
    'item': item });
};

exports.removeItem = function (blockId, array, index) {
  return Applab.executeCmd(blockId, 'removeItem', { 'array': array,
    'index': index });
};

exports.drawChart = function (chartId, chartType, chartData, options, callback) {
  return Applab.executeCmd(null, 'drawChart', { 'chartId': chartId,
    'chartType': chartType,
    'chartData': chartData,
    'options': options,
    'callback': callback });
};

exports.drawChartFromRecords = function (chartId, chartType, tableName, columns, options, callback) {
  return Applab.executeCmd(null, 'drawChartFromRecords', { 'chartId': chartId,
    'chartType': chartType,
    'tableName': tableName,
    'columns': columns,
    'options': options,
    'callback': callback });
};

},{}],"/home/ubuntu/staging/apps/build/js/applab/api.js":[function(require,module,exports){
// APIs needed for droplet (keep in sync with apiBlockly.js):

'use strict';

exports.container = function (elementId, html) {
  return Applab.executeCmd(null, 'container', { 'elementId': elementId,
    'html': html });
};

exports.write = function (html) {
  return Applab.executeCmd(null, 'write', { 'html': html });
};

exports.innerHTML = function (elementId, html) {
  return Applab.executeCmd(null, 'innerHTML', { 'elementId': elementId,
    'html': html });
};

exports.deleteElement = function (elementId) {
  return Applab.executeCmd(null, 'deleteElement', { 'elementId': elementId });
};

exports.showElement = function (elementId) {
  return Applab.executeCmd(null, 'showElement', { 'elementId': elementId });
};

exports.hideElement = function (elementId) {
  return Applab.executeCmd(null, 'hideElement', { 'elementId': elementId });
};

exports.setScreen = function (screenId) {
  return Applab.executeCmd(null, 'setScreen', { 'screenId': screenId });
};

exports.button = function (elementId, text) {
  return Applab.executeCmd(null, 'button', { 'elementId': elementId,
    'text': text });
};

exports.image = function (elementId, src) {
  return Applab.executeCmd(null, 'image', { 'elementId': elementId,
    'src': src });
};

exports.setPosition = function (elementId, left, top, width, height) {
  return Applab.executeCmd(null, 'setPosition', { 'elementId': elementId,
    'left': left,
    'top': top,
    'width': width,
    'height': height });
};

exports.setSize = function (elementId, width, height) {
  return Applab.executeCmd(null, 'setSize', { 'elementId': elementId,
    'width': width,
    'height': height });
};

exports.setProperty = function (elementId, property, value) {
  return Applab.executeCmd(null, 'setProperty', { 'elementId': elementId,
    'property': property,
    'value': value });
};

exports.getXPosition = function (elementId) {
  return Applab.executeCmd(null, 'getXPosition', { 'elementId': elementId });
};

exports.getYPosition = function (elementId) {
  return Applab.executeCmd(null, 'getYPosition', { 'elementId': elementId });
};

exports.createCanvas = function (elementId, width, height) {
  return Applab.executeCmd(null, 'createCanvas', { 'elementId': elementId,
    'width': width,
    'height': height });
};

exports.setActiveCanvas = function (elementId) {
  return Applab.executeCmd(null, 'setActiveCanvas', { 'elementId': elementId });
};

exports.line = function (x1, y1, x2, y2) {
  return Applab.executeCmd(null, 'line', { 'x1': x1,
    'y1': y1,
    'x2': x2,
    'y2': y2 });
};

exports.circle = function (x, y, radius) {
  return Applab.executeCmd(null, 'circle', { 'x': x,
    'y': y,
    'radius': radius });
};

exports.rect = function (x, y, width, height) {
  return Applab.executeCmd(null, 'rect', { 'x': x,
    'y': y,
    'width': width,
    'height': height });
};

exports.setStrokeWidth = function (width) {
  return Applab.executeCmd(null, 'setStrokeWidth', { 'width': width });
};

exports.setStrokeColor = function (color) {
  return Applab.executeCmd(null, 'setStrokeColor', { 'color': color });
};

exports.setFillColor = function (color) {
  return Applab.executeCmd(null, 'setFillColor', { 'color': color });
};

exports.clearCanvas = function () {
  return Applab.executeCmd(null, 'clearCanvas');
};

exports.drawImage = function (imageId, x, y, width, height) {
  return Applab.executeCmd(null, 'drawImage', { 'imageId': imageId,
    'x': x,
    'y': y,
    'width': width,
    'height': height });
};

exports.drawImageURL = function (url, x, y, width, height, callback) {
  if (y === undefined && width === undefined && height === undefined && callback === undefined) {
    // everything after x is undefined. assume the two param version (in which
    // callback might still be undefined)
    callback = x;
    x = undefined;
  }
  return Applab.executeCmd(null, 'drawImageURL', { 'url': url,
    'x': x,
    'y': y,
    'width': width,
    'height': height,
    'callback': callback });
};

exports.getImageData = function (x, y, width, height) {
  return Applab.executeCmd(null, 'getImageData', { 'x': x,
    'y': y,
    'width': width,
    'height': height });
};

exports.putImageData = function (imageData, x, y) {
  return Applab.executeCmd(null, 'putImageData', { 'imageData': imageData,
    'x': x,
    'y': y });
};

exports.textInput = function (elementId, text) {
  return Applab.executeCmd(null, 'textInput', { 'elementId': elementId,
    'text': text });
};

exports.textLabel = function (elementId, text, forId) {
  return Applab.executeCmd(null, 'textLabel', { 'elementId': elementId,
    'text': text,
    'forId': forId });
};

exports.checkbox = function (elementId, checked) {
  return Applab.executeCmd(null, 'checkbox', { 'elementId': elementId,
    'checked': checked });
};

exports.radioButton = function (elementId, checked, name) {
  return Applab.executeCmd(null, 'radioButton', { 'elementId': elementId,
    'checked': checked,
    'name': name });
};

exports.getChecked = function (elementId) {
  return Applab.executeCmd(null, 'getChecked', { 'elementId': elementId });
};

exports.setChecked = function (elementId, checked) {
  return Applab.executeCmd(null, 'setChecked', { 'elementId': elementId,
    'checked': checked });
};

exports.dropdown = function (elementId) {
  var optionsArray = Array.prototype.slice.call(arguments, 1);
  return Applab.executeCmd(null, 'dropdown', { 'elementId': elementId,
    'optionsArray': optionsArray });
};

exports.getAttribute = function (elementId, attribute) {
  return Applab.executeCmd(null, 'getAttribute', { elementId: elementId,
    attribute: attribute });
};

exports.setAttribute = function (elementId, attribute, value) {
  return Applab.executeCmd(null, 'setAttribute', { elementId: elementId,
    attribute: attribute,
    value: value });
};

exports.getText = function (elementId) {
  return Applab.executeCmd(null, 'getText', { 'elementId': elementId });
};

exports.setText = function (elementId, text) {
  return Applab.executeCmd(null, 'setText', { 'elementId': elementId,
    'text': text });
};

exports.getNumber = function (elementId) {
  return Applab.executeCmd(null, 'getNumber', { 'elementId': elementId });
};

exports.setNumber = function (elementId, number) {
  return Applab.executeCmd(null, 'setNumber', { 'elementId': elementId,
    'number': number });
};

exports.getImageURL = function (elementId) {
  return Applab.executeCmd(null, 'getImageURL', { 'elementId': elementId });
};

exports.setImageURL = function (elementId, src) {
  return Applab.executeCmd(null, 'setImageURL', { 'elementId': elementId,
    'src': src });
};

exports.imageUploadButton = function (elementId, text) {
  return Applab.executeCmd(null, 'imageUploadButton', { 'elementId': elementId,
    'text': text });
};

exports.setParent = function (elementId, parentId) {
  return Applab.executeCmd(null, 'setParent', { 'elementId': elementId,
    'parentId': parentId });
};

exports.setStyle = function (elementId, style) {
  return Applab.executeCmd(null, 'setStyle', { 'elementId': elementId,
    'style': style });
};

exports.onEvent = function (elementId, eventName, func) {
  var extraArgs = Array.prototype.slice.call(arguments).slice(3);
  return Applab.executeCmd(null, 'onEvent', { 'elementId': elementId,
    'eventName': eventName,
    'func': func,
    'extraArgs': extraArgs });
};

exports.startWebRequest = function (url, func) {
  return Applab.executeCmd(null, 'startWebRequest', { 'url': url,
    'func': func });
};

exports.setTimeout = function (func, milliseconds) {
  return Applab.executeCmd(null, 'setTimeout', { 'func': func,
    'milliseconds': milliseconds });
};

exports.clearTimeout = function (timeoutId) {
  return Applab.executeCmd(null, 'clearTimeout', { 'timeoutId': timeoutId });
};

exports.setInterval = function (func, milliseconds) {
  return Applab.executeCmd(null, 'setInterval', { 'func': func,
    'milliseconds': milliseconds });
};

exports.clearInterval = function (intervalId) {
  return Applab.executeCmd(null, 'clearInterval', { 'intervalId': intervalId });
};

exports.playSound = function (url) {
  return Applab.executeCmd(null, 'playSound', { 'url': url });
};

exports.getKeyValue = function (key, onSuccess, onError) {
  return Applab.executeCmd(null, 'getKeyValue', { 'key': key,
    'onSuccess': onSuccess,
    'onError': onError });
};

exports.getKeyValueSync = function (key, callback) {
  return Applab.executeCmd(null, 'getKeyValueSync', { 'key': key,
    'callback': callback });
};

exports.setKeyValue = function (key, value, onSuccess, onError) {
  return Applab.executeCmd(null, 'setKeyValue', { 'key': key,
    'value': value,
    'onSuccess': onSuccess,
    'onError': onError });
};

exports.setKeyValueSync = function (key, value, callback) {
  return Applab.executeCmd(null, 'setKeyValueSync', { 'key': key,
    'value': value,
    'callback': callback });
};

exports.createRecord = function (table, record, onSuccess, onError) {
  return Applab.executeCmd(null, 'createRecord', { 'table': table,
    'record': record,
    'onSuccess': onSuccess,
    'onError': onError });
};

exports.readRecords = function (table, searchParams, onSuccess, onError) {
  return Applab.executeCmd(null, 'readRecords', { 'table': table,
    'searchParams': searchParams,
    'onSuccess': onSuccess,
    'onError': onError });
};

exports.updateRecord = function (table, record, onComplete, onError) {
  return Applab.executeCmd(null, 'updateRecord', { 'table': table,
    'record': record,
    'onComplete': onComplete,
    'onError': onError });
};

exports.deleteRecord = function (table, record, onComplete, onError) {
  return Applab.executeCmd(null, 'deleteRecord', { 'table': table,
    'record': record,
    'onComplete': onComplete,
    'onError': onError });
};

exports.onRecordEvent = function (table, onRecord) {
  return Applab.executeCmd(null, 'onRecordEvent', { 'table': table,
    'onRecord': onRecord });
};

exports.getUserId = function () {
  return Applab.executeCmd(null, 'getUserId', {});
};

exports.moveForward = function (distance) {
  return Applab.executeCmd(null, 'moveForward', { 'distance': distance });
};

exports.moveBackward = function (distance) {
  return Applab.executeCmd(null, 'moveBackward', { 'distance': distance });
};

exports.move = function (x, y) {
  return Applab.executeCmd(null, 'move', { 'x': x,
    'y': y });
};

exports.moveTo = function (x, y) {
  return Applab.executeCmd(null, 'moveTo', { 'x': x,
    'y': y });
};

exports.turnRight = function (degrees) {
  return Applab.executeCmd(null, 'turnRight', { 'degrees': degrees });
};

exports.turnLeft = function (degrees) {
  return Applab.executeCmd(null, 'turnLeft', { 'degrees': degrees });
};

exports.turnTo = function (direction) {
  return Applab.executeCmd(null, 'turnTo', { 'direction': direction });
};

exports.arcRight = function (degrees, radius) {
  return Applab.executeCmd(null, 'arcRight', { 'degrees': degrees,
    'radius': radius });
};

exports.arcLeft = function (degrees, radius) {
  return Applab.executeCmd(null, 'arcLeft', { 'degrees': degrees,
    'radius': radius });
};

exports.dot = function (radius) {
  return Applab.executeCmd(null, 'dot', { 'radius': radius });
};

exports.getX = function () {
  return Applab.executeCmd(null, 'getX');
};

exports.getY = function () {
  return Applab.executeCmd(null, 'getY');
};

exports.getDirection = function () {
  return Applab.executeCmd(null, 'getDirection');
};

exports.penUp = function () {
  return Applab.executeCmd(null, 'penUp');
};

exports.penDown = function () {
  return Applab.executeCmd(null, 'penDown');
};

exports.show = function () {
  return Applab.executeCmd(null, 'show');
};

exports.hide = function () {
  return Applab.executeCmd(null, 'hide');
};

exports.speed = function (percent) {
  return Applab.executeCmd(null, 'speed', { 'percent': percent });
};

exports.penWidth = function (width) {
  return Applab.executeCmd(null, 'penWidth', { 'width': width });
};

exports.penColor = function (color) {
  return Applab.executeCmd(null, 'penColor', { 'color': color });
};

exports.penRGB = function (r, g, b, a) {
  return Applab.executeCmd(null, 'penRGB', { 'r': r,
    'g': g,
    'b': b,
    'a': a });
};

exports.insertItem = function (array, index, item) {
  return Applab.executeCmd(null, 'insertItem', { 'array': array,
    'index': index,
    'item': item });
};

exports.appendItem = function (array, item) {
  return Applab.executeCmd(null, 'appendItem', { 'array': array,
    'item': item });
};

exports.removeItem = function (array, index) {
  return Applab.executeCmd(null, 'removeItem', { 'array': array,
    'index': index });
};

exports.drawChart = function (chartId, chartType, chartData, options, callback) {
  return Applab.executeCmd(null, 'drawChart', { 'chartId': chartId,
    'chartType': chartType,
    'chartData': chartData,
    'options': options,
    'callback': callback });
};

exports.drawChartFromRecords = function (chartId, chartType, tableName, columns, options, callback) {
  return Applab.executeCmd(null, 'drawChartFromRecords', { 'chartId': chartId,
    'chartType': chartType,
    'tableName': tableName,
    'columns': columns,
    'options': options,
    'callback': callback });
};

},{}],"/home/ubuntu/staging/apps/build/js/applab/VisualizationOverlay.js":[function(require,module,exports){
/** @file Creates and controls an SVG overlay on the app visualization. */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var constants = require('../constants');
var CrosshairOverlay = require('./CrosshairOverlay');
var gridUtils = require('./gridUtils');
var SVG_NS = constants.SVG_NS;

/**
 * Creates and controls an SVG overlay on the app visualization.
 * @constructor
 */
var VisualizationOverlay = function VisualizationOverlay() {
  /** @private {SVGGElement} */
  this.ownElement_ = null;

  /** @private {Object} */
  this.props_ = {
    isApplabRunning: false,
    scale: 1
  };

  /** @private {function} */
  this.mouseMoveListener_ = null;

  /** @private {SVGPoint} */
  this.mousePos_ = null;

  /** @private {SVGPoint} */
  this.appSize_ = null;

  /** @private {SVGMatrix} */
  this.screenSpaceToAppSpaceTransform_ = null;

  /** @private {CrosshairOverlay} */
  this.crosshairOverlay_ = new CrosshairOverlay();
};
module.exports = VisualizationOverlay;

/**
 * @param {SVGSVGElement} intoElement - where this component should be rendered
 * @param {Object} nextProps
 * @param {boolean} nextProps.isApplabRunning
 * @param {number} nextProps.scale
 */
VisualizationOverlay.prototype.render = function (intoElement, nextProps) {
  // Create element if necessary
  if (!this.ownElement_) {
    this.create_();
  }

  // Put element in correct parent
  if (this.ownElement_.parentNode !== intoElement) {
    this.moveToParent_(intoElement);
  }

  // Record any new/updated properties
  var oldProps = $.extend({}, this.props_);
  $.extend(this.props_, nextProps);

  if (this.props_.scale !== oldProps.scale) {
    this.recalculateTransformAtScale_(this.props_.scale);
  }

  if (this.shouldShowCrosshair_()) {
    this.crosshairOverlay_.render(this.ownElement_, {
      x: this.mousePos_.x,
      y: this.mousePos_.y,
      appWidth: this.appSize_.x,
      appHeight: this.appSize_.y,
      isDragging: $(".ui-draggable-dragging").length > 0
    });
  } else {
    this.crosshairOverlay_.destroy();
  }
};

VisualizationOverlay.prototype.create_ = function () {
  this.ownElement_ = document.createElementNS(SVG_NS, 'g');

  this.mouseMoveListener_ = this.onSvgMouseMove_.bind(this);
  document.addEventListener('mousemove', this.mouseMoveListener_);
};

VisualizationOverlay.prototype.moveToParent_ = function (newParent) {
  if (this.ownElement_.parentNode) {
    this.ownElement_.parentNode.removeChild(this.ownElement_);
  }
  if (newParent) {
    newParent.appendChild(this.ownElement_);

    // Make a reusable mouse position point if we haven't yet.
    if (!this.mousePos_) {
      this.mousePos_ = newParent.createSVGPoint();
      // Default cursor position should be offscreen until we get a mouse event.
      this.mousePos_.x = -1;
      this.mousePos_.y = -1;
    }

    // Update the app size to match the parent
    this.appSize_ = newParent.createSVGPoint();
    this.appSize_.x = parseInt(newParent.getAttribute('width'));
    this.appSize_.y = parseInt(newParent.getAttribute('height'));
  }
};

VisualizationOverlay.prototype.onSvgMouseMove_ = function (event) {
  if (!(this.ownElement_ && this.mousePos_ && this.screenSpaceToAppSpaceTransform_)) {
    return;
  }

  this.mousePos_.x = event.clientX;
  this.mousePos_.y = event.clientY;
  var draggingElement = $(".ui-draggable-dragging");
  if (draggingElement.length) {
    // If we're dragging an element, use our util method to determine the right
    // mouse pos (top left of the dragged element)
    var point = gridUtils.scaledDropPoint(draggingElement);
    this.mousePos_.x = point.left;
    this.mousePos_.y = point.top;
  } else {
    this.mousePos_ = this.mousePos_.matrixTransform(this.screenSpaceToAppSpaceTransform_);
  }

  if (this.ownElement_.parentNode) {
    this.render(this.ownElement_.parentNode, this.props_);
  }
};

VisualizationOverlay.prototype.shouldShowCrosshair_ = function () {
  return !this.props_.isApplabRunning && this.isMouseInVisualization_();
};

VisualizationOverlay.prototype.isMouseInVisualization_ = function () {
  return this.mousePos_.x >= 0 && this.mousePos_.x <= this.appSize_.x && this.mousePos_.y >= 0 && this.mousePos_.y <= this.appSize_.y;
};

VisualizationOverlay.prototype.recalculateTransformAtScale_ = function (scale) {
  var svg = this.ownElement_.parentNode;
  if (!svg) {
    return;
  }

  var svgRect = svg.getBoundingClientRect();
  var newTransform = svg.createSVGMatrix().scale(1 / scale).translate(-svgRect.left, -svgRect.top);
  this.screenSpaceToAppSpaceTransform_ = newTransform;
};

},{"../constants":"/home/ubuntu/staging/apps/build/js/constants.js","./CrosshairOverlay":"/home/ubuntu/staging/apps/build/js/applab/CrosshairOverlay.js","./gridUtils":"/home/ubuntu/staging/apps/build/js/applab/gridUtils.js"}],"/home/ubuntu/staging/apps/build/js/applab/gridUtils.js":[function(require,module,exports){
/**
 * A couple of utility functions for dealing with our design mode grid.
 */

'use strict';

var GRID_SIZE = 5;

/**
 * @typedef TopLeft
 * @type Object
 * @property {number} top
 * @property {number} left
 */

/**
 * Given an element being dragged, determine the scaled x/y position of the
 * top left corned, scaled to our visualization.
 * @param {jQueryObject} draggedElement
 * @return {TopLeft}
 */
module.exports.scaledDropPoint = function (draggedElement) {
  var div = document.getElementById('designModeViz');

  var boundingRect = div.getBoundingClientRect();
  var draggedOffset = draggedElement.offset();

  var xScale = boundingRect.width / div.offsetWidth;
  var yScale = boundingRect.height / div.offsetHeight;

  var left = (draggedOffset.left - boundingRect.left) / xScale;
  var top = (draggedOffset.top - boundingRect.top) / yScale;

  // snap top-left corner to nearest location in the grid
  left = this.snapToGridSize(left);
  top = this.snapToGridSize(top);

  return {
    left: left,
    top: top
  };
};

/**
 * Given a coordinate on either axis and a grid size, returns a coordinate
 * near the given coordinate that snaps to the given grid size.
 * @param {number} coordinate
 * @returns {number}
 */
module.exports.snapToGridSize = function (coordinate) {
  var halfGrid = GRID_SIZE / 2;
  return coordinate - ((coordinate + halfGrid) % GRID_SIZE - halfGrid);
};

},{}],"/home/ubuntu/staging/apps/build/js/applab/EventSandboxer.js":[function(require,module,exports){
/** @file Helper that generates sanitized, standardized event objects. */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var keyEvent = require('./keyEvent');

/**
 * Helper that generates sanitized, standardized event objects.
 *
 * Primary responsibilities include:
 * - Allowing only a subset of properties through to sandboxed events
 * - Replacing DOM references with string element IDs for security
 * - Transforming screen coordinates to the app coordinate system
 * - Polyfill movementX and movementY properties on mouse events
 *
 * @constructor
 * @example
 *   var sandboxer = new EventSandboxer();
 *   function onClick(e) {
 *     studentClickHandler(sandboxer.sandboxEvent(e));
 *   }
 */
var EventSandboxer = module.exports = function () {
  /** @private {number} */
  this.xScale_ = 1;

  /** @private {number} */
  this.yScale_ = 1;

  /** @private {number} */
  this.xOffset_ = 0;

  /** @private {number} */
  this.yOffset_ = 0;

  /**
   * @private {Object} map from element id to the last mousemove event which
   * occurred on that element. This is used to simulate movementX and movementY
   * for browsers which do not support it natively.
   */
  this.lastMouseMoveEventMap_ = {};
};

/**
 * Updates the sandboxer's internal transform according to the position and
 * scale of the provided div (which should be the app/play space) so that it
 * can accurately transform mouse coordinates into app space.
 * @param {HTMLElement} element
 */
EventSandboxer.prototype.setTransformFromElement = function (element) {
  // Capture div scale
  this.xScale_ = element.getBoundingClientRect().width / element.offsetWidth;
  this.yScale_ = element.getBoundingClientRect().height / element.offsetHeight;

  // Capture div offset, and all of its parent offsets, together
  var xOffset = 0;
  var yOffset = 0;
  while (element) {
    xOffset += element.offsetLeft;
    yOffset += element.offsetTop;
    element = element.offsetParent;
  }
  this.xOffset_ = xOffset;
  this.yOffset_ = yOffset;
};

/**
 * Given a browser event, generates a new event-like object suitable for use
 * in student code.
 * @param {!Event} event - the original browser event
 * @returns {Object} new event-like object
 * @throws {TypeError} if event is null or not an object
 */
EventSandboxer.prototype.sandboxEvent = function (event) {
  if (event === null || typeof event !== 'object') {
    throw new TypeError('Failed to sandbox event: Expected an event object, but got ' + event);
  }

  var newEvent = {};
  // Pass these properties through to applabEvent:
  ['altKey', 'button', 'charCode', 'ctrlKey', 'keyCode', 'keyIdentifier', 'keyLocation', 'location', 'metaKey', 'offsetX', 'offsetY', 'repeat', 'shiftKey', 'type', 'which'].forEach(function (prop) {
    if (typeof event[prop] !== 'undefined') {
      newEvent[prop] = event[prop];
    }
  });
  // Convert x coordinates and then pass through to applabEvent:
  ['clientX', 'pageX', 'x'].forEach(function (prop) {
    if (typeof event[prop] !== 'undefined') {
      newEvent[prop] = (event[prop] - this.xOffset_) / this.xScale_;
    }
  }, this);
  // Convert y coordinates and then pass through to applabEvent:
  ['clientY', 'pageY', 'y'].forEach(function (prop) {
    if (typeof event[prop] !== 'undefined') {
      newEvent[prop] = (event[prop] - this.yOffset_) / this.yScale_;
    }
  }, this);
  // Set movementX and movementY, computing it from clientX and clientY if necessary.
  // The element must have an element id for this to work.
  if (typeof event.movementX !== 'undefined' && typeof event.movementY !== 'undefined') {
    // The browser supports movementX and movementY natively.
    newEvent.movementX = event.movementX;
    newEvent.movementY = event.movementY;
  } else if (event.type === 'mousemove') {
    var currentTargetId = event.currentTarget && event.currentTarget.id;
    var lastEvent = this.lastMouseMoveEventMap_[currentTargetId];
    if (currentTargetId && lastEvent) {
      // Compute movementX and movementY from clientX and clientY.
      newEvent.movementX = event.clientX - lastEvent.clientX;
      newEvent.movementY = event.clientY - lastEvent.clientY;
    } else {
      // There has been no mousemove event on this element since the most recent
      // mouseout event, or this element does not have an element id.
      newEvent.movementX = 0;
      newEvent.movementY = 0;
    }
    if (currentTargetId) {
      this.lastMouseMoveEventMap_[currentTargetId] = event;
    }
  }
  // Replace DOM elements with IDs and then add them to applabEvent:
  ['fromElement', 'srcElement', 'currentTarget', 'relatedTarget', 'target', 'toElement'].forEach(function (prop) {
    if (event[prop]) {
      newEvent[prop + "Id"] = event[prop].id;
    }
  });

  // Attempt to polyfill DOM element ID properties
  // Of our six DOM properties, only three are standard.
  var fillProperty = function fillProperty(to, from) {
    if (newEvent[from] !== undefined && newEvent[to] === undefined) {
      newEvent[to] = newEvent[from];
    }
  };

  // srcElement is an alias of target
  // https://developer.mozilla.org/en-US/docs/Web/API/Event/srcElement
  fillProperty('srcElementId', 'targetId');

  // fromElement and toElement can be filled from target and relatedTarget,
  // but the mapping depends on what type of event it is.
  // fromElement: https://msdn.microsoft.com/en-us/library/ms533773(v=vs.85).aspx
  // toElement: https://msdn.microsoft.com/en-us/library/ms534684(v=vs.85).aspx
  // mapping: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/relatedTarget
  if (['focusin', 'mouseenter', 'mouseover', 'dragenter'].indexOf(event.type) !== -1) {
    fillProperty('toElementId', 'targetId');
    fillProperty('fromElementId', 'relatedTargetId');
  } else if (['focusout', 'mouseleave', 'mouseout', 'dragexit'].indexOf(event.type) !== -1) {
    fillProperty('toElementId', 'relatedTargetId');
    fillProperty('fromElementId', 'targetId');
  }

  // Attempt to populate key property (not yet supported in Chrome/Safari):
  //
  // keyup/down has no charCode and can be translated with the keyEvent[] map
  // keypress can use charCode
  //
  var keyProp = event.charCode ? String.fromCharCode(event.charCode) : keyEvent[event.keyCode];
  if (typeof keyProp !== 'undefined') {
    newEvent.key = keyProp;
  }

  return newEvent;
};

/**
 * Remove an element from the mouse move event map, given an event on that
 * element (typically mouseout)
 * @param {Event} event
 */
EventSandboxer.prototype.clearLastMouseMoveEvent = function (event) {
  var elementId = event.currentTarget && event.currentTarget.id;
  if (elementId && typeof this.lastMouseMoveEventMap_[elementId] !== 'undefined') {
    delete this.lastMouseMoveEventMap_[elementId];
  }
};

},{"./keyEvent":"/home/ubuntu/staging/apps/build/js/applab/keyEvent.js"}],"/home/ubuntu/staging/apps/build/js/applab/keyEvent.js":[function(require,module,exports){
// Table provided by https://www.jabcreations.com/blog/polyfill-for-event.key

'use strict';

module.exports = {
  '65': 'a',
  '66': 'b',
  '67': 'c',
  '68': 'd',
  '69': 'e',
  '70': 'f',
  '71': 'g',
  '72': 'h',
  '73': 'i',
  '74': 'j',
  '75': 'k',
  '76': 'l',
  '77': 'm',
  '78': 'n',
  '79': 'o',
  '80': 'p',
  '81': 'q',
  '82': 'r',
  '83': 's',
  '84': 't',
  '85': 'u',
  '86': 'v',
  '87': 'w',
  '88': 'x',
  '89': 'y',
  '90': 'z',
  '8': 'Backspace',
  '9': 'Tab',
  '13': 'Enter',
  '16': 'Shift',
  '17': 'Control',
  '18': 'Alt',
  '20': 'CapsLock',
  '27': 'Esc',
  '32': ' ',
  '33': 'PageUp',
  '34': 'PageDown',
  '35': 'End',
  '36': 'Home',
  '37': 'Left',
  '38': 'Up',
  '39': 'Right',
  '40': 'Down',
  '45': 'Insert',
  '46': 'Del',
  '48': '0',
  '49': '1',
  '50': '2',
  '51': '3',
  '52': '4',
  '53': '5',
  '54': '6',
  '55': '7',
  '56': '8',
  '57': '9',
  '91': 'OS',
  '92': 'OS',
  '93': 'Menu',
  '96': '0',
  '97': '1',
  '98': '2',
  '99': '3',
  '100': '4',
  '101': '5',
  '102': '6',
  '103': '7',
  '104': '8',
  '105': '9',
  '106': '*',
  '107': '+',
  '109': '-',
  '110': '.',
  '111': '/',
  '112': 'F1',
  '113': 'F2',
  '114': 'F3',
  '115': 'F4',
  '116': 'F5',
  '117': 'F6',
  '118': 'F7',
  '119': 'F8',
  '120': 'F9',
  '121': 'F10',
  '122': 'F11',
  '123': 'F12',
  '144': 'NumLock',
  '145': 'ScrollLock',
  '186': ':',
  '187': '=',
  '188': ',',
  '189': '-',
  '190': '.',
  '191': '/',
  '192': '`',
  '219': '[',
  '220': '\\',
  '221': ']',
  '222': '\''
};

},{}],"/home/ubuntu/staging/apps/build/js/applab/DesignWorkspace.jsx":[function(require,module,exports){
'use strict';

var applabMsg = require('./locale');
var DesignModeBox = require('./DesignModeBox.jsx');
var DesignModeHeaders = require('./DesignModeHeaders.jsx');

module.exports = React.createClass({
  displayName: 'exports',

  propTypes: {
    handleManageAssets: React.PropTypes.func.isRequired,
    handleDragStart: React.PropTypes.func,
    element: React.PropTypes.instanceOf(HTMLElement),
    elementIdList: React.PropTypes.arrayOf(React.PropTypes.string).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onChangeElement: React.PropTypes.func.isRequired,
    onDepthChange: React.PropTypes.func.isRequired,
    onDelete: React.PropTypes.func.isRequired,
    onInsertEvent: React.PropTypes.func.isRequired,
    isDimmed: React.PropTypes.bool.isRequired
  },

  getInitialState: function getInitialState() {
    return {
      isToolboxVisible: true
    };
  },

  onToggleToolbox: function onToggleToolbox() {
    this.setState({
      isToolboxVisible: !this.state.isToolboxVisible
    });
  },

  render: function render() {
    return React.createElement(
      'div',
      { id: 'designWorkspaceWrapper' },
      React.createElement(DesignModeHeaders, {
        handleManageAssets: this.props.handleManageAssets,
        onToggleToolbox: this.onToggleToolbox,
        isToolboxVisible: this.state.isToolboxVisible }),
      React.createElement(DesignModeBox, {
        handleDragStart: this.props.handleDragStart,
        element: this.props.element,
        elementIdList: this.props.elementIdList,
        handleChange: this.props.handleChange,
        onChangeElement: this.props.onChangeElement,
        onDepthChange: this.props.onDepthChange,
        onDelete: this.props.onDelete,
        onInsertEvent: this.props.onInsertEvent,
        isToolboxVisible: this.state.isToolboxVisible,
        isDimmed: this.props.isDimmed })
    );
  }
});

},{"./DesignModeBox.jsx":"/home/ubuntu/staging/apps/build/js/applab/DesignModeBox.jsx","./DesignModeHeaders.jsx":"/home/ubuntu/staging/apps/build/js/applab/DesignModeHeaders.jsx","./locale":"/home/ubuntu/staging/apps/build/js/applab/locale.js"}],"/home/ubuntu/staging/apps/build/js/applab/DesignModeHeaders.jsx":[function(require,module,exports){
'use strict';

var applabMsg = require('./locale');
var msg = require('../locale');

module.exports = React.createClass({
  displayName: 'exports',

  propTypes: {
    handleManageAssets: React.PropTypes.func.isRequired,
    onToggleToolbox: React.PropTypes.func.isRequired,
    isToolboxVisible: React.PropTypes.bool.isRequired
  },

  handleManageAssets: function handleManageAssets() {
    this.props.handleManageAssets();
  },

  onToggleToolbox: function onToggleToolbox() {
    this.props.onToggleToolbox();
  },

  render: function render() {
    var styles = {
      toolboxHeader: {
        display: this.props.isToolboxVisible ? 'block' : 'none',
        width: 270,
        borderRight: '1px solid gray',
        float: 'left'
      },
      showToolboxHeader: {
        float: 'left',
        display: this.props.isToolboxVisible ? 'none' : 'block',
        paddingLeft: 10
      },
      iconContainer: {
        float: 'right',
        marginRight: 10,
        marginLeft: 10,
        height: '100%'
      },
      assetsIcon: {
        fontSize: 18,
        verticalAlign: 'middle'
      }
    };

    var manageAssetsIcon = React.createElement(
      'span',
      { style: styles.iconContainer },
      React.createElement('i', { className: 'fa fa-cog workspace-header-clickable',
        id: 'manage-assets-button',
        style: styles.assetsIcon,
        onClick: this.handleManageAssets,
        title: applabMsg.manageAssets() })
    );

    return React.createElement(
      'div',
      { id: 'design-headers' },
      React.createElement(
        'div',
        { id: 'design-toolbox-header', className: 'workspace-header', style: styles.toolboxHeader },
        manageAssetsIcon,
        React.createElement(
          'span',
          null,
          applabMsg.designToolboxHeader()
        ),
        React.createElement(
          'span',
          { className: 'workspace-header-clickable', onClick: this.onToggleToolbox },
          ' ',
          msg.hideToolbox()
        )
      ),
      React.createElement(
        'div',
        { className: 'workspace-header', onClick: this.onToggleToolbox,
          style: styles.showToolboxHeader },
        React.createElement(
          'span',
          { className: 'workspace-header-clickable' },
          msg.showToolbox()
        ),
        manageAssetsIcon
      ),
      React.createElement(
        'div',
        { id: 'design-workspace-header', className: 'workspace-header' },
        React.createElement(
          'span',
          null,
          applabMsg.designWorkspaceHeader()
        )
      )
    );
  }
});

},{"../locale":"/home/ubuntu/staging/apps/build/js/locale.js","./locale":"/home/ubuntu/staging/apps/build/js/applab/locale.js"}],"/home/ubuntu/staging/apps/build/js/applab/DesignModeBox.jsx":[function(require,module,exports){
/* global $ */

'use strict';

var DesignToolbox = require('./DesignToolbox.jsx');
var DesignProperties = require('./designProperties.jsx');

module.exports = React.createClass({
  displayName: 'exports',

  propTypes: {
    handleDragStart: React.PropTypes.func,
    element: React.PropTypes.instanceOf(HTMLElement),
    elementIdList: React.PropTypes.arrayOf(React.PropTypes.string).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onChangeElement: React.PropTypes.func.isRequired,
    onDepthChange: React.PropTypes.func.isRequired,
    onDelete: React.PropTypes.func.isRequired,
    onInsertEvent: React.PropTypes.func.isRequired,
    isToolboxVisible: React.PropTypes.bool.isRequired,
    isDimmed: React.PropTypes.bool.isRequired
  },

  render: function render() {
    var styles = {
      container: {
        position: 'absolute',
        width: '100%',
        top: 30,
        bottom: 0,
        backgroundColor: 'white',
        boxSizing: 'border-box',
        borderLeft: '1px solid gray',
        borderRight: '1px solid gray',
        borderBottom: '1px solid gray'
      },
      designProperties: {
        position: 'absolute',
        top: 0,
        bottom: 0,
        left: this.props.isToolboxVisible ? 270 : 0,
        right: 0,
        boxSizing: 'border-box',
        padding: 10
      },
      transparent: {
        width: '100%',
        height: '100%',
        backgroundColor: 'rgba(0, 0, 0, 0.1)',
        position: 'relative',
        zIndex: 1
      }
    };

    var transparencyLayer;
    // Slightly gray everything while running
    if (this.props.isDimmed) {
      transparencyLayer = React.createElement('div', { id: "design-mode-dimmed", style: styles.transparent });
    }

    return React.createElement(
      'div',
      { id: 'design-mode-container', style: styles.container },
      React.createElement(DesignToolbox, {
        handleDragStart: this.props.handleDragStart,
        isToolboxVisible: this.props.isToolboxVisible }),
      React.createElement(
        'div',
        { id: 'design-properties', style: styles.designProperties },
        React.createElement(DesignProperties, {
          element: this.props.element,
          elementIdList: this.props.elementIdList,
          handleChange: this.props.handleChange,
          onChangeElement: this.props.onChangeElement,
          onDepthChange: this.props.onDepthChange,
          onDelete: this.props.onDelete,
          onInsertEvent: this.props.onInsertEvent })
      ),
      transparencyLayer
    );
  }
});

},{"./DesignToolbox.jsx":"/home/ubuntu/staging/apps/build/js/applab/DesignToolbox.jsx","./designProperties.jsx":"/home/ubuntu/staging/apps/build/js/applab/designProperties.jsx"}],"/home/ubuntu/staging/apps/build/js/applab/designProperties.jsx":[function(require,module,exports){
/* global $*/

'use strict';

var applabMsg = require('./locale');
var elementLibrary = require('./designElements/library');
var elementUtils = require('./designElements/elementUtils');

var DeleteElementButton = require('./designElements/DeleteElementButton.jsx');
var ElementSelect = require('./ElementSelect.jsx');

var nextKey = 0;

var DesignProperties = React.createClass({
  displayName: 'DesignProperties',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement),
    elementIdList: React.PropTypes.arrayOf(React.PropTypes.string).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onChangeElement: React.PropTypes.func.isRequired,
    onDepthChange: React.PropTypes.func.isRequired,
    onDelete: React.PropTypes.func.isRequired,
    onInsertEvent: React.PropTypes.func.isRequired
  },

  getInitialState: function getInitialState() {
    return { selectedTab: TabType.PROPERTIES };
  },

  /**
   * Handle a click on a tab, such as 'properties' or 'events'.
   * @param newTab {TabType} Tab to switch to.
   */
  handleTabClick: function handleTabClick(newTab) {
    this.setState({ selectedTab: newTab });
  },

  render: function render() {
    if (!this.props.element || !this.props.element.parentNode) {
      return React.createElement(
        'p',
        null,
        applabMsg.designWorkspaceDescription()
      );
    }

    // We want to have a unique key that doesn't change when the element id
    // changes, and has no risk of collisions between elements. We add this to
    // the backing element using jquery.data(), which keeps its own per-session
    // store of data, without affecting the serialiazation
    var key = $(this.props.element).data('key');
    if (!key) {
      key = nextKey++;
      $(this.props.element).data('key', key);
    }

    var elementType = elementLibrary.getElementType(this.props.element);
    var propertyClass = elementLibrary.getElementPropertyTab(elementType);

    var propertiesElement = React.createElement(propertyClass, {
      element: this.props.element,
      handleChange: this.props.handleChange,
      onDepthChange: this.props.onDepthChange
    });

    var eventClass = elementLibrary.getElementEventTab(elementType);
    var eventsElement = React.createElement(eventClass, {
      element: this.props.element,
      handleChange: this.props.handleChange,
      onInsertEvent: this.props.onInsertEvent
    });

    var deleteButton;
    var element = this.props.element;
    // First screen is not deletable
    var isOnlyScreen = elementType === elementLibrary.ElementType.SCREEN && elementUtils.getScreens().length === 1;
    if (!isOnlyScreen) {
      deleteButton = React.createElement(DeleteElementButton, {
        shouldConfirm: elementType === elementLibrary.ElementType.SCREEN,
        handleDelete: this.props.onDelete });
    }

    var tabHeight = 35;
    var borderColor = '#c6cacd';
    var bgColor = '#e7e8ea';

    // Diagram of how tabs outlines are drawn. 'x' represents solid border.
    // '-' and '|' represent no border.
    //
    // x----------------------------------------------------------------------|
    // x designWorkspaceTabs                                                  |
    // x                                                                      |
    // x  |xxxxxxxxxxxxxx  |xxxxxxxxxxxxxx  |xxxxxxxxxxxxxx  |-------------|  |
    // x  | inactiveTab x  |  activeTab  x  | inactiveTab x  |  emptyTab   |  |
    // x  |xxxxxxxxxxxxxx  |-------------x  |xxxxxxxxxxxxxx  |xxxxxxxxxxxxx|  |
    // x                                                                      |
    // x----------------------------------------------------------------------|
    //
    // x----------------------------------------------------------------------x
    // x designWorkspaceBody                                                  x
    // x                                                                      x
    // xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

    var baseTabStyle = {
      borderColor: borderColor,
      borderStyle: 'solid',
      boxSizing: 'border-box',
      height: tabHeight,
      padding: '0 10px'
    };

    /** @constant {Object} */
    var styles = {
      activeTab: $.extend({}, baseTabStyle, {
        backgroundColor: bgColor,
        borderTopWidth: 1,
        borderRightWidth: 1,
        borderBottomWidth: 0,
        borderLeftWidth: 0,
        float: 'left'
      }),
      inactiveTab: $.extend({}, baseTabStyle, {
        borderTopWidth: 1,
        borderRightWidth: 1,
        borderBottomWidth: 1,
        borderLeftWidth: 0,
        float: 'left'
      }),
      // This tab should fill the remaining horizontal space.
      emptyTab: $.extend({}, baseTabStyle, {
        borderTopWidth: 0,
        borderRightWidth: 0,
        borderBottomWidth: 1,
        borderLeftWidth: 0,
        width: '100%'
      }),
      workspaceDescription: {
        height: 28,
        overflow: 'hidden'
      },
      workspaceDescriptionText: {
        overflow: 'hidden',
        textOverflow: 'ellipsis',
        whiteSpace: 'nowrap'
      },
      workspaceTabs: {
        borderColor: borderColor,
        borderStyle: 'solid',
        borderTopWidth: 0,
        borderRightWidth: 0,
        borderBottomWidth: 0,
        borderLeftWidth: 1
      },
      tabLabel: {
        lineHeight: tabHeight + 'px',
        WebkitUserSelect: 'none',
        MozUserSelect: 'none',
        msUserSelect: 'none',
        userSelect: 'none'
      },
      workspaceBody: {
        height: 'calc(100% - 83px)',
        padding: '10px 10px 10px 0',
        borderColor: borderColor,
        borderStyle: 'solid',
        borderTopWidth: 0,
        borderRightWidth: 1,
        borderBottomWidth: 1,
        borderLeftWidth: 1,
        backgroundColor: bgColor
      },
      activeBody: {
        height: '100%',
        overflowY: 'scroll'
      },
      inactiveBody: {
        display: 'none',
        height: '100%',
        overflowY: 'scroll'
      }
    };

    return React.createElement(
      'div',
      { style: { height: '100%' } },
      React.createElement(
        'div',
        { id: 'designDescription', style: styles.workspaceDescription },
        React.createElement(
          'p',
          { style: styles.workspaceDescriptionText, title: applabMsg.designWorkspaceDescription() },
          applabMsg.designWorkspaceDescription()
        )
      ),
      React.createElement(
        'div',
        { id: 'designWorkspaceTabs', style: styles.workspaceTabs },
        React.createElement(
          'div',
          { id: 'propertiesTab',
            style: this.state.selectedTab === TabType.PROPERTIES ? styles.activeTab : styles.inactiveTab,
            className: 'hover-pointer',
            onClick: this.handleTabClick.bind(this, TabType.PROPERTIES) },
          React.createElement(
            'span',
            { style: styles.tabLabel },
            'PROPERTIES'
          )
        ),
        React.createElement(
          'div',
          { id: 'eventsTab',
            style: this.state.selectedTab === TabType.EVENTS ? styles.activeTab : styles.inactiveTab,
            className: 'hover-pointer',
            onClick: this.handleTabClick.bind(this, TabType.EVENTS) },
          React.createElement(
            'span',
            { style: styles.tabLabel },
            'EVENTS'
          )
        ),
        React.createElement(
          'div',
          { id: 'emptyTab', style: styles.emptyTab },
          React.createElement(ElementSelect, { onChangeElement: this.props.onChangeElement,
            elementIdList: this.props.elementIdList,
            selected: this.props.element })
        )
      ),
      React.createElement(
        'div',
        { id: 'designWorkspaceBody', style: styles.workspaceBody },
        React.createElement(
          'div',
          { id: 'propertiesBody',
            style: this.state.selectedTab === TabType.PROPERTIES ? styles.activeBody : styles.inactiveBody },
          React.createElement(
            'div',
            { key: key },
            propertiesElement,
            deleteButton
          )
        ),
        React.createElement(
          'div',
          { id: 'eventsBody',
            style: this.state.selectedTab === TabType.EVENTS ? styles.activeBody : styles.inactiveBody },
          eventsElement
        )
      )
    );
  }
});

/**
 * @readonly
 * @enum {string}
 */
var TabType = {
  PROPERTIES: 'properties',
  EVENTS: 'events'
};
DesignProperties.TabType = TabType;
module.exports = DesignProperties;
/* We provide a key to the outer div so that element foo and element bar are
  seen to be two completely different tables. Otherwise the defaultValues
  in inputs don't update correctly. */

},{"./ElementSelect.jsx":"/home/ubuntu/staging/apps/build/js/applab/ElementSelect.jsx","./designElements/DeleteElementButton.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/DeleteElementButton.jsx","./designElements/elementUtils":"/home/ubuntu/staging/apps/build/js/applab/designElements/elementUtils.js","./designElements/library":"/home/ubuntu/staging/apps/build/js/applab/designElements/library.js","./locale":"/home/ubuntu/staging/apps/build/js/applab/locale.js"}],"/home/ubuntu/staging/apps/build/js/applab/designElements/DeleteElementButton.jsx":[function(require,module,exports){
/* global $ */
'use strict';

var rowStyle = require('./rowStyle');

/**
 * A delete button that will also ask for confirmation when shouldConfirm is
 * true.
 */
var DeleteElementButton = React.createClass({
  displayName: 'DeleteElementButton',

  propTypes: {
    shouldConfirm: React.PropTypes.bool.isRequired,
    handleDelete: React.PropTypes.func.isRequired
  },

  getInitialState: function getInitialState() {
    return {
      confirming: false
    };
  },

  handleDeleteInternal: function handleDeleteInternal(event) {
    if (this.props.shouldConfirm) {
      this.setState({ confirming: true });
    } else {
      this.finishDelete();
    }
  },

  finishDelete: function finishDelete() {
    this.props.handleDelete();
  },

  abortDelete: function abortDelete(event) {
    this.setState({ confirming: false });
  },

  render: function render() {
    var buttonStyle = {
      paddingTop: '5px',
      paddingBottom: '5px',
      fontSize: '14px'
    };

    var redButtonStyle = $.extend({}, buttonStyle, {
      backgroundColor: '#c00', // $red
      color: 'white'
    });

    var confirm;
    if (this.state.confirming) {
      return React.createElement(
        'div',
        { style: { marginLeft: 20 } },
        'Delete?',
        React.createElement(
          'button',
          {
            style: buttonStyle,
            onClick: this.abortDelete },
          'No'
        ),
        React.createElement(
          'button',
          {
            style: redButtonStyle,
            onClick: this.finishDelete },
          'Yes'
        )
      );
    }
    return React.createElement(
      'div',
      { style: { marginLeft: 15 } },
      React.createElement(
        'button',
        {
          style: redButtonStyle,
          onClick: this.handleDeleteInternal },
        'Delete'
      )
    );
  }
});

module.exports = DeleteElementButton;

},{"./rowStyle":"/home/ubuntu/staging/apps/build/js/applab/designElements/rowStyle.js"}],"/home/ubuntu/staging/apps/build/js/applab/ElementSelect.jsx":[function(require,module,exports){
'use strict';

var elementUtils = require('./designElements/elementUtils.js');

module.exports = React.createClass({
  displayName: 'exports',

  propTypes: {
    onChangeElement: React.PropTypes.func.isRequired,
    elementIdList: React.PropTypes.arrayOf(React.PropTypes.string).isRequired,
    selected: React.PropTypes.instanceOf(HTMLElement)
  },

  handleChange: function handleChange(e) {
    var element = elementUtils.getPrefixedElementById(e.target.value);
    this.props.onChangeElement(element, null);
  },

  render: function render() {
    var selected = elementUtils.getId(this.props.selected);

    return React.createElement(
      'div',
      { style: { float: 'right', marginRight: '-10px' } },
      React.createElement(
        'select',
        { value: selected, onChange: this.handleChange, style: { width: '150px' } },
        this.props.elementIdList.map(function (id) {
          return React.createElement(
            'option',
            { key: id },
            id
          );
        })
      )
    );
  }
});

},{"./designElements/elementUtils.js":"/home/ubuntu/staging/apps/build/js/applab/designElements/elementUtils.js"}],"/home/ubuntu/staging/apps/build/js/applab/DesignToolbox.jsx":[function(require,module,exports){
/* global $ */

'use strict';

var DesignToolboxElement = require('./DesignToolboxElement.jsx');
var applabMsg = require('./locale');

var IMAGE_BASE_URL = '/blockly/media/applab/design_toolbox/';

module.exports = React.createClass({
    displayName: 'exports',

    propTypes: {
        handleDragStart: React.PropTypes.func.isRequired,
        isToolboxVisible: React.PropTypes.bool.isRequired
    },

    render: function render() {
        var toolboxStyle = {
            display: this.props.isToolboxVisible ? 'block' : 'none',
            position: 'absolute',
            top: 0,
            bottom: 0,
            width: 270,
            boxSizing: 'border-box',
            borderRight: '1px solid gray',
            padding: 10
        };

        return React.createElement(
            'div',
            { id: 'design-toolbox', style: toolboxStyle },
            React.createElement(
                'p',
                null,
                applabMsg.designToolboxDescription()
            ),
            React.createElement(DesignToolboxElement, {
                imageUrl: IMAGE_BASE_URL + 'button.png',
                desc: 'Button',
                elementType: 'BUTTON',
                handleDragStart: this.props.handleDragStart }),
            React.createElement(DesignToolboxElement, {
                imageUrl: IMAGE_BASE_URL + 'input.png',
                desc: 'Text Input',
                elementType: 'TEXT_INPUT',
                handleDragStart: this.props.handleDragStart }),
            React.createElement(DesignToolboxElement, {
                imageUrl: IMAGE_BASE_URL + 'label.png',
                desc: 'Label',
                elementType: 'LABEL',
                handleDragStart: this.props.handleDragStart }),
            React.createElement(DesignToolboxElement, {
                imageUrl: IMAGE_BASE_URL + 'dropdown.png',
                desc: 'Dropdown',
                elementType: 'DROPDOWN',
                handleDragStart: this.props.handleDragStart }),
            React.createElement(DesignToolboxElement, {
                imageUrl: IMAGE_BASE_URL + 'radio.png',
                desc: 'Radio Button',
                elementType: 'RADIO_BUTTON',
                handleDragStart: this.props.handleDragStart }),
            React.createElement(DesignToolboxElement, {
                imageUrl: IMAGE_BASE_URL + 'checkbox.png',
                desc: 'Checkbox',
                elementType: 'CHECKBOX',
                handleDragStart: this.props.handleDragStart }),
            React.createElement(DesignToolboxElement, {
                imageUrl: IMAGE_BASE_URL + 'image.png',
                desc: 'Image',
                elementType: 'IMAGE',
                handleDragStart: this.props.handleDragStart }),
            React.createElement(DesignToolboxElement, {
                imageUrl: IMAGE_BASE_URL + 'canvas.png',
                desc: 'Canvas',
                elementType: 'CANVAS',
                handleDragStart: this.props.handleDragStart }),
            React.createElement(DesignToolboxElement, {
                imageUrl: IMAGE_BASE_URL + 'screen.png',
                desc: 'Screen',
                elementType: 'SCREEN',
                handleDragStart: this.props.handleDragStart }),
            React.createElement(DesignToolboxElement, {
                imageUrl: IMAGE_BASE_URL + 'textarea.png',
                desc: 'Text Area',
                elementType: 'TEXT_AREA',
                handleDragStart: this.props.handleDragStart }),
            React.createElement(DesignToolboxElement, {
                imageUrl: IMAGE_BASE_URL + 'chart.png',
                desc: 'Chart',
                elementType: 'CHART',
                handleDragStart: this.props.handleDragStart }),
            React.createElement(DesignToolboxElement, {
                imageUrl: IMAGE_BASE_URL + 'slider.png',
                desc: 'Slider',
                elementType: 'SLIDER',
                handleDragStart: this.props.handleDragStart })
        );
    }
});

},{"./DesignToolboxElement.jsx":"/home/ubuntu/staging/apps/build/js/applab/DesignToolboxElement.jsx","./locale":"/home/ubuntu/staging/apps/build/js/applab/locale.js"}],"/home/ubuntu/staging/apps/build/js/applab/DesignToolboxElement.jsx":[function(require,module,exports){
/* global $ */

'use strict';

var library = require('./designElements/library');

module.exports = React.createClass({
  displayName: 'exports',

  propTypes: {
    imageUrl: React.PropTypes.string.isRequired,
    desc: React.PropTypes.string.isRequired,
    elementType: React.PropTypes.string.isRequired,
    handleDragStart: React.PropTypes.func.isRequired
  },

  render: function render() {
    var styles = {
      outerContainer: {
        // The icon images are 120px wide and depend on this width for scaling.
        width: 120,
        display: 'inline-block',
        textAlign: 'center',
        paddingBottom: 15
      },
      innerContainer: {
        textAlign: 'center'
      },
      image: {
        marginBottom: 5
      }
    };

    return React.createElement(
      'div',
      { style: styles.outerContainer },
      React.createElement(
        'div',
        { style: styles.innerContainer,
          'data-element-type': this.props.elementType,
          className: 'new-design-element' },
        React.createElement('img', { src: this.props.imageUrl,
          className: 'design-element-image',
          style: styles.image }),
        React.createElement(
          'div',
          null,
          this.props.desc
        )
      )
    );
  },

  componentDidMount: function componentDidMount() {
    this.makeDraggable();
  },

  componentDidUpdate: function componentDidUpdate() {
    this.makeDraggable();
  },

  /**
   * Create a draggable item as we drag an item from the toolbox.
   */
  makeDraggable: function makeDraggable() {
    $(this.getDOMNode()).find('.new-design-element').draggable({
      // Create an item (without an id) for dragging that looks identical to the
      // element that will ultimately be dropped. Note, this item has no
      // containment, and doesn't snap to a grid as we drag (but does on drop)
      helper: function helper(event) {
        var elementType = this.getAttribute('data-element-type');
        if (elementType === library.ElementType.SCREEN) {
          return $(this).clone();
        }
        var element = library.createElement(elementType, 0, 0, true);
        element.style.position = 'static';

        var div = document.getElementById('designModeViz');
        var xScale = div.getBoundingClientRect().width / div.offsetWidth;
        var yScale = div.getBoundingClientRect().height / div.offsetHeight;

        var parent = $('<div/>').addClass('draggingParent');

        parent[0].style.transform = "scale(" + xScale + ", " + yScale + ")";
        parent[0].style.webkitTransform = "scale(" + xScale + ", " + yScale + ")";
        parent[0].style.backgroundColor = 'transparent';

        // Have the cursor be in the center of the dragged item.
        // element.width/height() returns 0 for canvas (probably because it
        // hasn't actually been renderd yet)
        var elementWidth = $(element).width() || parseInt(element.getAttribute('width'), 10);
        var elementHeight = $(element).height() || parseInt(element.getAttribute('height'), 10);
        // phantom/FF seem to not have event.offsetY, so go calculate it
        var offsetY = event.offsetY || event.pageY - $(event.target).offset().top;
        $(this).draggable('option', 'cursorAt', {
          left: elementWidth / 2,
          top: Math.min(offsetY, elementHeight)
        });

        return parent.append(element)[0];
      },
      containment: 'document',
      appendTo: '#codeApp',
      revert: 'invalid',
      // Make sure the dragged element appears in front of #belowVisualization,
      // which has z-index 1.
      zIndex: 2,
      start: this.props.handleDragStart
    });
  }
});

},{"./designElements/library":"/home/ubuntu/staging/apps/build/js/applab/designElements/library.js"}],"/home/ubuntu/staging/apps/build/js/applab/CrosshairOverlay.js":[function(require,module,exports){
/** @file Creates and controls a coordinates crosshair on the app visualization. */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var constants = require('../constants');
var SVG_NS = constants.SVG_NS;

var CROSSHAIR_MARGIN = 6;
var EDGE_MARGIN = 5;
var TEXT_RECT_WIDTH = 104;
var TEXT_RECT_HEIGHT = 21;
var TEXT_RECT_RADIUS = TEXT_RECT_HEIGHT / 3;
var TEXT_Y_OFFSET = -7;

/**
 * Creates and controls a coordinates crosshair on the app visualization.
 * @constructor
 */
var CrosshairOverlay = function CrosshairOverlay() {
  /** @private {SVGGElement} */
  this.ownElement_ = null;

  /** @private {Object} */
  this.props_ = {
    x: 0,
    y: 0,
    appWidth: 0,
    appHeight: 0,
    isDragging: false
  };
};
module.exports = CrosshairOverlay;

/**
 * @param {SVGElement} intoElement
 * @param {Object} nextProps
 * @param {number} nextProps.x
 * @param {number} nextProps.y
 * @param {number} nextProps.appWidth
 * @param {number} nextProps.appHeight
 */
CrosshairOverlay.prototype.render = function (intoElement, nextProps) {
  // Create element if necessary
  if (!this.ownElement_) {
    this.create_();
  }

  // Put element in correct parent
  if (this.ownElement_.parentNode !== intoElement) {
    this.moveToParent_(intoElement);
  }

  // Record any new/updated properties
  $.extend(this.props_, nextProps);

  var rectX = this.props_.x + CROSSHAIR_MARGIN;
  if (rectX + TEXT_RECT_WIDTH + EDGE_MARGIN > this.props_.appWidth) {
    // This response gives a smooth horizontal reposition when near the edge
    rectX -= rectX + TEXT_RECT_WIDTH + EDGE_MARGIN - this.props_.appWidth;
    // This response snaps the text to the other side when near the edge
    //rectX = this.props_.x - CROSSHAIR_MARGIN - TEXT_RECT_WIDTH;
  }

  var rectY = this.props_.y + CROSSHAIR_MARGIN;
  if (rectY + TEXT_RECT_HEIGHT + EDGE_MARGIN > this.props_.appHeight) {
    rectY = this.props_.y - CROSSHAIR_MARGIN - TEXT_RECT_HEIGHT;
  }

  // If we're dragging an element, instead put the text above and right of the
  // cross hair, while making sure it doesnt go past the top of the overlay
  if (this.props_.isDragging) {
    rectY = this.props_.y - CROSSHAIR_MARGIN - TEXT_RECT_HEIGHT;
    rectY = Math.max(0, rectY);
  }

  var textX = rectX + TEXT_RECT_WIDTH / 2;
  var textY = rectY + TEXT_RECT_HEIGHT + TEXT_Y_OFFSET;

  this.vGuide_.setAttribute('x1', this.props_.x);
  this.vGuide_.setAttribute('y1', this.props_.y - CROSSHAIR_MARGIN);
  this.vGuide_.setAttribute('x2', this.props_.x);

  this.hGuide_.setAttribute('x1', this.props_.x - CROSSHAIR_MARGIN);
  this.hGuide_.setAttribute('y1', this.props_.y);
  this.hGuide_.setAttribute('y2', this.props_.y);

  this.bubble_.setAttribute('x', rectX);
  this.bubble_.setAttribute('y', rectY);

  this.text_.setAttribute('x', textX);
  this.text_.setAttribute('y', textY);
  this.text_.textContent = this.getCoordinateText();
};

CrosshairOverlay.prototype.destroy = function () {
  if (this.ownElement_) {
    this.moveToParent_(null);
    this.ownElement_ = null;
  }
};

CrosshairOverlay.prototype.create_ = function () {
  this.ownElement_ = document.createElementNS(SVG_NS, 'g');
  this.ownElement_.setAttribute('class', 'crosshair-overlay');

  this.vGuide_ = document.createElementNS(SVG_NS, 'line');
  this.vGuide_.setAttribute('y2', 0);
  this.ownElement_.appendChild(this.vGuide_);

  this.hGuide_ = document.createElementNS(SVG_NS, 'line');
  this.hGuide_.setAttribute('x2', 0);
  this.ownElement_.appendChild(this.hGuide_);

  this.bubble_ = document.createElementNS(SVG_NS, 'rect');
  this.bubble_.setAttribute('width', TEXT_RECT_WIDTH);
  this.bubble_.setAttribute('height', TEXT_RECT_HEIGHT);
  this.bubble_.setAttribute('rx', TEXT_RECT_RADIUS);
  this.bubble_.setAttribute('ry', TEXT_RECT_RADIUS);
  this.ownElement_.appendChild(this.bubble_);

  this.text_ = document.createElementNS(SVG_NS, 'text');
  this.ownElement_.appendChild(this.text_);
};

CrosshairOverlay.prototype.moveToParent_ = function (newParent) {
  if (this.ownElement_.parentNode) {
    this.ownElement_.parentNode.removeChild(this.ownElement_);
  }
  if (newParent) {
    newParent.appendChild(this.ownElement_);
  }
};

CrosshairOverlay.prototype.getCoordinateText = function () {
  return "x: " + Math.floor(this.props_.x) + ", y: " + Math.floor(this.props_.y);
};

},{"../constants":"/home/ubuntu/staging/apps/build/js/constants.js"}],"/home/ubuntu/staging/apps/build/js/applab/ChartApi.js":[function(require,module,exports){
/**
 * @file Core implementation of Applab commands related to the Chart design element.
 *
 * For now, uses Google charts.
 * @see {GoogleChart}
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var utils = require('../utils');
var AppStorage = require('./appStorage');
var GoogleChart = require('./GoogleChart');
require("babelify/polyfill"); // required for Promises in IE / Phantom

/**
 * API for requesting/generating charts in Applab.
 *
 * @constructor
 * @param {Document} [docContext] - default is 'document'
 * @param [appStorage] - default is AppStorage
 */
var ChartApi = module.exports = function (docContext, appStorage) {
  this.document_ = docContext || document;
  this.appStorage_ = appStorage || AppStorage;

  /**
   * List of all warnings generated while performing operations through this
   * API instance.
   * @type {Error[]}
   */
  this.warnings = [];
};

/**
 * Record a runtime warning.
 * @param {string} warningMessage
 */
ChartApi.prototype.warn = function (warningMessage) {
  this.warnings.push(new Error(warningMessage));
};

/**
 * Add warnings from an array to the ChartApi instance's warnings array.
 * @param {Error[]} newWarnings
 * @private
 */
ChartApi.prototype.mergeWarnings_ = function (newWarnings) {
  Array.prototype.push.apply(this.warnings, newWarnings);
};

// When adding a new type, provide an entry in the string enum (for clean code)
// and an entry in the TypeNameToType map (allows us to easily remap different
// implementations to the same type name).

/** @enum {string} */
ChartApi.ChartType = {
  BAR: 'bar',
  PIE: 'pie',
  LINE: 'line',
  SCATTER: 'scatter'
};

/** @type {Object.<string, GoogleChart>} */
ChartApi.TypeNameToType = {
  'bar': GoogleChart.MaterialBarChart,
  'pie': GoogleChart.PieChart,
  'line': GoogleChart.MaterialLineChart,
  'scatter': GoogleChart.MaterialScatterChart
};

/**
 * Get an array of all the chart type strings.
 * @returns {string[]}
 */
ChartApi.getChartTypeNames = function () {
  return Object.getOwnPropertyNames(ChartApi.TypeNameToType);
};

/**
 * @param {ChartType} chartType
 * @returns {boolean} TRUE if the given type is in the known list of chart types.
 */
ChartApi.supportsType = function (chartType) {
  return ChartApi.getChartTypeNames().indexOf(chartType.toLowerCase()) !== -1;
};

/**
 * @return {string[]} a quoted, sorted list of chart types for use in the
 *         Droplet parameter dropdown.
 */
ChartApi.getChartTypeDropdown = function () {
  return ChartApi.getChartTypeNames().map(utils.quote).sort();
};

/**
 * Render a chart into an Applab chart element.
 * @param {string} chartId - ID of the destination chart element.
 * @param {ChartType} chartType - Desired chart type.
 * @param {Object[]} chartData - Data to populate the chart.
 * @param {Object} options - passed through to the API.
 * @returns {Promise} which resolves when the chart has been rendered, or
 *          rejects if there are any problems along the way.
 */
ChartApi.prototype.drawChart = function (chartId, chartType, chartData, options) {
  try {
    var chart = this.createChart_(chartId, chartType);
    var columns = ChartApi.inferColumnsFromRawData(chartData);
    return chart.drawChart(chartData, columns, options).then((function () {
      this.mergeWarnings_(chart.warnings);
    }).bind(this));
  } catch (e) {
    return Promise.reject(e);
  }
};

/**
 * Render a chart into an Applab chart element using data from an AppStorage
 * API table.
 * @param {string} chartId - ID of the destination chart element.
 * @param {ChartType} chartType - Desired chart type.
 * @param {string} tableName - AppStorage API table name to source data from
 *                 for the chart.
 * @param {string[]} columns - Columns to use from the table data for the chart,
 *        in order (required order dependent on chart type).
 * @param {Object} options - passed through to the API.
 * @returns {Promise} resolves when the chart has been rendered, or rejects if
 *          there are any problems along the way.
 */
ChartApi.prototype.drawChartFromRecords = function (chartId, chartType, tableName, columns, options) {
  try {
    var chart = this.createChart_(chartId, chartType);
    return Promise.all([chart.loadDependencies(), this.fetchTableData_(tableName)]).then((function (results) {
      var tableData = results[1];
      var columnsInTable = ChartApi.inferColumnsFromRawData(tableData);
      columns = this.guessColumnsIfNecessary(columns, columnsInTable, tableName);
      this.warnIfColumnsNotFound(columns, columnsInTable, tableName);
      return chart.drawChart(tableData, columns, options);
    }).bind(this)).then((function () {
      this.mergeWarnings_(chart.warnings);
    }).bind(this));
  } catch (e) {
    return Promise.reject(e);
  }
};

/**
 * Generates a warning for every requested column that is not found in the
 * columnsInTable collection.
 * @param {string[]} requestedColumns
 * @param {string[]} columnsInTable
 * @param {string} tableName
 */
ChartApi.prototype.warnIfColumnsNotFound = function (requestedColumns, columnsInTable, tableName) {
  // Check that specified columns exist in raw data
  requestedColumns.forEach(function (columnName) {
    if (columnsInTable.indexOf(columnName) === -1) {
      this.warn('Column ' + utils.quote(columnName) + ' not found in table ' + utils.quote(tableName) + '.');
    }
  }, this);
};

/**
 * If enough columns are requested, this function just returns the requested
 * columns.  Otherwise it guesses two columns from the columnsInTable if it
 * can, generating appropriate warnings.  If there are not enough columns in
 * the table either, throws an error since we cannot proceed.
 * @param {string[]} requestedColumns
 * @param {string[]} columnsInTable
 * @param {string} tableName
 * @returns {string[]}
 * @throws {Error} if not enough columns and unable to guess columns.
 */
ChartApi.prototype.guessColumnsIfNecessary = function (requestedColumns, columnsInTable, tableName) {
  if (!requestedColumns || requestedColumns.length < 2) {
    this.warn('Not enough columns specified; expected at least 2.');

    if (columnsInTable.length === 0) {
      throw new Error('No columns found in table ' + utils.quote(tableName) + '. Charts require at least 2 columns.');
    } else if (columnsInTable.length < 2) {
      throw new Error('Only found ' + columnsInTable.length + ' columns in table ' + utils.quote(tableName) + ': ' + columnsInTable.map(utils.quote).join(', ') + '. Charts require at least 2 columns.');
    } else {
      // Take our best guess and continue
      requestedColumns = columnsInTable.slice(0, 2);
      this.warn('Using columns ' + requestedColumns.map(utils.quote).join(' and ') + '.  Possible columns for table ' + utils.quote(tableName) + ' are ' + columnsInTable.map(utils.quote).join(', ') + '.');
    }
  }
  return requestedColumns;
};

/**
 * Create a chart object of the requested type, for the requested target element.
 * @param {string} elementId
 * @param {string} typeName
 * @returns {GoogleChart}
 * @throws {Error} if target element or chart type are not found.
 * @private
 */
ChartApi.prototype.createChart_ = function (elementId, typeName) {
  var targetElement = this.getTargetElement_(elementId);
  var FoundType = ChartApi.getChartTypeByName_(typeName);
  return new FoundType(targetElement);
};

/**
 * Get the DOM Element with the given ID.
 * @param {string} elementId
 * @returns {Element}
 * @throws {Error} if the requested element is not found, or is not a div.
 * @private
 */
ChartApi.prototype.getTargetElement_ = function (elementId) {
  var targetElement = this.document_.getElementById(elementId);
  if (!targetElement || 'div' !== targetElement.tagName.toLowerCase()) {
    throw new Error('Unable to render chart into element "' + elementId + '".');
  }
  return targetElement;
};

/**
 * Get the constructor function for the requested chart type.
 * @param {string} typeName
 * @returns {GoogleChart}
 * @throws {Error} if requested type is not found/supported.
 * @private
 */
ChartApi.getChartTypeByName_ = function (typeName) {
  if (typeof typeName !== 'string') {
    throw new Error('Unknown chart type.');
  }

  var type = ChartApi.TypeNameToType[typeName.toLowerCase()];
  if (!type) {
    throw new Error('Unsupported chart type "' + typeName + '".');
  }

  return type;
};

/**
 * Get all data from the requested table.
 * Wraps AppStorage.readRecords in an ES6 Promise interface.
 * @param {string} tableName
 * @returns {Promise}
 * @private
 */
ChartApi.prototype.fetchTableData_ = function (tableName) {
  return new Promise((function (resolve, reject) {
    this.appStorage_.readRecords(tableName, {}, resolve, function (errorMsg) {
      reject(new Error(errorMsg));
    });
  }).bind(this));
};

/**
 * @param {Object[]} rawData
 * @returns {string[]} column names found as keys in the row objects in the
 *          rawData, (hopefully) in the order they were defined in the row
 *          objects.
 */
ChartApi.inferColumnsFromRawData = function (rawData) {
  return Object.getOwnPropertyNames(rawData.reduce(function (memo, row) {
    Object.getOwnPropertyNames(row).forEach(function (key) {
      memo[key] = true;
    });
    return memo;
  }, {}));
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./GoogleChart":"/home/ubuntu/staging/apps/build/js/applab/GoogleChart.js","./appStorage":"/home/ubuntu/staging/apps/build/js/applab/appStorage.js","babelify/polyfill":"/home/ubuntu/staging/apps/node_modules/babelify/polyfill.js"}],"/home/ubuntu/staging/apps/build/js/applab/appStorage.js":[function(require,module,exports){
'use strict';

/* global Applab */

var RecordListener = require('./RecordListener');

/**
 * Namespace for app storage.
 */
var AppStorage = module.exports;

/**
 * Reads the value associated with the key, accessible to all users of the app.
 * @param {string} key The name of the key.
 * @param {function(Object)} onSuccess Function to call on success with the
       value retrieved from storage.
 * @param {function(string)} onError Function to call on error with error msg.
 */
AppStorage.getKeyValue = function (key, onSuccess, onError) {
  var req = new XMLHttpRequest();
  req.onreadystatechange = handleGetKeyValue.bind(req, onSuccess, onError);
  var url = '/v3/shared-properties/' + Applab.channelId + '/' + key;
  req.open('GET', url, true);
  req.send();
};

var handleGetKeyValue = function handleGetKeyValue(onSuccess, onError) {
  var done = XMLHttpRequest.DONE || 4;
  if (this.readyState !== done) {
    return;
  }
  if (this.status === 404) {
    onSuccess(undefined);
    return;
  }
  if (this.status === 429) {
    onError('Rate limit exceeded while calling getKeyValue.');
    return;
  }
  if (this.status < 200 || this.status >= 300) {
    onError('error reading value: unexpected http status ' + this.status);
    return;
  }
  var value = JSON.parse(this.responseText);
  onSuccess(value);
};

/**
 * Saves the value associated with the key, accessible to all users of the app.
 * @param {string} key The name of the key.
 * @param {Object} value The value to associate with the key.
 * @param {function()} onSuccess Function to call on success.
 * @param {function(string)} onError Function to call on error with error msg.
 */
AppStorage.setKeyValue = function (key, value, onSuccess, onError) {
  var req = new XMLHttpRequest();
  req.onreadystatechange = handleSetKeyValue.bind(req, onSuccess, onError);
  var url = '/v3/shared-properties/' + Applab.channelId + '/' + key;
  req.open('POST', url, true);
  req.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
  req.send(JSON.stringify(value));
};

var handleSetKeyValue = function handleSetKeyValue(onSuccess, onError) {
  var done = XMLHttpRequest.DONE || 4;
  if (this.readyState !== done) {
    return;
  }
  if (this.status === 429) {
    onError('Rate limit exceeded while calling setKeyValue.');
    return;
  }
  if (this.status < 200 || this.status >= 300) {
    onError('error writing value: unexpected http status ' + this.status);
    return;
  }
  onSuccess();
};

/**
 * Creates a new record in the specified table, accessible to all users.
 * @param {string} tableName The name of the table to read from.
 * @param {Object} record Object containing other properties to store
 *     on the record.
 * @param {function(Object)} onSuccess Function to call with the new record.
 * @param {function(string)} onError Function to call with an error message
 *    in case of failure.
 */
AppStorage.createRecord = function (tableName, record, onSuccess, onError) {
  if (!tableName) {
    onError('error creating record: missing required parameter "tableName"');
    return;
  }
  if (record.id) {
    onError('error creating record: record must not have an "id" property');
    return;
  }
  var req = new XMLHttpRequest();
  req.onreadystatechange = handleCreateRecord.bind(req, onSuccess, onError);
  var url = '/v3/shared-tables/' + Applab.channelId + '/' + tableName;
  req.open('POST', url, true);
  req.setRequestHeader("Content-Type", "application/json; charset=UTF-8");
  req.send(JSON.stringify(record));
};

var handleCreateRecord = function handleCreateRecord(onSuccess, onError) {
  var done = XMLHttpRequest.DONE || 4;
  if (this.readyState !== done) {
    return;
  }
  if (this.status === 429) {
    onError('Rate limit exceeded while calling createRecord.');
    return;
  }
  if (this.status < 200 || this.status >= 300) {
    onError('error creating record: unexpected http status ' + this.status);
    return;
  }
  var record = JSON.parse(this.responseText);
  onSuccess(record);
};

/**
 * Reads records which match the searchParams specified by the user,
 * and passes them to onSuccess.
 * @param {string} tableName The name of the table to read from.
 * @param {string} searchParams.id Optional id of record to read.
 * @param {Object} searchParams Other search criteria. Only records
 *     whose contents match all criteria will be returned.
 * @param {function(Array)} onSuccess Function to call with an array of record
       objects.
 * @param {function(string)} onError Function to call with an error message
 *     in case of failure.
 */
AppStorage.readRecords = function (tableName, searchParams, onSuccess, onError) {
  if (!tableName) {
    onError('error reading records: missing required parameter "tableName"');
    return;
  }
  var req = new XMLHttpRequest();
  req.onreadystatechange = handleReadRecords.bind(req, searchParams, onSuccess, onError);
  var url = '/v3/shared-tables/' + Applab.channelId + '/' + tableName;
  req.open('GET', url, true);
  req.send();
};

var handleReadRecords = function handleReadRecords(searchParams, onSuccess, onError) {
  var done = XMLHttpRequest.DONE || 4;
  if (this.readyState !== done) {
    return;
  }
  if (this.status === 429) {
    onError('Rate limit exceeded while calling readRecords.');
    return;
  }
  if (this.status < 200 || this.status >= 300) {
    onError('error reading records: unexpected http status ' + this.status);
    return;
  }
  var records = JSON.parse(this.responseText);
  records = records.filter(function (record) {
    for (var prop in searchParams) {
      if (record[prop] !== searchParams[prop]) {
        return false;
      }
    }
    return true;
  });
  onSuccess(records);
};

/**
 * Updates a record in a table, accessible to all users.
 * @param {string} tableName The name of the table to update.
 * @param {string} record.id The id of the row to update.
 * @param {Object} record Object containing other properties to update
 *     on the record.
 * @param {function(Object, boolean)} onComplete Function to call on success,
 *     or if the record id is not found.
 * @param {function(string)} onError Function to call with an error message
 *     in case of other types of failures.
 */
AppStorage.updateRecord = function (tableName, record, onComplete, onError) {
  if (!tableName) {
    onError('error updating record: missing required parameter "tableName"');
    return;
  }
  var recordId = record.id;
  if (!recordId) {
    onError('error updating record: missing required property "id"');
    return;
  }
  var req = new XMLHttpRequest();
  req.onreadystatechange = handleUpdateRecord.bind(req, tableName, record, onComplete, onError);
  var url = '/v3/shared-tables/' + Applab.channelId + '/' + tableName + '/' + recordId;
  req.open('POST', url, true);
  req.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
  req.send(JSON.stringify(record));
};

var handleUpdateRecord = function handleUpdateRecord(tableName, record, onComplete, onError) {
  var done = XMLHttpRequest.DONE || 4;
  if (this.readyState !== done) {
    return;
  }
  if (this.status === 404) {
    onComplete(null, false);
    return;
  }
  if (this.status === 429) {
    onError('Rate limit exceeded while calling updateRecord.');
    return;
  }
  if (this.status < 200 || this.status >= 300) {
    onError('error updating record: unexpected http status ' + this.status);
    return;
  }
  onComplete(record, true);
};

/**
 * Deletes a record from the specified table.
 * @param {string} tableName The name of the table to delete from.
 * @param {string} record.id The id of the record to delete.
 * @param {Object} record Object whose other properties are ignored.
 * @param {function(boolean)} onComplete Function to call on success, or if the
 *     record id is not found.
 * @param {function(string)} onError Function to call with an error message
 *     in case of other types of failures.
 */
AppStorage.deleteRecord = function (tableName, record, onComplete, onError) {
  if (!tableName) {
    onError('error deleting record: missing required parameter "tableName"');
    return;
  }
  var recordId = record.id;
  if (!recordId) {
    onError('error deleting record: missing required property "id"');
    return;
  }
  var req = new XMLHttpRequest();
  req.onreadystatechange = handleDeleteRecord.bind(req, tableName, record, onComplete, onError);
  var url = '/v3/shared-tables/' + Applab.channelId + '/' + tableName + '/' + recordId + '/delete';
  req.open('POST', url, true);
  req.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
  req.send(JSON.stringify(record));
};

var handleDeleteRecord = function handleDeleteRecord(tableName, record, onComplete, onError) {
  var done = XMLHttpRequest.DONE || 4;
  if (this.readyState !== done) {
    return;
  }
  if (this.status === 404) {
    onComplete(false);
    return;
  }
  if (this.status === 429) {
    onError('Rate limit exceeded while calling deleteRecord.');
    return;
  }
  if (this.status < 200 || this.status >= 300) {
    onError('error deleting record: unexpected http status ' + this.status);
    return;
  }
  onComplete(true);
};

var recordListener = new RecordListener();

/**
 * Listens to tableName for any changes to the data it contains, and calls
 * onRecord with the record and eventType as follows:
 * - for 'create' events, returns the new record
 * - for 'update' events, returns the updated record
 * - for 'delete' events, returns a record containing the id of the deleted record
 * @param {string} tableName Table to listen to.
 * @param {function(Object, RecordListener.EventType)} onRecord Callback to call when
 * a change occurs with the record object (described above) and event type.
 * @param {function(string)} onError Callback to call with an error to show to the user.
 */
AppStorage.onRecordEvent = function (tableName, onRecord, onError) {
  if (!onError || typeof onError !== 'function') {
    throw new Error('onError is a required parameter to AppStorage.onRecordEvent');
  }
  if (!tableName) {
    onError('Error listening for record events: missing required parameter "tableName"');
    return;
  }

  if (!recordListener.setListener(tableName, onRecord)) {
    onError('You are already listening for events on table "' + tableName + '". ' + 'only one event handler can be registered per table.');
  }
};

AppStorage.resetRecordListener = function () {
  recordListener.reset();
};

/**
 * Populates a channel with table data for one or more tables
 * @param {string} jsonData The json data that represents the tables in the format of:
 *   {
 *     "table_name": [{ "name": "Trevor", "age": 30 }, { "name": "Hadi", "age": 72}],
 *     "table_name2": [{ "city": "Seattle", "state": "WA" }, { "city": "Chicago", "state": "IL"}]
 *   }
 * @param {bool} overwrite Whether to overwrite a table if it already exists.
 * @param {function()} onSuccess Function to call on success.
 * @param {function(string)} onError Function to call with an error message
 *    in case of failure.
 */
AppStorage.populateTable = function (jsonData, overwrite, onSuccess, onError) {
  if (!jsonData || !jsonData.length) {
    return;
  }
  var req = new XMLHttpRequest();
  req.onreadystatechange = handlePopulateTable.bind(req, onSuccess, onError);
  var url = '/v3/shared-tables/' + Applab.channelId;
  if (overwrite) {
    url += "?overwrite=1";
  }
  req.open('POST', url, true);
  req.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
  req.send(jsonData);
};

var handlePopulateTable = function handlePopulateTable(onSuccess, onError) {
  var done = XMLHttpRequest.DONE || 4;
  if (this.readyState !== done) {
    return;
  }

  if (this.status != 200) {
    if (onError) {
      onError('error populating tables: unexpected http status ' + this.status);
    }
    return;
  }
  if (onSuccess) {
    onSuccess();
  }
};

/**
 * Populates the key/value store with initial data
 * @param {string} jsonData The json data that represents the tables in the format of:
 *   {
 *     "click_count": 5,
 *     "button_color": "blue"
 *   }
 * @param {bool} overwrite Whether to overwrite a table if it already exists.
 * @param {function()} onSuccess Function to call on success.
 * @param {function(string)} onError Function to call with an error message
 *    in case of failure.
 */
AppStorage.populateKeyValue = function (jsonData, overwrite, onSuccess, onError) {
  if (!jsonData || !jsonData.length) {
    return;
  }
  var req = new XMLHttpRequest();

  req.onreadystatechange = handlePopulateKeyValue.bind(req, onSuccess, onError);
  var url = '/v3/shared-properties/' + Applab.channelId;

  if (overwrite) {
    url += "?overwrite=1";
  }
  req.open('POST', url, true);
  req.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
  req.send(jsonData);
};

var handlePopulateKeyValue = function handlePopulateKeyValue(onSuccess, onError) {
  var done = XMLHttpRequest.DONE || 4;
  if (this.readyState !== done) {
    return;
  }

  if (this.status != 200) {
    if (onError) {
      onError('error populating kv: unexpected http status ' + this.status);
    }
    return;
  }
  if (onSuccess) {
    onSuccess();
  }
};

},{"./RecordListener":"/home/ubuntu/staging/apps/build/js/applab/RecordListener.js"}],"/home/ubuntu/staging/apps/build/js/applab/RecordListener.js":[function(require,module,exports){
'use strict';

/**
 * Class which allows callers to listen to changes to data tables. This is currently
 * done by polling. Some modest rate-limiting is achieved by waiting for one second
 * after the previous response is processed for data from a given table, rather than
 * polling on a fixed interval and allowing a backlog to accumulate.
 *
 * The most logical incremental performance improvement is to use pusher to only
 * re-read from the table if any of its contents have changed. Down the road, we
 * may be able to use DynamoDB Streams / Lambda / SQS to deliver fine-grained
 * notifications to the client without ever needing to  re-read the entire table.
 *
 * @constructor
 */
var RecordListener = module.exports = function () {
  /**
   * Map from table name to table handler.
   * @private {Object.<string, TableHandler>}
   */
  this.tableHandlers_ = {};
};

/**
 * Number of ms to wait before polling each table for more data after finishing
 * processing the last batch of data for that table.
 * @type {number}
 */
var RECORD_INTERVAL = 5000; // 5 seconds

var EventType = {
  CREATE: 'create',
  UPDATE: 'update',
  DELETE: 'delete'
};
RecordListener.EventType = EventType;

/**
 * Sets the listener which calls the callback when changes are made to the table.
 * Only one listener can be set per table. The callback is called once per changed record.
 * @param {string} tableName Name of the table to listen to.
 * @param {function(Object, EventType)} callback Callback to call with the record
 * and the type of event which happened to it. For create and update events,
 * the entire new record is included. For delete events, only the id is included.
 * @returns {boolean} true if adding the listener succeeded, or false if
 * a listener already existed for the specified table.
 */
RecordListener.prototype.setListener = function (tableName, callback) {
  if (this.tableHandlers_[tableName]) {
    return false;
  }

  this.tableHandlers_[tableName] = new TableHandler(tableName, callback);

  return true;
};

/**
 * Stop listening for changes to tables, and forget about all tables it was listening to.
 * It is necessary to call reset before any registered callbacks to become invalid,
 * e.g. when the user presses the resetButton.
 */
RecordListener.prototype.reset = function () {
  for (var tableName in this.tableHandlers_) {
    this.tableHandlers_[tableName].reset();
  }
  this.tableHandlers_ = {};
};

//////////////////////////////////////////////////
// TableHandler
//////////////////////////////////////////////////

/**
 * This class encapsulates all the logic and state required for listening to
 * changes to a single table.
 * @param {string} tableName
 * @param {function} callback
 * @constructor
 */
var TableHandler = function TableHandler(tableName, callback) {
  /** @private {string} */
  this.tableName_ = tableName;

  /** @private {function} */
  this.callback_ = callback;

  /**
   * @typedef {Object.<number, string>} IdToJsonMap Map from record id
   * to a JSON-stringified copy of the corresponding record.
   */

  /**
   * IdToJsonMap representing the contents of the table.
   * We use this to efficiently test whether a record's contents has changed.
   * @private {IdToJsonMap}
   */
  this.idToJsonMap_ = {};

  /**
   * Timeout id of the pending call to window.setTimeout.
   * @private {number}
   */
  this.timeoutId_ = null;

  this.scheduleNextFetch_();
};

/** @private */
TableHandler.prototype.scheduleNextFetch_ = function () {
  this.timeoutId_ = window.setTimeout((function recordListener() {
    this.fetchRecords_();
  }).bind(this), RECORD_INTERVAL);
};

/** @private */
TableHandler.prototype.fetchRecords_ = function () {
  var req = new XMLHttpRequest();
  req.onreadystatechange = this.handleFetchRecords_.bind(this, req);
  // TODO(dave): extract url creation logic from here and AppStorage
  var url = '/v3/shared-tables/' + Applab.channelId + '/' + this.tableName_;
  req.open('GET', url, true);
  req.send();
};

/**
 * @param {XMLHttpRequest} req
 * @private
 */
TableHandler.prototype.handleFetchRecords_ = function (req) {
  if (req.readyState !== XMLHttpRequest.DONE) {
    return;
  }

  if (!this.idToJsonMap_) {
    // The maps may have been reset while we were fetching the data.
    return;
  }

  // Performance notes: on a table with 2000 records on localhost it takes ~1.5 seconds
  // to fetch the data from dynamodb and 30ms to process it here. Processing time may be
  // longer on slower machines. One quick and dirty performance improvement is to cache
  // the responseText here and return if it has not changed (only 1ms). However, a better
  // performance improvement is to only poll when Pusher tells us to, which would render
  // the responseText check unnecessary.

  // Schedule the next data fetch before doing anything that could raise an exception,
  // so that an exception doesn't cause us to stop polling for new data.
  // Per above profiling notes, don't worry about the amount of time needed to process
  // the data below, since it is small compared to the amount of time taken to
  // retrieve the data.
  this.scheduleNextFetch_();

  if (req.status < 200 || req.status >= 300) {
    // Ignore errors. In the future we may want to add monitoring or notify
    // the user that this is happening.
    return;
  }

  var callback = this.callback_;
  var records = JSON.parse(req.responseText);

  // Update the IdToJsonMap before calling the callback. This is so that in the future
  // readRecords can share this cache of records with the guarantee that calls to
  // readRecords made during the callback will return a up-to-date view of the data.
  // This work is tracked by: https://www.pivotaltracker.com/story/show/114505801
  var oldIdToJsonMap = this.idToJsonMap_;
  var newIdToJsonMap = TableHandler.buildIdToJsonMap_(records);
  this.idToJsonMap_ = newIdToJsonMap;

  TableHandler.reportEvents_(records, oldIdToJsonMap, newIdToJsonMap, callback);
};

/**
 * Builds an IdToJsonMap based on the array of records.
 * @param {Array.<Object>} records Array of records.
 * @returns {IdToJsonMap}
 * @private
 */
TableHandler.buildIdToJsonMap_ = function (records) {
  var idToJsonMap = {};
  for (var i = 0; i < records.length; i++) {
    var record = records[i];
    idToJsonMap[record.id] = JSON.stringify(record);
  }
  return idToJsonMap;
};

TableHandler.reportEvents_ = function (records, oldIdToJsonMap, newIdToJsonMap, callback) {
  // Look for 'create' and 'update' events.
  for (var i = 0; i < records.length; i++) {
    var record = records[i];
    var oldJson = oldIdToJsonMap[record.id];
    var newJson = newIdToJsonMap[record.id];
    if (!oldJson) {
      callback(record, EventType.CREATE);
    } else if (oldJson !== newJson) {
      callback(record, EventType.UPDATE);
    }
  }

  // Look for 'delete' events.
  for (var oldId in oldIdToJsonMap) {
    if (!newIdToJsonMap[oldId]) {
      var deletedRecord = { id: parseInt(oldId, 10) };
      callback(deletedRecord, EventType.DELETE);
    }
  }
};

TableHandler.prototype.reset = function () {
  if (this.timeoutId_) {
    window.clearTimeout(this.timeoutId_);
  }

  // Make sure we don't call the callback after reset.
  this.timeoutId_ = null;
  this.callback_ = null;
  this.idToJsonMap_ = null;
};

RecordListener.__TestInterface = {
  TableHandler: TableHandler
};

},{}],"/home/ubuntu/staging/apps/build/js/applab/GoogleChart.js":[function(require,module,exports){
/**
 * @file Wrapper around Google Charts API chart-drawing features
 *
 * @see https://developers.google.com/chart/
 */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';
/* global google */

require("babelify/polyfill"); // required for Promises in IE / Phantom
require('../utils');

/**
 * Abstract base type for Google Charts API charts.
 *
 * @example
 *   var chart = new PieChart(targetDiv);
 *   chart.drawChart(data, columns[, options]);
 *
 * May optionally call loadDependencies() step to facilitiate parallel async
 * loading with other resources.
 *
 * @param {Element} targetDiv
 * @constructor
 */
var GoogleChart = module.exports = function (targetDiv) {
  // Define this late so we can overwrite it in tests.
  if (!GoogleChart.lib) {
    GoogleChart.lib = google;
  }

  /** @private {Element} */
  this.targetDiv_ = targetDiv;

  /** @private {google.visualization.DataTable} */
  this.dataTable_ = null;

  /**
   * List of all warnings logged while performing operations with this chart
   * instance.
   * @type {Error[]}
   */
  this.warnings = [];
};

/**
 * Loads the required libraries for this particular chart type.
 * Safe to call multiple times - Google's loader caches dependencies.
 * @returns {Promise} that resolves when dependencies have been loaded.
 */
GoogleChart.prototype.loadDependencies = function () {
  return new Promise((function (resolve, reject) {
    try {
      GoogleChart.lib.load('visualization', '1', {
        packages: this.getDependencies(),
        callback: resolve
      });
    } catch (e) {
      // We catch and return a different error so that we don't surface Google
      // API errors to students.
      reject(new Error('Unable to load Charts API.  Please try again later.'));
    }
  }).bind(this));
};

/**
 * Renders the chart into the target container using the specified options.
 *
 *  @param {Object[]} rawData - data to display in chart, formatted as an array
 *        of objects where each object represents a row, and the object keys
 *        are column names.
 * @param {string[]} columnList - Ordered list of column names to use as source
 *        data for the chart.  Column names must match keys in rawData.
 * @param {Object} options - Plain options object that gets passed through to
 *        the Charts API.
 * @returns {Promise} that resolves when the chart has been rendered to the
 *          target container.
 */
GoogleChart.prototype.drawChart = function (rawData, columnList, options) {
  return this.loadDependencies().then((function () {
    this.verifyData_(rawData, columnList);
    var dataTable = GoogleChart.dataTableFromRowsAndColumns(rawData, columnList);
    return this.render_(dataTable, options);
  }).bind(this));
};

/**
 * Array of packages the chart needs to load to render.
 * @returns {string[]}
 */
GoogleChart.prototype.getDependencies = function () {
  return ['corechart'];
};

/**
 * Pushes the provided warning message into a collection of warnings for this
 * chart, which can be parsed and displayed later.
 * @param {string} warningMessage
 */
GoogleChart.prototype.warn = function (warningMessage) {
  this.warnings.push(new Error(warningMessage));
};

/**
 * Makes sure data looks okay, throws errors and logs warnings as appropriate.
 * @param {string[]} columns
 * @param {Object[]} data
 * @private
 */
GoogleChart.prototype.verifyData_ = function (data, columns) {
  // Warn when no rows are present
  if (data.length === 0) {
    this.warn('No data.');
  }

  // Error when not enough columns are provided
  if (columns.length < 2) {
    throw new Error('Not enough columns for chart; expected at least 2.');
  }

  // Warn on empty columns?
  columns.forEach((function (colName) {
    var exists = data.some(function (row) {
      return row[colName] !== undefined;
    });
    if (!exists) {
      this.warn('No data found for column "' + colName + '".');
    }
  }).bind(this));
};

/**
 * @param {Object[]} rows - Rows as POJOs with keys.
 * @param {string[]} columns - Column names which must correspond to keys
 *        in the row objects.
 * @return {google.visualization.DataTable}
 */
GoogleChart.dataTableFromRowsAndColumns = function (rows, columns) {
  var dataArray = rows.map(function (row) {
    return columns.map(function (key) {
      return row[key];
    });
  });
  return GoogleChart.lib.visualization.arrayToDataTable([columns].concat(dataArray));
};

/* jshint unused: false */
/**
 * Internal 'abstract' method that subclasses should use to implement the actual
 * rendering step.
 *
 * @param {google.visualzation.DataTable} dataTable
 * @param {Object} options
 * @returns {Promise}
 * @private
 */
GoogleChart.prototype.render_ = function (dataTable, options) {
  return Promise.reject(new Error('Rendering unimplemented for chart type.'));
};
/* jshint unused: true */

/**
 * Google Charts API Pie Chart
 *
 * @see https://developers.google.com/chart/interactive/docs/gallery/piechart
 *
 * @param {Element} targetDiv
 * @constructor
 * @extends GoogleChart
 */
var PieChart = function PieChart(targetDiv) {
  GoogleChart.call(this, targetDiv);
};
PieChart.inherits(GoogleChart);
GoogleChart.PieChart = PieChart;

PieChart.prototype.render_ = function (dataTable, options) {
  var apiChart = new GoogleChart.lib.visualization.PieChart(this.targetDiv_);
  apiChart.draw(dataTable, options);
  return Promise.resolve();
};

/**
 *
 * @param {string[]} columns
 * @param {Object[]} data
 * @private
 * @override
 */
PieChart.prototype.verifyData_ = function (data, columns) {
  PieChart.superPrototype.verifyData_.call(this, data, columns);

  if (columns.length > 2) {
    this.warn('Too many columns for pie chart; only using the first 2.');
  }
};

/**
 * Google Charts API Bar Chart
 *
 * @see https://developers.google.com/chart/interactive/docs/gallery/barchart
 *
 * @param {Element} targetDiv
 * @constructor
 * @extends GoogleChart
 */
var BarChart = function BarChart(targetDiv) {
  GoogleChart.call(this, targetDiv);
};
BarChart.inherits(GoogleChart);
GoogleChart.BarChart = BarChart;

/**
 * @param {google.visualization.DataTable} dataTable
 * @param {Object} options
 * @returns {Promise}
 * @private
 * @override
 */
BarChart.prototype.render_ = function (dataTable, options) {
  var apiChart = new GoogleChart.lib.visualization.BarChart(this.targetDiv_);
  apiChart.draw(dataTable, options);
  return Promise.resolve();
};

/**
 * Google Charts API Material Design Bar Chart
 *
 * @see https://developers.google.com/chart/interactive/docs/gallery
 *      /barchart#creating-material-bar-charts
 *
 * @param {Element} targetDiv
 * @constructor
 * @extends GoogleChart
 */
var MaterialBarChart = function MaterialBarChart(targetDiv) {
  GoogleChart.call(this, targetDiv);
};
MaterialBarChart.inherits(GoogleChart);
GoogleChart.MaterialBarChart = MaterialBarChart;

/**
 * @param {google.visualization.DataTable} dataTable
 * @param {Object} options
 * @returns {Promise}
 * @private
 * @override
 */
MaterialBarChart.prototype.render_ = function (dataTable, options) {
  var apiChart = new GoogleChart.lib.charts.Bar(this.targetDiv_);
  // Material charts have a built-in options converter for now.
  var convertedOptions = GoogleChart.lib.charts.Bar.convertOptions(options);
  apiChart.draw(dataTable, convertedOptions);
  return Promise.resolve();
};

/**
 * Array of packages the chart needs to load to render.
 * @returns {string[]}
 * @override
 */
MaterialBarChart.prototype.getDependencies = function () {
  return ['bar'];
};

/**
 * Google Charts API Line Chart
 *
 * @see https://developers.google.com/chart/interactive/docs/gallery/linechart
 *
 * @param {Element} targetDiv
 * @constructor
 * @extends GoogleChart
 */
var LineChart = function LineChart(targetDiv) {
  GoogleChart.call(this, targetDiv);
};
LineChart.inherits(GoogleChart);
GoogleChart.LineChart = LineChart;

/**
 * @param {google.visualization.DataTable} dataTable
 * @param {Object} options
 * @returns {Promise}
 * @private
 * @override
 */
LineChart.prototype.render_ = function (dataTable, options) {
  var apiChart = new GoogleChart.lib.visualization.LineChart(this.targetDiv_);
  apiChart.draw(dataTable, options);
  return Promise.resolve();
};

/**
 * Google Charts API Material Design Line Chart
 *
 * @see https://developers.google.com/chart/interactive/docs/gallery
 *      /linechart#creating-material-line-charts
 *
 * @param {Element} targetDiv
 * @constructor
 * @extends GoogleChart
 */
var MaterialLineChart = function MaterialLineChart(targetDiv) {
  GoogleChart.call(this, targetDiv);
};
MaterialLineChart.inherits(GoogleChart);
GoogleChart.MaterialLineChart = MaterialLineChart;

/**
 * @param {google.visualization.DataTable} dataTable
 * @param {Object} options
 * @returns {Promise}
 * @private
 * @override
 */
MaterialLineChart.prototype.render_ = function (dataTable, options) {
  var apiChart = new GoogleChart.lib.charts.Line(this.targetDiv_);
  // Material charts have a built-in options converter for now.
  var convertedOptions = GoogleChart.lib.charts.Line.convertOptions(options);
  apiChart.draw(dataTable, convertedOptions);
  return Promise.resolve();
};

/**
 * Array of packages the chart needs to load to render.
 * @returns {string[]}
 * @override
 */
MaterialLineChart.prototype.getDependencies = function () {
  return ['line'];
};

/**
 * Google Charts API Scatter Chart
 *
 * @see https://developers.google.com/chart/interactive/docs/gallery/scatterchart
 *
 * @param {Element} targetDiv
 * @constructor
 * @extends GoogleChart
 */
var ScatterChart = function ScatterChart(targetDiv) {
  GoogleChart.call(this, targetDiv);
};
ScatterChart.inherits(GoogleChart);
GoogleChart.ScatterChart = ScatterChart;

/**
 * @param {google.visualization.DataTable} dataTable
 * @param {Object} options
 * @returns {Promise}
 * @private
 * @override
 */
ScatterChart.prototype.render_ = function (dataTable, options) {
  var apiChart = new GoogleChart.lib.visualization.ScatterChart(this.targetDiv_);
  apiChart.draw(dataTable, options);
  return Promise.resolve();
};

/**
 * Google Charts API Material Design Scatter Chart
 *
 * @see https://developers.google.com/chart/interactive/docs/gallery
 *      /scatterchart#creating-material-scatter-charts
 *
 * @param {Element} targetDiv
 * @constructor
 * @extends GoogleChart
 */
var MaterialScatterChart = function MaterialScatterChart(targetDiv) {
  GoogleChart.call(this, targetDiv);
};
MaterialScatterChart.inherits(GoogleChart);
GoogleChart.MaterialScatterChart = MaterialScatterChart;

/**
 * @param {google.visualization.DataTable} dataTable
 * @param {Object} options
 * @returns {Promise}
 * @private
 * @override
 */
MaterialScatterChart.prototype.render_ = function (dataTable, options) {
  var apiChart = new GoogleChart.lib.charts.Scatter(this.targetDiv_);
  // Material charts have a built-in options converter for now.
  var convertedOptions = GoogleChart.lib.charts.Scatter.convertOptions(options);
  apiChart.draw(dataTable, convertedOptions);
  return Promise.resolve();
};

/**
 * Array of packages the chart needs to load to render.
 * @returns {string[]}
 * @override
 */
MaterialScatterChart.prototype.getDependencies = function () {
  return ['scatter'];
};

},{"../utils":"/home/ubuntu/staging/apps/build/js/utils.js","babelify/polyfill":"/home/ubuntu/staging/apps/node_modules/babelify/polyfill.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/polyfill.js":[function(require,module,exports){
module.exports = require("babel-core/polyfill");

},{"babel-core/polyfill":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/polyfill.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/polyfill.js":[function(require,module,exports){
module.exports = require("./lib/polyfill");

},{"./lib/polyfill":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/lib/polyfill.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/lib/polyfill.js":[function(require,module,exports){
(function (global){
"use strict";

require("core-js/shim");

require("regenerator/runtime");

if (global._babelPolyfill) {
  throw new Error("only one instance of babel/polyfill is allowed");
}
global._babelPolyfill = true;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9saWIvcG9seWZpbGwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxucmVxdWlyZShcImNvcmUtanMvc2hpbVwiKTtcblxucmVxdWlyZShcInJlZ2VuZXJhdG9yL3J1bnRpbWVcIik7XG5cbmlmIChnbG9iYWwuX2JhYmVsUG9seWZpbGwpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFwib25seSBvbmUgaW5zdGFuY2Ugb2YgYmFiZWwvcG9seWZpbGwgaXMgYWxsb3dlZFwiKTtcbn1cbmdsb2JhbC5fYmFiZWxQb2x5ZmlsbCA9IHRydWU7Il19
},{"core-js/shim":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/shim.js","regenerator/runtime":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/regenerator/runtime.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/regenerator/runtime.js":[function(require,module,exports){
(function (process,global){
/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var hasOwn = Object.prototype.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var iteratorSymbol =
    typeof Symbol === "function" && Symbol.iterator || "@@iterator";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided, then outerFn.prototype instanceof Generator.
    var generator = Object.create((outerFn || Generator).prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `value instanceof AwaitArgument` to determine if the yielded value is
  // meant to be awaited. Some may consider the name of this method too
  // cutesy, but they are curmudgeons.
  runtime.awrap = function(arg) {
    return new AwaitArgument(arg);
  };

  function AwaitArgument(arg) {
    this.arg = arg;
  }

  function AsyncIterator(generator) {
    // This invoke function is written in a style that assumes some
    // calling function (or Promise) will handle exceptions.
    function invoke(method, arg) {
      var result = generator[method](arg);
      var value = result.value;
      return value instanceof AwaitArgument
        ? Promise.resolve(value.arg).then(invokeNext, invokeThrow)
        : Promise.resolve(value).then(function(unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration. If the Promise is rejected, however, the
            // result for this iteration will be rejected with the same
            // reason. Note that rejections of yielded Promises are not
            // thrown back into the generator function, as is the case
            // when an awaited Promise is rejected. This difference in
            // behavior between yield and await is important, because it
            // allows the consumer to decide what to do with the yielded
            // rejection (swallow it and continue, manually .throw it back
            // into the generator, abandon iteration, whatever). With
            // await, by contrast, there is no opportunity to examine the
            // rejection reason outside the generator function, so the
            // only option is to throw it from the await expression, and
            // let the generator function handle the exception.
            result.value = unwrapped;
            return result;
          });
    }

    if (typeof process === "object" && process.domain) {
      invoke = process.domain.bind(invoke);
    }

    var invokeNext = invoke.bind(generator, "next");
    var invokeThrow = invoke.bind(generator, "throw");
    var invokeReturn = invoke.bind(generator, "return");
    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return invoke(method, arg);
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : new Promise(function (resolve) {
          resolve(callInvokeWithMethodAndArg());
        });
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          if (method === "return" ||
              (method === "throw" && delegate.iterator[method] === undefined)) {
            // A return or throw (when the delegate iterator has no throw
            // method) always terminates the yield* loop.
            context.delegate = null;

            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            var returnMethod = delegate.iterator["return"];
            if (returnMethod) {
              var record = tryCatch(returnMethod, delegate.iterator, arg);
              if (record.type === "throw") {
                // If the return method threw an exception, let that
                // exception prevail over the original return or throw.
                method = "throw";
                arg = record.arg;
                continue;
              }
            }

            if (method === "return") {
              // Continue with the outer return, now that the delegate
              // iterator has been terminated.
              continue;
            }
          }

          var record = tryCatch(
            delegate.iterator[method],
            delegate.iterator,
            arg
          );

          if (record.type === "throw") {
            context.delegate = null;

            // Like returning generator.throw(uncaught), but without the
            // overhead of an extra function call.
            method = "throw";
            arg = record.arg;
            continue;
          }

          // Delegate generator ran and handled its own exceptions so
          // regardless of what the method was, we continue as if it is
          // "next" with an undefined arg.
          method = "next";
          arg = undefined;

          var info = record.arg;
          if (info.done) {
            context[delegate.resultName] = info.value;
            context.next = delegate.nextLoc;
          } else {
            state = GenStateSuspendedYield;
            return info;
          }

          context.delegate = null;
        }

        if (method === "next") {
          if (state === GenStateSuspendedYield) {
            context.sent = arg;
          } else {
            context.sent = undefined;
          }

        } else if (method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw arg;
          }

          if (context.dispatchException(arg)) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            method = "next";
            arg = undefined;
          }

        } else if (method === "return") {
          context.abrupt("return", arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          var info = {
            value: record.arg,
            done: context.done
          };

          if (record.arg === ContinueSentinel) {
            if (context.delegate && method === "next") {
              // Deliberately forget the last sent value so that we don't
              // accidentally pass it on to the delegate.
              arg = undefined;
            }
          } else {
            return info;
          }

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(arg) call above.
          method = "throw";
          arg = record.arg;
        }
      }
    };
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      this.sent = undefined;
      this.done = false;
      this.delegate = null;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;
        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.next = finallyEntry.finallyLoc;
      } else {
        this.complete(record);
      }

      return ContinueSentinel;
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = record.arg;
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"_process":"/home/ubuntu/staging/apps/node_modules/browserify/node_modules/process/browser.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/shim.js":[function(require,module,exports){
require('./modules/es5');
require('./modules/es6.symbol');
require('./modules/es6.object.assign');
require('./modules/es6.object.is');
require('./modules/es6.object.set-prototype-of');
require('./modules/es6.object.to-string');
require('./modules/es6.object.freeze');
require('./modules/es6.object.seal');
require('./modules/es6.object.prevent-extensions');
require('./modules/es6.object.is-frozen');
require('./modules/es6.object.is-sealed');
require('./modules/es6.object.is-extensible');
require('./modules/es6.object.get-own-property-descriptor');
require('./modules/es6.object.get-prototype-of');
require('./modules/es6.object.keys');
require('./modules/es6.object.get-own-property-names');
require('./modules/es6.function.name');
require('./modules/es6.function.has-instance');
require('./modules/es6.number.constructor');
require('./modules/es6.number.epsilon');
require('./modules/es6.number.is-finite');
require('./modules/es6.number.is-integer');
require('./modules/es6.number.is-nan');
require('./modules/es6.number.is-safe-integer');
require('./modules/es6.number.max-safe-integer');
require('./modules/es6.number.min-safe-integer');
require('./modules/es6.number.parse-float');
require('./modules/es6.number.parse-int');
require('./modules/es6.math.acosh');
require('./modules/es6.math.asinh');
require('./modules/es6.math.atanh');
require('./modules/es6.math.cbrt');
require('./modules/es6.math.clz32');
require('./modules/es6.math.cosh');
require('./modules/es6.math.expm1');
require('./modules/es6.math.fround');
require('./modules/es6.math.hypot');
require('./modules/es6.math.imul');
require('./modules/es6.math.log10');
require('./modules/es6.math.log1p');
require('./modules/es6.math.log2');
require('./modules/es6.math.sign');
require('./modules/es6.math.sinh');
require('./modules/es6.math.tanh');
require('./modules/es6.math.trunc');
require('./modules/es6.string.from-code-point');
require('./modules/es6.string.raw');
require('./modules/es6.string.trim');
require('./modules/es6.string.iterator');
require('./modules/es6.string.code-point-at');
require('./modules/es6.string.ends-with');
require('./modules/es6.string.includes');
require('./modules/es6.string.repeat');
require('./modules/es6.string.starts-with');
require('./modules/es6.array.from');
require('./modules/es6.array.of');
require('./modules/es6.array.iterator');
require('./modules/es6.array.species');
require('./modules/es6.array.copy-within');
require('./modules/es6.array.fill');
require('./modules/es6.array.find');
require('./modules/es6.array.find-index');
require('./modules/es6.regexp.constructor');
require('./modules/es6.regexp.flags');
require('./modules/es6.regexp.match');
require('./modules/es6.regexp.replace');
require('./modules/es6.regexp.search');
require('./modules/es6.regexp.split');
require('./modules/es6.promise');
require('./modules/es6.map');
require('./modules/es6.set');
require('./modules/es6.weak-map');
require('./modules/es6.weak-set');
require('./modules/es6.reflect.apply');
require('./modules/es6.reflect.construct');
require('./modules/es6.reflect.define-property');
require('./modules/es6.reflect.delete-property');
require('./modules/es6.reflect.enumerate');
require('./modules/es6.reflect.get');
require('./modules/es6.reflect.get-own-property-descriptor');
require('./modules/es6.reflect.get-prototype-of');
require('./modules/es6.reflect.has');
require('./modules/es6.reflect.is-extensible');
require('./modules/es6.reflect.own-keys');
require('./modules/es6.reflect.prevent-extensions');
require('./modules/es6.reflect.set');
require('./modules/es6.reflect.set-prototype-of');
require('./modules/es7.array.includes');
require('./modules/es7.string.at');
require('./modules/es7.string.pad-left');
require('./modules/es7.string.pad-right');
require('./modules/es7.string.trim-left');
require('./modules/es7.string.trim-right');
require('./modules/es7.regexp.escape');
require('./modules/es7.object.get-own-property-descriptors');
require('./modules/es7.object.values');
require('./modules/es7.object.entries');
require('./modules/es7.map.to-json');
require('./modules/es7.set.to-json');
require('./modules/js.array.statics');
require('./modules/web.timers');
require('./modules/web.immediate');
require('./modules/web.dom.iterable');
module.exports = require('./modules/$.core');
},{"./modules/$.core":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.core.js","./modules/es5":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es5.js","./modules/es6.array.copy-within":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.copy-within.js","./modules/es6.array.fill":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.fill.js","./modules/es6.array.find":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.find.js","./modules/es6.array.find-index":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.find-index.js","./modules/es6.array.from":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.from.js","./modules/es6.array.iterator":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.iterator.js","./modules/es6.array.of":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.of.js","./modules/es6.array.species":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.species.js","./modules/es6.function.has-instance":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.function.has-instance.js","./modules/es6.function.name":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.function.name.js","./modules/es6.map":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.map.js","./modules/es6.math.acosh":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.acosh.js","./modules/es6.math.asinh":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.asinh.js","./modules/es6.math.atanh":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.atanh.js","./modules/es6.math.cbrt":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.cbrt.js","./modules/es6.math.clz32":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.clz32.js","./modules/es6.math.cosh":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.cosh.js","./modules/es6.math.expm1":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.expm1.js","./modules/es6.math.fround":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.fround.js","./modules/es6.math.hypot":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.hypot.js","./modules/es6.math.imul":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.imul.js","./modules/es6.math.log10":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.log10.js","./modules/es6.math.log1p":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.log1p.js","./modules/es6.math.log2":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.log2.js","./modules/es6.math.sign":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.sign.js","./modules/es6.math.sinh":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.sinh.js","./modules/es6.math.tanh":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.tanh.js","./modules/es6.math.trunc":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.trunc.js","./modules/es6.number.constructor":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.constructor.js","./modules/es6.number.epsilon":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.epsilon.js","./modules/es6.number.is-finite":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.is-finite.js","./modules/es6.number.is-integer":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.is-integer.js","./modules/es6.number.is-nan":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.is-nan.js","./modules/es6.number.is-safe-integer":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.is-safe-integer.js","./modules/es6.number.max-safe-integer":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.max-safe-integer.js","./modules/es6.number.min-safe-integer":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.min-safe-integer.js","./modules/es6.number.parse-float":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.parse-float.js","./modules/es6.number.parse-int":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.parse-int.js","./modules/es6.object.assign":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.assign.js","./modules/es6.object.freeze":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.freeze.js","./modules/es6.object.get-own-property-descriptor":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.get-own-property-descriptor.js","./modules/es6.object.get-own-property-names":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.get-own-property-names.js","./modules/es6.object.get-prototype-of":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.get-prototype-of.js","./modules/es6.object.is":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.is.js","./modules/es6.object.is-extensible":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.is-extensible.js","./modules/es6.object.is-frozen":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.is-frozen.js","./modules/es6.object.is-sealed":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.is-sealed.js","./modules/es6.object.keys":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.keys.js","./modules/es6.object.prevent-extensions":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.prevent-extensions.js","./modules/es6.object.seal":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.seal.js","./modules/es6.object.set-prototype-of":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.set-prototype-of.js","./modules/es6.object.to-string":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.to-string.js","./modules/es6.promise":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.promise.js","./modules/es6.reflect.apply":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.apply.js","./modules/es6.reflect.construct":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.construct.js","./modules/es6.reflect.define-property":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.define-property.js","./modules/es6.reflect.delete-property":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.delete-property.js","./modules/es6.reflect.enumerate":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.enumerate.js","./modules/es6.reflect.get":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.get.js","./modules/es6.reflect.get-own-property-descriptor":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js","./modules/es6.reflect.get-prototype-of":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.get-prototype-of.js","./modules/es6.reflect.has":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.has.js","./modules/es6.reflect.is-extensible":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.is-extensible.js","./modules/es6.reflect.own-keys":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.own-keys.js","./modules/es6.reflect.prevent-extensions":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.prevent-extensions.js","./modules/es6.reflect.set":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.set.js","./modules/es6.reflect.set-prototype-of":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.set-prototype-of.js","./modules/es6.regexp.constructor":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.regexp.constructor.js","./modules/es6.regexp.flags":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.regexp.flags.js","./modules/es6.regexp.match":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.regexp.match.js","./modules/es6.regexp.replace":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.regexp.replace.js","./modules/es6.regexp.search":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.regexp.search.js","./modules/es6.regexp.split":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.regexp.split.js","./modules/es6.set":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.set.js","./modules/es6.string.code-point-at":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.code-point-at.js","./modules/es6.string.ends-with":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.ends-with.js","./modules/es6.string.from-code-point":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.from-code-point.js","./modules/es6.string.includes":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.includes.js","./modules/es6.string.iterator":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.iterator.js","./modules/es6.string.raw":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.raw.js","./modules/es6.string.repeat":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.repeat.js","./modules/es6.string.starts-with":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.starts-with.js","./modules/es6.string.trim":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.trim.js","./modules/es6.symbol":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.symbol.js","./modules/es6.weak-map":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.weak-map.js","./modules/es6.weak-set":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.weak-set.js","./modules/es7.array.includes":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.array.includes.js","./modules/es7.map.to-json":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.map.to-json.js","./modules/es7.object.entries":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.object.entries.js","./modules/es7.object.get-own-property-descriptors":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.object.get-own-property-descriptors.js","./modules/es7.object.values":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.object.values.js","./modules/es7.regexp.escape":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.regexp.escape.js","./modules/es7.set.to-json":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.set.to-json.js","./modules/es7.string.at":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.string.at.js","./modules/es7.string.pad-left":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.string.pad-left.js","./modules/es7.string.pad-right":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.string.pad-right.js","./modules/es7.string.trim-left":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.string.trim-left.js","./modules/es7.string.trim-right":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.string.trim-right.js","./modules/js.array.statics":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/js.array.statics.js","./modules/web.dom.iterable":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/web.dom.iterable.js","./modules/web.immediate":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/web.immediate.js","./modules/web.timers":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/web.timers.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/web.timers.js":[function(require,module,exports){
// ie9- setTimeout & setInterval additional parameters fix
var global     = require('./$.global')
  , $export    = require('./$.export')
  , invoke     = require('./$.invoke')
  , partial    = require('./$.partial')
  , navigator  = global.navigator
  , MSIE       = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
var wrap = function(set){
  return MSIE ? function(fn, time /*, ...args */){
    return set(invoke(
      partial,
      [].slice.call(arguments, 2),
      typeof fn == 'function' ? fn : Function(fn)
    ), time);
  } : set;
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout:  wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.global":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js","./$.invoke":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.invoke.js","./$.partial":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.partial.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.partial.js":[function(require,module,exports){
'use strict';
var path      = require('./$.path')
  , invoke    = require('./$.invoke')
  , aFunction = require('./$.a-function');
module.exports = function(/* ...pargs */){
  var fn     = aFunction(this)
    , length = arguments.length
    , pargs  = Array(length)
    , i      = 0
    , _      = path._
    , holder = false;
  while(length > i)if((pargs[i] = arguments[i++]) === _)holder = true;
  return function(/* ...args */){
    var that  = this
      , $$    = arguments
      , $$len = $$.length
      , j = 0, k = 0, args;
    if(!holder && !$$len)return invoke(fn, pargs, that);
    args = pargs.slice();
    if(holder)for(;length > j; j++)if(args[j] === _)args[j] = $$[k++];
    while($$len > k)args.push($$[k++]);
    return invoke(fn, args, that);
  };
};
},{"./$.a-function":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.a-function.js","./$.invoke":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.invoke.js","./$.path":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.path.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.path.js":[function(require,module,exports){
module.exports = require('./$.global');
},{"./$.global":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/web.immediate.js":[function(require,module,exports){
var $export = require('./$.export')
  , $task   = require('./$.task');
$export($export.G + $export.B, {
  setImmediate:   $task.set,
  clearImmediate: $task.clear
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.task":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.task.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/web.dom.iterable.js":[function(require,module,exports){
require('./es6.array.iterator');
var global      = require('./$.global')
  , hide        = require('./$.hide')
  , Iterators   = require('./$.iterators')
  , ITERATOR    = require('./$.wks')('iterator')
  , NL          = global.NodeList
  , HTC         = global.HTMLCollection
  , NLProto     = NL && NL.prototype
  , HTCProto    = HTC && HTC.prototype
  , ArrayValues = Iterators.NodeList = Iterators.HTMLCollection = Iterators.Array;
if(NLProto && !NLProto[ITERATOR])hide(NLProto, ITERATOR, ArrayValues);
if(HTCProto && !HTCProto[ITERATOR])hide(HTCProto, ITERATOR, ArrayValues);
},{"./$.global":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js","./$.hide":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.hide.js","./$.iterators":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iterators.js","./$.wks":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js","./es6.array.iterator":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.iterator.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/js.array.statics.js":[function(require,module,exports){
// JavaScript 1.6 / Strawman array statics shim
var $       = require('./$')
  , $export = require('./$.export')
  , $ctx    = require('./$.ctx')
  , $Array  = require('./$.core').Array || Array
  , statics = {};
var setStatics = function(keys, length){
  $.each.call(keys.split(','), function(key){
    if(length == undefined && key in $Array)statics[key] = $Array[key];
    else if(key in [])statics[key] = $ctx(Function.call, [][key], length);
  });
};
setStatics('pop,reverse,shift,keys,values,entries', 1);
setStatics('indexOf,every,some,forEach,map,filter,find,findIndex,includes', 3);
setStatics('join,slice,concat,push,splice,unshift,sort,lastIndexOf,' +
           'reduce,reduceRight,copyWithin,fill');
$export($export.S, 'Array', statics);
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.core":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.core.js","./$.ctx":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.ctx.js","./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.string.trim-right.js":[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./$.string-trim')('trimRight', function($trim){
  return function trimRight(){
    return $trim(this, 2);
  };
});
},{"./$.string-trim":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-trim.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.string.trim-left.js":[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./$.string-trim')('trimLeft', function($trim){
  return function trimLeft(){
    return $trim(this, 1);
  };
});
},{"./$.string-trim":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-trim.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.string.pad-right.js":[function(require,module,exports){
'use strict';
var $export = require('./$.export')
  , $pad    = require('./$.string-pad');

$export($export.P, 'String', {
  padRight: function padRight(maxLength /*, fillString = ' ' */){
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.string-pad":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-pad.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.string.pad-left.js":[function(require,module,exports){
'use strict';
var $export = require('./$.export')
  , $pad    = require('./$.string-pad');

$export($export.P, 'String', {
  padLeft: function padLeft(maxLength /*, fillString = ' ' */){
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.string-pad":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-pad.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-pad.js":[function(require,module,exports){
// https://github.com/ljharb/proposal-string-pad-left-right
var toLength = require('./$.to-length')
  , repeat   = require('./$.string-repeat')
  , defined  = require('./$.defined');

module.exports = function(that, maxLength, fillString, left){
  var S            = String(defined(that))
    , stringLength = S.length
    , fillStr      = fillString === undefined ? ' ' : String(fillString)
    , intMaxLength = toLength(maxLength);
  if(intMaxLength <= stringLength)return S;
  if(fillStr == '')fillStr = ' ';
  var fillLen = intMaxLength - stringLength
    , stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if(stringFiller.length > fillLen)stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};
},{"./$.defined":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.defined.js","./$.string-repeat":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-repeat.js","./$.to-length":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-length.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.string.at.js":[function(require,module,exports){
'use strict';
// https://github.com/mathiasbynens/String.prototype.at
var $export = require('./$.export')
  , $at     = require('./$.string-at')(true);

$export($export.P, 'String', {
  at: function at(pos){
    return $at(this, pos);
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.string-at":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-at.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.set.to-json.js":[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export  = require('./$.export');

$export($export.P, 'Set', {toJSON: require('./$.collection-to-json')('Set')});
},{"./$.collection-to-json":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.collection-to-json.js","./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.regexp.escape.js":[function(require,module,exports){
// https://github.com/benjamingr/RexExp.escape
var $export = require('./$.export')
  , $re     = require('./$.replacer')(/[\\^$*+?.()|[\]{}]/g, '\\$&');

$export($export.S, 'RegExp', {escape: function escape(it){ return $re(it); }});

},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.replacer":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.replacer.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.replacer.js":[function(require,module,exports){
module.exports = function(regExp, replace){
  var replacer = replace === Object(replace) ? function(part){
    return replace[part];
  } : replace;
  return function(it){
    return String(it).replace(regExp, replacer);
  };
};
},{}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.object.values.js":[function(require,module,exports){
// http://goo.gl/XkBrjD
var $export = require('./$.export')
  , $values = require('./$.object-to-array')(false);

$export($export.S, 'Object', {
  values: function values(it){
    return $values(it);
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.object-to-array":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-to-array.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.object.get-own-property-descriptors.js":[function(require,module,exports){
// https://gist.github.com/WebReflection/9353781
var $          = require('./$')
  , $export    = require('./$.export')
  , ownKeys    = require('./$.own-keys')
  , toIObject  = require('./$.to-iobject')
  , createDesc = require('./$.property-desc');

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object){
    var O       = toIObject(object)
      , setDesc = $.setDesc
      , getDesc = $.getDesc
      , keys    = ownKeys(O)
      , result  = {}
      , i       = 0
      , key, D;
    while(keys.length > i){
      D = getDesc(O, key = keys[i++]);
      if(key in result)setDesc(result, key, createDesc(0, D));
      else result[key] = D;
    } return result;
  }
});
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.own-keys":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.own-keys.js","./$.property-desc":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.property-desc.js","./$.to-iobject":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-iobject.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.object.entries.js":[function(require,module,exports){
// http://goo.gl/XkBrjD
var $export  = require('./$.export')
  , $entries = require('./$.object-to-array')(true);

$export($export.S, 'Object', {
  entries: function entries(it){
    return $entries(it);
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.object-to-array":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-to-array.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-to-array.js":[function(require,module,exports){
var $         = require('./$')
  , toIObject = require('./$.to-iobject')
  , isEnum    = $.isEnum;
module.exports = function(isEntries){
  return function(it){
    var O      = toIObject(it)
      , keys   = $.getKeys(O)
      , length = keys.length
      , i      = 0
      , result = []
      , key;
    while(length > i)if(isEnum.call(O, key = keys[i++])){
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.to-iobject":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-iobject.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.map.to-json.js":[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export  = require('./$.export');

$export($export.P, 'Map', {toJSON: require('./$.collection-to-json')('Map')});
},{"./$.collection-to-json":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.collection-to-json.js","./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.collection-to-json.js":[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var forOf   = require('./$.for-of')
  , classof = require('./$.classof');
module.exports = function(NAME){
  return function toJSON(){
    if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
    var arr = [];
    forOf(this, false, arr.push, arr);
    return arr;
  };
};
},{"./$.classof":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.classof.js","./$.for-of":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.for-of.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.array.includes.js":[function(require,module,exports){
'use strict';
var $export   = require('./$.export')
  , $includes = require('./$.array-includes')(true);

$export($export.P, 'Array', {
  // https://github.com/domenic/Array.prototype.includes
  includes: function includes(el /*, fromIndex = 0 */){
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

require('./$.add-to-unscopables')('includes');
},{"./$.add-to-unscopables":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.add-to-unscopables.js","./$.array-includes":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.array-includes.js","./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.weak-set.js":[function(require,module,exports){
'use strict';
var weak = require('./$.collection-weak');

// 23.4 WeakSet Objects
require('./$.collection')('WeakSet', function(get){
  return function WeakSet(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value){
    return weak.def(this, value, true);
  }
}, weak, false, true);
},{"./$.collection":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.collection.js","./$.collection-weak":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.collection-weak.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.weak-map.js":[function(require,module,exports){
'use strict';
var $            = require('./$')
  , redefine     = require('./$.redefine')
  , weak         = require('./$.collection-weak')
  , isObject     = require('./$.is-object')
  , has          = require('./$.has')
  , frozenStore  = weak.frozenStore
  , WEAK         = weak.WEAK
  , isExtensible = Object.isExtensible || isObject
  , tmp          = {};

// 23.3 WeakMap Objects
var $WeakMap = require('./$.collection')('WeakMap', function(get){
  return function WeakMap(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key){
    if(isObject(key)){
      if(!isExtensible(key))return frozenStore(this).get(key);
      if(has(key, WEAK))return key[WEAK][this._i];
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value){
    return weak.def(this, key, value);
  }
}, weak, true, true);

// IE11 WeakMap frozen keys fix
if(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
  $.each.call(['delete', 'has', 'get', 'set'], function(key){
    var proto  = $WeakMap.prototype
      , method = proto[key];
    redefine(proto, key, function(a, b){
      // store frozen objects on leaky map
      if(isObject(a) && !isExtensible(a)){
        var result = frozenStore(this)[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.collection":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.collection.js","./$.collection-weak":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.collection-weak.js","./$.has":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.has.js","./$.is-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.redefine":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.redefine.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.collection-weak.js":[function(require,module,exports){
'use strict';
var hide              = require('./$.hide')
  , redefineAll       = require('./$.redefine-all')
  , anObject          = require('./$.an-object')
  , isObject          = require('./$.is-object')
  , strictNew         = require('./$.strict-new')
  , forOf             = require('./$.for-of')
  , createArrayMethod = require('./$.array-methods')
  , $has              = require('./$.has')
  , WEAK              = require('./$.uid')('weak')
  , isExtensible      = Object.isExtensible || isObject
  , arrayFind         = createArrayMethod(5)
  , arrayFindIndex    = createArrayMethod(6)
  , id                = 0;

// fallback for frozen keys
var frozenStore = function(that){
  return that._l || (that._l = new FrozenStore);
};
var FrozenStore = function(){
  this.a = [];
};
var findFrozen = function(store, key){
  return arrayFind(store.a, function(it){
    return it[0] === key;
  });
};
FrozenStore.prototype = {
  get: function(key){
    var entry = findFrozen(this, key);
    if(entry)return entry[1];
  },
  has: function(key){
    return !!findFrozen(this, key);
  },
  set: function(key, value){
    var entry = findFrozen(this, key);
    if(entry)entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function(key){
    var index = arrayFindIndex(this.a, function(it){
      return it[0] === key;
    });
    if(~index)this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      strictNew(that, C, NAME);
      that._i = id++;      // collection id
      that._l = undefined; // leak store for frozen objects
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function(key){
        if(!isObject(key))return false;
        if(!isExtensible(key))return frozenStore(this)['delete'](key);
        return $has(key, WEAK) && $has(key[WEAK], this._i) && delete key[WEAK][this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key){
        if(!isObject(key))return false;
        if(!isExtensible(key))return frozenStore(this).has(key);
        return $has(key, WEAK) && $has(key[WEAK], this._i);
      }
    });
    return C;
  },
  def: function(that, key, value){
    if(!isExtensible(anObject(key))){
      frozenStore(that).set(key, value);
    } else {
      $has(key, WEAK) || hide(key, WEAK, {});
      key[WEAK][that._i] = value;
    } return that;
  },
  frozenStore: frozenStore,
  WEAK: WEAK
};
},{"./$.an-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.array-methods":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.array-methods.js","./$.for-of":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.for-of.js","./$.has":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.has.js","./$.hide":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.hide.js","./$.is-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.redefine-all":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.redefine-all.js","./$.strict-new":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.strict-new.js","./$.uid":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.uid.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.symbol.js":[function(require,module,exports){
'use strict';
// ECMAScript 6 symbols shim
var $              = require('./$')
  , global         = require('./$.global')
  , has            = require('./$.has')
  , DESCRIPTORS    = require('./$.descriptors')
  , $export        = require('./$.export')
  , redefine       = require('./$.redefine')
  , $fails         = require('./$.fails')
  , shared         = require('./$.shared')
  , setToStringTag = require('./$.set-to-string-tag')
  , uid            = require('./$.uid')
  , wks            = require('./$.wks')
  , keyOf          = require('./$.keyof')
  , $names         = require('./$.get-names')
  , enumKeys       = require('./$.enum-keys')
  , isArray        = require('./$.is-array')
  , anObject       = require('./$.an-object')
  , toIObject      = require('./$.to-iobject')
  , createDesc     = require('./$.property-desc')
  , getDesc        = $.getDesc
  , setDesc        = $.setDesc
  , _create        = $.create
  , getNames       = $names.get
  , $Symbol        = global.Symbol
  , $JSON          = global.JSON
  , _stringify     = $JSON && $JSON.stringify
  , setter         = false
  , HIDDEN         = wks('_hidden')
  , isEnum         = $.isEnum
  , SymbolRegistry = shared('symbol-registry')
  , AllSymbols     = shared('symbols')
  , useNative      = typeof $Symbol == 'function'
  , ObjectProto    = Object.prototype;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function(){
  return _create(setDesc({}, 'a', {
    get: function(){ return setDesc(this, 'a', {value: 7}).a; }
  })).a != 7;
}) ? function(it, key, D){
  var protoDesc = getDesc(ObjectProto, key);
  if(protoDesc)delete ObjectProto[key];
  setDesc(it, key, D);
  if(protoDesc && it !== ObjectProto)setDesc(ObjectProto, key, protoDesc);
} : setDesc;

var wrap = function(tag){
  var sym = AllSymbols[tag] = _create($Symbol.prototype);
  sym._k = tag;
  DESCRIPTORS && setter && setSymbolDesc(ObjectProto, tag, {
    configurable: true,
    set: function(value){
      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    }
  });
  return sym;
};

var isSymbol = function(it){
  return typeof it == 'symbol';
};

var $defineProperty = function defineProperty(it, key, D){
  if(D && has(AllSymbols, key)){
    if(!D.enumerable){
      if(!has(it, HIDDEN))setDesc(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
      D = _create(D, {enumerable: createDesc(0, false)});
    } return setSymbolDesc(it, key, D);
  } return setDesc(it, key, D);
};
var $defineProperties = function defineProperties(it, P){
  anObject(it);
  var keys = enumKeys(P = toIObject(P))
    , i    = 0
    , l = keys.length
    , key;
  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P){
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key){
  var E = isEnum.call(this, key);
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key]
    ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
  var D = getDesc(it = toIObject(it), key);
  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it){
  var names  = getNames(toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i)if(!has(AllSymbols, key = names[i++]) && key != HIDDEN)result.push(key);
  return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
  var names  = getNames(toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i)if(has(AllSymbols, key = names[i++]))result.push(AllSymbols[key]);
  return result;
};
var $stringify = function stringify(it){
  if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
  var args = [it]
    , i    = 1
    , $$   = arguments
    , replacer, $replacer;
  while($$.length > i)args.push($$[i++]);
  replacer = args[1];
  if(typeof replacer == 'function')$replacer = replacer;
  if($replacer || !isArray(replacer))replacer = function(key, value){
    if($replacer)value = $replacer.call(this, key, value);
    if(!isSymbol(value))return value;
  };
  args[1] = replacer;
  return _stringify.apply($JSON, args);
};
var buggyJSON = $fails(function(){
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
});

// 19.4.1.1 Symbol([description])
if(!useNative){
  $Symbol = function Symbol(){
    if(isSymbol(this))throw TypeError('Symbol is not a constructor');
    return wrap(uid(arguments.length > 0 ? arguments[0] : undefined));
  };
  redefine($Symbol.prototype, 'toString', function toString(){
    return this._k;
  });

  isSymbol = function(it){
    return it instanceof $Symbol;
  };

  $.create     = $create;
  $.isEnum     = $propertyIsEnumerable;
  $.getDesc    = $getOwnPropertyDescriptor;
  $.setDesc    = $defineProperty;
  $.setDescs   = $defineProperties;
  $.getNames   = $names.get = $getOwnPropertyNames;
  $.getSymbols = $getOwnPropertySymbols;

  if(DESCRIPTORS && !require('./$.library')){
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }
}

var symbolStatics = {
  // 19.4.2.1 Symbol.for(key)
  'for': function(key){
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(key){
    return keyOf(SymbolRegistry, key);
  },
  useSetter: function(){ setter = true; },
  useSimple: function(){ setter = false; }
};
// 19.4.2.2 Symbol.hasInstance
// 19.4.2.3 Symbol.isConcatSpreadable
// 19.4.2.4 Symbol.iterator
// 19.4.2.6 Symbol.match
// 19.4.2.8 Symbol.replace
// 19.4.2.9 Symbol.search
// 19.4.2.10 Symbol.species
// 19.4.2.11 Symbol.split
// 19.4.2.12 Symbol.toPrimitive
// 19.4.2.13 Symbol.toStringTag
// 19.4.2.14 Symbol.unscopables
$.each.call((
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,' +
  'species,split,toPrimitive,toStringTag,unscopables'
).split(','), function(it){
  var sym = wks(it);
  symbolStatics[it] = useNative ? sym : wrap(sym);
});

setter = true;

$export($export.G + $export.W, {Symbol: $Symbol});

$export($export.S, 'Symbol', symbolStatics);

$export($export.S + $export.F * !useNative, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!useNative || buggyJSON), 'JSON', {stringify: $stringify});

// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.an-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.descriptors":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.descriptors.js","./$.enum-keys":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.enum-keys.js","./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.fails":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js","./$.get-names":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.get-names.js","./$.global":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js","./$.has":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.has.js","./$.is-array":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-array.js","./$.keyof":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.keyof.js","./$.library":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.library.js","./$.property-desc":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.property-desc.js","./$.redefine":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.redefine.js","./$.set-to-string-tag":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.set-to-string-tag.js","./$.shared":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.shared.js","./$.to-iobject":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-iobject.js","./$.uid":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.uid.js","./$.wks":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.keyof.js":[function(require,module,exports){
var $         = require('./$')
  , toIObject = require('./$.to-iobject');
module.exports = function(object, el){
  var O      = toIObject(object)
    , keys   = $.getKeys(O)
    , length = keys.length
    , index  = 0
    , key;
  while(length > index)if(O[key = keys[index++]] === el)return key;
};
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.to-iobject":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-iobject.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.enum-keys.js":[function(require,module,exports){
// all enumerable object keys, includes symbols
var $ = require('./$');
module.exports = function(it){
  var keys       = $.getKeys(it)
    , getSymbols = $.getSymbols;
  if(getSymbols){
    var symbols = getSymbols(it)
      , isEnum  = $.isEnum
      , i       = 0
      , key;
    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))keys.push(key);
  }
  return keys;
};
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.trim.js":[function(require,module,exports){
'use strict';
// 21.1.3.25 String.prototype.trim()
require('./$.string-trim')('trim', function($trim){
  return function trim(){
    return $trim(this, 3);
  };
});
},{"./$.string-trim":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-trim.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.starts-with.js":[function(require,module,exports){
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
'use strict';
var $export     = require('./$.export')
  , toLength    = require('./$.to-length')
  , context     = require('./$.string-context')
  , STARTS_WITH = 'startsWith'
  , $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * require('./$.fails-is-regexp')(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /*, position = 0 */){
    var that   = context(this, searchString, STARTS_WITH)
      , $$     = arguments
      , index  = toLength(Math.min($$.length > 1 ? $$[1] : undefined, that.length))
      , search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.fails-is-regexp":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails-is-regexp.js","./$.string-context":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-context.js","./$.to-length":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-length.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.repeat.js":[function(require,module,exports){
var $export = require('./$.export');

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: require('./$.string-repeat')
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.string-repeat":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-repeat.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-repeat.js":[function(require,module,exports){
'use strict';
var toInteger = require('./$.to-integer')
  , defined   = require('./$.defined');

module.exports = function repeat(count){
  var str = String(defined(this))
    , res = ''
    , n   = toInteger(count);
  if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");
  for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;
  return res;
};
},{"./$.defined":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.defined.js","./$.to-integer":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-integer.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.raw.js":[function(require,module,exports){
var $export   = require('./$.export')
  , toIObject = require('./$.to-iobject')
  , toLength  = require('./$.to-length');

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite){
    var tpl   = toIObject(callSite.raw)
      , len   = toLength(tpl.length)
      , $$    = arguments
      , $$len = $$.length
      , res   = []
      , i     = 0;
    while(len > i){
      res.push(String(tpl[i++]));
      if(i < $$len)res.push(String($$[i]));
    } return res.join('');
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.to-iobject":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-iobject.js","./$.to-length":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-length.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.iterator.js":[function(require,module,exports){
'use strict';
var $at  = require('./$.string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./$.iter-define')(String, 'String', function(iterated){
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , index = this._i
    , point;
  if(index >= O.length)return {value: undefined, done: true};
  point = $at(O, index);
  this._i += point.length;
  return {value: point, done: false};
});
},{"./$.iter-define":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-define.js","./$.string-at":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-at.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.includes.js":[function(require,module,exports){
// 21.1.3.7 String.prototype.includes(searchString, position = 0)
'use strict';
var $export  = require('./$.export')
  , context  = require('./$.string-context')
  , INCLUDES = 'includes';

$export($export.P + $export.F * require('./$.fails-is-regexp')(INCLUDES), 'String', {
  includes: function includes(searchString /*, position = 0 */){
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.fails-is-regexp":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails-is-regexp.js","./$.string-context":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-context.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.from-code-point.js":[function(require,module,exports){
var $export        = require('./$.export')
  , toIndex        = require('./$.to-index')
  , fromCharCode   = String.fromCharCode
  , $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars
    var res   = []
      , $$    = arguments
      , $$len = $$.length
      , i     = 0
      , code;
    while($$len > i){
      code = +$$[i++];
      if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.to-index":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-index.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.ends-with.js":[function(require,module,exports){
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
'use strict';
var $export   = require('./$.export')
  , toLength  = require('./$.to-length')
  , context   = require('./$.string-context')
  , ENDS_WITH = 'endsWith'
  , $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * require('./$.fails-is-regexp')(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /*, endPosition = @length */){
    var that = context(this, searchString, ENDS_WITH)
      , $$   = arguments
      , endPosition = $$.length > 1 ? $$[1] : undefined
      , len    = toLength(that.length)
      , end    = endPosition === undefined ? len : Math.min(toLength(endPosition), len)
      , search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.fails-is-regexp":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails-is-regexp.js","./$.string-context":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-context.js","./$.to-length":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-length.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-context.js":[function(require,module,exports){
// helper for String#{startsWith, endsWith, includes}
var isRegExp = require('./$.is-regexp')
  , defined  = require('./$.defined');

module.exports = function(that, searchString, NAME){
  if(isRegExp(searchString))throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};
},{"./$.defined":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.defined.js","./$.is-regexp":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-regexp.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails-is-regexp.js":[function(require,module,exports){
var MATCH = require('./$.wks')('match');
module.exports = function(KEY){
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch(e){
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch(f){ /* empty */ }
  } return true;
};
},{"./$.wks":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.code-point-at.js":[function(require,module,exports){
'use strict';
var $export = require('./$.export')
  , $at     = require('./$.string-at')(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos){
    return $at(this, pos);
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.string-at":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-at.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-at.js":[function(require,module,exports){
var toInteger = require('./$.to-integer')
  , defined   = require('./$.defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function(TO_STRING){
  return function(that, pos){
    var s = String(defined(that))
      , i = toInteger(pos)
      , l = s.length
      , a, b;
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};
},{"./$.defined":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.defined.js","./$.to-integer":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-integer.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.set.js":[function(require,module,exports){
'use strict';
var strong = require('./$.collection-strong');

// 23.2 Set Objects
require('./$.collection')('Set', function(get){
  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value){
    return strong.def(this, value = value === 0 ? 0 : value, value);
  }
}, strong);
},{"./$.collection":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.collection.js","./$.collection-strong":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.collection-strong.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.regexp.split.js":[function(require,module,exports){
// @@split logic
require('./$.fix-re-wks')('split', 2, function(defined, SPLIT, $split){
  // 21.1.3.17 String.prototype.split(separator, limit)
  return function split(separator, limit){
    'use strict';
    var O  = defined(this)
      , fn = separator == undefined ? undefined : separator[SPLIT];
    return fn !== undefined
      ? fn.call(separator, O, limit)
      : $split.call(String(O), separator, limit);
  };
});
},{"./$.fix-re-wks":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fix-re-wks.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.regexp.search.js":[function(require,module,exports){
// @@search logic
require('./$.fix-re-wks')('search', 1, function(defined, SEARCH){
  // 21.1.3.15 String.prototype.search(regexp)
  return function search(regexp){
    'use strict';
    var O  = defined(this)
      , fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  };
});
},{"./$.fix-re-wks":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fix-re-wks.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.regexp.replace.js":[function(require,module,exports){
// @@replace logic
require('./$.fix-re-wks')('replace', 2, function(defined, REPLACE, $replace){
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
  return function replace(searchValue, replaceValue){
    'use strict';
    var O  = defined(this)
      , fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined
      ? fn.call(searchValue, O, replaceValue)
      : $replace.call(String(O), searchValue, replaceValue);
  };
});
},{"./$.fix-re-wks":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fix-re-wks.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.regexp.match.js":[function(require,module,exports){
// @@match logic
require('./$.fix-re-wks')('match', 1, function(defined, MATCH){
  // 21.1.3.11 String.prototype.match(regexp)
  return function match(regexp){
    'use strict';
    var O  = defined(this)
      , fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  };
});
},{"./$.fix-re-wks":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fix-re-wks.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fix-re-wks.js":[function(require,module,exports){
'use strict';
var hide     = require('./$.hide')
  , redefine = require('./$.redefine')
  , fails    = require('./$.fails')
  , defined  = require('./$.defined')
  , wks      = require('./$.wks');

module.exports = function(KEY, length, exec){
  var SYMBOL   = wks(KEY)
    , original = ''[KEY];
  if(fails(function(){
    var O = {};
    O[SYMBOL] = function(){ return 7; };
    return ''[KEY](O) != 7;
  })){
    redefine(String.prototype, KEY, exec(defined, SYMBOL, original));
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function(string, arg){ return original.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function(string){ return original.call(string, this); }
    );
  }
};
},{"./$.defined":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.defined.js","./$.fails":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js","./$.hide":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.hide.js","./$.redefine":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.redefine.js","./$.wks":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.regexp.flags.js":[function(require,module,exports){
// 21.2.5.3 get RegExp.prototype.flags()
var $ = require('./$');
if(require('./$.descriptors') && /./g.flags != 'g')$.setDesc(RegExp.prototype, 'flags', {
  configurable: true,
  get: require('./$.flags')
});
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.descriptors":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.descriptors.js","./$.flags":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.flags.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.regexp.constructor.js":[function(require,module,exports){
var $        = require('./$')
  , global   = require('./$.global')
  , isRegExp = require('./$.is-regexp')
  , $flags   = require('./$.flags')
  , $RegExp  = global.RegExp
  , Base     = $RegExp
  , proto    = $RegExp.prototype
  , re1      = /a/g
  , re2      = /a/g
  // "new" creates a new object, old webkit buggy here
  , CORRECT_NEW = new $RegExp(re1) !== re1;

if(require('./$.descriptors') && (!CORRECT_NEW || require('./$.fails')(function(){
  re2[require('./$.wks')('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))){
  $RegExp = function RegExp(p, f){
    var piRE = isRegExp(p)
      , fiU  = f === undefined;
    return !(this instanceof $RegExp) && piRE && p.constructor === $RegExp && fiU ? p
      : CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f);
  };
  $.each.call($.getNames(Base), function(key){
    key in $RegExp || $.setDesc($RegExp, key, {
      configurable: true,
      get: function(){ return Base[key]; },
      set: function(it){ Base[key] = it; }
    });
  });
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  require('./$.redefine')(global, 'RegExp', $RegExp);
}

require('./$.set-species')('RegExp');
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.descriptors":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.descriptors.js","./$.fails":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js","./$.flags":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.flags.js","./$.global":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js","./$.is-regexp":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-regexp.js","./$.redefine":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.redefine.js","./$.set-species":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.set-species.js","./$.wks":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-regexp.js":[function(require,module,exports){
// 7.2.8 IsRegExp(argument)
var isObject = require('./$.is-object')
  , cof      = require('./$.cof')
  , MATCH    = require('./$.wks')('match');
module.exports = function(it){
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};
},{"./$.cof":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.cof.js","./$.is-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.wks":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.flags.js":[function(require,module,exports){
'use strict';
// 21.2.5.3 get RegExp.prototype.flags
var anObject = require('./$.an-object');
module.exports = function(){
  var that   = anObject(this)
    , result = '';
  if(that.global)     result += 'g';
  if(that.ignoreCase) result += 'i';
  if(that.multiline)  result += 'm';
  if(that.unicode)    result += 'u';
  if(that.sticky)     result += 'y';
  return result;
};
},{"./$.an-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.set.js":[function(require,module,exports){
// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var $          = require('./$')
  , has        = require('./$.has')
  , $export    = require('./$.export')
  , createDesc = require('./$.property-desc')
  , anObject   = require('./$.an-object')
  , isObject   = require('./$.is-object');

function set(target, propertyKey, V/*, receiver*/){
  var receiver = arguments.length < 4 ? target : arguments[3]
    , ownDesc  = $.getDesc(anObject(target), propertyKey)
    , existingDescriptor, proto;
  if(!ownDesc){
    if(isObject(proto = $.getProto(target))){
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if(has(ownDesc, 'value')){
    if(ownDesc.writable === false || !isObject(receiver))return false;
    existingDescriptor = $.getDesc(receiver, propertyKey) || createDesc(0);
    existingDescriptor.value = V;
    $.setDesc(receiver, propertyKey, existingDescriptor);
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', {set: set});
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.an-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.has":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.has.js","./$.is-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.property-desc":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.property-desc.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.set-prototype-of.js":[function(require,module,exports){
// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export  = require('./$.export')
  , setProto = require('./$.set-proto');

if(setProto)$export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto){
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.set-proto":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.set-proto.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.prevent-extensions.js":[function(require,module,exports){
// 26.1.12 Reflect.preventExtensions(target)
var $export            = require('./$.export')
  , anObject           = require('./$.an-object')
  , $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target){
    anObject(target);
    try {
      if($preventExtensions)$preventExtensions(target);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./$.an-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.own-keys.js":[function(require,module,exports){
// 26.1.11 Reflect.ownKeys(target)
var $export = require('./$.export');

$export($export.S, 'Reflect', {ownKeys: require('./$.own-keys')});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.own-keys":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.own-keys.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.own-keys.js":[function(require,module,exports){
// all object keys, includes non-enumerable and symbols
var $        = require('./$')
  , anObject = require('./$.an-object')
  , Reflect  = require('./$.global').Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it){
  var keys       = $.getNames(anObject(it))
    , getSymbols = $.getSymbols;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.an-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.global":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.is-extensible.js":[function(require,module,exports){
// 26.1.10 Reflect.isExtensible(target)
var $export       = require('./$.export')
  , anObject      = require('./$.an-object')
  , $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target){
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});
},{"./$.an-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.has.js":[function(require,module,exports){
// 26.1.9 Reflect.has(target, propertyKey)
var $export = require('./$.export');

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey){
    return propertyKey in target;
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.get.js":[function(require,module,exports){
// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var $        = require('./$')
  , has      = require('./$.has')
  , $export  = require('./$.export')
  , isObject = require('./$.is-object')
  , anObject = require('./$.an-object');

function get(target, propertyKey/*, receiver*/){
  var receiver = arguments.length < 3 ? target : arguments[2]
    , desc, proto;
  if(anObject(target) === receiver)return target[propertyKey];
  if(desc = $.getDesc(target, propertyKey))return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if(isObject(proto = $.getProto(target)))return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', {get: get});
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.an-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.has":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.has.js","./$.is-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.get-prototype-of.js":[function(require,module,exports){
// 26.1.8 Reflect.getPrototypeOf(target)
var $export  = require('./$.export')
  , getProto = require('./$').getProto
  , anObject = require('./$.an-object');

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target){
    return getProto(anObject(target));
  }
});
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.an-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js":[function(require,module,exports){
// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var $        = require('./$')
  , $export  = require('./$.export')
  , anObject = require('./$.an-object');

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey){
    return $.getDesc(anObject(target), propertyKey);
  }
});
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.an-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.enumerate.js":[function(require,module,exports){
'use strict';
// 26.1.5 Reflect.enumerate(target)
var $export  = require('./$.export')
  , anObject = require('./$.an-object');
var Enumerate = function(iterated){
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = []       // keys
    , key;
  for(key in iterated)keys.push(key);
};
require('./$.iter-create')(Enumerate, 'Object', function(){
  var that = this
    , keys = that._k
    , key;
  do {
    if(that._i >= keys.length)return {value: undefined, done: true};
  } while(!((key = keys[that._i++]) in that._t));
  return {value: key, done: false};
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target){
    return new Enumerate(target);
  }
});
},{"./$.an-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.iter-create":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-create.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.delete-property.js":[function(require,module,exports){
// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export  = require('./$.export')
  , getDesc  = require('./$').getDesc
  , anObject = require('./$.an-object');

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey){
    var desc = getDesc(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.an-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.define-property.js":[function(require,module,exports){
// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var $        = require('./$')
  , $export  = require('./$.export')
  , anObject = require('./$.an-object');

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * require('./$.fails')(function(){
  Reflect.defineProperty($.setDesc({}, 1, {value: 1}), 1, {value: 2});
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes){
    anObject(target);
    try {
      $.setDesc(target, propertyKey, attributes);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.an-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.fails":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.construct.js":[function(require,module,exports){
// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $         = require('./$')
  , $export   = require('./$.export')
  , aFunction = require('./$.a-function')
  , anObject  = require('./$.an-object')
  , isObject  = require('./$.is-object')
  , bind      = Function.bind || require('./$.core').Function.prototype.bind;

// MS Edge supports only 2 arguments
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
$export($export.S + $export.F * require('./$.fails')(function(){
  function F(){}
  return !(Reflect.construct(function(){}, [], F) instanceof F);
}), 'Reflect', {
  construct: function construct(Target, args /*, newTarget*/){
    aFunction(Target);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if(Target == newTarget){
      // w/o altered newTarget, optimization for 0-4 arguments
      if(args != undefined)switch(anObject(args).length){
        case 0: return new Target;
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args));
    }
    // with altered newTarget, not support built-in constructors
    var proto    = newTarget.prototype
      , instance = $.create(isObject(proto) ? proto : Object.prototype)
      , result   = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.a-function":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.a-function.js","./$.an-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.core":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.core.js","./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.fails":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js","./$.is-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.apply.js":[function(require,module,exports){
// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = require('./$.export')
  , _apply  = Function.apply;

$export($export.S, 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList){
    return _apply.call(target, thisArgument, argumentsList);
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.promise.js":[function(require,module,exports){
'use strict';
var $          = require('./$')
  , LIBRARY    = require('./$.library')
  , global     = require('./$.global')
  , ctx        = require('./$.ctx')
  , classof    = require('./$.classof')
  , $export    = require('./$.export')
  , isObject   = require('./$.is-object')
  , anObject   = require('./$.an-object')
  , aFunction  = require('./$.a-function')
  , strictNew  = require('./$.strict-new')
  , forOf      = require('./$.for-of')
  , setProto   = require('./$.set-proto').set
  , same       = require('./$.same-value')
  , SPECIES    = require('./$.wks')('species')
  , speciesConstructor = require('./$.species-constructor')
  , asap       = require('./$.microtask')
  , PROMISE    = 'Promise'
  , process    = global.process
  , isNode     = classof(process) == 'process'
  , P          = global[PROMISE]
  , Wrapper;

var testResolve = function(sub){
  var test = new P(function(){});
  if(sub)test.constructor = Object;
  return P.resolve(test) === test;
};

var USE_NATIVE = function(){
  var works = false;
  function P2(x){
    var self = new P(x);
    setProto(self, P2.prototype);
    return self;
  }
  try {
    works = P && P.resolve && testResolve();
    setProto(P2, P);
    P2.prototype = $.create(P.prototype, {constructor: {value: P2}});
    // actual Firefox has broken subclass support, test that
    if(!(P2.resolve(5).then(function(){}) instanceof P2)){
      works = false;
    }
    // actual V8 bug, https://code.google.com/p/v8/issues/detail?id=4162
    if(works && require('./$.descriptors')){
      var thenableThenGotten = false;
      P.resolve($.setDesc({}, 'then', {
        get: function(){ thenableThenGotten = true; }
      }));
      works = thenableThenGotten;
    }
  } catch(e){ works = false; }
  return works;
}();

// helpers
var sameConstructor = function(a, b){
  // library wrapper special case
  if(LIBRARY && a === P && b === Wrapper)return true;
  return same(a, b);
};
var getConstructor = function(C){
  var S = anObject(C)[SPECIES];
  return S != undefined ? S : C;
};
var isThenable = function(it){
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var PromiseCapability = function(C){
  var resolve, reject;
  this.promise = new C(function($$resolve, $$reject){
    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject  = $$reject;
  });
  this.resolve = aFunction(resolve),
  this.reject  = aFunction(reject)
};
var perform = function(exec){
  try {
    exec();
  } catch(e){
    return {error: e};
  }
};
var notify = function(record, isReject){
  if(record.n)return;
  record.n = true;
  var chain = record.c;
  asap(function(){
    var value = record.v
      , ok    = record.s == 1
      , i     = 0;
    var run = function(reaction){
      var handler = ok ? reaction.ok : reaction.fail
        , resolve = reaction.resolve
        , reject  = reaction.reject
        , result, then;
      try {
        if(handler){
          if(!ok)record.h = true;
          result = handler === true ? value : handler(value);
          if(result === reaction.promise){
            reject(TypeError('Promise-chain cycle'));
          } else if(then = isThenable(result)){
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch(e){
        reject(e);
      }
    };
    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
    chain.length = 0;
    record.n = false;
    if(isReject)setTimeout(function(){
      var promise = record.p
        , handler, console;
      if(isUnhandled(promise)){
        if(isNode){
          process.emit('unhandledRejection', value, promise);
        } else if(handler = global.onunhandledrejection){
          handler({promise: promise, reason: value});
        } else if((console = global.console) && console.error){
          console.error('Unhandled promise rejection', value);
        }
      } record.a = undefined;
    }, 1);
  });
};
var isUnhandled = function(promise){
  var record = promise._d
    , chain  = record.a || record.c
    , i      = 0
    , reaction;
  if(record.h)return false;
  while(chain.length > i){
    reaction = chain[i++];
    if(reaction.fail || !isUnhandled(reaction.promise))return false;
  } return true;
};
var $reject = function(value){
  var record = this;
  if(record.d)return;
  record.d = true;
  record = record.r || record; // unwrap
  record.v = value;
  record.s = 2;
  record.a = record.c.slice();
  notify(record, true);
};
var $resolve = function(value){
  var record = this
    , then;
  if(record.d)return;
  record.d = true;
  record = record.r || record; // unwrap
  try {
    if(record.p === value)throw TypeError("Promise can't be resolved itself");
    if(then = isThenable(value)){
      asap(function(){
        var wrapper = {r: record, d: false}; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch(e){
          $reject.call(wrapper, e);
        }
      });
    } else {
      record.v = value;
      record.s = 1;
      notify(record, false);
    }
  } catch(e){
    $reject.call({r: record, d: false}, e); // wrap
  }
};

// constructor polyfill
if(!USE_NATIVE){
  // 25.4.3.1 Promise(executor)
  P = function Promise(executor){
    aFunction(executor);
    var record = this._d = {
      p: strictNew(this, P, PROMISE),         // <- promise
      c: [],                                  // <- awaiting reactions
      a: undefined,                           // <- checked in isUnhandled reactions
      s: 0,                                   // <- state
      d: false,                               // <- done
      v: undefined,                           // <- value
      h: false,                               // <- handled rejection
      n: false                                // <- notify
    };
    try {
      executor(ctx($resolve, record, 1), ctx($reject, record, 1));
    } catch(err){
      $reject.call(record, err);
    }
  };
  require('./$.redefine-all')(P.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected){
      var reaction = new PromiseCapability(speciesConstructor(this, P))
        , promise  = reaction.promise
        , record   = this._d;
      reaction.ok   = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      record.c.push(reaction);
      if(record.a)record.a.push(reaction);
      if(record.s)notify(record, false);
      return promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function(onRejected){
      return this.then(undefined, onRejected);
    }
  });
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: P});
require('./$.set-to-string-tag')(P, PROMISE);
require('./$.set-species')(PROMISE);
Wrapper = require('./$.core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r){
    var capability = new PromiseCapability(this)
      , $$reject   = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (!USE_NATIVE || testResolve(true)), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x){
    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
    if(x instanceof P && sameConstructor(x.constructor, this))return x;
    var capability = new PromiseCapability(this)
      , $$resolve  = capability.resolve;
    $$resolve(x);
    return capability.promise;
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./$.iter-detect')(function(iter){
  P.all(iter)['catch'](function(){});
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable){
    var C          = getConstructor(this)
      , capability = new PromiseCapability(C)
      , resolve    = capability.resolve
      , reject     = capability.reject
      , values     = [];
    var abrupt = perform(function(){
      forOf(iterable, false, values.push, values);
      var remaining = values.length
        , results   = Array(remaining);
      if(remaining)$.each.call(values, function(promise, index){
        var alreadyCalled = false;
        C.resolve(promise).then(function(value){
          if(alreadyCalled)return;
          alreadyCalled = true;
          results[index] = value;
          --remaining || resolve(results);
        }, reject);
      });
      else resolve(results);
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable){
    var C          = getConstructor(this)
      , capability = new PromiseCapability(C)
      , reject     = capability.reject;
    var abrupt = perform(function(){
      forOf(iterable, false, function(promise){
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  }
});
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.a-function":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.a-function.js","./$.an-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.classof":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.classof.js","./$.core":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.core.js","./$.ctx":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.ctx.js","./$.descriptors":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.descriptors.js","./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.for-of":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.for-of.js","./$.global":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js","./$.is-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.iter-detect":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-detect.js","./$.library":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.library.js","./$.microtask":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.microtask.js","./$.redefine-all":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.redefine-all.js","./$.same-value":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.same-value.js","./$.set-proto":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.set-proto.js","./$.set-species":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.set-species.js","./$.set-to-string-tag":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.set-to-string-tag.js","./$.species-constructor":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.species-constructor.js","./$.strict-new":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.strict-new.js","./$.wks":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.species-constructor.js":[function(require,module,exports){
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject  = require('./$.an-object')
  , aFunction = require('./$.a-function')
  , SPECIES   = require('./$.wks')('species');
module.exports = function(O, D){
  var C = anObject(O).constructor, S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};
},{"./$.a-function":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.a-function.js","./$.an-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.wks":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.microtask.js":[function(require,module,exports){
var global    = require('./$.global')
  , macrotask = require('./$.task').set
  , Observer  = global.MutationObserver || global.WebKitMutationObserver
  , process   = global.process
  , Promise   = global.Promise
  , isNode    = require('./$.cof')(process) == 'process'
  , head, last, notify;

var flush = function(){
  var parent, domain, fn;
  if(isNode && (parent = process.domain)){
    process.domain = null;
    parent.exit();
  }
  while(head){
    domain = head.domain;
    fn     = head.fn;
    if(domain)domain.enter();
    fn(); // <- currently we use it only for Promise - try / catch not required
    if(domain)domain.exit();
    head = head.next;
  } last = undefined;
  if(parent)parent.enter();
};

// Node.js
if(isNode){
  notify = function(){
    process.nextTick(flush);
  };
// browsers with MutationObserver
} else if(Observer){
  var toggle = 1
    , node   = document.createTextNode('');
  new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
  notify = function(){
    node.data = toggle = -toggle;
  };
// environments with maybe non-completely correct, but existent Promise
} else if(Promise && Promise.resolve){
  notify = function(){
    Promise.resolve().then(flush);
  };
// for other environments - macrotask based on:
// - setImmediate
// - MessageChannel
// - window.postMessag
// - onreadystatechange
// - setTimeout
} else {
  notify = function(){
    // strange IE + webpack dev server bug - use .call(global)
    macrotask.call(global, flush);
  };
}

module.exports = function asap(fn){
  var task = {fn: fn, next: undefined, domain: isNode && process.domain};
  if(last)last.next = task;
  if(!head){
    head = task;
    notify();
  } last = task;
};
},{"./$.cof":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.cof.js","./$.global":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js","./$.task":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.task.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.task.js":[function(require,module,exports){
var ctx                = require('./$.ctx')
  , invoke             = require('./$.invoke')
  , html               = require('./$.html')
  , cel                = require('./$.dom-create')
  , global             = require('./$.global')
  , process            = global.process
  , setTask            = global.setImmediate
  , clearTask          = global.clearImmediate
  , MessageChannel     = global.MessageChannel
  , counter            = 0
  , queue              = {}
  , ONREADYSTATECHANGE = 'onreadystatechange'
  , defer, channel, port;
var run = function(){
  var id = +this;
  if(queue.hasOwnProperty(id)){
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listner = function(event){
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if(!setTask || !clearTask){
  setTask = function setImmediate(fn){
    var args = [], i = 1;
    while(arguments.length > i)args.push(arguments[i++]);
    queue[++counter] = function(){
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id){
    delete queue[id];
  };
  // Node.js 0.8-
  if(require('./$.cof')(process) == 'process'){
    defer = function(id){
      process.nextTick(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if(MessageChannel){
    channel = new MessageChannel;
    port    = channel.port2;
    channel.port1.onmessage = listner;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
    defer = function(id){
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listner, false);
  // IE8-
  } else if(ONREADYSTATECHANGE in cel('script')){
    defer = function(id){
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function(id){
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set:   setTask,
  clear: clearTask
};
},{"./$.cof":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.cof.js","./$.ctx":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.ctx.js","./$.dom-create":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.dom-create.js","./$.global":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js","./$.html":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.html.js","./$.invoke":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.invoke.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.to-string.js":[function(require,module,exports){
'use strict';
// 19.1.3.6 Object.prototype.toString()
var classof = require('./$.classof')
  , test    = {};
test[require('./$.wks')('toStringTag')] = 'z';
if(test + '' != '[object z]'){
  require('./$.redefine')(Object.prototype, 'toString', function toString(){
    return '[object ' + classof(this) + ']';
  }, true);
}
},{"./$.classof":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.classof.js","./$.redefine":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.redefine.js","./$.wks":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.set-prototype-of.js":[function(require,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = require('./$.export');
$export($export.S, 'Object', {setPrototypeOf: require('./$.set-proto').set});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.set-proto":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.set-proto.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.set-proto.js":[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var getDesc  = require('./$').getDesc
  , isObject = require('./$.is-object')
  , anObject = require('./$.an-object');
var check = function(O, proto){
  anObject(O);
  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function(test, buggy, set){
      try {
        set = require('./$.ctx')(Function.call, getDesc(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch(e){ buggy = true; }
      return function setPrototypeOf(O, proto){
        check(O, proto);
        if(buggy)O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.an-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.ctx":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.ctx.js","./$.is-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.seal.js":[function(require,module,exports){
// 19.1.2.17 Object.seal(O)
var isObject = require('./$.is-object');

require('./$.object-sap')('seal', function($seal){
  return function seal(it){
    return $seal && isObject(it) ? $seal(it) : it;
  };
});
},{"./$.is-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.object-sap":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-sap.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.prevent-extensions.js":[function(require,module,exports){
// 19.1.2.15 Object.preventExtensions(O)
var isObject = require('./$.is-object');

require('./$.object-sap')('preventExtensions', function($preventExtensions){
  return function preventExtensions(it){
    return $preventExtensions && isObject(it) ? $preventExtensions(it) : it;
  };
});
},{"./$.is-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.object-sap":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-sap.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.keys.js":[function(require,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = require('./$.to-object');

require('./$.object-sap')('keys', function($keys){
  return function keys(it){
    return $keys(toObject(it));
  };
});
},{"./$.object-sap":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-sap.js","./$.to-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-object.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.is.js":[function(require,module,exports){
// 19.1.3.10 Object.is(value1, value2)
var $export = require('./$.export');
$export($export.S, 'Object', {is: require('./$.same-value')});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.same-value":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.same-value.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.same-value.js":[function(require,module,exports){
// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y){
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};
},{}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.is-sealed.js":[function(require,module,exports){
// 19.1.2.13 Object.isSealed(O)
var isObject = require('./$.is-object');

require('./$.object-sap')('isSealed', function($isSealed){
  return function isSealed(it){
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});
},{"./$.is-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.object-sap":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-sap.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.is-frozen.js":[function(require,module,exports){
// 19.1.2.12 Object.isFrozen(O)
var isObject = require('./$.is-object');

require('./$.object-sap')('isFrozen', function($isFrozen){
  return function isFrozen(it){
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});
},{"./$.is-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.object-sap":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-sap.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.is-extensible.js":[function(require,module,exports){
// 19.1.2.11 Object.isExtensible(O)
var isObject = require('./$.is-object');

require('./$.object-sap')('isExtensible', function($isExtensible){
  return function isExtensible(it){
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});
},{"./$.is-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.object-sap":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-sap.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.get-prototype-of.js":[function(require,module,exports){
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = require('./$.to-object');

require('./$.object-sap')('getPrototypeOf', function($getPrototypeOf){
  return function getPrototypeOf(it){
    return $getPrototypeOf(toObject(it));
  };
});
},{"./$.object-sap":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-sap.js","./$.to-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-object.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.get-own-property-names.js":[function(require,module,exports){
// 19.1.2.7 Object.getOwnPropertyNames(O)
require('./$.object-sap')('getOwnPropertyNames', function(){
  return require('./$.get-names').get;
});
},{"./$.get-names":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.get-names.js","./$.object-sap":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-sap.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.get-names.js":[function(require,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./$.to-iobject')
  , getNames  = require('./$').getNames
  , toString  = {}.toString;

var windowNames = typeof window == 'object' && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function(it){
  try {
    return getNames(it);
  } catch(e){
    return windowNames.slice();
  }
};

module.exports.get = function getOwnPropertyNames(it){
  if(windowNames && toString.call(it) == '[object Window]')return getWindowNames(it);
  return getNames(toIObject(it));
};
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.to-iobject":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-iobject.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.get-own-property-descriptor.js":[function(require,module,exports){
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = require('./$.to-iobject');

require('./$.object-sap')('getOwnPropertyDescriptor', function($getOwnPropertyDescriptor){
  return function getOwnPropertyDescriptor(it, key){
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});
},{"./$.object-sap":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-sap.js","./$.to-iobject":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-iobject.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.freeze.js":[function(require,module,exports){
// 19.1.2.5 Object.freeze(O)
var isObject = require('./$.is-object');

require('./$.object-sap')('freeze', function($freeze){
  return function freeze(it){
    return $freeze && isObject(it) ? $freeze(it) : it;
  };
});
},{"./$.is-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.object-sap":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-sap.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-sap.js":[function(require,module,exports){
// most Object methods by ES6 should accept primitives
var $export = require('./$.export')
  , core    = require('./$.core')
  , fails   = require('./$.fails');
module.exports = function(KEY, exec){
  var fn  = (core.Object || {})[KEY] || Object[KEY]
    , exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
};
},{"./$.core":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.core.js","./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.fails":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.assign.js":[function(require,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $export = require('./$.export');

$export($export.S + $export.F, 'Object', {assign: require('./$.object-assign')});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.object-assign":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-assign.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-assign.js":[function(require,module,exports){
// 19.1.2.1 Object.assign(target, source, ...)
var $        = require('./$')
  , toObject = require('./$.to-object')
  , IObject  = require('./$.iobject');

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = require('./$.fails')(function(){
  var a = Object.assign
    , A = {}
    , B = {}
    , S = Symbol()
    , K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function(k){ B[k] = k; });
  return a({}, A)[S] != 7 || Object.keys(a({}, B)).join('') != K;
}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
  var T     = toObject(target)
    , $$    = arguments
    , $$len = $$.length
    , index = 1
    , getKeys    = $.getKeys
    , getSymbols = $.getSymbols
    , isEnum     = $.isEnum;
  while($$len > index){
    var S      = IObject($$[index++])
      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
      , length = keys.length
      , j      = 0
      , key;
    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
  }
  return T;
} : Object.assign;
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.fails":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js","./$.iobject":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iobject.js","./$.to-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-object.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.parse-int.js":[function(require,module,exports){
// 20.1.2.13 Number.parseInt(string, radix)
var $export = require('./$.export');

$export($export.S, 'Number', {parseInt: parseInt});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.parse-float.js":[function(require,module,exports){
// 20.1.2.12 Number.parseFloat(string)
var $export = require('./$.export');

$export($export.S, 'Number', {parseFloat: parseFloat});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.min-safe-integer.js":[function(require,module,exports){
// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = require('./$.export');

$export($export.S, 'Number', {MIN_SAFE_INTEGER: -0x1fffffffffffff});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.max-safe-integer.js":[function(require,module,exports){
// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = require('./$.export');

$export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.is-safe-integer.js":[function(require,module,exports){
// 20.1.2.5 Number.isSafeInteger(number)
var $export   = require('./$.export')
  , isInteger = require('./$.is-integer')
  , abs       = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number){
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.is-integer":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-integer.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.is-nan.js":[function(require,module,exports){
// 20.1.2.4 Number.isNaN(number)
var $export = require('./$.export');

$export($export.S, 'Number', {
  isNaN: function isNaN(number){
    return number != number;
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.is-integer.js":[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var $export = require('./$.export');

$export($export.S, 'Number', {isInteger: require('./$.is-integer')});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.is-integer":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-integer.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-integer.js":[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var isObject = require('./$.is-object')
  , floor    = Math.floor;
module.exports = function isInteger(it){
  return !isObject(it) && isFinite(it) && floor(it) === it;
};
},{"./$.is-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.is-finite.js":[function(require,module,exports){
// 20.1.2.2 Number.isFinite(number)
var $export   = require('./$.export')
  , _isFinite = require('./$.global').isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it){
    return typeof it == 'number' && _isFinite(it);
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.global":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.epsilon.js":[function(require,module,exports){
// 20.1.2.1 Number.EPSILON
var $export = require('./$.export');

$export($export.S, 'Number', {EPSILON: Math.pow(2, -52)});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.constructor.js":[function(require,module,exports){
'use strict';
var $           = require('./$')
  , global      = require('./$.global')
  , has         = require('./$.has')
  , cof         = require('./$.cof')
  , toPrimitive = require('./$.to-primitive')
  , fails       = require('./$.fails')
  , $trim       = require('./$.string-trim').trim
  , NUMBER      = 'Number'
  , $Number     = global[NUMBER]
  , Base        = $Number
  , proto       = $Number.prototype
  // Opera ~12 has broken Object#toString
  , BROKEN_COF  = cof($.create(proto)) == NUMBER
  , TRIM        = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function(argument){
  var it = toPrimitive(argument, false);
  if(typeof it == 'string' && it.length > 2){
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0)
      , third, radix, maxCode;
    if(first === 43 || first === 45){
      third = it.charCodeAt(2);
      if(third === 88 || third === 120)return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if(first === 48){
      switch(it.charCodeAt(1)){
        case 66 : case 98  : radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79 : case 111 : radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default : return +it;
      }
      for(var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++){
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if(code < 48 || code > maxCode)return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if(!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')){
  $Number = function Number(value){
    var it = arguments.length < 1 ? 0 : value
      , that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function(){ proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? new Base(toNumber(it)) : toNumber(it);
  };
  $.each.call(require('./$.descriptors') ? $.getNames(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), function(key){
    if(has(Base, key) && !has($Number, key)){
      $.setDesc($Number, key, $.getDesc(Base, key));
    }
  });
  $Number.prototype = proto;
  proto.constructor = $Number;
  require('./$.redefine')(global, NUMBER, $Number);
}
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.cof":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.cof.js","./$.descriptors":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.descriptors.js","./$.fails":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js","./$.global":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js","./$.has":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.has.js","./$.redefine":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.redefine.js","./$.string-trim":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-trim.js","./$.to-primitive":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-primitive.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-primitive.js":[function(require,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./$.is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function(it, S){
  if(!isObject(it))return it;
  var fn, val;
  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  throw TypeError("Can't convert object to primitive value");
};
},{"./$.is-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-trim.js":[function(require,module,exports){
var $export = require('./$.export')
  , defined = require('./$.defined')
  , fails   = require('./$.fails')
  , spaces  = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
      '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF'
  , space   = '[' + spaces + ']'
  , non     = '\u200b\u0085'
  , ltrim   = RegExp('^' + space + space + '*')
  , rtrim   = RegExp(space + space + '*$');

var exporter = function(KEY, exec){
  var exp  = {};
  exp[KEY] = exec(trim);
  $export($export.P + $export.F * fails(function(){
    return !!spaces[KEY]() || non[KEY]() != non;
  }), 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function(string, TYPE){
  string = String(defined(string));
  if(TYPE & 1)string = string.replace(ltrim, '');
  if(TYPE & 2)string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;
},{"./$.defined":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.defined.js","./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.fails":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.trunc.js":[function(require,module,exports){
// 20.2.2.34 Math.trunc(x)
var $export = require('./$.export');

$export($export.S, 'Math', {
  trunc: function trunc(it){
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.tanh.js":[function(require,module,exports){
// 20.2.2.33 Math.tanh(x)
var $export = require('./$.export')
  , expm1   = require('./$.math-expm1')
  , exp     = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x){
    var a = expm1(x = +x)
      , b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.math-expm1":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.math-expm1.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.sinh.js":[function(require,module,exports){
// 20.2.2.30 Math.sinh(x)
var $export = require('./$.export')
  , expm1   = require('./$.math-expm1')
  , exp     = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * require('./$.fails')(function(){
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x){
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.fails":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js","./$.math-expm1":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.math-expm1.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.sign.js":[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
var $export = require('./$.export');

$export($export.S, 'Math', {sign: require('./$.math-sign')});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.math-sign":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.math-sign.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.log2.js":[function(require,module,exports){
// 20.2.2.22 Math.log2(x)
var $export = require('./$.export');

$export($export.S, 'Math', {
  log2: function log2(x){
    return Math.log(x) / Math.LN2;
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.log1p.js":[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
var $export = require('./$.export');

$export($export.S, 'Math', {log1p: require('./$.math-log1p')});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.math-log1p":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.math-log1p.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.log10.js":[function(require,module,exports){
// 20.2.2.21 Math.log10(x)
var $export = require('./$.export');

$export($export.S, 'Math', {
  log10: function log10(x){
    return Math.log(x) / Math.LN10;
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.imul.js":[function(require,module,exports){
// 20.2.2.18 Math.imul(x, y)
var $export = require('./$.export')
  , $imul   = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * require('./$.fails')(function(){
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y){
    var UINT16 = 0xffff
      , xn = +x
      , yn = +y
      , xl = UINT16 & xn
      , yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.fails":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.hypot.js":[function(require,module,exports){
// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = require('./$.export')
  , abs     = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2){ // eslint-disable-line no-unused-vars
    var sum   = 0
      , i     = 0
      , $$    = arguments
      , $$len = $$.length
      , larg  = 0
      , arg, div;
    while(i < $$len){
      arg = abs($$[i++]);
      if(larg < arg){
        div  = larg / arg;
        sum  = sum * div * div + 1;
        larg = arg;
      } else if(arg > 0){
        div  = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.fround.js":[function(require,module,exports){
// 20.2.2.16 Math.fround(x)
var $export   = require('./$.export')
  , sign      = require('./$.math-sign')
  , pow       = Math.pow
  , EPSILON   = pow(2, -52)
  , EPSILON32 = pow(2, -23)
  , MAX32     = pow(2, 127) * (2 - EPSILON32)
  , MIN32     = pow(2, -126);

var roundTiesToEven = function(n){
  return n + 1 / EPSILON - 1 / EPSILON;
};


$export($export.S, 'Math', {
  fround: function fround(x){
    var $abs  = Math.abs(x)
      , $sign = sign(x)
      , a, result;
    if($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
    a = (1 + EPSILON32 / EPSILON) * $abs;
    result = a - (a - $abs);
    if(result > MAX32 || result != result)return $sign * Infinity;
    return $sign * result;
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.math-sign":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.math-sign.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.expm1.js":[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $export = require('./$.export');

$export($export.S, 'Math', {expm1: require('./$.math-expm1')});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.math-expm1":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.math-expm1.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.math-expm1.js":[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
module.exports = Math.expm1 || function expm1(x){
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
};
},{}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.cosh.js":[function(require,module,exports){
// 20.2.2.12 Math.cosh(x)
var $export = require('./$.export')
  , exp     = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x){
    return (exp(x = +x) + exp(-x)) / 2;
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.clz32.js":[function(require,module,exports){
// 20.2.2.11 Math.clz32(x)
var $export = require('./$.export');

$export($export.S, 'Math', {
  clz32: function clz32(x){
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.cbrt.js":[function(require,module,exports){
// 20.2.2.9 Math.cbrt(x)
var $export = require('./$.export')
  , sign    = require('./$.math-sign');

$export($export.S, 'Math', {
  cbrt: function cbrt(x){
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.math-sign":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.math-sign.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.math-sign.js":[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x){
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};
},{}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.atanh.js":[function(require,module,exports){
// 20.2.2.7 Math.atanh(x)
var $export = require('./$.export');

$export($export.S, 'Math', {
  atanh: function atanh(x){
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.asinh.js":[function(require,module,exports){
// 20.2.2.5 Math.asinh(x)
var $export = require('./$.export');

function asinh(x){
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

$export($export.S, 'Math', {asinh: asinh});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.acosh.js":[function(require,module,exports){
// 20.2.2.3 Math.acosh(x)
var $export = require('./$.export')
  , log1p   = require('./$.math-log1p')
  , sqrt    = Math.sqrt
  , $acosh  = Math.acosh;

// V8 bug https://code.google.com/p/v8/issues/detail?id=3509
$export($export.S + $export.F * !($acosh && Math.floor($acosh(Number.MAX_VALUE)) == 710), 'Math', {
  acosh: function acosh(x){
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.math-log1p":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.math-log1p.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.math-log1p.js":[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x){
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};
},{}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.map.js":[function(require,module,exports){
'use strict';
var strong = require('./$.collection-strong');

// 23.1 Map Objects
require('./$.collection')('Map', function(get){
  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key){
    var entry = strong.getEntry(this, key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value){
    return strong.def(this, key === 0 ? 0 : key, value);
  }
}, strong, true);
},{"./$.collection":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.collection.js","./$.collection-strong":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.collection-strong.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.collection.js":[function(require,module,exports){
'use strict';
var global         = require('./$.global')
  , $export        = require('./$.export')
  , redefine       = require('./$.redefine')
  , redefineAll    = require('./$.redefine-all')
  , forOf          = require('./$.for-of')
  , strictNew      = require('./$.strict-new')
  , isObject       = require('./$.is-object')
  , fails          = require('./$.fails')
  , $iterDetect    = require('./$.iter-detect')
  , setToStringTag = require('./$.set-to-string-tag');

module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
  var Base  = global[NAME]
    , C     = Base
    , ADDER = IS_MAP ? 'set' : 'add'
    , proto = C && C.prototype
    , O     = {};
  var fixMethod = function(KEY){
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function(a){
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a){
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a){
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
    new C().entries().next();
  }))){
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
  } else {
    var instance             = new C
      // early implementations not supports chaining
      , HASNT_CHAINING       = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance
      // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
      , THROWS_ON_PRIMITIVES = fails(function(){ instance.has(1); })
      // most early implementations doesn't supports iterables, most modern - not close it correctly
      , ACCEPT_ITERABLES     = $iterDetect(function(iter){ new C(iter); }) // eslint-disable-line no-new
      // for early implementations -0 and +0 not the same
      , BUGGY_ZERO;
    if(!ACCEPT_ITERABLES){ 
      C = wrapper(function(target, iterable){
        strictNew(target, C, NAME);
        var that = new Base;
        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    IS_WEAK || instance.forEach(function(val, key){
      BUGGY_ZERO = 1 / key === -Infinity;
    });
    if(THROWS_ON_PRIMITIVES || BUGGY_ZERO){
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if(BUGGY_ZERO || HASNT_CHAINING)fixMethod(ADDER);
    // weak collections should not contains .clear method
    if(IS_WEAK && proto.clear)delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

  return C;
};
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.fails":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js","./$.for-of":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.for-of.js","./$.global":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js","./$.is-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.iter-detect":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-detect.js","./$.redefine":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.redefine.js","./$.redefine-all":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.redefine-all.js","./$.set-to-string-tag":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.set-to-string-tag.js","./$.strict-new":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.strict-new.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.collection-strong.js":[function(require,module,exports){
'use strict';
var $            = require('./$')
  , hide         = require('./$.hide')
  , redefineAll  = require('./$.redefine-all')
  , ctx          = require('./$.ctx')
  , strictNew    = require('./$.strict-new')
  , defined      = require('./$.defined')
  , forOf        = require('./$.for-of')
  , $iterDefine  = require('./$.iter-define')
  , step         = require('./$.iter-step')
  , ID           = require('./$.uid')('id')
  , $has         = require('./$.has')
  , isObject     = require('./$.is-object')
  , setSpecies   = require('./$.set-species')
  , DESCRIPTORS  = require('./$.descriptors')
  , isExtensible = Object.isExtensible || isObject
  , SIZE         = DESCRIPTORS ? '_s' : 'size'
  , id           = 0;

var fastKey = function(it, create){
  // return primitive with prefix
  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if(!$has(it, ID)){
    // can't set id to frozen object
    if(!isExtensible(it))return 'F';
    // not necessary to add id
    if(!create)return 'E';
    // add missing object id
    hide(it, ID, ++id);
  // return object id with prefix
  } return 'O' + it[ID];
};

var getEntry = function(that, key){
  // fast case
  var index = fastKey(key), entry;
  if(index !== 'F')return that._i[index];
  // frozen object case
  for(entry = that._f; entry; entry = entry.n){
    if(entry.k == key)return entry;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      strictNew(that, C, NAME);
      that._i = $.create(null); // index
      that._f = undefined;      // first entry
      that._l = undefined;      // last entry
      that[SIZE] = 0;           // size
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear(){
        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
          entry.r = true;
          if(entry.p)entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function(key){
        var that  = this
          , entry = getEntry(that, key);
        if(entry){
          var next = entry.n
            , prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if(prev)prev.n = next;
          if(next)next.p = prev;
          if(that._f == entry)that._f = next;
          if(that._l == entry)that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /*, that = undefined */){
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
          , entry;
        while(entry = entry ? entry.n : this._f){
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while(entry && entry.r)entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key){
        return !!getEntry(this, key);
      }
    });
    if(DESCRIPTORS)$.setDesc(C.prototype, 'size', {
      get: function(){
        return defined(this[SIZE]);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var entry = getEntry(that, key)
      , prev, index;
    // change existing entry
    if(entry){
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if(!that._f)that._f = entry;
      if(prev)prev.n = entry;
      that[SIZE]++;
      // add to index
      if(index !== 'F')that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function(C, NAME, IS_MAP){
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function(iterated, kind){
      this._t = iterated;  // target
      this._k = kind;      // kind
      this._l = undefined; // previous
    }, function(){
      var that  = this
        , kind  = that._k
        , entry = that._l;
      // revert to the last existing entry
      while(entry && entry.r)entry = entry.p;
      // get next entry
      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if(kind == 'keys'  )return step(0, entry.k);
      if(kind == 'values')return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.ctx":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.ctx.js","./$.defined":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.defined.js","./$.descriptors":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.descriptors.js","./$.for-of":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.for-of.js","./$.has":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.has.js","./$.hide":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.hide.js","./$.is-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.iter-define":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-define.js","./$.iter-step":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-step.js","./$.redefine-all":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.redefine-all.js","./$.set-species":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.set-species.js","./$.strict-new":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.strict-new.js","./$.uid":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.uid.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.strict-new.js":[function(require,module,exports){
module.exports = function(it, Constructor, name){
  if(!(it instanceof Constructor))throw TypeError(name + ": use the 'new' operator!");
  return it;
};
},{}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.redefine-all.js":[function(require,module,exports){
var redefine = require('./$.redefine');
module.exports = function(target, src){
  for(var key in src)redefine(target, key, src[key]);
  return target;
};
},{"./$.redefine":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.redefine.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.for-of.js":[function(require,module,exports){
var ctx         = require('./$.ctx')
  , call        = require('./$.iter-call')
  , isArrayIter = require('./$.is-array-iter')
  , anObject    = require('./$.an-object')
  , toLength    = require('./$.to-length')
  , getIterFn   = require('./core.get-iterator-method');
module.exports = function(iterable, entries, fn, that){
  var iterFn = getIterFn(iterable)
    , f      = ctx(fn, that, entries ? 2 : 1)
    , index  = 0
    , length, step, iterator;
  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
    entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
    call(iterator, f, step.value, entries);
  }
};
},{"./$.an-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.ctx":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.ctx.js","./$.is-array-iter":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-array-iter.js","./$.iter-call":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-call.js","./$.to-length":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-length.js","./core.get-iterator-method":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/core.get-iterator-method.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.function.name.js":[function(require,module,exports){
var setDesc    = require('./$').setDesc
  , createDesc = require('./$.property-desc')
  , has        = require('./$.has')
  , FProto     = Function.prototype
  , nameRE     = /^\s*function ([^ (]*)/
  , NAME       = 'name';
// 19.2.4.2 name
NAME in FProto || require('./$.descriptors') && setDesc(FProto, NAME, {
  configurable: true,
  get: function(){
    var match = ('' + this).match(nameRE)
      , name  = match ? match[1] : '';
    has(this, NAME) || setDesc(this, NAME, createDesc(5, name));
    return name;
  }
});
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.descriptors":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.descriptors.js","./$.has":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.has.js","./$.property-desc":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.property-desc.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.function.has-instance.js":[function(require,module,exports){
'use strict';
var $             = require('./$')
  , isObject      = require('./$.is-object')
  , HAS_INSTANCE  = require('./$.wks')('hasInstance')
  , FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if(!(HAS_INSTANCE in FunctionProto))$.setDesc(FunctionProto, HAS_INSTANCE, {value: function(O){
  if(typeof this != 'function' || !isObject(O))return false;
  if(!isObject(this.prototype))return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while(O = $.getProto(O))if(this.prototype === O)return true;
  return false;
}});
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.is-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.wks":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.species.js":[function(require,module,exports){
require('./$.set-species')('Array');
},{"./$.set-species":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.set-species.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.set-species.js":[function(require,module,exports){
'use strict';
var global      = require('./$.global')
  , $           = require('./$')
  , DESCRIPTORS = require('./$.descriptors')
  , SPECIES     = require('./$.wks')('species');

module.exports = function(KEY){
  var C = global[KEY];
  if(DESCRIPTORS && C && !C[SPECIES])$.setDesc(C, SPECIES, {
    configurable: true,
    get: function(){ return this; }
  });
};
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.descriptors":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.descriptors.js","./$.global":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js","./$.wks":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.of.js":[function(require,module,exports){
'use strict';
var $export = require('./$.export');

// WebKit Array.of isn't generic
$export($export.S + $export.F * require('./$.fails')(function(){
  function F(){}
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */){
    var index  = 0
      , $$     = arguments
      , $$len  = $$.length
      , result = new (typeof this == 'function' ? this : Array)($$len);
    while($$len > index)result[index] = $$[index++];
    result.length = $$len;
    return result;
  }
});
},{"./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.fails":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.iterator.js":[function(require,module,exports){
'use strict';
var addToUnscopables = require('./$.add-to-unscopables')
  , step             = require('./$.iter-step')
  , Iterators        = require('./$.iterators')
  , toIObject        = require('./$.to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./$.iter-define')(Array, 'Array', function(iterated, kind){
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , kind  = this._k
    , index = this._i++;
  if(!O || index >= O.length){
    this._t = undefined;
    return step(1);
  }
  if(kind == 'keys'  )return step(0, index);
  if(kind == 'values')return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');
},{"./$.add-to-unscopables":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.add-to-unscopables.js","./$.iter-define":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-define.js","./$.iter-step":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-step.js","./$.iterators":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iterators.js","./$.to-iobject":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-iobject.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-step.js":[function(require,module,exports){
module.exports = function(done, value){
  return {value: value, done: !!done};
};
},{}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-define.js":[function(require,module,exports){
'use strict';
var LIBRARY        = require('./$.library')
  , $export        = require('./$.export')
  , redefine       = require('./$.redefine')
  , hide           = require('./$.hide')
  , has            = require('./$.has')
  , Iterators      = require('./$.iterators')
  , $iterCreate    = require('./$.iter-create')
  , setToStringTag = require('./$.set-to-string-tag')
  , getProto       = require('./$').getProto
  , ITERATOR       = require('./$.wks')('iterator')
  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
  , FF_ITERATOR    = '@@iterator'
  , KEYS           = 'keys'
  , VALUES         = 'values';

var returnThis = function(){ return this; };

module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
  $iterCreate(Constructor, NAME, next);
  var getMethod = function(kind){
    if(!BUGGY && kind in proto)return proto[kind];
    switch(kind){
      case KEYS: return function keys(){ return new Constructor(this, kind); };
      case VALUES: return function values(){ return new Constructor(this, kind); };
    } return function entries(){ return new Constructor(this, kind); };
  };
  var TAG        = NAME + ' Iterator'
    , DEF_VALUES = DEFAULT == VALUES
    , VALUES_BUG = false
    , proto      = Base.prototype
    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
    , $default   = $native || getMethod(DEFAULT)
    , methods, key;
  // Fix native
  if($native){
    var IteratorPrototype = getProto($default.call(new Base));
    // Set @@toStringTag to native iterators
    setToStringTag(IteratorPrototype, TAG, true);
    // FF fix
    if(!LIBRARY && has(proto, FF_ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
    // fix Array#{values, @@iterator}.name in V8 / FF
    if(DEF_VALUES && $native.name !== VALUES){
      VALUES_BUG = true;
      $default = function values(){ return $native.call(this); };
    }
  }
  // Define iterator
  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG]  = returnThis;
  if(DEFAULT){
    methods = {
      values:  DEF_VALUES  ? $default : getMethod(VALUES),
      keys:    IS_SET      ? $default : getMethod(KEYS),
      entries: !DEF_VALUES ? $default : getMethod('entries')
    };
    if(FORCED)for(key in methods){
      if(!(key in proto))redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.has":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.has.js","./$.hide":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.hide.js","./$.iter-create":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-create.js","./$.iterators":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iterators.js","./$.library":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.library.js","./$.redefine":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.redefine.js","./$.set-to-string-tag":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.set-to-string-tag.js","./$.wks":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.library.js":[function(require,module,exports){
module.exports = false;
},{}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-create.js":[function(require,module,exports){
'use strict';
var $              = require('./$')
  , descriptor     = require('./$.property-desc')
  , setToStringTag = require('./$.set-to-string-tag')
  , IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./$.hide')(IteratorPrototype, require('./$.wks')('iterator'), function(){ return this; });

module.exports = function(Constructor, NAME, next){
  Constructor.prototype = $.create(IteratorPrototype, {next: descriptor(1, next)});
  setToStringTag(Constructor, NAME + ' Iterator');
};
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.hide":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.hide.js","./$.property-desc":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.property-desc.js","./$.set-to-string-tag":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.set-to-string-tag.js","./$.wks":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.set-to-string-tag.js":[function(require,module,exports){
var def = require('./$').setDesc
  , has = require('./$.has')
  , TAG = require('./$.wks')('toStringTag');

module.exports = function(it, tag, stat){
  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
};
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.has":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.has.js","./$.wks":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.from.js":[function(require,module,exports){
'use strict';
var ctx         = require('./$.ctx')
  , $export     = require('./$.export')
  , toObject    = require('./$.to-object')
  , call        = require('./$.iter-call')
  , isArrayIter = require('./$.is-array-iter')
  , toLength    = require('./$.to-length')
  , getIterFn   = require('./core.get-iterator-method');
$export($export.S + $export.F * !require('./$.iter-detect')(function(iter){ Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
    var O       = toObject(arrayLike)
      , C       = typeof this == 'function' ? this : Array
      , $$      = arguments
      , $$len   = $$.length
      , mapfn   = $$len > 1 ? $$[1] : undefined
      , mapping = mapfn !== undefined
      , index   = 0
      , iterFn  = getIterFn(O)
      , length, result, step, iterator;
    if(mapping)mapfn = ctx(mapfn, $$len > 2 ? $$[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
        result[index] = mapping ? call(iterator, mapfn, [step.value, index], true) : step.value;
      }
    } else {
      length = toLength(O.length);
      for(result = new C(length); length > index; index++){
        result[index] = mapping ? mapfn(O[index], index) : O[index];
      }
    }
    result.length = index;
    return result;
  }
});

},{"./$.ctx":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.ctx.js","./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.is-array-iter":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-array-iter.js","./$.iter-call":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-call.js","./$.iter-detect":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-detect.js","./$.to-length":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-length.js","./$.to-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-object.js","./core.get-iterator-method":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/core.get-iterator-method.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/core.get-iterator-method.js":[function(require,module,exports){
var classof   = require('./$.classof')
  , ITERATOR  = require('./$.wks')('iterator')
  , Iterators = require('./$.iterators');
module.exports = require('./$.core').getIteratorMethod = function(it){
  if(it != undefined)return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};
},{"./$.classof":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.classof.js","./$.core":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.core.js","./$.iterators":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iterators.js","./$.wks":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.classof.js":[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./$.cof')
  , TAG = require('./$.wks')('toStringTag')
  // ES3 wrong here
  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

module.exports = function(it){
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = (O = Object(it))[TAG]) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};
},{"./$.cof":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.cof.js","./$.wks":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-detect.js":[function(require,module,exports){
var ITERATOR     = require('./$.wks')('iterator')
  , SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function(){ SAFE_CLOSING = true; };
  Array.from(riter, function(){ throw 2; });
} catch(e){ /* empty */ }

module.exports = function(exec, skipClosing){
  if(!skipClosing && !SAFE_CLOSING)return false;
  var safe = false;
  try {
    var arr  = [7]
      , iter = arr[ITERATOR]();
    iter.next = function(){ safe = true; };
    arr[ITERATOR] = function(){ return iter; };
    exec(arr);
  } catch(e){ /* empty */ }
  return safe;
};
},{"./$.wks":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-call.js":[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./$.an-object');
module.exports = function(iterator, fn, value, entries){
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch(e){
    var ret = iterator['return'];
    if(ret !== undefined)anObject(ret.call(iterator));
    throw e;
  }
};
},{"./$.an-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-array-iter.js":[function(require,module,exports){
// check on default Array iterator
var Iterators  = require('./$.iterators')
  , ITERATOR   = require('./$.wks')('iterator')
  , ArrayProto = Array.prototype;

module.exports = function(it){
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};
},{"./$.iterators":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iterators.js","./$.wks":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iterators.js":[function(require,module,exports){
module.exports = {};
},{}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.find.js":[function(require,module,exports){
'use strict';
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = require('./$.export')
  , $find   = require('./$.array-methods')(5)
  , KEY     = 'find'
  , forced  = true;
// Shouldn't skip holes
if(KEY in [])Array(1)[KEY](function(){ forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn/*, that = undefined */){
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./$.add-to-unscopables')(KEY);
},{"./$.add-to-unscopables":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.add-to-unscopables.js","./$.array-methods":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.array-methods.js","./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.find-index.js":[function(require,module,exports){
'use strict';
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = require('./$.export')
  , $find   = require('./$.array-methods')(6)
  , KEY     = 'findIndex'
  , forced  = true;
// Shouldn't skip holes
if(KEY in [])Array(1)[KEY](function(){ forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn/*, that = undefined */){
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./$.add-to-unscopables')(KEY);
},{"./$.add-to-unscopables":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.add-to-unscopables.js","./$.array-methods":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.array-methods.js","./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.fill.js":[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = require('./$.export');

$export($export.P, 'Array', {fill: require('./$.array-fill')});

require('./$.add-to-unscopables')('fill');
},{"./$.add-to-unscopables":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.add-to-unscopables.js","./$.array-fill":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.array-fill.js","./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.array-fill.js":[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
'use strict';
var toObject = require('./$.to-object')
  , toIndex  = require('./$.to-index')
  , toLength = require('./$.to-length');
module.exports = [].fill || function fill(value /*, start = 0, end = @length */){
  var O      = toObject(this)
    , length = toLength(O.length)
    , $$     = arguments
    , $$len  = $$.length
    , index  = toIndex($$len > 1 ? $$[1] : undefined, length)
    , end    = $$len > 2 ? $$[2] : undefined
    , endPos = end === undefined ? length : toIndex(end, length);
  while(endPos > index)O[index++] = value;
  return O;
};
},{"./$.to-index":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-index.js","./$.to-length":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-length.js","./$.to-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-object.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.copy-within.js":[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = require('./$.export');

$export($export.P, 'Array', {copyWithin: require('./$.array-copy-within')});

require('./$.add-to-unscopables')('copyWithin');
},{"./$.add-to-unscopables":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.add-to-unscopables.js","./$.array-copy-within":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.array-copy-within.js","./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.array-copy-within.js":[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
'use strict';
var toObject = require('./$.to-object')
  , toIndex  = require('./$.to-index')
  , toLength = require('./$.to-length');

module.exports = [].copyWithin || function copyWithin(target/*= 0*/, start/*= 0, end = @length*/){
  var O     = toObject(this)
    , len   = toLength(O.length)
    , to    = toIndex(target, len)
    , from  = toIndex(start, len)
    , $$    = arguments
    , end   = $$.length > 2 ? $$[2] : undefined
    , count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to)
    , inc   = 1;
  if(from < to && to < from + count){
    inc  = -1;
    from += count - 1;
    to   += count - 1;
  }
  while(count-- > 0){
    if(from in O)O[to] = O[from];
    else delete O[to];
    to   += inc;
    from += inc;
  } return O;
};
},{"./$.to-index":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-index.js","./$.to-length":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-length.js","./$.to-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-object.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.add-to-unscopables.js":[function(require,module,exports){
// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = require('./$.wks')('unscopables')
  , ArrayProto  = Array.prototype;
if(ArrayProto[UNSCOPABLES] == undefined)require('./$.hide')(ArrayProto, UNSCOPABLES, {});
module.exports = function(key){
  ArrayProto[UNSCOPABLES][key] = true;
};
},{"./$.hide":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.hide.js","./$.wks":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es5.js":[function(require,module,exports){
'use strict';
var $                 = require('./$')
  , $export           = require('./$.export')
  , DESCRIPTORS       = require('./$.descriptors')
  , createDesc        = require('./$.property-desc')
  , html              = require('./$.html')
  , cel               = require('./$.dom-create')
  , has               = require('./$.has')
  , cof               = require('./$.cof')
  , invoke            = require('./$.invoke')
  , fails             = require('./$.fails')
  , anObject          = require('./$.an-object')
  , aFunction         = require('./$.a-function')
  , isObject          = require('./$.is-object')
  , toObject          = require('./$.to-object')
  , toIObject         = require('./$.to-iobject')
  , toInteger         = require('./$.to-integer')
  , toIndex           = require('./$.to-index')
  , toLength          = require('./$.to-length')
  , IObject           = require('./$.iobject')
  , IE_PROTO          = require('./$.uid')('__proto__')
  , createArrayMethod = require('./$.array-methods')
  , arrayIndexOf      = require('./$.array-includes')(false)
  , ObjectProto       = Object.prototype
  , ArrayProto        = Array.prototype
  , arraySlice        = ArrayProto.slice
  , arrayJoin         = ArrayProto.join
  , defineProperty    = $.setDesc
  , getOwnDescriptor  = $.getDesc
  , defineProperties  = $.setDescs
  , factories         = {}
  , IE8_DOM_DEFINE;

if(!DESCRIPTORS){
  IE8_DOM_DEFINE = !fails(function(){
    return defineProperty(cel('div'), 'a', {get: function(){ return 7; }}).a != 7;
  });
  $.setDesc = function(O, P, Attributes){
    if(IE8_DOM_DEFINE)try {
      return defineProperty(O, P, Attributes);
    } catch(e){ /* empty */ }
    if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
    if('value' in Attributes)anObject(O)[P] = Attributes.value;
    return O;
  };
  $.getDesc = function(O, P){
    if(IE8_DOM_DEFINE)try {
      return getOwnDescriptor(O, P);
    } catch(e){ /* empty */ }
    if(has(O, P))return createDesc(!ObjectProto.propertyIsEnumerable.call(O, P), O[P]);
  };
  $.setDescs = defineProperties = function(O, Properties){
    anObject(O);
    var keys   = $.getKeys(Properties)
      , length = keys.length
      , i = 0
      , P;
    while(length > i)$.setDesc(O, P = keys[i++], Properties[P]);
    return O;
  };
}
$export($export.S + $export.F * !DESCRIPTORS, 'Object', {
  // 19.1.2.6 / 15.2.3.3 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $.getDesc,
  // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
  defineProperty: $.setDesc,
  // 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
  defineProperties: defineProperties
});

  // IE 8- don't enum bug keys
var keys1 = ('constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,' +
            'toLocaleString,toString,valueOf').split(',')
  // Additional keys for getOwnPropertyNames
  , keys2 = keys1.concat('length', 'prototype')
  , keysLen1 = keys1.length;

// Create object with `null` prototype: use iframe Object with cleared prototype
var createDict = function(){
  // Thrash, waste and sodomy: IE GC bug
  var iframe = cel('iframe')
    , i      = keysLen1
    , gt     = '>'
    , iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write('<script>document.F=Object</script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while(i--)delete createDict.prototype[keys1[i]];
  return createDict();
};
var createGetKeys = function(names, length){
  return function(object){
    var O      = toIObject(object)
      , i      = 0
      , result = []
      , key;
    for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
    // Don't enum bug & hidden keys
    while(length > i)if(has(O, key = names[i++])){
      ~arrayIndexOf(result, key) || result.push(key);
    }
    return result;
  };
};
var Empty = function(){};
$export($export.S, 'Object', {
  // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
  getPrototypeOf: $.getProto = $.getProto || function(O){
    O = toObject(O);
    if(has(O, IE_PROTO))return O[IE_PROTO];
    if(typeof O.constructor == 'function' && O instanceof O.constructor){
      return O.constructor.prototype;
    } return O instanceof Object ? ObjectProto : null;
  },
  // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $.getNames = $.getNames || createGetKeys(keys2, keys2.length, true),
  // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
  create: $.create = $.create || function(O, /*?*/Properties){
    var result;
    if(O !== null){
      Empty.prototype = anObject(O);
      result = new Empty();
      Empty.prototype = null;
      // add "__proto__" for Object.getPrototypeOf shim
      result[IE_PROTO] = O;
    } else result = createDict();
    return Properties === undefined ? result : defineProperties(result, Properties);
  },
  // 19.1.2.14 / 15.2.3.14 Object.keys(O)
  keys: $.getKeys = $.getKeys || createGetKeys(keys1, keysLen1, false)
});

var construct = function(F, len, args){
  if(!(len in factories)){
    for(var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  }
  return factories[len](F, args);
};

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
$export($export.P, 'Function', {
  bind: function bind(that /*, args... */){
    var fn       = aFunction(this)
      , partArgs = arraySlice.call(arguments, 1);
    var bound = function(/* args... */){
      var args = partArgs.concat(arraySlice.call(arguments));
      return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
    };
    if(isObject(fn.prototype))bound.prototype = fn.prototype;
    return bound;
  }
});

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * fails(function(){
  if(html)arraySlice.call(html);
}), 'Array', {
  slice: function(begin, end){
    var len   = toLength(this.length)
      , klass = cof(this);
    end = end === undefined ? len : end;
    if(klass == 'Array')return arraySlice.call(this, begin, end);
    var start  = toIndex(begin, len)
      , upTo   = toIndex(end, len)
      , size   = toLength(upTo - start)
      , cloned = Array(size)
      , i      = 0;
    for(; i < size; i++)cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});
$export($export.P + $export.F * (IObject != Object), 'Array', {
  join: function join(separator){
    return arrayJoin.call(IObject(this), separator === undefined ? ',' : separator);
  }
});

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
$export($export.S, 'Array', {isArray: require('./$.is-array')});

var createArrayReduce = function(isRight){
  return function(callbackfn, memo){
    aFunction(callbackfn);
    var O      = IObject(this)
      , length = toLength(O.length)
      , index  = isRight ? length - 1 : 0
      , i      = isRight ? -1 : 1;
    if(arguments.length < 2)for(;;){
      if(index in O){
        memo = O[index];
        index += i;
        break;
      }
      index += i;
      if(isRight ? index < 0 : length <= index){
        throw TypeError('Reduce of empty array with no initial value');
      }
    }
    for(;isRight ? index >= 0 : length > index; index += i)if(index in O){
      memo = callbackfn(memo, O[index], index, this);
    }
    return memo;
  };
};

var methodize = function($fn){
  return function(arg1/*, arg2 = undefined */){
    return $fn(this, arg1, arguments[1]);
  };
};

$export($export.P, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: $.each = $.each || methodize(createArrayMethod(0)),
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: methodize(createArrayMethod(1)),
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: methodize(createArrayMethod(2)),
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: methodize(createArrayMethod(3)),
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: methodize(createArrayMethod(4)),
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: createArrayReduce(false),
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: createArrayReduce(true),
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: methodize(arrayIndexOf),
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function(el, fromIndex /* = @[*-1] */){
    var O      = toIObject(this)
      , length = toLength(O.length)
      , index  = length - 1;
    if(arguments.length > 1)index = Math.min(index, toInteger(fromIndex));
    if(index < 0)index = toLength(length + index);
    for(;index >= 0; index--)if(index in O)if(O[index] === el)return index;
    return -1;
  }
});

// 20.3.3.1 / 15.9.4.4 Date.now()
$export($export.S, 'Date', {now: function(){ return +new Date; }});

var lz = function(num){
  return num > 9 ? num : '0' + num;
};

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (fails(function(){
  return new Date(-5e13 - 1).toISOString() != '0385-07-25T07:06:39.999Z';
}) || !fails(function(){
  new Date(NaN).toISOString();
})), 'Date', {
  toISOString: function toISOString(){
    if(!isFinite(this))throw RangeError('Invalid time value');
    var d = this
      , y = d.getUTCFullYear()
      , m = d.getUTCMilliseconds()
      , s = y < 0 ? '-' : y > 9999 ? '+' : '';
    return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
      '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
      'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
      ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
  }
});
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.a-function":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.a-function.js","./$.an-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.array-includes":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.array-includes.js","./$.array-methods":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.array-methods.js","./$.cof":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.cof.js","./$.descriptors":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.descriptors.js","./$.dom-create":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.dom-create.js","./$.export":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js","./$.fails":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js","./$.has":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.has.js","./$.html":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.html.js","./$.invoke":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.invoke.js","./$.iobject":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iobject.js","./$.is-array":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-array.js","./$.is-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.property-desc":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.property-desc.js","./$.to-index":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-index.js","./$.to-integer":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-integer.js","./$.to-iobject":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-iobject.js","./$.to-length":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-length.js","./$.to-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-object.js","./$.uid":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.uid.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.invoke.js":[function(require,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function(fn, args, that){
  var un = that === undefined;
  switch(args.length){
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return              fn.apply(that, args);
};
},{}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.html.js":[function(require,module,exports){
module.exports = require('./$.global').document && document.documentElement;
},{"./$.global":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.has.js":[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function(it, key){
  return hasOwnProperty.call(it, key);
};
},{}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.export.js":[function(require,module,exports){
var global    = require('./$.global')
  , core      = require('./$.core')
  , hide      = require('./$.hide')
  , redefine  = require('./$.redefine')
  , ctx       = require('./$.ctx')
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , expProto  = exports[PROTOTYPE] || (exports[PROTOTYPE] = {})
    , key, own, out, exp;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && key in target;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if(target && !own)redefine(target, key, out);
    // export
    if(exports[key] != out)hide(exports, key, exp);
    if(IS_PROTO && expProto[key] != out)expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;  // forced
$export.G = 2;  // global
$export.S = 4;  // static
$export.P = 8;  // proto
$export.B = 16; // bind
$export.W = 32; // wrap
module.exports = $export;
},{"./$.core":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.core.js","./$.ctx":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.ctx.js","./$.global":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js","./$.hide":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.hide.js","./$.redefine":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.redefine.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.redefine.js":[function(require,module,exports){
// add fake Function#toString
// for correct work wrapped methods / constructors with methods like LoDash isNative
var global    = require('./$.global')
  , hide      = require('./$.hide')
  , SRC       = require('./$.uid')('src')
  , TO_STRING = 'toString'
  , $toString = Function[TO_STRING]
  , TPL       = ('' + $toString).split(TO_STRING);

require('./$.core').inspectSource = function(it){
  return $toString.call(it);
};

(module.exports = function(O, key, val, safe){
  if(typeof val == 'function'){
    val.hasOwnProperty(SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
    val.hasOwnProperty('name') || hide(val, 'name', key);
  }
  if(O === global){
    O[key] = val;
  } else {
    if(!safe)delete O[key];
    hide(O, key, val);
  }
})(Function.prototype, TO_STRING, function toString(){
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});
},{"./$.core":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.core.js","./$.global":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js","./$.hide":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.hide.js","./$.uid":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.uid.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.hide.js":[function(require,module,exports){
var $          = require('./$')
  , createDesc = require('./$.property-desc');
module.exports = require('./$.descriptors') ? function(object, key, value){
  return $.setDesc(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};
},{"./$":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.descriptors":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.descriptors.js","./$.property-desc":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.property-desc.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.property-desc.js":[function(require,module,exports){
module.exports = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};
},{}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js":[function(require,module,exports){
var $Object = Object;
module.exports = {
  create:     $Object.create,
  getProto:   $Object.getPrototypeOf,
  isEnum:     {}.propertyIsEnumerable,
  getDesc:    $Object.getOwnPropertyDescriptor,
  setDesc:    $Object.defineProperty,
  setDescs:   $Object.defineProperties,
  getKeys:    $Object.keys,
  getNames:   $Object.getOwnPropertyNames,
  getSymbols: $Object.getOwnPropertySymbols,
  each:       [].forEach
};
},{}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.dom-create.js":[function(require,module,exports){
var isObject = require('./$.is-object')
  , document = require('./$.global').document
  // in old IE typeof document.createElement is 'object'
  , is = isObject(document) && isObject(document.createElement);
module.exports = function(it){
  return is ? document.createElement(it) : {};
};
},{"./$.global":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js","./$.is-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.descriptors.js":[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./$.fails')(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./$.fails":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js":[function(require,module,exports){
module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};
},{}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.array-methods.js":[function(require,module,exports){
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx      = require('./$.ctx')
  , IObject  = require('./$.iobject')
  , toObject = require('./$.to-object')
  , toLength = require('./$.to-length')
  , asc      = require('./$.array-species-create');
module.exports = function(TYPE){
  var IS_MAP        = TYPE == 1
    , IS_FILTER     = TYPE == 2
    , IS_SOME       = TYPE == 3
    , IS_EVERY      = TYPE == 4
    , IS_FIND_INDEX = TYPE == 6
    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX;
  return function($this, callbackfn, that){
    var O      = toObject($this)
      , self   = IObject(O)
      , f      = ctx(callbackfn, that, 3)
      , length = toLength(self.length)
      , index  = 0
      , result = IS_MAP ? asc($this, length) : IS_FILTER ? asc($this, 0) : undefined
      , val, res;
    for(;length > index; index++)if(NO_HOLES || index in self){
      val = self[index];
      res = f(val, index, O);
      if(TYPE){
        if(IS_MAP)result[index] = res;            // map
        else if(res)switch(TYPE){
          case 3: return true;                    // some
          case 5: return val;                     // find
          case 6: return index;                   // findIndex
          case 2: result.push(val);               // filter
        } else if(IS_EVERY)return false;          // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};
},{"./$.array-species-create":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.array-species-create.js","./$.ctx":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.ctx.js","./$.iobject":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iobject.js","./$.to-length":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-length.js","./$.to-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-object.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-object.js":[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./$.defined');
module.exports = function(it){
  return Object(defined(it));
};
},{"./$.defined":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.defined.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.ctx.js":[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./$.a-function');
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};
},{"./$.a-function":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.a-function.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.array-species-create.js":[function(require,module,exports){
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var isObject = require('./$.is-object')
  , isArray  = require('./$.is-array')
  , SPECIES  = require('./$.wks')('species');
module.exports = function(original, length){
  var C;
  if(isArray(original)){
    C = original.constructor;
    // cross-realm fallback
    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
    if(isObject(C)){
      C = C[SPECIES];
      if(C === null)C = undefined;
    }
  } return new (C === undefined ? Array : C)(length);
};
},{"./$.is-array":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-array.js","./$.is-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.wks":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js":[function(require,module,exports){
var store  = require('./$.shared')('wks')
  , uid    = require('./$.uid')
  , Symbol = require('./$.global').Symbol;
module.exports = function(name){
  return store[name] || (store[name] =
    Symbol && Symbol[name] || (Symbol || uid)('Symbol.' + name));
};
},{"./$.global":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js","./$.shared":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.shared.js","./$.uid":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.uid.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.uid.js":[function(require,module,exports){
var id = 0
  , px = Math.random();
module.exports = function(key){
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};
},{}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.shared.js":[function(require,module,exports){
var global = require('./$.global')
  , SHARED = '__core-js_shared__'
  , store  = global[SHARED] || (global[SHARED] = {});
module.exports = function(key){
  return store[key] || (store[key] = {});
};
},{"./$.global":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js":[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
},{}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-array.js":[function(require,module,exports){
// 7.2.2 IsArray(argument)
var cof = require('./$.cof');
module.exports = Array.isArray || function(arg){
  return cof(arg) == 'Array';
};
},{"./$.cof":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.cof.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.array-includes.js":[function(require,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./$.to-iobject')
  , toLength  = require('./$.to-length')
  , toIndex   = require('./$.to-index');
module.exports = function(IS_INCLUDES){
  return function($this, el, fromIndex){
    var O      = toIObject($this)
      , length = toLength(O.length)
      , index  = toIndex(fromIndex, length)
      , value;
    // Array#includes uses SameValueZero equality algorithm
    if(IS_INCLUDES && el != el)while(length > index){
      value = O[index++];
      if(value != value)return true;
    // Array#toIndex ignores holes, Array#includes - not
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
      if(O[index] === el)return IS_INCLUDES || index;
    } return !IS_INCLUDES && -1;
  };
};
},{"./$.to-index":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-index.js","./$.to-iobject":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-iobject.js","./$.to-length":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-length.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-length.js":[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./$.to-integer')
  , min       = Math.min;
module.exports = function(it){
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};
},{"./$.to-integer":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-integer.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-iobject.js":[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./$.iobject')
  , defined = require('./$.defined');
module.exports = function(it){
  return IObject(defined(it));
};
},{"./$.defined":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.defined.js","./$.iobject":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iobject.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iobject.js":[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./$.cof');
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};
},{"./$.cof":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.cof.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.cof.js":[function(require,module,exports){
var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};
},{}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.defined.js":[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};
},{}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-index.js":[function(require,module,exports){
var toInteger = require('./$.to-integer')
  , max       = Math.max
  , min       = Math.min;
module.exports = function(index, length){
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};
},{"./$.to-integer":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-integer.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-integer.js":[function(require,module,exports){
// 7.1.4 ToInteger
var ceil  = Math.ceil
  , floor = Math.floor;
module.exports = function(it){
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};
},{}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js":[function(require,module,exports){
var isObject = require('./$.is-object');
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};
},{"./$.is-object":"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js"}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js":[function(require,module,exports){
module.exports = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};
},{}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.a-function.js":[function(require,module,exports){
module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};
},{}],"/home/ubuntu/staging/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.core.js":[function(require,module,exports){
var core = module.exports = {version: '1.2.6'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
},{}],"/home/ubuntu/staging/apps/build/js/applab/ChangeEventHandler.js":[function(require,module,exports){
'use strict';

var constants = require('../constants');
var KeyCodes = constants.KeyCodes;
var elementLibrary = require('./designElements/library');

/**
 * Helper class for generating a synthetic change event when an element's
 * contents changes between focus and blur.
 * @param {Element} element
 * @param {Function} callback
 * @constructor
 */
var ChangeEventHandler = module.exports = function (element, callback) {
  /**
   * @type {Element}
   * @private
   */
  this.element_ = element;

  /**
   * Callback to call if the element's value changes between focus and blur.
   * @type {function}
   * @private
   */
  this.callback_ = callback;

  /**
   * Value of the element when it was focused.
   * @type {string}
   * @private
   */
  this.initialValue_ = '';
};

ChangeEventHandler.prototype.onFocus = function () {
  this.initialValue_ = this.getValue();
};

/**
 * @param {!Event} event
 */
ChangeEventHandler.prototype.onEnter = function (event) {
  if (this.getValue() !== this.initialValue_) {
    this.initialValue_ = this.getValue();
    this.callback_(event);
  }
};

/**
 * @param {!Event} event
 */
ChangeEventHandler.prototype.onBlur = function (event) {
  if (this.getValue() !== this.initialValue_) {
    this.callback_(event);
  }
};

/**
 * Returns the raw value of the element for the purpose of detecting a
 * change event. This value will generally not be suitable for displaying
 * to the user when the element is a contenteditable div.
 * @returns {string}
 */
ChangeEventHandler.prototype.getValue = function () {
  var elementType = elementLibrary.getElementType(this.element_);
  switch (elementType) {
    case elementLibrary.ElementType.TEXT_INPUT:
      return this.element_.value;
    case elementLibrary.ElementType.TEXT_AREA:
      return this.element_.textContent;
    default:
      throw new Error('ChangeEventHandler: unsupported element type ' + elementType);
  }
};

/**
 * Attaches a synthetic change event to the element, by calling the callback
 * if the element's value changes between focus, enter and blur.
 * @param {Element} element
 * @param {Function} callback
 */
ChangeEventHandler.addChangeEventHandler = function (element, callback) {
  var handler = new ChangeEventHandler(element, callback);
  element.addEventListener("focus", handler.onFocus.bind(handler));
  // Handle enter key for text inputs, which cannot contain newlines.
  var elementType = elementLibrary.getElementType(element);
  if (elementType === elementLibrary.ElementType.TEXT_INPUT) {
    element.addEventListener("keydown", (function (event) {
      if (event.keyCode === KeyCodes.ENTER) {
        this.onEnter(event);
      }
    }).bind(handler));
  }
  element.addEventListener("blur", handler.onBlur.bind(handler));
};

},{"../constants":"/home/ubuntu/staging/apps/build/js/constants.js","./designElements/library":"/home/ubuntu/staging/apps/build/js/applab/designElements/library.js"}],"/home/ubuntu/staging/apps/build/js/applab/designElements/library.js":[function(require,module,exports){
'use strict';

var utils = require('../../utils');
var _ = utils.getLodash();
var elementUtils = require('./elementUtils');

/**
 * A map from prefix to the next numerical suffix to try to
 * use as an id in the applab app's DOM.
 * @type {Object.<string, number>}
 */
var nextElementIdMap = {};

/**
 * @readonly
 * @enum {string}
 */
var ElementType = {
  BUTTON: 'BUTTON',
  LABEL: 'LABEL',
  TEXT_INPUT: 'TEXT_INPUT',
  CHECKBOX: 'CHECKBOX',
  DROPDOWN: 'DROPDOWN',
  RADIO_BUTTON: 'RADIO_BUTTON',
  TEXT_AREA: 'TEXT_AREA',
  IMAGE: 'IMAGE',
  CANVAS: 'CANVAS',
  SCREEN: 'SCREEN',
  CHART: 'CHART',
  SLIDER: 'SLIDER'
};

var elements = {};
elements[ElementType.BUTTON] = require('./button.jsx');
elements[ElementType.LABEL] = require('./label.jsx');
elements[ElementType.TEXT_INPUT] = require('./textInput.jsx');
elements[ElementType.CHECKBOX] = require('./checkbox.jsx');
elements[ElementType.DROPDOWN] = require('./dropdown.jsx');
elements[ElementType.RADIO_BUTTON] = require('./radioButton.jsx');
elements[ElementType.TEXT_AREA] = require('./textarea.jsx');
elements[ElementType.IMAGE] = require('./image.jsx');
elements[ElementType.CANVAS] = require('./canvas.jsx');
elements[ElementType.SCREEN] = require('./screen.jsx');
elements[ElementType.CHART] = require('./chart.jsx');
elements[ElementType.SLIDER] = require('./slider.jsx');

module.exports = {
  ElementType: ElementType,
  /**
   * Returns an element id with the given prefix which is unused within
   * the applab app's DOM.
   * @param {string} prefix
   * @returns {string}
   */
  // TODO (brent) - the following seems a little bit strange to me:
  // 1) Add item1, item2, delete item1
  // 2) Add another item, it gets id item3
  // 3) Reload page, add another item, it gets item1
  // Seems a little like we should always get the lowest available (as in step 3)
  // or always get the next (as in step 2)
  getUnusedElementId: function getUnusedElementId(prefix) {
    var i = nextElementIdMap[prefix] || 1;
    while (elementUtils.getPrefixedElementById(prefix + i)) {
      i++;
    }
    nextElementIdMap[prefix] = i + 1;
    return prefix + i;
  },

  /**
   * Resets the next element id for all prefixes to be 1. Called after clearing
   * all design mode elements
   */
  resetIds: function resetIds() {
    nextElementIdMap = {};
  },

  /**
   * Create a new element of the specified type
   * @param {ElementType} elementType Type of element to create
   * @param {number} left Position from left.
   * @param {number} top Position from top.
   * @param {boolean} [withoutId] If true, don't generate an id
   */
  createElement: function createElement(elementType, left, top, withoutId) {
    var elementClass = elements[elementType];
    if (!elementClass) {
      throw new Error('Unknown elementType: ' + elementType);
    }

    var element = elementClass.create(withoutId);

    // Stuff that's common across all elements
    if (!withoutId) {
      elementUtils.setId(element, this.getUnusedElementId(elementType.toLowerCase()));
    }

    if (elementType !== ElementType.SCREEN) {
      element.style.position = 'absolute';
      element.style.left = left + 'px';
      element.style.top = top + 'px';
      element.style.margin = '0px';
    }

    return element;
  },

  getElementPropertyTab: function getElementPropertyTab(elementType) {
    return elements[elementType].PropertyTab;
  },

  getElementEventTab: function getElementEventTab(elementType) {
    return elements[elementType].EventTab;
  },

  /**
   * @param {HTMLElement} element
   * @param {boolean?} allowUnknown If true, we won't throw on unknown element types
   * @returns {string} String representing elementType
   */
  getElementType: function getElementType(element, allowUnknown) {
    var tagname = element.tagName.toLowerCase();

    switch (tagname) {
      case 'button':
        return ElementType.BUTTON;
      case 'label':
        return ElementType.LABEL;
      case 'select':
        return ElementType.DROPDOWN;
      case 'div':
        if ($(element).hasClass('screen')) {
          return ElementType.SCREEN;
        } else if ($(element).hasClass('chart')) {
          return ElementType.CHART;
        }
        return ElementType.TEXT_AREA;
      case 'img':
        return ElementType.IMAGE;
      case 'canvas':
        return ElementType.CANVAS;
      case 'input':
        switch (element.getAttribute('type')) {
          case 'checkbox':
            return ElementType.CHECKBOX;
          case 'radio':
            return ElementType.RADIO_BUTTON;
          case 'range':
            return ElementType.SLIDER;
          default:
            return ElementType.TEXT_INPUT;
        }
        break;
    }
    // Unknown elements are expected. Return null because we don't know type.
    if (allowUnknown) {
      return null;
    }
    throw new Error('unknown element type');
  },

  /**
   * Code to be called after deserializing element, allowing us to attach any
   * necessary event handlers.
   */
  onDeserialize: function onDeserialize(element, updateProperty) {
    var elementType = this.getElementType(element);
    if (elements[elementType] && elements[elementType].onDeserialize) {
      elements[elementType].onDeserialize(element, updateProperty);
    }
  },

  /**
   * Handle any element specific property changes. Called after designMode gets
   * first crack at handling change.
   * @returns {boolean} True if we modified the element in such a way that the
   *   property table needs to be updated.
   */
  typeSpecificPropertyChange: function typeSpecificPropertyChange(element, name, value) {
    var elementType = this.getElementType(element);
    if (elements[elementType].onPropertyChange) {
      return elements[elementType].onPropertyChange(element, name, value);
    }
    return false;
  }
};

},{"../../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./button.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/button.jsx","./canvas.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/canvas.jsx","./chart.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/chart.jsx","./checkbox.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/checkbox.jsx","./dropdown.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/dropdown.jsx","./elementUtils":"/home/ubuntu/staging/apps/build/js/applab/designElements/elementUtils.js","./image.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/image.jsx","./label.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/label.jsx","./radioButton.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/radioButton.jsx","./screen.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/screen.jsx","./slider.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/slider.jsx","./textInput.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/textInput.jsx","./textarea.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/textarea.jsx"}],"/home/ubuntu/staging/apps/build/js/applab/designElements/textarea.jsx":[function(require,module,exports){
/* global $ */

'use strict';

var PropertyRow = require('./PropertyRow.jsx');
var BooleanPropertyRow = require('./BooleanPropertyRow.jsx');
var ColorPickerPropertyRow = require('./ColorPickerPropertyRow.jsx');
var ZOrderRow = require('./ZOrderRow.jsx');
var EventHeaderRow = require('./EventHeaderRow.jsx');
var EventRow = require('./EventRow.jsx');
var utils = require('../../utils');
var elementUtils = require('./elementUtils');

var TextAreaProperties = React.createClass({
  displayName: 'TextAreaProperties',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onDepthChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    var element = this.props.element;

    var escapedText = '';
    if (element.parentElement.className === 'textArea') {
      escapedText = utils.unescapeText(element.parentElement.innerHTML);
    } else {
      escapedText = utils.unescapeText(element.innerHTML);
    }

    return React.createElement(
      'div',
      { id: 'propertyRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(PropertyRow, {
        desc: 'text',
        isMultiLine: true,
        initialValue: escapedText,
        handleChange: this.props.handleChange.bind(this, 'text') }),
      React.createElement(PropertyRow, {
        desc: 'width (px)',
        isNumber: true,
        initialValue: parseInt(element.style.width, 10),
        foo: parseInt(element.style.width, 10),
        handleChange: this.props.handleChange.bind(this, 'style-width') }),
      React.createElement(PropertyRow, {
        desc: 'height (px)',
        isNumber: true,
        initialValue: parseInt(element.style.height, 10),
        handleChange: this.props.handleChange.bind(this, 'style-height') }),
      React.createElement(PropertyRow, {
        desc: 'x position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.left, 10),
        handleChange: this.props.handleChange.bind(this, 'left') }),
      React.createElement(PropertyRow, {
        desc: 'y position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.top, 10),
        handleChange: this.props.handleChange.bind(this, 'top') }),
      React.createElement(ColorPickerPropertyRow, {
        desc: 'text color',
        initialValue: elementUtils.rgb2hex(element.style.color),
        handleChange: this.props.handleChange.bind(this, 'textColor') }),
      React.createElement(ColorPickerPropertyRow, {
        desc: 'background color',
        initialValue: elementUtils.rgb2hex(element.style.backgroundColor),
        handleChange: this.props.handleChange.bind(this, 'backgroundColor') }),
      React.createElement(PropertyRow, {
        desc: 'font size (px)',
        isNumber: true,
        initialValue: parseInt(element.style.fontSize, 10),
        handleChange: this.props.handleChange.bind(this, 'fontSize') }),
      React.createElement(BooleanPropertyRow, {
        desc: 'read only',
        initialValue: !element.isContentEditable,
        handleChange: this.props.handleChange.bind(this, 'readonly') }),
      React.createElement(BooleanPropertyRow, {
        desc: 'hidden',
        initialValue: $(element).hasClass('design-mode-hidden'),
        handleChange: this.props.handleChange.bind(this, 'hidden') }),
      React.createElement(ZOrderRow, {
        element: this.props.element,
        onDepthChange: this.props.onDepthChange })
    );

    // TODO:
    // bold/italics/underline (p2)
    // textAlignment (p2)
    // enabled (p2)
  }
});

var TextAreaEvents = React.createClass({
  displayName: 'TextAreaEvents',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired
  },

  getChangeEventCode: function getChangeEventCode() {
    var id = elementUtils.getId(this.props.element);
    var code = 'onEvent("' + id + '", "change", function(event) {\n' + '  console.log("' + id + ' entered text: " + getText("' + id + '"));\n' + '});\n';
    return code;
  },

  insertChange: function insertChange() {
    this.props.onInsertEvent(this.getChangeEventCode());
  },

  render: function render() {
    var element = this.props.element;
    var changeName = 'Change';
    var changeDesc = 'Triggered when the text area loses focus if the text has changed.';

    return React.createElement(
      'div',
      { id: 'eventRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(EventHeaderRow, null),
      React.createElement(EventRow, {
        name: changeName,
        desc: changeDesc,
        handleInsert: this.insertChange })
    );
  }
});

module.exports = {
  PropertyTab: TextAreaProperties,
  EventTab: TextAreaEvents,

  create: function create() {
    var element = document.createElement('div');
    element.setAttribute('contenteditable', true);
    element.style.width = '200px';
    element.style.height = '100px';
    element.style.fontSize = '14px';
    element.style.color = '#000000';
    element.style.backgroundColor = '#ffffff';

    $(element).addClass('textArea');

    this.onDeserialize(element);

    return element;
  },

  onDeserialize: function onDeserialize(element) {
    $(element).addClass('textArea');

    $(element).on('mousedown', function (e) {
      if (!Applab.isRunning()) {
        // Disable clicking into text area unless running
        e.preventDefault();
      }
    });

    // swallow keydown unless we're running
    $(element).on('keydown', function (e) {
      if (!Applab.isRunning()) {
        e.preventDefault();
      }
    });
  }
};

},{"../../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./BooleanPropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/BooleanPropertyRow.jsx","./ColorPickerPropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/ColorPickerPropertyRow.jsx","./EventHeaderRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/EventHeaderRow.jsx","./EventRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/EventRow.jsx","./PropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/PropertyRow.jsx","./ZOrderRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/ZOrderRow.jsx","./elementUtils":"/home/ubuntu/staging/apps/build/js/applab/designElements/elementUtils.js"}],"/home/ubuntu/staging/apps/build/js/applab/designElements/textInput.jsx":[function(require,module,exports){
/* global $ */

'use strict';

var PropertyRow = require('./PropertyRow.jsx');
var BooleanPropertyRow = require('./BooleanPropertyRow.jsx');
var ColorPickerPropertyRow = require('./ColorPickerPropertyRow.jsx');
var ZOrderRow = require('./ZOrderRow.jsx');
var EventHeaderRow = require('./EventHeaderRow.jsx');
var EventRow = require('./EventRow.jsx');

var elementUtils = require('./elementUtils');

var TextInputProperties = React.createClass({
  displayName: 'TextInputProperties',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onDepthChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    var element = this.props.element;

    return React.createElement(
      'div',
      { id: 'propertyRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(PropertyRow, {
        desc: 'placeholder',
        initialValue: element.getAttribute('placeholder') || '',
        handleChange: this.props.handleChange.bind(this, 'placeholder') }),
      React.createElement(PropertyRow, {
        desc: 'width (px)',
        isNumber: true,
        initialValue: parseInt(element.style.width, 10),
        handleChange: this.props.handleChange.bind(this, 'style-width') }),
      React.createElement(PropertyRow, {
        desc: 'height (px)',
        isNumber: true,
        initialValue: parseInt(element.style.height, 10),
        handleChange: this.props.handleChange.bind(this, 'style-height') }),
      React.createElement(PropertyRow, {
        desc: 'x position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.left, 10),
        handleChange: this.props.handleChange.bind(this, 'left') }),
      React.createElement(PropertyRow, {
        desc: 'y position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.top, 10),
        handleChange: this.props.handleChange.bind(this, 'top') }),
      React.createElement(ColorPickerPropertyRow, {
        desc: 'text color',
        initialValue: elementUtils.rgb2hex(element.style.color),
        handleChange: this.props.handleChange.bind(this, 'textColor') }),
      React.createElement(ColorPickerPropertyRow, {
        desc: 'background color',
        initialValue: elementUtils.rgb2hex(element.style.backgroundColor),
        handleChange: this.props.handleChange.bind(this, 'backgroundColor') }),
      React.createElement(PropertyRow, {
        desc: 'font size (px)',
        isNumber: true,
        initialValue: parseInt(element.style.fontSize, 10),
        handleChange: this.props.handleChange.bind(this, 'fontSize') }),
      React.createElement(BooleanPropertyRow, {
        desc: 'hidden',
        initialValue: $(element).hasClass('design-mode-hidden'),
        handleChange: this.props.handleChange.bind(this, 'hidden') }),
      React.createElement(ZOrderRow, {
        element: this.props.element,
        onDepthChange: this.props.onDepthChange })
    );
  }
});

var TextInputEvents = React.createClass({
  displayName: 'TextInputEvents',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onInsertEvent: React.PropTypes.func.isRequired
  },

  getChangeEventCode: function getChangeEventCode() {
    var id = elementUtils.getId(this.props.element);
    var code = 'onEvent("' + id + '", "change", function(event) {\n' + '  console.log("' + id + ' entered text: " + getText("' + id + '"));\n' + '});\n';
    return code;
  },

  insertChange: function insertChange() {
    this.props.onInsertEvent(this.getChangeEventCode());
  },

  getInputEventCode: function getInputEventCode() {
    var id = elementUtils.getId(this.props.element);
    var code = 'onEvent("' + id + '", "input", function(event) {\n' + '  console.log("' + id + ' current text: " + getText("' + id + '"));\n' + '});\n';
    return code;
  },

  insertInput: function insertInput() {
    this.props.onInsertEvent(this.getInputEventCode());
  },

  render: function render() {
    var element = this.props.element;

    var changeName = 'Change';
    var changeDesc = 'Triggered when the text input loses focus if the text has changed.';

    var inputName = 'Input';
    var inputDesc = 'Triggered immediately every time the text input contents change.';

    return React.createElement(
      'div',
      { id: 'eventRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(EventHeaderRow, null),
      React.createElement(EventRow, {
        name: changeName,
        desc: changeDesc,
        handleInsert: this.insertChange }),
      React.createElement(EventRow, {
        name: inputName,
        desc: inputDesc,
        handleInsert: this.insertInput })
    );
  }
});

module.exports = {
  PropertyTab: TextInputProperties,
  EventTab: TextInputEvents,

  create: function create() {
    var element = document.createElement('input');
    element.style.margin = '0px';
    element.style.width = '200px';
    element.style.height = '30px';
    element.style.color = '#000000';
    element.style.backgroundColor = '';

    return element;
  },

  onDeserialize: function onDeserialize(element) {
    $(element).on('mousedown', function (e) {
      if (!Applab.isRunning()) {
        // Disable clicking into text input unless running
        e.preventDefault();
      }
    });

    // swallow keydown unless we're running
    $(element).on('keydown', function (e) {
      if (!Applab.isRunning()) {
        e.preventDefault();
      }
    });
  }
};

},{"./BooleanPropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/BooleanPropertyRow.jsx","./ColorPickerPropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/ColorPickerPropertyRow.jsx","./EventHeaderRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/EventHeaderRow.jsx","./EventRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/EventRow.jsx","./PropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/PropertyRow.jsx","./ZOrderRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/ZOrderRow.jsx","./elementUtils":"/home/ubuntu/staging/apps/build/js/applab/designElements/elementUtils.js"}],"/home/ubuntu/staging/apps/build/js/applab/designElements/slider.jsx":[function(require,module,exports){
/* global $ */

'use strict';

var PropertyRow = require('./PropertyRow.jsx');
var BooleanPropertyRow = require('./BooleanPropertyRow.jsx');
var ZOrderRow = require('./ZOrderRow.jsx');
var EventHeaderRow = require('./EventHeaderRow.jsx');
var EventRow = require('./EventRow.jsx');

var elementUtils = require('./elementUtils');

var SliderProperties = React.createClass({
  displayName: 'SliderProperties',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onDepthChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    var element = this.props.element;

    return React.createElement(
      'div',
      { id: 'propertyRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(PropertyRow, {
        desc: 'width (px)',
        isNumber: true,
        initialValue: parseInt(element.style.width, 10),
        handleChange: this.props.handleChange.bind(this, 'style-width') }),
      React.createElement(PropertyRow, {
        desc: 'height (px)',
        isNumber: true,
        initialValue: parseInt(element.style.height, 10),
        handleChange: this.props.handleChange.bind(this, 'style-height') }),
      React.createElement(PropertyRow, {
        desc: 'x position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.left, 10),
        handleChange: this.props.handleChange.bind(this, 'left') }),
      React.createElement(PropertyRow, {
        desc: 'y position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.top, 10),
        handleChange: this.props.handleChange.bind(this, 'top') }),
      React.createElement(PropertyRow, {
        desc: 'value',
        isNumber: true,
        initialValue: element.defaultValue,
        handleChange: this.props.handleChange.bind(this, 'defaultValue') }),
      React.createElement(PropertyRow, {
        desc: 'minimum value',
        isNumber: true,
        initialValue: parseInt(element.min, 10),
        handleChange: this.props.handleChange.bind(this, 'min') }),
      React.createElement(PropertyRow, {
        desc: 'maximum value',
        isNumber: true,
        initialValue: parseInt(element.max, 10),
        handleChange: this.props.handleChange.bind(this, 'max') }),
      React.createElement(PropertyRow, {
        desc: 'step size',
        isNumber: true,
        initialValue: parseInt(element.step, 10),
        handleChange: this.props.handleChange.bind(this, 'step') }),
      React.createElement(BooleanPropertyRow, {
        desc: 'hidden',
        initialValue: $(element).hasClass('design-mode-hidden'),
        handleChange: this.props.handleChange.bind(this, 'hidden') }),
      React.createElement(ZOrderRow, {
        element: this.props.element,
        onDepthChange: this.props.onDepthChange })
    );
  }
});

var SliderEvents = React.createClass({
  displayName: 'SliderEvents',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onInsertEvent: React.PropTypes.func.isRequired
  },

  getInputEventCode: function getInputEventCode() {
    var id = elementUtils.getId(this.props.element);
    var code = 'onEvent("' + id + '", "input", function(event) {\n' + '  console.log("' + id + ' value: " + getNumber("' + id + '"));\n' + '});\n';
    return code;
  },

  insertInput: function insertInput() {
    this.props.onInsertEvent(this.getInputEventCode());
  },

  render: function render() {
    var element = this.props.element;

    var inputName = 'Input';
    var inputDesc = 'Triggered whenever the value of the slider is modified.';

    return React.createElement(
      'div',
      { id: 'eventRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(EventHeaderRow, null),
      React.createElement(EventRow, {
        name: inputName,
        desc: inputDesc,
        handleInsert: this.insertInput })
    );
  }
});

module.exports = {
  PropertyTab: SliderProperties,
  EventTab: SliderEvents,

  create: function create() {
    var element = document.createElement('input');
    element.type = 'range';
    element.style.margin = '0px';
    element.style.padding = '0px';
    element.style.width = '150px';
    element.style.height = '24px';
    element.defaultValue = 50;
    element.min = 0;
    element.max = 100;
    element.step = 1;

    return element;
  },

  onPropertyChange: function onPropertyChange(element, name, value) {
    switch (name) {
      case 'defaultValue':
        element.defaultValue = value;
        break;
      case 'min':
        element.min = value;
        break;
      case 'max':
        element.max = value;
        break;
      case 'step':
        element.step = value;
        break;
      default:
        return false;
    }
    return true;
  }
};

},{"./BooleanPropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/BooleanPropertyRow.jsx","./EventHeaderRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/EventHeaderRow.jsx","./EventRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/EventRow.jsx","./PropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/PropertyRow.jsx","./ZOrderRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/ZOrderRow.jsx","./elementUtils":"/home/ubuntu/staging/apps/build/js/applab/designElements/elementUtils.js"}],"/home/ubuntu/staging/apps/build/js/applab/designElements/screen.jsx":[function(require,module,exports){
'use strict';

var PropertyRow = require('./PropertyRow.jsx');
var ColorPickerPropertyRow = require('./ColorPickerPropertyRow.jsx');
var ImagePickerPropertyRow = require('./ImagePickerPropertyRow.jsx');
var BooleanPropertyRow = require('./BooleanPropertyRow.jsx');
var EventHeaderRow = require('./EventHeaderRow.jsx');
var EventRow = require('./EventRow.jsx');
var DefaultScreenButtonPropertyRow = require('./DefaultScreenButtonPropertyRow.jsx');

var elementUtils = require('./elementUtils');

var ScreenProperties = React.createClass({
  displayName: 'ScreenProperties',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    var element = this.props.element;

    return React.createElement(
      'div',
      { id: 'propertyRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(ColorPickerPropertyRow, {
        desc: 'background color',
        initialValue: elementUtils.rgb2hex(element.style.backgroundColor),
        handleChange: this.props.handleChange.bind(this, 'backgroundColor') }),
      React.createElement(ImagePickerPropertyRow, {
        desc: 'image',
        initialValue: element.getAttribute('data-canonical-image-url') || '',
        handleChange: this.props.handleChange.bind(this, 'screen-image') }),
      React.createElement(DefaultScreenButtonPropertyRow, {
        screenId: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'is-default') })
    );
  }
});

var ScreenEvents = React.createClass({
  displayName: 'ScreenEvents',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired
  },

  // The screen click event handler code currently receives clicks to any
  // other design element. This could be worked around by checking for
  // event.targetId === "<id>" here, at the expense of added complexity.
  getClickEventCode: function getClickEventCode() {
    var id = elementUtils.getId(this.props.element);
    var code = 'onEvent("' + id + '", "click", function(event) {\n' + '  console.log("' + id + ' clicked!");\n' + '  moveTo(event.x, event.y);\n' + '});\n';
    return code;
  },

  insertClick: function insertClick() {
    this.props.onInsertEvent(this.getClickEventCode());
  },

  getKeyEventCode: function getKeyEventCode() {
    var id = elementUtils.getId(this.props.element);
    var code = 'onEvent("' + id + '", "keydown", function(event) {\n' + '  console.log("Key: " + event.key);\n' + '});\n';
    return code;
  },

  insertKey: function insertKey() {
    this.props.onInsertEvent(this.getKeyEventCode());
  },

  render: function render() {
    var element = this.props.element;
    var clickName = 'Click';
    var clickDesc = 'Triggered when the screen is clicked with a mouse or tapped on a screen.';
    var keyName = 'Key';
    var keyDesc = 'Triggered when a key is pressed.';

    return React.createElement(
      'div',
      { id: 'eventRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(EventHeaderRow, null),
      React.createElement(EventRow, {
        name: clickName,
        desc: clickDesc,
        handleInsert: this.insertClick }),
      React.createElement(EventRow, {
        name: keyName,
        desc: keyDesc,
        handleInsert: this.insertKey })
    );
  }
});

module.exports = {
  PropertyTab: ScreenProperties,
  EventTab: ScreenEvents,

  create: function create() {
    var element = document.createElement('div');
    element.setAttribute('class', 'screen');
    element.setAttribute('tabIndex', '1');
    element.style.display = 'block';
    element.style.height = Applab.footerlessAppHeight + 'px';
    element.style.width = Applab.appWidth + 'px';
    element.style.left = '0px';
    element.style.top = '0px';
    // We want our screen to be behind canvases. By setting any z-index on the
    // screen element, we create a new stacking context with this div as its
    // root, which results in all children (including canvas) to appear in front
    // of it, regardless of their z-index value.
    // see http://philipwalton.com/articles/what-no-one-told-you-about-z-index/
    element.style.position = 'absolute';
    element.style.zIndex = 0;

    return element;
  },
  onDeserialize: function onDeserialize(element, updateProperty) {
    var url = element.getAttribute('data-canonical-image-url');
    if (url) {
      updateProperty(element, 'screen-image', url);
    }
    // Properly position existing screens, so that canvases appear correctly.
    element.style.position = 'absolute';
    element.style.zIndex = 0;

    element.setAttribute('tabIndex', '1');
  }
};

},{"./BooleanPropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/BooleanPropertyRow.jsx","./ColorPickerPropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/ColorPickerPropertyRow.jsx","./DefaultScreenButtonPropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/DefaultScreenButtonPropertyRow.jsx","./EventHeaderRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/EventHeaderRow.jsx","./EventRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/EventRow.jsx","./ImagePickerPropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/ImagePickerPropertyRow.jsx","./PropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/PropertyRow.jsx","./elementUtils":"/home/ubuntu/staging/apps/build/js/applab/designElements/elementUtils.js"}],"/home/ubuntu/staging/apps/build/js/applab/designElements/DefaultScreenButtonPropertyRow.jsx":[function(require,module,exports){
'use strict';

var rowStyle = require('./rowStyle');
var elementUtils = require('./elementUtils');

var DefaultScreenButtonPropertyRow = React.createClass({
  displayName: 'DefaultScreenButtonPropertyRow',

  handleMakeDefault: function handleMakeDefault(event) {
    this.props.handleChange(true);
  },

  render: function render() {
    if (elementUtils.getId(elementUtils.getScreens()[0]) === this.props.screenId) {
      return false;
    }

    var buttonStyle = {
      paddingTop: '5px',
      paddingBottom: '5px',
      fontSize: '14px'
    };

    var defaultButtonStyle = $.extend({}, buttonStyle, {
      backgroundColor: '#0aa',
      color: 'white'
    });

    return React.createElement(
      'div',
      { style: { marginLeft: 15 } },
      React.createElement(
        'button',
        {
          style: defaultButtonStyle,
          onClick: this.handleMakeDefault },
        'Make Default'
      )
    );
  }
});

module.exports = DefaultScreenButtonPropertyRow;

},{"./elementUtils":"/home/ubuntu/staging/apps/build/js/applab/designElements/elementUtils.js","./rowStyle":"/home/ubuntu/staging/apps/build/js/applab/designElements/rowStyle.js"}],"/home/ubuntu/staging/apps/build/js/applab/designElements/radioButton.jsx":[function(require,module,exports){
/* global $ */

'use strict';

var PropertyRow = require('./PropertyRow.jsx');
var BooleanPropertyRow = require('./BooleanPropertyRow.jsx');
var ColorPickerPropertyRow = require('./ColorPickerPropertyRow.jsx');
var ZOrderRow = require('./ZOrderRow.jsx');
var EventHeaderRow = require('./EventHeaderRow.jsx');
var EventRow = require('./EventRow.jsx');

var elementUtils = require('./elementUtils');

// Prefix used to generate default group ids
var GROUP_ID_PREFIX = 'radio_group';

var RadioButtonProperties = React.createClass({
  displayName: 'RadioButtonProperties',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onDepthChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    var element = this.props.element;

    return React.createElement(
      'div',
      { id: 'propertyRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(PropertyRow, {
        desc: 'group id',
        initialValue: element.getAttribute('name') || '',
        handleChange: this.props.handleChange.bind(this, 'groupId') }),
      React.createElement(PropertyRow, {
        desc: 'width (px)',
        isNumber: true,
        initialValue: parseInt(element.style.width, 10),
        handleChange: this.props.handleChange.bind(this, 'style-width') }),
      React.createElement(PropertyRow, {
        desc: 'height (px)',
        isNumber: true,
        initialValue: parseInt(element.style.height, 10),
        handleChange: this.props.handleChange.bind(this, 'style-height') }),
      React.createElement(PropertyRow, {
        desc: 'x position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.left, 10),
        handleChange: this.props.handleChange.bind(this, 'left') }),
      React.createElement(PropertyRow, {
        desc: 'y position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.top, 10),
        handleChange: this.props.handleChange.bind(this, 'top') }),
      React.createElement(BooleanPropertyRow, {
        desc: 'hidden',
        initialValue: $(element).hasClass('design-mode-hidden'),
        handleChange: this.props.handleChange.bind(this, 'hidden') }),
      React.createElement(BooleanPropertyRow, {
        desc: 'checked',
        initialValue: element.checked,
        handleChange: this.props.handleChange.bind(this, 'checked') }),
      React.createElement(ZOrderRow, {
        element: this.props.element,
        onDepthChange: this.props.onDepthChange })
    );

    // TODO:
    // enabled (p2)
  }
});

var RadioButtonEvents = React.createClass({
  displayName: 'RadioButtonEvents',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onInsertEvent: React.PropTypes.func.isRequired
  },

  getChangeEventCode: function getChangeEventCode() {
    var id = elementUtils.getId(this.props.element);
    var code = 'onEvent("' + id + '", "change", function(event) {\n' + '  console.log("' + id + ' checked? " + getChecked("' + id + '"));\n' + '});\n';
    return code;
  },

  insertChange: function insertChange() {
    this.props.onInsertEvent(this.getChangeEventCode());
  },

  render: function render() {
    var element = this.props.element;
    var changeName = 'Change';
    var changeDesc = 'Triggered when the radio button state changes ' + 'both from selected to de-selected, and from de-selected to selected.';

    return React.createElement(
      'div',
      { id: 'eventRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(EventHeaderRow, null),
      React.createElement(EventRow, {
        name: changeName,
        desc: changeDesc,
        handleInsert: this.insertChange })
    );
  }
});

/**
 * Gets the initial group id for a new radio button.
 * To figure out the initial group id, we:
 * 1) Try to find the most recently created radio button on the current screen.
 * 2) If it exists, use that group id. If not, generate an unused group id.
 * @returns {string} The default group id for the new radio button
 */
function getInitialGroupId() {
  // Get the most recently added button on the current screen
  var lastRadioButton = getLastRadioButtonOnCurrentScreen();

  if (lastRadioButton && lastRadioButton.getAttribute('name') && lastRadioButton.getAttribute('name').trim() !== '') {

    // We have an existing radio button, use that group id
    return lastRadioButton.getAttribute('name');
  }

  // Otherwise, generate an unused one
  return getUnusedGroupId();
}

/**
 * Gets the most recently added radio button on current screen.
 * @returns {HTMLElement} The radio button element. Returns null if none exists.
 */
function getLastRadioButtonOnCurrentScreen() {
  // Get the current visible screen element
  var currentScreen = $('#designModeViz .screen:visible').first();

  // Find the last radio button element on the current screen, if any
  var radioButton = currentScreen.find('input[type=radio]').last();

  return radioButton.length > 0 ? radioButton[0] : null;
}

/**
 * Generates a group id that is not used by any other existing radio buttons.
 * @returns {string} An group id that isn't used by other radio buttons
 */
function getUnusedGroupId() {
  var i = 1;
  while ($('input[name=' + GROUP_ID_PREFIX + i + ']').length > 0) {
    i++;
  }

  return GROUP_ID_PREFIX + i;
}

module.exports = {
  PropertyTab: RadioButtonProperties,
  EventTab: RadioButtonEvents,

  create: function create(withoutId) {
    var element = document.createElement('input');
    element.type = 'radio';
    element.style.width = '12px';
    element.style.height = '12px';
    element.style.margin = '0px';

    // Only generate group id if this is an element with an id.
    if (!withoutId) {
      element.name = getInitialGroupId();
    }
    this.onDeserialize(element);

    return element;
  },

  onDeserialize: function onDeserialize(element) {
    // Disable click events unless running
    $(element).on('click', function (e) {
      if (!Applab.isRunning()) {
        element.checked = !element.checked;
      }
    });
  }
};

},{"./BooleanPropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/BooleanPropertyRow.jsx","./ColorPickerPropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/ColorPickerPropertyRow.jsx","./EventHeaderRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/EventHeaderRow.jsx","./EventRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/EventRow.jsx","./PropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/PropertyRow.jsx","./ZOrderRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/ZOrderRow.jsx","./elementUtils":"/home/ubuntu/staging/apps/build/js/applab/designElements/elementUtils.js"}],"/home/ubuntu/staging/apps/build/js/applab/designElements/label.jsx":[function(require,module,exports){
/* global $ */

'use strict';

var PropertyRow = require('./PropertyRow.jsx');
var BooleanPropertyRow = require('./BooleanPropertyRow.jsx');
var ColorPickerPropertyRow = require('./ColorPickerPropertyRow.jsx');
var ZOrderRow = require('./ZOrderRow.jsx');
var EventHeaderRow = require('./EventHeaderRow.jsx');
var EventRow = require('./EventRow.jsx');

var elementUtils = require('./elementUtils');

var LabelProperties = React.createClass({
  displayName: 'LabelProperties',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onDepthChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    var element = this.props.element;

    return React.createElement(
      'div',
      { id: 'propertyRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(PropertyRow, {
        desc: 'text',
        initialValue: $(element).text(),
        handleChange: this.props.handleChange.bind(this, 'text') }),
      React.createElement(PropertyRow, {
        desc: 'width (px)',
        isNumber: true,
        lockState: $(element).data('lock-width') || PropertyRow.LockState.UNLOCKED,
        handleLockChange: this.props.handleChange.bind(this, 'lock-width'),
        initialValue: parseInt(element.style.width, 10),
        handleChange: this.props.handleChange.bind(this, 'style-width') }),
      React.createElement(PropertyRow, {
        desc: 'height (px)',
        isNumber: true,
        lockState: $(element).data('lock-height') || PropertyRow.LockState.UNLOCKED,
        handleLockChange: this.props.handleChange.bind(this, 'lock-height'),
        initialValue: parseInt(element.style.height, 10),
        handleChange: this.props.handleChange.bind(this, 'style-height') }),
      React.createElement(PropertyRow, {
        desc: 'x position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.left, 10),
        handleChange: this.props.handleChange.bind(this, 'left') }),
      React.createElement(PropertyRow, {
        desc: 'y position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.top, 10),
        handleChange: this.props.handleChange.bind(this, 'top') }),
      React.createElement(ColorPickerPropertyRow, {
        desc: 'text color',
        initialValue: elementUtils.rgb2hex(element.style.color),
        handleChange: this.props.handleChange.bind(this, 'textColor') }),
      React.createElement(ColorPickerPropertyRow, {
        desc: 'background color',
        initialValue: elementUtils.rgb2hex(element.style.backgroundColor),
        handleChange: this.props.handleChange.bind(this, 'backgroundColor') }),
      React.createElement(PropertyRow, {
        desc: 'font size (px)',
        isNumber: true,
        initialValue: parseInt(element.style.fontSize, 10),
        handleChange: this.props.handleChange.bind(this, 'fontSize') }),
      React.createElement(BooleanPropertyRow, {
        desc: 'hidden',
        initialValue: $(element).hasClass('design-mode-hidden'),
        handleChange: this.props.handleChange.bind(this, 'hidden') }),
      React.createElement(ZOrderRow, {
        element: this.props.element,
        onDepthChange: this.props.onDepthChange })
    );

    // TODO:
    // bold/italics/underline (p2)
    // textAlignment (p2)
    // enabled (p2)
  }
});

var LabelEvents = React.createClass({
  displayName: 'LabelEvents',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onInsertEvent: React.PropTypes.func.isRequired
  },

  getClickEventCode: function getClickEventCode() {
    var id = elementUtils.getId(this.props.element);
    var code = 'onEvent("' + id + '", "click", function(event) {\n' + '  console.log("' + id + ' clicked!");\n' + '});\n';
    return code;
  },

  insertClick: function insertClick() {
    this.props.onInsertEvent(this.getClickEventCode());
  },

  render: function render() {
    var element = this.props.element;
    var clickName = 'Click';
    var clickDesc = 'Triggered when the label is clicked with a mouse or tapped on a screen.';

    return React.createElement(
      'div',
      { id: 'eventRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(EventHeaderRow, null),
      React.createElement(EventRow, {
        name: clickName,
        desc: clickDesc,
        handleInsert: this.insertClick })
    );
  }
});

module.exports = {
  PropertyTab: LabelProperties,
  EventTab: LabelEvents,

  create: function create() {
    var element = document.createElement('label');
    element.style.margin = '0px';
    element.style.padding = '2px';
    element.style.lineHeight = '1';
    element.style.fontSize = '14px';
    element.style.overflow = 'hidden';
    element.style.wordWrap = 'break-word';
    element.textContent = 'text';
    element.style.color = '#333333';
    element.style.backgroundColor = '';
    element.style.maxWidth = Applab.appWidth + 'px';

    this.resizeToFitText(element);
    return element;
  },

  resizeToFitText: function resizeToFitText(element) {
    // Resize the label to fit the text, unless there is no text in which case make it 15 x 15 so the user has something to drag around
    if (element.textContent) {
      var clone = $(element).clone().css({
        position: 'absolute',
        visibility: 'hidden',
        width: 'auto',
        height: 'auto',
        maxWidth: Applab.appWidth - parseInt(element.style.left, 10) + 'px'
      }).appendTo($(document.body));

      var padding = parseInt(element.style.padding, 10);

      if ($(element).data('lock-width') !== PropertyRow.LockState.LOCKED) {
        //Truncate the width before it runs off the edge of the screen
        element.style.width = Math.min(clone.width() + 1 + 2 * padding, Applab.appWidth - clone.position().left) + 'px';
      }
      if ($(element).data('lock-height') !== PropertyRow.LockState.LOCKED) {
        element.style.height = clone.height() + 1 + 2 * padding + 'px';
      }

      clone.remove();
    } else {
      element.style.width = '15px';
      element.style.height = '15px';
    }
  },

  /**
   * @returns {boolean} True if it modified the backing element
   */
  onPropertyChange: function onPropertyChange(element, name, value) {
    switch (name) {
      case 'text':
      case 'fontSize':
        this.resizeToFitText(element);
        break;
      case 'lock-width':
        $(element).data('lock-width', value);
        break;
      case 'lock-height':
        $(element).data('lock-height', value);
        break;
      default:
        return false;
    }
    return true;
  }
};

},{"./BooleanPropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/BooleanPropertyRow.jsx","./ColorPickerPropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/ColorPickerPropertyRow.jsx","./EventHeaderRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/EventHeaderRow.jsx","./EventRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/EventRow.jsx","./PropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/PropertyRow.jsx","./ZOrderRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/ZOrderRow.jsx","./elementUtils":"/home/ubuntu/staging/apps/build/js/applab/designElements/elementUtils.js"}],"/home/ubuntu/staging/apps/build/js/applab/designElements/image.jsx":[function(require,module,exports){
/* global $ */

'use strict';

var PropertyRow = require('./PropertyRow.jsx');
var BooleanPropertyRow = require('./BooleanPropertyRow.jsx');
var ImagePickerPropertyRow = require('./ImagePickerPropertyRow.jsx');
var ZOrderRow = require('./ZOrderRow.jsx');
var EventHeaderRow = require('./EventHeaderRow.jsx');
var EventRow = require('./EventRow.jsx');

var elementUtils = require('./elementUtils');

var ImageProperties = React.createClass({
  displayName: 'ImageProperties',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onDepthChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    var element = this.props.element;

    return React.createElement(
      'div',
      { id: 'propertyRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(PropertyRow, {
        desc: 'width (px)',
        isNumber: true,
        initialValue: parseInt(element.style.width, 10),
        handleChange: this.props.handleChange.bind(this, 'style-width') }),
      React.createElement(PropertyRow, {
        desc: 'height (px)',
        isNumber: true,
        initialValue: parseInt(element.style.height, 10),
        handleChange: this.props.handleChange.bind(this, 'style-height') }),
      React.createElement(PropertyRow, {
        desc: 'x position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.left, 10),
        handleChange: this.props.handleChange.bind(this, 'left') }),
      React.createElement(PropertyRow, {
        desc: 'y position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.top, 10),
        handleChange: this.props.handleChange.bind(this, 'top') }),
      React.createElement(ImagePickerPropertyRow, {
        desc: 'picture',
        initialValue: element.getAttribute('data-canonical-image-url') || '',
        handleChange: this.props.handleChange.bind(this, 'picture') }),
      React.createElement(BooleanPropertyRow, {
        desc: 'hidden',
        initialValue: $(element).hasClass('design-mode-hidden'),
        handleChange: this.props.handleChange.bind(this, 'hidden') }),
      React.createElement(ZOrderRow, {
        element: this.props.element,
        onDepthChange: this.props.onDepthChange })
    );

    // TODO (brent):
    // bold/italics/underline (p2)
    // shape (p2)
    // textAlignment (p2)
    // enabled (p2)
  }
});

var ImageEvents = React.createClass({
  displayName: 'ImageEvents',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onInsertEvent: React.PropTypes.func.isRequired
  },

  getClickEventCode: function getClickEventCode() {
    var id = elementUtils.getId(this.props.element);
    var code = 'onEvent("' + id + '", "click", function(event) {\n' + '  console.log("' + id + ' clicked!");\n' + '});\n';
    return code;
  },

  insertClick: function insertClick() {
    this.props.onInsertEvent(this.getClickEventCode());
  },

  render: function render() {
    var element = this.props.element;
    var clickName = 'Click';
    var clickDesc = 'Triggered when the image is clicked with a mouse or tapped on a screen.';

    return React.createElement(
      'div',
      { id: 'eventRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(EventHeaderRow, null),
      React.createElement(EventRow, {
        name: clickName,
        desc: clickDesc,
        handleInsert: this.insertClick })
    );
  }
});

module.exports = {
  PropertyTab: ImageProperties,
  EventTab: ImageEvents,

  create: function create() {
    var element = document.createElement('img');
    element.style.height = '100px';
    element.style.width = '100px';
    element.setAttribute('src', '/blockly/media/1x1.gif');
    element.setAttribute('data-canonical-image-url', '');

    return element;
  },
  onDeserialize: function onDeserialize(element, updateProperty) {
    var url = element.getAttribute('data-canonical-image-url') || '';
    if (url) {
      updateProperty(element, 'picture', url);
    } else {
      element.setAttribute('src', '/blockly/media/1x1.gif');
      element.setAttribute('data-canonical-image-url', '');
    }
  }
};

},{"./BooleanPropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/BooleanPropertyRow.jsx","./EventHeaderRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/EventHeaderRow.jsx","./EventRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/EventRow.jsx","./ImagePickerPropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/ImagePickerPropertyRow.jsx","./PropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/PropertyRow.jsx","./ZOrderRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/ZOrderRow.jsx","./elementUtils":"/home/ubuntu/staging/apps/build/js/applab/designElements/elementUtils.js"}],"/home/ubuntu/staging/apps/build/js/applab/designElements/dropdown.jsx":[function(require,module,exports){
/* global $ */

'use strict';

var PropertyRow = require('./PropertyRow.jsx');
var BooleanPropertyRow = require('./BooleanPropertyRow.jsx');
var OptionsSelectRow = require('./OptionsSelectRow.jsx');
var ColorPickerPropertyRow = require('./ColorPickerPropertyRow.jsx');
var ZOrderRow = require('./ZOrderRow.jsx');
var EventHeaderRow = require('./EventHeaderRow.jsx');
var EventRow = require('./EventRow.jsx');
var colors = require('../../sharedJsxStyles').colors;

var elementUtils = require('./elementUtils');

var DropdownProperties = React.createClass({
  displayName: 'DropdownProperties',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onDepthChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    var element = this.props.element;

    return React.createElement(
      'div',
      { id: 'propertyRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(OptionsSelectRow, {
        desc: 'options',
        element: element,
        handleChange: this.props.handleChange.bind(this, 'options') }),
      React.createElement(PropertyRow, {
        desc: 'width (px)',
        isNumber: true,
        initialValue: parseInt(element.style.width, 10),
        handleChange: this.props.handleChange.bind(this, 'style-width') }),
      React.createElement(PropertyRow, {
        desc: 'height (px)',
        isNumber: true,
        initialValue: parseInt(element.style.height, 10),
        handleChange: this.props.handleChange.bind(this, 'style-height') }),
      React.createElement(PropertyRow, {
        desc: 'x position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.left, 10),
        handleChange: this.props.handleChange.bind(this, 'left') }),
      React.createElement(PropertyRow, {
        desc: 'y position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.top, 10),
        handleChange: this.props.handleChange.bind(this, 'top') }),
      React.createElement(ColorPickerPropertyRow, {
        desc: 'text color',
        initialValue: elementUtils.rgb2hex(element.style.color),
        handleChange: this.props.handleChange.bind(this, 'textColor') }),
      React.createElement(ColorPickerPropertyRow, {
        desc: 'background color',
        initialValue: elementUtils.rgb2hex(element.style.backgroundColor),
        handleChange: this.props.handleChange.bind(this, 'backgroundColor') }),
      React.createElement(PropertyRow, {
        desc: 'font size (px)',
        isNumber: true,
        initialValue: parseInt(element.style.fontSize, 10),
        handleChange: this.props.handleChange.bind(this, 'fontSize') }),
      React.createElement(BooleanPropertyRow, {
        desc: 'hidden',
        initialValue: $(element).hasClass('design-mode-hidden'),
        handleChange: this.props.handleChange.bind(this, 'hidden') }),
      React.createElement(ZOrderRow, {
        element: this.props.element,
        onDepthChange: this.props.onDepthChange })
    );

    // TODO:
    // bold/italics/underline (p2)
    // textAlignment (p2)
    // enabled (p2)
  }
});

var DropdownEvents = React.createClass({
  displayName: 'DropdownEvents',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onInsertEvent: React.PropTypes.func.isRequired
  },

  getChangeEventCode: function getChangeEventCode() {
    var id = elementUtils.getId(this.props.element);
    var code = 'onEvent("' + id + '", "change", function(event) {\n' + '  console.log("Selected option: " + getText("' + id + '"));\n' + '});\n';
    return code;
  },

  insertChange: function insertChange() {
    this.props.onInsertEvent(this.getChangeEventCode());
  },

  render: function render() {
    var element = this.props.element;
    var changeName = 'Change';
    var changeDesc = 'Triggered every time an option is selected from the dropdown.';

    return React.createElement(
      'div',
      { id: 'eventRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(EventHeaderRow, null),
      React.createElement(EventRow, {
        name: changeName,
        desc: changeDesc,
        handleInsert: this.insertChange })
    );
  }
});

module.exports = {
  PropertyTab: DropdownProperties,
  EventTab: DropdownEvents,

  create: function create() {
    var element = document.createElement('select');
    element.style.width = '200px';
    element.style.height = '30px';
    element.style.fontSize = '14px';
    element.style.margin = '0';
    element.style.color = colors.white;
    element.style.backgroundColor = colors.teal;

    var option1 = document.createElement('option');
    option1.innerHTML = 'Option 1';
    element.appendChild(option1);

    var option2 = document.createElement('option');
    option2.innerHTML = 'Option 2';
    element.appendChild(option2);

    return element;
  },

  onDeserialize: function onDeserialize(element) {
    // In the future we may want to trigger this on focus events as well.
    $(element).on('mousedown', function (e) {
      if (!Applab.isRunning()) {
        // Disable dropdown menu unless running
        e.preventDefault();
        this.blur();
        window.focus();
      }
    });
  }
};

},{"../../sharedJsxStyles":"/home/ubuntu/staging/apps/build/js/sharedJsxStyles.js","./BooleanPropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/BooleanPropertyRow.jsx","./ColorPickerPropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/ColorPickerPropertyRow.jsx","./EventHeaderRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/EventHeaderRow.jsx","./EventRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/EventRow.jsx","./OptionsSelectRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/OptionsSelectRow.jsx","./PropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/PropertyRow.jsx","./ZOrderRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/ZOrderRow.jsx","./elementUtils":"/home/ubuntu/staging/apps/build/js/applab/designElements/elementUtils.js"}],"/home/ubuntu/staging/apps/build/js/applab/designElements/OptionsSelectRow.jsx":[function(require,module,exports){
/* global $ */
'use strict';

var rowStyle = require('./rowStyle');

var OptionsSelectRow = React.createClass({
  displayName: 'OptionsSelectRow',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLSelectElement).isRequired,
    handleChange: React.PropTypes.func
  },

  getInitialState: function getInitialState() {
    // Pull the text out of each of our child option elements
    var element = this.props.element;
    var value = '';
    for (var i = 0; i < element.children.length; i++) {
      value += element.children[i].textContent + '\n';
    }
    return {
      value: value
    };
  },

  handleChangeInternal: function handleChangeInternal(event) {
    var value = event.target.value;
    // Extract an array of text values, 1 per line
    var optionList = value.split('\n').filter(function (val) {
      return val !== '';
    });
    this.props.handleChange(optionList);
    this.setState({ value: value });
  },

  render: function render() {
    var textAreaStyle = $.extend({}, rowStyle.input, {
      height: 40
    });
    return React.createElement(
      'div',
      { style: rowStyle.container },
      React.createElement(
        'div',
        { style: rowStyle.description },
        this.props.desc
      ),
      React.createElement(
        'div',
        null,
        React.createElement('textarea', {
          onChange: this.handleChangeInternal,
          value: this.state.value,
          style: textAreaStyle })
      )
    );
  }
});

module.exports = OptionsSelectRow;

},{"./rowStyle":"/home/ubuntu/staging/apps/build/js/applab/designElements/rowStyle.js"}],"/home/ubuntu/staging/apps/build/js/applab/designElements/checkbox.jsx":[function(require,module,exports){
/* global $ */

'use strict';

var PropertyRow = require('./PropertyRow.jsx');
var BooleanPropertyRow = require('./BooleanPropertyRow.jsx');
var ColorPickerPropertyRow = require('./ColorPickerPropertyRow.jsx');
var ZOrderRow = require('./ZOrderRow.jsx');
var EventHeaderRow = require('./EventHeaderRow.jsx');
var EventRow = require('./EventRow.jsx');

var elementUtils = require('./elementUtils');

var CheckboxProperties = React.createClass({
  displayName: 'CheckboxProperties',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onDepthChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    var element = this.props.element;

    return React.createElement(
      'div',
      { id: 'propertyRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(PropertyRow, {
        desc: 'width (px)',
        isNumber: true,
        initialValue: parseInt(element.style.width, 10),
        handleChange: this.props.handleChange.bind(this, 'style-width') }),
      React.createElement(PropertyRow, {
        desc: 'height (px)',
        isNumber: true,
        initialValue: parseInt(element.style.height, 10),
        handleChange: this.props.handleChange.bind(this, 'style-height') }),
      React.createElement(PropertyRow, {
        desc: 'x position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.left, 10),
        handleChange: this.props.handleChange.bind(this, 'left') }),
      React.createElement(PropertyRow, {
        desc: 'y position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.top, 10),
        handleChange: this.props.handleChange.bind(this, 'top') }),
      React.createElement(BooleanPropertyRow, {
        desc: 'hidden',
        initialValue: $(element).hasClass('design-mode-hidden'),
        handleChange: this.props.handleChange.bind(this, 'hidden') }),
      React.createElement(BooleanPropertyRow, {
        desc: 'checked',
        initialValue: element.checked,
        handleChange: this.props.handleChange.bind(this, 'checked') }),
      React.createElement(ZOrderRow, {
        element: this.props.element,
        onDepthChange: this.props.onDepthChange })
    );

    // TODO:
    // enabled (p2)
  }
});

var CheckboxEvents = React.createClass({
  displayName: 'CheckboxEvents',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onInsertEvent: React.PropTypes.func.isRequired
  },

  getChangeEventCode: function getChangeEventCode() {
    var id = elementUtils.getId(this.props.element);
    var code = 'onEvent("' + id + '", "change", function(event) {\n' + '  console.log("' + id + ' checked? " + getChecked("' + id + '"));\n' + '});\n';
    return code;
  },

  insertChange: function insertChange() {
    this.props.onInsertEvent(this.getChangeEventCode());
  },

  render: function render() {
    var element = this.props.element;
    var changeName = 'Change';
    var changeDesc = 'Triggered when the checkbox state changes both ' + 'from checked to unchecked and unchecked to checked.';

    return React.createElement(
      'div',
      { id: 'eventRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(EventHeaderRow, null),
      React.createElement(EventRow, {
        name: changeName,
        desc: changeDesc,
        handleInsert: this.insertChange })
    );
  }
});

module.exports = {
  PropertyTab: CheckboxProperties,
  EventTab: CheckboxEvents,

  create: function create() {
    var element = document.createElement('input');
    element.type = 'checkbox';
    element.style.width = '12px';
    element.style.height = '12px';
    element.style.margin = '0px';

    this.onDeserialize(element);

    return element;
  },

  onDeserialize: function onDeserialize(element) {
    // Disable click events unless running
    $(element).on('click', function (e) {
      if (!Applab.isRunning()) {
        element.checked = !element.checked;
      }
    });
  }
};

},{"./BooleanPropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/BooleanPropertyRow.jsx","./ColorPickerPropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/ColorPickerPropertyRow.jsx","./EventHeaderRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/EventHeaderRow.jsx","./EventRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/EventRow.jsx","./PropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/PropertyRow.jsx","./ZOrderRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/ZOrderRow.jsx","./elementUtils":"/home/ubuntu/staging/apps/build/js/applab/designElements/elementUtils.js"}],"/home/ubuntu/staging/apps/build/js/applab/designElements/chart.jsx":[function(require,module,exports){
/* global $ */

'use strict';

var PropertyRow = require('./PropertyRow.jsx');
var BooleanPropertyRow = require('./BooleanPropertyRow.jsx');
var ImagePickerPropertyRow = require('./ImagePickerPropertyRow.jsx');
var ZOrderRow = require('./ZOrderRow.jsx');
var EventHeaderRow = require('./EventHeaderRow.jsx');
var EventRow = require('./EventRow.jsx');

var elementUtils = require('./elementUtils');

var ChartProperties = React.createClass({
  displayName: 'ChartProperties',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onDepthChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    var element = this.props.element;

    return React.createElement(
      'div',
      { id: 'propertyRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(PropertyRow, {
        desc: 'width (px)',
        isNumber: true,
        initialValue: parseInt(element.style.width, 10),
        handleChange: this.props.handleChange.bind(this, 'style-width') }),
      React.createElement(PropertyRow, {
        desc: 'height (px)',
        isNumber: true,
        initialValue: parseInt(element.style.height, 10),
        handleChange: this.props.handleChange.bind(this, 'style-height') }),
      React.createElement(PropertyRow, {
        desc: 'x position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.left, 10),
        handleChange: this.props.handleChange.bind(this, 'left') }),
      React.createElement(PropertyRow, {
        desc: 'y position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.top, 10),
        handleChange: this.props.handleChange.bind(this, 'top') }),
      React.createElement(BooleanPropertyRow, {
        desc: 'hidden',
        initialValue: $(element).hasClass('design-mode-hidden'),
        handleChange: this.props.handleChange.bind(this, 'hidden') }),
      React.createElement(ZOrderRow, {
        element: this.props.element,
        onDepthChange: this.props.onDepthChange })
    );

    // TODO (bbuchanan):
    // chart-specific properties!
  }
});

var ChartEvents = React.createClass({
  displayName: 'ChartEvents',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onInsertEvent: React.PropTypes.func.isRequired
  },

  getDrawChartCode: function getDrawChartCode() {
    var id = elementUtils.getId(this.props.element);
    var code = 'drawChart("' + id + '", "bar", ' + '[\n\t{ label: "Row 1", value: 1 },\n\t{ label: "Row 2", value: 2 }\n]);\n';
    return code;
  },

  getDrawChartFromRecordsCode: function getDrawChartFromRecordsCode() {
    var id = elementUtils.getId(this.props.element);
    var code = 'drawChartFromRecords("' + id + '", "bar", "tableName", ' + '["columnOne", "columnTwo"]);\n';
    return code;
  },

  insertDrawChart: function insertDrawChart() {
    this.props.onInsertEvent(this.getDrawChartCode());
  },

  insertDrawChartFromRecords: function insertDrawChartFromRecords() {
    this.props.onInsertEvent(this.getDrawChartFromRecordsCode());
  },

  render: function render() {
    var element = this.props.element;
    var drawChartName = 'drawChart';
    var drawChartDesc = "Draws the chart using data you provide.";
    var drawChartFromRecordsName = 'drawChartFromRecords';
    var drawChartFromRecordsDesc = "Draws the chart using App Lab's table data storage.";

    return React.createElement(
      'div',
      { id: 'eventRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(EventHeaderRow, null),
      React.createElement(EventRow, {
        name: drawChartName,
        desc: drawChartDesc,
        handleInsert: this.insertDrawChart }),
      React.createElement(EventRow, {
        name: drawChartFromRecordsName,
        desc: drawChartFromRecordsDesc,
        handleInsert: this.insertDrawChartFromRecords })
    );
  }
});

module.exports = {
  PropertyTab: ChartProperties,
  EventTab: ChartEvents,

  create: function create() {
    var element = document.createElement('div');
    element.setAttribute('class', 'chart');
    element.style.height = '100px';
    element.style.width = '100px';

    return element;

    // Note: we use CSS to make this element have a background in design mode
    // but not in code mode.
  }
};

},{"./BooleanPropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/BooleanPropertyRow.jsx","./EventHeaderRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/EventHeaderRow.jsx","./EventRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/EventRow.jsx","./ImagePickerPropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/ImagePickerPropertyRow.jsx","./PropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/PropertyRow.jsx","./ZOrderRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/ZOrderRow.jsx","./elementUtils":"/home/ubuntu/staging/apps/build/js/applab/designElements/elementUtils.js"}],"/home/ubuntu/staging/apps/build/js/applab/designElements/canvas.jsx":[function(require,module,exports){
'use strict';

var PropertyRow = require('./PropertyRow.jsx');
var ZOrderRow = require('./ZOrderRow.jsx');
var EventHeaderRow = require('./EventHeaderRow.jsx');
var EventRow = require('./EventRow.jsx');

var elementUtils = require('./elementUtils');

var CanvasProperties = React.createClass({
  displayName: 'CanvasProperties',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onDepthChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    var element = this.props.element;

    return React.createElement(
      'div',
      { id: 'propertyRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(PropertyRow, {
        desc: 'width (px)',
        isNumber: true,
        initialValue: parseInt(element.getAttribute('width'), 10),
        handleChange: this.props.handleChange.bind(this, 'width') }),
      React.createElement(PropertyRow, {
        desc: 'height (px)',
        isNumber: true,
        initialValue: parseInt(element.getAttribute('height'), 10),
        handleChange: this.props.handleChange.bind(this, 'height') }),
      React.createElement(PropertyRow, {
        desc: 'x position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.left, 10),
        handleChange: this.props.handleChange.bind(this, 'left') }),
      React.createElement(PropertyRow, {
        desc: 'y position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.top, 10),
        handleChange: this.props.handleChange.bind(this, 'top') }),
      React.createElement(ZOrderRow, {
        element: this.props.element,
        onDepthChange: this.props.onDepthChange })
    );
  }
});

var CanvasEvents = React.createClass({
  displayName: 'CanvasEvents',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onInsertEvent: React.PropTypes.func.isRequired
  },

  getClickEventCode: function getClickEventCode() {
    var id = elementUtils.getId(this.props.element);
    var code = 'onEvent("' + id + '", "click", function(event) {\n' + '  console.log("' + id + ' clicked at x:" + event.offsetX + " y:" + event.offsetY);\n' + '  setActiveCanvas("' + id + '");\n' + '  circle(event.offsetX, event.offsetY, 10);\n' + '});\n';
    return code;
  },

  insertClick: function insertClick() {
    this.props.onInsertEvent(this.getClickEventCode());
  },

  render: function render() {
    var element = this.props.element;
    var clickName = 'Click';
    var clickDesc = 'Triggered when the canvas is clicked with a mouse or tapped on a screen.';

    return React.createElement(
      'div',
      { id: 'eventRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(EventHeaderRow, null),
      React.createElement(EventRow, {
        name: clickName,
        desc: clickDesc,
        handleInsert: this.insertClick })
    );
  }
});

module.exports = {
  PropertyTab: CanvasProperties,
  EventTab: CanvasEvents,
  create: function create() {
    var element = document.createElement('canvas');
    element.setAttribute('width', '100px');
    element.setAttribute('height', '100px');

    return element;

    // Note: we use CSS to make this element have a background in design mode
    // but not in code mode.
  }
};

},{"./EventHeaderRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/EventHeaderRow.jsx","./EventRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/EventRow.jsx","./PropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/PropertyRow.jsx","./ZOrderRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/ZOrderRow.jsx","./elementUtils":"/home/ubuntu/staging/apps/build/js/applab/designElements/elementUtils.js"}],"/home/ubuntu/staging/apps/build/js/applab/designElements/button.jsx":[function(require,module,exports){
/* global $ */

'use strict';

var PropertyRow = require('./PropertyRow.jsx');
var BooleanPropertyRow = require('./BooleanPropertyRow.jsx');
var ColorPickerPropertyRow = require('./ColorPickerPropertyRow.jsx');
var ImagePickerPropertyRow = require('./ImagePickerPropertyRow.jsx');
var ZOrderRow = require('./ZOrderRow.jsx');
var EventHeaderRow = require('./EventHeaderRow.jsx');
var EventRow = require('./EventRow.jsx');
var colors = require('../../sharedJsxStyles').colors;

var elementUtils = require('./elementUtils');

var ButtonProperties = React.createClass({
  displayName: 'ButtonProperties',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onDepthChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    var element = this.props.element;

    return React.createElement(
      'div',
      { id: 'propertyRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(PropertyRow, {
        desc: 'text',
        initialValue: $(element).text(),
        handleChange: this.props.handleChange.bind(this, 'text') }),
      React.createElement(PropertyRow, {
        desc: 'width (px)',
        isNumber: true,
        initialValue: parseInt(element.style.width, 10),
        handleChange: this.props.handleChange.bind(this, 'style-width') }),
      React.createElement(PropertyRow, {
        desc: 'height (px)',
        isNumber: true,
        initialValue: parseInt(element.style.height, 10),
        handleChange: this.props.handleChange.bind(this, 'style-height') }),
      React.createElement(PropertyRow, {
        desc: 'x position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.left, 10),
        handleChange: this.props.handleChange.bind(this, 'left') }),
      React.createElement(PropertyRow, {
        desc: 'y position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.top, 10),
        handleChange: this.props.handleChange.bind(this, 'top') }),
      React.createElement(ColorPickerPropertyRow, {
        desc: 'text color',
        initialValue: elementUtils.rgb2hex(element.style.color),
        handleChange: this.props.handleChange.bind(this, 'textColor') }),
      React.createElement(ColorPickerPropertyRow, {
        desc: 'background color',
        initialValue: elementUtils.rgb2hex(element.style.backgroundColor),
        handleChange: this.props.handleChange.bind(this, 'backgroundColor') }),
      React.createElement(PropertyRow, {
        desc: 'font size (px)',
        isNumber: true,
        initialValue: parseInt(element.style.fontSize, 10),
        handleChange: this.props.handleChange.bind(this, 'fontSize') }),
      React.createElement(ImagePickerPropertyRow, {
        desc: 'image',
        initialValue: element.getAttribute('data-canonical-image-url') || '',
        handleChange: this.props.handleChange.bind(this, 'image') }),
      React.createElement(BooleanPropertyRow, {
        desc: 'hidden',
        initialValue: $(element).hasClass('design-mode-hidden'),
        handleChange: this.props.handleChange.bind(this, 'hidden') }),
      React.createElement(ZOrderRow, {
        element: this.props.element,
        onDepthChange: this.props.onDepthChange })
    );

    // TODO (brent):
    // bold/italics/underline (p2)
    // shape (p2)
    // textAlignment (p2)
    // enabled (p2)
  }
});

var ButtonEvents = React.createClass({
  displayName: 'ButtonEvents',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onInsertEvent: React.PropTypes.func.isRequired
  },

  getClickEventCode: function getClickEventCode() {
    var id = elementUtils.getId(this.props.element);
    var code = 'onEvent("' + id + '", "click", function(event) {\n' + '  console.log("' + id + ' clicked!");\n' + '});\n';
    return code;
  },

  insertClick: function insertClick() {
    this.props.onInsertEvent(this.getClickEventCode());
  },

  render: function render() {
    var element = this.props.element;
    var clickName = 'Click';
    var clickDesc = 'Triggered when the button is clicked with a mouse or tapped on a screen.';

    return React.createElement(
      'div',
      { id: 'eventRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(EventHeaderRow, null),
      React.createElement(EventRow, {
        name: clickName,
        desc: clickDesc,
        handleInsert: this.insertClick })
    );
  }
});

module.exports = {
  PropertyTab: ButtonProperties,
  EventTab: ButtonEvents,
  create: function create() {
    var element = document.createElement('button');
    element.appendChild(document.createTextNode('Button'));
    element.style.padding = '0px';
    element.style.margin = '0px';
    element.style.height = '30px';
    element.style.width = '80px';
    element.style.fontSize = '14px';
    element.style.color = colors.white;
    element.style.backgroundColor = colors.teal;

    return element;
  },
  onDeserialize: function onDeserialize(element, updateProperty) {
    var url = element.getAttribute('data-canonical-image-url');
    if (url) {
      updateProperty(element, 'image', url);
    }
  }
};

},{"../../sharedJsxStyles":"/home/ubuntu/staging/apps/build/js/sharedJsxStyles.js","./BooleanPropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/BooleanPropertyRow.jsx","./ColorPickerPropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/ColorPickerPropertyRow.jsx","./EventHeaderRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/EventHeaderRow.jsx","./EventRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/EventRow.jsx","./ImagePickerPropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/ImagePickerPropertyRow.jsx","./PropertyRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/PropertyRow.jsx","./ZOrderRow.jsx":"/home/ubuntu/staging/apps/build/js/applab/designElements/ZOrderRow.jsx","./elementUtils":"/home/ubuntu/staging/apps/build/js/applab/designElements/elementUtils.js"}],"/home/ubuntu/staging/apps/build/js/applab/designElements/ZOrderRow.jsx":[function(require,module,exports){
'use strict';

var rowStyle = require('./rowStyle');

var ZOrderRow = React.createClass({
  displayName: 'ZOrderRow',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    onDepthChange: React.PropTypes.func.isRequired
  },

  getInitialState: function getInitialState() {
    return {
      value: this.props.initialValue
    };
  },

  componentWillReceiveProps: function componentWillReceiveProps(newProps) {
    this.setState({ value: newProps.initialValue });
  },

  render: function render() {
    var element = this.props.element;

    // Element will be wrapped in a resizable div
    var outerElement = element.parentNode;
    var index = Array.prototype.indexOf.call(outerElement.parentNode.children, outerElement);
    var isBackMost = index === 0;
    var isFrontMost = index + 1 === outerElement.parentNode.children.length;

    var squareButton = {
      width: 42,
      height: 42,
      marginLeft: 0,
      marginRight: 10,
      backgroundColor: '#0094ca' // $cyan
    };

    var squareButtonDisabled = {
      width: 42,
      height: 42,
      marginLeft: 0,
      marginRight: 10
    };

    return React.createElement(
      'div',
      { style: rowStyle.container },
      React.createElement(
        'div',
        { style: rowStyle.description },
        'depth'
      ),
      React.createElement(
        'div',
        null,
        React.createElement(
          'button',
          {
            style: isBackMost ? squareButtonDisabled : squareButton,
            onClick: this.props.onDepthChange.bind(this, element, 'toBack'),
            disabled: isBackMost,
            title: 'Send to Back' },
          React.createElement('i', { className: 'fa fa-angle-double-left' })
        ),
        React.createElement(
          'button',
          {
            style: isBackMost ? squareButtonDisabled : squareButton,
            onClick: this.props.onDepthChange.bind(this, element, 'backward'),
            disabled: isBackMost,
            title: 'Send Backward' },
          React.createElement('i', { className: 'fa fa-angle-left' })
        ),
        React.createElement(
          'button',
          {
            style: isFrontMost ? squareButtonDisabled : squareButton,
            onClick: this.props.onDepthChange.bind(this, element, 'forward'),
            disabled: isFrontMost,
            title: 'Send Forward' },
          React.createElement('i', { className: 'fa fa-angle-right' })
        ),
        React.createElement(
          'button',
          {
            style: isFrontMost ? squareButtonDisabled : squareButton,
            onClick: this.props.onDepthChange.bind(this, element, 'toFront'),
            disabled: isFrontMost,
            title: 'Send to Front' },
          React.createElement('i', { className: 'fa fa-angle-double-right' })
        )
      )
    );
  }
});

module.exports = ZOrderRow;

},{"./rowStyle":"/home/ubuntu/staging/apps/build/js/applab/designElements/rowStyle.js"}],"/home/ubuntu/staging/apps/build/js/applab/designElements/PropertyRow.jsx":[function(require,module,exports){
/* global $ */
'use strict';

var rowStyle = require('./rowStyle');
var elementUtils = require('./elementUtils');
var utils = require('../../utils');

var LockState = {
  LOCKED: 'LOCKED',
  UNLOCKED: 'UNLOCKED'
};

var PropertyRow = React.createClass({
  displayName: 'PropertyRow',

  propTypes: {
    desc: React.PropTypes.string.isRequired,
    initialValue: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]).isRequired,
    isNumber: React.PropTypes.bool,
    lockState: React.PropTypes.oneOf([LockState.LOCKED, LockState.UNLOCKED, undefined]),
    isMultiLine: React.PropTypes.bool,
    handleChange: React.PropTypes.func,
    handleLockChange: React.PropTypes.func,
    isIdRow: React.PropTypes.bool
  },

  getInitialState: function getInitialState() {
    return {
      value: this.props.initialValue,
      isValidValue: true
    };
  },

  componentWillReceiveProps: function componentWillReceiveProps(newProps) {
    this.setState({
      value: newProps.initialValue,
      isValidValue: true
    });
  },

  isIdAvailable: function isIdAvailable(value) {
    if (value === this.props.initialValue) {
      return true;
    }

    // Elements in divApplab must be allowed since divApplab may be stale
    // with respect to what's in design mode, and we will catch any collisions
    // with design mode elements by not setting allowDesignElements.
    var options = {
      allowCodeElements: true,
      allowDesignElements: false,
      allowDesignPrefix: false
    };
    return elementUtils.isIdAvailable(value, options);
  },

  handleChangeInternal: function handleChangeInternal(event) {
    var value = event.target.value;
    var isValidValue = !this.props.isIdRow || this.isIdAvailable(value);
    this.setValue(value, isValidValue);
  },

  /**
   * Updates this component's state, and calls the change handler
   * only if the new value is valid.
   * @param value {string} The new value of the property row.
   * @param isValidValue {boolean} Whether the value is valid. Default: true.
   */
  setValue: function setValue(value, isValidValue) {
    isValidValue = utils.valueOr(isValidValue, true);
    this.setState({
      value: value,
      isValidValue: isValidValue
    });
    if (isValidValue) {
      this.props.handleChange(value);
    }
  },

  handleClickLock: function handleClickLock() {
    if (this.props.lockState === LockState.LOCKED) {
      this.props.handleLockChange(LockState.UNLOCKED);
    } else if (this.props.lockState === LockState.UNLOCKED) {
      this.props.handleLockChange(LockState.LOCKED);
    }
  },

  onIdRowBlur: function onIdRowBlur() {
    if (!this.state.isValidValue) {
      var value = this.props.initialValue;
      this.setValue(value);
    }
  },

  render: function render() {
    var idRowStyle = $.extend({}, rowStyle.container, rowStyle.maxWidth, {
      backgroundColor: '#a69bc1',
      paddingBottom: 10
    });
    var inputStyle = $.extend({}, rowStyle.input, {
      backgroundColor: this.state.isValidValue ? null : "#ffcccc"
    });

    var inputElement;
    if (this.props.isMultiLine) {
      inputElement = React.createElement('textarea', {
        value: this.state.value,
        onChange: this.handleChangeInternal });
    } else {
      inputElement = React.createElement('input', {
        type: this.props.isNumber ? 'number' : undefined,
        value: this.state.value,
        onChange: this.handleChangeInternal,
        onBlur: this.props.isIdRow ? this.onIdRowBlur : null,
        style: inputStyle });
    }

    var lockStyle = {
      marginLeft: '5px'
    };

    var lockIcon;
    // state is either locked/unlocked or undefined (no icon)
    if (this.props.lockState) {
      var lockClass = "fa fa-" + (this.props.lockState === LockState.LOCKED ? 'lock' : 'unlock');
      lockIcon = React.createElement('i', {
        className: lockClass,
        style: lockStyle,
        onClick: this.handleClickLock });
    }

    return React.createElement(
      'div',
      { style: this.props.isIdRow ? idRowStyle : rowStyle.container },
      React.createElement(
        'div',
        { style: rowStyle.description },
        this.props.desc
      ),
      React.createElement(
        'div',
        null,
        inputElement,
        lockIcon
      )
    );
  }
});
PropertyRow.LockState = LockState;

module.exports = PropertyRow;

},{"../../utils":"/home/ubuntu/staging/apps/build/js/utils.js","./elementUtils":"/home/ubuntu/staging/apps/build/js/applab/designElements/elementUtils.js","./rowStyle":"/home/ubuntu/staging/apps/build/js/applab/designElements/rowStyle.js"}],"/home/ubuntu/staging/apps/build/js/applab/designElements/ImagePickerPropertyRow.jsx":[function(require,module,exports){
'use strict';

var showAssetManager = require('../../assetManagement/show.js');
var rowStyle = require('./rowStyle');

// We'd prefer not to make GET requests every time someone types a character.
// This is the amount of time that must pass between edits before we'll do a GET
// I expect that the vast majority of time, people will be copy/pasting URLs
// instead of typing them manually, which will result in an immediate GET,
// unless they pasted within USER_INPUT_DELAY ms of editing the field manually
var USER_INPUT_DELAY = 1500;

var PropertyRow = React.createClass({
  displayName: 'PropertyRow',

  propTypes: {
    initialValue: React.PropTypes.string.isRequired,
    handleChange: React.PropTypes.func
  },

  getInitialState: function getInitialState() {
    return {
      value: this.props.initialValue,
      lastEdit: 0
    };
  },

  changeUnlessEditing: function changeUnlessEditing(filename) {
    if (Date.now() - this.state.lastEdit >= USER_INPUT_DELAY) {
      this.changeImage(filename);
    }
  },

  handleChangeInternal: function handleChangeInternal(event) {
    var filename = event.target.value;
    this.changeUnlessEditing(filename);

    this.setState({
      value: filename,
      lastEdit: Date.now()
    });

    // We may not have changed file yet (if we still actively editing)
    setTimeout((function () {
      this.changeUnlessEditing(this.state.value);
    }).bind(this), USER_INPUT_DELAY);
  },

  handleButtonClick: function handleButtonClick() {
    // TODO: This isn't the pure-React way of referencing the AssetManager
    // component. Ideally we'd be able to `require` it directly without needing
    // to know about `designMode`.
    //
    // However today the `createModalDialog` function and `Dialog` component
    // are intertwined with `StudioApp` which is why we have this direct call.
    showAssetManager(this.changeImage, 'image');
  },

  changeImage: function changeImage(filename) {
    this.props.handleChange(filename);
    this.setState({ value: filename });
  },

  render: function render() {
    return React.createElement(
      'div',
      { style: rowStyle.container },
      React.createElement(
        'div',
        { style: rowStyle.description },
        this.props.desc
      ),
      React.createElement(
        'div',
        null,
        React.createElement('input', {
          value: this.state.value,
          onChange: this.handleChangeInternal,
          style: rowStyle.input }),
        ' ',
        React.createElement(
          'a',
          { onClick: this.handleButtonClick },
          'Choose...'
        )
      )
    );
  }
});

module.exports = PropertyRow;

},{"../../assetManagement/show.js":"/home/ubuntu/staging/apps/build/js/assetManagement/show.js","./rowStyle":"/home/ubuntu/staging/apps/build/js/applab/designElements/rowStyle.js"}],"/home/ubuntu/staging/apps/build/js/applab/designElements/EventRow.jsx":[function(require,module,exports){
/* global $ */
'use strict';

var rowStyle = require('./rowStyle');

var EventRow = module.exports = React.createClass({
  displayName: 'exports',

  propTypes: {
    name: React.PropTypes.string.isRequired,
    desc: React.PropTypes.string.isRequired,
    handleInsert: React.PropTypes.func.isRequired
  },

  render: function render() {
    var style = {
      container: $.extend({}, rowStyle.container, rowStyle.maxWidth),
      name: {
        color: '#4d575f',
        fontWeight: 'bold',
        fontSize: 15
      },
      desc: {
        color: '#949ca2',
        fontStyle: 'italic'
      }
    };

    return React.createElement(
      'div',
      { style: style.container },
      React.createElement(
        'div',
        { style: style.name },
        this.props.name
      ),
      React.createElement(
        'div',
        { style: style.desc },
        this.props.desc
      ),
      React.createElement(
        'div',
        null,
        React.createElement(
          'a',
          { onClick: this.props.handleInsert, className: 'hover-pointer' },
          'Insert and show code'
        )
      )
    );
  }
});

},{"./rowStyle":"/home/ubuntu/staging/apps/build/js/applab/designElements/rowStyle.js"}],"/home/ubuntu/staging/apps/build/js/applab/designElements/EventHeaderRow.jsx":[function(require,module,exports){
/* global $ */
'use strict';

var rowStyle = require('./rowStyle');
var applabMsg = require('../locale');

var EventHeaderRow = module.exports = React.createClass({
  displayName: 'exports',

  render: function render() {
    var style = $.extend({}, rowStyle.container, rowStyle.maxWidth, {
      color: '#5b6770'
    });

    return React.createElement(
      'div',
      { style: style },
      applabMsg.addEventHeader()
    );
  }
});

},{"../locale":"/home/ubuntu/staging/apps/build/js/applab/locale.js","./rowStyle":"/home/ubuntu/staging/apps/build/js/applab/designElements/rowStyle.js"}],"/home/ubuntu/staging/apps/build/js/applab/designElements/ColorPickerPropertyRow.jsx":[function(require,module,exports){
/* global $ */
'use strict';

var rowStyle = require('./rowStyle');
var colors = require('../../sharedJsxStyles').colors;

var colorPicker = require('../colpick');

var ColorPickerPropertyRow = React.createClass({
  displayName: 'ColorPickerPropertyRow',

  propTypes: {
    initialValue: React.PropTypes.string.isRequired,
    handleChange: React.PropTypes.func
  },

  getInitialState: function getInitialState() {
    return {
      value: this.props.initialValue
    };
  },

  componentDidMount: function componentDidMount() {
    this.ensureColorPicker();
  },

  componentDidUpdate: function componentDidUpdate() {
    this.ensureColorPicker();
  },

  /**
   * Make our button a colpick color picker, if it isn't already
   */
  ensureColorPicker: function ensureColorPicker() {
    var element = React.findDOMNode(this.refs.colorPicker);
    $(element).colpick({
      color: this.state.value,
      layout: 'rgbhex',
      submit: 0,
      onChange: this.handleColorChange
    });
  },

  handleChangeInternal: function handleChangeInternal(event) {
    this.changeColor(event.target.value);
  },

  handleColorChange: function handleColorChange(hsbColor, hexColor) {
    this.changeColor('#' + hexColor);
  },

  changeColor: function changeColor(color) {
    this.props.handleChange(color);
    this.setState({ value: color });
  },

  render: function render() {
    var buttonStyle = {
      backgroundColor: this.state.value,
      verticalAlign: 'top'
    };

    return React.createElement(
      'div',
      { style: rowStyle.container },
      React.createElement(
        'div',
        { style: rowStyle.description },
        this.props.desc
      ),
      React.createElement(
        'div',
        null,
        React.createElement('input', {
          value: this.state.value,
          onChange: this.handleChangeInternal,
          style: rowStyle.input }),
        React.createElement('button', {
          className: this.state.value === '' ? 'rainbow-gradient' : undefined,
          style: buttonStyle,
          ref: 'colorPicker' })
      )
    );
  }
});

module.exports = ColorPickerPropertyRow;

},{"../../sharedJsxStyles":"/home/ubuntu/staging/apps/build/js/sharedJsxStyles.js","../colpick":"/home/ubuntu/staging/apps/build/js/applab/colpick.js","./rowStyle":"/home/ubuntu/staging/apps/build/js/applab/designElements/rowStyle.js"}],"/home/ubuntu/staging/apps/build/js/sharedJsxStyles.js":[function(require,module,exports){
/**
 * A place to share styles for use in inline jsx. There may be value in keeping
 * this in sync with some of our .scss files, in particular when it comes to
 * colors
 */

'use strict';

module.exports = {
  colors: {
    green: '#b9bf15',
    white: '#fff',
    orange: '#ffa400',
    teal: '#1abc9c'
  }
};

},{}],"/home/ubuntu/staging/apps/build/js/applab/colpick.js":[function(require,module,exports){
/*
colpick Color Picker
Copyright 2013 Jose Vargas. Licensed under GPL license. Based on Stefan Petre's Color Picker www.eyecon.ro, dual licensed under the MIT and GPL licenses

For usage and examples: colpick.com/plugin
 */

'use strict';

(function ($) {
	var colpick = (function () {
		var tpl = '<div class="colpick"><div class="colpick_color"><div class="colpick_color_overlay1"><div class="colpick_color_overlay2"><div class="colpick_selector_outer"><div class="colpick_selector_inner"></div></div></div></div></div><div class="colpick_hue"><div class="colpick_hue_arrs"><div class="colpick_hue_larr"></div><div class="colpick_hue_rarr"></div></div></div><div class="colpick_new_color"></div><div class="colpick_current_color"></div><div class="colpick_hex_field"><div class="colpick_field_letter">#</div><input type="text" maxlength="6" size="6" /></div><div class="colpick_rgb_r colpick_field"><div class="colpick_field_letter">R</div><input type="text" maxlength="3" size="3" /><div class="colpick_field_arrs"><div class="colpick_field_uarr"></div><div class="colpick_field_darr"></div></div></div><div class="colpick_rgb_g colpick_field"><div class="colpick_field_letter">G</div><input type="text" maxlength="3" size="3" /><div class="colpick_field_arrs"><div class="colpick_field_uarr"></div><div class="colpick_field_darr"></div></div></div><div class="colpick_rgb_b colpick_field"><div class="colpick_field_letter">B</div><input type="text" maxlength="3" size="3" /><div class="colpick_field_arrs"><div class="colpick_field_uarr"></div><div class="colpick_field_darr"></div></div></div><div class="colpick_hsb_h colpick_field"><div class="colpick_field_letter">H</div><input type="text" maxlength="3" size="3" /><div class="colpick_field_arrs"><div class="colpick_field_uarr"></div><div class="colpick_field_darr"></div></div></div><div class="colpick_hsb_s colpick_field"><div class="colpick_field_letter">S</div><input type="text" maxlength="3" size="3" /><div class="colpick_field_arrs"><div class="colpick_field_uarr"></div><div class="colpick_field_darr"></div></div></div><div class="colpick_hsb_b colpick_field"><div class="colpick_field_letter">B</div><input type="text" maxlength="3" size="3" /><div class="colpick_field_arrs"><div class="colpick_field_uarr"></div><div class="colpick_field_darr"></div></div></div><div class="colpick_submit"></div></div>',
		    defaults = {
			showEvent: 'click',
			onShow: function onShow() {},
			onBeforeShow: function onBeforeShow() {},
			onHide: function onHide() {},
			onChange: function onChange() {},
			onSubmit: function onSubmit() {},
			colorScheme: 'light',
			color: '3289c7',
			livePreview: true,
			flat: false,
			layout: 'full',
			submit: 1,
			submitText: 'OK',
			height: 156
		},
		   
		//Fill the inputs of the plugin
		fillRGBFields = function fillRGBFields(hsb, cal) {
			var rgb = hsbToRgb(hsb);
			$(cal).data('colpick').fields.eq(1).val(rgb.r).end().eq(2).val(rgb.g).end().eq(3).val(rgb.b).end();
		},
		    fillHSBFields = function fillHSBFields(hsb, cal) {
			$(cal).data('colpick').fields.eq(4).val(Math.round(hsb.h)).end().eq(5).val(Math.round(hsb.s)).end().eq(6).val(Math.round(hsb.b)).end();
		},
		    fillHexFields = function fillHexFields(hsb, cal) {
			$(cal).data('colpick').fields.eq(0).val(hsbToHex(hsb));
		},
		   
		//Set the round selector position
		setSelector = function setSelector(hsb, cal) {
			$(cal).data('colpick').selector.css('backgroundColor', '#' + hsbToHex({ h: hsb.h, s: 100, b: 100 }));
			$(cal).data('colpick').selectorIndic.css({
				left: parseInt($(cal).data('colpick').height * hsb.s / 100, 10),
				top: parseInt($(cal).data('colpick').height * (100 - hsb.b) / 100, 10)
			});
		},
		   
		//Set the hue selector position
		setHue = function setHue(hsb, cal) {
			$(cal).data('colpick').hue.css('top', parseInt($(cal).data('colpick').height - $(cal).data('colpick').height * hsb.h / 360, 10));
		},
		   
		//Set current and new colors
		setCurrentColor = function setCurrentColor(hsb, cal) {
			$(cal).data('colpick').currentColor.css('backgroundColor', '#' + hsbToHex(hsb));
		},
		    setNewColor = function setNewColor(hsb, cal) {
			$(cal).data('colpick').newColor.css('backgroundColor', '#' + hsbToHex(hsb));
		},
		   
		//Called when the new color is changed
		change = function change(ev) {
			var cal = $(this).parent().parent(),
			    col;
			if (this.parentNode.className.indexOf('_hex') > 0) {
				cal.data('colpick').color = col = hexToHsb(fixHex(this.value));
				fillRGBFields(col, cal.get(0));
				fillHSBFields(col, cal.get(0));
			} else if (this.parentNode.className.indexOf('_hsb') > 0) {
				cal.data('colpick').color = col = fixHSB({
					h: parseInt(cal.data('colpick').fields.eq(4).val(), 10),
					s: parseInt(cal.data('colpick').fields.eq(5).val(), 10),
					b: parseInt(cal.data('colpick').fields.eq(6).val(), 10)
				});
				fillRGBFields(col, cal.get(0));
				fillHexFields(col, cal.get(0));
			} else {
				cal.data('colpick').color = col = rgbToHsb(fixRGB({
					r: parseInt(cal.data('colpick').fields.eq(1).val(), 10),
					g: parseInt(cal.data('colpick').fields.eq(2).val(), 10),
					b: parseInt(cal.data('colpick').fields.eq(3).val(), 10)
				}));
				fillHexFields(col, cal.get(0));
				fillHSBFields(col, cal.get(0));
			}
			setSelector(col, cal.get(0));
			setHue(col, cal.get(0));
			setNewColor(col, cal.get(0));
			cal.data('colpick').onChange.apply(cal.parent(), [col, hsbToHex(col), hsbToRgb(col), cal.data('colpick').el, 0]);
		},
		   
		//Change style on blur and on focus of inputs
		blur = function blur(ev) {
			$(this).parent().removeClass('colpick_focus');
		},
		    focus = function focus() {
			$(this).parent().parent().data('colpick').fields.parent().removeClass('colpick_focus');
			$(this).parent().addClass('colpick_focus');
		},
		   
		//Increment/decrement arrows functions
		downIncrement = function downIncrement(ev) {
			ev.preventDefault ? ev.preventDefault() : ev.returnValue = false;
			var field = $(this).parent().find('input').focus();
			var current = {
				el: $(this).parent().addClass('colpick_slider'),
				max: this.parentNode.className.indexOf('_hsb_h') > 0 ? 360 : this.parentNode.className.indexOf('_hsb') > 0 ? 100 : 255,
				y: ev.pageY,
				field: field,
				val: parseInt(field.val(), 10),
				preview: $(this).parent().parent().data('colpick').livePreview
			};
			$(document).mouseup(current, upIncrement);
			$(document).mousemove(current, moveIncrement);
		},
		    moveIncrement = function moveIncrement(ev) {
			ev.data.field.val(Math.max(0, Math.min(ev.data.max, parseInt(ev.data.val - ev.pageY + ev.data.y, 10))));
			if (ev.data.preview) {
				change.apply(ev.data.field.get(0), [true]);
			}
			return false;
		},
		    upIncrement = function upIncrement(ev) {
			change.apply(ev.data.field.get(0), [true]);
			ev.data.el.removeClass('colpick_slider').find('input').focus();
			$(document).off('mouseup', upIncrement);
			$(document).off('mousemove', moveIncrement);
			return false;
		},
		   
		//Hue slider functions
		downHue = function downHue(ev) {
			ev.preventDefault ? ev.preventDefault() : ev.returnValue = false;
			var current = {
				cal: $(this).parent(),
				y: $(this).offset().top
			};
			$(document).on('mouseup touchend', current, upHue);
			$(document).on('mousemove touchmove', current, moveHue);

			var pageY = ev.type == 'touchstart' ? ev.originalEvent.changedTouches[0].pageY : ev.pageY;
			change.apply(current.cal.data('colpick').fields.eq(4).val(parseInt(360 * (current.cal.data('colpick').height - (pageY - current.y)) / current.cal.data('colpick').height, 10)).get(0), [current.cal.data('colpick').livePreview]);
			return false;
		},
		    moveHue = function moveHue(ev) {
			var pageY = ev.type == 'touchmove' ? ev.originalEvent.changedTouches[0].pageY : ev.pageY;
			change.apply(ev.data.cal.data('colpick').fields.eq(4).val(parseInt(360 * (ev.data.cal.data('colpick').height - Math.max(0, Math.min(ev.data.cal.data('colpick').height, pageY - ev.data.y))) / ev.data.cal.data('colpick').height, 10)).get(0), [ev.data.preview]);
			return false;
		},
		    upHue = function upHue(ev) {
			fillRGBFields(ev.data.cal.data('colpick').color, ev.data.cal.get(0));
			fillHexFields(ev.data.cal.data('colpick').color, ev.data.cal.get(0));
			$(document).off('mouseup touchend', upHue);
			$(document).off('mousemove touchmove', moveHue);
			return false;
		},
		   
		//Color selector functions
		downSelector = function downSelector(ev) {
			ev.preventDefault ? ev.preventDefault() : ev.returnValue = false;
			var current = {
				cal: $(this).parent(),
				pos: $(this).offset()
			};
			current.preview = current.cal.data('colpick').livePreview;

			$(document).on('mouseup touchend', current, upSelector);
			$(document).on('mousemove touchmove', current, moveSelector);

			var pageX, pageY;
			if (ev.type == 'touchstart') {
				pageX = ev.originalEvent.changedTouches[0].pageX, pageY = ev.originalEvent.changedTouches[0].pageY;
			} else {
				pageX = ev.pageX;
				pageY = ev.pageY;
			}

			change.apply(current.cal.data('colpick').fields.eq(6).val(parseInt(100 * (current.cal.data('colpick').height - (pageY - current.pos.top)) / current.cal.data('colpick').height, 10)).end().eq(5).val(parseInt(100 * (pageX - current.pos.left) / current.cal.data('colpick').height, 10)).get(0), [current.preview]);
			return false;
		},
		    moveSelector = function moveSelector(ev) {
			var pageX, pageY;
			if (ev.type == 'touchmove') {
				pageX = ev.originalEvent.changedTouches[0].pageX, pageY = ev.originalEvent.changedTouches[0].pageY;
			} else {
				pageX = ev.pageX;
				pageY = ev.pageY;
			}

			change.apply(ev.data.cal.data('colpick').fields.eq(6).val(parseInt(100 * (ev.data.cal.data('colpick').height - Math.max(0, Math.min(ev.data.cal.data('colpick').height, pageY - ev.data.pos.top))) / ev.data.cal.data('colpick').height, 10)).end().eq(5).val(parseInt(100 * Math.max(0, Math.min(ev.data.cal.data('colpick').height, pageX - ev.data.pos.left)) / ev.data.cal.data('colpick').height, 10)).get(0), [ev.data.preview]);
			return false;
		},
		    upSelector = function upSelector(ev) {
			fillRGBFields(ev.data.cal.data('colpick').color, ev.data.cal.get(0));
			fillHexFields(ev.data.cal.data('colpick').color, ev.data.cal.get(0));
			$(document).off('mouseup touchend', upSelector);
			$(document).off('mousemove touchmove', moveSelector);
			return false;
		},
		   
		//Submit button
		clickSubmit = function clickSubmit(ev) {
			var cal = $(this).parent();
			var col = cal.data('colpick').color;
			cal.data('colpick').origColor = col;
			setCurrentColor(col, cal.get(0));
			cal.data('colpick').onSubmit(col, hsbToHex(col), hsbToRgb(col), cal.data('colpick').el);
		},
		   
		//Show/hide the color picker
		show = function show(ev) {
			// Prevent the trigger of any direct parent
			ev.stopPropagation();
			var cal = $('#' + $(this).data('colpickId'));
			cal.data('colpick').onBeforeShow.apply(this, [cal.get(0)]);
			var pos = $(this).offset();
			var top = pos.top + this.offsetHeight;
			var left = pos.left;
			var viewPort = getViewport();
			var calW = cal.width();
			if (left + calW > viewPort.l + viewPort.w) {
				left -= calW;
			}
			cal.css({ left: left + 'px', top: top + 'px' });
			if (cal.data('colpick').onShow.apply(this, [cal.get(0)]) != false) {
				cal.show();
			}
			//Hide when user clicks outside
			$('html').mousedown({ cal: cal }, hide);
			cal.mousedown(function (ev) {
				ev.stopPropagation();
			});
		},
		    hide = function hide(ev) {
			if (ev.data.cal.data('colpick').onHide.apply(this, [ev.data.cal.get(0)]) != false) {
				ev.data.cal.hide();
			}
			$('html').off('mousedown', hide);
		},
		    getViewport = function getViewport() {
			var m = document.compatMode == 'CSS1Compat';
			return {
				l: window.pageXOffset || (m ? document.documentElement.scrollLeft : document.body.scrollLeft),
				w: window.innerWidth || (m ? document.documentElement.clientWidth : document.body.clientWidth)
			};
		},
		   
		//Fix the values if the user enters a negative or high value
		fixHSB = function fixHSB(hsb) {
			return {
				h: Math.min(360, Math.max(0, hsb.h)),
				s: Math.min(100, Math.max(0, hsb.s)),
				b: Math.min(100, Math.max(0, hsb.b))
			};
		},
		    fixRGB = function fixRGB(rgb) {
			return {
				r: Math.min(255, Math.max(0, rgb.r)),
				g: Math.min(255, Math.max(0, rgb.g)),
				b: Math.min(255, Math.max(0, rgb.b))
			};
		},
		    fixHex = function fixHex(hex) {
			var len = 6 - hex.length;
			if (len > 0) {
				var o = [];
				for (var i = 0; i < len; i++) {
					o.push('0');
				}
				o.push(hex);
				hex = o.join('');
			}
			return hex;
		},
		    restoreOriginal = function restoreOriginal() {
			var cal = $(this).parent();
			var col = cal.data('colpick').origColor;
			cal.data('colpick').color = col;
			fillRGBFields(col, cal.get(0));
			fillHexFields(col, cal.get(0));
			fillHSBFields(col, cal.get(0));
			setSelector(col, cal.get(0));
			setHue(col, cal.get(0));
			setNewColor(col, cal.get(0));
		};
		return {
			init: function init(opt) {
				opt = $.extend({}, defaults, opt || {});
				//Set color
				if (typeof opt.color == 'string') {
					opt.color = hexToHsb(opt.color);
				} else if (opt.color.r != undefined && opt.color.g != undefined && opt.color.b != undefined) {
					opt.color = rgbToHsb(opt.color);
				} else if (opt.color.h != undefined && opt.color.s != undefined && opt.color.b != undefined) {
					opt.color = fixHSB(opt.color);
				} else {
					return this;
				}

				//For each selected DOM element
				return this.each(function () {
					//If the element does not have an ID
					if (!$(this).data('colpickId')) {
						var options = $.extend({}, opt);
						options.origColor = opt.color;
						//Generate and assign a random ID
						var id = 'collorpicker_' + parseInt(Math.random() * 1000);
						$(this).data('colpickId', id);
						//Set the tpl's ID and get the HTML
						var cal = $(tpl).attr('id', id);
						//Add class according to layout
						cal.addClass('colpick_' + options.layout + (options.submit ? '' : ' colpick_' + options.layout + '_ns'));
						//Add class if the color scheme is not default
						if (options.colorScheme != 'light') {
							cal.addClass('colpick_' + options.colorScheme);
						}
						//Setup submit button
						cal.find('div.colpick_submit').html(options.submitText).click(clickSubmit);
						//Setup input fields
						options.fields = cal.find('input').change(change).blur(blur).focus(focus);
						cal.find('div.colpick_field_arrs').mousedown(downIncrement).end().find('div.colpick_current_color').click(restoreOriginal);
						//Setup hue selector
						options.selector = cal.find('div.colpick_color').on('mousedown touchstart', downSelector);
						options.selectorIndic = options.selector.find('div.colpick_selector_outer');
						//Store parts of the plugin
						options.el = this;
						options.hue = cal.find('div.colpick_hue_arrs');
						var huebar = options.hue.parent();
						//Paint the hue bar
						var UA = navigator.userAgent.toLowerCase();
						var isIE = navigator.appName === 'Microsoft Internet Explorer';
						var IEver = isIE ? parseFloat(UA.match(/msie ([0-9]{1,}[\.0-9]{0,})/)[1]) : 0;
						var ngIE = isIE && IEver < 10;
						var stops = ['#ff0000', '#ff0080', '#ff00ff', '#8000ff', '#0000ff', '#0080ff', '#00ffff', '#00ff80', '#00ff00', '#80ff00', '#ffff00', '#ff8000', '#ff0000'];
						if (ngIE) {
							var i, div;
							for (i = 0; i <= 11; i++) {
								div = $('<div></div>').attr('style', 'height:8.333333%; filter:progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr=' + stops[i] + ', endColorstr=' + stops[i + 1] + '); -ms-filter: "progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr=' + stops[i] + ', endColorstr=' + stops[i + 1] + ')";');
								huebar.append(div);
							}
						} else {
							var stopList = stops.join(',');
							huebar.attr('style', 'background:-webkit-linear-gradient(top,' + stopList + '); background: -o-linear-gradient(top,' + stopList + '); background: -ms-linear-gradient(top,' + stopList + '); background:-moz-linear-gradient(top,' + stopList + '); -webkit-linear-gradient(top,' + stopList + '); background:linear-gradient(to bottom,' + stopList + '); ');
						}
						cal.find('div.colpick_hue').on('mousedown touchstart', downHue);
						options.newColor = cal.find('div.colpick_new_color');
						options.currentColor = cal.find('div.colpick_current_color');
						//Store options and fill with default color
						cal.data('colpick', options);
						fillRGBFields(options.color, cal.get(0));
						fillHSBFields(options.color, cal.get(0));
						fillHexFields(options.color, cal.get(0));
						setHue(options.color, cal.get(0));
						setSelector(options.color, cal.get(0));
						setCurrentColor(options.color, cal.get(0));
						setNewColor(options.color, cal.get(0));
						//Append to body if flat=false, else show in place
						if (options.flat) {
							cal.appendTo(this).show();
							cal.css({
								position: 'relative',
								display: 'block'
							});
						} else {
							cal.appendTo(document.body);
							$(this).on(options.showEvent, show);
							cal.css({
								position: 'absolute'
							});
						}
					}
				});
			},
			//Shows the picker
			showPicker: function showPicker() {
				return this.each(function () {
					if ($(this).data('colpickId')) {
						show.apply(this);
					}
				});
			},
			//Hides the picker
			hidePicker: function hidePicker() {
				return this.each(function () {
					if ($(this).data('colpickId')) {
						$('#' + $(this).data('colpickId')).hide();
					}
				});
			},
			//Sets a color as new and current (default)
			setColor: function setColor(col, setCurrent) {
				setCurrent = typeof setCurrent === "undefined" ? 1 : setCurrent;
				if (typeof col == 'string') {
					col = hexToHsb(col);
				} else if (col.r != undefined && col.g != undefined && col.b != undefined) {
					col = rgbToHsb(col);
				} else if (col.h != undefined && col.s != undefined && col.b != undefined) {
					col = fixHSB(col);
				} else {
					return this;
				}
				return this.each(function () {
					if ($(this).data('colpickId')) {
						var cal = $('#' + $(this).data('colpickId'));
						cal.data('colpick').color = col;
						cal.data('colpick').origColor = col;
						fillRGBFields(col, cal.get(0));
						fillHSBFields(col, cal.get(0));
						fillHexFields(col, cal.get(0));
						setHue(col, cal.get(0));
						setSelector(col, cal.get(0));

						setNewColor(col, cal.get(0));
						cal.data('colpick').onChange.apply(cal.parent(), [col, hsbToHex(col), hsbToRgb(col), cal.data('colpick').el, 1]);
						if (setCurrent) {
							setCurrentColor(col, cal.get(0));
						}
					}
				});
			}
		};
	})();
	//Color space convertions
	var hexToRgb = function hexToRgb(hex) {
		var hex = parseInt(hex.indexOf('#') > -1 ? hex.substring(1) : hex, 16);
		return { r: hex >> 16, g: (hex & 0x00FF00) >> 8, b: hex & 0x0000FF };
	};
	var hexToHsb = function hexToHsb(hex) {
		return rgbToHsb(hexToRgb(hex));
	};
	var rgbToHsb = function rgbToHsb(rgb) {
		var hsb = { h: 0, s: 0, b: 0 };
		var min = Math.min(rgb.r, rgb.g, rgb.b);
		var max = Math.max(rgb.r, rgb.g, rgb.b);
		var delta = max - min;
		hsb.b = max;
		hsb.s = max != 0 ? 255 * delta / max : 0;
		if (hsb.s != 0) {
			if (rgb.r == max) hsb.h = (rgb.g - rgb.b) / delta;else if (rgb.g == max) hsb.h = 2 + (rgb.b - rgb.r) / delta;else hsb.h = 4 + (rgb.r - rgb.g) / delta;
		} else hsb.h = -1;
		hsb.h *= 60;
		if (hsb.h < 0) hsb.h += 360;
		hsb.s *= 100 / 255;
		hsb.b *= 100 / 255;
		return hsb;
	};
	var hsbToRgb = function hsbToRgb(hsb) {
		var rgb = {};
		var h = hsb.h;
		var s = hsb.s * 255 / 100;
		var v = hsb.b * 255 / 100;
		if (s == 0) {
			rgb.r = rgb.g = rgb.b = v;
		} else {
			var t1 = v;
			var t2 = (255 - s) * v / 255;
			var t3 = (t1 - t2) * (h % 60) / 60;
			if (h == 360) h = 0;
			if (h < 60) {
				rgb.r = t1;rgb.b = t2;rgb.g = t2 + t3;
			} else if (h < 120) {
				rgb.g = t1;rgb.b = t2;rgb.r = t1 - t3;
			} else if (h < 180) {
				rgb.g = t1;rgb.r = t2;rgb.b = t2 + t3;
			} else if (h < 240) {
				rgb.b = t1;rgb.r = t2;rgb.g = t1 - t3;
			} else if (h < 300) {
				rgb.b = t1;rgb.g = t2;rgb.r = t2 + t3;
			} else if (h < 360) {
				rgb.r = t1;rgb.g = t2;rgb.b = t1 - t3;
			} else {
				rgb.r = 0;rgb.g = 0;rgb.b = 0;
			}
		}
		return { r: Math.round(rgb.r), g: Math.round(rgb.g), b: Math.round(rgb.b) };
	};
	var rgbToHex = function rgbToHex(rgb) {
		var hex = [rgb.r.toString(16), rgb.g.toString(16), rgb.b.toString(16)];
		$.each(hex, function (nr, val) {
			if (val.length == 1) {
				hex[nr] = '0' + val;
			}
		});
		return hex.join('');
	};
	var hsbToHex = function hsbToHex(hsb) {
		return rgbToHex(hsbToRgb(hsb));
	};
	$.fn.extend({
		colpick: colpick.init,
		colpickHide: colpick.hidePicker,
		colpickShow: colpick.showPicker,
		colpickSetColor: colpick.setColor
	});
	$.extend({
		colpick: {
			rgbToHex: rgbToHex,
			rgbToHsb: rgbToHsb,
			hsbToHex: hsbToHex,
			hsbToRgb: hsbToRgb,
			hexToHsb: hexToHsb,
			hexToRgb: hexToRgb
		}
	});
})(jQuery);

},{}],"/home/ubuntu/staging/apps/build/js/applab/designElements/BooleanPropertyRow.jsx":[function(require,module,exports){
'use strict';

var rowStyle = require('./rowStyle');

var BooleanPropertyRow = React.createClass({
  displayName: 'BooleanPropertyRow',

  propTypes: {
    initialValue: React.PropTypes.bool.isRequired,
    handleChange: React.PropTypes.func
  },

  getInitialState: function getInitialState() {
    return {
      isChecked: this.props.initialValue
    };
  },

  handleClick: function handleClick() {
    var checked = !this.state.isChecked;
    this.props.handleChange(checked);
    this.setState({ isChecked: checked });
  },

  render: function render() {
    var classes = 'custom-checkbox fa';
    if (this.state.isChecked) {
      classes += ' fa-check-square-o';
    } else {
      classes += ' fa-square-o';
    }

    return React.createElement(
      'div',
      { style: rowStyle.container },
      React.createElement(
        'div',
        { style: rowStyle.description },
        this.props.desc
      ),
      React.createElement(
        'div',
        null,
        React.createElement('div', {
          className: classes,
          style: rowStyle.checkbox,
          onClick: this.handleClick })
      )
    );
  }
});

module.exports = BooleanPropertyRow;

},{"./rowStyle":"/home/ubuntu/staging/apps/build/js/applab/designElements/rowStyle.js"}],"/home/ubuntu/staging/apps/build/js/applab/designElements/rowStyle.js":[function(require,module,exports){
'use strict';

module.exports.input = {
  display: 'inline-block',
  height: 20,
  padding: '4px 6px',
  marginBottom: 0,
  marginLeft: 0,
  fontSize: 14,
  lineHeight: '20px',
  color: '#5b6770',
  WebkitBorderRadius: 4,
  MozBorderRadius: 4,
  borderRadius: 4,
  border: '1px solid #949CA2',
  verticalAlign: 'middle'
};

module.exports.container = {
  paddingLeft: 20,
  marginBottom: 8
};

module.exports.maxWidth = {
  maxWidth: 245
};

module.exports.description = {
  paddingLeft: 2
};

module.exports.checkbox = {
  width: 20,
  height: 20,
  fontSize: 20,
  paddingLeft: 2
};

},{}],"/home/ubuntu/staging/apps/build/js/applab/AppLabView.jsx":[function(require,module,exports){
'use strict';

var PlaySpaceHeader = require('./PlaySpaceHeader.jsx');
var ProtectedStatefulDiv = require('../templates/ProtectedStatefulDiv.jsx');
var StudioAppWrapper = require('../templates/StudioAppWrapper.jsx');

/**
 * Top-level React wrapper for our standard blockly apps.
 */
var AppLabView = React.createClass({
  displayName: 'AppLabView',

  propTypes: {
    assetUrl: React.PropTypes.func.isRequired,
    isDesignModeHidden: React.PropTypes.bool.isRequired,
    isEditingProject: React.PropTypes.bool.isRequired,
    isEmbedView: React.PropTypes.bool.isRequired,
    isReadOnlyView: React.PropTypes.bool.isRequired,
    isShareView: React.PropTypes.bool.isRequired,
    isViewDataButtonHidden: React.PropTypes.bool.isRequired,

    startInDesignMode: React.PropTypes.bool.isRequired,
    activeScreenId: React.PropTypes.string,
    screenIds: React.PropTypes.arrayOf(React.PropTypes.string).isRequired,
    onDesignModeButton: React.PropTypes.func.isRequired,
    onCodeModeButton: React.PropTypes.func.isRequired,
    onViewDataButton: React.PropTypes.func.isRequired,
    onScreenChange: React.PropTypes.func.isRequired,
    onScreenCreate: React.PropTypes.func.isRequired,

    renderCodeWorkspace: React.PropTypes.func.isRequired,
    renderVisualizationColumn: React.PropTypes.func.isRequired,
    onMount: React.PropTypes.func.isRequired
  },

  componentDidMount: function componentDidMount() {
    this.props.onMount();
  },

  render: function render() {
    var playSpaceHeader;
    if (!this.props.isReadOnlyView) {
      playSpaceHeader = React.createElement(PlaySpaceHeader, {
        hideToggle: this.shouldHideToggle(),
        hideViewDataButton: this.shouldHideViewDataButton(),
        startInDesignMode: this.props.startInDesignMode,
        activeScreenId: this.props.activeScreenId,
        screenIds: this.props.screenIds,
        onDesignModeButton: this.props.onDesignModeButton,
        onCodeModeButton: this.props.onCodeModeButton,
        onViewDataButton: this.props.onViewDataButton,
        onScreenChange: this.props.onScreenChange,
        onScreenCreate: this.props.onScreenCreate });
    }

    return React.createElement(
      StudioAppWrapper,
      {
        assetUrl: this.props.assetUrl,
        isEmbedView: this.props.isEmbedView,
        isShareView: this.props.isShareView },
      React.createElement(
        'div',
        { id: 'visualizationColumn' },
        playSpaceHeader,
        React.createElement(ProtectedStatefulDiv, { renderContents: this.props.renderVisualizationColumn })
      ),
      React.createElement(ProtectedStatefulDiv, { id: 'visualizationResizeBar', className: 'fa fa-ellipsis-v' }),
      React.createElement(ProtectedStatefulDiv, {
        id: 'codeWorkspace',
        renderContents: this.props.renderCodeWorkspace })
    );
  },

  shouldHideToggle: function shouldHideToggle() {
    return this.props.isShareView || this.props.isDesignModeHidden;
  },

  shouldHideViewDataButton: function shouldHideViewDataButton() {
    return this.props.isViewDataButtonHidden || this.props.isDesignModeHidden || this.props.isShareView || !this.props.isEditingProject;
  }
});
module.exports = AppLabView;

},{"../templates/ProtectedStatefulDiv.jsx":"/home/ubuntu/staging/apps/build/js/templates/ProtectedStatefulDiv.jsx","../templates/StudioAppWrapper.jsx":"/home/ubuntu/staging/apps/build/js/templates/StudioAppWrapper.jsx","./PlaySpaceHeader.jsx":"/home/ubuntu/staging/apps/build/js/applab/PlaySpaceHeader.jsx"}],"/home/ubuntu/staging/apps/build/js/applab/PlaySpaceHeader.jsx":[function(require,module,exports){
/** @file Row of controls above the visualization. */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */

'use strict';

var constants = require('./constants');
var msg = require('../locale');
var ScreenSelector = require('./ScreenSelector.jsx');
var ToggleGroup = require('./ToggleGroup.jsx');
var ViewDataButton = require('./ViewDataButton.jsx');

var Mode = constants.MODE;

var PlaySpaceHeader = React.createClass({
  displayName: 'PlaySpaceHeader',

  propTypes: {
    hideToggle: React.PropTypes.bool.isRequired,
    hideViewDataButton: React.PropTypes.bool.isRequired,
    startInDesignMode: React.PropTypes.bool.isRequired,
    activeScreenId: React.PropTypes.string,
    screenIds: React.PropTypes.array.isRequired,
    onDesignModeButton: React.PropTypes.func.isRequired,
    onCodeModeButton: React.PropTypes.func.isRequired,
    onViewDataButton: React.PropTypes.func.isRequired,
    onScreenChange: React.PropTypes.func.isRequired,
    onScreenCreate: React.PropTypes.func.isRequired
  },

  getInitialState: function getInitialState() {
    return {
      mode: this.props.startInDesignMode ? Mode.DESIGN : Mode.CODE
    };
  },

  handleSetMode: function handleSetMode(newMode) {
    if (this.state.mode === newMode) {
      return;
    }
    if (newMode === Mode.CODE) {
      this.props.onCodeModeButton();
    } else {
      this.props.onDesignModeButton();
    }

    this.setState({
      mode: newMode
    });
  },

  handleScreenChange: function handleScreenChange(evt) {
    var screenId = evt.target.value;
    if (screenId === constants.NEW_SCREEN) {
      screenId = this.props.onScreenCreate();
    }
    this.props.onScreenChange(screenId);
  },

  render: function render() {
    var leftSide, rightSide;

    if (!this.props.hideToggle) {
      leftSide = React.createElement(
        ToggleGroup,
        { selected: this.state.mode, onChange: this.handleSetMode },
        React.createElement(
          'button',
          { id: 'codeModeButton', value: Mode.CODE },
          msg.codeMode()
        ),
        React.createElement(
          'button',
          { id: 'designModeButton', value: Mode.DESIGN },
          msg.designMode()
        )
      );
    }

    if (this.state.mode === Mode.CODE && !this.props.hideViewDataButton) {
      rightSide = React.createElement(ViewDataButton, { onClick: this.props.onViewDataButton });
    } else if (this.state.mode === Mode.DESIGN) {
      rightSide = React.createElement(ScreenSelector, {
        screenIds: this.props.screenIds,
        activeScreenId: this.props.activeScreenId,
        onChange: this.handleScreenChange });
    }

    return React.createElement(
      'div',
      { id: 'playSpaceHeader' },
      React.createElement(
        'table',
        { style: { width: '100%' } },
        React.createElement(
          'tbody',
          null,
          React.createElement(
            'tr',
            null,
            React.createElement(
              'td',
              { style: { width: '120px' } },
              leftSide
            ),
            React.createElement(
              'td',
              { style: { maxWidth: 0 } },
              rightSide
            )
          )
        )
      )
    );
  }
});
module.exports = PlaySpaceHeader;

},{"../locale":"/home/ubuntu/staging/apps/build/js/locale.js","./ScreenSelector.jsx":"/home/ubuntu/staging/apps/build/js/applab/ScreenSelector.jsx","./ToggleGroup.jsx":"/home/ubuntu/staging/apps/build/js/applab/ToggleGroup.jsx","./ViewDataButton.jsx":"/home/ubuntu/staging/apps/build/js/applab/ViewDataButton.jsx","./constants":"/home/ubuntu/staging/apps/build/js/applab/constants.js"}],"/home/ubuntu/staging/apps/build/js/applab/ViewDataButton.jsx":[function(require,module,exports){
/** @file Button that opens the data browser */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
/* global $ */

'use strict';

var applabMsg = require('./locale');
var styles = require('./PlaySpaceHeaderStyles');

/**
 * The button above the visualization that opens the data browser.
 * @type {function}
 */
var ViewDataButton = React.createClass({
  displayName: 'ViewDataButton',

  propTypes: {
    onClick: React.PropTypes.func.isRequired
  },

  render: function render() {
    var showDataButtonStyle = $.extend({}, styles.buttonStyle, styles.inactiveStyle, {
      float: 'right',
      textAlign: 'left',
      maxWidth: '100%',
      whiteSpace: 'nowrap',
      overflow: 'hidden',
      textOverflow: 'ellipsis'
    });

    return React.createElement(
      'button',
      {
        id: 'viewDataButton',
        style: showDataButtonStyle,
        className: 'no-outline',
        onClick: this.props.onClick },
      React.createElement('i', { className: 'fa fa-database', style: styles.iconStyle }),
      applabMsg.viewData()
    );
  }
});
module.exports = ViewDataButton;

},{"./PlaySpaceHeaderStyles":"/home/ubuntu/staging/apps/build/js/applab/PlaySpaceHeaderStyles.js","./locale":"/home/ubuntu/staging/apps/build/js/applab/locale.js"}],"/home/ubuntu/staging/apps/build/js/applab/locale.js":[function(require,module,exports){
// locale for applab

"use strict";

module.exports = window.blockly.applab_locale;

},{}],"/home/ubuntu/staging/apps/build/js/applab/ToggleGroup.jsx":[function(require,module,exports){
/** @file Row of buttons for switching editor modes. */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
'use strict';

var ToggleButton = require('./ToggleButton.jsx');

var ToggleGroup = React.createClass({
  displayName: 'ToggleGroup',

  propTypes: {
    selected: React.PropTypes.string.isRequired,
    onChange: React.PropTypes.func.isRequired,
    children: function children(props, propName, componentName) {
      var prop = props[propName];
      var error;
      if (React.Children.count(prop) < 1) {
        error = new Error(componentName + ' must have at least one child button.');
      }

      React.Children.forEach(prop, function (child) {
        if (child.type !== 'button') {
          error = new Error(componentName + ' should only have buttons as ' + 'child elements.');
        }
      });
      return error;
    }
  },

  setSelected: function setSelected(selected) {
    this.props.onChange(selected);
  },

  render: function render() {
    return React.createElement(
      'span',
      null,
      this.renderChildren()
    );
  },

  renderChildren: function renderChildren() {
    var childrenCount = React.Children.count(this.props.children);
    return React.Children.map(this.props.children, function (child, index) {
      return React.createElement(
        ToggleButton,
        {
          id: child.props.id,
          active: child.props.value === this.props.selected,
          first: index === 0,
          last: index === childrenCount - 1,
          onClick: this.setSelected.bind(this, child.props.value) },
        child.props.children
      );
    }, this);
  }
});
module.exports = ToggleGroup;

},{"./ToggleButton.jsx":"/home/ubuntu/staging/apps/build/js/applab/ToggleButton.jsx"}],"/home/ubuntu/staging/apps/build/js/applab/ToggleButton.jsx":[function(require,module,exports){
/** @file Button that can be active or inactive, for use inside ToggleGroup */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
/* global $ */

'use strict';

var styles = require('./PlaySpaceHeaderStyles');

var ToggleButton = React.createClass({
  displayName: 'ToggleButton',

  propTypes: {
    id: React.PropTypes.string,
    active: React.PropTypes.bool.isRequired,
    first: React.PropTypes.bool,
    last: React.PropTypes.bool,
    onClick: React.PropTypes.func.isRequired
  },

  render: function render() {
    return React.createElement(
      'button',
      {
        id: this.props.id,
        style: this.getStyle(),
        className: 'no-outline',
        onClick: this.props.onClick },
      this.props.children
    );
  },

  getStyle: function getStyle() {
    return $.extend({}, styles.buttonStyle, styles.toggleButtonStyle, this.props.active ? styles.activeStyle : styles.inactiveStyle, this.props.first ? styles.firstButtonStyle : null, this.props.last ? styles.lastButtonStyle : null);
  }
});
module.exports = ToggleButton;

},{"./PlaySpaceHeaderStyles":"/home/ubuntu/staging/apps/build/js/applab/PlaySpaceHeaderStyles.js"}],"/home/ubuntu/staging/apps/build/js/applab/PlaySpaceHeaderStyles.js":[function(require,module,exports){
/** @file Reusable styles for components used by PlaySpaceHeader. */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */

'use strict';

module.exports = {
  buttonStyle: {
    display: 'inline-block',
    verticalAlign: 'top',
    border: '1px solid #949ca2',
    margin: '0 0 8px 0',
    padding: '2px 6px',
    fontSize: 14
  },
  toggleButtonStyle: {
    borderRightWidth: '0 !important',
    borderRadius: 0
  },
  firstButtonStyle: {
    borderBottomLeftRadius: 4,
    borderTopLeftRadius: 4
  },
  lastButtonStyle: {
    borderRightWidth: '1px !important',
    borderBottomRightRadius: 4,
    borderTopRightRadius: 4
  },
  activeStyle: {
    backgroundColor: '#ffa000',
    color: '#fff',
    boxShadow: '2px 2px 5px rgba(0, 0, 0, 0.3) inset'
  },
  inactiveStyle: {
    backgroundColor: '#fff',
    color: '#949ca2',
    boxShadow: '0px 1px 5px rgba(0, 0, 0, 0.3)'
  },
  hiddenStyle: {
    display: 'none'
  },
  iconStyle: {
    margin: '0 0.3em'
  }
};

},{}],"/home/ubuntu/staging/apps/build/js/applab/ScreenSelector.jsx":[function(require,module,exports){
/** @file Dropdown for selecting design mode screens */
// Strict linting: Absorb into global config when possible
/* jshint
 unused: true,
 eqeqeq: true,
 maxlen: 120
 */
/* global Applab */

'use strict';

var constants = require('./constants');
var elementUtils = require('./designElements/elementUtils');

/**
 * The dropdown that appears above the visualization in design mode, used
 * for selecting a screen to edit.
 * @type {function}
 */
var ScreenSelector = React.createClass({
  displayName: 'ScreenSelector',

  propTypes: {
    screenIds: React.PropTypes.array.isRequired,
    activeScreenId: React.PropTypes.string,
    onChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    var dropdownStyle = {
      display: 'inline-block',
      verticalAlign: 'top',
      width: '100%',
      height: 28,
      marginBottom: 6,
      borderColor: '#949ca2'
    };

    var options = this.props.screenIds.map(function (item) {
      return React.createElement(
        'option',
        { key: item },
        item
      );
    });

    var defaultScreenId = elementUtils.getScreens().first().attr('id') || '';

    options.sort(function (a, b) {
      if (a.key === defaultScreenId) {
        return -1;
      } else if (b.key === defaultScreenId) {
        return 1;
      } else {
        return a.key.localeCompare(b.key);
      }
    });

    return React.createElement(
      'select',
      {
        id: 'screenSelector',
        style: dropdownStyle,
        value: this.props.activeScreenId,
        onChange: this.props.onChange,
        disabled: Applab.isRunning() },
      options,
      React.createElement(
        'option',
        null,
        constants.NEW_SCREEN
      )
    );
  }
});
module.exports = ScreenSelector;

},{"./constants":"/home/ubuntu/staging/apps/build/js/applab/constants.js","./designElements/elementUtils":"/home/ubuntu/staging/apps/build/js/applab/designElements/elementUtils.js"}],"/home/ubuntu/staging/apps/build/js/applab/designElements/elementUtils.js":[function(require,module,exports){
'use strict';

var constants = require('../constants');
var utils = require('../../utils');

// Taken from http://stackoverflow.com/a/3627747/2506748
module.exports.rgb2hex = function (rgb) {
  if (rgb === '') {
    return rgb;
  }
  var parsed = rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
  if (parsed === null) {
    return rgb;
  }
  function hex(x) {
    return ("0" + parseInt(x).toString(16)).slice(-2);
  }
  return "#" + hex(parsed[1]) + hex(parsed[2]) + hex(parsed[3]);
};

/**
 * Gets the element's id, stripping the prefix.
 * @param element {Element}
 * @param prefix {string} Optional. Defaults to DESIGN_ELEMENT_ID_PREFIX.
 * @returns {string} The element id with prefix stripped, or null if it had no id.
 */
var getId = module.exports.getId = function (element, prefix) {
  var elementId = element.getAttribute('id');
  if (elementId === null) {
    return null;
  }
  prefix = utils.valueOr(prefix, constants.DESIGN_ELEMENT_ID_PREFIX);
  checkId(element, prefix);
  return elementId.substr(prefix.length);
};

/**
 * Sets the element's id, adding the prefix.
 * @param element {Element}
 * @param value (string)
 * @param prefix {string} Optional. Defaults to DESIGN_ELEMENT_ID_PREFIX.
 */
var setId = module.exports.setId = function (element, value, prefix) {
  if (value === null) {
    return;
  }
  prefix = utils.valueOr(prefix, constants.DESIGN_ELEMENT_ID_PREFIX);
  element.setAttribute('id', prefix + value);
};

/**
 * Throws an error if the element's id does not start with the prefix.
 * @param element {Element}
 * @param prefix {string}
 */
function checkId(element, prefix) {
  if (element.id.substr(0, prefix.length) !== prefix) {
    throw new Error('element.id "' + element.id + '" does not start with prefix "' + prefix + '".');
  }
}

/**
 * Add the prefix to the elementId and returns the element with that id.
 * @param elementId {string}
 * @param prefix {string} Optional. Defaults to DESIGN_ELEMENT_ID_PREFIX.
 * @returns {Element}
 */
var getPrefixedElementById = module.exports.getPrefixedElementById = function (elementId, prefix) {
  prefix = prefix === undefined ? constants.DESIGN_ELEMENT_ID_PREFIX : prefix;
  return document.getElementById(prefix + elementId);
};

/**
 * Adds the prefix to the element's id.
 * @param element {Element}
 * @param prefix {string} Optional prefix to add. Defaults to ''.
 * @returns {Element}
 */
module.exports.addIdPrefix = function (element, prefix) {
  prefix = utils.valueOr(prefix, '');
  setId(element, element.getAttribute('id'), prefix);
};

/**
 * Removes the DESIGN_ELEMENT_ID_PREFIX from the element's id.
 * @param element {Element}
 * @returns {Element}
 */
module.exports.removeIdPrefix = function (element) {
  element.setAttribute('id', getId(element));
};

// TODO(dave): remove blacklist once element ids inside divApplab
// are namespaced: https://www.pivotaltracker.com/story/show/113011395
var ELEMENT_ID_BLACKLIST = ['finishButton', 'submitButton', 'unsubmitButton', 'turtleImage', 'prompt-icon'];

var TURTLE_CANVAS_ID = 'turtleCanvas';

/**
 * Returns true if newId is available and won't collide with other elements.
 * Always reject element ids which are blacklisted or already exist outside divApplab.
 * Allow or reject other element types based on the options specified.
 * @param {string} newId The id to evaluate.
 * @param {Object.<string, boolean>} options Optional map of options
 *     indicating whether certain elements are allowed.
 * @param {string} options.allowCodeElements allow element ids which are
 *     inside divApplab. Default: false
 * @param {string} options.allowDesignElements: allow element ids which, when
 *     prefixed with "design_", already exist in designModeViz. Default: false
 * @param {string} options.allowDesignPrefix: allow element ids which
 *     start with "design_". Default: false
 * @param {string} options.allowTurtleCanvas: allow turtle canvas element
 *     to be created. Default: false
 * @returns {boolean}
 */
module.exports.isIdAvailable = function (newId, options) {
  options = options || {};
  if (!newId) {
    return false;
  }

  // Don't allow blacklisted elements.
  if (ELEMENT_ID_BLACKLIST.indexOf(newId) !== -1) {
    return false;
  }

  if (!options.allowTurtleCanvas && TURTLE_CANVAS_ID === newId) {
    return false;
  }

  // Don't allow elements with reserved prefixes. Otherwise you can have
  // problems like this:
  //   1. allow 'design_button1' here. '#designModeViz #design_design_button1' is created
  //      but 'design_button1' is not created anywhere.
  //   2. allow 'button1'. '#designModeViz #design_button1' is created.
  //   3. Press Run. '#designModeViz #design_design_button1' is serialized to
  //      '#divApplab #design_button1', which collides with '#designModeViz #design_button1'.
  //
  // TODO(dave): remove this condition when we start namespacing, since
  // '#divApplab #code_design_button1' would be created in step 3 instead.

  // Don't allow elements with the "design_" prefix, unless
  // options.allowDesignPrefix is specified.
  if (!options.allowDesignPrefix && newId.indexOf(constants.DESIGN_ELEMENT_ID_PREFIX) === 0) {
    return false;
  }

  // Don't allow if any other element in design mode has this prefixed id
  // (e.g. don't allow 'button1' if 'design_button1' exists),
  // unless options.allowDesignElements is specified.
  if (!options.allowDesignElements && getPrefixedElementById(newId)) {
    return false;
  }

  // Don't allow if any element outside of divApplab has this id.
  var element = document.getElementById(newId);
  if (element && !$('#divApplab').find(element)[0]) {
    return false;
  }

  // Don't allow if any element inside divApplab has this id,
  // unless options.allowCodeElements is specified.
  var existsInApplab = Boolean(element && $('#divApplab').find(element)[0]);
  if (!options.allowCodeElements && existsInApplab) {
    return false;
  }

  return true;
};

module.exports.getScreens = function getScreens() {
  return $('#designModeViz > .screen');
};

},{"../../utils":"/home/ubuntu/staging/apps/build/js/utils.js","../constants":"/home/ubuntu/staging/apps/build/js/applab/constants.js"}],"/home/ubuntu/staging/apps/build/js/applab/constants.js":[function(require,module,exports){
'use strict';

module.exports = {
  FOOTER_HEIGHT: 30,
  DESIGN_ELEMENT_ID_PREFIX: 'design_',
  NEW_SCREEN: "New screen...",
  MODE: {
    CODE: 'CODE',
    DESIGN: 'DESIGN'
  }
};

},{}]},{},["/home/ubuntu/staging/apps/build/js/applab/main.js"])
//# sourceMappingURL=data:application/json;base64,
