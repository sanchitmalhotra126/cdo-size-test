require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/main.js":[function(require,module,exports){
(function (global){
'use strict';

var appMain = require('../appMain');
window.Applab = require('./applab');
if (typeof global !== 'undefined') {
  global.Applab = window.Applab;
}
var blocks = require('./blocks');
var levels = require('./levels');
var skins = require('./skins');

window.applabMain = function (options) {
  options.skinsModule = skins;
  options.blocksModule = blocks;
  appMain(window.Applab, levels, options);
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1aWxkL2pzL2FwcGxhYi9tYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNwQyxJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsRUFBRTtBQUNqQyxRQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7Q0FDL0I7QUFDRCxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDakMsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ2pDLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQzs7QUFFL0IsTUFBTSxDQUFDLFVBQVUsR0FBRyxVQUFTLE9BQU8sRUFBRTtBQUNwQyxTQUFPLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztBQUM1QixTQUFPLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQztBQUM5QixTQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDekMsQ0FBQyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcE1haW4gPSByZXF1aXJlKCcuLi9hcHBNYWluJyk7XG53aW5kb3cuQXBwbGFiID0gcmVxdWlyZSgnLi9hcHBsYWInKTtcbmlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICBnbG9iYWwuQXBwbGFiID0gd2luZG93LkFwcGxhYjtcbn1cbnZhciBibG9ja3MgPSByZXF1aXJlKCcuL2Jsb2NrcycpO1xudmFyIGxldmVscyA9IHJlcXVpcmUoJy4vbGV2ZWxzJyk7XG52YXIgc2tpbnMgPSByZXF1aXJlKCcuL3NraW5zJyk7XG5cbndpbmRvdy5hcHBsYWJNYWluID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICBvcHRpb25zLnNraW5zTW9kdWxlID0gc2tpbnM7XG4gIG9wdGlvbnMuYmxvY2tzTW9kdWxlID0gYmxvY2tzO1xuICBhcHBNYWluKHdpbmRvdy5BcHBsYWIsIGxldmVscywgb3B0aW9ucyk7XG59O1xuIl19
},{"../appMain":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/appMain.js","./applab":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/applab.js","./blocks":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/blocks.js","./levels":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/levels.js","./skins":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/skins.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/skins.js":[function(require,module,exports){
/**
 * Load Skin for Applab.
 */

'use strict';

var skinsBase = require('../skins');

var CONFIGS = {
  applab: {}
};

exports.load = function (assetUrl, id) {
  var skin = skinsBase.load(assetUrl, id);
  var config = CONFIGS[skin.id];

  return skin;
};

},{"../skins":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/skins.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/levels.js":[function(require,module,exports){
/*jshint multistr: true */

'use strict';

var msg = require('./locale');
var utils = require('../utils');
var blockUtils = require('../block_utils');
var tb = blockUtils.createToolbox;
var blockOfType = blockUtils.blockOfType;
var createCategory = blockUtils.createCategory;

/*
 * Configuration for all levels.
 */
var levels = module.exports = {};

levels.simple = {
  'requiredBlocks': [],
  'scale': {
    'snapRadius': 2
  },
  'freePlay': true,
  'toolbox': tb('<block type="applab_container" inline="true"> \
        <value name="ID"><block type="text"><title name="TEXT">id</title></block></value> \
        <value name="HTML"><block type="text"><title name="TEXT">html</title></block></value></block>'),
  'startBlocks': '<block type="when_run" deletable="false" x="20" y="20"></block>'
};

levels.custom = {
  'freePlay': true,
  'editCode': true,
  'sliderSpeed': 1,
  'appWidth': 320,
  'appHeight': 480,

  /**
   * This is the default set of functions available to us if the levelbuilder
   * leaves codeFunctions blank.
   * Applab.rb self.palette serves a similar function, intially providing
   * levelbuilders with the text for the default set of blocks.
   * These two places shouldbe kept in sync
   */
  'codeFunctions': {
    // UI Controls
    "onEvent": null,
    "button": null,
    "textInput": null,
    "textLabel": null,
    "dropdown": null,
    "getText": null,
    "setText": null,
    "checkbox": null,
    "radioButton": null,
    "getChecked": null,
    "setChecked": null,
    "image": null,
    "getImageURL": null,
    "setImageURL": null,
    "playSound": null,
    "showElement": null,
    "hideElement": null,
    "deleteElement": null,
    "setPosition": null,
    "setSize": null,
    "write": null,
    "getXPosition": null,
    "getYPosition": null,
    "setScreen": null,

    // Canvas
    "createCanvas": null,
    "setActiveCanvas": null,
    "line": null,
    "circle": null,
    "rect": null,
    "setStrokeWidth": null,
    "setStrokeColor": null,
    "setFillColor": null,
    "drawImageURL": null,
    "getImageData": null,
    "putImageData": null,
    "clearCanvas": null,
    "getRed": null,
    "getGreen": null,
    "getBlue": null,
    "getAlpha": null,
    "setRed": null,
    "setGreen": null,
    "setBlue": null,
    "setAlpha": null,
    "setRGB": null,

    // Data
    "startWebRequest": null,
    "setKeyValue": null,
    "getKeyValue": null,
    "createRecord": null,
    "readRecords": null,
    "updateRecord": null,
    "deleteRecord": null,
    "getUserId": null,
    "drawChartFromRecords": null,

    // Turtle
    "moveForward": null,
    "moveBackward": null,
    "move": null,
    "moveTo": null,
    "dot": null,
    "turnRight": null,
    "turnLeft": null,
    "turnTo": null,
    "arcRight": null,
    "arcLeft": null,
    "getX": null,
    "getY": null,
    "getDirection": null,
    "penUp": null,
    "penDown": null,
    "penWidth": null,
    "penColor": null,
    "penRGB": null,
    "show": null,
    "hide": null,
    "speed": null,

    // Control
    "forLoop_i_0_4": null,
    "ifBlock": null,
    "ifElseBlock": null,
    "whileBlock": null,
    "setTimeout": null,
    "clearTimeout": null,
    "setInterval": null,
    "clearInterval": null,
    "getTime": null,

    // Math
    "addOperator": null,
    "subtractOperator": null,
    "multiplyOperator": null,
    "divideOperator": null,
    "equalityOperator": null,
    "inequalityOperator": null,
    "greaterThanOperator": null,
    "greaterThanOrEqualOperator": null,
    "lessThanOperator": null,
    "lessThanOrEqualOperator": null,
    "andOperator": null,
    "orOperator": null,
    "notOperator": null,
    "randomNumber_min_max": null,
    "mathRound": null,
    "mathAbs": null,
    "mathMax": null,
    "mathMin": null,
    "mathRandom": null,

    // Variables
    "declareAssign_x": null,
    "declareNoAssign_x": null,
    "assign_x": null,
    "declareAssign_x_prompt": null,
    "declareAssign_x_promptNum": null,
    "console.log": null,
    "declareAssign_str_hello_world": null,
    "substring": null,
    "indexOf": null,
    "includes": null,
    "length": null,
    "toUpperCase": null,
    "toLowerCase": null,
    "declareAssign_list_abd": null,
    "listLength": null,
    "insertItem": null,
    "appendItem": null,
    "removeItem": null,

    // Functions
    "functionParams_none": null,
    "functionParams_n": null,
    "callMyFunction": null,
    "callMyFunction_n": null,
    "return": null
  }

};

// "randomNumber_max": null, // DEPRECATED
levels.ec_simple = utils.extend(levels.custom, {});

// Functions in Advanced category currently disabled in all levels:
/*
 "imageUploadButton": null,
 "container": null,
 "innerHTML": null,
 "setStyle": null,
 "getAttribute": null,
 "setAttribute": null,
 "setParent": null,
*/

levels.full_sandbox = {
  'scrollbars': true,
  'requiredBlocks': [],
  'scale': {
    'snapRadius': 2
  },
  'softButtons': ['leftButton', 'rightButton', 'downButton', 'upButton'],
  'minWorkspaceHeight': 1400,
  'freePlay': true,
  'toolbox': tb(createCategory(msg.catActions(), '<block type="applab_createHtmlBlock" inline="true"> \
          <value name="ID"><block type="text"><title name="TEXT">id</title></block></value> \
          <value name="HTML"><block type="text"><title name="TEXT">html</title></block></value></block>') + createCategory(msg.catControl(), blockOfType('controls_whileUntil') + '<block type="controls_for"> \
                          <value name="FROM"> \
                            <block type="math_number"> \
                              <title name="NUM">1</title> \
                            </block> \
                          </value> \
                          <value name="TO"> \
                            <block type="math_number"> \
                              <title name="NUM">10</title> \
                            </block> \
                          </value> \
                          <value name="BY"> \
                            <block type="math_number"> \
                              <title name="NUM">1</title> \
                            </block> \
                          </value> \
                        </block>' + blockOfType('controls_flow_statements')) + createCategory(msg.catLogic(), blockOfType('controls_if') + blockOfType('logic_compare') + blockOfType('logic_operation') + blockOfType('logic_negate') + blockOfType('logic_boolean')) + createCategory(msg.catMath(), blockOfType('math_number') + '<block type="math_change"> \
                          <value name="DELTA"> \
                            <block type="math_number"> \
                              <title name="NUM">1</title> \
                            </block> \
                          </value> \
                        </block>' + '<block type="math_random_int"> \
                          <value name="FROM"> \
                            <block type="math_number"> \
                              <title name="NUM">1</title> \
                            </block> \
                          </value> \
                          <value name="TO"> \
                            <block type="math_number"> \
                              <title name="NUM">100</title> \
                            </block> \
                          </value> \
                        </block>' + blockOfType('math_arithmetic')) + createCategory(msg.catText(), blockOfType('text') + blockOfType('text_join') + '<block type="text_append"> \
                          <value name="TEXT"> \
                            <block type="text"></block> \
                          </value> \
                        </block>') + createCategory(msg.catVariables(), '', 'VARIABLE') + createCategory(msg.catProcedures(), '', 'PROCEDURE')),
  'startBlocks': '<block type="when_run" deletable="false" x="20" y="20"></block>'
};

},{"../block_utils":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/block_utils.js","../utils":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/utils.js","./locale":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/locale.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/applab.js":[function(require,module,exports){
/**
 * CodeOrgApp: Applab
 *
 * Copyright 2014-2015 Code.org
 *
 */
/* global Dialog */
/* global dashboard */

'use strict';
var studioApp = require('../StudioApp').singleton;
var commonMsg = require('../locale');
var applabMsg = require('./locale');
var skins = require('../skins');
var codegen = require('../codegen');
var api = require('./api');
var apiBlockly = require('./apiBlockly');
var dontMarshalApi = require('./dontMarshalApi');
var blocks = require('./blocks');
var page = require('../templates/page.html.ejs');
var dom = require('../dom');
var parseXmlElement = require('../xml').parseElement;
var utils = require('../utils');
var dropletUtils = require('../dropletUtils');
var dropletConfig = require('./dropletConfig');
var Slider = require('../slider');
var AppStorage = require('./appStorage');
var constants = require('../constants');
var KeyCodes = constants.KeyCodes;
var _ = utils.getLodash();
// var Hammer = utils.getHammer();
var apiTimeoutList = require('../timeoutList');
var annotationList = require('../acemode/annotationList');
var designMode = require('./designMode');
var applabTurtle = require('./applabTurtle');
var applabCommands = require('./commands');
var JSInterpreter = require('../JSInterpreter');
var StepType = JSInterpreter.StepType;
var elementLibrary = require('./designElements/library');
var elementUtils = require('./designElements/elementUtils');
var assetsApi = require('../clientApi').assets;
var assetListStore = require('./assetManagement/assetListStore');
var showAssetManager = require('./assetManagement/show.js');
var DebugArea = require('./DebugArea');
var ShareWarningsDialog = require('../templates/ShareWarningsDialog.jsx');

var applabConstants = require('./constants');

var ResultType = studioApp.ResultType;
var TestResults = studioApp.TestResults;

/**
 * Create a namespace for the application.
 */
var Applab = module.exports;

/**
 * Controller for debug console and controls on page
 * TODO: Rename to debugArea once other debugArea references are moved out of
 *       this file.
 * @type {DebugArea}
 */
var debugAreaController = null;

//Debug console history
Applab.debugConsoleHistory = {
  'history': [],
  'currentHistoryIndex': 0
};

var errorHandler = require('./errorHandler');
var outputApplabConsole = errorHandler.outputApplabConsole;
var outputError = errorHandler.outputError;
var ErrorLevel = errorHandler.ErrorLevel;

var level;
var skin;
var copyrightStrings;

//TODO: Make configurable.
studioApp.setCheckForEmptyBlocks(true);

var MAX_INTERPRETER_STEPS_PER_TICK = 10000;

// For proxying non-https assets
var MEDIA_PROXY = '//' + location.host + '/media?u=';

// Default Scalings
Applab.scale = {
  'snapRadius': 1,
  'stepSpeed': 0
};

var twitterOptions = {
  text: applabMsg.shareApplabTwitter(),
  hashtag: "ApplabCode"
};

var MIN_DEBUG_AREA_HEIGHT = 120;
var MAX_DEBUG_AREA_HEIGHT = 400;

var FOOTER_HEIGHT = applabConstants.FOOTER_HEIGHT;

// The typical width of the visualization area (indepdendent of appWidth)
var vizAppWidth = 400;
// The default values for appWidth and appHeight (if not specified in the level)
var defaultAppWidth = 400;
var defaultAppHeight = 400;

function loadLevel() {
  Applab.hideDesignMode = level.hideDesignMode;
  Applab.timeoutFailureTick = level.timeoutFailureTick || Infinity;
  Applab.minWorkspaceHeight = level.minWorkspaceHeight;
  Applab.softButtons_ = level.softButtons || {};
  Applab.appWidth = level.appWidth || defaultAppWidth;
  Applab.appHeight = level.appHeight || defaultAppHeight;
  // In share mode we need to reserve some number of pixels for our in-app
  // footer. We do that by making the play space slightly smaller elsewhere.
  // Applab.appHeight represents the height of the entire app (footer + other)
  // Applab.footerlessAppHeight represents the height of only the "other"
  if (Applab.appHeight > 480) {
    throw new Error('Strange things may happen with appHeight > 480');
  }
  if (Applab.appHeight + FOOTER_HEIGHT >= 480) {
    // If footer will extend past 480, make room for it.
    Applab.footerlessAppHeight = Applab.appHeight - FOOTER_HEIGHT;
  } else {
    Applab.footerlessAppHeight = Applab.appHeight;
  }

  // Override scalars.
  for (var key in level.scale) {
    Applab.scale[key] = level.scale[key];
  }
}

//
// Adjust a media height rule (if needed). This is called by adjustAppSizeStyles
// for all media rules. We look for a specific set of rules that should be in
// the stylesheet and swap out the defaultHeightRules with the newHeightRules
//

function adjustMediaHeightRule(mediaList, defaultHeightRules, newHeightRules) {
  // The media rules we are looking for always have two components. The first
  // component is for screen width, which we ignore. The second is for screen
  // height, which we want to modify:
  if (mediaList.length === 2) {
    var lastHeightRuleIndex = defaultHeightRules.length - 1;
    for (var i = 0; i <= lastHeightRuleIndex; i++) {
      if (-1 !== mediaList.item(1).indexOf("(min-height: " + (defaultHeightRules[i] + 1) + "px)")) {
        if (i === 0) {
          // Matched the first rule (no max height)
          mediaList.mediaText = mediaList.item(0) + ", screen and (min-height: " + (newHeightRules[i] + 1) + "px)";
        } else {
          // Matched one of the middle rules with a min and a max height
          mediaList.mediaText = mediaList.item(0) + ", screen and (min-height: " + (newHeightRules[i] + 1) + "px)" + " and (max-height: " + newHeightRules[i - 1] + "px)";
        }
        break;
      } else if (mediaList.item(1) === "screen and (max-height: " + defaultHeightRules[lastHeightRuleIndex] + "px)") {
        // Matched the last rule (no min height)
        mediaList.mediaText = mediaList.item(0) + ", screen and (max-height: " + newHeightRules[lastHeightRuleIndex] + "px)";
        break;
      }
    }
  }
}

//
// The visualization area adjusts its size using a series of CSS rules that are
// tuned to make adjustments assuming a 400x400 visualization. Since applab
// allows its visualization size to be set on a per-level basis, the function
// below modifies the CSS rules to account for the per-level coordinates
//
// It also adjusts the height rules based on the adjusted visualization size
// and the offset where the app has been embedded in the page
//
// The visualization column will remain at 400 pixels wide in the max-width
// case and scale downward from there. The visualization height will be set
// to preserve the proper aspect ratio with respect to the current width.
//
// The visualization coordinate space will be Applab.appWidth by Applab.appHeight.
// The scale values are then adjusted such that the max-width case may result
// in a scaled-up version of the visualization area and the min-width case will
// typically result in a scaled-down version of the visualization area.
//
// @returns {Array.<number>} Array of scale factors which will be used
//     on the applab app area at the following screen widths, respectively:
//     1151px+; 1101-1150px; 1051-1100px; 1001-1050px; 0-1000px.
//

function adjustAppSizeStyles(container) {
  var vizScale = 1;
  // We assume these are listed in this order:
  var defaultScaleFactors = [1.0, 0.875, 0.75, 0.625, 0.5];
  var scaleFactors = defaultScaleFactors.slice(0);
  if (vizAppWidth !== Applab.appWidth) {
    vizScale = vizAppWidth / Applab.appWidth;
    for (var ind = 0; ind < scaleFactors.length; ind++) {
      scaleFactors[ind] *= vizScale;
    }
  }
  var vizAppHeight = Applab.footerlessAppHeight * vizScale;

  // Compute new height rules:
  // (1) defaults are scaleFactors * defaultAppHeight + 200 (belowViz estimate)
  // (2) we adjust the height rules to take into account where the codeApp
  // div is anchored on the page. If this changes after this function is called,
  // the media rules for height are no longer valid.
  // (3) we assume that there is nothing below codeApp on the page that also
  // needs to be included in the height rules
  // (4) there is no 5th height rule in the array because the 5th rule in the
  // stylesheet has no minimum specified. It just uses the max-height from the
  // 4th item in the array.
  var defaultHeightRules = [600, 550, 500, 450];
  var newHeightRules = defaultHeightRules.slice(0);
  for (var z = 0; z < newHeightRules.length; z++) {
    newHeightRules[z] += container.offsetTop + (vizAppHeight - defaultAppHeight) * defaultScaleFactors[z];
  }

  if (!utils.browserSupportsCssMedia()) {
    return;
  }

  var ss = document.styleSheets;
  // Match applab.css or (for production) applab-{hex-fingerprint}.css
  var applabStyleSheetRegex = /\/applab-?[0-9a-f]*\.css$/i;
  for (var i = 0; i < ss.length; i++) {
    if (ss[i].href && applabStyleSheetRegex.test(ss[i].href)) {
      // We found our applab specific stylesheet:
      var rules = ss[i].cssRules || ss[i].rules;
      var changedRules = 0;
      var curScaleIndex = 0;
      // Change the width/height plus a set of rules for each scale factor:
      var totalRules = 1 + scaleFactors.length;
      for (var j = 0; j < rules.length && changedRules < totalRules; j++) {
        var childRules = rules[j].cssRules || rules[j].rules;
        if (rules[j].selectorText === "div#visualization") {
          // set the 'normal' width/height for the visualization itself
          rules[j].style.cssText = "height: " + vizAppHeight + "px; width: " + vizAppWidth + "px;";
          changedRules++;
        } else if (rules[j].media && childRules) {
          adjustMediaHeightRule(rules[j].media, defaultHeightRules, newHeightRules);

          // NOTE: selectorText can appear in two different forms when styles and IDs
          // are both present. IE places the styles before the IDs, so we match both forms:
          var changedChildRules = 0;
          var maxChangedRules = 8;
          var scale = scaleFactors[curScaleIndex];
          for (var k = 0; k < childRules.length && changedChildRules < maxChangedRules; k++) {
            if (childRules[k].selectorText === "div#visualization.responsive" || childRules[k].selectorText === "div.responsive#visualization") {
              // For this scale factor...
              // set the max-height and max-width for the visualization
              childRules[k].style.cssText = "max-height: " + Applab.footerlessAppHeight * scale + "px; max-width: " + Applab.appWidth * scale + "px;";
              changedChildRules++;
            } else if (childRules[k].selectorText === "div#visualizationColumn.responsive" || childRules[k].selectorText === "div.responsive#visualizationColumn") {
              // set the max-width for the parent visualizationColumn
              childRules[k].style.cssText = "max-width: " + Applab.appWidth * scale + "px;";
              changedChildRules++;
            } else if (childRules[k].selectorText === "div#visualizationColumn.responsive.with_padding" || childRules[k].selectorText === "div.with_padding.responsive#visualizationColumn") {
              // set the max-width for the parent visualizationColumn (with_padding)
              childRules[k].style.cssText = "max-width: " + (Applab.appWidth * scale + 2) + "px;";
              changedChildRules++;
            } else if (childRules[k].selectorText === "div#codeWorkspace") {
              // set the left for the codeWorkspace
              childRules[k].style.cssText = "left: " + Applab.appWidth * scale + "px;";
              changedChildRules++;
            } else if (childRules[k].selectorText === "div#visualizationResizeBar") {
              // set the left for the visualizationResizeBar
              childRules[k].style.cssText = "left: " + Applab.appWidth * scale + "px; line-height: " + Applab.footerlessAppHeight * scale + "px;";
              changedChildRules++;
            } else if (childRules[k].selectorText === "html[dir='rtl'] div#codeWorkspace") {
              // set the right for the codeWorkspace (RTL mode)
              childRules[k].style.cssText = "right: " + Applab.appWidth * scale + "px;";
              changedChildRules++;
            } else if (childRules[k].selectorText === "html[dir='rtl'] div#visualizationResizeBar") {
              // set the right for the visualizationResizeBar (RTL mode)
              childRules[k].style.cssText = "right: " + Applab.appWidth * scale + "px;";
              changedChildRules++;
            } else if (childRules[k].selectorText === "div#visualization.responsive > *" || childRules[k].selectorText === "div.responsive#visualization > *") {
              // and set the scale factor for all children of the visualization
              // (importantly, the divApplab and designModeViz elements)
              childRules[k].style.cssText = "-webkit-transform: scale(" + scale + ");-ms-transform: scale(" + scale + ");transform: scale(" + scale + ");";
              changedChildRules++;
            }
          }
          if (changedChildRules) {
            curScaleIndex++;
            changedRules++;
          }
        }
      }
      // After processing the applab.css, stop looking for stylesheets:
      break;
    }
  }
}

var drawDiv = function drawDiv() {
  var divApplab = document.getElementById('divApplab');
  divApplab.style.width = Applab.appWidth + "px";
  divApplab.style.height = Applab.footerlessAppHeight + "px";
  var designModeViz = document.getElementById('designModeViz');
  designModeViz.style.width = Applab.appWidth + "px";
  designModeViz.style.height = Applab.footerlessAppHeight + "px";

  if (studioApp.share) {
    renderFooterInSharedGame();
  }
};

function renderFooterInSharedGame() {
  var divApplab = document.getElementById('divApplab');
  var footerDiv = document.createElement('div');
  footerDiv.setAttribute('id', 'footerDiv');
  divApplab.parentNode.insertBefore(footerDiv, divApplab.nextSibling);

  var menuItems = [{
    text: applabMsg.reportAbuse(),
    link: '/report_abuse',
    newWindow: true
  }, {
    text: applabMsg.makeMyOwnApp(),
    link: '/projects/applab/new',
    hideOnMobile: true
  }, {
    text: commonMsg.openWorkspace(),
    link: location.href + '/view'
  }, {
    text: applabMsg.copyright(),
    link: '#',
    copyright: true
  }, {
    text: applabMsg.privacyPolicy(),
    link: 'https://code.org/privacy',
    newWindow: true
  }];
  if (dom.isMobile()) {
    menuItems = menuItems.filter(function (item) {
      return !item.hideOnMobile;
    });
  }

  window.dashboard.footer.render(React, {
    i18nDropdown: '',
    copyrightInBase: false,
    copyrightStrings: copyrightStrings,
    baseMoreMenuString: applabMsg.builtOnCodeStudio(),
    rowHeight: FOOTER_HEIGHT,
    style: {
      fontSize: 18
    },
    baseStyle: {
      width: $("#divApplab").width(),
      paddingLeft: 0
    },
    className: 'dark',
    menuItems: menuItems
  }, footerDiv);
}

/**
 * @param {string} code The code to search for Data Storage APIs
 * @return {boolean} True if the code uses any data storage APIs
 */
Applab.hasDataStoreAPIs = function (code) {
  return (/createRecord/.test(code) || /updateRecord/.test(code) || /setKeyValue/.test(code)
  );
};

Applab.stepSpeedFromSliderSpeed = function (sliderSpeed) {
  return 300 * Math.pow(1 - sliderSpeed, 2);
};

function getCurrentTickLength() {
  var stepSpeed = Applab.scale.stepSpeed;
  if (Applab.speedSlider) {
    stepSpeed = Applab.stepSpeedFromSliderSpeed(Applab.speedSlider.getValue());
  }
  return stepSpeed;
}

function queueOnTick() {
  window.setTimeout(Applab.onTick, getCurrentTickLength());
}

function pushDebugConsoleHistory(commandText) {
  Applab.debugConsoleHistory.currentHistoryIndex = Applab.debugConsoleHistory.history.length + 1;
  Applab.debugConsoleHistory.history[Applab.debugConsoleHistory.currentHistoryIndex - 1] = commandText;
}

function updateDebugConsoleHistory(commandText) {
  if (typeof Applab.debugConsoleHistory.history[Applab.debugConsoleHistory.currentHistoryIndex] !== 'undefined') {
    Applab.debugConsoleHistory.history[Applab.debugConsoleHistory.currentHistoryIndex] = commandText;
  }
}

function moveUpDebugConsoleHistory(currentInput) {
  if (Applab.debugConsoleHistory.currentHistoryIndex > 0) {
    Applab.debugConsoleHistory.currentHistoryIndex -= 1;
  }
  if (typeof Applab.debugConsoleHistory.history[Applab.debugConsoleHistory.currentHistoryIndex] !== 'undefined') {
    return Applab.debugConsoleHistory.history[Applab.debugConsoleHistory.currentHistoryIndex];
  }
  return currentInput;
}

function moveDownDebugConsoleHistory(currentInput) {
  if (Applab.debugConsoleHistory.currentHistoryIndex < Applab.debugConsoleHistory.history.length) {
    Applab.debugConsoleHistory.currentHistoryIndex += 1;
  }
  if (Applab.debugConsoleHistory.currentHistoryIndex == Applab.debugConsoleHistory.history.length && currentInput == Applab.debugConsoleHistory.history[Applab.debugConsoleHistory.currentHistoryIndex - 1]) {
    return '';
  }
  if (typeof Applab.debugConsoleHistory.history[Applab.debugConsoleHistory.currentHistoryIndex] !== 'undefined') {
    return Applab.debugConsoleHistory.history[Applab.debugConsoleHistory.currentHistoryIndex];
  }
  return currentInput;
}

function onDebugInputKeyDown(e) {
  var input = e.target.textContent;
  if (e.keyCode === KeyCodes.ENTER) {
    e.preventDefault();
    pushDebugConsoleHistory(input);
    e.target.textContent = '';
    outputApplabConsole('> ' + input);
    if (Applab.JSInterpreter) {
      var currentScope = Applab.JSInterpreter.interpreter.getScope();
      var evalInterpreter = new window.Interpreter(input);
      // Set console scope to the current scope of the running program

      // NOTE: we are being a little tricky here (we are re-running
      // part of the Interpreter constructor with a different interpreter's
      // scope)
      evalInterpreter.populateScope_(evalInterpreter.ast, currentScope);
      evalInterpreter.stateStack = [{
        node: evalInterpreter.ast,
        scope: currentScope,
        thisExpression: currentScope
      }];
      // Copy these properties directly into the evalInterpreter so the .isa()
      // method behaves as expected
      ['ARRAY', 'BOOLEAN', 'DATE', 'FUNCTION', 'NUMBER', 'OBJECT', 'STRING', 'UNDEFINED'].forEach(function (prop) {
        evalInterpreter[prop] = Applab.JSInterpreter.interpreter[prop];
      });
      try {
        evalInterpreter.run();
        outputApplabConsole('< ' + String(evalInterpreter.value));
      } catch (err) {
        outputApplabConsole('< ' + String(err));
      }
    } else {
      outputApplabConsole('< (not running)');
    }
  }
  if (e.keyCode === KeyCodes.UP) {
    updateDebugConsoleHistory(input);
    e.target.textContent = moveUpDebugConsoleHistory(input);
  }
  if (e.keyCode === KeyCodes.DOWN) {
    updateDebugConsoleHistory(input);
    e.target.textContent = moveDownDebugConsoleHistory(input);
  }
}

function handleExecutionError(err, lineNumber) {
  if (!lineNumber && err instanceof SyntaxError) {
    // syntax errors came before execution (during parsing), so we need
    // to determine the proper line number by looking at the exception
    lineNumber = err.loc.line;
    // Now select this location in the editor, since we know we didn't hit
    // this while executing (in which case, it would already have been selected)
    codegen.selectEditorRowColError(studioApp.editor, lineNumber - 1, err.loc.column);
  }
  if (Applab.JSInterpreter) {
    // Select code that just executed:
    Applab.JSInterpreter.selectCurrentCode("ace_error");
    // Grab line number if we don't have one already:
    if (!lineNumber) {
      lineNumber = 1 + Applab.JSInterpreter.getNearestUserCodeLine();
    }
  }
  outputError(String(err), ErrorLevel.ERROR, lineNumber);
  Applab.executionError = { err: err, lineNumber: lineNumber };

  // NOTE: We call onPuzzleComplete() here only when we hit syntax errors,
  // because we can't enter the onTick loop when the interpreter didn't
  // parse the program and instantiate properly.
  // In the future, we may want to call it on non freeplay-levels to handle
  // runtime errors (as part of level validation):
  if (err instanceof SyntaxError) {
    Applab.onPuzzleComplete();
  }
}

Applab.getCode = function () {
  return studioApp.getCode();
};

Applab.getHtml = function () {
  // This method is called on autosave. If we're about to autosave, let's update
  // levelHtml to include our current state.
  if ($('#designModeViz').is(':visible')) {
    designMode.serializeToLevelHtml();
  }
  return Applab.levelHtml;
};

/**
 * Sets Applab.levelHtml as well as #designModeViz contents.
 * designModeViz is the source of truth for the app's HTML.
 * levelHtml can be lazily updated from designModeViz via serializeToLevelHtml.
 * @param html
 */
Applab.setLevelHtml = function (html) {
  if (html === '') {
    Applab.levelHtml = '';
  } else {
    Applab.levelHtml = designMode.addScreenIfNecessary(html);
  }
  var designModeViz = document.getElementById('designModeViz');
  designMode.parseFromLevelHtml(designModeViz, true, applabConstants.DESIGN_ELEMENT_ID_PREFIX);

  // Make sure at least one screen exists, and that the first
  // screen is visible.
  designMode.loadDefaultScreen();
  designMode.serializeToLevelHtml();
};

Applab.onTick = function () {
  if (!Applab.running) {
    return;
  }

  Applab.tickCount++;
  queueOnTick();

  if (Applab.JSInterpreter) {
    Applab.JSInterpreter.executeInterpreter(Applab.tickCount === 1);
  } else {
    Applab.executeNativeJS();
  }

  if (checkFinished()) {
    Applab.onPuzzleFinish();
  }
};

Applab.executeNativeJS = function () {
  if (Applab.tickCount === 1) {
    try {
      Applab.whenRunFunc(studioApp, apiBlockly, Applab.Globals);
    } catch (e) {}
  }
};

/**
 * Initialize Blockly and Applab for read-only (blocks feedback).
 * Called on iframe load for read-only.
 */
Applab.initReadonly = function (config) {
  // Do some minimal level loading so that
  // we can ensure that the blocks are appropriately modified for this level
  skin = config.skin;
  level = config.level;
  copyrightStrings = config.copyrightStrings;
  config.appMsg = applabMsg;
  loadLevel();

  // Applab.initMinimal();

  studioApp.initReadonly(config);
};

function hasSeenDataAlert(channelId) {
  var dataAlerts = localStorage.getItem('dataAlerts');
  if (!dataAlerts) {
    return false;
  }
  var channelIds = JSON.parse(dataAlerts);
  return channelIds.indexOf(channelId) !== -1;
}

function markSeenDataAlert(channelId) {
  var dataAlerts = localStorage.getItem('dataAlerts');
  if (!dataAlerts) {
    dataAlerts = '[]';
  }
  var channelIds = JSON.parse(dataAlerts);
  channelIds.push(channelId);
  localStorage.setItem('dataAlerts', JSON.stringify(channelIds));
}

/**
 * Starts the app after (potentially) Showing a modal warning about data sharing
 * (if appropriate) and determining user is old enough
 */
Applab.startSharedAppAfterWarnings = function () {
  // dashboard will redirect young signed in users
  var is13Plus = Applab.user.isSignedIn || localStorage.getItem('is13Plus') === "true";
  var showStoreDataAlert = Applab.hasDataStoreAPIs(Applab.getCode()) && !hasSeenDataAlert(Applab.channelId);

  var modal = document.createElement('div');
  document.body.appendChild(modal);
  return React.render(React.createElement(ShareWarningsDialog, {
    showStoreDataAlert: showStoreDataAlert,
    is13Plus: is13Plus,
    handleClose: function handleClose() {
      // we closed the dialog without hitting too_young
      // Only want to ask about age once across apps
      if (!Applab.user.isSignedIn) {
        localStorage.setItem('is13Plus', 'true');
      }
      // Only want to ask about storing data once per app.
      if (showStoreDataAlert) {
        markSeenDataAlert(Applab.channelId);
      }
      window.setTimeout(Applab.runButtonClick.bind(studioApp), 0);
    },
    handleTooYoung: function handleTooYoung() {
      localStorage.setItem('is13Plus', 'false');
      window.location.href = '/too_young';
    }
  }), modal);
};

/**
 * Initialize Blockly and the Applab app.  Called on page load.
 */
Applab.init = function (config) {
  // replace studioApp methods with our own
  studioApp.reset = this.reset.bind(this);
  studioApp.runButtonClick = this.runButtonClick.bind(this);

  Applab.channelId = config.channel;
  if (config.assetPathPrefix) {
    Applab.assetPathPrefix = config.assetPathPrefix;
  }

  // Pre-populate asset list
  assetsApi.ajax('GET', '', function (xhr) {
    assetListStore.reset(JSON.parse(xhr.responseText));
  }, function () {
    // Unable to load asset list
  });

  Applab.clearEventHandlersKillTickLoop();
  skin = config.skin;
  skin.smallStaticAvatar = null;
  skin.staticAvatar = null;
  skin.winAvatar = null;
  skin.failureAvatar = null;
  level = config.level;
  copyrightStrings = config.copyrightStrings;
  Applab.user = {
    applabUserId: config.applabUserId,
    isAdmin: config.isAdmin === true,
    isSignedIn: config.isSignedIn
  };

  loadLevel();

  if (studioApp.hideSource) {
    // always run at max speed if source is hidden
    config.level.sliderSpeed = 1.0;
  }

  // If we are in mobile sharing mode, allow the viewport to handle scaling
  // and override our default width target in vizAppWidth with the actual width
  if (dom.isMobile() && config.hideSource) {
    vizAppWidth = Applab.appWidth;
  }

  adjustAppSizeStyles(document.getElementById(config.containerId));

  var showSlider = !config.hideSource && config.level.editCode;
  var showDebugButtons = !config.hideSource && config.level.editCode && !config.level.debuggerDisabled;
  var breakpointsEnabled = !config.level.debuggerDisabled;
  var showDebugConsole = !config.hideSource && config.level.editCode;
  var firstControlsRow = require('./controls.html.ejs')({
    assetUrl: studioApp.assetUrl,
    showSlider: showSlider,
    finishButton: !level.isProjectLevel && !level.submittable,
    submitButton: level.submittable && !level.submitted,
    unsubmitButton: level.submittable && level.submitted
  });
  var extraControlsRow = require('./extraControlRows.html.ejs')({
    assetUrl: studioApp.assetUrl,
    debugButtons: showDebugButtons,
    debugConsole: showDebugConsole
  });

  config.html = page({
    assetUrl: studioApp.assetUrl,
    data: {
      localeDirection: studioApp.localeDirection(),
      visualization: require('./visualization.html.ejs')(),
      controls: firstControlsRow,
      extraControlRows: extraControlsRow,
      blockUsed: undefined,
      idealBlockNumber: undefined,
      editCode: level.editCode,
      blockCounterClass: 'block-counter-default',
      pinWorkspaceToBottom: true,
      // TODO (brent) - seems a little gross that we've made this part of a
      // template shared across all apps
      hasDesignMode: true,
      readonlyWorkspace: config.readonlyWorkspace
    }
  });

  config.loadAudio = function () {
    studioApp.loadAudio(skin.winSound, 'win');
    studioApp.loadAudio(skin.failureSound, 'failure');
  };

  config.afterInject = function () {
    if (studioApp.isUsingBlockly()) {
      /**
       * The richness of block colours, regardless of the hue.
       * MOOC blocks should be brighter (target audience is younger).
       * Must be in the range of 0 (inclusive) to 1 (exclusive).
       * Blockly's default is 0.45.
       */
      Blockly.HSV_SATURATION = 0.6;

      Blockly.SNAP_RADIUS *= Applab.scale.snapRadius;
    }
    drawDiv();

    // Ignore the user's levelHtml for levels without design mode. levelHtml
    // should never be present on such levels, however some levels do
    // have levelHtml stored due to a previous bug. HTML set by levelbuilder
    // is stored in startHtml, not levelHtml.
    if (config.level.hideDesignMode) {
      config.level.levelHtml = '';
    }

    // Set designModeViz contents after it is created in configureDom()
    // and sized in drawDiv().
    Applab.setLevelHtml(level.levelHtml || level.startHtml || "");

    studioApp.alertIfAbusiveProject('#codeWorkspace');

    // IE9 doesnt support the way we handle responsiveness. Instead, explicitly
    // resize our visualization (user can still resize with grippy)
    if (!utils.browserSupportsCssMedia()) {
      studioApp.resizeVisualization(300);
    }

    if (studioApp.share) {
      Applab.startSharedAppAfterWarnings();
    }
  };

  config.afterEditorReady = function () {
    // Set up an event handler to create breakpoints when clicking in the
    // ace gutter:
    var aceEditor = studioApp.editor.aceEditor;

    if (breakpointsEnabled) {
      studioApp.editor.on('guttermousedown', function (e) {
        var bps = studioApp.editor.getBreakpoints();
        if (bps[e.line]) {
          studioApp.editor.clearBreakpoint(e.line);
        } else {
          studioApp.editor.setBreakpoint(e.line);
        }
      });
    }
  };

  config.afterClearPuzzle = function () {
    designMode.resetIds();
    Applab.setLevelHtml(config.level.startHtml || '');
    AppStorage.populateTable(level.dataTables, true); // overwrite = true
    AppStorage.populateKeyValue(level.dataProperties, true); // overwrite = true
    studioApp.resetButtonClick();
    annotationList.clearRuntimeAnnotations();
  };

  // arrangeStartBlocks(config);

  config.twitter = twitterOptions;

  // hide makeYourOwn on the share page
  config.makeYourOwn = false;

  config.varsInGlobals = true;
  config.noButtonsBelowOnMobileShare = true;

  config.dropletConfig = dropletConfig;

  config.pinWorkspaceToBottom = true;

  config.vizAspectRatio = Applab.appWidth / Applab.footerlessAppHeight;
  config.nativeVizWidth = Applab.appWidth;

  config.appMsg = applabMsg;

  // Since the app width may not be 400, set this value in the config to
  // ensure that the viewport is set up properly for scaling it up/down
  config.mobileNoPaddingShareWidth = config.level.appWidth;

  // Applab.initMinimal();

  AppStorage.populateTable(level.dataTables, false); // overwrite = false
  AppStorage.populateKeyValue(level.dataProperties, false); // overwrite = false
  studioApp.init(config);

  var viz = document.getElementById('visualization');
  var vizCol = document.getElementById('visualizationColumn');

  if (!config.noPadding) {
    viz.className += " with_padding";
    vizCol.className += " with_padding";
  }

  if (config.embed || config.hideSource) {
    // no responsive styles active in embed or hideSource mode, so set sizes:
    viz.style.width = Applab.appWidth + 'px';
    viz.style.height = Applab.appHeight + 'px';
    // Use offsetWidth of viz so we can include any possible border width:
    vizCol.style.maxWidth = viz.offsetWidth + 'px';
  }

  debugAreaController = new DebugArea(document.getElementById('debug-area'), document.getElementById('codeTextbox'));

  if (level.editCode) {
    // Initialize the slider.
    var slider = document.getElementById('applab-slider');
    if (slider) {
      var sliderXOffset = 10,
          sliderYOffset = 22,
          sliderWidth = 130;
      Applab.speedSlider = new Slider(sliderXOffset, sliderYOffset, sliderWidth, slider);

      // Change default speed (eg Speed up levels that have lots of steps).
      if (config.level.sliderSpeed) {
        Applab.speedSlider.setValue(config.level.sliderSpeed);
      }
    }
    var debugInput = document.getElementById('debug-input');
    if (debugInput) {
      debugInput.addEventListener('keydown', onDebugInputKeyDown);
    }
  }

  var debugResizeBar = document.getElementById('debugResizeBar');
  if (debugResizeBar) {
    dom.addMouseDownTouchEvent(debugResizeBar, Applab.onMouseDownDebugResizeBar);
    // Can't use dom.addMouseUpTouchEvent() because it will preventDefault on
    // all touchend events on the page, breaking click events...
    document.body.addEventListener('mouseup', Applab.onMouseUpDebugResizeBar);
    var mouseUpTouchEventName = dom.getTouchEventName('mouseup');
    if (mouseUpTouchEventName) {
      document.body.addEventListener(mouseUpTouchEventName, Applab.onMouseUpDebugResizeBar);
    }
  }

  var finishButton = document.getElementById('finishButton');
  if (finishButton) {
    dom.addClickTouchEvent(finishButton, Applab.onPuzzleFinish);
  }

  var submitButton = document.getElementById('submitButton');
  if (submitButton) {
    dom.addClickTouchEvent(submitButton, Applab.onPuzzleSubmit);
  }

  var unsubmitButton = document.getElementById('unsubmitButton');
  if (unsubmitButton) {
    dom.addClickTouchEvent(unsubmitButton, Applab.onPuzzleUnsubmit);
  }

  if (level.editCode) {

    var clearButton = document.getElementById('clear-console-header');
    if (clearButton) {
      dom.addClickTouchEvent(clearButton, clearDebugOutput);
    }
    var pauseButton = document.getElementById('pauseButton');
    var continueButton = document.getElementById('continueButton');
    var stepInButton = document.getElementById('stepInButton');
    var stepOverButton = document.getElementById('stepOverButton');
    var stepOutButton = document.getElementById('stepOutButton');
    if (pauseButton && continueButton && stepInButton && stepOverButton && stepOutButton) {
      dom.addClickTouchEvent(pauseButton, Applab.onPauseContinueButton);
      dom.addClickTouchEvent(continueButton, Applab.onPauseContinueButton);
      dom.addClickTouchEvent(stepInButton, Applab.onStepInButton);
      dom.addClickTouchEvent(stepOverButton, Applab.onStepOverButton);
      dom.addClickTouchEvent(stepOutButton, Applab.onStepOutButton);
    }

    // Prevent the backspace key from navigating back. Make sure it's still
    // allowed on other elements.
    // Based on http://stackoverflow.com/a/2768256/2506748
    $(document).on('keydown', function (event) {
      var doPrevent = false;
      if (event.keyCode !== KeyCodes.BACKSPACE) {
        return;
      }
      var d = event.srcElement || event.target;
      if (d.tagName.toUpperCase() === 'INPUT' && (d.type.toUpperCase() === 'TEXT' || d.type.toUpperCase() === 'PASSWORD' || d.type.toUpperCase() === 'FILE' || d.type.toUpperCase() === 'EMAIL' || d.type.toUpperCase() === 'SEARCH' || d.type.toUpperCase() === 'NUMBER' || d.type.toUpperCase() === 'DATE') || d.tagName.toUpperCase() === 'TEXTAREA') {
        doPrevent = d.readOnly || d.disabled;
      } else {
        doPrevent = !d.isContentEditable;
      }

      if (doPrevent) {
        event.preventDefault();
      }
    });

    designMode.addKeyboardHandlers();

    designMode.renderDesignWorkspace();

    designMode.configureDesignToggleRow();

    designMode.toggleDesignMode(Applab.startInDesignMode());

    designMode.configureDragAndDrop();

    var designModeViz = document.getElementById('designModeViz');
    designModeViz.addEventListener('click', designMode.onDesignModeVizClick);
  }
};

Applab.appendToEditor = function (newCode) {
  var code = studioApp.editor.addEmptyLine(studioApp.editor.getValue()) + newCode;
  studioApp.editor.setValue(code);
};

Applab.onMouseDownDebugResizeBar = function (event) {
  // When we see a mouse down in the resize bar, start tracking mouse moves:
  var eventSourceElm = event.srcElement || event.target;
  if (eventSourceElm.id === 'debugResizeBar') {
    Applab.draggingDebugResizeBar = true;
    document.body.addEventListener('mousemove', Applab.onMouseMoveDebugResizeBar);
    Applab.mouseMoveTouchEventName = dom.getTouchEventName('mousemove');
    if (Applab.mouseMoveTouchEventName) {
      document.body.addEventListener(Applab.mouseMoveTouchEventName, Applab.onMouseMoveDebugResizeBar);
    }

    event.preventDefault();
  }
};

/**
*  Handle mouse moves while dragging the debug resize bar.
*/
Applab.onMouseMoveDebugResizeBar = function (event) {
  var debugResizeBar = document.getElementById('debugResizeBar');
  var codeApp = document.getElementById('codeApp');
  var codeTextbox = document.getElementById('codeTextbox');
  var debugArea = document.getElementById('debug-area');

  var rect = debugResizeBar.getBoundingClientRect();
  var offset = (parseInt(window.getComputedStyle(codeApp).bottom, 10) || 0) - rect.height / 2;
  var newDbgHeight = Math.max(MIN_DEBUG_AREA_HEIGHT, Math.min(MAX_DEBUG_AREA_HEIGHT, window.innerHeight - event.pageY - offset));

  if (debugAreaController.isShut()) {
    debugAreaController.snapOpen();
  }

  codeTextbox.style.bottom = newDbgHeight + 'px';
  debugArea.style.height = newDbgHeight + 'px';

  // Fire resize so blockly and droplet handle this type of resize properly:
  utils.fireResizeEvent();
};

Applab.onMouseUpDebugResizeBar = function (event) {
  // If we have been tracking mouse moves, remove the handler now:
  if (Applab.draggingDebugResizeBar) {
    document.body.removeEventListener('mousemove', Applab.onMouseMoveDebugResizeBar);
    if (Applab.mouseMoveTouchEventName) {
      document.body.removeEventListener(Applab.mouseMoveTouchEventName, Applab.onMouseMoveDebugResizeBar);
    }
    Applab.draggingDebugResizeBar = false;
  }
};

/**
 * Clear the event handlers and stop the onTick timer.
 */
Applab.clearEventHandlersKillTickLoop = function () {
  Applab.whenRunFunc = null;
  Applab.running = false;
  $('#headers').removeClass('dimmed');
  $('#codeWorkspace').removeClass('dimmed');
  Applab.tickCount = 0;

  var spinner = document.getElementById('running-spinner');
  if (spinner) {
    spinner.style.display = 'none';
  }

  var pausedIcon = document.getElementById('paused-icon');
  if (pausedIcon) {
    pausedIcon.style.display = 'none';
  }

  var pauseButton = document.getElementById('pauseButton');
  var continueButton = document.getElementById('continueButton');
  var stepInButton = document.getElementById('stepInButton');
  var stepOverButton = document.getElementById('stepOverButton');
  var stepOutButton = document.getElementById('stepOutButton');
  if (pauseButton && continueButton && stepInButton && stepOverButton && stepOutButton) {
    pauseButton.style.display = "inline-block";
    pauseButton.disabled = true;
    continueButton.style.display = "none";
    stepInButton.disabled = true;
    stepOverButton.disabled = true;
    stepOutButton.disabled = true;
  }
};

Applab.isRunning = function () {
  // We are _always_ running in share mode.
  // TODO: (bbuchanan) Needs a better condition. Tracked in bug:
  //      https://www.pivotaltracker.com/story/show/105022102
  return $('#resetButton').is(':visible') || studioApp.share;
};

/**
 * Toggle whether divApplab or designModeViz is visible.
 * @param isVisible whether divApplab should be visible.
 */
Applab.toggleDivApplab = function (isVisible) {
  if (isVisible) {
    $('#divApplab').show();
    $('#designModeViz').hide();
  } else {
    $('#divApplab').hide();
    $('#designModeViz').show();
  }
};

/**
 * Reset the app to the start position and kill any pending animation tasks.
 * @param {boolean} first True if an opening animation is to be played.
 */
Applab.reset = function (first) {
  var i;
  Applab.clearEventHandlersKillTickLoop();

  // Soft buttons
  var softButtonCount = 0;
  for (i = 0; i < Applab.softButtons_.length; i++) {
    document.getElementById(Applab.softButtons_[i]).style.display = 'inline';
    softButtonCount++;
  }
  if (softButtonCount) {
    var softButtonsCell = document.getElementById('soft-buttons');
    softButtonsCell.className = 'soft-buttons-' + softButtonCount;
  }

  // Reset configurable variables
  delete Applab.activeCanvas;
  Applab.turtle = {};
  Applab.turtle.heading = 0;
  Applab.turtle.x = Applab.appWidth / 2;
  Applab.turtle.y = Applab.appHeight / 2;
  apiTimeoutList.clearTimeouts();
  apiTimeoutList.clearIntervals();

  var divApplab = document.getElementById('divApplab');
  while (divApplab.firstChild) {
    divApplab.removeChild(divApplab.firstChild);
  }

  // Clone and replace divApplab (this removes all attached event listeners):
  var newDivApplab = divApplab.cloneNode(true);
  divApplab.parentNode.replaceChild(newDivApplab, divApplab);

  var isDesigning = Applab.isInDesignMode() && !Applab.isRunning();
  Applab.toggleDivApplab(!isDesigning);
  designMode.parseFromLevelHtml(newDivApplab, false);
  if (Applab.isInDesignMode()) {
    designMode.resetElementTray(isDesigning);
    designMode.resetPropertyTab();
  }

  if (level.showTurtleBeforeRun) {
    applabTurtle.turtleSetVisibility(true);
  }

  // Reset goal successState:
  if (level.goal) {
    level.goal.successState = {};
  }

  if (level.editCode) {
    // Reset the pause button:
    var pauseButton = document.getElementById('pauseButton');
    var continueButton = document.getElementById('continueButton');
    var stepInButton = document.getElementById('stepInButton');
    var stepOverButton = document.getElementById('stepOverButton');
    var stepOutButton = document.getElementById('stepOutButton');
    if (pauseButton && continueButton && stepInButton && stepOverButton && stepOutButton) {
      pauseButton.style.display = "inline-block";
      pauseButton.disabled = true;
      continueButton.style.display = "none";
      stepInButton.disabled = false;
      stepOverButton.disabled = true;
      stepOutButton.disabled = true;
    }
    var spinner = document.getElementById('running-spinner');
    if (spinner) {
      spinner.style.display = 'none';
    }
    var pausedIcon = document.getElementById('paused-icon');
    if (pausedIcon) {
      pausedIcon.style.display = 'none';
    }
  }

  // Reset the Globals object used to contain program variables:
  Applab.Globals = {};
  Applab.executionError = null;
  Applab.JSInterpreter = null;
};

/**
 * Empty the contents of the debug console scrollback area.
 */
function clearDebugOutput() {
  var debugOutput = document.getElementById('debug-output');
  if (debugOutput) {
    debugOutput.textContent = '';
  }
}

/**
 * Empty the debug console input area.
 */
function clearDebugInput() {
  var debugInput = document.getElementById('debug-input');
  if (debugInput) {
    debugInput.textContent = '';
  }
}

/**
 * Save the app state and trigger any callouts, then call the callback.
 * @param callback {Function}
 */
studioApp.runButtonClickWrapper = function (callback) {
  $(window).trigger('run_button_pressed');
  Applab.serializeAndSave(callback);
};

/**
 * We also want to serialize in save in some other cases (i.e. entering code
 * mode from design mode).
 */
Applab.serializeAndSave = function (callback) {
  designMode.serializeToLevelHtml();
  $(window).trigger('appModeChanged');
  if (callback) {
    callback();
  }
};

/**
 * Click the run button.  Start the program.
 */
// XXX This is the only method used by the templates!
Applab.runButtonClick = function () {
  var runButton = document.getElementById('runButton');
  var resetButton = document.getElementById('resetButton');
  // Ensure that Reset button is at least as wide as Run button.
  if (!resetButton.style.minWidth) {
    resetButton.style.minWidth = runButton.offsetWidth + 'px';
  }
  studioApp.toggleRunReset('reset');
  if (studioApp.isUsingBlockly()) {
    Blockly.mainBlockSpace.traceOn(true);
  }
  Applab.execute();

  // Enable the Finish button if is present:
  var shareCell = document.getElementById('share-cell');
  if (shareCell) {
    shareCell.className = 'share-cell-enabled';
  }
};

/**
 * App specific displayFeedback function that calls into
 * studioApp.displayFeedback when appropriate
 */
var displayFeedback = function displayFeedback() {
  if (!Applab.waitingForReport) {
    studioApp.displayFeedback({
      app: 'applab', //XXX
      skin: skin.id,
      feedbackType: Applab.testResults,
      executionError: Applab.executionError,
      response: Applab.response,
      level: level,
      showingSharing: level.freePlay,
      feedbackImage: Applab.feedbackImage,
      twitter: twitterOptions,
      // allow users to save freeplay levels to their gallery (impressive non-freeplay levels are autosaved)
      saveToGalleryUrl: level.freePlay && Applab.response && Applab.response.save_to_gallery_url,
      appStrings: {
        reinfFeedbackMsg: applabMsg.reinfFeedbackMsg(),
        sharingText: applabMsg.shareGame()
      }
    });
  }
};

Applab.onSubmitComplete = function (response) {
  window.location.href = response.redirect;
};

/**
 * Function to be called when the service report call is complete
 * @param {object} JSON response (if available)
 */
Applab.onReportComplete = function (response) {
  Applab.response = response;
  Applab.waitingForReport = false;
  displayFeedback();
};

//
// Generates code with user-generated function definitions and evals that code
// so these can be called from event handlers. This should be called for each
// block type that defines functions.
//

var defineProcedures = function defineProcedures(blockType) {
  var code = Blockly.Generator.blockSpaceToCode('JavaScript', blockType);
  // TODO: handle editCode JS interpreter
  try {
    codegen.evalWith(code, {
      studioApp: studioApp,
      Applab: apiBlockly,
      Globals: Applab.Globals });
  } catch (e) {}
};

/**
 * Execute the app
 */
Applab.execute = function () {
  Applab.result = ResultType.UNSET;
  Applab.testResults = TestResults.NO_TESTS_RUN;
  Applab.waitingForReport = false;
  Applab.response = null;
  var i;

  studioApp.reset(false);
  studioApp.attempts++;
  clearDebugOutput();
  clearDebugInput();

  // Set event handlers and start the onTick timer

  var codeWhenRun;
  if (level.editCode) {
    codeWhenRun = studioApp.getCode();
    if (!studioApp.hideSource) {
      // Our ace worker also calls attachToSession, but it won't run on IE9:
      var session = studioApp.editor.aceEditor.getSession();
      annotationList.attachToSession(session, studioApp.editor);
      annotationList.clearRuntimeAnnotations();
    }
  } else {
    // Define any top-level procedures the user may have created
    // (must be after reset(), which resets the Applab.Globals namespace)
    defineProcedures('procedures_defreturn');
    defineProcedures('procedures_defnoreturn');

    var blocks = Blockly.mainBlockSpace.getTopBlocks();
    for (var x = 0; blocks[x]; x++) {
      var block = blocks[x];
      if (block.type === 'when_run') {
        codeWhenRun = Blockly.Generator.blocksToCode('JavaScript', [block]);
        break;
      }
    }
  }
  if (codeWhenRun) {
    if (level.editCode) {
      // Use JS interpreter on editCode levels
      Applab.JSInterpreter = new JSInterpreter({
        code: codeWhenRun,
        blocks: dropletConfig.blocks,
        blockFilter: level.executePaletteApisOnly && level.codeFunctions,
        enableEvents: true,
        studioApp: studioApp,
        shouldRunAtMaxSpeed: function shouldRunAtMaxSpeed() {
          return getCurrentTickLength() === 0;
        },
        maxInterpreterStepsPerTick: MAX_INTERPRETER_STEPS_PER_TICK,
        onNextStepChanged: Applab.updatePauseUIState,
        onPause: Applab.onPauseContinueButton,
        onExecutionError: handleExecutionError,
        onExecutionWarning: outputApplabConsole
      });
      if (!Applab.JSInterpreter.initialized()) {
        return;
      }
    } else {
      Applab.whenRunFunc = codegen.functionFromCode(codeWhenRun, {
        StudioApp: studioApp,
        Applab: apiBlockly,
        Globals: Applab.Globals
      });
    }
  }

  if (level.editCode) {
    var pauseButton = document.getElementById('pauseButton');
    var continueButton = document.getElementById('continueButton');
    var stepInButton = document.getElementById('stepInButton');
    var stepOverButton = document.getElementById('stepOverButton');
    var stepOutButton = document.getElementById('stepOutButton');
    if (pauseButton && continueButton && stepInButton && stepOverButton && stepOutButton) {
      pauseButton.style.display = "inline-block";
      pauseButton.disabled = false;
      continueButton.style.display = "none";
      stepInButton.disabled = true;
      stepOverButton.disabled = true;
      stepOutButton.disabled = true;
    }
    var spinner = document.getElementById('running-spinner');
    if (spinner) {
      spinner.style.display = 'inline-block';
    }
    var pausedIcon = document.getElementById('paused-icon');
    if (pausedIcon) {
      pausedIcon.style.display = 'none';
    }
  }

  // Set focus on the default screen so key events can be handled
  // right from the start without requiring the user to adjust focus.
  Applab.loadDefaultScreen();

  Applab.running = true;
  $('#headers').addClass('dimmed');
  $('#codeWorkspace').addClass('dimmed');
  designMode.renderDesignWorkspace();
  queueOnTick();
};

Applab.onPauseContinueButton = function () {
  if (Applab.running) {
    // We have code and are either running or paused
    if (Applab.JSInterpreter.paused && Applab.JSInterpreter.nextStep === StepType.RUN) {
      Applab.JSInterpreter.paused = false;
    } else {
      Applab.JSInterpreter.paused = true;
      Applab.JSInterpreter.nextStep = StepType.RUN;
    }
    Applab.updatePauseUIState();
    var stepInButton = document.getElementById('stepInButton');
    var stepOverButton = document.getElementById('stepOverButton');
    var stepOutButton = document.getElementById('stepOutButton');
    stepInButton.disabled = !Applab.JSInterpreter.paused;
    stepOverButton.disabled = !Applab.JSInterpreter.paused;
    stepOutButton.disabled = !Applab.JSInterpreter.paused;
  }
};

Applab.updatePauseUIState = function () {
  var pauseButton = document.getElementById('pauseButton');
  var continueButton = document.getElementById('continueButton');
  var spinner = document.getElementById('running-spinner');
  var pausedIcon = document.getElementById('paused-icon');

  if (pauseButton && continueButton && spinner && pausedIcon) {
    if (Applab.JSInterpreter.paused && Applab.JSInterpreter.nextStep === StepType.RUN) {
      pauseButton.style.display = "none";
      continueButton.style.display = "inline-block";
      spinner.style.display = 'none';
      pausedIcon.style.display = 'inline-block';
    } else {
      pauseButton.style.display = "inline-block";
      continueButton.style.display = "none";
      spinner.style.display = 'inline-block';
      pausedIcon.style.display = 'none';
    }
  }
};

Applab.onStepOverButton = function () {
  if (Applab.running) {
    Applab.JSInterpreter.paused = true;
    Applab.JSInterpreter.nextStep = StepType.OVER;
    Applab.updatePauseUIState();
  }
};

Applab.onStepInButton = function () {
  if (!Applab.running) {
    Applab.runButtonClick();
    Applab.onPauseContinueButton();
  }
  Applab.JSInterpreter.paused = true;
  Applab.JSInterpreter.nextStep = StepType.IN;
  Applab.updatePauseUIState();
};

Applab.onStepOutButton = function () {
  if (Applab.running) {
    Applab.JSInterpreter.paused = true;
    Applab.JSInterpreter.nextStep = StepType.OUT;
    Applab.updatePauseUIState();
  }
};

Applab.feedbackImage = '';
Applab.encodedFeedbackImage = '';

Applab.onViewData = function () {
  window.open('//' + utils.getPegasusHost() + '/v3/edit-csp-app/' + Applab.channelId, '_blank');
};

Applab.onDesignModeButton = function () {
  designMode.toggleDesignMode(true);
  studioApp.resetButtonClick();
};

Applab.onCodeModeButton = function () {
  designMode.toggleDesignMode(false);
  utils.fireResizeEvent();
  if (!Applab.isRunning()) {
    Applab.serializeAndSave();
    var divApplab = document.getElementById('divApplab');
    designMode.parseFromLevelHtml(divApplab, false);
    Applab.changeScreen(designMode.getCurrentScreenId());
  } else {
    Applab.activeScreen().focus();
  }
};

var HTTP_REGEXP = new RegExp('^http://');

// Exposed for testing
Applab.assetPathPrefix = "/v3/assets/";

/**
 * If the filename is relative (contains no slashes), then prepend
 * the path to the assets directory for this project to the filename.
 *
 * If the filename URL is absolute and non-https, route it through the
 * MEDIA_PROXY.
 * @param {string} filename
 * @returns {string}
 */
Applab.maybeAddAssetPathPrefix = function (filename) {

  if (HTTP_REGEXP.test(filename)) {
    return MEDIA_PROXY + encodeURIComponent(filename);
  }

  filename = filename || '';
  if (filename.length === 0) {
    return '/blockly/media/1x1.gif';
  }

  if (filename.indexOf('/') !== -1) {
    return filename;
  }

  return Applab.assetPathPrefix + Applab.channelId + '/' + filename;
};

/**
 * Show a modal dialog with a title, text, and OK and Cancel buttons
 * @param {title}
 * @param {text}
 * @param {callback} [onConfirm] what to do when the user clicks OK
 * @param {string} [filterSelector] Optional selector to filter for.
 */

Applab.showConfirmationDialog = function (config) {
  config.text = config.text || "";
  config.title = config.title || "";

  var contentDiv = document.createElement('div');
  contentDiv.innerHTML = '<p class="dialog-title">' + config.title + '</p>' + '<p>' + config.text + '</p>';

  var buttons = document.createElement('div');
  buttons.innerHTML = require('../templates/buttons.html.ejs')({
    data: {
      confirmText: commonMsg.dialogOK(),
      cancelText: commonMsg.dialogCancel()
    }
  });
  contentDiv.appendChild(buttons);

  var dialog = studioApp.createModalDialog({
    Dialog: Dialog,
    contentDiv: contentDiv,
    defaultBtnSelector: '#confirm-button'
  });

  var cancelButton = buttons.querySelector('#again-button');
  if (cancelButton) {
    dom.addClickTouchEvent(cancelButton, function () {
      dialog.hide();
    });
  }

  var confirmButton = buttons.querySelector('#confirm-button');
  if (confirmButton) {
    dom.addClickTouchEvent(confirmButton, function () {
      if (config.onConfirm) {
        config.onConfirm();
      }
      dialog.hide();
    });
  }

  dialog.show();
};

Applab.onPuzzleSubmit = function () {
  Applab.showConfirmationDialog({
    title: commonMsg.submitYourProject(),
    text: commonMsg.submitYourProjectConfirm(),
    onConfirm: function onConfirm() {
      Applab.onPuzzleComplete(true);
    }
  });
};

Applab.unsubmit = function () {
  $.post(level.unsubmitUrl, { "_method": 'PUT', user_level: { best_result: 1 } }, function (data) {
    location.reload();
  });
};

Applab.onPuzzleUnsubmit = function () {
  Applab.showConfirmationDialog({
    title: commonMsg.unsubmitYourProject(),
    text: commonMsg.unsubmitYourProjectConfirm(),
    onConfirm: function onConfirm() {
      Applab.unsubmit();
    }
  });
};

Applab.onPuzzleFinish = function () {
  Applab.onPuzzleComplete(false); // complete without submitting
};

Applab.onPuzzleComplete = function (submit) {
  if (Applab.executionError) {
    Applab.result = ResultType.ERROR;
  } else {
    // In most cases, submit all results as success
    Applab.result = ResultType.SUCCESS;
  }

  // If we know they succeeded, mark levelComplete true
  var levelComplete = Applab.result === ResultType.SUCCESS;

  if (Applab.executionError) {
    Applab.testResults = studioApp.getTestResults(levelComplete, {
      executionError: Applab.executionError
    });
  } else {
    if (submit) {
      Applab.testResults = TestResults.SUBMITTED;
    } else {
      Applab.testResults = TestResults.FREE_PLAY;
    }
  }

  // Stop everything on screen
  Applab.clearEventHandlersKillTickLoop();

  if (Applab.testResults >= TestResults.FREE_PLAY) {
    studioApp.playAudio('win');
  } else {
    studioApp.playAudio('failure');
  }

  var program;

  if (level.editCode) {
    // If we want to "normalize" the JavaScript to avoid proliferation of nearly
    // identical versions of the code on the service, we could do either of these:

    // do an acorn.parse and then use escodegen to generate back a "clean" version
    // or minify (uglifyjs) and that or js-beautify to restore a "clean" version

    program = studioApp.getCode();
  } else {
    var xml = Blockly.Xml.blockSpaceToDom(Blockly.mainBlockSpace);
    program = Blockly.Xml.domToText(xml);
  }

  Applab.waitingForReport = true;

  var sendReport = function sendReport() {
    studioApp.report({
      app: 'applab',
      level: level.id,
      result: levelComplete,
      testResult: Applab.testResults,
      program: encodeURIComponent(program),
      image: Applab.encodedFeedbackImage,
      onComplete: submit ? Applab.onSubmitComplete : Applab.onReportComplete
    });
  };

  if (typeof document.getElementById('divApplab').toDataURL === 'undefined') {
    // don't try it if function is not defined
    sendReport();
  } else {
    document.getElementById('divApplab').toDataURL("image/png", {
      callback: function callback(pngDataUrl) {
        Applab.feedbackImage = pngDataUrl;
        Applab.encodedFeedbackImage = encodeURIComponent(Applab.feedbackImage.split(',')[1]);

        sendReport();
      }
    });
  }
};

Applab.executeCmd = function (id, name, opts) {
  var cmd = {
    'id': id,
    'name': name,
    'opts': opts
  };
  return Applab.callCmd(cmd);
};

//
// Execute an API command
//

Applab.callCmd = function (cmd) {
  var retVal = false;
  if (applabCommands[cmd.name] instanceof Function) {
    studioApp.highlight(cmd.id);
    retVal = applabCommands[cmd.name](cmd.opts);
  }
  return retVal;
};

/*
var onWaitComplete = function (opts) {
  if (!opts.complete) {
    if (opts.waitCallback) {
      opts.waitCallback();
    }
    opts.complete = true;
  }
};

Studio.wait = function (opts) {
  if (!opts.started) {
    opts.started = true;

    // opts.value is the number of milliseconds to wait - or 'click' which means
    // "wait for click"
    if ('click' === opts.value) {
      opts.waitForClick = true;
    } else {
      opts.waitTimeout = window.setTimeout(
        delegate(this, onWaitComplete, opts),
        opts.value);
    }
  }

  return opts.complete;
};
*/

Applab.timedOut = function () {
  return Applab.tickCount > Applab.timeoutFailureTick;
};

var checkFinished = function checkFinished() {
  // if we have a succcess condition and have accomplished it, we're done and successful
  if (level.goal && level.goal.successCondition && level.goal.successCondition()) {
    Applab.result = ResultType.SUCCESS;
    return true;
  }

  // if we have a failure condition, and it's been reached, we're done and failed
  if (level.goal && level.goal.failureCondition && level.goal.failureCondition()) {
    Applab.result = ResultType.FAILURE;
    return true;
  }

  /*
  if (Applab.allGoalsVisited()) {
    Applab.result = ResultType.SUCCESS;
    return true;
  }
  */

  if (Applab.timedOut()) {
    Applab.result = ResultType.FAILURE;
    return true;
  }

  return false;
};

Applab.startInDesignMode = function () {
  return !!level.designModeAtStart;
};

Applab.hideDesignModeToggle = function () {
  return !!level.hideDesignMode || !!studioApp.share;
};

Applab.hideViewDataButton = function () {
  var isEditing = window.dashboard && window.dashboard.project.isEditing();
  return !!level.hideViewDataButton || !!level.hideDesignMode || !!studioApp.share || !isEditing;
};

Applab.isInDesignMode = function () {
  return $('#designWorkspace').is(':visible');
};

function quote(str) {
  return '"' + str + '"';
}

/**
 * Returns a list of options (optionally filtered by type) for code-mode
 * asset dropdowns.
 */
Applab.getAssetDropdown = function (typeFilter) {
  var options = assetListStore.list(typeFilter).map(function (asset) {
    return {
      text: quote(asset.filename),
      display: quote(asset.filename)
    };
  });
  var handleChooseClick = function handleChooseClick(callback) {
    showAssetManager(function (filename) {
      callback(quote(filename));
    }, typeFilter);
  };
  options.push({
    display: '<span class="chooseAssetDropdownOption">Choose...</a>',
    click: handleChooseClick
  });
  return options;
};

/**
 * Return droplet dropdown options representing a list of ids currently present
 * in the DOM, optionally limiting the result to a certain HTML element tagName.
 * @param {string} [filterSelector] Optional selector to filter for.
 * @returns {Array}
 */
Applab.getIdDropdown = function (filterSelector) {
  return Applab.getIdDropdownFromDom_($(document), filterSelector);
};

/**
 * Internal helper for getIdDropdown, which takes a documentRoot
 * argument to remove its global dependency and make it testable.
 * @param {jQuery} documentRoot
 * @param {string} filterSelector
 * @returns {Array}
 * @private
 */
Applab.getIdDropdownFromDom_ = function (documentRoot, filterSelector) {
  var divApplabChildren = documentRoot.find('#divApplab').children();
  var elements = divApplabChildren.toArray().concat(divApplabChildren.children().toArray());

  // Return all elements when no filter is given
  if (filterSelector) {
    elements = $(elements).filter(filterSelector).get();
  }

  return elements.sort(function (elementA, elementB) {
    return elementA.id < elementB.id ? -1 : 1;
  }).map(function (element) {
    return {
      text: quote(element.id),
      display: quote(element.id)
    };
  });
};

/**
 * @returns {HTMLElement} The first "screen" that isn't hidden.
 */
Applab.activeScreen = function () {
  return $('#divApplab .screen').filter(function () {
    return this.style.display !== 'none';
  }).first()[0];
};

/**
 * Changes the active screen by toggling all screens in divApplab to be non-visible,
 * unless they match the provided screenId. Also focuses the screen.
 */
Applab.changeScreen = function (screenId) {
  $('#divApplab .screen').each(function () {
    $(this).toggle(this.id === screenId);
    if (this.id === screenId) {
      // Allow the active screen to receive keyboard events.
      this.focus();
    }
  });
};

Applab.loadDefaultScreen = function () {
  var defaultScreen = $('#divApplab .screen').first().attr('id');
  Applab.changeScreen(defaultScreen);
};

},{"../JSInterpreter":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/JSInterpreter.js","../StudioApp":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/StudioApp.js","../acemode/annotationList":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/acemode/annotationList.js","../clientApi":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/clientApi.js","../codegen":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/codegen.js","../constants":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/constants.js","../dom":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/dom.js","../dropletUtils":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/dropletUtils.js","../locale":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/locale.js","../skins":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/skins.js","../slider":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/slider.js","../templates/ShareWarningsDialog.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/templates/ShareWarningsDialog.jsx","../templates/buttons.html.ejs":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/templates/buttons.html.ejs","../templates/page.html.ejs":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/templates/page.html.ejs","../timeoutList":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/timeoutList.js","../utils":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/utils.js","../xml":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/xml.js","./DebugArea":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/DebugArea.js","./api":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/api.js","./apiBlockly":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/apiBlockly.js","./appStorage":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/appStorage.js","./applabTurtle":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/applabTurtle.js","./assetManagement/assetListStore":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/assetManagement/assetListStore.js","./assetManagement/show.js":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/assetManagement/show.js","./blocks":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/blocks.js","./commands":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/commands.js","./constants":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/constants.js","./controls.html.ejs":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/controls.html.ejs","./designElements/elementUtils":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/elementUtils.js","./designElements/library":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/library.js","./designMode":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designMode.js","./dontMarshalApi":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/dontMarshalApi.js","./dropletConfig":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/dropletConfig.js","./errorHandler":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/errorHandler.js","./extraControlRows.html.ejs":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/extraControlRows.html.ejs","./locale":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/locale.js","./visualization.html.ejs":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/visualization.html.ejs"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/templates/ShareWarningsDialog.jsx":[function(require,module,exports){
'use strict';

var ShareWarnings = require('./ShareWarnings.jsx');

/**
 * Modal for our SharingWarnings.
 */
var SharingWarningsDialog = module.exports = React.createClass({
  displayName: 'exports',

  propTypes: {
    is13Plus: React.PropTypes.bool.isRequired,
    showStoreDataAlert: React.PropTypes.bool.isRequired,
    handleClose: React.PropTypes.func.isRequired,
    handleTooYoung: React.PropTypes.func.isRequired
  },

  getInitialState: function getInitialState() {
    return { modalIsOpen: !this.props.is13Plus || this.props.showStoreDataAlert };
  },

  componentDidMount: function componentDidMount() {
    // We didn't need to show our modal. Go through the close process so that
    // app becomes unblocked
    if (!this.state.modalIsOpen) {
      this.handleClose();
    }
  },

  handleClose: function handleClose() {
    this.setState({ modalIsOpen: false });
    this.props.handleClose();
  },

  render: function render() {
    if (!this.state.modalIsOpen) {
      return React.createElement('div', null);
    }

    var styles = {
      main: {
        position: 'absolute',
        top: 50,
        left: '50%',
        transform: 'translate(-50%, 0)',
        WebkitTransform: 'translate(-50%, 0)',
        border: '1px solid #ccc',
        background: '#fff',
        overflow: 'auto',
        WebkitOverflowScrolling: 'touch',
        borderRadius: '4px',
        outline: 'none',
        padding: '20px',
        zIndex: 1050, // based off of behavior in dashboard's dialog.js
        width: window.screen.width < 500 ? '80%' : undefined
      },
      overlay: {
        position: 'fixed',
        opacity: 0.8,
        backgroundColor: 'black',
        top: 0,
        left: 0,
        bottom: 0,
        right: 0,
        zIndex: 1040 // based off of behavior in dashboard's dialog.js
      }
    };

    return React.createElement(
      'div',
      null,
      React.createElement('div', { style: styles.overlay }),
      React.createElement(
        'div',
        { style: styles.main },
        React.createElement(ShareWarnings, {
          is13Plus: this.props.is13Plus,
          showStoreDataAlert: this.props.showStoreDataAlert,
          handleTooYoung: this.props.handleTooYoung,
          handleClose: this.handleClose })
      )
    );
  }
});

},{"./ShareWarnings.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/templates/ShareWarnings.jsx"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/templates/ShareWarnings.jsx":[function(require,module,exports){
'use strict';

var colors = require('../sharedJsxStyles').colors;
var AgeDropdown = require('./AgeDropdown.jsx');

var commonMsg = require('../locale');

/**
 * Dialog contents for when you visit a shared Applab page. If not signed in,
 * it will ask your age. If the app stores data, it will also alert you to
 * that.
 */
var SharingWarnings = module.exports = React.createClass({
  displayName: 'exports',

  propTypes: {
    is13Plus: React.PropTypes.bool.isRequired,
    showStoreDataAlert: React.PropTypes.bool.isRequired,
    handleClose: React.PropTypes.func.isRequired,
    handleTooYoung: React.PropTypes.func.isRequired
  },

  handleOk: function handleOk() {
    if (this.props.is13Plus) {
      this.props.handleClose();
      return;
    }

    var ageElement = React.findDOMNode(this.refs.age);
    if (ageElement.value === '') {
      // ignore close if we haven't selected a value from dropdown
      return;
    }

    var age = parseInt(ageElement.value, 10);
    if (age >= 13) {
      this.props.handleClose();
    } else {
      this.props.handleTooYoung();
    }
  },

  render: function render() {
    var styles = {
      dataMessage: {
        fontSize: 18,
        marginBottom: 30
      },
      ageMessage: {
        fontSize: 18,
        marginBottom: 10
      },
      ageDropdown: {},
      moreInfo: {
        marginLeft: 0
      },
      ok: {
        backgroundColor: colors.orange,
        border: '1px solid ' + colors.orange,
        color: colors.white,
        float: 'right'
      }
    };

    var i18n = {
      storeDataMsg: commonMsg.shareWarningsStoreData(),
      ageMsg: commonMsg.shareWarningsAge(),
      moreInfo: commonMsg.shareWarningsMoreInfo(),
      ok: commonMsg.dialogOK()
    };

    var dataPrompt, agePrompt;
    if (this.props.showStoreDataAlert) {
      dataPrompt = React.createElement(
        'div',
        { style: styles.dataMessage },
        i18n.storeDataMsg
      );
    }
    if (!this.props.is13Plus) {
      agePrompt = React.createElement(
        'div',
        null,
        React.createElement(
          'div',
          { style: styles.ageMessage },
          i18n.ageMsg
        ),
        React.createElement(AgeDropdown, { style: styles.ageDropdonw, ref: 'age' })
      );
    }

    return React.createElement(
      'div',
      null,
      dataPrompt,
      agePrompt,
      React.createElement(
        'div',
        null,
        React.createElement(
          'a',
          { style: styles.moreInfo, target: '_blank', href: 'https://code.org/privacy' },
          i18n.moreInfo
        ),
        React.createElement(
          'button',
          { style: styles.ok, onClick: this.handleOk },
          i18n.ok
        )
      )
    );
  }
});

},{"../locale":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/locale.js","../sharedJsxStyles":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/sharedJsxStyles.js","./AgeDropdown.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/templates/AgeDropdown.jsx"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/templates/AgeDropdown.jsx":[function(require,module,exports){
/**
 * A dropdown with the set of ages we use across our site (4-20, 21+)
 * NOTE: this is pretty similarly to a component in dashboard's
 * report_abuse_form.jsx. In an ideal world, we would have a better way of
 * sharing components between dashboard/apps and have any difference between
 * the two version controlled by props.
 */
'use strict';

module.exports = React.createClass({
  displayName: 'exports',

  propTypes: {
    style: React.PropTypes.object
  },

  render: function render() {
    var ages = ['', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21+'];

    return React.createElement(
      'select',
      { name: 'age', style: this.props.style },
      ages.map(function (age) {
        return React.createElement(
          'option',
          { key: age, value: age },
          age
        );
      })
    );
  }
});

},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/visualization.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('<div id="divApplab" class="appModern" tabindex="1">\n</div>\n<div id="designModeViz" class="appModern" style="display:none;">\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"ejs":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/ejs/lib/ejs.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/extraControlRows.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1; var msg = require('../locale') ; buf.push('\n');2; var applabMsg = require('./locale') ; buf.push('\n\n<div id="debug-area">\n  <div id="debugResizeBar" class="fa fa-ellipsis-h"></div>\n  <div id="debug-area-header">\n    <span class="header-text">', escape((7,  applabMsg.debugConsoleHeader() )), '</span>\n    <i id="show-hide-debug-icon" class="fa fa-chevron-circle-down"></i>\n    ');9; if (debugButtons) { ; buf.push('\n    <div id="debug-commands-header" class="workspace-header">\n      <i id="running-spinner" style="display: none;" class="fa fa-spinner fa-spin"></i>\n      <i id="paused-icon" style="display: none;" class="fa fa-pause"></i>\n      <span class="header-text">', escape((13,  applabMsg.debugCommandsHeaderWhenOpen() )), '</span>\n    </div>\n    <div id="clear-console-header" class="workspace-header workspace-header-button"><span><i class="fa fa-eraser"></i>Clear</span></div>\n    ');16; } ; buf.push('\n    <div id="slider-cell" style="margin-left: ', escape((17,  debugButtons ? 0 : 40 )), 'px">\n      <svg id="applab-slider"\n           xmlns="http://www.w3.org/2000/svg"\n           xmlns:svg="http://www.w3.org/2000/svg"\n           xmlns:xlink="http://www.w3.org/1999/xlink"\n           version="1.1"\n           width="150"\n           height="28">\n          <!-- Slow icon. -->\n          <clipPath id="slowClipPath">\n            <rect width=26 height=12 x=5 y=6 />\n          </clipPath>\n          <image xlink:href="', escape((29,  assetUrl('media/applab/turtle_icons.png') )), '" height=42 width=84 x=-21 y=-18\n              clip-path="url(#slowClipPath)" />\n          <!-- Fast icon. -->\n          <clipPath id="fastClipPath">\n            <rect width=26 height=16 x=120 y=2 />\n          </clipPath>\n          <image xlink:href="', escape((35,  assetUrl('media/applab/turtle_icons.png') )), '" height=42 width=84 x=120 y=-19\n              clip-path="url(#fastClipPath)" />\n      </svg>\n    </div>\n  </div>\n\n  ');41; if (debugButtons) { ; buf.push('\n  <div id="debug-commands" class="debug-commands">\n    <div id="debug-buttons">\n      <button id="pauseButton" class="debugger_button">\n        <img src="', escape((45,  assetUrl('media/1x1.gif') )), '" class="pause-btn icon21">\n        ', escape((46,  applabMsg.pause() )), '\n      </button>\n      <button id="continueButton" class="debugger_button">\n        <img src="', escape((49,  assetUrl('media/1x1.gif') )), '" class="continue-btn icon21">\n        ', escape((50,  applabMsg.continue() )), '\n      </button>\n      <button id="stepOverButton" class="debugger_button">\n        <img src="', escape((53,  assetUrl('media/1x1.gif') )), '" class="step-over-btn icon21">\n        ', escape((54,  applabMsg.stepOver() )), '\n      </button>\n      <button id="stepOutButton" class="debugger_button">\n        <img src="', escape((57,  assetUrl('media/1x1.gif') )), '" class="step-out-btn icon21">\n        ', escape((58,  applabMsg.stepOut() )), '\n      </button>\n      <button id="stepInButton" class="debugger_button">\n        <img src="', escape((61,  assetUrl('media/1x1.gif') )), '" class="step-in-btn icon21">\n        ', escape((62,  applabMsg.stepIn() )), '\n      </button>\n    </div>\n  </div>\n  ');66; } ; buf.push('\n  ');67; if (debugConsole) { ; buf.push('\n  <div id="debug-console" class="debug-console ', escape((68,  debugButtons ? '' : 'full' )), '">\n    <div id="debug-output" class="debug-output"></div>\n    <span class="debug-input-prompt">\n      &gt;\n    </span>\n    <div contenteditable spellcheck="false" id="debug-input" class="debug-input"></div>\n  </div>\n  ');75; } ; buf.push('\n</div>\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"../locale":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/locale.js","./locale":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/locale.js","ejs":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/ejs/lib/ejs.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/dropletConfig.js":[function(require,module,exports){
'use strict';

var api = require('./api');
var dontMarshalApi = require('./dontMarshalApi');
var consoleApi = require('./consoleApi');
var showAssetManager = require('../applab/assetManagement/show.js');
var ChartApi = require('./ChartApi');
var elementUtils = require('./designElements/elementUtils');

var applabConstants = require('./constants');

var DEFAULT_WIDTH = "320";
var DEFAULT_HEIGHT = (480 - applabConstants.FOOTER_HEIGHT).toString();

// Flip the argument order so we can bind `typeFilter`.
function chooseAsset(typeFilter, callback) {
  showAssetManager(callback, typeFilter);
}

var COLOR_LIGHT_GREEN = '#D3E965';
var COLOR_BLUE = '#19C3E1';
var COLOR_RED = '#F78183';
var COLOR_CYAN = '#4DD0E1';
var COLOR_YELLOW = '#FFF176';

/**
 * Generate a list of screen ids for our setScreen dropdown
 */
function getScreenIds() {
  var ret = $("#designModeViz .screen").map(function () {
    return '"' + elementUtils.getId(this) + '"';
  });

  // Convert from jQuery's array-like object to a true array
  return $.makeArray(ret);
}

// NOTE : format of blocks detailed at top of apps/src/dropletUtils.js

module.exports.blocks = [{ func: 'onEvent', parent: api, category: 'UI controls', paletteParams: ['id', 'type', 'callback'], params: ['"id"', '"click"', "function(event) {\n  \n}"], dropdown: { 0: function _() {
      return Applab.getIdDropdown();
    }, 1: ['"click"', '"change"', '"keyup"', '"keydown"', '"keypress"', '"mousemove"', '"mousedown"', '"mouseup"', '"mouseover"', '"mouseout"', '"input"'] } }, { func: 'button', parent: api, category: 'UI controls', paletteParams: ['id', 'text'], params: ['"id"', '"text"'] }, { func: 'textInput', parent: api, category: 'UI controls', paletteParams: ['id', 'text'], params: ['"id"', '"text"'] }, { func: 'textLabel', parent: api, category: 'UI controls', paletteParams: ['id', 'text', 'forId'], params: ['"id"', '"text"'] }, { func: 'dropdown', parent: api, category: 'UI controls', paletteParams: ['id', 'option1', 'etc'], params: ['"id"', '"option1"', '"etc"'] }, { func: 'getText', parent: api, category: 'UI controls', paletteParams: ['id'], params: ['"id"'], dropdown: { 0: function _() {
      return Applab.getIdDropdown();
    } }, type: 'value' }, { func: 'setText', parent: api, category: 'UI controls', paletteParams: ['id', 'text'], params: ['"id"', '"text"'], dropdown: { 0: function _() {
      return Applab.getIdDropdown();
    } } }, { func: 'checkbox', parent: api, category: 'UI controls', paletteParams: ['id', 'checked'], params: ['"id"', "false"], dropdown: { 1: ["true", "false"] } }, { func: 'radioButton', parent: api, category: 'UI controls', paletteParams: ['id', 'checked'], params: ['"id"', "false", '"group"'], dropdown: { 1: ["true", "false"] } }, { func: 'getChecked', parent: api, category: 'UI controls', paletteParams: ['id'], params: ['"id"'], type: 'value' }, { func: 'setChecked', parent: api, category: 'UI controls', paletteParams: ['id', 'checked'], params: ['"id"', "true"], dropdown: { 1: ["true", "false"] } }, { func: 'image', parent: api, category: 'UI controls', paletteParams: ['id', 'url'], params: ['"id"', '"https://code.org/images/logo.png"'], dropdown: { 1: function _() {
      return Applab.getAssetDropdown('image');
    } }, 'assetTooltip': { 1: chooseAsset.bind(null, 'image') } }, { func: 'getImageURL', parent: api, category: 'UI controls', paletteParams: ['id'], params: ['"id"'], dropdown: { 0: function _() {
      return Applab.getIdDropdown("img");
    } }, type: 'value' }, { func: 'setImageURL', parent: api, category: 'UI controls', paletteParams: ['id', 'url'], params: ['"id"', '"https://code.org/images/logo.png"'], dropdown: { 0: function _() {
      return Applab.getIdDropdown("img");
    }, 1: function _() {
      return Applab.getAssetDropdown('image');
    } }, 'assetTooltip': { 1: chooseAsset.bind(null, 'image') } }, { func: 'playSound', parent: api, category: 'UI controls', paletteParams: ['url'], params: ['"https://studio.code.org/blockly/media/skins/studio/1_goal.mp3"'], dropdown: { 0: function _() {
      return Applab.getAssetDropdown('audio');
    } }, 'assetTooltip': { 0: chooseAsset.bind(null, 'audio') } }, { func: 'showElement', parent: api, category: 'UI controls', paletteParams: ['id'], params: ['"id"'], dropdown: { 0: function _() {
      return Applab.getIdDropdown();
    } } }, { func: 'hideElement', parent: api, category: 'UI controls', paletteParams: ['id'], params: ['"id"'], dropdown: { 0: function _() {
      return Applab.getIdDropdown();
    } } }, { func: 'deleteElement', parent: api, category: 'UI controls', paletteParams: ['id'], params: ['"id"'], dropdown: { 0: function _() {
      return Applab.getIdDropdown();
    } } }, { func: 'setPosition', parent: api, category: 'UI controls', paletteParams: ['id', 'x', 'y', 'width', 'height'], params: ['"id"', "0", "0", "100", "100"], dropdown: { 0: function _() {
      return Applab.getIdDropdown();
    } } }, { func: 'setSize', parent: api, category: 'UI controls', paletteParams: ['id', 'width', 'height'], params: ['"id"', "100", "100"], dropdown: { 0: function _() {
      return Applab.getIdDropdown();
    } } }, { func: 'write', parent: api, category: 'UI controls', paletteParams: ['text'], params: ['"text"'] }, { func: 'getXPosition', parent: api, category: 'UI controls', paletteParams: ['id'], params: ['"id"'], dropdown: { 0: function _() {
      return Applab.getIdDropdown();
    } }, type: 'value' }, { func: 'getYPosition', parent: api, category: 'UI controls', paletteParams: ['id'], params: ['"id"'], dropdown: { 0: function _() {
      return Applab.getIdDropdown();
    } }, type: 'value' }, { func: 'setScreen', parent: api, category: 'UI controls', paletteParams: ['screenId'], params: ['"screen1"'], dropdown: { 0: getScreenIds } }, { func: 'createCanvas', parent: api, category: 'Canvas', paletteParams: ['id', 'width', 'height'], params: ['"id"', DEFAULT_WIDTH, DEFAULT_HEIGHT] }, { func: 'setActiveCanvas', parent: api, category: 'Canvas', paletteParams: ['id'], params: ['"id"'], dropdown: { 0: function _() {
      return Applab.getIdDropdown("canvas");
    } } }, { func: 'line', parent: api, category: 'Canvas', paletteParams: ['x1', 'y1', 'x2', 'y2'], params: ["0", "0", "160", "240"] }, { func: 'circle', parent: api, category: 'Canvas', paletteParams: ['x', 'y', 'radius'], params: ["160", "240", "100"] }, { func: 'rect', parent: api, category: 'Canvas', paletteParams: ['x', 'y', 'width', 'height'], params: ["80", "120", "160", "240"] }, { func: 'setStrokeWidth', parent: api, category: 'Canvas', paletteParams: ['width'], params: ["3"] }, { func: 'setStrokeColor', parent: api, category: 'Canvas', paletteParams: ['color'], params: ['"red"'], dropdown: { 0: ['"red"', '"rgb(255,0,0)"', '"rgba(255,0,0,0.5)"', '"#FF0000"'] } }, { func: 'setFillColor', parent: api, category: 'Canvas', paletteParams: ['color'], params: ['"yellow"'], dropdown: { 0: ['"yellow"', '"rgb(255,255,0)"', '"rgba(255,255,0,0.5)"', '"#FFFF00"'] } },
// drawImage has been deprecated in favor of drawImageURL
{ func: 'drawImage', parent: api, category: 'Canvas', paletteParams: ['id', 'x', 'y'], params: ['"id"', "0", "0"], dropdown: { 0: function _() {
      return Applab.getIdDropdown("img");
    } }, noAutocomplete: true }, { func: 'drawImageURL', parent: api, category: 'Canvas', paletteParams: ['url'], params: ['"https://code.org/images/logo.png"'] }, { func: 'getImageData', parent: api, category: 'Canvas', paletteParams: ['x', 'y', 'width', 'height'], params: ["0", "0", DEFAULT_WIDTH, DEFAULT_HEIGHT], type: 'value' }, { func: 'putImageData', parent: api, category: 'Canvas', paletteParams: ['imgData', 'x', 'y'], params: ["imgData", "0", "0"] }, { func: 'clearCanvas', parent: api, category: 'Canvas' }, { func: 'getRed', parent: dontMarshalApi, category: 'Canvas', paletteParams: ['imgData', 'x', 'y'], params: ["imgData", "0", "0"], type: 'value', dontMarshal: true }, { func: 'getGreen', parent: dontMarshalApi, category: 'Canvas', paletteParams: ['imgData', 'x', 'y'], params: ["imgData", "0", "0"], type: 'value', dontMarshal: true }, { func: 'getBlue', parent: dontMarshalApi, category: 'Canvas', paletteParams: ['imgData', 'x', 'y'], params: ["imgData", "0", "0"], type: 'value', dontMarshal: true }, { func: 'getAlpha', parent: dontMarshalApi, category: 'Canvas', paletteParams: ['imgData', 'x', 'y'], params: ["imgData", "0", "0"], type: 'value', dontMarshal: true }, { func: 'setRed', parent: dontMarshalApi, category: 'Canvas', paletteParams: ['imgData', 'x', 'y', 'r'], params: ["imgData", "0", "0", "255"], dontMarshal: true }, { func: 'setGreen', parent: dontMarshalApi, category: 'Canvas', paletteParams: ['imgData', 'x', 'y', 'g'], params: ["imgData", "0", "0", "255"], dontMarshal: true }, { func: 'setBlue', parent: dontMarshalApi, category: 'Canvas', paletteParams: ['imgData', 'x', 'y', 'b'], params: ["imgData", "0", "0", "255"], dontMarshal: true }, { func: 'setAlpha', parent: dontMarshalApi, category: 'Canvas', paletteParams: ['imgData', 'x', 'y', 'a'], params: ["imgData", "0", "0", "255"], dontMarshal: true }, { func: 'setRGB', parent: dontMarshalApi, category: 'Canvas', paletteParams: ['imgData', 'x', 'y', 'r', 'g', 'b'], params: ["imgData", "0", "0", "255", "255", "255"], dontMarshal: true }, { func: 'startWebRequest', parent: api, category: 'Data', paletteParams: ['url', 'callback'], params: ['"http://api.openweathermap.org/data/2.5/weather?q=London,uk"', "function(status, type, content) {\n  \n}"] }, { func: 'setKeyValue', parent: api, category: 'Data', paletteParams: ['key', 'value', 'callback'], params: ['"key"', '"value"', "function () {\n  \n}"] }, { func: 'getKeyValue', parent: api, category: 'Data', paletteParams: ['key', 'callback'], params: ['"key"', "function (value) {\n  \n}"] }, { func: 'createRecord', parent: api, category: 'Data', paletteParams: ['table', 'record', 'callback'], params: ['"mytable"', "{name:'Alice'}", "function(record) {\n  \n}"] }, { func: 'readRecords', parent: api, category: 'Data', paletteParams: ['table', 'terms', 'callback'], params: ['"mytable"', "{}", "function(records) {\n  for (var i =0; i < records.length; i++) {\n    textLabel('id', records[i].id + ': ' + records[i].name);\n  }\n}"] }, { func: 'updateRecord', parent: api, category: 'Data', paletteParams: ['table', 'record', 'callback'], params: ['"mytable"', "{id:1, name:'Bob'}", "function(record) {\n  \n}"] }, { func: 'deleteRecord', parent: api, category: 'Data', paletteParams: ['table', 'record', 'callback'], params: ['"mytable"', "{id:1}", "function() {\n  \n}"] }, { func: 'getUserId', parent: api, category: 'Data', type: 'value' }, { func: 'drawChartFromRecords', parent: api, category: 'Data', paletteParams: ['chartId', 'chartType', 'tableName', 'columns'], params: ['"chartId"', '"bar"', '"mytable"', '["columnOne", "columnTwo"]'], dropdown: { 0: function _() {
      return Applab.getIdDropdown(".chart");
    }, 1: ChartApi.getChartTypeDropdown } }, { func: 'moveForward', parent: api, category: 'Turtle', paletteParams: ['pixels'], params: ["25"], dropdown: { 0: ["25", "50", "100", "200"] } }, { func: 'moveBackward', parent: api, category: 'Turtle', paletteParams: ['pixels'], params: ["25"], dropdown: { 0: ["25", "50", "100", "200"] } }, { func: 'move', parent: api, category: 'Turtle', paletteParams: ['x', 'y'], params: ["25", "25"], dropdown: { 0: ["25", "50", "100", "200"], 1: ["25", "50", "100", "200"] } }, { func: 'moveTo', parent: api, category: 'Turtle', paletteParams: ['x', 'y'], params: ["0", "0"] }, { func: 'dot', parent: api, category: 'Turtle', paletteParams: ['radius'], params: ["5"], dropdown: { 0: ["1", "5", "10"] } }, { func: 'turnRight', parent: api, category: 'Turtle', paletteParams: ['angle'], params: ["90"], dropdown: { 0: ["30", "45", "60", "90"] } }, { func: 'turnLeft', parent: api, category: 'Turtle', paletteParams: ['angle'], params: ["90"], dropdown: { 0: ["30", "45", "60", "90"] } }, { func: 'turnTo', parent: api, category: 'Turtle', paletteParams: ['angle'], params: ["0"], dropdown: { 0: ["0", "90", "180", "270"] } }, { func: 'arcRight', parent: api, category: 'Turtle', paletteParams: ['angle', 'radius'], params: ["90", "25"], dropdown: { 0: ["30", "45", "60", "90"], 1: ["25", "50", "100", "200"] } }, { func: 'arcLeft', parent: api, category: 'Turtle', paletteParams: ['angle', 'radius'], params: ["90", "25"], dropdown: { 0: ["30", "45", "60", "90"], 1: ["25", "50", "100", "200"] } }, { func: 'getX', parent: api, category: 'Turtle', type: 'value' }, { func: 'getY', parent: api, category: 'Turtle', type: 'value' }, { func: 'getDirection', parent: api, category: 'Turtle', type: 'value' }, { func: 'penUp', parent: api, category: 'Turtle' }, { func: 'penDown', parent: api, category: 'Turtle' }, { func: 'penWidth', parent: api, category: 'Turtle', paletteParams: ['width'], params: ["3"], dropdown: { 0: ["1", "3", "5"] } }, { func: 'penColor', parent: api, category: 'Turtle', paletteParams: ['color'], params: ['"red"'], dropdown: { 0: ['"red"', '"rgb(255,0,0)"', '"rgba(255,0,0,0.5)"', '"#FF0000"'] } }, { func: 'penRGB', parent: api, category: 'Turtle', paletteParams: ['r', 'g', 'b'], params: ["120", "180", "200"] }, { func: 'show', parent: api, category: 'Turtle' }, { func: 'hide', parent: api, category: 'Turtle' }, { func: 'speed', parent: api, category: 'Turtle', paletteParams: ['value'], params: ["50"], dropdown: { 0: ["25", "50", "75", "100"] } }, { func: 'setTimeout', parent: api, category: 'Control', type: 'either', paletteParams: ['callback', 'ms'], params: ["function() {\n  \n}", "1000"] }, { func: 'clearTimeout', parent: api, category: 'Control', paletteParams: ['__'], params: ["__"] }, { func: 'setInterval', parent: api, category: 'Control', type: 'either', paletteParams: ['callback', 'ms'], params: ["function() {\n  \n}", "1000"] }, { func: 'clearInterval', parent: api, category: 'Control', paletteParams: ['__'], params: ["__"] }, { func: 'console.log', parent: consoleApi, category: 'Variables', paletteParams: ['message'], params: ['"message"'] }, { func: 'declareAssign_str_hello_world', block: 'var str = "Hello World";', category: 'Variables', noAutocomplete: true }, { func: 'substring', blockPrefix: 'str.substring', category: 'Variables', paletteParams: ['start', 'end'], params: ["6", "11"], modeOptionName: '*.substring', type: 'value' }, { func: 'indexOf', blockPrefix: 'str.indexOf', category: 'Variables', paletteParams: ['searchValue'], params: ['"World"'], modeOptionName: '*.indexOf', type: 'value' }, { func: 'includes', blockPrefix: 'str.includes', category: 'Variables', paletteParams: ['searchValue'], params: ['"World"'], modeOptionName: '*.includes', type: 'value' }, { func: 'length', block: 'str.length', category: 'Variables', modeOptionName: '*.length' }, { func: 'toUpperCase', blockPrefix: 'str.toUpperCase', category: 'Variables', modeOptionName: '*.toUpperCase', type: 'value' }, { func: 'toLowerCase', blockPrefix: 'str.toLowerCase', category: 'Variables', modeOptionName: '*.toLowerCase', type: 'value' }, { func: 'declareAssign_list_abd', block: 'var list = ["a", "b", "d"];', category: 'Variables', noAutocomplete: true }, { func: 'listLength', block: 'list.length', category: 'Variables', noAutocomplete: true }, { func: 'insertItem', parent: dontMarshalApi, category: 'Variables', paletteParams: ['list', 'index', 'item'], params: ["list", "2", '"c"'], dontMarshal: true }, { func: 'appendItem', parent: dontMarshalApi, category: 'Variables', paletteParams: ['list', 'item'], params: ["list", '"f"'], dontMarshal: true }, { func: 'removeItem', parent: dontMarshalApi, category: 'Variables', paletteParams: ['list', 'index'], params: ["list", "0"], dontMarshal: true }, { func: 'imageUploadButton', parent: api, category: 'Advanced', params: ['"id"', '"text"'] }, { func: 'container', parent: api, category: 'Advanced', params: ['"id"', '"html"'] }, { func: 'innerHTML', parent: api, category: 'Advanced', params: ['"id"', '"html"'] }, { func: 'setParent', parent: api, category: 'Advanced', params: ['"id"', '"parentId"'] }, { func: 'setStyle', parent: api, category: 'Advanced', params: ['"id"', '"color:red;"'] }, { func: 'getAttribute', parent: api, category: 'Advanced', params: ['"id"', '"scrollHeight"'], type: 'value' }, { func: 'setAttribute', parent: api, category: 'Advanced', params: ['"id"', '"scrollHeight"', "200"] }];

module.exports.categories = {
  'UI controls': {
    color: 'yellow',
    rgb: COLOR_YELLOW,
    blocks: []
  },
  Canvas: {
    color: 'red',
    rgb: COLOR_RED,
    blocks: []
  },
  Data: {
    color: 'lightgreen',
    rgb: COLOR_LIGHT_GREEN,
    blocks: []
  },
  Turtle: {
    color: 'cyan',
    rgb: COLOR_CYAN,
    blocks: []
  },
  Advanced: {
    color: 'blue',
    rgb: COLOR_BLUE,
    blocks: []
  }
};

/*
 * Set the showExamplesLink config value so that the droplet tooltips will show
 * an 'Examples' link that opens documentation in a lightbox:
 */
module.exports.showExamplesLink = true;

},{"../applab/assetManagement/show.js":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/assetManagement/show.js","./ChartApi":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/ChartApi.js","./api":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/api.js","./consoleApi":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/consoleApi.js","./constants":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/constants.js","./designElements/elementUtils":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/elementUtils.js","./dontMarshalApi":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/dontMarshalApi.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/consoleApi.js":[function(require,module,exports){
'use strict';

var codegen = require('../codegen');
var vsprintf = require('./sprintf').vsprintf;
var errorHandler = require('./errorHandler');
var outputApplabConsole = errorHandler.outputApplabConsole;

var consoleApi = module.exports;

consoleApi.log = function () {
  var nativeArgs = Array.prototype.map.call(arguments, function (item) {
    if (item === null || item === undefined) {
      return item;
    }
    return codegen.marshalInterpreterToNative(Applab.JSInterpreter.interpreter, item);
  });

  var output = '';
  var firstArg = nativeArgs[0];
  if (typeof firstArg === 'string' || firstArg instanceof String) {
    output = vsprintf(firstArg, nativeArgs.slice(1));
  } else if (nativeArgs.length === 1) {
    output = firstArg;
  } else {
    for (var i = 0; i < nativeArgs.length; i++) {
      output += JSON.stringify(nativeArgs[i]);
      if (i < nativeArgs.length - 1) {
        output += '\n';
      }
    }
  }
  outputApplabConsole(output);
};

},{"../codegen":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/codegen.js","./errorHandler":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/errorHandler.js","./sprintf":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/sprintf.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/sprintf.js":[function(require,module,exports){
/*jshint asi:true */
/*jshint -W064 */

//
// Extracted from https://github.com/alexei/sprintf.js
//
// Copyright (c) 2007-2014, Alexandru Marasteanu <hello [at) alexei (dot] ro>
// All rights reserved.
//
// Current as of 10/30/14
// commit c3ac006aff511dda804589af8f5b3c0d5da5afb1
//

"use strict";

var re = {
    not_string: /[^s]/,
    number: /[dief]/,
    text: /^[^\x25]+/,
    modulo: /^\x25{2}/,
    placeholder: /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fiosuxX])/,
    key: /^([a-z_][a-z_\d]*)/i,
    key_access: /^\.([a-z_][a-z_\d]*)/i,
    index_access: /^\[(\d+)\]/,
    sign: /^[\+\-]/
};

function sprintf() {
    var key = arguments[0],
        cache = sprintf.cache;
    if (!(cache[key] && cache.hasOwnProperty(key))) {
        cache[key] = sprintf.parse(key);
    }
    return sprintf.format.call(null, cache[key], arguments);
}

sprintf.format = function (parse_tree, argv) {
    var cursor = 1,
        tree_length = parse_tree.length,
        node_type = "",
        arg,
        output = [],
        i,
        k,
        match,
        pad,
        pad_character,
        pad_length,
        is_positive = true,
        sign = "";
    for (i = 0; i < tree_length; i++) {
        node_type = get_type(parse_tree[i]);
        if (node_type === "string") {
            output[output.length] = parse_tree[i];
        } else if (node_type === "array") {
            match = parse_tree[i]; // convenience purposes only
            if (match[2]) {
                // keyword argument
                arg = argv[cursor];
                for (k = 0; k < match[2].length; k++) {
                    if (!arg.hasOwnProperty(match[2][k])) {
                        throw new Error(sprintf("[sprintf] property '%s' does not exist", match[2][k]));
                    }
                    arg = arg[match[2][k]];
                }
            } else if (match[1]) {
                // positional argument (explicit)
                arg = argv[match[1]];
            } else {
                // positional argument (implicit)
                arg = argv[cursor++];
            }

            if (get_type(arg) == "function") {
                arg = arg();
            }

            if (re.not_string.test(match[8]) && (get_type(arg) != "number" && isNaN(arg))) {
                throw new TypeError(sprintf("[sprintf] expecting number but found %s", get_type(arg)));
            }

            if (re.number.test(match[8])) {
                is_positive = arg >= 0;
            }

            switch (match[8]) {
                case "b":
                    arg = arg.toString(2);
                    break;
                case "c":
                    arg = String.fromCharCode(arg);
                    break;
                case "d":
                case "i":
                    arg = parseInt(arg, 10);
                    break;
                case "e":
                    arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential();
                    break;
                case "f":
                    arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg);
                    break;
                case "o":
                    arg = arg.toString(8);
                    break;
                case "s":
                    arg = (arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg;
                    break;
                case "u":
                    arg = arg >>> 0;
                    break;
                case "x":
                    arg = arg.toString(16);
                    break;
                case "X":
                    arg = arg.toString(16).toUpperCase();
                    break;
            }
            if (re.number.test(match[8]) && (!is_positive || match[3])) {
                sign = is_positive ? "+" : "-";
                arg = arg.toString().replace(re.sign, "");
            } else {
                sign = "";
            }
            pad_character = match[4] ? match[4] === "0" ? "0" : match[4].charAt(1) : " ";
            pad_length = match[6] - (sign + arg).length;
            pad = match[6] ? pad_length > 0 ? str_repeat(pad_character, pad_length) : "" : "";
            output[output.length] = match[5] ? sign + arg + pad : pad_character === "0" ? sign + pad + arg : pad + sign + arg;
        }
    }
    return output.join("");
};

sprintf.cache = {};

sprintf.parse = function (fmt) {
    var _fmt = fmt,
        match = [],
        parse_tree = [],
        arg_names = 0;
    while (_fmt) {
        if ((match = re.text.exec(_fmt)) !== null) {
            parse_tree[parse_tree.length] = match[0];
        } else if ((match = re.modulo.exec(_fmt)) !== null) {
            parse_tree[parse_tree.length] = "%";
        } else if ((match = re.placeholder.exec(_fmt)) !== null) {
            if (match[2]) {
                arg_names |= 1;
                var field_list = [],
                    replacement_field = match[2],
                    field_match = [];
                if ((field_match = re.key.exec(replacement_field)) !== null) {
                    field_list[field_list.length] = field_match[1];
                    while ((replacement_field = replacement_field.substring(field_match[0].length)) !== "") {
                        if ((field_match = re.key_access.exec(replacement_field)) !== null) {
                            field_list[field_list.length] = field_match[1];
                        } else if ((field_match = re.index_access.exec(replacement_field)) !== null) {
                            field_list[field_list.length] = field_match[1];
                        } else {
                            throw new SyntaxError("[sprintf] failed to parse named argument key");
                        }
                    }
                } else {
                    throw new SyntaxError("[sprintf] failed to parse named argument key");
                }
                match[2] = field_list;
            } else {
                arg_names |= 2;
            }
            if (arg_names === 3) {
                throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");
            }
            parse_tree[parse_tree.length] = match;
        } else {
            throw new SyntaxError("[sprintf] unexpected placeholder");
        }
        _fmt = _fmt.substring(match[0].length);
    }
    return parse_tree;
};

var vsprintf = function vsprintf(fmt, argv, _argv) {
    _argv = (argv || []).slice(0);
    _argv.splice(0, 0, fmt);
    return sprintf.apply(null, _argv);
};

/**
 * helpers
 */
function get_type(variable) {
    return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();
}

function str_repeat(input, multiplier) {
    return Array(multiplier + 1).join(input);
}

module.exports = {
    vsprintf: vsprintf
};

},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/dontMarshalApi.js":[function(require,module,exports){
'use strict';

var errorHandler = require('./errorHandler');
var outputApplabConsole = errorHandler.outputApplabConsole;
var outputError = errorHandler.outputError;
var ErrorLevel = errorHandler.ErrorLevel;

var OPTIONAL = true;

function outputWarning(errorString) {
  var line = 1 + window.Applab.JSInterpreter.getNearestUserCodeLine();
  outputError(errorString, ErrorLevel.WARNING, line);
}

// APIs designed specifically to run on interpreter data structures without marshalling
// (valuable for performance or to support in/out parameters)
//
// dropletConfig for each of these APIs should be marked with dontMarshal:true

function dmapiValidateType(funcName, varName, varValue, expectedType, opt) {
  var properType;
  if (typeof varValue !== 'undefined') {
    if (expectedType === 'number') {
      properType = typeof varValue.data === 'number' || typeof varValue.data === 'string' && !isNaN(varValue.data);
    } else if (expectedType === 'array') {
      properType = varValue.parent == window.Applab.JSInterpreter.interpreter.ARRAY;
    } else {
      properType = typeof varValue.data === expectedType;
    }
  }
  properType = properType || opt === OPTIONAL && (varValue === window.Applab.JSInterpreter.interpreter.UNDEFINED || typeof varValue === 'undefined');
  if (!properType) {
    outputWarning(funcName + "() " + varName + " parameter value (" + varValue + ") is not a " + expectedType + ".");
  }
}

// Array functions

var getInt = function getInt(obj, def) {
  // Return an integer, or the default.
  var n = obj ? Math.floor(obj.toNumber()) : def;
  if (isNaN(n)) {
    n = def;
  }
  return n;
};

exports.insertItem = function (array, index, item) {
  dmapiValidateType('insertItem', 'list', array, 'array');
  dmapiValidateType('insertItem', 'index', index, 'number');

  index = getInt(index, 0);
  if (index < 0) {
    index = Math.max(array.length + index, 0);
  } else {
    index = Math.min(index, array.length);
  }
  // Insert item.
  for (var i = array.length - 1; i >= index; i--) {
    array.properties[i + 1] = array.properties[i];
  }
  array.length += 1;
  array.properties[index] = item;
};

exports.removeItem = function (array, index) {
  dmapiValidateType('removeItem', 'list', array, 'array');
  dmapiValidateType('removeItem', 'index', index, 'number');

  index = getInt(index, 0);
  if (index < 0) {
    index = Math.max(array.length + index, 0);
  }
  // Remove by shifting items after index downward.
  for (var i = index; i < array.length - 1; i++) {
    array.properties[i] = array.properties[i + 1];
  }
  if (index < array.length) {
    delete array.properties[array.length - 1];
    array.length -= 1;
  } else {
    // index is out of bounds (too large):
    outputWarning("removeItem() index parameter value (" + index + ") is larger than the number of items in the list (" + array.length + ").");
  }
};

exports.appendItem = function (array, item) {
  dmapiValidateType('appendItem', 'list', array, 'array');

  array.properties[array.length] = item;
  array.length++;
  return window.Applab.JSInterpreter.createPrimitive(array.length);
};

// ImageData RGB helper functions

// TODO: more parameter validation (data array type, length), error output

exports.getRed = function (imageData, x, y) {
  if (imageData.properties.data && imageData.properties.width) {
    var pixelOffset = y * imageData.properties.width * 4 + x * 4;
    return imageData.properties.data.properties[pixelOffset].toNumber();
  }
};
exports.getGreen = function (imageData, x, y) {
  if (imageData.properties.data && imageData.properties.width) {
    var pixelOffset = y * imageData.properties.width * 4 + x * 4;
    return imageData.properties.data.properties[pixelOffset + 1].toNumber();
  }
};
exports.getBlue = function (imageData, x, y) {
  if (imageData.properties.data && imageData.properties.width) {
    var pixelOffset = y * imageData.properties.width * 4 + x * 4;
    return imageData.properties.data.properties[pixelOffset + 2].toNumber();
  }
};
exports.getAlpha = function (imageData, x, y) {
  if (imageData.properties.data && imageData.properties.width) {
    var pixelOffset = y * imageData.properties.width * 4 + x * 4;
    return imageData.properties.data.properties[pixelOffset + 3].toNumber();
  }
};

exports.setRed = function (imageData, x, y, value) {
  if (imageData.properties.data && imageData.properties.width) {
    var pixelOffset = y * imageData.properties.width * 4 + x * 4;
    imageData.properties.data.properties[pixelOffset] = value;
  }
};
exports.setGreen = function (imageData, x, y, value) {
  if (imageData.properties.data && imageData.properties.width) {
    var pixelOffset = y * imageData.properties.width * 4 + x * 4;
    imageData.properties.data.properties[pixelOffset + 1] = value;
  }
};
exports.setBlue = function (imageData, x, y, value) {
  if (imageData.properties.data && imageData.properties.width) {
    var pixelOffset = y * imageData.properties.width * 4 + x * 4;
    imageData.properties.data.properties[pixelOffset + 2] = value;
  }
};
exports.setAlpha = function (imageData, x, y, value) {
  if (imageData.properties.data && imageData.properties.width) {
    var pixelOffset = y * imageData.properties.width * 4 + x * 4;
    imageData.properties.data.properties[pixelOffset + 3] = value;
  }
};
exports.setRGB = function (imageData, x, y, r, g, b, a) {
  if (imageData.properties.data && imageData.properties.width) {
    var pixelOffset = y * imageData.properties.width * 4 + x * 4;
    imageData.properties.data.properties[pixelOffset] = r;
    imageData.properties.data.properties[pixelOffset + 1] = g;
    imageData.properties.data.properties[pixelOffset + 2] = b;
    imageData.properties.data.properties[pixelOffset + 3] = typeof a === 'undefined' ? window.Applab.JSInterpreter.createPrimitive(255) : a;
  }
};

},{"./errorHandler":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/errorHandler.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designMode.js":[function(require,module,exports){
/* global Applab, dashboard */

// TODO (brent) - make it so that we dont need to specify .jsx. This currently
// works in our grunt build, but not in tests
'use strict';

var DesignWorkspace = require('./DesignWorkspace.jsx');
var DesignToggleRow = require('./DesignToggleRow.jsx');
var showAssetManager = require('./assetManagement/show.js');
var elementLibrary = require('./designElements/library');
var elementUtils = require('./designElements/elementUtils');
var studioApp = require('../StudioApp').singleton;
var KeyCodes = require('../constants').KeyCodes;

var designMode = module.exports;

var currentlyEditedElement = null;
var currentScreenId = null;

var GRID_SIZE = 5;

/**
 * If in design mode and program is not running, display Properties
 * pane for editing the clicked element.
 * @param event
 */
designMode.onDesignModeVizClick = function (event) {
  if (!Applab.isInDesignMode() || $('#resetButton').is(':visible')) {
    return;
  }
  event.preventDefault();

  var element = event.target;
  if (element.id === 'designModeViz') {
    element = designMode.activeScreen();
  }

  if ($(element).is('.ui-resizable')) {
    element = getInnerElement(element);
  } else if ($(element).is('.ui-resizable-handle')) {
    element = getInnerElement(element.parentNode);
  }
  // give the div focus so that we can listen for keyboard events
  $("#designModeViz").focus();
  designMode.editElementProperties(element);
};

/**
 * @returns {HTMLElement} The currently visible screen element.
 */
designMode.activeScreen = function () {
  return $('#designModeViz .screen').filter(function () {
    return this.style.display !== 'none';
  }).first()[0];
};

/**
 * Create a new element of the specified type within the play space.
 * @param {ElementType} elementType Type of element to create
 * @param {number} left Position from left.
 * @param {number} top Position from top.
 * @returns {HTMLElement} The generated element
 */
designMode.createElement = function (elementType, left, top) {
  var element = elementLibrary.createElement(elementType, left, top);

  var parent;
  var isScreen = $(element).hasClass('screen');
  if (isScreen) {
    parent = document.getElementById('designModeViz');
  } else {
    parent = designMode.activeScreen();
  }
  parent.appendChild(element);

  if (!isScreen) {
    makeDraggable($(element));
  }
  designMode.editElementProperties(element);

  return element;
};

designMode.editElementProperties = function (element) {
  var designPropertiesElement = document.getElementById('design-properties');
  if (!designPropertiesElement) {
    // design-properties won't exist when !user.isAdmin
    return;
  }

  highlightElement(element);

  currentlyEditedElement = element;
  designMode.renderDesignWorkspace(element);
};

/**
 * Loads the current element or current screen into the property tab.
 * Also makes sure we re-render design mode to update properties such as isDimmed.
 */
designMode.resetPropertyTab = function () {
  var element = currentlyEditedElement || designMode.activeScreen();
  designMode.editElementProperties(element);
};

/**
 * Enable (or disable) dragging of new elements from the element tray
 * @param allowEditing {boolean}
 */
designMode.resetElementTray = function (allowEditing) {
  $('#design-toolbox .new-design-element').each(function () {
    $(this).draggable(allowEditing ? 'enable' : 'disable');
  });
};

/**
 * Given an input value produce a valid css value that is
 * either in pixels or empty.
 */
var appendPx = function appendPx(inp) {
  return inp ? inp + 'px' : '';
};

/**
 * Handle a change from our properties table.
 * @param element {Element}
 * @param name {string}
 * @param value {string}
 */
designMode.onPropertyChange = function (element, name, value) {
  designMode.updateProperty(element, name, value);
  designMode.editElementProperties(element);
};

/**
 * After handling properties generically, give elementLibrary a chance
 * to do any element specific changes.
 * @param element
 * @param name
 * @param value
 */
designMode.updateProperty = function (element, name, value) {
  var handled = true;
  switch (name) {
    case 'id':
      elementUtils.setId(element, value);
      if (elementLibrary.getElementType(element) === elementLibrary.ElementType.SCREEN) {
        // rerender design toggle, which has a dropdown of screen ids
        designMode.changeScreen(value);
      }
      break;
    case 'left':
      var newLeft = appendPx(value);
      element.style.left = newLeft;
      element.parentNode.style.left = newLeft;
      break;
    case 'top':
      var newTop = appendPx(value);
      element.style.top = newTop;
      element.parentNode.style.top = newTop;
      break;
    case 'width':
      element.setAttribute('width', appendPx(value));
      break;
    case 'height':
      element.setAttribute('height', appendPx(value));
      break;
    case 'style-width':
      var newWidth = appendPx(value);
      element.style.width = newWidth;
      element.parentNode.style.width = newWidth;

      if (element.style.backgroundSize) {
        element.style.backgroundSize = element.style.width + ' ' + element.style.height;
      }
      break;
    case 'style-height':
      var newHeight = appendPx(value);
      element.style.height = newHeight;
      element.parentNode.style.height = newHeight;

      if (element.style.backgroundSize) {
        element.style.backgroundSize = element.style.width + ' ' + element.style.height;
      }
      break;
    case 'text':
      element.textContent = value;
      break;
    case 'textColor':
      element.style.color = value;
      break;
    case 'backgroundColor':
      element.style.backgroundColor = value;
      break;
    case 'fontSize':
      element.style.fontSize = appendPx(value);
      break;

    case 'image':
      var backgroundImage = new Image();
      var originalValue = element.getAttribute('data-canonical-image-url');
      backgroundImage.src = Applab.maybeAddAssetPathPrefix(value);
      element.style.backgroundImage = 'url(' + backgroundImage.src + ')';
      element.setAttribute('data-canonical-image-url', value);
      // do not resize if only the asset path has changed (e.g. on remix).
      if (value !== originalValue) {
        backgroundImage.onload = function () {
          element.style.backgroundSize = backgroundImage.naturalWidth + 'px ' + backgroundImage.naturalHeight + 'px';
          element.style.width = backgroundImage.naturalWidth + 'px';
          element.style.height = backgroundImage.naturalHeight + 'px';
          // Re-render properties
          if (currentlyEditedElement === element) {
            designMode.editElementProperties(element);
          }
        };
      }
      break;

    case 'screen-image':
      // We stretch the image to fit the element
      var width = parseInt(element.style.width, 10);
      var height = parseInt(element.style.height, 10);
      element.style.backgroundImage = 'url(' + Applab.maybeAddAssetPathPrefix(value) + ')';
      element.setAttribute('data-canonical-image-url', value);
      element.style.backgroundSize = width + 'px ' + height + 'px';
      break;

    case 'picture':
      originalValue = element.getAttribute('data-canonical-image-url');
      element.src = Applab.maybeAddAssetPathPrefix(value);
      element.setAttribute('data-canonical-image-url', value);
      // do not resize if only the asset path has changed (e.g. on remix).
      if (value !== originalValue) {
        element.onload = function () {
          // naturalWidth/Height aren't populated until image has loaded.
          element.style.width = element.naturalWidth + 'px';
          element.style.height = element.naturalHeight + 'px';
          if ($(element.parentNode).is('.ui-resizable')) {
            element.parentNode.style.width = element.naturalWidth + 'px';
            element.parentNode.style.height = element.naturalHeight + 'px';
          }
          // Re-render properties
          if (currentlyEditedElement === element) {
            designMode.editElementProperties(element);
          }
        };
      }
      break;
    case 'hidden':
      // Add a class that shows as 30% opacity in design mode, and invisible
      // in code mode.
      $(element).toggleClass('design-mode-hidden', value === true);
      break;
    case 'checked':
      // element.checked represents the current state, the attribute represents
      // the serialized state
      element.checked = value;

      if (value) {
        var groupName = element.getAttribute('name');
        if (groupName) {
          // Remove checked attribute from all other radio buttons in group
          var buttons = document.getElementsByName(groupName);
          Array.prototype.forEach.call(buttons, function (item) {
            if (item.type === 'radio') {
              item.removeAttribute('checked');
            }
          });
        }
        element.setAttribute('checked', 'checked');
      } else {
        element.removeAttribute('checked');
      }
      break;
    case 'options':
      // value should be an array of options in this case
      for (var i = 0; i < value.length; i++) {
        var optionElement = element.children[i];
        if (!optionElement) {
          optionElement = document.createElement('option');
          element.appendChild(optionElement);
        }
        optionElement.textContent = value[i];
      }
      // remove any extra options
      for (i = value.length; i < element.children.length; i++) {
        element.removeChild(element.children[i]);
      }
      break;
    case 'groupId':
      element.setAttribute('name', value);
      break;
    case 'placeholder':
      element.setAttribute('placeholder', value);
      break;
    case 'rows':
      element.setAttribute('rows', value);
      break;
    case 'cols':
      element.setAttribute('rows', value);
      break;
    default:
      // Mark as unhandled, but give typeSpecificPropertyChange a chance to
      // handle it
      handled = false;
  }

  if (elementLibrary.typeSpecificPropertyChange(element, name, value)) {
    handled = true;
  }

  if (!handled) {
    throw "unknown property name " + name;
  }
};

designMode.onDeletePropertiesButton = function (element, event) {
  var isScreen = $(element).hasClass('screen');
  if ($(element.parentNode).is('.ui-resizable')) {
    element = element.parentNode;
  }
  $(element).remove();

  if (isScreen) {
    designMode.loadDefaultScreen();
  } else {
    designMode.editElementProperties(elementUtils.getPrefixedElementById(currentScreenId));
  }
};

designMode.onDepthChange = function (element, depthDirection) {
  // move to outer resizable div
  var outerElement = element.parentNode;
  var parent = outerElement.parentNode;
  var index = Array.prototype.indexOf.call(parent.children, outerElement);

  if (depthDirection === 'forward' && index + 2 >= parent.children.length) {
    // We're either the last or second to last element
    depthDirection = 'toFront';
  }

  var removed;

  // TODO (brent) - use an enum?
  switch (depthDirection) {
    case 'forward':
      var twoAhead = outerElement.nextSibling.nextSibling;
      removed = parent.removeChild(outerElement);
      parent.insertBefore(removed, twoAhead);
      break;

    case 'toFront':
      removed = parent.removeChild(outerElement);
      parent.appendChild(removed);
      break;

    case 'backward':
      var previous = outerElement.previousSibling;
      if (!previous) {
        return;
      }

      removed = parent.removeChild(outerElement);
      parent.insertBefore(removed, previous);
      break;

    case 'toBack':
      if (parent.children.length === 1) {
        return;
      }
      removed = parent.removeChild(outerElement);
      parent.insertBefore(removed, parent.children[0]);
      break;

    default:
      throw new Error('unknown depthDirection: ' + depthDirection);
  }

  element.focus();
  designMode.editElementProperties(element);
};

designMode.onInsertEvent = function (code) {
  Applab.appendToEditor(code);
  $('#codeModeButton').click(); // TODO(dave): reactify / extract toggle state
};

/**/
designMode.serializeToLevelHtml = function () {
  var designModeViz = $('#designModeViz');
  // Children are screens. Want to operate on grandchildren
  var madeUndraggable = makeUndraggable(designModeViz.children().children());

  // Make a copy so that we don't affect designModeViz contents as we
  // remove prefixes from the element ids.
  var designModeVizClone = designModeViz.clone();
  designModeVizClone.children().each(function () {
    elementUtils.removeIdPrefix(this);
  });
  designModeVizClone.children().children().each(function () {
    elementUtils.removeIdPrefix(this);
  });

  var serialization = new XMLSerializer().serializeToString(designModeVizClone[0]);
  if (madeUndraggable) {
    makeDraggable(designModeViz.children().children());
  }
  Applab.levelHtml = serialization;
};

/**
 * Replace the contents of rootEl with the children of the DOM node obtained by
 * parsing Applab.levelHtml (the root node in the levelHtml is ignored).
 * @param rootEl {Element} Element whose children should be replaced.
 * @param allowDragging {boolean} Whether to make elements resizable and draggable.
 * @param prefix {string} Optional prefix to attach to element ids of children and
 *     grandchildren after parsing. Defaults to ''.
 */
designMode.parseFromLevelHtml = function (rootEl, allowDragging, prefix) {
  if (!rootEl) {
    return;
  }
  while (rootEl.firstChild) {
    rootEl.removeChild(rootEl.firstChild);
  }

  if (!Applab.levelHtml) {
    return;
  }
  var levelDom = $.parseHTML(Applab.levelHtml);
  var children = $(levelDom).children();

  children.each(function () {
    elementUtils.addIdPrefix(this, prefix);
  });
  children.children().each(function () {
    elementUtils.addIdPrefix(this, prefix);
  });

  children.appendTo(rootEl);
  if (allowDragging) {
    // children are screens. make grandchildren draggable
    makeDraggable(children.children());
  }

  children.each(function () {
    elementLibrary.onDeserialize(this, designMode.updateProperty.bind(this));
  });
  children.children().each(function () {
    var element = $(this).hasClass('ui-draggable') ? this.firstChild : this;
    elementLibrary.onDeserialize(element, designMode.updateProperty.bind(element));
  });
};

designMode.toggleDesignMode = function (enable) {
  var designWorkspace = document.getElementById('designWorkspace');
  if (!designWorkspace) {
    // Currently we don't run design mode in some circumstances (i.e. user is
    // not an admin)
    return;
  }
  designWorkspace.style.display = enable ? 'block' : 'none';

  var codeWorkspaceWrapper = document.getElementById('codeWorkspaceWrapper');
  codeWorkspaceWrapper.style.display = enable ? 'none' : 'block';

  var debugArea = document.getElementById('debug-area');
  debugArea.style.display = enable ? 'none' : 'block';

  Applab.toggleDivApplab(!enable);
};

/**
 * When we make elements resizable, we wrap them in an outer div. Given an outer
 * div, this returns the inner element
 */
function getInnerElement(outerElement) {
  // currently assume inner element is first child.
  return outerElement.children[0];
}

/**
 *
 * @param {jQuery} jqueryElements jQuery object containing DOM elements to make
 *   draggable.
 */
function makeDraggable(jqueryElements) {
  // For a non-div to be draggable & resizable it needs to be wrapped in a div.
  jqueryElements.each(function () {
    var elm = $(this);
    var wrapper = elm.wrap('<div>').parent().resizable({
      create: function create() {
        // resizable sets z-index to 90, which we don't want
        $(this).children().css('z-index', '');
      },
      resize: function resize(event, ui) {
        // Wishing for a vector maths library...

        // Customize motion according to current visualization scale.
        var scale = getVisualizationScale();
        var deltaWidth = ui.size.width - ui.originalSize.width;
        var deltaHeight = ui.size.height - ui.originalSize.height;
        var newWidth = ui.originalSize.width + deltaWidth / scale;
        var newHeight = ui.originalSize.height + deltaHeight / scale;

        // snap width/height to nearest grid increment
        newWidth = snapToGridSize(newWidth, GRID_SIZE);
        newHeight = snapToGridSize(newHeight, GRID_SIZE);

        // Bound at app edges
        var container = $('#designModeViz');
        var maxWidth = container.outerWidth() - ui.position.left;
        var maxHeight = container.outerHeight() - ui.position.top;
        newWidth = Math.min(newWidth, maxWidth);
        newWidth = Math.max(newWidth, 20);
        newHeight = Math.min(newHeight, maxHeight);
        newHeight = Math.max(newHeight, 20);

        ui.size.width = newWidth;
        ui.size.height = newHeight;
        wrapper.css({
          width: newWidth,
          height: newHeight
        });

        elm.outerWidth(wrapper.width());
        elm.outerHeight(wrapper.height());
        var element = elm[0];
        // canvas uses width/height. other elements use style.width/style.height
        var widthProperty = 'style-width';
        var heightProperty = 'style-height';
        if (element.hasAttribute('width') || element.hasAttribute('height')) {
          widthProperty = 'width';
          heightProperty = 'height';
        }
        designMode.onPropertyChange(element, widthProperty, element.style.width);
        designMode.onPropertyChange(element, heightProperty, element.style.height);

        highlightElement(elm[0]);
      }
    }).draggable({
      cancel: false, // allow buttons and inputs to be dragged
      drag: function drag(event, ui) {
        // draggables are not compatible with CSS transform-scale,
        // so adjust the position in various ways here.

        // dragging
        var scale = getVisualizationScale();
        var newLeft = ui.position.left / scale;
        var newTop = ui.position.top / scale;

        // snap top-left corner to nearest location in the grid
        newLeft = snapToGridSize(newLeft, GRID_SIZE);
        newTop = snapToGridSize(newTop, GRID_SIZE);

        // containment
        var container = $('#designModeViz');
        var maxLeft = container.outerWidth() - ui.helper.outerWidth(true);
        var maxTop = container.outerHeight() - ui.helper.outerHeight(true);
        newLeft = Math.min(newLeft, maxLeft);
        newLeft = Math.max(newLeft, 0);
        newTop = Math.min(newTop, maxTop);
        newTop = Math.max(newTop, 0);

        ui.position.left = newLeft;
        ui.position.top = newTop;

        elm.css({
          top: newTop,
          left: newLeft
        });

        designMode.renderDesignWorkspace(elm[0]);
      },
      start: function start() {
        highlightElement(elm[0]);
      }
    }).css({
      position: 'absolute',
      lineHeight: '0px'
    });

    wrapper.css({
      top: elm.css('top'),
      left: elm.css('left')
    });

    // Chrome/Safari both have issues where they don't properly render the
    // wrapper if the inner element is a div. This is a hack that causes a
    // rerender to happen in chrome
    var currHeight = wrapper.parent().height();
    wrapper.parent().height(currHeight + 1);
    wrapper.parent().height(currHeight);

    // And a hack for Safari
    if (this.tagName === 'DIV') {
      setTimeout(function () {
        wrapper.hide().show(0);
      }, 0);
    }

    elm.css('position', 'static');
  });
}

/**
 * Calculate the current visualization scale factor, as screenWidth / domWidth.
 * @returns {number}
 */
function getVisualizationScale() {
  var div = document.getElementById('designModeViz');
  return div.getBoundingClientRect().width / div.offsetWidth;
}

/**
 * Given a coordinate on either axis and a grid size, returns a coordinate
 * near the given coordinate that snaps to the given grid size.
 * @param {number} coordinate
 * @param {number} gridSize
 * @returns {number}
 */
var snapToGridSize = function snapToGridSize(coordinate, gridSize) {
  var halfGrid = gridSize / 2;
  return coordinate - ((coordinate + halfGrid) % gridSize - halfGrid);
};

/**
 * Inverse of `makeDraggable`.
 * @param {jQuery} jqueryElements jQuery object containing DOM elements to make
 *   undraggable.
 * @returns {boolean} True if we made something undraggable
 */
function makeUndraggable(jqueryElements) {
  var foundOne = false;
  jqueryElements.each(function () {
    var wrapper = $(this);
    var elm = $(getInnerElement(this));

    // Don't unwrap elements that aren't wrapped with a draggable div.
    if (!wrapper.hasClass('ui-draggable')) {
      return;
    }

    foundOne = true;

    wrapper.resizable('destroy').draggable('destroy');
    elm.css('position', 'absolute');
    elm.unwrap();
  });

  return foundOne;
}

/**
 * Highlights an element with a dashed border, removes border from all other elements
 * Must only be called on an element wrapped in a draggable div
 */
function highlightElement(element) {
  removeElementHighlights();

  if ($(element).is('#designModeViz img[src!=""], #designModeViz label')) {
    $(element).parent().css({
      outlineStyle: 'dashed',
      outlineWidth: '1px'
    });
  }
}

/**
 * Remove dashed borders from all elements
 */
function removeElementHighlights() {
  $('#designModeViz .ui-draggable').css({
    outlineStyle: '',
    outlineWidth: ''
  });
}

designMode.configureDragAndDrop = function () {
  // Allow elements to be dragged and dropped from the design mode
  // element tray to the play space.
  $('#visualization').droppable({
    accept: '.new-design-element',
    drop: function drop(event, ui) {
      var elementType = ui.draggable[0].getAttribute('data-element-type');

      var div = document.getElementById('designModeViz');
      var xScale = div.getBoundingClientRect().width / div.offsetWidth;
      var yScale = div.getBoundingClientRect().height / div.offsetHeight;

      var left = (ui.helper.offset().left - $('#designModeViz').offset().left) / xScale;
      var top = (ui.helper.offset().top - $('#designModeViz').offset().top) / yScale;

      // snap top-left corner to nearest location in the grid
      left -= (left + GRID_SIZE / 2) % GRID_SIZE - GRID_SIZE / 2;
      top -= (top + GRID_SIZE / 2) % GRID_SIZE - GRID_SIZE / 2;

      var element = designMode.createElement(elementType, left, top);
      if (elementType === elementLibrary.ElementType.SCREEN) {
        designMode.changeScreen(elementUtils.getId(element));
      }
    }
  });
};

designMode.configureDesignToggleRow = function () {
  var designToggleRow = document.getElementById('designToggleRow');
  if (!designToggleRow) {
    return;
  }

  var firstScreen = elementUtils.getId($('#designModeViz .screen')[0]);
  designMode.changeScreen(firstScreen);
};

/**
 * Create a new screen
 * @returns {string} The id of the newly created screen
 */
designMode.createScreen = function () {
  var newScreen = elementLibrary.createElement('SCREEN', 0, 0);
  $("#designModeViz").append(newScreen);

  return elementUtils.getId(newScreen);
};

/**
 * Changes the active screen by toggling all screens to be non-visible, unless
 * they match the provided screenId. Also updates our dropdown to reflect the
 * change, and opens the element property editor for the new screen.
 */
designMode.changeScreen = function (screenId) {
  currentScreenId = screenId;
  var screenIds = [];
  $('#designModeViz .screen').each(function () {
    screenIds.push(elementUtils.getId(this));
    $(this).toggle(elementUtils.getId(this) === screenId);
  });

  var designToggleRow = document.getElementById('designToggleRow');
  if (designToggleRow) {
    React.render(React.createElement(DesignToggleRow, {
      hideToggle: Applab.hideDesignModeToggle(),
      hideViewDataButton: Applab.hideViewDataButton(),
      startInDesignMode: Applab.startInDesignMode(),
      initialScreen: screenId,
      screens: screenIds,
      onDesignModeButton: Applab.onDesignModeButton,
      onCodeModeButton: Applab.onCodeModeButton,
      onViewDataButton: Applab.onViewData,
      onScreenChange: designMode.changeScreen,
      onScreenCreate: designMode.createScreen
    }), designToggleRow);
  }

  designMode.editElementProperties(elementUtils.getPrefixedElementById(screenId));
};

designMode.getCurrentScreenId = function () {
  return currentScreenId;
};

/**
 * Load our default screen (ie. the first one in the DOM), creating a screen
 * if we have none.
 */
designMode.loadDefaultScreen = function () {
  var defaultScreen;
  if ($('#designModeViz .screen').length === 0) {
    defaultScreen = designMode.createScreen();
  } else {
    defaultScreen = elementUtils.getId($('#designModeViz .screen')[0]);
  }
  designMode.changeScreen(defaultScreen);
};

designMode.renderDesignWorkspace = function (element) {
  var designWorkspace = document.getElementById('designWorkspace');
  if (!designWorkspace) {
    return;
  }

  var props = {
    handleDragStart: function handleDragStart() {
      if ($('#resetButton').is(':visible')) {
        studioApp.resetButtonClick();
      }
    },
    element: element || null,
    handleChange: designMode.onPropertyChange.bind(this, element),
    onDepthChange: designMode.onDepthChange,
    onDelete: designMode.onDeletePropertiesButton.bind(this, element),
    onInsertEvent: designMode.onInsertEvent.bind(this),
    handleManageAssets: showAssetManager,
    isDimmed: Applab.running
  };
  React.render(React.createElement(DesignWorkspace, props), designWorkspace);
};

/**
 * Early versions of applab didn't have screens, and instead all elements
 * existed under the root div. If we find one of those, convert it to be a single
 * screen app.
 */
designMode.addScreenIfNecessary = function (html) {
  var rootDiv = $(html);
  if (rootDiv.children().length === 0 || rootDiv.children().eq(0).hasClass('screen')) {
    // no children, or first child is a screen
    return html;
  }

  var screenElement = elementLibrary.createElement(elementLibrary.ElementType.SCREEN);
  rootDiv.children().appendTo(screenElement);
  rootDiv.append(screenElement);

  return rootDiv[0].outerHTML;
};

designMode.addKeyboardHandlers = function () {
  $('#designModeViz').keydown(function (event) {
    if (!Applab.isInDesignMode() || Applab.isRunning()) {
      return;
    }
    if (!currentlyEditedElement || $(currentlyEditedElement).hasClass('screen')) {
      return;
    }

    var current, property, newValue;

    switch (event.which) {
      case KeyCodes.LEFT:
        current = parseInt(currentlyEditedElement.style.left, 10);
        newValue = current - 1;
        property = 'left';
        break;
      case KeyCodes.RIGHT:
        current = parseInt(currentlyEditedElement.style.left, 10);
        newValue = current + 1;
        property = 'left';
        break;
      case KeyCodes.UP:
        current = parseInt(currentlyEditedElement.style.top, 10);
        newValue = current - 1;
        property = 'top';
        break;
      case KeyCodes.DOWN:
        current = parseInt(currentlyEditedElement.style.top, 10);
        newValue = current + 1;
        property = 'top';
        break;
      default:
        return;
    }
    designMode.onPropertyChange(currentlyEditedElement, property, newValue);
  });
};

designMode.resetIds = function () {
  elementLibrary.resetIds();
};

},{"../StudioApp":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/StudioApp.js","../constants":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/constants.js","./DesignToggleRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/DesignToggleRow.jsx","./DesignWorkspace.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/DesignWorkspace.jsx","./assetManagement/show.js":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/assetManagement/show.js","./designElements/elementUtils":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/elementUtils.js","./designElements/library":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/library.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/controls.html.ejs":[function(require,module,exports){
module.exports= (function() {
  var t = function anonymous(locals, filters, escape
/**/) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!\w+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1;
  var msg = require('../locale');
; buf.push('\n');4; // Comment so this file is not identical to studio/controls.html.ejs 
; buf.push('\n\n<div id="soft-buttons" class="soft-buttons-none">\n  <button id="leftButton" disabled=true class="arrow">\n    <img src="', escape((8,  assetUrl('media/1x1.gif') )), '" class="left-btn icon21">\n  </button>\n  <button id="rightButton" disabled=true class="arrow">\n    <img src="', escape((11,  assetUrl('media/1x1.gif') )), '" class="right-btn icon21">\n  </button>\n  <button id="upButton" disabled=true class="arrow">\n    <img src="', escape((14,  assetUrl('media/1x1.gif') )), '" class="up-btn icon21">\n  </button>\n  <button id="downButton" disabled=true class="arrow">\n    <img src="', escape((17,  assetUrl('media/1x1.gif') )), '" class="down-btn icon21">\n  </button>\n</div>\n\n');21; if (finishButton) { ; buf.push('\n  <div id="share-cell" class="share-cell-none">\n    <button id="finishButton" class="share">\n      <img src="', escape((24,  assetUrl('media/1x1.gif') )), '">', escape((24,  msg.finish() )), '\n    </button>\n  </div>\n');27; } ; buf.push('\n\n');29; if (submitButton) { ; buf.push('\n  <div id="share-cell" class="share-cell-none">\n    <button id="submitButton" class="share">\n      <img src="', escape((32,  assetUrl('media/1x1.gif') )), '">', escape((32,  msg.submit() )), '\n    </button>\n  </div>\n');35; } ; buf.push('\n\n');37; if (unsubmitButton) { ; buf.push('\n  <div id="share-cell" class="share-cell-enabled">\n    <button id="unsubmitButton" class="share">\n      <img src="', escape((40,  assetUrl('media/1x1.gif') )), '">', escape((40,  msg.unsubmit() )), '\n    </button>\n  </div>\n');43; } ; buf.push('\n'); })();
} 
return buf.join('');
};
  return function(locals) {
    return t(locals, require("ejs").filters);
  }
}());
},{"../locale":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/locale.js","ejs":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/ejs/lib/ejs.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/blocks.js":[function(require,module,exports){
/**
 * CodeOrgApp: Applab
 *
 * Copyright 2014-2015 Code.org
 *
 */
'use strict';

var msg = require('./locale');
var commonMsg = require('../locale');
var codegen = require('../codegen');
var utils = require('../utils');
var _ = utils.getLodash();

var RANDOM_VALUE = 'random';
var HIDDEN_VALUE = '"hidden"';
var CLICK_VALUE = '"click"';
var VISIBLE_VALUE = '"visible"';

var generateSetterCode = function generateSetterCode(opts) {
  var value = opts.ctx.getTitleValue('VALUE');
  if (value === RANDOM_VALUE) {
    var possibleValues = _(opts.ctx.VALUES).map(function (item) {
      return item[1];
    }).without(RANDOM_VALUE, HIDDEN_VALUE, CLICK_VALUE);
    value = 'Applab.randomFromArray([' + possibleValues + '])';
  }

  return 'Applab.' + opts.name + '(\'block_id_' + opts.ctx.id + '\', ' + (opts.extraParams ? opts.extraParams + ', ' : '') + value + ');\n';
};

// Install extensions to Blockly's language and JavaScript generator.
exports.install = function (blockly, blockInstallOptions) {
  var skin = blockInstallOptions.skin;
  var isK1 = blockInstallOptions.isK1;
  var generator = blockly.Generator.get('JavaScript');
  blockly.JavaScript = generator;

  generator.applab_eventHandlerPrologue = function () {
    return '\n';
  };

  installContainer(blockly, generator, blockInstallOptions);
};

function installContainer(blockly, generator, blockInstallOptions) {
  blockly.Blocks.applab_container = {
    helpUrl: '',
    init: function init() {
      this.setHSV(184, 1.00, 0.74);
      this.appendDummyInput().appendTitle(msg.container());
      this.appendValueInput('ID');
      this.appendValueInput('HTML');
      this.setPreviousStatement(true);
      this.setInputsInline(true);
      this.setNextStatement(true);
      this.setTooltip(msg.containerTooltip());
    }
  };

  generator.applab_container = function () {
    var idParam = Blockly.JavaScript.valueToCode(this, 'ID', Blockly.JavaScript.ORDER_NONE) || '';
    var htmlParam = Blockly.JavaScript.valueToCode(this, 'HTML', Blockly.JavaScript.ORDER_NONE) || '';
    return 'Applab.container(\'block_id_' + this.id + '\', ' + idParam + ', ' + htmlParam + ');\n';
  };
}

},{"../codegen":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/codegen.js","../locale":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/locale.js","../utils":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/utils.js","./locale":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/locale.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/applabTurtle.js":[function(require,module,exports){
'use strict';

var studioApp = require('../StudioApp').singleton;
var applabCommands = require('./commands');

var applabTurtle = module.exports;

// These offset are used to ensure that the turtle image is centered over
// its x,y coordinates. The image is currently 48x48, rendered at 24x24.
var TURTLE_WIDTH = 24;
var TURTLE_HEIGHT = 24;
var TURTLE_ROTATION_OFFSET = -45;

applabTurtle.getTurtleContext = function () {
  var canvas = document.getElementById('turtleCanvas');

  if (!canvas) {
    // If there is not yet a turtleCanvas, create it:
    applabCommands.createCanvas({ 'elementId': 'turtleCanvas', 'turtleCanvas': true });
    canvas = document.getElementById('turtleCanvas');

    // And create the turtle (defaults to visible):
    Applab.turtle.visible = true;
    var divApplab = document.getElementById('divApplab');
    var turtleImage = document.createElement("img");
    turtleImage.src = studioApp.assetUrl('media/applab/723-location-arrow-toolbar-48px-centered.png');
    turtleImage.id = 'turtleImage';
    applabTurtle.updateTurtleImage(turtleImage);
    turtleImage.ondragstart = function () {
      return false;
    };
    Applab.activeScreen().appendChild(turtleImage);
  }

  return canvas.getContext("2d");
};

applabTurtle.updateTurtleImage = function (turtleImage) {
  if (!turtleImage) {
    turtleImage = document.getElementById('turtleImage');
  }
  turtleImage.style.left = Applab.turtle.x - TURTLE_WIDTH / 2 + 'px';
  turtleImage.style.top = Applab.turtle.y - TURTLE_HEIGHT / 2 + 'px';
  var heading = Applab.turtle.heading + TURTLE_ROTATION_OFFSET;
  var transform = 'rotate(' + heading + 'deg)';
  turtleImage.style.transform = transform;
  turtleImage.style.msTransform = transform;
  turtleImage.style.webkitTransform = transform;
};

applabTurtle.turtleSetVisibility = function (visible) {
  // call this first to ensure there is a turtle (in case this is the first API)
  applabTurtle.getTurtleContext();
  var turtleImage = document.getElementById('turtleImage');
  turtleImage.style.visibility = visible ? 'visible' : 'hidden';
};

},{"../StudioApp":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/StudioApp.js","./commands":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/commands.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/commands.js":[function(require,module,exports){
'use strict';

var studioApp = require('../StudioApp').singleton;
var AppStorage = require('./appStorage');
var apiTimeoutList = require('../timeoutList');
var ChartApi = require('./ChartApi');
var RGBColor = require('./rgbcolor.js');
var codegen = require('../codegen');
var keyEvent = require('./keyEvent');
var utils = require('../utils');

var errorHandler = require('./errorHandler');
var outputApplabConsole = errorHandler.outputApplabConsole;
var outputError = errorHandler.outputError;
var ErrorLevel = errorHandler.ErrorLevel;
var applabTurtle = require('./applabTurtle');
var ChangeEventHandler = require('./ChangeEventHandler');
var colors = require('../sharedJsxStyles').colors;

var OPTIONAL = true;

var applabCommands = module.exports;

/**
 * Lookup table of asset URLs. If an asset isn't listed here, initiate a
 * separate request to ensure it is downloaded without interruption. Otherwise
 * a quickly changing src could cancel the download before it can be cached by
 * the browser.
 */
var toBeCached = {};

/**
 * @param value
 * @returns {boolean} true if value is a string, number, boolean, undefined or null.
 *     returns false for other values, including instances of Number or String.
 */
function isPrimitiveType(value) {
  switch (typeof value) {
    case 'string':
    case 'number':
    case 'boolean':
    case 'undefined':
      return true;
    case 'object':
      return value === null;
    default:
      return false;
  }
}

function apiValidateType(opts, funcName, varName, varValue, expectedType, opt) {
  var validatedTypeKey = 'validated_type_' + varName;
  if (typeof opts[validatedTypeKey] === 'undefined') {
    var properType;
    if (expectedType === 'color') {
      // Special handling for colors, must be a string and a valid RGBColor:
      properType = typeof varValue === 'string';
      if (properType) {
        var color = new RGBColor(varValue);
        properType = color.ok;
      }
    } else if (expectedType === 'uistring') {
      properType = typeof varValue === 'string' || typeof varValue === 'number' || typeof varValue === 'boolean';
    } else if (expectedType === 'function') {
      // Special handling for functions, it must be an interpreter function:
      properType = typeof varValue === 'object' && varValue.type === 'function';
    } else if (expectedType === 'number') {
      properType = typeof varValue === 'number' || typeof varValue === 'string' && !isNaN(varValue);
    } else if (expectedType === 'primitive') {
      properType = isPrimitiveType(varValue);
      if (!properType) {
        // Ensure a descriptive error message is displayed.
        expectedType = 'string, number, boolean, undefined or null';
      }
    } else if (expectedType === 'array') {
      properType = Array.isArray(varValue);
    } else {
      properType = typeof varValue === expectedType;
    }
    properType = properType || opt === OPTIONAL && typeof varValue === 'undefined';
    if (!properType) {
      var line = 1 + Applab.JSInterpreter.getNearestUserCodeLine();
      var errorString = funcName + "() " + varName + " parameter value (" + varValue + ") is not a " + expectedType + ".";
      outputError(errorString, ErrorLevel.WARNING, line);
    }
    opts[validatedTypeKey] = properType;
  }
}

function apiValidateTypeAndRange(opts, funcName, varName, varValue, expectedType, minValue, maxValue, opt) {
  var validatedTypeKey = 'validated_type_' + varName;
  var validatedRangeKey = 'validated_range_' + varName;
  apiValidateType(opts, funcName, varName, varValue, expectedType, opt);
  if (opts[validatedTypeKey] && typeof opts[validatedRangeKey] === 'undefined') {
    var inRange = typeof minValue === 'undefined' || varValue >= minValue;
    if (inRange) {
      inRange = typeof maxValue === 'undefined' || varValue <= maxValue;
    }
    inRange = inRange || opt === OPTIONAL && typeof varValue === 'undefined';
    if (!inRange) {
      var line = 1 + Applab.JSInterpreter.getNearestUserCodeLine();
      var errorString = funcName + "() " + varName + " parameter value (" + varValue + ") is not in the expected range.";
      outputError(errorString, ErrorLevel.WARNING, line);
    }
    opts[validatedRangeKey] = inRange;
  }
}

function apiValidateActiveCanvas(opts, funcName) {
  var validatedActiveCanvasKey = 'validated_active_canvas';
  if (!opts || typeof opts[validatedActiveCanvasKey] === 'undefined') {
    var activeCanvas = Boolean(Applab.activeCanvas);
    if (!activeCanvas) {
      var line = 1 + Applab.JSInterpreter.getNearestUserCodeLine();
      var errorString = funcName + "() called without an active canvas. Call " + "createCanvas() first.";
      outputError(errorString, ErrorLevel.WARNING, line);
    }
    if (opts) {
      opts[validatedActiveCanvasKey] = activeCanvas;
    }
  }
}

function apiValidateDomIdExistence(opts, funcName, varName, id, shouldExist) {
  var divApplab = document.getElementById('divApplab');
  var validatedTypeKey = 'validated_type_' + varName;
  var validatedDomKey = 'validated_id_' + varName;
  apiValidateType(opts, funcName, varName, id, 'string');
  if (opts[validatedTypeKey] && typeof opts[validatedDomKey] === 'undefined') {
    var element = document.getElementById(id);
    var exists = Boolean(element && divApplab.contains(element));
    var valid = exists == shouldExist;
    if (!valid) {
      var line = 1 + Applab.JSInterpreter.getNearestUserCodeLine();
      var errorString = funcName + "() " + varName + " parameter refers to an id (" + id + ") which " + (exists ? "already exists." : "does not exist.");
      outputError(errorString, ErrorLevel.WARNING, line);
    }
    opts[validatedDomKey] = valid;
  }
}

// (brent) We may in the future also provide a second option that allows you to
// reset the state of the screen to it's original (design mode) state.
applabCommands.setScreen = function (opts) {
  apiValidateDomIdExistence(opts, 'setScreen', 'screenId', opts.screenId, true);
  var element = document.getElementById(opts.screenId);
  var divApplab = document.getElementById('divApplab');
  if (!divApplab.contains(element)) {
    return;
  }

  Applab.changeScreen(opts.screenId);
};

applabCommands.container = function (opts) {
  var newDiv = document.createElement("div");
  if (typeof opts.elementId !== "undefined") {
    newDiv.id = opts.elementId;
  }
  newDiv.innerHTML = opts.html;
  newDiv.style.position = 'relative';

  return Boolean(Applab.activeScreen().appendChild(newDiv));
};

applabCommands.write = function (opts) {
  apiValidateType(opts, 'write', 'text', opts.html, 'uistring');
  return applabCommands.container(opts);
};

applabCommands.button = function (opts) {
  // PARAMNAME: button: id vs. buttonId
  apiValidateDomIdExistence(opts, 'button', 'id', opts.elementId, false);
  apiValidateType(opts, 'button', 'text', opts.text, 'uistring');

  var newButton = document.createElement("button");
  var textNode = document.createTextNode(opts.text);
  newButton.id = opts.elementId;
  newButton.style.position = 'relative';
  newButton.style.color = colors.white;
  newButton.style.backgroundColor = colors.teal;

  return Boolean(newButton.appendChild(textNode) && Applab.activeScreen().appendChild(newButton));
};

applabCommands.image = function (opts) {
  apiValidateType(opts, 'image', 'id', opts.elementId, 'string');
  apiValidateType(opts, 'image', 'url', opts.src, 'string');

  var newImage = document.createElement("img");
  newImage.src = Applab.maybeAddAssetPathPrefix(opts.src);
  newImage.id = opts.elementId;
  newImage.style.position = 'relative';

  return Boolean(Applab.activeScreen().appendChild(newImage));
};

applabCommands.imageUploadButton = function (opts) {
  // To avoid showing the ugly fileupload input element, we create a label
  // element with an img-upload class that will ensure it looks like a button
  var newLabel = document.createElement("label");
  var textNode = document.createTextNode(opts.text);
  newLabel.id = opts.elementId;
  newLabel.className = 'img-upload';
  newLabel.style.position = 'relative';

  // We then create an offscreen input element and make it a child of the new
  // label element
  var newInput = document.createElement("input");
  newInput.type = "file";
  newInput.accept = "image/*";
  newInput.capture = "camera";
  newInput.style.position = "absolute";
  newInput.style.left = "-9999px";

  return Boolean(newLabel.appendChild(newInput) && newLabel.appendChild(textNode) && Applab.activeScreen().appendChild(newLabel));
};

applabCommands.show = function (opts) {
  applabTurtle.turtleSetVisibility(true);
};

applabCommands.hide = function (opts) {
  applabTurtle.turtleSetVisibility(false);
};

applabCommands.moveTo = function (opts) {
  apiValidateType(opts, 'moveTo', 'x', opts.x, 'number');
  apiValidateType(opts, 'moveTo', 'y', opts.y, 'number');
  var ctx = applabTurtle.getTurtleContext();
  if (ctx) {
    ctx.beginPath();
    ctx.moveTo(Applab.turtle.x, Applab.turtle.y);
    Applab.turtle.x = opts.x;
    Applab.turtle.y = opts.y;
    ctx.lineTo(Applab.turtle.x, Applab.turtle.y);
    ctx.stroke();
    applabTurtle.updateTurtleImage();
  }
};

applabCommands.move = function (opts) {
  apiValidateType(opts, 'move', 'x', opts.x, 'number');
  apiValidateType(opts, 'move', 'y', opts.y, 'number');
  opts.x += Applab.turtle.x;
  opts.y += Applab.turtle.y;
  applabCommands.moveTo(opts);
};

applabCommands.moveForward = function (opts) {
  apiValidateType(opts, 'moveForward', 'pixels', opts.distance, 'number', OPTIONAL);
  var newOpts = {};
  var distance = 25;
  if (typeof opts.distance !== 'undefined') {
    distance = opts.distance;
  }
  newOpts.x = Applab.turtle.x + distance * Math.sin(2 * Math.PI * Applab.turtle.heading / 360);
  newOpts.y = Applab.turtle.y - distance * Math.cos(2 * Math.PI * Applab.turtle.heading / 360);
  applabCommands.moveTo(newOpts);
};

applabCommands.moveBackward = function (opts) {
  apiValidateType(opts, 'moveBackward', 'pixels', opts.distance, 'number', OPTIONAL);
  var distance = -25;
  if (typeof opts.distance !== 'undefined') {
    distance = -opts.distance;
  }
  applabCommands.moveForward({ 'distance': distance });
};

applabCommands.turnRight = function (opts) {
  apiValidateType(opts, 'turnRight', 'angle', opts.degrees, 'number', OPTIONAL);
  // call this first to ensure there is a turtle (in case this is the first API)
  applabTurtle.getTurtleContext();

  var degrees = 90;
  if (typeof opts.degrees !== 'undefined') {
    degrees = opts.degrees;
  }

  Applab.turtle.heading += degrees;
  Applab.turtle.heading = (Applab.turtle.heading + 360) % 360;
  applabTurtle.updateTurtleImage();
};

applabCommands.turnLeft = function (opts) {
  apiValidateType(opts, 'turnLeft', 'angle', opts.degrees, 'number', OPTIONAL);
  var degrees = -90;
  if (typeof opts.degrees !== 'undefined') {
    degrees = -opts.degrees;
  }
  applabCommands.turnRight({ 'degrees': degrees });
};

applabCommands.turnTo = function (opts) {
  apiValidateType(opts, 'turnTo', 'angle', opts.direction, 'number');
  var degrees = opts.direction - Applab.turtle.heading;
  applabCommands.turnRight({ 'degrees': degrees });
};

// Turn along an arc with a specified radius (by default, turn clockwise, so
// the center of the arc is 90 degrees clockwise of the current heading)
// if opts.counterclockwise, the center point is 90 degrees counterclockwise

applabCommands.arcRight = function (opts) {
  apiValidateType(opts, 'arcRight', 'angle', opts.degrees, 'number');
  apiValidateType(opts, 'arcRight', 'radius', opts.radius, 'number');

  // call this first to ensure there is a turtle (in case this is the first API)
  var centerAngle = opts.counterclockwise ? -90 : 90;
  var clockwiseDegrees = opts.counterclockwise ? -opts.degrees : opts.degrees;
  var ctx = applabTurtle.getTurtleContext();
  if (ctx) {
    var centerX = Applab.turtle.x + opts.radius * Math.sin(2 * Math.PI * (Applab.turtle.heading + centerAngle) / 360);
    var centerY = Applab.turtle.y - opts.radius * Math.cos(2 * Math.PI * (Applab.turtle.heading + centerAngle) / 360);

    var startAngle = 2 * Math.PI * (Applab.turtle.heading + (opts.counterclockwise ? 0 : 180)) / 360;
    var endAngle = startAngle + 2 * Math.PI * clockwiseDegrees / 360;

    ctx.beginPath();
    ctx.arc(centerX, centerY, opts.radius, startAngle, endAngle, opts.counterclockwise);
    ctx.stroke();

    Applab.turtle.heading = (Applab.turtle.heading + clockwiseDegrees + 360) % 360;
    var xMovement = opts.radius * Math.cos(2 * Math.PI * Applab.turtle.heading / 360);
    var yMovement = opts.radius * Math.sin(2 * Math.PI * Applab.turtle.heading / 360);
    Applab.turtle.x = centerX + (opts.counterclockwise ? xMovement : -xMovement);
    Applab.turtle.y = centerY + (opts.counterclockwise ? yMovement : -yMovement);
    applabTurtle.updateTurtleImage();
  }
};

applabCommands.arcLeft = function (opts) {
  apiValidateType(opts, 'arcLeft', 'angle', opts.degrees, 'number');
  apiValidateType(opts, 'arcLeft', 'radius', opts.radius, 'number');

  opts.counterclockwise = true;
  applabCommands.arcRight(opts);
};

applabCommands.getX = function (opts) {
  var ctx = applabTurtle.getTurtleContext();
  return Applab.turtle.x;
};

applabCommands.getY = function (opts) {
  var ctx = applabTurtle.getTurtleContext();
  return Applab.turtle.y;
};

applabCommands.getDirection = function (opts) {
  var ctx = applabTurtle.getTurtleContext();
  return Applab.turtle.heading;
};

applabCommands.dot = function (opts) {
  apiValidateTypeAndRange(opts, 'dot', 'radius', opts.radius, 'number', 0.0001);
  var ctx = applabTurtle.getTurtleContext();
  if (ctx && opts.radius > 0) {
    ctx.beginPath();
    if (Applab.turtle.penUpColor) {
      // If the pen is up and the color has been changed, use that color:
      ctx.strokeStyle = Applab.turtle.penUpColor;
    }
    var savedLineWidth = ctx.lineWidth;
    ctx.lineWidth = 1;
    ctx.arc(Applab.turtle.x, Applab.turtle.y, opts.radius, 0, 2 * Math.PI);
    ctx.fill();
    ctx.stroke();
    if (Applab.turtle.penUpColor) {
      // If the pen is up, reset strokeStyle back to transparent:
      ctx.strokeStyle = "rgba(255, 255, 255, 0)";
    }
    ctx.lineWidth = savedLineWidth;
    return true;
  }
};

applabCommands.penUp = function (opts) {
  var ctx = applabTurtle.getTurtleContext();
  if (ctx) {
    if (ctx.strokeStyle !== "rgba(255, 255, 255, 0)") {
      Applab.turtle.penUpColor = ctx.strokeStyle;
      ctx.strokeStyle = "rgba(255, 255, 255, 0)";
    }
  }
};

applabCommands.penDown = function (opts) {
  var ctx = applabTurtle.getTurtleContext();
  if (ctx && Applab.turtle.penUpColor) {
    ctx.strokeStyle = Applab.turtle.penUpColor;
    delete Applab.turtle.penUpColor;
  }
};

applabCommands.penWidth = function (opts) {
  apiValidateTypeAndRange(opts, 'penWidth', 'width', opts.width, 'number', 0.0001);
  var ctx = applabTurtle.getTurtleContext();
  if (ctx) {
    ctx.lineWidth = opts.width;
  }
};

applabCommands.penColorInternal = function (rgbstring) {
  var ctx = applabTurtle.getTurtleContext();
  if (ctx) {
    if (Applab.turtle.penUpColor) {
      // pen is currently up, store this color for pen down
      Applab.turtle.penUpColor = rgbstring;
    } else {
      ctx.strokeStyle = rgbstring;
    }
    ctx.fillStyle = rgbstring;
  }
};

applabCommands.penColor = function (opts) {
  apiValidateType(opts, 'penColor', 'color', opts.color, 'color');
  applabCommands.penColorInternal(opts.color);
};

applabCommands.penRGB = function (opts) {
  // PARAMNAME: penRGB: red vs. r
  // PARAMNAME: penRGB: green vs. g
  // PARAMNAME: penRGB: blue vs. b
  apiValidateTypeAndRange(opts, 'penRGB', 'r', opts.r, 'number', 0, 255);
  apiValidateTypeAndRange(opts, 'penRGB', 'g', opts.g, 'number', 0, 255);
  apiValidateTypeAndRange(opts, 'penRGB', 'b', opts.b, 'number', 0, 255);
  apiValidateTypeAndRange(opts, 'penRGB', 'a', opts.a, 'number', 0, 1, OPTIONAL);
  var alpha = typeof opts.a === 'undefined' ? 1 : opts.a;
  var rgbstring = "rgba(" + opts.r + "," + opts.g + "," + opts.b + "," + alpha + ")";
  applabCommands.penColorInternal(rgbstring);
};

applabCommands.speed = function (opts) {
  // DOCBUG: range is 0-100, not 1-100
  apiValidateTypeAndRange(opts, 'speed', 'value', opts.percent, 'number', 0, 100);
  if (opts.percent >= 0 && opts.percent <= 100) {
    var sliderSpeed = opts.percent / 100;
    if (Applab.speedSlider) {
      Applab.speedSlider.setValue(sliderSpeed);
    }
    Applab.scale.stepSpeed = Applab.stepSpeedFromSliderSpeed(sliderSpeed);
  }
};

applabCommands.createCanvas = function (opts) {
  // PARAMNAME: createCanvas: id vs. canvasId
  apiValidateDomIdExistence(opts, 'createCanvas', 'canvasId', opts.elementId, false);
  apiValidateType(opts, 'createCanvas', 'width', width, 'number', OPTIONAL);
  apiValidateType(opts, 'createCanvas', 'height', height, 'number', OPTIONAL);

  var newElement = document.createElement("canvas");
  var ctx = newElement.getContext("2d");
  if (newElement && ctx) {
    newElement.id = opts.elementId;
    // default width/height if params are missing
    var width = opts.width || Applab.appWidth;
    var height = opts.height || Applab.footerlessAppHeight;
    newElement.width = width;
    newElement.height = height;
    newElement.setAttribute('width', width + 'px');
    newElement.setAttribute('height', height + 'px');
    // Unlike other elements, we use absolute position, otherwise our z-index
    // doesn't work
    newElement.style.position = 'absolute';
    if (!opts.turtleCanvas) {
      // set transparent fill by default (unless it is the turtle canvas):
      ctx.fillStyle = "rgba(255, 255, 255, 0)";
    }
    ctx.lineCap = "round";

    if (!Applab.activeCanvas && !opts.turtleCanvas) {
      // If there is no active canvas and this isn't the turtleCanvas,
      // we'll make this the active canvas for subsequent API calls:
      Applab.activeCanvas = newElement;
    }

    return Boolean(Applab.activeScreen().appendChild(newElement));
  }
  return false;
};

applabCommands.setActiveCanvas = function (opts) {
  var divApplab = document.getElementById('divApplab');
  // PARAMNAME: setActiveCanvas: id vs. canvasId
  apiValidateDomIdExistence(opts, 'setActiveCanvas', 'canvasId', opts.elementId, true);
  var canvas = document.getElementById(opts.elementId);
  if (divApplab.contains(canvas)) {
    Applab.activeCanvas = canvas;
    return true;
  }
  return false;
};

applabCommands.line = function (opts) {
  apiValidateActiveCanvas(opts, 'line');
  apiValidateType(opts, 'line', 'x1', opts.x1, 'number');
  apiValidateType(opts, 'line', 'x2', opts.x2, 'number');
  apiValidateType(opts, 'line', 'y1', opts.y1, 'number');
  apiValidateType(opts, 'line', 'y2', opts.y2, 'number');
  var ctx = Applab.activeCanvas && Applab.activeCanvas.getContext("2d");
  if (ctx) {
    ctx.beginPath();
    ctx.moveTo(opts.x1, opts.y1);
    ctx.lineTo(opts.x2, opts.y2);
    ctx.stroke();
    return true;
  }
  return false;
};

applabCommands.circle = function (opts) {
  apiValidateActiveCanvas(opts, 'circle');
  // PARAMNAME: circle: centerX vs. x
  // PARAMNAME: circle: centerY vs. y
  apiValidateType(opts, 'circle', 'centerX', opts.x, 'number');
  apiValidateType(opts, 'circle', 'centerY', opts.y, 'number');
  apiValidateType(opts, 'circle', 'radius', opts.radius, 'number');
  var ctx = Applab.activeCanvas && Applab.activeCanvas.getContext("2d");
  if (ctx) {
    ctx.beginPath();
    ctx.arc(opts.x, opts.y, opts.radius, 0, 2 * Math.PI);
    ctx.fill();
    ctx.stroke();
    return true;
  }
  return false;
};

applabCommands.rect = function (opts) {
  apiValidateActiveCanvas(opts, 'rect');
  // PARAMNAME: rect: upperLeftX vs. x
  // PARAMNAME: rect: upperLeftY vs. y
  apiValidateType(opts, 'rect', 'upperLeftX', opts.x, 'number');
  apiValidateType(opts, 'rect', 'upperLeftY', opts.y, 'number');
  apiValidateType(opts, 'rect', 'width', opts.width, 'number');
  apiValidateType(opts, 'rect', 'height', opts.height, 'number');
  var ctx = Applab.activeCanvas && Applab.activeCanvas.getContext("2d");
  if (ctx) {
    ctx.beginPath();
    ctx.rect(opts.x, opts.y, opts.width, opts.height);
    ctx.fill();
    ctx.stroke();
    return true;
  }
  return false;
};

applabCommands.setStrokeWidth = function (opts) {
  apiValidateActiveCanvas(opts, 'setStrokeWidth');
  apiValidateTypeAndRange(opts, 'setStrokeWidth', 'width', opts.width, 'number', 0.0001);
  var ctx = Applab.activeCanvas && Applab.activeCanvas.getContext("2d");
  if (ctx) {
    ctx.lineWidth = opts.width;
    return true;
  }
  return false;
};

applabCommands.setStrokeColor = function (opts) {
  apiValidateActiveCanvas(opts, 'setStrokeColor');
  apiValidateType(opts, 'setStrokeColor', 'color', opts.color, 'color');
  var ctx = Applab.activeCanvas && Applab.activeCanvas.getContext("2d");
  if (ctx) {
    ctx.strokeStyle = String(opts.color);
    return true;
  }
  return false;
};

applabCommands.setFillColor = function (opts) {
  apiValidateActiveCanvas(opts, 'setFillColor');
  apiValidateType(opts, 'setFillColor', 'color', opts.color, 'color');
  var ctx = Applab.activeCanvas && Applab.activeCanvas.getContext("2d");
  if (ctx) {
    ctx.fillStyle = String(opts.color);
    return true;
  }
  return false;
};

applabCommands.clearCanvas = function (opts) {
  apiValidateActiveCanvas(opts, 'clearCanvas');
  var ctx = Applab.activeCanvas && Applab.activeCanvas.getContext("2d");
  if (ctx) {
    ctx.clearRect(0, 0, Applab.activeCanvas.width, Applab.activeCanvas.height);
    return true;
  }
  return false;
};

/**
 * Semi-deprecated. We still support this API, but no longer expose it in the
 * toolbox. Replaced by drawImageURL
 */
applabCommands.drawImage = function (opts) {
  var divApplab = document.getElementById('divApplab');
  // PARAMNAME: drawImage: imageId vs. id
  apiValidateActiveCanvas(opts, 'drawImage');
  apiValidateDomIdExistence(opts, 'drawImage', 'id', opts.imageId, true);
  apiValidateType(opts, 'drawImage', 'x', opts.x, 'number');
  apiValidateType(opts, 'drawImage', 'y', opts.y, 'number');
  var image = document.getElementById(opts.imageId);
  var ctx = Applab.activeCanvas && Applab.activeCanvas.getContext("2d");
  if (ctx && divApplab.contains(image)) {
    var xScale, yScale;
    xScale = yScale = 1;
    if (typeof opts.width !== 'undefined') {
      apiValidateType(opts, 'drawImage', 'width', opts.width, 'number');
      xScale = xScale * (opts.width / image.width);
    }
    if (typeof opts.height !== 'undefined') {
      apiValidateType(opts, 'drawImage', 'height', opts.height, 'number');
      yScale = yScale * (opts.height / image.height);
    }
    ctx.save();
    ctx.setTransform(xScale, 0, 0, yScale, opts.x, opts.y);
    ctx.drawImage(image, 0, 0);
    ctx.restore();
    return true;
  }
  return false;
};

/**
 * We support a couple different version of this API
 * drawImageURL(url, [callback])
 * drawImaegURL(url, x, y, width, height, [calback])
 */
applabCommands.drawImageURL = function (opts) {
  var divApplab = document.getElementById('divApplab');

  apiValidateActiveCanvas(opts, 'drawImageURL');
  apiValidateType(opts, 'drawImageURL', 'url', opts.url, 'string');
  apiValidateType(opts, 'drawImageURL', 'x', opts.x, 'number', OPTIONAL);
  apiValidateType(opts, 'drawImageURL', 'y', opts.y, 'number', OPTIONAL);
  apiValidateType(opts, 'drawImageURL', 'width', opts.width, 'number', OPTIONAL);
  apiValidateType(opts, 'drawImageURL', 'height', opts.height, 'number', OPTIONAL);
  apiValidateType(opts, 'drawImageURL', 'callback', opts.callback, 'function', OPTIONAL);

  var jsInterpreter = Applab.JSInterpreter;
  var callback = function callback(success) {
    if (opts.callback) {
      queueCallback(jsInterpreter, opts.callback, [success]);
    }
  };

  var image = new Image();
  image.src = Applab.maybeAddAssetPathPrefix(opts.url);
  image.onload = function () {
    var ctx = Applab.activeCanvas && Applab.activeCanvas.getContext("2d");
    if (!ctx) {
      return;
    }
    var x = utils.valueOr(opts.x, 0);
    var y = utils.valueOr(opts.y, 0);

    // if given a width/height use that
    var renderWidth = utils.valueOr(opts.width, image.width);
    var renderHeight = utils.valueOr(opts.height, image.height);

    // if undefined, extra width/height from image and potentially resize to
    // fit
    if (opts.width === undefined || opts.height === undefined) {
      var aspectRatio = image.width / image.height;
      if (aspectRatio > 1) {
        renderWidth = Math.min(Applab.activeCanvas.width, image.width);
        renderHeight = renderWidth * aspectRatio;
      } else {
        renderHeight = Math.min(Applab.activeCanvas.height, image.height);
        renderWidth = renderHeight / aspectRatio;
      }
    }

    ctx.save();
    ctx.setTransform(renderWidth / image.width, 0, 0, renderHeight / image.height, opts.x, opts.y);
    ctx.drawImage(image, 0, 0);
    ctx.restore();

    callback(true);
  };
  image.onerror = function () {
    callback(false);
  };
};

applabCommands.getImageData = function (opts) {
  apiValidateActiveCanvas(opts, 'getImageData');
  // PARAMNAME: getImageData: all params + doc bugs
  apiValidateType(opts, 'getImageData', 'x', opts.x, 'number');
  apiValidateType(opts, 'getImageData', 'y', opts.y, 'number');
  apiValidateType(opts, 'getImageData', 'width', opts.width, 'number');
  apiValidateType(opts, 'getImageData', 'height', opts.height, 'number');
  var ctx = Applab.activeCanvas && Applab.activeCanvas.getContext("2d");
  if (ctx) {
    return ctx.getImageData(opts.x, opts.y, opts.width, opts.height);
  }
};

applabCommands.putImageData = function (opts) {
  apiValidateActiveCanvas(opts, 'putImageData');
  // PARAMNAME: putImageData: imageData vs. imgData
  // PARAMNAME: putImageData: startX vs. x
  // PARAMNAME: putImageData: startY vs. y
  apiValidateType(opts, 'putImageData', 'imgData', opts.imageData, 'object');
  apiValidateType(opts, 'putImageData', 'x', opts.x, 'number');
  apiValidateType(opts, 'putImageData', 'y', opts.y, 'number');
  var ctx = Applab.activeCanvas && Applab.activeCanvas.getContext("2d");
  if (ctx) {
    // Create tmpImageData and initialize it because opts.imageData is not
    // going to be a real ImageData object if it came from the interpreter
    var tmpImageData = ctx.createImageData(opts.imageData.width, opts.imageData.height);
    tmpImageData.data.set(opts.imageData.data);
    return ctx.putImageData(tmpImageData, opts.x, opts.y);
  }
};

applabCommands.textInput = function (opts) {
  // PARAMNAME: textInput: id vs. inputId
  apiValidateDomIdExistence(opts, 'textInput', 'id', opts.elementId, false);
  apiValidateType(opts, 'textInput', 'text', opts.text, 'uistring');

  var newInput = document.createElement("input");
  newInput.value = opts.text;
  newInput.id = opts.elementId;
  newInput.style.position = 'relative';
  newInput.style.height = '30px';
  newInput.style.width = '200px';

  return Boolean(Applab.activeScreen().appendChild(newInput));
};

applabCommands.textLabel = function (opts) {
  // PARAMNAME: textLabel: id vs. labelId
  apiValidateDomIdExistence(opts, 'textLabel', 'id', opts.elementId, false);
  apiValidateType(opts, 'textLabel', 'text', opts.text, 'uistring');
  if (typeof opts.forId !== 'undefined') {
    apiValidateDomIdExistence(opts, 'textLabel', 'forId', opts.forId, true);
  }

  var newLabel = document.createElement("label");
  var textNode = document.createTextNode(opts.text);
  newLabel.id = opts.elementId;
  newLabel.style.position = 'relative';
  var forElement = document.getElementById(opts.forId);
  if (forElement && Applab.activeScreen().contains(forElement)) {
    newLabel.setAttribute('for', opts.forId);
  }

  return Boolean(newLabel.appendChild(textNode) && Applab.activeScreen().appendChild(newLabel));
};

applabCommands.checkbox = function (opts) {
  // PARAMNAME: checkbox: id vs. checkboxId
  apiValidateDomIdExistence(opts, 'checkbox', 'id', opts.elementId, false);
  // apiValidateType(opts, 'checkbox', 'checked', opts.checked, 'boolean');

  var newCheckbox = document.createElement("input");
  newCheckbox.setAttribute("type", "checkbox");
  newCheckbox.checked = opts.checked;
  newCheckbox.id = opts.elementId;
  newCheckbox.style.position = 'relative';

  return Boolean(Applab.activeScreen().appendChild(newCheckbox));
};

applabCommands.radioButton = function (opts) {
  apiValidateDomIdExistence(opts, 'radioButton', 'id', opts.elementId, false);
  // apiValidateType(opts, 'radioButton', 'checked', opts.checked, 'boolean');
  apiValidateType(opts, 'radioButton', 'group', opts.name, 'string', OPTIONAL);

  var newRadio = document.createElement("input");
  newRadio.setAttribute("type", "radio");
  newRadio.name = opts.name;
  newRadio.checked = opts.checked;
  newRadio.id = opts.elementId;
  newRadio.style.position = 'relative';

  return Boolean(Applab.activeScreen().appendChild(newRadio));
};

applabCommands.dropdown = function (opts) {
  // PARAMNAME: dropdown: id vs. dropdownId
  apiValidateDomIdExistence(opts, 'dropdown', 'id', opts.elementId, false);

  var newSelect = document.createElement("select");

  if (opts.optionsArray) {
    for (var i = 0; i < opts.optionsArray.length; i++) {
      var option = document.createElement("option");
      apiValidateType(opts, 'dropdown', 'option_' + (i + 1), opts.optionsArray[i], 'uistring');
      option.text = opts.optionsArray[i];
      newSelect.add(option);
    }
  }
  newSelect.id = opts.elementId;
  newSelect.style.position = 'relative';
  newSelect.style.color = colors.white;
  newSelect.style.backgroundColor = colors.teal;

  return Boolean(Applab.activeScreen().appendChild(newSelect));
};

applabCommands.getAttribute = function (opts) {
  var divApplab = document.getElementById('divApplab');
  var element = document.getElementById(opts.elementId);
  var attribute = String(opts.attribute);
  return divApplab.contains(element) ? element[attribute] : false;
};

// Whitelist of HTML Element attributes which can be modified, to
// prevent DOM manipulation which would violate the sandbox.
var MUTABLE_ATTRIBUTES = ['innerHTML', 'scrollTop'];

applabCommands.setAttribute = function (opts) {
  var divApplab = document.getElementById('divApplab');
  var element = document.getElementById(opts.elementId);
  var attribute = String(opts.attribute);
  if (divApplab.contains(element) && MUTABLE_ATTRIBUTES.indexOf(attribute) !== -1) {
    element[attribute] = opts.value;
    return true;
  }
  return false;
};

applabCommands.getText = function (opts) {
  var divApplab = document.getElementById('divApplab');
  apiValidateDomIdExistence(opts, 'getText', 'id', opts.elementId, true);

  var element = document.getElementById(opts.elementId);
  if (divApplab.contains(element)) {
    if (element.tagName === 'INPUT' || element.tagName === 'SELECT') {
      return String(element.value);
    } else if (element.tagName === 'IMG') {
      return String(element.alt);
    } else {
      return applabCommands.getElementInnerText_(element);
    }
  }
  return false;
};

applabCommands.setText = function (opts) {
  var divApplab = document.getElementById('divApplab');
  apiValidateDomIdExistence(opts, 'setText', 'id', opts.elementId, true);
  apiValidateType(opts, 'setText', 'text', opts.text, 'uistring');

  var element = document.getElementById(opts.elementId);
  if (divApplab.contains(element)) {
    if (element.tagName === 'INPUT' || element.tagName === 'SELECT') {
      element.value = opts.text;
    } else if (element.tagName === 'IMG') {
      element.alt = opts.text;
    } else {
      applabCommands.setElementInnerText_(element, opts.text);
    }
    return true;
  }
  return false;
};

/**
 * Attempts to emulate Chrome's version of innerText by way of innerHTML, only
 * for the simplified case of plain text content (in, for example, a
 * contentEditable div).
 * @param {Element} element
 * @private
 */
applabCommands.getElementInnerText_ = function (element) {
  var cleanedText = element.innerHTML;
  cleanedText = cleanedText.replace(/<div>/gi, '\n'); // Divs generate newlines
  cleanedText = cleanedText.replace(/<[^>]+>/gi, ''); // Strip all other tags

  // This next step requires some explanation
  // In multiline text it's possible for the first line to render wrapped or unwrapped.
  //     Line 1
  //     Line 2
  //   Can render as either of:
  //     Line 1<div>Line 2</div>
  //     <div>Line 1</div><div>Line 2</div>
  //
  // But leading blank lines will always render wrapped and should be preserved
  //
  //     Line 2
  //     Line 3
  //   Renders as
  //    <div><br></div><div>Line 2</div><div>Line 3</div>
  //
  // To handle this behavior we strip leading newlines UNLESS they are followed
  // by another newline, using a negative lookahead (?!)
  cleanedText = cleanedText.replace(/^\n(?!\n)/, ''); // Strip leading nondoubled newline

  cleanedText = cleanedText.replace(/&nbsp;/gi, ' '); // Unescape nonbreaking spaces
  cleanedText = cleanedText.replace(/&gt;/gi, '>'); // Unescape >
  cleanedText = cleanedText.replace(/&lt;/gi, '<'); // Unescape <
  cleanedText = cleanedText.replace(/&amp;/gi, '&'); // Unescape & (must happen last!)
  return cleanedText;
};

/**
 * Attempts to emulate Chrome's version of innerText by way of innerHTML, only
 * for the simplified case of plain text content (in, for example, a
 * contentEditable div).
 * @param {Element} element
 * @param {string} newText
 * @private
 */
applabCommands.setElementInnerText_ = function (element, newText) {
  var escapedText = newText.toString();
  escapedText = escapedText.replace(/&/g, '&amp;'); // Escape & (must happen first!)
  escapedText = escapedText.replace(/</g, '&lt;'); // Escape <
  escapedText = escapedText.replace(/>/g, '&gt;'); // Escape >
  escapedText = escapedText.replace(/  /g, ' &nbsp;'); // Escape doubled spaces

  // Now wrap each line except the first line in a <div>,
  // replacing blank lines with <div><br><div>
  var lines = escapedText.split('\n');
  element.innerHTML = lines[0] + lines.slice(1).map(function (line) {
    return '<div>' + (line.length ? line : '<br>') + '</div>';
  }).join('');
};

applabCommands.getChecked = function (opts) {
  var divApplab = document.getElementById('divApplab');
  apiValidateDomIdExistence(opts, 'getChecked', 'id', opts.elementId, true);

  var element = document.getElementById(opts.elementId);
  if (divApplab.contains(element) && element.tagName === 'INPUT') {
    return element.checked;
  }
  return false;
};

applabCommands.setChecked = function (opts) {
  var divApplab = document.getElementById('divApplab');
  apiValidateDomIdExistence(opts, 'setChecked', 'id', opts.elementId, true);
  // apiValidateType(opts, 'setChecked', 'checked', opts.checked, 'boolean');

  var element = document.getElementById(opts.elementId);
  if (divApplab.contains(element) && element.tagName === 'INPUT') {
    element.checked = opts.checked;
    return true;
  }
  return false;
};

applabCommands.getImageURL = function (opts) {
  var divApplab = document.getElementById('divApplab');
  // PARAMNAME: getImageURL: id vs. imageId
  apiValidateDomIdExistence(opts, 'getImageURL', 'id', opts.elementId, true);

  var element = document.getElementById(opts.elementId);
  if (divApplab.contains(element)) {
    // We return a URL if it is an IMG element or our special img-upload label
    if (element.tagName === 'IMG') {
      return element.src;
    } else if (element.tagName === 'LABEL' && element.className === 'img-upload') {
      var fileObj = element.children[0].files[0];
      if (fileObj) {
        return window.URL.createObjectURL(fileObj);
      }
    }
  }
};

applabCommands.setImageURL = function (opts) {
  var divApplab = document.getElementById('divApplab');
  apiValidateDomIdExistence(opts, 'setImageURL', 'id', opts.elementId, true);
  apiValidateType(opts, 'setImageURL', 'url', opts.src, 'string');

  var element = document.getElementById(opts.elementId);
  if (divApplab.contains(element) && element.tagName === 'IMG') {
    element.src = Applab.maybeAddAssetPathPrefix(opts.src);

    if (!toBeCached[element.src]) {
      var img = new Image();
      img.src = element.src;
      toBeCached[element.src] = true;
    }

    return true;
  }
  return false;
};

applabCommands.playSound = function (opts) {
  apiValidateType(opts, 'playSound', 'url', opts.url, 'string');

  if (studioApp.cdoSounds) {
    var url = Applab.maybeAddAssetPathPrefix(opts.url);
    studioApp.cdoSounds.playURL(url, { volume: 1.0,
      forceHTML5: true,
      allowHTML5Mobile: true
    });
  }
};

applabCommands.innerHTML = function (opts) {
  var divApplab = document.getElementById('divApplab');
  var div = document.getElementById(opts.elementId);
  if (divApplab.contains(div)) {
    div.innerHTML = opts.html;
    return true;
  }
  return false;
};

applabCommands.deleteElement = function (opts) {
  var divApplab = document.getElementById('divApplab');
  apiValidateDomIdExistence(opts, 'deleteElement', 'id', opts.elementId, true);

  var div = document.getElementById(opts.elementId);
  if (divApplab.contains(div)) {
    // Special check to see if the active canvas is being deleted
    if (div == Applab.activeCanvas || div.contains(Applab.activeCanvas)) {
      delete Applab.activeCanvas;
    }
    return Boolean(div.parentElement.removeChild(div));
  }
  return false;
};

applabCommands.showElement = function (opts) {
  var divApplab = document.getElementById('divApplab');
  apiValidateDomIdExistence(opts, 'showElement', 'id', opts.elementId, true);

  var div = document.getElementById(opts.elementId);
  if (divApplab.contains(div)) {
    div.style.visibility = 'visible';
    return true;
  }
  return false;
};

applabCommands.hideElement = function (opts) {
  var divApplab = document.getElementById('divApplab');
  apiValidateDomIdExistence(opts, 'hideElement', 'id', opts.elementId, true);

  var div = document.getElementById(opts.elementId);
  if (divApplab.contains(div)) {
    div.style.visibility = 'hidden';
    return true;
  }
  return false;
};

applabCommands.setStyle = function (opts) {
  var divApplab = document.getElementById('divApplab');
  var div = document.getElementById(opts.elementId);
  if (divApplab.contains(div)) {
    div.style.cssText += opts.style;
    return true;
  }
  return false;
};

applabCommands.setParent = function (opts) {
  var divApplab = document.getElementById('divApplab');
  var div = document.getElementById(opts.elementId);
  var divNewParent = document.getElementById(opts.parentId);
  if (divApplab.contains(div) && divApplab.contains(divNewParent)) {
    return Boolean(div.parentElement.removeChild(div) && divNewParent.appendChild(div));
  }
  return false;
};

applabCommands.setPosition = function (opts) {
  var divApplab = document.getElementById('divApplab');
  apiValidateDomIdExistence(opts, 'setPosition', 'id', opts.elementId, true);
  apiValidateType(opts, 'setPosition', 'x', opts.left, 'number');
  apiValidateType(opts, 'setPosition', 'y', opts.top, 'number');

  var el = document.getElementById(opts.elementId);
  if (divApplab.contains(el)) {
    el.style.position = 'absolute';
    el.style.left = opts.left + 'px';
    el.style.top = opts.top + 'px';
    var setWidthHeight = false;
    // don't set width/height if
    // (1) both parameters are undefined AND
    // (2) width/height already specified OR IMG element with width/height attributes
    if (el.style.width.length > 0 && el.style.height.length > 0 || el.tagName === 'IMG' && el.width > 0 && el.height > 0) {
      if (typeof opts.width !== 'undefined' || typeof opts.height !== 'undefined') {
        setWidthHeight = true;
      }
    } else {
      setWidthHeight = true;
    }
    if (setWidthHeight) {
      apiValidateType(opts, 'setPosition', 'width', opts.width, 'number');
      apiValidateType(opts, 'setPosition', 'height', opts.height, 'number');
      setSize_(opts.elementId, opts.width, opts.height);
    }
    return true;
  }
  return false;
};

applabCommands.setSize = function (opts) {
  apiValidateType(opts, 'setSize', 'width', opts.width, 'number');
  apiValidateType(opts, 'setSize', 'height', opts.height, 'number');
  setSize_(opts.elementId, opts.width, opts.height);

  return true;
};

/**
 * Logic shared between setPosition and setSize for setting the size
 */
function setSize_(elementId, width, height) {
  var element = document.getElementById(elementId);
  var divApplab = document.getElementById('divApplab');
  if (divApplab.contains(element)) {
    element.style.width = width + 'px';
    element.style.height = height + 'px';
  }
}

applabCommands.getXPosition = function (opts) {
  var divApplab = document.getElementById('divApplab');
  apiValidateDomIdExistence(opts, 'getXPosition', 'id', opts.elementId, true);

  var div = document.getElementById(opts.elementId);
  if (divApplab.contains(div)) {
    var x = div.offsetLeft;
    while (div && div !== divApplab) {
      // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent
      // This property will return null on Webkit if the element is hidden
      // (the style.display of this element or any ancestor is "none") or if the
      // style.position of the element itself is set to "fixed".
      // This property will return null on Internet Explorer (9) if the
      // style.position of the element itself is set to "fixed".
      // (Having display:none does not affect this browser.)
      div = div.offsetParent;
      if (div) {
        x += div.offsetLeft;
      }
    }
    return x;
  }
  return 0;
};

applabCommands.getYPosition = function (opts) {
  var divApplab = document.getElementById('divApplab');
  apiValidateDomIdExistence(opts, 'getYPosition', 'id', opts.elementId, true);

  var div = document.getElementById(opts.elementId);
  if (divApplab.contains(div)) {
    var y = div.offsetTop;
    while (div && div !== divApplab) {
      div = div.offsetParent;
      if (div) {
        y += div.offsetTop;
      }
    }
    return y;
  }
  return 0;
};

applabCommands.onEventFired = function (opts, e) {
  if (typeof e != 'undefined') {
    var div = document.getElementById('divApplab');
    var xScale = div.getBoundingClientRect().width / div.offsetWidth;
    var yScale = div.getBoundingClientRect().height / div.offsetHeight;
    var xOffset = 0;
    var yOffset = 0;
    while (div) {
      xOffset += div.offsetLeft;
      yOffset += div.offsetTop;
      div = div.offsetParent;
    }

    var applabEvent = {};
    // Pass these properties through to applabEvent:
    ['altKey', 'button', 'charCode', 'ctrlKey', 'keyCode', 'keyIdentifier', 'keyLocation', 'location', 'metaKey', 'movementX', 'movementY', 'offsetX', 'offsetY', 'repeat', 'shiftKey', 'type', 'which'].forEach(function (prop) {
      if (typeof e[prop] !== 'undefined') {
        applabEvent[prop] = e[prop];
      }
    });
    // Convert x coordinates and then pass through to applabEvent:
    ['clientX', 'pageX', 'x'].forEach(function (prop) {
      if (typeof e[prop] !== 'undefined') {
        applabEvent[prop] = (e[prop] - xOffset) / xScale;
      }
    });
    // Convert y coordinates and then pass through to applabEvent:
    ['clientY', 'pageY', 'y'].forEach(function (prop) {
      if (typeof e[prop] !== 'undefined') {
        applabEvent[prop] = (e[prop] - yOffset) / yScale;
      }
    });
    // Replace DOM elements with IDs and then add them to applabEvent:
    ['fromElement', 'srcElement', 'currentTarget', 'relatedTarget', 'target', 'toElement'].forEach(function (prop) {
      if (e[prop]) {
        applabEvent[prop + "Id"] = e[prop].id;
      }
    });
    // Attempt to populate key property (not yet supported in Chrome/Safari):
    //
    // keyup/down has no charCode and can be translated with the keyEvent[] map
    // keypress can use charCode
    //
    var keyProp = e.charCode ? String.fromCharCode(e.charCode) : keyEvent[e.keyCode];
    if (typeof keyProp !== 'undefined') {
      applabEvent.key = keyProp;
    }

    // Push a function call on the queue with an array of arguments consisting
    // of the applabEvent parameter (and any extraArgs originally supplied)
    Applab.JSInterpreter.queueEvent(opts.func, [applabEvent].concat(opts.extraArgs));
  } else {
    Applab.JSInterpreter.queueEvent(opts.func, opts.extraArgs);
  }
  if (Applab.JSInterpreter) {
    // Execute the interpreter and if a return value is sent back from the
    // interpreter's event handler, pass that back in the native world

    // NOTE: the interpreter will not execute forever, if the event handler
    // takes too long, executeInterpreter() will return and the native side
    // will just see 'undefined' as the return value. The rest of the interpreter
    // event handler will run in the next onTick(), but the return value will
    // no longer have any effect.
    Applab.JSInterpreter.executeInterpreter(false, true);
    return Applab.JSInterpreter.lastCallbackRetVal;
  }
};

applabCommands.onEvent = function (opts) {
  var divApplab = document.getElementById('divApplab');
  // Special case the id of 'body' to mean the app's container (divApplab)
  // TODO (cpirich): apply this logic more broadly (setStyle, etc.)
  if (opts.elementId === 'body') {
    opts.elementId = 'divApplab';
  } else {
    apiValidateDomIdExistence(opts, 'onEvent', 'id', opts.elementId, true);
  }
  apiValidateType(opts, 'onEvent', 'type', opts.eventName, 'string');
  // PARAMNAME: onEvent: callback vs. callbackFunction
  apiValidateType(opts, 'onEvent', 'callback', opts.func, 'function');
  var domElement = document.getElementById(opts.elementId);
  if (divApplab.contains(domElement)) {
    if (domElement.tagName.toUpperCase() === 'DIV' && domElement.contentEditable && opts.eventName === 'change') {
      // contentEditable divs don't generate a change event, so
      // synthesize one here.
      var callback = applabCommands.onEventFired.bind(this, opts);
      ChangeEventHandler.addChangeEventHandler(domElement, callback);
      return true;
    }
    switch (opts.eventName) {
      /*
      Check for a specific set of Hammer v1 event names (full set below) and if
      we find a match, instantiate Hammer on that element
       TODO (cpirich): review the following:
      * whether using Hammer v1 events is the right choice
      * choose the specific list of events
      * consider instantiating Hammer just once per-element or on divApplab
      * review use of preventDefault
       case 'hold':
      case 'tap':
      case 'doubletap':
      case 'swipe':
      case 'swipeup':
      case 'swipedown':
      case 'swipeleft':
      case 'swiperight':
      case 'rotate':
      case 'release':
      case 'gesture':
      case 'pinch':
      case 'pinchin':
      case 'pinchout':
        var hammerElement = new Hammer(divApplab, { 'preventDefault': true });
        hammerElement.on(opts.eventName,
                         applabCommands.onEventFired.bind(this, opts));
        break;
      */
      case 'click':
      case 'change':
      case 'keyup':
      case 'mousemove':
      case 'dblclick':
      case 'mousedown':
      case 'mouseup':
      case 'mouseover':
      case 'mouseout':
      case 'keydown':
      case 'keypress':
      case 'input':
        // For now, we're not tracking how many of these we add and we don't allow
        // the user to detach the handler. We detach all listeners by cloning the
        // divApplab DOM node inside of reset()
        domElement.addEventListener(opts.eventName, applabCommands.onEventFired.bind(this, opts));
        break;
      default:
        return false;
    }
    return true;
  }
  return false;
};

applabCommands.onHttpRequestEvent = function (opts) {
  // Ensure that this event was requested by the same instance of the interpreter
  // that is currently active before proceeding...
  if (opts.JSInterpreter === Applab.JSInterpreter) {
    if (this.readyState === 4) {
      Applab.JSInterpreter.queueEvent(opts.func, [Number(this.status), String(this.getResponseHeader('content-type')), String(this.responseText)]);
    }
  }
};

applabCommands.startWebRequest = function (opts) {
  apiValidateType(opts, 'startWebRequest', 'url', opts.url, 'string');
  apiValidateType(opts, 'startWebRequest', 'callback', opts.func, 'function');
  opts.JSInterpreter = Applab.JSInterpreter;
  var req = new XMLHttpRequest();
  req.onreadystatechange = applabCommands.onHttpRequestEvent.bind(req, opts);
  req.open('GET', opts.url, true);
  req.send();
};

applabCommands.onTimerFired = function (opts) {
  // ensure that this event came from the active interpreter instance:
  Applab.JSInterpreter.queueEvent(opts.func);
  // NOTE: the interpreter will not execute forever, if the event handler
  // takes too long, executeInterpreter() will return and the rest of the
  // user's code will execute in the next onTick()
  Applab.JSInterpreter.executeInterpreter(false, true);
};

applabCommands.setTimeout = function (opts) {
  // PARAMNAME: setTimeout: callback vs. function
  // PARAMNAME: setTimeout: ms vs. milliseconds
  apiValidateType(opts, 'setTimeout', 'callback', opts.func, 'function');
  apiValidateType(opts, 'setTimeout', 'milliseconds', opts.milliseconds, 'number');

  return apiTimeoutList.setTimeout(applabCommands.onTimerFired.bind(this, opts), opts.milliseconds);
};

applabCommands.clearTimeout = function (opts) {
  apiValidateType(opts, 'clearTimeout', 'timeout', opts.timeoutId, 'number');
  // NOTE: we do not currently check to see if this is a timer created by
  // our applabCommands.setTimeout() function
  apiTimeoutList.clearTimeout(opts.timeoutId);
};

applabCommands.setInterval = function (opts) {
  // PARAMNAME: setInterval: callback vs. function
  // PARAMNAME: setInterval: ms vs. milliseconds
  apiValidateType(opts, 'setInterval', 'callback', opts.func, 'function');
  apiValidateType(opts, 'setInterval', 'milliseconds', opts.milliseconds, 'number');

  return apiTimeoutList.setInterval(applabCommands.onTimerFired.bind(this, opts), opts.milliseconds);
};

applabCommands.clearInterval = function (opts) {
  apiValidateType(opts, 'clearInterval', 'interval', opts.intervalId, 'number');
  // NOTE: we do not currently check to see if this is a timer created by
  // our applabCommands.setInterval() function
  apiTimeoutList.clearInterval(opts.intervalId);
};

applabCommands.createRecord = function (opts) {
  // PARAMNAME: createRecord: table vs. tableName
  // PARAMNAME: createRecord: callback vs. callbackFunction
  apiValidateType(opts, 'createRecord', 'table', opts.table, 'string');
  apiValidateType(opts, 'createRecord', 'record', opts.record, 'object');
  apiValidateType(opts, 'createRecord', 'record.id', opts.record.id, 'undefined');
  apiValidateType(opts, 'createRecord', 'callback', opts.onSuccess, 'function', OPTIONAL);
  apiValidateType(opts, 'createRecord', 'onError', opts.onError, 'function', OPTIONAL);
  opts.JSInterpreter = Applab.JSInterpreter;
  var onSuccess = applabCommands.handleCreateRecord.bind(this, opts);
  var onError = errorHandler.handleError.bind(this, opts);
  AppStorage.createRecord(opts.table, opts.record, onSuccess, onError);
};

applabCommands.handleCreateRecord = function (opts, record) {
  // Ensure that this event was requested by the same instance of the interpreter
  // that is currently active before proceeding...
  if (opts.onSuccess && opts.JSInterpreter === Applab.JSInterpreter) {
    Applab.JSInterpreter.queueEvent(opts.onSuccess, [record]);
  }
};

applabCommands.getKeyValue = function (opts) {
  // PARAMNAME: getKeyValue: callback vs. callbackFunction
  apiValidateType(opts, 'getKeyValue', 'key', opts.key, 'string');
  apiValidateType(opts, 'getKeyValue', 'callback', opts.onSuccess, 'function');
  apiValidateType(opts, 'getKeyValue', 'onError', opts.onError, 'function', OPTIONAL);
  opts.JSInterpreter = Applab.JSInterpreter;
  var onSuccess = applabCommands.handleReadValue.bind(this, opts);
  var onError = errorHandler.handleError.bind(this, opts);
  AppStorage.getKeyValue(opts.key, onSuccess, onError);
};

applabCommands.handleReadValue = function (opts, value) {
  // Ensure that this event was requested by the same instance of the interpreter
  // that is currently active before proceeding...
  if (opts.onSuccess && opts.JSInterpreter === Applab.JSInterpreter) {
    Applab.JSInterpreter.queueEvent(opts.onSuccess, [value]);
  }
};

applabCommands.setKeyValue = function (opts) {
  // PARAMNAME: setKeyValue: callback vs. callbackFunction
  apiValidateType(opts, 'setKeyValue', 'key', opts.key, 'string');
  apiValidateType(opts, 'setKeyValue', 'value', opts.value, 'primitive');
  apiValidateType(opts, 'setKeyValue', 'callback', opts.onSuccess, 'function', OPTIONAL);
  apiValidateType(opts, 'setKeyValue', 'onError', opts.onError, 'function', OPTIONAL);
  opts.JSInterpreter = Applab.JSInterpreter;
  var onSuccess = applabCommands.handleSetKeyValue.bind(this, opts);
  var onError = errorHandler.handleError.bind(this, opts);
  AppStorage.setKeyValue(opts.key, opts.value, onSuccess, onError);
};

applabCommands.handleSetKeyValue = function (opts) {
  // Ensure that this event was requested by the same instance of the interpreter
  // that is currently active before proceeding...
  if (opts.onSuccess && opts.JSInterpreter === Applab.JSInterpreter) {
    Applab.JSInterpreter.queueEvent(opts.onSuccess);
  }
};

applabCommands.readRecords = function (opts) {
  // PARAMNAME: readRecords: table vs. tableName
  // PARAMNAME: readRecords: callback vs. callbackFunction
  // PARAMNAME: readRecords: terms vs. searchTerms
  apiValidateType(opts, 'readRecords', 'table', opts.table, 'string');
  apiValidateType(opts, 'readRecords', 'searchTerms', opts.searchParams, 'object');
  apiValidateType(opts, 'readRecords', 'callback', opts.onSuccess, 'function');
  apiValidateType(opts, 'readRecords', 'onError', opts.onError, 'function', OPTIONAL);
  opts.JSInterpreter = Applab.JSInterpreter;
  var onSuccess = applabCommands.handleReadRecords.bind(this, opts);
  var onError = errorHandler.handleError.bind(this, opts);
  AppStorage.readRecords(opts.table, opts.searchParams, onSuccess, onError);
};

applabCommands.handleReadRecords = function (opts, records) {
  // Ensure that this event was requested by the same instance of the interpreter
  // that is currently active before proceeding...
  if (opts.onSuccess && opts.JSInterpreter === Applab.JSInterpreter) {
    Applab.JSInterpreter.queueEvent(opts.onSuccess, [records]);
  }
};

applabCommands.updateRecord = function (opts) {
  // PARAMNAME: updateRecord: table vs. tableName
  // PARAMNAME: updateRecord: callback vs. callbackFunction
  apiValidateType(opts, 'updateRecord', 'table', opts.table, 'string');
  apiValidateType(opts, 'updateRecord', 'record', opts.record, 'object');
  apiValidateTypeAndRange(opts, 'updateRecord', 'record.id', opts.record.id, 'number', 1, Infinity);
  apiValidateType(opts, 'updateRecord', 'callback', opts.onSuccess, 'function', OPTIONAL);
  apiValidateType(opts, 'updateRecord', 'onError', opts.onError, 'function', OPTIONAL);
  opts.JSInterpreter = Applab.JSInterpreter;
  var onSuccess = applabCommands.handleUpdateRecord.bind(this, opts);
  var onError = errorHandler.handleError.bind(this, opts);
  AppStorage.updateRecord(opts.table, opts.record, onSuccess, onError);
};

applabCommands.handleUpdateRecord = function (opts, record) {
  // Ensure that this event was requested by the same instance of the interpreter
  // that is currently active before proceeding...
  if (opts.onSuccess && opts.JSInterpreter === Applab.JSInterpreter) {
    Applab.JSInterpreter.queueEvent(opts.onSuccess, [record]);
  }
};

applabCommands.deleteRecord = function (opts) {
  // PARAMNAME: deleteRecord: table vs. tableName
  // PARAMNAME: deleteRecord: callback vs. callbackFunction
  apiValidateType(opts, 'deleteRecord', 'table', opts.table, 'string');
  apiValidateType(opts, 'deleteRecord', 'record', opts.record, 'object');
  apiValidateTypeAndRange(opts, 'deleteRecord', 'record.id', opts.record.id, 'number', 1, Infinity);
  apiValidateType(opts, 'deleteRecord', 'callback', opts.onSuccess, 'function', OPTIONAL);
  apiValidateType(opts, 'deleteRecord', 'onError', opts.onError, 'function', OPTIONAL);
  opts.JSInterpreter = Applab.JSInterpreter;
  var onSuccess = applabCommands.handleDeleteRecord.bind(this, opts);
  var onError = errorHandler.handleError.bind(this, opts);
  AppStorage.deleteRecord(opts.table, opts.record, onSuccess, onError);
};

applabCommands.handleDeleteRecord = function (opts) {
  // Ensure that this event was requested by the same instance of the interpreter
  // that is currently active before proceeding...
  if (opts.onSuccess && opts.JSInterpreter === Applab.JSInterpreter) {
    Applab.JSInterpreter.queueEvent(opts.onSuccess);
  }
};

applabCommands.getUserId = function (opts) {
  if (!Applab.user.applabUserId) {
    throw new Error("User ID failed to load.");
  }
  return Applab.user.applabUserId;
};

/**
 * How to execute the 'drawChartFromRecords' function.
 * Delegates most work to ChartApi.drawChartFromRecords, but a few things are
 * handled directly at this layer:
 *   - Type validation (before execution)
 *   - Queueing callbacks (after execution)
 *   - Reporting errors and warnings (after execution)
 * @see {ChartApi}
 * @param {Object} opts
 * @param {string} opts.chartId
 * @param {ChartType} opts.chartType
 * @param {string} opts.tableName
 * @param {string[]} opts.columns
 * @param {Object} opts.options
 * @param {function} opts.callback
 */
applabCommands.drawChartFromRecords = function (opts) {
  apiValidateType(opts, 'drawChartFromRecords', 'chartId', opts.chartId, 'string');
  apiValidateType(opts, 'drawChartFromRecords', 'chartType', opts.chartType, 'string');
  apiValidateType(opts, 'drawChartFromRecords', 'tableName', opts.tableName, 'string');
  apiValidateType(opts, 'drawChartFromRecords', 'columns', opts.columns, 'array');
  apiValidateType(opts, 'drawChartFromRecords', 'options', opts.options, 'object', OPTIONAL);
  apiValidateType(opts, 'drawChartFromRecords', 'callback', opts.callback, 'function', OPTIONAL);
  apiValidateDomIdExistence(opts, 'drawChartFromRecords', 'chartId', opts.chartId, true);

  // Bind a reference to the current interpreter so we can later make sure we're
  // not doing anything asynchronous across re-runs.
  var jsInterpreter = Applab.JSInterpreter;

  var currentLineNumber = getCurrentLineNumber(jsInterpreter);

  var chartApi = new ChartApi();

  /**
   * What to do after drawing the chart succeeds/completes:
   *   1. Report any warnings, attributed to the current line.
   *   2. Queue the user-provided success callback.
   *
   * @param {Error[]} warnings - Any non-terminal errors generated by the
   *        drawChartFromRecords call, which we will report on after the fact
   *        without halting execution.
   */
  var onSuccess = function onSuccess() {
    stopLoadingSpinnerFor(opts.chartId);
    chartApi.warnings.forEach(function (warning) {
      outputError(warning.message, ErrorLevel.WARNING, currentLineNumber);
    });
    queueCallback(jsInterpreter, opts.callback);
  };

  /**
   * What to do if something goes wrong:
   *   1. Report the error.
   *
   * @param {Error} error - A rejected promise usually passes an error.
   */
  var onError = function onError(error) {
    stopLoadingSpinnerFor(opts.chartId);
    outputError(error.message, ErrorLevel.ERROR, currentLineNumber);
  };

  startLoadingSpinnerFor(opts.chartId);
  chartApi.drawChartFromRecords(opts.chartId, opts.chartType, opts.tableName, opts.columns, opts.options).then(onSuccess, onError);
};

/**
 * If the element is found, add the 'loading' class to it so that it
 * displays the loading spinner.
 * @param {string} elementId
 */
function startLoadingSpinnerFor(elementId) {
  var element = document.getElementById(elementId);
  if (!element) {
    return;
  }

  // Add 'loading' class
  element.className += ' loading';
}

/**
 * If the element is found, make sure to remove the 'loading' class from it
 * so that it hides the loading spinner.
 * @param {string} elementId
 */
function stopLoadingSpinnerFor(elementId) {
  var element = document.getElementById(elementId);
  if (!element) {
    return;
  }

  // Remove 'loading' class
  element.className = element.className.split(/\s+/).filter(function (x) {
    return !/loading/i.test(x);
  }).join(' ');
}

/**
 * Queue the given callback in the given interpreter IF the callback exists
 * AND the interpreter is still the active interpreter for Applab.
 * @param {JSInterpreter} jsInterpreter
 * @param {function} callback
 * @param {Object[]} args
 */
var queueCallback = function queueCallback(jsInterpreter, callback, args) {
  // Ensure that this event was requested by the same instance of the interpreter
  // that is currently active, so we don't queue callbacks for slow async events
  // from past executions of the app.
  // (We use a different interpreter instance for every run.)
  if (callback && jsInterpreter === Applab.JSInterpreter) {
    Applab.JSInterpreter.queueEvent(callback, args);
  }
};

/**
 * For the provided interpreter, get the nearest line number in user code
 * up the stack from the last executed command.
 * @param {JSInterpreter} jsInterpreter
 * @returns {number}
 */
var getCurrentLineNumber = function getCurrentLineNumber(jsInterpreter) {
  return 1 + jsInterpreter.getNearestUserCodeLine();
};

},{"../StudioApp":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/StudioApp.js","../codegen":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/codegen.js","../sharedJsxStyles":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/sharedJsxStyles.js","../timeoutList":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/timeoutList.js","../utils":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/utils.js","./ChangeEventHandler":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/ChangeEventHandler.js","./ChartApi":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/ChartApi.js","./appStorage":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/appStorage.js","./applabTurtle":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/applabTurtle.js","./errorHandler":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/errorHandler.js","./keyEvent":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/keyEvent.js","./rgbcolor.js":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/rgbcolor.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/rgbcolor.js":[function(require,module,exports){
/**
 * A class to parse color values
 * @author Stoyan Stefanov <sstoo@gmail.com>
 * @link   http://www.phpied.com/rgb-color-parser-in-javascript/
 * @license Use it if you like it
 */

// hex regular expressions updated to require [0-9a-f] (cpirich)
// channels declared as local variable to avoid conflicts (cpirich)
// cleanup jshint errors (cpirich)
// add rgba support (davidsbailey)

'use strict';

module.exports = function (color_string) {
    this.ok = false;

    // strip any leading #
    if (color_string.charAt(0) == '#') {
        // remove # if any
        color_string = color_string.substr(1, 6);
    }

    color_string = color_string.replace(/ /g, '');
    color_string = color_string.toLowerCase();

    // before getting into regexps, try simple matches
    // and overwrite the input
    var simple_colors = {
        aliceblue: 'f0f8ff',
        antiquewhite: 'faebd7',
        aqua: '00ffff',
        aquamarine: '7fffd4',
        azure: 'f0ffff',
        beige: 'f5f5dc',
        bisque: 'ffe4c4',
        black: '000000',
        blanchedalmond: 'ffebcd',
        blue: '0000ff',
        blueviolet: '8a2be2',
        brown: 'a52a2a',
        burlywood: 'deb887',
        cadetblue: '5f9ea0',
        chartreuse: '7fff00',
        chocolate: 'd2691e',
        coral: 'ff7f50',
        cornflowerblue: '6495ed',
        cornsilk: 'fff8dc',
        crimson: 'dc143c',
        cyan: '00ffff',
        darkblue: '00008b',
        darkcyan: '008b8b',
        darkgoldenrod: 'b8860b',
        darkgray: 'a9a9a9',
        darkgreen: '006400',
        darkkhaki: 'bdb76b',
        darkmagenta: '8b008b',
        darkolivegreen: '556b2f',
        darkorange: 'ff8c00',
        darkorchid: '9932cc',
        darkred: '8b0000',
        darksalmon: 'e9967a',
        darkseagreen: '8fbc8f',
        darkslateblue: '483d8b',
        darkslategray: '2f4f4f',
        darkturquoise: '00ced1',
        darkviolet: '9400d3',
        deeppink: 'ff1493',
        deepskyblue: '00bfff',
        dimgray: '696969',
        dodgerblue: '1e90ff',
        feldspar: 'd19275',
        firebrick: 'b22222',
        floralwhite: 'fffaf0',
        forestgreen: '228b22',
        fuchsia: 'ff00ff',
        gainsboro: 'dcdcdc',
        ghostwhite: 'f8f8ff',
        gold: 'ffd700',
        goldenrod: 'daa520',
        gray: '808080',
        green: '008000',
        greenyellow: 'adff2f',
        honeydew: 'f0fff0',
        hotpink: 'ff69b4',
        indianred: 'cd5c5c',
        indigo: '4b0082',
        ivory: 'fffff0',
        khaki: 'f0e68c',
        lavender: 'e6e6fa',
        lavenderblush: 'fff0f5',
        lawngreen: '7cfc00',
        lemonchiffon: 'fffacd',
        lightblue: 'add8e6',
        lightcoral: 'f08080',
        lightcyan: 'e0ffff',
        lightgoldenrodyellow: 'fafad2',
        lightgrey: 'd3d3d3',
        lightgreen: '90ee90',
        lightpink: 'ffb6c1',
        lightsalmon: 'ffa07a',
        lightseagreen: '20b2aa',
        lightskyblue: '87cefa',
        lightslateblue: '8470ff',
        lightslategray: '778899',
        lightsteelblue: 'b0c4de',
        lightyellow: 'ffffe0',
        lime: '00ff00',
        limegreen: '32cd32',
        linen: 'faf0e6',
        magenta: 'ff00ff',
        maroon: '800000',
        mediumaquamarine: '66cdaa',
        mediumblue: '0000cd',
        mediumorchid: 'ba55d3',
        mediumpurple: '9370d8',
        mediumseagreen: '3cb371',
        mediumslateblue: '7b68ee',
        mediumspringgreen: '00fa9a',
        mediumturquoise: '48d1cc',
        mediumvioletred: 'c71585',
        midnightblue: '191970',
        mintcream: 'f5fffa',
        mistyrose: 'ffe4e1',
        moccasin: 'ffe4b5',
        navajowhite: 'ffdead',
        navy: '000080',
        oldlace: 'fdf5e6',
        olive: '808000',
        olivedrab: '6b8e23',
        orange: 'ffa500',
        orangered: 'ff4500',
        orchid: 'da70d6',
        palegoldenrod: 'eee8aa',
        palegreen: '98fb98',
        paleturquoise: 'afeeee',
        palevioletred: 'd87093',
        papayawhip: 'ffefd5',
        peachpuff: 'ffdab9',
        peru: 'cd853f',
        pink: 'ffc0cb',
        plum: 'dda0dd',
        powderblue: 'b0e0e6',
        purple: '800080',
        red: 'ff0000',
        rosybrown: 'bc8f8f',
        royalblue: '4169e1',
        saddlebrown: '8b4513',
        salmon: 'fa8072',
        sandybrown: 'f4a460',
        seagreen: '2e8b57',
        seashell: 'fff5ee',
        sienna: 'a0522d',
        silver: 'c0c0c0',
        skyblue: '87ceeb',
        slateblue: '6a5acd',
        slategray: '708090',
        snow: 'fffafa',
        springgreen: '00ff7f',
        steelblue: '4682b4',
        tan: 'd2b48c',
        teal: '008080',
        thistle: 'd8bfd8',
        tomato: 'ff6347',
        turquoise: '40e0d0',
        violet: 'ee82ee',
        violetred: 'd02090',
        wheat: 'f5deb3',
        white: 'ffffff',
        whitesmoke: 'f5f5f5',
        yellow: 'ffff00',
        yellowgreen: '9acd32'
    };
    for (var key in simple_colors) {
        if (color_string == key) {
            color_string = simple_colors[key];
        }
    }
    // emd of simple type-in colors

    // array of color definition objects
    var color_defs = [{
        re: /^rgb\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)$/,
        example: ['rgb(123, 234, 45)', 'rgb(255,234,245)'],
        process: function process(bits) {
            return [parseInt(bits[1]), parseInt(bits[2]), parseInt(bits[3])];
        }
    }, {
        re: /^rgba\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*((?:\d+(?:\.\d+)?)|(?:\.\d+))\s*\)$/,
        example: ['rgba(123, 234, 45, .33)', 'rgba(255,234,245,1)'],
        process: function process(bits) {
            return [parseInt(bits[1]), parseInt(bits[2]), parseInt(bits[3]), parseInt(bits[4])];
        }
    }, {
        re: /^([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/,
        example: ['#00ff00', '336699'],
        process: function process(bits) {
            return [parseInt(bits[1], 16), parseInt(bits[2], 16), parseInt(bits[3], 16)];
        }
    }, {
        re: /^([0-9a-f]{1})([0-9a-f]{1})([0-9a-f]{1})$/,
        example: ['#fb0', 'f0f'],
        process: function process(bits) {
            return [parseInt(bits[1] + bits[1], 16), parseInt(bits[2] + bits[2], 16), parseInt(bits[3] + bits[3], 16)];
        }
    }];

    // search through the definitions to find a match
    for (var i = 0; i < color_defs.length; i++) {
        var re = color_defs[i].re;
        var processor = color_defs[i].process;
        var bits = re.exec(color_string);
        if (bits) {
            var channels = processor(bits);
            this.r = channels[0];
            this.g = channels[1];
            this.b = channels[2];
            this.a = channels[3];
            this.ok = true;
        }
    }

    // validate/cleanup values
    this.r = this.r < 0 || isNaN(this.r) ? 0 : this.r > 255 ? 255 : this.r;
    this.g = this.g < 0 || isNaN(this.g) ? 0 : this.g > 255 ? 255 : this.g;
    this.b = this.b < 0 || isNaN(this.b) ? 0 : this.b > 255 ? 255 : this.b;
    this.a = this.a < 0 ? 0 : this.a > 1 || isNaN(this.a) ? 1 : this.a;

    // some getters
    this.toRGB = function () {
        return 'rgb(' + this.r + ', ' + this.g + ', ' + this.b + ')';
    };
    this.toRGBA = function () {
        return 'rgba(' + this.r + ', ' + this.g + ', ' + this.b + ', ' + this.a + ')';
    };
    this.toHex = function () {
        var r = this.r.toString(16);
        var g = this.g.toString(16);
        var b = this.b.toString(16);
        if (r.length == 1) {
            r = '0' + r;
        }
        if (g.length == 1) {
            g = '0' + g;
        }
        if (b.length == 1) {
            b = '0' + b;
        }
        return '#' + r + g + b;
    };
};

},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/keyEvent.js":[function(require,module,exports){
// Table provided by https://www.jabcreations.com/blog/polyfill-for-event.key

'use strict';

module.exports = {
  '65': 'a',
  '66': 'b',
  '67': 'c',
  '68': 'd',
  '69': 'e',
  '70': 'f',
  '71': 'g',
  '72': 'h',
  '73': 'i',
  '74': 'j',
  '75': 'k',
  '76': 'l',
  '77': 'm',
  '78': 'n',
  '79': 'o',
  '80': 'p',
  '81': 'q',
  '82': 'r',
  '83': 's',
  '84': 't',
  '85': 'u',
  '86': 'v',
  '87': 'w',
  '88': 'x',
  '89': 'y',
  '90': 'z',
  '8': 'Backspace',
  '9': 'Tab',
  '13': 'Enter',
  '16': 'Shift',
  '17': 'Control',
  '18': 'Alt',
  '20': 'CapsLock',
  '27': 'Esc',
  '32': ' ',
  '33': 'PageUp',
  '34': 'PageDown',
  '35': 'End',
  '36': 'Home',
  '37': 'Left',
  '38': 'Up',
  '39': 'Right',
  '40': 'Down',
  '45': 'Insert',
  '46': 'Del',
  '48': '0',
  '49': '1',
  '50': '2',
  '51': '3',
  '52': '4',
  '53': '5',
  '54': '6',
  '55': '7',
  '56': '8',
  '57': '9',
  '91': 'OS',
  '92': 'OS',
  '93': 'Menu',
  '96': '0',
  '97': '1',
  '98': '2',
  '99': '3',
  '100': '4',
  '101': '5',
  '102': '6',
  '103': '7',
  '104': '8',
  '105': '9',
  '106': '*',
  '107': '+',
  '109': '-',
  '110': '.',
  '111': '/',
  '112': 'F1',
  '113': 'F2',
  '114': 'F3',
  '115': 'F4',
  '116': 'F5',
  '117': 'F6',
  '118': 'F7',
  '119': 'F8',
  '120': 'F9',
  '121': 'F10',
  '122': 'F11',
  '123': 'F12',
  '144': 'NumLock',
  '145': 'ScrollLock',
  '186': ':',
  '187': '=',
  '188': ',',
  '189': '-',
  '190': '.',
  '191': '/',
  '192': '`',
  '219': '[',
  '220': '\\',
  '221': ']',
  '222': '\''
};

},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/errorHandler.js":[function(require,module,exports){
'use strict';

var annotationList = require('../acemode/annotationList');

var ErrorLevel = {
  WARNING: 'WARNING',
  ERROR: 'ERROR'
};

function outputApplabConsole(output) {
  function stringifyNonStrings(object) {
    if (typeof object === 'string' || object instanceof String) {
      return object;
    } else {
      return JSON.stringify(object);
    }
  }

  // first pass through to the real browser console log if available:
  if (console.log) {
    console.log(output);
  }
  // then put it in the applab console visible to the user:
  var debugOutput = document.getElementById('debug-output');
  if (debugOutput) {
    if (debugOutput.textContent.length > 0) {
      debugOutput.textContent += '\n';
    }
    debugOutput.textContent += stringifyNonStrings(output);

    debugOutput.scrollTop = debugOutput.scrollHeight;
  }
}

/**
 * Output error to console and gutter as appropriate
 * @param {string} warning Text for warning
 * @param {ErrorLevel} level
 * @param {number} lineNum One indexed line number
 */
function outputError(warning, level, lineNum) {
  var text = level + ': ';
  if (lineNum !== undefined) {
    text += 'Line: ' + lineNum + ': ';
  }
  text += warning;
  outputApplabConsole(text);
  if (lineNum !== undefined) {
    annotationList.addRuntimeAnnotation(level, lineNum, warning);
  }
}

function handleError(opts, message) {
  // Ensure that this event was requested by the same instance of the interpreter
  // that is currently active before proceeding...
  if (opts.onError && opts.JSInterpreter === Applab.JSInterpreter) {
    Applab.JSInterpreter.queueEvent(opts.onError, [message]);
  } else {
    outputApplabConsole(message);
  }
}

module.exports = {
  ErrorLevel: ErrorLevel,
  outputApplabConsole: outputApplabConsole,
  outputError: outputError,
  handleError: handleError
};

},{"../acemode/annotationList":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/acemode/annotationList.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/apiBlockly.js":[function(require,module,exports){
'use strict';

exports.randomFromArray = function (values) {
  var key = Math.floor(Math.random() * values.length);
  return values[key];
};

// APIs needed for blockly (must include blockId) (keep in sync with api.js):

exports.container = function (blockId, elementId, html) {
  return Applab.executeCmd(blockId, 'container', { 'elementId': elementId,
    'html': html });
};

exports.write = function (blockId, html) {
  return Applab.executeCmd(blockId, 'write', { 'html': html });
};

exports.innerHTML = function (blockId, elementId, html) {
  return Applab.executeCmd(blockId, 'innerHTML', { 'elementId': elementId,
    'html': html });
};

exports.deleteElement = function (blockId, elementId) {
  return Applab.executeCmd(blockId, 'deleteElement', { 'elementId': elementId });
};

exports.showElement = function (blockId, elementId) {
  return Applab.executeCmd(blockId, 'showElement', { 'elementId': elementId });
};

exports.hideElement = function (blockId, elementId) {
  return Applab.executeCmd(blockId, 'hideElement', { 'elementId': elementId });
};

exports.setScreen = function (blockId, screenId) {
  return Applab.executeCmd(blockId, 'setScreen', { 'screenId': screenId });
};

exports.button = function (blockId, elementId, text) {
  return Applab.executeCmd(blockId, 'button', { 'elementId': elementId,
    'text': text });
};

exports.image = function (blockId, elementId, src) {
  return Applab.executeCmd(blockId, 'image', { 'elementId': elementId,
    'src': src });
};

exports.setPosition = function (blockId, elementId, left, top, width, height) {
  return Applab.executeCmd(blockId, 'setPosition', { 'elementId': elementId,
    'left': left,
    'top': top,
    'width': width,
    'height': height });
};

exports.setSize = function (blockId, elementId, width, height) {
  return Applab.executeCmd(blockId, 'setSize', { 'elementId': elementId,
    'width': width,
    'height': height });
};

exports.getXPosition = function (blockId, elementId) {
  return Applab.executeCmd(blockId, 'getXPosition', { 'elementId': elementId });
};

exports.getYPosition = function (blockId, elementId) {
  return Applab.executeCmd(blockId, 'getYPosition', { 'elementId': elementId });
};

exports.createCanvas = function (blockId, elementId, width, height) {
  return Applab.executeCmd(blockId, 'createCanvas', { 'elementId': elementId,
    'width': width,
    'height': height });
};

exports.setActiveCanvas = function (blockId, elementId) {
  return Applab.executeCmd(blockId, 'setActiveCanvas', { 'elementId': elementId });
};

exports.line = function (blockId, x1, y1, x2, y2) {
  return Applab.executeCmd(blockId, 'line', { 'x1': x1,
    'y1': y1,
    'x2': x2,
    'y2': y2 });
};

exports.circle = function (blockId, x, y, radius) {
  return Applab.executeCmd(blockId, 'circle', { 'x': x,
    'y': y,
    'radius': radius });
};

exports.rect = function (blockId, x, y, width, height) {
  return Applab.executeCmd(blockId, 'rect', { 'x': x,
    'y': y,
    'width': width,
    'height': height });
};

exports.setStrokeWidth = function (blockId, width) {
  return Applab.executeCmd(blockId, 'setStrokeWidth', { 'width': width });
};

exports.setStrokeColor = function (blockId, color) {
  return Applab.executeCmd(blockId, 'setStrokeColor', { 'color': color });
};

exports.setFillColor = function (blockId, color) {
  return Applab.executeCmd(blockId, 'setFillColor', { 'color': color });
};

exports.clearCanvas = function (blockId) {
  return Applab.executeCmd(blockId, 'clearCanvas');
};

exports.drawImage = function (blockId, imageId, x, y, width, height) {
  return Applab.executeCmd(blockId, 'drawImage', { 'imageId': imageId,
    'x': x,
    'y': y,
    'width': width,
    'height': height });
};

exports.getImageData = function (blockId, x, y, width, height) {
  return Applab.executeCmd(blockId, 'getImageData', { 'x': x,
    'y': y,
    'width': width,
    'height': height });
};

exports.putImageData = function (blockId, imageData, x, y) {
  return Applab.executeCmd(blockId, 'putImageData', { 'imageData': imageData,
    'x': x,
    'y': y });
};

exports.textInput = function (blockId, elementId, text) {
  return Applab.executeCmd(blockId, 'textInput', { 'elementId': elementId,
    'text': text });
};

exports.textLabel = function (blockId, elementId, text, forId) {
  return Applab.executeCmd(blockId, 'textLabel', { 'elementId': elementId,
    'text': text,
    'forId': forId });
};

exports.checkbox = function (blockId, elementId, checked) {
  return Applab.executeCmd(blockId, 'checkbox', { 'elementId': elementId,
    'checked': checked });
};

exports.radioButton = function (blockId, elementId, checked, name) {
  return Applab.executeCmd(blockId, 'radioButton', { 'elementId': elementId,
    'checked': checked,
    'name': name });
};

exports.getChecked = function (blockId, elementId) {
  return Applab.executeCmd(blockId, 'getChecked', { 'elementId': elementId });
};

exports.setChecked = function (blockId, elementId, checked) {
  return Applab.executeCmd(blockId, 'setChecked', { 'elementId': elementId,
    'checked': checked });
};

exports.dropdown = function (blockId, elementId) {
  var optionsArray = Array.prototype.slice.call(arguments, 2);
  return Applab.executeCmd(blockId, 'dropdown', { 'elementId': elementId,
    'optionsArray': optionsArray });
};

exports.getAttribute = function (blockId, elementId, attribute) {
  return Applab.executeCmd(blockId, 'getAttribute', { elementId: elementId,
    attribute: attribute });
};

exports.setAttribute = function (blockId, elementId, attribute, value) {
  return Applab.executeCmd(blockId, 'setAttribute', { elementId: elementId,
    attribute: attribute,
    value: value });
};

exports.getText = function (blockId, elementId) {
  return Applab.executeCmd(blockId, 'getText', { 'elementId': elementId });
};

exports.setText = function (blockId, elementId, text) {
  return Applab.executeCmd(blockId, 'setText', { 'elementId': elementId,
    'text': text });
};

exports.getImageURL = function (blockId, elementId) {
  return Applab.executeCmd(blockId, 'getImageURL', { 'elementId': elementId });
};

exports.setImageURL = function (blockId, elementId, src) {
  return Applab.executeCmd(blockId, 'setImageURL', { 'elementId': elementId,
    'src': src });
};

exports.imageUploadButton = function (blockId, elementId, text) {
  return Applab.executeCmd(blockId, 'imageUploadButton', { 'elementId': elementId,
    'text': text });
};

exports.setParent = function (blockId, elementId, parentId) {
  return Applab.executeCmd(blockId, 'setParent', { 'elementId': elementId,
    'parentId': parentId });
};

exports.setStyle = function (blockId, elementId, style) {
  return Applab.executeCmd(blockId, 'setStyle', { 'elementId': elementId,
    'style': style });
};

exports.onEvent = function (blockId, elementId, eventName, func) {
  var extraArgs = Array.prototype.slice.call(arguments).slice(4);
  return Applab.executeCmd(blockId, 'onEvent', { 'elementId': elementId,
    'eventName': eventName,
    'func': func,
    'extraArgs': extraArgs });
};

exports.startWebRequest = function (blockId, url, func) {
  return Applab.executeCmd(blockId, 'startWebRequest', { 'url': url,
    'func': func });
};

exports.setTimeout = function (blockId, func, milliseconds) {
  return Applab.executeCmd(blockId, 'setTimeout', { 'func': func,
    'milliseconds': milliseconds });
};

exports.clearTimeout = function (blockId, timeoutId) {
  return Applab.executeCmd(blockId, 'clearTimeout', { 'timeoutId': timeoutId });
};

exports.setInterval = function (blockId, func, milliseconds) {
  return Applab.executeCmd(blockId, 'setInterval', { 'func': func,
    'milliseconds': milliseconds });
};

exports.clearInterval = function (blockId, intervalId) {
  return Applab.executeCmd(blockId, 'clearInterval', { 'intervalId': intervalId });
};

exports.playSound = function (blockId, url) {
  return Applab.executeCmd(blockId, 'playSound', { 'url': url });
};

exports.getKeyValue = function (blockId, key, onSuccess, onError) {
  return Applab.executeCmd(blockId, 'getKeyValue', { 'key': key,
    'onSuccess': onSuccess,
    'onError': onError });
};

exports.setKeyValue = function (blockId, key, value, onSuccess, onError) {
  return Applab.executeCmd(blockId, 'setKeyValue', { 'key': key,
    'value': value,
    'onSuccess': onSuccess,
    'onError': onError });
};

exports.createRecord = function (blockId, table, record, onSuccess, onError) {
  return Applab.executeCmd(blockId, 'createRecord', { 'table': table,
    'record': record,
    'onSuccess': onSuccess,
    'onError': onError });
};

exports.readRecords = function (blockId, table, searchParams, onSuccess, onError) {
  return Applab.executeCmd(blockId, 'readRecords', { 'table': table,
    'searchParams': searchParams,
    'onSuccess': onSuccess,
    'onError': onError });
};

exports.updateRecord = function (blockId, table, record, onSuccess, onError) {
  return Applab.executeCmd(blockId, 'updateRecord', { 'table': table,
    'record': record,
    'onSuccess': onSuccess,
    'onError': onError });
};

exports.deleteRecord = function (blockId, table, record, onSuccess, onError) {
  return Applab.executeCmd(blockId, 'deleteRecord', { 'table': table,
    'record': record,
    'onSuccess': onSuccess,
    'onError': onError });
};

exports.getUserId = function (blockId) {
  return Applab.executeCmd(blockId, 'getUserId', {});
};

exports.moveForward = function (blockId, distance) {
  return Applab.executeCmd(blockId, 'moveForward', { 'distance': distance });
};

exports.moveBackward = function (blockId, distance) {
  return Applab.executeCmd(blockId, 'moveBackward', { 'distance': distance });
};

exports.move = function (blockId, x, y) {
  return Applab.executeCmd(blockId, 'move', { 'x': x,
    'y': y });
};

exports.moveTo = function (blockId, x, y) {
  return Applab.executeCmd(blockId, 'moveTo', { 'x': x,
    'y': y });
};

exports.turnRight = function (blockId, degrees) {
  return Applab.executeCmd(blockId, 'turnRight', { 'degrees': degrees });
};

exports.turnLeft = function (blockId, degrees) {
  return Applab.executeCmd(blockId, 'turnLeft', { 'degrees': degrees });
};

exports.turnTo = function (blockId, direction) {
  return Applab.executeCmd(blockId, 'turnTo', { 'direction': direction });
};

exports.arcRight = function (blockId, degrees, radius) {
  return Applab.executeCmd(blockId, 'arcRight', { 'degrees': degrees,
    'radius': radius });
};

exports.arcLeft = function (blockId, degrees, radius) {
  return Applab.executeCmd(blockId, 'arcLeft', { 'degrees': degrees,
    'radius': radius });
};

exports.dot = function (blockId, radius) {
  return Applab.executeCmd(blockId, 'dot', { 'radius': radius });
};

exports.getX = function (blockId) {
  return Applab.executeCmd(blockId, 'getX');
};

exports.getY = function (blockId) {
  return Applab.executeCmd(blockId, 'getY');
};

exports.getDirection = function (blockId) {
  return Applab.executeCmd(blockId, 'getDirection');
};

exports.penUp = function (blockId) {
  return Applab.executeCmd(blockId, 'penUp');
};

exports.penDown = function (blockId) {
  return Applab.executeCmd(blockId, 'penDown');
};

exports.show = function (blockId) {
  return Applab.executeCmd(blockId, 'show');
};

exports.hide = function (blockId) {
  return Applab.executeCmd(blockId, 'hide');
};

exports.speed = function (blockId, percent) {
  return Applab.executeCmd(blockId, 'speed', { 'percent': percent });
};

exports.penWidth = function (blockId, width) {
  return Applab.executeCmd(blockId, 'penWidth', { 'width': width });
};

exports.penColor = function (blockId, color) {
  return Applab.executeCmd(blockId, 'penColor', { 'color': color });
};

exports.penRGB = function (blockId, r, g, b, a) {
  return Applab.executeCmd(blockId, 'penRGB', { 'r': r,
    'g': g,
    'b': b,
    'a': a });
};

exports.insertItem = function (blockId, array, index, item) {
  return Applab.executeCmd(blockId, 'insertItem', { 'array': array,
    'index': index,
    'item': item });
};

exports.appendItem = function (blockId, array, item) {
  return Applab.executeCmd(blockId, 'appendItem', { 'array': array,
    'item': item });
};

exports.removeItem = function (blockId, array, index) {
  return Applab.executeCmd(blockId, 'removeItem', { 'array': array,
    'index': index });
};

exports.drawChartFromRecords = function (chartId, chartType, tableName, columns, options, callback) {
  return Applab.executeCmd(null, 'drawChartFromRecords', { 'chartId': chartId,
    'chartType': chartType,
    'tableName': tableName,
    'columns': columns,
    'options': options,
    'callback': callback });
};

},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/api.js":[function(require,module,exports){
// APIs needed for droplet (keep in sync with apiBlockly.js):

'use strict';

exports.container = function (elementId, html) {
  return Applab.executeCmd(null, 'container', { 'elementId': elementId,
    'html': html });
};

exports.write = function (html) {
  return Applab.executeCmd(null, 'write', { 'html': html });
};

exports.innerHTML = function (elementId, html) {
  return Applab.executeCmd(null, 'innerHTML', { 'elementId': elementId,
    'html': html });
};

exports.deleteElement = function (elementId) {
  return Applab.executeCmd(null, 'deleteElement', { 'elementId': elementId });
};

exports.showElement = function (elementId) {
  return Applab.executeCmd(null, 'showElement', { 'elementId': elementId });
};

exports.hideElement = function (elementId) {
  return Applab.executeCmd(null, 'hideElement', { 'elementId': elementId });
};

exports.setScreen = function (screenId) {
  return Applab.executeCmd(null, 'setScreen', { 'screenId': screenId });
};

exports.button = function (elementId, text) {
  return Applab.executeCmd(null, 'button', { 'elementId': elementId,
    'text': text });
};

exports.image = function (elementId, src) {
  return Applab.executeCmd(null, 'image', { 'elementId': elementId,
    'src': src });
};

exports.setPosition = function (elementId, left, top, width, height) {
  return Applab.executeCmd(null, 'setPosition', { 'elementId': elementId,
    'left': left,
    'top': top,
    'width': width,
    'height': height });
};

exports.setSize = function (elementId, width, height) {
  return Applab.executeCmd(null, 'setSize', { 'elementId': elementId,
    'width': width,
    'height': height });
};

exports.getXPosition = function (elementId) {
  return Applab.executeCmd(null, 'getXPosition', { 'elementId': elementId });
};

exports.getYPosition = function (elementId) {
  return Applab.executeCmd(null, 'getYPosition', { 'elementId': elementId });
};

exports.createCanvas = function (elementId, width, height) {
  return Applab.executeCmd(null, 'createCanvas', { 'elementId': elementId,
    'width': width,
    'height': height });
};

exports.setActiveCanvas = function (elementId) {
  return Applab.executeCmd(null, 'setActiveCanvas', { 'elementId': elementId });
};

exports.line = function (x1, y1, x2, y2) {
  return Applab.executeCmd(null, 'line', { 'x1': x1,
    'y1': y1,
    'x2': x2,
    'y2': y2 });
};

exports.circle = function (x, y, radius) {
  return Applab.executeCmd(null, 'circle', { 'x': x,
    'y': y,
    'radius': radius });
};

exports.rect = function (x, y, width, height) {
  return Applab.executeCmd(null, 'rect', { 'x': x,
    'y': y,
    'width': width,
    'height': height });
};

exports.setStrokeWidth = function (width) {
  return Applab.executeCmd(null, 'setStrokeWidth', { 'width': width });
};

exports.setStrokeColor = function (color) {
  return Applab.executeCmd(null, 'setStrokeColor', { 'color': color });
};

exports.setFillColor = function (color) {
  return Applab.executeCmd(null, 'setFillColor', { 'color': color });
};

exports.clearCanvas = function () {
  return Applab.executeCmd(null, 'clearCanvas');
};

exports.drawImage = function (imageId, x, y, width, height) {
  return Applab.executeCmd(null, 'drawImage', { 'imageId': imageId,
    'x': x,
    'y': y,
    'width': width,
    'height': height });
};

exports.drawImageURL = function (url, x, y, width, height, callback) {
  if (y === undefined && width === undefined && height === undefined && callback === undefined) {
    // everything after x is undefined. assume the two param version (in which
    // callback might still be undefined)
    callback = x;
    x = undefined;
  }
  return Applab.executeCmd(null, 'drawImageURL', { 'url': url,
    'x': x,
    'y': y,
    'width': width,
    'height': height,
    'callback': callback });
};

exports.getImageData = function (x, y, width, height) {
  return Applab.executeCmd(null, 'getImageData', { 'x': x,
    'y': y,
    'width': width,
    'height': height });
};

exports.putImageData = function (imageData, x, y) {
  return Applab.executeCmd(null, 'putImageData', { 'imageData': imageData,
    'x': x,
    'y': y });
};

exports.textInput = function (elementId, text) {
  return Applab.executeCmd(null, 'textInput', { 'elementId': elementId,
    'text': text });
};

exports.textLabel = function (elementId, text, forId) {
  return Applab.executeCmd(null, 'textLabel', { 'elementId': elementId,
    'text': text,
    'forId': forId });
};

exports.checkbox = function (elementId, checked) {
  return Applab.executeCmd(null, 'checkbox', { 'elementId': elementId,
    'checked': checked });
};

exports.radioButton = function (elementId, checked, name) {
  return Applab.executeCmd(null, 'radioButton', { 'elementId': elementId,
    'checked': checked,
    'name': name });
};

exports.getChecked = function (elementId) {
  return Applab.executeCmd(null, 'getChecked', { 'elementId': elementId });
};

exports.setChecked = function (elementId, checked) {
  return Applab.executeCmd(null, 'setChecked', { 'elementId': elementId,
    'checked': checked });
};

exports.dropdown = function (elementId) {
  var optionsArray = Array.prototype.slice.call(arguments, 1);
  return Applab.executeCmd(null, 'dropdown', { 'elementId': elementId,
    'optionsArray': optionsArray });
};

exports.getAttribute = function (elementId, attribute) {
  return Applab.executeCmd(null, 'getAttribute', { elementId: elementId,
    attribute: attribute });
};

exports.setAttribute = function (elementId, attribute, value) {
  return Applab.executeCmd(null, 'setAttribute', { elementId: elementId,
    attribute: attribute,
    value: value });
};

exports.getText = function (elementId) {
  return Applab.executeCmd(null, 'getText', { 'elementId': elementId });
};

exports.setText = function (elementId, text) {
  return Applab.executeCmd(null, 'setText', { 'elementId': elementId,
    'text': text });
};

exports.getImageURL = function (elementId) {
  return Applab.executeCmd(null, 'getImageURL', { 'elementId': elementId });
};

exports.setImageURL = function (elementId, src) {
  return Applab.executeCmd(null, 'setImageURL', { 'elementId': elementId,
    'src': src });
};

exports.imageUploadButton = function (elementId, text) {
  return Applab.executeCmd(null, 'imageUploadButton', { 'elementId': elementId,
    'text': text });
};

exports.setParent = function (elementId, parentId) {
  return Applab.executeCmd(null, 'setParent', { 'elementId': elementId,
    'parentId': parentId });
};

exports.setStyle = function (elementId, style) {
  return Applab.executeCmd(null, 'setStyle', { 'elementId': elementId,
    'style': style });
};

exports.onEvent = function (elementId, eventName, func) {
  var extraArgs = Array.prototype.slice.call(arguments).slice(3);
  return Applab.executeCmd(null, 'onEvent', { 'elementId': elementId,
    'eventName': eventName,
    'func': func,
    'extraArgs': extraArgs });
};

exports.startWebRequest = function (url, func) {
  return Applab.executeCmd(null, 'startWebRequest', { 'url': url,
    'func': func });
};

exports.setTimeout = function (func, milliseconds) {
  return Applab.executeCmd(null, 'setTimeout', { 'func': func,
    'milliseconds': milliseconds });
};

exports.clearTimeout = function (timeoutId) {
  return Applab.executeCmd(null, 'clearTimeout', { 'timeoutId': timeoutId });
};

exports.setInterval = function (func, milliseconds) {
  return Applab.executeCmd(null, 'setInterval', { 'func': func,
    'milliseconds': milliseconds });
};

exports.clearInterval = function (intervalId) {
  return Applab.executeCmd(null, 'clearInterval', { 'intervalId': intervalId });
};

exports.playSound = function (url) {
  return Applab.executeCmd(null, 'playSound', { 'url': url });
};

exports.getKeyValue = function (key, onSuccess, onError) {
  return Applab.executeCmd(null, 'getKeyValue', { 'key': key,
    'onSuccess': onSuccess,
    'onError': onError });
};

exports.setKeyValue = function (key, value, onSuccess, onError) {
  return Applab.executeCmd(null, 'setKeyValue', { 'key': key,
    'value': value,
    'onSuccess': onSuccess,
    'onError': onError });
};

exports.createRecord = function (table, record, onSuccess, onError) {
  return Applab.executeCmd(null, 'createRecord', { 'table': table,
    'record': record,
    'onSuccess': onSuccess,
    'onError': onError });
};

exports.readRecords = function (table, searchParams, onSuccess, onError) {
  return Applab.executeCmd(null, 'readRecords', { 'table': table,
    'searchParams': searchParams,
    'onSuccess': onSuccess,
    'onError': onError });
};

exports.updateRecord = function (table, record, onSuccess, onError) {
  return Applab.executeCmd(null, 'updateRecord', { 'table': table,
    'record': record,
    'onSuccess': onSuccess,
    'onError': onError });
};

exports.deleteRecord = function (table, record, onSuccess, onError) {
  return Applab.executeCmd(null, 'deleteRecord', { 'table': table,
    'record': record,
    'onSuccess': onSuccess,
    'onError': onError });
};

exports.getUserId = function () {
  return Applab.executeCmd(null, 'getUserId', {});
};

exports.moveForward = function (distance) {
  return Applab.executeCmd(null, 'moveForward', { 'distance': distance });
};

exports.moveBackward = function (distance) {
  return Applab.executeCmd(null, 'moveBackward', { 'distance': distance });
};

exports.move = function (x, y) {
  return Applab.executeCmd(null, 'move', { 'x': x,
    'y': y });
};

exports.moveTo = function (x, y) {
  return Applab.executeCmd(null, 'moveTo', { 'x': x,
    'y': y });
};

exports.turnRight = function (degrees) {
  return Applab.executeCmd(null, 'turnRight', { 'degrees': degrees });
};

exports.turnLeft = function (degrees) {
  return Applab.executeCmd(null, 'turnLeft', { 'degrees': degrees });
};

exports.turnTo = function (direction) {
  return Applab.executeCmd(null, 'turnTo', { 'direction': direction });
};

exports.arcRight = function (degrees, radius) {
  return Applab.executeCmd(null, 'arcRight', { 'degrees': degrees,
    'radius': radius });
};

exports.arcLeft = function (degrees, radius) {
  return Applab.executeCmd(null, 'arcLeft', { 'degrees': degrees,
    'radius': radius });
};

exports.dot = function (radius) {
  return Applab.executeCmd(null, 'dot', { 'radius': radius });
};

exports.getX = function () {
  return Applab.executeCmd(null, 'getX');
};

exports.getY = function () {
  return Applab.executeCmd(null, 'getY');
};

exports.getDirection = function () {
  return Applab.executeCmd(null, 'getDirection');
};

exports.penUp = function () {
  return Applab.executeCmd(null, 'penUp');
};

exports.penDown = function () {
  return Applab.executeCmd(null, 'penDown');
};

exports.show = function () {
  return Applab.executeCmd(null, 'show');
};

exports.hide = function () {
  return Applab.executeCmd(null, 'hide');
};

exports.speed = function (percent) {
  return Applab.executeCmd(null, 'speed', { 'percent': percent });
};

exports.penWidth = function (width) {
  return Applab.executeCmd(null, 'penWidth', { 'width': width });
};

exports.penColor = function (color) {
  return Applab.executeCmd(null, 'penColor', { 'color': color });
};

exports.penRGB = function (r, g, b, a) {
  return Applab.executeCmd(null, 'penRGB', { 'r': r,
    'g': g,
    'b': b,
    'a': a });
};

exports.insertItem = function (array, index, item) {
  return Applab.executeCmd(null, 'insertItem', { 'array': array,
    'index': index,
    'item': item });
};

exports.appendItem = function (array, item) {
  return Applab.executeCmd(null, 'appendItem', { 'array': array,
    'item': item });
};

exports.removeItem = function (array, index) {
  return Applab.executeCmd(null, 'removeItem', { 'array': array,
    'index': index });
};

exports.drawChartFromRecords = function (chartId, chartType, tableName, columns, options, callback) {
  return Applab.executeCmd(null, 'drawChartFromRecords', { 'chartId': chartId,
    'chartType': chartType,
    'tableName': tableName,
    'columns': columns,
    'options': options,
    'callback': callback });
};

},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/DesignWorkspace.jsx":[function(require,module,exports){
'use strict';

var applabMsg = require('./locale');
var DesignModeBox = require('./DesignModeBox.jsx');
var DesignModeHeaders = require('./DesignModeHeaders.jsx');

module.exports = React.createClass({
  displayName: 'exports',

  propTypes: {
    handleManageAssets: React.PropTypes.func.isRequired,
    handleDragStart: React.PropTypes.func,
    element: React.PropTypes.instanceOf(HTMLElement),
    handleChange: React.PropTypes.func.isRequired,
    onDepthChange: React.PropTypes.func.isRequired,
    onDelete: React.PropTypes.func.isRequired,
    onInsertEvent: React.PropTypes.func.isRequired,
    isDimmed: React.PropTypes.bool.isRequired
  },

  getInitialState: function getInitialState() {
    return {
      isToolboxVisible: true
    };
  },

  onToggleToolbox: function onToggleToolbox() {
    this.setState({
      isToolboxVisible: !this.state.isToolboxVisible
    });
  },

  render: function render() {
    return React.createElement(
      'div',
      { id: 'designWorkspaceWrapper' },
      React.createElement(DesignModeHeaders, {
        handleManageAssets: this.props.handleManageAssets,
        onToggleToolbox: this.onToggleToolbox,
        isToolboxVisible: this.state.isToolboxVisible }),
      React.createElement(DesignModeBox, {
        handleDragStart: this.props.handleDragStart,
        element: this.props.element,
        handleChange: this.props.handleChange,
        onDepthChange: this.props.onDepthChange,
        onDelete: this.props.onDelete,
        onInsertEvent: this.props.onInsertEvent,
        isToolboxVisible: this.state.isToolboxVisible,
        isDimmed: this.props.isDimmed })
    );
  }
});

},{"./DesignModeBox.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/DesignModeBox.jsx","./DesignModeHeaders.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/DesignModeHeaders.jsx","./locale":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/locale.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/DesignToggleRow.jsx":[function(require,module,exports){
/* global $ */

'use strict';

var msg = require('../locale');
var applabMsg = require('./locale');

var NEW_SCREEN = 'New screen...';

var Mode = {
  CODE: 'CODE',
  DESIGN: 'DESIGN'
};

module.exports = React.createClass({
  displayName: 'exports',

  propTypes: {
    hideToggle: React.PropTypes.bool.isRequired,
    hideViewDataButton: React.PropTypes.bool.isRequired,
    startInDesignMode: React.PropTypes.bool.isRequired,
    initialScreen: React.PropTypes.string.isRequired,
    screens: React.PropTypes.array.isRequired,
    onDesignModeButton: React.PropTypes.func.isRequired,
    onCodeModeButton: React.PropTypes.func.isRequired,
    onViewDataButton: React.PropTypes.func.isRequired,
    onScreenChange: React.PropTypes.func.isRequired,
    onScreenCreate: React.PropTypes.func.isRequired
  },

  getInitialState: function getInitialState() {
    return {
      mode: this.props.startInDesignMode ? Mode.DESIGN : Mode.CODE,
      activeScreen: null
    };
  },

  handleSetMode: function handleSetMode(newMode) {
    if (this.state.mode === newMode) {
      return;
    }
    if (newMode === Mode.CODE) {
      this.props.onCodeModeButton();
    } else {
      this.props.onDesignModeButton();
    }

    this.setState({
      mode: newMode
    });
  },

  handleScreenChange: function handleScreenChange(evt) {
    var screenId = evt.target.value;
    if (screenId === NEW_SCREEN) {
      screenId = this.props.onScreenCreate();
    }
    this.props.onScreenChange(screenId);
  },

  componentWillReceiveProps: function componentWillReceiveProps(newProps) {
    this.setState({ activeScreen: newProps.initialScreen });
  },

  render: function render() {
    var showDataButton;
    var selectDropdown;
    var dropdownStyle = {
      display: 'inline-block',
      verticalAlign: 'top',
      width: '100%',
      height: 28,
      marginBottom: 6,
      borderColor: '#949ca2'
    };

    var buttonStyle = {
      display: 'inline-block',
      verticalAlign: 'top',
      border: '1px solid #949ca2',
      margin: '0 0 8px 0',
      padding: '2px 6px',
      fontSize: 14
    };
    var codeButtonStyle = $.extend({}, buttonStyle, {
      borderBottomRightRadius: 0,
      borderTopRightRadius: 0,
      borderRightWidth: 0
    });
    var designButtonStyle = $.extend({}, buttonStyle, {
      borderBottomLeftRadius: 0,
      borderTopLeftRadius: 0
    });
    var active = {
      backgroundColor: '#ffa000',
      color: '#fff',
      boxShadow: '2px 2px 5px rgba(0, 0, 0, 0.3) inset'
    };
    var inactive = {
      backgroundColor: '#fff',
      color: '#949ca2',
      boxShadow: '0px 1px 5px rgba(0, 0, 0, 0.3)'
    };
    var hidden = {
      display: 'none'
    };

    var showDataButtonStyle = $.extend({
      float: 'right',
      textAlign: 'left',
      maxWidth: '100%',
      whiteSpace: 'nowrap',
      overflow: 'hidden',
      textOverflow: 'ellipsis'
    }, buttonStyle, inactive, this.props.hideViewDataButton ? hidden : null);
    var iconStyle = {
      margin: '0 0.3em'
    };

    if (this.state.mode === Mode.CODE) {
      showDataButton = React.createElement(
        'button',
        {
          id: 'viewDataButton',
          style: showDataButtonStyle,
          className: 'no-outline',
          onClick: this.props.onViewDataButton },
        React.createElement('i', { className: 'fa fa-database', style: iconStyle }),
        applabMsg.viewData()
      );
    } else if (this.state.mode === Mode.DESIGN) {
      var options = this.props.screens.map(function (item) {
        return React.createElement(
          'option',
          { key: item },
          item
        );
      });

      selectDropdown = React.createElement(
        'select',
        {
          id: 'screenSelector',
          style: dropdownStyle,
          value: this.state.activeScreen,
          onChange: this.handleScreenChange,
          disabled: Applab.isRunning() },
        options,
        React.createElement(
          'option',
          null,
          NEW_SCREEN
        )
      );
    }

    return React.createElement(
      'table',
      { style: { width: '100%' } },
      React.createElement(
        'tbody',
        null,
        React.createElement(
          'tr',
          null,
          React.createElement(
            'td',
            { style: { width: '120px' } },
            React.createElement(
              'button',
              {
                id: 'codeModeButton',
                style: $.extend({}, codeButtonStyle, this.state.mode === Mode.CODE ? active : inactive, this.props.hideToggle ? hidden : null),
                className: 'no-outline',
                onClick: this.handleSetMode.bind(this, Mode.CODE) },
              msg.codeMode()
            ),
            React.createElement(
              'button',
              {
                id: 'designModeButton',
                style: $.extend({}, designButtonStyle, this.state.mode === Mode.DESIGN ? active : inactive, this.props.hideToggle ? hidden : null),
                className: 'no-outline',
                onClick: this.handleSetMode.bind(this, Mode.DESIGN) },
              msg.designMode()
            )
          ),
          React.createElement(
            'td',
            { style: { maxWidth: 0 } },
            selectDropdown,
            showDataButton
          )
        )
      )
    );
  }
});

},{"../locale":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/locale.js","./locale":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/locale.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/DesignModeHeaders.jsx":[function(require,module,exports){
'use strict';

var applabMsg = require('./locale');
var msg = require('../locale');

module.exports = React.createClass({
  displayName: 'exports',

  propTypes: {
    handleManageAssets: React.PropTypes.func.isRequired,
    onToggleToolbox: React.PropTypes.func.isRequired,
    isToolboxVisible: React.PropTypes.bool.isRequired
  },

  handleManageAssets: function handleManageAssets() {
    this.props.handleManageAssets();
  },

  onToggleToolbox: function onToggleToolbox() {
    this.props.onToggleToolbox();
  },

  render: function render() {
    var styles = {
      toolboxHeader: {
        display: this.props.isToolboxVisible ? 'block' : 'none',
        width: 270,
        borderRight: '1px solid gray',
        float: 'left'
      },
      showToolboxHeader: {
        float: 'left',
        display: this.props.isToolboxVisible ? 'none' : 'block',
        paddingLeft: 10
      },
      iconContainer: {
        float: 'right',
        marginRight: 10,
        marginLeft: 10,
        height: '100%'
      },
      assetsIcon: {
        fontSize: 18,
        verticalAlign: 'middle'
      }
    };

    var manageAssetsIcon = React.createElement(
      'span',
      { style: styles.iconContainer },
      React.createElement('i', { className: 'fa fa-cog workspace-header-clickable',
        id: 'manage-assets-button',
        style: styles.assetsIcon,
        onClick: this.handleManageAssets,
        title: applabMsg.manageAssets() })
    );

    return React.createElement(
      'div',
      { id: 'design-headers' },
      React.createElement(
        'div',
        { id: 'design-toolbox-header', className: 'workspace-header', style: styles.toolboxHeader },
        manageAssetsIcon,
        React.createElement(
          'span',
          null,
          applabMsg.designToolboxHeader()
        ),
        React.createElement(
          'span',
          { className: 'workspace-header-clickable', onClick: this.onToggleToolbox },
          ' ',
          msg.hideToolbox()
        )
      ),
      React.createElement(
        'div',
        { className: 'workspace-header', onClick: this.onToggleToolbox,
          style: styles.showToolboxHeader },
        React.createElement(
          'span',
          { className: 'workspace-header-clickable' },
          msg.showToolbox()
        ),
        manageAssetsIcon
      ),
      React.createElement(
        'div',
        { id: 'design-workspace-header', className: 'workspace-header' },
        React.createElement(
          'span',
          null,
          applabMsg.designWorkspaceHeader()
        )
      )
    );
  }
});

},{"../locale":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/locale.js","./locale":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/locale.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/DesignModeBox.jsx":[function(require,module,exports){
/* global $ */

'use strict';

var DesignToolbox = require('./DesignToolbox.jsx');
var DesignProperties = require('./designProperties.jsx');

module.exports = React.createClass({
  displayName: 'exports',

  propTypes: {
    handleDragStart: React.PropTypes.func,
    element: React.PropTypes.instanceOf(HTMLElement),
    handleChange: React.PropTypes.func.isRequired,
    onDepthChange: React.PropTypes.func.isRequired,
    onDelete: React.PropTypes.func.isRequired,
    onInsertEvent: React.PropTypes.func.isRequired,
    isToolboxVisible: React.PropTypes.bool.isRequired,
    isDimmed: React.PropTypes.bool.isRequired
  },

  render: function render() {
    var styles = {
      container: {
        position: 'absolute',
        width: '100%',
        top: 30,
        bottom: 0,
        backgroundColor: 'white',
        boxSizing: 'border-box',
        borderLeft: '1px solid gray',
        borderRight: '1px solid gray',
        borderBottom: '1px solid gray'
      },
      designProperties: {
        position: 'absolute',
        top: 0,
        bottom: 0,
        left: this.props.isToolboxVisible ? 270 : 0,
        right: 0,
        boxSizing: 'border-box',
        padding: 10
      },
      transparent: {
        width: '100%',
        height: '100%',
        backgroundColor: 'rgba(0, 0, 0, 0.1)',
        position: 'relative',
        zIndex: 1
      }
    };

    var transparencyLayer;
    // Slightly gray everything while running
    if (this.props.isDimmed) {
      transparencyLayer = React.createElement('div', { id: "design-mode-dimmed", style: styles.transparent });
    }

    return React.createElement(
      'div',
      { id: 'design-mode-container', style: styles.container },
      React.createElement(DesignToolbox, {
        handleDragStart: this.props.handleDragStart,
        isToolboxVisible: this.props.isToolboxVisible }),
      React.createElement(
        'div',
        { id: 'design-properties', style: styles.designProperties },
        React.createElement(DesignProperties, {
          element: this.props.element,
          handleChange: this.props.handleChange,
          onDepthChange: this.props.onDepthChange,
          onDelete: this.props.onDelete,
          onInsertEvent: this.props.onInsertEvent })
      ),
      transparencyLayer
    );
  }
});

},{"./DesignToolbox.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/DesignToolbox.jsx","./designProperties.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designProperties.jsx"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designProperties.jsx":[function(require,module,exports){
/* global $*/

'use strict';

var applabMsg = require('./locale');
var elementLibrary = require('./designElements/library');

var DeleteElementButton = require('./designElements/DeleteElementButton.jsx');

var nextKey = 0;

var DesignProperties = module.exports = React.createClass({
  displayName: 'exports',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement),
    handleChange: React.PropTypes.func.isRequired,
    onDepthChange: React.PropTypes.func.isRequired,
    onDelete: React.PropTypes.func.isRequired,
    onInsertEvent: React.PropTypes.func.isRequired
  },

  getInitialState: function getInitialState() {
    return { selectedTab: TabType.PROPERTIES };
  },

  /**
   * Handle a click on a tab, such as 'properties' or 'events'.
   * @param newTab {TabType} Tab to switch to.
   */
  handleTabClick: function handleTabClick(newTab) {
    this.setState({ selectedTab: newTab });
  },

  render: function render() {
    if (!this.props.element || !this.props.element.parentNode) {
      return React.createElement(
        'p',
        null,
        applabMsg.designWorkspaceDescription()
      );
    }

    // We want to have a unique key that doesn't change when the element id
    // changes, and has no risk of collisions between elements. We add this to
    // the backing element using jquery.data(), which keeps its own per-session
    // store of data, without affecting the serialiazation
    var key = $(this.props.element).data('key');
    if (!key) {
      key = nextKey++;
      $(this.props.element).data('key', key);
    }

    var elementType = elementLibrary.getElementType(this.props.element);
    var propertyClass = elementLibrary.getElementPropertyTab(elementType);

    var propertiesElement = React.createElement(propertyClass, {
      element: this.props.element,
      handleChange: this.props.handleChange,
      onDepthChange: this.props.onDepthChange
    });

    var eventClass = elementLibrary.getElementEventTab(elementType);
    var eventsElement = React.createElement(eventClass, {
      element: this.props.element,
      handleChange: this.props.handleChange,
      onInsertEvent: this.props.onInsertEvent
    });

    var deleteButton;
    var element = this.props.element;
    // First screen is not deletable
    var firstScreen = elementType === elementLibrary.ElementType.SCREEN && element.parentNode.firstChild === element;
    if (!firstScreen) {
      deleteButton = React.createElement(DeleteElementButton, {
        shouldConfirm: elementType === elementLibrary.ElementType.SCREEN,
        handleDelete: this.props.onDelete });
    }

    var tabHeight = 35;
    var borderColor = '#c6cacd';
    var bgColor = '#e7e8ea';

    // Diagram of how tabs outlines are drawn. 'x' represents solid border.
    // '-' and '|' represent no border.
    //
    // x----------------------------------------------------------------------|
    // x designWorkspaceTabs                                                  |
    // x                                                                      |
    // x  |xxxxxxxxxxxxxx  |xxxxxxxxxxxxxx  |xxxxxxxxxxxxxx  |-------------|  |
    // x  | inactiveTab x  |  activeTab  x  | inactiveTab x  |  emptyTab   |  |
    // x  |xxxxxxxxxxxxxx  |-------------x  |xxxxxxxxxxxxxx  |xxxxxxxxxxxxx|  |
    // x                                                                      |
    // x----------------------------------------------------------------------|
    //
    // x----------------------------------------------------------------------x
    // x designWorkspaceBody                                                  x
    // x                                                                      x
    // xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

    var baseTabStyle = {
      borderColor: borderColor,
      borderStyle: 'solid',
      boxSizing: 'border-box',
      height: tabHeight,
      padding: '0 10px'
    };

    /** @constant {Object} */
    var styles = {
      activeTab: $.extend({}, baseTabStyle, {
        backgroundColor: bgColor,
        borderTopWidth: 1,
        borderRightWidth: 1,
        borderBottomWidth: 0,
        borderLeftWidth: 0,
        float: 'left'
      }),
      inactiveTab: $.extend({}, baseTabStyle, {
        borderTopWidth: 1,
        borderRightWidth: 1,
        borderBottomWidth: 1,
        borderLeftWidth: 0,
        float: 'left'
      }),
      // This tab should fill the remaining horizontal space.
      emptyTab: $.extend({}, baseTabStyle, {
        borderTopWidth: 0,
        borderRightWidth: 0,
        borderBottomWidth: 1,
        borderLeftWidth: 0,
        width: '100%'
      }),
      workspaceDescription: {
        height: 28,
        overflow: 'hidden'
      },
      workspaceTabs: {
        borderColor: borderColor,
        borderStyle: 'solid',
        borderTopWidth: 0,
        borderRightWidth: 0,
        borderBottomWidth: 0,
        borderLeftWidth: 1
      },
      tabLabel: {
        lineHeight: tabHeight + 'px',
        WebkitUserSelect: 'none',
        MozUserSelect: 'none',
        msUserSelect: 'none',
        userSelect: 'none'
      },
      workspaceBody: {
        height: 'calc(100% - 83px)',
        padding: '10px 10px 10px 0',
        borderColor: borderColor,
        borderStyle: 'solid',
        borderTopWidth: 0,
        borderRightWidth: 1,
        borderBottomWidth: 1,
        borderLeftWidth: 1,
        backgroundColor: bgColor
      },
      activeBody: {
        height: '100%',
        overflowY: 'scroll'
      },
      inactiveBody: {
        display: 'none',
        height: '100%',
        overflowY: 'scroll'
      }
    };

    return React.createElement(
      'div',
      { style: { height: '100%' } },
      React.createElement(
        'div',
        { id: 'designDescription', style: styles.workspaceDescription },
        React.createElement(
          'p',
          null,
          applabMsg.designWorkspaceDescription()
        )
      ),
      React.createElement(
        'div',
        { id: 'designWorkspaceTabs', style: styles.workspaceTabs },
        React.createElement(
          'div',
          { id: 'propertiesTab',
            style: this.state.selectedTab === TabType.PROPERTIES ? styles.activeTab : styles.inactiveTab,
            className: 'hover-pointer',
            onClick: this.handleTabClick.bind(this, TabType.PROPERTIES) },
          React.createElement(
            'span',
            { style: styles.tabLabel },
            'PROPERTIES'
          )
        ),
        React.createElement(
          'div',
          { id: 'eventsTab',
            style: this.state.selectedTab === TabType.EVENTS ? styles.activeTab : styles.inactiveTab,
            className: 'hover-pointer',
            onClick: this.handleTabClick.bind(this, TabType.EVENTS) },
          React.createElement(
            'span',
            { style: styles.tabLabel },
            'EVENTS'
          )
        ),
        React.createElement('div', { id: 'emptyTab', style: styles.emptyTab })
      ),
      React.createElement(
        'div',
        { id: 'designWorkspaceBody', style: styles.workspaceBody },
        React.createElement(
          'div',
          { id: 'propertiesBody',
            style: this.state.selectedTab === TabType.PROPERTIES ? styles.activeBody : styles.inactiveBody },
          React.createElement(
            'div',
            { key: key },
            propertiesElement,
            deleteButton
          )
        ),
        React.createElement(
          'div',
          { id: 'eventsBody',
            style: this.state.selectedTab === TabType.EVENTS ? styles.activeBody : styles.inactiveBody },
          eventsElement
        )
      )
    );
  }
});

/**
 * @readonly
 * @enum {string}
 */
var TabType = {
  PROPERTIES: 'properties',
  EVENTS: 'events'
};
DesignProperties.TabType = TabType;
/* We provide a key to the outer div so that element foo and element bar are
  seen to be two completely different tables. Otherwise the defaultValues
  in inputs don't update correctly. */

},{"./designElements/DeleteElementButton.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/DeleteElementButton.jsx","./designElements/library":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/library.js","./locale":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/locale.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/DeleteElementButton.jsx":[function(require,module,exports){
/* global $ */
'use strict';

var rowStyle = require('./rowStyle');

/**
 * A delete button that will also ask for confirmation when shouldConfirm is
 * true.
 */
var DeleteElementButton = React.createClass({
  displayName: 'DeleteElementButton',

  propTypes: {
    shouldConfirm: React.PropTypes.bool.isRequired,
    handleDelete: React.PropTypes.func.isRequired
  },

  getInitialState: function getInitialState() {
    return {
      confirming: false
    };
  },

  handleDeleteInternal: function handleDeleteInternal(event) {
    if (this.props.shouldConfirm) {
      this.setState({ confirming: true });
    } else {
      this.finishDelete();
    }
  },

  finishDelete: function finishDelete() {
    this.props.handleDelete();
  },

  abortDelete: function abortDelete(event) {
    this.setState({ confirming: false });
  },

  render: function render() {
    var buttonStyle = {
      paddingTop: '5px',
      paddingBottom: '5px',
      fontSize: '14px'
    };

    var redButtonStyle = $.extend({}, buttonStyle, {
      backgroundColor: '#c00', // $red
      color: 'white'
    });

    var confirm;
    if (this.state.confirming) {
      return React.createElement(
        'div',
        { style: { marginLeft: 20 } },
        'Delete?',
        React.createElement(
          'button',
          {
            style: buttonStyle,
            onClick: this.abortDelete },
          'No'
        ),
        React.createElement(
          'button',
          {
            style: redButtonStyle,
            onClick: this.finishDelete },
          'Yes'
        )
      );
    }
    return React.createElement(
      'div',
      { style: { marginLeft: 15 } },
      React.createElement(
        'button',
        {
          style: redButtonStyle,
          onClick: this.handleDeleteInternal },
        'Delete'
      )
    );
  }
});

module.exports = DeleteElementButton;

},{"./rowStyle":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/rowStyle.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/DesignToolbox.jsx":[function(require,module,exports){
/* global $ */

'use strict';

var DesignToolboxElement = require('./DesignToolboxElement.jsx');
var applabMsg = require('./locale');

var IMAGE_BASE_URL = '/blockly/media/applab/design_toolbox/';

module.exports = React.createClass({
    displayName: 'exports',

    propTypes: {
        handleDragStart: React.PropTypes.func.isRequired,
        isToolboxVisible: React.PropTypes.bool.isRequired
    },

    render: function render() {
        var toolboxStyle = {
            display: this.props.isToolboxVisible ? 'block' : 'none',
            position: 'absolute',
            top: 0,
            bottom: 0,
            width: 270,
            boxSizing: 'border-box',
            borderRight: '1px solid gray',
            padding: 10
        };

        return React.createElement(
            'div',
            { id: 'design-toolbox', style: toolboxStyle },
            React.createElement(
                'p',
                null,
                applabMsg.designToolboxDescription()
            ),
            React.createElement(DesignToolboxElement, {
                imageUrl: IMAGE_BASE_URL + 'button.png',
                desc: 'Button',
                elementType: 'BUTTON',
                handleDragStart: this.props.handleDragStart }),
            React.createElement(DesignToolboxElement, {
                imageUrl: IMAGE_BASE_URL + 'input.png',
                desc: 'Text Input',
                elementType: 'TEXT_INPUT',
                handleDragStart: this.props.handleDragStart }),
            React.createElement(DesignToolboxElement, {
                imageUrl: IMAGE_BASE_URL + 'label.png',
                desc: 'Label',
                elementType: 'LABEL',
                handleDragStart: this.props.handleDragStart }),
            React.createElement(DesignToolboxElement, {
                imageUrl: IMAGE_BASE_URL + 'dropdown.png',
                desc: 'Dropdown',
                elementType: 'DROPDOWN',
                handleDragStart: this.props.handleDragStart }),
            React.createElement(DesignToolboxElement, {
                imageUrl: IMAGE_BASE_URL + 'radio.png',
                desc: 'Radio Button',
                elementType: 'RADIO_BUTTON',
                handleDragStart: this.props.handleDragStart }),
            React.createElement(DesignToolboxElement, {
                imageUrl: IMAGE_BASE_URL + 'checkbox.png',
                desc: 'Checkbox',
                elementType: 'CHECKBOX',
                handleDragStart: this.props.handleDragStart }),
            React.createElement(DesignToolboxElement, {
                imageUrl: IMAGE_BASE_URL + 'image.png',
                desc: 'Image',
                elementType: 'IMAGE',
                handleDragStart: this.props.handleDragStart }),
            React.createElement(DesignToolboxElement, {
                imageUrl: IMAGE_BASE_URL + 'canvas.png',
                desc: 'Canvas',
                elementType: 'CANVAS',
                handleDragStart: this.props.handleDragStart }),
            React.createElement(DesignToolboxElement, {
                imageUrl: IMAGE_BASE_URL + 'screen.png',
                desc: 'Screen',
                elementType: 'SCREEN',
                handleDragStart: this.props.handleDragStart }),
            React.createElement(DesignToolboxElement, {
                imageUrl: IMAGE_BASE_URL + 'textarea.png',
                desc: 'Text Area',
                elementType: 'TEXT_AREA',
                handleDragStart: this.props.handleDragStart }),
            React.createElement(DesignToolboxElement, {
                imageUrl: IMAGE_BASE_URL + 'chart.png',
                desc: 'Chart',
                elementType: 'CHART',
                handleDragStart: this.props.handleDragStart })
        );
    }
});

},{"./DesignToolboxElement.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/DesignToolboxElement.jsx","./locale":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/locale.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/DesignToolboxElement.jsx":[function(require,module,exports){
/* global $ */

'use strict';

var library = require('./designElements/library');

module.exports = React.createClass({
  displayName: 'exports',

  propTypes: {
    imageUrl: React.PropTypes.string.isRequired,
    desc: React.PropTypes.string.isRequired,
    elementType: React.PropTypes.string.isRequired,
    handleDragStart: React.PropTypes.func.isRequired
  },

  render: function render() {
    var styles = {
      outerContainer: {
        // The icon images are 120px wide and depend on this width for scaling.
        width: 120,
        display: 'inline-block',
        textAlign: 'center',
        paddingBottom: 15
      },
      innerContainer: {
        textAlign: 'center'
      },
      image: {
        marginBottom: 5
      }
    };

    return React.createElement(
      'div',
      { style: styles.outerContainer },
      React.createElement(
        'div',
        { style: styles.innerContainer,
          'data-element-type': this.props.elementType,
          className: 'new-design-element' },
        React.createElement('img', { src: this.props.imageUrl,
          className: 'design-element-image',
          style: styles.image }),
        React.createElement(
          'div',
          null,
          this.props.desc
        )
      )
    );
  },

  componentDidMount: function componentDidMount() {
    this.makeDraggable();
  },

  componentDidUpdate: function componentDidUpdate() {
    this.makeDraggable();
  },

  /**
   * Create a draggable item as we drag an item from the toolbox.
   */
  makeDraggable: function makeDraggable() {
    $(this.getDOMNode()).find('.new-design-element').draggable({
      // Create an item (without an id) for dragging that looks identical to the
      // element that will ultimately be dropped. Note, this item has no
      // containment, and doesn't snap to a grid as we drag (but does on drop)
      helper: function helper(event) {
        var elementType = this.getAttribute('data-element-type');
        if (elementType === library.ElementType.SCREEN) {
          return $(this).clone();
        }
        var element = library.createElement(elementType, 0, 0, true);
        element.style.position = 'static';

        var div = document.getElementById('designModeViz');
        var xScale = div.getBoundingClientRect().width / div.offsetWidth;
        var yScale = div.getBoundingClientRect().height / div.offsetHeight;

        var parent = $('<div/>').addClass('draggingParent');

        parent[0].style.transform = "scale(" + xScale + ", " + yScale + ")";
        parent[0].style.webkitTransform = "scale(" + xScale + ", " + yScale + ")";
        parent[0].style.backgroundColor = 'transparent';

        // Have the cursor be in the center of the dragged item.
        // element.width/height() returns 0 for canvas (probably because it
        // hasn't actually been renderd yet)
        var elementWidth = $(element).width() || parseInt(element.getAttribute('width'), 10);
        var elementHeight = $(element).height() || parseInt(element.getAttribute('height'), 10);
        // phantom/FF seem to not have event.offsetY, so go calculate it
        var offsetY = event.offsetY || event.pageY - $(event.target).offset().top;
        $(this).draggable('option', 'cursorAt', {
          left: elementWidth / 2,
          top: Math.min(offsetY, elementHeight)
        });

        return parent.append(element)[0];
      },
      containment: 'document',
      appendTo: '#codeApp',
      revert: 'invalid',
      // Make sure the dragged element appears in front of #belowVisualization,
      // which has z-index 1.
      zIndex: 2,
      start: this.props.handleDragStart
    });
  }
});

},{"./designElements/library":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/library.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/library.js":[function(require,module,exports){
'use strict';

var utils = require('../../utils');
var _ = utils.getLodash();
var elementUtils = require('./elementUtils');

/**
 * A map from prefix to the next numerical suffix to try to
 * use as an id in the applab app's DOM.
 * @type {Object.<string, number>}
 */
var nextElementIdMap = {};

/**
 * @readonly
 * @enum {string}
 */
var ElementType = {
  BUTTON: 'BUTTON',
  LABEL: 'LABEL',
  TEXT_INPUT: 'TEXT_INPUT',
  CHECKBOX: 'CHECKBOX',
  DROPDOWN: 'DROPDOWN',
  RADIO_BUTTON: 'RADIO_BUTTON',
  TEXT_AREA: 'TEXT_AREA',
  IMAGE: 'IMAGE',
  CANVAS: 'CANVAS',
  SCREEN: 'SCREEN',
  CHART: 'CHART'
};

var elements = {};
elements[ElementType.BUTTON] = require('./button.jsx');
elements[ElementType.LABEL] = require('./label.jsx');
elements[ElementType.TEXT_INPUT] = require('./textInput.jsx');
elements[ElementType.CHECKBOX] = require('./checkbox.jsx');
elements[ElementType.DROPDOWN] = require('./dropdown.jsx');
elements[ElementType.RADIO_BUTTON] = require('./radioButton.jsx');
elements[ElementType.TEXT_AREA] = require('./textarea.jsx');
elements[ElementType.IMAGE] = require('./image.jsx');
elements[ElementType.CANVAS] = require('./canvas.jsx');
elements[ElementType.SCREEN] = require('./screen.jsx');
elements[ElementType.CHART] = require('./chart.jsx');

module.exports = {
  ElementType: ElementType,
  /**
   * Returns an element id with the given prefix which is unused within
   * the applab app's DOM.
   * @param {string} prefix
   * @returns {string}
   */
  // TODO (brent) - the following seems a little bit strange to me:
  // 1) Add item1, item2, delete item1
  // 2) Add another item, it gets id item3
  // 3) Reload page, add another item, it gets item1
  // Seems a little like we should always get the lowest available (as in step 3)
  // or always get the next (as in step 2)
  getUnusedElementId: function getUnusedElementId(prefix) {
    var i = nextElementIdMap[prefix] || 1;
    while (elementUtils.getPrefixedElementById(prefix + i)) {
      i++;
    }
    nextElementIdMap[prefix] = i + 1;
    return prefix + i;
  },

  /**
   * Resets the next element id for all prefixes to be 1. Called after clearing
   * all design mode elements
   */
  resetIds: function resetIds() {
    nextElementIdMap = {};
  },

  /**
   * Create a new element of the specified type
   * @param {ElementType} elementType Type of element to create
   * @param {number} left Position from left.
   * @param {number} top Position from top.
   * @param {boolean} [withoutId] If true, don't generate an id
   */
  createElement: function createElement(elementType, left, top, withoutId) {
    var elementClass = elements[elementType];
    if (!elementClass) {
      throw new Error('Unknown elementType: ' + elementType);
    }

    var element = elementClass.create();

    // Stuff that's common across all elements
    if (!withoutId) {
      elementUtils.setId(element, this.getUnusedElementId(elementType.toLowerCase()));
    }

    if (elementType !== ElementType.SCREEN) {
      element.style.position = 'absolute';
      element.style.left = left + 'px';
      element.style.top = top + 'px';
      element.style.margin = '0px';
    }

    return element;
  },

  getElementPropertyTab: function getElementPropertyTab(elementType) {
    return elements[elementType].PropertyTab;
  },

  getElementEventTab: function getElementEventTab(elementType) {
    return elements[elementType].EventTab;
  },

  /**
   * @param {HTMLElement} element
   * @returns {string} String representing elementType
   */
  getElementType: function getElementType(element) {
    var tagname = element.tagName.toLowerCase();

    switch (tagname) {
      case 'button':
        return ElementType.BUTTON;
      case 'label':
        return ElementType.LABEL;
      case 'select':
        return ElementType.DROPDOWN;
      case 'div':
        if ($(element).hasClass('screen')) {
          return ElementType.SCREEN;
        } else if ($(element).hasClass('chart')) {
          return ElementType.CHART;
        }
        return ElementType.TEXT_AREA;
      case 'img':
        return ElementType.IMAGE;
      case 'canvas':
        return ElementType.CANVAS;
      case 'input':
        switch (element.getAttribute('type')) {
          case 'checkbox':
            return ElementType.CHECKBOX;
          case 'radio':
            return ElementType.RADIO_BUTTON;
          default:
            return ElementType.TEXT_INPUT;
        }
        break;
    }
    throw new Error('unknown element type');
  },

  /**
   * Code to be called after deserializing element, allowing us to attach any
   * necessary event handlers.
   */
  onDeserialize: function onDeserialize(element, updateProperty) {
    var elementType = this.getElementType(element);
    if (elements[elementType] && elements[elementType].onDeserialize) {
      elements[elementType].onDeserialize(element, updateProperty);
    }
  },

  /**
   * Handle any element specific property changes. Called after designMode gets
   * first crack at handling change.
   * @returns {boolean} True if we modified the element in such a way that the
   *   property table needs to be updated.
   */
  typeSpecificPropertyChange: function typeSpecificPropertyChange(element, name, value) {
    var elementType = this.getElementType(element);
    if (elements[elementType].onPropertyChange) {
      return elements[elementType].onPropertyChange(element, name, value);
    }
    return false;
  }
};

},{"../../utils":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/utils.js","./button.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/button.jsx","./canvas.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/canvas.jsx","./chart.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/chart.jsx","./checkbox.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/checkbox.jsx","./dropdown.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/dropdown.jsx","./elementUtils":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/elementUtils.js","./image.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/image.jsx","./label.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/label.jsx","./radioButton.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/radioButton.jsx","./screen.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/screen.jsx","./textInput.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/textInput.jsx","./textarea.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/textarea.jsx"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/textarea.jsx":[function(require,module,exports){
/* global $ */

'use strict';

var PropertyRow = require('./PropertyRow.jsx');
var BooleanPropertyRow = require('./BooleanPropertyRow.jsx');
var ColorPickerPropertyRow = require('./ColorPickerPropertyRow.jsx');
var ZOrderRow = require('./ZOrderRow.jsx');
var EventHeaderRow = require('./EventHeaderRow.jsx');
var EventRow = require('./EventRow.jsx');

var elementUtils = require('./elementUtils');

var TextAreaProperties = React.createClass({
  displayName: 'TextAreaProperties',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onDepthChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    var element = this.props.element;

    return React.createElement(
      'div',
      { id: 'propertyRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(PropertyRow, {
        desc: 'text',
        isMultiLine: true,
        initialValue: $(element).text(),
        handleChange: this.props.handleChange.bind(this, 'text') }),
      React.createElement(PropertyRow, {
        desc: 'width (px)',
        isNumber: true,
        initialValue: parseInt(element.style.width, 10),
        foo: parseInt(element.style.width, 10),
        handleChange: this.props.handleChange.bind(this, 'style-width') }),
      React.createElement(PropertyRow, {
        desc: 'height (px)',
        isNumber: true,
        initialValue: parseInt(element.style.height, 10),
        handleChange: this.props.handleChange.bind(this, 'style-height') }),
      React.createElement(PropertyRow, {
        desc: 'x position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.left, 10),
        handleChange: this.props.handleChange.bind(this, 'left') }),
      React.createElement(PropertyRow, {
        desc: 'y position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.top, 10),
        handleChange: this.props.handleChange.bind(this, 'top') }),
      React.createElement(ColorPickerPropertyRow, {
        desc: 'text color',
        initialValue: elementUtils.rgb2hex(element.style.color),
        handleChange: this.props.handleChange.bind(this, 'textColor') }),
      React.createElement(ColorPickerPropertyRow, {
        desc: 'background color',
        initialValue: elementUtils.rgb2hex(element.style.backgroundColor),
        handleChange: this.props.handleChange.bind(this, 'backgroundColor') }),
      React.createElement(PropertyRow, {
        desc: 'font size (px)',
        isNumber: true,
        initialValue: parseInt(element.style.fontSize, 10),
        handleChange: this.props.handleChange.bind(this, 'fontSize') }),
      React.createElement(BooleanPropertyRow, {
        desc: 'hidden',
        initialValue: $(element).hasClass('design-mode-hidden'),
        handleChange: this.props.handleChange.bind(this, 'hidden') }),
      React.createElement(ZOrderRow, {
        element: this.props.element,
        onDepthChange: this.props.onDepthChange })
    );

    // TODO:
    // bold/italics/underline (p2)
    // textAlignment (p2)
    // enabled (p2)
  }
});

var TextAreaEvents = React.createClass({
  displayName: 'TextAreaEvents',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired
  },

  getChangeEventCode: function getChangeEventCode() {
    var id = elementUtils.getId(this.props.element);
    var code = 'onEvent("' + id + '", "change", function(event) {\n' + '  console.log("' + id + ' entered text: " + getText("' + id + '"));\n' + '});\n';
    return code;
  },

  insertChange: function insertChange() {
    this.props.onInsertEvent(this.getChangeEventCode());
  },

  render: function render() {
    var element = this.props.element;
    var changeName = 'Change';
    var changeDesc = 'Triggered when the text area loses focus if the text has changed.';

    return React.createElement(
      'div',
      { id: 'eventRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(EventHeaderRow, null),
      React.createElement(EventRow, {
        name: changeName,
        desc: changeDesc,
        handleInsert: this.insertChange })
    );
  }
});

module.exports = {
  PropertyTab: TextAreaProperties,
  EventTab: TextAreaEvents,

  create: function create() {
    var element = document.createElement('div');
    element.setAttribute('contenteditable', true);
    element.style.width = '200px';
    element.style.height = '100px';
    element.style.fontSize = '14px';
    element.style.color = '#000000';
    element.style.backgroundColor = '#ffffff';

    this.onDeserialize(element);

    return element;
  },

  onDeserialize: function onDeserialize(element) {
    // swallow keydown unless we're running
    $(element).on('keydown', function (e) {
      if (!Applab.isRunning()) {
        e.preventDefault();
      }
    });
  }
};

},{"./BooleanPropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/BooleanPropertyRow.jsx","./ColorPickerPropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/ColorPickerPropertyRow.jsx","./EventHeaderRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/EventHeaderRow.jsx","./EventRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/EventRow.jsx","./PropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/PropertyRow.jsx","./ZOrderRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/ZOrderRow.jsx","./elementUtils":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/elementUtils.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/textInput.jsx":[function(require,module,exports){
/* global $ */

'use strict';

var PropertyRow = require('./PropertyRow.jsx');
var BooleanPropertyRow = require('./BooleanPropertyRow.jsx');
var ColorPickerPropertyRow = require('./ColorPickerPropertyRow.jsx');
var ZOrderRow = require('./ZOrderRow.jsx');
var EventHeaderRow = require('./EventHeaderRow.jsx');
var EventRow = require('./EventRow.jsx');

var elementUtils = require('./elementUtils');

var TextInputProperties = React.createClass({
  displayName: 'TextInputProperties',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onDepthChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    var element = this.props.element;

    return React.createElement(
      'div',
      { id: 'propertyRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(PropertyRow, {
        desc: 'placeholder',
        initialValue: element.getAttribute('placeholder') || '',
        handleChange: this.props.handleChange.bind(this, 'placeholder') }),
      React.createElement(PropertyRow, {
        desc: 'width (px)',
        isNumber: true,
        initialValue: parseInt(element.style.width, 10),
        handleChange: this.props.handleChange.bind(this, 'style-width') }),
      React.createElement(PropertyRow, {
        desc: 'height (px)',
        isNumber: true,
        initialValue: parseInt(element.style.height, 10),
        handleChange: this.props.handleChange.bind(this, 'style-height') }),
      React.createElement(PropertyRow, {
        desc: 'x position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.left, 10),
        handleChange: this.props.handleChange.bind(this, 'left') }),
      React.createElement(PropertyRow, {
        desc: 'y position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.top, 10),
        handleChange: this.props.handleChange.bind(this, 'top') }),
      React.createElement(ColorPickerPropertyRow, {
        desc: 'text color',
        initialValue: elementUtils.rgb2hex(element.style.color),
        handleChange: this.props.handleChange.bind(this, 'textColor') }),
      React.createElement(ColorPickerPropertyRow, {
        desc: 'background color',
        initialValue: elementUtils.rgb2hex(element.style.backgroundColor),
        handleChange: this.props.handleChange.bind(this, 'backgroundColor') }),
      React.createElement(PropertyRow, {
        desc: 'font size (px)',
        isNumber: true,
        initialValue: parseInt(element.style.fontSize, 10),
        handleChange: this.props.handleChange.bind(this, 'fontSize') }),
      React.createElement(BooleanPropertyRow, {
        desc: 'hidden',
        initialValue: $(element).hasClass('design-mode-hidden'),
        handleChange: this.props.handleChange.bind(this, 'hidden') }),
      React.createElement(ZOrderRow, {
        element: this.props.element,
        onDepthChange: this.props.onDepthChange })
    );
  }
});

var TextInputEvents = React.createClass({
  displayName: 'TextInputEvents',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onInsertEvent: React.PropTypes.func.isRequired
  },

  getChangeEventCode: function getChangeEventCode() {
    var id = elementUtils.getId(this.props.element);
    var code = 'onEvent("' + id + '", "change", function(event) {\n' + '  console.log("' + id + ' entered text: " + getText("' + id + '"));\n' + '});\n';
    return code;
  },

  insertChange: function insertChange() {
    this.props.onInsertEvent(this.getChangeEventCode());
  },

  getInputEventCode: function getInputEventCode() {
    var id = elementUtils.getId(this.props.element);
    var code = 'onEvent("' + id + '", "input", function(event) {\n' + '  console.log("' + id + ' current text: " + getText("' + id + '"));\n' + '});\n';
    return code;
  },

  insertInput: function insertInput() {
    this.props.onInsertEvent(this.getInputEventCode());
  },

  render: function render() {
    var element = this.props.element;

    var changeName = 'Change';
    var changeDesc = 'Triggered when the text input loses focus if the text has changed.';

    var inputName = 'Input';
    var inputDesc = 'Triggered immediately every time the text input contents change.';

    return React.createElement(
      'div',
      { id: 'eventRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(EventHeaderRow, null),
      React.createElement(EventRow, {
        name: changeName,
        desc: changeDesc,
        handleInsert: this.insertChange }),
      React.createElement(EventRow, {
        name: inputName,
        desc: inputDesc,
        handleInsert: this.insertInput })
    );
  }
});

module.exports = {
  PropertyTab: TextInputProperties,
  EventTab: TextInputEvents,

  create: function create() {
    var element = document.createElement('input');
    element.style.margin = '0px';
    element.style.width = '200px';
    element.style.height = '30px';
    element.style.color = '#000000';
    element.style.backgroundColor = '';

    return element;
  }
};

},{"./BooleanPropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/BooleanPropertyRow.jsx","./ColorPickerPropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/ColorPickerPropertyRow.jsx","./EventHeaderRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/EventHeaderRow.jsx","./EventRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/EventRow.jsx","./PropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/PropertyRow.jsx","./ZOrderRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/ZOrderRow.jsx","./elementUtils":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/elementUtils.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/screen.jsx":[function(require,module,exports){
'use strict';

var PropertyRow = require('./PropertyRow.jsx');
var ColorPickerPropertyRow = require('./ColorPickerPropertyRow.jsx');
var ImagePickerPropertyRow = require('./ImagePickerPropertyRow.jsx');
var EventHeaderRow = require('./EventHeaderRow.jsx');
var EventRow = require('./EventRow.jsx');

var elementUtils = require('./elementUtils');

var ScreenProperties = React.createClass({
  displayName: 'ScreenProperties',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    var element = this.props.element;

    return React.createElement(
      'div',
      { id: 'propertyRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(ColorPickerPropertyRow, {
        desc: 'background color',
        initialValue: elementUtils.rgb2hex(element.style.backgroundColor),
        handleChange: this.props.handleChange.bind(this, 'backgroundColor') }),
      React.createElement(ImagePickerPropertyRow, {
        desc: 'image',
        initialValue: element.getAttribute('data-canonical-image-url') || '',
        handleChange: this.props.handleChange.bind(this, 'screen-image') })
    );
  }
});

var ScreenEvents = React.createClass({
  displayName: 'ScreenEvents',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired
  },

  // The screen click event handler code currently receives clicks to any
  // other design element. This could be worked around by checking for
  // event.targetId === "<id>" here, at the expense of added complexity.
  getClickEventCode: function getClickEventCode() {
    var id = elementUtils.getId(this.props.element);
    var code = 'onEvent("' + id + '", "click", function(event) {\n' + '  console.log("' + id + ' clicked!");\n' + '  moveTo(event.x, event.y);\n' + '});\n';
    return code;
  },

  insertClick: function insertClick() {
    this.props.onInsertEvent(this.getClickEventCode());
  },

  getKeyEventCode: function getKeyEventCode() {
    var id = elementUtils.getId(this.props.element);
    var code = 'onEvent("' + id + '", "keydown", function(event) {\n' + '  console.log("Key: " + event.key);\n' + '});\n';
    return code;
  },

  insertKey: function insertKey() {
    this.props.onInsertEvent(this.getKeyEventCode());
  },

  render: function render() {
    var element = this.props.element;
    var clickName = 'Click';
    var clickDesc = 'Triggered when the screen is clicked with a mouse or tapped on a screen.';
    var keyName = 'Key';
    var keyDesc = 'Triggered when a key is pressed.';

    return React.createElement(
      'div',
      { id: 'eventRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(EventHeaderRow, null),
      React.createElement(EventRow, {
        name: clickName,
        desc: clickDesc,
        handleInsert: this.insertClick }),
      React.createElement(EventRow, {
        name: keyName,
        desc: keyDesc,
        handleInsert: this.insertKey })
    );
  }
});

module.exports = {
  PropertyTab: ScreenProperties,
  EventTab: ScreenEvents,

  create: function create() {
    var element = document.createElement('div');
    element.setAttribute('class', 'screen');
    element.setAttribute('tabIndex', '1');
    element.style.display = 'block';
    element.style.height = Applab.footerlessAppHeight + 'px';
    element.style.width = Applab.appWidth + 'px';
    element.style.left = '0px';
    element.style.top = '0px';
    // We want our screen to be behind canvases. By setting any z-index on the
    // screen element, we create a new stacking context with this div as its
    // root, which results in all children (including canvas) to appear in front
    // of it, regardless of their z-index value.
    // see http://philipwalton.com/articles/what-no-one-told-you-about-z-index/
    element.style.position = 'absolute';
    element.style.zIndex = 0;

    return element;
  },
  onDeserialize: function onDeserialize(element, updateProperty) {
    var url = element.getAttribute('data-canonical-image-url');
    if (url) {
      updateProperty(element, 'screen-image', url);
    }
    // Properly position existing screens, so that canvases appear correctly.
    element.style.position = 'absolute';
    element.style.zIndex = 0;

    element.setAttribute('tabIndex', '1');
  }
};

},{"./ColorPickerPropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/ColorPickerPropertyRow.jsx","./EventHeaderRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/EventHeaderRow.jsx","./EventRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/EventRow.jsx","./ImagePickerPropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/ImagePickerPropertyRow.jsx","./PropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/PropertyRow.jsx","./elementUtils":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/elementUtils.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/radioButton.jsx":[function(require,module,exports){
/* global $ */

'use strict';

var PropertyRow = require('./PropertyRow.jsx');
var BooleanPropertyRow = require('./BooleanPropertyRow.jsx');
var ColorPickerPropertyRow = require('./ColorPickerPropertyRow.jsx');
var ZOrderRow = require('./ZOrderRow.jsx');
var EventHeaderRow = require('./EventHeaderRow.jsx');
var EventRow = require('./EventRow.jsx');

var elementUtils = require('./elementUtils');

var RadioButtonProperties = React.createClass({
  displayName: 'RadioButtonProperties',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onDepthChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    var element = this.props.element;

    return React.createElement(
      'div',
      { id: 'propertyRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(PropertyRow, {
        desc: 'group id',
        initialValue: element.getAttribute('name') || '',
        handleChange: this.props.handleChange.bind(this, 'groupId') }),
      React.createElement(PropertyRow, {
        desc: 'width (px)',
        isNumber: true,
        initialValue: parseInt(element.style.width, 10),
        handleChange: this.props.handleChange.bind(this, 'style-width') }),
      React.createElement(PropertyRow, {
        desc: 'height (px)',
        isNumber: true,
        initialValue: parseInt(element.style.height, 10),
        handleChange: this.props.handleChange.bind(this, 'style-height') }),
      React.createElement(PropertyRow, {
        desc: 'x position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.left, 10),
        handleChange: this.props.handleChange.bind(this, 'left') }),
      React.createElement(PropertyRow, {
        desc: 'y position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.top, 10),
        handleChange: this.props.handleChange.bind(this, 'top') }),
      React.createElement(BooleanPropertyRow, {
        desc: 'hidden',
        initialValue: $(element).hasClass('design-mode-hidden'),
        handleChange: this.props.handleChange.bind(this, 'hidden') }),
      React.createElement(BooleanPropertyRow, {
        desc: 'checked',
        initialValue: element.checked,
        handleChange: this.props.handleChange.bind(this, 'checked') }),
      React.createElement(ZOrderRow, {
        element: this.props.element,
        onDepthChange: this.props.onDepthChange })
    );

    // TODO:
    // enabled (p2)
  }
});

var RadioButtonEvents = React.createClass({
  displayName: 'RadioButtonEvents',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onInsertEvent: React.PropTypes.func.isRequired
  },

  getChangeEventCode: function getChangeEventCode() {
    var id = elementUtils.getId(this.props.element);
    var code = 'onEvent("' + id + '", "change", function(event) {\n' + '  console.log("' + id + ' checked? " + getChecked("' + id + '"));\n' + '});\n';
    return code;
  },

  insertChange: function insertChange() {
    this.props.onInsertEvent(this.getChangeEventCode());
  },

  render: function render() {
    var element = this.props.element;
    var changeName = 'Change';
    var changeDesc = 'Triggered when the radio button state changes ' + 'both from selected to de-selected, and from de-selected to selected.';

    return React.createElement(
      'div',
      { id: 'eventRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(EventHeaderRow, null),
      React.createElement(EventRow, {
        name: changeName,
        desc: changeDesc,
        handleInsert: this.insertChange })
    );
  }
});

module.exports = {
  PropertyTab: RadioButtonProperties,
  EventTab: RadioButtonEvents,

  create: function create() {
    var element = document.createElement('input');
    element.type = 'radio';
    element.style.width = '12px';
    element.style.height = '12px';
    element.style.margin = '0px';

    this.onDeserialize(element);

    return element;
  },

  onDeserialize: function onDeserialize(element) {
    // Disable click events unless running
    $(element).on('click', function (e) {
      if (!Applab.isRunning()) {
        element.checked = !element.checked;
      }
    });
  }
};

},{"./BooleanPropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/BooleanPropertyRow.jsx","./ColorPickerPropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/ColorPickerPropertyRow.jsx","./EventHeaderRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/EventHeaderRow.jsx","./EventRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/EventRow.jsx","./PropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/PropertyRow.jsx","./ZOrderRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/ZOrderRow.jsx","./elementUtils":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/elementUtils.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/label.jsx":[function(require,module,exports){
/* global $ */

'use strict';

var PropertyRow = require('./PropertyRow.jsx');
var BooleanPropertyRow = require('./BooleanPropertyRow.jsx');
var ColorPickerPropertyRow = require('./ColorPickerPropertyRow.jsx');
var ZOrderRow = require('./ZOrderRow.jsx');
var EventHeaderRow = require('./EventHeaderRow.jsx');
var EventRow = require('./EventRow.jsx');

var elementUtils = require('./elementUtils');

var LabelProperties = React.createClass({
  displayName: 'LabelProperties',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onDepthChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    var element = this.props.element;

    return React.createElement(
      'div',
      { id: 'propertyRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(PropertyRow, {
        desc: 'text',
        initialValue: $(element).text(),
        handleChange: this.props.handleChange.bind(this, 'text') }),
      React.createElement(PropertyRow, {
        desc: 'width (px)',
        isNumber: true,
        lockState: $(element).data('lock-width') || PropertyRow.LockState.UNLOCKED,
        handleLockChange: this.props.handleChange.bind(this, 'lock-width'),
        initialValue: parseInt(element.style.width, 10),
        handleChange: this.props.handleChange.bind(this, 'style-width') }),
      React.createElement(PropertyRow, {
        desc: 'height (px)',
        isNumber: true,
        lockState: $(element).data('lock-height') || PropertyRow.LockState.UNLOCKED,
        handleLockChange: this.props.handleChange.bind(this, 'lock-height'),
        initialValue: parseInt(element.style.height, 10),
        handleChange: this.props.handleChange.bind(this, 'style-height') }),
      React.createElement(PropertyRow, {
        desc: 'x position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.left, 10),
        handleChange: this.props.handleChange.bind(this, 'left') }),
      React.createElement(PropertyRow, {
        desc: 'y position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.top, 10),
        handleChange: this.props.handleChange.bind(this, 'top') }),
      React.createElement(ColorPickerPropertyRow, {
        desc: 'text color',
        initialValue: elementUtils.rgb2hex(element.style.color),
        handleChange: this.props.handleChange.bind(this, 'textColor') }),
      React.createElement(ColorPickerPropertyRow, {
        desc: 'background color',
        initialValue: elementUtils.rgb2hex(element.style.backgroundColor),
        handleChange: this.props.handleChange.bind(this, 'backgroundColor') }),
      React.createElement(PropertyRow, {
        desc: 'font size (px)',
        isNumber: true,
        initialValue: parseInt(element.style.fontSize, 10),
        handleChange: this.props.handleChange.bind(this, 'fontSize') }),
      React.createElement(BooleanPropertyRow, {
        desc: 'hidden',
        initialValue: $(element).hasClass('design-mode-hidden'),
        handleChange: this.props.handleChange.bind(this, 'hidden') }),
      React.createElement(ZOrderRow, {
        element: this.props.element,
        onDepthChange: this.props.onDepthChange })
    );

    // TODO:
    // bold/italics/underline (p2)
    // textAlignment (p2)
    // enabled (p2)
  }
});

var LabelEvents = React.createClass({
  displayName: 'LabelEvents',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onInsertEvent: React.PropTypes.func.isRequired
  },

  getClickEventCode: function getClickEventCode() {
    var id = elementUtils.getId(this.props.element);
    var code = 'onEvent("' + id + '", "click", function(event) {\n' + '  console.log("' + id + ' clicked!");\n' + '});\n';
    return code;
  },

  insertClick: function insertClick() {
    this.props.onInsertEvent(this.getClickEventCode());
  },

  render: function render() {
    var element = this.props.element;
    var clickName = 'Click';
    var clickDesc = 'Triggered when the label is clicked with a mouse or tapped on a screen.';

    return React.createElement(
      'div',
      { id: 'eventRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(EventHeaderRow, null),
      React.createElement(EventRow, {
        name: clickName,
        desc: clickDesc,
        handleInsert: this.insertClick })
    );
  }
});

module.exports = {
  PropertyTab: LabelProperties,
  EventTab: LabelEvents,

  create: function create() {
    var element = document.createElement('label');
    element.style.margin = '0px';
    element.style.padding = '2px';
    element.style.lineHeight = '1';
    element.style.fontSize = '14px';
    element.style.overflow = 'hidden';
    element.style.wordWrap = 'break-word';
    element.textContent = 'text';
    element.style.color = '#333333';
    element.style.backgroundColor = '';
    element.style.maxWidth = Applab.appWidth + 'px';

    this.resizeToFitText(element);
    return element;
  },

  resizeToFitText: function resizeToFitText(element) {
    var clone = $(element).clone().css({
      position: 'absolute',
      visibility: 'hidden',
      width: 'auto',
      height: 'auto',
      maxWidth: Applab.appWidth - parseInt(element.style.left, 10) + 'px'
    }).appendTo($(document.body));

    var padding = parseInt(element.style.padding, 10);

    if ($(element).data('lock-width') !== PropertyRow.LockState.LOCKED) {
      //Truncate the width before it runs off the edge of the screen
      element.style.width = Math.min(clone.width() + 1 + 2 * padding, Applab.appWidth - clone.position().left) + 'px';
    }
    if ($(element).data('lock-height') !== PropertyRow.LockState.LOCKED) {
      element.style.height = clone.height() + 1 + 2 * padding + 'px';
    }

    clone.remove();
  },

  /**
   * @returns {boolean} True if it modified the backing element
   */
  onPropertyChange: function onPropertyChange(element, name, value) {
    switch (name) {
      case 'text':
      case 'fontSize':
        this.resizeToFitText(element);
        break;
      case 'lock-width':
        $(element).data('lock-width', value);
        break;
      case 'lock-height':
        $(element).data('lock-height', value);
        break;
      default:
        return false;
    }
    return true;
  }
};

},{"./BooleanPropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/BooleanPropertyRow.jsx","./ColorPickerPropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/ColorPickerPropertyRow.jsx","./EventHeaderRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/EventHeaderRow.jsx","./EventRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/EventRow.jsx","./PropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/PropertyRow.jsx","./ZOrderRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/ZOrderRow.jsx","./elementUtils":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/elementUtils.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/image.jsx":[function(require,module,exports){
/* global $ */

'use strict';

var PropertyRow = require('./PropertyRow.jsx');
var BooleanPropertyRow = require('./BooleanPropertyRow.jsx');
var ImagePickerPropertyRow = require('./ImagePickerPropertyRow.jsx');
var ZOrderRow = require('./ZOrderRow.jsx');
var EventHeaderRow = require('./EventHeaderRow.jsx');
var EventRow = require('./EventRow.jsx');

var elementUtils = require('./elementUtils');

var ImageProperties = React.createClass({
  displayName: 'ImageProperties',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onDepthChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    var element = this.props.element;

    return React.createElement(
      'div',
      { id: 'propertyRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(PropertyRow, {
        desc: 'text',
        initialValue: $(element).text(),
        handleChange: this.props.handleChange.bind(this, 'text') }),
      React.createElement(PropertyRow, {
        desc: 'width (px)',
        isNumber: true,
        initialValue: parseInt(element.style.width, 10),
        handleChange: this.props.handleChange.bind(this, 'style-width') }),
      React.createElement(PropertyRow, {
        desc: 'height (px)',
        isNumber: true,
        initialValue: parseInt(element.style.height, 10),
        handleChange: this.props.handleChange.bind(this, 'style-height') }),
      React.createElement(PropertyRow, {
        desc: 'x position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.left, 10),
        handleChange: this.props.handleChange.bind(this, 'left') }),
      React.createElement(PropertyRow, {
        desc: 'y position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.top, 10),
        handleChange: this.props.handleChange.bind(this, 'top') }),
      React.createElement(ImagePickerPropertyRow, {
        desc: 'picture',
        initialValue: element.getAttribute('data-canonical-image-url') || '',
        handleChange: this.props.handleChange.bind(this, 'picture') }),
      React.createElement(BooleanPropertyRow, {
        desc: 'hidden',
        initialValue: $(element).hasClass('design-mode-hidden'),
        handleChange: this.props.handleChange.bind(this, 'hidden') }),
      React.createElement(ZOrderRow, {
        element: this.props.element,
        onDepthChange: this.props.onDepthChange })
    );

    // TODO (brent):
    // bold/italics/underline (p2)
    // shape (p2)
    // textAlignment (p2)
    // enabled (p2)
  }
});

var ImageEvents = React.createClass({
  displayName: 'ImageEvents',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onInsertEvent: React.PropTypes.func.isRequired
  },

  getClickEventCode: function getClickEventCode() {
    var id = elementUtils.getId(this.props.element);
    var code = 'onEvent("' + id + '", "click", function(event) {\n' + '  console.log("' + id + ' clicked!");\n' + '});\n';
    return code;
  },

  insertClick: function insertClick() {
    this.props.onInsertEvent(this.getClickEventCode());
  },

  render: function render() {
    var element = this.props.element;
    var clickName = 'Click';
    var clickDesc = 'Triggered when the image is clicked with a mouse or tapped on a screen.';

    return React.createElement(
      'div',
      { id: 'eventRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(EventHeaderRow, null),
      React.createElement(EventRow, {
        name: clickName,
        desc: clickDesc,
        handleInsert: this.insertClick })
    );
  }
});

module.exports = {
  PropertyTab: ImageProperties,
  EventTab: ImageEvents,

  create: function create() {
    var element = document.createElement('img');
    element.style.height = '100px';
    element.style.width = '100px';
    element.setAttribute('src', '');

    return element;
  },
  onDeserialize: function onDeserialize(element, updateProperty) {
    var url = element.getAttribute('data-canonical-image-url');
    if (url) {
      updateProperty(element, 'picture', url);
    }
  }
};

},{"./BooleanPropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/BooleanPropertyRow.jsx","./EventHeaderRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/EventHeaderRow.jsx","./EventRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/EventRow.jsx","./ImagePickerPropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/ImagePickerPropertyRow.jsx","./PropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/PropertyRow.jsx","./ZOrderRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/ZOrderRow.jsx","./elementUtils":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/elementUtils.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/dropdown.jsx":[function(require,module,exports){
/* global $ */

'use strict';

var PropertyRow = require('./PropertyRow.jsx');
var BooleanPropertyRow = require('./BooleanPropertyRow.jsx');
var OptionsSelectRow = require('./OptionsSelectRow.jsx');
var ColorPickerPropertyRow = require('./ColorPickerPropertyRow.jsx');
var ZOrderRow = require('./ZOrderRow.jsx');
var EventHeaderRow = require('./EventHeaderRow.jsx');
var EventRow = require('./EventRow.jsx');
var colors = require('../../sharedJsxStyles').colors;

var elementUtils = require('./elementUtils');

var DropdownProperties = React.createClass({
  displayName: 'DropdownProperties',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onDepthChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    var element = this.props.element;

    return React.createElement(
      'div',
      { id: 'propertyRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(OptionsSelectRow, {
        desc: 'options',
        element: element,
        handleChange: this.props.handleChange.bind(this, 'options') }),
      React.createElement(PropertyRow, {
        desc: 'width (px)',
        isNumber: true,
        initialValue: parseInt(element.style.width, 10),
        handleChange: this.props.handleChange.bind(this, 'style-width') }),
      React.createElement(PropertyRow, {
        desc: 'height (px)',
        isNumber: true,
        initialValue: parseInt(element.style.height, 10),
        handleChange: this.props.handleChange.bind(this, 'style-height') }),
      React.createElement(PropertyRow, {
        desc: 'x position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.left, 10),
        handleChange: this.props.handleChange.bind(this, 'left') }),
      React.createElement(PropertyRow, {
        desc: 'y position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.top, 10),
        handleChange: this.props.handleChange.bind(this, 'top') }),
      React.createElement(ColorPickerPropertyRow, {
        desc: 'text color',
        initialValue: elementUtils.rgb2hex(element.style.color),
        handleChange: this.props.handleChange.bind(this, 'textColor') }),
      React.createElement(ColorPickerPropertyRow, {
        desc: 'background color',
        initialValue: elementUtils.rgb2hex(element.style.backgroundColor),
        handleChange: this.props.handleChange.bind(this, 'backgroundColor') }),
      React.createElement(PropertyRow, {
        desc: 'font size (px)',
        isNumber: true,
        initialValue: parseInt(element.style.fontSize, 10),
        handleChange: this.props.handleChange.bind(this, 'fontSize') }),
      React.createElement(BooleanPropertyRow, {
        desc: 'hidden',
        initialValue: $(element).hasClass('design-mode-hidden'),
        handleChange: this.props.handleChange.bind(this, 'hidden') }),
      React.createElement(ZOrderRow, {
        element: this.props.element,
        onDepthChange: this.props.onDepthChange })
    );

    // TODO:
    // bold/italics/underline (p2)
    // textAlignment (p2)
    // enabled (p2)
  }
});

var DropdownEvents = React.createClass({
  displayName: 'DropdownEvents',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onInsertEvent: React.PropTypes.func.isRequired
  },

  getChangeEventCode: function getChangeEventCode() {
    var id = elementUtils.getId(this.props.element);
    var code = 'onEvent("' + id + '", "change", function(event) {\n' + '  console.log("Selected option: " + getText("' + id + '"));\n' + '});\n';
    return code;
  },

  insertChange: function insertChange() {
    this.props.onInsertEvent(this.getChangeEventCode());
  },

  render: function render() {
    var element = this.props.element;
    var changeName = 'Change';
    var changeDesc = 'Triggered every time an option is selected from the dropdown.';

    return React.createElement(
      'div',
      { id: 'eventRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(EventHeaderRow, null),
      React.createElement(EventRow, {
        name: changeName,
        desc: changeDesc,
        handleInsert: this.insertChange })
    );
  }
});

module.exports = {
  PropertyTab: DropdownProperties,
  EventTab: DropdownEvents,

  create: function create() {
    var element = document.createElement('select');
    element.style.width = '200px';
    element.style.height = '30px';
    element.style.fontSize = '14px';
    element.style.margin = '0';
    element.style.color = colors.white;
    element.style.backgroundColor = colors.teal;

    var option1 = document.createElement('option');
    option1.innerHTML = 'Option 1';
    element.appendChild(option1);

    var option2 = document.createElement('option');
    option2.innerHTML = 'Option 2';
    element.appendChild(option2);

    return element;
  },

  onDeserialize: function onDeserialize(element) {
    // Don't interfere with focus or clicks in design mode, where the dropdown is
    // already disabled by jQuery.draggable({cancel: false}).
    if ($('#divApplab').find(element)[0]) {
      $(element).on('mousedown', function (e) {
        if (!Applab.isRunning()) {
          // Disable dropdown menu unless running
          e.preventDefault();
          this.blur();
          window.focus();
        }
      });
    }
  }
};

},{"../../sharedJsxStyles":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/sharedJsxStyles.js","./BooleanPropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/BooleanPropertyRow.jsx","./ColorPickerPropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/ColorPickerPropertyRow.jsx","./EventHeaderRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/EventHeaderRow.jsx","./EventRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/EventRow.jsx","./OptionsSelectRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/OptionsSelectRow.jsx","./PropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/PropertyRow.jsx","./ZOrderRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/ZOrderRow.jsx","./elementUtils":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/elementUtils.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/OptionsSelectRow.jsx":[function(require,module,exports){
/* global $ */
'use strict';

var rowStyle = require('./rowStyle');

var OptionsSelectRow = React.createClass({
  displayName: 'OptionsSelectRow',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLSelectElement).isRequired,
    handleChange: React.PropTypes.func
  },

  getInitialState: function getInitialState() {
    // Pull the text out of each of our child option elements
    var element = this.props.element;
    var value = '';
    for (var i = 0; i < element.children.length; i++) {
      value += element.children[i].textContent + '\n';
    }
    return {
      value: value
    };
  },

  handleChangeInternal: function handleChangeInternal(event) {
    var value = event.target.value;
    // Extract an array of text values, 1 per line
    var optionList = value.split('\n').filter(function (val) {
      return val !== '';
    });
    this.props.handleChange(optionList);
    this.setState({ value: value });
  },

  render: function render() {
    var textAreaStyle = $.extend({}, rowStyle.input, {
      height: 40
    });
    return React.createElement(
      'div',
      { style: rowStyle.container },
      React.createElement(
        'div',
        { style: rowStyle.description },
        this.props.desc
      ),
      React.createElement(
        'div',
        null,
        React.createElement('textarea', {
          onChange: this.handleChangeInternal,
          value: this.state.value,
          style: textAreaStyle })
      )
    );
  }
});

module.exports = OptionsSelectRow;

},{"./rowStyle":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/rowStyle.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/checkbox.jsx":[function(require,module,exports){
/* global $ */

'use strict';

var PropertyRow = require('./PropertyRow.jsx');
var BooleanPropertyRow = require('./BooleanPropertyRow.jsx');
var ColorPickerPropertyRow = require('./ColorPickerPropertyRow.jsx');
var ZOrderRow = require('./ZOrderRow.jsx');
var EventHeaderRow = require('./EventHeaderRow.jsx');
var EventRow = require('./EventRow.jsx');

var elementUtils = require('./elementUtils');

var CheckboxProperties = React.createClass({
  displayName: 'CheckboxProperties',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onDepthChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    var element = this.props.element;

    return React.createElement(
      'div',
      { id: 'propertyRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(PropertyRow, {
        desc: 'width (px)',
        isNumber: true,
        initialValue: parseInt(element.style.width, 10),
        handleChange: this.props.handleChange.bind(this, 'style-width') }),
      React.createElement(PropertyRow, {
        desc: 'height (px)',
        isNumber: true,
        initialValue: parseInt(element.style.height, 10),
        handleChange: this.props.handleChange.bind(this, 'style-height') }),
      React.createElement(PropertyRow, {
        desc: 'x position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.left, 10),
        handleChange: this.props.handleChange.bind(this, 'left') }),
      React.createElement(PropertyRow, {
        desc: 'y position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.top, 10),
        handleChange: this.props.handleChange.bind(this, 'top') }),
      React.createElement(BooleanPropertyRow, {
        desc: 'hidden',
        initialValue: $(element).hasClass('design-mode-hidden'),
        handleChange: this.props.handleChange.bind(this, 'hidden') }),
      React.createElement(BooleanPropertyRow, {
        desc: 'checked',
        initialValue: element.checked,
        handleChange: this.props.handleChange.bind(this, 'checked') }),
      React.createElement(ZOrderRow, {
        element: this.props.element,
        onDepthChange: this.props.onDepthChange })
    );

    // TODO:
    // enabled (p2)
  }
});

var CheckboxEvents = React.createClass({
  displayName: 'CheckboxEvents',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onInsertEvent: React.PropTypes.func.isRequired
  },

  getChangeEventCode: function getChangeEventCode() {
    var id = elementUtils.getId(this.props.element);
    var code = 'onEvent("' + id + '", "change", function(event) {\n' + '  console.log("' + id + ' checked? " + getChecked("' + id + '"));\n' + '});\n';
    return code;
  },

  insertChange: function insertChange() {
    this.props.onInsertEvent(this.getChangeEventCode());
  },

  render: function render() {
    var element = this.props.element;
    var changeName = 'Change';
    var changeDesc = 'Triggered when the checkbox state changes both ' + 'from checked to unchecked and unchecked to checked.';

    return React.createElement(
      'div',
      { id: 'eventRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(EventHeaderRow, null),
      React.createElement(EventRow, {
        name: changeName,
        desc: changeDesc,
        handleInsert: this.insertChange })
    );
  }
});

module.exports = {
  PropertyTab: CheckboxProperties,
  EventTab: CheckboxEvents,

  create: function create() {
    var element = document.createElement('input');
    element.type = 'checkbox';
    element.style.width = '12px';
    element.style.height = '12px';
    element.style.margin = '0px';

    this.onDeserialize(element);

    return element;
  },

  onDeserialize: function onDeserialize(element) {
    // Disable click events unless running
    $(element).on('click', function (e) {
      if (!Applab.isRunning()) {
        element.checked = !element.checked;
      }
    });
  }
};

},{"./BooleanPropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/BooleanPropertyRow.jsx","./ColorPickerPropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/ColorPickerPropertyRow.jsx","./EventHeaderRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/EventHeaderRow.jsx","./EventRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/EventRow.jsx","./PropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/PropertyRow.jsx","./ZOrderRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/ZOrderRow.jsx","./elementUtils":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/elementUtils.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/chart.jsx":[function(require,module,exports){
/* global $ */

'use strict';

var PropertyRow = require('./PropertyRow.jsx');
var BooleanPropertyRow = require('./BooleanPropertyRow.jsx');
var ImagePickerPropertyRow = require('./ImagePickerPropertyRow.jsx');
var ZOrderRow = require('./ZOrderRow.jsx');
var EventHeaderRow = require('./EventHeaderRow.jsx');
var EventRow = require('./EventRow.jsx');

var elementUtils = require('./elementUtils');

var ChartProperties = React.createClass({
  displayName: 'ChartProperties',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onDepthChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    var element = this.props.element;

    return React.createElement(
      'div',
      { id: 'propertyRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(PropertyRow, {
        desc: 'width (px)',
        isNumber: true,
        initialValue: parseInt(element.style.width, 10),
        handleChange: this.props.handleChange.bind(this, 'style-width') }),
      React.createElement(PropertyRow, {
        desc: 'height (px)',
        isNumber: true,
        initialValue: parseInt(element.style.height, 10),
        handleChange: this.props.handleChange.bind(this, 'style-height') }),
      React.createElement(PropertyRow, {
        desc: 'x position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.left, 10),
        handleChange: this.props.handleChange.bind(this, 'left') }),
      React.createElement(PropertyRow, {
        desc: 'y position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.top, 10),
        handleChange: this.props.handleChange.bind(this, 'top') }),
      React.createElement(BooleanPropertyRow, {
        desc: 'hidden',
        initialValue: $(element).hasClass('design-mode-hidden'),
        handleChange: this.props.handleChange.bind(this, 'hidden') }),
      React.createElement(ZOrderRow, {
        element: this.props.element,
        onDepthChange: this.props.onDepthChange })
    );

    // TODO (bbuchanan):
    // chart-specific properties!
  }
});

var ChartEvents = React.createClass({
  displayName: 'ChartEvents',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onInsertEvent: React.PropTypes.func.isRequired
  },

  getDrawChartFromRecordsCode: function getDrawChartFromRecordsCode() {
    var id = elementUtils.getId(this.props.element);
    var code = 'drawChartFromRecords("' + id + '", "bar", "tableName", ' + '["columnOne", "columnTwo"]);\n';
    return code;
  },

  insertDrawChartFromRecords: function insertDrawChartFromRecords() {
    this.props.onInsertEvent(this.getDrawChartFromRecordsCode());
  },

  render: function render() {
    var element = this.props.element;
    var drawChartFromRecordsName = 'drawChartFromRecords';
    var drawChartFromRecordsDesc = "Draws the chart using App Lab's table data storage.";

    return React.createElement(
      'div',
      { id: 'eventRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(EventHeaderRow, null),
      React.createElement(EventRow, {
        name: drawChartFromRecordsName,
        desc: drawChartFromRecordsDesc,
        handleInsert: this.insertDrawChartFromRecords })
    );
  }
});

module.exports = {
  PropertyTab: ChartProperties,
  EventTab: ChartEvents,

  create: function create() {
    var element = document.createElement('div');
    element.setAttribute('class', 'chart');
    element.style.height = '100px';
    element.style.width = '100px';

    return element;

    // Note: we use CSS to make this element have a background in design mode
    // but not in code mode.
  }
};

},{"./BooleanPropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/BooleanPropertyRow.jsx","./EventHeaderRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/EventHeaderRow.jsx","./EventRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/EventRow.jsx","./ImagePickerPropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/ImagePickerPropertyRow.jsx","./PropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/PropertyRow.jsx","./ZOrderRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/ZOrderRow.jsx","./elementUtils":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/elementUtils.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/canvas.jsx":[function(require,module,exports){
'use strict';

var PropertyRow = require('./PropertyRow.jsx');
var ZOrderRow = require('./ZOrderRow.jsx');
var EventHeaderRow = require('./EventHeaderRow.jsx');
var EventRow = require('./EventRow.jsx');

var elementUtils = require('./elementUtils');

var CanvasProperties = React.createClass({
  displayName: 'CanvasProperties',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onDepthChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    var element = this.props.element;

    return React.createElement(
      'div',
      { id: 'propertyRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(PropertyRow, {
        desc: 'width (px)',
        isNumber: true,
        initialValue: parseInt(element.getAttribute('width'), 10),
        handleChange: this.props.handleChange.bind(this, 'width') }),
      React.createElement(PropertyRow, {
        desc: 'height (px)',
        isNumber: true,
        initialValue: parseInt(element.getAttribute('height'), 10),
        handleChange: this.props.handleChange.bind(this, 'height') }),
      React.createElement(PropertyRow, {
        desc: 'x position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.left, 10),
        handleChange: this.props.handleChange.bind(this, 'left') }),
      React.createElement(PropertyRow, {
        desc: 'y position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.top, 10),
        handleChange: this.props.handleChange.bind(this, 'top') }),
      React.createElement(ZOrderRow, {
        element: this.props.element,
        onDepthChange: this.props.onDepthChange })
    );
  }
});

var CanvasEvents = React.createClass({
  displayName: 'CanvasEvents',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onInsertEvent: React.PropTypes.func.isRequired
  },

  getClickEventCode: function getClickEventCode() {
    var id = elementUtils.getId(this.props.element);
    var code = 'onEvent("' + id + '", "click", function(event) {\n' + '  console.log("' + id + ' clicked at x:" + event.offsetX + " y:" + event.offsetY);\n' + '  setActiveCanvas("' + id + '");\n' + '  circle(event.offsetX, event.offsetY, 10);\n' + '});\n';
    return code;
  },

  insertClick: function insertClick() {
    this.props.onInsertEvent(this.getClickEventCode());
  },

  render: function render() {
    var element = this.props.element;
    var clickName = 'Click';
    var clickDesc = 'Triggered when the canvas is clicked with a mouse or tapped on a screen.';

    return React.createElement(
      'div',
      { id: 'eventRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(EventHeaderRow, null),
      React.createElement(EventRow, {
        name: clickName,
        desc: clickDesc,
        handleInsert: this.insertClick })
    );
  }
});

module.exports = {
  PropertyTab: CanvasProperties,
  EventTab: CanvasEvents,
  create: function create() {
    var element = document.createElement('canvas');
    element.setAttribute('width', '100px');
    element.setAttribute('height', '100px');

    return element;

    // Note: we use CSS to make this element have a background in design mode
    // but not in code mode.
  }
};

},{"./EventHeaderRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/EventHeaderRow.jsx","./EventRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/EventRow.jsx","./PropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/PropertyRow.jsx","./ZOrderRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/ZOrderRow.jsx","./elementUtils":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/elementUtils.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/button.jsx":[function(require,module,exports){
/* global $ */

'use strict';

var PropertyRow = require('./PropertyRow.jsx');
var BooleanPropertyRow = require('./BooleanPropertyRow.jsx');
var ColorPickerPropertyRow = require('./ColorPickerPropertyRow.jsx');
var ImagePickerPropertyRow = require('./ImagePickerPropertyRow.jsx');
var ZOrderRow = require('./ZOrderRow.jsx');
var EventHeaderRow = require('./EventHeaderRow.jsx');
var EventRow = require('./EventRow.jsx');
var colors = require('../../sharedJsxStyles').colors;

var elementUtils = require('./elementUtils');

var ButtonProperties = React.createClass({
  displayName: 'ButtonProperties',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onDepthChange: React.PropTypes.func.isRequired
  },

  render: function render() {
    var element = this.props.element;

    return React.createElement(
      'div',
      { id: 'propertyRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(PropertyRow, {
        desc: 'text',
        initialValue: $(element).text(),
        handleChange: this.props.handleChange.bind(this, 'text') }),
      React.createElement(PropertyRow, {
        desc: 'width (px)',
        isNumber: true,
        initialValue: parseInt(element.style.width, 10),
        handleChange: this.props.handleChange.bind(this, 'style-width') }),
      React.createElement(PropertyRow, {
        desc: 'height (px)',
        isNumber: true,
        initialValue: parseInt(element.style.height, 10),
        handleChange: this.props.handleChange.bind(this, 'style-height') }),
      React.createElement(PropertyRow, {
        desc: 'x position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.left, 10),
        handleChange: this.props.handleChange.bind(this, 'left') }),
      React.createElement(PropertyRow, {
        desc: 'y position (px)',
        isNumber: true,
        initialValue: parseInt(element.style.top, 10),
        handleChange: this.props.handleChange.bind(this, 'top') }),
      React.createElement(ColorPickerPropertyRow, {
        desc: 'text color',
        initialValue: elementUtils.rgb2hex(element.style.color),
        handleChange: this.props.handleChange.bind(this, 'textColor') }),
      React.createElement(ColorPickerPropertyRow, {
        desc: 'background color',
        initialValue: elementUtils.rgb2hex(element.style.backgroundColor),
        handleChange: this.props.handleChange.bind(this, 'backgroundColor') }),
      React.createElement(PropertyRow, {
        desc: 'font size (px)',
        isNumber: true,
        initialValue: parseInt(element.style.fontSize, 10),
        handleChange: this.props.handleChange.bind(this, 'fontSize') }),
      React.createElement(ImagePickerPropertyRow, {
        desc: 'image',
        initialValue: element.getAttribute('data-canonical-image-url') || '',
        handleChange: this.props.handleChange.bind(this, 'image') }),
      React.createElement(BooleanPropertyRow, {
        desc: 'hidden',
        initialValue: $(element).hasClass('design-mode-hidden'),
        handleChange: this.props.handleChange.bind(this, 'hidden') }),
      React.createElement(ZOrderRow, {
        element: this.props.element,
        onDepthChange: this.props.onDepthChange })
    );

    // TODO (brent):
    // bold/italics/underline (p2)
    // shape (p2)
    // textAlignment (p2)
    // enabled (p2)
  }
});

var ButtonEvents = React.createClass({
  displayName: 'ButtonEvents',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    handleChange: React.PropTypes.func.isRequired,
    onInsertEvent: React.PropTypes.func.isRequired
  },

  getClickEventCode: function getClickEventCode() {
    var id = elementUtils.getId(this.props.element);
    var code = 'onEvent("' + id + '", "click", function(event) {\n' + '  console.log("' + id + ' clicked!");\n' + '});\n';
    return code;
  },

  insertClick: function insertClick() {
    this.props.onInsertEvent(this.getClickEventCode());
  },

  render: function render() {
    var element = this.props.element;
    var clickName = 'Click';
    var clickDesc = 'Triggered when the button is clicked with a mouse or tapped on a screen.';

    return React.createElement(
      'div',
      { id: 'eventRowContainer' },
      React.createElement(PropertyRow, {
        desc: 'id',
        initialValue: elementUtils.getId(element),
        handleChange: this.props.handleChange.bind(this, 'id'),
        isIdRow: true }),
      React.createElement(EventHeaderRow, null),
      React.createElement(EventRow, {
        name: clickName,
        desc: clickDesc,
        handleInsert: this.insertClick })
    );
  }
});

module.exports = {
  PropertyTab: ButtonProperties,
  EventTab: ButtonEvents,
  create: function create() {
    var element = document.createElement('button');
    element.appendChild(document.createTextNode('Button'));
    element.style.padding = '0px';
    element.style.margin = '0px';
    element.style.height = '30px';
    element.style.width = '80px';
    element.style.fontSize = '14px';
    element.style.color = colors.white;
    element.style.backgroundColor = colors.teal;

    return element;
  },
  onDeserialize: function onDeserialize(element, updateProperty) {
    var url = element.getAttribute('data-canonical-image-url');
    if (url) {
      updateProperty(element, 'image', url);
    }
  }
};

},{"../../sharedJsxStyles":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/sharedJsxStyles.js","./BooleanPropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/BooleanPropertyRow.jsx","./ColorPickerPropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/ColorPickerPropertyRow.jsx","./EventHeaderRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/EventHeaderRow.jsx","./EventRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/EventRow.jsx","./ImagePickerPropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/ImagePickerPropertyRow.jsx","./PropertyRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/PropertyRow.jsx","./ZOrderRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/ZOrderRow.jsx","./elementUtils":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/elementUtils.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/ZOrderRow.jsx":[function(require,module,exports){
'use strict';

var rowStyle = require('./rowStyle');

var ZOrderRow = React.createClass({
  displayName: 'ZOrderRow',

  propTypes: {
    element: React.PropTypes.instanceOf(HTMLElement).isRequired,
    onDepthChange: React.PropTypes.func.isRequired
  },

  getInitialState: function getInitialState() {
    return {
      value: this.props.initialValue
    };
  },

  componentWillReceiveProps: function componentWillReceiveProps(newProps) {
    this.setState({ value: newProps.initialValue });
  },

  render: function render() {
    var element = this.props.element;

    // Element will be wrapped in a resizable div
    var outerElement = element.parentNode;
    var index = Array.prototype.indexOf.call(outerElement.parentNode.children, outerElement);
    var isBackMost = index === 0;
    var isFrontMost = index + 1 === outerElement.parentNode.children.length;

    var squareButton = {
      width: 42,
      height: 42,
      marginLeft: 0,
      marginRight: 10,
      backgroundColor: '#0094ca' // $cyan
    };

    var squareButtonDisabled = {
      width: 42,
      height: 42,
      marginLeft: 0,
      marginRight: 10
    };

    return React.createElement(
      'div',
      { style: rowStyle.container },
      React.createElement(
        'div',
        { style: rowStyle.description },
        'depth'
      ),
      React.createElement(
        'div',
        null,
        React.createElement(
          'button',
          {
            style: isBackMost ? squareButtonDisabled : squareButton,
            onClick: this.props.onDepthChange.bind(this, element, 'toBack'),
            disabled: isBackMost,
            title: 'Send to Back' },
          React.createElement('i', { className: 'fa fa-angle-double-left' })
        ),
        React.createElement(
          'button',
          {
            style: isBackMost ? squareButtonDisabled : squareButton,
            onClick: this.props.onDepthChange.bind(this, element, 'backward'),
            disabled: isBackMost,
            title: 'Send Backward' },
          React.createElement('i', { className: 'fa fa-angle-left' })
        ),
        React.createElement(
          'button',
          {
            style: isFrontMost ? squareButtonDisabled : squareButton,
            onClick: this.props.onDepthChange.bind(this, element, 'forward'),
            disabled: isFrontMost,
            title: 'Send Forward' },
          React.createElement('i', { className: 'fa fa-angle-right' })
        ),
        React.createElement(
          'button',
          {
            style: isFrontMost ? squareButtonDisabled : squareButton,
            onClick: this.props.onDepthChange.bind(this, element, 'toFront'),
            disabled: isFrontMost,
            title: 'Send to Front' },
          React.createElement('i', { className: 'fa fa-angle-double-right' })
        )
      )
    );
  }
});

module.exports = ZOrderRow;

},{"./rowStyle":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/rowStyle.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/PropertyRow.jsx":[function(require,module,exports){
/* global $ */
'use strict';

var rowStyle = require('./rowStyle');
var elementUtils = require('./elementUtils');
var utils = require('../../utils');

var LockState = {
  LOCKED: 'LOCKED',
  UNLOCKED: 'UNLOCKED'
};

var PropertyRow = React.createClass({
  displayName: 'PropertyRow',

  propTypes: {
    desc: React.PropTypes.string.isRequired,
    initialValue: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]).isRequired,
    isNumber: React.PropTypes.bool,
    lockState: React.PropTypes.oneOf([LockState.LOCKED, LockState.UNLOCKED, undefined]),
    isMultiLine: React.PropTypes.bool,
    handleChange: React.PropTypes.func,
    handleLockChange: React.PropTypes.func,
    isIdRow: React.PropTypes.bool
  },

  getInitialState: function getInitialState() {
    return {
      value: this.props.initialValue,
      isValidValue: true
    };
  },

  componentWillReceiveProps: function componentWillReceiveProps(newProps) {
    this.setState({
      value: newProps.initialValue,
      isValidValue: true
    });
  },

  handleChangeInternal: function handleChangeInternal(event) {
    var value = event.target.value;
    var isValidValue = !this.props.isIdRow || elementUtils.isIdAvailable(value, this.props.initialValue);
    this.setValue(value, isValidValue);
  },

  /**
   * Updates this component's state, and calls the change handler
   * only if the new value is valid.
   * @param value {string} The new value of the property row.
   * @param isValidValue {boolean} Whether the value is valid. Default: true.
   */
  setValue: function setValue(value, isValidValue) {
    isValidValue = utils.valueOr(isValidValue, true);
    this.setState({
      value: value,
      isValidValue: isValidValue
    });
    if (isValidValue) {
      this.props.handleChange(value);
    }
  },

  handleClickLock: function handleClickLock() {
    if (this.props.lockState === LockState.LOCKED) {
      this.props.handleLockChange(LockState.UNLOCKED);
    } else if (this.props.lockState === LockState.UNLOCKED) {
      this.props.handleLockChange(LockState.LOCKED);
    }
  },

  onIdRowBlur: function onIdRowBlur() {
    if (!this.state.isValidValue) {
      var value = this.props.initialValue;
      this.setValue(value);
    }
  },

  render: function render() {
    var idRowStyle = $.extend({}, rowStyle.container, rowStyle.maxWidth, {
      backgroundColor: '#a69bc1',
      paddingBottom: 10
    });
    var inputStyle = $.extend({}, rowStyle.input, {
      backgroundColor: this.state.isValidValue ? null : "#ffcccc"
    });

    var inputElement;
    if (this.props.isMultiLine) {
      inputElement = React.createElement('textarea', {
        value: this.state.value,
        onChange: this.handleChangeInternal });
    } else {
      inputElement = React.createElement('input', {
        type: this.props.isNumber ? 'number' : undefined,
        value: this.state.value,
        onChange: this.handleChangeInternal,
        onBlur: this.props.isIdRow ? this.onIdRowBlur : null,
        style: inputStyle });
    }

    var lockStyle = {
      marginLeft: '5px'
    };

    var lockIcon;
    // state is either locked/unlocked or undefined (no icon)
    if (this.props.lockState) {
      var lockClass = "fa fa-" + (this.props.lockState === LockState.LOCKED ? 'lock' : 'unlock');
      lockIcon = React.createElement('i', {
        className: lockClass,
        style: lockStyle,
        onClick: this.handleClickLock });
    }

    return React.createElement(
      'div',
      { style: this.props.isIdRow ? idRowStyle : rowStyle.container },
      React.createElement(
        'div',
        { style: rowStyle.description },
        this.props.desc
      ),
      React.createElement(
        'div',
        null,
        inputElement,
        lockIcon
      )
    );
  }
});
PropertyRow.LockState = LockState;

module.exports = PropertyRow;

},{"../../utils":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/utils.js","./elementUtils":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/elementUtils.js","./rowStyle":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/rowStyle.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/elementUtils.js":[function(require,module,exports){
'use strict';

var constants = require('../constants');
var utils = require('../../utils');

// Taken from http://stackoverflow.com/a/3627747/2506748
module.exports.rgb2hex = function (rgb) {
  if (rgb === '') {
    return rgb;
  }
  var parsed = rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
  if (parsed === null) {
    return rgb;
  }
  function hex(x) {
    return ("0" + parseInt(x).toString(16)).slice(-2);
  }
  return "#" + hex(parsed[1]) + hex(parsed[2]) + hex(parsed[3]);
};

/**
 * Gets the element's id, stripping the prefix.
 * @param element {Element}
 * @param prefix {string} Optional. Defaults to DESIGN_ELEMENT_ID_PREFIX.
 * @returns {string} The element id with prefix stripped, or null if it had no id.
 */
var getId = module.exports.getId = function (element, prefix) {
  var elementId = element.getAttribute('id');
  if (elementId === null) {
    return null;
  }
  prefix = utils.valueOr(prefix, constants.DESIGN_ELEMENT_ID_PREFIX);
  checkId(element, prefix);
  return elementId.substr(prefix.length);
};

/**
 * Sets the element's id, adding the prefix.
 * @param element {Element}
 * @param value (string)
 * @param prefix {string} Optional. Defaults to DESIGN_ELEMENT_ID_PREFIX.
 */
var setId = module.exports.setId = function (element, value, prefix) {
  if (value === null) {
    return;
  }
  prefix = utils.valueOr(prefix, constants.DESIGN_ELEMENT_ID_PREFIX);
  element.setAttribute('id', prefix + value);
};

/**
 * Throws an error if the element's id does not start with the prefix.
 * @param element {Element}
 * @param prefix {string}
 */
function checkId(element, prefix) {
  if (element.id.substr(0, prefix.length) !== prefix) {
    throw new Error('element.id "' + element.id + '" does not start with prefix "' + prefix + '".');
  }
}

/**
 * Add the prefix to the elementId and returns the element with that id.
 * @param elementId {string}
 * @param prefix {string} Optional. Defaults to DESIGN_ELEMENT_ID_PREFIX.
 * @returns {Element}
 */
var getPrefixedElementById = module.exports.getPrefixedElementById = function (elementId, prefix) {
  prefix = prefix === undefined ? constants.DESIGN_ELEMENT_ID_PREFIX : prefix;
  return document.getElementById(prefix + elementId);
};

/**
 * Adds the prefix to the element's id.
 * @param element {Element}
 * @param prefix {string} Optional prefix to add. Defaults to ''.
 * @returns {Element}
 */
module.exports.addIdPrefix = function (element, prefix) {
  prefix = utils.valueOr(prefix, '');
  setId(element, element.getAttribute('id'), prefix);
};

/**
 * Removes the DESIGN_ELEMENT_ID_PREFIX from the element's id.
 * @param element {Element}
 * @returns {Element}
 */
module.exports.removeIdPrefix = function (element) {
  element.setAttribute('id', getId(element));
};

/**
 * Returns true if newId is available and won't collide with
 * other elements in design mode or the rest of applab.
 * @param {string} newId The id to evaluate.
 * @param {string} originalId The original id of this element.
 *     This will always be a valid value for newId.
 * @returns {boolean}
 */
module.exports.isIdAvailable = function (newId, originalId) {
  if (!newId) {
    return false;
  }
  if (newId === originalId) {
    return true;
  }

  // Don't allow if any other element in design mode has this prefixed id.
  if (getPrefixedElementById(newId)) {
    return false;
  }

  // Don't allow if any element outside of divApplab has this id.
  //
  // Elements in divApplab must be ignored since divApplab may be stale
  // with respect to what's in design mode, and we already caught any
  // collisions with design mode elements in the previous condition.
  var element = document.getElementById(newId);
  if (element && !$('#divApplab').find(element)[0]) {
    return false;
  }

  return true;
};

},{"../../utils":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/utils.js","../constants":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/constants.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/constants.js":[function(require,module,exports){
'use strict';

module.exports = {
  FOOTER_HEIGHT: 30,
  DESIGN_ELEMENT_ID_PREFIX: 'design_'
};

},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/ImagePickerPropertyRow.jsx":[function(require,module,exports){
'use strict';

var showAssetManager = require('../assetManagement/show.js');
var rowStyle = require('./rowStyle');

var PropertyRow = React.createClass({
  displayName: 'PropertyRow',

  propTypes: {
    initialValue: React.PropTypes.string.isRequired,
    handleChange: React.PropTypes.func
  },

  getInitialState: function getInitialState() {
    return {
      value: this.props.initialValue
    };
  },

  handleChangeInternal: function handleChangeInternal(event) {
    this.changeImage(event.target.value);
  },

  handleButtonClick: function handleButtonClick() {
    // TODO: This isn't the pure-React way of referencing the AssetManager
    // component. Ideally we'd be able to `require` it directly without needing
    // to know about `designMode`.
    //
    // However today the `createModalDialog` function and `Dialog` component
    // are intertwined with `StudioApp` which is why we have this direct call.
    showAssetManager(this.changeImage, 'image');
  },

  changeImage: function changeImage(filename) {
    this.props.handleChange(filename);
    this.setState({ value: filename });
  },

  render: function render() {
    return React.createElement(
      'div',
      { style: rowStyle.container },
      React.createElement(
        'div',
        { style: rowStyle.description },
        this.props.desc
      ),
      React.createElement(
        'div',
        null,
        React.createElement('input', {
          value: this.state.value,
          onChange: this.handleChangeInternal,
          style: rowStyle.input }),
        ' ',
        React.createElement(
          'a',
          { onClick: this.handleButtonClick },
          'Choose...'
        )
      )
    );
  }
});

module.exports = PropertyRow;

},{"../assetManagement/show.js":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/assetManagement/show.js","./rowStyle":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/rowStyle.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/assetManagement/show.js":[function(require,module,exports){
/* global Dialog, dashboard, Applab */
// TODO (josh) - don't pass `Dialog` into `createModalDialog`.

'use strict';

var AssetManager = require('./AssetManager.jsx');
var studioApp = require('../../StudioApp').singleton;

/**
 * Display the "Manage Assets" modal.
 * @param assetChosen {Function} Called when the user chooses an asset. The
 *   "Choose" button in the UI only appears if this optional param is provided.
 * @param typeFilter {String} The type of assets to show and allow to be
 *   uploaded.
 */
module.exports = function (assetChosen, typeFilter) {
  var codeDiv = document.createElement('div');
  var showChoseImageButton = assetChosen && typeof assetChosen === 'function';
  var dialog = studioApp.createModalDialog({
    contentDiv: codeDiv,
    defaultBtnSelector: 'again-button',
    id: 'manageAssetsModal'
  });
  React.render(React.createElement(AssetManager, {
    typeFilter: typeFilter,
    channelId: Applab.channelId,
    uploadsEnabled: !dashboard.project.exceedsAbuseThreshold(),
    assetChosen: showChoseImageButton ? function (fileWithPath) {
      dialog.hide();
      assetChosen(fileWithPath);
    } : null
  }), codeDiv);

  dialog.show();
};

},{"../../StudioApp":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/StudioApp.js","./AssetManager.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/assetManagement/AssetManager.jsx"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/assetManagement/AssetManager.jsx":[function(require,module,exports){
'use strict';

var assetsApi = require('../../clientApi').assets;
var AssetRow = require('./AssetRow.jsx');
var AssetUploader = require('./AssetUploader.jsx');
var assetListStore = require('./assetListStore');

var errorMessages = {
  403: 'Quota exceeded. Please delete some files and try again.',
  413: 'The file is too large.',
  415: 'This type of file is not supported.',
  500: 'The server responded with an error.',
  unknown: 'An unknown error occurred.'
};

var errorUploadDisabled = "This project has been reported for abusive content, " + "so uploading new assets is disabled.";

function getErrorMessage(status) {
  return errorMessages[status] || errorMessages.unknown;
}

/**
 * A component for managing hosted assets.
 */
module.exports = React.createClass({
  displayName: 'exports',

  propTypes: {
    assetChosen: React.PropTypes.func,
    typeFilter: React.PropTypes.string,
    channelId: React.PropTypes.string.isRequired,
    uploadsEnabled: React.PropTypes.bool.isRequired
  },

  getInitialState: function getInitialState() {
    return {
      assets: null,
      statusMessage: this.props.uploadsEnabled ? '' : errorUploadDisabled
    };
  },

  componentWillMount: function componentWillMount() {
    // TODO: Use Dave's client api when it's finished.
    assetsApi.ajax('GET', '', this.onAssetListReceived, this.onAssetListFailure);
  },

  /**
   * Called after the component mounts, when the server responds with the
   * current list of assets.
   * @param xhr
   */
  onAssetListReceived: function onAssetListReceived(xhr) {
    assetListStore.reset(JSON.parse(xhr.responseText));
    this.setState({ assets: assetListStore.list(this.props.typeFilter) });
  },

  /**
   * Called after the component mounts, if the server responds with an error
   * when loading the current list of assets.
   * @param xhr
   */
  onAssetListFailure: function onAssetListFailure(xhr) {
    this.setState({ statusMessage: 'Error loading asset list: ' + getErrorMessage(xhr.status) });
  },

  onUploadStart: function onUploadStart() {
    this.setState({ statusMessage: 'Uploading...' });
  },

  onUploadDone: function onUploadDone(result) {
    assetListStore.add(result);
    this.setState({
      assets: assetListStore.list(this.props.typeFilter),
      statusMessage: 'File "' + result.filename + '" successfully uploaded!'
    });
  },

  onUploadError: function onUploadError(status) {
    this.setState({ statusMessage: 'Error uploading file: ' + getErrorMessage(status) });
  },

  deleteAssetRow: function deleteAssetRow(name) {
    this.setState({
      assets: assetListStore.remove(name),
      statusMessage: 'File "' + name + '" successfully deleted!'
    });
  },

  render: function render() {
    var uploadButton = React.createElement(
      'div',
      null,
      React.createElement(AssetUploader, {
        uploadsEnabled: this.props.uploadsEnabled,
        typeFilter: this.props.typeFilter,
        channelId: this.props.channelId,
        onUploadStart: this.onUploadStart,
        onUploadDone: this.onUploadDone,
        onUploadError: this.onUploadError }),
      React.createElement(
        'span',
        { style: { margin: '0 10px' }, id: 'manage-asset-status' },
        this.state.statusMessage
      )
    );

    var assetList;
    // If `this.state.assets` is null, the asset list is still loading. If it's
    // empty, the asset list has loaded and there are no assets in the current
    // channel (matching the `typeFilter`, if one was provided).
    if (this.state.assets === null) {
      assetList = React.createElement(
        'div',
        { style: { margin: '1em 0', textAlign: 'center' } },
        React.createElement('i', { className: 'fa fa-spinner fa-spin', style: { fontSize: '32px' } })
      );
    } else if (this.state.assets.length === 0) {
      assetList = React.createElement(
        'div',
        null,
        React.createElement(
          'div',
          { style: { margin: '1em 0' } },
          'Your assets will appear here. Click "Upload File" to add a new asset for this project.'
        ),
        uploadButton
      );
    } else {
      var rows = this.state.assets.map((function (asset) {
        var choose = this.props.assetChosen && this.props.assetChosen.bind(this, asset.filename);

        return React.createElement(AssetRow, {
          key: asset.filename,
          name: asset.filename,
          type: asset.category,
          size: asset.size,
          onChoose: choose,
          onDelete: this.deleteAssetRow.bind(this, asset.filename) });
      }).bind(this));

      assetList = React.createElement(
        'div',
        null,
        React.createElement(
          'div',
          { style: { maxHeight: '330px', overflowY: 'scroll', margin: '1em 0', paddingRight: '15px' } },
          React.createElement(
            'table',
            { style: { width: '100%' } },
            React.createElement(
              'tbody',
              null,
              rows
            )
          )
        ),
        uploadButton
      );
    }

    var title = this.props.assetChosen ? React.createElement(
      'p',
      { className: 'dialog-title' },
      'Choose Assets'
    ) : React.createElement(
      'p',
      { className: 'dialog-title' },
      'Manage Assets'
    );

    return React.createElement(
      'div',
      { className: 'modal-content', style: { margin: 0 } },
      title,
      assetList
    );
  }
});

},{"../../clientApi":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/clientApi.js","./AssetRow.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/assetManagement/AssetRow.jsx","./AssetUploader.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/assetManagement/AssetUploader.jsx","./assetListStore":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/assetManagement/assetListStore.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/assetManagement/assetListStore.js":[function(require,module,exports){
"use strict";

var assets = [];

module.exports = {
  reset: function reset(list) {
    assets = list.slice();
  },

  add: function add(asset) {
    assets.push(asset);
    return assets.slice();
  },

  remove: function remove(filename) {
    assets = assets.filter(function (asset) {
      return asset.filename !== filename;
    });
    return assets.slice();
  },

  list: function list(typeFilter) {
    return typeFilter ? assets.filter(function (asset) {
      return asset.category === typeFilter;
    }) : assets.slice();
  }
};

},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/assetManagement/AssetUploader.jsx":[function(require,module,exports){

/**
 * A component for managing hosted assets.
 */
'use strict';

module.exports = React.createClass({
  displayName: 'exports',

  propTypes: {
    onUploadStart: React.PropTypes.func.isRequired,
    onUploadDone: React.PropTypes.func.isRequired,
    channelId: React.PropTypes.string.isRequired,
    typeFilter: React.PropTypes.string,
    uploadsEnabled: React.PropTypes.bool.isRequired
  },

  componentDidMount: function componentDidMount() {
    var props = this.props;

    $(React.findDOMNode(this.refs.uploader)).fileupload({
      dataType: 'json',
      url: '/v3/assets/' + props.channelId + '/',
      // prevent fileupload from replacing the input DOM element, which
      // React does not like
      replaceFileInput: false,
      add: function add(e, data) {
        props.onUploadStart();
        data.submit();
      },
      done: function done(e, data) {
        props.onUploadDone(data.result);
      },
      error: function error(e, data) {
        props.onUploadError(e.status);
      }
    });
  },

  componentWillUnmount: function componentWillUnmount() {
    $(React.findDOMNode(this.refs.uploader)).fileupload('destroy');
  },

  /**
   * We've hidden the <input type="file"/> and replaced it with a big button.
   * Forward clicks on the button to the hidden file input.
   */
  fileUploadClicked: function fileUploadClicked() {
    var uploader = React.findDOMNode(this.refs.uploader);
    uploader.click();
  },

  render: function render() {
    // NOTE: IE9 will ignore accept, which means on this browser we can end
    // up uploading files that dont match typeFilter
    return React.createElement(
      'span',
      null,
      React.createElement('input', {
        ref: 'uploader',
        type: 'file',
        style: { display: 'none' },
        accept: (this.props.typeFilter || '*') + '/*' }),
      React.createElement(
        'button',
        {
          onClick: this.fileUploadClicked,
          className: 'share',
          id: 'upload-asset',
          disabled: !this.props.uploadsEnabled },
        React.createElement('i', { className: 'fa fa-upload' }),
        ' Upload File'
      )
    );
  }
});

},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/assetManagement/AssetRow.jsx":[function(require,module,exports){
'use strict';

var assetsApi = require('../../clientApi').assets;
var AssetThumbnail = require('./AssetThumbnail.jsx');

/**
 * A single row in the AssetManager, describing one asset.
 */
module.exports = React.createClass({
  displayName: 'exports',

  propTypes: {
    name: React.PropTypes.string.isRequired,
    type: React.PropTypes.oneOf(['image', 'audio', 'video']).isRequired,
    size: React.PropTypes.number,
    onChoose: React.PropTypes.func,
    onDelete: React.PropTypes.func.isRequired
  },

  getInitialState: function getInitialState() {
    return {
      action: 'normal',
      actionText: ''
    };
  },

  /**
   * Confirm the user actually wants to delete this asset.
   */
  confirmDelete: function confirmDelete() {
    this.setState({ action: 'confirming delete', actionText: '' });
  },

  /**
   * This user didn't want to delete this asset.
   */
  cancelDelete: function cancelDelete() {
    this.setState({ action: 'normal', actionText: '' });
  },

  /**
   * Delete this asset and notify the parent to remove this row. If the delete
   * fails, flip back to 'confirming delete' and display a message.
   */
  handleDelete: function handleDelete() {
    this.setState({ action: 'deleting', actionText: '' });

    // TODO: Use Dave's client api when it's finished.
    assetsApi.ajax('DELETE', this.props.name, this.props.onDelete, (function () {
      this.setState({ action: 'confirming delete',
        actionText: 'Error deleting file.' });
    }).bind(this));
  },

  render: function render() {
    var actions, flex;
    // `flex` is the "Choose" button in file-choose mode, or the filesize.
    if (this.props.onChoose) {
      flex = React.createElement(
        'button',
        { onClick: this.props.onChoose },
        'Choose'
      );
    } else {
      var size = (this.props.size / 1000).toFixed(2);
      flex = size + ' kb';
    }

    switch (this.state.action) {
      case 'normal':
        var src = assetsApi.basePath(this.props.name);
        actions = React.createElement(
          'td',
          { width: '250', style: { textAlign: 'right' } },
          flex,
          React.createElement(
            'a',
            { href: src,
              target: '_blank',
              style: { backgroundColor: 'transparent' } },
            React.createElement(
              'button',
              null,
              React.createElement('i', { className: 'fa fa-eye' })
            )
          ),
          React.createElement(
            'button',
            { className: 'btn-danger', onClick: this.confirmDelete },
            React.createElement('i', { className: 'fa fa-trash-o' })
          ),
          this.state.actionText
        );
        break;
      case 'confirming delete':
        actions = React.createElement(
          'td',
          { width: '250', style: { textAlign: 'right' } },
          React.createElement(
            'button',
            { className: 'btn-danger', onClick: this.handleDelete },
            'Delete File'
          ),
          React.createElement(
            'button',
            { onClick: this.cancelDelete },
            'Cancel'
          ),
          this.state.actionText
        );
        break;
      case 'deleting':
        actions = React.createElement(
          'td',
          { width: '250', style: { textAlign: 'right' } },
          React.createElement('i', { className: 'fa fa-spinner fa-spin', style: {
              fontSize: '32px',
              marginRight: '15px'
            } })
        );
        break;
    }

    return React.createElement(
      'tr',
      { className: 'assetRow', onDoubleClick: this.props.onChoose },
      React.createElement(AssetThumbnail, { type: this.props.type, name: this.props.name }),
      React.createElement(
        'td',
        null,
        this.props.name
      ),
      actions
    );
  }
});

},{"../../clientApi":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/clientApi.js","./AssetThumbnail.jsx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/assetManagement/AssetThumbnail.jsx"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/assetManagement/AssetThumbnail.jsx":[function(require,module,exports){
'use strict';

var assetsApi = require('../../clientApi').assets;

var defaultIcons = {
  image: 'fa fa-picture-o',
  audio: 'fa fa-music',
  video: 'fa fa-video-camera',
  unknown: 'fa fa-question'
};

var assetThumbnailStyle = {
  width: 'auto',
  maxWidth: '100%',
  height: 'auto',
  maxHeight: '100%',
  marginTop: '50%',
  transform: 'translateY(-50%)',
  msTransform: 'translateY(-50%)',
  WebkitTransform: 'translateY(-50%)'
};

var assetIconStyle = {
  margin: '15px 0',
  fontSize: '32px'
};

module.exports = React.createClass({
  displayName: 'exports',

  propTypes: {
    name: React.PropTypes.string.isRequired,
    type: React.PropTypes.oneOf(['image', 'audio', 'video']).isRequired
  },

  render: function render() {
    var type = this.props.type;
    var name = this.props.name;

    return React.createElement(
      'td',
      { width: '80' },
      React.createElement(
        'div',
        { className: 'assetThumbnail', style: {
            width: '60px',
            height: '60px',
            margin: '10px auto',
            background: '#eee',
            border: '1px solid #ccc',
            textAlign: 'center'
          } },
        type === 'image' ? React.createElement('img', { src: assetsApi.basePath(name), style: assetThumbnailStyle }) : React.createElement('i', { className: defaultIcons[type] || defaultIcons.unknown, style: assetIconStyle })
      )
    );
  }
});

},{"../../clientApi":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/clientApi.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/EventRow.jsx":[function(require,module,exports){
/* global $ */
'use strict';

var rowStyle = require('./rowStyle');

var EventRow = module.exports = React.createClass({
  displayName: 'exports',

  propTypes: {
    name: React.PropTypes.string.isRequired,
    desc: React.PropTypes.string.isRequired,
    handleInsert: React.PropTypes.func.isRequired
  },

  render: function render() {
    var style = {
      container: $.extend({}, rowStyle.container, rowStyle.maxWidth),
      name: {
        color: '#4d575f',
        fontWeight: 'bold',
        fontSize: 15
      },
      desc: {
        color: '#949ca2',
        fontStyle: 'italic'
      }
    };

    return React.createElement(
      'div',
      { style: style.container },
      React.createElement(
        'div',
        { style: style.name },
        this.props.name
      ),
      React.createElement(
        'div',
        { style: style.desc },
        this.props.desc
      ),
      React.createElement(
        'div',
        null,
        React.createElement(
          'a',
          { onClick: this.props.handleInsert, className: 'hover-pointer' },
          'Insert and show code'
        )
      )
    );
  }
});

},{"./rowStyle":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/rowStyle.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/EventHeaderRow.jsx":[function(require,module,exports){
/* global $ */
'use strict';

var rowStyle = require('./rowStyle');
var applabMsg = require('../locale');

var EventHeaderRow = module.exports = React.createClass({
  displayName: 'exports',

  render: function render() {
    var style = $.extend({}, rowStyle.container, rowStyle.maxWidth, {
      color: '#5b6770'
    });

    return React.createElement(
      'div',
      { style: style },
      applabMsg.addEventHeader()
    );
  }
});

},{"../locale":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/locale.js","./rowStyle":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/rowStyle.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/ColorPickerPropertyRow.jsx":[function(require,module,exports){
/* global $ */
'use strict';

var rowStyle = require('./rowStyle');
var colors = require('../../sharedJsxStyles').colors;

var colorPicker = require('../colpick');

var ColorPickerPropertyRow = React.createClass({
  displayName: 'ColorPickerPropertyRow',

  propTypes: {
    initialValue: React.PropTypes.string.isRequired,
    handleChange: React.PropTypes.func
  },

  getInitialState: function getInitialState() {
    return {
      value: this.props.initialValue
    };
  },

  componentDidMount: function componentDidMount() {
    this.ensureColorPicker();
  },

  componentDidUpdate: function componentDidUpdate() {
    this.ensureColorPicker();
  },

  /**
   * Make our button a colpick color picker, if it isn't already
   */
  ensureColorPicker: function ensureColorPicker() {
    var element = React.findDOMNode(this.refs.colorPicker);
    $(element).colpick({
      color: this.state.value,
      layout: 'rgbhex',
      submit: 0,
      onChange: this.handleColorChange
    });
  },

  handleChangeInternal: function handleChangeInternal(event) {
    this.changeColor(event.target.value);
  },

  handleColorChange: function handleColorChange(hsbColor, hexColor) {
    this.changeColor('#' + hexColor);
  },

  changeColor: function changeColor(color) {
    this.props.handleChange(color);
    this.setState({ value: color });
  },

  render: function render() {
    var buttonStyle = {
      backgroundColor: this.state.value,
      verticalAlign: 'top'
    };

    return React.createElement(
      'div',
      { style: rowStyle.container },
      React.createElement(
        'div',
        { style: rowStyle.description },
        this.props.desc
      ),
      React.createElement(
        'div',
        null,
        React.createElement('input', {
          value: this.state.value,
          onChange: this.handleChangeInternal,
          style: rowStyle.input }),
        React.createElement('button', {
          className: this.state.value === '' ? 'rainbow-gradient' : undefined,
          style: buttonStyle,
          ref: 'colorPicker' })
      )
    );
  }
});

module.exports = ColorPickerPropertyRow;

},{"../../sharedJsxStyles":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/sharedJsxStyles.js","../colpick":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/colpick.js","./rowStyle":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/rowStyle.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/sharedJsxStyles.js":[function(require,module,exports){
/**
 * A place to share styles for use in inline jsx. There may be value in keeping
 * this in sync with some of our .scss files, in particular when it comes to
 * colors
 */

'use strict';

module.exports = {
  colors: {
    green: '#b9bf15',
    white: '#fff',
    orange: '#ffa400',
    teal: '#1abc9c'
  }
};

},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/colpick.js":[function(require,module,exports){
/*
colpick Color Picker
Copyright 2013 Jose Vargas. Licensed under GPL license. Based on Stefan Petre's Color Picker www.eyecon.ro, dual licensed under the MIT and GPL licenses

For usage and examples: colpick.com/plugin
 */

'use strict';

(function ($) {
	var colpick = (function () {
		var tpl = '<div class="colpick"><div class="colpick_color"><div class="colpick_color_overlay1"><div class="colpick_color_overlay2"><div class="colpick_selector_outer"><div class="colpick_selector_inner"></div></div></div></div></div><div class="colpick_hue"><div class="colpick_hue_arrs"><div class="colpick_hue_larr"></div><div class="colpick_hue_rarr"></div></div></div><div class="colpick_new_color"></div><div class="colpick_current_color"></div><div class="colpick_hex_field"><div class="colpick_field_letter">#</div><input type="text" maxlength="6" size="6" /></div><div class="colpick_rgb_r colpick_field"><div class="colpick_field_letter">R</div><input type="text" maxlength="3" size="3" /><div class="colpick_field_arrs"><div class="colpick_field_uarr"></div><div class="colpick_field_darr"></div></div></div><div class="colpick_rgb_g colpick_field"><div class="colpick_field_letter">G</div><input type="text" maxlength="3" size="3" /><div class="colpick_field_arrs"><div class="colpick_field_uarr"></div><div class="colpick_field_darr"></div></div></div><div class="colpick_rgb_b colpick_field"><div class="colpick_field_letter">B</div><input type="text" maxlength="3" size="3" /><div class="colpick_field_arrs"><div class="colpick_field_uarr"></div><div class="colpick_field_darr"></div></div></div><div class="colpick_hsb_h colpick_field"><div class="colpick_field_letter">H</div><input type="text" maxlength="3" size="3" /><div class="colpick_field_arrs"><div class="colpick_field_uarr"></div><div class="colpick_field_darr"></div></div></div><div class="colpick_hsb_s colpick_field"><div class="colpick_field_letter">S</div><input type="text" maxlength="3" size="3" /><div class="colpick_field_arrs"><div class="colpick_field_uarr"></div><div class="colpick_field_darr"></div></div></div><div class="colpick_hsb_b colpick_field"><div class="colpick_field_letter">B</div><input type="text" maxlength="3" size="3" /><div class="colpick_field_arrs"><div class="colpick_field_uarr"></div><div class="colpick_field_darr"></div></div></div><div class="colpick_submit"></div></div>',
		    defaults = {
			showEvent: 'click',
			onShow: function onShow() {},
			onBeforeShow: function onBeforeShow() {},
			onHide: function onHide() {},
			onChange: function onChange() {},
			onSubmit: function onSubmit() {},
			colorScheme: 'light',
			color: '3289c7',
			livePreview: true,
			flat: false,
			layout: 'full',
			submit: 1,
			submitText: 'OK',
			height: 156
		},
		   
		//Fill the inputs of the plugin
		fillRGBFields = function fillRGBFields(hsb, cal) {
			var rgb = hsbToRgb(hsb);
			$(cal).data('colpick').fields.eq(1).val(rgb.r).end().eq(2).val(rgb.g).end().eq(3).val(rgb.b).end();
		},
		    fillHSBFields = function fillHSBFields(hsb, cal) {
			$(cal).data('colpick').fields.eq(4).val(Math.round(hsb.h)).end().eq(5).val(Math.round(hsb.s)).end().eq(6).val(Math.round(hsb.b)).end();
		},
		    fillHexFields = function fillHexFields(hsb, cal) {
			$(cal).data('colpick').fields.eq(0).val(hsbToHex(hsb));
		},
		   
		//Set the round selector position
		setSelector = function setSelector(hsb, cal) {
			$(cal).data('colpick').selector.css('backgroundColor', '#' + hsbToHex({ h: hsb.h, s: 100, b: 100 }));
			$(cal).data('colpick').selectorIndic.css({
				left: parseInt($(cal).data('colpick').height * hsb.s / 100, 10),
				top: parseInt($(cal).data('colpick').height * (100 - hsb.b) / 100, 10)
			});
		},
		   
		//Set the hue selector position
		setHue = function setHue(hsb, cal) {
			$(cal).data('colpick').hue.css('top', parseInt($(cal).data('colpick').height - $(cal).data('colpick').height * hsb.h / 360, 10));
		},
		   
		//Set current and new colors
		setCurrentColor = function setCurrentColor(hsb, cal) {
			$(cal).data('colpick').currentColor.css('backgroundColor', '#' + hsbToHex(hsb));
		},
		    setNewColor = function setNewColor(hsb, cal) {
			$(cal).data('colpick').newColor.css('backgroundColor', '#' + hsbToHex(hsb));
		},
		   
		//Called when the new color is changed
		change = function change(ev) {
			var cal = $(this).parent().parent(),
			    col;
			if (this.parentNode.className.indexOf('_hex') > 0) {
				cal.data('colpick').color = col = hexToHsb(fixHex(this.value));
				fillRGBFields(col, cal.get(0));
				fillHSBFields(col, cal.get(0));
			} else if (this.parentNode.className.indexOf('_hsb') > 0) {
				cal.data('colpick').color = col = fixHSB({
					h: parseInt(cal.data('colpick').fields.eq(4).val(), 10),
					s: parseInt(cal.data('colpick').fields.eq(5).val(), 10),
					b: parseInt(cal.data('colpick').fields.eq(6).val(), 10)
				});
				fillRGBFields(col, cal.get(0));
				fillHexFields(col, cal.get(0));
			} else {
				cal.data('colpick').color = col = rgbToHsb(fixRGB({
					r: parseInt(cal.data('colpick').fields.eq(1).val(), 10),
					g: parseInt(cal.data('colpick').fields.eq(2).val(), 10),
					b: parseInt(cal.data('colpick').fields.eq(3).val(), 10)
				}));
				fillHexFields(col, cal.get(0));
				fillHSBFields(col, cal.get(0));
			}
			setSelector(col, cal.get(0));
			setHue(col, cal.get(0));
			setNewColor(col, cal.get(0));
			cal.data('colpick').onChange.apply(cal.parent(), [col, hsbToHex(col), hsbToRgb(col), cal.data('colpick').el, 0]);
		},
		   
		//Change style on blur and on focus of inputs
		blur = function blur(ev) {
			$(this).parent().removeClass('colpick_focus');
		},
		    focus = function focus() {
			$(this).parent().parent().data('colpick').fields.parent().removeClass('colpick_focus');
			$(this).parent().addClass('colpick_focus');
		},
		   
		//Increment/decrement arrows functions
		downIncrement = function downIncrement(ev) {
			ev.preventDefault ? ev.preventDefault() : ev.returnValue = false;
			var field = $(this).parent().find('input').focus();
			var current = {
				el: $(this).parent().addClass('colpick_slider'),
				max: this.parentNode.className.indexOf('_hsb_h') > 0 ? 360 : this.parentNode.className.indexOf('_hsb') > 0 ? 100 : 255,
				y: ev.pageY,
				field: field,
				val: parseInt(field.val(), 10),
				preview: $(this).parent().parent().data('colpick').livePreview
			};
			$(document).mouseup(current, upIncrement);
			$(document).mousemove(current, moveIncrement);
		},
		    moveIncrement = function moveIncrement(ev) {
			ev.data.field.val(Math.max(0, Math.min(ev.data.max, parseInt(ev.data.val - ev.pageY + ev.data.y, 10))));
			if (ev.data.preview) {
				change.apply(ev.data.field.get(0), [true]);
			}
			return false;
		},
		    upIncrement = function upIncrement(ev) {
			change.apply(ev.data.field.get(0), [true]);
			ev.data.el.removeClass('colpick_slider').find('input').focus();
			$(document).off('mouseup', upIncrement);
			$(document).off('mousemove', moveIncrement);
			return false;
		},
		   
		//Hue slider functions
		downHue = function downHue(ev) {
			ev.preventDefault ? ev.preventDefault() : ev.returnValue = false;
			var current = {
				cal: $(this).parent(),
				y: $(this).offset().top
			};
			$(document).on('mouseup touchend', current, upHue);
			$(document).on('mousemove touchmove', current, moveHue);

			var pageY = ev.type == 'touchstart' ? ev.originalEvent.changedTouches[0].pageY : ev.pageY;
			change.apply(current.cal.data('colpick').fields.eq(4).val(parseInt(360 * (current.cal.data('colpick').height - (pageY - current.y)) / current.cal.data('colpick').height, 10)).get(0), [current.cal.data('colpick').livePreview]);
			return false;
		},
		    moveHue = function moveHue(ev) {
			var pageY = ev.type == 'touchmove' ? ev.originalEvent.changedTouches[0].pageY : ev.pageY;
			change.apply(ev.data.cal.data('colpick').fields.eq(4).val(parseInt(360 * (ev.data.cal.data('colpick').height - Math.max(0, Math.min(ev.data.cal.data('colpick').height, pageY - ev.data.y))) / ev.data.cal.data('colpick').height, 10)).get(0), [ev.data.preview]);
			return false;
		},
		    upHue = function upHue(ev) {
			fillRGBFields(ev.data.cal.data('colpick').color, ev.data.cal.get(0));
			fillHexFields(ev.data.cal.data('colpick').color, ev.data.cal.get(0));
			$(document).off('mouseup touchend', upHue);
			$(document).off('mousemove touchmove', moveHue);
			return false;
		},
		   
		//Color selector functions
		downSelector = function downSelector(ev) {
			ev.preventDefault ? ev.preventDefault() : ev.returnValue = false;
			var current = {
				cal: $(this).parent(),
				pos: $(this).offset()
			};
			current.preview = current.cal.data('colpick').livePreview;

			$(document).on('mouseup touchend', current, upSelector);
			$(document).on('mousemove touchmove', current, moveSelector);

			var payeX, pageY;
			if (ev.type == 'touchstart') {
				pageX = ev.originalEvent.changedTouches[0].pageX, pageY = ev.originalEvent.changedTouches[0].pageY;
			} else {
				pageX = ev.pageX;
				pageY = ev.pageY;
			}

			change.apply(current.cal.data('colpick').fields.eq(6).val(parseInt(100 * (current.cal.data('colpick').height - (pageY - current.pos.top)) / current.cal.data('colpick').height, 10)).end().eq(5).val(parseInt(100 * (pageX - current.pos.left) / current.cal.data('colpick').height, 10)).get(0), [current.preview]);
			return false;
		},
		    moveSelector = function moveSelector(ev) {
			var payeX, pageY;
			if (ev.type == 'touchmove') {
				pageX = ev.originalEvent.changedTouches[0].pageX, pageY = ev.originalEvent.changedTouches[0].pageY;
			} else {
				pageX = ev.pageX;
				pageY = ev.pageY;
			}

			change.apply(ev.data.cal.data('colpick').fields.eq(6).val(parseInt(100 * (ev.data.cal.data('colpick').height - Math.max(0, Math.min(ev.data.cal.data('colpick').height, pageY - ev.data.pos.top))) / ev.data.cal.data('colpick').height, 10)).end().eq(5).val(parseInt(100 * Math.max(0, Math.min(ev.data.cal.data('colpick').height, pageX - ev.data.pos.left)) / ev.data.cal.data('colpick').height, 10)).get(0), [ev.data.preview]);
			return false;
		},
		    upSelector = function upSelector(ev) {
			fillRGBFields(ev.data.cal.data('colpick').color, ev.data.cal.get(0));
			fillHexFields(ev.data.cal.data('colpick').color, ev.data.cal.get(0));
			$(document).off('mouseup touchend', upSelector);
			$(document).off('mousemove touchmove', moveSelector);
			return false;
		},
		   
		//Submit button
		clickSubmit = function clickSubmit(ev) {
			var cal = $(this).parent();
			var col = cal.data('colpick').color;
			cal.data('colpick').origColor = col;
			setCurrentColor(col, cal.get(0));
			cal.data('colpick').onSubmit(col, hsbToHex(col), hsbToRgb(col), cal.data('colpick').el);
		},
		   
		//Show/hide the color picker
		show = function show(ev) {
			// Prevent the trigger of any direct parent
			ev.stopPropagation();
			var cal = $('#' + $(this).data('colpickId'));
			cal.data('colpick').onBeforeShow.apply(this, [cal.get(0)]);
			var pos = $(this).offset();
			var top = pos.top + this.offsetHeight;
			var left = pos.left;
			var viewPort = getViewport();
			var calW = cal.width();
			if (left + calW > viewPort.l + viewPort.w) {
				left -= calW;
			}
			cal.css({ left: left + 'px', top: top + 'px' });
			if (cal.data('colpick').onShow.apply(this, [cal.get(0)]) != false) {
				cal.show();
			}
			//Hide when user clicks outside
			$('html').mousedown({ cal: cal }, hide);
			cal.mousedown(function (ev) {
				ev.stopPropagation();
			});
		},
		    hide = function hide(ev) {
			if (ev.data.cal.data('colpick').onHide.apply(this, [ev.data.cal.get(0)]) != false) {
				ev.data.cal.hide();
			}
			$('html').off('mousedown', hide);
		},
		    getViewport = function getViewport() {
			var m = document.compatMode == 'CSS1Compat';
			return {
				l: window.pageXOffset || (m ? document.documentElement.scrollLeft : document.body.scrollLeft),
				w: window.innerWidth || (m ? document.documentElement.clientWidth : document.body.clientWidth)
			};
		},
		   
		//Fix the values if the user enters a negative or high value
		fixHSB = function fixHSB(hsb) {
			return {
				h: Math.min(360, Math.max(0, hsb.h)),
				s: Math.min(100, Math.max(0, hsb.s)),
				b: Math.min(100, Math.max(0, hsb.b))
			};
		},
		    fixRGB = function fixRGB(rgb) {
			return {
				r: Math.min(255, Math.max(0, rgb.r)),
				g: Math.min(255, Math.max(0, rgb.g)),
				b: Math.min(255, Math.max(0, rgb.b))
			};
		},
		    fixHex = function fixHex(hex) {
			var len = 6 - hex.length;
			if (len > 0) {
				var o = [];
				for (var i = 0; i < len; i++) {
					o.push('0');
				}
				o.push(hex);
				hex = o.join('');
			}
			return hex;
		},
		    restoreOriginal = function restoreOriginal() {
			var cal = $(this).parent();
			var col = cal.data('colpick').origColor;
			cal.data('colpick').color = col;
			fillRGBFields(col, cal.get(0));
			fillHexFields(col, cal.get(0));
			fillHSBFields(col, cal.get(0));
			setSelector(col, cal.get(0));
			setHue(col, cal.get(0));
			setNewColor(col, cal.get(0));
		};
		return {
			init: function init(opt) {
				opt = $.extend({}, defaults, opt || {});
				//Set color
				if (typeof opt.color == 'string') {
					opt.color = hexToHsb(opt.color);
				} else if (opt.color.r != undefined && opt.color.g != undefined && opt.color.b != undefined) {
					opt.color = rgbToHsb(opt.color);
				} else if (opt.color.h != undefined && opt.color.s != undefined && opt.color.b != undefined) {
					opt.color = fixHSB(opt.color);
				} else {
					return this;
				}

				//For each selected DOM element
				return this.each(function () {
					//If the element does not have an ID
					if (!$(this).data('colpickId')) {
						var options = $.extend({}, opt);
						options.origColor = opt.color;
						//Generate and assign a random ID
						var id = 'collorpicker_' + parseInt(Math.random() * 1000);
						$(this).data('colpickId', id);
						//Set the tpl's ID and get the HTML
						var cal = $(tpl).attr('id', id);
						//Add class according to layout
						cal.addClass('colpick_' + options.layout + (options.submit ? '' : ' colpick_' + options.layout + '_ns'));
						//Add class if the color scheme is not default
						if (options.colorScheme != 'light') {
							cal.addClass('colpick_' + options.colorScheme);
						}
						//Setup submit button
						cal.find('div.colpick_submit').html(options.submitText).click(clickSubmit);
						//Setup input fields
						options.fields = cal.find('input').change(change).blur(blur).focus(focus);
						cal.find('div.colpick_field_arrs').mousedown(downIncrement).end().find('div.colpick_current_color').click(restoreOriginal);
						//Setup hue selector
						options.selector = cal.find('div.colpick_color').on('mousedown touchstart', downSelector);
						options.selectorIndic = options.selector.find('div.colpick_selector_outer');
						//Store parts of the plugin
						options.el = this;
						options.hue = cal.find('div.colpick_hue_arrs');
						var huebar = options.hue.parent();
						//Paint the hue bar
						var UA = navigator.userAgent.toLowerCase();
						var isIE = navigator.appName === 'Microsoft Internet Explorer';
						var IEver = isIE ? parseFloat(UA.match(/msie ([0-9]{1,}[\.0-9]{0,})/)[1]) : 0;
						var ngIE = isIE && IEver < 10;
						var stops = ['#ff0000', '#ff0080', '#ff00ff', '#8000ff', '#0000ff', '#0080ff', '#00ffff', '#00ff80', '#00ff00', '#80ff00', '#ffff00', '#ff8000', '#ff0000'];
						if (ngIE) {
							var i, div;
							for (i = 0; i <= 11; i++) {
								div = $('<div></div>').attr('style', 'height:8.333333%; filter:progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr=' + stops[i] + ', endColorstr=' + stops[i + 1] + '); -ms-filter: "progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr=' + stops[i] + ', endColorstr=' + stops[i + 1] + ')";');
								huebar.append(div);
							}
						} else {
							var stopList = stops.join(',');
							huebar.attr('style', 'background:-webkit-linear-gradient(top,' + stopList + '); background: -o-linear-gradient(top,' + stopList + '); background: -ms-linear-gradient(top,' + stopList + '); background:-moz-linear-gradient(top,' + stopList + '); -webkit-linear-gradient(top,' + stopList + '); background:linear-gradient(to bottom,' + stopList + '); ');
						}
						cal.find('div.colpick_hue').on('mousedown touchstart', downHue);
						options.newColor = cal.find('div.colpick_new_color');
						options.currentColor = cal.find('div.colpick_current_color');
						//Store options and fill with default color
						cal.data('colpick', options);
						fillRGBFields(options.color, cal.get(0));
						fillHSBFields(options.color, cal.get(0));
						fillHexFields(options.color, cal.get(0));
						setHue(options.color, cal.get(0));
						setSelector(options.color, cal.get(0));
						setCurrentColor(options.color, cal.get(0));
						setNewColor(options.color, cal.get(0));
						//Append to body if flat=false, else show in place
						if (options.flat) {
							cal.appendTo(this).show();
							cal.css({
								position: 'relative',
								display: 'block'
							});
						} else {
							cal.appendTo(document.body);
							$(this).on(options.showEvent, show);
							cal.css({
								position: 'absolute'
							});
						}
					}
				});
			},
			//Shows the picker
			showPicker: function showPicker() {
				return this.each(function () {
					if ($(this).data('colpickId')) {
						show.apply(this);
					}
				});
			},
			//Hides the picker
			hidePicker: function hidePicker() {
				return this.each(function () {
					if ($(this).data('colpickId')) {
						$('#' + $(this).data('colpickId')).hide();
					}
				});
			},
			//Sets a color as new and current (default)
			setColor: function setColor(col, setCurrent) {
				setCurrent = typeof setCurrent === "undefined" ? 1 : setCurrent;
				if (typeof col == 'string') {
					col = hexToHsb(col);
				} else if (col.r != undefined && col.g != undefined && col.b != undefined) {
					col = rgbToHsb(col);
				} else if (col.h != undefined && col.s != undefined && col.b != undefined) {
					col = fixHSB(col);
				} else {
					return this;
				}
				return this.each(function () {
					if ($(this).data('colpickId')) {
						var cal = $('#' + $(this).data('colpickId'));
						cal.data('colpick').color = col;
						cal.data('colpick').origColor = col;
						fillRGBFields(col, cal.get(0));
						fillHSBFields(col, cal.get(0));
						fillHexFields(col, cal.get(0));
						setHue(col, cal.get(0));
						setSelector(col, cal.get(0));

						setNewColor(col, cal.get(0));
						cal.data('colpick').onChange.apply(cal.parent(), [col, hsbToHex(col), hsbToRgb(col), cal.data('colpick').el, 1]);
						if (setCurrent) {
							setCurrentColor(col, cal.get(0));
						}
					}
				});
			}
		};
	})();
	//Color space convertions
	var hexToRgb = function hexToRgb(hex) {
		var hex = parseInt(hex.indexOf('#') > -1 ? hex.substring(1) : hex, 16);
		return { r: hex >> 16, g: (hex & 0x00FF00) >> 8, b: hex & 0x0000FF };
	};
	var hexToHsb = function hexToHsb(hex) {
		return rgbToHsb(hexToRgb(hex));
	};
	var rgbToHsb = function rgbToHsb(rgb) {
		var hsb = { h: 0, s: 0, b: 0 };
		var min = Math.min(rgb.r, rgb.g, rgb.b);
		var max = Math.max(rgb.r, rgb.g, rgb.b);
		var delta = max - min;
		hsb.b = max;
		hsb.s = max != 0 ? 255 * delta / max : 0;
		if (hsb.s != 0) {
			if (rgb.r == max) hsb.h = (rgb.g - rgb.b) / delta;else if (rgb.g == max) hsb.h = 2 + (rgb.b - rgb.r) / delta;else hsb.h = 4 + (rgb.r - rgb.g) / delta;
		} else hsb.h = -1;
		hsb.h *= 60;
		if (hsb.h < 0) hsb.h += 360;
		hsb.s *= 100 / 255;
		hsb.b *= 100 / 255;
		return hsb;
	};
	var hsbToRgb = function hsbToRgb(hsb) {
		var rgb = {};
		var h = hsb.h;
		var s = hsb.s * 255 / 100;
		var v = hsb.b * 255 / 100;
		if (s == 0) {
			rgb.r = rgb.g = rgb.b = v;
		} else {
			var t1 = v;
			var t2 = (255 - s) * v / 255;
			var t3 = (t1 - t2) * (h % 60) / 60;
			if (h == 360) h = 0;
			if (h < 60) {
				rgb.r = t1;rgb.b = t2;rgb.g = t2 + t3;
			} else if (h < 120) {
				rgb.g = t1;rgb.b = t2;rgb.r = t1 - t3;
			} else if (h < 180) {
				rgb.g = t1;rgb.r = t2;rgb.b = t2 + t3;
			} else if (h < 240) {
				rgb.b = t1;rgb.r = t2;rgb.g = t1 - t3;
			} else if (h < 300) {
				rgb.b = t1;rgb.g = t2;rgb.r = t2 + t3;
			} else if (h < 360) {
				rgb.r = t1;rgb.g = t2;rgb.b = t1 - t3;
			} else {
				rgb.r = 0;rgb.g = 0;rgb.b = 0;
			}
		}
		return { r: Math.round(rgb.r), g: Math.round(rgb.g), b: Math.round(rgb.b) };
	};
	var rgbToHex = function rgbToHex(rgb) {
		var hex = [rgb.r.toString(16), rgb.g.toString(16), rgb.b.toString(16)];
		$.each(hex, function (nr, val) {
			if (val.length == 1) {
				hex[nr] = '0' + val;
			}
		});
		return hex.join('');
	};
	var hsbToHex = function hsbToHex(hsb) {
		return rgbToHex(hsbToRgb(hsb));
	};
	$.fn.extend({
		colpick: colpick.init,
		colpickHide: colpick.hidePicker,
		colpickShow: colpick.showPicker,
		colpickSetColor: colpick.setColor
	});
	$.extend({
		colpick: {
			rgbToHex: rgbToHex,
			rgbToHsb: rgbToHsb,
			hsbToHex: hsbToHex,
			hsbToRgb: hsbToRgb,
			hexToHsb: hexToHsb,
			hexToRgb: hexToRgb
		}
	});
})(jQuery);

},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/BooleanPropertyRow.jsx":[function(require,module,exports){
'use strict';

var rowStyle = require('./rowStyle');

var BooleanPropertyRow = React.createClass({
  displayName: 'BooleanPropertyRow',

  propTypes: {
    initialValue: React.PropTypes.bool.isRequired,
    handleChange: React.PropTypes.func
  },

  getInitialState: function getInitialState() {
    return {
      isChecked: this.props.initialValue
    };
  },

  handleClick: function handleClick() {
    var checked = !this.state.isChecked;
    this.props.handleChange(checked);
    this.setState({ isChecked: checked });
  },

  render: function render() {
    var classes = 'custom-checkbox fa';
    if (this.state.isChecked) {
      classes += ' fa-check-square-o';
    } else {
      classes += ' fa-square-o';
    }

    var style = {
      width: 20,
      height: 20,
      fontSize: 20
    };

    return React.createElement(
      'div',
      { style: rowStyle.container },
      React.createElement(
        'div',
        { style: rowStyle.description },
        this.props.desc
      ),
      React.createElement(
        'div',
        null,
        React.createElement('div', {
          className: classes,
          style: style,
          onClick: this.handleClick })
      )
    );
  }
});

module.exports = BooleanPropertyRow;

},{"./rowStyle":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/rowStyle.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/designElements/rowStyle.js":[function(require,module,exports){
'use strict';

module.exports.input = {
  display: 'inline-block',
  height: 20,
  padding: '4px 6px',
  marginBottom: 0,
  marginLeft: 0,
  fontSize: 14,
  lineHeight: '20px',
  color: '#5b6770',
  WebkitBorderRadius: 4,
  MozBorderRadius: 4,
  borderRadius: 4,
  border: '1px solid #949CA2',
  verticalAlign: 'middle'
};

module.exports.container = {
  paddingLeft: 20,
  marginBottom: 8
};

module.exports.maxWidth = {
  maxWidth: 245
};

module.exports.description = {
  paddingLeft: 2
};

},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/DebugArea.js":[function(require,module,exports){
/* jshint
 funcscope: true,
 newcap: true,
 nonew: true,
 shadow: false,
 unused: true,

 maxlen: 90,
 maxparams: 3,
 maxstatements: 200
 */

'use strict';

var applabMsg = require('./locale');
var dom = require('../dom');
var utils = require('../utils');

/**
 * Creates the debug area controller and configures it to operate on the given
 * elements.
 *
 * @param {HTMLDivElement} debugAreaRoot
 * @param {HTMLDivElement} codeTextboxRoot
 * @constructor
 */
var DebugArea = module.exports = function (debugAreaRoot, codeTextboxRoot) {
  if (!debugAreaRoot || !codeTextboxRoot) {
    throw new Error("debugAreaRoot and codeTextboxRoot are required");
  }

  /**
   * @type {jQuery}
   * @private
   */
  this.rootDiv_ = $(debugAreaRoot);

  /**
   * @type {jQuery}
   * @private
   */
  this.codeTextbox_ = $(codeTextboxRoot);

  /**
   * @type {boolean}
   * @private
   */
  this.isOpen_ = true;

  /**
   * @type {number}
   * @private
   */
  this.lastOpenHeight_ = this.rootDiv_.height();

  DebugArea.prototype.bindHandlersForDebugCommandsHeader.call(this);
};

/**
 * Binds mouseover, mouseout, click and touch handlers for the debug commands
 * header div.
 */
DebugArea.prototype.bindHandlersForDebugCommandsHeader = function () {
  var toggleDebugIcon = this.rootDiv_.find('#show-hide-debug-icon');
  dom.addClickTouchEvent(toggleDebugIcon[0], DebugArea.prototype.slideToggle.bind(this));
};

/** @returns {boolean} */
DebugArea.prototype.isOpen = function () {
  return this.isOpen_;
};

/** @returns {boolean} */
DebugArea.prototype.isShut = function () {
  return !this.isOpen_;
};

/**
 * Open/close the debug area to the reverse of its current state, using no
 * animation.
 */
DebugArea.snapToggle = function () {
  if (this.isOpen_) {
    this.snapShut();
  } else {
    this.snapOpen();
  }
};

DebugArea.prototype.snapOpen = function () {
  this.isOpen_ = true;
  this.setContentsVisible(true);
  this.setIconPointingDown(true);
  this.setHeight(this.lastOpenHeight_);

  // Set the 'clear' button visible
  this.rootDiv_.find('#clear-console-header').css('opacity', 1).css('visibility', 'visible');
};

DebugArea.prototype.snapShut = function () {
  this.isOpen_ = false;
  this.lastOpenHeight_ = this.rootDiv_.height();
  this.setContentsVisible(false);
  this.setIconPointingDown(false);
  this.setHeight(this.getHeightWhenClosed());

  // Set the 'clear' button hidden (not display:none, it should take up space)
  this.rootDiv_.find('#clear-console-header').css('opacity', 0).css('visibility', 'hidden');
};

/**
 * Open/close the debug area to the reverse of its current state, using a
 * slide animation.
 */
DebugArea.prototype.slideToggle = function () {
  if (this.isOpen_) {
    this.slideShut();
  } else {
    this.slideOpen();
  }
};

DebugArea.prototype.slideOpen = function () {
  this.isOpen_ = true;
  this.setContentsVisible(true);

  // Manually remove hover effect at start and end of animation to get *close*
  // to the correct effect.
  this.rootDiv_.animate({
    height: this.lastOpenHeight_
  }, {
    complete: (function () {
      this.setIconPointingDown(true);
    }).bind(this)
  });

  // Animate the bottom of the workspace at the same time
  this.codeTextbox_.animate({
    bottom: this.lastOpenHeight_
  }, {
    step: utils.fireResizeEvent
  });

  // Animate the 'clear' button appearing at the same time
  var clearButton = this.rootDiv_.find('#clear-console-header');
  clearButton.css('visibility', 'visible');
  clearButton.animate({
    opacity: 1.0
  });
};

DebugArea.prototype.slideShut = function () {
  this.isOpen_ = false;
  this.lastOpenHeight_ = this.rootDiv_.height();

  // We will leave the header and resize bar visible, so together they
  // constitute our height when closed.
  var closedHeight = this.getHeightWhenClosed();
  // Manually remove hover effect at start and end of animation to get *close*
  // to the correct effect.
  this.rootDiv_.animate({
    height: closedHeight
  }, {
    complete: (function () {
      this.setContentsVisible(false);
      this.setIconPointingDown(false);
    }).bind(this)
  });

  // Animate the bottom of the workspace at the same time
  this.codeTextbox_.animate({
    bottom: closedHeight
  }, {
    step: utils.fireResizeEvent,
    complete: utils.fireResizeEvent
  });

  // Animate the 'clear' button vanishing at the same time
  var clearButton = this.rootDiv_.find('#clear-console-header');
  clearButton.animate({
    opacity: 0.0
  }, {
    complete: function complete() {
      clearButton.css('visibility', 'hidden');
    }
  });
};

DebugArea.prototype.setContentsVisible = function (isVisible) {
  this.rootDiv_.find('#debug-commands').toggle(isVisible);
  this.rootDiv_.find('#debug-console').toggle(isVisible);
};

DebugArea.prototype.setIconPointingDown = function (isPointingDown) {
  var commandsHeader = this.rootDiv_.find('#debug-commands-header');

  var icon = this.rootDiv_.find('#show-hide-debug-icon');
  icon.toggleClass('fa-chevron-circle-up', !isPointingDown);
  icon.toggleClass('fa-chevron-circle-down', isPointingDown);

  var headerText = commandsHeader.find('.header-text');
  headerText.text(isPointingDown ? applabMsg.debugCommandsHeaderWhenOpen() : applabMsg.debugCommandsHeaderWhenClosed());
};

DebugArea.prototype.setHeight = function (newHeightInPixels) {
  this.rootDiv_.height(newHeightInPixels);
  this.codeTextbox_.css('bottom', newHeightInPixels);
  utils.fireResizeEvent();
};

DebugArea.prototype.getHeightWhenClosed = function () {
  return this.rootDiv_.find('#debug-area-header').height() + this.rootDiv_.find('#debugResizeBar').height();
};

},{"../dom":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/dom.js","../utils":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/utils.js","./locale":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/locale.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/locale.js":[function(require,module,exports){
// locale for applab

"use strict";

module.exports = window.blockly.applab_locale;

},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/ChartApi.js":[function(require,module,exports){
/**
 * @file Core implementation of Applab commands related to the Chart design element.
 *
 * For now, uses Google charts.
 * @see {GoogleChart}
 */
/* jshint
 funcscope: true,
 newcap: true,
 nonew: true,
 shadow: false,
 unused: true,
 eqeqeq: true,

 maxlen: 90,
 maxparams: 6,
 maxstatements: 200
 */
'use strict';

var AppStorage = require('./appStorage');
var GoogleChart = require('./GoogleChart');
require("babelify/polyfill"); // required for Promises in IE / Phantom

/**
 * API for requesting/generating charts in Applab.
 *
 * @constructor
 * @param {Document} [docContext] - default is 'document'
 * @param [appStorage] - default is AppStorage
 */
var ChartApi = module.exports = function (docContext, appStorage) {
  this.document_ = docContext || document;
  this.appStorage_ = appStorage || AppStorage;

  /**
   * List of all warnings generated while performing operations through this
   * API instance.
   * @type {Error[]}
   */
  this.warnings = [];
};

/**
 * Record a runtime warning.
 * @param {string} warningMessage
 */
ChartApi.prototype.warn = function (warningMessage) {
  this.warnings.push(new Error(warningMessage));
};

/**
 * Add warnings from an array to the ChartApi instance's warnings array.
 * @param {Error[]} newWarnings
 * @private
 */
ChartApi.prototype.mergeWarnings_ = function (newWarnings) {
  Array.prototype.push.apply(this.warnings, newWarnings);
};

// When adding a new type, provide an entry in the string enum (for clean code)
// and an entry in the TypeNameToType map (allows us to easily remap different
// implementations to the same type name).

/** @enum {string} */
ChartApi.ChartType = {
  BAR: 'bar',
  PIE: 'pie',
  LINE: 'line',
  SCATTER: 'scatter'
};

/** @type {Object.<string, GoogleChart>} */
ChartApi.TypeNameToType = {
  'bar': GoogleChart.MaterialBarChart,
  'pie': GoogleChart.PieChart,
  'line': GoogleChart.MaterialLineChart,
  'scatter': GoogleChart.MaterialScatterChart
};

/**
 * Get an array of all the chart type strings.
 * @returns {string[]}
 */
ChartApi.getChartTypeNames = function () {
  return Object.getOwnPropertyNames(ChartApi.TypeNameToType);
};

/**
 * @param {ChartType} chartType
 * @returns {boolean} TRUE if the given type is in the known list of chart types.
 */
ChartApi.supportsType = function (chartType) {
  return ChartApi.getChartTypeNames().indexOf(chartType.toLowerCase()) !== -1;
};

/**
 * @return {string[]} a quoted, sorted list of chart types for use in the
 *         Droplet parameter dropdown.
 */
ChartApi.getChartTypeDropdown = function () {
  return ChartApi.getChartTypeNames().map(quote).sort();
};

function quote(str) {
  return '"' + str + '"';
}

/**
 * Render a chart into an Applab chart element.
 * @param {string} chartId - ID of the destination chart element.
 * @param {ChartType} chartType - Desired chart type.
 * @param {Object[]} chartData - Data to populate the chart.
 * @param {Object} options - passed through to the API.
 * @returns {Promise} which resolves when the chart has been rendered, or
 *          rejects if there are any problems along the way.
 */
ChartApi.prototype.drawChart = function (chartId, chartType, chartData, options) {
  try {
    var chart = this.createChart_(chartId, chartType);
    var columns = ChartApi.inferColumnsFromRawData(chartData);
    return chart.drawChart(chartData, columns, options).then((function () {
      this.mergeWarnings_(chart.warnings);
    }).bind(this));
  } catch (e) {
    return Promise.reject(e);
  }
};

/**
 * Render a chart into an Applab chart element using data from an AppStorage
 * API table.
 * @param {string} chartId - ID of the destination chart element.
 * @param {ChartType} chartType - Desired chart type.
 * @param {string} tableName - AppStorage API table name to source data from
 *                 for the chart.
 * @param {string[]} columns - Columns to use from the table data for the chart,
 *        in order (required order dependent on chart type).
 * @param {Object} options - passed through to the API.
 * @returns {Promise} resolves when the chart has been rendered, or rejects if
 *          there are any problems along the way.
 */
ChartApi.prototype.drawChartFromRecords = function (chartId, chartType, tableName, columns, options) {
  try {
    var chart = this.createChart_(chartId, chartType);
    return Promise.all([chart.loadDependencies(), this.fetchTableData_(tableName)]).then((function (results) {
      var tableData = results[1];
      var columnsInTable = ChartApi.inferColumnsFromRawData(tableData);
      columns = this.guessColumnsIfNecessary(columns, columnsInTable, tableName);
      this.warnIfColumnsNotFound(columns, columnsInTable, tableName);
      return chart.drawChart(tableData, columns, options);
    }).bind(this)).then((function () {
      this.mergeWarnings_(chart.warnings);
    }).bind(this));
  } catch (e) {
    return Promise.reject(e);
  }
};

/**
 * Generates a warning for every requested column that is not found in the
 * columnsInTable collection.
 * @param {string[]} requestedColumns
 * @param {string[]} columnsInTable
 * @param {string} tableName
 */
ChartApi.prototype.warnIfColumnsNotFound = function (requestedColumns, columnsInTable, tableName) {
  // Check that specified columns exist in raw data
  requestedColumns.forEach(function (columnName) {
    if (columnsInTable.indexOf(columnName) === -1) {
      this.warn('Column ' + quote(columnName) + ' not found in table ' + quote(tableName) + '.');
    }
  }, this);
};

/**
 * If enough columns are requested, this function just returns the requested
 * columns.  Otherwise it guesses two columns from the columnsInTable if it
 * can, generating appropriate warnings.  If there are not enough columns in
 * the table either, throws an error since we cannot proceed.
 * @param {string[]} requestedColumns
 * @param {string[]} columnsInTable
 * @param {string} tableName
 * @returns {string[]}
 * @throws {Error} if not enough columns and unable to guess columns.
 */
ChartApi.prototype.guessColumnsIfNecessary = function (requestedColumns, columnsInTable, tableName) {
  if (!requestedColumns || requestedColumns.length < 2) {
    this.warn('Not enough columns specified; expected at least 2.');

    if (columnsInTable.length === 0) {
      throw new Error('No columns found in table ' + quote(tableName) + '. Charts require at least 2 columns.');
    } else if (columnsInTable.length < 2) {
      throw new Error('Only found ' + columnsInTable.length + ' columns in table ' + quote(tableName) + ': ' + columnsInTable.map(quote).join(', ') + '. Charts require at least 2 columns.');
    } else {
      // Take our best guess and continue
      requestedColumns = columnsInTable.slice(0, 2);
      this.warn('Using columns ' + requestedColumns.map(quote).join(' and ') + '.  Possible columns for table ' + quote(tableName) + ' are ' + columnsInTable.map(quote).join(', ') + '.');
    }
  }
  return requestedColumns;
};

/**
 * Create a chart object of the requested type, for the requested target element.
 * @param {string} elementId
 * @param {string} typeName
 * @returns {GoogleChart}
 * @throws {Error} if target element or chart type are not found.
 * @private
 */
ChartApi.prototype.createChart_ = function (elementId, typeName) {
  var targetElement = this.getTargetElement_(elementId);
  var FoundType = ChartApi.getChartTypeByName_(typeName);
  return new FoundType(targetElement);
};

/**
 * Get the DOM Element with the given ID.
 * @param {string} elementId
 * @returns {Element}
 * @throws {Error} if the requested element is not found, or is not a div.
 * @private
 */
ChartApi.prototype.getTargetElement_ = function (elementId) {
  var targetElement = this.document_.getElementById(elementId);
  if (!targetElement || 'div' !== targetElement.tagName.toLowerCase()) {
    throw new Error('Unable to render chart into element "' + elementId + '".');
  }
  return targetElement;
};

/**
 * Get the constructor function for the requested chart type.
 * @param {string} typeName
 * @returns {GoogleChart}
 * @throws {Error} if requested type is not found/supported.
 * @private
 */
ChartApi.getChartTypeByName_ = function (typeName) {
  if (typeof typeName !== 'string') {
    throw new Error('Unknown chart type.');
  }

  var type = ChartApi.TypeNameToType[typeName.toLowerCase()];
  if (!type) {
    throw new Error('Unsupported chart type "' + typeName + '".');
  }

  return type;
};

/**
 * Get all data from the requested table.
 * Wraps AppStorage.readRecords in an ES6 Promise interface.
 * @param {string} tableName
 * @returns {Promise}
 * @private
 */
ChartApi.prototype.fetchTableData_ = function (tableName) {
  return new Promise((function (resolve, reject) {
    this.appStorage_.readRecords(tableName, {}, resolve, function (errorMsg) {
      reject(new Error(errorMsg));
    });
  }).bind(this));
};

/**
 * @param {Object[]} rawData
 * @returns {string[]} column names found as keys in the row objects in the
 *          rawData, (hopefully) in the order they were defined in the row
 *          objects.
 */
ChartApi.inferColumnsFromRawData = function (rawData) {
  return Object.getOwnPropertyNames(rawData.reduce(function (memo, row) {
    Object.getOwnPropertyNames(row).forEach(function (key) {
      memo[key] = true;
    });
    return memo;
  }, {}));
};

},{"./GoogleChart":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/GoogleChart.js","./appStorage":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/appStorage.js","babelify/polyfill":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/polyfill.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/appStorage.js":[function(require,module,exports){
'use strict';

/* global Applab */

/**
 * Namespace for app storage.
 */
var AppStorage = module.exports;

/**
 * Reads the value associated with the key, accessible to all users of the app.
 * @param {string} key The name of the key.
 * @param {function(Object)} onSuccess Function to call on success with the
       value retrieved from storage.
 * @param {function(string)} onError Function to call on error with error msg.
 */
AppStorage.getKeyValue = function (key, onSuccess, onError) {
  var req = new XMLHttpRequest();
  req.onreadystatechange = handleGetKeyValue.bind(req, onSuccess, onError);
  var url = '/v3/shared-properties/' + Applab.channelId + '/' + key;
  req.open('GET', url, true);
  req.send();
};

var handleGetKeyValue = function handleGetKeyValue(onSuccess, onError) {
  var done = XMLHttpRequest.DONE || 4;
  if (this.readyState !== done) {
    return;
  }
  if (this.status === 404) {
    onSuccess(undefined);
    return;
  }
  if (this.status < 200 || this.status >= 300) {
    onError('error reading value: unexpected http status ' + this.status);
    return;
  }
  var value = JSON.parse(this.responseText);
  onSuccess(value);
};

/**
 * Saves the value associated with the key, accessible to all users of the app.
 * @param {string} key The name of the key.
 * @param {Object} value The value to associate with the key.
 * @param {function()} onSuccess Function to call on success.
 * @param {function(string)} onError Function to call on error with error msg.
 */
AppStorage.setKeyValue = function (key, value, onSuccess, onError) {
  var req = new XMLHttpRequest();
  req.onreadystatechange = handleSetKeyValue.bind(req, onSuccess, onError);
  var url = '/v3/shared-properties/' + Applab.channelId + '/' + key;
  req.open('POST', url, true);
  req.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
  req.send(JSON.stringify(value));
};

var handleSetKeyValue = function handleSetKeyValue(onSuccess, onError) {
  var done = XMLHttpRequest.DONE || 4;
  if (this.readyState !== done) {
    return;
  }
  if (this.status < 200 || this.status >= 300) {
    onError('error writing value: unexpected http status ' + this.status);
    return;
  }
  onSuccess();
};

/**
 * Creates a new record in the specified table, accessible to all users.
 * @param {string} tableName The name of the table to read from.
 * @param {Object} record Object containing other properties to store
 *     on the record.
 * @param {function(Object)} onSuccess Function to call with the new record.
 * @param {function(string)} onError Function to call with an error message
 *    in case of failure.
 */
AppStorage.createRecord = function (tableName, record, onSuccess, onError) {
  if (!tableName) {
    onError('error creating record: missing required parameter "tableName"');
    return;
  }
  if (record.id) {
    onError('error creating record: record must not have an "id" property');
    return;
  }
  var req = new XMLHttpRequest();
  req.onreadystatechange = handleCreateRecord.bind(req, onSuccess, onError);
  var url = '/v3/shared-tables/' + Applab.channelId + '/' + tableName;
  req.open('POST', url, true);
  req.setRequestHeader("Content-Type", "application/json; charset=UTF-8");
  req.send(JSON.stringify(record));
};

var handleCreateRecord = function handleCreateRecord(onSuccess, onError) {
  var done = XMLHttpRequest.DONE || 4;
  if (this.readyState !== done) {
    return;
  }
  if (this.status < 200 || this.status >= 300) {
    onError('error creating record: unexpected http status ' + this.status);
    return;
  }
  var record = JSON.parse(this.responseText);
  onSuccess(record);
};

/**
 * Reads records which match the searchParams specified by the user,
 * and passes them to onSuccess.
 * @param {string} tableName The name of the table to read from.
 * @param {string} searchParams.id Optional id of record to read.
 * @param {Object} searchParams Other search criteria. Only records
 *     whose contents match all criteria will be returned.
 * @param {function(Array)} onSuccess Function to call with an array of record
       objects.
 * @param {function(string)} onError Function to call with an error message
 *     in case of failure.
 */
AppStorage.readRecords = function (tableName, searchParams, onSuccess, onError) {
  if (!tableName) {
    onError('error reading records: missing required parameter "tableName"');
    return;
  }
  var req = new XMLHttpRequest();
  req.onreadystatechange = handleReadRecords.bind(req, searchParams, onSuccess, onError);
  var url = '/v3/shared-tables/' + Applab.channelId + '/' + tableName;
  req.open('GET', url, true);
  req.send();
};

var handleReadRecords = function handleReadRecords(searchParams, onSuccess, onError) {
  var done = XMLHttpRequest.DONE || 4;
  if (this.readyState !== done) {
    return;
  }
  if (this.status < 200 || this.status >= 300) {
    onError('error reading records: unexpected http status ' + this.status);
    return;
  }
  var records = JSON.parse(this.responseText);
  records = records.filter(function (record) {
    for (var prop in searchParams) {
      if (record[prop] !== searchParams[prop]) {
        return false;
      }
    }
    return true;
  });
  onSuccess(records);
};

/**
 * Updates a record in a table, accessible to all users.
 * @param {string} tableName The name of the table to update.
 * @param {string} record.id The id of the row to update.
 * @param {Object} record Object containing other properites to update
 *     on the record.
 * @param {function()} onSuccess Function to call on success.
 * @param {function(string)} onError Function to call with an error message
 *    in case of failure.
 */
AppStorage.updateRecord = function (tableName, record, onSuccess, onError) {
  if (!tableName) {
    onError('error updating record: missing required parameter "tableName"');
    return;
  }
  var recordId = record.id;
  if (!recordId) {
    onError('error updating record: missing required property "id"');
    return;
  }
  var req = new XMLHttpRequest();
  req.onreadystatechange = handleUpdateRecord.bind(req, tableName, record, onSuccess, onError);
  var url = '/v3/shared-tables/' + Applab.channelId + '/' + tableName + '/' + recordId;
  req.open('POST', url, true);
  req.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
  req.send(JSON.stringify(record));
};

var handleUpdateRecord = function handleUpdateRecord(tableName, record, onSuccess, onError) {
  var done = XMLHttpRequest.DONE || 4;
  if (this.readyState !== done) {
    return;
  }
  if (this.status === 404) {
    onError('error updating record: could not find record id ' + record.id + ' in table ' + tableName);
    return;
  }
  if (this.status < 200 || this.status >= 300) {
    onError('error updating record: unexpected http status ' + this.status);
    return;
  }
  onSuccess(record);
};

/**
 * Deletes a record from the specified table.
 * @param {string} tableName The name of the table to delete from.
 * @param {string} record.id The id of the record to delete.
 * @param {Object} record Object whose other properties are ignored.
 * @param {function()} onSuccess Function to call on success.
 * @param {function(string)} onError Function to call with an error message
 *    in case of failure.
 */
AppStorage.deleteRecord = function (tableName, record, onSuccess, onError) {
  if (!tableName) {
    onError('error deleting record: missing required parameter "tableName"');
    return;
  }
  var recordId = record.id;
  if (!recordId) {
    onError('error deleting record: missing required property "id"');
    return;
  }
  var req = new XMLHttpRequest();
  req.onreadystatechange = handleDeleteRecord.bind(req, tableName, record, onSuccess, onError);
  var url = '/v3/shared-tables/' + Applab.channelId + '/' + tableName + '/' + recordId + '/delete';
  req.open('POST', url, true);
  req.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
  req.send(JSON.stringify(record));
};

var handleDeleteRecord = function handleDeleteRecord(tableName, record, onSuccess, onError) {
  var done = XMLHttpRequest.DONE || 4;
  if (this.readyState !== done) {
    return;
  }
  if (this.status === 404) {
    onError('error deleting record: could not find record id ' + record.id + ' in table ' + tableName);
    return;
  }
  if (this.status < 200 || this.status >= 300) {
    onError('error deleting record: unexpected http status ' + this.status);
    return;
  }
  onSuccess();
};

/**
 * Populates a channel with table data for one or more tables
 * @param {string} jsonData The json data that represents the tables in the format of:
 *   {
 *     "table_name": [{ "name": "Trevor", "age": 30 }, { "name": "Hadi", "age": 72}],
 *     "table_name2": [{ "city": "Seattle", "state": "WA" }, { "city": "Chicago", "state": "IL"}]
 *   }
 * @param {bool} overwrite Whether to overwrite a table if it already exists.
 * @param {function()} onSuccess Function to call on success.
 * @param {function(string)} onError Function to call with an error message
 *    in case of failure.
 */
AppStorage.populateTable = function (jsonData, overwrite, onSuccess, onError) {
  if (!jsonData || !jsonData.length) {
    return;
  }
  var req = new XMLHttpRequest();
  req.onreadystatechange = handlePopulateTable.bind(req, onSuccess, onError);
  var url = '/v3/shared-tables/' + Applab.channelId;
  if (overwrite) {
    url += "?overwrite=1";
  }
  req.open('POST', url, true);
  req.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
  req.send(jsonData);
};

var handlePopulateTable = function handlePopulateTable(onSuccess, onError) {
  var done = XMLHttpRequest.DONE || 4;
  if (this.readyState !== done) {
    return;
  }

  if (this.status != 200) {
    if (onError) {
      onError('error populating tables: unexpected http status ' + this.status);
    }
    return;
  }
  if (onSuccess) {
    onSuccess();
  }
};

/**
 * Populates the key/value store with initial data
 * @param {string} jsonData The json data that represents the tables in the format of:
 *   {
 *     "click_count": 5,
 *     "button_color": "blue"
 *   }
 * @param {bool} overwrite Whether to overwrite a table if it already exists.
 * @param {function()} onSuccess Function to call on success.
 * @param {function(string)} onError Function to call with an error message
 *    in case of failure.
 */
AppStorage.populateKeyValue = function (jsonData, overwrite, onSuccess, onError) {
  if (!jsonData || !jsonData.length) {
    return;
  }
  var req = new XMLHttpRequest();

  req.onreadystatechange = handlePopulateKeyValue.bind(req, onSuccess, onError);
  var url = '/v3/shared-properties/' + Applab.channelId;

  if (overwrite) {
    url += "?overwrite=1";
  }
  req.open('POST', url, true);
  req.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
  req.send(jsonData);
};

var handlePopulateKeyValue = function handlePopulateKeyValue(onSuccess, onError) {
  var done = XMLHttpRequest.DONE || 4;
  if (this.readyState !== done) {
    return;
  }

  if (this.status != 200) {
    if (onError) {
      onError('error populating kv: unexpected http status ' + this.status);
    }
    return;
  }
  if (onSuccess) {
    onSuccess();
  }
};

},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/GoogleChart.js":[function(require,module,exports){
/**
 * @file Wrapper around Google Charts API chart-drawing features
 *
 * @see https://developers.google.com/chart/
 */
/* jshint
 funcscope: true,
 newcap: true,
 nonew: true,
 shadow: false,
 unused: true,
 eqeqeq: true,

 maxlen: 90,
 maxparams: 6,
 maxstatements: 200
 */
'use strict';
/* global google */

require("babelify/polyfill"); // required for Promises in IE / Phantom
require('../utils');

/**
 * Abstract base type for Google Charts API charts.
 *
 * @example
 *   var chart = new PieChart(targetDiv);
 *   chart.drawChart(data, columns[, options]);
 *
 * May optionally call loadDependencies() step to facilitiate parallel async
 * loading with other resources.
 *
 * @param {Element} targetDiv
 * @constructor
 */
var GoogleChart = module.exports = function (targetDiv) {
  // Define this late so we can overwrite it in tests.
  if (!GoogleChart.lib) {
    GoogleChart.lib = google;
  }

  /** @private {Element} */
  this.targetDiv_ = targetDiv;

  /** @private {google.visualization.DataTable} */
  this.dataTable_ = null;

  /**
   * List of all warnings logged while performing operations with this chart
   * instance.
   * @type {Error[]}
   */
  this.warnings = [];
};

/**
 * Loads the required libraries for this particular chart type.
 * Safe to call multiple times - Google's loader caches dependencies.
 * @returns {Promise} that resolves when dependencies have been loaded.
 */
GoogleChart.prototype.loadDependencies = function () {
  return new Promise((function (resolve, reject) {
    try {
      GoogleChart.lib.load('visualization', '1', {
        packages: this.getDependencies(),
        callback: resolve
      });
    } catch (e) {
      // We catch and return a different error so that we don't surface Google
      // API errors to students.
      reject(new Error('Unable to load Charts API.  Please try again later.'));
    }
  }).bind(this));
};

/**
 * Renders the chart into the target container using the specified options.
 *
 *  @param {Object[]} rawData - data to display in chart, formatted as an array
 *        of objects where each object represents a row, and the object keys
 *        are column names.
 * @param {string[]} columnList - Ordered list of column names to use as source
 *        data for the chart.  Column names must match keys in rawData.
 * @param {Object} options - Plain options object that gets passed through to
 *        the Charts API.
 * @returns {Promise} that resolves when the chart has been rendered to the
 *          target container.
 */
GoogleChart.prototype.drawChart = function (rawData, columnList, options) {
  return this.loadDependencies().then((function () {
    this.verifyData_(rawData, columnList);
    var dataTable = GoogleChart.dataTableFromRowsAndColumns(rawData, columnList);
    return this.render_(dataTable, options);
  }).bind(this));
};

/**
 * Array of packages the chart needs to load to render.
 * @returns {string[]}
 */
GoogleChart.prototype.getDependencies = function () {
  return ['corechart'];
};

/**
 * Pushes the provided warning message into a collection of warnings for this
 * chart, which can be parsed and displayed later.
 * @param {string} warningMessage
 */
GoogleChart.prototype.warn = function (warningMessage) {
  this.warnings.push(new Error(warningMessage));
};

/**
 * Makes sure data looks okay, throws errors and logs warnings as appropriate.
 * @param {string[]} columns
 * @param {Object[]} data
 * @private
 */
GoogleChart.prototype.verifyData_ = function (data, columns) {
  // Warn when no rows are present
  if (data.length === 0) {
    this.warn('No data.');
  }

  // Error when not enough columns are provided
  if (columns.length < 2) {
    throw new Error('Not enough columns for chart; expected at least 2.');
  }

  // Warn on empty columns?
  columns.forEach((function (colName) {
    var exists = data.some(function (row) {
      return row[colName] !== undefined;
    });
    if (!exists) {
      this.warn('No data found for column "' + colName + '".');
    }
  }).bind(this));
};

/**
 * @param {Object[]} rows - Rows as POJOs with keys.
 * @param {string[]} columns - Column names which must correspond to keys
 *        in the row objects.
 * @return {google.visualization.DataTable}
 */
GoogleChart.dataTableFromRowsAndColumns = function (rows, columns) {
  var dataArray = rows.map(function (row) {
    return columns.map(function (key) {
      return row[key];
    });
  });
  return GoogleChart.lib.visualization.arrayToDataTable([columns].concat(dataArray));
};

/* jshint unused: false */
/**
 * Internal 'abstract' method that subclasses should use to implement the actual
 * rendering step.
 *
 * @param {google.visualzation.DataTable} dataTable
 * @param {Object} options
 * @returns {Promise}
 * @private
 */
GoogleChart.prototype.render_ = function (dataTable, options) {
  return Promise.reject(new Error('Rendering unimplemented for chart type.'));
};
/* jshint unused: true */

/**
 * Google Charts API Pie Chart
 *
 * @see https://developers.google.com/chart/interactive/docs/gallery/piechart
 *
 * @param {Element} targetDiv
 * @constructor
 * @extends GoogleChart
 */
var PieChart = function PieChart(targetDiv) {
  GoogleChart.call(this, targetDiv);
};
PieChart.inherits(GoogleChart);
GoogleChart.PieChart = PieChart;

PieChart.prototype.render_ = function (dataTable, options) {
  var apiChart = new GoogleChart.lib.visualization.PieChart(this.targetDiv_);
  apiChart.draw(dataTable, options);
  return Promise.resolve();
};

/**
 *
 * @param {string[]} columns
 * @param {Object[]} data
 * @private
 * @override
 */
PieChart.prototype.verifyData_ = function (data, columns) {
  PieChart.superPrototype.verifyData_.call(this, data, columns);

  if (columns.length > 2) {
    this.warn('Too many columns for pie chart; only using the first 2.');
  }
};

/**
 * Google Charts API Bar Chart
 *
 * @see https://developers.google.com/chart/interactive/docs/gallery/barchart
 *
 * @param {Element} targetDiv
 * @constructor
 * @extends GoogleChart
 */
var BarChart = function BarChart(targetDiv) {
  GoogleChart.call(this, targetDiv);
};
BarChart.inherits(GoogleChart);
GoogleChart.BarChart = BarChart;

/**
 * @param {google.visualization.DataTable} dataTable
 * @param {Object} options
 * @returns {Promise}
 * @private
 * @override
 */
BarChart.prototype.render_ = function (dataTable, options) {
  var apiChart = new GoogleChart.lib.visualization.BarChart(this.targetDiv_);
  apiChart.draw(dataTable, options);
  return Promise.resolve();
};

/**
 * Google Charts API Material Design Bar Chart
 *
 * @see https://developers.google.com/chart/interactive/docs/gallery
 *      /barchart#creating-material-bar-charts
 *
 * @param {Element} targetDiv
 * @constructor
 * @extends GoogleChart
 */
var MaterialBarChart = function MaterialBarChart(targetDiv) {
  GoogleChart.call(this, targetDiv);
};
MaterialBarChart.inherits(GoogleChart);
GoogleChart.MaterialBarChart = MaterialBarChart;

/**
 * @param {google.visualization.DataTable} dataTable
 * @param {Object} options
 * @returns {Promise}
 * @private
 * @override
 */
MaterialBarChart.prototype.render_ = function (dataTable, options) {
  var apiChart = new GoogleChart.lib.charts.Bar(this.targetDiv_);
  // Material charts have a built-in options converter for now.
  var convertedOptions = GoogleChart.lib.charts.Bar.convertOptions(options);
  apiChart.draw(dataTable, convertedOptions);
  return Promise.resolve();
};

/**
 * Array of packages the chart needs to load to render.
 * @returns {string[]}
 * @override
 */
MaterialBarChart.prototype.getDependencies = function () {
  return ['bar'];
};

/**
 * Google Charts API Line Chart
 *
 * @see https://developers.google.com/chart/interactive/docs/gallery/linechart
 *
 * @param {Element} targetDiv
 * @constructor
 * @extends GoogleChart
 */
var LineChart = function LineChart(targetDiv) {
  GoogleChart.call(this, targetDiv);
};
LineChart.inherits(GoogleChart);
GoogleChart.LineChart = LineChart;

/**
 * @param {google.visualization.DataTable} dataTable
 * @param {Object} options
 * @returns {Promise}
 * @private
 * @override
 */
LineChart.prototype.render_ = function (dataTable, options) {
  var apiChart = new GoogleChart.lib.visualization.LineChart(this.targetDiv_);
  apiChart.draw(dataTable, options);
  return Promise.resolve();
};

/**
 * Google Charts API Material Design Line Chart
 *
 * @see https://developers.google.com/chart/interactive/docs/gallery
 *      /linechart#creating-material-line-charts
 *
 * @param {Element} targetDiv
 * @constructor
 * @extends GoogleChart
 */
var MaterialLineChart = function MaterialLineChart(targetDiv) {
  GoogleChart.call(this, targetDiv);
};
MaterialLineChart.inherits(GoogleChart);
GoogleChart.MaterialLineChart = MaterialLineChart;

/**
 * @param {google.visualization.DataTable} dataTable
 * @param {Object} options
 * @returns {Promise}
 * @private
 * @override
 */
MaterialLineChart.prototype.render_ = function (dataTable, options) {
  var apiChart = new GoogleChart.lib.charts.Line(this.targetDiv_);
  // Material charts have a built-in options converter for now.
  var convertedOptions = GoogleChart.lib.charts.Line.convertOptions(options);
  apiChart.draw(dataTable, convertedOptions);
  return Promise.resolve();
};

/**
 * Array of packages the chart needs to load to render.
 * @returns {string[]}
 * @override
 */
MaterialLineChart.prototype.getDependencies = function () {
  return ['line'];
};

/**
 * Google Charts API Scatter Chart
 *
 * @see https://developers.google.com/chart/interactive/docs/gallery/scatterchart
 *
 * @param {Element} targetDiv
 * @constructor
 * @extends GoogleChart
 */
var ScatterChart = function ScatterChart(targetDiv) {
  GoogleChart.call(this, targetDiv);
};
ScatterChart.inherits(GoogleChart);
GoogleChart.ScatterChart = ScatterChart;

/**
 * @param {google.visualization.DataTable} dataTable
 * @param {Object} options
 * @returns {Promise}
 * @private
 * @override
 */
ScatterChart.prototype.render_ = function (dataTable, options) {
  var apiChart = new GoogleChart.lib.visualization.ScatterChart(this.targetDiv_);
  apiChart.draw(dataTable, options);
  return Promise.resolve();
};

/**
 * Google Charts API Material Design Scatter Chart
 *
 * @see https://developers.google.com/chart/interactive/docs/gallery
 *      /scatterchart#creating-material-scatter-charts
 *
 * @param {Element} targetDiv
 * @constructor
 * @extends GoogleChart
 */
var MaterialScatterChart = function MaterialScatterChart(targetDiv) {
  GoogleChart.call(this, targetDiv);
};
MaterialScatterChart.inherits(GoogleChart);
GoogleChart.MaterialScatterChart = MaterialScatterChart;

/**
 * @param {google.visualization.DataTable} dataTable
 * @param {Object} options
 * @returns {Promise}
 * @private
 * @override
 */
MaterialScatterChart.prototype.render_ = function (dataTable, options) {
  var apiChart = new GoogleChart.lib.charts.Scatter(this.targetDiv_);
  // Material charts have a built-in options converter for now.
  var convertedOptions = GoogleChart.lib.charts.Scatter.convertOptions(options);
  apiChart.draw(dataTable, convertedOptions);
  return Promise.resolve();
};

/**
 * Array of packages the chart needs to load to render.
 * @returns {string[]}
 * @override
 */
MaterialScatterChart.prototype.getDependencies = function () {
  return ['scatter'];
};

},{"../utils":"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/utils.js","babelify/polyfill":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/polyfill.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/polyfill.js":[function(require,module,exports){
module.exports = require("babel-core/polyfill");

},{"babel-core/polyfill":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/polyfill.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/polyfill.js":[function(require,module,exports){
module.exports = require("./lib/polyfill");

},{"./lib/polyfill":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/lib/polyfill.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/lib/polyfill.js":[function(require,module,exports){
(function (global){
"use strict";

require("core-js/shim");

require("regenerator/runtime");

if (global._babelPolyfill) {
  throw new Error("only one instance of babel/polyfill is allowed");
}
global._babelPolyfill = true;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9saWIvcG9seWZpbGwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxucmVxdWlyZShcImNvcmUtanMvc2hpbVwiKTtcblxucmVxdWlyZShcInJlZ2VuZXJhdG9yL3J1bnRpbWVcIik7XG5cbmlmIChnbG9iYWwuX2JhYmVsUG9seWZpbGwpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFwib25seSBvbmUgaW5zdGFuY2Ugb2YgYmFiZWwvcG9seWZpbGwgaXMgYWxsb3dlZFwiKTtcbn1cbmdsb2JhbC5fYmFiZWxQb2x5ZmlsbCA9IHRydWU7Il19
},{"core-js/shim":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/shim.js","regenerator/runtime":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/regenerator/runtime.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/regenerator/runtime.js":[function(require,module,exports){
(function (process,global){
/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var hasOwn = Object.prototype.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var iteratorSymbol =
    typeof Symbol === "function" && Symbol.iterator || "@@iterator";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided, then outerFn.prototype instanceof Generator.
    var generator = Object.create((outerFn || Generator).prototype);

    generator._invoke = makeInvokeMethod(
      innerFn, self || null,
      new Context(tryLocsList || [])
    );

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    genFun.__proto__ = GeneratorFunctionPrototype;
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `value instanceof AwaitArgument` to determine if the yielded value is
  // meant to be awaited. Some may consider the name of this method too
  // cutesy, but they are curmudgeons.
  runtime.awrap = function(arg) {
    return new AwaitArgument(arg);
  };

  function AwaitArgument(arg) {
    this.arg = arg;
  }

  function AsyncIterator(generator) {
    // This invoke function is written in a style that assumes some
    // calling function (or Promise) will handle exceptions.
    function invoke(method, arg) {
      var result = generator[method](arg);
      var value = result.value;
      return value instanceof AwaitArgument
        ? Promise.resolve(value.arg).then(invokeNext, invokeThrow)
        : Promise.resolve(value).then(function(unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration. If the Promise is rejected, however, the
            // result for this iteration will be rejected with the same
            // reason. Note that rejections of yielded Promises are not
            // thrown back into the generator function, as is the case
            // when an awaited Promise is rejected. This difference in
            // behavior between yield and await is important, because it
            // allows the consumer to decide what to do with the yielded
            // rejection (swallow it and continue, manually .throw it back
            // into the generator, abandon iteration, whatever). With
            // await, by contrast, there is no opportunity to examine the
            // rejection reason outside the generator function, so the
            // only option is to throw it from the await expression, and
            // let the generator function handle the exception.
            result.value = unwrapped;
            return result;
          });
    }

    if (typeof process === "object" && process.domain) {
      invoke = process.domain.bind(invoke);
    }

    var invokeNext = invoke.bind(generator, "next");
    var invokeThrow = invoke.bind(generator, "throw");
    var invokeReturn = invoke.bind(generator, "return");
    var previousPromise;

    function enqueue(method, arg) {
      var enqueueResult =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(function() {
          return invoke(method, arg);
        }) : new Promise(function(resolve) {
          resolve(invoke(method, arg));
        });

      // Avoid propagating enqueueResult failures to Promises returned by
      // later invocations of the iterator.
      previousPromise = enqueueResult["catch"](function(ignored){});

      return enqueueResult;
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          if (method === "return" ||
              (method === "throw" && delegate.iterator[method] === undefined)) {
            // A return or throw (when the delegate iterator has no throw
            // method) always terminates the yield* loop.
            context.delegate = null;

            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            var returnMethod = delegate.iterator["return"];
            if (returnMethod) {
              var record = tryCatch(returnMethod, delegate.iterator, arg);
              if (record.type === "throw") {
                // If the return method threw an exception, let that
                // exception prevail over the original return or throw.
                method = "throw";
                arg = record.arg;
                continue;
              }
            }

            if (method === "return") {
              // Continue with the outer return, now that the delegate
              // iterator has been terminated.
              continue;
            }
          }

          var record = tryCatch(
            delegate.iterator[method],
            delegate.iterator,
            arg
          );

          if (record.type === "throw") {
            context.delegate = null;

            // Like returning generator.throw(uncaught), but without the
            // overhead of an extra function call.
            method = "throw";
            arg = record.arg;
            continue;
          }

          // Delegate generator ran and handled its own exceptions so
          // regardless of what the method was, we continue as if it is
          // "next" with an undefined arg.
          method = "next";
          arg = undefined;

          var info = record.arg;
          if (info.done) {
            context[delegate.resultName] = info.value;
            context.next = delegate.nextLoc;
          } else {
            state = GenStateSuspendedYield;
            return info;
          }

          context.delegate = null;
        }

        if (method === "next") {
          if (state === GenStateSuspendedYield) {
            context.sent = arg;
          } else {
            context.sent = undefined;
          }

        } else if (method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw arg;
          }

          if (context.dispatchException(arg)) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            method = "next";
            arg = undefined;
          }

        } else if (method === "return") {
          context.abrupt("return", arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          var info = {
            value: record.arg,
            done: context.done
          };

          if (record.arg === ContinueSentinel) {
            if (context.delegate && method === "next") {
              // Deliberately forget the last sent value so that we don't
              // accidentally pass it on to the delegate.
              arg = undefined;
            }
          } else {
            return info;
          }

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(arg) call above.
          method = "throw";
          arg = record.arg;
        }
      }
    };
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      this.sent = undefined;
      this.done = false;
      this.delegate = null;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;
        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.next = finallyEntry.finallyLoc;
      } else {
        this.complete(record);
      }

      return ContinueSentinel;
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = record.arg;
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3IvcnVudGltZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIGh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvbWFzdGVyL0xJQ0VOU0UgZmlsZS4gQW5cbiAqIGFkZGl0aW9uYWwgZ3JhbnQgb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpblxuICogdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbiEoZnVuY3Rpb24oZ2xvYmFsKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID1cbiAgICB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuXG4gIHZhciBpbk1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCI7XG4gIHZhciBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgaWYgKHJ1bnRpbWUpIHtcbiAgICBpZiAoaW5Nb2R1bGUpIHtcbiAgICAgIC8vIElmIHJlZ2VuZXJhdG9yUnVudGltZSBpcyBkZWZpbmVkIGdsb2JhbGx5IGFuZCB3ZSdyZSBpbiBhIG1vZHVsZSxcbiAgICAgIC8vIG1ha2UgdGhlIGV4cG9ydHMgb2JqZWN0IGlkZW50aWNhbCB0byByZWdlbmVyYXRvclJ1bnRpbWUuXG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHJ1bnRpbWU7XG4gICAgfVxuICAgIC8vIERvbid0IGJvdGhlciBldmFsdWF0aW5nIHRoZSByZXN0IG9mIHRoaXMgZmlsZSBpZiB0aGUgcnVudGltZSB3YXNcbiAgICAvLyBhbHJlYWR5IGRlZmluZWQgZ2xvYmFsbHkuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRGVmaW5lIHRoZSBydW50aW1lIGdsb2JhbGx5IChhcyBleHBlY3RlZCBieSBnZW5lcmF0ZWQgY29kZSkgYXMgZWl0aGVyXG4gIC8vIG1vZHVsZS5leHBvcnRzIChpZiB3ZSdyZSBpbiBhIG1vZHVsZSkgb3IgYSBuZXcsIGVtcHR5IG9iamVjdC5cbiAgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWUgPSBpbk1vZHVsZSA/IG1vZHVsZS5leHBvcnRzIDoge307XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUoKG91dGVyRm4gfHwgR2VuZXJhdG9yKS5wcm90b3R5cGUpO1xuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKFxuICAgICAgaW5uZXJGbiwgc2VsZiB8fCBudWxsLFxuICAgICAgbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pXG4gICAgKTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgcnVudGltZS53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID0gR2VuZXJhdG9yLnByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgcnVudGltZS5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgdmFsdWUgaW5zdGFuY2VvZiBBd2FpdEFyZ3VtZW50YCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC4gU29tZSBtYXkgY29uc2lkZXIgdGhlIG5hbWUgb2YgdGhpcyBtZXRob2QgdG9vXG4gIC8vIGN1dGVzeSwgYnV0IHRoZXkgYXJlIGN1cm11ZGdlb25zLlxuICBydW50aW1lLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIG5ldyBBd2FpdEFyZ3VtZW50KGFyZyk7XG4gIH07XG5cbiAgZnVuY3Rpb24gQXdhaXRBcmd1bWVudChhcmcpIHtcbiAgICB0aGlzLmFyZyA9IGFyZztcbiAgfVxuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7XG4gICAgLy8gVGhpcyBpbnZva2UgZnVuY3Rpb24gaXMgd3JpdHRlbiBpbiBhIHN0eWxlIHRoYXQgYXNzdW1lcyBzb21lXG4gICAgLy8gY2FsbGluZyBmdW5jdGlvbiAob3IgUHJvbWlzZSkgd2lsbCBoYW5kbGUgZXhjZXB0aW9ucy5cbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIHZhciByZXN1bHQgPSBnZW5lcmF0b3JbbWV0aG9kXShhcmcpO1xuICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgQXdhaXRBcmd1bWVudFxuICAgICAgICA/IFByb21pc2UucmVzb2x2ZSh2YWx1ZS5hcmcpLnRoZW4oaW52b2tlTmV4dCwgaW52b2tlVGhyb3cpXG4gICAgICAgIDogUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uIElmIHRoZSBQcm9taXNlIGlzIHJlamVjdGVkLCBob3dldmVyLCB0aGVcbiAgICAgICAgICAgIC8vIHJlc3VsdCBmb3IgdGhpcyBpdGVyYXRpb24gd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSBzYW1lXG4gICAgICAgICAgICAvLyByZWFzb24uIE5vdGUgdGhhdCByZWplY3Rpb25zIG9mIHlpZWxkZWQgUHJvbWlzZXMgYXJlIG5vdFxuICAgICAgICAgICAgLy8gdGhyb3duIGJhY2sgaW50byB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBhcyBpcyB0aGUgY2FzZVxuICAgICAgICAgICAgLy8gd2hlbiBhbiBhd2FpdGVkIFByb21pc2UgaXMgcmVqZWN0ZWQuIFRoaXMgZGlmZmVyZW5jZSBpblxuICAgICAgICAgICAgLy8gYmVoYXZpb3IgYmV0d2VlbiB5aWVsZCBhbmQgYXdhaXQgaXMgaW1wb3J0YW50LCBiZWNhdXNlIGl0XG4gICAgICAgICAgICAvLyBhbGxvd3MgdGhlIGNvbnN1bWVyIHRvIGRlY2lkZSB3aGF0IHRvIGRvIHdpdGggdGhlIHlpZWxkZWRcbiAgICAgICAgICAgIC8vIHJlamVjdGlvbiAoc3dhbGxvdyBpdCBhbmQgY29udGludWUsIG1hbnVhbGx5IC50aHJvdyBpdCBiYWNrXG4gICAgICAgICAgICAvLyBpbnRvIHRoZSBnZW5lcmF0b3IsIGFiYW5kb24gaXRlcmF0aW9uLCB3aGF0ZXZlcikuIFdpdGhcbiAgICAgICAgICAgIC8vIGF3YWl0LCBieSBjb250cmFzdCwgdGhlcmUgaXMgbm8gb3Bwb3J0dW5pdHkgdG8gZXhhbWluZSB0aGVcbiAgICAgICAgICAgIC8vIHJlamVjdGlvbiByZWFzb24gb3V0c2lkZSB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBzbyB0aGVcbiAgICAgICAgICAgIC8vIG9ubHkgb3B0aW9uIGlzIHRvIHRocm93IGl0IGZyb20gdGhlIGF3YWl0IGV4cHJlc3Npb24sIGFuZFxuICAgICAgICAgICAgLy8gbGV0IHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24gaGFuZGxlIHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJiBwcm9jZXNzLmRvbWFpbikge1xuICAgICAgaW52b2tlID0gcHJvY2Vzcy5kb21haW4uYmluZChpbnZva2UpO1xuICAgIH1cblxuICAgIHZhciBpbnZva2VOZXh0ID0gaW52b2tlLmJpbmQoZ2VuZXJhdG9yLCBcIm5leHRcIik7XG4gICAgdmFyIGludm9rZVRocm93ID0gaW52b2tlLmJpbmQoZ2VuZXJhdG9yLCBcInRocm93XCIpO1xuICAgIHZhciBpbnZva2VSZXR1cm4gPSBpbnZva2UuYmluZChnZW5lcmF0b3IsIFwicmV0dXJuXCIpO1xuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICB2YXIgZW5xdWV1ZVJlc3VsdCA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gaW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgICAgfSkgOiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICAgICAgcmVzb2x2ZShpbnZva2UobWV0aG9kLCBhcmcpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGVucXVldWVSZXN1bHQgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnlcbiAgICAgIC8vIGxhdGVyIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgIHByZXZpb3VzUHJvbWlzZSA9IGVucXVldWVSZXN1bHRbXCJjYXRjaFwiXShmdW5jdGlvbihpZ25vcmVkKXt9KTtcblxuICAgICAgcmV0dXJuIGVucXVldWVSZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgcnVudGltZS5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICBpZiAobWV0aG9kID09PSBcInJldHVyblwiIHx8XG4gICAgICAgICAgICAgIChtZXRob2QgPT09IFwidGhyb3dcIiAmJiBkZWxlZ2F0ZS5pdGVyYXRvclttZXRob2RdID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICAvLyBBIHJldHVybiBvciB0aHJvdyAod2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIHRocm93XG4gICAgICAgICAgICAvLyBtZXRob2QpIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgICAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgICB2YXIgcmV0dXJuTWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl07XG4gICAgICAgICAgICBpZiAocmV0dXJuTWV0aG9kKSB7XG4gICAgICAgICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChyZXR1cm5NZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBhcmcpO1xuICAgICAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSByZXR1cm4gbWV0aG9kIHRocmV3IGFuIGV4Y2VwdGlvbiwgbGV0IHRoYXRcbiAgICAgICAgICAgICAgICAvLyBleGNlcHRpb24gcHJldmFpbCBvdmVyIHRoZSBvcmlnaW5hbCByZXR1cm4gb3IgdGhyb3cuXG4gICAgICAgICAgICAgICAgbWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgICAgICAgIGFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgICAgICAvLyBDb250aW51ZSB3aXRoIHRoZSBvdXRlciByZXR1cm4sIG5vdyB0aGF0IHRoZSBkZWxlZ2F0ZVxuICAgICAgICAgICAgICAvLyBpdGVyYXRvciBoYXMgYmVlbiB0ZXJtaW5hdGVkLlxuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goXG4gICAgICAgICAgICBkZWxlZ2F0ZS5pdGVyYXRvclttZXRob2RdLFxuICAgICAgICAgICAgZGVsZWdhdGUuaXRlcmF0b3IsXG4gICAgICAgICAgICBhcmdcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICAgICAgICAvLyBMaWtlIHJldHVybmluZyBnZW5lcmF0b3IudGhyb3codW5jYXVnaHQpLCBidXQgd2l0aG91dCB0aGVcbiAgICAgICAgICAgIC8vIG92ZXJoZWFkIG9mIGFuIGV4dHJhIGZ1bmN0aW9uIGNhbGwuXG4gICAgICAgICAgICBtZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgICBhcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gRGVsZWdhdGUgZ2VuZXJhdG9yIHJhbiBhbmQgaGFuZGxlZCBpdHMgb3duIGV4Y2VwdGlvbnMgc29cbiAgICAgICAgICAvLyByZWdhcmRsZXNzIG9mIHdoYXQgdGhlIG1ldGhvZCB3YXMsIHdlIGNvbnRpbnVlIGFzIGlmIGl0IGlzXG4gICAgICAgICAgLy8gXCJuZXh0XCIgd2l0aCBhbiB1bmRlZmluZWQgYXJnLlxuICAgICAgICAgIG1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcbiAgICAgICAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAgICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcbiAgICAgICAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcbiAgICAgICAgICAgIHJldHVybiBpbmZvO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkWWllbGQpIHtcbiAgICAgICAgICAgIGNvbnRleHQuc2VudCA9IGFyZztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29udGV4dC5zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGFyZykpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgICAgbWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgICBhcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSBpZiAobWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICB2YXIgaW5mbyA9IHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBpZiAoY29udGV4dC5kZWxlZ2F0ZSAmJiBtZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgICAgICAgYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaW5mbztcbiAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihhcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgbWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBydW50aW1lLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgcnVudGltZS52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIHRoaXMuc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcbiAgICAgICAgcmV0dXJuICEhY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcbn0pKFxuICAvLyBBbW9uZyB0aGUgdmFyaW91cyB0cmlja3MgZm9yIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsXG4gIC8vIG9iamVjdCwgdGhpcyBzZWVtcyB0byBiZSB0aGUgbW9zdCByZWxpYWJsZSB0ZWNobmlxdWUgdGhhdCBkb2VzIG5vdFxuICAvLyB1c2UgaW5kaXJlY3QgZXZhbCAod2hpY2ggdmlvbGF0ZXMgQ29udGVudCBTZWN1cml0eSBQb2xpY3kpLlxuICB0eXBlb2YgZ2xvYmFsID09PSBcIm9iamVjdFwiID8gZ2xvYmFsIDpcbiAgdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiA/IHdpbmRvdyA6XG4gIHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiID8gc2VsZiA6IHRoaXNcbik7XG4iXX0=
},{"_process":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/browserify/node_modules/process/browser.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/shim.js":[function(require,module,exports){
require('./modules/es5');
require('./modules/es6.symbol');
require('./modules/es6.object.assign');
require('./modules/es6.object.is');
require('./modules/es6.object.set-prototype-of');
require('./modules/es6.object.to-string');
require('./modules/es6.object.freeze');
require('./modules/es6.object.seal');
require('./modules/es6.object.prevent-extensions');
require('./modules/es6.object.is-frozen');
require('./modules/es6.object.is-sealed');
require('./modules/es6.object.is-extensible');
require('./modules/es6.object.get-own-property-descriptor');
require('./modules/es6.object.get-prototype-of');
require('./modules/es6.object.keys');
require('./modules/es6.object.get-own-property-names');
require('./modules/es6.function.name');
require('./modules/es6.function.has-instance');
require('./modules/es6.number.constructor');
require('./modules/es6.number.epsilon');
require('./modules/es6.number.is-finite');
require('./modules/es6.number.is-integer');
require('./modules/es6.number.is-nan');
require('./modules/es6.number.is-safe-integer');
require('./modules/es6.number.max-safe-integer');
require('./modules/es6.number.min-safe-integer');
require('./modules/es6.number.parse-float');
require('./modules/es6.number.parse-int');
require('./modules/es6.math.acosh');
require('./modules/es6.math.asinh');
require('./modules/es6.math.atanh');
require('./modules/es6.math.cbrt');
require('./modules/es6.math.clz32');
require('./modules/es6.math.cosh');
require('./modules/es6.math.expm1');
require('./modules/es6.math.fround');
require('./modules/es6.math.hypot');
require('./modules/es6.math.imul');
require('./modules/es6.math.log10');
require('./modules/es6.math.log1p');
require('./modules/es6.math.log2');
require('./modules/es6.math.sign');
require('./modules/es6.math.sinh');
require('./modules/es6.math.tanh');
require('./modules/es6.math.trunc');
require('./modules/es6.string.from-code-point');
require('./modules/es6.string.raw');
require('./modules/es6.string.trim');
require('./modules/es6.string.iterator');
require('./modules/es6.string.code-point-at');
require('./modules/es6.string.ends-with');
require('./modules/es6.string.includes');
require('./modules/es6.string.repeat');
require('./modules/es6.string.starts-with');
require('./modules/es6.array.from');
require('./modules/es6.array.of');
require('./modules/es6.array.iterator');
require('./modules/es6.array.species');
require('./modules/es6.array.copy-within');
require('./modules/es6.array.fill');
require('./modules/es6.array.find');
require('./modules/es6.array.find-index');
require('./modules/es6.regexp.constructor');
require('./modules/es6.regexp.flags');
require('./modules/es6.regexp.match');
require('./modules/es6.regexp.replace');
require('./modules/es6.regexp.search');
require('./modules/es6.regexp.split');
require('./modules/es6.promise');
require('./modules/es6.map');
require('./modules/es6.set');
require('./modules/es6.weak-map');
require('./modules/es6.weak-set');
require('./modules/es6.reflect.apply');
require('./modules/es6.reflect.construct');
require('./modules/es6.reflect.define-property');
require('./modules/es6.reflect.delete-property');
require('./modules/es6.reflect.enumerate');
require('./modules/es6.reflect.get');
require('./modules/es6.reflect.get-own-property-descriptor');
require('./modules/es6.reflect.get-prototype-of');
require('./modules/es6.reflect.has');
require('./modules/es6.reflect.is-extensible');
require('./modules/es6.reflect.own-keys');
require('./modules/es6.reflect.prevent-extensions');
require('./modules/es6.reflect.set');
require('./modules/es6.reflect.set-prototype-of');
require('./modules/es7.array.includes');
require('./modules/es7.string.at');
require('./modules/es7.string.pad-left');
require('./modules/es7.string.pad-right');
require('./modules/es7.string.trim-left');
require('./modules/es7.string.trim-right');
require('./modules/es7.regexp.escape');
require('./modules/es7.object.get-own-property-descriptors');
require('./modules/es7.object.values');
require('./modules/es7.object.entries');
require('./modules/es7.map.to-json');
require('./modules/es7.set.to-json');
require('./modules/js.array.statics');
require('./modules/web.timers');
require('./modules/web.immediate');
require('./modules/web.dom.iterable');
module.exports = require('./modules/$.core');
},{"./modules/$.core":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.core.js","./modules/es5":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es5.js","./modules/es6.array.copy-within":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.copy-within.js","./modules/es6.array.fill":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.fill.js","./modules/es6.array.find":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.find.js","./modules/es6.array.find-index":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.find-index.js","./modules/es6.array.from":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.from.js","./modules/es6.array.iterator":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.iterator.js","./modules/es6.array.of":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.of.js","./modules/es6.array.species":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.species.js","./modules/es6.function.has-instance":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.function.has-instance.js","./modules/es6.function.name":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.function.name.js","./modules/es6.map":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.map.js","./modules/es6.math.acosh":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.acosh.js","./modules/es6.math.asinh":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.asinh.js","./modules/es6.math.atanh":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.atanh.js","./modules/es6.math.cbrt":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.cbrt.js","./modules/es6.math.clz32":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.clz32.js","./modules/es6.math.cosh":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.cosh.js","./modules/es6.math.expm1":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.expm1.js","./modules/es6.math.fround":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.fround.js","./modules/es6.math.hypot":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.hypot.js","./modules/es6.math.imul":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.imul.js","./modules/es6.math.log10":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.log10.js","./modules/es6.math.log1p":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.log1p.js","./modules/es6.math.log2":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.log2.js","./modules/es6.math.sign":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.sign.js","./modules/es6.math.sinh":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.sinh.js","./modules/es6.math.tanh":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.tanh.js","./modules/es6.math.trunc":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.trunc.js","./modules/es6.number.constructor":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.constructor.js","./modules/es6.number.epsilon":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.epsilon.js","./modules/es6.number.is-finite":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.is-finite.js","./modules/es6.number.is-integer":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.is-integer.js","./modules/es6.number.is-nan":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.is-nan.js","./modules/es6.number.is-safe-integer":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.is-safe-integer.js","./modules/es6.number.max-safe-integer":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.max-safe-integer.js","./modules/es6.number.min-safe-integer":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.min-safe-integer.js","./modules/es6.number.parse-float":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.parse-float.js","./modules/es6.number.parse-int":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.parse-int.js","./modules/es6.object.assign":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.assign.js","./modules/es6.object.freeze":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.freeze.js","./modules/es6.object.get-own-property-descriptor":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.get-own-property-descriptor.js","./modules/es6.object.get-own-property-names":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.get-own-property-names.js","./modules/es6.object.get-prototype-of":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.get-prototype-of.js","./modules/es6.object.is":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.is.js","./modules/es6.object.is-extensible":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.is-extensible.js","./modules/es6.object.is-frozen":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.is-frozen.js","./modules/es6.object.is-sealed":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.is-sealed.js","./modules/es6.object.keys":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.keys.js","./modules/es6.object.prevent-extensions":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.prevent-extensions.js","./modules/es6.object.seal":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.seal.js","./modules/es6.object.set-prototype-of":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.set-prototype-of.js","./modules/es6.object.to-string":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.to-string.js","./modules/es6.promise":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.promise.js","./modules/es6.reflect.apply":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.apply.js","./modules/es6.reflect.construct":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.construct.js","./modules/es6.reflect.define-property":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.define-property.js","./modules/es6.reflect.delete-property":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.delete-property.js","./modules/es6.reflect.enumerate":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.enumerate.js","./modules/es6.reflect.get":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.get.js","./modules/es6.reflect.get-own-property-descriptor":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js","./modules/es6.reflect.get-prototype-of":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.get-prototype-of.js","./modules/es6.reflect.has":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.has.js","./modules/es6.reflect.is-extensible":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.is-extensible.js","./modules/es6.reflect.own-keys":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.own-keys.js","./modules/es6.reflect.prevent-extensions":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.prevent-extensions.js","./modules/es6.reflect.set":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.set.js","./modules/es6.reflect.set-prototype-of":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.set-prototype-of.js","./modules/es6.regexp.constructor":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.regexp.constructor.js","./modules/es6.regexp.flags":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.regexp.flags.js","./modules/es6.regexp.match":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.regexp.match.js","./modules/es6.regexp.replace":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.regexp.replace.js","./modules/es6.regexp.search":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.regexp.search.js","./modules/es6.regexp.split":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.regexp.split.js","./modules/es6.set":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.set.js","./modules/es6.string.code-point-at":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.code-point-at.js","./modules/es6.string.ends-with":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.ends-with.js","./modules/es6.string.from-code-point":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.from-code-point.js","./modules/es6.string.includes":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.includes.js","./modules/es6.string.iterator":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.iterator.js","./modules/es6.string.raw":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.raw.js","./modules/es6.string.repeat":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.repeat.js","./modules/es6.string.starts-with":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.starts-with.js","./modules/es6.string.trim":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.trim.js","./modules/es6.symbol":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.symbol.js","./modules/es6.weak-map":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.weak-map.js","./modules/es6.weak-set":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.weak-set.js","./modules/es7.array.includes":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.array.includes.js","./modules/es7.map.to-json":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.map.to-json.js","./modules/es7.object.entries":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.object.entries.js","./modules/es7.object.get-own-property-descriptors":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.object.get-own-property-descriptors.js","./modules/es7.object.values":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.object.values.js","./modules/es7.regexp.escape":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.regexp.escape.js","./modules/es7.set.to-json":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.set.to-json.js","./modules/es7.string.at":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.string.at.js","./modules/es7.string.pad-left":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.string.pad-left.js","./modules/es7.string.pad-right":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.string.pad-right.js","./modules/es7.string.trim-left":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.string.trim-left.js","./modules/es7.string.trim-right":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.string.trim-right.js","./modules/js.array.statics":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/js.array.statics.js","./modules/web.dom.iterable":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/web.dom.iterable.js","./modules/web.immediate":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/web.immediate.js","./modules/web.timers":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/web.timers.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/web.timers.js":[function(require,module,exports){
// ie9- setTimeout & setInterval additional parameters fix
var global     = require('./$.global')
  , $def       = require('./$.def')
  , invoke     = require('./$.invoke')
  , partial    = require('./$.partial')
  , navigator  = global.navigator
  , MSIE       = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
var wrap = function(set){
  return MSIE ? function(fn, time /*, ...args */){
    return set(invoke(
      partial,
      [].slice.call(arguments, 2),
      typeof fn == 'function' ? fn : Function(fn)
    ), time);
  } : set;
};
$def($def.G + $def.B + $def.F * MSIE, {
  setTimeout:  wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.global":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js","./$.invoke":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.invoke.js","./$.partial":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.partial.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.partial.js":[function(require,module,exports){
'use strict';
var path      = require('./$.path')
  , invoke    = require('./$.invoke')
  , aFunction = require('./$.a-function');
module.exports = function(/* ...pargs */){
  var fn     = aFunction(this)
    , length = arguments.length
    , pargs  = Array(length)
    , i      = 0
    , _      = path._
    , holder = false;
  while(length > i)if((pargs[i] = arguments[i++]) === _)holder = true;
  return function(/* ...args */){
    var that    = this
      , _length = arguments.length
      , j = 0, k = 0, args;
    if(!holder && !_length)return invoke(fn, pargs, that);
    args = pargs.slice();
    if(holder)for(;length > j; j++)if(args[j] === _)args[j] = arguments[k++];
    while(_length > k)args.push(arguments[k++]);
    return invoke(fn, args, that);
  };
};
},{"./$.a-function":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.a-function.js","./$.invoke":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.invoke.js","./$.path":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.path.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.path.js":[function(require,module,exports){
module.exports = require('./$.global');
},{"./$.global":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/web.immediate.js":[function(require,module,exports){
var $def  = require('./$.def')
  , $task = require('./$.task');
$def($def.G + $def.B, {
  setImmediate:   $task.set,
  clearImmediate: $task.clear
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.task":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.task.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/web.dom.iterable.js":[function(require,module,exports){
require('./es6.array.iterator');
var global      = require('./$.global')
  , hide        = require('./$.hide')
  , Iterators   = require('./$.iterators')
  , ITERATOR    = require('./$.wks')('iterator')
  , NL          = global.NodeList
  , HTC         = global.HTMLCollection
  , NLProto     = NL && NL.prototype
  , HTCProto    = HTC && HTC.prototype
  , ArrayValues = Iterators.NodeList = Iterators.HTMLCollection = Iterators.Array;
if(NL && !(ITERATOR in NLProto))hide(NLProto, ITERATOR, ArrayValues);
if(HTC && !(ITERATOR in HTCProto))hide(HTCProto, ITERATOR, ArrayValues);
},{"./$.global":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js","./$.hide":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.hide.js","./$.iterators":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iterators.js","./$.wks":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js","./es6.array.iterator":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.iterator.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/js.array.statics.js":[function(require,module,exports){
// JavaScript 1.6 / Strawman array statics shim
var $       = require('./$')
  , $def    = require('./$.def')
  , $Array  = require('./$.core').Array || Array
  , statics = {};
var setStatics = function(keys, length){
  $.each.call(keys.split(','), function(key){
    if(length == undefined && key in $Array)statics[key] = $Array[key];
    else if(key in [])statics[key] = require('./$.ctx')(Function.call, [][key], length);
  });
};
setStatics('pop,reverse,shift,keys,values,entries', 1);
setStatics('indexOf,every,some,forEach,map,filter,find,findIndex,includes', 3);
setStatics('join,slice,concat,push,splice,unshift,sort,lastIndexOf,' +
           'reduce,reduceRight,copyWithin,fill');
$def($def.S, 'Array', statics);
},{"./$":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.core":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.core.js","./$.ctx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.ctx.js","./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.string.trim-right.js":[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./$.string-trim')('trimRight', function($trim){
  return function trimRight(){
    return $trim(this, 2);
  };
});
},{"./$.string-trim":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-trim.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.string.trim-left.js":[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./$.string-trim')('trimLeft', function($trim){
  return function trimLeft(){
    return $trim(this, 1);
  };
});
},{"./$.string-trim":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-trim.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.string.pad-right.js":[function(require,module,exports){
'use strict';
var $def = require('./$.def')
  , $pad = require('./$.string-pad');
$def($def.P, 'String', {
  padRight: function padRight(maxLength /*, fillString = ' ' */){
    return $pad(this, maxLength, arguments[1], false);
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.string-pad":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-pad.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.string.pad-left.js":[function(require,module,exports){
'use strict';
var $def = require('./$.def')
  , $pad = require('./$.string-pad');
$def($def.P, 'String', {
  padLeft: function padLeft(maxLength /*, fillString = ' ' */){
    return $pad(this, maxLength, arguments[1], true);
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.string-pad":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-pad.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-pad.js":[function(require,module,exports){
// https://github.com/ljharb/proposal-string-pad-left-right
var toLength = require('./$.to-length')
  , repeat   = require('./$.string-repeat')
  , defined  = require('./$.defined');

module.exports = function(that, maxLength, fillString, left){
  var S            = String(defined(that))
    , stringLength = S.length
    , fillStr      = fillString === undefined ? ' ' : String(fillString)
    , intMaxLength = toLength(maxLength);
  if(intMaxLength <= stringLength)return S;
  if(fillStr == '')fillStr = ' ';
  var fillLen = intMaxLength - stringLength
    , stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if(stringFiller.length > fillLen)stringFiller = left
    ? stringFiller.slice(stringFiller.length - fillLen)
    : stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};
},{"./$.defined":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.defined.js","./$.string-repeat":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-repeat.js","./$.to-length":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-length.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.string.at.js":[function(require,module,exports){
// https://github.com/mathiasbynens/String.prototype.at
'use strict';
var $def = require('./$.def')
  , $at  = require('./$.string-at')(true);
$def($def.P, 'String', {
  at: function at(pos){
    return $at(this, pos);
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.string-at":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-at.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.set.to-json.js":[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $def  = require('./$.def');

$def($def.P, 'Set', {toJSON: require('./$.collection-to-json')('Set')});
},{"./$.collection-to-json":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.collection-to-json.js","./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.regexp.escape.js":[function(require,module,exports){
// https://github.com/benjamingr/RexExp.escape
var $def = require('./$.def')
  , $re  = require('./$.replacer')(/[\\^$*+?.()|[\]{}]/g, '\\$&');
$def($def.S, 'RegExp', {escape: function escape(it){ return $re(it); }});

},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.replacer":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.replacer.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.replacer.js":[function(require,module,exports){
module.exports = function(regExp, replace){
  var replacer = replace === Object(replace) ? function(part){
    return replace[part];
  } : replace;
  return function(it){
    return String(it).replace(regExp, replacer);
  };
};
},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.object.values.js":[function(require,module,exports){
// http://goo.gl/XkBrjD
var $def    = require('./$.def')
  , $values = require('./$.object-to-array')(false);

$def($def.S, 'Object', {
  values: function values(it){
    return $values(it);
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.object-to-array":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-to-array.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.object.get-own-property-descriptors.js":[function(require,module,exports){
// https://gist.github.com/WebReflection/9353781
var $          = require('./$')
  , $def       = require('./$.def')
  , ownKeys    = require('./$.own-keys')
  , toIObject  = require('./$.to-iobject')
  , createDesc = require('./$.property-desc');

$def($def.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object){
    var O       = toIObject(object)
      , setDesc = $.setDesc
      , getDesc = $.getDesc
      , keys    = ownKeys(O)
      , result  = {}
      , i       = 0
      , key, D;
    while(keys.length > i){
      D = getDesc(O, key = keys[i++]);
      if(key in result)setDesc(result, key, createDesc(0, D));
      else result[key] = D;
    } return result;
  }
});
},{"./$":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.own-keys":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.own-keys.js","./$.property-desc":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.property-desc.js","./$.to-iobject":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-iobject.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.object.entries.js":[function(require,module,exports){
// http://goo.gl/XkBrjD
var $def     = require('./$.def')
  , $entries = require('./$.object-to-array')(true);

$def($def.S, 'Object', {
  entries: function entries(it){
    return $entries(it);
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.object-to-array":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-to-array.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-to-array.js":[function(require,module,exports){
var $         = require('./$')
  , toIObject = require('./$.to-iobject');
module.exports = function(isEntries){
  return function(it){
    var O      = toIObject(it)
      , keys   = $.getKeys(O)
      , length = keys.length
      , i      = 0
      , result = Array(length)
      , key;
    if(isEntries)while(length > i)result[i] = [key = keys[i++], O[key]];
    else while(length > i)result[i] = O[keys[i++]];
    return result;
  };
};
},{"./$":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.to-iobject":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-iobject.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.map.to-json.js":[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $def  = require('./$.def');

$def($def.P, 'Map', {toJSON: require('./$.collection-to-json')('Map')});
},{"./$.collection-to-json":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.collection-to-json.js","./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.collection-to-json.js":[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var forOf   = require('./$.for-of')
  , classof = require('./$.classof');
module.exports = function(NAME){
  return function toJSON(){
    if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
    var arr = [];
    forOf(this, false, arr.push, arr);
    return arr;
  };
};
},{"./$.classof":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.classof.js","./$.for-of":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.for-of.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es7.array.includes.js":[function(require,module,exports){
'use strict';
var $def      = require('./$.def')
  , $includes = require('./$.array-includes')(true);
$def($def.P, 'Array', {
  // https://github.com/domenic/Array.prototype.includes
  includes: function includes(el /*, fromIndex = 0 */){
    return $includes(this, el, arguments[1]);
  }
});
require('./$.unscope')('includes');
},{"./$.array-includes":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.array-includes.js","./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.unscope":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.unscope.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.weak-set.js":[function(require,module,exports){
'use strict';
var weak = require('./$.collection-weak');

// 23.4 WeakSet Objects
require('./$.collection')('WeakSet', function(get){
  return function WeakSet(){ return get(this, arguments[0]); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value){
    return weak.def(this, value, true);
  }
}, weak, false, true);
},{"./$.collection":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.collection.js","./$.collection-weak":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.collection-weak.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.weak-map.js":[function(require,module,exports){
'use strict';
var $            = require('./$')
  , weak         = require('./$.collection-weak')
  , isObject     = require('./$.is-object')
  , has          = require('./$.has')
  , frozenStore  = weak.frozenStore
  , WEAK         = weak.WEAK
  , isExtensible = Object.isExtensible || isObject
  , tmp          = {};

// 23.3 WeakMap Objects
var $WeakMap = require('./$.collection')('WeakMap', function(get){
  return function WeakMap(){ return get(this, arguments[0]); };
}, {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key){
    if(isObject(key)){
      if(!isExtensible(key))return frozenStore(this).get(key);
      if(has(key, WEAK))return key[WEAK][this._i];
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value){
    return weak.def(this, key, value);
  }
}, weak, true, true);

// IE11 WeakMap frozen keys fix
if(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
  $.each.call(['delete', 'has', 'get', 'set'], function(key){
    var proto  = $WeakMap.prototype
      , method = proto[key];
    require('./$.redef')(proto, key, function(a, b){
      // store frozen objects on leaky map
      if(isObject(a) && !isExtensible(a)){
        var result = frozenStore(this)[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}
},{"./$":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.collection":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.collection.js","./$.collection-weak":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.collection-weak.js","./$.has":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.has.js","./$.is-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.redef":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.redef.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.collection-weak.js":[function(require,module,exports){
'use strict';
var hide         = require('./$.hide')
  , anObject     = require('./$.an-object')
  , strictNew    = require('./$.strict-new')
  , forOf        = require('./$.for-of')
  , method       = require('./$.array-methods')
  , WEAK         = require('./$.uid')('weak')
  , isObject     = require('./$.is-object')
  , $has         = require('./$.has')
  , isExtensible = Object.isExtensible || isObject
  , find         = method(5)
  , findIndex    = method(6)
  , id           = 0;

// fallback for frozen keys
var frozenStore = function(that){
  return that._l || (that._l = new FrozenStore);
};
var FrozenStore = function(){
  this.a = [];
};
var findFrozen = function(store, key){
  return find(store.a, function(it){
    return it[0] === key;
  });
};
FrozenStore.prototype = {
  get: function(key){
    var entry = findFrozen(this, key);
    if(entry)return entry[1];
  },
  has: function(key){
    return !!findFrozen(this, key);
  },
  set: function(key, value){
    var entry = findFrozen(this, key);
    if(entry)entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function(key){
    var index = findIndex(this.a, function(it){
      return it[0] === key;
    });
    if(~index)this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      strictNew(that, C, NAME);
      that._i = id++;      // collection id
      that._l = undefined; // leak store for frozen objects
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    require('./$.mix')(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function(key){
        if(!isObject(key))return false;
        if(!isExtensible(key))return frozenStore(this)['delete'](key);
        return $has(key, WEAK) && $has(key[WEAK], this._i) && delete key[WEAK][this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key){
        if(!isObject(key))return false;
        if(!isExtensible(key))return frozenStore(this).has(key);
        return $has(key, WEAK) && $has(key[WEAK], this._i);
      }
    });
    return C;
  },
  def: function(that, key, value){
    if(!isExtensible(anObject(key))){
      frozenStore(that).set(key, value);
    } else {
      $has(key, WEAK) || hide(key, WEAK, {});
      key[WEAK][that._i] = value;
    } return that;
  },
  frozenStore: frozenStore,
  WEAK: WEAK
};
},{"./$.an-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.array-methods":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.array-methods.js","./$.for-of":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.for-of.js","./$.has":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.has.js","./$.hide":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.hide.js","./$.is-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.mix":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.mix.js","./$.strict-new":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.strict-new.js","./$.uid":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.uid.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.symbol.js":[function(require,module,exports){
'use strict';
// ECMAScript 6 symbols shim
var $              = require('./$')
  , global         = require('./$.global')
  , has            = require('./$.has')
  , SUPPORT_DESC   = require('./$.support-desc')
  , $def           = require('./$.def')
  , $redef         = require('./$.redef')
  , shared         = require('./$.shared')
  , setTag         = require('./$.tag')
  , uid            = require('./$.uid')
  , wks            = require('./$.wks')
  , keyOf          = require('./$.keyof')
  , $names         = require('./$.get-names')
  , enumKeys       = require('./$.enum-keys')
  , isObject       = require('./$.is-object')
  , anObject       = require('./$.an-object')
  , toIObject      = require('./$.to-iobject')
  , createDesc     = require('./$.property-desc')
  , getDesc        = $.getDesc
  , setDesc        = $.setDesc
  , _create        = $.create
  , getNames       = $names.get
  , $Symbol        = global.Symbol
  , setter         = false
  , HIDDEN         = wks('_hidden')
  , isEnum         = $.isEnum
  , SymbolRegistry = shared('symbol-registry')
  , AllSymbols     = shared('symbols')
  , useNative      = typeof $Symbol == 'function'
  , ObjectProto    = Object.prototype;

var setSymbolDesc = SUPPORT_DESC ? function(){ // fallback for old Android
  try {
    return _create(setDesc({}, HIDDEN, {
      get: function(){
        return setDesc(this, HIDDEN, {value: false})[HIDDEN];
      }
    }))[HIDDEN] || setDesc;
  } catch(e){
    return function(it, key, D){
      var protoDesc = getDesc(ObjectProto, key);
      if(protoDesc)delete ObjectProto[key];
      setDesc(it, key, D);
      if(protoDesc && it !== ObjectProto)setDesc(ObjectProto, key, protoDesc);
    };
  }
}() : setDesc;

var wrap = function(tag){
  var sym = AllSymbols[tag] = _create($Symbol.prototype);
  sym._k = tag;
  SUPPORT_DESC && setter && setSymbolDesc(ObjectProto, tag, {
    configurable: true,
    set: function(value){
      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    }
  });
  return sym;
};

var $defineProperty = function defineProperty(it, key, D){
  if(D && has(AllSymbols, key)){
    if(!D.enumerable){
      if(!has(it, HIDDEN))setDesc(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
      D = _create(D, {enumerable: createDesc(0, false)});
    } return setSymbolDesc(it, key, D);
  } return setDesc(it, key, D);
};
var $defineProperties = function defineProperties(it, P){
  anObject(it);
  var keys = enumKeys(P = toIObject(P))
    , i    = 0
    , l = keys.length
    , key;
  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P){
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key){
  var E = isEnum.call(this, key);
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key]
    ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
  var D = getDesc(it = toIObject(it), key);
  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it){
  var names  = getNames(toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i)if(!has(AllSymbols, key = names[i++]) && key != HIDDEN)result.push(key);
  return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
  var names  = getNames(toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i)if(has(AllSymbols, key = names[i++]))result.push(AllSymbols[key]);
  return result;
};

// 19.4.1.1 Symbol([description])
if(!useNative){
  $Symbol = function Symbol(){
    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor');
    return wrap(uid(arguments[0]));
  };
  $redef($Symbol.prototype, 'toString', function toString(){
    return this._k;
  });

  $.create     = $create;
  $.isEnum     = $propertyIsEnumerable;
  $.getDesc    = $getOwnPropertyDescriptor;
  $.setDesc    = $defineProperty;
  $.setDescs   = $defineProperties;
  $.getNames   = $names.get = $getOwnPropertyNames;
  $.getSymbols = $getOwnPropertySymbols;

  if(SUPPORT_DESC && !require('./$.library')){
    $redef(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }
}

// MS Edge converts symbol values to JSON as {}
// WebKit converts symbol values in objects to JSON as null
if(!useNative || require('./$.fails')(function(){
  return JSON.stringify([{a: $Symbol()}, [$Symbol()]]) != '[{},[null]]';
}))$redef($Symbol.prototype, 'toJSON', function toJSON(){
  if(useNative && isObject(this))return this;
});

var symbolStatics = {
  // 19.4.2.1 Symbol.for(key)
  'for': function(key){
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(key){
    return keyOf(SymbolRegistry, key);
  },
  useSetter: function(){ setter = true; },
  useSimple: function(){ setter = false; }
};
// 19.4.2.2 Symbol.hasInstance
// 19.4.2.3 Symbol.isConcatSpreadable
// 19.4.2.4 Symbol.iterator
// 19.4.2.6 Symbol.match
// 19.4.2.8 Symbol.replace
// 19.4.2.9 Symbol.search
// 19.4.2.10 Symbol.species
// 19.4.2.11 Symbol.split
// 19.4.2.12 Symbol.toPrimitive
// 19.4.2.13 Symbol.toStringTag
// 19.4.2.14 Symbol.unscopables
$.each.call((
    'hasInstance,isConcatSpreadable,iterator,match,replace,search,' +
    'species,split,toPrimitive,toStringTag,unscopables'
  ).split(','), function(it){
    var sym = wks(it);
    symbolStatics[it] = useNative ? sym : wrap(sym);
  }
);

setter = true;

$def($def.G + $def.W, {Symbol: $Symbol});

$def($def.S, 'Symbol', symbolStatics);

$def($def.S + $def.F * !useNative, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 19.4.3.5 Symbol.prototype[@@toStringTag]
setTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setTag(global.JSON, 'JSON', true);
},{"./$":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.an-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.enum-keys":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.enum-keys.js","./$.fails":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js","./$.get-names":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.get-names.js","./$.global":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js","./$.has":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.has.js","./$.is-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.keyof":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.keyof.js","./$.library":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.library.js","./$.property-desc":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.property-desc.js","./$.redef":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.redef.js","./$.shared":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.shared.js","./$.support-desc":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.support-desc.js","./$.tag":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.tag.js","./$.to-iobject":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-iobject.js","./$.uid":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.uid.js","./$.wks":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.keyof.js":[function(require,module,exports){
var $         = require('./$')
  , toIObject = require('./$.to-iobject');
module.exports = function(object, el){
  var O      = toIObject(object)
    , keys   = $.getKeys(O)
    , length = keys.length
    , index  = 0
    , key;
  while(length > index)if(O[key = keys[index++]] === el)return key;
};
},{"./$":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.to-iobject":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-iobject.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.trim.js":[function(require,module,exports){
'use strict';
// 21.1.3.25 String.prototype.trim()
require('./$.string-trim')('trim', function($trim){
  return function trim(){
    return $trim(this, 3);
  };
});
},{"./$.string-trim":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-trim.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-trim.js":[function(require,module,exports){
// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = function(string, TYPE){
  string = String(defined(string));
  if(TYPE & 1)string = string.replace(ltrim, '');
  if(TYPE & 2)string = string.replace(rtrim, '');
  return string;
};

var $def    = require('./$.def')
  , defined = require('./$.defined')
  , spaces  = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
      '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF'
  , space   = '[' + spaces + ']'
  , non     = '\u200b\u0085'
  , ltrim   = RegExp('^' + space + space + '*')
  , rtrim   = RegExp(space + space + '*$');

module.exports = function(KEY, exec){
  var exp  = {};
  exp[KEY] = exec(trim);
  $def($def.P + $def.F * require('./$.fails')(function(){
    return !!spaces[KEY]() || non[KEY]() != non;
  }), 'String', exp);
};
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.defined":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.defined.js","./$.fails":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.starts-with.js":[function(require,module,exports){
'use strict';
var $def     = require('./$.def')
  , toLength = require('./$.to-length')
  , context  = require('./$.string-context');

// should throw error on regex
$def($def.P + $def.F * !require('./$.fails')(function(){ 'q'.startsWith(/./); }), 'String', {
  // 21.1.3.18 String.prototype.startsWith(searchString [, position ])
  startsWith: function startsWith(searchString /*, position = 0 */){
    var that   = context(this, searchString, 'startsWith')
      , index  = toLength(Math.min(arguments[1], that.length))
      , search = String(searchString);
    return that.slice(index, index + search.length) === search;
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.fails":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js","./$.string-context":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-context.js","./$.to-length":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-length.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.repeat.js":[function(require,module,exports){
var $def = require('./$.def');

$def($def.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: require('./$.string-repeat')
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.string-repeat":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-repeat.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-repeat.js":[function(require,module,exports){
'use strict';
var toInteger = require('./$.to-integer')
  , defined   = require('./$.defined');

module.exports = function repeat(count){
  var str = String(defined(this))
    , res = ''
    , n   = toInteger(count);
  if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");
  for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;
  return res;
};
},{"./$.defined":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.defined.js","./$.to-integer":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-integer.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.raw.js":[function(require,module,exports){
var $def      = require('./$.def')
  , toIObject = require('./$.to-iobject')
  , toLength  = require('./$.to-length');

$def($def.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite){
    var tpl = toIObject(callSite.raw)
      , len = toLength(tpl.length)
      , sln = arguments.length
      , res = []
      , i   = 0;
    while(len > i){
      res.push(String(tpl[i++]));
      if(i < sln)res.push(String(arguments[i]));
    } return res.join('');
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.to-iobject":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-iobject.js","./$.to-length":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-length.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.iterator.js":[function(require,module,exports){
'use strict';
var $at  = require('./$.string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./$.iter-define')(String, 'String', function(iterated){
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , index = this._i
    , point;
  if(index >= O.length)return {value: undefined, done: true};
  point = $at(O, index);
  this._i += point.length;
  return {value: point, done: false};
});
},{"./$.iter-define":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-define.js","./$.string-at":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-at.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.includes.js":[function(require,module,exports){
'use strict';
var $def    = require('./$.def')
  , context = require('./$.string-context');

$def($def.P, 'String', {
  // 21.1.3.7 String.prototype.includes(searchString, position = 0)
  includes: function includes(searchString /*, position = 0 */){
    return !!~context(this, searchString, 'includes').indexOf(searchString, arguments[1]);
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.string-context":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-context.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.from-code-point.js":[function(require,module,exports){
var $def    = require('./$.def')
  , toIndex = require('./$.to-index')
  , fromCharCode = String.fromCharCode
  , $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$def($def.S + $def.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars
    var res = []
      , len = arguments.length
      , i   = 0
      , code;
    while(len > i){
      code = +arguments[i++];
      if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.to-index":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-index.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.ends-with.js":[function(require,module,exports){
'use strict';
var $def     = require('./$.def')
  , toLength = require('./$.to-length')
  , context  = require('./$.string-context');

// should throw error on regex
$def($def.P + $def.F * !require('./$.fails')(function(){ 'q'.endsWith(/./); }), 'String', {
  // 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
  endsWith: function endsWith(searchString /*, endPosition = @length */){
    var that = context(this, searchString, 'endsWith')
      , endPosition = arguments[1]
      , len    = toLength(that.length)
      , end    = endPosition === undefined ? len : Math.min(toLength(endPosition), len)
      , search = String(searchString);
    return that.slice(end - search.length, end) === search;
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.fails":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js","./$.string-context":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-context.js","./$.to-length":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-length.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-context.js":[function(require,module,exports){
// helper for String#{startsWith, endsWith, includes}
var defined = require('./$.defined')
  , cof     = require('./$.cof');

module.exports = function(that, searchString, NAME){
  if(cof(searchString) == 'RegExp')throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};
},{"./$.cof":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.cof.js","./$.defined":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.defined.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.string.code-point-at.js":[function(require,module,exports){
'use strict';
var $def = require('./$.def')
  , $at  = require('./$.string-at')(false);
$def($def.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos){
    return $at(this, pos);
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.string-at":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-at.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.string-at.js":[function(require,module,exports){
// true  -> String#at
// false -> String#codePointAt
var toInteger = require('./$.to-integer')
  , defined   = require('./$.defined');
module.exports = function(TO_STRING){
  return function(that, pos){
    var s = String(defined(that))
      , i = toInteger(pos)
      , l = s.length
      , a, b;
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l
      || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
        ? TO_STRING ? s.charAt(i) : a
        : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};
},{"./$.defined":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.defined.js","./$.to-integer":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-integer.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.set.js":[function(require,module,exports){
'use strict';
var strong = require('./$.collection-strong');

// 23.2 Set Objects
require('./$.collection')('Set', function(get){
  return function Set(){ return get(this, arguments[0]); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value){
    return strong.def(this, value = value === 0 ? 0 : value, value);
  }
}, strong);
},{"./$.collection":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.collection.js","./$.collection-strong":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.collection-strong.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.regexp.split.js":[function(require,module,exports){
// @@split logic
require('./$.fix-re-wks')('split', 2, function(defined, SPLIT, $split){
  // 21.1.3.17 String.prototype.split(separator, limit)
  return function split(separator, limit){
    'use strict';
    var O  = defined(this)
      , fn = separator == undefined ? undefined : separator[SPLIT];
    return fn !== undefined
      ? fn.call(separator, O, limit)
      : $split.call(String(O), separator, limit);
  };
});
},{"./$.fix-re-wks":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fix-re-wks.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.regexp.search.js":[function(require,module,exports){
// @@search logic
require('./$.fix-re-wks')('search', 1, function(defined, SEARCH){
  // 21.1.3.15 String.prototype.search(regexp)
  return function search(regexp){
    'use strict';
    var O  = defined(this)
      , fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  };
});
},{"./$.fix-re-wks":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fix-re-wks.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.regexp.replace.js":[function(require,module,exports){
// @@replace logic
require('./$.fix-re-wks')('replace', 2, function(defined, REPLACE, $replace){
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
  return function replace(searchValue, replaceValue){
    'use strict';
    var O  = defined(this)
      , fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined
      ? fn.call(searchValue, O, replaceValue)
      : $replace.call(String(O), searchValue, replaceValue);
  };
});
},{"./$.fix-re-wks":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fix-re-wks.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.regexp.match.js":[function(require,module,exports){
// @@match logic
require('./$.fix-re-wks')('match', 1, function(defined, MATCH){
  // 21.1.3.11 String.prototype.match(regexp)
  return function match(regexp){
    'use strict';
    var O  = defined(this)
      , fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  };
});
},{"./$.fix-re-wks":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fix-re-wks.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fix-re-wks.js":[function(require,module,exports){
'use strict';
module.exports = function(KEY, length, exec){
  var defined  = require('./$.defined')
    , SYMBOL   = require('./$.wks')(KEY)
    , original = ''[KEY];
  if(require('./$.fails')(function(){
    var O = {};
    O[SYMBOL] = function(){ return 7; };
    return ''[KEY](O) != 7;
  })){
    require('./$.redef')(String.prototype, KEY, exec(defined, SYMBOL, original));
    require('./$.hide')(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function(string, arg){ return original.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function(string){ return original.call(string, this); }
    );
  }
};
},{"./$.defined":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.defined.js","./$.fails":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js","./$.hide":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.hide.js","./$.redef":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.redef.js","./$.wks":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.regexp.flags.js":[function(require,module,exports){
// 21.2.5.3 get RegExp.prototype.flags()
var $ = require('./$');
if(require('./$.support-desc') && /./g.flags != 'g')$.setDesc(RegExp.prototype, 'flags', {
  configurable: true,
  get: require('./$.flags')
});
},{"./$":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.flags":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.flags.js","./$.support-desc":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.support-desc.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.regexp.constructor.js":[function(require,module,exports){
var $       = require('./$')
  , global  = require('./$.global')
  , cof     = require('./$.cof')
  , $flags  = require('./$.flags')
  , $RegExp = global.RegExp
  , Base    = $RegExp
  , proto   = $RegExp.prototype
  , re      = /a/g
  // "new" creates a new object
  , CORRECT_NEW = new $RegExp(re) !== re
  // RegExp allows a regex with flags as the pattern
  , ALLOWS_RE_WITH_FLAGS = function(){
    try {
      return $RegExp(re, 'i') == '/a/i';
    } catch(e){ /* empty */ }
  }();

if(require('./$.support-desc')){
  if(!CORRECT_NEW || !ALLOWS_RE_WITH_FLAGS){
    $RegExp = function RegExp(pattern, flags){
      var patternIsRegExp  = cof(pattern) == 'RegExp'
        , flagsIsUndefined = flags === undefined;
      if(!(this instanceof $RegExp) && patternIsRegExp && flagsIsUndefined)return pattern;
      return CORRECT_NEW
        ? new Base(patternIsRegExp && !flagsIsUndefined ? pattern.source : pattern, flags)
        : new Base(patternIsRegExp ? pattern.source : pattern
          , patternIsRegExp && flagsIsUndefined ? $flags.call(pattern) : flags);
    };
    $.each.call($.getNames(Base), function(key){
      key in $RegExp || $.setDesc($RegExp, key, {
        configurable: true,
        get: function(){ return Base[key]; },
        set: function(it){ Base[key] = it; }
      });
    });
    proto.constructor = $RegExp;
    $RegExp.prototype = proto;
    require('./$.redef')(global, 'RegExp', $RegExp);
  }
}

require('./$.species')($RegExp);
},{"./$":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.cof":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.cof.js","./$.flags":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.flags.js","./$.global":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js","./$.redef":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.redef.js","./$.species":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.species.js","./$.support-desc":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.support-desc.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.flags.js":[function(require,module,exports){
'use strict';
// 21.2.5.3 get RegExp.prototype.flags
var anObject = require('./$.an-object');
module.exports = function(){
  var that   = anObject(this)
    , result = '';
  if(that.global)result += 'g';
  if(that.ignoreCase)result += 'i';
  if(that.multiline)result += 'm';
  if(that.unicode)result += 'u';
  if(that.sticky)result += 'y';
  return result;
};
},{"./$.an-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.set.js":[function(require,module,exports){
// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var $          = require('./$')
  , has        = require('./$.has')
  , $def       = require('./$.def')
  , createDesc = require('./$.property-desc')
  , anObject   = require('./$.an-object')
  , isObject   = require('./$.is-object');

function set(target, propertyKey, V/*, receiver*/){
  var receiver = arguments.length < 4 ? target : arguments[3]
    , ownDesc  = $.getDesc(anObject(target), propertyKey)
    , existingDescriptor, proto;
  if(!ownDesc){
    if(isObject(proto = $.getProto(target))){
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if(has(ownDesc, 'value')){
    if(ownDesc.writable === false || !isObject(receiver))return false;
    existingDescriptor = $.getDesc(receiver, propertyKey) || createDesc(0);
    existingDescriptor.value = V;
    $.setDesc(receiver, propertyKey, existingDescriptor);
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$def($def.S, 'Reflect', {set: set});
},{"./$":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.an-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.has":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.has.js","./$.is-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.property-desc":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.property-desc.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.set-prototype-of.js":[function(require,module,exports){
// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $def     = require('./$.def')
  , setProto = require('./$.set-proto');

if(setProto)$def($def.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto){
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.set-proto":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.set-proto.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.prevent-extensions.js":[function(require,module,exports){
// 26.1.12 Reflect.preventExtensions(target)
var $def               = require('./$.def')
  , anObject           = require('./$.an-object')
  , $preventExtensions = Object.preventExtensions;

$def($def.S, 'Reflect', {
  preventExtensions: function preventExtensions(target){
    anObject(target);
    try {
      if($preventExtensions)$preventExtensions(target);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./$.an-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.own-keys.js":[function(require,module,exports){
// 26.1.11 Reflect.ownKeys(target)
var $def = require('./$.def');

$def($def.S, 'Reflect', {ownKeys: require('./$.own-keys')});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.own-keys":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.own-keys.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.own-keys.js":[function(require,module,exports){
// all object keys, includes non-enumerable and symbols
var $        = require('./$')
  , anObject = require('./$.an-object')
  , Reflect  = require('./$.global').Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it){
  var keys       = $.getNames(anObject(it))
    , getSymbols = $.getSymbols;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};
},{"./$":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.an-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.global":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.is-extensible.js":[function(require,module,exports){
// 26.1.10 Reflect.isExtensible(target)
var $def          = require('./$.def')
  , anObject      = require('./$.an-object')
  , $isExtensible = Object.isExtensible;

$def($def.S, 'Reflect', {
  isExtensible: function isExtensible(target){
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});
},{"./$.an-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.has.js":[function(require,module,exports){
// 26.1.9 Reflect.has(target, propertyKey)
var $def = require('./$.def');

$def($def.S, 'Reflect', {
  has: function has(target, propertyKey){
    return propertyKey in target;
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.get.js":[function(require,module,exports){
// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var $        = require('./$')
  , has      = require('./$.has')
  , $def     = require('./$.def')
  , isObject = require('./$.is-object')
  , anObject = require('./$.an-object');

function get(target, propertyKey/*, receiver*/){
  var receiver = arguments.length < 3 ? target : arguments[2]
    , desc, proto;
  if(anObject(target) === receiver)return target[propertyKey];
  if(desc = $.getDesc(target, propertyKey))return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if(isObject(proto = $.getProto(target)))return get(proto, propertyKey, receiver);
}

$def($def.S, 'Reflect', {get: get});
},{"./$":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.an-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.has":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.has.js","./$.is-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.get-prototype-of.js":[function(require,module,exports){
// 26.1.8 Reflect.getPrototypeOf(target)
var $def     = require('./$.def')
  , getProto = require('./$').getProto
  , anObject = require('./$.an-object');

$def($def.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target){
    return getProto(anObject(target));
  }
});
},{"./$":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.an-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js":[function(require,module,exports){
// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var $        = require('./$')
  , $def     = require('./$.def')
  , anObject = require('./$.an-object');

$def($def.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey){
    return $.getDesc(anObject(target), propertyKey);
  }
});
},{"./$":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.an-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.enumerate.js":[function(require,module,exports){
'use strict';
// 26.1.5 Reflect.enumerate(target)
var $def     = require('./$.def')
  , anObject = require('./$.an-object');
var Enumerate = function(iterated){
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = []       // keys
    , key;
  for(key in iterated)keys.push(key);
};
require('./$.iter-create')(Enumerate, 'Object', function(){
  var that = this
    , keys = that._k
    , key;
  do {
    if(that._i >= keys.length)return {value: undefined, done: true};
  } while(!((key = keys[that._i++]) in that._t));
  return {value: key, done: false};
});

$def($def.S, 'Reflect', {
  enumerate: function enumerate(target){
    return new Enumerate(target);
  }
});
},{"./$.an-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.iter-create":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-create.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.delete-property.js":[function(require,module,exports){
// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $def     = require('./$.def')
  , getDesc  = require('./$').getDesc
  , anObject = require('./$.an-object');

$def($def.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey){
    var desc = getDesc(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});
},{"./$":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.an-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.define-property.js":[function(require,module,exports){
// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var $        = require('./$')
  , $def     = require('./$.def')
  , anObject = require('./$.an-object');

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$def($def.S + $def.F * require('./$.fails')(function(){
  Reflect.defineProperty($.setDesc({}, 1, {value: 1}), 1, {value: 2});
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes){
    anObject(target);
    try {
      $.setDesc(target, propertyKey, attributes);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./$":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.an-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.fails":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.construct.js":[function(require,module,exports){
// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $         = require('./$')
  , $def      = require('./$.def')
  , aFunction = require('./$.a-function')
  , anObject  = require('./$.an-object')
  , isObject  = require('./$.is-object')
  , bind      = Function.bind || require('./$.core').Function.prototype.bind;

// MS Edge supports only 2 arguments
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
$def($def.S + $def.F * require('./$.fails')(function(){
  function F(){}
  return !(Reflect.construct(function(){}, [], F) instanceof F);
}), 'Reflect', {
  construct: function construct(Target, args /*, newTarget*/){
    aFunction(Target);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if(Target == newTarget){
      // w/o altered newTarget, optimization for 0-4 arguments
      if(args != undefined)switch(anObject(args).length){
        case 0: return new Target;
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args));
    }
    // with altered newTarget, not support built-in constructors
    var proto    = newTarget.prototype
      , instance = $.create(isObject(proto) ? proto : Object.prototype)
      , result   = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});
},{"./$":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.a-function":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.a-function.js","./$.an-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.core":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.core.js","./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.fails":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js","./$.is-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.apply.js":[function(require,module,exports){
// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $def   = require('./$.def')
  , _apply = Function.apply;

$def($def.S, 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList){
    return _apply.call(target, thisArgument, argumentsList);
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.promise.js":[function(require,module,exports){
'use strict';
var $          = require('./$')
  , LIBRARY    = require('./$.library')
  , global     = require('./$.global')
  , ctx        = require('./$.ctx')
  , classof    = require('./$.classof')
  , $def       = require('./$.def')
  , isObject   = require('./$.is-object')
  , anObject   = require('./$.an-object')
  , aFunction  = require('./$.a-function')
  , strictNew  = require('./$.strict-new')
  , forOf      = require('./$.for-of')
  , setProto   = require('./$.set-proto').set
  , same       = require('./$.same')
  , species    = require('./$.species')
  , SPECIES    = require('./$.wks')('species')
  , RECORD     = require('./$.uid')('record')
  , asap       = require('./$.microtask')
  , PROMISE    = 'Promise'
  , process    = global.process
  , isNode     = classof(process) == 'process'
  , P          = global[PROMISE]
  , Wrapper;

var testResolve = function(sub){
  var test = new P(function(){});
  if(sub)test.constructor = Object;
  return P.resolve(test) === test;
};

var useNative = function(){
  var works = false;
  function P2(x){
    var self = new P(x);
    setProto(self, P2.prototype);
    return self;
  }
  try {
    works = P && P.resolve && testResolve();
    setProto(P2, P);
    P2.prototype = $.create(P.prototype, {constructor: {value: P2}});
    // actual Firefox has broken subclass support, test that
    if(!(P2.resolve(5).then(function(){}) instanceof P2)){
      works = false;
    }
    // actual V8 bug, https://code.google.com/p/v8/issues/detail?id=4162
    if(works && require('./$.support-desc')){
      var thenableThenGotten = false;
      P.resolve($.setDesc({}, 'then', {
        get: function(){ thenableThenGotten = true; }
      }));
      works = thenableThenGotten;
    }
  } catch(e){ works = false; }
  return works;
}();

// helpers
var isPromise = function(it){
  return isObject(it) && (useNative ? classof(it) == 'Promise' : RECORD in it);
};
var sameConstructor = function(a, b){
  // library wrapper special case
  if(LIBRARY && a === P && b === Wrapper)return true;
  return same(a, b);
};
var getConstructor = function(C){
  var S = anObject(C)[SPECIES];
  return S != undefined ? S : C;
};
var isThenable = function(it){
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function(record, isReject){
  if(record.n)return;
  record.n = true;
  var chain = record.c;
  asap(function(){
    var value = record.v
      , ok    = record.s == 1
      , i     = 0;
    var run = function(react){
      var cb = ok ? react.ok : react.fail
        , ret, then;
      try {
        if(cb){
          if(!ok)record.h = true;
          ret = cb === true ? value : cb(value);
          if(ret === react.P){
            react.rej(TypeError('Promise-chain cycle'));
          } else if(then = isThenable(ret)){
            then.call(ret, react.res, react.rej);
          } else react.res(ret);
        } else react.rej(value);
      } catch(err){
        react.rej(err);
      }
    };
    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
    chain.length = 0;
    record.n = false;
    if(isReject)setTimeout(function(){
      if(isUnhandled(record.p)){
        if(isNode){
          process.emit('unhandledRejection', value, record.p);
        } else if(global.console && console.error){
          console.error('Unhandled promise rejection', value);
        }
      } record.a = undefined;
    }, 1);
  });
};
var isUnhandled = function(promise){
  var record = promise[RECORD]
    , chain  = record.a || record.c
    , i      = 0
    , react;
  if(record.h)return false;
  while(chain.length > i){
    react = chain[i++];
    if(react.fail || !isUnhandled(react.P))return false;
  } return true;
};
var $reject = function(value){
  var record = this;
  if(record.d)return;
  record.d = true;
  record = record.r || record; // unwrap
  record.v = value;
  record.s = 2;
  record.a = record.c.slice();
  notify(record, true);
};
var $resolve = function(value){
  var record = this
    , then;
  if(record.d)return;
  record.d = true;
  record = record.r || record; // unwrap
  try {
    if(then = isThenable(value)){
      asap(function(){
        var wrapper = {r: record, d: false}; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch(e){
          $reject.call(wrapper, e);
        }
      });
    } else {
      record.v = value;
      record.s = 1;
      notify(record, false);
    }
  } catch(e){
    $reject.call({r: record, d: false}, e); // wrap
  }
};

// constructor polyfill
if(!useNative){
  // 25.4.3.1 Promise(executor)
  P = function Promise(executor){
    aFunction(executor);
    var record = {
      p: strictNew(this, P, PROMISE),         // <- promise
      c: [],                                  // <- awaiting reactions
      a: undefined,                           // <- checked in isUnhandled reactions
      s: 0,                                   // <- state
      d: false,                               // <- done
      v: undefined,                           // <- value
      h: false,                               // <- handled rejection
      n: false                                // <- notify
    };
    this[RECORD] = record;
    try {
      executor(ctx($resolve, record, 1), ctx($reject, record, 1));
    } catch(err){
      $reject.call(record, err);
    }
  };
  require('./$.mix')(P.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected){
      var S = anObject(anObject(this).constructor)[SPECIES];
      var react = {
        ok:   typeof onFulfilled == 'function' ? onFulfilled : true,
        fail: typeof onRejected == 'function'  ? onRejected  : false
      };
      var promise = react.P = new (S != undefined ? S : P)(function(res, rej){
        react.res = aFunction(res);
        react.rej = aFunction(rej);
      });
      var record = this[RECORD];
      record.c.push(react);
      if(record.a)record.a.push(react);
      if(record.s)notify(record, false);
      return promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function(onRejected){
      return this.then(undefined, onRejected);
    }
  });
}

// export
$def($def.G + $def.W + $def.F * !useNative, {Promise: P});
require('./$.tag')(P, PROMISE);
species(P);
species(Wrapper = require('./$.core')[PROMISE]);

// statics
$def($def.S + $def.F * !useNative, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r){
    return new this(function(res, rej){ rej(r); });
  }
});
$def($def.S + $def.F * (!useNative || testResolve(true)), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x){
    return isPromise(x) && sameConstructor(x.constructor, this)
      ? x : new this(function(res){ res(x); });
  }
});
$def($def.S + $def.F * !(useNative && require('./$.iter-detect')(function(iter){
  P.all(iter)['catch'](function(){});
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable){
    var C      = getConstructor(this)
      , values = [];
    return new C(function(res, rej){
      forOf(iterable, false, values.push, values);
      var remaining = values.length
        , results   = Array(remaining);
      if(remaining)$.each.call(values, function(promise, index){
        C.resolve(promise).then(function(value){
          results[index] = value;
          --remaining || res(results);
        }, rej);
      });
      else res(results);
    });
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable){
    var C = getConstructor(this);
    return new C(function(res, rej){
      forOf(iterable, false, function(promise){
        C.resolve(promise).then(res, rej);
      });
    });
  }
});
},{"./$":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.a-function":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.a-function.js","./$.an-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.classof":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.classof.js","./$.core":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.core.js","./$.ctx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.ctx.js","./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.for-of":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.for-of.js","./$.global":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js","./$.is-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.iter-detect":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-detect.js","./$.library":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.library.js","./$.microtask":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.microtask.js","./$.mix":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.mix.js","./$.same":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.same.js","./$.set-proto":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.set-proto.js","./$.species":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.species.js","./$.strict-new":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.strict-new.js","./$.support-desc":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.support-desc.js","./$.tag":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.tag.js","./$.uid":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.uid.js","./$.wks":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.microtask.js":[function(require,module,exports){
var global    = require('./$.global')
  , macrotask = require('./$.task').set
  , Observer  = global.MutationObserver || global.WebKitMutationObserver
  , process   = global.process
  , isNode    = require('./$.cof')(process) == 'process'
  , head, last, notify;

var flush = function(){
  var parent, domain;
  if(isNode && (parent = process.domain)){
    process.domain = null;
    parent.exit();
  }
  while(head){
    domain = head.domain;
    if(domain)domain.enter();
    head.fn.call(); // <- currently we use it only for Promise - try / catch not required
    if(domain)domain.exit();
    head = head.next;
  } last = undefined;
  if(parent)parent.enter();
}

// Node.js
if(isNode){
  notify = function(){
    process.nextTick(flush);
  };
// browsers with MutationObserver
} else if(Observer){
  var toggle = 1
    , node   = document.createTextNode('');
  new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
  notify = function(){
    node.data = toggle = -toggle;
  };
// for other environments - macrotask based on:
// - setImmediate
// - MessageChannel
// - window.postMessag
// - onreadystatechange
// - setTimeout
} else {
  notify = function(){
    // strange IE + webpack dev server bug - use .call(global)
    macrotask.call(global, flush);
  };
}

module.exports = function asap(fn){
  var task = {fn: fn, next: undefined, domain: isNode && process.domain};
  if(last)last.next = task;
  if(!head){
    head = task;
    notify();
  } last = task;
};
},{"./$.cof":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.cof.js","./$.global":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js","./$.task":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.task.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.task.js":[function(require,module,exports){
'use strict';
var ctx                = require('./$.ctx')
  , invoke             = require('./$.invoke')
  , html               = require('./$.html')
  , cel                = require('./$.dom-create')
  , global             = require('./$.global')
  , process            = global.process
  , setTask            = global.setImmediate
  , clearTask          = global.clearImmediate
  , MessageChannel     = global.MessageChannel
  , counter            = 0
  , queue              = {}
  , ONREADYSTATECHANGE = 'onreadystatechange'
  , defer, channel, port;
var run = function(){
  var id = +this;
  if(queue.hasOwnProperty(id)){
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listner = function(event){
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if(!setTask || !clearTask){
  setTask = function setImmediate(fn){
    var args = [], i = 1;
    while(arguments.length > i)args.push(arguments[i++]);
    queue[++counter] = function(){
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id){
    delete queue[id];
  };
  // Node.js 0.8-
  if(require('./$.cof')(process) == 'process'){
    defer = function(id){
      process.nextTick(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if(MessageChannel){
    channel = new MessageChannel;
    port    = channel.port2;
    channel.port1.onmessage = listner;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScript){
    defer = function(id){
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listner, false);
  // IE8-
  } else if(ONREADYSTATECHANGE in cel('script')){
    defer = function(id){
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function(id){
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set:   setTask,
  clear: clearTask
};
},{"./$.cof":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.cof.js","./$.ctx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.ctx.js","./$.dom-create":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.dom-create.js","./$.global":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js","./$.html":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.html.js","./$.invoke":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.invoke.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.to-string.js":[function(require,module,exports){
'use strict';
// 19.1.3.6 Object.prototype.toString()
var classof = require('./$.classof')
  , test    = {};
test[require('./$.wks')('toStringTag')] = 'z';
if(test + '' != '[object z]'){
  require('./$.redef')(Object.prototype, 'toString', function toString(){
    return '[object ' + classof(this) + ']';
  }, true);
}
},{"./$.classof":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.classof.js","./$.redef":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.redef.js","./$.wks":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.set-prototype-of.js":[function(require,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $def = require('./$.def');
$def($def.S, 'Object', {setPrototypeOf: require('./$.set-proto').set});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.set-proto":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.set-proto.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.set-proto.js":[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var getDesc  = require('./$').getDesc
  , isObject = require('./$.is-object')
  , anObject = require('./$.an-object');
var check = function(O, proto){
  anObject(O);
  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} // eslint-disable-line
    ? function(buggy, set){
        try {
          set = require('./$.ctx')(Function.call, getDesc(Object.prototype, '__proto__').set, 2);
          set({}, []);
        } catch(e){ buggy = true; }
        return function setPrototypeOf(O, proto){
          check(O, proto);
          if(buggy)O.__proto__ = proto;
          else set(O, proto);
          return O;
        };
      }()
    : undefined),
  check: check
};
},{"./$":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.an-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.ctx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.ctx.js","./$.is-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.seal.js":[function(require,module,exports){
// 19.1.2.17 Object.seal(O)
var isObject = require('./$.is-object');

require('./$.object-sap')('seal', function($seal){
  return function seal(it){
    return $seal && isObject(it) ? $seal(it) : it;
  };
});
},{"./$.is-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.object-sap":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-sap.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.prevent-extensions.js":[function(require,module,exports){
// 19.1.2.15 Object.preventExtensions(O)
var isObject = require('./$.is-object');

require('./$.object-sap')('preventExtensions', function($preventExtensions){
  return function preventExtensions(it){
    return $preventExtensions && isObject(it) ? $preventExtensions(it) : it;
  };
});
},{"./$.is-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.object-sap":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-sap.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.keys.js":[function(require,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = require('./$.to-object');

require('./$.object-sap')('keys', function($keys){
  return function keys(it){
    return $keys(toObject(it));
  };
});
},{"./$.object-sap":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-sap.js","./$.to-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-object.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.is.js":[function(require,module,exports){
// 19.1.3.10 Object.is(value1, value2)
var $def = require('./$.def');
$def($def.S, 'Object', {
  is: require('./$.same')
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.same":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.same.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.same.js":[function(require,module,exports){
module.exports = Object.is || function is(x, y){
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};
},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.is-sealed.js":[function(require,module,exports){
// 19.1.2.13 Object.isSealed(O)
var isObject = require('./$.is-object');

require('./$.object-sap')('isSealed', function($isSealed){
  return function isSealed(it){
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});
},{"./$.is-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.object-sap":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-sap.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.is-frozen.js":[function(require,module,exports){
// 19.1.2.12 Object.isFrozen(O)
var isObject = require('./$.is-object');

require('./$.object-sap')('isFrozen', function($isFrozen){
  return function isFrozen(it){
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});
},{"./$.is-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.object-sap":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-sap.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.is-extensible.js":[function(require,module,exports){
// 19.1.2.11 Object.isExtensible(O)
var isObject = require('./$.is-object');

require('./$.object-sap')('isExtensible', function($isExtensible){
  return function isExtensible(it){
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});
},{"./$.is-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.object-sap":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-sap.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.get-prototype-of.js":[function(require,module,exports){
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = require('./$.to-object');

require('./$.object-sap')('getPrototypeOf', function($getPrototypeOf){
  return function getPrototypeOf(it){
    return $getPrototypeOf(toObject(it));
  };
});
},{"./$.object-sap":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-sap.js","./$.to-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-object.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.get-own-property-names.js":[function(require,module,exports){
// 19.1.2.7 Object.getOwnPropertyNames(O)
require('./$.object-sap')('getOwnPropertyNames', function(){
  return require('./$.get-names').get;
});
},{"./$.get-names":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.get-names.js","./$.object-sap":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-sap.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.get-names.js":[function(require,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toString  = {}.toString
  , toIObject = require('./$.to-iobject')
  , getNames  = require('./$').getNames;

var windowNames = typeof window == 'object' && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function(it){
  try {
    return getNames(it);
  } catch(e){
    return windowNames.slice();
  }
};

module.exports.get = function getOwnPropertyNames(it){
  if(windowNames && toString.call(it) == '[object Window]')return getWindowNames(it);
  return getNames(toIObject(it));
};
},{"./$":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.to-iobject":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-iobject.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.get-own-property-descriptor.js":[function(require,module,exports){
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = require('./$.to-iobject');

require('./$.object-sap')('getOwnPropertyDescriptor', function($getOwnPropertyDescriptor){
  return function getOwnPropertyDescriptor(it, key){
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});
},{"./$.object-sap":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-sap.js","./$.to-iobject":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-iobject.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.freeze.js":[function(require,module,exports){
// 19.1.2.5 Object.freeze(O)
var isObject = require('./$.is-object');

require('./$.object-sap')('freeze', function($freeze){
  return function freeze(it){
    return $freeze && isObject(it) ? $freeze(it) : it;
  };
});
},{"./$.is-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.object-sap":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-sap.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.object-sap.js":[function(require,module,exports){
// most Object methods by ES6 should accept primitives
module.exports = function(KEY, exec){
  var $def = require('./$.def')
    , fn   = (require('./$.core').Object || {})[KEY] || Object[KEY]
    , exp  = {};
  exp[KEY] = exec(fn);
  $def($def.S + $def.F * require('./$.fails')(function(){ fn(1); }), 'Object', exp);
};
},{"./$.core":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.core.js","./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.fails":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.object.assign.js":[function(require,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $def = require('./$.def');

$def($def.S + $def.F, 'Object', {assign: require('./$.assign')});
},{"./$.assign":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.assign.js","./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.assign.js":[function(require,module,exports){
// 19.1.2.1 Object.assign(target, source, ...)
var toObject = require('./$.to-object')
  , IObject  = require('./$.iobject')
  , enumKeys = require('./$.enum-keys');

module.exports = require('./$.fails')(function(){
  return Symbol() in Object.assign({}); // Object.assign available and Symbol is native
}) ? function assign(target, source){   // eslint-disable-line no-unused-vars
  var T = toObject(target)
    , l = arguments.length
    , i = 1;
  while(l > i){
    var S      = IObject(arguments[i++])
      , keys   = enumKeys(S)
      , length = keys.length
      , j      = 0
      , key;
    while(length > j)T[key = keys[j++]] = S[key];
  }
  return T;
} : Object.assign;
},{"./$.enum-keys":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.enum-keys.js","./$.fails":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js","./$.iobject":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iobject.js","./$.to-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-object.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.enum-keys.js":[function(require,module,exports){
// all enumerable object keys, includes symbols
var $ = require('./$');
module.exports = function(it){
  var keys       = $.getKeys(it)
    , getSymbols = $.getSymbols;
  if(getSymbols){
    var symbols = getSymbols(it)
      , isEnum  = $.isEnum
      , i       = 0
      , key;
    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))keys.push(key);
  }
  return keys;
};
},{"./$":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.parse-int.js":[function(require,module,exports){
// 20.1.2.13 Number.parseInt(string, radix)
var $def = require('./$.def');

$def($def.S, 'Number', {parseInt: parseInt});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.parse-float.js":[function(require,module,exports){
// 20.1.2.12 Number.parseFloat(string)
var $def = require('./$.def');

$def($def.S, 'Number', {parseFloat: parseFloat});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.min-safe-integer.js":[function(require,module,exports){
// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $def = require('./$.def');

$def($def.S, 'Number', {MIN_SAFE_INTEGER: -0x1fffffffffffff});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.max-safe-integer.js":[function(require,module,exports){
// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $def = require('./$.def');

$def($def.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.is-safe-integer.js":[function(require,module,exports){
// 20.1.2.5 Number.isSafeInteger(number)
var $def      = require('./$.def')
  , isInteger = require('./$.is-integer')
  , abs       = Math.abs;

$def($def.S, 'Number', {
  isSafeInteger: function isSafeInteger(number){
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.is-integer":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-integer.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.is-nan.js":[function(require,module,exports){
// 20.1.2.4 Number.isNaN(number)
var $def = require('./$.def');

$def($def.S, 'Number', {
  isNaN: function isNaN(number){
    return number != number;
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.is-integer.js":[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var $def = require('./$.def');

$def($def.S, 'Number', {isInteger: require('./$.is-integer')});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.is-integer":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-integer.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-integer.js":[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var isObject = require('./$.is-object')
  , floor    = Math.floor;
module.exports = function isInteger(it){
  return !isObject(it) && isFinite(it) && floor(it) === it;
};
},{"./$.is-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.is-finite.js":[function(require,module,exports){
// 20.1.2.2 Number.isFinite(number)
var $def      = require('./$.def')
  , _isFinite = require('./$.global').isFinite;

$def($def.S, 'Number', {
  isFinite: function isFinite(it){
    return typeof it == 'number' && _isFinite(it);
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.global":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.epsilon.js":[function(require,module,exports){
// 20.1.2.1 Number.EPSILON
var $def = require('./$.def');

$def($def.S, 'Number', {EPSILON: Math.pow(2, -52)});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.number.constructor.js":[function(require,module,exports){
'use strict';
var $          = require('./$')
  , global     = require('./$.global')
  , has        = require('./$.has')
  , cof        = require('./$.cof')
  , isObject   = require('./$.is-object')
  , fails      = require('./$.fails')
  , NUMBER     = 'Number'
  , $Number    = global[NUMBER]
  , Base       = $Number
  , proto      = $Number.prototype
  // Opera ~12 has broken Object#toString
  , BROKEN_COF = cof($.create(proto)) == NUMBER;
var toPrimitive = function(it){
  var fn, val;
  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
  if(typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  throw TypeError("Can't convert object to number");
};
var toNumber = function(it){
  if(isObject(it))it = toPrimitive(it);
  if(typeof it == 'string' && it.length > 2 && it.charCodeAt(0) == 48){
    var binary = false;
    switch(it.charCodeAt(1)){
      case 66 : case 98  : binary = true;
      case 79 : case 111 : return parseInt(it.slice(2), binary ? 2 : 8);
    }
  } return +it;
};
if(!($Number('0o1') && $Number('0b1'))){
  $Number = function Number(it){
    var that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function(){ proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? new Base(toNumber(it)) : toNumber(it);
  };
  $.each.call(require('./$.support-desc') ? $.getNames(Base) : (
      // ES3:
      'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
      // ES6 (in case, if modules with ES6 Number statics required before):
      'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
      'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
    ).split(','), function(key){
      if(has(Base, key) && !has($Number, key)){
        $.setDesc($Number, key, $.getDesc(Base, key));
      }
    }
  );
  $Number.prototype = proto;
  proto.constructor = $Number;
  require('./$.redef')(global, NUMBER, $Number);
}
},{"./$":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.cof":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.cof.js","./$.fails":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js","./$.global":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js","./$.has":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.has.js","./$.is-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.redef":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.redef.js","./$.support-desc":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.support-desc.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.trunc.js":[function(require,module,exports){
// 20.2.2.34 Math.trunc(x)
var $def = require('./$.def');

$def($def.S, 'Math', {
  trunc: function trunc(it){
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.tanh.js":[function(require,module,exports){
// 20.2.2.33 Math.tanh(x)
var $def  = require('./$.def')
  , expm1 = require('./$.expm1')
  , exp   = Math.exp;

$def($def.S, 'Math', {
  tanh: function tanh(x){
    var a = expm1(x = +x)
      , b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.expm1":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.expm1.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.sinh.js":[function(require,module,exports){
// 20.2.2.30 Math.sinh(x)
var $def  = require('./$.def')
  , expm1 = require('./$.expm1')
  , exp   = Math.exp;

$def($def.S, 'Math', {
  sinh: function sinh(x){
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.expm1":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.expm1.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.sign.js":[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
var $def = require('./$.def');

$def($def.S, 'Math', {sign: require('./$.sign')});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.sign":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.sign.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.log2.js":[function(require,module,exports){
// 20.2.2.22 Math.log2(x)
var $def = require('./$.def');

$def($def.S, 'Math', {
  log2: function log2(x){
    return Math.log(x) / Math.LN2;
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.log1p.js":[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
var $def = require('./$.def');

$def($def.S, 'Math', {log1p: require('./$.log1p')});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.log1p":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.log1p.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.log10.js":[function(require,module,exports){
// 20.2.2.21 Math.log10(x)
var $def = require('./$.def');

$def($def.S, 'Math', {
  log10: function log10(x){
    return Math.log(x) / Math.LN10;
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.imul.js":[function(require,module,exports){
// 20.2.2.18 Math.imul(x, y)
var $def = require('./$.def');

// WebKit fails with big numbers
$def($def.S + $def.F * require('./$.fails')(function(){
  return Math.imul(0xffffffff, 5) != -5;
}), 'Math', {
  imul: function imul(x, y){
    var UINT16 = 0xffff
      , xn = +x
      , yn = +y
      , xl = UINT16 & xn
      , yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.fails":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.hypot.js":[function(require,module,exports){
// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $def = require('./$.def')
  , abs  = Math.abs;

$def($def.S, 'Math', {
  hypot: function hypot(value1, value2){ // eslint-disable-line no-unused-vars
    var sum  = 0
      , i    = 0
      , len  = arguments.length
      , larg = 0
      , arg, div;
    while(i < len){
      arg = abs(arguments[i++]);
      if(larg < arg){
        div  = larg / arg;
        sum  = sum * div * div + 1;
        larg = arg;
      } else if(arg > 0){
        div  = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.fround.js":[function(require,module,exports){
// 20.2.2.16 Math.fround(x)
var $def  = require('./$.def')
  , sign  = require('./$.sign')
  , pow   = Math.pow
  , EPSILON   = pow(2, -52)
  , EPSILON32 = pow(2, -23)
  , MAX32     = pow(2, 127) * (2 - EPSILON32)
  , MIN32     = pow(2, -126);

var roundTiesToEven = function(n){
  return n + 1 / EPSILON - 1 / EPSILON;
};


$def($def.S, 'Math', {
  fround: function fround(x){
    var $abs  = Math.abs(x)
      , $sign = sign(x)
      , a, result;
    if($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
    a = (1 + EPSILON32 / EPSILON) * $abs;
    result = a - (a - $abs);
    if(result > MAX32 || result != result)return $sign * Infinity;
    return $sign * result;
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.sign":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.sign.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.expm1.js":[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $def = require('./$.def');

$def($def.S, 'Math', {expm1: require('./$.expm1')});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.expm1":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.expm1.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.expm1.js":[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
module.exports = Math.expm1 || function expm1(x){
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
};
},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.cosh.js":[function(require,module,exports){
// 20.2.2.12 Math.cosh(x)
var $def = require('./$.def')
  , exp  = Math.exp;

$def($def.S, 'Math', {
  cosh: function cosh(x){
    return (exp(x = +x) + exp(-x)) / 2;
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.clz32.js":[function(require,module,exports){
// 20.2.2.11 Math.clz32(x)
var $def = require('./$.def');

$def($def.S, 'Math', {
  clz32: function clz32(x){
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.cbrt.js":[function(require,module,exports){
// 20.2.2.9 Math.cbrt(x)
var $def = require('./$.def')
  , sign = require('./$.sign');

$def($def.S, 'Math', {
  cbrt: function cbrt(x){
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.sign":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.sign.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.sign.js":[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x){
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};
},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.atanh.js":[function(require,module,exports){
// 20.2.2.7 Math.atanh(x)
var $def = require('./$.def');

$def($def.S, 'Math', {
  atanh: function atanh(x){
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.asinh.js":[function(require,module,exports){
// 20.2.2.5 Math.asinh(x)
var $def = require('./$.def');

function asinh(x){
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

$def($def.S, 'Math', {asinh: asinh});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.math.acosh.js":[function(require,module,exports){
// 20.2.2.3 Math.acosh(x)
var $def   = require('./$.def')
  , log1p  = require('./$.log1p')
  , sqrt   = Math.sqrt
  , $acosh = Math.acosh;

// V8 bug https://code.google.com/p/v8/issues/detail?id=3509 
$def($def.S + $def.F * !($acosh && Math.floor($acosh(Number.MAX_VALUE)) == 710), 'Math', {
  acosh: function acosh(x){
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.log1p":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.log1p.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.log1p.js":[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x){
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};
},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.map.js":[function(require,module,exports){
'use strict';
var strong = require('./$.collection-strong');

// 23.1 Map Objects
require('./$.collection')('Map', function(get){
  return function Map(){ return get(this, arguments[0]); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key){
    var entry = strong.getEntry(this, key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value){
    return strong.def(this, key === 0 ? 0 : key, value);
  }
}, strong, true);
},{"./$.collection":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.collection.js","./$.collection-strong":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.collection-strong.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.collection.js":[function(require,module,exports){
'use strict';
var global     = require('./$.global')
  , $def       = require('./$.def')
  , forOf      = require('./$.for-of')
  , strictNew  = require('./$.strict-new');

module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
  var Base  = global[NAME]
    , C     = Base
    , ADDER = IS_MAP ? 'set' : 'add'
    , proto = C && C.prototype
    , O     = {};
  var fixMethod = function(KEY){
    var fn = proto[KEY];
    require('./$.redef')(proto, KEY,
      KEY == 'delete' ? function(a){ return fn.call(this, a === 0 ? 0 : a); }
      : KEY == 'has' ? function has(a){ return fn.call(this, a === 0 ? 0 : a); }
      : KEY == 'get' ? function get(a){ return fn.call(this, a === 0 ? 0 : a); }
      : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }
      : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !require('./$.fails')(function(){
    new C().entries().next();
  }))){
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    require('./$.mix')(C.prototype, methods);
  } else {
    var inst  = new C
      , chain = inst[ADDER](IS_WEAK ? {} : -0, 1)
      , buggyZero;
    // wrap for init collections from iterable
    if(!require('./$.iter-detect')(function(iter){ new C(iter); })){ // eslint-disable-line no-new
      C = wrapper(function(target, iterable){
        strictNew(target, C, NAME);
        var that = new Base;
        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    IS_WEAK || inst.forEach(function(val, key){
      buggyZero = 1 / key === -Infinity;
    });
    // fix converting -0 key to +0
    if(buggyZero){
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    // + fix .add & .set for chaining
    if(buggyZero || chain !== inst)fixMethod(ADDER);
    // weak collections should not contains .clear method
    if(IS_WEAK && proto.clear)delete proto.clear;
  }

  require('./$.tag')(C, NAME);

  O[NAME] = C;
  $def($def.G + $def.W + $def.F * (C != Base), O);

  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

  return C;
};
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.fails":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js","./$.for-of":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.for-of.js","./$.global":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js","./$.iter-detect":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-detect.js","./$.mix":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.mix.js","./$.redef":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.redef.js","./$.strict-new":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.strict-new.js","./$.tag":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.tag.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.collection-strong.js":[function(require,module,exports){
'use strict';
var $            = require('./$')
  , hide         = require('./$.hide')
  , ctx          = require('./$.ctx')
  , species      = require('./$.species')
  , strictNew    = require('./$.strict-new')
  , defined      = require('./$.defined')
  , forOf        = require('./$.for-of')
  , step         = require('./$.iter-step')
  , ID           = require('./$.uid')('id')
  , $has         = require('./$.has')
  , isObject     = require('./$.is-object')
  , isExtensible = Object.isExtensible || isObject
  , SUPPORT_DESC = require('./$.support-desc')
  , SIZE         = SUPPORT_DESC ? '_s' : 'size'
  , id           = 0;

var fastKey = function(it, create){
  // return primitive with prefix
  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if(!$has(it, ID)){
    // can't set id to frozen object
    if(!isExtensible(it))return 'F';
    // not necessary to add id
    if(!create)return 'E';
    // add missing object id
    hide(it, ID, ++id);
  // return object id with prefix
  } return 'O' + it[ID];
};

var getEntry = function(that, key){
  // fast case
  var index = fastKey(key), entry;
  if(index !== 'F')return that._i[index];
  // frozen object case
  for(entry = that._f; entry; entry = entry.n){
    if(entry.k == key)return entry;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      strictNew(that, C, NAME);
      that._i = $.create(null); // index
      that._f = undefined;      // first entry
      that._l = undefined;      // last entry
      that[SIZE] = 0;           // size
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    require('./$.mix')(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear(){
        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
          entry.r = true;
          if(entry.p)entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function(key){
        var that  = this
          , entry = getEntry(that, key);
        if(entry){
          var next = entry.n
            , prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if(prev)prev.n = next;
          if(next)next.p = prev;
          if(that._f == entry)that._f = next;
          if(that._l == entry)that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /*, that = undefined */){
        var f = ctx(callbackfn, arguments[1], 3)
          , entry;
        while(entry = entry ? entry.n : this._f){
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while(entry && entry.r)entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key){
        return !!getEntry(this, key);
      }
    });
    if(SUPPORT_DESC)$.setDesc(C.prototype, 'size', {
      get: function(){
        return defined(this[SIZE]);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var entry = getEntry(that, key)
      , prev, index;
    // change existing entry
    if(entry){
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if(!that._f)that._f = entry;
      if(prev)prev.n = entry;
      that[SIZE]++;
      // add to index
      if(index !== 'F')that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function(C, NAME, IS_MAP){
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    require('./$.iter-define')(C, NAME, function(iterated, kind){
      this._t = iterated;  // target
      this._k = kind;      // kind
      this._l = undefined; // previous
    }, function(){
      var that  = this
        , kind  = that._k
        , entry = that._l;
      // revert to the last existing entry
      while(entry && entry.r)entry = entry.p;
      // get next entry
      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if(kind == 'keys'  )return step(0, entry.k);
      if(kind == 'values')return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    species(C);
    species(require('./$.core')[NAME]); // for wrapper
  }
};
},{"./$":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.core":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.core.js","./$.ctx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.ctx.js","./$.defined":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.defined.js","./$.for-of":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.for-of.js","./$.has":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.has.js","./$.hide":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.hide.js","./$.is-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.iter-define":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-define.js","./$.iter-step":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-step.js","./$.mix":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.mix.js","./$.species":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.species.js","./$.strict-new":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.strict-new.js","./$.support-desc":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.support-desc.js","./$.uid":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.uid.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.strict-new.js":[function(require,module,exports){
module.exports = function(it, Constructor, name){
  if(!(it instanceof Constructor))throw TypeError(name + ": use the 'new' operator!");
  return it;
};
},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.mix.js":[function(require,module,exports){
var $redef = require('./$.redef');
module.exports = function(target, src){
  for(var key in src)$redef(target, key, src[key]);
  return target;
};
},{"./$.redef":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.redef.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.for-of.js":[function(require,module,exports){
var ctx         = require('./$.ctx')
  , call        = require('./$.iter-call')
  , isArrayIter = require('./$.is-array-iter')
  , anObject    = require('./$.an-object')
  , toLength    = require('./$.to-length')
  , getIterFn   = require('./core.get-iterator-method');
module.exports = function(iterable, entries, fn, that){
  var iterFn = getIterFn(iterable)
    , f      = ctx(fn, that, entries ? 2 : 1)
    , index  = 0
    , length, step, iterator;
  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
    entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
    call(iterator, f, step.value, entries);
  }
};
},{"./$.an-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.ctx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.ctx.js","./$.is-array-iter":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-array-iter.js","./$.iter-call":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-call.js","./$.to-length":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-length.js","./core.get-iterator-method":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/core.get-iterator-method.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.function.name.js":[function(require,module,exports){
var setDesc    = require('./$').setDesc
  , createDesc = require('./$.property-desc')
  , has        = require('./$.has')
  , FProto     = Function.prototype
  , nameRE     = /^\s*function ([^ (]*)/
  , NAME       = 'name';
// 19.2.4.2 name
NAME in FProto || require('./$.support-desc') && setDesc(FProto, NAME, {
  configurable: true,
  get: function(){
    var match = ('' + this).match(nameRE)
      , name  = match ? match[1] : '';
    has(this, NAME) || setDesc(this, NAME, createDesc(5, name));
    return name;
  }
});
},{"./$":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.has":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.has.js","./$.property-desc":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.property-desc.js","./$.support-desc":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.support-desc.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.function.has-instance.js":[function(require,module,exports){
'use strict';
var $             = require('./$')
  , isObject      = require('./$.is-object')
  , HAS_INSTANCE  = require('./$.wks')('hasInstance')
  , FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if(!(HAS_INSTANCE in FunctionProto))$.setDesc(FunctionProto, HAS_INSTANCE, {value: function(O){
  if(typeof this != 'function' || !isObject(O))return false;
  if(!isObject(this.prototype))return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while(O = $.getProto(O))if(this.prototype === O)return true;
  return false;
}});
},{"./$":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.is-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.wks":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.species.js":[function(require,module,exports){
require('./$.species')(Array);
},{"./$.species":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.species.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.species.js":[function(require,module,exports){
'use strict';
var $       = require('./$')
  , SPECIES = require('./$.wks')('species');
module.exports = function(C){
  if(require('./$.support-desc') && !(SPECIES in C))$.setDesc(C, SPECIES, {
    configurable: true,
    get: function(){ return this; }
  });
};
},{"./$":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.support-desc":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.support-desc.js","./$.wks":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.of.js":[function(require,module,exports){
'use strict';
var $def = require('./$.def');

// WebKit Array.of isn't generic
$def($def.S + $def.F * require('./$.fails')(function(){
  function F(){}
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */){
    var index  = 0
      , length = arguments.length
      , result = new (typeof this == 'function' ? this : Array)(length);
    while(length > index)result[index] = arguments[index++];
    result.length = length;
    return result;
  }
});
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.fails":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.iterator.js":[function(require,module,exports){
'use strict';
var setUnscope = require('./$.unscope')
  , step       = require('./$.iter-step')
  , Iterators  = require('./$.iterators')
  , toIObject  = require('./$.to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
require('./$.iter-define')(Array, 'Array', function(iterated, kind){
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , kind  = this._k
    , index = this._i++;
  if(!O || index >= O.length){
    this._t = undefined;
    return step(1);
  }
  if(kind == 'keys'  )return step(0, index);
  if(kind == 'values')return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

setUnscope('keys');
setUnscope('values');
setUnscope('entries');
},{"./$.iter-define":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-define.js","./$.iter-step":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-step.js","./$.iterators":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iterators.js","./$.to-iobject":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-iobject.js","./$.unscope":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.unscope.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-step.js":[function(require,module,exports){
module.exports = function(done, value){
  return {value: value, done: !!done};
};
},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-define.js":[function(require,module,exports){
'use strict';
var LIBRARY         = require('./$.library')
  , $def            = require('./$.def')
  , $redef          = require('./$.redef')
  , hide            = require('./$.hide')
  , has             = require('./$.has')
  , SYMBOL_ITERATOR = require('./$.wks')('iterator')
  , Iterators       = require('./$.iterators')
  , BUGGY           = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
  , FF_ITERATOR     = '@@iterator'
  , KEYS            = 'keys'
  , VALUES          = 'values';
var returnThis = function(){ return this; };
module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCE){
  require('./$.iter-create')(Constructor, NAME, next);
  var createMethod = function(kind){
    switch(kind){
      case KEYS: return function keys(){ return new Constructor(this, kind); };
      case VALUES: return function values(){ return new Constructor(this, kind); };
    } return function entries(){ return new Constructor(this, kind); };
  };
  var TAG      = NAME + ' Iterator'
    , proto    = Base.prototype
    , _native  = proto[SYMBOL_ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
    , _default = _native || createMethod(DEFAULT)
    , methods, key;
  // Fix native
  if(_native){
    var IteratorPrototype = require('./$').getProto(_default.call(new Base));
    // Set @@toStringTag to native iterators
    require('./$.tag')(IteratorPrototype, TAG, true);
    // FF fix
    if(!LIBRARY && has(proto, FF_ITERATOR))hide(IteratorPrototype, SYMBOL_ITERATOR, returnThis);
  }
  // Define iterator
  if(!LIBRARY || FORCE)hide(proto, SYMBOL_ITERATOR, _default);
  // Plug for library
  Iterators[NAME] = _default;
  Iterators[TAG]  = returnThis;
  if(DEFAULT){
    methods = {
      keys:    IS_SET            ? _default : createMethod(KEYS),
      values:  DEFAULT == VALUES ? _default : createMethod(VALUES),
      entries: DEFAULT != VALUES ? _default : createMethod('entries')
    };
    if(FORCE)for(key in methods){
      if(!(key in proto))$redef(proto, key, methods[key]);
    } else $def($def.P + $def.F * BUGGY, NAME, methods);
  }
};
},{"./$":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.has":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.has.js","./$.hide":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.hide.js","./$.iter-create":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-create.js","./$.iterators":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iterators.js","./$.library":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.library.js","./$.redef":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.redef.js","./$.tag":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.tag.js","./$.wks":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.library.js":[function(require,module,exports){
module.exports = false;
},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-create.js":[function(require,module,exports){
'use strict';
var $ = require('./$')
  , IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./$.hide')(IteratorPrototype, require('./$.wks')('iterator'), function(){ return this; });

module.exports = function(Constructor, NAME, next){
  Constructor.prototype = $.create(IteratorPrototype, {next: require('./$.property-desc')(1,next)});
  require('./$.tag')(Constructor, NAME + ' Iterator');
};
},{"./$":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.hide":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.hide.js","./$.property-desc":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.property-desc.js","./$.tag":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.tag.js","./$.wks":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.tag.js":[function(require,module,exports){
var has  = require('./$.has')
  , hide = require('./$.hide')
  , TAG  = require('./$.wks')('toStringTag');

module.exports = function(it, tag, stat){
  if(it && !has(it = stat ? it : it.prototype, TAG))hide(it, TAG, tag);
};
},{"./$.has":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.has.js","./$.hide":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.hide.js","./$.wks":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.from.js":[function(require,module,exports){
'use strict';
var ctx         = require('./$.ctx')
  , $def        = require('./$.def')
  , toObject    = require('./$.to-object')
  , call        = require('./$.iter-call')
  , isArrayIter = require('./$.is-array-iter')
  , toLength    = require('./$.to-length')
  , getIterFn   = require('./core.get-iterator-method');
$def($def.S + $def.F * !require('./$.iter-detect')(function(iter){ Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
    var O       = toObject(arrayLike)
      , C       = typeof this == 'function' ? this : Array
      , mapfn   = arguments[1]
      , mapping = mapfn !== undefined
      , index   = 0
      , iterFn  = getIterFn(O)
      , length, result, step, iterator;
    if(mapping)mapfn = ctx(mapfn, arguments[2], 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
        result[index] = mapping ? call(iterator, mapfn, [step.value, index], true) : step.value;
      }
    } else {
      for(result = new C(length = toLength(O.length)); length > index; index++){
        result[index] = mapping ? mapfn(O[index], index) : O[index];
      }
    }
    result.length = index;
    return result;
  }
});
},{"./$.ctx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.ctx.js","./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.is-array-iter":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-array-iter.js","./$.iter-call":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-call.js","./$.iter-detect":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-detect.js","./$.to-length":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-length.js","./$.to-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-object.js","./core.get-iterator-method":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/core.get-iterator-method.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/core.get-iterator-method.js":[function(require,module,exports){
var classof   = require('./$.classof')
  , ITERATOR  = require('./$.wks')('iterator')
  , Iterators = require('./$.iterators');
module.exports = require('./$.core').getIteratorMethod = function(it){
  if(it != undefined)return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
};
},{"./$.classof":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.classof.js","./$.core":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.core.js","./$.iterators":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iterators.js","./$.wks":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.classof.js":[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./$.cof')
  , TAG = require('./$.wks')('toStringTag')
  // ES3 wrong here
  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

module.exports = function(it){
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = (O = Object(it))[TAG]) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};
},{"./$.cof":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.cof.js","./$.wks":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-detect.js":[function(require,module,exports){
var SYMBOL_ITERATOR = require('./$.wks')('iterator')
  , SAFE_CLOSING    = false;
try {
  var riter = [7][SYMBOL_ITERATOR]();
  riter['return'] = function(){ SAFE_CLOSING = true; };
  Array.from(riter, function(){ throw 2; });
} catch(e){ /* empty */ }
module.exports = function(exec){
  if(!SAFE_CLOSING)return false;
  var safe = false;
  try {
    var arr  = [7]
      , iter = arr[SYMBOL_ITERATOR]();
    iter.next = function(){ safe = true; };
    arr[SYMBOL_ITERATOR] = function(){ return iter; };
    exec(arr);
  } catch(e){ /* empty */ }
  return safe;
};
},{"./$.wks":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iter-call.js":[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./$.an-object');
module.exports = function(iterator, fn, value, entries){
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch(e){
    var ret = iterator['return'];
    if(ret !== undefined)anObject(ret.call(iterator));
    throw e;
  }
};
},{"./$.an-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-array-iter.js":[function(require,module,exports){
// check on default Array iterator
var Iterators = require('./$.iterators')
  , ITERATOR  = require('./$.wks')('iterator');
module.exports = function(it){
  return (Iterators.Array || Array.prototype[ITERATOR]) === it;
};
},{"./$.iterators":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iterators.js","./$.wks":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iterators.js":[function(require,module,exports){
module.exports = {};
},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.find.js":[function(require,module,exports){
'use strict';
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var KEY    = 'find'
  , $def   = require('./$.def')
  , forced = true
  , $find  = require('./$.array-methods')(5);
// Shouldn't skip holes
if(KEY in [])Array(1)[KEY](function(){ forced = false; });
$def($def.P + $def.F * forced, 'Array', {
  find: function find(callbackfn/*, that = undefined */){
    return $find(this, callbackfn, arguments[1]);
  }
});
require('./$.unscope')(KEY);
},{"./$.array-methods":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.array-methods.js","./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.unscope":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.unscope.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.find-index.js":[function(require,module,exports){
'use strict';
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var KEY    = 'findIndex'
  , $def   = require('./$.def')
  , forced = true
  , $find  = require('./$.array-methods')(6);
// Shouldn't skip holes
if(KEY in [])Array(1)[KEY](function(){ forced = false; });
$def($def.P + $def.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn/*, that = undefined */){
    return $find(this, callbackfn, arguments[1]);
  }
});
require('./$.unscope')(KEY);
},{"./$.array-methods":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.array-methods.js","./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.unscope":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.unscope.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.fill.js":[function(require,module,exports){
'use strict';
var $def     = require('./$.def')
  , toObject = require('./$.to-object')
  , toIndex  = require('./$.to-index')
  , toLength = require('./$.to-length');
$def($def.P, 'Array', {
  // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
  fill: function fill(value /*, start = 0, end = @length */){
    var O      = toObject(this, true)
      , length = toLength(O.length)
      , index  = toIndex(arguments[1], length)
      , end    = arguments[2]
      , endPos = end === undefined ? length : toIndex(end, length);
    while(endPos > index)O[index++] = value;
    return O;
  }
});
require('./$.unscope')('fill');
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.to-index":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-index.js","./$.to-length":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-length.js","./$.to-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-object.js","./$.unscope":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.unscope.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es6.array.copy-within.js":[function(require,module,exports){
'use strict';
var $def     = require('./$.def')
  , toObject = require('./$.to-object')
  , toIndex  = require('./$.to-index')
  , toLength = require('./$.to-length');
$def($def.P, 'Array', {
  // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
  copyWithin: function copyWithin(target/* = 0 */, start /* = 0, end = @length */){
    var O     = toObject(this)
      , len   = toLength(O.length)
      , to    = toIndex(target, len)
      , from  = toIndex(start, len)
      , end   = arguments[2]
      , fin   = end === undefined ? len : toIndex(end, len)
      , count = Math.min(fin - from, len - to)
      , inc   = 1;
    if(from < to && to < from + count){
      inc  = -1;
      from = from + count - 1;
      to   = to   + count - 1;
    }
    while(count-- > 0){
      if(from in O)O[to] = O[from];
      else delete O[to];
      to   += inc;
      from += inc;
    } return O;
  }
});
require('./$.unscope')('copyWithin');
},{"./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.to-index":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-index.js","./$.to-length":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-length.js","./$.to-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-object.js","./$.unscope":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.unscope.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.unscope.js":[function(require,module,exports){
// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = require('./$.wks')('unscopables');
if(!(UNSCOPABLES in []))require('./$.hide')(Array.prototype, UNSCOPABLES, {});
module.exports = function(key){
  [][UNSCOPABLES][key] = true;
};
},{"./$.hide":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.hide.js","./$.wks":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.wks.js":[function(require,module,exports){
var store  = require('./$.shared')('wks')
  , Symbol = require('./$.global').Symbol;
module.exports = function(name){
  return store[name] || (store[name] =
    Symbol && Symbol[name] || (Symbol || require('./$.uid'))('Symbol.' + name));
};
},{"./$.global":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js","./$.shared":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.shared.js","./$.uid":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.uid.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.shared.js":[function(require,module,exports){
var global = require('./$.global')
  , SHARED = '__core-js_shared__'
  , store  = global[SHARED] || (global[SHARED] = {});
module.exports = function(key){
  return store[key] || (store[key] = {});
};
},{"./$.global":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/es5.js":[function(require,module,exports){
'use strict';
var $                = require('./$')
  , SUPPORT_DESC     = require('./$.support-desc')
  , createDesc       = require('./$.property-desc')
  , html             = require('./$.html')
  , cel              = require('./$.dom-create')
  , has              = require('./$.has')
  , cof              = require('./$.cof')
  , $def             = require('./$.def')
  , invoke           = require('./$.invoke')
  , arrayMethod      = require('./$.array-methods')
  , IE_PROTO         = require('./$.uid')('__proto__')
  , isObject         = require('./$.is-object')
  , anObject         = require('./$.an-object')
  , aFunction        = require('./$.a-function')
  , toObject         = require('./$.to-object')
  , toIObject        = require('./$.to-iobject')
  , toInteger        = require('./$.to-integer')
  , toIndex          = require('./$.to-index')
  , toLength         = require('./$.to-length')
  , IObject          = require('./$.iobject')
  , fails            = require('./$.fails')
  , ObjectProto      = Object.prototype
  , A                = []
  , _slice           = A.slice
  , _join            = A.join
  , defineProperty   = $.setDesc
  , getOwnDescriptor = $.getDesc
  , defineProperties = $.setDescs
  , $indexOf         = require('./$.array-includes')(false)
  , factories        = {}
  , IE8_DOM_DEFINE;

if(!SUPPORT_DESC){
  IE8_DOM_DEFINE = !fails(function(){
    return defineProperty(cel('div'), 'a', {get: function(){ return 7; }}).a != 7;
  });
  $.setDesc = function(O, P, Attributes){
    if(IE8_DOM_DEFINE)try {
      return defineProperty(O, P, Attributes);
    } catch(e){ /* empty */ }
    if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
    if('value' in Attributes)anObject(O)[P] = Attributes.value;
    return O;
  };
  $.getDesc = function(O, P){
    if(IE8_DOM_DEFINE)try {
      return getOwnDescriptor(O, P);
    } catch(e){ /* empty */ }
    if(has(O, P))return createDesc(!ObjectProto.propertyIsEnumerable.call(O, P), O[P]);
  };
  $.setDescs = defineProperties = function(O, Properties){
    anObject(O);
    var keys   = $.getKeys(Properties)
      , length = keys.length
      , i = 0
      , P;
    while(length > i)$.setDesc(O, P = keys[i++], Properties[P]);
    return O;
  };
}
$def($def.S + $def.F * !SUPPORT_DESC, 'Object', {
  // 19.1.2.6 / 15.2.3.3 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $.getDesc,
  // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
  defineProperty: $.setDesc,
  // 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
  defineProperties: defineProperties
});

  // IE 8- don't enum bug keys
var keys1 = ('constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,' +
            'toLocaleString,toString,valueOf').split(',')
  // Additional keys for getOwnPropertyNames
  , keys2 = keys1.concat('length', 'prototype')
  , keysLen1 = keys1.length;

// Create object with `null` prototype: use iframe Object with cleared prototype
var createDict = function(){
  // Thrash, waste and sodomy: IE GC bug
  var iframe = cel('iframe')
    , i      = keysLen1
    , gt     = '>'
    , iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write('<script>document.F=Object</script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while(i--)delete createDict.prototype[keys1[i]];
  return createDict();
};
var createGetKeys = function(names, length){
  return function(object){
    var O      = toIObject(object)
      , i      = 0
      , result = []
      , key;
    for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
    // Don't enum bug & hidden keys
    while(length > i)if(has(O, key = names[i++])){
      ~$indexOf(result, key) || result.push(key);
    }
    return result;
  };
};
var Empty = function(){};
$def($def.S, 'Object', {
  // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
  getPrototypeOf: $.getProto = $.getProto || function(O){
    O = toObject(O);
    if(has(O, IE_PROTO))return O[IE_PROTO];
    if(typeof O.constructor == 'function' && O instanceof O.constructor){
      return O.constructor.prototype;
    } return O instanceof Object ? ObjectProto : null;
  },
  // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $.getNames = $.getNames || createGetKeys(keys2, keys2.length, true),
  // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
  create: $.create = $.create || function(O, /*?*/Properties){
    var result;
    if(O !== null){
      Empty.prototype = anObject(O);
      result = new Empty();
      Empty.prototype = null;
      // add "__proto__" for Object.getPrototypeOf shim
      result[IE_PROTO] = O;
    } else result = createDict();
    return Properties === undefined ? result : defineProperties(result, Properties);
  },
  // 19.1.2.14 / 15.2.3.14 Object.keys(O)
  keys: $.getKeys = $.getKeys || createGetKeys(keys1, keysLen1, false)
});

var construct = function(F, len, args){
  if(!(len in factories)){
    for(var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  }
  return factories[len](F, args);
};

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
$def($def.P, 'Function', {
  bind: function bind(that /*, args... */){
    var fn       = aFunction(this)
      , partArgs = _slice.call(arguments, 1);
    var bound = function(/* args... */){
      var args = partArgs.concat(_slice.call(arguments));
      return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
    };
    if(isObject(fn.prototype))bound.prototype = fn.prototype;
    return bound;
  }
});

// fallback for not array-like ES3 strings and DOM objects
var buggySlice = fails(function(){
  if(html)_slice.call(html);
});

$def($def.P + $def.F * buggySlice, 'Array', {
  slice: function(begin, end){
    var len   = toLength(this.length)
      , klass = cof(this);
    end = end === undefined ? len : end;
    if(klass == 'Array')return _slice.call(this, begin, end);
    var start  = toIndex(begin, len)
      , upTo   = toIndex(end, len)
      , size   = toLength(upTo - start)
      , cloned = Array(size)
      , i      = 0;
    for(; i < size; i++)cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});
$def($def.P + $def.F * (IObject != Object), 'Array', {
  join: function(){
    return _join.apply(IObject(this), arguments);
  }
});

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
$def($def.S, 'Array', {isArray: function(arg){ return cof(arg) == 'Array'; }});

var createArrayReduce = function(isRight){
  return function(callbackfn, memo){
    aFunction(callbackfn);
    var O      = IObject(this)
      , length = toLength(O.length)
      , index  = isRight ? length - 1 : 0
      , i      = isRight ? -1 : 1;
    if(arguments.length < 2)for(;;){
      if(index in O){
        memo = O[index];
        index += i;
        break;
      }
      index += i;
      if(isRight ? index < 0 : length <= index){
        throw TypeError('Reduce of empty array with no initial value');
      }
    }
    for(;isRight ? index >= 0 : length > index; index += i)if(index in O){
      memo = callbackfn(memo, O[index], index, this);
    }
    return memo;
  };
};
var methodize = function($fn){
  return function(arg1/*, arg2 = undefined */){
    return $fn(this, arg1, arguments[1]);
  };
};
$def($def.P, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: $.each = $.each || methodize(arrayMethod(0)),
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: methodize(arrayMethod(1)),
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: methodize(arrayMethod(2)),
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: methodize(arrayMethod(3)),
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: methodize(arrayMethod(4)),
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: createArrayReduce(false),
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: createArrayReduce(true),
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: methodize($indexOf),
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function(el, fromIndex /* = @[*-1] */){
    var O      = toIObject(this)
      , length = toLength(O.length)
      , index  = length - 1;
    if(arguments.length > 1)index = Math.min(index, toInteger(fromIndex));
    if(index < 0)index = toLength(length + index);
    for(;index >= 0; index--)if(index in O)if(O[index] === el)return index;
    return -1;
  }
});

// 20.3.3.1 / 15.9.4.4 Date.now()
$def($def.S, 'Date', {now: function(){ return +new Date; }});

var lz = function(num){
  return num > 9 ? num : '0' + num;
};

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
// PhantomJS and old webkit had a broken Date implementation.
var date       = new Date(-5e13 - 1)
  , brokenDate = !(date.toISOString && date.toISOString() == '0385-07-25T07:06:39.999Z'
      && fails(function(){ new Date(NaN).toISOString(); }));
$def($def.P + $def.F * brokenDate, 'Date', {
  toISOString: function toISOString(){
    if(!isFinite(this))throw RangeError('Invalid time value');
    var d = this
      , y = d.getUTCFullYear()
      , m = d.getUTCMilliseconds()
      , s = y < 0 ? '-' : y > 9999 ? '+' : '';
    return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
      '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
      'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
      ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
  }
});
},{"./$":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.a-function":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.a-function.js","./$.an-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js","./$.array-includes":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.array-includes.js","./$.array-methods":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.array-methods.js","./$.cof":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.cof.js","./$.def":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.dom-create":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.dom-create.js","./$.fails":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js","./$.has":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.has.js","./$.html":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.html.js","./$.invoke":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.invoke.js","./$.iobject":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iobject.js","./$.is-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js","./$.property-desc":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.property-desc.js","./$.support-desc":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.support-desc.js","./$.to-index":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-index.js","./$.to-integer":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-integer.js","./$.to-iobject":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-iobject.js","./$.to-length":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-length.js","./$.to-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-object.js","./$.uid":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.uid.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.invoke.js":[function(require,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function(fn, args, that){
  var un = that === undefined;
  switch(args.length){
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return              fn.apply(that, args);
};
},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.html.js":[function(require,module,exports){
module.exports = require('./$.global').document && document.documentElement;
},{"./$.global":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.has.js":[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function(it, key){
  return hasOwnProperty.call(it, key);
};
},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.dom-create.js":[function(require,module,exports){
var isObject = require('./$.is-object')
  , document = require('./$.global').document
  // in old IE typeof document.createElement is 'object'
  , is = isObject(document) && isObject(document.createElement);
module.exports = function(it){
  return is ? document.createElement(it) : {};
};
},{"./$.global":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js","./$.is-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.def.js":[function(require,module,exports){
var global     = require('./$.global')
  , core       = require('./$.core')
  , hide       = require('./$.hide')
  , $redef     = require('./$.redef')
  , PROTOTYPE  = 'prototype';
var ctx = function(fn, that){
  return function(){
    return fn.apply(that, arguments);
  };
};
var $def = function(type, name, source){
  var key, own, out, exp
    , isGlobal = type & $def.G
    , isProto  = type & $def.P
    , target   = isGlobal ? global : type & $def.S
        ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]
    , exports  = isGlobal ? core : core[name] || (core[name] = {});
  if(isGlobal)source = name;
  for(key in source){
    // contains in native
    own = !(type & $def.F) && target && key in target;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    if(type & $def.B && own)exp = ctx(out, global);
    else exp = isProto && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if(target && !own)$redef(target, key, out);
    // export
    if(exports[key] != out)hide(exports, key, exp);
    if(isProto)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
  }
};
global.core = core;
// type bitmap
$def.F = 1;  // forced
$def.G = 2;  // global
$def.S = 4;  // static
$def.P = 8;  // proto
$def.B = 16; // bind
$def.W = 32; // wrap
module.exports = $def;
},{"./$.core":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.core.js","./$.global":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js","./$.hide":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.hide.js","./$.redef":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.redef.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.redef.js":[function(require,module,exports){
// add fake Function#toString
// for correct work wrapped methods / constructors with methods like LoDash isNative
var global    = require('./$.global')
  , hide      = require('./$.hide')
  , SRC       = require('./$.uid')('src')
  , TO_STRING = 'toString'
  , $toString = Function[TO_STRING]
  , TPL       = ('' + $toString).split(TO_STRING);

require('./$.core').inspectSource = function(it){
  return $toString.call(it);
};

(module.exports = function(O, key, val, safe){
  if(typeof val == 'function'){
    hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
    if(!('name' in val))val.name = key;
  }
  if(O === global){
    O[key] = val;
  } else {
    if(!safe)delete O[key];
    hide(O, key, val);
  }
})(Function.prototype, TO_STRING, function toString(){
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});
},{"./$.core":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.core.js","./$.global":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js","./$.hide":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.hide.js","./$.uid":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.uid.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.uid.js":[function(require,module,exports){
var id = 0
  , px = Math.random();
module.exports = function(key){
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};
},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.hide.js":[function(require,module,exports){
var $          = require('./$')
  , createDesc = require('./$.property-desc');
module.exports = require('./$.support-desc') ? function(object, key, value){
  return $.setDesc(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};
},{"./$":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.property-desc":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.property-desc.js","./$.support-desc":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.support-desc.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.support-desc.js":[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./$.fails')(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./$.fails":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.fails.js":[function(require,module,exports){
module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};
},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.property-desc.js":[function(require,module,exports){
module.exports = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};
},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.js":[function(require,module,exports){
var $Object = Object;
module.exports = {
  create:     $Object.create,
  getProto:   $Object.getPrototypeOf,
  isEnum:     {}.propertyIsEnumerable,
  getDesc:    $Object.getOwnPropertyDescriptor,
  setDesc:    $Object.defineProperty,
  setDescs:   $Object.defineProperties,
  getKeys:    $Object.keys,
  getNames:   $Object.getOwnPropertyNames,
  getSymbols: $Object.getOwnPropertySymbols,
  each:       [].forEach
};
},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.global.js":[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var UNDEFINED = 'undefined';
var global = module.exports = typeof window != UNDEFINED && window.Math == Math
  ? window : typeof self != UNDEFINED && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.array-methods.js":[function(require,module,exports){
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx      = require('./$.ctx')
  , IObject  = require('./$.iobject')
  , toObject = require('./$.to-object')
  , toLength = require('./$.to-length');
module.exports = function(TYPE){
  var IS_MAP        = TYPE == 1
    , IS_FILTER     = TYPE == 2
    , IS_SOME       = TYPE == 3
    , IS_EVERY      = TYPE == 4
    , IS_FIND_INDEX = TYPE == 6
    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX;
  return function($this, callbackfn, that){
    var O      = toObject($this)
      , self   = IObject(O)
      , f      = ctx(callbackfn, that, 3)
      , length = toLength(self.length)
      , index  = 0
      , result = IS_MAP ? Array(length) : IS_FILTER ? [] : undefined
      , val, res;
    for(;length > index; index++)if(NO_HOLES || index in self){
      val = self[index];
      res = f(val, index, O);
      if(TYPE){
        if(IS_MAP)result[index] = res;            // map
        else if(res)switch(TYPE){
          case 3: return true;                    // some
          case 5: return val;                     // find
          case 6: return index;                   // findIndex
          case 2: result.push(val);               // filter
        } else if(IS_EVERY)return false;          // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};
},{"./$.ctx":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.ctx.js","./$.iobject":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iobject.js","./$.to-length":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-length.js","./$.to-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-object.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-object.js":[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./$.defined');
module.exports = function(it){
  return Object(defined(it));
};
},{"./$.defined":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.defined.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.ctx.js":[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./$.a-function');
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  } return function(/* ...args */){
      return fn.apply(that, arguments);
    };
};
},{"./$.a-function":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.a-function.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.array-includes.js":[function(require,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./$.to-iobject')
  , toLength  = require('./$.to-length')
  , toIndex   = require('./$.to-index');
module.exports = function(IS_INCLUDES){
  return function($this, el, fromIndex){
    var O      = toIObject($this)
      , length = toLength(O.length)
      , index  = toIndex(fromIndex, length)
      , value;
    // Array#includes uses SameValueZero equality algorithm
    if(IS_INCLUDES && el != el)while(length > index){
      value = O[index++];
      if(value != value)return true;
    // Array#toIndex ignores holes, Array#includes - not
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
      if(O[index] === el)return IS_INCLUDES || index;
    } return !IS_INCLUDES && -1;
  };
};
},{"./$.to-index":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-index.js","./$.to-iobject":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-iobject.js","./$.to-length":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-length.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-length.js":[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./$.to-integer')
  , min       = Math.min;
module.exports = function(it){
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};
},{"./$.to-integer":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-integer.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-iobject.js":[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./$.iobject')
  , defined = require('./$.defined');
module.exports = function(it){
  return IObject(defined(it));
};
},{"./$.defined":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.defined.js","./$.iobject":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iobject.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.iobject.js":[function(require,module,exports){
// indexed object, fallback for non-array-like ES3 strings
var cof = require('./$.cof');
module.exports = 0 in Object('z') ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};
},{"./$.cof":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.cof.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.cof.js":[function(require,module,exports){
var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};
},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.defined.js":[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};
},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-index.js":[function(require,module,exports){
var toInteger = require('./$.to-integer')
  , max       = Math.max
  , min       = Math.min;
module.exports = function(index, length){
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};
},{"./$.to-integer":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-integer.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.to-integer.js":[function(require,module,exports){
// 7.1.4 ToInteger
var ceil  = Math.ceil
  , floor = Math.floor;
module.exports = function(it){
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};
},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.an-object.js":[function(require,module,exports){
var isObject = require('./$.is-object');
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};
},{"./$.is-object":"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js"}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.is-object.js":[function(require,module,exports){
// http://jsperf.com/core-js-isobject
module.exports = function(it){
  return it !== null && (typeof it == 'object' || typeof it == 'function');
};
},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.a-function.js":[function(require,module,exports){
module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};
},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/node_modules/babelify/node_modules/babel-core/node_modules/core-js/modules/$.core.js":[function(require,module,exports){
var core = module.exports = {};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
},{}],"/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/ChangeEventHandler.js":[function(require,module,exports){
/**
 * Helper class for generating a synthetic change event when an element's
 * contents changes between focus and blur.
 * @param {Element} element
 * @param {Function} callback
 * @constructor
 */
"use strict";

var ChangeEventHandler = module.exports = function (element, callback) {
  /**
   * @type {Element}
   * @private
   */
  this.element_ = element;

  /**
   * Callback to call if the element's value changes between focus and blur.
   * @type {function}
   * @private
   */
  this.callback_ = callback;

  /**
   * Value of the element when it was focused.
   * @type {string}
   * @private
   */
  this.initialValue_ = '';
};

ChangeEventHandler.prototype.onFocus = function () {
  this.initialValue_ = this.element_.textContent;
};

ChangeEventHandler.prototype.onBlur = function () {
  if (this.element_.textContent !== this.initialValue_) {
    this.callback_();
  }
};

/**
 * Attaches a synthetic change event to the element, by calling the callback
 * if the element's value changes between focus and blur.
 * @param {Element} element
 * @param {Function} callback
 */
ChangeEventHandler.addChangeEventHandler = function (element, callback) {
  var handler = new ChangeEventHandler(element, callback);
  element.addEventListener("focus", handler.onFocus.bind(handler));
  element.addEventListener("blur", handler.onBlur.bind(handler));
};

},{}]},{},["/Users/brian/code/backupcdomcp/code-dot-org/apps/build/js/applab/main.js"])
//# sourceMappingURL=data:application/json;base64,
