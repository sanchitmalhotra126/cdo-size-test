"da":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Velkommen til din første times kodning! Lad os dykke direkte ind i din
          første smagsprøve af programmeringen.
      2:
        image: notes/hoc1_2.jpg
        text: Vi vil bruge Blockly, et visuel programmeringssprog hvor du trækker
          og slipper blokke for at skrive kode.
      3:
        image: notes/hoc1_3.jpg
        text: Det meste kode er skrevet, men Blockly er visuel. Hver blok svarer til
          en "rigtig" kodelinje.
      4:
        image: notes/hoc1_4.jpg
        text: Du vil lære grundprincipperne for computer videnskab, begreber der anvendes
          overalt fra at lave apps til at kontrollere Mars Rover.
      5:
        image: notes/hoc1_5.jpg
        text: Et program er et sæt af instruktioner som din computer skal følge.
      6:
        image: notes/hoc1_6.jpg
        text: Målet for dit første program er at få en Angry Bird gennem en labyrint
          og ramme en grøn gris.
      7:
        image: notes/hoc1_7.jpg
        text: Venstre side er labyrinten, hvor programmet køres. Instruktionerne for
          hver gåde er under labyrinten.
      8:
        image: notes/hoc1_8.jpg
        text: Den midterste værktøjskasse har kommandoerne for Angry Bird'en. Du skal
          bruge disse til at bygge din kode.
      9:
        image: notes/hoc1_9.jpg
        text: Til højre er dit arbejdsområde, hvor du kan trække blokke fra værktøjskasse
          til at bygge dit program. Hvis du vil slette en blok, skal du trække den
          til papirkurven i hjørnet.
      10:
        image: notes/hoc1_10.jpg
        text: Hver blok er en instruktion. Hvis du trækker en "gå videre" blok til
          dit arbejdsområde og trykker på "Kør Program", bevæger Angry Bird'en sig
          en plads frem i labyrinten.
      11:
        image: notes/hoc1_11.jpg
        text: For at gøre mere end én handling, kan du trække mange blokke til dit
          arbejdsområde og lægge dem sammen. Angry Bird'en vil udføre kommandoerne
          fra top til bund.
      12:
        image: notes/hoc1_12.jpg
        text: Hvis du kører et program og ønsker at ændre det og prøve igen, skal
          du trykke på knappen "Nulstil".
      13:
        image: notes/hoc1_13.jpg
        text: Lad os så ordne de grise!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Hej, jeg hedder JR! Hvert racerbilsteam har brug for computereksperter
          for at vinde. De analyserer data fra bilen for at få den til at køre hurtigere.
      2:
        image: notes/stage5_2.jpg
        text: I disse gåder, vil du være en kunstner, der tegner en linje bag dem
          overalt de går.
      3:
        image: notes/stage5_3.jpg
        text: Denne blok siger "Flyt fremad med 100 pixel." Pixels er bare virkelig
          små prikker på din skærm.
      4:
        image: notes/stage5_4.jpg
        text: Denne blok siger "Drej 90 grader til højre." Dette vil dreje din kunstner,
          på samme måde som "drej" blokken i labyrint gåderne.
      5:
        image: notes/stage5_5.jpg
        text: Klik på pilen i en af disse blokke for at ændre hvor meget kunstneren
          bevæger sig fremad eller vender. Leg med det for at blive fortrolig med
          disse nye blokke.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Hej, jeg er Paola! I disse gåder er du en landmand, der skal få hendes
          område helt fladt, så der kan plantes afgrøder.
      2:
        image: notes/stage9_2.jpg
        text: Du skal hjælpe hende med at fjerne alle bunker af snavs og udfylde alle
          hullerne.
      3:
        image: notes/stage9_3.jpg
        text: De nye blokke fjerner 1 skovlfuld snavs fra en bunke og fylder i 1 skovlfuld
          snavs i et hul.
      4:
        image: notes/stage9_4.jpg
        text: Bunkerne og hullerne er forskellige størrelser, så du skal fortælle
          landmanden hvor mange skovlfulde der skal bruges.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Hej, jeg er Katie! En af de mest spændende ting ved datalogi er, at
          computerprogrammer kan være interaktive.
      2:
        image: notes/flappy02.jpg
        text: Hver gang der klikkes, trykkes eller skriver på en computer eller telefon,
          indtræffer en hændelse. og der er noget kode som bestemmer hvad der skal
          ske når hændelsen indtræffer.
      3:
        image: notes/flappy03.jpg
        text: 'For eksempel, du kunne have en HÆNDELSESHÅNDTERING, der siger "når
          der klikkes på musen, spil en lyd" '
      4:
        image: notes/flappy04.jpg
        text: Har du nogensinde hørt om spillet FlappyBird? Ved hjælp af hændelseshandlere,
          vil vi lære at programmere vores egen version af FlappyBird!
      5:
        image: notes/flappy05.jpg
        text: Den kode, du kommer til at skrive indebærer at trække og slippe blokke,
          der repræsenterer kommandoer til computeren. Under kølerhjelmen, er hver
          af disse blokke repræsenteret af reel kode.
      6:
        image: notes/flappy06.jpg
        text: 'Hvis du tager et kig på arbejdsområdet, der er nogle grønne blokke,
          der er udfyldt for dig - disse er "hændelseshåndteringer" '
      7:
        image: notes/flappy07.jpg
        text: Hvis du vil få fuglen til at FLAPPE når du klikker med musen, kan du
          gøre det ved at knytte "flap"-blokken til den passende hændelseshåndtering.
          Så vil fuglen flappe hver gang du klikker med musen i dit spil.
      8:
        image: notes/flappy08.jpg
        text: I hvert puslespil af denne aktivitet vil vi introducere nye typer af
          hændelser som grønne blokke på arbejdsområdet, og du kan beslutte passende
          blokke for at tilføje svar på disse begivenheder.
      9:
        image: notes/flappy09.jpg
        text: Når du ser en fald-ned pil som denne betyder det, at du kan ændre indstillinger
          - f.eks. hvilken lyd der afspilles når flappy rammer jorden.
      10:
        image: notes/flappy10.jpg
        text: I det sidste puslespil vil du være i stand til at skabe dit eget spil
          og dele det med dine venner. God fornøjelse!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Hej, jeg er Mark! Lad os lære om løkker. Ved hjælp af løkker kan du
          fortælle en computer at den skal gentage et sæt af handlinger, igen og igen,
          tusinder eller endda milliarder af gange.
      2:
        image: notes/hoc2_2.jpg
        text: I denne gåde ønsker vi at få fuglen til at flytte fremad 5 skridt for
          at komme til grisen.
      3:
        image: notes/hoc2_3.jpg
        text: Vi kan bruge den nye "gentag" blok til at hjælpe os.
      4:
        image: notes/hoc2_4.jpg
        text: I stedet for at trække 5 "Flyt fremad" blokke ud...
      5:
        image: notes/hoc2_5.jpg
        text: Kan vi sætte "Flyt fremad" blokken ind i "gentag" blokken og skrive
          et tal i blokken for at fortælle hvor mange gange det skal gentages.
      6:
        image: notes/hoc2_6.jpg
        text: 'Og dette er vigtigt: du kan sætte mere end én kommando ind i en "gentag"
          blok.'
      7:
        image: notes/hoc2_7.jpg
        text: God fornøjelse med at bruge din nye "gentag" blok!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: Hej, jeg er Chris. Før jeg kom til Miami Heat, gik jeg på Georgia Tech
          og studerede Computer Videnskab. Lad os prøve vores nye blok, "gentag indtil"
          blokken.
      2:
        image: notes/hoc3_2.jpg
        text: Hvad hvis vi ikke  vidste hvor langt Angry Bird'en var nødt til at flytte
          for at komme til grisen?
      3:
        image: notes/hoc3_3.jpg
        text: Hvis vi sætter en "Flyt fremad" blok inden i "Gentag indtil"-blokken,
          så vil Angry Bird'en bevæge sig fremad indtil den når til grisen (eller
          styrter ind i en væg).
      4:
        image: notes/hoc3_4.jpg
        text: 'Og dette er vigtigt: ligesom før, vi kan sætte flere blokke inden i
          "gentag indtil" blokken, og de vil alle blive gentaget.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Hej, jeg hedder Bill! Lad os lære et ny grundlæggende begreb: "hvis"-sætninger.
          Dette er, hvordan computere træffer beslutninger.'
      2:
        image: notes/hoc4_2.jpg
        text: Du bruger "hvis"-sætninger selv hver dag. Før du går udenfor hver morgen,
          siger du, HVIS det regner udenfor, så har jeg brug for at tage min jakke
          på.
      3:
        image: notes/hoc4_3.jpg
        text: Vi kan bede zombien kontrollere, om der er en sti til venstre, og hvis
          han finder en sti til venstre, kan vi få ham til at dreje i retningen.
      4:
        image: notes/hoc4_4.jpg
        text: For at skrive koden til dette, lad os trække vores "hvis" blok ud og
          sætte en "venstresving" blok inde i den.
      5:
        image: notes/hoc4_5.jpg
        text: Nu, hvis vi sætter en "gå frem" blok over det og en "gentag" blok omkring
          alt, så hver gang zombien bevæger sig, vil han kontrollere, om der er en
          vej til venstre og dreje. Kommandoen "Gentag" er kritisk, for at kontrollere
          om der skal drejes for hvert skridt.
      6:
        image: notes/hoc4_6.jpg
        text: Hvis-sætninger er rigtigt vigtige i computer videnskab. Et af de første
          programmer jeg skrev var et kryds og bolle spil, og der var en hvis-sætning,
          der sagde, at hvis den anden person er ved at vinde, bloker den plads, der
          lader dem vinde.
      7:
        image: notes/hoc4_7.jpg
        text: God fornøjelse med at bruge "hvis" blokken!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Hej, mit navn er Saloni. Jeg bruger computer videnskab til at løse problemer
          inden for sundhed og medicin. Lad os lære om "hvis ellers" blokken. Den
          ligner "hvis"-blokken, men den har en ekstra del i slutningen, der siger
          "ellers".
      2:
        image: notes/hoc5_2.jpg
        text: Hvis jeg sætte en "gå fremad" blok på stedet hvor der står "udfør" og
          en "Drej til venstre" blok hvor der står "ellers" betyder at zombie vil
          vælge mellem 2 muligheder. Hvis der er en vej fremad, vil zombien vil bevæge
          sig fremad, og ellers (hvis der ikke er en vej fremad), vil zombien dreje
          til venstre.
      3:
        image: notes/hoc5_3.jpg
        text: Ligesom "hvis"-blokken, kan vi sætte "hvis ellers" blokken ind i "gentag"
          blokke, således at zombien bliver ved med at bevæge sig fremad og "hvis
          ellers" blokken vil holde øje med om der er et sted at dreje.
      4:
        image: notes/hoc5_4.jpg
        text: Nå, flyt så de zombier hen hvor de hører hjemme!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: An if-else statement is a decision between two things. Let's see how
          we can use an if-else statement with our buddy Scrat the squirrel.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: This block looks the same as the "if" block, but there's an extra part
          at the bottom that says "else". If I put a "move forward" block where it
          says "do" and a "turn left" block where it says "else", that means Scrat
          the squirrel will move forward if there's a path ahead. If there's not a
          path ahead, Scrat will turn left.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: It's making a decision and doing one of the two actions based on that
          decision. And just like "if" blocks, you can put "if-else" blocks inside
          "repeat" blocks.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Now let's help Scrat the squirrel get that acorn!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Hej, jeg er Brina, en ingeniør på Instagram. En funktion er visse linjer
          kode, som du vil bruge igen og igen, så i stedet for at skrive koden ud
          hver gang, kan du bare bruge én blok.
      2:
        image: notes/stage13_2.jpg
        text: Vi skal lære at definere funktioner. Funktions definitioner har en stjerne
          i hjørnet. Funktionens navn er skrevet på den øverste linje.
      3:
        image: notes/stage13_3.jpg
        text: De blokke, der er inde i definitionen fortæller os, hvad den gør. Så
          denne funktions definition hedder "fyld 5" og den består af en "gentag"
          blok og en "fyld" blok.
      4:
        image: notes/stage13_4.jpg
        text: Definitionen hæfter sig på arbejdsområdet, men vores landmand vil ikke
          køre funktionen indtil vi trækker vores "fyld 5" funktionsblok ud fra funktioneskategorien.
      5:
        image: notes/stage13_5.jpg
        text: 'Lad os putte "fun" tilbage ind i "FUNktion!" '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Hej, Jeg er Makinde! Lad os lære om "imens" blokken. '
      2:
        image: notes/stage9_6.jpg
        text: '"While blokken" vil udføre hvad end du placerer indeni den, så længe
          udtrykket i toppen er sandt.'
      3:
        image: notes/stage9_7.jpg
        text: For eksempel, hvis landmanden står på en bunke, vil hun fortsætte med
          at fjerne 1 skovlfuld, så længe der er en bunke under hende.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Hej, jeg er Trina, og jeg arbejder for Pixar. Jeg har arbejdet på en
          masse film, blandt andet Shrek.
      2:
        image: notes/stage11_2.jpg
        text: Dette er vores nye "tæller" loop. Det vil udføre handlinger igen og
          igen og du kan ændre handlinger lidt hver gang.
      3:
        image: notes/stage11_3.jpg
        text: I dette eksempel siger vores "tæller" løkke "tæl fra 50 til 90 med 10"
          og inde i det, har vi vores "tegn en firkant" blok. Træk "tæller" blokket
          fra afsnittet "Variabler" til "længde" stedet.
      4:
        image: notes/stage11_4.jpg
        text: Dette betyder, at vores kunstner vil tegne en firkant, der har 50 pixel
          længde sider, så vil tilføje 10 til det og tegne en firkant med 60 pixel
          længde sider. Så vil det blive ved med at tilføje 10 og tegne firkanter,
          indtil det når 90. Så vil vi have kvadrater af 50, 60, 70, 80 og 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Hej! Jeg hedder Janete, og jeg er ingeniør hos Zynga.
      2:
        image: notes/stage15_2.jpg
        text: Hvad hvis vi ønsker at tegne en masse trekanter og give dem forskellige
          størrelser?
      3:
        image: notes/stage15_3.jpg
        text: Vi kunne skrive al den kode i hånden eller vi kan bruge en funktion
          med parametre.
      4:
        image: notes/stage15_4.jpg
        text: For at gøre dette, skal du klikke på den blå stjerne på "tegn en trekant"
          funktions-definition. Træk derefter "indtast navn" til "input" blokken.
      5:
        image: notes/stage15_5.jpg
        text: Hvis du så skriver "længde" på det sted, hvor der står "x" og trykker
          "Enter" skal du oprette en længde input til din funktion.
      6:
        image: notes/stage15_6.jpg
        text: Klik på stjernen. Nu du ønsker at klikke på kategorien variabler og
          trække "længde" blokken til "Flyt fremad" blok af din funktions-definition.
          Og træk den gamle nummer blok væk.
      7:
        image: notes/stage15_7.jpg
        text: For at bruge din funktion med parametre, skal du klikke på kategorien
          funktioner og trække din "tegn en trekant med længde" funktion ud.
      8:
        image: notes/stage15_8.jpg
        text: Nu kan du bruge matematik blokken til at indtaste forskellige tal for
          at tegne trekanter med forskellige størrelser.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Tillykke! Med den sidste opgave du har løst, skrev du kode, der kan
          fortælle enhver robot hvordan den kan finde vej gennem en labyrint eller
          tunnel af enhver længde, uanset om det er en zombie, en fugl, en Mars robot
          eller endda en selvkørende bil.
      2:
        image: notes/hoc6_2.jpg
        text: De grundlæggende begreber, du har brugt er kernen i ethvert program
          eller app du nogensinde kommer til at prøve. Vi lærte om gentag løkker,
          gentag indtil sætninger, hvis sætninger, og hvis-ellers sætninger.
      3:
        image: notes/hoc6_3.jpg
        text: Hvis du kunne lide din første times kodning, så besøg code.org for at
          fortsætte din uddannelse i datalogi! Når du har fuldført vores 20 timers
          kursus, har du lært grundlæggende programmering, og kan begynde at lære
          at skrive apps til din telefon, robot instruktioner, spil, eller noget helt
          andet.
      4:
        image: notes/hoc6_4.jpg
        text: Teknologien ændrer alt hvad vi gør og det er lige meget om du er ung
          eller gammel. Programmering er sjovt, kreativt, og alle kan lære det!
    20_wrapup:
      1:
        image: notes/bird.png
        text: Vis noter kommer snart!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Hi, my name is Lyndsey. I model, act, and write my own apps. Let's use
          code to join Anna and Elsa as they explore the magic and beauty of ice.
      2:
        image: notes/frozen1_2.jpg
        text: You'll create snowflakes and patterns as you ice skate and make a winter
          wonderland that you can then share with your friends.
      3:
        image: notes/frozen1_3.jpg
        text: In the next hour, you're going to learn the basics of how to code. Traditional
          programming is usually in text, but we'll use Blockly, which uses visual
          blocks that you can drag and drop to write programs. This is how even university
          students learn the basics. Under the hood, you're still creating code.
      4:
        image: notes/frozen1_4.jpg
        text: A program is a set of instructions that tells a computer what to do.
          Let's build a code, or a program, that will help Elsa create a simple line.
          We will use this later to create more complex patterns.
      5:
        image: notes/frozen1_5.jpg
        text: Your screen is split into three main parts. On the left, is the ice
          surface where you'll run your program. The instructions for each level are
          written right below the surface.
      6:
        image: notes/frozen1_6.jpg
        text: This middle area is the toolbox, and each of these blocks is an action
          that Elsa and Anna can do.
      7:
        image: notes/frozen1_7.jpg
        text: The white space on the right is called the workspace, and this is where
          we'll build our program. To move around the ice surface, you'll use the
          "Move Forward" block.
      8:
        image: notes/frozen1_8.jpg
        text: Here, the "Move Forward" block says, "move forward by 100 pixels." When
          we press "Run", what happens? Elsa moves forward a certain amount on the
          screen, 100 pixels in fact! Pixels are basically very tiny squares on your
          computer screen.
      9:
        image: notes/frozen1_9.jpg
        text: The other block we have in this puzzle says "turn right by 90 degrees."
          And when we use this "Turn Right" block, that makes Elsa turn a certain
          amount. You can play around with how far you want Elsa to turn. The angle
          is measured from the path ahead of Elsa. So, this is a 90 degree turn. And
          this is a 120 degree turn.
      10:
        image: notes/frozen1_10.jpg
        text: Remember, you can change the number of pixels and degrees by clicking
          the arrows next to them.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Hi, I’m Paola! Computers are really good at repeating actions. You can
          count to 10, 20, or 100. But a computer can count to a billion or a trillion.
          It won't get bored and it will only take a few seconds. Whether it's counting,
          or drawing, or anything--computers can repeat things hundreds or even billions
          of times.
      2:
        image: notes/frozen2_2.jpg
        text: In programming, we call this a loop. A loop is how you repeat your code
          over and over again. For the next puzzle, your goal is to help Anna create
          a square with the "Repeat" block.
      3:
        image: notes/frozen2_3.jpg
        text: Any blocks of code you put inside the "Repeat" block will be repeated
          in sequence, as many times as you want.
      4:
        image: notes/frozen2_4.jpg
        text: To draw a square, you can use the "Move Forward" and "Turn Right" block
          4 times. But the easier way is to tell the computer to "Move Forward" and
          "Turn Right by 90 degrees" once, and then tell it to repeat this pair of
          actions 4 times. To do that, you need to put the "Move Forward" and "Turn
          Right" block inside a "Repeat" block.
      5:
        image: notes/frozen2_5.jpg
        text: Remember, you can change the number in the "Repeat" block to anything,
          and it will repeat what's inside the block that many times.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hi, I’m Chris Bosh. I’m a professional basketball player, and I coded
          in college.
      2:
        image: notes/frozen3_2.jpg
        text: One of the most important concepts in computer science is how to define
          new commands. Most computer languages have only about 100 words or commands.
          And really, the art and magic is in defining your own new words out of these
          building blocks.
      3:
        image: notes/frozen3_3.jpg
        text: Once you've taught a computer how to do an action once using this sequence
          of commands, you can make up your own name for that action so it's easy
          to repeat it later. When you define your own command and give it a name,
          that's called a function.
      4:
        image: notes/frozen3_4.jpg
        text: Hi, I’m Jess. When programming with blocks, you would use functions
          if there are a set of actions you would like to use lots of times. For example,
          you've written code to create a square.
      5:
        image: notes/frozen3_5.jpg
        text: 'You can define this as a function called "create a square." '
      6:
        image: notes/frozen3_6.jpg
        text: Now you have a new block that you can use multiple times to create multiple
          squares.
      7:
        image: notes/frozen3_7.jpg
        text: A lot of simple shapes can be used to create more complex patterns.
          In the next puzzle, the code you recently wrote to make a circle is available
          to you as a new function that can make circles of different sizes. Can you
          use it to help Elsa create intricate and beautiful patterns in the snow?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: So far you've been making an animation or a story that does the exact
          same thing every time you run it. Now you can make an interactive game that
          you can actually play.
      2:
        image: notes/playlab_2.png
        text: There's the "when arrow" block and the "move actor" block. You can put
          these blocks together to move the actors around with the arrow keys.
      3:
        image: notes/playlab_3.png
        text: And there are some blocks that do stuff when actors collide or are clicked.
          Check them out and have fun!
