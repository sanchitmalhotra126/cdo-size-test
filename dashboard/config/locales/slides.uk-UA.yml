"uk":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Ласкаво просимо до вашої першої години коду! Нумо, не зволікаючи, зробімо
          першу спробу в програмуванні.
      2:
        image: notes/hoc1_2.jpg
        text: Ми будемо використовувати Блоклі - візуальну мову програмування, де
          код програми не пишуть, а перетягують команди-блоки.
      3:
        image: notes/hoc1_3.jpg
        text: Більшість програмного коду потрібно набирати, але Blocky є візуальним
          середовищем. Кожен блок відповідає одному рядку коду.
      4:
        image: notes/hoc1_4.jpg
        text: Ви дізнаєтесь основи інформатики та поняття, які використовуються всюди,
          від програмування до контролю марсохода.
      5:
        image: notes/hoc1_5.jpg
        text: Програма - це набір інструкцій, які має виконати комп'ютер.
      6:
        image: notes/hoc1_6.jpg
        text: Метою вашої першої програми є перевести Злого Птаха через лабіринт до
          Зеленої Свині.
      7:
        image: notes/hoc1_7.jpg
        text: Ліворуч розміщено лабіринт, у якому виконуватиметься програма. Вказівки
          для кожного завдання знаходяться під лабіринтом.
      8:
        image: notes/hoc1_8.jpg
        text: Середня секція містить команди для Злого Птаха. Ви їх використаєте для
          побудови коду.
      9:
        image: notes/hoc1_9.jpg
        text: Праворуч міститься робоча область, в яку ви перетягнете блоки з панелі
          інструментів для побудови програми. Щоб видалити блок, перетягніть його
          у смітник в кутку.
      10:
        image: notes/hoc1_10.jpg
        text: Кожен блок - це одна команда. Якщо ви перетягнете блок "рухатись вперед"
          на робочу область і натиснете "Запуск програми", птах переміститься на одну
          позицію в лабіринті.
      11:
        image: notes/hoc1_11.jpg
        text: Щоб виконати кілька дій, можна перетягувати багато блоків у робочу область
          та з'єднувати їх між собою. Птах виконуватиме команди згори донизу.
      12:
        image: notes/hoc1_12.jpg
        text: Якщо ви запустили програму і бажаєте ще щось виправити та повторити
          спробу - натисніть кнопку "Скинути".
      13:
        image: notes/hoc1_13.jpg
        text: Нумо, дістанемо цих свиней!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Привіт, я JR! Для перемоги кожна команда потребує фахівців з комп'ютерних
          наук. Вони аналізують дані, отримані від автомобіля, щоб він рухався швидше.
      2:
        image: notes/stage5_2.jpg
        text: У цих завданнях ви будете художником, який повсюди малює за собою лінію.
      3:
        image: notes/stage5_3.jpg
        text: Цей блок вказує "рухатись вперед на 100 пікселів". Пікселі - це маленькі
          крапки на екрані.
      4:
        image: notes/stage5_4.jpg
        text: Цей блок вказує "повернути праворуч на 90 градусів". Це дозволить повернути
          художника на вказаний кут, так само як блок "поворот" у завданнях лабіринту.
      5:
        image: notes/stage5_5.jpg
        text: Клацніть на стрілці у будь-якому з цих блоків для того, щоб змінити
          те, наскільки художник переміщується вперед чи повертає. Поекспериментуйте
          з цими новими блоками.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Привіт, я Паола! У цих завданнях ви допоможете фермерці очистити поле
          для посадки рослин.
      2:
        image: notes/stage9_2.jpg
        text: Вам потрібно допомогти видалити всі купи землі та заповнити всі ямки.
      3:
        image: notes/stage9_3.jpg
        text: Нові блоки видаляють 1 відро землі з купи і засипають в ямку 1 відро
          землі.
      4:
        image: notes/stage9_4.jpg
        text: Купи та ямки різного розміру, тому потрібно вказати фермерці, скільки
          використати відер.
    flappy_intro:
      1:
        image: примітки/flappy01.jpg
        text: Привіт, Я Кеті! Одна із найбільш захопливих речей в інформатиці - це
          те, що комп'ютерна програма може бути інтерактивною.
      2:
        image: примітки/flappy02.jpg
        text: Щоразу коли хтось клацає чи торкається екрану комп'ютера чи телефону,
          це утворює ПОДІЮ, і існує код, який вказує, що робити при настанні певної
          ПОДІЇ.
      3:
        image: примітки/flappy03.jpg
        text: 'Наприклад, можна мати ОБРОБНИК ПОДІЇ, який вказує "коли клацнули мишкою,
          грай звук" '
      4:
        image: примітки/flappy04.jpg
        text: Ви коли-небудь чули про пташка Пурха (його ще знають як FlappyBird)?
          Використовуючи обробники подій, ми навчимось програмувати нашого власного
          Пурха!
      5:
        image: примітки/flappy05.jpg
        text: Код, який ви створите, передбачає перетягування блоків, які утворюють
          команди для комп'ютера. Всередині кожен з цих блоків складається зі справжнього
          коду.
      6:
        image: примітки/flappy06.jpg
        text: 'Якщо ви поглянете на робочу область, на ній вже розміщені деякі зелені
          блоки - це "обробники подій" '
      7:
        image: примітки/flappy07.jpg
        text: Якщо ви хочете, щоб птах змахував крилами при Клацанні мишкою, можна
          додати блок "махати" до відповідного обробника події, і тепер щоразу при
          клацанні мишкою птах змахуватиме крилами.
      8:
        image: примітки/flappy08.jpg
        text: У кожному завданні ми додаватимемо нові типи подій у вигляді зелених
          блоків на робочій області, і ви можете вирішувати, які саме блоки додавати
          для реакції на ці події.
      9:
        image: примітки/flappy09.jpg
        text: Коли ви побачите подібну стрілку вниз, це означає, що можна змінювати
          налаштування - наприклад, який саме звук грати, коли Пурх вдаряється об
          змелю.
      10:
        image: примітки/flappy10.jpg
        text: В останньому завданні ви зможете створити власну гру і поділитися нею
          з друзями. Успіхів!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Привіт, я Марк! Дізнаємось про цикли. Використання циклів вказує комп'ютеру
          повторити будь-який набір команд знову і знову, сотні, або й мільйони разів.
      2:
        image: notes/hoc2_2.jpg
        text: У цьому завданні ми хочемо змусити птаха рухатись вперед на 5 позицій,
          щоб дістатись до свині.
      3:
        image: notes/hoc2_3.jpg
        text: Ми можемо використати новий блок "повторити".
      4:
        image: notes/hoc2_4.jpg
        text: Замість того, щоб перетягувати 5 блоків "рухатись вперед"...
      5:
        image: notes/hoc2_5.jpg
        text: Ми можемо поставити блок "рухатись вперед" всередину блоку "повтори"
          і записати число всередині блоку, щоб вказати скільки разів слід повторити
          цю дію.
      6:
        image: notes/hoc2_6.jpg
        text: 'І це важливо: можна розмістити кілька команд всередині блоку "повтори".'
      7:
        image: notes/hoc2_7.jpg
        text: Розважайтесь зі своїм новим блоком "повторити"!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: Привіт, я Кріс. Перед тим, як приєднатись до команди Miami Heat, я вивчав
          комп'ютерні науки в Технічному інституті Джорджиї. Спробуймо новий блок
          - "повторити до".
      2:
        image: notes/hoc3_2.jpg
        text: А якщо ми не знаємо, як далеко потрібно переміститись птахові, щоб дістатись
          до свині?
      3:
        image: notes/hoc3_3.jpg
        text: Якщо ми розмістимо блок "рухатись вперед" всередині блоку "повторювати
          до", птах рухатиметься вперед доти, доки не дістанеться свині (або доки
          не вріжеться в стіну).
      4:
        image: notes/hoc3_4.jpg
        text: 'І це важливо: так само, як і раніше, ми можемо розмістити кілька блоків
          всередині блоку "повторювати до", і вони будуть повторюватись.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Привіт, я Білл! Вивчимо нове базове поняття: команду галуження, яка
          допомагає комп''ютеру приймати рішення.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Ви самі використовуєте команду галуження щодня. Перед виходом з дому
          щоранку ви аналізуєте: ЯКЩО йде дощ, то треба одягнути плащ.'
      3:
        image: notes/hoc4_3.jpg
        text: Ми можемо вказати зомбі перевіряти, чи є шлях ліворуч, і ЯКЩО є шлях
          ліворуч, ми вкажемо йому повернути в цьому напрямку.
      4:
        image: notes/hoc4_4.jpg
        text: Щоб створити цей код, перетягнемо блок "якщо" і поставимо блок "повернути
          ліворуч" всередину.
      5:
        image: notes/hoc4_5.jpg
        text: Тепер, коли ми вгорі поставили блок "рухатись вперед" і навколо всього
          блок "повтори", щоразу коли зомбі рухається, він перевірятиме наявність
          шляху ліворуч та повертатиме. Команда "повторити" є критичною, щоб перевіряти
          можливість повороту на кожному кроці.
      6:
        image: notes/hoc4_6.jpg
        text: 'Команда розгалуження є дуже важливою в інформатиці. Одна з перших,
          створених мною програм, була гра хрестики-нулики, і в галуженні я перевіряв:
          ЯКЩО другий гравець може виграти, слід заблокувати цю виграшну позицію.'
      7:
        image: notes/hoc4_7.jpg
        text: Розважайтесь з блоком „якщо“!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Привіт, мене звуть Салоні. Я використовую програмування, щоб вирішувати
          задачі в охороні здоров'я та медицині. Дізнаємось про блок "якщо-то-інакше".
          Він виглядає схоже на блок "якщо", але має додаткову частинку "інакше".
      2:
        image: notes/hoc5_2.jpg
        text: Якщо я поставлю блок "рухатись вперед" на місце "роби", і "повернути
          ліворуч" на місце "інакше", це означає, що зомбі буде вибирати між двома
          варіантами. ЯКЩО попереду є шлях, то він рухатиметься вперед, ІНАКШЕ (якщо
          шляху попереду немає), зомбі поверне ліворуч.
      3:
        image: notes/hoc5_3.jpg
        text: Точно так само, як із блоком "якщо", ми можемо розмістити блок "якщо-то-інакше"
          всередині блоку "повтори", щоб зомбі продовжував рух, і блок "якщо-то-інакше"
          постійно перевірятиме, чи потрібно повернути.
      4:
        image: notes/hoc5_4.jpg
        text: Отож, відправимо зомбі на місця!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: An if-else statement is a decision between two things. Let's see how
          we can use an if-else statement with our buddy Scrat the squirrel.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: This block looks the same as the "if" block, but there's an extra part
          at the bottom that says "else". If I put a "move forward" block where it
          says "do" and a "turn left" block where it says "else", that means Scrat
          the squirrel will move forward if there's a path ahead. If there's not a
          path ahead, Scrat will turn left.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: It's making a decision and doing one of the two actions based on that
          decision. And just like "if" blocks, you can put "if-else" blocks inside
          "repeat" blocks.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Now let's help Scrat the squirrel get that acorn!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Привіт, я Бріна, інженер в Інстаграмі. Функція - це певні рядки коду,
          які ви хочете використати багато разів, тож замість того, щоб щоразу повністю
          писати цей код, можна використати один блок.
      2:
        image: notes/stage13_2.jpg
        text: Ми дізнаємось, як визначати функції. Визначення функції починається
          із зірочки в кутку. Назва функції записується у верхньому рядку.
      3:
        image: notes/stage13_3.jpg
        text: Блоки, розміщені всередині визначення, вказують, що робити. Наприклад,
          це визначення функції називається "заповнити 5" і складається з блоку "повторити"
          та блоку "заповнити".
      4:
        image: notes/stage13_4.jpg
        text: Визначення на потрібному місці, але наша фермерка не зможе виконати
          функцію, поки ми не перетягнемо блок "заповнити 5" з  категорії функцій.
      5:
        image: notes/stage13_5.jpg
        text: 'Зробимо функцію цікавішою! '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Привіт, я Макінд! Я розповім про блок "поки". '
      2:
        image: notes/stage9_6.jpg
        text: Блок "поки" виконуватиме дії, розміщені всередині нього, ДО ТИХ ПІР,
          ПОКИ умова на початку блоку залишається ІСТИНОЮ.
      3:
        image: notes/stage9_7.jpg
        text: Наприклад, якщо фермерка стоїть на купі, вона продовжуватиме видаляти
          по 1 відру землі, ПОКИ є ця купа.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Привіт, я Тріна, я працюю в Піксар. Я працювала над різними фільмами,
          включаючи Шрека.
      2:
        image: notes/stage11_2.jpg
        text: Це наш новий цикл "лічильник". Він виконуватиме дії знову і знову, і
          можна щоразу дещо змінювати ці дії.
      3:
        image: notes/stage11_3.jpg
        text: У цьому прикладі наш цикл "лічильник" вказує "рахувати лічильником від
          50 до 90 через 10", а всередині ми маємо блок "малювати квадрат". Перетягніть
          блок "лічильник" з розділу змінних на місце "довжина".
      4:
        image: notes/stage11_4.jpg
        text: Це означає, що художник малюватиме квадрат, стороною 50 пікселів, тоді
          додаватиме до них 10 і малюватиме квадрат, стороною 60 пікселів. Він продовжуватиме
          додавати 10 та малювати відповідний квадрат, поки не дійде до 90. Так, ми
          матимемо квадрати зі сторонами 50, 60, 70, 80 та 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Привіт, я Жанет, і я інженер у Зинга.
      2:
        image: notes/stage15_2.jpg
        text: А якщо нам потрібно намалювати кілька трикутників зі сторонами різної
          довжини?
      3:
        image: notes/stage15_3.jpg
        text: Ми могли б написати код вручну, або використаємо функцію з параметрами.
      4:
        image: notes/stage15_4.jpg
        text: Щоб зробити це, клацніть блакитну зірочку на визначенні функції "намалювати
          трикутник". Тоді перетягніть "назву параметра" до блоку "вхід".
      5:
        image: notes/stage15_5.jpg
        text: Тепер, якщо ви напишете "довжина" в тому місці, де вказано "х" і натиснете
          "Enter", ви створите вхідну довжину для своєї функції.
      6:
        image: notes/stage15_6.jpg
        text: Потім клацніть зірочку. Тепер вам потрібно клацнути в категорії змінних
          і перетягнути блок "довжина" у блок "рухатись вперед" вашого визначення
          функції. Заберіть старий блок з числом.
      7:
        image: notes/stage15_7.jpg
        text: Щоб використати функцію з параметрами, клацніть на категорії функцій
          та перетягніть функцію "намалювати трикутник з довжиною".
      8:
        image: notes/stage15_8.jpg
        text: Тепер можете використати математичний блок, щоб вводити різні числа
          для побудови трикутників різних розмірів.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Вітання! Розв'язавши останнє завдання, ви щойно сформували код, за яким
          БУДЬ-ЯКИЙ робот може знайти дорогу через лінійний лабіринт чи тунель будь-якого
          розміру, чи це буде зомбі, птах, марсохід, чи навіть автомобіль на автоматичному
          керуванні без водія.
      2:
        image: notes/hoc6_2.jpg
        text: Основні поняття, які ви використали, лежать в основі кожної програми,
          якою ви коли-небудь користувались. Ми познайомились з циклами на певну кількість
          повторів та умовними повторами, а також із розгалуженнями "якщо" та "якщо-то-інакше".
      3:
        image: notes/hoc6_3.jpg
        text: Якщо вам сподобалась ця перша година коду, відвідайте code.org, щоб
          продовжити вивчення інформатики! У нашому 20-и годинному курсі ви опануєте
          основи програмування і зможете писати програми для телефонів чи роботів,
          ігри - та все, що завгодно.
      4:
        image: notes/hoc6_4.jpg
        text: 'Технології змінюють все, чим ми займаємось, і не важливо, якого ви
          віку: програмування - це весело та творчо, і кожен може його опанувати!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Примітки показу скоро будуть!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Hi, my name is Lyndsey. I model, act, and write my own apps. Let's use
          code to join Anna and Elsa as they explore the magic and beauty of ice.
      2:
        image: notes/frozen1_2.jpg
        text: You'll create snowflakes and patterns as you ice skate and make a winter
          wonderland that you can then share with your friends.
      3:
        image: notes/frozen1_3.jpg
        text: In the next hour, you're going to learn the basics of how to code. Traditional
          programming is usually in text, but we'll use Blockly, which uses visual
          blocks that you can drag and drop to write programs. This is how even university
          students learn the basics. Under the hood, you're still creating code.
      4:
        image: notes/frozen1_4.jpg
        text: A program is a set of instructions that tells a computer what to do.
          Let's build a code, or a program, that will help Elsa create a simple line.
          We will use this later to create more complex patterns.
      5:
        image: notes/frozen1_5.jpg
        text: Your screen is split into three main parts. On the left, is the ice
          surface where you'll run your program. The instructions for each level are
          written right below the surface.
      6:
        image: notes/frozen1_6.jpg
        text: This middle area is the toolbox, and each of these blocks is an action
          that Elsa and Anna can do.
      7:
        image: notes/frozen1_7.jpg
        text: The white space on the right is called the workspace, and this is where
          we'll build our program. To move around the ice surface, you'll use the
          "Move Forward" block.
      8:
        image: notes/frozen1_8.jpg
        text: Here, the "Move Forward" block says, "move forward by 100 pixels." When
          we press "Run", what happens? Elsa moves forward a certain amount on the
          screen, 100 pixels in fact! Pixels are basically very tiny squares on your
          computer screen.
      9:
        image: notes/frozen1_9.jpg
        text: The other block we have in this puzzle says "turn right by 90 degrees."
          And when we use this "Turn Right" block, that makes Elsa turn a certain
          amount. You can play around with how far you want Elsa to turn. The angle
          is measured from the path ahead of Elsa. So, this is a 90 degree turn. And
          this is a 120 degree turn.
      10:
        image: notes/frozen1_10.jpg
        text: Remember, you can change the number of pixels and degrees by clicking
          the arrows next to them.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Hi, I’m Paola! Computers are really good at repeating actions. You can
          count to 10, 20, or 100. But a computer can count to a billion or a trillion.
          It won't get bored and it will only take a few seconds. Whether it's counting,
          or drawing, or anything--computers can repeat things hundreds or even billions
          of times.
      2:
        image: notes/frozen2_2.jpg
        text: In programming, we call this a loop. A loop is how you repeat your code
          over and over again. For the next puzzle, your goal is to help Anna create
          a square with the "Repeat" block.
      3:
        image: notes/frozen2_3.jpg
        text: Any blocks of code you put inside the "Repeat" block will be repeated
          in sequence, as many times as you want.
      4:
        image: notes/frozen2_4.jpg
        text: To draw a square, you can use the "Move Forward" and "Turn Right" block
          4 times. But the easier way is to tell the computer to "Move Forward" and
          "Turn Right by 90 degrees" once, and then tell it to repeat this pair of
          actions 4 times. To do that, you need to put the "Move Forward" and "Turn
          Right" block inside a "Repeat" block.
      5:
        image: notes/frozen2_5.jpg
        text: Remember, you can change the number in the "Repeat" block to anything,
          and it will repeat what's inside the block that many times.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hi, I’m Chris Bosh. I’m a professional basketball player, and I coded
          in college.
      2:
        image: notes/frozen3_2.jpg
        text: One of the most important concepts in computer science is how to define
          new commands. Most computer languages have only about 100 words or commands.
          And really, the art and magic is in defining your own new words out of these
          building blocks.
      3:
        image: notes/frozen3_3.jpg
        text: Once you've taught a computer how to do an action once using this sequence
          of commands, you can make up your own name for that action so it's easy
          to repeat it later. When you define your own command and give it a name,
          that's called a function.
      4:
        image: notes/frozen3_4.jpg
        text: Hi, I’m Jess. When programming with blocks, you would use functions
          if there are a set of actions you would like to use lots of times. For example,
          you've written code to create a square.
      5:
        image: notes/frozen3_5.jpg
        text: 'You can define this as a function called "create a square." '
      6:
        image: notes/frozen3_6.jpg
        text: Now you have a new block that you can use multiple times to create multiple
          squares.
      7:
        image: notes/frozen3_7.jpg
        text: A lot of simple shapes can be used to create more complex patterns.
          In the next puzzle, the code you recently wrote to make a circle is available
          to you as a new function that can make circles of different sizes. Can you
          use it to help Elsa create intricate and beautiful patterns in the snow?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: So far you've been making an animation or a story that does the exact
          same thing every time you run it. Now you can make an interactive game that
          you can actually play.
      2:
        image: notes/playlab_2.png
        text: There's the "when arrow" block and the "move actor" block. You can put
          these blocks together to move the actors around with the arrow keys.
      3:
        image: notes/playlab_3.png
        text: And there are some blocks that do stuff when actors collide or are clicked.
          Check them out and have fun!
