---
hy-AM:
  data:
    short_instructions:
      2-3 Artist 12: "Create a circle to finish the eyeball!\\\r\n\\\r\nIf\nthe artist
        turns 1 degree with each loop, how many times do you need to repeat\nthe code
        to draw a circle? 180? 360? 500?"
      2-3 Artist 2 new: 'Տունն անավարտ պատ ունի: Յուրաքանչյուր կողմը 100 Է, սակայն
        կիսավարտ պատը 50 Է: Ավարտի՛ր պատը:'
      2-3 Artist 3.4: |-
        The jump block moves the artist without drawing.
        Draw the dashed line using both the `jump forward` and `move forward` blocks.
      2-3 Artist 3new: 'Կարմիր գլխարկը 100 պիկսել երկարություն ունի: Ավարտի՛ր սև գլխարկի
        գծագրումը, որը 70 պիկսել կարճ է: (Հուշում՝ յուրաքանչյուր գլխարկի լայնություն
        50 պիկսել է)'
      2-3 Artist 4: Help me complete the house for this cat.
      2-3 Artist 6: |-
        This house needs a roof! Draw the triangle.  Hint:
        all three sides are the same length.
      2-3 Artist 7: |-
        Finish drawing the last set of windows on the school
        so that everyone in class can see outside. The sides of each square window
        pane are 25 pixels long.
      2-3 Artist 8: |-
        Complete the rooms for each of the animals by splitting
        the rectangle into 2 equal-sized squares. The rectangle is 200 pixels wide
        and 100 pixels tall.
      2-3 Artist 9: Finish this kite
      2-3 Artist Assessment 1: |-
        Assessment: Finish drawing the last tooth.
        It is 25 pixels wide and 25 pixels tall.
      2-3 Artist Debugging 1: |-
        The width of the top of this hat should
        be 50 pixels wide.  Can you fix it?
      2-3 Artist Debugging 10: "The direction pad on my game controller\nis too narrow.
        \\\r\n\\\r\nCan you make it wider by 10 pixels?"
      2-3 Artist Debugging 11: "My snowflake is falling apart!\\\r\n\\\r\nCan\nyou
        figure out what's going wrong?"
      2-3 Artist Debugging 2: "This code for the cat's whiskers is wrong.\n\\\r\n\\\r\nFix
        this code to draw whiskers that are all the same length."
      2-3 Artist Debugging 3: "My boat has a hole! \\\r\n\\\r\nWhat do you\nneed to
        fix to make the ends meet?"
      2-3 Artist Debugging 5: "The code that we have for the leg and\nfoot is wrong.
        \\\r\n\\\r\nCan you fix it?"
      2-3 Artist Debugging 6: "Looks like I'm sitting on a chair that’s\nmissing a
        leg!\\\r\n\\\r\nEdit the code to draw the last leg."
      2-3 Artist Debugging 7: "Looks like the C in code is drawn backwards!\\\r\n\\\r\nCan\nyou
        make it look like a C again?"
      2-3 Artist Debugging 8: "My teacher says that I should finish what\nI start!\\\r\n\\\r\nHelp
        me finish my pinwheel. Can you figure out what's wrong?"
      2-3 Artist Debugging 9: "Something is off!\\\r\n\\\r\nThe code for\nthis stem
        is wrong. Can you figure out how to get the artist to trace the\nstem the
        right way?"
      2-3 Artist Debugging Assessment 1: "Assessment: Why does this square\nend up
        being 75 pixels too small on each side?  \\\r\n\\\r\nWhere does the code\ngo
        wrong?"
      2-3 Artist Free Play: Free-play! Draw anything you'd like.
      2-3 Artist Functions 1: "\"Me zombie artist. Me love drawing!\"  \\\r\n\\\r\nHelp\nthe
        zombie draw square glasses.  \\\r\n\\\r\nThe bridge between the glasses is\n25
        pixels shorter than the width of the squares."
      2-3 Artist Functions 10: |-
        Freeplay: Here are two functions, one
        to draw a big gear and one to draw a small gear. Use them to draw the inside
        of a machine!
      2-3 Artist Functions 11: "We've renamed the `draw a square` function\nto `draw
        a hexagon`, but it's still giving us squares! Can you modify the\n`draw a
        hexagon` function to draw a hexagon with 50 pixel sides? \\\r\n\\\r\nDraw\nthe
        image using the new function!"
      2-3 Artist Functions 11.5: "Here's that same `draw a hexagon`\nfunction. \\\r\n\\\r\nWhat
        happens if you turn 60 degrees in your main program\neach time you loop?"
      2-3 Artist Functions 12: "Functions are really great for drawing\ncomplex things
        multiple times. \\\r\n\\\r\nCan you use the `draw a flower` function\nto fill
        the rest of the planter box?\\\r\nThe plants are all 100 pixels apart."
      2-3 Artist Functions 2: "Functions let you define new blocks! \\\r\n\\\r\nWe've\nmoved
        the blocks needed for drawing a square into a function called `draw\na square`.
        This time, use the `draw a square` function to create the glasses.\n\\\r\n\\\r\nThe
        squares are 75 pixels apart."
      2-3 Artist Functions 3: "Edit the function to draw a square with\na side length
        of 115 to draw the bigger glasses. \\\r\n\\\r\nThe squares are now\n45 pixels
        apart."
      2-3 Artist Functions 4: |-
        Now, put the function inside of a loop
        to draw these three squares.
      2-3 Artist Functions 9: |-
        Freeplay: Here is a snowflake function.
        Experiment with it to create a winter scene! This is a free play level, so
        there is no puzzle to solve. Have fun!
      2-3 Artist Loops New 1: |-
        Let's draw this robot's head! Can you
        make a square with sides that are 100 pixels?
      2-3 Artist Loops New 10: |-
        Now let's connect a bunch of V's together
        in a loop.
      2-3 Artist Loops New 11: |-
        Rebuild the code from the last puzzle,
        but this time, add a left turn of 30 degrees inside the loop. Now, repeat
        it 24 times instead of 7.
      2-3 Artist Loops New 12: Draw a diamond with sides of 100 pixels.
      2-3 Artist Loops New 13: "We are going to start you with some code\n(in grey)
        to make one diamond. \\\r\n\\\r\nLoop the grey code to create a fun\npattern!"
      2-3 Artist Loops New 14: |-
        Play around with the code for the diamond
        and see what other patterns you can make. Try changing how many degrees you
        turn and how many times you loop.
      2-3 Artist Loops New 15: Now, draw anything you like!
      2-3 Artist Loops New 2: |-
        Here is the same puzzle that we just solved,
        but this time, we have to use loops to pass it.  Can you put a `repeat` around
        the starter code to finish the robot head?
      2-3 Artist Loops New 9: |-
        Draw a simple V (where both sides are
        50 pixels) to complete the arrow.
      2-3 Artist Nested Loops 1: '"repeat" բլոկի մեջ դի՛ր կոդերը տրված օրինակը գծելու
        համար:'
      2-3 Artist Nested Loops 10: 'Կոդը գրի՛ր 12 անգամ պատկերը ամբողջականացնելու համար:'
      2-3 Artist Nested Loops 11: 'Կոդը գրի՛ր 4 անգամ պատկերը ամբողջականացնելու համար,
        թեքվի՛ր 90 աստիճանով յուրաքանչյուր շրջանից հետո:'
      2-3 Artist Nested Loops 12: 'Կոդը գրի՛ր 12 անգամ գալարները գծելու համար:'
      2-3 Artist Nested Loops 2: 'Այժմ միացրու՛ եռանկյունիները 6 անգամ: Յուրաքանչյուր
        եռանկյունից հետո թեքվի՛ր 60 աստիճանով հաջորդը գծելու համար:'
      2-3 Artist Nested Loops 3: 'Եռանկյունիները միացրո՛ւ 12 անգամ տրված պատկերը գծելու
        համար: Շրջանագծի (360) աստիճանը բաժանի պատկերների քանակի (12) վրա, որպեսզի
        յուրաքանչյուր պատկերից հետո պարզ լինի, թե որքան պետք է թեքվել:'
      2-3 Artist Nested Loops 4: 'Միացրու՛ ադամանդաձև պատկերները 12 անգամ ծաղիկը գծելու
        համար: Հիշեցում. 12 ադամանդները միացրու՛ միևնույն անկյան տակ, ինչպես 12 եռանկյունիների
        դեպքում: Որքա՞ն պետք է թեքվել յուրաքանչյուր պատկերից հետո:'
      2-3 Artist Nested Loops 5: 'Գծի՛ր շենքի պատուհանները՝ ցանցային միացումներ կատարելով:
        Պատուհանները ունեն 20 պիքսել երկարություն և 20 պիքսել հեռավորության վրա են:'
      2-3 Artist Nested Loops 6: 'Դինոզավրը ունի պոչից վեր բարձրացող 8 սուր ծայր:
        Յուրաքանչյուր սուր ծայրը 30 պիքսել երկարություն ունի: Միացրու՛ եռանկյունը
        8 անգամ, սակայն առջև ցատկիր յուրաքանչյուրից հետո:'
      2-3 Artist Nested Loops 7: 'Միացրու՛ եռանկյունը 10 անգամ արևը գծելու համար:
        Պետք է տեղաշարժվել և թեքվել յուրաքանչյուր եռանկյունից հետո: Շրջանագծի աստիճանը
        բաժանելով եռանկյունիների քանակի վրա՝ պարզ կլինի, թե որքան պետք է թեքվել:'
      2-3 Artist Nested Loops 8: 'Այժմ մեր նկարին խոտ ավելացնենք: Յուրաքանչյուր խոտ
        50 պիքսել հեռավորություն ունի:'
      2-3 Artist Nested Loops 9: 'Նկարը կավարտենք՝ ավելացնելով ծաղիկը: Ադամանդաձև
        պատկերները միացրու՛ 12 անգամ ծաղիկը գծելու համար:'
      2-3 Artist Nested Loops Free Play: 'Ազատ խաղ. գծի՛ր ինչ-որ բան՝ ցանցային միացումներ
        իրականացնելով:'
      2-3 Bee Conditionals 11: "I wonder what's out there!\\\r\n\\\r\nHelp\nme fly
        around the yard and collect nectar only from the flowers that have\nsome. "
      2-3 Bee Conditionals 12: |-
        Help me find all of the nectar using
        as few blocks as possible!
      2-3 Bee Conditionals 13: "There's a lot happening here!\\\r\n\\\r\nUse\nwhat
        you've learned to collect all of the nectar and then make the honey."
      2-3 Bee Conditionals 14: "Let's put everything together!\\\r\n\\\r\nUse\nwhat
        you've learned to help me collect nectar only from flowers that have\nit,
        using as few blocks as possible.  Don't forget to make honey at the end."
      2-3 Bee Conditionals 15: "This stair step pattern should look familiar.  \\\r\n\\\r\nCan\nyou
        collect nectar only from the flowers that have some, using as few blocks\nas
        possible?"
      2-3 Bee Conditionals 2: "I'm a hungry bee! \\\r\nHelp me collect\nall of the
        nectar from the flowers using the fewest number of blocks."
      2-3 Bee Conditionals 3: "Look at all of that nectar!\\\r\n\\\r\nHelp\nme collect
        the nectar and make the honey using as few blocks as you can.  "
      2-3 Bee Conditionals 5: "Be careful not to collect nectar from\na purple flower
        if it doesn't have any. \\\r\nYou must first check if the nectar\nis equal
        to 1 using the `if nectar` block."
      2-3 Bee Conditionals 6: |-
        Check this flower with an "if" block
        to see if there is any nectar available.
      2-3 Bee Conditionals 7: |-
        Collect nectar from each flower only if
        it has any.
      2-3 Bee Conditionals 8: |-
        This field has red and purple flowers.
        Red flowers have a known nectar amount, but purple flower nectar is unknown.
        Collect all the nectar.
      2-3 Bee Conditionals 9: Collect all the nectar from each flower.
      2-3 Bee Conditionals Assessment 1: |-
        Assessment: Collect all of
        the nectar. Be careful not to try to collect nectar from a purple flower if
        it doesn't have any.
      2-3 Bee Debugging 1: |-
        These blocks are really bugging me. Fix the
        error(s) to collect all of the nectar.
      2-3 Bee Debugging 10: "This puzzle is making me loopy! \\\r\nFix\nthe error(s)
        to collect all of the nectar and make all of the honey."
      2-3 Bee Debugging 2: "Can you find the problem here?\\\r\nFix the\nerror(s)
        to collect all of the nectar."
      2-3 Bee Debugging 3: "Ooh, this one stings!\\\r\n\\\r\nFix the error(s)\nto
        collect all of the nectar."
      2-3 Bee Debugging 4: |-
        These blocks are really bugging me. Fix the
        error(s) to collect all of the nectar and make all of the honey.
      2-3 Bee Debugging 5: "That flower looks tasty! \\\r\n\\\r\nFix the\nerror(s)
        to collect all of the nectar.  You can now use both run and step."
      2-3 Bee Debugging 6: "What a sweet challenge!\\\r\n\\\r\nFix the error(s)\nto
        collect all of the nectar."
      2-3 Bee Debugging 7: |-
        Fix the error(s) to collect all of the nectar
        and make all of the honey.
      2-3 Bee Debugging 8: "So many beautiful flowers!\\\r\n\\\r\nFix the\nerror(s)
        to collect all of the nectar."
      2-3 Bee Debugging 9: "\"Bee\" patient with this one!\\\r\n\\\r\nYou\nwill need
        to fix a couple of things in this program to collect all of the\nnectar and
        make all of the honey."
      2-3 Bee Debugging Assessment 1: "Assessment:  Now it's time to\nshow what you
        know!\\\r\n\\\r\nFix the error(s) to collect all of the nectar and\nmake all
        of the honey."
      2-3 Bee Functions 1: |-
        Functions are blocks of code that perform
        a task. Use the "get 2 nectar" function to collect the nectar from each
        flower.
      2-3 Bee Functions 10: "Purple flowers change between either 1 or\n0 nectar each
        time you run the puzzle.   \\\r\n\\\r\nCreate a function that collects\nnectar
        only from purple flowers that have nectar."
      2-3 Bee Functions 2: "Functions are blocks of code that perform\na task.  \\\r\n\\\r\nUse
        the `get 5` function to get 5 nectars at a time."
      2-3 Bee Functions 3: Collect all the nectar from each flower.
      2-3 Bee Functions 4: "The `move and get nectar` function turns\nthe bee, collects
        nectar, and then returns the bee to where it started.  \\\r\n\\\r\nUse\nthe
        function to collect all of the nectar."
      2-3 Bee Functions 5: |-
        There is now more nectar at the flowers.
        Edit the given function so that it collects 4 nectars and use it to collect
        all of the nectar from the flowers.
      2-3 Bee Functions 6: |-
        Now use the same function to collect nectar
        from the three flowers.
      2-3 Bee Functions 8: |-
        Create your own function that gets 7 nectar,
        moves forward, and makes 7 honey. Use the function to collect nectar at each
        flower and make honey at each honeycomb.
      2-3 Bee Functions 9: |-
        Create your own function that goes down a
        path, gets nectar, makes honey, and then returns the bee to the top of the
        path.
      2-3 Bee Functions Assessment 1: |-
        Assessment: Use the given function
        to collect nectar from each flower.
      2-3 Bee Functions Assessment 2: |-
        Assessment: Create a function
        to move forward and make 3 honey, then return the bee to where it started.
      2-3 Bee Loops 1: "Those flowers look tasty!\\\r\n\\\r\nCollect nectar\nfrom
        each of the flowers using the fewest blocks possible."
      2-3 Bee Loops 10: |-
        Can you use a while loop inside of two other
        loops to collect all of the nectar?
      2-3 Bee Loops 13: |-
        Assessment: Collect all of the nectar using
        the fewest blocks possible.
      2-3 Bee Loops 1A: |-
        Hi, I'm a bee. Can you help me collect the
        nectar from these flowers?
      2-3 Bee Loops 2: |-
        Collect all the nectar and make all of the honey
        using the fewest blocks possible.
      2-3 Bee Loops 2A: This time, use a loop to gather all of the nectar.
      2-3 Bee Loops 3: |-
        Collect nectar from each flower and make honey
        at each honeycomb using the fewest blocks possible.
      2-3 Bee Loops 3A: Use a `repeat` loop to collect all of the nectar.
      2-3 Bee Loops 3B: |-
        Now use the `repeat` block to collect all of
        the nectar and make all of the honey.
      2-3 Bee Loops 4: "Such a busy bee!\\\r\n\\\r\nHelp bee collect all\nof the nectar
        and make all of the honey with the fewest blocks possible."
      2-3 Bee Loops 4A: "How many times can loops help you in this puzzle?  \\\r\n\\\r\nLoops\nare
        your friend! Use a few of them to complete this puzzle with the fewest\nblocks
        possible."
      2-3 Bee Loops 5: "The shape of this path is different than the\nothers. \\\r\n\\\r\nCan
        you collect all of the nectar using as few blocks as possible?"
      2-3 Bee Loops 6: |-
        Can you find the quickest way for the bee to
        collect all of the nectar and make all of the honey?
      2-3 Bee Loops 7: |-
        What a beautiful field of flowers!   Help the
        bee visit each one.  Can you find a way to do it with fewer than 7 blocks?
      2-3 Bee Loops 8: "These purple flowers have different amount of\nnectar each
        time you run the puzzle. \\\r\n\\\r\nUse the `while nectar` loop to\ncollect
        all of the nectar. \\\r\n\\\r\nThis loop will run as long as the condition\nis
        true, in this case `nectar > 0`."
      2-3 Bee Loops Assessment 1: |-
        Assessment: Use a `while` loop to
        collect all of the nectar from these flowers.
      2-3 Maze 1: 'Կարո՞ղ ես օգնել չարաճճի խոզուկին բռնել: Միացրու՛ մի քանի «առաջ
        ընթանալ» բլոկներ «երբ կսկսի» բլոկին և սեղմի՛ր «վազք»:'
      2-3 Maze 10: 'Տա՛ր ինձ այդ կանաչ չարիքի մոտ: (Զգուշացի՛ր TNT-ներից) '
      2-3 Maze 12: |-
        Can you get to the pig by creating a loop that uses
        only one `move forward` block inside of a `repeat`?
      2-3 Maze 13: Get me to the pig by adding only one block
      2-3 Maze 15: |-
        In this puzzle, two `repeat` loops will help you
        get to the pig with the fewest number of blocks!
      2-3 Maze 16: |-
        Loops even work with more than one block inside!  Can
        you loop this sequence to get the zombie to the sunflower?
      2-3 Maze 16 before: |-
        Can you figure out the fastest way to get
        me to the pig?
      2-3 Maze 2: 'Այս խոզուկն ինձ բարկացնում է: Օգնի՛ր նրան հասնել:'
      2-3 Maze 3: 'Որոշի՛ր ուղին և տա՛ր ինձ այդ հիմար խոզուկի մոտ: Խուսափի՛ր TNT-ները,
        այլապես կպայթես: '
      2-3 Maze 4: 'Տա՛ր ինձ այդ կանաչ չարիքի մոտ: (Զգուշացի՛ր TNT-ներից) '
      2-3 Maze 6: 'Պահպանե՛ք հանգստություն և օգնե՛ք գտնել այդ վատ խոզուկին: Հակառակ
        դեպքում՝ կբարկանամ:'
      2-3 Maze 7: 'Տա՛ր ինձ այդ կանաչ չարիքի մոտ: (Զգուշացի՛ր TNT-ներից) '
      2-3 Maze 8: Տա՛ր ինձ խոզի մոտ։
      2-3 Maze 9: 'Տա՛ր ինձ այդ կանաչ չարիքի մոտ: (Զգուշացի՛ր TNT-ներից) '
      2-3 Maze Loops 1: |-
        Can you get me to the pig using 5 of the same
        kind of blocks?
      2-3 Maze Loops 17: Use what you learned to get me to the sunflower!
      2-3 Maze Loops 18: "Get me to the sunflower using the fewest blocks\npossible!
        \ \\\r\n\\\r\nTry using one `repeat` loop inside of another to cut down\non
        the amount of code you need."
      2-3 Maze Loops 19: "Let's take this to another level! \\\r\nUse\nloops to get
        me to the sunflower with the fewest loops possible."
      2-3 Maze Loops 20: 'Ինձ արևածաղկի մետ տա՛ր՝ օգտագորելով հնարավորինս քիչ բլոկներ:'
      2-3 Maze Loops 21: |-
        Get me to the sunflower using the fewest blocks
        possible!
      2-3 Maze Loops Assessment 1: |-
        Assessment:  Get me to the sunflower
        using only 5 blocks!
      4-5 Artist 11: |-
        Complete the green lines. The lines are 300 pixels
        long and 15 pixels apart.
      4-5 Artist 2: |-
        Loop this code using the `repeat` block to complete
        the square.
      4-5 Artist 3: |-
        This rectangular flower bed has a perimeter of 600.
        The long side has a length of 200. Draw the rectangle using as few blocks
        as possible.
      4-5 Artist 3.5: |-
        Try to figure out what happens if you run this
        code (or just press "Run" and try it). Next, repeat the code enough times
        to complete the drawing!
      4-5 Artist 4: |-
        How many degrees are in a circle?  Loop the blocks
        to create a circle of colors.
      4-5 Artist 5: |-
        What can we replace "???" with to make sure that
        the zombie completes this drawing using the loop provided?
      4-5 Artist 6: |-
        This equilateral triangle has angles of 60, 60,
        and 60 degrees. Each side is 200 pixels. Complete the drawing.
      4-5 Artist 7: |-
        This right triangle has angles of 30, 60, and 90
        degrees. The slanted side's length (length of the hypotenuse) is 200 pixels.
        Complete the drawing.
      4-5 Artist 8: "The halfway line on a soccer field is _perpendicular_\nto the
        sidelines.   \\\r\nThis rectangle has a perimeter of 800 pixels total,\nand
        it is 240 pixels wide. How tall is it?   \\\r\n\\\r\nDraw the bounds and the\nhalfway
        line."
      4-5 Artist 9: |-
        Draw the other half so that the design is symmetrical.
        The triangles are equilateral and have sides that are 50 pixels long.
      4-5 Artist Assessment 1: |-
        Assessment: Use a loop to draw the equilateral
        triangle. Each side is 300 pixels.
      4-5 Artist Free Draw 1: |-
        Free Draw!  Draw whatever you are inspired
        to create.
      4-5 Artist Patterns 1: "Draw this square using a loop.\\\r\n\\\r\nEach\nside
        is 20 pixels long."
      4-5 Artist Patterns 11: |-
        How many times do you need to loop this
        to draw a half circle?
      4-5 Artist Patterns 12: "If you create another loop like this one,\nbut turn
        left instead of right, what happens? \\\r\n\\\r\nCan you repeat all of\nthat
        to draw this wave?"
      4-5 Artist Patterns 13: "Now let's loop that whole thing four\ntimes to create
        this picture frame. Watch out for the corners - you can't\njust turn 90 degrees!
        \\\r\n\\\r\nIf looping a 3 degree turn 60 times makes a\nhalf circle, which
        of these blocks of code will make an additional quarter\ncircle for the corners?"
      4-5 Artist Patterns 2: |-
        If you place your square loop inside another
        loop, we call that a nested loop. What do you need to add as an outer loop
        to make sure all 15 squares line up next to each other?
      4-5 Artist Patterns 3: |-
        Now let's go one level deeper! We've
        nested that whole block of code into another loop, but you need to get the
        artist back in place to draw the next line. Which of these code blocks can
        you place at the end of the outermost loop to draw the whole grid?
      4-5 Artist Patterns 4: |-
        This diamond has 50 pixel sides and angles
        of 120 and 60 degrees. Use a loop to draw it.
      4-5 Artist Patterns 8: |-
        Use a loop to draw this hexagon with 40
        pixel sides and 60 degree angles.
      4-5 Artist Patterns 9: "Now repeat this code 3 times and draw the\nwhole row.
        \\\r\n\\\r\nEach hexagon is 80 pixels wide from the furthest points\nleft
        to right."
      4-5 Artist Patterns 9.5: |-
        Let's loop this code to draw two rows
        of hexagons. Notice how our second row is shifted to the right.
      4-5 Artist Patterns Free Play: |-
        Free play - try your hand at making
        a pattern of your own!
      4-5 Bee Conditionals 1: |-
        This cloud is blocking my view! Check
        to see if there's a flower under the cloud, and only get nectar if there's
        a flower. Be careful, it can change!
      4-5 Bee Conditionals 2: "More clouds! \\\r\n\\\r\nCheck underneath\nevery cloud
        to see if it is hiding a flower before you get nectar.  \\\r\n\\\r\nRemember:\nNot
        all clouds hide the same thing!"
      4-5 Bee Conditionals 3: |-
        Now I just want to make honey. Some of
        these clouds might have honeycombs under them. Be sure to check each cloud!
      4-5 Bee Conditionals 4: |-
        Sometimes this cloud covers a flower,
        and sometimes it covers a honeycomb! Use the if/else block to collect nectar
        if it is a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 5: "There will be either a flower or a honeycomb\nunder
        each of those clouds!\\\r\n\\\r\nUse the `if/else` block to collect nectar\nif
        there is a flower.\\\r\nOtherwise, make honey (because there is a honeycomb)."
      4-5 Bee Conditionals 6: "I am not sure how much nectar this flower\nhas, but
        I know it has either 1, 2, or 3 nectar. \\\r\n\\\r\nCombine the conditional\nblocks
        (`if` and/or `if/else`) to only get as much nectar as the flower has.\n\\\r\n\\\r\nRemember,
        the amount of nectar can change each time you run the puzzle!"
      4-5 Bee Conditionals 7: "These flowers can have 3, 2, or 1 nectar.\n\\\r\n\\\r\nComplete
        the `check purple flower` function and use it to collect\nall of the nectar
        at the flowers."
      4-5 Bee Conditionals 8: "Write the function for `check flower make\nhoney`.
        \\\r\n\\\r\nYour function should check if the purple flower has 3, 2,\nor
        1 nectar and get all of the nectar. \\\r\nThen, move forward and make honey."
      4-5 Bee Conditionals Assessment 1: "**Assessment:** This cloud\nis either hiding
        a flower with one nectar or a honeycomb that needs one honey.  \\\r\n\\\r\nComplete\nthe
        `get nectar or make honey` function, then call it to collect the nectar\nor
        honey. \\\r"
      4-5 Bee Debugging 1: "These blocks are really bugging me. \\\r\n\\\r\nCan\nyou
        fix them?"
      4-5 Bee Debugging 10: Find the errors and fix them.
      4-5 Bee Debugging 11: Does this count correctly?
      4-5 Bee Debugging 2: Help the bee get the nectar and make honey.
      4-5 Bee Debugging 3: Find the errors and fix them.
      4-5 Bee Debugging 4: These blocks don't work. What's the pattern?
      4-5 Bee Debugging 5: Something isn't right here...
      4-5 Bee Debugging 6: "The purple flower has a different amount\nof nectar each
        time you run the puzzle. \\\r\n\\\r\nFix the blocks to get all\nof the nectar
        from the flower each time."
      4-5 Bee Debugging 7: The function is missing something...
      4-5 Bee Debugging 8: |-
        This function is fine, but it isn't used
        properly.
      4-5 Bee Debugging 9: Why isn't the bee making enough honey?
      4-5 Bee Debugging Assessment 1: 'Assessment: Fix the code.'
      4-5 Bee Nested Loops 1: Use a loop to collect all of the nectar.
      4-5 Bee Nested Loops 2: |-
        Collect all of the nectar from each flower.
        Use a nested loop.
      4-5 Bee Nested Loops 3: |-
        Collect all of the nectar by putting the
        starter code inside another loop.
      4-5 Bee Nested Loops 4: "Collect all of the nectar from each flower\nand make
        honey at the honeycomb. \\\r\n\\\r\nUse a nested loop. "
      4-5 Bee Nested Loops 5: |-
        Collect all of the nectar by creating
        a nested loop.
      4-5 Bee Nested Loops 7: |-
        Put this loop inside another loop to create
        a nested loop and collect all of the nectar from the flowers.
      4-5 Bee Nested Loops 9: |-
        Collect all of the nectar from these flowers
        by nesting a while loop inside a repeat.
      4-5 Bee Nested Loops Assessment 1: |-
        **Assessment:** Collect all
        of the nectar and make all of the honey using loops.
      4-5 Bee Nested Loops Rows: |-
        Gather nectar from the rows of flowers!
        Use a nested loop.
      4-5 Maze 1: |-
        Dear person. Me zombie. Must... get... to
        sunflower.
      4-5 Maze 10: 'Կարո՞ղ ես արևածաղկին հասնել՝ միայն 4 բլոկներ օգտագործելով:'
      4-5 Maze 11: 'Կարո՞ղ ես արևածաղկին հասնել՝ օգտագործելով միայն 6 բլոկ:'
      4-5 Maze 12: 'Լավ, սա մի փոքր տարբեր է: Կարո՞ղ ես միայն 6 բլոկով անել:'
      4-5 Maze 2: 'Զոմբիին արևածաղկի մոտ տա՛ր, բայց խույս տու՛ր զոմբի-բույսին:'
      4-5 Maze 3: 'Պետք է... արևածաղկին... հասնեմ:'
      4-5 Maze 4: Օգտագործի՛ր "repeat" բլոկը գլուխկոտրուկը արագ լուծելու համար...
      4-5 Maze 5: 'Կարո՞ղ ես գլուխկոտրուկը լուծել՝ հնարավորինս քիչ բլոկներ օգտագործելով:'
      4-5 Maze 6: 'Ինձ արևածաղկի մետ տա՛ր՝ օգտագորելով հնարավորինս քիչ բլոկներ:'
      4-5 Maze 7: 'Զոմբիին արագ տեղափոխի՛ր արևածաղկի մոտ: Կարո՞ղ ես գլուխկոտրուկը
        լուծել՝ 11-ից քիչ բլոկներ օգտագործելով:'
      4-5 Maze 8: |-
        Տեղափոխի՛ր զոմբիին արևածաղկի մոտ՝ որքան կարող ես քիչ բլոկներ օգտագործելով:
        (Խույս տու՛ր զոմբի-բույսից)
      4-5 Maze 9: "Այժմ նոր բլոկ ունենք, որը կոչվում է `repeat until`\nՍա կօգնի հրահանգները
        կրկնել, մինչ զոմբին կհասնի արևածաղկին: \nՕգտագործի՛ր նոր `repeat until` բլոկը՝
        գլուխկոտրուկը լուծելով հնարավորինս քիչ հրահանգներով:"
      4-5 Maze Assessment 1: 'Հաշվարկում: Արևածաղկին հասի՛ր՝ հնարավորինս քիչ բլոկներ
        օգտագործելով:'
      4-5 Maze Conditionals 1: |-
        Use the `repeat until` block to get the
        zombie to the sunflower.
      4-5 Maze Conditionals 10: "Can you add just 3 blocks to help the\nzombie solve
        a more complex maze? \\\r\n\\\r\nIf you do it right, he can walk\nany curvy
        path no matter the length!"
      4-5 Maze Conditionals 2: |-
        Use the `repeat until` block to get the
        zombie to the sunflower.
      4-5 Maze Conditionals 3: "Use the `if` block to help me decide\nwhen to turn.
        \\\r"
      4-5 Maze Conditionals 4: |-
        Ok, solve this one just like the last
        puzzle, but you need to remember how you used the `if` and `repeat until`
        blocks together.
      4-5 Maze Conditionals 5: "\"Me want sunflower!\"  \\\r\n\\\r\nUse an\n`if` statement
        to get the zombie to the sunflower with the fewest number of\nblocks."
      4-5 Maze Conditionals 6: "\"Eat sunflower!\"\\\r\n\\\r\nUse an `if`\nstatement
        to get the zombie to the sunflower with the fewest number of blocks."
      4-5 Maze Conditionals 7: |-
        The solution to this puzzle isn't very
        different, but watch out for the chompers!
      4-5 Maze Conditionals 8: "The `if/else` block checks a condition,\nand then
        does one thing OR another. \\\r\n\\\r\nUse this new block to get me to\nthe
        sunflower."
      4-5 Maze Conditionals 9: "One more practice puzzle with the `if/else`\nblock!\\\r\n\\\r\nTrace
        it with your finger to see if you can figure it out on\nyour first try."
      4-5 Maze Conditionals Assessment 1: |-
        **Assessment:** Use a `repeat
        until` and an `if/else` block to get me to the sunflower in as few blocks
        as possible.
      4-5 Nested Loops 11: |-
        Can you draw these 10 squares of this sidewalk
        using a nested loop? Each square is 30 pixels.
      4-5 Nested Loops 12: |-
        Can you draw these 36 triangles using a nested
        loop?
      4-5 Nested Loops 2: |-
        Now nest this loop inside another loop to
        draw 10 triangles.  This is called a "nested" loop.
      4-5 Nested Loops 3: "Create a sun by nesting the starter code in\nanother loop.\\\r\n\\\r\nTo
        get this cool design with a hollow center, you'll\nneed to jump forward by
        the length of the triangle before turning."
      4-5 Nested Loops 5: Loop the given code to create a windmill.
      4-5 Nested Loops 6: |-
        Can you draw a hexagon by looping the triangle
        code?
      4-5 Nested Loops 7: "Loop this design 10 times. \\\r\n\\\r\nHow much\ndo you
        have to turn each time you loop?"
      4-5 Nested Loops 8: "Loop this shape 6 times. \\\r\n\\\r\nHow much\ndo you have
        to turn each time you loop? "
      4-5 Nested Loops 9: Draw the teeth in the alligator's mouth!
      4-5 Nested Loops Assessment 1: |-
        Assessment: Use a nested loop to
        complete the design.
      4-5 While Loops 1: |-
        Move me to the hole and fill it with two shovelfuls
        of dirt, using the `fill` block.
      4-5 While Loops 2: |-
        Move me to the pile of dirt and remove it with
        5 shovel scoops, using the `remove 1` block.
      4-5 While Loops 3: "Use as few blocks as possible to complete this\npuzzle!
        \ \\\r\n\\\r\nMove me to the pile and remove all the dirt, then move to\nthe
        hole and fill it completely."
      4-5 While Loops 4: "Wow, look at that! \\\r\n\\\r\nI don't know how\nmany shovelfuls
        of dirt this hole needs.  \\\r\nCan you write a program that\nkeeps using
        the `fill` block until the ground is even?  "
      4-5 While Loops 5: |-
        Wow, now there are two deep holes! Can you
        write a program that fills them both until the ground is even?
      4-5 While Loops 6: |-
        Wow, now there is a large pile of dirt! Can
        you write a program that removes all of it so the ground is even?
      4-5 While Loops 7: |-
        Wow, now there are three piles of dirt! Can
        you write a program that removes each of them until the ground is even?
      4-5 While Loops 8: |2-
         There is a really deep hole and a really large
        pile of dirt.  How many shovelfuls of dirt need to be moved around to make
        the ground flat?
      4-5 While Loops Assessment 1: |-
        There are a lot of holes and piles.  Help
        me to fill and remove them to make the ground flat.
      Course 4 Artist 1: |-
        Help me draw a box. (Each line is 200 pixels
        long)
      Course 4 Artist 10: "Click here to see the full instructions again!\\\r\n\\\r\nHere\nis
        the code for an interesting shape.  What happens when you repeat it multiple\ntimes,
        turning between each iteration?   Notice that the turns in this shape\nadd
        up to 420 degrees, which means that when your artist is done drawing,\nit
        will be facing a different direction than when you started.  That new direction\nis
        exactly 60 degrees to the right of where you began."
      Course 4 Artist 11: |-
        Now for a challenge!  Feel free to use trial
        and error. You are not expected to get the image perfect the first time.   Want
        to see more hints?  Click here!
      Course 4 Artist 12: "Want a second peek at the inspiration design\nor the hints?
        \ Click here!\\\r\n\\\r\nOtherwise, make a design all your own!"
      Course 4 Artist 13: |-
        Still playing?  Here is a blank canvas where
        you can design anything you want!
      Course 4 Artist 2: |-
        Can you use a loop to draw the greyed out square?  (Each
        side is 300px long)
      Course 4 Artist 20: |-
        Still playing?  Here is a blank canvas where
        you can create whatever you want!
      Course 4 Artist 3: |-
        Try to figure out what happens if you run this
        code (or press "Run" to test it). Then, repeat it enough times to complete
        the drawing.
      Course 4 Artist 4: |-
        How many degrees are in a circle?  Fill in
        the repeat block with that number to create a circle of colors.
      Course 4 Artist 5: |-
        Draw the other half of this design so it's
        symmetrical. The triangles are equilateral and are 50 pixels long. Hint: You
        may have to run the code several times to figure out all of the blocks that
        need to be added.
      Course 4 Artist 6: "Complete the code to draw these triangles.  \\\r\n\\\r\nEach\nequilateral
        triangle has sides of 100 pixels. "
      Course 4 Artist 7: |-
        Now nest this loop inside another loop to draw
        10 triangles. This is called a nested loop. Hint: All 10 triangles complete
        a 360 degree rotation.
      Course 4 Artist 8: |-
        Draw this sun by looping this whole block of
        code multiple times.
      Course 4 Artist 8a: |-
        Remember this shape?  Now we're going to
        let you build it without giving you any blocks to start!
      Course 4 Artist Binary 1: "Here's a function that takes a binary\nstring of
        1's and 0's and instructs the artist to follow them from left\nto right, top
        to bottom.  The artist will fill-in the squares when it sees\na 1 and ignore
        the square when it sees a 0. \\\r\n\\\r\nRun this code to see how\nthe artist
        uses binary to draw this pattern."
      Course 4 Artist Binary 2: |-
        Which of these binary strings could
        you loop 8 times to draw this image?
      Course 4 Artist Binary 3: |-
        Can you draw this pattern by looping
        just three binary digits (0s and 1s)?
      Course 4 Artist Binary 4: |-
        Each binary string represents one row
        of this picture. Can you rearrange them so it draws a smiley face instead
        of a frowny face?
      Course 4 Artist Binary 5: |-
        Which 6 digit binary string, repeated
        11 times, will draw this image?
      Course 4 Artist Binary 6: |-
        What is the shortest binary string that
        you can repeat to draw this image?
      Course 4 Artist Binary 7: Finish this drawing.
      Course 4 Artist Binary Free Play 2: |-
        Free Play: Here's a blank
        canvas for you to draw on.  Have fun!
      Course 4 Artist Binary Free Play 2a: "Here's a higher resolution\ncanvas to
        draw on - 16 pixels by 16 pixels!\\\r\n\\\r\nSee what happens when we\nstart
        to get creative with the bits?"
      Course 4 Artist Binary Free Play 2b: Click here to see hints.
      Course 4 Artist Binary pre1: "Binary is a way of representing information\nusing
        only two options.  Here, we're going to use the options \"off\" (represented\nby
        the number 0) and \"on\" (represented by the number 1).  \\\r\n\\\r\nWe've\nprovided
        you with a grid of \"pixels\" that you can walk through and make\ndesigns
        by turning on only certain squares.  Can you have the artist draw\n\"01010101\"
        in binary in the first row?"
      Course 4 Artist For Loops 11: |-
        Remember back in a previous stage
        when we used a variable to control the number of sides in a shape? We are
        going to do the same thing with the `counter` variable now. This pattern starts
        with a triangle and adds one side at a time until it draws a decagon (10 sides).
        Each side should be 100 pixels long.
      Course 4 Artist For Loops 11a: "Let's put it all together!  Using\nyour knowledge
        of `for` loops and the `counter` variable, create this drawing\nwhere each
        shape has two more sides than the last.  Make sure that each side\nis 10 times
        as long as the number of sides in the polygon.\\\r\n\\\r\nVery little\nof
        the code has been provided for you."
      Course 4 Artist For Loops 14: |-
        If you turn a little bit more or
        less than you normally would for a shape, it creates a neat effect. Try using
        some of the code from the last level, but turning 89 degrees to create this
        twisted square spiral.
      Course 4 Artist For Loops 15: |-
        Free Play: Try making some drawings
        of your own using "for loops". We've added a few useful variables for you
        as well.
      Course 4 Artist For Loops 2: |-
        I've put the code for drawing a
        triangle inside a for loop that counts from 50 to 100 by 10.  NOTE: Make sure
        you look at the code before you hit "Run".
      Course 4 Artist For Loops 3: |-
        Use the last puzzle as a reference
        to complete this one.  The smallest triangle has 20 pixel sides, the largest
        has 200 pixel sides, and each triangle is 20 pixels larger than the last.
      Course 4 Artist For Loops 4: |-
        How would you modify what you've
        learned to draw these squares? They start at 15 pixels long, the largest is
        300 pixels long, and each square is 15 pixels larger than the last.
      Course 4 Artist For Loops 6a: |-
        Make three small changes to the
        code from the last level to get this!
      Course 4 Artist For Loops 8: "Just one little change to the code\nfrom the last
        image can create this drawing. Can you figure out what that\nchange is?\\\r\n\\\r\nHint:
        \ You need to remove something!"
      Course 4 Artist For Loops Challenge: "Can you figure out how to\nuse all of
        the things you've learned to create this image?\\\r\n\\\r\nNeed a\nhint? Click
        here."
      Course 4 Artist For Loops inspire: "Free-Play Inspiration: You've\nnow learned
        everything you need to know to make a pattern like this! If this\npicture
        inspires you, try to make something similar. Otherwise, create something\nall
        your own.\\\r\n\\\r\nNeed a hint? Click here."
      Course 4 Artist Functions Inspiration: |-
        Click here to see the hints
        again.
      Course 4 Artist Functions challenge: |-
        Click here to see the hints
        again.
      Course 4 Artist Inspire: "Want a second peek at the inspiration design\nor the
        hints?  Click here!\\\r\n\\\r\nOtherwise, make a design all your own!"
      Course 4 Artist Vars 1: "Let's draw an equilateral triangle. \\\r\n\\\r\nIt\nhas
        to be exactly 100 pixels long on each side."
      Course 4 Artist Vars 11: |-
        Here’s more complicated code using the
        same concepts from the last puzzle - what should you set the "sides" variable
        to in order to draw this picture made of squares?
      Course 4 Artist Vars 12: |-
        Let's set the "sides" variable to

        5.  The more sides we add to this algorithm, the bigger this whole pattern
            gets! Notice that there is another variable called "length". We can now
            use that wherever we have a "move forward." Set the "length" variable
            to 75 for this shape.
      Course 4 Artist Vars 13: "When a shape has lots of sides, each\nside needs to
        be shorter if you want the whole pattern to fit on the screen.\n\\\r\nLet's
        recreate the algorithm for this amazing pattern, but instead of\nmanually
        setting the `length` variable, let's use a math block with the `sides`\nvariable
        inside to make sure that each shape fits correctly. The perimeter\nof each
        polygon is 300 pixels.\\\r\nNeed some hints?  Click here."
      Course 4 Artist Vars 14: "Free Play: Check it out! Now your algorithm\nis nested
        within one more loop. Experiment with changing the values of your\ntwo variables
        to draw cool patterns.\\\r\n\\\r\nFor even more effect, try playing\nwith
        color!  Use random colors inside loops to see how it changes your design."
      Course 4 Artist Vars 2: |-
        Instead of using "move forward by 150,"
        the "move" block is now referencing a variable called "length." Can you
        set "length" to 150 to draw this new triangle?
      Course 4 Artist Vars 4: |-
        Now I want to make a rectangle that is
        twice as tall as it is wide. We've got a variable called "width" that needs
        to be set to 100. Can you use the math blocks to complete the code?
      Course 4 Artist Vars 6: "Here’s some code that can draw any regular\npolygon.
        There’s a new variable called sides that is set to 4. Can you use\nthe sides
        variable (along with the math block) to turn the right amount regardless\nof
        how many sides there are in the polygon?\\\r\n\\\r\nClick here to go back
        to\nthe hint!"
      Course 4 Artist Vars 7: "Use what you learned in the last puzzle\nto create
        this hexagon using the \"sides\" variable.\\\r\n\\\r\nSee how you could\nchange
        just one value to draw a triangle,  square, pentagon, or octagon?"
      Course 4 Artist Vars 8: |-
        Free Play: Experiment with the number
        of sides this shape has. Can you change the algorithm so that the overall
        size of the shape stays the same, no matter how many sides it has? Hint: If
        you divide your starting length by the number of sides, the length of each
        side will get shorter as the number of sides gets higher.
      Course 4 Bee 1: "The bee can't tell what's under the cloud! \\\r\n\\\r\nUse\nthe
        `if` block to check whether there is a flower under the cloud. \\\r\n\\\r\nGet\nnectar
        one time, ONLY if there is a flower."
      Course 4 Bee 2: |-
        Use the "if/else" block to check each object
        to see if it's a flower or a honeycomb . If it's a flower, collect one nectar...otherwise,
        make one honey!
      Course 4 Bee 3: |-
        The unknown object is either a flower or a honeycomb.
        This time, use the if/else block to collect one nectar if it is a flower,
        else make one honey (because then it would be a honeycomb).
      Course 4 Bee Loops 5 NEW: |-
        Here are three flowers. Can you find
        the pattern of instructions that you need to repeat 3 times to collect the
        nectar with the fewest number of blocks?
      Course 4 Bee Loops 5a NEW: |-
        Now, use loops to help the bee collect
        all the nectar on it's way to the honeycomb with as few blocks as possible.  When
        you get there, don't forget to make honey!
      Course 4 Bee Params 1: |-
        Write a sequence to collect all of the
        nectar using `get 3 nectar` which turns, moves to collect the nectar, and
        then returns to the original location.
      Course 4 Bee Params 2: |-
        Modify the "get 3 nectar" function so
        it makes me turn right instead of left to the flowers.
      Course 4 Bee Params 3: |-
        Now there are flowers on both sides! We've
        added variables called "left" and "right" for you to use, and added a
        parameter called "direction" to "get 3 nectar". Edit "get 3 nectar"
        so that the bee turns the correct direction when the variables "left" or
        "right" are passed into the function.
      Course 4 Bee Params 4: |-
        Try using your new function to collect
        nectar from all of the flowers. Remember to use the left and right variables.
      Course 4 Bee Params 5: |-
        Let's start from scratch - can you create
        a new function called "get 5 nectar" with a direction parameter?
      Course 4 Bee Params 6: |-
        Wouldn't it be nice if we could collect
        all of these nectars with the a single function? Try adding a new parameter
        to your function called "nectar units" to control the amount of nectar to
        collect. You'll probably want to rename the function too!
      Course 4 Bee Params 7: |-
        Try using your new function to collect
        all of this nectar.
      Course 4 Bee Params 8: |-
        Challenge: Now there's honey to deal with
        too! Rewrite your function to use both the number of honey units and the number
        of nectar units.  How would you use those numbers to decide what you should
        do?
      Course 4 EC 1a: No rules. No clues. Just the challenge!
      Course 4 EC 1b: No rules. No clues. Just the challenge!
      Course 4 EC 2a: No rules. No clues. Just the challenge!
      Course 4 EC 2b: No rules. No clues. Just the challenge!
      Course 4 EC 2c: No rules. No clues. Just the challenge!
      Course 4 Maze 2: Avoid the TNT!
      Course 4 Maze 3: 'Program the angry bird to get to the pig. '
      Course 4 Maze 4: |-
        Try the "repeat" block to use fewer blocks
        when solving this puzzle...
      Course 4 Maze 5: 'Կարո՞ղ ես գլուխկոտրուկը լուծել՝ հնարավորինս քիչ բլոկներ օգտագործելով:'
      Course 4 Play Lab Params 1: |-
        Here's a function called `jump` that
        causes your main character to jump up 100 pixels. Run the program and use
        the jump function to collect all of the flags by moving the dog with the arrow
        keys.
      Course 4 Play Lab Params 10: "We've added one last function for\nyou. \\\r\n\\\r\nUse
        an \"if\" statement to program your game to call the \"level_up\"\nfunction
        only when \"player_score\" becomes greater than a certain number.\\\r\n\\\r\nFor\nexample:
        \"player\\_score\" > 6\\\r\n\\\r\nPlay the game, and make it to level 3\nto
        move to the next puzzle. "
      Course 4 Play Lab Params 2: "Now we've got flags that are too\nhigh for our
        current jump! Let's use both the \"up\" and \"down\" arrows\nso that we can
        have multiple jump heights.  \\\r\n\\\r\nWe need to add a parameter\nto our
        jump function called \"height\".  The up arrow should cause the dog\nto jump
        200 pixels and the down arrow should make it jump only 100 pixels."
      Course 4 Play Lab Params 3: |-
        We have added another parameter to
        the jump function so that we can use it with other actors. Each actor is represented
        by a number, starting from one. Edit the "jump" function so that it uses
        the "actor" parameter to make the correct character jump.
      Course 4 Play Lab Params 4: "Here's a function called `patrol`.\n\\\r\n\\\r\nEdit
        `patrol` to move Cat up 400 pixels and then down 400 pixels."
      Course 4 Play Lab Params 5: |-
        Edit the the "patrol" function to
        add an "actor" parameter, so that we can call it for each of the actors
        on the screen. Remember, the actors correspond to numbers 1, 2, and 3.
      Course 4 Play Lab Params 6: |-
        Add another parameter called "speed"
        to the "patrol" function. Try using a "set speed" block with the new "speed"
        parameter to help Penguin get both flags before the other sprites even get
        one.
      Course 4 Play Lab Params 7: "Let's have some fun! Look at the\ncode provided
        to see if you can figure out what each block does.  \\\r\nWhen\nyou're done,
        use the arrow keys to control Dog and collect all of the flags.\\\r\nNOTE:\nYou
        don't need to make any changes to the program"
      Course 4 Play Lab Params 8: |-
        Use the `when actor touches` block
        to send Dog back to the top-left ONLY if Dog touches any of the other actors.
      Course 4 Play Lab Params 9: "Here's our game from an earlier stage,\nbut most
        of the code is hidden. There’s a new function `score_points.`\\\r\n\\\r\nEdit\nthe
        function so that a new parameter called `points` can be added to `player_score`.\n\\\r\n\\\r\nThe
        variable `player_score` should increase each time Dog tags Cat\nwith hearts,
        and decrease each time that Cat tags Dog with hearts.\\\r\n\\\r\nNote:\nWhen
        you're done, click \"Run\" to play.  When Dog scores 6 points, you will\nmove
        on to the next puzzle. "
      Course 4 Play Lab Vars 1: |-
        This time you don't have to write any
        code, just hit "Run" to play the game! In this game, you're the dog who
        is trying to collect more flags than the cat. Use the down arrow to control
        the dog. Press "Finish" when you're done playing.
      Course 4 Play Lab Vars 2: |-
        The race in that last puzzle wasn't
        very fair! Change the `dog_speed` variable to make sure you can collect more
        flags than Cat. The first to collect 10 flags wins!
      Course 4 Play Lab Vars 3: |-
        Use the left and right arrows to move,
        and the up arrow to jump. See if you can collect all of the flags.
      Course 4 Play Lab Vars 4: |-
        Now we're using a variable called "height"
        to control how high the dog can jump. Update the "height" variable so that
        the dog can jump high enough to reach all the flags.
      Course 4 Play Lab Vars 5: |-
        Let's build a game! First we'll need
        a score. Rebuild the code that you saw in the last level to set the score
        to 10.
      Course 4 Play Lab Vars 6: "Use the right arrow to shoot hearts.\\\r\n\\\r\nIn\nour
        game, how should we score points? Add 1 to your \"points\" variable each\ntime
        Dog hits Cat with a heart. Use the \"when actor 2 touches anything\"\nevent
        to trigger an update to your score. You can increment your variable\nby setting
        \"points = points + 1.\" Get your score up to 10 (going one at\na time!) to
        pass the level."
      Course 4 Play Lab Vars 7: |-
        Nice, now let's make sure this game
        isn't too easy to play. Any time Dog (actor 1) gets hit by yellow hearts
        from Cat (actor 2), you should lose a point. Start with 10 points so it's
        not too hard. Let your score drop down from 10 to 0 to pass the level.
      Course 4 Play Lab Vars 9: "Free Play time! Here are all of the\nvariables we've
        played with so far in this stage, as well as a few more in\ncase you want
        them. \\\r\n\\\r\nNotice that there are now so many blocks in our\ntoolbox
        that they need to be organized!  Here, we've put each piece into\nan appropriate
        category.  Take some time to explore everything that is available.\nWhen you're
        done browsing, make a game or story using repeats, variables,\nand events.
        \ \\\r\n\\\r\nHint: scroll down to see all the commands in the workspace."
      Course 4 Play Labs For Loops 1: |-
        Let's make the dog speak every
        number from 1 to 100. Use a `for` loop and the counter block to speak the
        counter variable each time the loop is run.
      Course 4 Play Labs For Loops 3: |-
        If we count by larger numbers,
        we count even higher in the same amount of time. Try making Pirate Pegleg
        count from 10 up to 1000, adding 10 at a time.
      Course 4 Playlab For Loop Freeplay: |-
        Freeplay: Use everything you've
        learned so far to make a game that includes a `for` loop!
      Course 4 Playlab For Loops 4b: "Now, these two characters are going\nto race!
        \ \\\r\n\\\r\nEach of them will move `counter` steps at a time, but their\ncounters
        will have different values because of the `for` loops.  \\\r\n\\\r\nCan\nyou
        change the increment in one of the loops so that the race is a tie?"
      Course 4 Playlab For Loops 5b: |-
        Adjust the interval on these `for`
        loops so that the two characters end in the exact same place.
      Course 4 Playlab For Loops 6b: "Edit this `for` loop to create\na game that's
        fun for you to play!\\\r\n\\\r\nPress \"Run\" and click Madame\nUnicorn four
        times to win. "
      Course 4 SCF 1: |-
        Use the suggested functions to draw four rows
        of hexagons. Notice how our even numbered rows are shifted to the right?
      Course 4 SCF 1a: |-
        Can you figure out how to collect all of this
        nectar with the fewest blocks possible?
      Course 4 SCF 1b: |-
        Can you figure out how to collect all of this
        honey with the fewest blocks possible?
      Course 4 SCF 2: |-
        Use what you learned in the previous level to
        draw an image like this. Note: The code becomes more simple if you incorporate
        parameters.
      Course 4 SCF 3: |-
        Use what you learned in the previous level to
        draw an image like this. Note: The code becomes more simple if you incorporate
        parameters.
      Course 4 SCFL 1: |-
        Solve this puzzle using the fewest number of
        blocks possible.
      Course 4 SCFL 1a: |-
        Can you get Skrat to his acorn using as few
        blocks as possible?
      Course 4 SCFL 1b: |-
        Can you get Skrat to his acorn using as few
        blocks as possible?
      Course 4 SCFL 2: |-
        Solve this puzzle using the fewest number of
        blocks possible.
      Course 4 SCFL 3: Can you figure out how to re-create this drawing?
      Course 4 SCFL 4: Can you figure out how to re-create this drawing?
      Course 4 SCFL 6: |-
        Can you figure out how to re-create this drawing
        with a single loop?
      Course 4 SCFL 7: |-
        The artist wants to catch some waves! Can you
        figure out how to re-create this drawing?
      Course 4 SCV 1: Click here to view the instructions again.
      Course 4 SCV 2: Click here to view the instructions again.
      Course 4 SCV 3: "Now for a game of tag!  Tag Cat to get 2 points.\nTag Penguin
        to get 3 points.  Get exactly 10 points to win!\\\r\nBut be careful,\nwhen
        Cat and Penguin tag each other, they take points away.\\\r\n\\\r\nAdd the\nblocks
        necessary to make this game work the way it's been explained.  How\nwill you
        get Dog to move in all directions using the arrow keys?  How will\nyou add
        points when Dog tags Cat or Penguin?  How will you subtract points\nwhen Cat
        and Penguin touch?"
      Course 4 SCV 4: |-
        Solve this puzzle with the fewest number of blocks
        possible.
      Course 4 SCV 5: |-
        Solve this puzzle with the fewest number of blocks
        possible.
      Course 4 SCV 6: Click here to view the instructions again.
      Crack Random Substitution: Հրահանգներ
      Crack a Caesar Cipher: Հրահանգներ
      Infinity_catch: |-
        Can you make Elsa ("actor 2") catch up with
        Anna by using the arrow keys?
      Infinity_finale: Create anything you like and share it!
      Infinity_move_collide: |-
        Hiro is "actor 1".  Move him right to
        Baymax, and play a sound when they touch.
      Infinity_move_directions: |-
        Baymax is "actor 2".  Add Move blocks
        and then move Baymax using the arrows.  Make him touch the two other characters.
      Infinity_move_right: |-
        Hiro is "actor 1".  Use the Move block
        to move Hiro right to touch Baymax.
      Infinity_repeat: |-
        Use a "repeat forever" block to make Anna move
        up and down 400 pixels.
      Infinity_say: Make Anna say "Hi there." by using the Say block.
      Infinity_shoot: |-
        Baymax is "actor 2".  Make Baymax throw a rocket
        at Hiro.
      Infinity_shoot_directions: |-
        Hiro is "actor 3".  Make Hiro throw
        a projectile to each of the four characters.  Wait one second between each
        throw.
      Infinity_touch_score: |-
        Make Anna score a point when she touches
        a snowflake.  Then click "Run" and steer her to touch each snowflake once.
      K-1 Artist Loops 1: Գծիր այս գիծը՝ տեղաշարժվելով արևելելք 4 անգամ
      K-1 Artist Loops 2: 'Հիմա գծե՛ք նույն գիծը օգտագործելով ՙՙկրկնություն՚՚ բլոկը:'
      K-1 Artist Loops 3: 'Կրկնե՛ք այս բլոկները, որպեսզի նկարեք 6 գիծ: '
      K-1 Artist Loops 4: 'Կարո՞ղ է ՙՙկրկնություն՚՚ բլոկը օգնել, որպեսզի նկարեք ամրոցի
        տանիքը:'
      K-1 Artist Loops 5: 'Ո՞ր բլոկներն է պետք կրկնել 4 անգամ, որպեսզի նկարեք այս
        աստիճանները:'
      K-1 Artist Loops 6: 'Այստեղ պետք են 2 ՙՙկրկնություն՚՚ բլոկներ. մեկը բարձրանալու,
        մյուսը իջնելու համար:'
      K-1 Artist Loops 7: 'ՙՙԿրկնություն՚՚ բլոկը կօգնի, որպեսզի վերջացնեք այս նկարը:'
      K-1 Artist Loops 8: 'Այստեղ աստիճանավանդակներն ավելի լայն են:'
      K-1 Artist Loops 9: 'Ո՞րն է այս աստիճանները նկարելու ամենահեշտ ձևը:'
      K-1 Artist Loops Free Play: 'Նկարե՛ք հետաքրքիր ինչ-որ բան:'
      K-1 Artist1 1: նկարիր կատվի բեղերը երկու գծով
      K-1 Artist1 10: Գծիր և թռիր՝ ընդհատվող ուղով հաղթական X-ին հասնելու համար
      K-1 Artist1 2: Draw the whisker on the cat with two lines!
      K-1 Artist1 3: տար երկու գիծ դեպի արևելք և երկու գիծ դեպի հյուսիս՝ տունը ավարտին
        հասցնելու համար
      K-1 Artist1 4: վերև, ուղիղ և ներքև գծեր տար՝ ամրոցը ավարտին հասցնելու համար
      K-1 Artist1 5: նկարիր ծաղիկի ցողունը երկու գծով
      K-1 Artist1 6: ավարտիր նկարը՝ օգտագործելով թռիչքային բլոկը
      K-1 Artist1 9: գծիր և թռիր՝ ընդհատվող գծերը ավարտելու համար
      K-1 Artist2 1: Գծիր քառակուսի եռանկյան տակ
      K-1 Artist2 2: թռիր և գծիր քառակուսի տան կողքը
      K-1 Artist2 3: Գծիր քառակուսի մեկ այլ քառակուսու վերևը
      K-1 Artist2 4: Գծիր ուղղանկյունը՝  կամուրջն ավարտին հասցնելու համար
      K-1 Artist2 5: Draw a rectangle to complete the bridge supports
      K-1 Artist2 6: Գծիր երկու քառակուսի՝ ուղղանկյուն ստանալու համար
      K-1 Artist2 Assessment1: 'Գնահատում: Գծիր քառակուսի մյուս քառակուսու կողքը'
      K-1 Artist2 Free Draw: Գծիր ինչ որ բան
      K-1 Artist2_7: Գծիր ուղղանկյուն՝ պահարանի վերևի դարակը ունենալու համար
      K-1 Bee 1: Տեղափոխիր ինձ դեպի ծաղիկը, վերցրու նեկտարը, հետո տեղափոխիր ինձ դեպի
        փեթակը և պատրաստիր մեղր
      K-1 Bee 11: Get three nectar and then make one honey
      K-1 Bee 13: Get three nectar and then make one honey!
      K-1 Bee 14: Տար ինձ դեպի նեկտարը, վերցրու այն, տար ինձ դեպի մեղրը և պատրաստիր
        մեղր
      K-1 Bee 15: Get two nectar to make two honey!
      K-1 Bee 2: Տեղափոխիր ինձ դեպի ծաղիկը, վերցրու նեկտարը, հետո տեղափոխիր ինձ դեպի
        փեթակը և պատրաստիր մեղր
      K-1 Bee 3: Տեղափոխիր ինձ դեպի ծաղիկը, վերցրու նեկտարը, հետո տեղափոխիր ինձ դեպի
        փեթակը և պատրաստիր մեղր
      K-1 Bee 4: Վերցրու երկու նեկտար և պատրաստիր երկու մեղր
      K-1 Bee 5: Get three nectar and then make three honey!
      K-1 Bee 6: Վերցրու երկու նեկտար և պատրաստիր երկու մեղր
      K-1 Bee 7: Վերցրու երեք նեկտար և պատրաստիր երեք մեղր
      K-1 Bee 9: Վերցրու երկու նեկտար և պատրաստիր երկու մեղր
      K-1 Bee Loops 1: Հավաքի՛ր նեկտարը մեղր պատրաստելու համար։
      K-1 Bee Loops 10: Հավաքի՛ր նեկտարը և պատրաստի՛ր մեղրը ամբողջությամբ։
      K-1 Bee Loops 11: Հավաքի՛ր նեկտարը և պատրաստի՛ր մեղրը ամբողջությամբ։
      K-1 Bee Loops 12: Get all of the nectar and all of the honey.
      K-1 Bee Loops 2: Օգտագործիր "կրկնություն" հրամանը տեղաշարժվելու համար, իսկ հետո
        հավաքի՛ր նեկտարը և պատրաստի՛ր մեղր։
      K-1 Bee Loops 3: |-
        Use three `repeat` loops to get the nectar and
        make honey!
      K-1 Bee Loops 4: |-
        Use `repeat` loops to get the nectar, make honey,
        and to move!
      K-1 Bee Loops 5: Use `repeat` loops to get the nectar and honey!
      K-1 Bee Loops 6: |-
        Use a `repeat` loop to get the nectar, get honey,
        and to move!
      K-1 Bee Loops 7: Հավաքի՛ր նեկտարը և պատրաստի՛ր մեղր։
      K-1 Bee Loops 8: Հավաքի՛ր նեկտարը և պատրաստի՛ր մեղր։
      K-1 Bee Loops 9: Get the all the nectar and make all of the honey.
      K-1 Building a Foundation Assessment: |-
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      K-1 Maze 10: 'Go around the TNT to get me to the pig! '
      K-1 Maze 11: 'Որոշի՛ր ուղին և տա՛ր ինձ այդ հիմար խոզուկի մոտ: Խուսափի՛ր TNT-ները,
        այլապես կպայթես: Հուշում՝ նա ինձնից հարավ է:'
      K-1 Maze 2: Move me East to get me to the pig!
      K-1 Maze 3: Move me South to get me to the pig!
      K-1 Maze 4: Move me North to get me to the pig!
      K-1 Maze 5: Move me East to get me to the pig!
      K-1 Maze 6: Move one way, then another to get me to the pig!
      K-1 Maze 7: Move one way, then another to get me to the pig!
      K-1 Maze 8: Move one way, then another to get me to the pig!
      K-1 Maze 9: Move one way, then another to get me to the pig!
      K-1 Maze Loops 1: Տա՛ր ինձ խոզի մոտ։
      K-1 Maze Loops 10: Տա՛ր ինձ խոզի մոտ։ "Կրկնություն" բլոկը օգտագործելը այն առավել
        կհեշտացնի։
      K-1 Maze Loops 11: "Get me to the pig!  \\\r\nThe `repeat` loop will\nmake this
        easier."
      K-1 Maze Loops 12: |-
        Get me to the pig! The `repeat` loop will make
        this easier.
      K-1 Maze Loops 2: Օգտագործի՛ր "կրկնություն" բլոկը հասնելու խոզին։
      K-1 Maze Loops 3: Get me to the pig! Be sure to use `repeat` loops.
      K-1 Maze Loops 5: Get me to the pig! Be sure to use `repeat` loops.
      K-1 Maze Loops 6: Get me to the pig! Be sure to use `repeat` loops.
      K-1 Maze Loops 7: Get me to the pig! Be sure to use `repeat` loops.
      K-1 Maze Loops 8: Use `repeat` loops to get me to the pig.
      K-1 Maze Loops Assessment 1: Նայիր այն ամենին ինչ սովորել ենք։ Օգտագործիր "կրկնություն"
        բլոկը հասնելու խոզին։
      K-1 Maze Loops Assessment 2: |-
        Use `repeat` loops to get me to the
        pig!
      K-1 Maze Sequence Assessment 1: "Let's see what you've learned!\\\r\nMove\none
        way, then another to get me to the pig."
      K-1 Maze Sequence Assessment 2: |-
        Move one way, then another to
        get me to the pig.
      K-1 artist 1 level 10: Գծիր ըդհատվող գծերը՝ օգտագործելով թռչել և գծել բլոկերը
      K-1 artist 1 level 9: Գծիր երեք գծով
      K-1 maze debug 1: Change the code to get me to the pig!
      K-1 maze debug 10: |-
        Debug this level by rearranging and changing
        blocks to get me to the pig!
      K-1 maze debug 11: "This is a test!\\\r\nDebug this level by rearranging\nand
        changing blocks to get me to the pig"
      K-1 maze debug 2: |-
        Figure out what is missing and then add blocks
        to get me to the pig!
      K-1 maze debug 3: |-
        Something is not quite right. REMOVE blocks
        to get me to the pig!
      K-1 maze debug 4: |-
        Run through these blocks and fix them! I think
        I might be going in the wrong direction.
      K-1 maze debug 5: |-
        Debug this level by rearranging and changing
        blocks to get me to the pig!
      K-1 maze debug 6: |-
        Debug this level by rearranging and changing
        blocks to get me to the pig!
      K-1 maze debug 7: |-
        Debug this level by rearranging and changing
        blocks to get me to the pig!
      K-1 maze debug 8: |-
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 maze debug 9: |-
        Debug this level by rearranging and changing
        blocks to get me to the pig!
      NEW Course 4 Artist Functions 11: |-
        Now we want to create a new
        function called `draw a line of squares` that draws six squares all in a row.  Can
        you build this function using this `draw a square 20` function that we created
        for you?
      NEW Course 4 Artist Functions 12: |-
        Use the `draw a line of squares`
        function from the last puzzle to draw this pattern.
      NEW Course 4 Artist Functions 13: |-
        Can you draw a star shape using
        the `draw a line of squares` function?
      NEW Course 4 Artist Functions 14: 'Free-play time! '
      NEW Course 4 Artist Functions 2: |-
        Can you draw 3 squares 20 pixels
        apart from one another? Each square is 100 pixels in size.
      NEW Course 4 Artist Functions 3: "Here is a new type of Block.\nIt is called
        a `function` block. Click \"edit\" then fill it with the code\nfor drawing
        a square with 100 pixel sides. \\\r\n\\\r\nWhen you're done editing\nthe function,
        click \"Close\" to go back to your program."
      NEW Course 4 Artist Functions 4: |-
        Use the `draw a square` function
        to draw this pattern.
      NEW Course 4 Artist Functions 7: |-
        Are you getting the hang of how
        to use function blocks? Let's modify this square so that it is 200 pixels
        in size. Click on "edit" to enter the `draw a square` function editor. Remember
        to click on "Close" to get out of the function editor.
      NEW Course 4 Artist Functions 8: |-
        We have created a new function
        for you called "draw a triangle".  Can you edit the function definition
        to draw a triangle with 100 pixel sides?
      NEW Course 4 Artist Functions 9: |-
        Can you solve this by adding
        only one block?
      NEW Course 4 Artist Params 10: |-
        Create a `draw a hexagon` function
        block with a length parameter. This hexagon has sides that are 100 pixels
        in length.
      NEW Course 4 Artist Params 11: |-
        Can you figure out how to draw
        this shape? Edit the function to use the "sides" parameter.
      NEW Course 4 Artist Params 12: |-
        Can you complete this drawing?
        The sides of all the shapes are 100 pixels long.
      NEW Course 4 Artist Params 12a: |-
        This image is similar to the last.
        Can you use a `for` loop with your function to make this design?
      NEW Course 4 Artist Params 13: "Let's edit this \"draw a polygon\"\nfunction.
        It already has a \"sides\" parameter. Now, let's add a \"length\"\nparameter.
        \\\r\nThe perimeter of each shape is 200 pixels long. Do you remember\nthe
        equation to make shapes the same size when they have a different number\nof
        sides?"
      NEW Course 4 Artist Params 14: |-
        Edit "draw a spiral edge" to
        use "length" and "sides" parameters, then recreate these shapes.
      NEW Course 4 Artist Params 15: |-
        Freeplay: Here are the functions
        you've written, and some more for you to play with. Draw something awesome!
        Play with the pen width to see how different your drawings look!
      NEW Course 4 Artist Params 3: "Now let's use the function to draw\n5 triangles
        in a row. Each triangle is 30 pixels apart.\\\r"
      NEW Course 4 Artist Params 4: |-
        Do you notice anything different
        about these function blocks? Click “Run” to see what happens.
      NEW Course 4 Artist Params 5: |-
        Replace the `???` in the `length`
        parameter input block. The pentagon has 100 pixel sides.
      NEW Course 4 Artist Params 6: |-
        Fill in the "length" parameter
        to draw these shapes by replacing the "???" with the right numbers. The
        square and triangle have 100 pixels sides while each side of the hexagon is
        75 pixels long.
      NEW Course 4 Artist Params 7: |-
        Can you complete this drawing? The
        sides of each triangle are 25 pixels larger than the last.  The first triangle
        has 25 pixel sides.
      NEW Course 4 Artist Params 8: |-
        The code for this triangle function
        is broken. Can you edit the function to fix it, and then make triangles of
        length 25, 50, and 75?
      NEW Course 4 Artist Params 9: |-
        Click "edit" to fill in the function
        definition of "draw a square" and add a parameter. It should take a length
        parameter, just like the triangle. This time, draw 3 squares: 25, 50 and 75
        pixels in length, each 100 pixels apart.
      NEW Course 4 Artist Params inspire: "Free Play Inspiration: You've\nnow learned
        everything you need to know to make a pattern like this! If this\npicture
        inspires you, try to make something similar. Otherwise, create something\nall
        your own.\\\r\n \\\r\nWant to know how our inspiration pattern was made? "
      NEW Course 4 Artist Vars 12: |-
        Now, recreate the algorithm from
        the last level and create a pentagon with sides of length 150.
      NEW Course 4 Artist Vars 2: |-
        Drag a number block to both the `set
        length` block and the `repeat _ times` block to draw a set of 50 pixel triangles.
      NEW Course 4 Artist Vars 4: "Let's try it again! \\\r\n\\\r\nCan you\nset the
        `length` variable to 60 to make this cool design with hexagons?"
      NEW Course 4 Artist Vars 6: "Draw this pattern of pentagons with\n100 pixel
        sides by setting the right value for `length` and dropping the `length`\nvariable
        into all of the the correct places. \\\r\n\\\r\nSee how you only have\nto
        set the value for `length` once, and the code uses the right value everywhere?"
      NEW Course 4 Bee For Loops 1: |-
        Use a loop to collect the nectar
        from each flower.
      NEW Course 4 Bee For Loops 10a: |-
        Ready for a challenge?  Take what
        you've learned about loops and try to solve this problem. Remember: You may
        have to run through solutions multiple times before you figure out all of
        the steps.
      NEW Course 4 Bee For Loops 2: |-
        Add the code necessary to make sure
        the bee collects all the nectar. Look at how much code you need for this puzzle!
        (We'll learn a simpler way in the next puzzle.)
      NEW Course 4 Bee For Loops 3: |-
        Ah, the "for loop" makes this
        much easier! All the code you need is here, take a look at how it is put together
        then click "Run" to see how it works.
      NEW Course 4 Bee For Loops 4: |-
        Replace the ??? in the "for loop"
        with the largest amount of nectar the bee has to collect.
      NEW Course 4 Bee For Loops 4 4: |-
        Now we need to move forward "counter"
        times, then get nectar "counter" times.  Can you use two "repeat" loops
        to solve this challenge?
      NEW Course 4 Bee For Loops 5: |-
        You can also use a "for loop"
        to count down. Try gathering this nectar by counting down from 5 to 1 by 1.
      NEW Course 4 Bee For Loops 6: |-
        The last number in your for loop
        is called the "increment". Each time the loop is run, the counter variable
        changes by the value of the increment. Try collecting these flowers using
        an increment of 2.
      NEW Course 4 Bee For Loops 7: "Now, let's combine the \"counter\"\nvariable
        with a math block! How can you use the \"counter\" variable to navigate\nthis
        garden with the fewest number of blocks possible? What do you need to\ndo
        to collect 3, 6, 9, 12, 15 nectar this time? The secret is in the \"counter\"\nvariable!\\\r\n\\\r\nRemember:
        If your loop is counting up, the increment is added\nto your \"counter\" variable
        each time through."
      NEW Course 4 Bee For Loops 8: |-
        You've got this! What should your
        increment be to collect 3, 6, 9, 12, 15 nectar?
      NEW Course 4 Bee For Loops 9: |-
        If your loop is counting down, the
        increment is subtracted from your counter variable each loop. What should
        your increment be to collect 15, then 12, then 9, 6, 3 nectar?
      NEW Course 4 Play Lab Params 11: |-
        It's free play time! Have fun
        with all the blocks in your tool box.
      Overworld Avoid Monsters: |-
        Running into a Creeper is a bad idea.
        Carefully move past the Creepers and reach the safety of your home.
      Overworld Avoid Monsters_2019: |-
        Running into a Creeper is a bad idea.
        Carefully move past the Creepers and reach the safety of your home.
      Overworld Chop Tree: |-
        Wood is a very important resource. Many things
        are made from it. Walk to the tree and use the “destroy block” command to
        chop it down.
      Overworld Chop Tree_2019: |-
        Wood is a very important resource. Many things
        are made from it. Walk to the tree and use the “destroy block” command to
        chop it down.
      Overworld Chop Trees: |-
        We need to build a house before the sun
        goes down. Houses require a lot of wood. Cut down all 3 trees.
      Overworld Chop Trees_2019: |-
        We need to build a house before the sun
        goes down. Houses require a lot of wood. Cut down all 3 trees.
      Overworld Free Play 20x20: |-
        Congratulations! You've completed
        all our puzzles! Now mine, build, and create something unique by using everything
        you've learned so far.
      Overworld Free Play 20x20_2019: |-
        Congratulations! You've completed
        all our puzzles! Now mine, build, and create something unique by using everything
        you've learned so far.
      Overworld House Frame Chosen: |-
        Build the rest of your house from
        any material you'd like. The "repeat" command will come in handy.
      Overworld House Frame Chosen_2019: |-
        Build the rest of your house from
        any material you'd like. The "repeat" command will come in handy.
      Overworld Move to Sheep: |-
        Add a second “move forward” command to
        reach the sheep.
      Overworld Move to Sheep_2019: |-
        Add a second “move forward” command to
        reach the sheep.
      Overworld Place Wall: |-
        Every house starts with a wall. Build the
        first part of your house by putting the "place" and "move forward" commands
        inside the repeat loop.
      Overworld Place Wall_2019: |-
        Every house starts with a wall. Build the
        first part of your house by putting the "place" and "move forward" commands
        inside the repeat loop.
      Overworld Plant Crops: |-
        It’s good to plan ahead. Plant crops on
        both sides of the water so you don’t get hungry later on.
      Overworld Plant Crops_2019: |-
        It’s good to plan ahead. Plant crops on
        both sides of the water so you don’t get hungry later on.
      Overworld Powered Minecart: |-
        Great job! You’ve gathered lots of
        resources and built a modest home. Now lay rail from the edge of the map to
        the door of your house.
      Overworld Powered Minecart_2019: |-
        Great job! You’ve gathered lots of
        resources and built a modest home. Now lay rail from the edge of the map to
        the door of your house.
      Overworld Shear Sheep: |-
        Sheep-shearing time! Use the “shear” command
        to gather wool from both sheep.
      Overworld Shear Sheep_2019: |-
        Sheep-shearing time! Use the “shear” command
        to gather wool from both sheep.
      Standalone_Artist_1: |-
        Welcome to Artist! First off, let's try
        to make a simple square using the turn right block and move forward block.
        Each side should be 100 pixels long.
      Standalone_Artist_8: |-
        Here's a function called "Draw a shape"
        that we've programmed to draw hexagons. Run the code to see what it does
        and then experiment with the function to see what happens. Can you make it
        draw a pattern of squares, triangles, or octagons?
      Underground Avoiding Lava: |-
        Lava is hiding beneath some of these
        blocks, which you'll need to cover up before moving forward. An "if" command
        will come in handy here. Add a "move forward" command in the correct place
        to mine these blocks.
      Underground Avoiding Lava_2019: |-
        Lava is hiding beneath some of these
        blocks, which you'll need to cover up before moving forward. An "if" command
        will come in handy here. Add a "move forward" command in the correct place
        to mine these blocks.
      Underground If Statements: |-
        Now things are getting tricky. Mine
        3 redstone, but don’t fall in the lava. Use an "If" command to place cobblestone
        over any lava you uncover.
      Underground If Statements_2019: |-
        Now things are getting tricky. Mine
        3 redstone, but don’t fall in the lava. Use an "If" command to place cobblestone
        over any lava you uncover.
      Underground Iron: |-
        Walking into molten lava is a bad idea. Place
        cobblestone to create a bridge, then mine at least two of the iron blocks.
      Underground Iron_2019: |-
        Walking into molten lava is a bad idea. Place
        cobblestone to create a bridge, then mine at least two of the iron blocks.
      Underground Mining Coal: |-
        You’ll find the most valuable resources
        underground, but it can get dark. Place at least 2 torches and mine at least
        2 coal.
      Underground Mining Coal_2019: |-
        You’ll find the most valuable resources
        underground, but it can get dark. Place at least 2 torches and mine at least
        2 coal.
      bounce_1: 'Կցել բլոկ է », երբ մեկնել է arrow» բլոկի եւ սեղմեք "Run". Տեղափոխել
        թիավարել օգտագործելով ձախ arrow հասնել ավարտի թիրախին:'
      bounce_10: 'Կա մի այժմ նպատակ վերեւում: Կցել «Հաշիվ կետը» եւ «միավոր մրցակցի
        point" նյութից է », երբ գնդակը նպատակին» եւ «երբ գնդակը սղում թիավարել» նյութից
        մի խաղ. Տես, թե քանի միավոր դուք կարող եք միավոր, նախքան ձեր հակառակորդին
        արդիւնքներ երկու անգամ:'
      bounce_11: 'Այժմ կարող եք կցել նյութից է », երբ վազում» բլոկում. Դուք պետք է
        կցել նոր "գործարկել է նոր գնդակը» բլոկի ավելի քան մեկ տեղում: Բացի այդ, փորձում
        փոխելով տեսարանը կամ արագությունը թիավարել, եւ գնդակը, եւ տեսնել, թե ինչպես
        շատ միավոր դուք կարող եք միավոր, նախքան ձեր հակառակորդին արդիւնքներ երկու
        անգամ:'
      bounce_12: Create your own Bounce game. You can change all the visuals and the
        rules. When youre done, click Finish to let friends try your game on their
        phones.
      bounce_2: Կցել բլոկ է «Երբ աջ arrow» եւ «երբ մեկնել arrow" բլոկների. Տեղափոխել
        թիավարել է հասնել երկու ավարտի թիրախներ.
      bounce_3: 'Այժմ նման բան, ինչպես նաեւ "երբ մինչեւ arrow» բլոկում. Տեղափոխել
        թիավարել դեպի ավարտի թիրախ վերեւում:'
      bounce_4: Այս անգամ, դուք պետք է ավելացնել չորս նյութից. Տեղափոխել թիավարել
        բոլոր չորս ավարտի թիրախների ավարտելու այս հանելուկ.
      bounce_5: Were going to send a ball flying down towards the paddle. Attach a
        block to the "when ball hits paddle" block to ensure the ball reaches the
        finish target.
      bounce_6: Այժմ Սալոնի թիրախը գտնվում է վերեւում. Դուք պետք է կցել նյութից, այնպես
        էլ "Երբ գնդակը հարվածում» բլոկների է լուծել այս հանելուկ.
      bounce_7: 'Կցել նյութից յուրաքանչյուր «երբ» նյութից. Bounce գնդակը մինչեւ այն
        հարվածում է ավարտի թիրախին:'
      course4_artist_fwp_challenge1: 'Փորձեք վազում այս ծրագիրը, եւ փոփոխություններ
        կատարել տեսնել, թե ինչ է տեղի ունենում: Կարող եք պարզել, թե ինչպես է այն աշխատում:
        (Կամ ջնջել այն եւ փոխարինել այն բանի հետ, բոլորովին տարբեր)'
      courseA_maze_seq2: Change the code to get me to the pig!
      courseC_PlayLab_events3: 'Կարո՞ղ ես գրել ծրագիր, որպեսզի շունը (կատարող 1) մետենա
        դեպի կատվին:'
      courseC_PlayLab_events3_2018: 'Կարո՞ղ ես գրել ծրագիր, որպեսզի շունը (կատարող
        1) մետենա դեպի կատվին:'
      courseC_PlayLab_events3_2019: 'Կարո՞ղ ես գրել ծրագիր, որպեսզի շունը (կատարող
        1) մետենա դեպի կատվին:'
      courseC_artist_prog5: |-
        This house needs a roof! Draw the triangle.  Hint:
        all three sides are the same length.
      courseC_artist_prog5_2018: |-
        This house needs a roof! Draw the triangle.  Hint:
        all three sides are the same length.
      courseC_artist_prog5_2019: |-
        This house needs a roof! Draw the triangle.  Hint:
        all three sides are the same length.
      courseD_artist_binary1: "Binary is a way of representing information\nusing
        only two options.  Here, we're going to use the options \"off\" (represented\nby
        the number 0) and \"on\" (represented by the number 1).  \\\r\n\\\r\nWe've\nprovided
        you with a grid of \"pixels\" that you can walk through and make\ndesigns
        by turning on only certain squares.  Can you have the artist draw\n\"01010101\"
        in binary in the first row?"
      courseD_artist_binary1_2018: "Binary is a way of representing information\nusing
        only two options.  Here, we're going to use the options \"off\" (represented\nby
        the number 0) and \"on\" (represented by the number 1).  \\\r\n\\\r\nWe've\nprovided
        you with a grid of \"pixels\" that you can walk through and make\ndesigns
        by turning on only certain squares.  Can you have the artist draw\n\"01010101\"
        in binary in the first row?"
      courseD_artist_binary1_2019: "Binary is a way of representing information\nusing
        only two options.  Here, we're going to use the options \"off\" (represented\nby
        the number 0) and \"on\" (represented by the number 1).  \\\r\n\\\r\nWe've\nprovided
        you with a grid of \"pixels\" that you can walk through and make\ndesigns
        by turning on only certain squares.  Can you have the artist draw\n\"01010101\"
        in binary in the first row?"
      courseD_artist_binary4: |-
        Can you draw this pattern by looping
        just three binary digits (0s and 1s)?
      courseD_artist_binary4_2018: |-
        Can you draw this pattern by looping
        just three binary digits (0s and 1s)?
      courseD_artist_binary4_2019: |-
        Can you draw this pattern by looping
        just three binary digits (0s and 1s)?
      courseD_artist_binary6: |-
        Which 6 digit binary string, repeated
        11 times, will draw this image?
      courseD_artist_binary6_2018: |-
        Which 6 digit binary string, repeated
        11 times, will draw this image?
      courseD_artist_binary6_2019: |-
        Which 6 digit binary string, repeated
        11 times, will draw this image?
      courseD_artist_binary7: |-
        What is the shortest binary string that
        you can repeat to draw this image?
      courseD_artist_binary7_2018: |-
        What is the shortest binary string that
        you can repeat to draw this image?
      courseD_artist_binary7_2019: |-
        What is the shortest binary string that
        you can repeat to draw this image?
      courseD_autorun_binary4_2019: |-
        Can you draw this pattern by looping
        just three binary digits (0s and 1s)?
      courseD_autorun_binary6_2019: |-
        Which 6 digit binary string, repeated
        11 times, will draw this image?
      courseD_autorun_binary7_2019: |-
        What is the shortest binary string that
        you can repeat to draw this image?
      courseD_bee_nestedLoops8: "Collect all of the nectar from each flower\nand make
        honey at the honeycomb. \\\r\n\\\r\nUse a nested loop. "
      courseD_bee_nestedLoops8_2018: "Collect all of the nectar from each flower\nand
        make honey at the honeycomb. \\\r\n\\\r\nUse a nested loop. "
      courseD_bee_nestedLoops8_2019: "Collect all of the nectar from each flower\nand
        make honey at the honeycomb. \\\r\n\\\r\nUse a nested loop. "
      courseD_maze_nestedLoops4: "Get me to the sunflower using the fewest blocks\npossible!
        \ \\\r\n\\\r\nTry using one `repeat` loop inside of another to cut down\non
        the amount of code you need."
      courseD_maze_nestedLoops4_2018: "Get me to the sunflower using the fewest blocks\npossible!
        \ \\\r\n\\\r\nTry using one `repeat` loop inside of another to cut down\non
        the amount of code you need."
      courseD_maze_nestedLoops4_2019: "Get me to the sunflower using the fewest blocks\npossible!
        \ \\\r\n\\\r\nTry using one `repeat` loop inside of another to cut down\non
        the amount of code you need."
      courseD_maze_nestedLoops6: "Let's take this to another level! \\\r\nUse\nloops
        to get me to the sunflower with the fewest loops possible."
      courseD_maze_nestedLoops6_2018: "Let's take this to another level! \\\r\nUse\nloops
        to get me to the sunflower with the fewest loops possible."
      courseD_maze_nestedLoops6_2019: "Let's take this to another level! \\\r\nUse\nloops
        to get me to the sunflower with the fewest loops possible."
      courseE_artist_functions1: "\"Me zombie artist. Me love drawing!\"  \\\r\n\\\r\nHelp\nthe
        zombie draw square glasses.  \\\r\n\\\r\nThe bridge between the glasses is\n25
        pixels shorter than the width of the squares."
      courseE_bee_concept1: |-
        Collect all of the nectar from each flower.
        Use a nested loop.
      courseE_bee_concept1_2018: |-
        Collect all of the nectar from each flower.
        Use a nested loop.
      courseE_bee_functions1: Collect all the nectar from each flower.
      courseE_bee_functions3: "Functions are blocks of code that perform\na task.
        \ \\\r\n\\\r\nUse the `get 5` function to get 5 nectars at a time."
      courseE_bee_functions4: "The `move and get nectar` function turns\nthe bee,
        collects nectar, and then returns the bee to where it started.  \\\r\n\\\r\nUse\nthe
        function to collect all of the nectar."
      courseF_artist_for7: |-
        Make three small changes to the
        code from the last level to get this!
      courseF_artist_for7_2018: |-
        Make three small changes to the
        code from the last level to get this!
      courseF_artist_for7_2019: |-
        Make three small changes to the
        code from the last level to get this!
      courseF_artist_for_challenge1: Can you figure out how to re-create this drawing?
      courseF_artist_for_challenge1_2018: Can you figure out how to re-create this
        drawing?
      courseF_artist_for_challenge1_2019: Can you figure out how to re-create this
        drawing?
      courseF_artist_for_challenge2: |-
        Can you figure out how to re-create this drawing
        with a single loop?
      courseF_artist_for_challenge2_2018: |-
        Can you figure out how to re-create this drawing
        with a single loop?
      courseF_artist_for_challenge2_2019: |-
        Can you figure out how to re-create this drawing
        with a single loop?
      courseF_bee_for8: |-
        You've got this! What should your
        increment be to collect 3, 6, 9, 12, 15 nectar?
      courseF_bee_for8_2018: |-
        You've got this! What should your
        increment be to collect 3, 6, 9, 12, 15 nectar?
      courseF_bee_for8_2019: |-
        You've got this! What should your
        increment be to collect 3, 6, 9, 12, 15 nectar?
      courseF_bee_for_challenge2: |-
        Solve this puzzle using the fewest number of
        blocks possible.
      courseF_bee_for_challenge2_2018: |-
        Solve this puzzle using the fewest number of
        blocks possible.
      courseF_bee_for_challenge2_2019: |-
        Solve this puzzle using the fewest number of
        blocks possible.
      courseF_bee_functions4: "The `move and get nectar` function turns\nthe bee,
        collects nectar, and then returns the bee to where it started.  \\\r\n\\\r\nUse\nthe
        function to collect all of the nectar."
      flappy_1: 'Կցել բլոկ է », երբ սեղմեք" բլոկի, այնուհետեւ սեղմեք «Run»: Սեղմեք
        կամ թակել էկրանին տեղափոխել Flappy դեպի թիրախ:'
      flappy_11: Create your own Flappy game. You can change all the visuals and all
        the rules, even the gravity. When youre done, click Finish to let friends
        try your game on their phones.
      flappy_2: Now weve added some ground.  Attach a block to the "when hit the ground"
        block.  Your code needs to END GAME when Flappy crashes.
      flappy_3: The "Երբ վազում» դաշինքը թույլ է տալիս Ձեզ առաջադրվել կոդը, երբ ձեր
        խաղը սկսվում. Փորձեք ընդլայնված մակարդակի արագությունը եւ flapping է թիրախ.
      flappy_4: Flappy will fly through obstacles unless you write code to make him
        crash. Attach a block to the "when hit an obstacle" block. Your code needs
        to END GAME when Flappy crashes into the first set of pipes.
      flappy_5: Lets add a scoreboard, and count points when Flappy makes it past
        obstacles. Add to the "when pass an obstacle" block, and then score a point
        by flying Flappy through the first set of pipes.
      flappy_6: 'Տես, եթե դուք կարող եք դեռ միավոր մի կետ կատարելուց հետո Flappy տատանել
        կամ փոքր կամ մեծ չափի գումար:'
      flappy_7: Հաջորդը, փորձեք փոխել տեսարանը կցելով մեկ այլ բլոկ է », երբ վազում»
        բլոկում.
      flappy_8: Դուք կարող եք սահմանել visuals ցանկացած ժամանակ, այլ ոչ թե միայն այն
        ժամանակ, երբ խաղը սկսվում. Փորձեք ընդլայնված պատահական տեսարանը, երբ այլ միջոցառումներ
        տեղի ունենալ, օրինակ, երբ անցնող խոչընդոտ.
      flappy_9: Խառնել բաներ են, երբ հարվածում է խոչընդոտ, այլ ոչ թե ավարտվում խաղը
        փորձեք հաշիվը ետ 0.
      frozen circle: |-
        A circle is a special shape. Can you figure out
        what number to replace the question marks with to draw a circle?
      frozen circle function: |-
        Use the new “Create a circle” block to
        create 10 overlapping circles. Don't forget to jump forward between circles.
      frozen circle function in circle: |-
        Now let's create 20 overlapping
        circles, turning 18 degrees between each circle.
      frozen circle function with parameter: |-
        Here's a ”Create circle”
        block that can make circles of different sizes. Can you use this to create
        a small circle of size 5 and a larger circle of size 10?
      frozen cross: |-
        Wrap a “Repeat” block around these commands to create
        a plus sign. Did you notice Elsa can move forward and backward?
      frozen cross rotate: |-
        Now try repeating it 10 times. How many degrees
        do you need to turn between each line?
      frozen cross rotate dense: |-
        Let's repeat it 90 times! How many
        times does 90 go into 360? Hint: It's a really small number.
      frozen diamond: |-
        Use a repeat around these blocks to create a parallelogram.
        It's just like a rectangle but has different angles. This one has 60 degree
        and 120 degree angles instead of all 90 degree angles.
      frozen diamond mini snowflake: |-
        Did you know every snowflake is
        a different shape? Let's create a new snowflake by using another “Repeat"
        block to repeat a parallelogram 4 times, turning right by 90 degrees between
        each parallelogram.
      frozen diamond snowflake: |-
        Now, let's create a new snowflake by
        using the repeat block to repeat a parallelogram 10 times, turning right by
        36 degrees between each one.
      frozen freeplay: |-
        You've officially become a master artist!
        Create a winter wonderland.
      frozen line: 'Բարև: Ես Էլզան եմ Էռենդելլաից: Օգնիր ինձ մի գիծ գծել:'
      frozen perpendicular: |-
        Now let's see if we can create two lines
        that are at a 90 degree angle to each other. You will need to use the “Turn”
        block as well as the “Move” block.
      frozen snowflake branch: |-
        Try using the ”Create a snowflake branch”
        block to create three branches, which starts to look like a snowflake.
      frozen snowflake full: |-
        Now let's repeat it 8 times to make a
        beautiful snowflake!
      frozen snowflower: |-
        Intricate snow patterns can be created with
        very simple shapes. Can you make a pattern by repeating 5 circles of size
        5 and 5 circles of size 10?
      frozen square iterative: 'Կարծես մենք  քառակուսի գծելու կես ճանապարհինենք: Արի
        գծենք 4 գիծ այնպես, որ ստացվի քառակուսի:'
      frozen square loop: |-
        Hi, I’m Anna of Arendelle! Let’s make a square
        with the “Repeat” block, which uses fewer blocks. How many times (???) should
        the “Repeat” block loop the blocks inside it to make a square?
      frozen square loop 3x: |-
        Let's create three squares, turning after
        each square. Be sure to turn by 120 degrees before each new square.
      frozen square snowflake: |-
        Can you create a snowflake using the
        “Repeat” block to make a square 10 times, and the “Turn” block to turn 36
        degrees between each square?
      grade5_artist_binary11: |-
        Free Play: Here's a blank
        canvas for you to draw on.  Have fun!
      grade5_artist_binary4: |-
        Can you draw this pattern by looping
        just three binary digits (0s and 1s)?
      grade5_artist_binary5: |-
        Each binary string represents one row
        of this picture. Can you rearrange them so it draws a smiley face instead
        of a frowny face?
      grade5_artist_binary8: Finish this drawing.
      grade5_artist_binary9: "Here's a higher resolution\ncanvas to draw on - 16 pixels
        by 16 pixels!\\\r\n\\\r\nSee what happens when we\nstart to get creative with
        the bits?"
      k-1 maze 1: Can you make me move West to get to the pig?
      scrat 16: |-
        Acorn! Acorn! Acorn! Use an "if" block to get me there
        with the fewest number of blocks.
      scrat 17: |-
        Ok, let's do that again for practice - this isn't
        very different, but watch out for the wall!
      scrat 18: |-
        The "If-else" blocks checks a condition, and then
        does one thing OR another. To get me to the acorn try to use this new block.
      scrat 19: |-
        One more practice of the "if-else" block, can you
        get it right on your first try?
      scrat 20: |-
        Can you add just 3 blocks to help me solve a more complex
        maze? If you do it right, I can walk any curvy path no matter the length.
        Hurry! The ice is melting!
