"ko":
  data:
    instructions:
      2-3 Artist 1 new_instruction: 안녕, 친구들. 나는 화가란다. 너는 내가 무엇을 그리게 하려면 주어진 블록들로 코드를
        작성할 수 있어. 최대한 적은 블록으로 화면에 표시된 회색 선들을 그려 봐. 각 선들은 길이가 100이야.
      2-3 Artist 11_instruction: '각각 100픽셀인 변 8개로 팔각형인 정지 표지판을 만들어보세요. 얼마나 각을 높여야
        할까요? (도움말: 360을 8로 나누면 무엇일까요?) '
      2-3 Artist 12_instruction: '"반복 회수"블럭을 설정해서 "원"을 만들어 눈알을 완성하세요. 한 번 움직일 때마다
        1도씩 오른쪽으로 움직인다고 할 때 원을 완성시키려면 몇 번을 반복해야 할까요? 180? 360? 500?'
      2-3 Artist 2 new_instruction: '이 집의 벽은 다 완성되지 않았습니다. 각 측면은 100이지만, 완성되지 않은 벽은
        50입니다. 벽을 완성하세요. '
      2-3 Artist 2_instruction: "This house has a half-finished wall. Each side is\n100,
        but the half-finished wall is only 50. Complete the wall. \n"
      2-3 Artist 3.4_instruction: 이 '점프' 블록은 그림을 그리지 않고 예술가를 이동시킬 수 있다. '점프'와 '그리기'
        블록을 사용해서 파선을 그리세요.
      2-3 Artist 3_instruction: 이 모자의 높이는 100픽셀입니다. 70픽셀 더 짧은 모자를 그리세요.
      2-3 Artist 3new_instruction: 빨간 모자의 높이는 100픽셀입니다. 이것보다 70픽셀 더 짧은 검은 모자를 그리세요.
        검은 모자의 너비는 50픽셀입니다.
      2-3 Artist 4_instruction: 이 고양이를 위한 집을 완성해주세요.
      2-3 Artist 5_instruction: 이 코드를 “반복 횟수” 블록으로 바꾸되 단 세번만 사용해 같은 모양의 집을 그려주세요.
      2-3 Artist 6_instruction: 이 집은 지붕이 없잖아! 정삼각형 지붕을 그려야 되겠어. 네가 해 줄 수 있니?
      2-3 Artist 7_instruction: "마지막 윈도우의 오른쪽 절반을 완성하세요.\n윈도우는 25픽셀 크기의 정사각형입니다. \n"
      2-3 Artist 8_instruction: 각 동물을 위해 직사각형의 방을 두 개의 동일한 정사각형 방으로 쪼개주세요. 직사각형은 너비
        200픽셀, 높이 100픽셀입니다.
      2-3 Artist 9_instruction: 이 연을 완성해 봐.
      2-3 Artist Assessment 1_instruction: '평가: 가로 25 픽셀 및 세로 25 픽셀 크기 마지막 치아 그리기
        완료.'
      2-3 Artist Debugging 1_instruction: 이 모자의 최고 길이를 100으로 만들 수 있나요?
      2-3 Artist Debugging 10_instruction: 내 게임패드의 방향 키의 길이가 너무 좁습니다. 10픽셀 더 늘리세요.
      2-3 Artist Debugging 11_instruction: 멋진 눈송이를 완성하게 도와 주세요. 완성시키기 위해 “반복”을 얼마나
        많이 사용해야 하나요?
      2-3 Artist Debugging 12_instruction: 이 장면에 파도를 추가하고 싶습니다. 도와주시겠어요?
      2-3 Artist Debugging 2_instruction: '세 개의 수염을 그리기 위한 이 코드는 현재 에러가 있습니다. 이 코드를
        수정하세요. 힌트: 각 수염을 75픽셀로 늘리세요.'
      2-3 Artist Debugging 3_instruction: '내 보트에 구멍이 났어요! 라인의 각도를 변경해서 고칠 수 있나요? 힌트:
        마지막 각도는 15도 차이납니다.'
      2-3 Artist Debugging 4_instruction: 우리가 그리려고 하는 이미지는 무엇인가요? 각 점들을 연결해서 완성하세요.
      2-3 Artist Debugging 5_instruction: '다리와 발을 그려야할 이 코드는 현재 틀렸습니다. 힌트: 발이 너무 길어요.'
      2-3 Artist Debugging 6_instruction: 현재 다리가 하나 없는 의자에 앉아있습니다. 다리 그리는 블록을 수정해주세요.
      2-3 Artist Debugging 7_instruction: 현재 코드가 그린 C가 뒤집어져 있는 것 같습니다. 고쳐주세요.
      2-3 Artist Debugging 8_instruction: 바람개비가 완성되지 않았습니다. 완성하려면 얼마나 반복해야 하나요?
      2-3 Artist Debugging 9_instruction: '줄기 관련 코드가 올바르지 않습니다. 힌트: 각도를 60도 정도 꺾어
        보세요.'
      2-3 Artist Debugging Assessment 1_instruction: '현재 이 도형이 너무 작습니다. 크게 그려주세요.
        힌트: 각 모서리가 75픽셀 더 길어야 합니다.'
      2-3 Artist Free Play_instruction: 자유 시간이야! 그리고 싶은 것을 그려 봐.
      2-3 Artist Functions 1_instruction: |
        안녕. 나는 좀비 예술가. 그림을 좋아해!
        이 네모 안경을 그릴 수 있게 도와 줘.
        힌트: 네모 사이의 다리는 길이가 네모보다 25 짧아.
      2-3 Artist Functions 10_instruction: 여기에 두가지 함수가 있습니다. 첫 번째는 커다란 기어를 그리는 것이고,
        두 번째는 작은 기어를 그리는 것입니다. 이를 이용해서 기계의 내부를 그려주세요.
      2-3 Artist Functions 11.5_instruction: 여기에 육각형을 그리는 함수가 있습니다. 루프안에서 60도만 회전하게
        바꾼다면 어떻게 될까요?
      2-3 Artist Functions 11_instruction: “사각형 그리기” 함수의 이름을 “육각형 그리기”로 바꿨지만, 여전히
        이 함수는 사각형을 그립니다. 각 모서리의 길이가 50픽셀인 육각형을 그리도록 이 함수를 바꿔주세요.
      2-3 Artist Functions 12_instruction: '복잡한 그림을 여러차례 그리기에 아주 훌륭한 함수입니다. 화분의 나머지를
        채우기 위해 "꽃 그리기" 함수를 사용하시겠습니까?(힌트: 식물은 100 픽셀 길이로 전부 구분됩니다)  '
      2-3 Artist Functions 13_instruction: 4개의 함수를 제공하겠습니다. 친구들과 공유하고 싶은 사진를 만들기 위해서
        제공한 함수를 이용해서 1개 또는 그 이상의 loop(루프) 를 사용하세요. 그리고 "run"를 누른후 예제를 확인하세요.
      2-3 Artist Functions 2_instruction: |
        함수를 사용해 새로운 block를 정의할 수 있습니다. "draw a square" 함수에 사각형을 그리는 블록을 이동하세요.
        "draw a square"함수가 안경을 생성하는 것을 볼 수 있나요? 이 사각형은 75pixels떨어져 있다.
      2-3 Artist Functions 3_instruction: 변의 길이가 115인 사각형을 그릴 수 있도록 함수를 수정하고 더 큰 안견을
        그린다. 사각형은 45픽셀(pixels) 떨어져 있다.
      2-3 Artist Functions 4_instruction: “반복” 블록을 사용해서 이 정사각형을 세 개 그리세요.
      2-3 Artist Functions 7_instruction: '두개의 다른 매개 변수를 사용해서 "집 그리기" 기능으로 두개의 집을
        그려보세요. (힌트: 첫번째 집은 100픽셀)'
      2-3 Artist Functions 9_instruction: 이것은 눈송이 기능이다. 이것으로 겨울 장면을 만들어보자! 자유 놀이라서
        해결해야 하는 퍼즐은 없다. 즐거운 시간 보내세요!
      2-3 Artist Loops 1_instruction: 셀을 완성하기 위해서 100픽셀 길이의 면을 갖는 육각형을 만들 수 있나요? 기억하세요,
        'turn' 블럭을 60도 설정하면 만들 수 있다는 것을.
      2-3 Artist Loops 10_instruction: 절반 정도의 설계를 마쳤을 경우에는 어떤 일이 일어날까요?
      2-3 Artist Loops 11_instruction: 우리가 만든 전체 작품에 또 다른 반복 루프를 넣어 봅시다. 바깥 반복 루프의
        끝에 각도 표시기호를 추가해 넣는 것을 잊지마세요.
      2-3 Artist Loops 2_instruction: 이제 반복 블럭을 사용해 셀을 조개로 만들어 봅니다.
      2-3 Artist Loops 4_instruction: 루프(loop)를 사용해 그 모양을 자꾸 반복할 경우 무슨 일이 일어날지 확인해
        볼까요?
      2-3 Artist Loops 5_instruction: 루프에 작은 변화를 주어서, 우리 그림이 어떻게 다르게 변하는지 살펴보세요.
      2-3 Artist Loops 6_instruction: '반복 루프 안에서 한 칸을 더 움직인 후 회전을 해서 당신의 설계가 어떻게 변하는
        지 알아보세요. '
      2-3 Artist Loops 7_instruction: 루프를 이용하면 모든 종류의 다각형을 만들 수 있습니다. 당신은 육각형안에 마름모를
        만들 수 있나요?
      2-3 Artist Loops 8_instruction: 루프 안에 두 개의 요소를 모두 넣어보세요.
      2-3 Artist Loops 9_instruction: "우리는 같은 요소들을 루프로 반복하려고 하지만 이제부터는 그 사이에 약간의 거리를
        추가하려고 합니다.\n이전과 같은 코드를 사용하되 바깥 루프의 끝에 앞으로 가는 스텝을 추가하세요. \n"
      2-3 Artist Loops New 1_instruction: 로보트의 머리를 그려봅시다! 한 변의 길이가 100픽셀인 사각형을 그릴
        수 있나요?
      2-3 Artist Loops New 10_instruction: "이제 여러 개의 'V'자를 연결해봅시다. \n루프를 사용하여 그려보세요.\n"
      2-3 Artist Loops New 11_instruction: 이번에는 그걸 24번 그려 볼까요. 30도 왼쪽으로 회전하기를 이 코드에
        추가해서 반복 블럭에 해당 코드를 전부 넣어 주세요.
      2-3 Artist Loops New 12_instruction: 한 선의 길이가 100픽셀인 다이아몬드를 그려보세요.
      2-3 Artist Loops New 13_instruction: 이제, 하나의 루프 내에서 다이아몬드를 3번 그려보세요.
      2-3 Artist Loops New 14_instruction: 다이아몬드를 10번 그려보세요. 다이아몬드는 새로 그려질 때 마다 90도씩
        회전합니다.
      2-3 Artist Loops New 15_instruction: 재미있는 것을 그려봐.
      2-3 Artist Loops New 2_instruction: 자 정사각형 그리기에 사용한 코드 일부가 있습니다. 반복 블록을 사용해
        이 코드를 4번 실행하면 어떤 일이 일어날까요?
      2-3 Artist Loops New 9_instruction: 화살 그림을 완성하기 위해서 한 선의 길이가 50픽셀인 간단한 V를 그려보세요.
      2-3 Artist Match Hex Pic_instruction: 육각형 그리는 것에 도움을 줘.
      2-3 Artist Match Rho Pic_instruction: '맞추기 : 누락된 코드를 완성하세요'
      2-3 Artist Match Sq Pic_instruction: '맞추기: 누락된 코드를 완성하세요'
      2-3 Artist Match Tri pic_instruction: '맞추기: 누락된 코드를 채우세요.'
      2-3 Artist Nested Loops 1_instruction: "이전에도 루프를 이용하여 모양들을 그렸는데, 루프 안에 다른 루프를
        넣을 수 있다는 것을 알고 계셨나요? \r\n패턴을 그리기 위해 전체 코드 블록을 3 번 반복해보세요."
      2-3 Artist Nested Loops 10_instruction: 루프를 12번 이용해서 이 패턴을 완성하세요.
      2-3 Artist Nested Loops 11_instruction: 루프를 4번 이용해서 이 패턴을 완성하세요. 각 원을 완성한 후에
        90도로 회전하세요.
      2-3 Artist Nested Loops 12_instruction: 루프를 12번 이용해서 이 나선모양을 완성하세요.
      2-3 Artist Nested Loops 2_instruction: 이제 삼각형 루프를 여섯 번 반복하세요. 각각의 삼각형을 그린 후에는
        다음 삼각형을 그리기 전에 60도 회전해야 합니다.
      2-3 Artist Nested Loops 3_instruction: '이 패턴을 그리기 위해서는 삼각형 루프를 12번 사용해야 합니다.
        원 안에 있는 각도의 숫자(360) 모양의 수(12)만큼 나누고 각각의 모양을 위해 몇 번을 회전해야 하는지 알아보세요. '
      2-3 Artist Nested Loops 4_instruction: '이 다이아몬드 모양을 12번의 루프를 사용하여 꽃 모양을 그려보세요.
        힌트: 12개의 다이아몬드는 12개의 삼각형을 만든 것과 같은 방법으로 하면 됩니다 - 각각의 모양을 위해 몇 도를 회전해야 하나요?'
      2-3 Artist Nested Loops 5_instruction: 이 건물의 유리창들을 루프 안의 루프를 써서 채워보세요. 창문은 20픽셀
        너비이고 20픽셀씩 떨어져 있습니다.
      2-3 Artist Nested Loops 6_instruction: 이 공룡은 꼬리 쪽으로 8개의 뾰족한 뿔이 나 있습니다; 각각의 뿔
        길이는 30 픽셀입니다. 삼각형을 8번의 루프를 사용하되 매번 그린 후에는 앞으로 이동해야 하는 것을 잊지 마세요.
      2-3 Artist Nested Loops 7_instruction: '이 삼각형을 10번 반복하는 루프를 사용하여 태양을 만들어보세요.
        각 삼각형을 그린 후에는 움직이고 방향 회전을 해야 합니다. 원 안에서 몇 개의 모양을 그리게 되며 몇 도씩 회전해야 할 지 알아내
        보세요. '
      2-3 Artist Nested Loops 8_instruction: 우리가 그린 그림에 잔디를 더해봅시다. 각 잔디 다발은 50픽셀씩
        떨어져 있습니다.
      2-3 Artist Nested Loops 9_instruction: 우리는 꽃을 더한 후에 이 그림을 다 끝내게 됩니다. 다이아몬드를
        12번의 반복 루프를 사용하여 꽃을 그려보세요.
      2-3 Artist Nested Loops Free Play_instruction: 자유 시간! 반복문을 여러 개 써서 재미있는 것을 만들어
        봐.
      2-3 Bee Conditionals 1_instruction: 안녕! 나는 꿀벌이야. 내가 꽃에서 꿀을 얻게 도와줘.
      2-3 Bee Conditionals 10_instruction: "보라색 꽃들은 꿀이 1개나 0개가 있습니다. 아무 것도 들어있지 않은
        보라색 꽃에서 꿀을 따지 않도록 주의하세요. \r"
      2-3 Bee Conditionals 11_instruction: 넥타가 들어 있는 꽃에서 넥타를 모으세요.
      2-3 Bee Conditionals 12_instruction: 넥타를 모으기 위해 루프를 이용하여 체크를 한 후에 넥타가 있는 꽃들에서
        넥타를 모으세요.
      2-3 Bee Conditionals 13_instruction: '넥타를 모아서 꿀을 만드세요. 힌트: 빨간 꽃 위에서 "넥타가 있다면"
        조건문을 사용할 경우 무슨 일이 일어나나요? 루프를 이용해서 만들 수 있나요?'
      2-3 Bee Conditionals 14_instruction: 넥타를 모아서 꿀을 만드세요. 보라색 꽃에 꿀이 없다면 그것들은 모으지
        않도록 조심하세요.
      2-3 Bee Conditionals 15_instruction: 모든 네개의 꽃으로 부터 꿀을 모읍니다.
      2-3 Bee Conditionals 2_instruction: 안녕, 나는 꿀벌이야! 꽃으로 부터 꿀을 모으는 것을 도와줘. '루프'를
        사용해봐.
      2-3 Bee Conditionals 3_instruction: 꽃으로 부터 꽃꿀을 모아서 꿀을 만드는 것을 도와줘. '루프'를 사용해봐.
      2-3 Bee Conditionals 4_instruction: 꽃들에서 넥타를 모두 모아 다 꿀로 만들 수 있도록 도와주세요.
      2-3 Bee Conditionals 5_instruction: 보라색 꽃에는 하나의 넥타의 값이 1이거나 0일 수 있는데, 어떤 것이
        그런 지는 몰라요! 넥타가 들어있지 않은 보라색 꽃에서 넥타를 모으지 않도록 조심하세요. 넥타의 값이 1인지 if 블록을 사용해서 체크하세요.
      2-3 Bee Conditionals 6_instruction: '이 꽃에 모을 수 있는 넥타가 있는 지 if 블록을 사용해서 알아보세요. '
      2-3 Bee Conditionals 7_instruction: 각각의 꽃에 넥타가 있는 지 알아보고 있으면 모아보세요.
      2-3 Bee Conditionals 8_instruction: "이 밭에는 빨간색과 보라색의 꽃들이 있습니다. \n빨간 꽃들은 넥타가
        들어 있는 지 알려져 있지만, 보라색 꽃은 알 수가 없어요. 모든 넥타를 모아보세요.\n"
      2-3 Bee Conditionals 9_instruction: 각 꽃들로부터 모든 벌꿀을 수집하세요.
      2-3 Bee Conditionals Assessment 1_instruction: '평가: 모든 넥타를 모아보세요. 보라색 꽃들 중에
        넥타가 없는 꽃에서는 넥타를 모으지 마세요.'
      2-3 Bee Debugging 1_instruction: 이 블럭들의 버그들이 나를 귀찮게 하네요. 모든 넥타를 모아서 꿀을 만들 수
        있도록 에러들을 수정하세요.
      2-3 Bee Debugging 10_instruction: 이 블럭들의 버그들이 나를 귀찮게 하네요. 모든 넥타를 모아서 꿀을 만들 수
        있도록 에러들을 수정하세요.
      2-3 Bee Debugging 2_instruction: 이 블럭들의 버그들이 나를 귀찮게 하네요. 모든 넥타를 모아서 꿀을 만들 수
        있도록 에러들을 수정하세요.
      2-3 Bee Debugging 3_instruction: 이 블럭들의 버그들이 나를 귀찮게 하네요. 모든 넥타를 모아서 꿀을 만들 수
        있도록 에러들을 수정하세요.
      2-3 Bee Debugging 4_instruction: 이 블럭들의 버그들이 나를 귀찮게 하네요. 모든 넥타를 모아서 꿀을 만들 수
        있도록 에러들을 수정하세요.
      2-3 Bee Debugging 5_instruction: 이 벽돌들이 나를 귀찮게 해요. 에러(들) 을 고쳐서 모든 넥타를 모으고 다
        합해 꿀을 만드세요. 지금부터는 run(달리기) 와 step(걷기) 를 사용할 수 있습니다.
      2-3 Bee Debugging 6_instruction: 이 블럭들의 버그들이 나를 귀찮게 하네요. 모든 넥타를 모아서 꿀을 만들 수
        있도록 에러들을 수정하세요.
      2-3 Bee Debugging 7_instruction: 이 블럭들의 버그들이 나를 귀찮게 하네요. 모든 넥타를 모아서 꿀을 만들 수
        있도록 에러들을 수정하세요.
      2-3 Bee Debugging 8_instruction: 이 블럭들의 버그들이 나를 귀찮게 하네요. 모든 넥타를 모아서 꿀을 만들 수
        있도록 에러들을 수정하세요.
      2-3 Bee Debugging 9_instruction: 이 블럭들의 버그들이 나를 귀찮게 하네요. 모든 넥타를 모아서 꿀을 만들 수
        있도록 에러들을 수정하세요.
      2-3 Bee Debugging Assessment 1_instruction: '평가: 이 블록들이 나를 귀찮게 해요. 에러(들) 을 고쳐서
        모든 넥타를 모으고 다 꿀로 만드세요.'
      2-3 Bee Functions 1_instruction: Function(기능) 이란 일을 수행하는 코드의 블록들을 의미해요. "2개의
        넥타 모으기" 기능을 사용하여 각각의 꽃에서 넥타를 모으세요.
      2-3 Bee Functions 10_instruction: 보라색 꽃들에는 넥타가 1 또는 0개가 들어 있어요. 넥타가 들어 있는 보라색
        꽃에서만 넥타를 모을 수 있도록 기능을 만들어 보세요.
      2-3 Bee Functions 2_instruction: Funciton(기능) 이란 일을 수행하는 코드의 블록을 의미합니다. 한 번에
        넥타를 5개 모을 수 있는 "5개 모으기" 기능을 사용하세요. 정확하게 블록 카운트 갯수를 셀 수 있도록 루프를 사용하세요.
      2-3 Bee Functions 3_instruction: 각 꽃들로부터 모든 벌꿀을 수집하세요.
      2-3 Bee Functions 4_instruction: '"움직여서 넥타 모으기" 기능은 꿀벌이 회전하고, 넥타를 모으고, 시작한 지점으로
        돌아오는 기능입니다. 이 기능을 이용하여 모든 넥타를 모으세요.'
      2-3 Bee Functions 5_instruction: 이제부터는 꽃에 넥타가 더 많이 들어있어요. 주어진 기능을 편집하여 4개의 넥타를
        모으도록 하고 꽃들에 있는 넥타를 다 모으도록 해보세요.
      2-3 Bee Functions 6_instruction: 이제는 동일한 기능을 사용하여 세 개의 꽃에서 넥타를 모아보세요.
      2-3 Bee Functions 7_instruction: 이제 꽃들이 더 멀리 떨어져 있어요. 주어진 기능을 편집하고 꽃들에 있는 넥타를
        모두 모으도록 해보세요.
      2-3 Bee Functions 8_instruction: 7개의 꽃에서 꿀을 가져오고 앞으로 전진하며, 7개의 꿀을 만드는 사용자 정의
        함수를 만드세요. 각각의 꽃에서 꿀을 모으고 각 벌집에서 꿀을 만드는 함수를 사용하세요.
      2-3 Bee Functions 9_instruction: 꽃꿀을 얻어서 꿀을 만들고, 꿀벌이 원래 위치로 돌아오는 함수를 만드세요.
      2-3 Bee Functions Assessment 1_instruction: '평가 : 각각의 꽃에서 꿀을 수집하게 하는 함수를 사용하세요.'
      2-3 Bee Functions Assessment 2_instruction: '평가 : 한 번에 3개의 벌꿀을 만들 수 있도록 함수를
        만드세요.'
      2-3 Bee Loops 1_instruction: |
        Each flower contains one unit of nectar. Collect
        nectar from each of the flowers.
      2-3 Bee Loops 10_instruction: 모든 넥타를 모으도록, 다른 두개의 루프안에 'while' 루프를 사용할 수 있나요?
      2-3 Bee Loops 11_instruction: 이 지역의 꽃들에서 꿀을 모두 수집할 수 있도록 while문을 사용하세요.
      2-3 Bee Loops 12_instruction: 이 지역의 꽃들에서 꿀을 모두 수집할 수 있도록 while문을 사용하세요.
      2-3 Bee Loops 13_instruction: '평가: 반복 블록을 사용해 꿀을 전부 모아 주세요.'
      2-3 Bee Loops 1A_instruction: '안녕, 나는 꿀벌이야. 이 꽃들로 부터 꽃꿀을 모을 수 있게 도와줄 수 있나요? '
      2-3 Bee Loops 2_instruction: '''루프''를 사용해서 꽃꿀을 모아서 꿀을 만드세요.'
      2-3 Bee Loops 2A_instruction: '''루프''를 사용해서 같은 작업을 보다 쉽게 할 수 있나요?'
      2-3 Bee Loops 3_instruction: 각각의 꽃으로 부터 꽃꿀을 모아서 각각의 벌집에서 꿀을 만드세요.
      2-3 Bee Loops 3A_instruction: 모든 꿀을 수집하도록 반복문을 사용할 수 있습니까?
      2-3 Bee Loops 3B_instruction: 이제 새로 만든 반복 블록을 사용해 꽃의 수액을 모두 모아 꿀을 만듭니다.
      2-3 Bee Loops 4_instruction: 직전의 퍼즐과 비슷한 방법으로 움직이는데 방향을 바꾸며 움직어야 해요.
      2-3 Bee Loops 4A_instruction: 만약 이 '시퀀스'를 3번 '루프'한다면 무슨 일이 벌어질까? 마지막에 꿀을 만드는
        것을 잊지 말고!
      2-3 Bee Loops 5_instruction: '''루프''를 사용해서 단계 아래로 내려가 꽃꿀을 모으세요.'
      2-3 Bee Loops 6_instruction: 반복문을 사용하여 각각의 꽃에서 꽃꿀을 얻고 벌집 모양에서 꿀을 만드세요.
      2-3 Bee Loops 7_instruction: 각각의 꽃에서 꽃꿀을 얻기 위해서 이 블럭들을 반복 블럭 안에 넣으세요.
      2-3 Bee Loops 8_instruction: 보라색 꽃에는 몇 개의 꽃꿀이 있는지 모릅니다. 모든 꽃꿀을 모으기 위해 '반복(~인
        동안)' 블럭을 사용하세요. 이 반복은 조건이 참인 동안 계속 실행됩니다.
      2-3 Bee Loops 9_instruction: '''반복(~인 동안) 블럭''은 반복문 안에 if문이 있는 것과 같습니다. 반복(~인
        동안) 블럭을 추가하여 같은 동작을 하도록 만들어 보세요.'
      2-3 Bee Loops Assessment 1_instruction: 평가 - 반복(~인 동안) 블럭을 사용하여 꽃으로부터 모든 꽃꿀을
        모읍니다.
      2-3 Maze 1_instruction: |
        Can you help me to catch the naughty pig? Stack a
        couple of "move forward" blocks together and press "Run".
      2-3 Maze 10_instruction: 초록색 나쁜 놈에게 데려다 줘!(TNT 폭탄 조심)
      2-3 Maze 11_instruction: 나를 꽃에 데려가줘. 너무 배고파! 블록을 몇 번이나 반복해야 겠어?
      2-3 Maze 12 (copy 1)_instruction: '앞의 정답을 블록 두개로 바꿔서 처리해볼까요?(힌트: "반복횟수" 블록을
        사용해 루프를 만들어 보세요)'
      2-3 Maze 12 (copy 2)_instruction: '앞의 정답을 블록 두개로 바꿔서 처리해볼까요?(힌트: "반복횟수" 블록을
        사용해 루프를 만들어 보세요)'
      2-3 Maze 12 (old)_instruction: '"반복 횟수" 블록을 사용해서 나를 돼지에게 데려가줘!'
      2-3 Maze 12_instruction: '지금 만든 다섯개의 블록을 딱 두개의 블록으로 바꿔서 처리할 수 있을 까요?(힌트: "반복횟수"
        블록을 사용해 루프를 만들어 보세요)'
      2-3 Maze 13 (old)_instruction: 막힐 때까지 반복해서 나를 돼지에게 데려다 주세요!
      2-3 Maze 13_instruction: 두개의 블록만 사용해서 나를 돼지에게 데려가줘.
      2-3 Maze 14 (old)_instruction: '"반복..까지" 블록을 사용해서 나를 돼지에게 데려가줘!'
      2-3 Maze 14_instruction: 나를 해바라기 앞으로 데려가줘! ("반복" 블록이 필요할 때, 어디에 놓으면 좋을까?)
      2-3 Maze 15 (old)_instruction: '"반복..까지" 블록을 사용해서 나를 돼지에게 데려가줘!'
      2-3 Maze 15_instruction: 더 적은 블록들을 사용해서 돼지에게 가려면 두 개의 반복을 사용하세요.
      2-3 Maze 16 (old)_instruction: '"반복..까지" 블록을 사용해서 나를 돼지에게 데려가줘!'
      2-3 Maze 16 before_instruction: 나를 돼지에게 데려가줘.
      2-3 Maze 16_instruction: 나를 해바라기로 데려가줘. 시퀀스를 반복해봐!
      2-3 Maze 2_instruction: 이 돼지가 내 깃털들을 구기고 있어요. 그를 잡을 수 있게 도와주세요!
      2-3 Maze 3_instruction: 길을 따라 움직여서, 바보 같은 돼지 녀석을 잡아줘. TNT 폭탄을 피하고, 깃털들이 날라다니지
        않도록 해야 돼!
      2-3 Maze 4_instruction: 초록색 나쁜 놈에게 데려다 줘!(TNT 폭탄 조심)
      2-3 Maze 5_instruction: 초록색 나쁜 놈에게 데려다 줘!(TNT 폭탄 조심)
      2-3 Maze 6_instruction: 나쁜 돼지를 잡을 수 있게 도와줘, 침착하게 생각하면 되. 돼지를 못 잡으면, 화가 날 것 같아!
      2-3 Maze 7_instruction: 초록색 나쁜 놈에게 데려다 줘!(TNT 폭탄 조심)
      2-3 Maze 8_instruction: 나를 돼지에게 데려가줘!
      2-3 Maze 9_instruction: 초록색 나쁜 놈에게 데려다 줘!(TNT 폭탄 조심)
      2-3 Maze Loops 1_instruction: 5 개의 블록들만 사용해서 돼지로 이동시켜 주세요.
      2-3 Maze Loops 17_instruction: 나를 해바라기로 데려가줘!
      2-3 Maze Loops 18_instruction: 나를 해바라기로 데려가줘!
      2-3 Maze Loops 19_instruction: 나를 해바라기로 데려가줘!
      2-3 Maze Loops 20_instruction: 나를 해바라기로 데려가줘!
      2-3 Maze Loops 21_instruction: 나를 해바라기로 데려가줘!
      2-3 Maze Loops Assessment 1_instruction: '평가: 다섯 개의 블록만 사용해서 해바라기에게 갈 수 있도록
        해줘! '
      2-3 Maze sq1_instruction: |
        This pig is ruffling my feathers.  Help me find
        him!
      2-3 Maze sq10_instruction: 나를 돼지로 데려가주세요! 어떤 블록이 반복해서 수행되었나요?
      2-3 Maze sq10v2_instruction: 나를 돼지로 데려가주세요! 어떤 블록이 반복해서 수행되었나요?
      2-3 maze sq11_instruction: 나를 돼지로 데려가주세요! 어떤 블록이 반복해서 수행되었나요?
      2-3 maze sq12_instruction: 이전의 방법을 "반복 횟수" 블록을 이용해서 반복으로 바꿀 수 있을까요?
      2-3 maze sq13_instruction: |
        친애하는 사람에게. 나 좀비. 해바라기에게... 가야만... 해.
        "~할 때까지 반복" 블록을 가지고 루프를 만들어 줘.
      2-3 maze sq14_instruction: 네 개의 블록만 사용해서 해바라기에게 갈 수 있나요?
      2-3 maze sq15_instruction: 5개의 블럭만 사용해서 해바라기로 갈 수 있나요?
      2-3 maze sq16_instruction: 좋아요, 이건 비슷하긴 한데 조금 다르네요. 5개 블럭으로만 할 수 있나요?
      2-3 Maze sq2_instruction: 길을 따라가서 멍청이 돼지를 잡을 수 있도록 해줘. TNT 폭탄을 피하지 않으면 깃털들이
        날라가버릴 거야!
      2-3 Maze sq3_instruction: 초록색 나쁜 놈에게 데려다 줘!(TNT 폭탄 조심)
      2-3 Maze sq4_instruction: 나쁜 돼지를 잡을 수 있게 도와줘, 침착하게 생각하면 되. 돼지를 못 잡으면, 화가 날 것
        같아!
      2-3 Maze sq5_instruction: 나를 돼지로 데려다줘! 블럭을 몇번이나 반복해야 할까?
      2-3 Maze sq6_instruction: '이전의 반복을 블록 두개로 바꿔서 처리해 볼까요?(힌트: "반복횟수" 블록을 사용해 루프를
        만들어 보세요)'
      2-3 Maze sq7_instruction: 3개의 블럭만 사용해서 나를 초록색 침입자로 데려다줘.
      2-3 Maze sq8_instruction: 나를 돼지로 데려다줘!(내가 필요한 " 번 반복" 블럭이 어디 있지?)
      2-3 Maze sq9_instruction: 더 적은 수의 블럭을 사용해서 돼지에 갈 수 있도록 루프를 만드세요.
      2-3_instruction: |
        Purple flowers may have either 1 or 0 nectar. Be careful
        not to collect nectar from a purple flower if it doesn't have any.
      2-3level1_instruction: 새가 못된 돼지를 잡을 수 있게 앞으로 이동하도록 도와주세요.
      4-5 Artist 1_instruction: '상자를 그리는 것을 끝내도록 도와주세요. (각 선은 300픽셀 길이) '
      4-5 Artist 10_instruction: |
        "실행"을 눌러 코드를 확인하세요. 그 다음에
        그림을 완성하기 위해서 충분히 반복시키세요. 색은 그때마다 바뀔 것입니다.
      4-5 Artist 11_instruction: |
        녹색 줄들을 다 그리세요. 줄들의 길이는 300 픽셀로
        15 픽셀 만큼씩 떨어져 있습니다.
      4-5 Artist 2_instruction: 사각형을 완성하기 위해서 이 코드를 반복(루프)시킬 수 있나요?
      4-5 Artist 3.5_instruction: "그럼 이번에 이 코드를 실행(또는 \"실행\" 누르기) 하면 \n무슨일이 벌어질지 생각해
        보세요. 그 다음에 충분히 반복해서 그림을 완성해 주세요.\n색은 그때마다 바뀔 것입니다.\n"
      4-5 Artist 3_instruction: |
        이 사각형 꽃 침대는 주변 둘레가 600입니다.
        긴 쪽의 길이는 200 입니다. 사각형을 그려보세요.
      4-5 Artist 4_instruction: |
        하나의 원 안에는 얼마나 많은 각이 있을까요? 블록들을 반복
        실행해서 무지개색의 원을 한 개 만들어 보세요.
      4-5 Artist 5_instruction: 어떤 각도를 사용하나요?
      4-5 Artist 6_instruction: |
        이 정삼각형의 안쪽 각도는 60, 60, 60 도 입니다.
        각 변의 길이는 200 픽셀입니다. 그림을 완성해 보세요.
      4-5 Artist 7_instruction: |
        이 직각삼각형의 안쪽 각도는 30, 60, 90 도 입니다.
        기울어진 변의 길이는 100 픽셀의 2배 입니다. 그림을 완성해 보세요.
      4-5 Artist 8_instruction: 축구장의 중앙선은 사이드라인과 직각입니다. 이 경기장의 둘레는 800 픽셀이고 세로 길이는
        240 픽셀입니다. 가로 길이는 얼마일까요? 경계선과 중앙선을 그려보세요.
      4-5 Artist 9_instruction: 디자인이 대칭이 되도록 나머지 반을 그려보세요. 삼각형들은 등변 삼각형이고 길이는 50 픽셀입니다.
      4-5 Artist Assessment 1_instruction: '평가: 등변 삼각형을 그리는 루프(반복문) 를 사용하세요. 각 측면은
        300 픽셀입니다.'
      4-5 Artist For Loops 1_instruction: 블록의 너비에 1부터 10 사이의 숫자를 입력하고 코드를 실행하세요.
      4-5 Artist For Loops 11_instruction: 0, 20, 40, 60, 80... 200 카운트 하는 "for" 블럭을
        완성하세요.
      4-5 Artist For Loops 12_instruction: |
        What happens if you reverse the "from"
        and "to" numbers? Complete the "for" block so that it counts 200, 180,
        160, 140, 120...0.
      4-5 Artist For Loops 13_instruction: '이 디자인은 "for" 루프 없이 시작되었고 너무 많은 블록을 사용하고
        있습니다. "for" 블록을 사용하여 이 나선형을 완성하세요. 힌트: 마지막 줄의 길이는 250 픽셀입니다.'
      4-5 Artist For Loops 14_instruction: '코드를 배우기 시작하고나면 더 빠른 방법들이 있다는 것을 알게 됩니다.
        삼각 나선구조를 완셩하기 위해서 사용된 블록들을 "for" 블록으로 바꿔보세요. (힌트: 마지막 선의 길이는 300 픽셀입니다.)'
      4-5 Artist For Loops 15_instruction: '코드를 배우기 시작하고나면 더 빠른 방법들이 있다는 것을 알게 됩니다.
        육각 나선구조를 완셩하기 위해서 사용된 블록들을 "for" 블록으로 바꿔보세요. (힌트: 마지막 선의 길이는 200 픽셀입니다.)'
      4-5 Artist For Loops 3_instruction: 어떻게 하면 우리가 1에서 50까지 셀 수 있을까요? "for"블록으로
        만들어 보세요.
      4-5 Artist For Loops 4_instruction: 1부터 10까지 1씩 증가하도록 "for' 블록을 완성시키세요.
      4-5 Artist For Loops 6_instruction: 50, 60, 70, 80, 90 픽셀 크기의 정사각형들을 그려보세요.
        "사각형 그리기" 함수 블록을 5 번 사용면 됩니다.
      4-5 Artist For Loops 7_instruction: '같은 삼각형들을 그려봅시다. 이번에는 "count with" 블록을 이용해서
        크기들을 바꿔보세요. "사각형 그리기" 함수 안에 "카운터" 블록을 넣어보세요. 힌트: 변수 카테고리에 있습니다.'
      4-5 Artist For Loops 8_instruction: 10부터 200까지 10씩 올리며 카운트하면서 반복하도록 "for" 블록
        안에 다른 블록들을 넣어 완성 시켜주세요. 반복 카테고리에서 "for" 블럭을 찾을 수 있습니다.
      4-5 Artist For Loops 9_instruction: 이 원들은 5, 10, 15, 20, 25, 30, 35의 크기를 갖습니다.
        "for" 블록을 사용해서 원들을 만들어보세요.
      4-5 Artist Free Draw 1_instruction: 자유시간! 그리고 싶은 것을 그려 보세요.
      4-5 Artist Functions 1_instruction: '''반복 루프''를 사용해서 이 삼각형을 그려보세요.'
      4-5 Artist Functions 10a_instruction: 이 코드를 "눈송이 그리기" 함수 안에 넣고 50 값을 "크기" 변수로
        바꿔주세요. 이 함수는 100 픽셀 크기의 눈송이들을 만들기 위해서 사용되었습니다.
      4-5 Artist Functions 10b_instruction: '"눈송이 그리기" 함수를 이용해서 서로 다른 크기의 눈송이들을 만들어
        보세요. 힌트: 첫 번째 눈송이의 길이는 25이고 그 이후로는 2배씩 커지면 됩니다.'
      4-5 Artist Functions 11_instruction: '이 "육각형 그리기" 함수는 "삼각형 그리기" 함수를 사용합니다. (힌트:
        육각형은 6개의 변들로 이루어져 있으며, 각 변의 길이는 100 픽셀입니다.)'
      4-5 Artist Functions 12_instruction: '"웨이브 그리기" 함수를 완성해 봅시다. 각 웨이브는 위아래로 한 번씩
        구부러진 모양입니다. 힌트: 5개의 파란 웨이브를 그려보세요.'
      4-5 Artist Functions 13 Free play_instruction: 행성, 별, 로켓, 로봇을 그리기 위한 함수들이 여기
        있습니다. 함수들을 자유롭게 이용해서 여러분이 원하는 그림들을 그리고 친구들에게 공유해 보세요.
      4-5 Artist Functions 14 Free play_instruction: 여기 여러가지 함수들을 만들어 드렸습니다. 한 두개
        이상의 반복 구조 안에 넣어서 사용해 보세요. 여러분이 원하는 그림들을 만들어서 친구들에게 공유해 보세요. "실행" 을 눌러 예시를
        살펴보세요.
      4-5 Artist Functions 15 Assessment_instruction: '형성평가: "사각형 그리기" 블록을 사용해 사각형들을
        그려보세요. 사각형들의 각 변의 길이는 50, 100, 15 픽셀입니다.'
      4-5 Artist Functions 2a_instruction: 자 이제 이 블록들을 "작은 삼각형 그리기" 라는 새로운 함수에 넣고,
        사용해 보세요.
      4-5 Artist Functions 2b_instruction: 자 이제 주어진 블록들을 이용해서 "작은 삼각형 그리기" 함수를 만들어보세요.
      4-5 Artist Functions 3_instruction: |
        Now create the functions "draw a medium
        triangle" and "draw a large triangle". The "draw a small triangle" function
        is done for you. The triangles have side lengths of 50 (small), 100 (medium),
        and 150 (large).
      4-5 Artist Functions 4_instruction: 새로운 "삼각형 그리기" 함수는 매개변수가 있기 때문에, 이전에 보았던
        3개의 다른 함수 모두의 기능을 한 번에 할 수 있습니다. 새로운 함수를 사용해서 같은 크기의 삼각형을 3개 그려보세요.
      4-5 Artist Functions 5_instruction: '"삼각형 그리기" 함수를 수정해서 "사각형 그리기" 함수로 만들어 주세요.'
      4-5 Artist Functions 6_instruction: '"사각형 그리기", "삼각형 그리기" 함수를 이용해 집을 그려보세요.
        (힌트: 사각형의 한 변의 길이는 200 픽셀입니다.)'
      4-5 Artist Functions 6b_instruction: 삼각형/사각형 그리기 함수들을 추가해서 "집 그리기" 함수를 만들어 사용해
        보세요.
      4-5 Artist Functions 7_instruction: '"집 그리기" 함수를 이용해서 100, 50 픽셀의 집들을 그려보세요.
        두 집은 50 픽셀 만큼 떨어져 있습니다.'
      4-5 Artist Functions 8_instruction: '"꽃 그리기" 함수는 줄기의 높이를 설정할 수 있는 매개 변수가 있습니다.
        높이를 200 으로 설정한 다음에 어떻게 되나 살펴보세요.'
      4-5 Artist Functions 9_instruction: 3개의 꽃을 그리세요. 첫 번째 꽃은 높이 100, 그 다음에는 50 만큼
        씩 커지게 그리면 됩니다. 꽃들은 100 픽셀 만큼씩 떨어져 있습니다.
      4-5 Artist Patterns 1_instruction: 반복 구조를 이용해서 이 사각형을 그려주세요. 각 변은 20 픽셀 입니다.
      4-5 Artist Patterns 10_instruction: '이 코드는 두 줄의 육각형을 만들어 줍니다. - 전체 벌집을 다 그리기
        위해서 4번 반복 실행하면 됩니다. 힌트: 가장 마지막 반복에서 120 픽셀 만큼 뒤로 뛰어야, 화가가 화면을 벗어나지 않습니다.'
      4-5 Artist Patterns 11_instruction: '반 원을 그리기 위해서 얼마나 반복시켜야 할 까요? 힌트: 각 원의 내각은
        360도이고, 한 번 반복시키면 3도 만큼씩 돌아갑니다. 완전한 원을 만들기 위해서는 몇 번이나 반복해야 할까요?'
      4-5 Artist Patterns 12_instruction: 반복하는 것을 복사해서 오른쪽으로 돌기를 왼쪽으로 돌기로 바꾸면 어떻게
        될까요? 이 웨이브를 만들기 위해서 반복해 주세요.
      4-5 Artist Patterns 13_instruction: 그림 틀을 만들기 위해서 전체를 4번 반복시켜보세요. 모서리에 주의하세요
        - 90도만 돌면 안됩니다! 3도를 60번 돌면 반 원을 만들 수 있습니다. 어떻게 사분원(1/4 원) 을 만들 수 있을까요?
      4-5 Artist Patterns 2_instruction: 어떤 반복 구조 안에 다른 반복 구조를 넣으면, 중첩 반복이라고 부릅니다.
        15개의 모든 사각형들이 한 줄로 서려면 바깥쪽 반복 구조를 어떻게 추가해야 할까요?
      4-5 Artist Patterns 3_instruction: 좀더 어려운 것을 해보아요! 반복 구조 안에 반복 구조를 넣어봤는데, 다음
        줄을 그리려면 화가를 다시 이전 위치로 돌려 놓아야 해요. 전체 격자를 그리기 위해서 가장 바깥쪽 반복의 끝에 어떤 블록들을 놓아야
        할까요?
      4-5 Artist Patterns 4_instruction: 이 다이아몬드는 각 변이 50 픽셀이고, 120도 각과 60도 각으로 이루어져
        있습니다. 다이아몬드를 그려보세요.
      4-5 Artist Patterns 5.5_instruction: 다이아몬드 격자를 그리기 위해서는 얼마나 많이 반복해야 할까요?
      4-5 Artist Patterns 5_instruction: 자 이제 한 줄에 6개의 다이아몬드를 그려보세요. 다이아몬드 코드에서 2번
        반복하던 것을 3번 반복으로 고친것을 잘 보세요. - 왜 그랬을까요?
      4-5 Artist Patterns 6_instruction: 다이아몬드 격자를 그리기 위해서는 얼마나 많이 반복해야 할까요?
      4-5 Artist Patterns 7_instruction: 이전 퍼즐에서 사용했던 코드를 변형해서 더 복잡한 패턴을 만들어보세요. 다이아몬드들이
        얼마나 겹쳐 그려지는지 살펴보고, 첫 번째 "뒤로 점프하기"를 100에서 50사이 정도로 바꿔보세요. - 그리고 나서 두 번째 "뒤로
        점프하기"는 얼마나 더 멀리 해야 할까요?
      4-5 Artist Patterns 8_instruction: 반복 구조를 사용해서 각 변의 길이가 40 픽셀이면서 내각의 크기가 60
        도인 육각형을 만들어 보세요.
      4-5 Artist Patterns 9.5_instruction: 이 코드를 반복시켜서 두 줄로 육각형들을 만들어보세요. 두 번째 줄이
        오른쪽으로 얼마나 빗겨 그려져 있는지 살펴보세요.
      4-5 Artist Patterns 9_instruction: '주어진 코드를 3번 반복시켜서 모든 줄을 그려보세요. 힌트: 각각의 6각형들은
        너비가 80픽셀입니다.'
      4-5 Artist Patterns Free Play_instruction: 마음대로 그리기 - 원하는 패턴을 직접 만들어보세요.
      4-5 Bee Conditionals - FC Test_instruction: 꿀벌이 꽃꿀을 원합니다. 모두 꽃은 아니기 때문에, 안개
        구름 아래에 꽃이 숨어있는지 모두 살펴보아야 합니다. 꽃이면 꽃꿀을 모으면 됩니다.
      4-5 Bee Conditionals 1 (copy 1)_instruction: |
        The bee can't tell if this is
        a flower or a honeycomb. Gather nectar only from flowers, but first check
        if it is a flower or a honeycomb.
      4-5 Bee Conditionals 1_instruction: 꿀벌은 꽃인지 벌집인지 말할 수 없습니다. 꽃인 경우에만 꽃꿀을 모아야
        하는데, 꽃인지 벌집인지 먼저 확인해 보세요.
      4-5 Bee Conditionals 2 (copy 1)_instruction: |
        The bee only wants nectar right
        now. Remember, not all objects are flowers, so check to gather nectar only
        at flowers.
      4-5 Bee Conditionals 2_instruction: 꿀벌이 꽃꿀을 원합니다. 모두 꽃은 아니기 때문에, 안개 구름 아래에 꽃이
        숨어있는지 모두 살펴보아야 합니다. 꽃이면 꽃꿀을 모으면 됩니다.
      4-5 Bee Conditionals 3_instruction: 이제 벌이 꿀을 만들고 싶어합니다. 벌집에서만 꿀을 만들도록 체크하세요.
      4-5 Bee Conditionals 4 (copy 1)_instruction: |
        The unknown object is either
        a flower or a honeycomb. Use the if/else block to collect nectar if it is
        a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 4_instruction: 알 수 없는 개체는 꽃이나 벌집일 수 있습니다. "if/else"블럭을
        사용해서 꽃이면 넥타를 수집하고, 아니면(벌집이라면) 꿀을 만들도록 하세요.
      4-5 Bee Conditionals 5_instruction: 이 안개 구름들 아래에는 꽃이나 벌집이 있을 수 있습니다. 만약/그렇지않으면
        블록을 이용해서 꽃이면 꽃꿀을 모으고 아니면 (즉, 벌집이라면) 꿀을 만들도록 해보세요.
      4-5 Bee Conditionals 6 (copy 1)_instruction: |
        This purple flower may have either
        3, 2, or 1 nectar. Here an if-else block is combined with another if-else
        block to create an if, else-if, else block. Complete the solution to collect
        the unknown amount of nectar.
      4-5 Bee Conditionals 6_instruction: 이 분홍 꽃에는 꽃꿀이 3, 2, 1 만큼 있을 수 있습니다. 여기 만약~아니면
        블록은 다른 만약~아니면 블록과 결합되어있는 것으로, 만약/만약~아니면/아니면 영역으로 구분되어 있습니다. 꽃꿀의 양을 모를 때에도
        꽃꿀을 모을 수 있도록 방법을 만들어보세요.
      4-5 Bee Conditionals 7_instruction: 분홍 꽃은 꽃꿀이 3, 2, 1 중 하나입니다. "분홍 꽃 확인" 함수를
        완성하고 이용해서 꽃의 모든 꽃꿀들을 모을 수 있도록 해보세요.
      4-5 Bee Conditionals 8_instruction: '"꿀을 만드는지 확인" 함수의 안쪽을 완성해 주세요. 분홍 꽃의 꽃꿀이
        3, 2, 1 인 경우에는 모든 꽃꿀을 모으고, 그 후에 앞으로 이동해서 꿀을 만들면 됩니다.'
      4-5 Bee Conditionals Assessment 1_instruction: |
        형성평가: 이 코드에는 오류가 있습니다.
        "꽃꿀을 모으거나 꿀 만들기" 함수를 완성해서, 모든 꽃꿀을 모으거나 꿀을 만들도록 만들어 주세요. 분홍 꽃에는 3, 2, 1 개의 꽃꿀이 있을 수 있습니다.
      4-5 Bee Debugging 1_instruction: 이 블록들이 왜 안되는지 진짜 잘 모르겠어요. 고쳐주세요.
      4-5 Bee Debugging 10_instruction: 에러를 찾아서 수정하세요.
      4-5 Bee Debugging 11_instruction: 이 계산이 맞나요?
      4-5 Bee Debugging 2_instruction: 벌이 넥타를 모아서 꿀을 만들 수 있도록 도와주세요.
      4-5 Bee Debugging 3_instruction: 에러를 찾아서 수정하세요.
      4-5 Bee Debugging 4_instruction: 이 블럭들이 작동하지 않습니다. 패턴이 무엇인가요?
      4-5 Bee Debugging 5_instruction: 뭔가 옳지 않습니다...
      4-5 Bee Debugging 6_instruction: 보라색 꽃은 알 수 없는 양의 넥타를 가지고 있습니다. 꽃으로 부터 모든 넥타를
        모으도록 블럭을 수정하세요.
      4-5 Bee Debugging 7_instruction: 그 기능은 뭔가 빠졌습니다...
      4-5 Bee Debugging 8_instruction: 이 기능은 괜찮습니다. 다만, 제대로 사용되지 않았습니다.
      4-5 Bee Debugging 9_instruction: 왜 벌들이 충분한 꿀을 만들지 않나요?
      4-5 Bee Debugging Assessment 1_instruction: '평가: 코드 수정.'
      4-5 Bee Nested Loops 1_instruction: 모든 넥타를 수집하도록 루프를 사용하세요.
      4-5 Bee Nested Loops 2_instruction: |
        Collect all of the nectar from each flower.
        Use a nested loop.
      4-5 Bee Nested Loops 3_instruction: 중첩 반복 안에 시작 코드를 넣어서 모든 꽃꿀을 모아보세요.
      4-5 Bee Nested Loops 4_instruction: |
        Collect all of the nectar from each flower
        and make honey at each honeycomb. Use a nested loop.
      4-5 Bee Nested Loops 5_instruction: 중첩 반복 구조를 만들어서 모든 꽃꿀을 모아보세요.
      4-5 Bee Nested Loops 6_instruction: 모든 넥타를 수집하세요.
      4-5 Bee Nested Loops 7_instruction: 반복 구조를 다른 반복 구조 안에 넣어 중첩 반복을 만든 후 꽃에서 모든
        꽃꿀을 모을 수 있도록 해보세요.
      4-5 Bee Nested Loops 8_instruction: |
        Collect all of the nectar from these flowers
        by nesting a while loop. Replace the inner repeat times block with a while
        block.
      4-5 Bee Nested Loops 9_instruction: 반복 구조 안에 반복 구조를 중첩시켜서 이 꽃들로 부터 모든 꽃꿀을 모아보세요.
      4-5 Bee Nested Loops Assessment 1_instruction: '형성평가: 반복 구조들을 사용해서 모든 꽃꿀을 모아서
        꿀을 만드세요.'
      4-5 Bee Nested Loops Rows_instruction: 꽃들로 부터 꽃꿀을 모으세요. 중첩 반복을 사용하면 됩니다.
      4-5 Maze 1 (copy 1)_instruction: 친애하는 인간. 나 좀비. 해바라기..로..가야해.
      4-5 Maze 1_instruction: 친애하는 인간. 나 좀비. 해바라기..로..가야해.
      4-5 Maze 10_instruction: 네 개의 블록만 사용해서 해바라기에게 갈 수 있나요?
      4-5 Maze 11_instruction: 여섯개의 블럭만 사용해서 해바라기로 갈 수 있나요?
      4-5 Maze 12_instruction: 좋아요. 이건 약간 다르네요. 당신은 6개 블럭만 사용해서 할 수 있나요?
      4-5 Maze 13_instruction: 나를 돼지에게 데려가줘!
      4-5 Maze 14_instruction: 나를 돼지한테 데려다줘! "반복.. 까지"블럭을 사용하세요.
      4-5 Maze 2 (copy 1)_instruction: 좀비를 해바라기로 데려다주세요, 하지만 먹개비는 피하세요!
      4-5 Maze 2_instruction: 좀비를 해바라기로 데려다주세요, 하지만 먹개비는 피하세요!
      4-5 Maze 3 (copy 1)_instruction: 해바라기.. 로.. 꼭.. 가야합니다.
      4-5 Maze 3_instruction: 해바라기.. 로.. 꼭.. 가야합니다.
      4-5 Maze 4 (copy 1)_instruction: 더 적은 수의 블럭을 사용하기 위해 "반복"블럭을 사용해 보세요.
      4-5 Maze 4_instruction: 더 적은 수의 블럭을 사용하기 위해 "반복"블럭을 사용해 보세요.
      4-5 Maze 5 (copy 1)_instruction: 가능한 제일 적은 수의 블럭을 사용해서 이 퍼즐을 해결할 수 있나요?
      4-5 Maze 5_instruction: 가능한 제일 적은 수의 블럭을 사용해서 이 퍼즐을 해결할 수 있나요?
      4-5 Maze 6 (copy 1)_instruction: 가능한 제일 적은 수의 블럭을 사용해서 이 퍼즐을 해결할 수 있나요?
      4-5 Maze 6_instruction: 가능한 제일 적은 수의 블럭을 사용해서 이 퍼즐을 해결할 수 있나요?
      4-5 Maze 7_instruction: 친애하는 인간. 나 좀비. 해바라기..로..가야해.
      4-5 Maze 8_instruction: '"반복" 블럭을 사용해서 좀비가 해바라기로 가도록 해주세요. (식충식물들은 피해야 합니다!)'
      4-5 Maze 9_instruction: '"~할 때까지 반복" 블럭으로 반복을 만들어보세요.'
      4-5 Maze Assessment 1_instruction: '형성평가: 해바라기로 가기'
      4-5 Maze Conditionals 1_instruction: '"반복 까지"블럭을 사용해서 좀비를 해바라기로 데려가세요.'
      4-5 Maze Conditionals 10_instruction: 더 복잡한 미로를 풀 수 있도록 3개의 블록만 더 더해 주실 수 있으세요?
        그렇게만 된다면, 얼마나 멀던지 상관없이 구부러진 길에서 돌아갈 수 있을 것 같아요.
      4-5 Maze Conditionals 2_instruction: '"반복 까지"블럭을 사용해서 좀비를 해바라기로 데려가세요.'
      4-5 Maze Conditionals 3_instruction: |
        왼쪽/오른쪽으로 돌아야 할때를 결정해야할 때, '만약' 블럭을 사용하세요.
        힌트: 한개 이상의 블럭이 더 필요할 것이지만 그것은 다음 기회에 알려드려요.
      4-5 Maze Conditionals 4_instruction: 좋아요, 지난 번 퍼즐과 비슷하지만, '만약' 블럭과 '반복' 블럭을
        동시에 사용하는 방법을 기억해보세요.
      4-5 Maze Conditionals 5_instruction: 나 해바라기 바래! '만약' 블럭을 사용하면 적을 블럭을 사용해서 갈
        수 있어..
      4-5 Maze Conditionals 6_instruction: 나 해바라기 바래! '만약' 블럭을 사용하면 적을 블럭을 사용해서 갈
        수 있어..
      4-5 Maze Conditionals 7_instruction: 좋아요. 다시 한번 연습해 보세요. 그렇게 어렵지 않지만, 먹개비를 조심하세요.
      4-5 Maze Conditionals 8_instruction: '"조건/선택" 블럭은 조건을 검사한 다음에 그 결과에 따라 하나의 작업을
        선택해 실행해 줍니다. 이 블록을 사용해서 저를 해바라기로 보내주세요.'
      4-5 Maze Conditionals 9_instruction: '"조건/선택" 블록을 다시 한 번 사용해 보겠습니다. 한 번에 성공할
        수 있겠어요?'
      4-5 Maze Conditionals Assessment 1_instruction: '"~할 때까지" 블록과 "만약-아니면" 블록을 사용하고
        가장 적은 블록 개수로 해바라기로 보내주세요.'
      4-5 Nested Loops 1_instruction: '이 삼각형들을 그리는 코드를 완성시켜 주세요. 첫 번째 것은 만들어져 있습니다.
        힌트: 360 도 방향으로 3개의 삼각형들이 있습니다.'
      4-5 Nested Loops 10_instruction: 이전에 사용되었던 반복 블럭들을 사용해서 마지막 줄의 별들을 그려 주세요. 별들은
        50 픽셀씩 떨어져 있습니다. 각 별들의 너비는 30 픽셀입니다.
      4-5 Nested Loops 11_instruction: 중첩 반복을 사용해서 사람다니는 길에 10개의 사각형들을 그려주세요. 각 사각형들은
        30 픽셀입니다.
      4-5 Nested Loops 12_instruction: 중첩 반복을 이용해서 36개의 삼각형들을 그려주세요.
      4-5 Nested Loops 2_instruction: |
        Now nest this loop inside another loop to
        draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles
        complete a 360 degree rotation.
      4-5 Nested Loops 3_instruction: "다른 반복 안에 시작 코드를 중첩시켜 넣어서 해를 만들어 주세요. 이러한 것을
        중첩 반복이라고 합니다.\r\n"
      4-5 Nested Loops 5_instruction: 주어진 코드를 반복시켜서 풍차를 만들어 주세요.
      4-5 Nested Loops 6_instruction: 삼각형 코드를 반복시켜서 육각형을 그려 주세요.
      4-5 Nested Loops 7_instruction: '이 디자인을 10번 반복시켜주세요. 한 번 반복하고나서 얼마나 회전해야 할까요?
        (힌트: 360을 10으로 나누면 얼마일까요?)'
      4-5 Nested Loops 8_instruction: '이 디자인을 6번 반복시켜주세요. 한 번 반복하고나서 얼마나 회전해야 할까요?
        (힌트: 360을 6으로 나누면 얼마일까요?)'
      4-5 Nested Loops 9_instruction: 악어 입 안에 이빨을 그려주세요!
      4-5 Nested Loops Assessment 1_instruction: 중첩 반복을 사용해서 디자인을 완성시켜주세요.
      4-5 While Loops 1_instruction: 구멍으로 이동해서 "메우기" 블록으로 흙을 2번 메우기 해주세요.
      4-5 While Loops 2_instruction: 흙더미로 이동해서 "치우기" 블록으로 흙을 5번 치우기 해주세요.
      4-5 While Loops 3_instruction: '흙더미로 이동해서 흙을 모두 치우고, 구덩이로 이동해서 흙을 모두 메워 주세요.
        힌트: 최대한 블록을 적게 사용하세요.'
      4-5 While Loops 4_instruction: '와! 진짜 깊은 구덩이를 발견했습니다. 얼마나 흙을 메워야 할지 모르겠어요. 구덩이가
        다 메워질 때까지 계속 흙을 채울 수 있을까요? 힌트: 이번에는 while 블록을 사용해 보세요.'
      4-5 While Loops 5_instruction: 와! 이번에는 깊은 구덩이가 2개 입니다. 2개의 구덩이를 모두 채워주세요.
      4-5 While Loops 6_instruction: 와우, 저기 엄청 큰 흙더미가 있네요! 흙더미를 모두 치워보세요.
      4-5 While Loops 7_instruction: 와우, 이제는 3개의 흙더미가 있습니다! 3개의 흙더미를 모두 치워주세요.
      4-5 While Loops 8_instruction: ' 진짜 깊은 구덩이와 진짜 큰 흙더미가 있습니다. 구덩이를 메우고 흙더미를 치우려면
        얼마나 많은 삽질이 필요 할까요? 힌트: 모두 while 반복을 사용해 보세요.'
      4-5 While Loops Assessment 1_instruction: 구덩이와 흙더미가 많이 있습니다. 모든 구덩이와 흙더미를 없애주세요.
      AlgPD DR Free Play_instruction: Create a function based on your own word problem.
      AllTheThings Applab - Turtle move with button_instruction: |
        Add a button that
        moves the turtle when clicked.  (Click to see full instructions)
      allthethings_template_backed1_instruction: 'Backed by a template #1'
      allthethings_template_backed2_instruction: 'Backed by a template #2'
      App Lab test_instruction: 검사
      Applab test_instruction: This level is submittable. For testing only!
      AppLab_test02_instruction: |
        One sentence summary of the activity. Click to
        view full instructions.
      Artist - Nested Loops 1_instruction: |
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      Artist - Nested Loops 10_instruction: |
        Draw the last row of stars on this flag
        by looping the provided blocks. The stars are 50 pixels apart, but remember
        that the stars themselves are 30 pixels wide.
      Artist - Nested Loops 11_instruction: |
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: "Now nest this loop inside another loop\nto
        draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles\ncomplete
        a 360 degree rotation.  \n"
      Artist - Nested Loops 3_instruction: "Create a sun by nesting the starter code\nin
        another loop. This is called a nested loop.\r\n"
      Artist - Nested Loops 5_instruction: Loop the given code to create a windmill.
      Artist - Nested Loops 6_instruction: |
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: Draw the teeth in the alligator's mouth!
      Artist - Nested Loops Assessment 1_instruction: 중첩 반복을 사용해서 디자인을 완성시켜주세요.
      Auto Open Function Editor_instruction: |
        You can call functions from inside
        other functions! Using your "shape" function as a base, create 3 house shapes
        each 20 pixels larger than the last starting at 50 pixels in length. Using
        a counter loop might be helpful.
      Bee Recommended Blocks test_instruction: 자주색 꽃들은 1 또는 0 의 꽃꿀이 있지만, 정확히 알 수 없습니다.
        꽃꿀이 없는 자주색 꽃에서 꿀을 모으지 마세요. if 블록을 사용해서 꽃꿀이 1 만큼 있는지 확인해 주세요.
      Big Game Animation 1 (copy 1)_instruction: |
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click "Run" to see what your game can currently do (not much!), update any
        variables you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |
        The update-target function takes the target's
        current x value, and returns an updated value. Complete the update-target
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |
        The update-danger function should work just
        like update-target, except that the danger should move from the right side
        over towards the left. Complete update-danger to make the danger fly across
        the screen.
      Big Game Animation 4_instruction: |
        At this point in your game, your danger
        should run across the screen from right to left, and your target should run
        across from left to right. They don't ever come back on screen once they've
        left, but we'll take care of that later. Take a minute to make sure your
        game is working like you want it to, and then click "Finish" to move on.
      Big Game Booleans 1_instruction: |
        When you last worked on your game we got
        our target and danger sprites to fly across the screen, but they never come
        back. Click "Run" to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Booleans 2_instruction: |
        Go to the Functions section of the toolbox
        and complete the safe-left? function so that it returns true if the sprite's
        x coordinate is greater than -50. If you're successful you should see the
        Danger go off the left side and then return on the right side.
      Big Game Booleans 3_instruction: |
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |
        Complete the onscreen? function so that it
        checks whether both safe-left? and safe-right? are true.
      Big Game Booleans 5_instruction: |
        At this point your Danger should run across
        the screen from right to left, your Target should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        "Finish" to move on.
      Big Game Collision 1 (copy 1)_instruction: |
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Collision 1_instruction: |
        At this point you've programmed a video
        game with a moving Target and Danger, both of which return to the screen once
        they've left, and a Player that responds to keyboard input. Click "Run"
        to see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |
        Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy).
      Big Game Collision 4_instruction: |
        Complete the collide? function so that it
        returns true if the distance between two points is less than 100 pixels apart.
      Big Game Complete_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Final_instruction: |
        You made it! At this point your game should be
        fully functioning, take some time to enjoy your new game and make any final
        tweaks to it. When you're happy with the final product, click Finish and
        you'll have an opportunity to share a link to your game. Good work!
      Big Game Player 1_instruction: |
        We're getting really close to a finished game!
        Last time you worked on your game, you used booleans to make your Target and
        Danger return to the screen once they've left. Click Run to see how your
        game looks right now, and then we'll get to making your Player move up and
        down.
      Big Game Player 2_instruction: |
        Edit the update-player function so the player
        moves up when the up arrow (keycode 38) is pressed, and moves down (keycode
        40) when the down arrow is pressed.
      Big Game Testing_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Vars 1 (copy 1)_instruction: |
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |
        The first step to making this game your own is
        to give it a good Title. Click edit on the title and subtitle variables and
        change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |
        Now let's set the background for your new game.
        Edit the bg variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Brad Spooky House Copy_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      Brad Spooky House_instruction: |
        Freeplay: Here are the functions you've written,
        and some more for you to play with. Draw something awesome! Play with the
        pen width to see how different your drawings look!
      Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      Busy Bee 2_instruction: 이 꿀벌은 아주 바쁘답니다! 단순한 코드를 만들어 낼 수 있는 패턴들을 찾아보세요.
      Busy Bee_instruction: 이 꿀벌은 아주 바쁘답니다! 단순한 코드를 만들어 낼 수 있는 패턴들을 찾아보세요.
      C3-Farmer While Loops 1_instruction: |
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: |2
         There is a really deep hole and a really
        large pile of dirt.  How many shovelfuls of dirt need to be moved around to
        make the ground flat?  Hint: Use the while loop for both.
      C3-Farmer While Loops Assessment 1_instruction: |
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      Calc Circles of Eval .1_instruction: |
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |
        Here's a function for addition which
        takes two numbers and returns their sum. Use this Addition Block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |
        Use a Multiplication Block to complete
        this code.
      Calc Circles of Eval 3_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 6_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 8_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 9_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval Free Play_instruction: |
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |
        Write a function f that takes a parameter
        x and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |
        We don't have to call our function f every
        time; create a function called times-ten that should take a parameter x and
        return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |
        Write a function called half that takes a
        number x and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |
        Let's use the Design Recipe to create a
        function called cube - this function should take in a Number and return that
        number to the power of 3. Make sure to write two example cases! When you're
        done, use your new function to calculate cube(7).
      Calc Design Recipe 2_instruction: "Your school is holding a bake sale, and\nyou
        need to track the cost of making each cookie, the money paid, and the\ntotal
        profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\r\nWrite\nthe
        function cost, which takes in the number of cookies you intend to sell,\nand
        returns the cost of making those cookies."
      Calc Design Recipe 3_instruction: |
        Write the function sales which takes in
        the number of cookies sold, and produces the amount of money customers spent
        to buy those cookies (each cookie is sold at $1.50).
      Calc Design Recipe 4_instruction: |
        Using the two functions we just wrote, write
        the function profit, which takes in the number of cookies you sold, and gives
        you back the total profit you make from selling your cookies, accounting for
        the cost of baking them.
      Calc Free Play_instruction: |
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: "In the last puzzle you wrote a contract\nfor
        the function \"rocket-height\" that states it has a range of Number, domain\nof
        Number, and should return the height of the rocket traveling at 15 m/s\nafter
        a given number of seconds. Let's write an example case now for the\nheight
        of the rocket at 3 seconds.\r\n\r\n\r\n\r\n  \r\n\r\n"
      Calc Rocket 1_instruction: |
        In the last puzzle you wrote a contract for the
        function rocket-height that states it has a range of Number, domain of Number,
        and should return the height of the rocket traveling at 15 m/s after a given
        number of seconds. Let's write an example case now for the height of the
        rocket at 3 seconds.
      Calc Rocket 2_instruction: |
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |
        Here we've set the age variable to 17 years. Can
        you write an expression that calculates age in days?
      Calc Vars 1_instruction: |
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called age. Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |
        Here's a new variable called age-in-months. Use
        the variable age to set age-in-months.
      Calc Vars 2_instruction: |
        Can you write an expression that calculates age in
        months?
      Calc Vars 3 (copy 1)_instruction: |
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Code Studio Puzzle Challenge 1 - Artist_instruction: "Draw the line. It is\n200
        pixels long. \n"
      Code Studio Puzzle Challenge 1 Artist1_instruction: "Draw the line. It is 200\npixels
        long. \n"
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the code to draw six lines that grow from 50, 60, 70,\n80,
        90, to 100 pixels long. \n"
      Code Studio Puzzle Challenge 14 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the loop to draw 4 squares that grow from 80, 100,\n120, to
        140 pixels. \n"
      Code Studio Puzzle Challenge 2 - Artist_instruction: |
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |
        Honeycombs can hold a specific
        amount of honey. Get the nectar from the flower and make some honey.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |
        Move the Bee to the flower
        and get the nectar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: "Draw\nthe
        line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: "Complete the\ncode
        to draw the line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast_instruction: "Draw the line.\nEach
        segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Bee Screencast_instruction: |
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |
        Draw a line by using
        a variable "length" set to 180.
      Course 2 Bee Loops 1_instruction: "Hi, I'm a bee. Can you help me collect\nthe
        nectar from these flowers? \n"
      Course 2 Bee Loops 13_instruction: |
        Assessment: Use the repeat block to collect
        all of the nectar.
      Course 2 Bee Loops 2_instruction: |
        Can you do the same task more easily with
        a loop?
      Course 2 Bee Loops 3_instruction: |
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: |
        What happens if you loop this sequence 3
        times? Don't forget to make the honey at the end!
      Course 2 Maze Loops 1_instruction: 5 개의 블록들만 사용해서 돼지로 이동시켜 주세요.
      Course 4 2_instruction: 꿀벌이 꽃꿀을 모으고 있습니다. 꽃들에서만 꽃꿀을 모을 수 있게 해 주세요.
      Course 4 Artist 1_instruction: |
        Help me draw a box. (Each line is 200 pixels
        long)
      Course 4 Artist 10_instruction: "힌트를 다시 보려면 여기를 눌러보세요!\r\r\n재미있는 모양을 위한 코드가
        있습니다. 한 번 실행할 때마다 회전시키면 어떤 일이 일어날까요? 이 모양의 각도는 420도까지 가능하고, 실행할 때마다 화가가 바라보는
        방향이 바뀔 것입니다. 그리고 그 각도는 정확히 60도 입니다."
      Course 4 Artist 11_instruction: 자 이제 도전해보세요! 이전에 보았던 블록들만 사용해서 만들 수 있는 디자인이
        있습니다. 어떻게 하면 똑같이 만들 수 있을까요? 실패하더라도 계속 도전해 보세요. 한 번에 성공하는 사람은 거의 없습니다. 힌트가
        필요하다고요? 여기를 눌러보세요!
      Course 4 Artist 12_instruction: "멋진 디자인을 위한 도움말이나 힌트가 필요하면? 여기를 클릭하세요!\r\n\r\n아니면,
        자유롭게 디자인해 보세요!"
      Course 4 Artist 13_instruction: 계속 하고 있나요? 빈 캔버스가 있습니다. 마음대로 그려보세요.
      Course 4 Artist 2_instruction: 이 코드를 반복시켜서 회색 사각형을 그려주세요.
      Course 4 Artist 20_instruction: 계속 하고 있나요? 빈 캔버스가 있습니다. 마음대로 그려보세요.
      Course 4 Artist 3_instruction: 이 코드를 실행(또는 실행 누르기) 하면 어떻게 될지 생각해 보세요. 그 다음에
        그림을 완성할 때까지 충분히 여러 번 시도해 보세요.
      Course 4 Artist 4_instruction: 원 안에는 얼마나 많은 각이 있을까요? 색 원들을 만들어내기 위해서 필요한 수를
        반복 블록에 채워넣어주세요.
      Course 4 Artist 5_instruction: '이 디자인의 나머지 반을 만들어서 대칭이 되도록 만들어 보세요. 삼각형들은 변들이
        같고 50 픽셀 길이입니다. 힌트: 추가해야 할 모든 블록들을 찾아내기 위해서 코드를 여러 번 실행시켜봐야 할 수도 있습니다.'
      Course 4 Artist 6_instruction: '이 삼각형들을 그리기 위한 코드를 완성시켜보세요. 힌트: 360 도 회전 안에
        3개의 삼각형들이 있습니다... 360 안에 3개를 몇 번 넣을 수 있을까요?'
      Course 4 Artist 7_instruction: |
        Now nest this loop inside another loop to draw
        10 triangles. This is called a nested loop. Hint: All 10 triangles complete
        a 360 degree rotation.
      Course 4 Artist 8_instruction: 이 코드 블록을 여러번 반복시켜 해를 그려보세요.
      Course 4 Artist 8a_instruction: "이 모양이 기억이 나나요? 이제 처음에 아무 블록들이 없는 상태로 만들어내야
        합니다!\r\n힌트: 360도 안에 3개의 삼각형들이 있습니다... 360 안에 3이 몇 번이나 들어갈 수 있을까요?"
      Course 4 Artist 9_instruction: '이 디자인을 10번 반복 시키면서, 한 번 그릴 때마다 회전시켜보세요. 얼마나
        회전 시켜야 하는지에 대한 힌트: 360을 10으로 나누면?'
      Course 4 Artist Binary 1_instruction: "여기에 1, 0 로만 이루어진 문자열을 입력해서, 화가를 왼쪽에서
        오른쪽으로, 위에서 아래로 움직이는 함수가 있습니다. 화가는 1을 보면 사각형을 채우고, 0이면 무시할 것입니다. \r\n\r\n이
        코드를 실행시킨 후, 화가가 2진 정보를 이용해서 이 패턴을 그려내는 것을 살펴보세요."
      Course 4 Artist Binary 1a_instruction: "여기에 1, 0 로만 이루어진 문자열을 입력해서, 화가를 왼쪽에서
        오른쪽으로, 위에서 아래로 움직이는 함수가 있습니다. 화가는 1을 보면 사각형을 채우고, 0이면 무시할 것입니다. \r\n\r\n이
        코드를 실행시킨 후, 화가가 2진 정보를 이용해서 이 패턴을 그려내는 것을 살펴보세요."
      Course 4 Artist Binary 2_instruction: 이 이미지를 그려내기 위해서, 어떤 2진 문자열이 8번 반복시켜 줄까요?
      Course 4 Artist Binary 3_instruction: 3자리의 2진 문자열을 반복시켜서 이 패턴을 그려주세요.
      Course 4 Artist Binary 4_instruction: 각 2진 문자는 이 그림의 한 줄을 의미합니다. 2진 문자열을 재배치해서
        찡그린 얼굴 모양을 웃는 얼굴 모양으로 만들어 주세요.
      Course 4 Artist Binary 5_instruction: 이 이미지를 그리기 위해 11번을 반복 시킬 수 있는 6자리 2진 문자열은
        어떤 것 일까요?
      Course 4 Artist Binary 6_instruction: 이 이미지를 그리기 위해 반복하는 것들 중에서 가장 짧은 2진 문자열은
        어떤 것 일까요?
      Course 4 Artist Binary 7_instruction: 이 그림을 마무리하세요.
      Course 4 Artist Binary Free Play 2_instruction: '자유 플레이: 빈 캔버스가 있습니다. 마음대로 재미있게
        그려보세요!'
      Course 4 Artist Binary Free Play 2a_instruction: "좀 더 높은 해상도로 표현할 수 있는 캔버스가
        여기 있습니다. - 16 픽셀 * 16 픽셀!\r\n\r\n2진 비트 문자열로 어떤 것이 그려지는 지 살펴보세요."
      Course 4 Artist Binary Free Play 2b_instruction: 여기를 눌러 힌트를 살펴보세요.
      Course 4 Artist Binary Free Play_instruction: '자유 플레이: 2진 문자열을 이용해서 자유롭게 그려보세요!'
      Course 4 Artist Binary pre1_instruction: "2진은 단지 서로 다른 2가지 만 가지고 정보를 표현하는 방법입니다.
        \"off\"(또는 0 으로 표현) 과 \"on\"(또는 1로 표현) 만 사용한다고 해봅시다.\r\n\r\n주어진 \"픽셀판\"이라는
        격자를 사용하면, 그 위를 이동하다가 특정 사각형들에서만 회전이 가능하게 해서 디자인들을 만들 수 있습니다. 화가가 첫 번째 줄에 2진수
        표현으로 \"01010101\"을 그리도록 해보세요."
      Course 4 Artist Binary ryan_instruction: "2진은 단지 서로 다른 2가지 만 가지고 정보를 표현하는 방법입니다.
        \"off\"(또는 0 으로 표현) 과 \"on\"(또는 1로 표현) 만 사용한다고 해봅시다.\r\n\r\n주어진 \"픽셀판\"이라는
        격자를 사용하면, 그 위를 이동하다가 특정 사각형들에서만 회전이 가능하게 해서 디자인들을 만들 수 있습니다. 화가가 첫 번째 줄에 2진수
        표현으로 \"01010101\"을 그리도록 해보세요."
      Course 4 Artist For  Functions 10_instruction: 조금 더 나아가 봅시다. "사각형 한 변 그리기" 함수를
        이용해서 별 모양을 만들어보세요. 행운을 빕니다!
      Course 4 Artist For  Functions 11_instruction: 조금 더 나아가 봅시다. "사각형 한 변 그리기" 함수를
        이용해서 별 모양을 만들어보세요. 행운을 빕니다!
      Course 4 Artist For Loops 1_instruction: '이 삼각형은 너비가 50 픽셀입니다. 힌트: 반복 블록을 1개
        사용하세요.'
      Course 4 Artist For Loops 10_instruction: 자유 놀이 시간! 사용 방법을 배운 블럭들을 사용해서 무엇이든
        원하는 것을 재미있게 만들어보세요.
      Course 4 Artist For Loops 11_instruction: '이전 스테이지에서 어떤 모양의 변의 길이를 조절하기 위해 사용했던
        밴수에 대해서 생각해 보세요. 이번에는 "카운터" 변수라는 것을 이용해서 같은 작업을 해 보도록 하겠습니다. 이 패턴은 삼각형으로 시작하고,
        한 변을 붙이면서 10각형(10개의 변을 가진 다각형) 을 그립니다. 각 변의 길이는 100 픽셀 입니다. 힌트: 360 나누기 어떤
        모양의 변의 개수는 회전시켜야 하는 각도 입니다.'
      Course 4 Artist For Loops 11a_instruction: "자 이제 모두 함께 사용해 봅시다! \"반복(~인 동안)\"과
        \"카운터\"를 이용해서, 앞의 것보다 2개 더 많은 변을 가지고 있는 각각의 도형들을 만들어보세요. 각 변의 길이는 각 다각형의 변의
        개수의 10배이어야 합니다.\r\n\r\n아주 적은 코드가 미리 주어져 있습니다."
      Course 4 Artist For Loops 12_instruction: |
        That looked pretty cool, but now
        I'd like to draw each shape next to the last one. This time each side is
        20 pixels. Use a jump block to jump forward 40 pixels after each shape.
      Course 4 Artist For Loops 13_instruction: 흠, 저 모양들은 점점 더 커지는 군요! 이전에 이 문제를 변수를
        이용해 해결했었습니다. 카운트 변수를 이용해서 어떻게 각 변의 크기를 줄일 수 있을까요? 일정 거리 만큼 앞으로 움직이지말고, 앞으로
        (100/카운터) 픽셀 만큼 움직여 보세요.
      Course 4 Artist For Loops 14_instruction: 일반적인 도형들에 사용하는 각 보다 조금 더 많거나 적게 각을
        회전시키면 멋진 효과를 만들어낼 수 있습니다. 이전 레벨에서의 코드를 이용해 실험해 보는데, 89도를 사용하면 이런 비틀어진 사각형
        나선 구조를 만들어 낼 수 있습니다.
      Course 4 Artist For Loops 15_instruction: '자유 플레이: "반복(~동안)"을 이용해서 원하는 그림들을
        만들어보세요. 여러분이 사용할 수 있는 편리한 변수들을 몇 개 더 추가했습니다.'
      Course 4 Artist For Loops 2_instruction: '50 부터 100 까지 10씩 올리며 카운트하는 반복(~동안)
        구조 안에 삼각형을 그리는 코드를 넣어 두었습니다. 참고: "실행"을 누르기 전에 코드를 먼저 살펴보세요.'
      Course 4 Artist For Loops 3_instruction: |
        Use the last puzzle as a reference
        to complete this one.  The smallest triangle has 20 pixel sides, the largest
        has 200 pixel sides, and each triangle is 20 pixels larger than the last.
      Course 4 Artist For Loops 4_instruction: |
        How would you modify what you've
        learned to draw these squares? They start at 15 pixels long, the largest is
        300 pixels long, and each square is 15 pixels larger than the last.
      Course 4 Artist For Loops 5_instruction: |
        Good job on the last puzzle! Let's
        use that "counter" variable block again to draw this cool picture.
      Course 4 Artist For Loops 6_instruction: '자유 플레이: 점점 커지는 도형들을 반복(~동안) 을 이용해
        자유롭게 만들어 보세요.'
      Course 4 Artist For Loops 6a_instruction: 이 레벨을 완료하기 위해서 지난 번 코드에서 3가지만 수정하면
        됩니다.
      Course 4 Artist For Loops 7_instruction: 알고리즘에서 반복 구조 안에 들어있는 "이동하기" 와 "돌기"
        블록들은 그대로 두고, "반복 3회" 만 지우면 어떻게 될까요? 이 나선형 삼각형에서 각 선분들은 그 이전 선분보다 20 픽셀 씩 더
        깁니다.
      Course 4 Artist For Loops 8_instruction: "이전 그림에서 1가지만 바꾸면 이 그림을 만들 수 있습니다.
        어떤 것을 바꾼 것인지 찾아낼 수 있나요?\r\n\r\n힌트: 뭔가 제거하면 됩니다!"
      Course 4 Artist For Loops 8a_instruction: 이전 이미지에서 1가지만 바꾸면 이 이미지를 만들 수 있습니다.
        어떤 것을 바꾼 것인지 찾아낼 수 있나요?
      Course 4 Artist For Loops 9_instruction: 나선 구조를 만들 수 있나요? 1 픽셀 부터 75 픽셀까지 한
        번에 1 픽셀씩 증가시키면서 이동해 보세요.
      Course 4 Artist For Loops Challenge_instruction: "이 이미지를 만들어내기 위해서 어떤 것들을 어떻게
        써야 할 지 생각해 낼 수 있을까요?\r\n\r\n힌트가 필요한가요? 여기를 클릭하세요."
      Course 4 Artist For Loops inspire_instruction: "멋진 자유 플레이: 여러분은 이제 이런 패턴을 만들기
        위해 필요한 모든 것들을 배웠습니다! 이 그림이 여러분이 느끼기에 멋지다면, 비슷한 것을 한 번 만들어 보세요. 아니면, 만들고 싶은
        것을 자유롭게 만들어도 됩니다.\r\n\r\n힌트가 필요한가요? 여기를 클릭하세요."
      Course 4 Artist Functions 1_instruction: 반복을 이용해서 한 변의 길이가 100 인 사각형을 만들어 보세요.
      Course 4 Artist Functions 10_instruction: 사각형 위에 꼭 맞는 삼각형을 그리기 위해서 어떤 블록을 추가해야
        할까요?
      Course 4 Artist Functions 11_instruction: 큐브를 그리는 코드를 확인해 보세요 - "큐브 그리기"라는 이름의
        함수 안에 넣어주세요.
      Course 4 Artist Functions 12.1_instruction: 자 이제 "8각형 그리기 20" 이라는 함수를 만들어보세요.
        8각형의 각 변의 길이는 20 픽셀입니다.
      Course 4 Artist Functions 12_instruction: 직선을 그리기 위해서 사각형 함수를 반복시켜보세요.
      Course 4 Artist Functions 13.1_instruction: "자 이제, \"오른쪽 위로 점프\"라는 함수를 만들어보세요.
        이 함수는 8각형 위에 있는 화가가 오른쪽 위로 움직이게 해서 패턴을 다 그릴 수 있게 해줄 것입니다.\r\n\r\n힌트: 여러분이
        오른쪽 위로 가려면? 패턴 위에서 8각형의 3/8만큼 점프하면 될 것입니다."
      Course 4 Artist Functions 13_instruction: 새로운 "사각형의 한 변 그리기" 함수를 살펴보세요. 함수가
        어떻게 만들어졌는지 구조를 살펴보세요. 다음 퍼즐을 하기 위해서는 "실행"을 누르면 됩니다.
      Course 4 Artist Functions 14.1_instruction: 자 이제, "오른쪽 위로 점프" 함수를 만들어서 이 패턴을
        완성할 수 있도록, 화가를 8각형의 오른쪽 위로 이동시켜보세요.
      Course 4 Artist Functions 14_instruction: 잘 했습니다! 이제 새로운 "사각형의 한 변 그리기" 함수를
        이용해서 사각형을 그려보세요. 사각형의 한 변의 길이는 40 픽셀입니다.
      Course 4 Artist Functions 15_instruction: '조금 더 배워 봅시다. "사각형의 한 변 그리기" 함수를 이용해서
        별 모양을 그릴 수 있을까요? 행운을 빕니다! 힌트: 144도를 돌아야 합니다.'
      Course 4 Artist Functions 2_instruction: '20 픽셀 만큼 씩 떨어져 있는 3개의 사각형을 그려보세요.
        힌트: 각 사각형의 크기는 100 픽셀입니다.'
      Course 4 Artist Functions 3_instruction: "\"사각형 그리기\" 함수 블록을 이용해서 이 그림을 만들어보세요.
        힌트: 각 사각형들은 120 픽셀 만큼 씩 떨어져 있습니다.\r\n"
      Course 4 Artist Functions 4_instruction: '직접 "함수 블록"을 만들 준비가 되었나요? 도구상자에서 "함수"
        블록을 클릭한 후에 "삼각형 그리기" 로 함수 이름을 바꾸세요. 그 다음에 이전에 반복 블록을 이용해서 삼각형을 만들었던 것과 같이
        삼각형을 만드세요. 그 다음에 오른쪽 위의 모서리에 있는 저장 후 닫기 를 누르세요. 힌트: 100 픽셀 크기의 삼각형을 만드세요.
        행운을 빌어요!'
      Course 4 Artist Functions 5 OLD_instruction: 집을 그리기 위해서 2개의 함수를 사용해 보세요. - 집을
        제대로 그리기 위해서, 이 코드에서 어떤 부분을 고쳐야 할까요?
      Course 4 Artist Functions 5_instruction: "\"사각형 그리기\" 함수 블록을 이용해서 이 그림을 만들어보세요.
        힌트: 각 사각형들은 120 픽셀 만큼 씩 떨어져 있습니다.\r\n"
      Course 4 Artist Functions 6_instruction: 사각형 위에 꼭 맞는 삼각형을 그리기 위해서 어떤 블록을 추가해야
        할까요?
      Course 4 Artist Functions 7_instruction: 사각형 함수를 이용해서 한 줄의 사각형을 그려보세요. 각 사각형의
        한 변의 길이는 40 픽셀입니다.
      Course 4 Artist Functions 8_instruction: |
        Are you getting the hang of how to
        use function blocks? Let's modify this square so that it is 200 pixels in
        size. Hint: click on "edit" to change the size of the "draw a square"
        function editor. Remember to click on "save and close" to get out of the
        function editor.
      Course 4 Artist Functions 9_instruction: 함수를 만들기 위해 필요한 거의 모든 코드를 해보았습니다. 하지만
        뭔가 빠진 듯 하네요. 이 함수 블록을 완성해주세요.
      Course 4 Artist Functions challenge_instruction: 여기를 눌러 힌트를 다시 살펴보세요.
      Course 4 Artist Functions Inspiration_instruction: 여기를 눌러 힌트를 다시 살펴보세요.
      Course 4 Artist Functions inspire_instruction: |
        여기를 눌러 멋진 그림을
        다시 살펴보세요.
      Course 4 Artist Inspire_instruction: "멋진 디자인을 위한 도움말이나 힌트가 필요하면? 여기를 클릭하세요!\r\n\r\n아니면,
        자유롭게 디자인해 보세요!"
      Course 4 Artist Params 1_instruction: 한 변의 길이가 50 픽셀인 사각형을 그리는 함수를 수정해보세요.
      Course 4 Artist Params 10_instruction: |
        You can call functions from inside
        other functions! Using your "shape" function as a base, create 3 house shapes
        each 20 pixels larger than the last starting at 50 pixels in length. Using
        a counter loop might be helpful.
      Course 4 Artist Params 11_instruction: |
        How about a function called "pinwheel"
        that takes three parameters - "sides," "length" and "repeat." You can
        calculate how much to turn after each shape using the same math you used to
        figure out the turns for a shape of "sides". Can you recreate this picture?
        Here's a tip each shape is 100 pixel's in length.
      Course 4 Artist Params 12_instruction: '"바람개비" 함수를 이용해서 이 모양들을 그려보세요. 각 이미지의
        측면 길이는 50 입니다.'
      Course 4 Artist Params 13_instruction: '자유 플레이: 여러분들이 만든 함수와 가지고 놀 수 있는 함수들이
        더 있습니다. 멋진 것을 그려보세요!'
      Course 4 Artist Params 2_instruction: |
        That triangle function would be a whole
        lot more useful if it could draw triangles of different sizes. I've added
        a parameter for line length, but it doesn't do anything yet. Can you update
        the function so it uses the "length" parameter when it draws each side?
        The triangle sizes are 150 pixels, 75 pixels and 25 pixels.
      Course 4 Artist Params 3_instruction: |
        Awesome, can you draw each of these
        triangles with that new function? The first is 25 pixels long, the second
        is 50, and the third is 75.
      Course 4 Artist Params 4_instruction: '''사각형''이라는 새로운 함수를 추가할 수 있나요? 삼각형 함수와
        같이 길이 매개 변수를 전달해야 합니다. 이번에는 100 픽셀 씩 떨어져 있는 길이가 25 픽셀, 50 픽셀, 75 픽셀인 세 개의
        사각형을 그립니다.'
      Course 4 Artist Params 5_instruction: |
        Use both of your new functions to draw
        this picture. To make this easier you use a loop with a "counter" parameter.
      Course 4 Artist Params 6_instruction: |
        Let's edit this "draw a shape" function.
        It already has a "length" parameter. Now, let's edit the function to also
        add a "sides" parameter. Remember the angle to turn for a given shape is
        360 divided by the sides it has. Hint: lengths for each shape are the triangle
        is 100 pixels, the hexagon is 25 pixels and the square is 50 pixels.
      Course 4 Artist Params 7_instruction: |
        Can you draw these shapes by filling
        in the "???" The square and triangle are 100 pixels in size while the hexagon
        is 75 pixels in size.
      Course 4 Artist Params 8_instruction: |
        Can you figure out how to draw this
        shape? Here's a hint create a new function with 6 sides called a hexagon.
      Course 4 Artist Params 9_instruction: 우리가 안쪽 루프를 제거한 카운터 루프를 사용했을 때를 기억하나요?
        재미있는 놀이를 해 봅시다. "변"과 "길이" 매개변수를 가지는 "도형 그리기" 함수를 사용해 봅시다. 이 모양들을 만들 수 있나요?
        이 사각형 카운터는 5/100/5가 되어야 하고, 삼각형 카운터는 10/100/10, 육각형 카운터는 2/100/2가 되어야 합니다.
      Course 4 Artist Var 9_instruction: '삼각형을 그리는 알고리즘이 여기 있습니다. "변"이라는 변수를 대신 사용하도록
        수정하세요. "변" 변수에 숫자 3을 대입하세요. 힌트: "변을 ~로 설정하기" 블록을 이용하세요.'
      Course 4 Artist Vars 1_instruction: 제가 이등변 삼각형을 그리는 것을 도와줄래요? 양변의 길이가 정확히 100
        픽셀이 되어야 합니다.
      Course 4 Artist Vars 10_instruction: 여기 더 작은 삼각형의 바깥에 삼각형을 그리는 알고리즘이 있습니다. "변"
        변수를 사용하여 각 삼각형을 그리도록 알고리즘을 수정할 수 있나요? 코드를 훑어보고 여러분이 숫자 3을 볼 때마다 그것을 "변" 변수로
        바꿔보세요. "변 설정하기" 블록을 사용하는 것을 기억하세요.
      Course 4 Artist Vars 11_instruction: 이것은 마지막 퍼즐로부터 동일한 개념을 사용한 좀 더 복잡한 코드입니다.
        - 사각형들로 만들어진 이 그림을 그리기 위해 "변" 변수를 어떻게 설정해야 할까요?
      Course 4 Artist Vars 12_instruction: |
        Let's set the "sides" variable to
        5. The more sides we add to this algorithm, the bigger this whole pattern
        gets! Notice that there is another variable called "length". We can now
        use that wherever we have a "move forward." Set the "length" variable
        to 75 for this shape.
      Course 4 Artist Vars 13_instruction: "When a shape has lots of sides, each\nside
        needs to be shorter if you want the whole pattern to fit on the screen.\n\r\nLet's
        recreate the algorithm for this amazing pattern, but instead of\nmanually
        setting the \"length\" variable, let's use a math block with the\n\"sides\"
        variable inside to make sure that each shape fits correctly. The\nperimeter
        of each polygon is 300 pixels.\r\nNeed some hints?  Click here."
      Course 4 Artist Vars 14_instruction: "Free Play: Check it out! Now your algorithm\nis
        nested within one more loop. Experiment with changing the values of your\ntwo
        variables to draw cool patterns.\r\n\r\nFor even more effect, try playing\nwith
        color!  Use random colors inside loops to see how it changes your design."
      Course 4 Artist Vars 2_instruction: |
        Instead of using "move forward by 150,"
        the "move" block is now referencing a variable called "length." Can you
        set "length" to 150 to draw this new triangle?
      Course 4 Artist Vars 3_instruction: |
        Here's a loop that draws a square, but
        something's missing. Can you fix it so that it uses the variable "length"
        to figure out how long each side should be?
      Course 4 Artist Vars 4_instruction: |
        Now I want to make a rectangle that is
        twice as tall as it is wide. We've got a variable called "width" that needs
        to be set to 100. Can you use the math blocks to complete the code?
      Course 4 Artist Vars 5_instruction: |
        Use the variable "sides" to control
        how many times this loop gets run.
      Course 4 Artist Vars 6_instruction: "Here’s some code that can draw any regular\npolygon.
        There’s a new variable called sides that is set to 4. Can you use\nthe sides
        variable (along with the math block) to turn the right amount regardless\nof
        how many sides there are in the polygon?\r\n\r\nClick here to go back to\nthe
        hint!"
      Course 4 Artist Vars 7_instruction: "Use what you learned in the last puzzle\nto
        create this hexagon using the \"sides\" variable.\r\n\r\nSee how you could\nchange
        just one value to draw a triangle,  square, pentagon, or octagon?"
      Course 4 Artist Vars 8_instruction: |
        Free Play: Experiment with the number
        of sides this shape has. Can you change the algorithm so that the overall
        size of the shape stays the same, no matter how many sides it has? Hint: If
        you divide your starting length by the number of sides, the length of each
        side will get shorter as the number of sides gets higher.
      Course 4 Artist Vars 9_instruction: |
        Modify this algorithm so it uses the "sides"
        variable instead of a fixed number to draw a triangle. Don't forget to use
        the "set sides to" block.
      Course 4 Bee 1_instruction: |
        The bee can't tell what's under the cloud! First,
        use the "if" block to check whether it is a flower or a honeycomb. Then
        only gather nectar from it if it is a flower.
      Course 4 Bee 2_instruction: |
        Use the "if/else" block to check each object
        to see if it's a flower or a honeycomb . If it's a flower, collect nectar...otherwise,
        make honey!
      Course 4 Bee 3_instruction: |
        The unknown object is either a flower or a honeycomb.
        This time, use the if/else block to collect nectar if it is a flower, else
        make honey (because then it would be a honeycomb).
      Course 4 Bee 4_instruction: |
        This purple flower may have either 3, 2, or 1
        nectar. Here an if/else block is combined with another if/else block to create
        an "if/else-if/else" statement. Complete the solution to collect the unknown
        amount of nectar.
      Course 4 Bee 5_instruction: |
        This purple flower may have either 3, 2, or 1
        nectar. Add an if-else block to create an if, else-if, else block. Complete
        the solution to collect the unknown amount of nectar.
      Course 4 Bee 6_instruction: |
        This purple flower may have either 3, 2, or 1
        nectar. Create an if, else-if, else block to collect the unknown amount of
        nectar.
      Course 4 Bee 7_instruction: |
        Use everything you have learned so far to collect
        all the nectar. The purple flower may have either 3, 2, or 1 nectar.
      Course 4 Bee For Loops 1_instruction: |
        Use a loop to collect the nectar from
        each flower.
      Course 4 Bee For Loops 10_instruction: |
        If your loop is counting down, the
        increment is subtracted from your counter variable each loop. What should
        your increment be to collect 9, then 6, and then 3 nectar?
      Course 4 Bee For Loops 11_instruction: |
        What's wrong with this loop? See if
        you can fix it and make the bee collect all the nectar.
      Course 4 Bee For Loops 2_instruction: |
        Here's a new kind of loop, called the
        "for" loop. This particular for loop will count from 1 to 5 by 1, and run
        the contents of the loop each time it counts. Help the Bee get the nectar.
      Course 4 Bee For Loops 3_instruction: |
        You can solve this puzzle by using a
        for loop to count from 1 to 3 by 1. Now let's go get some nectar!
      Course 4 Bee For Loops 4_instruction: |
        Collect all of the nectar from these
        flowers. I wonder if there's an easier way to do this...
      Course 4 Bee For Loops 5_instruction: |
        Ah, the for loop makes this much easier!
        Using the "counter" variable from the for loop to loop the "get nectar"
        block the same number of times as the loop. Whew! That's a lot of loops.
        All the code you need it there, take a look at how it is put together then
        click on Run and see how it works.
      Course 4 Bee For Loops 6_instruction: |
        You can also use a for loop to count
        down. Try gathering this nectar by counting down from 5 to 1 by 1.
      Course 4 Bee For Loops 7_instruction: |
        Use your for loop "counter" variable
        to control how far to move horizontally.
      Course 4 Bee For Loops 8_instruction: |
        Can you use the loop variable to control
        movement and nectar collection?
      Course 4 Bee For Loops 9_instruction: |
        The last number in your for loop is
        called the "increment,"  and each time the loop is run the counter variable
        changes by the increment. Try collecting these flowers using an increment
        of 2.
      Course 4 Bee Loops 5 NEW_instruction: |
        Here are three flowers. Can you find
        the pattern of instructions that you need to repeat 3 times to collect the
        nectar with the fewest number of blocks?
      Course 4 Bee Loops 5a NEW_instruction: |
        Now, use loops to help the bee collect
        all the nectar on it's way to the honeycomb with as few blocks as possible.  When
        you get there, don't forget to make honey!
      Course 4 Bee Params 1_instruction: |
        Use the function "get 3 nectar" which
        turns, moves to collect the nectar, and then returns to the original location.
        Write a sequence to collect all of the nectar using "get 3 nectar."
      Course 4 Bee Params 2_instruction: |
        Modify the "get 3 nectar" function so
        it makes me turn right instead of left to the flowers.
      Course 4 Bee Params 3 (copy 1)_instruction: |
        Now there are flowers on both
        sides! Maybe you can use a parameter so that the same function works for flowers
        on either side. I've added a parameter called "direction" to the function.
        If the "direction" parameter equals 0 I should turn left, if it's 1 I should
        turn right.
      Course 4 Bee Params 3_instruction: "Now there are flowers on both sides! We've\nadded
        variables called \"left\" and \"right\" for you to use, and added a\nparameter
        called \"direction\" to \"get 3 nectar\". Edit \"get 3 nectar\"\nso that the
        bee turns the correct direction when the variables \"left\" or\n\"right\"
        are passed into the function.  \n"
      Course 4 Bee Params 4 (copy 1)_instruction: |
        Try using your new function to
        collect all of the flowers. Remember, 0 = left and 1 = right.
      Course 4 Bee Params 4 - Two WhenRun_instruction: |
        Try using your new function
        to collect all of the flowers. Remember to use the left and right variables.
      Course 4 Bee Params 4 backup_instruction: |
        Wouldn't it be nice if we could
        collect all of these nectars with the a single function? Try adding a new
        parameter to your function called "nectars" to control the amount of nectar
        to collect. You'll probably want to rename the function too!
      Course 4 Bee Params 4_instruction: |
        Try using your new function to collect
        nectar from all of the flowers. Remember to use the left and right variables.
      Course 4 Bee Params 5_instruction: |
        Let's start from scratch - can you create
        a new function called "get 5 nectar" with a direction parameter?
      Course 4 Bee Params 6 (copy 1)_instruction: |
        Try using your new function to
        collect all of this nectar.
      Course 4 Bee Params 6_instruction: |
        Wouldn't it be nice if we could collect
        all of these nectars with the a single function? Try adding a new parameter
        to your function called "nectar units" to control the amount of nectar to
        collect. You'll probably want to rename the function too!
      Course 4 Bee Params 7 (copy 1)_instruction: |
        Try using your new function to
        collect all of this nectar.
      Course 4 Bee Params 7_instruction: |
        Try using your new function to collect
        all of this nectar.
      Course 4 Bee Params 8 Clone 2_instruction: |
        Oooh, now there's honey to deal
        with too! How could you update your function to either get nectar or make
        honey.
      Course 4 Bee Params 8 clone 3_instruction: |
        Oooh, now there's honey to deal
        with too! How could you update your function to either get nectar or make
        honey.
      Course 4 Bee Params 8 Clone_instruction: |
        Oooh, now there's honey to deal
        with too! How could you update your function to either get nectar or make
        honey.
      Course 4 Bee Params 8 new_instruction: |
        Oooh, now there's honey to deal with
        too! How could you update your function to either get nectar or make honey.
      Course 4 Bee Params 8_instruction: |
        Challenge: Now there's honey to deal with
        too! Rewrite your function to use both the number of honey units and the number
        of nectar units.  How would you use those numbers to decide what you should
        do?
      Course 4 Bee Params Ex_instruction: |
        Try using your new function to collect
        all of this nectar.
      Course 4 Binary 1_instruction: |
        Here's a function that takes a binary string
        of 1's and 0's and instructs the farmer to turn on the go from left to right,
        top to bottom, turning on the squares where the number has a zero. Run the
        code provided to see how the farmers uses binary to draw an image.
      Course 4 Binary 2_instruction: |
        What binary string could you loop 8 times to
        draw this image? Hint: the number "1" fills a hole.
      Course 4 Binary 3_instruction: |
        Can you draw this pattern by looping a single
        binary string?
      Course 4 Binary 5 (copy 1)_instruction: |
        Which binary string, repeated 10 times,
        will draw this image?
      Course 4 Binary 5_instruction: |
        Which binary string, repeated 10 times, will
        draw this image?
      Course 4 Binary 6 (copy 1)_instruction: |
        Which binary string, repeated 10 times,
        will draw this image?
      Course 4 Binary 6_instruction: |
        Which binary string, repeated 10 times, will
        draw this image?
      Course 4 Binary 7_instruction: |
        Which binary string, repeated 10 times, will
        draw this image?
      Course 4 Binary 8_instruction: |
        You can complete the most of this image by
        looping a 5 bit binary number - then you'll need one more 4 bit number to
        get the bottom right-hand corner.
      Course 4 EC 1a_instruction: No rules. No clues. Just the challenge!
      Course 4 EC 1b_instruction: No rules. No clues. Just the challenge!
      Course 4 EC 2a_instruction: |
        **Extreme Challenge:**  No rules. No clues. Just
        the challenge!
      Course 4 EC 2b_instruction: |
        **Extreme Challenge:**  No rules. No clues. Just
        the challenge!
      Course 4 EC 2c_instruction: |
        **Extreme Challenge:**  No rules. No clues. Just
        the challenge!
      Course 4 EC 3_instruction: "Use what you learned in the previous level to draw\nan
        image like this. Note: The code becomes more simple if you incorporate\nparameters.
        \n"
      Course 4 EC 3a_instruction: |
        Extreme Challenge: No rules. No clues. Just the
        challenge!
      Course 4 Maze 1_instruction: Get the angry bird to the pig!
      Course 4 Maze 2_instruction: TNT를 피하세요!
      Course 4 Maze 3_instruction: '돼지를 잡기 위해서 앵그리 버드를 프로그래밍 하세요. '
      Course 4 Maze 4_instruction: |
        Try the "repeat" block to use fewer blocks
        when solving this puzzle...
      Course 4 Maze 5_instruction: 가능한 제일 적은 수의 블럭을 사용해서 이 퍼즐을 해결할 수 있나요?
      Course 4 Maze 6_instruction: 가능한 제일 적은 수의 블럭을 사용해서 이 퍼즐을 해결할 수 있나요?
      Course 4 Play Lab For Loops 2_instruction: |
        This time, let's try counting
        the odd numbers from 1 to 100.
      Course 4 Play Lab Params 1_instruction: |
        Here's a function called "jump"
        that causes your main character to jump up 100 pixels. Use the jump function
        to collect all of the flags.
      Course 4 Play Lab Params 10_instruction: "We've added one last function for\nyou.
        \r\n\r\nUse an \"if\" statement to program your game to call the \"level_up\"\nfunction
        only when \"player_score\" becomes greater than a certain number.\r\n\r\nFor\nexample:
        \"player_score\" > 6\r\n\r\nPlay the game, and make it past level\n4 to move
        to the next puzzle. "
      Course 4 Play Lab Params 2_instruction: "Now we've got flags that are too\nhigh
        for our current jump! Let's use both the \"up\" and \"down\" arrows\nso that
        we can have multiple jump heights.  \r\n\r\nWe need to add a parameter\nto
        our jump function called \"height\".  The up arrow should cause the dog\nto
        jump 200 pixels and the down arrow should make it jump only 100 pixels.\n\r\n\r\nHint:
        You will need to click \"edit\" on the jump function and update\nit so that
        it uses the \"height\" parameter."
      Course 4 Play Lab Params 3_instruction: |
        We have added another parameter to
        the jump function so that we can use it with other actors. Each actor is represented
        by a number, starting from one. Edit the "jump" function so that the definition
        includes the "actor" parameter.
      Course 4 Play Lab Params 4_instruction: |
        Here's a function called "patrol."
        Edit it to move Cat up 400 pixels and then down 400 pixels.
      Course 4 Play Lab Params 5_instruction: |
        Edit the the "patrol" function to
        add an "actor" parameter, so that we can call it for each of the actors
        on the screen. Remember, the actors correspond to numbers 1, 2, and 3.
      Course 4 Play Lab Params 6_instruction: |
        Add another parameter called "speed"
        to the "patrol" function. Try using a "set speed" block with the new "speed"
        parameter to help Penguin get both flags before the other sprites even get
        one.
      Course 4 Play Lab Params 7_instruction: "Let's have some fun! Look at the\ncode
        provided to see if you can figure out what each block does.  \r\n\r\nWhen\nyou're
        done, use the arrow keys to control Dog and collect all of the flags."
      Course 4 Play Lab Params 8_instruction: |
        Use a "when actor touches" block
        to send Dog back to the top-left ONLY if Dog touches any of the other actors.
      Course 4 Play Lab Params 9_instruction: "Here's our game from an earlier stage,\nbut
        most of the code is hidden. There’s a new function \"score_points.\"\r\n\r\nEdit\nthe
        function so that a \"points\" parameter is added to the \"player_score\"\nvariable.
        \r\n\r\nThe variable \"player_score\" should increase each time\nDog tags
        Cat with hearts, and decrease each time that Cat tags Dog with hearts.\r\n\r\nNote:\nWhen
        you're done, click \"Run\" to play.  When Dog scores 6 points, you will\nmove
        on to the next puzzle. "
      Course 4 Play Lab Vars 1_instruction: |
        This time you don't have to write any
        code, just hit "Run" to play the game! In this game, you're the dog who
        is trying to collect more flags than the cat. Use the down arrow to control
        the dog. Press "Finish" when you're done playing.
      Course 4 Play Lab Vars 2_instruction: |
        The race in that last puzzle wasn't
        very fair! Change the "dog_speed" variable to make sure you can collect
        more flags than Cat. The first to collect 10 flags wins!
      Course 4 Play Lab Vars 3_instruction: |
        Here's a new kind of game! Use the
        left and right arrows to move, and the up arrow to jump. See if you can collect
        all of the flags.
      Course 4 Play Lab Vars 4_instruction: |
        Now we're using a variable called "height"
        to control how high the dog can jump. Update the "height" variable so that
        the dog can jump high enough to reach all the flags.
      Course 4 Play Lab Vars 5_instruction: |
        Let's build a game! First we'll need
        a score. Rebuild the code that you saw in the last level to set the score
        to 10.
      Course 4 Play Lab Vars 6 (copy 1)_instruction: |
        Cool, now we've got our score
        variable, but how are we going to make it useful? How about adding to your
        score variable each time you hit the enemy with a fireball? Use the "when
        actor 2 touches anything" event to trigger an update to your score when your
        fireballs hit the cat. You can increment the score by setting score = score
        + 1. Get your score up to 10 (going one at a time!) to pass the level.
      Course 4 Play Lab Vars 6_instruction: "Use the right arrow to shoot hearts.\r\n\r\nIn\nour
        game, how should we score points? Add 1 to your \"points\" variable each\ntime
        Dog hits Cat with a heart. Use the \"when actor 2 touches anything\"\nevent
        to trigger an update to your score. You can increment your variable\nby setting
        \"points = points + 1.\" Get your score up to 10 (going one at\na time!) to
        pass the level."
      Course 4 Play Lab Vars 7_instruction: |
        Nice, now let's make sure this game
        isn't too easy to play. Any time Dog (actor 1) gets hit by yellow hearts
        from Cat (actor 2), you should lose a point. Start with 10 points so it's
        not too hard. Let your score drop down from 10 to 0 to pass the level.
      Course 4 Play Lab Vars 8 (copy 1)_instruction: |
        Alright, one last thing for
        this game - let's set it up so the player can win (or lose). Use a forever
        loop to check the value of score - if score is ever greater that 20, make
        the enemy vanish. If the score is every less than 0, make the player vanish.
        Click "Finish" when the game works like you'd like it to.
      Course 4 Play Lab Vars 8_instruction: |
        Let's set up this game so the Dog can
        win (or lose). Use a forever loop to check the value of score - if score is
        ever greater that 20, make the enemy (the Cat) vanish. If the score is ever
        less than 0, make the player (the Dog) vanish. Click "Finish" when the game
        works like you'd like it to.
      Course 4 Play Lab Vars 9_instruction: "Free Play time! Here are all of the\nvariables
        we've played with so far in this stage, as well as a few more in\ncase you
        want them. \r\n\r\nNotice that there are now so many blocks in our\ntoolbox
        that they need to be organized!  Here, we've put each piece into\nan appropriate
        category.  Take some time to explore everything that is available.\nWhen you're
        done browsing, make a game or story using repeats, variables,\nand events.
        \ \r\n\r\nHint: scroll down to see all the commands in the workspace."
      Course 4 Play Lab Vars_instruction: |
        Alright, one last thing for this game
        - let's set it up so the player can win (or lose). Use a forever loop to
        check the value of score - if score is ever greater that 20, make the emeny
        vanish. If the score is every less than 0, make the player vanish.
      Course 4 Play Labs For Loops 1_instruction: |
        Let's make the dog speak every
        number from 1 to 100. Use a for loop and the counter block to speak the counter
        variable each time the loop is run.
      Course 4 Play Labs For Loops 2_instruction: |
        This time, let's try counting
        the odd numbers from 1 to 100.
      Course 4 Play Labs For Loops 3_instruction: |
        If we count by larger numbers,
        we count even higher in the same amount of time. Try making the dog count
        from 10 up to 1000, 10 at a time.
      Course 4 Play Labs For Loops 4_instruction: |
        Changing the increment can be
        helpful, but we're still counting linearly (each number is the same distance
        from the last) What if I wanted to count exponentially? Without changing the
        settings in this for loop, can you count 1, 4, 9 , 16, 25... (counter squared)?
      Course 4 Play Labs For Loops 4a_instruction: "Now, let's blend the variables\nfrom
        Stage 7 together with your \"counter\" variable to make some magic happen.
        \  \r\n\r\nIn\nthis puzzle, Dog will count from 0 to 1000 by \"increment\".
        \ Set the \"increment\"\nvariable to 10 at the beginning of your code to see
        what happens."
      Course 4 Play Labs For Loops 5_instruction: |
        In the last stage we counted the
        square of each number. Try changing "counter ^ 2" to "counter ^ 3" to
        count the cube of each number (1, 8, 27, 64, 125, 216, 343…)
      Course 4 Play Labs For Loops 5a_instruction: "In this puzzle, Dog will be your\ntime
        keeper.\r\n\r\nDog will count from 0 to 30 by \"increment\".  The \"increment\"\nvariable
        will begin with a value of 1.\r\n\r\nCan you make it so that each\ntime you
        click Dog, the increment increases by 2?  Click the forward arrow\nto run
        the for loop.\r\n\r\nRun the loop a couple of times, clicking Dog before\neach
        one."
      Course 4 Play Labs For Loops 6_instruction: |
        You may recall that a prime number
        is any whole number that is only divisible by itself and 1. Use the "is_prime"
        function to speak out only the prime numbers from 1 to 100.
      Course 4 Play Labs For Loops 6a_instruction: "Dog will still keep time by counting\nwith
        our \"for loop\" by \"increment\", but this time, we will add The Wizard\ninto
        the mix.  Can you change the code so that \"increment\" goes up by two\neach
        time The Wizard is clicked?\r\n\r\nWatch out!  The Wizard moves quickly!"
      Course 4 Play Labs For Loops 7_instruction: |
        Could you use a for loop to help
        me speak the sequence 1, 4, 7, 10, 13, 16, 19, 22, 25?
      Course 4 Play Labs For Loops 7a_instruction: "Now we're getting somewhere!  What\nif
        we start counting how many times we can click The Wizard before Dog gets\nto
        30?  \r\n\r\nFinish adding blocks to The Wizard so that every time he's\nclicked
        the variable \"clicked\" increases by one. You can ignore \"increment\"\nfor
        now.\r\n\r\nDog will start counting when you click \"Run\"."
      Course 4 Play Labs For Loops 8_instruction: "Now, help the actors move as they\ncount.
        \ \r\n\r\nDog should move and count by adding 2 (counter + 2) each time.  Cat\nwill
        move and count by multiplying by 2 (counter * 2)  each time. Penguin\nwill
        move and count to the power of 2 (counter ^ 2) each time.  Who will reach\ntheir
        flag first?"
      Course 4 Play Labs For Loops 8a_instruction: "To finish our game, we need to\nbring
        back the \"increment\" variable!    Let's tie it to the level of the\ngame.\r\n\r\n1)
        Keep track of the number of times The Wizard is clicked.\r\n2)\nIf The Wizard
        is clicked at least 10 times before Dog counts to 30, raise\n\"increment\"
        by 1 and start again.\r\n3) If The Wizard does not get clicked\nat least 10
        times, the game is over."
      Course 4 SCF 1_instruction: |
        Use the suggested functions to draw four rows
        of hexagons. Notice how our even numbered rows are shifted to the right?
      Course 4 SCF 1a_instruction: |
        Can you figure out how to collect all of this
        nectar with the fewest blocks possible?
      Course 4 SCF 1b_instruction: |
        Can you figure out how to collect all of this
        nectar with the fewest blocks possible?
      Course 4 SCF 2_instruction: "Use what you learned in the previous level to\ndraw
        an image like this. Note: The code becomes more simple if you incorporate\nparameters.
        \n"
      Course 4 SCF 3 Fail 1_instruction: Can you figure out how to...
      Course 4 SCF 3 Fail 2_instruction: Can you figure out how to...
      Course 4 SCF 3_instruction: "Use what you learned in the previous level to\ndraw
        an image like this. Note: The code becomes more simple if you incorporate\nparameters.
        \n"
      Course 4 SCFL 1_instruction: |
        Solve this puzzle using the fewest number of
        blocks possible.
      Course 4 SCFL 1a_instruction: |
        Can you get Skrat to his acorn using as few
        blocks as possible?
      Course 4 SCFL 1b_instruction: |
        Can you get Skrat to his acorn using as few
        blocks as possible?
      Course 4 SCFL 2_instruction: |
        Solve this puzzle using the fewest number of
        blocks possible.
      Course 4 SCFL 3_instruction: Can you figure out how to re-create this drawing?
      Course 4 SCFL 4_instruction: Can you figure out how to re-create this drawing?
      Course 4 SCFL 5_instruction: Can you figure out how to re-create this drawing?
      Course 4 SCFL 6_instruction: |
        Can you figure out how to re-create this drawing
        with a single loop?
      Course 4 SCFL 7_instruction: |
        The artist wants to catch some waves! Can you
        figure out how to re-create this drawing?
      Course 4 SCFP 1_instruction: |
        Create a function with parameters that allows
        the artist to jump backward and forward by x pixels, and also up and down
        by y pixels (using positive and negative numbers).
      Course 4 SCV 1_instruction: Click here to view the instructions again.
      Course 4 SCV 2_instruction: Click here to view the instructions again.
      Course 4 SCV 3_instruction: "Now for a game of tag!  Tag Cat to get 2 points.\nTag
        Penguin to get 3 points.  Get 10 points to win!\r\nBut be careful, when\nCat
        and Penguin tag each other, they take points away.\r\n\r\nAdd the blocks\nnecessary
        to make this game work the way it's been explained.  How will you\nget Dog
        to move in all directions using the arrow keys?  How will you add\npoints
        when Dog tags Cat or Penguin?  How will you subtract points when Cat\nand
        Penguin touch?"
      Course 4 SCV 4_instruction: |
        Solve this puzzle with the fewest number of blocks
        possible.
      Course 4 SCV 5_instruction: |
        Solve this puzzle with the fewest number of blocks
        possible.
      Course 4 SCV 6_instruction: Click here to view the instructions again.
      Course 4 SCVP 1_instruction: |
        Create a function with parameters that allows
        the artist to jump backward and forward by x pixels, and also up and down
        by y pixels (using positive and negative numbers).
      Course 4 Variables Assessment_instruction: |
        Can you create this image using
        a variable for sides? Each line should be 50 pixels long.
      Course1BeePuzzle12_instruction: Get three nectars and then make two honey
      Course1MazeAssessment1_instruction: "This is a test!\r\nMove one way, then\nanother
        to get me to the pig"
      Course1MazeAssessment2_instruction: "This is a test!\r\nMove one way, then\nanother
        to get me to the pig."
      CSP Data Unit - Counting Multiple Things_instruction: "If you can count one\nthing
        you can count multiple things\r\n\r\nFind out how many people like something\nother
        than dogs and cats\r\n\r\nCount dogs\r\nCount cats\r\nCount total\r\nDo\nthe
        math\r\n\r\nblank/ blank toal\r\n\r\nCan also use this to find percents\nfrom
        this\r\n\r\nx% are dog lovers"
      CSP Data Unit -Counting Records - Easy Way_instruction: "ReadRecords with specific\ncriteria
        \r\nfind the length of an array\r\n"
      CSP Data Unit -Counting Records - Hard Way_instruction: "\r\n1. ReadRecords\nfor
        all records\r\n2. Way to loop through and count\r\n"
      CSP U4 - JSON Object Intro - Bad Way_instruction: How do we make a JSON Object
      ECSPD Binary Odometer_instruction: |
        This is another resource you could use
        with your students.
      Eval Booleans 1_instruction: |
        Boolean operators (like >, <, =) allow us to
        compare different values, returning either true or false. Click "Run" to
        see how this expression evaluates.
      Eval Booleans 2_instruction: |
        Can you set the values so that this expression
        evaluates as true?
      Eval Booleans 3_instruction: |
        The string-length function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        true.
      Eval Booleans 4_instruction: |
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: |
        Booleans allow us to compare different values,
        returning "true" if the are equal, or "false" if they are not. What do
        you think this code will evaluate to?
      Eval Cond 1_instruction: |
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |
        We can use the string=? function to make conditionals
        that respond to text input. Here's a function called green shape that takes
        a string for the type of shape. Complete the conditions so that the correct
        solid green shape is returned when the function is run with "circle", "triangle",
        "square", or "rectangle".
      Eval Cond 5_instruction: |
        Here's a similar function red shape with an additional
        variable for size. Complete the conditionals so the correct solid red image
        of a given size is drawn for "circle", "triangle", and "star".
      Eval Cond 6_instruction: "Write a function called food-critic, which takes\nin
        the name of a food and produces a String that says how you feel about that\nfood.
        For example, (food-critic “pizza”) might evaluate to “delicious”, but\n(food-critic
        “rotten eggs”) might evaluate to “gross!”. Choose at least two\nfoods to review,
        but you can you write more if you like!  Don’t forget to\nadd an “else” clause!\r\nOne
        example - and part of the definition -  has already\nbeen done for you!"
      Eval Cond 7_instruction: "Free Play: Write a function called green-shape, which\ntakes
        in the name of a shape and produces a solid green shape. Your function\nshould
        work with at least “circle”, “star” and “rectangle”, but you can add\nother
        shapes if you like. You can choose the size of each shape. Don’t forget\nto
        add an “else” clause!\r\nOne example - and part of the definition -  has\nalready
        been done for you!\r\n"
      Eval Cond 8_instruction: "Free Play: Suppose you want to own a car at 21, or\nhave
        your own business by 30. Write a function called life-goals, which takes\nin
        an age and produces a string that describes your life goals by then. Don’t\nforget
        to add an “else” clause!\r\n"
      Eval Contracts 1_instruction: |
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: |
        The "scale" function returns an image that
        is scaled either larger or smaller than the input image. Try scaling this
        circle by a factor of 10 - how is the resulting image different than if you'd
        just made a circle of that size in the first place?
      Eval Contracts 4_instruction: |
        The scale function returns an image that is
        either larger or smaller than the input image. Try scaling this circle by
        a factor of 10. How is the returned image different than if you'd just made
        a circle of that size in the first place?
      Eval Contracts 8A_instruction: |
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |
        Use the star function to produce a solid red
        star with a 60 pixel radius
      Eval Contracts C_instruction: |
        Check out the rotate function - can you use
        it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |
        Try using the text function to write "Hello,
        world!" in teal at size 40.
      Eval Contracts shrink_instruction: "Can you complete this image using the \"shrink\"\nfunction
        block? The radius is 20. \n"
      Eval Define Funcs 1_instruction: |
        Here's a new function called green-triangle
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle.
      Eval Define Funcs 2_instruction: |
        Let's look inside that green-triangle function
        to see how it works. Can you modify it so that the green-triangle function
        always draws outlined green triangles?
      Eval Define Funcs 3_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Define Funcs 4_instruction: |
        Create a new function called aqua-star that
        has a Domain of a single Number for radius and returns an aqua star of the
        given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |
        Let's use that aqua-star function to make
        a row of different sized stars. From left to right, the stars should have
        radii of 25, 50, and 75.
      Eval Define Funcs Test_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Defining Vars Free Play 1_instruction: |
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |
        Here's a Design Recipe for a function
        called square-circle with domain Number String and range Image. Click Edit
        to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |
        The Design Recipe for wide-rect already
        has a contract and one example. Can you write a second example and then complete
        the definition? The wide-rect function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |
        Use the Design Recipe to create a function
        starburst. When given a number of points and an outer radius, starburst returns
        a yellow radial star with given points, and an inner radius that is half the
        outer radius.
      Eval Design Recipe 5_instruction: |
        Using the Design Recipe, write a function
        striped-flag that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |
        Write a function large-polygon that should
        output a solid polygon of given sides and color that takes up most of the
        window, regardless of the number of sides. To make sure that the polygon doesn't
        get too large as you increase the number of sides, side length should be inversely
        proportional to side number, with a length of (800/sides).
      Eval Design Recipe Free Play_instruction: |
        Free Play: Use the Design Recipe
        to create some functions of your own design
      Eval Free Play_instruction: 'Free Play: Make art with code!'
      Eval Strings Images .1_instruction: |
        So far we've only dealt with a single
        type of data, Numbers. Another type of data is a String, which is any combination
        of letters, numbers, or other characters wrapped in quotation marks. Run the
        String "Hello, world!" and see what happens.
      Eval Strings Images .2_instruction: |
        The string-append function takes two Strings
        and returns a single combined String. Add a String "Universe" to the second
        argument of string-append.
      Eval Strings Images 1_instruction: |
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |
        Try using the rectangle block to draw this
        solid, red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |
        Try using this new Evaluation Block called
        overlay to place a 100 pixel white triangle on top of a 200 pixel red circle.
      Eval Strings Images 6_instruction: |
        Use the overlay block to place a 75 pixel
        radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |
        The offset block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |
        Here's a different kind of star block
        - it's called radial-star and it allows you to draw stars with any number
        of points! Use it to create a 7 point solid orange star with an inner radius
        of 75 pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      Frequency Analysis_instruction: Test
      frozen circle function in circle_instruction: 이제 하나의 원을 그리고 18도씩 회전하면서 20개의
        겹치는 원을 만들어보자.
      frozen circle function with parameter_instruction: 서로 다른 크기의 원을 만들 수 있는 "원 만들기"
        블럭을 사용할거야. 이 블럭을 이용해서 크기 5의 작은 원과 크기 10의 원을 만들 수 있어?
      frozen circle function_instruction: 새로운 "원 만들기" 블럭을 이용해서 10개의 겹치는 원을 만들거야. 하나의
        원을 그리고 앞으로 점프하는 것을 잊지마.
      frozen circle_instruction: 원은 매우 특별한 도형이야. 물음표 안에 어떤 숫자를 넣어야 원을 그릴 수 있을까?
      frozen cross rotate dense_instruction: '선그리기를 90번 반복해 보자. 90번을 몇 번 반복해야 360이
        될까? 힌트: 아주 작은 숫자야.'
      frozen cross rotate_instruction: 이번에는 선그리기를 10번 반복해서 눈손이 모양을 만들려고 해, 선과 선 사이의
        각을 몇 도로 해야 그릴 수 있을까?
      frozen cross_instruction: |
        Wrap a “Repeat” block around these commands to create
        a plus sign. Did you notice Elsa can move forward and backward?
      frozen diamond mini snowflake_instruction: |
        Did you know every snowflake is
        a different shape? Let's create a new snowflake by using another “Repeat"
        block to repeat a parallelogram 4 times, turning right by 90 degrees between
        each parallelogram.
      frozen diamond snowflake_instruction: 이번에는 오른쪽으로 36도씩 돌며 평행사변형을 10번 그려서 또다른
        눈송이를 만들거야.
      frozen diamond_instruction: |
        Use a repeat around these blocks to create a parallelogram.
        It's just like a rectangle but has different angles. This one has 60 degree
        and 120 degree angles instead of all 90 degree angles.
      frozen freeplay_instruction: 당신은 이제 최고의 예술가가 되었어요! 당신만의 겨울 왕국을 만들어보세요.
      frozen line_instruction: 안녕! 나는 아렌델의 엘사야. 내가 선을 그릴 수 있게 도와줘.
      frozen perpendicular_instruction: 이제 서로 90도로 이어진 두개의 선을 그려야 돼. '돌기' 블럭과 '이동'
        블럭을 사용하면 그릴 수 있을거야.
      frozen snowflake branch_instruction: '"가지 형태의 눈송이 만들기" 블럭으로 3개의 가지 모양의 눈송이를
        만들어 보자.'
      frozen snowflake full_instruction: 이제 8개의 눈송이 가지를 만들어 아름다운 눈송이를 만들어보자!
      frozen snowflower_instruction: 매우 단순한 도형을 이용해서 복잡한 눈송이 모양을 만들거야. 크기 5의 원을 5번
        반복하고 크기 10의 원을 5번 반복해서 위의 모양을 만들 수 있어?
      frozen square iterative_instruction: 사각형을 만드는 과정 중에 절반은 그려져 있어. 사각형을 만들 수 있게
        4개의 선을 그려보자.
      frozen square loop 3x_instruction: 이번에는 세 개의 사각형을 약간씩 위치를 옮겨서 그릴거야. 새로운 사격형을
        그리기 전에 120도를 회전하는 것을 기억해.
      frozen square loop_instruction: 안녕, 나는 아렌델의 안나야, 이번에는 '반복' 블럭을 사용하여, 더 적은 블럭을
        이용해서 사각형을 그려보려고 해. '반복' 블럭 안의 블럭들을 몇 번(???) 반복해야 사각형을 그릴 수 있을까?
      frozen square snowflake_instruction: '''반복'' 블럭으로 10개의 사각형을 그려서 눈송이를 만들어 볼거야.
        매번 사각형을 그리고 36도 회전 블럭을 이용하면 그릴 수 있을거야.'
      Infinity_catch_instruction: |
        Can you make Elsa ("actor 2") catch up with
        Anna by using the arrow keys?
      Infinity_finale_instruction: Create anything you like and share it!
      Infinity_move_collide_instruction: |
        Hiro is "actor 1".  Move him right to
        Baymax, and play a sound when they touch.
      Infinity_move_directions_instruction: |
        Baymax is "actor 2".  Add Move blocks
        and then move Baymax using the arrows.  Make him touch the two other characters.
      Infinity_move_right_instruction: |
        Hiro is "actor 1".  Use the Move block
        to move Hiro right to touch Baymax.
      Infinity_repeat_instruction: '"무한 반복" 블록을 사용해 안나(Anna)가 400픽셀을 위 아래로 왔다갔다 하게
        하세요.'
      Infinity_say_instruction: Make Anna say "Hi there." by using the Say block.
      Infinity_shoot_instruction: |
        Baymax is "actor 2".  Make Baymax throw a rocket
        at Hiro.
      Infinity_shoot_directions_instruction: |
        Hiro is "actor 3".  Make Hiro throw
        a projectile to each of the four characters.  Wait one second between each
        throw.
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: Touch even more snowflakes!
      Infinity_touch_four_instruction: |
        Move Anna up, down left, and right to touch
        each of the four snowflakes.
      Infinity_touch_score_instruction: |
        Make Anna score a point when she touches
        a snowflake.  Then click "Run" and steer her to touch each snowflake once.
      jessie-test_instruction: Lots of instructions
      Just for Testing_instruction: Test instructions
      K-1 Artist 1 Assessment 1_instruction: |
        Draw a short line up and a long one
        to the right!
      K-1 artist 1 level 10_instruction: |
        Draw the dashed line by using both the
        jump and draw blocks
      K-1 artist 1 level 9_instruction: Draw this using three lines
      K-1 Artist Loops 1_instruction: Draw this line by moving East 4 times.
      K-1 Artist Loops 2_instruction: Can you draw the same line using a loop?
      K-1 Artist Loops 3_instruction: Can you loop these blocks to draw 6 lines?
      K-1 Artist Loops 4_instruction: |
        Could a loop help us draw the top of this
        castle?
      K-1 Artist Loops 5_instruction: What can you loop 4 times to draw these stairs?
      K-1 Artist Loops 6_instruction: |
        This one needs two loops: one to go up the
        stairs and one to go down.
      K-1 Artist Loops 7_instruction: Can you finish this pattern with two loops?
      K-1 Artist Loops 8_instruction: This staircase has longer steps.
      K-1 Artist Loops 9_instruction: 'Assessment: Use a loop to draw the stairs'
      K-1 Artist Loops Free Play_instruction: 자유 시간! 재미있는 것을 만들어 봐.
      K-1 Artist1 1_instruction: Draw the foot of the man with one line
      K-1 Artist1 10_instruction: |
        Draw and Jump to make the dashed path to the treasure
        X
      K-1 Artist1 2_instruction: Draw the whisker on the cat with two lines!
      K-1 Artist1 3_instruction: |
        Draw two lines east and two lines north to finish
        the house!
      K-1 Artist1 4_instruction: Draw lines up, over, and down to complete the castle!
      K-1 Artist1 5.5_instruction: |
        Complete the third tower of the castle using
        short lines
      K-1 Artist1 5_instruction: Draw the stem of this flower with two lines!
      K-1 Artist1 6_instruction: Finish the picture by using a jump block!
      K-1 Artist1 7_instruction: |
        Use the jump block to move without drawing. Jump
        up and draw a line.
      K-1 Artist1 8_instruction: |
        Draw the dashed line by using both the jump and
        draw blocks
      K-1 Artist1 9_instruction: Draw and Jump to make the dashed line
      K-1 Artist1 Assessment 1_instruction: Draw the short and long lines!
      K-1 Artist1 Assessment 2_instruction: Draw the short dashed lines!
      K-1 Artist2 1_instruction: Draw a square below the triangle.
      K-1 Artist2 2_instruction: Jump and draw a square next to the house.
      K-1 Artist2 3_instruction: Draw a square above the other square
      K-1 Artist2 4_instruction: Draw a rectangle to complete the bridge.
      K-1 Artist2 5_instruction: Draw a rectangle to complete the bridge supports
      K-1 Artist2 6_instruction: Draw two squares to make a rectangle!
      K-1 Artist2 Assessment1_instruction: |
        Assessment: Draw a square next to the
        other square.
      K-1 Artist2 Free Draw_instruction: Draw anything!
      K-1 Artist2_7_instruction: Draw a rectangle to give the dresser a top drawer!
      K-1 Bee 1_instruction: |
        Move me to the flower, get the nectar, then move me
        to the honeycomb, and make honey
      K-1 Bee 10_instruction: Get four nectar and then make two honey!
      K-1 Bee 11.5_instruction: Get four nectar to make four honey!
      K-1 Bee 11_instruction: Get three nectar and then make one honey
      K-1 Bee 12_instruction: Get three nectar and then make two honey!
      K-1 Bee 13_instruction: Get three nectar and then make one honey!
      K-1 Bee 14_instruction: |
        Get me to the nectar, pick it up, get me to the honey,
        and make honey
      K-1 Bee 15_instruction: Get two nectar to make two honey!
      K-1 Bee 2_instruction: |
        Move me to the flower, get the nectar, then move me
        to the honeycomb, and make honey
      K-1 Bee 3_instruction: |
        Move me to the flower, get the nectar, then move me
        to the honeycomb, and make honey
      K-1 Bee 4_instruction: Get two nectar and then make two honey!
      K-1 Bee 5_instruction: 3개의 넥타를 얻어서 3개의 꿀을 만드세요!
      K-1 Bee 6_instruction: Get two nectar and then make two honey!
      K-1 Bee 7_instruction: Get three nectar and then make two honey!
      K-1 Bee 8_instruction: Get two nectar and then make two honey!
      K-1 Bee 9_instruction: Get two nectar and then make two honey!
      K-1 Bee Assessment 1_instruction: 넥타를 얻어서 꿀을 만드세요!
      K-1 Bee Assessment 2_instruction: 넥타를 얻어서 꿀을 만드세요!
      K-1 Bee Loops 1_instruction: 넥타를 얻어서 꿀을 만드세요!
      K-1 Bee Loops 10_instruction: 넥타를 얻고, 꿀을 만들고, 이동하기 위해서 루프를 사용하세요!
      K-1 Bee Loops 11_instruction: |
        Assessment: Use loops and get the nectar and
        honey!
      K-1 Bee Loops 12_instruction: |
        Assessment: Use loops to get the nectar, honey,
        and to move!
      K-1 Bee Loops 2_instruction: 루프를 사용해서 이동하고, 넥타를 얻고 꿀을 만드세요!
      K-1 Bee Loops 3_instruction: 넥타를 얻고 꿀을 만들도록 루프를 사용하세요!
      K-1 Bee Loops 4_instruction: 넥타를 얻고, 꿀을 만들고, 이동하도록 루프를 사용하세요!
      K-1 Bee Loops 5_instruction: 넥타와 꿀을 얻기 위해서 루프를 사용하세요!
      K-1 Bee Loops 6_instruction: 넥타를 얻고, 꿀을 만들고, 이동하기 위해서 루프를 사용하세요!
      K-1 Bee Loops 7_instruction: 넥타를 얻고 꿀을 만들도록 루프를 사용하세요!
      K-1 Bee Loops 8_instruction: 넥타와 꿀을 얻기 위해서 루프를 사용하세요!
      K-1 Bee Loops 9_instruction: 넥타를 얻고, 꿀을 만들고, 이동하기 위해서 루프를 사용하세요!
      K-1 Bee Loops Assessment 1_instruction: 꿀을 만들기 위한 넥타를 얻으세요, 이동하도록 루프를 사용하세요!
      K-1 Bee Loops Assessment 2_instruction: 루프를 사용해서 꿀을 만들기 위한 넥타를 얻으세요!
      K-1 Bee Puzzle 12_instruction: Get three nectars and then make two honey
      K-1 Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      k-1 maze 1_instruction: Can you make me move West to get to the pig?
      K-1 Maze 10_instruction: '돼지를 잡도록 TNT 폭탄을 돌아가세요! '
      K-1 Maze 11_instruction: |
        Trace the path and lead me to the silly pig. Avoid
        TNT or the feathers will fly! Hint: He's South of me.
      K-1 Maze 2_instruction: 돼지를 잡도록 나를 동쪽 방향으로 이동시키세요!
      K-1 Maze 3_instruction: 돼지를 잡도록 나를 남쪽 방향으로 이동시키세요!
      K-1 Maze 4_instruction: 돼지를 잡도록 나를 북쪽 방향으로 이동시키세요!
      K-1 Maze 5_instruction: 돼지를 잡도록 나를 동쪽 방향으로 이동시키세요!
      K-1 Maze 6_instruction: 돼지를 잡도록 한쪽 방향으로 이동시키고, 다른 방향으로 이동시키세요!
      K-1 Maze 7_instruction: 돼지를 잡도록 한쪽 방향으로 이동시키고, 다른 방향으로 이동시키세요!
      K-1 Maze 8_instruction: 돼지를 잡도록 한쪽 방향으로 이동시키고, 다른 방향으로 이동시키세요!
      K-1 Maze 9_instruction: 돼지를 잡도록 한쪽 방향으로 이동시키고, 다른 방향으로 이동시키세요!
      K-1 Maze Assessment 1_instruction: 평가 -- 돼지를 잡아라!
      K-1 Maze Assessment 12_instruction: 평가 수준
      K-1 Maze Assessment 13_instruction: 평가 수준
      K-1 Maze Assessment 2_instruction: 평가 -- 돼지를 잡아라!
      K-1 maze debug 1_instruction: 코드를 변경해서 돼지를 잡으세요!
      K-1 maze debug 10_instruction: |
        Debug this level by rearranging and adding
        blocks to get me to the pig!
      K-1 maze debug 11_instruction: "This is a test!\r\nDebug this level by rearranging\nand
        adding blocks to get me to the pig"
      K-1 maze debug 2_instruction: |
        Figure out what is missing and then add blocks
        to get me to the pig!
      K-1 maze debug 3_instruction: |
        Figure out what is missing and then REMOVE blocks
        to get me to the pig!
      K-1 maze debug 4_instruction: |
        Run through these blocks and fix them! I think
        I might be going in the wrong direction.
      K-1 maze debug 5_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 maze debug 6_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 maze debug 7_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 maze debug 8_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 maze debug 9_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 Maze debug Assessment 1_instruction: |
        Assessment -- Debug this level by
        rearranging and adding blocks to get me to the pig!
      K-1 Maze Loops 1_instruction: 나를 돼지에게 데려가줘!
      K-1 Maze Loops 10_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 11_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 12_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 2_instruction: Use the Repeat block to get me to the pig!
      K-1 Maze Loops 3_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 4_instruction: 나를 돼지에게 데려가줘!
      K-1 Maze Loops 5_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 6_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 7_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 8_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 9_instruction: 나를 돼지에게 데려가줘!
      K-1 Maze Loops Assessment 1_instruction: |
        Assessment -- Use loops to get me
        to the pig!
      K-1 Maze Loops Assessment 2_instruction: |
        Assessment -- Use loops to get me
        to the pig!
      K-1 Maze Multi 14_instruction: 평가 수준
      K-1 Maze Multi 15_instruction: 평가 수준
      K-1 Maze Sequence Assessment 1_instruction: "This is a test!\r\nMove one way,\nthen
        another to get me to the pig"
      K-1 Maze Sequence Assessment 2_instruction: "This is a test!\r\nMove one way,\nthen
        another to get me to the pig."
      kikiTesting_instruction: ".\r\n .\r\n.\r\n.\r\n.\r\n.\r\n\r\n.\r\n\r\n"
      Luigi's Pizza 1_instruction: |
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the cost function, and we'll return the price
        of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the cost function. Once you've added your toppings, test out the
        function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the else clause so that we charge them a
        premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: |
        Free Play: What can you do to make Luigi's cost
        function even more useful?
      MSM Big Game Empty_instruction: |
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called my-shape and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |
        Take your my-shape variable and use it with
        this provided code to draw two identical green triangles that are 50 pixels
        in size.
      MSM Defining Vars 4_instruction: |
        Edit your my-shape variable so that it draws
        75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      NetSim Standalone Automatic DNS_instruction: |
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      NetSim Standalone Broadcast_instruction: "In this version of the Internet Simulator,\nyou
        can connect to up to 5 other people in a room. When you send messages\nin
        the room, everyone receives them. What are some of the challenges of this\nsystem,
        and how might you solve them?\r\n"
      NetSim Standalone Classroom Routers_instruction: |
        In this version of the Internet
        Simulator, everyone connects to a router and has a specific address. To send
        messages, you have to address your message to the specific address of the
        recipient, and the router will take care of delivering it to the right computer.
        If there are other routers created in your class, ask for the address of one
        of your classmates and send them a message! View the Log Router to see the
        path the messages have taken through the network.
      NetSim Standalone Freeplay_instruction: |
        In this configuration, most of the
        options are turned on, and you can play with them. Have fun!
      NetSim Standalone Manual DNS_instruction: |
        In this version of the simulator
        you can't see the other students' addresses.  Instead, one of you must act
        as a name service, to help share addresses with each other.
      NetSim Standalone Packets TCP_instruction: |
        Messages on the Internet can take
        many paths to get to their destination, and sometimes along the way the message
        gets dropped. In this version of the Internet Simulator, there is a 10% chance
        of a packet being dropped, multiple packets may take different paths to the
        destination, and the default max packet size is set to 6 additional characters.
      NetSim Standalone Routers Addresses_instruction: "For this activity, connect\nto
        a router with the others in your group. Important note: The router will\nonly
        properly route messages where the first 4 bits are the To: address and\nthe
        second 4 bits are the From: address.\r\n\r\n[TODO: NetSim needs to support\nhierarchical
        addresses. For now, level is set up for 4 bit to and from addresses]"
      NetSim Standalone SendAB_instruction: |
        You and your partner share a single
        wire that can only be in state A or state B. You can set the wire to either
        state at any time, and you can read the state of the wire at any time. Can
        you figure out a way to effectively communicate with just this system?
      NetSim Standalone Sending Numbers Ascii_instruction: |
        Now that you've transmitted
        information represented as decimal numbers, you can map those numbers to text
        characters to send text-based information back and forth. With a text-based
        protocol, you can easily represent and communicate all kinds of information.
      NetSim Standalone Sending Numbers_instruction: "You and your partner can now\nreliably
        send messages back and forth without extra coordination! While you're\nalways
        sending bits back and forth, you can also represent those bits as decimal\nnumbers.
        What kinds of information can you represent with this system? \n"
      NetSim_AddressingMessages_instruction: |
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendingABTest_instruction: |
        This is Sarah's test of making a netsim
        level
      NetSim_SendNumbers_instruction: |
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: |
        Draw something awesome! Your code is saved
        as a project that you can return to at any time.
      NEW Course 4 Artist Functions 1_instruction: |
        Can you draw a square that is
        100 pixels in length, using a repeat loop?
      NEW Course 4 Artist Functions 10.1_instruction: |
        Use the functions from the
        previous puzzles to draw this pattern.
      NEW Course 4 Artist Functions 10_instruction: |
        Click "edit" to fill out the
        blocks in the function definition to make a 40 pixel square.
      NEW Course 4 Artist Functions 11_instruction: "Now we want to create a new\nfunction
        called \"draw a line of squares\" that draws six squares all in a\nrow.  Can
        you build this function using the \"draw a square 20\" function\nthat we've
        already created? Note: See that we've changed the pen to be much\nthinner.
        Click \"edit\" on the  the \"draw a square 20\" function to see how!\r\n"
      NEW Course 4 Artist Functions 12_instruction: |
        Use the "draw a line of squares"
        function from the last puzzle to draw this pattern."
      NEW Course 4 Artist Functions 13_instruction: |
        Can you draw a star shape using
        the "draw a line of squares" function? Hint: Edit the "draw a line of squares"
        function so that you don't have to call it twice.  Notice, you'll have to
        move forward a certain number of pixels and turn 144 degrees.
      NEW Course 4 Artist Functions 14_instruction: 자유 시간!
      NEW Course 4 Artist Functions 2_instruction: '20 픽셀 만큼 씩 떨어져 있는 3개의 사각형을 그려보세요.
        힌트: 각 사각형의 크기는 100 픽셀입니다.'
      NEW Course 4 Artist Functions 3_instruction: |
        Here is a new type of Block.
        It is called a "Function" block. Click "edit" then fill it with the code
        for drawing a square with 100 pixel sides. When you're done editing the function,
        click "Close" to go back to your program.
      NEW Course 4 Artist Functions 4_instruction: |
        Use the "draw a square" function
        to draw this pattern. Hint: You will have to use a "turn right by 120 degrees"
        block after each square.
      NEW Course 4 Artist Functions 5_instruction: |
        How did the "draw a square"
        block know what commands to run? Click on "edit" in the "draw a square"
        function block. The blocks in the function editor are the definition that
        make up "draw a square." When you're done looking around, click "Save
        and Close" and then "Run."
      NEW Course 4 Artist Functions 6_instruction: "Using the \"draw a square\" function\nblock,
        can you draw this picture? Hint: each square is 20 pixels apart.\r\n"
      NEW Course 4 Artist Functions 7_instruction: "Are you getting the hang of how\nto
        use function blocks? Let's modify this square so that it is 200 pixels\nin
        size. Hint: click on \"edit\" to enter the \"draw a square\" function editor.\nRemember
        to click on \"Close\" to get out of the function editor. \n"
      NEW Course 4 Artist Functions 8_instruction: |
        We have created a new function
        for you called "draw a triangle".  Can you edit the function definition
        to draw a triangle with 100 pixel sides?
      NEW Course 4 Artist Functions 9_instruction: |
        Can you solve this by adding
        only one block?
      NEW Course 4 Artist Functions inspire_instruction: |
        여기를 눌러 멋진 그림을
        다시 살펴보세요.
      New Course 4 Artist Functions Level 4_instruction: |
        "사각형 그리기" 함수를
        이용해서 이 패턴을 그려보세요.
      NEW Course 4 Artist Params 1_instruction: |
        한 변의 길이가 50 픽셀 크기인 사각형을 만들 수 있도록
        이 함수를 만들어 보세요. "수정"을 눌러 시작하세요.
      NEW Course 4 Artist Params 10_instruction: "\"육각형 그리기\" 함수 블록을\n길이 변수값을 바꿀 수
        있도록 만들어보세요. 힌트: 이 정육각형의 한 변의 길이는 100 픽셀입니다. \n"
      NEW Course 4 Artist Params 11_instruction: |
        이 모양을 어떻게 그릴지 생각할 수 있나요?
        "한 변의 길이" 변수를 사용하기 위해 함수를 수정하세요.
      NEW Course 4 Artist Params 12_instruction: |
        이 그림을 완성할 수 있겠나요?
        모든 모양의 한 변의 길이는 100 픽셀입니다.
      NEW Course 4 Artist Params 12a_instruction: |
        이번 이미지는 이전 것과 비슷합니다.
        함수에 "~동안 반복" 을 이용해 이 디자인을 만들어보세요.
      NEW Course 4 Artist Params 13_instruction: "Let's edit this \"draw a polygon\"\nfunction.
        It already has a \"sides\" parameter. Now, let's add a \"length\"\nparameter.
        \r\nHint: The perimeter of each shape is 200 pixels long. Do you\nremember
        the equation to make shapes the same size when they have a different\nnumber
        of sides?"
      NEW Course 4 Artist Params 14_instruction: |
        "나선 그리기"를
        "길이"와 "한 변의 길이" 변수를 이용할 수 있도록 수정하고, 이 모양을 다시 만들어보세요.
      NEW Course 4 Artist Params 15_instruction: |
        Freeplay: Here are the functions
        you've written, and some more for you to play with. Draw something awesome!
        Play with the pen width to see how different your drawings look!
      NEW Course 4 Artist Params 2_instruction: |
        Create a “draw a triangle" function
        with 50 pixels sides from scratch
      NEW Course 4 Artist Params 3_instruction: "Now let's use the function to draw\n5
        triangles in a row. Hint: each triangle is 30 pixels apart.\r\n"
      NEW Course 4 Artist Params 4_instruction: |
        Do you notice anything different
        about these function blocks? Click “Run” to see what happens.
      NEW Course 4 Artist Params 5_instruction: "Fill in the ??? in the length parameter\ninput
        block. Hint: The pentagon has 100 pixel sides. \n"
      NEW Course 4 Artist Params 6_instruction: |
        Fill in the "length" parameter
        to draw these shapes by replacing the "???" with the right numbers. The
        square and triangle have 100 pixels sides while each side of the hexagon is
        75 pixels long.
      NEW Course 4 Artist Params 7_instruction: |
        Can you complete this drawing? Hint:
        The sides of each triangle are 25 pixels larger than the last.  The first
        triangle has 25 pixel sides.
      NEW Course 4 Artist Params 8_instruction: |
        The code for this triangle function
        is broken. Can you edit the function to fix it, and then make triangles of
        length 25, 50, and 75?
      NEW Course 4 Artist Params 9_instruction: |
        Click "edit" to fill in the function
        definition of "draw a square" and add a parameter. It should take a length
        parameter, just like the triangle. This time, draw 3 squares: 25, 50 and 75
        pixels in length, each 100 pixels apart.
      NEW Course 4 Artist Params inspire_instruction: "Free Play Inspiration: You've\nnow
        learned everything you need to know to make a pattern like this! If this\npicture
        inspires you, try to make something similar. Otherwise, create something\nall
        your own.\r\n \r\nWant to know how our inspiration pattern was made? "
      NEW Course 4 Artist Vars 1.5_instruction: "Take a look at the code, can you\nsee
        how the \"set length\" block and \"length\" block works together? Click\non
        \"Run\" to see it in action. \n"
      NEW Course 4 Artist Vars 12_instruction: |
        Now, recreate the algorithm from
        the last level and create a pentagon with sides of 150.
      NEW Course 4 Artist Vars 2.5_instruction: "Take a look at the code, can you\nsee
        how the \"set length\" block and \"length\" block works together? Click\non
        \"Run\" to see it in action. \n"
      NEW Course 4 Artist Vars 2_instruction: "Drag a number block to the \"set length\"\nblock
        to draw a set of 50 pixel triangles. \n"
      NEW Course 4 Artist Vars 4 5_instruction: |
        Awesome job on the last puzzle,
        let's try it again this time let's make this cool design with with 60 pixel
        hexagon's.
      NEW Course 4 Artist Vars 4_instruction: |
        Let's try it again. Can you set the
        length variable to make this cool design with hexagons? Hint: It's a multiple
        of 10.
      NEW Course 4 Artist Vars 6_instruction: "Draw this pattern by dropping the\nlength
        variable in the correct places, and then setting the right value for\nlength.
        (Hint: it's a multiple of 10).  \r\n\r\nSee how you only set the\nvalue for
        length once, and the code uses the right value everywhere?\r\n\r\n\r\n"
      NEW Course 4 Bee For Loops 1_instruction: |
        Use a loop to collect the nectar
        from each flower.
      NEW Course 4 Bee For Loops 10_instruction: |
        Use your for loop "counter" variable
        to control how far to move horizontally.
      NEW Course 4 Bee For Loops 10a_instruction: |
        Ready for a challenge?  Take what
        you've learned about loops and try to solve this problem. Remember: You may
        have to run your solution multiple times before you figure out all of the
        steps.
      NEW Course 4 Bee For Loops 11_instruction: |
        Can you use the loop variable to
        control movement and nectar collection?
      NEW Course 4 Bee For Loops 2_instruction: |
        Add the code necessary to make sure
        the bee collects all the nectar. Look at how much code you need for this puzzle!
        (We'll learn a simpler way in the next puzzle.)
      NEW Course 4 Bee For Loops 3_instruction: "Ah, the \"for loop\" makes this\nmuch
        easier! All the code you need is here, take a look at how it is put together\nthen
        click \"Run\" to see how it works. \n"
      NEW Course 4 Bee For Loops 4 4_instruction: |
        Now we need to move forward "counter"
        times, then get nectar "counter" times.  Can you use two "repeat" loops
        to solve this challenge?
      NEW Course 4 Bee For Loops 4_instruction: "Replace the ??? in the \"for loop\"\nwith
        the largest amount of nectar the bee has to collect. \n"
      NEW Course 4 Bee For Loops 5 5_instruction: |
        Are you getting the hang of using
        the "for loop"? Let's help the bee get the rest of the nectar.
      NEW Course 4 Bee For Loops 5_instruction: |
        You can also use a "for loop"
        to count down. Try gathering this nectar by counting down from 5 to 1 by 1.
      NEW Course 4 Bee For Loops 6_instruction: |
        The last number in your for loop
        is called the "increment". Each time the loop is run, the counter variable
        changes by the value of the increment. Try collecting these flowers using
        an increment of 2.
      NEW Course 4 Bee For Loops 7_instruction: "Now, let's combine the \"counter\"\nvariable
        with a math block! How can you use the \"counter\" variable to navigate\nthis
        garden with the fewest number of blocks possible? What do you need to\ndo
        to collect 3, 6, 9, 12, 15 nectar this time? The secret is in the \"counter\"\nvariable!\r\n\r\nRemember:
        If your loop is counting up, the increment is added\nto your \"counter\" variable
        each time through."
      NEW Course 4 Bee For Loops 8_instruction: "잘 했어요! 꽃 꿀을 3, 6, 9, 12, 15 로 증가시키려면
        어떻게 해야 할까요?\r\n힌트: 이전의 각 값에 얼마를 더하면 될까요?"
      NEW Course 4 Bee For Loops 9_instruction: |
        If your loop is counting down, the
        increment is subtracted from your counter variable each loop. What should
        your increment be to collect 15, then 12, then 9, 6, 3 nectar?
      NEW Course 4 Bee For Loops 95_instruction: |
        Take a look at each piece of the
        "for loop" that you have just created.  Can you figure out which numbers
        you need to double to solve this puzzle? Why does it work?
      NEW Course 4 Play Lab Params 11_instruction: "It's free play time! Have fun\nwith
        all the blocks in your tool box. \n"
      NEW Course 4 Play Lab Params 5 5_instruction: |
        Let's try that again, but with
        less help. What do you need to edit this time to make the actors patrol?
      NEW Course 4 Play Lab Vars 4 5_instruction: |
        “What do you think this code will
        do? Press “Run” to see what happens.”
      NEW Course 4 Play Labs For Loops 7a_instruction: |
        Using what you learned so
        far, can you have Dinosaur take a step forward every time Penguin counts?
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: "It's Free Play\ntime,
        have fun with all the blocks in your tool box. \n"
      NEW Course 4 Play Labs For Loops 8a_instruction: "Challenge: How would you\nuse
        the \"for loop\" to get every actor to go around and say their actor number,\nthen
        vanish from the screen? \n"
      New Play Lab Project_instruction: |
        Create your own story or game! Your code
        is saved as a project you can return to at any time.
      Ninjacat Demo B (copy 1)_instruction: "\r\nLet’s begin by exploring a simple\nvideogame,
        and then figuring out how it works. You can use the arrow keys\nto move the
        ninja left, right and jump - try to catch the unicorn and avoid\nthe dragon!\r\n\r\n\r\n\r\n
        \ \r\n\r\n"
      Ninjacat Demo B_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      Ninjacat Demo No Animate_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      October15 bat_instruction: "Freeplay: Here are some functions to play with.
        \ Can\nyou draw a bat?\r\n"
      October15 ghost 1_instruction: |
        Give the ghost eyes, using the "draw a circle"
        function.
      October15 JoL 1_instruction: |
        Program the artist to design a face for your
        jack-o-lantern!
      October15 pumpkin 1_instruction: |
        Finish this jack-o-lantern by drawing the
        eyes and nose in any style you would like.
      October15 stars 1_instruction: |
        Use loops and the "random integer" block
        to fill the night sky with stars of different shapes and sizes.
      Overworld Avoid Monsters_instruction: |
        Running into a Creeper is a bad idea.
        Carefully move past the Creepers and reach the safety of your home.
      Overworld Chop Tree_instruction: |
        Wood is a very important resource. Many things
        are made from it. Walk to the tree and use the “destroy block” command to
        chop it down.
      Overworld Chop Trees_instruction: |
        We need to build a house before the sun
        goes down. Houses require a lot of wood. Cut down all 3 trees.
      Overworld Free Play 20x20_instruction: |
        Congratulations! You've completed
        all our puzzles! Now mine, build, and create something unique by using everything
        you've learned so far.
      Overworld Free Play_instruction: |
        This landscape is yours to play with. You
        choose what to build.
      Overworld House Frame - A_instruction: |
        Let's make our own house! This spot
        looks good. Build a frame on the dirt blocks.
      Overworld House Frame - C_instruction: |
        Let's make our own house! This spot
        looks good. Build a frame on the dirt blocks.
      Overworld House Frame B_instruction: |
        One wall is finished, let’s build the
        rest of the house by following your floor plan! You’ll have to repeat yourself
        quite a lot here.
      Overworld House Frame B2_instruction: |
        One wall is finished, let’s build the
        rest of the house by following your floor plan! You’ll have to repeat yourself
        quite a lot here.
      Overworld House Frame C_instruction: |
        One wall is finished, let’s build the
        rest of the house by following your floor plan! You’ll have to repeat yourself
        quite a lot here.
      Overworld House Frame Chosen_instruction: |
        Build the rest of your house from
        any material you'd like. The "repeat" command will come in handy.
      Overworld House Frame_instruction: |
        Let's make our own house! This spot looks
        good. Build a frame on the dirt blocks.
      Overworld Minecart Track_instruction: |
        You’re back on the surface with lots
        of underground resources. Now, we're going to build a track along the dirt
        path from your house. The first step is clearing the path. Follow the path
        and clear the trees.
      Overworld Move to Sheep_instruction: |
        Add a second “move forward” command to
        reach the sheep.
      Overworld Place Wall_instruction: |
        Every house starts with a wall. Build the
        first part of your house by putting the "place" and "move forward" commands
        inside the repeat loop.
      Overworld Plant Crops_instruction: |
        It’s good to plan ahead. Plant crops on
        both sides of the water so you don’t get hungry later on.
      Overworld Powered Minecart_instruction: |
        Great job! You’ve gathered lots of
        resources and built a modest home. Now lay rail from the edge of the map to
        the door of your house.
      Overworld Shear Sheep_instruction: |
        Sheep-shearing time! Use the “shear” command
        to gather wool from both sheep.
      PDAlg 13-16 Sam Extension Puzzle_instruction: |
        Add a second parameter to "onscreen?"
        for Sam's y coordinate and update the function so it keeps him safe on all
        four sides.
      PDAlg 17-20 Luigi Extension Puzzle_instruction: |
        Without modifying your existing
        "cost" function, create a new "coupon" function that takes a pizza topping
        and coupon code and returns the cost of a pizza with that topping. If the
        coupon code is correct (you get to decide what it is), apply a 30% discount
        to the pizza.
      PDAlg 8-12 ex dr 1_instruction: |
        The definition in this Design Recipe doesn't
        match both examples. Test each example to see which is failing, and then fix
        the definition to match.
      PDAlg 8-12 ex dr 2_instruction: |
        This student has created two examples for
        the function "apples" but something's not quite right. How would you direct
        this student to correct their mistake?
      PDAlg 8-12 Rocket Height Puzzle_instruction: |
        Let's write a "rocket-height"
        function with simple acceleration. Write a function that ensures the rocket
        is at 15 meters at 1 second, 45 meters at 2 seconds, 95 at 3 seconds, and
        165 at 4 seconds.
      PDAlg Big Game History_instruction: |
        Now that you've played through a Big
        Game level you should see a new entry in your history. Click the Version History
        button and you should see at least one version. Each time you go back to a
        Big Game level you'll get a new record in your version history that you can
        revert back to.
      PDAlg Big Game Remix_instruction: "Here's your Big Game as you last left it.\nTry
        clicking the Remix button to spin off a new remix of your project.\r\n\r\nAny\nchanges
        you make after you click Remix will be saved on your new remix and\nnot on
        your main Big Game."
      PDAlg Design Recipe Delete_instruction: |
        Click the delete button to get rid
        of this function, then try creating and deleting a few of your own.
      PDAlg Design Recipe Examples_instruction: |
        The definition in this Design Recipe
        doesn't match both examples. Test each example to see which is failing, and
        then fix the definition to match.
      PDAlg Design Recipe Required_instruction: |
        Complete the Design Recipe for the
        "eggs" function, making sure to create and test your examples.
      PDAlg Updates Cond_instruction: |
        When you went to PD in the summer, the Conditional
        block that you were introduced to was black and allowed any data type to be
        used. This proved to be confusing, given that every other function we've
        seen always produces the same type of data. To help make conditionals clearer
        and more consistent we've replaced the single black block with a separate
        block for each data type.
      PDAlg Updates Errors_instruction: |
        Run the provided program and use the error
        messages to try and track down the bugs.
      PDAlg Updates Space_instruction: |
        Making use of limited programming space (especially
        on small screens) is challenging with a block based language. To help with
        this we've added a few features. Experiment with this provided code to see
        how the space can be manipulated to deal with larger programs.
      PDK5 Conditionals 1_instruction: |
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: "Try this puzzle that uses conditionals and\nloops
        together. Use the \"if\" block to decide when to turn. Hint: you only\nneed
        one more block to complete this puzzle. \n"
      PDK5 Events 1_instruction: "So far all of the programs we've written are executed\nin
        order from top to bottom. In this puzzle, we'll use \"Events\" to respond\nto
        an action on demand. Make the octopus say \"Hello\" only when you click\non
        the Octopus. \n"
      PDK5 Functions 1_instruction: |
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: |
        함수를 사용해 새로운 block를 정의할 수 있습니다. "draw a square" 함수에 사각형을 그리는 블록을 이동하세요.
        "draw a square"함수가 안경을 생성하는 것을 볼 수 있나요? 이 사각형은 75pixels떨어져 있다.
      PDK5 Loops 1_instruction: "Instead of using 5 \"move forward\" blocks, use\nthe
        \"repeat\" block with a \"move forward\" block inside of it. In computer\nscience,
        this is called a \"loop.\" \n"
      PDK5 Loops 3_instruction: |
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |
        Something happened
        to the bits in this image! Find the error and fix it! Hint: a few extra bits
        were added. You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix bit offset_instruction: |
        A single extra bit was
        inserted into the stream of bits that make up the C of the Code.org logo.
        That extra bit bumps all of the other bits down the line which makes the logo
        look messed up. Hunt down the extra bit and remove it to fix the Code.org
        logo.
      Pixelation - Lesson 14 - Fix the error_instruction: |
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |
        Make a 3x5 letter
        'A'. The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want. Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation - Lesson 15 - Color Free Play_instruction: |
        Requirements: The icon
        must be 16x16 pixels. You must use the Pixelation Widget to encode the bits
        of color information. The image must be encoded with at least 12 bits per
        pixel.
      Pixelation - Lesson 15 - Color Shades 4x4_instruction: |
        We start you out with
        the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid
        with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill
        with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4
        - shades of gray.
      Pixelation - Lesson 15 - Color Shades_instruction: |
        We start you out with the
        row of shades of red that Maddie created in the video. Experiment with 6-bit
        color by filling in the bottom row of the image with shades of a different
        color. Here is an example with some shades of blue. Try your own color!
      Pixelation - Lesson 15 - Complete 3-bit color_instruction: |
        We start you with
        the 4x2 image Maddie was creating, but we've left out the last two squares.
        Finish off the image by figuring out which two colors are missing and encode
        them.
      Pixelation 2_instruction: |
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Pixelation Bee_instruction: |
        This larger image of a bee encodes color with
        12 bits per pixel, but viewing in hex makes it easier to see the color of
        each pixel. If you switch to binary mode - hold on to your hat - it's a lot
        of bits. Here's another mind-blowing thing to try: slide the bits per pixel
        up to 24 bits per pixel. What happens? Can you explain this behavior?
      Pixelation Flappy_instruction: |
        Here is a bigger image at 9 bits per pixel.
        With 9 bits per pixel you can express 512 different colors. Click through
        to see the next image which is even more sophisticated, but easier to understand.
      Play Lab Rocket 1_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second... press "Run" to see how this word problem looks as an animation.
      Play Lab Rocket 2_instruction: |
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second. Using the Design Recipe, write a function called rocket-height
        that takes in a number of  seconds that have passed since the rocket took
        off, and produces the height of the rocket at that time.
      Play Lab Rocket 3_instruction: |
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: |
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      Ryan - 4-5 Bee Conditionals 2_instruction: 꿀벌이 꽃꿀을 원합니다. 모두 꽃은 아니기 때문에, 안개 구름
        아래에 꽃이 숨어있는지 모두 살펴보아야 합니다. 꽃이면 꽃꿀을 모으면 됩니다.
      Ryan Test Locked Blocks_instruction: |
        Here's a function called "patrol."
        Edit it to move Cat up 400 pixels and then down 400 pixels.
      Ryan's clone of C4S15P10_instruction: "We've added one last function for you.\n\r\n\r\nUse
        an \"if\" statement to program your game to call the \"level_up\"\nfunction
        only when \"player_score\" becomes greater than a certain number.\r\n\r\nFor\nexample:
        \"player_score\" > 6\r\n\r\nPlay the game, and make it past level\n4 to move
        to the next puzzle. "
      Sam the Butterfly 1 (copy 1)_instruction: |
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Click "Run" and then use the
        arrow keys to move Sam around his yard, making note of Sam's coordinates
        at different locations. Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called safe-left?
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's completely visible on screen. If your function works,
        Sam shouldn't be able to leave the yard from the left side.
      Sam the Butterfly 3_instruction: |
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Complete the safe-right?
        function to make sure Sam can't go off the right side of the screen.
      Sam the Butterfly 4_instruction: |
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        safe from leaving both directions? Try using the and block to program the
        function on-screen? to check if Sam is safe-left? and safe-right?
      Sam the Butterfly 5_instruction: |
        Free Play: Awesome, we've kept Sam safe
        on the left and right! Use this free play stage to experiment with your functions
        and further improve onscreen?
      Sam the Butterfly 6_instruction: |
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      scrat 16 (copy 1)_instruction: |
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: |
        Acorn! Acorn! Acorn! Use an "if" block to get me there
        with the fewest number of blocks.
      scrat 17 (copy 1)_instruction: |
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: 좋아요. 다시 한번 연습해 보세요. 그렇게 어렵지 않지만, 벽을 조심하세요.
      scrat 18 (copy 1)_instruction: |
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: |
        The "If-else" blocks checks a condition, and then
        does one thing OR another. To get me to the acorn try to use this new block.
      scrat 19 (copy 1)_instruction: |
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: |
        One more practice of the "if-else" block, can you
        get it right on your first try?
      scrat 20_instruction: |
        Can you add just 3 blocks to help me solve a more complex
        maze? If you do it right, I can walk any curvy path no matter the length.
        Hurry! The ice is melting!
      SpecialFrozenLevel_instruction: 당신은 이제 최고의 예술가가 되었습니다!! 당신만의 겨울 왕국을 만들어보세요.
      Standalone_Artist_1_instruction: |
        Welcome to Artist! First off, let's try
        to make a simple square using the turn right block and move forward block.
        Each side should be 100 pixels long.
      Standalone_Artist_2_instruction: 120도, 60도의 각과 150 픽셀 만큼의 길이로 이 다이아몬드를 그려보세요.
      Standalone_Artist_3_instruction: 100픽셀의 선과 60도 회전으로 육각형을 그릴 수 있나요?
      Standalone_Artist_4_instruction: 이제 반복(loop) 이라는 새로운 블록을 이용할 수 있습니다. 이 블록은 원하는
        명령어들을 반복시켜줄 것입니다. 이 명령어들을 6번 반복하면 어떻게 될까요?
      Standalone_Artist_5.5_instruction: '다이아몬드 모양을 반복 블럭 안에 넣어서 회전시키면서 아주 쉽게 코드를
        만드는 방법을 잘 보세요. 순서대로 실행시켜야하는 명령어들을 12번 반복시킬 수 있습니다. 힌트: 다이아몬드 반복(loop) 를 30도만큼
        회전시키면 됩니다. 다이아몬드를 또 그릴 필요가 없습니다.'
      Standalone_Artist_5_instruction: 꽃을 그리려면 다이아몬드를 몇 번 반복해야 할까요?
      Standalone_Artist_6_instruction: '이 6각형 코드를 반복적으로 이용해서 디자인 해보세요. 한 번 실행할 때마다
        몇 도를 회전시켜야 할까요? 힌트: 원의 각도를 반복시키려고 하는 횟수로 나누면 됩니다.'
      Standalone_Artist_7_instruction: '함수는 한 번 만든 것을 다시 사용하는 프로그래밍 방법입니다. 꽃을 그려주는
        이 함수를 이용하면 원하는 만큼 몇 번이든지 꽃을 그릴 수 있습니다. 이 함수와 점프 블록을 사용하여 꽃을 그려보세요. 힌트: 꽃은
        150픽셀만큼 떨어져 있습니다.'
      Standalone_Artist_8_instruction: 육각형을 그리는 "모양 그리기" 함수가 있습니다. 코드를 실행시켜 함수가 어떻게
        동작하는지 살펴보세요. 사각형, 삼각형, 팔각형을 그리는 함수를 만들 수 있나요?
      Standalone_Artist_9_instruction: 자 이제 계속해서, 원하는 그림을 마음껏 그려보세요! 원하는 것이 어떤 것이든지,
        빈 함수를 이용해 마음대로 만들고 사용할 수 있습니다.
      Standalone_Artist_v2_instruction: |
        Welcome to Artist! First off, let's try
        to make a simple square using the turn right block and move forward block.
        Each side should be 100 pixels long.
      template test_instruction: what up
      Test Play Lab_instruction: This is a test play lab level.
      test_sarah_instruction: hi
      Text Compression 1_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      Total Artist Clone Me_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      U1L10 NetSim numbers with decimal_instruction: |
        Invent and test a protocol
        for encoding and sending text messages. Your protocol must include the letters
        a-z, spaces, and common punctuation marks. You may add additional characters
        if you wish. See the worksheet handed out by your teacher for more detailed
        instructions!
      U1L11 NetSim numbers with Ascii_instruction: |
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. See the
        worksheet handed out by your teacher for more detailed instructions!
      U1L13 Text Compression_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      U1L4 NetSim SendAB_instruction: "Develop, document, and test a protocol that\nallows
        you to use Internet Simulator to relay a message. See the worksheet\nfor more
        detailed instructions.  \n"
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U1L8 NetSim numbers with decimal_instruction: |
        With your partner, develop a
        protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      U2 frequency caesar_instruction: 소개
      U2 frequency random sub_instruction: 소개
      U2 vigenere cipher_instruction: 소개
      U2 Vigenere_instruction: Test
      U2L04 - NetSim Routers with Addresses_instruction: |
        Send messages with your
        classmates (Click to see full instructions)
      U2L05 - NetSim - Packets and Building TCP_instruction: "Develop a Protocol\nfor
        Reliably Sending a Message.\r\n\r\nConstraints:\r\n- Packets may contain\nonly
        6 characters\r\n- Packets may drop with small probability\r\n- Packets\nmay
        not arrive in order"
      U2L10 NetSim Automatic DNS_instruction: |
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L14 frequency random_instruction: Test
      U2L2 NetSim Hub Mode_instruction: "Now use the Internet Simulator to send the\nbattleship
        moves. For setup, join a Room with your group, and add ships to\nyour paper
        board for each opponent. When playing, all communication must be\ndone through
        the tool, so no talking, but have fun!\r\n"
      U2L3 NetSim Hub Mode_instruction: |
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: "For this activity, connect to a\nrouter
        with the others in your group. Important note: The router will only\nproperly
        route messages where the first 4 bits are the To: address and the\nsecond
        4 bits are the From: address.\r\n\r\n[TODO: NetSim needs to support\nhierarchical
        addresses. For now, level is set up for 4 bit to and from addresses]"
      U2L5 NetSim Classroom Internet_instruction: "For this activity, connect to\na
        router with the others in your group. The Internet Simulator now provides\na
        place for you to put the To and From addresses, so you don't have to type\nout
        the bits manually.\r\n\r\n"
      U2L7 NetSim Need for Packets_instruction: |
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U3 - Arrays - appendItem_instruction: |
        Create an array of odd numbers 1-11
        by using appendItem. (Click to see full instructions)
      U3 - Arrays - assignment_instruction: |
        Use indexes to change the values in
        this array from 1 to 0. (Click to see full instructions)
      U3 - Arrays - assignment2_instruction: |
        Calculate the sum of three values stored
        in an array. (Click to see full instructions)
      U3 - Arrays - assignment3_instruction: |
        Increase the value of each value in
        the randomly generated array by 1. (Click to see full instructions)
      U3 - Arrays - createFirstArray_instruction: |
        Create an array of the even numbers
        from 0-10 and display its contents with console.log. (Click to see full instructions)
      U3 - Arrays - Demo App_instruction: |
        Use the "My Favorite Things" app. How
        might this app be making use of an array? (Click to see full instructions)
      U3 - Arrays - expressionsAsIndexes_instruction: |
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      U3 - Arrays - favThings addItem_instruction: |
        Write code that allows a user
        to add their own favorite things to the list. (Click to see full instructions)
      U3 - Arrays - favThings bounds_instruction: |
        Add if statements to your event
        handlers that prevent the global index from going out of bounds. (Click to
        see full instructions)
      U3 - Arrays - favThings Counting Variable_instruction: |
        Create a global variable
        for the current index and use it to display the first item in the array. (Click
        to see full instructions)
      U3 - Arrays - favThings createArray_instruction: |
        Create an array of words
        describing your favorite things. (Click to see full instructions)
      U3 - Arrays - favThings firstOutput_instruction: |
        Use setText to display the
        first item in the array. (Click to see full instructions)
      U3 - Arrays - favThings giveIDs_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - favThings keepPlaying_instruction: |
        Make any other improvements
        you want! (Click to see full instructions)
      U3 - Arrays - favThings Next_instruction: |
        Write code that allows the user
        to move forward through your list by clicking the "Next" button. (Click
        to see full instructions)
      U3 - Arrays - favThings Prev_instruction: |
        Write code that allows the user
        to move backward through your list by clicking the "Last" button. (Click
        to see full instructions)
      U3 - Arrays - favThings template_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - globalVariableIndex_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - indexPractice_instruction: |
        Write the contents of the array to
        the screen in order. (Click to see full instructions)
      U3 - Arrays - insertingItems_instruction: |
        Insert items into an array to form
        a complete sentence. (Click to see full instructions)
      U3 - Arrays - insertionErrors_instruction: |
        Run each command that references
        indexes that are out of bounds and observe the results. (Click to see full
        instructions)
      U3 - Arrays - introIndex_instruction: |
        Display the first and last element in
        the array. Display the number 5 from the array. (Click to see full instructions)
      U3 - Arrays - length_instruction: |
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      U3 - Arrays - lengthMinus1_instruction: |
        Use list.length - 1 to log the last
        item in the array to the console. (Click to see full instructions)
      U3 - Arrays - remove_instruction: |
        Remove items from an array to form a complete
        sentence. (Click to see full instructions)
      U3 - Arrays - stringsInArrays_instruction: |
        Write a sentence word by word by
        adding strings to an array. (Click to see full instructions)
      U3 - Conditional Basics - 6_instruction: |
        Add a setText after the if statement
        to "Nope. Guess again" (Click to see full instructions)
      U3 - Conditionals - Combine AND and OR_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instrucitons.
      U3 - Conditionals - Combine AND OR and NOT_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instrucitons.
      U3 - Conditionals - Combine AND OR Simple_instruction: |
        Write an if statement
        that uses AND and OR to display "Sleep in" if it's the weekend and the
        user is a teenager. (Click to see full instructions.
      U3 - Conditionals - intoOr_instruction: |
        Add 2 if statements that use the OR
        operator. (Click to see full instructions)
      U3 - Conditionals - introAND_instruction: |
        Add 2 if statements that use the
        OR operator. (Click to see full instructions)
      U3 - Conditionals - Simple AND_instruction: |
        Write an if statement that uses
        AND to display "You are a teenager" if the user enters an age between 13
        and 19. (Click to see full instructions)
      U3 - Conditionals - Simple OR_instruction: |
        Write an if statement that uses
        OR to display "It's the weekend" if the user enters a weekend day at the
        prompt. (Click to see full instructions)
      U3 - Design Mode - Console Log_instruction: |
        Update the ID names and `console.log()`
        messages to match the correct button. (Click to see full instructions.)
      U3 - Design Mode - Layers and Delete_instruction: |
        Fix the layout of the bullseye
        game. (Click to see full instructions)
      U3 - Design Mode - Multi Screens 2_instruction: |
        Make a 2 screen app which
        can switch back and forth between a black screen and a white screen using
        buttons. (Click to see detailed instructions.)
      U3 - Design Mode - Multi Screens_instruction: |
        Make a 2 screen app with a black
        screen and a white screen. (Click to see detailed instructions)
      U3 - Design Mode - Other Events_instruction: |
        Delete the button and make the
        image move to a random location when you click on it. (click to see detailed
        instructions)
      U3 - Design Mode - WTF Console Log_instruction: |
        Add a 3 console.log messages
        and test them out. (Click to see full instructions.)
      U3 - Design Mode -Recreate Beyond Buttons_instruction: |
        Recreate the game from
        the "Chaser Game" with a Welcome Screen and Game Over Screen. (Click to
        see full instructions.)
      U3 - Design Mode 1_instruction: |
        Add a large red button to your screen using
        Design Mode. (Click for full instructions.)
      U3 - Dice - Dropdown and Score_instruction: |
        Add guess and score to the Dice
        Game (Click to see full instructions)
      U3 - Dice - Dropdown with Strings_instruction: |
        Add a dropdown for difficult
        level that prints the difficulty level in the console. (Click to see full
        instructions)
      U3 - Dice - If_instruction: |
        Show different dice images for the random number
        generated. (Click to see full instructions)
      U3 - Dice - Nested_instruction: |
        Use nested if statements to making the scoring
        different for the different game levels. (Click to see full instructions)
      U3 - High Low - Debug_instruction: |
        Debug the order of the conditionals so
        that it will actually tell the user when their guess is close. (Click to see
        full instructions)
      U3 - High Low - Dropdown_instruction: |
        Add a dropdown for their guess instead
        of promptNum (Click to see full instructions)
      U3 - High Low - Else if_instruction: |
        Add an else if statement in order to
        tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      U3 - High Low - Else_instruction: "Add an else statement so that the program\nwill
        tell the user when they are right and when they are wrong. (Click to\nsee
        full instructions)\r\n"
      U3 - High Low - If_instruction: |
        Add code to the if-statement that indicates
        the user guessed the secret number. (Click to see full instructions)
      U3 - Keys - Add Image URLs_instruction: |
        Add image URLs to your array. Replace
        the text area with an image and setText with setImageURL. Then test your app!
        (Click to see full instructions)
      U3 - Keys - Buttons and Keys_instruction: |
        Have the program respond the same
        way for both up and down arrows as it does to the up and down buttons. (Click
        to see full instructions)
      U3 - Keys - Demo App_instruction: |
        Play with the image scroller. Press the
        left and right arrows to progress through the images.
      U3 - Keys - Final Image Scroller_instruction: |
        Update the image scroller to
        respond to buttons and key presses. (Click to see full instructions)
      U3 - Keys - Functions_instruction: |
        Write a doUpArrow and doDownArrow function
        and call the functions instead of duplicating the code. (Click to see full
        instructions)
      U3 - Keys - Key Up and Down_instruction: |
        Try out the keyup and keydown events
        to see how they are different from keypress. (Click to see full instructions)
      U3 - Keys - Multiple Keys_instruction: |
        Play a different sound when the down
        arrow is pressed. (Click to see full instructions)
      U3 - Keys - Practice Adding Images with URL_instruction: |
        Add image URLs to
        your image array. Test out the add button. Style your image scroller. (Click
        to see full instructions)
      U3 - Keys - Words to Images_instruction: |
        Add image URLs to your image array.
        Test out the add button. Style your image scroller. (Click to see full instructions)
      U3 - Loops -  9 Part 2_instruction: |
        Change the boolean expression for the
        while loop so that it will roll until both dice are greater than 3. (Click
        to see full instructions)
      U3 - Loops -  Complex Condition_instruction: |
        Change the boolean expression
        for the while loop so that it will roll until both dice are greater than 3.
        (Click to see full instructions)
      U3 - Loops - 1_instruction: |
        Change the condition for the while loop to check
        if the variable num is less than 90. (Click to see full instructions)
      U3 - Loops - 10_instruction: |
        Write a program that if the sum of the dice is
        a 7 or 11 roll again and keep rolling until the sum is not 7 or 11. (Click
        to see full instructions)
      U3 - Loops - 11_instruction: |
        Fix the condition so that it keeps rolling the
        die as long as the value is not a 2 or a 3 instead of rolling infinitely.
        (Click to see full instructions)
      U3 - Loops - 12_instruction: |
        Change the code so that it prints the string
        'Hi' 5 times. (Click to see full instructions)
      U3 - Loops - 13_instruction: |
        Update the code to count up by 3 instead of 1.
        (Click to see full instructions)
      U3 - Loops - 14_instruction: |
        Change the loop condition to prevent the infinite
        loop and stop counting at once the count is past 30. (Click to see full instructions)
      U3 - Loops - 15_instruction: |
        Count the number of times the sum of the dice
        is 7. (Click to see full instructions)
      U3 - Loops - 16_instruction: |
        Find out how many times you have to roll to get
        the sum of 7 100 times (Click to see full instructions)
      U3 - Loops - 2_instruction: |
        Try creating an infinite loop using !=, > and
        <. (Click to see full instructions)
      U3 - Loops - 3_instruction: |
        Change the if statement to a while loop so the
        program will run until it rolls a 6. (Click to see full instructions)
      U3 - Loops - 4_instruction: |2
         Use the Debug Commands to to make a list of all
        the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - 5_instruction: |
        Add code inside the while loop which will update
        the variable num so that the condition will eventually become false. (Click
        to see full instructions)
      U3 - Loops - 6_instruction: |
        Fix the problem so the loop will run at least
        once. Change the initial value of num to a dummy value such as -1. (Click
        to see full instructions)
      U3 - Loops - 7_instruction: |
        Without adding any lines of code, reorder the
        code so that it prints all the values of num. (Click to see full instructions)
      U3 - Loops - 8_instruction: |
        Debug which number is not getting printed and
        add a write statement to display that value. (Click to see full instructions)
      U3 - Loops - 9_instruction: |2
         Modify the condition so that it keeps rolling
        as long as both are less than 3. (Click to see full instructions)
      U3 - Loops - Continue_instruction: |2
         Use the Debug Commands to to make a list
        of all the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - minus = operator_instruction: |
        Update the code to use the -= operator
        to count from 30 down to 0 by 3s. (Click to see full instructions)
      U3 - Loops - Minus Minus_instruction: |
        Change the code to count down from 10
        to 1! (Click to see full instructions)
      U3 - Loops - plus and minus = operator_instruction: |
        Update the code to use
        the += operator. (Click to see full instructions)
      U3 - Loops - Plus Plus_instruction: |
        Change the code to use count++ instead
        of count = count + 1.  (Click to see full instructions)
      U3 - Loops - Typing in Console_instruction: |
        Use console to check the ending
        value of num. (Click to see full instructions)
      U3 - Loops And Arrays - Add 5_instruction: |
        Add 5 to all the values in an array
        (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 1_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 2_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Counting Times_instruction: |
        Count the number of times
        5 appears in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Divid by 2_instruction: |
        Divide every value in the
        array by 2. (Click to see full instructions)
      U3 - Loops And Arrays - Find Min_instruction: |
        Write a function that returns
        the smaller of two numbers.  (Click to see full instructions)
      U3 - Loops And Arrays - Functions that Return Value_instruction: |
        Test out
        the return values of the findMax function.  (Click to see full instructions)
      U3 - Loops And Arrays - General Search Param_instruction: |
        Add a parameter
        for the search value to make the function more general. (Click to see full
        instructions)
      U3 - Loops And Arrays - Intro For Loop_instruction: |
        Add a for loop with a
        console.log inside and test out the 3 pieces of the for loop. (Click to see
        full instructions)
      U3 - Loops And Arrays - Linear Search_instruction: |
        Print true if the value
        5 appears in the array and false when it is not a 5. (Click to see full instructions)
      U3 - Loops And Arrays - Loop Array If_instruction: |
        Use an if statement to
        only print the values in the array that are greater than 5. (Click to see
        full instructions)
      U3 - Loops And Arrays - Make it a Function - add list parameter_instruction: |
        Create
        a function that takes a list parameter and prints if the list contains a 5.
        (Click to see full instructions)
      U3 - Loops And Arrays - Make it a Function_instruction: |
        Create a function
        that takes a list parameter and prints if the list contains a 5. (Click to
        see full instructions)
      U3 - Loops And Arrays - Multiple Returns_instruction: |
        Test out the return
        values of the findMax function.  (Click to see full instructions)
      U3 - Loops And Arrays - Print Array_instruction: |
        Use a for loop to print out
        all the values in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Printing Single True_instruction: |
        Count the number
        of times 5 appears in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Return Index_instruction: |
        Make the search function
        return the index of the search value in the array. (Click to see full instructions)
      U3 - Loops And Arrays - Return Value_instruction: |
        Make the search function
        return the value of true or false.  (Click to see full instructions)
      U3 - Loops And Arrays - Search and Remove_instruction: |
        Search for 5 in the
        array and remove it from the array. (Click to see full instructions)
      U3 - Loops And Arrays - Search with Boolean Var_instruction: |
        Make a boolean
        variable to keep track of if there is a 5 in the array. (Click to see full
        instructions)
      U3 - Movie Bot - Multiple If Sequences_instruction: |
        Add another set of if,
        else if, and else statements insides the question if statement to check for
        keywords for movies ratings (G, PG, PG-13, and R). (Click to see full instructions)
      U3 - Movie Bot - Nested Motivation_instruction: |
        Add a seperate set of if statements
        to check for a ? in the input. (Click to see full instructions)
      U3 - Movie Bot - toLowerCase_instruction: |
        Use the toLowerCase() command to
        change all user input into lower case letters after they enter it. (Click
        to see full instructions)
      U3 - Movie Bot - When Multiple If Statements_instruction: |
        Add an if and else
        if statement that checks for please and thank you. (Click to see full instructions)
      U3 - Simulation - 1_instruction: |
        Use a while loop to "flip 10 coins" and
        write them to the screen. (Click to see full instructions)
      U3 - Simulation - 2.1_instruction: |
        Change your looping condition to be based
        on the number of heads flipped. (Click to see full instructions)
      U3 - Simulation - 2.5_instruction: |
        Run your simulation to get the full 10,000
        flips! How long did it take? (Click to see full instructions)
      U3 - Simulation - 2_instruction: |
        Keep track of how many heads (1s) your program
        generates and print the results to the screen. (Click to see full instructions)
      U3 - Simulation - 3_instruction: "Add functionality that counts the length\nof
        your streaks. (Click to see full instructions)\r\n"
      U3 - Simulation - 4_instruction: |
        Update your while loop's condition to be
        based on the streak of heads. (Click to see full instructions)
      U3 - Simulation - 5_instruction: |
        Change your while loop to run until you get
        a streak of 12 heads. How many flips did it take? (Click to see full instructions)
      U3 - Simulation - 6_instruction: |
        Keep adding to your simulation. What do you
        want to explore next? (Click to see full instructions)
      U3 - Simulation - App_instruction: |
        Change your code to run the full simulation
        with 10,000 coins. What was your longest streak of heads? (Click to see full
        instructions)
      U3 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3 - User Input - Save getText To Variable_instruction: |
        Save the age and name
        of the user in a variable (Click to see full instructions)
      U3 - User Input - Saving After Input_instruction: |
        Save the age of the user
        in a variable using getText() (Click to see full instructions)
      U3 - User Input and String -  Concat_instruction: |
        Output a message about age
        in a Text Area (Click to see full instructions)
      U3 - Variables - Clicker Game_instruction: |
        Create your improved Chaser-Game
        here. (Click to see full instructions)
      U3 - Variables - Debug Scope_instruction: |
        Why isn't the value of foo changing
        correctly? Make a guess. (Click to see full instructions)
      U3 - Variables - Debugging with Turtle_instruction: |
        Use your new debugging
        techniques to get the code to run correctly (Click to see full instructions)
      U3 - Variables - Decrement_instruction: |
        Decrement the value of the variable.
        (Click to see full instructions)
      U3 - Variables - Identify Variables_instruction: |
        Identify the values printing
        in the terminal with console.log statements. (Click to see full instructions)
      U3 - Variables - Increment_instruction: |
        Use the console.log debugging technique
        to see what is happening in this example. Add another variable and increment
        its value. (Click to see full instructions)
      U3 - Variables - Incrementing Variables_instruction: |
        Create a repeat loop
        for the repeated code and use increment to recreate the original program with
        less lines of code! (Click to see full instructions)
      U3 - Variables - Read Using Turtle_instruction: |
        Create a second set of variables
        for x and y position. Move turtle to that new location. (Click to see full
        instructions)
      U3 - Variables - Reassigning Variables with Console.log_instruction: |
        Add another
        reassignment statement at the end of the code to change the value of the variable
        at second time. (Click to see full instructions)
      U3 - Variables - Set to Expression with Other Variables and Turtle_instruction: |
        (click
        to see full instructions)
      U3 - Variables - Set to Expression with Other Variables_instruction: |
        Write
        an expression that calculates the player's total score and stores it in the
        totalScore variable. The calculation is: the player's points times lives
        divided by the total time. (click to see full instructions)
      U3 - Variables - Set to Expression with Turtle_instruction: |
        (click to see
        full)
      U3 - Variables - Set to Expression_instruction: |
        Test out the new expressions.
        (Click to see full instructions)
      U3 Digital Assistant Design_instruction: |
        Pick a topic for your Digital Assistant
        and create the basic layout with a text input and text area. (Click to show
        full instructions)
      U3 Digital Assistant Set Text_instruction: |
        Have your digital assistant repeat
        back what the user types and include a canned response. (Click to see full
        instructions)
      U3 Digital Assistant Target - Mehal_instruction: |
        Try out a demo of the Digital
        Assistant!
      U3 Digital Assistant Target_instruction: Try out a demo of the Digital Assistant!
      U3 Digital Assistant Template_instruction: This is a project template!
      U3 Digital_instruction: |
        Choose a specialization topic for your digital assistant.
        Create a basic digital assistant that takes the user's input and displays
        back a default response.
      U3 full clicker demo_instruction: Clicker game - Try it out!
      U3 mehal's clone_instruction: Try out a demo of the Digital Assistant!
      U3- Variables - Assign Random For Turtle Draw_instruction: |
        Try writing the
        same code in text mode.
      U3- Variables - Changing the Value_instruction: |
        Update the value of 'turnAmount'
        before each moveForward so the turtle turns a different amount each time.
        (Click to see full instructions)
      U3- Variables - Create And Assign_instruction: |
        On one line add a variable
        called "lives" and assign it the value 3. Print it to the console. (Click
        to see full instructions)
      U3- Variables - Text Mode_instruction: |
        1. switch to text mode and type instructions;
        2. drag blocks out into text mode; 3. experiment with code completion
      U3-Design Mode-ID and Event Handler_instruction: |
        Add an event handler for
        the button using the "Insert and show" link in the Design Mode Events tab.
        (Click to see full instructions).
      U3-Design Mode-ID_instruction: |
        Using the Design Mode Events change the button
        ID and update the code to match. (Click to see detail instructions).
      U3-Design Mode-Image_instruction: |
        Recreate the "Chaser-Game" from the last
        lesson using Design Mode. (Click to see full instructions.)
      U313 drag Two Buttons_instruction: |
        Run a program with two buttons that have
        the same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 eventsDetails_instruction: |
        Run a program with two buttons that have the
        same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 Two Buttons with Ids_instruction: |
        Predict what will happen. Once you've
        made a prediction, run the code to see what happens. (Click to see full instructions)
      U3L03 - draw rect function_instruction: "Write a function called drawRectangle().\r\n(Click\nto
        see full instructions)"
      U3L03 - draw step_instruction: |
        Write the drawStep function. (Click to see
        full instructions)
      U3L03 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 Creating Procedures 1_instruction: |
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |
        Define a function called turnAround
        and call it to make the turtle move as depicted. (Click to see full instructions)
      U3L03 define turnRight and draw a rectangle_instruction: |
        Define a function
        called right() that turns the turtle to the right. Then use this function
        to draw a rectangle, as shown below. (Click to see full instructions)
      U3L03 Draw a T using turnAround_instruction: |
        Draw a plus sign using the provided
        version of turnAround().  (Click to see full instructions)
      U3L03 draw diamond_instruction: |
        Create a function called drawDiamond() that
        makes use of your previous work to draw the complete diamond. (Click to see
        full instructions)
      U3L03 Three Steps_instruction: |
        Define a function called drawSide() which draws
        three steps and moves the turtle to prepare for the next side (Click to see
        full instructions)
      U3L04 - 3 by 3 with functions_instruction: |
        Make the 3x3 square as efficiently
        as you can. (Click to see full instructions)
      U3L04 - snowflake_instruction: |
        Create the design by breaking it down into
        layers of functions. (Click to see full instructions)
      U3L04 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 - moveForwardwithParams_instruction: |
        Use a single command to move the
        turtle to the edge of the screen. (Click to see full instructions)
      U3L06 Challenge 1 triangle_instruction: |
        Use the parameterized versions of
        the turtle commands to create a triangle with sides 100 pixels long. (Click
        to see full instructions)
      U3L06 Challenge 2 purple square_instruction: |
        Read the documentation for penColor()
        and penWidth() before using them to draw the blue square.
      U3L06 Challenge 3 fill pink_instruction: |
        Fill in the background of the screen
        with your favorite color. (Click to see full instructions)
      U3L06 Challenge 4 bullseye_instruction: |
        Create the bullseye using hexadecimal
        colors and dot(). (Click to see full instructions)
      U3L06 Challenge 5 overlapping circles_instruction: |
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: "Read the documentation for the \"arcLeft\"\nand
        \"arcRight\" commands and then draw the squiggles as shown. \n"
      U3L06 Challenge 7 smiley face_instruction: |
        Use turnTo() and moveTo() to help
        draw a smiley face. (Click to see full instructions)
      U3L06 Challenge 8 make your own_instruction: |
        Create a drawing of your own.
        (Click to see full instructions)
      U3L07 - allSeaGrass_instruction: |
        Add 50 pieces of seagrass to the image by
        writing drawAllSeagrass with a loop. (Click to see full instructions)
      U3L07 - bubbles_instruction: |
        Add 200 bubbles to the image by writing drawAllBubbles
        with a loop. (Click to see full instructions)
      U3L07 - callingFunctionsInLoops_instruction: |
        Call the function within the
        loop to complete the figure. (Click to see full instructions)
      U3L07 - createTriangleParam_instruction: |
        Define a function that accepts a
        parameter to match the function calls and complete the image. (Click to see
        full instructions)
      U3L07 - fish_instruction: |
        Add 15 fish to the image by writing drawAllFish
        with a loop. (Click to see full instructions)
      U3L07 - Free Play Loops and Random_instruction: |
        Free Play!  Use what you learned
        from loops and random to make your own little scene.  Have fun.
      U3L07 - introSquare_instruction: |
        Use a loop to draw a square. (Click to see
        full instructions)
      U3L07 - loopsWithRandom_instruction: |
        Increase the number of iterations to
        fill the screen with white. (Click to see full instructions)
      U3L07 - randomDots1_instruction: |
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      U3L07 - randomSquare_instruction: |
        Draw the figure using a loop. (Click to
        see full instructions)
      U3L07 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that controls
        the number of waves in the grass. (Click to see full instructions)
      U3L07 - seaStar_instruction: |
        Add 5 sea stars to the image by writing drawAllSeaStars
        with a loop. (Click to see full instructions)
      U3L07 - Starry Night Starter Code_instruction: "You are going to use loops\nand
        random numbers to generate an image of starry night sky similar to one\nshown
        here.  We have given you some starter code to generate the ground and\nsky
        (just two giant dots), you will add code to this project to make the stars,\ngrass,
        and moon.  All of the effects are clever applications of turtle dots,\nlines,
        and colors.  To get started, follow the series of steps suggested in\nthe
        accompanying worksheet. \n"
      U3L07 - sunBeams_instruction: |
        Add 100 sunbeams to the image by writing drawAllSunbeams
        with a loop. (Click to see full instructions)
      U3L07 - topDownDesign_instruction: |
        Get comfortable with the structure of this
        program, then move on to the next exercise. (Click to see full instructions)
      U3L08 - createTwoParamTriangle_instruction: |
        Define a function called drawTriangle()
        that accepts two parameters to set the size and width of the triangle. (Click
        to see full instructions)
      U3L08 - digitalScene_instruction: |
        Create the functions you were assigned as
        part of your digital scene. (Click to see full instructions)
      U3L08 - drawSquaresWithParams_instruction: |
        Write drawSmallSquare() to draw
        a 25px square. (Click to see full instructions)
      U3L08 - drawSquareWithParam - for video_instruction: |
        Use drawSquare() to recreate
        the image of both squares, this time using parameters. (Click to see full
        instructions)
      U3L08 - drawSquareWithParam_instruction: |
        Use drawSquare() to recreate the
        image of both squares, this time using parameters. (Click to see full instructions)
      U3L08 - Enchantment Under the Sea_instruction: |
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, sea grass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L08 - fish_instruction: |
        Add a parameter to drawFish() that changes the size
        of the fish drawn. (Click to see full instructions)
      U3L08 - freePlay_instruction: |
        Keep adding to your image by making more calls
        to your new functions with parameters. (Click to see full instructions)
      U3L08 - individualCode_instruction: |
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      U3L08 - introUnderTheSea_instruction: |
        Add an extra fish, starfish, and piece
        of sea grass to the image. Look at, but don't change, the functions that
        create them. (Click to see full instructions)
      U3L08 - multiParamFish_instruction: |
        Add three parameters to your drawFish()
        function to accept red, green and blue values to make your fish different
        colors. (Click to see full instructions)
      U3L08 - multipleLayersofParams_instruction: |
        Call drawPlusSign() to complete
        the image. (Click to see full instructions)
      U3L08 - paramsToStarfish_instruction: |
        Add a parameter to drawStarfish() that
        changes the size of the starfish drawn. (Click to see full instructions)
      U3L08 - randomInput_instruction: |
        Use the randomNumber() blocks to test the
        functions you designed with random input. (Click to see full instructions)
      U3L08 - seaGrass_instruction: |
        Add a parameter to drawSeaGrass() that changes
        the size of the piece of sea grass drawn. (Click to see full instructions)
      U3L08 - squareTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L08 - starFish_instruction: |
        Add an extra fish, starfish, and piece of sea
        grass to the image. Look at, but don't change, the functions that create
        them. (Click to see full instructions)
      U3L08 - triangleTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L1 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3L12 Chaser Template_instruction: This is a project template!
      U3L13 - Button with ID_instruction: |
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id plus logic problem_instruction: "The last problem was an example\nof
        syntax error.  App Lab did not understand which object it should be listening\nto
        for a \"click\" event so it showed an error message in the console to let\nyou
        know.  Another kind of error is a logical error - the program is valid,\nbut
        it's not doing what you want it to do.\r\n\r\nThis program has 2 errors.\nA
        (tricky) syntax error and logical error.  Find them, fix them, and make\nthe
        program work as expected."
      U3L13 - Debug Id Problem_instruction: |
        Improve the button by choosing a descriptive
        and meaningful ID. (Click to see full instructions)
      U3L13 - Debugging 1_instruction: |
        Debug the program by verifying your IDs are
        being referenced properly. (Click to see full instructions)
      U3L13 - Debugging 2_instruction: |
        Debug the program by properly ordering your
        button commands and event handlers. (Click to see full instructions)
      U3L13 - Debugging 3_instruction: |
        Debug the program by fixing the logical error
        within the program. (Click to see full instructions)
      U3L13 - Project_instruction: |
        Create your multi-screen app. (Click to see full
        instructions.)
      U3L13 - Turtle Driver Project_instruction: |
        Create a "turtle driver" that
        includes buttons to move the turtle forward and turn it left and right. (Click
        to see full instructions)
      U3L13 - Turtle move with button_instruction: |
        Add a button that moves the turtle
        when clicked.  (Click to see full instructions)
      U3L13 eventsDetails_instruction: |
        Add an event handler to the button to move
        the turtle forward. (Click to see full instructions)
      U3L14 - Assigning Random Value_instruction: |
        Write a program that simulates
        the rolling of two dice and reports their individual values as well as the
        sum. (click to see full instructions)
      U3L14 - concatenate simple_instruction: |
        Modify the write statement on line
        3 to combine text and variables together to make the app display a single
        line of text that shows the player's lives and score. (click to see full
        instructions)
      U3L14 - Mini Calculator embed_instruction: |
        You will be prompted for two numbers,
        one right after the other.  See what happens.  Enter different numbers until
        you get the idea.
      U3L14 - moving memory challenge1_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge2_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge3_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge4_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge5_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge6_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - Unfortunate Events Free Play_instruction: |
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L14 - User Input Division calculator_instruction: |
        Write a program that acts
        as a simple calculator. (click to see full instructions)
      U3L14 - Variable ReAssignment pt2_instruction: |
        Trace the code and predict
        what you think will be printed to the console. Then add a console.log statement
        at the end of the program to see the last value of someNum to see if your
        full prediction is correct. (click to see full Instructions)
      U3L15 - add code to make count down work_instruction: |
        Write code to make the
        down arrow work as expected. (Click to see full instructions)
      U3L15 - Add reset button to UpDown app_instruction: |
        Add code so that clicking
        the start over button will reset the game and send you back to the main screen.
        (Click to see full instructions)
      U3L15 - clicker update score_instruction: |
        Add code to update the score when
        the apple is clicked. (Click to see full instructions)
      U3L15 - count upDown bug forget to set text_instruction: |
        Find the bug in the
        program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug logic error wrong update_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug var not created globally_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - Debug forget to update var on reset in UpDown app_instruction: |
        Run
        the app, and click the up or down button until you get to the gameOverScreen.
        Click 'Start Over' and try the app again. Find and fix the issue in the
        code. (Click to see full instructions)
      U3L15 - Debug if never triggers in UpDown app_instruction: |
        Run the app and
        use the up and down arrows to try to hit the gameOverScreen. You can't! Find
        and fix the issue in the code. (Click to see full instructions)
      U3L15 - Debugging Simple If-statements =v==_instruction: |
        Run the app, and
        click the up button. Then restart and run it again, and click the down button.
        Find and fix the issue in the code. (Click to see full instructions)
      U3L15 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L15 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L15 - mini clicker update score_instruction: |
        Add code to update the score
        when the apple is clicked. (Click to see full instructions)
      U3L15 - practice with setText_instruction: |
        Use setText to complete the click
        event handler for the down arrow. (Click to see full instructions)
      U3L15 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L15 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer working. (Click to see full instructions)
      U3L15 click add lives_instruction: |
        Add lives to the clicker game that decrement
        by 1 when the background image is clicked (Click to see full instructions)
      U3L15 full clicker app_instruction: |
        Complete your clicker game! (Click to
        see full instructions)
      U3L16 - challenge say hi app_instruction: |
        Write a greeting to the user when
        they hit 'enter' in the text input, using the 'change' event. (Click to
        see full instructions)
      U3L16 - chaserApp_instruction: |
        Create your own "Chaser App". (Click to see
        full instructions)
      U3L16 - chooseImages_instruction: |
        Replace the image in your application with
        one of your own. (Click to see full instructions)
      U3L16 - doubleQuotes_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - hideAndShow_instruction: |
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: "Introducing objects other than\nbuttons!
        - textLabels and images.  First try replacing your button with a\ntextLabel.
        \ Will the text respond to events just like the button?  Try connecting\nan
        event handler to it.  We've started you out with code similar to the result\nof
        the last level, you can copy your code from that level into here if you\nprefer.
        \n"
      U3L16 - images_instruction: "Introducing Images.  Try replacing the textLabel\nwith
        an image..  Will the image respond to events just like the button?  Try\nconnecting
        an event handler to it.  We've started you out with code similar\nto the result
        of the last level, you can copy your code from that level into\nhere if you
        prefer. \n"
      U3L16 - intro getText_instruction: |
        Add an Text Inputs for name and age. (Click
        to see full instructions)
      U3L16 - introSetPosition_instruction: |
        Move the buttons to the bottom of the
        screen. (Click to see full instructions)
      U3L16 - introStrings_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - nameAgeTemplate_instruction: |
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      U3L16 - newEventTypes_instruction: |
        Experiment with different event types and
        select the one that you think is best. (Click to see full instructions)
      U3L16 - outputWithTextArea_instruction: |
        Output a message to the Text Area
        (Click to see full instructions)
      U3L16 - projectTemplate_instruction: |
        Create your own "Chaser App". (Click
        to see full instructions)
      U3L16 - quick double click_instruction: |
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |
        Introducing the setPosition
        command!  Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: |
        Modify the code so that the turtle
        moves to a random screen location when the button is clicked. (Click to see
        full instructions)
      U3L16 - singleSetPosition_instruction: |
        Move the button to the middle of the
        screen. (Click to see full instructions)
      U3L16 - stringsVsNumbers_instruction: |
        Run the program to see how strings and
        numbers behave with different arithmetic operators. (Click to see full instructions)
      U3L16 - text labels_instruction: |
        Use the textLabel command to replace the
        button in your program with a text label. (Click to see full instructions)
      U3L16 - textInput getText write_instruction: |
        Add an Text Input box for the
        name and age. (Click to see full instructions)
      U3L16 - toUpper_instruction: |
        Make the name of the user appear in upper case
        (Click to see full instructions)
      U3L16 - use images_instruction: |
        Use the image command to replace the text
        label in your program with an image. (Click to see full instructions)
      U3L16 Mad Lib Clear Input_instruction: "Clear the user's previous text when\nthe
        Play Again button is clicked (Click to see full instructions) \n"
      U3L16 Mad Lib Demo_instruction: Mad Libs Demo - Try it out!
      U3L16 Mad Lib getText_instruction: "Before setting the text area with your\nMad
        Lib outline, get the user's text and incorporate their responses. (Click\nto
        see full instructions) \n"
      U3L16 Mad Lib setText_instruction: "When the Next button is clicked, set the\ntext
        area to have the main outline of your How-to Mad Lib (without the user's\ninput).
        (Click to see full instructions) \n"
      U3L16 Mad Lib Student Setup_instruction: |
        Back to Mad Libs: To get started,
        set up the two screens for your Mad Libs app (Click to show full instructions)
      U3L16 Mad Lib toUpper_instruction: "Apply the toUpperCase and toLowerCase string\nfunctions
        to the user's text. (Click to see full instructions) \n"
      U3L17 - getAndSetKeyValue_instruction: |
        Create an image like app. (Click to
        see full instructions)
      U3L17 - getKeyValue_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introCallbacks_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - readKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - setKeyValue_instruction: |
        Create and update your key value pairs using
        setKeyValue. (Click to see full instructions)
      U3L17 - twoSetKeyValue_instruction: |
        Run the program several times to observe
        how often setKeyValue commands arrive out of order. (Click to see full instructions)
      U3L18 comparison operators_instruction: |
        Use `console.log` to print out the
        different boolean expressions below to see what information they return. (Click
        to see full instructions)
      U3L18 comparison operators_for_video_instruction: |
        Use `console.log` to print
        out the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      U3L19 - Clicker Game Freeplay Area_instruction: |
        Use this App Lab area to improve
        your clicker game.  You should start by copy/pasting the code from your old
        game here.  We're showing a more full set of blocks in the toolbox - some
        of the things you might not have used yet.  Feel free to explore then and
        experiment if you want to.  Everything else you need should be shown.  Have
        fun!
      U3L19 - Debugging with consoleLog_instruction: |
        Add console.log() statements
        to find out the value of a and b after the first reassignment statement a
        = b; (Click to see full instructions)
      U3L19 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L19 - do concatenate string with var_instruction: "We've given you a piece\nof
        code from the previous screen.  Try changing the value assigned to foo\nto
        see the string change. \r\nDo this: \r\n1. Try changing the value assigned\nto
        foo to see the string change. \r\n2. By only modifying the lines of code\nthat
        were given to you, try to get the output to say: “The value of foo is:\n9.
        \ And isn’t that fine.” \r\n"
      U3L19 - fix the var name syntax error v2_instruction: |
        Fix the error and get
        it to print the value of both variables (Click to see full instructions)
      U3L19 - fix the var name syntax error_instruction: |
        Fix the error and get it
        to print the value of both variables (Click to see full instructions)
      U3L19 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L19 - practice with setText_instruction: |
        Add another button that changes
        the text to the value of a new variable. (Click to see full instructions)
      U3L19 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L19 - Target Clicker App_instruction: |
        Investigate the new elements of the
        'chaser-game'
      U3L19 - test reassignment of two vars_instruction: |
        Predict the value of a
        and b. Add console.log statements to find out the actual value of a and b.
        (Click for full instructions)
      U3L19 - three basic ops of variables_instruction: |
        Add another variable called
        "lives" and set the value to 3. Print the value of the variable to the console.
        (Click to see full instructions)
      U3L19 - try out console log_instruction: "Try out console.log.  Do this: replace\nthe
        statement write(\"foo is: \" + foo) with console.log(\"foo is: \" + foo).
        \ Run\nthe program and you should see the output show up in the console area
        below\nthe workspace.  Then try adding a few more console.log statements.
        \ Display\nsome text.  Make another variable and display that.  \r\nThe app
        screen will\nbe blank -- that's the point.  With console.log you can test
        output behind\nthe scenes in a way the user cannot see.  \r\n\r\n\r\nGIF:
        U3L19-useconsolelog.gif"
      U3L19 - up down count practice app_instruction: |
        Set up the down button to
        decrease the value of count by 1 each time it is clicked. (Click to see full
        instructions)
      U3L19 - updating variables pt1_instruction: |
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |
        Make a prediction
        about the ending values of a,b, and c. Then use console.log to check your
        understanding (Click to see full instructions)
      U3L19 - variable reassignment part 1_instruction: |
        Predict the value of a and
        b. Add console.log statements to find out the actual value of a and b. (Click
        for full instructions)
      U3L19 - variable scope problem 2_instruction: |
        What is happening with foo?
        Play with the level to try to figure it out. (Click to see full instructions)
      U3L19 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer work. (Click to see full instructions)
      U3L19 - write var and string with same name v2_instruction: |
        Fix the code so
        that the values of both variables print to the console. (Click to see full
        instructions)
      U3L19 - write var and string with same name_instruction: |
        Fix the code so that
        the value of both variables prints to the console. (Click to see full instructions)
      U3L2 Using Simple Commands (no tooltips)_instruction: |
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      U3L2 Using Simple Commands_instruction: |
        Draw a 1x1 square above and to the
        left of the turtle's starting position. Click to see full instructions.
      U3L23 Chatbot Conditionals 1_instruction: |
        Add if, else if, and else statements
        to detect the movie genres Comedy, Romance, Action, and Horror. (Click to
        see full instructions)
      U3L23 Chatbot Intro 1a_instruction: |
        Store the user's input inside a variable
        and log it to the console.
      U3L23 Chatbot Intro 2_instruction: |
        Use string concatenation to store the user's
        input and assistant's answer into the conversation variable using the format
        "User: <input><bot name>: <default response>" . Log the conversation to
        the console.
      U3L23 Chatbot Intro 2a_instruction: |
        Display the conversation onto the "text_area"
        element. Optional: clear the user's input after every "change" event.
      U3L23 Chatbot Intro 3_instruction: |
        Add newline characters "\
        " to separate
        the user's input and the computer's response.
      U3L23 Chatbot Intro 4_instruction: |
        Use this level to make your chatbot look
        and work better!
      U3L23 Chatbot Intro_instruction: |
        Choose a specialization topic for your digital
        assistant. Create a basic digital assistant that takes the user's input and
        displays back a default response.
      U3L23 Digital Assistant 1_instruction: |
        Set the text_area element to display
        the user's input from the text_input element.
      U3L23 Digital Assistant 2_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 3_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 4_instruction: |
        Display the user's input and the digital
        assistant's response on different lines.
      U3L23 Digital Assistant 5_instruction: |
        Start the user's command with the
        phrase "User:" and the digital assistant's response with the phrase "Bot:"
      U3L23 Digital Assistant 6_instruction: |
        When the user hits Run, display the
        text "I'm a generic digital assistant. Ask me anything!"
      U3L24 Basic String Parsing 1_instruction: |
        Use the function "userInput.indexOf(<food>)"
        to check if the strings "pizza" or "soup" are anywhere in the user's
        response.
      U3L24 Chatbot Basic Conditionals_instruction: |
        Check out the project description
        for instructions. (Click to see full instructions.)
      U3L24 Chatbot Conditionals 2_instruction: |
        Adjust the "if" block to make
        the bot respond "I don't know that color." if the user types anything besides
        "blue"
      U3L24 Chatbot Conditionals 3_instruction: |
        Adjust the "if/else" block to
        make the bot respond to the colors blue, red, and green, and to two additional
        colors.
      U3L24 Chatbot Keyword Record_instruction: |
        Use the next level to record your
        digital assistant's keywords/phrases.
      U3L24 Chatbot Nested Conditionals_instruction: |
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 introIncludes_instruction: |
        Practice using the includes command. (Click
        to see full instructions)
      U3L24 Nested Conditionals 1_instruction: |
        Change all of the boolean expressions
        to use includes instead of ==. (Click to see full instructions)
      U3L24 Nested Conditionals 2_instruction: "Nest your movie genre if statements\ninside
        the if statements to check for a ? in the input. \n"
      U3L24 Nested Conditionals Bugs 2_instruction: |
        Fix the problem with the code
        so that all the conditions can be reached. (Click to see full instructions)
      U3L24 Nested Conditionals Bugs 3_instruction: |
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs_instruction: |
        Expose the bugs in this problem
        by typing inputs into the user-input box. Track which inputs cause unexpected
        outputs.
      U3L25 - drag out key event_instruction: |
        Set up an event handler to respond
        to keypress events.  Hit keys on the keyboard to see what happens.  (Click
        to see full instructions)
      U3L25 - play sound when up key_instruction: |
        Change the code so the sound will
        only play when the up arrow is pressed. (Click to see full instructions)
      U3L25 Chatbot Strings_instruction: |
        1. Adjust your digital assistant to evaluate
        inputs the same way whether the inputs are capitalized or lowercase. 2. If
        a user asks "What is <phrase>?", where <phrase> is an input your digital
        assistant does not recognize, make your digital assistant respond "I don't
        know what <phrase> is."
      U3L25 String Parsing 1_instruction: |
        Given the string "Wisdom begins with
        wonder." what is the index of the following characters W, t, w, ., d, and
        k? Confirm your expectation using the string.indexOf() function.
      U3L25 String Parsing 2_instruction: |
        Use str.length to find the length of the
        strings “Hello World”, “Computer science rocks!", and “I promise to do my
        homework every day.”
      U3L25 String Parsing 3_instruction: |
        Write a password length checker that writes
        “yes” to the console if a string has a length greater than 10, or “no” if
        it is less than or equal to 10.  Test your function using two strings, one
        that will satisfy each conditional option.
      U3L25 String Parsing 4_instruction: |
        You are given the string "Wisdom begins
        with wonder." Use the string.substring(begin, end) function to print "begin"
        and "nder" to the console.
      U3L25 String Parsing 5_instruction: "Fill in the function, findBeginNder()\nto
        get the strings \"begin\" and \"nder\" from a sentence no matter where\nin
        the sentence they exist.\r\nPrint the strings and their index to the console.\n"
      U3L25 String Parsing 6_instruction: |
        Write a function that takes a name (first
        last) and reorders it (last, first).
      U3L25 String Parsing 7_instruction: |
        You are given the string “The earth has
        music for those who listen.” Manipulate it using the functions str.toUpperCase()
        and str.toLowerCase().
      U3L26 AND operator_instruction: |
        Update the genre and rating if statements
        to only give one movie suggestion at a time. (Click to see full instructions)
      U3L26 Chatbot Compound Conditionals_instruction: |
        Update your digital assistant
        to include at least one each of AND, OR, and NOT
      U3L26 Chatbot Final_instruction: |
        Update your digital assistant to include
        at least one each of AND, OR, and NOT
      U3L26 Compound Logic_instruction: |
        Write a conditional statement that detects
        if a command contains all the phrases "2000" "animated" and "G-rated."
        If all these phrases are detected, make Movie Bot respond "The top grossing
        animated and G-rated film in the 2000 decade was Finding Nemo."
      U3L26 NOT operator_instruction: "Write a conditional statement that detects\nif
        a command does not contain the phrase \"bad.\" If \"bad\" is not detected,\nmake
        Movie Bot respond normally. Otherwise, make Movie Bot respond \"Sorry,\nI
        don't know about bad movies.\" \n"
      U3L26 OR operator_instruction: |
        Update the if statement to use an OR to check
        for a '?' as well as who, what, where, when, why, in the user input. (Click
        to see full instructions)
      U3L27 Chatbot Final_instruction: |
        Make your digital assistant awesome and when
        you are finished, ask one of your classmates to test it for you using the
        activity guide. As you add features to your digital assistant, track them
        on the next level.
      U3L2_Turtle3by3Grid_instruction: |
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      U3L2_TurtleSquare_right_instruction: |
        Draw a square to the front and to the
        right of the starting location. (Click to show full instructions)
      U4L06 Data Storage 1_instruction: "Fill in your name instead of \"Enter Your\nName\",
        run the app and click the button. Run it multiple times with different\nnames!
        Watch the console and use the ‘View Data” button to see how the table\nis
        updated. As you play around make sure you can explain the purpose of each\nof
        the circled parts of the diagram.\r\n\r\n"
      U4L06 Data Storage 2_instruction: "The app is a continuation of the previous\none
        we started. Add a text label to collect the users name and use that as\nthe
        data input for the record.\r\n\r\nRun the app and click the button multiple\ntimes
        and see what happens. Is there a problem you notice? "
      U4L06 Data Storage 3_instruction: |
        We want to improve the user experience.
        Once they have submitted their data for storage, it would be nice to clear
        the textbox.  Update your app to clear the textbox after the data is stored.
      U4L06 Data Storage 4_instruction: |
        Add a label and drop down box, to your app
        and save the data to your JSON object and add it to your table. Make sure
        to reset the dropdown after the data is stored.
      U4L06 Data Storage 5_instruction: "Add a couple radio buttons or checkboxes\nto
        our app. Then find a way to collect the data from those. \n"
      U4L06 Data Storage 6_instruction: " Use one of the getTime() and getUserId()\nblocks
        to collect additional data. \n"
      U4L06 Data Storage 7_instruction: |
        Add a second screen to the sample app we
        have been building to capture an image from a user. Return to screen 1 after
        the JSON object has been stored in the table.
      U4L15 Read Data 1_instruction: |
        Run the level and see what happens. Then edit
        the code to make it print a different column of information.
      U4L15 Read Data 2_instruction: "Student should create a sentence which puts\ntogether
        all the pieces from a record.\r\n\r\n<<Name>> is <<Age>> years old\nand like
        <<Food>>"
      U4L15 Read Data 3_instruction: "Print the sentence using the first JSON object\nin
        the array\r\n\r\n"
      U4L15 Read Data 4_instruction: "\r\nUse a random record from the list of records\nto
        display your sentence."
      Underground Avoiding Lava_instruction: |
        Lava is hiding beneath some of these
        blocks, which you'll need to cover up before moving forward. An "if" command
        will come in handy here. Add a "move forward" command in the correct place
        to mine these blocks.
      Underground If Statements_instruction: |
        Now things are getting tricky. Mine
        3 redstone, but don’t fall in the lava. Use an "If" command to place cobblestone
        over any lava you uncover.
      Underground Iron_instruction: |
        Walking into molten lava is a bad idea. Place
        cobblestone to create a bridge, then mine at least two of the iron blocks.
      Underground Mine in a Circle_instruction: "Find a way to get 5 diamond and\n7
        redstone! Try using a repeat command inside a repeat command to walk in\na
        square.\r\n"
      Underground Mining Coal_instruction: |
        You’ll find the most valuable resources
        underground, but it can get dark. Place at least 2 torches and mine at least
        2 coal.
      Underground Test Level_instruction: Collect all of the minerals!
      Vigenere_instruction: Test
      XML Scratchpad_instruction: Using this test level to grab xml for unit tests
