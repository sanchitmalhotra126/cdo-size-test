# Autogenerated English-language level-definition locale file. Do not edit by hand or commit to version control.
---
en:
  data:
    external:
      Begin planning your project:
        content1: description here
        markdown: |
          # The Design Process

          <iframe src="https://docs.google.com/document/d/e/2PACX-1vS2GtTZLCnFf4QYXEswvBv_XHQBoYbyBDrqABx9FCRpHBndTD0VbpC34HuN56dBgQ6I3tMgKstI3r6G/pub?embedded=true" style="width: 800px; height: 600px"></iframe>
        title: title
      Begin planning your project_2018:
        content1: description here
        markdown: |
          # The Design Process

          <iframe src="https://docs.google.com/document/d/e/2PACX-1vS2GtTZLCnFf4QYXEswvBv_XHQBoYbyBDrqABx9FCRpHBndTD0VbpC34HuN56dBgQ6I3tMgKstI3r6G/pub?embedded=true" style="width: 800px; height: 600px"></iframe>
        title: Begin planning your project
      Begin planning your project_2018_2019:
        content1: description here
        markdown: |
          # The Design Process

          <iframe src="https://docs.google.com/document/d/e/2PACX-1vS2GtTZLCnFf4QYXEswvBv_XHQBoYbyBDrqABx9FCRpHBndTD0VbpC34HuN56dBgQ6I3tMgKstI3r6G/pub?embedded=true" style="width: 800px; height: 600px"></iframe>
        title: Begin planning your project
      BigEvent-Unplugged:
        markdown: |
          # The Big Event

          In computer science, events are actions that a computer monitors. In this lesson react differently depending on which button is pressed.
      BinaryBracelets-Unplugged:
        markdown: |
          # Binary Bracelets

          Create a bracelet that represents your name in a system that computers understand!

          ![](https://images.code.org/ed15a484276c0989e4adb5daf480f68a-image-1557870226222.png)
      BinaryImages-Unplugged:
        markdown: |
          # Binary Images

          Communicate how to recreate an image using just two simple values.
      Building a UI with Design Mode:
        markdown: |
          # Welcome to App Lab Design Mode
          In App Lab "Design Mode" lets you drag and drop User Interface elements into the app.

          ### Vocabulary
          **User Interface (UI)** - The "User Interface" or **UI** of an app refers to how a person (user) interacts with the computer or app.  There are common patterns to user interfaces that you probably know about just from experience:

          * **UI Elements** or objects, like buttons, images, text boxes, pull down menus, screens and so on.
          * **UI Events** or controls, like *click*, *scroll*, *move mouse*, *type keyboard key*, etc.

          App Lab let's you easily add UI Elements to your app, and then add code to respond when a user interacts with those elements.  It's kind of two-step process, but we'll learn all about it in this lesson.

          To start let's just look at Design Mode and add a single UI element (a button) to our app.  We'll add code later on.

          <div style="column-count: 4; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 3; width: 100%">

          <p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;"><span style="font-weight: bold; color: #00adbc; font-size: 200%;">1.</span>
          You'll see a new set of switches above the app area that let you flip back and forth between "Design Mode" and Code Mode".</p>

          <p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;"><span style="font-weight: bold; color: #00adbc; font-size: 200%;">2.</span>Adding an element is as easy as dragging and dropping it into the app where ever you want. Once it's on the app screen you can reposition it, resize it and change lots of other properties about it </p>

          <p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;"><span style="font-weight: bold; color: #00adbc; font-size: 200%;">3.</span>The <em>Properties</em> tab shows you everything you can change about the look and feel of a UI element.</p>

          <p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;"><span style="font-weight: bold; color: #00adbc; font-size: 200%;">4.</span>The <strong>element ID</strong> is important because it's how you refer to the element in your code. We'll discuss element IDs later on.</p>
          </div>

          ![](https://images.code.org/01a31ac3be66deb6d01a92a1edfffd21-image-1476726587662.png)


          <div style="column-count: 2; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 3; width: 66%; float: right">

          <p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;"><span style="font-weight: bold; color: #00adbc; font-size: 200%;">5.</span>You can make the text that the user sees on the button text be whatever you like.</p>

          <p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;"><span style="font-weight: bold; color: #00adbc; font-size: 200%;">6.</span><strong>Note:</strong> Scroll down to see other properties for a UI element might be "hiding" down below.</p>
          </div>

          <div style="clear: both"></div>
          <hr>

          **Now you try!**
      CSD - Getters and Setters:
        markdown: "# Getters and Setters\n\n# Setters\n\nSetters are commands which **set** or change information. Setters all require at least one thing as input : what it wants to change the information to.\n\nYou have used `setScreen()` before.  `setScreen()` changes the screen that the user is viewing. The one input `setScreen()` takes is the new screen to change to.\n\nAnother example of a setter that you will be using is `setText()`.\n\n<img src=\"//curriculum.code.org/images/applab/setText.png\" style=\"margin: 20px auto\">\n\n# Getters\n\nGetters are commands which **get** or retrieve information. Getters often require at least one input: the place you want to retrieve information from.\n\n`getText()` is a common getter you will use. It can be used to get the text from something like a text input. \n\n<img src=\"//curriculum.code.org/images/applab/getText.png\" style=\"margin: 20px auto\">\n\nOften when you use a getter it is a good idea to save the result in a variable so that you can use it throughout your program.\n"
      CSD U1 Lesson 5 Overview:
        markdown: |
          # Overview

          In this lesson you'll learn about the different types of input and output devices used by computers and the types of information they send and receive.

          ## Vocabulary

          * **Input** - A device or component that allows information to be given to a computer
          * **Output** - Any device or component that receives information from a computer


          ## Resources

          * [Input and Output - Activity Guide](https://docs.google.com/document/d/1ObS_kxkXoueaotPYFAEkcCDzn690zumqoLLnrU5kY2Q/export?format=pdf)
      CSD U1 Lesson 6 Overview:
        markdown: |
          # Overview

          In this lesson you'll learn how processing is used by humans and computers to turn inputs into outputs.

          ## Vocabulary

          * **Algorithm** - A precise sequence of instructions for processes that can be executed by a computer

          ## Resources

          * [Card Sorting Algorithm - Activity Guide](https://docs.google.com/document/d/1o4kVRnXnigufkS9WsjHjeD38f8MQrX6qCEFpka-F9Oo/export?format=pdf)
      CSD U1 Lesson 7 Overview:
        markdown: |
          # Overview

          In this lesson you'll learn about the kinds of information computers store and how storage is a critical part of processing information.

          ## Resources

          * [Storage and Processing - Activity Guide](https://docs.google.com/document/d/1I-OzbJizf7m5DK5jfRxDtSYtc_SoSk6vGtSM9tqlGw0/export?format=pdf)
      CSD U1 Lesson 8 Overview:
        markdown: |
          # Overview

          In this lesson you will explore the ways apps process different kinds of information in order to solve problems.

          ## Resources

          * [App Exploration - Activity Guide](https://docs.google.com/document/d/1OW-fkwA7xeNZWiduWescL-6a6zFigtJVP7hfL1oNgVA/export?format=pdf)
      CSD U1 Lesson 9 Overview:
        markdown: |
          # Overview

          For this project you will design your own app that solves a problem that you get to define.

          ## Resources

          * [Apps and Problem Solving - Project Guide](https://docs.google.com/document/d/1S7X-B2V1-WuT7ZLk1LAZRO1O5f4u7pgth4F7G00tGak/export?format=pdf)
          * [Apps and Problem Solving - Peer Review](https://docs.google.com/document/d/13ekhJvtz1vovS6FhGBeDf1mcYFRyJe65bQdi8S8T9lU/export?format=pdf)
          * [Apps and Problem Solving - Rubric](https://docs.google.com/document/d/1ix0LfgiVglwyC5Bb6PBlfBrnbeCOz2wPIPTgXu-qMZE/export?format=pdf)
      CSD U2 Design Project:
        content1: description here
        markdown: |+
          # Start Your Page

          It's time to create your personal web page!  You'll get to choose the content that you will share with the world.

          ## Define

          Your assignment is to make a web page using the HTML you have learned.  The web page should have at least **two headings of different sizes**, and it should **use paragraphs**, too.

          ## Prepare

          Before you start to code your web page, you need to have a plan.  Use the ideas that you wrote down a couple lessons ago, and decide what this page will be about.  You'll have a chance to make other pages later.

          Draw a sketch of your web page, including headings and paragraphs that it includes. Show your sketch to your partner and explain which tags you will use for the different parts of the page.  You can look at the previous levels if you've forgotten what the different tags are, or ask your partner for help.

          If you've sketched something you haven't learned how to code yet, you can save it for later.

          ## Try

          Use the HTML you've learned to create your page.  You can ask a partner to help you if you get stuck, but **you are the driver** for your own web page, meaning you should be typing in all the code yourself.

          ## Reflect

          Once you have finished your web page, compare it to your sketch to make sure you didn't forget anything.  Ask your partner to look, too, and think about any feedback you get and whether you want to make changes to your page.


        title: title
      CSD U2 Design Project_2018:
        content1: description here
        markdown: |+
          # Start Your Page

          It's time to create your personal web page!  You'll get to choose the content that you will share with the world.

          ## Define

          Your assignment is to make a web page using the HTML you have learned.  The web page should have at least **two headings of different sizes**, and it should **use paragraphs**, too.

          ## Prepare

          Before you start to code your web page, you need to have a plan.  Use the ideas that you wrote down a couple lessons ago, and decide what this page will be about.  You'll have a chance to make other pages later.

          Draw a sketch of your web page, including headings and paragraphs that it includes. Show your sketch to your partner and explain which tags you will use for the different parts of the page.  You can look at the previous levels if you've forgotten what the different tags are, or ask your partner for help.

          If you've sketched something you haven't learned how to code yet, you can save it for later.

          ## Try

          Use the HTML you've learned to create your page.  You can ask a partner to help you if you get stuck, but **you are the driver** for your own web page, meaning you should be typing in all the code yourself.

          ## Reflect

          Once you have finished your web page, compare it to your sketch to make sure you didn't forget anything.  Ask your partner to look, too, and think about any feedback you get and whether you want to make changes to your page.


        title: title
      CSD U2 Design Project_2018_2019:
        content1: description here
        markdown: |+
          # Start Your Page

          It's time to create your personal web page!  You'll get to choose the content that you will share with the world.

          ## Define

          Your assignment is to make a web page using the HTML you have learned.  The web page should have at least **two headings of different sizes**, and it should **use paragraphs**, too.

          ## Prepare

          Before you start to code your web page, you need to have a plan.  Use the ideas that you wrote down a couple lessons ago, and decide what this page will be about.  You'll have a chance to make other pages later.

          Draw a sketch of your web page, including headings and paragraphs that it includes. Show your sketch to your partner and explain which tags you will use for the different parts of the page.  You can look at the previous levels if you've forgotten what the different tags are, or ask your partner for help.

          If you've sketched something you haven't learned how to code yet, you can save it for later.

          ## Try

          Use the HTML you've learned to create your page.  You can ask a partner to help you if you get stuck, but **you are the driver** for your own web page, meaning you should be typing in all the code yourself.

          ## Reflect

          Once you have finished your web page, compare it to your sketch to make sure you didn't forget anything.  Ask your partner to look, too, and think about any feedback you get and whether you want to make changes to your page.


        title: title
      CSD U2 Expression Exemplars:
        markdown: |
          # Personal Website Exemplars

          Click the websites below to check out personal websites other students have made.

          <a href="https://codeprojects.org/SYRw7CQJzSmAErCEF-mMXQ" target="_blank"><img src="https://images.code.org/25b7284a4cd3d26f9b989a5c3bba6485-image-1493760609250.29.54 PM.png" style="width:200px;float:left"></a>

          <a href="https://codeprojects.org/y6u1W372PZh2MfzxwHQBKA" target="_blank"><img src="https://images.code.org/5929f61d14370a72e2e3b77c1948d5ed-image-1493943243592.13.32 PM.png" style="width:200px;float:left"></a>
      CSD U2 Expression Exemplars_2018:
        markdown: |
          # Personal Website Exemplars

          Click the websites below to check out personal websites other students have made.

          <a href="https://codeprojects.org/SYRw7CQJzSmAErCEF-mMXQ" target="_blank"><img src="https://images.code.org/25b7284a4cd3d26f9b989a5c3bba6485-image-1493760609250.29.54 PM.png" style="width:200px;float:left"></a>

          <a href="https://codeprojects.org/y6u1W372PZh2MfzxwHQBKA" target="_blank"><img src="https://images.code.org/5929f61d14370a72e2e3b77c1948d5ed-image-1493943243592.13.32 PM.png" style="width:200px;float:left"></a>
      CSD U2 Expression Exemplars_2018_2019:
        markdown: |
          # Personal Website Exemplars

          Click the websites below to check out personal websites other students have made.

          <a href="https://codeprojects.org/SYRw7CQJzSmAErCEF-mMXQ" target="_blank"><img src="https://images.code.org/25b7284a4cd3d26f9b989a5c3bba6485-image-1493760609250.29.54 PM.png" style="width:200px;float:left"></a>

          <a href="https://codeprojects.org/y6u1W372PZh2MfzxwHQBKA" target="_blank"><img src="https://images.code.org/5929f61d14370a72e2e3b77c1948d5ed-image-1493943243592.13.32 PM.png" style="width:200px;float:left"></a>
      CSD U2 L1 Overview:
        content1: description here
        markdown: |
          # Overview

          This lesson covers the purposes that a website might serve, both for the users and the creators. The class explores a handful of the most-used websites in the United States and discusses how each of those sites is useful for users and how it might also serve its creators.
          ## Vocabulary

          * **Website** - A location connected to the Internet that maintains one or more pages on the World Wide Web.


          ## Resources

          * [The Purpose of Websites - Activity Guide](https://docs.google.com/document/d/16M-x8qNr0tdpfoHqyKo4sdbTzFOy5rKp8IBYmTQ7xkU/export?format=pdf)
        title: title
      CSD U2 L12 Overview:
        markdown: |
          # Overview

          After first completing a web search scavenger hunt, the class learns about the inner workings of search engines and has an opportunity to flex their analytical skills in a search for strange and unlikely animals.
          ## Vocabulary

          * **Algorithm** - A precise sequence of instructions for processes that can be executed by a computer
          * **Relevant** - closely connected or appropriate to the matter at hand.
          * **Search Engine** - A program that searches for and identifies items in a database that correspond to keywords or characters specified by the user, used especially for finding particular sites on the World Wide Web.
          * **Trustworthy** - able to be relied on as honest or truthful.


          ## Resources

          * [Internet Scavenger Hunt - Activity Guide](https://docs.google.com/document/d/14sOf5YZ5iTvB0jzlm7X-18HE6S_KEG3IcrsFHN7OeCk/export?format=pdf)
          * [Strange Yet True Animals - Activity Guide](https://docs.google.com/document/d/1t7gmFWj0fneGzJbPRHk0eq3hz-kRQ_xwnVbKwdL3tEw/export?format=pdf)
      CSD U2 L2 Overview:
        content1: description here
        markdown: "# Overview\n\nThis lesson introduces websites as a means of personal expression.  The class first discusses different ways that people express and share their interests and ideas, then looks at a few exemplar websites made by students from a previous course. Finally everyone brainstorms and shares a list of topics and interests to include, creating a resource for developing a personal website in the rest of the unit. \n## Vocabulary\n\n* **Website Content** - The raw text, images, and other elements included in a web page\n\n\n## Resources\n\n* [Personal Website Sketch - Activity Guide](https://docs.google.com/document/d/1wnK0ntxFWvUyuEB6SksiTtUDqrEhZZn3VPLWynz-fV4/export?format=pdf)\n"
        title: title
      CSD U2 L3 Overview:
        content1: description here
        markdown: |
          # Overview

          This lesson introduces to HTML as a solution to the problem of how to communicate both the content and structure of a website to a computer. The lesson begins with a brief unplugged activity demonstrating the challenges of effectively communicating the structure of a web page. The class looks at an HTML page in Web Lab and discusses how HTML tags help solve this problem, then uses HTML to write the first web pages of the unit.
          ## Vocabulary

          * **HTML** - Hypertext Markup Language, a language used to create web pages
          * **HTML Element** - A piece of a website, marked by a start tag and sometimes closed with an end tag
          * **HTML Tag** - The special set of characters that indicates the start and end of an HTML element and that element's type
          * **Website Content** - The raw text, images, and other elements included in a web page
          * **Website Structure** - The purpose of different pieces of content in a web page, used to help the computer determine how that content should be displayed

          ## Introduced Code

          * **[HTML](//docs.code.org/weblab/html/)** - `<html></html>`
          * **[Doctype](//docs.code.org/weblab/doctype/)** - `<!DOCTYPE>`
          * **[Paragraph](//docs.code.org/weblab/P/)** - `<p></p>`
          * **[Body](//docs.code.org/weblab/body/)** - `<body></body>`
          * **[Head](//docs.code.org/weblab/head/)** - `<head></head>`
        title: title
      CSD U2 L4 Overview:
        content1: description here
        markdown: |+
          # Overview

          This lesson continues the introduction to HTML tags, this time with headings.  The class practices using heading tags to create page and section titles and learns how the different heading elements are displayed by default.  Next, the class plans how to organize content on the personal web pages that will be built across the unit and begins the first page of the project.
          ## Vocabulary

          * **Heading** - A title or summary for a document or section of a document.

          ## Introduced Code

          *  **[Heading](//docs.code.org/weblab/h/)** - `<h1></h1>`

        title: title
      CSD U2 L5 Overview:
        content1: description here
        markdown: |
          # Overview

          This lesson takes a step back from creating the personal website to talk about personal information people choose to share digitally.  The class begins by discussing what types of information are good to share with other people, then looks at several sample social media pages to see what types of personal information could be shared intentionally or unintentionally.  Finally, the class comes up with a set of guidelines to follow when putting information online.
          ## Vocabulary

          * **Digital Footprint** - The collected information about an individual across multiple websites on the Internet.


          ## Resources

          * [When Does Your Privacy Matter? - Activity Guide](https://docs.google.com/document/d/1SmCceDGntI-rJI40dTR7rA0Tfa0cH1OQoRNNxPEmXG0/export?format=pdf)
          * [Social Sleuth - Activity Guide](https://docs.google.com/document/d/1A9q31rwrBA7tZZcZ3KZqjMb30UncM-eycwMvYgj9os4/export?format=pdf)
        title: title
      CSD U2 L6 Overview:
        content1: description here
        markdown: |+
          # Overview

          This lesson introduces ordered and unordered lists and the associated  &lt;ul&gt;, &lt;ol&gt;, and &lt;li&gt; HTML tags.  The class practices using the tags, then goes back to the personal web page project to add a new HTML page that includes the new tags.

          ## Introduced Code


          *  **[Unordered List](//docs.code.org/weblab/ul/)** - `<ul></ul>`
          *  **[List Item](//docs.code.org/weblab/li/)** - `<li></li>`
          *  **[Ordered List](//docs.code.org/weblab/ol/)** - `<ol></ol>`

        title: title
      CSD U2 L7 Overview:
        markdown: |
          # Overview

          This lesson covers how to use content created by others on a website while respecting the rights of the original creator of that content. After first studying Creative Commons licensing, the class learns how to add images to web pages and give proper attribution when doing so.

          ## Vocabulary

          * **Citation** - A quotation from or reference to a book, paper, or author, especially in a scholarly work.
          * **Copyright** - the exclusive legal right, given to an originator or an assignee to print, publish, perform, film, or record literary, artistic, or musical material, and to authorize others to do the same.
          * **Creative Commons** - A public copyright licenses that enable the free distribution of an otherwise copyrighted work. A CC license is used when an author wants to give people the right to share, use, and build upon a work that they have created.
          * **Intellectual Property** - A work or invention that is the result of creativity, such as a manuscript or a design, to which one has rights and for which one may apply for a patent, copyright, trademark, etc.

          ## Introduced Code

          *  **[Image](//docs.code.org/weblab/img/)** - `<img />`

          ## Resources

          * [Creative Commons Overview](https://www.youtube.com/watch?v=HKfqoPYJdVc) - Video
          * [Licensing Your Work - Activity Guide](https://docs.google.com/document/d/1twenNK2xrjc4bhIXuKfMXFA2yocLsR7MK8ZPvi-HckI/export?format=pdf)
      CSD U2 Lesson 6 Overview:
        content1: description here
        markdown: |
          # Overview

          In this lesson covers common issues that arise when designing web pages in HTML. The class will correct errors in a sequence of increasingly complex web pages found on Code Studio and learn the importance of comments, whitespace, and indentation as tools for making web pages easier to read.
          ## Vocabulary

          * **Bug** - Part of a program that does not work correctly.
          * **Comment** - A comment is a programmer-readable note in the source code of a computer program.
          * **Debugging** - Finding and fixing problems in your algorithm or program.
          * **Indentation** - The placement of text farther to the right, or left, to separate it from surrounding text which helps to convey the program's structure.
          * **Whitespace** - Whitespace refers to any character that shows up as a blank space on the screen, such as a space, a tab, or a new line. Whitespace helps separate different parts of the document to make it easier to read.

          ## Introduced Code

          *  **[Comment](//curriculum.code.org/documentation/weblab/comment/)** - `<!-- -->`
      CSD U2 Lesson 9 Overview:
        markdown: "# Overview\n\nThis lesson covers hyperlinks, which allow web developers to connect pages together into one website.  The class will link together all the previous pages into one project, and create navigation bars for each page before publishing the entire site to the Web.  \n## Vocabulary\n\n* **Hyperlink** - A link from a HTML file to another location or file, typically activated by clicking on a highlighted word or image on the screen.\n\n## Introduced Code\n\n*  **[Hyperlink](//docs.code.org/weblab/A/)** - `<a></a>`\n\n## Resources\n\n* [Personal Website - Project Guide](https://docs.google.com/document/d/1sPdFBq1nrwG9742tu3sXQ93xWbCWmNdCgo0dv3eYfXY/export?format=pdf)\n* [Personal Website - Peer Review](https://docs.google.com/document/d/1B5QXF0ASAy3vHcFQilQo3Q3J3GiiuQxBxnZFg8WDYaw/export?format=pdf)\n* [Personal Web Site - Rubric](https://docs.google.com/document/d/16ddR5r96qvv_Ti5gWN-AcjvCx0-SP6B7shSp-caKuDI/export?format=pdf)\n"
      CSD U2 PSP Programming:
        markdown: |+
          # The Problem Solving Process for Programming

          ## Define
          <img src="https://images.code.org/4684a4cd531d3750d2a11051f6e0729f-image-1493396308445.png" style="float:right; width: 250px;">

          * Read the instructions carefully to ensure you understand the goals
          * Rephrase the problem in your own words
          * Identify any new skills you are being asked to apply
          * Look for other problems you've solved that are similar to this one
          * If there is starter code, read it to understand what it does

          ## Prepare
          * Write out an idea in plain English or pseudocode
          * Sketch out your idea on paper
          * List what you already know how to do and what you don't yet
          * Describe your idea to a classmate
          * Review similar programs that you've written in the past

          ## Try
          * Write one small piece at a time
          * Test your program often
          * Use comments to document what your code does
          * Apply appropriate debugging strategies
          * Go back to previous steps if you get stuck or don't know whether you've solved the problem

          ## Reflect
          * Compare your finished program to the defined problem to make sure you've solved all aspects of the problem
          * Ask a classmate to try your program and note places where they struggle or exhibit confusion
          * Ask a classmate to read your code to make sure that your documentation is clear and accurate
          * Try to "break" your program to find types of interactions or input that you could handle better
          * Identify a few incremental changes that you could make in the next iteration


      CSD U2 PSP Programming_2018:
        markdown: |+
          # The Problem Solving Process for Programming

          ## Define
          <img src="https://images.code.org/4684a4cd531d3750d2a11051f6e0729f-image-1493396308445.png" style="float:right; width: 250px;">

          * Read the instructions carefully to ensure you understand the goals
          * Rephrase the problem in your own words
          * Identify any new skills you are being asked to apply
          * Look for other problems you've solved that are similar to this one
          * If there is starter code, read it to understand what it does

          ## Prepare
          * Write out an idea in plain English or pseudocode
          * Sketch out your idea on paper
          * List what you already know how to do and what you don't yet
          * Describe your idea to a classmate
          * Review similar programs that you've written in the past

          ## Try
          * Write one small piece at a time
          * Test your program often
          * Use comments to document what your code does
          * Apply appropriate debugging strategies
          * Go back to previous steps if you get stuck or don't know whether you've solved the problem

          ## Reflect
          * Compare your finished program to the defined problem to make sure you've solved all aspects of the problem
          * Ask a classmate to try your program and note places where they struggle or exhibit confusion
          * Ask a classmate to read your code to make sure that your documentation is clear and accurate
          * Try to "break" your program to find types of interactions or input that you could handle better
          * Identify a few incremental changes that you could make in the next iteration


      CSD U2 PSP Programming_2018_2019:
        markdown: |+
          # The Problem Solving Process for Programming

          ## Define
          <img src="https://images.code.org/4684a4cd531d3750d2a11051f6e0729f-image-1493396308445.png" style="float:right; width: 250px;">

          * Read the instructions carefully to ensure you understand the goals
          * Rephrase the problem in your own words
          * Identify any new skills you are being asked to apply
          * Look for other problems you've solved that are similar to this one
          * If there is starter code, read it to understand what it does

          ## Prepare
          * Write out an idea in plain English or pseudocode
          * Sketch out your idea on paper
          * List what you already know how to do and what you don't yet
          * Describe your idea to a classmate
          * Review similar programs that you've written in the past

          ## Try
          * Write one small piece at a time
          * Test your program often
          * Use comments to document what your code does
          * Apply appropriate debugging strategies
          * Go back to previous steps if you get stuck or don't know whether you've solved the problem

          ## Reflect
          * Compare your finished program to the defined problem to make sure you've solved all aspects of the problem
          * Ask a classmate to try your program and note places where they struggle or exhibit confusion
          * Ask a classmate to read your code to make sure that your documentation is clear and accurate
          * Try to "break" your program to find types of interactions or input that you could handle better
          * Identify a few incremental changes that you could make in the next iteration


      CSD U2 Top Websites:
        markdown: |
          # Top Websites in the US

          The following are the most frequently visited websites in the United States. Each includes a brief description of the website's core function.


          1. Google.com - Search engine for websites, pictures, videos, and other media
          2. Youtube.com - User-submitted video site with ratings and comments
          3. Facebook.com - Social media community that allows users to share information with friends
          4. Amazon.com - Online shopping sites for all kinds of goods
          4. Yahoo.com - A search engine, email provider, and news source
          5. Wikipedia.org - A free encyclopedia with content generated by users
      CSD U2 Top Websites_2018:
        markdown: |
          # Top Websites in the US

          The following are some of the most frequently visited websites in the United States. Each includes a brief description of the website's core function.


          * Google.com - Search engine for websites, pictures, videos, and other media
          * Youtube.com - User-submitted video site with ratings and comments
          * Facebook.com - Social media community that allows users to share information with friends
          * Amazon.com - Online shopping sites for all kinds of goods
          * Yahoo.com - A search engine, email provider, and news source
          * Wikipedia.org - A free encyclopedia with content generated by users
      CSD U2 Top Websites_2018_2019:
        markdown: |
          # Top Websites in the US

          The following are some of the most frequently visited websites in the United States. Each includes a brief description of the website's core function.


          * Google.com - Search engine for websites, pictures, videos, and other media
          * Youtube.com - User-submitted video site with ratings and comments
          * Facebook.com - Social media community that allows users to share information with friends
          * Amazon.com - Online shopping sites for all kinds of goods
          * Yahoo.com - A search engine, email provider, and news source
          * Wikipedia.org - A free encyclopedia with content generated by users
      CSD U2 expand project:
        content1: description here
        markdown: |
          # Expanding Your Website

          In the next level, you'll be expanding your website by adding a second page.  You will discuss your plan with your partner, but you'll be working on your own site.

          You'll need to do three things in the next level.

          1. Create a new page.
          2. Name the new page.
          3. Put content on the new page.

          The new page you add should include:

          * at least one list
          * at least one heading

          Before you start coding, you should have a plan for what you want the website to be about.  Here are some ideas. You can click on each page to see a full size version.

          | Recipe |  Fun Fact List | How to Guide |
          |---------|--------------|--------------|
          | [![](https://images.code.org/fbfd4e89f4b1514845c203550c59bbd1-image-1493419989564.48.07 PM.png)](https://codeprojects.org/rAljwuo4xh2h0bSjxqVdtw/recipe.html) |[![](https://images.code.org/8780832b11e2149848bf944acaf0cd6a-image-1493419989562.47.46 PM.png)](https://codeprojects.org/rAljwuo4xh2h0bSjxqVdtw/candy.html) | [![](https://images.code.org/9cff12744e7036498821e7d59b21f2ba-image-1493419989560.29.25 PM.png)](https://codeprojects.org/rAljwuo4xh2h0bSjxqVdtw/juggle.html) |
        title: title
      CSD U2 expand project_2018:
        content1: description here
        markdown: |
          # Expanding Your Website

          In the next level, you'll be expanding your website by adding a second page.  You will discuss your plan with your partner, but you'll be working on your own site.

          You'll need to do three things in the next level.

          1. Create a new page.
          2. Name the new page.
          3. Put content on the new page.

          The new page you add should include:

          * at least one list
          * at least one heading

          Before you start coding, you should have a plan for what you want the website to be about.  Here are some ideas. You can click on each page to see a full size version.

          | Recipe |  Fun Fact List | How to Guide |
          |---------|--------------|--------------|
          | [![](https://images.code.org/fbfd4e89f4b1514845c203550c59bbd1-image-1493419989564.48.07 PM.png)](https://codeprojects.org/rAljwuo4xh2h0bSjxqVdtw/recipe.html) |[![](https://images.code.org/8780832b11e2149848bf944acaf0cd6a-image-1493419989562.47.46 PM.png)](https://codeprojects.org/rAljwuo4xh2h0bSjxqVdtw/candy.html) | [![](https://images.code.org/9cff12744e7036498821e7d59b21f2ba-image-1493419989560.29.25 PM.png)](https://codeprojects.org/rAljwuo4xh2h0bSjxqVdtw/juggle.html) |
        title: title
      CSD U2 expand project_2018_2019:
        content1: description here
        markdown: |
          # Expanding Your Website

          In the next level, you'll be expanding your website by adding a second page.  You will discuss your plan with your partner, but you'll be working on your own site.

          You'll need to do three things in the next level.

          1. Create a new page.
          2. Name the new page.
          3. Put content on the new page.

          The new page you add should include:

          * at least one list
          * at least one heading

          Before you start coding, you should have a plan for what you want the website to be about.  Here are some ideas. You can click on each page to see a full size version.

          | Recipe |  Fun Fact List | How to Guide |
          |---------|--------------|--------------|
          | [![](https://images.code.org/fbfd4e89f4b1514845c203550c59bbd1-image-1493419989564.48.07 PM.png)](https://codeprojects.org/rAljwuo4xh2h0bSjxqVdtw/recipe.html) |[![](https://images.code.org/8780832b11e2149848bf944acaf0cd6a-image-1493419989562.47.46 PM.png)](https://codeprojects.org/rAljwuo4xh2h0bSjxqVdtw/candy.html) | [![](https://images.code.org/9cff12744e7036498821e7d59b21f2ba-image-1493419989560.29.25 PM.png)](https://codeprojects.org/rAljwuo4xh2h0bSjxqVdtw/juggle.html) |
        title: title
      CSD U2 project guide:
        content1: description here
        markdown: |
          # Your Personal Website

          In the next few levels, you'll be completing and publishing your personal website.

          You've already done a lot of work on your website, but this is your chance to get creative and add a new page of something that you care about.

          Here are some ideas for your new page, but you can do anything approved by your teacher.

          * A movie, television, or book review
          * Description of a favorite holiday tradition
          * A "cause" page that explains an issue that is important to you

          If you have more than one idea, you can add multiple pages to your site.

          Your Project Guide will help you remember everything you need to do.  Make sure you have your teacher's approval before moving to the next level.

          ## Examples

          [![](https://images.code.org/77ab5eb6cbec8541f8ec83134fbb2e2d-image-1494627985387.24.43 PM.png)](https://codeprojects.org/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[![](https://images.code.org/2e39e80cb5227d908426184019fd6b70-image-1494631930884.23.49 PM.png)](https://codeprojects.org/OhiVQD7XXnijdjNp2yFaIB5fyNDwsp9ymYo7gvEy8qg/)
        title: Your Personal Website
      CSD U2 project guide_2018:
        content1: description here
        markdown: |
          # Your Personal Website

          In the next few levels, you'll be completing and publishing your personal website.

          You've already done a lot of work on your website, but this is your chance to get creative and add a new page of something that you care about.

          Here are some ideas for your new page, but you can do anything approved by your teacher.

          * A movie, television, or book review
          * Description of a favorite holiday tradition
          * A "cause" page that explains an issue that is important to you

          If you have more than one idea, you can add multiple pages to your site.

          Your Project Guide will help you remember everything you need to do.  Make sure you have your teacher's approval before moving to the next level.

          ## Examples

          [![](https://images.code.org/77ab5eb6cbec8541f8ec83134fbb2e2d-image-1494627985387.24.43 PM.png)](https://codeprojects.org/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[![](https://images.code.org/2e39e80cb5227d908426184019fd6b70-image-1494631930884.23.49 PM.png)](https://codeprojects.org/OhiVQD7XXnijdjNp2yFaIB5fyNDwsp9ymYo7gvEy8qg/)
        title: Your Personal Website
      CSD U2 project guide_2018_2019:
        content1: description here
        markdown: |
          # Your Personal Website

          In the next few levels, you'll be completing and publishing your personal website.

          You've already done a lot of work on your website, but this is your chance to get creative and add a new page of something that you care about.

          Here are some ideas for your new page, but you can do anything approved by your teacher.

          * A movie, television, or book review
          * Description of a favorite holiday tradition
          * A "cause" page that explains an issue that is important to you

          If you have more than one idea, you can add multiple pages to your site.

          Your Project Guide will help you remember everything you need to do.  Make sure you have your teacher's approval before moving to the next level.

          ## Examples

          [![](https://images.code.org/77ab5eb6cbec8541f8ec83134fbb2e2d-image-1494627985387.24.43 PM.png)](https://codeprojects.org/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[![](https://images.code.org/2e39e80cb5227d908426184019fd6b70-image-1494631930884.23.49 PM.png)](https://codeprojects.org/OhiVQD7XXnijdjNp2yFaIB5fyNDwsp9ymYo7gvEy8qg/)
        title: Your Personal Website
      CSD U3 AnimationsMulti STOP project guide:
        markdown: |
          # Stop

          Before you move on you'll need to look at the Project Guide for this project. Wait for instructions from your teacher as well.
      CSD U3 AnimationsMulti STOP project guide_2018:
        markdown: |
          # Stop

          Before you move on you'll need to look at the Project Guide for this project. Wait for instructions from your teacher as well.
      CSD U3 AnimationsMulti STOP project guide_2018_2019:
        markdown: |
          # Stop

          Before you move on you'll need to look at the Project Guide for this project. Wait for instructions from your teacher as well.
      CSD U3 Card Examples_2018:
        content1: description here
        markdown: |
          # Your Interactive Card

          In the next few levels, you'll be completing your own interactive card.  Here are some examples to give you some ideas.  Don't forget to look at the code to see how they work.

          ## Examples

          [![](https://images.code.org/7bbdbbb01c354a7c09bb4b9b5182a951-image-1522780803299.png)](https://studio.code.org/projects/gamelab/OzdFqrZ4oHPYsTddaRWaZxtTvdj9NzZVwCq6NkyONXM/edit)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[![](https://images.code.org/ed307e22854e4958a006d8023636cfd5-image-1522780803295.png)](https://studio.code.org/projects/gamelab/fmFrWsocELzP19CfbGI5P_hsgxN5ewVaB5f0Bw5S1_E/edit)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[![](https://images.code.org/ae0eca1dab46f13fcb21d4d0e264d637-image-1522780803298.png)](https://studio.code.org/projects/gamelab/z4XDrC0lsqoRY0xzYaXdJfChmyCl5O6YM-EOByecscc/edit)
        title: Making an Interactive Card
      CSD U3 Card Examples_2018_2019:
        content1: description here
        markdown: |
          # Your Interactive Card

          In the next few levels, you'll be completing your own interactive card.  Here are some examples to give you some ideas.  Don't forget to look at the code to see how they work.

          ## Examples

          [![](https://images.code.org/7bbdbbb01c354a7c09bb4b9b5182a951-image-1522780803299.png)](https://studio.code.org/projects/gamelab/OzdFqrZ4oHPYsTddaRWaZxtTvdj9NzZVwCq6NkyONXM/edit)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[![](https://images.code.org/ed307e22854e4958a006d8023636cfd5-image-1522780803295.png)](https://studio.code.org/projects/gamelab/fmFrWsocELzP19CfbGI5P_hsgxN5ewVaB5f0Bw5S1_E/edit)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[![](https://images.code.org/ae0eca1dab46f13fcb21d4d0e264d637-image-1522780803298.png)](https://studio.code.org/projects/gamelab/z4XDrC0lsqoRY0xzYaXdJfChmyCl5O6YM-EOByecscc/edit)
        title: Making an Interactive Card
      CSD U3 Collision Detection:
        markdown: |
          # Overview

          The class learns about collision detection on the computer.  Pairs explore how a computer could use sprite location and size properties and math to detect whether two sprites are touching.  The class then uses the isTouching() block to create different effects when sprites collide, including playing sounds.  Last, they use their new skills to improve the sidescroller game that they started in the last lesson.
          ## Vocabulary

          * **Abstraction** - Pulling out specific differences to make one solution work for multiple problems.
          * **Debugging** - Finding and fixing problems in your algorithm or program.
          * **If-Statement** - The common programming structure that implements "conditional statements".

          ## Introduced Code

          * [sprite.debug](//docs.code.org/gamelab/debug/)
          * [sprite.isTouching()](//docs.code.org/gamelab/isTouching/)

          ## Resources

          * [Collision Detection - Activity Guide](https://docs.google.com/document/d/16uOeOnjKEIQfWgHFjMyVkmurSVM1oDXjQPooSL7UlHs/export?format=pdf)
      CSD U3 Collisions SFLP:
        markdown: |+
          # Overview

          The class programs their sprites to interact in new ways.  After a brief review of how they used the isTouching block, the class brainstorms other ways that two sprites could interact.  They then use isTouching to make one sprite push another across the screen before practicing with the four collision blocks (collide, displace, bounce, and bounceOff).
          ## Vocabulary

          * **Abstraction** - Pulling out specific differences to make one solution work for multiple problems.

          ## Introduced Code

          * [sprite.bounceOff()](//docs.code.org/gamelab/bounceOff/)
          * [sprite.collide()](//docs.code.org/gamelab/collide/)
          * [sprite.displace()](//docs.code.org/gamelab/displace/)
          * [sprite.setCollider()](//docs.code.org/gamelab/setCollider/)
          * [sprite.bounce()](//docs.code.org/gamelab/bounce/)
          * [sprite.bounciness](//docs.code.org/gamelab/bounciness/)

      CSD U3 Defender SFLP:
        markdown: |
          # Overview

          This lesson introduces the process the class will use to design games for the remainder of the unit. The class walks through through this process in a series of levels. As part of this lesson the class also briefly learn to use multi-frame animations in Game Lab. At the end of the lesson they have an opportunity to make improvements to the game to make it their own.


          ## Resources

          * [Project Guide - Defender Game - Project Guide](https://docs.google.com/document/d/10tgS4d9feduPveRZSMzWV0TdyL6AL5VHHGFy_-m2XNQ/export?format=pdf)
      CSD U3 Entertainment:
        markdown: |+
          # Starting Your Search

          To find out more about how computer science and programming play a role in entertainment, you'll need to do some research. Try searching for "Computer science and &#95;&#95;&#95;&#95;&#95;&#95;" and trying out different types of entertainment such as film, television, music, games, animation, fashion, etc.


      CSD U3 Entertainment_2018:
        markdown: |+
          # Starting Your Search

          To find out more about how computer science and programming play a role in entertainment, you'll need to do some research. Try searching for "Computer science and &#95;&#95;&#95;&#95;&#95;&#95;" and trying out different types of entertainment such as film, television, music, games, animation, fashion, etc.


      CSD U3 Entertainment_2018_2019:
        markdown: |+
          # Starting Your Search

          To find out more about how computer science and programming play a role in entertainment, you'll need to do some research. Try searching for "Computer science and &#95;&#95;&#95;&#95;&#95;&#95;" and trying out different types of entertainment such as film, television, music, games, animation, fashion, etc.


      CSD U3 Functions SFLP:
        markdown: |+
          # Overview

          This lesson covers functions as a way to organize their code, make it more readable, and remove repeated blocks of code. The class learns that higher level or more abstract steps make it easier to understand and reason about steps, then begins to create functions in Game Lab.  At the end of the lesson the class uses these skills to organize and add functionality to the final version of their side scroller game.
          ## Vocabulary

          * **Function** - A piece of code that you can easily call over and over again.

          ## Introduced Code

          * [Define a function](//docs.code.org/gamelab/functionParams_none/)
          * [Call a function](//docs.code.org/gamelab/callMyFunction/)

      CSD U3 Lesson Overview 1:
        markdown: |
          # Overview

          The class is asked to consider the "problems" of boredom and self expression, and to reflect on how they approach those problems in their own lives. From there, they will explore how Computer Science in general, and programming specifically, plays a role in either a specific form of entertainment or as a vehicle for self expression.


          ## Resources

          * [CS in Entertainment - Activity Guide](https://docs.google.com/document/d/1RtwJU7Lh2dKdGoj-zfF1pjn-yxhkwP-05G8pgdYi-BY/export?format=pdf)
      CSD U3 Lesson Overview 10:
        markdown: |
          # Overview

          This lesson introduces boolean values and logic, as well as conditional statements. The class starts by playing a simple game of Stand Up, Sit Down in which the boolean (true/false) statements describe personal properties (hair or eye color, clothing type, age, etc). The class then groups objects based on increasingly complex boolean statements, then looks at how conditionals can impact the flow of a program.
          ## Vocabulary

          * **Boolean** - A single value of either TRUE or FALSE
          * **Conditionals** - Statements that only run under certain conditions.
          * **Expression** - Any valid unit of code that resolves to a value.


          ## Resources

          * [Boolean Properties - Activity Guide](https://docs.google.com/document/d/1kRNIUD5Z3r7HK9twMPMnenyEFPh9ouMsJKIb4T0-6so/export?format=pdf)
      CSD U3 Lesson Overview 11:
        markdown: "# Overview\n\nThe class starts by using booleans to compare the current value of a sprite property with a target value, using that comparison to determine when a sprite has reached a point on the screen, grown to a given size, or otherwise reached a value using the counter pattern. After using booleans directly to investigate the values or sprite properties, the class adds conditional if statements to write code that responds to those boolean comparisons.\n## Vocabulary\n\n* **Boolean Expression** - in programming, an expression that evaluates to True or False. \n* **If-Statement** - The common programming structure that implements \"conditional statements\".\n\n## Introduced Code\n\n* [If statement](//docs.code.org/gamelab/ifBlock/)\n* [Less than operator](//docs.code.org/gamelab/lessThanOperator/)\n* [Inequality operator](//docs.code.org/gamelab/inequalityOperator/)\n* [Less than or equal operator](//docs.code.org/gamelab/lessThanOrEqualOperator/)\n* [Greater than operator](//docs.code.org/gamelab/greaterThanOperator/)\n* [Equality operator](//docs.code.org/gamelab/equalityOperator/)\n* [Greater than or equal operator](//docs.code.org/gamelab/greaterThanOrEqualOperator/)\n"
      CSD U3 Lesson Overview 12:
        markdown: |
          # Overview

          Following the introduction to booleans and if statements in the previous lesson, students are introduced to a new block called keyDown() which returns a boolean and can be used in conditionals statements to move sprites around the screen. By the end of this lesson students will have written programs that take keyboard input from the user to control sprites on the screen.

          ## Introduced Code

          * [keyDown()](//docs.code.org/gamelab/keyDown/)

          ## Resources

          * [Boolean Expressions](https://youtu.be/y3rCKJNOwpA) - Video ([download](https://videos.code.org/2015/csp/applab/conditionals_1.mp4))
      CSD U3 Lesson Overview 13:
        markdown: |+
          # Overview

          The class continues to explore ways to use conditional statements to take user input. In addition to the simple keyDown() command learned yesterday, the class learns about several other keyboard input commands as well as ways to take mouse input.
          ## Vocabulary

          * **Conditionals** - Statements that only run under certain conditions.

          ## Introduced Code

          * [keyWentUp()](//docs.code.org/gamelab/keyWentUp/)
          * [mouseWentDown()](//docs.code.org/gamelab/mouseWentDown/)
          * [mouseWentUp()](//docs.code.org/gamelab/mouseWentUp/)
          * [keyWentDown()](//docs.code.org/gamelab/keyWentDown/)
          * [mouseDown()](//docs.code.org/gamelab/mouseDown/)
          * [mouseDidMove()](//docs.code.org/gamelab/mouseDidMove/)
          * [sprite.visible](//docs.code.org/gamelab/visible/)
          * [If/else statement](//docs.code.org/gamelab/ifElseBlock/)

      CSD U3 Lesson Overview 14:
        markdown: |
          # Overview

          In this cumulative project for Chapter 1, the class plans for and develops an interactive greeting card using all of the programming techniques they've learned to this point.


          ## Resources

          * [Interactive Card - Project Guide](https://docs.google.com/document/d/1PtGpvAAyCYa_glecPhytGPrZau9ElJfJRhnVogFEqv4/export?format=pdf)
          * [Interactive Card - Rubric](https://docs.google.com/document/d/1EdEpsowofT8WGQSFvzYVF53HEKipLYdWULtjLgpOEBw/export?format=pdf)
          * [Interactive Card - Peer Review](https://docs.google.com/document/d/1aVP_8YU-JWkxVvRiituCOf66w7refwDaecNBLMZkKgs/export?format=pdf)
      CSD U3 Lesson Overview 2:
        markdown: |
          # Overview

          This lesson explores the challenges of communicating how to draw with shapes and use a tool that introduces how this problem is approached in Game Lab.The class uses a Game Lab tool  to interactively place shapes on Game Lab's 400 by 400 grid. Partners then take turns instructing each other how to draw a hidden image using this tool, accounting for many of the challenges of programming in Game Lab.


          ## Resources

          * [Drawing Shapes - Activity Guide](https://docs.google.com/document/d/1BKFLM2cmov3Lh23vsw1hGfUwTz9bM-diFCGHBf_GH6Y/export?format=pdf)
      CSD U3 Lesson Overview 3:
        markdown: |+
          # Overview

          The class is introduced to Game Lab, the programming environment for this unit, and begins to use it to position shapes on the screen. The lesson covers the basics of sequencing and debugging, as well as a few simple commands. At the end of the lesson, the class creates an online version of the image they designed in the previous lesson.
          ## Vocabulary

          * **Bug** - Part of a program that does not work correctly.
          * **Debugging** - Finding and fixing problems in your algorithm or program.
          * **Program** - An algorithm that has been coded into something that can be run by a machine.

          ## Introduced Code

          * [ellipse()](//docs.code.org/gamelab/ellipse/)
          * [rect()](//docs.code.org/gamelab/rect/)
          * [fill()](//docs.code.org/gamelab/fill/)

      CSD U3 Lesson Overview 4:
        markdown: |+
          # Overview

          This lesson extends the drawing skills to include width and height and introduces the concept of random number generation. The class learns to draw with versions of ellipse() and rect() that include width and height parameters and to use the background() block to fill the screen with color. At the end of the progression the class is introduced to the randomNumber() block and uses the new blocks to draw a randomized rainbow snake.
          ## Vocabulary

          * **Parameter** - An extra piece of information that you pass to the function to customize it for a specific need.

          ## Introduced Code

          * [background()](//docs.code.org/gamelab/background/)
          * [ellipse()](//docs.code.org/gamelab/ellipse/)
          * [rect()](//docs.code.org/gamelab/rect/)
          * [randomNumber()](//docs.code.org/gamelab/randomNumber/)

      CSD U3 Lesson Overview 5:
        markdown: |
          # Overview

          This lesson introduces variables as a way to label a number in a program or save a randomly generated value. The class begins the lesson with a very basic description of the purpose of a variable and practices using the new blocks.  Afterwards, the class uses variables to save a random number, allowing the programs to use the same random number multiple times.
          ## Vocabulary

          * **Variable** - A placeholder for a piece of information that can change.

          ## Introduced Code

          * [Declare a variable](//docs.code.org/gamelab/declareNoAssign_x/)
          * [Declare and assign a value to a variable](//docs.code.org/gamelab/declareAssign_x/)

          ## Resources

          * [Introduction to Variables](https://youtu.be/G41G_PEWFjE) - Video ([download](https://videos.code.org/2015/csp/applab/variables_1.mp4))
      CSD U3 Lesson Overview 6:
        markdown: |
          # Overview

          In order to create more interesting and detailed images, the class is introduced to the sprite object. Every sprite can be assigned an image to show, and sprites also keep track of multiple values about themselves, which will prove useful down the road when making animations.  At the end of the lesson, everyone creates a scene using sprites.
          ## Vocabulary

          * **Property** - Attributes that describe an object's characteristics
          * **Sprite** - A graphic character on the screen with properties that describe its location, movement, and look.

          ## Introduced Code

          * [drawSprites()](//docs.code.org/gamelab/drawSprites/)
          * [sprite.scale](//docs.code.org/gamelab/scale/)
          * [var sprite = createSprite()](//docs.code.org/gamelab/createSprite/)

          ## Resources

          * [Sprite Scene Planning - Activity Guide](https://docs.google.com/document/d/1I5w4VKBu4qPmoSSve_AwyaVQ47FWkJ-fSq4zfmQCsG8/export?format=pdf)
      CSD U3 Lesson Overview 7:
        markdown: |+
          # Overview

          This lesson introduces the draw loop, one of the core programming paradigms in Game Lab.  The class combines the draw loop with random numbers to manipulate some simple animations with dots and then with sprites. Afterwards, everyone uses what they learned to update the sprite scene from the previous lesson.
          ## Vocabulary

          * **Animation** - a series of images that create the illusion of motion by being shown rapidly one after the other
          * **Frame** - a single image within an animation
          * **Frame Rate** - the rate at which frames in an animation are shown, typically measured in frames per second

          ## Introduced Code

          * [World.frameRate](//docs.code.org/gamelab/World.frameRate/)
          * [function draw() {}](//docs.code.org/gamelab/draw/)


      CSD U3 Lesson Overview 8:
        markdown: |
          # Overview

          This unplugged lesson explores the underlying behavior of variables. Using notecards and string to simulate variables within a program, the class implements a few short programs. Once comfortable with this syntax, the class uses the same process with sprite properties, tracking a sprite's progress across the screen.
          ## Vocabulary

          * **Expression** - Any valid unit of code that resolves to a value.
          * **Variable** - A placeholder for a piece of information that can change.


          ## Resources

          * [Variables Unplugged - Activity Guide](https://docs.google.com/document/d/12-tfreuhFfNnxzBSl4dsLavDptTIruVcRiC3AzGKq1Y/export?format=pdf)
          * [Variables Unplugged Board - Manipulative](https://docs.google.com/document/d/1hxwkz9ed4Qd3KvKJ7MLQdgKGOtItXQ_qaYRQfZcfRn8/export?format=pdf)
      CSD U3 Lesson Overview 9:
        markdown: |+
          # Overview

          By combining the Draw Loop and the Counter Pattern, the class writes programs that move sprites across the screen, as well as animate other sprite properties.


      CSD U3 Movement Challenges:
        markdown: |
          # Challenges

          _Ask your teacher before pursuing any of these challenges._

          * Return to [level 15](15) to continue working on your own animation. You'll need to Unsubmit your project first, and the submit again when you've finished working.
          * Return to [level 12](12) to continue working on the fish animation. Try randomly changing the fishes' rotation to make them look like they are swimming.
          * Return to [level 13](13) to continue working on the gears animation. Try adding more gears of different sizes and tweaking the speed of each rotation to ensure that the gears mesh properly
          * Go to [full Game Lab](/projects/gamelab/new) to create a new animation from scratch.
      CSD U3 Project Build a Game SFLP:
        markdown: |
          # Overview

          The class plans and builds original games using the project guide from the previous two lessons. Working individually or in pairs, the class plans, develops, and gives feedback on the games.  After incorporating the peer feedback, the class shares out the completed games.


          ## Resources

          * [Make Your Own Game - Project Guide](https://docs.google.com/document/d/1SBye25XfdnytxCrc6a_OtpcS02YsT99nyJ9Vjwp_zeo/export?format=pdf)
          * [Make Your Own Game - Rubric](https://docs.google.com/document/d/1WChOizSb4gZsEbdER5KwYXj9c6Ogpeuv0AzegJ5HD8A/export?format=pdf)
          * [Make Your Own Game - Peer Review](https://docs.google.com/document/d/1ORjDuRep39xwiFaz20_jF74eWB63FVtK2FIQhq7Wecg/export?format=pdf)
      CSD U3 SFLP Velocity:
        markdown: |
          # Overview

          After a brief review of how the counter pattern is used to move sprites, the class is introduced to the properties that set velocity and rotation speed directly.   As they use these new properties in different ways, they build up the skills they need to create a basic side scroller game.

          ## Introduced Code

          * [sprite.velocityY](//docs.code.org/gamelab/velocityY/)
          * [sprite.velocityX](//docs.code.org/gamelab/velocityX/)
          * [sprite.rotationSpeed](//docs.code.org/gamelab/rotationSpeed/)
      CSD U3 Using the Game Design Process SLFP:
        markdown: |
          # Overview

          In this multi-day lesson, the class uses the problem solving process from Unit 1 to create a platform jumper game.  After looking at a sample game, the class defines what their games will look like and uses a structured process to build them.  Finally, the class reflects on how the games could be improved, and implements those changes.


          ## Resources

          * [Planning Your Platform Game - Project Guide](https://docs.google.com/document/d/1-h8vfW6PfppsDKKqVeVDMU6FxbPP8tA1Up_oc5_p9Dk/export?format=pdf)
      CSD U3 combining rep:
        content1: description here
        markdown: |+
          ### Can you decode this binary string?



          # 1000011



          ### What information do you need to help you decode it?

        title: title
      CSD U3 combining rep_2018:
        content1: description here
        markdown: |+
          ### Can you decode this binary string?



          ![](https://images.code.org/3aa6cac930e44cdc71b8fdcb7b1babe9-image-1531247036544.23.16 AM.png)



          ### What information do you need to help you decode it?

        title: title
      CSD U3 combining rep_2018_2019:
        content1: description here
        markdown: |+
          ### Can you decode this binary string?



          ![](https://images.code.org/3aa6cac930e44cdc71b8fdcb7b1babe9-image-1531247036544.23.16 AM.png)



          ### What information do you need to help you decode it?

        title: title
      CSD U3 complex sprite movement SFLP:
        markdown: "# Overview\n\nThe class learns to combine the velocity properties of sprites with the counter pattern to create more complex sprite movement, such as simulating gravity, making a sprite jump, and allowing a sprite to float left or right. In the final levels the class combine these movements to animate and control a single sprite and build a simple game in which a character flies around and collects coins. \n\n\n"
      CSD U3 game intro:
        content1: description here
        markdown: |
          # Create your own game

          Now that you have all the skills you need, it's time to make your own game!

          With a partner, brainstorm some different ideas for your game.  You can think about the games you've already seen, or look at some more sample games to give you ideas.

          [<img src="https://images.code.org/fc2d4cdba80a476b1ff476081991031e-image-1498594631779.png" style="width: 200px; float: left; margin: 10px;">](https://studio.code.org/projects/gamelab/AwDcX5nehOApfzyywI6BOLT1xbf0MIV1dUj8KjQaNtA)

          [<img src="https://images.code.org/b89895bdd43be4b729ca9165fc2923cf-image-1498595512898.28.24 PM.png" style="width: 200px; float: left; margin: 10px;">](https://studio.code.org/projects/gamelab/r9OYVTSj2od8vaCA-nKikTVpx-2Co8qHhuZiBIu30JA)

          [<img src="https://images.code.org/d430061caab264330da0227b53e2db90-image-1498595505047.27.59 PM.png" style="width: 200px; margin: 10px;">](https://studio.code.org/projects/gamelab/hAz7RSdqc0c_MSQVUpvz1XrLDr8QLsansWDVI0ZberQ)

          [<img src="https://images.code.org/c9fb241c5684e10d9ba2b85d4d4a906b-image-1498764384615.25.58 PM.png" style="width: 200px; margin: 10px;">](https://studio.code.org/projects/gamelab/DmRPNYR3n7bMO--_KkP7r6mOoGynBVyi3BMVPWDiVeI)

          Once you have settled on a type of game with your partner, fill out the Project Guide with the backgrounds, variables, sprites, and functions that you will need to make the game.  You'll spend the next few levels creating your game.
        title: Create Your Own Game
      CSD U3 game intro_2018:
        content1: description here
        markdown: |
          # Create your own game

          Now that you have all the skills you need, it's time to make your own game!

          With a partner, brainstorm some different ideas for your game.  You can think about the games you've already seen, or look at some more sample games to give you ideas.

          [<img src="https://images.code.org/fc2d4cdba80a476b1ff476081991031e-image-1498594631779.png" style="width: 200px; float: left; margin: 10px;">](https://studio.code.org/projects/gamelab/AwDcX5nehOApfzyywI6BOLT1xbf0MIV1dUj8KjQaNtA)

          [<img src="https://images.code.org/b89895bdd43be4b729ca9165fc2923cf-image-1498595512898.28.24 PM.png" style="width: 200px; float: left; margin: 10px;">](https://studio.code.org/projects/gamelab/r9OYVTSj2od8vaCA-nKikTVpx-2Co8qHhuZiBIu30JA)

          [<img src="https://images.code.org/d430061caab264330da0227b53e2db90-image-1498595505047.27.59 PM.png" style="width: 200px; margin: 10px;">](https://studio.code.org/projects/gamelab/hAz7RSdqc0c_MSQVUpvz1XrLDr8QLsansWDVI0ZberQ)

          [<img src="https://images.code.org/c9fb241c5684e10d9ba2b85d4d4a906b-image-1498764384615.25.58 PM.png" style="width: 200px; margin: 10px;">](https://studio.code.org/projects/gamelab/DmRPNYR3n7bMO--_KkP7r6mOoGynBVyi3BMVPWDiVeI)

          Once you have settled on a type of game with your partner, fill out the Project Guide with the backgrounds, variables, sprites, and functions that you will need to make the game.  You'll spend the next few levels creating your game.
        title: Create Your Own Game
      CSD U3 game intro_2018_2019:
        content1: description here
        markdown: |
          # Create your own game

          Now that you have all the skills you need, it's time to make your own game!

          With a partner, brainstorm some different ideas for your game.  You can think about the games you've already seen, or look at some more sample games to give you ideas.

          [<img src="https://images.code.org/fc2d4cdba80a476b1ff476081991031e-image-1498594631779.png" style="width: 200px; float: left; margin: 10px;">](https://studio.code.org/projects/gamelab/AwDcX5nehOApfzyywI6BOLT1xbf0MIV1dUj8KjQaNtA)

          [<img src="https://images.code.org/b89895bdd43be4b729ca9165fc2923cf-image-1498595512898.28.24 PM.png" style="width: 200px; float: left; margin: 10px;">](https://studio.code.org/projects/gamelab/r9OYVTSj2od8vaCA-nKikTVpx-2Co8qHhuZiBIu30JA)

          [<img src="https://images.code.org/d430061caab264330da0227b53e2db90-image-1498595505047.27.59 PM.png" style="width: 200px; margin: 10px;">](https://studio.code.org/projects/gamelab/hAz7RSdqc0c_MSQVUpvz1XrLDr8QLsansWDVI0ZberQ)

          [<img src="https://images.code.org/c9fb241c5684e10d9ba2b85d4d4a906b-image-1498764384615.25.58 PM.png" style="width: 200px; margin: 10px;">](https://studio.code.org/projects/gamelab/DmRPNYR3n7bMO--_KkP7r6mOoGynBVyi3BMVPWDiVeI)

          Once you have settled on a type of game with your partner, fill out the Project Guide with the backgrounds, variables, sprites, and functions that you will need to make the game.  You'll spend the next few levels creating your game.
        title: Create Your Own Game
      CSD U3 platform intro:
        content1: description here
        markdown: |
          # Build a Platform Jumper

          In the next several levels, you'll be building a platform jumper game.  Before you move on you'll need to look at the Project Guide for this project. Wait for instructions from your teacher before clicking to the next level.
        title: Build a Platform Jumper
      CSD U3 platform intro_2018:
        content1: description here
        markdown: |
          # Build a Platform Jumper

          In the next several levels, you'll be building a platform jumper game.  Before you move on you'll need to look at the Project Guide for this project. Wait for instructions from your teacher before clicking to the next level.
        title: Build a Platform Jumper
      CSD U3 platform intro_2018_2019:
        content1: description here
        markdown: |
          # Build a Platform Jumper

          In the next several levels, you'll be building a platform jumper game.  Before you move on you'll need to look at the Project Guide for this project. Wait for instructions from your teacher before clicking to the next level.
        title: Build a Platform Jumper
      CSD U4L01 SFLP:
        markdown: |
          # Overview

          In this lesson you'll learn how empathy for a user's needs is a critical component of the design process. Then you'll investigate a set of products and consider and critique how well they meet a variety of needs.

          ## Vocabulary

          * **Critique** - To critically evaluate in a detailed and constructive manner.
          * **Empathy** - In design, paying attention to a user's feelings and needs when designing a product.
          * **User** - Someone who uses an object, including software and hardware.

          ## Resources

          * [Determine the User](https://docs.google.com/document/d/1X0qwGigSXa1hq6Q6dws3PxHryGhEyCgkaEHyJCMgvj4/export?format=pdf) - Activity Guide
          * [Problem Solving Process with Empathy](https://staging.code.org/curriculum/docs/csd/PSPE.png) - Image
      CSD U4L02 SFLP:
        markdown: |
          # Overview

          Designers need to understand their users' needs. In this lesson you'll think about how to design for another person by role-playing a user profile and reacting to a series of products.

          ## Vocabulary

          * **Usability** - How easy, efficient, and satisfying it is to use a human-made object or device (including software).

          ## Resources

          * [Reacting as your User](https://docs.google.com/document/d/1cQXtr4zj3LEuOMoOYJf8KtBUl9ge3qmwBBzEBv8GixA/export?format=pdf) - Activity Guide


          * [Profile 1](https://docs.google.com/document/d/1N6Ks8rp6YoLgsbA3FE0x9RatJY3znevnMkMyUN3yRE8/export?format=pdf) - User Profile
          * [Profile 2](https://docs.google.com/document/d/14nHf-TzkKBUC0hvYlcviVe-S9wDdo1TqPUIcnTcHMzw/export?format=pdf) - User Profile
          * [Profile 3](https://docs.google.com/document/d/1Nw_0v_uGCe4J_tcimhyJiWKYgw4jhNgg8qP1zo4GddE/export?format=pdf) - User Profile
          * [Profile 4](https://docs.google.com/document/d/1kRKQYsomhS9UakiDazQ9dXNk8AIWHaq082Y4wBflK34/export?format=pdf) - User Profile
      CSD U4L03 SFLP:
        markdown: |
          # Overview

          In this lesson you'll design a product from scratch to meet a user's needs. Along the way you'll learn how brainstorming and then categorizing ideas is a useful skill when there are many potential options you could choose.

          ## Resources

          * [User Centered Design](https://docs.google.com/document/d/1HxcW76EFNVIJykCVELgjr4WRpFjPgrVvz9tURRR1gWY/export?format=pdf) - Activity Guide
      CSD U4L04 SFLP:
        markdown: |
          # Overview

          In this lesson you'll learn what an app is and how they are designed to help meet a user's needs. You'll also learn how prototypes are used to create a rough draft of a piece of software.

          ## Vocabulary

          * **Prototype** - A first or early model of a product that allows you to test assumptions before developing a final version.
          * **User Interface** - The visual elements of an program through which a user controls or communicates with the application. Often abbreviated UI.


          ## Resources

          * [User Interface Screens](https://docs.google.com/document/d/1JOVsR0T5P7zQ6LdxfDjRSsX1EC8xk0TYZKe7X_GjYlk/export?format=pdf) - Activity Guide
          * [User Testing (Computer)](https://docs.google.com/document/d/1Rtla8WSmJol6sHT5SToep5_hhTM5I8z3UjA7yCap-nw/export?format=pdf) - Activity Guide
          * [User Testing (User)](https://docs.google.com/document/d/1IPu6hsHRui_ChXogq0nklAUuPUae2yx0RaADW9b4Nrs/export?format=pdf) - Activity Guide
      CSD U4L05 SFLP:
        markdown: |
          # Overview

          In this lesson you'll learn how to read feedback on a product carefully to identify the needs that are being expressed. Then you'll update a paper prototype in order to better meet those needs.

          ## Resources

          * [User Interface Screens](https://docs.google.com/document/d/1JOVsR0T5P7zQ6LdxfDjRSsX1EC8xk0TYZKe7X_GjYlk/export?format=pdf) - Activity Guide
          * [Prototype Feedback](https://docs.google.com/document/d/1DzoLUATK8k1lyr_TLhR4mJ5UHLhrZN6-sLRay0tLX4Q/export?format=pdf) - Activity Guide
          * [Improve a Screen](https://docs.google.com/document/d/1y0YfE6qZKKlRRpeVGU2d-SuctJP9P5fI2062yo85nZg/export?format=pdf) - Activity Guide
      CSD U4L06 SFLP:
        markdown: |
          # Overview

          Up to this point we have focused on designing for users who are, to some degree, distanced from us. Whether through brainstorming, profiles, or text feedback, the connection to an end user has never been direct. In this lesson you'll directly interview one of your classmates as you look to design an app that meets their needs.

          ## Resources

          * [User Interview](https://docs.google.com/document/d/1u3mOVcBHWJpsMJwrvjb4_B8532xg774hkiWPEH7fbqQ/export?format=pdf) - Activity Guide
          * [Project - Paper Prototype](https://docs.google.com/document/d/12dSfN9z_sEbo41hx4reMUQxl399RjbE5cgCKl0rCHz4/export?format=pdf) - Activity Guide
      CSD U4L07 SFLP:
        markdown: |
          # Overview

          Based on the interview you conducted in the last lesson, design an app that could help your classmate overcome some obstacle to learning something new.


          ## Resources

          * [Paper Prototype Rubric](https://docs.google.com/document/d/16llO0PF7rJhz_ImtNDAxG3MAt9vU6QVGpDSPGoi_-04/export?format=pdf) - Rubric
          * [Project - Paper Prototype](https://docs.google.com/document/d/12dSfN9z_sEbo41hx4reMUQxl399RjbE5cgCKl0rCHz4/export?format=pdf) - Activity Guide
      CSD U4L08 SFLP:
        markdown: |+
          # Overview

          To kick off the app design project, the class organizes into teams and starts exploring app topics. Several example socially impactful apps serve as inspiration for the project.


          ## Resources

          * [App Design Kickoff](https://docs.google.com/document/d/1u5oTuQcEV0sweTA6bEER_wZT6FKoX7EqX8JdiY8YCAA/export?format=pdf) - Activity Guide

      CSD U4L09 SFLP:
        markdown: |
          # Overview

          Dive into app development by exploring existing apps that may serve similar users. Each group identifies a handful of apps that address the same topic they are working on, using those apps to help refine the app idea they will pursue.


          ## Resources

          * [Market Research](https://docs.google.com/document/d/1zDS5HCQ3nTwWHh4Dr4Ix17Db9fMRVJA8lNefwdcjiA0/export?format=pdf) - Activity Guide
      CSD U4L10 SFLP:
        markdown: |
          # Overview

          Paper prototypes allow developers to quickly test ideas before investing a lot of time writing code. In this lesson teams explore some example apps created in App Lab, using those apps to help inform the first paper prototypes of their apps.
          ## Vocabulary

          * **Prototype** - A first or early model of a product that allows you to test assumptions before developing a final version.


          ## Resources

          * [Phone Paper Prototype](https://drive.google.com/open?id=0B2UNlnU_5Vg4c1VJZ1Zrd0NXUkE) - Template
          * [What's for Lunch](https://docs.google.com/drawings/d/12qoCyr8ApVLVT9OlnHpDX7qM5mVopbw7w-0TcxlQd2k) - Prototype
          * [Prototype Brainstorming](https://docs.google.com/document/d/1t6pRCn-oSUsuQ2rog24KzbbZ7iORothH_Gp1i3Hm8A4/export?format=pdf) - Activity Guide
      CSD U4L11 SFLP:
        markdown: |
          # Overview

          In this lesson teams test out their paper prototypes with other members of the class. With one student role playing the computer, one narrating, and the rest observing, teams will get immediate feedback on their app designs which will inform the next version of their app prototypes.


          ## Resources

          * [Paper Prototype User Testing](https://docs.google.com/document/d/1cPIdaayUutKdsq1RFT-keF4X-o4XBrF2BnMaVutc-_4/export?format=pdf) - Activity Guide
          * [What's For Lunch Testing](https://drive.google.com/open?id=0BxKeX2-Lg_EYUTBNbnMyUENFcGs) - Video
      CSD U4L12 SFLP:
        markdown: |
          # Overview

          Having developed, tested, and gathered feedback on a paper prototype, teams now move to App Lab to build the next iteration of their apps. Using the drag-and-drop Design Mode, each team member builds out at least one page of their team's app, responding to feedback that was received in the previous round of testing.


          ## Resources

          * [Screen Ownership](https://docs.google.com/document/d/1eAl3Gpi1iLLOMjaO44-w2dUuJvHEzGVPrIDxpP4rkW4/export?format=pdf) - Activity Guide
          * [Screen Design](https://docs.google.com/document/d/1dtMInlgLRk_DUZwpqF6KF8TvGUJNp-vWFYYU4wG-ZLc/export?format=pdf) - Activity Guide
      CSD U4L13 SFLP:
        markdown: |+
          # Overview

          Building on the screens that the class designed in the previous lesson, teams combine screens into a single app. Simple code can then be added to make button clicks change to the appropriate screen.

          ## Introduced Code

          * [onEvent](//docs.code.org/applab/onEvent/)
          * [setScreen](//docs.code.org/applab/setScreen/)

      CSD U4L15 SFLP:
        markdown: |
          # Overview

          Teams run another round of user testing, this time with their interactive prototype. Feedback gathered from this round of testing will inform the final iteration of the app prototypes.


          ## Resources

          * [App User Testing](https://docs.google.com/document/d/1-ZgkOaZ1Y_jCG1c9Hzkz_SMEZXrJAzVFLgoCVIQiIts/export?format=pdf) - Activity Guide
      CSD U4L16 SFLP:
        markdown: |
          # Overview

          Using the feedback from the last round of testing, teams implement changes that address the needs of their users. Each team tracks and prioritizes the features they want to add and the bugs they need to fix.
          ## Vocabulary

          * **Bug** - Part of a program that does not work correctly.
          * **Feature** - An individual functional element of a software item. This could be the ability to do something new, work across multiple platforms, or perform more efficiently.


          ## Resources

          * [App User Testing Analysis](https://docs.google.com/document/d/1Y7cri91LU_70n6CrIGnUSedPwA_TMfYCkyhCjfpfTns/export?format=pdf) - Activity Guide
      CSD U4L17 SFLP:
        markdown: |
          # Overview

          Each team prepares a presentation to "pitch" the app they've developed. This is the time to share struggles, triumphs, and plans for the future.


          ## Resources

          * [App Presentation Template](https://docs.google.com/presentation/d/19KVEybGqu6pdFB3QwjvJNA_VTM5W5Kxy3fUlxf1xnc4/edit) - Slide Deck
          * [App Presentation](https://docs.google.com/presentation/d/1qRbnSABMrfeZHUiQ_mGdhzW7UIGuiGiWyMcQK_pH-tY/edit) - Exemplar
          * [App Presentation](https://docs.google.com/document/d/1RVmBL9jCfG2QJXyEiya4w9dSBluRxinEOKBZLicv4lg/export?format=pdf) - Rubric
      CSD U5 Encryption 1:
        content1: description here
        markdown: |
          # Decoding Binary Strings

          ![](https://images.code.org/6d8dcf1c1e6c2955fa767e9839af820e-image-1505420730035.24.20 PM.png)

          ## Encoding system:

          ![](https://images.code.org/df5db2027cac3c16c4ef4b2b8f940d5d-image-1505420957117.28.48 PM.png) ![](https://images.code.org/4de0035c9053477fa6f5484800dc8140-image-1505420957118.28.39 PM.png)

          ![](https://images.code.org/8335bef013e9655291fcfecf2c60fcd3-image-1505420957118.28.30 PM.png)  &nbsp;&nbsp; ![](https://images.code.org/ab3337f5b0848557c37fd114fe0d65b7-image-1505420957116.28.56 PM.png)
        title: title
      CSD U5 Encryption 1_2018:
        content1: description here
        markdown: |
          # Decoding Binary Strings

          ![](https://images.code.org/6d8dcf1c1e6c2955fa767e9839af820e-image-1505420730035.24.20 PM.png)

          ## Encoding system:

          ![](https://images.code.org/df5db2027cac3c16c4ef4b2b8f940d5d-image-1505420957117.28.48 PM.png) ![](https://images.code.org/4de0035c9053477fa6f5484800dc8140-image-1505420957118.28.39 PM.png)

          ![](https://images.code.org/8335bef013e9655291fcfecf2c60fcd3-image-1505420957118.28.30 PM.png)  &nbsp;&nbsp; ![](https://images.code.org/ab3337f5b0848557c37fd114fe0d65b7-image-1505420957116.28.56 PM.png)
        title: title
      CSD U5 Encryption 1_2018_2019:
        content1: description here
        markdown: |
          # Decoding Binary Strings

          ![](https://images.code.org/6d8dcf1c1e6c2955fa767e9839af820e-image-1505420730035.24.20 PM.png)

          ## Encoding system:

          ![](https://images.code.org/df5db2027cac3c16c4ef4b2b8f940d5d-image-1505420957117.28.48 PM.png) ![](https://images.code.org/4de0035c9053477fa6f5484800dc8140-image-1505420957118.28.39 PM.png)

          ![](https://images.code.org/8335bef013e9655291fcfecf2c60fcd3-image-1505420957118.28.30 PM.png)  &nbsp;&nbsp; ![](https://images.code.org/ab3337f5b0848557c37fd114fe0d65b7-image-1505420957116.28.56 PM.png)
        title: title
      CSD U5 Encryption 2:
        content1: description here
        markdown: |
          # Decoding Binary Strings

          ![](https://images.code.org/8d98818a95a736974cb4e6e5ab3717f4-image-1514928554045.24.20 PM.png)

          * Can you decode this binary string?
          * What do you need to know before you can decode it?
        title: Decoding Binary Strings
      CSD U5 Encryption 2_2018:
        content1: description here
        markdown: |
          # Decoding Binary Strings

          ![](https://images.code.org/8d98818a95a736974cb4e6e5ab3717f4-image-1514928554045.24.20 PM.png)

          * Can you decode this binary string?
          * What do you need to know before you can decode it?
        title: Decoding Binary Strings
      CSD U5 Encryption 2_2018_2019:
        content1: description here
        markdown: |
          # Decoding Binary Strings

          ![](https://images.code.org/8d98818a95a736974cb4e6e5ab3717f4-image-1514928554045.24.20 PM.png)

          * Can you decode this binary string?
          * What do you need to know before you can decode it?
        title: Decoding Binary Strings
      CSD U5 L13 SFLP Interpreting Data:
        content1: description here
        markdown: |
          # Overview

          Go further into the interpreting of data by finding looking at the relationships between two different types of data. Look at how finding relationships can help you solve problems.

          ## Resources

          * [Interpreting Data](https://docs.google.com/document/d/1JZJ5-kZoHb6xI7B4Ua5EHwaS1UiLoeM8i6YUNAAbaEM/export?format=pdf) - Activity Guide
          * [Interpreting Data](https://docs.google.com/document/d/1YCqOxw4u8m142zaIVdUk4eBn8VnJBpkMzr4uEaDq2pM/export?format=pdf) - Resource
        title: title
      CSD U5 crosstab warmup:
        content1: description here
        markdown: |+
          # Cake Survey

          For this survey, people got to choose a cake flavor and an icing flavor.

          <table style="text-align: center; border: solid 1px darkgray;">
          <tr><td style="width: 50px; background-color: gray; color:white"></td><td style="width: 200px; background-color: gray; color:white">Cake Flavor</td><td style="width: 200px; background-color: gray; color:white">Icing Flavor</td></tr>
          <tr><td>1</td><td>Chocolate Cake</td><td>Chocolate Icing</td></tr>
          <tr><td>2</td><td>Red Velvet Cake</td><td>Cream Cheese Icing</td></tr>
          <tr><td>3</td><td>Chocolate Cake</td><td>Chocolate Icing</td></tr>
          <tr><td>4</td><td>Carrot Cake</td><td>Cream Cheese Icing</td></tr>
          <tr><td>5</td><td>Carrot Cake</td><td>Vanilla Icing</td></tr>
          <tr><td>6</td><td>Chocolate Cake</td><td>Chocolate Icing</td></tr>
          <tr><td>7</td><td>Chocolate Cake</td><td>Cream Cheese Icing</td></tr>
          <tr><td>8</td><td>Carrot Cake</td><td>Cream Cheese Icing</td></tr>
          </table>
          <br><br>

          If these people had to agree on one cake and icing combination for a party, what should it be?

          What if they were able to order two cakes with icing?

          How does knowing both choices help us better understand what sort of cakes we should order?

        title: Pizza Survey
      CSD U5 crosstab warmup_2018:
        content1: description here
        markdown: |+
          # Cake Survey

          For this survey, people got to choose a cake flavor and an icing flavor.

          <table style="text-align: center; border: solid 1px darkgray;">
          <tr><td style="width: 50px; background-color: gray; color:white"></td><td style="width: 200px; background-color: gray; color:white">Cake Flavor</td><td style="width: 200px; background-color: gray; color:white">Icing Flavor</td></tr>
          <tr><td>1</td><td>Chocolate Cake</td><td>Chocolate Icing</td></tr>
          <tr><td>2</td><td>Red Velvet Cake</td><td>Cream Cheese Icing</td></tr>
          <tr><td>3</td><td>Chocolate Cake</td><td>Chocolate Icing</td></tr>
          <tr><td>4</td><td>Carrot Cake</td><td>Cream Cheese Icing</td></tr>
          <tr><td>5</td><td>Carrot Cake</td><td>Vanilla Icing</td></tr>
          <tr><td>6</td><td>Chocolate Cake</td><td>Chocolate Icing</td></tr>
          <tr><td>7</td><td>Chocolate Cake</td><td>Cream Cheese Icing</td></tr>
          <tr><td>8</td><td>Carrot Cake</td><td>Cream Cheese Icing</td></tr>
          </table>
          <br><br>

          If these people had to agree on one cake and icing combination for a party, what should it be?

          What if they were able to order two cakes with icing?

          How does knowing both choices help us better understand what sort of cakes we should order?

        title: Pizza Survey
      CSD U5 crosstab warmup_2018_2019:
        content1: description here
        markdown: |+
          # Cake Survey

          For this survey, people got to choose a cake flavor and an icing flavor.

          <table style="text-align: center; border: solid 1px darkgray;">
          <tr><td style="width: 50px; background-color: gray; color:white"></td><td style="width: 200px; background-color: gray; color:white">Cake Flavor</td><td style="width: 200px; background-color: gray; color:white">Icing Flavor</td></tr>
          <tr><td>1</td><td>Chocolate Cake</td><td>Chocolate Icing</td></tr>
          <tr><td>2</td><td>Red Velvet Cake</td><td>Cream Cheese Icing</td></tr>
          <tr><td>3</td><td>Chocolate Cake</td><td>Chocolate Icing</td></tr>
          <tr><td>4</td><td>Carrot Cake</td><td>Cream Cheese Icing</td></tr>
          <tr><td>5</td><td>Carrot Cake</td><td>Vanilla Icing</td></tr>
          <tr><td>6</td><td>Chocolate Cake</td><td>Chocolate Icing</td></tr>
          <tr><td>7</td><td>Chocolate Cake</td><td>Cream Cheese Icing</td></tr>
          <tr><td>8</td><td>Carrot Cake</td><td>Cream Cheese Icing</td></tr>
          </table>
          <br><br>

          If these people had to agree on one cake and icing combination for a party, what should it be?

          What if they were able to order two cakes with icing?

          How does knowing both choices help us better understand what sort of cakes we should order?

        title: Pizza Survey
      CSD U5 data visualization:
        content1: description here
        markdown: |
          ## Best Class Pet
          ### Here are three different ways to show the results of a vote for best class pet.

          ![](https://images.code.org/7c9f4de7b0028ab929a3a10494535525-image-1488389767180.png) ![](https://images.code.org/7e14d63776050e7aad994ee2e47cb7ce-image-1488389776283.png) ![](https://images.code.org/cf0dd06d2e0ccdf9573e204d24aad90a-image-1488389830915.png)


          ### Which one makes it easiest for a human to make a decision about which pet is the most popular?
          ### Which one makes it easiest for a computer to make a decision?
        title: title
      CSD U5 data visualization_2018:
        content1: description here
        markdown: |
          ## Best Class Pet
          ### Here are three different ways to show the results of a vote for best class pet.

          ![](https://images.code.org/7c9f4de7b0028ab929a3a10494535525-image-1488389767180.png) ![](https://images.code.org/7e14d63776050e7aad994ee2e47cb7ce-image-1488389776283.png) ![](https://images.code.org/cf0dd06d2e0ccdf9573e204d24aad90a-image-1488389830915.png)


          ### Which one makes it easiest for a human to make a decision about which pet is the most popular?
          ### Which one makes it easiest for a computer to make a decision?
        title: title
      CSD U5 data visualization_2018_2019:
        content1: description here
        markdown: |
          ## Best Class Pet
          ### Here are three different ways to show the results of a vote for best class pet.

          ![](https://images.code.org/7c9f4de7b0028ab929a3a10494535525-image-1488389767180.png) ![](https://images.code.org/7e14d63776050e7aad994ee2e47cb7ce-image-1488389776283.png) ![](https://images.code.org/cf0dd06d2e0ccdf9573e204d24aad90a-image-1488389830915.png)


          ### Which one makes it easiest for a human to make a decision about which pet is the most popular?
          ### Which one makes it easiest for a computer to make a decision?
        title: title
      CSD U5 student record:
        content1: description here
        markdown: "# Student record\n\n<div style=\"float: right; height:209px; width: 456px; background-color: black;\">\n  <div style=\"float:left; height:52px; width: 40px; background-color: white; margin:0px; line-height: 50px; text-align: center;font-size: 20px;\">0</div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  \n  <div style=\"float:left; height:52px; width: 40px; background-color: white; margin:0px; line-height: 50px; text-align: center;font-size: 20px;\">1</div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  \n  <div style=\"float:left; height:52px; width: 40px; background-color: white; margin:0px; line-height: 50px; text-align: center;font-size: 20px;\">2</div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  \n  <div style=\"float:left; height:53px; width: 40px; background-color: white; margin:0px; line-height: 50px; text-align: center;font-size: 20px;\">3</div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n</div>\n\n## The student record holds information according to the following rules:\n\n * <h4>The first eight bits store the student's grade as a binary number.</h4>\n * <h4>The second eight store the student's age as a binary number.</h4>\n * <h4>The next eight store the student's first initial in ASCII.</h4>\n * <h4>The last eight store the student's last initial in ASCII.</h4>\n\n<br />\n<br />\n"
        title: title
      CSD U5 student record_2018:
        content1: description here
        markdown: "# Student record\n\n<div style=\"float: right; height:209px; width: 456px; background-color: black;\">\n  <div style=\"float:left; height:52px; width: 40px; background-color: white; margin:0px; line-height: 50px; text-align: center;font-size: 20px;\">0</div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  \n  <div style=\"float:left; height:52px; width: 40px; background-color: white; margin:0px; line-height: 50px; text-align: center;font-size: 20px;\">1</div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  \n  <div style=\"float:left; height:52px; width: 40px; background-color: white; margin:0px; line-height: 50px; text-align: center;font-size: 20px;\">2</div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  \n  <div style=\"float:left; height:53px; width: 40px; background-color: white; margin:0px; line-height: 50px; text-align: center;font-size: 20px;\">3</div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n</div>\n\n## The student record holds information according to the following rules:\n\n * <h4>The first eight bits store the student's grade as a binary number.</h4>\n * <h4>The second eight store the student's age as a binary number.</h4>\n * <h4>The next eight store the student's first initial in ASCII.</h4>\n * <h4>The last eight store the student's last initial in ASCII.</h4>\n\n<br />\n<br />\n"
        title: title
      CSD U5 student record_2018_2019:
        content1: description here
        markdown: "# Student record\n\n<div style=\"float: right; height:209px; width: 456px; background-color: black;\">\n  <div style=\"float:left; height:52px; width: 40px; background-color: white; margin:0px; line-height: 50px; text-align: center;font-size: 20px;\">0</div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  \n  <div style=\"float:left; height:52px; width: 40px; background-color: white; margin:0px; line-height: 50px; text-align: center;font-size: 20px;\">1</div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  \n  <div style=\"float:left; height:52px; width: 40px; background-color: white; margin:0px; line-height: 50px; text-align: center;font-size: 20px;\">2</div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  \n  <div style=\"float:left; height:53px; width: 40px; background-color: white; margin:0px; line-height: 50px; text-align: center;font-size: 20px;\">3</div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: white; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n  <div style=\"float:left; height:50px; width: 50px; height: 50px; background-color: gray; margin:1px;\"></div>\n</div>\n\n## The student record holds information according to the following rules:\n\n * <h4>The first eight bits store the student's grade as a binary number.</h4>\n * <h4>The second eight store the student's age as a binary number.</h4>\n * <h4>The next eight store the student's first initial in ASCII.</h4>\n * <h4>The last eight store the student's last initial in ASCII.</h4>\n\n<br />\n<br />\n"
        title: title
      CSD U6 LED create intro:
        content1: description here
        markdown: |
          # LED Apps

          In the last level, you made an app to control the LED with different buttons on the screen.   In the next two levels, you'll see some other examples of apps, then have a chance to make one of your own.

          As you look at the examples, think of what code might be useful for the app that you and your partner want to create.
        title: Make an App Using the LED
      CSD U6 LED create intro_2018:
        content1: description here
        markdown: |
          # LED Apps

          In the last level, you made an app to control the LED with different buttons on the screen.   In the next two levels, you'll see some other examples of apps, then have a chance to make one of your own.

          As you look at the examples, think of what code might be useful for the app that you and your partner want to create.
        title: Make an App Using the LED
      CSD U6 LED create intro_2018_2019:
        content1: description here
        markdown: |
          # LED Apps

          In the last level, you made an app to control the LED with different buttons on the screen.   In the next two levels, you'll see some other examples of apps, then have a chance to make one of your own.

          As you look at the examples, think of what code might be useful for the app that you and your partner want to create.
        title: Make an App Using the LED
      CSD U6 circuit smart bike blinker build:
        markdown: |
          # Build Your Blinkers

          Using the circuit you just built, return to your smart bike prototype and add the blinkers.
      CSD U6 circuit smart bike blinker build_2018:
        markdown: |
          # Build Your Blinkers

          Using the circuit you just built, return to your smart bike prototype and add the blinkers.
      CSD U6 circuit smart bike blinker build_2018_2019:
        markdown: |
          # Build Your Blinkers

          Using the circuit you just built, return to your smart bike prototype and add the blinkers.
      CSD U6 final intro:
        content1: description here
        markdown: |
          # Prototype your own innovation

          Now that you have all the skills you need, it's time to make your own game!

          With a partner or team, brainstorm some different physical devices you could prototype. You can build on the programs that you've already made in previous lessons, innovative devices that you've seen in the real world, or any wild ideas you can come up with.

          Once you have settled on an idea with your team, fill out the Project Guide with the sketches of the physical components of your device, inputs and outputs that you'll need, and plans for what information you'll need to process.

          ## Innovation Ideas

          To help kick off your brainstorming, check out these example projects:

          ### Automatic Night Light

          Using conductive thread, LEDs, and the light sensor, create a decorative piece of wall art the becomes a night light when the lights go out. This one is designed to look like flickering fireflies.

          ![](https://images.code.org/159af2d362c678c341d22b7f29635f8a-image-1518201828308.gif)

          ### Musical Instrument

          Design a musical instrument that can be played any way you like, using sensors or buttons for input. In this case we created five new buttons using conductive copper tape, though you could also use aluminum foil or any other conductive material.

          ![](https://images.code.org/deeb3d33ac1b51b19eec108f3b92efc7-image-1518202587911.gif)

          ### Bop-it

          Make a game! This one uses an array to store the different commands, which are picked at random each time you correctly follow the instructions on screen.

          ![](https://images.code.org/3e67cd6a112a10063d4183662d8fecc0-image-1518202606948.gif)
      CSD U6 final intro_2018:
        content1: description here
        markdown: |
          # Prototype your own innovation

          Now that you have all the skills you need, it's time to make your own game!

          With a partner or team, brainstorm some different physical devices you could prototype. You can build on the programs that you've already made in previous lessons, innovative devices that you've seen in the real world, or any wild ideas you can come up with.

          Once you have settled on an idea with your team, fill out the Project Guide with the sketches of the physical components of your device, inputs and outputs that you'll need, and plans for what information you'll need to process.

          ## Innovation Ideas

          To help kick off your brainstorming, check out these example projects:

          ### Automatic Night Light

          Using conductive thread, LEDs, and the light sensor, create a decorative piece of wall art the becomes a night light when the lights go out. This one is designed to look like flickering fireflies.

          ![](https://images.code.org/159af2d362c678c341d22b7f29635f8a-image-1518201828308.gif)

          ### Musical Instrument

          Design a musical instrument that can be played any way you like, using sensors or buttons for input. In this case we created five new buttons using conductive copper tape, though you could also use aluminum foil or any other conductive material.

          ![](https://images.code.org/deeb3d33ac1b51b19eec108f3b92efc7-image-1518202587911.gif)

          ### Bop-it

          Make a game! This one uses an array to store the different commands, which are picked at random each time you correctly follow the instructions on screen.

          ![](https://images.code.org/3e67cd6a112a10063d4183662d8fecc0-image-1518202606948.gif)
      CSD U6 final intro_2018_2019:
        content1: description here
        markdown: |
          # Prototype your own innovation

          Now that you have all the skills you need, it's time to make your own game!

          With a partner or team, brainstorm some different physical devices you could prototype. You can build on the programs that you've already made in previous lessons, innovative devices that you've seen in the real world, or any wild ideas you can come up with.

          Once you have settled on an idea with your team, fill out the Project Guide with the sketches of the physical components of your device, inputs and outputs that you'll need, and plans for what information you'll need to process.

          ## Innovation Ideas

          To help kick off your brainstorming, check out these example projects:

          ### Automatic Night Light

          Using conductive thread, LEDs, and the light sensor, create a decorative piece of wall art the becomes a night light when the lights go out. This one is designed to look like flickering fireflies.

          ![](https://images.code.org/159af2d362c678c341d22b7f29635f8a-image-1518201828308.gif)

          ### Musical Instrument

          Design a musical instrument that can be played any way you like, using sensors or buttons for input. In this case we created five new buttons using conductive copper tape, though you could also use aluminum foil or any other conductive material.

          ![](https://images.code.org/deeb3d33ac1b51b19eec108f3b92efc7-image-1518202587911.gif)

          ### Bop-it

          Make a game! This one uses an array to store the different commands, which are picked at random each time you correctly follow the instructions on screen.

          ![](https://images.code.org/3e67cd6a112a10063d4183662d8fecc0-image-1518202606948.gif)
      CSD U6 game project stop:
        markdown: |
          # Stop

          Before you move on you'll need to look at the Project Guide for this project. Wait for instructions from your teacher as well.
      CSD U6 game project stop_2018:
        markdown: |
          # Stop

          Before you move on you'll need to look at the Project Guide for this project. Wait for instructions from your teacher as well.
      CSD U6 game project stop_2018_2019:
        markdown: |
          # Stop

          Before you move on you'll need to look at the Project Guide for this project. Wait for instructions from your teacher as well.
      CSD U6 tugowar stop:
        markdown: |
          # Stop

          Before you move on you'll need to look at the Project Guide for this project. Wait for instructions from your teacher as well.
      CSD U6 tugowar stop_2018:
        markdown: |
          # Stop

          Before you move on you'll need to look at the Project Guide for this project. Wait for instructions from your teacher as well.
      CSD U6 tugowar stop_2018_2019:
        markdown: |
          # Stop

          Before you move on you'll need to look at the Project Guide for this project. Wait for instructions from your teacher as well.
      CSD-U5-SFLP ASCII and Binary Representation:
        markdown: "# Overview\n\nLearn how the ASCII system uses On-Off patterns to represent the alphabet, then use it to create your own binary system for representing the alphabet. \n\n## Vocabulary\n\n* **ASCII** - ASCII - American Standard Code for Information Interchange.  ASCII is the universally recognized raw text format that any computer can understand.\n* **Binary** - A way of representing information using only two options.\n* **Bit** - A contraction of \"Binary Digit\".  A bit is the single unit of information in a computer, typically represented as a 0 or 1.\n\n\n## Resources\n\n* [ASCII - Activity Guide](https://docs.google.com/document/d/1zg1hNebVEGMbIepFS1pGqS-QqAyzENjP9F59UqXwDzI/export?format=pdf)\n"
      CSD-U5-SFLP Automating Data Decisions:
        markdown: |
          # Overview

          You'll see an example of how a computer could be used to complete essentially every step of the data problem solving process. You'll create rules, or an algorithm, that a computer could use to make a decision automatically.

          ## Resources

          * [Automating Data Decisions](https://docs.google.com/document/d/1BaqqDWT1Y0cA80ytaXOfB8RbnVpMsqQ4K7KU_kX__gs/export?format=pdf) - Resource (copy as [MS Word](https://docs.google.com/document/d/1BaqqDWT1Y0cA80ytaXOfB8RbnVpMsqQ4K7KU_kX__gs/export?format=doc), [Google Doc](https://docs.google.com/document/d/1BaqqDWT1Y0cA80ytaXOfB8RbnVpMsqQ4K7KU_kX__gs/copy))
          * [Automating Data Decisions](https://docs.google.com/document/d/1ww7OiPAWu03K2C3c5LKbUm_Opkz9x0lZfizA_uJ7JsI/export?format=pdf) - Activity Guide (copy as [MS Word](https://docs.google.com/document/d/1ww7OiPAWu03K2C3c5LKbUm_Opkz9x0lZfizA_uJ7JsI/export?format=doc), [Google Doc](https://docs.google.com/document/d/1ww7OiPAWu03K2C3c5LKbUm_Opkz9x0lZfizA_uJ7JsI/copy))
      CSD-U5-SFLP Combining Representations:
        markdown: |
          # Overview

          This lesson combines all three types of binary representation systems (ASCII characters, binary number, and images) to allow for the encode of more complex types information in a record.  After seeing a series of bits and being asked to decode them, the class is introduced to the idea that  understanding binary information requires understanding both the system that is being used and the meaning of the information encoded.


          ## Resources

          * [Pet Records - Activity Guide](https://docs.google.com/document/d/14-oji3xpZfTXyU6eXLETyc9r9MAZAxlDuxQAi4L3G9g/export?format=pdf)
          * [ASCII to Binary Table - Reference](https://docs.google.com/document/d/1RgqkSXE8NGRfJe2Slw5DSIaP_YbpMhRE5u1zrutoyMk/export?format=pdf)
      CSD-U5-SFLP Create a Representation:
        markdown: |
          # Overview

          Design a structure to represent your perfect day using the binary representation systems they've learned in this chapter. You'll need to use ASCII, binary numbers, and images as you design a punch card format.

          ## Resources

          * [Create a Representation - Project Guide](https://docs.google.com/document/d/1JAjFoPRfZF1V5WZqrdusZ_qjGWblaqTL-_l5jmaPhf0/export?format=pdf)
      CSD-U5-SFLP Interpreting Data:
        markdown: |
          # Overview

          Go further into the structuring of data by cleaning and visualizing raw data sets. Look at how visualizations change the way you understand data and make decisions about it.

          ## Resources

          * [Structuring Data](https://docs.google.com/document/d/1z2ocdwgBgWLeAG3IHhKvNHEVtyGrLePsmDg2liFkJ9Y/export?format=pdf) - Activity Guide
      CSD-U5-SFLP Making Decisions with Data:
        markdown: |
          # Overview

          In this lesson you'll get some practice making decisions with data with some problems that might feel familiar.

          ## Resources

          * [Making Decisions with Data](https://docs.google.com/document/d/1ByeV-Q0e0VsgphCoVUZOxol0Fp2ArrsyV3rH8djnllg/export?format=pdf) - Activity Guide
      CSD-U5-SFLP Patterns and Representation:
        markdown: |
          # Overview

          This lesson looks closer at what is needed to create a system of representation.  Groups create systems that can represent any letter in the alphabet using only a single stack of cards, then create messages with their systems and exchange with other groups to ensure the system worked as intended.   The class discusses commonalities between working systems while recognizing that there are many possible working solutions.
          ## Vocabulary

          * **Decode** - to change how information is represented so that it can be read by a person
          * **Encode** - to change how information is represented so that it can be read by a computer


          ## Resources

          * [Representing Information](https://docs.google.com/document/d/1emQKHuyzXvzg3cShX88CH8r8kMXInjItRIu9PdrfRpI/export?format=pdf) - Activity Guide (copy as [MS Word](https://docs.google.com/document/d/1emQKHuyzXvzg3cShX88CH8r8kMXInjItRIu9PdrfRpI/export?format=doc), [Google Doc](https://docs.google.com/document/d/1emQKHuyzXvzg3cShX88CH8r8kMXInjItRIu9PdrfRpI/copy))
      CSD-U5-SFLP Problem Solving and Data:
        markdown: |
          # Overview

          You'll use the problem solving process to help solve a data problem.

          ## Resources

          * [Problem Solving with Data](https://docs.google.com/document/d/1_5JzwIIl8u72QJq_dFpFPnVcNREBc3UHtQtObkwgckw/export?format=pdf) - Activity Guide
      CSD-U5-SFLP Problem Solving with Big Data:
        markdown: |
          # Overview

          This lesson covers how data is collected and used by a organizations to solve problems in the real world. The class looks at three scenarios that could be solved using data and brainstorms the types of data they would want to solve them and how they could collect the data.  Each scenario also includes a video about a real-world service that has solved a similar problem with data.


          ## Resources

          * [Data in the Real World](https://docs.google.com/document/d/10MwyEV-wgpE6tHZxi-d9SQKrTPoz8J-QwmND8rn-m2I/export?format=pdf) - Activity Guide
      CSD-U5-SFLP Representation Matters:
        markdown: |
          # Overview

          Get your first taste of the importance of how information is represented and how it affects the way we make decisions. You'll help a few people decide which meal they should order.

          ## Resources

          * [Representation Matters - Activity Guide](https://docs.google.com/document/d/1wU8QANCmyz_DiJf2vdg2QPqKHq1YE0XDLGJmEsbKfiU/export?format=pdf)
      CSD-U5-SFLP Representing Images:
        markdown: |+
          # Overview

          Learn how the on-off patterns you learned about in the last lesson can be used to represent images. Along the way you'll explore how some of the properties of representation systems you've already seen apply to images as well.

          ## Vocabulary

          * **pixel** - short for "picture element" it is the fundamental unit of a digital image, typically a tiny square or dot which contains a single point of color of a larger image.


      CSD-U5-SFLP Representing Numbers Part 1:
        markdown: |
          # Overview

          This lesson introduces the binary number system.  With a set of cards that represent the place values in a binary (base-2) number system, the class turns bits "on" or "off" by turning cards face up and face down, then observes the numbers that result from these different patterns.  Eventually, the pattern is extended to a generic 4-bit system.

          ## Resources
          * [Representing Numbers - Activity Guide](https://docs.google.com/document/d/1Bv2q50lF0wxx9D9n5JzsKFKXXmP8-p6LInO29Lm3Plk/export?format=pdf)
          * [Number Cards - Manipulative](https://docs.google.com/document/d/1UWJdBo0C7wE3jmSCDVTOSdDtRkxtIBqe4ttN0v5GFXM/export?format=pdf)
      CSD-U5-SFLP Representing Numbers Part 2:
        markdown: |
          # Overview

          This lesson addresses how people can keep data secret, even when other people can see it.  The class will look at an encoding method for emojis, then learn a way to encrypt their emoji messages using a keyword.


          ## Resources

          * [Keeping Data Secret - Activity Guide](https://docs.google.com/document/d/1i_s3XXcwG8QpE7dk7GfYkfcekGKTqpD0AOs1ZLvcnco/export?format=pdf)
      CSD-U5-SFLP Solve a Data Problem:
        markdown: |
          # Overview

          To conclude this unit you will design a way to use data to make a recommendation or prediction to help solve a problem of your choosing.

          ## Resources

          * [Make a Recommendation](https://docs.google.com/document/d/1pKeFH1OkWzfg3MFTPCezhK_r4p8xu7QUkPKSf5vV41c/export?format=pdf) - Project Guide
          * [Make a Recommendation](https://docs.google.com/document/d/1ZdA-VIdyPZLONBFr7ojFeNfHCHYmacbrrphiR31k6Bk/export?format=pdf) - Peer Review
      'CSD: getText vs getNumber':
        markdown: "# getText vs getNumber\n\nComputers store information in different ways. Two different ways a computer stores information are strings and numbers. \n\n`getNumber()` tries to get the value of whatever you are asking about as a number.\n\n`getText()` gets the value of whatever you are asking about as a string. Strings are often marked in your programs with `\" \"`. For example all the names of your IDs are strings. You can use `getText()` to retrieve a number but just know that it will be surrounded by `\" \"`.\n\n## Why does that matter?\n\nUsually it is fine to get everything as a string but when you want to do mathematical operations you need numbers not strings.  When you try to add two strings together the computer thinks you want to combine the two strings together into one string. \n\nSo when you say `\"2\" + \"2\"` the computer evaluates that to `\"22\"`.\n\nWhere as when you say `2 + 2` (notice no `\" \"`) the computer evaluates that to `4`.\n"
      'CSD: setProperty':
        markdown: "# How setProperty Works\n\n`setProperty` is the code that lets you set properties of UI elements like color, width, font size, etc.  Any property you can set in Design Mode can also be set in code using `setProperty`\n\n<br><br>\n\n<div style=\"column-count: 3; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 3; width: 100%\">\n\n<p style=\"break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;\">\n\n\t<span style=\"color: #00adbc; font-size: 150%\">1.</span> In Code Mode you can find <code>setProperty</code> in the UI Controls toolbox.<br>\n\n\t<span style=\"color: #00adbc; font-size: 150%\">2.</span> Choose the id of the UI element you want to change a property of\n</p>\n\n<p style=\"break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;\">\n\n\t<span style=\"color: #00adbc; font-size: 150%\">3.</span> The pulldown menu shows a list of properties that you can set for that element. It matches the list of properties that you see for an element in <strong>Design Mode</strong>\n</p>\n\n<p style=\"break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;\">\n\n\t<span style=\"color: #00adbc; font-size: 150%\">4.</span> The last parameter is the value you want to set for that property. We're interested in background-color which has a variety of values you can give it.\n</p>\n\n\n</div>\n\n<img src=\"https://images.code.org/b7736bdcbde48f7951ebdc87135dd46c-image-1480536740764.png\" style=\"display: block; margin: auto\">\n\n\n## How to set the \"background-color\"\n\n<span style=\"color: #00adbc; font-size: 150%\">1.</span> *background-color* is a string (in quotes) that represents the color. Typically you state the color as a hex value or as three decimal RGB values like *\"rgb(255,0,0)\"*\n\n<img src=\"https://images.code.org/43291bf1c067145771bf88a147d74d26-image-1480538343306.png\" style=\"display: block; margin: auto\">\n"
      CSDU6 Innovation:
        markdown: |+
          # Innovation Research

          Choose one of the following topics to look into. You'll want to find information about some of the most recent innovative computing devices related to your category.

          ## Wearable Technology
          Wearable technology includes any form of computing that is designed to be worn by the user, whether it's embedded into the clothing or worn as an accessory. Many wearables, such as smart pedometers, overlap somewhat with health and safety as the device is both wearable _and_ intended to help improve your personal health.

          ## Health and Safety
          The broad range topic includes both consumer technology (things that you might use to improve your health or safety) and professional technology (gear that a doctor or other professional might use).

          ## Agriculture
          Agriculture might not be an obvious topic, but technological innovations have had a huge impact on how we approach farming. This includes incorporating computers into existing farm equipment, using sensors and robotics to monitor crops, and analyzing data to improve efficiency and sustainability.

          ## Manufacturing
          Advancements in rapid prototyping, industrial robotics, and automation have had a major impact on how goods are produced. Whether it's technology to enable affordable small-scale manufacturing (like 3D printers and laser cutters) or the integration of computers into factory work, there are many interesting areas to research here.

          ## Art and Design
          The intersection of artistic expression and computing can yield impressive and unexpected results. While you are less likely to find commercially available products related to art and design, you will find a wide variety of homemade creations that use all manners of computing devices in creative and expressive ways.

          ## Smart Home
          The dream of a house that understands and even anticipates your needs is closer than ever. Whether controlled explicitly through voice commands, or by using sensors to monitor and respond to changing conditions, smart home devices take care of any number of mundane or repetitive tasks around the house.


          # Research Considerations

          As you research devices on your topic, keep the following considerations in mind:

          * Focus on hardware based solutions over software programs
          * Focus on recent innovations over old news
          * Follow what interests you

          In addition to the recommended sites listed for each topic, consider looking towards the various crowd funding websites (such as Kickstarter and Indiegogo) to see the products that haven't quite made it off the ground yet.

      CSDU6 Innovation_2018:
        markdown: |+
          # Innovation Research

          Choose one of the following topics to look into. You'll want to find information about some of the most recent innovative computing devices related to your category.

          ## Wearable Technology
          Wearable technology includes any form of computing that is designed to be worn by the user, whether it's embedded into the clothing or worn as an accessory. Many wearables, such as smart pedometers, overlap somewhat with health and safety as the device is both wearable _and_ intended to help improve your personal health.

          ## Health and Safety
          The broad range topic includes both consumer technology (things that you might use to improve your health or safety) and professional technology (gear that a doctor or other professional might use).

          ## Agriculture
          Agriculture might not be an obvious topic, but technological innovations have had a huge impact on how we approach farming. This includes incorporating computers into existing farm equipment, using sensors and robotics to monitor crops, and analyzing data to improve efficiency and sustainability.

          ## Manufacturing
          Advancements in rapid prototyping, industrial robotics, and automation have had a major impact on how goods are produced. Whether it's technology to enable affordable small-scale manufacturing (like 3D printers and laser cutters) or the integration of computers into factory work, there are many interesting areas to research here.

          ## Art and Design
          The intersection of artistic expression and computing can yield impressive and unexpected results. While you are less likely to find commercially available products related to art and design, you will find a wide variety of homemade creations that use all manners of computing devices in creative and expressive ways.

          ## Smart Home
          The dream of a house that understands and even anticipates your needs is closer than ever. Whether controlled explicitly through voice commands, or by using sensors to monitor and respond to changing conditions, smart home devices take care of any number of mundane or repetitive tasks around the house.


          # Research Considerations

          As you research devices on your topic, keep the following considerations in mind:

          * Focus on hardware based solutions over software programs
          * Focus on recent innovations over old news
          * Follow what interests you

          In addition to the recommended sites listed for each topic, consider looking towards the various crowd funding websites (such as Kickstarter and Indiegogo) to see the products that haven't quite made it off the ground yet.

      CSDU6 Innovation_2018_2019:
        markdown: |+
          # Innovation Research

          Choose one of the following topics to look into. You'll want to find information about some of the most recent innovative computing devices related to your category.

          ## Wearable Technology
          Wearable technology includes any form of computing that is designed to be worn by the user, whether it's embedded into the clothing or worn as an accessory. Many wearables, such as smart pedometers, overlap somewhat with health and safety as the device is both wearable _and_ intended to help improve your personal health.

          ## Health and Safety
          The broad range topic includes both consumer technology (things that you might use to improve your health or safety) and professional technology (gear that a doctor or other professional might use).

          ## Agriculture
          Agriculture might not be an obvious topic, but technological innovations have had a huge impact on how we approach farming. This includes incorporating computers into existing farm equipment, using sensors and robotics to monitor crops, and analyzing data to improve efficiency and sustainability.

          ## Manufacturing
          Advancements in rapid prototyping, industrial robotics, and automation have had a major impact on how goods are produced. Whether it's technology to enable affordable small-scale manufacturing (like 3D printers and laser cutters) or the integration of computers into factory work, there are many interesting areas to research here.

          ## Art and Design
          The intersection of artistic expression and computing can yield impressive and unexpected results. While you are less likely to find commercially available products related to art and design, you will find a wide variety of homemade creations that use all manners of computing devices in creative and expressive ways.

          ## Smart Home
          The dream of a house that understands and even anticipates your needs is closer than ever. Whether controlled explicitly through voice commands, or by using sensors to monitor and respond to changing conditions, smart home devices take care of any number of mundane or repetitive tasks around the house.


          # Research Considerations

          As you research devices on your topic, keep the following considerations in mind:

          * Focus on hardware based solutions over software programs
          * Focus on recent innovations over old news
          * Follow what interests you

          In addition to the recommended sites listed for each topic, consider looking towards the various crowd funding websites (such as Kickstarter and Indiegogo) to see the products that haven't quite made it off the ground yet.

      Choosing Good IDs:
        markdown: "# Choosing Good IDs\n\n**Good IDs** are **meaningful and descriptive**.\n\nJust like you want good names for functions, you will want an ID to describe the intended purpose of the element.  \n\nFor example, if you have many buttons in your program, you will want to give each an ID that describes what the button does. \n\nSo, instead of this:\n \n * `button1` and `button2`\n\nYou might make IDs that convey not only that it's a button but what you intend the button to be used for, like:\n\n * `homeButton` and `saveButton` or\n * `buttonHome` and `buttonSave` or\n * `homeBtn` and `saveBtn`\n * it's up to you!\n\n<img src=\"https://images.code.org/b33be9ee1521f2aa80fedcf22c929d44-image-1476910499958.png\" style=\"display: block; margin: auto;\">\n\n# Rules About IDs\nIn making descriptive and meaningful IDs there **are some rules about IDs** you need to know.  IDs...\n\n* are case-sensitive.\n* cannot contain spaces.\n* *must* begin with a letter (A-Z or a-z) and may be followed by any number of digits and letters.\n* can contain hyphens (\"-\"), underscores (\"_\"), colons (\":\"), or periods (\".\").\n\n**Case-sensitive?**\n\nThis means there is a difference between `HomeButton` and `homeButton`  (notice the Capital H on the first one).\n\nThese differences seem annoying at first, but you get used to it, and actually appreciate the fact that the computer requires such precision.\n\nThere are a few common styles for capitalizing and spelling multi-word IDs:\n\n* **\"Camelcase\"** -- `aCamelcaseNameMightLookLikeThis`\n* **Underscores** -- `Some_people_like_to_use_underscores_to_separate_words`\n* **dashes** -- `Others-like-to-use-hyphens-or-dashes`\n\nWhatever you choose is up to you.  It's your style.  It just helps to be consistent.\n\n\n\n\n"
      ConditionalsWithCards-Unplugged:
        markdown: |
          # Conditionals With Cards

          Play a card game and create rules like "If I draw a red card, I get a point" and "If I draw a black card, you get a point."
      Crowdsourcing-Unplugged:
        markdown: |
          # Crowdsourcing

          See how crowdsourcing, a problem-solving technique common in computer science, can help you complete a task together as a classroom more efficiently than if you had to do it alone.
      Dance_Party_extras_intro:
        markdown: |
          # Keep on Dancing!

          For part 2, you're going to create your own project. There are no puzzles here - instead there are a bunch of projects that show different ways to make more complex dance parties.

          You can do these levels _in any order_. Jump around to look at how something was done in a previous level, or combine concepts between the projects. Try them all, pick your favorite, and spend your time working on adding to that project to make it your own.

          <a class="btn btn-large btn-primary next-stage submitButton pull-right">Continue</a>

          <div class="clearfix"></div>

          <div style="float: left; margin: 10px">
          <a href="2">
          <h2>
          Get in Formation
          </h2>

          <img src="https://images.code.org/70ad4cbc12321f301d43161f847bdee4-image-1541746835274.gif"></a>

          </div>

          <div style="float: left; margin: 10px">
          <a href="3">
          <h2>
          Where'd They Go?
          </h2>

          <img src="https://images.code.org/524010de61c9af76e98bd2a5ccdba461-image-1541746855689.gif"></a>

          </div>

          <div style="float: left; margin: 10px">
          <a href="4">
          <h2>
          Dance Crews
          </h2>

          <img src="https://images.code.org/f4ccfd43f9a15d68a339b449be8e96c3-image-1541746870889.gif"></a>

          </div>

          <div style="float: left; margin: 10px">
          <a href="5">
          <h2>
          Quarter Notes
          </h2>

          <img src="https://images.code.org/6b538efe77ea6e19f1428f7c0e45c621-image-1541746886875.gif"></a>

          </div>

          <div style="float: left; margin: 10px">
          <a href="6">
          <h2>
          Bass, Mid, Treble
          </h2>

          <img src="https://images.code.org/3825556a395fd31bc4f767ca7ea5c566-image-1541746894197.gif"></a>

          </div>

          <div style="float: left; margin: 10px">
          <a href="7">
          <h2>
          Speed it Up, Slow it Down
          </h2>

          <img src="https://images.code.org/d7f35c686ef0a9c5a6975889fd7c566b-image-1541746900730.gif"></a>

          </div>
      Design a Screen for your App_2018:
        markdown: |
          # Mocking Up Your App

          Now that you have some practice laying out elements in App Lab, you can start working on mocking your own app. With your group, divvy up the screens so that everyone is working on a different screen.

          Because you'll be dividing the work up, you'll want to do some planning ahead of time to decide on a common look and feel for your pages. For example, you'll want to agree on things such as:

          * Where do navigation buttons go?
          * What colors will you use for backgrounds, text, and buttons
          * What's the general style and layout?

          # Namespacing

          In the next lesson you will combine all of your team members' screens into one app. To make sure that the IDs on one page don't conflict with another you'll need to include a unique _namespace_ for your page. This will be something you add to the beginning of every id so that your element ids don't conflict with others when you merge everyone's screens together. Your namespace should be the ID of your screen with an underscore at the end. For example, if you are making the home page, you might use "home_" as your namespace - leading to ids such as:

          * "home_title"
          * "home_loginButton"
          * "home_logo"
      Design a Screen for your App_2018_2019:
        markdown: |
          # Mocking Up Your App

          Now that you have some practice laying out elements in App Lab, you can start working on mocking your own app. With your group, divvy up the screens so that everyone is working on a different screen.

          Because you'll be dividing the work up, you'll want to do some planning ahead of time to decide on a common look and feel for your pages. For example, you'll want to agree on things such as:

          * Where do navigation buttons go?
          * What colors will you use for backgrounds, text, and buttons
          * What's the general style and layout?

          # Namespacing

          In the next lesson you will combine all of your team members' screens into one app. To make sure that the IDs on one page don't conflict with another you'll need to include a unique _namespace_ for your page. This will be something you add to the beginning of every id so that your element ids don't conflict with others when you merge everyone's screens together. Your namespace should be the ID of your screen with an underscore at the end. For example, if you are making the home page, you might use "home_" as your namespace - leading to ids such as:

          * "home_title"
          * "home_loginButton"
          * "home_logo"
      DesigningForAccessibilityMarkdownLevel_2019:
        markdown: |
          # Designing for Accessibility

          * In the world of computer science, **accessibility** is about creating technology for people with disabilities.
          * Disabilities include physical, auditory, visual, and many others.
          * Disabilities are diverse and impact people in different ways, including how they use technology like **smartphone apps**.
          * Designing apps that are accessible for people with disabilities makes those apps better for everyone else as well!

          ![](https://images.code.org/0c670d0d9078657a870df0ca799492cb-image-1557166420066.png)
      DigitalCitizenship-Unplugged:
        markdown: |
          # Digital Citizenship

          Some information is not safe to share online. This lesson will help you learn the difference between safe and private information.
      DigitalFootprint-Unplugged:
        markdown: |
          # Your Digital Footprint

          Putting information about yourself online creates a digital footprint.
      DigitalSharing-Unplugged:
        markdown: |
          # Digital Sharing

          In this lesson you'll consider the challenges and benefits of respecting ownership and copyright, particularly in digital environments.
      EnvelopeVariables-Unplugged:
        markdown: |
          # Envelope Variables

          Variables allow for a lot of freedom in computer science. This lesson helps to explain what variables are and how we can use them in many different ways.
      Example App Types_2018:
        markdown: |
          # Example App Types

          In the following levels you see several different example apps. They will give you an idea of what the UI (User Interface) could look like for apps with different goals.

          For each example app:

          * Click through the example to get a feel for how it functions.
          * In your activity guide, make a note of any features or UI elements you find and what they are used for.
          * Discuss with your groups how that app and any of its UI features could be applied to your chosen topic.

          # A Note About Functionality

          These apps are _prototypes_; they allow a user to interact with the design without worrying about the underlying functionality. For example, when you take use the Quiz App, each question will always respond the same way, regardless of which answer you choose.

          By focusing on an interactive prototype first you can learn a lot about how users might use your app before investing too much energy in making it actually work.
      Example App Types_2018_2019:
        markdown: |
          # Example App Types

          In the following levels you see several different example apps. They will give you an idea of what the UI (User Interface) could look like for apps with different goals.

          For each example app:

          * Click through the example to get a feel for how it functions.
          * In your activity guide, make a note of any features or UI elements you find and what they are used for.
          * Discuss with your groups how that app and any of its UI features could be applied to your chosen topic.

          # A Note About Functionality

          These apps are _prototypes_; they allow a user to interact with the design without worrying about the underlying functionality. For example, when you take use the Quiz App, each question will always respond the same way, regardless of which answer you choose.

          By focusing on an interactive prototype first you can learn a lot about how users might use your app before investing too much energy in making it actually work.
      ForLoopFun-Unplugged:
        markdown: |
          # For Loop Fun

          We know that loops allow us to do things over and over again, but now we're going to learn how to use loops with extra structure built right in.
      GettingLoopy-Unplugged:
        markdown: |
          # Getting Loopy

          This lesson introduces the programming concept of loops through a dance activity.
      GoingPlacesSafely-unplugged:
        markdown: |
          # Going Places Safely

          The Internet is a powerful, but sometimes dangerous place. Stay safe while navigating the Internet!
      GraphPaperProgramming-Unplugged:
        markdown: |
          # Graph Paper Programming

          Write algorithms that your classmates can use to draw pictures.
      HappyLoops-Unplugged:
        markdown: |
          # Happy Loops

          In this lesson, you will learn about loops!

          ![](https://images.code.org/6aac7f675f0c69033f42ccac6a733f68-image-1557769673400.png)
      HappyMaps-Unplugged:
        markdown: |
          # Happy Maps

          Create an algorithm to move a character through a maze.
      Internet Simulator Setup:
        content1: description here
        markdown: "# Code.org's Internet Simulator\n\n_Note: This instructions listed in this tutorial are for teachers wishing to use the Internet Simulator as a standalone tool, separate from the Code.org Computer Science Principles curriculum. If you are planning to use the activities designed as part of the Code.org CSP curriculum, then please head to the [CSP curriculum page.](https://code.org/educate/csp)_\n\n### Contents\nThere are 3 pages of background and information contained here:\n\n* What is the Internet Simulator? Overview (see below)\n* [setup instructions](/s/netsim/stage/1/puzzle/2)\n* [FAQ](/s/netsim/stage/1/puzzle/3)\n \n### What is the Internet Simulator? An Overview:\n\nThe Internet Simulator is a tool developed by Code.org for our new high school [Computer Science Principles](https://code.org/educate/csp) class. The tool is designed to let students get a hands on experience experimenting with (and solving) different kinds of problems associated with networked computers. The Internet Simulator is used in multiple lessons throughout Units 1 and 2 in our curriculum to successively build up the different layers of the Internet. \n\nIf you are considering using the tool in your classroom with activities you design, we would recommend you get familiar with the tool via our [lesson plans](https://curriculum.code.org/csp/unit1). **The setup instructions** on the next page are for teachers who would like to use the Internet Simulator separate from the Code.org CSP curriculum. \n\nThe tool itself doesn't _teach_ these concepts, but rather provides an environment for multiple students to come together and send binary, decimal, or ascii based messages to each other or other classmates.  **The environment can be configured** in a variety of ways to expose different kinds of problems, visualize data and connections between hosts, and support learning of various concepts related to the Internet.\n\nThe Internet Simulator was designed to be used in a *classroom* with students working collaboratively in-person to solve problems. Often these problems involve inventing a communcation protocol, or inventing ways to encode information in a structred way that makes transporting it over the Internet feasible. \n\n**In Code.org's Computer Science Principles curriculum** we typically structure lessons and activities in the following way:\n\n* **First present students with a challenge**\n * e.g. The physical internet is inherently unreliable and can drop messages\n* **Give an opportunity to experiment with the simulator to get a sense of issues** \n * e.g. look at the router logs to discover that 10-20% of all messages are dropped and packets can be routed out of order\n* **Give an opportunity to invent their own solution to the challenge** \n  * e.g. invent their own protocol for how to reliably send messages on this unreliable network\n* **Finally, students research how that protocol or invention works \"in the real world\"**\n * e.g. Research how TCP really works and watch a video\n\n### What Can The Internet Simulator be Configured To Do?\n\nAt its most basic, the Internet Simulator can communicate a single bit of information via a single shared wire with no coordination or synchronization.  At it's most advanced it can simulate unreliable connections over multiple routers, using IP addresses, a DNS, and fixed sized packets requiring the creation of protocols similar to TCP/IP or HTTP. \n\nWe have set up the Internet Simulator in a variety of configurations that are conducive to teaching certain topics.  But if using the Internet Simulator for class you should be aware of some user interface settings that you may wish to control or tell your students to setup in a particular way.  \n\nFor example: one of the features of the Internet Simulator is that you can show the binary, decimal, hex and ASCII representations of any data you send around.  In some configurations the user can also set the \"chunk size\" to dictate how bits are interpreted.  For a lesson of your own design, you might choose one of the configurations we have provided, but might need to mandate that students only show a particular representation of the bits, or maybe you want the chunk size to be set to a particular value.\n\nThe larger point is that the configurations provided here are meant to be a starting point for teaching a particular topic.  You might need to employ some ingenuity and teaching strategies to further refine the use of the Simulator to fit your needs.\n\n\n <br><br>\n<img src=\"https://images.code.org/0bf9799b2bec2756c1664b84e12cbe27-image-1438642671141.57.13.png\" width=\"600px\" style=\"margin:0 100px\"/>\n<br><br>\n\n\n\n    \n\n\n_Next up: Setup instructions_\n\n<a class=\"btn btn-large btn-primary next-stage submitButton\">Continue</a>\n"
        title: Internet Simulator Setup
      Internet Simulator Setup 2:
        content1: description here
        markdown: "# Internet Simulator: Setup Instructions\n\n1. **Create a section in Code Studio.** For the students in your class to be able to communicate with each other, they all need to be associated with the same section in Code Studio. Signed in as a teacher account, you will need to create a section that all of your students join. To create a section:\n * Navigate to the [sections](https://code.org/teacher-dashboard#/sections) area of the teacher dashboard\n * Click the 'New Section' button. We recommend choosing Login Type 'Email' and 'cspunit1' for the course. \n <br>\n<img src=\"https://images.code.org/9e9961a44b0a2f76ab92e6f9634d8f55-image-1438640255737.17.04.png\" width=\"600px\" />\n<br><br>\n2. **Have students join your section.** Once the section is created, click the 'Manage Students' link for the section. You will see a section code that you can ask students to join once they have created their own Code Studio accounts.\n<br>\n<img src=\"https://images.code.org/9b8863dbb5a8e229e9bc1c4fc74ddd22-image-1438641516264.png\" width=\"400px\" />\n<br><br>\n3. **Provide students with the URL to the Internet Simulator version you want to use.** We have created several different configuations of the Internet Simulator available at [code.org/internetsimulator](http://code.org/internetsimulator). When you find a configuration that works for your activity, share the URL with students. If they are all in the same section, then they will automatically be able to connect with each other when they arrive at the same URL.  \n\n_Next up: Frequently Asked Questions_\n\n<a class=\"btn btn-large btn-primary next-stage submitButton\">Continue</a>\n\n"
        title: title
      Internet Simulator Setup 3:
        content1: description here
        markdown: |
          # Internet Simulator: FAQ

          #### Where can I find the activities you've designed to use with the Internet Simulator?
          The activities we've designed for our Computer Science Principles curriculum, including the specific Internet Simulator configurations can be found in the Unit lesson plans [here](https://code.org/educate/csp). Many of the lesson plans have "Teacher Tips & Tricks" support videos that show demonstrations of the Internet Simulator used as a part of the classroom activities. You can use these activities as is, or feel free to modify to best suit your class!

          #### Can I customize the Internet Simulator for my class?
          Right now, we unfortunately don't have a way for people outside of Code.org to create specific configurations and instructions for the Internet Simulator. We've tried to expose a variety of different configurations that can hopefully work for your classroom and activity. Long-term, we'd love to have a way to let others configure the tool.

          #### My students can't see each other when they go to the URL I give them for the Internet Simulator. What do I do?
          For students to see each other in the lobby of the Internet Simulator, they'll need to be in the same section. Double check that you've completed the section setup instructions from the previous page, and that the students in question have joined that specific section code. Also, some students may be in multiple sections if they've done coursework with Code.org before, so make sure they know the name of your section and have picked it in the dropdown before entering the lobby.


          <a class="btn btn-large btn-primary next-stage submitButton">Continue</a>
        title: Internet Simulator Setup 3
      Internet-Unplugged:
        markdown: |
          # The Internet

          Build your own Internet in the classroom just using pieces of paper.
      MoveItMoveIt-Unplugged:
        markdown: |
          # Move It, Move It

          Use a map and give commands to reach the goal.
      Multi-Screen Apps:
        content1: description here
        markdown: |
          # Making Multiple Screens

          You may imagine that a typical app has a number of "screens" or views that user goes through as part of using your app.  Below is a typical example with a welcome screen, a screen that plays a game and a game over screen.

          <img src="https://images.code.org/27065f81b2bf53dea099a76868f66e8e-image-1477324003598.png" style="display: block; margin: auto">

          ## What's a screen, anyway?

          A screen is just a UI element like anything else in Design Mode.  But it has a few special properties:

          1. A screen is a UI element that contains other UI elements.
          2. Only one screen can be visible at a time
          3. Only elements that "belong" to a screen will visible when that screen is active.
          4. **Multiple screens, but only one coding workspace**
            * Even though your *design elements* might be spread across multiple screens, your code does not get broken up like that.
            * There is only one coding workspace, that will still house all of your code for the app.

          ## How to Make a new Screen

          <div style="float: left; width: 33%">
          There are two ways to add a screen to your app.  First, make sure you're in <em>Deisgn Mode</em>.
          <br><br>
          <span style="font-weight: bold; color: #00adbc; font-size: 200%;">1.</span>
          Either choose <em>New Screen...</em> from the pulldown menu at the top of the display area. <strong>Note:</strong> you also use this pulldown menu to switch between screens in design mode.
          <br><br>
          <span style="font-weight: bold; color: #00adbc; font-size: 200%;">2.</span>
          Or drag and drop a Screen UI element from the toolbox. <strong>Heads-up: </strong>As soon as you release the screen element, the app will show you a <strong>new blank screen.</strong> You can get back to other screens using the pulldown menu at the top.

          </div>

          ![](https://images.code.org/ed8f45d70a65329597c1623ddd756249-image-1477165123570.png)

          ## Set a Screen's Properties

          <div style="column-count: 4; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 4; width: 100%">

          <p><span style="font-weight: bold; color: #00adbc; font-size: 200%;">1.</span>
          Use this pulldown menu to select the screen you want to work on. The list will contain the IDs of all the screens you've created.</p>

          <p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;"><span style="font-weight: bold; color: #00adbc; font-size: 200%;">2.</span>
          Click on a blank area of the background to select the screen and set its properties. </p>

          <p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;"><span style="font-weight: bold; color: #00adbc; font-size: 200%;">3.</span>
          Screens also have IDs.  Like other UI elements, it's a good idea to <em>give your screens descriptive and meaningful IDs</em>.  It makes writing code so much easier.</p>

          <p><span style="font-weight: bold; color: #00adbc; font-size: 200%;">4.</span>
          If your screen is full with UI elements and there's no blank area to click to select it, use this pulldown menu. It lists all the UI elements that are part of this screen, including the screen itself.</p>
          </div>

          <img src="https://images.code.org/5f8934e6ae0fc2d9dfde8c9a0d93eec2-image-1477249243769.png" style="display: block; margin: auto;">

          <div style="column-count: 2; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 2; width: 50%; float: right">

          <p><span style="font-weight: bold; color: #00adbc; font-size: 200%;">5.</span>
          Click this button to make this screen the "default screen" which means the screen that will show first when the app is run.</p>



          <p><span style="font-weight: bold; color: #00adbc; font-size: 200%;">6.</span>
          Screens don't have many properties but you can set the background of the screen to a color or an image. Images are stretched or squeezed to fit the screen.</p>

          </div>
          <div style="clear: both">&nbsp;</div>

          ## Using the *setScreen* command to change screens with code

          The `setScreen` command changes the screen to show whatever screen you want.  You specify the screen by its ID.

          <img src="https://images.code.org/005222ed01ade7940963ce149d637286-image-1477168080948.png" style="display: block; margin: auto">

          <div style="column-count: 3; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 3; width: 100%">

          <p><span style="font-weight: bold; color: #00adbc; font-size: 200%;">1.</span>
          Find <em>setScreen</em> in the UI Elements toolbox and drag it into the code workspace.</p>

          <p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;"><span style="font-weight: bold; color: #00adbc; font-size: 200%;">2.</span>
          Most of the time you change the screen in response to some user-event. In this case <em>setScreen</em> is being added to a "click" event handler for the image with id: <em>smileyFace</em></p>

          <p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;"><span style="font-weight: bold; color: #00adbc; font-size: 200%;">3.</span>
          Select the ID of the screen you want to change to. In this case, when smiley face is clicked on the screen that says "hello" we want to change to the screen that says "goodbye."</p>

          <p><span style="font-weight: bold; color: #00adbc; font-size: 200%;">4.</span>
          <strong>Key idea: Multiple Screens - One Coding Workspace.</strong> This is the code that handles a "click" event for an <em>image that is on a different screen</em> - the <em>goodbyeScreen</em>. You can't see that image right now, or that screen, because the screen isn't selected.  However, the code for it still goes here.</p>

          </div>
        title: title
      MyLoopyRoboticFriends-Unplugged:
        markdown: |
          # My Loopy Robotic Friends

          Make your programs more shorter using loops!
      MyRoboticFriends-Unplugged:
        markdown: |
          # My Robotic Friends

          Learn to program by writing code for your friends!
      New Challenge Introduction:
        content1: description here
        markdown: "### New Challenge: Crack a Random Substitution Cipher...with a new widget\n\nWhat if instead of shifting the whole alphabet, we mapped every letter of the alphabet to a random different letter of the alphabet? This is called a **random substitution cipher.**\n\n![](https://images.code.org/7837e7fef2f38659f4bf51a29b6dc4d3-image-1473863470440.gif)\n\nNow, instead of the secret message being encoded with a simple alphabetic shift, you'll face messages encoded with **random substitution**.  \n\n\n\nThis is much harder to crack and requires a more sophisticated tool, so...\n\nWhen you click continue, you'll see a **new, more sophisticated version of the encryption tool** that shows you lots of different stuff.\n\nBut what it does is bit of a mystery!  \n\n### Your Task:\n\n * Figure out what is going on in this new version of the tool\n * What information is being presented to you?\n * Figure out what the tool lets you do\n * As usual: you can't break it.  So click on things, poke around.\n * If you figure it out you might be able to crack a message encoded with random substitution.\n \n### Hint\n\n* Did you know that **E** is the most common letter used in English?\n\n### Reconvene and Discuss\n After some time playing with it, you should get together with someone - partner, small group, whole class - to discuss what you found and verify that you know what's going on and the various ways you can use the tool.\n\n\n"
        title: title
      OPD-K5 About:
        markdown: "# Getting Started: About this Course\n\n## Course Overview\n\nThis course is intended as an introduction to Code.org's Computer Science Fundamentals curriculum and resources for teachers. Through reading, viewing videos, completing interactive puzzles and reflecting on your learning, you'll develop your own understanding while preparing to teach computer science in your classroom.\n\n## Learning Objectives\n\nBy completing this online course, participants will:\n\n- Learn the basics of computer science \n- Review best practices for teaching these basics to your students \n- Access free curriculum and resources for teachers \n- Plan for how you might get started teaching Computer Science Fundamentals\n- Connect with a community of fellow educators who are making positive change in their classrooms through coding \n\n## Pre-requisites\n\nNo previous experience with coding or computer science education is assumed. This is a beginner's course.\n\n> **A Note About Audience:** This course focuses on Code.org's free Computer Science Fundamentals curriculum in the context of  K-5 learners. Although many of the same concepts can be applied to any computer science course, if you wish to teach a more in-depth computer science curriculum than Computer Science Fundamentals (for example, one of our [Middle](https://code.org/educate/csd) or [High school](https://code.org/educate/csp) courses), we recommend you pursue more [in-depth or ongoing professional development opportunities](https://code.org/educate/professional-learning/middle-high).\n\n## Course Duration\n\nCompleting this online course should take between 3-7 hours, depending on your prior knowledge and how deeply you want to dive into the Code.org resources.\n"
      OPD-K5 Assessment:
        markdown: "# Planning > Other resources\n\nWhen you're logged into Code.org as a teacher, you have access to many features that your students do not. You've already seen how to find a course, create a section, and assign your class to that section. However, you can also: \n\n- **Track Student Progress**: [Assess the learning](https://support.code.org/hc/en-us/articles/115000693231-Viewing-student-progress) of all of your students.\n- **Your Course Progress**: View your own personal progress on Code.org lessons, as a learner. Your students will also be able to see their progress in their accounts. However, as a teacher, you are also able to view lesson plans and see the solutions for every puzzle.\n- **Help and Community**: Access [support.code.org](https://support.code.org/), where you can post questions, respond to other teacher's posts, and read FAQs by Code.org staff. On this page, you'll also be able to directly contact Code.org with any questions you may have.\n- **Professional Development**: Access [in-person training](code.org/professional-development-workshops) for teachers.\n- **Computer Science Guest Speakers**: [Find smart, passionate and engaging tech industry professionals](https://code.org/volunteer/local) who would love to talk to your class about their jobs. \n\n<br/>\n---\n> ## Visit support.code.org\n> If you get stuck or have questions, make sure to check our support articles on support.code.org! You can also reach out to us directly through that page, as well.  [our forum](http://forum.code.org/t/teaching-conditionals/406/1).\n\n> <a href=\"http://support.code.org\" target=\"blank\"><button class=\"plc\">Get help >></button></a>\n\nAfter commenting in the forum, return here and click below to move on to the next stage.\n"
      OPD-K5 CS:
        markdown: "# Getting Started > Why Computer Science (CS) Fundamentals?\n\nYou'll complete this free, self-paced course using the same learning platform you can use in your classroom with your students. \n\nLet's start by learning a bit about what Computer Science (CS) Fundamentals is, and how it's worked for teachers and students around the globe. In the next level, we'll cover how to interact with the CS Fundamentals learning platform, which you'll be using to complete this course.\n\n<iframe width=\"640\" height=\"390\" src=\"https://youtubeeducation.com/embed/rNIM1fzJ8u0\" frameborder=\"0\" allowfullscreen></iframe>\n\n**[Can't see the video? Click here to download.](http://videos.code.org/k5-pd/how-to-k5-workshops.mp4)**\n\n> ## Reflect\nWhat are your first impressions of CS Fundamentals?\n\n> [Tweet your thoughts](https://twitter.com/teachcode) and be sure to tag @teachcode in your tweet so we can respond.\n\n> <a href=\"http://ctt.ec/Bfjw3\" target=\"blank\"><button class=\"default\">Share on Twitter >></button></a><br><br>\nDon't have a Twitter account? You can also find us on [Facebook](https://www.facebook.com/Code.org/) or [Instagram](https://www.instagram.com/codeorg/).\n"
      OPD-K5 CS Courses:
        markdown: "# Planning > Getting started on Code.org\n\n\n## Step 1: Choose a course\nAll of our courses -- from pre-readers to high schoolers -- are listed in our **[course catalog](https://studio.code.org/courses)**. To find the CS Fundamentals lessons that you have been practicing with, go to our **[elementary page](https://code.org/educate/curriculum/elementary-school)** and scroll down to the \"Courses\" section. All our courses are available at no cost. Chat with colleagues at your school to determine how the course curriculum can be integrated with a variety of subjects.\n![](https://images.code.org/37dd42348eba605513fd0b1f17d1409c-image-1549066063927.png)\n***\n## Step 2: Set up your classroom section\nSet up a classroom section to view your student's progress, print login cards for your students, manage their accounts, and print certificates they can bring home when they finish the course. Click this link to **[watch a brief video](https://code.hosted.panopto.com/Panopto/Pages/Viewer.aspx?id=56d32934-3f67-48db-98db-e66e9152df7b)** that demonstrates how to set up your first computer science class on Code.org. You can also find the steps in **[this support article](https://support.code.org/hc/en-us/articles/115000488132-Creating-a-classroom-section)**.\n![](https://images.code.org/26b023ea019f33492aebea43eb6a1dfe-image-1549065670221.png)\n***\n## Step 3: Assign the course to your section\nClick into the course that you are teaching -- you should see a screen that looks like the one below. You can then click \"Assign Course\" and assign that course to one of your sections. \n![](https://images.code.org/3b81aa7989d237447e525f42646412d4-image-1549065690577.png)\n***\n## Step 4: Start teaching! \nAll it takes is one lesson to bring computer science concepts into your classroom. Once you see your students enthusiasm for CS, go further with daily lesson plans to guide your students, unplugged activities you can do without a computer, and forums to connect to other teachers.\n\n\n"
      OPD-K5 CS Tips:
        markdown: |
          # Getting Started > Navigating this Online Course

          If you've made it this far, congratulations! As you complete this course, you'll familiarize yourself with everything CS Fundamentals has to offer.

          If you find yourself having trouble, the information below will help you navigate and use this space for your professional learning as you complete this online course.

          ---

          ## Stages

          The main professional development page is pictured below. This page is broken up into several __stages__, which each represent a different topic or idea.

          <img src ="https://images.code.org/3f0fa0abc76fa6e6bde06bb4bc705202-image-1548976538784.png" />

          <br/>
          <br/>

          ## Puzzles

          Each stage is made up of levels that we call __puzzles__, which hold individual videos, readings, or questions. Puzzles are indicated as circles with numbers. The colors of the puzzle circle will change based on your progress. In this professional development you'll see the following types of circles:
          <br/>

          <img src ="https://images.code.org/8b3fcfcf0120bed0dc34c014f1f81071-image-1548976153188.png" />

          <br/>
          <br/>

          ## Accessing Puzzles

          Puzzles are visible:
          <p>-On the main professional development page</p>
          <p>-On the header in any other puzzle on the same stage</p>
          <p>-From the header drop-down in any puzzle</p>

          <h4><details>
          <summary style="color:#ffa400;">Click here to see more about accessing puzzles</summary>
          <br>
          <div><em>Once you're finished viewing this, click the arrow above to collapse the section</em></div>
          <br>
          <img src ="https://images.code.org/27681ae1028bb26bcacd9970086c3792-image-1548976069596.gif" />
          </details></h4>

          <br/>

          ## Moving Between Puzzles

          Click "Continue" or "Next Resource" after each puzzle to progress to the next one. Or, at any point, you can jump to a new puzzle by clicking on that number in the header.

          <h4><details>
          <summary style="color:#ffa400;">Click here to see more about moving between puzzles</summary>
          <br>
          <div><em>Once you're finished viewing this, click the arrow above to collapse the section</em></div>
          <br>
          <img src ="https://images.code.org/d28046a78ecb03f9501f3bb7764c7ce8-image-1548976730590.gif" />
          </details></h4>

          <br/>
          <br/>


          > That's all there is to it! Feel free to come back to this level any time if you need a refresher on how this platform works.
      OPD-K5 Celebrate:
        markdown: |
          # Next Steps > Celebrate!

          Congratulations on completing this professional development online course. Provided you have completed all levels in this training, you can download and print a certificate of accomplishment now by completing the following steps:

          1. Visit [this link](https://code.org/certificates?course=Teaching%20Computer%20Science%20Fundamentals).
          2. Enter your name into the input field/box.
          3. Click Print Certificates.
          4. Right click on the image of the certificate and choose "Save Image As..." so you can download to your computer.

          And don't forget... you can return to this online course anytime to review your learning, access links or resources, or just refresh your memory!

          Thank you for your participation! We can't wait to hear how you implement computer science and Code Studio in your classroom!
      OPD-K5 Congrats:
        markdown: "# Events > Review\n\nIn this stage, you made some fun game, combining core concepts and demonstrating your learning. By allowing us to trigger actions based on other parts of our program, events allow us to stretch our coding muscles.  \n\n**Take a moment now to review how events are introduced in the CS Fundamentals curriculum and consider how you might implement the suggested activities in your classroom.**\n\n![](https://images.code.org/8312823c84d52d7119ab0b5e99363d39-image-1549054807593.jpg)\n"
      OPD-K5 CongratsFinal:
        markdown: |
          # Congratulations!

          <img src="https://images.code.org/3e21c6e68f0b6565ba16ad2b63b892f0-image-1434398206115.jpg" width="450px">
          <br/><br/>
          By now you should have completed Stages 1-8 and learned the basic fundamentals of computer science. We hope you had fun along the way! We also hope you've been considering how you might apply your learning to your teaching practice.
          <br/><br/>
          In the next stage, we will consider some best practices for teaching these fundamentals in your classroom.
      OPD-K5 Connect:
        markdown: "# Next Steps > Get Connected\n\nBeyond further formal training, you might consider accessing the code.org community to continue learning informally from your others, or just to find support and a network of peers. Here's how:  \n\n<br/><br/>\n\n> **Continue participating in the code.org teacher Professional Learning Community:** The forum that you've been using throughout this course will be a great resource for you moving forward. You can use it not only to refer back to your learning from this course, but to find support as you continue your journey, or even to offer support to others who need your expertise. Be sure to bookmark it now and visit often: [http://forum.code.org/c/csf](http://forum.code.org/c/csf)  \n\n<br/>\n\n> **Connect with [@teachcode](http://twitter.com/teachcode) on Twitter.**  \n\n<br/>\n\n> **Join the computer science Teachers Association (CSTA):** [The CSTA](http://csta.acm.org/index.html) is an engaged community of educators across the nation that is committed to bringing computer science education to their students while raising awareness of the subject to the general public. They host an annual conference and also have chapters that hold local meetings.\n"
      OPD-K5 Culture:
        markdown: |+
          # Best Practices > Classroom Culture

          How can we promote a healthy classroom culture for our computer science classes? First, we can make sure that everyone in the classroom, including ourselves, understands ways in which we can act like computer scientists and what to keep in mind. This keeps everyone on the same page and makes your work in the classroom easier.

          <img src="https://images.code.org/b5d9ae18a882a4359f096b9c6ade135e-image-1434398703448.jpg" width="450px" style="margin-right:45px; border-radius:10px;">

          ## Ways to act like a computer scientist:

          - **Be curious:** When you're curious, you do things like poke around in different menus, run pieces of code to see what happens, or check the effects of different settings. Curiosity often leads to being able to answer your own questions.
          - **Ask questions:** Collaborate with others once you've tried figuring out a problem yourself.
          - **Be persistent:** Have confidence tackling open-ended complex problems and stick with them. This becomes easier once you've written some successful programs and know how good it feels to overcome a difficult programming problem.
          - **Break big problems down into smaller, more manageable problems:** This is called **decomposing**.
          - **Read through your code:** The computer is following your instructions exactly. Tracing through code step-by-step (as if you were the computer processing the instructions) will help you find errors in your logic or missing steps.
          - **Don't feel bad about making mistakes:** Mistakes are not failure; they just bring you one step closer to creating the right solution or end product.
          - **Step away from your screen:** This can give you a much needed break and often you can come back to a problem with a new perspective.

          ## Things to keep in mind while learning computer science:

          - The world of computer programming moves so fast that there really are no masters. **We're all learners** at different stages but we are still always learners.
          - Programming becomes more comfortable every time you come back to it. **You're not going to be an expert your first time.**
          - There's no way around it, the act of programming and **learning to program takes time, but anyone can do it!**
          - You can share **your own authentic experience learning to code** with your students!

          > ## Reflect:
          > How do you plan to create positive classroom culture when teaching computer science? [Tweet your thoughts](https://twitter.com/codeorg) and be sure to tag @codeorg in your tweet so we can respond.

          > <a href="http://ctt.ec/pdL3a" target="blank"><button class="default">Share on Twitter >></button></a>

      OPD-K5 Outline:
        markdown: |
          # Getting Started > Course Outline

          The course is divided into eleven stages, and each stage is made up of "levels" or "puzzles." Here's an overview of what you'll learn if you complete the entire course:

          ## Stage 1: Getting Started (10-30 minutes)

          By completing Stage 1, you will:

          - Review the course details
          - Practice using Code.org as a learning platform
          - Plan your participation in this course

          ## Stage 2: Computer Science Fundamentals (10-30 minutes)

          By completing Stage 2, you will:

          - Define computer science and review key vocabulary
          - Identify the benefits of teaching and learning computer science
          - Differentiate between "coding" and "computer science"
          - Explain the benefits of beginning to code using visual programming

          ## Stage 3: Looking Ahead (10 minutes)

          By completing Stage 3, you will:

          - Prepare to "master the basics" of computer science by reviewing what's next in the course

          ## Stage 4: Mastering the Basics: Sequencing (10-30 minutes)

          By completing Stage 4, you will:

          - Define "program" and "algorithm"
          - Use the Code.org visual programming engine to write simple programs
          - Reflect on classroom application

          ## Stage 5: Mastering the Basics: Loops (20-45 minutes)

          By completing Stage 5, you will:

          - Define "loops" and explain their importance
          - Practice coding simple loops
          - Reflect on classroom application

          ## Stage 6: Mastering the Basics: Conditionals (20-45 minutes)

          By completing Stage 6, you will:

          - Define "conditionals" and explain their importance
          - Practice coding simple conditionals
          - Reflect on classroom application

          ## Stage 7: Mastering the Basics: Functions (20-45 minutes)

          By completing Stage 7, you will:

          - Define "functions" and explain their importance
          - Practice coding simple functions
          - Reflect on classroom application

          ## Stage 8: Mastering the Basics: Events (30-60 minutes)

          By completing Stage 8, you will:

          - Define "events" and explain their importance
          - Practice coding simple events
          - Reflect on classroom application

          ## Stage 9: Best Practices for Teaching Computer Science (30-60 minutes)

          By completing Stage 9, you will:

          - Review best practices for teaching computer science

          ## Stage 10: Planning (30-60 minutes)

          By completing Stage 10, you will:

          - Explore Code.org resources, including the teacher dashboard
          - Plan for how you might integrate computer science into your practice

          ## Stage 11: Next Steps (10-30 minutes)

          By completing Stage 11, you will

          - Reflect on your learning
          - Plan for next steps you can take to continue your learning
          - Connect with a global community of fellow educators interested in computer science education
          - Share your takeaways and feedback on this course

          > **Note**: Suggested times are provided above to help you plan your learning. Please note that you may want to spend more or less time on a given stage, depending on your prior knowledge, interest and capacity. Keep in mind that this course is entirely self-paced; you can always leave the course and come back or revisit any stage or level at any time.
      OPD-K5 Pair:
        markdown: |
          # Best Practices > Pair Programming

          One important classroom management strategy many educators use is strategic grouping. At Code.org, we suggest trying the strategic grouping strategy used in the real-world offices of the top tech firms: pair programming.

          >**Pair programming** is when two students use one computer to write a program together. The National Center for Women & Information Technology (NCWIT) has a [great resource about the benefits of pair programming](http://www.ncwit.org/sites/default/files/resources/pairprogramming_retainingwomencollaborativelearning_practice.pdf).

          Research shows that pair programming:

          - Leads to higher-quality student programs relative to non-paired students' programs
          - Reduces the so-called "confidence gap" between female and male students, while increasing the programming confidence of all students
          <br/><br/>

          Watch this video to understand how pair programming works, and hear directly from students how it enhances their learning.

          <iframe width="640" height="390" src="https://www.youtube.com/embed/vgkahOzFH2Q" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
          [Can't see the video? Click here](http://videos.code.org/2014/C1-pair-programming.mp4)
          <br/><br/>
          Not only is pair programming beneficial for students, it is also something that is practiced by some professional computer programmers. Watch this video to learn how to introduce pair programming to your students.

          <iframe width="640" height="390" src="https://www.youtube.com/embed/sxToW3ixrwo" frameborder="0" allowfullscreen></iframe>
          [Can't see the video? Click here](https://videos.code.org/levelbuilder/06pairprogramming_small-mp4.mp4)
          <br/>
      OPD-K5 Participation:
        markdown: "# Getting Started > Planning your participation\n\nBefore you begin, take a moment to consider your learning needs, goals and the unique experience of learning in an online, self-paced environment -- especially if this is your first online course!\n\n## You're the Boss\n\nThis self-paced online course is designed to put you in the driver's seat, and give you control over your own learning. ***Please take your time and work through this course at your own pace. Suggested times are given for each stage.*** If you find yourself spending more or less time on a given stage, don't worry! Our main goal is for you to have fun, learn the basics, and apply what you learn in your classroom practice in whatever way works best for you.\n\n## Get Connected\n\nOne way to help stay motivated and focused throughout your learning is to get active in our <a href=\"http://forum.code.org/c/plc\" target=\"_new\">Professional Learning Community (PLC) forum</a>. \nStart by introducing yourself there in our <a href=\"http://forum.code.org/t/welcome-please-introduce-yourself/410\" target=\"_new\">\"Introductions\" thread</a>. Throughout the course, you'll use the forum to asynchronously share your thoughts, takeaways and questions with others who are also working through the content.\n\n<a href=\"http://forum.code.org/t/welcome-please-introduce-yourself/410/1\" target=\"blank\"><button class=\"plc\">Introduce Yourself Now >></button></a><br>\n\n## Finding Help When You Need It\n\nIf you get stuck at any time during the course, head over to [support.code.org](http://support.code.org) and check out [our community forums](https://support.code.org/hc/communities/public/topics). You'll likely find the answer to your question there. If you don't or are still stuck, you can email [teacher@code.org](mailto:teacher@code.org) and a Code.org staff member will get back to you as soon as they can.\n\n## Buddy up!\n\nKeep in mind that we are a small team and due to the scale of our efforts, we can't respond to all requests for support in the same way an instructor could for a face-to-face course. For that reason, we encourage you to ***work through this online course with a partner or group of colleagues***.\n\nCode.org recognizes the power of peer learning and collaboration. In fact, \"Pair Programming\" is a great industry practice that we'll explore in Stage 8 as a classroom best practice. If you feel you'll learn better with a partner or in a group, why not complete the course with a buddy or a colleague? If you don't know anyone in real life who's interested in partnering with you, head over to [the PLC forum](http://forum.code.org/t/never-swim-alone-the-find-a-buddy-thread/411), [Twitter](https://twitter.com/teachcode), or [Facebook](https://www.facebook.com/groups/1457214714576953/) and find someone from the Code.org community who might want to collaborate.\n\n## Find the learning experience that works for you\n\nFinally, online learning is not for everyone. This course has no instructor or built-in mechanism for communicating in real-time with your peers. If you find yourself needing more one-on-one attention or know you learn better in a real-world classroom where there is more opportunity for collaboration and engagement, we recommend you pursue one of our in-person professional development opportunities.\n\n<a href=\"http://code.org/professional-development-workshops\" target=\"blank\"><button>Find an in-person workshop near you >></button></a>\n\n* * *\n\n## What's your plan?\n\nTake a moment now to consider how and when you will complete this online course to ensure you get the most benefit from the experience. When you've got a good plan sketched out, continue on to dive more deeply into Stage 1.\n"
      OPD-K5 PostSurvey:
        markdown: "# Getting started > Take the post-survey\n\nThanks for using the Teaching Computer Science Fundamentals online professional development course! \n\nWhether or not you finished the whole course, we want to hear your feedback. Please submit this short survey to help us improve the course going forward!\n\n<a class=\"btn btn-large btn-primary\" href=\"https://form.jotform.com/90557778075168?user_id=<user_id/>\"> Take the post-survey</a>\n"
      OPD-K5 PreSurvey:
        markdown: |+
          # Getting started > Take the pre-survey

          We want you to get as much as possible out of this professional development. For that reason, we ask you to fill out [this short pre-survey](https://form.jotform.com/90556900301146). The survey will ask you to reflect on your goals for this course and will tell us a little bit about who you are and how we can support you.

          <a class="btn btn-large btn-primary" href="https://form.jotform.com/90556900301146?user_id=<user_id/>"> Take the pre-survey</a>

      OPD-K5 Problem Solving:
        markdown: "# Best Practices > Meta-Cognitive Problem Solving\n\nExplicitly teaching meta-cognitive problem solving strategies before, during and after coding is extremely important in helping students process their learning. Mega-cognitive problem solving involves thinking about your thought process itself, and reflecting on _how_ you solve problems. Watch the video below to learn about Code.org's \"Puzzle Solving Recipe\" that can help students have success with difficult problems:\n\n<iframe width=\"640\" height=\"390\" src=\"https://www.youtube.com/embed/XN0G6bSbQ2M\" frameborder=\"0\" allowfullscreen></iframe>\n[Can't see the video? Click here](https://videos.code.org/levelbuilder/05teachingproblemsolving_small-mp4.mp4)\n\n<br/><br/>\n[This worksheet](http://code.org/curriculum/docs/k-5/PuzzleSolvingStudent.png) details the different steps of the Puzzle Solving Recipe.\n\n<img src=\"https://images.code.org/18ec61f8b911b83ca1cdea404a34c40e-image-1434399798952.png\" width=\"650px\" style=\"margin-right:45px; border-radius:10px;\">\n\n> ## Reflect: \n> How might you explicitly teach problem solving in your CS classroom?\n\n> [Tweet your thoughts](https://twitter.com/teachcode) and be sure to tag @teachcode in your tweet so we can respond.\n\n> <a href=\"http://ctt.ec/ic2bx\" target=\"blank\"><h4><i class=\"fa fa-external-link-square\" /> Share on Twitter</h4></a>\n\n\n"
      OPD-K5 Puzzles:
        markdown: "# Looking Ahead > All About Puzzles\n\nIn the stages that follow, you're going to be using Code.org to learn the basics of computer science. You'll be challenged with a series of puzzles that need to be solved. In order to solve the puzzles, you'll have to write programs using different characters to complete different goals. We'll practice with our first puzzle in Stage 3. But before we get there, here's an overview of the different kinds of the puzzles you and your students will encounter:\n\n## Sample Maze Puzzles\n\n![](//code.org/images/mockup_birds.png)\n![](//code.org/images/pvz.png)\n\nYou'll need to get the angry bird to the pig, and you'll need to get the zombie to the sunflower.\n\n## Sample Artist Puzzle\n\n![](//code.org/images/artist.png)\n\nYou have to make the artist draw over the grey lines by moving him around the canvas. He'll draw a line behind him wherever he goes.\n\n## Sample Bee Puzzle\n\n![](//code.org/images/bee.png)\n\nYou'll need to move the bee around to collect all the nectar and make all the honey. The units of nectar and honey needed for each puzzle are written in the lower right-hand corner of each flower or honeycomb.\n\n## Play Lab\n\n![](//code.org/images/playlab.png)\n\nIn Play Lab, you'll create games and stories based on different goals.\n\n## Flappy\n\n![](//code.org/images/flappy.png)\n\nIn Flappy, you'll create your very own Flappy bird game.\nThe puzzles leading up to the game creation help you learn pieces of code you'll need for your game.\n\n## Bounce\n\n![](//code.org/images/bounce.png)\n\nIn Bounce, you get to create your own game. \nJust like in Flappy, the puzzles leading up to the game creation help you learn pieces of code you'll need for your game.\n\n* * *\n\nIn this series, we will introduce you puzzles from [CS Fundamentals](http://code.org/educate/k5). These puzzles serve as online tutorials, helping students to learn concepts like loops, events, conditionals, and functions.\n\nDuring this professional development experience, we will intersperse several puzzle progressions, giving you the chance to get familiar with the programming concepts in CS Fundamentals and the characters that your students will fall in love with. During this course, you'll notice that you move between different environments quickly; be it getting the angry bird to the pig, making a drawing, or having a bee collect nectar. These transitions happen quickly in this course to show you a range of the puzzles offered in CS Fundamentals. Your students will get to spend more time with each environment.\n\nIf you'd like to get more familiar with the student experience, you can always complete [CS Fundamentals](http://studio.code.org/) courses on your own anytime. But this course will give you a good flavor of what to expect by pulling out some of the most fundamental puzzles and lessons for you in a short amount of time.\n"
      OPD-K5 Stage10Start:
        markdown: |
          # Next Steps > Let's Review

          <img src="https://images.code.org/606dbb1b30885387e25bc1265f8966b2-image-1434150440566.JPG" width="450px">

          ## You're almost there!

          So far you have learned the basics of coding, explored how you might teach computer science, and created a simple plan of next steps.

          By completing Stage 11, you will:

           - Reflect on your learning
           - Plan for next steps you can take to continue your learning
           - Connect with a global community of fellow educators interested in computer science education
      OPD-K5 Stage1Go:
        markdown: |
          # Getting Started > Ready? Set? Go!

          <img src="https://images.code.org/80a1fa04481359759d2b86ddca9b33a4-image-1433972662378.png" class="level-image">

          By completing this stage, you should have:

          - Reviewed the course details
          - Learned how to navigate through the learning platform
          - Planned your participation in this course

          In the next stage, we will:

          - Define "computer science" and review key vocabulary
          - Identify the benefits of teaching and learning computer science
          - Differentiate between "coding" and "computer science"
          - Explain the benefits of beginning to code using visual programming
      OPD-K5 Stage2Go:
        markdown: |
          # CS Fundamentals > Looking Ahead

          We hope this stage gave you a good introduction to computer science.

          By completing this stage, you should be able to:

          - Define "computer science" and reviewed key vocabulary
          - Identify the benefits of teaching and learning computer science
          - Differentiate between "coding" and "computer science"
          - Explain the benefits of beginning to code using visual programming

          > **Teaching Tip:** While computer science can be a rich and complex discipline, at Code.org we recognize that teachers and students need to master the basics before diving in to higher-level projects. This online course teaches you, the teacher, those basics so that you can support your students in doing so as well.

          In the next stage, we'll briefly introduce you to some frameworks for thinking about the rest of the content in this course. Then, we'll dive right in and start learning computer science.
      OPD-K5 Stage2Overview:
        markdown: |
          # CS Fundamentals > Stage overview

          In Stage 1, you learned about this course and how to navigate the learning platform. Now you're ready to dive into the real content.

          Let's begin with some fundamentals.

          <img src="https://images.code.org/8af62f96e37199542519fae8580b0a29-image-1434146715374.jpg" width="450px" style="margin-right:45px; border-radius:10px;">

          By completing Stage 2, you will:

          - Define "computer science" and review key vocabulary
          - Identify the benefits of teaching and learning computer science
          - Differentiate between "coding" and "computer science"
          - Explain the benefits of beginning to code using visual programming

          Plan to spend between 10-30 minutes completing this stage.
      OPD-K5 Stage3Go:
        markdown: "# Sequencing > Reflect\n\nCongratulations! You just wrote some code. You are officially a programmer! Our platform tracks how many lines of code you've written, and will tell you after every puzzle!\n\n---\n\nDid you notice that the last puzzle was a little more difficult?  It was a **challenge** puzzle.  Challenge puzzles are meant to stretch the boundaries of what students will do.  We make it clear that they should be attempted, but do not require that they be completed for students to succeed for the lesson.\n\n<img src=\"https://images.code.org/e3b9903cf4acc68be5c01c4118b3d53d-image-1434152749660.JPG\" width=\"450px\" style=\"margin-right:45px; border-radius:10px;\">  \n\n---\n\n**Take a moment now to review how sequencing (including programming and algorithms) are introduced in the CS Fundamentals curriculum, and think about how you might implement the suggested activities in your classroom.**\n\n"
      OPD-K5 Stage3Start:
        markdown: |
          # Sequencing > Stage Overview

          <img src="https://images.code.org/06b4f5c946f2a47176706352d9dbbb56-image-1434152393531.JPG" width="450px" style="border-radius:10px; float:right; margin: 0 0 40px 40px;">

          By completing Stage 4, you will:

          - Define "algorithm" and "program"
          - Write programs using blocks of code
          - Reflect on classroom application

          > **What to Expect in this Stage:** In the levels that follow, we'll start with an unplugged lesson plan to introduce you to a concept, to model how you would introduce ideas to students in your classroom. Then, we will provide you with video instruction and introduce you to a series of puzzles and ask you to apply your learning. In order to complete a puzzle, you'll need to write code using Blockly code blocks. These lessons are from Course A, which is meant for Kindergarten students. We'll close with an opportunity to reflect on how you might teach this concept to your students. You should spend between 10-30 minutes on this stage.

          Ready? Let's go!
      OPD-K5 Stage3aGo:
        content1: description here
        markdown: "# Sequencing > Unplugged Lessons\n\nAs we mentioned, we like to introduce computer science topics with unplugged lessons. Then, we use bridging activities to transition into the online lessons later. Beginning with these unplugged lessons introduces concepts in a fun and friendly way. Then, students already feel familiar with the concept by the time that they get to the online lessons, and can relate the online lessons back to the unplugged activity.\n\nFor these programming stages that you will be going through, we will also start with examples of unplugged lessons. Read through the following lesson plan and watch the accompanying videos, thinking about how you would implement this in your classroom with your students.\n<br/>\n***\n<br/>\nWe will start with sequencing. At its base, this style of computer science is about **sequences**. A sequence is a special ordering that something follows. In these puzzles, we want to find the right sequence of instructions to tell the computer what to do. This list of instructions is called an **algorithm**.  Once that algorithm gets coded up into a language that can be read by a machine, it becomes a **program**.\n<br/>\n<br/>\n\n**1. Review the \"[Happy Maps](https://curriculum.code.org/csf/coursea/5/)\" Lesson Plan from Course A.**\n<br/>\nRemember that Course A is meant for Kindergarten students. Sequencing comes up in other courses, as well, and you can find examples of those lessons at the bottom of this page.\n\n<br/>\n\n**2. Watch the student video: Happy Maps**\n<br/>\nThis is a video that you would show your students to help introduce the concept of sequencing and kick off the unplugged lesson.\n\n<iframe width=\"640\" height=\"390\" src=\"https://www.youtube.com/embed/hrnhiKAQ1_k\" frameborder=\"0\" allowfullscreen></iframe>\n\n[Can't see the video? Click here](http://videos.code.org/2014/C1-happy-maps-unplugged.mp4)  \n\n<br/>\n\n**3. Watch the teacher video: How to facilitate \"Happy Maps\"**\n<br/>\nThis video is meant to be support for you as the teacher, if you are looking for tips on how to run this lesson. \n<iframe width=\"640\" height=\"390\" src=\"https://www.youtube.com/embed/En6Bshuqljg\" frameborder=\"0\" allowfullscreen></iframe>  \n\n<br/>\n\n\n**4. Review other unplugged lessons that introduce sequencing:**\n\n- Course A (Kindergarten): [Real-Life Algorithms: Plant a Seed](https://curriculum.code.org/csf-18/coursea/3/)\n- Course B (Grade 1): [My Robotic Friends Jr.](https://curriculum.code.org/csf-18/coursea/3/), [Move It, Move It](https://curriculum.code.org/csf-18/courseb/1/)\n- Course C (Grade 2): [Paper Planes](https://curriculum.code.org/csf-18/coursec/4/)\n- Course D (Grade 3): [Graph Paper Programming](https://curriculum.code.org/csf-18/coursed/1/)\n- Course E, Course F (Grades 4, 5): [My Robotic Friends](https://curriculum.code.org/csf-18/coursee/1/)\n\n\n---\n\n\n> ## Reflect\n> How would you explain the concept of programming (including sequencing and algorithms) to your students? Share your thoughts in <a href=\"http://forum.code.org/t/teaching-sequencing/408\">our forum</a>.\n\n> <a href=\"http://forum.code.org/t/teaching-sequencing/408\" target=\"blank\"><button class=\"plc\">Discuss in the forums >></button></a>\n\nAfter commenting in the forum, return here and click below to move on.\n\nIn the next stage, we'll add some complexity to our programs through the addition of loops.\n"
        title: title
      OPD-K5 Stage4Go:
        markdown: "# Loops > Unplugged Lessons\n\nIn this stage, we saw how adding loops to a program is more efficient when coding repetitive actions. In the next stage, we'll look at coding **if-statements** and other conditionals.  \n<br/>\n\n**1. Review \"[Getting Loopy](https://levelbuilder.code.org/curriculum/coursec/7/Teacher)\" Lesson Plan from Course C:**\n<br/>Course C is meant for Grade 2 students. Loops comes up in other courses, as well, and you can find examples of those lessons at the bottom of this page.\n\n<br/>\n\n**2. Watch the student video: Getting Loopy**\n<br/>\nThis is a video that you would show your students to help introduce the concept of loops and kick off the unplugged lesson.\n\n<iframe width=\"640\" height=\"390\" src=\"https://www.youtube.com/embed/JoKTqHCni0M\" frameborder=\"0\" allowfullscreen></iframe>\n\n[Can't see the video? Click here](http://videos.code.org/2014/C1-getting-loopy.mp4)\n\n<br/>\n\n**3. Watch the teacher video: How to facilitate \"Getting Loopy\"**\n<br/>\nThis video is meant to be support for you as the teacher, if you are looking for tips on how to run this lesson. \n<iframe width=\"640\" height=\"390\" src=\"https://www.youtube.com/embed/Vo2woYRRogA\" frameborder=\"0\" allowfullscreen></iframe>\n\n<br/>\n\n**4. Review other unplugged lessons that introduce loops:**\n\n- Course A (Kindergarten): [Happy Loops](https://curriculum.code.org/csf-18/coursea/9/)\n- Course B (Grade 1): [My Loopy Robotic Friends Jr.](https://curriculum.code.org/csf-18/courseb/8/)\n- Course E, F (Grade 4, 5): [My Loopy Robotic Friends](https://curriculum.code.org/csf-18/coursee/6/)\n\n***\n\n> ## Reflect\n> How would you explain the concept of loops to your students?<br><br> [Share your thoughts in our forum.](http://forum.code.org/t/teaching-loops-and-efficiency/405/1)\n\n> <a href=\"http://forum.code.org/t/teaching-loops-and-efficiency/405/1\" target=\"blank\"><button class=\"plc\">Discuss in the forums >></button></a>\n\nAfter commenting in the forum, return here and click below to move on to the next stage.\n"
      OPD-K5 Stage4Review:
        markdown: |
          # Loops > Reflect

          In this stage, we explored how loops can be used to make code more efficient. In the next stage, we'll look at how conditionals can help add logic to a program.

          **Take a moment now to review how loops are introduced in the CS Fundamentals curriculum. Consider how you might implement the suggested activities in your classroom.**

          ![](https://images.code.org/c6dca0407f5a517823f7e71b8da3880b-image-1549050118354.jpg)
      OPD-K5 Stage4Start:
        markdown: |
          # Loops > Stage 5 Overview

          This stage builds on your first programming experience by adding the core concept of **loops**.

          <img src="https://images.code.org/fcd3262b1c25e70426ac90e6f9fa65ac-image-1434152998854.JPG" width="450px" style="border-radius:10px; float:right; margin: 0 0 40px 40px;">

          By completing Stage 5, you will:

          - Practice coding simple loops
          - Reflect on classroom application

          > **What to Expect in this Stage:** In the levels that follow, we'll introduce an unplugged lesson and a series of puzzles from Course C (meant for Grade 2) that focus on the concept of loops. In order to complete a puzzle, you'll need to write code using visual, block-based programming. We'll close with an opportunity to reflect. You should spend between 20-45 minutes on this stage.

          Ready? Let's go!
      OPD-K5 Stage5Go:
        markdown: "# Conditionals > Unplugged Lessons\n\n\n**1. Review \"[Conditionals with Cards](https://curriculum.code.org/csf-18/coursed/13/)\" Lesson Plan from Course D:** \n<br/>\nCourse D is meant for Grade 3 students. This same lesson also appears in Course E and Course F. Conditionals are not covered in Courses A, B, or C.\n<br/><br/>\n\n**2. Watch the student video: Conditionals with Cards**\n<br/>\nThis is a video that you would show your students to help introduce the concept of conditionals and kick off the unplugged lesson.\n<iframe width=\"640\" height=\"390\" src=\"https://www.youtube.com/embed/UymN4lTL50s\" frameborder=\"0\" allowfullscreen></iframe> \n<br/>\n[Can't see the video? Click here](http://videos.code.org/2014/C2-conditionals-with-cards.mp4)\n\n<br/><br/>\n**3. Watch a teacher model this lesson: \"Conditionals with Cards\"**\n<br/>\nThis video is meant to be support for you as the teacher, if you are looking for tips on how to run this lesson. \n\n<iframe width=\"640\" height=\"390\" src=\"https://www.youtube.com/embed/2m2Rn9VxHfU\" frameborder=\"0\" allowfullscreen></iframe>\n[Can't see the video? Click here](https://videos.code.org/levelbuilder/unplugged-lessoninaction-conditionalswithcards-mp4.mp4)\n\n<br/><br/>\n\n---\n\n> ## Reflect\n> How would you explain the concept of conditionals to your students? Share your thoughts in [our forum](http://forum.code.org/t/teaching-conditionals/406/1).\n\n> <a href=\"http://forum.code.org/t/teaching-conditionals/406/1\" target=\"blank\"><button class=\"plc\">Discuss in the forums >></button></a>\n\nAfter commenting in the forum, return here and click below to move on to the next stage.\n"
      OPD-K5 Stage5Review:
        markdown: "# Conditionals > Reflect\n\nIn this stage, we explored how conditionals help programmers add logic to their code. In the next stage, we'll look at how functions can help you take your coding to the next level.  \n\n**Take a moment now to review how conditionals are introduced in the CS Fundamnetals curriculum, and how you might implement the suggested activities in your classroom.**\n\n![](https://images.code.org/6335e7aa128d84c96ac402005cd9a3bb-image-1549053033052.jpg)\n"
      OPD-K5 Stage5Start:
        markdown: |
          # Conditionals > Stage Overview

          <img src="https://images.code.org/d2c2e06ce0bef52ae173a1de35b92af7-image-1470945682161.png" width="450px"  style="border-radius:10px; float:right; margin: 0 0 40px 40px;"/>

          So far, you've written a simple program and added loops to increase efficiency. In this stage, we'll explore **if-statements** which begin to add logic to your program.

          By completing Stage 6, you will:

          - Practice coding simple conditionals
          - Reflect on classroom application

          >**What to Expect in this Stage:** We'll first introduce an unplugged lesson from Course D (meant for Grade 3) that introduces the idea of conditionals. Then, you will complete a series of puzzles will ask you to apply your learning using conditionals. We'll close with an opportunity to reflect. You should spend between 20-45 minutes on this stage.

          Ready? Let's go!
      OPD-K5 Stage6Go:
        markdown: "# Functions > Unplugged lessons\n\nProgrammers are always looking for ways to make their code more efficient. One way that they do that is through **functions**, which allow them to reuse segments of code\n\n**1. Review \"[Functions: Songwriting](https://curriculum.code.org/csf-18/coursee/14/)\" Lesson Plan from Course E.**\n<br/>\nCourse E is meant for students in Grade 4. Functions are not covered in Courses A-D. \n\n<br/>\n\n**2. Watch the student video: Functions: Songwriting**\n<br/>\nThis is a video that you would show your students to help introduce the concept of functions and kick off the unplugged lesson.  \n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/5iDCKkI6y2Y?ecver=1\" frameborder=\"0\" allowfullscreen></iframe><br/>\n[Can't see the video? Click here](http://videos.code.org/2014/C3-songwriting-with-parameters.mp4)\n\n<br/>\n\n**3. Watch a teacher model this lesson: \"Functions: Songwriting\"**\n<br/>\nThis video is meant to be support for you as the teacher, if you are looking for tips on how to run this lesson.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/QuIMLel1mmw?ecver=1\" frameborder=\"0\" allowfullscreen></iframe>\n[Can't see the video? Click here](https://videos.code.org/levelbuilder/unplugged-lessoninaction-songwritingwithfunctions-mp4.mp4)\n<br/>\n\n---\n\n> ## Reflect\n> How would you explain the concept of functions to your students? Share your thoughts in <a href=\"http://forum.code.org/t/teaching-functions/407/1\" target=\"blank\">our forum</a>.\n\n> <a href=\"http://forum.code.org/t/teaching-functions/407/1\" target=\"blank\"><button class=\"plc\">Discuss in the forums >></button></a>\n\nAfter commenting in the forum, return here and click below to move on to the next stage.\n"
      OPD-K5 Stage6Review:
        markdown: |
          # Functions > Reflect

          In this stage, we explored how functions can make you a faster and better programmer by allowing you to reuse segments of your code. In the next stage, we'll look at the core concept of events and put your coding skills to the test.

          **Take a moment now to review how functions are introduced in the CS Fundamentals curriculum and consider how you might implement the suggested activities in your classroom.**

          ![](https://images.code.org/47e2d3956aaafb745e462f0017c2a2b1-image-1549053916687.jpg)
      OPD-K5 Stage6Start:
        markdown: |+
          # Functions > Stage Overview

          <img src="https://images.code.org/6ac5cc9f26b87a62b0558947d4cfd457-image-1501267730981.jpg" width="450px" style="border-radius:10px; float:right; margin: 0 0 40px 40px;">

          In the first few stages, you've learned how to write a program, add loops, and use conditionals. In this stage, we'll introduce the concept of **functions**.

          By completing Stage 7, you will:

          - Practice coding simple functions
          - Reflect on classroom application

          > **What to Expect in this Stage:** First, you will look at an unplugged lesson from Course E (meant for Grade 4) that introduces functions. Then you'll learn about functions through video, and practice using functions in a variety of puzzles. You'll then reflect on your practice. You should spend between 20-45 minutes on this stage.

          Ready? Let's go!

      OPD-K5 Stage7Go:
        markdown: |
          # Events > Unplugged Lessons

          <br/>

          **1. Review "[The Big Event](https://curriculum.code.org/csf-18/coursec/11/)" Lesson Plan from Course C.**
          <br/>
          Course C is meant for students in Grade 2. Events come up in every CS Fundamentals Course, from A-F. Not every course has an unplugged lesson to cover events, but you can see the unplugged lesson for Course A and Course B at the bottom of this page.
          <br/><br/>

          **2. Watch the student video: The Big Event**
          <br/>
          This is a video that you would show your students to help introduce the concept of events and kick off the unplugged lesson.

          <iframe width="640" height="390" src="https://www.youtube.com/embed/u0WV9shCoak" frameborder="0" allowfullscreen></iframe>

          [Can't see the video? Click here](http://videos.code.org/2014/C1-bigevent-unplugged.mp4)
          <br/><br/>

          **3. Watch the teacher video: How to facilitate "The Big Event"**
          <br/>
          This video is meant to be support for you as the teacher, if you are looking for tips on how to run this lesson.

          <iframe width="640" height="390" src="https://www.youtube.com/embed/aYECW6V8nQA" frameborder="0" allowfullscreen></iframe>
          <br/><br/>

          **4. Review other unplugged lessons that introduce events:**

          - Course A, Course B (Kindergarten, Grade 1): [The Big Event Jr.](https://curriculum.code.org/csf-18/courseb/12/)

          ---

          > ## Reflect
          > How would you explain the concept of events to your students? Share your thoughts in <a href="http://forum.code.org/t/teaching-events/409/1">our forum</a>.

          > <a href="http://forum.code.org/t/teaching-events/409/1" target="blank"><button class="plc">Discuss in the forums >></button></a>

          After commenting in the forum, return here and click below to move on.
      OPD-K5 Stage7Start:
        markdown: "# Events > Stage Overview\n\n<img src=\"https://images.code.org/319df539d56b2795d659a56e9334a5fb-image-1434397946590.JPG\" width=\"450px\" style=\"border-radius: 10px; float: right; margin: 0 0 40px 40px;\">\n\nThus far, you've learned how to sequence a program, add loops, and use conditionals and functions. You're almost done!   \n\nIn this stage, we're going to look at *events*, another core concept in computer science. As we explore events, you will synthesize what you've learned so far and write some more complex programs.\n\nBy completing Stage 8, you will:\n\n- Practice coding simple events\n- Reflect on classroom application\n\n>**What to Expect in this Stage:** You'll start with an unplugged lesson from Course C (meant for Grade 2) introducing events. Then, you'll explore some puzzles from Course F (meant for Grade 5) that allow you to experiment with event blocks. We'll close with an opportunity to reflect. You should spend between 20-45 minutes on this stage.\n\nReady? Let's go!\n"
      OPD-K5 Stage8Go:
        markdown: |
          # Best Practices > Reflection

          Stage 8 introduced you to a number of best practices for teaching computer science. Take a moment to consider which strategies covered in this stage you might use in your practice. In the next stage, you'll create a simple plan and reflect on the course as a whole.

          ## What strategies will you use when facilitating computer science learning in your classroom?

          Here are some examples from our teacher community:

          - **Facilitate "unplugged" activities** to teach core concepts (click [here for a full list of unplugged activities](https://code.org/curriculum/unplugged.)
          - Implement the **"ask 3 and then me"** rule in your classroom, which is when students have to ask 3 classmates for help before they can ask the teacher that same question. This reduces the number of students that you have to answer individually and promotes peer learning.
          - **Be calm yet persistent** when problems arise (which they will.) Your reaction sets the tone for students. If at the first sign of an issue, you proclaim "I'm terrible at technology. I give up," your students will think it's okay to do that too.
          - **Take pride** in their programs. Show them off, put them to work, post them online. This is a big accomplishment for you and your students that should be celebrated.
          - **Ask probing questions** to a student (even if you don't know the answer to the questions.) Ask your class if anyone has the answer. Get comfortable saying "I don't know; let's figure this out together!"

          ---

          > ## Reflect
          Review more strategies or add your own <a href ="http://forum.code.org/t/code-org-k5-professional-development-computer-science-pedagogy-6/14/4">in our forums.</a>:

          > <a href="http://forum.code.org/t/code-org-k5-professional-development-computer-science-pedagogy-6/14/4" target="blank"><button class="plc">Share your strategies >></button></a>

          After exploring the forum thread and adding your thoughts, click below to move on to Stage 9.
      OPD-K5 Stage8Start:
        markdown: "# Best Practices > Stage overview\n\n<img src=\"https://images.code.org/1faca2c2dd1c9bd64ab5def347524d9c-image-1434398377360.JPG\" width=\"450px\" style=\"border-radius:10px; float:right; margin: 0 0 40px 40px;\">\n\n**You've made your way through the majority of the content for this course. Congratulations!**   \n\nIn Stage 1, you reviewed the course information.  \nIn Stage 2, you explored computer science as a discipline.  \nIn Stage 3, you prepared to master the basics of computer science.  \nIn Stages 4-8, you played the role of the student yourself.  \nNow, let's transition to an exploration of how you might teach what you've learned to young people.  \n\n\nBy completing Stage 9, you will:\n\n- Review best practices for teaching computer science\n\n> ## Looking ahead:\n> The best practices we will cover in this stage include:\n\n>- Establishing a positive classroom culture that supports self-directed learning, experimentation and failure\n- Knowing when and how to apply instructional design strategies from other subject areas\n- Using strategic grouping strategies such as \"pair programming\"\n- Explicitly teaching meta-cognitive problem solving strategies\n- \"Unplugging\" and teaching some core concepts with minimal or no technology\n- Other best practices suggested by the Code.org teacher community\n\nWe'll also provide an opportunity for you to share your best practices with our community.\n"
      OPD-K5 Stage9Go:
        markdown: |
          # Planning > Review

          <img src="https://images.code.org/34e1d20a6ae73e28c6c88c5981fd6be6-image-1434411459379.JPG" width="450px">

          In this stage, you should have:

          - Reviewed the Teacher Dashboard and other resources on Code.org
          - Planned for how you might integrate computer science into your practice

          In Stage 11, our final stage, you will

          - Reflect on your learning
          - Plan for next steps you can take to continue your learning
          - Connect with a global community of fellow educators interested in computer science education
      OPD-K5 Stage9Start:
        markdown: "# Planning > Exploring Teacher Resources\n\nThroughout Stages 4-8, you took a look at some of the \"unplugged\" and online learning resources available for CS Fundamentals, as they aligned with the computer science concepts you were learning. \n\nNow that you have some understanding over how to code, as well as how to teach computer science, it's time to start planning your instruction. In this stage, we'll be touring other areas of the Code.org platform and the **[Teacher Dashboard](http://studio.code.org/)**. \n\nBy completing Stage 10, you will:\n\n- Explore resources available to teachers\n- Explore the Code.org **[Teacher Dashboard](http://studio.code.org/)**\n- Plan for how you might integrate computer science into your practice\n\n***\n\nA screenshot of the Teacher Dashboard is below. You will need to log into your Code.org teacher account in order to see it -- once you are logged in, it should the default screen that you see on the Code.org website. If you do not have a teacher account, you can **[sign up for one here](https://studio.code.org/users/sign_up)**.\n\n![](https://images.code.org/d6345709495f764a71d9cb0994dbd7e4-image-1549064603589.png)\n"
      OPD-K5 Unplugged:
        markdown: |
          # Looking Ahead > Getting "Unplugged"

          <img src="https://images.code.org/ae83fdee9390a1155e5173b2a06f9773-image-1434399991310.JPG" class="level-image">

          In teaching computer science, you might think it would be best to have access to top tier technology -- new computers, fast Internet, the latest apps. But at Code.org, we've found that some of the most impactful computer science lessons are actually "unplugged," or conducted with little to no technology at all. In these lessons, students learn computer concepts without a computer.

          That's why all of our CS Fundamentals courses use unplugged activities to introduce computer science concepts with physical manipulatives before students write computer programs using those concepts. An example of this would be doing a dance of repeated movements with the class to understand the concept of how loops repeat commands in a computer program. This way when the students go on to writing programs using loops, the unplugged activity has set them up with something they are already familiar with and they can relate this new concept back to that activity.

          Watch the video below to understand the benefits of using unplugged activities to teach computer science.

          <iframe width="640" height="390" src="https://youtubeeducation.com/embed/-7lcnNcONHY" frameborder="0" allowfullscreen></iframe>
          [Download video](https://videos.code.org/levelbuilder/unplugged-whyshouldteachunpluggedactivities-mp4.mp4)
          <br/>
          <br/>
          **As you work your way through Stages 4-8**, you'll have a chance to review some of our unplugged activities for each of the core concepts covered in this course.
      OPD-K5 Using CS:
        markdown: "# Planning > Preparing for a Code Studio lesson\n\nLet's take a look at how Code Studio works for you and your students in a classroom setting.\n\n## Step 1: Choose a course\nCheck out our [elementary school page](https://code.org/educate/curriculum/elementary-school) and find the lesson plans and full courses for our CS Fundamentals A-F lesssons. Or, if you are interested in our middle school or high school courses you, \n, you'll find courses for all grade levels - from pre-readers to seniors in high school, and everyone in between. All our courses are available at no cost. Chat with colleagues at your school to determine how the course curriculum can be integrated with a variety of subjects. \n \n## Step 2: Set up your classroom section\nSet up a classroom section to view your student's progress, print login cards for your students, manage their accounts, and print certificates they can bring home when they finish the course. Click this link to [watch a brief video](https://code.hosted.panopto.com/Panopto/Pages/Viewer.aspx?id=56d32934-3f67-48db-98db-e66e9152df7b) demonstrates how to set up your first computer science class on Code.org. You can also find the steps in [this support article](https://support.code.org/hc/en-us/articles/115000488132-Creating-a-classroom-section).\n\n## Step 3: Assign the course to your section\nClick into the course that you are teaching -- you should see a screen that looks like the one below. You can then click \"Assign Course\" and assign that course to one of your sections. \n\n## Step 4: Start teaching! \nAll it takes is one lesson to bring computer science concepts into your classroom. Once you see your students enthusiasm for CS, go further with daily lesson plans to guide your students, unplugged activities you can do without a computer, and forums to connect to other teachers.\n\n\n\n"
      OPD-K5 Vocabulary:
        markdown: |
          # CS Fundamentals > Key Vocabulary

          As you begin to learn computer science, one of the most important tasks is to become familiar with the language of coding. In this course and throughout the CS Fundamentals resources, we use the same vocabulary used in the computer science industry. Encouraging young students to learn and use professional terms enables them to communicate with others and build their knowledge in computer science without having to relearn terms and concepts later. The terms and concepts used in these courses are defined using words that most young students should be able to understand.

          Here is a [list of vocabulary terms](http://code.org/curriculum/docs/k-5/glossary) used throughout the CS Fundamentals resources; many of these terms are introduced in this course as well. You don't have to learn all these words right now. Use that list as a reference during this online professional development course and when you use our courses with your students.

          <a href="http://code.org/curriculum/docs/k-5/glossary" target="blank"><button class="default">View the Glossary >></button></a>

          > **Teaching Tip:** Best practice is to introduce the terms with easy-to-understand language, relate the terms to previous experiences, use the terms repeatedly beyond the lesson itself throughout the entire course (and in other situations) when appropriate, and reinforce students' use in oral and written communication.
      OPD-K5 Welcome 2:
        markdown: |+
          # Getting Started > Computer Science Fundamentals Courses

          The goal of Code.org's professional development is to prepare teachers like you to integrate computer science into their classrooms and support their growth as teachers. After completing this online course, you'll be ready to teach one or more of the following Code.org Computer Science Fundamentals courses in your classroom:

           - **[Course A](http://studio.code.org/s/coursea)**: approximately 12 hours (Kindergarten)
           - **[Course B](http://studio.code.org/s/courseb)**: approximately 12 hours (Grade 1)
           - **[Course C](http://studio.code.org/s/coursec)**: approximately 18 hours (Grade 2)
           - **[Course D](http://studio.code.org/s/coursed)**: approximately 18 hours (Grade 3)
           - **[Course E](http://studio.code.org/s/coursee)**: approximately 18 hours (Grade 4)
           - **[Course F](http://studio.code.org/s/coursef)**: approximately 20 hours (Grade 5)
           - **[Computer Science (CS) Fundamentals Express](http://studio.code.org/s/express)**: approximately 20 hours (Ages 8+)
           - **[Computer Science (CS) Fundamentals Pre-Express](http://studio.code.org/s/pre-express)**: approximately 20 hours (Ages 4-8)


      OPD-K5 What is Mastery:
        markdown: |
          # Looking Ahead > What is mastery?

          In the stages that follow, you will master the following basic core concepts of computer science:

          - Stage 4: Sequencing
          - Stage 5: Loops
          - Stage 6: Conditionals
          - Stage 7: Functions
          - Stage 8: Events

          ## What is "mastery"?

          We define "mastery" as being able to do the following:

          - Define and explain what is meant by the core concept, and why it's important in computer science
          - Write simple programs applying the concept (by using visual programming to solve puzzles)
          - Reflect on how you might integrate the concept into your practice

          Use this list as your rubric as you work through the course. As you complete each stage, ask yourself:

          - Can I define and explain the importance of this particular core concept at a beginner level?
          - Was I able to successfully complete the simple puzzles in this stage?
          - Do I have a few ideas on how I might use this in my classroom?

          If you answer yes to each question, proceed to the next stage. If you answer no to any of the questions, consider revisiting the stage or exploring more about the topic in the student side of Code Studio before moving on.

          ## Things to keep in mind while learning computer science:

          - The world of computer programming moves so fast that there really are no masters. **We're all learners** at different stages but we are still always learners.
          - Programming becomes more comfortable every time you come back to it. **You're not going to be an expert your first time.**
          - There's no way around it, the act of programming and **learning to program takes time, but anyone can do it!**

          > **Key Takeway:** The goal of the next several stages is not to turn you into a computer scientist, but to instead help you feel comfortable enough with the core concepts that you are excited to share your knowledge with your students.

          ## After I "master" the concepts, what comes next?

          In **Stage 9**, you'll explore Code.org's free curricula and resources for teachers. You can choose to use any of these resources or other curricular resources of your choosing. Completing this course will give you the basics you need to understand any beginning computer science curriculum.

          In **Stages 10 and 11**, we'll point you in the direction of resources you can use to learn more or feel more prepared to teach these concepts in your classroom.
      OPD-K5 Why teach CS:
        markdown: |
          # CS Fundamentals > Why teach computer science?

          <img src="//code.org/images/edquote1.png" width="250px" style="margin-right:45px; float:left">

          Research shows that computer science promotes critical thinking, creativity, problem-solving, and engagement in real-world skills. In fact, a [recent research study](https://medium.com/@codeorg/code-org-resourceful-teachers-higher-student-achievement-8be1efdec06e) found that classrooms with resourceful teachers see higher scores on English, math, and science standardized tests after teaching CS Fundamentals lessons.

          Why would you want to teach computer science if you're not a STEM teacher? If you're taking this course, you likely have a number of your own answers to that question, but if you need further inspiration, take some time now and review [this video collection](http://code.org/educate/inspire) to get a sense of the "why". These videos are great to share with your students, your administration, parents, and your community if you need help making a case for CS in the classroom. You might also be interested in some of the statistics and evidence around CS education.

          <a href="http://code.org/educate/inspire" target="blank"><button class="default">Explore inspirational videos >></button></a><a href="http://code.org/promote" target="blank"><button class="default">Explore research >></button></a>

          Spend a few moments exploring our research and make note of any relevant or interesting facts or insights you discover.
      OPD-K5 Younger Grades:
        markdown: |
          # Why teach computer science in the early grades?

          <img src="https://images.code.org/0149da542dae03da5f40b7b8aacf73c0-image-1434818868152.jpg" class="level-image">

          In addition to the computational thinking practices students learn through coding experience, teaching computer science in the early grades has an additional benefit for students and for society &mdash; we can work to create more equity in the tech industry.

          If we wait until high school or college to introduce students to computer science, some students will already have decided that computer science is not for them or they will feel that they are already too far behind compared to students who study it outside of school.

          Exposing students to computer science in grades K-5, when they don't have to opt-in to a class like they might in high school, allows all students to see how accessible the subject is, and decide if they enjoy it.

          > ## Why do you believe teaching computer science is worthwhile?
          [Tweet your thoughts](https://twitter.com/teachcode) and be sure to tag @teachcode in your tweet so we can respond.

          > <a href="http://ctt.ec/Bfjw3" target="blank"><button class="default">Share on Twitter >></button></a><br><br>
          Don't have a Twitter account? You can also find us on [Facebook](https://www.facebook.com/Code.org/) or [Instagram](https://www.instagram.com/codeorg/).
      OPD-K5 Your Plan:
        markdown: |
          # Planning > Your Plan

          We hope this stage has helped introduce you to the resources available on Code Studio. As you think about how how you might in the future teach computer science using any of the code.org or Code Studio resources, take a moment to [share your plan with the Professional Learning Community (PLC)](http://forum.code.org/t/teaching-computer-science-your-plans/412).

          Share with us:

          - What are your goals for your classroom? How will CS or code.org resources help you meet those goals?
          - What are you most excited about when it comes to implementing some of these resources?
          - What challenges do you foresee in trying to meet your goals?
          - What questions do you have that this community might help you answer?

          After posting your initial plan, feel free to revisit [this thread](http://forum.code.org/t/teaching-computer-science-your-plans/412) in the future to update us on how things are going!

          <a href="http://forum.code.org/t/teaching-computer-science-your-plans/412" target="blank"><button class="plc">Post your plan >></button></a>

          After commenting in the forum, return here and click below to move on.
      OPD-Stage3Start:
        markdown: |
          # Looking Ahead > Stage Overview

          <img src="https://images.code.org/0b8c948f309ae1df3d9920520e4a168c-image-1435004357188.JPG" width="450px" style="border-radius:10px;">

          By completing this brief stage, you will:

          - Prepare to "master the basics" of computer science by reviewing what's next in the course
      'Overview: Design Mode':
        markdown: |
          # Welcome to App Lab Design Mode
          In App Lab "Design Mode" lets you drag and drop User Interface elements into the app.

          ### Vocabulary
          * **User Interface (UI)** - How a person (user) interacts with the computer or app.
          * **UI Elements** or objects, like buttons, images, text boxes, pull down menus, screens and so on.

          ## Example

          <div style="column-count: 4; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 3; width: 100%">

          <p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;"><span style="font-weight: bold; color: #00adbc; font-size: 200%;">1.</span>
          You'll see a new set of switches above the app area that let you flip back and forth between "Design Mode" and Code Mode".</p>

          <p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;"><span style="font-weight: bold; color: #00adbc; font-size: 200%;">2.</span>Adding an element is as easy as dragging and dropping it into the app where ever you want. Once it's on the app screen you can reposition it, resize it and change lots of other properties about it </p>

          <p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;"><span style="font-weight: bold; color: #00adbc; font-size: 200%;">3.</span>The <em>Properties</em> tab shows you everything you can change about the look and feel of a UI element.</p>

          <p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;"><span style="font-weight: bold; color: #00adbc; font-size: 200%;">4.</span>The <strong>element ID</strong> is important because it's how you refer to the element in your code. We'll discuss element IDs later on.</p>
          </div>

          ![](https://images.code.org/01a31ac3be66deb6d01a92a1edfffd21-image-1476726587662.png)


          <div style="column-count: 2; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 3; width: 66%; float: right">

          <p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;"><span style="font-weight: bold; color: #00adbc; font-size: 200%;">5.</span>You can make the text that the user sees on the button text be whatever you like.</p>

          <p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;"><span style="font-weight: bold; color: #00adbc; font-size: 200%;">6.</span><strong>Note:</strong> Scroll down to see other properties for a UI element might be "hiding" down below.</p>
          </div>

          <div style="clear: both"></div>
          <hr>

          **Now you try!**
      'Overview: If Statements':
        markdown: |+
          # If Statement

          ## How If-statements work

          <img src="https://images.code.org/361556bbff61bf91e2c737f745582dff-image-1479418505481.png" style="float: right; margin-left: 20px; margin-right: 20px">

          If statements allow you to *make a decision that determines which lines of code should be run next.*

          At the right is a diagram showing the elements of a basic `if` statement in JavaScript.

          There are two basic parts to an if-statement.

          1. A condition to be evaluated (A Boolean expression that evaluates to **true** or **false**)
          2. Code that should run *if* the expression was true - enclosed in curly braces

          ## A worked example
          <img src="https://images.code.org/ca716e009ddb8dc397eb5a651a1ac2d7-image-1479420772852.png" style="display: block; margin: auto; float: right">

          <p><span style="font-weight: bold; color: #00adbc; font-size: 150%;">1.</span>
          Program executes line by line as you would expect. It displays a message, then prompts the user to enter a number.  Whatever the user types will be stored in the variable <code>age</code> and then proceeds to the next line...
          </p>

          <p><span style="font-weight: bold; color: #00adbc; font-size: 150%;">2.</span>
          When the <code>if</code> statement is encountered the <em>first</em> thing it does is evaluate the condition in the parentheses. It checks to see if, at this point in the program, the value in a variable <code>age</code> is greater than or equal to 18.  If it is then we say the expression "<strong>returns true</strong>".  Otherwise it returns false.
          </p>

          <p><span style="font-weight: bold; color: #00adbc; font-size: 150%;">3.</span>
          These console.log statements will <em>only</em> execute if the expression was true. The curly braces surround all of the code that should be executed if, and only if, the expression was true.  Otherwise, the entire section of code encapsulated in the if statement is <em>skipped</em>.
          </p>

          <p><span style="font-weight: bold; color: #00adbc; font-size: 150%;">4.</span>
          Execution picks up here, on the first line after the closing curly brace of the if-statement.  This line will <em>always</em> execute, but notice that if the user entered an age less than 18, the entire if statement would be skipped, and it would just say "Thanks for verifying".  (We'll fix this awkwardness soon).

          </p>

          <div style="clear: both">&nbsp;</div>


      'Overview: Images':
        markdown: "# Images\n\n## Enter a URL of an image on the web\n\n<img src=\"https://images.code.org/acf4542eda586e7b73bc27dd8746848c-image-1477675154724.png\" style=\"width: 250px; float: right\">\n\nThere are several ways to get the URL of an image.  \n\nA common technique (shown at right) is to find an image you like on a web page and then right-click (or ctrl-click) and choose an option that says something like \"Copy Image Address\" then you can paste it into the text box in App Lab.\n\nIf you're unsure, you can also choose an option like \"Open Image in New Tab\" which isolate the image by itself and the URL will show in the address bar, which you can copy/paste into App Lab.\n\n**Common Mistake**: Using the URL of an *image search web site* rather than a URL of the image itself.\n\n* Make sure you get the path to an actual image file - something that ends with **.jpg**, **.gif** or **.png**.\n* A URL that starts like this: `https://www.google.com/search?q=cat&espv=2&biw=1497....`  is probably wrong.\n\n\n## Upload your own images\n\nIf you have saved images on your computer you can upload them into app lab's **asset manager**.  Just **click Upload File** and follow the dialogs on screen.\n\nFor images the file must be of type: **.jpg**, **.png**, or **.gif**\n\nOnce you've uploaded the image then you need to **Choose** it to set the image to that file. If you add multiple images you'll see them all listed every time you upload a file and you can choose to use *any* file that you've already uploaded.\n\n![](https://images.code.org/d64d7e3dadc882897e450b00a0fc6cb2-image-1476896824985.gif)\n\n### Click Continue to try it!\n\n\n"
      'Overview: onEvent':
        markdown: |
          # Responding to User Input

          You will need to dive into Code Mode to make it actually respond to users. App Lab waits to respond to certain **events** that occur in a program. The `onEvent` block specifies which UI element to wait for a event on.

          ## OnEvent

          <br><br>

          <div style="column-count: 4; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 4; width: 100%">

          <p><span style="font-weight: bold; color: #00adbc; font-size: 200%;">1.</span>
          Switch into Code Mode</p>

          <p><span style="font-weight: bold; color: #00adbc; font-size: 200%;">2.</span>
          Drag an <code>onEvent</code> block from the toolbox into the workspace.</p>

          <p><span style="font-weight: bold; color: #00adbc; font-size: 200%;">3.</span>
          Use the pulldown menu to select the <em>ID</em> of the UI element you want to setup to respond to some event. The IDs of all UI elements added in design mode will be listed here.</p>
          <p><span style="font-weight: bold; color: #00adbc; font-size: 200%;">4.</span>
          Use the pulldown menu to select the <em>type</em> of event you want to respond to. (Just use "click" for now).</p>

          <p><span style="font-weight: bold; color: #00adbc; font-size: 200%;">5.</span>
          Add code inside the function that you want to run <em>when</em> the user triggers the event.  The function will run once every time the user triggers the specific event.</p>

          </div>

          ![](https://images.code.org/9b506faaaadf61338dc738a4eafb66b2-image-1476740205599.png)
      'Overview: setPosition':
        markdown: "# setPosition and Screen Dimensions\n\nThe `setPosition` command lets you move UI elements to an arbitrary position on the screen.\n\n<img src=\"https://images.code.org/ee55080bb341528ca7e8ebc79f9f978b-image-1490369263385.27.12 AM.png\" style=\"display: block; margin: auto\">\n\nYou (perhaps obviously) need to plug actual numbers into these parameters of `setPosition` for it to have any effect.  The numbers for setPosition **x and y coordinates of the screen**.\n\n**Hints:**\n\n* 0,0 is the top left corner.\n* Specify a location by how many pixels from the **left and down** from the top of the screen it is.  \n* The screen is **320 by 450 pixels**.  \n* You can **hover over the screen** to see the x,y coordinate of any point.\n\n<div style=\"width: 100%; text-align: center\">\n<img src=\"https://images.code.org/8b346602d75f2877c64e1793b6a04302-image-1476889124747.png\">\n\n<img src=\"https://images.code.org/fc7e830fa2ea994b885c76618b484dfa-image-1476889137756.gif\">\n</div>\n"
      PicturingData-Unplugged:
        markdown: |
          # Picturing Data

          Use a Play Lab project to collect data and make predictions.

          ![](https://images.code.org/606a78c09a01133a1bbc1aa9c76f3320-image-1557334268558.png)
      PowerOfWords-Unplugged:
        markdown: |
          # The Power of Words

          Today you will learn about what to do if someone is being mean online.
      PowerfulPasswords-Unplugged:
        markdown: |
          # Powerful Passwords

          Explore why people use passwords, learn the benefits of using passwords, and discover strategies for creating and keeping strong, secure passwords.

          ![](https://images.code.org/9e082a5564a289bccc8e2dd79a2cae9f-image-1557869939256.png)
      Prepare for your presentation:
        content1: description here
        markdown: |
          # Project Presentations

          Time to present your projects! Your teacher will provide more details on how you will be presenting your work to your classmates.
        title: title
      Prepare for your presentation_2018:
        markdown: |
          # Project Presentations

          Time to present your projects! Your teacher will provide more details on how you will be presenting your work to your classmates.
        title: Prepare for yur presentation
      PrivatePersonalInformation-Unplugged:
        markdown: |
          # Private and Personal Information

          Developed by Common Sense Education, this lesson is about the difference between information that is safe to share online and information that is not.

          ![](https://images.code.org/872576b170b9d8aec9b29f684a1ad94e-image-1557878406833.png)
      RelayProgramming-Unplugged:
        markdown: |
          # Relay Programming

          Break into teams and work together to write programs that draw pictures.
      Responding to User Input:
        markdown: "# Responding to User Input\n\nDesign Mode makes it really easy to lay out the User Interface for your app, but we'll need to dive into Code Mode to make it actually respond to users.\n\nIn Game Lab the Draw loop just constantly ran code, using conditionals to check for interactions from the user. App Lab, on the other hand, waits to respond to certain **events** that occur in a program. It's App Lab's way of saying \"Hey! something just happened!\". This means that there doesn't need to be any code running when you aren't directly interacting with an app, and your code can respond to each of these events as they happen.\n\nCollectively, the coding tasks involved in making your app respond to events by triggering functions are called **Event Handling**.  \n\nIn App Lab all event handling starts by adding a special block of code called `onEvent`.  Here is how to do it:\n\n<br><br>\n\n<div style=\"column-count: 4; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 4; width: 100%\">\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 200%;\">1.</span>\nSwitch into Code Mode</p>\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 200%;\">2.</span>\nDrag an <code>onEvent</code> block from the toolbox into the workspace.</p>\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 200%;\">3.</span>\nUse the pulldown menu to select the <em>ID</em> of the UI element you want to setup to respond to some event. The IDs of all UI elements added in design mode will be listed here.</p>\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 200%;\">4.</span>\nUse the pulldown menu to select the <em>type</em> of event you want to respond to. (Just use \"click\" for now).</p>\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 200%;\">5.</span>\nAdd code inside the function that you want to run <em>when</em> the user triggers the event.  The function will run once every time the user triggers the specific event.</p>\n\n</div>\n\n![](https://images.code.org/9b506faaaadf61338dc738a4eafb66b2-image-1476740205599.png)\n\n### Changing Screens with a \"Click\"\n\nIt's important to understand in Event-Driven programming that:\n\n* **Users trigger events** - Events occur when users click a button, tap the screen, move the mouse, type a key on the keyboard, etc.\n* **Events trigger code** - When an event occurs or \"fires\" it can be used to trigger a particular javascript function.\n\nApp Lab's `onEvent` block is a type of event-handling function called an **Event Listener**. It wraps all of the setup up you need to do event handling into one command that has several parts. Here is an example with everything labeled:\n\n<img src=\"//curriculum.code.org/images/applab/onEvent_diagram.png\" style=\"display: block; margin: 20px auto\">\n\n<div style=\"column-count: 3; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 3; width: 100%\">\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 200%;\">1.</span>\nCode to execute when callback function is triggered when the user clicks <em>button1</em>.  In this case, simply move the turtle forward 25 pixels. Event handling code will typically be more than one line. This is just a simple example to start.</p>\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 200%;\">2.</span>\nNotice that this function, unlike others we've seen, does not have a name. It is also called a <em>callback function</em> which is an odd term. A callback function is only different from a normal function in that you don't call it directly from your code. Instead a callback function is <strong>called by the system</strong> at the time the specified event occurs. Callback functions are a common pattern in a lot of event-driven programming.</p>\n</div>\n\n\n### You'll try this next!\n\n"
      ScreenOutTheMean-Unplugged:
        markdown: |
          # Screen Out the Mean

          Today you will learn about what to do if someone is being mean online.
      SimonSays-Unplugged:
        markdown: |
          # Simon Says

          Play a game and think about what commands are needed to get the right result.
      Social Sleuth:
        markdown: |+
          # Social Sleuth

          You will need the <a href="https://docs.google.com/document/d/1A9q31rwrBA7tZZcZ3KZqjMb30UncM-eycwMvYgj9os4/edit#"> Social Sleuth Worksheet </a> to complete this activity.

          ## Profiles

          Click on the picture for each profile to open it.

          ### FaceSpace

          | FaceSpace: Lizzie Dell  |  FaceSpace: John T | FaceSpace: Haley G.  |
          | ---------  | ------ |  ------ |
          | <a href="https://codeprojects.org/F-S5X0IfPmaq09YxGCbOFt3yo4N4PibaA1FBsc4iSdU/" target="_blank">  <img src="https://images.code.org/178adb09adb079a9cf8f465453f9da34-image-1480624941354.42.11 PM.png" style="width:400px"> </a> | <a href="https://codeprojects.org/6qyeEpRZRNkkrkkEduW8G_VO0Y-W2Z6B2Xn5pbLsUpw/" target="_blank"><img src="https://images.code.org/5d141433497fc107a60f0c2e3c63cca8-image-1480624947223.41.59 PM.png" style="width:400px"></a>  |<a href="https://codeprojects.org/7vPoGl6YA2bop1bPaIwpYX4_ubrkEBBFau_8s3JGMoo/" target="_blank">  <img src="https://images.code.org/ced7e2ae3c4fc17b6e278de8339e9498-image-1480626229324.02.56 PM.png" style="width:400px"> </a> |


          ### Chirpr

          | Chirpr: @johnsnow  |  Chirpr:@flyinghail | Chirpr: @lillizard |
          | ---------  | ------ |  ------ |
          | <a href="https://codeprojects.org/F-CPrGMcIPZF27RUX8Z_0Qb4KFSCvlU96VSWV7IBD98/" target="_blank">  <img src="https://images.code.org/3a5e7e1136382288f1122354cf494783-image-1480625415782.49.59 PM.png" style="width:400px"> </a> | <a href="https://codeprojects.org/Kff1I24rG71I-TnC--Uw5hTqZUAWO3iTzzHRHQ3h90U/" target="_blank">  <img src="https://images.code.org/c4ae8d208cfd5cb211d74f1ca4259210-image-1480627944701.31.37 PM.png" style="width:400px"> </a> |<a href="https://codeprojects.org/c4e3JuM-nCcmYF4XbbxpJ4pX51wyClVZCDYr6HiMyHg/" target="_blank">  <img src="https://images.code.org/42fc1b77b07fbcb4d143a32f1208296f-image-1493301869142.03.52 AM.png" style="width:400px"> </a> |


          ### instantframe

          | instantframe: johnsnow  | instantframe: @photolizzie | instantframe:@desertrider |
          | ---------  | ------ |  ------ |
          | <a href="https://codeprojects.org/5Zw4FvstrOYxANYH2HFbV_mVuY-QWfrsdgga9S3DGxs/" target="_blank">  <img src="https://images.code.org/290cb1409343d57ab5ab9be93085004d-image-1480625573589.51.31 PM.png" style="width:400px"> </a> | <a href="https://codeprojects.org/JXB8ULbAJJHzC-hHoiiZFxZBT4S32HwF0krGoXSzdE8/" target="_blank">  <img src="https://images.code.org/8e7de383b0747275a075ed9839a118d0-image-1480625641547.53.30 PM.png" style="width:400px"> </a> |<a href="https://codeprojects.org/xnZk6nZxi0FKMVkwKrsQjvbGWDIwqBW9zDmuCCseMpc/" target="_blank">  <img src="https://images.code.org/c52c51816ce248336a86e3e7f6ec2209-image-1480626143808.01.54 PM.png" style="width:400px"> </a> |

      Social Sleuth_2018:
        markdown: |+
          # Social Sleuth

          You will need the <a href="https://docs.google.com/document/d/1A9q31rwrBA7tZZcZ3KZqjMb30UncM-eycwMvYgj9os4/edit#"> Social Sleuth Worksheet </a> to complete this activity.

          ## Profiles

          Click on the picture for each profile to open it.

          ### FaceSpace

          | FaceSpace: Lizzie Dell  |  FaceSpace: John T | FaceSpace: Haley G.  |
          | ---------  | ------ |  ------ |
          | <a href="https://codeprojects.org/F-S5X0IfPmaq09YxGCbOFt3yo4N4PibaA1FBsc4iSdU/" target="_blank">  <img src="https://images.code.org/178adb09adb079a9cf8f465453f9da34-image-1480624941354.42.11 PM.png" style="width:400px"> </a> | <a href="https://codeprojects.org/6qyeEpRZRNkkrkkEduW8G_VO0Y-W2Z6B2Xn5pbLsUpw/" target="_blank"><img src="https://images.code.org/5d141433497fc107a60f0c2e3c63cca8-image-1480624947223.41.59 PM.png" style="width:400px"></a>  |<a href="https://codeprojects.org/7vPoGl6YA2bop1bPaIwpYX4_ubrkEBBFau_8s3JGMoo/" target="_blank">  <img src="https://images.code.org/ced7e2ae3c4fc17b6e278de8339e9498-image-1480626229324.02.56 PM.png" style="width:400px"> </a> |


          ### Chirpr

          | Chirpr: @johnsnow  |  Chirpr:@flyinghail | Chirpr: @lillizard |
          | ---------  | ------ |  ------ |
          | <a href="https://codeprojects.org/F-CPrGMcIPZF27RUX8Z_0Qb4KFSCvlU96VSWV7IBD98/" target="_blank">  <img src="https://images.code.org/3a5e7e1136382288f1122354cf494783-image-1480625415782.49.59 PM.png" style="width:400px"> </a> | <a href="https://codeprojects.org/Kff1I24rG71I-TnC--Uw5hTqZUAWO3iTzzHRHQ3h90U/" target="_blank">  <img src="https://images.code.org/c4ae8d208cfd5cb211d74f1ca4259210-image-1480627944701.31.37 PM.png" style="width:400px"> </a> |<a href="https://codeprojects.org/c4e3JuM-nCcmYF4XbbxpJ4pX51wyClVZCDYr6HiMyHg/" target="_blank">  <img src="https://images.code.org/42fc1b77b07fbcb4d143a32f1208296f-image-1493301869142.03.52 AM.png" style="width:400px"> </a> |


          ### instantframe

          | instantframe: johnsnow  | instantframe: @photolizzie | instantframe:@desertrider |
          | ---------  | ------ |  ------ |
          | <a href="https://codeprojects.org/5Zw4FvstrOYxANYH2HFbV_mVuY-QWfrsdgga9S3DGxs/" target="_blank">  <img src="https://images.code.org/290cb1409343d57ab5ab9be93085004d-image-1480625573589.51.31 PM.png" style="width:400px"> </a> | <a href="https://codeprojects.org/JXB8ULbAJJHzC-hHoiiZFxZBT4S32HwF0krGoXSzdE8/" target="_blank">  <img src="https://images.code.org/8e7de383b0747275a075ed9839a118d0-image-1480625641547.53.30 PM.png" style="width:400px"> </a> |<a href="https://codeprojects.org/xnZk6nZxi0FKMVkwKrsQjvbGWDIwqBW9zDmuCCseMpc/" target="_blank">  <img src="https://images.code.org/c52c51816ce248336a86e3e7f6ec2209-image-1480626143808.01.54 PM.png" style="width:400px"> </a> |

      Social Sleuth_2018_2019:
        markdown: |+
          # Social Sleuth

          You will need the <a href="https://docs.google.com/document/d/1A9q31rwrBA7tZZcZ3KZqjMb30UncM-eycwMvYgj9os4/edit#"> Social Sleuth Worksheet </a> to complete this activity.

          ## Profiles

          Click on the picture for each profile to open it.

          ### FaceSpace

          | FaceSpace: Lizzie Dell  |  FaceSpace: John T | FaceSpace: Haley G.  |
          | ---------  | ------ |  ------ |
          | <a href="https://codeprojects.org/F-S5X0IfPmaq09YxGCbOFt3yo4N4PibaA1FBsc4iSdU/" target="_blank">  <img src="https://images.code.org/178adb09adb079a9cf8f465453f9da34-image-1480624941354.42.11 PM.png" style="width:400px"> </a> | <a href="https://codeprojects.org/6qyeEpRZRNkkrkkEduW8G_VO0Y-W2Z6B2Xn5pbLsUpw/" target="_blank"><img src="https://images.code.org/5d141433497fc107a60f0c2e3c63cca8-image-1480624947223.41.59 PM.png" style="width:400px"></a>  |<a href="https://codeprojects.org/7vPoGl6YA2bop1bPaIwpYX4_ubrkEBBFau_8s3JGMoo/" target="_blank">  <img src="https://images.code.org/ced7e2ae3c4fc17b6e278de8339e9498-image-1480626229324.02.56 PM.png" style="width:400px"> </a> |


          ### Chirpr

          | Chirpr: @johnsnow  |  Chirpr:@flyinghail | Chirpr: @lillizard |
          | ---------  | ------ |  ------ |
          | <a href="https://codeprojects.org/F-CPrGMcIPZF27RUX8Z_0Qb4KFSCvlU96VSWV7IBD98/" target="_blank">  <img src="https://images.code.org/3a5e7e1136382288f1122354cf494783-image-1480625415782.49.59 PM.png" style="width:400px"> </a> | <a href="https://codeprojects.org/Kff1I24rG71I-TnC--Uw5hTqZUAWO3iTzzHRHQ3h90U/" target="_blank">  <img src="https://images.code.org/c4ae8d208cfd5cb211d74f1ca4259210-image-1480627944701.31.37 PM.png" style="width:400px"> </a> |<a href="https://codeprojects.org/c4e3JuM-nCcmYF4XbbxpJ4pX51wyClVZCDYr6HiMyHg/" target="_blank">  <img src="https://images.code.org/42fc1b77b07fbcb4d143a32f1208296f-image-1493301869142.03.52 AM.png" style="width:400px"> </a> |


          ### instantframe

          | instantframe: johnsnow  | instantframe: @photolizzie | instantframe:@desertrider |
          | ---------  | ------ |  ------ |
          | <a href="https://codeprojects.org/5Zw4FvstrOYxANYH2HFbV_mVuY-QWfrsdgga9S3DGxs/" target="_blank">  <img src="https://images.code.org/290cb1409343d57ab5ab9be93085004d-image-1480625573589.51.31 PM.png" style="width:400px"> </a> | <a href="https://codeprojects.org/JXB8ULbAJJHzC-hHoiiZFxZBT4S32HwF0krGoXSzdE8/" target="_blank">  <img src="https://images.code.org/8e7de383b0747275a075ed9839a118d0-image-1480625641547.53.30 PM.png" style="width:400px"> </a> |<a href="https://codeprojects.org/xnZk6nZxi0FKMVkwKrsQjvbGWDIwqBW9zDmuCCseMpc/" target="_blank">  <img src="https://images.code.org/c52c51816ce248336a86e3e7f6ec2209-image-1480626143808.01.54 PM.png" style="width:400px"> </a> |

      Songwriting-Unplugged:
        markdown: |
          # Songwriting

          Use the concept of the chorus in a song to learn about defining and calling functions.
      'Technique: Frequency Analysis':
        content1: description here
        markdown: "# Cracking Substitution Ciphers\n\nThe best technique for cracking a random substitution cipher is known as **frequency analysis** \n\nParaphrased from: [wikipedia](https://en.wikipedia.org/wiki/Frequency_analysis)\n\n* **Frequency analysis** is a technique that is based on how *frequently* certain letters appear in English versus others.\n* For instance, given a section of English text, *E*, *T*, *A* and *O* are the most common, while *Z*, *Q* and *X* are rare. Likewise, *TH*, *ER*, *ON*, and *AN* are the most common pairs of letters that occur next to each other.\n* In fact, the distribution of letters is roughly the same for almost *all* samples of English text. \n\n\nThe version of the widget on the previous page is intended to help you **crack a substitution cipher through frequency analysis**.\n\nBy analyzing the frequency of the letters in the encrypted message compared to the frequency of letters in a typical piece of English prose, you can start to narrow in on what some of the letter mappings might be. \n\nThe tool shows you how the frequency of letters in the encrypted text (orange) compares with frequencies from typical english (blue).\n\n### Hint: Where to start?\n\n1. Find the short words and \"crack\" them first.  How many one-letter words do you know? (\"a\").  A very common 3-letter word is \"the\".\n2. Once you've done that, you have substitions for some of the most common letters.  You should be able to use intuition to look at other words with these partial subsititions and make good guesses.\n3. After finding only a handful of hard-fought letters, the rest will tumble quickly.\n4. Comparing the frequencies of letters gives good insight for making sensible guesses.\n\n### Try this:\nThe animation below shows someone getting started.  Here's what they tried\n\n* First sort the characters by frequency. \n* Identify a group of characters that might map to the word `the`.  \nIt's a good start!\n\n![](https://images.code.org/4c188dfb0b284810845285b83ce5bcd4-image-1473787694329.gif)\n\n## Is random substitution good?\n* After a little practice, how long does it take you to crack a random substitution cipher?\n* Is this good or not?\n\n\n"
        title: How to crack a substitution cipher
      Terminology Recap:
        content1: description here
        markdown: "# Pause and Recap\n\nMessages encrypted with the **Caesar cipher** are very easy to crack, especially with a computational tool. Now that you've had a little practice cracking an alphabetic shift cipher (pretty easy, huh?) let's try something more difficult.\n\n**Recap terminology:**\n\n* **Encryption** - a process of encoding messages to keep them secret, so only \"authorized\" parties can read it.\n* **Decryption** - a process that reverses encryption, taking a secret message and reproducing the original plain text\n* **Cipher** - the generic term for a technique (or algorithm) that performs encryption\n* **Caesar's Cipher** - a technique for encryption that shifts the alphabet by some number of characters.\n* **Cracking encryption** - When you attempt to decode a secret message *without* knowing all the specifics of the cipher, you are trying to **crack** the encryption. \n\n\nClick Continue to see the **Next Challenge**...\n\n \n"
        title: That was easy, what's next?
      TheRightAppMarkdownLevel_2019:
        markdown: "# The Right App\n\n* Everyone uses computers these days, especially smartphones. \n* Smartphone apps help people do things like talk to friends, listen to music, shop, or just browse the web.\n* It is important for programmers to understand others' needs and design apps with them in mind!\n\n![](https://images.code.org/fb17eeb9238d2f26c6ab40c9841517a7-image-1555611687284.png)\n"
      Unit 1 Lesson 1 Overview:
        markdown: "# Overview\n\nThe class works in groups to design aluminum foil boats that will support as many pennies as possible.  At the end of the lesson groups reflect on their experiences with the activity and make connections to the types of problem solving they will be doing for the rest of the course. \n\n\n## Resources\n\n* [Aluminum Boats](https://docs.google.com/document/d/1C5RMzH0811r8e2XdVbWV-GANm3uIar2_N8hI9jqX2rk/export?format=pdf) - Activity Guide (copy as [MS Word](https://docs.google.com/document/d/1C5RMzH0811r8e2XdVbWV-GANm3uIar2_N8hI9jqX2rk/export?format=doc), [Google Doc](https://docs.google.com/document/d/1C5RMzH0811r8e2XdVbWV-GANm3uIar2_N8hI9jqX2rk/copy))\n"
      Unit 1 Lesson 2 Overview:
        markdown: |
          # Overview

          In this lesson you will learn a formal problem solving process that will help you to structure your approach to a wide variety of problems.


          ## Resources

          * [The Problem Solving Process - Activity Guide](https://docs.google.com/document/d/1xEPMYIDy70fWCgyLymBNmxkE-6uJ7BYOXSmV8Vyt-SQ/export?format=pdf)
      Unit 1 Lesson 3 Overview:
        markdown: |
          # Overview
          In this lesson you'll apply the problem solving process to a variety of problems to explore how each step helps you develop and improve solutions to problems.

          ## Resources

          * [Solving Problems - Activity Guide](https://docs.google.com/document/d/1cym5lMuy41CbvXYe7F57N2XfI6Afp0hJsHovhR0GD2M/export?format=pdf)
      Unit 1 Lesson 4 Overview:
        markdown: |
          # Overview

          In this lesson you'll start thinking about how computers help solve certain kinds of problems and learn the key features of every computer.

          ## Resources

          * [What is a Computer - Activity Guide](https://docs.google.com/document/d/1g4dPcsx2xADEZI0FiMYApLr0hh3_-89NDWd2y86sS6I/export?format=pdf)
      Unit 1 Lesson 6 Overview:
        markdown: |
          # Problem Solving - Computers and Logic: Lesson 6 - Processing with Bits

          ## Background

          In this lesson you'll learn how computers process binary information as you design bit-level filters of simple images.

          # Resources

          * [Pixel Filtering](https://docs.google.com/document/d/1R92qKHBC8Bz3P3YXVSziyfpijJ0gMYob2j5RncWdWsA/edit?usp=sharing) - Activity Guide ([PDF](https://docs.google.com/document/d/1R92qKHBC8Bz3P3YXVSziyfpijJ0gMYob2j5RncWdWsA/export?format=pdf) | [DOCX](https://docs.google.com/document/d/1R92qKHBC8Bz3P3YXVSziyfpijJ0gMYob2j5RncWdWsA/export?format=doc))
      Unit 2 Lesson 10 Overview:
        markdown: |
          # Overview

          This lesson covers CSS classes and custom colors. The students first learn how to specify custom colors using RGB (red, green, blue) values, then apply these colors to a new Four Seasons web page, which uses CSS classes.  Using classes, students add more styles to the Four Seasons web page, then uses them to style their personal websites.
          ## Vocabulary

          * **HTML Class** - Makes it possible to define equal styles for elements by giving them all the same class name.

          ## Introduced Code

          * [RGB Color](//docs.code.org/weblab/rgb-color/)

          ## Resources

          * [RGB Colors - Activity Guide](https://docs.google.com/document/d/1zTamyJ71sVJ2JM2A2meX6kwPu4FS82KA_TJEliTPIFo/export?format=pdf)
      Unit 2 Lesson 16 Overview:
        markdown: |
          # Overview

          In the last few days of the unit, the class finalizes their personal websites, working with peers to get feedback, review the rubric, and put the finishing touches on the site. To cap off the unit, everyone shares their projects and how they were developed.


          ## Resources

          * [Final Personal Website - Peer Review](https://docs.google.com/document/d/1YMcd2-oBmcjJkW7sADlRKXnGqLdy7A3hxwm74dZlGPE/export?format=pdf)
          * [Final Personal Website - Project Guide](https://docs.google.com/document/d/15hP1rbdhWaOvcbN-KHCl3rgcNBoa0Wg2D1ZUVnkwNo0/export?format=pdf)
          * [Final Personal Website - Rubric](https://docs.google.com/document/d/1SmZaZymJbMQL04j3evH4O0PYkbtZ_l6W_6rvddB1alg/export?format=pdf)
      Unit 2 Lesson 7 Overview:
        markdown: |+
          # Overview

          This lesson introduces CSS as a way to style elements on the page. The class learns the basic syntax for CSS rule-sets and then explores properties that impact HTML text elements.  Finally, everyone applies text styles to their personal websites.
          ## Vocabulary

          * **CSS** - CSS stands for Cascading Style Sheets. CSS allows each HTML element to be styled according to certain set of rules.
          * **CSS Selector** - Specifies the part of the code which the style should be applied to.

          ## Introduced Code

          *  **[Color](//docs.code.org/weblab/color/)** - `color: value;`
          *  **[Text Align](//docs.code.org/weblab/text-align/)** - `text-align: value;`
          *  **[Text Decoration](//docs.code.org/weblab/Text-Dec/)** - `text-decoration: value;`
          *  **[Font Family](//docs.code.org/weblab/font-family/)** - `font-family:value;`
          *  **[Font Size](//docs.code.org/weblab/font-size/)** - `font-size:value;`

      Unit 2 Lesson 8 Overview:
        markdown: |+
          # Overview

          This lesson continues the introduction to CSS style properties, this time focusing more on non-text elements. The class begins by investigating and modifying the new CSS styles on a Desserts of the World page. Afterwards, everyone applies this new knowledge to their personal websites.

          ## Introduced Code

          *  **[Background Color](//docs.code.org/weblab/background-color/)** - `background-color: value;`
          *  **[Float](//docs.code.org/weblab/float/)** - `float: value;`
          *  **[Margin](//docs.code.org/weblab/margin/)** - `margin: value;`
          *  **[Width](//docs.code.org/weblab/width/)** - `width: value;`
          *  **[Height](//docs.code.org/weblab/height/)** - `height: value;`
          *  **[Border Style](//docs.code.org/weblab/border-style/)** - `border-style: value;`
          *  **[Border Width](//docs.code.org/weblab/border-width/)** - `border-width: value;`
          *  **[Border Color](//docs.code.org/weblab/border-color/)** - `border-color: value;`

      courseD_external_binary1:
        markdown: "<h1>Draw with Binary</h1>\n \n<h3>Binary is a way of representing information using only two options. In this case, <b>off</b> and <b>on</b>.\n<br/>\nHere, we're going to use the number <b>0</b> as code for \"off\" and the number <b>1</b> as code for \"on\".\n<br/>\n<table>\n<tr><td><img src=\"https://images.code.org/50283881d577c17ac6f1d1648d8f361f-image-1483640342574.09.14.png\" width=\"75px\"/></td><td><img src=\"https://images.code.org/ba6f0a000b18f2dd87160e6255e8a71c-image-1483640355103.09.24.png\" width=\"90px\"/></td></tr>\n<tr padding=\"0px\"><td align=\"center\"><b>0</b></td><td align=\"center\"><b>1</b></td></tr>\n</table><img src=\"https://images.code.org/934883837aa59bca1d5c1ded0e0ac675-image-1483640120036.51.06.png\" float=\"left\"/><h3>In this stage, we've provided you with a grid of \"pixels\" that you can walk through and make designs by turning on certain squares!</h3>\n\n![](https://images.code.org/c53e00cde9acbae72d02fb9cc2a20e53-image-1483639858942.png)\n\n\n"
        title: Binary Drawing
      courseD_external_binary1_2018:
        markdown: "<h1>Draw with Binary</h1>\n \n<h3>Binary is a way of representing information using only two options. In this case, <b>off</b> and <b>on</b>.\n<br/>\nHere, we're going to use the number <b>0</b> as code for \"off\" and the number <b>1</b> as code for \"on\".\n<br/>\n<table>\n<tr><td><img src=\"https://images.code.org/50283881d577c17ac6f1d1648d8f361f-image-1483640342574.09.14.png\" width=\"75px\"/></td><td><img src=\"https://images.code.org/ba6f0a000b18f2dd87160e6255e8a71c-image-1483640355103.09.24.png\" width=\"90px\"/></td></tr>\n<tr padding=\"0px\"><td align=\"center\"><b>0</b></td><td align=\"center\"><b>1</b></td></tr>\n</table><img src=\"https://images.code.org/934883837aa59bca1d5c1ded0e0ac675-image-1483640120036.51.06.png\" float=\"left\"/><h3>In this stage, we've provided you with a grid of \"pixels\" that you can walk through and make designs by turning on certain squares!</h3>\n\n![](https://images.code.org/c53e00cde9acbae72d02fb9cc2a20e53-image-1483639858942.png)\n\n\n"
        title: Binary Drawing
      courseD_external_binary1_2018_2019:
        markdown: "<h1>Draw with Binary</h1>\n \n<h3>Binary is a way of representing information using only two options. In this case, <b>off</b> and <b>on</b>.\n<br/>\nHere, we're going to use the number <b>0</b> as code for \"off\" and the number <b>1</b> as code for \"on\".\n<br/>\n<table>\n<tr><td><img src=\"https://images.code.org/50283881d577c17ac6f1d1648d8f361f-image-1483640342574.09.14.png\" width=\"75px\"/></td><td><img src=\"https://images.code.org/ba6f0a000b18f2dd87160e6255e8a71c-image-1483640355103.09.24.png\" width=\"90px\"/></td></tr>\n<tr padding=\"0px\"><td align=\"center\"><b>0</b></td><td align=\"center\"><b>1</b></td></tr>\n</table><img src=\"https://images.code.org/934883837aa59bca1d5c1ded0e0ac675-image-1483640120036.51.06.png\" float=\"left\"/><h3>In this stage, we've provided you with a grid of \"pixels\" that you can walk through and make designs by turning on certain squares!</h3>\n\n![](https://images.code.org/c53e00cde9acbae72d02fb9cc2a20e53-image-1483639858942.png)\n\n\n"
        title: Binary Drawing
      courseE_project_exemplars_2019:
        content1: Test Markdown Textbook Page
        markdown: |+
          # Project Examples

          You are about to start your final project. Before you begin, spend some time looking at the example projects.

          ## Sprite Lab

          | Monster Dance (Sprite Lab) | Cupcake Game (Sprite Lab) |
          |---|---|
          | [![Monster Dance (Sprite Lab)](https://images.code.org/85838ca11b728dce3e1513515c4510e3-image-1556826303297.png "Monster Dance (Sprite Lab")](https://studio.code.org/projects/spritelab/S2l_b6LHSmSULTBF7CibJm1rTsngztJyu5pgORe7GBs/view) | [![Cupcake Game (Sprite Lab)](https://images.code.org/c90080aaf05349fb6e1fbb6861e815df-image-1556809855136.png "Cupcake Game (Sprite Lab")](https://studio.code.org/projects/spritelab/gXM_YU_qL_QWo1o5Wkam96oiFrYY5VUp27m2xKlp7EQ/view) |
          | Try adding text or a score to this game! | Try adding text or a score to this game! |

          ## Artist

          | Pattern (Artist) | Function Flowers (Arist) |
          |---|---|
          | [![Pattern (Artist)](https://images.code.org/2432878706891dda080b69428ddc4a20-image-1556822714214.png "Pattern (Artist)")](https://studio.code.org/projects/artist/TznMeJRa4SnHWJvUBEoNUw/view) | [![Function Flowers (Artist)](https://images.code.org/1e6da38baf996dace44581572895a4b8-image-1556822184973.png "Function Flowers (Artist)")](https://studio.code.org/projects/artist/4uGqFaTnc7V9B6IqCqj21Q/view) |
          | Let's get creative with nested loops! | Let's get creative with functions! |

        title: Test Markdown Textbook Page
      courseF_external_variableConstant:
        markdown: "<h2>More on Variables</h2>\n\n\n<img src=\"https://images.code.org/082c757f5c939bd353eacda9589ca54f-image-1477349401281.35.08.png\" style=\"padding-left: 30px; width:300px; float:right;\"/>\n<h3>You've just learned one great way to use a variable...as a constant!  \nWhen you use a variable as a constant, you are setting a value one time, then using that *same* value multiple times in your program without changing it after you click \"Run\".  </h3>\n<br/><hr/>\n<h3>In the next part of the series, you will write code with variables that *do* change inside the program.</h3>\n\n"
      courseF_external_variableConstant_2018:
        markdown: "<h2>More on Variables</h2>\n\n\n<img src=\"https://images.code.org/082c757f5c939bd353eacda9589ca54f-image-1477349401281.35.08.png\" style=\"padding-left: 30px; width:300px; float:right;\"/>\n<h3>You've just learned one great way to use a variable...as a constant!  \nWhen you use a variable as a constant, you are setting a value one time, then using that *same* value multiple times in your program without changing it after you click \"Run\".  </h3>\n<br/><hr/>\n<h3>In the next part of the series, you will write code with variables that *do* change inside the program.</h3>\n\n"
      courseF_external_variableConstant_2018_2019:
        markdown: "<h2>More on Variables</h2>\n\n\n<img src=\"https://images.code.org/082c757f5c939bd353eacda9589ca54f-image-1477349401281.35.08.png\" style=\"padding-left: 30px; width:300px; float:right;\"/>\n<h3>You've just learned one great way to use a variable...as a constant!  \nWhen you use a variable as a constant, you are setting a value one time, then using that *same* value multiple times in your program without changing it after you click \"Run\".  </h3>\n<br/><hr/>\n<h3>In the next part of the series, you will write code with variables that *do* change inside the program.</h3>\n\n"
      courseF_markdown_algorithms_end:
        content1: Test Markdown Textbook Page
        markdown: "# **You just learned \"algorithms\"!**  \n\n\n\n### **An algorithm is just a list of steps to finish a task**. The fun thing about algorithms is that you get to decide what happens, step by step.  \n\n### When you write an algorithm for a machine, this is called a **program**.  \n\n---\n\n## **Vocab to Know**\n\n* ### **Algorithm** - A list of steps to finish a task\n\n* ### **Program** - An algorithm that has been coded into something that can be run by a machine\n"
        title: Test Markdown Textbook Page
      courseF_markdown_algorithms_intro:
        content1: Test Markdown Textbook Page
        markdown: |
          # **In this lesson...**

          ### Have you ever wanted to tell someone exactly what to do? Do they always listen to you?

          ### Today, you'll be telling a machine what to do, step by step- and it will listen!

          ---

          ## **Blocks to Know**

          ![](https://images.code.org/b2376dc67948e29247931dec5e9fef8f-image-1524678585868.png)

          ![](https://images.code.org/bd2de01f2c3b86109329b10eb544a6e6-image-1524678600994.png)

          ![](https://images.code.org/db76d28bb3dbabdb78edb2cf54c6cb11-image-1524678618646.png)
        title: Test Markdown Textbook Page
      courseF_markdown_conditionals_end:
        content1: Test Markdown Textbook Page
        markdown: "# **You just learned \"conditionals\"!**\n\n### Conditionals are super useful in computer science. Imagine logging in to your favorite website and typing in your password. The website has to use conditionals to check *if* the password you entered matches the password it has saved for your username. \n\n### `If` it matches, log in! \n\n### `Else`, give the user an error.  \n\n---\n\n## **Vocab to Know**\n\n* ### **Condition** - Something a program checks before allowing an action\n\n* ### **Conditionals** - Statements that only run under certain conditions\n\n"
        title: Test Markdown Textbook Page
      courseF_markdown_conditionals_intro:
        content1: Test Markdown Textbook Page
        markdown: "# **In this lesson...**\n\n### **Conditions** are things that can be true or false. \n\n### You will learn how to use conditions in a program to make things happen `while`, `until`, or `if` something is true!\n---\n\n## **Blocks to Know**\n\n![](https://images.code.org/8c6cc9ffa31c916fc970c67382d83b8d-image-1524770260439.png)\n\n![](https://images.code.org/c2fbbaf80b348d47ba2dac4497ae2624-image-1524770272898.png)\n\n![](https://images.code.org/6b90e2dfb025609f8762014ff0ba51dc-image-1524770241058.png)\n\n\n"
        title: Test Markdown Textbook Page
      courseF_markdown_debugging_end:
        content1: Test Markdown Textbook Page
        markdown: |
          # **You just learned "debugging"!**

          ### **A bug is something that goes wrong.** It is an error in a program. When you find and fix those errors, you are **debugging** a problem.

          ### You have to practice **persistence**, another word for not giving up, in order to find and fix all the bugs.

          ---

          ## **Vocab to Know**

          * ### **Bug** - Part of a program that does not work correctly

          * ### **Debugging** - Finding and fixing problems in an algorithm or program

          * ### **Persistence** - Not giving up
        title: Test Markdown Textbook Page
      courseF_markdown_debugging_intro:
        content1: Test Markdown Textbook Page
        markdown: "# In this lesson...\n\n### What do you think of when you think about bugs? \n\n### When most people think about bugs, they think about creepy crawly things. In computer science, bugs aren't alive, but they can still be tricky.\n\n### The puzzles in this lesson have already been solved for you! But not so fast- they don't seem to be working yet. Are bugs behind all this? \n\n---\n\n## Blocks to Know\n\n![](https://images.code.org/b2376dc67948e29247931dec5e9fef8f-image-1524678585868.png)\n\n![](https://images.code.org/bd2de01f2c3b86109329b10eb544a6e6-image-1524678600994.png)\n\n![](https://images.code.org/db76d28bb3dbabdb78edb2cf54c6cb11-image-1524678618646.png)\n"
        title: Test Markdown Textbook Page
      courseF_markdown_forloops_end:
        content1: Test Markdown Textbook Page
        markdown: "# **You just learned \"for loops\"!**\n\n### **For loops are loops where you set the start, stop, and step values.**\n\n### This new kind of `repeat` loop gives you more control over when you loop starts, when it ends, and what your loop should increase by every time it runs.\n\n### More control means you can solve puzzles a lot faster! \n\n---\n\n## **Vocab to Know**\n\n### **For loop** - For loops are loops that have a predetermined beginning, end, and increment (step interval)\n\n"
        title: Test Markdown Textbook Page
      courseF_markdown_forloops_end_2019:
        content1: Test Markdown Textbook Page
        markdown: "# **You just learned \"for loops\"!**\n\n### **For loops are loops where you set the start, stop, and step values.**\n\n### This new kind of `repeat` loop gives you more control over when you loop starts, when it ends, and what your loop should increase by every time it runs.\n\n### More control means you can solve puzzles a lot faster! \n\n---\n\n## **Vocab to Know**\n\n### **For loop** - For loops are loops that have a predetermined beginning, end, and increment (step interval)\n\n"
        title: Test Markdown Textbook Page
      courseF_markdown_forloops_intro:
        content1: Test Markdown Textbook Page
        markdown: |+
          # **In this lesson...**

          ### Today you'll be learning about a new kind of `repeat` loop. Here is a preview of the block you'll be using:

          ![](https://images.code.org/d9cb4b829fe4e688b10c19e879cf4a4b-image-1531938148965.png)

          ### *For*tunately, this new loop will make solving puzzles like this really easy!

          ![](https://images.code.org/072230b389feb9c6c6998619a245b8af-image-1524773190948.png)

        title: Test Markdown Textbook Page
      courseF_markdown_forloops_intro_2019:
        content1: Test Markdown Textbook Page
        markdown: |+
          # **In this lesson...**

          ### Today you'll be learning about a new kind of `repeat` loop. Here is a preview of the block you'll be using:

          ![](https://images.code.org/d9cb4b829fe4e688b10c19e879cf4a4b-image-1531938148965.png)

          ### *For*tunately, this new loop will make solving puzzles like this really easy!

          ![](https://images.code.org/072230b389feb9c6c6998619a245b8af-image-1524773190948.png)

        title: Test Markdown Textbook Page
      courseF_markdown_loops_end:
        content1: Test Markdown Textbook Page
        markdown: "# **You just learned \"loops\"!**  \n\n### **A loop is the action of doing something over and over again.** Another word for doing something again is repeat.\n\n### Loops are really useful for repeating patterns. It might be helpful to write out your program without any loops first, then try to find a pattern. \n\n### When you see one, stick that pattern into a `repeat` block!\n\n---\n\n## **Vocab to Know**\n\n* ### **Loop** - The action of doing something over and over again\n\n* ### **Repeat** - Do something again\n"
        title: Test Markdown Textbook Page
      courseF_markdown_loops_intro:
        content1: Test Markdown Textbook Page
        markdown: "# In this lesson...\n\n### Imagine you want your character to move forward **5** times. This would be pretty easy- just drag out **5** move forward blocks. Now, imagine you want your character to move forward **5,000** times! \n\n### How long would it take you to drag out **5,000** blocks? \n\n### Wish there was an easy way to do this? There is!\n\n---\n\n## Blocks to Know\n\n![](https://images.code.org/2d949be303e653f4ea203cc00f0b06c3-image-1524697677509.png)\n"
        title: Test Markdown Textbook Page
      courseF_markdown_nestedloops_end:
        content1: Test Markdown Textbook Page
        markdown: "# **You just learned \"nested loops\"!**\n\n### **A nested loop is a loop within a loop.** Think of it like an outer loop, with another loop that got all comfy and cozy and nested inside the outer loop. \n\n### Nested loops are great for repeating patterns of patterns. They can be very powerful if used correctly!\n\n---\n\n## **Vocab to Know**\n\n### __Nested Loops__ - A loop within a loop\n\n"
        title: Test Markdown Textbook Page
      courseF_markdown_nestedloops_intro:
        content1: Test Markdown Textbook Page
        markdown: "# **In this lesson...**\n\n### Have you ever wondered what would happen if you put a loop *inside another loop*? \n\n### It might just make you go loopy!\n\n### If a normal loop is good at repeating patterns, what do you think a loop inside another loop would be good at? Let's find out!\n\n---\n\n## **Blocks to Know**\n\n![](https://images.code.org/cecea12a6973648b56512ff0990da6fb-image-1524759116715.gif)\n"
        title: Test Markdown Textbook Page
      courseF_markdown_variables_end:
        content1: Test Markdown Textbook Page
        markdown: "# **You just learned \"variables\"!**\n\n### In order to use a variable, it needs a name and a value. The name doesn't change, but the value can. This way you can use the name of the variable as a placeholder wherever you want in your program! \n\n---\n\n## **Vocab to Know**\n\n### **Variable** - A placeholder for a piece of information that can change\n\n"
        title: Test Markdown Textbook Page
      courseF_markdown_variables_end_2019:
        content1: Test Markdown Textbook Page
        markdown: "# **You just learned \"variables\"!**\n\n### In order to use a variable, it needs a name and a value. The name doesn't change, but the value can. This way you can use the name of the variable as a placeholder wherever you want in your program! \n\n---\n\n## **Vocab to Know**\n\n### **Variable** - A placeholder for a piece of information that can change\n\n"
        title: Test Markdown Textbook Page
      courseF_markdown_variables_intro:
        content1: Test Markdown Textbook Page
        markdown: |+
          # **In this lesson...**

          ### *Variables* are placeholders for information that can change.  Having a placeholder makes it possible to write a program, even when you won't know all of your values until later!


          ---

          ## **Blocks to Know**

          ![](https://images.code.org/2e5804ee6783390a6b86b7b2d7153594-image-1524772405748.png)


        title: Test Markdown Textbook Page
      courseF_markdown_variables_intro_2019:
        content1: Test Markdown Textbook Page
        markdown: |+
          # **In this lesson...**

          ### *Variables* are placeholders for information that can change.  Having a placeholder makes it possible to write a program, even when you won't know all of your values until later!


          ---

          ## **Blocks to Know**

          ![](https://images.code.org/2e5804ee6783390a6b86b7b2d7153594-image-1524772405748.png)


        title: Test Markdown Textbook Page
      courseF_project_exemplars_2019:
        content1: Test Markdown Textbook Page
        markdown: |+
          # Project Examples

          You are about to start your final project. Before you begin, spend some time looking at the example projects.

          ## Sprite Lab

          | Cupcake Game (Sprite Lab) | Helicopter Game (Sprite Lab) |
          |---|---|
          | [![#Bunny Game (Sprite Lab)](https://images.code.org/c90080aaf05349fb6e1fbb6861e815df-image-1556809855136.png)](https://studio.code.org/projects/spritelab/gXM_YU_qL_QWo1o5Wkam96oiFrYY5VUp27m2xKlp7EQ/view) | [![#Helicopter Game (Sprite Lab)](https://images.code.org/1a273fd447b952367792423a70c5087a-image-1556812149075.png)](https://studio.code.org/projects/spritelab/QeROTy1pNyjNPC-ZZdBN1mcpkmTEMUc2FYwXX0SOFAY/view) |
          | Try adding text or a score to this game! | Try adding text or a score to this game! |

          ## Artist

          | Flowers (Artist) | Spiral (Arist) |
          |---|---|
          | [![Flowers (Artist)](https://images.code.org/0f5adf63c318eab8c8acb397d9db7f2a-image-1556821537577.png)](https://studio.code.org/projects/artist/MIMh2pV2IiLm1ZzaiA6N7kKvg534lFck3abLXTsvZU8/view) | [![Spiral (Artist)](https://images.code.org/06514571a8cf2f8b0346006ac1adc219-image-1556819399386.png)](https://studio.code.org/projects/artist/66scPDPWa8RNNHkcXDaXdA/view) |
          | Let's get creative with variables! | Let's get creative with For Loops! |

        title: Test Markdown Textbook Page
      csd-post-survey-2018-markdown-with-link-to-survey:
        markdown: |+
          # CS Discoveries Post-Course Survey

          **Your input and feedback is important to us!** We use it to:

          * make improvements to the course
          * understand your experience
          * tell us what topics you want to learn more about in the future

          Thanks for taking the time to help make CS Discoveries even better!

          <a class="btn btn-large btn-success" href="/s/csd-post-survey/stage/1/puzzle/1/page/1" target="top">Click here to complete the CS Discoveries Post-Course Survey!!!</a>

          (opens in a new tab)

          <br>





      csd-post-survey-2018-markdown-with-link-to-survey_v2:
        markdown: |+
          # CS Discoveries Post-Course Survey

          **Your input and feedback is important to us!** We use it to:

          * understand your experience
          * make improvements to the course

          Thanks for taking the time to help make CS Discoveries even better!

          <a class="btn btn-large btn-success" href="/s/csd-post-survey-2018/stage/1/puzzle/1/page/1" target="top">Click here to complete the CS Discoveries Post-Course Survey</a>

          (opens in a new tab)

          <br>





      csd-post-survey-intro-2019:
        markdown: "# This survey is still under development\n"
      gradek1_activity_beNice:
        markdown: "# Behaving in the Computer Lab\n  \n<br/><br/>    \n    \n<a href=\"https://docs.google.com/document/d/18KHX5NNlmXX1Eqt8u6LFRzto7PK4dIFNv-tr1F1joUQ/edit?usp=sharing\" target=\"_new\">\n<button>\nGo to lesson plan\n</button> \n</a>\n\n<br/><br/>\n<a class=\"btn btn-large btn-primary next-stage submitButton\">Continue</a>\n"
        title: The computer is your friend
    level_group:
      name:
        CSD Interactive Animations and Games Post-Project Test: {}
        CSD Physical Computing Post-Project Test: {}
        CSD U1 Test: {}
        CSD U5 test: {}
        CSD User Centered Design Post-Project Test: {}
        CSD Web Development Post-Project Test: {}
        csd-post-survey-2017-levelgroup: {}
        csd-post-survey-2017-levelgroup-2018-2nd-semester: {}
        csd-post-survey-2017-levelgroup_2018: {}
        csd-post-survey-2017-levelgroup_2018_2019: {}
        csd-post-survey-levelgroup-2018: {}
        csd-pre-survey-2017-levelgroup: {}
        csd-pre-survey-2017-levelgroup_2018: {}
        csd-pre-survey-2017-levelgroup_2018_2019: {}
        csd-pulse-check-survey-1-levelgroup U1Ch2: {}
        csd-pulse-check-survey-1-levelgroup U1Ch2_2018: {}
        csd-pulse-check-survey-1-levelgroup U1Ch2_2018_2019: {}
        csd-pulse-check-survey-1-levelgroup U2Ch1: {}
        csd-pulse-check-survey-1-levelgroup U2Ch1_2018: {}
        csd-pulse-check-survey-1-levelgroup U2Ch1_2018_2019: {}
        csd-pulse-check-survey-1-levelgroup U2Ch2: {}
        csd-pulse-check-survey-1-levelgroup U2Ch2_2018: {}
        csd-pulse-check-survey-1-levelgroup U2Ch2_2018_2019: {}
        csd-pulse-check-survey-1-levelgroup U3Ch1: {}
        csd-pulse-check-survey-1-levelgroup U3Ch1_2018: {}
        csd-pulse-check-survey-1-levelgroup U3Ch1_2018_2019: {}
        csd-pulse-check-survey-1-levelgroup U3Ch2: {}
        csd-pulse-check-survey-1-levelgroup U3Ch2_2018: {}
        csd-pulse-check-survey-1-levelgroup U3Ch2_2018_2019: {}
        csd-pulse-check-survey-1-levelgroup U4Ch1: {}
        csd-pulse-check-survey-1-levelgroup U4Ch1_2018: {}
        csd-pulse-check-survey-1-levelgroup U4Ch1_2018_2019: {}
        csd-pulse-check-survey-1-levelgroup U4Ch2: {}
        csd-pulse-check-survey-1-levelgroup U4Ch2_2018: {}
        csd-pulse-check-survey-1-levelgroup U4Ch2_2018_2019: {}
        csd-pulse-check-survey-1-levelgroup U5Ch1: {}
        csd-pulse-check-survey-1-levelgroup U5Ch1_2018: {}
        csd-pulse-check-survey-1-levelgroup U5Ch1_2018_2019: {}
        csd-pulse-check-survey-1-levelgroup U5Ch2: {}
        csd-pulse-check-survey-1-levelgroup U5Ch2_2018: {}
        csd-pulse-check-survey-1-levelgroup U5Ch2_2018_2019: {}
        csd-pulse-check-survey-1-levelgroup U6Ch1: {}
        csd-pulse-check-survey-1-levelgroup U6Ch1_2018: {}
        csd-pulse-check-survey-1-levelgroup U6Ch1_2018_2019: {}
        csd-pulse-check-survey-1-levelgroup U6Ch2: {}
        csd-pulse-check-survey-1-levelgroup U6Ch2_2018: {}
        csd-pulse-check-survey-1-levelgroup U6Ch2_2018_2019: {}
    match:
      2-3 Big Event Match 1:
        answers:
        - text: "/script_assets/k_1_images/unplugged_images/big_event_1_a1.png"
        - text: "/script_assets/k_1_images/unplugged_images/big_event_1_a2.png"
        - text: "/script_assets/k_1_images/unplugged_images/big_event_1_a3.png"
        - text: "/script_assets/k_1_images/unplugged_images/big_event_1_a4.png"
        content1: "/script_assets/k_1_images/unplugged_images/big_event_1_desc.png"
        content2: Match the button combination to the dance moves.
        questions:
        - text: "/script_assets/k_1_images/unplugged_images/big_event_1_q1.png"
        - text: "/script_assets/k_1_images/unplugged_images/big_event_1_q2.png"
        - text: "/script_assets/k_1_images/unplugged_images/big_event_1_q3.png"
        - text: "/script_assets/k_1_images/unplugged_images/big_event_1_q4.png"
        title: Matching
      2-3 Binary Match 1:
        answers:
        - text: "/script_assets/2-3_images/unplugged/binary_1_a3.png"
        - text: "/script_assets/2-3_images/unplugged/binary_1_a1.png"
        - text: "/script_assets/2-3_images/unplugged/binary_1_a2.png"
        - text: "/script_assets/2-3_images/unplugged/binary_1_a4.png"
        content1: "/script_assets/2-3_images/unplugged/binary_1_q.png, 250"
        content2: Use the key to match each code to its letter
        questions:
        - text: "<strong>N</strong>"
        - text: "<strong>O</strong>"
        - text: "<strong>P</strong>"
        - text: "<strong>Q</strong>"
        title: Matching
      2-3 Graph Paper Match 1:
        answers:
        - text: "/script_assets/2-3_images/unplugged/graph_paper_2_a3.png"
        - text: "/script_assets/2-3_images/unplugged/graph_paper_2_a2.png"
        - text: "/script_assets/2-3_images/unplugged/graph_paper_2_a1.png"
        content1: Match the grid to the program.
        questions:
        - text: "/script_assets/2-3_images/unplugged/graph_paper_2_q1.png"
        - text: "/script_assets/2-3_images/unplugged/graph_paper_2_q2.png"
        - text: "/script_assets/2-3_images/unplugged/graph_paper_2_q3.png"
        title: Matching
      2-3 Maze Match 2:
        answers:
        - text: "/script_assets/2-3_images/maze/2-3_maze_match_2_a1.png"
        - text: "/script_assets/2-3_images/maze/2-3_maze_match_2_a2.png"
        - text: "/script_assets/2-3_images/maze/2-3_maze_match_2_a3.png"
        content1: Match the puzzles to the blocks
        pre_title: Instructions
        questions:
        - text: "/script_assets/2-3_images/maze/2-3_maze_match_2_q1.png"
        - text: "/script_assets/2-3_images/maze/2-3_maze_match_2_q2.png"
        - text: "/script_assets/2-3_images/maze/2-3_maze_match_2_q3.png"
        title: Maze Match
      2-3 artist loops match 1:
        answers:
        - text: "/script_assets/2-3_images/artist/2-3_artistloops_match_1_a1.png"
        - text: "/script_assets/2-3_images/artist/2-3_artistloops_match_1_a2.png"
        - text: "/script_assets/2-3_images/artist/2-3_artistloops_match_1_a3.png"
        - text: "/script_assets/2-3_images/artist/2-3_artistloops_match_1_a4.png"
        content2: Match the loop to the shape
        questions:
        - text: "/script_assets/2-3_images/artist/2-3_artistloops_match_1_q1.png"
        - text: "/script_assets/2-3_images/artist/2-3_artistloops_match_1_q2.png"
        - text: "/script_assets/2-3_images/artist/2-3_artistloops_match_1_q3.png"
        - text: "/script_assets/2-3_images/artist/2-3_artistloops_match_1_q4.png"
        title: Artist Loops Matching 1
      2-3 artist match 1:
        answers:
        - text: "/script_assets/2-3_images/artist/2-3_artist_match_1_a1.png"
        - text: "/script_assets/2-3_images/artist/2-3_artist_match_1_a2.png"
        - text: "/script_assets/2-3_images/artist/2-3_artist_match_1_a3.png"
        - text: "/script_assets/2-3_images/artist/2-3_artist_match_1_a4.png"
        content1: Match the shape with the blocks that complete it.
        questions:
        - text: "/script_assets/2-3_images/artist/2-3_artist_match_1_q1.png"
        - text: "/script_assets/2-3_images/artist/2-3_artist_match_1_q2.png"
        - text: "/script_assets/2-3_images/artist/2-3_artist_match_1_q3.png"
        - text: "/script_assets/2-3_images/artist/2-3_artist_match_1_q4.png"
        title: Artist Matching
      2-3 maze match 1:
        answers:
        - text: "/script_assets/2-3_images/maze/2-3_maze_match_1_a1.png"
        - text: "/script_assets/2-3_images/maze/2-3_maze_match_1_a2.png"
        - text: "/script_assets/2-3_images/maze/2-3_maze_match_1_a3.png"
        content1: Match the puzzles to the blocks
        questions:
        - text: "/script_assets/2-3_images/maze/2-3_maze_match_1_q1.png"
        - text: "/script_assets/2-3_images/maze/2-3_maze_match_1_q2.png"
        - text: "/script_assets/2-3_images/maze/2-3_maze_match_1_q3.png"
        title: Maze Match One
      4-5 Algorithms Match 1:
        answers:
        - text: "<h4>Set Player 1 score to 0</h4>"
        - text: "<h4>Player 1 rolls die</h4>"
        - text: "<h4>Add Player 1 roll to total score</h4>"
        - text: "<h4>Compare player scores to see who wins</h4>"
        content1: Match the steps in the Dice Race game to the order that they should appear in the algorithm.
        questions:
        - text: "<h4>1)</h4>"
        - text: "<h4>2)</h4>"
        - text: "<h4>3)</h4>"
        - text: "<h4>4)</h4>"
        title: Matching
      4-5 Computational Thinking Match 1:
        answers:
        - text: "/script_assets/4-5_images/unplugged/comp_thinking_2_a1.png"
        - text: "/script_assets/4-5_images/unplugged/comp_thinking_2_a2.png"
        - text: "/script_assets/4-5_images/unplugged/comp_thinking_2_a3.png"
        - text: "/script_assets/4-5_images/unplugged/comp_thinking_2_a4.png"
        content1: Each of these vehicles has been decomposed into smaller pieces. Match each vehicle with its decomposed list.
        questions:
        - text: "<h3>Wheels/side: 2<br/>Windows/side: 0</h3>"
        - text: "<h3>Wheels/side: 2<br/>Windows/side: 1</h3>"
        - text: "<h3>Wheels/side: 2<br/>Windows/side: 6</h3>"
        - text: "<h3>Wheels/side: 3<br/>Windows/side: 2</h3>"
        title: Matching
      4-5 Suncatchers Match 1:
        answers:
        - text: "<h4>STACK</h4>"
        - text: "<h4>STAMP</h4>"
        - text: "<h4>STAR</h4>"
        - text: "<h4>RAMP</h4>"
        content1: Match each program to the word it makes, using the provided group of skills.
        content2: "/script_assets/4-5_images/unplugged/suncatchers_1.png"
        questions:
        - text: "/script_assets/4-5_images/unplugged/suncatchers_1_a1.png"
        - text: "/script_assets/4-5_images/unplugged/suncatchers_1_a2.png"
        - text: "/script_assets/4-5_images/unplugged/suncatchers_1_a3.png"
        - text: "/script_assets/4-5_images/unplugged/suncatchers_1_a4.png"
        title: Matching
      4-5 maze match 1:
        answers:
        - text: "/script_assets/4-5_images/maze/4-5_maze_match_1_a1.png"
        - text: "/script_assets/4-5_images/maze/4-5_maze_match_1_a2.png"
        - text: "/script_assets/4-5_images/maze/4-5_maze_match_1_a3.png"
        content1: Match the puzzles to the blocks
        pre_title: Instructions
        questions:
        - text: "/script_assets/4-5_images/maze/4-5_maze_match_1_q1.png"
        - text: "/script_assets/4-5_images/maze/4-5_maze_match_1_q2.png"
        - text: "/script_assets/4-5_images/maze/4-5_maze_match_1_q3.png"
        title: Maze Match
      CSD U2 image debug match:
        answers:
        - text: <img src="https://images.code.org/6015fb13fa76d32072de2762d7d363ba-image-1553717013288.02.34 PM.png">
        - text: <img src="https://images.code.org/555e64ae1a9a586d902f1ed254e4e00c-image-1553717003484.03.01 PM.png">
        - text: <img src="https://images.code.org/e3b9be5444661a34eefe9bfa89e94cbc-image-1553717006899.02.47 PM.png">
        - text: <img src="https://images.code.org/0ffde880f790f497b2aaef29f40272f4-image-1553717010350.02.40 PM.png">
        - text: <img src="https://images.code.org/a86b628a71ae0415fe48dfd8a19ee69a-image-1553717016038.02.24 PM.png">
        content1: Match the buggy HTML code with the description of its bug.
        questions:
        - text: The `src` attribute is spelled incorrectly.
        - text: The `src` and `alt` attributes are switched
        - text: The the file extension (.jpg) is missing from the image address
        - text: The image address is not given as a `src` attribute
        - text: There is a space in the file name
      CSD U2 lists match:
        answers:
        - text: https://images.code.org/c77491ea22b3b977383bfd2ca3655df1-image-1493336218041.31.27 PM.png
        - text: https://images.code.org/9007a23e2767b57e84ffad78675faf6a-image-1493336218044.50.09 PM.png
        - text: https://images.code.org/d3be2ba9f4a398277f9663bbd5fdf783-image-1493336218042.31.59 PM.png
        - text: https://images.code.org/1bbd9b340b51a295760f8daa4714cf84-image-1493336218035.32.21 PM.png
        - text: https://images.code.org/72bbedfd40904b68f2020af0676e0c3a-image-1493399020395.02.32 AM.png
        content1: Match the list to the code that makes it.
        questions:
        - text: https://images.code.org/b7b998dd12e507d163d7dac0fcd37b8c-image-1493336218044.31.41 PM.png
        - text: https://images.code.org/d9af5a34631dee994f99750f48f52b66-image-1493336218042.50.24 PM.png
        - text: https://images.code.org/63b9f044db7dfa10d0486920e982f217-image-1493336218039.32.08 PM.png
        - text: https://images.code.org/17bf31d6521c45f56301f6224732e514-image-1493336218041.32.29 PM.png
        - text: https://images.code.org/50e0264011243637e12e4972d573d278-image-1493399022792.02.38 AM.png
        title: Lists Quick Check
      CSD U2 lists match_2018:
        answers:
        - text: https://images.code.org/c77491ea22b3b977383bfd2ca3655df1-image-1493336218041.31.27 PM.png
        - text: https://images.code.org/9007a23e2767b57e84ffad78675faf6a-image-1493336218044.50.09 PM.png
        - text: https://images.code.org/d3be2ba9f4a398277f9663bbd5fdf783-image-1493336218042.31.59 PM.png
        - text: https://images.code.org/1bbd9b340b51a295760f8daa4714cf84-image-1493336218035.32.21 PM.png
        - text: https://images.code.org/72bbedfd40904b68f2020af0676e0c3a-image-1493399020395.02.32 AM.png
        content1: Match the list to the code that makes it.
        questions:
        - text: https://images.code.org/b7b998dd12e507d163d7dac0fcd37b8c-image-1493336218044.31.41 PM.png
        - text: https://images.code.org/d9af5a34631dee994f99750f48f52b66-image-1493336218042.50.24 PM.png
        - text: https://images.code.org/63b9f044db7dfa10d0486920e982f217-image-1493336218039.32.08 PM.png
        - text: https://images.code.org/17bf31d6521c45f56301f6224732e514-image-1493336218041.32.29 PM.png
        - text: https://images.code.org/50e0264011243637e12e4972d573d278-image-1493399022792.02.38 AM.png
        title: Lists Quick Check
      CSD U2 lists match_2018_2019:
        answers:
        - text: https://images.code.org/c77491ea22b3b977383bfd2ca3655df1-image-1493336218041.31.27 PM.png
        - text: https://images.code.org/9007a23e2767b57e84ffad78675faf6a-image-1493336218044.50.09 PM.png
        - text: https://images.code.org/d3be2ba9f4a398277f9663bbd5fdf783-image-1493336218042.31.59 PM.png
        - text: https://images.code.org/1bbd9b340b51a295760f8daa4714cf84-image-1493336218035.32.21 PM.png
        - text: https://images.code.org/72bbedfd40904b68f2020af0676e0c3a-image-1493399020395.02.32 AM.png
        content1: Match the list to the code that makes it.
        questions:
        - text: https://images.code.org/b7b998dd12e507d163d7dac0fcd37b8c-image-1493336218044.31.41 PM.png
        - text: https://images.code.org/d9af5a34631dee994f99750f48f52b66-image-1493336218042.50.24 PM.png
        - text: https://images.code.org/63b9f044db7dfa10d0486920e982f217-image-1493336218039.32.08 PM.png
        - text: https://images.code.org/17bf31d6521c45f56301f6224732e514-image-1493336218041.32.29 PM.png
        - text: https://images.code.org/50e0264011243637e12e4972d573d278-image-1493399022792.02.38 AM.png
        title: Lists Quick Check
      CSD U3 - conditionals - Matching:
        answers:
        - text: dog.rotation &lt; cat.rotation
        - text: dog.x &lt; cat.x
        - text: dog.scale &gt; cat.scale
        - text: dog.x &gt; cat.x
        - text: dog.x == cat.x
        content1: Match the boolean expression to the English description.
        questions:
        - text: Is the dog sprite's rotation less than the cat sprite's rotation?
        - text: Is the dog sprite's x less than the cat sprite's x?
        - text: Is the dog sprite's scale greater than the cat sprite's scale?
        - text: Is the dog sprite's x greater than the cat sprite's x?
        - text: Is the dog sprite's x equal to the cat sprite's x?
        title: 'Matching: Comparison Operators'
      CSD U3 - conditionals - Matching_2018:
        answers:
        - text: dog.rotation &lt; cat.rotation
        - text: dog.x &lt; cat.x
        - text: dog.scale &gt; cat.scale
        - text: dog.x &gt; cat.x
        - text: dog.x == cat.x
        content1: Match the boolean expression to the English description.
        questions:
        - text: Is the dog sprite's rotation less than the cat sprite's rotation?
        - text: Is the dog sprite's x less than the cat sprite's x?
        - text: Is the dog sprite's scale greater than the cat sprite's scale?
        - text: Is the dog sprite's x greater than the cat sprite's x?
        - text: Is the dog sprite's x equal to the cat sprite's x?
        title: 'Matching: Comparison Operators'
      CSD U3 - conditionals - Matching_2018_2019:
        answers:
        - text: dog.rotation &lt; cat.rotation
        - text: dog.x &lt; cat.x
        - text: dog.scale &gt; cat.scale
        - text: dog.x &gt; cat.x
        - text: dog.x == cat.x
        content1: Match the boolean expression to the English description.
        questions:
        - text: Is the dog sprite's rotation less than the cat sprite's rotation?
        - text: Is the dog sprite's x less than the cat sprite's x?
        - text: Is the dog sprite's scale greater than the cat sprite's scale?
        - text: Is the dog sprite's x greater than the cat sprite's x?
        - text: Is the dog sprite's x equal to the cat sprite's x?
        title: 'Matching: Comparison Operators'
      CSD U3 Keypress Matching:
        answers:
        - text: keyWentDown()
        - text: keyWentUp()
        - text: keyDown()
        content1: Match the keypress block with the description of how it works. Feel free to go back to the previous bubble if you need to experiment with them.
        questions:
        - text: Is true only once when the key is pressed.
        - text: Is true only once when the key is released.
        - text: Is true the whole time the key is pressed or held down.
        title: 'Matching: Responding to Keypresses'
      CSD U3 Keypress Matching_2018:
        answers:
        - text: keyWentDown()
        - text: keyWentUp()
        - text: keyDown()
        content1: Match the keypress block with the description of how it works. Feel free to go back to the previous bubble if you need to experiment with them.
        questions:
        - text: Is true only once when the key is pressed.
        - text: Is true only once when the key is released.
        - text: Is true the whole time the key is pressed or held down.
        title: 'Matching: Responding to Keypresses'
      CSD U3 Keypress Matching_2018_2019:
        answers:
        - text: keyWentDown()
        - text: keyWentUp()
        - text: keyDown()
        content1: Match the keypress block with the description of how it works. Feel free to go back to the previous bubble if you need to experiment with them.
        questions:
        - text: Is true only once when the key is pressed.
        - text: Is true only once when the key is released.
        - text: Is true the whole time the key is pressed or held down.
        title: 'Matching: Responding to Keypresses'
      CSD U3 drawSprites placement match:
        answers:
        - text: <img width="300px" src="https://images.code.org/131282b44fe34cd619a9a21bc68888da-image-1523902103487.58.48 AM.png">
        - text: <img src="https://images.code.org/2fbe4029dc47f6f048e7c9f90ac99cac-image-1523902103485.25.09 AM.png">
        - text: <img src="https://images.code.org/c4cb49e00f7087765865da87cff37549-image-1523902103477.58.00 AM.png">
        - text: <img src="https://images.code.org/7465035fc6701dcb91731fe9d160b638-image-1523902103481.58.28 AM.png">
        content1: Match the code to the image that it will produce.
        questions:
        - text: <img src="https://images.code.org/cd11d762b2cb3e36c3d45157b965c968-image-1523901253224.59.08 AM.png">
        - text: <img src="https://images.code.org/653dff2d49f07341b2f2552747212b34-image-1523901253222.59.21 AM.png">
        - text: <img src="https://images.code.org/db71e0cde6861faabc0b5a55d67c739e-image-1523901253227.58.12 AM.png">
        - text: <img src="https://images.code.org/15d6014329fa3da9b73016af9f1d0d74-image-1523901253226.58.34 AM.png">
        title: drawSprites
      CSD U3 drawSprites placement match_2019:
        answers:
        - text: <img width="300px" src="https://images.code.org/131282b44fe34cd619a9a21bc68888da-image-1523902103487.58.48 AM.png">
        - text: <img src="https://images.code.org/2fbe4029dc47f6f048e7c9f90ac99cac-image-1523902103485.25.09 AM.png">
        - text: <img src="https://images.code.org/c4cb49e00f7087765865da87cff37549-image-1523902103477.58.00 AM.png">
        - text: <img src="https://images.code.org/7465035fc6701dcb91731fe9d160b638-image-1523902103481.58.28 AM.png">
        content1: Match the code to the image that it will produce.
        questions:
        - text: <img src="https://images.code.org/cd11d762b2cb3e36c3d45157b965c968-image-1523901253224.59.08 AM.png">
        - text: <img src="https://images.code.org/653dff2d49f07341b2f2552747212b34-image-1523901253222.59.21 AM.png">
        - text: <img src="https://images.code.org/db71e0cde6861faabc0b5a55d67c739e-image-1523901253227.58.12 AM.png">
        - text: <img src="https://images.code.org/15d6014329fa3da9b73016af9f1d0d74-image-1523901253226.58.34 AM.png">
        title: drawSprites
      K-1 Artist 2 Match 2:
        answers:
        - text: "/script_assets/k_1_images/artist_images/medium_circle.png"
        - text: "/script_assets/k_1_images/artist_images/small_square.png"
        - text: "/script_assets/k_1_images/artist_images/large_rectangle.png"
        - text: "/script_assets/k_1_images/artist_images/large_triangle.png"
        content2: Match the shapes based on type.
        questions:
        - text: "/script_assets/k_1_images/artist_images/small_circle.png"
        - text: "/script_assets/k_1_images/artist_images/large_square.png"
        - text: "/script_assets/k_1_images/artist_images/medium_rectangle.png"
        - text: "/script_assets/k_1_images/artist_images/small_triangle.png"
        title: Matching
      K-1 Bee Loops Match 1:
        answers:
        - text: "/script_assets/k_1_images/bee_images/4_gnectar.png"
        - text: "/script_assets/k_1_images/move_blocks/NNN.png"
        - text: "/script_assets/k_1_images/bee_images/5_ghoney.png"
        - text: "/script_assets/k_1_images/move_blocks/EEEEE.png"
        content2: Match the blocks
        questions:
        - text: "/script_assets/k_1_images/bee_images/r4_gnectar.png"
        - text: "/script_assets/k_1_images/move_blocks/r3_N.png"
        - text: "/script_assets/k_1_images/bee_images/r5_ghoney.png"
        - text: "/script_assets/k_1_images/move_blocks/r5_E.png"
        title: Matching
      K-1 Big Event Match 1:
        answers:
        - text: "/script_assets/k_1_images/unplugged_images/big_event_1_a1.png"
        - text: "/script_assets/k_1_images/unplugged_images/big_event_1_a2.png"
        - text: "/script_assets/k_1_images/unplugged_images/big_event_1_a3.png"
        content1: "/script_assets/k_1_images/unplugged_images/big_event_1_desc.png"
        content2: Match the button combination to the dance moves.
        questions:
        - text: "/script_assets/k_1_images/unplugged_images/big_event_1_q1.png"
        - text: "/script_assets/k_1_images/unplugged_images/big_event_1_q2.png"
        - text: "/script_assets/k_1_images/unplugged_images/big_event_1_q3.png"
        title: Matching
      K-1 Maze Match 1:
        answers:
        - text: "/script_assets/k_1_images/move_blocks/EN.png"
        - text: "/script_assets/k_1_images/move_blocks/ENE.png"
        - text: "/script_assets/k_1_images/move_blocks/WW.png"
        - text: "/script_assets/k_1_images/move_blocks/WSS.png"
        content2: Match the puzzles and blocks
        pre_title: Instructions
        questions:
        - text: "/script_assets/k_1_images/maze_images/maze_EN.png"
        - text: "/script_assets/k_1_images/maze_images/maze_ENE.png"
        - text: "/script_assets/k_1_images/maze_images/maze_WW.png"
        - text: "/script_assets/k_1_images/maze_images/maze_WSS.png"
        title: Matching
    multi:
      2-3 Algorithms Multi 1:
        answers:
        - text: Start with a square<br/>Put a triangle above the square<br/>Put a triangle below the square
          correct: false
        - text: Start with a square<br/>Put a triangle right of square<br/>Put a parallelogram below square<br/>Put triangle right of parallelogram
          correct: true
        - text: Start with a square<br/>Put a parallelogram above the square<br/>Put a triangle right of the parallelogram
          correct: false
        - text: Start with a square<br/>Put a triangle below the square<br/>Put a parallelogram right of the triangle
          correct: false
        content1: "/script_assets/2-3_images/unplugged/algorithms_1_q.png"
        questions:
        - text: Choose an algorithm for the image provided.
        title: Multiple Choice
      2-3 Algorithms Multi 2:
        answers:
        - text: "/script_assets/2-3_images/unplugged/algorithms_2_a1.png"
          correct: false
        - text: "/script_assets/2-3_images/unplugged/algorithms_2_a2.png"
          correct: true
        - text: "/script_assets/2-3_images/unplugged/algorithms_2_a3.png"
          correct: false
        - text: "/script_assets/2-3_images/unplugged/algorithms_2_a4.png"
          correct: false
        content1: Start with a triangle<br/>Put a square below the triangle<br/>Put another triangle below the square
        questions:
        - text: Which image does <em>not</em> follow this algorithm?
        title: Multiple Choice
      2-3 Conditionals Multi 1:
        answers:
        - text: "/script_assets/2-3_images/unplugged/conditionals_1_a1.png"
          correct: false
        - text: "/script_assets/2-3_images/unplugged/conditionals_1_a2.png"
          correct: false
        - text: "/script_assets/2-3_images/unplugged/conditionals_1_a3.png"
          correct: true
        - text: "/script_assets/2-3_images/unplugged/conditionals_1_a4.png"
          correct: false
        content1: "/script_assets/2-3_images/unplugged/conditionals_1_q.png"
        questions:
        - text: According to the rules of the game, which set of cards is scored correctly?
        title: Multiple Choice
      2-3 Getting Loopy Multi 1:
        answers:
        - text: "/script_assets/2-3_images/unplugged/getting_loopy_1_a1.png"
          correct: true
        - text: "/script_assets/2-3_images/unplugged/getting_loopy_1_a2.png"
          correct: false
        - text: "/script_assets/2-3_images/unplugged/getting_loopy_1_a3.png"
          correct: false
        - text: "/script_assets/2-3_images/unplugged/getting_loopy_1_a4.png"
          correct: false
        content1: "/script_assets/2-3_images/unplugged/getting_loopy_1_q.png"
        questions:
        - text: How would you simplify this sequence with loops?
        title: Multiple Choice
      2-3 Graph Paper Multi 1:
        answers:
        - text: "/script_assets/2-3_images/unplugged/graph_paper_1_a1.png"
          correct: false
        - text: "/script_assets/2-3_images/unplugged/graph_paper_1_a2.png"
          correct: true
        - text: "/script_assets/2-3_images/unplugged/graph_paper_1_a3.png"
          correct: false
        content1: "/script_assets/2-3_images/unplugged/graph_paper_1_q.png"
        questions:
        - text: Which program makes this image?
        title: Multiple Choice
      2-3 Maze Multi 2:
        answers:
        - text: "/script_assets/2-3_images/maze/2-3_maze_multi_2_a1.png"
          correct: false
        - text: "/script_assets/2-3_images/maze/2-3_maze_multi_2_a2.png"
          correct: true
        - text: "/script_assets/2-3_images/maze/2-3_maze_multi_2_a3.png"
          correct: false
        - text: "/script_assets/2-3_images/maze/2-3_maze_multi_2_a4.png"
          correct: false
        content1: "/script_assets/2-3_images/maze/2-3_maze_multi_2_q.png, 500"
        questions:
        - text: Which set of blocks will get me to the pig?
        title: Maze Multiple Choice
      2-3 Relay Programming Multi 1:
        answers:
        - text: "/script_assets/2-3_images/unplugged/relay_programming_1_a1.png"
          correct: false
        - text: "/script_assets/2-3_images/unplugged/relay_programming_1_a2.png"
          correct: false
        - text: "/script_assets/2-3_images/unplugged/relay_programming_1_a3.png"
          correct: true
        content1: "/script_assets/2-3_images/unplugged/relay_programming_1_q.png"
        questions:
        - text: Which program **does not** create this image?
        title: Multiple Choice
      2-3 Relay Programming Multi 2:
        answers:
        - text: "/script_assets/2-3_images/unplugged/relay_programming_2_a1.png"
          correct: false
        - text: "/script_assets/2-3_images/unplugged/relay_programming_2_a2.png"
          correct: false
        - text: "/script_assets/2-3_images/unplugged/relay_programming_2_a3.png"
          correct: true
        questions:
        - text: Which image-program combo does not contain mistakes?
        title: Multiple Choice
      2-3 artist debug multi 1:
        answers:
        - text: "/script_assets/2-3_images/artist/2-3_artistdebug_multi_1_a1.png"
          correct: false
        - text: "/script_assets/2-3_images/artist/2-3_artistdebug_multi_1_a2.png"
          correct: true
        - text: "/script_assets/2-3_images/artist/2-3_artistdebug_multi_1_a3.png"
          correct: false
        - text: "/script_assets/2-3_images/artist/2-3_artistdebug_multi_1_a4.png"
          correct: false
        content1: "/script_assets/2-3_images/artist/2-3_artistdebug_multi_1_q1.png, 700"
        questions:
        - text: What would you need to fix to make this a finished circle?
        title: Artist Debugging Multiple Choice 1
      2-3 artist functions multi 1:
        answers:
        - text: "/script_assets/2-3_images/artist/2-3_artistfunctions_multi_1_a1.png"
          correct: true
        - text: "/script_assets/2-3_images/artist/2-3_artistfunctions_multi_1_a2.png"
          correct: false
        - text: "/script_assets/2-3_images/artist/2-3_artistfunctions_multi_1_a3.png"
          correct: false
        content1: "/script_assets/2-3_images/artist/2-3_artistfunctions_multi_1_q.png, 500"
        questions:
        - text: Pick the correct blocks to draw this image using the given functions
        title: Artist Functions Multiple Choice One
      2-3 artist loops multi 1:
        answers:
        - text: "/script_assets/2-3_images/artist/2-3_artistloops_multi_1_q1.png"
          correct: false
        - text: "/script_assets/2-3_images/artist/2-3_artistloops_multi_1_q2.png"
          correct: false
        - text: "/script_assets/2-3_images/artist/2-3_artistloops_multi_1_q3.png"
          correct: true
        - text: "/script_assets/2-3_images/artist/2-3_artistloops_multi_1_q4.png"
          correct: false
        content1: "/script_assets/2-3_images/artist/2-3_artistloops_multi_1_a3.png, 500"
        questions:
        - text: Which shape is made by this loop?
        title: Artist Loops Multiple Choice
      2-3 artist loops multi 2:
        answers:
        - text: "/script_assets/2-3_images/artist/2-3_artistloops_multi_1_q1.png"
          correct: false
        - text: "/script_assets/2-3_images/artist/2-3_artistloops_multi_1_q2.png"
          correct: false
        - text: "/script_assets/2-3_images/artist/2-3_artistloops_multi_1_q3.png"
          correct: false
        - text: "/script_assets/2-3_images/artist/2-3_artistloops_multi_1_q4.png"
          correct: true
        content1: "/script_assets/2-3_images/artist/2-3_artistloops_multi_1_a4.png, 500"
        questions:
        - text: Which shape is made by this program?
        title: Artist Loops Multiple Choice
      2-3 bee conditionals multi 1:
        answers:
        - text: "/script_assets/2-3_images/bee/2-3_beeconditionals_multi_1_a1.png"
          correct: false
        - text: "/script_assets/2-3_images/bee/2-3_beeconditionals_multi_1_a2.png"
          correct: false
        - text: "/script_assets/2-3_images/bee/2-3_beeconditionals_multi_1_a3.png"
          correct: true
        - text: "/script_assets/2-3_images/bee/2-3_beeconditionals_multi_1_a4.png"
          correct: false
        questions:
        - text: Which comparison below is true?
        title: Bee Conditionals Multiple Choice 1
      2-3 bee conditionals multi 3:
        answers:
        - text: "/script_assets/2-3_images/bee/2-3_beeconditionals_multi_3_a1.png"
          correct: false
        - text: "/script_assets/2-3_images/bee/2-3_beeconditionals_multi_3_a2.png"
          correct: true
        - text: "/script_assets/2-3_images/bee/2-3_beeconditionals_multi_3_a3.png"
          correct: false
        - text: "/script_assets/2-3_images/bee/2-3_beeconditionals_multi_3_a4.png"
          correct: false
        content1: "/script_assets/2-3_images/bee/2-3_beeconditionals_multi_3_q.png, 500"
        questions:
        - text: Choose the best blocks.
        title: Bee Conditionals Multiple Choice 2
      2-3 bee loops multi 1:
        answers:
        - text: "/script_assets/2-3_images/bee/2-3_beeloops_multi_1_a1.png"
          correct: true
        - text: "/script_assets/2-3_images/bee/2-3_beeloops_multi_1_a2.png"
          correct: false
        - text: "/script_assets/2-3_images/bee/2-3_beeloops_multi_1_a3.png"
          correct: false
        - text: "/script_assets/2-3_images/bee/2-3_beeloops_multi_1_a4.png"
          correct: false
        content1: "/script_assets/2-3_images/bee/2-3_beeloops_multi_1_q.png, 500"
        questions:
        - text: Which blocks collect all of the nectar?
        title: Bee Loops Multiple Choice One
      2-3 maze multi 1:
        answers:
        - text: "/script_assets/2-3_images/maze/2-3_maze_multi_1_a1.png"
          correct: false
        - text: "/script_assets/2-3_images/maze/2-3_maze_multi_1_a2.png"
          correct: true
        - text: "/script_assets/2-3_images/maze/2-3_maze_multi_1_a3.png"
          correct: false
        - text: "/script_assets/2-3_images/maze/2-3_maze_multi_1_a4.png"
          correct: false
        content1: "/script_assets/2-3_images/maze/2-3_maze_multi_1_q.png, 500"
        questions:
        - text: Which set of blocks is the correct answer?
        title: Maze Multiple Choice One
      4-5 Algorithms Multi 1:
        answers:
        - text: Brushing your teeth
          correct: false
        - text: Baking cookies
          correct: false
        - text: Shopping from a grocery list
          correct: false
        - text: Banana
          correct: true
        questions:
        - text: Which one of these items is hardest to describe an algorithm for?
        title: Multiple Choice
      4-5 Computational Thinking Multi 1:
        answers:
        - text: Seattle _____ a _____ _____.
          correct: false
        - text: _____ is a _____ city.
          correct: true
        - text: _____ is _____ a _____.
          correct: false
        - text: Eugene is a _____ city.
          correct: false
        content1: Here are three sentences. Which of the templates below correctly abstracts so that all three match the same pattern as the template?
        questions:
        - text: Seattle is a big city.<br/>Eugene is a medium city<br/>Hillview is a small city.
        title: Multiple Choice
      4-5 Crowdsourcing Multi 1:
        answers:
        - text: "/script_assets/4-5_images/unplugged/crowdsourcing_2_a1.png"
          correct: false
        - text: "/script_assets/4-5_images/unplugged/crowdsourcing_2_a2.png"
          correct: true
        questions:
        - text: Which of these pictures best represents crowdsourcing?
        title: Multiple Choice
      4-5 Crowdsourcing Multi 2:
        answers:
        - text: Cleaning your room
          correct: true
        - text: Eating your dessert
          correct: false
        - text: Brushing your hair
          correct: false
        - text: Washing your face
          correct: false
        questions:
        - text: Which one of these activities would be best for practicing crowdsourcing?
        title: Multiple Choice
      4-5 Digital Footprint Multi 1:
        answers:
        - text: Your birthday
          correct: false
        - text: Your favorite food
          correct: true
        - text: Your address
          correct: false
        - text: Your parent's credit card number
          correct: false
        questions:
        - text: Which piece of information listed below is okay to share on the internet?
        title: Multiple Choice
      4-5 Internet Multi 1:
        answers:
        - text: 23.23.224.106
          correct: false
        - text: 54.209.61.132
          correct: false
        - text: 64.14.68.10
          correct: false
        - text: 54.243.71.82
          correct: true
        content1: "/script_assets/4-5_images/unplugged/internet_1_q.png"
        questions:
        - text: When you try to log on to code.org, which IP address is the DNS most likely to take you to?
        title: Multiple Choice
      4-5 Internet Multi 2:
        answers:
        - text: code.org
          correct: false
        - text: csisfun.com
          correct: true
        - text: thinkersmith.org
          correct: false
        - text: khanacademy.org
          correct: false
        content1: "/script_assets/4-5_images/unplugged/internet_1_q.png"
        questions:
        - text: If the DNS has sent you to the page at the IP address 100.42.50.110, which website are you on?
        title: Multiple Choice
      4-5 Songwriting Multi 1:
        answers:
        - text: Lou, Lou, skip to my Lou,
          correct: false
        - text: Lou, Lou, skip to my Lou, <br/>Lou, Lou, skip to my Lou, <br/>Lou, Lou, skip to my Lou, <br/>Skip to my Lou, my darlin.
          correct: true
        - text: Lou, Lou, skip to my Lou, <br/>Lou, Lou, skip to my Lou, <br/>Lou, Lou, skip to my Lou, <br/>Skip to my Lou, my darlin.<br/><br/><p>Fly's in the buttermilk, <br/>Shoo, fly, shoo,
          correct: false
        - text: Fly's in the buttermilk, <br/>Shoo, fly, shoo, <br/>Fly's in the buttermilk, <br/>Shoo, fly, shoo, <br/>Fly's in the buttermilk, <br/>Shoo, fly, shoo, <br/>Skip to my Lou, my darlin.
          correct: false
        content1: "/script_assets/4-5_images/unplugged/songwriting_1_q.png"
        questions:
        - text: What is the largest chunk of this song that you can define as the chorus so that the chorus repeats exactly each time it is called?
        title: Multiple Choice
      4-5 Suncatchers Multi 1:
        answers:
        - text: "/script_assets/4-5_images/unplugged/suncatchers_2_a1.png"
          correct: false
        - text: "/script_assets/4-5_images/unplugged/suncatchers_2_a2.png"
          correct: true
        - text: "/script_assets/4-5_images/unplugged/suncatchers_2_a3.png"
          correct: false
        content1: "/script_assets/4-5_images/unplugged/suncatchers_2_q.png"
        questions:
        - text: Which of the programs below <em>does not</em> make the exact same sequence as Program 1?
        title: Multiple Choice
      4-5 artist loops multi 1:
        answers:
        - text: "/script_assets/4-5_images/artist/4-5_artistloops_multi_1_a1.png"
          correct: false
        - text: "/script_assets/4-5_images/artist/4-5_artistloops_multi_1_a2.png"
          correct: true
        - text: "/script_assets/4-5_images/artist/4-5_artistloops_multi_1_a3.png"
          correct: false
        - text: "/script_assets/4-5_images/artist/4-5_artistloops_multi_1_a4.png"
          correct: false
        content1: "/script_assets/4-5_images/artist/4-5_artistloops_multi_1_q.png, 500"
        questions:
        - text: Which blocks will create the design?
        title: Artist Loops Multiple Choice
      4-5 artist multi 1:
        answers:
        - text: "/script_assets/4-5_images/artist/4-5_artist_multi_1_a1.png"
          correct: false
        - text: "/script_assets/4-5_images/artist/4-5_artist_multi_1_a2.png"
          correct: true
        - text: "/script_assets/4-5_images/artist/4-5_artist_multi_1_a3.png"
          correct: false
        - text: "/script_assets/4-5_images/artist/4-5_artist_multi_1_a4.png"
          correct: false
        questions:
        - text: Which blocks draw a rectangle with a perimeter of 100?
        title: Artist Multiple Choice
      4-5 artist multi 2:
        answers:
        - text: "/script_assets/4-5_images/artist/4-5_artist_multi_2_a1.png"
          correct: false
        - text: "/script_assets/4-5_images/artist/4-5_artist_multi_2_a2.png"
          correct: false
        - text: "/script_assets/4-5_images/artist/4-5_artist_multi_2_a3.png"
          correct: true
        - text: "/script_assets/4-5_images/artist/4-5_artist_multi_2_a4.png"
          correct: false
        questions:
        - text: Which drawing is symmetric?
        title: Artist Multiple Choice
      4-5 bee conditionals multi 1:
        answers:
        - text: "/script_assets/4-5_images/bee/4-5_beeconditionals_multi_1_a1.png"
          correct: false
        - text: "/script_assets/4-5_images/bee/4-5_beeconditionals_multi_1_a2.png"
          correct: false
        - text: "/script_assets/4-5_images/bee/4-5_beeconditionals_multi_1_a3.png"
          correct: true
        - text: "/script_assets/4-5_images/bee/4-5_beeconditionals_multi_1_a4.png"
          correct: false
        content1: "/script_assets/4-5_images/bee/4-5_beeconditionals_multi_1_q.png"
        content2: A purple flower may have either 3, 2 or 1 nectars, but you don't know how many. Which blocks correctly check and collect all of the nectar from a purple flower?
        questions:
        - text: Choose the best blocks.
        title: Bee Conditionals Multiple Choice
      4-5 bee debug multi 1:
        answers:
        - text: "/script_assets/4-5_images/bee/4-5_beedebug_multi_1_a2.png"
          correct: false
        - text: "/script_assets/4-5_images/bee/4-5_beedebug_multi_1_a3.png"
          correct: true
        - text: "/script_assets/4-5_images/bee/4-5_beedebug_multi_1_a1.png"
          correct: false
        - text: "/script_assets/4-5_images/bee/4-5_beedebug_multi_1_a4.png"
          correct: false
        content1: "/script_assets/4-5_images/bee/4-5_beedebug_multi_1_q1.png"
        content2: "/script_assets/4-5_images/bee/4-5_beedebug_multi_1_q2.png"
        questions:
        - text: Which version of the function will work?
        title: Bee Debug Multiple Choice
      4-5 bee loops multi 1:
        answers:
        - text: "/script_assets/4-5_images/bee/4-5_beeloops_multi_1_a1.png"
          correct: true
        - text: "/script_assets/4-5_images/bee/4-5_beeloops_multi_1_a2.png"
          correct: false
        - text: "/script_assets/4-5_images/bee/4-5_beeloops_multi_1_a3.png"
          correct: false
        - text: "/script_assets/4-5_images/bee/4-5_beeloops_multi_1_a4.png"
          correct: false
        content1: "/script_assets/4-5_images/bee/4-5_beeloops_multi_1_q.png"
        questions:
        - text: Which blocks will solve the puzzle?
        title: Bee Loops Multiple Choice
      4-5 maze conditionals multi 1:
        answers:
        - text: "/script_assets/4-5_images/maze/4-5_mazeconditionals_multi_1_a1.png"
          correct: true
        - text: "/script_assets/4-5_images/maze/4-5_mazeconditionals_multi_1_a2.png"
          correct: false
        - text: "/script_assets/4-5_images/maze/4-5_mazeconditionals_multi_1_a3.png"
          correct: false
        - text: "/script_assets/4-5_images/maze/4-5_mazeconditionals_multi_1_a4.png"
          correct: false
        content1: "/script_assets/4-5_images/maze/4-5_mazeconditionals_multi_1_q.png, 500"
        questions:
        - text: Which blocks solve the puzzle?
        title: Maze Conditionals Multiple Choice
      4-5 maze multi 1:
        answers:
        - text: "/script_assets/4-5_images/maze/4-5_maze_multi_1_a1.png"
          correct: true
        - text: "/script_assets/4-5_images/maze/4-5_maze_multi_1_a2.png"
          correct: false
        - text: "/script_assets/4-5_images/maze/4-5_maze_multi_1_a3.png"
          correct: false
        - text: "/script_assets/4-5_images/maze/4-5_maze_multi_1_a4.png"
          correct: false
        content1: "/script_assets/4-5_images/maze/4-5_maze_multi_1_q.png, 500"
        questions:
        - text: Which blocks solve the puzzle?
        title: Maze Multiple Choice
      CSD Header Size MC:
        answers:
        - text: https://images.code.org/a4e973cc13db380ca1e1efeb4263974f-image-1473432905067.53.47 AM.png
          correct: false
        - text: https://images.code.org/1c660b4e54a3e835250597cb261d8e17-image-1473432905068.54.08 AM.png
          correct: true
        - text: https://images.code.org/22e9ae6a04afd8251b29939a6fa63411-image-1473432905069.54.25 AM.png
          correct: false
        - text: https://images.code.org/0eee565202089d44a6bb5633603c45e0-image-1473432905069.54.50 AM.png
          correct: false
        content1: Look at the code below and predict how the headings will be displayed.  Choose from one of the options on the right.
        title: Headings Quick Check
      CSD Header Size MC_2018:
        answers:
        - text: https://images.code.org/a4e973cc13db380ca1e1efeb4263974f-image-1473432905067.53.47 AM.png
          correct: false
        - text: https://images.code.org/1c660b4e54a3e835250597cb261d8e17-image-1473432905068.54.08 AM.png
          correct: true
        - text: https://images.code.org/22e9ae6a04afd8251b29939a6fa63411-image-1473432905069.54.25 AM.png
          correct: false
        - text: https://images.code.org/0eee565202089d44a6bb5633603c45e0-image-1473432905069.54.50 AM.png
          correct: false
        content1: Look at the code below and predict how the headings will be displayed.  Choose from one of the options on the right.
        title: Headings Quick Check
      CSD Header Size MC_2018_2019:
        answers:
        - text: https://images.code.org/a4e973cc13db380ca1e1efeb4263974f-image-1473432905067.53.47 AM.png
          correct: false
        - text: https://images.code.org/1c660b4e54a3e835250597cb261d8e17-image-1473432905068.54.08 AM.png
          correct: true
        - text: https://images.code.org/22e9ae6a04afd8251b29939a6fa63411-image-1473432905069.54.25 AM.png
          correct: false
        - text: https://images.code.org/0eee565202089d44a6bb5633603c45e0-image-1473432905069.54.50 AM.png
          correct: false
        content1: Look at the code below and predict how the headings will be displayed.  Choose from one of the options on the right.
        title: Headings Quick Check
      CSD U3 Boolean MC:
        answers:
        - text: true<br>false<br>true
          correct: true
        - text: "  0<br>200<br>100"
          correct: false
        - text: "  true<br>error<br>true"
          correct: false
        - text: "  false<br>true<br>false"
          correct: false
        questions:
        - text: Which result will be printed in the console by this program?
        title: title
      CSD U3 Boolean MC_2018:
        answers:
        - text: true<br>false<br>true
          correct: true
        - text: "  0<br>200<br>100"
          correct: false
        - text: "  true<br>error<br>true"
          correct: false
        - text: "  false<br>true<br>false"
          correct: false
        questions:
        - text: Which result will be printed in the console by this program?
        title: title
      CSD U3 Boolean MC_2018_2019:
        answers:
        - text: true<br>false<br>true
          correct: true
        - text: "  0<br>200<br>100"
          correct: false
        - text: "  true<br>error<br>true"
          correct: false
        - text: "  false<br>true<br>false"
          correct: false
        questions:
        - text: Which result will be printed in the console by this program?
        title: title
      CSD U3 Functions Prediction define first:
        answers:
        - text: The red square will be drawn but the green one will not. You cannot call functions after they are created.
          correct: false
          feedback: Functions can be created anywhere you like in your code. It is still a good idea to keep them all at the bottom for organization though!
        - text: The green square will be drawn but the red one will not You cannot call functions before they are created.
          correct: false
          feedback: Functions can be created anywhere you like in your code. It is still a good idea to keep them all at the bottom for organization though!
        - text: Both squares will be drawn. You can create functions anywhere you like in your code.
          correct: true
          feedback: Functions can be created anywhere you like in your code. It is still a good idea to keep them all at the bottom for organization though!
        - text: Neither square will be drawn. There is an error in the code.
          correct: false
          feedback: Functions can be created anywhere you like in your code. It is still a good idea to keep them all at the bottom for organization though!
      CSD U3 Functions Prediction define first_2018:
        answers:
        - text: The red square will be drawn but the green one will not. You cannot call functions after they are created.
          correct: false
          feedback: Functions can be created anywhere you like in your code. It is still a good idea to keep them all at the bottom for organization though!
        - text: The green square will be drawn but the red one will not You cannot call functions before they are created.
          correct: false
          feedback: Functions can be created anywhere you like in your code. It is still a good idea to keep them all at the bottom for organization though!
        - text: Both squares will be drawn. You can create functions anywhere you like in your code.
          correct: true
          feedback: Functions can be created anywhere you like in your code. It is still a good idea to keep them all at the bottom for organization though!
        - text: Neither square will be drawn. There is an error in the code.
          correct: false
          feedback: Functions can be created anywhere you like in your code. It is still a good idea to keep them all at the bottom for organization though!
      CSD U3 Functions Prediction define first_2018_2019:
        answers:
        - text: The red square will be drawn but the green one will not. You cannot call functions after they are created.
          correct: false
          feedback: Functions can be created anywhere you like in your code. It is still a good idea to keep them all at the bottom for organization though!
        - text: The green square will be drawn but the red one will not You cannot call functions before they are created.
          correct: false
          feedback: Functions can be created anywhere you like in your code. It is still a good idea to keep them all at the bottom for organization though!
        - text: Both squares will be drawn. You can create functions anywhere you like in your code.
          correct: true
          feedback: Functions can be created anywhere you like in your code. It is still a good idea to keep them all at the bottom for organization though!
        - text: Neither square will be drawn. There is an error in the code.
          correct: false
          feedback: Functions can be created anywhere you like in your code. It is still a good idea to keep them all at the bottom for organization though!
      CSD U3 Sprite Movement Predict Multi:
        answers:
        - text: "<img src='https://images.code.org/649915789345f5958475cd2b91e0630c-image-1491939133180.gif' style='border: 1px solid #ccc'>"
          correct: false
        - text: "<img src='https://images.code.org/2f5e7773ae2f99d6217929bd58490393-image-1491939162998.gif' style='border: 1px solid #ccc'>"
          correct: false
        - text: "<img src='https://images.code.org/7c43fbce8cbbe7c15614203290f806e7-image-1491939169414.gif' style='border: 1px solid #ccc'>"
          correct: true
        - text: "<img src='https://images.code.org/c62dbed9a37b03958cb056bf493bd59c-image-1491939175575.gif' style='border: 1px solid #ccc'>"
          correct: false
        questions:
        - text: Read this program and predict which of the following animations will be produced.
      CSD U3 Sprite Movement Predict Multi_2018:
        answers:
        - text: "<img src='https://images.code.org/649915789345f5958475cd2b91e0630c-image-1491939133180.gif' style='border: 1px solid #ccc'>"
          correct: false
        - text: "<img src='https://images.code.org/2f5e7773ae2f99d6217929bd58490393-image-1491939162998.gif' style='border: 1px solid #ccc'>"
          correct: false
        - text: "<img src='https://images.code.org/7c43fbce8cbbe7c15614203290f806e7-image-1491939169414.gif' style='border: 1px solid #ccc'>"
          correct: true
        - text: "<img src='https://images.code.org/c62dbed9a37b03958cb056bf493bd59c-image-1491939175575.gif' style='border: 1px solid #ccc'>"
          correct: false
        questions:
        - text: Read this program and predict which of the following animations will be produced.
      CSD U3 Sprite Movement Predict Multi_2018_2019:
        answers:
        - text: "<img src='https://images.code.org/649915789345f5958475cd2b91e0630c-image-1491939133180.gif' style='border: 1px solid #ccc'>"
          correct: false
        - text: "<img src='https://images.code.org/2f5e7773ae2f99d6217929bd58490393-image-1491939162998.gif' style='border: 1px solid #ccc'>"
          correct: false
        - text: "<img src='https://images.code.org/7c43fbce8cbbe7c15614203290f806e7-image-1491939169414.gif' style='border: 1px solid #ccc'>"
          correct: true
        - text: "<img src='https://images.code.org/c62dbed9a37b03958cb056bf493bd59c-image-1491939175575.gif' style='border: 1px solid #ccc'>"
          correct: false
        questions:
        - text: Read this program and predict which of the following animations will be produced.
      CSD U3 Sprites intro predict multi:
        answers:
        - text: '<img src="https://images.code.org/9fe7b64b9f4f566213a02ce2fcc78af3-image-1491255143541.png" style="width: 150px; border: 1px solid">'
          correct: false
        - text: '<img src="https://images.code.org/1e4cf8b84af44ac064f99c3370267f5c-image-1491255399012.png" style="width: 150px; border: 1px solid">'
          correct: true
        - text: '<img src="https://images.code.org/5c6c1e71f8a36fc4c871342e0c447dad-image-1491255426577.png" style="width: 150px; border: 1px solid">'
          correct: false
        - text: '<img src="https://images.code.org/7804e61306e15e3b5a2e0e9cc5906442-image-1491255443696.png" style="width: 150px; border: 1px solid">'
          correct: false
        questions:
        - text: When run, where will the sprite <code>mySprite</code> be located?
      CSD U3 Sprites intro predict multi_2018:
        answers:
        - text: '<img src="https://images.code.org/9fe7b64b9f4f566213a02ce2fcc78af3-image-1491255143541.png" style="width: 150px; border: 1px solid">'
          correct: false
        - text: '<img src="https://images.code.org/1e4cf8b84af44ac064f99c3370267f5c-image-1491255399012.png" style="width: 150px; border: 1px solid">'
          correct: true
        - text: '<img src="https://images.code.org/5c6c1e71f8a36fc4c871342e0c447dad-image-1491255426577.png" style="width: 150px; border: 1px solid">'
          correct: false
        - text: '<img src="https://images.code.org/7804e61306e15e3b5a2e0e9cc5906442-image-1491255443696.png" style="width: 150px; border: 1px solid">'
          correct: false
        questions:
        - text: When run, where will the sprite <code>mySprite</code> be located?
      CSD U3 Sprites intro predict multi_2018_2019:
        answers:
        - text: '<img src="https://images.code.org/9fe7b64b9f4f566213a02ce2fcc78af3-image-1491255143541.png" style="width: 150px; border: 1px solid">'
          correct: false
        - text: '<img src="https://images.code.org/1e4cf8b84af44ac064f99c3370267f5c-image-1491255399012.png" style="width: 150px; border: 1px solid">'
          correct: true
        - text: '<img src="https://images.code.org/5c6c1e71f8a36fc4c871342e0c447dad-image-1491255426577.png" style="width: 150px; border: 1px solid">'
          correct: false
        - text: '<img src="https://images.code.org/7804e61306e15e3b5a2e0e9cc5906442-image-1491255443696.png" style="width: 150px; border: 1px solid">'
          correct: false
        questions:
        - text: When run, where will the sprite <code>mySprite</code> be located?
      CSD U6 array multi:
        answers:
        - text: <img src="https://images.code.org/fc497646edb1fc92a4dfdca09030f294-image-1512686800362.42.54 PM.png" width="200px" />
          correct: false
        - text: <img src="https://images.code.org/d9b2a9eca6e2027c032bbc6c1e47e107-image-1512686800356.44.34 PM.png" width="200px" />
          correct: false
        - text: <img src="https://images.code.org/ae34c1d87e697c789303c5c1b602b7c6-image-1512686800360.44.11 PM.png" width="200px" />
          correct: false
        - text: <img src="https://images.code.org/d220337a4cd1ec31b0a5bb70eaf6bffe-image-1512686800364.42.00 PM.png" width="200px"
          correct: true
        questions:
        - text: What will App Lab display when the code on the left is run?
        title: Using Arrays
      CSD U6 array multi_2018:
        answers:
        - text: <img src="https://images.code.org/fc497646edb1fc92a4dfdca09030f294-image-1512686800362.42.54 PM.png" width="200px" />
          correct: false
        - text: <img src="https://images.code.org/d9b2a9eca6e2027c032bbc6c1e47e107-image-1512686800356.44.34 PM.png" width="200px" />
          correct: false
        - text: <img src="https://images.code.org/ae34c1d87e697c789303c5c1b602b7c6-image-1512686800360.44.11 PM.png" width="200px" />
          correct: false
        - text: <img src="https://images.code.org/d220337a4cd1ec31b0a5bb70eaf6bffe-image-1512686800364.42.00 PM.png" width="200px"
          correct: true
        questions:
        - text: What will App Lab display when the code on the left is run?
        title: Using Arrays
      CSD U6 array multi_2018_2019:
        answers:
        - text: <img src="https://images.code.org/fc497646edb1fc92a4dfdca09030f294-image-1512686800362.42.54 PM.png" width="200px" />
          correct: false
        - text: <img src="https://images.code.org/d9b2a9eca6e2027c032bbc6c1e47e107-image-1512686800356.44.34 PM.png" width="200px" />
          correct: false
        - text: <img src="https://images.code.org/ae34c1d87e697c789303c5c1b602b7c6-image-1512686800360.44.11 PM.png" width="200px" />
          correct: false
        - text: <img src="https://images.code.org/d220337a4cd1ec31b0a5bb70eaf6bffe-image-1512686800364.42.00 PM.png" width="200px"
          correct: true
        questions:
        - text: What will App Lab display when the code on the left is run?
        title: Using Arrays
      CSD U6 setProperty predict multi:
        answers:
        - text: '<img src="https://images.code.org/f1bc9eacc1144bee60b1f04373e583e3-image-1507311692368.png" style="max-width: 100px;">'
          correct: false
        - text: '<img src="https://images.code.org/f30263a5f6e47e6548706288e67b220d-image-1507311692372.png" style="max-width: 100px;">'
          correct: false
        - text: '<img src="https://images.code.org/772be0de5cfed112f9066c05d2ea6bb7-image-1507311692376.png" style="max-width: 100px;">'
          correct: true
        - text: '<img src="https://images.code.org/cea9a118066ffc296f1023f395e61058-image-1507311692360.png" style="max-width: 100px;">'
          correct: false
        questions:
        - text: Read the code and predict what this app will look like when run.
        title: Make a Prediction
      CSD U6 setProperty predict multi_2018:
        answers:
        - text: '<img src="https://images.code.org/f1bc9eacc1144bee60b1f04373e583e3-image-1507311692368.png" style="max-width: 100px;">'
          correct: false
        - text: '<img src="https://images.code.org/f30263a5f6e47e6548706288e67b220d-image-1507311692372.png" style="max-width: 100px;">'
          correct: false
        - text: '<img src="https://images.code.org/772be0de5cfed112f9066c05d2ea6bb7-image-1507311692376.png" style="max-width: 100px;">'
          correct: true
        - text: '<img src="https://images.code.org/cea9a118066ffc296f1023f395e61058-image-1507311692360.png" style="max-width: 100px;">'
          correct: false
        questions:
        - text: Read the code and predict what this app will look like when run.
        title: Make a Prediction
      CSD U6 setProperty predict multi_2018_2019:
        answers:
        - text: '<img src="https://images.code.org/f1bc9eacc1144bee60b1f04373e583e3-image-1507311692368.png" style="max-width: 100px;">'
          correct: false
        - text: '<img src="https://images.code.org/f30263a5f6e47e6548706288e67b220d-image-1507311692372.png" style="max-width: 100px;">'
          correct: false
        - text: '<img src="https://images.code.org/772be0de5cfed112f9066c05d2ea6bb7-image-1507311692376.png" style="max-width: 100px;">'
          correct: true
        - text: '<img src="https://images.code.org/cea9a118066ffc296f1023f395e61058-image-1507311692360.png" style="max-width: 100px;">'
          correct: false
        questions:
        - text: Read the code and predict what this app will look like when run.
        title: Make a Prediction
      K-1 Artist 1 Multi 1:
        answers:
        - text: "/script_assets/k_1_images/artist_images/W-S-S.png"
          correct: false
        - text: "/script_assets/k_1_images/artist_images/E-S-S.png"
          correct: true
        - text: "/script_assets/k_1_images/artist_images/S-E-E.png"
          correct: false
        - text: "/script_assets/k_1_images/artist_images/E-S.png"
          correct: false
        content1: "/script_assets/k_1_images/artist_images/rshort_dlong.png, 500"
        questions:
        - text: Which blocks solve this puzzle?
        title: Multiple Choice
      K-1 Artist 1 Multi 2:
        answers:
        - text: "/script_assets/k_1_images/artist_images/N-E-S-W.png"
          correct: true
        - text: "/script_assets/k_1_images/artist_images/E-S-W-N.png"
          correct: false
        - text: "/script_assets/k_1_images/artist_images/N-S-E-W.png"
          correct: false
        - text: "/script_assets/k_1_images/artist_images/N-W-S-E.png"
          correct: false
        content1: "/script_assets/k_1_images/artist_images/square.png, 500"
        questions:
        - text: Which blocks draw the square?
        title: Multiple Choice
      K-1 Bee 1 Multi 1:
        answers:
        - text: "/script_assets/k_1_images/bee_images/nectar.png"
          correct: false
        - text: "/script_assets/k_1_images/bee_images/2nectar.png"
          correct: true
        - text: "/script_assets/k_1_images/bee_images/3nectar.png"
          correct: false
        - text: "/script_assets/k_1_images/bee_images/4nectar.png"
          correct: false
        content1: "/script_assets/k_1_images/bee_images/1nectar+2nectar.png"
        questions:
        - text: How many nectars is this?
        title: Multiple Choice
      K-1 Bee 1 Multi 2:
        answers:
        - text: "/script_assets/k_1_images/bee_images/nectar.png"
          correct: false
        - text: "/script_assets/k_1_images/bee_images/2nectar.png"
          correct: false
        - text: "/script_assets/k_1_images/bee_images/3nectar.png"
          correct: false
        - text: "/script_assets/k_1_images/bee_images/4nectar.png"
          correct: true
        content1: "/script_assets/k_1_images/bee_images/2nectar+2nectar.png"
        questions:
        - text: How many nectars is this?
        title: Multiple Choice
      K-1 Digital Footprint Multi 1:
        answers:
        - text: "/script_assets/k_1_images/unplugged_images/digital_footprint_1_a1.png"
          correct: false
        - text: "/script_assets/k_1_images/unplugged_images/digital_footprint_1_a2.png"
          correct: false
        - text: "/script_assets/k_1_images/unplugged_images/digital_footprint_1_a3.png"
          correct: true
        content1: "/script_assets/k_1_images/unplugged_images/digital_footprint_1_q.png"
        questions:
        - text: Which animal has the digital footprint that leaves him or her the <strong>most unsafe</strong>?
        title: Multiple Choice
      K-1 Getting Loopy Multi 1:
        answers:
        - text: "/script_assets/k_1_images/unplugged_images/getting_loopy_1_a1.png"
          correct: true
        - text: "/script_assets/k_1_images/unplugged_images/getting_loopy_1_a2.png"
          correct: false
        - text: "/script_assets/k_1_images/unplugged_images/getting_loopy_1_a3.png"
          correct: false
        content1: "/script_assets/k_1_images/unplugged_images/getting_loopy_1_q.png"
        questions:
        - text: How would you simplify this sequence with loops?
        title: Multiple Choice
      K-1 Happy Maps Multi 1:
        answers:
        - text: "/script_assets/k_1_images/unplugged_images/up.png"
          correct: false
        - text: "/script_assets/k_1_images/unplugged_images/down.png"
          correct: true
        - text: "/script_assets/k_1_images/unplugged_images/left.png"
          correct: false
        - text: "/script_assets/k_1_images/unplugged_images/right.png"
          correct: false
        content1: "/script_assets/k_1_images/unplugged_images/happy_maps_1q.png"
        questions:
        - text: Which arrow gets the Flurb to the treasure?
        title: Multiple Choice
      K-1 Keep it Private Multi 1:
        answers:
        - text: "/script_assets/k_1_images/unplugged_images/keep_it_private_1_a1.png"
          correct: true
        - text: "/script_assets/k_1_images/unplugged_images/keep_it_private_1_a2.png"
          correct: false
        - text: "/script_assets/k_1_images/unplugged_images/keep_it_private_1_a3.png"
          correct: false
        questions:
        - text: Which information should you <strong>not</strong> share online?
        title: Multiple Choice
      K-1 Maze Debugging Multi 1:
        answers:
        - text: "/script_assets/k_1_images/move_blocks/N.png"
          correct: true
        - text: "/script_assets/k_1_images/move_blocks/S.png"
          correct: false
        - text: "/script_assets/k_1_images/move_blocks/E.png"
          correct: false
        - text: "/script_assets/k_1_images/move_blocks/W.png"
          correct: false
        content1: "/script_assets/k_1_images/maze_images/EESq.png, 700"
        questions:
        - text: Which choice should be the final block?
        title: Multiple Choice
      K-1 Maze Loops Multi 1:
        answers:
        - text: "/script_assets/k_1_images/move_blocks/r3_N.png"
          correct: true
        - text: "/script_assets/k_1_images/move_blocks/r3_NN.png"
          correct: false
        - text: "/script_assets/k_1_images/move_blocks/r4_N.png"
          correct: false
        content1: "/script_assets/k_1_images/move_blocks/NNNequals.png, 300"
        questions:
        - text: Which repeat block is the same?
        title: Multiple Choice
      K-1 Maze Loops Multi 2:
        answers:
        - text: "/script_assets/k_1_images/move_blocks/r3_S.png"
          correct: false
        - text: "/script_assets/k_1_images/move_blocks/r3_ES.png"
          correct: false
        - text: "/script_assets/k_1_images/move_blocks/r3_SE.png"
          correct: true
        content1: "/script_assets/k_1_images/move_blocks/SESESEequals.png, 240"
        questions:
        - text: Pick the correct repeat block.
        title: Multiple Choice
      K-1 Maze Multiple Choice 2:
        answers:
        - text: "/script_assets/k_1_images/move_blocks/EN.png"
          correct: false
        - text: "/script_assets/k_1_images/move_blocks/ES.png"
          correct: false
        - text: "/script_assets/k_1_images/move_blocks/WS.png"
          correct: true
        - text: "/script_assets/k_1_images/move_blocks/WN.png"
          correct: false
        content1: "/script_assets/k_1_images/maze_images/maze_WS.png, 500"
        questions:
        - text: Which answer solves this level?
        title: Maze
      K-1 Move It Multi 1:
        answers:
        - text: "/script_assets/k_1_images/unplugged_images/rightright.png"
          correct: false
        - text: "/script_assets/k_1_images/unplugged_images/leftleft.png"
          correct: true
        - text: "/script_assets/k_1_images/unplugged_images/upleft.png"
          correct: false
        - text: "/script_assets/k_1_images/unplugged_images/leftdown.png"
          correct: false
        content1: "/script_assets/k_1_images/unplugged_images/move_it_1_q.png"
        questions:
        - text: Which algorithm gets the Flurb to the flowers?
        title: Multiple Choice
      K-1 Plant a Seed Multi 1:
        answers:
        - text: "/script_assets/k_1_images/unplugged_images/poke-hole.png"
          correct: false
        - text: "/script_assets/k_1_images/unplugged_images/foot-in-shoe.png"
          correct: false
        - text: "/script_assets/k_1_images/unplugged_images/dirty-teeth.png"
          correct: true
        content1: "/script_assets/k_1_images/unplugged_images/plant_a_seed_1_q.png"
        questions:
        - text: Which step should go at the beginning of this algorithm?
        title: Multiple Choice
      K-1 Plant a Seed Multi 2:
        answers:
        - text: "/script_assets/k_1_images/unplugged_images/brush-teeth.png"
          correct: false
        - text: "/script_assets/k_1_images/unplugged_images/cover-seed.png"
          correct: true
        - text: "/script_assets/k_1_images/unplugged_images/water-pot.png"
          correct: false
        content1: "/script_assets/k_1_images/unplugged_images/plant_a_seed_2_q.png"
        questions:
        - text: Which step should fill in the blank for this algorithm?
        title: Multiple Choice
      K-1 Word Search Multi 1:
        answers:
        - text: "/script_assets/k_1_images/move_blocks/EEES.png"
          correct: false
        - text: "/script_assets/k_1_images/move_blocks/EESS.png"
          correct: true
        - text: "/script_assets/k_1_images/move_blocks/ESSS.png"
          correct: false
        content1: "/script_assets/k_1_images/search_images/move.png, 450"
        questions:
        - text: Which blocks spell "MOVE"?
        title: Multiple Choice
      K-1 Word Search Multi 3:
        answers:
        - text: SET
          correct: false
        - text: SQUARE
          correct: true
        - text: SOUTH
          correct: false
        content1: "/script_assets/k_1_images/search_images/square.png, 700"
        questions:
        - text: Which word is spelled?
        title: Multiple Choice
      behaviors 1 predict:
        answers:
        - text: The sprite will spin
          correct: false
          feedback: Incorrect.
        - text: The sprite will shrink.
          correct: true
          feedback: Correct!
        - text: The sprite will move.
          correct: false
          feedback: Incorrect.
        - text: The sprite will change colors.
          correct: false
          feedback: Incorrect
        questions:
        - text: Click the "edit" button to see how the `mystery behavior` works. Study the code inside, then make a prediction.
      behaviors 4 predict:
        answers:
        - text: Left then down
          correct: false
          feedback: Incorrect.
        - text: Diagonally
          correct: true
          feedback: Correct!
        - text: Zig zag
          correct: false
          feedback: 'Incorrect. '
        - text: Down, then left
          correct: false
          feedback: Incorrect
        questions:
        - text: Make a prediction. Which way will the satellite move towards the galaxy?
      courseC_multi_artist_prog6_predict1:
        answers:
        - text: The artist will draw a triangle with three equal sides.
          correct: false
          feedback: Incorrect.  The artist draws a square.
        - text: The artist will draw a single line.
          correct: false
          feedback: Incorrect.  The artist draws a square.
        - text: The artist draws a square.
          correct: true
          feedback: Correct!
        - text: I don't know.
          correct: false
          feedback: The artist draws a square.
        questions:
        - text: Look carefully at the code below.  What will happen when you click "Run"?
      courseC_multi_artist_prog6_predict1_2018:
        answers:
        - text: The artist will draw a triangle with three equal sides.
          correct: false
          feedback: Incorrect.  The artist draws a square.
        - text: The artist will draw a single line.
          correct: false
          feedback: Incorrect.  The artist draws a square.
        - text: The artist will draw a square.
          correct: true
          feedback: Correct!
        - text: I don't know.
          correct: false
          feedback: The artist draws a square.
        questions:
        - text: Look carefully at the code below.  What will happen when you click "Run"?
      courseC_multi_artist_prog6_predict1_2018_2019:
        answers:
        - text: The artist will draw a triangle with three equal sides.
          correct: false
          feedback: Incorrect.  The artist draws a square.
        - text: The artist will draw a single line.
          correct: false
          feedback: Incorrect.  The artist draws a square.
        - text: The artist will draw a square.
          correct: true
          feedback: Correct!
        - text: I don't know.
          correct: false
          feedback: The artist draws a square.
        questions:
        - text: Look carefully at the code below.  What will happen when you click "Run"?
      courseC_multi_harvester_loops11_predict1:
        answers:
        - text: '4'
          correct: false
          feedback: Incorrect. The farmer will collect 4 pumpkins in each of 3 loops.  4 times 3 is 12!
        - text: '12'
          correct: true
          feedback: Correct!
        - text: '15'
          correct: false
          feedback: Incorrect. The farmer will collect 4 pumpkins in each of 3 loops.  4 times 3 is 12!
        - text: I don't know.
          correct: false
          feedback: The farmer will collect 4 pumpkins in each of 3 loops.  4 times 3 is 12!
        questions:
        - text: Look closely at the code below. How many pumpkins will the farmer collect after you click "Run"?
      courseC_multi_harvester_loops11_predict1_2018:
        answers:
        - text: '4'
          correct: false
          feedback: Incorrect. The farmer will collect 4 pumpkins in each of 3 loops.  4 times 3 is 12!
        - text: '12'
          correct: true
          feedback: Correct!
        - text: '15'
          correct: false
          feedback: Incorrect. The farmer will collect 4 pumpkins in each of 3 loops.  4 times 3 is 12!
        - text: I don't know.
          correct: false
          feedback: The farmer will collect 4 pumpkins in each of 3 loops.  4 times 3 is 12!
        questions:
        - text: Look closely at the code below. How many pumpkins will the farmer collect after you click "Run"?
      courseC_multi_harvester_loops11_predict1_2018_2019:
        answers:
        - text: '4'
          correct: false
          feedback: Incorrect. The farmer will collect 4 pumpkins in each of 3 loops.  4 times 3 is 12!
        - text: '12'
          correct: true
          feedback: Correct!
        - text: '15'
          correct: false
          feedback: Incorrect. The farmer will collect 4 pumpkins in each of 3 loops.  4 times 3 is 12!
        - text: I don't know.
          correct: false
          feedback: The farmer will collect 4 pumpkins in each of 3 loops.  4 times 3 is 12!
        questions:
        - text: Look closely at the code below. How many pumpkins will the farmer collect after you click "Run"?
      courseC_multi_maze_debugging8_predict1:
        answers:
        - text: The program won't fail. Scrat will get to the acorn.
          correct: false
          feedback: Incorrect. Scrat goes the wrong way after his final turn.
        - text: Scrat will go the wrong way after his final turn.
          correct: true
          feedback: Correct!
        - text: Scrat takes one too few steps and ends up short of the acorn.
          correct: false
          feedback: Incorrect. Taking one too few steps happens after Scrat turns the wrong way.
        - text: I don't know.
          correct: false
          feedback: 'The first error is that Scrat goes the wrong way after his final turn. '
        questions:
        - text: 'Look closely at the code below.  What is the first bug that will make this program fail? '
      courseC_multi_maze_debugging8_predict1_2018:
        answers:
        - text: The program won't fail. Scrat will get to the acorn.
          correct: false
          feedback: Incorrect. Scrat goes the wrong way after his final turn.
        - text: Scrat will go the wrong way after his final turn.
          correct: true
          feedback: Correct!
        - text: Scrat takes one too few steps and ends up short of the acorn.
          correct: false
          feedback: Incorrect. Taking one too few steps happens after Scrat turns the wrong way.
        - text: I don't know.
          correct: false
          feedback: 'The first error is that Scrat goes the wrong way after his final turn. '
        questions:
        - text: 'Look closely at the code below.  What is the first bug that will make this program fail? '
      courseC_multi_maze_debugging8_predict1_2018_2019:
        answers:
        - text: The program won't fail. Scrat will get to the acorn.
          correct: false
          feedback: Incorrect. Scrat goes the wrong way after his final turn.
        - text: Scrat will go the wrong way after his final turn.
          correct: true
          feedback: Correct!
        - text: Scrat takes one too few steps and ends up short of the acorn.
          correct: false
          feedback: Incorrect. Taking one too few steps happens after Scrat turns the wrong way.
        - text: I don't know.
          correct: false
          feedback: 'The first error is that Scrat goes the wrong way after his final turn. '
        questions:
        - text: 'Look closely at the code below.  What is the first bug that will make this program fail? '
      courseC_multi_maze_programming8_predict1:
        answers:
        - text: The bird will end up one step short of the pig.
          correct: false
          feedback: Incorrect. This code gets the bird perfectly to the pig.
        - text: The bird will make it to the pig.
          correct: true
          feedback: Correct!
        - text: The bird will run into the TNT.
          correct: false
          feedback: Incorrect. This code gets the bird perfectly to the pig.
        - text: I don't know.
          correct: false
          feedback: This code gets the bird perfectly to the pig.
        questions:
        - text: Read through the code below very carefully.  What will happen when you click "Run"?
      courseC_multi_maze_programming8_predict1_2018:
        answers:
        - text: The bird will end up one step short of the pig.
          correct: false
          feedback: Incorrect. This code gets the bird perfectly to the pig.
        - text: The bird will make it to the pig.
          correct: true
          feedback: Correct!
        - text: The bird will run into the TNT.
          correct: false
          feedback: Incorrect. This code gets the bird perfectly to the pig.
        - text: I don't know.
          correct: false
          feedback: This code gets the bird perfectly to the pig.
        questions:
        - text: Read through the code below very carefully.  What will happen when you click "Run"?
      courseC_multi_maze_programming8_predict1_2018_2019:
        answers:
        - text: The bird will end up one step short of the pig.
          correct: false
          feedback: Incorrect. This code gets the bird perfectly to the pig.
        - text: The bird will make it to the pig.
          correct: true
          feedback: Correct!
        - text: The bird will run into the TNT.
          correct: false
          feedback: Incorrect. This code gets the bird perfectly to the pig.
        - text: I don't know.
          correct: false
          feedback: This code gets the bird perfectly to the pig.
        questions:
        - text: Read through the code below very carefully.  What will happen when you click "Run"?
      courseC_multi_starWars_predict1:
        answers:
        - text: BB-8 will not move.
          correct: false
          feedback: Incorrect. The repeat block will make the BB-8 move forward 5 times.
        - text: BB-8 will move only one space
          correct: false
          feedback: Incorrect. The repeat block will make the BB-8 move forward 5 times.
        - text: BB-8 will move 5 times and get all of the scrap metal
          correct: true
          feedback: Correct!
        - text: I don't know
          correct: false
          feedback: The repeat block will make the BB-8 move forward 5 times.
        questions:
        - text: What do you think will happen when you click "Run"?
      courseC_multi_starWars_predict1_2018:
        answers:
        - text: BB-8 will not move.
          correct: false
          feedback: Incorrect. The repeat block will make the BB-8 move forward 5 times.
        - text: BB-8 will move only one space
          correct: false
          feedback: Incorrect. The repeat block will make the BB-8 move forward 5 times.
        - text: BB-8 will move 5 times and get all of the scrap metal
          correct: true
          feedback: Correct!
        - text: I don't know
          correct: false
          feedback: The repeat block will make the BB-8 move forward 5 times.
        questions:
        - text: What do you think will happen when you click "Run"?
      courseC_multi_starWars_predict1_2018_2019:
        answers:
        - text: BB-8 will not move.
          correct: false
          feedback: Incorrect. The repeat block will make the BB-8 move forward 5 times.
        - text: BB-8 will move only one space
          correct: false
          feedback: Incorrect. The repeat block will make the BB-8 move forward 5 times.
        - text: BB-8 will move 5 times and get all of the scrap metal
          correct: true
          feedback: Correct!
        - text: I don't know
          correct: false
          feedback: The repeat block will make the BB-8 move forward 5 times.
        questions:
        - text: What do you think will happen when you click "Run"?
      courseC_multi_starWars_predict2:
        answers:
        - text: BB-8 will travel too far in the first loop.
          correct: false
          feedback: Incorrect. The first loop only lets BB-8 move forward 2 spaces, when it needs to move forward by 3 spaces.
        - text: BB-8 will not travel far enough in the first loop in order to get all of the scrap metal.
          correct: true
          feedback: Correct!
        - text: BB-8 will collect all of the scrap metal with no problems.
          correct: false
          feedback: Incorrect. The first loop only lets BB-8 move forward 2 spaces, when it needs to move forward by 3 spaces.
        - text: I don't know.
          correct: false
          feedback: The first loop only lets BB-8 move forward 2 spaces, when it needs to move forward by 3 spaces.
        questions:
        - text: Look closely at the code below.  What will happen when you click "Run"?
      courseC_multi_starWars_predict2_2018:
        answers:
        - text: BB-8 will travel too far in the first loop.
          correct: false
          feedback: Incorrect. The first loop only lets BB-8 move forward 2 spaces, when it needs to move forward by 3 spaces.
        - text: BB-8 will not travel far enough in the first loop in order to get all of the scrap metal.
          correct: true
          feedback: Correct!
        - text: BB-8 will collect all of the scrap metal with no problems.
          correct: false
          feedback: Incorrect. The first loop only lets BB-8 move forward 2 spaces, when it needs to move forward by 3 spaces.
        - text: I don't know.
          correct: false
          feedback: The first loop only lets BB-8 move forward 2 spaces, when it needs to move forward by 3 spaces.
        questions:
        - text: Look closely at the code below.  What will happen when you click "Run"?
      courseC_multi_starWars_predict2_2018_2019:
        answers:
        - text: BB-8 will travel too far in the first loop.
          correct: false
          feedback: Incorrect. The first loop only lets BB-8 move forward 2 spaces, when it needs to move forward by 3 spaces.
        - text: BB-8 will not travel far enough in the first loop in order to get all of the scrap metal.
          correct: true
          feedback: Correct!
        - text: BB-8 will collect all of the scrap metal with no problems.
          correct: false
          feedback: Incorrect. The first loop only lets BB-8 move forward 2 spaces, when it needs to move forward by 3 spaces.
        - text: I don't know.
          correct: false
          feedback: The first loop only lets BB-8 move forward 2 spaces, when it needs to move forward by 3 spaces.
        questions:
        - text: Look closely at the code below.  What will happen when you click "Run"?
      courseD_multi_artist_binary8_predict1:
        answers:
        - text: A
          correct: false
          feedback: Incorrect.
        - text: B
          correct: false
          feedback: Incorrect.
        - text: C
          correct: false
          feedback: Incorrect.
        - text: D
          correct: true
          feedback: Correct!
        questions:
        - text: Take a close look at the code below.  Which image will it create after you click "Run"?
      courseD_multi_artist_binary8_predict1_2018:
        answers:
        - text: A
          correct: false
          feedback: Incorrect.
        - text: B
          correct: false
          feedback: Incorrect.
        - text: C
          correct: false
          feedback: Incorrect.
        - text: D
          correct: true
          feedback: Correct!
        questions:
        - text: Take a close look at the code below.  Which image will it create after you click "Run"?
      courseD_multi_artist_binary8_predict1_2018_2019:
        answers:
        - text: A
          correct: false
          feedback: Incorrect.
        - text: B
          correct: false
          feedback: Incorrect.
        - text: C
          correct: false
          feedback: Incorrect.
        - text: D
          correct: true
          feedback: Correct!
        questions:
        - text: Take a close look at the code below.  Which image will it create after you click "Run"?
      courseD_multi_artist_nestedLoops9_predict1:
        answers:
        - text: A
          correct: true
          feedback: Correct!
        - text: B
          correct: false
          feedback: Incorrect.  The inner loop makes a pentagon, and the outer loop repeats it 4 times in a circle.
        - text: C
          correct: false
          feedback: Incorrect.  The inner loop makes a pentagon, and the outer loop repeats it 4 times in a circle.
        - text: I don't know.
          correct: false
          feedback: The inner loop makes a pentagon, and the outer loop repeats it 4 times in a circle.
        questions:
        - text: Take a good look at the code below.  Which drawing will this program make when you click "Run"?
      courseD_multi_artist_nestedLoops9_predict1_2018:
        answers:
        - text: A
          correct: true
          feedback: Correct!
        - text: B
          correct: false
          feedback: Incorrect.  The inner loop makes a pentagon, and the outer loop repeats it 4 times in a circle.
        - text: C
          correct: false
          feedback: Incorrect.  The inner loop makes a pentagon, and the outer loop repeats it 4 times in a circle.
        - text: I don't know.
          correct: false
          feedback: The inner loop makes a pentagon, and the outer loop repeats it 4 times in a circle.
        questions:
        - text: Take a good look at the code below.  Which drawing will this program make when you click "Run"?
      courseD_multi_artist_nestedLoops9_predict1_2018_2019:
        answers:
        - text: A
          correct: true
          feedback: Correct!
        - text: B
          correct: false
          feedback: Incorrect.  The inner loop makes a pentagon, and the outer loop repeats it 4 times in a circle.
        - text: C
          correct: false
          feedback: Incorrect.  The inner loop makes a pentagon, and the outer loop repeats it 4 times in a circle.
        - text: I don't know.
          correct: false
          feedback: The inner loop makes a pentagon, and the outer loop repeats it 4 times in a circle.
        questions:
        - text: Take a good look at the code below.  Which drawing will this program make when you click "Run"?
      courseD_multi_bee_conditionals1_predict1:
        answers:
        - text: 'The bee will move to the cloud and try to get nectar, no matter what. '
          correct: false
          feedback: Incorrect. The `if at flower` block assures that the bee will only try to get nectar if there is a flower under the cloud.
        - text: The bee will move to the cloud and only try to get nectar if there is a flower underneath.
          correct: true
          feedback: Correct!
        - text: 'The bee will move to the cloud and then do nothing, no matter what. '
          correct: false
          feedback: Incorrect. The `if at flower` block assures that the bee will try to get nectar if there is a flower under the cloud.
        - text: I don't know.
          correct: false
          feedback: The `if at flower` block assures that the bee will only try to get nectar if there is a flower under the cloud.
        questions:
        - text: The cloud is blocking the view. There could be a flower under this cloud. If there is a flower, the bee will need to collect nectar once. If there is not a flower the bee should do nothing. Take a good look at the code below.  What do you think will happen after you click "Run"?
      courseD_multi_bee_conditionals1_predict1_2018:
        answers:
        - text: 'The bee will move to the cloud and try to get nectar, no matter what. '
          correct: false
          feedback: Incorrect. The `if at flower` block assures that the bee will only try to get nectar if there is a flower under the cloud.
        - text: The bee will move to the cloud and only try to get nectar if there is a flower underneath.
          correct: true
          feedback: Correct!
        - text: 'The bee will move to the cloud and then do nothing, no matter what. '
          correct: false
          feedback: Incorrect. The `if at flower` block assures that the bee will try to get nectar if there is a flower under the cloud.
        - text: I don't know.
          correct: false
          feedback: The `if at flower` block assures that the bee will only try to get nectar if there is a flower under the cloud.
        questions:
        - text: The cloud is blocking the view. There could be a flower under this cloud. If there is a flower, the bee will need to collect nectar once. If there is not a flower the bee should do nothing. Take a good look at the code below.  What do you think will happen after you click "Run"?
      courseD_multi_bee_conditionals1_predict1_2018_2019:
        answers:
        - text: 'The bee will move to the cloud and try to get nectar, no matter what. '
          correct: false
          feedback: Incorrect. The `if at flower` block assures that the bee will only try to get nectar if there is a flower under the cloud.
        - text: The bee will move to the cloud and only try to get nectar if there is a flower underneath.
          correct: true
          feedback: Correct!
        - text: 'The bee will move to the cloud and then do nothing, no matter what. '
          correct: false
          feedback: Incorrect. The `if at flower` block assures that the bee will try to get nectar if there is a flower under the cloud.
        - text: I don't know.
          correct: false
          feedback: The `if at flower` block assures that the bee will only try to get nectar if there is a flower under the cloud.
        questions:
        - text: The cloud is blocking the view. There could be a flower under this cloud. If there is a flower, the bee will need to collect nectar once. If there is not a flower the bee should do nothing. Take a good look at the code below.  What do you think will happen after you click "Run"?
      courseD_multi_bee_conditionals7_predict2:
        answers:
        - text: The bee will get nectar at each flower and honey at each honeycomb.
          correct: true
          feedback: Correct!
        - text: The bee will try to get nectar from both flowers and honeycomb.
          correct: false
          feedback: Incorrect. The `if at flower` block lets the bee get nectar at each flower and honey at each honeycomb.
        - text: The bee will try to get honey from both flowers and honeycomb.
          correct: false
          feedback: Incorrect. Incorrect. The `if at flower` block lets the bee get nectar at each flower and honey at each honeycomb..
        - text: I don't know.
          correct: false
          feedback: The `if at flower` block lets the bee get nectar at each flower and honey at each honeycomb.
        questions:
        - text: 'Look carefully at the code below.  What do you think will happen after you click "Run"? Remember: there will only ever bee *one* honeycomb or *one* flower behind each cloud.'
      courseD_multi_bee_conditionals7_predict2_2018:
        answers:
        - text: The bee will get nectar at each flower and honey at each honeycomb.
          correct: true
          feedback: Correct!
        - text: The bee will try to get nectar from both flowers and honeycomb.
          correct: false
          feedback: Incorrect. The `if at flower` block lets the bee get nectar at each flower and honey at each honeycomb.
        - text: The bee will try to get honey from both flowers and honeycomb.
          correct: false
          feedback: Incorrect. Incorrect. The `if at flower` block lets the bee get nectar at each flower and honey at each honeycomb..
        - text: I don't know.
          correct: false
          feedback: The `if at flower` block lets the bee get nectar at each flower and honey at each honeycomb.
        questions:
        - text: 'Look carefully at the code below.  What do you think will happen after you click "Run"? Remember: there will only ever bee *one* honeycomb or *one* flower behind each cloud.'
      courseD_multi_bee_conditionals7_predict2_2018_2019:
        answers:
        - text: The bee will get nectar at each flower and honey at each honeycomb.
          correct: true
          feedback: Correct!
        - text: The bee will try to get nectar from both flowers and honeycomb.
          correct: false
          feedback: Incorrect. The `if at flower` block lets the bee get nectar at each flower and honey at each honeycomb.
        - text: The bee will try to get honey from both flowers and honeycomb.
          correct: false
          feedback: Incorrect. Incorrect. The `if at flower` block lets the bee get nectar at each flower and honey at each honeycomb..
        - text: I don't know.
          correct: false
          feedback: The `if at flower` block lets the bee get nectar at each flower and honey at each honeycomb.
        questions:
        - text: 'Look carefully at the code below.  What do you think will happen after you click "Run"? Remember: there will only ever be *one* honeycomb or *one* flower behind each cloud.'
      courseD_multi_bee_nestedLoops2_predict1:
        answers:
        - text: The bee will move forward and get nectar only one time.
          correct: false
          feedback: Incorrect.  The bee loops the looped action of moving forward and collecting nectar, allowing it to solve the puzzle.
        - text: The bee will get only 2 units of nectar.
          correct: false
          feedback: Incorrect.  The bee loops the looped action of moving forward and collecting nectar, allowing it to solve the puzzle.
        - text: The bee will get all of the nectar.
          correct: true
          feedback: Correct!
        - text: I don't know.
          correct: false
          feedback: The bee loops the looped action of moving forward and collecting nectar, allowing it to solve the puzzle.
        questions:
        - text: Look closely at the nested loops below.  What will happen when you click "Run"?
      courseD_multi_bee_nestedLoops2_predict1_2018:
        answers:
        - text: The bee will move forward and get nectar only one time.
          correct: false
          feedback: Incorrect.  The bee loops the looped action of moving forward and collecting nectar, allowing it to solve the puzzle.
        - text: The bee will get only 2 units of nectar.
          correct: false
          feedback: Incorrect.  The bee loops the looped action of moving forward and collecting nectar, allowing it to solve the puzzle.
        - text: The bee will get all of the nectar.
          correct: true
          feedback: Correct!
        - text: I don't know.
          correct: false
          feedback: The bee loops the looped action of moving forward and collecting nectar, allowing it to solve the puzzle.
        questions:
        - text: Look closely at the nested loops below.  What will happen when you click "Run"?
      courseD_multi_bee_nestedLoops2_predict1_2018_2019:
        answers:
        - text: The bee will move forward and get nectar only one time.
          correct: false
          feedback: Incorrect.  The bee loops the looped action of moving forward and collecting nectar, allowing it to solve the puzzle.
        - text: The bee will get only 2 units of nectar.
          correct: false
          feedback: Incorrect.  The bee loops the looped action of moving forward and collecting nectar, allowing it to solve the puzzle.
        - text: The bee will get all of the nectar.
          correct: true
          feedback: Correct!
        - text: I don't know.
          correct: false
          feedback: The bee loops the looped action of moving forward and collecting nectar, allowing it to solve the puzzle.
        questions:
        - text: Look closely at the nested loops below.  What will happen when you click "Run"?
      courseD_multi_bee_nestedLoops9_predict2:
        answers:
        - text: '4'
          correct: false
          feedback: Incorrect. The bee collects 2 nectar in a loop moving forward, then 2 nectar in a loop down.  This is all inside of another loop that happens twice. 4 times 2 is 8!
        - text: '8'
          correct: true
          feedback: Correct!
        - text: '12'
          correct: false
          feedback: Incorrect. The bee collects 2 nectar in a loop moving forward, then 2 nectar in a loop down.  This is all inside of another loop that happens twice. 4 times 2 is 8!
        - text: I don't know.
          correct: false
          feedback: The bee collects 2 nectar in a loop moving forward, then 2 nectar in a loop down.  This is all inside of another loop that happens twice. 4 times 2 is 8!
        questions:
        - text: Look closely at the code below. How much honey will the bee make when you click "Run"?
      courseD_multi_bee_nestedLoops9_predict2_2018:
        answers:
        - text: '4'
          correct: false
          feedback: Incorrect. The bee collects 2 nectar in a loop moving forward, then 2 nectar in a loop down.  This is all inside of another loop that happens twice. 4 times 2 is 8!
        - text: '8'
          correct: true
          feedback: Correct!
        - text: '12'
          correct: false
          feedback: Incorrect. The bee collects 2 nectar in a loop moving forward, then 2 nectar in a loop down.  This is all inside of another loop that happens twice. 4 times 2 is 8!
        - text: I don't know.
          correct: false
          feedback: The bee collects 2 nectar in a loop moving forward, then 2 nectar in a loop down.  This is all inside of another loop that happens twice. 4 times 2 is 8!
        questions:
        - text: Look closely at the code below. How much honey will the bee make when you click "Run"?
      courseD_multi_bee_nestedLoops9_predict2_2018_2019:
        answers:
        - text: '4'
          correct: false
          feedback: Incorrect. The bee collects 2 nectar in a loop moving forward, then 2 nectar in a loop down.  This is all inside of another loop that happens twice. 4 times 2 is 8!
        - text: '8'
          correct: true
          feedback: Correct!
        - text: '12'
          correct: false
          feedback: Incorrect. The bee collects 2 nectar in a loop moving forward, then 2 nectar in a loop down.  This is all inside of another loop that happens twice. 4 times 2 is 8!
        - text: I don't know.
          correct: false
          feedback: The bee collects 2 nectar in a loop moving forward, then 2 nectar in a loop down.  This is all inside of another loop that happens twice. 4 times 2 is 8!
        questions:
        - text: Look closely at the code below. How much honey will the bee make when you click "Run"?
      courseD_multi_collector_debugging10_predict1:
        answers:
        - text: Laurel will turn the wrong way when making a square.
          correct: false
          feedback: Incorrect. This was partially correct, but the loop also does not run long enough to get all of the treasure.
        - text: 'The loop does not run long enough for Laurel to get to all of the treasure. '
          correct: false
          feedback: Incorrect. This was partially correct, but the bee also turns the wrong way when trying to make a square.
        - text: Laurel turns the wrong way *and* the loop doesn't run long enough for Laurel to get all of the treasure.
          correct: true
          feedback: Correct!
        - text: I don't know.
          correct: false
          feedback: Laurel turns the wrong way *and* the loop doesn't run long enough for Laurel to get all of the treasure.
        questions:
        - text: 'Look closely at the code below.  Why won''t Laurel collect all of the treasure when you click "Run"? Warning: This is a tricky question, make sure you read all of the options before answering!'
      courseD_multi_farmer_condLoops9_predict1:
        answers:
        - text: The harvester will collect all of the crops.
          correct: false
          feedback: Incorrect. There is no code here for collecting the pumpkin.
        - text: The harvester will not collect any of the crops with the path she is taking.
          correct: false
          feedback: Incorrect. The code will have the harvester repeatedly make a stairstep pattern and collect as much corn or lettuce as she comes across. She will not pick the pumpkin.
        - text: The harvester will collect all of the crops, except the pumpkin.
          correct: true
          feedback: Correct!
        - text: I don't know.
          correct: false
          feedback: The code will have the harvester repeatedly make a stairstep pattern and collect as much corn or lettuce as she comes across. She will not pick the pumpkin.
        questions:
        - text: Take a close look at the code below.  What will happen after you click "Run"?
      courseD_multi_farmer_condLoops9_predict1_2018:
        answers:
        - text: The harvester will collect all of the crops.
          correct: false
          feedback: Incorrect. There is no code here for picking the pumpkin.
        - text: The harvester will not pick any of the crops with the path she is taking.
          correct: false
          feedback: Incorrect. The code will have the harvester repeatedly make a stairstep pattern and pick as much corn or lettuce as she comes across. She will not pick the pumpkin.
        - text: The harvester will pick all of the crops, except the pumpkin.
          correct: true
          feedback: Correct!
        - text: I don't know.
          correct: false
          feedback: The code will have the harvester repeatedly make a stairstep pattern and pick as much corn or lettuce as she comes across. She will not pick the pumpkin.
        questions:
        - text: Take a close look at the code below.  What will happen after you click "Run"?
      courseD_multi_farmer_condLoops9_predict1_2018_2019:
        answers:
        - text: The harvester will collect all of the crops.
          correct: false
          feedback: Incorrect. There is no code here for picking the pumpkin.
        - text: The harvester will not pick any of the crops with the path she is taking.
          correct: false
          feedback: Incorrect. The code will have the harvester repeatedly make a stairstep pattern and pick as much corn or lettuce as she comes across. She will not pick the pumpkin.
        - text: The harvester will pick all of the crops, except the pumpkin.
          correct: true
          feedback: Correct!
        - text: I don't know.
          correct: false
          feedback: The code will have the harvester repeatedly make a stairstep pattern and pick as much corn or lettuce as she comes across. She will not pick the pumpkin.
        questions:
        - text: Take a close look at the code below.  What will happen after you click "Run"?
      courseD_multi_farmer_ramp13:
        answers:
        - text: The farmer will walk to the end of the path and harvest the pumpkin.
          correct: false
          feedback: Incorrect. The `pick pumpkin` block is inside the loop, so the farmer will try to pick pumpkins at each step, instead of just at the end.
        - text: The farmer will try to pick pumpkins at each square, but won't ever make it to the pumpkin.
          correct: true
          feedback: Correct!
        - text: The farmer will walk four spaces, then try to pick one pumpkin.
          correct: false
          feedback: Incorrect. The `pick pumpkin` block is inside the loop, so the farmer will try to pick pumpkins at each step, instead of just at the end.
        - text: I don't know.
          correct: false
          feedback: The `pick pumpkin` block is inside the loop, so the farmer will try to pick pumpkins at each step, instead of just at the end.
        questions:
        - text: " "
      courseD_multi_farmer_while10_predict2:
        answers:
        - text: Nothing.  This code will leave only level ground.
          correct: false
          feedback: Incorrect. There is no code to remove dirt from the pile.
        - text: This code will leave the pile completely untouched.
          correct: true
          feedback: Correct!
        - text: This code will leave the holes completely untouched.
          correct: false
          feedback: Incorrect. The `while` loop will handle any size loop, but there is no code to remove dirt from the pile.
        - text: I don't know.
          correct: false
          feedback: The `while` loop will handle any size loop, but there is no code to remove dirt from the pile.
        questions:
        - text: Take a good look at the code below. What will be left at the end of this puzzle?
      courseD_multi_farmer_while10_predict2_2018:
        answers:
        - text: Nothing.  This code will leave only level ground.
          correct: false
          feedback: Incorrect. There is no code to remove dirt from the pile.
        - text: This code will leave the pile completely untouched.
          correct: true
          feedback: Correct!
        - text: This code will leave the holes completely untouched.
          correct: false
          feedback: Incorrect. The `while` loop will handle any size loop, but there is no code to remove dirt from the pile.
        - text: I don't know.
          correct: false
          feedback: The `while` loop will handle any size loop, but there is no code to remove dirt from the pile.
        questions:
        - text: Take a good look at the code below. What will be left at the end of this puzzle?
      courseD_multi_farmer_while10_predict2_2018_2019:
        answers:
        - text: Nothing.  This code will leave only level ground.
          correct: false
          feedback: Incorrect. There is no code to remove dirt from the pile.
        - text: This code will leave the pile completely untouched.
          correct: true
          feedback: Correct!
        - text: This code will leave the holes completely untouched.
          correct: false
          feedback: Incorrect. The `while` loop will handle any size loop, but there is no code to remove dirt from the pile.
        - text: I don't know.
          correct: false
          feedback: The `while` loop will handle any size loop, but there is no code to remove dirt from the pile.
        questions:
        - text: Take a good look at the code below. What will be left at the end of this puzzle?
      courseD_multi_farmer_while4_predict1:
        answers:
        - text: Nothing will happen.
          correct: false
          feedback: Incorrect. The farmer will remove dirt as long as there is a pile, then stop when the pile is gone
        - text: The farmer will never stop removing dirt.
          correct: false
          feedback: Incorrect. The farmer will remove dirt as long as there is a pile, then stop when the pile is gone
        - text: The farmer will remove dirt as long as there is a pile, then stop when the pile is gone.
          correct: true
          feedback: Correct!
        - text: I don't know.
          correct: false
          feedback: The farmer will remove dirt as long as there is a pile, then stop when the pile is gone
        questions:
        - text: Look closely at the code below.  What will happen after you click "Run"?
      courseD_multi_farmer_while4_predict1_2018:
        answers:
        - text: Nothing will happen.
          correct: false
          feedback: Incorrect. The farmer will remove dirt as long as there is a pile, then stop when the pile is gone
        - text: The farmer will never stop removing dirt.
          correct: false
          feedback: Incorrect. The farmer will remove dirt as long as there is a pile, then stop when the pile is gone
        - text: The farmer will remove dirt as long as there is a pile, then stop when the pile is gone.
          correct: true
          feedback: Correct!
        - text: I don't know.
          correct: false
          feedback: The farmer will remove dirt as long as there is a pile, then stop when the pile is gone
        questions:
        - text: Look closely at the code below.  What will happen after you click "Run"?
      courseD_multi_farmer_while4_predict1_2018_2019:
        answers:
        - text: Nothing will happen.
          correct: false
          feedback: Incorrect. The farmer will remove dirt as long as there is a pile, then stop when the pile is gone
        - text: The farmer will never stop removing dirt.
          correct: false
          feedback: Incorrect. The farmer will remove dirt as long as there is a pile, then stop when the pile is gone
        - text: The farmer will remove dirt as long as there is a pile, then stop when the pile is gone.
          correct: true
          feedback: Correct!
        - text: I don't know.
          correct: false
          feedback: The farmer will remove dirt as long as there is a pile, then stop when the pile is gone
        questions:
        - text: Look closely at the code below.  What will happen after you click "Run"?
      courseD_multi_maze_until10_predict2:
        answers:
        - text: The zombie will turn right immediately and get stuck.
          correct: true
          feedback: Correct!
        - text: The zombie will make it to the sunflower.
          correct: false
          feedback: Incorrect. In this code, it looks for a right turn *before* it looks to see if it can go straight.  Because of this, the puzzle fails.
        - text: The zombie will turn right on the first path and go around in circles forever.
          correct: false
          feedback: Incorrect. The zombie looks only for a right turn or straight path. It never looks to turn left, so it get stuck almost immediately.
        - text: I don't know.
          correct: false
          feedback: In this code, it looks for a right turn *before* it looks to see if it can go straight.  Because of this, the puzzle fails.
        questions:
        - text: Look carefully at the code below.  What will happen after you click "Run"?
      courseD_multi_maze_until10_predict2_2018:
        answers:
        - text: The zombie will pass the correct path and end up going back and forth forever.
          correct: true
          feedback: Correct!
        - text: The zombie will make it to the sunflower.
          correct: false
          feedback: Incorrect. The zombie will pass the correct path and end up going back and forth forever.
        - text: The zombie will turn right on the first path and go around in circles forever.
          correct: false
          feedback: Incorrect. The zombie will pass the correct path and end up going back and forth forever.
        - text: I don't know.
          correct: false
          feedback: In this code, the zombie will pass the correct path and end up going back and forth forever.
        questions:
        - text: Look carefully at the code below.  What will happen after you click "Run"?
      courseD_multi_maze_until10_predict2_2018_2019:
        answers:
        - text: The zombie will pass the correct path and end up going back and forth forever.
          correct: true
          feedback: Correct!
        - text: The zombie will make it to the sunflower.
          correct: false
          feedback: Incorrect. The zombie will pass the correct path and end up going back and forth forever.
        - text: The zombie will turn right on the first path and go around in circles forever.
          correct: false
          feedback: Incorrect. The zombie will pass the correct path and end up going back and forth forever.
        - text: I don't know.
          correct: false
          feedback: In this code, the zombie will pass the correct path and end up going back and forth forever.
        questions:
        - text: Look carefully at the code below.  What will happen after you click "Run"?
      courseD_multi_maze_until2_predict1:
        answers:
        - text: The bird will not move at all.
          correct: false
          feedback: Incorrect. The code makes the bird move forward while there is a path, then turn left.  It keeps doing this until it reaches the pig!
        - text: The bird will make it to the pig.
          correct: true
          feedback: Correct!
        - text: The bird will move forward and run into the TNT.
          correct: false
          feedback: Incorrect. The code makes the bird move forward while there is a safe path, then turn left.  It keeps doing this until it reaches the pig!
        - text: I don't know.
          correct: false
          feedback: The code makes the bird move forward while there is a path, then turn left.  It keeps doing this until it reaches the pig!.
        questions:
        - text: Take a close look at the code below.  What do you think will happen when you click "Run"?
      courseD_multi_maze_until2_predict1_2018:
        answers:
        - text: The bird will not move at all.
          correct: false
          feedback: Incorrect. The code makes the bird move forward while there is a path, then turn left.  It keeps doing this until it reaches the pig!
        - text: The bird will make it to the pig.
          correct: true
          feedback: Correct!
        - text: The bird will move forward and run into the TNT.
          correct: false
          feedback: Incorrect. The code makes the bird move forward while there is a safe path, then turn left.  It keeps doing this until it reaches the pig!
        - text: I don't know.
          correct: false
          feedback: The code makes the bird move forward while there is a path, then turn left.  It keeps doing this until it reaches the pig!.
        questions:
        - text: Take a close look at the code below.  What do you think will happen when you click "Run"?
      courseD_multi_maze_until2_predict1_2018_2019:
        answers:
        - text: The bird will not move at all.
          correct: false
          feedback: Incorrect. The code makes the bird move forward while there is a path, then turn left.  It keeps doing this until it reaches the pig!
        - text: The bird will make it to the pig.
          correct: true
          feedback: Correct!
        - text: The bird will move forward and run into the TNT.
          correct: false
          feedback: Incorrect. The code makes the bird move forward while there is a safe path, then turn left.  It keeps doing this until it reaches the pig!
        - text: I don't know.
          correct: false
          feedback: The code makes the bird move forward while there is a path, then turn left.  It keeps doing this until it reaches the pig!.
        questions:
        - text: Take a close look at the code below.  What do you think will happen when you click "Run"?
      courseD_multi_scrat_predict1:
        answers:
        - text: Nothing. Scrat will not move at all.
          correct: false
          feedback: Incorrect. Putting the 'move forward' block inside the 'repeat' block will cause Scrat to move forward three times.
        - text: Scrat will move forward three times, turn, then move forward three more times, making it to the acorn!
          correct: true
          feedback: Correct!
        - text: Scrat will move forward, then turn and crash.
          correct: false
          feedback: Incorrect. Putting the 'move forward' block inside the 'repeat' block will cause Scrat to move forward three times.
        - text: I don't know.
          correct: false
          feedback: Putting the 'move forward' block inside the 'repeat' block will cause Scrat to move forward three times. He then turns and moves forward another three times, making it to the acorn!
        questions:
        - text: This code uses a new block. What do you think will happen when you press "Run"?
      courseE_multi_artist_predict1:
        answers:
        - text: The artist will draw the triangle from the last level four times in a rotated pattern.
          correct: true
          feedback: Correct!
        - text: The artist will draw the triangle from the last level four times in a straight line.
          correct: false
          feedback: Incorrect. Notice that there is a `turn 90 degrees` block inside the outer loop. This means that the artist will turn after drawing each triangle.
        - text: The artist will draw three squares in a rotated pattern.
          correct: false
          feedback: Incorrect. Notice that the `repeat 3` loop is inside the `repeat 4` loop. This means that the drawing will be a three sided shape drawn four times.
        - text: I don't know.
          correct: false
          feedback: The `repeat 3` loop is inside the `repeat 4` loop. This means that the artist will draw a triangle, then turn 90 degrees a total of 4 times.
        questions:
        - text: Based on the code below, what do you think will happen if you press 'Run'?
      courseE_multi_bee_functions_predict1:
        answers:
        - text: The same program will work to solve this puzzle, too.
          correct: true
          feedback: Correct!  It doesn't matter that there is a different amount of honey. The function is programmed to handle that.
        - text: The bee won't make enough honey.
          correct: false
          feedback: Incorrect. The function is programmed to handle any amount of honey over 0.
        - text: The bee will try to make too much honey.
          correct: false
          feedback: Incorrect. The function is programmed to handle any amount of honey over 0.
        - text: I don't know.
          correct: false
          feedback: The program will work to solve this puzzle, too. It is programmed to handle any amount of honey over 0.
        questions:
        - text: Here is the exact same program from the last puzzle, but the amount of honey to collect in this puzzle has changed.  What will happen when you click "Run"?
      courseE_multi_farmer_functions11_predict:
        answers:
        - text: The harvester will pick two pumpkins.
          correct: false
          feedback: Incorrect.  The harvester does not call "check and pick" until she gets to the corn.
        - text: The harvester will pick all of the pumpkins.
          correct: false
          feedback: Incorrect.  The harvester does not call "check and pick" until she gets to the corn.
        - text: The harvester will pick the lettuce.
          correct: false
          feedback: Incorrect. The harvester only makes one turn, and ends at the corn.
        - text: The harvester will pick the corn.
          correct: true
          feedback: Correct!
        questions:
        - text: Look at the functions defined below.  What will the harvester pick?
      courseE_multi_farmer_functions11_predict_2018:
        answers:
        - text: The harvester will pick two pumpkins.
          correct: false
          feedback: Incorrect. The harvester goes forward until the end of the path, then turns around and moves back until she picks the lettuce.
        - text: The harvester will pick all of the pumpkins.
          correct: false
          feedback: Incorrect. The harvester goes forward until the end of the path, then turns around and moves back until she picks the lettuce.
        - text: The harvester will pick the lettuce.
          correct: true
          feedback: Correct!
        - text: The harvester will pick the corn.
          correct: false
          feedback: Incorrect. The harvester goes forward until the end of the path, then turns around and moves back until she picks the lettuce.
        questions:
        - text: Look at the functions defined below.  What will the harvester pick?
      courseE_multi_farmer_functions11_predict_2018_2019:
        answers:
        - text: The harvester will pick two pumpkins.
          correct: false
          feedback: Incorrect. The harvester goes forward until the end of the path, then turns around and moves back until she picks the lettuce.
        - text: The harvester will pick all of the pumpkins.
          correct: false
          feedback: Incorrect. The harvester goes forward until the end of the path, then turns around and moves back until she picks the lettuce.
        - text: The harvester will pick the lettuce.
          correct: true
          feedback: Correct!
        - text: The harvester will pick the corn.
          correct: false
          feedback: Incorrect. The harvester goes forward until the end of the path, then turns around and moves back until she picks the lettuce.
        questions:
        - text: Look at the functions defined below.  What will the harvester pick?
      courseE_multi_farmer_predict1:
        answers:
        - text: Nothing. The farmer will remain standing still
          correct: false
          feedback: Incorrect. The `if` statement will help the farmer check if there is a path ahead.  If there is, she will move forward.  Else, if there is no path, she will pick as much lettuce as there is and then turn left.
        - text: The farmer will try to pick lettuce at every space, then run into the wall at the end of the path.
          correct: false
          feedback: Incorrect. The `if` statement will help the farmer check if there is a path ahead.  If there is, she will move forward.  Else, if there is no path, she will pick as much lettuce as there is and then turn left.
        - text: The farmer will correctly travel the path, picking all of the lettuce along the way.
          correct: true
          feedback: Correct!
        - text: I don't know
          correct: false
          feedback: The `if` statement will help the farmer check if there is a path ahead.  If there is, she will move forward.  Else, if there is no path, she will pick as much lettuce as there is and then turn left.
        questions:
        - text: 'Look closely at the code below.  What do you think will happen when you click "Run"? '
      courseE_multi_farmer_predict2:
        answers:
        - text: The farmer will walk until she can't walk any further, then try to pick a pumpkin that's not there.
          correct: false
          feedback: Incorrect. The 'repeat until at pumpkin' block will make sure that the farmer does not keep going once she reaches the pumpkin.
        - text: The farmer will walk only until she gets to the pumpkin, then she will pick the pumpkin.
          correct: true
          feedback: Correct!
        - text: The farmer will not walk anywhere because there's no pumpkin in the first place.
          correct: false
          feedback: Incorrect. There is a pumpkin and the 'repeat until at pumpkin' block will make sure that the farmer does not keep going once she reaches the pumpkin.
        - text: I don't know.
          correct: false
          feedback: The 'repeat until at pumpkin' block will make sure that the farmer starts walking and does not stop until she reaches the pumpkin. Then she will collect the pumpkin.
        questions:
        - text: What do you think will happen in this puzzle when you press 'Run'?
      courseE_multi_maze_predict1:
        answers:
        - text: Nothing. The bird will not move at all.
          correct: false
          feedback: Incorrect. Putting the 'move forward' block inside the 'repeat' block will cause the bird to move forward three times.
        - text: The bird will move forward three times, turn, then move forward three more times, making it to the pig!
          correct: true
          feedback: Correct!
        - text: The bird will move forward, then turn and crash into a wall.
          correct: false
          feedback: Incorrect. Putting the 'move forward' block inside the 'repeat' block will cause the bird to move forward three times.
        - text: I don't know.
          correct: false
          feedback: Putting the 'move forward' block inside the 'repeat' block will cause the bird to move forward three times. The bird then turns and moves forward another three times, making it to the pig!
        questions:
        - text: This code uses a new block. What do you think would happen if you pressed 'Run'?
      courseE_prediction_artistFunction1:
        answers:
        - text: Nothing. The function is not called in the program.
          correct: false
          feedback: Incorrect. The function is actually called two times in the program.
        - text: The artist will draw a single square.
          correct: false
          feedback: Incorrect. The function is actually called two times in the program.
        - text: The artist will draw two squares that overlap.
          correct: false
          feedback: Incorrect. The length of each side of the square is only 100 pixels, but the artist jumps by 175 pixels between functions.
        - text: The artist will draw two squares with a small gap in between.
          correct: true
          feedback: Correct! The function is called two times in the program, with a jump in between.
        questions:
        - text: What will happen when you press "Run"?
      courseE_prediction_artistFunction1_2018:
        answers:
        - text: Nothing. The function is not called in the program.
          correct: false
          feedback: Incorrect. The function is actually called two times in the program.
        - text: The artist will draw a single square.
          correct: false
          feedback: Incorrect. The function is actually called two times in the program.
        - text: The artist will draw two squares that overlap.
          correct: false
          feedback: Incorrect. The length of each side of the square is only 100 pixels, but the artist jumps by 175 pixels between functions.
        - text: The artist will draw two squares with a small gap in between.
          correct: true
          feedback: Correct! The function is called two times in the program, with a jump in between.
        questions:
        - text: What will happen when you press "Run"?
      courseE_prediction_artistFunction1_2018_2019:
        answers:
        - text: Nothing. The function is not called in the program.
          correct: false
          feedback: Incorrect. The function is actually called two times in the program.
        - text: The artist will draw a single square.
          correct: false
          feedback: Incorrect. The function is actually called two times in the program.
        - text: The artist will draw two squares that overlap.
          correct: false
          feedback: Incorrect. The length of each side of the square is only 100 pixels, but the artist jumps by 175 pixels between functions.
        - text: The artist will draw two squares with a small gap in between.
          correct: true
          feedback: Correct! The function is called two times in the program, with a jump in between.
        questions:
        - text: What will happen when you press "Run"?
      courseF_bee_variables_8a_2018:
        answers:
        - text: The bee won't collect any nectar because the variable isn't called "gather".
          correct: false
          feedback: Incorrect.  Your variable's name does not affect its value.
        - text: The bee will only collect 2 nectar.
          correct: true
          feedback: Correct!
        - text: The bee will collect all of the nectar.
          correct: false
          feedback: Incorrect.  The variable gets set back to 0 before the last two function calls.
        - text: I don't know.
          correct: false
          feedback: The variable gets set back to 0 before the last two function calls, where 1 gets added each time. The bee then collects 2 nectar units.
        questions:
        - text: Look at the code below.  How many units of nectar will the bee collect at the end?
        title: Bee Variables Multi
      courseF_bee_variables_8a_2018_2019:
        answers:
        - text: The bee won't collect any nectar because the variable isn't called "gather".
          correct: false
          feedback: Incorrect.  Your variable's name does not affect its value.
        - text: The bee will only collect 2 nectar.
          correct: true
          feedback: Correct!
        - text: The bee will collect all of the nectar.
          correct: false
          feedback: Incorrect.  The variable gets set back to 0 before the last two function calls.
        - text: I don't know.
          correct: false
          feedback: The variable gets set back to 0 before the last two function calls, where 1 gets added each time. The bee then collects 2 nectar units.
        questions:
        - text: Look at the code below.  How many units of nectar will the bee collect at the end?
        title: Bee Variables Multi
      courseF_multi_artist_for10_predict1:
        answers:
        - text: The artist will draw a straight line that increases in thickness from one side of the play space to the other.
          correct: false
          feedback: Incorrect. The artist turns between iterations of the `for` loop.
        - text: 'The artist will draw a spiral and each time through the `for` loop, the line gets longer and thinner. '
          correct: false
          feedback: Incorrect. Each time through the `for` loop, the artist draws a longer line that is also thicker.
        - text: The artist will draw a spiral and each time through the `for` loop, the line gets longer and thicker.
          correct: true
          feedback: Correct!
        - text: I don't know.
          correct: false
          feedback: Incorrect. Each time through the `for` loop, the artist draws a longer line that is also thicker.
        questions:
        - text: What will happen when you click "Run"?
      courseF_multi_artist_for10_predict1_2018:
        answers:
        - text: The artist will draw a straight line that increases in thickness from one side of the play space to the other.
          correct: false
          feedback: Incorrect. The artist turns between iterations of the `for` loop.
        - text: 'The artist will draw a spiral and each time through the `for` loop, the line gets longer and thinner. '
          correct: false
          feedback: Incorrect. Each time through the `for` loop, the artist draws a longer line that is also thicker.
        - text: The artist will draw a spiral and each time through the `for` loop, the line gets longer and thicker.
          correct: true
          feedback: Correct!
        - text: I don't know.
          correct: false
          feedback: Incorrect. Each time through the `for` loop, the artist draws a longer line that is also thicker.
        questions:
        - text: What will happen when you click "Run"?
      courseF_multi_artist_for10_predict1_2018_2019:
        answers:
        - text: The artist will draw a straight line that increases in thickness from one side of the play space to the other.
          correct: false
          feedback: Incorrect. The artist turns between iterations of the `for` loop.
        - text: 'The artist will draw a spiral and each time through the `for` loop, the line gets longer and thinner. '
          correct: false
          feedback: Incorrect. Each time through the `for` loop, the artist draws a longer line that is also thicker.
        - text: The artist will draw a spiral and each time through the `for` loop, the line gets longer and thicker.
          correct: true
          feedback: Correct!
        - text: I don't know.
          correct: false
          feedback: Incorrect. Each time through the `for` loop, the artist draws a longer line that is also thicker.
        questions:
        - text: What will happen when you click "Run"?
      courseF_multi_artist_fwp2_predict1:
        answers:
        - text: The artist will use the same function to draw two different sized boxes.
          correct: true
          feedback: Correct!
        - text: The artist will use two different functions to draw two different sized boxes.
          correct: false
          feedback: Incorrect.  Using parameters lets you use a single function to create different outcomes.
        - text: The artist will use two different functions to draw the same sized box twice.
          correct: false
          feedback: Incorrect.  Using parameters lets you use a single function to create different outcomes.
        - text: I don't know.
          correct: false
          feedback: The program uses parameters to allow a single function to create two different size boxes.
        questions:
        - text: What will happen when you run this program?
      courseF_multi_artist_predict1:
        answers:
        - text: The artist will draw the triangle from the last level four times in a rotated pattern.
          correct: true
          feedback: Correct!
        - text: The artist will draw the triangle from the last level four times in a straight line.
          correct: false
          feedback: Incorrect. Notice that there is a `turn 90 degrees` block inside the outer loop. This means that the artist will turn after drawing each triangle.
        - text: The artist will draw three squares in a rotated pattern.
          correct: false
          feedback: Incorrect. Notice that the `repeat 3` loop is inside the `repeat 4` loop. This means that the drawing will be a three sided shape drawn four times.
        - text: I don't know.
          correct: false
          feedback: The `repeat 3` loop is inside the `repeat 4` loop. This means that the artist will draw a triangle, then turn 90 degrees a total of 4 times.
        questions:
        - text: Based on the code below, what do you think will happen if you press "Run"?
      courseF_multi_artist_variables3a_predict1:
        answers:
        - text: The artist will draw a triangle with 50 pixel sides.
          correct: true
          feedback: Correct!
        - text: The artist will draw a 50-sided polygon with 3 pixel sides.
          correct: false
          feedback: Incorrect. The variable `length` would need to be in the `repeat` loop for that to happen.
        - text: The artist will draw three open sides with 50 degree turns.
          correct: false
          feedback: Incorrect.  The `length` variable would need to be used in the `turn` block for that to happen.
        - text: I don't know.
          correct: false
          feedback: The `length` variable is set to 50 and is being used in the `move forward by` block, so the artist will draw a triangle with 50 pixel sides.
        questions:
        - text: We have set the variable "length" to 50.  What will happen when you click "Run"?
      courseF_multi_artist_variables3a_predict1_2018:
        answers:
        - text: The artist will draw a triangle with 50 pixel sides.
          correct: true
          feedback: Correct!
        - text: The artist will draw a 50-sided polygon with 3 pixel sides.
          correct: false
          feedback: Incorrect. The variable `length` would need to be in the `repeat` loop for that to happen.
        - text: The artist will draw three open sides with 50 degree turns.
          correct: false
          feedback: Incorrect.  The `length` variable would need to be used in the `turn` block for that to happen.
        - text: I don't know.
          correct: false
          feedback: The `length` variable is set to 50 and is being used in the `move forward by` block, so the artist will draw a triangle with 50 pixel sides.
        questions:
        - text: We have set the variable "length" to 50.  What will happen when you click "Run"?
      courseF_multi_artist_variables3a_predict1_2018_2019:
        answers:
        - text: The artist will draw a triangle with 50 pixel sides.
          correct: true
          feedback: Correct!
        - text: The artist will draw a 50-sided polygon with 3 pixel sides.
          correct: false
          feedback: Incorrect. The variable `length` would need to be in the `repeat` loop for that to happen.
        - text: The artist will draw three open sides with 50 degree turns.
          correct: false
          feedback: Incorrect.  The `length` variable would need to be used in the `turn` block for that to happen.
        - text: I don't know.
          correct: false
          feedback: The `length` variable is set to 50 and is being used in the `move forward by` block, so the artist will draw a triangle with 50 pixel sides.
        questions:
        - text: We have set the variable "length" to 50.  What will happen when you click "Run"?
      courseF_multi_bee_conditionals1_predict1:
        answers:
        - text: 'The bee will move to the cloud and try to get nectar, no matter what. '
          correct: false
          feedback: Incorrect. The `if at flower` block assures that the bee will only try to get nectar if there is a flower under the cloud.
        - text: The bee will move to the cloud and only try to get nectar if there is a flower underneath.
          correct: true
          feedback: Correct!
        - text: 'The bee will move to the cloud and then do nothing, no matter what. '
          correct: false
          feedback: Incorrect. The `if at flower` block assures that the bee will try to get nectar if there is a flower under the cloud.
        - text: I don't know.
          correct: false
          feedback: The `if at flower` block assures that the bee will only try to get nectar if there is a flower under the cloud.
        questions:
        - text: If there is not a flower the bee should do nothing. Take a good look at the code below.  What do you think will happen after you click "Run"?
      courseF_multi_bee_conditionals7_predict2:
        answers:
        - text: The bee will get nectar at each flower, otherwise it will make honey.
          correct: true
          feedback: Correct!
        - text: The bee will try to get nectar from both flowers and honeycomb.
          correct: false
          feedback: Incorrect. The `if at flower` block lets the bee get nectar at each flower and make honey if there's not a flower (therefore a honeycomb.).
        - text: The bee will try to get honey from both flowers and honeycomb.
          correct: false
          feedback: Incorrect. Incorrect. The `if at flower` block lets the bee get nectar at each flower and honey at each honeycomb.
        - text: I don't know.
          correct: false
          feedback: The `if at flower` block lets the bee get nectar at each flower, otherwise it makes honey.
        questions:
        - text: Look carefully at the code below.  What do you think will happen after you click "Run"?
      courseF_multi_bee_for3_predict1:
        answers:
        - text: 'The bee will move forward and collect all of the nectar from every flower. '
          correct: false
          feedback: Incorrect. The `for` loop will let the bee collect the right amount of nectar, but it is only set to reach 4 flowers.
        - text: The bee will move forward and collect all of the nectar from every flower, except for one.
          correct: true
          feedback: Correct!
        - text: 'The bee will move forward and collect one nectar from each flower. '
          correct: false
          feedback: Incorrect. The `for` loop will let the bee collect the right amount of nectar, but it is only set to reach 4 flowers.
        - text: 'The bee will move forward and try to collect more nectar than is in the flowers. '
          correct: false
          feedback: Incorrect. The `for` loop will let the bee collect the right amount of nectar, but it is only set to reach 4 flowers.
        questions:
        - text: Read the code below.  What will happen when you click "Run"?
      courseF_multi_bee_for3_predict1_2018:
        answers:
        - text: 'The bee will move forward and collect all of the nectar from every flower. '
          correct: false
          feedback: Incorrect. The `for` loop will let the bee collect the right amount of nectar, but it is only set to reach 4 flowers.
        - text: The bee will move forward and collect all of the nectar from every flower, except for one.
          correct: true
          feedback: Correct!
        - text: 'The bee will move forward and collect one nectar from each flower. '
          correct: false
          feedback: Incorrect. The `for` loop will let the bee collect the right amount of nectar, but it is only set to reach 4 flowers.
        - text: 'I don''t know. '
          correct: false
          feedback: The `for` loop will let the bee collect the right amount of nectar, but it is only set to reach 4 flowers.
        questions:
        - text: Read the code below.  What will happen when you click "Run"?
      courseF_multi_bee_for3_predict1_2018_2019:
        answers:
        - text: 'The bee will move forward and collect all of the nectar from every flower. '
          correct: false
          feedback: Incorrect. The `for` loop will let the bee collect the right amount of nectar, but it is only set to reach 4 flowers.
        - text: The bee will move forward and collect all of the nectar from every flower, except for one.
          correct: true
          feedback: Correct!
        - text: 'The bee will move forward and collect one nectar from each flower. '
          correct: false
          feedback: Incorrect. The `for` loop will let the bee collect the right amount of nectar, but it is only set to reach 4 flowers.
        - text: 'I don''t know. '
          correct: false
          feedback: The `for` loop will let the bee collect the right amount of nectar, but it is only set to reach 4 flowers.
        questions:
        - text: Read the code below.  What will happen when you click "Run"?
      courseF_multi_bee_fwp9_predict1:
        answers:
        - text: The bee will not collect any nectar or honey.
          correct: false
          feedback: Incorrect. The function is set to collect as many nectar or honey as is passed through a parameter.
        - text: 'The bee will collect three nectar or honey, then two nectar or honey in a stair-step pattern. '
          correct: true
          feedback: Correct! The function is set to collect as many nectar or honey as is passed through a parameter.
        - text: 'The bee will collect only one nectar or honey in each iteration of the loop. '
          correct: false
          feedback: Incorrect.  The function is set to collect as many nectar or honey as is passed through a parameter.
        - text: I don't know.
          correct: false
          feedback: Clicking to look inside of the function shows that it is set to collect as many nectar or honey as is passed through a parameter.
        questions:
        - text: What will happen when you click "Run"?
      courseF_multi_playlab_variables4c_predictive1:
        answers:
        - text: The pirate would say, "Pleasure to meet you, Ali." and that is all.
          correct: true
          feedback: 'Correct. '
        - text: The pirate would say, "Pleasure to meet you." and that is all.
          correct: false
          feedback: Incorrect. Notice that the `join` block inserts the provided name into the pirate's sentence.
        - text: The pirate would say, "Ali" and that is all.
          correct: false
          feedback: Incorrect. Notice that the `join` block inserts the provided name into the pirate's sentence.
        - text: I don't know.
          correct: false
          feedback: 'Incorrect. Notice that the `join` block inserts the provided name (Ali) into the pirate''s sentence. '
        questions:
        - text: What would happen if the user entered the name "Ali" at the prompt?
      coursee_prediction_artistfunction2:
        answers:
        - text: The artist will solve the puzzle correctly.
          correct: false
          feedback: Incorrect. The loop uses "draw polygon" instead of "draw line of polygons".
        - text: The artist will draw four squares in a window pattern.
          correct: true
          feedback: Correct!
        - text: The artist will draw only one line of squares.
          correct: false
          feedback: Incorrect. The program does not call "draw line of polygons".
        - text: The artist will draw four squares on top of one another.
          correct: false
          feedback: Incorrect. The loop turns 90 degrees between calls to "draw polygon".
        questions:
        - text: What will happen when you press the "Run" button?
      coursee_prediction_artistfunction2_2018:
        answers:
        - text: The artist will solve the puzzle correctly.
          correct: false
          feedback: Incorrect. The loop uses "draw polygon" instead of "draw line of polygons".
        - text: The artist will draw four squares in a window pattern.
          correct: true
          feedback: Correct!
        - text: The artist will draw only one line of squares.
          correct: false
          feedback: Incorrect. The program does not call "draw line of polygons".
        - text: The artist will draw four squares on top of one another.
          correct: false
          feedback: Incorrect. The loop turns 90 degrees between calls to "draw polygon".
        questions:
        - text: What will happen when you press the "Run" button?
      coursee_prediction_artistfunction2_2018_2019:
        answers:
        - text: The artist will solve the puzzle correctly.
          correct: false
          feedback: Incorrect. The loop uses "draw polygon" instead of "draw line of polygons".
        - text: The artist will draw four squares in a window pattern.
          correct: true
          feedback: Correct!
        - text: The artist will draw only one line of squares.
          correct: false
          feedback: Incorrect. The program does not call "draw line of polygons".
        - text: The artist will draw four squares on top of one another.
          correct: false
          feedback: Incorrect. The loop turns 90 degrees between calls to "draw polygon".
        questions:
        - text: What will happen when you press the "Run" button?
      grade2_multi_collector_A_predict1:
        answers:
        - text: Laurel will collect 4 pieces of treasure using this code.
          correct: false
          feedback: Incorrect.  Laurel tries to collect treasure where there is none and it causes an error.
        - text: Laurel will try to collect treasure where there is not any and it causes an error.
          correct: true
          feedback: Correct!
        - text: Laurel will collect all of the treasure.
          correct: false
          feedback: Incorrect.  Laurel tries to collect treasure where there is none and it causes an error.
        - text: I don't know.
          correct: false
          feedback: Laurel tries to collect treasure where there is none and it causes an error.
        questions:
        - text: Look closely at the code below.  If the code were to run to the end (ignoring any errors) how many pieces of treasure would Laurel collect?
      grade2_multi_collector_A_predict1_2018:
        answers:
        - text: Laurel will collect 4 pieces of treasure using this code.
          correct: false
          feedback: Incorrect.  Laurel tries to collect treasure where there is none and it causes an error.
        - text: Laurel will try to collect treasure where there is not any and it causes an error.
          correct: true
          feedback: Correct!
        - text: Laurel will collect all of the treasure.
          correct: false
          feedback: Incorrect.  Laurel tries to collect treasure where there is none and it causes an error.
        - text: I don't know.
          correct: false
          feedback: Laurel tries to collect treasure where there is none and it causes an error.
        questions:
        - text: Look at this code carefully. What do you think will happen when the program runs?
      grade2_multi_collector_A_predict1_2018_2019:
        answers:
        - text: Laurel will collect 4 pieces of treasure using this code.
          correct: false
          feedback: Incorrect.  Laurel tries to collect treasure where there is none and it causes an error.
        - text: Laurel will try to collect treasure where there is not any and it causes an error.
          correct: true
          feedback: Correct!
        - text: Laurel will collect all of the treasure.
          correct: false
          feedback: Incorrect.  Laurel tries to collect treasure where there is none and it causes an error.
        - text: I don't know.
          correct: false
          feedback: Laurel tries to collect treasure where there is none and it causes an error.
        questions:
        - text: Look at this code carefully. What do you think will happen when the program runs?
